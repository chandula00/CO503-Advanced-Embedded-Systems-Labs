
test.elf:     file format elf32-littlenios2
test.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000801b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x0000550c memsz 0x0000550c flags r-x
    LOAD off    0x00007000 vaddr 0x00000000 paddr 0x0008552c align 2**12
         filesz 0x00001a90 memsz 0x00001d70 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005374  000801b8  000801b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000048  00000000  0008552c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a48  00000048  00085574  00007048  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e0  00001a90  00086fbc  00008a90  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00008a90  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000950  00000000  00000000  00008ab8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000177f8  00000000  00000000  00009408  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00005ad8  00000000  00000000  00020c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00006bea  00000000  00000000  000266d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000fe0  00000000  00000000  0002d2c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000021d8  00000000  00000000  0002e2a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000562f  00000000  00000000  0003047c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  00035aac  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000398  00000000  00000000  00035ac0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0003825c  2**0
                  CONTENTS, READONLY
 17 .cpu          00000004  00000000  00000000  0003825f  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00038263  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00038264  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   0000000a  00000000  00000000  00038265  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    0000000a  00000000  00000000  0003826f  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   0000000a  00000000  00000000  00038279  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 00000003  00000000  00000000  00038283  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 00000051  00000000  00000000  00038286  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     0005d2d7  00000000  00000000  000382d7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
000801b8 l    d  .text	00000000 .text
00000000 l    d  .rodata	00000000 .rodata
00000048 l    d  .rwdata	00000000 .rwdata
00001a90 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../test_bsp//obj/HAL/src/crt0.o
000801f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00080094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
00000048 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00081d64 l     F .text	00000008 __fp_lock
00081d6c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
00082d6c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00082e88 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00082eb4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00082fb4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000830a8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00083194 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00083370 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00001a80 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
000835e4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00083724 l     F .text	00000038 alt_dev_reg
000009f8 l     O .rwdata	00001060 jtag_uart0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00083a10 l     F .text	00000204 altera_avalon_jtag_uart_irq
00083c14 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00084250 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000844a8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00084934 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00084a8c l     F .text	00000050 alt_get_errno
00084adc l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00082c08 g     F .text	00000064 _isatty_r
000832b8 g     F .text	00000078 alt_main
00080228 g     F .text	00000084 _puts_r
00001ae0 g     O .bss	00000100 alt_irq
00082c6c g     F .text	0000006c _lseek_r
00085574 g       *ABS*	00000000 __flash_rwdata_start
00001d70 g       *ABS*	00000000 __alt_heap_start
0008291c g     F .text	0000005c __sseek
00081e08 g     F .text	0000010c __sinit
00081d80 g     F .text	00000078 __sfmoreglue
00083350 g     F .text	00000020 __malloc_unlock
000811ec g     F .text	0000018c memmove
00081df8 g     F .text	00000010 _cleanup
00000000  w      *UND*	00000000 __errno
00080000 g       *ABS*	00000000 __alt_mem_onchip_instruction_memory0
00080000 g     F .entry	0000000c __reset
00080020 g       *ABS*	00000000 __flash_exceptions_start
00082ba0 g     F .text	00000068 _fstat_r
00001a9c g     O .bss	00000004 errno
00001aa4 g     O .bss	00000004 alt_argv
00009a58 g       *ABS*	00000000 _gp
00000878 g     O .rwdata	00000180 alt_fd_list
00084ee0 g     F .text	00000090 alt_find_dev
000810ac g     F .text	00000140 memcpy
00081d74 g     F .text	0000000c _cleanup_r
00084a14 g     F .text	00000078 alt_io_redirect
0008552c g       *ABS*	00000000 __DTOR_END__
000802ac g     F .text	00000014 puts
00083e14 g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00083004 g     F .text	000000a4 isatty
00001a98 g     O .bss	00000004 __malloc_top_pad
0008034c g     F .text	000004e4 __sfvwrite_r
00081974 g     F .text	00000064 _sbrk_r
00082cd8 g     F .text	0000006c _read_r
00001a78 g     O .rwdata	00000004 alt_max_fd
00082a50 g     F .text	0000013c _fclose_r
00081d34 g     F .text	00000030 fflush
00001a94 g     O .bss	00000004 __malloc_max_sbrked_mem
000831e4 g     F .text	000000d4 lseek
00001a58 g     O .rwdata	00000004 _global_impure_ptr
00081378 g     F .text	000005fc _realloc_r
00001d70 g       *ABS*	00000000 __bss_end
00084844 g     F .text	000000f0 alt_iic_isr_register
00084dbc g     F .text	00000104 alt_tick
00082020 g     F .text	00000018 __fp_lock_all
000847f8 g     F .text	0000004c alt_ic_irq_enabled
00084d24 g     F .text	00000098 alt_alarm_stop
00001aac g     O .bss	00000004 alt_irq_active
000800ec g     F .exceptions	000000cc alt_irq_handler
00000850 g     O .rwdata	00000028 alt_dev_null
0008448c g     F .text	0000001c alt_dcache_flush_all
00001a90 g       *ABS*	00000000 __ram_rwdata_end
00001a70 g     O .rwdata	00000008 alt_dev_list
00083634 g     F .text	000000f0 write
00000048 g       *ABS*	00000000 __ram_rodata_end
00082f04 g     F .text	000000b0 fstat
00001d70 g       *ABS*	00000000 end
00083950 g     F .text	000000c0 altera_avalon_jtag_uart_init
0008552c g       *ABS*	00000000 __CTOR_LIST__
00040000 g       *ABS*	00000000 __alt_stack_pointer
000842c4 g     F .text	00000088 alt_avalon_timer_sc_init
0008402c g     F .text	00000224 altera_avalon_jtag_uart_write
00082010 g     F .text	00000004 __sfp_lock_acquire
00080fb4 g     F .text	000000f8 memchr
0008218c g     F .text	000002d0 _free_r
00085350 g     F .text	000001a0 __call_exitprocs
00001a60 g     O .rwdata	00000004 __malloc_sbrk_base
000801b8 g     F .text	0000003c _start
00001ab0 g     O .bss	00000004 _alt_tick_rate
00001ab4 g     O .bss	00000004 _alt_nticks
000833c0 g     F .text	000000f4 read
00083790 g     F .text	0000005c alt_sys_init
00085220 g     F .text	00000130 __register_exitproc
00083cb8 g     F .text	00000068 altera_avalon_jtag_uart_close
00082d44 g     F .text	00000028 __mulsi3
00000048 g       *ABS*	00000000 __ram_rwdata_start
00000000 g       *ABS*	00000000 __ram_rodata_start
00001ab8 g     O .bss	00000028 __malloc_current_mallinfo
000837ec g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00085084 g     F .text	000000d4 alt_get_fd
000829ec g     F .text	00000064 _close_r
000851a4 g     F .text	0000007c memcmp
000838ac g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00001d70 g       *ABS*	00000000 __alt_stack_base
000838fc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000819d8 g     F .text	00000174 __swsetup_r
00081f14 g     F .text	000000fc __sfp
00000448 g     O .rwdata	00000408 __malloc_av_
0008201c g     F .text	00000004 __sinit_lock_release
00082840 g     F .text	00000054 __sread
00084f70 g     F .text	00000114 alt_find_file
000844f8 g     F .text	000000a0 alt_dev_llist_insert
00083330 g     F .text	00000020 __malloc_lock
00083534 g     F .text	000000b0 sbrk
00081b4c g     F .text	000001e8 _fflush_r
00001a90 g       *ABS*	00000000 __bss_start
00082764 g     F .text	000000dc memset
000801f4 g     F .text	00000034 main
00001aa8 g     O .bss	00000004 alt_envp
00001a90 g     O .bss	00000004 __malloc_max_total_mem
0008384c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00082978 g     F .text	00000008 __sclose
00040000 g       *ABS*	00000000 __alt_heap_limit
00082b8c g     F .text	00000014 fclose
00001be0 g     O .bss	00000190 _atexit0
00000000 g       *ABS*	00000000 __alt_mem_onchip_data_memory
00080830 g     F .text	00000784 _malloc_r
00001a7c g     O .rwdata	00000004 alt_errno
0008245c g     F .text	000000a8 _fwalk
00082050 g     F .text	0000013c _malloc_trim_r
0008552c g       *ABS*	00000000 __CTOR_END__
0008552c g       *ABS*	00000000 __flash_rodata_start
0008552c g       *ABS*	00000000 __DTOR_LIST__
0008375c g     F .text	00000034 alt_irq_init
000834b4 g     F .text	00000080 alt_release_fd
00085158 g     F .text	00000014 atexit
00082980 g     F .text	0000006c _write_r
00001a5c g     O .rwdata	00000004 _impure_ptr
00001aa0 g     O .bss	00000004 alt_argc
000845f4 g     F .text	0000005c _do_dtors
00080020 g       .exceptions	00000000 alt_irq_entry
00082038 g     F .text	00000018 __fp_unlock_all
00001a68 g     O .rwdata	00000008 alt_fs_list
00080020 g       *ABS*	00000000 __ram_exceptions_start
0008466c g     F .text	00000050 alt_ic_isr_register
00001a90 g       *ABS*	00000000 _edata
00001d70 g       *ABS*	00000000 _end
000801b8 g       *ABS*	00000000 __ram_exceptions_end
00083d20 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00084758 g     F .text	000000a0 alt_ic_irq_disable
00082894 g     F .text	00000088 __swrite
00001a64 g     O .rwdata	00000004 __malloc_trim_threshold
00084ec0 g     F .text	00000020 altera_nios2_qsys_irq_init
0008516c g     F .text	00000038 exit
00082504 g     F .text	000000b8 _fwalk_reent
00040000 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
00082014 g     F .text	00000004 __sfp_lock_release
000854f0 g     F .text	0000003c _exit
0008434c g     F .text	00000140 alt_alarm_start
000825bc g     F .text	000001a8 __smakebuf_r
000802c0 g     F .text	0000008c strlen
00084bcc g     F .text	00000158 open
00084650 g     F .text	0000001c alt_icache_flush_all
00001a84 g     O .rwdata	00000004 alt_priority_mask
000846bc g     F .text	0000009c alt_ic_irq_enable
00001a88 g     O .rwdata	00000008 alt_alarm_list
00084598 g     F .text	0000005c _do_ctors
00082dbc g     F .text	000000cc close
00083114 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
00082018 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00080000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80000:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80004:	08406e14 	ori	at,at,440
    jmp r1
   80008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   80044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800ec0 	call	800ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000306 	br	80098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   8008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)

00080094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   80094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   80098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   8009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   800c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   800e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800e8:	ef80083a 	eret

000800ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800ec:	defff904 	addi	sp,sp,-28
   800f0:	dfc00615 	stw	ra,24(sp)
   800f4:	df000515 	stw	fp,20(sp)
   800f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   800fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80100:	0005313a 	rdctl	r2,ipending
   80104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   80108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   8010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   80110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80114:	00800044 	movi	r2,1
   80118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   8011c:	e0fffb17 	ldw	r3,-20(fp)
   80120:	e0bffc17 	ldw	r2,-16(fp)
   80124:	1884703a 	and	r2,r3,r2
   80128:	10001726 	beq	r2,zero,80188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   8012c:	00c00034 	movhi	r3,0
   80130:	18c6b804 	addi	r3,r3,6880
   80134:	e0bffd17 	ldw	r2,-12(fp)
   80138:	100490fa 	slli	r2,r2,3
   8013c:	1885883a 	add	r2,r3,r2
   80140:	10c00017 	ldw	r3,0(r2)
   80144:	01000034 	movhi	r4,0
   80148:	2106b804 	addi	r4,r4,6880
   8014c:	e0bffd17 	ldw	r2,-12(fp)
   80150:	100490fa 	slli	r2,r2,3
   80154:	2085883a 	add	r2,r4,r2
   80158:	10800104 	addi	r2,r2,4
   8015c:	10800017 	ldw	r2,0(r2)
   80160:	1009883a 	mov	r4,r2
   80164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   80168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   8016c:	0005313a 	rdctl	r2,ipending
   80170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   80174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   80178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   8017c:	e0bffb17 	ldw	r2,-20(fp)
   80180:	103fe31e 	bne	r2,zero,80110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   80184:	00000706 	br	801a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   80188:	e0bffc17 	ldw	r2,-16(fp)
   8018c:	1085883a 	add	r2,r2,r2
   80190:	e0bffc15 	stw	r2,-16(fp)
      i++;
   80194:	e0bffd17 	ldw	r2,-12(fp)
   80198:	10800044 	addi	r2,r2,1
   8019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   801a0:	003fde06 	br	8011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   801a4:	e037883a 	mov	sp,fp
   801a8:	dfc00117 	ldw	ra,4(sp)
   801ac:	df000017 	ldw	fp,0(sp)
   801b0:	dec00204 	addi	sp,sp,8
   801b4:	f800283a 	ret

Disassembly of section .text:

000801b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   801b8:	06c00134 	movhi	sp,4
    ori sp, sp, %lo(__alt_stack_pointer)
   801bc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   801c0:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
   801c4:	d6a69614 	ori	gp,gp,39512
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   801c8:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
   801cc:	1086a414 	ori	r2,r2,6800

    movhi r3, %hi(__bss_end)
   801d0:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
   801d4:	18c75c14 	ori	r3,r3,7536

    beq r2, r3, 1f
   801d8:	10c00326 	beq	r2,r3,801e8 <_start+0x30>

0:
    stw zero, (r2)
   801dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   801e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   801e4:	10fffd36 	bltu	r2,r3,801dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   801e8:	00831140 	call	83114 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   801ec:	00832b80 	call	832b8 <alt_main>

000801f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   801f0:	003fff06 	br	801f0 <alt_after_alt_main>

000801f4 <main>:
 */

#include <stdio.h>

int main()
{
   801f4:	defffe04 	addi	sp,sp,-8
   801f8:	dfc00115 	stw	ra,4(sp)
   801fc:	df000015 	stw	fp,0(sp)
   80200:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
   80204:	01000034 	movhi	r4,0
   80208:	21000004 	addi	r4,r4,0
   8020c:	00802ac0 	call	802ac <puts>

  return 0;
   80210:	0005883a 	mov	r2,zero
}
   80214:	e037883a 	mov	sp,fp
   80218:	dfc00117 	ldw	ra,4(sp)
   8021c:	df000017 	ldw	fp,0(sp)
   80220:	dec00204 	addi	sp,sp,8
   80224:	f800283a 	ret

00080228 <_puts_r>:
   80228:	defff604 	addi	sp,sp,-40
   8022c:	dc400815 	stw	r17,32(sp)
   80230:	2023883a 	mov	r17,r4
   80234:	2809883a 	mov	r4,r5
   80238:	dc000715 	stw	r16,28(sp)
   8023c:	dfc00915 	stw	ra,36(sp)
   80240:	2821883a 	mov	r16,r5
   80244:	00802c00 	call	802c0 <strlen>
   80248:	10c00044 	addi	r3,r2,1
   8024c:	d8800115 	stw	r2,4(sp)
   80250:	89400217 	ldw	r5,8(r17)
   80254:	00800034 	movhi	r2,0
   80258:	10800504 	addi	r2,r2,20
   8025c:	d8800215 	stw	r2,8(sp)
   80260:	00800044 	movi	r2,1
   80264:	d8800315 	stw	r2,12(sp)
   80268:	8809883a 	mov	r4,r17
   8026c:	00800084 	movi	r2,2
   80270:	d9800404 	addi	r6,sp,16
   80274:	dc000015 	stw	r16,0(sp)
   80278:	d8c00615 	stw	r3,24(sp)
   8027c:	dec00415 	stw	sp,16(sp)
   80280:	d8800515 	stw	r2,20(sp)
   80284:	008034c0 	call	8034c <__sfvwrite_r>
   80288:	1000061e 	bne	r2,zero,802a4 <_puts_r+0x7c>
   8028c:	00800284 	movi	r2,10
   80290:	dfc00917 	ldw	ra,36(sp)
   80294:	dc400817 	ldw	r17,32(sp)
   80298:	dc000717 	ldw	r16,28(sp)
   8029c:	dec00a04 	addi	sp,sp,40
   802a0:	f800283a 	ret
   802a4:	00bfffc4 	movi	r2,-1
   802a8:	003ff906 	br	80290 <_puts_r+0x68>

000802ac <puts>:
   802ac:	00800034 	movhi	r2,0
   802b0:	10869704 	addi	r2,r2,6748
   802b4:	200b883a 	mov	r5,r4
   802b8:	11000017 	ldw	r4,0(r2)
   802bc:	00802281 	jmpi	80228 <_puts_r>

000802c0 <strlen>:
   802c0:	208000cc 	andi	r2,r4,3
   802c4:	10001f1e 	bne	r2,zero,80344 <strlen+0x84>
   802c8:	20800017 	ldw	r2,0(r4)
   802cc:	01ffbff4 	movhi	r7,65279
   802d0:	39ffbfc4 	addi	r7,r7,-257
   802d4:	01a02074 	movhi	r6,32897
   802d8:	31a02004 	addi	r6,r6,-32640
   802dc:	11c7883a 	add	r3,r2,r7
   802e0:	0084303a 	nor	r2,zero,r2
   802e4:	1886703a 	and	r3,r3,r2
   802e8:	1986703a 	and	r3,r3,r6
   802ec:	2005883a 	mov	r2,r4
   802f0:	1800101e 	bne	r3,zero,80334 <strlen+0x74>
   802f4:	10800104 	addi	r2,r2,4
   802f8:	10c00017 	ldw	r3,0(r2)
   802fc:	19cb883a 	add	r5,r3,r7
   80300:	00c6303a 	nor	r3,zero,r3
   80304:	28c6703a 	and	r3,r5,r3
   80308:	1986703a 	and	r3,r3,r6
   8030c:	1800091e 	bne	r3,zero,80334 <strlen+0x74>
   80310:	10800104 	addi	r2,r2,4
   80314:	10c00017 	ldw	r3,0(r2)
   80318:	19cb883a 	add	r5,r3,r7
   8031c:	00c6303a 	nor	r3,zero,r3
   80320:	28c6703a 	and	r3,r5,r3
   80324:	1986703a 	and	r3,r3,r6
   80328:	183ff226 	beq	r3,zero,802f4 <strlen+0x34>
   8032c:	00000106 	br	80334 <strlen+0x74>
   80330:	10800044 	addi	r2,r2,1
   80334:	10c00007 	ldb	r3,0(r2)
   80338:	183ffd1e 	bne	r3,zero,80330 <strlen+0x70>
   8033c:	1105c83a 	sub	r2,r2,r4
   80340:	f800283a 	ret
   80344:	2005883a 	mov	r2,r4
   80348:	003ffa06 	br	80334 <strlen+0x74>

0008034c <__sfvwrite_r>:
   8034c:	30800217 	ldw	r2,8(r6)
   80350:	defff504 	addi	sp,sp,-44
   80354:	dd400615 	stw	r21,24(sp)
   80358:	dd000515 	stw	r20,20(sp)
   8035c:	dc000115 	stw	r16,4(sp)
   80360:	dfc00a15 	stw	ra,40(sp)
   80364:	df000915 	stw	fp,36(sp)
   80368:	ddc00815 	stw	r23,32(sp)
   8036c:	dd800715 	stw	r22,28(sp)
   80370:	dcc00415 	stw	r19,16(sp)
   80374:	dc800315 	stw	r18,12(sp)
   80378:	dc400215 	stw	r17,8(sp)
   8037c:	3029883a 	mov	r20,r6
   80380:	202b883a 	mov	r21,r4
   80384:	2821883a 	mov	r16,r5
   80388:	10002126 	beq	r2,zero,80410 <__sfvwrite_r+0xc4>
   8038c:	2880030b 	ldhu	r2,12(r5)
   80390:	10c0020c 	andi	r3,r2,8
   80394:	18ffffcc 	andi	r3,r3,65535
   80398:	18e0001c 	xori	r3,r3,32768
   8039c:	18e00004 	addi	r3,r3,-32768
   803a0:	18002826 	beq	r3,zero,80444 <__sfvwrite_r+0xf8>
   803a4:	28c00417 	ldw	r3,16(r5)
   803a8:	18002626 	beq	r3,zero,80444 <__sfvwrite_r+0xf8>
   803ac:	10c0008c 	andi	r3,r2,2
   803b0:	18ffffcc 	andi	r3,r3,65535
   803b4:	18e0001c 	xori	r3,r3,32768
   803b8:	18e00004 	addi	r3,r3,-32768
   803bc:	a4400017 	ldw	r17,0(r20)
   803c0:	18002b26 	beq	r3,zero,80470 <__sfvwrite_r+0x124>
   803c4:	0027883a 	mov	r19,zero
   803c8:	0025883a 	mov	r18,zero
   803cc:	05810004 	movi	r22,1024
   803d0:	980d883a 	mov	r6,r19
   803d4:	a809883a 	mov	r4,r21
   803d8:	90004f26 	beq	r18,zero,80518 <__sfvwrite_r+0x1cc>
   803dc:	900f883a 	mov	r7,r18
   803e0:	81400717 	ldw	r5,28(r16)
   803e4:	b480012e 	bgeu	r22,r18,803ec <__sfvwrite_r+0xa0>
   803e8:	01c10004 	movi	r7,1024
   803ec:	80800917 	ldw	r2,36(r16)
   803f0:	103ee83a 	callr	r2
   803f4:	0080540e 	bge	zero,r2,80548 <__sfvwrite_r+0x1fc>
   803f8:	a0c00217 	ldw	r3,8(r20)
   803fc:	98a7883a 	add	r19,r19,r2
   80400:	90a5c83a 	sub	r18,r18,r2
   80404:	1885c83a 	sub	r2,r3,r2
   80408:	a0800215 	stw	r2,8(r20)
   8040c:	103ff01e 	bne	r2,zero,803d0 <__sfvwrite_r+0x84>
   80410:	0005883a 	mov	r2,zero
   80414:	dfc00a17 	ldw	ra,40(sp)
   80418:	df000917 	ldw	fp,36(sp)
   8041c:	ddc00817 	ldw	r23,32(sp)
   80420:	dd800717 	ldw	r22,28(sp)
   80424:	dd400617 	ldw	r21,24(sp)
   80428:	dd000517 	ldw	r20,20(sp)
   8042c:	dcc00417 	ldw	r19,16(sp)
   80430:	dc800317 	ldw	r18,12(sp)
   80434:	dc400217 	ldw	r17,8(sp)
   80438:	dc000117 	ldw	r16,4(sp)
   8043c:	dec00b04 	addi	sp,sp,44
   80440:	f800283a 	ret
   80444:	a809883a 	mov	r4,r21
   80448:	800b883a 	mov	r5,r16
   8044c:	00819d80 	call	819d8 <__swsetup_r>
   80450:	1000f01e 	bne	r2,zero,80814 <__sfvwrite_r+0x4c8>
   80454:	8080030b 	ldhu	r2,12(r16)
   80458:	a4400017 	ldw	r17,0(r20)
   8045c:	10c0008c 	andi	r3,r2,2
   80460:	18ffffcc 	andi	r3,r3,65535
   80464:	18e0001c 	xori	r3,r3,32768
   80468:	18e00004 	addi	r3,r3,-32768
   8046c:	183fd51e 	bne	r3,zero,803c4 <__sfvwrite_r+0x78>
   80470:	10c0004c 	andi	r3,r2,1
   80474:	002d883a 	mov	r22,zero
   80478:	1800381e 	bne	r3,zero,8055c <__sfvwrite_r+0x210>
   8047c:	0025883a 	mov	r18,zero
   80480:	90002126 	beq	r18,zero,80508 <__sfvwrite_r+0x1bc>
   80484:	10c0800c 	andi	r3,r2,512
   80488:	18ffffcc 	andi	r3,r3,65535
   8048c:	18e0001c 	xori	r3,r3,32768
   80490:	18e00004 	addi	r3,r3,-32768
   80494:	84c00217 	ldw	r19,8(r16)
   80498:	18006b26 	beq	r3,zero,80648 <__sfvwrite_r+0x2fc>
   8049c:	980f883a 	mov	r7,r19
   804a0:	94c08636 	bltu	r18,r19,806bc <__sfvwrite_r+0x370>
   804a4:	10c1200c 	andi	r3,r2,1152
   804a8:	18009f1e 	bne	r3,zero,80728 <__sfvwrite_r+0x3dc>
   804ac:	81000017 	ldw	r4,0(r16)
   804b0:	982f883a 	mov	r23,r19
   804b4:	9039883a 	mov	fp,r18
   804b8:	9027883a 	mov	r19,r18
   804bc:	380d883a 	mov	r6,r7
   804c0:	b00b883a 	mov	r5,r22
   804c4:	d9c00015 	stw	r7,0(sp)
   804c8:	00811ec0 	call	811ec <memmove>
   804cc:	d9c00017 	ldw	r7,0(sp)
   804d0:	81000217 	ldw	r4,8(r16)
   804d4:	80800017 	ldw	r2,0(r16)
   804d8:	25efc83a 	sub	r23,r4,r23
   804dc:	11cf883a 	add	r7,r2,r7
   804e0:	85c00215 	stw	r23,8(r16)
   804e4:	81c00015 	stw	r7,0(r16)
   804e8:	a0800217 	ldw	r2,8(r20)
   804ec:	b72d883a 	add	r22,r22,fp
   804f0:	9725c83a 	sub	r18,r18,fp
   804f4:	14e7c83a 	sub	r19,r2,r19
   804f8:	a4c00215 	stw	r19,8(r20)
   804fc:	983fc426 	beq	r19,zero,80410 <__sfvwrite_r+0xc4>
   80500:	8080030b 	ldhu	r2,12(r16)
   80504:	903fdf1e 	bne	r18,zero,80484 <__sfvwrite_r+0x138>
   80508:	8d800017 	ldw	r22,0(r17)
   8050c:	8c800117 	ldw	r18,4(r17)
   80510:	8c400204 	addi	r17,r17,8
   80514:	003fda06 	br	80480 <__sfvwrite_r+0x134>
   80518:	8cc00017 	ldw	r19,0(r17)
   8051c:	8c800117 	ldw	r18,4(r17)
   80520:	8c400204 	addi	r17,r17,8
   80524:	003faa06 	br	803d0 <__sfvwrite_r+0x84>
   80528:	00813780 	call	81378 <_realloc_r>
   8052c:	102f883a 	mov	r23,r2
   80530:	10009f1e 	bne	r2,zero,807b0 <__sfvwrite_r+0x464>
   80534:	81400417 	ldw	r5,16(r16)
   80538:	a809883a 	mov	r4,r21
   8053c:	008218c0 	call	8218c <_free_r>
   80540:	00800304 	movi	r2,12
   80544:	a8800015 	stw	r2,0(r21)
   80548:	80c0030b 	ldhu	r3,12(r16)
   8054c:	00bfffc4 	movi	r2,-1
   80550:	18c01014 	ori	r3,r3,64
   80554:	80c0030d 	sth	r3,12(r16)
   80558:	003fae06 	br	80414 <__sfvwrite_r+0xc8>
   8055c:	0007883a 	mov	r3,zero
   80560:	0039883a 	mov	fp,zero
   80564:	0025883a 	mov	r18,zero
   80568:	90001e26 	beq	r18,zero,805e4 <__sfvwrite_r+0x298>
   8056c:	18006526 	beq	r3,zero,80704 <__sfvwrite_r+0x3b8>
   80570:	b02f883a 	mov	r23,r22
   80574:	9580012e 	bgeu	r18,r22,8057c <__sfvwrite_r+0x230>
   80578:	902f883a 	mov	r23,r18
   8057c:	81000017 	ldw	r4,0(r16)
   80580:	80800417 	ldw	r2,16(r16)
   80584:	84c00217 	ldw	r19,8(r16)
   80588:	81c00517 	ldw	r7,20(r16)
   8058c:	1100022e 	bgeu	r2,r4,80598 <__sfvwrite_r+0x24c>
   80590:	99e7883a 	add	r19,r19,r7
   80594:	9dc01816 	blt	r19,r23,805f8 <__sfvwrite_r+0x2ac>
   80598:	b9c03b16 	blt	r23,r7,80688 <__sfvwrite_r+0x33c>
   8059c:	80800917 	ldw	r2,36(r16)
   805a0:	81400717 	ldw	r5,28(r16)
   805a4:	a809883a 	mov	r4,r21
   805a8:	d8c00015 	stw	r3,0(sp)
   805ac:	e00d883a 	mov	r6,fp
   805b0:	103ee83a 	callr	r2
   805b4:	1027883a 	mov	r19,r2
   805b8:	d8c00017 	ldw	r3,0(sp)
   805bc:	00bfe20e 	bge	zero,r2,80548 <__sfvwrite_r+0x1fc>
   805c0:	b4edc83a 	sub	r22,r22,r19
   805c4:	b0001a26 	beq	r22,zero,80630 <__sfvwrite_r+0x2e4>
   805c8:	a0800217 	ldw	r2,8(r20)
   805cc:	e4f9883a 	add	fp,fp,r19
   805d0:	94e5c83a 	sub	r18,r18,r19
   805d4:	14e7c83a 	sub	r19,r2,r19
   805d8:	a4c00215 	stw	r19,8(r20)
   805dc:	983f8c26 	beq	r19,zero,80410 <__sfvwrite_r+0xc4>
   805e0:	903fe21e 	bne	r18,zero,8056c <__sfvwrite_r+0x220>
   805e4:	8f000017 	ldw	fp,0(r17)
   805e8:	8c800117 	ldw	r18,4(r17)
   805ec:	0007883a 	mov	r3,zero
   805f0:	8c400204 	addi	r17,r17,8
   805f4:	003fdc06 	br	80568 <__sfvwrite_r+0x21c>
   805f8:	e00b883a 	mov	r5,fp
   805fc:	980d883a 	mov	r6,r19
   80600:	d8c00015 	stw	r3,0(sp)
   80604:	00811ec0 	call	811ec <memmove>
   80608:	80800017 	ldw	r2,0(r16)
   8060c:	a809883a 	mov	r4,r21
   80610:	800b883a 	mov	r5,r16
   80614:	14c5883a 	add	r2,r2,r19
   80618:	80800015 	stw	r2,0(r16)
   8061c:	0081b4c0 	call	81b4c <_fflush_r>
   80620:	d8c00017 	ldw	r3,0(sp)
   80624:	103fc81e 	bne	r2,zero,80548 <__sfvwrite_r+0x1fc>
   80628:	b4edc83a 	sub	r22,r22,r19
   8062c:	b03fe61e 	bne	r22,zero,805c8 <__sfvwrite_r+0x27c>
   80630:	a809883a 	mov	r4,r21
   80634:	800b883a 	mov	r5,r16
   80638:	0081b4c0 	call	81b4c <_fflush_r>
   8063c:	103fc21e 	bne	r2,zero,80548 <__sfvwrite_r+0x1fc>
   80640:	0007883a 	mov	r3,zero
   80644:	003fe006 	br	805c8 <__sfvwrite_r+0x27c>
   80648:	81000017 	ldw	r4,0(r16)
   8064c:	80800417 	ldw	r2,16(r16)
   80650:	1100022e 	bgeu	r2,r4,8065c <__sfvwrite_r+0x310>
   80654:	9839883a 	mov	fp,r19
   80658:	9c806036 	bltu	r19,r18,807dc <__sfvwrite_r+0x490>
   8065c:	81c00517 	ldw	r7,20(r16)
   80660:	91c01c36 	bltu	r18,r7,806d4 <__sfvwrite_r+0x388>
   80664:	80800917 	ldw	r2,36(r16)
   80668:	81400717 	ldw	r5,28(r16)
   8066c:	a809883a 	mov	r4,r21
   80670:	b00d883a 	mov	r6,r22
   80674:	103ee83a 	callr	r2
   80678:	1027883a 	mov	r19,r2
   8067c:	00bfb20e 	bge	zero,r2,80548 <__sfvwrite_r+0x1fc>
   80680:	1039883a 	mov	fp,r2
   80684:	003f9806 	br	804e8 <__sfvwrite_r+0x19c>
   80688:	b80d883a 	mov	r6,r23
   8068c:	e00b883a 	mov	r5,fp
   80690:	d8c00015 	stw	r3,0(sp)
   80694:	00811ec0 	call	811ec <memmove>
   80698:	80800217 	ldw	r2,8(r16)
   8069c:	81000017 	ldw	r4,0(r16)
   806a0:	b827883a 	mov	r19,r23
   806a4:	15c5c83a 	sub	r2,r2,r23
   806a8:	25ef883a 	add	r23,r4,r23
   806ac:	80800215 	stw	r2,8(r16)
   806b0:	85c00015 	stw	r23,0(r16)
   806b4:	d8c00017 	ldw	r3,0(sp)
   806b8:	003fc106 	br	805c0 <__sfvwrite_r+0x274>
   806bc:	81000017 	ldw	r4,0(r16)
   806c0:	902f883a 	mov	r23,r18
   806c4:	9039883a 	mov	fp,r18
   806c8:	9027883a 	mov	r19,r18
   806cc:	900f883a 	mov	r7,r18
   806d0:	003f7a06 	br	804bc <__sfvwrite_r+0x170>
   806d4:	b00b883a 	mov	r5,r22
   806d8:	900d883a 	mov	r6,r18
   806dc:	00811ec0 	call	811ec <memmove>
   806e0:	80c00217 	ldw	r3,8(r16)
   806e4:	80800017 	ldw	r2,0(r16)
   806e8:	9027883a 	mov	r19,r18
   806ec:	1c87c83a 	sub	r3,r3,r18
   806f0:	1485883a 	add	r2,r2,r18
   806f4:	80c00215 	stw	r3,8(r16)
   806f8:	80800015 	stw	r2,0(r16)
   806fc:	9039883a 	mov	fp,r18
   80700:	003f7906 	br	804e8 <__sfvwrite_r+0x19c>
   80704:	e009883a 	mov	r4,fp
   80708:	01400284 	movi	r5,10
   8070c:	900d883a 	mov	r6,r18
   80710:	0080fb40 	call	80fb4 <memchr>
   80714:	10003c26 	beq	r2,zero,80808 <__sfvwrite_r+0x4bc>
   80718:	15800044 	addi	r22,r2,1
   8071c:	b72dc83a 	sub	r22,r22,fp
   80720:	00c00044 	movi	r3,1
   80724:	003f9206 	br	80570 <__sfvwrite_r+0x224>
   80728:	81000517 	ldw	r4,20(r16)
   8072c:	81400417 	ldw	r5,16(r16)
   80730:	80c00017 	ldw	r3,0(r16)
   80734:	210d883a 	add	r6,r4,r4
   80738:	3109883a 	add	r4,r6,r4
   8073c:	2026d7fa 	srli	r19,r4,31
   80740:	1979c83a 	sub	fp,r3,r5
   80744:	e1800044 	addi	r6,fp,1
   80748:	9909883a 	add	r4,r19,r4
   8074c:	2027d07a 	srai	r19,r4,1
   80750:	3489883a 	add	r4,r6,r18
   80754:	980d883a 	mov	r6,r19
   80758:	9900022e 	bgeu	r19,r4,80764 <__sfvwrite_r+0x418>
   8075c:	2027883a 	mov	r19,r4
   80760:	200d883a 	mov	r6,r4
   80764:	1081000c 	andi	r2,r2,1024
   80768:	10bfffcc 	andi	r2,r2,65535
   8076c:	10a0001c 	xori	r2,r2,32768
   80770:	10a00004 	addi	r2,r2,-32768
   80774:	a809883a 	mov	r4,r21
   80778:	103f6b26 	beq	r2,zero,80528 <__sfvwrite_r+0x1dc>
   8077c:	300b883a 	mov	r5,r6
   80780:	00808300 	call	80830 <_malloc_r>
   80784:	102f883a 	mov	r23,r2
   80788:	103f6d26 	beq	r2,zero,80540 <__sfvwrite_r+0x1f4>
   8078c:	81400417 	ldw	r5,16(r16)
   80790:	1009883a 	mov	r4,r2
   80794:	e00d883a 	mov	r6,fp
   80798:	00810ac0 	call	810ac <memcpy>
   8079c:	8080030b 	ldhu	r2,12(r16)
   807a0:	00fedfc4 	movi	r3,-1153
   807a4:	10c4703a 	and	r2,r2,r3
   807a8:	10802014 	ori	r2,r2,128
   807ac:	8080030d 	sth	r2,12(r16)
   807b0:	bf09883a 	add	r4,r23,fp
   807b4:	9f07c83a 	sub	r3,r19,fp
   807b8:	85c00415 	stw	r23,16(r16)
   807bc:	84c00515 	stw	r19,20(r16)
   807c0:	81000015 	stw	r4,0(r16)
   807c4:	902f883a 	mov	r23,r18
   807c8:	80c00215 	stw	r3,8(r16)
   807cc:	9039883a 	mov	fp,r18
   807d0:	9027883a 	mov	r19,r18
   807d4:	900f883a 	mov	r7,r18
   807d8:	003f3806 	br	804bc <__sfvwrite_r+0x170>
   807dc:	b00b883a 	mov	r5,r22
   807e0:	980d883a 	mov	r6,r19
   807e4:	00811ec0 	call	811ec <memmove>
   807e8:	80800017 	ldw	r2,0(r16)
   807ec:	a809883a 	mov	r4,r21
   807f0:	800b883a 	mov	r5,r16
   807f4:	14c5883a 	add	r2,r2,r19
   807f8:	80800015 	stw	r2,0(r16)
   807fc:	0081b4c0 	call	81b4c <_fflush_r>
   80800:	103f3926 	beq	r2,zero,804e8 <__sfvwrite_r+0x19c>
   80804:	003f5006 	br	80548 <__sfvwrite_r+0x1fc>
   80808:	95800044 	addi	r22,r18,1
   8080c:	00c00044 	movi	r3,1
   80810:	003f5706 	br	80570 <__sfvwrite_r+0x224>
   80814:	80c0030b 	ldhu	r3,12(r16)
   80818:	00bfffc4 	movi	r2,-1
   8081c:	18c01014 	ori	r3,r3,64
   80820:	80c0030d 	sth	r3,12(r16)
   80824:	00c00244 	movi	r3,9
   80828:	a8c00015 	stw	r3,0(r21)
   8082c:	003ef906 	br	80414 <__sfvwrite_r+0xc8>

00080830 <_malloc_r>:
   80830:	defff604 	addi	sp,sp,-40
   80834:	dc800215 	stw	r18,8(sp)
   80838:	dfc00915 	stw	ra,36(sp)
   8083c:	df000815 	stw	fp,32(sp)
   80840:	ddc00715 	stw	r23,28(sp)
   80844:	dd800615 	stw	r22,24(sp)
   80848:	dd400515 	stw	r21,20(sp)
   8084c:	dd000415 	stw	r20,16(sp)
   80850:	dcc00315 	stw	r19,12(sp)
   80854:	dc400115 	stw	r17,4(sp)
   80858:	dc000015 	stw	r16,0(sp)
   8085c:	288002c4 	addi	r2,r5,11
   80860:	00c00584 	movi	r3,22
   80864:	2025883a 	mov	r18,r4
   80868:	18802b2e 	bgeu	r3,r2,80918 <_malloc_r+0xe8>
   8086c:	047ffe04 	movi	r17,-8
   80870:	1462703a 	and	r17,r2,r17
   80874:	88002a16 	blt	r17,zero,80920 <_malloc_r+0xf0>
   80878:	89402936 	bltu	r17,r5,80920 <_malloc_r+0xf0>
   8087c:	9009883a 	mov	r4,r18
   80880:	00833300 	call	83330 <__malloc_lock>
   80884:	00807dc4 	movi	r2,503
   80888:	14402936 	bltu	r2,r17,80930 <_malloc_r+0x100>
   8088c:	8808d0fa 	srli	r4,r17,3
   80890:	04c00034 	movhi	r19,0
   80894:	9cc11204 	addi	r19,r19,1096
   80898:	2105883a 	add	r2,r4,r4
   8089c:	1085883a 	add	r2,r2,r2
   808a0:	1085883a 	add	r2,r2,r2
   808a4:	9885883a 	add	r2,r19,r2
   808a8:	14000317 	ldw	r16,12(r2)
   808ac:	80815526 	beq	r16,r2,80e04 <_malloc_r+0x5d4>
   808b0:	81000117 	ldw	r4,4(r16)
   808b4:	00bfff04 	movi	r2,-4
   808b8:	80c00317 	ldw	r3,12(r16)
   808bc:	2084703a 	and	r2,r4,r2
   808c0:	8085883a 	add	r2,r16,r2
   808c4:	11800117 	ldw	r6,4(r2)
   808c8:	81400217 	ldw	r5,8(r16)
   808cc:	9009883a 	mov	r4,r18
   808d0:	31800054 	ori	r6,r6,1
   808d4:	11800115 	stw	r6,4(r2)
   808d8:	28c00315 	stw	r3,12(r5)
   808dc:	19400215 	stw	r5,8(r3)
   808e0:	00833500 	call	83350 <__malloc_unlock>
   808e4:	80800204 	addi	r2,r16,8
   808e8:	dfc00917 	ldw	ra,36(sp)
   808ec:	df000817 	ldw	fp,32(sp)
   808f0:	ddc00717 	ldw	r23,28(sp)
   808f4:	dd800617 	ldw	r22,24(sp)
   808f8:	dd400517 	ldw	r21,20(sp)
   808fc:	dd000417 	ldw	r20,16(sp)
   80900:	dcc00317 	ldw	r19,12(sp)
   80904:	dc800217 	ldw	r18,8(sp)
   80908:	dc400117 	ldw	r17,4(sp)
   8090c:	dc000017 	ldw	r16,0(sp)
   80910:	dec00a04 	addi	sp,sp,40
   80914:	f800283a 	ret
   80918:	04400404 	movi	r17,16
   8091c:	897fd72e 	bgeu	r17,r5,8087c <_malloc_r+0x4c>
   80920:	00800304 	movi	r2,12
   80924:	90800015 	stw	r2,0(r18)
   80928:	0005883a 	mov	r2,zero
   8092c:	003fee06 	br	808e8 <_malloc_r+0xb8>
   80930:	8808d27a 	srli	r4,r17,9
   80934:	20007126 	beq	r4,zero,80afc <_malloc_r+0x2cc>
   80938:	00800104 	movi	r2,4
   8093c:	1100eb36 	bltu	r2,r4,80cec <_malloc_r+0x4bc>
   80940:	8808d1ba 	srli	r4,r17,6
   80944:	21000e04 	addi	r4,r4,56
   80948:	210b883a 	add	r5,r4,r4
   8094c:	294b883a 	add	r5,r5,r5
   80950:	294b883a 	add	r5,r5,r5
   80954:	04c00034 	movhi	r19,0
   80958:	9cc11204 	addi	r19,r19,1096
   8095c:	994b883a 	add	r5,r19,r5
   80960:	2c000317 	ldw	r16,12(r5)
   80964:	2c000e26 	beq	r5,r16,809a0 <_malloc_r+0x170>
   80968:	80c00117 	ldw	r3,4(r16)
   8096c:	01ffff04 	movi	r7,-4
   80970:	018003c4 	movi	r6,15
   80974:	19c6703a 	and	r3,r3,r7
   80978:	1c45c83a 	sub	r2,r3,r17
   8097c:	30800716 	blt	r6,r2,8099c <_malloc_r+0x16c>
   80980:	1000610e 	bge	r2,zero,80b08 <_malloc_r+0x2d8>
   80984:	84000317 	ldw	r16,12(r16)
   80988:	2c000526 	beq	r5,r16,809a0 <_malloc_r+0x170>
   8098c:	80c00117 	ldw	r3,4(r16)
   80990:	19c6703a 	and	r3,r3,r7
   80994:	1c45c83a 	sub	r2,r3,r17
   80998:	30bff90e 	bge	r6,r2,80980 <_malloc_r+0x150>
   8099c:	213fffc4 	addi	r4,r4,-1
   809a0:	21000044 	addi	r4,r4,1
   809a4:	9c000417 	ldw	r16,16(r19)
   809a8:	00c00034 	movhi	r3,0
   809ac:	18c11204 	addi	r3,r3,1096
   809b0:	1a400204 	addi	r9,r3,8
   809b4:	8240ff26 	beq	r16,r9,80db4 <_malloc_r+0x584>
   809b8:	81400117 	ldw	r5,4(r16)
   809bc:	00bfff04 	movi	r2,-4
   809c0:	018003c4 	movi	r6,15
   809c4:	2884703a 	and	r2,r5,r2
   809c8:	144bc83a 	sub	r5,r2,r17
   809cc:	3140ea16 	blt	r6,r5,80d78 <_malloc_r+0x548>
   809d0:	1a400515 	stw	r9,20(r3)
   809d4:	1a400415 	stw	r9,16(r3)
   809d8:	2800570e 	bge	r5,zero,80b38 <_malloc_r+0x308>
   809dc:	01407fc4 	movi	r5,511
   809e0:	2880ca36 	bltu	r5,r2,80d0c <_malloc_r+0x4dc>
   809e4:	1004d0fa 	srli	r2,r2,3
   809e8:	02000044 	movi	r8,1
   809ec:	19c00117 	ldw	r7,4(r3)
   809f0:	108b883a 	add	r5,r2,r2
   809f4:	294b883a 	add	r5,r5,r5
   809f8:	1005d0ba 	srai	r2,r2,2
   809fc:	294b883a 	add	r5,r5,r5
   80a00:	28cb883a 	add	r5,r5,r3
   80a04:	29800217 	ldw	r6,8(r5)
   80a08:	4084983a 	sll	r2,r8,r2
   80a0c:	81400315 	stw	r5,12(r16)
   80a10:	81800215 	stw	r6,8(r16)
   80a14:	11c4b03a 	or	r2,r2,r7
   80a18:	18800115 	stw	r2,4(r3)
   80a1c:	2c000215 	stw	r16,8(r5)
   80a20:	34000315 	stw	r16,12(r6)
   80a24:	200bd0ba 	srai	r5,r4,2
   80a28:	00c00044 	movi	r3,1
   80a2c:	194a983a 	sll	r5,r3,r5
   80a30:	11404936 	bltu	r2,r5,80b58 <_malloc_r+0x328>
   80a34:	1146703a 	and	r3,r2,r5
   80a38:	18000a1e 	bne	r3,zero,80a64 <_malloc_r+0x234>
   80a3c:	00ffff04 	movi	r3,-4
   80a40:	294b883a 	add	r5,r5,r5
   80a44:	20c8703a 	and	r4,r4,r3
   80a48:	1146703a 	and	r3,r2,r5
   80a4c:	21000104 	addi	r4,r4,4
   80a50:	1800041e 	bne	r3,zero,80a64 <_malloc_r+0x234>
   80a54:	294b883a 	add	r5,r5,r5
   80a58:	1146703a 	and	r3,r2,r5
   80a5c:	21000104 	addi	r4,r4,4
   80a60:	183ffc26 	beq	r3,zero,80a54 <_malloc_r+0x224>
   80a64:	023fff04 	movi	r8,-4
   80a68:	01c003c4 	movi	r7,15
   80a6c:	2105883a 	add	r2,r4,r4
   80a70:	1085883a 	add	r2,r2,r2
   80a74:	1085883a 	add	r2,r2,r2
   80a78:	9899883a 	add	r12,r19,r2
   80a7c:	62800304 	addi	r10,r12,12
   80a80:	2017883a 	mov	r11,r4
   80a84:	54000017 	ldw	r16,0(r10)
   80a88:	51bffd04 	addi	r6,r10,-12
   80a8c:	8180041e 	bne	r16,r6,80aa0 <_malloc_r+0x270>
   80a90:	0000ca06 	br	80dbc <_malloc_r+0x58c>
   80a94:	10001c0e 	bge	r2,zero,80b08 <_malloc_r+0x2d8>
   80a98:	84000317 	ldw	r16,12(r16)
   80a9c:	8180c726 	beq	r16,r6,80dbc <_malloc_r+0x58c>
   80aa0:	80c00117 	ldw	r3,4(r16)
   80aa4:	1a06703a 	and	r3,r3,r8
   80aa8:	1c45c83a 	sub	r2,r3,r17
   80aac:	38bff90e 	bge	r7,r2,80a94 <_malloc_r+0x264>
   80ab0:	81000317 	ldw	r4,12(r16)
   80ab4:	81400217 	ldw	r5,8(r16)
   80ab8:	8447883a 	add	r3,r16,r17
   80abc:	8c400054 	ori	r17,r17,1
   80ac0:	29000315 	stw	r4,12(r5)
   80ac4:	21400215 	stw	r5,8(r4)
   80ac8:	84400115 	stw	r17,4(r16)
   80acc:	1889883a 	add	r4,r3,r2
   80ad0:	11400054 	ori	r5,r2,1
   80ad4:	98c00515 	stw	r3,20(r19)
   80ad8:	98c00415 	stw	r3,16(r19)
   80adc:	20800015 	stw	r2,0(r4)
   80ae0:	1a400315 	stw	r9,12(r3)
   80ae4:	1a400215 	stw	r9,8(r3)
   80ae8:	19400115 	stw	r5,4(r3)
   80aec:	9009883a 	mov	r4,r18
   80af0:	00833500 	call	83350 <__malloc_unlock>
   80af4:	80800204 	addi	r2,r16,8
   80af8:	003f7b06 	br	808e8 <_malloc_r+0xb8>
   80afc:	8808d0fa 	srli	r4,r17,3
   80b00:	210b883a 	add	r5,r4,r4
   80b04:	003f9106 	br	8094c <_malloc_r+0x11c>
   80b08:	80c7883a 	add	r3,r16,r3
   80b0c:	19400117 	ldw	r5,4(r3)
   80b10:	80800317 	ldw	r2,12(r16)
   80b14:	81000217 	ldw	r4,8(r16)
   80b18:	29400054 	ori	r5,r5,1
   80b1c:	19400115 	stw	r5,4(r3)
   80b20:	20800315 	stw	r2,12(r4)
   80b24:	11000215 	stw	r4,8(r2)
   80b28:	9009883a 	mov	r4,r18
   80b2c:	00833500 	call	83350 <__malloc_unlock>
   80b30:	80800204 	addi	r2,r16,8
   80b34:	003f6c06 	br	808e8 <_malloc_r+0xb8>
   80b38:	8085883a 	add	r2,r16,r2
   80b3c:	10c00117 	ldw	r3,4(r2)
   80b40:	9009883a 	mov	r4,r18
   80b44:	18c00054 	ori	r3,r3,1
   80b48:	10c00115 	stw	r3,4(r2)
   80b4c:	00833500 	call	83350 <__malloc_unlock>
   80b50:	80800204 	addi	r2,r16,8
   80b54:	003f6406 	br	808e8 <_malloc_r+0xb8>
   80b58:	9c000217 	ldw	r16,8(r19)
   80b5c:	00bfff04 	movi	r2,-4
   80b60:	85400117 	ldw	r21,4(r16)
   80b64:	a8aa703a 	and	r21,r21,r2
   80b68:	ac400336 	bltu	r21,r17,80b78 <_malloc_r+0x348>
   80b6c:	ac45c83a 	sub	r2,r21,r17
   80b70:	00c003c4 	movi	r3,15
   80b74:	18805316 	blt	r3,r2,80cc4 <_malloc_r+0x494>
   80b78:	d5e01017 	ldw	r23,-32704(gp)
   80b7c:	d0e00217 	ldw	r3,-32760(gp)
   80b80:	00bfffc4 	movi	r2,-1
   80b84:	8579883a 	add	fp,r16,r21
   80b88:	8def883a 	add	r23,r17,r23
   80b8c:	1880d226 	beq	r3,r2,80ed8 <_malloc_r+0x6a8>
   80b90:	bdc403c4 	addi	r23,r23,4111
   80b94:	00bc0004 	movi	r2,-4096
   80b98:	b8ae703a 	and	r23,r23,r2
   80b9c:	9009883a 	mov	r4,r18
   80ba0:	b80b883a 	mov	r5,r23
   80ba4:	00819740 	call	81974 <_sbrk_r>
   80ba8:	1029883a 	mov	r20,r2
   80bac:	00bfffc4 	movi	r2,-1
   80bb0:	a080d126 	beq	r20,r2,80ef8 <_malloc_r+0x6c8>
   80bb4:	a7009f36 	bltu	r20,fp,80e34 <_malloc_r+0x604>
   80bb8:	05800034 	movhi	r22,0
   80bbc:	b586ae04 	addi	r22,r22,6840
   80bc0:	b0800017 	ldw	r2,0(r22)
   80bc4:	b885883a 	add	r2,r23,r2
   80bc8:	b0800015 	stw	r2,0(r22)
   80bcc:	e500cf26 	beq	fp,r20,80f0c <_malloc_r+0x6dc>
   80bd0:	d1200217 	ldw	r4,-32760(gp)
   80bd4:	00ffffc4 	movi	r3,-1
   80bd8:	20c0e026 	beq	r4,r3,80f5c <_malloc_r+0x72c>
   80bdc:	a739c83a 	sub	fp,r20,fp
   80be0:	1705883a 	add	r2,r2,fp
   80be4:	b0800015 	stw	r2,0(r22)
   80be8:	a08001cc 	andi	r2,r20,7
   80bec:	1000a526 	beq	r2,zero,80e84 <_malloc_r+0x654>
   80bf0:	a0a9c83a 	sub	r20,r20,r2
   80bf4:	00c40204 	movi	r3,4104
   80bf8:	a5000204 	addi	r20,r20,8
   80bfc:	1885c83a 	sub	r2,r3,r2
   80c00:	a5c7883a 	add	r3,r20,r23
   80c04:	18c3ffcc 	andi	r3,r3,4095
   80c08:	10efc83a 	sub	r23,r2,r3
   80c0c:	9009883a 	mov	r4,r18
   80c10:	b80b883a 	mov	r5,r23
   80c14:	00819740 	call	81974 <_sbrk_r>
   80c18:	00ffffc4 	movi	r3,-1
   80c1c:	10c0cc26 	beq	r2,r3,80f50 <_malloc_r+0x720>
   80c20:	1505c83a 	sub	r2,r2,r20
   80c24:	b887883a 	add	r3,r23,r2
   80c28:	18c00054 	ori	r3,r3,1
   80c2c:	b0800017 	ldw	r2,0(r22)
   80c30:	9d000215 	stw	r20,8(r19)
   80c34:	a0c00115 	stw	r3,4(r20)
   80c38:	b885883a 	add	r2,r23,r2
   80c3c:	b0800015 	stw	r2,0(r22)
   80c40:	84c00e26 	beq	r16,r19,80c7c <_malloc_r+0x44c>
   80c44:	00c003c4 	movi	r3,15
   80c48:	1d40902e 	bgeu	r3,r21,80e8c <_malloc_r+0x65c>
   80c4c:	ad7ffd04 	addi	r21,r21,-12
   80c50:	013ffe04 	movi	r4,-8
   80c54:	a908703a 	and	r4,r21,r4
   80c58:	810b883a 	add	r5,r16,r4
   80c5c:	01800144 	movi	r6,5
   80c60:	29800115 	stw	r6,4(r5)
   80c64:	29800215 	stw	r6,8(r5)
   80c68:	81400117 	ldw	r5,4(r16)
   80c6c:	2940004c 	andi	r5,r5,1
   80c70:	214ab03a 	or	r5,r4,r5
   80c74:	81400115 	stw	r5,4(r16)
   80c78:	1900ae36 	bltu	r3,r4,80f34 <_malloc_r+0x704>
   80c7c:	d0e00f17 	ldw	r3,-32708(gp)
   80c80:	1880012e 	bgeu	r3,r2,80c88 <_malloc_r+0x458>
   80c84:	d0a00f15 	stw	r2,-32708(gp)
   80c88:	d0e00e17 	ldw	r3,-32712(gp)
   80c8c:	9c000217 	ldw	r16,8(r19)
   80c90:	1880012e 	bgeu	r3,r2,80c98 <_malloc_r+0x468>
   80c94:	d0a00e15 	stw	r2,-32712(gp)
   80c98:	80c00117 	ldw	r3,4(r16)
   80c9c:	00bfff04 	movi	r2,-4
   80ca0:	1886703a 	and	r3,r3,r2
   80ca4:	1c45c83a 	sub	r2,r3,r17
   80ca8:	1c400236 	bltu	r3,r17,80cb4 <_malloc_r+0x484>
   80cac:	00c003c4 	movi	r3,15
   80cb0:	18800416 	blt	r3,r2,80cc4 <_malloc_r+0x494>
   80cb4:	9009883a 	mov	r4,r18
   80cb8:	00833500 	call	83350 <__malloc_unlock>
   80cbc:	0005883a 	mov	r2,zero
   80cc0:	003f0906 	br	808e8 <_malloc_r+0xb8>
   80cc4:	88c00054 	ori	r3,r17,1
   80cc8:	10800054 	ori	r2,r2,1
   80ccc:	80c00115 	stw	r3,4(r16)
   80cd0:	8463883a 	add	r17,r16,r17
   80cd4:	88800115 	stw	r2,4(r17)
   80cd8:	9009883a 	mov	r4,r18
   80cdc:	9c400215 	stw	r17,8(r19)
   80ce0:	00833500 	call	83350 <__malloc_unlock>
   80ce4:	80800204 	addi	r2,r16,8
   80ce8:	003eff06 	br	808e8 <_malloc_r+0xb8>
   80cec:	00800504 	movi	r2,20
   80cf0:	1100492e 	bgeu	r2,r4,80e18 <_malloc_r+0x5e8>
   80cf4:	00801504 	movi	r2,84
   80cf8:	11005c36 	bltu	r2,r4,80e6c <_malloc_r+0x63c>
   80cfc:	8808d33a 	srli	r4,r17,12
   80d00:	21001b84 	addi	r4,r4,110
   80d04:	210b883a 	add	r5,r4,r4
   80d08:	003f1006 	br	8094c <_malloc_r+0x11c>
   80d0c:	1006d27a 	srli	r3,r2,9
   80d10:	01400104 	movi	r5,4
   80d14:	28c0432e 	bgeu	r5,r3,80e24 <_malloc_r+0x5f4>
   80d18:	01400504 	movi	r5,20
   80d1c:	28c07036 	bltu	r5,r3,80ee0 <_malloc_r+0x6b0>
   80d20:	194016c4 	addi	r5,r3,91
   80d24:	294d883a 	add	r6,r5,r5
   80d28:	318d883a 	add	r6,r6,r6
   80d2c:	318d883a 	add	r6,r6,r6
   80d30:	998d883a 	add	r6,r19,r6
   80d34:	30c00217 	ldw	r3,8(r6)
   80d38:	01c00034 	movhi	r7,0
   80d3c:	39c11204 	addi	r7,r7,1096
   80d40:	19805726 	beq	r3,r6,80ea0 <_malloc_r+0x670>
   80d44:	01ffff04 	movi	r7,-4
   80d48:	19400117 	ldw	r5,4(r3)
   80d4c:	29ca703a 	and	r5,r5,r7
   80d50:	1140022e 	bgeu	r2,r5,80d5c <_malloc_r+0x52c>
   80d54:	18c00217 	ldw	r3,8(r3)
   80d58:	30fffb1e 	bne	r6,r3,80d48 <_malloc_r+0x518>
   80d5c:	19400317 	ldw	r5,12(r3)
   80d60:	98800117 	ldw	r2,4(r19)
   80d64:	81400315 	stw	r5,12(r16)
   80d68:	80c00215 	stw	r3,8(r16)
   80d6c:	2c000215 	stw	r16,8(r5)
   80d70:	1c000315 	stw	r16,12(r3)
   80d74:	003f2b06 	br	80a24 <_malloc_r+0x1f4>
   80d78:	8445883a 	add	r2,r16,r17
   80d7c:	8c400054 	ori	r17,r17,1
   80d80:	18800515 	stw	r2,20(r3)
   80d84:	18800415 	stw	r2,16(r3)
   80d88:	29000054 	ori	r4,r5,1
   80d8c:	1147883a 	add	r3,r2,r5
   80d90:	84400115 	stw	r17,4(r16)
   80d94:	11000115 	stw	r4,4(r2)
   80d98:	12400315 	stw	r9,12(r2)
   80d9c:	12400215 	stw	r9,8(r2)
   80da0:	19400015 	stw	r5,0(r3)
   80da4:	9009883a 	mov	r4,r18
   80da8:	00833500 	call	83350 <__malloc_unlock>
   80dac:	80800204 	addi	r2,r16,8
   80db0:	003ecd06 	br	808e8 <_malloc_r+0xb8>
   80db4:	18800117 	ldw	r2,4(r3)
   80db8:	003f1a06 	br	80a24 <_malloc_r+0x1f4>
   80dbc:	5ac00044 	addi	r11,r11,1
   80dc0:	588000cc 	andi	r2,r11,3
   80dc4:	52800204 	addi	r10,r10,8
   80dc8:	103f2e1e 	bne	r2,zero,80a84 <_malloc_r+0x254>
   80dcc:	20c000cc 	andi	r3,r4,3
   80dd0:	60bffe04 	addi	r2,r12,-8
   80dd4:	18006f26 	beq	r3,zero,80f94 <_malloc_r+0x764>
   80dd8:	63000017 	ldw	r12,0(r12)
   80ddc:	213fffc4 	addi	r4,r4,-1
   80de0:	60bffa26 	beq	r12,r2,80dcc <_malloc_r+0x59c>
   80de4:	98800117 	ldw	r2,4(r19)
   80de8:	294b883a 	add	r5,r5,r5
   80dec:	117f5a36 	bltu	r2,r5,80b58 <_malloc_r+0x328>
   80df0:	283f5926 	beq	r5,zero,80b58 <_malloc_r+0x328>
   80df4:	1146703a 	and	r3,r2,r5
   80df8:	18001626 	beq	r3,zero,80e54 <_malloc_r+0x624>
   80dfc:	5809883a 	mov	r4,r11
   80e00:	003f1a06 	br	80a6c <_malloc_r+0x23c>
   80e04:	80800204 	addi	r2,r16,8
   80e08:	84000517 	ldw	r16,20(r16)
   80e0c:	143ea81e 	bne	r2,r16,808b0 <_malloc_r+0x80>
   80e10:	21000084 	addi	r4,r4,2
   80e14:	003ee306 	br	809a4 <_malloc_r+0x174>
   80e18:	210016c4 	addi	r4,r4,91
   80e1c:	210b883a 	add	r5,r4,r4
   80e20:	003eca06 	br	8094c <_malloc_r+0x11c>
   80e24:	100ad1ba 	srli	r5,r2,6
   80e28:	29400e04 	addi	r5,r5,56
   80e2c:	294d883a 	add	r6,r5,r5
   80e30:	003fbd06 	br	80d28 <_malloc_r+0x4f8>
   80e34:	84ff6026 	beq	r16,r19,80bb8 <_malloc_r+0x388>
   80e38:	00800034 	movhi	r2,0
   80e3c:	10811204 	addi	r2,r2,1096
   80e40:	14000217 	ldw	r16,8(r2)
   80e44:	00bfff04 	movi	r2,-4
   80e48:	80c00117 	ldw	r3,4(r16)
   80e4c:	1886703a 	and	r3,r3,r2
   80e50:	003f9406 	br	80ca4 <_malloc_r+0x474>
   80e54:	294b883a 	add	r5,r5,r5
   80e58:	1146703a 	and	r3,r2,r5
   80e5c:	5ac00104 	addi	r11,r11,4
   80e60:	183ffc26 	beq	r3,zero,80e54 <_malloc_r+0x624>
   80e64:	5809883a 	mov	r4,r11
   80e68:	003f0006 	br	80a6c <_malloc_r+0x23c>
   80e6c:	00805504 	movi	r2,340
   80e70:	11001336 	bltu	r2,r4,80ec0 <_malloc_r+0x690>
   80e74:	8808d3fa 	srli	r4,r17,15
   80e78:	21001dc4 	addi	r4,r4,119
   80e7c:	210b883a 	add	r5,r4,r4
   80e80:	003eb206 	br	8094c <_malloc_r+0x11c>
   80e84:	00840004 	movi	r2,4096
   80e88:	003f5d06 	br	80c00 <_malloc_r+0x3d0>
   80e8c:	00800044 	movi	r2,1
   80e90:	a0800115 	stw	r2,4(r20)
   80e94:	a021883a 	mov	r16,r20
   80e98:	0007883a 	mov	r3,zero
   80e9c:	003f8106 	br	80ca4 <_malloc_r+0x474>
   80ea0:	280bd0ba 	srai	r5,r5,2
   80ea4:	01800044 	movi	r6,1
   80ea8:	38800117 	ldw	r2,4(r7)
   80eac:	314c983a 	sll	r6,r6,r5
   80eb0:	180b883a 	mov	r5,r3
   80eb4:	3084b03a 	or	r2,r6,r2
   80eb8:	38800115 	stw	r2,4(r7)
   80ebc:	003fa906 	br	80d64 <_malloc_r+0x534>
   80ec0:	00815504 	movi	r2,1364
   80ec4:	11001836 	bltu	r2,r4,80f28 <_malloc_r+0x6f8>
   80ec8:	8808d4ba 	srli	r4,r17,18
   80ecc:	21001f04 	addi	r4,r4,124
   80ed0:	210b883a 	add	r5,r4,r4
   80ed4:	003e9d06 	br	8094c <_malloc_r+0x11c>
   80ed8:	bdc00404 	addi	r23,r23,16
   80edc:	003f2f06 	br	80b9c <_malloc_r+0x36c>
   80ee0:	01401504 	movi	r5,84
   80ee4:	28c01f36 	bltu	r5,r3,80f64 <_malloc_r+0x734>
   80ee8:	100ad33a 	srli	r5,r2,12
   80eec:	29401b84 	addi	r5,r5,110
   80ef0:	294d883a 	add	r6,r5,r5
   80ef4:	003f8c06 	br	80d28 <_malloc_r+0x4f8>
   80ef8:	9c000217 	ldw	r16,8(r19)
   80efc:	00bfff04 	movi	r2,-4
   80f00:	80c00117 	ldw	r3,4(r16)
   80f04:	1886703a 	and	r3,r3,r2
   80f08:	003f6606 	br	80ca4 <_malloc_r+0x474>
   80f0c:	e0c3ffcc 	andi	r3,fp,4095
   80f10:	183f2f1e 	bne	r3,zero,80bd0 <_malloc_r+0x3a0>
   80f14:	98c00217 	ldw	r3,8(r19)
   80f18:	bd49883a 	add	r4,r23,r21
   80f1c:	21000054 	ori	r4,r4,1
   80f20:	19000115 	stw	r4,4(r3)
   80f24:	003f5506 	br	80c7c <_malloc_r+0x44c>
   80f28:	01403f04 	movi	r5,252
   80f2c:	01001f84 	movi	r4,126
   80f30:	003e8606 	br	8094c <_malloc_r+0x11c>
   80f34:	9009883a 	mov	r4,r18
   80f38:	81400204 	addi	r5,r16,8
   80f3c:	008218c0 	call	8218c <_free_r>
   80f40:	00800034 	movhi	r2,0
   80f44:	1086ae04 	addi	r2,r2,6840
   80f48:	10800017 	ldw	r2,0(r2)
   80f4c:	003f4b06 	br	80c7c <_malloc_r+0x44c>
   80f50:	00c00044 	movi	r3,1
   80f54:	002f883a 	mov	r23,zero
   80f58:	003f3406 	br	80c2c <_malloc_r+0x3fc>
   80f5c:	d5200215 	stw	r20,-32760(gp)
   80f60:	003f2106 	br	80be8 <_malloc_r+0x3b8>
   80f64:	01405504 	movi	r5,340
   80f68:	28c00436 	bltu	r5,r3,80f7c <_malloc_r+0x74c>
   80f6c:	100ad3fa 	srli	r5,r2,15
   80f70:	29401dc4 	addi	r5,r5,119
   80f74:	294d883a 	add	r6,r5,r5
   80f78:	003f6b06 	br	80d28 <_malloc_r+0x4f8>
   80f7c:	01415504 	movi	r5,1364
   80f80:	28c00936 	bltu	r5,r3,80fa8 <_malloc_r+0x778>
   80f84:	100ad4ba 	srli	r5,r2,18
   80f88:	29401f04 	addi	r5,r5,124
   80f8c:	294d883a 	add	r6,r5,r5
   80f90:	003f6506 	br	80d28 <_malloc_r+0x4f8>
   80f94:	98800117 	ldw	r2,4(r19)
   80f98:	0146303a 	nor	r3,zero,r5
   80f9c:	1884703a 	and	r2,r3,r2
   80fa0:	98800115 	stw	r2,4(r19)
   80fa4:	003f9006 	br	80de8 <_malloc_r+0x5b8>
   80fa8:	01803f04 	movi	r6,252
   80fac:	01401f84 	movi	r5,126
   80fb0:	003f5d06 	br	80d28 <_malloc_r+0x4f8>

00080fb4 <memchr>:
   80fb4:	008000c4 	movi	r2,3
   80fb8:	29403fcc 	andi	r5,r5,255
   80fbc:	1180282e 	bgeu	r2,r6,81060 <memchr+0xac>
   80fc0:	2086703a 	and	r3,r4,r2
   80fc4:	1800351e 	bne	r3,zero,8109c <memchr+0xe8>
   80fc8:	2816923a 	slli	r11,r5,8
   80fcc:	2093883a 	add	r9,r4,r2
   80fd0:	22000084 	addi	r8,r4,2
   80fd4:	5957883a 	add	r11,r11,r5
   80fd8:	5816923a 	slli	r11,r11,8
   80fdc:	20c00044 	addi	r3,r4,1
   80fe0:	037fbff4 	movhi	r13,65279
   80fe4:	6b7fbfc4 	addi	r13,r13,-257
   80fe8:	5957883a 	add	r11,r11,r5
   80fec:	5816923a 	slli	r11,r11,8
   80ff0:	03202074 	movhi	r12,32897
   80ff4:	63202004 	addi	r12,r12,-32640
   80ff8:	101d883a 	mov	r14,r2
   80ffc:	5957883a 	add	r11,r11,r5
   81000:	21c00017 	ldw	r7,0(r4)
   81004:	31bfff04 	addi	r6,r6,-4
   81008:	1805883a 	mov	r2,r3
   8100c:	3acef03a 	xor	r7,r7,r11
   81010:	3b55883a 	add	r10,r7,r13
   81014:	01ce303a 	nor	r7,zero,r7
   81018:	51ce703a 	and	r7,r10,r7
   8101c:	3b0e703a 	and	r7,r7,r12
   81020:	38000a26 	beq	r7,zero,8104c <memchr+0x98>
   81024:	21c00003 	ldbu	r7,0(r4)
   81028:	39401e26 	beq	r7,r5,810a4 <memchr+0xf0>
   8102c:	19c00003 	ldbu	r7,0(r3)
   81030:	39401926 	beq	r7,r5,81098 <memchr+0xe4>
   81034:	41c00003 	ldbu	r7,0(r8)
   81038:	4005883a 	mov	r2,r8
   8103c:	39401626 	beq	r7,r5,81098 <memchr+0xe4>
   81040:	49c00003 	ldbu	r7,0(r9)
   81044:	4805883a 	mov	r2,r9
   81048:	39401326 	beq	r7,r5,81098 <memchr+0xe4>
   8104c:	21000104 	addi	r4,r4,4
   81050:	4a400104 	addi	r9,r9,4
   81054:	42000104 	addi	r8,r8,4
   81058:	18c00104 	addi	r3,r3,4
   8105c:	71bfe836 	bltu	r14,r6,81000 <memchr+0x4c>
   81060:	2005883a 	mov	r2,r4
   81064:	30000a26 	beq	r6,zero,81090 <memchr+0xdc>
   81068:	10c00003 	ldbu	r3,0(r2)
   8106c:	19400a26 	beq	r3,r5,81098 <memchr+0xe4>
   81070:	10c00044 	addi	r3,r2,1
   81074:	118d883a 	add	r6,r2,r6
   81078:	00000306 	br	81088 <memchr+0xd4>
   8107c:	11000003 	ldbu	r4,0(r2)
   81080:	18c00044 	addi	r3,r3,1
   81084:	21400426 	beq	r4,r5,81098 <memchr+0xe4>
   81088:	1805883a 	mov	r2,r3
   8108c:	19bffb1e 	bne	r3,r6,8107c <memchr+0xc8>
   81090:	0005883a 	mov	r2,zero
   81094:	f800283a 	ret
   81098:	f800283a 	ret
   8109c:	2005883a 	mov	r2,r4
   810a0:	003ff106 	br	81068 <memchr+0xb4>
   810a4:	2005883a 	mov	r2,r4
   810a8:	f800283a 	ret

000810ac <memcpy>:
   810ac:	defffb04 	addi	sp,sp,-20
   810b0:	dc000015 	stw	r16,0(sp)
   810b4:	dfc00415 	stw	ra,16(sp)
   810b8:	dcc00315 	stw	r19,12(sp)
   810bc:	dc800215 	stw	r18,8(sp)
   810c0:	dc400115 	stw	r17,4(sp)
   810c4:	00c003c4 	movi	r3,15
   810c8:	2021883a 	mov	r16,r4
   810cc:	3005883a 	mov	r2,r6
   810d0:	1980032e 	bgeu	r3,r6,810e0 <memcpy+0x34>
   810d4:	2906b03a 	or	r3,r5,r4
   810d8:	18c000cc 	andi	r3,r3,3
   810dc:	18001026 	beq	r3,zero,81120 <memcpy+0x74>
   810e0:	8007883a 	mov	r3,r16
   810e4:	288f883a 	add	r7,r5,r2
   810e8:	10000526 	beq	r2,zero,81100 <memcpy+0x54>
   810ec:	29800003 	ldbu	r6,0(r5)
   810f0:	18c00044 	addi	r3,r3,1
   810f4:	29400044 	addi	r5,r5,1
   810f8:	19bfffc5 	stb	r6,-1(r3)
   810fc:	29fffb1e 	bne	r5,r7,810ec <memcpy+0x40>
   81100:	8005883a 	mov	r2,r16
   81104:	dfc00417 	ldw	ra,16(sp)
   81108:	dcc00317 	ldw	r19,12(sp)
   8110c:	dc800217 	ldw	r18,8(sp)
   81110:	dc400117 	ldw	r17,4(sp)
   81114:	dc000017 	ldw	r16,0(sp)
   81118:	dec00504 	addi	sp,sp,20
   8111c:	f800283a 	ret
   81120:	32bffc04 	addi	r10,r6,-16
   81124:	5014d13a 	srli	r10,r10,4
   81128:	20800404 	addi	r2,r4,16
   8112c:	2007883a 	mov	r3,r4
   81130:	5008913a 	slli	r4,r10,4
   81134:	280f883a 	mov	r7,r5
   81138:	1105883a 	add	r2,r2,r4
   8113c:	3a000017 	ldw	r8,0(r7)
   81140:	18c00404 	addi	r3,r3,16
   81144:	39c00404 	addi	r7,r7,16
   81148:	1a3ffc15 	stw	r8,-16(r3)
   8114c:	3a3ffd17 	ldw	r8,-12(r7)
   81150:	1a3ffd15 	stw	r8,-12(r3)
   81154:	3a3ffe17 	ldw	r8,-8(r7)
   81158:	1a3ffe15 	stw	r8,-8(r3)
   8115c:	3a3fff17 	ldw	r8,-4(r7)
   81160:	1a3fff15 	stw	r8,-4(r3)
   81164:	18bff51e 	bne	r3,r2,8113c <memcpy+0x90>
   81168:	52800044 	addi	r10,r10,1
   8116c:	5014913a 	slli	r10,r10,4
   81170:	308003cc 	andi	r2,r6,15
   81174:	010000c4 	movi	r4,3
   81178:	8287883a 	add	r3,r16,r10
   8117c:	2a95883a 	add	r10,r5,r10
   81180:	2080182e 	bgeu	r4,r2,811e4 <memcpy+0x138>
   81184:	147fff04 	addi	r17,r2,-4
   81188:	8808d0ba 	srli	r4,r17,2
   8118c:	1a400104 	addi	r9,r3,4
   81190:	180d883a 	mov	r6,r3
   81194:	2105883a 	add	r2,r4,r4
   81198:	1085883a 	add	r2,r2,r2
   8119c:	4893883a 	add	r9,r9,r2
   811a0:	500f883a 	mov	r7,r10
   811a4:	3a000017 	ldw	r8,0(r7)
   811a8:	31800104 	addi	r6,r6,4
   811ac:	39c00104 	addi	r7,r7,4
   811b0:	323fff15 	stw	r8,-4(r6)
   811b4:	327ffb1e 	bne	r6,r9,811a4 <memcpy+0xf8>
   811b8:	20800044 	addi	r2,r4,1
   811bc:	1085883a 	add	r2,r2,r2
   811c0:	1085883a 	add	r2,r2,r2
   811c4:	017fff04 	movi	r5,-4
   811c8:	18a5883a 	add	r18,r3,r2
   811cc:	50a7883a 	add	r19,r10,r2
   811d0:	0082d440 	call	82d44 <__mulsi3>
   811d4:	1445883a 	add	r2,r2,r17
   811d8:	980b883a 	mov	r5,r19
   811dc:	9007883a 	mov	r3,r18
   811e0:	003fc006 	br	810e4 <memcpy+0x38>
   811e4:	500b883a 	mov	r5,r10
   811e8:	003fbe06 	br	810e4 <memcpy+0x38>

000811ec <memmove>:
   811ec:	defffb04 	addi	sp,sp,-20
   811f0:	dc000015 	stw	r16,0(sp)
   811f4:	dfc00415 	stw	ra,16(sp)
   811f8:	dcc00315 	stw	r19,12(sp)
   811fc:	dc800215 	stw	r18,8(sp)
   81200:	dc400115 	stw	r17,4(sp)
   81204:	2021883a 	mov	r16,r4
   81208:	300f883a 	mov	r7,r6
   8120c:	2900122e 	bgeu	r5,r4,81258 <memmove+0x6c>
   81210:	2987883a 	add	r3,r5,r6
   81214:	20c0102e 	bgeu	r4,r3,81258 <memmove+0x6c>
   81218:	218b883a 	add	r5,r4,r6
   8121c:	1989c83a 	sub	r4,r3,r6
   81220:	30000526 	beq	r6,zero,81238 <memmove+0x4c>
   81224:	18ffffc4 	addi	r3,r3,-1
   81228:	18800003 	ldbu	r2,0(r3)
   8122c:	297fffc4 	addi	r5,r5,-1
   81230:	28800005 	stb	r2,0(r5)
   81234:	193ffb1e 	bne	r3,r4,81224 <memmove+0x38>
   81238:	8005883a 	mov	r2,r16
   8123c:	dfc00417 	ldw	ra,16(sp)
   81240:	dcc00317 	ldw	r19,12(sp)
   81244:	dc800217 	ldw	r18,8(sp)
   81248:	dc400117 	ldw	r17,4(sp)
   8124c:	dc000017 	ldw	r16,0(sp)
   81250:	dec00504 	addi	sp,sp,20
   81254:	f800283a 	ret
   81258:	008003c4 	movi	r2,15
   8125c:	1180422e 	bgeu	r2,r6,81368 <memmove+0x17c>
   81260:	2c04b03a 	or	r2,r5,r16
   81264:	108000cc 	andi	r2,r2,3
   81268:	10003f1e 	bne	r2,zero,81368 <memmove+0x17c>
   8126c:	32bffc04 	addi	r10,r6,-16
   81270:	5014d13a 	srli	r10,r10,4
   81274:	81000404 	addi	r4,r16,16
   81278:	8007883a 	mov	r3,r16
   8127c:	5004913a 	slli	r2,r10,4
   81280:	280f883a 	mov	r7,r5
   81284:	2089883a 	add	r4,r4,r2
   81288:	38800017 	ldw	r2,0(r7)
   8128c:	18c00404 	addi	r3,r3,16
   81290:	39c00404 	addi	r7,r7,16
   81294:	18bffc15 	stw	r2,-16(r3)
   81298:	38bffd17 	ldw	r2,-12(r7)
   8129c:	18bffd15 	stw	r2,-12(r3)
   812a0:	38bffe17 	ldw	r2,-8(r7)
   812a4:	18bffe15 	stw	r2,-8(r3)
   812a8:	38bfff17 	ldw	r2,-4(r7)
   812ac:	18bfff15 	stw	r2,-4(r3)
   812b0:	193ff51e 	bne	r3,r4,81288 <memmove+0x9c>
   812b4:	52800044 	addi	r10,r10,1
   812b8:	5014913a 	slli	r10,r10,4
   812bc:	31c003cc 	andi	r7,r6,15
   812c0:	008000c4 	movi	r2,3
   812c4:	8287883a 	add	r3,r16,r10
   812c8:	2a95883a 	add	r10,r5,r10
   812cc:	11c0282e 	bgeu	r2,r7,81370 <memmove+0x184>
   812d0:	3c7fff04 	addi	r17,r7,-4
   812d4:	8808d0ba 	srli	r4,r17,2
   812d8:	1a400104 	addi	r9,r3,4
   812dc:	180d883a 	mov	r6,r3
   812e0:	2105883a 	add	r2,r4,r4
   812e4:	1085883a 	add	r2,r2,r2
   812e8:	4893883a 	add	r9,r9,r2
   812ec:	5005883a 	mov	r2,r10
   812f0:	12000017 	ldw	r8,0(r2)
   812f4:	31800104 	addi	r6,r6,4
   812f8:	10800104 	addi	r2,r2,4
   812fc:	323fff15 	stw	r8,-4(r6)
   81300:	327ffb1e 	bne	r6,r9,812f0 <memmove+0x104>
   81304:	20800044 	addi	r2,r4,1
   81308:	1085883a 	add	r2,r2,r2
   8130c:	1085883a 	add	r2,r2,r2
   81310:	017fff04 	movi	r5,-4
   81314:	18a5883a 	add	r18,r3,r2
   81318:	50a7883a 	add	r19,r10,r2
   8131c:	0082d440 	call	82d44 <__mulsi3>
   81320:	144f883a 	add	r7,r2,r17
   81324:	980b883a 	mov	r5,r19
   81328:	9007883a 	mov	r3,r18
   8132c:	383fc226 	beq	r7,zero,81238 <memmove+0x4c>
   81330:	19cf883a 	add	r7,r3,r7
   81334:	29800003 	ldbu	r6,0(r5)
   81338:	18c00044 	addi	r3,r3,1
   8133c:	29400044 	addi	r5,r5,1
   81340:	19bfffc5 	stb	r6,-1(r3)
   81344:	19fffb1e 	bne	r3,r7,81334 <memmove+0x148>
   81348:	8005883a 	mov	r2,r16
   8134c:	dfc00417 	ldw	ra,16(sp)
   81350:	dcc00317 	ldw	r19,12(sp)
   81354:	dc800217 	ldw	r18,8(sp)
   81358:	dc400117 	ldw	r17,4(sp)
   8135c:	dc000017 	ldw	r16,0(sp)
   81360:	dec00504 	addi	sp,sp,20
   81364:	f800283a 	ret
   81368:	8007883a 	mov	r3,r16
   8136c:	003fef06 	br	8132c <memmove+0x140>
   81370:	500b883a 	mov	r5,r10
   81374:	003fed06 	br	8132c <memmove+0x140>

00081378 <_realloc_r>:
   81378:	defff504 	addi	sp,sp,-44
   8137c:	dd400615 	stw	r21,24(sp)
   81380:	dc800315 	stw	r18,12(sp)
   81384:	dc000115 	stw	r16,4(sp)
   81388:	dfc00a15 	stw	ra,40(sp)
   8138c:	df000915 	stw	fp,36(sp)
   81390:	ddc00815 	stw	r23,32(sp)
   81394:	dd800715 	stw	r22,28(sp)
   81398:	dd000515 	stw	r20,20(sp)
   8139c:	dcc00415 	stw	r19,16(sp)
   813a0:	dc400215 	stw	r17,8(sp)
   813a4:	2821883a 	mov	r16,r5
   813a8:	202b883a 	mov	r21,r4
   813ac:	3025883a 	mov	r18,r6
   813b0:	28009626 	beq	r5,zero,8160c <_realloc_r+0x294>
   813b4:	00833300 	call	83330 <__malloc_lock>
   813b8:	80bfff17 	ldw	r2,-4(r16)
   813bc:	04ffff04 	movi	r19,-4
   813c0:	90c002c4 	addi	r3,r18,11
   813c4:	01000584 	movi	r4,22
   813c8:	85bffe04 	addi	r22,r16,-8
   813cc:	14e6703a 	and	r19,r2,r19
   813d0:	20c0372e 	bgeu	r4,r3,814b0 <_realloc_r+0x138>
   813d4:	047ffe04 	movi	r17,-8
   813d8:	1c62703a 	and	r17,r3,r17
   813dc:	8807883a 	mov	r3,r17
   813e0:	88005a16 	blt	r17,zero,8154c <_realloc_r+0x1d4>
   813e4:	8c805936 	bltu	r17,r18,8154c <_realloc_r+0x1d4>
   813e8:	98c0340e 	bge	r19,r3,814bc <_realloc_r+0x144>
   813ec:	07000034 	movhi	fp,0
   813f0:	e7011204 	addi	fp,fp,1096
   813f4:	e1400217 	ldw	r5,8(fp)
   813f8:	b4c9883a 	add	r4,r22,r19
   813fc:	29009026 	beq	r5,r4,81640 <_realloc_r+0x2c8>
   81400:	21800117 	ldw	r6,4(r4)
   81404:	01ffff84 	movi	r7,-2
   81408:	31ce703a 	and	r7,r6,r7
   8140c:	21cf883a 	add	r7,r4,r7
   81410:	39c00117 	ldw	r7,4(r7)
   81414:	39c0004c 	andi	r7,r7,1
   81418:	38004326 	beq	r7,zero,81528 <_realloc_r+0x1b0>
   8141c:	000d883a 	mov	r6,zero
   81420:	0009883a 	mov	r4,zero
   81424:	1080004c 	andi	r2,r2,1
   81428:	10005a1e 	bne	r2,zero,81594 <_realloc_r+0x21c>
   8142c:	85fffe17 	ldw	r23,-8(r16)
   81430:	00bfff04 	movi	r2,-4
   81434:	b5efc83a 	sub	r23,r22,r23
   81438:	b9c00117 	ldw	r7,4(r23)
   8143c:	388e703a 	and	r7,r7,r2
   81440:	3ccf883a 	add	r7,r7,r19
   81444:	20005226 	beq	r4,zero,81590 <_realloc_r+0x218>
   81448:	31e9883a 	add	r20,r6,r7
   8144c:	2140c726 	beq	r4,r5,8176c <_realloc_r+0x3f4>
   81450:	a0c04f16 	blt	r20,r3,81590 <_realloc_r+0x218>
   81454:	20800317 	ldw	r2,12(r4)
   81458:	20c00217 	ldw	r3,8(r4)
   8145c:	99bfff04 	addi	r6,r19,-4
   81460:	01000904 	movi	r4,36
   81464:	18800315 	stw	r2,12(r3)
   81468:	10c00215 	stw	r3,8(r2)
   8146c:	b8c00217 	ldw	r3,8(r23)
   81470:	b8800317 	ldw	r2,12(r23)
   81474:	bc800204 	addi	r18,r23,8
   81478:	18800315 	stw	r2,12(r3)
   8147c:	10c00215 	stw	r3,8(r2)
   81480:	2180ed36 	bltu	r4,r6,81838 <_realloc_r+0x4c0>
   81484:	008004c4 	movi	r2,19
   81488:	11809b2e 	bgeu	r2,r6,816f8 <_realloc_r+0x380>
   8148c:	80800017 	ldw	r2,0(r16)
   81490:	b8800215 	stw	r2,8(r23)
   81494:	80800117 	ldw	r2,4(r16)
   81498:	b8800315 	stw	r2,12(r23)
   8149c:	008006c4 	movi	r2,27
   814a0:	1180f936 	bltu	r2,r6,81888 <_realloc_r+0x510>
   814a4:	b8800404 	addi	r2,r23,16
   814a8:	80c00204 	addi	r3,r16,8
   814ac:	00009406 	br	81700 <_realloc_r+0x388>
   814b0:	00c00404 	movi	r3,16
   814b4:	1823883a 	mov	r17,r3
   814b8:	003fca06 	br	813e4 <_realloc_r+0x6c>
   814bc:	9829883a 	mov	r20,r19
   814c0:	a447c83a 	sub	r3,r20,r17
   814c4:	010003c4 	movi	r4,15
   814c8:	1080004c 	andi	r2,r2,1
   814cc:	20c02336 	bltu	r4,r3,8155c <_realloc_r+0x1e4>
   814d0:	1504b03a 	or	r2,r2,r20
   814d4:	b0800115 	stw	r2,4(r22)
   814d8:	b52d883a 	add	r22,r22,r20
   814dc:	b0800117 	ldw	r2,4(r22)
   814e0:	10800054 	ori	r2,r2,1
   814e4:	b0800115 	stw	r2,4(r22)
   814e8:	a809883a 	mov	r4,r21
   814ec:	00833500 	call	83350 <__malloc_unlock>
   814f0:	8025883a 	mov	r18,r16
   814f4:	9005883a 	mov	r2,r18
   814f8:	dfc00a17 	ldw	ra,40(sp)
   814fc:	df000917 	ldw	fp,36(sp)
   81500:	ddc00817 	ldw	r23,32(sp)
   81504:	dd800717 	ldw	r22,28(sp)
   81508:	dd400617 	ldw	r21,24(sp)
   8150c:	dd000517 	ldw	r20,20(sp)
   81510:	dcc00417 	ldw	r19,16(sp)
   81514:	dc800317 	ldw	r18,12(sp)
   81518:	dc400217 	ldw	r17,8(sp)
   8151c:	dc000117 	ldw	r16,4(sp)
   81520:	dec00b04 	addi	sp,sp,44
   81524:	f800283a 	ret
   81528:	01ffff04 	movi	r7,-4
   8152c:	31cc703a 	and	r6,r6,r7
   81530:	34e9883a 	add	r20,r6,r19
   81534:	a0ffbb16 	blt	r20,r3,81424 <_realloc_r+0xac>
   81538:	20c00317 	ldw	r3,12(r4)
   8153c:	21000217 	ldw	r4,8(r4)
   81540:	20c00315 	stw	r3,12(r4)
   81544:	19000215 	stw	r4,8(r3)
   81548:	003fdd06 	br	814c0 <_realloc_r+0x148>
   8154c:	00800304 	movi	r2,12
   81550:	a8800015 	stw	r2,0(r21)
   81554:	0025883a 	mov	r18,zero
   81558:	003fe606 	br	814f4 <_realloc_r+0x17c>
   8155c:	1444b03a 	or	r2,r2,r17
   81560:	b0800115 	stw	r2,4(r22)
   81564:	b44b883a 	add	r5,r22,r17
   81568:	18800054 	ori	r2,r3,1
   8156c:	28800115 	stw	r2,4(r5)
   81570:	28c7883a 	add	r3,r5,r3
   81574:	18800117 	ldw	r2,4(r3)
   81578:	a809883a 	mov	r4,r21
   8157c:	29400204 	addi	r5,r5,8
   81580:	10800054 	ori	r2,r2,1
   81584:	18800115 	stw	r2,4(r3)
   81588:	008218c0 	call	8218c <_free_r>
   8158c:	003fd606 	br	814e8 <_realloc_r+0x170>
   81590:	38c0330e 	bge	r7,r3,81660 <_realloc_r+0x2e8>
   81594:	900b883a 	mov	r5,r18
   81598:	a809883a 	mov	r4,r21
   8159c:	00808300 	call	80830 <_malloc_r>
   815a0:	1025883a 	mov	r18,r2
   815a4:	10001626 	beq	r2,zero,81600 <_realloc_r+0x288>
   815a8:	80bfff17 	ldw	r2,-4(r16)
   815ac:	00ffff84 	movi	r3,-2
   815b0:	913ffe04 	addi	r4,r18,-8
   815b4:	10c6703a 	and	r3,r2,r3
   815b8:	b0c7883a 	add	r3,r22,r3
   815bc:	20c09926 	beq	r4,r3,81824 <_realloc_r+0x4ac>
   815c0:	99bfff04 	addi	r6,r19,-4
   815c4:	00800904 	movi	r2,36
   815c8:	11806436 	bltu	r2,r6,8175c <_realloc_r+0x3e4>
   815cc:	00c004c4 	movi	r3,19
   815d0:	19804036 	bltu	r3,r6,816d4 <_realloc_r+0x35c>
   815d4:	9005883a 	mov	r2,r18
   815d8:	8007883a 	mov	r3,r16
   815dc:	19000017 	ldw	r4,0(r3)
   815e0:	11000015 	stw	r4,0(r2)
   815e4:	19000117 	ldw	r4,4(r3)
   815e8:	11000115 	stw	r4,4(r2)
   815ec:	18c00217 	ldw	r3,8(r3)
   815f0:	10c00215 	stw	r3,8(r2)
   815f4:	a809883a 	mov	r4,r21
   815f8:	800b883a 	mov	r5,r16
   815fc:	008218c0 	call	8218c <_free_r>
   81600:	a809883a 	mov	r4,r21
   81604:	00833500 	call	83350 <__malloc_unlock>
   81608:	003fba06 	br	814f4 <_realloc_r+0x17c>
   8160c:	300b883a 	mov	r5,r6
   81610:	dfc00a17 	ldw	ra,40(sp)
   81614:	df000917 	ldw	fp,36(sp)
   81618:	ddc00817 	ldw	r23,32(sp)
   8161c:	dd800717 	ldw	r22,28(sp)
   81620:	dd400617 	ldw	r21,24(sp)
   81624:	dd000517 	ldw	r20,20(sp)
   81628:	dcc00417 	ldw	r19,16(sp)
   8162c:	dc800317 	ldw	r18,12(sp)
   81630:	dc400217 	ldw	r17,8(sp)
   81634:	dc000117 	ldw	r16,4(sp)
   81638:	dec00b04 	addi	sp,sp,44
   8163c:	00808301 	jmpi	80830 <_malloc_r>
   81640:	29800117 	ldw	r6,4(r5)
   81644:	013fff04 	movi	r4,-4
   81648:	89c00404 	addi	r7,r17,16
   8164c:	310c703a 	and	r6,r6,r4
   81650:	34c9883a 	add	r4,r6,r19
   81654:	21c0340e 	bge	r4,r7,81728 <_realloc_r+0x3b0>
   81658:	2809883a 	mov	r4,r5
   8165c:	003f7106 	br	81424 <_realloc_r+0xac>
   81660:	b8800317 	ldw	r2,12(r23)
   81664:	b8c00217 	ldw	r3,8(r23)
   81668:	99bfff04 	addi	r6,r19,-4
   8166c:	01000904 	movi	r4,36
   81670:	18800315 	stw	r2,12(r3)
   81674:	10c00215 	stw	r3,8(r2)
   81678:	bc800204 	addi	r18,r23,8
   8167c:	21807836 	bltu	r4,r6,81860 <_realloc_r+0x4e8>
   81680:	008004c4 	movi	r2,19
   81684:	1180732e 	bgeu	r2,r6,81854 <_realloc_r+0x4dc>
   81688:	80800017 	ldw	r2,0(r16)
   8168c:	b8800215 	stw	r2,8(r23)
   81690:	80800117 	ldw	r2,4(r16)
   81694:	b8800315 	stw	r2,12(r23)
   81698:	008006c4 	movi	r2,27
   8169c:	11808936 	bltu	r2,r6,818c4 <_realloc_r+0x54c>
   816a0:	b8800404 	addi	r2,r23,16
   816a4:	80c00204 	addi	r3,r16,8
   816a8:	19000017 	ldw	r4,0(r3)
   816ac:	9021883a 	mov	r16,r18
   816b0:	3829883a 	mov	r20,r7
   816b4:	11000015 	stw	r4,0(r2)
   816b8:	19000117 	ldw	r4,4(r3)
   816bc:	b82d883a 	mov	r22,r23
   816c0:	11000115 	stw	r4,4(r2)
   816c4:	18c00217 	ldw	r3,8(r3)
   816c8:	10c00215 	stw	r3,8(r2)
   816cc:	b8800117 	ldw	r2,4(r23)
   816d0:	003f7b06 	br	814c0 <_realloc_r+0x148>
   816d4:	80c00017 	ldw	r3,0(r16)
   816d8:	90c00015 	stw	r3,0(r18)
   816dc:	80c00117 	ldw	r3,4(r16)
   816e0:	90c00115 	stw	r3,4(r18)
   816e4:	00c006c4 	movi	r3,27
   816e8:	19804636 	bltu	r3,r6,81804 <_realloc_r+0x48c>
   816ec:	90800204 	addi	r2,r18,8
   816f0:	80c00204 	addi	r3,r16,8
   816f4:	003fb906 	br	815dc <_realloc_r+0x264>
   816f8:	9005883a 	mov	r2,r18
   816fc:	8007883a 	mov	r3,r16
   81700:	19000017 	ldw	r4,0(r3)
   81704:	9021883a 	mov	r16,r18
   81708:	b82d883a 	mov	r22,r23
   8170c:	11000015 	stw	r4,0(r2)
   81710:	19000117 	ldw	r4,4(r3)
   81714:	11000115 	stw	r4,4(r2)
   81718:	18c00217 	ldw	r3,8(r3)
   8171c:	10c00215 	stw	r3,8(r2)
   81720:	b8800117 	ldw	r2,4(r23)
   81724:	003f6606 	br	814c0 <_realloc_r+0x148>
   81728:	2445c83a 	sub	r2,r4,r17
   8172c:	b46d883a 	add	r22,r22,r17
   81730:	10800054 	ori	r2,r2,1
   81734:	b0800115 	stw	r2,4(r22)
   81738:	80bfff17 	ldw	r2,-4(r16)
   8173c:	a809883a 	mov	r4,r21
   81740:	e5800215 	stw	r22,8(fp)
   81744:	1080004c 	andi	r2,r2,1
   81748:	88a2b03a 	or	r17,r17,r2
   8174c:	847fff15 	stw	r17,-4(r16)
   81750:	00833500 	call	83350 <__malloc_unlock>
   81754:	8025883a 	mov	r18,r16
   81758:	003f6606 	br	814f4 <_realloc_r+0x17c>
   8175c:	9009883a 	mov	r4,r18
   81760:	800b883a 	mov	r5,r16
   81764:	00811ec0 	call	811ec <memmove>
   81768:	003fa206 	br	815f4 <_realloc_r+0x27c>
   8176c:	88800404 	addi	r2,r17,16
   81770:	a0bf8716 	blt	r20,r2,81590 <_realloc_r+0x218>
   81774:	b8800317 	ldw	r2,12(r23)
   81778:	b8c00217 	ldw	r3,8(r23)
   8177c:	99bfff04 	addi	r6,r19,-4
   81780:	01000904 	movi	r4,36
   81784:	18800315 	stw	r2,12(r3)
   81788:	10c00215 	stw	r3,8(r2)
   8178c:	bc800204 	addi	r18,r23,8
   81790:	21806536 	bltu	r4,r6,81928 <_realloc_r+0x5b0>
   81794:	008004c4 	movi	r2,19
   81798:	1180592e 	bgeu	r2,r6,81900 <_realloc_r+0x588>
   8179c:	80800017 	ldw	r2,0(r16)
   817a0:	b8800215 	stw	r2,8(r23)
   817a4:	80800117 	ldw	r2,4(r16)
   817a8:	b8800315 	stw	r2,12(r23)
   817ac:	008006c4 	movi	r2,27
   817b0:	11806136 	bltu	r2,r6,81938 <_realloc_r+0x5c0>
   817b4:	b8800404 	addi	r2,r23,16
   817b8:	80c00204 	addi	r3,r16,8
   817bc:	19000017 	ldw	r4,0(r3)
   817c0:	11000015 	stw	r4,0(r2)
   817c4:	19000117 	ldw	r4,4(r3)
   817c8:	11000115 	stw	r4,4(r2)
   817cc:	18c00217 	ldw	r3,8(r3)
   817d0:	10c00215 	stw	r3,8(r2)
   817d4:	a447c83a 	sub	r3,r20,r17
   817d8:	bc45883a 	add	r2,r23,r17
   817dc:	18c00054 	ori	r3,r3,1
   817e0:	10c00115 	stw	r3,4(r2)
   817e4:	b8c00117 	ldw	r3,4(r23)
   817e8:	e0800215 	stw	r2,8(fp)
   817ec:	a809883a 	mov	r4,r21
   817f0:	1880004c 	andi	r2,r3,1
   817f4:	88a2b03a 	or	r17,r17,r2
   817f8:	bc400115 	stw	r17,4(r23)
   817fc:	00833500 	call	83350 <__malloc_unlock>
   81800:	003f3c06 	br	814f4 <_realloc_r+0x17c>
   81804:	80c00217 	ldw	r3,8(r16)
   81808:	90c00215 	stw	r3,8(r18)
   8180c:	80c00317 	ldw	r3,12(r16)
   81810:	90c00315 	stw	r3,12(r18)
   81814:	30802426 	beq	r6,r2,818a8 <_realloc_r+0x530>
   81818:	90800404 	addi	r2,r18,16
   8181c:	80c00404 	addi	r3,r16,16
   81820:	003f6e06 	br	815dc <_realloc_r+0x264>
   81824:	953fff17 	ldw	r20,-4(r18)
   81828:	00ffff04 	movi	r3,-4
   8182c:	a0e8703a 	and	r20,r20,r3
   81830:	a4e9883a 	add	r20,r20,r19
   81834:	003f2206 	br	814c0 <_realloc_r+0x148>
   81838:	800b883a 	mov	r5,r16
   8183c:	9009883a 	mov	r4,r18
   81840:	00811ec0 	call	811ec <memmove>
   81844:	9021883a 	mov	r16,r18
   81848:	b8800117 	ldw	r2,4(r23)
   8184c:	b82d883a 	mov	r22,r23
   81850:	003f1b06 	br	814c0 <_realloc_r+0x148>
   81854:	9005883a 	mov	r2,r18
   81858:	8007883a 	mov	r3,r16
   8185c:	003f9206 	br	816a8 <_realloc_r+0x330>
   81860:	800b883a 	mov	r5,r16
   81864:	9009883a 	mov	r4,r18
   81868:	d9c00015 	stw	r7,0(sp)
   8186c:	00811ec0 	call	811ec <memmove>
   81870:	d9c00017 	ldw	r7,0(sp)
   81874:	9021883a 	mov	r16,r18
   81878:	b8800117 	ldw	r2,4(r23)
   8187c:	3829883a 	mov	r20,r7
   81880:	b82d883a 	mov	r22,r23
   81884:	003f0e06 	br	814c0 <_realloc_r+0x148>
   81888:	80800217 	ldw	r2,8(r16)
   8188c:	b8800415 	stw	r2,16(r23)
   81890:	80800317 	ldw	r2,12(r16)
   81894:	b8800515 	stw	r2,20(r23)
   81898:	31001226 	beq	r6,r4,818e4 <_realloc_r+0x56c>
   8189c:	b8800604 	addi	r2,r23,24
   818a0:	80c00404 	addi	r3,r16,16
   818a4:	003f9606 	br	81700 <_realloc_r+0x388>
   818a8:	81000417 	ldw	r4,16(r16)
   818ac:	90800604 	addi	r2,r18,24
   818b0:	80c00604 	addi	r3,r16,24
   818b4:	91000415 	stw	r4,16(r18)
   818b8:	81000517 	ldw	r4,20(r16)
   818bc:	91000515 	stw	r4,20(r18)
   818c0:	003f4606 	br	815dc <_realloc_r+0x264>
   818c4:	80800217 	ldw	r2,8(r16)
   818c8:	b8800415 	stw	r2,16(r23)
   818cc:	80800317 	ldw	r2,12(r16)
   818d0:	b8800515 	stw	r2,20(r23)
   818d4:	31000d26 	beq	r6,r4,8190c <_realloc_r+0x594>
   818d8:	b8800604 	addi	r2,r23,24
   818dc:	80c00404 	addi	r3,r16,16
   818e0:	003f7106 	br	816a8 <_realloc_r+0x330>
   818e4:	81000417 	ldw	r4,16(r16)
   818e8:	b8800804 	addi	r2,r23,32
   818ec:	80c00604 	addi	r3,r16,24
   818f0:	b9000615 	stw	r4,24(r23)
   818f4:	81000517 	ldw	r4,20(r16)
   818f8:	b9000715 	stw	r4,28(r23)
   818fc:	003f8006 	br	81700 <_realloc_r+0x388>
   81900:	9005883a 	mov	r2,r18
   81904:	8007883a 	mov	r3,r16
   81908:	003fac06 	br	817bc <_realloc_r+0x444>
   8190c:	81000417 	ldw	r4,16(r16)
   81910:	b8800804 	addi	r2,r23,32
   81914:	80c00604 	addi	r3,r16,24
   81918:	b9000615 	stw	r4,24(r23)
   8191c:	81000517 	ldw	r4,20(r16)
   81920:	b9000715 	stw	r4,28(r23)
   81924:	003f6006 	br	816a8 <_realloc_r+0x330>
   81928:	9009883a 	mov	r4,r18
   8192c:	800b883a 	mov	r5,r16
   81930:	00811ec0 	call	811ec <memmove>
   81934:	003fa706 	br	817d4 <_realloc_r+0x45c>
   81938:	80800217 	ldw	r2,8(r16)
   8193c:	b8800415 	stw	r2,16(r23)
   81940:	80800317 	ldw	r2,12(r16)
   81944:	b8800515 	stw	r2,20(r23)
   81948:	31000326 	beq	r6,r4,81958 <_realloc_r+0x5e0>
   8194c:	b8800604 	addi	r2,r23,24
   81950:	80c00404 	addi	r3,r16,16
   81954:	003f9906 	br	817bc <_realloc_r+0x444>
   81958:	81000417 	ldw	r4,16(r16)
   8195c:	b8800804 	addi	r2,r23,32
   81960:	80c00604 	addi	r3,r16,24
   81964:	b9000615 	stw	r4,24(r23)
   81968:	81000517 	ldw	r4,20(r16)
   8196c:	b9000715 	stw	r4,28(r23)
   81970:	003f9206 	br	817bc <_realloc_r+0x444>

00081974 <_sbrk_r>:
   81974:	defffd04 	addi	sp,sp,-12
   81978:	dc400115 	stw	r17,4(sp)
   8197c:	dc000015 	stw	r16,0(sp)
   81980:	2023883a 	mov	r17,r4
   81984:	04000034 	movhi	r16,0
   81988:	8406a704 	addi	r16,r16,6812
   8198c:	2809883a 	mov	r4,r5
   81990:	dfc00215 	stw	ra,8(sp)
   81994:	80000015 	stw	zero,0(r16)
   81998:	00835340 	call	83534 <sbrk>
   8199c:	00ffffc4 	movi	r3,-1
   819a0:	10c00526 	beq	r2,r3,819b8 <_sbrk_r+0x44>
   819a4:	dfc00217 	ldw	ra,8(sp)
   819a8:	dc400117 	ldw	r17,4(sp)
   819ac:	dc000017 	ldw	r16,0(sp)
   819b0:	dec00304 	addi	sp,sp,12
   819b4:	f800283a 	ret
   819b8:	80c00017 	ldw	r3,0(r16)
   819bc:	183ff926 	beq	r3,zero,819a4 <_sbrk_r+0x30>
   819c0:	88c00015 	stw	r3,0(r17)
   819c4:	dfc00217 	ldw	ra,8(sp)
   819c8:	dc400117 	ldw	r17,4(sp)
   819cc:	dc000017 	ldw	r16,0(sp)
   819d0:	dec00304 	addi	sp,sp,12
   819d4:	f800283a 	ret

000819d8 <__swsetup_r>:
   819d8:	00800034 	movhi	r2,0
   819dc:	10869704 	addi	r2,r2,6748
   819e0:	10800017 	ldw	r2,0(r2)
   819e4:	defffd04 	addi	sp,sp,-12
   819e8:	dc400115 	stw	r17,4(sp)
   819ec:	dc000015 	stw	r16,0(sp)
   819f0:	dfc00215 	stw	ra,8(sp)
   819f4:	2023883a 	mov	r17,r4
   819f8:	2821883a 	mov	r16,r5
   819fc:	10000226 	beq	r2,zero,81a08 <__swsetup_r+0x30>
   81a00:	10c00e17 	ldw	r3,56(r2)
   81a04:	18003d26 	beq	r3,zero,81afc <__swsetup_r+0x124>
   81a08:	8080030b 	ldhu	r2,12(r16)
   81a0c:	10c0020c 	andi	r3,r2,8
   81a10:	18ffffcc 	andi	r3,r3,65535
   81a14:	18e0001c 	xori	r3,r3,32768
   81a18:	18e00004 	addi	r3,r3,-32768
   81a1c:	18001226 	beq	r3,zero,81a68 <__swsetup_r+0x90>
   81a20:	80c00417 	ldw	r3,16(r16)
   81a24:	18001f26 	beq	r3,zero,81aa4 <__swsetup_r+0xcc>
   81a28:	1100004c 	andi	r4,r2,1
   81a2c:	2000261e 	bne	r4,zero,81ac8 <__swsetup_r+0xf0>
   81a30:	1080008c 	andi	r2,r2,2
   81a34:	10bfffcc 	andi	r2,r2,65535
   81a38:	10a0001c 	xori	r2,r2,32768
   81a3c:	10a00004 	addi	r2,r2,-32768
   81a40:	1000311e 	bne	r2,zero,81b08 <__swsetup_r+0x130>
   81a44:	80800517 	ldw	r2,20(r16)
   81a48:	80800215 	stw	r2,8(r16)
   81a4c:	18002326 	beq	r3,zero,81adc <__swsetup_r+0x104>
   81a50:	0005883a 	mov	r2,zero
   81a54:	dfc00217 	ldw	ra,8(sp)
   81a58:	dc400117 	ldw	r17,4(sp)
   81a5c:	dc000017 	ldw	r16,0(sp)
   81a60:	dec00304 	addi	sp,sp,12
   81a64:	f800283a 	ret
   81a68:	10c0040c 	andi	r3,r2,16
   81a6c:	18ffffcc 	andi	r3,r3,65535
   81a70:	18e0001c 	xori	r3,r3,32768
   81a74:	18e00004 	addi	r3,r3,-32768
   81a78:	18001e26 	beq	r3,zero,81af4 <__swsetup_r+0x11c>
   81a7c:	10c0010c 	andi	r3,r2,4
   81a80:	18ffffcc 	andi	r3,r3,65535
   81a84:	18e0001c 	xori	r3,r3,32768
   81a88:	18e00004 	addi	r3,r3,-32768
   81a8c:	1800211e 	bne	r3,zero,81b14 <__swsetup_r+0x13c>
   81a90:	80c00417 	ldw	r3,16(r16)
   81a94:	11400214 	ori	r5,r2,8
   81a98:	8140030d 	sth	r5,12(r16)
   81a9c:	2805883a 	mov	r2,r5
   81aa0:	183fe11e 	bne	r3,zero,81a28 <__swsetup_r+0x50>
   81aa4:	1140a00c 	andi	r5,r2,640
   81aa8:	01008004 	movi	r4,512
   81aac:	293fde26 	beq	r5,r4,81a28 <__swsetup_r+0x50>
   81ab0:	8809883a 	mov	r4,r17
   81ab4:	800b883a 	mov	r5,r16
   81ab8:	00825bc0 	call	825bc <__smakebuf_r>
   81abc:	8080030b 	ldhu	r2,12(r16)
   81ac0:	80c00417 	ldw	r3,16(r16)
   81ac4:	003fd806 	br	81a28 <__swsetup_r+0x50>
   81ac8:	80800517 	ldw	r2,20(r16)
   81acc:	80000215 	stw	zero,8(r16)
   81ad0:	0085c83a 	sub	r2,zero,r2
   81ad4:	80800615 	stw	r2,24(r16)
   81ad8:	183fdd1e 	bne	r3,zero,81a50 <__swsetup_r+0x78>
   81adc:	8080030b 	ldhu	r2,12(r16)
   81ae0:	1080200c 	andi	r2,r2,128
   81ae4:	10bfffcc 	andi	r2,r2,65535
   81ae8:	10a0001c 	xori	r2,r2,32768
   81aec:	10a00004 	addi	r2,r2,-32768
   81af0:	103fd826 	beq	r2,zero,81a54 <__swsetup_r+0x7c>
   81af4:	00bfffc4 	movi	r2,-1
   81af8:	003fd606 	br	81a54 <__swsetup_r+0x7c>
   81afc:	1009883a 	mov	r4,r2
   81b00:	0081e080 	call	81e08 <__sinit>
   81b04:	003fc006 	br	81a08 <__swsetup_r+0x30>
   81b08:	0005883a 	mov	r2,zero
   81b0c:	80800215 	stw	r2,8(r16)
   81b10:	003fce06 	br	81a4c <__swsetup_r+0x74>
   81b14:	81400c17 	ldw	r5,48(r16)
   81b18:	28000626 	beq	r5,zero,81b34 <__swsetup_r+0x15c>
   81b1c:	80c01004 	addi	r3,r16,64
   81b20:	28c00326 	beq	r5,r3,81b30 <__swsetup_r+0x158>
   81b24:	8809883a 	mov	r4,r17
   81b28:	008218c0 	call	8218c <_free_r>
   81b2c:	8080030b 	ldhu	r2,12(r16)
   81b30:	80000c15 	stw	zero,48(r16)
   81b34:	80c00417 	ldw	r3,16(r16)
   81b38:	013ff6c4 	movi	r4,-37
   81b3c:	2084703a 	and	r2,r4,r2
   81b40:	80000115 	stw	zero,4(r16)
   81b44:	80c00015 	stw	r3,0(r16)
   81b48:	003fd206 	br	81a94 <__swsetup_r+0xbc>

00081b4c <_fflush_r>:
   81b4c:	defffb04 	addi	sp,sp,-20
   81b50:	dcc00315 	stw	r19,12(sp)
   81b54:	dc400115 	stw	r17,4(sp)
   81b58:	dfc00415 	stw	ra,16(sp)
   81b5c:	dc800215 	stw	r18,8(sp)
   81b60:	dc000015 	stw	r16,0(sp)
   81b64:	2027883a 	mov	r19,r4
   81b68:	2823883a 	mov	r17,r5
   81b6c:	20000226 	beq	r4,zero,81b78 <_fflush_r+0x2c>
   81b70:	20800e17 	ldw	r2,56(r4)
   81b74:	10005726 	beq	r2,zero,81cd4 <_fflush_r+0x188>
   81b78:	8880030b 	ldhu	r2,12(r17)
   81b7c:	10c0020c 	andi	r3,r2,8
   81b80:	18ffffcc 	andi	r3,r3,65535
   81b84:	18e0001c 	xori	r3,r3,32768
   81b88:	18e00004 	addi	r3,r3,-32768
   81b8c:	1800311e 	bne	r3,zero,81c54 <_fflush_r+0x108>
   81b90:	89000117 	ldw	r4,4(r17)
   81b94:	10c20014 	ori	r3,r2,2048
   81b98:	88c0030d 	sth	r3,12(r17)
   81b9c:	180b883a 	mov	r5,r3
   81ba0:	0100520e 	bge	zero,r4,81cec <_fflush_r+0x1a0>
   81ba4:	88c00a17 	ldw	r3,40(r17)
   81ba8:	18002226 	beq	r3,zero,81c34 <_fflush_r+0xe8>
   81bac:	1084000c 	andi	r2,r2,4096
   81bb0:	10bfffcc 	andi	r2,r2,65535
   81bb4:	10a0001c 	xori	r2,r2,32768
   81bb8:	10a00004 	addi	r2,r2,-32768
   81bbc:	10004e26 	beq	r2,zero,81cf8 <_fflush_r+0x1ac>
   81bc0:	8c001417 	ldw	r16,80(r17)
   81bc4:	2940010c 	andi	r5,r5,4
   81bc8:	297fffcc 	andi	r5,r5,65535
   81bcc:	2960001c 	xori	r5,r5,32768
   81bd0:	29600004 	addi	r5,r5,-32768
   81bd4:	28000626 	beq	r5,zero,81bf0 <_fflush_r+0xa4>
   81bd8:	89000117 	ldw	r4,4(r17)
   81bdc:	88800c17 	ldw	r2,48(r17)
   81be0:	8121c83a 	sub	r16,r16,r4
   81be4:	10000226 	beq	r2,zero,81bf0 <_fflush_r+0xa4>
   81be8:	88800f17 	ldw	r2,60(r17)
   81bec:	80a1c83a 	sub	r16,r16,r2
   81bf0:	89400717 	ldw	r5,28(r17)
   81bf4:	9809883a 	mov	r4,r19
   81bf8:	800d883a 	mov	r6,r16
   81bfc:	000f883a 	mov	r7,zero
   81c00:	183ee83a 	callr	r3
   81c04:	8080281e 	bne	r16,r2,81ca8 <_fflush_r+0x15c>
   81c08:	8880030b 	ldhu	r2,12(r17)
   81c0c:	88c00417 	ldw	r3,16(r17)
   81c10:	88000115 	stw	zero,4(r17)
   81c14:	113dffcc 	andi	r4,r2,63487
   81c18:	1084000c 	andi	r2,r2,4096
   81c1c:	10bfffcc 	andi	r2,r2,65535
   81c20:	10a0001c 	xori	r2,r2,32768
   81c24:	8900030d 	sth	r4,12(r17)
   81c28:	88c00015 	stw	r3,0(r17)
   81c2c:	10a00004 	addi	r2,r2,-32768
   81c30:	10002c1e 	bne	r2,zero,81ce4 <_fflush_r+0x198>
   81c34:	0005883a 	mov	r2,zero
   81c38:	dfc00417 	ldw	ra,16(sp)
   81c3c:	dcc00317 	ldw	r19,12(sp)
   81c40:	dc800217 	ldw	r18,8(sp)
   81c44:	dc400117 	ldw	r17,4(sp)
   81c48:	dc000017 	ldw	r16,0(sp)
   81c4c:	dec00504 	addi	sp,sp,20
   81c50:	f800283a 	ret
   81c54:	8c800417 	ldw	r18,16(r17)
   81c58:	903ff626 	beq	r18,zero,81c34 <_fflush_r+0xe8>
   81c5c:	8c000017 	ldw	r16,0(r17)
   81c60:	108000cc 	andi	r2,r2,3
   81c64:	8c800015 	stw	r18,0(r17)
   81c68:	84a1c83a 	sub	r16,r16,r18
   81c6c:	10001b1e 	bne	r2,zero,81cdc <_fflush_r+0x190>
   81c70:	88800517 	ldw	r2,20(r17)
   81c74:	88800215 	stw	r2,8(r17)
   81c78:	04000316 	blt	zero,r16,81c88 <_fflush_r+0x13c>
   81c7c:	003fed06 	br	81c34 <_fflush_r+0xe8>
   81c80:	90a5883a 	add	r18,r18,r2
   81c84:	043feb0e 	bge	zero,r16,81c34 <_fflush_r+0xe8>
   81c88:	88800917 	ldw	r2,36(r17)
   81c8c:	89400717 	ldw	r5,28(r17)
   81c90:	800f883a 	mov	r7,r16
   81c94:	900d883a 	mov	r6,r18
   81c98:	9809883a 	mov	r4,r19
   81c9c:	103ee83a 	callr	r2
   81ca0:	80a1c83a 	sub	r16,r16,r2
   81ca4:	00bff616 	blt	zero,r2,81c80 <_fflush_r+0x134>
   81ca8:	88c0030b 	ldhu	r3,12(r17)
   81cac:	00bfffc4 	movi	r2,-1
   81cb0:	18c01014 	ori	r3,r3,64
   81cb4:	88c0030d 	sth	r3,12(r17)
   81cb8:	dfc00417 	ldw	ra,16(sp)
   81cbc:	dcc00317 	ldw	r19,12(sp)
   81cc0:	dc800217 	ldw	r18,8(sp)
   81cc4:	dc400117 	ldw	r17,4(sp)
   81cc8:	dc000017 	ldw	r16,0(sp)
   81ccc:	dec00504 	addi	sp,sp,20
   81cd0:	f800283a 	ret
   81cd4:	0081e080 	call	81e08 <__sinit>
   81cd8:	003fa706 	br	81b78 <_fflush_r+0x2c>
   81cdc:	0005883a 	mov	r2,zero
   81ce0:	003fe406 	br	81c74 <_fflush_r+0x128>
   81ce4:	8c001415 	stw	r16,80(r17)
   81ce8:	003fd206 	br	81c34 <_fflush_r+0xe8>
   81cec:	88c00f17 	ldw	r3,60(r17)
   81cf0:	00ffac16 	blt	zero,r3,81ba4 <_fflush_r+0x58>
   81cf4:	003fcf06 	br	81c34 <_fflush_r+0xe8>
   81cf8:	89400717 	ldw	r5,28(r17)
   81cfc:	9809883a 	mov	r4,r19
   81d00:	000d883a 	mov	r6,zero
   81d04:	01c00044 	movi	r7,1
   81d08:	183ee83a 	callr	r3
   81d0c:	1021883a 	mov	r16,r2
   81d10:	00bfffc4 	movi	r2,-1
   81d14:	80800326 	beq	r16,r2,81d24 <_fflush_r+0x1d8>
   81d18:	8940030b 	ldhu	r5,12(r17)
   81d1c:	88c00a17 	ldw	r3,40(r17)
   81d20:	003fa806 	br	81bc4 <_fflush_r+0x78>
   81d24:	98c00017 	ldw	r3,0(r19)
   81d28:	00800744 	movi	r2,29
   81d2c:	18bfde1e 	bne	r3,r2,81ca8 <_fflush_r+0x15c>
   81d30:	003fc006 	br	81c34 <_fflush_r+0xe8>

00081d34 <fflush>:
   81d34:	200b883a 	mov	r5,r4
   81d38:	20000426 	beq	r4,zero,81d4c <fflush+0x18>
   81d3c:	00800034 	movhi	r2,0
   81d40:	10869704 	addi	r2,r2,6748
   81d44:	11000017 	ldw	r4,0(r2)
   81d48:	0081b4c1 	jmpi	81b4c <_fflush_r>
   81d4c:	00800034 	movhi	r2,0
   81d50:	10869604 	addi	r2,r2,6744
   81d54:	11000017 	ldw	r4,0(r2)
   81d58:	01400234 	movhi	r5,8
   81d5c:	2946d304 	addi	r5,r5,6988
   81d60:	00825041 	jmpi	82504 <_fwalk_reent>

00081d64 <__fp_lock>:
   81d64:	0005883a 	mov	r2,zero
   81d68:	f800283a 	ret

00081d6c <__fp_unlock>:
   81d6c:	0005883a 	mov	r2,zero
   81d70:	f800283a 	ret

00081d74 <_cleanup_r>:
   81d74:	01400234 	movhi	r5,8
   81d78:	294ae304 	addi	r5,r5,11148
   81d7c:	008245c1 	jmpi	8245c <_fwalk>

00081d80 <__sfmoreglue>:
   81d80:	defffc04 	addi	sp,sp,-16
   81d84:	dc800215 	stw	r18,8(sp)
   81d88:	2825883a 	mov	r18,r5
   81d8c:	dc000015 	stw	r16,0(sp)
   81d90:	01401704 	movi	r5,92
   81d94:	2021883a 	mov	r16,r4
   81d98:	9009883a 	mov	r4,r18
   81d9c:	dfc00315 	stw	ra,12(sp)
   81da0:	dc400115 	stw	r17,4(sp)
   81da4:	0082d440 	call	82d44 <__mulsi3>
   81da8:	8009883a 	mov	r4,r16
   81dac:	11400304 	addi	r5,r2,12
   81db0:	1023883a 	mov	r17,r2
   81db4:	00808300 	call	80830 <_malloc_r>
   81db8:	1021883a 	mov	r16,r2
   81dbc:	10000726 	beq	r2,zero,81ddc <__sfmoreglue+0x5c>
   81dc0:	11000304 	addi	r4,r2,12
   81dc4:	10000015 	stw	zero,0(r2)
   81dc8:	14800115 	stw	r18,4(r2)
   81dcc:	11000215 	stw	r4,8(r2)
   81dd0:	000b883a 	mov	r5,zero
   81dd4:	880d883a 	mov	r6,r17
   81dd8:	00827640 	call	82764 <memset>
   81ddc:	8005883a 	mov	r2,r16
   81de0:	dfc00317 	ldw	ra,12(sp)
   81de4:	dc800217 	ldw	r18,8(sp)
   81de8:	dc400117 	ldw	r17,4(sp)
   81dec:	dc000017 	ldw	r16,0(sp)
   81df0:	dec00404 	addi	sp,sp,16
   81df4:	f800283a 	ret

00081df8 <_cleanup>:
   81df8:	00800034 	movhi	r2,0
   81dfc:	10869604 	addi	r2,r2,6744
   81e00:	11000017 	ldw	r4,0(r2)
   81e04:	0081d741 	jmpi	81d74 <_cleanup_r>

00081e08 <__sinit>:
   81e08:	20800e17 	ldw	r2,56(r4)
   81e0c:	1000401e 	bne	r2,zero,81f10 <__sinit+0x108>
   81e10:	21400117 	ldw	r5,4(r4)
   81e14:	01800234 	movhi	r6,8
   81e18:	31875d04 	addi	r6,r6,7540
   81e1c:	20c00217 	ldw	r3,8(r4)
   81e20:	21800f15 	stw	r6,60(r4)
   81e24:	2080bb04 	addi	r2,r4,748
   81e28:	02400044 	movi	r9,1
   81e2c:	018000c4 	movi	r6,3
   81e30:	2180b915 	stw	r6,740(r4)
   81e34:	2080ba15 	stw	r2,744(r4)
   81e38:	22400e15 	stw	r9,56(r4)
   81e3c:	20800317 	ldw	r2,12(r4)
   81e40:	2000b815 	stw	zero,736(r4)
   81e44:	02000234 	movhi	r8,8
   81e48:	420a1004 	addi	r8,r8,10304
   81e4c:	01c00234 	movhi	r7,8
   81e50:	39ca2504 	addi	r7,r7,10388
   81e54:	01800234 	movhi	r6,8
   81e58:	318a4704 	addi	r6,r6,10524
   81e5c:	01000234 	movhi	r4,8
   81e60:	210a5e04 	addi	r4,r4,10616
   81e64:	02800104 	movi	r10,4
   81e68:	28000015 	stw	zero,0(r5)
   81e6c:	28000115 	stw	zero,4(r5)
   81e70:	28000215 	stw	zero,8(r5)
   81e74:	2a80030d 	sth	r10,12(r5)
   81e78:	2800038d 	sth	zero,14(r5)
   81e7c:	28000415 	stw	zero,16(r5)
   81e80:	28000515 	stw	zero,20(r5)
   81e84:	28000615 	stw	zero,24(r5)
   81e88:	29400715 	stw	r5,28(r5)
   81e8c:	2a000815 	stw	r8,32(r5)
   81e90:	29c00915 	stw	r7,36(r5)
   81e94:	29800a15 	stw	r6,40(r5)
   81e98:	29000b15 	stw	r4,44(r5)
   81e9c:	01400284 	movi	r5,10
   81ea0:	18000015 	stw	zero,0(r3)
   81ea4:	18000115 	stw	zero,4(r3)
   81ea8:	18000215 	stw	zero,8(r3)
   81eac:	1940030d 	sth	r5,12(r3)
   81eb0:	1a40038d 	sth	r9,14(r3)
   81eb4:	18000415 	stw	zero,16(r3)
   81eb8:	18000515 	stw	zero,20(r3)
   81ebc:	18000615 	stw	zero,24(r3)
   81ec0:	18c00715 	stw	r3,28(r3)
   81ec4:	1a000815 	stw	r8,32(r3)
   81ec8:	19c00915 	stw	r7,36(r3)
   81ecc:	19800a15 	stw	r6,40(r3)
   81ed0:	19000b15 	stw	r4,44(r3)
   81ed4:	00c00484 	movi	r3,18
   81ed8:	10c0030d 	sth	r3,12(r2)
   81edc:	00c00084 	movi	r3,2
   81ee0:	10000015 	stw	zero,0(r2)
   81ee4:	10000115 	stw	zero,4(r2)
   81ee8:	10000215 	stw	zero,8(r2)
   81eec:	10c0038d 	sth	r3,14(r2)
   81ef0:	10000415 	stw	zero,16(r2)
   81ef4:	10000515 	stw	zero,20(r2)
   81ef8:	10000615 	stw	zero,24(r2)
   81efc:	10800715 	stw	r2,28(r2)
   81f00:	12000815 	stw	r8,32(r2)
   81f04:	11c00915 	stw	r7,36(r2)
   81f08:	11800a15 	stw	r6,40(r2)
   81f0c:	11000b15 	stw	r4,44(r2)
   81f10:	f800283a 	ret

00081f14 <__sfp>:
   81f14:	defffc04 	addi	sp,sp,-16
   81f18:	00800034 	movhi	r2,0
   81f1c:	10869604 	addi	r2,r2,6744
   81f20:	dc400115 	stw	r17,4(sp)
   81f24:	14400017 	ldw	r17,0(r2)
   81f28:	dc800215 	stw	r18,8(sp)
   81f2c:	dfc00315 	stw	ra,12(sp)
   81f30:	88800e17 	ldw	r2,56(r17)
   81f34:	dc000015 	stw	r16,0(sp)
   81f38:	2025883a 	mov	r18,r4
   81f3c:	10002826 	beq	r2,zero,81fe0 <__sfp+0xcc>
   81f40:	8c40b804 	addi	r17,r17,736
   81f44:	043fffc4 	movi	r16,-1
   81f48:	89400117 	ldw	r5,4(r17)
   81f4c:	88800217 	ldw	r2,8(r17)
   81f50:	297fffc4 	addi	r5,r5,-1
   81f54:	28000a16 	blt	r5,zero,81f80 <__sfp+0x6c>
   81f58:	10c0030f 	ldh	r3,12(r2)
   81f5c:	18000c26 	beq	r3,zero,81f90 <__sfp+0x7c>
   81f60:	10c01a04 	addi	r3,r2,104
   81f64:	00000206 	br	81f70 <__sfp+0x5c>
   81f68:	19bfe90f 	ldh	r6,-92(r3)
   81f6c:	30000826 	beq	r6,zero,81f90 <__sfp+0x7c>
   81f70:	297fffc4 	addi	r5,r5,-1
   81f74:	18bffd04 	addi	r2,r3,-12
   81f78:	18c01704 	addi	r3,r3,92
   81f7c:	2c3ffa1e 	bne	r5,r16,81f68 <__sfp+0x54>
   81f80:	88800017 	ldw	r2,0(r17)
   81f84:	10001926 	beq	r2,zero,81fec <__sfp+0xd8>
   81f88:	1023883a 	mov	r17,r2
   81f8c:	003fee06 	br	81f48 <__sfp+0x34>
   81f90:	00ffffc4 	movi	r3,-1
   81f94:	10c0038d 	sth	r3,14(r2)
   81f98:	00c00044 	movi	r3,1
   81f9c:	10c0030d 	sth	r3,12(r2)
   81fa0:	10000015 	stw	zero,0(r2)
   81fa4:	10000215 	stw	zero,8(r2)
   81fa8:	10000115 	stw	zero,4(r2)
   81fac:	10000415 	stw	zero,16(r2)
   81fb0:	10000515 	stw	zero,20(r2)
   81fb4:	10000615 	stw	zero,24(r2)
   81fb8:	10000c15 	stw	zero,48(r2)
   81fbc:	10000d15 	stw	zero,52(r2)
   81fc0:	10001115 	stw	zero,68(r2)
   81fc4:	10001215 	stw	zero,72(r2)
   81fc8:	dfc00317 	ldw	ra,12(sp)
   81fcc:	dc800217 	ldw	r18,8(sp)
   81fd0:	dc400117 	ldw	r17,4(sp)
   81fd4:	dc000017 	ldw	r16,0(sp)
   81fd8:	dec00404 	addi	sp,sp,16
   81fdc:	f800283a 	ret
   81fe0:	8809883a 	mov	r4,r17
   81fe4:	0081e080 	call	81e08 <__sinit>
   81fe8:	003fd506 	br	81f40 <__sfp+0x2c>
   81fec:	9009883a 	mov	r4,r18
   81ff0:	01400104 	movi	r5,4
   81ff4:	0081d800 	call	81d80 <__sfmoreglue>
   81ff8:	88800015 	stw	r2,0(r17)
   81ffc:	103fe21e 	bne	r2,zero,81f88 <__sfp+0x74>
   82000:	00800304 	movi	r2,12
   82004:	90800015 	stw	r2,0(r18)
   82008:	0005883a 	mov	r2,zero
   8200c:	003fee06 	br	81fc8 <__sfp+0xb4>

00082010 <__sfp_lock_acquire>:
   82010:	f800283a 	ret

00082014 <__sfp_lock_release>:
   82014:	f800283a 	ret

00082018 <__sinit_lock_acquire>:
   82018:	f800283a 	ret

0008201c <__sinit_lock_release>:
   8201c:	f800283a 	ret

00082020 <__fp_lock_all>:
   82020:	00800034 	movhi	r2,0
   82024:	10869704 	addi	r2,r2,6748
   82028:	11000017 	ldw	r4,0(r2)
   8202c:	01400234 	movhi	r5,8
   82030:	29475904 	addi	r5,r5,7524
   82034:	008245c1 	jmpi	8245c <_fwalk>

00082038 <__fp_unlock_all>:
   82038:	00800034 	movhi	r2,0
   8203c:	10869704 	addi	r2,r2,6748
   82040:	11000017 	ldw	r4,0(r2)
   82044:	01400234 	movhi	r5,8
   82048:	29475b04 	addi	r5,r5,7532
   8204c:	008245c1 	jmpi	8245c <_fwalk>

00082050 <_malloc_trim_r>:
   82050:	defffb04 	addi	sp,sp,-20
   82054:	dcc00315 	stw	r19,12(sp)
   82058:	dc800215 	stw	r18,8(sp)
   8205c:	dc400115 	stw	r17,4(sp)
   82060:	dc000015 	stw	r16,0(sp)
   82064:	2827883a 	mov	r19,r5
   82068:	dfc00415 	stw	ra,16(sp)
   8206c:	04400034 	movhi	r17,0
   82070:	8c411204 	addi	r17,r17,1096
   82074:	2021883a 	mov	r16,r4
   82078:	00833300 	call	83330 <__malloc_lock>
   8207c:	88800217 	ldw	r2,8(r17)
   82080:	14800117 	ldw	r18,4(r2)
   82084:	00bfff04 	movi	r2,-4
   82088:	90a4703a 	and	r18,r18,r2
   8208c:	9083fbc4 	addi	r2,r18,4079
   82090:	14e7c83a 	sub	r19,r2,r19
   82094:	9826d33a 	srli	r19,r19,12
   82098:	0083ffc4 	movi	r2,4095
   8209c:	9cffffc4 	addi	r19,r19,-1
   820a0:	9826933a 	slli	r19,r19,12
   820a4:	14c0060e 	bge	r2,r19,820c0 <_malloc_trim_r+0x70>
   820a8:	8009883a 	mov	r4,r16
   820ac:	000b883a 	mov	r5,zero
   820b0:	00819740 	call	81974 <_sbrk_r>
   820b4:	88c00217 	ldw	r3,8(r17)
   820b8:	1c87883a 	add	r3,r3,r18
   820bc:	10c00a26 	beq	r2,r3,820e8 <_malloc_trim_r+0x98>
   820c0:	8009883a 	mov	r4,r16
   820c4:	00833500 	call	83350 <__malloc_unlock>
   820c8:	0005883a 	mov	r2,zero
   820cc:	dfc00417 	ldw	ra,16(sp)
   820d0:	dcc00317 	ldw	r19,12(sp)
   820d4:	dc800217 	ldw	r18,8(sp)
   820d8:	dc400117 	ldw	r17,4(sp)
   820dc:	dc000017 	ldw	r16,0(sp)
   820e0:	dec00504 	addi	sp,sp,20
   820e4:	f800283a 	ret
   820e8:	8009883a 	mov	r4,r16
   820ec:	04cbc83a 	sub	r5,zero,r19
   820f0:	00819740 	call	81974 <_sbrk_r>
   820f4:	00ffffc4 	movi	r3,-1
   820f8:	10c01326 	beq	r2,r3,82148 <_malloc_trim_r+0xf8>
   820fc:	00800034 	movhi	r2,0
   82100:	1086ae04 	addi	r2,r2,6840
   82104:	11000017 	ldw	r4,0(r2)
   82108:	88c00217 	ldw	r3,8(r17)
   8210c:	94e5c83a 	sub	r18,r18,r19
   82110:	94800054 	ori	r18,r18,1
   82114:	24e7c83a 	sub	r19,r4,r19
   82118:	1c800115 	stw	r18,4(r3)
   8211c:	8009883a 	mov	r4,r16
   82120:	14c00015 	stw	r19,0(r2)
   82124:	00833500 	call	83350 <__malloc_unlock>
   82128:	00800044 	movi	r2,1
   8212c:	dfc00417 	ldw	ra,16(sp)
   82130:	dcc00317 	ldw	r19,12(sp)
   82134:	dc800217 	ldw	r18,8(sp)
   82138:	dc400117 	ldw	r17,4(sp)
   8213c:	dc000017 	ldw	r16,0(sp)
   82140:	dec00504 	addi	sp,sp,20
   82144:	f800283a 	ret
   82148:	8009883a 	mov	r4,r16
   8214c:	000b883a 	mov	r5,zero
   82150:	00819740 	call	81974 <_sbrk_r>
   82154:	88c00217 	ldw	r3,8(r17)
   82158:	014003c4 	movi	r5,15
   8215c:	10c9c83a 	sub	r4,r2,r3
   82160:	293fd70e 	bge	r5,r4,820c0 <_malloc_trim_r+0x70>
   82164:	01400034 	movhi	r5,0
   82168:	29469804 	addi	r5,r5,6752
   8216c:	29400017 	ldw	r5,0(r5)
   82170:	21000054 	ori	r4,r4,1
   82174:	19000115 	stw	r4,4(r3)
   82178:	1145c83a 	sub	r2,r2,r5
   8217c:	01400034 	movhi	r5,0
   82180:	2946ae04 	addi	r5,r5,6840
   82184:	28800015 	stw	r2,0(r5)
   82188:	003fcd06 	br	820c0 <_malloc_trim_r+0x70>

0008218c <_free_r>:
   8218c:	defffd04 	addi	sp,sp,-12
   82190:	dc400115 	stw	r17,4(sp)
   82194:	dc000015 	stw	r16,0(sp)
   82198:	dfc00215 	stw	ra,8(sp)
   8219c:	2821883a 	mov	r16,r5
   821a0:	2023883a 	mov	r17,r4
   821a4:	28004b26 	beq	r5,zero,822d4 <_free_r+0x148>
   821a8:	00833300 	call	83330 <__malloc_lock>
   821ac:	823fff17 	ldw	r8,-4(r16)
   821b0:	00bfff84 	movi	r2,-2
   821b4:	81bffe04 	addi	r6,r16,-8
   821b8:	4084703a 	and	r2,r8,r2
   821bc:	3087883a 	add	r3,r6,r2
   821c0:	01400034 	movhi	r5,0
   821c4:	29411204 	addi	r5,r5,1096
   821c8:	1a400117 	ldw	r9,4(r3)
   821cc:	29000217 	ldw	r4,8(r5)
   821d0:	01ffff04 	movi	r7,-4
   821d4:	49ce703a 	and	r7,r9,r7
   821d8:	20c06526 	beq	r4,r3,82370 <_free_r+0x1e4>
   821dc:	19c00115 	stw	r7,4(r3)
   821e0:	4200004c 	andi	r8,r8,1
   821e4:	40003026 	beq	r8,zero,822a8 <_free_r+0x11c>
   821e8:	0009883a 	mov	r4,zero
   821ec:	19d1883a 	add	r8,r3,r7
   821f0:	42000117 	ldw	r8,4(r8)
   821f4:	4200004c 	andi	r8,r8,1
   821f8:	4000061e 	bne	r8,zero,82214 <_free_r+0x88>
   821fc:	11c5883a 	add	r2,r2,r7
   82200:	19c00217 	ldw	r7,8(r3)
   82204:	20004e26 	beq	r4,zero,82340 <_free_r+0x1b4>
   82208:	18c00317 	ldw	r3,12(r3)
   8220c:	38c00315 	stw	r3,12(r7)
   82210:	19c00215 	stw	r7,8(r3)
   82214:	11c00054 	ori	r7,r2,1
   82218:	3087883a 	add	r3,r6,r2
   8221c:	31c00115 	stw	r7,4(r6)
   82220:	18800015 	stw	r2,0(r3)
   82224:	20001a1e 	bne	r4,zero,82290 <_free_r+0x104>
   82228:	00c07fc4 	movi	r3,511
   8222c:	18802e2e 	bgeu	r3,r2,822e8 <_free_r+0x15c>
   82230:	1006d27a 	srli	r3,r2,9
   82234:	01000104 	movi	r4,4
   82238:	20c06636 	bltu	r4,r3,823d4 <_free_r+0x248>
   8223c:	1008d1ba 	srli	r4,r2,6
   82240:	21000e04 	addi	r4,r4,56
   82244:	210f883a 	add	r7,r4,r4
   82248:	39cf883a 	add	r7,r7,r7
   8224c:	39cf883a 	add	r7,r7,r7
   82250:	29cf883a 	add	r7,r5,r7
   82254:	38c00217 	ldw	r3,8(r7)
   82258:	01400034 	movhi	r5,0
   8225c:	29411204 	addi	r5,r5,1096
   82260:	19c06126 	beq	r3,r7,823e8 <_free_r+0x25c>
   82264:	013fff04 	movi	r4,-4
   82268:	19400117 	ldw	r5,4(r3)
   8226c:	290a703a 	and	r5,r5,r4
   82270:	1140022e 	bgeu	r2,r5,8227c <_free_r+0xf0>
   82274:	18c00217 	ldw	r3,8(r3)
   82278:	38fffb1e 	bne	r7,r3,82268 <_free_r+0xdc>
   8227c:	18800317 	ldw	r2,12(r3)
   82280:	30800315 	stw	r2,12(r6)
   82284:	30c00215 	stw	r3,8(r6)
   82288:	11800215 	stw	r6,8(r2)
   8228c:	19800315 	stw	r6,12(r3)
   82290:	8809883a 	mov	r4,r17
   82294:	dfc00217 	ldw	ra,8(sp)
   82298:	dc400117 	ldw	r17,4(sp)
   8229c:	dc000017 	ldw	r16,0(sp)
   822a0:	dec00304 	addi	sp,sp,12
   822a4:	00833501 	jmpi	83350 <__malloc_unlock>
   822a8:	813ffe17 	ldw	r4,-8(r16)
   822ac:	2a400204 	addi	r9,r5,8
   822b0:	310dc83a 	sub	r6,r6,r4
   822b4:	32000217 	ldw	r8,8(r6)
   822b8:	1105883a 	add	r2,r2,r4
   822bc:	42404326 	beq	r8,r9,823cc <_free_r+0x240>
   822c0:	32400317 	ldw	r9,12(r6)
   822c4:	0009883a 	mov	r4,zero
   822c8:	42400315 	stw	r9,12(r8)
   822cc:	4a000215 	stw	r8,8(r9)
   822d0:	003fc606 	br	821ec <_free_r+0x60>
   822d4:	dfc00217 	ldw	ra,8(sp)
   822d8:	dc400117 	ldw	r17,4(sp)
   822dc:	dc000017 	ldw	r16,0(sp)
   822e0:	dec00304 	addi	sp,sp,12
   822e4:	f800283a 	ret
   822e8:	1004d0fa 	srli	r2,r2,3
   822ec:	02000044 	movi	r8,1
   822f0:	29c00117 	ldw	r7,4(r5)
   822f4:	1087883a 	add	r3,r2,r2
   822f8:	18c7883a 	add	r3,r3,r3
   822fc:	1005d0ba 	srai	r2,r2,2
   82300:	18c7883a 	add	r3,r3,r3
   82304:	28c7883a 	add	r3,r5,r3
   82308:	19000217 	ldw	r4,8(r3)
   8230c:	4084983a 	sll	r2,r8,r2
   82310:	30c00315 	stw	r3,12(r6)
   82314:	31000215 	stw	r4,8(r6)
   82318:	11c4b03a 	or	r2,r2,r7
   8231c:	21800315 	stw	r6,12(r4)
   82320:	8809883a 	mov	r4,r17
   82324:	28800115 	stw	r2,4(r5)
   82328:	19800215 	stw	r6,8(r3)
   8232c:	dfc00217 	ldw	ra,8(sp)
   82330:	dc400117 	ldw	r17,4(sp)
   82334:	dc000017 	ldw	r16,0(sp)
   82338:	dec00304 	addi	sp,sp,12
   8233c:	00833501 	jmpi	83350 <__malloc_unlock>
   82340:	02000034 	movhi	r8,0
   82344:	42011404 	addi	r8,r8,1104
   82348:	3a3faf1e 	bne	r7,r8,82208 <_free_r+0x7c>
   8234c:	29800515 	stw	r6,20(r5)
   82350:	29800415 	stw	r6,16(r5)
   82354:	11000054 	ori	r4,r2,1
   82358:	3087883a 	add	r3,r6,r2
   8235c:	31c00315 	stw	r7,12(r6)
   82360:	31c00215 	stw	r7,8(r6)
   82364:	31000115 	stw	r4,4(r6)
   82368:	18800015 	stw	r2,0(r3)
   8236c:	003fc806 	br	82290 <_free_r+0x104>
   82370:	4200004c 	andi	r8,r8,1
   82374:	3885883a 	add	r2,r7,r2
   82378:	4000071e 	bne	r8,zero,82398 <_free_r+0x20c>
   8237c:	81fffe17 	ldw	r7,-8(r16)
   82380:	31cdc83a 	sub	r6,r6,r7
   82384:	30c00317 	ldw	r3,12(r6)
   82388:	31000217 	ldw	r4,8(r6)
   8238c:	11c5883a 	add	r2,r2,r7
   82390:	20c00315 	stw	r3,12(r4)
   82394:	19000215 	stw	r4,8(r3)
   82398:	00c00034 	movhi	r3,0
   8239c:	18c69904 	addi	r3,r3,6756
   823a0:	18c00017 	ldw	r3,0(r3)
   823a4:	11000054 	ori	r4,r2,1
   823a8:	31000115 	stw	r4,4(r6)
   823ac:	29800215 	stw	r6,8(r5)
   823b0:	10ffb736 	bltu	r2,r3,82290 <_free_r+0x104>
   823b4:	00800034 	movhi	r2,0
   823b8:	1086a604 	addi	r2,r2,6808
   823bc:	11400017 	ldw	r5,0(r2)
   823c0:	8809883a 	mov	r4,r17
   823c4:	00820500 	call	82050 <_malloc_trim_r>
   823c8:	003fb106 	br	82290 <_free_r+0x104>
   823cc:	01000044 	movi	r4,1
   823d0:	003f8606 	br	821ec <_free_r+0x60>
   823d4:	01000504 	movi	r4,20
   823d8:	20c00b36 	bltu	r4,r3,82408 <_free_r+0x27c>
   823dc:	190016c4 	addi	r4,r3,91
   823e0:	210f883a 	add	r7,r4,r4
   823e4:	003f9806 	br	82248 <_free_r+0xbc>
   823e8:	2009d0ba 	srai	r4,r4,2
   823ec:	00800044 	movi	r2,1
   823f0:	29c00117 	ldw	r7,4(r5)
   823f4:	1108983a 	sll	r4,r2,r4
   823f8:	1805883a 	mov	r2,r3
   823fc:	21c8b03a 	or	r4,r4,r7
   82400:	29000115 	stw	r4,4(r5)
   82404:	003f9e06 	br	82280 <_free_r+0xf4>
   82408:	01001504 	movi	r4,84
   8240c:	20c00436 	bltu	r4,r3,82420 <_free_r+0x294>
   82410:	1008d33a 	srli	r4,r2,12
   82414:	21001b84 	addi	r4,r4,110
   82418:	210f883a 	add	r7,r4,r4
   8241c:	003f8a06 	br	82248 <_free_r+0xbc>
   82420:	01005504 	movi	r4,340
   82424:	20c00436 	bltu	r4,r3,82438 <_free_r+0x2ac>
   82428:	1008d3fa 	srli	r4,r2,15
   8242c:	21001dc4 	addi	r4,r4,119
   82430:	210f883a 	add	r7,r4,r4
   82434:	003f8406 	br	82248 <_free_r+0xbc>
   82438:	01015504 	movi	r4,1364
   8243c:	20c00436 	bltu	r4,r3,82450 <_free_r+0x2c4>
   82440:	1008d4ba 	srli	r4,r2,18
   82444:	21001f04 	addi	r4,r4,124
   82448:	210f883a 	add	r7,r4,r4
   8244c:	003f7e06 	br	82248 <_free_r+0xbc>
   82450:	01c03f04 	movi	r7,252
   82454:	01001f84 	movi	r4,126
   82458:	003f7b06 	br	82248 <_free_r+0xbc>

0008245c <_fwalk>:
   8245c:	defff904 	addi	sp,sp,-28
   82460:	dcc00315 	stw	r19,12(sp)
   82464:	24c0b804 	addi	r19,r4,736
   82468:	dd400515 	stw	r21,20(sp)
   8246c:	dd000415 	stw	r20,16(sp)
   82470:	dfc00615 	stw	ra,24(sp)
   82474:	dc800215 	stw	r18,8(sp)
   82478:	dc400115 	stw	r17,4(sp)
   8247c:	dc000015 	stw	r16,0(sp)
   82480:	282b883a 	mov	r21,r5
   82484:	0029883a 	mov	r20,zero
   82488:	00820100 	call	82010 <__sfp_lock_acquire>
   8248c:	98001226 	beq	r19,zero,824d8 <_fwalk+0x7c>
   82490:	04bfffc4 	movi	r18,-1
   82494:	9c400117 	ldw	r17,4(r19)
   82498:	9c000217 	ldw	r16,8(r19)
   8249c:	8c7fffc4 	addi	r17,r17,-1
   824a0:	88000b16 	blt	r17,zero,824d0 <_fwalk+0x74>
   824a4:	84000304 	addi	r16,r16,12
   824a8:	80c0000f 	ldh	r3,0(r16)
   824ac:	8c7fffc4 	addi	r17,r17,-1
   824b0:	813ffd04 	addi	r4,r16,-12
   824b4:	18000426 	beq	r3,zero,824c8 <_fwalk+0x6c>
   824b8:	80c0008f 	ldh	r3,2(r16)
   824bc:	1c800226 	beq	r3,r18,824c8 <_fwalk+0x6c>
   824c0:	a83ee83a 	callr	r21
   824c4:	a0a8b03a 	or	r20,r20,r2
   824c8:	84001704 	addi	r16,r16,92
   824cc:	8cbff61e 	bne	r17,r18,824a8 <_fwalk+0x4c>
   824d0:	9cc00017 	ldw	r19,0(r19)
   824d4:	983fef1e 	bne	r19,zero,82494 <_fwalk+0x38>
   824d8:	00820140 	call	82014 <__sfp_lock_release>
   824dc:	a005883a 	mov	r2,r20
   824e0:	dfc00617 	ldw	ra,24(sp)
   824e4:	dd400517 	ldw	r21,20(sp)
   824e8:	dd000417 	ldw	r20,16(sp)
   824ec:	dcc00317 	ldw	r19,12(sp)
   824f0:	dc800217 	ldw	r18,8(sp)
   824f4:	dc400117 	ldw	r17,4(sp)
   824f8:	dc000017 	ldw	r16,0(sp)
   824fc:	dec00704 	addi	sp,sp,28
   82500:	f800283a 	ret

00082504 <_fwalk_reent>:
   82504:	defff804 	addi	sp,sp,-32
   82508:	dcc00315 	stw	r19,12(sp)
   8250c:	24c0b804 	addi	r19,r4,736
   82510:	dd800615 	stw	r22,24(sp)
   82514:	dd400515 	stw	r21,20(sp)
   82518:	dd000415 	stw	r20,16(sp)
   8251c:	dfc00715 	stw	ra,28(sp)
   82520:	dc800215 	stw	r18,8(sp)
   82524:	dc400115 	stw	r17,4(sp)
   82528:	dc000015 	stw	r16,0(sp)
   8252c:	2029883a 	mov	r20,r4
   82530:	282b883a 	mov	r21,r5
   82534:	002d883a 	mov	r22,zero
   82538:	00820100 	call	82010 <__sfp_lock_acquire>
   8253c:	98001326 	beq	r19,zero,8258c <_fwalk_reent+0x88>
   82540:	04bfffc4 	movi	r18,-1
   82544:	9c400117 	ldw	r17,4(r19)
   82548:	9c000217 	ldw	r16,8(r19)
   8254c:	8c7fffc4 	addi	r17,r17,-1
   82550:	88000c16 	blt	r17,zero,82584 <_fwalk_reent+0x80>
   82554:	84000304 	addi	r16,r16,12
   82558:	80c0000f 	ldh	r3,0(r16)
   8255c:	8c7fffc4 	addi	r17,r17,-1
   82560:	817ffd04 	addi	r5,r16,-12
   82564:	18000526 	beq	r3,zero,8257c <_fwalk_reent+0x78>
   82568:	80c0008f 	ldh	r3,2(r16)
   8256c:	a009883a 	mov	r4,r20
   82570:	1c800226 	beq	r3,r18,8257c <_fwalk_reent+0x78>
   82574:	a83ee83a 	callr	r21
   82578:	b0acb03a 	or	r22,r22,r2
   8257c:	84001704 	addi	r16,r16,92
   82580:	8cbff51e 	bne	r17,r18,82558 <_fwalk_reent+0x54>
   82584:	9cc00017 	ldw	r19,0(r19)
   82588:	983fee1e 	bne	r19,zero,82544 <_fwalk_reent+0x40>
   8258c:	00820140 	call	82014 <__sfp_lock_release>
   82590:	b005883a 	mov	r2,r22
   82594:	dfc00717 	ldw	ra,28(sp)
   82598:	dd800617 	ldw	r22,24(sp)
   8259c:	dd400517 	ldw	r21,20(sp)
   825a0:	dd000417 	ldw	r20,16(sp)
   825a4:	dcc00317 	ldw	r19,12(sp)
   825a8:	dc800217 	ldw	r18,8(sp)
   825ac:	dc400117 	ldw	r17,4(sp)
   825b0:	dc000017 	ldw	r16,0(sp)
   825b4:	dec00804 	addi	sp,sp,32
   825b8:	f800283a 	ret

000825bc <__smakebuf_r>:
   825bc:	2880030b 	ldhu	r2,12(r5)
   825c0:	deffed04 	addi	sp,sp,-76
   825c4:	dc401015 	stw	r17,64(sp)
   825c8:	10c0008c 	andi	r3,r2,2
   825cc:	18ffffcc 	andi	r3,r3,65535
   825d0:	18e0001c 	xori	r3,r3,32768
   825d4:	dc000f15 	stw	r16,60(sp)
   825d8:	dfc01215 	stw	ra,72(sp)
   825dc:	dc801115 	stw	r18,68(sp)
   825e0:	18e00004 	addi	r3,r3,-32768
   825e4:	2821883a 	mov	r16,r5
   825e8:	2023883a 	mov	r17,r4
   825ec:	1800381e 	bne	r3,zero,826d0 <__smakebuf_r+0x114>
   825f0:	2940038f 	ldh	r5,14(r5)
   825f4:	28002d16 	blt	r5,zero,826ac <__smakebuf_r+0xf0>
   825f8:	d80d883a 	mov	r6,sp
   825fc:	0082ba00 	call	82ba0 <_fstat_r>
   82600:	10002916 	blt	r2,zero,826a8 <__smakebuf_r+0xec>
   82604:	d8800117 	ldw	r2,4(sp)
   82608:	00e00014 	movui	r3,32768
   8260c:	10bc000c 	andi	r2,r2,61440
   82610:	10c03c26 	beq	r2,r3,82704 <__smakebuf_r+0x148>
   82614:	80c0030b 	ldhu	r3,12(r16)
   82618:	18c20014 	ori	r3,r3,2048
   8261c:	80c0030d 	sth	r3,12(r16)
   82620:	00c80004 	movi	r3,8192
   82624:	10c00c1e 	bne	r2,r3,82658 <__smakebuf_r+0x9c>
   82628:	8140038f 	ldh	r5,14(r16)
   8262c:	8809883a 	mov	r4,r17
   82630:	0082c080 	call	82c08 <_isatty_r>
   82634:	10000826 	beq	r2,zero,82658 <__smakebuf_r+0x9c>
   82638:	80c0030b 	ldhu	r3,12(r16)
   8263c:	808010c4 	addi	r2,r16,67
   82640:	80800015 	stw	r2,0(r16)
   82644:	18c00054 	ori	r3,r3,1
   82648:	80800415 	stw	r2,16(r16)
   8264c:	00800044 	movi	r2,1
   82650:	80c0030d 	sth	r3,12(r16)
   82654:	80800515 	stw	r2,20(r16)
   82658:	04810004 	movi	r18,1024
   8265c:	8809883a 	mov	r4,r17
   82660:	900b883a 	mov	r5,r18
   82664:	00808300 	call	80830 <_malloc_r>
   82668:	10003026 	beq	r2,zero,8272c <__smakebuf_r+0x170>
   8266c:	80c0030b 	ldhu	r3,12(r16)
   82670:	01000234 	movhi	r4,8
   82674:	21075d04 	addi	r4,r4,7540
   82678:	89000f15 	stw	r4,60(r17)
   8267c:	18c02014 	ori	r3,r3,128
   82680:	80c0030d 	sth	r3,12(r16)
   82684:	80800015 	stw	r2,0(r16)
   82688:	80800415 	stw	r2,16(r16)
   8268c:	84800515 	stw	r18,20(r16)
   82690:	dfc01217 	ldw	ra,72(sp)
   82694:	dc801117 	ldw	r18,68(sp)
   82698:	dc401017 	ldw	r17,64(sp)
   8269c:	dc000f17 	ldw	r16,60(sp)
   826a0:	dec01304 	addi	sp,sp,76
   826a4:	f800283a 	ret
   826a8:	8080030b 	ldhu	r2,12(r16)
   826ac:	10c0200c 	andi	r3,r2,128
   826b0:	18ffffcc 	andi	r3,r3,65535
   826b4:	18e0001c 	xori	r3,r3,32768
   826b8:	18e00004 	addi	r3,r3,-32768
   826bc:	18000f1e 	bne	r3,zero,826fc <__smakebuf_r+0x140>
   826c0:	04810004 	movi	r18,1024
   826c4:	10820014 	ori	r2,r2,2048
   826c8:	8080030d 	sth	r2,12(r16)
   826cc:	003fe306 	br	8265c <__smakebuf_r+0xa0>
   826d0:	288010c4 	addi	r2,r5,67
   826d4:	28800015 	stw	r2,0(r5)
   826d8:	28800415 	stw	r2,16(r5)
   826dc:	00800044 	movi	r2,1
   826e0:	28800515 	stw	r2,20(r5)
   826e4:	dfc01217 	ldw	ra,72(sp)
   826e8:	dc801117 	ldw	r18,68(sp)
   826ec:	dc401017 	ldw	r17,64(sp)
   826f0:	dc000f17 	ldw	r16,60(sp)
   826f4:	dec01304 	addi	sp,sp,76
   826f8:	f800283a 	ret
   826fc:	04801004 	movi	r18,64
   82700:	003ff006 	br	826c4 <__smakebuf_r+0x108>
   82704:	81000a17 	ldw	r4,40(r16)
   82708:	00c00234 	movhi	r3,8
   8270c:	18ca4704 	addi	r3,r3,10524
   82710:	20ffc01e 	bne	r4,r3,82614 <__smakebuf_r+0x58>
   82714:	8080030b 	ldhu	r2,12(r16)
   82718:	00c10004 	movi	r3,1024
   8271c:	80c01315 	stw	r3,76(r16)
   82720:	10c4b03a 	or	r2,r2,r3
   82724:	8080030d 	sth	r2,12(r16)
   82728:	003fcb06 	br	82658 <__smakebuf_r+0x9c>
   8272c:	8080030b 	ldhu	r2,12(r16)
   82730:	10c0800c 	andi	r3,r2,512
   82734:	18ffffcc 	andi	r3,r3,65535
   82738:	18e0001c 	xori	r3,r3,32768
   8273c:	18e00004 	addi	r3,r3,-32768
   82740:	183fd31e 	bne	r3,zero,82690 <__smakebuf_r+0xd4>
   82744:	10800094 	ori	r2,r2,2
   82748:	80c010c4 	addi	r3,r16,67
   8274c:	8080030d 	sth	r2,12(r16)
   82750:	00800044 	movi	r2,1
   82754:	80c00015 	stw	r3,0(r16)
   82758:	80c00415 	stw	r3,16(r16)
   8275c:	80800515 	stw	r2,20(r16)
   82760:	003fcb06 	br	82690 <__smakebuf_r+0xd4>

00082764 <memset>:
   82764:	00c000c4 	movi	r3,3
   82768:	2005883a 	mov	r2,r4
   8276c:	29403fcc 	andi	r5,r5,255
   82770:	19802d2e 	bgeu	r3,r6,82828 <memset+0xc4>
   82774:	20c6703a 	and	r3,r4,r3
   82778:	18002e1e 	bne	r3,zero,82834 <memset+0xd0>
   8277c:	2806923a 	slli	r3,r5,8
   82780:	010003c4 	movi	r4,15
   82784:	3011883a 	mov	r8,r6
   82788:	1946b03a 	or	r3,r3,r5
   8278c:	180e943a 	slli	r7,r3,16
   82790:	38ceb03a 	or	r7,r7,r3
   82794:	1007883a 	mov	r3,r2
   82798:	21800f2e 	bgeu	r4,r6,827d8 <memset+0x74>
   8279c:	19c00015 	stw	r7,0(r3)
   827a0:	19c00115 	stw	r7,4(r3)
   827a4:	19c00215 	stw	r7,8(r3)
   827a8:	19c00315 	stw	r7,12(r3)
   827ac:	423ffc04 	addi	r8,r8,-16
   827b0:	18c00404 	addi	r3,r3,16
   827b4:	223ff936 	bltu	r4,r8,8279c <memset+0x38>
   827b8:	30fffc04 	addi	r3,r6,-16
   827bc:	1806d13a 	srli	r3,r3,4
   827c0:	318003cc 	andi	r6,r6,15
   827c4:	010000c4 	movi	r4,3
   827c8:	18c00044 	addi	r3,r3,1
   827cc:	1806913a 	slli	r3,r3,4
   827d0:	10c7883a 	add	r3,r2,r3
   827d4:	21800e2e 	bgeu	r4,r6,82810 <memset+0xac>
   827d8:	1813883a 	mov	r9,r3
   827dc:	3011883a 	mov	r8,r6
   827e0:	010000c4 	movi	r4,3
   827e4:	49c00015 	stw	r7,0(r9)
   827e8:	423fff04 	addi	r8,r8,-4
   827ec:	4a400104 	addi	r9,r9,4
   827f0:	223ffc36 	bltu	r4,r8,827e4 <memset+0x80>
   827f4:	313fff04 	addi	r4,r6,-4
   827f8:	2008d0ba 	srli	r4,r4,2
   827fc:	318000cc 	andi	r6,r6,3
   82800:	21000044 	addi	r4,r4,1
   82804:	2109883a 	add	r4,r4,r4
   82808:	2109883a 	add	r4,r4,r4
   8280c:	1907883a 	add	r3,r3,r4
   82810:	30000a26 	beq	r6,zero,8283c <memset+0xd8>
   82814:	198d883a 	add	r6,r3,r6
   82818:	19400005 	stb	r5,0(r3)
   8281c:	18c00044 	addi	r3,r3,1
   82820:	19bffd1e 	bne	r3,r6,82818 <memset+0xb4>
   82824:	f800283a 	ret
   82828:	2007883a 	mov	r3,r4
   8282c:	303ff91e 	bne	r6,zero,82814 <memset+0xb0>
   82830:	00000206 	br	8283c <memset+0xd8>
   82834:	2007883a 	mov	r3,r4
   82838:	003ff606 	br	82814 <memset+0xb0>
   8283c:	f800283a 	ret

00082840 <__sread>:
   82840:	defffe04 	addi	sp,sp,-8
   82844:	dc000015 	stw	r16,0(sp)
   82848:	2821883a 	mov	r16,r5
   8284c:	2940038f 	ldh	r5,14(r5)
   82850:	dfc00115 	stw	ra,4(sp)
   82854:	0082cd80 	call	82cd8 <_read_r>
   82858:	10000716 	blt	r2,zero,82878 <__sread+0x38>
   8285c:	80c01417 	ldw	r3,80(r16)
   82860:	1887883a 	add	r3,r3,r2
   82864:	80c01415 	stw	r3,80(r16)
   82868:	dfc00117 	ldw	ra,4(sp)
   8286c:	dc000017 	ldw	r16,0(sp)
   82870:	dec00204 	addi	sp,sp,8
   82874:	f800283a 	ret
   82878:	80c0030b 	ldhu	r3,12(r16)
   8287c:	18fbffcc 	andi	r3,r3,61439
   82880:	80c0030d 	sth	r3,12(r16)
   82884:	dfc00117 	ldw	ra,4(sp)
   82888:	dc000017 	ldw	r16,0(sp)
   8288c:	dec00204 	addi	sp,sp,8
   82890:	f800283a 	ret

00082894 <__swrite>:
   82894:	2880030b 	ldhu	r2,12(r5)
   82898:	defffb04 	addi	sp,sp,-20
   8289c:	dcc00315 	stw	r19,12(sp)
   828a0:	10c0400c 	andi	r3,r2,256
   828a4:	18ffffcc 	andi	r3,r3,65535
   828a8:	18e0001c 	xori	r3,r3,32768
   828ac:	dc800215 	stw	r18,8(sp)
   828b0:	dc400115 	stw	r17,4(sp)
   828b4:	dc000015 	stw	r16,0(sp)
   828b8:	dfc00415 	stw	ra,16(sp)
   828bc:	18e00004 	addi	r3,r3,-32768
   828c0:	2821883a 	mov	r16,r5
   828c4:	2027883a 	mov	r19,r4
   828c8:	3025883a 	mov	r18,r6
   828cc:	3823883a 	mov	r17,r7
   828d0:	18000526 	beq	r3,zero,828e8 <__swrite+0x54>
   828d4:	2940038f 	ldh	r5,14(r5)
   828d8:	000d883a 	mov	r6,zero
   828dc:	01c00084 	movi	r7,2
   828e0:	0082c6c0 	call	82c6c <_lseek_r>
   828e4:	8080030b 	ldhu	r2,12(r16)
   828e8:	8140038f 	ldh	r5,14(r16)
   828ec:	10bbffcc 	andi	r2,r2,61439
   828f0:	9809883a 	mov	r4,r19
   828f4:	900d883a 	mov	r6,r18
   828f8:	880f883a 	mov	r7,r17
   828fc:	8080030d 	sth	r2,12(r16)
   82900:	dfc00417 	ldw	ra,16(sp)
   82904:	dcc00317 	ldw	r19,12(sp)
   82908:	dc800217 	ldw	r18,8(sp)
   8290c:	dc400117 	ldw	r17,4(sp)
   82910:	dc000017 	ldw	r16,0(sp)
   82914:	dec00504 	addi	sp,sp,20
   82918:	00829801 	jmpi	82980 <_write_r>

0008291c <__sseek>:
   8291c:	defffe04 	addi	sp,sp,-8
   82920:	dc000015 	stw	r16,0(sp)
   82924:	2821883a 	mov	r16,r5
   82928:	2940038f 	ldh	r5,14(r5)
   8292c:	dfc00115 	stw	ra,4(sp)
   82930:	0082c6c0 	call	82c6c <_lseek_r>
   82934:	00ffffc4 	movi	r3,-1
   82938:	10c00826 	beq	r2,r3,8295c <__sseek+0x40>
   8293c:	80c0030b 	ldhu	r3,12(r16)
   82940:	80801415 	stw	r2,80(r16)
   82944:	18c40014 	ori	r3,r3,4096
   82948:	80c0030d 	sth	r3,12(r16)
   8294c:	dfc00117 	ldw	ra,4(sp)
   82950:	dc000017 	ldw	r16,0(sp)
   82954:	dec00204 	addi	sp,sp,8
   82958:	f800283a 	ret
   8295c:	80c0030b 	ldhu	r3,12(r16)
   82960:	18fbffcc 	andi	r3,r3,61439
   82964:	80c0030d 	sth	r3,12(r16)
   82968:	dfc00117 	ldw	ra,4(sp)
   8296c:	dc000017 	ldw	r16,0(sp)
   82970:	dec00204 	addi	sp,sp,8
   82974:	f800283a 	ret

00082978 <__sclose>:
   82978:	2940038f 	ldh	r5,14(r5)
   8297c:	00829ec1 	jmpi	829ec <_close_r>

00082980 <_write_r>:
   82980:	defffd04 	addi	sp,sp,-12
   82984:	dc400115 	stw	r17,4(sp)
   82988:	dc000015 	stw	r16,0(sp)
   8298c:	2023883a 	mov	r17,r4
   82990:	04000034 	movhi	r16,0
   82994:	8406a704 	addi	r16,r16,6812
   82998:	2809883a 	mov	r4,r5
   8299c:	300b883a 	mov	r5,r6
   829a0:	380d883a 	mov	r6,r7
   829a4:	dfc00215 	stw	ra,8(sp)
   829a8:	80000015 	stw	zero,0(r16)
   829ac:	00836340 	call	83634 <write>
   829b0:	00ffffc4 	movi	r3,-1
   829b4:	10c00526 	beq	r2,r3,829cc <_write_r+0x4c>
   829b8:	dfc00217 	ldw	ra,8(sp)
   829bc:	dc400117 	ldw	r17,4(sp)
   829c0:	dc000017 	ldw	r16,0(sp)
   829c4:	dec00304 	addi	sp,sp,12
   829c8:	f800283a 	ret
   829cc:	80c00017 	ldw	r3,0(r16)
   829d0:	183ff926 	beq	r3,zero,829b8 <_write_r+0x38>
   829d4:	88c00015 	stw	r3,0(r17)
   829d8:	dfc00217 	ldw	ra,8(sp)
   829dc:	dc400117 	ldw	r17,4(sp)
   829e0:	dc000017 	ldw	r16,0(sp)
   829e4:	dec00304 	addi	sp,sp,12
   829e8:	f800283a 	ret

000829ec <_close_r>:
   829ec:	defffd04 	addi	sp,sp,-12
   829f0:	dc400115 	stw	r17,4(sp)
   829f4:	dc000015 	stw	r16,0(sp)
   829f8:	2023883a 	mov	r17,r4
   829fc:	04000034 	movhi	r16,0
   82a00:	8406a704 	addi	r16,r16,6812
   82a04:	2809883a 	mov	r4,r5
   82a08:	dfc00215 	stw	ra,8(sp)
   82a0c:	80000015 	stw	zero,0(r16)
   82a10:	0082dbc0 	call	82dbc <close>
   82a14:	00ffffc4 	movi	r3,-1
   82a18:	10c00526 	beq	r2,r3,82a30 <_close_r+0x44>
   82a1c:	dfc00217 	ldw	ra,8(sp)
   82a20:	dc400117 	ldw	r17,4(sp)
   82a24:	dc000017 	ldw	r16,0(sp)
   82a28:	dec00304 	addi	sp,sp,12
   82a2c:	f800283a 	ret
   82a30:	80c00017 	ldw	r3,0(r16)
   82a34:	183ff926 	beq	r3,zero,82a1c <_close_r+0x30>
   82a38:	88c00015 	stw	r3,0(r17)
   82a3c:	dfc00217 	ldw	ra,8(sp)
   82a40:	dc400117 	ldw	r17,4(sp)
   82a44:	dc000017 	ldw	r16,0(sp)
   82a48:	dec00304 	addi	sp,sp,12
   82a4c:	f800283a 	ret

00082a50 <_fclose_r>:
   82a50:	defffc04 	addi	sp,sp,-16
   82a54:	dc400115 	stw	r17,4(sp)
   82a58:	dc000015 	stw	r16,0(sp)
   82a5c:	dfc00315 	stw	ra,12(sp)
   82a60:	dc800215 	stw	r18,8(sp)
   82a64:	2821883a 	mov	r16,r5
   82a68:	2023883a 	mov	r17,r4
   82a6c:	28003426 	beq	r5,zero,82b40 <_fclose_r+0xf0>
   82a70:	00820100 	call	82010 <__sfp_lock_acquire>
   82a74:	88000226 	beq	r17,zero,82a80 <_fclose_r+0x30>
   82a78:	88800e17 	ldw	r2,56(r17)
   82a7c:	10003826 	beq	r2,zero,82b60 <_fclose_r+0x110>
   82a80:	8080030f 	ldh	r2,12(r16)
   82a84:	10002526 	beq	r2,zero,82b1c <_fclose_r+0xcc>
   82a88:	8809883a 	mov	r4,r17
   82a8c:	800b883a 	mov	r5,r16
   82a90:	0081b4c0 	call	81b4c <_fflush_r>
   82a94:	1025883a 	mov	r18,r2
   82a98:	80800b17 	ldw	r2,44(r16)
   82a9c:	10000426 	beq	r2,zero,82ab0 <_fclose_r+0x60>
   82aa0:	81400717 	ldw	r5,28(r16)
   82aa4:	8809883a 	mov	r4,r17
   82aa8:	103ee83a 	callr	r2
   82aac:	10003516 	blt	r2,zero,82b84 <_fclose_r+0x134>
   82ab0:	8080030b 	ldhu	r2,12(r16)
   82ab4:	1080200c 	andi	r2,r2,128
   82ab8:	10bfffcc 	andi	r2,r2,65535
   82abc:	10a0001c 	xori	r2,r2,32768
   82ac0:	10a00004 	addi	r2,r2,-32768
   82ac4:	10002b1e 	bne	r2,zero,82b74 <_fclose_r+0x124>
   82ac8:	81400c17 	ldw	r5,48(r16)
   82acc:	28000526 	beq	r5,zero,82ae4 <_fclose_r+0x94>
   82ad0:	80801004 	addi	r2,r16,64
   82ad4:	28800226 	beq	r5,r2,82ae0 <_fclose_r+0x90>
   82ad8:	8809883a 	mov	r4,r17
   82adc:	008218c0 	call	8218c <_free_r>
   82ae0:	80000c15 	stw	zero,48(r16)
   82ae4:	81401117 	ldw	r5,68(r16)
   82ae8:	28000326 	beq	r5,zero,82af8 <_fclose_r+0xa8>
   82aec:	8809883a 	mov	r4,r17
   82af0:	008218c0 	call	8218c <_free_r>
   82af4:	80001115 	stw	zero,68(r16)
   82af8:	8000030d 	sth	zero,12(r16)
   82afc:	00820140 	call	82014 <__sfp_lock_release>
   82b00:	9005883a 	mov	r2,r18
   82b04:	dfc00317 	ldw	ra,12(sp)
   82b08:	dc800217 	ldw	r18,8(sp)
   82b0c:	dc400117 	ldw	r17,4(sp)
   82b10:	dc000017 	ldw	r16,0(sp)
   82b14:	dec00404 	addi	sp,sp,16
   82b18:	f800283a 	ret
   82b1c:	00820140 	call	82014 <__sfp_lock_release>
   82b20:	0025883a 	mov	r18,zero
   82b24:	9005883a 	mov	r2,r18
   82b28:	dfc00317 	ldw	ra,12(sp)
   82b2c:	dc800217 	ldw	r18,8(sp)
   82b30:	dc400117 	ldw	r17,4(sp)
   82b34:	dc000017 	ldw	r16,0(sp)
   82b38:	dec00404 	addi	sp,sp,16
   82b3c:	f800283a 	ret
   82b40:	0025883a 	mov	r18,zero
   82b44:	9005883a 	mov	r2,r18
   82b48:	dfc00317 	ldw	ra,12(sp)
   82b4c:	dc800217 	ldw	r18,8(sp)
   82b50:	dc400117 	ldw	r17,4(sp)
   82b54:	dc000017 	ldw	r16,0(sp)
   82b58:	dec00404 	addi	sp,sp,16
   82b5c:	f800283a 	ret
   82b60:	8809883a 	mov	r4,r17
   82b64:	0081e080 	call	81e08 <__sinit>
   82b68:	8080030f 	ldh	r2,12(r16)
   82b6c:	103fc61e 	bne	r2,zero,82a88 <_fclose_r+0x38>
   82b70:	003fea06 	br	82b1c <_fclose_r+0xcc>
   82b74:	81400417 	ldw	r5,16(r16)
   82b78:	8809883a 	mov	r4,r17
   82b7c:	008218c0 	call	8218c <_free_r>
   82b80:	003fd106 	br	82ac8 <_fclose_r+0x78>
   82b84:	04bfffc4 	movi	r18,-1
   82b88:	003fc906 	br	82ab0 <_fclose_r+0x60>

00082b8c <fclose>:
   82b8c:	00800034 	movhi	r2,0
   82b90:	10869704 	addi	r2,r2,6748
   82b94:	200b883a 	mov	r5,r4
   82b98:	11000017 	ldw	r4,0(r2)
   82b9c:	0082a501 	jmpi	82a50 <_fclose_r>

00082ba0 <_fstat_r>:
   82ba0:	defffd04 	addi	sp,sp,-12
   82ba4:	dc400115 	stw	r17,4(sp)
   82ba8:	dc000015 	stw	r16,0(sp)
   82bac:	2023883a 	mov	r17,r4
   82bb0:	04000034 	movhi	r16,0
   82bb4:	8406a704 	addi	r16,r16,6812
   82bb8:	2809883a 	mov	r4,r5
   82bbc:	300b883a 	mov	r5,r6
   82bc0:	dfc00215 	stw	ra,8(sp)
   82bc4:	80000015 	stw	zero,0(r16)
   82bc8:	0082f040 	call	82f04 <fstat>
   82bcc:	00ffffc4 	movi	r3,-1
   82bd0:	10c00526 	beq	r2,r3,82be8 <_fstat_r+0x48>
   82bd4:	dfc00217 	ldw	ra,8(sp)
   82bd8:	dc400117 	ldw	r17,4(sp)
   82bdc:	dc000017 	ldw	r16,0(sp)
   82be0:	dec00304 	addi	sp,sp,12
   82be4:	f800283a 	ret
   82be8:	80c00017 	ldw	r3,0(r16)
   82bec:	183ff926 	beq	r3,zero,82bd4 <_fstat_r+0x34>
   82bf0:	88c00015 	stw	r3,0(r17)
   82bf4:	dfc00217 	ldw	ra,8(sp)
   82bf8:	dc400117 	ldw	r17,4(sp)
   82bfc:	dc000017 	ldw	r16,0(sp)
   82c00:	dec00304 	addi	sp,sp,12
   82c04:	f800283a 	ret

00082c08 <_isatty_r>:
   82c08:	defffd04 	addi	sp,sp,-12
   82c0c:	dc400115 	stw	r17,4(sp)
   82c10:	dc000015 	stw	r16,0(sp)
   82c14:	2023883a 	mov	r17,r4
   82c18:	04000034 	movhi	r16,0
   82c1c:	8406a704 	addi	r16,r16,6812
   82c20:	2809883a 	mov	r4,r5
   82c24:	dfc00215 	stw	ra,8(sp)
   82c28:	80000015 	stw	zero,0(r16)
   82c2c:	00830040 	call	83004 <isatty>
   82c30:	00ffffc4 	movi	r3,-1
   82c34:	10c00526 	beq	r2,r3,82c4c <_isatty_r+0x44>
   82c38:	dfc00217 	ldw	ra,8(sp)
   82c3c:	dc400117 	ldw	r17,4(sp)
   82c40:	dc000017 	ldw	r16,0(sp)
   82c44:	dec00304 	addi	sp,sp,12
   82c48:	f800283a 	ret
   82c4c:	80c00017 	ldw	r3,0(r16)
   82c50:	183ff926 	beq	r3,zero,82c38 <_isatty_r+0x30>
   82c54:	88c00015 	stw	r3,0(r17)
   82c58:	dfc00217 	ldw	ra,8(sp)
   82c5c:	dc400117 	ldw	r17,4(sp)
   82c60:	dc000017 	ldw	r16,0(sp)
   82c64:	dec00304 	addi	sp,sp,12
   82c68:	f800283a 	ret

00082c6c <_lseek_r>:
   82c6c:	defffd04 	addi	sp,sp,-12
   82c70:	dc400115 	stw	r17,4(sp)
   82c74:	dc000015 	stw	r16,0(sp)
   82c78:	2023883a 	mov	r17,r4
   82c7c:	04000034 	movhi	r16,0
   82c80:	8406a704 	addi	r16,r16,6812
   82c84:	2809883a 	mov	r4,r5
   82c88:	300b883a 	mov	r5,r6
   82c8c:	380d883a 	mov	r6,r7
   82c90:	dfc00215 	stw	ra,8(sp)
   82c94:	80000015 	stw	zero,0(r16)
   82c98:	00831e40 	call	831e4 <lseek>
   82c9c:	00ffffc4 	movi	r3,-1
   82ca0:	10c00526 	beq	r2,r3,82cb8 <_lseek_r+0x4c>
   82ca4:	dfc00217 	ldw	ra,8(sp)
   82ca8:	dc400117 	ldw	r17,4(sp)
   82cac:	dc000017 	ldw	r16,0(sp)
   82cb0:	dec00304 	addi	sp,sp,12
   82cb4:	f800283a 	ret
   82cb8:	80c00017 	ldw	r3,0(r16)
   82cbc:	183ff926 	beq	r3,zero,82ca4 <_lseek_r+0x38>
   82cc0:	88c00015 	stw	r3,0(r17)
   82cc4:	dfc00217 	ldw	ra,8(sp)
   82cc8:	dc400117 	ldw	r17,4(sp)
   82ccc:	dc000017 	ldw	r16,0(sp)
   82cd0:	dec00304 	addi	sp,sp,12
   82cd4:	f800283a 	ret

00082cd8 <_read_r>:
   82cd8:	defffd04 	addi	sp,sp,-12
   82cdc:	dc400115 	stw	r17,4(sp)
   82ce0:	dc000015 	stw	r16,0(sp)
   82ce4:	2023883a 	mov	r17,r4
   82ce8:	04000034 	movhi	r16,0
   82cec:	8406a704 	addi	r16,r16,6812
   82cf0:	2809883a 	mov	r4,r5
   82cf4:	300b883a 	mov	r5,r6
   82cf8:	380d883a 	mov	r6,r7
   82cfc:	dfc00215 	stw	ra,8(sp)
   82d00:	80000015 	stw	zero,0(r16)
   82d04:	00833c00 	call	833c0 <read>
   82d08:	00ffffc4 	movi	r3,-1
   82d0c:	10c00526 	beq	r2,r3,82d24 <_read_r+0x4c>
   82d10:	dfc00217 	ldw	ra,8(sp)
   82d14:	dc400117 	ldw	r17,4(sp)
   82d18:	dc000017 	ldw	r16,0(sp)
   82d1c:	dec00304 	addi	sp,sp,12
   82d20:	f800283a 	ret
   82d24:	80c00017 	ldw	r3,0(r16)
   82d28:	183ff926 	beq	r3,zero,82d10 <_read_r+0x38>
   82d2c:	88c00015 	stw	r3,0(r17)
   82d30:	dfc00217 	ldw	ra,8(sp)
   82d34:	dc400117 	ldw	r17,4(sp)
   82d38:	dc000017 	ldw	r16,0(sp)
   82d3c:	dec00304 	addi	sp,sp,12
   82d40:	f800283a 	ret

00082d44 <__mulsi3>:
   82d44:	0005883a 	mov	r2,zero
   82d48:	20000726 	beq	r4,zero,82d68 <__mulsi3+0x24>
   82d4c:	20c0004c 	andi	r3,r4,1
   82d50:	2008d07a 	srli	r4,r4,1
   82d54:	18000126 	beq	r3,zero,82d5c <__mulsi3+0x18>
   82d58:	1145883a 	add	r2,r2,r5
   82d5c:	294b883a 	add	r5,r5,r5
   82d60:	203ffa1e 	bne	r4,zero,82d4c <__mulsi3+0x8>
   82d64:	f800283a 	ret
   82d68:	f800283a 	ret

00082d6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   82d6c:	defffe04 	addi	sp,sp,-8
   82d70:	dfc00115 	stw	ra,4(sp)
   82d74:	df000015 	stw	fp,0(sp)
   82d78:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   82d7c:	00800034 	movhi	r2,0
   82d80:	10869f04 	addi	r2,r2,6780
   82d84:	10800017 	ldw	r2,0(r2)
   82d88:	10000526 	beq	r2,zero,82da0 <alt_get_errno+0x34>
   82d8c:	00800034 	movhi	r2,0
   82d90:	10869f04 	addi	r2,r2,6780
   82d94:	10800017 	ldw	r2,0(r2)
   82d98:	103ee83a 	callr	r2
   82d9c:	00000206 	br	82da8 <alt_get_errno+0x3c>
   82da0:	00800034 	movhi	r2,0
   82da4:	1086a704 	addi	r2,r2,6812
}
   82da8:	e037883a 	mov	sp,fp
   82dac:	dfc00117 	ldw	ra,4(sp)
   82db0:	df000017 	ldw	fp,0(sp)
   82db4:	dec00204 	addi	sp,sp,8
   82db8:	f800283a 	ret

00082dbc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   82dbc:	defffb04 	addi	sp,sp,-20
   82dc0:	dfc00415 	stw	ra,16(sp)
   82dc4:	df000315 	stw	fp,12(sp)
   82dc8:	df000304 	addi	fp,sp,12
   82dcc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   82dd0:	e0bfff17 	ldw	r2,-4(fp)
   82dd4:	10000716 	blt	r2,zero,82df4 <close+0x38>
   82dd8:	e13fff17 	ldw	r4,-4(fp)
   82ddc:	01400304 	movi	r5,12
   82de0:	0082d440 	call	82d44 <__mulsi3>
   82de4:	00c00034 	movhi	r3,0
   82de8:	18c21e04 	addi	r3,r3,2168
   82dec:	10c5883a 	add	r2,r2,r3
   82df0:	00000106 	br	82df8 <close+0x3c>
   82df4:	0005883a 	mov	r2,zero
   82df8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   82dfc:	e0bffd17 	ldw	r2,-12(fp)
   82e00:	10001826 	beq	r2,zero,82e64 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   82e04:	e0bffd17 	ldw	r2,-12(fp)
   82e08:	10800017 	ldw	r2,0(r2)
   82e0c:	10800417 	ldw	r2,16(r2)
   82e10:	10000626 	beq	r2,zero,82e2c <close+0x70>
   82e14:	e0bffd17 	ldw	r2,-12(fp)
   82e18:	10800017 	ldw	r2,0(r2)
   82e1c:	10800417 	ldw	r2,16(r2)
   82e20:	e13ffd17 	ldw	r4,-12(fp)
   82e24:	103ee83a 	callr	r2
   82e28:	00000106 	br	82e30 <close+0x74>
   82e2c:	0005883a 	mov	r2,zero
   82e30:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   82e34:	e13fff17 	ldw	r4,-4(fp)
   82e38:	00834b40 	call	834b4 <alt_release_fd>
    if (rval < 0)
   82e3c:	e0bffe17 	ldw	r2,-8(fp)
   82e40:	1000060e 	bge	r2,zero,82e5c <close+0xa0>
    {
      ALT_ERRNO = -rval;
   82e44:	0082d6c0 	call	82d6c <alt_get_errno>
   82e48:	e0fffe17 	ldw	r3,-8(fp)
   82e4c:	00c7c83a 	sub	r3,zero,r3
   82e50:	10c00015 	stw	r3,0(r2)
      return -1;
   82e54:	00bfffc4 	movi	r2,-1
   82e58:	00000606 	br	82e74 <close+0xb8>
    }
    return 0;
   82e5c:	0005883a 	mov	r2,zero
   82e60:	00000406 	br	82e74 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   82e64:	0082d6c0 	call	82d6c <alt_get_errno>
   82e68:	00c01444 	movi	r3,81
   82e6c:	10c00015 	stw	r3,0(r2)
    return -1;
   82e70:	00bfffc4 	movi	r2,-1
  }
}
   82e74:	e037883a 	mov	sp,fp
   82e78:	dfc00117 	ldw	ra,4(sp)
   82e7c:	df000017 	ldw	fp,0(sp)
   82e80:	dec00204 	addi	sp,sp,8
   82e84:	f800283a 	ret

00082e88 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   82e88:	defffc04 	addi	sp,sp,-16
   82e8c:	df000315 	stw	fp,12(sp)
   82e90:	df000304 	addi	fp,sp,12
   82e94:	e13ffd15 	stw	r4,-12(fp)
   82e98:	e17ffe15 	stw	r5,-8(fp)
   82e9c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   82ea0:	e0bfff17 	ldw	r2,-4(fp)
}
   82ea4:	e037883a 	mov	sp,fp
   82ea8:	df000017 	ldw	fp,0(sp)
   82eac:	dec00104 	addi	sp,sp,4
   82eb0:	f800283a 	ret

00082eb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   82eb4:	defffe04 	addi	sp,sp,-8
   82eb8:	dfc00115 	stw	ra,4(sp)
   82ebc:	df000015 	stw	fp,0(sp)
   82ec0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   82ec4:	00800034 	movhi	r2,0
   82ec8:	10869f04 	addi	r2,r2,6780
   82ecc:	10800017 	ldw	r2,0(r2)
   82ed0:	10000526 	beq	r2,zero,82ee8 <alt_get_errno+0x34>
   82ed4:	00800034 	movhi	r2,0
   82ed8:	10869f04 	addi	r2,r2,6780
   82edc:	10800017 	ldw	r2,0(r2)
   82ee0:	103ee83a 	callr	r2
   82ee4:	00000206 	br	82ef0 <alt_get_errno+0x3c>
   82ee8:	00800034 	movhi	r2,0
   82eec:	1086a704 	addi	r2,r2,6812
}
   82ef0:	e037883a 	mov	sp,fp
   82ef4:	dfc00117 	ldw	ra,4(sp)
   82ef8:	df000017 	ldw	fp,0(sp)
   82efc:	dec00204 	addi	sp,sp,8
   82f00:	f800283a 	ret

00082f04 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   82f04:	defffb04 	addi	sp,sp,-20
   82f08:	dfc00415 	stw	ra,16(sp)
   82f0c:	df000315 	stw	fp,12(sp)
   82f10:	df000304 	addi	fp,sp,12
   82f14:	e13ffe15 	stw	r4,-8(fp)
   82f18:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   82f1c:	e0bffe17 	ldw	r2,-8(fp)
   82f20:	10000716 	blt	r2,zero,82f40 <fstat+0x3c>
   82f24:	e13ffe17 	ldw	r4,-8(fp)
   82f28:	01400304 	movi	r5,12
   82f2c:	0082d440 	call	82d44 <__mulsi3>
   82f30:	00c00034 	movhi	r3,0
   82f34:	18c21e04 	addi	r3,r3,2168
   82f38:	10c5883a 	add	r2,r2,r3
   82f3c:	00000106 	br	82f44 <fstat+0x40>
   82f40:	0005883a 	mov	r2,zero
   82f44:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   82f48:	e0bffd17 	ldw	r2,-12(fp)
   82f4c:	10001026 	beq	r2,zero,82f90 <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   82f50:	e0bffd17 	ldw	r2,-12(fp)
   82f54:	10800017 	ldw	r2,0(r2)
   82f58:	10800817 	ldw	r2,32(r2)
   82f5c:	10000726 	beq	r2,zero,82f7c <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
   82f60:	e0bffd17 	ldw	r2,-12(fp)
   82f64:	10800017 	ldw	r2,0(r2)
   82f68:	10800817 	ldw	r2,32(r2)
   82f6c:	e13ffd17 	ldw	r4,-12(fp)
   82f70:	e17fff17 	ldw	r5,-4(fp)
   82f74:	103ee83a 	callr	r2
   82f78:	00000906 	br	82fa0 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   82f7c:	e0bfff17 	ldw	r2,-4(fp)
   82f80:	00c80004 	movi	r3,8192
   82f84:	10c00115 	stw	r3,4(r2)
      return 0;
   82f88:	0005883a 	mov	r2,zero
   82f8c:	00000406 	br	82fa0 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   82f90:	0082eb40 	call	82eb4 <alt_get_errno>
   82f94:	00c01444 	movi	r3,81
   82f98:	10c00015 	stw	r3,0(r2)
    return -1;
   82f9c:	00bfffc4 	movi	r2,-1
  }
}
   82fa0:	e037883a 	mov	sp,fp
   82fa4:	dfc00117 	ldw	ra,4(sp)
   82fa8:	df000017 	ldw	fp,0(sp)
   82fac:	dec00204 	addi	sp,sp,8
   82fb0:	f800283a 	ret

00082fb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   82fb4:	defffe04 	addi	sp,sp,-8
   82fb8:	dfc00115 	stw	ra,4(sp)
   82fbc:	df000015 	stw	fp,0(sp)
   82fc0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   82fc4:	00800034 	movhi	r2,0
   82fc8:	10869f04 	addi	r2,r2,6780
   82fcc:	10800017 	ldw	r2,0(r2)
   82fd0:	10000526 	beq	r2,zero,82fe8 <alt_get_errno+0x34>
   82fd4:	00800034 	movhi	r2,0
   82fd8:	10869f04 	addi	r2,r2,6780
   82fdc:	10800017 	ldw	r2,0(r2)
   82fe0:	103ee83a 	callr	r2
   82fe4:	00000206 	br	82ff0 <alt_get_errno+0x3c>
   82fe8:	00800034 	movhi	r2,0
   82fec:	1086a704 	addi	r2,r2,6812
}
   82ff0:	e037883a 	mov	sp,fp
   82ff4:	dfc00117 	ldw	ra,4(sp)
   82ff8:	df000017 	ldw	fp,0(sp)
   82ffc:	dec00204 	addi	sp,sp,8
   83000:	f800283a 	ret

00083004 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   83004:	deffed04 	addi	sp,sp,-76
   83008:	dfc01215 	stw	ra,72(sp)
   8300c:	df001115 	stw	fp,68(sp)
   83010:	df001104 	addi	fp,sp,68
   83014:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   83018:	e0bfff17 	ldw	r2,-4(fp)
   8301c:	10000716 	blt	r2,zero,8303c <isatty+0x38>
   83020:	e13fff17 	ldw	r4,-4(fp)
   83024:	01400304 	movi	r5,12
   83028:	0082d440 	call	82d44 <__mulsi3>
   8302c:	00c00034 	movhi	r3,0
   83030:	18c21e04 	addi	r3,r3,2168
   83034:	10c5883a 	add	r2,r2,r3
   83038:	00000106 	br	83040 <isatty+0x3c>
   8303c:	0005883a 	mov	r2,zero
   83040:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   83044:	e0bfef17 	ldw	r2,-68(fp)
   83048:	10000e26 	beq	r2,zero,83084 <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   8304c:	e0bfef17 	ldw	r2,-68(fp)
   83050:	10800017 	ldw	r2,0(r2)
   83054:	10800817 	ldw	r2,32(r2)
   83058:	1000021e 	bne	r2,zero,83064 <isatty+0x60>
    {
      return 1;
   8305c:	00800044 	movi	r2,1
   83060:	00000c06 	br	83094 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   83064:	e0bff004 	addi	r2,fp,-64
   83068:	e13fff17 	ldw	r4,-4(fp)
   8306c:	100b883a 	mov	r5,r2
   83070:	0082f040 	call	82f04 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   83074:	e0bff117 	ldw	r2,-60(fp)
   83078:	10880020 	cmpeqi	r2,r2,8192
   8307c:	10803fcc 	andi	r2,r2,255
   83080:	00000406 	br	83094 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   83084:	0082fb40 	call	82fb4 <alt_get_errno>
   83088:	00c01444 	movi	r3,81
   8308c:	10c00015 	stw	r3,0(r2)
    return 0;
   83090:	0005883a 	mov	r2,zero
  }
}
   83094:	e037883a 	mov	sp,fp
   83098:	dfc00117 	ldw	ra,4(sp)
   8309c:	df000017 	ldw	fp,0(sp)
   830a0:	dec00204 	addi	sp,sp,8
   830a4:	f800283a 	ret

000830a8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   830a8:	defffc04 	addi	sp,sp,-16
   830ac:	df000315 	stw	fp,12(sp)
   830b0:	df000304 	addi	fp,sp,12
   830b4:	e13ffd15 	stw	r4,-12(fp)
   830b8:	e17ffe15 	stw	r5,-8(fp)
   830bc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   830c0:	e0fffe17 	ldw	r3,-8(fp)
   830c4:	e0bffd17 	ldw	r2,-12(fp)
   830c8:	18800e26 	beq	r3,r2,83104 <alt_load_section+0x5c>
  {
    while( to != end )
   830cc:	00000a06 	br	830f8 <alt_load_section+0x50>
    {
      *to++ = *from++;
   830d0:	e0bffd17 	ldw	r2,-12(fp)
   830d4:	10c00017 	ldw	r3,0(r2)
   830d8:	e0bffe17 	ldw	r2,-8(fp)
   830dc:	10c00015 	stw	r3,0(r2)
   830e0:	e0bffe17 	ldw	r2,-8(fp)
   830e4:	10800104 	addi	r2,r2,4
   830e8:	e0bffe15 	stw	r2,-8(fp)
   830ec:	e0bffd17 	ldw	r2,-12(fp)
   830f0:	10800104 	addi	r2,r2,4
   830f4:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   830f8:	e0fffe17 	ldw	r3,-8(fp)
   830fc:	e0bfff17 	ldw	r2,-4(fp)
   83100:	18bff31e 	bne	r3,r2,830d0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   83104:	e037883a 	mov	sp,fp
   83108:	df000017 	ldw	fp,0(sp)
   8310c:	dec00104 	addi	sp,sp,4
   83110:	f800283a 	ret

00083114 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   83114:	defffe04 	addi	sp,sp,-8
   83118:	dfc00115 	stw	ra,4(sp)
   8311c:	df000015 	stw	fp,0(sp)
   83120:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   83124:	01000234 	movhi	r4,8
   83128:	21155d04 	addi	r4,r4,21876
   8312c:	01400034 	movhi	r5,0
   83130:	29401204 	addi	r5,r5,72
   83134:	01800034 	movhi	r6,0
   83138:	3186a404 	addi	r6,r6,6800
   8313c:	00830a80 	call	830a8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   83140:	01000234 	movhi	r4,8
   83144:	21000804 	addi	r4,r4,32
   83148:	01400234 	movhi	r5,8
   8314c:	29400804 	addi	r5,r5,32
   83150:	01800234 	movhi	r6,8
   83154:	31806e04 	addi	r6,r6,440
   83158:	00830a80 	call	830a8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   8315c:	01000234 	movhi	r4,8
   83160:	21154b04 	addi	r4,r4,21804
   83164:	01400034 	movhi	r5,0
   83168:	29400004 	addi	r5,r5,0
   8316c:	01800034 	movhi	r6,0
   83170:	31801204 	addi	r6,r6,72
   83174:	00830a80 	call	830a8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   83178:	008448c0 	call	8448c <alt_dcache_flush_all>
  alt_icache_flush_all();
   8317c:	00846500 	call	84650 <alt_icache_flush_all>
}
   83180:	e037883a 	mov	sp,fp
   83184:	dfc00117 	ldw	ra,4(sp)
   83188:	df000017 	ldw	fp,0(sp)
   8318c:	dec00204 	addi	sp,sp,8
   83190:	f800283a 	ret

00083194 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   83194:	defffe04 	addi	sp,sp,-8
   83198:	dfc00115 	stw	ra,4(sp)
   8319c:	df000015 	stw	fp,0(sp)
   831a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   831a4:	00800034 	movhi	r2,0
   831a8:	10869f04 	addi	r2,r2,6780
   831ac:	10800017 	ldw	r2,0(r2)
   831b0:	10000526 	beq	r2,zero,831c8 <alt_get_errno+0x34>
   831b4:	00800034 	movhi	r2,0
   831b8:	10869f04 	addi	r2,r2,6780
   831bc:	10800017 	ldw	r2,0(r2)
   831c0:	103ee83a 	callr	r2
   831c4:	00000206 	br	831d0 <alt_get_errno+0x3c>
   831c8:	00800034 	movhi	r2,0
   831cc:	1086a704 	addi	r2,r2,6812
}
   831d0:	e037883a 	mov	sp,fp
   831d4:	dfc00117 	ldw	ra,4(sp)
   831d8:	df000017 	ldw	fp,0(sp)
   831dc:	dec00204 	addi	sp,sp,8
   831e0:	f800283a 	ret

000831e4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   831e4:	defff904 	addi	sp,sp,-28
   831e8:	dfc00615 	stw	ra,24(sp)
   831ec:	df000515 	stw	fp,20(sp)
   831f0:	df000504 	addi	fp,sp,20
   831f4:	e13ffd15 	stw	r4,-12(fp)
   831f8:	e17ffe15 	stw	r5,-8(fp)
   831fc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   83200:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   83204:	e0bffd17 	ldw	r2,-12(fp)
   83208:	10000716 	blt	r2,zero,83228 <lseek+0x44>
   8320c:	e13ffd17 	ldw	r4,-12(fp)
   83210:	01400304 	movi	r5,12
   83214:	0082d440 	call	82d44 <__mulsi3>
   83218:	00c00034 	movhi	r3,0
   8321c:	18c21e04 	addi	r3,r3,2168
   83220:	10c5883a 	add	r2,r2,r3
   83224:	00000106 	br	8322c <lseek+0x48>
   83228:	0005883a 	mov	r2,zero
   8322c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   83230:	e0bffc17 	ldw	r2,-16(fp)
   83234:	10001026 	beq	r2,zero,83278 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   83238:	e0bffc17 	ldw	r2,-16(fp)
   8323c:	10800017 	ldw	r2,0(r2)
   83240:	10800717 	ldw	r2,28(r2)
   83244:	10000926 	beq	r2,zero,8326c <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   83248:	e0bffc17 	ldw	r2,-16(fp)
   8324c:	10800017 	ldw	r2,0(r2)
   83250:	10800717 	ldw	r2,28(r2)
   83254:	e13ffc17 	ldw	r4,-16(fp)
   83258:	e17ffe17 	ldw	r5,-8(fp)
   8325c:	e1bfff17 	ldw	r6,-4(fp)
   83260:	103ee83a 	callr	r2
   83264:	e0bffb15 	stw	r2,-20(fp)
   83268:	00000506 	br	83280 <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   8326c:	00bfde84 	movi	r2,-134
   83270:	e0bffb15 	stw	r2,-20(fp)
   83274:	00000206 	br	83280 <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
   83278:	00bfebc4 	movi	r2,-81
   8327c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   83280:	e0bffb17 	ldw	r2,-20(fp)
   83284:	1000060e 	bge	r2,zero,832a0 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   83288:	00831940 	call	83194 <alt_get_errno>
   8328c:	e0fffb17 	ldw	r3,-20(fp)
   83290:	00c7c83a 	sub	r3,zero,r3
   83294:	10c00015 	stw	r3,0(r2)
    rc = -1;
   83298:	00bfffc4 	movi	r2,-1
   8329c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   832a0:	e0bffb17 	ldw	r2,-20(fp)
}
   832a4:	e037883a 	mov	sp,fp
   832a8:	dfc00117 	ldw	ra,4(sp)
   832ac:	df000017 	ldw	fp,0(sp)
   832b0:	dec00204 	addi	sp,sp,8
   832b4:	f800283a 	ret

000832b8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   832b8:	defffd04 	addi	sp,sp,-12
   832bc:	dfc00215 	stw	ra,8(sp)
   832c0:	df000115 	stw	fp,4(sp)
   832c4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   832c8:	0009883a 	mov	r4,zero
   832cc:	008375c0 	call	8375c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   832d0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   832d4:	00837900 	call	83790 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   832d8:	01000034 	movhi	r4,0
   832dc:	21000a04 	addi	r4,r4,40
   832e0:	01400034 	movhi	r5,0
   832e4:	29400a04 	addi	r5,r5,40
   832e8:	01800034 	movhi	r6,0
   832ec:	31800a04 	addi	r6,r6,40
   832f0:	0084a140 	call	84a14 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   832f4:	00845980 	call	84598 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   832f8:	01000234 	movhi	r4,8
   832fc:	21117d04 	addi	r4,r4,17908
   83300:	00851580 	call	85158 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   83304:	d1201217 	ldw	r4,-32696(gp)
   83308:	d0e01317 	ldw	r3,-32692(gp)
   8330c:	d0a01417 	ldw	r2,-32688(gp)
   83310:	180b883a 	mov	r5,r3
   83314:	100d883a 	mov	r6,r2
   83318:	00801f40 	call	801f4 <main>
   8331c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   83320:	01000044 	movi	r4,1
   83324:	0082dbc0 	call	82dbc <close>
  exit (result);
   83328:	e13fff17 	ldw	r4,-4(fp)
   8332c:	008516c0 	call	8516c <exit>

00083330 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   83330:	defffe04 	addi	sp,sp,-8
   83334:	df000115 	stw	fp,4(sp)
   83338:	df000104 	addi	fp,sp,4
   8333c:	e13fff15 	stw	r4,-4(fp)
}
   83340:	e037883a 	mov	sp,fp
   83344:	df000017 	ldw	fp,0(sp)
   83348:	dec00104 	addi	sp,sp,4
   8334c:	f800283a 	ret

00083350 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   83350:	defffe04 	addi	sp,sp,-8
   83354:	df000115 	stw	fp,4(sp)
   83358:	df000104 	addi	fp,sp,4
   8335c:	e13fff15 	stw	r4,-4(fp)
}
   83360:	e037883a 	mov	sp,fp
   83364:	df000017 	ldw	fp,0(sp)
   83368:	dec00104 	addi	sp,sp,4
   8336c:	f800283a 	ret

00083370 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   83370:	defffe04 	addi	sp,sp,-8
   83374:	dfc00115 	stw	ra,4(sp)
   83378:	df000015 	stw	fp,0(sp)
   8337c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   83380:	00800034 	movhi	r2,0
   83384:	10869f04 	addi	r2,r2,6780
   83388:	10800017 	ldw	r2,0(r2)
   8338c:	10000526 	beq	r2,zero,833a4 <alt_get_errno+0x34>
   83390:	00800034 	movhi	r2,0
   83394:	10869f04 	addi	r2,r2,6780
   83398:	10800017 	ldw	r2,0(r2)
   8339c:	103ee83a 	callr	r2
   833a0:	00000206 	br	833ac <alt_get_errno+0x3c>
   833a4:	00800034 	movhi	r2,0
   833a8:	1086a704 	addi	r2,r2,6812
}
   833ac:	e037883a 	mov	sp,fp
   833b0:	dfc00117 	ldw	ra,4(sp)
   833b4:	df000017 	ldw	fp,0(sp)
   833b8:	dec00204 	addi	sp,sp,8
   833bc:	f800283a 	ret

000833c0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   833c0:	defff904 	addi	sp,sp,-28
   833c4:	dfc00615 	stw	ra,24(sp)
   833c8:	df000515 	stw	fp,20(sp)
   833cc:	df000504 	addi	fp,sp,20
   833d0:	e13ffd15 	stw	r4,-12(fp)
   833d4:	e17ffe15 	stw	r5,-8(fp)
   833d8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   833dc:	e0bffd17 	ldw	r2,-12(fp)
   833e0:	10000716 	blt	r2,zero,83400 <read+0x40>
   833e4:	e13ffd17 	ldw	r4,-12(fp)
   833e8:	01400304 	movi	r5,12
   833ec:	0082d440 	call	82d44 <__mulsi3>
   833f0:	00c00034 	movhi	r3,0
   833f4:	18c21e04 	addi	r3,r3,2168
   833f8:	10c5883a 	add	r2,r2,r3
   833fc:	00000106 	br	83404 <read+0x44>
   83400:	0005883a 	mov	r2,zero
   83404:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   83408:	e0bffb17 	ldw	r2,-20(fp)
   8340c:	10002026 	beq	r2,zero,83490 <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   83410:	e0bffb17 	ldw	r2,-20(fp)
   83414:	10800217 	ldw	r2,8(r2)
   83418:	108000cc 	andi	r2,r2,3
   8341c:	10800060 	cmpeqi	r2,r2,1
   83420:	1000171e 	bne	r2,zero,83480 <read+0xc0>
        (fd->dev->read))
   83424:	e0bffb17 	ldw	r2,-20(fp)
   83428:	10800017 	ldw	r2,0(r2)
   8342c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   83430:	10001326 	beq	r2,zero,83480 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   83434:	e0bffb17 	ldw	r2,-20(fp)
   83438:	10800017 	ldw	r2,0(r2)
   8343c:	10c00517 	ldw	r3,20(r2)
   83440:	e0bfff17 	ldw	r2,-4(fp)
   83444:	e13ffb17 	ldw	r4,-20(fp)
   83448:	e17ffe17 	ldw	r5,-8(fp)
   8344c:	100d883a 	mov	r6,r2
   83450:	183ee83a 	callr	r3
   83454:	e0bffc15 	stw	r2,-16(fp)
   83458:	e0bffc17 	ldw	r2,-16(fp)
   8345c:	1000060e 	bge	r2,zero,83478 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   83460:	00833700 	call	83370 <alt_get_errno>
   83464:	e0fffc17 	ldw	r3,-16(fp)
   83468:	00c7c83a 	sub	r3,zero,r3
   8346c:	10c00015 	stw	r3,0(r2)
          return -1;
   83470:	00bfffc4 	movi	r2,-1
   83474:	00000a06 	br	834a0 <read+0xe0>
        }
        return rval;
   83478:	e0bffc17 	ldw	r2,-16(fp)
   8347c:	00000806 	br	834a0 <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   83480:	00833700 	call	83370 <alt_get_errno>
   83484:	00c00344 	movi	r3,13
   83488:	10c00015 	stw	r3,0(r2)
   8348c:	00000306 	br	8349c <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   83490:	00833700 	call	83370 <alt_get_errno>
   83494:	00c01444 	movi	r3,81
   83498:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   8349c:	00bfffc4 	movi	r2,-1
}
   834a0:	e037883a 	mov	sp,fp
   834a4:	dfc00117 	ldw	ra,4(sp)
   834a8:	df000017 	ldw	fp,0(sp)
   834ac:	dec00204 	addi	sp,sp,8
   834b0:	f800283a 	ret

000834b4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   834b4:	defffc04 	addi	sp,sp,-16
   834b8:	dfc00315 	stw	ra,12(sp)
   834bc:	df000215 	stw	fp,8(sp)
   834c0:	dc000115 	stw	r16,4(sp)
   834c4:	df000104 	addi	fp,sp,4
   834c8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   834cc:	e0bfff17 	ldw	r2,-4(fp)
   834d0:	108000d0 	cmplti	r2,r2,3
   834d4:	1000111e 	bne	r2,zero,8351c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   834d8:	04000034 	movhi	r16,0
   834dc:	84021e04 	addi	r16,r16,2168
   834e0:	e0bfff17 	ldw	r2,-4(fp)
   834e4:	1009883a 	mov	r4,r2
   834e8:	01400304 	movi	r5,12
   834ec:	0082d440 	call	82d44 <__mulsi3>
   834f0:	8085883a 	add	r2,r16,r2
   834f4:	10800204 	addi	r2,r2,8
   834f8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   834fc:	04000034 	movhi	r16,0
   83500:	84021e04 	addi	r16,r16,2168
   83504:	e0bfff17 	ldw	r2,-4(fp)
   83508:	1009883a 	mov	r4,r2
   8350c:	01400304 	movi	r5,12
   83510:	0082d440 	call	82d44 <__mulsi3>
   83514:	8085883a 	add	r2,r16,r2
   83518:	10000015 	stw	zero,0(r2)
  }
}
   8351c:	e037883a 	mov	sp,fp
   83520:	dfc00217 	ldw	ra,8(sp)
   83524:	df000117 	ldw	fp,4(sp)
   83528:	dc000017 	ldw	r16,0(sp)
   8352c:	dec00304 	addi	sp,sp,12
   83530:	f800283a 	ret

00083534 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   83534:	defff904 	addi	sp,sp,-28
   83538:	df000615 	stw	fp,24(sp)
   8353c:	df000604 	addi	fp,sp,24
   83540:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   83544:	0005303a 	rdctl	r2,status
   83548:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8354c:	e0fffc17 	ldw	r3,-16(fp)
   83550:	00bfff84 	movi	r2,-2
   83554:	1884703a 	and	r2,r3,r2
   83558:	1001703a 	wrctl	status,r2
  
  return context;
   8355c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   83560:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   83564:	d0a00a17 	ldw	r2,-32728(gp)
   83568:	10c000c4 	addi	r3,r2,3
   8356c:	00bfff04 	movi	r2,-4
   83570:	1884703a 	and	r2,r3,r2
   83574:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   83578:	d0e00a17 	ldw	r3,-32728(gp)
   8357c:	e0bfff17 	ldw	r2,-4(fp)
   83580:	1885883a 	add	r2,r3,r2
   83584:	00c00134 	movhi	r3,4
   83588:	18c00004 	addi	r3,r3,0
   8358c:	1880062e 	bgeu	r3,r2,835a8 <sbrk+0x74>
   83590:	e0bffa17 	ldw	r2,-24(fp)
   83594:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   83598:	e0bffd17 	ldw	r2,-12(fp)
   8359c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   835a0:	00bfffc4 	movi	r2,-1
   835a4:	00000b06 	br	835d4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   835a8:	d0a00a17 	ldw	r2,-32728(gp)
   835ac:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   835b0:	d0e00a17 	ldw	r3,-32728(gp)
   835b4:	e0bfff17 	ldw	r2,-4(fp)
   835b8:	1885883a 	add	r2,r3,r2
   835bc:	d0a00a15 	stw	r2,-32728(gp)
   835c0:	e0bffa17 	ldw	r2,-24(fp)
   835c4:	e0bffe15 	stw	r2,-8(fp)
   835c8:	e0bffe17 	ldw	r2,-8(fp)
   835cc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   835d0:	e0bffb17 	ldw	r2,-20(fp)
} 
   835d4:	e037883a 	mov	sp,fp
   835d8:	df000017 	ldw	fp,0(sp)
   835dc:	dec00104 	addi	sp,sp,4
   835e0:	f800283a 	ret

000835e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   835e4:	defffe04 	addi	sp,sp,-8
   835e8:	dfc00115 	stw	ra,4(sp)
   835ec:	df000015 	stw	fp,0(sp)
   835f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   835f4:	00800034 	movhi	r2,0
   835f8:	10869f04 	addi	r2,r2,6780
   835fc:	10800017 	ldw	r2,0(r2)
   83600:	10000526 	beq	r2,zero,83618 <alt_get_errno+0x34>
   83604:	00800034 	movhi	r2,0
   83608:	10869f04 	addi	r2,r2,6780
   8360c:	10800017 	ldw	r2,0(r2)
   83610:	103ee83a 	callr	r2
   83614:	00000206 	br	83620 <alt_get_errno+0x3c>
   83618:	00800034 	movhi	r2,0
   8361c:	1086a704 	addi	r2,r2,6812
}
   83620:	e037883a 	mov	sp,fp
   83624:	dfc00117 	ldw	ra,4(sp)
   83628:	df000017 	ldw	fp,0(sp)
   8362c:	dec00204 	addi	sp,sp,8
   83630:	f800283a 	ret

00083634 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   83634:	defff904 	addi	sp,sp,-28
   83638:	dfc00615 	stw	ra,24(sp)
   8363c:	df000515 	stw	fp,20(sp)
   83640:	df000504 	addi	fp,sp,20
   83644:	e13ffd15 	stw	r4,-12(fp)
   83648:	e17ffe15 	stw	r5,-8(fp)
   8364c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   83650:	e0bffd17 	ldw	r2,-12(fp)
   83654:	10000716 	blt	r2,zero,83674 <write+0x40>
   83658:	e13ffd17 	ldw	r4,-12(fp)
   8365c:	01400304 	movi	r5,12
   83660:	0082d440 	call	82d44 <__mulsi3>
   83664:	00c00034 	movhi	r3,0
   83668:	18c21e04 	addi	r3,r3,2168
   8366c:	10c5883a 	add	r2,r2,r3
   83670:	00000106 	br	83678 <write+0x44>
   83674:	0005883a 	mov	r2,zero
   83678:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   8367c:	e0bffb17 	ldw	r2,-20(fp)
   83680:	10001f26 	beq	r2,zero,83700 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   83684:	e0bffb17 	ldw	r2,-20(fp)
   83688:	10800217 	ldw	r2,8(r2)
   8368c:	108000cc 	andi	r2,r2,3
   83690:	10001726 	beq	r2,zero,836f0 <write+0xbc>
   83694:	e0bffb17 	ldw	r2,-20(fp)
   83698:	10800017 	ldw	r2,0(r2)
   8369c:	10800617 	ldw	r2,24(r2)
   836a0:	10001326 	beq	r2,zero,836f0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   836a4:	e0bffb17 	ldw	r2,-20(fp)
   836a8:	10800017 	ldw	r2,0(r2)
   836ac:	10c00617 	ldw	r3,24(r2)
   836b0:	e0bfff17 	ldw	r2,-4(fp)
   836b4:	e13ffb17 	ldw	r4,-20(fp)
   836b8:	e17ffe17 	ldw	r5,-8(fp)
   836bc:	100d883a 	mov	r6,r2
   836c0:	183ee83a 	callr	r3
   836c4:	e0bffc15 	stw	r2,-16(fp)
   836c8:	e0bffc17 	ldw	r2,-16(fp)
   836cc:	1000060e 	bge	r2,zero,836e8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   836d0:	00835e40 	call	835e4 <alt_get_errno>
   836d4:	e0fffc17 	ldw	r3,-16(fp)
   836d8:	00c7c83a 	sub	r3,zero,r3
   836dc:	10c00015 	stw	r3,0(r2)
        return -1;
   836e0:	00bfffc4 	movi	r2,-1
   836e4:	00000a06 	br	83710 <write+0xdc>
      }
      return rval;
   836e8:	e0bffc17 	ldw	r2,-16(fp)
   836ec:	00000806 	br	83710 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
   836f0:	00835e40 	call	835e4 <alt_get_errno>
   836f4:	00c00344 	movi	r3,13
   836f8:	10c00015 	stw	r3,0(r2)
   836fc:	00000306 	br	8370c <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   83700:	00835e40 	call	835e4 <alt_get_errno>
   83704:	00c01444 	movi	r3,81
   83708:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   8370c:	00bfffc4 	movi	r2,-1
}
   83710:	e037883a 	mov	sp,fp
   83714:	dfc00117 	ldw	ra,4(sp)
   83718:	df000017 	ldw	fp,0(sp)
   8371c:	dec00204 	addi	sp,sp,8
   83720:	f800283a 	ret

00083724 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   83724:	defffd04 	addi	sp,sp,-12
   83728:	dfc00215 	stw	ra,8(sp)
   8372c:	df000115 	stw	fp,4(sp)
   83730:	df000104 	addi	fp,sp,4
   83734:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   83738:	e13fff17 	ldw	r4,-4(fp)
   8373c:	01400034 	movhi	r5,0
   83740:	29469c04 	addi	r5,r5,6768
   83744:	00844f80 	call	844f8 <alt_dev_llist_insert>
}
   83748:	e037883a 	mov	sp,fp
   8374c:	dfc00117 	ldw	ra,4(sp)
   83750:	df000017 	ldw	fp,0(sp)
   83754:	dec00204 	addi	sp,sp,8
   83758:	f800283a 	ret

0008375c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   8375c:	defffd04 	addi	sp,sp,-12
   83760:	dfc00215 	stw	ra,8(sp)
   83764:	df000115 	stw	fp,4(sp)
   83768:	df000104 	addi	fp,sp,4
   8376c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU0, cpu0);
   83770:	0084ec00 	call	84ec0 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   83774:	00800044 	movi	r2,1
   83778:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   8377c:	e037883a 	mov	sp,fp
   83780:	dfc00117 	ldw	ra,4(sp)
   83784:	df000017 	ldw	fp,0(sp)
   83788:	dec00204 	addi	sp,sp,8
   8378c:	f800283a 	ret

00083790 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   83790:	defffe04 	addi	sp,sp,-8
   83794:	dfc00115 	stw	ra,4(sp)
   83798:	df000015 	stw	fp,0(sp)
   8379c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER0, timer0);
   837a0:	01000334 	movhi	r4,12
   837a4:	21040004 	addi	r4,r4,4096
   837a8:	000b883a 	mov	r5,zero
   837ac:	000d883a 	mov	r6,zero
   837b0:	01c0fa04 	movi	r7,1000
   837b4:	00842c40 	call	842c4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART0, jtag_uart0);
   837b8:	01000034 	movhi	r4,0
   837bc:	21028804 	addi	r4,r4,2592
   837c0:	000b883a 	mov	r5,zero
   837c4:	01800404 	movi	r6,16
   837c8:	00839500 	call	83950 <altera_avalon_jtag_uart_init>
   837cc:	01000034 	movhi	r4,0
   837d0:	21027e04 	addi	r4,r4,2552
   837d4:	00837240 	call	83724 <alt_dev_reg>
}
   837d8:	e037883a 	mov	sp,fp
   837dc:	dfc00117 	ldw	ra,4(sp)
   837e0:	df000017 	ldw	fp,0(sp)
   837e4:	dec00204 	addi	sp,sp,8
   837e8:	f800283a 	ret

000837ec <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   837ec:	defffa04 	addi	sp,sp,-24
   837f0:	dfc00515 	stw	ra,20(sp)
   837f4:	df000415 	stw	fp,16(sp)
   837f8:	df000404 	addi	fp,sp,16
   837fc:	e13ffd15 	stw	r4,-12(fp)
   83800:	e17ffe15 	stw	r5,-8(fp)
   83804:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   83808:	e0bffd17 	ldw	r2,-12(fp)
   8380c:	10800017 	ldw	r2,0(r2)
   83810:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   83814:	e0bffc17 	ldw	r2,-16(fp)
   83818:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   8381c:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   83820:	10800217 	ldw	r2,8(r2)
   83824:	1809883a 	mov	r4,r3
   83828:	e17ffe17 	ldw	r5,-8(fp)
   8382c:	e1bfff17 	ldw	r6,-4(fp)
   83830:	100f883a 	mov	r7,r2
   83834:	0083e140 	call	83e14 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   83838:	e037883a 	mov	sp,fp
   8383c:	dfc00117 	ldw	ra,4(sp)
   83840:	df000017 	ldw	fp,0(sp)
   83844:	dec00204 	addi	sp,sp,8
   83848:	f800283a 	ret

0008384c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   8384c:	defffa04 	addi	sp,sp,-24
   83850:	dfc00515 	stw	ra,20(sp)
   83854:	df000415 	stw	fp,16(sp)
   83858:	df000404 	addi	fp,sp,16
   8385c:	e13ffd15 	stw	r4,-12(fp)
   83860:	e17ffe15 	stw	r5,-8(fp)
   83864:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   83868:	e0bffd17 	ldw	r2,-12(fp)
   8386c:	10800017 	ldw	r2,0(r2)
   83870:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   83874:	e0bffc17 	ldw	r2,-16(fp)
   83878:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   8387c:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   83880:	10800217 	ldw	r2,8(r2)
   83884:	1809883a 	mov	r4,r3
   83888:	e17ffe17 	ldw	r5,-8(fp)
   8388c:	e1bfff17 	ldw	r6,-4(fp)
   83890:	100f883a 	mov	r7,r2
   83894:	008402c0 	call	8402c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   83898:	e037883a 	mov	sp,fp
   8389c:	dfc00117 	ldw	ra,4(sp)
   838a0:	df000017 	ldw	fp,0(sp)
   838a4:	dec00204 	addi	sp,sp,8
   838a8:	f800283a 	ret

000838ac <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   838ac:	defffc04 	addi	sp,sp,-16
   838b0:	dfc00315 	stw	ra,12(sp)
   838b4:	df000215 	stw	fp,8(sp)
   838b8:	df000204 	addi	fp,sp,8
   838bc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   838c0:	e0bfff17 	ldw	r2,-4(fp)
   838c4:	10800017 	ldw	r2,0(r2)
   838c8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   838cc:	e0bffe17 	ldw	r2,-8(fp)
   838d0:	10c00a04 	addi	r3,r2,40
   838d4:	e0bfff17 	ldw	r2,-4(fp)
   838d8:	10800217 	ldw	r2,8(r2)
   838dc:	1809883a 	mov	r4,r3
   838e0:	100b883a 	mov	r5,r2
   838e4:	0083cb80 	call	83cb8 <altera_avalon_jtag_uart_close>
}
   838e8:	e037883a 	mov	sp,fp
   838ec:	dfc00117 	ldw	ra,4(sp)
   838f0:	df000017 	ldw	fp,0(sp)
   838f4:	dec00204 	addi	sp,sp,8
   838f8:	f800283a 	ret

000838fc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   838fc:	defffa04 	addi	sp,sp,-24
   83900:	dfc00515 	stw	ra,20(sp)
   83904:	df000415 	stw	fp,16(sp)
   83908:	df000404 	addi	fp,sp,16
   8390c:	e13ffd15 	stw	r4,-12(fp)
   83910:	e17ffe15 	stw	r5,-8(fp)
   83914:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   83918:	e0bffd17 	ldw	r2,-12(fp)
   8391c:	10800017 	ldw	r2,0(r2)
   83920:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   83924:	e0bffc17 	ldw	r2,-16(fp)
   83928:	10800a04 	addi	r2,r2,40
   8392c:	1009883a 	mov	r4,r2
   83930:	e17ffe17 	ldw	r5,-8(fp)
   83934:	e1bfff17 	ldw	r6,-4(fp)
   83938:	0083d200 	call	83d20 <altera_avalon_jtag_uart_ioctl>
}
   8393c:	e037883a 	mov	sp,fp
   83940:	dfc00117 	ldw	ra,4(sp)
   83944:	df000017 	ldw	fp,0(sp)
   83948:	dec00204 	addi	sp,sp,8
   8394c:	f800283a 	ret

00083950 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   83950:	defffa04 	addi	sp,sp,-24
   83954:	dfc00515 	stw	ra,20(sp)
   83958:	df000415 	stw	fp,16(sp)
   8395c:	df000404 	addi	fp,sp,16
   83960:	e13ffd15 	stw	r4,-12(fp)
   83964:	e17ffe15 	stw	r5,-8(fp)
   83968:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8396c:	e0bffd17 	ldw	r2,-12(fp)
   83970:	00c00044 	movi	r3,1
   83974:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   83978:	e0bffd17 	ldw	r2,-12(fp)
   8397c:	10800017 	ldw	r2,0(r2)
   83980:	10800104 	addi	r2,r2,4
   83984:	e0fffd17 	ldw	r3,-12(fp)
   83988:	18c00817 	ldw	r3,32(r3)
   8398c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   83990:	e0fffe17 	ldw	r3,-8(fp)
   83994:	e0bfff17 	ldw	r2,-4(fp)
   83998:	d8000015 	stw	zero,0(sp)
   8399c:	1809883a 	mov	r4,r3
   839a0:	100b883a 	mov	r5,r2
   839a4:	01800234 	movhi	r6,8
   839a8:	318e8404 	addi	r6,r6,14864
   839ac:	e1fffd17 	ldw	r7,-12(fp)
   839b0:	008466c0 	call	8466c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   839b4:	e0bffd17 	ldw	r2,-12(fp)
   839b8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   839bc:	e0bffd17 	ldw	r2,-12(fp)
   839c0:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   839c4:	00800034 	movhi	r2,0
   839c8:	1086ac04 	addi	r2,r2,6832
   839cc:	10800017 	ldw	r2,0(r2)
   839d0:	1809883a 	mov	r4,r3
   839d4:	100b883a 	mov	r5,r2
   839d8:	01800234 	movhi	r6,8
   839dc:	318f0504 	addi	r6,r6,15380
   839e0:	e1fffd17 	ldw	r7,-12(fp)
   839e4:	008434c0 	call	8434c <alt_alarm_start>
   839e8:	1000040e 	bge	r2,zero,839fc <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   839ec:	e0bffd17 	ldw	r2,-12(fp)
   839f0:	00e00034 	movhi	r3,32768
   839f4:	18ffffc4 	addi	r3,r3,-1
   839f8:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   839fc:	e037883a 	mov	sp,fp
   83a00:	dfc00117 	ldw	ra,4(sp)
   83a04:	df000017 	ldw	fp,0(sp)
   83a08:	dec00204 	addi	sp,sp,8
   83a0c:	f800283a 	ret

00083a10 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   83a10:	defff804 	addi	sp,sp,-32
   83a14:	df000715 	stw	fp,28(sp)
   83a18:	df000704 	addi	fp,sp,28
   83a1c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   83a20:	e0bfff17 	ldw	r2,-4(fp)
   83a24:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   83a28:	e0bffb17 	ldw	r2,-20(fp)
   83a2c:	10800017 	ldw	r2,0(r2)
   83a30:	e0bffc15 	stw	r2,-16(fp)
   83a34:	00000106 	br	83a3c <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
   83a38:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   83a3c:	e0bffc17 	ldw	r2,-16(fp)
   83a40:	10800104 	addi	r2,r2,4
   83a44:	10800037 	ldwio	r2,0(r2)
   83a48:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   83a4c:	e0bffd17 	ldw	r2,-12(fp)
   83a50:	1080c00c 	andi	r2,r2,768
   83a54:	10006a26 	beq	r2,zero,83c00 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   83a58:	e0bffd17 	ldw	r2,-12(fp)
   83a5c:	1080400c 	andi	r2,r2,256
   83a60:	10003326 	beq	r2,zero,83b30 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   83a64:	00800074 	movhi	r2,1
   83a68:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   83a6c:	e0bffb17 	ldw	r2,-20(fp)
   83a70:	10800a17 	ldw	r2,40(r2)
   83a74:	10800044 	addi	r2,r2,1
   83a78:	1081ffcc 	andi	r2,r2,2047
   83a7c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   83a80:	e0bffb17 	ldw	r2,-20(fp)
   83a84:	10c00b17 	ldw	r3,44(r2)
   83a88:	e0bffe17 	ldw	r2,-8(fp)
   83a8c:	18801426 	beq	r3,r2,83ae0 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   83a90:	e0bffc17 	ldw	r2,-16(fp)
   83a94:	10800037 	ldwio	r2,0(r2)
   83a98:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   83a9c:	e0bff917 	ldw	r2,-28(fp)
   83aa0:	10a0000c 	andi	r2,r2,32768
   83aa4:	10001026 	beq	r2,zero,83ae8 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   83aa8:	e0bffb17 	ldw	r2,-20(fp)
   83aac:	10800a17 	ldw	r2,40(r2)
   83ab0:	e0fff917 	ldw	r3,-28(fp)
   83ab4:	e13ffb17 	ldw	r4,-20(fp)
   83ab8:	2085883a 	add	r2,r4,r2
   83abc:	10800e04 	addi	r2,r2,56
   83ac0:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   83ac4:	e0bffb17 	ldw	r2,-20(fp)
   83ac8:	10800a17 	ldw	r2,40(r2)
   83acc:	10800044 	addi	r2,r2,1
   83ad0:	10c1ffcc 	andi	r3,r2,2047
   83ad4:	e0bffb17 	ldw	r2,-20(fp)
   83ad8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   83adc:	003fe306 	br	83a6c <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   83ae0:	0001883a 	nop
   83ae4:	00000106 	br	83aec <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   83ae8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   83aec:	e0bff917 	ldw	r2,-28(fp)
   83af0:	10bfffec 	andhi	r2,r2,65535
   83af4:	10000e26 	beq	r2,zero,83b30 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   83af8:	e0bffb17 	ldw	r2,-20(fp)
   83afc:	10c00817 	ldw	r3,32(r2)
   83b00:	00bfff84 	movi	r2,-2
   83b04:	1886703a 	and	r3,r3,r2
   83b08:	e0bffb17 	ldw	r2,-20(fp)
   83b0c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   83b10:	e0bffc17 	ldw	r2,-16(fp)
   83b14:	10800104 	addi	r2,r2,4
   83b18:	e0fffb17 	ldw	r3,-20(fp)
   83b1c:	18c00817 	ldw	r3,32(r3)
   83b20:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   83b24:	e0bffc17 	ldw	r2,-16(fp)
   83b28:	10800104 	addi	r2,r2,4
   83b2c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   83b30:	e0bffd17 	ldw	r2,-12(fp)
   83b34:	1080800c 	andi	r2,r2,512
   83b38:	103fbf26 	beq	r2,zero,83a38 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   83b3c:	e0bffd17 	ldw	r2,-12(fp)
   83b40:	1004d43a 	srli	r2,r2,16
   83b44:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   83b48:	00001406 	br	83b9c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   83b4c:	e0bffc17 	ldw	r2,-16(fp)
   83b50:	e0fffb17 	ldw	r3,-20(fp)
   83b54:	18c00d17 	ldw	r3,52(r3)
   83b58:	e13ffb17 	ldw	r4,-20(fp)
   83b5c:	20c7883a 	add	r3,r4,r3
   83b60:	18c20e04 	addi	r3,r3,2104
   83b64:	18c00003 	ldbu	r3,0(r3)
   83b68:	18c03fcc 	andi	r3,r3,255
   83b6c:	18c0201c 	xori	r3,r3,128
   83b70:	18ffe004 	addi	r3,r3,-128
   83b74:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   83b78:	e0bffb17 	ldw	r2,-20(fp)
   83b7c:	10800d17 	ldw	r2,52(r2)
   83b80:	10800044 	addi	r2,r2,1
   83b84:	10c1ffcc 	andi	r3,r2,2047
   83b88:	e0bffb17 	ldw	r2,-20(fp)
   83b8c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   83b90:	e0bffa17 	ldw	r2,-24(fp)
   83b94:	10bfffc4 	addi	r2,r2,-1
   83b98:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   83b9c:	e0bffa17 	ldw	r2,-24(fp)
   83ba0:	10000526 	beq	r2,zero,83bb8 <altera_avalon_jtag_uart_irq+0x1a8>
   83ba4:	e0bffb17 	ldw	r2,-20(fp)
   83ba8:	10c00d17 	ldw	r3,52(r2)
   83bac:	e0bffb17 	ldw	r2,-20(fp)
   83bb0:	10800c17 	ldw	r2,48(r2)
   83bb4:	18bfe51e 	bne	r3,r2,83b4c <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   83bb8:	e0bffa17 	ldw	r2,-24(fp)
   83bbc:	103f9e26 	beq	r2,zero,83a38 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   83bc0:	e0bffb17 	ldw	r2,-20(fp)
   83bc4:	10c00817 	ldw	r3,32(r2)
   83bc8:	00bfff44 	movi	r2,-3
   83bcc:	1886703a 	and	r3,r3,r2
   83bd0:	e0bffb17 	ldw	r2,-20(fp)
   83bd4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   83bd8:	e0bffb17 	ldw	r2,-20(fp)
   83bdc:	10800017 	ldw	r2,0(r2)
   83be0:	10800104 	addi	r2,r2,4
   83be4:	e0fffb17 	ldw	r3,-20(fp)
   83be8:	18c00817 	ldw	r3,32(r3)
   83bec:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   83bf0:	e0bffc17 	ldw	r2,-16(fp)
   83bf4:	10800104 	addi	r2,r2,4
   83bf8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   83bfc:	003f8e06 	br	83a38 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   83c00:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   83c04:	e037883a 	mov	sp,fp
   83c08:	df000017 	ldw	fp,0(sp)
   83c0c:	dec00104 	addi	sp,sp,4
   83c10:	f800283a 	ret

00083c14 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   83c14:	defffc04 	addi	sp,sp,-16
   83c18:	df000315 	stw	fp,12(sp)
   83c1c:	df000304 	addi	fp,sp,12
   83c20:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   83c24:	e0bfff17 	ldw	r2,-4(fp)
   83c28:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   83c2c:	e0bffd17 	ldw	r2,-12(fp)
   83c30:	10800017 	ldw	r2,0(r2)
   83c34:	10800104 	addi	r2,r2,4
   83c38:	10800037 	ldwio	r2,0(r2)
   83c3c:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   83c40:	e0bffe17 	ldw	r2,-8(fp)
   83c44:	1081000c 	andi	r2,r2,1024
   83c48:	10000a26 	beq	r2,zero,83c74 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   83c4c:	e0bffd17 	ldw	r2,-12(fp)
   83c50:	10800017 	ldw	r2,0(r2)
   83c54:	10800104 	addi	r2,r2,4
   83c58:	e0fffd17 	ldw	r3,-12(fp)
   83c5c:	18c00817 	ldw	r3,32(r3)
   83c60:	18c10014 	ori	r3,r3,1024
   83c64:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   83c68:	e0bffd17 	ldw	r2,-12(fp)
   83c6c:	10000915 	stw	zero,36(r2)
   83c70:	00000a06 	br	83c9c <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   83c74:	e0bffd17 	ldw	r2,-12(fp)
   83c78:	10800917 	ldw	r2,36(r2)
   83c7c:	00e00034 	movhi	r3,32768
   83c80:	18ffff04 	addi	r3,r3,-4
   83c84:	18800536 	bltu	r3,r2,83c9c <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
   83c88:	e0bffd17 	ldw	r2,-12(fp)
   83c8c:	10800917 	ldw	r2,36(r2)
   83c90:	10c00044 	addi	r3,r2,1
   83c94:	e0bffd17 	ldw	r2,-12(fp)
   83c98:	10c00915 	stw	r3,36(r2)
   83c9c:	00800034 	movhi	r2,0
   83ca0:	1086ac04 	addi	r2,r2,6832
   83ca4:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   83ca8:	e037883a 	mov	sp,fp
   83cac:	df000017 	ldw	fp,0(sp)
   83cb0:	dec00104 	addi	sp,sp,4
   83cb4:	f800283a 	ret

00083cb8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   83cb8:	defffd04 	addi	sp,sp,-12
   83cbc:	df000215 	stw	fp,8(sp)
   83cc0:	df000204 	addi	fp,sp,8
   83cc4:	e13ffe15 	stw	r4,-8(fp)
   83cc8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   83ccc:	00000506 	br	83ce4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   83cd0:	e0bfff17 	ldw	r2,-4(fp)
   83cd4:	1090000c 	andi	r2,r2,16384
   83cd8:	10000226 	beq	r2,zero,83ce4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   83cdc:	00bffd44 	movi	r2,-11
   83ce0:	00000b06 	br	83d10 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   83ce4:	e0bffe17 	ldw	r2,-8(fp)
   83ce8:	10c00d17 	ldw	r3,52(r2)
   83cec:	e0bffe17 	ldw	r2,-8(fp)
   83cf0:	10800c17 	ldw	r2,48(r2)
   83cf4:	18800526 	beq	r3,r2,83d0c <altera_avalon_jtag_uart_close+0x54>
   83cf8:	e0bffe17 	ldw	r2,-8(fp)
   83cfc:	10c00917 	ldw	r3,36(r2)
   83d00:	e0bffe17 	ldw	r2,-8(fp)
   83d04:	10800117 	ldw	r2,4(r2)
   83d08:	18bff136 	bltu	r3,r2,83cd0 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   83d0c:	0005883a 	mov	r2,zero
}
   83d10:	e037883a 	mov	sp,fp
   83d14:	df000017 	ldw	fp,0(sp)
   83d18:	dec00104 	addi	sp,sp,4
   83d1c:	f800283a 	ret

00083d20 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   83d20:	defffa04 	addi	sp,sp,-24
   83d24:	df000515 	stw	fp,20(sp)
   83d28:	df000504 	addi	fp,sp,20
   83d2c:	e13ffd15 	stw	r4,-12(fp)
   83d30:	e17ffe15 	stw	r5,-8(fp)
   83d34:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   83d38:	00bff9c4 	movi	r2,-25
   83d3c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   83d40:	e0bffe17 	ldw	r2,-8(fp)
   83d44:	10da8060 	cmpeqi	r3,r2,27137
   83d48:	1800031e 	bne	r3,zero,83d58 <altera_avalon_jtag_uart_ioctl+0x38>
   83d4c:	109a80a0 	cmpeqi	r2,r2,27138
   83d50:	1000181e 	bne	r2,zero,83db4 <altera_avalon_jtag_uart_ioctl+0x94>
   83d54:	00002606 	br	83df0 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   83d58:	e0bffd17 	ldw	r2,-12(fp)
   83d5c:	10c00117 	ldw	r3,4(r2)
   83d60:	00a00034 	movhi	r2,32768
   83d64:	10bfffc4 	addi	r2,r2,-1
   83d68:	18802226 	beq	r3,r2,83df4 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
   83d6c:	e0bfff17 	ldw	r2,-4(fp)
   83d70:	10800017 	ldw	r2,0(r2)
   83d74:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   83d78:	e0bffc17 	ldw	r2,-16(fp)
   83d7c:	10800090 	cmplti	r2,r2,2
   83d80:	1000061e 	bne	r2,zero,83d9c <altera_avalon_jtag_uart_ioctl+0x7c>
   83d84:	e0fffc17 	ldw	r3,-16(fp)
   83d88:	00a00034 	movhi	r2,32768
   83d8c:	10bfffc4 	addi	r2,r2,-1
   83d90:	18800226 	beq	r3,r2,83d9c <altera_avalon_jtag_uart_ioctl+0x7c>
   83d94:	e0bffc17 	ldw	r2,-16(fp)
   83d98:	00000206 	br	83da4 <altera_avalon_jtag_uart_ioctl+0x84>
   83d9c:	00a00034 	movhi	r2,32768
   83da0:	10bfff84 	addi	r2,r2,-2
   83da4:	e0fffd17 	ldw	r3,-12(fp)
   83da8:	18800115 	stw	r2,4(r3)
      rc = 0;
   83dac:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   83db0:	00001006 	br	83df4 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   83db4:	e0bffd17 	ldw	r2,-12(fp)
   83db8:	10c00117 	ldw	r3,4(r2)
   83dbc:	00a00034 	movhi	r2,32768
   83dc0:	10bfffc4 	addi	r2,r2,-1
   83dc4:	18800d26 	beq	r3,r2,83dfc <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   83dc8:	e0bffd17 	ldw	r2,-12(fp)
   83dcc:	10c00917 	ldw	r3,36(r2)
   83dd0:	e0bffd17 	ldw	r2,-12(fp)
   83dd4:	10800117 	ldw	r2,4(r2)
   83dd8:	1885803a 	cmpltu	r2,r3,r2
   83ddc:	10c03fcc 	andi	r3,r2,255
   83de0:	e0bfff17 	ldw	r2,-4(fp)
   83de4:	10c00015 	stw	r3,0(r2)
      rc = 0;
   83de8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   83dec:	00000306 	br	83dfc <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
   83df0:	00000306 	br	83e00 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   83df4:	0001883a 	nop
   83df8:	00000106 	br	83e00 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   83dfc:	0001883a 	nop

  default:
    break;
  }

  return rc;
   83e00:	e0bffb17 	ldw	r2,-20(fp)
}
   83e04:	e037883a 	mov	sp,fp
   83e08:	df000017 	ldw	fp,0(sp)
   83e0c:	dec00104 	addi	sp,sp,4
   83e10:	f800283a 	ret

00083e14 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   83e14:	defff304 	addi	sp,sp,-52
   83e18:	dfc00c15 	stw	ra,48(sp)
   83e1c:	df000b15 	stw	fp,44(sp)
   83e20:	df000b04 	addi	fp,sp,44
   83e24:	e13ffc15 	stw	r4,-16(fp)
   83e28:	e17ffd15 	stw	r5,-12(fp)
   83e2c:	e1bffe15 	stw	r6,-8(fp)
   83e30:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   83e34:	e0bffd17 	ldw	r2,-12(fp)
   83e38:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   83e3c:	00004706 	br	83f5c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   83e40:	e0bffc17 	ldw	r2,-16(fp)
   83e44:	10800a17 	ldw	r2,40(r2)
   83e48:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   83e4c:	e0bffc17 	ldw	r2,-16(fp)
   83e50:	10800b17 	ldw	r2,44(r2)
   83e54:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   83e58:	e0fff717 	ldw	r3,-36(fp)
   83e5c:	e0bff817 	ldw	r2,-32(fp)
   83e60:	18800536 	bltu	r3,r2,83e78 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   83e64:	e0fff717 	ldw	r3,-36(fp)
   83e68:	e0bff817 	ldw	r2,-32(fp)
   83e6c:	1885c83a 	sub	r2,r3,r2
   83e70:	e0bff615 	stw	r2,-40(fp)
   83e74:	00000406 	br	83e88 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   83e78:	00c20004 	movi	r3,2048
   83e7c:	e0bff817 	ldw	r2,-32(fp)
   83e80:	1885c83a 	sub	r2,r3,r2
   83e84:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   83e88:	e0bff617 	ldw	r2,-40(fp)
   83e8c:	10001e26 	beq	r2,zero,83f08 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   83e90:	e0fffe17 	ldw	r3,-8(fp)
   83e94:	e0bff617 	ldw	r2,-40(fp)
   83e98:	1880022e 	bgeu	r3,r2,83ea4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   83e9c:	e0bffe17 	ldw	r2,-8(fp)
   83ea0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   83ea4:	e0bff817 	ldw	r2,-32(fp)
   83ea8:	10800e04 	addi	r2,r2,56
   83eac:	e0fffc17 	ldw	r3,-16(fp)
   83eb0:	1885883a 	add	r2,r3,r2
   83eb4:	e13ff517 	ldw	r4,-44(fp)
   83eb8:	100b883a 	mov	r5,r2
   83ebc:	e1bff617 	ldw	r6,-40(fp)
   83ec0:	00810ac0 	call	810ac <memcpy>
      ptr   += n;
   83ec4:	e0fff517 	ldw	r3,-44(fp)
   83ec8:	e0bff617 	ldw	r2,-40(fp)
   83ecc:	1885883a 	add	r2,r3,r2
   83ed0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   83ed4:	e0fffe17 	ldw	r3,-8(fp)
   83ed8:	e0bff617 	ldw	r2,-40(fp)
   83edc:	1885c83a 	sub	r2,r3,r2
   83ee0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   83ee4:	e0fff817 	ldw	r3,-32(fp)
   83ee8:	e0bff617 	ldw	r2,-40(fp)
   83eec:	1885883a 	add	r2,r3,r2
   83ef0:	10c1ffcc 	andi	r3,r2,2047
   83ef4:	e0bffc17 	ldw	r2,-16(fp)
   83ef8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   83efc:	e0bffe17 	ldw	r2,-8(fp)
   83f00:	00bfcf16 	blt	zero,r2,83e40 <altera_avalon_jtag_uart_read+0x2c>
   83f04:	00000106 	br	83f0c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   83f08:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   83f0c:	e0fff517 	ldw	r3,-44(fp)
   83f10:	e0bffd17 	ldw	r2,-12(fp)
   83f14:	1880141e 	bne	r3,r2,83f68 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   83f18:	e0bfff17 	ldw	r2,-4(fp)
   83f1c:	1090000c 	andi	r2,r2,16384
   83f20:	1000131e 	bne	r2,zero,83f70 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   83f24:	0001883a 	nop
   83f28:	e0bffc17 	ldw	r2,-16(fp)
   83f2c:	10c00a17 	ldw	r3,40(r2)
   83f30:	e0bff717 	ldw	r2,-36(fp)
   83f34:	1880051e 	bne	r3,r2,83f4c <altera_avalon_jtag_uart_read+0x138>
   83f38:	e0bffc17 	ldw	r2,-16(fp)
   83f3c:	10c00917 	ldw	r3,36(r2)
   83f40:	e0bffc17 	ldw	r2,-16(fp)
   83f44:	10800117 	ldw	r2,4(r2)
   83f48:	18bff736 	bltu	r3,r2,83f28 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   83f4c:	e0bffc17 	ldw	r2,-16(fp)
   83f50:	10c00a17 	ldw	r3,40(r2)
   83f54:	e0bff717 	ldw	r2,-36(fp)
   83f58:	18800726 	beq	r3,r2,83f78 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   83f5c:	e0bffe17 	ldw	r2,-8(fp)
   83f60:	00bfb716 	blt	zero,r2,83e40 <altera_avalon_jtag_uart_read+0x2c>
   83f64:	00000506 	br	83f7c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   83f68:	0001883a 	nop
   83f6c:	00000306 	br	83f7c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   83f70:	0001883a 	nop
   83f74:	00000106 	br	83f7c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   83f78:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   83f7c:	e0fff517 	ldw	r3,-44(fp)
   83f80:	e0bffd17 	ldw	r2,-12(fp)
   83f84:	18801726 	beq	r3,r2,83fe4 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   83f88:	0005303a 	rdctl	r2,status
   83f8c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   83f90:	e0fffa17 	ldw	r3,-24(fp)
   83f94:	00bfff84 	movi	r2,-2
   83f98:	1884703a 	and	r2,r3,r2
   83f9c:	1001703a 	wrctl	status,r2
  
  return context;
   83fa0:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   83fa4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   83fa8:	e0bffc17 	ldw	r2,-16(fp)
   83fac:	10800817 	ldw	r2,32(r2)
   83fb0:	10c00054 	ori	r3,r2,1
   83fb4:	e0bffc17 	ldw	r2,-16(fp)
   83fb8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   83fbc:	e0bffc17 	ldw	r2,-16(fp)
   83fc0:	10800017 	ldw	r2,0(r2)
   83fc4:	10800104 	addi	r2,r2,4
   83fc8:	e0fffc17 	ldw	r3,-16(fp)
   83fcc:	18c00817 	ldw	r3,32(r3)
   83fd0:	10c00035 	stwio	r3,0(r2)
   83fd4:	e0bff917 	ldw	r2,-28(fp)
   83fd8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   83fdc:	e0bffb17 	ldw	r2,-20(fp)
   83fe0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   83fe4:	e0fff517 	ldw	r3,-44(fp)
   83fe8:	e0bffd17 	ldw	r2,-12(fp)
   83fec:	18800426 	beq	r3,r2,84000 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
   83ff0:	e0fff517 	ldw	r3,-44(fp)
   83ff4:	e0bffd17 	ldw	r2,-12(fp)
   83ff8:	1885c83a 	sub	r2,r3,r2
   83ffc:	00000606 	br	84018 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
   84000:	e0bfff17 	ldw	r2,-4(fp)
   84004:	1090000c 	andi	r2,r2,16384
   84008:	10000226 	beq	r2,zero,84014 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
   8400c:	00bffd44 	movi	r2,-11
   84010:	00000106 	br	84018 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
   84014:	00bffec4 	movi	r2,-5
}
   84018:	e037883a 	mov	sp,fp
   8401c:	dfc00117 	ldw	ra,4(sp)
   84020:	df000017 	ldw	fp,0(sp)
   84024:	dec00204 	addi	sp,sp,8
   84028:	f800283a 	ret

0008402c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   8402c:	defff304 	addi	sp,sp,-52
   84030:	dfc00c15 	stw	ra,48(sp)
   84034:	df000b15 	stw	fp,44(sp)
   84038:	df000b04 	addi	fp,sp,44
   8403c:	e13ffc15 	stw	r4,-16(fp)
   84040:	e17ffd15 	stw	r5,-12(fp)
   84044:	e1bffe15 	stw	r6,-8(fp)
   84048:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   8404c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   84050:	e0bffd17 	ldw	r2,-12(fp)
   84054:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   84058:	00003706 	br	84138 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   8405c:	e0bffc17 	ldw	r2,-16(fp)
   84060:	10800c17 	ldw	r2,48(r2)
   84064:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   84068:	e0bffc17 	ldw	r2,-16(fp)
   8406c:	10800d17 	ldw	r2,52(r2)
   84070:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   84074:	e0fff817 	ldw	r3,-32(fp)
   84078:	e0bff517 	ldw	r2,-44(fp)
   8407c:	1880062e 	bgeu	r3,r2,84098 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   84080:	e0fff517 	ldw	r3,-44(fp)
   84084:	e0bff817 	ldw	r2,-32(fp)
   84088:	1885c83a 	sub	r2,r3,r2
   8408c:	10bfffc4 	addi	r2,r2,-1
   84090:	e0bff615 	stw	r2,-40(fp)
   84094:	00000b06 	br	840c4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   84098:	e0bff517 	ldw	r2,-44(fp)
   8409c:	10000526 	beq	r2,zero,840b4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   840a0:	00c20004 	movi	r3,2048
   840a4:	e0bff817 	ldw	r2,-32(fp)
   840a8:	1885c83a 	sub	r2,r3,r2
   840ac:	e0bff615 	stw	r2,-40(fp)
   840b0:	00000406 	br	840c4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   840b4:	00c1ffc4 	movi	r3,2047
   840b8:	e0bff817 	ldw	r2,-32(fp)
   840bc:	1885c83a 	sub	r2,r3,r2
   840c0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   840c4:	e0bff617 	ldw	r2,-40(fp)
   840c8:	10001e26 	beq	r2,zero,84144 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   840cc:	e0fffe17 	ldw	r3,-8(fp)
   840d0:	e0bff617 	ldw	r2,-40(fp)
   840d4:	1880022e 	bgeu	r3,r2,840e0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   840d8:	e0bffe17 	ldw	r2,-8(fp)
   840dc:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   840e0:	e0bff817 	ldw	r2,-32(fp)
   840e4:	10820e04 	addi	r2,r2,2104
   840e8:	e0fffc17 	ldw	r3,-16(fp)
   840ec:	1885883a 	add	r2,r3,r2
   840f0:	1009883a 	mov	r4,r2
   840f4:	e17ffd17 	ldw	r5,-12(fp)
   840f8:	e1bff617 	ldw	r6,-40(fp)
   840fc:	00810ac0 	call	810ac <memcpy>
      ptr   += n;
   84100:	e0fffd17 	ldw	r3,-12(fp)
   84104:	e0bff617 	ldw	r2,-40(fp)
   84108:	1885883a 	add	r2,r3,r2
   8410c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   84110:	e0fffe17 	ldw	r3,-8(fp)
   84114:	e0bff617 	ldw	r2,-40(fp)
   84118:	1885c83a 	sub	r2,r3,r2
   8411c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   84120:	e0fff817 	ldw	r3,-32(fp)
   84124:	e0bff617 	ldw	r2,-40(fp)
   84128:	1885883a 	add	r2,r3,r2
   8412c:	10c1ffcc 	andi	r3,r2,2047
   84130:	e0bffc17 	ldw	r2,-16(fp)
   84134:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   84138:	e0bffe17 	ldw	r2,-8(fp)
   8413c:	00bfc716 	blt	zero,r2,8405c <altera_avalon_jtag_uart_write+0x30>
   84140:	00000106 	br	84148 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   84144:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   84148:	0005303a 	rdctl	r2,status
   8414c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   84150:	e0fffa17 	ldw	r3,-24(fp)
   84154:	00bfff84 	movi	r2,-2
   84158:	1884703a 	and	r2,r3,r2
   8415c:	1001703a 	wrctl	status,r2
  
  return context;
   84160:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   84164:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   84168:	e0bffc17 	ldw	r2,-16(fp)
   8416c:	10800817 	ldw	r2,32(r2)
   84170:	10c00094 	ori	r3,r2,2
   84174:	e0bffc17 	ldw	r2,-16(fp)
   84178:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8417c:	e0bffc17 	ldw	r2,-16(fp)
   84180:	10800017 	ldw	r2,0(r2)
   84184:	10800104 	addi	r2,r2,4
   84188:	e0fffc17 	ldw	r3,-16(fp)
   8418c:	18c00817 	ldw	r3,32(r3)
   84190:	10c00035 	stwio	r3,0(r2)
   84194:	e0bff917 	ldw	r2,-28(fp)
   84198:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8419c:	e0bffb17 	ldw	r2,-20(fp)
   841a0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   841a4:	e0bffe17 	ldw	r2,-8(fp)
   841a8:	0080110e 	bge	zero,r2,841f0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   841ac:	e0bfff17 	ldw	r2,-4(fp)
   841b0:	1090000c 	andi	r2,r2,16384
   841b4:	1000111e 	bne	r2,zero,841fc <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   841b8:	0001883a 	nop
   841bc:	e0bffc17 	ldw	r2,-16(fp)
   841c0:	10c00d17 	ldw	r3,52(r2)
   841c4:	e0bff517 	ldw	r2,-44(fp)
   841c8:	1880051e 	bne	r3,r2,841e0 <altera_avalon_jtag_uart_write+0x1b4>
   841cc:	e0bffc17 	ldw	r2,-16(fp)
   841d0:	10c00917 	ldw	r3,36(r2)
   841d4:	e0bffc17 	ldw	r2,-16(fp)
   841d8:	10800117 	ldw	r2,4(r2)
   841dc:	18bff736 	bltu	r3,r2,841bc <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   841e0:	e0bffc17 	ldw	r2,-16(fp)
   841e4:	10c00d17 	ldw	r3,52(r2)
   841e8:	e0bff517 	ldw	r2,-44(fp)
   841ec:	18800526 	beq	r3,r2,84204 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   841f0:	e0bffe17 	ldw	r2,-8(fp)
   841f4:	00bfd016 	blt	zero,r2,84138 <altera_avalon_jtag_uart_write+0x10c>
   841f8:	00000306 	br	84208 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   841fc:	0001883a 	nop
   84200:	00000106 	br	84208 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
   84204:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   84208:	e0fffd17 	ldw	r3,-12(fp)
   8420c:	e0bff717 	ldw	r2,-36(fp)
   84210:	18800426 	beq	r3,r2,84224 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   84214:	e0fffd17 	ldw	r3,-12(fp)
   84218:	e0bff717 	ldw	r2,-36(fp)
   8421c:	1885c83a 	sub	r2,r3,r2
   84220:	00000606 	br	8423c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   84224:	e0bfff17 	ldw	r2,-4(fp)
   84228:	1090000c 	andi	r2,r2,16384
   8422c:	10000226 	beq	r2,zero,84238 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   84230:	00bffd44 	movi	r2,-11
   84234:	00000106 	br	8423c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   84238:	00bffec4 	movi	r2,-5
}
   8423c:	e037883a 	mov	sp,fp
   84240:	dfc00117 	ldw	ra,4(sp)
   84244:	df000017 	ldw	fp,0(sp)
   84248:	dec00204 	addi	sp,sp,8
   8424c:	f800283a 	ret

00084250 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   84250:	defffa04 	addi	sp,sp,-24
   84254:	dfc00515 	stw	ra,20(sp)
   84258:	df000415 	stw	fp,16(sp)
   8425c:	df000404 	addi	fp,sp,16
   84260:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   84264:	0007883a 	mov	r3,zero
   84268:	e0bfff17 	ldw	r2,-4(fp)
   8426c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   84270:	e0bfff17 	ldw	r2,-4(fp)
   84274:	10800104 	addi	r2,r2,4
   84278:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8427c:	0005303a 	rdctl	r2,status
   84280:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   84284:	e0fffd17 	ldw	r3,-12(fp)
   84288:	00bfff84 	movi	r2,-2
   8428c:	1884703a 	and	r2,r3,r2
   84290:	1001703a 	wrctl	status,r2
  
  return context;
   84294:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   84298:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   8429c:	0084dbc0 	call	84dbc <alt_tick>
   842a0:	e0bffc17 	ldw	r2,-16(fp)
   842a4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   842a8:	e0bffe17 	ldw	r2,-8(fp)
   842ac:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   842b0:	e037883a 	mov	sp,fp
   842b4:	dfc00117 	ldw	ra,4(sp)
   842b8:	df000017 	ldw	fp,0(sp)
   842bc:	dec00204 	addi	sp,sp,8
   842c0:	f800283a 	ret

000842c4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   842c4:	defff804 	addi	sp,sp,-32
   842c8:	dfc00715 	stw	ra,28(sp)
   842cc:	df000615 	stw	fp,24(sp)
   842d0:	df000604 	addi	fp,sp,24
   842d4:	e13ffc15 	stw	r4,-16(fp)
   842d8:	e17ffd15 	stw	r5,-12(fp)
   842dc:	e1bffe15 	stw	r6,-8(fp)
   842e0:	e1ffff15 	stw	r7,-4(fp)
   842e4:	e0bfff17 	ldw	r2,-4(fp)
   842e8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   842ec:	00800034 	movhi	r2,0
   842f0:	1086ac04 	addi	r2,r2,6832
   842f4:	10800017 	ldw	r2,0(r2)
   842f8:	1000041e 	bne	r2,zero,8430c <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   842fc:	00800034 	movhi	r2,0
   84300:	1086ac04 	addi	r2,r2,6832
   84304:	e0fffb17 	ldw	r3,-20(fp)
   84308:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   8430c:	e0bffc17 	ldw	r2,-16(fp)
   84310:	10800104 	addi	r2,r2,4
   84314:	00c001c4 	movi	r3,7
   84318:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   8431c:	d8000015 	stw	zero,0(sp)
   84320:	e13ffd17 	ldw	r4,-12(fp)
   84324:	e17ffe17 	ldw	r5,-8(fp)
   84328:	01800234 	movhi	r6,8
   8432c:	31909404 	addi	r6,r6,16976
   84330:	e1fffc17 	ldw	r7,-16(fp)
   84334:	008466c0 	call	8466c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   84338:	e037883a 	mov	sp,fp
   8433c:	dfc00117 	ldw	ra,4(sp)
   84340:	df000017 	ldw	fp,0(sp)
   84344:	dec00204 	addi	sp,sp,8
   84348:	f800283a 	ret

0008434c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   8434c:	defff504 	addi	sp,sp,-44
   84350:	df000a15 	stw	fp,40(sp)
   84354:	df000a04 	addi	fp,sp,40
   84358:	e13ffc15 	stw	r4,-16(fp)
   8435c:	e17ffd15 	stw	r5,-12(fp)
   84360:	e1bffe15 	stw	r6,-8(fp)
   84364:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   84368:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   8436c:	00800034 	movhi	r2,0
   84370:	1086ac04 	addi	r2,r2,6832
   84374:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   84378:	10003f26 	beq	r2,zero,84478 <alt_alarm_start+0x12c>
  {
    if (alarm)
   8437c:	e0bffc17 	ldw	r2,-16(fp)
   84380:	10003b26 	beq	r2,zero,84470 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   84384:	e0bffc17 	ldw	r2,-16(fp)
   84388:	e0fffe17 	ldw	r3,-8(fp)
   8438c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   84390:	e0bffc17 	ldw	r2,-16(fp)
   84394:	e0ffff17 	ldw	r3,-4(fp)
   84398:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8439c:	0005303a 	rdctl	r2,status
   843a0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   843a4:	e0fff817 	ldw	r3,-32(fp)
   843a8:	00bfff84 	movi	r2,-2
   843ac:	1884703a 	and	r2,r3,r2
   843b0:	1001703a 	wrctl	status,r2
  
  return context;
   843b4:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   843b8:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   843bc:	00800034 	movhi	r2,0
   843c0:	1086ad04 	addi	r2,r2,6836
   843c4:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   843c8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   843cc:	e0fffd17 	ldw	r3,-12(fp)
   843d0:	e0bff617 	ldw	r2,-40(fp)
   843d4:	1885883a 	add	r2,r3,r2
   843d8:	10c00044 	addi	r3,r2,1
   843dc:	e0bffc17 	ldw	r2,-16(fp)
   843e0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   843e4:	e0bffc17 	ldw	r2,-16(fp)
   843e8:	10c00217 	ldw	r3,8(r2)
   843ec:	e0bff617 	ldw	r2,-40(fp)
   843f0:	1880042e 	bgeu	r3,r2,84404 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   843f4:	e0bffc17 	ldw	r2,-16(fp)
   843f8:	00c00044 	movi	r3,1
   843fc:	10c00405 	stb	r3,16(r2)
   84400:	00000206 	br	8440c <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   84404:	e0bffc17 	ldw	r2,-16(fp)
   84408:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   8440c:	e0bffc17 	ldw	r2,-16(fp)
   84410:	00c00034 	movhi	r3,0
   84414:	18c6a204 	addi	r3,r3,6792
   84418:	e0fff915 	stw	r3,-28(fp)
   8441c:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   84420:	e0bffa17 	ldw	r2,-24(fp)
   84424:	e0fff917 	ldw	r3,-28(fp)
   84428:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   8442c:	e0bff917 	ldw	r2,-28(fp)
   84430:	10c00017 	ldw	r3,0(r2)
   84434:	e0bffa17 	ldw	r2,-24(fp)
   84438:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   8443c:	e0bff917 	ldw	r2,-28(fp)
   84440:	10800017 	ldw	r2,0(r2)
   84444:	e0fffa17 	ldw	r3,-24(fp)
   84448:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   8444c:	e0bff917 	ldw	r2,-28(fp)
   84450:	e0fffa17 	ldw	r3,-24(fp)
   84454:	10c00015 	stw	r3,0(r2)
   84458:	e0bff717 	ldw	r2,-36(fp)
   8445c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   84460:	e0bffb17 	ldw	r2,-20(fp)
   84464:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   84468:	0005883a 	mov	r2,zero
   8446c:	00000306 	br	8447c <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   84470:	00bffa84 	movi	r2,-22
   84474:	00000106 	br	8447c <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   84478:	00bfde84 	movi	r2,-134
  }
}
   8447c:	e037883a 	mov	sp,fp
   84480:	df000017 	ldw	fp,0(sp)
   84484:	dec00104 	addi	sp,sp,4
   84488:	f800283a 	ret

0008448c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   8448c:	deffff04 	addi	sp,sp,-4
   84490:	df000015 	stw	fp,0(sp)
   84494:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   84498:	e037883a 	mov	sp,fp
   8449c:	df000017 	ldw	fp,0(sp)
   844a0:	dec00104 	addi	sp,sp,4
   844a4:	f800283a 	ret

000844a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   844a8:	defffe04 	addi	sp,sp,-8
   844ac:	dfc00115 	stw	ra,4(sp)
   844b0:	df000015 	stw	fp,0(sp)
   844b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   844b8:	00800034 	movhi	r2,0
   844bc:	10869f04 	addi	r2,r2,6780
   844c0:	10800017 	ldw	r2,0(r2)
   844c4:	10000526 	beq	r2,zero,844dc <alt_get_errno+0x34>
   844c8:	00800034 	movhi	r2,0
   844cc:	10869f04 	addi	r2,r2,6780
   844d0:	10800017 	ldw	r2,0(r2)
   844d4:	103ee83a 	callr	r2
   844d8:	00000206 	br	844e4 <alt_get_errno+0x3c>
   844dc:	00800034 	movhi	r2,0
   844e0:	1086a704 	addi	r2,r2,6812
}
   844e4:	e037883a 	mov	sp,fp
   844e8:	dfc00117 	ldw	ra,4(sp)
   844ec:	df000017 	ldw	fp,0(sp)
   844f0:	dec00204 	addi	sp,sp,8
   844f4:	f800283a 	ret

000844f8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   844f8:	defffa04 	addi	sp,sp,-24
   844fc:	dfc00515 	stw	ra,20(sp)
   84500:	df000415 	stw	fp,16(sp)
   84504:	df000404 	addi	fp,sp,16
   84508:	e13ffe15 	stw	r4,-8(fp)
   8450c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   84510:	e0bffe17 	ldw	r2,-8(fp)
   84514:	10000326 	beq	r2,zero,84524 <alt_dev_llist_insert+0x2c>
   84518:	e0bffe17 	ldw	r2,-8(fp)
   8451c:	10800217 	ldw	r2,8(r2)
   84520:	1000051e 	bne	r2,zero,84538 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   84524:	00844a80 	call	844a8 <alt_get_errno>
   84528:	00c00584 	movi	r3,22
   8452c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   84530:	00bffa84 	movi	r2,-22
   84534:	00001306 	br	84584 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   84538:	e0bffe17 	ldw	r2,-8(fp)
   8453c:	e0ffff17 	ldw	r3,-4(fp)
   84540:	e0fffc15 	stw	r3,-16(fp)
   84544:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   84548:	e0bffd17 	ldw	r2,-12(fp)
   8454c:	e0fffc17 	ldw	r3,-16(fp)
   84550:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   84554:	e0bffc17 	ldw	r2,-16(fp)
   84558:	10c00017 	ldw	r3,0(r2)
   8455c:	e0bffd17 	ldw	r2,-12(fp)
   84560:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   84564:	e0bffc17 	ldw	r2,-16(fp)
   84568:	10800017 	ldw	r2,0(r2)
   8456c:	e0fffd17 	ldw	r3,-12(fp)
   84570:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   84574:	e0bffc17 	ldw	r2,-16(fp)
   84578:	e0fffd17 	ldw	r3,-12(fp)
   8457c:	10c00015 	stw	r3,0(r2)

  return 0;  
   84580:	0005883a 	mov	r2,zero
}
   84584:	e037883a 	mov	sp,fp
   84588:	dfc00117 	ldw	ra,4(sp)
   8458c:	df000017 	ldw	fp,0(sp)
   84590:	dec00204 	addi	sp,sp,8
   84594:	f800283a 	ret

00084598 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   84598:	defffd04 	addi	sp,sp,-12
   8459c:	dfc00215 	stw	ra,8(sp)
   845a0:	df000115 	stw	fp,4(sp)
   845a4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   845a8:	00800234 	movhi	r2,8
   845ac:	10954a04 	addi	r2,r2,21800
   845b0:	e0bfff15 	stw	r2,-4(fp)
   845b4:	00000606 	br	845d0 <_do_ctors+0x38>
        (*ctor) (); 
   845b8:	e0bfff17 	ldw	r2,-4(fp)
   845bc:	10800017 	ldw	r2,0(r2)
   845c0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   845c4:	e0bfff17 	ldw	r2,-4(fp)
   845c8:	10bfff04 	addi	r2,r2,-4
   845cc:	e0bfff15 	stw	r2,-4(fp)
   845d0:	e0ffff17 	ldw	r3,-4(fp)
   845d4:	00800234 	movhi	r2,8
   845d8:	10954b04 	addi	r2,r2,21804
   845dc:	18bff62e 	bgeu	r3,r2,845b8 <_do_ctors+0x20>
        (*ctor) (); 
}
   845e0:	e037883a 	mov	sp,fp
   845e4:	dfc00117 	ldw	ra,4(sp)
   845e8:	df000017 	ldw	fp,0(sp)
   845ec:	dec00204 	addi	sp,sp,8
   845f0:	f800283a 	ret

000845f4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   845f4:	defffd04 	addi	sp,sp,-12
   845f8:	dfc00215 	stw	ra,8(sp)
   845fc:	df000115 	stw	fp,4(sp)
   84600:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   84604:	00800234 	movhi	r2,8
   84608:	10954a04 	addi	r2,r2,21800
   8460c:	e0bfff15 	stw	r2,-4(fp)
   84610:	00000606 	br	8462c <_do_dtors+0x38>
        (*dtor) (); 
   84614:	e0bfff17 	ldw	r2,-4(fp)
   84618:	10800017 	ldw	r2,0(r2)
   8461c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   84620:	e0bfff17 	ldw	r2,-4(fp)
   84624:	10bfff04 	addi	r2,r2,-4
   84628:	e0bfff15 	stw	r2,-4(fp)
   8462c:	e0ffff17 	ldw	r3,-4(fp)
   84630:	00800234 	movhi	r2,8
   84634:	10954b04 	addi	r2,r2,21804
   84638:	18bff62e 	bgeu	r3,r2,84614 <_do_dtors+0x20>
        (*dtor) (); 
}
   8463c:	e037883a 	mov	sp,fp
   84640:	dfc00117 	ldw	ra,4(sp)
   84644:	df000017 	ldw	fp,0(sp)
   84648:	dec00204 	addi	sp,sp,8
   8464c:	f800283a 	ret

00084650 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   84650:	deffff04 	addi	sp,sp,-4
   84654:	df000015 	stw	fp,0(sp)
   84658:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   8465c:	e037883a 	mov	sp,fp
   84660:	df000017 	ldw	fp,0(sp)
   84664:	dec00104 	addi	sp,sp,4
   84668:	f800283a 	ret

0008466c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   8466c:	defff904 	addi	sp,sp,-28
   84670:	dfc00615 	stw	ra,24(sp)
   84674:	df000515 	stw	fp,20(sp)
   84678:	df000504 	addi	fp,sp,20
   8467c:	e13ffc15 	stw	r4,-16(fp)
   84680:	e17ffd15 	stw	r5,-12(fp)
   84684:	e1bffe15 	stw	r6,-8(fp)
   84688:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   8468c:	e0800217 	ldw	r2,8(fp)
   84690:	d8800015 	stw	r2,0(sp)
   84694:	e13ffc17 	ldw	r4,-16(fp)
   84698:	e17ffd17 	ldw	r5,-12(fp)
   8469c:	e1bffe17 	ldw	r6,-8(fp)
   846a0:	e1ffff17 	ldw	r7,-4(fp)
   846a4:	00848440 	call	84844 <alt_iic_isr_register>
}  
   846a8:	e037883a 	mov	sp,fp
   846ac:	dfc00117 	ldw	ra,4(sp)
   846b0:	df000017 	ldw	fp,0(sp)
   846b4:	dec00204 	addi	sp,sp,8
   846b8:	f800283a 	ret

000846bc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   846bc:	defff904 	addi	sp,sp,-28
   846c0:	df000615 	stw	fp,24(sp)
   846c4:	df000604 	addi	fp,sp,24
   846c8:	e13ffe15 	stw	r4,-8(fp)
   846cc:	e17fff15 	stw	r5,-4(fp)
   846d0:	e0bfff17 	ldw	r2,-4(fp)
   846d4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   846d8:	0005303a 	rdctl	r2,status
   846dc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   846e0:	e0fffb17 	ldw	r3,-20(fp)
   846e4:	00bfff84 	movi	r2,-2
   846e8:	1884703a 	and	r2,r3,r2
   846ec:	1001703a 	wrctl	status,r2
  
  return context;
   846f0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   846f4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   846f8:	e0bffa17 	ldw	r2,-24(fp)
   846fc:	00c00044 	movi	r3,1
   84700:	1884983a 	sll	r2,r3,r2
   84704:	1007883a 	mov	r3,r2
   84708:	00800034 	movhi	r2,0
   8470c:	1086ab04 	addi	r2,r2,6828
   84710:	10800017 	ldw	r2,0(r2)
   84714:	1886b03a 	or	r3,r3,r2
   84718:	00800034 	movhi	r2,0
   8471c:	1086ab04 	addi	r2,r2,6828
   84720:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   84724:	00800034 	movhi	r2,0
   84728:	1086ab04 	addi	r2,r2,6828
   8472c:	10800017 	ldw	r2,0(r2)
   84730:	100170fa 	wrctl	ienable,r2
   84734:	e0bffc17 	ldw	r2,-16(fp)
   84738:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8473c:	e0bffd17 	ldw	r2,-12(fp)
   84740:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   84744:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   84748:	e037883a 	mov	sp,fp
   8474c:	df000017 	ldw	fp,0(sp)
   84750:	dec00104 	addi	sp,sp,4
   84754:	f800283a 	ret

00084758 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   84758:	defff904 	addi	sp,sp,-28
   8475c:	df000615 	stw	fp,24(sp)
   84760:	df000604 	addi	fp,sp,24
   84764:	e13ffe15 	stw	r4,-8(fp)
   84768:	e17fff15 	stw	r5,-4(fp)
   8476c:	e0bfff17 	ldw	r2,-4(fp)
   84770:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   84774:	0005303a 	rdctl	r2,status
   84778:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8477c:	e0fffb17 	ldw	r3,-20(fp)
   84780:	00bfff84 	movi	r2,-2
   84784:	1884703a 	and	r2,r3,r2
   84788:	1001703a 	wrctl	status,r2
  
  return context;
   8478c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   84790:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   84794:	e0bffa17 	ldw	r2,-24(fp)
   84798:	00c00044 	movi	r3,1
   8479c:	1884983a 	sll	r2,r3,r2
   847a0:	0084303a 	nor	r2,zero,r2
   847a4:	1007883a 	mov	r3,r2
   847a8:	00800034 	movhi	r2,0
   847ac:	1086ab04 	addi	r2,r2,6828
   847b0:	10800017 	ldw	r2,0(r2)
   847b4:	1886703a 	and	r3,r3,r2
   847b8:	00800034 	movhi	r2,0
   847bc:	1086ab04 	addi	r2,r2,6828
   847c0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   847c4:	00800034 	movhi	r2,0
   847c8:	1086ab04 	addi	r2,r2,6828
   847cc:	10800017 	ldw	r2,0(r2)
   847d0:	100170fa 	wrctl	ienable,r2
   847d4:	e0bffc17 	ldw	r2,-16(fp)
   847d8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   847dc:	e0bffd17 	ldw	r2,-12(fp)
   847e0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   847e4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   847e8:	e037883a 	mov	sp,fp
   847ec:	df000017 	ldw	fp,0(sp)
   847f0:	dec00104 	addi	sp,sp,4
   847f4:	f800283a 	ret

000847f8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   847f8:	defffc04 	addi	sp,sp,-16
   847fc:	df000315 	stw	fp,12(sp)
   84800:	df000304 	addi	fp,sp,12
   84804:	e13ffe15 	stw	r4,-8(fp)
   84808:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   8480c:	000530fa 	rdctl	r2,ienable
   84810:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   84814:	e0bfff17 	ldw	r2,-4(fp)
   84818:	00c00044 	movi	r3,1
   8481c:	1884983a 	sll	r2,r3,r2
   84820:	1007883a 	mov	r3,r2
   84824:	e0bffd17 	ldw	r2,-12(fp)
   84828:	1884703a 	and	r2,r3,r2
   8482c:	1004c03a 	cmpne	r2,r2,zero
   84830:	10803fcc 	andi	r2,r2,255
}
   84834:	e037883a 	mov	sp,fp
   84838:	df000017 	ldw	fp,0(sp)
   8483c:	dec00104 	addi	sp,sp,4
   84840:	f800283a 	ret

00084844 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   84844:	defff504 	addi	sp,sp,-44
   84848:	dfc00a15 	stw	ra,40(sp)
   8484c:	df000915 	stw	fp,36(sp)
   84850:	df000904 	addi	fp,sp,36
   84854:	e13ffc15 	stw	r4,-16(fp)
   84858:	e17ffd15 	stw	r5,-12(fp)
   8485c:	e1bffe15 	stw	r6,-8(fp)
   84860:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   84864:	00bffa84 	movi	r2,-22
   84868:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   8486c:	e0bffd17 	ldw	r2,-12(fp)
   84870:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   84874:	e0bff817 	ldw	r2,-32(fp)
   84878:	10800808 	cmpgei	r2,r2,32
   8487c:	1000271e 	bne	r2,zero,8491c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   84880:	0005303a 	rdctl	r2,status
   84884:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   84888:	e0fffa17 	ldw	r3,-24(fp)
   8488c:	00bfff84 	movi	r2,-2
   84890:	1884703a 	and	r2,r3,r2
   84894:	1001703a 	wrctl	status,r2
  
  return context;
   84898:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   8489c:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   848a0:	00c00034 	movhi	r3,0
   848a4:	18c6b804 	addi	r3,r3,6880
   848a8:	e0bff817 	ldw	r2,-32(fp)
   848ac:	100490fa 	slli	r2,r2,3
   848b0:	1885883a 	add	r2,r3,r2
   848b4:	e0fffe17 	ldw	r3,-8(fp)
   848b8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   848bc:	00c00034 	movhi	r3,0
   848c0:	18c6b804 	addi	r3,r3,6880
   848c4:	e0bff817 	ldw	r2,-32(fp)
   848c8:	100490fa 	slli	r2,r2,3
   848cc:	1885883a 	add	r2,r3,r2
   848d0:	10800104 	addi	r2,r2,4
   848d4:	e0ffff17 	ldw	r3,-4(fp)
   848d8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   848dc:	e0bffe17 	ldw	r2,-8(fp)
   848e0:	10000526 	beq	r2,zero,848f8 <alt_iic_isr_register+0xb4>
   848e4:	e0bff817 	ldw	r2,-32(fp)
   848e8:	e13ffc17 	ldw	r4,-16(fp)
   848ec:	100b883a 	mov	r5,r2
   848f0:	00846bc0 	call	846bc <alt_ic_irq_enable>
   848f4:	00000406 	br	84908 <alt_iic_isr_register+0xc4>
   848f8:	e0bff817 	ldw	r2,-32(fp)
   848fc:	e13ffc17 	ldw	r4,-16(fp)
   84900:	100b883a 	mov	r5,r2
   84904:	00847580 	call	84758 <alt_ic_irq_disable>
   84908:	e0bff715 	stw	r2,-36(fp)
   8490c:	e0bff917 	ldw	r2,-28(fp)
   84910:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   84914:	e0bffb17 	ldw	r2,-20(fp)
   84918:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   8491c:	e0bff717 	ldw	r2,-36(fp)
}
   84920:	e037883a 	mov	sp,fp
   84924:	dfc00117 	ldw	ra,4(sp)
   84928:	df000017 	ldw	fp,0(sp)
   8492c:	dec00204 	addi	sp,sp,8
   84930:	f800283a 	ret

00084934 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   84934:	defff804 	addi	sp,sp,-32
   84938:	dfc00715 	stw	ra,28(sp)
   8493c:	df000615 	stw	fp,24(sp)
   84940:	dc000515 	stw	r16,20(sp)
   84944:	df000504 	addi	fp,sp,20
   84948:	e13ffc15 	stw	r4,-16(fp)
   8494c:	e17ffd15 	stw	r5,-12(fp)
   84950:	e1bffe15 	stw	r6,-8(fp)
   84954:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   84958:	e13ffd17 	ldw	r4,-12(fp)
   8495c:	e17ffe17 	ldw	r5,-8(fp)
   84960:	e1bfff17 	ldw	r6,-4(fp)
   84964:	0084bcc0 	call	84bcc <open>
   84968:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   8496c:	e0bffb17 	ldw	r2,-20(fp)
   84970:	10002216 	blt	r2,zero,849fc <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   84974:	04000034 	movhi	r16,0
   84978:	84021e04 	addi	r16,r16,2168
   8497c:	e0bffb17 	ldw	r2,-20(fp)
   84980:	1009883a 	mov	r4,r2
   84984:	01400304 	movi	r5,12
   84988:	0082d440 	call	82d44 <__mulsi3>
   8498c:	8085883a 	add	r2,r16,r2
   84990:	10c00017 	ldw	r3,0(r2)
   84994:	e0bffc17 	ldw	r2,-16(fp)
   84998:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   8499c:	04000034 	movhi	r16,0
   849a0:	84021e04 	addi	r16,r16,2168
   849a4:	e0bffb17 	ldw	r2,-20(fp)
   849a8:	1009883a 	mov	r4,r2
   849ac:	01400304 	movi	r5,12
   849b0:	0082d440 	call	82d44 <__mulsi3>
   849b4:	8085883a 	add	r2,r16,r2
   849b8:	10800104 	addi	r2,r2,4
   849bc:	10c00017 	ldw	r3,0(r2)
   849c0:	e0bffc17 	ldw	r2,-16(fp)
   849c4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   849c8:	04000034 	movhi	r16,0
   849cc:	84021e04 	addi	r16,r16,2168
   849d0:	e0bffb17 	ldw	r2,-20(fp)
   849d4:	1009883a 	mov	r4,r2
   849d8:	01400304 	movi	r5,12
   849dc:	0082d440 	call	82d44 <__mulsi3>
   849e0:	8085883a 	add	r2,r16,r2
   849e4:	10800204 	addi	r2,r2,8
   849e8:	10c00017 	ldw	r3,0(r2)
   849ec:	e0bffc17 	ldw	r2,-16(fp)
   849f0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   849f4:	e13ffb17 	ldw	r4,-20(fp)
   849f8:	00834b40 	call	834b4 <alt_release_fd>
  }
} 
   849fc:	e037883a 	mov	sp,fp
   84a00:	dfc00217 	ldw	ra,8(sp)
   84a04:	df000117 	ldw	fp,4(sp)
   84a08:	dc000017 	ldw	r16,0(sp)
   84a0c:	dec00304 	addi	sp,sp,12
   84a10:	f800283a 	ret

00084a14 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   84a14:	defffb04 	addi	sp,sp,-20
   84a18:	dfc00415 	stw	ra,16(sp)
   84a1c:	df000315 	stw	fp,12(sp)
   84a20:	df000304 	addi	fp,sp,12
   84a24:	e13ffd15 	stw	r4,-12(fp)
   84a28:	e17ffe15 	stw	r5,-8(fp)
   84a2c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   84a30:	01000034 	movhi	r4,0
   84a34:	21022104 	addi	r4,r4,2180
   84a38:	e17ffd17 	ldw	r5,-12(fp)
   84a3c:	01800044 	movi	r6,1
   84a40:	01c07fc4 	movi	r7,511
   84a44:	00849340 	call	84934 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   84a48:	01000034 	movhi	r4,0
   84a4c:	21021e04 	addi	r4,r4,2168
   84a50:	e17ffe17 	ldw	r5,-8(fp)
   84a54:	000d883a 	mov	r6,zero
   84a58:	01c07fc4 	movi	r7,511
   84a5c:	00849340 	call	84934 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   84a60:	01000034 	movhi	r4,0
   84a64:	21022404 	addi	r4,r4,2192
   84a68:	e17fff17 	ldw	r5,-4(fp)
   84a6c:	01800044 	movi	r6,1
   84a70:	01c07fc4 	movi	r7,511
   84a74:	00849340 	call	84934 <alt_open_fd>
}  
   84a78:	e037883a 	mov	sp,fp
   84a7c:	dfc00117 	ldw	ra,4(sp)
   84a80:	df000017 	ldw	fp,0(sp)
   84a84:	dec00204 	addi	sp,sp,8
   84a88:	f800283a 	ret

00084a8c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   84a8c:	defffe04 	addi	sp,sp,-8
   84a90:	dfc00115 	stw	ra,4(sp)
   84a94:	df000015 	stw	fp,0(sp)
   84a98:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   84a9c:	00800034 	movhi	r2,0
   84aa0:	10869f04 	addi	r2,r2,6780
   84aa4:	10800017 	ldw	r2,0(r2)
   84aa8:	10000526 	beq	r2,zero,84ac0 <alt_get_errno+0x34>
   84aac:	00800034 	movhi	r2,0
   84ab0:	10869f04 	addi	r2,r2,6780
   84ab4:	10800017 	ldw	r2,0(r2)
   84ab8:	103ee83a 	callr	r2
   84abc:	00000206 	br	84ac8 <alt_get_errno+0x3c>
   84ac0:	00800034 	movhi	r2,0
   84ac4:	1086a704 	addi	r2,r2,6812
}
   84ac8:	e037883a 	mov	sp,fp
   84acc:	dfc00117 	ldw	ra,4(sp)
   84ad0:	df000017 	ldw	fp,0(sp)
   84ad4:	dec00204 	addi	sp,sp,8
   84ad8:	f800283a 	ret

00084adc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   84adc:	defffb04 	addi	sp,sp,-20
   84ae0:	dfc00415 	stw	ra,16(sp)
   84ae4:	df000315 	stw	fp,12(sp)
   84ae8:	dc000215 	stw	r16,8(sp)
   84aec:	df000204 	addi	fp,sp,8
   84af0:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   84af4:	e0bfff17 	ldw	r2,-4(fp)
   84af8:	10800217 	ldw	r2,8(r2)
   84afc:	10d00034 	orhi	r3,r2,16384
   84b00:	e0bfff17 	ldw	r2,-4(fp)
   84b04:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   84b08:	e03ffe15 	stw	zero,-8(fp)
   84b0c:	00002206 	br	84b98 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   84b10:	04000034 	movhi	r16,0
   84b14:	84021e04 	addi	r16,r16,2168
   84b18:	e0bffe17 	ldw	r2,-8(fp)
   84b1c:	1009883a 	mov	r4,r2
   84b20:	01400304 	movi	r5,12
   84b24:	0082d440 	call	82d44 <__mulsi3>
   84b28:	8085883a 	add	r2,r16,r2
   84b2c:	10c00017 	ldw	r3,0(r2)
   84b30:	e0bfff17 	ldw	r2,-4(fp)
   84b34:	10800017 	ldw	r2,0(r2)
   84b38:	1880141e 	bne	r3,r2,84b8c <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   84b3c:	04000034 	movhi	r16,0
   84b40:	84021e04 	addi	r16,r16,2168
   84b44:	e0bffe17 	ldw	r2,-8(fp)
   84b48:	1009883a 	mov	r4,r2
   84b4c:	01400304 	movi	r5,12
   84b50:	0082d440 	call	82d44 <__mulsi3>
   84b54:	8085883a 	add	r2,r16,r2
   84b58:	10800204 	addi	r2,r2,8
   84b5c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   84b60:	10000a0e 	bge	r2,zero,84b8c <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   84b64:	e13ffe17 	ldw	r4,-8(fp)
   84b68:	01400304 	movi	r5,12
   84b6c:	0082d440 	call	82d44 <__mulsi3>
   84b70:	00c00034 	movhi	r3,0
   84b74:	18c21e04 	addi	r3,r3,2168
   84b78:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   84b7c:	e0bfff17 	ldw	r2,-4(fp)
   84b80:	18800226 	beq	r3,r2,84b8c <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   84b84:	00bffcc4 	movi	r2,-13
   84b88:	00000a06 	br	84bb4 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   84b8c:	e0bffe17 	ldw	r2,-8(fp)
   84b90:	10800044 	addi	r2,r2,1
   84b94:	e0bffe15 	stw	r2,-8(fp)
   84b98:	00800034 	movhi	r2,0
   84b9c:	10869e04 	addi	r2,r2,6776
   84ba0:	10800017 	ldw	r2,0(r2)
   84ba4:	1007883a 	mov	r3,r2
   84ba8:	e0bffe17 	ldw	r2,-8(fp)
   84bac:	18bfd82e 	bgeu	r3,r2,84b10 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   84bb0:	0005883a 	mov	r2,zero
}
   84bb4:	e037883a 	mov	sp,fp
   84bb8:	dfc00217 	ldw	ra,8(sp)
   84bbc:	df000117 	ldw	fp,4(sp)
   84bc0:	dc000017 	ldw	r16,0(sp)
   84bc4:	dec00304 	addi	sp,sp,12
   84bc8:	f800283a 	ret

00084bcc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   84bcc:	defff604 	addi	sp,sp,-40
   84bd0:	dfc00915 	stw	ra,36(sp)
   84bd4:	df000815 	stw	fp,32(sp)
   84bd8:	df000804 	addi	fp,sp,32
   84bdc:	e13ffd15 	stw	r4,-12(fp)
   84be0:	e17ffe15 	stw	r5,-8(fp)
   84be4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   84be8:	00bfffc4 	movi	r2,-1
   84bec:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   84bf0:	00bffb44 	movi	r2,-19
   84bf4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   84bf8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   84bfc:	e13ffd17 	ldw	r4,-12(fp)
   84c00:	01400034 	movhi	r5,0
   84c04:	29469c04 	addi	r5,r5,6768
   84c08:	0084ee00 	call	84ee0 <alt_find_dev>
   84c0c:	e0bff815 	stw	r2,-32(fp)
   84c10:	e0bff817 	ldw	r2,-32(fp)
   84c14:	1000051e 	bne	r2,zero,84c2c <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   84c18:	e13ffd17 	ldw	r4,-12(fp)
   84c1c:	0084f700 	call	84f70 <alt_find_file>
   84c20:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   84c24:	00800044 	movi	r2,1
   84c28:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   84c2c:	e0bff817 	ldw	r2,-32(fp)
   84c30:	10002a26 	beq	r2,zero,84cdc <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   84c34:	e13ff817 	ldw	r4,-32(fp)
   84c38:	00850840 	call	85084 <alt_get_fd>
   84c3c:	e0bff915 	stw	r2,-28(fp)
   84c40:	e0bff917 	ldw	r2,-28(fp)
   84c44:	1000030e 	bge	r2,zero,84c54 <open+0x88>
    {
      status = index;
   84c48:	e0bff917 	ldw	r2,-28(fp)
   84c4c:	e0bffa15 	stw	r2,-24(fp)
   84c50:	00002406 	br	84ce4 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   84c54:	e13ff917 	ldw	r4,-28(fp)
   84c58:	01400304 	movi	r5,12
   84c5c:	0082d440 	call	82d44 <__mulsi3>
   84c60:	00c00034 	movhi	r3,0
   84c64:	18c21e04 	addi	r3,r3,2168
   84c68:	10c5883a 	add	r2,r2,r3
   84c6c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   84c70:	e0fffe17 	ldw	r3,-8(fp)
   84c74:	00900034 	movhi	r2,16384
   84c78:	10bfffc4 	addi	r2,r2,-1
   84c7c:	1886703a 	and	r3,r3,r2
   84c80:	e0bffc17 	ldw	r2,-16(fp)
   84c84:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   84c88:	e0bffb17 	ldw	r2,-20(fp)
   84c8c:	1000051e 	bne	r2,zero,84ca4 <open+0xd8>
   84c90:	e13ffc17 	ldw	r4,-16(fp)
   84c94:	0084adc0 	call	84adc <alt_file_locked>
   84c98:	e0bffa15 	stw	r2,-24(fp)
   84c9c:	e0bffa17 	ldw	r2,-24(fp)
   84ca0:	10001016 	blt	r2,zero,84ce4 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   84ca4:	e0bff817 	ldw	r2,-32(fp)
   84ca8:	10800317 	ldw	r2,12(r2)
   84cac:	10000826 	beq	r2,zero,84cd0 <open+0x104>
   84cb0:	e0bff817 	ldw	r2,-32(fp)
   84cb4:	10800317 	ldw	r2,12(r2)
   84cb8:	e13ffc17 	ldw	r4,-16(fp)
   84cbc:	e17ffd17 	ldw	r5,-12(fp)
   84cc0:	e1bffe17 	ldw	r6,-8(fp)
   84cc4:	e1ffff17 	ldw	r7,-4(fp)
   84cc8:	103ee83a 	callr	r2
   84ccc:	00000106 	br	84cd4 <open+0x108>
   84cd0:	0005883a 	mov	r2,zero
   84cd4:	e0bffa15 	stw	r2,-24(fp)
   84cd8:	00000206 	br	84ce4 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   84cdc:	00bffb44 	movi	r2,-19
   84ce0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   84ce4:	e0bffa17 	ldw	r2,-24(fp)
   84ce8:	1000080e 	bge	r2,zero,84d0c <open+0x140>
  {
    alt_release_fd (index);  
   84cec:	e13ff917 	ldw	r4,-28(fp)
   84cf0:	00834b40 	call	834b4 <alt_release_fd>
    ALT_ERRNO = -status;
   84cf4:	0084a8c0 	call	84a8c <alt_get_errno>
   84cf8:	e0fffa17 	ldw	r3,-24(fp)
   84cfc:	00c7c83a 	sub	r3,zero,r3
   84d00:	10c00015 	stw	r3,0(r2)
    return -1;
   84d04:	00bfffc4 	movi	r2,-1
   84d08:	00000106 	br	84d10 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   84d0c:	e0bff917 	ldw	r2,-28(fp)
}
   84d10:	e037883a 	mov	sp,fp
   84d14:	dfc00117 	ldw	ra,4(sp)
   84d18:	df000017 	ldw	fp,0(sp)
   84d1c:	dec00204 	addi	sp,sp,8
   84d20:	f800283a 	ret

00084d24 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   84d24:	defffa04 	addi	sp,sp,-24
   84d28:	df000515 	stw	fp,20(sp)
   84d2c:	df000504 	addi	fp,sp,20
   84d30:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   84d34:	0005303a 	rdctl	r2,status
   84d38:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   84d3c:	e0fffc17 	ldw	r3,-16(fp)
   84d40:	00bfff84 	movi	r2,-2
   84d44:	1884703a 	and	r2,r3,r2
   84d48:	1001703a 	wrctl	status,r2
  
  return context;
   84d4c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   84d50:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   84d54:	e0bfff17 	ldw	r2,-4(fp)
   84d58:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   84d5c:	e0bffd17 	ldw	r2,-12(fp)
   84d60:	10800017 	ldw	r2,0(r2)
   84d64:	e0fffd17 	ldw	r3,-12(fp)
   84d68:	18c00117 	ldw	r3,4(r3)
   84d6c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   84d70:	e0bffd17 	ldw	r2,-12(fp)
   84d74:	10800117 	ldw	r2,4(r2)
   84d78:	e0fffd17 	ldw	r3,-12(fp)
   84d7c:	18c00017 	ldw	r3,0(r3)
   84d80:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   84d84:	e0bffd17 	ldw	r2,-12(fp)
   84d88:	e0fffd17 	ldw	r3,-12(fp)
   84d8c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   84d90:	e0bffd17 	ldw	r2,-12(fp)
   84d94:	e0fffd17 	ldw	r3,-12(fp)
   84d98:	10c00015 	stw	r3,0(r2)
   84d9c:	e0bffb17 	ldw	r2,-20(fp)
   84da0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   84da4:	e0bffe17 	ldw	r2,-8(fp)
   84da8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   84dac:	e037883a 	mov	sp,fp
   84db0:	df000017 	ldw	fp,0(sp)
   84db4:	dec00104 	addi	sp,sp,4
   84db8:	f800283a 	ret

00084dbc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   84dbc:	defffb04 	addi	sp,sp,-20
   84dc0:	dfc00415 	stw	ra,16(sp)
   84dc4:	df000315 	stw	fp,12(sp)
   84dc8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   84dcc:	d0a00c17 	ldw	r2,-32720(gp)
   84dd0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   84dd4:	d0a01717 	ldw	r2,-32676(gp)
   84dd8:	10800044 	addi	r2,r2,1
   84ddc:	d0a01715 	stw	r2,-32676(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   84de0:	00002e06 	br	84e9c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   84de4:	e0bffd17 	ldw	r2,-12(fp)
   84de8:	10800017 	ldw	r2,0(r2)
   84dec:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   84df0:	e0bffd17 	ldw	r2,-12(fp)
   84df4:	10800403 	ldbu	r2,16(r2)
   84df8:	10803fcc 	andi	r2,r2,255
   84dfc:	10000426 	beq	r2,zero,84e10 <alt_tick+0x54>
   84e00:	d0a01717 	ldw	r2,-32676(gp)
   84e04:	1000021e 	bne	r2,zero,84e10 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   84e08:	e0bffd17 	ldw	r2,-12(fp)
   84e0c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   84e10:	e0bffd17 	ldw	r2,-12(fp)
   84e14:	10800217 	ldw	r2,8(r2)
   84e18:	d0e01717 	ldw	r3,-32676(gp)
   84e1c:	18801d36 	bltu	r3,r2,84e94 <alt_tick+0xd8>
   84e20:	e0bffd17 	ldw	r2,-12(fp)
   84e24:	10800403 	ldbu	r2,16(r2)
   84e28:	10803fcc 	andi	r2,r2,255
   84e2c:	1000191e 	bne	r2,zero,84e94 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   84e30:	e0bffd17 	ldw	r2,-12(fp)
   84e34:	10c00317 	ldw	r3,12(r2)
   84e38:	e0bffd17 	ldw	r2,-12(fp)
   84e3c:	10800517 	ldw	r2,20(r2)
   84e40:	1009883a 	mov	r4,r2
   84e44:	183ee83a 	callr	r3
   84e48:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   84e4c:	e0bfff17 	ldw	r2,-4(fp)
   84e50:	1000031e 	bne	r2,zero,84e60 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   84e54:	e13ffd17 	ldw	r4,-12(fp)
   84e58:	0084d240 	call	84d24 <alt_alarm_stop>
   84e5c:	00000d06 	br	84e94 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   84e60:	e0bffd17 	ldw	r2,-12(fp)
   84e64:	10c00217 	ldw	r3,8(r2)
   84e68:	e0bfff17 	ldw	r2,-4(fp)
   84e6c:	1887883a 	add	r3,r3,r2
   84e70:	e0bffd17 	ldw	r2,-12(fp)
   84e74:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   84e78:	e0bffd17 	ldw	r2,-12(fp)
   84e7c:	10c00217 	ldw	r3,8(r2)
   84e80:	d0a01717 	ldw	r2,-32676(gp)
   84e84:	1880032e 	bgeu	r3,r2,84e94 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   84e88:	e0bffd17 	ldw	r2,-12(fp)
   84e8c:	00c00044 	movi	r3,1
   84e90:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   84e94:	e0bffe17 	ldw	r2,-8(fp)
   84e98:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   84e9c:	e0fffd17 	ldw	r3,-12(fp)
   84ea0:	d0a00c04 	addi	r2,gp,-32720
   84ea4:	18bfcf1e 	bne	r3,r2,84de4 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   84ea8:	0001883a 	nop
}
   84eac:	e037883a 	mov	sp,fp
   84eb0:	dfc00117 	ldw	ra,4(sp)
   84eb4:	df000017 	ldw	fp,0(sp)
   84eb8:	dec00204 	addi	sp,sp,8
   84ebc:	f800283a 	ret

00084ec0 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   84ec0:	deffff04 	addi	sp,sp,-4
   84ec4:	df000015 	stw	fp,0(sp)
   84ec8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   84ecc:	000170fa 	wrctl	ienable,zero
}
   84ed0:	e037883a 	mov	sp,fp
   84ed4:	df000017 	ldw	fp,0(sp)
   84ed8:	dec00104 	addi	sp,sp,4
   84edc:	f800283a 	ret

00084ee0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   84ee0:	defffa04 	addi	sp,sp,-24
   84ee4:	dfc00515 	stw	ra,20(sp)
   84ee8:	df000415 	stw	fp,16(sp)
   84eec:	df000404 	addi	fp,sp,16
   84ef0:	e13ffe15 	stw	r4,-8(fp)
   84ef4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   84ef8:	e0bfff17 	ldw	r2,-4(fp)
   84efc:	10800017 	ldw	r2,0(r2)
   84f00:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   84f04:	e13ffe17 	ldw	r4,-8(fp)
   84f08:	00802c00 	call	802c0 <strlen>
   84f0c:	10800044 	addi	r2,r2,1
   84f10:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   84f14:	00000d06 	br	84f4c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   84f18:	e0bffc17 	ldw	r2,-16(fp)
   84f1c:	10c00217 	ldw	r3,8(r2)
   84f20:	e0bffd17 	ldw	r2,-12(fp)
   84f24:	1809883a 	mov	r4,r3
   84f28:	e17ffe17 	ldw	r5,-8(fp)
   84f2c:	100d883a 	mov	r6,r2
   84f30:	00851a40 	call	851a4 <memcmp>
   84f34:	1000021e 	bne	r2,zero,84f40 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   84f38:	e0bffc17 	ldw	r2,-16(fp)
   84f3c:	00000706 	br	84f5c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   84f40:	e0bffc17 	ldw	r2,-16(fp)
   84f44:	10800017 	ldw	r2,0(r2)
   84f48:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   84f4c:	e0fffc17 	ldw	r3,-16(fp)
   84f50:	e0bfff17 	ldw	r2,-4(fp)
   84f54:	18bff01e 	bne	r3,r2,84f18 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   84f58:	0005883a 	mov	r2,zero
}
   84f5c:	e037883a 	mov	sp,fp
   84f60:	dfc00117 	ldw	ra,4(sp)
   84f64:	df000017 	ldw	fp,0(sp)
   84f68:	dec00204 	addi	sp,sp,8
   84f6c:	f800283a 	ret

00084f70 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   84f70:	defffb04 	addi	sp,sp,-20
   84f74:	dfc00415 	stw	ra,16(sp)
   84f78:	df000315 	stw	fp,12(sp)
   84f7c:	df000304 	addi	fp,sp,12
   84f80:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   84f84:	00800034 	movhi	r2,0
   84f88:	10869a04 	addi	r2,r2,6760
   84f8c:	10800017 	ldw	r2,0(r2)
   84f90:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   84f94:	00003106 	br	8505c <alt_find_file+0xec>
  {
    len = strlen(next->name);
   84f98:	e0bffd17 	ldw	r2,-12(fp)
   84f9c:	10800217 	ldw	r2,8(r2)
   84fa0:	1009883a 	mov	r4,r2
   84fa4:	00802c00 	call	802c0 <strlen>
   84fa8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   84fac:	e0bffd17 	ldw	r2,-12(fp)
   84fb0:	10c00217 	ldw	r3,8(r2)
   84fb4:	e0bffe17 	ldw	r2,-8(fp)
   84fb8:	10bfffc4 	addi	r2,r2,-1
   84fbc:	1885883a 	add	r2,r3,r2
   84fc0:	10800003 	ldbu	r2,0(r2)
   84fc4:	10803fcc 	andi	r2,r2,255
   84fc8:	1080201c 	xori	r2,r2,128
   84fcc:	10bfe004 	addi	r2,r2,-128
   84fd0:	10800bd8 	cmpnei	r2,r2,47
   84fd4:	1000031e 	bne	r2,zero,84fe4 <alt_find_file+0x74>
    {
      len -= 1;
   84fd8:	e0bffe17 	ldw	r2,-8(fp)
   84fdc:	10bfffc4 	addi	r2,r2,-1
   84fe0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   84fe4:	e0bffe17 	ldw	r2,-8(fp)
   84fe8:	e0ffff17 	ldw	r3,-4(fp)
   84fec:	1885883a 	add	r2,r3,r2
   84ff0:	10800003 	ldbu	r2,0(r2)
   84ff4:	10803fcc 	andi	r2,r2,255
   84ff8:	1080201c 	xori	r2,r2,128
   84ffc:	10bfe004 	addi	r2,r2,-128
   85000:	10800be0 	cmpeqi	r2,r2,47
   85004:	1000081e 	bne	r2,zero,85028 <alt_find_file+0xb8>
   85008:	e0bffe17 	ldw	r2,-8(fp)
   8500c:	e0ffff17 	ldw	r3,-4(fp)
   85010:	1885883a 	add	r2,r3,r2
   85014:	10800003 	ldbu	r2,0(r2)
   85018:	10803fcc 	andi	r2,r2,255
   8501c:	1080201c 	xori	r2,r2,128
   85020:	10bfe004 	addi	r2,r2,-128
   85024:	10000a1e 	bne	r2,zero,85050 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   85028:	e0bffd17 	ldw	r2,-12(fp)
   8502c:	10c00217 	ldw	r3,8(r2)
   85030:	e0bffe17 	ldw	r2,-8(fp)
   85034:	1809883a 	mov	r4,r3
   85038:	e17fff17 	ldw	r5,-4(fp)
   8503c:	100d883a 	mov	r6,r2
   85040:	00851a40 	call	851a4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   85044:	1000021e 	bne	r2,zero,85050 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   85048:	e0bffd17 	ldw	r2,-12(fp)
   8504c:	00000806 	br	85070 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   85050:	e0bffd17 	ldw	r2,-12(fp)
   85054:	10800017 	ldw	r2,0(r2)
   85058:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   8505c:	e0fffd17 	ldw	r3,-12(fp)
   85060:	00800034 	movhi	r2,0
   85064:	10869a04 	addi	r2,r2,6760
   85068:	18bfcb1e 	bne	r3,r2,84f98 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   8506c:	0005883a 	mov	r2,zero
}
   85070:	e037883a 	mov	sp,fp
   85074:	dfc00117 	ldw	ra,4(sp)
   85078:	df000017 	ldw	fp,0(sp)
   8507c:	dec00204 	addi	sp,sp,8
   85080:	f800283a 	ret

00085084 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   85084:	defffa04 	addi	sp,sp,-24
   85088:	dfc00515 	stw	ra,20(sp)
   8508c:	df000415 	stw	fp,16(sp)
   85090:	dc000315 	stw	r16,12(sp)
   85094:	df000304 	addi	fp,sp,12
   85098:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   8509c:	00bffa04 	movi	r2,-24
   850a0:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   850a4:	e03ffd15 	stw	zero,-12(fp)
   850a8:	00002106 	br	85130 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   850ac:	04000034 	movhi	r16,0
   850b0:	84021e04 	addi	r16,r16,2168
   850b4:	e0bffd17 	ldw	r2,-12(fp)
   850b8:	1009883a 	mov	r4,r2
   850bc:	01400304 	movi	r5,12
   850c0:	0082d440 	call	82d44 <__mulsi3>
   850c4:	8085883a 	add	r2,r16,r2
   850c8:	10800017 	ldw	r2,0(r2)
   850cc:	1000151e 	bne	r2,zero,85124 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   850d0:	04000034 	movhi	r16,0
   850d4:	84021e04 	addi	r16,r16,2168
   850d8:	e0bffd17 	ldw	r2,-12(fp)
   850dc:	1009883a 	mov	r4,r2
   850e0:	01400304 	movi	r5,12
   850e4:	0082d440 	call	82d44 <__mulsi3>
   850e8:	8085883a 	add	r2,r16,r2
   850ec:	e0ffff17 	ldw	r3,-4(fp)
   850f0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   850f4:	00800034 	movhi	r2,0
   850f8:	10869e04 	addi	r2,r2,6776
   850fc:	10c00017 	ldw	r3,0(r2)
   85100:	e0bffd17 	ldw	r2,-12(fp)
   85104:	1880040e 	bge	r3,r2,85118 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   85108:	00800034 	movhi	r2,0
   8510c:	10869e04 	addi	r2,r2,6776
   85110:	e0fffd17 	ldw	r3,-12(fp)
   85114:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   85118:	e0bffd17 	ldw	r2,-12(fp)
   8511c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   85120:	00000606 	br	8513c <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   85124:	e0bffd17 	ldw	r2,-12(fp)
   85128:	10800044 	addi	r2,r2,1
   8512c:	e0bffd15 	stw	r2,-12(fp)
   85130:	e0bffd17 	ldw	r2,-12(fp)
   85134:	10800810 	cmplti	r2,r2,32
   85138:	103fdc1e 	bne	r2,zero,850ac <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   8513c:	e0bffe17 	ldw	r2,-8(fp)
}
   85140:	e037883a 	mov	sp,fp
   85144:	dfc00217 	ldw	ra,8(sp)
   85148:	df000117 	ldw	fp,4(sp)
   8514c:	dc000017 	ldw	r16,0(sp)
   85150:	dec00304 	addi	sp,sp,12
   85154:	f800283a 	ret

00085158 <atexit>:
   85158:	200b883a 	mov	r5,r4
   8515c:	000d883a 	mov	r6,zero
   85160:	0009883a 	mov	r4,zero
   85164:	000f883a 	mov	r7,zero
   85168:	00852201 	jmpi	85220 <__register_exitproc>

0008516c <exit>:
   8516c:	defffe04 	addi	sp,sp,-8
   85170:	000b883a 	mov	r5,zero
   85174:	dc000015 	stw	r16,0(sp)
   85178:	dfc00115 	stw	ra,4(sp)
   8517c:	2021883a 	mov	r16,r4
   85180:	00853500 	call	85350 <__call_exitprocs>
   85184:	00800034 	movhi	r2,0
   85188:	10869604 	addi	r2,r2,6744
   8518c:	11000017 	ldw	r4,0(r2)
   85190:	20800f17 	ldw	r2,60(r4)
   85194:	10000126 	beq	r2,zero,8519c <exit+0x30>
   85198:	103ee83a 	callr	r2
   8519c:	8009883a 	mov	r4,r16
   851a0:	00854f00 	call	854f0 <_exit>

000851a4 <memcmp>:
   851a4:	01c000c4 	movi	r7,3
   851a8:	3980192e 	bgeu	r7,r6,85210 <memcmp+0x6c>
   851ac:	2904b03a 	or	r2,r5,r4
   851b0:	11c4703a 	and	r2,r2,r7
   851b4:	10000f26 	beq	r2,zero,851f4 <memcmp+0x50>
   851b8:	20c00003 	ldbu	r3,0(r4)
   851bc:	28800003 	ldbu	r2,0(r5)
   851c0:	1880151e 	bne	r3,r2,85218 <memcmp+0x74>
   851c4:	31bfff84 	addi	r6,r6,-2
   851c8:	01ffffc4 	movi	r7,-1
   851cc:	00000406 	br	851e0 <memcmp+0x3c>
   851d0:	20c00003 	ldbu	r3,0(r4)
   851d4:	28800003 	ldbu	r2,0(r5)
   851d8:	31bfffc4 	addi	r6,r6,-1
   851dc:	18800e1e 	bne	r3,r2,85218 <memcmp+0x74>
   851e0:	21000044 	addi	r4,r4,1
   851e4:	29400044 	addi	r5,r5,1
   851e8:	31fff91e 	bne	r6,r7,851d0 <memcmp+0x2c>
   851ec:	0005883a 	mov	r2,zero
   851f0:	f800283a 	ret
   851f4:	20c00017 	ldw	r3,0(r4)
   851f8:	28800017 	ldw	r2,0(r5)
   851fc:	1880041e 	bne	r3,r2,85210 <memcmp+0x6c>
   85200:	31bfff04 	addi	r6,r6,-4
   85204:	21000104 	addi	r4,r4,4
   85208:	29400104 	addi	r5,r5,4
   8520c:	39bff936 	bltu	r7,r6,851f4 <memcmp+0x50>
   85210:	303fe91e 	bne	r6,zero,851b8 <memcmp+0x14>
   85214:	003ff506 	br	851ec <memcmp+0x48>
   85218:	1885c83a 	sub	r2,r3,r2
   8521c:	f800283a 	ret

00085220 <__register_exitproc>:
   85220:	defffa04 	addi	sp,sp,-24
   85224:	00800034 	movhi	r2,0
   85228:	10869604 	addi	r2,r2,6744
   8522c:	dc000315 	stw	r16,12(sp)
   85230:	14000017 	ldw	r16,0(r2)
   85234:	dc400415 	stw	r17,16(sp)
   85238:	dfc00515 	stw	ra,20(sp)
   8523c:	80805217 	ldw	r2,328(r16)
   85240:	2023883a 	mov	r17,r4
   85244:	10003e26 	beq	r2,zero,85340 <__register_exitproc+0x120>
   85248:	10c00117 	ldw	r3,4(r2)
   8524c:	020007c4 	movi	r8,31
   85250:	40c0180e 	bge	r8,r3,852b4 <__register_exitproc+0x94>
   85254:	00800034 	movhi	r2,0
   85258:	10800004 	addi	r2,r2,0
   8525c:	1000061e 	bne	r2,zero,85278 <__register_exitproc+0x58>
   85260:	00bfffc4 	movi	r2,-1
   85264:	dfc00517 	ldw	ra,20(sp)
   85268:	dc400417 	ldw	r17,16(sp)
   8526c:	dc000317 	ldw	r16,12(sp)
   85270:	dec00604 	addi	sp,sp,24
   85274:	f800283a 	ret
   85278:	01006404 	movi	r4,400
   8527c:	d9400015 	stw	r5,0(sp)
   85280:	d9800115 	stw	r6,4(sp)
   85284:	d9c00215 	stw	r7,8(sp)
   85288:	00000000 	call	0 <__alt_mem_onchip_data_memory>
   8528c:	d9400017 	ldw	r5,0(sp)
   85290:	d9800117 	ldw	r6,4(sp)
   85294:	d9c00217 	ldw	r7,8(sp)
   85298:	103ff126 	beq	r2,zero,85260 <__register_exitproc+0x40>
   8529c:	80c05217 	ldw	r3,328(r16)
   852a0:	10000115 	stw	zero,4(r2)
   852a4:	10c00015 	stw	r3,0(r2)
   852a8:	80805215 	stw	r2,328(r16)
   852ac:	10006215 	stw	zero,392(r2)
   852b0:	10006315 	stw	zero,396(r2)
   852b4:	10c00117 	ldw	r3,4(r2)
   852b8:	88000d1e 	bne	r17,zero,852f0 <__register_exitproc+0xd0>
   852bc:	19000084 	addi	r4,r3,2
   852c0:	2109883a 	add	r4,r4,r4
   852c4:	18c00044 	addi	r3,r3,1
   852c8:	2109883a 	add	r4,r4,r4
   852cc:	1109883a 	add	r4,r2,r4
   852d0:	10c00115 	stw	r3,4(r2)
   852d4:	0005883a 	mov	r2,zero
   852d8:	21400015 	stw	r5,0(r4)
   852dc:	dfc00517 	ldw	ra,20(sp)
   852e0:	dc400417 	ldw	r17,16(sp)
   852e4:	dc000317 	ldw	r16,12(sp)
   852e8:	dec00604 	addi	sp,sp,24
   852ec:	f800283a 	ret
   852f0:	02400044 	movi	r9,1
   852f4:	12806217 	ldw	r10,392(r2)
   852f8:	48d2983a 	sll	r9,r9,r3
   852fc:	19000804 	addi	r4,r3,32
   85300:	18d1883a 	add	r8,r3,r3
   85304:	2109883a 	add	r4,r4,r4
   85308:	4211883a 	add	r8,r8,r8
   8530c:	2109883a 	add	r4,r4,r4
   85310:	1109883a 	add	r4,r2,r4
   85314:	1211883a 	add	r8,r2,r8
   85318:	5254b03a 	or	r10,r10,r9
   8531c:	21c02215 	stw	r7,136(r4)
   85320:	41802215 	stw	r6,136(r8)
   85324:	12806215 	stw	r10,392(r2)
   85328:	01000084 	movi	r4,2
   8532c:	893fe31e 	bne	r17,r4,852bc <__register_exitproc+0x9c>
   85330:	11006317 	ldw	r4,396(r2)
   85334:	2252b03a 	or	r9,r4,r9
   85338:	12406315 	stw	r9,396(r2)
   8533c:	003fdf06 	br	852bc <__register_exitproc+0x9c>
   85340:	00800034 	movhi	r2,0
   85344:	1086f804 	addi	r2,r2,7136
   85348:	80805215 	stw	r2,328(r16)
   8534c:	003fbe06 	br	85248 <__register_exitproc+0x28>

00085350 <__call_exitprocs>:
   85350:	00800034 	movhi	r2,0
   85354:	10869604 	addi	r2,r2,6744
   85358:	10800017 	ldw	r2,0(r2)
   8535c:	defff304 	addi	sp,sp,-52
   85360:	df000b15 	stw	fp,44(sp)
   85364:	d8800015 	stw	r2,0(sp)
   85368:	10805204 	addi	r2,r2,328
   8536c:	dd400815 	stw	r21,32(sp)
   85370:	dfc00c15 	stw	ra,48(sp)
   85374:	ddc00a15 	stw	r23,40(sp)
   85378:	dd800915 	stw	r22,36(sp)
   8537c:	dd000715 	stw	r20,28(sp)
   85380:	dcc00615 	stw	r19,24(sp)
   85384:	dc800515 	stw	r18,20(sp)
   85388:	dc400415 	stw	r17,16(sp)
   8538c:	dc000315 	stw	r16,12(sp)
   85390:	d9000115 	stw	r4,4(sp)
   85394:	2839883a 	mov	fp,r5
   85398:	d8800215 	stw	r2,8(sp)
   8539c:	057fffc4 	movi	r21,-1
   853a0:	d8800017 	ldw	r2,0(sp)
   853a4:	ddc00217 	ldw	r23,8(sp)
   853a8:	14805217 	ldw	r18,328(r2)
   853ac:	90001726 	beq	r18,zero,8540c <__call_exitprocs+0xbc>
   853b0:	94400117 	ldw	r17,4(r18)
   853b4:	8c3fffc4 	addi	r16,r17,-1
   853b8:	80001116 	blt	r16,zero,85400 <__call_exitprocs+0xb0>
   853bc:	8c400044 	addi	r17,r17,1
   853c0:	8427883a 	add	r19,r16,r16
   853c4:	8c63883a 	add	r17,r17,r17
   853c8:	95802204 	addi	r22,r18,136
   853cc:	9ce7883a 	add	r19,r19,r19
   853d0:	8c63883a 	add	r17,r17,r17
   853d4:	b4e7883a 	add	r19,r22,r19
   853d8:	9463883a 	add	r17,r18,r17
   853dc:	e0001726 	beq	fp,zero,8543c <__call_exitprocs+0xec>
   853e0:	8c87c83a 	sub	r3,r17,r18
   853e4:	b0c7883a 	add	r3,r22,r3
   853e8:	18c01e17 	ldw	r3,120(r3)
   853ec:	1f001326 	beq	r3,fp,8543c <__call_exitprocs+0xec>
   853f0:	843fffc4 	addi	r16,r16,-1
   853f4:	9cffff04 	addi	r19,r19,-4
   853f8:	8c7fff04 	addi	r17,r17,-4
   853fc:	857ff71e 	bne	r16,r21,853dc <__call_exitprocs+0x8c>
   85400:	00800034 	movhi	r2,0
   85404:	10800004 	addi	r2,r2,0
   85408:	10002a1e 	bne	r2,zero,854b4 <__call_exitprocs+0x164>
   8540c:	dfc00c17 	ldw	ra,48(sp)
   85410:	df000b17 	ldw	fp,44(sp)
   85414:	ddc00a17 	ldw	r23,40(sp)
   85418:	dd800917 	ldw	r22,36(sp)
   8541c:	dd400817 	ldw	r21,32(sp)
   85420:	dd000717 	ldw	r20,28(sp)
   85424:	dcc00617 	ldw	r19,24(sp)
   85428:	dc800517 	ldw	r18,20(sp)
   8542c:	dc400417 	ldw	r17,16(sp)
   85430:	dc000317 	ldw	r16,12(sp)
   85434:	dec00d04 	addi	sp,sp,52
   85438:	f800283a 	ret
   8543c:	91000117 	ldw	r4,4(r18)
   85440:	88c00017 	ldw	r3,0(r17)
   85444:	213fffc4 	addi	r4,r4,-1
   85448:	24001526 	beq	r4,r16,854a0 <__call_exitprocs+0x150>
   8544c:	88000015 	stw	zero,0(r17)
   85450:	183fe726 	beq	r3,zero,853f0 <__call_exitprocs+0xa0>
   85454:	00800044 	movi	r2,1
   85458:	1408983a 	sll	r4,r2,r16
   8545c:	91406217 	ldw	r5,392(r18)
   85460:	95000117 	ldw	r20,4(r18)
   85464:	214a703a 	and	r5,r4,r5
   85468:	28000b26 	beq	r5,zero,85498 <__call_exitprocs+0x148>
   8546c:	91406317 	ldw	r5,396(r18)
   85470:	2148703a 	and	r4,r4,r5
   85474:	20000c1e 	bne	r4,zero,854a8 <__call_exitprocs+0x158>
   85478:	99400017 	ldw	r5,0(r19)
   8547c:	d9000117 	ldw	r4,4(sp)
   85480:	183ee83a 	callr	r3
   85484:	90c00117 	ldw	r3,4(r18)
   85488:	1d3fc51e 	bne	r3,r20,853a0 <__call_exitprocs+0x50>
   8548c:	b8c00017 	ldw	r3,0(r23)
   85490:	1cbfd726 	beq	r3,r18,853f0 <__call_exitprocs+0xa0>
   85494:	003fc206 	br	853a0 <__call_exitprocs+0x50>
   85498:	183ee83a 	callr	r3
   8549c:	003ff906 	br	85484 <__call_exitprocs+0x134>
   854a0:	94000115 	stw	r16,4(r18)
   854a4:	003fea06 	br	85450 <__call_exitprocs+0x100>
   854a8:	99000017 	ldw	r4,0(r19)
   854ac:	183ee83a 	callr	r3
   854b0:	003ff406 	br	85484 <__call_exitprocs+0x134>
   854b4:	90c00117 	ldw	r3,4(r18)
   854b8:	1800071e 	bne	r3,zero,854d8 <__call_exitprocs+0x188>
   854bc:	90c00017 	ldw	r3,0(r18)
   854c0:	18000926 	beq	r3,zero,854e8 <__call_exitprocs+0x198>
   854c4:	9009883a 	mov	r4,r18
   854c8:	b8c00015 	stw	r3,0(r23)
   854cc:	00000000 	call	0 <__alt_mem_onchip_data_memory>
   854d0:	bc800017 	ldw	r18,0(r23)
   854d4:	003fb506 	br	853ac <__call_exitprocs+0x5c>
   854d8:	90c00017 	ldw	r3,0(r18)
   854dc:	902f883a 	mov	r23,r18
   854e0:	1825883a 	mov	r18,r3
   854e4:	003fb106 	br	853ac <__call_exitprocs+0x5c>
   854e8:	0007883a 	mov	r3,zero
   854ec:	003ffb06 	br	854dc <__call_exitprocs+0x18c>

000854f0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   854f0:	defffc04 	addi	sp,sp,-16
   854f4:	df000315 	stw	fp,12(sp)
   854f8:	df000304 	addi	fp,sp,12
   854fc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   85500:	0001883a 	nop
   85504:	e0bfff17 	ldw	r2,-4(fp)
   85508:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
   8550c:	e0bffd17 	ldw	r2,-12(fp)
   85510:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   85514:	e0bffe17 	ldw	r2,-8(fp)
   85518:	10000226 	beq	r2,zero,85524 <_exit+0x34>
    ALT_SIM_FAIL();
   8551c:	002af070 	cmpltui	zero,zero,43969
   85520:	00000106 	br	85528 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   85524:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   85528:	003fff06 	br	85528 <_exit+0x38>

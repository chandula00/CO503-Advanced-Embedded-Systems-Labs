
Producer_1.elf:     file format elf32-littlenios2
Producer_1.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000501b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00050000 paddr 0x00050000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00050020 paddr 0x00050020 align 2**12
         filesz 0x0000c414 memsz 0x0000c414 flags r-x
    LOAD off    0x0000e000 vaddr 0x00010000 paddr 0x0005c434 align 2**12
         filesz 0x00001dd8 memsz 0x000020d8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00050000  00050000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00050020  00050020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000c27c  000501b8  000501b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000380  00010000  0005c434  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a58  00010380  0005c7b4  0000e380  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000300  00011dd8  0005e20c  0000fdd8  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0000fdd8  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000d60  00000000  00000000  0000fe00  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00022938  00000000  00000000  00010b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00008edd  00000000  00000000  00033498  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000a0cb  00000000  00000000  0003c375  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001878  00000000  00000000  00046440  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00002dc1  00000000  00000000  00047cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00010d16  00000000  00000000  0004aa79  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  0005b790  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a98  00000000  00000000  0005b7a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0005f230  2**0
                  CONTENTS, READONLY
 17 .cpu          00000004  00000000  00000000  0005f233  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0005f237  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0005f238  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0005f239  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0005f23d  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0005f241  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000a  00000000  00000000  0005f245  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000a  00000000  00000000  0005f24f  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000a  00000000  00000000  0005f259  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000003  00000000  00000000  0005f263  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000038  00000000  00000000  0005f266  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00066f5f  00000000  00000000  0005f29e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00050000 l    d  .entry	00000000 .entry
00050020 l    d  .exceptions	00000000 .exceptions
000501b8 l    d  .text	00000000 .text
00010000 l    d  .rodata	00000000 .rodata
00010380 l    d  .rwdata	00000000 .rwdata
00011dd8 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Producer_1_bsp//obj/HAL/src/crt0.o
000501f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00050094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 FIFO_1.c
00000000 l    df *ABS*	00000000 producer.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00050574 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00050830 l     F .text	00000034 __sprint_r
000100a6 l     O .rodata	00000010 blanks.3515
000100b6 l     O .rodata	00000010 zeroes.3516
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00052878 l     F .text	0000023c quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000542e8 l     F .text	00000008 __fp_lock
000542f0 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00010380 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
000100ec l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00010234 l     O .rodata	0000000c p05.2435
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
000588cc l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
00059c70 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00059d8c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00059db8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00059eb8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00059fac l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0005a098 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0005a274 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00011dc8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0005a4e8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0005a628 l     F .text	00000038 alt_dev_reg
00010d3c l     O .rwdata	00001060 jtag_uart0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0005a918 l     F .text	00000204 altera_avalon_jtag_uart_irq
0005ab1c l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0005b158 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0005b3b0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0005b83c l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0005b994 l     F .text	00000050 alt_get_errno
0005b9e4 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00056da8 g     F .text	00000074 _mprec_log10
00056e98 g     F .text	00000084 __any_on
00057b18 g     F .text	00000064 _isatty_r
0001011c g     O .rodata	00000028 __mprec_tinytens
0005a1bc g     F .text	00000078 alt_main
00059c2c g     F .text	00000044 __ashldi3
0005070c g     F .text	00000084 _puts_r
00011dd8 g     O .bss	00000004 writep
00011e48 g     O .bss	00000100 alt_irq
00057b7c g     F .text	0000006c _lseek_r
0005c7b4 g       *ABS*	00000000 __flash_rwdata_start
0005916c g     F .text	0000005c __eqdf2
00050408 g     F .text	00000078 FIFO_1_INIT
000120d8 g       *ABS*	00000000 __alt_heap_start
000506d0 g     F .text	0000003c printf
000576bc g     F .text	0000005c __sseek
0005438c g     F .text	0000010c __sinit
00055024 g     F .text	0000009c _setlocale_r
00054304 g     F .text	00000078 __sfmoreglue
0005a254 g     F .text	00000020 __malloc_unlock
00011ddc g     O .bss	00000004 readp
00055c64 g     F .text	0000018c memmove
0005437c g     F .text	00000010 _cleanup
00055ecc g     F .text	000000a8 _Balloc
00059224 g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
00050000 g       *ABS*	00000000 __alt_mem_onchip_instruction_memory0
00050000 g     F .entry	0000000c __reset
00050020 g       *ABS*	00000000 __flash_exceptions_start
00057ab0 g     F .text	00000068 _fstat_r
00011e04 g     O .bss	00000004 errno
00011e0c g     O .bss	00000004 alt_argv
00019d9c g       *ABS*	00000000 _gp
00010bbc g     O .rwdata	00000180 alt_fd_list
0005bde8 g     F .text	00000090 alt_find_dev
00055b24 g     F .text	00000140 memcpy
000542f8 g     F .text	0000000c _cleanup_r
00059348 g     F .text	000000d4 __floatsidf
0005b91c g     F .text	00000078 alt_io_redirect
000592ec g     F .text	0000005c __ltdf2
0005c434 g       *ABS*	00000000 __DTOR_END__
00050790 g     F .text	00000014 puts
00056d04 g     F .text	000000a4 __ratio
0005ad1c g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000506a4 g     F .text	0000002c _printf_r
00050694 g     F .text	00000008 __udivsi3
00059f08 g     F .text	000000a4 isatty
0001016c g     O .rodata	000000c8 __mprec_tens
000550c0 g     F .text	0000000c __locale_charset
00011e00 g     O .bss	00000004 __malloc_top_pad
00011da4 g     O .rwdata	00000004 __mb_cur_max
000550cc g     F .text	0000000c _localeconv_r
000562fc g     F .text	0000003c __i2b
000549e0 g     F .text	000004e4 __sfvwrite_r
0005757c g     F .text	00000064 _sbrk_r
00011de0 g     O .bss	00000004 fullp
00057be8 g     F .text	0000006c _read_r
00010780 g     O .rwdata	0000000c __lc_ctype
00011dc0 g     O .rwdata	00000004 alt_max_fd
00059a14 g     F .text	00000104 __unpack_d
00057960 g     F .text	0000013c _fclose_r
000542b8 g     F .text	00000030 fflush
00011dfc g     O .bss	00000004 __malloc_max_sbrked_mem
00058c20 g     F .text	00000054 __adddf3
00056a78 g     F .text	00000148 __b2d
000582a4 g     F .text	00000628 __umoddi3
0005a0e8 g     F .text	000000d4 lseek
00011d9c g     O .rwdata	00000004 _global_impure_ptr
00056f1c g     F .text	000005fc _realloc_r
000120d8 g       *ABS*	00000000 __bss_end
0005b74c g     F .text	000000f0 alt_iic_isr_register
0005bcc4 g     F .text	00000104 alt_tick
00057c54 g     F .text	00000650 __udivdi3
00010144 g     O .rodata	00000028 __mprec_bigtens
000560e0 g     F .text	00000104 __s2b
000594f0 g     F .text	0000011c __floatunsidf
00056818 g     F .text	00000058 __mcmp
000545a4 g     F .text	00000018 __fp_lock_all
0005b700 g     F .text	0000004c alt_ic_irq_enabled
00050498 g     F .text	0000009c producer
0005bc2c g     F .text	00000098 alt_alarm_stop
00011e14 g     O .bss	00000004 alt_irq_active
000500ec g     F .exceptions	000000cc alt_irq_handler
00010b94 g     O .rwdata	00000028 alt_dev_null
0005b394 g     F .text	0000001c alt_dcache_flush_all
000561e4 g     F .text	00000068 __hi0bits
0005941c g     F .text	000000d4 __fixdfsi
00011dd8 g       *ABS*	00000000 __ram_rwdata_end
00011db8 g     O .rwdata	00000008 alt_dev_list
0005a538 g     F .text	000000f0 write
00010380 g       *ABS*	00000000 __ram_rodata_end
00059e08 g     F .text	000000b0 fstat
00059be8 g     F .text	00000044 __lshrdi3
00056590 g     F .text	0000012c __pow5mult
00011df4 g     O .bss	00000004 __nlocale_changed
0005069c g     F .text	00000008 __umodsi3
000120d8 g       *ABS*	00000000 end
0005a858 g     F .text	000000c0 altera_avalon_jtag_uart_init
0005c434 g       *ABS*	00000000 __CTOR_LIST__
00028000 g       *ABS*	00000000 __alt_stack_pointer
0005b1cc g     F .text	00000088 alt_avalon_timer_sc_init
00059744 g     F .text	000000ac __clzsi2
0005af34 g     F .text	00000224 altera_avalon_jtag_uart_write
00054594 g     F .text	00000004 __sfp_lock_acquire
00055a2c g     F .text	000000f8 memchr
00050864 g     F .text	00001e7c ___vfprintf_internal_r
00054710 g     F .text	000002d0 _free_r
0005c258 g     F .text	000001a0 __call_exitprocs
00011df0 g     O .bss	00000004 __mlocale_changed
00011da8 g     O .rwdata	00000004 __malloc_sbrk_base
000501b8 g     F .text	0000003c _start
00011e18 g     O .bss	00000004 _alt_tick_rate
000566bc g     F .text	0000015c __lshift
00011e1c g     O .bss	00000004 _alt_nticks
0005a2c4 g     F .text	000000f4 read
0005a694 g     F .text	00000060 alt_sys_init
0005c128 g     F .text	00000130 __register_exitproc
00056338 g     F .text	00000258 __multiply
0005abc0 g     F .text	00000068 altera_avalon_jtag_uart_close
0005960c g     F .text	00000028 __mulsi3
00010380 g       *ABS*	00000000 __ram_rwdata_start
00010000 g       *ABS*	00000000 __ram_rodata_start
00011e20 g     O .bss	00000028 __malloc_current_mallinfo
00056bc0 g     F .text	00000144 __d2b
0005a6f4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0005bf8c g     F .text	000000d4 alt_get_fd
00059b18 g     F .text	000000d0 __fpcmp_parts_d
000578fc g     F .text	00000064 _close_r
0005c0ac g     F .text	0000007c memcmp
0005a7b4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000120d8 g       *ABS*	00000000 __alt_stack_base
0005a804 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00052704 g     F .text	00000174 __swsetup_r
00058fb8 g     F .text	000001b4 __divdf3
00054498 g     F .text	000000fc __sfp
00056e1c g     F .text	0000007c __copybits
0001078c g     O .rwdata	00000408 __malloc_av_
000545a0 g     F .text	00000004 __sinit_lock_release
00058cd4 g     F .text	000002e4 __muldf3
000575e0 g     F .text	00000054 __sread
0005be78 g     F .text	00000114 alt_find_file
0005b400 g     F .text	000000a0 alt_dev_llist_insert
0005a234 g     F .text	00000020 __malloc_lock
0005a438 g     F .text	000000b0 sbrk
000540d0 g     F .text	000001e8 _fflush_r
00057830 g     F .text	000000cc _calloc_r
00011dd8 g       *ABS*	00000000 __bss_start
00055df0 g     F .text	000000dc memset
00050480 g     F .text	00000018 main
00011e10 g     O .bss	00000004 alt_envp
00011df8 g     O .bss	00000004 __malloc_max_total_mem
0005a754 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00057718 g     F .text	00000008 __sclose
00010000 g       *ABS*	00000000 __alt_heap_limit
00057a9c g     F .text	00000014 fclose
00011f48 g     O .bss	00000190 _atexit0
00052ab4 g     F .text	0000161c _dtoa_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_data_memory
000552a8 g     F .text	00000784 _malloc_r
00011dc4 g     O .rwdata	00000004 alt_errno
00054ec4 g     F .text	000000a8 _fwalk
000501f4 g     F .text	0000011c WRITE_FIFO_1
000505e8 g     F .text	00000050 __divsi3
00010240 g     O .rodata	00000014 __thenan_df
000545d4 g     F .text	0000013c _malloc_trim_r
0005c434 g       *ABS*	00000000 __CTOR_END__
00057720 g     F .text	000000a4 strcmp
0005c434 g       *ABS*	00000000 __flash_rodata_start
0005c434 g       *ABS*	00000000 __DTOR_LIST__
00050534 g     F .text	00000040 delay
000591c8 g     F .text	0000005c __nedf2
0005a660 g     F .text	00000034 alt_irq_init
0005a3b8 g     F .text	00000080 alt_release_fd
00010254 g     O .rodata	00000100 __clz_tab
00011dec g     O .bss	00000004 _PathLocale
0005c060 g     F .text	00000014 atexit
000577c4 g     F .text	0000006c _write_r
000550d8 g     F .text	0000001c setlocale
00011da0 g     O .rwdata	00000004 _impure_ptr
00011e08 g     O .bss	00000004 alt_argc
0005b4fc g     F .text	0000005c _do_dtors
00050020 g       .exceptions	00000000 alt_irq_entry
00056a18 g     F .text	00000060 __ulp
00057518 g     F .text	00000038 __isinfd
000545bc g     F .text	00000018 __fp_unlock_all
00011db0 g     O .rwdata	00000008 alt_fs_list
00050020 g       *ABS*	00000000 __ram_exceptions_start
000550f4 g     F .text	0000000c localeconv
0005b574 g     F .text	00000050 alt_ic_isr_register
00011dd8 g       *ABS*	00000000 _edata
000120d8 g       *ABS*	00000000 _end
000501b8 g       *ABS*	00000000 __ram_exceptions_end
0005ac28 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0005b660 g     F .text	000000a0 alt_ic_irq_disable
00057634 g     F .text	00000088 __swrite
00011dac g     O .rwdata	00000004 __malloc_trim_threshold
0005bdc8 g     F .text	00000020 altera_nios2_qsys_irq_init
0005c074 g     F .text	00000038 exit
00054f6c g     F .text	000000b8 _fwalk_reent
00056870 g     F .text	000001a8 __mdiff
00050638 g     F .text	0000005c __modsi3
00028000 g       *ABS*	00000000 __alt_data_end
00050020 g     F .exceptions	00000000 alt_exception
00054598 g     F .text	00000004 __sfp_lock_release
0005c3f8 g     F .text	0000003c _exit
00057550 g     F .text	0000002c __isnand
0005b254 g     F .text	00000140 alt_alarm_start
00059634 g     F .text	00000110 __muldi3
00055100 g     F .text	000001a8 __smakebuf_r
000507a4 g     F .text	0000008c strlen
0005bad4 g     F .text	00000158 open
00059288 g     F .text	00000064 __gedf2
00050310 g     F .text	000000f8 READ_FIFO_1
0005b558 g     F .text	0000001c alt_icache_flush_all
00011dcc g     O .rwdata	00000004 alt_priority_mask
00011de4 g     O .bss	00000004 emptyp
0005b5c4 g     F .text	0000009c alt_ic_irq_enable
000526e0 g     F .text	00000024 __vfprintf_internal
00058c74 g     F .text	00000060 __subdf3
0005624c g     F .text	000000b0 __lo0bits
00011dd0 g     O .rwdata	00000008 alt_alarm_list
0005b4a0 g     F .text	0000005c _do_ctors
00011de8 g     O .bss	00000004 countp
00059cc0 g     F .text	000000cc close
0005a018 g     F .text	00000080 alt_load
000597f0 g     F .text	00000224 __pack_d
00000000  w      *UND*	00000000 free
0005459c g     F .text	00000004 __sinit_lock_acquire
00055f9c g     F .text	00000144 __multadd
00055f74 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00050000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   50000:	00400174 	movhi	at,5
    ori r1, r1, %lo(_start)
   50004:	08406e14 	ori	at,at,440
    jmp r1
   50008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00050020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   50020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   50024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   50028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   5002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   50030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   50034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   50038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   5003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   50040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   50044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   50048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   5004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   50050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   50054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   50058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   5005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   50060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   50064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   50068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   5006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   50070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   50074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   50078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   5007c:	10000326 	beq	r2,zero,5008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   50080:	20000226 	beq	r4,zero,5008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   50084:	00500ec0 	call	500ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   50088:	00000306 	br	50098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   5008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   50090:	e8bfff17 	ldw	r2,-4(ea)

00050094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   50094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   50098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   5009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   500a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   500a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   500a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   500ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   500b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   500b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   500b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   500bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   500c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   500c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   500c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   500cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   500d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   500d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   500d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   500dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   500e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   500e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   500e8:	ef80083a 	eret

000500ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   500ec:	defff904 	addi	sp,sp,-28
   500f0:	dfc00615 	stw	ra,24(sp)
   500f4:	df000515 	stw	fp,20(sp)
   500f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   500fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   50100:	0005313a 	rdctl	r2,ipending
   50104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   50108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   5010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   50110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   50114:	00800044 	movi	r2,1
   50118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   5011c:	e0fffb17 	ldw	r3,-20(fp)
   50120:	e0bffc17 	ldw	r2,-16(fp)
   50124:	1884703a 	and	r2,r3,r2
   50128:	10001726 	beq	r2,zero,50188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   5012c:	00c00074 	movhi	r3,1
   50130:	18c79204 	addi	r3,r3,7752
   50134:	e0bffd17 	ldw	r2,-12(fp)
   50138:	100490fa 	slli	r2,r2,3
   5013c:	1885883a 	add	r2,r3,r2
   50140:	10c00017 	ldw	r3,0(r2)
   50144:	01000074 	movhi	r4,1
   50148:	21079204 	addi	r4,r4,7752
   5014c:	e0bffd17 	ldw	r2,-12(fp)
   50150:	100490fa 	slli	r2,r2,3
   50154:	2085883a 	add	r2,r4,r2
   50158:	10800104 	addi	r2,r2,4
   5015c:	10800017 	ldw	r2,0(r2)
   50160:	1009883a 	mov	r4,r2
   50164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   50168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   5016c:	0005313a 	rdctl	r2,ipending
   50170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   50174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   50178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   5017c:	e0bffb17 	ldw	r2,-20(fp)
   50180:	103fe31e 	bne	r2,zero,50110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   50184:	00000706 	br	501a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   50188:	e0bffc17 	ldw	r2,-16(fp)
   5018c:	1085883a 	add	r2,r2,r2
   50190:	e0bffc15 	stw	r2,-16(fp)
      i++;
   50194:	e0bffd17 	ldw	r2,-12(fp)
   50198:	10800044 	addi	r2,r2,1
   5019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   501a0:	003fde06 	br	5011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   501a4:	e037883a 	mov	sp,fp
   501a8:	dfc00117 	ldw	ra,4(sp)
   501ac:	df000017 	ldw	fp,0(sp)
   501b0:	dec00204 	addi	sp,sp,8
   501b4:	f800283a 	ret

Disassembly of section .text:

000501b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   501b8:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   501bc:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
   501c0:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   501c4:	d6a76714 	ori	gp,gp,40348
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   501c8:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   501cc:	10877614 	ori	r2,r2,7640

    movhi r3, %hi(__bss_end)
   501d0:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   501d4:	18c83614 	ori	r3,r3,8408

    beq r2, r3, 1f
   501d8:	10c00326 	beq	r2,r3,501e8 <_start+0x30>

0:
    stw zero, (r2)
   501dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   501e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   501e4:	10fffd36 	bltu	r2,r3,501dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   501e8:	005a0180 	call	5a018 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   501ec:	005a1bc0 	call	5a1bc <alt_main>

000501f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   501f0:	003fff06 	br	501f0 <alt_after_alt_main>

000501f4 <WRITE_FIFO_1>:
 */

#include "FIFO_1.h"

void WRITE_FIFO_1(int *buffer)
{
   501f4:	defffd04 	addi	sp,sp,-12
   501f8:	dfc00215 	stw	ra,8(sp)
   501fc:	df000115 	stw	fp,4(sp)
   50200:	df000104 	addi	fp,sp,4
   50204:	e13fff15 	stw	r4,-4(fp)
	// Wait if the fifo is full
	while(IORD_32DIRECT(MEM_BASE,fullp)==0x1){}
   50208:	0001883a 	nop
   5020c:	d0a01117 	ldw	r2,-32700(gp)
   50210:	10800044 	addi	r2,r2,1
   50214:	10800037 	ldwio	r2,0(r2)
   50218:	10800060 	cmpeqi	r2,r2,1
   5021c:	103ffb1e 	bne	r2,zero,5020c <WRITE_FIFO_1+0x18>

	// Write the data to FIFO
	IOWR_32DIRECT(MEM_BASE,writep,*buffer);
   50220:	d0a00f17 	ldw	r2,-32708(gp)
   50224:	10800044 	addi	r2,r2,1
   50228:	e0ffff17 	ldw	r3,-4(fp)
   5022c:	18c00017 	ldw	r3,0(r3)
   50230:	10c00035 	stwio	r3,0(r2)

	// Update the write pointer
	writep += UNIT_SIZE;
   50234:	d0a00f17 	ldw	r2,-32708(gp)
   50238:	10800804 	addi	r2,r2,32
   5023c:	d0a00f15 	stw	r2,-32708(gp)

	printf("Counter : [%i]\t CAPACITY : [%i]\n ", IORD_32DIRECT(MEM_BASE,countp),CAPACITY);
   50240:	d0a01317 	ldw	r2,-32692(gp)
   50244:	10800044 	addi	r2,r2,1
   50248:	10800037 	ldwio	r2,0(r2)
   5024c:	01000074 	movhi	r4,1
   50250:	21000004 	addi	r4,r4,0
   50254:	100b883a 	mov	r5,r2
   50258:	01800284 	movi	r6,10
   5025c:	00506d00 	call	506d0 <printf>

	if(writep==(CAPACITY*UNIT_SIZE)+STARTP){
   50260:	d0a00f17 	ldw	r2,-32708(gp)
   50264:	10805318 	cmpnei	r2,r2,332
   50268:	1000021e 	bne	r2,zero,50274 <WRITE_FIFO_1+0x80>
		writep = STARTP;
   5026c:	00800304 	movi	r2,12
   50270:	d0a00f15 	stw	r2,-32708(gp)
	}

	// Update "count" in shared mem
	IOWR_32DIRECT(MEM_BASE, countp, IORD_32DIRECT(MEM_BASE,countp) + 0x1);
   50274:	d0a01317 	ldw	r2,-32692(gp)
   50278:	10800044 	addi	r2,r2,1
   5027c:	d0e01317 	ldw	r3,-32692(gp)
   50280:	18c00044 	addi	r3,r3,1
   50284:	18c00037 	ldwio	r3,0(r3)
   50288:	18c00044 	addi	r3,r3,1
   5028c:	10c00035 	stwio	r3,0(r2)

	// Update the "full?" and "empty?" flags accordingly
	// Set the full flag if FIFO is now full
	// Reset the empty flag if FIFO now has 1 enrty
	if(IORD_32DIRECT(MEM_BASE,countp)==CAPACITY){
   50290:	d0a01317 	ldw	r2,-32692(gp)
   50294:	10800044 	addi	r2,r2,1
   50298:	10800037 	ldwio	r2,0(r2)
   5029c:	10800298 	cmpnei	r2,r2,10
   502a0:	1000051e 	bne	r2,zero,502b8 <WRITE_FIFO_1+0xc4>
		IOWR_32DIRECT(MEM_BASE,fullp,0x1);
   502a4:	d0a01117 	ldw	r2,-32700(gp)
   502a8:	10800044 	addi	r2,r2,1
   502ac:	00c00044 	movi	r3,1
   502b0:	10c00035 	stwio	r3,0(r2)
   502b4:	00000406 	br	502c8 <WRITE_FIFO_1+0xd4>
	}else{
		IOWR_32DIRECT(MEM_BASE,fullp,0x0);
   502b8:	d0a01117 	ldw	r2,-32700(gp)
   502bc:	10800044 	addi	r2,r2,1
   502c0:	0007883a 	mov	r3,zero
   502c4:	10c00035 	stwio	r3,0(r2)
	}
	if(IORD_32DIRECT(MEM_BASE,countp)==0x0){
   502c8:	d0a01317 	ldw	r2,-32692(gp)
   502cc:	10800044 	addi	r2,r2,1
   502d0:	10800037 	ldwio	r2,0(r2)
   502d4:	1000051e 	bne	r2,zero,502ec <WRITE_FIFO_1+0xf8>
		IOWR_32DIRECT(MEM_BASE,emptyp,0x1);
   502d8:	d0a01217 	ldw	r2,-32696(gp)
   502dc:	10800044 	addi	r2,r2,1
   502e0:	00c00044 	movi	r3,1
   502e4:	10c00035 	stwio	r3,0(r2)
   502e8:	00000406 	br	502fc <WRITE_FIFO_1+0x108>
	}else{
		IOWR_32DIRECT(MEM_BASE,emptyp,0x0);
   502ec:	d0a01217 	ldw	r2,-32696(gp)
   502f0:	10800044 	addi	r2,r2,1
   502f4:	0007883a 	mov	r3,zero
   502f8:	10c00035 	stwio	r3,0(r2)
	}
}
   502fc:	e037883a 	mov	sp,fp
   50300:	dfc00117 	ldw	ra,4(sp)
   50304:	df000017 	ldw	fp,0(sp)
   50308:	dec00204 	addi	sp,sp,8
   5030c:	f800283a 	ret

00050310 <READ_FIFO_1>:

void READ_FIFO_1(int *buffer)
{
   50310:	defffc04 	addi	sp,sp,-16
   50314:	dfc00315 	stw	ra,12(sp)
   50318:	df000215 	stw	fp,8(sp)
   5031c:	df000204 	addi	fp,sp,8
   50320:	e13fff15 	stw	r4,-4(fp)
	// Wait if the fifo is empty
	while(IORD_32DIRECT(MEM_BASE,emptyp)==0x1){}
   50324:	0001883a 	nop
   50328:	d0a01217 	ldw	r2,-32696(gp)
   5032c:	10800044 	addi	r2,r2,1
   50330:	10800037 	ldwio	r2,0(r2)
   50334:	10800060 	cmpeqi	r2,r2,1
   50338:	103ffb1e 	bne	r2,zero,50328 <READ_FIFO_1+0x18>

	// Read the data
	buffer = IORD_32DIRECT(MEM_BASE,readp);
   5033c:	d0a01017 	ldw	r2,-32704(gp)
   50340:	10800044 	addi	r2,r2,1
   50344:	10800037 	ldwio	r2,0(r2)
   50348:	e0bffe15 	stw	r2,-8(fp)

	// Update the read pointer
	readp += UNIT_SIZE;
   5034c:	d0a01017 	ldw	r2,-32704(gp)
   50350:	10800804 	addi	r2,r2,32
   50354:	d0a01015 	stw	r2,-32704(gp)
	readp = readp%(CAPACITY*UNIT_SIZE);
   50358:	d0a01017 	ldw	r2,-32704(gp)
   5035c:	1009883a 	mov	r4,r2
   50360:	01405004 	movi	r5,320
   50364:	00506380 	call	50638 <__modsi3>
   50368:	d0a01015 	stw	r2,-32704(gp)

	// Update "count" in shared mem
	IOWR_32DIRECT(MEM_BASE, countp, IORD_32DIRECT(MEM_BASE,countp) - 0x1);
   5036c:	d0a01317 	ldw	r2,-32692(gp)
   50370:	10800044 	addi	r2,r2,1
   50374:	d0e01317 	ldw	r3,-32692(gp)
   50378:	18c00044 	addi	r3,r3,1
   5037c:	18c00037 	ldwio	r3,0(r3)
   50380:	18ffffc4 	addi	r3,r3,-1
   50384:	10c00035 	stwio	r3,0(r2)

	// Update the "full?" and "empty?" flags accordingly
	// Set the empty flag if FIFO is now empty
	// Reset the full flag if FIFO now has 1 entry less than capacity
	if(IORD_32DIRECT(MEM_BASE,countp)==CAPACITY){
   50388:	d0a01317 	ldw	r2,-32692(gp)
   5038c:	10800044 	addi	r2,r2,1
   50390:	10800037 	ldwio	r2,0(r2)
   50394:	10800298 	cmpnei	r2,r2,10
   50398:	1000051e 	bne	r2,zero,503b0 <READ_FIFO_1+0xa0>
		IOWR_32DIRECT(MEM_BASE,fullp,0x1);
   5039c:	d0a01117 	ldw	r2,-32700(gp)
   503a0:	10800044 	addi	r2,r2,1
   503a4:	00c00044 	movi	r3,1
   503a8:	10c00035 	stwio	r3,0(r2)
   503ac:	00000406 	br	503c0 <READ_FIFO_1+0xb0>
	}else{
		IOWR_32DIRECT(MEM_BASE,fullp,0x0);
   503b0:	d0a01117 	ldw	r2,-32700(gp)
   503b4:	10800044 	addi	r2,r2,1
   503b8:	0007883a 	mov	r3,zero
   503bc:	10c00035 	stwio	r3,0(r2)
	}
	if(IORD_32DIRECT(MEM_BASE,countp)==0x0){
   503c0:	d0a01317 	ldw	r2,-32692(gp)
   503c4:	10800044 	addi	r2,r2,1
   503c8:	10800037 	ldwio	r2,0(r2)
   503cc:	1000051e 	bne	r2,zero,503e4 <READ_FIFO_1+0xd4>
		IOWR_32DIRECT(MEM_BASE,emptyp,0x1);
   503d0:	d0a01217 	ldw	r2,-32696(gp)
   503d4:	10800044 	addi	r2,r2,1
   503d8:	00c00044 	movi	r3,1
   503dc:	10c00035 	stwio	r3,0(r2)
   503e0:	00000406 	br	503f4 <READ_FIFO_1+0xe4>
	}else{
		IOWR_32DIRECT(MEM_BASE,emptyp,0x0);
   503e4:	d0a01217 	ldw	r2,-32696(gp)
   503e8:	10800044 	addi	r2,r2,1
   503ec:	0007883a 	mov	r3,zero
   503f0:	10c00035 	stwio	r3,0(r2)
	}
}
   503f4:	e037883a 	mov	sp,fp
   503f8:	dfc00117 	ldw	ra,4(sp)
   503fc:	df000017 	ldw	fp,0(sp)
   50400:	dec00204 	addi	sp,sp,8
   50404:	f800283a 	ret

00050408 <FIFO_1_INIT>:

// Initialization
void FIFO_1_INIT()
{
   50408:	deffff04 	addi	sp,sp,-4
   5040c:	df000015 	stw	fp,0(sp)
   50410:	d839883a 	mov	fp,sp
	writep = STARTP; // Initially the FIFO is empty, so start writing at the first slot
   50414:	00800304 	movi	r2,12
   50418:	d0a00f15 	stw	r2,-32708(gp)
	readp  = STARTP;
   5041c:	00800304 	movi	r2,12
   50420:	d0a01015 	stw	r2,-32704(gp)
	fullp   = 0x0; // SET THIS OFFSET (If there are previous FIFOs in shared memory, use Prev Fifo's STARTP + Prev Fifo's size)
   50424:	d0201115 	stw	zero,-32700(gp)
	emptyp   = fullp + UNIT_SIZE;
   50428:	d0a01117 	ldw	r2,-32700(gp)
   5042c:	10800804 	addi	r2,r2,32
   50430:	d0a01215 	stw	r2,-32696(gp)
	countp  = emptyp + UNIT_SIZE;
   50434:	d0a01217 	ldw	r2,-32696(gp)
   50438:	10800804 	addi	r2,r2,32
   5043c:	d0a01315 	stw	r2,-32692(gp)

	// Assigning values for the flags.
	IOWR_32DIRECT(MEM_BASE, fullp, 0x0);
   50440:	d0a01117 	ldw	r2,-32700(gp)
   50444:	10800044 	addi	r2,r2,1
   50448:	0007883a 	mov	r3,zero
   5044c:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(MEM_BASE, emptyp, 0x1); // The fifo is empty at the start
   50450:	d0a01217 	ldw	r2,-32696(gp)
   50454:	10800044 	addi	r2,r2,1
   50458:	00c00044 	movi	r3,1
   5045c:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(MEM_BASE, countp, 0x0); // The fifo is empty at the start
   50460:	d0a01317 	ldw	r2,-32692(gp)
   50464:	10800044 	addi	r2,r2,1
   50468:	0007883a 	mov	r3,zero
   5046c:	10c00035 	stwio	r3,0(r2)
}
   50470:	e037883a 	mov	sp,fp
   50474:	df000017 	ldw	fp,0(sp)
   50478:	dec00104 	addi	sp,sp,4
   5047c:	f800283a 	ret

00050480 <main>:
void delay(int n);
int producer();


int main()
{
   50480:	defffe04 	addi	sp,sp,-8
   50484:	dfc00115 	stw	ra,4(sp)
   50488:	df000015 	stw	fp,0(sp)
   5048c:	d839883a 	mov	fp,sp
//	alt_u32 sw_fast_timeA, sw_fast_timeB;
//	alt_timestamp_start();
//	sw_fast_timeA = alt_timestamp();


	producer();
   50490:	00504980 	call	50498 <producer>

	while(1) { }
   50494:	003fff06 	br	50494 <main+0x14>

00050498 <producer>:
	return 0;
}


int producer()
{
   50498:	defffd04 	addi	sp,sp,-12
   5049c:	dfc00215 	stw	ra,8(sp)
   504a0:	df000115 	stw	fp,4(sp)
   504a4:	df000104 	addi	fp,sp,4
	printf("Producer starting..\n");
   504a8:	01000074 	movhi	r4,1
   504ac:	21000904 	addi	r4,r4,36
   504b0:	00507900 	call	50790 <puts>

	FIFO_1_INIT(); // Initialize the FIFO
   504b4:	00504080 	call	50408 <FIFO_1_INIT>

	int j = 5;
   504b8:	00800144 	movi	r2,5
   504bc:	e0bfff15 	stw	r2,-4(fp)
	while(j<=500)
   504c0:	00001006 	br	50504 <producer+0x6c>
	{
		delay(100000);
   504c4:	010000b4 	movhi	r4,2
   504c8:	2121a804 	addi	r4,r4,-31072
   504cc:	00505340 	call	50534 <delay>
		WRITE_FIFO_1(&j); // Write to the producer-consumer fifo
   504d0:	e13fff04 	addi	r4,fp,-4
   504d4:	00501f40 	call	501f4 <WRITE_FIFO_1>
		delay(100000);
   504d8:	010000b4 	movhi	r4,2
   504dc:	2121a804 	addi	r4,r4,-31072
   504e0:	00505340 	call	50534 <delay>

		printf("Producer sent [%i]\n",j);
   504e4:	e0bfff17 	ldw	r2,-4(fp)
   504e8:	01000074 	movhi	r4,1
   504ec:	21000e04 	addi	r4,r4,56
   504f0:	100b883a 	mov	r5,r2
   504f4:	00506d00 	call	506d0 <printf>
		j+=10;
   504f8:	e0bfff17 	ldw	r2,-4(fp)
   504fc:	10800284 	addi	r2,r2,10
   50500:	e0bfff15 	stw	r2,-4(fp)
	printf("Producer starting..\n");

	FIFO_1_INIT(); // Initialize the FIFO

	int j = 5;
	while(j<=500)
   50504:	e0bfff17 	ldw	r2,-4(fp)
   50508:	10807d50 	cmplti	r2,r2,501
   5050c:	103fed1e 	bne	r2,zero,504c4 <producer+0x2c>

		printf("Producer sent [%i]\n",j);
		j+=10;
	}

	printf("Producer finished..\n");
   50510:	01000074 	movhi	r4,1
   50514:	21001304 	addi	r4,r4,76
   50518:	00507900 	call	50790 <puts>
	return 0;
   5051c:	0005883a 	mov	r2,zero
}
   50520:	e037883a 	mov	sp,fp
   50524:	dfc00117 	ldw	ra,4(sp)
   50528:	df000017 	ldw	fp,0(sp)
   5052c:	dec00204 	addi	sp,sp,8
   50530:	f800283a 	ret

00050534 <delay>:


void delay(int n)
{
   50534:	defffd04 	addi	sp,sp,-12
   50538:	df000215 	stw	fp,8(sp)
   5053c:	df000204 	addi	fp,sp,8
   50540:	e13fff15 	stw	r4,-4(fp)
	int i;
	for(i=n; i>0; i--)
   50544:	e0bfff17 	ldw	r2,-4(fp)
   50548:	e0bffe15 	stw	r2,-8(fp)
   5054c:	00000306 	br	5055c <delay+0x28>
   50550:	e0bffe17 	ldw	r2,-8(fp)
   50554:	10bfffc4 	addi	r2,r2,-1
   50558:	e0bffe15 	stw	r2,-8(fp)
   5055c:	e0bffe17 	ldw	r2,-8(fp)
   50560:	00bffb16 	blt	zero,r2,50550 <delay+0x1c>
	{
		continue;
	}
}
   50564:	e037883a 	mov	sp,fp
   50568:	df000017 	ldw	fp,0(sp)
   5056c:	dec00104 	addi	sp,sp,4
   50570:	f800283a 	ret

00050574 <udivmodsi4>:
   50574:	2005883a 	mov	r2,r4
   50578:	2900182e 	bgeu	r5,r4,505dc <udivmodsi4+0x68>
   5057c:	28001716 	blt	r5,zero,505dc <udivmodsi4+0x68>
   50580:	01000804 	movi	r4,32
   50584:	00c00044 	movi	r3,1
   50588:	00000206 	br	50594 <udivmodsi4+0x20>
   5058c:	20001126 	beq	r4,zero,505d4 <udivmodsi4+0x60>
   50590:	28000516 	blt	r5,zero,505a8 <udivmodsi4+0x34>
   50594:	294b883a 	add	r5,r5,r5
   50598:	213fffc4 	addi	r4,r4,-1
   5059c:	18c7883a 	add	r3,r3,r3
   505a0:	28bffa36 	bltu	r5,r2,5058c <udivmodsi4+0x18>
   505a4:	18000b26 	beq	r3,zero,505d4 <udivmodsi4+0x60>
   505a8:	0009883a 	mov	r4,zero
   505ac:	11400236 	bltu	r2,r5,505b8 <udivmodsi4+0x44>
   505b0:	1145c83a 	sub	r2,r2,r5
   505b4:	20c8b03a 	or	r4,r4,r3
   505b8:	1806d07a 	srli	r3,r3,1
   505bc:	280ad07a 	srli	r5,r5,1
   505c0:	183ffa1e 	bne	r3,zero,505ac <udivmodsi4+0x38>
   505c4:	3000021e 	bne	r6,zero,505d0 <udivmodsi4+0x5c>
   505c8:	2005883a 	mov	r2,r4
   505cc:	f800283a 	ret
   505d0:	f800283a 	ret
   505d4:	0009883a 	mov	r4,zero
   505d8:	003ffa06 	br	505c4 <udivmodsi4+0x50>
   505dc:	00c00044 	movi	r3,1
   505e0:	0009883a 	mov	r4,zero
   505e4:	003ff106 	br	505ac <udivmodsi4+0x38>

000505e8 <__divsi3>:
   505e8:	defffe04 	addi	sp,sp,-8
   505ec:	dfc00115 	stw	ra,4(sp)
   505f0:	dc000015 	stw	r16,0(sp)
   505f4:	20000a16 	blt	r4,zero,50620 <__divsi3+0x38>
   505f8:	0021883a 	mov	r16,zero
   505fc:	28000b16 	blt	r5,zero,5062c <__divsi3+0x44>
   50600:	000d883a 	mov	r6,zero
   50604:	00505740 	call	50574 <udivmodsi4>
   50608:	80000126 	beq	r16,zero,50610 <__divsi3+0x28>
   5060c:	0085c83a 	sub	r2,zero,r2
   50610:	dfc00117 	ldw	ra,4(sp)
   50614:	dc000017 	ldw	r16,0(sp)
   50618:	dec00204 	addi	sp,sp,8
   5061c:	f800283a 	ret
   50620:	0109c83a 	sub	r4,zero,r4
   50624:	04000044 	movi	r16,1
   50628:	283ff50e 	bge	r5,zero,50600 <__divsi3+0x18>
   5062c:	014bc83a 	sub	r5,zero,r5
   50630:	8400005c 	xori	r16,r16,1
   50634:	003ff206 	br	50600 <__divsi3+0x18>

00050638 <__modsi3>:
   50638:	deffff04 	addi	sp,sp,-4
   5063c:	dfc00015 	stw	ra,0(sp)
   50640:	20000516 	blt	r4,zero,50658 <__modsi3+0x20>
   50644:	28000c16 	blt	r5,zero,50678 <__modsi3+0x40>
   50648:	01800044 	movi	r6,1
   5064c:	dfc00017 	ldw	ra,0(sp)
   50650:	dec00104 	addi	sp,sp,4
   50654:	00505741 	jmpi	50574 <udivmodsi4>
   50658:	0109c83a 	sub	r4,zero,r4
   5065c:	28000b16 	blt	r5,zero,5068c <__modsi3+0x54>
   50660:	01800044 	movi	r6,1
   50664:	00505740 	call	50574 <udivmodsi4>
   50668:	0085c83a 	sub	r2,zero,r2
   5066c:	dfc00017 	ldw	ra,0(sp)
   50670:	dec00104 	addi	sp,sp,4
   50674:	f800283a 	ret
   50678:	014bc83a 	sub	r5,zero,r5
   5067c:	01800044 	movi	r6,1
   50680:	dfc00017 	ldw	ra,0(sp)
   50684:	dec00104 	addi	sp,sp,4
   50688:	00505741 	jmpi	50574 <udivmodsi4>
   5068c:	014bc83a 	sub	r5,zero,r5
   50690:	003ff306 	br	50660 <__modsi3+0x28>

00050694 <__udivsi3>:
   50694:	000d883a 	mov	r6,zero
   50698:	00505741 	jmpi	50574 <udivmodsi4>

0005069c <__umodsi3>:
   5069c:	01800044 	movi	r6,1
   506a0:	00505741 	jmpi	50574 <udivmodsi4>

000506a4 <_printf_r>:
   506a4:	defffd04 	addi	sp,sp,-12
   506a8:	dfc00015 	stw	ra,0(sp)
   506ac:	d9800115 	stw	r6,4(sp)
   506b0:	d9c00215 	stw	r7,8(sp)
   506b4:	280d883a 	mov	r6,r5
   506b8:	21400217 	ldw	r5,8(r4)
   506bc:	d9c00104 	addi	r7,sp,4
   506c0:	00508640 	call	50864 <___vfprintf_internal_r>
   506c4:	dfc00017 	ldw	ra,0(sp)
   506c8:	dec00304 	addi	sp,sp,12
   506cc:	f800283a 	ret

000506d0 <printf>:
   506d0:	defffc04 	addi	sp,sp,-16
   506d4:	dfc00015 	stw	ra,0(sp)
   506d8:	d9400115 	stw	r5,4(sp)
   506dc:	d9800215 	stw	r6,8(sp)
   506e0:	d9c00315 	stw	r7,12(sp)
   506e4:	00800074 	movhi	r2,1
   506e8:	10876804 	addi	r2,r2,7584
   506ec:	10800017 	ldw	r2,0(r2)
   506f0:	200b883a 	mov	r5,r4
   506f4:	d9800104 	addi	r6,sp,4
   506f8:	11000217 	ldw	r4,8(r2)
   506fc:	00526e00 	call	526e0 <__vfprintf_internal>
   50700:	dfc00017 	ldw	ra,0(sp)
   50704:	dec00404 	addi	sp,sp,16
   50708:	f800283a 	ret

0005070c <_puts_r>:
   5070c:	defff604 	addi	sp,sp,-40
   50710:	dc400815 	stw	r17,32(sp)
   50714:	2023883a 	mov	r17,r4
   50718:	2809883a 	mov	r4,r5
   5071c:	dc000715 	stw	r16,28(sp)
   50720:	dfc00915 	stw	ra,36(sp)
   50724:	2821883a 	mov	r16,r5
   50728:	00507a40 	call	507a4 <strlen>
   5072c:	10c00044 	addi	r3,r2,1
   50730:	d8800115 	stw	r2,4(sp)
   50734:	89400217 	ldw	r5,8(r17)
   50738:	00800074 	movhi	r2,1
   5073c:	10801804 	addi	r2,r2,96
   50740:	d8800215 	stw	r2,8(sp)
   50744:	00800044 	movi	r2,1
   50748:	d8800315 	stw	r2,12(sp)
   5074c:	8809883a 	mov	r4,r17
   50750:	00800084 	movi	r2,2
   50754:	d9800404 	addi	r6,sp,16
   50758:	dc000015 	stw	r16,0(sp)
   5075c:	d8c00615 	stw	r3,24(sp)
   50760:	dec00415 	stw	sp,16(sp)
   50764:	d8800515 	stw	r2,20(sp)
   50768:	00549e00 	call	549e0 <__sfvwrite_r>
   5076c:	1000061e 	bne	r2,zero,50788 <_puts_r+0x7c>
   50770:	00800284 	movi	r2,10
   50774:	dfc00917 	ldw	ra,36(sp)
   50778:	dc400817 	ldw	r17,32(sp)
   5077c:	dc000717 	ldw	r16,28(sp)
   50780:	dec00a04 	addi	sp,sp,40
   50784:	f800283a 	ret
   50788:	00bfffc4 	movi	r2,-1
   5078c:	003ff906 	br	50774 <_puts_r+0x68>

00050790 <puts>:
   50790:	00800074 	movhi	r2,1
   50794:	10876804 	addi	r2,r2,7584
   50798:	200b883a 	mov	r5,r4
   5079c:	11000017 	ldw	r4,0(r2)
   507a0:	005070c1 	jmpi	5070c <_puts_r>

000507a4 <strlen>:
   507a4:	208000cc 	andi	r2,r4,3
   507a8:	10001f1e 	bne	r2,zero,50828 <strlen+0x84>
   507ac:	20800017 	ldw	r2,0(r4)
   507b0:	01ffbff4 	movhi	r7,65279
   507b4:	39ffbfc4 	addi	r7,r7,-257
   507b8:	01a02074 	movhi	r6,32897
   507bc:	31a02004 	addi	r6,r6,-32640
   507c0:	11c7883a 	add	r3,r2,r7
   507c4:	0084303a 	nor	r2,zero,r2
   507c8:	1886703a 	and	r3,r3,r2
   507cc:	1986703a 	and	r3,r3,r6
   507d0:	2005883a 	mov	r2,r4
   507d4:	1800101e 	bne	r3,zero,50818 <strlen+0x74>
   507d8:	10800104 	addi	r2,r2,4
   507dc:	10c00017 	ldw	r3,0(r2)
   507e0:	19cb883a 	add	r5,r3,r7
   507e4:	00c6303a 	nor	r3,zero,r3
   507e8:	28c6703a 	and	r3,r5,r3
   507ec:	1986703a 	and	r3,r3,r6
   507f0:	1800091e 	bne	r3,zero,50818 <strlen+0x74>
   507f4:	10800104 	addi	r2,r2,4
   507f8:	10c00017 	ldw	r3,0(r2)
   507fc:	19cb883a 	add	r5,r3,r7
   50800:	00c6303a 	nor	r3,zero,r3
   50804:	28c6703a 	and	r3,r5,r3
   50808:	1986703a 	and	r3,r3,r6
   5080c:	183ff226 	beq	r3,zero,507d8 <strlen+0x34>
   50810:	00000106 	br	50818 <strlen+0x74>
   50814:	10800044 	addi	r2,r2,1
   50818:	10c00007 	ldb	r3,0(r2)
   5081c:	183ffd1e 	bne	r3,zero,50814 <strlen+0x70>
   50820:	1105c83a 	sub	r2,r2,r4
   50824:	f800283a 	ret
   50828:	2005883a 	mov	r2,r4
   5082c:	003ffa06 	br	50818 <strlen+0x74>

00050830 <__sprint_r>:
   50830:	30800217 	ldw	r2,8(r6)
   50834:	defffe04 	addi	sp,sp,-8
   50838:	dc000015 	stw	r16,0(sp)
   5083c:	dfc00115 	stw	ra,4(sp)
   50840:	3021883a 	mov	r16,r6
   50844:	10000226 	beq	r2,zero,50850 <__sprint_r+0x20>
   50848:	00549e00 	call	549e0 <__sfvwrite_r>
   5084c:	80000215 	stw	zero,8(r16)
   50850:	80000115 	stw	zero,4(r16)
   50854:	dfc00117 	ldw	ra,4(sp)
   50858:	dc000017 	ldw	r16,0(sp)
   5085c:	dec00204 	addi	sp,sp,8
   50860:	f800283a 	ret

00050864 <___vfprintf_internal_r>:
   50864:	defeb904 	addi	sp,sp,-1308
   50868:	dc013d15 	stw	r16,1268(sp)
   5086c:	d9013015 	stw	r4,1216(sp)
   50870:	dfc14615 	stw	ra,1304(sp)
   50874:	df014515 	stw	fp,1300(sp)
   50878:	ddc14415 	stw	r23,1296(sp)
   5087c:	dd814315 	stw	r22,1292(sp)
   50880:	dd414215 	stw	r21,1288(sp)
   50884:	dd014115 	stw	r20,1284(sp)
   50888:	dcc14015 	stw	r19,1280(sp)
   5088c:	dc813f15 	stw	r18,1276(sp)
   50890:	dc413e15 	stw	r17,1272(sp)
   50894:	d9412915 	stw	r5,1188(sp)
   50898:	3021883a 	mov	r16,r6
   5089c:	d9c12d15 	stw	r7,1204(sp)
   508a0:	00550cc0 	call	550cc <_localeconv_r>
   508a4:	10800017 	ldw	r2,0(r2)
   508a8:	d9013017 	ldw	r4,1216(sp)
   508ac:	d8013315 	stw	zero,1228(sp)
   508b0:	d8813715 	stw	r2,1244(sp)
   508b4:	d8013415 	stw	zero,1232(sp)
   508b8:	20000226 	beq	r4,zero,508c4 <___vfprintf_internal_r+0x60>
   508bc:	20800e17 	ldw	r2,56(r4)
   508c0:	10014b26 	beq	r2,zero,50df0 <___vfprintf_internal_r+0x58c>
   508c4:	d8c12917 	ldw	r3,1188(sp)
   508c8:	1880030b 	ldhu	r2,12(r3)
   508cc:	10c0020c 	andi	r3,r2,8
   508d0:	18ffffcc 	andi	r3,r3,65535
   508d4:	18e0001c 	xori	r3,r3,32768
   508d8:	18e00004 	addi	r3,r3,-32768
   508dc:	1800ed26 	beq	r3,zero,50c94 <___vfprintf_internal_r+0x430>
   508e0:	d9012917 	ldw	r4,1188(sp)
   508e4:	20c00417 	ldw	r3,16(r4)
   508e8:	1800ea26 	beq	r3,zero,50c94 <___vfprintf_internal_r+0x430>
   508ec:	1100068c 	andi	r4,r2,26
   508f0:	00c00284 	movi	r3,10
   508f4:	20c0f026 	beq	r4,r3,50cb8 <___vfprintf_internal_r+0x454>
   508f8:	d9010dc4 	addi	r4,sp,1079
   508fc:	d8810e04 	addi	r2,sp,1080
   50900:	dc413017 	ldw	r17,1216(sp)
   50904:	d8c00404 	addi	r3,sp,16
   50908:	d9012615 	stw	r4,1176(sp)
   5090c:	1109c83a 	sub	r4,r2,r4
   50910:	d8812715 	stw	r2,1180(sp)
   50914:	d8c11b15 	stw	r3,1132(sp)
   50918:	d8011d15 	stw	zero,1140(sp)
   5091c:	d8011c15 	stw	zero,1136(sp)
   50920:	802b883a 	mov	r21,r16
   50924:	d8013215 	stw	zero,1224(sp)
   50928:	d8013615 	stw	zero,1240(sp)
   5092c:	d8013515 	stw	zero,1236(sp)
   50930:	d8012c15 	stw	zero,1200(sp)
   50934:	1813883a 	mov	r9,r3
   50938:	d9013915 	stw	r4,1252(sp)
   5093c:	a8800007 	ldb	r2,0(r21)
   50940:	1002f326 	beq	r2,zero,51510 <___vfprintf_internal_r+0xcac>
   50944:	00c00944 	movi	r3,37
   50948:	a825883a 	mov	r18,r21
   5094c:	10c0021e 	bne	r2,r3,50958 <___vfprintf_internal_r+0xf4>
   50950:	00001406 	br	509a4 <___vfprintf_internal_r+0x140>
   50954:	10c00326 	beq	r2,r3,50964 <___vfprintf_internal_r+0x100>
   50958:	94800044 	addi	r18,r18,1
   5095c:	90800007 	ldb	r2,0(r18)
   50960:	103ffc1e 	bne	r2,zero,50954 <___vfprintf_internal_r+0xf0>
   50964:	9561c83a 	sub	r16,r18,r21
   50968:	80000e26 	beq	r16,zero,509a4 <___vfprintf_internal_r+0x140>
   5096c:	da011d17 	ldw	r8,1140(sp)
   50970:	d8c11c17 	ldw	r3,1136(sp)
   50974:	4d400015 	stw	r21,0(r9)
   50978:	4c000115 	stw	r16,4(r9)
   5097c:	4411883a 	add	r8,r8,r16
   50980:	18c00044 	addi	r3,r3,1
   50984:	da011d15 	stw	r8,1140(sp)
   50988:	d8c11c15 	stw	r3,1136(sp)
   5098c:	008001c4 	movi	r2,7
   50990:	10c11016 	blt	r2,r3,50dd4 <___vfprintf_internal_r+0x570>
   50994:	4a400204 	addi	r9,r9,8
   50998:	d8812c17 	ldw	r2,1200(sp)
   5099c:	1405883a 	add	r2,r2,r16
   509a0:	d8812c15 	stw	r2,1200(sp)
   509a4:	90800007 	ldb	r2,0(r18)
   509a8:	1000ee26 	beq	r2,zero,50d64 <___vfprintf_internal_r+0x500>
   509ac:	95400044 	addi	r21,r18,1
   509b0:	94800047 	ldb	r18,1(r18)
   509b4:	073fffc4 	movi	fp,-1
   509b8:	e007883a 	mov	r3,fp
   509bc:	d8012585 	stb	zero,1174(sp)
   509c0:	d8012e15 	stw	zero,1208(sp)
   509c4:	0021883a 	mov	r16,zero
   509c8:	05001604 	movi	r20,88
   509cc:	04c00244 	movi	r19,9
   509d0:	4839883a 	mov	fp,r9
   509d4:	ad400044 	addi	r21,r21,1
   509d8:	90bff804 	addi	r2,r18,-32
   509dc:	a080462e 	bgeu	r20,r2,50af8 <___vfprintf_internal_r+0x294>
   509e0:	e013883a 	mov	r9,fp
   509e4:	9000df26 	beq	r18,zero,50d64 <___vfprintf_internal_r+0x500>
   509e8:	00c00044 	movi	r3,1
   509ec:	d8c12815 	stw	r3,1184(sp)
   509f0:	dc810405 	stb	r18,1040(sp)
   509f4:	d8012585 	stb	zero,1174(sp)
   509f8:	d8c12b15 	stw	r3,1196(sp)
   509fc:	dcc10404 	addi	r19,sp,1040
   50a00:	d8013115 	stw	zero,1220(sp)
   50a04:	80c0008c 	andi	r3,r16,2
   50a08:	d8c12a15 	stw	r3,1192(sp)
   50a0c:	18000326 	beq	r3,zero,50a1c <___vfprintf_internal_r+0x1b8>
   50a10:	d8c12817 	ldw	r3,1184(sp)
   50a14:	18c00084 	addi	r3,r3,2
   50a18:	d8c12815 	stw	r3,1184(sp)
   50a1c:	80c0210c 	andi	r3,r16,132
   50a20:	d8c12f15 	stw	r3,1212(sp)
   50a24:	1802251e 	bne	r3,zero,512bc <___vfprintf_internal_r+0xa58>
   50a28:	d9012e17 	ldw	r4,1208(sp)
   50a2c:	d8c12817 	ldw	r3,1184(sp)
   50a30:	20edc83a 	sub	r22,r4,r3
   50a34:	0582210e 	bge	zero,r22,512bc <___vfprintf_internal_r+0xa58>
   50a38:	02800404 	movi	r10,16
   50a3c:	da011d17 	ldw	r8,1140(sp)
   50a40:	d8c11c17 	ldw	r3,1136(sp)
   50a44:	05c00074 	movhi	r23,1
   50a48:	bdc02984 	addi	r23,r23,166
   50a4c:	5580200e 	bge	r10,r22,50ad0 <___vfprintf_internal_r+0x26c>
   50a50:	dc813815 	stw	r18,1248(sp)
   50a54:	5039883a 	mov	fp,r10
   50a58:	b825883a 	mov	r18,r23
   50a5c:	050001c4 	movi	r20,7
   50a60:	b02f883a 	mov	r23,r22
   50a64:	802d883a 	mov	r22,r16
   50a68:	dc012917 	ldw	r16,1188(sp)
   50a6c:	00000306 	br	50a7c <___vfprintf_internal_r+0x218>
   50a70:	bdfffc04 	addi	r23,r23,-16
   50a74:	4a400204 	addi	r9,r9,8
   50a78:	e5c0110e 	bge	fp,r23,50ac0 <___vfprintf_internal_r+0x25c>
   50a7c:	4c800015 	stw	r18,0(r9)
   50a80:	4f000115 	stw	fp,4(r9)
   50a84:	42000404 	addi	r8,r8,16
   50a88:	18c00044 	addi	r3,r3,1
   50a8c:	da011d15 	stw	r8,1140(sp)
   50a90:	d8c11c15 	stw	r3,1136(sp)
   50a94:	a0fff60e 	bge	r20,r3,50a70 <___vfprintf_internal_r+0x20c>
   50a98:	8809883a 	mov	r4,r17
   50a9c:	800b883a 	mov	r5,r16
   50aa0:	d9811b04 	addi	r6,sp,1132
   50aa4:	00508300 	call	50830 <__sprint_r>
   50aa8:	1000b41e 	bne	r2,zero,50d7c <___vfprintf_internal_r+0x518>
   50aac:	bdfffc04 	addi	r23,r23,-16
   50ab0:	da011d17 	ldw	r8,1140(sp)
   50ab4:	d8c11c17 	ldw	r3,1136(sp)
   50ab8:	da400404 	addi	r9,sp,16
   50abc:	e5ffef16 	blt	fp,r23,50a7c <___vfprintf_internal_r+0x218>
   50ac0:	b021883a 	mov	r16,r22
   50ac4:	b82d883a 	mov	r22,r23
   50ac8:	902f883a 	mov	r23,r18
   50acc:	dc813817 	ldw	r18,1248(sp)
   50ad0:	4dc00015 	stw	r23,0(r9)
   50ad4:	4d800115 	stw	r22,4(r9)
   50ad8:	4591883a 	add	r8,r8,r22
   50adc:	18c00044 	addi	r3,r3,1
   50ae0:	da011d15 	stw	r8,1140(sp)
   50ae4:	d8c11c15 	stw	r3,1136(sp)
   50ae8:	008001c4 	movi	r2,7
   50aec:	10c3fe16 	blt	r2,r3,51ae8 <___vfprintf_internal_r+0x1284>
   50af0:	4a400204 	addi	r9,r9,8
   50af4:	0001f306 	br	512c4 <___vfprintf_internal_r+0xa60>
   50af8:	1085883a 	add	r2,r2,r2
   50afc:	1085883a 	add	r2,r2,r2
   50b00:	01000174 	movhi	r4,5
   50b04:	2102c504 	addi	r4,r4,2836
   50b08:	1105883a 	add	r2,r2,r4
   50b0c:	10800017 	ldw	r2,0(r2)
   50b10:	1000683a 	jmp	r2
   50b14:	000511f0 	cmpltui	zero,zero,5191
   50b18:	000509e0 	cmpeqi	zero,zero,5159
   50b1c:	000509e0 	cmpeqi	zero,zero,5159
   50b20:	00051208 	cmpgei	zero,zero,5192
   50b24:	000509e0 	cmpeqi	zero,zero,5159
   50b28:	000509e0 	cmpeqi	zero,zero,5159
   50b2c:	000509e0 	cmpeqi	zero,zero,5159
   50b30:	000509e0 	cmpeqi	zero,zero,5159
   50b34:	000509e0 	cmpeqi	zero,zero,5159
   50b38:	000509e0 	cmpeqi	zero,zero,5159
   50b3c:	000510c0 	call	510c <__alt_mem_onchip_data_memory+0x510c>
   50b40:	00051254 	movui	zero,5193
   50b44:	000509e0 	cmpeqi	zero,zero,5159
   50b48:	00050c88 	cmpgei	zero,zero,5170
   50b4c:	00051028 	cmpgeui	zero,zero,5184
   50b50:	000509e0 	cmpeqi	zero,zero,5159
   50b54:	00051214 	movui	zero,5192
   50b58:	00051220 	cmpeqi	zero,zero,5192
   50b5c:	00051220 	cmpeqi	zero,zero,5192
   50b60:	00051220 	cmpeqi	zero,zero,5192
   50b64:	00051220 	cmpeqi	zero,zero,5192
   50b68:	00051220 	cmpeqi	zero,zero,5192
   50b6c:	00051220 	cmpeqi	zero,zero,5192
   50b70:	00051220 	cmpeqi	zero,zero,5192
   50b74:	00051220 	cmpeqi	zero,zero,5192
   50b78:	00051220 	cmpeqi	zero,zero,5192
   50b7c:	000509e0 	cmpeqi	zero,zero,5159
   50b80:	000509e0 	cmpeqi	zero,zero,5159
   50b84:	000509e0 	cmpeqi	zero,zero,5159
   50b88:	000509e0 	cmpeqi	zero,zero,5159
   50b8c:	000509e0 	cmpeqi	zero,zero,5159
   50b90:	000509e0 	cmpeqi	zero,zero,5159
   50b94:	000509e0 	cmpeqi	zero,zero,5159
   50b98:	000509e0 	cmpeqi	zero,zero,5159
   50b9c:	000509e0 	cmpeqi	zero,zero,5159
   50ba0:	000509e0 	cmpeqi	zero,zero,5159
   50ba4:	00050df8 	rdprs	zero,zero,5175
   50ba8:	00050eb8 	rdprs	zero,zero,5178
   50bac:	000509e0 	cmpeqi	zero,zero,5159
   50bb0:	00050eb8 	rdprs	zero,zero,5178
   50bb4:	000509e0 	cmpeqi	zero,zero,5159
   50bb8:	000509e0 	cmpeqi	zero,zero,5159
   50bbc:	000509e0 	cmpeqi	zero,zero,5159
   50bc0:	000509e0 	cmpeqi	zero,zero,5159
   50bc4:	00050f4c 	andi	zero,zero,5181
   50bc8:	000509e0 	cmpeqi	zero,zero,5159
   50bcc:	000509e0 	cmpeqi	zero,zero,5159
   50bd0:	00050f58 	cmpnei	zero,zero,5181
   50bd4:	000509e0 	cmpeqi	zero,zero,5159
   50bd8:	000509e0 	cmpeqi	zero,zero,5159
   50bdc:	000509e0 	cmpeqi	zero,zero,5159
   50be0:	000509e0 	cmpeqi	zero,zero,5159
   50be4:	000509e0 	cmpeqi	zero,zero,5159
   50be8:	00050f90 	cmplti	zero,zero,5182
   50bec:	000509e0 	cmpeqi	zero,zero,5159
   50bf0:	000509e0 	cmpeqi	zero,zero,5159
   50bf4:	00050fcc 	andi	zero,zero,5183
   50bf8:	000509e0 	cmpeqi	zero,zero,5159
   50bfc:	000509e0 	cmpeqi	zero,zero,5159
   50c00:	000509e0 	cmpeqi	zero,zero,5159
   50c04:	000509e0 	cmpeqi	zero,zero,5159
   50c08:	000509e0 	cmpeqi	zero,zero,5159
   50c0c:	000509e0 	cmpeqi	zero,zero,5159
   50c10:	000509e0 	cmpeqi	zero,zero,5159
   50c14:	000509e0 	cmpeqi	zero,zero,5159
   50c18:	000509e0 	cmpeqi	zero,zero,5159
   50c1c:	000509e0 	cmpeqi	zero,zero,5159
   50c20:	00051264 	muli	zero,zero,5193
   50c24:	00051298 	cmpnei	zero,zero,5194
   50c28:	00050eb8 	rdprs	zero,zero,5178
   50c2c:	00050eb8 	rdprs	zero,zero,5178
   50c30:	00050eb8 	rdprs	zero,zero,5178
   50c34:	000511e4 	muli	zero,zero,5191
   50c38:	00051298 	cmpnei	zero,zero,5194
   50c3c:	000509e0 	cmpeqi	zero,zero,5159
   50c40:	000509e0 	cmpeqi	zero,zero,5159
   50c44:	00051070 	cmpltui	zero,zero,5185
   50c48:	000509e0 	cmpeqi	zero,zero,5159
   50c4c:	00051088 	cmpgei	zero,zero,5186
   50c50:	000512a4 	muli	zero,zero,5194
   50c54:	000510e8 	cmpgeui	zero,zero,5187
   50c58:	00051138 	rdprs	zero,zero,5188
   50c5c:	000509e0 	cmpeqi	zero,zero,5159
   50c60:	00051144 	movi	zero,5189
   50c64:	000509e0 	cmpeqi	zero,zero,5159
   50c68:	000512b0 	cmpltui	zero,zero,5194
   50c6c:	000509e0 	cmpeqi	zero,zero,5159
   50c70:	000509e0 	cmpeqi	zero,zero,5159
   50c74:	000511a8 	cmpgeui	zero,zero,5190
   50c78:	d9012e17 	ldw	r4,1208(sp)
   50c7c:	d8812d15 	stw	r2,1204(sp)
   50c80:	0109c83a 	sub	r4,zero,r4
   50c84:	d9012e15 	stw	r4,1208(sp)
   50c88:	84000114 	ori	r16,r16,4
   50c8c:	ac800007 	ldb	r18,0(r21)
   50c90:	003f5006 	br	509d4 <___vfprintf_internal_r+0x170>
   50c94:	d9013017 	ldw	r4,1216(sp)
   50c98:	d9412917 	ldw	r5,1188(sp)
   50c9c:	00527040 	call	52704 <__swsetup_r>
   50ca0:	10003d1e 	bne	r2,zero,50d98 <___vfprintf_internal_r+0x534>
   50ca4:	d8c12917 	ldw	r3,1188(sp)
   50ca8:	1880030b 	ldhu	r2,12(r3)
   50cac:	00c00284 	movi	r3,10
   50cb0:	1100068c 	andi	r4,r2,26
   50cb4:	20ff101e 	bne	r4,r3,508f8 <___vfprintf_internal_r+0x94>
   50cb8:	d9012917 	ldw	r4,1188(sp)
   50cbc:	20c0038b 	ldhu	r3,14(r4)
   50cc0:	193fffcc 	andi	r4,r3,65535
   50cc4:	2120001c 	xori	r4,r4,32768
   50cc8:	21200004 	addi	r4,r4,-32768
   50ccc:	203f0a16 	blt	r4,zero,508f8 <___vfprintf_internal_r+0x94>
   50cd0:	d9012917 	ldw	r4,1188(sp)
   50cd4:	d9c12d17 	ldw	r7,1204(sp)
   50cd8:	10bfff4c 	andi	r2,r2,65533
   50cdc:	22800717 	ldw	r10,28(r4)
   50ce0:	22400917 	ldw	r9,36(r4)
   50ce4:	d9013017 	ldw	r4,1216(sp)
   50ce8:	02010004 	movi	r8,1024
   50cec:	d881070d 	sth	r2,1052(sp)
   50cf0:	d9410404 	addi	r5,sp,1040
   50cf4:	d8800404 	addi	r2,sp,16
   50cf8:	800d883a 	mov	r6,r16
   50cfc:	d8c1078d 	sth	r3,1054(sp)
   50d00:	da810b15 	stw	r10,1068(sp)
   50d04:	da410d15 	stw	r9,1076(sp)
   50d08:	d8810415 	stw	r2,1040(sp)
   50d0c:	d8810815 	stw	r2,1056(sp)
   50d10:	da010615 	stw	r8,1048(sp)
   50d14:	da010915 	stw	r8,1060(sp)
   50d18:	d8010a15 	stw	zero,1064(sp)
   50d1c:	00508640 	call	50864 <___vfprintf_internal_r>
   50d20:	d8812c15 	stw	r2,1200(sp)
   50d24:	10000416 	blt	r2,zero,50d38 <___vfprintf_internal_r+0x4d4>
   50d28:	d9013017 	ldw	r4,1216(sp)
   50d2c:	d9410404 	addi	r5,sp,1040
   50d30:	00540d00 	call	540d0 <_fflush_r>
   50d34:	1006501e 	bne	r2,zero,52678 <___vfprintf_internal_r+0x1e14>
   50d38:	d881070b 	ldhu	r2,1052(sp)
   50d3c:	1080100c 	andi	r2,r2,64
   50d40:	10bfffcc 	andi	r2,r2,65535
   50d44:	10a0001c 	xori	r2,r2,32768
   50d48:	10a00004 	addi	r2,r2,-32768
   50d4c:	10001426 	beq	r2,zero,50da0 <___vfprintf_internal_r+0x53c>
   50d50:	d8c12917 	ldw	r3,1188(sp)
   50d54:	1880030b 	ldhu	r2,12(r3)
   50d58:	10801014 	ori	r2,r2,64
   50d5c:	1880030d 	sth	r2,12(r3)
   50d60:	00000f06 	br	50da0 <___vfprintf_internal_r+0x53c>
   50d64:	d8811d17 	ldw	r2,1140(sp)
   50d68:	10000426 	beq	r2,zero,50d7c <___vfprintf_internal_r+0x518>
   50d6c:	d9013017 	ldw	r4,1216(sp)
   50d70:	d9412917 	ldw	r5,1188(sp)
   50d74:	d9811b04 	addi	r6,sp,1132
   50d78:	00508300 	call	50830 <__sprint_r>
   50d7c:	d8c12917 	ldw	r3,1188(sp)
   50d80:	1880030b 	ldhu	r2,12(r3)
   50d84:	1080100c 	andi	r2,r2,64
   50d88:	10bfffcc 	andi	r2,r2,65535
   50d8c:	10a0001c 	xori	r2,r2,32768
   50d90:	10a00004 	addi	r2,r2,-32768
   50d94:	10000226 	beq	r2,zero,50da0 <___vfprintf_internal_r+0x53c>
   50d98:	00bfffc4 	movi	r2,-1
   50d9c:	d8812c15 	stw	r2,1200(sp)
   50da0:	d8812c17 	ldw	r2,1200(sp)
   50da4:	dfc14617 	ldw	ra,1304(sp)
   50da8:	df014517 	ldw	fp,1300(sp)
   50dac:	ddc14417 	ldw	r23,1296(sp)
   50db0:	dd814317 	ldw	r22,1292(sp)
   50db4:	dd414217 	ldw	r21,1288(sp)
   50db8:	dd014117 	ldw	r20,1284(sp)
   50dbc:	dcc14017 	ldw	r19,1280(sp)
   50dc0:	dc813f17 	ldw	r18,1276(sp)
   50dc4:	dc413e17 	ldw	r17,1272(sp)
   50dc8:	dc013d17 	ldw	r16,1268(sp)
   50dcc:	dec14704 	addi	sp,sp,1308
   50dd0:	f800283a 	ret
   50dd4:	d9412917 	ldw	r5,1188(sp)
   50dd8:	8809883a 	mov	r4,r17
   50ddc:	d9811b04 	addi	r6,sp,1132
   50de0:	00508300 	call	50830 <__sprint_r>
   50de4:	103fe51e 	bne	r2,zero,50d7c <___vfprintf_internal_r+0x518>
   50de8:	da400404 	addi	r9,sp,16
   50dec:	003eea06 	br	50998 <___vfprintf_internal_r+0x134>
   50df0:	005438c0 	call	5438c <__sinit>
   50df4:	003eb306 	br	508c4 <___vfprintf_internal_r+0x60>
   50df8:	e013883a 	mov	r9,fp
   50dfc:	84000414 	ori	r16,r16,16
   50e00:	1839883a 	mov	fp,r3
   50e04:	8080080c 	andi	r2,r16,32
   50e08:	10034426 	beq	r2,zero,51b1c <___vfprintf_internal_r+0x12b8>
   50e0c:	d8c12d17 	ldw	r3,1204(sp)
   50e10:	18800117 	ldw	r2,4(r3)
   50e14:	1dc00017 	ldw	r23,0(r3)
   50e18:	18c00204 	addi	r3,r3,8
   50e1c:	d8c12d15 	stw	r3,1204(sp)
   50e20:	102d883a 	mov	r22,r2
   50e24:	1003020e 	bge	r2,zero,51a30 <___vfprintf_internal_r+0x11cc>
   50e28:	05efc83a 	sub	r23,zero,r23
   50e2c:	b804c03a 	cmpne	r2,r23,zero
   50e30:	05adc83a 	sub	r22,zero,r22
   50e34:	b0adc83a 	sub	r22,r22,r2
   50e38:	00800b44 	movi	r2,45
   50e3c:	d8812585 	stb	r2,1174(sp)
   50e40:	00c00044 	movi	r3,1
   50e44:	bd84b03a 	or	r2,r23,r22
   50e48:	e0000216 	blt	fp,zero,50e54 <___vfprintf_internal_r+0x5f0>
   50e4c:	013fdfc4 	movi	r4,-129
   50e50:	8120703a 	and	r16,r16,r4
   50e54:	1001cc1e 	bne	r2,zero,51588 <___vfprintf_internal_r+0xd24>
   50e58:	e001cb1e 	bne	fp,zero,51588 <___vfprintf_internal_r+0xd24>
   50e5c:	18c03fcc 	andi	r3,r3,255
   50e60:	1802ca1e 	bne	r3,zero,5198c <___vfprintf_internal_r+0x1128>
   50e64:	8080004c 	andi	r2,r16,1
   50e68:	1002c826 	beq	r2,zero,5198c <___vfprintf_internal_r+0x1128>
   50e6c:	d8c13917 	ldw	r3,1252(sp)
   50e70:	00800c04 	movi	r2,48
   50e74:	d8810dc5 	stb	r2,1079(sp)
   50e78:	d8c12b15 	stw	r3,1196(sp)
   50e7c:	dcc10dc4 	addi	r19,sp,1079
   50e80:	d8812b17 	ldw	r2,1196(sp)
   50e84:	d8812815 	stw	r2,1184(sp)
   50e88:	1700010e 	bge	r2,fp,50e90 <___vfprintf_internal_r+0x62c>
   50e8c:	df012815 	stw	fp,1184(sp)
   50e90:	d8812583 	ldbu	r2,1174(sp)
   50e94:	df013115 	stw	fp,1220(sp)
   50e98:	10803fcc 	andi	r2,r2,255
   50e9c:	1080201c 	xori	r2,r2,128
   50ea0:	10bfe004 	addi	r2,r2,-128
   50ea4:	103ed726 	beq	r2,zero,50a04 <___vfprintf_internal_r+0x1a0>
   50ea8:	d8c12817 	ldw	r3,1184(sp)
   50eac:	18c00044 	addi	r3,r3,1
   50eb0:	d8c12815 	stw	r3,1184(sp)
   50eb4:	003ed306 	br	50a04 <___vfprintf_internal_r+0x1a0>
   50eb8:	8080020c 	andi	r2,r16,8
   50ebc:	e013883a 	mov	r9,fp
   50ec0:	1839883a 	mov	fp,r3
   50ec4:	1003a626 	beq	r2,zero,51d60 <___vfprintf_internal_r+0x14fc>
   50ec8:	d9012d17 	ldw	r4,1204(sp)
   50ecc:	25800017 	ldw	r22,0(r4)
   50ed0:	25000117 	ldw	r20,4(r4)
   50ed4:	21000204 	addi	r4,r4,8
   50ed8:	d9012d15 	stw	r4,1204(sp)
   50edc:	dd813315 	stw	r22,1228(sp)
   50ee0:	dd013415 	stw	r20,1232(sp)
   50ee4:	b009883a 	mov	r4,r22
   50ee8:	a00b883a 	mov	r5,r20
   50eec:	da413c15 	stw	r9,1264(sp)
   50ef0:	00575180 	call	57518 <__isinfd>
   50ef4:	da413c17 	ldw	r9,1264(sp)
   50ef8:	b009883a 	mov	r4,r22
   50efc:	a00b883a 	mov	r5,r20
   50f00:	10041d26 	beq	r2,zero,51f78 <___vfprintf_internal_r+0x1714>
   50f04:	000d883a 	mov	r6,zero
   50f08:	000f883a 	mov	r7,zero
   50f0c:	00592ec0 	call	592ec <__ltdf2>
   50f10:	da413c17 	ldw	r9,1264(sp)
   50f14:	1004da16 	blt	r2,zero,52280 <___vfprintf_internal_r+0x1a1c>
   50f18:	d8812583 	ldbu	r2,1174(sp)
   50f1c:	00c011c4 	movi	r3,71
   50f20:	1c83d116 	blt	r3,r18,51e68 <___vfprintf_internal_r+0x1604>
   50f24:	04c00074 	movhi	r19,1
   50f28:	9cc01904 	addi	r19,r19,100
   50f2c:	00c000c4 	movi	r3,3
   50f30:	d8c12815 	stw	r3,1184(sp)
   50f34:	00ffdfc4 	movi	r3,-129
   50f38:	80e0703a 	and	r16,r16,r3
   50f3c:	d8c12817 	ldw	r3,1184(sp)
   50f40:	d8013115 	stw	zero,1220(sp)
   50f44:	d8c12b15 	stw	r3,1196(sp)
   50f48:	003fd306 	br	50e98 <___vfprintf_internal_r+0x634>
   50f4c:	84000214 	ori	r16,r16,8
   50f50:	ac800007 	ldb	r18,0(r21)
   50f54:	003e9f06 	br	509d4 <___vfprintf_internal_r+0x170>
   50f58:	e013883a 	mov	r9,fp
   50f5c:	84000414 	ori	r16,r16,16
   50f60:	1839883a 	mov	fp,r3
   50f64:	8080080c 	andi	r2,r16,32
   50f68:	10031d26 	beq	r2,zero,51be0 <___vfprintf_internal_r+0x137c>
   50f6c:	d8812d17 	ldw	r2,1204(sp)
   50f70:	0007883a 	mov	r3,zero
   50f74:	15c00017 	ldw	r23,0(r2)
   50f78:	15800117 	ldw	r22,4(r2)
   50f7c:	10800204 	addi	r2,r2,8
   50f80:	d8812d15 	stw	r2,1204(sp)
   50f84:	d8012585 	stb	zero,1174(sp)
   50f88:	bd84b03a 	or	r2,r23,r22
   50f8c:	003fae06 	br	50e48 <___vfprintf_internal_r+0x5e4>
   50f90:	e013883a 	mov	r9,fp
   50f94:	84000414 	ori	r16,r16,16
   50f98:	1839883a 	mov	fp,r3
   50f9c:	8080080c 	andi	r2,r16,32
   50fa0:	1002e726 	beq	r2,zero,51b40 <___vfprintf_internal_r+0x12dc>
   50fa4:	d8c12d17 	ldw	r3,1204(sp)
   50fa8:	d9012d17 	ldw	r4,1204(sp)
   50fac:	1dc00017 	ldw	r23,0(r3)
   50fb0:	1d800117 	ldw	r22,4(r3)
   50fb4:	21000204 	addi	r4,r4,8
   50fb8:	00c00044 	movi	r3,1
   50fbc:	d9012d15 	stw	r4,1204(sp)
   50fc0:	bd84b03a 	or	r2,r23,r22
   50fc4:	d8012585 	stb	zero,1174(sp)
   50fc8:	003f9f06 	br	50e48 <___vfprintf_internal_r+0x5e4>
   50fcc:	e013883a 	mov	r9,fp
   50fd0:	1839883a 	mov	fp,r3
   50fd4:	00c00074 	movhi	r3,1
   50fd8:	18c01d04 	addi	r3,r3,116
   50fdc:	d8c13615 	stw	r3,1240(sp)
   50fe0:	8080080c 	andi	r2,r16,32
   50fe4:	10007726 	beq	r2,zero,511c4 <___vfprintf_internal_r+0x960>
   50fe8:	d9012d17 	ldw	r4,1204(sp)
   50fec:	25c00017 	ldw	r23,0(r4)
   50ff0:	25800117 	ldw	r22,4(r4)
   50ff4:	21000204 	addi	r4,r4,8
   50ff8:	d9012d15 	stw	r4,1204(sp)
   50ffc:	8080004c 	andi	r2,r16,1
   51000:	1002c226 	beq	r2,zero,51b0c <___vfprintf_internal_r+0x12a8>
   51004:	bd84b03a 	or	r2,r23,r22
   51008:	10035d26 	beq	r2,zero,51d80 <___vfprintf_internal_r+0x151c>
   5100c:	00c00c04 	movi	r3,48
   51010:	d8c12505 	stb	r3,1172(sp)
   51014:	dc812545 	stb	r18,1173(sp)
   51018:	84000094 	ori	r16,r16,2
   5101c:	00c00084 	movi	r3,2
   51020:	d8012585 	stb	zero,1174(sp)
   51024:	003f8806 	br	50e48 <___vfprintf_internal_r+0x5e4>
   51028:	ac800007 	ldb	r18,0(r21)
   5102c:	00c00a84 	movi	r3,42
   51030:	adc00044 	addi	r23,r21,1
   51034:	90c57526 	beq	r18,r3,5260c <___vfprintf_internal_r+0x1da8>
   51038:	95bff404 	addi	r22,r18,-48
   5103c:	0009883a 	mov	r4,zero
   51040:	9d84ff36 	bltu	r19,r22,52440 <___vfprintf_internal_r+0x1bdc>
   51044:	01400284 	movi	r5,10
   51048:	005960c0 	call	5960c <__mulsi3>
   5104c:	bc800007 	ldb	r18,0(r23)
   51050:	b089883a 	add	r4,r22,r2
   51054:	bdc00044 	addi	r23,r23,1
   51058:	95bff404 	addi	r22,r18,-48
   5105c:	9dbff92e 	bgeu	r19,r22,51044 <___vfprintf_internal_r+0x7e0>
   51060:	2007883a 	mov	r3,r4
   51064:	20044316 	blt	r4,zero,52174 <___vfprintf_internal_r+0x1910>
   51068:	b82b883a 	mov	r21,r23
   5106c:	003e5a06 	br	509d8 <___vfprintf_internal_r+0x174>
   51070:	ac800007 	ldb	r18,0(r21)
   51074:	01001b04 	movi	r4,108
   51078:	a805883a 	mov	r2,r21
   5107c:	91045526 	beq	r18,r4,521d4 <___vfprintf_internal_r+0x1970>
   51080:	84000414 	ori	r16,r16,16
   51084:	003e5306 	br	509d4 <___vfprintf_internal_r+0x170>
   51088:	8080080c 	andi	r2,r16,32
   5108c:	e013883a 	mov	r9,fp
   51090:	10034026 	beq	r2,zero,51d94 <___vfprintf_internal_r+0x1530>
   51094:	d9012d17 	ldw	r4,1204(sp)
   51098:	20800017 	ldw	r2,0(r4)
   5109c:	d9012c17 	ldw	r4,1200(sp)
   510a0:	2007d7fa 	srai	r3,r4,31
   510a4:	d9012d17 	ldw	r4,1204(sp)
   510a8:	10c00115 	stw	r3,4(r2)
   510ac:	21000104 	addi	r4,r4,4
   510b0:	d9012d15 	stw	r4,1204(sp)
   510b4:	d9012c17 	ldw	r4,1200(sp)
   510b8:	11000015 	stw	r4,0(r2)
   510bc:	003e1f06 	br	5093c <___vfprintf_internal_r+0xd8>
   510c0:	d9012d17 	ldw	r4,1204(sp)
   510c4:	21000017 	ldw	r4,0(r4)
   510c8:	d9012e15 	stw	r4,1208(sp)
   510cc:	d9012d17 	ldw	r4,1204(sp)
   510d0:	20800104 	addi	r2,r4,4
   510d4:	d9012e17 	ldw	r4,1208(sp)
   510d8:	203ee716 	blt	r4,zero,50c78 <___vfprintf_internal_r+0x414>
   510dc:	d8812d15 	stw	r2,1204(sp)
   510e0:	ac800007 	ldb	r18,0(r21)
   510e4:	003e3b06 	br	509d4 <___vfprintf_internal_r+0x170>
   510e8:	e013883a 	mov	r9,fp
   510ec:	1839883a 	mov	fp,r3
   510f0:	d8c12d17 	ldw	r3,1204(sp)
   510f4:	00800c04 	movi	r2,48
   510f8:	01000074 	movhi	r4,1
   510fc:	21002204 	addi	r4,r4,136
   51100:	1dc00017 	ldw	r23,0(r3)
   51104:	18c00104 	addi	r3,r3,4
   51108:	d8812505 	stb	r2,1172(sp)
   5110c:	00801e04 	movi	r2,120
   51110:	d8812545 	stb	r2,1173(sp)
   51114:	d8c12d15 	stw	r3,1204(sp)
   51118:	002d883a 	mov	r22,zero
   5111c:	84000094 	ori	r16,r16,2
   51120:	d9013615 	stw	r4,1240(sp)
   51124:	00c00084 	movi	r3,2
   51128:	04801e04 	movi	r18,120
   5112c:	b805883a 	mov	r2,r23
   51130:	d8012585 	stb	zero,1174(sp)
   51134:	003f4406 	br	50e48 <___vfprintf_internal_r+0x5e4>
   51138:	84000814 	ori	r16,r16,32
   5113c:	ac800007 	ldb	r18,0(r21)
   51140:	003e2406 	br	509d4 <___vfprintf_internal_r+0x170>
   51144:	d8812d17 	ldw	r2,1204(sp)
   51148:	d8012585 	stb	zero,1174(sp)
   5114c:	e013883a 	mov	r9,fp
   51150:	14c00017 	ldw	r19,0(r2)
   51154:	1839883a 	mov	fp,r3
   51158:	15c00104 	addi	r23,r2,4
   5115c:	98045526 	beq	r19,zero,522b4 <___vfprintf_internal_r+0x1a50>
   51160:	9809883a 	mov	r4,r19
   51164:	18043116 	blt	r3,zero,5222c <___vfprintf_internal_r+0x19c8>
   51168:	000b883a 	mov	r5,zero
   5116c:	180d883a 	mov	r6,r3
   51170:	da413c15 	stw	r9,1264(sp)
   51174:	0055a2c0 	call	55a2c <memchr>
   51178:	da413c17 	ldw	r9,1264(sp)
   5117c:	10047a26 	beq	r2,zero,52368 <___vfprintf_internal_r+0x1b04>
   51180:	14c5c83a 	sub	r2,r2,r19
   51184:	d8812b15 	stw	r2,1196(sp)
   51188:	e083d40e 	bge	fp,r2,520dc <___vfprintf_internal_r+0x1878>
   5118c:	df012815 	stw	fp,1184(sp)
   51190:	e004e416 	blt	fp,zero,52524 <___vfprintf_internal_r+0x1cc0>
   51194:	d8812583 	ldbu	r2,1174(sp)
   51198:	df012b15 	stw	fp,1196(sp)
   5119c:	ddc12d15 	stw	r23,1204(sp)
   511a0:	d8013115 	stw	zero,1220(sp)
   511a4:	003f3c06 	br	50e98 <___vfprintf_internal_r+0x634>
   511a8:	00800074 	movhi	r2,1
   511ac:	10802204 	addi	r2,r2,136
   511b0:	d8813615 	stw	r2,1240(sp)
   511b4:	8080080c 	andi	r2,r16,32
   511b8:	e013883a 	mov	r9,fp
   511bc:	1839883a 	mov	fp,r3
   511c0:	103f891e 	bne	r2,zero,50fe8 <___vfprintf_internal_r+0x784>
   511c4:	8080040c 	andi	r2,r16,16
   511c8:	1002c326 	beq	r2,zero,51cd8 <___vfprintf_internal_r+0x1474>
   511cc:	d8812d17 	ldw	r2,1204(sp)
   511d0:	002d883a 	mov	r22,zero
   511d4:	15c00017 	ldw	r23,0(r2)
   511d8:	10800104 	addi	r2,r2,4
   511dc:	d8812d15 	stw	r2,1204(sp)
   511e0:	003f8606 	br	50ffc <___vfprintf_internal_r+0x798>
   511e4:	84001014 	ori	r16,r16,64
   511e8:	ac800007 	ldb	r18,0(r21)
   511ec:	003df906 	br	509d4 <___vfprintf_internal_r+0x170>
   511f0:	d8812587 	ldb	r2,1174(sp)
   511f4:	1002e51e 	bne	r2,zero,51d8c <___vfprintf_internal_r+0x1528>
   511f8:	00800804 	movi	r2,32
   511fc:	d8812585 	stb	r2,1174(sp)
   51200:	ac800007 	ldb	r18,0(r21)
   51204:	003df306 	br	509d4 <___vfprintf_internal_r+0x170>
   51208:	84000054 	ori	r16,r16,1
   5120c:	ac800007 	ldb	r18,0(r21)
   51210:	003df006 	br	509d4 <___vfprintf_internal_r+0x170>
   51214:	84002014 	ori	r16,r16,128
   51218:	ac800007 	ldb	r18,0(r21)
   5121c:	003ded06 	br	509d4 <___vfprintf_internal_r+0x170>
   51220:	0009883a 	mov	r4,zero
   51224:	95bff404 	addi	r22,r18,-48
   51228:	182f883a 	mov	r23,r3
   5122c:	01400284 	movi	r5,10
   51230:	005960c0 	call	5960c <__mulsi3>
   51234:	ac800007 	ldb	r18,0(r21)
   51238:	1589883a 	add	r4,r2,r22
   5123c:	ad400044 	addi	r21,r21,1
   51240:	95bff404 	addi	r22,r18,-48
   51244:	9dbff92e 	bgeu	r19,r22,5122c <___vfprintf_internal_r+0x9c8>
   51248:	b807883a 	mov	r3,r23
   5124c:	d9012e15 	stw	r4,1208(sp)
   51250:	003de106 	br	509d8 <___vfprintf_internal_r+0x174>
   51254:	00800ac4 	movi	r2,43
   51258:	d8812585 	stb	r2,1174(sp)
   5125c:	ac800007 	ldb	r18,0(r21)
   51260:	003ddc06 	br	509d4 <___vfprintf_internal_r+0x170>
   51264:	d8c12d17 	ldw	r3,1204(sp)
   51268:	d9012d17 	ldw	r4,1204(sp)
   5126c:	e013883a 	mov	r9,fp
   51270:	18800017 	ldw	r2,0(r3)
   51274:	21000104 	addi	r4,r4,4
   51278:	00c00044 	movi	r3,1
   5127c:	d8c12815 	stw	r3,1184(sp)
   51280:	d8012585 	stb	zero,1174(sp)
   51284:	d8810405 	stb	r2,1040(sp)
   51288:	d9012d15 	stw	r4,1204(sp)
   5128c:	d8c12b15 	stw	r3,1196(sp)
   51290:	dcc10404 	addi	r19,sp,1040
   51294:	003dda06 	br	50a00 <___vfprintf_internal_r+0x19c>
   51298:	e013883a 	mov	r9,fp
   5129c:	1839883a 	mov	fp,r3
   512a0:	003ed806 	br	50e04 <___vfprintf_internal_r+0x5a0>
   512a4:	e013883a 	mov	r9,fp
   512a8:	1839883a 	mov	fp,r3
   512ac:	003f2d06 	br	50f64 <___vfprintf_internal_r+0x700>
   512b0:	e013883a 	mov	r9,fp
   512b4:	1839883a 	mov	fp,r3
   512b8:	003f3806 	br	50f9c <___vfprintf_internal_r+0x738>
   512bc:	da011d17 	ldw	r8,1140(sp)
   512c0:	d8c11c17 	ldw	r3,1136(sp)
   512c4:	d8812587 	ldb	r2,1174(sp)
   512c8:	10000b26 	beq	r2,zero,512f8 <___vfprintf_internal_r+0xa94>
   512cc:	d8812584 	addi	r2,sp,1174
   512d0:	48800015 	stw	r2,0(r9)
   512d4:	00800044 	movi	r2,1
   512d8:	48800115 	stw	r2,4(r9)
   512dc:	4091883a 	add	r8,r8,r2
   512e0:	1887883a 	add	r3,r3,r2
   512e4:	da011d15 	stw	r8,1140(sp)
   512e8:	d8c11c15 	stw	r3,1136(sp)
   512ec:	008001c4 	movi	r2,7
   512f0:	10c18e16 	blt	r2,r3,5192c <___vfprintf_internal_r+0x10c8>
   512f4:	4a400204 	addi	r9,r9,8
   512f8:	d9012a17 	ldw	r4,1192(sp)
   512fc:	20000b26 	beq	r4,zero,5132c <___vfprintf_internal_r+0xac8>
   51300:	d8812504 	addi	r2,sp,1172
   51304:	48800015 	stw	r2,0(r9)
   51308:	00800084 	movi	r2,2
   5130c:	48800115 	stw	r2,4(r9)
   51310:	4091883a 	add	r8,r8,r2
   51314:	18c00044 	addi	r3,r3,1
   51318:	da011d15 	stw	r8,1140(sp)
   5131c:	d8c11c15 	stw	r3,1136(sp)
   51320:	008001c4 	movi	r2,7
   51324:	10c17816 	blt	r2,r3,51908 <___vfprintf_internal_r+0x10a4>
   51328:	4a400204 	addi	r9,r9,8
   5132c:	d9012f17 	ldw	r4,1212(sp)
   51330:	00802004 	movi	r2,128
   51334:	2080fc26 	beq	r4,r2,51728 <___vfprintf_internal_r+0xec4>
   51338:	d8813117 	ldw	r2,1220(sp)
   5133c:	d9012b17 	ldw	r4,1196(sp)
   51340:	112fc83a 	sub	r23,r2,r4
   51344:	05c02a0e 	bge	zero,r23,513f0 <___vfprintf_internal_r+0xb8c>
   51348:	07000404 	movi	fp,16
   5134c:	05000074 	movhi	r20,1
   51350:	a5002d84 	addi	r20,r20,182
   51354:	e5c01d0e 	bge	fp,r23,513cc <___vfprintf_internal_r+0xb68>
   51358:	dc812a15 	stw	r18,1192(sp)
   5135c:	058001c4 	movi	r22,7
   51360:	a025883a 	mov	r18,r20
   51364:	8029883a 	mov	r20,r16
   51368:	dc012917 	ldw	r16,1188(sp)
   5136c:	00000306 	br	5137c <___vfprintf_internal_r+0xb18>
   51370:	bdfffc04 	addi	r23,r23,-16
   51374:	4a400204 	addi	r9,r9,8
   51378:	e5c0110e 	bge	fp,r23,513c0 <___vfprintf_internal_r+0xb5c>
   5137c:	4c800015 	stw	r18,0(r9)
   51380:	4f000115 	stw	fp,4(r9)
   51384:	42000404 	addi	r8,r8,16
   51388:	18c00044 	addi	r3,r3,1
   5138c:	da011d15 	stw	r8,1140(sp)
   51390:	d8c11c15 	stw	r3,1136(sp)
   51394:	b0fff60e 	bge	r22,r3,51370 <___vfprintf_internal_r+0xb0c>
   51398:	8809883a 	mov	r4,r17
   5139c:	800b883a 	mov	r5,r16
   513a0:	d9811b04 	addi	r6,sp,1132
   513a4:	00508300 	call	50830 <__sprint_r>
   513a8:	103e741e 	bne	r2,zero,50d7c <___vfprintf_internal_r+0x518>
   513ac:	bdfffc04 	addi	r23,r23,-16
   513b0:	da011d17 	ldw	r8,1140(sp)
   513b4:	d8c11c17 	ldw	r3,1136(sp)
   513b8:	da400404 	addi	r9,sp,16
   513bc:	e5ffef16 	blt	fp,r23,5137c <___vfprintf_internal_r+0xb18>
   513c0:	a021883a 	mov	r16,r20
   513c4:	9029883a 	mov	r20,r18
   513c8:	dc812a17 	ldw	r18,1192(sp)
   513cc:	4d000015 	stw	r20,0(r9)
   513d0:	4dc00115 	stw	r23,4(r9)
   513d4:	45d1883a 	add	r8,r8,r23
   513d8:	18c00044 	addi	r3,r3,1
   513dc:	da011d15 	stw	r8,1140(sp)
   513e0:	d8c11c15 	stw	r3,1136(sp)
   513e4:	008001c4 	movi	r2,7
   513e8:	10c13e16 	blt	r2,r3,518e4 <___vfprintf_internal_r+0x1080>
   513ec:	4a400204 	addi	r9,r9,8
   513f0:	8080400c 	andi	r2,r16,256
   513f4:	1000831e 	bne	r2,zero,51604 <___vfprintf_internal_r+0xda0>
   513f8:	d8812b17 	ldw	r2,1196(sp)
   513fc:	4cc00015 	stw	r19,0(r9)
   51400:	48800115 	stw	r2,4(r9)
   51404:	4091883a 	add	r8,r8,r2
   51408:	18c00044 	addi	r3,r3,1
   5140c:	da011d15 	stw	r8,1140(sp)
   51410:	d8c11c15 	stw	r3,1136(sp)
   51414:	008001c4 	movi	r2,7
   51418:	10c05316 	blt	r2,r3,51568 <___vfprintf_internal_r+0xd04>
   5141c:	4a400204 	addi	r9,r9,8
   51420:	8400010c 	andi	r16,r16,4
   51424:	80002e26 	beq	r16,zero,514e0 <___vfprintf_internal_r+0xc7c>
   51428:	d8812e17 	ldw	r2,1208(sp)
   5142c:	d8c12817 	ldw	r3,1184(sp)
   51430:	10e1c83a 	sub	r16,r2,r3
   51434:	04002a0e 	bge	zero,r16,514e0 <___vfprintf_internal_r+0xc7c>
   51438:	04800404 	movi	r18,16
   5143c:	d8c11c17 	ldw	r3,1136(sp)
   51440:	05c00074 	movhi	r23,1
   51444:	bdc02984 	addi	r23,r23,166
   51448:	9400170e 	bge	r18,r16,514a8 <___vfprintf_internal_r+0xc44>
   5144c:	04c001c4 	movi	r19,7
   51450:	dd012917 	ldw	r20,1188(sp)
   51454:	00000306 	br	51464 <___vfprintf_internal_r+0xc00>
   51458:	843ffc04 	addi	r16,r16,-16
   5145c:	4a400204 	addi	r9,r9,8
   51460:	9400110e 	bge	r18,r16,514a8 <___vfprintf_internal_r+0xc44>
   51464:	4dc00015 	stw	r23,0(r9)
   51468:	4c800115 	stw	r18,4(r9)
   5146c:	42000404 	addi	r8,r8,16
   51470:	18c00044 	addi	r3,r3,1
   51474:	da011d15 	stw	r8,1140(sp)
   51478:	d8c11c15 	stw	r3,1136(sp)
   5147c:	98fff60e 	bge	r19,r3,51458 <___vfprintf_internal_r+0xbf4>
   51480:	8809883a 	mov	r4,r17
   51484:	a00b883a 	mov	r5,r20
   51488:	d9811b04 	addi	r6,sp,1132
   5148c:	00508300 	call	50830 <__sprint_r>
   51490:	103e3a1e 	bne	r2,zero,50d7c <___vfprintf_internal_r+0x518>
   51494:	843ffc04 	addi	r16,r16,-16
   51498:	da011d17 	ldw	r8,1140(sp)
   5149c:	d8c11c17 	ldw	r3,1136(sp)
   514a0:	da400404 	addi	r9,sp,16
   514a4:	943fef16 	blt	r18,r16,51464 <___vfprintf_internal_r+0xc00>
   514a8:	4dc00015 	stw	r23,0(r9)
   514ac:	4c000115 	stw	r16,4(r9)
   514b0:	8211883a 	add	r8,r16,r8
   514b4:	18c00044 	addi	r3,r3,1
   514b8:	da011d15 	stw	r8,1140(sp)
   514bc:	d8c11c15 	stw	r3,1136(sp)
   514c0:	008001c4 	movi	r2,7
   514c4:	10c0060e 	bge	r2,r3,514e0 <___vfprintf_internal_r+0xc7c>
   514c8:	d9412917 	ldw	r5,1188(sp)
   514cc:	8809883a 	mov	r4,r17
   514d0:	d9811b04 	addi	r6,sp,1132
   514d4:	00508300 	call	50830 <__sprint_r>
   514d8:	103e281e 	bne	r2,zero,50d7c <___vfprintf_internal_r+0x518>
   514dc:	da011d17 	ldw	r8,1140(sp)
   514e0:	dd012817 	ldw	r20,1184(sp)
   514e4:	d9012e17 	ldw	r4,1208(sp)
   514e8:	a100010e 	bge	r20,r4,514f0 <___vfprintf_internal_r+0xc8c>
   514ec:	2029883a 	mov	r20,r4
   514f0:	d8812c17 	ldw	r2,1200(sp)
   514f4:	1505883a 	add	r2,r2,r20
   514f8:	d8812c15 	stw	r2,1200(sp)
   514fc:	4000b91e 	bne	r8,zero,517e4 <___vfprintf_internal_r+0xf80>
   51500:	d8011c15 	stw	zero,1136(sp)
   51504:	a8800007 	ldb	r2,0(r21)
   51508:	da400404 	addi	r9,sp,16
   5150c:	103d0d1e 	bne	r2,zero,50944 <___vfprintf_internal_r+0xe0>
   51510:	a825883a 	mov	r18,r21
   51514:	003d2306 	br	509a4 <___vfprintf_internal_r+0x140>
   51518:	d9412917 	ldw	r5,1188(sp)
   5151c:	8809883a 	mov	r4,r17
   51520:	d9811b04 	addi	r6,sp,1132
   51524:	00508300 	call	50830 <__sprint_r>
   51528:	103e141e 	bne	r2,zero,50d7c <___vfprintf_internal_r+0x518>
   5152c:	da011d17 	ldw	r8,1140(sp)
   51530:	da400404 	addi	r9,sp,16
   51534:	8080004c 	andi	r2,r16,1
   51538:	103fb926 	beq	r2,zero,51420 <___vfprintf_internal_r+0xbbc>
   5153c:	d8c11c17 	ldw	r3,1136(sp)
   51540:	d9013717 	ldw	r4,1244(sp)
   51544:	00800044 	movi	r2,1
   51548:	48800115 	stw	r2,4(r9)
   5154c:	49000015 	stw	r4,0(r9)
   51550:	4091883a 	add	r8,r8,r2
   51554:	1887883a 	add	r3,r3,r2
   51558:	da011d15 	stw	r8,1140(sp)
   5155c:	d8c11c15 	stw	r3,1136(sp)
   51560:	008001c4 	movi	r2,7
   51564:	10ffad0e 	bge	r2,r3,5141c <___vfprintf_internal_r+0xbb8>
   51568:	d9412917 	ldw	r5,1188(sp)
   5156c:	8809883a 	mov	r4,r17
   51570:	d9811b04 	addi	r6,sp,1132
   51574:	00508300 	call	50830 <__sprint_r>
   51578:	103e001e 	bne	r2,zero,50d7c <___vfprintf_internal_r+0x518>
   5157c:	da400404 	addi	r9,sp,16
   51580:	da011d17 	ldw	r8,1140(sp)
   51584:	003fa606 	br	51420 <___vfprintf_internal_r+0xbbc>
   51588:	18803fcc 	andi	r2,r3,255
   5158c:	00c00044 	movi	r3,1
   51590:	10c10126 	beq	r2,r3,51998 <___vfprintf_internal_r+0x1134>
   51594:	00c00084 	movi	r3,2
   51598:	10c0ed26 	beq	r2,r3,51950 <___vfprintf_internal_r+0x10ec>
   5159c:	d8c10dc4 	addi	r3,sp,1079
   515a0:	b808d0fa 	srli	r4,r23,3
   515a4:	b00a977a 	slli	r5,r22,29
   515a8:	b02cd0fa 	srli	r22,r22,3
   515ac:	bdc001cc 	andi	r23,r23,7
   515b0:	b8800c04 	addi	r2,r23,48
   515b4:	292eb03a 	or	r23,r5,r4
   515b8:	18800005 	stb	r2,0(r3)
   515bc:	bd88b03a 	or	r4,r23,r22
   515c0:	1827883a 	mov	r19,r3
   515c4:	18ffffc4 	addi	r3,r3,-1
   515c8:	203ff51e 	bne	r4,zero,515a0 <___vfprintf_internal_r+0xd3c>
   515cc:	8100004c 	andi	r4,r16,1
   515d0:	980b883a 	mov	r5,r19
   515d4:	20000726 	beq	r4,zero,515f4 <___vfprintf_internal_r+0xd90>
   515d8:	10803fcc 	andi	r2,r2,255
   515dc:	1080201c 	xori	r2,r2,128
   515e0:	10bfe004 	addi	r2,r2,-128
   515e4:	01000c04 	movi	r4,48
   515e8:	11000226 	beq	r2,r4,515f4 <___vfprintf_internal_r+0xd90>
   515ec:	1827883a 	mov	r19,r3
   515f0:	293fffc5 	stb	r4,-1(r5)
   515f4:	d8812717 	ldw	r2,1180(sp)
   515f8:	14c5c83a 	sub	r2,r2,r19
   515fc:	d8812b15 	stw	r2,1196(sp)
   51600:	003e1f06 	br	50e80 <___vfprintf_internal_r+0x61c>
   51604:	00801944 	movi	r2,101
   51608:	14807c0e 	bge	r2,r18,517fc <___vfprintf_internal_r+0xf98>
   5160c:	d9013317 	ldw	r4,1228(sp)
   51610:	d9413417 	ldw	r5,1232(sp)
   51614:	000d883a 	mov	r6,zero
   51618:	000f883a 	mov	r7,zero
   5161c:	d8c13b15 	stw	r3,1260(sp)
   51620:	da013a15 	stw	r8,1256(sp)
   51624:	da413c15 	stw	r9,1264(sp)
   51628:	005916c0 	call	5916c <__eqdf2>
   5162c:	d8c13b17 	ldw	r3,1260(sp)
   51630:	da013a17 	ldw	r8,1256(sp)
   51634:	da413c17 	ldw	r9,1264(sp)
   51638:	1001001e 	bne	r2,zero,51a3c <___vfprintf_internal_r+0x11d8>
   5163c:	00800074 	movhi	r2,1
   51640:	10802904 	addi	r2,r2,164
   51644:	48800015 	stw	r2,0(r9)
   51648:	00800044 	movi	r2,1
   5164c:	48800115 	stw	r2,4(r9)
   51650:	4091883a 	add	r8,r8,r2
   51654:	1887883a 	add	r3,r3,r2
   51658:	da011d15 	stw	r8,1140(sp)
   5165c:	d8c11c15 	stw	r3,1136(sp)
   51660:	008001c4 	movi	r2,7
   51664:	10c20316 	blt	r2,r3,51e74 <___vfprintf_internal_r+0x1610>
   51668:	4a400204 	addi	r9,r9,8
   5166c:	d8812417 	ldw	r2,1168(sp)
   51670:	d8c13217 	ldw	r3,1224(sp)
   51674:	10c00216 	blt	r2,r3,51680 <___vfprintf_internal_r+0xe1c>
   51678:	8080004c 	andi	r2,r16,1
   5167c:	103f6826 	beq	r2,zero,51420 <___vfprintf_internal_r+0xbbc>
   51680:	d8c11c17 	ldw	r3,1136(sp)
   51684:	d9013717 	ldw	r4,1244(sp)
   51688:	00800044 	movi	r2,1
   5168c:	48800115 	stw	r2,4(r9)
   51690:	49000015 	stw	r4,0(r9)
   51694:	4091883a 	add	r8,r8,r2
   51698:	1887883a 	add	r3,r3,r2
   5169c:	da011d15 	stw	r8,1140(sp)
   516a0:	d8c11c15 	stw	r3,1136(sp)
   516a4:	008001c4 	movi	r2,7
   516a8:	10c2ce16 	blt	r2,r3,521e4 <___vfprintf_internal_r+0x1980>
   516ac:	4a400204 	addi	r9,r9,8
   516b0:	d8813217 	ldw	r2,1224(sp)
   516b4:	14bfffc4 	addi	r18,r2,-1
   516b8:	04bf590e 	bge	zero,r18,51420 <___vfprintf_internal_r+0xbbc>
   516bc:	04c00404 	movi	r19,16
   516c0:	d8c11c17 	ldw	r3,1136(sp)
   516c4:	05000074 	movhi	r20,1
   516c8:	a5002d84 	addi	r20,r20,182
   516cc:	9c818a0e 	bge	r19,r18,51cf8 <___vfprintf_internal_r+0x1494>
   516d0:	058001c4 	movi	r22,7
   516d4:	ddc12917 	ldw	r23,1188(sp)
   516d8:	00000306 	br	516e8 <___vfprintf_internal_r+0xe84>
   516dc:	4a400204 	addi	r9,r9,8
   516e0:	94bffc04 	addi	r18,r18,-16
   516e4:	9c81840e 	bge	r19,r18,51cf8 <___vfprintf_internal_r+0x1494>
   516e8:	4d000015 	stw	r20,0(r9)
   516ec:	4cc00115 	stw	r19,4(r9)
   516f0:	42000404 	addi	r8,r8,16
   516f4:	18c00044 	addi	r3,r3,1
   516f8:	da011d15 	stw	r8,1140(sp)
   516fc:	d8c11c15 	stw	r3,1136(sp)
   51700:	b0fff60e 	bge	r22,r3,516dc <___vfprintf_internal_r+0xe78>
   51704:	8809883a 	mov	r4,r17
   51708:	b80b883a 	mov	r5,r23
   5170c:	d9811b04 	addi	r6,sp,1132
   51710:	00508300 	call	50830 <__sprint_r>
   51714:	103d991e 	bne	r2,zero,50d7c <___vfprintf_internal_r+0x518>
   51718:	da011d17 	ldw	r8,1140(sp)
   5171c:	d8c11c17 	ldw	r3,1136(sp)
   51720:	da400404 	addi	r9,sp,16
   51724:	003fee06 	br	516e0 <___vfprintf_internal_r+0xe7c>
   51728:	d8812e17 	ldw	r2,1208(sp)
   5172c:	d9012817 	ldw	r4,1184(sp)
   51730:	112fc83a 	sub	r23,r2,r4
   51734:	05ff000e 	bge	zero,r23,51338 <___vfprintf_internal_r+0xad4>
   51738:	07000404 	movi	fp,16
   5173c:	05000074 	movhi	r20,1
   51740:	a5002d84 	addi	r20,r20,182
   51744:	e5c01d0e 	bge	fp,r23,517bc <___vfprintf_internal_r+0xf58>
   51748:	dc812a15 	stw	r18,1192(sp)
   5174c:	058001c4 	movi	r22,7
   51750:	a025883a 	mov	r18,r20
   51754:	8029883a 	mov	r20,r16
   51758:	dc012917 	ldw	r16,1188(sp)
   5175c:	00000306 	br	5176c <___vfprintf_internal_r+0xf08>
   51760:	bdfffc04 	addi	r23,r23,-16
   51764:	4a400204 	addi	r9,r9,8
   51768:	e5c0110e 	bge	fp,r23,517b0 <___vfprintf_internal_r+0xf4c>
   5176c:	4c800015 	stw	r18,0(r9)
   51770:	4f000115 	stw	fp,4(r9)
   51774:	42000404 	addi	r8,r8,16
   51778:	18c00044 	addi	r3,r3,1
   5177c:	da011d15 	stw	r8,1140(sp)
   51780:	d8c11c15 	stw	r3,1136(sp)
   51784:	b0fff60e 	bge	r22,r3,51760 <___vfprintf_internal_r+0xefc>
   51788:	8809883a 	mov	r4,r17
   5178c:	800b883a 	mov	r5,r16
   51790:	d9811b04 	addi	r6,sp,1132
   51794:	00508300 	call	50830 <__sprint_r>
   51798:	103d781e 	bne	r2,zero,50d7c <___vfprintf_internal_r+0x518>
   5179c:	bdfffc04 	addi	r23,r23,-16
   517a0:	da011d17 	ldw	r8,1140(sp)
   517a4:	d8c11c17 	ldw	r3,1136(sp)
   517a8:	da400404 	addi	r9,sp,16
   517ac:	e5ffef16 	blt	fp,r23,5176c <___vfprintf_internal_r+0xf08>
   517b0:	a021883a 	mov	r16,r20
   517b4:	9029883a 	mov	r20,r18
   517b8:	dc812a17 	ldw	r18,1192(sp)
   517bc:	4d000015 	stw	r20,0(r9)
   517c0:	4dc00115 	stw	r23,4(r9)
   517c4:	45d1883a 	add	r8,r8,r23
   517c8:	18c00044 	addi	r3,r3,1
   517cc:	da011d15 	stw	r8,1140(sp)
   517d0:	d8c11c15 	stw	r3,1136(sp)
   517d4:	008001c4 	movi	r2,7
   517d8:	10c13616 	blt	r2,r3,51cb4 <___vfprintf_internal_r+0x1450>
   517dc:	4a400204 	addi	r9,r9,8
   517e0:	003ed506 	br	51338 <___vfprintf_internal_r+0xad4>
   517e4:	d9412917 	ldw	r5,1188(sp)
   517e8:	8809883a 	mov	r4,r17
   517ec:	d9811b04 	addi	r6,sp,1132
   517f0:	00508300 	call	50830 <__sprint_r>
   517f4:	103f4226 	beq	r2,zero,51500 <___vfprintf_internal_r+0xc9c>
   517f8:	003d6006 	br	50d7c <___vfprintf_internal_r+0x518>
   517fc:	d9013217 	ldw	r4,1224(sp)
   51800:	00800044 	movi	r2,1
   51804:	4cc00015 	stw	r19,0(r9)
   51808:	1101000e 	bge	r2,r4,51c0c <___vfprintf_internal_r+0x13a8>
   5180c:	00800044 	movi	r2,1
   51810:	48800115 	stw	r2,4(r9)
   51814:	4091883a 	add	r8,r8,r2
   51818:	1887883a 	add	r3,r3,r2
   5181c:	da011d15 	stw	r8,1140(sp)
   51820:	d8c11c15 	stw	r3,1136(sp)
   51824:	008001c4 	movi	r2,7
   51828:	10c10c16 	blt	r2,r3,51c5c <___vfprintf_internal_r+0x13f8>
   5182c:	4a400204 	addi	r9,r9,8
   51830:	d8813717 	ldw	r2,1244(sp)
   51834:	48800015 	stw	r2,0(r9)
   51838:	00800044 	movi	r2,1
   5183c:	48800115 	stw	r2,4(r9)
   51840:	4091883a 	add	r8,r8,r2
   51844:	1887883a 	add	r3,r3,r2
   51848:	da011d15 	stw	r8,1140(sp)
   5184c:	d8c11c15 	stw	r3,1136(sp)
   51850:	008001c4 	movi	r2,7
   51854:	10c10a16 	blt	r2,r3,51c80 <___vfprintf_internal_r+0x141c>
   51858:	4c800204 	addi	r18,r9,8
   5185c:	d9013317 	ldw	r4,1228(sp)
   51860:	d9413417 	ldw	r5,1232(sp)
   51864:	000d883a 	mov	r6,zero
   51868:	000f883a 	mov	r7,zero
   5186c:	d8c13b15 	stw	r3,1260(sp)
   51870:	da013a15 	stw	r8,1256(sp)
   51874:	00591c80 	call	591c8 <__nedf2>
   51878:	d8c13b17 	ldw	r3,1260(sp)
   5187c:	da013a17 	ldw	r8,1256(sp)
   51880:	1000ba26 	beq	r2,zero,51b6c <___vfprintf_internal_r+0x1308>
   51884:	d9013217 	ldw	r4,1224(sp)
   51888:	9cc00044 	addi	r19,r19,1
   5188c:	94c00015 	stw	r19,0(r18)
   51890:	20bfffc4 	addi	r2,r4,-1
   51894:	90800115 	stw	r2,4(r18)
   51898:	4091883a 	add	r8,r8,r2
   5189c:	18c00044 	addi	r3,r3,1
   518a0:	da011d15 	stw	r8,1140(sp)
   518a4:	d8c11c15 	stw	r3,1136(sp)
   518a8:	008001c4 	movi	r2,7
   518ac:	10c0e216 	blt	r2,r3,51c38 <___vfprintf_internal_r+0x13d4>
   518b0:	94800204 	addi	r18,r18,8
   518b4:	d9013517 	ldw	r4,1236(sp)
   518b8:	d8811fc4 	addi	r2,sp,1151
   518bc:	90800015 	stw	r2,0(r18)
   518c0:	91000115 	stw	r4,4(r18)
   518c4:	4111883a 	add	r8,r8,r4
   518c8:	18c00044 	addi	r3,r3,1
   518cc:	da011d15 	stw	r8,1140(sp)
   518d0:	d8c11c15 	stw	r3,1136(sp)
   518d4:	008001c4 	movi	r2,7
   518d8:	10ff2316 	blt	r2,r3,51568 <___vfprintf_internal_r+0xd04>
   518dc:	92400204 	addi	r9,r18,8
   518e0:	003ecf06 	br	51420 <___vfprintf_internal_r+0xbbc>
   518e4:	d9412917 	ldw	r5,1188(sp)
   518e8:	8809883a 	mov	r4,r17
   518ec:	d9811b04 	addi	r6,sp,1132
   518f0:	00508300 	call	50830 <__sprint_r>
   518f4:	103d211e 	bne	r2,zero,50d7c <___vfprintf_internal_r+0x518>
   518f8:	da011d17 	ldw	r8,1140(sp)
   518fc:	d8c11c17 	ldw	r3,1136(sp)
   51900:	da400404 	addi	r9,sp,16
   51904:	003eba06 	br	513f0 <___vfprintf_internal_r+0xb8c>
   51908:	d9412917 	ldw	r5,1188(sp)
   5190c:	8809883a 	mov	r4,r17
   51910:	d9811b04 	addi	r6,sp,1132
   51914:	00508300 	call	50830 <__sprint_r>
   51918:	103d181e 	bne	r2,zero,50d7c <___vfprintf_internal_r+0x518>
   5191c:	da011d17 	ldw	r8,1140(sp)
   51920:	d8c11c17 	ldw	r3,1136(sp)
   51924:	da400404 	addi	r9,sp,16
   51928:	003e8006 	br	5132c <___vfprintf_internal_r+0xac8>
   5192c:	d9412917 	ldw	r5,1188(sp)
   51930:	8809883a 	mov	r4,r17
   51934:	d9811b04 	addi	r6,sp,1132
   51938:	00508300 	call	50830 <__sprint_r>
   5193c:	103d0f1e 	bne	r2,zero,50d7c <___vfprintf_internal_r+0x518>
   51940:	da011d17 	ldw	r8,1140(sp)
   51944:	d8c11c17 	ldw	r3,1136(sp)
   51948:	da400404 	addi	r9,sp,16
   5194c:	003e6a06 	br	512f8 <___vfprintf_internal_r+0xa94>
   51950:	d9413617 	ldw	r5,1240(sp)
   51954:	d8810dc4 	addi	r2,sp,1079
   51958:	b8c003cc 	andi	r3,r23,15
   5195c:	b008973a 	slli	r4,r22,28
   51960:	28c7883a 	add	r3,r5,r3
   51964:	b82ed13a 	srli	r23,r23,4
   51968:	18c00003 	ldbu	r3,0(r3)
   5196c:	b02cd13a 	srli	r22,r22,4
   51970:	25eeb03a 	or	r23,r4,r23
   51974:	10c00005 	stb	r3,0(r2)
   51978:	bd86b03a 	or	r3,r23,r22
   5197c:	1027883a 	mov	r19,r2
   51980:	10bfffc4 	addi	r2,r2,-1
   51984:	183ff41e 	bne	r3,zero,51958 <___vfprintf_internal_r+0x10f4>
   51988:	003f1a06 	br	515f4 <___vfprintf_internal_r+0xd90>
   5198c:	d8012b15 	stw	zero,1196(sp)
   51990:	dcc10e04 	addi	r19,sp,1080
   51994:	003d3a06 	br	50e80 <___vfprintf_internal_r+0x61c>
   51998:	b0025426 	beq	r22,zero,522ec <___vfprintf_internal_r+0x1a88>
   5199c:	b807883a 	mov	r3,r23
   519a0:	d8810dc4 	addi	r2,sp,1079
   519a4:	882f883a 	mov	r23,r17
   519a8:	04c00244 	movi	r19,9
   519ac:	8023883a 	mov	r17,r16
   519b0:	da412815 	stw	r9,1184(sp)
   519b4:	1821883a 	mov	r16,r3
   519b8:	8009883a 	mov	r4,r16
   519bc:	b00b883a 	mov	r5,r22
   519c0:	01800284 	movi	r6,10
   519c4:	000f883a 	mov	r7,zero
   519c8:	1029883a 	mov	r20,r2
   519cc:	00582a40 	call	582a4 <__umoddi3>
   519d0:	10800c04 	addi	r2,r2,48
   519d4:	8009883a 	mov	r4,r16
   519d8:	b00b883a 	mov	r5,r22
   519dc:	a0800005 	stb	r2,0(r20)
   519e0:	01800284 	movi	r6,10
   519e4:	000f883a 	mov	r7,zero
   519e8:	0057c540 	call	57c54 <__udivdi3>
   519ec:	1021883a 	mov	r16,r2
   519f0:	182d883a 	mov	r22,r3
   519f4:	a0bfffc4 	addi	r2,r20,-1
   519f8:	183fef1e 	bne	r3,zero,519b8 <___vfprintf_internal_r+0x1154>
   519fc:	9c3fee36 	bltu	r19,r16,519b8 <___vfprintf_internal_r+0x1154>
   51a00:	da412817 	ldw	r9,1184(sp)
   51a04:	8005883a 	mov	r2,r16
   51a08:	8821883a 	mov	r16,r17
   51a0c:	b823883a 	mov	r17,r23
   51a10:	102f883a 	mov	r23,r2
   51a14:	d8812717 	ldw	r2,1180(sp)
   51a18:	a4ffffc4 	addi	r19,r20,-1
   51a1c:	bdc00c04 	addi	r23,r23,48
   51a20:	14c5c83a 	sub	r2,r2,r19
   51a24:	a5ffffc5 	stb	r23,-1(r20)
   51a28:	d8812b15 	stw	r2,1196(sp)
   51a2c:	003d1406 	br	50e80 <___vfprintf_internal_r+0x61c>
   51a30:	00c00044 	movi	r3,1
   51a34:	bd84b03a 	or	r2,r23,r22
   51a38:	003d0306 	br	50e48 <___vfprintf_internal_r+0x5e4>
   51a3c:	dc812417 	ldw	r18,1168(sp)
   51a40:	0481140e 	bge	zero,r18,51e94 <___vfprintf_internal_r+0x1630>
   51a44:	d9013217 	ldw	r4,1224(sp)
   51a48:	4cc00015 	stw	r19,0(r9)
   51a4c:	9100ec16 	blt	r18,r4,51e00 <___vfprintf_internal_r+0x159c>
   51a50:	49000115 	stw	r4,4(r9)
   51a54:	4111883a 	add	r8,r8,r4
   51a58:	18c00044 	addi	r3,r3,1
   51a5c:	da011d15 	stw	r8,1140(sp)
   51a60:	d8c11c15 	stw	r3,1136(sp)
   51a64:	008001c4 	movi	r2,7
   51a68:	10c23616 	blt	r2,r3,52344 <___vfprintf_internal_r+0x1ae0>
   51a6c:	4a400204 	addi	r9,r9,8
   51a70:	d8813217 	ldw	r2,1224(sp)
   51a74:	90a5c83a 	sub	r18,r18,r2
   51a78:	04beae0e 	bge	zero,r18,51534 <___vfprintf_internal_r+0xcd0>
   51a7c:	04c00404 	movi	r19,16
   51a80:	d8c11c17 	ldw	r3,1136(sp)
   51a84:	05000074 	movhi	r20,1
   51a88:	a5002d84 	addi	r20,r20,182
   51a8c:	9c81dd0e 	bge	r19,r18,52204 <___vfprintf_internal_r+0x19a0>
   51a90:	058001c4 	movi	r22,7
   51a94:	ddc12917 	ldw	r23,1188(sp)
   51a98:	00000306 	br	51aa8 <___vfprintf_internal_r+0x1244>
   51a9c:	4a400204 	addi	r9,r9,8
   51aa0:	94bffc04 	addi	r18,r18,-16
   51aa4:	9c81d70e 	bge	r19,r18,52204 <___vfprintf_internal_r+0x19a0>
   51aa8:	4d000015 	stw	r20,0(r9)
   51aac:	4cc00115 	stw	r19,4(r9)
   51ab0:	42000404 	addi	r8,r8,16
   51ab4:	18c00044 	addi	r3,r3,1
   51ab8:	da011d15 	stw	r8,1140(sp)
   51abc:	d8c11c15 	stw	r3,1136(sp)
   51ac0:	b0fff60e 	bge	r22,r3,51a9c <___vfprintf_internal_r+0x1238>
   51ac4:	8809883a 	mov	r4,r17
   51ac8:	b80b883a 	mov	r5,r23
   51acc:	d9811b04 	addi	r6,sp,1132
   51ad0:	00508300 	call	50830 <__sprint_r>
   51ad4:	103ca91e 	bne	r2,zero,50d7c <___vfprintf_internal_r+0x518>
   51ad8:	da011d17 	ldw	r8,1140(sp)
   51adc:	d8c11c17 	ldw	r3,1136(sp)
   51ae0:	da400404 	addi	r9,sp,16
   51ae4:	003fee06 	br	51aa0 <___vfprintf_internal_r+0x123c>
   51ae8:	d9412917 	ldw	r5,1188(sp)
   51aec:	8809883a 	mov	r4,r17
   51af0:	d9811b04 	addi	r6,sp,1132
   51af4:	00508300 	call	50830 <__sprint_r>
   51af8:	103ca01e 	bne	r2,zero,50d7c <___vfprintf_internal_r+0x518>
   51afc:	da011d17 	ldw	r8,1140(sp)
   51b00:	d8c11c17 	ldw	r3,1136(sp)
   51b04:	da400404 	addi	r9,sp,16
   51b08:	003dee06 	br	512c4 <___vfprintf_internal_r+0xa60>
   51b0c:	00c00084 	movi	r3,2
   51b10:	bd84b03a 	or	r2,r23,r22
   51b14:	d8012585 	stb	zero,1174(sp)
   51b18:	003ccb06 	br	50e48 <___vfprintf_internal_r+0x5e4>
   51b1c:	8080040c 	andi	r2,r16,16
   51b20:	1000ae26 	beq	r2,zero,51ddc <___vfprintf_internal_r+0x1578>
   51b24:	d9012d17 	ldw	r4,1204(sp)
   51b28:	25c00017 	ldw	r23,0(r4)
   51b2c:	21000104 	addi	r4,r4,4
   51b30:	d9012d15 	stw	r4,1204(sp)
   51b34:	b82dd7fa 	srai	r22,r23,31
   51b38:	b005883a 	mov	r2,r22
   51b3c:	003cb906 	br	50e24 <___vfprintf_internal_r+0x5c0>
   51b40:	8080040c 	andi	r2,r16,16
   51b44:	10007026 	beq	r2,zero,51d08 <___vfprintf_internal_r+0x14a4>
   51b48:	d8812d17 	ldw	r2,1204(sp)
   51b4c:	002d883a 	mov	r22,zero
   51b50:	00c00044 	movi	r3,1
   51b54:	15c00017 	ldw	r23,0(r2)
   51b58:	10800104 	addi	r2,r2,4
   51b5c:	d8812d15 	stw	r2,1204(sp)
   51b60:	d8012585 	stb	zero,1174(sp)
   51b64:	b805883a 	mov	r2,r23
   51b68:	003cb706 	br	50e48 <___vfprintf_internal_r+0x5e4>
   51b6c:	d8813217 	ldw	r2,1224(sp)
   51b70:	14ffffc4 	addi	r19,r2,-1
   51b74:	04ff4f0e 	bge	zero,r19,518b4 <___vfprintf_internal_r+0x1050>
   51b78:	05800404 	movi	r22,16
   51b7c:	05000074 	movhi	r20,1
   51b80:	a5002d84 	addi	r20,r20,182
   51b84:	b4c0470e 	bge	r22,r19,51ca4 <___vfprintf_internal_r+0x1440>
   51b88:	05c001c4 	movi	r23,7
   51b8c:	df012917 	ldw	fp,1188(sp)
   51b90:	00000306 	br	51ba0 <___vfprintf_internal_r+0x133c>
   51b94:	94800204 	addi	r18,r18,8
   51b98:	9cfffc04 	addi	r19,r19,-16
   51b9c:	b4c0410e 	bge	r22,r19,51ca4 <___vfprintf_internal_r+0x1440>
   51ba0:	95000015 	stw	r20,0(r18)
   51ba4:	95800115 	stw	r22,4(r18)
   51ba8:	42000404 	addi	r8,r8,16
   51bac:	18c00044 	addi	r3,r3,1
   51bb0:	da011d15 	stw	r8,1140(sp)
   51bb4:	d8c11c15 	stw	r3,1136(sp)
   51bb8:	b8fff60e 	bge	r23,r3,51b94 <___vfprintf_internal_r+0x1330>
   51bbc:	8809883a 	mov	r4,r17
   51bc0:	e00b883a 	mov	r5,fp
   51bc4:	d9811b04 	addi	r6,sp,1132
   51bc8:	00508300 	call	50830 <__sprint_r>
   51bcc:	103c6b1e 	bne	r2,zero,50d7c <___vfprintf_internal_r+0x518>
   51bd0:	da011d17 	ldw	r8,1140(sp)
   51bd4:	d8c11c17 	ldw	r3,1136(sp)
   51bd8:	dc800404 	addi	r18,sp,16
   51bdc:	003fee06 	br	51b98 <___vfprintf_internal_r+0x1334>
   51be0:	8080040c 	andi	r2,r16,16
   51be4:	10005326 	beq	r2,zero,51d34 <___vfprintf_internal_r+0x14d0>
   51be8:	d8c12d17 	ldw	r3,1204(sp)
   51bec:	002d883a 	mov	r22,zero
   51bf0:	1dc00017 	ldw	r23,0(r3)
   51bf4:	18c00104 	addi	r3,r3,4
   51bf8:	d8c12d15 	stw	r3,1204(sp)
   51bfc:	b805883a 	mov	r2,r23
   51c00:	0007883a 	mov	r3,zero
   51c04:	d8012585 	stb	zero,1174(sp)
   51c08:	003c8f06 	br	50e48 <___vfprintf_internal_r+0x5e4>
   51c0c:	8088703a 	and	r4,r16,r2
   51c10:	203efe1e 	bne	r4,zero,5180c <___vfprintf_internal_r+0xfa8>
   51c14:	48800115 	stw	r2,4(r9)
   51c18:	42000044 	addi	r8,r8,1
   51c1c:	18c00044 	addi	r3,r3,1
   51c20:	da011d15 	stw	r8,1140(sp)
   51c24:	d8c11c15 	stw	r3,1136(sp)
   51c28:	008001c4 	movi	r2,7
   51c2c:	10c00216 	blt	r2,r3,51c38 <___vfprintf_internal_r+0x13d4>
   51c30:	4c800204 	addi	r18,r9,8
   51c34:	003f1f06 	br	518b4 <___vfprintf_internal_r+0x1050>
   51c38:	d9412917 	ldw	r5,1188(sp)
   51c3c:	8809883a 	mov	r4,r17
   51c40:	d9811b04 	addi	r6,sp,1132
   51c44:	00508300 	call	50830 <__sprint_r>
   51c48:	103c4c1e 	bne	r2,zero,50d7c <___vfprintf_internal_r+0x518>
   51c4c:	dc800404 	addi	r18,sp,16
   51c50:	da011d17 	ldw	r8,1140(sp)
   51c54:	d8c11c17 	ldw	r3,1136(sp)
   51c58:	003f1606 	br	518b4 <___vfprintf_internal_r+0x1050>
   51c5c:	d9412917 	ldw	r5,1188(sp)
   51c60:	8809883a 	mov	r4,r17
   51c64:	d9811b04 	addi	r6,sp,1132
   51c68:	00508300 	call	50830 <__sprint_r>
   51c6c:	103c431e 	bne	r2,zero,50d7c <___vfprintf_internal_r+0x518>
   51c70:	da011d17 	ldw	r8,1140(sp)
   51c74:	d8c11c17 	ldw	r3,1136(sp)
   51c78:	da400404 	addi	r9,sp,16
   51c7c:	003eec06 	br	51830 <___vfprintf_internal_r+0xfcc>
   51c80:	d9412917 	ldw	r5,1188(sp)
   51c84:	8809883a 	mov	r4,r17
   51c88:	d9811b04 	addi	r6,sp,1132
   51c8c:	00508300 	call	50830 <__sprint_r>
   51c90:	103c3a1e 	bne	r2,zero,50d7c <___vfprintf_internal_r+0x518>
   51c94:	da011d17 	ldw	r8,1140(sp)
   51c98:	d8c11c17 	ldw	r3,1136(sp)
   51c9c:	dc800404 	addi	r18,sp,16
   51ca0:	003eee06 	br	5185c <___vfprintf_internal_r+0xff8>
   51ca4:	95000015 	stw	r20,0(r18)
   51ca8:	94c00115 	stw	r19,4(r18)
   51cac:	44d1883a 	add	r8,r8,r19
   51cb0:	003efa06 	br	5189c <___vfprintf_internal_r+0x1038>
   51cb4:	d9412917 	ldw	r5,1188(sp)
   51cb8:	8809883a 	mov	r4,r17
   51cbc:	d9811b04 	addi	r6,sp,1132
   51cc0:	00508300 	call	50830 <__sprint_r>
   51cc4:	103c2d1e 	bne	r2,zero,50d7c <___vfprintf_internal_r+0x518>
   51cc8:	da011d17 	ldw	r8,1140(sp)
   51ccc:	d8c11c17 	ldw	r3,1136(sp)
   51cd0:	da400404 	addi	r9,sp,16
   51cd4:	003d9806 	br	51338 <___vfprintf_internal_r+0xad4>
   51cd8:	8080100c 	andi	r2,r16,64
   51cdc:	10011626 	beq	r2,zero,52138 <___vfprintf_internal_r+0x18d4>
   51ce0:	d8c12d17 	ldw	r3,1204(sp)
   51ce4:	002d883a 	mov	r22,zero
   51ce8:	1dc0000b 	ldhu	r23,0(r3)
   51cec:	18c00104 	addi	r3,r3,4
   51cf0:	d8c12d15 	stw	r3,1204(sp)
   51cf4:	003cc106 	br	50ffc <___vfprintf_internal_r+0x798>
   51cf8:	4d000015 	stw	r20,0(r9)
   51cfc:	4c800115 	stw	r18,4(r9)
   51d00:	4491883a 	add	r8,r8,r18
   51d04:	003dc006 	br	51408 <___vfprintf_internal_r+0xba4>
   51d08:	8080100c 	andi	r2,r16,64
   51d0c:	10010126 	beq	r2,zero,52114 <___vfprintf_internal_r+0x18b0>
   51d10:	d8c12d17 	ldw	r3,1204(sp)
   51d14:	002d883a 	mov	r22,zero
   51d18:	1dc0000b 	ldhu	r23,0(r3)
   51d1c:	18c00104 	addi	r3,r3,4
   51d20:	d8c12d15 	stw	r3,1204(sp)
   51d24:	b805883a 	mov	r2,r23
   51d28:	00c00044 	movi	r3,1
   51d2c:	d8012585 	stb	zero,1174(sp)
   51d30:	003c4506 	br	50e48 <___vfprintf_internal_r+0x5e4>
   51d34:	8080100c 	andi	r2,r16,64
   51d38:	10010526 	beq	r2,zero,52150 <___vfprintf_internal_r+0x18ec>
   51d3c:	d9012d17 	ldw	r4,1204(sp)
   51d40:	002d883a 	mov	r22,zero
   51d44:	0007883a 	mov	r3,zero
   51d48:	25c0000b 	ldhu	r23,0(r4)
   51d4c:	21000104 	addi	r4,r4,4
   51d50:	d9012d15 	stw	r4,1204(sp)
   51d54:	b805883a 	mov	r2,r23
   51d58:	d8012585 	stb	zero,1174(sp)
   51d5c:	003c3a06 	br	50e48 <___vfprintf_internal_r+0x5e4>
   51d60:	d8812d17 	ldw	r2,1204(sp)
   51d64:	15800017 	ldw	r22,0(r2)
   51d68:	15000117 	ldw	r20,4(r2)
   51d6c:	10800204 	addi	r2,r2,8
   51d70:	d8812d15 	stw	r2,1204(sp)
   51d74:	dd813315 	stw	r22,1228(sp)
   51d78:	dd013415 	stw	r20,1232(sp)
   51d7c:	003c5906 	br	50ee4 <___vfprintf_internal_r+0x680>
   51d80:	00c00084 	movi	r3,2
   51d84:	d8012585 	stb	zero,1174(sp)
   51d88:	003c2f06 	br	50e48 <___vfprintf_internal_r+0x5e4>
   51d8c:	ac800007 	ldb	r18,0(r21)
   51d90:	003b1006 	br	509d4 <___vfprintf_internal_r+0x170>
   51d94:	8080040c 	andi	r2,r16,16
   51d98:	1000091e 	bne	r2,zero,51dc0 <___vfprintf_internal_r+0x155c>
   51d9c:	8400100c 	andi	r16,r16,64
   51da0:	80000726 	beq	r16,zero,51dc0 <___vfprintf_internal_r+0x155c>
   51da4:	d8c12d17 	ldw	r3,1204(sp)
   51da8:	d9012c17 	ldw	r4,1200(sp)
   51dac:	18800017 	ldw	r2,0(r3)
   51db0:	18c00104 	addi	r3,r3,4
   51db4:	d8c12d15 	stw	r3,1204(sp)
   51db8:	1100000d 	sth	r4,0(r2)
   51dbc:	003adf06 	br	5093c <___vfprintf_internal_r+0xd8>
   51dc0:	d8c12d17 	ldw	r3,1204(sp)
   51dc4:	d9012c17 	ldw	r4,1200(sp)
   51dc8:	18800017 	ldw	r2,0(r3)
   51dcc:	18c00104 	addi	r3,r3,4
   51dd0:	d8c12d15 	stw	r3,1204(sp)
   51dd4:	11000015 	stw	r4,0(r2)
   51dd8:	003ad806 	br	5093c <___vfprintf_internal_r+0xd8>
   51ddc:	8080100c 	andi	r2,r16,64
   51de0:	1000c526 	beq	r2,zero,520f8 <___vfprintf_internal_r+0x1894>
   51de4:	d8812d17 	ldw	r2,1204(sp)
   51de8:	15c0000f 	ldh	r23,0(r2)
   51dec:	10800104 	addi	r2,r2,4
   51df0:	d8812d15 	stw	r2,1204(sp)
   51df4:	b82dd7fa 	srai	r22,r23,31
   51df8:	b005883a 	mov	r2,r22
   51dfc:	003c0906 	br	50e24 <___vfprintf_internal_r+0x5c0>
   51e00:	4c800115 	stw	r18,4(r9)
   51e04:	9211883a 	add	r8,r18,r8
   51e08:	18c00044 	addi	r3,r3,1
   51e0c:	da011d15 	stw	r8,1140(sp)
   51e10:	d8c11c15 	stw	r3,1136(sp)
   51e14:	008001c4 	movi	r2,7
   51e18:	10c14016 	blt	r2,r3,5231c <___vfprintf_internal_r+0x1ab8>
   51e1c:	4a400204 	addi	r9,r9,8
   51e20:	d8813717 	ldw	r2,1244(sp)
   51e24:	9ca7883a 	add	r19,r19,r18
   51e28:	48800015 	stw	r2,0(r9)
   51e2c:	00800044 	movi	r2,1
   51e30:	48800115 	stw	r2,4(r9)
   51e34:	4091883a 	add	r8,r8,r2
   51e38:	1887883a 	add	r3,r3,r2
   51e3c:	da011d15 	stw	r8,1140(sp)
   51e40:	d8c11c15 	stw	r3,1136(sp)
   51e44:	008001c4 	movi	r2,7
   51e48:	10c12c16 	blt	r2,r3,522fc <___vfprintf_internal_r+0x1a98>
   51e4c:	4a400204 	addi	r9,r9,8
   51e50:	d9013217 	ldw	r4,1224(sp)
   51e54:	da011d17 	ldw	r8,1140(sp)
   51e58:	d8c11c17 	ldw	r3,1136(sp)
   51e5c:	24a5c83a 	sub	r18,r4,r18
   51e60:	4cc00015 	stw	r19,0(r9)
   51e64:	003fa506 	br	51cfc <___vfprintf_internal_r+0x1498>
   51e68:	04c00074 	movhi	r19,1
   51e6c:	9cc01a04 	addi	r19,r19,104
   51e70:	003c2e06 	br	50f2c <___vfprintf_internal_r+0x6c8>
   51e74:	d9412917 	ldw	r5,1188(sp)
   51e78:	8809883a 	mov	r4,r17
   51e7c:	d9811b04 	addi	r6,sp,1132
   51e80:	00508300 	call	50830 <__sprint_r>
   51e84:	103bbd1e 	bne	r2,zero,50d7c <___vfprintf_internal_r+0x518>
   51e88:	da011d17 	ldw	r8,1140(sp)
   51e8c:	da400404 	addi	r9,sp,16
   51e90:	003df606 	br	5166c <___vfprintf_internal_r+0xe08>
   51e94:	00800074 	movhi	r2,1
   51e98:	10802904 	addi	r2,r2,164
   51e9c:	48800015 	stw	r2,0(r9)
   51ea0:	00800044 	movi	r2,1
   51ea4:	48800115 	stw	r2,4(r9)
   51ea8:	4091883a 	add	r8,r8,r2
   51eac:	1887883a 	add	r3,r3,r2
   51eb0:	da011d15 	stw	r8,1140(sp)
   51eb4:	d8c11c15 	stw	r3,1136(sp)
   51eb8:	008001c4 	movi	r2,7
   51ebc:	10c0bc16 	blt	r2,r3,521b0 <___vfprintf_internal_r+0x194c>
   51ec0:	4a400204 	addi	r9,r9,8
   51ec4:	9000041e 	bne	r18,zero,51ed8 <___vfprintf_internal_r+0x1674>
   51ec8:	d8c13217 	ldw	r3,1224(sp)
   51ecc:	1800021e 	bne	r3,zero,51ed8 <___vfprintf_internal_r+0x1674>
   51ed0:	8080004c 	andi	r2,r16,1
   51ed4:	103d5226 	beq	r2,zero,51420 <___vfprintf_internal_r+0xbbc>
   51ed8:	d8c11c17 	ldw	r3,1136(sp)
   51edc:	d9013717 	ldw	r4,1244(sp)
   51ee0:	00800044 	movi	r2,1
   51ee4:	48800115 	stw	r2,4(r9)
   51ee8:	49000015 	stw	r4,0(r9)
   51eec:	4091883a 	add	r8,r8,r2
   51ef0:	1887883a 	add	r3,r3,r2
   51ef4:	da011d15 	stw	r8,1140(sp)
   51ef8:	d8c11c15 	stw	r3,1136(sp)
   51efc:	008001c4 	movi	r2,7
   51f00:	10c14516 	blt	r2,r3,52418 <___vfprintf_internal_r+0x1bb4>
   51f04:	4a400204 	addi	r9,r9,8
   51f08:	04a5c83a 	sub	r18,zero,r18
   51f0c:	0480d70e 	bge	zero,r18,5226c <___vfprintf_internal_r+0x1a08>
   51f10:	05800404 	movi	r22,16
   51f14:	05000074 	movhi	r20,1
   51f18:	a5002d84 	addi	r20,r20,182
   51f1c:	b480db0e 	bge	r22,r18,5228c <___vfprintf_internal_r+0x1a28>
   51f20:	05c001c4 	movi	r23,7
   51f24:	df012917 	ldw	fp,1188(sp)
   51f28:	00000306 	br	51f38 <___vfprintf_internal_r+0x16d4>
   51f2c:	4a400204 	addi	r9,r9,8
   51f30:	94bffc04 	addi	r18,r18,-16
   51f34:	b480d50e 	bge	r22,r18,5228c <___vfprintf_internal_r+0x1a28>
   51f38:	4d000015 	stw	r20,0(r9)
   51f3c:	4d800115 	stw	r22,4(r9)
   51f40:	42000404 	addi	r8,r8,16
   51f44:	18c00044 	addi	r3,r3,1
   51f48:	da011d15 	stw	r8,1140(sp)
   51f4c:	d8c11c15 	stw	r3,1136(sp)
   51f50:	b8fff60e 	bge	r23,r3,51f2c <___vfprintf_internal_r+0x16c8>
   51f54:	8809883a 	mov	r4,r17
   51f58:	e00b883a 	mov	r5,fp
   51f5c:	d9811b04 	addi	r6,sp,1132
   51f60:	00508300 	call	50830 <__sprint_r>
   51f64:	103b851e 	bne	r2,zero,50d7c <___vfprintf_internal_r+0x518>
   51f68:	da011d17 	ldw	r8,1140(sp)
   51f6c:	d8c11c17 	ldw	r3,1136(sp)
   51f70:	da400404 	addi	r9,sp,16
   51f74:	003fee06 	br	51f30 <___vfprintf_internal_r+0x16cc>
   51f78:	da413c15 	stw	r9,1264(sp)
   51f7c:	00575500 	call	57550 <__isnand>
   51f80:	da413c17 	ldw	r9,1264(sp)
   51f84:	10007e1e 	bne	r2,zero,52180 <___vfprintf_internal_r+0x191c>
   51f88:	00bfffc4 	movi	r2,-1
   51f8c:	e0816a26 	beq	fp,r2,52538 <___vfprintf_internal_r+0x1cd4>
   51f90:	008019c4 	movi	r2,103
   51f94:	90816526 	beq	r18,r2,5252c <___vfprintf_internal_r+0x1cc8>
   51f98:	008011c4 	movi	r2,71
   51f9c:	90816326 	beq	r18,r2,5252c <___vfprintf_internal_r+0x1cc8>
   51fa0:	80c04014 	ori	r3,r16,256
   51fa4:	d8c12a15 	stw	r3,1192(sp)
   51fa8:	a0016516 	blt	r20,zero,52540 <___vfprintf_internal_r+0x1cdc>
   51fac:	d8012f05 	stb	zero,1212(sp)
   51fb0:	00801984 	movi	r2,102
   51fb4:	9080f226 	beq	r18,r2,52380 <___vfprintf_internal_r+0x1b1c>
   51fb8:	00801184 	movi	r2,70
   51fbc:	9080f026 	beq	r18,r2,52380 <___vfprintf_internal_r+0x1b1c>
   51fc0:	00801944 	movi	r2,101
   51fc4:	90818d26 	beq	r18,r2,525fc <___vfprintf_internal_r+0x1d98>
   51fc8:	00801144 	movi	r2,69
   51fcc:	90818b26 	beq	r18,r2,525fc <___vfprintf_internal_r+0x1d98>
   51fd0:	e02f883a 	mov	r23,fp
   51fd4:	d8812404 	addi	r2,sp,1168
   51fd8:	d8800115 	stw	r2,4(sp)
   51fdc:	d8812304 	addi	r2,sp,1164
   51fe0:	d8800215 	stw	r2,8(sp)
   51fe4:	d8812204 	addi	r2,sp,1160
   51fe8:	ddc00015 	stw	r23,0(sp)
   51fec:	d8800315 	stw	r2,12(sp)
   51ff0:	8809883a 	mov	r4,r17
   51ff4:	b00b883a 	mov	r5,r22
   51ff8:	a00d883a 	mov	r6,r20
   51ffc:	01c00084 	movi	r7,2
   52000:	da413c15 	stw	r9,1264(sp)
   52004:	0052ab40 	call	52ab4 <_dtoa_r>
   52008:	1027883a 	mov	r19,r2
   5200c:	008019c4 	movi	r2,103
   52010:	da413c17 	ldw	r9,1264(sp)
   52014:	9081951e 	bne	r18,r2,5266c <___vfprintf_internal_r+0x1e08>
   52018:	8080004c 	andi	r2,r16,1
   5201c:	10017926 	beq	r2,zero,52604 <___vfprintf_internal_r+0x1da0>
   52020:	00801184 	movi	r2,70
   52024:	9dc7883a 	add	r3,r19,r23
   52028:	9080e626 	beq	r18,r2,523c4 <___vfprintf_internal_r+0x1b60>
   5202c:	b009883a 	mov	r4,r22
   52030:	a00b883a 	mov	r5,r20
   52034:	000d883a 	mov	r6,zero
   52038:	000f883a 	mov	r7,zero
   5203c:	d8c13b15 	stw	r3,1260(sp)
   52040:	da413c15 	stw	r9,1264(sp)
   52044:	005916c0 	call	5916c <__eqdf2>
   52048:	d8c13b17 	ldw	r3,1260(sp)
   5204c:	da413c17 	ldw	r9,1264(sp)
   52050:	10000726 	beq	r2,zero,52070 <___vfprintf_internal_r+0x180c>
   52054:	d8812217 	ldw	r2,1160(sp)
   52058:	10c18a2e 	bgeu	r2,r3,52684 <___vfprintf_internal_r+0x1e20>
   5205c:	01000c04 	movi	r4,48
   52060:	11000005 	stb	r4,0(r2)
   52064:	10800044 	addi	r2,r2,1
   52068:	d8812215 	stw	r2,1160(sp)
   5206c:	10fffc1e 	bne	r2,r3,52060 <___vfprintf_internal_r+0x17fc>
   52070:	1cc7c83a 	sub	r3,r3,r19
   52074:	d8c13215 	stw	r3,1224(sp)
   52078:	008019c4 	movi	r2,103
   5207c:	9080fa26 	beq	r18,r2,52468 <___vfprintf_internal_r+0x1c04>
   52080:	008011c4 	movi	r2,71
   52084:	9080f826 	beq	r18,r2,52468 <___vfprintf_internal_r+0x1c04>
   52088:	00801984 	movi	r2,102
   5208c:	90818e1e 	bne	r18,r2,526c8 <___vfprintf_internal_r+0x1e64>
   52090:	d8812417 	ldw	r2,1168(sp)
   52094:	d8812b15 	stw	r2,1196(sp)
   52098:	00817c0e 	bge	zero,r2,5268c <___vfprintf_internal_r+0x1e28>
   5209c:	e000021e 	bne	fp,zero,520a8 <___vfprintf_internal_r+0x1844>
   520a0:	8400004c 	andi	r16,r16,1
   520a4:	80000426 	beq	r16,zero,520b8 <___vfprintf_internal_r+0x1854>
   520a8:	d8812b17 	ldw	r2,1196(sp)
   520ac:	e2000044 	addi	r8,fp,1
   520b0:	1205883a 	add	r2,r2,r8
   520b4:	d8812b15 	stw	r2,1196(sp)
   520b8:	d8812815 	stw	r2,1184(sp)
   520bc:	10010b16 	blt	r2,zero,524ec <___vfprintf_internal_r+0x1c88>
   520c0:	ddc12f07 	ldb	r23,1212(sp)
   520c4:	b800e426 	beq	r23,zero,52458 <___vfprintf_internal_r+0x1bf4>
   520c8:	00800b44 	movi	r2,45
   520cc:	d8812585 	stb	r2,1174(sp)
   520d0:	dc012a17 	ldw	r16,1192(sp)
   520d4:	d8013115 	stw	zero,1220(sp)
   520d8:	003b7306 	br	50ea8 <___vfprintf_internal_r+0x644>
   520dc:	d8812b17 	ldw	r2,1196(sp)
   520e0:	d8812815 	stw	r2,1184(sp)
   520e4:	10005716 	blt	r2,zero,52244 <___vfprintf_internal_r+0x19e0>
   520e8:	d8812583 	ldbu	r2,1174(sp)
   520ec:	ddc12d15 	stw	r23,1204(sp)
   520f0:	d8013115 	stw	zero,1220(sp)
   520f4:	003b6806 	br	50e98 <___vfprintf_internal_r+0x634>
   520f8:	d8c12d17 	ldw	r3,1204(sp)
   520fc:	1dc00017 	ldw	r23,0(r3)
   52100:	18c00104 	addi	r3,r3,4
   52104:	d8c12d15 	stw	r3,1204(sp)
   52108:	b82dd7fa 	srai	r22,r23,31
   5210c:	b005883a 	mov	r2,r22
   52110:	003b4406 	br	50e24 <___vfprintf_internal_r+0x5c0>
   52114:	d9012d17 	ldw	r4,1204(sp)
   52118:	002d883a 	mov	r22,zero
   5211c:	00c00044 	movi	r3,1
   52120:	25c00017 	ldw	r23,0(r4)
   52124:	21000104 	addi	r4,r4,4
   52128:	d9012d15 	stw	r4,1204(sp)
   5212c:	b805883a 	mov	r2,r23
   52130:	d8012585 	stb	zero,1174(sp)
   52134:	003b4406 	br	50e48 <___vfprintf_internal_r+0x5e4>
   52138:	d9012d17 	ldw	r4,1204(sp)
   5213c:	002d883a 	mov	r22,zero
   52140:	25c00017 	ldw	r23,0(r4)
   52144:	21000104 	addi	r4,r4,4
   52148:	d9012d15 	stw	r4,1204(sp)
   5214c:	003bab06 	br	50ffc <___vfprintf_internal_r+0x798>
   52150:	d8812d17 	ldw	r2,1204(sp)
   52154:	002d883a 	mov	r22,zero
   52158:	0007883a 	mov	r3,zero
   5215c:	15c00017 	ldw	r23,0(r2)
   52160:	10800104 	addi	r2,r2,4
   52164:	d8812d15 	stw	r2,1204(sp)
   52168:	d8012585 	stb	zero,1174(sp)
   5216c:	b805883a 	mov	r2,r23
   52170:	003b3506 	br	50e48 <___vfprintf_internal_r+0x5e4>
   52174:	00ffffc4 	movi	r3,-1
   52178:	b82b883a 	mov	r21,r23
   5217c:	003a1606 	br	509d8 <___vfprintf_internal_r+0x174>
   52180:	008011c4 	movi	r2,71
   52184:	1480b116 	blt	r2,r18,5244c <___vfprintf_internal_r+0x1be8>
   52188:	04c00074 	movhi	r19,1
   5218c:	9cc01b04 	addi	r19,r19,108
   52190:	00c000c4 	movi	r3,3
   52194:	00bfdfc4 	movi	r2,-129
   52198:	80a0703a 	and	r16,r16,r2
   5219c:	d8c12815 	stw	r3,1184(sp)
   521a0:	d8812583 	ldbu	r2,1174(sp)
   521a4:	d8c12b15 	stw	r3,1196(sp)
   521a8:	d8013115 	stw	zero,1220(sp)
   521ac:	003b3a06 	br	50e98 <___vfprintf_internal_r+0x634>
   521b0:	d9412917 	ldw	r5,1188(sp)
   521b4:	8809883a 	mov	r4,r17
   521b8:	d9811b04 	addi	r6,sp,1132
   521bc:	00508300 	call	50830 <__sprint_r>
   521c0:	103aee1e 	bne	r2,zero,50d7c <___vfprintf_internal_r+0x518>
   521c4:	dc812417 	ldw	r18,1168(sp)
   521c8:	da011d17 	ldw	r8,1140(sp)
   521cc:	da400404 	addi	r9,sp,16
   521d0:	003f3c06 	br	51ec4 <___vfprintf_internal_r+0x1660>
   521d4:	ad400044 	addi	r21,r21,1
   521d8:	84000814 	ori	r16,r16,32
   521dc:	14800047 	ldb	r18,1(r2)
   521e0:	0039fc06 	br	509d4 <___vfprintf_internal_r+0x170>
   521e4:	d9412917 	ldw	r5,1188(sp)
   521e8:	8809883a 	mov	r4,r17
   521ec:	d9811b04 	addi	r6,sp,1132
   521f0:	00508300 	call	50830 <__sprint_r>
   521f4:	103ae11e 	bne	r2,zero,50d7c <___vfprintf_internal_r+0x518>
   521f8:	da011d17 	ldw	r8,1140(sp)
   521fc:	da400404 	addi	r9,sp,16
   52200:	003d2b06 	br	516b0 <___vfprintf_internal_r+0xe4c>
   52204:	4d000015 	stw	r20,0(r9)
   52208:	4c800115 	stw	r18,4(r9)
   5220c:	4491883a 	add	r8,r8,r18
   52210:	18c00044 	addi	r3,r3,1
   52214:	da011d15 	stw	r8,1140(sp)
   52218:	d8c11c15 	stw	r3,1136(sp)
   5221c:	008001c4 	movi	r2,7
   52220:	10fcbd16 	blt	r2,r3,51518 <___vfprintf_internal_r+0xcb4>
   52224:	4a400204 	addi	r9,r9,8
   52228:	003cc206 	br	51534 <___vfprintf_internal_r+0xcd0>
   5222c:	da413c15 	stw	r9,1264(sp)
   52230:	00507a40 	call	507a4 <strlen>
   52234:	d8812b15 	stw	r2,1196(sp)
   52238:	d8812815 	stw	r2,1184(sp)
   5223c:	da413c17 	ldw	r9,1264(sp)
   52240:	103fa90e 	bge	r2,zero,520e8 <___vfprintf_internal_r+0x1884>
   52244:	d8012815 	stw	zero,1184(sp)
   52248:	003fa706 	br	520e8 <___vfprintf_internal_r+0x1884>
   5224c:	d9412917 	ldw	r5,1188(sp)
   52250:	8809883a 	mov	r4,r17
   52254:	d9811b04 	addi	r6,sp,1132
   52258:	00508300 	call	50830 <__sprint_r>
   5225c:	103ac71e 	bne	r2,zero,50d7c <___vfprintf_internal_r+0x518>
   52260:	da011d17 	ldw	r8,1140(sp)
   52264:	d8c11c17 	ldw	r3,1136(sp)
   52268:	da400404 	addi	r9,sp,16
   5226c:	d8813217 	ldw	r2,1224(sp)
   52270:	4cc00015 	stw	r19,0(r9)
   52274:	48800115 	stw	r2,4(r9)
   52278:	4091883a 	add	r8,r8,r2
   5227c:	003c6206 	br	51408 <___vfprintf_internal_r+0xba4>
   52280:	00800b44 	movi	r2,45
   52284:	d8812585 	stb	r2,1174(sp)
   52288:	003b2406 	br	50f1c <___vfprintf_internal_r+0x6b8>
   5228c:	4d000015 	stw	r20,0(r9)
   52290:	4c800115 	stw	r18,4(r9)
   52294:	4491883a 	add	r8,r8,r18
   52298:	18c00044 	addi	r3,r3,1
   5229c:	da011d15 	stw	r8,1140(sp)
   522a0:	d8c11c15 	stw	r3,1136(sp)
   522a4:	008001c4 	movi	r2,7
   522a8:	10ffe816 	blt	r2,r3,5224c <___vfprintf_internal_r+0x19e8>
   522ac:	4a400204 	addi	r9,r9,8
   522b0:	003fee06 	br	5226c <___vfprintf_internal_r+0x1a08>
   522b4:	d8c12b15 	stw	r3,1196(sp)
   522b8:	00800184 	movi	r2,6
   522bc:	10c0062e 	bgeu	r2,r3,522d8 <___vfprintf_internal_r+0x1a74>
   522c0:	d8812b15 	stw	r2,1196(sp)
   522c4:	d8812815 	stw	r2,1184(sp)
   522c8:	ddc12d15 	stw	r23,1204(sp)
   522cc:	04c00074 	movhi	r19,1
   522d0:	9cc02704 	addi	r19,r19,156
   522d4:	0039ca06 	br	50a00 <___vfprintf_internal_r+0x19c>
   522d8:	d8812b17 	ldw	r2,1196(sp)
   522dc:	d8812815 	stw	r2,1184(sp)
   522e0:	103ff90e 	bge	r2,zero,522c8 <___vfprintf_internal_r+0x1a64>
   522e4:	d8012815 	stw	zero,1184(sp)
   522e8:	003ff706 	br	522c8 <___vfprintf_internal_r+0x1a64>
   522ec:	00800244 	movi	r2,9
   522f0:	15fdaa36 	bltu	r2,r23,5199c <___vfprintf_internal_r+0x1138>
   522f4:	dd010e04 	addi	r20,sp,1080
   522f8:	003dc606 	br	51a14 <___vfprintf_internal_r+0x11b0>
   522fc:	d9412917 	ldw	r5,1188(sp)
   52300:	8809883a 	mov	r4,r17
   52304:	d9811b04 	addi	r6,sp,1132
   52308:	00508300 	call	50830 <__sprint_r>
   5230c:	103a9b1e 	bne	r2,zero,50d7c <___vfprintf_internal_r+0x518>
   52310:	dc812417 	ldw	r18,1168(sp)
   52314:	da400404 	addi	r9,sp,16
   52318:	003ecd06 	br	51e50 <___vfprintf_internal_r+0x15ec>
   5231c:	d9412917 	ldw	r5,1188(sp)
   52320:	8809883a 	mov	r4,r17
   52324:	d9811b04 	addi	r6,sp,1132
   52328:	00508300 	call	50830 <__sprint_r>
   5232c:	103a931e 	bne	r2,zero,50d7c <___vfprintf_internal_r+0x518>
   52330:	dc812417 	ldw	r18,1168(sp)
   52334:	da011d17 	ldw	r8,1140(sp)
   52338:	d8c11c17 	ldw	r3,1136(sp)
   5233c:	da400404 	addi	r9,sp,16
   52340:	003eb706 	br	51e20 <___vfprintf_internal_r+0x15bc>
   52344:	d9412917 	ldw	r5,1188(sp)
   52348:	8809883a 	mov	r4,r17
   5234c:	d9811b04 	addi	r6,sp,1132
   52350:	00508300 	call	50830 <__sprint_r>
   52354:	103a891e 	bne	r2,zero,50d7c <___vfprintf_internal_r+0x518>
   52358:	dc812417 	ldw	r18,1168(sp)
   5235c:	da011d17 	ldw	r8,1140(sp)
   52360:	da400404 	addi	r9,sp,16
   52364:	003dc206 	br	51a70 <___vfprintf_internal_r+0x120c>
   52368:	df012815 	stw	fp,1184(sp)
   5236c:	d8812583 	ldbu	r2,1174(sp)
   52370:	df012b15 	stw	fp,1196(sp)
   52374:	ddc12d15 	stw	r23,1204(sp)
   52378:	d8013115 	stw	zero,1220(sp)
   5237c:	003ac606 	br	50e98 <___vfprintf_internal_r+0x634>
   52380:	d8812404 	addi	r2,sp,1168
   52384:	d8800115 	stw	r2,4(sp)
   52388:	d8812304 	addi	r2,sp,1164
   5238c:	d8800215 	stw	r2,8(sp)
   52390:	d8812204 	addi	r2,sp,1160
   52394:	df000015 	stw	fp,0(sp)
   52398:	d8800315 	stw	r2,12(sp)
   5239c:	8809883a 	mov	r4,r17
   523a0:	b00b883a 	mov	r5,r22
   523a4:	a00d883a 	mov	r6,r20
   523a8:	01c000c4 	movi	r7,3
   523ac:	da413c15 	stw	r9,1264(sp)
   523b0:	0052ab40 	call	52ab4 <_dtoa_r>
   523b4:	da413c17 	ldw	r9,1264(sp)
   523b8:	1027883a 	mov	r19,r2
   523bc:	1707883a 	add	r3,r2,fp
   523c0:	e02f883a 	mov	r23,fp
   523c4:	99000007 	ldb	r4,0(r19)
   523c8:	00800c04 	movi	r2,48
   523cc:	20800326 	beq	r4,r2,523dc <___vfprintf_internal_r+0x1b78>
   523d0:	da812417 	ldw	r10,1168(sp)
   523d4:	1a87883a 	add	r3,r3,r10
   523d8:	003f1406 	br	5202c <___vfprintf_internal_r+0x17c8>
   523dc:	b009883a 	mov	r4,r22
   523e0:	a00b883a 	mov	r5,r20
   523e4:	000d883a 	mov	r6,zero
   523e8:	000f883a 	mov	r7,zero
   523ec:	d8c13b15 	stw	r3,1260(sp)
   523f0:	da413c15 	stw	r9,1264(sp)
   523f4:	00591c80 	call	591c8 <__nedf2>
   523f8:	d8c13b17 	ldw	r3,1260(sp)
   523fc:	da413c17 	ldw	r9,1264(sp)
   52400:	103ff326 	beq	r2,zero,523d0 <___vfprintf_internal_r+0x1b6c>
   52404:	00800044 	movi	r2,1
   52408:	15d5c83a 	sub	r10,r2,r23
   5240c:	da812415 	stw	r10,1168(sp)
   52410:	1a87883a 	add	r3,r3,r10
   52414:	003f0506 	br	5202c <___vfprintf_internal_r+0x17c8>
   52418:	d9412917 	ldw	r5,1188(sp)
   5241c:	8809883a 	mov	r4,r17
   52420:	d9811b04 	addi	r6,sp,1132
   52424:	00508300 	call	50830 <__sprint_r>
   52428:	103a541e 	bne	r2,zero,50d7c <___vfprintf_internal_r+0x518>
   5242c:	dc812417 	ldw	r18,1168(sp)
   52430:	da011d17 	ldw	r8,1140(sp)
   52434:	d8c11c17 	ldw	r3,1136(sp)
   52438:	da400404 	addi	r9,sp,16
   5243c:	003eb206 	br	51f08 <___vfprintf_internal_r+0x16a4>
   52440:	b82b883a 	mov	r21,r23
   52444:	0007883a 	mov	r3,zero
   52448:	00396306 	br	509d8 <___vfprintf_internal_r+0x174>
   5244c:	04c00074 	movhi	r19,1
   52450:	9cc01c04 	addi	r19,r19,112
   52454:	003f4e06 	br	52190 <___vfprintf_internal_r+0x192c>
   52458:	d8812583 	ldbu	r2,1174(sp)
   5245c:	dc012a17 	ldw	r16,1192(sp)
   52460:	d8013115 	stw	zero,1220(sp)
   52464:	003a8c06 	br	50e98 <___vfprintf_internal_r+0x634>
   52468:	d8812417 	ldw	r2,1168(sp)
   5246c:	d8812b15 	stw	r2,1196(sp)
   52470:	1029883a 	mov	r20,r2
   52474:	00bfff44 	movi	r2,-3
   52478:	a0800116 	blt	r20,r2,52480 <___vfprintf_internal_r+0x1c1c>
   5247c:	e5001d0e 	bge	fp,r20,524f4 <___vfprintf_internal_r+0x1c90>
   52480:	94bfff84 	addi	r18,r18,-2
   52484:	a53fffc4 	addi	r20,r20,-1
   52488:	dd012415 	stw	r20,1168(sp)
   5248c:	dc811fc5 	stb	r18,1151(sp)
   52490:	a0007216 	blt	r20,zero,5265c <___vfprintf_internal_r+0x1df8>
   52494:	00800ac4 	movi	r2,43
   52498:	d8812005 	stb	r2,1152(sp)
   5249c:	00800244 	movi	r2,9
   524a0:	15003516 	blt	r2,r20,52578 <___vfprintf_internal_r+0x1d14>
   524a4:	00800c04 	movi	r2,48
   524a8:	a5000c04 	addi	r20,r20,48
   524ac:	d8812045 	stb	r2,1153(sp)
   524b0:	dd012085 	stb	r20,1154(sp)
   524b4:	d8c120c4 	addi	r3,sp,1155
   524b8:	d8811fc4 	addi	r2,sp,1151
   524bc:	1885c83a 	sub	r2,r3,r2
   524c0:	d8c13217 	ldw	r3,1224(sp)
   524c4:	d8813515 	stw	r2,1236(sp)
   524c8:	1885883a 	add	r2,r3,r2
   524cc:	d8812b15 	stw	r2,1196(sp)
   524d0:	00800044 	movi	r2,1
   524d4:	10c0580e 	bge	r2,r3,52638 <___vfprintf_internal_r+0x1dd4>
   524d8:	d8812b17 	ldw	r2,1196(sp)
   524dc:	10800044 	addi	r2,r2,1
   524e0:	d8812b15 	stw	r2,1196(sp)
   524e4:	d8812815 	stw	r2,1184(sp)
   524e8:	103ef50e 	bge	r2,zero,520c0 <___vfprintf_internal_r+0x185c>
   524ec:	d8012815 	stw	zero,1184(sp)
   524f0:	003ef306 	br	520c0 <___vfprintf_internal_r+0x185c>
   524f4:	d8812b17 	ldw	r2,1196(sp)
   524f8:	d8c13217 	ldw	r3,1224(sp)
   524fc:	10c01416 	blt	r2,r3,52550 <___vfprintf_internal_r+0x1cec>
   52500:	8400004c 	andi	r16,r16,1
   52504:	80000326 	beq	r16,zero,52514 <___vfprintf_internal_r+0x1cb0>
   52508:	d8812b17 	ldw	r2,1196(sp)
   5250c:	10800044 	addi	r2,r2,1
   52510:	d8812b15 	stw	r2,1196(sp)
   52514:	d8812815 	stw	r2,1184(sp)
   52518:	10001416 	blt	r2,zero,5256c <___vfprintf_internal_r+0x1d08>
   5251c:	048019c4 	movi	r18,103
   52520:	003ee706 	br	520c0 <___vfprintf_internal_r+0x185c>
   52524:	d8012815 	stw	zero,1184(sp)
   52528:	003b1a06 	br	51194 <___vfprintf_internal_r+0x930>
   5252c:	e03e9c1e 	bne	fp,zero,51fa0 <___vfprintf_internal_r+0x173c>
   52530:	07000044 	movi	fp,1
   52534:	003e9a06 	br	51fa0 <___vfprintf_internal_r+0x173c>
   52538:	07000184 	movi	fp,6
   5253c:	003e9806 	br	51fa0 <___vfprintf_internal_r+0x173c>
   52540:	00c00b44 	movi	r3,45
   52544:	a520003c 	xorhi	r20,r20,32768
   52548:	d8c12f05 	stb	r3,1212(sp)
   5254c:	003e9806 	br	51fb0 <___vfprintf_internal_r+0x174c>
   52550:	05003f0e 	bge	zero,r20,52650 <___vfprintf_internal_r+0x1dec>
   52554:	05000044 	movi	r20,1
   52558:	d8c13217 	ldw	r3,1224(sp)
   5255c:	a0e9883a 	add	r20,r20,r3
   52560:	dd012b15 	stw	r20,1196(sp)
   52564:	dd012815 	stw	r20,1184(sp)
   52568:	a03fec0e 	bge	r20,zero,5251c <___vfprintf_internal_r+0x1cb8>
   5256c:	d8012815 	stw	zero,1184(sp)
   52570:	048019c4 	movi	r18,103
   52574:	003ed206 	br	520c0 <___vfprintf_internal_r+0x185c>
   52578:	d8c11f84 	addi	r3,sp,1150
   5257c:	102f883a 	mov	r23,r2
   52580:	4839883a 	mov	fp,r9
   52584:	a009883a 	mov	r4,r20
   52588:	01400284 	movi	r5,10
   5258c:	182d883a 	mov	r22,r3
   52590:	00506380 	call	50638 <__modsi3>
   52594:	10800c04 	addi	r2,r2,48
   52598:	a009883a 	mov	r4,r20
   5259c:	b0800005 	stb	r2,0(r22)
   525a0:	01400284 	movi	r5,10
   525a4:	00505e80 	call	505e8 <__divsi3>
   525a8:	1029883a 	mov	r20,r2
   525ac:	b0ffffc4 	addi	r3,r22,-1
   525b0:	b8bff416 	blt	r23,r2,52584 <___vfprintf_internal_r+0x1d20>
   525b4:	11400c04 	addi	r5,r2,48
   525b8:	b17fffc5 	stb	r5,-1(r22)
   525bc:	d8811fc4 	addi	r2,sp,1151
   525c0:	e013883a 	mov	r9,fp
   525c4:	18803e2e 	bgeu	r3,r2,526c0 <___vfprintf_internal_r+0x1e5c>
   525c8:	b007883a 	mov	r3,r22
   525cc:	d9012044 	addi	r4,sp,1153
   525d0:	00000206 	br	525dc <___vfprintf_internal_r+0x1d78>
   525d4:	19400003 	ldbu	r5,0(r3)
   525d8:	18c00044 	addi	r3,r3,1
   525dc:	21400005 	stb	r5,0(r4)
   525e0:	21000044 	addi	r4,r4,1
   525e4:	10fffb1e 	bne	r2,r3,525d4 <___vfprintf_internal_r+0x1d70>
   525e8:	d8c12004 	addi	r3,sp,1152
   525ec:	1d87c83a 	sub	r3,r3,r22
   525f0:	d9012044 	addi	r4,sp,1153
   525f4:	20c7883a 	add	r3,r4,r3
   525f8:	003fb006 	br	524bc <___vfprintf_internal_r+0x1c58>
   525fc:	e5c00044 	addi	r23,fp,1
   52600:	003e7406 	br	51fd4 <___vfprintf_internal_r+0x1770>
   52604:	d8c12217 	ldw	r3,1160(sp)
   52608:	003e9906 	br	52070 <___vfprintf_internal_r+0x180c>
   5260c:	d9012d17 	ldw	r4,1204(sp)
   52610:	ac800043 	ldbu	r18,1(r21)
   52614:	b82b883a 	mov	r21,r23
   52618:	20c00017 	ldw	r3,0(r4)
   5261c:	20800104 	addi	r2,r4,4
   52620:	d8812d15 	stw	r2,1204(sp)
   52624:	18002116 	blt	r3,zero,526ac <___vfprintf_internal_r+0x1e48>
   52628:	94803fcc 	andi	r18,r18,255
   5262c:	9480201c 	xori	r18,r18,128
   52630:	94bfe004 	addi	r18,r18,-128
   52634:	0038e706 	br	509d4 <___vfprintf_internal_r+0x170>
   52638:	80a0703a 	and	r16,r16,r2
   5263c:	803fa61e 	bne	r16,zero,524d8 <___vfprintf_internal_r+0x1c74>
   52640:	d8812b17 	ldw	r2,1196(sp)
   52644:	d8812815 	stw	r2,1184(sp)
   52648:	103e9d0e 	bge	r2,zero,520c0 <___vfprintf_internal_r+0x185c>
   5264c:	003fa706 	br	524ec <___vfprintf_internal_r+0x1c88>
   52650:	00800084 	movi	r2,2
   52654:	1529c83a 	sub	r20,r2,r20
   52658:	003fbf06 	br	52558 <___vfprintf_internal_r+0x1cf4>
   5265c:	00800b44 	movi	r2,45
   52660:	0529c83a 	sub	r20,zero,r20
   52664:	d8812005 	stb	r2,1152(sp)
   52668:	003f8c06 	br	5249c <___vfprintf_internal_r+0x1c38>
   5266c:	008011c4 	movi	r2,71
   52670:	90be6926 	beq	r18,r2,52018 <___vfprintf_internal_r+0x17b4>
   52674:	003e6a06 	br	52020 <___vfprintf_internal_r+0x17bc>
   52678:	00bfffc4 	movi	r2,-1
   5267c:	d8812c15 	stw	r2,1200(sp)
   52680:	0039ad06 	br	50d38 <___vfprintf_internal_r+0x4d4>
   52684:	1007883a 	mov	r3,r2
   52688:	003e7906 	br	52070 <___vfprintf_internal_r+0x180c>
   5268c:	e000021e 	bne	fp,zero,52698 <___vfprintf_internal_r+0x1e34>
   52690:	8400004c 	andi	r16,r16,1
   52694:	80000e26 	beq	r16,zero,526d0 <___vfprintf_internal_r+0x1e6c>
   52698:	e7000084 	addi	fp,fp,2
   5269c:	df012b15 	stw	fp,1196(sp)
   526a0:	df012815 	stw	fp,1184(sp)
   526a4:	e03e860e 	bge	fp,zero,520c0 <___vfprintf_internal_r+0x185c>
   526a8:	003f9006 	br	524ec <___vfprintf_internal_r+0x1c88>
   526ac:	94803fcc 	andi	r18,r18,255
   526b0:	9480201c 	xori	r18,r18,128
   526b4:	00ffffc4 	movi	r3,-1
   526b8:	94bfe004 	addi	r18,r18,-128
   526bc:	0038c506 	br	509d4 <___vfprintf_internal_r+0x170>
   526c0:	d8c12044 	addi	r3,sp,1153
   526c4:	003f7d06 	br	524bc <___vfprintf_internal_r+0x1c58>
   526c8:	dd012417 	ldw	r20,1168(sp)
   526cc:	003f6d06 	br	52484 <___vfprintf_internal_r+0x1c20>
   526d0:	00c00044 	movi	r3,1
   526d4:	d8c12815 	stw	r3,1184(sp)
   526d8:	d8c12b15 	stw	r3,1196(sp)
   526dc:	003e7806 	br	520c0 <___vfprintf_internal_r+0x185c>

000526e0 <__vfprintf_internal>:
   526e0:	00800074 	movhi	r2,1
   526e4:	10876804 	addi	r2,r2,7584
   526e8:	2007883a 	mov	r3,r4
   526ec:	11000017 	ldw	r4,0(r2)
   526f0:	2805883a 	mov	r2,r5
   526f4:	300f883a 	mov	r7,r6
   526f8:	180b883a 	mov	r5,r3
   526fc:	100d883a 	mov	r6,r2
   52700:	00508641 	jmpi	50864 <___vfprintf_internal_r>

00052704 <__swsetup_r>:
   52704:	00800074 	movhi	r2,1
   52708:	10876804 	addi	r2,r2,7584
   5270c:	10800017 	ldw	r2,0(r2)
   52710:	defffd04 	addi	sp,sp,-12
   52714:	dc400115 	stw	r17,4(sp)
   52718:	dc000015 	stw	r16,0(sp)
   5271c:	dfc00215 	stw	ra,8(sp)
   52720:	2023883a 	mov	r17,r4
   52724:	2821883a 	mov	r16,r5
   52728:	10000226 	beq	r2,zero,52734 <__swsetup_r+0x30>
   5272c:	10c00e17 	ldw	r3,56(r2)
   52730:	18003d26 	beq	r3,zero,52828 <__swsetup_r+0x124>
   52734:	8080030b 	ldhu	r2,12(r16)
   52738:	10c0020c 	andi	r3,r2,8
   5273c:	18ffffcc 	andi	r3,r3,65535
   52740:	18e0001c 	xori	r3,r3,32768
   52744:	18e00004 	addi	r3,r3,-32768
   52748:	18001226 	beq	r3,zero,52794 <__swsetup_r+0x90>
   5274c:	80c00417 	ldw	r3,16(r16)
   52750:	18001f26 	beq	r3,zero,527d0 <__swsetup_r+0xcc>
   52754:	1100004c 	andi	r4,r2,1
   52758:	2000261e 	bne	r4,zero,527f4 <__swsetup_r+0xf0>
   5275c:	1080008c 	andi	r2,r2,2
   52760:	10bfffcc 	andi	r2,r2,65535
   52764:	10a0001c 	xori	r2,r2,32768
   52768:	10a00004 	addi	r2,r2,-32768
   5276c:	1000311e 	bne	r2,zero,52834 <__swsetup_r+0x130>
   52770:	80800517 	ldw	r2,20(r16)
   52774:	80800215 	stw	r2,8(r16)
   52778:	18002326 	beq	r3,zero,52808 <__swsetup_r+0x104>
   5277c:	0005883a 	mov	r2,zero
   52780:	dfc00217 	ldw	ra,8(sp)
   52784:	dc400117 	ldw	r17,4(sp)
   52788:	dc000017 	ldw	r16,0(sp)
   5278c:	dec00304 	addi	sp,sp,12
   52790:	f800283a 	ret
   52794:	10c0040c 	andi	r3,r2,16
   52798:	18ffffcc 	andi	r3,r3,65535
   5279c:	18e0001c 	xori	r3,r3,32768
   527a0:	18e00004 	addi	r3,r3,-32768
   527a4:	18001e26 	beq	r3,zero,52820 <__swsetup_r+0x11c>
   527a8:	10c0010c 	andi	r3,r2,4
   527ac:	18ffffcc 	andi	r3,r3,65535
   527b0:	18e0001c 	xori	r3,r3,32768
   527b4:	18e00004 	addi	r3,r3,-32768
   527b8:	1800211e 	bne	r3,zero,52840 <__swsetup_r+0x13c>
   527bc:	80c00417 	ldw	r3,16(r16)
   527c0:	11400214 	ori	r5,r2,8
   527c4:	8140030d 	sth	r5,12(r16)
   527c8:	2805883a 	mov	r2,r5
   527cc:	183fe11e 	bne	r3,zero,52754 <__swsetup_r+0x50>
   527d0:	1140a00c 	andi	r5,r2,640
   527d4:	01008004 	movi	r4,512
   527d8:	293fde26 	beq	r5,r4,52754 <__swsetup_r+0x50>
   527dc:	8809883a 	mov	r4,r17
   527e0:	800b883a 	mov	r5,r16
   527e4:	00551000 	call	55100 <__smakebuf_r>
   527e8:	8080030b 	ldhu	r2,12(r16)
   527ec:	80c00417 	ldw	r3,16(r16)
   527f0:	003fd806 	br	52754 <__swsetup_r+0x50>
   527f4:	80800517 	ldw	r2,20(r16)
   527f8:	80000215 	stw	zero,8(r16)
   527fc:	0085c83a 	sub	r2,zero,r2
   52800:	80800615 	stw	r2,24(r16)
   52804:	183fdd1e 	bne	r3,zero,5277c <__swsetup_r+0x78>
   52808:	8080030b 	ldhu	r2,12(r16)
   5280c:	1080200c 	andi	r2,r2,128
   52810:	10bfffcc 	andi	r2,r2,65535
   52814:	10a0001c 	xori	r2,r2,32768
   52818:	10a00004 	addi	r2,r2,-32768
   5281c:	103fd826 	beq	r2,zero,52780 <__swsetup_r+0x7c>
   52820:	00bfffc4 	movi	r2,-1
   52824:	003fd606 	br	52780 <__swsetup_r+0x7c>
   52828:	1009883a 	mov	r4,r2
   5282c:	005438c0 	call	5438c <__sinit>
   52830:	003fc006 	br	52734 <__swsetup_r+0x30>
   52834:	0005883a 	mov	r2,zero
   52838:	80800215 	stw	r2,8(r16)
   5283c:	003fce06 	br	52778 <__swsetup_r+0x74>
   52840:	81400c17 	ldw	r5,48(r16)
   52844:	28000626 	beq	r5,zero,52860 <__swsetup_r+0x15c>
   52848:	80c01004 	addi	r3,r16,64
   5284c:	28c00326 	beq	r5,r3,5285c <__swsetup_r+0x158>
   52850:	8809883a 	mov	r4,r17
   52854:	00547100 	call	54710 <_free_r>
   52858:	8080030b 	ldhu	r2,12(r16)
   5285c:	80000c15 	stw	zero,48(r16)
   52860:	80c00417 	ldw	r3,16(r16)
   52864:	013ff6c4 	movi	r4,-37
   52868:	2084703a 	and	r2,r4,r2
   5286c:	80000115 	stw	zero,4(r16)
   52870:	80c00015 	stw	r3,0(r16)
   52874:	003fd206 	br	527c0 <__swsetup_r+0xbc>

00052878 <quorem>:
   52878:	defff204 	addi	sp,sp,-56
   5287c:	dd000815 	stw	r20,32(sp)
   52880:	20800417 	ldw	r2,16(r4)
   52884:	2d000417 	ldw	r20,16(r5)
   52888:	dcc00715 	stw	r19,28(sp)
   5288c:	dfc00d15 	stw	ra,52(sp)
   52890:	df000c15 	stw	fp,48(sp)
   52894:	ddc00b15 	stw	r23,44(sp)
   52898:	dd800a15 	stw	r22,40(sp)
   5289c:	dd400915 	stw	r21,36(sp)
   528a0:	dc800615 	stw	r18,24(sp)
   528a4:	dc400515 	stw	r17,20(sp)
   528a8:	dc000415 	stw	r16,16(sp)
   528ac:	d9400015 	stw	r5,0(sp)
   528b0:	2027883a 	mov	r19,r4
   528b4:	15007d16 	blt	r2,r20,52aac <quorem+0x234>
   528b8:	a0800104 	addi	r2,r20,4
   528bc:	1085883a 	add	r2,r2,r2
   528c0:	1085883a 	add	r2,r2,r2
   528c4:	28ad883a 	add	r22,r5,r2
   528c8:	2085883a 	add	r2,r4,r2
   528cc:	10800017 	ldw	r2,0(r2)
   528d0:	b1400017 	ldw	r5,0(r22)
   528d4:	a53fffc4 	addi	r20,r20,-1
   528d8:	1009883a 	mov	r4,r2
   528dc:	29400044 	addi	r5,r5,1
   528e0:	d8800115 	stw	r2,4(sp)
   528e4:	00506940 	call	50694 <__udivsi3>
   528e8:	1025883a 	mov	r18,r2
   528ec:	d8800017 	ldw	r2,0(sp)
   528f0:	9f000504 	addi	fp,r19,20
   528f4:	14000504 	addi	r16,r2,20
   528f8:	90003626 	beq	r18,zero,529d4 <quorem+0x15c>
   528fc:	802b883a 	mov	r21,r16
   52900:	e023883a 	mov	r17,fp
   52904:	0007883a 	mov	r3,zero
   52908:	002f883a 	mov	r23,zero
   5290c:	a9800017 	ldw	r6,0(r21)
   52910:	900b883a 	mov	r5,r18
   52914:	d8c00315 	stw	r3,12(sp)
   52918:	313fffcc 	andi	r4,r6,65535
   5291c:	d9800215 	stw	r6,8(sp)
   52920:	005960c0 	call	5960c <__mulsi3>
   52924:	d9800217 	ldw	r6,8(sp)
   52928:	d8c00317 	ldw	r3,12(sp)
   5292c:	900b883a 	mov	r5,r18
   52930:	3008d43a 	srli	r4,r6,16
   52934:	1887883a 	add	r3,r3,r2
   52938:	d8c00315 	stw	r3,12(sp)
   5293c:	005960c0 	call	5960c <__mulsi3>
   52940:	89400017 	ldw	r5,0(r17)
   52944:	d8c00317 	ldw	r3,12(sp)
   52948:	ad400104 	addi	r21,r21,4
   5294c:	293fffcc 	andi	r4,r5,65535
   52950:	1810d43a 	srli	r8,r3,16
   52954:	25c9883a 	add	r4,r4,r23
   52958:	18ffffcc 	andi	r3,r3,65535
   5295c:	20c9c83a 	sub	r4,r4,r3
   52960:	280cd43a 	srli	r6,r5,16
   52964:	4085883a 	add	r2,r8,r2
   52968:	2007d43a 	srai	r3,r4,16
   5296c:	117fffcc 	andi	r5,r2,65535
   52970:	314bc83a 	sub	r5,r6,r5
   52974:	28cb883a 	add	r5,r5,r3
   52978:	8940008d 	sth	r5,2(r17)
   5297c:	8900000d 	sth	r4,0(r17)
   52980:	1006d43a 	srli	r3,r2,16
   52984:	282fd43a 	srai	r23,r5,16
   52988:	8c400104 	addi	r17,r17,4
   5298c:	b57fdf2e 	bgeu	r22,r21,5290c <quorem+0x94>
   52990:	d8c00117 	ldw	r3,4(sp)
   52994:	18000f1e 	bne	r3,zero,529d4 <quorem+0x15c>
   52998:	a0800144 	addi	r2,r20,5
   5299c:	1085883a 	add	r2,r2,r2
   529a0:	1085883a 	add	r2,r2,r2
   529a4:	9887883a 	add	r3,r19,r2
   529a8:	18bfff04 	addi	r2,r3,-4
   529ac:	e080082e 	bgeu	fp,r2,529d0 <quorem+0x158>
   529b0:	18ffff17 	ldw	r3,-4(r3)
   529b4:	18000326 	beq	r3,zero,529c4 <quorem+0x14c>
   529b8:	00000506 	br	529d0 <quorem+0x158>
   529bc:	10c00017 	ldw	r3,0(r2)
   529c0:	1800031e 	bne	r3,zero,529d0 <quorem+0x158>
   529c4:	10bfff04 	addi	r2,r2,-4
   529c8:	a53fffc4 	addi	r20,r20,-1
   529cc:	e0bffb36 	bltu	fp,r2,529bc <quorem+0x144>
   529d0:	9d000415 	stw	r20,16(r19)
   529d4:	d9400017 	ldw	r5,0(sp)
   529d8:	9809883a 	mov	r4,r19
   529dc:	00568180 	call	56818 <__mcmp>
   529e0:	10002516 	blt	r2,zero,52a78 <quorem+0x200>
   529e4:	94800044 	addi	r18,r18,1
   529e8:	e007883a 	mov	r3,fp
   529ec:	000d883a 	mov	r6,zero
   529f0:	18800017 	ldw	r2,0(r3)
   529f4:	82000017 	ldw	r8,0(r16)
   529f8:	84000104 	addi	r16,r16,4
   529fc:	11ffffcc 	andi	r7,r2,65535
   52a00:	413fffcc 	andi	r4,r8,65535
   52a04:	398d883a 	add	r6,r7,r6
   52a08:	310fc83a 	sub	r7,r6,r4
   52a0c:	4010d43a 	srli	r8,r8,16
   52a10:	100cd43a 	srli	r6,r2,16
   52a14:	3809d43a 	srai	r4,r7,16
   52a18:	19c0000d 	sth	r7,0(r3)
   52a1c:	320dc83a 	sub	r6,r6,r8
   52a20:	310d883a 	add	r6,r6,r4
   52a24:	1980008d 	sth	r6,2(r3)
   52a28:	300dd43a 	srai	r6,r6,16
   52a2c:	18c00104 	addi	r3,r3,4
   52a30:	b43fef2e 	bgeu	r22,r16,529f0 <quorem+0x178>
   52a34:	a0800144 	addi	r2,r20,5
   52a38:	1085883a 	add	r2,r2,r2
   52a3c:	1085883a 	add	r2,r2,r2
   52a40:	9885883a 	add	r2,r19,r2
   52a44:	10c00017 	ldw	r3,0(r2)
   52a48:	18000b1e 	bne	r3,zero,52a78 <quorem+0x200>
   52a4c:	10ffff04 	addi	r3,r2,-4
   52a50:	e0c0082e 	bgeu	fp,r3,52a74 <quorem+0x1fc>
   52a54:	10bfff17 	ldw	r2,-4(r2)
   52a58:	10000326 	beq	r2,zero,52a68 <quorem+0x1f0>
   52a5c:	00000506 	br	52a74 <quorem+0x1fc>
   52a60:	18800017 	ldw	r2,0(r3)
   52a64:	1000031e 	bne	r2,zero,52a74 <quorem+0x1fc>
   52a68:	18ffff04 	addi	r3,r3,-4
   52a6c:	a53fffc4 	addi	r20,r20,-1
   52a70:	e0fffb36 	bltu	fp,r3,52a60 <quorem+0x1e8>
   52a74:	9d000415 	stw	r20,16(r19)
   52a78:	9005883a 	mov	r2,r18
   52a7c:	dfc00d17 	ldw	ra,52(sp)
   52a80:	df000c17 	ldw	fp,48(sp)
   52a84:	ddc00b17 	ldw	r23,44(sp)
   52a88:	dd800a17 	ldw	r22,40(sp)
   52a8c:	dd400917 	ldw	r21,36(sp)
   52a90:	dd000817 	ldw	r20,32(sp)
   52a94:	dcc00717 	ldw	r19,28(sp)
   52a98:	dc800617 	ldw	r18,24(sp)
   52a9c:	dc400517 	ldw	r17,20(sp)
   52aa0:	dc000417 	ldw	r16,16(sp)
   52aa4:	dec00e04 	addi	sp,sp,56
   52aa8:	f800283a 	ret
   52aac:	0005883a 	mov	r2,zero
   52ab0:	003ff206 	br	52a7c <quorem+0x204>

00052ab4 <_dtoa_r>:
   52ab4:	20801017 	ldw	r2,64(r4)
   52ab8:	deffdf04 	addi	sp,sp,-132
   52abc:	dcc01a15 	stw	r19,104(sp)
   52ac0:	dc801915 	stw	r18,100(sp)
   52ac4:	dc401815 	stw	r17,96(sp)
   52ac8:	dc001715 	stw	r16,92(sp)
   52acc:	dfc02015 	stw	ra,128(sp)
   52ad0:	df001f15 	stw	fp,124(sp)
   52ad4:	ddc01e15 	stw	r23,120(sp)
   52ad8:	dd801d15 	stw	r22,116(sp)
   52adc:	dd401c15 	stw	r21,112(sp)
   52ae0:	dd001b15 	stw	r20,108(sp)
   52ae4:	d9400315 	stw	r5,12(sp)
   52ae8:	d9c00415 	stw	r7,16(sp)
   52aec:	2021883a 	mov	r16,r4
   52af0:	3025883a 	mov	r18,r6
   52af4:	dcc02317 	ldw	r19,140(sp)
   52af8:	3023883a 	mov	r17,r6
   52afc:	10000826 	beq	r2,zero,52b20 <_dtoa_r+0x6c>
   52b00:	20c01117 	ldw	r3,68(r4)
   52b04:	01800044 	movi	r6,1
   52b08:	100b883a 	mov	r5,r2
   52b0c:	30cc983a 	sll	r6,r6,r3
   52b10:	10c00115 	stw	r3,4(r2)
   52b14:	11800215 	stw	r6,8(r2)
   52b18:	0055f740 	call	55f74 <_Bfree>
   52b1c:	80001015 	stw	zero,64(r16)
   52b20:	90002f16 	blt	r18,zero,52be0 <_dtoa_r+0x12c>
   52b24:	98000015 	stw	zero,0(r19)
   52b28:	90dffc2c 	andhi	r3,r18,32752
   52b2c:	009ffc34 	movhi	r2,32752
   52b30:	18801c26 	beq	r3,r2,52ba4 <_dtoa_r+0xf0>
   52b34:	d9000317 	ldw	r4,12(sp)
   52b38:	880b883a 	mov	r5,r17
   52b3c:	000d883a 	mov	r6,zero
   52b40:	000f883a 	mov	r7,zero
   52b44:	005916c0 	call	5916c <__eqdf2>
   52b48:	10002c1e 	bne	r2,zero,52bfc <_dtoa_r+0x148>
   52b4c:	d9002217 	ldw	r4,136(sp)
   52b50:	d9c02417 	ldw	r7,144(sp)
   52b54:	00800044 	movi	r2,1
   52b58:	20800015 	stw	r2,0(r4)
   52b5c:	38019426 	beq	r7,zero,531b0 <_dtoa_r+0x6fc>
   52b60:	00800074 	movhi	r2,1
   52b64:	10802944 	addi	r2,r2,165
   52b68:	38800015 	stw	r2,0(r7)
   52b6c:	15ffffc4 	addi	r23,r2,-1
   52b70:	b805883a 	mov	r2,r23
   52b74:	dfc02017 	ldw	ra,128(sp)
   52b78:	df001f17 	ldw	fp,124(sp)
   52b7c:	ddc01e17 	ldw	r23,120(sp)
   52b80:	dd801d17 	ldw	r22,116(sp)
   52b84:	dd401c17 	ldw	r21,112(sp)
   52b88:	dd001b17 	ldw	r20,108(sp)
   52b8c:	dcc01a17 	ldw	r19,104(sp)
   52b90:	dc801917 	ldw	r18,100(sp)
   52b94:	dc401817 	ldw	r17,96(sp)
   52b98:	dc001717 	ldw	r16,92(sp)
   52b9c:	dec02104 	addi	sp,sp,132
   52ba0:	f800283a 	ret
   52ba4:	d8c02217 	ldw	r3,136(sp)
   52ba8:	d9000317 	ldw	r4,12(sp)
   52bac:	0089c3c4 	movi	r2,9999
   52bb0:	18800015 	stw	r2,0(r3)
   52bb4:	20016c26 	beq	r4,zero,53168 <_dtoa_r+0x6b4>
   52bb8:	05c00074 	movhi	r23,1
   52bbc:	bdc03504 	addi	r23,r23,212
   52bc0:	d9c02417 	ldw	r7,144(sp)
   52bc4:	383fea26 	beq	r7,zero,52b70 <_dtoa_r+0xbc>
   52bc8:	b88000c7 	ldb	r2,3(r23)
   52bcc:	10016d1e 	bne	r2,zero,53184 <_dtoa_r+0x6d0>
   52bd0:	b88000c4 	addi	r2,r23,3
   52bd4:	d8c02417 	ldw	r3,144(sp)
   52bd8:	18800015 	stw	r2,0(r3)
   52bdc:	003fe406 	br	52b70 <_dtoa_r+0xbc>
   52be0:	04600034 	movhi	r17,32768
   52be4:	8c7fffc4 	addi	r17,r17,-1
   52be8:	9462703a 	and	r17,r18,r17
   52bec:	00800044 	movi	r2,1
   52bf0:	98800015 	stw	r2,0(r19)
   52bf4:	8825883a 	mov	r18,r17
   52bf8:	003fcb06 	br	52b28 <_dtoa_r+0x74>
   52bfc:	d9400317 	ldw	r5,12(sp)
   52c00:	9028d53a 	srli	r20,r18,20
   52c04:	d8800204 	addi	r2,sp,8
   52c08:	d8800015 	stw	r2,0(sp)
   52c0c:	8009883a 	mov	r4,r16
   52c10:	880d883a 	mov	r6,r17
   52c14:	d9c00104 	addi	r7,sp,4
   52c18:	0056bc00 	call	56bc0 <__d2b>
   52c1c:	a501ffcc 	andi	r20,r20,2047
   52c20:	1039883a 	mov	fp,r2
   52c24:	a001591e 	bne	r20,zero,5318c <_dtoa_r+0x6d8>
   52c28:	dd400217 	ldw	r21,8(sp)
   52c2c:	dd000117 	ldw	r20,4(sp)
   52c30:	00befbc4 	movi	r2,-1041
   52c34:	ad29883a 	add	r20,r21,r20
   52c38:	a082d216 	blt	r20,r2,53784 <_dtoa_r+0xcd0>
   52c3c:	d8c00317 	ldw	r3,12(sp)
   52c40:	013f0384 	movi	r4,-1010
   52c44:	2509c83a 	sub	r4,r4,r20
   52c48:	a0810484 	addi	r2,r20,1042
   52c4c:	9124983a 	sll	r18,r18,r4
   52c50:	1884d83a 	srl	r2,r3,r2
   52c54:	9088b03a 	or	r4,r18,r2
   52c58:	00594f00 	call	594f0 <__floatunsidf>
   52c5c:	1009883a 	mov	r4,r2
   52c60:	017f8434 	movhi	r5,65040
   52c64:	00800044 	movi	r2,1
   52c68:	194b883a 	add	r5,r3,r5
   52c6c:	a53fffc4 	addi	r20,r20,-1
   52c70:	d8800f15 	stw	r2,60(sp)
   52c74:	000d883a 	mov	r6,zero
   52c78:	01cffe34 	movhi	r7,16376
   52c7c:	0058c740 	call	58c74 <__subdf3>
   52c80:	1009883a 	mov	r4,r2
   52c84:	180b883a 	mov	r5,r3
   52c88:	0198dbf4 	movhi	r6,25455
   52c8c:	3190d844 	addi	r6,r6,17249
   52c90:	01cff4f4 	movhi	r7,16339
   52c94:	39e1e9c4 	addi	r7,r7,-30809
   52c98:	0058cd40 	call	58cd4 <__muldf3>
   52c9c:	180b883a 	mov	r5,r3
   52ca0:	01a2d874 	movhi	r6,35681
   52ca4:	31b22cc4 	addi	r6,r6,-14157
   52ca8:	01cff1f4 	movhi	r7,16327
   52cac:	39e28a04 	addi	r7,r7,-30168
   52cb0:	1009883a 	mov	r4,r2
   52cb4:	0058c200 	call	58c20 <__adddf3>
   52cb8:	a009883a 	mov	r4,r20
   52cbc:	1027883a 	mov	r19,r2
   52cc0:	1825883a 	mov	r18,r3
   52cc4:	00593480 	call	59348 <__floatsidf>
   52cc8:	1009883a 	mov	r4,r2
   52ccc:	180b883a 	mov	r5,r3
   52cd0:	019427f4 	movhi	r6,20639
   52cd4:	319e7ec4 	addi	r6,r6,31227
   52cd8:	01cff4f4 	movhi	r7,16339
   52cdc:	39d104c4 	addi	r7,r7,17427
   52ce0:	0058cd40 	call	58cd4 <__muldf3>
   52ce4:	9809883a 	mov	r4,r19
   52ce8:	900b883a 	mov	r5,r18
   52cec:	100d883a 	mov	r6,r2
   52cf0:	180f883a 	mov	r7,r3
   52cf4:	0058c200 	call	58c20 <__adddf3>
   52cf8:	1009883a 	mov	r4,r2
   52cfc:	180b883a 	mov	r5,r3
   52d00:	1027883a 	mov	r19,r2
   52d04:	1825883a 	mov	r18,r3
   52d08:	005941c0 	call	5941c <__fixdfsi>
   52d0c:	9809883a 	mov	r4,r19
   52d10:	900b883a 	mov	r5,r18
   52d14:	000d883a 	mov	r6,zero
   52d18:	000f883a 	mov	r7,zero
   52d1c:	d8800615 	stw	r2,24(sp)
   52d20:	00592ec0 	call	592ec <__ltdf2>
   52d24:	10027e16 	blt	r2,zero,53720 <_dtoa_r+0xc6c>
   52d28:	d8c00617 	ldw	r3,24(sp)
   52d2c:	00800584 	movi	r2,22
   52d30:	10c26c36 	bltu	r2,r3,536e4 <_dtoa_r+0xc30>
   52d34:	180490fa 	slli	r2,r3,3
   52d38:	00c00074 	movhi	r3,1
   52d3c:	18c05b04 	addi	r3,r3,364
   52d40:	d9800317 	ldw	r6,12(sp)
   52d44:	1885883a 	add	r2,r3,r2
   52d48:	11000017 	ldw	r4,0(r2)
   52d4c:	11400117 	ldw	r5,4(r2)
   52d50:	880f883a 	mov	r7,r17
   52d54:	00592240 	call	59224 <__gtdf2>
   52d58:	00828f0e 	bge	zero,r2,53798 <_dtoa_r+0xce4>
   52d5c:	d8800617 	ldw	r2,24(sp)
   52d60:	d8000d15 	stw	zero,52(sp)
   52d64:	10bfffc4 	addi	r2,r2,-1
   52d68:	d8800615 	stw	r2,24(sp)
   52d6c:	ad29c83a 	sub	r20,r21,r20
   52d70:	a53fffc4 	addi	r20,r20,-1
   52d74:	a0026616 	blt	r20,zero,53710 <_dtoa_r+0xc5c>
   52d78:	dd000715 	stw	r20,28(sp)
   52d7c:	d8000815 	stw	zero,32(sp)
   52d80:	d8800617 	ldw	r2,24(sp)
   52d84:	10025a16 	blt	r2,zero,536f0 <_dtoa_r+0xc3c>
   52d88:	d8c00717 	ldw	r3,28(sp)
   52d8c:	d8800b15 	stw	r2,44(sp)
   52d90:	d8000a15 	stw	zero,40(sp)
   52d94:	1887883a 	add	r3,r3,r2
   52d98:	d8c00715 	stw	r3,28(sp)
   52d9c:	d9c00417 	ldw	r7,16(sp)
   52da0:	00800244 	movi	r2,9
   52da4:	11c10536 	bltu	r2,r7,531bc <_dtoa_r+0x708>
   52da8:	00800144 	movi	r2,5
   52dac:	11c4c60e 	bge	r2,r7,540c8 <_dtoa_r+0x1614>
   52db0:	39ffff04 	addi	r7,r7,-4
   52db4:	d9c00415 	stw	r7,16(sp)
   52db8:	0027883a 	mov	r19,zero
   52dbc:	d9c00417 	ldw	r7,16(sp)
   52dc0:	008000c4 	movi	r2,3
   52dc4:	3883a226 	beq	r7,r2,53c50 <_dtoa_r+0x119c>
   52dc8:	11c2bc16 	blt	r2,r7,538bc <_dtoa_r+0xe08>
   52dcc:	00800084 	movi	r2,2
   52dd0:	3880fb1e 	bne	r7,r2,531c0 <_dtoa_r+0x70c>
   52dd4:	d8000c15 	stw	zero,48(sp)
   52dd8:	d9002117 	ldw	r4,132(sp)
   52ddc:	0103ae0e 	bge	zero,r4,53c98 <_dtoa_r+0x11e4>
   52de0:	2025883a 	mov	r18,r4
   52de4:	d9000e15 	stw	r4,56(sp)
   52de8:	d9000915 	stw	r4,36(sp)
   52dec:	80001115 	stw	zero,68(r16)
   52df0:	008005c4 	movi	r2,23
   52df4:	1484b22e 	bgeu	r2,r18,540c0 <_dtoa_r+0x160c>
   52df8:	00c00044 	movi	r3,1
   52dfc:	00800104 	movi	r2,4
   52e00:	1085883a 	add	r2,r2,r2
   52e04:	11000504 	addi	r4,r2,20
   52e08:	180b883a 	mov	r5,r3
   52e0c:	18c00044 	addi	r3,r3,1
   52e10:	913ffb2e 	bgeu	r18,r4,52e00 <_dtoa_r+0x34c>
   52e14:	81401115 	stw	r5,68(r16)
   52e18:	8009883a 	mov	r4,r16
   52e1c:	0055ecc0 	call	55ecc <_Balloc>
   52e20:	102f883a 	mov	r23,r2
   52e24:	80801015 	stw	r2,64(r16)
   52e28:	00800384 	movi	r2,14
   52e2c:	1480f036 	bltu	r2,r18,531f0 <_dtoa_r+0x73c>
   52e30:	9800ef26 	beq	r19,zero,531f0 <_dtoa_r+0x73c>
   52e34:	d8800617 	ldw	r2,24(sp)
   52e38:	00839c0e 	bge	zero,r2,53cac <_dtoa_r+0x11f8>
   52e3c:	d8c00617 	ldw	r3,24(sp)
   52e40:	108003cc 	andi	r2,r2,15
   52e44:	100490fa 	slli	r2,r2,3
   52e48:	182bd13a 	srai	r21,r3,4
   52e4c:	00c00074 	movhi	r3,1
   52e50:	18c05b04 	addi	r3,r3,364
   52e54:	1885883a 	add	r2,r3,r2
   52e58:	a8c0040c 	andi	r3,r21,16
   52e5c:	12800017 	ldw	r10,0(r2)
   52e60:	15800117 	ldw	r22,4(r2)
   52e64:	18038726 	beq	r3,zero,53c84 <_dtoa_r+0x11d0>
   52e68:	00800074 	movhi	r2,1
   52e6c:	10805104 	addi	r2,r2,324
   52e70:	11800817 	ldw	r6,32(r2)
   52e74:	11c00917 	ldw	r7,36(r2)
   52e78:	d9000317 	ldw	r4,12(sp)
   52e7c:	880b883a 	mov	r5,r17
   52e80:	da801515 	stw	r10,84(sp)
   52e84:	0058fb80 	call	58fb8 <__divdf3>
   52e88:	da801517 	ldw	r10,84(sp)
   52e8c:	d8801015 	stw	r2,64(sp)
   52e90:	1829883a 	mov	r20,r3
   52e94:	ad4003cc 	andi	r21,r21,15
   52e98:	048000c4 	movi	r18,3
   52e9c:	a8001126 	beq	r21,zero,52ee4 <_dtoa_r+0x430>
   52ea0:	04c00074 	movhi	r19,1
   52ea4:	9cc05104 	addi	r19,r19,324
   52ea8:	5005883a 	mov	r2,r10
   52eac:	b007883a 	mov	r3,r22
   52eb0:	a980004c 	andi	r6,r21,1
   52eb4:	1009883a 	mov	r4,r2
   52eb8:	a82bd07a 	srai	r21,r21,1
   52ebc:	180b883a 	mov	r5,r3
   52ec0:	30000426 	beq	r6,zero,52ed4 <_dtoa_r+0x420>
   52ec4:	99800017 	ldw	r6,0(r19)
   52ec8:	99c00117 	ldw	r7,4(r19)
   52ecc:	94800044 	addi	r18,r18,1
   52ed0:	0058cd40 	call	58cd4 <__muldf3>
   52ed4:	9cc00204 	addi	r19,r19,8
   52ed8:	a83ff51e 	bne	r21,zero,52eb0 <_dtoa_r+0x3fc>
   52edc:	1015883a 	mov	r10,r2
   52ee0:	182d883a 	mov	r22,r3
   52ee4:	d9001017 	ldw	r4,64(sp)
   52ee8:	a00b883a 	mov	r5,r20
   52eec:	500d883a 	mov	r6,r10
   52ef0:	b00f883a 	mov	r7,r22
   52ef4:	0058fb80 	call	58fb8 <__divdf3>
   52ef8:	1027883a 	mov	r19,r2
   52efc:	1829883a 	mov	r20,r3
   52f00:	d8c00d17 	ldw	r3,52(sp)
   52f04:	18000626 	beq	r3,zero,52f20 <_dtoa_r+0x46c>
   52f08:	9809883a 	mov	r4,r19
   52f0c:	a00b883a 	mov	r5,r20
   52f10:	000d883a 	mov	r6,zero
   52f14:	01cffc34 	movhi	r7,16368
   52f18:	00592ec0 	call	592ec <__ltdf2>
   52f1c:	10040e16 	blt	r2,zero,53f58 <_dtoa_r+0x14a4>
   52f20:	9009883a 	mov	r4,r18
   52f24:	00593480 	call	59348 <__floatsidf>
   52f28:	1009883a 	mov	r4,r2
   52f2c:	180b883a 	mov	r5,r3
   52f30:	980d883a 	mov	r6,r19
   52f34:	a00f883a 	mov	r7,r20
   52f38:	0058cd40 	call	58cd4 <__muldf3>
   52f3c:	1009883a 	mov	r4,r2
   52f40:	180b883a 	mov	r5,r3
   52f44:	000d883a 	mov	r6,zero
   52f48:	01d00734 	movhi	r7,16412
   52f4c:	0058c200 	call	58c20 <__adddf3>
   52f50:	057f3034 	movhi	r21,64704
   52f54:	1d6b883a 	add	r21,r3,r21
   52f58:	d8c00917 	ldw	r3,36(sp)
   52f5c:	1025883a 	mov	r18,r2
   52f60:	18031f26 	beq	r3,zero,53be0 <_dtoa_r+0x112c>
   52f64:	d8800617 	ldw	r2,24(sp)
   52f68:	dac00917 	ldw	r11,36(sp)
   52f6c:	d8801315 	stw	r2,76(sp)
   52f70:	d8c00c17 	ldw	r3,48(sp)
   52f74:	18039026 	beq	r3,zero,53db8 <_dtoa_r+0x1304>
   52f78:	58bfffc4 	addi	r2,r11,-1
   52f7c:	100490fa 	slli	r2,r2,3
   52f80:	00c00074 	movhi	r3,1
   52f84:	18c05b04 	addi	r3,r3,364
   52f88:	0009883a 	mov	r4,zero
   52f8c:	1885883a 	add	r2,r3,r2
   52f90:	11800017 	ldw	r6,0(r2)
   52f94:	11c00117 	ldw	r7,4(r2)
   52f98:	014ff834 	movhi	r5,16352
   52f9c:	dac01615 	stw	r11,88(sp)
   52fa0:	0058fb80 	call	58fb8 <__divdf3>
   52fa4:	900d883a 	mov	r6,r18
   52fa8:	a80f883a 	mov	r7,r21
   52fac:	1009883a 	mov	r4,r2
   52fb0:	180b883a 	mov	r5,r3
   52fb4:	0058c740 	call	58c74 <__subdf3>
   52fb8:	a00b883a 	mov	r5,r20
   52fbc:	9809883a 	mov	r4,r19
   52fc0:	182b883a 	mov	r21,r3
   52fc4:	d8801015 	stw	r2,64(sp)
   52fc8:	005941c0 	call	5941c <__fixdfsi>
   52fcc:	1009883a 	mov	r4,r2
   52fd0:	d8801515 	stw	r2,84(sp)
   52fd4:	00593480 	call	59348 <__floatsidf>
   52fd8:	9809883a 	mov	r4,r19
   52fdc:	a00b883a 	mov	r5,r20
   52fe0:	100d883a 	mov	r6,r2
   52fe4:	180f883a 	mov	r7,r3
   52fe8:	0058c740 	call	58c74 <__subdf3>
   52fec:	da401517 	ldw	r9,84(sp)
   52ff0:	d9001017 	ldw	r4,64(sp)
   52ff4:	a80b883a 	mov	r5,r21
   52ff8:	4d000c04 	addi	r20,r9,48
   52ffc:	bd000005 	stb	r20,0(r23)
   53000:	100d883a 	mov	r6,r2
   53004:	180f883a 	mov	r7,r3
   53008:	bd800044 	addi	r22,r23,1
   5300c:	1025883a 	mov	r18,r2
   53010:	1827883a 	mov	r19,r3
   53014:	00592240 	call	59224 <__gtdf2>
   53018:	00842216 	blt	zero,r2,540a4 <_dtoa_r+0x15f0>
   5301c:	0009883a 	mov	r4,zero
   53020:	014ffc34 	movhi	r5,16368
   53024:	900d883a 	mov	r6,r18
   53028:	980f883a 	mov	r7,r19
   5302c:	0058c740 	call	58c74 <__subdf3>
   53030:	d9001017 	ldw	r4,64(sp)
   53034:	a80b883a 	mov	r5,r21
   53038:	100d883a 	mov	r6,r2
   5303c:	180f883a 	mov	r7,r3
   53040:	00592240 	call	59224 <__gtdf2>
   53044:	dac01617 	ldw	r11,88(sp)
   53048:	00841316 	blt	zero,r2,54098 <_dtoa_r+0x15e4>
   5304c:	00800044 	movi	r2,1
   53050:	12c0670e 	bge	r2,r11,531f0 <_dtoa_r+0x73c>
   53054:	bad7883a 	add	r11,r23,r11
   53058:	df001115 	stw	fp,68(sp)
   5305c:	dc401215 	stw	r17,72(sp)
   53060:	5839883a 	mov	fp,r11
   53064:	dc401017 	ldw	r17,64(sp)
   53068:	00000806 	br	5308c <_dtoa_r+0x5d8>
   5306c:	0058c740 	call	58c74 <__subdf3>
   53070:	1009883a 	mov	r4,r2
   53074:	180b883a 	mov	r5,r3
   53078:	880d883a 	mov	r6,r17
   5307c:	a80f883a 	mov	r7,r21
   53080:	00592ec0 	call	592ec <__ltdf2>
   53084:	1003ee16 	blt	r2,zero,54040 <_dtoa_r+0x158c>
   53088:	b703f126 	beq	r22,fp,54050 <_dtoa_r+0x159c>
   5308c:	8809883a 	mov	r4,r17
   53090:	a80b883a 	mov	r5,r21
   53094:	000d883a 	mov	r6,zero
   53098:	01d00934 	movhi	r7,16420
   5309c:	0058cd40 	call	58cd4 <__muldf3>
   530a0:	000d883a 	mov	r6,zero
   530a4:	01d00934 	movhi	r7,16420
   530a8:	9009883a 	mov	r4,r18
   530ac:	980b883a 	mov	r5,r19
   530b0:	1023883a 	mov	r17,r2
   530b4:	182b883a 	mov	r21,r3
   530b8:	0058cd40 	call	58cd4 <__muldf3>
   530bc:	180b883a 	mov	r5,r3
   530c0:	1009883a 	mov	r4,r2
   530c4:	1825883a 	mov	r18,r3
   530c8:	1027883a 	mov	r19,r2
   530cc:	005941c0 	call	5941c <__fixdfsi>
   530d0:	1009883a 	mov	r4,r2
   530d4:	1029883a 	mov	r20,r2
   530d8:	00593480 	call	59348 <__floatsidf>
   530dc:	9809883a 	mov	r4,r19
   530e0:	900b883a 	mov	r5,r18
   530e4:	100d883a 	mov	r6,r2
   530e8:	180f883a 	mov	r7,r3
   530ec:	0058c740 	call	58c74 <__subdf3>
   530f0:	a5000c04 	addi	r20,r20,48
   530f4:	b5000005 	stb	r20,0(r22)
   530f8:	1009883a 	mov	r4,r2
   530fc:	180b883a 	mov	r5,r3
   53100:	880d883a 	mov	r6,r17
   53104:	a80f883a 	mov	r7,r21
   53108:	1025883a 	mov	r18,r2
   5310c:	1827883a 	mov	r19,r3
   53110:	00592ec0 	call	592ec <__ltdf2>
   53114:	b5800044 	addi	r22,r22,1
   53118:	0009883a 	mov	r4,zero
   5311c:	014ffc34 	movhi	r5,16368
   53120:	900d883a 	mov	r6,r18
   53124:	980f883a 	mov	r7,r19
   53128:	103fd00e 	bge	r2,zero,5306c <_dtoa_r+0x5b8>
   5312c:	d9001317 	ldw	r4,76(sp)
   53130:	df001117 	ldw	fp,68(sp)
   53134:	d9000615 	stw	r4,24(sp)
   53138:	8009883a 	mov	r4,r16
   5313c:	e00b883a 	mov	r5,fp
   53140:	0055f740 	call	55f74 <_Bfree>
   53144:	d9c00617 	ldw	r7,24(sp)
   53148:	d8c02217 	ldw	r3,136(sp)
   5314c:	d9002417 	ldw	r4,144(sp)
   53150:	b0000005 	stb	zero,0(r22)
   53154:	38800044 	addi	r2,r7,1
   53158:	18800015 	stw	r2,0(r3)
   5315c:	203e8426 	beq	r4,zero,52b70 <_dtoa_r+0xbc>
   53160:	25800015 	stw	r22,0(r4)
   53164:	003e8206 	br	52b70 <_dtoa_r+0xbc>
   53168:	00800434 	movhi	r2,16
   5316c:	10bfffc4 	addi	r2,r2,-1
   53170:	90a4703a 	and	r18,r18,r2
   53174:	903e901e 	bne	r18,zero,52bb8 <_dtoa_r+0x104>
   53178:	05c00074 	movhi	r23,1
   5317c:	bdc03204 	addi	r23,r23,200
   53180:	003e8f06 	br	52bc0 <_dtoa_r+0x10c>
   53184:	b8800204 	addi	r2,r23,8
   53188:	003e9206 	br	52bd4 <_dtoa_r+0x120>
   5318c:	01400434 	movhi	r5,16
   53190:	297fffc4 	addi	r5,r5,-1
   53194:	894a703a 	and	r5,r17,r5
   53198:	d9000317 	ldw	r4,12(sp)
   5319c:	294ffc34 	orhi	r5,r5,16368
   531a0:	a53f0044 	addi	r20,r20,-1023
   531a4:	dd400217 	ldw	r21,8(sp)
   531a8:	d8000f15 	stw	zero,60(sp)
   531ac:	003eb106 	br	52c74 <_dtoa_r+0x1c0>
   531b0:	05c00074 	movhi	r23,1
   531b4:	bdc02904 	addi	r23,r23,164
   531b8:	003e6d06 	br	52b70 <_dtoa_r+0xbc>
   531bc:	d8000415 	stw	zero,16(sp)
   531c0:	80001115 	stw	zero,68(r16)
   531c4:	8009883a 	mov	r4,r16
   531c8:	000b883a 	mov	r5,zero
   531cc:	0055ecc0 	call	55ecc <_Balloc>
   531d0:	01ffffc4 	movi	r7,-1
   531d4:	102f883a 	mov	r23,r2
   531d8:	80801015 	stw	r2,64(r16)
   531dc:	00800044 	movi	r2,1
   531e0:	d9c00915 	stw	r7,36(sp)
   531e4:	d8002115 	stw	zero,132(sp)
   531e8:	d9c00e15 	stw	r7,56(sp)
   531ec:	d8800c15 	stw	r2,48(sp)
   531f0:	d8800117 	ldw	r2,4(sp)
   531f4:	10008b16 	blt	r2,zero,53424 <_dtoa_r+0x970>
   531f8:	d9000617 	ldw	r4,24(sp)
   531fc:	00c00384 	movi	r3,14
   53200:	19008816 	blt	r3,r4,53424 <_dtoa_r+0x970>
   53204:	200490fa 	slli	r2,r4,3
   53208:	d9c02117 	ldw	r7,132(sp)
   5320c:	00c00074 	movhi	r3,1
   53210:	18c05b04 	addi	r3,r3,364
   53214:	1885883a 	add	r2,r3,r2
   53218:	14800017 	ldw	r18,0(r2)
   5321c:	14c00117 	ldw	r19,4(r2)
   53220:	3801c916 	blt	r7,zero,53948 <_dtoa_r+0xe94>
   53224:	d9000317 	ldw	r4,12(sp)
   53228:	900d883a 	mov	r6,r18
   5322c:	980f883a 	mov	r7,r19
   53230:	880b883a 	mov	r5,r17
   53234:	0058fb80 	call	58fb8 <__divdf3>
   53238:	180b883a 	mov	r5,r3
   5323c:	1009883a 	mov	r4,r2
   53240:	005941c0 	call	5941c <__fixdfsi>
   53244:	1009883a 	mov	r4,r2
   53248:	102b883a 	mov	r21,r2
   5324c:	00593480 	call	59348 <__floatsidf>
   53250:	1009883a 	mov	r4,r2
   53254:	180b883a 	mov	r5,r3
   53258:	900d883a 	mov	r6,r18
   5325c:	980f883a 	mov	r7,r19
   53260:	0058cd40 	call	58cd4 <__muldf3>
   53264:	d9000317 	ldw	r4,12(sp)
   53268:	880b883a 	mov	r5,r17
   5326c:	100d883a 	mov	r6,r2
   53270:	180f883a 	mov	r7,r3
   53274:	0058c740 	call	58c74 <__subdf3>
   53278:	d9c00917 	ldw	r7,36(sp)
   5327c:	1009883a 	mov	r4,r2
   53280:	a8800c04 	addi	r2,r21,48
   53284:	b8800005 	stb	r2,0(r23)
   53288:	01800044 	movi	r6,1
   5328c:	180b883a 	mov	r5,r3
   53290:	2005883a 	mov	r2,r4
   53294:	bd800044 	addi	r22,r23,1
   53298:	39803726 	beq	r7,r6,53378 <_dtoa_r+0x8c4>
   5329c:	000d883a 	mov	r6,zero
   532a0:	01d00934 	movhi	r7,16420
   532a4:	0058cd40 	call	58cd4 <__muldf3>
   532a8:	1009883a 	mov	r4,r2
   532ac:	180b883a 	mov	r5,r3
   532b0:	000d883a 	mov	r6,zero
   532b4:	000f883a 	mov	r7,zero
   532b8:	1029883a 	mov	r20,r2
   532bc:	1823883a 	mov	r17,r3
   532c0:	005916c0 	call	5916c <__eqdf2>
   532c4:	103f9c26 	beq	r2,zero,53138 <_dtoa_r+0x684>
   532c8:	dd400917 	ldw	r21,36(sp)
   532cc:	dc000415 	stw	r16,16(sp)
   532d0:	00000906 	br	532f8 <_dtoa_r+0x844>
   532d4:	0058cd40 	call	58cd4 <__muldf3>
   532d8:	1009883a 	mov	r4,r2
   532dc:	180b883a 	mov	r5,r3
   532e0:	000d883a 	mov	r6,zero
   532e4:	000f883a 	mov	r7,zero
   532e8:	1029883a 	mov	r20,r2
   532ec:	1823883a 	mov	r17,r3
   532f0:	005916c0 	call	5916c <__eqdf2>
   532f4:	10022926 	beq	r2,zero,53b9c <_dtoa_r+0x10e8>
   532f8:	900d883a 	mov	r6,r18
   532fc:	980f883a 	mov	r7,r19
   53300:	a009883a 	mov	r4,r20
   53304:	880b883a 	mov	r5,r17
   53308:	0058fb80 	call	58fb8 <__divdf3>
   5330c:	180b883a 	mov	r5,r3
   53310:	1009883a 	mov	r4,r2
   53314:	005941c0 	call	5941c <__fixdfsi>
   53318:	1009883a 	mov	r4,r2
   5331c:	1021883a 	mov	r16,r2
   53320:	00593480 	call	59348 <__floatsidf>
   53324:	1009883a 	mov	r4,r2
   53328:	180b883a 	mov	r5,r3
   5332c:	900d883a 	mov	r6,r18
   53330:	980f883a 	mov	r7,r19
   53334:	0058cd40 	call	58cd4 <__muldf3>
   53338:	a009883a 	mov	r4,r20
   5333c:	880b883a 	mov	r5,r17
   53340:	100d883a 	mov	r6,r2
   53344:	180f883a 	mov	r7,r3
   53348:	0058c740 	call	58c74 <__subdf3>
   5334c:	82400c04 	addi	r9,r16,48
   53350:	b2400005 	stb	r9,0(r22)
   53354:	b5800044 	addi	r22,r22,1
   53358:	b5d3c83a 	sub	r9,r22,r23
   5335c:	000d883a 	mov	r6,zero
   53360:	01d00934 	movhi	r7,16420
   53364:	1009883a 	mov	r4,r2
   53368:	180b883a 	mov	r5,r3
   5336c:	aa7fd91e 	bne	r21,r9,532d4 <_dtoa_r+0x820>
   53370:	802b883a 	mov	r21,r16
   53374:	dc000417 	ldw	r16,16(sp)
   53378:	1009883a 	mov	r4,r2
   5337c:	180b883a 	mov	r5,r3
   53380:	100d883a 	mov	r6,r2
   53384:	180f883a 	mov	r7,r3
   53388:	0058c200 	call	58c20 <__adddf3>
   5338c:	9009883a 	mov	r4,r18
   53390:	980b883a 	mov	r5,r19
   53394:	100d883a 	mov	r6,r2
   53398:	180f883a 	mov	r7,r3
   5339c:	1023883a 	mov	r17,r2
   533a0:	1829883a 	mov	r20,r3
   533a4:	00592ec0 	call	592ec <__ltdf2>
   533a8:	10000816 	blt	r2,zero,533cc <_dtoa_r+0x918>
   533ac:	9009883a 	mov	r4,r18
   533b0:	980b883a 	mov	r5,r19
   533b4:	880d883a 	mov	r6,r17
   533b8:	a00f883a 	mov	r7,r20
   533bc:	005916c0 	call	5916c <__eqdf2>
   533c0:	103f5d1e 	bne	r2,zero,53138 <_dtoa_r+0x684>
   533c4:	ad40004c 	andi	r21,r21,1
   533c8:	a83f5b26 	beq	r21,zero,53138 <_dtoa_r+0x684>
   533cc:	b53fffc3 	ldbu	r20,-1(r22)
   533d0:	b0ffff84 	addi	r3,r22,-2
   533d4:	01400e44 	movi	r5,57
   533d8:	00000306 	br	533e8 <_dtoa_r+0x934>
   533dc:	1d000003 	ldbu	r20,0(r3)
   533e0:	102d883a 	mov	r22,r2
   533e4:	18ffffc4 	addi	r3,r3,-1
   533e8:	a1003fcc 	andi	r4,r20,255
   533ec:	2100201c 	xori	r4,r4,128
   533f0:	213fe004 	addi	r4,r4,-128
   533f4:	b0bfffc4 	addi	r2,r22,-1
   533f8:	2142ca1e 	bne	r4,r5,53f24 <_dtoa_r+0x1470>
   533fc:	b8bff71e 	bne	r23,r2,533dc <_dtoa_r+0x928>
   53400:	d8800617 	ldw	r2,24(sp)
   53404:	05000c44 	movi	r20,49
   53408:	10800044 	addi	r2,r2,1
   5340c:	d8800615 	stw	r2,24(sp)
   53410:	00800c04 	movi	r2,48
   53414:	b8800005 	stb	r2,0(r23)
   53418:	b805883a 	mov	r2,r23
   5341c:	15000005 	stb	r20,0(r2)
   53420:	003f4506 	br	53138 <_dtoa_r+0x684>
   53424:	d9c00c17 	ldw	r7,48(sp)
   53428:	3800c926 	beq	r7,zero,53750 <_dtoa_r+0xc9c>
   5342c:	d9c00417 	ldw	r7,16(sp)
   53430:	00c00044 	movi	r3,1
   53434:	19c16c0e 	bge	r3,r7,539e8 <_dtoa_r+0xf34>
   53438:	d9000917 	ldw	r4,36(sp)
   5343c:	d9c00a17 	ldw	r7,40(sp)
   53440:	24ffffc4 	addi	r19,r4,-1
   53444:	3cc20716 	blt	r7,r19,53c64 <_dtoa_r+0x11b0>
   53448:	3ce7c83a 	sub	r19,r7,r19
   5344c:	d9c00917 	ldw	r7,36(sp)
   53450:	3802ae16 	blt	r7,zero,53f0c <_dtoa_r+0x1458>
   53454:	dc800817 	ldw	r18,32(sp)
   53458:	d8800917 	ldw	r2,36(sp)
   5345c:	d8c00817 	ldw	r3,32(sp)
   53460:	d9c00717 	ldw	r7,28(sp)
   53464:	8009883a 	mov	r4,r16
   53468:	1887883a 	add	r3,r3,r2
   5346c:	388f883a 	add	r7,r7,r2
   53470:	01400044 	movi	r5,1
   53474:	d8c00815 	stw	r3,32(sp)
   53478:	d9c00715 	stw	r7,28(sp)
   5347c:	00562fc0 	call	562fc <__i2b>
   53480:	102b883a 	mov	r21,r2
   53484:	90000a26 	beq	r18,zero,534b0 <_dtoa_r+0x9fc>
   53488:	d8800717 	ldw	r2,28(sp)
   5348c:	0080080e 	bge	zero,r2,534b0 <_dtoa_r+0x9fc>
   53490:	90812b16 	blt	r18,r2,53940 <_dtoa_r+0xe8c>
   53494:	d8c00817 	ldw	r3,32(sp)
   53498:	d9000717 	ldw	r4,28(sp)
   5349c:	90a5c83a 	sub	r18,r18,r2
   534a0:	1887c83a 	sub	r3,r3,r2
   534a4:	2089c83a 	sub	r4,r4,r2
   534a8:	d8c00815 	stw	r3,32(sp)
   534ac:	d9000715 	stw	r4,28(sp)
   534b0:	d9c00a17 	ldw	r7,40(sp)
   534b4:	01c0140e 	bge	zero,r7,53508 <_dtoa_r+0xa54>
   534b8:	d8800c17 	ldw	r2,48(sp)
   534bc:	1001de26 	beq	r2,zero,53c38 <_dtoa_r+0x1184>
   534c0:	04c00e0e 	bge	zero,r19,534fc <_dtoa_r+0xa48>
   534c4:	a80b883a 	mov	r5,r21
   534c8:	8009883a 	mov	r4,r16
   534cc:	980d883a 	mov	r6,r19
   534d0:	00565900 	call	56590 <__pow5mult>
   534d4:	e00d883a 	mov	r6,fp
   534d8:	8009883a 	mov	r4,r16
   534dc:	100b883a 	mov	r5,r2
   534e0:	102b883a 	mov	r21,r2
   534e4:	00563380 	call	56338 <__multiply>
   534e8:	1029883a 	mov	r20,r2
   534ec:	e00b883a 	mov	r5,fp
   534f0:	8009883a 	mov	r4,r16
   534f4:	0055f740 	call	55f74 <_Bfree>
   534f8:	a039883a 	mov	fp,r20
   534fc:	d8c00a17 	ldw	r3,40(sp)
   53500:	1ccdc83a 	sub	r6,r3,r19
   53504:	3001291e 	bne	r6,zero,539ac <_dtoa_r+0xef8>
   53508:	8009883a 	mov	r4,r16
   5350c:	01400044 	movi	r5,1
   53510:	00562fc0 	call	562fc <__i2b>
   53514:	d9000b17 	ldw	r4,44(sp)
   53518:	1029883a 	mov	r20,r2
   5351c:	0100050e 	bge	zero,r4,53534 <_dtoa_r+0xa80>
   53520:	d9800b17 	ldw	r6,44(sp)
   53524:	8009883a 	mov	r4,r16
   53528:	100b883a 	mov	r5,r2
   5352c:	00565900 	call	56590 <__pow5mult>
   53530:	1029883a 	mov	r20,r2
   53534:	d9c00417 	ldw	r7,16(sp)
   53538:	00800044 	movi	r2,1
   5353c:	11c0f00e 	bge	r2,r7,53900 <_dtoa_r+0xe4c>
   53540:	0023883a 	mov	r17,zero
   53544:	d8800b17 	ldw	r2,44(sp)
   53548:	1001741e 	bne	r2,zero,53b1c <_dtoa_r+0x1068>
   5354c:	00800044 	movi	r2,1
   53550:	d8c00717 	ldw	r3,28(sp)
   53554:	10c5883a 	add	r2,r2,r3
   53558:	108007cc 	andi	r2,r2,31
   5355c:	10008026 	beq	r2,zero,53760 <_dtoa_r+0xcac>
   53560:	01000804 	movi	r4,32
   53564:	2089c83a 	sub	r4,r4,r2
   53568:	00c00104 	movi	r3,4
   5356c:	1902d00e 	bge	r3,r4,540b0 <_dtoa_r+0x15fc>
   53570:	d9000817 	ldw	r4,32(sp)
   53574:	d9c00717 	ldw	r7,28(sp)
   53578:	00c00704 	movi	r3,28
   5357c:	1885c83a 	sub	r2,r3,r2
   53580:	2089883a 	add	r4,r4,r2
   53584:	388f883a 	add	r7,r7,r2
   53588:	d9000815 	stw	r4,32(sp)
   5358c:	90a5883a 	add	r18,r18,r2
   53590:	d9c00715 	stw	r7,28(sp)
   53594:	d9c00817 	ldw	r7,32(sp)
   53598:	01c0050e 	bge	zero,r7,535b0 <_dtoa_r+0xafc>
   5359c:	e00b883a 	mov	r5,fp
   535a0:	8009883a 	mov	r4,r16
   535a4:	380d883a 	mov	r6,r7
   535a8:	00566bc0 	call	566bc <__lshift>
   535ac:	1039883a 	mov	fp,r2
   535b0:	d8800717 	ldw	r2,28(sp)
   535b4:	0080050e 	bge	zero,r2,535cc <_dtoa_r+0xb18>
   535b8:	a00b883a 	mov	r5,r20
   535bc:	8009883a 	mov	r4,r16
   535c0:	100d883a 	mov	r6,r2
   535c4:	00566bc0 	call	566bc <__lshift>
   535c8:	1029883a 	mov	r20,r2
   535cc:	d8c00d17 	ldw	r3,52(sp)
   535d0:	1801401e 	bne	r3,zero,53ad4 <_dtoa_r+0x1020>
   535d4:	d8800917 	ldw	r2,36(sp)
   535d8:	00815a0e 	bge	zero,r2,53b44 <_dtoa_r+0x1090>
   535dc:	d8c00c17 	ldw	r3,48(sp)
   535e0:	18006f1e 	bne	r3,zero,537a0 <_dtoa_r+0xcec>
   535e4:	b823883a 	mov	r17,r23
   535e8:	dc800917 	ldw	r18,36(sp)
   535ec:	00000206 	br	535f8 <_dtoa_r+0xb44>
   535f0:	0055f9c0 	call	55f9c <__multadd>
   535f4:	1039883a 	mov	fp,r2
   535f8:	e009883a 	mov	r4,fp
   535fc:	a00b883a 	mov	r5,r20
   53600:	00528780 	call	52878 <quorem>
   53604:	10800c04 	addi	r2,r2,48
   53608:	88800005 	stb	r2,0(r17)
   5360c:	8c400044 	addi	r17,r17,1
   53610:	8dc7c83a 	sub	r3,r17,r23
   53614:	8009883a 	mov	r4,r16
   53618:	e00b883a 	mov	r5,fp
   5361c:	01800284 	movi	r6,10
   53620:	000f883a 	mov	r7,zero
   53624:	1cbff216 	blt	r3,r18,535f0 <_dtoa_r+0xb3c>
   53628:	dd800917 	ldw	r22,36(sp)
   5362c:	1007883a 	mov	r3,r2
   53630:	05823a0e 	bge	zero,r22,53f1c <_dtoa_r+0x1468>
   53634:	bdad883a 	add	r22,r23,r22
   53638:	0023883a 	mov	r17,zero
   5363c:	e00b883a 	mov	r5,fp
   53640:	01800044 	movi	r6,1
   53644:	8009883a 	mov	r4,r16
   53648:	d8c01515 	stw	r3,84(sp)
   5364c:	00566bc0 	call	566bc <__lshift>
   53650:	1009883a 	mov	r4,r2
   53654:	a00b883a 	mov	r5,r20
   53658:	1039883a 	mov	fp,r2
   5365c:	00568180 	call	56818 <__mcmp>
   53660:	d8c01517 	ldw	r3,84(sp)
   53664:	0080d60e 	bge	zero,r2,539c0 <_dtoa_r+0xf0c>
   53668:	b13fffc3 	ldbu	r4,-1(r22)
   5366c:	b0ffff84 	addi	r3,r22,-2
   53670:	01800e44 	movi	r6,57
   53674:	00000306 	br	53684 <_dtoa_r+0xbd0>
   53678:	19000003 	ldbu	r4,0(r3)
   5367c:	102d883a 	mov	r22,r2
   53680:	18ffffc4 	addi	r3,r3,-1
   53684:	21403fcc 	andi	r5,r4,255
   53688:	2940201c 	xori	r5,r5,128
   5368c:	297fe004 	addi	r5,r5,-128
   53690:	b0bfffc4 	addi	r2,r22,-1
   53694:	2981a71e 	bne	r5,r6,53d34 <_dtoa_r+0x1280>
   53698:	b8bff71e 	bne	r23,r2,53678 <_dtoa_r+0xbc4>
   5369c:	d8800617 	ldw	r2,24(sp)
   536a0:	10800044 	addi	r2,r2,1
   536a4:	d8800615 	stw	r2,24(sp)
   536a8:	00800c44 	movi	r2,49
   536ac:	b8800005 	stb	r2,0(r23)
   536b0:	8009883a 	mov	r4,r16
   536b4:	a00b883a 	mov	r5,r20
   536b8:	0055f740 	call	55f74 <_Bfree>
   536bc:	a83e9e26 	beq	r21,zero,53138 <_dtoa_r+0x684>
   536c0:	88000426 	beq	r17,zero,536d4 <_dtoa_r+0xc20>
   536c4:	8d400326 	beq	r17,r21,536d4 <_dtoa_r+0xc20>
   536c8:	8009883a 	mov	r4,r16
   536cc:	880b883a 	mov	r5,r17
   536d0:	0055f740 	call	55f74 <_Bfree>
   536d4:	8009883a 	mov	r4,r16
   536d8:	a80b883a 	mov	r5,r21
   536dc:	0055f740 	call	55f74 <_Bfree>
   536e0:	003e9506 	br	53138 <_dtoa_r+0x684>
   536e4:	00c00044 	movi	r3,1
   536e8:	d8c00d15 	stw	r3,52(sp)
   536ec:	003d9f06 	br	52d6c <_dtoa_r+0x2b8>
   536f0:	d9000817 	ldw	r4,32(sp)
   536f4:	d8800617 	ldw	r2,24(sp)
   536f8:	d8000b15 	stw	zero,44(sp)
   536fc:	2089c83a 	sub	r4,r4,r2
   53700:	0087c83a 	sub	r3,zero,r2
   53704:	d9000815 	stw	r4,32(sp)
   53708:	d8c00a15 	stw	r3,40(sp)
   5370c:	003da306 	br	52d9c <_dtoa_r+0x2e8>
   53710:	0529c83a 	sub	r20,zero,r20
   53714:	dd000815 	stw	r20,32(sp)
   53718:	d8000715 	stw	zero,28(sp)
   5371c:	003d9806 	br	52d80 <_dtoa_r+0x2cc>
   53720:	d9000617 	ldw	r4,24(sp)
   53724:	00593480 	call	59348 <__floatsidf>
   53728:	1009883a 	mov	r4,r2
   5372c:	180b883a 	mov	r5,r3
   53730:	980d883a 	mov	r6,r19
   53734:	900f883a 	mov	r7,r18
   53738:	00591c80 	call	591c8 <__nedf2>
   5373c:	103d7a26 	beq	r2,zero,52d28 <_dtoa_r+0x274>
   53740:	d8800617 	ldw	r2,24(sp)
   53744:	10bfffc4 	addi	r2,r2,-1
   53748:	d8800615 	stw	r2,24(sp)
   5374c:	003d7606 	br	52d28 <_dtoa_r+0x274>
   53750:	dcc00a17 	ldw	r19,40(sp)
   53754:	dc800817 	ldw	r18,32(sp)
   53758:	002b883a 	mov	r21,zero
   5375c:	003f4906 	br	53484 <_dtoa_r+0x9d0>
   53760:	00800704 	movi	r2,28
   53764:	d8c00817 	ldw	r3,32(sp)
   53768:	d9000717 	ldw	r4,28(sp)
   5376c:	90a5883a 	add	r18,r18,r2
   53770:	1887883a 	add	r3,r3,r2
   53774:	2089883a 	add	r4,r4,r2
   53778:	d8c00815 	stw	r3,32(sp)
   5377c:	d9000715 	stw	r4,28(sp)
   53780:	003f8406 	br	53594 <_dtoa_r+0xae0>
   53784:	d9c00317 	ldw	r7,12(sp)
   53788:	013efb84 	movi	r4,-1042
   5378c:	2509c83a 	sub	r4,r4,r20
   53790:	3908983a 	sll	r4,r7,r4
   53794:	003d3006 	br	52c58 <_dtoa_r+0x1a4>
   53798:	d8000d15 	stw	zero,52(sp)
   5379c:	003d7306 	br	52d6c <_dtoa_r+0x2b8>
   537a0:	0480050e 	bge	zero,r18,537b8 <_dtoa_r+0xd04>
   537a4:	a80b883a 	mov	r5,r21
   537a8:	8009883a 	mov	r4,r16
   537ac:	900d883a 	mov	r6,r18
   537b0:	00566bc0 	call	566bc <__lshift>
   537b4:	102b883a 	mov	r21,r2
   537b8:	8801611e 	bne	r17,zero,53d40 <_dtoa_r+0x128c>
   537bc:	a827883a 	mov	r19,r21
   537c0:	d8c00317 	ldw	r3,12(sp)
   537c4:	d9000917 	ldw	r4,36(sp)
   537c8:	b8bfffc4 	addi	r2,r23,-1
   537cc:	18c0004c 	andi	r3,r3,1
   537d0:	1105883a 	add	r2,r2,r4
   537d4:	b825883a 	mov	r18,r23
   537d8:	d8800515 	stw	r2,20(sp)
   537dc:	a823883a 	mov	r17,r21
   537e0:	d8c00315 	stw	r3,12(sp)
   537e4:	ddc00715 	stw	r23,28(sp)
   537e8:	e009883a 	mov	r4,fp
   537ec:	a00b883a 	mov	r5,r20
   537f0:	00528780 	call	52878 <quorem>
   537f4:	e009883a 	mov	r4,fp
   537f8:	880b883a 	mov	r5,r17
   537fc:	102d883a 	mov	r22,r2
   53800:	00568180 	call	56818 <__mcmp>
   53804:	980d883a 	mov	r6,r19
   53808:	8009883a 	mov	r4,r16
   5380c:	a00b883a 	mov	r5,r20
   53810:	102b883a 	mov	r21,r2
   53814:	00568700 	call	56870 <__mdiff>
   53818:	100d883a 	mov	r6,r2
   5381c:	10800317 	ldw	r2,12(r2)
   53820:	b5c00c04 	addi	r23,r22,48
   53824:	10008c26 	beq	r2,zero,53a58 <_dtoa_r+0xfa4>
   53828:	8009883a 	mov	r4,r16
   5382c:	300b883a 	mov	r5,r6
   53830:	0055f740 	call	55f74 <_Bfree>
   53834:	00800044 	movi	r2,1
   53838:	a8007116 	blt	r21,zero,53a00 <_dtoa_r+0xf4c>
   5383c:	a800041e 	bne	r21,zero,53850 <_dtoa_r+0xd9c>
   53840:	d9c00417 	ldw	r7,16(sp)
   53844:	3800021e 	bne	r7,zero,53850 <_dtoa_r+0xd9c>
   53848:	d8c00317 	ldw	r3,12(sp)
   5384c:	18006c26 	beq	r3,zero,53a00 <_dtoa_r+0xf4c>
   53850:	00814c16 	blt	zero,r2,53d84 <_dtoa_r+0x12d0>
   53854:	d8c00517 	ldw	r3,20(sp)
   53858:	95400044 	addi	r21,r18,1
   5385c:	95c00005 	stb	r23,0(r18)
   53860:	a82d883a 	mov	r22,r21
   53864:	90c14d26 	beq	r18,r3,53d9c <_dtoa_r+0x12e8>
   53868:	e00b883a 	mov	r5,fp
   5386c:	8009883a 	mov	r4,r16
   53870:	01800284 	movi	r6,10
   53874:	000f883a 	mov	r7,zero
   53878:	0055f9c0 	call	55f9c <__multadd>
   5387c:	1039883a 	mov	fp,r2
   53880:	8cc08b26 	beq	r17,r19,53ab0 <_dtoa_r+0xffc>
   53884:	880b883a 	mov	r5,r17
   53888:	01800284 	movi	r6,10
   5388c:	000f883a 	mov	r7,zero
   53890:	8009883a 	mov	r4,r16
   53894:	0055f9c0 	call	55f9c <__multadd>
   53898:	980b883a 	mov	r5,r19
   5389c:	8009883a 	mov	r4,r16
   538a0:	01800284 	movi	r6,10
   538a4:	000f883a 	mov	r7,zero
   538a8:	1023883a 	mov	r17,r2
   538ac:	0055f9c0 	call	55f9c <__multadd>
   538b0:	1027883a 	mov	r19,r2
   538b4:	a825883a 	mov	r18,r21
   538b8:	003fcb06 	br	537e8 <_dtoa_r+0xd34>
   538bc:	d9c00417 	ldw	r7,16(sp)
   538c0:	00800104 	movi	r2,4
   538c4:	3880e426 	beq	r7,r2,53c58 <_dtoa_r+0x11a4>
   538c8:	00800144 	movi	r2,5
   538cc:	38be3c1e 	bne	r7,r2,531c0 <_dtoa_r+0x70c>
   538d0:	00c00044 	movi	r3,1
   538d4:	d8c00c15 	stw	r3,48(sp)
   538d8:	d9c02117 	ldw	r7,132(sp)
   538dc:	d8800617 	ldw	r2,24(sp)
   538e0:	388f883a 	add	r7,r7,r2
   538e4:	3c800044 	addi	r18,r7,1
   538e8:	d9c00e15 	stw	r7,56(sp)
   538ec:	dc800915 	stw	r18,36(sp)
   538f0:	04bd3e16 	blt	zero,r18,52dec <_dtoa_r+0x338>
   538f4:	80001115 	stw	zero,68(r16)
   538f8:	000b883a 	mov	r5,zero
   538fc:	003d4606 	br	52e18 <_dtoa_r+0x364>
   53900:	d8c00317 	ldw	r3,12(sp)
   53904:	183f0e1e 	bne	r3,zero,53540 <_dtoa_r+0xa8c>
   53908:	00c00434 	movhi	r3,16
   5390c:	18ffffc4 	addi	r3,r3,-1
   53910:	88c6703a 	and	r3,r17,r3
   53914:	183f0a1e 	bne	r3,zero,53540 <_dtoa_r+0xa8c>
   53918:	8c5ffc2c 	andhi	r17,r17,32752
   5391c:	883f0826 	beq	r17,zero,53540 <_dtoa_r+0xa8c>
   53920:	d9000817 	ldw	r4,32(sp)
   53924:	d9c00717 	ldw	r7,28(sp)
   53928:	1023883a 	mov	r17,r2
   5392c:	2089883a 	add	r4,r4,r2
   53930:	388f883a 	add	r7,r7,r2
   53934:	d9000815 	stw	r4,32(sp)
   53938:	d9c00715 	stw	r7,28(sp)
   5393c:	003f0106 	br	53544 <_dtoa_r+0xa90>
   53940:	9005883a 	mov	r2,r18
   53944:	003ed306 	br	53494 <_dtoa_r+0x9e0>
   53948:	d8800917 	ldw	r2,36(sp)
   5394c:	00be3516 	blt	zero,r2,53224 <_dtoa_r+0x770>
   53950:	1000b61e 	bne	r2,zero,53c2c <_dtoa_r+0x1178>
   53954:	9009883a 	mov	r4,r18
   53958:	980b883a 	mov	r5,r19
   5395c:	000d883a 	mov	r6,zero
   53960:	01d00534 	movhi	r7,16404
   53964:	0058cd40 	call	58cd4 <__muldf3>
   53968:	d9800317 	ldw	r6,12(sp)
   5396c:	1009883a 	mov	r4,r2
   53970:	180b883a 	mov	r5,r3
   53974:	880f883a 	mov	r7,r17
   53978:	00592880 	call	59288 <__gedf2>
   5397c:	0029883a 	mov	r20,zero
   53980:	002b883a 	mov	r21,zero
   53984:	10007e16 	blt	r2,zero,53b80 <_dtoa_r+0x10cc>
   53988:	d8802117 	ldw	r2,132(sp)
   5398c:	b82d883a 	mov	r22,r23
   53990:	0084303a 	nor	r2,zero,r2
   53994:	d8800615 	stw	r2,24(sp)
   53998:	8009883a 	mov	r4,r16
   5399c:	a00b883a 	mov	r5,r20
   539a0:	0055f740 	call	55f74 <_Bfree>
   539a4:	a83f4b1e 	bne	r21,zero,536d4 <_dtoa_r+0xc20>
   539a8:	003de306 	br	53138 <_dtoa_r+0x684>
   539ac:	e00b883a 	mov	r5,fp
   539b0:	8009883a 	mov	r4,r16
   539b4:	00565900 	call	56590 <__pow5mult>
   539b8:	1039883a 	mov	fp,r2
   539bc:	003ed206 	br	53508 <_dtoa_r+0xa54>
   539c0:	1000021e 	bne	r2,zero,539cc <_dtoa_r+0xf18>
   539c4:	18c0004c 	andi	r3,r3,1
   539c8:	183f271e 	bne	r3,zero,53668 <_dtoa_r+0xbb4>
   539cc:	01000c04 	movi	r4,48
   539d0:	00000106 	br	539d8 <_dtoa_r+0xf24>
   539d4:	102d883a 	mov	r22,r2
   539d8:	b0bfffc4 	addi	r2,r22,-1
   539dc:	10c00007 	ldb	r3,0(r2)
   539e0:	193ffc26 	beq	r3,r4,539d4 <_dtoa_r+0xf20>
   539e4:	003f3206 	br	536b0 <_dtoa_r+0xbfc>
   539e8:	d8c00f17 	ldw	r3,60(sp)
   539ec:	18015026 	beq	r3,zero,53f30 <_dtoa_r+0x147c>
   539f0:	10810cc4 	addi	r2,r2,1075
   539f4:	dcc00a17 	ldw	r19,40(sp)
   539f8:	dc800817 	ldw	r18,32(sp)
   539fc:	003e9706 	br	5345c <_dtoa_r+0x9a8>
   53a00:	b807883a 	mov	r3,r23
   53a04:	182b883a 	mov	r21,r3
   53a08:	ddc00717 	ldw	r23,28(sp)
   53a0c:	00800e0e 	bge	zero,r2,53a48 <_dtoa_r+0xf94>
   53a10:	e00b883a 	mov	r5,fp
   53a14:	01800044 	movi	r6,1
   53a18:	8009883a 	mov	r4,r16
   53a1c:	d8c01515 	stw	r3,84(sp)
   53a20:	00566bc0 	call	566bc <__lshift>
   53a24:	1009883a 	mov	r4,r2
   53a28:	a00b883a 	mov	r5,r20
   53a2c:	1039883a 	mov	fp,r2
   53a30:	00568180 	call	56818 <__mcmp>
   53a34:	d8c01517 	ldw	r3,84(sp)
   53a38:	0081880e 	bge	zero,r2,5405c <_dtoa_r+0x15a8>
   53a3c:	00800e44 	movi	r2,57
   53a40:	b0c00c44 	addi	r3,r22,49
   53a44:	a8816326 	beq	r21,r2,53fd4 <_dtoa_r+0x1520>
   53a48:	90c00005 	stb	r3,0(r18)
   53a4c:	95800044 	addi	r22,r18,1
   53a50:	982b883a 	mov	r21,r19
   53a54:	003f1606 	br	536b0 <_dtoa_r+0xbfc>
   53a58:	300b883a 	mov	r5,r6
   53a5c:	e009883a 	mov	r4,fp
   53a60:	d9801515 	stw	r6,84(sp)
   53a64:	00568180 	call	56818 <__mcmp>
   53a68:	d9801517 	ldw	r6,84(sp)
   53a6c:	8009883a 	mov	r4,r16
   53a70:	d8801515 	stw	r2,84(sp)
   53a74:	300b883a 	mov	r5,r6
   53a78:	0055f740 	call	55f74 <_Bfree>
   53a7c:	d8801517 	ldw	r2,84(sp)
   53a80:	103f6d1e 	bne	r2,zero,53838 <_dtoa_r+0xd84>
   53a84:	d9c00417 	ldw	r7,16(sp)
   53a88:	383f6b1e 	bne	r7,zero,53838 <_dtoa_r+0xd84>
   53a8c:	d8c00317 	ldw	r3,12(sp)
   53a90:	183f691e 	bne	r3,zero,53838 <_dtoa_r+0xd84>
   53a94:	b807883a 	mov	r3,r23
   53a98:	00800e44 	movi	r2,57
   53a9c:	ddc00717 	ldw	r23,28(sp)
   53aa0:	18814c26 	beq	r3,r2,53fd4 <_dtoa_r+0x1520>
   53aa4:	057fe80e 	bge	zero,r21,53a48 <_dtoa_r+0xf94>
   53aa8:	b0c00c44 	addi	r3,r22,49
   53aac:	003fe606 	br	53a48 <_dtoa_r+0xf94>
   53ab0:	880b883a 	mov	r5,r17
   53ab4:	8009883a 	mov	r4,r16
   53ab8:	01800284 	movi	r6,10
   53abc:	000f883a 	mov	r7,zero
   53ac0:	0055f9c0 	call	55f9c <__multadd>
   53ac4:	1023883a 	mov	r17,r2
   53ac8:	1027883a 	mov	r19,r2
   53acc:	a825883a 	mov	r18,r21
   53ad0:	003f4506 	br	537e8 <_dtoa_r+0xd34>
   53ad4:	e009883a 	mov	r4,fp
   53ad8:	a00b883a 	mov	r5,r20
   53adc:	00568180 	call	56818 <__mcmp>
   53ae0:	103ebc0e 	bge	r2,zero,535d4 <_dtoa_r+0xb20>
   53ae4:	e00b883a 	mov	r5,fp
   53ae8:	8009883a 	mov	r4,r16
   53aec:	01800284 	movi	r6,10
   53af0:	000f883a 	mov	r7,zero
   53af4:	0055f9c0 	call	55f9c <__multadd>
   53af8:	1039883a 	mov	fp,r2
   53afc:	d8800617 	ldw	r2,24(sp)
   53b00:	d8c00c17 	ldw	r3,48(sp)
   53b04:	10bfffc4 	addi	r2,r2,-1
   53b08:	d8800615 	stw	r2,24(sp)
   53b0c:	1801571e 	bne	r3,zero,5406c <_dtoa_r+0x15b8>
   53b10:	d9c00e17 	ldw	r7,56(sp)
   53b14:	d9c00915 	stw	r7,36(sp)
   53b18:	003eae06 	br	535d4 <_dtoa_r+0xb20>
   53b1c:	a0800417 	ldw	r2,16(r20)
   53b20:	10800104 	addi	r2,r2,4
   53b24:	1085883a 	add	r2,r2,r2
   53b28:	1085883a 	add	r2,r2,r2
   53b2c:	a085883a 	add	r2,r20,r2
   53b30:	11000017 	ldw	r4,0(r2)
   53b34:	00561e40 	call	561e4 <__hi0bits>
   53b38:	00c00804 	movi	r3,32
   53b3c:	1885c83a 	sub	r2,r3,r2
   53b40:	003e8306 	br	53550 <_dtoa_r+0xa9c>
   53b44:	d9c00417 	ldw	r7,16(sp)
   53b48:	00800084 	movi	r2,2
   53b4c:	11fea30e 	bge	r2,r7,535dc <_dtoa_r+0xb28>
   53b50:	d8800917 	ldw	r2,36(sp)
   53b54:	103f8c1e 	bne	r2,zero,53988 <_dtoa_r+0xed4>
   53b58:	a00b883a 	mov	r5,r20
   53b5c:	8009883a 	mov	r4,r16
   53b60:	01800144 	movi	r6,5
   53b64:	000f883a 	mov	r7,zero
   53b68:	0055f9c0 	call	55f9c <__multadd>
   53b6c:	e009883a 	mov	r4,fp
   53b70:	100b883a 	mov	r5,r2
   53b74:	1029883a 	mov	r20,r2
   53b78:	00568180 	call	56818 <__mcmp>
   53b7c:	00bf820e 	bge	zero,r2,53988 <_dtoa_r+0xed4>
   53b80:	00800c44 	movi	r2,49
   53b84:	b8800005 	stb	r2,0(r23)
   53b88:	d8800617 	ldw	r2,24(sp)
   53b8c:	bd800044 	addi	r22,r23,1
   53b90:	10800044 	addi	r2,r2,1
   53b94:	d8800615 	stw	r2,24(sp)
   53b98:	003f7f06 	br	53998 <_dtoa_r+0xee4>
   53b9c:	dc000417 	ldw	r16,16(sp)
   53ba0:	003d6506 	br	53138 <_dtoa_r+0x684>
   53ba4:	9009883a 	mov	r4,r18
   53ba8:	00593480 	call	59348 <__floatsidf>
   53bac:	1009883a 	mov	r4,r2
   53bb0:	180b883a 	mov	r5,r3
   53bb4:	980d883a 	mov	r6,r19
   53bb8:	a00f883a 	mov	r7,r20
   53bbc:	0058cd40 	call	58cd4 <__muldf3>
   53bc0:	1009883a 	mov	r4,r2
   53bc4:	180b883a 	mov	r5,r3
   53bc8:	000d883a 	mov	r6,zero
   53bcc:	01d00734 	movhi	r7,16412
   53bd0:	0058c200 	call	58c20 <__adddf3>
   53bd4:	057f3034 	movhi	r21,64704
   53bd8:	1025883a 	mov	r18,r2
   53bdc:	1d6b883a 	add	r21,r3,r21
   53be0:	9809883a 	mov	r4,r19
   53be4:	a00b883a 	mov	r5,r20
   53be8:	000d883a 	mov	r6,zero
   53bec:	01d00534 	movhi	r7,16404
   53bf0:	0058c740 	call	58c74 <__subdf3>
   53bf4:	1009883a 	mov	r4,r2
   53bf8:	180b883a 	mov	r5,r3
   53bfc:	900d883a 	mov	r6,r18
   53c00:	a80f883a 	mov	r7,r21
   53c04:	1027883a 	mov	r19,r2
   53c08:	1829883a 	mov	r20,r3
   53c0c:	00592240 	call	59224 <__gtdf2>
   53c10:	00806616 	blt	zero,r2,53dac <_dtoa_r+0x12f8>
   53c14:	a9e0003c 	xorhi	r7,r21,32768
   53c18:	9809883a 	mov	r4,r19
   53c1c:	a00b883a 	mov	r5,r20
   53c20:	900d883a 	mov	r6,r18
   53c24:	00592ec0 	call	592ec <__ltdf2>
   53c28:	103d710e 	bge	r2,zero,531f0 <_dtoa_r+0x73c>
   53c2c:	0029883a 	mov	r20,zero
   53c30:	002b883a 	mov	r21,zero
   53c34:	003f5406 	br	53988 <_dtoa_r+0xed4>
   53c38:	d9800a17 	ldw	r6,40(sp)
   53c3c:	e00b883a 	mov	r5,fp
   53c40:	8009883a 	mov	r4,r16
   53c44:	00565900 	call	56590 <__pow5mult>
   53c48:	1039883a 	mov	fp,r2
   53c4c:	003e2e06 	br	53508 <_dtoa_r+0xa54>
   53c50:	d8000c15 	stw	zero,48(sp)
   53c54:	003f2006 	br	538d8 <_dtoa_r+0xe24>
   53c58:	00800044 	movi	r2,1
   53c5c:	d8800c15 	stw	r2,48(sp)
   53c60:	003c5d06 	br	52dd8 <_dtoa_r+0x324>
   53c64:	d8c00a17 	ldw	r3,40(sp)
   53c68:	d9000b17 	ldw	r4,44(sp)
   53c6c:	dcc00a15 	stw	r19,40(sp)
   53c70:	98c5c83a 	sub	r2,r19,r3
   53c74:	2089883a 	add	r4,r4,r2
   53c78:	d9000b15 	stw	r4,44(sp)
   53c7c:	0027883a 	mov	r19,zero
   53c80:	003df206 	br	5344c <_dtoa_r+0x998>
   53c84:	d9000317 	ldw	r4,12(sp)
   53c88:	8829883a 	mov	r20,r17
   53c8c:	04800084 	movi	r18,2
   53c90:	d9001015 	stw	r4,64(sp)
   53c94:	003c8106 	br	52e9c <_dtoa_r+0x3e8>
   53c98:	04800044 	movi	r18,1
   53c9c:	dc800e15 	stw	r18,56(sp)
   53ca0:	dc800915 	stw	r18,36(sp)
   53ca4:	dc802115 	stw	r18,132(sp)
   53ca8:	003f1206 	br	538f4 <_dtoa_r+0xe40>
   53cac:	d8800617 	ldw	r2,24(sp)
   53cb0:	00abc83a 	sub	r21,zero,r2
   53cb4:	a800a426 	beq	r21,zero,53f48 <_dtoa_r+0x1494>
   53cb8:	a88003cc 	andi	r2,r21,15
   53cbc:	100490fa 	slli	r2,r2,3
   53cc0:	00c00074 	movhi	r3,1
   53cc4:	18c05b04 	addi	r3,r3,364
   53cc8:	d9000317 	ldw	r4,12(sp)
   53ccc:	1885883a 	add	r2,r3,r2
   53cd0:	11800017 	ldw	r6,0(r2)
   53cd4:	11c00117 	ldw	r7,4(r2)
   53cd8:	a82bd13a 	srai	r21,r21,4
   53cdc:	880b883a 	mov	r5,r17
   53ce0:	0058cd40 	call	58cd4 <__muldf3>
   53ce4:	1027883a 	mov	r19,r2
   53ce8:	1829883a 	mov	r20,r3
   53cec:	a800e826 	beq	r21,zero,54090 <_dtoa_r+0x15dc>
   53cf0:	05800074 	movhi	r22,1
   53cf4:	b5805104 	addi	r22,r22,324
   53cf8:	04800084 	movi	r18,2
   53cfc:	a980004c 	andi	r6,r21,1
   53d00:	1009883a 	mov	r4,r2
   53d04:	a82bd07a 	srai	r21,r21,1
   53d08:	180b883a 	mov	r5,r3
   53d0c:	30000426 	beq	r6,zero,53d20 <_dtoa_r+0x126c>
   53d10:	b1800017 	ldw	r6,0(r22)
   53d14:	b1c00117 	ldw	r7,4(r22)
   53d18:	94800044 	addi	r18,r18,1
   53d1c:	0058cd40 	call	58cd4 <__muldf3>
   53d20:	b5800204 	addi	r22,r22,8
   53d24:	a83ff51e 	bne	r21,zero,53cfc <_dtoa_r+0x1248>
   53d28:	1027883a 	mov	r19,r2
   53d2c:	1829883a 	mov	r20,r3
   53d30:	003c7306 	br	52f00 <_dtoa_r+0x44c>
   53d34:	21000044 	addi	r4,r4,1
   53d38:	11000005 	stb	r4,0(r2)
   53d3c:	003e5c06 	br	536b0 <_dtoa_r+0xbfc>
   53d40:	a9400117 	ldw	r5,4(r21)
   53d44:	8009883a 	mov	r4,r16
   53d48:	0055ecc0 	call	55ecc <_Balloc>
   53d4c:	a9800417 	ldw	r6,16(r21)
   53d50:	11000304 	addi	r4,r2,12
   53d54:	a9400304 	addi	r5,r21,12
   53d58:	31800084 	addi	r6,r6,2
   53d5c:	318d883a 	add	r6,r6,r6
   53d60:	318d883a 	add	r6,r6,r6
   53d64:	1023883a 	mov	r17,r2
   53d68:	0055b240 	call	55b24 <memcpy>
   53d6c:	8009883a 	mov	r4,r16
   53d70:	880b883a 	mov	r5,r17
   53d74:	01800044 	movi	r6,1
   53d78:	00566bc0 	call	566bc <__lshift>
   53d7c:	1027883a 	mov	r19,r2
   53d80:	003e8f06 	br	537c0 <_dtoa_r+0xd0c>
   53d84:	b807883a 	mov	r3,r23
   53d88:	00800e44 	movi	r2,57
   53d8c:	ddc00717 	ldw	r23,28(sp)
   53d90:	18809026 	beq	r3,r2,53fd4 <_dtoa_r+0x1520>
   53d94:	18c00044 	addi	r3,r3,1
   53d98:	003f2b06 	br	53a48 <_dtoa_r+0xf94>
   53d9c:	b807883a 	mov	r3,r23
   53da0:	982b883a 	mov	r21,r19
   53da4:	ddc00717 	ldw	r23,28(sp)
   53da8:	003e2406 	br	5363c <_dtoa_r+0xb88>
   53dac:	0029883a 	mov	r20,zero
   53db0:	002b883a 	mov	r21,zero
   53db4:	003f7206 	br	53b80 <_dtoa_r+0x10cc>
   53db8:	593fffc4 	addi	r4,r11,-1
   53dbc:	200490fa 	slli	r2,r4,3
   53dc0:	00c00074 	movhi	r3,1
   53dc4:	18c05b04 	addi	r3,r3,364
   53dc8:	d9001015 	stw	r4,64(sp)
   53dcc:	1885883a 	add	r2,r3,r2
   53dd0:	11000017 	ldw	r4,0(r2)
   53dd4:	11400117 	ldw	r5,4(r2)
   53dd8:	900d883a 	mov	r6,r18
   53ddc:	a80f883a 	mov	r7,r21
   53de0:	dac01615 	stw	r11,88(sp)
   53de4:	0058cd40 	call	58cd4 <__muldf3>
   53de8:	a00b883a 	mov	r5,r20
   53dec:	9809883a 	mov	r4,r19
   53df0:	d8c01215 	stw	r3,72(sp)
   53df4:	d8801115 	stw	r2,68(sp)
   53df8:	005941c0 	call	5941c <__fixdfsi>
   53dfc:	1009883a 	mov	r4,r2
   53e00:	1025883a 	mov	r18,r2
   53e04:	00593480 	call	59348 <__floatsidf>
   53e08:	9809883a 	mov	r4,r19
   53e0c:	a00b883a 	mov	r5,r20
   53e10:	100d883a 	mov	r6,r2
   53e14:	180f883a 	mov	r7,r3
   53e18:	94800c04 	addi	r18,r18,48
   53e1c:	0058c740 	call	58c74 <__subdf3>
   53e20:	bc800005 	stb	r18,0(r23)
   53e24:	dac01617 	ldw	r11,88(sp)
   53e28:	102b883a 	mov	r21,r2
   53e2c:	00800044 	movi	r2,1
   53e30:	bd800044 	addi	r22,r23,1
   53e34:	1815883a 	mov	r10,r3
   53e38:	58802226 	beq	r11,r2,53ec4 <_dtoa_r+0x1410>
   53e3c:	bad7883a 	add	r11,r23,r11
   53e40:	dc001415 	stw	r16,80(sp)
   53e44:	a805883a 	mov	r2,r21
   53e48:	b027883a 	mov	r19,r22
   53e4c:	5821883a 	mov	r16,r11
   53e50:	882b883a 	mov	r21,r17
   53e54:	000d883a 	mov	r6,zero
   53e58:	01d00934 	movhi	r7,16420
   53e5c:	1009883a 	mov	r4,r2
   53e60:	180b883a 	mov	r5,r3
   53e64:	0058cd40 	call	58cd4 <__muldf3>
   53e68:	180b883a 	mov	r5,r3
   53e6c:	1009883a 	mov	r4,r2
   53e70:	1829883a 	mov	r20,r3
   53e74:	1023883a 	mov	r17,r2
   53e78:	005941c0 	call	5941c <__fixdfsi>
   53e7c:	1009883a 	mov	r4,r2
   53e80:	1025883a 	mov	r18,r2
   53e84:	00593480 	call	59348 <__floatsidf>
   53e88:	8809883a 	mov	r4,r17
   53e8c:	a00b883a 	mov	r5,r20
   53e90:	100d883a 	mov	r6,r2
   53e94:	180f883a 	mov	r7,r3
   53e98:	94800c04 	addi	r18,r18,48
   53e9c:	0058c740 	call	58c74 <__subdf3>
   53ea0:	9cc00044 	addi	r19,r19,1
   53ea4:	9cbfffc5 	stb	r18,-1(r19)
   53ea8:	9c3fea1e 	bne	r19,r16,53e54 <_dtoa_r+0x13a0>
   53eac:	1815883a 	mov	r10,r3
   53eb0:	d8c01017 	ldw	r3,64(sp)
   53eb4:	dc001417 	ldw	r16,80(sp)
   53eb8:	a823883a 	mov	r17,r21
   53ebc:	b0ed883a 	add	r22,r22,r3
   53ec0:	102b883a 	mov	r21,r2
   53ec4:	d9001117 	ldw	r4,68(sp)
   53ec8:	d9401217 	ldw	r5,72(sp)
   53ecc:	000d883a 	mov	r6,zero
   53ed0:	01cff834 	movhi	r7,16352
   53ed4:	da801515 	stw	r10,84(sp)
   53ed8:	0058c200 	call	58c20 <__adddf3>
   53edc:	da801517 	ldw	r10,84(sp)
   53ee0:	1009883a 	mov	r4,r2
   53ee4:	180b883a 	mov	r5,r3
   53ee8:	500f883a 	mov	r7,r10
   53eec:	a80d883a 	mov	r6,r21
   53ef0:	00592ec0 	call	592ec <__ltdf2>
   53ef4:	da801517 	ldw	r10,84(sp)
   53ef8:	10003b0e 	bge	r2,zero,53fe8 <_dtoa_r+0x1534>
   53efc:	d9c01317 	ldw	r7,76(sp)
   53f00:	b53fffc3 	ldbu	r20,-1(r22)
   53f04:	d9c00615 	stw	r7,24(sp)
   53f08:	003d3106 	br	533d0 <_dtoa_r+0x91c>
   53f0c:	d8800817 	ldw	r2,32(sp)
   53f10:	11e5c83a 	sub	r18,r2,r7
   53f14:	0005883a 	mov	r2,zero
   53f18:	003d5006 	br	5345c <_dtoa_r+0x9a8>
   53f1c:	05800044 	movi	r22,1
   53f20:	003dc406 	br	53634 <_dtoa_r+0xb80>
   53f24:	a5000044 	addi	r20,r20,1
   53f28:	15000005 	stb	r20,0(r2)
   53f2c:	003c8206 	br	53138 <_dtoa_r+0x684>
   53f30:	d8800217 	ldw	r2,8(sp)
   53f34:	00c00d84 	movi	r3,54
   53f38:	dcc00a17 	ldw	r19,40(sp)
   53f3c:	1885c83a 	sub	r2,r3,r2
   53f40:	dc800817 	ldw	r18,32(sp)
   53f44:	003d4506 	br	5345c <_dtoa_r+0x9a8>
   53f48:	dcc00317 	ldw	r19,12(sp)
   53f4c:	8829883a 	mov	r20,r17
   53f50:	04800084 	movi	r18,2
   53f54:	003bea06 	br	52f00 <_dtoa_r+0x44c>
   53f58:	d9000917 	ldw	r4,36(sp)
   53f5c:	203f1126 	beq	r4,zero,53ba4 <_dtoa_r+0x10f0>
   53f60:	d9c00e17 	ldw	r7,56(sp)
   53f64:	01fca20e 	bge	zero,r7,531f0 <_dtoa_r+0x73c>
   53f68:	a00b883a 	mov	r5,r20
   53f6c:	9809883a 	mov	r4,r19
   53f70:	000d883a 	mov	r6,zero
   53f74:	01d00934 	movhi	r7,16420
   53f78:	0058cd40 	call	58cd4 <__muldf3>
   53f7c:	91000044 	addi	r4,r18,1
   53f80:	1027883a 	mov	r19,r2
   53f84:	1829883a 	mov	r20,r3
   53f88:	00593480 	call	59348 <__floatsidf>
   53f8c:	9809883a 	mov	r4,r19
   53f90:	a00b883a 	mov	r5,r20
   53f94:	100d883a 	mov	r6,r2
   53f98:	180f883a 	mov	r7,r3
   53f9c:	0058cd40 	call	58cd4 <__muldf3>
   53fa0:	1009883a 	mov	r4,r2
   53fa4:	180b883a 	mov	r5,r3
   53fa8:	000d883a 	mov	r6,zero
   53fac:	01d00734 	movhi	r7,16412
   53fb0:	0058c200 	call	58c20 <__adddf3>
   53fb4:	1025883a 	mov	r18,r2
   53fb8:	d8800617 	ldw	r2,24(sp)
   53fbc:	057f3034 	movhi	r21,64704
   53fc0:	1d6b883a 	add	r21,r3,r21
   53fc4:	10bfffc4 	addi	r2,r2,-1
   53fc8:	d8801315 	stw	r2,76(sp)
   53fcc:	dac00e17 	ldw	r11,56(sp)
   53fd0:	003be706 	br	52f70 <_dtoa_r+0x4bc>
   53fd4:	01000e44 	movi	r4,57
   53fd8:	91000005 	stb	r4,0(r18)
   53fdc:	95800044 	addi	r22,r18,1
   53fe0:	982b883a 	mov	r21,r19
   53fe4:	003da106 	br	5366c <_dtoa_r+0xbb8>
   53fe8:	d9801117 	ldw	r6,68(sp)
   53fec:	d9c01217 	ldw	r7,72(sp)
   53ff0:	0009883a 	mov	r4,zero
   53ff4:	014ff834 	movhi	r5,16352
   53ff8:	da801515 	stw	r10,84(sp)
   53ffc:	0058c740 	call	58c74 <__subdf3>
   54000:	da801517 	ldw	r10,84(sp)
   54004:	1009883a 	mov	r4,r2
   54008:	180b883a 	mov	r5,r3
   5400c:	a80d883a 	mov	r6,r21
   54010:	500f883a 	mov	r7,r10
   54014:	00592240 	call	59224 <__gtdf2>
   54018:	00bc750e 	bge	zero,r2,531f0 <_dtoa_r+0x73c>
   5401c:	01000c04 	movi	r4,48
   54020:	00000106 	br	54028 <_dtoa_r+0x1574>
   54024:	102d883a 	mov	r22,r2
   54028:	b0bfffc4 	addi	r2,r22,-1
   5402c:	10c00007 	ldb	r3,0(r2)
   54030:	193ffc26 	beq	r3,r4,54024 <_dtoa_r+0x1570>
   54034:	d8801317 	ldw	r2,76(sp)
   54038:	d8800615 	stw	r2,24(sp)
   5403c:	003c3e06 	br	53138 <_dtoa_r+0x684>
   54040:	d9001317 	ldw	r4,76(sp)
   54044:	df001117 	ldw	fp,68(sp)
   54048:	d9000615 	stw	r4,24(sp)
   5404c:	003ce006 	br	533d0 <_dtoa_r+0x91c>
   54050:	df001117 	ldw	fp,68(sp)
   54054:	dc401217 	ldw	r17,72(sp)
   54058:	003c6506 	br	531f0 <_dtoa_r+0x73c>
   5405c:	103e7a1e 	bne	r2,zero,53a48 <_dtoa_r+0xf94>
   54060:	1880004c 	andi	r2,r3,1
   54064:	103e7826 	beq	r2,zero,53a48 <_dtoa_r+0xf94>
   54068:	003e7406 	br	53a3c <_dtoa_r+0xf88>
   5406c:	8009883a 	mov	r4,r16
   54070:	a80b883a 	mov	r5,r21
   54074:	01800284 	movi	r6,10
   54078:	000f883a 	mov	r7,zero
   5407c:	0055f9c0 	call	55f9c <__multadd>
   54080:	d9000e17 	ldw	r4,56(sp)
   54084:	102b883a 	mov	r21,r2
   54088:	d9000915 	stw	r4,36(sp)
   5408c:	003d5106 	br	535d4 <_dtoa_r+0xb20>
   54090:	04800084 	movi	r18,2
   54094:	003b9a06 	br	52f00 <_dtoa_r+0x44c>
   54098:	d8c01317 	ldw	r3,76(sp)
   5409c:	d8c00615 	stw	r3,24(sp)
   540a0:	003ccb06 	br	533d0 <_dtoa_r+0x91c>
   540a4:	d8c01317 	ldw	r3,76(sp)
   540a8:	d8c00615 	stw	r3,24(sp)
   540ac:	003c2206 	br	53138 <_dtoa_r+0x684>
   540b0:	20fd3826 	beq	r4,r3,53594 <_dtoa_r+0xae0>
   540b4:	00c00f04 	movi	r3,60
   540b8:	1885c83a 	sub	r2,r3,r2
   540bc:	003da906 	br	53764 <_dtoa_r+0xcb0>
   540c0:	000b883a 	mov	r5,zero
   540c4:	003b5406 	br	52e18 <_dtoa_r+0x364>
   540c8:	04c00044 	movi	r19,1
   540cc:	003b3b06 	br	52dbc <_dtoa_r+0x308>

000540d0 <_fflush_r>:
   540d0:	defffb04 	addi	sp,sp,-20
   540d4:	dcc00315 	stw	r19,12(sp)
   540d8:	dc400115 	stw	r17,4(sp)
   540dc:	dfc00415 	stw	ra,16(sp)
   540e0:	dc800215 	stw	r18,8(sp)
   540e4:	dc000015 	stw	r16,0(sp)
   540e8:	2027883a 	mov	r19,r4
   540ec:	2823883a 	mov	r17,r5
   540f0:	20000226 	beq	r4,zero,540fc <_fflush_r+0x2c>
   540f4:	20800e17 	ldw	r2,56(r4)
   540f8:	10005726 	beq	r2,zero,54258 <_fflush_r+0x188>
   540fc:	8880030b 	ldhu	r2,12(r17)
   54100:	10c0020c 	andi	r3,r2,8
   54104:	18ffffcc 	andi	r3,r3,65535
   54108:	18e0001c 	xori	r3,r3,32768
   5410c:	18e00004 	addi	r3,r3,-32768
   54110:	1800311e 	bne	r3,zero,541d8 <_fflush_r+0x108>
   54114:	89000117 	ldw	r4,4(r17)
   54118:	10c20014 	ori	r3,r2,2048
   5411c:	88c0030d 	sth	r3,12(r17)
   54120:	180b883a 	mov	r5,r3
   54124:	0100520e 	bge	zero,r4,54270 <_fflush_r+0x1a0>
   54128:	88c00a17 	ldw	r3,40(r17)
   5412c:	18002226 	beq	r3,zero,541b8 <_fflush_r+0xe8>
   54130:	1084000c 	andi	r2,r2,4096
   54134:	10bfffcc 	andi	r2,r2,65535
   54138:	10a0001c 	xori	r2,r2,32768
   5413c:	10a00004 	addi	r2,r2,-32768
   54140:	10004e26 	beq	r2,zero,5427c <_fflush_r+0x1ac>
   54144:	8c001417 	ldw	r16,80(r17)
   54148:	2940010c 	andi	r5,r5,4
   5414c:	297fffcc 	andi	r5,r5,65535
   54150:	2960001c 	xori	r5,r5,32768
   54154:	29600004 	addi	r5,r5,-32768
   54158:	28000626 	beq	r5,zero,54174 <_fflush_r+0xa4>
   5415c:	89000117 	ldw	r4,4(r17)
   54160:	88800c17 	ldw	r2,48(r17)
   54164:	8121c83a 	sub	r16,r16,r4
   54168:	10000226 	beq	r2,zero,54174 <_fflush_r+0xa4>
   5416c:	88800f17 	ldw	r2,60(r17)
   54170:	80a1c83a 	sub	r16,r16,r2
   54174:	89400717 	ldw	r5,28(r17)
   54178:	9809883a 	mov	r4,r19
   5417c:	800d883a 	mov	r6,r16
   54180:	000f883a 	mov	r7,zero
   54184:	183ee83a 	callr	r3
   54188:	8080281e 	bne	r16,r2,5422c <_fflush_r+0x15c>
   5418c:	8880030b 	ldhu	r2,12(r17)
   54190:	88c00417 	ldw	r3,16(r17)
   54194:	88000115 	stw	zero,4(r17)
   54198:	113dffcc 	andi	r4,r2,63487
   5419c:	1084000c 	andi	r2,r2,4096
   541a0:	10bfffcc 	andi	r2,r2,65535
   541a4:	10a0001c 	xori	r2,r2,32768
   541a8:	8900030d 	sth	r4,12(r17)
   541ac:	88c00015 	stw	r3,0(r17)
   541b0:	10a00004 	addi	r2,r2,-32768
   541b4:	10002c1e 	bne	r2,zero,54268 <_fflush_r+0x198>
   541b8:	0005883a 	mov	r2,zero
   541bc:	dfc00417 	ldw	ra,16(sp)
   541c0:	dcc00317 	ldw	r19,12(sp)
   541c4:	dc800217 	ldw	r18,8(sp)
   541c8:	dc400117 	ldw	r17,4(sp)
   541cc:	dc000017 	ldw	r16,0(sp)
   541d0:	dec00504 	addi	sp,sp,20
   541d4:	f800283a 	ret
   541d8:	8c800417 	ldw	r18,16(r17)
   541dc:	903ff626 	beq	r18,zero,541b8 <_fflush_r+0xe8>
   541e0:	8c000017 	ldw	r16,0(r17)
   541e4:	108000cc 	andi	r2,r2,3
   541e8:	8c800015 	stw	r18,0(r17)
   541ec:	84a1c83a 	sub	r16,r16,r18
   541f0:	10001b1e 	bne	r2,zero,54260 <_fflush_r+0x190>
   541f4:	88800517 	ldw	r2,20(r17)
   541f8:	88800215 	stw	r2,8(r17)
   541fc:	04000316 	blt	zero,r16,5420c <_fflush_r+0x13c>
   54200:	003fed06 	br	541b8 <_fflush_r+0xe8>
   54204:	90a5883a 	add	r18,r18,r2
   54208:	043feb0e 	bge	zero,r16,541b8 <_fflush_r+0xe8>
   5420c:	88800917 	ldw	r2,36(r17)
   54210:	89400717 	ldw	r5,28(r17)
   54214:	800f883a 	mov	r7,r16
   54218:	900d883a 	mov	r6,r18
   5421c:	9809883a 	mov	r4,r19
   54220:	103ee83a 	callr	r2
   54224:	80a1c83a 	sub	r16,r16,r2
   54228:	00bff616 	blt	zero,r2,54204 <_fflush_r+0x134>
   5422c:	88c0030b 	ldhu	r3,12(r17)
   54230:	00bfffc4 	movi	r2,-1
   54234:	18c01014 	ori	r3,r3,64
   54238:	88c0030d 	sth	r3,12(r17)
   5423c:	dfc00417 	ldw	ra,16(sp)
   54240:	dcc00317 	ldw	r19,12(sp)
   54244:	dc800217 	ldw	r18,8(sp)
   54248:	dc400117 	ldw	r17,4(sp)
   5424c:	dc000017 	ldw	r16,0(sp)
   54250:	dec00504 	addi	sp,sp,20
   54254:	f800283a 	ret
   54258:	005438c0 	call	5438c <__sinit>
   5425c:	003fa706 	br	540fc <_fflush_r+0x2c>
   54260:	0005883a 	mov	r2,zero
   54264:	003fe406 	br	541f8 <_fflush_r+0x128>
   54268:	8c001415 	stw	r16,80(r17)
   5426c:	003fd206 	br	541b8 <_fflush_r+0xe8>
   54270:	88c00f17 	ldw	r3,60(r17)
   54274:	00ffac16 	blt	zero,r3,54128 <_fflush_r+0x58>
   54278:	003fcf06 	br	541b8 <_fflush_r+0xe8>
   5427c:	89400717 	ldw	r5,28(r17)
   54280:	9809883a 	mov	r4,r19
   54284:	000d883a 	mov	r6,zero
   54288:	01c00044 	movi	r7,1
   5428c:	183ee83a 	callr	r3
   54290:	1021883a 	mov	r16,r2
   54294:	00bfffc4 	movi	r2,-1
   54298:	80800326 	beq	r16,r2,542a8 <_fflush_r+0x1d8>
   5429c:	8940030b 	ldhu	r5,12(r17)
   542a0:	88c00a17 	ldw	r3,40(r17)
   542a4:	003fa806 	br	54148 <_fflush_r+0x78>
   542a8:	98c00017 	ldw	r3,0(r19)
   542ac:	00800744 	movi	r2,29
   542b0:	18bfde1e 	bne	r3,r2,5422c <_fflush_r+0x15c>
   542b4:	003fc006 	br	541b8 <_fflush_r+0xe8>

000542b8 <fflush>:
   542b8:	200b883a 	mov	r5,r4
   542bc:	20000426 	beq	r4,zero,542d0 <fflush+0x18>
   542c0:	00800074 	movhi	r2,1
   542c4:	10876804 	addi	r2,r2,7584
   542c8:	11000017 	ldw	r4,0(r2)
   542cc:	00540d01 	jmpi	540d0 <_fflush_r>
   542d0:	00800074 	movhi	r2,1
   542d4:	10876704 	addi	r2,r2,7580
   542d8:	11000017 	ldw	r4,0(r2)
   542dc:	01400174 	movhi	r5,5
   542e0:	29503404 	addi	r5,r5,16592
   542e4:	0054f6c1 	jmpi	54f6c <_fwalk_reent>

000542e8 <__fp_lock>:
   542e8:	0005883a 	mov	r2,zero
   542ec:	f800283a 	ret

000542f0 <__fp_unlock>:
   542f0:	0005883a 	mov	r2,zero
   542f4:	f800283a 	ret

000542f8 <_cleanup_r>:
   542f8:	01400174 	movhi	r5,5
   542fc:	295ea704 	addi	r5,r5,31388
   54300:	0054ec41 	jmpi	54ec4 <_fwalk>

00054304 <__sfmoreglue>:
   54304:	defffc04 	addi	sp,sp,-16
   54308:	dc800215 	stw	r18,8(sp)
   5430c:	2825883a 	mov	r18,r5
   54310:	dc000015 	stw	r16,0(sp)
   54314:	01401704 	movi	r5,92
   54318:	2021883a 	mov	r16,r4
   5431c:	9009883a 	mov	r4,r18
   54320:	dfc00315 	stw	ra,12(sp)
   54324:	dc400115 	stw	r17,4(sp)
   54328:	005960c0 	call	5960c <__mulsi3>
   5432c:	8009883a 	mov	r4,r16
   54330:	11400304 	addi	r5,r2,12
   54334:	1023883a 	mov	r17,r2
   54338:	00552a80 	call	552a8 <_malloc_r>
   5433c:	1021883a 	mov	r16,r2
   54340:	10000726 	beq	r2,zero,54360 <__sfmoreglue+0x5c>
   54344:	11000304 	addi	r4,r2,12
   54348:	10000015 	stw	zero,0(r2)
   5434c:	14800115 	stw	r18,4(r2)
   54350:	11000215 	stw	r4,8(r2)
   54354:	000b883a 	mov	r5,zero
   54358:	880d883a 	mov	r6,r17
   5435c:	0055df00 	call	55df0 <memset>
   54360:	8005883a 	mov	r2,r16
   54364:	dfc00317 	ldw	ra,12(sp)
   54368:	dc800217 	ldw	r18,8(sp)
   5436c:	dc400117 	ldw	r17,4(sp)
   54370:	dc000017 	ldw	r16,0(sp)
   54374:	dec00404 	addi	sp,sp,16
   54378:	f800283a 	ret

0005437c <_cleanup>:
   5437c:	00800074 	movhi	r2,1
   54380:	10876704 	addi	r2,r2,7580
   54384:	11000017 	ldw	r4,0(r2)
   54388:	00542f81 	jmpi	542f8 <_cleanup_r>

0005438c <__sinit>:
   5438c:	20800e17 	ldw	r2,56(r4)
   54390:	1000401e 	bne	r2,zero,54494 <__sinit+0x108>
   54394:	21400117 	ldw	r5,4(r4)
   54398:	01800174 	movhi	r6,5
   5439c:	3190be04 	addi	r6,r6,17144
   543a0:	20c00217 	ldw	r3,8(r4)
   543a4:	21800f15 	stw	r6,60(r4)
   543a8:	2080bb04 	addi	r2,r4,748
   543ac:	02400044 	movi	r9,1
   543b0:	018000c4 	movi	r6,3
   543b4:	2180b915 	stw	r6,740(r4)
   543b8:	2080ba15 	stw	r2,744(r4)
   543bc:	22400e15 	stw	r9,56(r4)
   543c0:	20800317 	ldw	r2,12(r4)
   543c4:	2000b815 	stw	zero,736(r4)
   543c8:	02000174 	movhi	r8,5
   543cc:	421d7804 	addi	r8,r8,30176
   543d0:	01c00174 	movhi	r7,5
   543d4:	39dd8d04 	addi	r7,r7,30260
   543d8:	01800174 	movhi	r6,5
   543dc:	319daf04 	addi	r6,r6,30396
   543e0:	01000174 	movhi	r4,5
   543e4:	211dc604 	addi	r4,r4,30488
   543e8:	02800104 	movi	r10,4
   543ec:	28000015 	stw	zero,0(r5)
   543f0:	28000115 	stw	zero,4(r5)
   543f4:	28000215 	stw	zero,8(r5)
   543f8:	2a80030d 	sth	r10,12(r5)
   543fc:	2800038d 	sth	zero,14(r5)
   54400:	28000415 	stw	zero,16(r5)
   54404:	28000515 	stw	zero,20(r5)
   54408:	28000615 	stw	zero,24(r5)
   5440c:	29400715 	stw	r5,28(r5)
   54410:	2a000815 	stw	r8,32(r5)
   54414:	29c00915 	stw	r7,36(r5)
   54418:	29800a15 	stw	r6,40(r5)
   5441c:	29000b15 	stw	r4,44(r5)
   54420:	01400284 	movi	r5,10
   54424:	18000015 	stw	zero,0(r3)
   54428:	18000115 	stw	zero,4(r3)
   5442c:	18000215 	stw	zero,8(r3)
   54430:	1940030d 	sth	r5,12(r3)
   54434:	1a40038d 	sth	r9,14(r3)
   54438:	18000415 	stw	zero,16(r3)
   5443c:	18000515 	stw	zero,20(r3)
   54440:	18000615 	stw	zero,24(r3)
   54444:	18c00715 	stw	r3,28(r3)
   54448:	1a000815 	stw	r8,32(r3)
   5444c:	19c00915 	stw	r7,36(r3)
   54450:	19800a15 	stw	r6,40(r3)
   54454:	19000b15 	stw	r4,44(r3)
   54458:	00c00484 	movi	r3,18
   5445c:	10c0030d 	sth	r3,12(r2)
   54460:	00c00084 	movi	r3,2
   54464:	10000015 	stw	zero,0(r2)
   54468:	10000115 	stw	zero,4(r2)
   5446c:	10000215 	stw	zero,8(r2)
   54470:	10c0038d 	sth	r3,14(r2)
   54474:	10000415 	stw	zero,16(r2)
   54478:	10000515 	stw	zero,20(r2)
   5447c:	10000615 	stw	zero,24(r2)
   54480:	10800715 	stw	r2,28(r2)
   54484:	12000815 	stw	r8,32(r2)
   54488:	11c00915 	stw	r7,36(r2)
   5448c:	11800a15 	stw	r6,40(r2)
   54490:	11000b15 	stw	r4,44(r2)
   54494:	f800283a 	ret

00054498 <__sfp>:
   54498:	defffc04 	addi	sp,sp,-16
   5449c:	00800074 	movhi	r2,1
   544a0:	10876704 	addi	r2,r2,7580
   544a4:	dc400115 	stw	r17,4(sp)
   544a8:	14400017 	ldw	r17,0(r2)
   544ac:	dc800215 	stw	r18,8(sp)
   544b0:	dfc00315 	stw	ra,12(sp)
   544b4:	88800e17 	ldw	r2,56(r17)
   544b8:	dc000015 	stw	r16,0(sp)
   544bc:	2025883a 	mov	r18,r4
   544c0:	10002826 	beq	r2,zero,54564 <__sfp+0xcc>
   544c4:	8c40b804 	addi	r17,r17,736
   544c8:	043fffc4 	movi	r16,-1
   544cc:	89400117 	ldw	r5,4(r17)
   544d0:	88800217 	ldw	r2,8(r17)
   544d4:	297fffc4 	addi	r5,r5,-1
   544d8:	28000a16 	blt	r5,zero,54504 <__sfp+0x6c>
   544dc:	10c0030f 	ldh	r3,12(r2)
   544e0:	18000c26 	beq	r3,zero,54514 <__sfp+0x7c>
   544e4:	10c01a04 	addi	r3,r2,104
   544e8:	00000206 	br	544f4 <__sfp+0x5c>
   544ec:	19bfe90f 	ldh	r6,-92(r3)
   544f0:	30000826 	beq	r6,zero,54514 <__sfp+0x7c>
   544f4:	297fffc4 	addi	r5,r5,-1
   544f8:	18bffd04 	addi	r2,r3,-12
   544fc:	18c01704 	addi	r3,r3,92
   54500:	2c3ffa1e 	bne	r5,r16,544ec <__sfp+0x54>
   54504:	88800017 	ldw	r2,0(r17)
   54508:	10001926 	beq	r2,zero,54570 <__sfp+0xd8>
   5450c:	1023883a 	mov	r17,r2
   54510:	003fee06 	br	544cc <__sfp+0x34>
   54514:	00ffffc4 	movi	r3,-1
   54518:	10c0038d 	sth	r3,14(r2)
   5451c:	00c00044 	movi	r3,1
   54520:	10c0030d 	sth	r3,12(r2)
   54524:	10000015 	stw	zero,0(r2)
   54528:	10000215 	stw	zero,8(r2)
   5452c:	10000115 	stw	zero,4(r2)
   54530:	10000415 	stw	zero,16(r2)
   54534:	10000515 	stw	zero,20(r2)
   54538:	10000615 	stw	zero,24(r2)
   5453c:	10000c15 	stw	zero,48(r2)
   54540:	10000d15 	stw	zero,52(r2)
   54544:	10001115 	stw	zero,68(r2)
   54548:	10001215 	stw	zero,72(r2)
   5454c:	dfc00317 	ldw	ra,12(sp)
   54550:	dc800217 	ldw	r18,8(sp)
   54554:	dc400117 	ldw	r17,4(sp)
   54558:	dc000017 	ldw	r16,0(sp)
   5455c:	dec00404 	addi	sp,sp,16
   54560:	f800283a 	ret
   54564:	8809883a 	mov	r4,r17
   54568:	005438c0 	call	5438c <__sinit>
   5456c:	003fd506 	br	544c4 <__sfp+0x2c>
   54570:	9009883a 	mov	r4,r18
   54574:	01400104 	movi	r5,4
   54578:	00543040 	call	54304 <__sfmoreglue>
   5457c:	88800015 	stw	r2,0(r17)
   54580:	103fe21e 	bne	r2,zero,5450c <__sfp+0x74>
   54584:	00800304 	movi	r2,12
   54588:	90800015 	stw	r2,0(r18)
   5458c:	0005883a 	mov	r2,zero
   54590:	003fee06 	br	5454c <__sfp+0xb4>

00054594 <__sfp_lock_acquire>:
   54594:	f800283a 	ret

00054598 <__sfp_lock_release>:
   54598:	f800283a 	ret

0005459c <__sinit_lock_acquire>:
   5459c:	f800283a 	ret

000545a0 <__sinit_lock_release>:
   545a0:	f800283a 	ret

000545a4 <__fp_lock_all>:
   545a4:	00800074 	movhi	r2,1
   545a8:	10876804 	addi	r2,r2,7584
   545ac:	11000017 	ldw	r4,0(r2)
   545b0:	01400174 	movhi	r5,5
   545b4:	2950ba04 	addi	r5,r5,17128
   545b8:	0054ec41 	jmpi	54ec4 <_fwalk>

000545bc <__fp_unlock_all>:
   545bc:	00800074 	movhi	r2,1
   545c0:	10876804 	addi	r2,r2,7584
   545c4:	11000017 	ldw	r4,0(r2)
   545c8:	01400174 	movhi	r5,5
   545cc:	2950bc04 	addi	r5,r5,17136
   545d0:	0054ec41 	jmpi	54ec4 <_fwalk>

000545d4 <_malloc_trim_r>:
   545d4:	defffb04 	addi	sp,sp,-20
   545d8:	dcc00315 	stw	r19,12(sp)
   545dc:	dc800215 	stw	r18,8(sp)
   545e0:	dc400115 	stw	r17,4(sp)
   545e4:	dc000015 	stw	r16,0(sp)
   545e8:	2827883a 	mov	r19,r5
   545ec:	dfc00415 	stw	ra,16(sp)
   545f0:	04400074 	movhi	r17,1
   545f4:	8c41e304 	addi	r17,r17,1932
   545f8:	2021883a 	mov	r16,r4
   545fc:	005a2340 	call	5a234 <__malloc_lock>
   54600:	88800217 	ldw	r2,8(r17)
   54604:	14800117 	ldw	r18,4(r2)
   54608:	00bfff04 	movi	r2,-4
   5460c:	90a4703a 	and	r18,r18,r2
   54610:	9083fbc4 	addi	r2,r18,4079
   54614:	14e7c83a 	sub	r19,r2,r19
   54618:	9826d33a 	srli	r19,r19,12
   5461c:	0083ffc4 	movi	r2,4095
   54620:	9cffffc4 	addi	r19,r19,-1
   54624:	9826933a 	slli	r19,r19,12
   54628:	14c0060e 	bge	r2,r19,54644 <_malloc_trim_r+0x70>
   5462c:	8009883a 	mov	r4,r16
   54630:	000b883a 	mov	r5,zero
   54634:	005757c0 	call	5757c <_sbrk_r>
   54638:	88c00217 	ldw	r3,8(r17)
   5463c:	1c87883a 	add	r3,r3,r18
   54640:	10c00a26 	beq	r2,r3,5466c <_malloc_trim_r+0x98>
   54644:	8009883a 	mov	r4,r16
   54648:	005a2540 	call	5a254 <__malloc_unlock>
   5464c:	0005883a 	mov	r2,zero
   54650:	dfc00417 	ldw	ra,16(sp)
   54654:	dcc00317 	ldw	r19,12(sp)
   54658:	dc800217 	ldw	r18,8(sp)
   5465c:	dc400117 	ldw	r17,4(sp)
   54660:	dc000017 	ldw	r16,0(sp)
   54664:	dec00504 	addi	sp,sp,20
   54668:	f800283a 	ret
   5466c:	8009883a 	mov	r4,r16
   54670:	04cbc83a 	sub	r5,zero,r19
   54674:	005757c0 	call	5757c <_sbrk_r>
   54678:	00ffffc4 	movi	r3,-1
   5467c:	10c01326 	beq	r2,r3,546cc <_malloc_trim_r+0xf8>
   54680:	00800074 	movhi	r2,1
   54684:	10878804 	addi	r2,r2,7712
   54688:	11000017 	ldw	r4,0(r2)
   5468c:	88c00217 	ldw	r3,8(r17)
   54690:	94e5c83a 	sub	r18,r18,r19
   54694:	94800054 	ori	r18,r18,1
   54698:	24e7c83a 	sub	r19,r4,r19
   5469c:	1c800115 	stw	r18,4(r3)
   546a0:	8009883a 	mov	r4,r16
   546a4:	14c00015 	stw	r19,0(r2)
   546a8:	005a2540 	call	5a254 <__malloc_unlock>
   546ac:	00800044 	movi	r2,1
   546b0:	dfc00417 	ldw	ra,16(sp)
   546b4:	dcc00317 	ldw	r19,12(sp)
   546b8:	dc800217 	ldw	r18,8(sp)
   546bc:	dc400117 	ldw	r17,4(sp)
   546c0:	dc000017 	ldw	r16,0(sp)
   546c4:	dec00504 	addi	sp,sp,20
   546c8:	f800283a 	ret
   546cc:	8009883a 	mov	r4,r16
   546d0:	000b883a 	mov	r5,zero
   546d4:	005757c0 	call	5757c <_sbrk_r>
   546d8:	88c00217 	ldw	r3,8(r17)
   546dc:	014003c4 	movi	r5,15
   546e0:	10c9c83a 	sub	r4,r2,r3
   546e4:	293fd70e 	bge	r5,r4,54644 <_malloc_trim_r+0x70>
   546e8:	01400074 	movhi	r5,1
   546ec:	29476a04 	addi	r5,r5,7592
   546f0:	29400017 	ldw	r5,0(r5)
   546f4:	21000054 	ori	r4,r4,1
   546f8:	19000115 	stw	r4,4(r3)
   546fc:	1145c83a 	sub	r2,r2,r5
   54700:	01400074 	movhi	r5,1
   54704:	29478804 	addi	r5,r5,7712
   54708:	28800015 	stw	r2,0(r5)
   5470c:	003fcd06 	br	54644 <_malloc_trim_r+0x70>

00054710 <_free_r>:
   54710:	defffd04 	addi	sp,sp,-12
   54714:	dc400115 	stw	r17,4(sp)
   54718:	dc000015 	stw	r16,0(sp)
   5471c:	dfc00215 	stw	ra,8(sp)
   54720:	2821883a 	mov	r16,r5
   54724:	2023883a 	mov	r17,r4
   54728:	28004b26 	beq	r5,zero,54858 <_free_r+0x148>
   5472c:	005a2340 	call	5a234 <__malloc_lock>
   54730:	823fff17 	ldw	r8,-4(r16)
   54734:	00bfff84 	movi	r2,-2
   54738:	81bffe04 	addi	r6,r16,-8
   5473c:	4084703a 	and	r2,r8,r2
   54740:	3087883a 	add	r3,r6,r2
   54744:	01400074 	movhi	r5,1
   54748:	2941e304 	addi	r5,r5,1932
   5474c:	1a400117 	ldw	r9,4(r3)
   54750:	29000217 	ldw	r4,8(r5)
   54754:	01ffff04 	movi	r7,-4
   54758:	49ce703a 	and	r7,r9,r7
   5475c:	20c06526 	beq	r4,r3,548f4 <_free_r+0x1e4>
   54760:	19c00115 	stw	r7,4(r3)
   54764:	4200004c 	andi	r8,r8,1
   54768:	40003026 	beq	r8,zero,5482c <_free_r+0x11c>
   5476c:	0009883a 	mov	r4,zero
   54770:	19d1883a 	add	r8,r3,r7
   54774:	42000117 	ldw	r8,4(r8)
   54778:	4200004c 	andi	r8,r8,1
   5477c:	4000061e 	bne	r8,zero,54798 <_free_r+0x88>
   54780:	11c5883a 	add	r2,r2,r7
   54784:	19c00217 	ldw	r7,8(r3)
   54788:	20004e26 	beq	r4,zero,548c4 <_free_r+0x1b4>
   5478c:	18c00317 	ldw	r3,12(r3)
   54790:	38c00315 	stw	r3,12(r7)
   54794:	19c00215 	stw	r7,8(r3)
   54798:	11c00054 	ori	r7,r2,1
   5479c:	3087883a 	add	r3,r6,r2
   547a0:	31c00115 	stw	r7,4(r6)
   547a4:	18800015 	stw	r2,0(r3)
   547a8:	20001a1e 	bne	r4,zero,54814 <_free_r+0x104>
   547ac:	00c07fc4 	movi	r3,511
   547b0:	18802e2e 	bgeu	r3,r2,5486c <_free_r+0x15c>
   547b4:	1006d27a 	srli	r3,r2,9
   547b8:	01000104 	movi	r4,4
   547bc:	20c06636 	bltu	r4,r3,54958 <_free_r+0x248>
   547c0:	1008d1ba 	srli	r4,r2,6
   547c4:	21000e04 	addi	r4,r4,56
   547c8:	210f883a 	add	r7,r4,r4
   547cc:	39cf883a 	add	r7,r7,r7
   547d0:	39cf883a 	add	r7,r7,r7
   547d4:	29cf883a 	add	r7,r5,r7
   547d8:	38c00217 	ldw	r3,8(r7)
   547dc:	01400074 	movhi	r5,1
   547e0:	2941e304 	addi	r5,r5,1932
   547e4:	19c06126 	beq	r3,r7,5496c <_free_r+0x25c>
   547e8:	013fff04 	movi	r4,-4
   547ec:	19400117 	ldw	r5,4(r3)
   547f0:	290a703a 	and	r5,r5,r4
   547f4:	1140022e 	bgeu	r2,r5,54800 <_free_r+0xf0>
   547f8:	18c00217 	ldw	r3,8(r3)
   547fc:	38fffb1e 	bne	r7,r3,547ec <_free_r+0xdc>
   54800:	18800317 	ldw	r2,12(r3)
   54804:	30800315 	stw	r2,12(r6)
   54808:	30c00215 	stw	r3,8(r6)
   5480c:	11800215 	stw	r6,8(r2)
   54810:	19800315 	stw	r6,12(r3)
   54814:	8809883a 	mov	r4,r17
   54818:	dfc00217 	ldw	ra,8(sp)
   5481c:	dc400117 	ldw	r17,4(sp)
   54820:	dc000017 	ldw	r16,0(sp)
   54824:	dec00304 	addi	sp,sp,12
   54828:	005a2541 	jmpi	5a254 <__malloc_unlock>
   5482c:	813ffe17 	ldw	r4,-8(r16)
   54830:	2a400204 	addi	r9,r5,8
   54834:	310dc83a 	sub	r6,r6,r4
   54838:	32000217 	ldw	r8,8(r6)
   5483c:	1105883a 	add	r2,r2,r4
   54840:	42404326 	beq	r8,r9,54950 <_free_r+0x240>
   54844:	32400317 	ldw	r9,12(r6)
   54848:	0009883a 	mov	r4,zero
   5484c:	42400315 	stw	r9,12(r8)
   54850:	4a000215 	stw	r8,8(r9)
   54854:	003fc606 	br	54770 <_free_r+0x60>
   54858:	dfc00217 	ldw	ra,8(sp)
   5485c:	dc400117 	ldw	r17,4(sp)
   54860:	dc000017 	ldw	r16,0(sp)
   54864:	dec00304 	addi	sp,sp,12
   54868:	f800283a 	ret
   5486c:	1004d0fa 	srli	r2,r2,3
   54870:	02000044 	movi	r8,1
   54874:	29c00117 	ldw	r7,4(r5)
   54878:	1087883a 	add	r3,r2,r2
   5487c:	18c7883a 	add	r3,r3,r3
   54880:	1005d0ba 	srai	r2,r2,2
   54884:	18c7883a 	add	r3,r3,r3
   54888:	28c7883a 	add	r3,r5,r3
   5488c:	19000217 	ldw	r4,8(r3)
   54890:	4084983a 	sll	r2,r8,r2
   54894:	30c00315 	stw	r3,12(r6)
   54898:	31000215 	stw	r4,8(r6)
   5489c:	11c4b03a 	or	r2,r2,r7
   548a0:	21800315 	stw	r6,12(r4)
   548a4:	8809883a 	mov	r4,r17
   548a8:	28800115 	stw	r2,4(r5)
   548ac:	19800215 	stw	r6,8(r3)
   548b0:	dfc00217 	ldw	ra,8(sp)
   548b4:	dc400117 	ldw	r17,4(sp)
   548b8:	dc000017 	ldw	r16,0(sp)
   548bc:	dec00304 	addi	sp,sp,12
   548c0:	005a2541 	jmpi	5a254 <__malloc_unlock>
   548c4:	02000074 	movhi	r8,1
   548c8:	4201e504 	addi	r8,r8,1940
   548cc:	3a3faf1e 	bne	r7,r8,5478c <_free_r+0x7c>
   548d0:	29800515 	stw	r6,20(r5)
   548d4:	29800415 	stw	r6,16(r5)
   548d8:	11000054 	ori	r4,r2,1
   548dc:	3087883a 	add	r3,r6,r2
   548e0:	31c00315 	stw	r7,12(r6)
   548e4:	31c00215 	stw	r7,8(r6)
   548e8:	31000115 	stw	r4,4(r6)
   548ec:	18800015 	stw	r2,0(r3)
   548f0:	003fc806 	br	54814 <_free_r+0x104>
   548f4:	4200004c 	andi	r8,r8,1
   548f8:	3885883a 	add	r2,r7,r2
   548fc:	4000071e 	bne	r8,zero,5491c <_free_r+0x20c>
   54900:	81fffe17 	ldw	r7,-8(r16)
   54904:	31cdc83a 	sub	r6,r6,r7
   54908:	30c00317 	ldw	r3,12(r6)
   5490c:	31000217 	ldw	r4,8(r6)
   54910:	11c5883a 	add	r2,r2,r7
   54914:	20c00315 	stw	r3,12(r4)
   54918:	19000215 	stw	r4,8(r3)
   5491c:	00c00074 	movhi	r3,1
   54920:	18c76b04 	addi	r3,r3,7596
   54924:	18c00017 	ldw	r3,0(r3)
   54928:	11000054 	ori	r4,r2,1
   5492c:	31000115 	stw	r4,4(r6)
   54930:	29800215 	stw	r6,8(r5)
   54934:	10ffb736 	bltu	r2,r3,54814 <_free_r+0x104>
   54938:	00800074 	movhi	r2,1
   5493c:	10878004 	addi	r2,r2,7680
   54940:	11400017 	ldw	r5,0(r2)
   54944:	8809883a 	mov	r4,r17
   54948:	00545d40 	call	545d4 <_malloc_trim_r>
   5494c:	003fb106 	br	54814 <_free_r+0x104>
   54950:	01000044 	movi	r4,1
   54954:	003f8606 	br	54770 <_free_r+0x60>
   54958:	01000504 	movi	r4,20
   5495c:	20c00b36 	bltu	r4,r3,5498c <_free_r+0x27c>
   54960:	190016c4 	addi	r4,r3,91
   54964:	210f883a 	add	r7,r4,r4
   54968:	003f9806 	br	547cc <_free_r+0xbc>
   5496c:	2009d0ba 	srai	r4,r4,2
   54970:	00800044 	movi	r2,1
   54974:	29c00117 	ldw	r7,4(r5)
   54978:	1108983a 	sll	r4,r2,r4
   5497c:	1805883a 	mov	r2,r3
   54980:	21c8b03a 	or	r4,r4,r7
   54984:	29000115 	stw	r4,4(r5)
   54988:	003f9e06 	br	54804 <_free_r+0xf4>
   5498c:	01001504 	movi	r4,84
   54990:	20c00436 	bltu	r4,r3,549a4 <_free_r+0x294>
   54994:	1008d33a 	srli	r4,r2,12
   54998:	21001b84 	addi	r4,r4,110
   5499c:	210f883a 	add	r7,r4,r4
   549a0:	003f8a06 	br	547cc <_free_r+0xbc>
   549a4:	01005504 	movi	r4,340
   549a8:	20c00436 	bltu	r4,r3,549bc <_free_r+0x2ac>
   549ac:	1008d3fa 	srli	r4,r2,15
   549b0:	21001dc4 	addi	r4,r4,119
   549b4:	210f883a 	add	r7,r4,r4
   549b8:	003f8406 	br	547cc <_free_r+0xbc>
   549bc:	01015504 	movi	r4,1364
   549c0:	20c00436 	bltu	r4,r3,549d4 <_free_r+0x2c4>
   549c4:	1008d4ba 	srli	r4,r2,18
   549c8:	21001f04 	addi	r4,r4,124
   549cc:	210f883a 	add	r7,r4,r4
   549d0:	003f7e06 	br	547cc <_free_r+0xbc>
   549d4:	01c03f04 	movi	r7,252
   549d8:	01001f84 	movi	r4,126
   549dc:	003f7b06 	br	547cc <_free_r+0xbc>

000549e0 <__sfvwrite_r>:
   549e0:	30800217 	ldw	r2,8(r6)
   549e4:	defff504 	addi	sp,sp,-44
   549e8:	dd400615 	stw	r21,24(sp)
   549ec:	dd000515 	stw	r20,20(sp)
   549f0:	dc000115 	stw	r16,4(sp)
   549f4:	dfc00a15 	stw	ra,40(sp)
   549f8:	df000915 	stw	fp,36(sp)
   549fc:	ddc00815 	stw	r23,32(sp)
   54a00:	dd800715 	stw	r22,28(sp)
   54a04:	dcc00415 	stw	r19,16(sp)
   54a08:	dc800315 	stw	r18,12(sp)
   54a0c:	dc400215 	stw	r17,8(sp)
   54a10:	3029883a 	mov	r20,r6
   54a14:	202b883a 	mov	r21,r4
   54a18:	2821883a 	mov	r16,r5
   54a1c:	10002126 	beq	r2,zero,54aa4 <__sfvwrite_r+0xc4>
   54a20:	2880030b 	ldhu	r2,12(r5)
   54a24:	10c0020c 	andi	r3,r2,8
   54a28:	18ffffcc 	andi	r3,r3,65535
   54a2c:	18e0001c 	xori	r3,r3,32768
   54a30:	18e00004 	addi	r3,r3,-32768
   54a34:	18002826 	beq	r3,zero,54ad8 <__sfvwrite_r+0xf8>
   54a38:	28c00417 	ldw	r3,16(r5)
   54a3c:	18002626 	beq	r3,zero,54ad8 <__sfvwrite_r+0xf8>
   54a40:	10c0008c 	andi	r3,r2,2
   54a44:	18ffffcc 	andi	r3,r3,65535
   54a48:	18e0001c 	xori	r3,r3,32768
   54a4c:	18e00004 	addi	r3,r3,-32768
   54a50:	a4400017 	ldw	r17,0(r20)
   54a54:	18002b26 	beq	r3,zero,54b04 <__sfvwrite_r+0x124>
   54a58:	0027883a 	mov	r19,zero
   54a5c:	0025883a 	mov	r18,zero
   54a60:	05810004 	movi	r22,1024
   54a64:	980d883a 	mov	r6,r19
   54a68:	a809883a 	mov	r4,r21
   54a6c:	90004f26 	beq	r18,zero,54bac <__sfvwrite_r+0x1cc>
   54a70:	900f883a 	mov	r7,r18
   54a74:	81400717 	ldw	r5,28(r16)
   54a78:	b480012e 	bgeu	r22,r18,54a80 <__sfvwrite_r+0xa0>
   54a7c:	01c10004 	movi	r7,1024
   54a80:	80800917 	ldw	r2,36(r16)
   54a84:	103ee83a 	callr	r2
   54a88:	0080540e 	bge	zero,r2,54bdc <__sfvwrite_r+0x1fc>
   54a8c:	a0c00217 	ldw	r3,8(r20)
   54a90:	98a7883a 	add	r19,r19,r2
   54a94:	90a5c83a 	sub	r18,r18,r2
   54a98:	1885c83a 	sub	r2,r3,r2
   54a9c:	a0800215 	stw	r2,8(r20)
   54aa0:	103ff01e 	bne	r2,zero,54a64 <__sfvwrite_r+0x84>
   54aa4:	0005883a 	mov	r2,zero
   54aa8:	dfc00a17 	ldw	ra,40(sp)
   54aac:	df000917 	ldw	fp,36(sp)
   54ab0:	ddc00817 	ldw	r23,32(sp)
   54ab4:	dd800717 	ldw	r22,28(sp)
   54ab8:	dd400617 	ldw	r21,24(sp)
   54abc:	dd000517 	ldw	r20,20(sp)
   54ac0:	dcc00417 	ldw	r19,16(sp)
   54ac4:	dc800317 	ldw	r18,12(sp)
   54ac8:	dc400217 	ldw	r17,8(sp)
   54acc:	dc000117 	ldw	r16,4(sp)
   54ad0:	dec00b04 	addi	sp,sp,44
   54ad4:	f800283a 	ret
   54ad8:	a809883a 	mov	r4,r21
   54adc:	800b883a 	mov	r5,r16
   54ae0:	00527040 	call	52704 <__swsetup_r>
   54ae4:	1000f01e 	bne	r2,zero,54ea8 <__sfvwrite_r+0x4c8>
   54ae8:	8080030b 	ldhu	r2,12(r16)
   54aec:	a4400017 	ldw	r17,0(r20)
   54af0:	10c0008c 	andi	r3,r2,2
   54af4:	18ffffcc 	andi	r3,r3,65535
   54af8:	18e0001c 	xori	r3,r3,32768
   54afc:	18e00004 	addi	r3,r3,-32768
   54b00:	183fd51e 	bne	r3,zero,54a58 <__sfvwrite_r+0x78>
   54b04:	10c0004c 	andi	r3,r2,1
   54b08:	002d883a 	mov	r22,zero
   54b0c:	1800381e 	bne	r3,zero,54bf0 <__sfvwrite_r+0x210>
   54b10:	0025883a 	mov	r18,zero
   54b14:	90002126 	beq	r18,zero,54b9c <__sfvwrite_r+0x1bc>
   54b18:	10c0800c 	andi	r3,r2,512
   54b1c:	18ffffcc 	andi	r3,r3,65535
   54b20:	18e0001c 	xori	r3,r3,32768
   54b24:	18e00004 	addi	r3,r3,-32768
   54b28:	84c00217 	ldw	r19,8(r16)
   54b2c:	18006b26 	beq	r3,zero,54cdc <__sfvwrite_r+0x2fc>
   54b30:	980f883a 	mov	r7,r19
   54b34:	94c08636 	bltu	r18,r19,54d50 <__sfvwrite_r+0x370>
   54b38:	10c1200c 	andi	r3,r2,1152
   54b3c:	18009f1e 	bne	r3,zero,54dbc <__sfvwrite_r+0x3dc>
   54b40:	81000017 	ldw	r4,0(r16)
   54b44:	982f883a 	mov	r23,r19
   54b48:	9039883a 	mov	fp,r18
   54b4c:	9027883a 	mov	r19,r18
   54b50:	380d883a 	mov	r6,r7
   54b54:	b00b883a 	mov	r5,r22
   54b58:	d9c00015 	stw	r7,0(sp)
   54b5c:	0055c640 	call	55c64 <memmove>
   54b60:	d9c00017 	ldw	r7,0(sp)
   54b64:	81000217 	ldw	r4,8(r16)
   54b68:	80800017 	ldw	r2,0(r16)
   54b6c:	25efc83a 	sub	r23,r4,r23
   54b70:	11cf883a 	add	r7,r2,r7
   54b74:	85c00215 	stw	r23,8(r16)
   54b78:	81c00015 	stw	r7,0(r16)
   54b7c:	a0800217 	ldw	r2,8(r20)
   54b80:	b72d883a 	add	r22,r22,fp
   54b84:	9725c83a 	sub	r18,r18,fp
   54b88:	14e7c83a 	sub	r19,r2,r19
   54b8c:	a4c00215 	stw	r19,8(r20)
   54b90:	983fc426 	beq	r19,zero,54aa4 <__sfvwrite_r+0xc4>
   54b94:	8080030b 	ldhu	r2,12(r16)
   54b98:	903fdf1e 	bne	r18,zero,54b18 <__sfvwrite_r+0x138>
   54b9c:	8d800017 	ldw	r22,0(r17)
   54ba0:	8c800117 	ldw	r18,4(r17)
   54ba4:	8c400204 	addi	r17,r17,8
   54ba8:	003fda06 	br	54b14 <__sfvwrite_r+0x134>
   54bac:	8cc00017 	ldw	r19,0(r17)
   54bb0:	8c800117 	ldw	r18,4(r17)
   54bb4:	8c400204 	addi	r17,r17,8
   54bb8:	003faa06 	br	54a64 <__sfvwrite_r+0x84>
   54bbc:	0056f1c0 	call	56f1c <_realloc_r>
   54bc0:	102f883a 	mov	r23,r2
   54bc4:	10009f1e 	bne	r2,zero,54e44 <__sfvwrite_r+0x464>
   54bc8:	81400417 	ldw	r5,16(r16)
   54bcc:	a809883a 	mov	r4,r21
   54bd0:	00547100 	call	54710 <_free_r>
   54bd4:	00800304 	movi	r2,12
   54bd8:	a8800015 	stw	r2,0(r21)
   54bdc:	80c0030b 	ldhu	r3,12(r16)
   54be0:	00bfffc4 	movi	r2,-1
   54be4:	18c01014 	ori	r3,r3,64
   54be8:	80c0030d 	sth	r3,12(r16)
   54bec:	003fae06 	br	54aa8 <__sfvwrite_r+0xc8>
   54bf0:	0007883a 	mov	r3,zero
   54bf4:	0039883a 	mov	fp,zero
   54bf8:	0025883a 	mov	r18,zero
   54bfc:	90001e26 	beq	r18,zero,54c78 <__sfvwrite_r+0x298>
   54c00:	18006526 	beq	r3,zero,54d98 <__sfvwrite_r+0x3b8>
   54c04:	b02f883a 	mov	r23,r22
   54c08:	9580012e 	bgeu	r18,r22,54c10 <__sfvwrite_r+0x230>
   54c0c:	902f883a 	mov	r23,r18
   54c10:	81000017 	ldw	r4,0(r16)
   54c14:	80800417 	ldw	r2,16(r16)
   54c18:	84c00217 	ldw	r19,8(r16)
   54c1c:	81c00517 	ldw	r7,20(r16)
   54c20:	1100022e 	bgeu	r2,r4,54c2c <__sfvwrite_r+0x24c>
   54c24:	99e7883a 	add	r19,r19,r7
   54c28:	9dc01816 	blt	r19,r23,54c8c <__sfvwrite_r+0x2ac>
   54c2c:	b9c03b16 	blt	r23,r7,54d1c <__sfvwrite_r+0x33c>
   54c30:	80800917 	ldw	r2,36(r16)
   54c34:	81400717 	ldw	r5,28(r16)
   54c38:	a809883a 	mov	r4,r21
   54c3c:	d8c00015 	stw	r3,0(sp)
   54c40:	e00d883a 	mov	r6,fp
   54c44:	103ee83a 	callr	r2
   54c48:	1027883a 	mov	r19,r2
   54c4c:	d8c00017 	ldw	r3,0(sp)
   54c50:	00bfe20e 	bge	zero,r2,54bdc <__sfvwrite_r+0x1fc>
   54c54:	b4edc83a 	sub	r22,r22,r19
   54c58:	b0001a26 	beq	r22,zero,54cc4 <__sfvwrite_r+0x2e4>
   54c5c:	a0800217 	ldw	r2,8(r20)
   54c60:	e4f9883a 	add	fp,fp,r19
   54c64:	94e5c83a 	sub	r18,r18,r19
   54c68:	14e7c83a 	sub	r19,r2,r19
   54c6c:	a4c00215 	stw	r19,8(r20)
   54c70:	983f8c26 	beq	r19,zero,54aa4 <__sfvwrite_r+0xc4>
   54c74:	903fe21e 	bne	r18,zero,54c00 <__sfvwrite_r+0x220>
   54c78:	8f000017 	ldw	fp,0(r17)
   54c7c:	8c800117 	ldw	r18,4(r17)
   54c80:	0007883a 	mov	r3,zero
   54c84:	8c400204 	addi	r17,r17,8
   54c88:	003fdc06 	br	54bfc <__sfvwrite_r+0x21c>
   54c8c:	e00b883a 	mov	r5,fp
   54c90:	980d883a 	mov	r6,r19
   54c94:	d8c00015 	stw	r3,0(sp)
   54c98:	0055c640 	call	55c64 <memmove>
   54c9c:	80800017 	ldw	r2,0(r16)
   54ca0:	a809883a 	mov	r4,r21
   54ca4:	800b883a 	mov	r5,r16
   54ca8:	14c5883a 	add	r2,r2,r19
   54cac:	80800015 	stw	r2,0(r16)
   54cb0:	00540d00 	call	540d0 <_fflush_r>
   54cb4:	d8c00017 	ldw	r3,0(sp)
   54cb8:	103fc81e 	bne	r2,zero,54bdc <__sfvwrite_r+0x1fc>
   54cbc:	b4edc83a 	sub	r22,r22,r19
   54cc0:	b03fe61e 	bne	r22,zero,54c5c <__sfvwrite_r+0x27c>
   54cc4:	a809883a 	mov	r4,r21
   54cc8:	800b883a 	mov	r5,r16
   54ccc:	00540d00 	call	540d0 <_fflush_r>
   54cd0:	103fc21e 	bne	r2,zero,54bdc <__sfvwrite_r+0x1fc>
   54cd4:	0007883a 	mov	r3,zero
   54cd8:	003fe006 	br	54c5c <__sfvwrite_r+0x27c>
   54cdc:	81000017 	ldw	r4,0(r16)
   54ce0:	80800417 	ldw	r2,16(r16)
   54ce4:	1100022e 	bgeu	r2,r4,54cf0 <__sfvwrite_r+0x310>
   54ce8:	9839883a 	mov	fp,r19
   54cec:	9c806036 	bltu	r19,r18,54e70 <__sfvwrite_r+0x490>
   54cf0:	81c00517 	ldw	r7,20(r16)
   54cf4:	91c01c36 	bltu	r18,r7,54d68 <__sfvwrite_r+0x388>
   54cf8:	80800917 	ldw	r2,36(r16)
   54cfc:	81400717 	ldw	r5,28(r16)
   54d00:	a809883a 	mov	r4,r21
   54d04:	b00d883a 	mov	r6,r22
   54d08:	103ee83a 	callr	r2
   54d0c:	1027883a 	mov	r19,r2
   54d10:	00bfb20e 	bge	zero,r2,54bdc <__sfvwrite_r+0x1fc>
   54d14:	1039883a 	mov	fp,r2
   54d18:	003f9806 	br	54b7c <__sfvwrite_r+0x19c>
   54d1c:	b80d883a 	mov	r6,r23
   54d20:	e00b883a 	mov	r5,fp
   54d24:	d8c00015 	stw	r3,0(sp)
   54d28:	0055c640 	call	55c64 <memmove>
   54d2c:	80800217 	ldw	r2,8(r16)
   54d30:	81000017 	ldw	r4,0(r16)
   54d34:	b827883a 	mov	r19,r23
   54d38:	15c5c83a 	sub	r2,r2,r23
   54d3c:	25ef883a 	add	r23,r4,r23
   54d40:	80800215 	stw	r2,8(r16)
   54d44:	85c00015 	stw	r23,0(r16)
   54d48:	d8c00017 	ldw	r3,0(sp)
   54d4c:	003fc106 	br	54c54 <__sfvwrite_r+0x274>
   54d50:	81000017 	ldw	r4,0(r16)
   54d54:	902f883a 	mov	r23,r18
   54d58:	9039883a 	mov	fp,r18
   54d5c:	9027883a 	mov	r19,r18
   54d60:	900f883a 	mov	r7,r18
   54d64:	003f7a06 	br	54b50 <__sfvwrite_r+0x170>
   54d68:	b00b883a 	mov	r5,r22
   54d6c:	900d883a 	mov	r6,r18
   54d70:	0055c640 	call	55c64 <memmove>
   54d74:	80c00217 	ldw	r3,8(r16)
   54d78:	80800017 	ldw	r2,0(r16)
   54d7c:	9027883a 	mov	r19,r18
   54d80:	1c87c83a 	sub	r3,r3,r18
   54d84:	1485883a 	add	r2,r2,r18
   54d88:	80c00215 	stw	r3,8(r16)
   54d8c:	80800015 	stw	r2,0(r16)
   54d90:	9039883a 	mov	fp,r18
   54d94:	003f7906 	br	54b7c <__sfvwrite_r+0x19c>
   54d98:	e009883a 	mov	r4,fp
   54d9c:	01400284 	movi	r5,10
   54da0:	900d883a 	mov	r6,r18
   54da4:	0055a2c0 	call	55a2c <memchr>
   54da8:	10003c26 	beq	r2,zero,54e9c <__sfvwrite_r+0x4bc>
   54dac:	15800044 	addi	r22,r2,1
   54db0:	b72dc83a 	sub	r22,r22,fp
   54db4:	00c00044 	movi	r3,1
   54db8:	003f9206 	br	54c04 <__sfvwrite_r+0x224>
   54dbc:	81000517 	ldw	r4,20(r16)
   54dc0:	81400417 	ldw	r5,16(r16)
   54dc4:	80c00017 	ldw	r3,0(r16)
   54dc8:	210d883a 	add	r6,r4,r4
   54dcc:	3109883a 	add	r4,r6,r4
   54dd0:	2026d7fa 	srli	r19,r4,31
   54dd4:	1979c83a 	sub	fp,r3,r5
   54dd8:	e1800044 	addi	r6,fp,1
   54ddc:	9909883a 	add	r4,r19,r4
   54de0:	2027d07a 	srai	r19,r4,1
   54de4:	3489883a 	add	r4,r6,r18
   54de8:	980d883a 	mov	r6,r19
   54dec:	9900022e 	bgeu	r19,r4,54df8 <__sfvwrite_r+0x418>
   54df0:	2027883a 	mov	r19,r4
   54df4:	200d883a 	mov	r6,r4
   54df8:	1081000c 	andi	r2,r2,1024
   54dfc:	10bfffcc 	andi	r2,r2,65535
   54e00:	10a0001c 	xori	r2,r2,32768
   54e04:	10a00004 	addi	r2,r2,-32768
   54e08:	a809883a 	mov	r4,r21
   54e0c:	103f6b26 	beq	r2,zero,54bbc <__sfvwrite_r+0x1dc>
   54e10:	300b883a 	mov	r5,r6
   54e14:	00552a80 	call	552a8 <_malloc_r>
   54e18:	102f883a 	mov	r23,r2
   54e1c:	103f6d26 	beq	r2,zero,54bd4 <__sfvwrite_r+0x1f4>
   54e20:	81400417 	ldw	r5,16(r16)
   54e24:	1009883a 	mov	r4,r2
   54e28:	e00d883a 	mov	r6,fp
   54e2c:	0055b240 	call	55b24 <memcpy>
   54e30:	8080030b 	ldhu	r2,12(r16)
   54e34:	00fedfc4 	movi	r3,-1153
   54e38:	10c4703a 	and	r2,r2,r3
   54e3c:	10802014 	ori	r2,r2,128
   54e40:	8080030d 	sth	r2,12(r16)
   54e44:	bf09883a 	add	r4,r23,fp
   54e48:	9f07c83a 	sub	r3,r19,fp
   54e4c:	85c00415 	stw	r23,16(r16)
   54e50:	84c00515 	stw	r19,20(r16)
   54e54:	81000015 	stw	r4,0(r16)
   54e58:	902f883a 	mov	r23,r18
   54e5c:	80c00215 	stw	r3,8(r16)
   54e60:	9039883a 	mov	fp,r18
   54e64:	9027883a 	mov	r19,r18
   54e68:	900f883a 	mov	r7,r18
   54e6c:	003f3806 	br	54b50 <__sfvwrite_r+0x170>
   54e70:	b00b883a 	mov	r5,r22
   54e74:	980d883a 	mov	r6,r19
   54e78:	0055c640 	call	55c64 <memmove>
   54e7c:	80800017 	ldw	r2,0(r16)
   54e80:	a809883a 	mov	r4,r21
   54e84:	800b883a 	mov	r5,r16
   54e88:	14c5883a 	add	r2,r2,r19
   54e8c:	80800015 	stw	r2,0(r16)
   54e90:	00540d00 	call	540d0 <_fflush_r>
   54e94:	103f3926 	beq	r2,zero,54b7c <__sfvwrite_r+0x19c>
   54e98:	003f5006 	br	54bdc <__sfvwrite_r+0x1fc>
   54e9c:	95800044 	addi	r22,r18,1
   54ea0:	00c00044 	movi	r3,1
   54ea4:	003f5706 	br	54c04 <__sfvwrite_r+0x224>
   54ea8:	80c0030b 	ldhu	r3,12(r16)
   54eac:	00bfffc4 	movi	r2,-1
   54eb0:	18c01014 	ori	r3,r3,64
   54eb4:	80c0030d 	sth	r3,12(r16)
   54eb8:	00c00244 	movi	r3,9
   54ebc:	a8c00015 	stw	r3,0(r21)
   54ec0:	003ef906 	br	54aa8 <__sfvwrite_r+0xc8>

00054ec4 <_fwalk>:
   54ec4:	defff904 	addi	sp,sp,-28
   54ec8:	dcc00315 	stw	r19,12(sp)
   54ecc:	24c0b804 	addi	r19,r4,736
   54ed0:	dd400515 	stw	r21,20(sp)
   54ed4:	dd000415 	stw	r20,16(sp)
   54ed8:	dfc00615 	stw	ra,24(sp)
   54edc:	dc800215 	stw	r18,8(sp)
   54ee0:	dc400115 	stw	r17,4(sp)
   54ee4:	dc000015 	stw	r16,0(sp)
   54ee8:	282b883a 	mov	r21,r5
   54eec:	0029883a 	mov	r20,zero
   54ef0:	00545940 	call	54594 <__sfp_lock_acquire>
   54ef4:	98001226 	beq	r19,zero,54f40 <_fwalk+0x7c>
   54ef8:	04bfffc4 	movi	r18,-1
   54efc:	9c400117 	ldw	r17,4(r19)
   54f00:	9c000217 	ldw	r16,8(r19)
   54f04:	8c7fffc4 	addi	r17,r17,-1
   54f08:	88000b16 	blt	r17,zero,54f38 <_fwalk+0x74>
   54f0c:	84000304 	addi	r16,r16,12
   54f10:	80c0000f 	ldh	r3,0(r16)
   54f14:	8c7fffc4 	addi	r17,r17,-1
   54f18:	813ffd04 	addi	r4,r16,-12
   54f1c:	18000426 	beq	r3,zero,54f30 <_fwalk+0x6c>
   54f20:	80c0008f 	ldh	r3,2(r16)
   54f24:	1c800226 	beq	r3,r18,54f30 <_fwalk+0x6c>
   54f28:	a83ee83a 	callr	r21
   54f2c:	a0a8b03a 	or	r20,r20,r2
   54f30:	84001704 	addi	r16,r16,92
   54f34:	8cbff61e 	bne	r17,r18,54f10 <_fwalk+0x4c>
   54f38:	9cc00017 	ldw	r19,0(r19)
   54f3c:	983fef1e 	bne	r19,zero,54efc <_fwalk+0x38>
   54f40:	00545980 	call	54598 <__sfp_lock_release>
   54f44:	a005883a 	mov	r2,r20
   54f48:	dfc00617 	ldw	ra,24(sp)
   54f4c:	dd400517 	ldw	r21,20(sp)
   54f50:	dd000417 	ldw	r20,16(sp)
   54f54:	dcc00317 	ldw	r19,12(sp)
   54f58:	dc800217 	ldw	r18,8(sp)
   54f5c:	dc400117 	ldw	r17,4(sp)
   54f60:	dc000017 	ldw	r16,0(sp)
   54f64:	dec00704 	addi	sp,sp,28
   54f68:	f800283a 	ret

00054f6c <_fwalk_reent>:
   54f6c:	defff804 	addi	sp,sp,-32
   54f70:	dcc00315 	stw	r19,12(sp)
   54f74:	24c0b804 	addi	r19,r4,736
   54f78:	dd800615 	stw	r22,24(sp)
   54f7c:	dd400515 	stw	r21,20(sp)
   54f80:	dd000415 	stw	r20,16(sp)
   54f84:	dfc00715 	stw	ra,28(sp)
   54f88:	dc800215 	stw	r18,8(sp)
   54f8c:	dc400115 	stw	r17,4(sp)
   54f90:	dc000015 	stw	r16,0(sp)
   54f94:	2029883a 	mov	r20,r4
   54f98:	282b883a 	mov	r21,r5
   54f9c:	002d883a 	mov	r22,zero
   54fa0:	00545940 	call	54594 <__sfp_lock_acquire>
   54fa4:	98001326 	beq	r19,zero,54ff4 <_fwalk_reent+0x88>
   54fa8:	04bfffc4 	movi	r18,-1
   54fac:	9c400117 	ldw	r17,4(r19)
   54fb0:	9c000217 	ldw	r16,8(r19)
   54fb4:	8c7fffc4 	addi	r17,r17,-1
   54fb8:	88000c16 	blt	r17,zero,54fec <_fwalk_reent+0x80>
   54fbc:	84000304 	addi	r16,r16,12
   54fc0:	80c0000f 	ldh	r3,0(r16)
   54fc4:	8c7fffc4 	addi	r17,r17,-1
   54fc8:	817ffd04 	addi	r5,r16,-12
   54fcc:	18000526 	beq	r3,zero,54fe4 <_fwalk_reent+0x78>
   54fd0:	80c0008f 	ldh	r3,2(r16)
   54fd4:	a009883a 	mov	r4,r20
   54fd8:	1c800226 	beq	r3,r18,54fe4 <_fwalk_reent+0x78>
   54fdc:	a83ee83a 	callr	r21
   54fe0:	b0acb03a 	or	r22,r22,r2
   54fe4:	84001704 	addi	r16,r16,92
   54fe8:	8cbff51e 	bne	r17,r18,54fc0 <_fwalk_reent+0x54>
   54fec:	9cc00017 	ldw	r19,0(r19)
   54ff0:	983fee1e 	bne	r19,zero,54fac <_fwalk_reent+0x40>
   54ff4:	00545980 	call	54598 <__sfp_lock_release>
   54ff8:	b005883a 	mov	r2,r22
   54ffc:	dfc00717 	ldw	ra,28(sp)
   55000:	dd800617 	ldw	r22,24(sp)
   55004:	dd400517 	ldw	r21,20(sp)
   55008:	dd000417 	ldw	r20,16(sp)
   5500c:	dcc00317 	ldw	r19,12(sp)
   55010:	dc800217 	ldw	r18,8(sp)
   55014:	dc400117 	ldw	r17,4(sp)
   55018:	dc000017 	ldw	r16,0(sp)
   5501c:	dec00804 	addi	sp,sp,32
   55020:	f800283a 	ret

00055024 <_setlocale_r>:
   55024:	defffc04 	addi	sp,sp,-16
   55028:	dc800215 	stw	r18,8(sp)
   5502c:	dc400115 	stw	r17,4(sp)
   55030:	dc000015 	stw	r16,0(sp)
   55034:	dfc00315 	stw	ra,12(sp)
   55038:	3021883a 	mov	r16,r6
   5503c:	2023883a 	mov	r17,r4
   55040:	2825883a 	mov	r18,r5
   55044:	30001626 	beq	r6,zero,550a0 <_setlocale_r+0x7c>
   55048:	3009883a 	mov	r4,r6
   5504c:	01400074 	movhi	r5,1
   55050:	29403604 	addi	r5,r5,216
   55054:	00577200 	call	57720 <strcmp>
   55058:	10000a1e 	bne	r2,zero,55084 <_setlocale_r+0x60>
   5505c:	8c800c15 	stw	r18,48(r17)
   55060:	8c000d15 	stw	r16,52(r17)
   55064:	00800074 	movhi	r2,1
   55068:	10803604 	addi	r2,r2,216
   5506c:	dfc00317 	ldw	ra,12(sp)
   55070:	dc800217 	ldw	r18,8(sp)
   55074:	dc400117 	ldw	r17,4(sp)
   55078:	dc000017 	ldw	r16,0(sp)
   5507c:	dec00404 	addi	sp,sp,16
   55080:	f800283a 	ret
   55084:	8009883a 	mov	r4,r16
   55088:	01400074 	movhi	r5,1
   5508c:	29402104 	addi	r5,r5,132
   55090:	00577200 	call	57720 <strcmp>
   55094:	103ff126 	beq	r2,zero,5505c <_setlocale_r+0x38>
   55098:	0005883a 	mov	r2,zero
   5509c:	003ff306 	br	5506c <_setlocale_r+0x48>
   550a0:	00800074 	movhi	r2,1
   550a4:	10803604 	addi	r2,r2,216
   550a8:	dfc00317 	ldw	ra,12(sp)
   550ac:	dc800217 	ldw	r18,8(sp)
   550b0:	dc400117 	ldw	r17,4(sp)
   550b4:	dc000017 	ldw	r16,0(sp)
   550b8:	dec00404 	addi	sp,sp,16
   550bc:	f800283a 	ret

000550c0 <__locale_charset>:
   550c0:	00800074 	movhi	r2,1
   550c4:	10803704 	addi	r2,r2,220
   550c8:	f800283a 	ret

000550cc <_localeconv_r>:
   550cc:	00800074 	movhi	r2,1
   550d0:	10803b04 	addi	r2,r2,236
   550d4:	f800283a 	ret

000550d8 <setlocale>:
   550d8:	00c00074 	movhi	r3,1
   550dc:	18c76804 	addi	r3,r3,7584
   550e0:	2005883a 	mov	r2,r4
   550e4:	19000017 	ldw	r4,0(r3)
   550e8:	280d883a 	mov	r6,r5
   550ec:	100b883a 	mov	r5,r2
   550f0:	00550241 	jmpi	55024 <_setlocale_r>

000550f4 <localeconv>:
   550f4:	00800074 	movhi	r2,1
   550f8:	10803b04 	addi	r2,r2,236
   550fc:	f800283a 	ret

00055100 <__smakebuf_r>:
   55100:	2880030b 	ldhu	r2,12(r5)
   55104:	deffed04 	addi	sp,sp,-76
   55108:	dc401015 	stw	r17,64(sp)
   5510c:	10c0008c 	andi	r3,r2,2
   55110:	18ffffcc 	andi	r3,r3,65535
   55114:	18e0001c 	xori	r3,r3,32768
   55118:	dc000f15 	stw	r16,60(sp)
   5511c:	dfc01215 	stw	ra,72(sp)
   55120:	dc801115 	stw	r18,68(sp)
   55124:	18e00004 	addi	r3,r3,-32768
   55128:	2821883a 	mov	r16,r5
   5512c:	2023883a 	mov	r17,r4
   55130:	1800381e 	bne	r3,zero,55214 <__smakebuf_r+0x114>
   55134:	2940038f 	ldh	r5,14(r5)
   55138:	28002d16 	blt	r5,zero,551f0 <__smakebuf_r+0xf0>
   5513c:	d80d883a 	mov	r6,sp
   55140:	0057ab00 	call	57ab0 <_fstat_r>
   55144:	10002916 	blt	r2,zero,551ec <__smakebuf_r+0xec>
   55148:	d8800117 	ldw	r2,4(sp)
   5514c:	00e00014 	movui	r3,32768
   55150:	10bc000c 	andi	r2,r2,61440
   55154:	10c03c26 	beq	r2,r3,55248 <__smakebuf_r+0x148>
   55158:	80c0030b 	ldhu	r3,12(r16)
   5515c:	18c20014 	ori	r3,r3,2048
   55160:	80c0030d 	sth	r3,12(r16)
   55164:	00c80004 	movi	r3,8192
   55168:	10c00c1e 	bne	r2,r3,5519c <__smakebuf_r+0x9c>
   5516c:	8140038f 	ldh	r5,14(r16)
   55170:	8809883a 	mov	r4,r17
   55174:	0057b180 	call	57b18 <_isatty_r>
   55178:	10000826 	beq	r2,zero,5519c <__smakebuf_r+0x9c>
   5517c:	80c0030b 	ldhu	r3,12(r16)
   55180:	808010c4 	addi	r2,r16,67
   55184:	80800015 	stw	r2,0(r16)
   55188:	18c00054 	ori	r3,r3,1
   5518c:	80800415 	stw	r2,16(r16)
   55190:	00800044 	movi	r2,1
   55194:	80c0030d 	sth	r3,12(r16)
   55198:	80800515 	stw	r2,20(r16)
   5519c:	04810004 	movi	r18,1024
   551a0:	8809883a 	mov	r4,r17
   551a4:	900b883a 	mov	r5,r18
   551a8:	00552a80 	call	552a8 <_malloc_r>
   551ac:	10003026 	beq	r2,zero,55270 <__smakebuf_r+0x170>
   551b0:	80c0030b 	ldhu	r3,12(r16)
   551b4:	01000174 	movhi	r4,5
   551b8:	2110be04 	addi	r4,r4,17144
   551bc:	89000f15 	stw	r4,60(r17)
   551c0:	18c02014 	ori	r3,r3,128
   551c4:	80c0030d 	sth	r3,12(r16)
   551c8:	80800015 	stw	r2,0(r16)
   551cc:	80800415 	stw	r2,16(r16)
   551d0:	84800515 	stw	r18,20(r16)
   551d4:	dfc01217 	ldw	ra,72(sp)
   551d8:	dc801117 	ldw	r18,68(sp)
   551dc:	dc401017 	ldw	r17,64(sp)
   551e0:	dc000f17 	ldw	r16,60(sp)
   551e4:	dec01304 	addi	sp,sp,76
   551e8:	f800283a 	ret
   551ec:	8080030b 	ldhu	r2,12(r16)
   551f0:	10c0200c 	andi	r3,r2,128
   551f4:	18ffffcc 	andi	r3,r3,65535
   551f8:	18e0001c 	xori	r3,r3,32768
   551fc:	18e00004 	addi	r3,r3,-32768
   55200:	18000f1e 	bne	r3,zero,55240 <__smakebuf_r+0x140>
   55204:	04810004 	movi	r18,1024
   55208:	10820014 	ori	r2,r2,2048
   5520c:	8080030d 	sth	r2,12(r16)
   55210:	003fe306 	br	551a0 <__smakebuf_r+0xa0>
   55214:	288010c4 	addi	r2,r5,67
   55218:	28800015 	stw	r2,0(r5)
   5521c:	28800415 	stw	r2,16(r5)
   55220:	00800044 	movi	r2,1
   55224:	28800515 	stw	r2,20(r5)
   55228:	dfc01217 	ldw	ra,72(sp)
   5522c:	dc801117 	ldw	r18,68(sp)
   55230:	dc401017 	ldw	r17,64(sp)
   55234:	dc000f17 	ldw	r16,60(sp)
   55238:	dec01304 	addi	sp,sp,76
   5523c:	f800283a 	ret
   55240:	04801004 	movi	r18,64
   55244:	003ff006 	br	55208 <__smakebuf_r+0x108>
   55248:	81000a17 	ldw	r4,40(r16)
   5524c:	00c00174 	movhi	r3,5
   55250:	18ddaf04 	addi	r3,r3,30396
   55254:	20ffc01e 	bne	r4,r3,55158 <__smakebuf_r+0x58>
   55258:	8080030b 	ldhu	r2,12(r16)
   5525c:	00c10004 	movi	r3,1024
   55260:	80c01315 	stw	r3,76(r16)
   55264:	10c4b03a 	or	r2,r2,r3
   55268:	8080030d 	sth	r2,12(r16)
   5526c:	003fcb06 	br	5519c <__smakebuf_r+0x9c>
   55270:	8080030b 	ldhu	r2,12(r16)
   55274:	10c0800c 	andi	r3,r2,512
   55278:	18ffffcc 	andi	r3,r3,65535
   5527c:	18e0001c 	xori	r3,r3,32768
   55280:	18e00004 	addi	r3,r3,-32768
   55284:	183fd31e 	bne	r3,zero,551d4 <__smakebuf_r+0xd4>
   55288:	10800094 	ori	r2,r2,2
   5528c:	80c010c4 	addi	r3,r16,67
   55290:	8080030d 	sth	r2,12(r16)
   55294:	00800044 	movi	r2,1
   55298:	80c00015 	stw	r3,0(r16)
   5529c:	80c00415 	stw	r3,16(r16)
   552a0:	80800515 	stw	r2,20(r16)
   552a4:	003fcb06 	br	551d4 <__smakebuf_r+0xd4>

000552a8 <_malloc_r>:
   552a8:	defff604 	addi	sp,sp,-40
   552ac:	dc800215 	stw	r18,8(sp)
   552b0:	dfc00915 	stw	ra,36(sp)
   552b4:	df000815 	stw	fp,32(sp)
   552b8:	ddc00715 	stw	r23,28(sp)
   552bc:	dd800615 	stw	r22,24(sp)
   552c0:	dd400515 	stw	r21,20(sp)
   552c4:	dd000415 	stw	r20,16(sp)
   552c8:	dcc00315 	stw	r19,12(sp)
   552cc:	dc400115 	stw	r17,4(sp)
   552d0:	dc000015 	stw	r16,0(sp)
   552d4:	288002c4 	addi	r2,r5,11
   552d8:	00c00584 	movi	r3,22
   552dc:	2025883a 	mov	r18,r4
   552e0:	18802b2e 	bgeu	r3,r2,55390 <_malloc_r+0xe8>
   552e4:	047ffe04 	movi	r17,-8
   552e8:	1462703a 	and	r17,r2,r17
   552ec:	88002a16 	blt	r17,zero,55398 <_malloc_r+0xf0>
   552f0:	89402936 	bltu	r17,r5,55398 <_malloc_r+0xf0>
   552f4:	9009883a 	mov	r4,r18
   552f8:	005a2340 	call	5a234 <__malloc_lock>
   552fc:	00807dc4 	movi	r2,503
   55300:	14402936 	bltu	r2,r17,553a8 <_malloc_r+0x100>
   55304:	8808d0fa 	srli	r4,r17,3
   55308:	04c00074 	movhi	r19,1
   5530c:	9cc1e304 	addi	r19,r19,1932
   55310:	2105883a 	add	r2,r4,r4
   55314:	1085883a 	add	r2,r2,r2
   55318:	1085883a 	add	r2,r2,r2
   5531c:	9885883a 	add	r2,r19,r2
   55320:	14000317 	ldw	r16,12(r2)
   55324:	80815526 	beq	r16,r2,5587c <_malloc_r+0x5d4>
   55328:	81000117 	ldw	r4,4(r16)
   5532c:	00bfff04 	movi	r2,-4
   55330:	80c00317 	ldw	r3,12(r16)
   55334:	2084703a 	and	r2,r4,r2
   55338:	8085883a 	add	r2,r16,r2
   5533c:	11800117 	ldw	r6,4(r2)
   55340:	81400217 	ldw	r5,8(r16)
   55344:	9009883a 	mov	r4,r18
   55348:	31800054 	ori	r6,r6,1
   5534c:	11800115 	stw	r6,4(r2)
   55350:	28c00315 	stw	r3,12(r5)
   55354:	19400215 	stw	r5,8(r3)
   55358:	005a2540 	call	5a254 <__malloc_unlock>
   5535c:	80800204 	addi	r2,r16,8
   55360:	dfc00917 	ldw	ra,36(sp)
   55364:	df000817 	ldw	fp,32(sp)
   55368:	ddc00717 	ldw	r23,28(sp)
   5536c:	dd800617 	ldw	r22,24(sp)
   55370:	dd400517 	ldw	r21,20(sp)
   55374:	dd000417 	ldw	r20,16(sp)
   55378:	dcc00317 	ldw	r19,12(sp)
   5537c:	dc800217 	ldw	r18,8(sp)
   55380:	dc400117 	ldw	r17,4(sp)
   55384:	dc000017 	ldw	r16,0(sp)
   55388:	dec00a04 	addi	sp,sp,40
   5538c:	f800283a 	ret
   55390:	04400404 	movi	r17,16
   55394:	897fd72e 	bgeu	r17,r5,552f4 <_malloc_r+0x4c>
   55398:	00800304 	movi	r2,12
   5539c:	90800015 	stw	r2,0(r18)
   553a0:	0005883a 	mov	r2,zero
   553a4:	003fee06 	br	55360 <_malloc_r+0xb8>
   553a8:	8808d27a 	srli	r4,r17,9
   553ac:	20007126 	beq	r4,zero,55574 <_malloc_r+0x2cc>
   553b0:	00800104 	movi	r2,4
   553b4:	1100eb36 	bltu	r2,r4,55764 <_malloc_r+0x4bc>
   553b8:	8808d1ba 	srli	r4,r17,6
   553bc:	21000e04 	addi	r4,r4,56
   553c0:	210b883a 	add	r5,r4,r4
   553c4:	294b883a 	add	r5,r5,r5
   553c8:	294b883a 	add	r5,r5,r5
   553cc:	04c00074 	movhi	r19,1
   553d0:	9cc1e304 	addi	r19,r19,1932
   553d4:	994b883a 	add	r5,r19,r5
   553d8:	2c000317 	ldw	r16,12(r5)
   553dc:	2c000e26 	beq	r5,r16,55418 <_malloc_r+0x170>
   553e0:	80c00117 	ldw	r3,4(r16)
   553e4:	01ffff04 	movi	r7,-4
   553e8:	018003c4 	movi	r6,15
   553ec:	19c6703a 	and	r3,r3,r7
   553f0:	1c45c83a 	sub	r2,r3,r17
   553f4:	30800716 	blt	r6,r2,55414 <_malloc_r+0x16c>
   553f8:	1000610e 	bge	r2,zero,55580 <_malloc_r+0x2d8>
   553fc:	84000317 	ldw	r16,12(r16)
   55400:	2c000526 	beq	r5,r16,55418 <_malloc_r+0x170>
   55404:	80c00117 	ldw	r3,4(r16)
   55408:	19c6703a 	and	r3,r3,r7
   5540c:	1c45c83a 	sub	r2,r3,r17
   55410:	30bff90e 	bge	r6,r2,553f8 <_malloc_r+0x150>
   55414:	213fffc4 	addi	r4,r4,-1
   55418:	21000044 	addi	r4,r4,1
   5541c:	9c000417 	ldw	r16,16(r19)
   55420:	00c00074 	movhi	r3,1
   55424:	18c1e304 	addi	r3,r3,1932
   55428:	1a400204 	addi	r9,r3,8
   5542c:	8240ff26 	beq	r16,r9,5582c <_malloc_r+0x584>
   55430:	81400117 	ldw	r5,4(r16)
   55434:	00bfff04 	movi	r2,-4
   55438:	018003c4 	movi	r6,15
   5543c:	2884703a 	and	r2,r5,r2
   55440:	144bc83a 	sub	r5,r2,r17
   55444:	3140ea16 	blt	r6,r5,557f0 <_malloc_r+0x548>
   55448:	1a400515 	stw	r9,20(r3)
   5544c:	1a400415 	stw	r9,16(r3)
   55450:	2800570e 	bge	r5,zero,555b0 <_malloc_r+0x308>
   55454:	01407fc4 	movi	r5,511
   55458:	2880ca36 	bltu	r5,r2,55784 <_malloc_r+0x4dc>
   5545c:	1004d0fa 	srli	r2,r2,3
   55460:	02000044 	movi	r8,1
   55464:	19c00117 	ldw	r7,4(r3)
   55468:	108b883a 	add	r5,r2,r2
   5546c:	294b883a 	add	r5,r5,r5
   55470:	1005d0ba 	srai	r2,r2,2
   55474:	294b883a 	add	r5,r5,r5
   55478:	28cb883a 	add	r5,r5,r3
   5547c:	29800217 	ldw	r6,8(r5)
   55480:	4084983a 	sll	r2,r8,r2
   55484:	81400315 	stw	r5,12(r16)
   55488:	81800215 	stw	r6,8(r16)
   5548c:	11c4b03a 	or	r2,r2,r7
   55490:	18800115 	stw	r2,4(r3)
   55494:	2c000215 	stw	r16,8(r5)
   55498:	34000315 	stw	r16,12(r6)
   5549c:	200bd0ba 	srai	r5,r4,2
   554a0:	00c00044 	movi	r3,1
   554a4:	194a983a 	sll	r5,r3,r5
   554a8:	11404936 	bltu	r2,r5,555d0 <_malloc_r+0x328>
   554ac:	1146703a 	and	r3,r2,r5
   554b0:	18000a1e 	bne	r3,zero,554dc <_malloc_r+0x234>
   554b4:	00ffff04 	movi	r3,-4
   554b8:	294b883a 	add	r5,r5,r5
   554bc:	20c8703a 	and	r4,r4,r3
   554c0:	1146703a 	and	r3,r2,r5
   554c4:	21000104 	addi	r4,r4,4
   554c8:	1800041e 	bne	r3,zero,554dc <_malloc_r+0x234>
   554cc:	294b883a 	add	r5,r5,r5
   554d0:	1146703a 	and	r3,r2,r5
   554d4:	21000104 	addi	r4,r4,4
   554d8:	183ffc26 	beq	r3,zero,554cc <_malloc_r+0x224>
   554dc:	023fff04 	movi	r8,-4
   554e0:	01c003c4 	movi	r7,15
   554e4:	2105883a 	add	r2,r4,r4
   554e8:	1085883a 	add	r2,r2,r2
   554ec:	1085883a 	add	r2,r2,r2
   554f0:	9899883a 	add	r12,r19,r2
   554f4:	62800304 	addi	r10,r12,12
   554f8:	2017883a 	mov	r11,r4
   554fc:	54000017 	ldw	r16,0(r10)
   55500:	51bffd04 	addi	r6,r10,-12
   55504:	8180041e 	bne	r16,r6,55518 <_malloc_r+0x270>
   55508:	0000ca06 	br	55834 <_malloc_r+0x58c>
   5550c:	10001c0e 	bge	r2,zero,55580 <_malloc_r+0x2d8>
   55510:	84000317 	ldw	r16,12(r16)
   55514:	8180c726 	beq	r16,r6,55834 <_malloc_r+0x58c>
   55518:	80c00117 	ldw	r3,4(r16)
   5551c:	1a06703a 	and	r3,r3,r8
   55520:	1c45c83a 	sub	r2,r3,r17
   55524:	38bff90e 	bge	r7,r2,5550c <_malloc_r+0x264>
   55528:	81000317 	ldw	r4,12(r16)
   5552c:	81400217 	ldw	r5,8(r16)
   55530:	8447883a 	add	r3,r16,r17
   55534:	8c400054 	ori	r17,r17,1
   55538:	29000315 	stw	r4,12(r5)
   5553c:	21400215 	stw	r5,8(r4)
   55540:	84400115 	stw	r17,4(r16)
   55544:	1889883a 	add	r4,r3,r2
   55548:	11400054 	ori	r5,r2,1
   5554c:	98c00515 	stw	r3,20(r19)
   55550:	98c00415 	stw	r3,16(r19)
   55554:	20800015 	stw	r2,0(r4)
   55558:	1a400315 	stw	r9,12(r3)
   5555c:	1a400215 	stw	r9,8(r3)
   55560:	19400115 	stw	r5,4(r3)
   55564:	9009883a 	mov	r4,r18
   55568:	005a2540 	call	5a254 <__malloc_unlock>
   5556c:	80800204 	addi	r2,r16,8
   55570:	003f7b06 	br	55360 <_malloc_r+0xb8>
   55574:	8808d0fa 	srli	r4,r17,3
   55578:	210b883a 	add	r5,r4,r4
   5557c:	003f9106 	br	553c4 <_malloc_r+0x11c>
   55580:	80c7883a 	add	r3,r16,r3
   55584:	19400117 	ldw	r5,4(r3)
   55588:	80800317 	ldw	r2,12(r16)
   5558c:	81000217 	ldw	r4,8(r16)
   55590:	29400054 	ori	r5,r5,1
   55594:	19400115 	stw	r5,4(r3)
   55598:	20800315 	stw	r2,12(r4)
   5559c:	11000215 	stw	r4,8(r2)
   555a0:	9009883a 	mov	r4,r18
   555a4:	005a2540 	call	5a254 <__malloc_unlock>
   555a8:	80800204 	addi	r2,r16,8
   555ac:	003f6c06 	br	55360 <_malloc_r+0xb8>
   555b0:	8085883a 	add	r2,r16,r2
   555b4:	10c00117 	ldw	r3,4(r2)
   555b8:	9009883a 	mov	r4,r18
   555bc:	18c00054 	ori	r3,r3,1
   555c0:	10c00115 	stw	r3,4(r2)
   555c4:	005a2540 	call	5a254 <__malloc_unlock>
   555c8:	80800204 	addi	r2,r16,8
   555cc:	003f6406 	br	55360 <_malloc_r+0xb8>
   555d0:	9c000217 	ldw	r16,8(r19)
   555d4:	00bfff04 	movi	r2,-4
   555d8:	85400117 	ldw	r21,4(r16)
   555dc:	a8aa703a 	and	r21,r21,r2
   555e0:	ac400336 	bltu	r21,r17,555f0 <_malloc_r+0x348>
   555e4:	ac45c83a 	sub	r2,r21,r17
   555e8:	00c003c4 	movi	r3,15
   555ec:	18805316 	blt	r3,r2,5573c <_malloc_r+0x494>
   555f0:	d5e01917 	ldw	r23,-32668(gp)
   555f4:	d0e00317 	ldw	r3,-32756(gp)
   555f8:	00bfffc4 	movi	r2,-1
   555fc:	8579883a 	add	fp,r16,r21
   55600:	8def883a 	add	r23,r17,r23
   55604:	1880d226 	beq	r3,r2,55950 <_malloc_r+0x6a8>
   55608:	bdc403c4 	addi	r23,r23,4111
   5560c:	00bc0004 	movi	r2,-4096
   55610:	b8ae703a 	and	r23,r23,r2
   55614:	9009883a 	mov	r4,r18
   55618:	b80b883a 	mov	r5,r23
   5561c:	005757c0 	call	5757c <_sbrk_r>
   55620:	1029883a 	mov	r20,r2
   55624:	00bfffc4 	movi	r2,-1
   55628:	a080d126 	beq	r20,r2,55970 <_malloc_r+0x6c8>
   5562c:	a7009f36 	bltu	r20,fp,558ac <_malloc_r+0x604>
   55630:	05800074 	movhi	r22,1
   55634:	b5878804 	addi	r22,r22,7712
   55638:	b0800017 	ldw	r2,0(r22)
   5563c:	b885883a 	add	r2,r23,r2
   55640:	b0800015 	stw	r2,0(r22)
   55644:	e500cf26 	beq	fp,r20,55984 <_malloc_r+0x6dc>
   55648:	d1200317 	ldw	r4,-32756(gp)
   5564c:	00ffffc4 	movi	r3,-1
   55650:	20c0e026 	beq	r4,r3,559d4 <_malloc_r+0x72c>
   55654:	a739c83a 	sub	fp,r20,fp
   55658:	1705883a 	add	r2,r2,fp
   5565c:	b0800015 	stw	r2,0(r22)
   55660:	a08001cc 	andi	r2,r20,7
   55664:	1000a526 	beq	r2,zero,558fc <_malloc_r+0x654>
   55668:	a0a9c83a 	sub	r20,r20,r2
   5566c:	00c40204 	movi	r3,4104
   55670:	a5000204 	addi	r20,r20,8
   55674:	1885c83a 	sub	r2,r3,r2
   55678:	a5c7883a 	add	r3,r20,r23
   5567c:	18c3ffcc 	andi	r3,r3,4095
   55680:	10efc83a 	sub	r23,r2,r3
   55684:	9009883a 	mov	r4,r18
   55688:	b80b883a 	mov	r5,r23
   5568c:	005757c0 	call	5757c <_sbrk_r>
   55690:	00ffffc4 	movi	r3,-1
   55694:	10c0cc26 	beq	r2,r3,559c8 <_malloc_r+0x720>
   55698:	1505c83a 	sub	r2,r2,r20
   5569c:	b887883a 	add	r3,r23,r2
   556a0:	18c00054 	ori	r3,r3,1
   556a4:	b0800017 	ldw	r2,0(r22)
   556a8:	9d000215 	stw	r20,8(r19)
   556ac:	a0c00115 	stw	r3,4(r20)
   556b0:	b885883a 	add	r2,r23,r2
   556b4:	b0800015 	stw	r2,0(r22)
   556b8:	84c00e26 	beq	r16,r19,556f4 <_malloc_r+0x44c>
   556bc:	00c003c4 	movi	r3,15
   556c0:	1d40902e 	bgeu	r3,r21,55904 <_malloc_r+0x65c>
   556c4:	ad7ffd04 	addi	r21,r21,-12
   556c8:	013ffe04 	movi	r4,-8
   556cc:	a908703a 	and	r4,r21,r4
   556d0:	810b883a 	add	r5,r16,r4
   556d4:	01800144 	movi	r6,5
   556d8:	29800115 	stw	r6,4(r5)
   556dc:	29800215 	stw	r6,8(r5)
   556e0:	81400117 	ldw	r5,4(r16)
   556e4:	2940004c 	andi	r5,r5,1
   556e8:	214ab03a 	or	r5,r4,r5
   556ec:	81400115 	stw	r5,4(r16)
   556f0:	1900ae36 	bltu	r3,r4,559ac <_malloc_r+0x704>
   556f4:	d0e01817 	ldw	r3,-32672(gp)
   556f8:	1880012e 	bgeu	r3,r2,55700 <_malloc_r+0x458>
   556fc:	d0a01815 	stw	r2,-32672(gp)
   55700:	d0e01717 	ldw	r3,-32676(gp)
   55704:	9c000217 	ldw	r16,8(r19)
   55708:	1880012e 	bgeu	r3,r2,55710 <_malloc_r+0x468>
   5570c:	d0a01715 	stw	r2,-32676(gp)
   55710:	80c00117 	ldw	r3,4(r16)
   55714:	00bfff04 	movi	r2,-4
   55718:	1886703a 	and	r3,r3,r2
   5571c:	1c45c83a 	sub	r2,r3,r17
   55720:	1c400236 	bltu	r3,r17,5572c <_malloc_r+0x484>
   55724:	00c003c4 	movi	r3,15
   55728:	18800416 	blt	r3,r2,5573c <_malloc_r+0x494>
   5572c:	9009883a 	mov	r4,r18
   55730:	005a2540 	call	5a254 <__malloc_unlock>
   55734:	0005883a 	mov	r2,zero
   55738:	003f0906 	br	55360 <_malloc_r+0xb8>
   5573c:	88c00054 	ori	r3,r17,1
   55740:	10800054 	ori	r2,r2,1
   55744:	80c00115 	stw	r3,4(r16)
   55748:	8463883a 	add	r17,r16,r17
   5574c:	88800115 	stw	r2,4(r17)
   55750:	9009883a 	mov	r4,r18
   55754:	9c400215 	stw	r17,8(r19)
   55758:	005a2540 	call	5a254 <__malloc_unlock>
   5575c:	80800204 	addi	r2,r16,8
   55760:	003eff06 	br	55360 <_malloc_r+0xb8>
   55764:	00800504 	movi	r2,20
   55768:	1100492e 	bgeu	r2,r4,55890 <_malloc_r+0x5e8>
   5576c:	00801504 	movi	r2,84
   55770:	11005c36 	bltu	r2,r4,558e4 <_malloc_r+0x63c>
   55774:	8808d33a 	srli	r4,r17,12
   55778:	21001b84 	addi	r4,r4,110
   5577c:	210b883a 	add	r5,r4,r4
   55780:	003f1006 	br	553c4 <_malloc_r+0x11c>
   55784:	1006d27a 	srli	r3,r2,9
   55788:	01400104 	movi	r5,4
   5578c:	28c0432e 	bgeu	r5,r3,5589c <_malloc_r+0x5f4>
   55790:	01400504 	movi	r5,20
   55794:	28c07036 	bltu	r5,r3,55958 <_malloc_r+0x6b0>
   55798:	194016c4 	addi	r5,r3,91
   5579c:	294d883a 	add	r6,r5,r5
   557a0:	318d883a 	add	r6,r6,r6
   557a4:	318d883a 	add	r6,r6,r6
   557a8:	998d883a 	add	r6,r19,r6
   557ac:	30c00217 	ldw	r3,8(r6)
   557b0:	01c00074 	movhi	r7,1
   557b4:	39c1e304 	addi	r7,r7,1932
   557b8:	19805726 	beq	r3,r6,55918 <_malloc_r+0x670>
   557bc:	01ffff04 	movi	r7,-4
   557c0:	19400117 	ldw	r5,4(r3)
   557c4:	29ca703a 	and	r5,r5,r7
   557c8:	1140022e 	bgeu	r2,r5,557d4 <_malloc_r+0x52c>
   557cc:	18c00217 	ldw	r3,8(r3)
   557d0:	30fffb1e 	bne	r6,r3,557c0 <_malloc_r+0x518>
   557d4:	19400317 	ldw	r5,12(r3)
   557d8:	98800117 	ldw	r2,4(r19)
   557dc:	81400315 	stw	r5,12(r16)
   557e0:	80c00215 	stw	r3,8(r16)
   557e4:	2c000215 	stw	r16,8(r5)
   557e8:	1c000315 	stw	r16,12(r3)
   557ec:	003f2b06 	br	5549c <_malloc_r+0x1f4>
   557f0:	8445883a 	add	r2,r16,r17
   557f4:	8c400054 	ori	r17,r17,1
   557f8:	18800515 	stw	r2,20(r3)
   557fc:	18800415 	stw	r2,16(r3)
   55800:	29000054 	ori	r4,r5,1
   55804:	1147883a 	add	r3,r2,r5
   55808:	84400115 	stw	r17,4(r16)
   5580c:	11000115 	stw	r4,4(r2)
   55810:	12400315 	stw	r9,12(r2)
   55814:	12400215 	stw	r9,8(r2)
   55818:	19400015 	stw	r5,0(r3)
   5581c:	9009883a 	mov	r4,r18
   55820:	005a2540 	call	5a254 <__malloc_unlock>
   55824:	80800204 	addi	r2,r16,8
   55828:	003ecd06 	br	55360 <_malloc_r+0xb8>
   5582c:	18800117 	ldw	r2,4(r3)
   55830:	003f1a06 	br	5549c <_malloc_r+0x1f4>
   55834:	5ac00044 	addi	r11,r11,1
   55838:	588000cc 	andi	r2,r11,3
   5583c:	52800204 	addi	r10,r10,8
   55840:	103f2e1e 	bne	r2,zero,554fc <_malloc_r+0x254>
   55844:	20c000cc 	andi	r3,r4,3
   55848:	60bffe04 	addi	r2,r12,-8
   5584c:	18006f26 	beq	r3,zero,55a0c <_malloc_r+0x764>
   55850:	63000017 	ldw	r12,0(r12)
   55854:	213fffc4 	addi	r4,r4,-1
   55858:	60bffa26 	beq	r12,r2,55844 <_malloc_r+0x59c>
   5585c:	98800117 	ldw	r2,4(r19)
   55860:	294b883a 	add	r5,r5,r5
   55864:	117f5a36 	bltu	r2,r5,555d0 <_malloc_r+0x328>
   55868:	283f5926 	beq	r5,zero,555d0 <_malloc_r+0x328>
   5586c:	1146703a 	and	r3,r2,r5
   55870:	18001626 	beq	r3,zero,558cc <_malloc_r+0x624>
   55874:	5809883a 	mov	r4,r11
   55878:	003f1a06 	br	554e4 <_malloc_r+0x23c>
   5587c:	80800204 	addi	r2,r16,8
   55880:	84000517 	ldw	r16,20(r16)
   55884:	143ea81e 	bne	r2,r16,55328 <_malloc_r+0x80>
   55888:	21000084 	addi	r4,r4,2
   5588c:	003ee306 	br	5541c <_malloc_r+0x174>
   55890:	210016c4 	addi	r4,r4,91
   55894:	210b883a 	add	r5,r4,r4
   55898:	003eca06 	br	553c4 <_malloc_r+0x11c>
   5589c:	100ad1ba 	srli	r5,r2,6
   558a0:	29400e04 	addi	r5,r5,56
   558a4:	294d883a 	add	r6,r5,r5
   558a8:	003fbd06 	br	557a0 <_malloc_r+0x4f8>
   558ac:	84ff6026 	beq	r16,r19,55630 <_malloc_r+0x388>
   558b0:	00800074 	movhi	r2,1
   558b4:	1081e304 	addi	r2,r2,1932
   558b8:	14000217 	ldw	r16,8(r2)
   558bc:	00bfff04 	movi	r2,-4
   558c0:	80c00117 	ldw	r3,4(r16)
   558c4:	1886703a 	and	r3,r3,r2
   558c8:	003f9406 	br	5571c <_malloc_r+0x474>
   558cc:	294b883a 	add	r5,r5,r5
   558d0:	1146703a 	and	r3,r2,r5
   558d4:	5ac00104 	addi	r11,r11,4
   558d8:	183ffc26 	beq	r3,zero,558cc <_malloc_r+0x624>
   558dc:	5809883a 	mov	r4,r11
   558e0:	003f0006 	br	554e4 <_malloc_r+0x23c>
   558e4:	00805504 	movi	r2,340
   558e8:	11001336 	bltu	r2,r4,55938 <_malloc_r+0x690>
   558ec:	8808d3fa 	srli	r4,r17,15
   558f0:	21001dc4 	addi	r4,r4,119
   558f4:	210b883a 	add	r5,r4,r4
   558f8:	003eb206 	br	553c4 <_malloc_r+0x11c>
   558fc:	00840004 	movi	r2,4096
   55900:	003f5d06 	br	55678 <_malloc_r+0x3d0>
   55904:	00800044 	movi	r2,1
   55908:	a0800115 	stw	r2,4(r20)
   5590c:	a021883a 	mov	r16,r20
   55910:	0007883a 	mov	r3,zero
   55914:	003f8106 	br	5571c <_malloc_r+0x474>
   55918:	280bd0ba 	srai	r5,r5,2
   5591c:	01800044 	movi	r6,1
   55920:	38800117 	ldw	r2,4(r7)
   55924:	314c983a 	sll	r6,r6,r5
   55928:	180b883a 	mov	r5,r3
   5592c:	3084b03a 	or	r2,r6,r2
   55930:	38800115 	stw	r2,4(r7)
   55934:	003fa906 	br	557dc <_malloc_r+0x534>
   55938:	00815504 	movi	r2,1364
   5593c:	11001836 	bltu	r2,r4,559a0 <_malloc_r+0x6f8>
   55940:	8808d4ba 	srli	r4,r17,18
   55944:	21001f04 	addi	r4,r4,124
   55948:	210b883a 	add	r5,r4,r4
   5594c:	003e9d06 	br	553c4 <_malloc_r+0x11c>
   55950:	bdc00404 	addi	r23,r23,16
   55954:	003f2f06 	br	55614 <_malloc_r+0x36c>
   55958:	01401504 	movi	r5,84
   5595c:	28c01f36 	bltu	r5,r3,559dc <_malloc_r+0x734>
   55960:	100ad33a 	srli	r5,r2,12
   55964:	29401b84 	addi	r5,r5,110
   55968:	294d883a 	add	r6,r5,r5
   5596c:	003f8c06 	br	557a0 <_malloc_r+0x4f8>
   55970:	9c000217 	ldw	r16,8(r19)
   55974:	00bfff04 	movi	r2,-4
   55978:	80c00117 	ldw	r3,4(r16)
   5597c:	1886703a 	and	r3,r3,r2
   55980:	003f6606 	br	5571c <_malloc_r+0x474>
   55984:	e0c3ffcc 	andi	r3,fp,4095
   55988:	183f2f1e 	bne	r3,zero,55648 <_malloc_r+0x3a0>
   5598c:	98c00217 	ldw	r3,8(r19)
   55990:	bd49883a 	add	r4,r23,r21
   55994:	21000054 	ori	r4,r4,1
   55998:	19000115 	stw	r4,4(r3)
   5599c:	003f5506 	br	556f4 <_malloc_r+0x44c>
   559a0:	01403f04 	movi	r5,252
   559a4:	01001f84 	movi	r4,126
   559a8:	003e8606 	br	553c4 <_malloc_r+0x11c>
   559ac:	9009883a 	mov	r4,r18
   559b0:	81400204 	addi	r5,r16,8
   559b4:	00547100 	call	54710 <_free_r>
   559b8:	00800074 	movhi	r2,1
   559bc:	10878804 	addi	r2,r2,7712
   559c0:	10800017 	ldw	r2,0(r2)
   559c4:	003f4b06 	br	556f4 <_malloc_r+0x44c>
   559c8:	00c00044 	movi	r3,1
   559cc:	002f883a 	mov	r23,zero
   559d0:	003f3406 	br	556a4 <_malloc_r+0x3fc>
   559d4:	d5200315 	stw	r20,-32756(gp)
   559d8:	003f2106 	br	55660 <_malloc_r+0x3b8>
   559dc:	01405504 	movi	r5,340
   559e0:	28c00436 	bltu	r5,r3,559f4 <_malloc_r+0x74c>
   559e4:	100ad3fa 	srli	r5,r2,15
   559e8:	29401dc4 	addi	r5,r5,119
   559ec:	294d883a 	add	r6,r5,r5
   559f0:	003f6b06 	br	557a0 <_malloc_r+0x4f8>
   559f4:	01415504 	movi	r5,1364
   559f8:	28c00936 	bltu	r5,r3,55a20 <_malloc_r+0x778>
   559fc:	100ad4ba 	srli	r5,r2,18
   55a00:	29401f04 	addi	r5,r5,124
   55a04:	294d883a 	add	r6,r5,r5
   55a08:	003f6506 	br	557a0 <_malloc_r+0x4f8>
   55a0c:	98800117 	ldw	r2,4(r19)
   55a10:	0146303a 	nor	r3,zero,r5
   55a14:	1884703a 	and	r2,r3,r2
   55a18:	98800115 	stw	r2,4(r19)
   55a1c:	003f9006 	br	55860 <_malloc_r+0x5b8>
   55a20:	01803f04 	movi	r6,252
   55a24:	01401f84 	movi	r5,126
   55a28:	003f5d06 	br	557a0 <_malloc_r+0x4f8>

00055a2c <memchr>:
   55a2c:	008000c4 	movi	r2,3
   55a30:	29403fcc 	andi	r5,r5,255
   55a34:	1180282e 	bgeu	r2,r6,55ad8 <memchr+0xac>
   55a38:	2086703a 	and	r3,r4,r2
   55a3c:	1800351e 	bne	r3,zero,55b14 <memchr+0xe8>
   55a40:	2816923a 	slli	r11,r5,8
   55a44:	2093883a 	add	r9,r4,r2
   55a48:	22000084 	addi	r8,r4,2
   55a4c:	5957883a 	add	r11,r11,r5
   55a50:	5816923a 	slli	r11,r11,8
   55a54:	20c00044 	addi	r3,r4,1
   55a58:	037fbff4 	movhi	r13,65279
   55a5c:	6b7fbfc4 	addi	r13,r13,-257
   55a60:	5957883a 	add	r11,r11,r5
   55a64:	5816923a 	slli	r11,r11,8
   55a68:	03202074 	movhi	r12,32897
   55a6c:	63202004 	addi	r12,r12,-32640
   55a70:	101d883a 	mov	r14,r2
   55a74:	5957883a 	add	r11,r11,r5
   55a78:	21c00017 	ldw	r7,0(r4)
   55a7c:	31bfff04 	addi	r6,r6,-4
   55a80:	1805883a 	mov	r2,r3
   55a84:	3acef03a 	xor	r7,r7,r11
   55a88:	3b55883a 	add	r10,r7,r13
   55a8c:	01ce303a 	nor	r7,zero,r7
   55a90:	51ce703a 	and	r7,r10,r7
   55a94:	3b0e703a 	and	r7,r7,r12
   55a98:	38000a26 	beq	r7,zero,55ac4 <memchr+0x98>
   55a9c:	21c00003 	ldbu	r7,0(r4)
   55aa0:	39401e26 	beq	r7,r5,55b1c <memchr+0xf0>
   55aa4:	19c00003 	ldbu	r7,0(r3)
   55aa8:	39401926 	beq	r7,r5,55b10 <memchr+0xe4>
   55aac:	41c00003 	ldbu	r7,0(r8)
   55ab0:	4005883a 	mov	r2,r8
   55ab4:	39401626 	beq	r7,r5,55b10 <memchr+0xe4>
   55ab8:	49c00003 	ldbu	r7,0(r9)
   55abc:	4805883a 	mov	r2,r9
   55ac0:	39401326 	beq	r7,r5,55b10 <memchr+0xe4>
   55ac4:	21000104 	addi	r4,r4,4
   55ac8:	4a400104 	addi	r9,r9,4
   55acc:	42000104 	addi	r8,r8,4
   55ad0:	18c00104 	addi	r3,r3,4
   55ad4:	71bfe836 	bltu	r14,r6,55a78 <memchr+0x4c>
   55ad8:	2005883a 	mov	r2,r4
   55adc:	30000a26 	beq	r6,zero,55b08 <memchr+0xdc>
   55ae0:	10c00003 	ldbu	r3,0(r2)
   55ae4:	19400a26 	beq	r3,r5,55b10 <memchr+0xe4>
   55ae8:	10c00044 	addi	r3,r2,1
   55aec:	118d883a 	add	r6,r2,r6
   55af0:	00000306 	br	55b00 <memchr+0xd4>
   55af4:	11000003 	ldbu	r4,0(r2)
   55af8:	18c00044 	addi	r3,r3,1
   55afc:	21400426 	beq	r4,r5,55b10 <memchr+0xe4>
   55b00:	1805883a 	mov	r2,r3
   55b04:	19bffb1e 	bne	r3,r6,55af4 <memchr+0xc8>
   55b08:	0005883a 	mov	r2,zero
   55b0c:	f800283a 	ret
   55b10:	f800283a 	ret
   55b14:	2005883a 	mov	r2,r4
   55b18:	003ff106 	br	55ae0 <memchr+0xb4>
   55b1c:	2005883a 	mov	r2,r4
   55b20:	f800283a 	ret

00055b24 <memcpy>:
   55b24:	defffb04 	addi	sp,sp,-20
   55b28:	dc000015 	stw	r16,0(sp)
   55b2c:	dfc00415 	stw	ra,16(sp)
   55b30:	dcc00315 	stw	r19,12(sp)
   55b34:	dc800215 	stw	r18,8(sp)
   55b38:	dc400115 	stw	r17,4(sp)
   55b3c:	00c003c4 	movi	r3,15
   55b40:	2021883a 	mov	r16,r4
   55b44:	3005883a 	mov	r2,r6
   55b48:	1980032e 	bgeu	r3,r6,55b58 <memcpy+0x34>
   55b4c:	2906b03a 	or	r3,r5,r4
   55b50:	18c000cc 	andi	r3,r3,3
   55b54:	18001026 	beq	r3,zero,55b98 <memcpy+0x74>
   55b58:	8007883a 	mov	r3,r16
   55b5c:	288f883a 	add	r7,r5,r2
   55b60:	10000526 	beq	r2,zero,55b78 <memcpy+0x54>
   55b64:	29800003 	ldbu	r6,0(r5)
   55b68:	18c00044 	addi	r3,r3,1
   55b6c:	29400044 	addi	r5,r5,1
   55b70:	19bfffc5 	stb	r6,-1(r3)
   55b74:	29fffb1e 	bne	r5,r7,55b64 <memcpy+0x40>
   55b78:	8005883a 	mov	r2,r16
   55b7c:	dfc00417 	ldw	ra,16(sp)
   55b80:	dcc00317 	ldw	r19,12(sp)
   55b84:	dc800217 	ldw	r18,8(sp)
   55b88:	dc400117 	ldw	r17,4(sp)
   55b8c:	dc000017 	ldw	r16,0(sp)
   55b90:	dec00504 	addi	sp,sp,20
   55b94:	f800283a 	ret
   55b98:	32bffc04 	addi	r10,r6,-16
   55b9c:	5014d13a 	srli	r10,r10,4
   55ba0:	20800404 	addi	r2,r4,16
   55ba4:	2007883a 	mov	r3,r4
   55ba8:	5008913a 	slli	r4,r10,4
   55bac:	280f883a 	mov	r7,r5
   55bb0:	1105883a 	add	r2,r2,r4
   55bb4:	3a000017 	ldw	r8,0(r7)
   55bb8:	18c00404 	addi	r3,r3,16
   55bbc:	39c00404 	addi	r7,r7,16
   55bc0:	1a3ffc15 	stw	r8,-16(r3)
   55bc4:	3a3ffd17 	ldw	r8,-12(r7)
   55bc8:	1a3ffd15 	stw	r8,-12(r3)
   55bcc:	3a3ffe17 	ldw	r8,-8(r7)
   55bd0:	1a3ffe15 	stw	r8,-8(r3)
   55bd4:	3a3fff17 	ldw	r8,-4(r7)
   55bd8:	1a3fff15 	stw	r8,-4(r3)
   55bdc:	18bff51e 	bne	r3,r2,55bb4 <memcpy+0x90>
   55be0:	52800044 	addi	r10,r10,1
   55be4:	5014913a 	slli	r10,r10,4
   55be8:	308003cc 	andi	r2,r6,15
   55bec:	010000c4 	movi	r4,3
   55bf0:	8287883a 	add	r3,r16,r10
   55bf4:	2a95883a 	add	r10,r5,r10
   55bf8:	2080182e 	bgeu	r4,r2,55c5c <memcpy+0x138>
   55bfc:	147fff04 	addi	r17,r2,-4
   55c00:	8808d0ba 	srli	r4,r17,2
   55c04:	1a400104 	addi	r9,r3,4
   55c08:	180d883a 	mov	r6,r3
   55c0c:	2105883a 	add	r2,r4,r4
   55c10:	1085883a 	add	r2,r2,r2
   55c14:	4893883a 	add	r9,r9,r2
   55c18:	500f883a 	mov	r7,r10
   55c1c:	3a000017 	ldw	r8,0(r7)
   55c20:	31800104 	addi	r6,r6,4
   55c24:	39c00104 	addi	r7,r7,4
   55c28:	323fff15 	stw	r8,-4(r6)
   55c2c:	327ffb1e 	bne	r6,r9,55c1c <memcpy+0xf8>
   55c30:	20800044 	addi	r2,r4,1
   55c34:	1085883a 	add	r2,r2,r2
   55c38:	1085883a 	add	r2,r2,r2
   55c3c:	017fff04 	movi	r5,-4
   55c40:	18a5883a 	add	r18,r3,r2
   55c44:	50a7883a 	add	r19,r10,r2
   55c48:	005960c0 	call	5960c <__mulsi3>
   55c4c:	1445883a 	add	r2,r2,r17
   55c50:	980b883a 	mov	r5,r19
   55c54:	9007883a 	mov	r3,r18
   55c58:	003fc006 	br	55b5c <memcpy+0x38>
   55c5c:	500b883a 	mov	r5,r10
   55c60:	003fbe06 	br	55b5c <memcpy+0x38>

00055c64 <memmove>:
   55c64:	defffb04 	addi	sp,sp,-20
   55c68:	dc000015 	stw	r16,0(sp)
   55c6c:	dfc00415 	stw	ra,16(sp)
   55c70:	dcc00315 	stw	r19,12(sp)
   55c74:	dc800215 	stw	r18,8(sp)
   55c78:	dc400115 	stw	r17,4(sp)
   55c7c:	2021883a 	mov	r16,r4
   55c80:	300f883a 	mov	r7,r6
   55c84:	2900122e 	bgeu	r5,r4,55cd0 <memmove+0x6c>
   55c88:	2987883a 	add	r3,r5,r6
   55c8c:	20c0102e 	bgeu	r4,r3,55cd0 <memmove+0x6c>
   55c90:	218b883a 	add	r5,r4,r6
   55c94:	1989c83a 	sub	r4,r3,r6
   55c98:	30000526 	beq	r6,zero,55cb0 <memmove+0x4c>
   55c9c:	18ffffc4 	addi	r3,r3,-1
   55ca0:	18800003 	ldbu	r2,0(r3)
   55ca4:	297fffc4 	addi	r5,r5,-1
   55ca8:	28800005 	stb	r2,0(r5)
   55cac:	193ffb1e 	bne	r3,r4,55c9c <memmove+0x38>
   55cb0:	8005883a 	mov	r2,r16
   55cb4:	dfc00417 	ldw	ra,16(sp)
   55cb8:	dcc00317 	ldw	r19,12(sp)
   55cbc:	dc800217 	ldw	r18,8(sp)
   55cc0:	dc400117 	ldw	r17,4(sp)
   55cc4:	dc000017 	ldw	r16,0(sp)
   55cc8:	dec00504 	addi	sp,sp,20
   55ccc:	f800283a 	ret
   55cd0:	008003c4 	movi	r2,15
   55cd4:	1180422e 	bgeu	r2,r6,55de0 <memmove+0x17c>
   55cd8:	2c04b03a 	or	r2,r5,r16
   55cdc:	108000cc 	andi	r2,r2,3
   55ce0:	10003f1e 	bne	r2,zero,55de0 <memmove+0x17c>
   55ce4:	32bffc04 	addi	r10,r6,-16
   55ce8:	5014d13a 	srli	r10,r10,4
   55cec:	81000404 	addi	r4,r16,16
   55cf0:	8007883a 	mov	r3,r16
   55cf4:	5004913a 	slli	r2,r10,4
   55cf8:	280f883a 	mov	r7,r5
   55cfc:	2089883a 	add	r4,r4,r2
   55d00:	38800017 	ldw	r2,0(r7)
   55d04:	18c00404 	addi	r3,r3,16
   55d08:	39c00404 	addi	r7,r7,16
   55d0c:	18bffc15 	stw	r2,-16(r3)
   55d10:	38bffd17 	ldw	r2,-12(r7)
   55d14:	18bffd15 	stw	r2,-12(r3)
   55d18:	38bffe17 	ldw	r2,-8(r7)
   55d1c:	18bffe15 	stw	r2,-8(r3)
   55d20:	38bfff17 	ldw	r2,-4(r7)
   55d24:	18bfff15 	stw	r2,-4(r3)
   55d28:	193ff51e 	bne	r3,r4,55d00 <memmove+0x9c>
   55d2c:	52800044 	addi	r10,r10,1
   55d30:	5014913a 	slli	r10,r10,4
   55d34:	31c003cc 	andi	r7,r6,15
   55d38:	008000c4 	movi	r2,3
   55d3c:	8287883a 	add	r3,r16,r10
   55d40:	2a95883a 	add	r10,r5,r10
   55d44:	11c0282e 	bgeu	r2,r7,55de8 <memmove+0x184>
   55d48:	3c7fff04 	addi	r17,r7,-4
   55d4c:	8808d0ba 	srli	r4,r17,2
   55d50:	1a400104 	addi	r9,r3,4
   55d54:	180d883a 	mov	r6,r3
   55d58:	2105883a 	add	r2,r4,r4
   55d5c:	1085883a 	add	r2,r2,r2
   55d60:	4893883a 	add	r9,r9,r2
   55d64:	5005883a 	mov	r2,r10
   55d68:	12000017 	ldw	r8,0(r2)
   55d6c:	31800104 	addi	r6,r6,4
   55d70:	10800104 	addi	r2,r2,4
   55d74:	323fff15 	stw	r8,-4(r6)
   55d78:	327ffb1e 	bne	r6,r9,55d68 <memmove+0x104>
   55d7c:	20800044 	addi	r2,r4,1
   55d80:	1085883a 	add	r2,r2,r2
   55d84:	1085883a 	add	r2,r2,r2
   55d88:	017fff04 	movi	r5,-4
   55d8c:	18a5883a 	add	r18,r3,r2
   55d90:	50a7883a 	add	r19,r10,r2
   55d94:	005960c0 	call	5960c <__mulsi3>
   55d98:	144f883a 	add	r7,r2,r17
   55d9c:	980b883a 	mov	r5,r19
   55da0:	9007883a 	mov	r3,r18
   55da4:	383fc226 	beq	r7,zero,55cb0 <memmove+0x4c>
   55da8:	19cf883a 	add	r7,r3,r7
   55dac:	29800003 	ldbu	r6,0(r5)
   55db0:	18c00044 	addi	r3,r3,1
   55db4:	29400044 	addi	r5,r5,1
   55db8:	19bfffc5 	stb	r6,-1(r3)
   55dbc:	19fffb1e 	bne	r3,r7,55dac <memmove+0x148>
   55dc0:	8005883a 	mov	r2,r16
   55dc4:	dfc00417 	ldw	ra,16(sp)
   55dc8:	dcc00317 	ldw	r19,12(sp)
   55dcc:	dc800217 	ldw	r18,8(sp)
   55dd0:	dc400117 	ldw	r17,4(sp)
   55dd4:	dc000017 	ldw	r16,0(sp)
   55dd8:	dec00504 	addi	sp,sp,20
   55ddc:	f800283a 	ret
   55de0:	8007883a 	mov	r3,r16
   55de4:	003fef06 	br	55da4 <memmove+0x140>
   55de8:	500b883a 	mov	r5,r10
   55dec:	003fed06 	br	55da4 <memmove+0x140>

00055df0 <memset>:
   55df0:	00c000c4 	movi	r3,3
   55df4:	2005883a 	mov	r2,r4
   55df8:	29403fcc 	andi	r5,r5,255
   55dfc:	19802d2e 	bgeu	r3,r6,55eb4 <memset+0xc4>
   55e00:	20c6703a 	and	r3,r4,r3
   55e04:	18002e1e 	bne	r3,zero,55ec0 <memset+0xd0>
   55e08:	2806923a 	slli	r3,r5,8
   55e0c:	010003c4 	movi	r4,15
   55e10:	3011883a 	mov	r8,r6
   55e14:	1946b03a 	or	r3,r3,r5
   55e18:	180e943a 	slli	r7,r3,16
   55e1c:	38ceb03a 	or	r7,r7,r3
   55e20:	1007883a 	mov	r3,r2
   55e24:	21800f2e 	bgeu	r4,r6,55e64 <memset+0x74>
   55e28:	19c00015 	stw	r7,0(r3)
   55e2c:	19c00115 	stw	r7,4(r3)
   55e30:	19c00215 	stw	r7,8(r3)
   55e34:	19c00315 	stw	r7,12(r3)
   55e38:	423ffc04 	addi	r8,r8,-16
   55e3c:	18c00404 	addi	r3,r3,16
   55e40:	223ff936 	bltu	r4,r8,55e28 <memset+0x38>
   55e44:	30fffc04 	addi	r3,r6,-16
   55e48:	1806d13a 	srli	r3,r3,4
   55e4c:	318003cc 	andi	r6,r6,15
   55e50:	010000c4 	movi	r4,3
   55e54:	18c00044 	addi	r3,r3,1
   55e58:	1806913a 	slli	r3,r3,4
   55e5c:	10c7883a 	add	r3,r2,r3
   55e60:	21800e2e 	bgeu	r4,r6,55e9c <memset+0xac>
   55e64:	1813883a 	mov	r9,r3
   55e68:	3011883a 	mov	r8,r6
   55e6c:	010000c4 	movi	r4,3
   55e70:	49c00015 	stw	r7,0(r9)
   55e74:	423fff04 	addi	r8,r8,-4
   55e78:	4a400104 	addi	r9,r9,4
   55e7c:	223ffc36 	bltu	r4,r8,55e70 <memset+0x80>
   55e80:	313fff04 	addi	r4,r6,-4
   55e84:	2008d0ba 	srli	r4,r4,2
   55e88:	318000cc 	andi	r6,r6,3
   55e8c:	21000044 	addi	r4,r4,1
   55e90:	2109883a 	add	r4,r4,r4
   55e94:	2109883a 	add	r4,r4,r4
   55e98:	1907883a 	add	r3,r3,r4
   55e9c:	30000a26 	beq	r6,zero,55ec8 <memset+0xd8>
   55ea0:	198d883a 	add	r6,r3,r6
   55ea4:	19400005 	stb	r5,0(r3)
   55ea8:	18c00044 	addi	r3,r3,1
   55eac:	19bffd1e 	bne	r3,r6,55ea4 <memset+0xb4>
   55eb0:	f800283a 	ret
   55eb4:	2007883a 	mov	r3,r4
   55eb8:	303ff91e 	bne	r6,zero,55ea0 <memset+0xb0>
   55ebc:	00000206 	br	55ec8 <memset+0xd8>
   55ec0:	2007883a 	mov	r3,r4
   55ec4:	003ff606 	br	55ea0 <memset+0xb0>
   55ec8:	f800283a 	ret

00055ecc <_Balloc>:
   55ecc:	20801317 	ldw	r2,76(r4)
   55ed0:	defffc04 	addi	sp,sp,-16
   55ed4:	dc400115 	stw	r17,4(sp)
   55ed8:	dc000015 	stw	r16,0(sp)
   55edc:	dfc00315 	stw	ra,12(sp)
   55ee0:	dc800215 	stw	r18,8(sp)
   55ee4:	2023883a 	mov	r17,r4
   55ee8:	2821883a 	mov	r16,r5
   55eec:	10000f26 	beq	r2,zero,55f2c <_Balloc+0x60>
   55ef0:	8407883a 	add	r3,r16,r16
   55ef4:	18c7883a 	add	r3,r3,r3
   55ef8:	10c7883a 	add	r3,r2,r3
   55efc:	18800017 	ldw	r2,0(r3)
   55f00:	10001126 	beq	r2,zero,55f48 <_Balloc+0x7c>
   55f04:	11000017 	ldw	r4,0(r2)
   55f08:	19000015 	stw	r4,0(r3)
   55f0c:	10000415 	stw	zero,16(r2)
   55f10:	10000315 	stw	zero,12(r2)
   55f14:	dfc00317 	ldw	ra,12(sp)
   55f18:	dc800217 	ldw	r18,8(sp)
   55f1c:	dc400117 	ldw	r17,4(sp)
   55f20:	dc000017 	ldw	r16,0(sp)
   55f24:	dec00404 	addi	sp,sp,16
   55f28:	f800283a 	ret
   55f2c:	01400104 	movi	r5,4
   55f30:	01800404 	movi	r6,16
   55f34:	00578300 	call	57830 <_calloc_r>
   55f38:	88801315 	stw	r2,76(r17)
   55f3c:	103fec1e 	bne	r2,zero,55ef0 <_Balloc+0x24>
   55f40:	0005883a 	mov	r2,zero
   55f44:	003ff306 	br	55f14 <_Balloc+0x48>
   55f48:	01400044 	movi	r5,1
   55f4c:	2c24983a 	sll	r18,r5,r16
   55f50:	8809883a 	mov	r4,r17
   55f54:	91800144 	addi	r6,r18,5
   55f58:	318d883a 	add	r6,r6,r6
   55f5c:	318d883a 	add	r6,r6,r6
   55f60:	00578300 	call	57830 <_calloc_r>
   55f64:	103ff626 	beq	r2,zero,55f40 <_Balloc+0x74>
   55f68:	14000115 	stw	r16,4(r2)
   55f6c:	14800215 	stw	r18,8(r2)
   55f70:	003fe606 	br	55f0c <_Balloc+0x40>

00055f74 <_Bfree>:
   55f74:	28000826 	beq	r5,zero,55f98 <_Bfree+0x24>
   55f78:	28c00117 	ldw	r3,4(r5)
   55f7c:	20801317 	ldw	r2,76(r4)
   55f80:	18c7883a 	add	r3,r3,r3
   55f84:	18c7883a 	add	r3,r3,r3
   55f88:	10c5883a 	add	r2,r2,r3
   55f8c:	10c00017 	ldw	r3,0(r2)
   55f90:	28c00015 	stw	r3,0(r5)
   55f94:	11400015 	stw	r5,0(r2)
   55f98:	f800283a 	ret

00055f9c <__multadd>:
   55f9c:	defff604 	addi	sp,sp,-40
   55fa0:	dd400515 	stw	r21,20(sp)
   55fa4:	2d400417 	ldw	r21,16(r5)
   55fa8:	df000815 	stw	fp,32(sp)
   55fac:	ddc00715 	stw	r23,28(sp)
   55fb0:	dd800615 	stw	r22,24(sp)
   55fb4:	dd000415 	stw	r20,16(sp)
   55fb8:	dc400115 	stw	r17,4(sp)
   55fbc:	dc000015 	stw	r16,0(sp)
   55fc0:	dfc00915 	stw	ra,36(sp)
   55fc4:	dcc00315 	stw	r19,12(sp)
   55fc8:	dc800215 	stw	r18,8(sp)
   55fcc:	282d883a 	mov	r22,r5
   55fd0:	202f883a 	mov	r23,r4
   55fd4:	3029883a 	mov	r20,r6
   55fd8:	3839883a 	mov	fp,r7
   55fdc:	2c000504 	addi	r16,r5,20
   55fe0:	0023883a 	mov	r17,zero
   55fe4:	84c00017 	ldw	r19,0(r16)
   55fe8:	a00b883a 	mov	r5,r20
   55fec:	8c400044 	addi	r17,r17,1
   55ff0:	993fffcc 	andi	r4,r19,65535
   55ff4:	005960c0 	call	5960c <__mulsi3>
   55ff8:	1725883a 	add	r18,r2,fp
   55ffc:	9808d43a 	srli	r4,r19,16
   56000:	9026d43a 	srli	r19,r18,16
   56004:	a00b883a 	mov	r5,r20
   56008:	005960c0 	call	5960c <__mulsi3>
   5600c:	988f883a 	add	r7,r19,r2
   56010:	3804943a 	slli	r2,r7,16
   56014:	94bfffcc 	andi	r18,r18,65535
   56018:	3838d43a 	srli	fp,r7,16
   5601c:	14a5883a 	add	r18,r2,r18
   56020:	84800015 	stw	r18,0(r16)
   56024:	84000104 	addi	r16,r16,4
   56028:	8d7fee16 	blt	r17,r21,55fe4 <__multadd+0x48>
   5602c:	e0000926 	beq	fp,zero,56054 <__multadd+0xb8>
   56030:	b0800217 	ldw	r2,8(r22)
   56034:	a880140e 	bge	r21,r2,56088 <__multadd+0xec>
   56038:	a8800144 	addi	r2,r21,5
   5603c:	1085883a 	add	r2,r2,r2
   56040:	1085883a 	add	r2,r2,r2
   56044:	b085883a 	add	r2,r22,r2
   56048:	ad400044 	addi	r21,r21,1
   5604c:	17000015 	stw	fp,0(r2)
   56050:	b5400415 	stw	r21,16(r22)
   56054:	b005883a 	mov	r2,r22
   56058:	dfc00917 	ldw	ra,36(sp)
   5605c:	df000817 	ldw	fp,32(sp)
   56060:	ddc00717 	ldw	r23,28(sp)
   56064:	dd800617 	ldw	r22,24(sp)
   56068:	dd400517 	ldw	r21,20(sp)
   5606c:	dd000417 	ldw	r20,16(sp)
   56070:	dcc00317 	ldw	r19,12(sp)
   56074:	dc800217 	ldw	r18,8(sp)
   56078:	dc400117 	ldw	r17,4(sp)
   5607c:	dc000017 	ldw	r16,0(sp)
   56080:	dec00a04 	addi	sp,sp,40
   56084:	f800283a 	ret
   56088:	b1400117 	ldw	r5,4(r22)
   5608c:	b809883a 	mov	r4,r23
   56090:	29400044 	addi	r5,r5,1
   56094:	0055ecc0 	call	55ecc <_Balloc>
   56098:	b1800417 	ldw	r6,16(r22)
   5609c:	b1400304 	addi	r5,r22,12
   560a0:	11000304 	addi	r4,r2,12
   560a4:	31800084 	addi	r6,r6,2
   560a8:	318d883a 	add	r6,r6,r6
   560ac:	318d883a 	add	r6,r6,r6
   560b0:	1021883a 	mov	r16,r2
   560b4:	0055b240 	call	55b24 <memcpy>
   560b8:	b0c00117 	ldw	r3,4(r22)
   560bc:	b8801317 	ldw	r2,76(r23)
   560c0:	18c7883a 	add	r3,r3,r3
   560c4:	18c7883a 	add	r3,r3,r3
   560c8:	10c5883a 	add	r2,r2,r3
   560cc:	10c00017 	ldw	r3,0(r2)
   560d0:	b0c00015 	stw	r3,0(r22)
   560d4:	15800015 	stw	r22,0(r2)
   560d8:	802d883a 	mov	r22,r16
   560dc:	003fd606 	br	56038 <__multadd+0x9c>

000560e0 <__s2b>:
   560e0:	defff904 	addi	sp,sp,-28
   560e4:	dd000415 	stw	r20,16(sp)
   560e8:	dc400115 	stw	r17,4(sp)
   560ec:	2829883a 	mov	r20,r5
   560f0:	2023883a 	mov	r17,r4
   560f4:	01400244 	movi	r5,9
   560f8:	39000204 	addi	r4,r7,8
   560fc:	dcc00315 	stw	r19,12(sp)
   56100:	dc800215 	stw	r18,8(sp)
   56104:	dfc00615 	stw	ra,24(sp)
   56108:	dd400515 	stw	r21,20(sp)
   5610c:	dc000015 	stw	r16,0(sp)
   56110:	3825883a 	mov	r18,r7
   56114:	3027883a 	mov	r19,r6
   56118:	00505e80 	call	505e8 <__divsi3>
   5611c:	00c00044 	movi	r3,1
   56120:	000b883a 	mov	r5,zero
   56124:	1880030e 	bge	r3,r2,56134 <__s2b+0x54>
   56128:	18c7883a 	add	r3,r3,r3
   5612c:	29400044 	addi	r5,r5,1
   56130:	18bffd16 	blt	r3,r2,56128 <__s2b+0x48>
   56134:	8809883a 	mov	r4,r17
   56138:	0055ecc0 	call	55ecc <_Balloc>
   5613c:	d8c00717 	ldw	r3,28(sp)
   56140:	10c00515 	stw	r3,20(r2)
   56144:	00c00044 	movi	r3,1
   56148:	10c00415 	stw	r3,16(r2)
   5614c:	00c00244 	movi	r3,9
   56150:	1cc0210e 	bge	r3,r19,561d8 <__s2b+0xf8>
   56154:	a0eb883a 	add	r21,r20,r3
   56158:	a821883a 	mov	r16,r21
   5615c:	a4e9883a 	add	r20,r20,r19
   56160:	81c00007 	ldb	r7,0(r16)
   56164:	8809883a 	mov	r4,r17
   56168:	84000044 	addi	r16,r16,1
   5616c:	100b883a 	mov	r5,r2
   56170:	01800284 	movi	r6,10
   56174:	39fff404 	addi	r7,r7,-48
   56178:	0055f9c0 	call	55f9c <__multadd>
   5617c:	853ff81e 	bne	r16,r20,56160 <__s2b+0x80>
   56180:	ace1883a 	add	r16,r21,r19
   56184:	843ffe04 	addi	r16,r16,-8
   56188:	9c800a0e 	bge	r19,r18,561b4 <__s2b+0xd4>
   5618c:	94e5c83a 	sub	r18,r18,r19
   56190:	84a5883a 	add	r18,r16,r18
   56194:	81c00007 	ldb	r7,0(r16)
   56198:	8809883a 	mov	r4,r17
   5619c:	84000044 	addi	r16,r16,1
   561a0:	100b883a 	mov	r5,r2
   561a4:	01800284 	movi	r6,10
   561a8:	39fff404 	addi	r7,r7,-48
   561ac:	0055f9c0 	call	55f9c <__multadd>
   561b0:	84bff81e 	bne	r16,r18,56194 <__s2b+0xb4>
   561b4:	dfc00617 	ldw	ra,24(sp)
   561b8:	dd400517 	ldw	r21,20(sp)
   561bc:	dd000417 	ldw	r20,16(sp)
   561c0:	dcc00317 	ldw	r19,12(sp)
   561c4:	dc800217 	ldw	r18,8(sp)
   561c8:	dc400117 	ldw	r17,4(sp)
   561cc:	dc000017 	ldw	r16,0(sp)
   561d0:	dec00704 	addi	sp,sp,28
   561d4:	f800283a 	ret
   561d8:	a4000284 	addi	r16,r20,10
   561dc:	1827883a 	mov	r19,r3
   561e0:	003fe906 	br	56188 <__s2b+0xa8>

000561e4 <__hi0bits>:
   561e4:	20bfffec 	andhi	r2,r4,65535
   561e8:	1000141e 	bne	r2,zero,5623c <__hi0bits+0x58>
   561ec:	2008943a 	slli	r4,r4,16
   561f0:	00800404 	movi	r2,16
   561f4:	20ffc02c 	andhi	r3,r4,65280
   561f8:	1800021e 	bne	r3,zero,56204 <__hi0bits+0x20>
   561fc:	2008923a 	slli	r4,r4,8
   56200:	10800204 	addi	r2,r2,8
   56204:	20fc002c 	andhi	r3,r4,61440
   56208:	1800021e 	bne	r3,zero,56214 <__hi0bits+0x30>
   5620c:	2008913a 	slli	r4,r4,4
   56210:	10800104 	addi	r2,r2,4
   56214:	20f0002c 	andhi	r3,r4,49152
   56218:	1800031e 	bne	r3,zero,56228 <__hi0bits+0x44>
   5621c:	2109883a 	add	r4,r4,r4
   56220:	10800084 	addi	r2,r2,2
   56224:	2109883a 	add	r4,r4,r4
   56228:	20000316 	blt	r4,zero,56238 <__hi0bits+0x54>
   5622c:	2110002c 	andhi	r4,r4,16384
   56230:	2000041e 	bne	r4,zero,56244 <__hi0bits+0x60>
   56234:	00800804 	movi	r2,32
   56238:	f800283a 	ret
   5623c:	0005883a 	mov	r2,zero
   56240:	003fec06 	br	561f4 <__hi0bits+0x10>
   56244:	10800044 	addi	r2,r2,1
   56248:	f800283a 	ret

0005624c <__lo0bits>:
   5624c:	20c00017 	ldw	r3,0(r4)
   56250:	188001cc 	andi	r2,r3,7
   56254:	10000826 	beq	r2,zero,56278 <__lo0bits+0x2c>
   56258:	1880004c 	andi	r2,r3,1
   5625c:	1000211e 	bne	r2,zero,562e4 <__lo0bits+0x98>
   56260:	1880008c 	andi	r2,r3,2
   56264:	1000211e 	bne	r2,zero,562ec <__lo0bits+0xa0>
   56268:	1806d0ba 	srli	r3,r3,2
   5626c:	00800084 	movi	r2,2
   56270:	20c00015 	stw	r3,0(r4)
   56274:	f800283a 	ret
   56278:	18bfffcc 	andi	r2,r3,65535
   5627c:	10001326 	beq	r2,zero,562cc <__lo0bits+0x80>
   56280:	0005883a 	mov	r2,zero
   56284:	19403fcc 	andi	r5,r3,255
   56288:	2800021e 	bne	r5,zero,56294 <__lo0bits+0x48>
   5628c:	1806d23a 	srli	r3,r3,8
   56290:	10800204 	addi	r2,r2,8
   56294:	194003cc 	andi	r5,r3,15
   56298:	2800021e 	bne	r5,zero,562a4 <__lo0bits+0x58>
   5629c:	1806d13a 	srli	r3,r3,4
   562a0:	10800104 	addi	r2,r2,4
   562a4:	194000cc 	andi	r5,r3,3
   562a8:	2800021e 	bne	r5,zero,562b4 <__lo0bits+0x68>
   562ac:	1806d0ba 	srli	r3,r3,2
   562b0:	10800084 	addi	r2,r2,2
   562b4:	1940004c 	andi	r5,r3,1
   562b8:	2800081e 	bne	r5,zero,562dc <__lo0bits+0x90>
   562bc:	1806d07a 	srli	r3,r3,1
   562c0:	1800051e 	bne	r3,zero,562d8 <__lo0bits+0x8c>
   562c4:	00800804 	movi	r2,32
   562c8:	f800283a 	ret
   562cc:	1806d43a 	srli	r3,r3,16
   562d0:	00800404 	movi	r2,16
   562d4:	003feb06 	br	56284 <__lo0bits+0x38>
   562d8:	10800044 	addi	r2,r2,1
   562dc:	20c00015 	stw	r3,0(r4)
   562e0:	f800283a 	ret
   562e4:	0005883a 	mov	r2,zero
   562e8:	f800283a 	ret
   562ec:	1806d07a 	srli	r3,r3,1
   562f0:	00800044 	movi	r2,1
   562f4:	20c00015 	stw	r3,0(r4)
   562f8:	f800283a 	ret

000562fc <__i2b>:
   562fc:	defffd04 	addi	sp,sp,-12
   56300:	dc000015 	stw	r16,0(sp)
   56304:	04000044 	movi	r16,1
   56308:	dc400115 	stw	r17,4(sp)
   5630c:	2823883a 	mov	r17,r5
   56310:	800b883a 	mov	r5,r16
   56314:	dfc00215 	stw	ra,8(sp)
   56318:	0055ecc0 	call	55ecc <_Balloc>
   5631c:	14400515 	stw	r17,20(r2)
   56320:	14000415 	stw	r16,16(r2)
   56324:	dfc00217 	ldw	ra,8(sp)
   56328:	dc400117 	ldw	r17,4(sp)
   5632c:	dc000017 	ldw	r16,0(sp)
   56330:	dec00304 	addi	sp,sp,12
   56334:	f800283a 	ret

00056338 <__multiply>:
   56338:	defff004 	addi	sp,sp,-64
   5633c:	dc800815 	stw	r18,32(sp)
   56340:	dc400715 	stw	r17,28(sp)
   56344:	34800417 	ldw	r18,16(r6)
   56348:	2c400417 	ldw	r17,16(r5)
   5634c:	ddc00d15 	stw	r23,52(sp)
   56350:	dc000615 	stw	r16,24(sp)
   56354:	dfc00f15 	stw	ra,60(sp)
   56358:	df000e15 	stw	fp,56(sp)
   5635c:	dd800c15 	stw	r22,48(sp)
   56360:	dd400b15 	stw	r21,44(sp)
   56364:	dd000a15 	stw	r20,40(sp)
   56368:	dcc00915 	stw	r19,36(sp)
   5636c:	2821883a 	mov	r16,r5
   56370:	302f883a 	mov	r23,r6
   56374:	8c80050e 	bge	r17,r18,5638c <__multiply+0x54>
   56378:	8807883a 	mov	r3,r17
   5637c:	3021883a 	mov	r16,r6
   56380:	9023883a 	mov	r17,r18
   56384:	282f883a 	mov	r23,r5
   56388:	1825883a 	mov	r18,r3
   5638c:	80800217 	ldw	r2,8(r16)
   56390:	8c87883a 	add	r3,r17,r18
   56394:	d8c00115 	stw	r3,4(sp)
   56398:	81400117 	ldw	r5,4(r16)
   5639c:	10c0010e 	bge	r2,r3,563a4 <__multiply+0x6c>
   563a0:	29400044 	addi	r5,r5,1
   563a4:	0055ecc0 	call	55ecc <_Balloc>
   563a8:	d8c00117 	ldw	r3,4(sp)
   563ac:	d8800515 	stw	r2,20(sp)
   563b0:	14c00504 	addi	r19,r2,20
   563b4:	1d400144 	addi	r21,r3,5
   563b8:	ad6b883a 	add	r21,r21,r21
   563bc:	ad6b883a 	add	r21,r21,r21
   563c0:	156b883a 	add	r21,r2,r21
   563c4:	dd400215 	stw	r21,8(sp)
   563c8:	9805883a 	mov	r2,r19
   563cc:	9d40042e 	bgeu	r19,r21,563e0 <__multiply+0xa8>
   563d0:	d8c00217 	ldw	r3,8(sp)
   563d4:	10000015 	stw	zero,0(r2)
   563d8:	10800104 	addi	r2,r2,4
   563dc:	10fffc36 	bltu	r2,r3,563d0 <__multiply+0x98>
   563e0:	94800144 	addi	r18,r18,5
   563e4:	94a5883a 	add	r18,r18,r18
   563e8:	94ad883a 	add	r22,r18,r18
   563ec:	8c400144 	addi	r17,r17,5
   563f0:	8c63883a 	add	r17,r17,r17
   563f4:	bdad883a 	add	r22,r23,r22
   563f8:	80c00504 	addi	r3,r16,20
   563fc:	8c63883a 	add	r17,r17,r17
   56400:	bc800504 	addi	r18,r23,20
   56404:	dd800315 	stw	r22,12(sp)
   56408:	d8c00415 	stw	r3,16(sp)
   5640c:	dcc00015 	stw	r19,0(sp)
   56410:	8463883a 	add	r17,r16,r17
   56414:	9580412e 	bgeu	r18,r22,5651c <__multiply+0x1e4>
   56418:	90800017 	ldw	r2,0(r18)
   5641c:	173fffcc 	andi	fp,r2,65535
   56420:	e0001a26 	beq	fp,zero,5648c <__multiply+0x154>
   56424:	dd000017 	ldw	r20,0(sp)
   56428:	dd800417 	ldw	r22,16(sp)
   5642c:	002b883a 	mov	r21,zero
   56430:	b4c00017 	ldw	r19,0(r22)
   56434:	a4000017 	ldw	r16,0(r20)
   56438:	e00b883a 	mov	r5,fp
   5643c:	993fffcc 	andi	r4,r19,65535
   56440:	005960c0 	call	5960c <__mulsi3>
   56444:	9808d43a 	srli	r4,r19,16
   56448:	817fffcc 	andi	r5,r16,65535
   5644c:	1145883a 	add	r2,r2,r5
   56450:	e00b883a 	mov	r5,fp
   56454:	1567883a 	add	r19,r2,r21
   56458:	8020d43a 	srli	r16,r16,16
   5645c:	005960c0 	call	5960c <__mulsi3>
   56460:	9808d43a 	srli	r4,r19,16
   56464:	1405883a 	add	r2,r2,r16
   56468:	a4c0000d 	sth	r19,0(r20)
   5646c:	110f883a 	add	r7,r2,r4
   56470:	a1c0008d 	sth	r7,2(r20)
   56474:	b5800104 	addi	r22,r22,4
   56478:	382ad43a 	srli	r21,r7,16
   5647c:	a5000104 	addi	r20,r20,4
   56480:	b47feb36 	bltu	r22,r17,56430 <__multiply+0xf8>
   56484:	a5400015 	stw	r21,0(r20)
   56488:	90800017 	ldw	r2,0(r18)
   5648c:	1038d43a 	srli	fp,r2,16
   56490:	e0001c26 	beq	fp,zero,56504 <__multiply+0x1cc>
   56494:	d8c00017 	ldw	r3,0(sp)
   56498:	dd000417 	ldw	r20,16(sp)
   5649c:	002b883a 	mov	r21,zero
   564a0:	1d800017 	ldw	r22,0(r3)
   564a4:	182f883a 	mov	r23,r3
   564a8:	b021883a 	mov	r16,r22
   564ac:	a4c00017 	ldw	r19,0(r20)
   564b0:	8020d43a 	srli	r16,r16,16
   564b4:	e00b883a 	mov	r5,fp
   564b8:	993fffcc 	andi	r4,r19,65535
   564bc:	005960c0 	call	5960c <__mulsi3>
   564c0:	1405883a 	add	r2,r2,r16
   564c4:	9808d43a 	srli	r4,r19,16
   564c8:	156b883a 	add	r21,r2,r21
   564cc:	bdc00104 	addi	r23,r23,4
   564d0:	bdbfff0d 	sth	r22,-4(r23)
   564d4:	bd7fff8d 	sth	r21,-2(r23)
   564d8:	bc000017 	ldw	r16,0(r23)
   564dc:	e00b883a 	mov	r5,fp
   564e0:	005960c0 	call	5960c <__mulsi3>
   564e4:	a80ed43a 	srli	r7,r21,16
   564e8:	813fffcc 	andi	r4,r16,65535
   564ec:	2085883a 	add	r2,r4,r2
   564f0:	11ed883a 	add	r22,r2,r7
   564f4:	a5000104 	addi	r20,r20,4
   564f8:	b02ad43a 	srli	r21,r22,16
   564fc:	a47feb36 	bltu	r20,r17,564ac <__multiply+0x174>
   56500:	bd800015 	stw	r22,0(r23)
   56504:	d8c00017 	ldw	r3,0(sp)
   56508:	94800104 	addi	r18,r18,4
   5650c:	18c00104 	addi	r3,r3,4
   56510:	d8c00015 	stw	r3,0(sp)
   56514:	d8c00317 	ldw	r3,12(sp)
   56518:	90ffbf36 	bltu	r18,r3,56418 <__multiply+0xe0>
   5651c:	d8c00117 	ldw	r3,4(sp)
   56520:	00c00c0e 	bge	zero,r3,56554 <__multiply+0x21c>
   56524:	d8c00217 	ldw	r3,8(sp)
   56528:	18bfff17 	ldw	r2,-4(r3)
   5652c:	1d7fff04 	addi	r21,r3,-4
   56530:	10000326 	beq	r2,zero,56540 <__multiply+0x208>
   56534:	00000706 	br	56554 <__multiply+0x21c>
   56538:	a8800017 	ldw	r2,0(r21)
   5653c:	1000051e 	bne	r2,zero,56554 <__multiply+0x21c>
   56540:	d8c00117 	ldw	r3,4(sp)
   56544:	ad7fff04 	addi	r21,r21,-4
   56548:	18ffffc4 	addi	r3,r3,-1
   5654c:	d8c00115 	stw	r3,4(sp)
   56550:	183ff91e 	bne	r3,zero,56538 <__multiply+0x200>
   56554:	d8800517 	ldw	r2,20(sp)
   56558:	d8c00117 	ldw	r3,4(sp)
   5655c:	10c00415 	stw	r3,16(r2)
   56560:	dfc00f17 	ldw	ra,60(sp)
   56564:	df000e17 	ldw	fp,56(sp)
   56568:	ddc00d17 	ldw	r23,52(sp)
   5656c:	dd800c17 	ldw	r22,48(sp)
   56570:	dd400b17 	ldw	r21,44(sp)
   56574:	dd000a17 	ldw	r20,40(sp)
   56578:	dcc00917 	ldw	r19,36(sp)
   5657c:	dc800817 	ldw	r18,32(sp)
   56580:	dc400717 	ldw	r17,28(sp)
   56584:	dc000617 	ldw	r16,24(sp)
   56588:	dec01004 	addi	sp,sp,64
   5658c:	f800283a 	ret

00056590 <__pow5mult>:
   56590:	defffb04 	addi	sp,sp,-20
   56594:	dcc00315 	stw	r19,12(sp)
   56598:	dc800215 	stw	r18,8(sp)
   5659c:	dc000015 	stw	r16,0(sp)
   565a0:	dfc00415 	stw	ra,16(sp)
   565a4:	dc400115 	stw	r17,4(sp)
   565a8:	308000cc 	andi	r2,r6,3
   565ac:	3021883a 	mov	r16,r6
   565b0:	2027883a 	mov	r19,r4
   565b4:	2825883a 	mov	r18,r5
   565b8:	10002e1e 	bne	r2,zero,56674 <__pow5mult+0xe4>
   565bc:	8021d0ba 	srai	r16,r16,2
   565c0:	80001a26 	beq	r16,zero,5662c <__pow5mult+0x9c>
   565c4:	9c401217 	ldw	r17,72(r19)
   565c8:	8800061e 	bne	r17,zero,565e4 <__pow5mult+0x54>
   565cc:	00003406 	br	566a0 <__pow5mult+0x110>
   565d0:	8021d07a 	srai	r16,r16,1
   565d4:	80001526 	beq	r16,zero,5662c <__pow5mult+0x9c>
   565d8:	88c00017 	ldw	r3,0(r17)
   565dc:	18001b26 	beq	r3,zero,5664c <__pow5mult+0xbc>
   565e0:	1823883a 	mov	r17,r3
   565e4:	80c0004c 	andi	r3,r16,1
   565e8:	183ff926 	beq	r3,zero,565d0 <__pow5mult+0x40>
   565ec:	900b883a 	mov	r5,r18
   565f0:	880d883a 	mov	r6,r17
   565f4:	9809883a 	mov	r4,r19
   565f8:	00563380 	call	56338 <__multiply>
   565fc:	90001b26 	beq	r18,zero,5666c <__pow5mult+0xdc>
   56600:	91000117 	ldw	r4,4(r18)
   56604:	98c01317 	ldw	r3,76(r19)
   56608:	8021d07a 	srai	r16,r16,1
   5660c:	2109883a 	add	r4,r4,r4
   56610:	2109883a 	add	r4,r4,r4
   56614:	1907883a 	add	r3,r3,r4
   56618:	19000017 	ldw	r4,0(r3)
   5661c:	91000015 	stw	r4,0(r18)
   56620:	1c800015 	stw	r18,0(r3)
   56624:	1025883a 	mov	r18,r2
   56628:	803feb1e 	bne	r16,zero,565d8 <__pow5mult+0x48>
   5662c:	9005883a 	mov	r2,r18
   56630:	dfc00417 	ldw	ra,16(sp)
   56634:	dcc00317 	ldw	r19,12(sp)
   56638:	dc800217 	ldw	r18,8(sp)
   5663c:	dc400117 	ldw	r17,4(sp)
   56640:	dc000017 	ldw	r16,0(sp)
   56644:	dec00504 	addi	sp,sp,20
   56648:	f800283a 	ret
   5664c:	880b883a 	mov	r5,r17
   56650:	880d883a 	mov	r6,r17
   56654:	9809883a 	mov	r4,r19
   56658:	00563380 	call	56338 <__multiply>
   5665c:	88800015 	stw	r2,0(r17)
   56660:	10000015 	stw	zero,0(r2)
   56664:	1023883a 	mov	r17,r2
   56668:	003fde06 	br	565e4 <__pow5mult+0x54>
   5666c:	1025883a 	mov	r18,r2
   56670:	003fd706 	br	565d0 <__pow5mult+0x40>
   56674:	10bfffc4 	addi	r2,r2,-1
   56678:	1085883a 	add	r2,r2,r2
   5667c:	00c00074 	movhi	r3,1
   56680:	18c08d04 	addi	r3,r3,564
   56684:	1085883a 	add	r2,r2,r2
   56688:	1885883a 	add	r2,r3,r2
   5668c:	11800017 	ldw	r6,0(r2)
   56690:	000f883a 	mov	r7,zero
   56694:	0055f9c0 	call	55f9c <__multadd>
   56698:	1025883a 	mov	r18,r2
   5669c:	003fc706 	br	565bc <__pow5mult+0x2c>
   566a0:	9809883a 	mov	r4,r19
   566a4:	01409c44 	movi	r5,625
   566a8:	00562fc0 	call	562fc <__i2b>
   566ac:	98801215 	stw	r2,72(r19)
   566b0:	1023883a 	mov	r17,r2
   566b4:	10000015 	stw	zero,0(r2)
   566b8:	003fca06 	br	565e4 <__pow5mult+0x54>

000566bc <__lshift>:
   566bc:	defff904 	addi	sp,sp,-28
   566c0:	dd400515 	stw	r21,20(sp)
   566c4:	dc400115 	stw	r17,4(sp)
   566c8:	2d400417 	ldw	r21,16(r5)
   566cc:	3023d17a 	srai	r17,r6,5
   566d0:	28800217 	ldw	r2,8(r5)
   566d4:	dd000415 	stw	r20,16(sp)
   566d8:	8d6b883a 	add	r21,r17,r21
   566dc:	dcc00315 	stw	r19,12(sp)
   566e0:	dc800215 	stw	r18,8(sp)
   566e4:	dc000015 	stw	r16,0(sp)
   566e8:	dfc00615 	stw	ra,24(sp)
   566ec:	ac000044 	addi	r16,r21,1
   566f0:	2825883a 	mov	r18,r5
   566f4:	3029883a 	mov	r20,r6
   566f8:	2027883a 	mov	r19,r4
   566fc:	29400117 	ldw	r5,4(r5)
   56700:	1400030e 	bge	r2,r16,56710 <__lshift+0x54>
   56704:	1085883a 	add	r2,r2,r2
   56708:	29400044 	addi	r5,r5,1
   5670c:	143ffd16 	blt	r2,r16,56704 <__lshift+0x48>
   56710:	9809883a 	mov	r4,r19
   56714:	0055ecc0 	call	55ecc <_Balloc>
   56718:	10c00504 	addi	r3,r2,20
   5671c:	0440090e 	bge	zero,r17,56744 <__lshift+0x88>
   56720:	000f883a 	mov	r7,zero
   56724:	18000015 	stw	zero,0(r3)
   56728:	39c00044 	addi	r7,r7,1
   5672c:	18c00104 	addi	r3,r3,4
   56730:	3c7ffc1e 	bne	r7,r17,56724 <__lshift+0x68>
   56734:	38c00144 	addi	r3,r7,5
   56738:	18c7883a 	add	r3,r3,r3
   5673c:	18c7883a 	add	r3,r3,r3
   56740:	10c7883a 	add	r3,r2,r3
   56744:	92000417 	ldw	r8,16(r18)
   56748:	a18007cc 	andi	r6,r20,31
   5674c:	91c00504 	addi	r7,r18,20
   56750:	42000144 	addi	r8,r8,5
   56754:	4211883a 	add	r8,r8,r8
   56758:	4211883a 	add	r8,r8,r8
   5675c:	9211883a 	add	r8,r18,r8
   56760:	30002226 	beq	r6,zero,567ec <__lshift+0x130>
   56764:	02800804 	movi	r10,32
   56768:	5195c83a 	sub	r10,r10,r6
   5676c:	000b883a 	mov	r5,zero
   56770:	3a400017 	ldw	r9,0(r7)
   56774:	18c00104 	addi	r3,r3,4
   56778:	39c00104 	addi	r7,r7,4
   5677c:	4992983a 	sll	r9,r9,r6
   56780:	2a4ab03a 	or	r5,r5,r9
   56784:	197fff15 	stw	r5,-4(r3)
   56788:	397fff17 	ldw	r5,-4(r7)
   5678c:	2a8ad83a 	srl	r5,r5,r10
   56790:	3a3ff736 	bltu	r7,r8,56770 <__lshift+0xb4>
   56794:	19400015 	stw	r5,0(r3)
   56798:	28000126 	beq	r5,zero,567a0 <__lshift+0xe4>
   5679c:	ac000084 	addi	r16,r21,2
   567a0:	91000117 	ldw	r4,4(r18)
   567a4:	98c01317 	ldw	r3,76(r19)
   567a8:	843fffc4 	addi	r16,r16,-1
   567ac:	2109883a 	add	r4,r4,r4
   567b0:	2109883a 	add	r4,r4,r4
   567b4:	1907883a 	add	r3,r3,r4
   567b8:	19000017 	ldw	r4,0(r3)
   567bc:	14000415 	stw	r16,16(r2)
   567c0:	91000015 	stw	r4,0(r18)
   567c4:	1c800015 	stw	r18,0(r3)
   567c8:	dfc00617 	ldw	ra,24(sp)
   567cc:	dd400517 	ldw	r21,20(sp)
   567d0:	dd000417 	ldw	r20,16(sp)
   567d4:	dcc00317 	ldw	r19,12(sp)
   567d8:	dc800217 	ldw	r18,8(sp)
   567dc:	dc400117 	ldw	r17,4(sp)
   567e0:	dc000017 	ldw	r16,0(sp)
   567e4:	dec00704 	addi	sp,sp,28
   567e8:	f800283a 	ret
   567ec:	39400017 	ldw	r5,0(r7)
   567f0:	18c00104 	addi	r3,r3,4
   567f4:	39c00104 	addi	r7,r7,4
   567f8:	197fff15 	stw	r5,-4(r3)
   567fc:	3a3fe82e 	bgeu	r7,r8,567a0 <__lshift+0xe4>
   56800:	39400017 	ldw	r5,0(r7)
   56804:	18c00104 	addi	r3,r3,4
   56808:	39c00104 	addi	r7,r7,4
   5680c:	197fff15 	stw	r5,-4(r3)
   56810:	3a3ff636 	bltu	r7,r8,567ec <__lshift+0x130>
   56814:	003fe206 	br	567a0 <__lshift+0xe4>

00056818 <__mcmp>:
   56818:	20800417 	ldw	r2,16(r4)
   5681c:	28c00417 	ldw	r3,16(r5)
   56820:	10c5c83a 	sub	r2,r2,r3
   56824:	10000f1e 	bne	r2,zero,56864 <__mcmp+0x4c>
   56828:	18c00144 	addi	r3,r3,5
   5682c:	18c7883a 	add	r3,r3,r3
   56830:	18c7883a 	add	r3,r3,r3
   56834:	21c00504 	addi	r7,r4,20
   56838:	28cb883a 	add	r5,r5,r3
   5683c:	20c9883a 	add	r4,r4,r3
   56840:	213fff04 	addi	r4,r4,-4
   56844:	297fff04 	addi	r5,r5,-4
   56848:	21800017 	ldw	r6,0(r4)
   5684c:	28c00017 	ldw	r3,0(r5)
   56850:	30c0021e 	bne	r6,r3,5685c <__mcmp+0x44>
   56854:	393ffa36 	bltu	r7,r4,56840 <__mcmp+0x28>
   56858:	f800283a 	ret
   5685c:	30c00236 	bltu	r6,r3,56868 <__mcmp+0x50>
   56860:	00800044 	movi	r2,1
   56864:	f800283a 	ret
   56868:	00bfffc4 	movi	r2,-1
   5686c:	f800283a 	ret

00056870 <__mdiff>:
   56870:	defffb04 	addi	sp,sp,-20
   56874:	dc000015 	stw	r16,0(sp)
   56878:	2821883a 	mov	r16,r5
   5687c:	dc800215 	stw	r18,8(sp)
   56880:	300b883a 	mov	r5,r6
   56884:	2025883a 	mov	r18,r4
   56888:	8009883a 	mov	r4,r16
   5688c:	dc400115 	stw	r17,4(sp)
   56890:	dfc00415 	stw	ra,16(sp)
   56894:	dcc00315 	stw	r19,12(sp)
   56898:	3023883a 	mov	r17,r6
   5689c:	00568180 	call	56818 <__mcmp>
   568a0:	10005026 	beq	r2,zero,569e4 <__mdiff+0x174>
   568a4:	10004a16 	blt	r2,zero,569d0 <__mdiff+0x160>
   568a8:	0027883a 	mov	r19,zero
   568ac:	81400117 	ldw	r5,4(r16)
   568b0:	9009883a 	mov	r4,r18
   568b4:	0055ecc0 	call	55ecc <_Balloc>
   568b8:	82400417 	ldw	r9,16(r16)
   568bc:	89800417 	ldw	r6,16(r17)
   568c0:	14c00315 	stw	r19,12(r2)
   568c4:	4b800144 	addi	r14,r9,5
   568c8:	31800144 	addi	r6,r6,5
   568cc:	739d883a 	add	r14,r14,r14
   568d0:	318d883a 	add	r6,r6,r6
   568d4:	739d883a 	add	r14,r14,r14
   568d8:	318d883a 	add	r6,r6,r6
   568dc:	81c00504 	addi	r7,r16,20
   568e0:	839d883a 	add	r14,r16,r14
   568e4:	8a000504 	addi	r8,r17,20
   568e8:	898d883a 	add	r6,r17,r6
   568ec:	10c00504 	addi	r3,r2,20
   568f0:	0009883a 	mov	r4,zero
   568f4:	3b000017 	ldw	r12,0(r7)
   568f8:	42c00017 	ldw	r11,0(r8)
   568fc:	42000104 	addi	r8,r8,4
   56900:	62bfffcc 	andi	r10,r12,65535
   56904:	5b7fffcc 	andi	r13,r11,65535
   56908:	5109883a 	add	r4,r10,r4
   5690c:	2355c83a 	sub	r10,r4,r13
   56910:	5816d43a 	srli	r11,r11,16
   56914:	6008d43a 	srli	r4,r12,16
   56918:	501bd43a 	srai	r13,r10,16
   5691c:	1a80000d 	sth	r10,0(r3)
   56920:	22c9c83a 	sub	r4,r4,r11
   56924:	2349883a 	add	r4,r4,r13
   56928:	1900008d 	sth	r4,2(r3)
   5692c:	39c00104 	addi	r7,r7,4
   56930:	2009d43a 	srai	r4,r4,16
   56934:	18c00104 	addi	r3,r3,4
   56938:	41bfee36 	bltu	r8,r6,568f4 <__mdiff+0x84>
   5693c:	180b883a 	mov	r5,r3
   56940:	3815883a 	mov	r10,r7
   56944:	3b80132e 	bgeu	r7,r14,56994 <__mdiff+0x124>
   56948:	3a000017 	ldw	r8,0(r7)
   5694c:	18c00104 	addi	r3,r3,4
   56950:	39c00104 	addi	r7,r7,4
   56954:	41bfffcc 	andi	r6,r8,65535
   56958:	310d883a 	add	r6,r6,r4
   5695c:	3009d43a 	srai	r4,r6,16
   56960:	4010d43a 	srli	r8,r8,16
   56964:	19bfff0d 	sth	r6,-4(r3)
   56968:	2209883a 	add	r4,r4,r8
   5696c:	193fff8d 	sth	r4,-2(r3)
   56970:	2009d43a 	srai	r4,r4,16
   56974:	3bbff436 	bltu	r7,r14,56948 <__mdiff+0xd8>
   56978:	0286303a 	nor	r3,zero,r10
   5697c:	1b87883a 	add	r3,r3,r14
   56980:	1806d0ba 	srli	r3,r3,2
   56984:	18c00044 	addi	r3,r3,1
   56988:	18c7883a 	add	r3,r3,r3
   5698c:	18c7883a 	add	r3,r3,r3
   56990:	28c7883a 	add	r3,r5,r3
   56994:	193fff17 	ldw	r4,-4(r3)
   56998:	18ffff04 	addi	r3,r3,-4
   5699c:	2000041e 	bne	r4,zero,569b0 <__mdiff+0x140>
   569a0:	18ffff04 	addi	r3,r3,-4
   569a4:	19000017 	ldw	r4,0(r3)
   569a8:	4a7fffc4 	addi	r9,r9,-1
   569ac:	203ffc26 	beq	r4,zero,569a0 <__mdiff+0x130>
   569b0:	12400415 	stw	r9,16(r2)
   569b4:	dfc00417 	ldw	ra,16(sp)
   569b8:	dcc00317 	ldw	r19,12(sp)
   569bc:	dc800217 	ldw	r18,8(sp)
   569c0:	dc400117 	ldw	r17,4(sp)
   569c4:	dc000017 	ldw	r16,0(sp)
   569c8:	dec00504 	addi	sp,sp,20
   569cc:	f800283a 	ret
   569d0:	8005883a 	mov	r2,r16
   569d4:	04c00044 	movi	r19,1
   569d8:	8821883a 	mov	r16,r17
   569dc:	1023883a 	mov	r17,r2
   569e0:	003fb206 	br	568ac <__mdiff+0x3c>
   569e4:	9009883a 	mov	r4,r18
   569e8:	000b883a 	mov	r5,zero
   569ec:	0055ecc0 	call	55ecc <_Balloc>
   569f0:	00c00044 	movi	r3,1
   569f4:	10c00415 	stw	r3,16(r2)
   569f8:	10000515 	stw	zero,20(r2)
   569fc:	dfc00417 	ldw	ra,16(sp)
   56a00:	dcc00317 	ldw	r19,12(sp)
   56a04:	dc800217 	ldw	r18,8(sp)
   56a08:	dc400117 	ldw	r17,4(sp)
   56a0c:	dc000017 	ldw	r16,0(sp)
   56a10:	dec00504 	addi	sp,sp,20
   56a14:	f800283a 	ret

00056a18 <__ulp>:
   56a18:	295ffc2c 	andhi	r5,r5,32752
   56a1c:	00bf3034 	movhi	r2,64704
   56a20:	2887883a 	add	r3,r5,r2
   56a24:	00c0020e 	bge	zero,r3,56a30 <__ulp+0x18>
   56a28:	0005883a 	mov	r2,zero
   56a2c:	f800283a 	ret
   56a30:	00c7c83a 	sub	r3,zero,r3
   56a34:	1805d53a 	srai	r2,r3,20
   56a38:	00c004c4 	movi	r3,19
   56a3c:	18800a0e 	bge	r3,r2,56a68 <__ulp+0x50>
   56a40:	01000c84 	movi	r4,50
   56a44:	0007883a 	mov	r3,zero
   56a48:	20800516 	blt	r4,r2,56a60 <__ulp+0x48>
   56a4c:	01000cc4 	movi	r4,51
   56a50:	2085c83a 	sub	r2,r4,r2
   56a54:	01000044 	movi	r4,1
   56a58:	2084983a 	sll	r2,r4,r2
   56a5c:	f800283a 	ret
   56a60:	00800044 	movi	r2,1
   56a64:	f800283a 	ret
   56a68:	00c00234 	movhi	r3,8
   56a6c:	1887d83a 	sra	r3,r3,r2
   56a70:	0005883a 	mov	r2,zero
   56a74:	f800283a 	ret

00056a78 <__b2d>:
   56a78:	defffa04 	addi	sp,sp,-24
   56a7c:	dc000015 	stw	r16,0(sp)
   56a80:	24000417 	ldw	r16,16(r4)
   56a84:	dc400115 	stw	r17,4(sp)
   56a88:	dcc00315 	stw	r19,12(sp)
   56a8c:	84000144 	addi	r16,r16,5
   56a90:	8421883a 	add	r16,r16,r16
   56a94:	8421883a 	add	r16,r16,r16
   56a98:	2421883a 	add	r16,r4,r16
   56a9c:	847fff17 	ldw	r17,-4(r16)
   56aa0:	24c00504 	addi	r19,r4,20
   56aa4:	dd000415 	stw	r20,16(sp)
   56aa8:	8809883a 	mov	r4,r17
   56aac:	dc800215 	stw	r18,8(sp)
   56ab0:	2829883a 	mov	r20,r5
   56ab4:	dfc00515 	stw	ra,20(sp)
   56ab8:	00561e40 	call	561e4 <__hi0bits>
   56abc:	00c00804 	movi	r3,32
   56ac0:	1887c83a 	sub	r3,r3,r2
   56ac4:	a0c00015 	stw	r3,0(r20)
   56ac8:	00c00284 	movi	r3,10
   56acc:	84bfff04 	addi	r18,r16,-4
   56ad0:	18801216 	blt	r3,r2,56b1c <__b2d+0xa4>
   56ad4:	010002c4 	movi	r4,11
   56ad8:	2089c83a 	sub	r4,r4,r2
   56adc:	8906d83a 	srl	r3,r17,r4
   56ae0:	18cffc34 	orhi	r3,r3,16368
   56ae4:	9c80322e 	bgeu	r19,r18,56bb0 <__b2d+0x138>
   56ae8:	817ffe17 	ldw	r5,-8(r16)
   56aec:	2908d83a 	srl	r4,r5,r4
   56af0:	10800544 	addi	r2,r2,21
   56af4:	88a2983a 	sll	r17,r17,r2
   56af8:	2444b03a 	or	r2,r4,r17
   56afc:	dfc00517 	ldw	ra,20(sp)
   56b00:	dd000417 	ldw	r20,16(sp)
   56b04:	dcc00317 	ldw	r19,12(sp)
   56b08:	dc800217 	ldw	r18,8(sp)
   56b0c:	dc400117 	ldw	r17,4(sp)
   56b10:	dc000017 	ldw	r16,0(sp)
   56b14:	dec00604 	addi	sp,sp,24
   56b18:	f800283a 	ret
   56b1c:	9c801636 	bltu	r19,r18,56b78 <__b2d+0x100>
   56b20:	113ffd44 	addi	r4,r2,-11
   56b24:	000b883a 	mov	r5,zero
   56b28:	20001726 	beq	r4,zero,56b88 <__b2d+0x110>
   56b2c:	00c00ac4 	movi	r3,43
   56b30:	1885c83a 	sub	r2,r3,r2
   56b34:	8906983a 	sll	r3,r17,r4
   56b38:	288cd83a 	srl	r6,r5,r2
   56b3c:	18cffc34 	orhi	r3,r3,16368
   56b40:	1986b03a 	or	r3,r3,r6
   56b44:	9c801c2e 	bgeu	r19,r18,56bb8 <__b2d+0x140>
   56b48:	91bfff17 	ldw	r6,-4(r18)
   56b4c:	3084d83a 	srl	r2,r6,r2
   56b50:	2908983a 	sll	r4,r5,r4
   56b54:	1104b03a 	or	r2,r2,r4
   56b58:	dfc00517 	ldw	ra,20(sp)
   56b5c:	dd000417 	ldw	r20,16(sp)
   56b60:	dcc00317 	ldw	r19,12(sp)
   56b64:	dc800217 	ldw	r18,8(sp)
   56b68:	dc400117 	ldw	r17,4(sp)
   56b6c:	dc000017 	ldw	r16,0(sp)
   56b70:	dec00604 	addi	sp,sp,24
   56b74:	f800283a 	ret
   56b78:	113ffd44 	addi	r4,r2,-11
   56b7c:	84bffe04 	addi	r18,r16,-8
   56b80:	817ffe17 	ldw	r5,-8(r16)
   56b84:	203fe91e 	bne	r4,zero,56b2c <__b2d+0xb4>
   56b88:	88cffc34 	orhi	r3,r17,16368
   56b8c:	2805883a 	mov	r2,r5
   56b90:	dfc00517 	ldw	ra,20(sp)
   56b94:	dd000417 	ldw	r20,16(sp)
   56b98:	dcc00317 	ldw	r19,12(sp)
   56b9c:	dc800217 	ldw	r18,8(sp)
   56ba0:	dc400117 	ldw	r17,4(sp)
   56ba4:	dc000017 	ldw	r16,0(sp)
   56ba8:	dec00604 	addi	sp,sp,24
   56bac:	f800283a 	ret
   56bb0:	0009883a 	mov	r4,zero
   56bb4:	003fce06 	br	56af0 <__b2d+0x78>
   56bb8:	0005883a 	mov	r2,zero
   56bbc:	003fe406 	br	56b50 <__b2d+0xd8>

00056bc0 <__d2b>:
   56bc0:	defff804 	addi	sp,sp,-32
   56bc4:	dc400315 	stw	r17,12(sp)
   56bc8:	3023883a 	mov	r17,r6
   56bcc:	dc800415 	stw	r18,16(sp)
   56bd0:	8824907a 	slli	r18,r17,1
   56bd4:	dcc00515 	stw	r19,20(sp)
   56bd8:	2827883a 	mov	r19,r5
   56bdc:	9024d57a 	srli	r18,r18,21
   56be0:	01400044 	movi	r5,1
   56be4:	dd000615 	stw	r20,24(sp)
   56be8:	dc000215 	stw	r16,8(sp)
   56bec:	dfc00715 	stw	ra,28(sp)
   56bf0:	3829883a 	mov	r20,r7
   56bf4:	0055ecc0 	call	55ecc <_Balloc>
   56bf8:	1021883a 	mov	r16,r2
   56bfc:	00800434 	movhi	r2,16
   56c00:	10bfffc4 	addi	r2,r2,-1
   56c04:	88a2703a 	and	r17,r17,r2
   56c08:	90000126 	beq	r18,zero,56c10 <__d2b+0x50>
   56c0c:	8c400434 	orhi	r17,r17,16
   56c10:	dc400015 	stw	r17,0(sp)
   56c14:	98002226 	beq	r19,zero,56ca0 <__d2b+0xe0>
   56c18:	d9000104 	addi	r4,sp,4
   56c1c:	dcc00115 	stw	r19,4(sp)
   56c20:	005624c0 	call	5624c <__lo0bits>
   56c24:	d8c00017 	ldw	r3,0(sp)
   56c28:	10002d1e 	bne	r2,zero,56ce0 <__d2b+0x120>
   56c2c:	d9000117 	ldw	r4,4(sp)
   56c30:	81000515 	stw	r4,20(r16)
   56c34:	1823003a 	cmpeq	r17,r3,zero
   56c38:	01000084 	movi	r4,2
   56c3c:	2463c83a 	sub	r17,r4,r17
   56c40:	80c00615 	stw	r3,24(r16)
   56c44:	84400415 	stw	r17,16(r16)
   56c48:	90001d1e 	bne	r18,zero,56cc0 <__d2b+0x100>
   56c4c:	88c00104 	addi	r3,r17,4
   56c50:	18c7883a 	add	r3,r3,r3
   56c54:	18c7883a 	add	r3,r3,r3
   56c58:	80c7883a 	add	r3,r16,r3
   56c5c:	19000017 	ldw	r4,0(r3)
   56c60:	10bef384 	addi	r2,r2,-1074
   56c64:	a0800015 	stw	r2,0(r20)
   56c68:	00561e40 	call	561e4 <__hi0bits>
   56c6c:	8822917a 	slli	r17,r17,5
   56c70:	d8c00817 	ldw	r3,32(sp)
   56c74:	8885c83a 	sub	r2,r17,r2
   56c78:	18800015 	stw	r2,0(r3)
   56c7c:	8005883a 	mov	r2,r16
   56c80:	dfc00717 	ldw	ra,28(sp)
   56c84:	dd000617 	ldw	r20,24(sp)
   56c88:	dcc00517 	ldw	r19,20(sp)
   56c8c:	dc800417 	ldw	r18,16(sp)
   56c90:	dc400317 	ldw	r17,12(sp)
   56c94:	dc000217 	ldw	r16,8(sp)
   56c98:	dec00804 	addi	sp,sp,32
   56c9c:	f800283a 	ret
   56ca0:	d809883a 	mov	r4,sp
   56ca4:	005624c0 	call	5624c <__lo0bits>
   56ca8:	d8c00017 	ldw	r3,0(sp)
   56cac:	04400044 	movi	r17,1
   56cb0:	84400415 	stw	r17,16(r16)
   56cb4:	80c00515 	stw	r3,20(r16)
   56cb8:	10800804 	addi	r2,r2,32
   56cbc:	903fe326 	beq	r18,zero,56c4c <__d2b+0x8c>
   56cc0:	00c00d44 	movi	r3,53
   56cc4:	94bef344 	addi	r18,r18,-1075
   56cc8:	90a5883a 	add	r18,r18,r2
   56ccc:	1885c83a 	sub	r2,r3,r2
   56cd0:	d8c00817 	ldw	r3,32(sp)
   56cd4:	a4800015 	stw	r18,0(r20)
   56cd8:	18800015 	stw	r2,0(r3)
   56cdc:	003fe706 	br	56c7c <__d2b+0xbc>
   56ce0:	01000804 	movi	r4,32
   56ce4:	2089c83a 	sub	r4,r4,r2
   56ce8:	1908983a 	sll	r4,r3,r4
   56cec:	d9400117 	ldw	r5,4(sp)
   56cf0:	1886d83a 	srl	r3,r3,r2
   56cf4:	2148b03a 	or	r4,r4,r5
   56cf8:	81000515 	stw	r4,20(r16)
   56cfc:	d8c00015 	stw	r3,0(sp)
   56d00:	003fcc06 	br	56c34 <__d2b+0x74>

00056d04 <__ratio>:
   56d04:	defff904 	addi	sp,sp,-28
   56d08:	dc400315 	stw	r17,12(sp)
   56d0c:	2823883a 	mov	r17,r5
   56d10:	d9400104 	addi	r5,sp,4
   56d14:	dfc00615 	stw	ra,24(sp)
   56d18:	dcc00515 	stw	r19,20(sp)
   56d1c:	dc800415 	stw	r18,16(sp)
   56d20:	2027883a 	mov	r19,r4
   56d24:	dc000215 	stw	r16,8(sp)
   56d28:	0056a780 	call	56a78 <__b2d>
   56d2c:	8809883a 	mov	r4,r17
   56d30:	d80b883a 	mov	r5,sp
   56d34:	1025883a 	mov	r18,r2
   56d38:	1821883a 	mov	r16,r3
   56d3c:	0056a780 	call	56a78 <__b2d>
   56d40:	99400417 	ldw	r5,16(r19)
   56d44:	89000417 	ldw	r4,16(r17)
   56d48:	d9800117 	ldw	r6,4(sp)
   56d4c:	2909c83a 	sub	r4,r5,r4
   56d50:	d9400017 	ldw	r5,0(sp)
   56d54:	2008917a 	slli	r4,r4,5
   56d58:	314bc83a 	sub	r5,r6,r5
   56d5c:	290b883a 	add	r5,r5,r4
   56d60:	01400e0e 	bge	zero,r5,56d9c <__ratio+0x98>
   56d64:	280a953a 	slli	r5,r5,20
   56d68:	2c21883a 	add	r16,r5,r16
   56d6c:	9009883a 	mov	r4,r18
   56d70:	800b883a 	mov	r5,r16
   56d74:	100d883a 	mov	r6,r2
   56d78:	180f883a 	mov	r7,r3
   56d7c:	0058fb80 	call	58fb8 <__divdf3>
   56d80:	dfc00617 	ldw	ra,24(sp)
   56d84:	dcc00517 	ldw	r19,20(sp)
   56d88:	dc800417 	ldw	r18,16(sp)
   56d8c:	dc400317 	ldw	r17,12(sp)
   56d90:	dc000217 	ldw	r16,8(sp)
   56d94:	dec00704 	addi	sp,sp,28
   56d98:	f800283a 	ret
   56d9c:	280a953a 	slli	r5,r5,20
   56da0:	1947c83a 	sub	r3,r3,r5
   56da4:	003ff106 	br	56d6c <__ratio+0x68>

00056da8 <_mprec_log10>:
   56da8:	defffe04 	addi	sp,sp,-8
   56dac:	dc000015 	stw	r16,0(sp)
   56db0:	dfc00115 	stw	ra,4(sp)
   56db4:	008005c4 	movi	r2,23
   56db8:	2021883a 	mov	r16,r4
   56dbc:	11000d0e 	bge	r2,r4,56df4 <_mprec_log10+0x4c>
   56dc0:	0005883a 	mov	r2,zero
   56dc4:	00cffc34 	movhi	r3,16368
   56dc8:	843fffc4 	addi	r16,r16,-1
   56dcc:	1009883a 	mov	r4,r2
   56dd0:	180b883a 	mov	r5,r3
   56dd4:	000d883a 	mov	r6,zero
   56dd8:	01d00934 	movhi	r7,16420
   56ddc:	0058cd40 	call	58cd4 <__muldf3>
   56de0:	803ff91e 	bne	r16,zero,56dc8 <_mprec_log10+0x20>
   56de4:	dfc00117 	ldw	ra,4(sp)
   56de8:	dc000017 	ldw	r16,0(sp)
   56dec:	dec00204 	addi	sp,sp,8
   56df0:	f800283a 	ret
   56df4:	202090fa 	slli	r16,r4,3
   56df8:	00800074 	movhi	r2,1
   56dfc:	10805b04 	addi	r2,r2,364
   56e00:	1421883a 	add	r16,r2,r16
   56e04:	80800017 	ldw	r2,0(r16)
   56e08:	80c00117 	ldw	r3,4(r16)
   56e0c:	dfc00117 	ldw	ra,4(sp)
   56e10:	dc000017 	ldw	r16,0(sp)
   56e14:	dec00204 	addi	sp,sp,8
   56e18:	f800283a 	ret

00056e1c <__copybits>:
   56e1c:	297fffc4 	addi	r5,r5,-1
   56e20:	31c00417 	ldw	r7,16(r6)
   56e24:	2811d17a 	srai	r8,r5,5
   56e28:	30800504 	addi	r2,r6,20
   56e2c:	39c00144 	addi	r7,r7,5
   56e30:	42000044 	addi	r8,r8,1
   56e34:	39cf883a 	add	r7,r7,r7
   56e38:	4211883a 	add	r8,r8,r8
   56e3c:	39cf883a 	add	r7,r7,r7
   56e40:	4211883a 	add	r8,r8,r8
   56e44:	31cf883a 	add	r7,r6,r7
   56e48:	2211883a 	add	r8,r4,r8
   56e4c:	11c00d2e 	bgeu	r2,r7,56e84 <__copybits+0x68>
   56e50:	2007883a 	mov	r3,r4
   56e54:	11400017 	ldw	r5,0(r2)
   56e58:	18c00104 	addi	r3,r3,4
   56e5c:	10800104 	addi	r2,r2,4
   56e60:	197fff15 	stw	r5,-4(r3)
   56e64:	11fffb36 	bltu	r2,r7,56e54 <__copybits+0x38>
   56e68:	3985c83a 	sub	r2,r7,r6
   56e6c:	10bffac4 	addi	r2,r2,-21
   56e70:	1004d0ba 	srli	r2,r2,2
   56e74:	10800044 	addi	r2,r2,1
   56e78:	1085883a 	add	r2,r2,r2
   56e7c:	1085883a 	add	r2,r2,r2
   56e80:	2089883a 	add	r4,r4,r2
   56e84:	2200032e 	bgeu	r4,r8,56e94 <__copybits+0x78>
   56e88:	20000015 	stw	zero,0(r4)
   56e8c:	21000104 	addi	r4,r4,4
   56e90:	223ffd36 	bltu	r4,r8,56e88 <__copybits+0x6c>
   56e94:	f800283a 	ret

00056e98 <__any_on>:
   56e98:	21800417 	ldw	r6,16(r4)
   56e9c:	2805d17a 	srai	r2,r5,5
   56ea0:	20c00504 	addi	r3,r4,20
   56ea4:	30800f0e 	bge	r6,r2,56ee4 <__any_on+0x4c>
   56ea8:	3005883a 	mov	r2,r6
   56eac:	10800144 	addi	r2,r2,5
   56eb0:	1085883a 	add	r2,r2,r2
   56eb4:	1085883a 	add	r2,r2,r2
   56eb8:	2089883a 	add	r4,r4,r2
   56ebc:	1900152e 	bgeu	r3,r4,56f14 <__any_on+0x7c>
   56ec0:	20bfff17 	ldw	r2,-4(r4)
   56ec4:	213fff04 	addi	r4,r4,-4
   56ec8:	1000041e 	bne	r2,zero,56edc <__any_on+0x44>
   56ecc:	1900112e 	bgeu	r3,r4,56f14 <__any_on+0x7c>
   56ed0:	213fff04 	addi	r4,r4,-4
   56ed4:	20800017 	ldw	r2,0(r4)
   56ed8:	103ffc26 	beq	r2,zero,56ecc <__any_on+0x34>
   56edc:	00800044 	movi	r2,1
   56ee0:	f800283a 	ret
   56ee4:	11bff10e 	bge	r2,r6,56eac <__any_on+0x14>
   56ee8:	294007cc 	andi	r5,r5,31
   56eec:	283fef26 	beq	r5,zero,56eac <__any_on+0x14>
   56ef0:	11800144 	addi	r6,r2,5
   56ef4:	318d883a 	add	r6,r6,r6
   56ef8:	318d883a 	add	r6,r6,r6
   56efc:	218d883a 	add	r6,r4,r6
   56f00:	31800017 	ldw	r6,0(r6)
   56f04:	314ed83a 	srl	r7,r6,r5
   56f08:	394a983a 	sll	r5,r7,r5
   56f0c:	29bff31e 	bne	r5,r6,56edc <__any_on+0x44>
   56f10:	003fe606 	br	56eac <__any_on+0x14>
   56f14:	0005883a 	mov	r2,zero
   56f18:	f800283a 	ret

00056f1c <_realloc_r>:
   56f1c:	defff504 	addi	sp,sp,-44
   56f20:	dd400615 	stw	r21,24(sp)
   56f24:	dc800315 	stw	r18,12(sp)
   56f28:	dc000115 	stw	r16,4(sp)
   56f2c:	dfc00a15 	stw	ra,40(sp)
   56f30:	df000915 	stw	fp,36(sp)
   56f34:	ddc00815 	stw	r23,32(sp)
   56f38:	dd800715 	stw	r22,28(sp)
   56f3c:	dd000515 	stw	r20,20(sp)
   56f40:	dcc00415 	stw	r19,16(sp)
   56f44:	dc400215 	stw	r17,8(sp)
   56f48:	2821883a 	mov	r16,r5
   56f4c:	202b883a 	mov	r21,r4
   56f50:	3025883a 	mov	r18,r6
   56f54:	28009626 	beq	r5,zero,571b0 <_realloc_r+0x294>
   56f58:	005a2340 	call	5a234 <__malloc_lock>
   56f5c:	80bfff17 	ldw	r2,-4(r16)
   56f60:	04ffff04 	movi	r19,-4
   56f64:	90c002c4 	addi	r3,r18,11
   56f68:	01000584 	movi	r4,22
   56f6c:	85bffe04 	addi	r22,r16,-8
   56f70:	14e6703a 	and	r19,r2,r19
   56f74:	20c0372e 	bgeu	r4,r3,57054 <_realloc_r+0x138>
   56f78:	047ffe04 	movi	r17,-8
   56f7c:	1c62703a 	and	r17,r3,r17
   56f80:	8807883a 	mov	r3,r17
   56f84:	88005a16 	blt	r17,zero,570f0 <_realloc_r+0x1d4>
   56f88:	8c805936 	bltu	r17,r18,570f0 <_realloc_r+0x1d4>
   56f8c:	98c0340e 	bge	r19,r3,57060 <_realloc_r+0x144>
   56f90:	07000074 	movhi	fp,1
   56f94:	e701e304 	addi	fp,fp,1932
   56f98:	e1400217 	ldw	r5,8(fp)
   56f9c:	b4c9883a 	add	r4,r22,r19
   56fa0:	29009026 	beq	r5,r4,571e4 <_realloc_r+0x2c8>
   56fa4:	21800117 	ldw	r6,4(r4)
   56fa8:	01ffff84 	movi	r7,-2
   56fac:	31ce703a 	and	r7,r6,r7
   56fb0:	21cf883a 	add	r7,r4,r7
   56fb4:	39c00117 	ldw	r7,4(r7)
   56fb8:	39c0004c 	andi	r7,r7,1
   56fbc:	38004326 	beq	r7,zero,570cc <_realloc_r+0x1b0>
   56fc0:	000d883a 	mov	r6,zero
   56fc4:	0009883a 	mov	r4,zero
   56fc8:	1080004c 	andi	r2,r2,1
   56fcc:	10005a1e 	bne	r2,zero,57138 <_realloc_r+0x21c>
   56fd0:	85fffe17 	ldw	r23,-8(r16)
   56fd4:	00bfff04 	movi	r2,-4
   56fd8:	b5efc83a 	sub	r23,r22,r23
   56fdc:	b9c00117 	ldw	r7,4(r23)
   56fe0:	388e703a 	and	r7,r7,r2
   56fe4:	3ccf883a 	add	r7,r7,r19
   56fe8:	20005226 	beq	r4,zero,57134 <_realloc_r+0x218>
   56fec:	31e9883a 	add	r20,r6,r7
   56ff0:	2140c726 	beq	r4,r5,57310 <_realloc_r+0x3f4>
   56ff4:	a0c04f16 	blt	r20,r3,57134 <_realloc_r+0x218>
   56ff8:	20800317 	ldw	r2,12(r4)
   56ffc:	20c00217 	ldw	r3,8(r4)
   57000:	99bfff04 	addi	r6,r19,-4
   57004:	01000904 	movi	r4,36
   57008:	18800315 	stw	r2,12(r3)
   5700c:	10c00215 	stw	r3,8(r2)
   57010:	b8c00217 	ldw	r3,8(r23)
   57014:	b8800317 	ldw	r2,12(r23)
   57018:	bc800204 	addi	r18,r23,8
   5701c:	18800315 	stw	r2,12(r3)
   57020:	10c00215 	stw	r3,8(r2)
   57024:	2180ed36 	bltu	r4,r6,573dc <_realloc_r+0x4c0>
   57028:	008004c4 	movi	r2,19
   5702c:	11809b2e 	bgeu	r2,r6,5729c <_realloc_r+0x380>
   57030:	80800017 	ldw	r2,0(r16)
   57034:	b8800215 	stw	r2,8(r23)
   57038:	80800117 	ldw	r2,4(r16)
   5703c:	b8800315 	stw	r2,12(r23)
   57040:	008006c4 	movi	r2,27
   57044:	1180f936 	bltu	r2,r6,5742c <_realloc_r+0x510>
   57048:	b8800404 	addi	r2,r23,16
   5704c:	80c00204 	addi	r3,r16,8
   57050:	00009406 	br	572a4 <_realloc_r+0x388>
   57054:	00c00404 	movi	r3,16
   57058:	1823883a 	mov	r17,r3
   5705c:	003fca06 	br	56f88 <_realloc_r+0x6c>
   57060:	9829883a 	mov	r20,r19
   57064:	a447c83a 	sub	r3,r20,r17
   57068:	010003c4 	movi	r4,15
   5706c:	1080004c 	andi	r2,r2,1
   57070:	20c02336 	bltu	r4,r3,57100 <_realloc_r+0x1e4>
   57074:	1504b03a 	or	r2,r2,r20
   57078:	b0800115 	stw	r2,4(r22)
   5707c:	b52d883a 	add	r22,r22,r20
   57080:	b0800117 	ldw	r2,4(r22)
   57084:	10800054 	ori	r2,r2,1
   57088:	b0800115 	stw	r2,4(r22)
   5708c:	a809883a 	mov	r4,r21
   57090:	005a2540 	call	5a254 <__malloc_unlock>
   57094:	8025883a 	mov	r18,r16
   57098:	9005883a 	mov	r2,r18
   5709c:	dfc00a17 	ldw	ra,40(sp)
   570a0:	df000917 	ldw	fp,36(sp)
   570a4:	ddc00817 	ldw	r23,32(sp)
   570a8:	dd800717 	ldw	r22,28(sp)
   570ac:	dd400617 	ldw	r21,24(sp)
   570b0:	dd000517 	ldw	r20,20(sp)
   570b4:	dcc00417 	ldw	r19,16(sp)
   570b8:	dc800317 	ldw	r18,12(sp)
   570bc:	dc400217 	ldw	r17,8(sp)
   570c0:	dc000117 	ldw	r16,4(sp)
   570c4:	dec00b04 	addi	sp,sp,44
   570c8:	f800283a 	ret
   570cc:	01ffff04 	movi	r7,-4
   570d0:	31cc703a 	and	r6,r6,r7
   570d4:	34e9883a 	add	r20,r6,r19
   570d8:	a0ffbb16 	blt	r20,r3,56fc8 <_realloc_r+0xac>
   570dc:	20c00317 	ldw	r3,12(r4)
   570e0:	21000217 	ldw	r4,8(r4)
   570e4:	20c00315 	stw	r3,12(r4)
   570e8:	19000215 	stw	r4,8(r3)
   570ec:	003fdd06 	br	57064 <_realloc_r+0x148>
   570f0:	00800304 	movi	r2,12
   570f4:	a8800015 	stw	r2,0(r21)
   570f8:	0025883a 	mov	r18,zero
   570fc:	003fe606 	br	57098 <_realloc_r+0x17c>
   57100:	1444b03a 	or	r2,r2,r17
   57104:	b0800115 	stw	r2,4(r22)
   57108:	b44b883a 	add	r5,r22,r17
   5710c:	18800054 	ori	r2,r3,1
   57110:	28800115 	stw	r2,4(r5)
   57114:	28c7883a 	add	r3,r5,r3
   57118:	18800117 	ldw	r2,4(r3)
   5711c:	a809883a 	mov	r4,r21
   57120:	29400204 	addi	r5,r5,8
   57124:	10800054 	ori	r2,r2,1
   57128:	18800115 	stw	r2,4(r3)
   5712c:	00547100 	call	54710 <_free_r>
   57130:	003fd606 	br	5708c <_realloc_r+0x170>
   57134:	38c0330e 	bge	r7,r3,57204 <_realloc_r+0x2e8>
   57138:	900b883a 	mov	r5,r18
   5713c:	a809883a 	mov	r4,r21
   57140:	00552a80 	call	552a8 <_malloc_r>
   57144:	1025883a 	mov	r18,r2
   57148:	10001626 	beq	r2,zero,571a4 <_realloc_r+0x288>
   5714c:	80bfff17 	ldw	r2,-4(r16)
   57150:	00ffff84 	movi	r3,-2
   57154:	913ffe04 	addi	r4,r18,-8
   57158:	10c6703a 	and	r3,r2,r3
   5715c:	b0c7883a 	add	r3,r22,r3
   57160:	20c09926 	beq	r4,r3,573c8 <_realloc_r+0x4ac>
   57164:	99bfff04 	addi	r6,r19,-4
   57168:	00800904 	movi	r2,36
   5716c:	11806436 	bltu	r2,r6,57300 <_realloc_r+0x3e4>
   57170:	00c004c4 	movi	r3,19
   57174:	19804036 	bltu	r3,r6,57278 <_realloc_r+0x35c>
   57178:	9005883a 	mov	r2,r18
   5717c:	8007883a 	mov	r3,r16
   57180:	19000017 	ldw	r4,0(r3)
   57184:	11000015 	stw	r4,0(r2)
   57188:	19000117 	ldw	r4,4(r3)
   5718c:	11000115 	stw	r4,4(r2)
   57190:	18c00217 	ldw	r3,8(r3)
   57194:	10c00215 	stw	r3,8(r2)
   57198:	a809883a 	mov	r4,r21
   5719c:	800b883a 	mov	r5,r16
   571a0:	00547100 	call	54710 <_free_r>
   571a4:	a809883a 	mov	r4,r21
   571a8:	005a2540 	call	5a254 <__malloc_unlock>
   571ac:	003fba06 	br	57098 <_realloc_r+0x17c>
   571b0:	300b883a 	mov	r5,r6
   571b4:	dfc00a17 	ldw	ra,40(sp)
   571b8:	df000917 	ldw	fp,36(sp)
   571bc:	ddc00817 	ldw	r23,32(sp)
   571c0:	dd800717 	ldw	r22,28(sp)
   571c4:	dd400617 	ldw	r21,24(sp)
   571c8:	dd000517 	ldw	r20,20(sp)
   571cc:	dcc00417 	ldw	r19,16(sp)
   571d0:	dc800317 	ldw	r18,12(sp)
   571d4:	dc400217 	ldw	r17,8(sp)
   571d8:	dc000117 	ldw	r16,4(sp)
   571dc:	dec00b04 	addi	sp,sp,44
   571e0:	00552a81 	jmpi	552a8 <_malloc_r>
   571e4:	29800117 	ldw	r6,4(r5)
   571e8:	013fff04 	movi	r4,-4
   571ec:	89c00404 	addi	r7,r17,16
   571f0:	310c703a 	and	r6,r6,r4
   571f4:	34c9883a 	add	r4,r6,r19
   571f8:	21c0340e 	bge	r4,r7,572cc <_realloc_r+0x3b0>
   571fc:	2809883a 	mov	r4,r5
   57200:	003f7106 	br	56fc8 <_realloc_r+0xac>
   57204:	b8800317 	ldw	r2,12(r23)
   57208:	b8c00217 	ldw	r3,8(r23)
   5720c:	99bfff04 	addi	r6,r19,-4
   57210:	01000904 	movi	r4,36
   57214:	18800315 	stw	r2,12(r3)
   57218:	10c00215 	stw	r3,8(r2)
   5721c:	bc800204 	addi	r18,r23,8
   57220:	21807836 	bltu	r4,r6,57404 <_realloc_r+0x4e8>
   57224:	008004c4 	movi	r2,19
   57228:	1180732e 	bgeu	r2,r6,573f8 <_realloc_r+0x4dc>
   5722c:	80800017 	ldw	r2,0(r16)
   57230:	b8800215 	stw	r2,8(r23)
   57234:	80800117 	ldw	r2,4(r16)
   57238:	b8800315 	stw	r2,12(r23)
   5723c:	008006c4 	movi	r2,27
   57240:	11808936 	bltu	r2,r6,57468 <_realloc_r+0x54c>
   57244:	b8800404 	addi	r2,r23,16
   57248:	80c00204 	addi	r3,r16,8
   5724c:	19000017 	ldw	r4,0(r3)
   57250:	9021883a 	mov	r16,r18
   57254:	3829883a 	mov	r20,r7
   57258:	11000015 	stw	r4,0(r2)
   5725c:	19000117 	ldw	r4,4(r3)
   57260:	b82d883a 	mov	r22,r23
   57264:	11000115 	stw	r4,4(r2)
   57268:	18c00217 	ldw	r3,8(r3)
   5726c:	10c00215 	stw	r3,8(r2)
   57270:	b8800117 	ldw	r2,4(r23)
   57274:	003f7b06 	br	57064 <_realloc_r+0x148>
   57278:	80c00017 	ldw	r3,0(r16)
   5727c:	90c00015 	stw	r3,0(r18)
   57280:	80c00117 	ldw	r3,4(r16)
   57284:	90c00115 	stw	r3,4(r18)
   57288:	00c006c4 	movi	r3,27
   5728c:	19804636 	bltu	r3,r6,573a8 <_realloc_r+0x48c>
   57290:	90800204 	addi	r2,r18,8
   57294:	80c00204 	addi	r3,r16,8
   57298:	003fb906 	br	57180 <_realloc_r+0x264>
   5729c:	9005883a 	mov	r2,r18
   572a0:	8007883a 	mov	r3,r16
   572a4:	19000017 	ldw	r4,0(r3)
   572a8:	9021883a 	mov	r16,r18
   572ac:	b82d883a 	mov	r22,r23
   572b0:	11000015 	stw	r4,0(r2)
   572b4:	19000117 	ldw	r4,4(r3)
   572b8:	11000115 	stw	r4,4(r2)
   572bc:	18c00217 	ldw	r3,8(r3)
   572c0:	10c00215 	stw	r3,8(r2)
   572c4:	b8800117 	ldw	r2,4(r23)
   572c8:	003f6606 	br	57064 <_realloc_r+0x148>
   572cc:	2445c83a 	sub	r2,r4,r17
   572d0:	b46d883a 	add	r22,r22,r17
   572d4:	10800054 	ori	r2,r2,1
   572d8:	b0800115 	stw	r2,4(r22)
   572dc:	80bfff17 	ldw	r2,-4(r16)
   572e0:	a809883a 	mov	r4,r21
   572e4:	e5800215 	stw	r22,8(fp)
   572e8:	1080004c 	andi	r2,r2,1
   572ec:	88a2b03a 	or	r17,r17,r2
   572f0:	847fff15 	stw	r17,-4(r16)
   572f4:	005a2540 	call	5a254 <__malloc_unlock>
   572f8:	8025883a 	mov	r18,r16
   572fc:	003f6606 	br	57098 <_realloc_r+0x17c>
   57300:	9009883a 	mov	r4,r18
   57304:	800b883a 	mov	r5,r16
   57308:	0055c640 	call	55c64 <memmove>
   5730c:	003fa206 	br	57198 <_realloc_r+0x27c>
   57310:	88800404 	addi	r2,r17,16
   57314:	a0bf8716 	blt	r20,r2,57134 <_realloc_r+0x218>
   57318:	b8800317 	ldw	r2,12(r23)
   5731c:	b8c00217 	ldw	r3,8(r23)
   57320:	99bfff04 	addi	r6,r19,-4
   57324:	01000904 	movi	r4,36
   57328:	18800315 	stw	r2,12(r3)
   5732c:	10c00215 	stw	r3,8(r2)
   57330:	bc800204 	addi	r18,r23,8
   57334:	21806536 	bltu	r4,r6,574cc <_realloc_r+0x5b0>
   57338:	008004c4 	movi	r2,19
   5733c:	1180592e 	bgeu	r2,r6,574a4 <_realloc_r+0x588>
   57340:	80800017 	ldw	r2,0(r16)
   57344:	b8800215 	stw	r2,8(r23)
   57348:	80800117 	ldw	r2,4(r16)
   5734c:	b8800315 	stw	r2,12(r23)
   57350:	008006c4 	movi	r2,27
   57354:	11806136 	bltu	r2,r6,574dc <_realloc_r+0x5c0>
   57358:	b8800404 	addi	r2,r23,16
   5735c:	80c00204 	addi	r3,r16,8
   57360:	19000017 	ldw	r4,0(r3)
   57364:	11000015 	stw	r4,0(r2)
   57368:	19000117 	ldw	r4,4(r3)
   5736c:	11000115 	stw	r4,4(r2)
   57370:	18c00217 	ldw	r3,8(r3)
   57374:	10c00215 	stw	r3,8(r2)
   57378:	a447c83a 	sub	r3,r20,r17
   5737c:	bc45883a 	add	r2,r23,r17
   57380:	18c00054 	ori	r3,r3,1
   57384:	10c00115 	stw	r3,4(r2)
   57388:	b8c00117 	ldw	r3,4(r23)
   5738c:	e0800215 	stw	r2,8(fp)
   57390:	a809883a 	mov	r4,r21
   57394:	1880004c 	andi	r2,r3,1
   57398:	88a2b03a 	or	r17,r17,r2
   5739c:	bc400115 	stw	r17,4(r23)
   573a0:	005a2540 	call	5a254 <__malloc_unlock>
   573a4:	003f3c06 	br	57098 <_realloc_r+0x17c>
   573a8:	80c00217 	ldw	r3,8(r16)
   573ac:	90c00215 	stw	r3,8(r18)
   573b0:	80c00317 	ldw	r3,12(r16)
   573b4:	90c00315 	stw	r3,12(r18)
   573b8:	30802426 	beq	r6,r2,5744c <_realloc_r+0x530>
   573bc:	90800404 	addi	r2,r18,16
   573c0:	80c00404 	addi	r3,r16,16
   573c4:	003f6e06 	br	57180 <_realloc_r+0x264>
   573c8:	953fff17 	ldw	r20,-4(r18)
   573cc:	00ffff04 	movi	r3,-4
   573d0:	a0e8703a 	and	r20,r20,r3
   573d4:	a4e9883a 	add	r20,r20,r19
   573d8:	003f2206 	br	57064 <_realloc_r+0x148>
   573dc:	800b883a 	mov	r5,r16
   573e0:	9009883a 	mov	r4,r18
   573e4:	0055c640 	call	55c64 <memmove>
   573e8:	9021883a 	mov	r16,r18
   573ec:	b8800117 	ldw	r2,4(r23)
   573f0:	b82d883a 	mov	r22,r23
   573f4:	003f1b06 	br	57064 <_realloc_r+0x148>
   573f8:	9005883a 	mov	r2,r18
   573fc:	8007883a 	mov	r3,r16
   57400:	003f9206 	br	5724c <_realloc_r+0x330>
   57404:	800b883a 	mov	r5,r16
   57408:	9009883a 	mov	r4,r18
   5740c:	d9c00015 	stw	r7,0(sp)
   57410:	0055c640 	call	55c64 <memmove>
   57414:	d9c00017 	ldw	r7,0(sp)
   57418:	9021883a 	mov	r16,r18
   5741c:	b8800117 	ldw	r2,4(r23)
   57420:	3829883a 	mov	r20,r7
   57424:	b82d883a 	mov	r22,r23
   57428:	003f0e06 	br	57064 <_realloc_r+0x148>
   5742c:	80800217 	ldw	r2,8(r16)
   57430:	b8800415 	stw	r2,16(r23)
   57434:	80800317 	ldw	r2,12(r16)
   57438:	b8800515 	stw	r2,20(r23)
   5743c:	31001226 	beq	r6,r4,57488 <_realloc_r+0x56c>
   57440:	b8800604 	addi	r2,r23,24
   57444:	80c00404 	addi	r3,r16,16
   57448:	003f9606 	br	572a4 <_realloc_r+0x388>
   5744c:	81000417 	ldw	r4,16(r16)
   57450:	90800604 	addi	r2,r18,24
   57454:	80c00604 	addi	r3,r16,24
   57458:	91000415 	stw	r4,16(r18)
   5745c:	81000517 	ldw	r4,20(r16)
   57460:	91000515 	stw	r4,20(r18)
   57464:	003f4606 	br	57180 <_realloc_r+0x264>
   57468:	80800217 	ldw	r2,8(r16)
   5746c:	b8800415 	stw	r2,16(r23)
   57470:	80800317 	ldw	r2,12(r16)
   57474:	b8800515 	stw	r2,20(r23)
   57478:	31000d26 	beq	r6,r4,574b0 <_realloc_r+0x594>
   5747c:	b8800604 	addi	r2,r23,24
   57480:	80c00404 	addi	r3,r16,16
   57484:	003f7106 	br	5724c <_realloc_r+0x330>
   57488:	81000417 	ldw	r4,16(r16)
   5748c:	b8800804 	addi	r2,r23,32
   57490:	80c00604 	addi	r3,r16,24
   57494:	b9000615 	stw	r4,24(r23)
   57498:	81000517 	ldw	r4,20(r16)
   5749c:	b9000715 	stw	r4,28(r23)
   574a0:	003f8006 	br	572a4 <_realloc_r+0x388>
   574a4:	9005883a 	mov	r2,r18
   574a8:	8007883a 	mov	r3,r16
   574ac:	003fac06 	br	57360 <_realloc_r+0x444>
   574b0:	81000417 	ldw	r4,16(r16)
   574b4:	b8800804 	addi	r2,r23,32
   574b8:	80c00604 	addi	r3,r16,24
   574bc:	b9000615 	stw	r4,24(r23)
   574c0:	81000517 	ldw	r4,20(r16)
   574c4:	b9000715 	stw	r4,28(r23)
   574c8:	003f6006 	br	5724c <_realloc_r+0x330>
   574cc:	9009883a 	mov	r4,r18
   574d0:	800b883a 	mov	r5,r16
   574d4:	0055c640 	call	55c64 <memmove>
   574d8:	003fa706 	br	57378 <_realloc_r+0x45c>
   574dc:	80800217 	ldw	r2,8(r16)
   574e0:	b8800415 	stw	r2,16(r23)
   574e4:	80800317 	ldw	r2,12(r16)
   574e8:	b8800515 	stw	r2,20(r23)
   574ec:	31000326 	beq	r6,r4,574fc <_realloc_r+0x5e0>
   574f0:	b8800604 	addi	r2,r23,24
   574f4:	80c00404 	addi	r3,r16,16
   574f8:	003f9906 	br	57360 <_realloc_r+0x444>
   574fc:	81000417 	ldw	r4,16(r16)
   57500:	b8800804 	addi	r2,r23,32
   57504:	80c00604 	addi	r3,r16,24
   57508:	b9000615 	stw	r4,24(r23)
   5750c:	81000517 	ldw	r4,20(r16)
   57510:	b9000715 	stw	r4,28(r23)
   57514:	003f9206 	br	57360 <_realloc_r+0x444>

00057518 <__isinfd>:
   57518:	0105c83a 	sub	r2,zero,r4
   5751c:	1108b03a 	or	r4,r2,r4
   57520:	2004d7fa 	srli	r2,r4,31
   57524:	00e00034 	movhi	r3,32768
   57528:	18ffffc4 	addi	r3,r3,-1
   5752c:	28ca703a 	and	r5,r5,r3
   57530:	1144b03a 	or	r2,r2,r5
   57534:	00dffc34 	movhi	r3,32752
   57538:	1885c83a 	sub	r2,r3,r2
   5753c:	0087c83a 	sub	r3,zero,r2
   57540:	1884b03a 	or	r2,r3,r2
   57544:	1005d7fa 	srai	r2,r2,31
   57548:	10800044 	addi	r2,r2,1
   5754c:	f800283a 	ret

00057550 <__isnand>:
   57550:	0105c83a 	sub	r2,zero,r4
   57554:	1108b03a 	or	r4,r2,r4
   57558:	2004d7fa 	srli	r2,r4,31
   5755c:	00e00034 	movhi	r3,32768
   57560:	18ffffc4 	addi	r3,r3,-1
   57564:	28ca703a 	and	r5,r5,r3
   57568:	1144b03a 	or	r2,r2,r5
   5756c:	00dffc34 	movhi	r3,32752
   57570:	1885c83a 	sub	r2,r3,r2
   57574:	1004d7fa 	srli	r2,r2,31
   57578:	f800283a 	ret

0005757c <_sbrk_r>:
   5757c:	defffd04 	addi	sp,sp,-12
   57580:	dc400115 	stw	r17,4(sp)
   57584:	dc000015 	stw	r16,0(sp)
   57588:	2023883a 	mov	r17,r4
   5758c:	04000074 	movhi	r16,1
   57590:	84078104 	addi	r16,r16,7684
   57594:	2809883a 	mov	r4,r5
   57598:	dfc00215 	stw	ra,8(sp)
   5759c:	80000015 	stw	zero,0(r16)
   575a0:	005a4380 	call	5a438 <sbrk>
   575a4:	00ffffc4 	movi	r3,-1
   575a8:	10c00526 	beq	r2,r3,575c0 <_sbrk_r+0x44>
   575ac:	dfc00217 	ldw	ra,8(sp)
   575b0:	dc400117 	ldw	r17,4(sp)
   575b4:	dc000017 	ldw	r16,0(sp)
   575b8:	dec00304 	addi	sp,sp,12
   575bc:	f800283a 	ret
   575c0:	80c00017 	ldw	r3,0(r16)
   575c4:	183ff926 	beq	r3,zero,575ac <_sbrk_r+0x30>
   575c8:	88c00015 	stw	r3,0(r17)
   575cc:	dfc00217 	ldw	ra,8(sp)
   575d0:	dc400117 	ldw	r17,4(sp)
   575d4:	dc000017 	ldw	r16,0(sp)
   575d8:	dec00304 	addi	sp,sp,12
   575dc:	f800283a 	ret

000575e0 <__sread>:
   575e0:	defffe04 	addi	sp,sp,-8
   575e4:	dc000015 	stw	r16,0(sp)
   575e8:	2821883a 	mov	r16,r5
   575ec:	2940038f 	ldh	r5,14(r5)
   575f0:	dfc00115 	stw	ra,4(sp)
   575f4:	0057be80 	call	57be8 <_read_r>
   575f8:	10000716 	blt	r2,zero,57618 <__sread+0x38>
   575fc:	80c01417 	ldw	r3,80(r16)
   57600:	1887883a 	add	r3,r3,r2
   57604:	80c01415 	stw	r3,80(r16)
   57608:	dfc00117 	ldw	ra,4(sp)
   5760c:	dc000017 	ldw	r16,0(sp)
   57610:	dec00204 	addi	sp,sp,8
   57614:	f800283a 	ret
   57618:	80c0030b 	ldhu	r3,12(r16)
   5761c:	18fbffcc 	andi	r3,r3,61439
   57620:	80c0030d 	sth	r3,12(r16)
   57624:	dfc00117 	ldw	ra,4(sp)
   57628:	dc000017 	ldw	r16,0(sp)
   5762c:	dec00204 	addi	sp,sp,8
   57630:	f800283a 	ret

00057634 <__swrite>:
   57634:	2880030b 	ldhu	r2,12(r5)
   57638:	defffb04 	addi	sp,sp,-20
   5763c:	dcc00315 	stw	r19,12(sp)
   57640:	10c0400c 	andi	r3,r2,256
   57644:	18ffffcc 	andi	r3,r3,65535
   57648:	18e0001c 	xori	r3,r3,32768
   5764c:	dc800215 	stw	r18,8(sp)
   57650:	dc400115 	stw	r17,4(sp)
   57654:	dc000015 	stw	r16,0(sp)
   57658:	dfc00415 	stw	ra,16(sp)
   5765c:	18e00004 	addi	r3,r3,-32768
   57660:	2821883a 	mov	r16,r5
   57664:	2027883a 	mov	r19,r4
   57668:	3025883a 	mov	r18,r6
   5766c:	3823883a 	mov	r17,r7
   57670:	18000526 	beq	r3,zero,57688 <__swrite+0x54>
   57674:	2940038f 	ldh	r5,14(r5)
   57678:	000d883a 	mov	r6,zero
   5767c:	01c00084 	movi	r7,2
   57680:	0057b7c0 	call	57b7c <_lseek_r>
   57684:	8080030b 	ldhu	r2,12(r16)
   57688:	8140038f 	ldh	r5,14(r16)
   5768c:	10bbffcc 	andi	r2,r2,61439
   57690:	9809883a 	mov	r4,r19
   57694:	900d883a 	mov	r6,r18
   57698:	880f883a 	mov	r7,r17
   5769c:	8080030d 	sth	r2,12(r16)
   576a0:	dfc00417 	ldw	ra,16(sp)
   576a4:	dcc00317 	ldw	r19,12(sp)
   576a8:	dc800217 	ldw	r18,8(sp)
   576ac:	dc400117 	ldw	r17,4(sp)
   576b0:	dc000017 	ldw	r16,0(sp)
   576b4:	dec00504 	addi	sp,sp,20
   576b8:	00577c41 	jmpi	577c4 <_write_r>

000576bc <__sseek>:
   576bc:	defffe04 	addi	sp,sp,-8
   576c0:	dc000015 	stw	r16,0(sp)
   576c4:	2821883a 	mov	r16,r5
   576c8:	2940038f 	ldh	r5,14(r5)
   576cc:	dfc00115 	stw	ra,4(sp)
   576d0:	0057b7c0 	call	57b7c <_lseek_r>
   576d4:	00ffffc4 	movi	r3,-1
   576d8:	10c00826 	beq	r2,r3,576fc <__sseek+0x40>
   576dc:	80c0030b 	ldhu	r3,12(r16)
   576e0:	80801415 	stw	r2,80(r16)
   576e4:	18c40014 	ori	r3,r3,4096
   576e8:	80c0030d 	sth	r3,12(r16)
   576ec:	dfc00117 	ldw	ra,4(sp)
   576f0:	dc000017 	ldw	r16,0(sp)
   576f4:	dec00204 	addi	sp,sp,8
   576f8:	f800283a 	ret
   576fc:	80c0030b 	ldhu	r3,12(r16)
   57700:	18fbffcc 	andi	r3,r3,61439
   57704:	80c0030d 	sth	r3,12(r16)
   57708:	dfc00117 	ldw	ra,4(sp)
   5770c:	dc000017 	ldw	r16,0(sp)
   57710:	dec00204 	addi	sp,sp,8
   57714:	f800283a 	ret

00057718 <__sclose>:
   57718:	2940038f 	ldh	r5,14(r5)
   5771c:	00578fc1 	jmpi	578fc <_close_r>

00057720 <strcmp>:
   57720:	2904b03a 	or	r2,r5,r4
   57724:	108000cc 	andi	r2,r2,3
   57728:	1000171e 	bne	r2,zero,57788 <strcmp+0x68>
   5772c:	20800017 	ldw	r2,0(r4)
   57730:	28c00017 	ldw	r3,0(r5)
   57734:	10c0141e 	bne	r2,r3,57788 <strcmp+0x68>
   57738:	027fbff4 	movhi	r9,65279
   5773c:	4a7fbfc4 	addi	r9,r9,-257
   57740:	1247883a 	add	r3,r2,r9
   57744:	0084303a 	nor	r2,zero,r2
   57748:	1884703a 	and	r2,r3,r2
   5774c:	02202074 	movhi	r8,32897
   57750:	42202004 	addi	r8,r8,-32640
   57754:	1204703a 	and	r2,r2,r8
   57758:	10000226 	beq	r2,zero,57764 <strcmp+0x44>
   5775c:	00001706 	br	577bc <strcmp+0x9c>
   57760:	3000161e 	bne	r6,zero,577bc <strcmp+0x9c>
   57764:	21000104 	addi	r4,r4,4
   57768:	20800017 	ldw	r2,0(r4)
   5776c:	29400104 	addi	r5,r5,4
   57770:	28c00017 	ldw	r3,0(r5)
   57774:	124f883a 	add	r7,r2,r9
   57778:	008c303a 	nor	r6,zero,r2
   5777c:	398c703a 	and	r6,r7,r6
   57780:	320c703a 	and	r6,r6,r8
   57784:	10fff626 	beq	r2,r3,57760 <strcmp+0x40>
   57788:	20800007 	ldb	r2,0(r4)
   5778c:	1000051e 	bne	r2,zero,577a4 <strcmp+0x84>
   57790:	00000606 	br	577ac <strcmp+0x8c>
   57794:	21000044 	addi	r4,r4,1
   57798:	20800007 	ldb	r2,0(r4)
   5779c:	29400044 	addi	r5,r5,1
   577a0:	10000226 	beq	r2,zero,577ac <strcmp+0x8c>
   577a4:	28c00007 	ldb	r3,0(r5)
   577a8:	10fffa26 	beq	r2,r3,57794 <strcmp+0x74>
   577ac:	20c00003 	ldbu	r3,0(r4)
   577b0:	28800003 	ldbu	r2,0(r5)
   577b4:	1885c83a 	sub	r2,r3,r2
   577b8:	f800283a 	ret
   577bc:	0005883a 	mov	r2,zero
   577c0:	f800283a 	ret

000577c4 <_write_r>:
   577c4:	defffd04 	addi	sp,sp,-12
   577c8:	dc400115 	stw	r17,4(sp)
   577cc:	dc000015 	stw	r16,0(sp)
   577d0:	2023883a 	mov	r17,r4
   577d4:	04000074 	movhi	r16,1
   577d8:	84078104 	addi	r16,r16,7684
   577dc:	2809883a 	mov	r4,r5
   577e0:	300b883a 	mov	r5,r6
   577e4:	380d883a 	mov	r6,r7
   577e8:	dfc00215 	stw	ra,8(sp)
   577ec:	80000015 	stw	zero,0(r16)
   577f0:	005a5380 	call	5a538 <write>
   577f4:	00ffffc4 	movi	r3,-1
   577f8:	10c00526 	beq	r2,r3,57810 <_write_r+0x4c>
   577fc:	dfc00217 	ldw	ra,8(sp)
   57800:	dc400117 	ldw	r17,4(sp)
   57804:	dc000017 	ldw	r16,0(sp)
   57808:	dec00304 	addi	sp,sp,12
   5780c:	f800283a 	ret
   57810:	80c00017 	ldw	r3,0(r16)
   57814:	183ff926 	beq	r3,zero,577fc <_write_r+0x38>
   57818:	88c00015 	stw	r3,0(r17)
   5781c:	dfc00217 	ldw	ra,8(sp)
   57820:	dc400117 	ldw	r17,4(sp)
   57824:	dc000017 	ldw	r16,0(sp)
   57828:	dec00304 	addi	sp,sp,12
   5782c:	f800283a 	ret

00057830 <_calloc_r>:
   57830:	defffe04 	addi	sp,sp,-8
   57834:	dc000015 	stw	r16,0(sp)
   57838:	2021883a 	mov	r16,r4
   5783c:	3009883a 	mov	r4,r6
   57840:	dfc00115 	stw	ra,4(sp)
   57844:	005960c0 	call	5960c <__mulsi3>
   57848:	8009883a 	mov	r4,r16
   5784c:	100b883a 	mov	r5,r2
   57850:	00552a80 	call	552a8 <_malloc_r>
   57854:	1021883a 	mov	r16,r2
   57858:	10000c26 	beq	r2,zero,5788c <_calloc_r+0x5c>
   5785c:	11bfff17 	ldw	r6,-4(r2)
   57860:	00ffff04 	movi	r3,-4
   57864:	00800904 	movi	r2,36
   57868:	30cc703a 	and	r6,r6,r3
   5786c:	30cd883a 	add	r6,r6,r3
   57870:	11801436 	bltu	r2,r6,578c4 <_calloc_r+0x94>
   57874:	00c004c4 	movi	r3,19
   57878:	19800936 	bltu	r3,r6,578a0 <_calloc_r+0x70>
   5787c:	8005883a 	mov	r2,r16
   57880:	10000015 	stw	zero,0(r2)
   57884:	10000115 	stw	zero,4(r2)
   57888:	10000215 	stw	zero,8(r2)
   5788c:	8005883a 	mov	r2,r16
   57890:	dfc00117 	ldw	ra,4(sp)
   57894:	dc000017 	ldw	r16,0(sp)
   57898:	dec00204 	addi	sp,sp,8
   5789c:	f800283a 	ret
   578a0:	80000015 	stw	zero,0(r16)
   578a4:	80000115 	stw	zero,4(r16)
   578a8:	00c006c4 	movi	r3,27
   578ac:	19800d2e 	bgeu	r3,r6,578e4 <_calloc_r+0xb4>
   578b0:	80000215 	stw	zero,8(r16)
   578b4:	80000315 	stw	zero,12(r16)
   578b8:	30800c26 	beq	r6,r2,578ec <_calloc_r+0xbc>
   578bc:	80800404 	addi	r2,r16,16
   578c0:	003fef06 	br	57880 <_calloc_r+0x50>
   578c4:	8009883a 	mov	r4,r16
   578c8:	000b883a 	mov	r5,zero
   578cc:	0055df00 	call	55df0 <memset>
   578d0:	8005883a 	mov	r2,r16
   578d4:	dfc00117 	ldw	ra,4(sp)
   578d8:	dc000017 	ldw	r16,0(sp)
   578dc:	dec00204 	addi	sp,sp,8
   578e0:	f800283a 	ret
   578e4:	80800204 	addi	r2,r16,8
   578e8:	003fe506 	br	57880 <_calloc_r+0x50>
   578ec:	80000415 	stw	zero,16(r16)
   578f0:	80000515 	stw	zero,20(r16)
   578f4:	80800604 	addi	r2,r16,24
   578f8:	003fe106 	br	57880 <_calloc_r+0x50>

000578fc <_close_r>:
   578fc:	defffd04 	addi	sp,sp,-12
   57900:	dc400115 	stw	r17,4(sp)
   57904:	dc000015 	stw	r16,0(sp)
   57908:	2023883a 	mov	r17,r4
   5790c:	04000074 	movhi	r16,1
   57910:	84078104 	addi	r16,r16,7684
   57914:	2809883a 	mov	r4,r5
   57918:	dfc00215 	stw	ra,8(sp)
   5791c:	80000015 	stw	zero,0(r16)
   57920:	0059cc00 	call	59cc0 <close>
   57924:	00ffffc4 	movi	r3,-1
   57928:	10c00526 	beq	r2,r3,57940 <_close_r+0x44>
   5792c:	dfc00217 	ldw	ra,8(sp)
   57930:	dc400117 	ldw	r17,4(sp)
   57934:	dc000017 	ldw	r16,0(sp)
   57938:	dec00304 	addi	sp,sp,12
   5793c:	f800283a 	ret
   57940:	80c00017 	ldw	r3,0(r16)
   57944:	183ff926 	beq	r3,zero,5792c <_close_r+0x30>
   57948:	88c00015 	stw	r3,0(r17)
   5794c:	dfc00217 	ldw	ra,8(sp)
   57950:	dc400117 	ldw	r17,4(sp)
   57954:	dc000017 	ldw	r16,0(sp)
   57958:	dec00304 	addi	sp,sp,12
   5795c:	f800283a 	ret

00057960 <_fclose_r>:
   57960:	defffc04 	addi	sp,sp,-16
   57964:	dc400115 	stw	r17,4(sp)
   57968:	dc000015 	stw	r16,0(sp)
   5796c:	dfc00315 	stw	ra,12(sp)
   57970:	dc800215 	stw	r18,8(sp)
   57974:	2821883a 	mov	r16,r5
   57978:	2023883a 	mov	r17,r4
   5797c:	28003426 	beq	r5,zero,57a50 <_fclose_r+0xf0>
   57980:	00545940 	call	54594 <__sfp_lock_acquire>
   57984:	88000226 	beq	r17,zero,57990 <_fclose_r+0x30>
   57988:	88800e17 	ldw	r2,56(r17)
   5798c:	10003826 	beq	r2,zero,57a70 <_fclose_r+0x110>
   57990:	8080030f 	ldh	r2,12(r16)
   57994:	10002526 	beq	r2,zero,57a2c <_fclose_r+0xcc>
   57998:	8809883a 	mov	r4,r17
   5799c:	800b883a 	mov	r5,r16
   579a0:	00540d00 	call	540d0 <_fflush_r>
   579a4:	1025883a 	mov	r18,r2
   579a8:	80800b17 	ldw	r2,44(r16)
   579ac:	10000426 	beq	r2,zero,579c0 <_fclose_r+0x60>
   579b0:	81400717 	ldw	r5,28(r16)
   579b4:	8809883a 	mov	r4,r17
   579b8:	103ee83a 	callr	r2
   579bc:	10003516 	blt	r2,zero,57a94 <_fclose_r+0x134>
   579c0:	8080030b 	ldhu	r2,12(r16)
   579c4:	1080200c 	andi	r2,r2,128
   579c8:	10bfffcc 	andi	r2,r2,65535
   579cc:	10a0001c 	xori	r2,r2,32768
   579d0:	10a00004 	addi	r2,r2,-32768
   579d4:	10002b1e 	bne	r2,zero,57a84 <_fclose_r+0x124>
   579d8:	81400c17 	ldw	r5,48(r16)
   579dc:	28000526 	beq	r5,zero,579f4 <_fclose_r+0x94>
   579e0:	80801004 	addi	r2,r16,64
   579e4:	28800226 	beq	r5,r2,579f0 <_fclose_r+0x90>
   579e8:	8809883a 	mov	r4,r17
   579ec:	00547100 	call	54710 <_free_r>
   579f0:	80000c15 	stw	zero,48(r16)
   579f4:	81401117 	ldw	r5,68(r16)
   579f8:	28000326 	beq	r5,zero,57a08 <_fclose_r+0xa8>
   579fc:	8809883a 	mov	r4,r17
   57a00:	00547100 	call	54710 <_free_r>
   57a04:	80001115 	stw	zero,68(r16)
   57a08:	8000030d 	sth	zero,12(r16)
   57a0c:	00545980 	call	54598 <__sfp_lock_release>
   57a10:	9005883a 	mov	r2,r18
   57a14:	dfc00317 	ldw	ra,12(sp)
   57a18:	dc800217 	ldw	r18,8(sp)
   57a1c:	dc400117 	ldw	r17,4(sp)
   57a20:	dc000017 	ldw	r16,0(sp)
   57a24:	dec00404 	addi	sp,sp,16
   57a28:	f800283a 	ret
   57a2c:	00545980 	call	54598 <__sfp_lock_release>
   57a30:	0025883a 	mov	r18,zero
   57a34:	9005883a 	mov	r2,r18
   57a38:	dfc00317 	ldw	ra,12(sp)
   57a3c:	dc800217 	ldw	r18,8(sp)
   57a40:	dc400117 	ldw	r17,4(sp)
   57a44:	dc000017 	ldw	r16,0(sp)
   57a48:	dec00404 	addi	sp,sp,16
   57a4c:	f800283a 	ret
   57a50:	0025883a 	mov	r18,zero
   57a54:	9005883a 	mov	r2,r18
   57a58:	dfc00317 	ldw	ra,12(sp)
   57a5c:	dc800217 	ldw	r18,8(sp)
   57a60:	dc400117 	ldw	r17,4(sp)
   57a64:	dc000017 	ldw	r16,0(sp)
   57a68:	dec00404 	addi	sp,sp,16
   57a6c:	f800283a 	ret
   57a70:	8809883a 	mov	r4,r17
   57a74:	005438c0 	call	5438c <__sinit>
   57a78:	8080030f 	ldh	r2,12(r16)
   57a7c:	103fc61e 	bne	r2,zero,57998 <_fclose_r+0x38>
   57a80:	003fea06 	br	57a2c <_fclose_r+0xcc>
   57a84:	81400417 	ldw	r5,16(r16)
   57a88:	8809883a 	mov	r4,r17
   57a8c:	00547100 	call	54710 <_free_r>
   57a90:	003fd106 	br	579d8 <_fclose_r+0x78>
   57a94:	04bfffc4 	movi	r18,-1
   57a98:	003fc906 	br	579c0 <_fclose_r+0x60>

00057a9c <fclose>:
   57a9c:	00800074 	movhi	r2,1
   57aa0:	10876804 	addi	r2,r2,7584
   57aa4:	200b883a 	mov	r5,r4
   57aa8:	11000017 	ldw	r4,0(r2)
   57aac:	00579601 	jmpi	57960 <_fclose_r>

00057ab0 <_fstat_r>:
   57ab0:	defffd04 	addi	sp,sp,-12
   57ab4:	dc400115 	stw	r17,4(sp)
   57ab8:	dc000015 	stw	r16,0(sp)
   57abc:	2023883a 	mov	r17,r4
   57ac0:	04000074 	movhi	r16,1
   57ac4:	84078104 	addi	r16,r16,7684
   57ac8:	2809883a 	mov	r4,r5
   57acc:	300b883a 	mov	r5,r6
   57ad0:	dfc00215 	stw	ra,8(sp)
   57ad4:	80000015 	stw	zero,0(r16)
   57ad8:	0059e080 	call	59e08 <fstat>
   57adc:	00ffffc4 	movi	r3,-1
   57ae0:	10c00526 	beq	r2,r3,57af8 <_fstat_r+0x48>
   57ae4:	dfc00217 	ldw	ra,8(sp)
   57ae8:	dc400117 	ldw	r17,4(sp)
   57aec:	dc000017 	ldw	r16,0(sp)
   57af0:	dec00304 	addi	sp,sp,12
   57af4:	f800283a 	ret
   57af8:	80c00017 	ldw	r3,0(r16)
   57afc:	183ff926 	beq	r3,zero,57ae4 <_fstat_r+0x34>
   57b00:	88c00015 	stw	r3,0(r17)
   57b04:	dfc00217 	ldw	ra,8(sp)
   57b08:	dc400117 	ldw	r17,4(sp)
   57b0c:	dc000017 	ldw	r16,0(sp)
   57b10:	dec00304 	addi	sp,sp,12
   57b14:	f800283a 	ret

00057b18 <_isatty_r>:
   57b18:	defffd04 	addi	sp,sp,-12
   57b1c:	dc400115 	stw	r17,4(sp)
   57b20:	dc000015 	stw	r16,0(sp)
   57b24:	2023883a 	mov	r17,r4
   57b28:	04000074 	movhi	r16,1
   57b2c:	84078104 	addi	r16,r16,7684
   57b30:	2809883a 	mov	r4,r5
   57b34:	dfc00215 	stw	ra,8(sp)
   57b38:	80000015 	stw	zero,0(r16)
   57b3c:	0059f080 	call	59f08 <isatty>
   57b40:	00ffffc4 	movi	r3,-1
   57b44:	10c00526 	beq	r2,r3,57b5c <_isatty_r+0x44>
   57b48:	dfc00217 	ldw	ra,8(sp)
   57b4c:	dc400117 	ldw	r17,4(sp)
   57b50:	dc000017 	ldw	r16,0(sp)
   57b54:	dec00304 	addi	sp,sp,12
   57b58:	f800283a 	ret
   57b5c:	80c00017 	ldw	r3,0(r16)
   57b60:	183ff926 	beq	r3,zero,57b48 <_isatty_r+0x30>
   57b64:	88c00015 	stw	r3,0(r17)
   57b68:	dfc00217 	ldw	ra,8(sp)
   57b6c:	dc400117 	ldw	r17,4(sp)
   57b70:	dc000017 	ldw	r16,0(sp)
   57b74:	dec00304 	addi	sp,sp,12
   57b78:	f800283a 	ret

00057b7c <_lseek_r>:
   57b7c:	defffd04 	addi	sp,sp,-12
   57b80:	dc400115 	stw	r17,4(sp)
   57b84:	dc000015 	stw	r16,0(sp)
   57b88:	2023883a 	mov	r17,r4
   57b8c:	04000074 	movhi	r16,1
   57b90:	84078104 	addi	r16,r16,7684
   57b94:	2809883a 	mov	r4,r5
   57b98:	300b883a 	mov	r5,r6
   57b9c:	380d883a 	mov	r6,r7
   57ba0:	dfc00215 	stw	ra,8(sp)
   57ba4:	80000015 	stw	zero,0(r16)
   57ba8:	005a0e80 	call	5a0e8 <lseek>
   57bac:	00ffffc4 	movi	r3,-1
   57bb0:	10c00526 	beq	r2,r3,57bc8 <_lseek_r+0x4c>
   57bb4:	dfc00217 	ldw	ra,8(sp)
   57bb8:	dc400117 	ldw	r17,4(sp)
   57bbc:	dc000017 	ldw	r16,0(sp)
   57bc0:	dec00304 	addi	sp,sp,12
   57bc4:	f800283a 	ret
   57bc8:	80c00017 	ldw	r3,0(r16)
   57bcc:	183ff926 	beq	r3,zero,57bb4 <_lseek_r+0x38>
   57bd0:	88c00015 	stw	r3,0(r17)
   57bd4:	dfc00217 	ldw	ra,8(sp)
   57bd8:	dc400117 	ldw	r17,4(sp)
   57bdc:	dc000017 	ldw	r16,0(sp)
   57be0:	dec00304 	addi	sp,sp,12
   57be4:	f800283a 	ret

00057be8 <_read_r>:
   57be8:	defffd04 	addi	sp,sp,-12
   57bec:	dc400115 	stw	r17,4(sp)
   57bf0:	dc000015 	stw	r16,0(sp)
   57bf4:	2023883a 	mov	r17,r4
   57bf8:	04000074 	movhi	r16,1
   57bfc:	84078104 	addi	r16,r16,7684
   57c00:	2809883a 	mov	r4,r5
   57c04:	300b883a 	mov	r5,r6
   57c08:	380d883a 	mov	r6,r7
   57c0c:	dfc00215 	stw	ra,8(sp)
   57c10:	80000015 	stw	zero,0(r16)
   57c14:	005a2c40 	call	5a2c4 <read>
   57c18:	00ffffc4 	movi	r3,-1
   57c1c:	10c00526 	beq	r2,r3,57c34 <_read_r+0x4c>
   57c20:	dfc00217 	ldw	ra,8(sp)
   57c24:	dc400117 	ldw	r17,4(sp)
   57c28:	dc000017 	ldw	r16,0(sp)
   57c2c:	dec00304 	addi	sp,sp,12
   57c30:	f800283a 	ret
   57c34:	80c00017 	ldw	r3,0(r16)
   57c38:	183ff926 	beq	r3,zero,57c20 <_read_r+0x38>
   57c3c:	88c00015 	stw	r3,0(r17)
   57c40:	dfc00217 	ldw	ra,8(sp)
   57c44:	dc400117 	ldw	r17,4(sp)
   57c48:	dc000017 	ldw	r16,0(sp)
   57c4c:	dec00304 	addi	sp,sp,12
   57c50:	f800283a 	ret

00057c54 <__udivdi3>:
   57c54:	defff504 	addi	sp,sp,-44
   57c58:	dd000515 	stw	r20,20(sp)
   57c5c:	dcc00415 	stw	r19,16(sp)
   57c60:	dc800315 	stw	r18,12(sp)
   57c64:	dc400215 	stw	r17,8(sp)
   57c68:	dc000115 	stw	r16,4(sp)
   57c6c:	dfc00a15 	stw	ra,40(sp)
   57c70:	df000915 	stw	fp,36(sp)
   57c74:	ddc00815 	stw	r23,32(sp)
   57c78:	dd800715 	stw	r22,28(sp)
   57c7c:	dd400615 	stw	r21,24(sp)
   57c80:	2025883a 	mov	r18,r4
   57c84:	2823883a 	mov	r17,r5
   57c88:	3021883a 	mov	r16,r6
   57c8c:	2027883a 	mov	r19,r4
   57c90:	2829883a 	mov	r20,r5
   57c94:	3800451e 	bne	r7,zero,57dac <__udivdi3+0x158>
   57c98:	2980652e 	bgeu	r5,r6,57e30 <__udivdi3+0x1dc>
   57c9c:	00bfffd4 	movui	r2,65535
   57ca0:	1180b436 	bltu	r2,r6,57f74 <__udivdi3+0x320>
   57ca4:	00803fc4 	movi	r2,255
   57ca8:	11816636 	bltu	r2,r6,58244 <__udivdi3+0x5f0>
   57cac:	0005883a 	mov	r2,zero
   57cb0:	0007883a 	mov	r3,zero
   57cb4:	3084d83a 	srl	r2,r6,r2
   57cb8:	01000074 	movhi	r4,1
   57cbc:	21009504 	addi	r4,r4,596
   57cc0:	2085883a 	add	r2,r4,r2
   57cc4:	10800003 	ldbu	r2,0(r2)
   57cc8:	10c7883a 	add	r3,r2,r3
   57ccc:	00800804 	movi	r2,32
   57cd0:	10c5c83a 	sub	r2,r2,r3
   57cd4:	10000526 	beq	r2,zero,57cec <__udivdi3+0x98>
   57cd8:	88a2983a 	sll	r17,r17,r2
   57cdc:	90c6d83a 	srl	r3,r18,r3
   57ce0:	30a0983a 	sll	r16,r6,r2
   57ce4:	90a6983a 	sll	r19,r18,r2
   57ce8:	88e8b03a 	or	r20,r17,r3
   57cec:	8022d43a 	srli	r17,r16,16
   57cf0:	a009883a 	mov	r4,r20
   57cf4:	857fffcc 	andi	r21,r16,65535
   57cf8:	880b883a 	mov	r5,r17
   57cfc:	005069c0 	call	5069c <__umodsi3>
   57d00:	a009883a 	mov	r4,r20
   57d04:	880b883a 	mov	r5,r17
   57d08:	102d883a 	mov	r22,r2
   57d0c:	00506940 	call	50694 <__udivsi3>
   57d10:	1009883a 	mov	r4,r2
   57d14:	a80b883a 	mov	r5,r21
   57d18:	1025883a 	mov	r18,r2
   57d1c:	005960c0 	call	5960c <__mulsi3>
   57d20:	1009883a 	mov	r4,r2
   57d24:	b006943a 	slli	r3,r22,16
   57d28:	9804d43a 	srli	r2,r19,16
   57d2c:	1886b03a 	or	r3,r3,r2
   57d30:	1900052e 	bgeu	r3,r4,57d48 <__udivdi3+0xf4>
   57d34:	1c07883a 	add	r3,r3,r16
   57d38:	90bfffc4 	addi	r2,r18,-1
   57d3c:	1c000136 	bltu	r3,r16,57d44 <__udivdi3+0xf0>
   57d40:	19015536 	bltu	r3,r4,58298 <__udivdi3+0x644>
   57d44:	1025883a 	mov	r18,r2
   57d48:	1929c83a 	sub	r20,r3,r4
   57d4c:	880b883a 	mov	r5,r17
   57d50:	a009883a 	mov	r4,r20
   57d54:	005069c0 	call	5069c <__umodsi3>
   57d58:	102d883a 	mov	r22,r2
   57d5c:	880b883a 	mov	r5,r17
   57d60:	a009883a 	mov	r4,r20
   57d64:	b02c943a 	slli	r22,r22,16
   57d68:	00506940 	call	50694 <__udivsi3>
   57d6c:	1009883a 	mov	r4,r2
   57d70:	a80b883a 	mov	r5,r21
   57d74:	9cffffcc 	andi	r19,r19,65535
   57d78:	1023883a 	mov	r17,r2
   57d7c:	b4e6b03a 	or	r19,r22,r19
   57d80:	005960c0 	call	5960c <__mulsi3>
   57d84:	9880052e 	bgeu	r19,r2,57d9c <__udivdi3+0x148>
   57d88:	9c27883a 	add	r19,r19,r16
   57d8c:	88ffffc4 	addi	r3,r17,-1
   57d90:	9c011436 	bltu	r19,r16,581e4 <__udivdi3+0x590>
   57d94:	9881132e 	bgeu	r19,r2,581e4 <__udivdi3+0x590>
   57d98:	8c7fff84 	addi	r17,r17,-2
   57d9c:	9004943a 	slli	r2,r18,16
   57da0:	0007883a 	mov	r3,zero
   57da4:	8884b03a 	or	r2,r17,r2
   57da8:	00001506 	br	57e00 <__udivdi3+0x1ac>
   57dac:	29c06a36 	bltu	r5,r7,57f58 <__udivdi3+0x304>
   57db0:	00bfffd4 	movui	r2,65535
   57db4:	11c06a2e 	bgeu	r2,r7,57f60 <__udivdi3+0x30c>
   57db8:	00804034 	movhi	r2,256
   57dbc:	10bfffc4 	addi	r2,r2,-1
   57dc0:	11c11436 	bltu	r2,r7,58214 <__udivdi3+0x5c0>
   57dc4:	00c00404 	movi	r3,16
   57dc8:	180b883a 	mov	r5,r3
   57dcc:	38c6d83a 	srl	r3,r7,r3
   57dd0:	01000074 	movhi	r4,1
   57dd4:	21009504 	addi	r4,r4,596
   57dd8:	04000804 	movi	r16,32
   57ddc:	20c7883a 	add	r3,r4,r3
   57de0:	18800003 	ldbu	r2,0(r3)
   57de4:	1145883a 	add	r2,r2,r5
   57de8:	80a1c83a 	sub	r16,r16,r2
   57dec:	80006e1e 	bne	r16,zero,57fa8 <__udivdi3+0x354>
   57df0:	0007883a 	mov	r3,zero
   57df4:	3c406a36 	bltu	r7,r17,57fa0 <__udivdi3+0x34c>
   57df8:	9180692e 	bgeu	r18,r6,57fa0 <__udivdi3+0x34c>
   57dfc:	0005883a 	mov	r2,zero
   57e00:	dfc00a17 	ldw	ra,40(sp)
   57e04:	df000917 	ldw	fp,36(sp)
   57e08:	ddc00817 	ldw	r23,32(sp)
   57e0c:	dd800717 	ldw	r22,28(sp)
   57e10:	dd400617 	ldw	r21,24(sp)
   57e14:	dd000517 	ldw	r20,20(sp)
   57e18:	dcc00417 	ldw	r19,16(sp)
   57e1c:	dc800317 	ldw	r18,12(sp)
   57e20:	dc400217 	ldw	r17,8(sp)
   57e24:	dc000117 	ldw	r16,4(sp)
   57e28:	dec00b04 	addi	sp,sp,44
   57e2c:	f800283a 	ret
   57e30:	3000041e 	bne	r6,zero,57e44 <__udivdi3+0x1f0>
   57e34:	01000044 	movi	r4,1
   57e38:	000b883a 	mov	r5,zero
   57e3c:	00506940 	call	50694 <__udivsi3>
   57e40:	1021883a 	mov	r16,r2
   57e44:	00bfffd4 	movui	r2,65535
   57e48:	1400502e 	bgeu	r2,r16,57f8c <__udivdi3+0x338>
   57e4c:	00804034 	movhi	r2,256
   57e50:	10bfffc4 	addi	r2,r2,-1
   57e54:	1400f536 	bltu	r2,r16,5822c <__udivdi3+0x5d8>
   57e58:	00800404 	movi	r2,16
   57e5c:	1007883a 	mov	r3,r2
   57e60:	8084d83a 	srl	r2,r16,r2
   57e64:	01000074 	movhi	r4,1
   57e68:	21009504 	addi	r4,r4,596
   57e6c:	2085883a 	add	r2,r4,r2
   57e70:	10800003 	ldbu	r2,0(r2)
   57e74:	10c7883a 	add	r3,r2,r3
   57e78:	00800804 	movi	r2,32
   57e7c:	10c5c83a 	sub	r2,r2,r3
   57e80:	1000a01e 	bne	r2,zero,58104 <__udivdi3+0x4b0>
   57e84:	8028d43a 	srli	r20,r16,16
   57e88:	8c23c83a 	sub	r17,r17,r16
   57e8c:	857fffcc 	andi	r21,r16,65535
   57e90:	00c00044 	movi	r3,1
   57e94:	8809883a 	mov	r4,r17
   57e98:	a00b883a 	mov	r5,r20
   57e9c:	d8c00015 	stw	r3,0(sp)
   57ea0:	005069c0 	call	5069c <__umodsi3>
   57ea4:	8809883a 	mov	r4,r17
   57ea8:	a00b883a 	mov	r5,r20
   57eac:	102d883a 	mov	r22,r2
   57eb0:	00506940 	call	50694 <__udivsi3>
   57eb4:	1009883a 	mov	r4,r2
   57eb8:	a80b883a 	mov	r5,r21
   57ebc:	1025883a 	mov	r18,r2
   57ec0:	005960c0 	call	5960c <__mulsi3>
   57ec4:	1009883a 	mov	r4,r2
   57ec8:	b00c943a 	slli	r6,r22,16
   57ecc:	9804d43a 	srli	r2,r19,16
   57ed0:	d8c00017 	ldw	r3,0(sp)
   57ed4:	308cb03a 	or	r6,r6,r2
   57ed8:	3100052e 	bgeu	r6,r4,57ef0 <__udivdi3+0x29c>
   57edc:	340d883a 	add	r6,r6,r16
   57ee0:	90bfffc4 	addi	r2,r18,-1
   57ee4:	34000136 	bltu	r6,r16,57eec <__udivdi3+0x298>
   57ee8:	3100e836 	bltu	r6,r4,5828c <__udivdi3+0x638>
   57eec:	1025883a 	mov	r18,r2
   57ef0:	3123c83a 	sub	r17,r6,r4
   57ef4:	8809883a 	mov	r4,r17
   57ef8:	a00b883a 	mov	r5,r20
   57efc:	d8c00015 	stw	r3,0(sp)
   57f00:	005069c0 	call	5069c <__umodsi3>
   57f04:	102d883a 	mov	r22,r2
   57f08:	8809883a 	mov	r4,r17
   57f0c:	a00b883a 	mov	r5,r20
   57f10:	b02c943a 	slli	r22,r22,16
   57f14:	00506940 	call	50694 <__udivsi3>
   57f18:	1009883a 	mov	r4,r2
   57f1c:	a80b883a 	mov	r5,r21
   57f20:	9cffffcc 	andi	r19,r19,65535
   57f24:	1023883a 	mov	r17,r2
   57f28:	b4e6b03a 	or	r19,r22,r19
   57f2c:	005960c0 	call	5960c <__mulsi3>
   57f30:	d8c00017 	ldw	r3,0(sp)
   57f34:	9880052e 	bgeu	r19,r2,57f4c <__udivdi3+0x2f8>
   57f38:	9c27883a 	add	r19,r19,r16
   57f3c:	893fffc4 	addi	r4,r17,-1
   57f40:	9c00aa36 	bltu	r19,r16,581ec <__udivdi3+0x598>
   57f44:	9880a92e 	bgeu	r19,r2,581ec <__udivdi3+0x598>
   57f48:	8c7fff84 	addi	r17,r17,-2
   57f4c:	9004943a 	slli	r2,r18,16
   57f50:	8884b03a 	or	r2,r17,r2
   57f54:	003faa06 	br	57e00 <__udivdi3+0x1ac>
   57f58:	0007883a 	mov	r3,zero
   57f5c:	003fa706 	br	57dfc <__udivdi3+0x1a8>
   57f60:	00803fc4 	movi	r2,255
   57f64:	11c0ae36 	bltu	r2,r7,58220 <__udivdi3+0x5cc>
   57f68:	0007883a 	mov	r3,zero
   57f6c:	000b883a 	mov	r5,zero
   57f70:	003f9606 	br	57dcc <__udivdi3+0x178>
   57f74:	00804034 	movhi	r2,256
   57f78:	10bfffc4 	addi	r2,r2,-1
   57f7c:	1180ae36 	bltu	r2,r6,58238 <__udivdi3+0x5e4>
   57f80:	00800404 	movi	r2,16
   57f84:	1007883a 	mov	r3,r2
   57f88:	003f4a06 	br	57cb4 <__udivdi3+0x60>
   57f8c:	00803fc4 	movi	r2,255
   57f90:	1400af36 	bltu	r2,r16,58250 <__udivdi3+0x5fc>
   57f94:	0005883a 	mov	r2,zero
   57f98:	0007883a 	mov	r3,zero
   57f9c:	003fb006 	br	57e60 <__udivdi3+0x20c>
   57fa0:	00800044 	movi	r2,1
   57fa4:	003f9606 	br	57e00 <__udivdi3+0x1ac>
   57fa8:	3c0e983a 	sll	r7,r7,r16
   57fac:	3086d83a 	srl	r3,r6,r2
   57fb0:	88aed83a 	srl	r23,r17,r2
   57fb4:	9084d83a 	srl	r2,r18,r2
   57fb8:	38e6b03a 	or	r19,r7,r3
   57fbc:	9828d43a 	srli	r20,r19,16
   57fc0:	8c22983a 	sll	r17,r17,r16
   57fc4:	b809883a 	mov	r4,r23
   57fc8:	a00b883a 	mov	r5,r20
   57fcc:	342a983a 	sll	r21,r6,r16
   57fd0:	88a2b03a 	or	r17,r17,r2
   57fd4:	005069c0 	call	5069c <__umodsi3>
   57fd8:	b809883a 	mov	r4,r23
   57fdc:	a00b883a 	mov	r5,r20
   57fe0:	1039883a 	mov	fp,r2
   57fe4:	9dbfffcc 	andi	r22,r19,65535
   57fe8:	00506940 	call	50694 <__udivsi3>
   57fec:	1009883a 	mov	r4,r2
   57ff0:	b00b883a 	mov	r5,r22
   57ff4:	102f883a 	mov	r23,r2
   57ff8:	005960c0 	call	5960c <__mulsi3>
   57ffc:	1009883a 	mov	r4,r2
   58000:	e00e943a 	slli	r7,fp,16
   58004:	8804d43a 	srli	r2,r17,16
   58008:	388eb03a 	or	r7,r7,r2
   5800c:	3900042e 	bgeu	r7,r4,58020 <__udivdi3+0x3cc>
   58010:	3ccf883a 	add	r7,r7,r19
   58014:	b8bfffc4 	addi	r2,r23,-1
   58018:	3cc0942e 	bgeu	r7,r19,5826c <__udivdi3+0x618>
   5801c:	102f883a 	mov	r23,r2
   58020:	3939c83a 	sub	fp,r7,r4
   58024:	a00b883a 	mov	r5,r20
   58028:	e009883a 	mov	r4,fp
   5802c:	005069c0 	call	5069c <__umodsi3>
   58030:	a00b883a 	mov	r5,r20
   58034:	e009883a 	mov	r4,fp
   58038:	d8800015 	stw	r2,0(sp)
   5803c:	00506940 	call	50694 <__udivsi3>
   58040:	1009883a 	mov	r4,r2
   58044:	b00b883a 	mov	r5,r22
   58048:	1029883a 	mov	r20,r2
   5804c:	005960c0 	call	5960c <__mulsi3>
   58050:	d8c00017 	ldw	r3,0(sp)
   58054:	8c7fffcc 	andi	r17,r17,65535
   58058:	1806943a 	slli	r3,r3,16
   5805c:	1c46b03a 	or	r3,r3,r17
   58060:	1880042e 	bgeu	r3,r2,58074 <__udivdi3+0x420>
   58064:	1cc7883a 	add	r3,r3,r19
   58068:	a13fffc4 	addi	r4,r20,-1
   5806c:	1cc07b2e 	bgeu	r3,r19,5825c <__udivdi3+0x608>
   58070:	2029883a 	mov	r20,r4
   58074:	b82e943a 	slli	r23,r23,16
   58078:	a822d43a 	srli	r17,r21,16
   5807c:	ad7fffcc 	andi	r21,r21,65535
   58080:	a5e8b03a 	or	r20,r20,r23
   58084:	a5bfffcc 	andi	r22,r20,65535
   58088:	b009883a 	mov	r4,r22
   5808c:	a80b883a 	mov	r5,r21
   58090:	18afc83a 	sub	r23,r3,r2
   58094:	a026d43a 	srli	r19,r20,16
   58098:	005960c0 	call	5960c <__mulsi3>
   5809c:	b009883a 	mov	r4,r22
   580a0:	880b883a 	mov	r5,r17
   580a4:	1039883a 	mov	fp,r2
   580a8:	005960c0 	call	5960c <__mulsi3>
   580ac:	a80b883a 	mov	r5,r21
   580b0:	9809883a 	mov	r4,r19
   580b4:	102d883a 	mov	r22,r2
   580b8:	005960c0 	call	5960c <__mulsi3>
   580bc:	9809883a 	mov	r4,r19
   580c0:	880b883a 	mov	r5,r17
   580c4:	102b883a 	mov	r21,r2
   580c8:	005960c0 	call	5960c <__mulsi3>
   580cc:	100b883a 	mov	r5,r2
   580d0:	e004d43a 	srli	r2,fp,16
   580d4:	ad89883a 	add	r4,r21,r22
   580d8:	2089883a 	add	r4,r4,r2
   580dc:	2540022e 	bgeu	r4,r21,580e8 <__udivdi3+0x494>
   580e0:	00800074 	movhi	r2,1
   580e4:	288b883a 	add	r5,r5,r2
   580e8:	2004d43a 	srli	r2,r4,16
   580ec:	288b883a 	add	r5,r5,r2
   580f0:	b9404536 	bltu	r23,r5,58208 <__udivdi3+0x5b4>
   580f4:	b9403f26 	beq	r23,r5,581f4 <__udivdi3+0x5a0>
   580f8:	a005883a 	mov	r2,r20
   580fc:	0007883a 	mov	r3,zero
   58100:	003f3f06 	br	57e00 <__udivdi3+0x1ac>
   58104:	80a0983a 	sll	r16,r16,r2
   58108:	88eed83a 	srl	r23,r17,r3
   5810c:	90c6d83a 	srl	r3,r18,r3
   58110:	8028d43a 	srli	r20,r16,16
   58114:	88a2983a 	sll	r17,r17,r2
   58118:	b809883a 	mov	r4,r23
   5811c:	a00b883a 	mov	r5,r20
   58120:	88ecb03a 	or	r22,r17,r3
   58124:	90a6983a 	sll	r19,r18,r2
   58128:	005069c0 	call	5069c <__umodsi3>
   5812c:	b809883a 	mov	r4,r23
   58130:	a00b883a 	mov	r5,r20
   58134:	1023883a 	mov	r17,r2
   58138:	857fffcc 	andi	r21,r16,65535
   5813c:	00506940 	call	50694 <__udivsi3>
   58140:	1009883a 	mov	r4,r2
   58144:	a80b883a 	mov	r5,r21
   58148:	102f883a 	mov	r23,r2
   5814c:	005960c0 	call	5960c <__mulsi3>
   58150:	1009883a 	mov	r4,r2
   58154:	880a943a 	slli	r5,r17,16
   58158:	b004d43a 	srli	r2,r22,16
   5815c:	288ab03a 	or	r5,r5,r2
   58160:	2900062e 	bgeu	r5,r4,5817c <__udivdi3+0x528>
   58164:	2c0b883a 	add	r5,r5,r16
   58168:	b8bfffc4 	addi	r2,r23,-1
   5816c:	2c004536 	bltu	r5,r16,58284 <__udivdi3+0x630>
   58170:	2900442e 	bgeu	r5,r4,58284 <__udivdi3+0x630>
   58174:	bdffff84 	addi	r23,r23,-2
   58178:	2c0b883a 	add	r5,r5,r16
   5817c:	2925c83a 	sub	r18,r5,r4
   58180:	9009883a 	mov	r4,r18
   58184:	a00b883a 	mov	r5,r20
   58188:	005069c0 	call	5069c <__umodsi3>
   5818c:	1023883a 	mov	r17,r2
   58190:	9009883a 	mov	r4,r18
   58194:	a00b883a 	mov	r5,r20
   58198:	8822943a 	slli	r17,r17,16
   5819c:	00506940 	call	50694 <__udivsi3>
   581a0:	1009883a 	mov	r4,r2
   581a4:	a80b883a 	mov	r5,r21
   581a8:	b5bfffcc 	andi	r22,r22,65535
   581ac:	1025883a 	mov	r18,r2
   581b0:	8da2b03a 	or	r17,r17,r22
   581b4:	005960c0 	call	5960c <__mulsi3>
   581b8:	8880062e 	bgeu	r17,r2,581d4 <__udivdi3+0x580>
   581bc:	8c23883a 	add	r17,r17,r16
   581c0:	90ffffc4 	addi	r3,r18,-1
   581c4:	8c002d36 	bltu	r17,r16,5827c <__udivdi3+0x628>
   581c8:	88802c2e 	bgeu	r17,r2,5827c <__udivdi3+0x628>
   581cc:	94bfff84 	addi	r18,r18,-2
   581d0:	8c23883a 	add	r17,r17,r16
   581d4:	b806943a 	slli	r3,r23,16
   581d8:	88a3c83a 	sub	r17,r17,r2
   581dc:	90c6b03a 	or	r3,r18,r3
   581e0:	003f2c06 	br	57e94 <__udivdi3+0x240>
   581e4:	1823883a 	mov	r17,r3
   581e8:	003eec06 	br	57d9c <__udivdi3+0x148>
   581ec:	2023883a 	mov	r17,r4
   581f0:	003f5606 	br	57f4c <__udivdi3+0x2f8>
   581f4:	2008943a 	slli	r4,r4,16
   581f8:	9420983a 	sll	r16,r18,r16
   581fc:	e73fffcc 	andi	fp,fp,65535
   58200:	2709883a 	add	r4,r4,fp
   58204:	813fbc2e 	bgeu	r16,r4,580f8 <__udivdi3+0x4a4>
   58208:	a0bfffc4 	addi	r2,r20,-1
   5820c:	0007883a 	mov	r3,zero
   58210:	003efb06 	br	57e00 <__udivdi3+0x1ac>
   58214:	00c00604 	movi	r3,24
   58218:	180b883a 	mov	r5,r3
   5821c:	003eeb06 	br	57dcc <__udivdi3+0x178>
   58220:	00c00204 	movi	r3,8
   58224:	180b883a 	mov	r5,r3
   58228:	003ee806 	br	57dcc <__udivdi3+0x178>
   5822c:	00800604 	movi	r2,24
   58230:	1007883a 	mov	r3,r2
   58234:	003f0a06 	br	57e60 <__udivdi3+0x20c>
   58238:	00800604 	movi	r2,24
   5823c:	1007883a 	mov	r3,r2
   58240:	003e9c06 	br	57cb4 <__udivdi3+0x60>
   58244:	00800204 	movi	r2,8
   58248:	1007883a 	mov	r3,r2
   5824c:	003e9906 	br	57cb4 <__udivdi3+0x60>
   58250:	00800204 	movi	r2,8
   58254:	1007883a 	mov	r3,r2
   58258:	003f0106 	br	57e60 <__udivdi3+0x20c>
   5825c:	18bf842e 	bgeu	r3,r2,58070 <__udivdi3+0x41c>
   58260:	a53fff84 	addi	r20,r20,-2
   58264:	1cc7883a 	add	r3,r3,r19
   58268:	003f8206 	br	58074 <__udivdi3+0x420>
   5826c:	393f6b2e 	bgeu	r7,r4,5801c <__udivdi3+0x3c8>
   58270:	bdffff84 	addi	r23,r23,-2
   58274:	3ccf883a 	add	r7,r7,r19
   58278:	003f6906 	br	58020 <__udivdi3+0x3cc>
   5827c:	1825883a 	mov	r18,r3
   58280:	003fd406 	br	581d4 <__udivdi3+0x580>
   58284:	102f883a 	mov	r23,r2
   58288:	003fbc06 	br	5817c <__udivdi3+0x528>
   5828c:	94bfff84 	addi	r18,r18,-2
   58290:	340d883a 	add	r6,r6,r16
   58294:	003f1606 	br	57ef0 <__udivdi3+0x29c>
   58298:	94bfff84 	addi	r18,r18,-2
   5829c:	1c07883a 	add	r3,r3,r16
   582a0:	003ea906 	br	57d48 <__udivdi3+0xf4>

000582a4 <__umoddi3>:
   582a4:	defff304 	addi	sp,sp,-52
   582a8:	dd000715 	stw	r20,28(sp)
   582ac:	dcc00615 	stw	r19,24(sp)
   582b0:	dc800515 	stw	r18,20(sp)
   582b4:	dc400415 	stw	r17,16(sp)
   582b8:	dc000315 	stw	r16,12(sp)
   582bc:	dfc00c15 	stw	ra,48(sp)
   582c0:	df000b15 	stw	fp,44(sp)
   582c4:	ddc00a15 	stw	r23,40(sp)
   582c8:	dd800915 	stw	r22,36(sp)
   582cc:	dd400815 	stw	r21,32(sp)
   582d0:	2025883a 	mov	r18,r4
   582d4:	2823883a 	mov	r17,r5
   582d8:	3021883a 	mov	r16,r6
   582dc:	2027883a 	mov	r19,r4
   582e0:	2829883a 	mov	r20,r5
   582e4:	38003a1e 	bne	r7,zero,583d0 <__umoddi3+0x12c>
   582e8:	2980522e 	bgeu	r5,r6,58434 <__umoddi3+0x190>
   582ec:	00bfffd4 	movui	r2,65535
   582f0:	1180a436 	bltu	r2,r6,58584 <__umoddi3+0x2e0>
   582f4:	00803fc4 	movi	r2,255
   582f8:	11816036 	bltu	r2,r6,5887c <__umoddi3+0x5d8>
   582fc:	0005883a 	mov	r2,zero
   58300:	0009883a 	mov	r4,zero
   58304:	3084d83a 	srl	r2,r6,r2
   58308:	00c00074 	movhi	r3,1
   5830c:	18c09504 	addi	r3,r3,596
   58310:	05400804 	movi	r21,32
   58314:	1885883a 	add	r2,r3,r2
   58318:	10800003 	ldbu	r2,0(r2)
   5831c:	1109883a 	add	r4,r2,r4
   58320:	a92bc83a 	sub	r21,r21,r4
   58324:	a8010e26 	beq	r21,zero,58760 <__umoddi3+0x4bc>
   58328:	8d62983a 	sll	r17,r17,r21
   5832c:	9108d83a 	srl	r4,r18,r4
   58330:	3560983a 	sll	r16,r6,r21
   58334:	9566983a 	sll	r19,r18,r21
   58338:	8928b03a 	or	r20,r17,r4
   5833c:	8022d43a 	srli	r17,r16,16
   58340:	a009883a 	mov	r4,r20
   58344:	84bfffcc 	andi	r18,r16,65535
   58348:	880b883a 	mov	r5,r17
   5834c:	005069c0 	call	5069c <__umodsi3>
   58350:	a009883a 	mov	r4,r20
   58354:	880b883a 	mov	r5,r17
   58358:	102d883a 	mov	r22,r2
   5835c:	00506940 	call	50694 <__udivsi3>
   58360:	1009883a 	mov	r4,r2
   58364:	900b883a 	mov	r5,r18
   58368:	005960c0 	call	5960c <__mulsi3>
   5836c:	1009883a 	mov	r4,r2
   58370:	b006943a 	slli	r3,r22,16
   58374:	9804d43a 	srli	r2,r19,16
   58378:	1886b03a 	or	r3,r3,r2
   5837c:	1900042e 	bgeu	r3,r4,58390 <__umoddi3+0xec>
   58380:	1c07883a 	add	r3,r3,r16
   58384:	1c000236 	bltu	r3,r16,58390 <__umoddi3+0xec>
   58388:	1900012e 	bgeu	r3,r4,58390 <__umoddi3+0xec>
   5838c:	1c07883a 	add	r3,r3,r16
   58390:	1929c83a 	sub	r20,r3,r4
   58394:	a009883a 	mov	r4,r20
   58398:	880b883a 	mov	r5,r17
   5839c:	005069c0 	call	5069c <__umodsi3>
   583a0:	102d883a 	mov	r22,r2
   583a4:	a009883a 	mov	r4,r20
   583a8:	880b883a 	mov	r5,r17
   583ac:	b02c943a 	slli	r22,r22,16
   583b0:	00506940 	call	50694 <__udivsi3>
   583b4:	1009883a 	mov	r4,r2
   583b8:	900b883a 	mov	r5,r18
   583bc:	9cffffcc 	andi	r19,r19,65535
   583c0:	005960c0 	call	5960c <__mulsi3>
   583c4:	b4e6b03a 	or	r19,r22,r19
   583c8:	9880572e 	bgeu	r19,r2,58528 <__umoddi3+0x284>
   583cc:	00005206 	br	58518 <__umoddi3+0x274>
   583d0:	29c05936 	bltu	r5,r7,58538 <__umoddi3+0x294>
   583d4:	00bfffd4 	movui	r2,65535
   583d8:	11c0652e 	bgeu	r2,r7,58570 <__umoddi3+0x2cc>
   583dc:	00804034 	movhi	r2,256
   583e0:	10bfffc4 	addi	r2,r2,-1
   583e4:	11c11936 	bltu	r2,r7,5884c <__umoddi3+0x5a8>
   583e8:	00c00404 	movi	r3,16
   583ec:	1827883a 	mov	r19,r3
   583f0:	38c6d83a 	srl	r3,r7,r3
   583f4:	01000074 	movhi	r4,1
   583f8:	21009504 	addi	r4,r4,596
   583fc:	04000804 	movi	r16,32
   58400:	20c7883a 	add	r3,r4,r3
   58404:	18800003 	ldbu	r2,0(r3)
   58408:	14e7883a 	add	r19,r2,r19
   5840c:	84e1c83a 	sub	r16,r16,r19
   58410:	8000671e 	bne	r16,zero,585b0 <__umoddi3+0x30c>
   58414:	3c400136 	bltu	r7,r17,5841c <__umoddi3+0x178>
   58418:	91812536 	bltu	r18,r6,588b0 <__umoddi3+0x60c>
   5841c:	9185c83a 	sub	r2,r18,r6
   58420:	89e3c83a 	sub	r17,r17,r7
   58424:	90a5803a 	cmpltu	r18,r18,r2
   58428:	8ca9c83a 	sub	r20,r17,r18
   5842c:	a007883a 	mov	r3,r20
   58430:	00004306 	br	58540 <__umoddi3+0x29c>
   58434:	3000041e 	bne	r6,zero,58448 <__umoddi3+0x1a4>
   58438:	01000044 	movi	r4,1
   5843c:	000b883a 	mov	r5,zero
   58440:	00506940 	call	50694 <__udivsi3>
   58444:	1021883a 	mov	r16,r2
   58448:	00bfffd4 	movui	r2,65535
   5844c:	1400532e 	bgeu	r2,r16,5859c <__umoddi3+0x2f8>
   58450:	00804034 	movhi	r2,256
   58454:	10bfffc4 	addi	r2,r2,-1
   58458:	14010536 	bltu	r2,r16,58870 <__umoddi3+0x5cc>
   5845c:	00800404 	movi	r2,16
   58460:	1007883a 	mov	r3,r2
   58464:	8084d83a 	srl	r2,r16,r2
   58468:	01000074 	movhi	r4,1
   5846c:	21009504 	addi	r4,r4,596
   58470:	05400804 	movi	r21,32
   58474:	2085883a 	add	r2,r4,r2
   58478:	10800003 	ldbu	r2,0(r2)
   5847c:	10c7883a 	add	r3,r2,r3
   58480:	a8ebc83a 	sub	r21,r21,r3
   58484:	a800b81e 	bne	r21,zero,58768 <__umoddi3+0x4c4>
   58488:	8028d43a 	srli	r20,r16,16
   5848c:	8c23c83a 	sub	r17,r17,r16
   58490:	85bfffcc 	andi	r22,r16,65535
   58494:	8809883a 	mov	r4,r17
   58498:	a00b883a 	mov	r5,r20
   5849c:	005069c0 	call	5069c <__umodsi3>
   584a0:	8809883a 	mov	r4,r17
   584a4:	a00b883a 	mov	r5,r20
   584a8:	1025883a 	mov	r18,r2
   584ac:	00506940 	call	50694 <__udivsi3>
   584b0:	1009883a 	mov	r4,r2
   584b4:	b00b883a 	mov	r5,r22
   584b8:	005960c0 	call	5960c <__mulsi3>
   584bc:	1009883a 	mov	r4,r2
   584c0:	9006943a 	slli	r3,r18,16
   584c4:	9804d43a 	srli	r2,r19,16
   584c8:	1886b03a 	or	r3,r3,r2
   584cc:	1900032e 	bgeu	r3,r4,584dc <__umoddi3+0x238>
   584d0:	1c07883a 	add	r3,r3,r16
   584d4:	1c000136 	bltu	r3,r16,584dc <__umoddi3+0x238>
   584d8:	1900f336 	bltu	r3,r4,588a8 <__umoddi3+0x604>
   584dc:	1923c83a 	sub	r17,r3,r4
   584e0:	8809883a 	mov	r4,r17
   584e4:	a00b883a 	mov	r5,r20
   584e8:	005069c0 	call	5069c <__umodsi3>
   584ec:	102f883a 	mov	r23,r2
   584f0:	8809883a 	mov	r4,r17
   584f4:	a00b883a 	mov	r5,r20
   584f8:	b82e943a 	slli	r23,r23,16
   584fc:	00506940 	call	50694 <__udivsi3>
   58500:	1009883a 	mov	r4,r2
   58504:	b00b883a 	mov	r5,r22
   58508:	9cffffcc 	andi	r19,r19,65535
   5850c:	005960c0 	call	5960c <__mulsi3>
   58510:	bce6b03a 	or	r19,r23,r19
   58514:	9880042e 	bgeu	r19,r2,58528 <__umoddi3+0x284>
   58518:	9c27883a 	add	r19,r19,r16
   5851c:	9c000236 	bltu	r19,r16,58528 <__umoddi3+0x284>
   58520:	9880012e 	bgeu	r19,r2,58528 <__umoddi3+0x284>
   58524:	9c27883a 	add	r19,r19,r16
   58528:	9885c83a 	sub	r2,r19,r2
   5852c:	1544d83a 	srl	r2,r2,r21
   58530:	0007883a 	mov	r3,zero
   58534:	00000206 	br	58540 <__umoddi3+0x29c>
   58538:	2005883a 	mov	r2,r4
   5853c:	2807883a 	mov	r3,r5
   58540:	dfc00c17 	ldw	ra,48(sp)
   58544:	df000b17 	ldw	fp,44(sp)
   58548:	ddc00a17 	ldw	r23,40(sp)
   5854c:	dd800917 	ldw	r22,36(sp)
   58550:	dd400817 	ldw	r21,32(sp)
   58554:	dd000717 	ldw	r20,28(sp)
   58558:	dcc00617 	ldw	r19,24(sp)
   5855c:	dc800517 	ldw	r18,20(sp)
   58560:	dc400417 	ldw	r17,16(sp)
   58564:	dc000317 	ldw	r16,12(sp)
   58568:	dec00d04 	addi	sp,sp,52
   5856c:	f800283a 	ret
   58570:	00803fc4 	movi	r2,255
   58574:	11c0b236 	bltu	r2,r7,58840 <__umoddi3+0x59c>
   58578:	0007883a 	mov	r3,zero
   5857c:	0027883a 	mov	r19,zero
   58580:	003f9b06 	br	583f0 <__umoddi3+0x14c>
   58584:	00804034 	movhi	r2,256
   58588:	10bfffc4 	addi	r2,r2,-1
   5858c:	1180b236 	bltu	r2,r6,58858 <__umoddi3+0x5b4>
   58590:	00800404 	movi	r2,16
   58594:	1009883a 	mov	r4,r2
   58598:	003f5a06 	br	58304 <__umoddi3+0x60>
   5859c:	00803fc4 	movi	r2,255
   585a0:	1400b036 	bltu	r2,r16,58864 <__umoddi3+0x5c0>
   585a4:	0005883a 	mov	r2,zero
   585a8:	0007883a 	mov	r3,zero
   585ac:	003fad06 	br	58464 <__umoddi3+0x1c0>
   585b0:	34c4d83a 	srl	r2,r6,r19
   585b4:	3c0e983a 	sll	r7,r7,r16
   585b8:	8cf8d83a 	srl	fp,r17,r19
   585bc:	8c22983a 	sll	r17,r17,r16
   585c0:	38a8b03a 	or	r20,r7,r2
   585c4:	a02ad43a 	srli	r21,r20,16
   585c8:	94c4d83a 	srl	r2,r18,r19
   585cc:	e009883a 	mov	r4,fp
   585d0:	a80b883a 	mov	r5,r21
   585d4:	342c983a 	sll	r22,r6,r16
   585d8:	88a2b03a 	or	r17,r17,r2
   585dc:	005069c0 	call	5069c <__umodsi3>
   585e0:	e009883a 	mov	r4,fp
   585e4:	a80b883a 	mov	r5,r21
   585e8:	a5ffffcc 	andi	r23,r20,65535
   585ec:	d8800215 	stw	r2,8(sp)
   585f0:	00506940 	call	50694 <__udivsi3>
   585f4:	1009883a 	mov	r4,r2
   585f8:	b80b883a 	mov	r5,r23
   585fc:	1039883a 	mov	fp,r2
   58600:	005960c0 	call	5960c <__mulsi3>
   58604:	d8c00217 	ldw	r3,8(sp)
   58608:	1009883a 	mov	r4,r2
   5860c:	8804d43a 	srli	r2,r17,16
   58610:	1806943a 	slli	r3,r3,16
   58614:	9424983a 	sll	r18,r18,r16
   58618:	1886b03a 	or	r3,r3,r2
   5861c:	1900042e 	bgeu	r3,r4,58630 <__umoddi3+0x38c>
   58620:	1d07883a 	add	r3,r3,r20
   58624:	e0bfffc4 	addi	r2,fp,-1
   58628:	1d009b2e 	bgeu	r3,r20,58898 <__umoddi3+0x5f4>
   5862c:	1039883a 	mov	fp,r2
   58630:	1907c83a 	sub	r3,r3,r4
   58634:	1809883a 	mov	r4,r3
   58638:	a80b883a 	mov	r5,r21
   5863c:	d8c00215 	stw	r3,8(sp)
   58640:	005069c0 	call	5069c <__umodsi3>
   58644:	d8c00217 	ldw	r3,8(sp)
   58648:	a80b883a 	mov	r5,r21
   5864c:	d8800015 	stw	r2,0(sp)
   58650:	1809883a 	mov	r4,r3
   58654:	00506940 	call	50694 <__udivsi3>
   58658:	1009883a 	mov	r4,r2
   5865c:	b80b883a 	mov	r5,r23
   58660:	102b883a 	mov	r21,r2
   58664:	005960c0 	call	5960c <__mulsi3>
   58668:	d9c00017 	ldw	r7,0(sp)
   5866c:	8c7fffcc 	andi	r17,r17,65535
   58670:	380e943a 	slli	r7,r7,16
   58674:	3c4eb03a 	or	r7,r7,r17
   58678:	3880042e 	bgeu	r7,r2,5868c <__umoddi3+0x3e8>
   5867c:	3d0f883a 	add	r7,r7,r20
   58680:	a8ffffc4 	addi	r3,r21,-1
   58684:	3d00802e 	bgeu	r7,r20,58888 <__umoddi3+0x5e4>
   58688:	182b883a 	mov	r21,r3
   5868c:	e038943a 	slli	fp,fp,16
   58690:	b010d43a 	srli	r8,r22,16
   58694:	b1bfffcc 	andi	r6,r22,65535
   58698:	af2ab03a 	or	r21,r21,fp
   5869c:	a82ed43a 	srli	r23,r21,16
   586a0:	ad7fffcc 	andi	r21,r21,65535
   586a4:	300b883a 	mov	r5,r6
   586a8:	a809883a 	mov	r4,r21
   586ac:	38a3c83a 	sub	r17,r7,r2
   586b0:	d9800115 	stw	r6,4(sp)
   586b4:	da000015 	stw	r8,0(sp)
   586b8:	005960c0 	call	5960c <__mulsi3>
   586bc:	da000017 	ldw	r8,0(sp)
   586c0:	a809883a 	mov	r4,r21
   586c4:	1039883a 	mov	fp,r2
   586c8:	400b883a 	mov	r5,r8
   586cc:	da000215 	stw	r8,8(sp)
   586d0:	005960c0 	call	5960c <__mulsi3>
   586d4:	d9800117 	ldw	r6,4(sp)
   586d8:	b809883a 	mov	r4,r23
   586dc:	d8800015 	stw	r2,0(sp)
   586e0:	300b883a 	mov	r5,r6
   586e4:	005960c0 	call	5960c <__mulsi3>
   586e8:	d8c00217 	ldw	r3,8(sp)
   586ec:	b809883a 	mov	r4,r23
   586f0:	102b883a 	mov	r21,r2
   586f4:	180b883a 	mov	r5,r3
   586f8:	005960c0 	call	5960c <__mulsi3>
   586fc:	d9c00017 	ldw	r7,0(sp)
   58700:	1007883a 	mov	r3,r2
   58704:	e004d43a 	srli	r2,fp,16
   58708:	a9c9883a 	add	r4,r21,r7
   5870c:	2089883a 	add	r4,r4,r2
   58710:	2540022e 	bgeu	r4,r21,5871c <__umoddi3+0x478>
   58714:	00800074 	movhi	r2,1
   58718:	1887883a 	add	r3,r3,r2
   5871c:	2004d43a 	srli	r2,r4,16
   58720:	2008943a 	slli	r4,r4,16
   58724:	e73fffcc 	andi	fp,fp,65535
   58728:	1887883a 	add	r3,r3,r2
   5872c:	2709883a 	add	r4,r4,fp
   58730:	88c03d36 	bltu	r17,r3,58828 <__umoddi3+0x584>
   58734:	88c06126 	beq	r17,r3,588bc <__umoddi3+0x618>
   58738:	88c7c83a 	sub	r3,r17,r3
   5873c:	202d883a 	mov	r22,r4
   58740:	95adc83a 	sub	r22,r18,r22
   58744:	95a5803a 	cmpltu	r18,r18,r22
   58748:	1c87c83a 	sub	r3,r3,r18
   5874c:	1cc4983a 	sll	r2,r3,r19
   58750:	b42cd83a 	srl	r22,r22,r16
   58754:	1c06d83a 	srl	r3,r3,r16
   58758:	1584b03a 	or	r2,r2,r22
   5875c:	003f7806 	br	58540 <__umoddi3+0x29c>
   58760:	002b883a 	mov	r21,zero
   58764:	003ef506 	br	5833c <__umoddi3+0x98>
   58768:	8560983a 	sll	r16,r16,r21
   5876c:	88e6d83a 	srl	r19,r17,r3
   58770:	90c6d83a 	srl	r3,r18,r3
   58774:	8028d43a 	srli	r20,r16,16
   58778:	8d62983a 	sll	r17,r17,r21
   5877c:	9809883a 	mov	r4,r19
   58780:	a00b883a 	mov	r5,r20
   58784:	88eeb03a 	or	r23,r17,r3
   58788:	005069c0 	call	5069c <__umodsi3>
   5878c:	9809883a 	mov	r4,r19
   58790:	a00b883a 	mov	r5,r20
   58794:	1023883a 	mov	r17,r2
   58798:	85bfffcc 	andi	r22,r16,65535
   5879c:	00506940 	call	50694 <__udivsi3>
   587a0:	1009883a 	mov	r4,r2
   587a4:	b00b883a 	mov	r5,r22
   587a8:	005960c0 	call	5960c <__mulsi3>
   587ac:	1007883a 	mov	r3,r2
   587b0:	8808943a 	slli	r4,r17,16
   587b4:	b804d43a 	srli	r2,r23,16
   587b8:	9566983a 	sll	r19,r18,r21
   587bc:	2088b03a 	or	r4,r4,r2
   587c0:	20c0042e 	bgeu	r4,r3,587d4 <__umoddi3+0x530>
   587c4:	2409883a 	add	r4,r4,r16
   587c8:	24000236 	bltu	r4,r16,587d4 <__umoddi3+0x530>
   587cc:	20c0012e 	bgeu	r4,r3,587d4 <__umoddi3+0x530>
   587d0:	2409883a 	add	r4,r4,r16
   587d4:	20e5c83a 	sub	r18,r4,r3
   587d8:	9009883a 	mov	r4,r18
   587dc:	a00b883a 	mov	r5,r20
   587e0:	005069c0 	call	5069c <__umodsi3>
   587e4:	1023883a 	mov	r17,r2
   587e8:	9009883a 	mov	r4,r18
   587ec:	a00b883a 	mov	r5,r20
   587f0:	8822943a 	slli	r17,r17,16
   587f4:	00506940 	call	50694 <__udivsi3>
   587f8:	1009883a 	mov	r4,r2
   587fc:	b00b883a 	mov	r5,r22
   58800:	bdffffcc 	andi	r23,r23,65535
   58804:	005960c0 	call	5960c <__mulsi3>
   58808:	8de2b03a 	or	r17,r17,r23
   5880c:	8880042e 	bgeu	r17,r2,58820 <__umoddi3+0x57c>
   58810:	8c23883a 	add	r17,r17,r16
   58814:	8c000236 	bltu	r17,r16,58820 <__umoddi3+0x57c>
   58818:	8880012e 	bgeu	r17,r2,58820 <__umoddi3+0x57c>
   5881c:	8c23883a 	add	r17,r17,r16
   58820:	88a3c83a 	sub	r17,r17,r2
   58824:	003f1b06 	br	58494 <__umoddi3+0x1f0>
   58828:	25adc83a 	sub	r22,r4,r22
   5882c:	1d07c83a 	sub	r3,r3,r20
   58830:	2589803a 	cmpltu	r4,r4,r22
   58834:	1907c83a 	sub	r3,r3,r4
   58838:	88c7c83a 	sub	r3,r17,r3
   5883c:	003fc006 	br	58740 <__umoddi3+0x49c>
   58840:	00c00204 	movi	r3,8
   58844:	1827883a 	mov	r19,r3
   58848:	003ee906 	br	583f0 <__umoddi3+0x14c>
   5884c:	00c00604 	movi	r3,24
   58850:	1827883a 	mov	r19,r3
   58854:	003ee606 	br	583f0 <__umoddi3+0x14c>
   58858:	00800604 	movi	r2,24
   5885c:	1009883a 	mov	r4,r2
   58860:	003ea806 	br	58304 <__umoddi3+0x60>
   58864:	00800204 	movi	r2,8
   58868:	1007883a 	mov	r3,r2
   5886c:	003efd06 	br	58464 <__umoddi3+0x1c0>
   58870:	00800604 	movi	r2,24
   58874:	1007883a 	mov	r3,r2
   58878:	003efa06 	br	58464 <__umoddi3+0x1c0>
   5887c:	00800204 	movi	r2,8
   58880:	1009883a 	mov	r4,r2
   58884:	003e9f06 	br	58304 <__umoddi3+0x60>
   58888:	38bf7f2e 	bgeu	r7,r2,58688 <__umoddi3+0x3e4>
   5888c:	ad7fff84 	addi	r21,r21,-2
   58890:	3d0f883a 	add	r7,r7,r20
   58894:	003f7d06 	br	5868c <__umoddi3+0x3e8>
   58898:	193f642e 	bgeu	r3,r4,5862c <__umoddi3+0x388>
   5889c:	e73fff84 	addi	fp,fp,-2
   588a0:	1d07883a 	add	r3,r3,r20
   588a4:	003f6206 	br	58630 <__umoddi3+0x38c>
   588a8:	1c07883a 	add	r3,r3,r16
   588ac:	003f0b06 	br	584dc <__umoddi3+0x238>
   588b0:	9005883a 	mov	r2,r18
   588b4:	a007883a 	mov	r3,r20
   588b8:	003f2106 	br	58540 <__umoddi3+0x29c>
   588bc:	913fda36 	bltu	r18,r4,58828 <__umoddi3+0x584>
   588c0:	202d883a 	mov	r22,r4
   588c4:	0007883a 	mov	r3,zero
   588c8:	003f9d06 	br	58740 <__umoddi3+0x49c>

000588cc <_fpadd_parts>:
   588cc:	2005883a 	mov	r2,r4
   588d0:	21000017 	ldw	r4,0(r4)
   588d4:	01c00044 	movi	r7,1
   588d8:	3900622e 	bgeu	r7,r4,58a64 <_fpadd_parts+0x198>
   588dc:	28c00017 	ldw	r3,0(r5)
   588e0:	38c05f2e 	bgeu	r7,r3,58a60 <_fpadd_parts+0x194>
   588e4:	01c00104 	movi	r7,4
   588e8:	21c0c626 	beq	r4,r7,58c04 <_fpadd_parts+0x338>
   588ec:	19c05c26 	beq	r3,r7,58a60 <_fpadd_parts+0x194>
   588f0:	01c00084 	movi	r7,2
   588f4:	19c06b26 	beq	r3,r7,58aa4 <_fpadd_parts+0x1d8>
   588f8:	21c05926 	beq	r4,r7,58a60 <_fpadd_parts+0x194>
   588fc:	11c00217 	ldw	r7,8(r2)
   58900:	2ac00217 	ldw	r11,8(r5)
   58904:	13000317 	ldw	r12,12(r2)
   58908:	13400417 	ldw	r13,16(r2)
   5890c:	3ac9c83a 	sub	r4,r7,r11
   58910:	2a000317 	ldw	r8,12(r5)
   58914:	2a400417 	ldw	r9,16(r5)
   58918:	2015883a 	mov	r10,r4
   5891c:	20007516 	blt	r4,zero,58af4 <_fpadd_parts+0x228>
   58920:	00c00fc4 	movi	r3,63
   58924:	1a805016 	blt	r3,r10,58a68 <_fpadd_parts+0x19c>
   58928:	0100870e 	bge	zero,r4,58b48 <_fpadd_parts+0x27c>
   5892c:	50fff804 	addi	r3,r10,-32
   58930:	18009916 	blt	r3,zero,58b98 <_fpadd_parts+0x2cc>
   58934:	48d6d83a 	srl	r11,r9,r3
   58938:	001d883a 	mov	r14,zero
   5893c:	18009e16 	blt	r3,zero,58bb8 <_fpadd_parts+0x2ec>
   58940:	01000044 	movi	r4,1
   58944:	20c6983a 	sll	r3,r4,r3
   58948:	0015883a 	mov	r10,zero
   5894c:	513fffc4 	addi	r4,r10,-1
   58950:	2295403a 	cmpgeu	r10,r4,r10
   58954:	1a87c83a 	sub	r3,r3,r10
   58958:	1a52703a 	and	r9,r3,r9
   5895c:	2210703a 	and	r8,r4,r8
   58960:	4250b03a 	or	r8,r8,r9
   58964:	4010c03a 	cmpne	r8,r8,zero
   58968:	42d0b03a 	or	r8,r8,r11
   5896c:	7013883a 	mov	r9,r14
   58970:	11000117 	ldw	r4,4(r2)
   58974:	28800117 	ldw	r2,4(r5)
   58978:	20804126 	beq	r4,r2,58a80 <_fpadd_parts+0x1b4>
   5897c:	20006326 	beq	r4,zero,58b0c <_fpadd_parts+0x240>
   58980:	4305c83a 	sub	r2,r8,r12
   58984:	4091803a 	cmpltu	r8,r8,r2
   58988:	4b47c83a 	sub	r3,r9,r13
   5898c:	1a07c83a 	sub	r3,r3,r8
   58990:	18006316 	blt	r3,zero,58b20 <_fpadd_parts+0x254>
   58994:	30000115 	stw	zero,4(r6)
   58998:	31c00215 	stw	r7,8(r6)
   5899c:	30800315 	stw	r2,12(r6)
   589a0:	30c00415 	stw	r3,16(r6)
   589a4:	11ffffc4 	addi	r7,r2,-1
   589a8:	388b403a 	cmpgeu	r5,r7,r2
   589ac:	194bc83a 	sub	r5,r3,r5
   589b0:	01040034 	movhi	r4,4096
   589b4:	213fffc4 	addi	r4,r4,-1
   589b8:	21401736 	bltu	r4,r5,58a18 <_fpadd_parts+0x14c>
   589bc:	29008226 	beq	r5,r4,58bc8 <_fpadd_parts+0x2fc>
   589c0:	31400217 	ldw	r5,8(r6)
   589c4:	02840034 	movhi	r10,4096
   589c8:	52bfffc4 	addi	r10,r10,-1
   589cc:	033fff84 	movi	r12,-2
   589d0:	297fffc4 	addi	r5,r5,-1
   589d4:	00000106 	br	589dc <_fpadd_parts+0x110>
   589d8:	3a804a26 	beq	r7,r10,58b04 <_fpadd_parts+0x238>
   589dc:	1089883a 	add	r4,r2,r2
   589e0:	2091803a 	cmpltu	r8,r4,r2
   589e4:	18c7883a 	add	r3,r3,r3
   589e8:	227fffc4 	addi	r9,r4,-1
   589ec:	40d1883a 	add	r8,r8,r3
   589f0:	490f403a 	cmpgeu	r7,r9,r4
   589f4:	41cfc83a 	sub	r7,r8,r7
   589f8:	2817883a 	mov	r11,r5
   589fc:	2005883a 	mov	r2,r4
   58a00:	4007883a 	mov	r3,r8
   58a04:	297fffc4 	addi	r5,r5,-1
   58a08:	51fff32e 	bgeu	r10,r7,589d8 <_fpadd_parts+0x10c>
   58a0c:	31000315 	stw	r4,12(r6)
   58a10:	32000415 	stw	r8,16(r6)
   58a14:	32c00215 	stw	r11,8(r6)
   58a18:	010000c4 	movi	r4,3
   58a1c:	31000015 	stw	r4,0(r6)
   58a20:	01080034 	movhi	r4,8192
   58a24:	213fffc4 	addi	r4,r4,-1
   58a28:	20c00b2e 	bgeu	r4,r3,58a58 <_fpadd_parts+0x18c>
   58a2c:	180e97fa 	slli	r7,r3,31
   58a30:	1008d07a 	srli	r4,r2,1
   58a34:	31400217 	ldw	r5,8(r6)
   58a38:	1806d07a 	srli	r3,r3,1
   58a3c:	1080004c 	andi	r2,r2,1
   58a40:	3908b03a 	or	r4,r7,r4
   58a44:	1108b03a 	or	r4,r2,r4
   58a48:	29400044 	addi	r5,r5,1
   58a4c:	31000315 	stw	r4,12(r6)
   58a50:	30c00415 	stw	r3,16(r6)
   58a54:	31400215 	stw	r5,8(r6)
   58a58:	3005883a 	mov	r2,r6
   58a5c:	f800283a 	ret
   58a60:	2805883a 	mov	r2,r5
   58a64:	f800283a 	ret
   58a68:	59c01e0e 	bge	r11,r7,58ae4 <_fpadd_parts+0x218>
   58a6c:	11000117 	ldw	r4,4(r2)
   58a70:	28800117 	ldw	r2,4(r5)
   58a74:	0011883a 	mov	r8,zero
   58a78:	0013883a 	mov	r9,zero
   58a7c:	20bfbf1e 	bne	r4,r2,5897c <_fpadd_parts+0xb0>
   58a80:	4305883a 	add	r2,r8,r12
   58a84:	1207803a 	cmpltu	r3,r2,r8
   58a88:	4b53883a 	add	r9,r9,r13
   58a8c:	1a47883a 	add	r3,r3,r9
   58a90:	31000115 	stw	r4,4(r6)
   58a94:	31c00215 	stw	r7,8(r6)
   58a98:	30800315 	stw	r2,12(r6)
   58a9c:	30c00415 	stw	r3,16(r6)
   58aa0:	003fdd06 	br	58a18 <_fpadd_parts+0x14c>
   58aa4:	20ffef1e 	bne	r4,r3,58a64 <_fpadd_parts+0x198>
   58aa8:	31000015 	stw	r4,0(r6)
   58aac:	10c00117 	ldw	r3,4(r2)
   58ab0:	30c00115 	stw	r3,4(r6)
   58ab4:	10c00217 	ldw	r3,8(r2)
   58ab8:	11000117 	ldw	r4,4(r2)
   58abc:	29400117 	ldw	r5,4(r5)
   58ac0:	30c00215 	stw	r3,8(r6)
   58ac4:	10c00317 	ldw	r3,12(r2)
   58ac8:	2908703a 	and	r4,r5,r4
   58acc:	30c00315 	stw	r3,12(r6)
   58ad0:	10c00417 	ldw	r3,16(r2)
   58ad4:	31000115 	stw	r4,4(r6)
   58ad8:	3005883a 	mov	r2,r6
   58adc:	30c00415 	stw	r3,16(r6)
   58ae0:	f800283a 	ret
   58ae4:	580f883a 	mov	r7,r11
   58ae8:	0019883a 	mov	r12,zero
   58aec:	001b883a 	mov	r13,zero
   58af0:	003f9f06 	br	58970 <_fpadd_parts+0xa4>
   58af4:	0115c83a 	sub	r10,zero,r4
   58af8:	00c00fc4 	movi	r3,63
   58afc:	1abfda16 	blt	r3,r10,58a68 <_fpadd_parts+0x19c>
   58b00:	003f8906 	br	58928 <_fpadd_parts+0x5c>
   58b04:	627fb52e 	bgeu	r12,r9,589dc <_fpadd_parts+0x110>
   58b08:	003fc006 	br	58a0c <_fpadd_parts+0x140>
   58b0c:	6205c83a 	sub	r2,r12,r8
   58b10:	6099803a 	cmpltu	r12,r12,r2
   58b14:	6a47c83a 	sub	r3,r13,r9
   58b18:	1b07c83a 	sub	r3,r3,r12
   58b1c:	183f9d0e 	bge	r3,zero,58994 <_fpadd_parts+0xc8>
   58b20:	0085c83a 	sub	r2,zero,r2
   58b24:	1008c03a 	cmpne	r4,r2,zero
   58b28:	00c7c83a 	sub	r3,zero,r3
   58b2c:	1907c83a 	sub	r3,r3,r4
   58b30:	01000044 	movi	r4,1
   58b34:	31000115 	stw	r4,4(r6)
   58b38:	31c00215 	stw	r7,8(r6)
   58b3c:	30800315 	stw	r2,12(r6)
   58b40:	30c00415 	stw	r3,16(r6)
   58b44:	003f9706 	br	589a4 <_fpadd_parts+0xd8>
   58b48:	203f8926 	beq	r4,zero,58970 <_fpadd_parts+0xa4>
   58b4c:	50fff804 	addi	r3,r10,-32
   58b50:	3a8f883a 	add	r7,r7,r10
   58b54:	18002316 	blt	r3,zero,58be4 <_fpadd_parts+0x318>
   58b58:	68d6d83a 	srl	r11,r13,r3
   58b5c:	001d883a 	mov	r14,zero
   58b60:	18001c16 	blt	r3,zero,58bd4 <_fpadd_parts+0x308>
   58b64:	01000044 	movi	r4,1
   58b68:	20c6983a 	sll	r3,r4,r3
   58b6c:	0015883a 	mov	r10,zero
   58b70:	513fffc4 	addi	r4,r10,-1
   58b74:	2295403a 	cmpgeu	r10,r4,r10
   58b78:	1a87c83a 	sub	r3,r3,r10
   58b7c:	1b5a703a 	and	r13,r3,r13
   58b80:	2318703a 	and	r12,r4,r12
   58b84:	6358b03a 	or	r12,r12,r13
   58b88:	6018c03a 	cmpne	r12,r12,zero
   58b8c:	62d8b03a 	or	r12,r12,r11
   58b90:	701b883a 	mov	r13,r14
   58b94:	003f7606 	br	58970 <_fpadd_parts+0xa4>
   58b98:	4808907a 	slli	r4,r9,1
   58b9c:	02c007c4 	movi	r11,31
   58ba0:	5a97c83a 	sub	r11,r11,r10
   58ba4:	22c8983a 	sll	r4,r4,r11
   58ba8:	4296d83a 	srl	r11,r8,r10
   58bac:	4a9cd83a 	srl	r14,r9,r10
   58bb0:	22d6b03a 	or	r11,r4,r11
   58bb4:	003f6106 	br	5893c <_fpadd_parts+0x70>
   58bb8:	00c00044 	movi	r3,1
   58bbc:	1a94983a 	sll	r10,r3,r10
   58bc0:	0007883a 	mov	r3,zero
   58bc4:	003f6106 	br	5894c <_fpadd_parts+0x80>
   58bc8:	013fff84 	movi	r4,-2
   58bcc:	21ff7c2e 	bgeu	r4,r7,589c0 <_fpadd_parts+0xf4>
   58bd0:	003f9106 	br	58a18 <_fpadd_parts+0x14c>
   58bd4:	00c00044 	movi	r3,1
   58bd8:	1a94983a 	sll	r10,r3,r10
   58bdc:	0007883a 	mov	r3,zero
   58be0:	003fe306 	br	58b70 <_fpadd_parts+0x2a4>
   58be4:	6816907a 	slli	r11,r13,1
   58be8:	010007c4 	movi	r4,31
   58bec:	2289c83a 	sub	r4,r4,r10
   58bf0:	5908983a 	sll	r4,r11,r4
   58bf4:	6296d83a 	srl	r11,r12,r10
   58bf8:	6a9cd83a 	srl	r14,r13,r10
   58bfc:	22d6b03a 	or	r11,r4,r11
   58c00:	003fd706 	br	58b60 <_fpadd_parts+0x294>
   58c04:	193f971e 	bne	r3,r4,58a64 <_fpadd_parts+0x198>
   58c08:	11000117 	ldw	r4,4(r2)
   58c0c:	28c00117 	ldw	r3,4(r5)
   58c10:	20ff9426 	beq	r4,r3,58a64 <_fpadd_parts+0x198>
   58c14:	00800074 	movhi	r2,1
   58c18:	10809004 	addi	r2,r2,576
   58c1c:	f800283a 	ret

00058c20 <__adddf3>:
   58c20:	deffec04 	addi	sp,sp,-80
   58c24:	d9001115 	stw	r4,68(sp)
   58c28:	d9401215 	stw	r5,72(sp)
   58c2c:	d9001104 	addi	r4,sp,68
   58c30:	d9400a04 	addi	r5,sp,40
   58c34:	dfc01315 	stw	ra,76(sp)
   58c38:	d9c01015 	stw	r7,64(sp)
   58c3c:	d9800f15 	stw	r6,60(sp)
   58c40:	0059a140 	call	59a14 <__unpack_d>
   58c44:	d9000f04 	addi	r4,sp,60
   58c48:	d9400504 	addi	r5,sp,20
   58c4c:	0059a140 	call	59a14 <__unpack_d>
   58c50:	d9000a04 	addi	r4,sp,40
   58c54:	d9400504 	addi	r5,sp,20
   58c58:	d80d883a 	mov	r6,sp
   58c5c:	00588cc0 	call	588cc <_fpadd_parts>
   58c60:	1009883a 	mov	r4,r2
   58c64:	00597f00 	call	597f0 <__pack_d>
   58c68:	dfc01317 	ldw	ra,76(sp)
   58c6c:	dec01404 	addi	sp,sp,80
   58c70:	f800283a 	ret

00058c74 <__subdf3>:
   58c74:	deffec04 	addi	sp,sp,-80
   58c78:	d9001115 	stw	r4,68(sp)
   58c7c:	d9401215 	stw	r5,72(sp)
   58c80:	d9001104 	addi	r4,sp,68
   58c84:	d9400a04 	addi	r5,sp,40
   58c88:	dfc01315 	stw	ra,76(sp)
   58c8c:	d9c01015 	stw	r7,64(sp)
   58c90:	d9800f15 	stw	r6,60(sp)
   58c94:	0059a140 	call	59a14 <__unpack_d>
   58c98:	d9000f04 	addi	r4,sp,60
   58c9c:	d9400504 	addi	r5,sp,20
   58ca0:	0059a140 	call	59a14 <__unpack_d>
   58ca4:	d8800617 	ldw	r2,24(sp)
   58ca8:	d9000a04 	addi	r4,sp,40
   58cac:	d9400504 	addi	r5,sp,20
   58cb0:	d80d883a 	mov	r6,sp
   58cb4:	1080005c 	xori	r2,r2,1
   58cb8:	d8800615 	stw	r2,24(sp)
   58cbc:	00588cc0 	call	588cc <_fpadd_parts>
   58cc0:	1009883a 	mov	r4,r2
   58cc4:	00597f00 	call	597f0 <__pack_d>
   58cc8:	dfc01317 	ldw	ra,76(sp)
   58ccc:	dec01404 	addi	sp,sp,80
   58cd0:	f800283a 	ret

00058cd4 <__muldf3>:
   58cd4:	deffe404 	addi	sp,sp,-112
   58cd8:	d9001115 	stw	r4,68(sp)
   58cdc:	d9401215 	stw	r5,72(sp)
   58ce0:	d9001104 	addi	r4,sp,68
   58ce4:	d9400a04 	addi	r5,sp,40
   58ce8:	dfc01b15 	stw	ra,108(sp)
   58cec:	d9800f15 	stw	r6,60(sp)
   58cf0:	d9c01015 	stw	r7,64(sp)
   58cf4:	ddc01a15 	stw	r23,104(sp)
   58cf8:	dd801915 	stw	r22,100(sp)
   58cfc:	dd401815 	stw	r21,96(sp)
   58d00:	dd001715 	stw	r20,92(sp)
   58d04:	dcc01615 	stw	r19,88(sp)
   58d08:	dc801515 	stw	r18,84(sp)
   58d0c:	dc401415 	stw	r17,80(sp)
   58d10:	dc001315 	stw	r16,76(sp)
   58d14:	0059a140 	call	59a14 <__unpack_d>
   58d18:	d9000f04 	addi	r4,sp,60
   58d1c:	d9400504 	addi	r5,sp,20
   58d20:	0059a140 	call	59a14 <__unpack_d>
   58d24:	d8c00a17 	ldw	r3,40(sp)
   58d28:	00800044 	movi	r2,1
   58d2c:	10c01136 	bltu	r2,r3,58d74 <__muldf3+0xa0>
   58d30:	d8c00b17 	ldw	r3,44(sp)
   58d34:	d8800617 	ldw	r2,24(sp)
   58d38:	d9000a04 	addi	r4,sp,40
   58d3c:	1884c03a 	cmpne	r2,r3,r2
   58d40:	d8800b15 	stw	r2,44(sp)
   58d44:	00597f00 	call	597f0 <__pack_d>
   58d48:	dfc01b17 	ldw	ra,108(sp)
   58d4c:	ddc01a17 	ldw	r23,104(sp)
   58d50:	dd801917 	ldw	r22,100(sp)
   58d54:	dd401817 	ldw	r21,96(sp)
   58d58:	dd001717 	ldw	r20,92(sp)
   58d5c:	dcc01617 	ldw	r19,88(sp)
   58d60:	dc801517 	ldw	r18,84(sp)
   58d64:	dc401417 	ldw	r17,80(sp)
   58d68:	dc001317 	ldw	r16,76(sp)
   58d6c:	dec01c04 	addi	sp,sp,112
   58d70:	f800283a 	ret
   58d74:	d9000517 	ldw	r4,20(sp)
   58d78:	11000636 	bltu	r2,r4,58d94 <__muldf3+0xc0>
   58d7c:	d8800617 	ldw	r2,24(sp)
   58d80:	d8c00b17 	ldw	r3,44(sp)
   58d84:	d9000504 	addi	r4,sp,20
   58d88:	1884c03a 	cmpne	r2,r3,r2
   58d8c:	d8800615 	stw	r2,24(sp)
   58d90:	003fec06 	br	58d44 <__muldf3+0x70>
   58d94:	00800104 	movi	r2,4
   58d98:	1880051e 	bne	r3,r2,58db0 <__muldf3+0xdc>
   58d9c:	00800084 	movi	r2,2
   58da0:	20bfe31e 	bne	r4,r2,58d30 <__muldf3+0x5c>
   58da4:	01000074 	movhi	r4,1
   58da8:	21009004 	addi	r4,r4,576
   58dac:	003fe506 	br	58d44 <__muldf3+0x70>
   58db0:	2080031e 	bne	r4,r2,58dc0 <__muldf3+0xec>
   58db4:	00800084 	movi	r2,2
   58db8:	18bffa26 	beq	r3,r2,58da4 <__muldf3+0xd0>
   58dbc:	003fef06 	br	58d7c <__muldf3+0xa8>
   58dc0:	00800084 	movi	r2,2
   58dc4:	18bfda26 	beq	r3,r2,58d30 <__muldf3+0x5c>
   58dc8:	20bfec26 	beq	r4,r2,58d7c <__muldf3+0xa8>
   58dcc:	dc000d17 	ldw	r16,52(sp)
   58dd0:	dd000817 	ldw	r20,32(sp)
   58dd4:	dc800917 	ldw	r18,36(sp)
   58dd8:	8009883a 	mov	r4,r16
   58ddc:	000b883a 	mov	r5,zero
   58de0:	a00d883a 	mov	r6,r20
   58de4:	000f883a 	mov	r7,zero
   58de8:	00596340 	call	59634 <__muldi3>
   58dec:	dc400e17 	ldw	r17,56(sp)
   58df0:	9009883a 	mov	r4,r18
   58df4:	800d883a 	mov	r6,r16
   58df8:	000b883a 	mov	r5,zero
   58dfc:	000f883a 	mov	r7,zero
   58e00:	102f883a 	mov	r23,r2
   58e04:	1827883a 	mov	r19,r3
   58e08:	00596340 	call	59634 <__muldi3>
   58e0c:	900d883a 	mov	r6,r18
   58e10:	8809883a 	mov	r4,r17
   58e14:	000b883a 	mov	r5,zero
   58e18:	000f883a 	mov	r7,zero
   58e1c:	102b883a 	mov	r21,r2
   58e20:	1821883a 	mov	r16,r3
   58e24:	00596340 	call	59634 <__muldi3>
   58e28:	8809883a 	mov	r4,r17
   58e2c:	000b883a 	mov	r5,zero
   58e30:	a00d883a 	mov	r6,r20
   58e34:	000f883a 	mov	r7,zero
   58e38:	102d883a 	mov	r22,r2
   58e3c:	1825883a 	mov	r18,r3
   58e40:	00596340 	call	59634 <__muldi3>
   58e44:	154b883a 	add	r5,r2,r21
   58e48:	2889803a 	cmpltu	r4,r5,r2
   58e4c:	1c07883a 	add	r3,r3,r16
   58e50:	20c9883a 	add	r4,r4,r3
   58e54:	24004b36 	bltu	r4,r16,58f84 <__muldf3+0x2b0>
   58e58:	8100011e 	bne	r16,r4,58e60 <__muldf3+0x18c>
   58e5c:	2d404936 	bltu	r5,r21,58f84 <__muldf3+0x2b0>
   58e60:	0011883a 	mov	r8,zero
   58e64:	0007883a 	mov	r3,zero
   58e68:	2ccb883a 	add	r5,r5,r19
   58e6c:	b80d883a 	mov	r6,r23
   58e70:	2cc0012e 	bgeu	r5,r19,58e78 <__muldf3+0x1a4>
   58e74:	02000044 	movi	r8,1
   58e78:	258f883a 	add	r7,r4,r22
   58e7c:	3909803a 	cmpltu	r4,r7,r4
   58e80:	da400c17 	ldw	r9,48(sp)
   58e84:	2489883a 	add	r4,r4,r18
   58e88:	d8800717 	ldw	r2,28(sp)
   58e8c:	20c9883a 	add	r4,r4,r3
   58e90:	da800b17 	ldw	r10,44(sp)
   58e94:	d8c00617 	ldw	r3,24(sp)
   58e98:	3a11883a 	add	r8,r7,r8
   58e9c:	4885883a 	add	r2,r9,r2
   58ea0:	50c6c03a 	cmpne	r3,r10,r3
   58ea4:	41cf803a 	cmpltu	r7,r8,r7
   58ea8:	12400104 	addi	r9,r2,4
   58eac:	d8c00115 	stw	r3,4(sp)
   58eb0:	3909883a 	add	r4,r7,r4
   58eb4:	da400215 	stw	r9,8(sp)
   58eb8:	03480034 	movhi	r13,8192
   58ebc:	6b7fffc4 	addi	r13,r13,-1
   58ec0:	4007883a 	mov	r3,r8
   58ec4:	6900102e 	bgeu	r13,r4,58f08 <__muldf3+0x234>
   58ec8:	10800144 	addi	r2,r2,5
   58ecc:	180ed07a 	srli	r7,r3,1
   58ed0:	18c0004c 	andi	r3,r3,1
   58ed4:	201097fa 	slli	r8,r4,31
   58ed8:	281697fa 	slli	r11,r5,31
   58edc:	2008d07a 	srli	r4,r4,1
   58ee0:	3014d07a 	srli	r10,r6,1
   58ee4:	2812d07a 	srli	r9,r5,1
   58ee8:	1019883a 	mov	r12,r2
   58eec:	18000226 	beq	r3,zero,58ef8 <__muldf3+0x224>
   58ef0:	5a8cb03a 	or	r6,r11,r10
   58ef4:	49600034 	orhi	r5,r9,32768
   58ef8:	41c6b03a 	or	r3,r8,r7
   58efc:	10800044 	addi	r2,r2,1
   58f00:	693ff236 	bltu	r13,r4,58ecc <__muldf3+0x1f8>
   58f04:	db000215 	stw	r12,8(sp)
   58f08:	03440034 	movhi	r13,4096
   58f0c:	6b7fffc4 	addi	r13,r13,-1
   58f10:	69001336 	bltu	r13,r4,58f60 <__muldf3+0x28c>
   58f14:	d8800217 	ldw	r2,8(sp)
   58f18:	10bfffc4 	addi	r2,r2,-1
   58f1c:	18d3883a 	add	r9,r3,r3
   58f20:	48c7803a 	cmpltu	r3,r9,r3
   58f24:	2109883a 	add	r4,r4,r4
   58f28:	190f883a 	add	r7,r3,r4
   58f2c:	3191883a 	add	r8,r6,r6
   58f30:	4197803a 	cmpltu	r11,r8,r6
   58f34:	2955883a 	add	r10,r5,r5
   58f38:	1019883a 	mov	r12,r2
   58f3c:	4807883a 	mov	r3,r9
   58f40:	3809883a 	mov	r4,r7
   58f44:	2800010e 	bge	r5,zero,58f4c <__muldf3+0x278>
   58f48:	48c00054 	ori	r3,r9,1
   58f4c:	400d883a 	mov	r6,r8
   58f50:	5a8b883a 	add	r5,r11,r10
   58f54:	10bfffc4 	addi	r2,r2,-1
   58f58:	69fff02e 	bgeu	r13,r7,58f1c <__muldf3+0x248>
   58f5c:	db000215 	stw	r12,8(sp)
   58f60:	18803fcc 	andi	r2,r3,255
   58f64:	01c02004 	movi	r7,128
   58f68:	11c00926 	beq	r2,r7,58f90 <__muldf3+0x2bc>
   58f6c:	008000c4 	movi	r2,3
   58f70:	d9000415 	stw	r4,16(sp)
   58f74:	d8c00315 	stw	r3,12(sp)
   58f78:	d8800015 	stw	r2,0(sp)
   58f7c:	d809883a 	mov	r4,sp
   58f80:	003f7006 	br	58d44 <__muldf3+0x70>
   58f84:	0011883a 	mov	r8,zero
   58f88:	00c00044 	movi	r3,1
   58f8c:	003fb606 	br	58e68 <__muldf3+0x194>
   58f90:	19c0400c 	andi	r7,r3,256
   58f94:	383ff51e 	bne	r7,zero,58f6c <__muldf3+0x298>
   58f98:	314ab03a 	or	r5,r6,r5
   58f9c:	283ff326 	beq	r5,zero,58f6c <__muldf3+0x298>
   58fa0:	1885883a 	add	r2,r3,r2
   58fa4:	10cb803a 	cmpltu	r5,r2,r3
   58fa8:	00ffc004 	movi	r3,-256
   58fac:	10c6703a 	and	r3,r2,r3
   58fb0:	2909883a 	add	r4,r5,r4
   58fb4:	003fed06 	br	58f6c <__muldf3+0x298>

00058fb8 <__divdf3>:
   58fb8:	defff104 	addi	sp,sp,-60
   58fbc:	d9000c15 	stw	r4,48(sp)
   58fc0:	d9400d15 	stw	r5,52(sp)
   58fc4:	d9000c04 	addi	r4,sp,48
   58fc8:	d9400504 	addi	r5,sp,20
   58fcc:	dfc00e15 	stw	ra,56(sp)
   58fd0:	d9800a15 	stw	r6,40(sp)
   58fd4:	d9c00b15 	stw	r7,44(sp)
   58fd8:	0059a140 	call	59a14 <__unpack_d>
   58fdc:	d9000a04 	addi	r4,sp,40
   58fe0:	d80b883a 	mov	r5,sp
   58fe4:	0059a140 	call	59a14 <__unpack_d>
   58fe8:	d8c00517 	ldw	r3,20(sp)
   58fec:	00800044 	movi	r2,1
   58ff0:	10c00536 	bltu	r2,r3,59008 <__divdf3+0x50>
   58ff4:	d9000504 	addi	r4,sp,20
   58ff8:	00597f00 	call	597f0 <__pack_d>
   58ffc:	dfc00e17 	ldw	ra,56(sp)
   59000:	dec00f04 	addi	sp,sp,60
   59004:	f800283a 	ret
   59008:	d9000017 	ldw	r4,0(sp)
   5900c:	11000536 	bltu	r2,r4,59024 <__divdf3+0x6c>
   59010:	d809883a 	mov	r4,sp
   59014:	00597f00 	call	597f0 <__pack_d>
   59018:	dfc00e17 	ldw	ra,56(sp)
   5901c:	dec00f04 	addi	sp,sp,60
   59020:	f800283a 	ret
   59024:	d9800617 	ldw	r6,24(sp)
   59028:	d9400117 	ldw	r5,4(sp)
   5902c:	00800104 	movi	r2,4
   59030:	314af03a 	xor	r5,r6,r5
   59034:	d9400615 	stw	r5,24(sp)
   59038:	18800226 	beq	r3,r2,59044 <__divdf3+0x8c>
   5903c:	01400084 	movi	r5,2
   59040:	1940041e 	bne	r3,r5,59054 <__divdf3+0x9c>
   59044:	193feb1e 	bne	r3,r4,58ff4 <__divdf3+0x3c>
   59048:	01000074 	movhi	r4,1
   5904c:	21009004 	addi	r4,r4,576
   59050:	003fe906 	br	58ff8 <__divdf3+0x40>
   59054:	20803326 	beq	r4,r2,59124 <__divdf3+0x16c>
   59058:	21403726 	beq	r4,r5,59138 <__divdf3+0x180>
   5905c:	d8800217 	ldw	r2,8(sp)
   59060:	d9000717 	ldw	r4,28(sp)
   59064:	d8c00917 	ldw	r3,36(sp)
   59068:	da000417 	ldw	r8,16(sp)
   5906c:	2089c83a 	sub	r4,r4,r2
   59070:	d9000715 	stw	r4,28(sp)
   59074:	d8800817 	ldw	r2,32(sp)
   59078:	dbc00317 	ldw	r15,12(sp)
   5907c:	1a000236 	bltu	r3,r8,59088 <__divdf3+0xd0>
   59080:	40c0081e 	bne	r8,r3,590a4 <__divdf3+0xec>
   59084:	13c0072e 	bgeu	r2,r15,590a4 <__divdf3+0xec>
   59088:	108b883a 	add	r5,r2,r2
   5908c:	288d803a 	cmpltu	r6,r5,r2
   59090:	18c7883a 	add	r3,r3,r3
   59094:	213fffc4 	addi	r4,r4,-1
   59098:	2805883a 	mov	r2,r5
   5909c:	30c7883a 	add	r3,r6,r3
   590a0:	d9000715 	stw	r4,28(sp)
   590a4:	01400f44 	movi	r5,61
   590a8:	000f883a 	mov	r7,zero
   590ac:	01040034 	movhi	r4,4096
   590b0:	0019883a 	mov	r12,zero
   590b4:	001b883a 	mov	r13,zero
   590b8:	201697fa 	slli	r11,r4,31
   590bc:	3814d07a 	srli	r10,r7,1
   590c0:	297fffc4 	addi	r5,r5,-1
   590c4:	1a000936 	bltu	r3,r8,590ec <__divdf3+0x134>
   590c8:	13cdc83a 	sub	r6,r2,r15
   590cc:	1193803a 	cmpltu	r9,r2,r6
   590d0:	1a1dc83a 	sub	r14,r3,r8
   590d4:	40c0011e 	bne	r8,r3,590dc <__divdf3+0x124>
   590d8:	13c00436 	bltu	r2,r15,590ec <__divdf3+0x134>
   590dc:	3005883a 	mov	r2,r6
   590e0:	7247c83a 	sub	r3,r14,r9
   590e4:	61d8b03a 	or	r12,r12,r7
   590e8:	691ab03a 	or	r13,r13,r4
   590ec:	108d883a 	add	r6,r2,r2
   590f0:	3093803a 	cmpltu	r9,r6,r2
   590f4:	18c7883a 	add	r3,r3,r3
   590f8:	5a8eb03a 	or	r7,r11,r10
   590fc:	2008d07a 	srli	r4,r4,1
   59100:	3005883a 	mov	r2,r6
   59104:	48c7883a 	add	r3,r9,r3
   59108:	283feb1e 	bne	r5,zero,590b8 <__divdf3+0x100>
   5910c:	61003fcc 	andi	r4,r12,255
   59110:	01402004 	movi	r5,128
   59114:	21400b26 	beq	r4,r5,59144 <__divdf3+0x18c>
   59118:	db000815 	stw	r12,32(sp)
   5911c:	db400915 	stw	r13,36(sp)
   59120:	003fb406 	br	58ff4 <__divdf3+0x3c>
   59124:	d8000815 	stw	zero,32(sp)
   59128:	d8000915 	stw	zero,36(sp)
   5912c:	d8000715 	stw	zero,28(sp)
   59130:	d9000504 	addi	r4,sp,20
   59134:	003fb006 	br	58ff8 <__divdf3+0x40>
   59138:	d8800515 	stw	r2,20(sp)
   5913c:	d9000504 	addi	r4,sp,20
   59140:	003fad06 	br	58ff8 <__divdf3+0x40>
   59144:	6140400c 	andi	r5,r12,256
   59148:	283ff31e 	bne	r5,zero,59118 <__divdf3+0x160>
   5914c:	30c4b03a 	or	r2,r6,r3
   59150:	103ff126 	beq	r2,zero,59118 <__divdf3+0x160>
   59154:	6109883a 	add	r4,r12,r4
   59158:	2305803a 	cmpltu	r2,r4,r12
   5915c:	033fc004 	movi	r12,-256
   59160:	2318703a 	and	r12,r4,r12
   59164:	135b883a 	add	r13,r2,r13
   59168:	003feb06 	br	59118 <__divdf3+0x160>

0005916c <__eqdf2>:
   5916c:	defff104 	addi	sp,sp,-60
   59170:	d9000c15 	stw	r4,48(sp)
   59174:	d9400d15 	stw	r5,52(sp)
   59178:	d9000c04 	addi	r4,sp,48
   5917c:	d9400504 	addi	r5,sp,20
   59180:	dfc00e15 	stw	ra,56(sp)
   59184:	d9800a15 	stw	r6,40(sp)
   59188:	d9c00b15 	stw	r7,44(sp)
   5918c:	0059a140 	call	59a14 <__unpack_d>
   59190:	d9000a04 	addi	r4,sp,40
   59194:	d80b883a 	mov	r5,sp
   59198:	0059a140 	call	59a14 <__unpack_d>
   5919c:	d8c00517 	ldw	r3,20(sp)
   591a0:	00800044 	movi	r2,1
   591a4:	10c0052e 	bgeu	r2,r3,591bc <__eqdf2+0x50>
   591a8:	d8c00017 	ldw	r3,0(sp)
   591ac:	10c0032e 	bgeu	r2,r3,591bc <__eqdf2+0x50>
   591b0:	d9000504 	addi	r4,sp,20
   591b4:	d80b883a 	mov	r5,sp
   591b8:	0059b180 	call	59b18 <__fpcmp_parts_d>
   591bc:	dfc00e17 	ldw	ra,56(sp)
   591c0:	dec00f04 	addi	sp,sp,60
   591c4:	f800283a 	ret

000591c8 <__nedf2>:
   591c8:	defff104 	addi	sp,sp,-60
   591cc:	d9000c15 	stw	r4,48(sp)
   591d0:	d9400d15 	stw	r5,52(sp)
   591d4:	d9000c04 	addi	r4,sp,48
   591d8:	d9400504 	addi	r5,sp,20
   591dc:	dfc00e15 	stw	ra,56(sp)
   591e0:	d9800a15 	stw	r6,40(sp)
   591e4:	d9c00b15 	stw	r7,44(sp)
   591e8:	0059a140 	call	59a14 <__unpack_d>
   591ec:	d9000a04 	addi	r4,sp,40
   591f0:	d80b883a 	mov	r5,sp
   591f4:	0059a140 	call	59a14 <__unpack_d>
   591f8:	d8c00517 	ldw	r3,20(sp)
   591fc:	00800044 	movi	r2,1
   59200:	10c0052e 	bgeu	r2,r3,59218 <__nedf2+0x50>
   59204:	d8c00017 	ldw	r3,0(sp)
   59208:	10c0032e 	bgeu	r2,r3,59218 <__nedf2+0x50>
   5920c:	d9000504 	addi	r4,sp,20
   59210:	d80b883a 	mov	r5,sp
   59214:	0059b180 	call	59b18 <__fpcmp_parts_d>
   59218:	dfc00e17 	ldw	ra,56(sp)
   5921c:	dec00f04 	addi	sp,sp,60
   59220:	f800283a 	ret

00059224 <__gtdf2>:
   59224:	defff104 	addi	sp,sp,-60
   59228:	d9000c15 	stw	r4,48(sp)
   5922c:	d9400d15 	stw	r5,52(sp)
   59230:	d9000c04 	addi	r4,sp,48
   59234:	d9400504 	addi	r5,sp,20
   59238:	dfc00e15 	stw	ra,56(sp)
   5923c:	d9800a15 	stw	r6,40(sp)
   59240:	d9c00b15 	stw	r7,44(sp)
   59244:	0059a140 	call	59a14 <__unpack_d>
   59248:	d9000a04 	addi	r4,sp,40
   5924c:	d80b883a 	mov	r5,sp
   59250:	0059a140 	call	59a14 <__unpack_d>
   59254:	d8c00517 	ldw	r3,20(sp)
   59258:	00800044 	movi	r2,1
   5925c:	10c0082e 	bgeu	r2,r3,59280 <__gtdf2+0x5c>
   59260:	d8c00017 	ldw	r3,0(sp)
   59264:	10c0062e 	bgeu	r2,r3,59280 <__gtdf2+0x5c>
   59268:	d9000504 	addi	r4,sp,20
   5926c:	d80b883a 	mov	r5,sp
   59270:	0059b180 	call	59b18 <__fpcmp_parts_d>
   59274:	dfc00e17 	ldw	ra,56(sp)
   59278:	dec00f04 	addi	sp,sp,60
   5927c:	f800283a 	ret
   59280:	00bfffc4 	movi	r2,-1
   59284:	003ffb06 	br	59274 <__gtdf2+0x50>

00059288 <__gedf2>:
   59288:	defff104 	addi	sp,sp,-60
   5928c:	d9000c15 	stw	r4,48(sp)
   59290:	d9400d15 	stw	r5,52(sp)
   59294:	d9000c04 	addi	r4,sp,48
   59298:	d9400504 	addi	r5,sp,20
   5929c:	dfc00e15 	stw	ra,56(sp)
   592a0:	d9800a15 	stw	r6,40(sp)
   592a4:	d9c00b15 	stw	r7,44(sp)
   592a8:	0059a140 	call	59a14 <__unpack_d>
   592ac:	d9000a04 	addi	r4,sp,40
   592b0:	d80b883a 	mov	r5,sp
   592b4:	0059a140 	call	59a14 <__unpack_d>
   592b8:	d8c00517 	ldw	r3,20(sp)
   592bc:	00800044 	movi	r2,1
   592c0:	10c0082e 	bgeu	r2,r3,592e4 <__gedf2+0x5c>
   592c4:	d8c00017 	ldw	r3,0(sp)
   592c8:	10c0062e 	bgeu	r2,r3,592e4 <__gedf2+0x5c>
   592cc:	d9000504 	addi	r4,sp,20
   592d0:	d80b883a 	mov	r5,sp
   592d4:	0059b180 	call	59b18 <__fpcmp_parts_d>
   592d8:	dfc00e17 	ldw	ra,56(sp)
   592dc:	dec00f04 	addi	sp,sp,60
   592e0:	f800283a 	ret
   592e4:	00bfffc4 	movi	r2,-1
   592e8:	003ffb06 	br	592d8 <__gedf2+0x50>

000592ec <__ltdf2>:
   592ec:	defff104 	addi	sp,sp,-60
   592f0:	d9000c15 	stw	r4,48(sp)
   592f4:	d9400d15 	stw	r5,52(sp)
   592f8:	d9000c04 	addi	r4,sp,48
   592fc:	d9400504 	addi	r5,sp,20
   59300:	dfc00e15 	stw	ra,56(sp)
   59304:	d9800a15 	stw	r6,40(sp)
   59308:	d9c00b15 	stw	r7,44(sp)
   5930c:	0059a140 	call	59a14 <__unpack_d>
   59310:	d9000a04 	addi	r4,sp,40
   59314:	d80b883a 	mov	r5,sp
   59318:	0059a140 	call	59a14 <__unpack_d>
   5931c:	d8c00517 	ldw	r3,20(sp)
   59320:	00800044 	movi	r2,1
   59324:	10c0052e 	bgeu	r2,r3,5933c <__ltdf2+0x50>
   59328:	d8c00017 	ldw	r3,0(sp)
   5932c:	10c0032e 	bgeu	r2,r3,5933c <__ltdf2+0x50>
   59330:	d9000504 	addi	r4,sp,20
   59334:	d80b883a 	mov	r5,sp
   59338:	0059b180 	call	59b18 <__fpcmp_parts_d>
   5933c:	dfc00e17 	ldw	ra,56(sp)
   59340:	dec00f04 	addi	sp,sp,60
   59344:	f800283a 	ret

00059348 <__floatsidf>:
   59348:	2004d7fa 	srli	r2,r4,31
   5934c:	defff904 	addi	sp,sp,-28
   59350:	00c000c4 	movi	r3,3
   59354:	dfc00615 	stw	ra,24(sp)
   59358:	dc000515 	stw	r16,20(sp)
   5935c:	d8c00015 	stw	r3,0(sp)
   59360:	d8800115 	stw	r2,4(sp)
   59364:	2000081e 	bne	r4,zero,59388 <__floatsidf+0x40>
   59368:	00800084 	movi	r2,2
   5936c:	d8800015 	stw	r2,0(sp)
   59370:	d809883a 	mov	r4,sp
   59374:	00597f00 	call	597f0 <__pack_d>
   59378:	dfc00617 	ldw	ra,24(sp)
   5937c:	dc000517 	ldw	r16,20(sp)
   59380:	dec00704 	addi	sp,sp,28
   59384:	f800283a 	ret
   59388:	00c00f04 	movi	r3,60
   5938c:	d8c00215 	stw	r3,8(sp)
   59390:	10000f1e 	bne	r2,zero,593d0 <__floatsidf+0x88>
   59394:	2021883a 	mov	r16,r4
   59398:	8009883a 	mov	r4,r16
   5939c:	00597440 	call	59744 <__clzsi2>
   593a0:	11000744 	addi	r4,r2,29
   593a4:	0100110e 	bge	zero,r4,593ec <__floatsidf+0xa4>
   593a8:	10ffff44 	addi	r3,r2,-3
   593ac:	18001216 	blt	r3,zero,593f8 <__floatsidf+0xb0>
   593b0:	80c6983a 	sll	r3,r16,r3
   593b4:	0009883a 	mov	r4,zero
   593b8:	014007c4 	movi	r5,31
   593bc:	2885c83a 	sub	r2,r5,r2
   593c0:	d9000315 	stw	r4,12(sp)
   593c4:	d8c00415 	stw	r3,16(sp)
   593c8:	d8800215 	stw	r2,8(sp)
   593cc:	003fe806 	br	59370 <__floatsidf+0x28>
   593d0:	00a00034 	movhi	r2,32768
   593d4:	20800e26 	beq	r4,r2,59410 <__floatsidf+0xc8>
   593d8:	0121c83a 	sub	r16,zero,r4
   593dc:	8009883a 	mov	r4,r16
   593e0:	00597440 	call	59744 <__clzsi2>
   593e4:	11000744 	addi	r4,r2,29
   593e8:	013fef16 	blt	zero,r4,593a8 <__floatsidf+0x60>
   593ec:	dc000315 	stw	r16,12(sp)
   593f0:	d8000415 	stw	zero,16(sp)
   593f4:	003fde06 	br	59370 <__floatsidf+0x28>
   593f8:	800ad07a 	srli	r5,r16,1
   593fc:	00c007c4 	movi	r3,31
   59400:	1907c83a 	sub	r3,r3,r4
   59404:	28c6d83a 	srl	r3,r5,r3
   59408:	8108983a 	sll	r4,r16,r4
   5940c:	003fea06 	br	593b8 <__floatsidf+0x70>
   59410:	0005883a 	mov	r2,zero
   59414:	00f07834 	movhi	r3,49632
   59418:	003fd706 	br	59378 <__floatsidf+0x30>

0005941c <__fixdfsi>:
   5941c:	defff804 	addi	sp,sp,-32
   59420:	d9000515 	stw	r4,20(sp)
   59424:	d9400615 	stw	r5,24(sp)
   59428:	d9000504 	addi	r4,sp,20
   5942c:	d80b883a 	mov	r5,sp
   59430:	dfc00715 	stw	ra,28(sp)
   59434:	0059a140 	call	59a14 <__unpack_d>
   59438:	d8800017 	ldw	r2,0(sp)
   5943c:	00c00084 	movi	r3,2
   59440:	10c01c26 	beq	r2,r3,594b4 <__fixdfsi+0x98>
   59444:	00c00044 	movi	r3,1
   59448:	18801a2e 	bgeu	r3,r2,594b4 <__fixdfsi+0x98>
   5944c:	00c00104 	movi	r3,4
   59450:	10c01126 	beq	r2,r3,59498 <__fixdfsi+0x7c>
   59454:	d8800217 	ldw	r2,8(sp)
   59458:	10001616 	blt	r2,zero,594b4 <__fixdfsi+0x98>
   5945c:	00c00784 	movi	r3,30
   59460:	18800d16 	blt	r3,r2,59498 <__fixdfsi+0x7c>
   59464:	00c00f04 	movi	r3,60
   59468:	1885c83a 	sub	r2,r3,r2
   5946c:	10fff804 	addi	r3,r2,-32
   59470:	d9400317 	ldw	r5,12(sp)
   59474:	d9000417 	ldw	r4,16(sp)
   59478:	18001616 	blt	r3,zero,594d4 <__fixdfsi+0xb8>
   5947c:	20c4d83a 	srl	r2,r4,r3
   59480:	d8c00117 	ldw	r3,4(sp)
   59484:	18000126 	beq	r3,zero,5948c <__fixdfsi+0x70>
   59488:	0085c83a 	sub	r2,zero,r2
   5948c:	dfc00717 	ldw	ra,28(sp)
   59490:	dec00804 	addi	sp,sp,32
   59494:	f800283a 	ret
   59498:	d8800117 	ldw	r2,4(sp)
   5949c:	1000091e 	bne	r2,zero,594c4 <__fixdfsi+0xa8>
   594a0:	00a00034 	movhi	r2,32768
   594a4:	10bfffc4 	addi	r2,r2,-1
   594a8:	dfc00717 	ldw	ra,28(sp)
   594ac:	dec00804 	addi	sp,sp,32
   594b0:	f800283a 	ret
   594b4:	0005883a 	mov	r2,zero
   594b8:	dfc00717 	ldw	ra,28(sp)
   594bc:	dec00804 	addi	sp,sp,32
   594c0:	f800283a 	ret
   594c4:	00a00034 	movhi	r2,32768
   594c8:	dfc00717 	ldw	ra,28(sp)
   594cc:	dec00804 	addi	sp,sp,32
   594d0:	f800283a 	ret
   594d4:	2008907a 	slli	r4,r4,1
   594d8:	018007c4 	movi	r6,31
   594dc:	308dc83a 	sub	r6,r6,r2
   594e0:	2188983a 	sll	r4,r4,r6
   594e4:	2884d83a 	srl	r2,r5,r2
   594e8:	2084b03a 	or	r2,r4,r2
   594ec:	003fe406 	br	59480 <__fixdfsi+0x64>

000594f0 <__floatunsidf>:
   594f0:	defff904 	addi	sp,sp,-28
   594f4:	dc000515 	stw	r16,20(sp)
   594f8:	dfc00615 	stw	ra,24(sp)
   594fc:	d8000115 	stw	zero,4(sp)
   59500:	2021883a 	mov	r16,r4
   59504:	20001726 	beq	r4,zero,59564 <__floatunsidf+0x74>
   59508:	008000c4 	movi	r2,3
   5950c:	d8800015 	stw	r2,0(sp)
   59510:	00800f04 	movi	r2,60
   59514:	d8800215 	stw	r2,8(sp)
   59518:	00597440 	call	59744 <__clzsi2>
   5951c:	10c00744 	addi	r3,r2,29
   59520:	18001816 	blt	r3,zero,59584 <__floatunsidf+0x94>
   59524:	18002d26 	beq	r3,zero,595dc <__floatunsidf+0xec>
   59528:	113fff44 	addi	r4,r2,-3
   5952c:	20002e16 	blt	r4,zero,595e8 <__floatunsidf+0xf8>
   59530:	8108983a 	sll	r4,r16,r4
   59534:	0021883a 	mov	r16,zero
   59538:	014007c4 	movi	r5,31
   5953c:	2885c83a 	sub	r2,r5,r2
   59540:	dc000315 	stw	r16,12(sp)
   59544:	d9000415 	stw	r4,16(sp)
   59548:	d8800215 	stw	r2,8(sp)
   5954c:	d809883a 	mov	r4,sp
   59550:	00597f00 	call	597f0 <__pack_d>
   59554:	dfc00617 	ldw	ra,24(sp)
   59558:	dc000517 	ldw	r16,20(sp)
   5955c:	dec00704 	addi	sp,sp,28
   59560:	f800283a 	ret
   59564:	00800084 	movi	r2,2
   59568:	d809883a 	mov	r4,sp
   5956c:	d8800015 	stw	r2,0(sp)
   59570:	00597f00 	call	597f0 <__pack_d>
   59574:	dfc00617 	ldw	ra,24(sp)
   59578:	dc000517 	ldw	r16,20(sp)
   5957c:	dec00704 	addi	sp,sp,28
   59580:	f800283a 	ret
   59584:	00c7c83a 	sub	r3,zero,r3
   59588:	193ff804 	addi	r4,r3,-32
   5958c:	20001c16 	blt	r4,zero,59600 <__floatunsidf+0x110>
   59590:	000b883a 	mov	r5,zero
   59594:	2009d7fa 	srai	r4,r4,31
   59598:	80c6d83a 	srl	r3,r16,r3
   5959c:	297fffc4 	addi	r5,r5,-1
   595a0:	2c20703a 	and	r16,r5,r16
   595a4:	8020c03a 	cmpne	r16,r16,zero
   595a8:	1906703a 	and	r3,r3,r4
   595ac:	010007c4 	movi	r4,31
   595b0:	80c6b03a 	or	r3,r16,r3
   595b4:	2085c83a 	sub	r2,r4,r2
   595b8:	d809883a 	mov	r4,sp
   595bc:	d8c00315 	stw	r3,12(sp)
   595c0:	d8000415 	stw	zero,16(sp)
   595c4:	d8800215 	stw	r2,8(sp)
   595c8:	00597f00 	call	597f0 <__pack_d>
   595cc:	dfc00617 	ldw	ra,24(sp)
   595d0:	dc000517 	ldw	r16,20(sp)
   595d4:	dec00704 	addi	sp,sp,28
   595d8:	f800283a 	ret
   595dc:	dc000315 	stw	r16,12(sp)
   595e0:	d8000415 	stw	zero,16(sp)
   595e4:	003fd906 	br	5954c <__floatunsidf+0x5c>
   595e8:	800ad07a 	srli	r5,r16,1
   595ec:	010007c4 	movi	r4,31
   595f0:	20c9c83a 	sub	r4,r4,r3
   595f4:	2908d83a 	srl	r4,r5,r4
   595f8:	80e0983a 	sll	r16,r16,r3
   595fc:	003fce06 	br	59538 <__floatunsidf+0x48>
   59600:	01400044 	movi	r5,1
   59604:	28ca983a 	sll	r5,r5,r3
   59608:	003fe206 	br	59594 <__floatunsidf+0xa4>

0005960c <__mulsi3>:
   5960c:	0005883a 	mov	r2,zero
   59610:	20000726 	beq	r4,zero,59630 <__mulsi3+0x24>
   59614:	20c0004c 	andi	r3,r4,1
   59618:	2008d07a 	srli	r4,r4,1
   5961c:	18000126 	beq	r3,zero,59624 <__mulsi3+0x18>
   59620:	1145883a 	add	r2,r2,r5
   59624:	294b883a 	add	r5,r5,r5
   59628:	203ffa1e 	bne	r4,zero,59614 <__mulsi3+0x8>
   5962c:	f800283a 	ret
   59630:	f800283a 	ret

00059634 <__muldi3>:
   59634:	defff604 	addi	sp,sp,-40
   59638:	dd400515 	stw	r21,20(sp)
   5963c:	dd000415 	stw	r20,16(sp)
   59640:	257fffcc 	andi	r21,r4,65535
   59644:	353fffcc 	andi	r20,r6,65535
   59648:	dcc00315 	stw	r19,12(sp)
   5964c:	3026d43a 	srli	r19,r6,16
   59650:	dd800615 	stw	r22,24(sp)
   59654:	dc800215 	stw	r18,8(sp)
   59658:	dc400115 	stw	r17,4(sp)
   5965c:	2024d43a 	srli	r18,r4,16
   59660:	2023883a 	mov	r17,r4
   59664:	282d883a 	mov	r22,r5
   59668:	a009883a 	mov	r4,r20
   5966c:	a80b883a 	mov	r5,r21
   59670:	dfc00915 	stw	ra,36(sp)
   59674:	df000815 	stw	fp,32(sp)
   59678:	ddc00715 	stw	r23,28(sp)
   5967c:	3839883a 	mov	fp,r7
   59680:	dc000015 	stw	r16,0(sp)
   59684:	3021883a 	mov	r16,r6
   59688:	005960c0 	call	5960c <__mulsi3>
   5968c:	a80b883a 	mov	r5,r21
   59690:	9809883a 	mov	r4,r19
   59694:	102f883a 	mov	r23,r2
   59698:	005960c0 	call	5960c <__mulsi3>
   5969c:	a009883a 	mov	r4,r20
   596a0:	900b883a 	mov	r5,r18
   596a4:	102b883a 	mov	r21,r2
   596a8:	005960c0 	call	5960c <__mulsi3>
   596ac:	9809883a 	mov	r4,r19
   596b0:	900b883a 	mov	r5,r18
   596b4:	1029883a 	mov	r20,r2
   596b8:	005960c0 	call	5960c <__mulsi3>
   596bc:	1007883a 	mov	r3,r2
   596c0:	b804d43a 	srli	r2,r23,16
   596c4:	a549883a 	add	r4,r20,r21
   596c8:	2089883a 	add	r4,r4,r2
   596cc:	2500022e 	bgeu	r4,r20,596d8 <__muldi3+0xa4>
   596d0:	00800074 	movhi	r2,1
   596d4:	1887883a 	add	r3,r3,r2
   596d8:	200cd43a 	srli	r6,r4,16
   596dc:	2004943a 	slli	r2,r4,16
   596e0:	e00b883a 	mov	r5,fp
   596e4:	8809883a 	mov	r4,r17
   596e8:	bdffffcc 	andi	r23,r23,65535
   596ec:	19a3883a 	add	r17,r3,r6
   596f0:	15ef883a 	add	r23,r2,r23
   596f4:	005960c0 	call	5960c <__mulsi3>
   596f8:	8009883a 	mov	r4,r16
   596fc:	b00b883a 	mov	r5,r22
   59700:	1025883a 	mov	r18,r2
   59704:	005960c0 	call	5960c <__mulsi3>
   59708:	9085883a 	add	r2,r18,r2
   5970c:	1447883a 	add	r3,r2,r17
   59710:	b805883a 	mov	r2,r23
   59714:	dfc00917 	ldw	ra,36(sp)
   59718:	df000817 	ldw	fp,32(sp)
   5971c:	ddc00717 	ldw	r23,28(sp)
   59720:	dd800617 	ldw	r22,24(sp)
   59724:	dd400517 	ldw	r21,20(sp)
   59728:	dd000417 	ldw	r20,16(sp)
   5972c:	dcc00317 	ldw	r19,12(sp)
   59730:	dc800217 	ldw	r18,8(sp)
   59734:	dc400117 	ldw	r17,4(sp)
   59738:	dc000017 	ldw	r16,0(sp)
   5973c:	dec00a04 	addi	sp,sp,40
   59740:	f800283a 	ret

00059744 <__clzsi2>:
   59744:	00bfffd4 	movui	r2,65535
   59748:	11000b36 	bltu	r2,r4,59778 <__clzsi2+0x34>
   5974c:	00803fc4 	movi	r2,255
   59750:	11001e2e 	bgeu	r2,r4,597cc <__clzsi2+0x88>
   59754:	00c00204 	movi	r3,8
   59758:	20c8d83a 	srl	r4,r4,r3
   5975c:	00c00074 	movhi	r3,1
   59760:	18c09504 	addi	r3,r3,596
   59764:	00800604 	movi	r2,24
   59768:	1909883a 	add	r4,r3,r4
   5976c:	20c00003 	ldbu	r3,0(r4)
   59770:	10c5c83a 	sub	r2,r2,r3
   59774:	f800283a 	ret
   59778:	00804034 	movhi	r2,256
   5977c:	10bfffc4 	addi	r2,r2,-1
   59780:	11000936 	bltu	r2,r4,597a8 <__clzsi2+0x64>
   59784:	00800404 	movi	r2,16
   59788:	1007883a 	mov	r3,r2
   5978c:	20c8d83a 	srl	r4,r4,r3
   59790:	00c00074 	movhi	r3,1
   59794:	18c09504 	addi	r3,r3,596
   59798:	1909883a 	add	r4,r3,r4
   5979c:	20c00003 	ldbu	r3,0(r4)
   597a0:	10c5c83a 	sub	r2,r2,r3
   597a4:	f800283a 	ret
   597a8:	00c00604 	movi	r3,24
   597ac:	20c8d83a 	srl	r4,r4,r3
   597b0:	00c00074 	movhi	r3,1
   597b4:	18c09504 	addi	r3,r3,596
   597b8:	00800204 	movi	r2,8
   597bc:	1909883a 	add	r4,r3,r4
   597c0:	20c00003 	ldbu	r3,0(r4)
   597c4:	10c5c83a 	sub	r2,r2,r3
   597c8:	f800283a 	ret
   597cc:	0007883a 	mov	r3,zero
   597d0:	20c8d83a 	srl	r4,r4,r3
   597d4:	00c00074 	movhi	r3,1
   597d8:	18c09504 	addi	r3,r3,596
   597dc:	00800804 	movi	r2,32
   597e0:	1909883a 	add	r4,r3,r4
   597e4:	20c00003 	ldbu	r3,0(r4)
   597e8:	10c5c83a 	sub	r2,r2,r3
   597ec:	f800283a 	ret

000597f0 <__pack_d>:
   597f0:	20800017 	ldw	r2,0(r4)
   597f4:	defff804 	addi	sp,sp,-32
   597f8:	dcc00315 	stw	r19,12(sp)
   597fc:	dc800215 	stw	r18,8(sp)
   59800:	dfc00715 	stw	ra,28(sp)
   59804:	dd800615 	stw	r22,24(sp)
   59808:	dd400515 	stw	r21,20(sp)
   5980c:	dd000415 	stw	r20,16(sp)
   59810:	dc400115 	stw	r17,4(sp)
   59814:	dc000015 	stw	r16,0(sp)
   59818:	04800044 	movi	r18,1
   5981c:	24400317 	ldw	r17,12(r4)
   59820:	24000417 	ldw	r16,16(r4)
   59824:	24c00117 	ldw	r19,4(r4)
   59828:	9080422e 	bgeu	r18,r2,59934 <__pack_d+0x144>
   5982c:	00c00104 	movi	r3,4
   59830:	10c03c26 	beq	r2,r3,59924 <__pack_d+0x134>
   59834:	00c00084 	movi	r3,2
   59838:	10c01926 	beq	r2,r3,598a0 <__pack_d+0xb0>
   5983c:	8c04b03a 	or	r2,r17,r16
   59840:	10001726 	beq	r2,zero,598a0 <__pack_d+0xb0>
   59844:	21000217 	ldw	r4,8(r4)
   59848:	00bf0084 	movi	r2,-1022
   5984c:	20804016 	blt	r4,r2,59950 <__pack_d+0x160>
   59850:	0080ffc4 	movi	r2,1023
   59854:	11003316 	blt	r2,r4,59924 <__pack_d+0x134>
   59858:	88803fcc 	andi	r2,r17,255
   5985c:	00c02004 	movi	r3,128
   59860:	10c02926 	beq	r2,r3,59908 <__pack_d+0x118>
   59864:	88801fc4 	addi	r2,r17,127
   59868:	1463803a 	cmpltu	r17,r2,r17
   5986c:	8c21883a 	add	r16,r17,r16
   59870:	1023883a 	mov	r17,r2
   59874:	00880034 	movhi	r2,8192
   59878:	10bfffc4 	addi	r2,r2,-1
   5987c:	14001c36 	bltu	r2,r16,598f0 <__pack_d+0x100>
   59880:	2100ffc4 	addi	r4,r4,1023
   59884:	8006963a 	slli	r3,r16,24
   59888:	8804d23a 	srli	r2,r17,8
   5988c:	8020913a 	slli	r16,r16,4
   59890:	2101ffcc 	andi	r4,r4,2047
   59894:	1884b03a 	or	r2,r3,r2
   59898:	8020d33a 	srli	r16,r16,12
   5989c:	00000306 	br	598ac <__pack_d+0xbc>
   598a0:	0009883a 	mov	r4,zero
   598a4:	0005883a 	mov	r2,zero
   598a8:	0021883a 	mov	r16,zero
   598ac:	2008953a 	slli	r4,r4,20
   598b0:	982697fa 	slli	r19,r19,31
   598b4:	00c00434 	movhi	r3,16
   598b8:	18ffffc4 	addi	r3,r3,-1
   598bc:	80e0703a 	and	r16,r16,r3
   598c0:	8106b03a 	or	r3,r16,r4
   598c4:	1cc6b03a 	or	r3,r3,r19
   598c8:	dfc00717 	ldw	ra,28(sp)
   598cc:	dd800617 	ldw	r22,24(sp)
   598d0:	dd400517 	ldw	r21,20(sp)
   598d4:	dd000417 	ldw	r20,16(sp)
   598d8:	dcc00317 	ldw	r19,12(sp)
   598dc:	dc800217 	ldw	r18,8(sp)
   598e0:	dc400117 	ldw	r17,4(sp)
   598e4:	dc000017 	ldw	r16,0(sp)
   598e8:	dec00804 	addi	sp,sp,32
   598ec:	f800283a 	ret
   598f0:	800697fa 	slli	r3,r16,31
   598f4:	8804d07a 	srli	r2,r17,1
   598f8:	21010004 	addi	r4,r4,1024
   598fc:	8020d07a 	srli	r16,r16,1
   59900:	18a2b03a 	or	r17,r3,r2
   59904:	003fdf06 	br	59884 <__pack_d+0x94>
   59908:	88c0400c 	andi	r3,r17,256
   5990c:	183fd926 	beq	r3,zero,59874 <__pack_d+0x84>
   59910:	8885883a 	add	r2,r17,r2
   59914:	1463803a 	cmpltu	r17,r2,r17
   59918:	8c21883a 	add	r16,r17,r16
   5991c:	1023883a 	mov	r17,r2
   59920:	003fd406 	br	59874 <__pack_d+0x84>
   59924:	0101ffc4 	movi	r4,2047
   59928:	0005883a 	mov	r2,zero
   5992c:	0021883a 	mov	r16,zero
   59930:	003fde06 	br	598ac <__pack_d+0xbc>
   59934:	84000234 	orhi	r16,r16,8
   59938:	00c00434 	movhi	r3,16
   5993c:	18ffffc4 	addi	r3,r3,-1
   59940:	8805883a 	mov	r2,r17
   59944:	80e0703a 	and	r16,r16,r3
   59948:	0101ffc4 	movi	r4,2047
   5994c:	003fd706 	br	598ac <__pack_d+0xbc>
   59950:	1129c83a 	sub	r20,r2,r4
   59954:	00800e04 	movi	r2,56
   59958:	15002716 	blt	r2,r20,599f8 <__pack_d+0x208>
   5995c:	800b883a 	mov	r5,r16
   59960:	a00d883a 	mov	r6,r20
   59964:	8809883a 	mov	r4,r17
   59968:	0059be80 	call	59be8 <__lshrdi3>
   5996c:	9009883a 	mov	r4,r18
   59970:	000b883a 	mov	r5,zero
   59974:	a00d883a 	mov	r6,r20
   59978:	102d883a 	mov	r22,r2
   5997c:	182b883a 	mov	r21,r3
   59980:	0059c2c0 	call	59c2c <__ashldi3>
   59984:	1009003a 	cmpeq	r4,r2,zero
   59988:	1907c83a 	sub	r3,r3,r4
   5998c:	10bfffc4 	addi	r2,r2,-1
   59990:	1c20703a 	and	r16,r3,r16
   59994:	1444703a 	and	r2,r2,r17
   59998:	1404b03a 	or	r2,r2,r16
   5999c:	1004c03a 	cmpne	r2,r2,zero
   599a0:	1584b03a 	or	r2,r2,r22
   599a4:	11003fcc 	andi	r4,r2,255
   599a8:	01402004 	movi	r5,128
   599ac:	a807883a 	mov	r3,r21
   599b0:	2140131e 	bne	r4,r5,59a00 <__pack_d+0x210>
   599b4:	1140400c 	andi	r5,r2,256
   599b8:	28000426 	beq	r5,zero,599cc <__pack_d+0x1dc>
   599bc:	1109883a 	add	r4,r2,r4
   599c0:	2085803a 	cmpltu	r2,r4,r2
   599c4:	1547883a 	add	r3,r2,r21
   599c8:	2005883a 	mov	r2,r4
   599cc:	1808963a 	slli	r4,r3,24
   599d0:	1004d23a 	srli	r2,r2,8
   599d4:	1820913a 	slli	r16,r3,4
   599d8:	01440034 	movhi	r5,4096
   599dc:	297fffc4 	addi	r5,r5,-1
   599e0:	2084b03a 	or	r2,r4,r2
   599e4:	8020d33a 	srli	r16,r16,12
   599e8:	01000044 	movi	r4,1
   599ec:	28ffaf36 	bltu	r5,r3,598ac <__pack_d+0xbc>
   599f0:	0009883a 	mov	r4,zero
   599f4:	003fad06 	br	598ac <__pack_d+0xbc>
   599f8:	0005883a 	mov	r2,zero
   599fc:	0007883a 	mov	r3,zero
   59a00:	11001fc4 	addi	r4,r2,127
   59a04:	2085803a 	cmpltu	r2,r4,r2
   59a08:	10c7883a 	add	r3,r2,r3
   59a0c:	2005883a 	mov	r2,r4
   59a10:	003fee06 	br	599cc <__pack_d+0x1dc>

00059a14 <__unpack_d>:
   59a14:	21800117 	ldw	r6,4(r4)
   59a18:	20c00017 	ldw	r3,0(r4)
   59a1c:	3004d7fa 	srli	r2,r6,31
   59a20:	3008d53a 	srli	r4,r6,20
   59a24:	28800115 	stw	r2,4(r5)
   59a28:	2101ffcc 	andi	r4,r4,2047
   59a2c:	00800434 	movhi	r2,16
   59a30:	10bfffc4 	addi	r2,r2,-1
   59a34:	3084703a 	and	r2,r6,r2
   59a38:	20001a1e 	bne	r4,zero,59aa4 <__unpack_d+0x90>
   59a3c:	1888b03a 	or	r4,r3,r2
   59a40:	20002626 	beq	r4,zero,59adc <__unpack_d+0xc8>
   59a44:	1808d63a 	srli	r4,r3,24
   59a48:	1004923a 	slli	r2,r2,8
   59a4c:	01bf0084 	movi	r6,-1022
   59a50:	29800215 	stw	r6,8(r5)
   59a54:	2084b03a 	or	r2,r4,r2
   59a58:	010000c4 	movi	r4,3
   59a5c:	29000015 	stw	r4,0(r5)
   59a60:	02040034 	movhi	r8,4096
   59a64:	423fffc4 	addi	r8,r8,-1
   59a68:	1806923a 	slli	r3,r3,8
   59a6c:	40801836 	bltu	r8,r2,59ad0 <__unpack_d+0xbc>
   59a70:	013f0044 	movi	r4,-1023
   59a74:	18cd883a 	add	r6,r3,r3
   59a78:	30c7803a 	cmpltu	r3,r6,r3
   59a7c:	1085883a 	add	r2,r2,r2
   59a80:	1885883a 	add	r2,r3,r2
   59a84:	200f883a 	mov	r7,r4
   59a88:	3007883a 	mov	r3,r6
   59a8c:	213fffc4 	addi	r4,r4,-1
   59a90:	40bff82e 	bgeu	r8,r2,59a74 <__unpack_d+0x60>
   59a94:	29c00215 	stw	r7,8(r5)
   59a98:	28c00315 	stw	r3,12(r5)
   59a9c:	28800415 	stw	r2,16(r5)
   59aa0:	f800283a 	ret
   59aa4:	01c1ffc4 	movi	r7,2047
   59aa8:	21c00f26 	beq	r4,r7,59ae8 <__unpack_d+0xd4>
   59aac:	180cd63a 	srli	r6,r3,24
   59ab0:	1004923a 	slli	r2,r2,8
   59ab4:	213f0044 	addi	r4,r4,-1023
   59ab8:	1806923a 	slli	r3,r3,8
   59abc:	3084b03a 	or	r2,r6,r2
   59ac0:	29000215 	stw	r4,8(r5)
   59ac4:	010000c4 	movi	r4,3
   59ac8:	10840034 	orhi	r2,r2,4096
   59acc:	29000015 	stw	r4,0(r5)
   59ad0:	28c00315 	stw	r3,12(r5)
   59ad4:	28800415 	stw	r2,16(r5)
   59ad8:	f800283a 	ret
   59adc:	00800084 	movi	r2,2
   59ae0:	28800015 	stw	r2,0(r5)
   59ae4:	f800283a 	ret
   59ae8:	1888b03a 	or	r4,r3,r2
   59aec:	20000526 	beq	r4,zero,59b04 <__unpack_d+0xf0>
   59af0:	3180022c 	andhi	r6,r6,8
   59af4:	30000626 	beq	r6,zero,59b10 <__unpack_d+0xfc>
   59af8:	01000044 	movi	r4,1
   59afc:	29000015 	stw	r4,0(r5)
   59b00:	003ff306 	br	59ad0 <__unpack_d+0xbc>
   59b04:	00800104 	movi	r2,4
   59b08:	28800015 	stw	r2,0(r5)
   59b0c:	f800283a 	ret
   59b10:	28000015 	stw	zero,0(r5)
   59b14:	003fee06 	br	59ad0 <__unpack_d+0xbc>

00059b18 <__fpcmp_parts_d>:
   59b18:	20c00017 	ldw	r3,0(r4)
   59b1c:	00800044 	movi	r2,1
   59b20:	10c0142e 	bgeu	r2,r3,59b74 <__fpcmp_parts_d+0x5c>
   59b24:	29800017 	ldw	r6,0(r5)
   59b28:	1180122e 	bgeu	r2,r6,59b74 <__fpcmp_parts_d+0x5c>
   59b2c:	01c00104 	movi	r7,4
   59b30:	19c02826 	beq	r3,r7,59bd4 <__fpcmp_parts_d+0xbc>
   59b34:	31c00926 	beq	r6,r7,59b5c <__fpcmp_parts_d+0x44>
   59b38:	01c00084 	movi	r7,2
   59b3c:	19c00626 	beq	r3,r7,59b58 <__fpcmp_parts_d+0x40>
   59b40:	31c00a26 	beq	r6,r7,59b6c <__fpcmp_parts_d+0x54>
   59b44:	20c00117 	ldw	r3,4(r4)
   59b48:	29800117 	ldw	r6,4(r5)
   59b4c:	19800b26 	beq	r3,r6,59b7c <__fpcmp_parts_d+0x64>
   59b50:	1800041e 	bne	r3,zero,59b64 <__fpcmp_parts_d+0x4c>
   59b54:	f800283a 	ret
   59b58:	30c01a26 	beq	r6,r3,59bc4 <__fpcmp_parts_d+0xac>
   59b5c:	28800117 	ldw	r2,4(r5)
   59b60:	1000041e 	bne	r2,zero,59b74 <__fpcmp_parts_d+0x5c>
   59b64:	00bfffc4 	movi	r2,-1
   59b68:	f800283a 	ret
   59b6c:	20800117 	ldw	r2,4(r4)
   59b70:	103ffc1e 	bne	r2,zero,59b64 <__fpcmp_parts_d+0x4c>
   59b74:	00800044 	movi	r2,1
   59b78:	f800283a 	ret
   59b7c:	21c00217 	ldw	r7,8(r4)
   59b80:	29800217 	ldw	r6,8(r5)
   59b84:	31c0020e 	bge	r6,r7,59b90 <__fpcmp_parts_d+0x78>
   59b88:	183ff61e 	bne	r3,zero,59b64 <__fpcmp_parts_d+0x4c>
   59b8c:	f800283a 	ret
   59b90:	39800a16 	blt	r7,r6,59bbc <__fpcmp_parts_d+0xa4>
   59b94:	20800417 	ldw	r2,16(r4)
   59b98:	29800417 	ldw	r6,16(r5)
   59b9c:	21c00317 	ldw	r7,12(r4)
   59ba0:	29000317 	ldw	r4,12(r5)
   59ba4:	30800936 	bltu	r6,r2,59bcc <__fpcmp_parts_d+0xb4>
   59ba8:	1180011e 	bne	r2,r6,59bb0 <__fpcmp_parts_d+0x98>
   59bac:	21c00736 	bltu	r4,r7,59bcc <__fpcmp_parts_d+0xb4>
   59bb0:	11800236 	bltu	r2,r6,59bbc <__fpcmp_parts_d+0xa4>
   59bb4:	3080031e 	bne	r6,r2,59bc4 <__fpcmp_parts_d+0xac>
   59bb8:	3900022e 	bgeu	r7,r4,59bc4 <__fpcmp_parts_d+0xac>
   59bbc:	183fe926 	beq	r3,zero,59b64 <__fpcmp_parts_d+0x4c>
   59bc0:	003fec06 	br	59b74 <__fpcmp_parts_d+0x5c>
   59bc4:	0005883a 	mov	r2,zero
   59bc8:	f800283a 	ret
   59bcc:	183fe926 	beq	r3,zero,59b74 <__fpcmp_parts_d+0x5c>
   59bd0:	003fe406 	br	59b64 <__fpcmp_parts_d+0x4c>
   59bd4:	30ffe51e 	bne	r6,r3,59b6c <__fpcmp_parts_d+0x54>
   59bd8:	28c00117 	ldw	r3,4(r5)
   59bdc:	20800117 	ldw	r2,4(r4)
   59be0:	1885c83a 	sub	r2,r3,r2
   59be4:	f800283a 	ret

00059be8 <__lshrdi3>:
   59be8:	2005883a 	mov	r2,r4
   59bec:	2807883a 	mov	r3,r5
   59bf0:	30000826 	beq	r6,zero,59c14 <__lshrdi3+0x2c>
   59bf4:	01000804 	movi	r4,32
   59bf8:	2189c83a 	sub	r4,r4,r6
   59bfc:	0100060e 	bge	zero,r4,59c18 <__lshrdi3+0x30>
   59c00:	1184d83a 	srl	r2,r2,r6
   59c04:	2908983a 	sll	r4,r5,r4
   59c08:	298cd83a 	srl	r6,r5,r6
   59c0c:	2084b03a 	or	r2,r4,r2
   59c10:	3007883a 	mov	r3,r6
   59c14:	f800283a 	ret
   59c18:	0105c83a 	sub	r2,zero,r4
   59c1c:	000d883a 	mov	r6,zero
   59c20:	2884d83a 	srl	r2,r5,r2
   59c24:	3007883a 	mov	r3,r6
   59c28:	003ffa06 	br	59c14 <__lshrdi3+0x2c>

00059c2c <__ashldi3>:
   59c2c:	2005883a 	mov	r2,r4
   59c30:	2807883a 	mov	r3,r5
   59c34:	30000826 	beq	r6,zero,59c58 <__ashldi3+0x2c>
   59c38:	01000804 	movi	r4,32
   59c3c:	2189c83a 	sub	r4,r4,r6
   59c40:	0100060e 	bge	zero,r4,59c5c <__ashldi3+0x30>
   59c44:	1108d83a 	srl	r4,r2,r4
   59c48:	2986983a 	sll	r3,r5,r6
   59c4c:	118c983a 	sll	r6,r2,r6
   59c50:	20c6b03a 	or	r3,r4,r3
   59c54:	3005883a 	mov	r2,r6
   59c58:	f800283a 	ret
   59c5c:	0107c83a 	sub	r3,zero,r4
   59c60:	000d883a 	mov	r6,zero
   59c64:	10c6983a 	sll	r3,r2,r3
   59c68:	3005883a 	mov	r2,r6
   59c6c:	003ffa06 	br	59c58 <__ashldi3+0x2c>

00059c70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   59c70:	defffe04 	addi	sp,sp,-8
   59c74:	dfc00115 	stw	ra,4(sp)
   59c78:	df000015 	stw	fp,0(sp)
   59c7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   59c80:	00800074 	movhi	r2,1
   59c84:	10877104 	addi	r2,r2,7620
   59c88:	10800017 	ldw	r2,0(r2)
   59c8c:	10000526 	beq	r2,zero,59ca4 <alt_get_errno+0x34>
   59c90:	00800074 	movhi	r2,1
   59c94:	10877104 	addi	r2,r2,7620
   59c98:	10800017 	ldw	r2,0(r2)
   59c9c:	103ee83a 	callr	r2
   59ca0:	00000206 	br	59cac <alt_get_errno+0x3c>
   59ca4:	00800074 	movhi	r2,1
   59ca8:	10878104 	addi	r2,r2,7684
}
   59cac:	e037883a 	mov	sp,fp
   59cb0:	dfc00117 	ldw	ra,4(sp)
   59cb4:	df000017 	ldw	fp,0(sp)
   59cb8:	dec00204 	addi	sp,sp,8
   59cbc:	f800283a 	ret

00059cc0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   59cc0:	defffb04 	addi	sp,sp,-20
   59cc4:	dfc00415 	stw	ra,16(sp)
   59cc8:	df000315 	stw	fp,12(sp)
   59ccc:	df000304 	addi	fp,sp,12
   59cd0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   59cd4:	e0bfff17 	ldw	r2,-4(fp)
   59cd8:	10000716 	blt	r2,zero,59cf8 <close+0x38>
   59cdc:	e13fff17 	ldw	r4,-4(fp)
   59ce0:	01400304 	movi	r5,12
   59ce4:	005960c0 	call	5960c <__mulsi3>
   59ce8:	00c00074 	movhi	r3,1
   59cec:	18c2ef04 	addi	r3,r3,3004
   59cf0:	10c5883a 	add	r2,r2,r3
   59cf4:	00000106 	br	59cfc <close+0x3c>
   59cf8:	0005883a 	mov	r2,zero
   59cfc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   59d00:	e0bffd17 	ldw	r2,-12(fp)
   59d04:	10001826 	beq	r2,zero,59d68 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   59d08:	e0bffd17 	ldw	r2,-12(fp)
   59d0c:	10800017 	ldw	r2,0(r2)
   59d10:	10800417 	ldw	r2,16(r2)
   59d14:	10000626 	beq	r2,zero,59d30 <close+0x70>
   59d18:	e0bffd17 	ldw	r2,-12(fp)
   59d1c:	10800017 	ldw	r2,0(r2)
   59d20:	10800417 	ldw	r2,16(r2)
   59d24:	e13ffd17 	ldw	r4,-12(fp)
   59d28:	103ee83a 	callr	r2
   59d2c:	00000106 	br	59d34 <close+0x74>
   59d30:	0005883a 	mov	r2,zero
   59d34:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   59d38:	e13fff17 	ldw	r4,-4(fp)
   59d3c:	005a3b80 	call	5a3b8 <alt_release_fd>
    if (rval < 0)
   59d40:	e0bffe17 	ldw	r2,-8(fp)
   59d44:	1000060e 	bge	r2,zero,59d60 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   59d48:	0059c700 	call	59c70 <alt_get_errno>
   59d4c:	e0fffe17 	ldw	r3,-8(fp)
   59d50:	00c7c83a 	sub	r3,zero,r3
   59d54:	10c00015 	stw	r3,0(r2)
      return -1;
   59d58:	00bfffc4 	movi	r2,-1
   59d5c:	00000606 	br	59d78 <close+0xb8>
    }
    return 0;
   59d60:	0005883a 	mov	r2,zero
   59d64:	00000406 	br	59d78 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   59d68:	0059c700 	call	59c70 <alt_get_errno>
   59d6c:	00c01444 	movi	r3,81
   59d70:	10c00015 	stw	r3,0(r2)
    return -1;
   59d74:	00bfffc4 	movi	r2,-1
  }
}
   59d78:	e037883a 	mov	sp,fp
   59d7c:	dfc00117 	ldw	ra,4(sp)
   59d80:	df000017 	ldw	fp,0(sp)
   59d84:	dec00204 	addi	sp,sp,8
   59d88:	f800283a 	ret

00059d8c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   59d8c:	defffc04 	addi	sp,sp,-16
   59d90:	df000315 	stw	fp,12(sp)
   59d94:	df000304 	addi	fp,sp,12
   59d98:	e13ffd15 	stw	r4,-12(fp)
   59d9c:	e17ffe15 	stw	r5,-8(fp)
   59da0:	e1bfff15 	stw	r6,-4(fp)
  return len;
   59da4:	e0bfff17 	ldw	r2,-4(fp)
}
   59da8:	e037883a 	mov	sp,fp
   59dac:	df000017 	ldw	fp,0(sp)
   59db0:	dec00104 	addi	sp,sp,4
   59db4:	f800283a 	ret

00059db8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   59db8:	defffe04 	addi	sp,sp,-8
   59dbc:	dfc00115 	stw	ra,4(sp)
   59dc0:	df000015 	stw	fp,0(sp)
   59dc4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   59dc8:	00800074 	movhi	r2,1
   59dcc:	10877104 	addi	r2,r2,7620
   59dd0:	10800017 	ldw	r2,0(r2)
   59dd4:	10000526 	beq	r2,zero,59dec <alt_get_errno+0x34>
   59dd8:	00800074 	movhi	r2,1
   59ddc:	10877104 	addi	r2,r2,7620
   59de0:	10800017 	ldw	r2,0(r2)
   59de4:	103ee83a 	callr	r2
   59de8:	00000206 	br	59df4 <alt_get_errno+0x3c>
   59dec:	00800074 	movhi	r2,1
   59df0:	10878104 	addi	r2,r2,7684
}
   59df4:	e037883a 	mov	sp,fp
   59df8:	dfc00117 	ldw	ra,4(sp)
   59dfc:	df000017 	ldw	fp,0(sp)
   59e00:	dec00204 	addi	sp,sp,8
   59e04:	f800283a 	ret

00059e08 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   59e08:	defffb04 	addi	sp,sp,-20
   59e0c:	dfc00415 	stw	ra,16(sp)
   59e10:	df000315 	stw	fp,12(sp)
   59e14:	df000304 	addi	fp,sp,12
   59e18:	e13ffe15 	stw	r4,-8(fp)
   59e1c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   59e20:	e0bffe17 	ldw	r2,-8(fp)
   59e24:	10000716 	blt	r2,zero,59e44 <fstat+0x3c>
   59e28:	e13ffe17 	ldw	r4,-8(fp)
   59e2c:	01400304 	movi	r5,12
   59e30:	005960c0 	call	5960c <__mulsi3>
   59e34:	00c00074 	movhi	r3,1
   59e38:	18c2ef04 	addi	r3,r3,3004
   59e3c:	10c5883a 	add	r2,r2,r3
   59e40:	00000106 	br	59e48 <fstat+0x40>
   59e44:	0005883a 	mov	r2,zero
   59e48:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   59e4c:	e0bffd17 	ldw	r2,-12(fp)
   59e50:	10001026 	beq	r2,zero,59e94 <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   59e54:	e0bffd17 	ldw	r2,-12(fp)
   59e58:	10800017 	ldw	r2,0(r2)
   59e5c:	10800817 	ldw	r2,32(r2)
   59e60:	10000726 	beq	r2,zero,59e80 <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
   59e64:	e0bffd17 	ldw	r2,-12(fp)
   59e68:	10800017 	ldw	r2,0(r2)
   59e6c:	10800817 	ldw	r2,32(r2)
   59e70:	e13ffd17 	ldw	r4,-12(fp)
   59e74:	e17fff17 	ldw	r5,-4(fp)
   59e78:	103ee83a 	callr	r2
   59e7c:	00000906 	br	59ea4 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   59e80:	e0bfff17 	ldw	r2,-4(fp)
   59e84:	00c80004 	movi	r3,8192
   59e88:	10c00115 	stw	r3,4(r2)
      return 0;
   59e8c:	0005883a 	mov	r2,zero
   59e90:	00000406 	br	59ea4 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   59e94:	0059db80 	call	59db8 <alt_get_errno>
   59e98:	00c01444 	movi	r3,81
   59e9c:	10c00015 	stw	r3,0(r2)
    return -1;
   59ea0:	00bfffc4 	movi	r2,-1
  }
}
   59ea4:	e037883a 	mov	sp,fp
   59ea8:	dfc00117 	ldw	ra,4(sp)
   59eac:	df000017 	ldw	fp,0(sp)
   59eb0:	dec00204 	addi	sp,sp,8
   59eb4:	f800283a 	ret

00059eb8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   59eb8:	defffe04 	addi	sp,sp,-8
   59ebc:	dfc00115 	stw	ra,4(sp)
   59ec0:	df000015 	stw	fp,0(sp)
   59ec4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   59ec8:	00800074 	movhi	r2,1
   59ecc:	10877104 	addi	r2,r2,7620
   59ed0:	10800017 	ldw	r2,0(r2)
   59ed4:	10000526 	beq	r2,zero,59eec <alt_get_errno+0x34>
   59ed8:	00800074 	movhi	r2,1
   59edc:	10877104 	addi	r2,r2,7620
   59ee0:	10800017 	ldw	r2,0(r2)
   59ee4:	103ee83a 	callr	r2
   59ee8:	00000206 	br	59ef4 <alt_get_errno+0x3c>
   59eec:	00800074 	movhi	r2,1
   59ef0:	10878104 	addi	r2,r2,7684
}
   59ef4:	e037883a 	mov	sp,fp
   59ef8:	dfc00117 	ldw	ra,4(sp)
   59efc:	df000017 	ldw	fp,0(sp)
   59f00:	dec00204 	addi	sp,sp,8
   59f04:	f800283a 	ret

00059f08 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   59f08:	deffed04 	addi	sp,sp,-76
   59f0c:	dfc01215 	stw	ra,72(sp)
   59f10:	df001115 	stw	fp,68(sp)
   59f14:	df001104 	addi	fp,sp,68
   59f18:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   59f1c:	e0bfff17 	ldw	r2,-4(fp)
   59f20:	10000716 	blt	r2,zero,59f40 <isatty+0x38>
   59f24:	e13fff17 	ldw	r4,-4(fp)
   59f28:	01400304 	movi	r5,12
   59f2c:	005960c0 	call	5960c <__mulsi3>
   59f30:	00c00074 	movhi	r3,1
   59f34:	18c2ef04 	addi	r3,r3,3004
   59f38:	10c5883a 	add	r2,r2,r3
   59f3c:	00000106 	br	59f44 <isatty+0x3c>
   59f40:	0005883a 	mov	r2,zero
   59f44:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   59f48:	e0bfef17 	ldw	r2,-68(fp)
   59f4c:	10000e26 	beq	r2,zero,59f88 <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   59f50:	e0bfef17 	ldw	r2,-68(fp)
   59f54:	10800017 	ldw	r2,0(r2)
   59f58:	10800817 	ldw	r2,32(r2)
   59f5c:	1000021e 	bne	r2,zero,59f68 <isatty+0x60>
    {
      return 1;
   59f60:	00800044 	movi	r2,1
   59f64:	00000c06 	br	59f98 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   59f68:	e0bff004 	addi	r2,fp,-64
   59f6c:	e13fff17 	ldw	r4,-4(fp)
   59f70:	100b883a 	mov	r5,r2
   59f74:	0059e080 	call	59e08 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   59f78:	e0bff117 	ldw	r2,-60(fp)
   59f7c:	10880020 	cmpeqi	r2,r2,8192
   59f80:	10803fcc 	andi	r2,r2,255
   59f84:	00000406 	br	59f98 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   59f88:	0059eb80 	call	59eb8 <alt_get_errno>
   59f8c:	00c01444 	movi	r3,81
   59f90:	10c00015 	stw	r3,0(r2)
    return 0;
   59f94:	0005883a 	mov	r2,zero
  }
}
   59f98:	e037883a 	mov	sp,fp
   59f9c:	dfc00117 	ldw	ra,4(sp)
   59fa0:	df000017 	ldw	fp,0(sp)
   59fa4:	dec00204 	addi	sp,sp,8
   59fa8:	f800283a 	ret

00059fac <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   59fac:	defffc04 	addi	sp,sp,-16
   59fb0:	df000315 	stw	fp,12(sp)
   59fb4:	df000304 	addi	fp,sp,12
   59fb8:	e13ffd15 	stw	r4,-12(fp)
   59fbc:	e17ffe15 	stw	r5,-8(fp)
   59fc0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   59fc4:	e0fffe17 	ldw	r3,-8(fp)
   59fc8:	e0bffd17 	ldw	r2,-12(fp)
   59fcc:	18800e26 	beq	r3,r2,5a008 <alt_load_section+0x5c>
  {
    while( to != end )
   59fd0:	00000a06 	br	59ffc <alt_load_section+0x50>
    {
      *to++ = *from++;
   59fd4:	e0bffd17 	ldw	r2,-12(fp)
   59fd8:	10c00017 	ldw	r3,0(r2)
   59fdc:	e0bffe17 	ldw	r2,-8(fp)
   59fe0:	10c00015 	stw	r3,0(r2)
   59fe4:	e0bffe17 	ldw	r2,-8(fp)
   59fe8:	10800104 	addi	r2,r2,4
   59fec:	e0bffe15 	stw	r2,-8(fp)
   59ff0:	e0bffd17 	ldw	r2,-12(fp)
   59ff4:	10800104 	addi	r2,r2,4
   59ff8:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   59ffc:	e0fffe17 	ldw	r3,-8(fp)
   5a000:	e0bfff17 	ldw	r2,-4(fp)
   5a004:	18bff31e 	bne	r3,r2,59fd4 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   5a008:	e037883a 	mov	sp,fp
   5a00c:	df000017 	ldw	fp,0(sp)
   5a010:	dec00104 	addi	sp,sp,4
   5a014:	f800283a 	ret

0005a018 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   5a018:	defffe04 	addi	sp,sp,-8
   5a01c:	dfc00115 	stw	ra,4(sp)
   5a020:	df000015 	stw	fp,0(sp)
   5a024:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   5a028:	010001b4 	movhi	r4,6
   5a02c:	2131ed04 	addi	r4,r4,-14412
   5a030:	01400074 	movhi	r5,1
   5a034:	2940e004 	addi	r5,r5,896
   5a038:	01800074 	movhi	r6,1
   5a03c:	31877604 	addi	r6,r6,7640
   5a040:	0059fac0 	call	59fac <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   5a044:	01000174 	movhi	r4,5
   5a048:	21000804 	addi	r4,r4,32
   5a04c:	01400174 	movhi	r5,5
   5a050:	29400804 	addi	r5,r5,32
   5a054:	01800174 	movhi	r6,5
   5a058:	31806e04 	addi	r6,r6,440
   5a05c:	0059fac0 	call	59fac <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   5a060:	010001b4 	movhi	r4,6
   5a064:	21310d04 	addi	r4,r4,-15308
   5a068:	01400074 	movhi	r5,1
   5a06c:	29400004 	addi	r5,r5,0
   5a070:	01800074 	movhi	r6,1
   5a074:	3180e004 	addi	r6,r6,896
   5a078:	0059fac0 	call	59fac <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   5a07c:	005b3940 	call	5b394 <alt_dcache_flush_all>
  alt_icache_flush_all();
   5a080:	005b5580 	call	5b558 <alt_icache_flush_all>
}
   5a084:	e037883a 	mov	sp,fp
   5a088:	dfc00117 	ldw	ra,4(sp)
   5a08c:	df000017 	ldw	fp,0(sp)
   5a090:	dec00204 	addi	sp,sp,8
   5a094:	f800283a 	ret

0005a098 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   5a098:	defffe04 	addi	sp,sp,-8
   5a09c:	dfc00115 	stw	ra,4(sp)
   5a0a0:	df000015 	stw	fp,0(sp)
   5a0a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   5a0a8:	00800074 	movhi	r2,1
   5a0ac:	10877104 	addi	r2,r2,7620
   5a0b0:	10800017 	ldw	r2,0(r2)
   5a0b4:	10000526 	beq	r2,zero,5a0cc <alt_get_errno+0x34>
   5a0b8:	00800074 	movhi	r2,1
   5a0bc:	10877104 	addi	r2,r2,7620
   5a0c0:	10800017 	ldw	r2,0(r2)
   5a0c4:	103ee83a 	callr	r2
   5a0c8:	00000206 	br	5a0d4 <alt_get_errno+0x3c>
   5a0cc:	00800074 	movhi	r2,1
   5a0d0:	10878104 	addi	r2,r2,7684
}
   5a0d4:	e037883a 	mov	sp,fp
   5a0d8:	dfc00117 	ldw	ra,4(sp)
   5a0dc:	df000017 	ldw	fp,0(sp)
   5a0e0:	dec00204 	addi	sp,sp,8
   5a0e4:	f800283a 	ret

0005a0e8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   5a0e8:	defff904 	addi	sp,sp,-28
   5a0ec:	dfc00615 	stw	ra,24(sp)
   5a0f0:	df000515 	stw	fp,20(sp)
   5a0f4:	df000504 	addi	fp,sp,20
   5a0f8:	e13ffd15 	stw	r4,-12(fp)
   5a0fc:	e17ffe15 	stw	r5,-8(fp)
   5a100:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   5a104:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   5a108:	e0bffd17 	ldw	r2,-12(fp)
   5a10c:	10000716 	blt	r2,zero,5a12c <lseek+0x44>
   5a110:	e13ffd17 	ldw	r4,-12(fp)
   5a114:	01400304 	movi	r5,12
   5a118:	005960c0 	call	5960c <__mulsi3>
   5a11c:	00c00074 	movhi	r3,1
   5a120:	18c2ef04 	addi	r3,r3,3004
   5a124:	10c5883a 	add	r2,r2,r3
   5a128:	00000106 	br	5a130 <lseek+0x48>
   5a12c:	0005883a 	mov	r2,zero
   5a130:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   5a134:	e0bffc17 	ldw	r2,-16(fp)
   5a138:	10001026 	beq	r2,zero,5a17c <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   5a13c:	e0bffc17 	ldw	r2,-16(fp)
   5a140:	10800017 	ldw	r2,0(r2)
   5a144:	10800717 	ldw	r2,28(r2)
   5a148:	10000926 	beq	r2,zero,5a170 <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   5a14c:	e0bffc17 	ldw	r2,-16(fp)
   5a150:	10800017 	ldw	r2,0(r2)
   5a154:	10800717 	ldw	r2,28(r2)
   5a158:	e13ffc17 	ldw	r4,-16(fp)
   5a15c:	e17ffe17 	ldw	r5,-8(fp)
   5a160:	e1bfff17 	ldw	r6,-4(fp)
   5a164:	103ee83a 	callr	r2
   5a168:	e0bffb15 	stw	r2,-20(fp)
   5a16c:	00000506 	br	5a184 <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   5a170:	00bfde84 	movi	r2,-134
   5a174:	e0bffb15 	stw	r2,-20(fp)
   5a178:	00000206 	br	5a184 <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
   5a17c:	00bfebc4 	movi	r2,-81
   5a180:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   5a184:	e0bffb17 	ldw	r2,-20(fp)
   5a188:	1000060e 	bge	r2,zero,5a1a4 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   5a18c:	005a0980 	call	5a098 <alt_get_errno>
   5a190:	e0fffb17 	ldw	r3,-20(fp)
   5a194:	00c7c83a 	sub	r3,zero,r3
   5a198:	10c00015 	stw	r3,0(r2)
    rc = -1;
   5a19c:	00bfffc4 	movi	r2,-1
   5a1a0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   5a1a4:	e0bffb17 	ldw	r2,-20(fp)
}
   5a1a8:	e037883a 	mov	sp,fp
   5a1ac:	dfc00117 	ldw	ra,4(sp)
   5a1b0:	df000017 	ldw	fp,0(sp)
   5a1b4:	dec00204 	addi	sp,sp,8
   5a1b8:	f800283a 	ret

0005a1bc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   5a1bc:	defffd04 	addi	sp,sp,-12
   5a1c0:	dfc00215 	stw	ra,8(sp)
   5a1c4:	df000115 	stw	fp,4(sp)
   5a1c8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   5a1cc:	0009883a 	mov	r4,zero
   5a1d0:	005a6600 	call	5a660 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   5a1d4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   5a1d8:	005a6940 	call	5a694 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   5a1dc:	01000074 	movhi	r4,1
   5a1e0:	2100d804 	addi	r4,r4,864
   5a1e4:	01400074 	movhi	r5,1
   5a1e8:	2940d804 	addi	r5,r5,864
   5a1ec:	01800074 	movhi	r6,1
   5a1f0:	3180d804 	addi	r6,r6,864
   5a1f4:	005b91c0 	call	5b91c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   5a1f8:	005b4a00 	call	5b4a0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   5a1fc:	010001b4 	movhi	r4,6
   5a200:	212d3f04 	addi	r4,r4,-19204
   5a204:	005c0600 	call	5c060 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   5a208:	d1201b17 	ldw	r4,-32660(gp)
   5a20c:	d0e01c17 	ldw	r3,-32656(gp)
   5a210:	d0a01d17 	ldw	r2,-32652(gp)
   5a214:	180b883a 	mov	r5,r3
   5a218:	100d883a 	mov	r6,r2
   5a21c:	00504800 	call	50480 <main>
   5a220:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   5a224:	01000044 	movi	r4,1
   5a228:	0059cc00 	call	59cc0 <close>
  exit (result);
   5a22c:	e13fff17 	ldw	r4,-4(fp)
   5a230:	005c0740 	call	5c074 <exit>

0005a234 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   5a234:	defffe04 	addi	sp,sp,-8
   5a238:	df000115 	stw	fp,4(sp)
   5a23c:	df000104 	addi	fp,sp,4
   5a240:	e13fff15 	stw	r4,-4(fp)
}
   5a244:	e037883a 	mov	sp,fp
   5a248:	df000017 	ldw	fp,0(sp)
   5a24c:	dec00104 	addi	sp,sp,4
   5a250:	f800283a 	ret

0005a254 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   5a254:	defffe04 	addi	sp,sp,-8
   5a258:	df000115 	stw	fp,4(sp)
   5a25c:	df000104 	addi	fp,sp,4
   5a260:	e13fff15 	stw	r4,-4(fp)
}
   5a264:	e037883a 	mov	sp,fp
   5a268:	df000017 	ldw	fp,0(sp)
   5a26c:	dec00104 	addi	sp,sp,4
   5a270:	f800283a 	ret

0005a274 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   5a274:	defffe04 	addi	sp,sp,-8
   5a278:	dfc00115 	stw	ra,4(sp)
   5a27c:	df000015 	stw	fp,0(sp)
   5a280:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   5a284:	00800074 	movhi	r2,1
   5a288:	10877104 	addi	r2,r2,7620
   5a28c:	10800017 	ldw	r2,0(r2)
   5a290:	10000526 	beq	r2,zero,5a2a8 <alt_get_errno+0x34>
   5a294:	00800074 	movhi	r2,1
   5a298:	10877104 	addi	r2,r2,7620
   5a29c:	10800017 	ldw	r2,0(r2)
   5a2a0:	103ee83a 	callr	r2
   5a2a4:	00000206 	br	5a2b0 <alt_get_errno+0x3c>
   5a2a8:	00800074 	movhi	r2,1
   5a2ac:	10878104 	addi	r2,r2,7684
}
   5a2b0:	e037883a 	mov	sp,fp
   5a2b4:	dfc00117 	ldw	ra,4(sp)
   5a2b8:	df000017 	ldw	fp,0(sp)
   5a2bc:	dec00204 	addi	sp,sp,8
   5a2c0:	f800283a 	ret

0005a2c4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   5a2c4:	defff904 	addi	sp,sp,-28
   5a2c8:	dfc00615 	stw	ra,24(sp)
   5a2cc:	df000515 	stw	fp,20(sp)
   5a2d0:	df000504 	addi	fp,sp,20
   5a2d4:	e13ffd15 	stw	r4,-12(fp)
   5a2d8:	e17ffe15 	stw	r5,-8(fp)
   5a2dc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   5a2e0:	e0bffd17 	ldw	r2,-12(fp)
   5a2e4:	10000716 	blt	r2,zero,5a304 <read+0x40>
   5a2e8:	e13ffd17 	ldw	r4,-12(fp)
   5a2ec:	01400304 	movi	r5,12
   5a2f0:	005960c0 	call	5960c <__mulsi3>
   5a2f4:	00c00074 	movhi	r3,1
   5a2f8:	18c2ef04 	addi	r3,r3,3004
   5a2fc:	10c5883a 	add	r2,r2,r3
   5a300:	00000106 	br	5a308 <read+0x44>
   5a304:	0005883a 	mov	r2,zero
   5a308:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   5a30c:	e0bffb17 	ldw	r2,-20(fp)
   5a310:	10002026 	beq	r2,zero,5a394 <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   5a314:	e0bffb17 	ldw	r2,-20(fp)
   5a318:	10800217 	ldw	r2,8(r2)
   5a31c:	108000cc 	andi	r2,r2,3
   5a320:	10800060 	cmpeqi	r2,r2,1
   5a324:	1000171e 	bne	r2,zero,5a384 <read+0xc0>
        (fd->dev->read))
   5a328:	e0bffb17 	ldw	r2,-20(fp)
   5a32c:	10800017 	ldw	r2,0(r2)
   5a330:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   5a334:	10001326 	beq	r2,zero,5a384 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   5a338:	e0bffb17 	ldw	r2,-20(fp)
   5a33c:	10800017 	ldw	r2,0(r2)
   5a340:	10c00517 	ldw	r3,20(r2)
   5a344:	e0bfff17 	ldw	r2,-4(fp)
   5a348:	e13ffb17 	ldw	r4,-20(fp)
   5a34c:	e17ffe17 	ldw	r5,-8(fp)
   5a350:	100d883a 	mov	r6,r2
   5a354:	183ee83a 	callr	r3
   5a358:	e0bffc15 	stw	r2,-16(fp)
   5a35c:	e0bffc17 	ldw	r2,-16(fp)
   5a360:	1000060e 	bge	r2,zero,5a37c <read+0xb8>
        {
          ALT_ERRNO = -rval;
   5a364:	005a2740 	call	5a274 <alt_get_errno>
   5a368:	e0fffc17 	ldw	r3,-16(fp)
   5a36c:	00c7c83a 	sub	r3,zero,r3
   5a370:	10c00015 	stw	r3,0(r2)
          return -1;
   5a374:	00bfffc4 	movi	r2,-1
   5a378:	00000a06 	br	5a3a4 <read+0xe0>
        }
        return rval;
   5a37c:	e0bffc17 	ldw	r2,-16(fp)
   5a380:	00000806 	br	5a3a4 <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   5a384:	005a2740 	call	5a274 <alt_get_errno>
   5a388:	00c00344 	movi	r3,13
   5a38c:	10c00015 	stw	r3,0(r2)
   5a390:	00000306 	br	5a3a0 <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   5a394:	005a2740 	call	5a274 <alt_get_errno>
   5a398:	00c01444 	movi	r3,81
   5a39c:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   5a3a0:	00bfffc4 	movi	r2,-1
}
   5a3a4:	e037883a 	mov	sp,fp
   5a3a8:	dfc00117 	ldw	ra,4(sp)
   5a3ac:	df000017 	ldw	fp,0(sp)
   5a3b0:	dec00204 	addi	sp,sp,8
   5a3b4:	f800283a 	ret

0005a3b8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   5a3b8:	defffc04 	addi	sp,sp,-16
   5a3bc:	dfc00315 	stw	ra,12(sp)
   5a3c0:	df000215 	stw	fp,8(sp)
   5a3c4:	dc000115 	stw	r16,4(sp)
   5a3c8:	df000104 	addi	fp,sp,4
   5a3cc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   5a3d0:	e0bfff17 	ldw	r2,-4(fp)
   5a3d4:	108000d0 	cmplti	r2,r2,3
   5a3d8:	1000111e 	bne	r2,zero,5a420 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   5a3dc:	04000074 	movhi	r16,1
   5a3e0:	8402ef04 	addi	r16,r16,3004
   5a3e4:	e0bfff17 	ldw	r2,-4(fp)
   5a3e8:	1009883a 	mov	r4,r2
   5a3ec:	01400304 	movi	r5,12
   5a3f0:	005960c0 	call	5960c <__mulsi3>
   5a3f4:	8085883a 	add	r2,r16,r2
   5a3f8:	10800204 	addi	r2,r2,8
   5a3fc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   5a400:	04000074 	movhi	r16,1
   5a404:	8402ef04 	addi	r16,r16,3004
   5a408:	e0bfff17 	ldw	r2,-4(fp)
   5a40c:	1009883a 	mov	r4,r2
   5a410:	01400304 	movi	r5,12
   5a414:	005960c0 	call	5960c <__mulsi3>
   5a418:	8085883a 	add	r2,r16,r2
   5a41c:	10000015 	stw	zero,0(r2)
  }
}
   5a420:	e037883a 	mov	sp,fp
   5a424:	dfc00217 	ldw	ra,8(sp)
   5a428:	df000117 	ldw	fp,4(sp)
   5a42c:	dc000017 	ldw	r16,0(sp)
   5a430:	dec00304 	addi	sp,sp,12
   5a434:	f800283a 	ret

0005a438 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   5a438:	defff904 	addi	sp,sp,-28
   5a43c:	df000615 	stw	fp,24(sp)
   5a440:	df000604 	addi	fp,sp,24
   5a444:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   5a448:	0005303a 	rdctl	r2,status
   5a44c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   5a450:	e0fffc17 	ldw	r3,-16(fp)
   5a454:	00bfff84 	movi	r2,-2
   5a458:	1884703a 	and	r2,r3,r2
   5a45c:	1001703a 	wrctl	status,r2
  
  return context;
   5a460:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   5a464:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   5a468:	d0a00b17 	ldw	r2,-32724(gp)
   5a46c:	10c000c4 	addi	r3,r2,3
   5a470:	00bfff04 	movi	r2,-4
   5a474:	1884703a 	and	r2,r3,r2
   5a478:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   5a47c:	d0e00b17 	ldw	r3,-32724(gp)
   5a480:	e0bfff17 	ldw	r2,-4(fp)
   5a484:	1885883a 	add	r2,r3,r2
   5a488:	00c00074 	movhi	r3,1
   5a48c:	18c00004 	addi	r3,r3,0
   5a490:	1880062e 	bgeu	r3,r2,5a4ac <sbrk+0x74>
   5a494:	e0bffa17 	ldw	r2,-24(fp)
   5a498:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   5a49c:	e0bffd17 	ldw	r2,-12(fp)
   5a4a0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   5a4a4:	00bfffc4 	movi	r2,-1
   5a4a8:	00000b06 	br	5a4d8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   5a4ac:	d0a00b17 	ldw	r2,-32724(gp)
   5a4b0:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   5a4b4:	d0e00b17 	ldw	r3,-32724(gp)
   5a4b8:	e0bfff17 	ldw	r2,-4(fp)
   5a4bc:	1885883a 	add	r2,r3,r2
   5a4c0:	d0a00b15 	stw	r2,-32724(gp)
   5a4c4:	e0bffa17 	ldw	r2,-24(fp)
   5a4c8:	e0bffe15 	stw	r2,-8(fp)
   5a4cc:	e0bffe17 	ldw	r2,-8(fp)
   5a4d0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   5a4d4:	e0bffb17 	ldw	r2,-20(fp)
} 
   5a4d8:	e037883a 	mov	sp,fp
   5a4dc:	df000017 	ldw	fp,0(sp)
   5a4e0:	dec00104 	addi	sp,sp,4
   5a4e4:	f800283a 	ret

0005a4e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   5a4e8:	defffe04 	addi	sp,sp,-8
   5a4ec:	dfc00115 	stw	ra,4(sp)
   5a4f0:	df000015 	stw	fp,0(sp)
   5a4f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   5a4f8:	00800074 	movhi	r2,1
   5a4fc:	10877104 	addi	r2,r2,7620
   5a500:	10800017 	ldw	r2,0(r2)
   5a504:	10000526 	beq	r2,zero,5a51c <alt_get_errno+0x34>
   5a508:	00800074 	movhi	r2,1
   5a50c:	10877104 	addi	r2,r2,7620
   5a510:	10800017 	ldw	r2,0(r2)
   5a514:	103ee83a 	callr	r2
   5a518:	00000206 	br	5a524 <alt_get_errno+0x3c>
   5a51c:	00800074 	movhi	r2,1
   5a520:	10878104 	addi	r2,r2,7684
}
   5a524:	e037883a 	mov	sp,fp
   5a528:	dfc00117 	ldw	ra,4(sp)
   5a52c:	df000017 	ldw	fp,0(sp)
   5a530:	dec00204 	addi	sp,sp,8
   5a534:	f800283a 	ret

0005a538 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   5a538:	defff904 	addi	sp,sp,-28
   5a53c:	dfc00615 	stw	ra,24(sp)
   5a540:	df000515 	stw	fp,20(sp)
   5a544:	df000504 	addi	fp,sp,20
   5a548:	e13ffd15 	stw	r4,-12(fp)
   5a54c:	e17ffe15 	stw	r5,-8(fp)
   5a550:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   5a554:	e0bffd17 	ldw	r2,-12(fp)
   5a558:	10000716 	blt	r2,zero,5a578 <write+0x40>
   5a55c:	e13ffd17 	ldw	r4,-12(fp)
   5a560:	01400304 	movi	r5,12
   5a564:	005960c0 	call	5960c <__mulsi3>
   5a568:	00c00074 	movhi	r3,1
   5a56c:	18c2ef04 	addi	r3,r3,3004
   5a570:	10c5883a 	add	r2,r2,r3
   5a574:	00000106 	br	5a57c <write+0x44>
   5a578:	0005883a 	mov	r2,zero
   5a57c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   5a580:	e0bffb17 	ldw	r2,-20(fp)
   5a584:	10001f26 	beq	r2,zero,5a604 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   5a588:	e0bffb17 	ldw	r2,-20(fp)
   5a58c:	10800217 	ldw	r2,8(r2)
   5a590:	108000cc 	andi	r2,r2,3
   5a594:	10001726 	beq	r2,zero,5a5f4 <write+0xbc>
   5a598:	e0bffb17 	ldw	r2,-20(fp)
   5a59c:	10800017 	ldw	r2,0(r2)
   5a5a0:	10800617 	ldw	r2,24(r2)
   5a5a4:	10001326 	beq	r2,zero,5a5f4 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   5a5a8:	e0bffb17 	ldw	r2,-20(fp)
   5a5ac:	10800017 	ldw	r2,0(r2)
   5a5b0:	10c00617 	ldw	r3,24(r2)
   5a5b4:	e0bfff17 	ldw	r2,-4(fp)
   5a5b8:	e13ffb17 	ldw	r4,-20(fp)
   5a5bc:	e17ffe17 	ldw	r5,-8(fp)
   5a5c0:	100d883a 	mov	r6,r2
   5a5c4:	183ee83a 	callr	r3
   5a5c8:	e0bffc15 	stw	r2,-16(fp)
   5a5cc:	e0bffc17 	ldw	r2,-16(fp)
   5a5d0:	1000060e 	bge	r2,zero,5a5ec <write+0xb4>
      {
        ALT_ERRNO = -rval;
   5a5d4:	005a4e80 	call	5a4e8 <alt_get_errno>
   5a5d8:	e0fffc17 	ldw	r3,-16(fp)
   5a5dc:	00c7c83a 	sub	r3,zero,r3
   5a5e0:	10c00015 	stw	r3,0(r2)
        return -1;
   5a5e4:	00bfffc4 	movi	r2,-1
   5a5e8:	00000a06 	br	5a614 <write+0xdc>
      }
      return rval;
   5a5ec:	e0bffc17 	ldw	r2,-16(fp)
   5a5f0:	00000806 	br	5a614 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
   5a5f4:	005a4e80 	call	5a4e8 <alt_get_errno>
   5a5f8:	00c00344 	movi	r3,13
   5a5fc:	10c00015 	stw	r3,0(r2)
   5a600:	00000306 	br	5a610 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   5a604:	005a4e80 	call	5a4e8 <alt_get_errno>
   5a608:	00c01444 	movi	r3,81
   5a60c:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   5a610:	00bfffc4 	movi	r2,-1
}
   5a614:	e037883a 	mov	sp,fp
   5a618:	dfc00117 	ldw	ra,4(sp)
   5a61c:	df000017 	ldw	fp,0(sp)
   5a620:	dec00204 	addi	sp,sp,8
   5a624:	f800283a 	ret

0005a628 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   5a628:	defffd04 	addi	sp,sp,-12
   5a62c:	dfc00215 	stw	ra,8(sp)
   5a630:	df000115 	stw	fp,4(sp)
   5a634:	df000104 	addi	fp,sp,4
   5a638:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   5a63c:	e13fff17 	ldw	r4,-4(fp)
   5a640:	01400074 	movhi	r5,1
   5a644:	29476e04 	addi	r5,r5,7608
   5a648:	005b4000 	call	5b400 <alt_dev_llist_insert>
}
   5a64c:	e037883a 	mov	sp,fp
   5a650:	dfc00117 	ldw	ra,4(sp)
   5a654:	df000017 	ldw	fp,0(sp)
   5a658:	dec00204 	addi	sp,sp,8
   5a65c:	f800283a 	ret

0005a660 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   5a660:	defffd04 	addi	sp,sp,-12
   5a664:	dfc00215 	stw	ra,8(sp)
   5a668:	df000115 	stw	fp,4(sp)
   5a66c:	df000104 	addi	fp,sp,4
   5a670:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU0, cpu0);
   5a674:	005bdc80 	call	5bdc8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   5a678:	00800044 	movi	r2,1
   5a67c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   5a680:	e037883a 	mov	sp,fp
   5a684:	dfc00117 	ldw	ra,4(sp)
   5a688:	df000017 	ldw	fp,0(sp)
   5a68c:	dec00204 	addi	sp,sp,8
   5a690:	f800283a 	ret

0005a694 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   5a694:	defffe04 	addi	sp,sp,-8
   5a698:	dfc00115 	stw	ra,4(sp)
   5a69c:	df000015 	stw	fp,0(sp)
   5a6a0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER0, timer0);
   5a6a4:	010001b4 	movhi	r4,6
   5a6a8:	21040004 	addi	r4,r4,4096
   5a6ac:	000b883a 	mov	r5,zero
   5a6b0:	000d883a 	mov	r6,zero
   5a6b4:	01c0fa04 	movi	r7,1000
   5a6b8:	005b1cc0 	call	5b1cc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART0, jtag_uart0);
   5a6bc:	01000074 	movhi	r4,1
   5a6c0:	21035904 	addi	r4,r4,3428
   5a6c4:	000b883a 	mov	r5,zero
   5a6c8:	01800404 	movi	r6,16
   5a6cc:	005a8580 	call	5a858 <altera_avalon_jtag_uart_init>
   5a6d0:	01000074 	movhi	r4,1
   5a6d4:	21034f04 	addi	r4,r4,3388
   5a6d8:	005a6280 	call	5a628 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysId);
   5a6dc:	0001883a 	nop
}
   5a6e0:	e037883a 	mov	sp,fp
   5a6e4:	dfc00117 	ldw	ra,4(sp)
   5a6e8:	df000017 	ldw	fp,0(sp)
   5a6ec:	dec00204 	addi	sp,sp,8
   5a6f0:	f800283a 	ret

0005a6f4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   5a6f4:	defffa04 	addi	sp,sp,-24
   5a6f8:	dfc00515 	stw	ra,20(sp)
   5a6fc:	df000415 	stw	fp,16(sp)
   5a700:	df000404 	addi	fp,sp,16
   5a704:	e13ffd15 	stw	r4,-12(fp)
   5a708:	e17ffe15 	stw	r5,-8(fp)
   5a70c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   5a710:	e0bffd17 	ldw	r2,-12(fp)
   5a714:	10800017 	ldw	r2,0(r2)
   5a718:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   5a71c:	e0bffc17 	ldw	r2,-16(fp)
   5a720:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   5a724:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   5a728:	10800217 	ldw	r2,8(r2)
   5a72c:	1809883a 	mov	r4,r3
   5a730:	e17ffe17 	ldw	r5,-8(fp)
   5a734:	e1bfff17 	ldw	r6,-4(fp)
   5a738:	100f883a 	mov	r7,r2
   5a73c:	005ad1c0 	call	5ad1c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   5a740:	e037883a 	mov	sp,fp
   5a744:	dfc00117 	ldw	ra,4(sp)
   5a748:	df000017 	ldw	fp,0(sp)
   5a74c:	dec00204 	addi	sp,sp,8
   5a750:	f800283a 	ret

0005a754 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   5a754:	defffa04 	addi	sp,sp,-24
   5a758:	dfc00515 	stw	ra,20(sp)
   5a75c:	df000415 	stw	fp,16(sp)
   5a760:	df000404 	addi	fp,sp,16
   5a764:	e13ffd15 	stw	r4,-12(fp)
   5a768:	e17ffe15 	stw	r5,-8(fp)
   5a76c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   5a770:	e0bffd17 	ldw	r2,-12(fp)
   5a774:	10800017 	ldw	r2,0(r2)
   5a778:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   5a77c:	e0bffc17 	ldw	r2,-16(fp)
   5a780:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   5a784:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   5a788:	10800217 	ldw	r2,8(r2)
   5a78c:	1809883a 	mov	r4,r3
   5a790:	e17ffe17 	ldw	r5,-8(fp)
   5a794:	e1bfff17 	ldw	r6,-4(fp)
   5a798:	100f883a 	mov	r7,r2
   5a79c:	005af340 	call	5af34 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   5a7a0:	e037883a 	mov	sp,fp
   5a7a4:	dfc00117 	ldw	ra,4(sp)
   5a7a8:	df000017 	ldw	fp,0(sp)
   5a7ac:	dec00204 	addi	sp,sp,8
   5a7b0:	f800283a 	ret

0005a7b4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   5a7b4:	defffc04 	addi	sp,sp,-16
   5a7b8:	dfc00315 	stw	ra,12(sp)
   5a7bc:	df000215 	stw	fp,8(sp)
   5a7c0:	df000204 	addi	fp,sp,8
   5a7c4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   5a7c8:	e0bfff17 	ldw	r2,-4(fp)
   5a7cc:	10800017 	ldw	r2,0(r2)
   5a7d0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   5a7d4:	e0bffe17 	ldw	r2,-8(fp)
   5a7d8:	10c00a04 	addi	r3,r2,40
   5a7dc:	e0bfff17 	ldw	r2,-4(fp)
   5a7e0:	10800217 	ldw	r2,8(r2)
   5a7e4:	1809883a 	mov	r4,r3
   5a7e8:	100b883a 	mov	r5,r2
   5a7ec:	005abc00 	call	5abc0 <altera_avalon_jtag_uart_close>
}
   5a7f0:	e037883a 	mov	sp,fp
   5a7f4:	dfc00117 	ldw	ra,4(sp)
   5a7f8:	df000017 	ldw	fp,0(sp)
   5a7fc:	dec00204 	addi	sp,sp,8
   5a800:	f800283a 	ret

0005a804 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   5a804:	defffa04 	addi	sp,sp,-24
   5a808:	dfc00515 	stw	ra,20(sp)
   5a80c:	df000415 	stw	fp,16(sp)
   5a810:	df000404 	addi	fp,sp,16
   5a814:	e13ffd15 	stw	r4,-12(fp)
   5a818:	e17ffe15 	stw	r5,-8(fp)
   5a81c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   5a820:	e0bffd17 	ldw	r2,-12(fp)
   5a824:	10800017 	ldw	r2,0(r2)
   5a828:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   5a82c:	e0bffc17 	ldw	r2,-16(fp)
   5a830:	10800a04 	addi	r2,r2,40
   5a834:	1009883a 	mov	r4,r2
   5a838:	e17ffe17 	ldw	r5,-8(fp)
   5a83c:	e1bfff17 	ldw	r6,-4(fp)
   5a840:	005ac280 	call	5ac28 <altera_avalon_jtag_uart_ioctl>
}
   5a844:	e037883a 	mov	sp,fp
   5a848:	dfc00117 	ldw	ra,4(sp)
   5a84c:	df000017 	ldw	fp,0(sp)
   5a850:	dec00204 	addi	sp,sp,8
   5a854:	f800283a 	ret

0005a858 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   5a858:	defffa04 	addi	sp,sp,-24
   5a85c:	dfc00515 	stw	ra,20(sp)
   5a860:	df000415 	stw	fp,16(sp)
   5a864:	df000404 	addi	fp,sp,16
   5a868:	e13ffd15 	stw	r4,-12(fp)
   5a86c:	e17ffe15 	stw	r5,-8(fp)
   5a870:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   5a874:	e0bffd17 	ldw	r2,-12(fp)
   5a878:	00c00044 	movi	r3,1
   5a87c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   5a880:	e0bffd17 	ldw	r2,-12(fp)
   5a884:	10800017 	ldw	r2,0(r2)
   5a888:	10800104 	addi	r2,r2,4
   5a88c:	e0fffd17 	ldw	r3,-12(fp)
   5a890:	18c00817 	ldw	r3,32(r3)
   5a894:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   5a898:	e0fffe17 	ldw	r3,-8(fp)
   5a89c:	e0bfff17 	ldw	r2,-4(fp)
   5a8a0:	d8000015 	stw	zero,0(sp)
   5a8a4:	1809883a 	mov	r4,r3
   5a8a8:	100b883a 	mov	r5,r2
   5a8ac:	018001b4 	movhi	r6,6
   5a8b0:	31aa4604 	addi	r6,r6,-22248
   5a8b4:	e1fffd17 	ldw	r7,-12(fp)
   5a8b8:	005b5740 	call	5b574 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   5a8bc:	e0bffd17 	ldw	r2,-12(fp)
   5a8c0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   5a8c4:	e0bffd17 	ldw	r2,-12(fp)
   5a8c8:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   5a8cc:	00800074 	movhi	r2,1
   5a8d0:	10878604 	addi	r2,r2,7704
   5a8d4:	10800017 	ldw	r2,0(r2)
   5a8d8:	1809883a 	mov	r4,r3
   5a8dc:	100b883a 	mov	r5,r2
   5a8e0:	018001b4 	movhi	r6,6
   5a8e4:	31aac704 	addi	r6,r6,-21732
   5a8e8:	e1fffd17 	ldw	r7,-12(fp)
   5a8ec:	005b2540 	call	5b254 <alt_alarm_start>
   5a8f0:	1000040e 	bge	r2,zero,5a904 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   5a8f4:	e0bffd17 	ldw	r2,-12(fp)
   5a8f8:	00e00034 	movhi	r3,32768
   5a8fc:	18ffffc4 	addi	r3,r3,-1
   5a900:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   5a904:	e037883a 	mov	sp,fp
   5a908:	dfc00117 	ldw	ra,4(sp)
   5a90c:	df000017 	ldw	fp,0(sp)
   5a910:	dec00204 	addi	sp,sp,8
   5a914:	f800283a 	ret

0005a918 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   5a918:	defff804 	addi	sp,sp,-32
   5a91c:	df000715 	stw	fp,28(sp)
   5a920:	df000704 	addi	fp,sp,28
   5a924:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   5a928:	e0bfff17 	ldw	r2,-4(fp)
   5a92c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   5a930:	e0bffb17 	ldw	r2,-20(fp)
   5a934:	10800017 	ldw	r2,0(r2)
   5a938:	e0bffc15 	stw	r2,-16(fp)
   5a93c:	00000106 	br	5a944 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
   5a940:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   5a944:	e0bffc17 	ldw	r2,-16(fp)
   5a948:	10800104 	addi	r2,r2,4
   5a94c:	10800037 	ldwio	r2,0(r2)
   5a950:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   5a954:	e0bffd17 	ldw	r2,-12(fp)
   5a958:	1080c00c 	andi	r2,r2,768
   5a95c:	10006a26 	beq	r2,zero,5ab08 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   5a960:	e0bffd17 	ldw	r2,-12(fp)
   5a964:	1080400c 	andi	r2,r2,256
   5a968:	10003326 	beq	r2,zero,5aa38 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   5a96c:	00800074 	movhi	r2,1
   5a970:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   5a974:	e0bffb17 	ldw	r2,-20(fp)
   5a978:	10800a17 	ldw	r2,40(r2)
   5a97c:	10800044 	addi	r2,r2,1
   5a980:	1081ffcc 	andi	r2,r2,2047
   5a984:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   5a988:	e0bffb17 	ldw	r2,-20(fp)
   5a98c:	10c00b17 	ldw	r3,44(r2)
   5a990:	e0bffe17 	ldw	r2,-8(fp)
   5a994:	18801426 	beq	r3,r2,5a9e8 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   5a998:	e0bffc17 	ldw	r2,-16(fp)
   5a99c:	10800037 	ldwio	r2,0(r2)
   5a9a0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   5a9a4:	e0bff917 	ldw	r2,-28(fp)
   5a9a8:	10a0000c 	andi	r2,r2,32768
   5a9ac:	10001026 	beq	r2,zero,5a9f0 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   5a9b0:	e0bffb17 	ldw	r2,-20(fp)
   5a9b4:	10800a17 	ldw	r2,40(r2)
   5a9b8:	e0fff917 	ldw	r3,-28(fp)
   5a9bc:	e13ffb17 	ldw	r4,-20(fp)
   5a9c0:	2085883a 	add	r2,r4,r2
   5a9c4:	10800e04 	addi	r2,r2,56
   5a9c8:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   5a9cc:	e0bffb17 	ldw	r2,-20(fp)
   5a9d0:	10800a17 	ldw	r2,40(r2)
   5a9d4:	10800044 	addi	r2,r2,1
   5a9d8:	10c1ffcc 	andi	r3,r2,2047
   5a9dc:	e0bffb17 	ldw	r2,-20(fp)
   5a9e0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   5a9e4:	003fe306 	br	5a974 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   5a9e8:	0001883a 	nop
   5a9ec:	00000106 	br	5a9f4 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   5a9f0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   5a9f4:	e0bff917 	ldw	r2,-28(fp)
   5a9f8:	10bfffec 	andhi	r2,r2,65535
   5a9fc:	10000e26 	beq	r2,zero,5aa38 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   5aa00:	e0bffb17 	ldw	r2,-20(fp)
   5aa04:	10c00817 	ldw	r3,32(r2)
   5aa08:	00bfff84 	movi	r2,-2
   5aa0c:	1886703a 	and	r3,r3,r2
   5aa10:	e0bffb17 	ldw	r2,-20(fp)
   5aa14:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   5aa18:	e0bffc17 	ldw	r2,-16(fp)
   5aa1c:	10800104 	addi	r2,r2,4
   5aa20:	e0fffb17 	ldw	r3,-20(fp)
   5aa24:	18c00817 	ldw	r3,32(r3)
   5aa28:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   5aa2c:	e0bffc17 	ldw	r2,-16(fp)
   5aa30:	10800104 	addi	r2,r2,4
   5aa34:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   5aa38:	e0bffd17 	ldw	r2,-12(fp)
   5aa3c:	1080800c 	andi	r2,r2,512
   5aa40:	103fbf26 	beq	r2,zero,5a940 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   5aa44:	e0bffd17 	ldw	r2,-12(fp)
   5aa48:	1004d43a 	srli	r2,r2,16
   5aa4c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   5aa50:	00001406 	br	5aaa4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   5aa54:	e0bffc17 	ldw	r2,-16(fp)
   5aa58:	e0fffb17 	ldw	r3,-20(fp)
   5aa5c:	18c00d17 	ldw	r3,52(r3)
   5aa60:	e13ffb17 	ldw	r4,-20(fp)
   5aa64:	20c7883a 	add	r3,r4,r3
   5aa68:	18c20e04 	addi	r3,r3,2104
   5aa6c:	18c00003 	ldbu	r3,0(r3)
   5aa70:	18c03fcc 	andi	r3,r3,255
   5aa74:	18c0201c 	xori	r3,r3,128
   5aa78:	18ffe004 	addi	r3,r3,-128
   5aa7c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   5aa80:	e0bffb17 	ldw	r2,-20(fp)
   5aa84:	10800d17 	ldw	r2,52(r2)
   5aa88:	10800044 	addi	r2,r2,1
   5aa8c:	10c1ffcc 	andi	r3,r2,2047
   5aa90:	e0bffb17 	ldw	r2,-20(fp)
   5aa94:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   5aa98:	e0bffa17 	ldw	r2,-24(fp)
   5aa9c:	10bfffc4 	addi	r2,r2,-1
   5aaa0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   5aaa4:	e0bffa17 	ldw	r2,-24(fp)
   5aaa8:	10000526 	beq	r2,zero,5aac0 <altera_avalon_jtag_uart_irq+0x1a8>
   5aaac:	e0bffb17 	ldw	r2,-20(fp)
   5aab0:	10c00d17 	ldw	r3,52(r2)
   5aab4:	e0bffb17 	ldw	r2,-20(fp)
   5aab8:	10800c17 	ldw	r2,48(r2)
   5aabc:	18bfe51e 	bne	r3,r2,5aa54 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   5aac0:	e0bffa17 	ldw	r2,-24(fp)
   5aac4:	103f9e26 	beq	r2,zero,5a940 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   5aac8:	e0bffb17 	ldw	r2,-20(fp)
   5aacc:	10c00817 	ldw	r3,32(r2)
   5aad0:	00bfff44 	movi	r2,-3
   5aad4:	1886703a 	and	r3,r3,r2
   5aad8:	e0bffb17 	ldw	r2,-20(fp)
   5aadc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   5aae0:	e0bffb17 	ldw	r2,-20(fp)
   5aae4:	10800017 	ldw	r2,0(r2)
   5aae8:	10800104 	addi	r2,r2,4
   5aaec:	e0fffb17 	ldw	r3,-20(fp)
   5aaf0:	18c00817 	ldw	r3,32(r3)
   5aaf4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   5aaf8:	e0bffc17 	ldw	r2,-16(fp)
   5aafc:	10800104 	addi	r2,r2,4
   5ab00:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   5ab04:	003f8e06 	br	5a940 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   5ab08:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   5ab0c:	e037883a 	mov	sp,fp
   5ab10:	df000017 	ldw	fp,0(sp)
   5ab14:	dec00104 	addi	sp,sp,4
   5ab18:	f800283a 	ret

0005ab1c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   5ab1c:	defffc04 	addi	sp,sp,-16
   5ab20:	df000315 	stw	fp,12(sp)
   5ab24:	df000304 	addi	fp,sp,12
   5ab28:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   5ab2c:	e0bfff17 	ldw	r2,-4(fp)
   5ab30:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   5ab34:	e0bffd17 	ldw	r2,-12(fp)
   5ab38:	10800017 	ldw	r2,0(r2)
   5ab3c:	10800104 	addi	r2,r2,4
   5ab40:	10800037 	ldwio	r2,0(r2)
   5ab44:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   5ab48:	e0bffe17 	ldw	r2,-8(fp)
   5ab4c:	1081000c 	andi	r2,r2,1024
   5ab50:	10000a26 	beq	r2,zero,5ab7c <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   5ab54:	e0bffd17 	ldw	r2,-12(fp)
   5ab58:	10800017 	ldw	r2,0(r2)
   5ab5c:	10800104 	addi	r2,r2,4
   5ab60:	e0fffd17 	ldw	r3,-12(fp)
   5ab64:	18c00817 	ldw	r3,32(r3)
   5ab68:	18c10014 	ori	r3,r3,1024
   5ab6c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   5ab70:	e0bffd17 	ldw	r2,-12(fp)
   5ab74:	10000915 	stw	zero,36(r2)
   5ab78:	00000a06 	br	5aba4 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   5ab7c:	e0bffd17 	ldw	r2,-12(fp)
   5ab80:	10800917 	ldw	r2,36(r2)
   5ab84:	00e00034 	movhi	r3,32768
   5ab88:	18ffff04 	addi	r3,r3,-4
   5ab8c:	18800536 	bltu	r3,r2,5aba4 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
   5ab90:	e0bffd17 	ldw	r2,-12(fp)
   5ab94:	10800917 	ldw	r2,36(r2)
   5ab98:	10c00044 	addi	r3,r2,1
   5ab9c:	e0bffd17 	ldw	r2,-12(fp)
   5aba0:	10c00915 	stw	r3,36(r2)
   5aba4:	00800074 	movhi	r2,1
   5aba8:	10878604 	addi	r2,r2,7704
   5abac:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   5abb0:	e037883a 	mov	sp,fp
   5abb4:	df000017 	ldw	fp,0(sp)
   5abb8:	dec00104 	addi	sp,sp,4
   5abbc:	f800283a 	ret

0005abc0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   5abc0:	defffd04 	addi	sp,sp,-12
   5abc4:	df000215 	stw	fp,8(sp)
   5abc8:	df000204 	addi	fp,sp,8
   5abcc:	e13ffe15 	stw	r4,-8(fp)
   5abd0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   5abd4:	00000506 	br	5abec <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   5abd8:	e0bfff17 	ldw	r2,-4(fp)
   5abdc:	1090000c 	andi	r2,r2,16384
   5abe0:	10000226 	beq	r2,zero,5abec <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   5abe4:	00bffd44 	movi	r2,-11
   5abe8:	00000b06 	br	5ac18 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   5abec:	e0bffe17 	ldw	r2,-8(fp)
   5abf0:	10c00d17 	ldw	r3,52(r2)
   5abf4:	e0bffe17 	ldw	r2,-8(fp)
   5abf8:	10800c17 	ldw	r2,48(r2)
   5abfc:	18800526 	beq	r3,r2,5ac14 <altera_avalon_jtag_uart_close+0x54>
   5ac00:	e0bffe17 	ldw	r2,-8(fp)
   5ac04:	10c00917 	ldw	r3,36(r2)
   5ac08:	e0bffe17 	ldw	r2,-8(fp)
   5ac0c:	10800117 	ldw	r2,4(r2)
   5ac10:	18bff136 	bltu	r3,r2,5abd8 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   5ac14:	0005883a 	mov	r2,zero
}
   5ac18:	e037883a 	mov	sp,fp
   5ac1c:	df000017 	ldw	fp,0(sp)
   5ac20:	dec00104 	addi	sp,sp,4
   5ac24:	f800283a 	ret

0005ac28 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   5ac28:	defffa04 	addi	sp,sp,-24
   5ac2c:	df000515 	stw	fp,20(sp)
   5ac30:	df000504 	addi	fp,sp,20
   5ac34:	e13ffd15 	stw	r4,-12(fp)
   5ac38:	e17ffe15 	stw	r5,-8(fp)
   5ac3c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   5ac40:	00bff9c4 	movi	r2,-25
   5ac44:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   5ac48:	e0bffe17 	ldw	r2,-8(fp)
   5ac4c:	10da8060 	cmpeqi	r3,r2,27137
   5ac50:	1800031e 	bne	r3,zero,5ac60 <altera_avalon_jtag_uart_ioctl+0x38>
   5ac54:	109a80a0 	cmpeqi	r2,r2,27138
   5ac58:	1000181e 	bne	r2,zero,5acbc <altera_avalon_jtag_uart_ioctl+0x94>
   5ac5c:	00002606 	br	5acf8 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   5ac60:	e0bffd17 	ldw	r2,-12(fp)
   5ac64:	10c00117 	ldw	r3,4(r2)
   5ac68:	00a00034 	movhi	r2,32768
   5ac6c:	10bfffc4 	addi	r2,r2,-1
   5ac70:	18802226 	beq	r3,r2,5acfc <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
   5ac74:	e0bfff17 	ldw	r2,-4(fp)
   5ac78:	10800017 	ldw	r2,0(r2)
   5ac7c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   5ac80:	e0bffc17 	ldw	r2,-16(fp)
   5ac84:	10800090 	cmplti	r2,r2,2
   5ac88:	1000061e 	bne	r2,zero,5aca4 <altera_avalon_jtag_uart_ioctl+0x7c>
   5ac8c:	e0fffc17 	ldw	r3,-16(fp)
   5ac90:	00a00034 	movhi	r2,32768
   5ac94:	10bfffc4 	addi	r2,r2,-1
   5ac98:	18800226 	beq	r3,r2,5aca4 <altera_avalon_jtag_uart_ioctl+0x7c>
   5ac9c:	e0bffc17 	ldw	r2,-16(fp)
   5aca0:	00000206 	br	5acac <altera_avalon_jtag_uart_ioctl+0x84>
   5aca4:	00a00034 	movhi	r2,32768
   5aca8:	10bfff84 	addi	r2,r2,-2
   5acac:	e0fffd17 	ldw	r3,-12(fp)
   5acb0:	18800115 	stw	r2,4(r3)
      rc = 0;
   5acb4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   5acb8:	00001006 	br	5acfc <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   5acbc:	e0bffd17 	ldw	r2,-12(fp)
   5acc0:	10c00117 	ldw	r3,4(r2)
   5acc4:	00a00034 	movhi	r2,32768
   5acc8:	10bfffc4 	addi	r2,r2,-1
   5accc:	18800d26 	beq	r3,r2,5ad04 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   5acd0:	e0bffd17 	ldw	r2,-12(fp)
   5acd4:	10c00917 	ldw	r3,36(r2)
   5acd8:	e0bffd17 	ldw	r2,-12(fp)
   5acdc:	10800117 	ldw	r2,4(r2)
   5ace0:	1885803a 	cmpltu	r2,r3,r2
   5ace4:	10c03fcc 	andi	r3,r2,255
   5ace8:	e0bfff17 	ldw	r2,-4(fp)
   5acec:	10c00015 	stw	r3,0(r2)
      rc = 0;
   5acf0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   5acf4:	00000306 	br	5ad04 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
   5acf8:	00000306 	br	5ad08 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   5acfc:	0001883a 	nop
   5ad00:	00000106 	br	5ad08 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   5ad04:	0001883a 	nop

  default:
    break;
  }

  return rc;
   5ad08:	e0bffb17 	ldw	r2,-20(fp)
}
   5ad0c:	e037883a 	mov	sp,fp
   5ad10:	df000017 	ldw	fp,0(sp)
   5ad14:	dec00104 	addi	sp,sp,4
   5ad18:	f800283a 	ret

0005ad1c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   5ad1c:	defff304 	addi	sp,sp,-52
   5ad20:	dfc00c15 	stw	ra,48(sp)
   5ad24:	df000b15 	stw	fp,44(sp)
   5ad28:	df000b04 	addi	fp,sp,44
   5ad2c:	e13ffc15 	stw	r4,-16(fp)
   5ad30:	e17ffd15 	stw	r5,-12(fp)
   5ad34:	e1bffe15 	stw	r6,-8(fp)
   5ad38:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   5ad3c:	e0bffd17 	ldw	r2,-12(fp)
   5ad40:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   5ad44:	00004706 	br	5ae64 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   5ad48:	e0bffc17 	ldw	r2,-16(fp)
   5ad4c:	10800a17 	ldw	r2,40(r2)
   5ad50:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   5ad54:	e0bffc17 	ldw	r2,-16(fp)
   5ad58:	10800b17 	ldw	r2,44(r2)
   5ad5c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   5ad60:	e0fff717 	ldw	r3,-36(fp)
   5ad64:	e0bff817 	ldw	r2,-32(fp)
   5ad68:	18800536 	bltu	r3,r2,5ad80 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   5ad6c:	e0fff717 	ldw	r3,-36(fp)
   5ad70:	e0bff817 	ldw	r2,-32(fp)
   5ad74:	1885c83a 	sub	r2,r3,r2
   5ad78:	e0bff615 	stw	r2,-40(fp)
   5ad7c:	00000406 	br	5ad90 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   5ad80:	00c20004 	movi	r3,2048
   5ad84:	e0bff817 	ldw	r2,-32(fp)
   5ad88:	1885c83a 	sub	r2,r3,r2
   5ad8c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   5ad90:	e0bff617 	ldw	r2,-40(fp)
   5ad94:	10001e26 	beq	r2,zero,5ae10 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   5ad98:	e0fffe17 	ldw	r3,-8(fp)
   5ad9c:	e0bff617 	ldw	r2,-40(fp)
   5ada0:	1880022e 	bgeu	r3,r2,5adac <altera_avalon_jtag_uart_read+0x90>
        n = space;
   5ada4:	e0bffe17 	ldw	r2,-8(fp)
   5ada8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   5adac:	e0bff817 	ldw	r2,-32(fp)
   5adb0:	10800e04 	addi	r2,r2,56
   5adb4:	e0fffc17 	ldw	r3,-16(fp)
   5adb8:	1885883a 	add	r2,r3,r2
   5adbc:	e13ff517 	ldw	r4,-44(fp)
   5adc0:	100b883a 	mov	r5,r2
   5adc4:	e1bff617 	ldw	r6,-40(fp)
   5adc8:	0055b240 	call	55b24 <memcpy>
      ptr   += n;
   5adcc:	e0fff517 	ldw	r3,-44(fp)
   5add0:	e0bff617 	ldw	r2,-40(fp)
   5add4:	1885883a 	add	r2,r3,r2
   5add8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   5addc:	e0fffe17 	ldw	r3,-8(fp)
   5ade0:	e0bff617 	ldw	r2,-40(fp)
   5ade4:	1885c83a 	sub	r2,r3,r2
   5ade8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   5adec:	e0fff817 	ldw	r3,-32(fp)
   5adf0:	e0bff617 	ldw	r2,-40(fp)
   5adf4:	1885883a 	add	r2,r3,r2
   5adf8:	10c1ffcc 	andi	r3,r2,2047
   5adfc:	e0bffc17 	ldw	r2,-16(fp)
   5ae00:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   5ae04:	e0bffe17 	ldw	r2,-8(fp)
   5ae08:	00bfcf16 	blt	zero,r2,5ad48 <altera_avalon_jtag_uart_read+0x2c>
   5ae0c:	00000106 	br	5ae14 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   5ae10:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   5ae14:	e0fff517 	ldw	r3,-44(fp)
   5ae18:	e0bffd17 	ldw	r2,-12(fp)
   5ae1c:	1880141e 	bne	r3,r2,5ae70 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   5ae20:	e0bfff17 	ldw	r2,-4(fp)
   5ae24:	1090000c 	andi	r2,r2,16384
   5ae28:	1000131e 	bne	r2,zero,5ae78 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   5ae2c:	0001883a 	nop
   5ae30:	e0bffc17 	ldw	r2,-16(fp)
   5ae34:	10c00a17 	ldw	r3,40(r2)
   5ae38:	e0bff717 	ldw	r2,-36(fp)
   5ae3c:	1880051e 	bne	r3,r2,5ae54 <altera_avalon_jtag_uart_read+0x138>
   5ae40:	e0bffc17 	ldw	r2,-16(fp)
   5ae44:	10c00917 	ldw	r3,36(r2)
   5ae48:	e0bffc17 	ldw	r2,-16(fp)
   5ae4c:	10800117 	ldw	r2,4(r2)
   5ae50:	18bff736 	bltu	r3,r2,5ae30 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   5ae54:	e0bffc17 	ldw	r2,-16(fp)
   5ae58:	10c00a17 	ldw	r3,40(r2)
   5ae5c:	e0bff717 	ldw	r2,-36(fp)
   5ae60:	18800726 	beq	r3,r2,5ae80 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   5ae64:	e0bffe17 	ldw	r2,-8(fp)
   5ae68:	00bfb716 	blt	zero,r2,5ad48 <altera_avalon_jtag_uart_read+0x2c>
   5ae6c:	00000506 	br	5ae84 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   5ae70:	0001883a 	nop
   5ae74:	00000306 	br	5ae84 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   5ae78:	0001883a 	nop
   5ae7c:	00000106 	br	5ae84 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   5ae80:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   5ae84:	e0fff517 	ldw	r3,-44(fp)
   5ae88:	e0bffd17 	ldw	r2,-12(fp)
   5ae8c:	18801726 	beq	r3,r2,5aeec <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   5ae90:	0005303a 	rdctl	r2,status
   5ae94:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   5ae98:	e0fffa17 	ldw	r3,-24(fp)
   5ae9c:	00bfff84 	movi	r2,-2
   5aea0:	1884703a 	and	r2,r3,r2
   5aea4:	1001703a 	wrctl	status,r2
  
  return context;
   5aea8:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   5aeac:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   5aeb0:	e0bffc17 	ldw	r2,-16(fp)
   5aeb4:	10800817 	ldw	r2,32(r2)
   5aeb8:	10c00054 	ori	r3,r2,1
   5aebc:	e0bffc17 	ldw	r2,-16(fp)
   5aec0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   5aec4:	e0bffc17 	ldw	r2,-16(fp)
   5aec8:	10800017 	ldw	r2,0(r2)
   5aecc:	10800104 	addi	r2,r2,4
   5aed0:	e0fffc17 	ldw	r3,-16(fp)
   5aed4:	18c00817 	ldw	r3,32(r3)
   5aed8:	10c00035 	stwio	r3,0(r2)
   5aedc:	e0bff917 	ldw	r2,-28(fp)
   5aee0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   5aee4:	e0bffb17 	ldw	r2,-20(fp)
   5aee8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   5aeec:	e0fff517 	ldw	r3,-44(fp)
   5aef0:	e0bffd17 	ldw	r2,-12(fp)
   5aef4:	18800426 	beq	r3,r2,5af08 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
   5aef8:	e0fff517 	ldw	r3,-44(fp)
   5aefc:	e0bffd17 	ldw	r2,-12(fp)
   5af00:	1885c83a 	sub	r2,r3,r2
   5af04:	00000606 	br	5af20 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
   5af08:	e0bfff17 	ldw	r2,-4(fp)
   5af0c:	1090000c 	andi	r2,r2,16384
   5af10:	10000226 	beq	r2,zero,5af1c <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
   5af14:	00bffd44 	movi	r2,-11
   5af18:	00000106 	br	5af20 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
   5af1c:	00bffec4 	movi	r2,-5
}
   5af20:	e037883a 	mov	sp,fp
   5af24:	dfc00117 	ldw	ra,4(sp)
   5af28:	df000017 	ldw	fp,0(sp)
   5af2c:	dec00204 	addi	sp,sp,8
   5af30:	f800283a 	ret

0005af34 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   5af34:	defff304 	addi	sp,sp,-52
   5af38:	dfc00c15 	stw	ra,48(sp)
   5af3c:	df000b15 	stw	fp,44(sp)
   5af40:	df000b04 	addi	fp,sp,44
   5af44:	e13ffc15 	stw	r4,-16(fp)
   5af48:	e17ffd15 	stw	r5,-12(fp)
   5af4c:	e1bffe15 	stw	r6,-8(fp)
   5af50:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   5af54:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   5af58:	e0bffd17 	ldw	r2,-12(fp)
   5af5c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   5af60:	00003706 	br	5b040 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   5af64:	e0bffc17 	ldw	r2,-16(fp)
   5af68:	10800c17 	ldw	r2,48(r2)
   5af6c:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   5af70:	e0bffc17 	ldw	r2,-16(fp)
   5af74:	10800d17 	ldw	r2,52(r2)
   5af78:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   5af7c:	e0fff817 	ldw	r3,-32(fp)
   5af80:	e0bff517 	ldw	r2,-44(fp)
   5af84:	1880062e 	bgeu	r3,r2,5afa0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   5af88:	e0fff517 	ldw	r3,-44(fp)
   5af8c:	e0bff817 	ldw	r2,-32(fp)
   5af90:	1885c83a 	sub	r2,r3,r2
   5af94:	10bfffc4 	addi	r2,r2,-1
   5af98:	e0bff615 	stw	r2,-40(fp)
   5af9c:	00000b06 	br	5afcc <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   5afa0:	e0bff517 	ldw	r2,-44(fp)
   5afa4:	10000526 	beq	r2,zero,5afbc <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   5afa8:	00c20004 	movi	r3,2048
   5afac:	e0bff817 	ldw	r2,-32(fp)
   5afb0:	1885c83a 	sub	r2,r3,r2
   5afb4:	e0bff615 	stw	r2,-40(fp)
   5afb8:	00000406 	br	5afcc <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   5afbc:	00c1ffc4 	movi	r3,2047
   5afc0:	e0bff817 	ldw	r2,-32(fp)
   5afc4:	1885c83a 	sub	r2,r3,r2
   5afc8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   5afcc:	e0bff617 	ldw	r2,-40(fp)
   5afd0:	10001e26 	beq	r2,zero,5b04c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   5afd4:	e0fffe17 	ldw	r3,-8(fp)
   5afd8:	e0bff617 	ldw	r2,-40(fp)
   5afdc:	1880022e 	bgeu	r3,r2,5afe8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   5afe0:	e0bffe17 	ldw	r2,-8(fp)
   5afe4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   5afe8:	e0bff817 	ldw	r2,-32(fp)
   5afec:	10820e04 	addi	r2,r2,2104
   5aff0:	e0fffc17 	ldw	r3,-16(fp)
   5aff4:	1885883a 	add	r2,r3,r2
   5aff8:	1009883a 	mov	r4,r2
   5affc:	e17ffd17 	ldw	r5,-12(fp)
   5b000:	e1bff617 	ldw	r6,-40(fp)
   5b004:	0055b240 	call	55b24 <memcpy>
      ptr   += n;
   5b008:	e0fffd17 	ldw	r3,-12(fp)
   5b00c:	e0bff617 	ldw	r2,-40(fp)
   5b010:	1885883a 	add	r2,r3,r2
   5b014:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   5b018:	e0fffe17 	ldw	r3,-8(fp)
   5b01c:	e0bff617 	ldw	r2,-40(fp)
   5b020:	1885c83a 	sub	r2,r3,r2
   5b024:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   5b028:	e0fff817 	ldw	r3,-32(fp)
   5b02c:	e0bff617 	ldw	r2,-40(fp)
   5b030:	1885883a 	add	r2,r3,r2
   5b034:	10c1ffcc 	andi	r3,r2,2047
   5b038:	e0bffc17 	ldw	r2,-16(fp)
   5b03c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   5b040:	e0bffe17 	ldw	r2,-8(fp)
   5b044:	00bfc716 	blt	zero,r2,5af64 <altera_avalon_jtag_uart_write+0x30>
   5b048:	00000106 	br	5b050 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   5b04c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   5b050:	0005303a 	rdctl	r2,status
   5b054:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   5b058:	e0fffa17 	ldw	r3,-24(fp)
   5b05c:	00bfff84 	movi	r2,-2
   5b060:	1884703a 	and	r2,r3,r2
   5b064:	1001703a 	wrctl	status,r2
  
  return context;
   5b068:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   5b06c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   5b070:	e0bffc17 	ldw	r2,-16(fp)
   5b074:	10800817 	ldw	r2,32(r2)
   5b078:	10c00094 	ori	r3,r2,2
   5b07c:	e0bffc17 	ldw	r2,-16(fp)
   5b080:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   5b084:	e0bffc17 	ldw	r2,-16(fp)
   5b088:	10800017 	ldw	r2,0(r2)
   5b08c:	10800104 	addi	r2,r2,4
   5b090:	e0fffc17 	ldw	r3,-16(fp)
   5b094:	18c00817 	ldw	r3,32(r3)
   5b098:	10c00035 	stwio	r3,0(r2)
   5b09c:	e0bff917 	ldw	r2,-28(fp)
   5b0a0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   5b0a4:	e0bffb17 	ldw	r2,-20(fp)
   5b0a8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   5b0ac:	e0bffe17 	ldw	r2,-8(fp)
   5b0b0:	0080110e 	bge	zero,r2,5b0f8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   5b0b4:	e0bfff17 	ldw	r2,-4(fp)
   5b0b8:	1090000c 	andi	r2,r2,16384
   5b0bc:	1000111e 	bne	r2,zero,5b104 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   5b0c0:	0001883a 	nop
   5b0c4:	e0bffc17 	ldw	r2,-16(fp)
   5b0c8:	10c00d17 	ldw	r3,52(r2)
   5b0cc:	e0bff517 	ldw	r2,-44(fp)
   5b0d0:	1880051e 	bne	r3,r2,5b0e8 <altera_avalon_jtag_uart_write+0x1b4>
   5b0d4:	e0bffc17 	ldw	r2,-16(fp)
   5b0d8:	10c00917 	ldw	r3,36(r2)
   5b0dc:	e0bffc17 	ldw	r2,-16(fp)
   5b0e0:	10800117 	ldw	r2,4(r2)
   5b0e4:	18bff736 	bltu	r3,r2,5b0c4 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   5b0e8:	e0bffc17 	ldw	r2,-16(fp)
   5b0ec:	10c00d17 	ldw	r3,52(r2)
   5b0f0:	e0bff517 	ldw	r2,-44(fp)
   5b0f4:	18800526 	beq	r3,r2,5b10c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   5b0f8:	e0bffe17 	ldw	r2,-8(fp)
   5b0fc:	00bfd016 	blt	zero,r2,5b040 <altera_avalon_jtag_uart_write+0x10c>
   5b100:	00000306 	br	5b110 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   5b104:	0001883a 	nop
   5b108:	00000106 	br	5b110 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
   5b10c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   5b110:	e0fffd17 	ldw	r3,-12(fp)
   5b114:	e0bff717 	ldw	r2,-36(fp)
   5b118:	18800426 	beq	r3,r2,5b12c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   5b11c:	e0fffd17 	ldw	r3,-12(fp)
   5b120:	e0bff717 	ldw	r2,-36(fp)
   5b124:	1885c83a 	sub	r2,r3,r2
   5b128:	00000606 	br	5b144 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   5b12c:	e0bfff17 	ldw	r2,-4(fp)
   5b130:	1090000c 	andi	r2,r2,16384
   5b134:	10000226 	beq	r2,zero,5b140 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   5b138:	00bffd44 	movi	r2,-11
   5b13c:	00000106 	br	5b144 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   5b140:	00bffec4 	movi	r2,-5
}
   5b144:	e037883a 	mov	sp,fp
   5b148:	dfc00117 	ldw	ra,4(sp)
   5b14c:	df000017 	ldw	fp,0(sp)
   5b150:	dec00204 	addi	sp,sp,8
   5b154:	f800283a 	ret

0005b158 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   5b158:	defffa04 	addi	sp,sp,-24
   5b15c:	dfc00515 	stw	ra,20(sp)
   5b160:	df000415 	stw	fp,16(sp)
   5b164:	df000404 	addi	fp,sp,16
   5b168:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   5b16c:	0007883a 	mov	r3,zero
   5b170:	e0bfff17 	ldw	r2,-4(fp)
   5b174:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   5b178:	e0bfff17 	ldw	r2,-4(fp)
   5b17c:	10800104 	addi	r2,r2,4
   5b180:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   5b184:	0005303a 	rdctl	r2,status
   5b188:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   5b18c:	e0fffd17 	ldw	r3,-12(fp)
   5b190:	00bfff84 	movi	r2,-2
   5b194:	1884703a 	and	r2,r3,r2
   5b198:	1001703a 	wrctl	status,r2
  
  return context;
   5b19c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   5b1a0:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   5b1a4:	005bcc40 	call	5bcc4 <alt_tick>
   5b1a8:	e0bffc17 	ldw	r2,-16(fp)
   5b1ac:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   5b1b0:	e0bffe17 	ldw	r2,-8(fp)
   5b1b4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   5b1b8:	e037883a 	mov	sp,fp
   5b1bc:	dfc00117 	ldw	ra,4(sp)
   5b1c0:	df000017 	ldw	fp,0(sp)
   5b1c4:	dec00204 	addi	sp,sp,8
   5b1c8:	f800283a 	ret

0005b1cc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   5b1cc:	defff804 	addi	sp,sp,-32
   5b1d0:	dfc00715 	stw	ra,28(sp)
   5b1d4:	df000615 	stw	fp,24(sp)
   5b1d8:	df000604 	addi	fp,sp,24
   5b1dc:	e13ffc15 	stw	r4,-16(fp)
   5b1e0:	e17ffd15 	stw	r5,-12(fp)
   5b1e4:	e1bffe15 	stw	r6,-8(fp)
   5b1e8:	e1ffff15 	stw	r7,-4(fp)
   5b1ec:	e0bfff17 	ldw	r2,-4(fp)
   5b1f0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   5b1f4:	00800074 	movhi	r2,1
   5b1f8:	10878604 	addi	r2,r2,7704
   5b1fc:	10800017 	ldw	r2,0(r2)
   5b200:	1000041e 	bne	r2,zero,5b214 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   5b204:	00800074 	movhi	r2,1
   5b208:	10878604 	addi	r2,r2,7704
   5b20c:	e0fffb17 	ldw	r3,-20(fp)
   5b210:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   5b214:	e0bffc17 	ldw	r2,-16(fp)
   5b218:	10800104 	addi	r2,r2,4
   5b21c:	00c001c4 	movi	r3,7
   5b220:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   5b224:	d8000015 	stw	zero,0(sp)
   5b228:	e13ffd17 	ldw	r4,-12(fp)
   5b22c:	e17ffe17 	ldw	r5,-8(fp)
   5b230:	018001b4 	movhi	r6,6
   5b234:	31ac5604 	addi	r6,r6,-20136
   5b238:	e1fffc17 	ldw	r7,-16(fp)
   5b23c:	005b5740 	call	5b574 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   5b240:	e037883a 	mov	sp,fp
   5b244:	dfc00117 	ldw	ra,4(sp)
   5b248:	df000017 	ldw	fp,0(sp)
   5b24c:	dec00204 	addi	sp,sp,8
   5b250:	f800283a 	ret

0005b254 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   5b254:	defff504 	addi	sp,sp,-44
   5b258:	df000a15 	stw	fp,40(sp)
   5b25c:	df000a04 	addi	fp,sp,40
   5b260:	e13ffc15 	stw	r4,-16(fp)
   5b264:	e17ffd15 	stw	r5,-12(fp)
   5b268:	e1bffe15 	stw	r6,-8(fp)
   5b26c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   5b270:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   5b274:	00800074 	movhi	r2,1
   5b278:	10878604 	addi	r2,r2,7704
   5b27c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   5b280:	10003f26 	beq	r2,zero,5b380 <alt_alarm_start+0x12c>
  {
    if (alarm)
   5b284:	e0bffc17 	ldw	r2,-16(fp)
   5b288:	10003b26 	beq	r2,zero,5b378 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   5b28c:	e0bffc17 	ldw	r2,-16(fp)
   5b290:	e0fffe17 	ldw	r3,-8(fp)
   5b294:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   5b298:	e0bffc17 	ldw	r2,-16(fp)
   5b29c:	e0ffff17 	ldw	r3,-4(fp)
   5b2a0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   5b2a4:	0005303a 	rdctl	r2,status
   5b2a8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   5b2ac:	e0fff817 	ldw	r3,-32(fp)
   5b2b0:	00bfff84 	movi	r2,-2
   5b2b4:	1884703a 	and	r2,r3,r2
   5b2b8:	1001703a 	wrctl	status,r2
  
  return context;
   5b2bc:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   5b2c0:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   5b2c4:	00800074 	movhi	r2,1
   5b2c8:	10878704 	addi	r2,r2,7708
   5b2cc:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   5b2d0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   5b2d4:	e0fffd17 	ldw	r3,-12(fp)
   5b2d8:	e0bff617 	ldw	r2,-40(fp)
   5b2dc:	1885883a 	add	r2,r3,r2
   5b2e0:	10c00044 	addi	r3,r2,1
   5b2e4:	e0bffc17 	ldw	r2,-16(fp)
   5b2e8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   5b2ec:	e0bffc17 	ldw	r2,-16(fp)
   5b2f0:	10c00217 	ldw	r3,8(r2)
   5b2f4:	e0bff617 	ldw	r2,-40(fp)
   5b2f8:	1880042e 	bgeu	r3,r2,5b30c <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   5b2fc:	e0bffc17 	ldw	r2,-16(fp)
   5b300:	00c00044 	movi	r3,1
   5b304:	10c00405 	stb	r3,16(r2)
   5b308:	00000206 	br	5b314 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   5b30c:	e0bffc17 	ldw	r2,-16(fp)
   5b310:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   5b314:	e0bffc17 	ldw	r2,-16(fp)
   5b318:	00c00074 	movhi	r3,1
   5b31c:	18c77404 	addi	r3,r3,7632
   5b320:	e0fff915 	stw	r3,-28(fp)
   5b324:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   5b328:	e0bffa17 	ldw	r2,-24(fp)
   5b32c:	e0fff917 	ldw	r3,-28(fp)
   5b330:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   5b334:	e0bff917 	ldw	r2,-28(fp)
   5b338:	10c00017 	ldw	r3,0(r2)
   5b33c:	e0bffa17 	ldw	r2,-24(fp)
   5b340:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   5b344:	e0bff917 	ldw	r2,-28(fp)
   5b348:	10800017 	ldw	r2,0(r2)
   5b34c:	e0fffa17 	ldw	r3,-24(fp)
   5b350:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   5b354:	e0bff917 	ldw	r2,-28(fp)
   5b358:	e0fffa17 	ldw	r3,-24(fp)
   5b35c:	10c00015 	stw	r3,0(r2)
   5b360:	e0bff717 	ldw	r2,-36(fp)
   5b364:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   5b368:	e0bffb17 	ldw	r2,-20(fp)
   5b36c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   5b370:	0005883a 	mov	r2,zero
   5b374:	00000306 	br	5b384 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   5b378:	00bffa84 	movi	r2,-22
   5b37c:	00000106 	br	5b384 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   5b380:	00bfde84 	movi	r2,-134
  }
}
   5b384:	e037883a 	mov	sp,fp
   5b388:	df000017 	ldw	fp,0(sp)
   5b38c:	dec00104 	addi	sp,sp,4
   5b390:	f800283a 	ret

0005b394 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   5b394:	deffff04 	addi	sp,sp,-4
   5b398:	df000015 	stw	fp,0(sp)
   5b39c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   5b3a0:	e037883a 	mov	sp,fp
   5b3a4:	df000017 	ldw	fp,0(sp)
   5b3a8:	dec00104 	addi	sp,sp,4
   5b3ac:	f800283a 	ret

0005b3b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   5b3b0:	defffe04 	addi	sp,sp,-8
   5b3b4:	dfc00115 	stw	ra,4(sp)
   5b3b8:	df000015 	stw	fp,0(sp)
   5b3bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   5b3c0:	00800074 	movhi	r2,1
   5b3c4:	10877104 	addi	r2,r2,7620
   5b3c8:	10800017 	ldw	r2,0(r2)
   5b3cc:	10000526 	beq	r2,zero,5b3e4 <alt_get_errno+0x34>
   5b3d0:	00800074 	movhi	r2,1
   5b3d4:	10877104 	addi	r2,r2,7620
   5b3d8:	10800017 	ldw	r2,0(r2)
   5b3dc:	103ee83a 	callr	r2
   5b3e0:	00000206 	br	5b3ec <alt_get_errno+0x3c>
   5b3e4:	00800074 	movhi	r2,1
   5b3e8:	10878104 	addi	r2,r2,7684
}
   5b3ec:	e037883a 	mov	sp,fp
   5b3f0:	dfc00117 	ldw	ra,4(sp)
   5b3f4:	df000017 	ldw	fp,0(sp)
   5b3f8:	dec00204 	addi	sp,sp,8
   5b3fc:	f800283a 	ret

0005b400 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   5b400:	defffa04 	addi	sp,sp,-24
   5b404:	dfc00515 	stw	ra,20(sp)
   5b408:	df000415 	stw	fp,16(sp)
   5b40c:	df000404 	addi	fp,sp,16
   5b410:	e13ffe15 	stw	r4,-8(fp)
   5b414:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   5b418:	e0bffe17 	ldw	r2,-8(fp)
   5b41c:	10000326 	beq	r2,zero,5b42c <alt_dev_llist_insert+0x2c>
   5b420:	e0bffe17 	ldw	r2,-8(fp)
   5b424:	10800217 	ldw	r2,8(r2)
   5b428:	1000051e 	bne	r2,zero,5b440 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   5b42c:	005b3b00 	call	5b3b0 <alt_get_errno>
   5b430:	00c00584 	movi	r3,22
   5b434:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   5b438:	00bffa84 	movi	r2,-22
   5b43c:	00001306 	br	5b48c <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   5b440:	e0bffe17 	ldw	r2,-8(fp)
   5b444:	e0ffff17 	ldw	r3,-4(fp)
   5b448:	e0fffc15 	stw	r3,-16(fp)
   5b44c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   5b450:	e0bffd17 	ldw	r2,-12(fp)
   5b454:	e0fffc17 	ldw	r3,-16(fp)
   5b458:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   5b45c:	e0bffc17 	ldw	r2,-16(fp)
   5b460:	10c00017 	ldw	r3,0(r2)
   5b464:	e0bffd17 	ldw	r2,-12(fp)
   5b468:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   5b46c:	e0bffc17 	ldw	r2,-16(fp)
   5b470:	10800017 	ldw	r2,0(r2)
   5b474:	e0fffd17 	ldw	r3,-12(fp)
   5b478:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   5b47c:	e0bffc17 	ldw	r2,-16(fp)
   5b480:	e0fffd17 	ldw	r3,-12(fp)
   5b484:	10c00015 	stw	r3,0(r2)

  return 0;  
   5b488:	0005883a 	mov	r2,zero
}
   5b48c:	e037883a 	mov	sp,fp
   5b490:	dfc00117 	ldw	ra,4(sp)
   5b494:	df000017 	ldw	fp,0(sp)
   5b498:	dec00204 	addi	sp,sp,8
   5b49c:	f800283a 	ret

0005b4a0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   5b4a0:	defffd04 	addi	sp,sp,-12
   5b4a4:	dfc00215 	stw	ra,8(sp)
   5b4a8:	df000115 	stw	fp,4(sp)
   5b4ac:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   5b4b0:	008001b4 	movhi	r2,6
   5b4b4:	10b10c04 	addi	r2,r2,-15312
   5b4b8:	e0bfff15 	stw	r2,-4(fp)
   5b4bc:	00000606 	br	5b4d8 <_do_ctors+0x38>
        (*ctor) (); 
   5b4c0:	e0bfff17 	ldw	r2,-4(fp)
   5b4c4:	10800017 	ldw	r2,0(r2)
   5b4c8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   5b4cc:	e0bfff17 	ldw	r2,-4(fp)
   5b4d0:	10bfff04 	addi	r2,r2,-4
   5b4d4:	e0bfff15 	stw	r2,-4(fp)
   5b4d8:	e0ffff17 	ldw	r3,-4(fp)
   5b4dc:	008001b4 	movhi	r2,6
   5b4e0:	10b10d04 	addi	r2,r2,-15308
   5b4e4:	18bff62e 	bgeu	r3,r2,5b4c0 <_do_ctors+0x20>
        (*ctor) (); 
}
   5b4e8:	e037883a 	mov	sp,fp
   5b4ec:	dfc00117 	ldw	ra,4(sp)
   5b4f0:	df000017 	ldw	fp,0(sp)
   5b4f4:	dec00204 	addi	sp,sp,8
   5b4f8:	f800283a 	ret

0005b4fc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   5b4fc:	defffd04 	addi	sp,sp,-12
   5b500:	dfc00215 	stw	ra,8(sp)
   5b504:	df000115 	stw	fp,4(sp)
   5b508:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   5b50c:	008001b4 	movhi	r2,6
   5b510:	10b10c04 	addi	r2,r2,-15312
   5b514:	e0bfff15 	stw	r2,-4(fp)
   5b518:	00000606 	br	5b534 <_do_dtors+0x38>
        (*dtor) (); 
   5b51c:	e0bfff17 	ldw	r2,-4(fp)
   5b520:	10800017 	ldw	r2,0(r2)
   5b524:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   5b528:	e0bfff17 	ldw	r2,-4(fp)
   5b52c:	10bfff04 	addi	r2,r2,-4
   5b530:	e0bfff15 	stw	r2,-4(fp)
   5b534:	e0ffff17 	ldw	r3,-4(fp)
   5b538:	008001b4 	movhi	r2,6
   5b53c:	10b10d04 	addi	r2,r2,-15308
   5b540:	18bff62e 	bgeu	r3,r2,5b51c <_do_dtors+0x20>
        (*dtor) (); 
}
   5b544:	e037883a 	mov	sp,fp
   5b548:	dfc00117 	ldw	ra,4(sp)
   5b54c:	df000017 	ldw	fp,0(sp)
   5b550:	dec00204 	addi	sp,sp,8
   5b554:	f800283a 	ret

0005b558 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   5b558:	deffff04 	addi	sp,sp,-4
   5b55c:	df000015 	stw	fp,0(sp)
   5b560:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   5b564:	e037883a 	mov	sp,fp
   5b568:	df000017 	ldw	fp,0(sp)
   5b56c:	dec00104 	addi	sp,sp,4
   5b570:	f800283a 	ret

0005b574 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   5b574:	defff904 	addi	sp,sp,-28
   5b578:	dfc00615 	stw	ra,24(sp)
   5b57c:	df000515 	stw	fp,20(sp)
   5b580:	df000504 	addi	fp,sp,20
   5b584:	e13ffc15 	stw	r4,-16(fp)
   5b588:	e17ffd15 	stw	r5,-12(fp)
   5b58c:	e1bffe15 	stw	r6,-8(fp)
   5b590:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   5b594:	e0800217 	ldw	r2,8(fp)
   5b598:	d8800015 	stw	r2,0(sp)
   5b59c:	e13ffc17 	ldw	r4,-16(fp)
   5b5a0:	e17ffd17 	ldw	r5,-12(fp)
   5b5a4:	e1bffe17 	ldw	r6,-8(fp)
   5b5a8:	e1ffff17 	ldw	r7,-4(fp)
   5b5ac:	005b74c0 	call	5b74c <alt_iic_isr_register>
}  
   5b5b0:	e037883a 	mov	sp,fp
   5b5b4:	dfc00117 	ldw	ra,4(sp)
   5b5b8:	df000017 	ldw	fp,0(sp)
   5b5bc:	dec00204 	addi	sp,sp,8
   5b5c0:	f800283a 	ret

0005b5c4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   5b5c4:	defff904 	addi	sp,sp,-28
   5b5c8:	df000615 	stw	fp,24(sp)
   5b5cc:	df000604 	addi	fp,sp,24
   5b5d0:	e13ffe15 	stw	r4,-8(fp)
   5b5d4:	e17fff15 	stw	r5,-4(fp)
   5b5d8:	e0bfff17 	ldw	r2,-4(fp)
   5b5dc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   5b5e0:	0005303a 	rdctl	r2,status
   5b5e4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   5b5e8:	e0fffb17 	ldw	r3,-20(fp)
   5b5ec:	00bfff84 	movi	r2,-2
   5b5f0:	1884703a 	and	r2,r3,r2
   5b5f4:	1001703a 	wrctl	status,r2
  
  return context;
   5b5f8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   5b5fc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   5b600:	e0bffa17 	ldw	r2,-24(fp)
   5b604:	00c00044 	movi	r3,1
   5b608:	1884983a 	sll	r2,r3,r2
   5b60c:	1007883a 	mov	r3,r2
   5b610:	00800074 	movhi	r2,1
   5b614:	10878504 	addi	r2,r2,7700
   5b618:	10800017 	ldw	r2,0(r2)
   5b61c:	1886b03a 	or	r3,r3,r2
   5b620:	00800074 	movhi	r2,1
   5b624:	10878504 	addi	r2,r2,7700
   5b628:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   5b62c:	00800074 	movhi	r2,1
   5b630:	10878504 	addi	r2,r2,7700
   5b634:	10800017 	ldw	r2,0(r2)
   5b638:	100170fa 	wrctl	ienable,r2
   5b63c:	e0bffc17 	ldw	r2,-16(fp)
   5b640:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   5b644:	e0bffd17 	ldw	r2,-12(fp)
   5b648:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   5b64c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   5b650:	e037883a 	mov	sp,fp
   5b654:	df000017 	ldw	fp,0(sp)
   5b658:	dec00104 	addi	sp,sp,4
   5b65c:	f800283a 	ret

0005b660 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   5b660:	defff904 	addi	sp,sp,-28
   5b664:	df000615 	stw	fp,24(sp)
   5b668:	df000604 	addi	fp,sp,24
   5b66c:	e13ffe15 	stw	r4,-8(fp)
   5b670:	e17fff15 	stw	r5,-4(fp)
   5b674:	e0bfff17 	ldw	r2,-4(fp)
   5b678:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   5b67c:	0005303a 	rdctl	r2,status
   5b680:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   5b684:	e0fffb17 	ldw	r3,-20(fp)
   5b688:	00bfff84 	movi	r2,-2
   5b68c:	1884703a 	and	r2,r3,r2
   5b690:	1001703a 	wrctl	status,r2
  
  return context;
   5b694:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   5b698:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   5b69c:	e0bffa17 	ldw	r2,-24(fp)
   5b6a0:	00c00044 	movi	r3,1
   5b6a4:	1884983a 	sll	r2,r3,r2
   5b6a8:	0084303a 	nor	r2,zero,r2
   5b6ac:	1007883a 	mov	r3,r2
   5b6b0:	00800074 	movhi	r2,1
   5b6b4:	10878504 	addi	r2,r2,7700
   5b6b8:	10800017 	ldw	r2,0(r2)
   5b6bc:	1886703a 	and	r3,r3,r2
   5b6c0:	00800074 	movhi	r2,1
   5b6c4:	10878504 	addi	r2,r2,7700
   5b6c8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   5b6cc:	00800074 	movhi	r2,1
   5b6d0:	10878504 	addi	r2,r2,7700
   5b6d4:	10800017 	ldw	r2,0(r2)
   5b6d8:	100170fa 	wrctl	ienable,r2
   5b6dc:	e0bffc17 	ldw	r2,-16(fp)
   5b6e0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   5b6e4:	e0bffd17 	ldw	r2,-12(fp)
   5b6e8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   5b6ec:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   5b6f0:	e037883a 	mov	sp,fp
   5b6f4:	df000017 	ldw	fp,0(sp)
   5b6f8:	dec00104 	addi	sp,sp,4
   5b6fc:	f800283a 	ret

0005b700 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   5b700:	defffc04 	addi	sp,sp,-16
   5b704:	df000315 	stw	fp,12(sp)
   5b708:	df000304 	addi	fp,sp,12
   5b70c:	e13ffe15 	stw	r4,-8(fp)
   5b710:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   5b714:	000530fa 	rdctl	r2,ienable
   5b718:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   5b71c:	e0bfff17 	ldw	r2,-4(fp)
   5b720:	00c00044 	movi	r3,1
   5b724:	1884983a 	sll	r2,r3,r2
   5b728:	1007883a 	mov	r3,r2
   5b72c:	e0bffd17 	ldw	r2,-12(fp)
   5b730:	1884703a 	and	r2,r3,r2
   5b734:	1004c03a 	cmpne	r2,r2,zero
   5b738:	10803fcc 	andi	r2,r2,255
}
   5b73c:	e037883a 	mov	sp,fp
   5b740:	df000017 	ldw	fp,0(sp)
   5b744:	dec00104 	addi	sp,sp,4
   5b748:	f800283a 	ret

0005b74c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   5b74c:	defff504 	addi	sp,sp,-44
   5b750:	dfc00a15 	stw	ra,40(sp)
   5b754:	df000915 	stw	fp,36(sp)
   5b758:	df000904 	addi	fp,sp,36
   5b75c:	e13ffc15 	stw	r4,-16(fp)
   5b760:	e17ffd15 	stw	r5,-12(fp)
   5b764:	e1bffe15 	stw	r6,-8(fp)
   5b768:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   5b76c:	00bffa84 	movi	r2,-22
   5b770:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   5b774:	e0bffd17 	ldw	r2,-12(fp)
   5b778:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   5b77c:	e0bff817 	ldw	r2,-32(fp)
   5b780:	10800808 	cmpgei	r2,r2,32
   5b784:	1000271e 	bne	r2,zero,5b824 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   5b788:	0005303a 	rdctl	r2,status
   5b78c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   5b790:	e0fffa17 	ldw	r3,-24(fp)
   5b794:	00bfff84 	movi	r2,-2
   5b798:	1884703a 	and	r2,r3,r2
   5b79c:	1001703a 	wrctl	status,r2
  
  return context;
   5b7a0:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   5b7a4:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   5b7a8:	00c00074 	movhi	r3,1
   5b7ac:	18c79204 	addi	r3,r3,7752
   5b7b0:	e0bff817 	ldw	r2,-32(fp)
   5b7b4:	100490fa 	slli	r2,r2,3
   5b7b8:	1885883a 	add	r2,r3,r2
   5b7bc:	e0fffe17 	ldw	r3,-8(fp)
   5b7c0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   5b7c4:	00c00074 	movhi	r3,1
   5b7c8:	18c79204 	addi	r3,r3,7752
   5b7cc:	e0bff817 	ldw	r2,-32(fp)
   5b7d0:	100490fa 	slli	r2,r2,3
   5b7d4:	1885883a 	add	r2,r3,r2
   5b7d8:	10800104 	addi	r2,r2,4
   5b7dc:	e0ffff17 	ldw	r3,-4(fp)
   5b7e0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   5b7e4:	e0bffe17 	ldw	r2,-8(fp)
   5b7e8:	10000526 	beq	r2,zero,5b800 <alt_iic_isr_register+0xb4>
   5b7ec:	e0bff817 	ldw	r2,-32(fp)
   5b7f0:	e13ffc17 	ldw	r4,-16(fp)
   5b7f4:	100b883a 	mov	r5,r2
   5b7f8:	005b5c40 	call	5b5c4 <alt_ic_irq_enable>
   5b7fc:	00000406 	br	5b810 <alt_iic_isr_register+0xc4>
   5b800:	e0bff817 	ldw	r2,-32(fp)
   5b804:	e13ffc17 	ldw	r4,-16(fp)
   5b808:	100b883a 	mov	r5,r2
   5b80c:	005b6600 	call	5b660 <alt_ic_irq_disable>
   5b810:	e0bff715 	stw	r2,-36(fp)
   5b814:	e0bff917 	ldw	r2,-28(fp)
   5b818:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   5b81c:	e0bffb17 	ldw	r2,-20(fp)
   5b820:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   5b824:	e0bff717 	ldw	r2,-36(fp)
}
   5b828:	e037883a 	mov	sp,fp
   5b82c:	dfc00117 	ldw	ra,4(sp)
   5b830:	df000017 	ldw	fp,0(sp)
   5b834:	dec00204 	addi	sp,sp,8
   5b838:	f800283a 	ret

0005b83c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   5b83c:	defff804 	addi	sp,sp,-32
   5b840:	dfc00715 	stw	ra,28(sp)
   5b844:	df000615 	stw	fp,24(sp)
   5b848:	dc000515 	stw	r16,20(sp)
   5b84c:	df000504 	addi	fp,sp,20
   5b850:	e13ffc15 	stw	r4,-16(fp)
   5b854:	e17ffd15 	stw	r5,-12(fp)
   5b858:	e1bffe15 	stw	r6,-8(fp)
   5b85c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   5b860:	e13ffd17 	ldw	r4,-12(fp)
   5b864:	e17ffe17 	ldw	r5,-8(fp)
   5b868:	e1bfff17 	ldw	r6,-4(fp)
   5b86c:	005bad40 	call	5bad4 <open>
   5b870:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   5b874:	e0bffb17 	ldw	r2,-20(fp)
   5b878:	10002216 	blt	r2,zero,5b904 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   5b87c:	04000074 	movhi	r16,1
   5b880:	8402ef04 	addi	r16,r16,3004
   5b884:	e0bffb17 	ldw	r2,-20(fp)
   5b888:	1009883a 	mov	r4,r2
   5b88c:	01400304 	movi	r5,12
   5b890:	005960c0 	call	5960c <__mulsi3>
   5b894:	8085883a 	add	r2,r16,r2
   5b898:	10c00017 	ldw	r3,0(r2)
   5b89c:	e0bffc17 	ldw	r2,-16(fp)
   5b8a0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   5b8a4:	04000074 	movhi	r16,1
   5b8a8:	8402ef04 	addi	r16,r16,3004
   5b8ac:	e0bffb17 	ldw	r2,-20(fp)
   5b8b0:	1009883a 	mov	r4,r2
   5b8b4:	01400304 	movi	r5,12
   5b8b8:	005960c0 	call	5960c <__mulsi3>
   5b8bc:	8085883a 	add	r2,r16,r2
   5b8c0:	10800104 	addi	r2,r2,4
   5b8c4:	10c00017 	ldw	r3,0(r2)
   5b8c8:	e0bffc17 	ldw	r2,-16(fp)
   5b8cc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   5b8d0:	04000074 	movhi	r16,1
   5b8d4:	8402ef04 	addi	r16,r16,3004
   5b8d8:	e0bffb17 	ldw	r2,-20(fp)
   5b8dc:	1009883a 	mov	r4,r2
   5b8e0:	01400304 	movi	r5,12
   5b8e4:	005960c0 	call	5960c <__mulsi3>
   5b8e8:	8085883a 	add	r2,r16,r2
   5b8ec:	10800204 	addi	r2,r2,8
   5b8f0:	10c00017 	ldw	r3,0(r2)
   5b8f4:	e0bffc17 	ldw	r2,-16(fp)
   5b8f8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   5b8fc:	e13ffb17 	ldw	r4,-20(fp)
   5b900:	005a3b80 	call	5a3b8 <alt_release_fd>
  }
} 
   5b904:	e037883a 	mov	sp,fp
   5b908:	dfc00217 	ldw	ra,8(sp)
   5b90c:	df000117 	ldw	fp,4(sp)
   5b910:	dc000017 	ldw	r16,0(sp)
   5b914:	dec00304 	addi	sp,sp,12
   5b918:	f800283a 	ret

0005b91c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   5b91c:	defffb04 	addi	sp,sp,-20
   5b920:	dfc00415 	stw	ra,16(sp)
   5b924:	df000315 	stw	fp,12(sp)
   5b928:	df000304 	addi	fp,sp,12
   5b92c:	e13ffd15 	stw	r4,-12(fp)
   5b930:	e17ffe15 	stw	r5,-8(fp)
   5b934:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   5b938:	01000074 	movhi	r4,1
   5b93c:	2102f204 	addi	r4,r4,3016
   5b940:	e17ffd17 	ldw	r5,-12(fp)
   5b944:	01800044 	movi	r6,1
   5b948:	01c07fc4 	movi	r7,511
   5b94c:	005b83c0 	call	5b83c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   5b950:	01000074 	movhi	r4,1
   5b954:	2102ef04 	addi	r4,r4,3004
   5b958:	e17ffe17 	ldw	r5,-8(fp)
   5b95c:	000d883a 	mov	r6,zero
   5b960:	01c07fc4 	movi	r7,511
   5b964:	005b83c0 	call	5b83c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   5b968:	01000074 	movhi	r4,1
   5b96c:	2102f504 	addi	r4,r4,3028
   5b970:	e17fff17 	ldw	r5,-4(fp)
   5b974:	01800044 	movi	r6,1
   5b978:	01c07fc4 	movi	r7,511
   5b97c:	005b83c0 	call	5b83c <alt_open_fd>
}  
   5b980:	e037883a 	mov	sp,fp
   5b984:	dfc00117 	ldw	ra,4(sp)
   5b988:	df000017 	ldw	fp,0(sp)
   5b98c:	dec00204 	addi	sp,sp,8
   5b990:	f800283a 	ret

0005b994 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   5b994:	defffe04 	addi	sp,sp,-8
   5b998:	dfc00115 	stw	ra,4(sp)
   5b99c:	df000015 	stw	fp,0(sp)
   5b9a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   5b9a4:	00800074 	movhi	r2,1
   5b9a8:	10877104 	addi	r2,r2,7620
   5b9ac:	10800017 	ldw	r2,0(r2)
   5b9b0:	10000526 	beq	r2,zero,5b9c8 <alt_get_errno+0x34>
   5b9b4:	00800074 	movhi	r2,1
   5b9b8:	10877104 	addi	r2,r2,7620
   5b9bc:	10800017 	ldw	r2,0(r2)
   5b9c0:	103ee83a 	callr	r2
   5b9c4:	00000206 	br	5b9d0 <alt_get_errno+0x3c>
   5b9c8:	00800074 	movhi	r2,1
   5b9cc:	10878104 	addi	r2,r2,7684
}
   5b9d0:	e037883a 	mov	sp,fp
   5b9d4:	dfc00117 	ldw	ra,4(sp)
   5b9d8:	df000017 	ldw	fp,0(sp)
   5b9dc:	dec00204 	addi	sp,sp,8
   5b9e0:	f800283a 	ret

0005b9e4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   5b9e4:	defffb04 	addi	sp,sp,-20
   5b9e8:	dfc00415 	stw	ra,16(sp)
   5b9ec:	df000315 	stw	fp,12(sp)
   5b9f0:	dc000215 	stw	r16,8(sp)
   5b9f4:	df000204 	addi	fp,sp,8
   5b9f8:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   5b9fc:	e0bfff17 	ldw	r2,-4(fp)
   5ba00:	10800217 	ldw	r2,8(r2)
   5ba04:	10d00034 	orhi	r3,r2,16384
   5ba08:	e0bfff17 	ldw	r2,-4(fp)
   5ba0c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   5ba10:	e03ffe15 	stw	zero,-8(fp)
   5ba14:	00002206 	br	5baa0 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   5ba18:	04000074 	movhi	r16,1
   5ba1c:	8402ef04 	addi	r16,r16,3004
   5ba20:	e0bffe17 	ldw	r2,-8(fp)
   5ba24:	1009883a 	mov	r4,r2
   5ba28:	01400304 	movi	r5,12
   5ba2c:	005960c0 	call	5960c <__mulsi3>
   5ba30:	8085883a 	add	r2,r16,r2
   5ba34:	10c00017 	ldw	r3,0(r2)
   5ba38:	e0bfff17 	ldw	r2,-4(fp)
   5ba3c:	10800017 	ldw	r2,0(r2)
   5ba40:	1880141e 	bne	r3,r2,5ba94 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   5ba44:	04000074 	movhi	r16,1
   5ba48:	8402ef04 	addi	r16,r16,3004
   5ba4c:	e0bffe17 	ldw	r2,-8(fp)
   5ba50:	1009883a 	mov	r4,r2
   5ba54:	01400304 	movi	r5,12
   5ba58:	005960c0 	call	5960c <__mulsi3>
   5ba5c:	8085883a 	add	r2,r16,r2
   5ba60:	10800204 	addi	r2,r2,8
   5ba64:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   5ba68:	10000a0e 	bge	r2,zero,5ba94 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   5ba6c:	e13ffe17 	ldw	r4,-8(fp)
   5ba70:	01400304 	movi	r5,12
   5ba74:	005960c0 	call	5960c <__mulsi3>
   5ba78:	00c00074 	movhi	r3,1
   5ba7c:	18c2ef04 	addi	r3,r3,3004
   5ba80:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   5ba84:	e0bfff17 	ldw	r2,-4(fp)
   5ba88:	18800226 	beq	r3,r2,5ba94 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   5ba8c:	00bffcc4 	movi	r2,-13
   5ba90:	00000a06 	br	5babc <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   5ba94:	e0bffe17 	ldw	r2,-8(fp)
   5ba98:	10800044 	addi	r2,r2,1
   5ba9c:	e0bffe15 	stw	r2,-8(fp)
   5baa0:	00800074 	movhi	r2,1
   5baa4:	10877004 	addi	r2,r2,7616
   5baa8:	10800017 	ldw	r2,0(r2)
   5baac:	1007883a 	mov	r3,r2
   5bab0:	e0bffe17 	ldw	r2,-8(fp)
   5bab4:	18bfd82e 	bgeu	r3,r2,5ba18 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   5bab8:	0005883a 	mov	r2,zero
}
   5babc:	e037883a 	mov	sp,fp
   5bac0:	dfc00217 	ldw	ra,8(sp)
   5bac4:	df000117 	ldw	fp,4(sp)
   5bac8:	dc000017 	ldw	r16,0(sp)
   5bacc:	dec00304 	addi	sp,sp,12
   5bad0:	f800283a 	ret

0005bad4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   5bad4:	defff604 	addi	sp,sp,-40
   5bad8:	dfc00915 	stw	ra,36(sp)
   5badc:	df000815 	stw	fp,32(sp)
   5bae0:	df000804 	addi	fp,sp,32
   5bae4:	e13ffd15 	stw	r4,-12(fp)
   5bae8:	e17ffe15 	stw	r5,-8(fp)
   5baec:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   5baf0:	00bfffc4 	movi	r2,-1
   5baf4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   5baf8:	00bffb44 	movi	r2,-19
   5bafc:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   5bb00:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   5bb04:	e13ffd17 	ldw	r4,-12(fp)
   5bb08:	01400074 	movhi	r5,1
   5bb0c:	29476e04 	addi	r5,r5,7608
   5bb10:	005bde80 	call	5bde8 <alt_find_dev>
   5bb14:	e0bff815 	stw	r2,-32(fp)
   5bb18:	e0bff817 	ldw	r2,-32(fp)
   5bb1c:	1000051e 	bne	r2,zero,5bb34 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   5bb20:	e13ffd17 	ldw	r4,-12(fp)
   5bb24:	005be780 	call	5be78 <alt_find_file>
   5bb28:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   5bb2c:	00800044 	movi	r2,1
   5bb30:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   5bb34:	e0bff817 	ldw	r2,-32(fp)
   5bb38:	10002a26 	beq	r2,zero,5bbe4 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   5bb3c:	e13ff817 	ldw	r4,-32(fp)
   5bb40:	005bf8c0 	call	5bf8c <alt_get_fd>
   5bb44:	e0bff915 	stw	r2,-28(fp)
   5bb48:	e0bff917 	ldw	r2,-28(fp)
   5bb4c:	1000030e 	bge	r2,zero,5bb5c <open+0x88>
    {
      status = index;
   5bb50:	e0bff917 	ldw	r2,-28(fp)
   5bb54:	e0bffa15 	stw	r2,-24(fp)
   5bb58:	00002406 	br	5bbec <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   5bb5c:	e13ff917 	ldw	r4,-28(fp)
   5bb60:	01400304 	movi	r5,12
   5bb64:	005960c0 	call	5960c <__mulsi3>
   5bb68:	00c00074 	movhi	r3,1
   5bb6c:	18c2ef04 	addi	r3,r3,3004
   5bb70:	10c5883a 	add	r2,r2,r3
   5bb74:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   5bb78:	e0fffe17 	ldw	r3,-8(fp)
   5bb7c:	00900034 	movhi	r2,16384
   5bb80:	10bfffc4 	addi	r2,r2,-1
   5bb84:	1886703a 	and	r3,r3,r2
   5bb88:	e0bffc17 	ldw	r2,-16(fp)
   5bb8c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   5bb90:	e0bffb17 	ldw	r2,-20(fp)
   5bb94:	1000051e 	bne	r2,zero,5bbac <open+0xd8>
   5bb98:	e13ffc17 	ldw	r4,-16(fp)
   5bb9c:	005b9e40 	call	5b9e4 <alt_file_locked>
   5bba0:	e0bffa15 	stw	r2,-24(fp)
   5bba4:	e0bffa17 	ldw	r2,-24(fp)
   5bba8:	10001016 	blt	r2,zero,5bbec <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   5bbac:	e0bff817 	ldw	r2,-32(fp)
   5bbb0:	10800317 	ldw	r2,12(r2)
   5bbb4:	10000826 	beq	r2,zero,5bbd8 <open+0x104>
   5bbb8:	e0bff817 	ldw	r2,-32(fp)
   5bbbc:	10800317 	ldw	r2,12(r2)
   5bbc0:	e13ffc17 	ldw	r4,-16(fp)
   5bbc4:	e17ffd17 	ldw	r5,-12(fp)
   5bbc8:	e1bffe17 	ldw	r6,-8(fp)
   5bbcc:	e1ffff17 	ldw	r7,-4(fp)
   5bbd0:	103ee83a 	callr	r2
   5bbd4:	00000106 	br	5bbdc <open+0x108>
   5bbd8:	0005883a 	mov	r2,zero
   5bbdc:	e0bffa15 	stw	r2,-24(fp)
   5bbe0:	00000206 	br	5bbec <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   5bbe4:	00bffb44 	movi	r2,-19
   5bbe8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   5bbec:	e0bffa17 	ldw	r2,-24(fp)
   5bbf0:	1000080e 	bge	r2,zero,5bc14 <open+0x140>
  {
    alt_release_fd (index);  
   5bbf4:	e13ff917 	ldw	r4,-28(fp)
   5bbf8:	005a3b80 	call	5a3b8 <alt_release_fd>
    ALT_ERRNO = -status;
   5bbfc:	005b9940 	call	5b994 <alt_get_errno>
   5bc00:	e0fffa17 	ldw	r3,-24(fp)
   5bc04:	00c7c83a 	sub	r3,zero,r3
   5bc08:	10c00015 	stw	r3,0(r2)
    return -1;
   5bc0c:	00bfffc4 	movi	r2,-1
   5bc10:	00000106 	br	5bc18 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   5bc14:	e0bff917 	ldw	r2,-28(fp)
}
   5bc18:	e037883a 	mov	sp,fp
   5bc1c:	dfc00117 	ldw	ra,4(sp)
   5bc20:	df000017 	ldw	fp,0(sp)
   5bc24:	dec00204 	addi	sp,sp,8
   5bc28:	f800283a 	ret

0005bc2c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   5bc2c:	defffa04 	addi	sp,sp,-24
   5bc30:	df000515 	stw	fp,20(sp)
   5bc34:	df000504 	addi	fp,sp,20
   5bc38:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   5bc3c:	0005303a 	rdctl	r2,status
   5bc40:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   5bc44:	e0fffc17 	ldw	r3,-16(fp)
   5bc48:	00bfff84 	movi	r2,-2
   5bc4c:	1884703a 	and	r2,r3,r2
   5bc50:	1001703a 	wrctl	status,r2
  
  return context;
   5bc54:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   5bc58:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   5bc5c:	e0bfff17 	ldw	r2,-4(fp)
   5bc60:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   5bc64:	e0bffd17 	ldw	r2,-12(fp)
   5bc68:	10800017 	ldw	r2,0(r2)
   5bc6c:	e0fffd17 	ldw	r3,-12(fp)
   5bc70:	18c00117 	ldw	r3,4(r3)
   5bc74:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   5bc78:	e0bffd17 	ldw	r2,-12(fp)
   5bc7c:	10800117 	ldw	r2,4(r2)
   5bc80:	e0fffd17 	ldw	r3,-12(fp)
   5bc84:	18c00017 	ldw	r3,0(r3)
   5bc88:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   5bc8c:	e0bffd17 	ldw	r2,-12(fp)
   5bc90:	e0fffd17 	ldw	r3,-12(fp)
   5bc94:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   5bc98:	e0bffd17 	ldw	r2,-12(fp)
   5bc9c:	e0fffd17 	ldw	r3,-12(fp)
   5bca0:	10c00015 	stw	r3,0(r2)
   5bca4:	e0bffb17 	ldw	r2,-20(fp)
   5bca8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   5bcac:	e0bffe17 	ldw	r2,-8(fp)
   5bcb0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   5bcb4:	e037883a 	mov	sp,fp
   5bcb8:	df000017 	ldw	fp,0(sp)
   5bcbc:	dec00104 	addi	sp,sp,4
   5bcc0:	f800283a 	ret

0005bcc4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   5bcc4:	defffb04 	addi	sp,sp,-20
   5bcc8:	dfc00415 	stw	ra,16(sp)
   5bccc:	df000315 	stw	fp,12(sp)
   5bcd0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   5bcd4:	d0a00d17 	ldw	r2,-32716(gp)
   5bcd8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   5bcdc:	d0a02017 	ldw	r2,-32640(gp)
   5bce0:	10800044 	addi	r2,r2,1
   5bce4:	d0a02015 	stw	r2,-32640(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   5bce8:	00002e06 	br	5bda4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   5bcec:	e0bffd17 	ldw	r2,-12(fp)
   5bcf0:	10800017 	ldw	r2,0(r2)
   5bcf4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   5bcf8:	e0bffd17 	ldw	r2,-12(fp)
   5bcfc:	10800403 	ldbu	r2,16(r2)
   5bd00:	10803fcc 	andi	r2,r2,255
   5bd04:	10000426 	beq	r2,zero,5bd18 <alt_tick+0x54>
   5bd08:	d0a02017 	ldw	r2,-32640(gp)
   5bd0c:	1000021e 	bne	r2,zero,5bd18 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   5bd10:	e0bffd17 	ldw	r2,-12(fp)
   5bd14:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   5bd18:	e0bffd17 	ldw	r2,-12(fp)
   5bd1c:	10800217 	ldw	r2,8(r2)
   5bd20:	d0e02017 	ldw	r3,-32640(gp)
   5bd24:	18801d36 	bltu	r3,r2,5bd9c <alt_tick+0xd8>
   5bd28:	e0bffd17 	ldw	r2,-12(fp)
   5bd2c:	10800403 	ldbu	r2,16(r2)
   5bd30:	10803fcc 	andi	r2,r2,255
   5bd34:	1000191e 	bne	r2,zero,5bd9c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   5bd38:	e0bffd17 	ldw	r2,-12(fp)
   5bd3c:	10c00317 	ldw	r3,12(r2)
   5bd40:	e0bffd17 	ldw	r2,-12(fp)
   5bd44:	10800517 	ldw	r2,20(r2)
   5bd48:	1009883a 	mov	r4,r2
   5bd4c:	183ee83a 	callr	r3
   5bd50:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   5bd54:	e0bfff17 	ldw	r2,-4(fp)
   5bd58:	1000031e 	bne	r2,zero,5bd68 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   5bd5c:	e13ffd17 	ldw	r4,-12(fp)
   5bd60:	005bc2c0 	call	5bc2c <alt_alarm_stop>
   5bd64:	00000d06 	br	5bd9c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   5bd68:	e0bffd17 	ldw	r2,-12(fp)
   5bd6c:	10c00217 	ldw	r3,8(r2)
   5bd70:	e0bfff17 	ldw	r2,-4(fp)
   5bd74:	1887883a 	add	r3,r3,r2
   5bd78:	e0bffd17 	ldw	r2,-12(fp)
   5bd7c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   5bd80:	e0bffd17 	ldw	r2,-12(fp)
   5bd84:	10c00217 	ldw	r3,8(r2)
   5bd88:	d0a02017 	ldw	r2,-32640(gp)
   5bd8c:	1880032e 	bgeu	r3,r2,5bd9c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   5bd90:	e0bffd17 	ldw	r2,-12(fp)
   5bd94:	00c00044 	movi	r3,1
   5bd98:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   5bd9c:	e0bffe17 	ldw	r2,-8(fp)
   5bda0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   5bda4:	e0fffd17 	ldw	r3,-12(fp)
   5bda8:	d0a00d04 	addi	r2,gp,-32716
   5bdac:	18bfcf1e 	bne	r3,r2,5bcec <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   5bdb0:	0001883a 	nop
}
   5bdb4:	e037883a 	mov	sp,fp
   5bdb8:	dfc00117 	ldw	ra,4(sp)
   5bdbc:	df000017 	ldw	fp,0(sp)
   5bdc0:	dec00204 	addi	sp,sp,8
   5bdc4:	f800283a 	ret

0005bdc8 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   5bdc8:	deffff04 	addi	sp,sp,-4
   5bdcc:	df000015 	stw	fp,0(sp)
   5bdd0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   5bdd4:	000170fa 	wrctl	ienable,zero
}
   5bdd8:	e037883a 	mov	sp,fp
   5bddc:	df000017 	ldw	fp,0(sp)
   5bde0:	dec00104 	addi	sp,sp,4
   5bde4:	f800283a 	ret

0005bde8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   5bde8:	defffa04 	addi	sp,sp,-24
   5bdec:	dfc00515 	stw	ra,20(sp)
   5bdf0:	df000415 	stw	fp,16(sp)
   5bdf4:	df000404 	addi	fp,sp,16
   5bdf8:	e13ffe15 	stw	r4,-8(fp)
   5bdfc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   5be00:	e0bfff17 	ldw	r2,-4(fp)
   5be04:	10800017 	ldw	r2,0(r2)
   5be08:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   5be0c:	e13ffe17 	ldw	r4,-8(fp)
   5be10:	00507a40 	call	507a4 <strlen>
   5be14:	10800044 	addi	r2,r2,1
   5be18:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   5be1c:	00000d06 	br	5be54 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   5be20:	e0bffc17 	ldw	r2,-16(fp)
   5be24:	10c00217 	ldw	r3,8(r2)
   5be28:	e0bffd17 	ldw	r2,-12(fp)
   5be2c:	1809883a 	mov	r4,r3
   5be30:	e17ffe17 	ldw	r5,-8(fp)
   5be34:	100d883a 	mov	r6,r2
   5be38:	005c0ac0 	call	5c0ac <memcmp>
   5be3c:	1000021e 	bne	r2,zero,5be48 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   5be40:	e0bffc17 	ldw	r2,-16(fp)
   5be44:	00000706 	br	5be64 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   5be48:	e0bffc17 	ldw	r2,-16(fp)
   5be4c:	10800017 	ldw	r2,0(r2)
   5be50:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   5be54:	e0fffc17 	ldw	r3,-16(fp)
   5be58:	e0bfff17 	ldw	r2,-4(fp)
   5be5c:	18bff01e 	bne	r3,r2,5be20 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   5be60:	0005883a 	mov	r2,zero
}
   5be64:	e037883a 	mov	sp,fp
   5be68:	dfc00117 	ldw	ra,4(sp)
   5be6c:	df000017 	ldw	fp,0(sp)
   5be70:	dec00204 	addi	sp,sp,8
   5be74:	f800283a 	ret

0005be78 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   5be78:	defffb04 	addi	sp,sp,-20
   5be7c:	dfc00415 	stw	ra,16(sp)
   5be80:	df000315 	stw	fp,12(sp)
   5be84:	df000304 	addi	fp,sp,12
   5be88:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   5be8c:	00800074 	movhi	r2,1
   5be90:	10876c04 	addi	r2,r2,7600
   5be94:	10800017 	ldw	r2,0(r2)
   5be98:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   5be9c:	00003106 	br	5bf64 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   5bea0:	e0bffd17 	ldw	r2,-12(fp)
   5bea4:	10800217 	ldw	r2,8(r2)
   5bea8:	1009883a 	mov	r4,r2
   5beac:	00507a40 	call	507a4 <strlen>
   5beb0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   5beb4:	e0bffd17 	ldw	r2,-12(fp)
   5beb8:	10c00217 	ldw	r3,8(r2)
   5bebc:	e0bffe17 	ldw	r2,-8(fp)
   5bec0:	10bfffc4 	addi	r2,r2,-1
   5bec4:	1885883a 	add	r2,r3,r2
   5bec8:	10800003 	ldbu	r2,0(r2)
   5becc:	10803fcc 	andi	r2,r2,255
   5bed0:	1080201c 	xori	r2,r2,128
   5bed4:	10bfe004 	addi	r2,r2,-128
   5bed8:	10800bd8 	cmpnei	r2,r2,47
   5bedc:	1000031e 	bne	r2,zero,5beec <alt_find_file+0x74>
    {
      len -= 1;
   5bee0:	e0bffe17 	ldw	r2,-8(fp)
   5bee4:	10bfffc4 	addi	r2,r2,-1
   5bee8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   5beec:	e0bffe17 	ldw	r2,-8(fp)
   5bef0:	e0ffff17 	ldw	r3,-4(fp)
   5bef4:	1885883a 	add	r2,r3,r2
   5bef8:	10800003 	ldbu	r2,0(r2)
   5befc:	10803fcc 	andi	r2,r2,255
   5bf00:	1080201c 	xori	r2,r2,128
   5bf04:	10bfe004 	addi	r2,r2,-128
   5bf08:	10800be0 	cmpeqi	r2,r2,47
   5bf0c:	1000081e 	bne	r2,zero,5bf30 <alt_find_file+0xb8>
   5bf10:	e0bffe17 	ldw	r2,-8(fp)
   5bf14:	e0ffff17 	ldw	r3,-4(fp)
   5bf18:	1885883a 	add	r2,r3,r2
   5bf1c:	10800003 	ldbu	r2,0(r2)
   5bf20:	10803fcc 	andi	r2,r2,255
   5bf24:	1080201c 	xori	r2,r2,128
   5bf28:	10bfe004 	addi	r2,r2,-128
   5bf2c:	10000a1e 	bne	r2,zero,5bf58 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   5bf30:	e0bffd17 	ldw	r2,-12(fp)
   5bf34:	10c00217 	ldw	r3,8(r2)
   5bf38:	e0bffe17 	ldw	r2,-8(fp)
   5bf3c:	1809883a 	mov	r4,r3
   5bf40:	e17fff17 	ldw	r5,-4(fp)
   5bf44:	100d883a 	mov	r6,r2
   5bf48:	005c0ac0 	call	5c0ac <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   5bf4c:	1000021e 	bne	r2,zero,5bf58 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   5bf50:	e0bffd17 	ldw	r2,-12(fp)
   5bf54:	00000806 	br	5bf78 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   5bf58:	e0bffd17 	ldw	r2,-12(fp)
   5bf5c:	10800017 	ldw	r2,0(r2)
   5bf60:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   5bf64:	e0fffd17 	ldw	r3,-12(fp)
   5bf68:	00800074 	movhi	r2,1
   5bf6c:	10876c04 	addi	r2,r2,7600
   5bf70:	18bfcb1e 	bne	r3,r2,5bea0 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   5bf74:	0005883a 	mov	r2,zero
}
   5bf78:	e037883a 	mov	sp,fp
   5bf7c:	dfc00117 	ldw	ra,4(sp)
   5bf80:	df000017 	ldw	fp,0(sp)
   5bf84:	dec00204 	addi	sp,sp,8
   5bf88:	f800283a 	ret

0005bf8c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   5bf8c:	defffa04 	addi	sp,sp,-24
   5bf90:	dfc00515 	stw	ra,20(sp)
   5bf94:	df000415 	stw	fp,16(sp)
   5bf98:	dc000315 	stw	r16,12(sp)
   5bf9c:	df000304 	addi	fp,sp,12
   5bfa0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   5bfa4:	00bffa04 	movi	r2,-24
   5bfa8:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   5bfac:	e03ffd15 	stw	zero,-12(fp)
   5bfb0:	00002106 	br	5c038 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   5bfb4:	04000074 	movhi	r16,1
   5bfb8:	8402ef04 	addi	r16,r16,3004
   5bfbc:	e0bffd17 	ldw	r2,-12(fp)
   5bfc0:	1009883a 	mov	r4,r2
   5bfc4:	01400304 	movi	r5,12
   5bfc8:	005960c0 	call	5960c <__mulsi3>
   5bfcc:	8085883a 	add	r2,r16,r2
   5bfd0:	10800017 	ldw	r2,0(r2)
   5bfd4:	1000151e 	bne	r2,zero,5c02c <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   5bfd8:	04000074 	movhi	r16,1
   5bfdc:	8402ef04 	addi	r16,r16,3004
   5bfe0:	e0bffd17 	ldw	r2,-12(fp)
   5bfe4:	1009883a 	mov	r4,r2
   5bfe8:	01400304 	movi	r5,12
   5bfec:	005960c0 	call	5960c <__mulsi3>
   5bff0:	8085883a 	add	r2,r16,r2
   5bff4:	e0ffff17 	ldw	r3,-4(fp)
   5bff8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   5bffc:	00800074 	movhi	r2,1
   5c000:	10877004 	addi	r2,r2,7616
   5c004:	10c00017 	ldw	r3,0(r2)
   5c008:	e0bffd17 	ldw	r2,-12(fp)
   5c00c:	1880040e 	bge	r3,r2,5c020 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   5c010:	00800074 	movhi	r2,1
   5c014:	10877004 	addi	r2,r2,7616
   5c018:	e0fffd17 	ldw	r3,-12(fp)
   5c01c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   5c020:	e0bffd17 	ldw	r2,-12(fp)
   5c024:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   5c028:	00000606 	br	5c044 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   5c02c:	e0bffd17 	ldw	r2,-12(fp)
   5c030:	10800044 	addi	r2,r2,1
   5c034:	e0bffd15 	stw	r2,-12(fp)
   5c038:	e0bffd17 	ldw	r2,-12(fp)
   5c03c:	10800810 	cmplti	r2,r2,32
   5c040:	103fdc1e 	bne	r2,zero,5bfb4 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   5c044:	e0bffe17 	ldw	r2,-8(fp)
}
   5c048:	e037883a 	mov	sp,fp
   5c04c:	dfc00217 	ldw	ra,8(sp)
   5c050:	df000117 	ldw	fp,4(sp)
   5c054:	dc000017 	ldw	r16,0(sp)
   5c058:	dec00304 	addi	sp,sp,12
   5c05c:	f800283a 	ret

0005c060 <atexit>:
   5c060:	200b883a 	mov	r5,r4
   5c064:	000d883a 	mov	r6,zero
   5c068:	0009883a 	mov	r4,zero
   5c06c:	000f883a 	mov	r7,zero
   5c070:	005c1281 	jmpi	5c128 <__register_exitproc>

0005c074 <exit>:
   5c074:	defffe04 	addi	sp,sp,-8
   5c078:	000b883a 	mov	r5,zero
   5c07c:	dc000015 	stw	r16,0(sp)
   5c080:	dfc00115 	stw	ra,4(sp)
   5c084:	2021883a 	mov	r16,r4
   5c088:	005c2580 	call	5c258 <__call_exitprocs>
   5c08c:	00800074 	movhi	r2,1
   5c090:	10876704 	addi	r2,r2,7580
   5c094:	11000017 	ldw	r4,0(r2)
   5c098:	20800f17 	ldw	r2,60(r4)
   5c09c:	10000126 	beq	r2,zero,5c0a4 <exit+0x30>
   5c0a0:	103ee83a 	callr	r2
   5c0a4:	8009883a 	mov	r4,r16
   5c0a8:	005c3f80 	call	5c3f8 <_exit>

0005c0ac <memcmp>:
   5c0ac:	01c000c4 	movi	r7,3
   5c0b0:	3980192e 	bgeu	r7,r6,5c118 <memcmp+0x6c>
   5c0b4:	2904b03a 	or	r2,r5,r4
   5c0b8:	11c4703a 	and	r2,r2,r7
   5c0bc:	10000f26 	beq	r2,zero,5c0fc <memcmp+0x50>
   5c0c0:	20c00003 	ldbu	r3,0(r4)
   5c0c4:	28800003 	ldbu	r2,0(r5)
   5c0c8:	1880151e 	bne	r3,r2,5c120 <memcmp+0x74>
   5c0cc:	31bfff84 	addi	r6,r6,-2
   5c0d0:	01ffffc4 	movi	r7,-1
   5c0d4:	00000406 	br	5c0e8 <memcmp+0x3c>
   5c0d8:	20c00003 	ldbu	r3,0(r4)
   5c0dc:	28800003 	ldbu	r2,0(r5)
   5c0e0:	31bfffc4 	addi	r6,r6,-1
   5c0e4:	18800e1e 	bne	r3,r2,5c120 <memcmp+0x74>
   5c0e8:	21000044 	addi	r4,r4,1
   5c0ec:	29400044 	addi	r5,r5,1
   5c0f0:	31fff91e 	bne	r6,r7,5c0d8 <memcmp+0x2c>
   5c0f4:	0005883a 	mov	r2,zero
   5c0f8:	f800283a 	ret
   5c0fc:	20c00017 	ldw	r3,0(r4)
   5c100:	28800017 	ldw	r2,0(r5)
   5c104:	1880041e 	bne	r3,r2,5c118 <memcmp+0x6c>
   5c108:	31bfff04 	addi	r6,r6,-4
   5c10c:	21000104 	addi	r4,r4,4
   5c110:	29400104 	addi	r5,r5,4
   5c114:	39bff936 	bltu	r7,r6,5c0fc <memcmp+0x50>
   5c118:	303fe91e 	bne	r6,zero,5c0c0 <memcmp+0x14>
   5c11c:	003ff506 	br	5c0f4 <memcmp+0x48>
   5c120:	1885c83a 	sub	r2,r3,r2
   5c124:	f800283a 	ret

0005c128 <__register_exitproc>:
   5c128:	defffa04 	addi	sp,sp,-24
   5c12c:	00800074 	movhi	r2,1
   5c130:	10876704 	addi	r2,r2,7580
   5c134:	dc000315 	stw	r16,12(sp)
   5c138:	14000017 	ldw	r16,0(r2)
   5c13c:	dc400415 	stw	r17,16(sp)
   5c140:	dfc00515 	stw	ra,20(sp)
   5c144:	80805217 	ldw	r2,328(r16)
   5c148:	2023883a 	mov	r17,r4
   5c14c:	10003e26 	beq	r2,zero,5c248 <__register_exitproc+0x120>
   5c150:	10c00117 	ldw	r3,4(r2)
   5c154:	020007c4 	movi	r8,31
   5c158:	40c0180e 	bge	r8,r3,5c1bc <__register_exitproc+0x94>
   5c15c:	00800034 	movhi	r2,0
   5c160:	10800004 	addi	r2,r2,0
   5c164:	1000061e 	bne	r2,zero,5c180 <__register_exitproc+0x58>
   5c168:	00bfffc4 	movi	r2,-1
   5c16c:	dfc00517 	ldw	ra,20(sp)
   5c170:	dc400417 	ldw	r17,16(sp)
   5c174:	dc000317 	ldw	r16,12(sp)
   5c178:	dec00604 	addi	sp,sp,24
   5c17c:	f800283a 	ret
   5c180:	01006404 	movi	r4,400
   5c184:	d9400015 	stw	r5,0(sp)
   5c188:	d9800115 	stw	r6,4(sp)
   5c18c:	d9c00215 	stw	r7,8(sp)
   5c190:	00000000 	call	0 <__alt_mem_onchip_data_memory>
   5c194:	d9400017 	ldw	r5,0(sp)
   5c198:	d9800117 	ldw	r6,4(sp)
   5c19c:	d9c00217 	ldw	r7,8(sp)
   5c1a0:	103ff126 	beq	r2,zero,5c168 <__register_exitproc+0x40>
   5c1a4:	80c05217 	ldw	r3,328(r16)
   5c1a8:	10000115 	stw	zero,4(r2)
   5c1ac:	10c00015 	stw	r3,0(r2)
   5c1b0:	80805215 	stw	r2,328(r16)
   5c1b4:	10006215 	stw	zero,392(r2)
   5c1b8:	10006315 	stw	zero,396(r2)
   5c1bc:	10c00117 	ldw	r3,4(r2)
   5c1c0:	88000d1e 	bne	r17,zero,5c1f8 <__register_exitproc+0xd0>
   5c1c4:	19000084 	addi	r4,r3,2
   5c1c8:	2109883a 	add	r4,r4,r4
   5c1cc:	18c00044 	addi	r3,r3,1
   5c1d0:	2109883a 	add	r4,r4,r4
   5c1d4:	1109883a 	add	r4,r2,r4
   5c1d8:	10c00115 	stw	r3,4(r2)
   5c1dc:	0005883a 	mov	r2,zero
   5c1e0:	21400015 	stw	r5,0(r4)
   5c1e4:	dfc00517 	ldw	ra,20(sp)
   5c1e8:	dc400417 	ldw	r17,16(sp)
   5c1ec:	dc000317 	ldw	r16,12(sp)
   5c1f0:	dec00604 	addi	sp,sp,24
   5c1f4:	f800283a 	ret
   5c1f8:	02400044 	movi	r9,1
   5c1fc:	12806217 	ldw	r10,392(r2)
   5c200:	48d2983a 	sll	r9,r9,r3
   5c204:	19000804 	addi	r4,r3,32
   5c208:	18d1883a 	add	r8,r3,r3
   5c20c:	2109883a 	add	r4,r4,r4
   5c210:	4211883a 	add	r8,r8,r8
   5c214:	2109883a 	add	r4,r4,r4
   5c218:	1109883a 	add	r4,r2,r4
   5c21c:	1211883a 	add	r8,r2,r8
   5c220:	5254b03a 	or	r10,r10,r9
   5c224:	21c02215 	stw	r7,136(r4)
   5c228:	41802215 	stw	r6,136(r8)
   5c22c:	12806215 	stw	r10,392(r2)
   5c230:	01000084 	movi	r4,2
   5c234:	893fe31e 	bne	r17,r4,5c1c4 <__register_exitproc+0x9c>
   5c238:	11006317 	ldw	r4,396(r2)
   5c23c:	2252b03a 	or	r9,r4,r9
   5c240:	12406315 	stw	r9,396(r2)
   5c244:	003fdf06 	br	5c1c4 <__register_exitproc+0x9c>
   5c248:	00800074 	movhi	r2,1
   5c24c:	1087d204 	addi	r2,r2,8008
   5c250:	80805215 	stw	r2,328(r16)
   5c254:	003fbe06 	br	5c150 <__register_exitproc+0x28>

0005c258 <__call_exitprocs>:
   5c258:	00800074 	movhi	r2,1
   5c25c:	10876704 	addi	r2,r2,7580
   5c260:	10800017 	ldw	r2,0(r2)
   5c264:	defff304 	addi	sp,sp,-52
   5c268:	df000b15 	stw	fp,44(sp)
   5c26c:	d8800015 	stw	r2,0(sp)
   5c270:	10805204 	addi	r2,r2,328
   5c274:	dd400815 	stw	r21,32(sp)
   5c278:	dfc00c15 	stw	ra,48(sp)
   5c27c:	ddc00a15 	stw	r23,40(sp)
   5c280:	dd800915 	stw	r22,36(sp)
   5c284:	dd000715 	stw	r20,28(sp)
   5c288:	dcc00615 	stw	r19,24(sp)
   5c28c:	dc800515 	stw	r18,20(sp)
   5c290:	dc400415 	stw	r17,16(sp)
   5c294:	dc000315 	stw	r16,12(sp)
   5c298:	d9000115 	stw	r4,4(sp)
   5c29c:	2839883a 	mov	fp,r5
   5c2a0:	d8800215 	stw	r2,8(sp)
   5c2a4:	057fffc4 	movi	r21,-1
   5c2a8:	d8800017 	ldw	r2,0(sp)
   5c2ac:	ddc00217 	ldw	r23,8(sp)
   5c2b0:	14805217 	ldw	r18,328(r2)
   5c2b4:	90001726 	beq	r18,zero,5c314 <__call_exitprocs+0xbc>
   5c2b8:	94400117 	ldw	r17,4(r18)
   5c2bc:	8c3fffc4 	addi	r16,r17,-1
   5c2c0:	80001116 	blt	r16,zero,5c308 <__call_exitprocs+0xb0>
   5c2c4:	8c400044 	addi	r17,r17,1
   5c2c8:	8427883a 	add	r19,r16,r16
   5c2cc:	8c63883a 	add	r17,r17,r17
   5c2d0:	95802204 	addi	r22,r18,136
   5c2d4:	9ce7883a 	add	r19,r19,r19
   5c2d8:	8c63883a 	add	r17,r17,r17
   5c2dc:	b4e7883a 	add	r19,r22,r19
   5c2e0:	9463883a 	add	r17,r18,r17
   5c2e4:	e0001726 	beq	fp,zero,5c344 <__call_exitprocs+0xec>
   5c2e8:	8c87c83a 	sub	r3,r17,r18
   5c2ec:	b0c7883a 	add	r3,r22,r3
   5c2f0:	18c01e17 	ldw	r3,120(r3)
   5c2f4:	1f001326 	beq	r3,fp,5c344 <__call_exitprocs+0xec>
   5c2f8:	843fffc4 	addi	r16,r16,-1
   5c2fc:	9cffff04 	addi	r19,r19,-4
   5c300:	8c7fff04 	addi	r17,r17,-4
   5c304:	857ff71e 	bne	r16,r21,5c2e4 <__call_exitprocs+0x8c>
   5c308:	00800034 	movhi	r2,0
   5c30c:	10800004 	addi	r2,r2,0
   5c310:	10002a1e 	bne	r2,zero,5c3bc <__call_exitprocs+0x164>
   5c314:	dfc00c17 	ldw	ra,48(sp)
   5c318:	df000b17 	ldw	fp,44(sp)
   5c31c:	ddc00a17 	ldw	r23,40(sp)
   5c320:	dd800917 	ldw	r22,36(sp)
   5c324:	dd400817 	ldw	r21,32(sp)
   5c328:	dd000717 	ldw	r20,28(sp)
   5c32c:	dcc00617 	ldw	r19,24(sp)
   5c330:	dc800517 	ldw	r18,20(sp)
   5c334:	dc400417 	ldw	r17,16(sp)
   5c338:	dc000317 	ldw	r16,12(sp)
   5c33c:	dec00d04 	addi	sp,sp,52
   5c340:	f800283a 	ret
   5c344:	91000117 	ldw	r4,4(r18)
   5c348:	88c00017 	ldw	r3,0(r17)
   5c34c:	213fffc4 	addi	r4,r4,-1
   5c350:	24001526 	beq	r4,r16,5c3a8 <__call_exitprocs+0x150>
   5c354:	88000015 	stw	zero,0(r17)
   5c358:	183fe726 	beq	r3,zero,5c2f8 <__call_exitprocs+0xa0>
   5c35c:	00800044 	movi	r2,1
   5c360:	1408983a 	sll	r4,r2,r16
   5c364:	91406217 	ldw	r5,392(r18)
   5c368:	95000117 	ldw	r20,4(r18)
   5c36c:	214a703a 	and	r5,r4,r5
   5c370:	28000b26 	beq	r5,zero,5c3a0 <__call_exitprocs+0x148>
   5c374:	91406317 	ldw	r5,396(r18)
   5c378:	2148703a 	and	r4,r4,r5
   5c37c:	20000c1e 	bne	r4,zero,5c3b0 <__call_exitprocs+0x158>
   5c380:	99400017 	ldw	r5,0(r19)
   5c384:	d9000117 	ldw	r4,4(sp)
   5c388:	183ee83a 	callr	r3
   5c38c:	90c00117 	ldw	r3,4(r18)
   5c390:	1d3fc51e 	bne	r3,r20,5c2a8 <__call_exitprocs+0x50>
   5c394:	b8c00017 	ldw	r3,0(r23)
   5c398:	1cbfd726 	beq	r3,r18,5c2f8 <__call_exitprocs+0xa0>
   5c39c:	003fc206 	br	5c2a8 <__call_exitprocs+0x50>
   5c3a0:	183ee83a 	callr	r3
   5c3a4:	003ff906 	br	5c38c <__call_exitprocs+0x134>
   5c3a8:	94000115 	stw	r16,4(r18)
   5c3ac:	003fea06 	br	5c358 <__call_exitprocs+0x100>
   5c3b0:	99000017 	ldw	r4,0(r19)
   5c3b4:	183ee83a 	callr	r3
   5c3b8:	003ff406 	br	5c38c <__call_exitprocs+0x134>
   5c3bc:	90c00117 	ldw	r3,4(r18)
   5c3c0:	1800071e 	bne	r3,zero,5c3e0 <__call_exitprocs+0x188>
   5c3c4:	90c00017 	ldw	r3,0(r18)
   5c3c8:	18000926 	beq	r3,zero,5c3f0 <__call_exitprocs+0x198>
   5c3cc:	9009883a 	mov	r4,r18
   5c3d0:	b8c00015 	stw	r3,0(r23)
   5c3d4:	00000000 	call	0 <__alt_mem_onchip_data_memory>
   5c3d8:	bc800017 	ldw	r18,0(r23)
   5c3dc:	003fb506 	br	5c2b4 <__call_exitprocs+0x5c>
   5c3e0:	90c00017 	ldw	r3,0(r18)
   5c3e4:	902f883a 	mov	r23,r18
   5c3e8:	1825883a 	mov	r18,r3
   5c3ec:	003fb106 	br	5c2b4 <__call_exitprocs+0x5c>
   5c3f0:	0007883a 	mov	r3,zero
   5c3f4:	003ffb06 	br	5c3e4 <__call_exitprocs+0x18c>

0005c3f8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   5c3f8:	defffc04 	addi	sp,sp,-16
   5c3fc:	df000315 	stw	fp,12(sp)
   5c400:	df000304 	addi	fp,sp,12
   5c404:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   5c408:	0001883a 	nop
   5c40c:	e0bfff17 	ldw	r2,-4(fp)
   5c410:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
   5c414:	e0bffd17 	ldw	r2,-12(fp)
   5c418:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   5c41c:	e0bffe17 	ldw	r2,-8(fp)
   5c420:	10000226 	beq	r2,zero,5c42c <_exit+0x34>
    ALT_SIM_FAIL();
   5c424:	002af070 	cmpltui	zero,zero,43969
   5c428:	00000106 	br	5c430 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   5c42c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   5c430:	003fff06 	br	5c430 <_exit+0x38>

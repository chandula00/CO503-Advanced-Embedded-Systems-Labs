
test_11.elf:     file format elf32-littlenios2
test_11.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000401b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x00005558 memsz 0x00005558 flags r-x
    LOAD off    0x00006578 vaddr 0x00045578 paddr 0x00046fc0 align 2**12
         filesz 0x00001a48 memsz 0x00001a48 flags rw-
    LOAD off    0x00008a08 vaddr 0x00048a08 paddr 0x00048a08 align 2**12
         filesz 0x00000000 memsz 0x000002e0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005378  000401b8  000401b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000048  00045530  00045530  00006530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a48  00045578  00046fc0  00006578  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e0  00048a08  00048a08  00008a08  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00007fc0  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000950  00000000  00000000  00007fe8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00017801  00000000  00000000  00008938  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00005ad8  00000000  00000000  00020139  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00006beb  00000000  00000000  00025c11  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000fe0  00000000  00000000  0002c7fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000021de  00000000  00000000  0002d7dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000562f  00000000  00000000  0002f9ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  00034fec  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000398  00000000  00000000  00035000  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00037806  2**0
                  CONTENTS, READONLY
 17 .cpu          00000004  00000000  00000000  00037809  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0003780d  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0003780e  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0003780f  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00037813  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  00037817  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000a  00000000  00000000  0003781b  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000a  00000000  00000000  00037825  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000a  00000000  00000000  0003782f  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000003  00000000  00000000  00037839  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000051  00000000  00000000  0003783c  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00062013  00000000  00000000  0003788d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
000401b8 l    d  .text	00000000 .text
00045530 l    d  .rodata	00000000 .rodata
00045578 l    d  .rwdata	00000000 .rwdata
00048a08 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../test_11_bsp//obj/HAL/src/crt0.o
000401f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00040094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
00045578 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00041d64 l     F .text	00000008 __fp_lock
00041d6c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
00042d6c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00042e88 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00042eb4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00042fb4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000430a8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00043194 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00043370 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00046fb0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
000435e4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00043724 l     F .text	00000038 alt_dev_reg
00045f28 l     O .rwdata	00001060 jtag_uart0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00043a14 l     F .text	00000204 altera_avalon_jtag_uart_irq
00043c18 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00044254 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000444ac l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00044938 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00044a90 l     F .text	00000050 alt_get_errno
00044ae0 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00042c08 g     F .text	00000064 _isatty_r
000432b8 g     F .text	00000078 alt_main
00040228 g     F .text	00000084 _puts_r
00048a58 g     O .bss	00000100 alt_irq
00042c6c g     F .text	0000006c _lseek_r
00046fc0 g       *ABS*	00000000 __flash_rwdata_start
00048ce8 g       *ABS*	00000000 __alt_heap_start
0004291c g     F .text	0000005c __sseek
00041e08 g     F .text	0000010c __sinit
00041d80 g     F .text	00000078 __sfmoreglue
00043350 g     F .text	00000020 __malloc_unlock
000411ec g     F .text	0000018c memmove
00041df8 g     F .text	00000010 _cleanup
00000000  w      *UND*	00000000 __errno
00040000 g     F .entry	0000000c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
00042ba0 g     F .text	00000068 _fstat_r
00048a14 g     O .bss	00000004 errno
00048a1c g     O .bss	00000004 alt_argv
0004ef88 g       *ABS*	00000000 _gp
00045da8 g     O .rwdata	00000180 alt_fd_list
00044ee4 g     F .text	00000090 alt_find_dev
000410ac g     F .text	00000140 memcpy
00041d74 g     F .text	0000000c _cleanup_r
00044a18 g     F .text	00000078 alt_io_redirect
00045530 g       *ABS*	00000000 __DTOR_END__
000402ac g     F .text	00000014 puts
00043e18 g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00043004 g     F .text	000000a4 isatty
00048a10 g     O .bss	00000004 __malloc_top_pad
0004034c g     F .text	000004e4 __sfvwrite_r
00041974 g     F .text	00000064 _sbrk_r
00042cd8 g     F .text	0000006c _read_r
00046fa8 g     O .rwdata	00000004 alt_max_fd
00042a50 g     F .text	0000013c _fclose_r
00041d34 g     F .text	00000030 fflush
00048a0c g     O .bss	00000004 __malloc_max_sbrked_mem
000431e4 g     F .text	000000d4 lseek
00046f88 g     O .rwdata	00000004 _global_impure_ptr
00041378 g     F .text	000005fc _realloc_r
00048ce8 g       *ABS*	00000000 __bss_end
00044848 g     F .text	000000f0 alt_iic_isr_register
00044dc0 g     F .text	00000104 alt_tick
00042020 g     F .text	00000018 __fp_lock_all
000447fc g     F .text	0000004c alt_ic_irq_enabled
00044d28 g     F .text	00000098 alt_alarm_stop
00048a24 g     O .bss	00000004 alt_irq_active
000400ec g     F .exceptions	000000cc alt_irq_handler
00045d80 g     O .rwdata	00000028 alt_dev_null
00044490 g     F .text	0000001c alt_dcache_flush_all
00046fc0 g       *ABS*	00000000 __ram_rwdata_end
00046fa0 g     O .rwdata	00000008 alt_dev_list
00043634 g     F .text	000000f0 write
00045578 g       *ABS*	00000000 __ram_rodata_end
00042f04 g     F .text	000000b0 fstat
00048ce8 g       *ABS*	00000000 end
00043954 g     F .text	000000c0 altera_avalon_jtag_uart_init
00045530 g       *ABS*	00000000 __CTOR_LIST__
00080000 g       *ABS*	00000000 __alt_stack_pointer
000442c8 g     F .text	00000088 alt_avalon_timer_sc_init
00044030 g     F .text	00000224 altera_avalon_jtag_uart_write
00042010 g     F .text	00000004 __sfp_lock_acquire
00040fb4 g     F .text	000000f8 memchr
0004218c g     F .text	000002d0 _free_r
00045354 g     F .text	000001a0 __call_exitprocs
00046f90 g     O .rwdata	00000004 __malloc_sbrk_base
000401b8 g     F .text	0000003c _start
00048a28 g     O .bss	00000004 _alt_tick_rate
00048a2c g     O .bss	00000004 _alt_nticks
000433c0 g     F .text	000000f4 read
00043790 g     F .text	00000060 alt_sys_init
00045224 g     F .text	00000130 __register_exitproc
00043cbc g     F .text	00000068 altera_avalon_jtag_uart_close
00042d44 g     F .text	00000028 __mulsi3
00045578 g       *ABS*	00000000 __ram_rwdata_start
00045530 g       *ABS*	00000000 __ram_rodata_start
00048a30 g     O .bss	00000028 __malloc_current_mallinfo
000437f0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00045088 g     F .text	000000d4 alt_get_fd
000429ec g     F .text	00000064 _close_r
000451a8 g     F .text	0000007c memcmp
000438b0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00048ce8 g       *ABS*	00000000 __alt_stack_base
00043900 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000419d8 g     F .text	00000174 __swsetup_r
00041f14 g     F .text	000000fc __sfp
00045978 g     O .rwdata	00000408 __malloc_av_
0004201c g     F .text	00000004 __sinit_lock_release
00042840 g     F .text	00000054 __sread
00044f74 g     F .text	00000114 alt_find_file
000444fc g     F .text	000000a0 alt_dev_llist_insert
00043330 g     F .text	00000020 __malloc_lock
00043534 g     F .text	000000b0 sbrk
00041b4c g     F .text	000001e8 _fflush_r
00048a08 g       *ABS*	00000000 __bss_start
00042764 g     F .text	000000dc memset
000401f4 g     F .text	00000034 main
00048a20 g     O .bss	00000004 alt_envp
00048a08 g     O .bss	00000004 __malloc_max_total_mem
00043850 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00042978 g     F .text	00000008 __sclose
00080000 g       *ABS*	00000000 __alt_heap_limit
00042b8c g     F .text	00000014 fclose
00048b58 g     O .bss	00000190 _atexit0
00040000 g       *ABS*	00000000 __alt_mem_onchip_data_memory
00040830 g     F .text	00000784 _malloc_r
00046fac g     O .rwdata	00000004 alt_errno
0004245c g     F .text	000000a8 _fwalk
00042050 g     F .text	0000013c _malloc_trim_r
00045530 g       *ABS*	00000000 __CTOR_END__
00045530 g       *ABS*	00000000 __flash_rodata_start
00045530 g       *ABS*	00000000 __DTOR_LIST__
0004375c g     F .text	00000034 alt_irq_init
000434b4 g     F .text	00000080 alt_release_fd
0004515c g     F .text	00000014 atexit
00042980 g     F .text	0000006c _write_r
00046f8c g     O .rwdata	00000004 _impure_ptr
00048a18 g     O .bss	00000004 alt_argc
000445f8 g     F .text	0000005c _do_dtors
00040020 g       .exceptions	00000000 alt_irq_entry
00042038 g     F .text	00000018 __fp_unlock_all
00046f98 g     O .rwdata	00000008 alt_fs_list
00040020 g       *ABS*	00000000 __ram_exceptions_start
00044670 g     F .text	00000050 alt_ic_isr_register
00046fc0 g       *ABS*	00000000 _edata
00048ce8 g       *ABS*	00000000 _end
000401b8 g       *ABS*	00000000 __ram_exceptions_end
00043d24 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0004475c g     F .text	000000a0 alt_ic_irq_disable
00042894 g     F .text	00000088 __swrite
00046f94 g     O .rwdata	00000004 __malloc_trim_threshold
00044ec4 g     F .text	00000020 altera_nios2_qsys_irq_init
00045170 g     F .text	00000038 exit
00042504 g     F .text	000000b8 _fwalk_reent
00080000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
00042014 g     F .text	00000004 __sfp_lock_release
000454f4 g     F .text	0000003c _exit
00044350 g     F .text	00000140 alt_alarm_start
000425bc g     F .text	000001a8 __smakebuf_r
000402c0 g     F .text	0000008c strlen
00044bd0 g     F .text	00000158 open
00044654 g     F .text	0000001c alt_icache_flush_all
00046fb4 g     O .rwdata	00000004 alt_priority_mask
000446c0 g     F .text	0000009c alt_ic_irq_enable
00046fb8 g     O .rwdata	00000008 alt_alarm_list
0004459c g     F .text	0000005c _do_ctors
00042dbc g     F .text	000000cc close
00043114 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
00042018 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00040000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40000:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40004:	08406e14 	ori	at,at,440
    jmp r1
   40008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400ec0 	call	400ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000306 	br	40098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   4008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)

00040094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   40094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   40098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   4009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400e8:	ef80083a 	eret

000400ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400ec:	defff904 	addi	sp,sp,-28
   400f0:	dfc00615 	stw	ra,24(sp)
   400f4:	df000515 	stw	fp,20(sp)
   400f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   400fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40100:	0005313a 	rdctl	r2,ipending
   40104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40114:	00800044 	movi	r2,1
   40118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4011c:	e0fffb17 	ldw	r3,-20(fp)
   40120:	e0bffc17 	ldw	r2,-16(fp)
   40124:	1884703a 	and	r2,r3,r2
   40128:	10001726 	beq	r2,zero,40188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4012c:	00c00174 	movhi	r3,5
   40130:	18e29604 	addi	r3,r3,-30120
   40134:	e0bffd17 	ldw	r2,-12(fp)
   40138:	100490fa 	slli	r2,r2,3
   4013c:	1885883a 	add	r2,r3,r2
   40140:	10c00017 	ldw	r3,0(r2)
   40144:	01000174 	movhi	r4,5
   40148:	21229604 	addi	r4,r4,-30120
   4014c:	e0bffd17 	ldw	r2,-12(fp)
   40150:	100490fa 	slli	r2,r2,3
   40154:	2085883a 	add	r2,r4,r2
   40158:	10800104 	addi	r2,r2,4
   4015c:	10800017 	ldw	r2,0(r2)
   40160:	1009883a 	mov	r4,r2
   40164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4016c:	0005313a 	rdctl	r2,ipending
   40170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   40178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   4017c:	e0bffb17 	ldw	r2,-20(fp)
   40180:	103fe31e 	bne	r2,zero,40110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   40184:	00000706 	br	401a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   40188:	e0bffc17 	ldw	r2,-16(fp)
   4018c:	1085883a 	add	r2,r2,r2
   40190:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40194:	e0bffd17 	ldw	r2,-12(fp)
   40198:	10800044 	addi	r2,r2,1
   4019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a0:	003fde06 	br	4011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   401a4:	e037883a 	mov	sp,fp
   401a8:	dfc00117 	ldw	ra,4(sp)
   401ac:	df000017 	ldw	fp,0(sp)
   401b0:	dec00204 	addi	sp,sp,8
   401b4:	f800283a 	ret

Disassembly of section .text:

000401b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   401b8:	06c00234 	movhi	sp,8
    ori sp, sp, %lo(__alt_stack_pointer)
   401bc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   401c0:	06800134 	movhi	gp,4
    ori gp, gp, %lo(_gp)
   401c4:	d6bbe214 	ori	gp,gp,61320
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   401c8:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   401cc:	10a28214 	ori	r2,r2,35336

    movhi r3, %hi(__bss_end)
   401d0:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
   401d4:	18e33a14 	ori	r3,r3,36072

    beq r2, r3, 1f
   401d8:	10c00326 	beq	r2,r3,401e8 <_start+0x30>

0:
    stw zero, (r2)
   401dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   401e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   401e4:	10fffd36 	bltu	r2,r3,401dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   401e8:	00431140 	call	43114 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   401ec:	00432b80 	call	432b8 <alt_main>

000401f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   401f0:	003fff06 	br	401f0 <alt_after_alt_main>

000401f4 <main>:
 */

#include <stdio.h>

int main()
{
   401f4:	defffe04 	addi	sp,sp,-8
   401f8:	dfc00115 	stw	ra,4(sp)
   401fc:	df000015 	stw	fp,0(sp)
   40200:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
   40204:	01000134 	movhi	r4,4
   40208:	21154c04 	addi	r4,r4,21808
   4020c:	00402ac0 	call	402ac <puts>

  return 0;
   40210:	0005883a 	mov	r2,zero
}
   40214:	e037883a 	mov	sp,fp
   40218:	dfc00117 	ldw	ra,4(sp)
   4021c:	df000017 	ldw	fp,0(sp)
   40220:	dec00204 	addi	sp,sp,8
   40224:	f800283a 	ret

00040228 <_puts_r>:
   40228:	defff604 	addi	sp,sp,-40
   4022c:	dc400815 	stw	r17,32(sp)
   40230:	2023883a 	mov	r17,r4
   40234:	2809883a 	mov	r4,r5
   40238:	dc000715 	stw	r16,28(sp)
   4023c:	dfc00915 	stw	ra,36(sp)
   40240:	2821883a 	mov	r16,r5
   40244:	00402c00 	call	402c0 <strlen>
   40248:	10c00044 	addi	r3,r2,1
   4024c:	d8800115 	stw	r2,4(sp)
   40250:	89400217 	ldw	r5,8(r17)
   40254:	00800134 	movhi	r2,4
   40258:	10955104 	addi	r2,r2,21828
   4025c:	d8800215 	stw	r2,8(sp)
   40260:	00800044 	movi	r2,1
   40264:	d8800315 	stw	r2,12(sp)
   40268:	8809883a 	mov	r4,r17
   4026c:	00800084 	movi	r2,2
   40270:	d9800404 	addi	r6,sp,16
   40274:	dc000015 	stw	r16,0(sp)
   40278:	d8c00615 	stw	r3,24(sp)
   4027c:	dec00415 	stw	sp,16(sp)
   40280:	d8800515 	stw	r2,20(sp)
   40284:	004034c0 	call	4034c <__sfvwrite_r>
   40288:	1000061e 	bne	r2,zero,402a4 <_puts_r+0x7c>
   4028c:	00800284 	movi	r2,10
   40290:	dfc00917 	ldw	ra,36(sp)
   40294:	dc400817 	ldw	r17,32(sp)
   40298:	dc000717 	ldw	r16,28(sp)
   4029c:	dec00a04 	addi	sp,sp,40
   402a0:	f800283a 	ret
   402a4:	00bfffc4 	movi	r2,-1
   402a8:	003ff906 	br	40290 <_puts_r+0x68>

000402ac <puts>:
   402ac:	00800134 	movhi	r2,4
   402b0:	109be304 	addi	r2,r2,28556
   402b4:	200b883a 	mov	r5,r4
   402b8:	11000017 	ldw	r4,0(r2)
   402bc:	00402281 	jmpi	40228 <_puts_r>

000402c0 <strlen>:
   402c0:	208000cc 	andi	r2,r4,3
   402c4:	10001f1e 	bne	r2,zero,40344 <strlen+0x84>
   402c8:	20800017 	ldw	r2,0(r4)
   402cc:	01ffbff4 	movhi	r7,65279
   402d0:	39ffbfc4 	addi	r7,r7,-257
   402d4:	01a02074 	movhi	r6,32897
   402d8:	31a02004 	addi	r6,r6,-32640
   402dc:	11c7883a 	add	r3,r2,r7
   402e0:	0084303a 	nor	r2,zero,r2
   402e4:	1886703a 	and	r3,r3,r2
   402e8:	1986703a 	and	r3,r3,r6
   402ec:	2005883a 	mov	r2,r4
   402f0:	1800101e 	bne	r3,zero,40334 <strlen+0x74>
   402f4:	10800104 	addi	r2,r2,4
   402f8:	10c00017 	ldw	r3,0(r2)
   402fc:	19cb883a 	add	r5,r3,r7
   40300:	00c6303a 	nor	r3,zero,r3
   40304:	28c6703a 	and	r3,r5,r3
   40308:	1986703a 	and	r3,r3,r6
   4030c:	1800091e 	bne	r3,zero,40334 <strlen+0x74>
   40310:	10800104 	addi	r2,r2,4
   40314:	10c00017 	ldw	r3,0(r2)
   40318:	19cb883a 	add	r5,r3,r7
   4031c:	00c6303a 	nor	r3,zero,r3
   40320:	28c6703a 	and	r3,r5,r3
   40324:	1986703a 	and	r3,r3,r6
   40328:	183ff226 	beq	r3,zero,402f4 <strlen+0x34>
   4032c:	00000106 	br	40334 <strlen+0x74>
   40330:	10800044 	addi	r2,r2,1
   40334:	10c00007 	ldb	r3,0(r2)
   40338:	183ffd1e 	bne	r3,zero,40330 <strlen+0x70>
   4033c:	1105c83a 	sub	r2,r2,r4
   40340:	f800283a 	ret
   40344:	2005883a 	mov	r2,r4
   40348:	003ffa06 	br	40334 <strlen+0x74>

0004034c <__sfvwrite_r>:
   4034c:	30800217 	ldw	r2,8(r6)
   40350:	defff504 	addi	sp,sp,-44
   40354:	dd400615 	stw	r21,24(sp)
   40358:	dd000515 	stw	r20,20(sp)
   4035c:	dc000115 	stw	r16,4(sp)
   40360:	dfc00a15 	stw	ra,40(sp)
   40364:	df000915 	stw	fp,36(sp)
   40368:	ddc00815 	stw	r23,32(sp)
   4036c:	dd800715 	stw	r22,28(sp)
   40370:	dcc00415 	stw	r19,16(sp)
   40374:	dc800315 	stw	r18,12(sp)
   40378:	dc400215 	stw	r17,8(sp)
   4037c:	3029883a 	mov	r20,r6
   40380:	202b883a 	mov	r21,r4
   40384:	2821883a 	mov	r16,r5
   40388:	10002126 	beq	r2,zero,40410 <__sfvwrite_r+0xc4>
   4038c:	2880030b 	ldhu	r2,12(r5)
   40390:	10c0020c 	andi	r3,r2,8
   40394:	18ffffcc 	andi	r3,r3,65535
   40398:	18e0001c 	xori	r3,r3,32768
   4039c:	18e00004 	addi	r3,r3,-32768
   403a0:	18002826 	beq	r3,zero,40444 <__sfvwrite_r+0xf8>
   403a4:	28c00417 	ldw	r3,16(r5)
   403a8:	18002626 	beq	r3,zero,40444 <__sfvwrite_r+0xf8>
   403ac:	10c0008c 	andi	r3,r2,2
   403b0:	18ffffcc 	andi	r3,r3,65535
   403b4:	18e0001c 	xori	r3,r3,32768
   403b8:	18e00004 	addi	r3,r3,-32768
   403bc:	a4400017 	ldw	r17,0(r20)
   403c0:	18002b26 	beq	r3,zero,40470 <__sfvwrite_r+0x124>
   403c4:	0027883a 	mov	r19,zero
   403c8:	0025883a 	mov	r18,zero
   403cc:	05810004 	movi	r22,1024
   403d0:	980d883a 	mov	r6,r19
   403d4:	a809883a 	mov	r4,r21
   403d8:	90004f26 	beq	r18,zero,40518 <__sfvwrite_r+0x1cc>
   403dc:	900f883a 	mov	r7,r18
   403e0:	81400717 	ldw	r5,28(r16)
   403e4:	b480012e 	bgeu	r22,r18,403ec <__sfvwrite_r+0xa0>
   403e8:	01c10004 	movi	r7,1024
   403ec:	80800917 	ldw	r2,36(r16)
   403f0:	103ee83a 	callr	r2
   403f4:	0080540e 	bge	zero,r2,40548 <__sfvwrite_r+0x1fc>
   403f8:	a0c00217 	ldw	r3,8(r20)
   403fc:	98a7883a 	add	r19,r19,r2
   40400:	90a5c83a 	sub	r18,r18,r2
   40404:	1885c83a 	sub	r2,r3,r2
   40408:	a0800215 	stw	r2,8(r20)
   4040c:	103ff01e 	bne	r2,zero,403d0 <__sfvwrite_r+0x84>
   40410:	0005883a 	mov	r2,zero
   40414:	dfc00a17 	ldw	ra,40(sp)
   40418:	df000917 	ldw	fp,36(sp)
   4041c:	ddc00817 	ldw	r23,32(sp)
   40420:	dd800717 	ldw	r22,28(sp)
   40424:	dd400617 	ldw	r21,24(sp)
   40428:	dd000517 	ldw	r20,20(sp)
   4042c:	dcc00417 	ldw	r19,16(sp)
   40430:	dc800317 	ldw	r18,12(sp)
   40434:	dc400217 	ldw	r17,8(sp)
   40438:	dc000117 	ldw	r16,4(sp)
   4043c:	dec00b04 	addi	sp,sp,44
   40440:	f800283a 	ret
   40444:	a809883a 	mov	r4,r21
   40448:	800b883a 	mov	r5,r16
   4044c:	00419d80 	call	419d8 <__swsetup_r>
   40450:	1000f01e 	bne	r2,zero,40814 <__sfvwrite_r+0x4c8>
   40454:	8080030b 	ldhu	r2,12(r16)
   40458:	a4400017 	ldw	r17,0(r20)
   4045c:	10c0008c 	andi	r3,r2,2
   40460:	18ffffcc 	andi	r3,r3,65535
   40464:	18e0001c 	xori	r3,r3,32768
   40468:	18e00004 	addi	r3,r3,-32768
   4046c:	183fd51e 	bne	r3,zero,403c4 <__sfvwrite_r+0x78>
   40470:	10c0004c 	andi	r3,r2,1
   40474:	002d883a 	mov	r22,zero
   40478:	1800381e 	bne	r3,zero,4055c <__sfvwrite_r+0x210>
   4047c:	0025883a 	mov	r18,zero
   40480:	90002126 	beq	r18,zero,40508 <__sfvwrite_r+0x1bc>
   40484:	10c0800c 	andi	r3,r2,512
   40488:	18ffffcc 	andi	r3,r3,65535
   4048c:	18e0001c 	xori	r3,r3,32768
   40490:	18e00004 	addi	r3,r3,-32768
   40494:	84c00217 	ldw	r19,8(r16)
   40498:	18006b26 	beq	r3,zero,40648 <__sfvwrite_r+0x2fc>
   4049c:	980f883a 	mov	r7,r19
   404a0:	94c08636 	bltu	r18,r19,406bc <__sfvwrite_r+0x370>
   404a4:	10c1200c 	andi	r3,r2,1152
   404a8:	18009f1e 	bne	r3,zero,40728 <__sfvwrite_r+0x3dc>
   404ac:	81000017 	ldw	r4,0(r16)
   404b0:	982f883a 	mov	r23,r19
   404b4:	9039883a 	mov	fp,r18
   404b8:	9027883a 	mov	r19,r18
   404bc:	380d883a 	mov	r6,r7
   404c0:	b00b883a 	mov	r5,r22
   404c4:	d9c00015 	stw	r7,0(sp)
   404c8:	00411ec0 	call	411ec <memmove>
   404cc:	d9c00017 	ldw	r7,0(sp)
   404d0:	81000217 	ldw	r4,8(r16)
   404d4:	80800017 	ldw	r2,0(r16)
   404d8:	25efc83a 	sub	r23,r4,r23
   404dc:	11cf883a 	add	r7,r2,r7
   404e0:	85c00215 	stw	r23,8(r16)
   404e4:	81c00015 	stw	r7,0(r16)
   404e8:	a0800217 	ldw	r2,8(r20)
   404ec:	b72d883a 	add	r22,r22,fp
   404f0:	9725c83a 	sub	r18,r18,fp
   404f4:	14e7c83a 	sub	r19,r2,r19
   404f8:	a4c00215 	stw	r19,8(r20)
   404fc:	983fc426 	beq	r19,zero,40410 <__sfvwrite_r+0xc4>
   40500:	8080030b 	ldhu	r2,12(r16)
   40504:	903fdf1e 	bne	r18,zero,40484 <__sfvwrite_r+0x138>
   40508:	8d800017 	ldw	r22,0(r17)
   4050c:	8c800117 	ldw	r18,4(r17)
   40510:	8c400204 	addi	r17,r17,8
   40514:	003fda06 	br	40480 <__sfvwrite_r+0x134>
   40518:	8cc00017 	ldw	r19,0(r17)
   4051c:	8c800117 	ldw	r18,4(r17)
   40520:	8c400204 	addi	r17,r17,8
   40524:	003faa06 	br	403d0 <__sfvwrite_r+0x84>
   40528:	00413780 	call	41378 <_realloc_r>
   4052c:	102f883a 	mov	r23,r2
   40530:	10009f1e 	bne	r2,zero,407b0 <__sfvwrite_r+0x464>
   40534:	81400417 	ldw	r5,16(r16)
   40538:	a809883a 	mov	r4,r21
   4053c:	004218c0 	call	4218c <_free_r>
   40540:	00800304 	movi	r2,12
   40544:	a8800015 	stw	r2,0(r21)
   40548:	80c0030b 	ldhu	r3,12(r16)
   4054c:	00bfffc4 	movi	r2,-1
   40550:	18c01014 	ori	r3,r3,64
   40554:	80c0030d 	sth	r3,12(r16)
   40558:	003fae06 	br	40414 <__sfvwrite_r+0xc8>
   4055c:	0007883a 	mov	r3,zero
   40560:	0039883a 	mov	fp,zero
   40564:	0025883a 	mov	r18,zero
   40568:	90001e26 	beq	r18,zero,405e4 <__sfvwrite_r+0x298>
   4056c:	18006526 	beq	r3,zero,40704 <__sfvwrite_r+0x3b8>
   40570:	b02f883a 	mov	r23,r22
   40574:	9580012e 	bgeu	r18,r22,4057c <__sfvwrite_r+0x230>
   40578:	902f883a 	mov	r23,r18
   4057c:	81000017 	ldw	r4,0(r16)
   40580:	80800417 	ldw	r2,16(r16)
   40584:	84c00217 	ldw	r19,8(r16)
   40588:	81c00517 	ldw	r7,20(r16)
   4058c:	1100022e 	bgeu	r2,r4,40598 <__sfvwrite_r+0x24c>
   40590:	99e7883a 	add	r19,r19,r7
   40594:	9dc01816 	blt	r19,r23,405f8 <__sfvwrite_r+0x2ac>
   40598:	b9c03b16 	blt	r23,r7,40688 <__sfvwrite_r+0x33c>
   4059c:	80800917 	ldw	r2,36(r16)
   405a0:	81400717 	ldw	r5,28(r16)
   405a4:	a809883a 	mov	r4,r21
   405a8:	d8c00015 	stw	r3,0(sp)
   405ac:	e00d883a 	mov	r6,fp
   405b0:	103ee83a 	callr	r2
   405b4:	1027883a 	mov	r19,r2
   405b8:	d8c00017 	ldw	r3,0(sp)
   405bc:	00bfe20e 	bge	zero,r2,40548 <__sfvwrite_r+0x1fc>
   405c0:	b4edc83a 	sub	r22,r22,r19
   405c4:	b0001a26 	beq	r22,zero,40630 <__sfvwrite_r+0x2e4>
   405c8:	a0800217 	ldw	r2,8(r20)
   405cc:	e4f9883a 	add	fp,fp,r19
   405d0:	94e5c83a 	sub	r18,r18,r19
   405d4:	14e7c83a 	sub	r19,r2,r19
   405d8:	a4c00215 	stw	r19,8(r20)
   405dc:	983f8c26 	beq	r19,zero,40410 <__sfvwrite_r+0xc4>
   405e0:	903fe21e 	bne	r18,zero,4056c <__sfvwrite_r+0x220>
   405e4:	8f000017 	ldw	fp,0(r17)
   405e8:	8c800117 	ldw	r18,4(r17)
   405ec:	0007883a 	mov	r3,zero
   405f0:	8c400204 	addi	r17,r17,8
   405f4:	003fdc06 	br	40568 <__sfvwrite_r+0x21c>
   405f8:	e00b883a 	mov	r5,fp
   405fc:	980d883a 	mov	r6,r19
   40600:	d8c00015 	stw	r3,0(sp)
   40604:	00411ec0 	call	411ec <memmove>
   40608:	80800017 	ldw	r2,0(r16)
   4060c:	a809883a 	mov	r4,r21
   40610:	800b883a 	mov	r5,r16
   40614:	14c5883a 	add	r2,r2,r19
   40618:	80800015 	stw	r2,0(r16)
   4061c:	0041b4c0 	call	41b4c <_fflush_r>
   40620:	d8c00017 	ldw	r3,0(sp)
   40624:	103fc81e 	bne	r2,zero,40548 <__sfvwrite_r+0x1fc>
   40628:	b4edc83a 	sub	r22,r22,r19
   4062c:	b03fe61e 	bne	r22,zero,405c8 <__sfvwrite_r+0x27c>
   40630:	a809883a 	mov	r4,r21
   40634:	800b883a 	mov	r5,r16
   40638:	0041b4c0 	call	41b4c <_fflush_r>
   4063c:	103fc21e 	bne	r2,zero,40548 <__sfvwrite_r+0x1fc>
   40640:	0007883a 	mov	r3,zero
   40644:	003fe006 	br	405c8 <__sfvwrite_r+0x27c>
   40648:	81000017 	ldw	r4,0(r16)
   4064c:	80800417 	ldw	r2,16(r16)
   40650:	1100022e 	bgeu	r2,r4,4065c <__sfvwrite_r+0x310>
   40654:	9839883a 	mov	fp,r19
   40658:	9c806036 	bltu	r19,r18,407dc <__sfvwrite_r+0x490>
   4065c:	81c00517 	ldw	r7,20(r16)
   40660:	91c01c36 	bltu	r18,r7,406d4 <__sfvwrite_r+0x388>
   40664:	80800917 	ldw	r2,36(r16)
   40668:	81400717 	ldw	r5,28(r16)
   4066c:	a809883a 	mov	r4,r21
   40670:	b00d883a 	mov	r6,r22
   40674:	103ee83a 	callr	r2
   40678:	1027883a 	mov	r19,r2
   4067c:	00bfb20e 	bge	zero,r2,40548 <__sfvwrite_r+0x1fc>
   40680:	1039883a 	mov	fp,r2
   40684:	003f9806 	br	404e8 <__sfvwrite_r+0x19c>
   40688:	b80d883a 	mov	r6,r23
   4068c:	e00b883a 	mov	r5,fp
   40690:	d8c00015 	stw	r3,0(sp)
   40694:	00411ec0 	call	411ec <memmove>
   40698:	80800217 	ldw	r2,8(r16)
   4069c:	81000017 	ldw	r4,0(r16)
   406a0:	b827883a 	mov	r19,r23
   406a4:	15c5c83a 	sub	r2,r2,r23
   406a8:	25ef883a 	add	r23,r4,r23
   406ac:	80800215 	stw	r2,8(r16)
   406b0:	85c00015 	stw	r23,0(r16)
   406b4:	d8c00017 	ldw	r3,0(sp)
   406b8:	003fc106 	br	405c0 <__sfvwrite_r+0x274>
   406bc:	81000017 	ldw	r4,0(r16)
   406c0:	902f883a 	mov	r23,r18
   406c4:	9039883a 	mov	fp,r18
   406c8:	9027883a 	mov	r19,r18
   406cc:	900f883a 	mov	r7,r18
   406d0:	003f7a06 	br	404bc <__sfvwrite_r+0x170>
   406d4:	b00b883a 	mov	r5,r22
   406d8:	900d883a 	mov	r6,r18
   406dc:	00411ec0 	call	411ec <memmove>
   406e0:	80c00217 	ldw	r3,8(r16)
   406e4:	80800017 	ldw	r2,0(r16)
   406e8:	9027883a 	mov	r19,r18
   406ec:	1c87c83a 	sub	r3,r3,r18
   406f0:	1485883a 	add	r2,r2,r18
   406f4:	80c00215 	stw	r3,8(r16)
   406f8:	80800015 	stw	r2,0(r16)
   406fc:	9039883a 	mov	fp,r18
   40700:	003f7906 	br	404e8 <__sfvwrite_r+0x19c>
   40704:	e009883a 	mov	r4,fp
   40708:	01400284 	movi	r5,10
   4070c:	900d883a 	mov	r6,r18
   40710:	0040fb40 	call	40fb4 <memchr>
   40714:	10003c26 	beq	r2,zero,40808 <__sfvwrite_r+0x4bc>
   40718:	15800044 	addi	r22,r2,1
   4071c:	b72dc83a 	sub	r22,r22,fp
   40720:	00c00044 	movi	r3,1
   40724:	003f9206 	br	40570 <__sfvwrite_r+0x224>
   40728:	81000517 	ldw	r4,20(r16)
   4072c:	81400417 	ldw	r5,16(r16)
   40730:	80c00017 	ldw	r3,0(r16)
   40734:	210d883a 	add	r6,r4,r4
   40738:	3109883a 	add	r4,r6,r4
   4073c:	2026d7fa 	srli	r19,r4,31
   40740:	1979c83a 	sub	fp,r3,r5
   40744:	e1800044 	addi	r6,fp,1
   40748:	9909883a 	add	r4,r19,r4
   4074c:	2027d07a 	srai	r19,r4,1
   40750:	3489883a 	add	r4,r6,r18
   40754:	980d883a 	mov	r6,r19
   40758:	9900022e 	bgeu	r19,r4,40764 <__sfvwrite_r+0x418>
   4075c:	2027883a 	mov	r19,r4
   40760:	200d883a 	mov	r6,r4
   40764:	1081000c 	andi	r2,r2,1024
   40768:	10bfffcc 	andi	r2,r2,65535
   4076c:	10a0001c 	xori	r2,r2,32768
   40770:	10a00004 	addi	r2,r2,-32768
   40774:	a809883a 	mov	r4,r21
   40778:	103f6b26 	beq	r2,zero,40528 <__sfvwrite_r+0x1dc>
   4077c:	300b883a 	mov	r5,r6
   40780:	00408300 	call	40830 <_malloc_r>
   40784:	102f883a 	mov	r23,r2
   40788:	103f6d26 	beq	r2,zero,40540 <__sfvwrite_r+0x1f4>
   4078c:	81400417 	ldw	r5,16(r16)
   40790:	1009883a 	mov	r4,r2
   40794:	e00d883a 	mov	r6,fp
   40798:	00410ac0 	call	410ac <memcpy>
   4079c:	8080030b 	ldhu	r2,12(r16)
   407a0:	00fedfc4 	movi	r3,-1153
   407a4:	10c4703a 	and	r2,r2,r3
   407a8:	10802014 	ori	r2,r2,128
   407ac:	8080030d 	sth	r2,12(r16)
   407b0:	bf09883a 	add	r4,r23,fp
   407b4:	9f07c83a 	sub	r3,r19,fp
   407b8:	85c00415 	stw	r23,16(r16)
   407bc:	84c00515 	stw	r19,20(r16)
   407c0:	81000015 	stw	r4,0(r16)
   407c4:	902f883a 	mov	r23,r18
   407c8:	80c00215 	stw	r3,8(r16)
   407cc:	9039883a 	mov	fp,r18
   407d0:	9027883a 	mov	r19,r18
   407d4:	900f883a 	mov	r7,r18
   407d8:	003f3806 	br	404bc <__sfvwrite_r+0x170>
   407dc:	b00b883a 	mov	r5,r22
   407e0:	980d883a 	mov	r6,r19
   407e4:	00411ec0 	call	411ec <memmove>
   407e8:	80800017 	ldw	r2,0(r16)
   407ec:	a809883a 	mov	r4,r21
   407f0:	800b883a 	mov	r5,r16
   407f4:	14c5883a 	add	r2,r2,r19
   407f8:	80800015 	stw	r2,0(r16)
   407fc:	0041b4c0 	call	41b4c <_fflush_r>
   40800:	103f3926 	beq	r2,zero,404e8 <__sfvwrite_r+0x19c>
   40804:	003f5006 	br	40548 <__sfvwrite_r+0x1fc>
   40808:	95800044 	addi	r22,r18,1
   4080c:	00c00044 	movi	r3,1
   40810:	003f5706 	br	40570 <__sfvwrite_r+0x224>
   40814:	80c0030b 	ldhu	r3,12(r16)
   40818:	00bfffc4 	movi	r2,-1
   4081c:	18c01014 	ori	r3,r3,64
   40820:	80c0030d 	sth	r3,12(r16)
   40824:	00c00244 	movi	r3,9
   40828:	a8c00015 	stw	r3,0(r21)
   4082c:	003ef906 	br	40414 <__sfvwrite_r+0xc8>

00040830 <_malloc_r>:
   40830:	defff604 	addi	sp,sp,-40
   40834:	dc800215 	stw	r18,8(sp)
   40838:	dfc00915 	stw	ra,36(sp)
   4083c:	df000815 	stw	fp,32(sp)
   40840:	ddc00715 	stw	r23,28(sp)
   40844:	dd800615 	stw	r22,24(sp)
   40848:	dd400515 	stw	r21,20(sp)
   4084c:	dd000415 	stw	r20,16(sp)
   40850:	dcc00315 	stw	r19,12(sp)
   40854:	dc400115 	stw	r17,4(sp)
   40858:	dc000015 	stw	r16,0(sp)
   4085c:	288002c4 	addi	r2,r5,11
   40860:	00c00584 	movi	r3,22
   40864:	2025883a 	mov	r18,r4
   40868:	18802b2e 	bgeu	r3,r2,40918 <_malloc_r+0xe8>
   4086c:	047ffe04 	movi	r17,-8
   40870:	1462703a 	and	r17,r2,r17
   40874:	88002a16 	blt	r17,zero,40920 <_malloc_r+0xf0>
   40878:	89402936 	bltu	r17,r5,40920 <_malloc_r+0xf0>
   4087c:	9009883a 	mov	r4,r18
   40880:	00433300 	call	43330 <__malloc_lock>
   40884:	00807dc4 	movi	r2,503
   40888:	14402936 	bltu	r2,r17,40930 <_malloc_r+0x100>
   4088c:	8808d0fa 	srli	r4,r17,3
   40890:	04c00134 	movhi	r19,4
   40894:	9cd65e04 	addi	r19,r19,22904
   40898:	2105883a 	add	r2,r4,r4
   4089c:	1085883a 	add	r2,r2,r2
   408a0:	1085883a 	add	r2,r2,r2
   408a4:	9885883a 	add	r2,r19,r2
   408a8:	14000317 	ldw	r16,12(r2)
   408ac:	80815526 	beq	r16,r2,40e04 <_malloc_r+0x5d4>
   408b0:	81000117 	ldw	r4,4(r16)
   408b4:	00bfff04 	movi	r2,-4
   408b8:	80c00317 	ldw	r3,12(r16)
   408bc:	2084703a 	and	r2,r4,r2
   408c0:	8085883a 	add	r2,r16,r2
   408c4:	11800117 	ldw	r6,4(r2)
   408c8:	81400217 	ldw	r5,8(r16)
   408cc:	9009883a 	mov	r4,r18
   408d0:	31800054 	ori	r6,r6,1
   408d4:	11800115 	stw	r6,4(r2)
   408d8:	28c00315 	stw	r3,12(r5)
   408dc:	19400215 	stw	r5,8(r3)
   408e0:	00433500 	call	43350 <__malloc_unlock>
   408e4:	80800204 	addi	r2,r16,8
   408e8:	dfc00917 	ldw	ra,36(sp)
   408ec:	df000817 	ldw	fp,32(sp)
   408f0:	ddc00717 	ldw	r23,28(sp)
   408f4:	dd800617 	ldw	r22,24(sp)
   408f8:	dd400517 	ldw	r21,20(sp)
   408fc:	dd000417 	ldw	r20,16(sp)
   40900:	dcc00317 	ldw	r19,12(sp)
   40904:	dc800217 	ldw	r18,8(sp)
   40908:	dc400117 	ldw	r17,4(sp)
   4090c:	dc000017 	ldw	r16,0(sp)
   40910:	dec00a04 	addi	sp,sp,40
   40914:	f800283a 	ret
   40918:	04400404 	movi	r17,16
   4091c:	897fd72e 	bgeu	r17,r5,4087c <_malloc_r+0x4c>
   40920:	00800304 	movi	r2,12
   40924:	90800015 	stw	r2,0(r18)
   40928:	0005883a 	mov	r2,zero
   4092c:	003fee06 	br	408e8 <_malloc_r+0xb8>
   40930:	8808d27a 	srli	r4,r17,9
   40934:	20007126 	beq	r4,zero,40afc <_malloc_r+0x2cc>
   40938:	00800104 	movi	r2,4
   4093c:	1100eb36 	bltu	r2,r4,40cec <_malloc_r+0x4bc>
   40940:	8808d1ba 	srli	r4,r17,6
   40944:	21000e04 	addi	r4,r4,56
   40948:	210b883a 	add	r5,r4,r4
   4094c:	294b883a 	add	r5,r5,r5
   40950:	294b883a 	add	r5,r5,r5
   40954:	04c00134 	movhi	r19,4
   40958:	9cd65e04 	addi	r19,r19,22904
   4095c:	994b883a 	add	r5,r19,r5
   40960:	2c000317 	ldw	r16,12(r5)
   40964:	2c000e26 	beq	r5,r16,409a0 <_malloc_r+0x170>
   40968:	80c00117 	ldw	r3,4(r16)
   4096c:	01ffff04 	movi	r7,-4
   40970:	018003c4 	movi	r6,15
   40974:	19c6703a 	and	r3,r3,r7
   40978:	1c45c83a 	sub	r2,r3,r17
   4097c:	30800716 	blt	r6,r2,4099c <_malloc_r+0x16c>
   40980:	1000610e 	bge	r2,zero,40b08 <_malloc_r+0x2d8>
   40984:	84000317 	ldw	r16,12(r16)
   40988:	2c000526 	beq	r5,r16,409a0 <_malloc_r+0x170>
   4098c:	80c00117 	ldw	r3,4(r16)
   40990:	19c6703a 	and	r3,r3,r7
   40994:	1c45c83a 	sub	r2,r3,r17
   40998:	30bff90e 	bge	r6,r2,40980 <_malloc_r+0x150>
   4099c:	213fffc4 	addi	r4,r4,-1
   409a0:	21000044 	addi	r4,r4,1
   409a4:	9c000417 	ldw	r16,16(r19)
   409a8:	00c00134 	movhi	r3,4
   409ac:	18d65e04 	addi	r3,r3,22904
   409b0:	1a400204 	addi	r9,r3,8
   409b4:	8240ff26 	beq	r16,r9,40db4 <_malloc_r+0x584>
   409b8:	81400117 	ldw	r5,4(r16)
   409bc:	00bfff04 	movi	r2,-4
   409c0:	018003c4 	movi	r6,15
   409c4:	2884703a 	and	r2,r5,r2
   409c8:	144bc83a 	sub	r5,r2,r17
   409cc:	3140ea16 	blt	r6,r5,40d78 <_malloc_r+0x548>
   409d0:	1a400515 	stw	r9,20(r3)
   409d4:	1a400415 	stw	r9,16(r3)
   409d8:	2800570e 	bge	r5,zero,40b38 <_malloc_r+0x308>
   409dc:	01407fc4 	movi	r5,511
   409e0:	2880ca36 	bltu	r5,r2,40d0c <_malloc_r+0x4dc>
   409e4:	1004d0fa 	srli	r2,r2,3
   409e8:	02000044 	movi	r8,1
   409ec:	19c00117 	ldw	r7,4(r3)
   409f0:	108b883a 	add	r5,r2,r2
   409f4:	294b883a 	add	r5,r5,r5
   409f8:	1005d0ba 	srai	r2,r2,2
   409fc:	294b883a 	add	r5,r5,r5
   40a00:	28cb883a 	add	r5,r5,r3
   40a04:	29800217 	ldw	r6,8(r5)
   40a08:	4084983a 	sll	r2,r8,r2
   40a0c:	81400315 	stw	r5,12(r16)
   40a10:	81800215 	stw	r6,8(r16)
   40a14:	11c4b03a 	or	r2,r2,r7
   40a18:	18800115 	stw	r2,4(r3)
   40a1c:	2c000215 	stw	r16,8(r5)
   40a20:	34000315 	stw	r16,12(r6)
   40a24:	200bd0ba 	srai	r5,r4,2
   40a28:	00c00044 	movi	r3,1
   40a2c:	194a983a 	sll	r5,r3,r5
   40a30:	11404936 	bltu	r2,r5,40b58 <_malloc_r+0x328>
   40a34:	1146703a 	and	r3,r2,r5
   40a38:	18000a1e 	bne	r3,zero,40a64 <_malloc_r+0x234>
   40a3c:	00ffff04 	movi	r3,-4
   40a40:	294b883a 	add	r5,r5,r5
   40a44:	20c8703a 	and	r4,r4,r3
   40a48:	1146703a 	and	r3,r2,r5
   40a4c:	21000104 	addi	r4,r4,4
   40a50:	1800041e 	bne	r3,zero,40a64 <_malloc_r+0x234>
   40a54:	294b883a 	add	r5,r5,r5
   40a58:	1146703a 	and	r3,r2,r5
   40a5c:	21000104 	addi	r4,r4,4
   40a60:	183ffc26 	beq	r3,zero,40a54 <_malloc_r+0x224>
   40a64:	023fff04 	movi	r8,-4
   40a68:	01c003c4 	movi	r7,15
   40a6c:	2105883a 	add	r2,r4,r4
   40a70:	1085883a 	add	r2,r2,r2
   40a74:	1085883a 	add	r2,r2,r2
   40a78:	9899883a 	add	r12,r19,r2
   40a7c:	62800304 	addi	r10,r12,12
   40a80:	2017883a 	mov	r11,r4
   40a84:	54000017 	ldw	r16,0(r10)
   40a88:	51bffd04 	addi	r6,r10,-12
   40a8c:	8180041e 	bne	r16,r6,40aa0 <_malloc_r+0x270>
   40a90:	0000ca06 	br	40dbc <_malloc_r+0x58c>
   40a94:	10001c0e 	bge	r2,zero,40b08 <_malloc_r+0x2d8>
   40a98:	84000317 	ldw	r16,12(r16)
   40a9c:	8180c726 	beq	r16,r6,40dbc <_malloc_r+0x58c>
   40aa0:	80c00117 	ldw	r3,4(r16)
   40aa4:	1a06703a 	and	r3,r3,r8
   40aa8:	1c45c83a 	sub	r2,r3,r17
   40aac:	38bff90e 	bge	r7,r2,40a94 <_malloc_r+0x264>
   40ab0:	81000317 	ldw	r4,12(r16)
   40ab4:	81400217 	ldw	r5,8(r16)
   40ab8:	8447883a 	add	r3,r16,r17
   40abc:	8c400054 	ori	r17,r17,1
   40ac0:	29000315 	stw	r4,12(r5)
   40ac4:	21400215 	stw	r5,8(r4)
   40ac8:	84400115 	stw	r17,4(r16)
   40acc:	1889883a 	add	r4,r3,r2
   40ad0:	11400054 	ori	r5,r2,1
   40ad4:	98c00515 	stw	r3,20(r19)
   40ad8:	98c00415 	stw	r3,16(r19)
   40adc:	20800015 	stw	r2,0(r4)
   40ae0:	1a400315 	stw	r9,12(r3)
   40ae4:	1a400215 	stw	r9,8(r3)
   40ae8:	19400115 	stw	r5,4(r3)
   40aec:	9009883a 	mov	r4,r18
   40af0:	00433500 	call	43350 <__malloc_unlock>
   40af4:	80800204 	addi	r2,r16,8
   40af8:	003f7b06 	br	408e8 <_malloc_r+0xb8>
   40afc:	8808d0fa 	srli	r4,r17,3
   40b00:	210b883a 	add	r5,r4,r4
   40b04:	003f9106 	br	4094c <_malloc_r+0x11c>
   40b08:	80c7883a 	add	r3,r16,r3
   40b0c:	19400117 	ldw	r5,4(r3)
   40b10:	80800317 	ldw	r2,12(r16)
   40b14:	81000217 	ldw	r4,8(r16)
   40b18:	29400054 	ori	r5,r5,1
   40b1c:	19400115 	stw	r5,4(r3)
   40b20:	20800315 	stw	r2,12(r4)
   40b24:	11000215 	stw	r4,8(r2)
   40b28:	9009883a 	mov	r4,r18
   40b2c:	00433500 	call	43350 <__malloc_unlock>
   40b30:	80800204 	addi	r2,r16,8
   40b34:	003f6c06 	br	408e8 <_malloc_r+0xb8>
   40b38:	8085883a 	add	r2,r16,r2
   40b3c:	10c00117 	ldw	r3,4(r2)
   40b40:	9009883a 	mov	r4,r18
   40b44:	18c00054 	ori	r3,r3,1
   40b48:	10c00115 	stw	r3,4(r2)
   40b4c:	00433500 	call	43350 <__malloc_unlock>
   40b50:	80800204 	addi	r2,r16,8
   40b54:	003f6406 	br	408e8 <_malloc_r+0xb8>
   40b58:	9c000217 	ldw	r16,8(r19)
   40b5c:	00bfff04 	movi	r2,-4
   40b60:	85400117 	ldw	r21,4(r16)
   40b64:	a8aa703a 	and	r21,r21,r2
   40b68:	ac400336 	bltu	r21,r17,40b78 <_malloc_r+0x348>
   40b6c:	ac45c83a 	sub	r2,r21,r17
   40b70:	00c003c4 	movi	r3,15
   40b74:	18805316 	blt	r3,r2,40cc4 <_malloc_r+0x494>
   40b78:	d5e6a217 	ldw	r23,-25976(gp)
   40b7c:	d0e00217 	ldw	r3,-32760(gp)
   40b80:	00bfffc4 	movi	r2,-1
   40b84:	8579883a 	add	fp,r16,r21
   40b88:	8def883a 	add	r23,r17,r23
   40b8c:	1880d226 	beq	r3,r2,40ed8 <_malloc_r+0x6a8>
   40b90:	bdc403c4 	addi	r23,r23,4111
   40b94:	00bc0004 	movi	r2,-4096
   40b98:	b8ae703a 	and	r23,r23,r2
   40b9c:	9009883a 	mov	r4,r18
   40ba0:	b80b883a 	mov	r5,r23
   40ba4:	00419740 	call	41974 <_sbrk_r>
   40ba8:	1029883a 	mov	r20,r2
   40bac:	00bfffc4 	movi	r2,-1
   40bb0:	a080d126 	beq	r20,r2,40ef8 <_malloc_r+0x6c8>
   40bb4:	a7009f36 	bltu	r20,fp,40e34 <_malloc_r+0x604>
   40bb8:	05800174 	movhi	r22,5
   40bbc:	b5a28c04 	addi	r22,r22,-30160
   40bc0:	b0800017 	ldw	r2,0(r22)
   40bc4:	b885883a 	add	r2,r23,r2
   40bc8:	b0800015 	stw	r2,0(r22)
   40bcc:	e500cf26 	beq	fp,r20,40f0c <_malloc_r+0x6dc>
   40bd0:	d1200217 	ldw	r4,-32760(gp)
   40bd4:	00ffffc4 	movi	r3,-1
   40bd8:	20c0e026 	beq	r4,r3,40f5c <_malloc_r+0x72c>
   40bdc:	a739c83a 	sub	fp,r20,fp
   40be0:	1705883a 	add	r2,r2,fp
   40be4:	b0800015 	stw	r2,0(r22)
   40be8:	a08001cc 	andi	r2,r20,7
   40bec:	1000a526 	beq	r2,zero,40e84 <_malloc_r+0x654>
   40bf0:	a0a9c83a 	sub	r20,r20,r2
   40bf4:	00c40204 	movi	r3,4104
   40bf8:	a5000204 	addi	r20,r20,8
   40bfc:	1885c83a 	sub	r2,r3,r2
   40c00:	a5c7883a 	add	r3,r20,r23
   40c04:	18c3ffcc 	andi	r3,r3,4095
   40c08:	10efc83a 	sub	r23,r2,r3
   40c0c:	9009883a 	mov	r4,r18
   40c10:	b80b883a 	mov	r5,r23
   40c14:	00419740 	call	41974 <_sbrk_r>
   40c18:	00ffffc4 	movi	r3,-1
   40c1c:	10c0cc26 	beq	r2,r3,40f50 <_malloc_r+0x720>
   40c20:	1505c83a 	sub	r2,r2,r20
   40c24:	b887883a 	add	r3,r23,r2
   40c28:	18c00054 	ori	r3,r3,1
   40c2c:	b0800017 	ldw	r2,0(r22)
   40c30:	9d000215 	stw	r20,8(r19)
   40c34:	a0c00115 	stw	r3,4(r20)
   40c38:	b885883a 	add	r2,r23,r2
   40c3c:	b0800015 	stw	r2,0(r22)
   40c40:	84c00e26 	beq	r16,r19,40c7c <_malloc_r+0x44c>
   40c44:	00c003c4 	movi	r3,15
   40c48:	1d40902e 	bgeu	r3,r21,40e8c <_malloc_r+0x65c>
   40c4c:	ad7ffd04 	addi	r21,r21,-12
   40c50:	013ffe04 	movi	r4,-8
   40c54:	a908703a 	and	r4,r21,r4
   40c58:	810b883a 	add	r5,r16,r4
   40c5c:	01800144 	movi	r6,5
   40c60:	29800115 	stw	r6,4(r5)
   40c64:	29800215 	stw	r6,8(r5)
   40c68:	81400117 	ldw	r5,4(r16)
   40c6c:	2940004c 	andi	r5,r5,1
   40c70:	214ab03a 	or	r5,r4,r5
   40c74:	81400115 	stw	r5,4(r16)
   40c78:	1900ae36 	bltu	r3,r4,40f34 <_malloc_r+0x704>
   40c7c:	d0e6a117 	ldw	r3,-25980(gp)
   40c80:	1880012e 	bgeu	r3,r2,40c88 <_malloc_r+0x458>
   40c84:	d0a6a115 	stw	r2,-25980(gp)
   40c88:	d0e6a017 	ldw	r3,-25984(gp)
   40c8c:	9c000217 	ldw	r16,8(r19)
   40c90:	1880012e 	bgeu	r3,r2,40c98 <_malloc_r+0x468>
   40c94:	d0a6a015 	stw	r2,-25984(gp)
   40c98:	80c00117 	ldw	r3,4(r16)
   40c9c:	00bfff04 	movi	r2,-4
   40ca0:	1886703a 	and	r3,r3,r2
   40ca4:	1c45c83a 	sub	r2,r3,r17
   40ca8:	1c400236 	bltu	r3,r17,40cb4 <_malloc_r+0x484>
   40cac:	00c003c4 	movi	r3,15
   40cb0:	18800416 	blt	r3,r2,40cc4 <_malloc_r+0x494>
   40cb4:	9009883a 	mov	r4,r18
   40cb8:	00433500 	call	43350 <__malloc_unlock>
   40cbc:	0005883a 	mov	r2,zero
   40cc0:	003f0906 	br	408e8 <_malloc_r+0xb8>
   40cc4:	88c00054 	ori	r3,r17,1
   40cc8:	10800054 	ori	r2,r2,1
   40ccc:	80c00115 	stw	r3,4(r16)
   40cd0:	8463883a 	add	r17,r16,r17
   40cd4:	88800115 	stw	r2,4(r17)
   40cd8:	9009883a 	mov	r4,r18
   40cdc:	9c400215 	stw	r17,8(r19)
   40ce0:	00433500 	call	43350 <__malloc_unlock>
   40ce4:	80800204 	addi	r2,r16,8
   40ce8:	003eff06 	br	408e8 <_malloc_r+0xb8>
   40cec:	00800504 	movi	r2,20
   40cf0:	1100492e 	bgeu	r2,r4,40e18 <_malloc_r+0x5e8>
   40cf4:	00801504 	movi	r2,84
   40cf8:	11005c36 	bltu	r2,r4,40e6c <_malloc_r+0x63c>
   40cfc:	8808d33a 	srli	r4,r17,12
   40d00:	21001b84 	addi	r4,r4,110
   40d04:	210b883a 	add	r5,r4,r4
   40d08:	003f1006 	br	4094c <_malloc_r+0x11c>
   40d0c:	1006d27a 	srli	r3,r2,9
   40d10:	01400104 	movi	r5,4
   40d14:	28c0432e 	bgeu	r5,r3,40e24 <_malloc_r+0x5f4>
   40d18:	01400504 	movi	r5,20
   40d1c:	28c07036 	bltu	r5,r3,40ee0 <_malloc_r+0x6b0>
   40d20:	194016c4 	addi	r5,r3,91
   40d24:	294d883a 	add	r6,r5,r5
   40d28:	318d883a 	add	r6,r6,r6
   40d2c:	318d883a 	add	r6,r6,r6
   40d30:	998d883a 	add	r6,r19,r6
   40d34:	30c00217 	ldw	r3,8(r6)
   40d38:	01c00134 	movhi	r7,4
   40d3c:	39d65e04 	addi	r7,r7,22904
   40d40:	19805726 	beq	r3,r6,40ea0 <_malloc_r+0x670>
   40d44:	01ffff04 	movi	r7,-4
   40d48:	19400117 	ldw	r5,4(r3)
   40d4c:	29ca703a 	and	r5,r5,r7
   40d50:	1140022e 	bgeu	r2,r5,40d5c <_malloc_r+0x52c>
   40d54:	18c00217 	ldw	r3,8(r3)
   40d58:	30fffb1e 	bne	r6,r3,40d48 <_malloc_r+0x518>
   40d5c:	19400317 	ldw	r5,12(r3)
   40d60:	98800117 	ldw	r2,4(r19)
   40d64:	81400315 	stw	r5,12(r16)
   40d68:	80c00215 	stw	r3,8(r16)
   40d6c:	2c000215 	stw	r16,8(r5)
   40d70:	1c000315 	stw	r16,12(r3)
   40d74:	003f2b06 	br	40a24 <_malloc_r+0x1f4>
   40d78:	8445883a 	add	r2,r16,r17
   40d7c:	8c400054 	ori	r17,r17,1
   40d80:	18800515 	stw	r2,20(r3)
   40d84:	18800415 	stw	r2,16(r3)
   40d88:	29000054 	ori	r4,r5,1
   40d8c:	1147883a 	add	r3,r2,r5
   40d90:	84400115 	stw	r17,4(r16)
   40d94:	11000115 	stw	r4,4(r2)
   40d98:	12400315 	stw	r9,12(r2)
   40d9c:	12400215 	stw	r9,8(r2)
   40da0:	19400015 	stw	r5,0(r3)
   40da4:	9009883a 	mov	r4,r18
   40da8:	00433500 	call	43350 <__malloc_unlock>
   40dac:	80800204 	addi	r2,r16,8
   40db0:	003ecd06 	br	408e8 <_malloc_r+0xb8>
   40db4:	18800117 	ldw	r2,4(r3)
   40db8:	003f1a06 	br	40a24 <_malloc_r+0x1f4>
   40dbc:	5ac00044 	addi	r11,r11,1
   40dc0:	588000cc 	andi	r2,r11,3
   40dc4:	52800204 	addi	r10,r10,8
   40dc8:	103f2e1e 	bne	r2,zero,40a84 <_malloc_r+0x254>
   40dcc:	20c000cc 	andi	r3,r4,3
   40dd0:	60bffe04 	addi	r2,r12,-8
   40dd4:	18006f26 	beq	r3,zero,40f94 <_malloc_r+0x764>
   40dd8:	63000017 	ldw	r12,0(r12)
   40ddc:	213fffc4 	addi	r4,r4,-1
   40de0:	60bffa26 	beq	r12,r2,40dcc <_malloc_r+0x59c>
   40de4:	98800117 	ldw	r2,4(r19)
   40de8:	294b883a 	add	r5,r5,r5
   40dec:	117f5a36 	bltu	r2,r5,40b58 <_malloc_r+0x328>
   40df0:	283f5926 	beq	r5,zero,40b58 <_malloc_r+0x328>
   40df4:	1146703a 	and	r3,r2,r5
   40df8:	18001626 	beq	r3,zero,40e54 <_malloc_r+0x624>
   40dfc:	5809883a 	mov	r4,r11
   40e00:	003f1a06 	br	40a6c <_malloc_r+0x23c>
   40e04:	80800204 	addi	r2,r16,8
   40e08:	84000517 	ldw	r16,20(r16)
   40e0c:	143ea81e 	bne	r2,r16,408b0 <_malloc_r+0x80>
   40e10:	21000084 	addi	r4,r4,2
   40e14:	003ee306 	br	409a4 <_malloc_r+0x174>
   40e18:	210016c4 	addi	r4,r4,91
   40e1c:	210b883a 	add	r5,r4,r4
   40e20:	003eca06 	br	4094c <_malloc_r+0x11c>
   40e24:	100ad1ba 	srli	r5,r2,6
   40e28:	29400e04 	addi	r5,r5,56
   40e2c:	294d883a 	add	r6,r5,r5
   40e30:	003fbd06 	br	40d28 <_malloc_r+0x4f8>
   40e34:	84ff6026 	beq	r16,r19,40bb8 <_malloc_r+0x388>
   40e38:	00800134 	movhi	r2,4
   40e3c:	10965e04 	addi	r2,r2,22904
   40e40:	14000217 	ldw	r16,8(r2)
   40e44:	00bfff04 	movi	r2,-4
   40e48:	80c00117 	ldw	r3,4(r16)
   40e4c:	1886703a 	and	r3,r3,r2
   40e50:	003f9406 	br	40ca4 <_malloc_r+0x474>
   40e54:	294b883a 	add	r5,r5,r5
   40e58:	1146703a 	and	r3,r2,r5
   40e5c:	5ac00104 	addi	r11,r11,4
   40e60:	183ffc26 	beq	r3,zero,40e54 <_malloc_r+0x624>
   40e64:	5809883a 	mov	r4,r11
   40e68:	003f0006 	br	40a6c <_malloc_r+0x23c>
   40e6c:	00805504 	movi	r2,340
   40e70:	11001336 	bltu	r2,r4,40ec0 <_malloc_r+0x690>
   40e74:	8808d3fa 	srli	r4,r17,15
   40e78:	21001dc4 	addi	r4,r4,119
   40e7c:	210b883a 	add	r5,r4,r4
   40e80:	003eb206 	br	4094c <_malloc_r+0x11c>
   40e84:	00840004 	movi	r2,4096
   40e88:	003f5d06 	br	40c00 <_malloc_r+0x3d0>
   40e8c:	00800044 	movi	r2,1
   40e90:	a0800115 	stw	r2,4(r20)
   40e94:	a021883a 	mov	r16,r20
   40e98:	0007883a 	mov	r3,zero
   40e9c:	003f8106 	br	40ca4 <_malloc_r+0x474>
   40ea0:	280bd0ba 	srai	r5,r5,2
   40ea4:	01800044 	movi	r6,1
   40ea8:	38800117 	ldw	r2,4(r7)
   40eac:	314c983a 	sll	r6,r6,r5
   40eb0:	180b883a 	mov	r5,r3
   40eb4:	3084b03a 	or	r2,r6,r2
   40eb8:	38800115 	stw	r2,4(r7)
   40ebc:	003fa906 	br	40d64 <_malloc_r+0x534>
   40ec0:	00815504 	movi	r2,1364
   40ec4:	11001836 	bltu	r2,r4,40f28 <_malloc_r+0x6f8>
   40ec8:	8808d4ba 	srli	r4,r17,18
   40ecc:	21001f04 	addi	r4,r4,124
   40ed0:	210b883a 	add	r5,r4,r4
   40ed4:	003e9d06 	br	4094c <_malloc_r+0x11c>
   40ed8:	bdc00404 	addi	r23,r23,16
   40edc:	003f2f06 	br	40b9c <_malloc_r+0x36c>
   40ee0:	01401504 	movi	r5,84
   40ee4:	28c01f36 	bltu	r5,r3,40f64 <_malloc_r+0x734>
   40ee8:	100ad33a 	srli	r5,r2,12
   40eec:	29401b84 	addi	r5,r5,110
   40ef0:	294d883a 	add	r6,r5,r5
   40ef4:	003f8c06 	br	40d28 <_malloc_r+0x4f8>
   40ef8:	9c000217 	ldw	r16,8(r19)
   40efc:	00bfff04 	movi	r2,-4
   40f00:	80c00117 	ldw	r3,4(r16)
   40f04:	1886703a 	and	r3,r3,r2
   40f08:	003f6606 	br	40ca4 <_malloc_r+0x474>
   40f0c:	e0c3ffcc 	andi	r3,fp,4095
   40f10:	183f2f1e 	bne	r3,zero,40bd0 <_malloc_r+0x3a0>
   40f14:	98c00217 	ldw	r3,8(r19)
   40f18:	bd49883a 	add	r4,r23,r21
   40f1c:	21000054 	ori	r4,r4,1
   40f20:	19000115 	stw	r4,4(r3)
   40f24:	003f5506 	br	40c7c <_malloc_r+0x44c>
   40f28:	01403f04 	movi	r5,252
   40f2c:	01001f84 	movi	r4,126
   40f30:	003e8606 	br	4094c <_malloc_r+0x11c>
   40f34:	9009883a 	mov	r4,r18
   40f38:	81400204 	addi	r5,r16,8
   40f3c:	004218c0 	call	4218c <_free_r>
   40f40:	00800174 	movhi	r2,5
   40f44:	10a28c04 	addi	r2,r2,-30160
   40f48:	10800017 	ldw	r2,0(r2)
   40f4c:	003f4b06 	br	40c7c <_malloc_r+0x44c>
   40f50:	00c00044 	movi	r3,1
   40f54:	002f883a 	mov	r23,zero
   40f58:	003f3406 	br	40c2c <_malloc_r+0x3fc>
   40f5c:	d5200215 	stw	r20,-32760(gp)
   40f60:	003f2106 	br	40be8 <_malloc_r+0x3b8>
   40f64:	01405504 	movi	r5,340
   40f68:	28c00436 	bltu	r5,r3,40f7c <_malloc_r+0x74c>
   40f6c:	100ad3fa 	srli	r5,r2,15
   40f70:	29401dc4 	addi	r5,r5,119
   40f74:	294d883a 	add	r6,r5,r5
   40f78:	003f6b06 	br	40d28 <_malloc_r+0x4f8>
   40f7c:	01415504 	movi	r5,1364
   40f80:	28c00936 	bltu	r5,r3,40fa8 <_malloc_r+0x778>
   40f84:	100ad4ba 	srli	r5,r2,18
   40f88:	29401f04 	addi	r5,r5,124
   40f8c:	294d883a 	add	r6,r5,r5
   40f90:	003f6506 	br	40d28 <_malloc_r+0x4f8>
   40f94:	98800117 	ldw	r2,4(r19)
   40f98:	0146303a 	nor	r3,zero,r5
   40f9c:	1884703a 	and	r2,r3,r2
   40fa0:	98800115 	stw	r2,4(r19)
   40fa4:	003f9006 	br	40de8 <_malloc_r+0x5b8>
   40fa8:	01803f04 	movi	r6,252
   40fac:	01401f84 	movi	r5,126
   40fb0:	003f5d06 	br	40d28 <_malloc_r+0x4f8>

00040fb4 <memchr>:
   40fb4:	008000c4 	movi	r2,3
   40fb8:	29403fcc 	andi	r5,r5,255
   40fbc:	1180282e 	bgeu	r2,r6,41060 <memchr+0xac>
   40fc0:	2086703a 	and	r3,r4,r2
   40fc4:	1800351e 	bne	r3,zero,4109c <memchr+0xe8>
   40fc8:	2816923a 	slli	r11,r5,8
   40fcc:	2093883a 	add	r9,r4,r2
   40fd0:	22000084 	addi	r8,r4,2
   40fd4:	5957883a 	add	r11,r11,r5
   40fd8:	5816923a 	slli	r11,r11,8
   40fdc:	20c00044 	addi	r3,r4,1
   40fe0:	037fbff4 	movhi	r13,65279
   40fe4:	6b7fbfc4 	addi	r13,r13,-257
   40fe8:	5957883a 	add	r11,r11,r5
   40fec:	5816923a 	slli	r11,r11,8
   40ff0:	03202074 	movhi	r12,32897
   40ff4:	63202004 	addi	r12,r12,-32640
   40ff8:	101d883a 	mov	r14,r2
   40ffc:	5957883a 	add	r11,r11,r5
   41000:	21c00017 	ldw	r7,0(r4)
   41004:	31bfff04 	addi	r6,r6,-4
   41008:	1805883a 	mov	r2,r3
   4100c:	3acef03a 	xor	r7,r7,r11
   41010:	3b55883a 	add	r10,r7,r13
   41014:	01ce303a 	nor	r7,zero,r7
   41018:	51ce703a 	and	r7,r10,r7
   4101c:	3b0e703a 	and	r7,r7,r12
   41020:	38000a26 	beq	r7,zero,4104c <memchr+0x98>
   41024:	21c00003 	ldbu	r7,0(r4)
   41028:	39401e26 	beq	r7,r5,410a4 <memchr+0xf0>
   4102c:	19c00003 	ldbu	r7,0(r3)
   41030:	39401926 	beq	r7,r5,41098 <memchr+0xe4>
   41034:	41c00003 	ldbu	r7,0(r8)
   41038:	4005883a 	mov	r2,r8
   4103c:	39401626 	beq	r7,r5,41098 <memchr+0xe4>
   41040:	49c00003 	ldbu	r7,0(r9)
   41044:	4805883a 	mov	r2,r9
   41048:	39401326 	beq	r7,r5,41098 <memchr+0xe4>
   4104c:	21000104 	addi	r4,r4,4
   41050:	4a400104 	addi	r9,r9,4
   41054:	42000104 	addi	r8,r8,4
   41058:	18c00104 	addi	r3,r3,4
   4105c:	71bfe836 	bltu	r14,r6,41000 <memchr+0x4c>
   41060:	2005883a 	mov	r2,r4
   41064:	30000a26 	beq	r6,zero,41090 <memchr+0xdc>
   41068:	10c00003 	ldbu	r3,0(r2)
   4106c:	19400a26 	beq	r3,r5,41098 <memchr+0xe4>
   41070:	10c00044 	addi	r3,r2,1
   41074:	118d883a 	add	r6,r2,r6
   41078:	00000306 	br	41088 <memchr+0xd4>
   4107c:	11000003 	ldbu	r4,0(r2)
   41080:	18c00044 	addi	r3,r3,1
   41084:	21400426 	beq	r4,r5,41098 <memchr+0xe4>
   41088:	1805883a 	mov	r2,r3
   4108c:	19bffb1e 	bne	r3,r6,4107c <memchr+0xc8>
   41090:	0005883a 	mov	r2,zero
   41094:	f800283a 	ret
   41098:	f800283a 	ret
   4109c:	2005883a 	mov	r2,r4
   410a0:	003ff106 	br	41068 <memchr+0xb4>
   410a4:	2005883a 	mov	r2,r4
   410a8:	f800283a 	ret

000410ac <memcpy>:
   410ac:	defffb04 	addi	sp,sp,-20
   410b0:	dc000015 	stw	r16,0(sp)
   410b4:	dfc00415 	stw	ra,16(sp)
   410b8:	dcc00315 	stw	r19,12(sp)
   410bc:	dc800215 	stw	r18,8(sp)
   410c0:	dc400115 	stw	r17,4(sp)
   410c4:	00c003c4 	movi	r3,15
   410c8:	2021883a 	mov	r16,r4
   410cc:	3005883a 	mov	r2,r6
   410d0:	1980032e 	bgeu	r3,r6,410e0 <memcpy+0x34>
   410d4:	2906b03a 	or	r3,r5,r4
   410d8:	18c000cc 	andi	r3,r3,3
   410dc:	18001026 	beq	r3,zero,41120 <memcpy+0x74>
   410e0:	8007883a 	mov	r3,r16
   410e4:	288f883a 	add	r7,r5,r2
   410e8:	10000526 	beq	r2,zero,41100 <memcpy+0x54>
   410ec:	29800003 	ldbu	r6,0(r5)
   410f0:	18c00044 	addi	r3,r3,1
   410f4:	29400044 	addi	r5,r5,1
   410f8:	19bfffc5 	stb	r6,-1(r3)
   410fc:	29fffb1e 	bne	r5,r7,410ec <memcpy+0x40>
   41100:	8005883a 	mov	r2,r16
   41104:	dfc00417 	ldw	ra,16(sp)
   41108:	dcc00317 	ldw	r19,12(sp)
   4110c:	dc800217 	ldw	r18,8(sp)
   41110:	dc400117 	ldw	r17,4(sp)
   41114:	dc000017 	ldw	r16,0(sp)
   41118:	dec00504 	addi	sp,sp,20
   4111c:	f800283a 	ret
   41120:	32bffc04 	addi	r10,r6,-16
   41124:	5014d13a 	srli	r10,r10,4
   41128:	20800404 	addi	r2,r4,16
   4112c:	2007883a 	mov	r3,r4
   41130:	5008913a 	slli	r4,r10,4
   41134:	280f883a 	mov	r7,r5
   41138:	1105883a 	add	r2,r2,r4
   4113c:	3a000017 	ldw	r8,0(r7)
   41140:	18c00404 	addi	r3,r3,16
   41144:	39c00404 	addi	r7,r7,16
   41148:	1a3ffc15 	stw	r8,-16(r3)
   4114c:	3a3ffd17 	ldw	r8,-12(r7)
   41150:	1a3ffd15 	stw	r8,-12(r3)
   41154:	3a3ffe17 	ldw	r8,-8(r7)
   41158:	1a3ffe15 	stw	r8,-8(r3)
   4115c:	3a3fff17 	ldw	r8,-4(r7)
   41160:	1a3fff15 	stw	r8,-4(r3)
   41164:	18bff51e 	bne	r3,r2,4113c <memcpy+0x90>
   41168:	52800044 	addi	r10,r10,1
   4116c:	5014913a 	slli	r10,r10,4
   41170:	308003cc 	andi	r2,r6,15
   41174:	010000c4 	movi	r4,3
   41178:	8287883a 	add	r3,r16,r10
   4117c:	2a95883a 	add	r10,r5,r10
   41180:	2080182e 	bgeu	r4,r2,411e4 <memcpy+0x138>
   41184:	147fff04 	addi	r17,r2,-4
   41188:	8808d0ba 	srli	r4,r17,2
   4118c:	1a400104 	addi	r9,r3,4
   41190:	180d883a 	mov	r6,r3
   41194:	2105883a 	add	r2,r4,r4
   41198:	1085883a 	add	r2,r2,r2
   4119c:	4893883a 	add	r9,r9,r2
   411a0:	500f883a 	mov	r7,r10
   411a4:	3a000017 	ldw	r8,0(r7)
   411a8:	31800104 	addi	r6,r6,4
   411ac:	39c00104 	addi	r7,r7,4
   411b0:	323fff15 	stw	r8,-4(r6)
   411b4:	327ffb1e 	bne	r6,r9,411a4 <memcpy+0xf8>
   411b8:	20800044 	addi	r2,r4,1
   411bc:	1085883a 	add	r2,r2,r2
   411c0:	1085883a 	add	r2,r2,r2
   411c4:	017fff04 	movi	r5,-4
   411c8:	18a5883a 	add	r18,r3,r2
   411cc:	50a7883a 	add	r19,r10,r2
   411d0:	0042d440 	call	42d44 <__mulsi3>
   411d4:	1445883a 	add	r2,r2,r17
   411d8:	980b883a 	mov	r5,r19
   411dc:	9007883a 	mov	r3,r18
   411e0:	003fc006 	br	410e4 <memcpy+0x38>
   411e4:	500b883a 	mov	r5,r10
   411e8:	003fbe06 	br	410e4 <memcpy+0x38>

000411ec <memmove>:
   411ec:	defffb04 	addi	sp,sp,-20
   411f0:	dc000015 	stw	r16,0(sp)
   411f4:	dfc00415 	stw	ra,16(sp)
   411f8:	dcc00315 	stw	r19,12(sp)
   411fc:	dc800215 	stw	r18,8(sp)
   41200:	dc400115 	stw	r17,4(sp)
   41204:	2021883a 	mov	r16,r4
   41208:	300f883a 	mov	r7,r6
   4120c:	2900122e 	bgeu	r5,r4,41258 <memmove+0x6c>
   41210:	2987883a 	add	r3,r5,r6
   41214:	20c0102e 	bgeu	r4,r3,41258 <memmove+0x6c>
   41218:	218b883a 	add	r5,r4,r6
   4121c:	1989c83a 	sub	r4,r3,r6
   41220:	30000526 	beq	r6,zero,41238 <memmove+0x4c>
   41224:	18ffffc4 	addi	r3,r3,-1
   41228:	18800003 	ldbu	r2,0(r3)
   4122c:	297fffc4 	addi	r5,r5,-1
   41230:	28800005 	stb	r2,0(r5)
   41234:	193ffb1e 	bne	r3,r4,41224 <memmove+0x38>
   41238:	8005883a 	mov	r2,r16
   4123c:	dfc00417 	ldw	ra,16(sp)
   41240:	dcc00317 	ldw	r19,12(sp)
   41244:	dc800217 	ldw	r18,8(sp)
   41248:	dc400117 	ldw	r17,4(sp)
   4124c:	dc000017 	ldw	r16,0(sp)
   41250:	dec00504 	addi	sp,sp,20
   41254:	f800283a 	ret
   41258:	008003c4 	movi	r2,15
   4125c:	1180422e 	bgeu	r2,r6,41368 <memmove+0x17c>
   41260:	2c04b03a 	or	r2,r5,r16
   41264:	108000cc 	andi	r2,r2,3
   41268:	10003f1e 	bne	r2,zero,41368 <memmove+0x17c>
   4126c:	32bffc04 	addi	r10,r6,-16
   41270:	5014d13a 	srli	r10,r10,4
   41274:	81000404 	addi	r4,r16,16
   41278:	8007883a 	mov	r3,r16
   4127c:	5004913a 	slli	r2,r10,4
   41280:	280f883a 	mov	r7,r5
   41284:	2089883a 	add	r4,r4,r2
   41288:	38800017 	ldw	r2,0(r7)
   4128c:	18c00404 	addi	r3,r3,16
   41290:	39c00404 	addi	r7,r7,16
   41294:	18bffc15 	stw	r2,-16(r3)
   41298:	38bffd17 	ldw	r2,-12(r7)
   4129c:	18bffd15 	stw	r2,-12(r3)
   412a0:	38bffe17 	ldw	r2,-8(r7)
   412a4:	18bffe15 	stw	r2,-8(r3)
   412a8:	38bfff17 	ldw	r2,-4(r7)
   412ac:	18bfff15 	stw	r2,-4(r3)
   412b0:	193ff51e 	bne	r3,r4,41288 <memmove+0x9c>
   412b4:	52800044 	addi	r10,r10,1
   412b8:	5014913a 	slli	r10,r10,4
   412bc:	31c003cc 	andi	r7,r6,15
   412c0:	008000c4 	movi	r2,3
   412c4:	8287883a 	add	r3,r16,r10
   412c8:	2a95883a 	add	r10,r5,r10
   412cc:	11c0282e 	bgeu	r2,r7,41370 <memmove+0x184>
   412d0:	3c7fff04 	addi	r17,r7,-4
   412d4:	8808d0ba 	srli	r4,r17,2
   412d8:	1a400104 	addi	r9,r3,4
   412dc:	180d883a 	mov	r6,r3
   412e0:	2105883a 	add	r2,r4,r4
   412e4:	1085883a 	add	r2,r2,r2
   412e8:	4893883a 	add	r9,r9,r2
   412ec:	5005883a 	mov	r2,r10
   412f0:	12000017 	ldw	r8,0(r2)
   412f4:	31800104 	addi	r6,r6,4
   412f8:	10800104 	addi	r2,r2,4
   412fc:	323fff15 	stw	r8,-4(r6)
   41300:	327ffb1e 	bne	r6,r9,412f0 <memmove+0x104>
   41304:	20800044 	addi	r2,r4,1
   41308:	1085883a 	add	r2,r2,r2
   4130c:	1085883a 	add	r2,r2,r2
   41310:	017fff04 	movi	r5,-4
   41314:	18a5883a 	add	r18,r3,r2
   41318:	50a7883a 	add	r19,r10,r2
   4131c:	0042d440 	call	42d44 <__mulsi3>
   41320:	144f883a 	add	r7,r2,r17
   41324:	980b883a 	mov	r5,r19
   41328:	9007883a 	mov	r3,r18
   4132c:	383fc226 	beq	r7,zero,41238 <memmove+0x4c>
   41330:	19cf883a 	add	r7,r3,r7
   41334:	29800003 	ldbu	r6,0(r5)
   41338:	18c00044 	addi	r3,r3,1
   4133c:	29400044 	addi	r5,r5,1
   41340:	19bfffc5 	stb	r6,-1(r3)
   41344:	19fffb1e 	bne	r3,r7,41334 <memmove+0x148>
   41348:	8005883a 	mov	r2,r16
   4134c:	dfc00417 	ldw	ra,16(sp)
   41350:	dcc00317 	ldw	r19,12(sp)
   41354:	dc800217 	ldw	r18,8(sp)
   41358:	dc400117 	ldw	r17,4(sp)
   4135c:	dc000017 	ldw	r16,0(sp)
   41360:	dec00504 	addi	sp,sp,20
   41364:	f800283a 	ret
   41368:	8007883a 	mov	r3,r16
   4136c:	003fef06 	br	4132c <memmove+0x140>
   41370:	500b883a 	mov	r5,r10
   41374:	003fed06 	br	4132c <memmove+0x140>

00041378 <_realloc_r>:
   41378:	defff504 	addi	sp,sp,-44
   4137c:	dd400615 	stw	r21,24(sp)
   41380:	dc800315 	stw	r18,12(sp)
   41384:	dc000115 	stw	r16,4(sp)
   41388:	dfc00a15 	stw	ra,40(sp)
   4138c:	df000915 	stw	fp,36(sp)
   41390:	ddc00815 	stw	r23,32(sp)
   41394:	dd800715 	stw	r22,28(sp)
   41398:	dd000515 	stw	r20,20(sp)
   4139c:	dcc00415 	stw	r19,16(sp)
   413a0:	dc400215 	stw	r17,8(sp)
   413a4:	2821883a 	mov	r16,r5
   413a8:	202b883a 	mov	r21,r4
   413ac:	3025883a 	mov	r18,r6
   413b0:	28009626 	beq	r5,zero,4160c <_realloc_r+0x294>
   413b4:	00433300 	call	43330 <__malloc_lock>
   413b8:	80bfff17 	ldw	r2,-4(r16)
   413bc:	04ffff04 	movi	r19,-4
   413c0:	90c002c4 	addi	r3,r18,11
   413c4:	01000584 	movi	r4,22
   413c8:	85bffe04 	addi	r22,r16,-8
   413cc:	14e6703a 	and	r19,r2,r19
   413d0:	20c0372e 	bgeu	r4,r3,414b0 <_realloc_r+0x138>
   413d4:	047ffe04 	movi	r17,-8
   413d8:	1c62703a 	and	r17,r3,r17
   413dc:	8807883a 	mov	r3,r17
   413e0:	88005a16 	blt	r17,zero,4154c <_realloc_r+0x1d4>
   413e4:	8c805936 	bltu	r17,r18,4154c <_realloc_r+0x1d4>
   413e8:	98c0340e 	bge	r19,r3,414bc <_realloc_r+0x144>
   413ec:	07000134 	movhi	fp,4
   413f0:	e7165e04 	addi	fp,fp,22904
   413f4:	e1400217 	ldw	r5,8(fp)
   413f8:	b4c9883a 	add	r4,r22,r19
   413fc:	29009026 	beq	r5,r4,41640 <_realloc_r+0x2c8>
   41400:	21800117 	ldw	r6,4(r4)
   41404:	01ffff84 	movi	r7,-2
   41408:	31ce703a 	and	r7,r6,r7
   4140c:	21cf883a 	add	r7,r4,r7
   41410:	39c00117 	ldw	r7,4(r7)
   41414:	39c0004c 	andi	r7,r7,1
   41418:	38004326 	beq	r7,zero,41528 <_realloc_r+0x1b0>
   4141c:	000d883a 	mov	r6,zero
   41420:	0009883a 	mov	r4,zero
   41424:	1080004c 	andi	r2,r2,1
   41428:	10005a1e 	bne	r2,zero,41594 <_realloc_r+0x21c>
   4142c:	85fffe17 	ldw	r23,-8(r16)
   41430:	00bfff04 	movi	r2,-4
   41434:	b5efc83a 	sub	r23,r22,r23
   41438:	b9c00117 	ldw	r7,4(r23)
   4143c:	388e703a 	and	r7,r7,r2
   41440:	3ccf883a 	add	r7,r7,r19
   41444:	20005226 	beq	r4,zero,41590 <_realloc_r+0x218>
   41448:	31e9883a 	add	r20,r6,r7
   4144c:	2140c726 	beq	r4,r5,4176c <_realloc_r+0x3f4>
   41450:	a0c04f16 	blt	r20,r3,41590 <_realloc_r+0x218>
   41454:	20800317 	ldw	r2,12(r4)
   41458:	20c00217 	ldw	r3,8(r4)
   4145c:	99bfff04 	addi	r6,r19,-4
   41460:	01000904 	movi	r4,36
   41464:	18800315 	stw	r2,12(r3)
   41468:	10c00215 	stw	r3,8(r2)
   4146c:	b8c00217 	ldw	r3,8(r23)
   41470:	b8800317 	ldw	r2,12(r23)
   41474:	bc800204 	addi	r18,r23,8
   41478:	18800315 	stw	r2,12(r3)
   4147c:	10c00215 	stw	r3,8(r2)
   41480:	2180ed36 	bltu	r4,r6,41838 <_realloc_r+0x4c0>
   41484:	008004c4 	movi	r2,19
   41488:	11809b2e 	bgeu	r2,r6,416f8 <_realloc_r+0x380>
   4148c:	80800017 	ldw	r2,0(r16)
   41490:	b8800215 	stw	r2,8(r23)
   41494:	80800117 	ldw	r2,4(r16)
   41498:	b8800315 	stw	r2,12(r23)
   4149c:	008006c4 	movi	r2,27
   414a0:	1180f936 	bltu	r2,r6,41888 <_realloc_r+0x510>
   414a4:	b8800404 	addi	r2,r23,16
   414a8:	80c00204 	addi	r3,r16,8
   414ac:	00009406 	br	41700 <_realloc_r+0x388>
   414b0:	00c00404 	movi	r3,16
   414b4:	1823883a 	mov	r17,r3
   414b8:	003fca06 	br	413e4 <_realloc_r+0x6c>
   414bc:	9829883a 	mov	r20,r19
   414c0:	a447c83a 	sub	r3,r20,r17
   414c4:	010003c4 	movi	r4,15
   414c8:	1080004c 	andi	r2,r2,1
   414cc:	20c02336 	bltu	r4,r3,4155c <_realloc_r+0x1e4>
   414d0:	1504b03a 	or	r2,r2,r20
   414d4:	b0800115 	stw	r2,4(r22)
   414d8:	b52d883a 	add	r22,r22,r20
   414dc:	b0800117 	ldw	r2,4(r22)
   414e0:	10800054 	ori	r2,r2,1
   414e4:	b0800115 	stw	r2,4(r22)
   414e8:	a809883a 	mov	r4,r21
   414ec:	00433500 	call	43350 <__malloc_unlock>
   414f0:	8025883a 	mov	r18,r16
   414f4:	9005883a 	mov	r2,r18
   414f8:	dfc00a17 	ldw	ra,40(sp)
   414fc:	df000917 	ldw	fp,36(sp)
   41500:	ddc00817 	ldw	r23,32(sp)
   41504:	dd800717 	ldw	r22,28(sp)
   41508:	dd400617 	ldw	r21,24(sp)
   4150c:	dd000517 	ldw	r20,20(sp)
   41510:	dcc00417 	ldw	r19,16(sp)
   41514:	dc800317 	ldw	r18,12(sp)
   41518:	dc400217 	ldw	r17,8(sp)
   4151c:	dc000117 	ldw	r16,4(sp)
   41520:	dec00b04 	addi	sp,sp,44
   41524:	f800283a 	ret
   41528:	01ffff04 	movi	r7,-4
   4152c:	31cc703a 	and	r6,r6,r7
   41530:	34e9883a 	add	r20,r6,r19
   41534:	a0ffbb16 	blt	r20,r3,41424 <_realloc_r+0xac>
   41538:	20c00317 	ldw	r3,12(r4)
   4153c:	21000217 	ldw	r4,8(r4)
   41540:	20c00315 	stw	r3,12(r4)
   41544:	19000215 	stw	r4,8(r3)
   41548:	003fdd06 	br	414c0 <_realloc_r+0x148>
   4154c:	00800304 	movi	r2,12
   41550:	a8800015 	stw	r2,0(r21)
   41554:	0025883a 	mov	r18,zero
   41558:	003fe606 	br	414f4 <_realloc_r+0x17c>
   4155c:	1444b03a 	or	r2,r2,r17
   41560:	b0800115 	stw	r2,4(r22)
   41564:	b44b883a 	add	r5,r22,r17
   41568:	18800054 	ori	r2,r3,1
   4156c:	28800115 	stw	r2,4(r5)
   41570:	28c7883a 	add	r3,r5,r3
   41574:	18800117 	ldw	r2,4(r3)
   41578:	a809883a 	mov	r4,r21
   4157c:	29400204 	addi	r5,r5,8
   41580:	10800054 	ori	r2,r2,1
   41584:	18800115 	stw	r2,4(r3)
   41588:	004218c0 	call	4218c <_free_r>
   4158c:	003fd606 	br	414e8 <_realloc_r+0x170>
   41590:	38c0330e 	bge	r7,r3,41660 <_realloc_r+0x2e8>
   41594:	900b883a 	mov	r5,r18
   41598:	a809883a 	mov	r4,r21
   4159c:	00408300 	call	40830 <_malloc_r>
   415a0:	1025883a 	mov	r18,r2
   415a4:	10001626 	beq	r2,zero,41600 <_realloc_r+0x288>
   415a8:	80bfff17 	ldw	r2,-4(r16)
   415ac:	00ffff84 	movi	r3,-2
   415b0:	913ffe04 	addi	r4,r18,-8
   415b4:	10c6703a 	and	r3,r2,r3
   415b8:	b0c7883a 	add	r3,r22,r3
   415bc:	20c09926 	beq	r4,r3,41824 <_realloc_r+0x4ac>
   415c0:	99bfff04 	addi	r6,r19,-4
   415c4:	00800904 	movi	r2,36
   415c8:	11806436 	bltu	r2,r6,4175c <_realloc_r+0x3e4>
   415cc:	00c004c4 	movi	r3,19
   415d0:	19804036 	bltu	r3,r6,416d4 <_realloc_r+0x35c>
   415d4:	9005883a 	mov	r2,r18
   415d8:	8007883a 	mov	r3,r16
   415dc:	19000017 	ldw	r4,0(r3)
   415e0:	11000015 	stw	r4,0(r2)
   415e4:	19000117 	ldw	r4,4(r3)
   415e8:	11000115 	stw	r4,4(r2)
   415ec:	18c00217 	ldw	r3,8(r3)
   415f0:	10c00215 	stw	r3,8(r2)
   415f4:	a809883a 	mov	r4,r21
   415f8:	800b883a 	mov	r5,r16
   415fc:	004218c0 	call	4218c <_free_r>
   41600:	a809883a 	mov	r4,r21
   41604:	00433500 	call	43350 <__malloc_unlock>
   41608:	003fba06 	br	414f4 <_realloc_r+0x17c>
   4160c:	300b883a 	mov	r5,r6
   41610:	dfc00a17 	ldw	ra,40(sp)
   41614:	df000917 	ldw	fp,36(sp)
   41618:	ddc00817 	ldw	r23,32(sp)
   4161c:	dd800717 	ldw	r22,28(sp)
   41620:	dd400617 	ldw	r21,24(sp)
   41624:	dd000517 	ldw	r20,20(sp)
   41628:	dcc00417 	ldw	r19,16(sp)
   4162c:	dc800317 	ldw	r18,12(sp)
   41630:	dc400217 	ldw	r17,8(sp)
   41634:	dc000117 	ldw	r16,4(sp)
   41638:	dec00b04 	addi	sp,sp,44
   4163c:	00408301 	jmpi	40830 <_malloc_r>
   41640:	29800117 	ldw	r6,4(r5)
   41644:	013fff04 	movi	r4,-4
   41648:	89c00404 	addi	r7,r17,16
   4164c:	310c703a 	and	r6,r6,r4
   41650:	34c9883a 	add	r4,r6,r19
   41654:	21c0340e 	bge	r4,r7,41728 <_realloc_r+0x3b0>
   41658:	2809883a 	mov	r4,r5
   4165c:	003f7106 	br	41424 <_realloc_r+0xac>
   41660:	b8800317 	ldw	r2,12(r23)
   41664:	b8c00217 	ldw	r3,8(r23)
   41668:	99bfff04 	addi	r6,r19,-4
   4166c:	01000904 	movi	r4,36
   41670:	18800315 	stw	r2,12(r3)
   41674:	10c00215 	stw	r3,8(r2)
   41678:	bc800204 	addi	r18,r23,8
   4167c:	21807836 	bltu	r4,r6,41860 <_realloc_r+0x4e8>
   41680:	008004c4 	movi	r2,19
   41684:	1180732e 	bgeu	r2,r6,41854 <_realloc_r+0x4dc>
   41688:	80800017 	ldw	r2,0(r16)
   4168c:	b8800215 	stw	r2,8(r23)
   41690:	80800117 	ldw	r2,4(r16)
   41694:	b8800315 	stw	r2,12(r23)
   41698:	008006c4 	movi	r2,27
   4169c:	11808936 	bltu	r2,r6,418c4 <_realloc_r+0x54c>
   416a0:	b8800404 	addi	r2,r23,16
   416a4:	80c00204 	addi	r3,r16,8
   416a8:	19000017 	ldw	r4,0(r3)
   416ac:	9021883a 	mov	r16,r18
   416b0:	3829883a 	mov	r20,r7
   416b4:	11000015 	stw	r4,0(r2)
   416b8:	19000117 	ldw	r4,4(r3)
   416bc:	b82d883a 	mov	r22,r23
   416c0:	11000115 	stw	r4,4(r2)
   416c4:	18c00217 	ldw	r3,8(r3)
   416c8:	10c00215 	stw	r3,8(r2)
   416cc:	b8800117 	ldw	r2,4(r23)
   416d0:	003f7b06 	br	414c0 <_realloc_r+0x148>
   416d4:	80c00017 	ldw	r3,0(r16)
   416d8:	90c00015 	stw	r3,0(r18)
   416dc:	80c00117 	ldw	r3,4(r16)
   416e0:	90c00115 	stw	r3,4(r18)
   416e4:	00c006c4 	movi	r3,27
   416e8:	19804636 	bltu	r3,r6,41804 <_realloc_r+0x48c>
   416ec:	90800204 	addi	r2,r18,8
   416f0:	80c00204 	addi	r3,r16,8
   416f4:	003fb906 	br	415dc <_realloc_r+0x264>
   416f8:	9005883a 	mov	r2,r18
   416fc:	8007883a 	mov	r3,r16
   41700:	19000017 	ldw	r4,0(r3)
   41704:	9021883a 	mov	r16,r18
   41708:	b82d883a 	mov	r22,r23
   4170c:	11000015 	stw	r4,0(r2)
   41710:	19000117 	ldw	r4,4(r3)
   41714:	11000115 	stw	r4,4(r2)
   41718:	18c00217 	ldw	r3,8(r3)
   4171c:	10c00215 	stw	r3,8(r2)
   41720:	b8800117 	ldw	r2,4(r23)
   41724:	003f6606 	br	414c0 <_realloc_r+0x148>
   41728:	2445c83a 	sub	r2,r4,r17
   4172c:	b46d883a 	add	r22,r22,r17
   41730:	10800054 	ori	r2,r2,1
   41734:	b0800115 	stw	r2,4(r22)
   41738:	80bfff17 	ldw	r2,-4(r16)
   4173c:	a809883a 	mov	r4,r21
   41740:	e5800215 	stw	r22,8(fp)
   41744:	1080004c 	andi	r2,r2,1
   41748:	88a2b03a 	or	r17,r17,r2
   4174c:	847fff15 	stw	r17,-4(r16)
   41750:	00433500 	call	43350 <__malloc_unlock>
   41754:	8025883a 	mov	r18,r16
   41758:	003f6606 	br	414f4 <_realloc_r+0x17c>
   4175c:	9009883a 	mov	r4,r18
   41760:	800b883a 	mov	r5,r16
   41764:	00411ec0 	call	411ec <memmove>
   41768:	003fa206 	br	415f4 <_realloc_r+0x27c>
   4176c:	88800404 	addi	r2,r17,16
   41770:	a0bf8716 	blt	r20,r2,41590 <_realloc_r+0x218>
   41774:	b8800317 	ldw	r2,12(r23)
   41778:	b8c00217 	ldw	r3,8(r23)
   4177c:	99bfff04 	addi	r6,r19,-4
   41780:	01000904 	movi	r4,36
   41784:	18800315 	stw	r2,12(r3)
   41788:	10c00215 	stw	r3,8(r2)
   4178c:	bc800204 	addi	r18,r23,8
   41790:	21806536 	bltu	r4,r6,41928 <_realloc_r+0x5b0>
   41794:	008004c4 	movi	r2,19
   41798:	1180592e 	bgeu	r2,r6,41900 <_realloc_r+0x588>
   4179c:	80800017 	ldw	r2,0(r16)
   417a0:	b8800215 	stw	r2,8(r23)
   417a4:	80800117 	ldw	r2,4(r16)
   417a8:	b8800315 	stw	r2,12(r23)
   417ac:	008006c4 	movi	r2,27
   417b0:	11806136 	bltu	r2,r6,41938 <_realloc_r+0x5c0>
   417b4:	b8800404 	addi	r2,r23,16
   417b8:	80c00204 	addi	r3,r16,8
   417bc:	19000017 	ldw	r4,0(r3)
   417c0:	11000015 	stw	r4,0(r2)
   417c4:	19000117 	ldw	r4,4(r3)
   417c8:	11000115 	stw	r4,4(r2)
   417cc:	18c00217 	ldw	r3,8(r3)
   417d0:	10c00215 	stw	r3,8(r2)
   417d4:	a447c83a 	sub	r3,r20,r17
   417d8:	bc45883a 	add	r2,r23,r17
   417dc:	18c00054 	ori	r3,r3,1
   417e0:	10c00115 	stw	r3,4(r2)
   417e4:	b8c00117 	ldw	r3,4(r23)
   417e8:	e0800215 	stw	r2,8(fp)
   417ec:	a809883a 	mov	r4,r21
   417f0:	1880004c 	andi	r2,r3,1
   417f4:	88a2b03a 	or	r17,r17,r2
   417f8:	bc400115 	stw	r17,4(r23)
   417fc:	00433500 	call	43350 <__malloc_unlock>
   41800:	003f3c06 	br	414f4 <_realloc_r+0x17c>
   41804:	80c00217 	ldw	r3,8(r16)
   41808:	90c00215 	stw	r3,8(r18)
   4180c:	80c00317 	ldw	r3,12(r16)
   41810:	90c00315 	stw	r3,12(r18)
   41814:	30802426 	beq	r6,r2,418a8 <_realloc_r+0x530>
   41818:	90800404 	addi	r2,r18,16
   4181c:	80c00404 	addi	r3,r16,16
   41820:	003f6e06 	br	415dc <_realloc_r+0x264>
   41824:	953fff17 	ldw	r20,-4(r18)
   41828:	00ffff04 	movi	r3,-4
   4182c:	a0e8703a 	and	r20,r20,r3
   41830:	a4e9883a 	add	r20,r20,r19
   41834:	003f2206 	br	414c0 <_realloc_r+0x148>
   41838:	800b883a 	mov	r5,r16
   4183c:	9009883a 	mov	r4,r18
   41840:	00411ec0 	call	411ec <memmove>
   41844:	9021883a 	mov	r16,r18
   41848:	b8800117 	ldw	r2,4(r23)
   4184c:	b82d883a 	mov	r22,r23
   41850:	003f1b06 	br	414c0 <_realloc_r+0x148>
   41854:	9005883a 	mov	r2,r18
   41858:	8007883a 	mov	r3,r16
   4185c:	003f9206 	br	416a8 <_realloc_r+0x330>
   41860:	800b883a 	mov	r5,r16
   41864:	9009883a 	mov	r4,r18
   41868:	d9c00015 	stw	r7,0(sp)
   4186c:	00411ec0 	call	411ec <memmove>
   41870:	d9c00017 	ldw	r7,0(sp)
   41874:	9021883a 	mov	r16,r18
   41878:	b8800117 	ldw	r2,4(r23)
   4187c:	3829883a 	mov	r20,r7
   41880:	b82d883a 	mov	r22,r23
   41884:	003f0e06 	br	414c0 <_realloc_r+0x148>
   41888:	80800217 	ldw	r2,8(r16)
   4188c:	b8800415 	stw	r2,16(r23)
   41890:	80800317 	ldw	r2,12(r16)
   41894:	b8800515 	stw	r2,20(r23)
   41898:	31001226 	beq	r6,r4,418e4 <_realloc_r+0x56c>
   4189c:	b8800604 	addi	r2,r23,24
   418a0:	80c00404 	addi	r3,r16,16
   418a4:	003f9606 	br	41700 <_realloc_r+0x388>
   418a8:	81000417 	ldw	r4,16(r16)
   418ac:	90800604 	addi	r2,r18,24
   418b0:	80c00604 	addi	r3,r16,24
   418b4:	91000415 	stw	r4,16(r18)
   418b8:	81000517 	ldw	r4,20(r16)
   418bc:	91000515 	stw	r4,20(r18)
   418c0:	003f4606 	br	415dc <_realloc_r+0x264>
   418c4:	80800217 	ldw	r2,8(r16)
   418c8:	b8800415 	stw	r2,16(r23)
   418cc:	80800317 	ldw	r2,12(r16)
   418d0:	b8800515 	stw	r2,20(r23)
   418d4:	31000d26 	beq	r6,r4,4190c <_realloc_r+0x594>
   418d8:	b8800604 	addi	r2,r23,24
   418dc:	80c00404 	addi	r3,r16,16
   418e0:	003f7106 	br	416a8 <_realloc_r+0x330>
   418e4:	81000417 	ldw	r4,16(r16)
   418e8:	b8800804 	addi	r2,r23,32
   418ec:	80c00604 	addi	r3,r16,24
   418f0:	b9000615 	stw	r4,24(r23)
   418f4:	81000517 	ldw	r4,20(r16)
   418f8:	b9000715 	stw	r4,28(r23)
   418fc:	003f8006 	br	41700 <_realloc_r+0x388>
   41900:	9005883a 	mov	r2,r18
   41904:	8007883a 	mov	r3,r16
   41908:	003fac06 	br	417bc <_realloc_r+0x444>
   4190c:	81000417 	ldw	r4,16(r16)
   41910:	b8800804 	addi	r2,r23,32
   41914:	80c00604 	addi	r3,r16,24
   41918:	b9000615 	stw	r4,24(r23)
   4191c:	81000517 	ldw	r4,20(r16)
   41920:	b9000715 	stw	r4,28(r23)
   41924:	003f6006 	br	416a8 <_realloc_r+0x330>
   41928:	9009883a 	mov	r4,r18
   4192c:	800b883a 	mov	r5,r16
   41930:	00411ec0 	call	411ec <memmove>
   41934:	003fa706 	br	417d4 <_realloc_r+0x45c>
   41938:	80800217 	ldw	r2,8(r16)
   4193c:	b8800415 	stw	r2,16(r23)
   41940:	80800317 	ldw	r2,12(r16)
   41944:	b8800515 	stw	r2,20(r23)
   41948:	31000326 	beq	r6,r4,41958 <_realloc_r+0x5e0>
   4194c:	b8800604 	addi	r2,r23,24
   41950:	80c00404 	addi	r3,r16,16
   41954:	003f9906 	br	417bc <_realloc_r+0x444>
   41958:	81000417 	ldw	r4,16(r16)
   4195c:	b8800804 	addi	r2,r23,32
   41960:	80c00604 	addi	r3,r16,24
   41964:	b9000615 	stw	r4,24(r23)
   41968:	81000517 	ldw	r4,20(r16)
   4196c:	b9000715 	stw	r4,28(r23)
   41970:	003f9206 	br	417bc <_realloc_r+0x444>

00041974 <_sbrk_r>:
   41974:	defffd04 	addi	sp,sp,-12
   41978:	dc400115 	stw	r17,4(sp)
   4197c:	dc000015 	stw	r16,0(sp)
   41980:	2023883a 	mov	r17,r4
   41984:	04000174 	movhi	r16,5
   41988:	84228504 	addi	r16,r16,-30188
   4198c:	2809883a 	mov	r4,r5
   41990:	dfc00215 	stw	ra,8(sp)
   41994:	80000015 	stw	zero,0(r16)
   41998:	00435340 	call	43534 <sbrk>
   4199c:	00ffffc4 	movi	r3,-1
   419a0:	10c00526 	beq	r2,r3,419b8 <_sbrk_r+0x44>
   419a4:	dfc00217 	ldw	ra,8(sp)
   419a8:	dc400117 	ldw	r17,4(sp)
   419ac:	dc000017 	ldw	r16,0(sp)
   419b0:	dec00304 	addi	sp,sp,12
   419b4:	f800283a 	ret
   419b8:	80c00017 	ldw	r3,0(r16)
   419bc:	183ff926 	beq	r3,zero,419a4 <_sbrk_r+0x30>
   419c0:	88c00015 	stw	r3,0(r17)
   419c4:	dfc00217 	ldw	ra,8(sp)
   419c8:	dc400117 	ldw	r17,4(sp)
   419cc:	dc000017 	ldw	r16,0(sp)
   419d0:	dec00304 	addi	sp,sp,12
   419d4:	f800283a 	ret

000419d8 <__swsetup_r>:
   419d8:	00800134 	movhi	r2,4
   419dc:	109be304 	addi	r2,r2,28556
   419e0:	10800017 	ldw	r2,0(r2)
   419e4:	defffd04 	addi	sp,sp,-12
   419e8:	dc400115 	stw	r17,4(sp)
   419ec:	dc000015 	stw	r16,0(sp)
   419f0:	dfc00215 	stw	ra,8(sp)
   419f4:	2023883a 	mov	r17,r4
   419f8:	2821883a 	mov	r16,r5
   419fc:	10000226 	beq	r2,zero,41a08 <__swsetup_r+0x30>
   41a00:	10c00e17 	ldw	r3,56(r2)
   41a04:	18003d26 	beq	r3,zero,41afc <__swsetup_r+0x124>
   41a08:	8080030b 	ldhu	r2,12(r16)
   41a0c:	10c0020c 	andi	r3,r2,8
   41a10:	18ffffcc 	andi	r3,r3,65535
   41a14:	18e0001c 	xori	r3,r3,32768
   41a18:	18e00004 	addi	r3,r3,-32768
   41a1c:	18001226 	beq	r3,zero,41a68 <__swsetup_r+0x90>
   41a20:	80c00417 	ldw	r3,16(r16)
   41a24:	18001f26 	beq	r3,zero,41aa4 <__swsetup_r+0xcc>
   41a28:	1100004c 	andi	r4,r2,1
   41a2c:	2000261e 	bne	r4,zero,41ac8 <__swsetup_r+0xf0>
   41a30:	1080008c 	andi	r2,r2,2
   41a34:	10bfffcc 	andi	r2,r2,65535
   41a38:	10a0001c 	xori	r2,r2,32768
   41a3c:	10a00004 	addi	r2,r2,-32768
   41a40:	1000311e 	bne	r2,zero,41b08 <__swsetup_r+0x130>
   41a44:	80800517 	ldw	r2,20(r16)
   41a48:	80800215 	stw	r2,8(r16)
   41a4c:	18002326 	beq	r3,zero,41adc <__swsetup_r+0x104>
   41a50:	0005883a 	mov	r2,zero
   41a54:	dfc00217 	ldw	ra,8(sp)
   41a58:	dc400117 	ldw	r17,4(sp)
   41a5c:	dc000017 	ldw	r16,0(sp)
   41a60:	dec00304 	addi	sp,sp,12
   41a64:	f800283a 	ret
   41a68:	10c0040c 	andi	r3,r2,16
   41a6c:	18ffffcc 	andi	r3,r3,65535
   41a70:	18e0001c 	xori	r3,r3,32768
   41a74:	18e00004 	addi	r3,r3,-32768
   41a78:	18001e26 	beq	r3,zero,41af4 <__swsetup_r+0x11c>
   41a7c:	10c0010c 	andi	r3,r2,4
   41a80:	18ffffcc 	andi	r3,r3,65535
   41a84:	18e0001c 	xori	r3,r3,32768
   41a88:	18e00004 	addi	r3,r3,-32768
   41a8c:	1800211e 	bne	r3,zero,41b14 <__swsetup_r+0x13c>
   41a90:	80c00417 	ldw	r3,16(r16)
   41a94:	11400214 	ori	r5,r2,8
   41a98:	8140030d 	sth	r5,12(r16)
   41a9c:	2805883a 	mov	r2,r5
   41aa0:	183fe11e 	bne	r3,zero,41a28 <__swsetup_r+0x50>
   41aa4:	1140a00c 	andi	r5,r2,640
   41aa8:	01008004 	movi	r4,512
   41aac:	293fde26 	beq	r5,r4,41a28 <__swsetup_r+0x50>
   41ab0:	8809883a 	mov	r4,r17
   41ab4:	800b883a 	mov	r5,r16
   41ab8:	00425bc0 	call	425bc <__smakebuf_r>
   41abc:	8080030b 	ldhu	r2,12(r16)
   41ac0:	80c00417 	ldw	r3,16(r16)
   41ac4:	003fd806 	br	41a28 <__swsetup_r+0x50>
   41ac8:	80800517 	ldw	r2,20(r16)
   41acc:	80000215 	stw	zero,8(r16)
   41ad0:	0085c83a 	sub	r2,zero,r2
   41ad4:	80800615 	stw	r2,24(r16)
   41ad8:	183fdd1e 	bne	r3,zero,41a50 <__swsetup_r+0x78>
   41adc:	8080030b 	ldhu	r2,12(r16)
   41ae0:	1080200c 	andi	r2,r2,128
   41ae4:	10bfffcc 	andi	r2,r2,65535
   41ae8:	10a0001c 	xori	r2,r2,32768
   41aec:	10a00004 	addi	r2,r2,-32768
   41af0:	103fd826 	beq	r2,zero,41a54 <__swsetup_r+0x7c>
   41af4:	00bfffc4 	movi	r2,-1
   41af8:	003fd606 	br	41a54 <__swsetup_r+0x7c>
   41afc:	1009883a 	mov	r4,r2
   41b00:	0041e080 	call	41e08 <__sinit>
   41b04:	003fc006 	br	41a08 <__swsetup_r+0x30>
   41b08:	0005883a 	mov	r2,zero
   41b0c:	80800215 	stw	r2,8(r16)
   41b10:	003fce06 	br	41a4c <__swsetup_r+0x74>
   41b14:	81400c17 	ldw	r5,48(r16)
   41b18:	28000626 	beq	r5,zero,41b34 <__swsetup_r+0x15c>
   41b1c:	80c01004 	addi	r3,r16,64
   41b20:	28c00326 	beq	r5,r3,41b30 <__swsetup_r+0x158>
   41b24:	8809883a 	mov	r4,r17
   41b28:	004218c0 	call	4218c <_free_r>
   41b2c:	8080030b 	ldhu	r2,12(r16)
   41b30:	80000c15 	stw	zero,48(r16)
   41b34:	80c00417 	ldw	r3,16(r16)
   41b38:	013ff6c4 	movi	r4,-37
   41b3c:	2084703a 	and	r2,r4,r2
   41b40:	80000115 	stw	zero,4(r16)
   41b44:	80c00015 	stw	r3,0(r16)
   41b48:	003fd206 	br	41a94 <__swsetup_r+0xbc>

00041b4c <_fflush_r>:
   41b4c:	defffb04 	addi	sp,sp,-20
   41b50:	dcc00315 	stw	r19,12(sp)
   41b54:	dc400115 	stw	r17,4(sp)
   41b58:	dfc00415 	stw	ra,16(sp)
   41b5c:	dc800215 	stw	r18,8(sp)
   41b60:	dc000015 	stw	r16,0(sp)
   41b64:	2027883a 	mov	r19,r4
   41b68:	2823883a 	mov	r17,r5
   41b6c:	20000226 	beq	r4,zero,41b78 <_fflush_r+0x2c>
   41b70:	20800e17 	ldw	r2,56(r4)
   41b74:	10005726 	beq	r2,zero,41cd4 <_fflush_r+0x188>
   41b78:	8880030b 	ldhu	r2,12(r17)
   41b7c:	10c0020c 	andi	r3,r2,8
   41b80:	18ffffcc 	andi	r3,r3,65535
   41b84:	18e0001c 	xori	r3,r3,32768
   41b88:	18e00004 	addi	r3,r3,-32768
   41b8c:	1800311e 	bne	r3,zero,41c54 <_fflush_r+0x108>
   41b90:	89000117 	ldw	r4,4(r17)
   41b94:	10c20014 	ori	r3,r2,2048
   41b98:	88c0030d 	sth	r3,12(r17)
   41b9c:	180b883a 	mov	r5,r3
   41ba0:	0100520e 	bge	zero,r4,41cec <_fflush_r+0x1a0>
   41ba4:	88c00a17 	ldw	r3,40(r17)
   41ba8:	18002226 	beq	r3,zero,41c34 <_fflush_r+0xe8>
   41bac:	1084000c 	andi	r2,r2,4096
   41bb0:	10bfffcc 	andi	r2,r2,65535
   41bb4:	10a0001c 	xori	r2,r2,32768
   41bb8:	10a00004 	addi	r2,r2,-32768
   41bbc:	10004e26 	beq	r2,zero,41cf8 <_fflush_r+0x1ac>
   41bc0:	8c001417 	ldw	r16,80(r17)
   41bc4:	2940010c 	andi	r5,r5,4
   41bc8:	297fffcc 	andi	r5,r5,65535
   41bcc:	2960001c 	xori	r5,r5,32768
   41bd0:	29600004 	addi	r5,r5,-32768
   41bd4:	28000626 	beq	r5,zero,41bf0 <_fflush_r+0xa4>
   41bd8:	89000117 	ldw	r4,4(r17)
   41bdc:	88800c17 	ldw	r2,48(r17)
   41be0:	8121c83a 	sub	r16,r16,r4
   41be4:	10000226 	beq	r2,zero,41bf0 <_fflush_r+0xa4>
   41be8:	88800f17 	ldw	r2,60(r17)
   41bec:	80a1c83a 	sub	r16,r16,r2
   41bf0:	89400717 	ldw	r5,28(r17)
   41bf4:	9809883a 	mov	r4,r19
   41bf8:	800d883a 	mov	r6,r16
   41bfc:	000f883a 	mov	r7,zero
   41c00:	183ee83a 	callr	r3
   41c04:	8080281e 	bne	r16,r2,41ca8 <_fflush_r+0x15c>
   41c08:	8880030b 	ldhu	r2,12(r17)
   41c0c:	88c00417 	ldw	r3,16(r17)
   41c10:	88000115 	stw	zero,4(r17)
   41c14:	113dffcc 	andi	r4,r2,63487
   41c18:	1084000c 	andi	r2,r2,4096
   41c1c:	10bfffcc 	andi	r2,r2,65535
   41c20:	10a0001c 	xori	r2,r2,32768
   41c24:	8900030d 	sth	r4,12(r17)
   41c28:	88c00015 	stw	r3,0(r17)
   41c2c:	10a00004 	addi	r2,r2,-32768
   41c30:	10002c1e 	bne	r2,zero,41ce4 <_fflush_r+0x198>
   41c34:	0005883a 	mov	r2,zero
   41c38:	dfc00417 	ldw	ra,16(sp)
   41c3c:	dcc00317 	ldw	r19,12(sp)
   41c40:	dc800217 	ldw	r18,8(sp)
   41c44:	dc400117 	ldw	r17,4(sp)
   41c48:	dc000017 	ldw	r16,0(sp)
   41c4c:	dec00504 	addi	sp,sp,20
   41c50:	f800283a 	ret
   41c54:	8c800417 	ldw	r18,16(r17)
   41c58:	903ff626 	beq	r18,zero,41c34 <_fflush_r+0xe8>
   41c5c:	8c000017 	ldw	r16,0(r17)
   41c60:	108000cc 	andi	r2,r2,3
   41c64:	8c800015 	stw	r18,0(r17)
   41c68:	84a1c83a 	sub	r16,r16,r18
   41c6c:	10001b1e 	bne	r2,zero,41cdc <_fflush_r+0x190>
   41c70:	88800517 	ldw	r2,20(r17)
   41c74:	88800215 	stw	r2,8(r17)
   41c78:	04000316 	blt	zero,r16,41c88 <_fflush_r+0x13c>
   41c7c:	003fed06 	br	41c34 <_fflush_r+0xe8>
   41c80:	90a5883a 	add	r18,r18,r2
   41c84:	043feb0e 	bge	zero,r16,41c34 <_fflush_r+0xe8>
   41c88:	88800917 	ldw	r2,36(r17)
   41c8c:	89400717 	ldw	r5,28(r17)
   41c90:	800f883a 	mov	r7,r16
   41c94:	900d883a 	mov	r6,r18
   41c98:	9809883a 	mov	r4,r19
   41c9c:	103ee83a 	callr	r2
   41ca0:	80a1c83a 	sub	r16,r16,r2
   41ca4:	00bff616 	blt	zero,r2,41c80 <_fflush_r+0x134>
   41ca8:	88c0030b 	ldhu	r3,12(r17)
   41cac:	00bfffc4 	movi	r2,-1
   41cb0:	18c01014 	ori	r3,r3,64
   41cb4:	88c0030d 	sth	r3,12(r17)
   41cb8:	dfc00417 	ldw	ra,16(sp)
   41cbc:	dcc00317 	ldw	r19,12(sp)
   41cc0:	dc800217 	ldw	r18,8(sp)
   41cc4:	dc400117 	ldw	r17,4(sp)
   41cc8:	dc000017 	ldw	r16,0(sp)
   41ccc:	dec00504 	addi	sp,sp,20
   41cd0:	f800283a 	ret
   41cd4:	0041e080 	call	41e08 <__sinit>
   41cd8:	003fa706 	br	41b78 <_fflush_r+0x2c>
   41cdc:	0005883a 	mov	r2,zero
   41ce0:	003fe406 	br	41c74 <_fflush_r+0x128>
   41ce4:	8c001415 	stw	r16,80(r17)
   41ce8:	003fd206 	br	41c34 <_fflush_r+0xe8>
   41cec:	88c00f17 	ldw	r3,60(r17)
   41cf0:	00ffac16 	blt	zero,r3,41ba4 <_fflush_r+0x58>
   41cf4:	003fcf06 	br	41c34 <_fflush_r+0xe8>
   41cf8:	89400717 	ldw	r5,28(r17)
   41cfc:	9809883a 	mov	r4,r19
   41d00:	000d883a 	mov	r6,zero
   41d04:	01c00044 	movi	r7,1
   41d08:	183ee83a 	callr	r3
   41d0c:	1021883a 	mov	r16,r2
   41d10:	00bfffc4 	movi	r2,-1
   41d14:	80800326 	beq	r16,r2,41d24 <_fflush_r+0x1d8>
   41d18:	8940030b 	ldhu	r5,12(r17)
   41d1c:	88c00a17 	ldw	r3,40(r17)
   41d20:	003fa806 	br	41bc4 <_fflush_r+0x78>
   41d24:	98c00017 	ldw	r3,0(r19)
   41d28:	00800744 	movi	r2,29
   41d2c:	18bfde1e 	bne	r3,r2,41ca8 <_fflush_r+0x15c>
   41d30:	003fc006 	br	41c34 <_fflush_r+0xe8>

00041d34 <fflush>:
   41d34:	200b883a 	mov	r5,r4
   41d38:	20000426 	beq	r4,zero,41d4c <fflush+0x18>
   41d3c:	00800134 	movhi	r2,4
   41d40:	109be304 	addi	r2,r2,28556
   41d44:	11000017 	ldw	r4,0(r2)
   41d48:	0041b4c1 	jmpi	41b4c <_fflush_r>
   41d4c:	00800134 	movhi	r2,4
   41d50:	109be204 	addi	r2,r2,28552
   41d54:	11000017 	ldw	r4,0(r2)
   41d58:	01400134 	movhi	r5,4
   41d5c:	2946d304 	addi	r5,r5,6988
   41d60:	00425041 	jmpi	42504 <_fwalk_reent>

00041d64 <__fp_lock>:
   41d64:	0005883a 	mov	r2,zero
   41d68:	f800283a 	ret

00041d6c <__fp_unlock>:
   41d6c:	0005883a 	mov	r2,zero
   41d70:	f800283a 	ret

00041d74 <_cleanup_r>:
   41d74:	01400134 	movhi	r5,4
   41d78:	294ae304 	addi	r5,r5,11148
   41d7c:	004245c1 	jmpi	4245c <_fwalk>

00041d80 <__sfmoreglue>:
   41d80:	defffc04 	addi	sp,sp,-16
   41d84:	dc800215 	stw	r18,8(sp)
   41d88:	2825883a 	mov	r18,r5
   41d8c:	dc000015 	stw	r16,0(sp)
   41d90:	01401704 	movi	r5,92
   41d94:	2021883a 	mov	r16,r4
   41d98:	9009883a 	mov	r4,r18
   41d9c:	dfc00315 	stw	ra,12(sp)
   41da0:	dc400115 	stw	r17,4(sp)
   41da4:	0042d440 	call	42d44 <__mulsi3>
   41da8:	8009883a 	mov	r4,r16
   41dac:	11400304 	addi	r5,r2,12
   41db0:	1023883a 	mov	r17,r2
   41db4:	00408300 	call	40830 <_malloc_r>
   41db8:	1021883a 	mov	r16,r2
   41dbc:	10000726 	beq	r2,zero,41ddc <__sfmoreglue+0x5c>
   41dc0:	11000304 	addi	r4,r2,12
   41dc4:	10000015 	stw	zero,0(r2)
   41dc8:	14800115 	stw	r18,4(r2)
   41dcc:	11000215 	stw	r4,8(r2)
   41dd0:	000b883a 	mov	r5,zero
   41dd4:	880d883a 	mov	r6,r17
   41dd8:	00427640 	call	42764 <memset>
   41ddc:	8005883a 	mov	r2,r16
   41de0:	dfc00317 	ldw	ra,12(sp)
   41de4:	dc800217 	ldw	r18,8(sp)
   41de8:	dc400117 	ldw	r17,4(sp)
   41dec:	dc000017 	ldw	r16,0(sp)
   41df0:	dec00404 	addi	sp,sp,16
   41df4:	f800283a 	ret

00041df8 <_cleanup>:
   41df8:	00800134 	movhi	r2,4
   41dfc:	109be204 	addi	r2,r2,28552
   41e00:	11000017 	ldw	r4,0(r2)
   41e04:	0041d741 	jmpi	41d74 <_cleanup_r>

00041e08 <__sinit>:
   41e08:	20800e17 	ldw	r2,56(r4)
   41e0c:	1000401e 	bne	r2,zero,41f10 <__sinit+0x108>
   41e10:	21400117 	ldw	r5,4(r4)
   41e14:	01800134 	movhi	r6,4
   41e18:	31875d04 	addi	r6,r6,7540
   41e1c:	20c00217 	ldw	r3,8(r4)
   41e20:	21800f15 	stw	r6,60(r4)
   41e24:	2080bb04 	addi	r2,r4,748
   41e28:	02400044 	movi	r9,1
   41e2c:	018000c4 	movi	r6,3
   41e30:	2180b915 	stw	r6,740(r4)
   41e34:	2080ba15 	stw	r2,744(r4)
   41e38:	22400e15 	stw	r9,56(r4)
   41e3c:	20800317 	ldw	r2,12(r4)
   41e40:	2000b815 	stw	zero,736(r4)
   41e44:	02000134 	movhi	r8,4
   41e48:	420a1004 	addi	r8,r8,10304
   41e4c:	01c00134 	movhi	r7,4
   41e50:	39ca2504 	addi	r7,r7,10388
   41e54:	01800134 	movhi	r6,4
   41e58:	318a4704 	addi	r6,r6,10524
   41e5c:	01000134 	movhi	r4,4
   41e60:	210a5e04 	addi	r4,r4,10616
   41e64:	02800104 	movi	r10,4
   41e68:	28000015 	stw	zero,0(r5)
   41e6c:	28000115 	stw	zero,4(r5)
   41e70:	28000215 	stw	zero,8(r5)
   41e74:	2a80030d 	sth	r10,12(r5)
   41e78:	2800038d 	sth	zero,14(r5)
   41e7c:	28000415 	stw	zero,16(r5)
   41e80:	28000515 	stw	zero,20(r5)
   41e84:	28000615 	stw	zero,24(r5)
   41e88:	29400715 	stw	r5,28(r5)
   41e8c:	2a000815 	stw	r8,32(r5)
   41e90:	29c00915 	stw	r7,36(r5)
   41e94:	29800a15 	stw	r6,40(r5)
   41e98:	29000b15 	stw	r4,44(r5)
   41e9c:	01400284 	movi	r5,10
   41ea0:	18000015 	stw	zero,0(r3)
   41ea4:	18000115 	stw	zero,4(r3)
   41ea8:	18000215 	stw	zero,8(r3)
   41eac:	1940030d 	sth	r5,12(r3)
   41eb0:	1a40038d 	sth	r9,14(r3)
   41eb4:	18000415 	stw	zero,16(r3)
   41eb8:	18000515 	stw	zero,20(r3)
   41ebc:	18000615 	stw	zero,24(r3)
   41ec0:	18c00715 	stw	r3,28(r3)
   41ec4:	1a000815 	stw	r8,32(r3)
   41ec8:	19c00915 	stw	r7,36(r3)
   41ecc:	19800a15 	stw	r6,40(r3)
   41ed0:	19000b15 	stw	r4,44(r3)
   41ed4:	00c00484 	movi	r3,18
   41ed8:	10c0030d 	sth	r3,12(r2)
   41edc:	00c00084 	movi	r3,2
   41ee0:	10000015 	stw	zero,0(r2)
   41ee4:	10000115 	stw	zero,4(r2)
   41ee8:	10000215 	stw	zero,8(r2)
   41eec:	10c0038d 	sth	r3,14(r2)
   41ef0:	10000415 	stw	zero,16(r2)
   41ef4:	10000515 	stw	zero,20(r2)
   41ef8:	10000615 	stw	zero,24(r2)
   41efc:	10800715 	stw	r2,28(r2)
   41f00:	12000815 	stw	r8,32(r2)
   41f04:	11c00915 	stw	r7,36(r2)
   41f08:	11800a15 	stw	r6,40(r2)
   41f0c:	11000b15 	stw	r4,44(r2)
   41f10:	f800283a 	ret

00041f14 <__sfp>:
   41f14:	defffc04 	addi	sp,sp,-16
   41f18:	00800134 	movhi	r2,4
   41f1c:	109be204 	addi	r2,r2,28552
   41f20:	dc400115 	stw	r17,4(sp)
   41f24:	14400017 	ldw	r17,0(r2)
   41f28:	dc800215 	stw	r18,8(sp)
   41f2c:	dfc00315 	stw	ra,12(sp)
   41f30:	88800e17 	ldw	r2,56(r17)
   41f34:	dc000015 	stw	r16,0(sp)
   41f38:	2025883a 	mov	r18,r4
   41f3c:	10002826 	beq	r2,zero,41fe0 <__sfp+0xcc>
   41f40:	8c40b804 	addi	r17,r17,736
   41f44:	043fffc4 	movi	r16,-1
   41f48:	89400117 	ldw	r5,4(r17)
   41f4c:	88800217 	ldw	r2,8(r17)
   41f50:	297fffc4 	addi	r5,r5,-1
   41f54:	28000a16 	blt	r5,zero,41f80 <__sfp+0x6c>
   41f58:	10c0030f 	ldh	r3,12(r2)
   41f5c:	18000c26 	beq	r3,zero,41f90 <__sfp+0x7c>
   41f60:	10c01a04 	addi	r3,r2,104
   41f64:	00000206 	br	41f70 <__sfp+0x5c>
   41f68:	19bfe90f 	ldh	r6,-92(r3)
   41f6c:	30000826 	beq	r6,zero,41f90 <__sfp+0x7c>
   41f70:	297fffc4 	addi	r5,r5,-1
   41f74:	18bffd04 	addi	r2,r3,-12
   41f78:	18c01704 	addi	r3,r3,92
   41f7c:	2c3ffa1e 	bne	r5,r16,41f68 <__sfp+0x54>
   41f80:	88800017 	ldw	r2,0(r17)
   41f84:	10001926 	beq	r2,zero,41fec <__sfp+0xd8>
   41f88:	1023883a 	mov	r17,r2
   41f8c:	003fee06 	br	41f48 <__sfp+0x34>
   41f90:	00ffffc4 	movi	r3,-1
   41f94:	10c0038d 	sth	r3,14(r2)
   41f98:	00c00044 	movi	r3,1
   41f9c:	10c0030d 	sth	r3,12(r2)
   41fa0:	10000015 	stw	zero,0(r2)
   41fa4:	10000215 	stw	zero,8(r2)
   41fa8:	10000115 	stw	zero,4(r2)
   41fac:	10000415 	stw	zero,16(r2)
   41fb0:	10000515 	stw	zero,20(r2)
   41fb4:	10000615 	stw	zero,24(r2)
   41fb8:	10000c15 	stw	zero,48(r2)
   41fbc:	10000d15 	stw	zero,52(r2)
   41fc0:	10001115 	stw	zero,68(r2)
   41fc4:	10001215 	stw	zero,72(r2)
   41fc8:	dfc00317 	ldw	ra,12(sp)
   41fcc:	dc800217 	ldw	r18,8(sp)
   41fd0:	dc400117 	ldw	r17,4(sp)
   41fd4:	dc000017 	ldw	r16,0(sp)
   41fd8:	dec00404 	addi	sp,sp,16
   41fdc:	f800283a 	ret
   41fe0:	8809883a 	mov	r4,r17
   41fe4:	0041e080 	call	41e08 <__sinit>
   41fe8:	003fd506 	br	41f40 <__sfp+0x2c>
   41fec:	9009883a 	mov	r4,r18
   41ff0:	01400104 	movi	r5,4
   41ff4:	0041d800 	call	41d80 <__sfmoreglue>
   41ff8:	88800015 	stw	r2,0(r17)
   41ffc:	103fe21e 	bne	r2,zero,41f88 <__sfp+0x74>
   42000:	00800304 	movi	r2,12
   42004:	90800015 	stw	r2,0(r18)
   42008:	0005883a 	mov	r2,zero
   4200c:	003fee06 	br	41fc8 <__sfp+0xb4>

00042010 <__sfp_lock_acquire>:
   42010:	f800283a 	ret

00042014 <__sfp_lock_release>:
   42014:	f800283a 	ret

00042018 <__sinit_lock_acquire>:
   42018:	f800283a 	ret

0004201c <__sinit_lock_release>:
   4201c:	f800283a 	ret

00042020 <__fp_lock_all>:
   42020:	00800134 	movhi	r2,4
   42024:	109be304 	addi	r2,r2,28556
   42028:	11000017 	ldw	r4,0(r2)
   4202c:	01400134 	movhi	r5,4
   42030:	29475904 	addi	r5,r5,7524
   42034:	004245c1 	jmpi	4245c <_fwalk>

00042038 <__fp_unlock_all>:
   42038:	00800134 	movhi	r2,4
   4203c:	109be304 	addi	r2,r2,28556
   42040:	11000017 	ldw	r4,0(r2)
   42044:	01400134 	movhi	r5,4
   42048:	29475b04 	addi	r5,r5,7532
   4204c:	004245c1 	jmpi	4245c <_fwalk>

00042050 <_malloc_trim_r>:
   42050:	defffb04 	addi	sp,sp,-20
   42054:	dcc00315 	stw	r19,12(sp)
   42058:	dc800215 	stw	r18,8(sp)
   4205c:	dc400115 	stw	r17,4(sp)
   42060:	dc000015 	stw	r16,0(sp)
   42064:	2827883a 	mov	r19,r5
   42068:	dfc00415 	stw	ra,16(sp)
   4206c:	04400134 	movhi	r17,4
   42070:	8c565e04 	addi	r17,r17,22904
   42074:	2021883a 	mov	r16,r4
   42078:	00433300 	call	43330 <__malloc_lock>
   4207c:	88800217 	ldw	r2,8(r17)
   42080:	14800117 	ldw	r18,4(r2)
   42084:	00bfff04 	movi	r2,-4
   42088:	90a4703a 	and	r18,r18,r2
   4208c:	9083fbc4 	addi	r2,r18,4079
   42090:	14e7c83a 	sub	r19,r2,r19
   42094:	9826d33a 	srli	r19,r19,12
   42098:	0083ffc4 	movi	r2,4095
   4209c:	9cffffc4 	addi	r19,r19,-1
   420a0:	9826933a 	slli	r19,r19,12
   420a4:	14c0060e 	bge	r2,r19,420c0 <_malloc_trim_r+0x70>
   420a8:	8009883a 	mov	r4,r16
   420ac:	000b883a 	mov	r5,zero
   420b0:	00419740 	call	41974 <_sbrk_r>
   420b4:	88c00217 	ldw	r3,8(r17)
   420b8:	1c87883a 	add	r3,r3,r18
   420bc:	10c00a26 	beq	r2,r3,420e8 <_malloc_trim_r+0x98>
   420c0:	8009883a 	mov	r4,r16
   420c4:	00433500 	call	43350 <__malloc_unlock>
   420c8:	0005883a 	mov	r2,zero
   420cc:	dfc00417 	ldw	ra,16(sp)
   420d0:	dcc00317 	ldw	r19,12(sp)
   420d4:	dc800217 	ldw	r18,8(sp)
   420d8:	dc400117 	ldw	r17,4(sp)
   420dc:	dc000017 	ldw	r16,0(sp)
   420e0:	dec00504 	addi	sp,sp,20
   420e4:	f800283a 	ret
   420e8:	8009883a 	mov	r4,r16
   420ec:	04cbc83a 	sub	r5,zero,r19
   420f0:	00419740 	call	41974 <_sbrk_r>
   420f4:	00ffffc4 	movi	r3,-1
   420f8:	10c01326 	beq	r2,r3,42148 <_malloc_trim_r+0xf8>
   420fc:	00800174 	movhi	r2,5
   42100:	10a28c04 	addi	r2,r2,-30160
   42104:	11000017 	ldw	r4,0(r2)
   42108:	88c00217 	ldw	r3,8(r17)
   4210c:	94e5c83a 	sub	r18,r18,r19
   42110:	94800054 	ori	r18,r18,1
   42114:	24e7c83a 	sub	r19,r4,r19
   42118:	1c800115 	stw	r18,4(r3)
   4211c:	8009883a 	mov	r4,r16
   42120:	14c00015 	stw	r19,0(r2)
   42124:	00433500 	call	43350 <__malloc_unlock>
   42128:	00800044 	movi	r2,1
   4212c:	dfc00417 	ldw	ra,16(sp)
   42130:	dcc00317 	ldw	r19,12(sp)
   42134:	dc800217 	ldw	r18,8(sp)
   42138:	dc400117 	ldw	r17,4(sp)
   4213c:	dc000017 	ldw	r16,0(sp)
   42140:	dec00504 	addi	sp,sp,20
   42144:	f800283a 	ret
   42148:	8009883a 	mov	r4,r16
   4214c:	000b883a 	mov	r5,zero
   42150:	00419740 	call	41974 <_sbrk_r>
   42154:	88c00217 	ldw	r3,8(r17)
   42158:	014003c4 	movi	r5,15
   4215c:	10c9c83a 	sub	r4,r2,r3
   42160:	293fd70e 	bge	r5,r4,420c0 <_malloc_trim_r+0x70>
   42164:	01400134 	movhi	r5,4
   42168:	295be404 	addi	r5,r5,28560
   4216c:	29400017 	ldw	r5,0(r5)
   42170:	21000054 	ori	r4,r4,1
   42174:	19000115 	stw	r4,4(r3)
   42178:	1145c83a 	sub	r2,r2,r5
   4217c:	01400174 	movhi	r5,5
   42180:	29628c04 	addi	r5,r5,-30160
   42184:	28800015 	stw	r2,0(r5)
   42188:	003fcd06 	br	420c0 <_malloc_trim_r+0x70>

0004218c <_free_r>:
   4218c:	defffd04 	addi	sp,sp,-12
   42190:	dc400115 	stw	r17,4(sp)
   42194:	dc000015 	stw	r16,0(sp)
   42198:	dfc00215 	stw	ra,8(sp)
   4219c:	2821883a 	mov	r16,r5
   421a0:	2023883a 	mov	r17,r4
   421a4:	28004b26 	beq	r5,zero,422d4 <_free_r+0x148>
   421a8:	00433300 	call	43330 <__malloc_lock>
   421ac:	823fff17 	ldw	r8,-4(r16)
   421b0:	00bfff84 	movi	r2,-2
   421b4:	81bffe04 	addi	r6,r16,-8
   421b8:	4084703a 	and	r2,r8,r2
   421bc:	3087883a 	add	r3,r6,r2
   421c0:	01400134 	movhi	r5,4
   421c4:	29565e04 	addi	r5,r5,22904
   421c8:	1a400117 	ldw	r9,4(r3)
   421cc:	29000217 	ldw	r4,8(r5)
   421d0:	01ffff04 	movi	r7,-4
   421d4:	49ce703a 	and	r7,r9,r7
   421d8:	20c06526 	beq	r4,r3,42370 <_free_r+0x1e4>
   421dc:	19c00115 	stw	r7,4(r3)
   421e0:	4200004c 	andi	r8,r8,1
   421e4:	40003026 	beq	r8,zero,422a8 <_free_r+0x11c>
   421e8:	0009883a 	mov	r4,zero
   421ec:	19d1883a 	add	r8,r3,r7
   421f0:	42000117 	ldw	r8,4(r8)
   421f4:	4200004c 	andi	r8,r8,1
   421f8:	4000061e 	bne	r8,zero,42214 <_free_r+0x88>
   421fc:	11c5883a 	add	r2,r2,r7
   42200:	19c00217 	ldw	r7,8(r3)
   42204:	20004e26 	beq	r4,zero,42340 <_free_r+0x1b4>
   42208:	18c00317 	ldw	r3,12(r3)
   4220c:	38c00315 	stw	r3,12(r7)
   42210:	19c00215 	stw	r7,8(r3)
   42214:	11c00054 	ori	r7,r2,1
   42218:	3087883a 	add	r3,r6,r2
   4221c:	31c00115 	stw	r7,4(r6)
   42220:	18800015 	stw	r2,0(r3)
   42224:	20001a1e 	bne	r4,zero,42290 <_free_r+0x104>
   42228:	00c07fc4 	movi	r3,511
   4222c:	18802e2e 	bgeu	r3,r2,422e8 <_free_r+0x15c>
   42230:	1006d27a 	srli	r3,r2,9
   42234:	01000104 	movi	r4,4
   42238:	20c06636 	bltu	r4,r3,423d4 <_free_r+0x248>
   4223c:	1008d1ba 	srli	r4,r2,6
   42240:	21000e04 	addi	r4,r4,56
   42244:	210f883a 	add	r7,r4,r4
   42248:	39cf883a 	add	r7,r7,r7
   4224c:	39cf883a 	add	r7,r7,r7
   42250:	29cf883a 	add	r7,r5,r7
   42254:	38c00217 	ldw	r3,8(r7)
   42258:	01400134 	movhi	r5,4
   4225c:	29565e04 	addi	r5,r5,22904
   42260:	19c06126 	beq	r3,r7,423e8 <_free_r+0x25c>
   42264:	013fff04 	movi	r4,-4
   42268:	19400117 	ldw	r5,4(r3)
   4226c:	290a703a 	and	r5,r5,r4
   42270:	1140022e 	bgeu	r2,r5,4227c <_free_r+0xf0>
   42274:	18c00217 	ldw	r3,8(r3)
   42278:	38fffb1e 	bne	r7,r3,42268 <_free_r+0xdc>
   4227c:	18800317 	ldw	r2,12(r3)
   42280:	30800315 	stw	r2,12(r6)
   42284:	30c00215 	stw	r3,8(r6)
   42288:	11800215 	stw	r6,8(r2)
   4228c:	19800315 	stw	r6,12(r3)
   42290:	8809883a 	mov	r4,r17
   42294:	dfc00217 	ldw	ra,8(sp)
   42298:	dc400117 	ldw	r17,4(sp)
   4229c:	dc000017 	ldw	r16,0(sp)
   422a0:	dec00304 	addi	sp,sp,12
   422a4:	00433501 	jmpi	43350 <__malloc_unlock>
   422a8:	813ffe17 	ldw	r4,-8(r16)
   422ac:	2a400204 	addi	r9,r5,8
   422b0:	310dc83a 	sub	r6,r6,r4
   422b4:	32000217 	ldw	r8,8(r6)
   422b8:	1105883a 	add	r2,r2,r4
   422bc:	42404326 	beq	r8,r9,423cc <_free_r+0x240>
   422c0:	32400317 	ldw	r9,12(r6)
   422c4:	0009883a 	mov	r4,zero
   422c8:	42400315 	stw	r9,12(r8)
   422cc:	4a000215 	stw	r8,8(r9)
   422d0:	003fc606 	br	421ec <_free_r+0x60>
   422d4:	dfc00217 	ldw	ra,8(sp)
   422d8:	dc400117 	ldw	r17,4(sp)
   422dc:	dc000017 	ldw	r16,0(sp)
   422e0:	dec00304 	addi	sp,sp,12
   422e4:	f800283a 	ret
   422e8:	1004d0fa 	srli	r2,r2,3
   422ec:	02000044 	movi	r8,1
   422f0:	29c00117 	ldw	r7,4(r5)
   422f4:	1087883a 	add	r3,r2,r2
   422f8:	18c7883a 	add	r3,r3,r3
   422fc:	1005d0ba 	srai	r2,r2,2
   42300:	18c7883a 	add	r3,r3,r3
   42304:	28c7883a 	add	r3,r5,r3
   42308:	19000217 	ldw	r4,8(r3)
   4230c:	4084983a 	sll	r2,r8,r2
   42310:	30c00315 	stw	r3,12(r6)
   42314:	31000215 	stw	r4,8(r6)
   42318:	11c4b03a 	or	r2,r2,r7
   4231c:	21800315 	stw	r6,12(r4)
   42320:	8809883a 	mov	r4,r17
   42324:	28800115 	stw	r2,4(r5)
   42328:	19800215 	stw	r6,8(r3)
   4232c:	dfc00217 	ldw	ra,8(sp)
   42330:	dc400117 	ldw	r17,4(sp)
   42334:	dc000017 	ldw	r16,0(sp)
   42338:	dec00304 	addi	sp,sp,12
   4233c:	00433501 	jmpi	43350 <__malloc_unlock>
   42340:	02000134 	movhi	r8,4
   42344:	42166004 	addi	r8,r8,22912
   42348:	3a3faf1e 	bne	r7,r8,42208 <_free_r+0x7c>
   4234c:	29800515 	stw	r6,20(r5)
   42350:	29800415 	stw	r6,16(r5)
   42354:	11000054 	ori	r4,r2,1
   42358:	3087883a 	add	r3,r6,r2
   4235c:	31c00315 	stw	r7,12(r6)
   42360:	31c00215 	stw	r7,8(r6)
   42364:	31000115 	stw	r4,4(r6)
   42368:	18800015 	stw	r2,0(r3)
   4236c:	003fc806 	br	42290 <_free_r+0x104>
   42370:	4200004c 	andi	r8,r8,1
   42374:	3885883a 	add	r2,r7,r2
   42378:	4000071e 	bne	r8,zero,42398 <_free_r+0x20c>
   4237c:	81fffe17 	ldw	r7,-8(r16)
   42380:	31cdc83a 	sub	r6,r6,r7
   42384:	30c00317 	ldw	r3,12(r6)
   42388:	31000217 	ldw	r4,8(r6)
   4238c:	11c5883a 	add	r2,r2,r7
   42390:	20c00315 	stw	r3,12(r4)
   42394:	19000215 	stw	r4,8(r3)
   42398:	00c00134 	movhi	r3,4
   4239c:	18dbe504 	addi	r3,r3,28564
   423a0:	18c00017 	ldw	r3,0(r3)
   423a4:	11000054 	ori	r4,r2,1
   423a8:	31000115 	stw	r4,4(r6)
   423ac:	29800215 	stw	r6,8(r5)
   423b0:	10ffb736 	bltu	r2,r3,42290 <_free_r+0x104>
   423b4:	00800174 	movhi	r2,5
   423b8:	10a28404 	addi	r2,r2,-30192
   423bc:	11400017 	ldw	r5,0(r2)
   423c0:	8809883a 	mov	r4,r17
   423c4:	00420500 	call	42050 <_malloc_trim_r>
   423c8:	003fb106 	br	42290 <_free_r+0x104>
   423cc:	01000044 	movi	r4,1
   423d0:	003f8606 	br	421ec <_free_r+0x60>
   423d4:	01000504 	movi	r4,20
   423d8:	20c00b36 	bltu	r4,r3,42408 <_free_r+0x27c>
   423dc:	190016c4 	addi	r4,r3,91
   423e0:	210f883a 	add	r7,r4,r4
   423e4:	003f9806 	br	42248 <_free_r+0xbc>
   423e8:	2009d0ba 	srai	r4,r4,2
   423ec:	00800044 	movi	r2,1
   423f0:	29c00117 	ldw	r7,4(r5)
   423f4:	1108983a 	sll	r4,r2,r4
   423f8:	1805883a 	mov	r2,r3
   423fc:	21c8b03a 	or	r4,r4,r7
   42400:	29000115 	stw	r4,4(r5)
   42404:	003f9e06 	br	42280 <_free_r+0xf4>
   42408:	01001504 	movi	r4,84
   4240c:	20c00436 	bltu	r4,r3,42420 <_free_r+0x294>
   42410:	1008d33a 	srli	r4,r2,12
   42414:	21001b84 	addi	r4,r4,110
   42418:	210f883a 	add	r7,r4,r4
   4241c:	003f8a06 	br	42248 <_free_r+0xbc>
   42420:	01005504 	movi	r4,340
   42424:	20c00436 	bltu	r4,r3,42438 <_free_r+0x2ac>
   42428:	1008d3fa 	srli	r4,r2,15
   4242c:	21001dc4 	addi	r4,r4,119
   42430:	210f883a 	add	r7,r4,r4
   42434:	003f8406 	br	42248 <_free_r+0xbc>
   42438:	01015504 	movi	r4,1364
   4243c:	20c00436 	bltu	r4,r3,42450 <_free_r+0x2c4>
   42440:	1008d4ba 	srli	r4,r2,18
   42444:	21001f04 	addi	r4,r4,124
   42448:	210f883a 	add	r7,r4,r4
   4244c:	003f7e06 	br	42248 <_free_r+0xbc>
   42450:	01c03f04 	movi	r7,252
   42454:	01001f84 	movi	r4,126
   42458:	003f7b06 	br	42248 <_free_r+0xbc>

0004245c <_fwalk>:
   4245c:	defff904 	addi	sp,sp,-28
   42460:	dcc00315 	stw	r19,12(sp)
   42464:	24c0b804 	addi	r19,r4,736
   42468:	dd400515 	stw	r21,20(sp)
   4246c:	dd000415 	stw	r20,16(sp)
   42470:	dfc00615 	stw	ra,24(sp)
   42474:	dc800215 	stw	r18,8(sp)
   42478:	dc400115 	stw	r17,4(sp)
   4247c:	dc000015 	stw	r16,0(sp)
   42480:	282b883a 	mov	r21,r5
   42484:	0029883a 	mov	r20,zero
   42488:	00420100 	call	42010 <__sfp_lock_acquire>
   4248c:	98001226 	beq	r19,zero,424d8 <_fwalk+0x7c>
   42490:	04bfffc4 	movi	r18,-1
   42494:	9c400117 	ldw	r17,4(r19)
   42498:	9c000217 	ldw	r16,8(r19)
   4249c:	8c7fffc4 	addi	r17,r17,-1
   424a0:	88000b16 	blt	r17,zero,424d0 <_fwalk+0x74>
   424a4:	84000304 	addi	r16,r16,12
   424a8:	80c0000f 	ldh	r3,0(r16)
   424ac:	8c7fffc4 	addi	r17,r17,-1
   424b0:	813ffd04 	addi	r4,r16,-12
   424b4:	18000426 	beq	r3,zero,424c8 <_fwalk+0x6c>
   424b8:	80c0008f 	ldh	r3,2(r16)
   424bc:	1c800226 	beq	r3,r18,424c8 <_fwalk+0x6c>
   424c0:	a83ee83a 	callr	r21
   424c4:	a0a8b03a 	or	r20,r20,r2
   424c8:	84001704 	addi	r16,r16,92
   424cc:	8cbff61e 	bne	r17,r18,424a8 <_fwalk+0x4c>
   424d0:	9cc00017 	ldw	r19,0(r19)
   424d4:	983fef1e 	bne	r19,zero,42494 <_fwalk+0x38>
   424d8:	00420140 	call	42014 <__sfp_lock_release>
   424dc:	a005883a 	mov	r2,r20
   424e0:	dfc00617 	ldw	ra,24(sp)
   424e4:	dd400517 	ldw	r21,20(sp)
   424e8:	dd000417 	ldw	r20,16(sp)
   424ec:	dcc00317 	ldw	r19,12(sp)
   424f0:	dc800217 	ldw	r18,8(sp)
   424f4:	dc400117 	ldw	r17,4(sp)
   424f8:	dc000017 	ldw	r16,0(sp)
   424fc:	dec00704 	addi	sp,sp,28
   42500:	f800283a 	ret

00042504 <_fwalk_reent>:
   42504:	defff804 	addi	sp,sp,-32
   42508:	dcc00315 	stw	r19,12(sp)
   4250c:	24c0b804 	addi	r19,r4,736
   42510:	dd800615 	stw	r22,24(sp)
   42514:	dd400515 	stw	r21,20(sp)
   42518:	dd000415 	stw	r20,16(sp)
   4251c:	dfc00715 	stw	ra,28(sp)
   42520:	dc800215 	stw	r18,8(sp)
   42524:	dc400115 	stw	r17,4(sp)
   42528:	dc000015 	stw	r16,0(sp)
   4252c:	2029883a 	mov	r20,r4
   42530:	282b883a 	mov	r21,r5
   42534:	002d883a 	mov	r22,zero
   42538:	00420100 	call	42010 <__sfp_lock_acquire>
   4253c:	98001326 	beq	r19,zero,4258c <_fwalk_reent+0x88>
   42540:	04bfffc4 	movi	r18,-1
   42544:	9c400117 	ldw	r17,4(r19)
   42548:	9c000217 	ldw	r16,8(r19)
   4254c:	8c7fffc4 	addi	r17,r17,-1
   42550:	88000c16 	blt	r17,zero,42584 <_fwalk_reent+0x80>
   42554:	84000304 	addi	r16,r16,12
   42558:	80c0000f 	ldh	r3,0(r16)
   4255c:	8c7fffc4 	addi	r17,r17,-1
   42560:	817ffd04 	addi	r5,r16,-12
   42564:	18000526 	beq	r3,zero,4257c <_fwalk_reent+0x78>
   42568:	80c0008f 	ldh	r3,2(r16)
   4256c:	a009883a 	mov	r4,r20
   42570:	1c800226 	beq	r3,r18,4257c <_fwalk_reent+0x78>
   42574:	a83ee83a 	callr	r21
   42578:	b0acb03a 	or	r22,r22,r2
   4257c:	84001704 	addi	r16,r16,92
   42580:	8cbff51e 	bne	r17,r18,42558 <_fwalk_reent+0x54>
   42584:	9cc00017 	ldw	r19,0(r19)
   42588:	983fee1e 	bne	r19,zero,42544 <_fwalk_reent+0x40>
   4258c:	00420140 	call	42014 <__sfp_lock_release>
   42590:	b005883a 	mov	r2,r22
   42594:	dfc00717 	ldw	ra,28(sp)
   42598:	dd800617 	ldw	r22,24(sp)
   4259c:	dd400517 	ldw	r21,20(sp)
   425a0:	dd000417 	ldw	r20,16(sp)
   425a4:	dcc00317 	ldw	r19,12(sp)
   425a8:	dc800217 	ldw	r18,8(sp)
   425ac:	dc400117 	ldw	r17,4(sp)
   425b0:	dc000017 	ldw	r16,0(sp)
   425b4:	dec00804 	addi	sp,sp,32
   425b8:	f800283a 	ret

000425bc <__smakebuf_r>:
   425bc:	2880030b 	ldhu	r2,12(r5)
   425c0:	deffed04 	addi	sp,sp,-76
   425c4:	dc401015 	stw	r17,64(sp)
   425c8:	10c0008c 	andi	r3,r2,2
   425cc:	18ffffcc 	andi	r3,r3,65535
   425d0:	18e0001c 	xori	r3,r3,32768
   425d4:	dc000f15 	stw	r16,60(sp)
   425d8:	dfc01215 	stw	ra,72(sp)
   425dc:	dc801115 	stw	r18,68(sp)
   425e0:	18e00004 	addi	r3,r3,-32768
   425e4:	2821883a 	mov	r16,r5
   425e8:	2023883a 	mov	r17,r4
   425ec:	1800381e 	bne	r3,zero,426d0 <__smakebuf_r+0x114>
   425f0:	2940038f 	ldh	r5,14(r5)
   425f4:	28002d16 	blt	r5,zero,426ac <__smakebuf_r+0xf0>
   425f8:	d80d883a 	mov	r6,sp
   425fc:	0042ba00 	call	42ba0 <_fstat_r>
   42600:	10002916 	blt	r2,zero,426a8 <__smakebuf_r+0xec>
   42604:	d8800117 	ldw	r2,4(sp)
   42608:	00e00014 	movui	r3,32768
   4260c:	10bc000c 	andi	r2,r2,61440
   42610:	10c03c26 	beq	r2,r3,42704 <__smakebuf_r+0x148>
   42614:	80c0030b 	ldhu	r3,12(r16)
   42618:	18c20014 	ori	r3,r3,2048
   4261c:	80c0030d 	sth	r3,12(r16)
   42620:	00c80004 	movi	r3,8192
   42624:	10c00c1e 	bne	r2,r3,42658 <__smakebuf_r+0x9c>
   42628:	8140038f 	ldh	r5,14(r16)
   4262c:	8809883a 	mov	r4,r17
   42630:	0042c080 	call	42c08 <_isatty_r>
   42634:	10000826 	beq	r2,zero,42658 <__smakebuf_r+0x9c>
   42638:	80c0030b 	ldhu	r3,12(r16)
   4263c:	808010c4 	addi	r2,r16,67
   42640:	80800015 	stw	r2,0(r16)
   42644:	18c00054 	ori	r3,r3,1
   42648:	80800415 	stw	r2,16(r16)
   4264c:	00800044 	movi	r2,1
   42650:	80c0030d 	sth	r3,12(r16)
   42654:	80800515 	stw	r2,20(r16)
   42658:	04810004 	movi	r18,1024
   4265c:	8809883a 	mov	r4,r17
   42660:	900b883a 	mov	r5,r18
   42664:	00408300 	call	40830 <_malloc_r>
   42668:	10003026 	beq	r2,zero,4272c <__smakebuf_r+0x170>
   4266c:	80c0030b 	ldhu	r3,12(r16)
   42670:	01000134 	movhi	r4,4
   42674:	21075d04 	addi	r4,r4,7540
   42678:	89000f15 	stw	r4,60(r17)
   4267c:	18c02014 	ori	r3,r3,128
   42680:	80c0030d 	sth	r3,12(r16)
   42684:	80800015 	stw	r2,0(r16)
   42688:	80800415 	stw	r2,16(r16)
   4268c:	84800515 	stw	r18,20(r16)
   42690:	dfc01217 	ldw	ra,72(sp)
   42694:	dc801117 	ldw	r18,68(sp)
   42698:	dc401017 	ldw	r17,64(sp)
   4269c:	dc000f17 	ldw	r16,60(sp)
   426a0:	dec01304 	addi	sp,sp,76
   426a4:	f800283a 	ret
   426a8:	8080030b 	ldhu	r2,12(r16)
   426ac:	10c0200c 	andi	r3,r2,128
   426b0:	18ffffcc 	andi	r3,r3,65535
   426b4:	18e0001c 	xori	r3,r3,32768
   426b8:	18e00004 	addi	r3,r3,-32768
   426bc:	18000f1e 	bne	r3,zero,426fc <__smakebuf_r+0x140>
   426c0:	04810004 	movi	r18,1024
   426c4:	10820014 	ori	r2,r2,2048
   426c8:	8080030d 	sth	r2,12(r16)
   426cc:	003fe306 	br	4265c <__smakebuf_r+0xa0>
   426d0:	288010c4 	addi	r2,r5,67
   426d4:	28800015 	stw	r2,0(r5)
   426d8:	28800415 	stw	r2,16(r5)
   426dc:	00800044 	movi	r2,1
   426e0:	28800515 	stw	r2,20(r5)
   426e4:	dfc01217 	ldw	ra,72(sp)
   426e8:	dc801117 	ldw	r18,68(sp)
   426ec:	dc401017 	ldw	r17,64(sp)
   426f0:	dc000f17 	ldw	r16,60(sp)
   426f4:	dec01304 	addi	sp,sp,76
   426f8:	f800283a 	ret
   426fc:	04801004 	movi	r18,64
   42700:	003ff006 	br	426c4 <__smakebuf_r+0x108>
   42704:	81000a17 	ldw	r4,40(r16)
   42708:	00c00134 	movhi	r3,4
   4270c:	18ca4704 	addi	r3,r3,10524
   42710:	20ffc01e 	bne	r4,r3,42614 <__smakebuf_r+0x58>
   42714:	8080030b 	ldhu	r2,12(r16)
   42718:	00c10004 	movi	r3,1024
   4271c:	80c01315 	stw	r3,76(r16)
   42720:	10c4b03a 	or	r2,r2,r3
   42724:	8080030d 	sth	r2,12(r16)
   42728:	003fcb06 	br	42658 <__smakebuf_r+0x9c>
   4272c:	8080030b 	ldhu	r2,12(r16)
   42730:	10c0800c 	andi	r3,r2,512
   42734:	18ffffcc 	andi	r3,r3,65535
   42738:	18e0001c 	xori	r3,r3,32768
   4273c:	18e00004 	addi	r3,r3,-32768
   42740:	183fd31e 	bne	r3,zero,42690 <__smakebuf_r+0xd4>
   42744:	10800094 	ori	r2,r2,2
   42748:	80c010c4 	addi	r3,r16,67
   4274c:	8080030d 	sth	r2,12(r16)
   42750:	00800044 	movi	r2,1
   42754:	80c00015 	stw	r3,0(r16)
   42758:	80c00415 	stw	r3,16(r16)
   4275c:	80800515 	stw	r2,20(r16)
   42760:	003fcb06 	br	42690 <__smakebuf_r+0xd4>

00042764 <memset>:
   42764:	00c000c4 	movi	r3,3
   42768:	2005883a 	mov	r2,r4
   4276c:	29403fcc 	andi	r5,r5,255
   42770:	19802d2e 	bgeu	r3,r6,42828 <memset+0xc4>
   42774:	20c6703a 	and	r3,r4,r3
   42778:	18002e1e 	bne	r3,zero,42834 <memset+0xd0>
   4277c:	2806923a 	slli	r3,r5,8
   42780:	010003c4 	movi	r4,15
   42784:	3011883a 	mov	r8,r6
   42788:	1946b03a 	or	r3,r3,r5
   4278c:	180e943a 	slli	r7,r3,16
   42790:	38ceb03a 	or	r7,r7,r3
   42794:	1007883a 	mov	r3,r2
   42798:	21800f2e 	bgeu	r4,r6,427d8 <memset+0x74>
   4279c:	19c00015 	stw	r7,0(r3)
   427a0:	19c00115 	stw	r7,4(r3)
   427a4:	19c00215 	stw	r7,8(r3)
   427a8:	19c00315 	stw	r7,12(r3)
   427ac:	423ffc04 	addi	r8,r8,-16
   427b0:	18c00404 	addi	r3,r3,16
   427b4:	223ff936 	bltu	r4,r8,4279c <memset+0x38>
   427b8:	30fffc04 	addi	r3,r6,-16
   427bc:	1806d13a 	srli	r3,r3,4
   427c0:	318003cc 	andi	r6,r6,15
   427c4:	010000c4 	movi	r4,3
   427c8:	18c00044 	addi	r3,r3,1
   427cc:	1806913a 	slli	r3,r3,4
   427d0:	10c7883a 	add	r3,r2,r3
   427d4:	21800e2e 	bgeu	r4,r6,42810 <memset+0xac>
   427d8:	1813883a 	mov	r9,r3
   427dc:	3011883a 	mov	r8,r6
   427e0:	010000c4 	movi	r4,3
   427e4:	49c00015 	stw	r7,0(r9)
   427e8:	423fff04 	addi	r8,r8,-4
   427ec:	4a400104 	addi	r9,r9,4
   427f0:	223ffc36 	bltu	r4,r8,427e4 <memset+0x80>
   427f4:	313fff04 	addi	r4,r6,-4
   427f8:	2008d0ba 	srli	r4,r4,2
   427fc:	318000cc 	andi	r6,r6,3
   42800:	21000044 	addi	r4,r4,1
   42804:	2109883a 	add	r4,r4,r4
   42808:	2109883a 	add	r4,r4,r4
   4280c:	1907883a 	add	r3,r3,r4
   42810:	30000a26 	beq	r6,zero,4283c <memset+0xd8>
   42814:	198d883a 	add	r6,r3,r6
   42818:	19400005 	stb	r5,0(r3)
   4281c:	18c00044 	addi	r3,r3,1
   42820:	19bffd1e 	bne	r3,r6,42818 <memset+0xb4>
   42824:	f800283a 	ret
   42828:	2007883a 	mov	r3,r4
   4282c:	303ff91e 	bne	r6,zero,42814 <memset+0xb0>
   42830:	00000206 	br	4283c <memset+0xd8>
   42834:	2007883a 	mov	r3,r4
   42838:	003ff606 	br	42814 <memset+0xb0>
   4283c:	f800283a 	ret

00042840 <__sread>:
   42840:	defffe04 	addi	sp,sp,-8
   42844:	dc000015 	stw	r16,0(sp)
   42848:	2821883a 	mov	r16,r5
   4284c:	2940038f 	ldh	r5,14(r5)
   42850:	dfc00115 	stw	ra,4(sp)
   42854:	0042cd80 	call	42cd8 <_read_r>
   42858:	10000716 	blt	r2,zero,42878 <__sread+0x38>
   4285c:	80c01417 	ldw	r3,80(r16)
   42860:	1887883a 	add	r3,r3,r2
   42864:	80c01415 	stw	r3,80(r16)
   42868:	dfc00117 	ldw	ra,4(sp)
   4286c:	dc000017 	ldw	r16,0(sp)
   42870:	dec00204 	addi	sp,sp,8
   42874:	f800283a 	ret
   42878:	80c0030b 	ldhu	r3,12(r16)
   4287c:	18fbffcc 	andi	r3,r3,61439
   42880:	80c0030d 	sth	r3,12(r16)
   42884:	dfc00117 	ldw	ra,4(sp)
   42888:	dc000017 	ldw	r16,0(sp)
   4288c:	dec00204 	addi	sp,sp,8
   42890:	f800283a 	ret

00042894 <__swrite>:
   42894:	2880030b 	ldhu	r2,12(r5)
   42898:	defffb04 	addi	sp,sp,-20
   4289c:	dcc00315 	stw	r19,12(sp)
   428a0:	10c0400c 	andi	r3,r2,256
   428a4:	18ffffcc 	andi	r3,r3,65535
   428a8:	18e0001c 	xori	r3,r3,32768
   428ac:	dc800215 	stw	r18,8(sp)
   428b0:	dc400115 	stw	r17,4(sp)
   428b4:	dc000015 	stw	r16,0(sp)
   428b8:	dfc00415 	stw	ra,16(sp)
   428bc:	18e00004 	addi	r3,r3,-32768
   428c0:	2821883a 	mov	r16,r5
   428c4:	2027883a 	mov	r19,r4
   428c8:	3025883a 	mov	r18,r6
   428cc:	3823883a 	mov	r17,r7
   428d0:	18000526 	beq	r3,zero,428e8 <__swrite+0x54>
   428d4:	2940038f 	ldh	r5,14(r5)
   428d8:	000d883a 	mov	r6,zero
   428dc:	01c00084 	movi	r7,2
   428e0:	0042c6c0 	call	42c6c <_lseek_r>
   428e4:	8080030b 	ldhu	r2,12(r16)
   428e8:	8140038f 	ldh	r5,14(r16)
   428ec:	10bbffcc 	andi	r2,r2,61439
   428f0:	9809883a 	mov	r4,r19
   428f4:	900d883a 	mov	r6,r18
   428f8:	880f883a 	mov	r7,r17
   428fc:	8080030d 	sth	r2,12(r16)
   42900:	dfc00417 	ldw	ra,16(sp)
   42904:	dcc00317 	ldw	r19,12(sp)
   42908:	dc800217 	ldw	r18,8(sp)
   4290c:	dc400117 	ldw	r17,4(sp)
   42910:	dc000017 	ldw	r16,0(sp)
   42914:	dec00504 	addi	sp,sp,20
   42918:	00429801 	jmpi	42980 <_write_r>

0004291c <__sseek>:
   4291c:	defffe04 	addi	sp,sp,-8
   42920:	dc000015 	stw	r16,0(sp)
   42924:	2821883a 	mov	r16,r5
   42928:	2940038f 	ldh	r5,14(r5)
   4292c:	dfc00115 	stw	ra,4(sp)
   42930:	0042c6c0 	call	42c6c <_lseek_r>
   42934:	00ffffc4 	movi	r3,-1
   42938:	10c00826 	beq	r2,r3,4295c <__sseek+0x40>
   4293c:	80c0030b 	ldhu	r3,12(r16)
   42940:	80801415 	stw	r2,80(r16)
   42944:	18c40014 	ori	r3,r3,4096
   42948:	80c0030d 	sth	r3,12(r16)
   4294c:	dfc00117 	ldw	ra,4(sp)
   42950:	dc000017 	ldw	r16,0(sp)
   42954:	dec00204 	addi	sp,sp,8
   42958:	f800283a 	ret
   4295c:	80c0030b 	ldhu	r3,12(r16)
   42960:	18fbffcc 	andi	r3,r3,61439
   42964:	80c0030d 	sth	r3,12(r16)
   42968:	dfc00117 	ldw	ra,4(sp)
   4296c:	dc000017 	ldw	r16,0(sp)
   42970:	dec00204 	addi	sp,sp,8
   42974:	f800283a 	ret

00042978 <__sclose>:
   42978:	2940038f 	ldh	r5,14(r5)
   4297c:	00429ec1 	jmpi	429ec <_close_r>

00042980 <_write_r>:
   42980:	defffd04 	addi	sp,sp,-12
   42984:	dc400115 	stw	r17,4(sp)
   42988:	dc000015 	stw	r16,0(sp)
   4298c:	2023883a 	mov	r17,r4
   42990:	04000174 	movhi	r16,5
   42994:	84228504 	addi	r16,r16,-30188
   42998:	2809883a 	mov	r4,r5
   4299c:	300b883a 	mov	r5,r6
   429a0:	380d883a 	mov	r6,r7
   429a4:	dfc00215 	stw	ra,8(sp)
   429a8:	80000015 	stw	zero,0(r16)
   429ac:	00436340 	call	43634 <write>
   429b0:	00ffffc4 	movi	r3,-1
   429b4:	10c00526 	beq	r2,r3,429cc <_write_r+0x4c>
   429b8:	dfc00217 	ldw	ra,8(sp)
   429bc:	dc400117 	ldw	r17,4(sp)
   429c0:	dc000017 	ldw	r16,0(sp)
   429c4:	dec00304 	addi	sp,sp,12
   429c8:	f800283a 	ret
   429cc:	80c00017 	ldw	r3,0(r16)
   429d0:	183ff926 	beq	r3,zero,429b8 <_write_r+0x38>
   429d4:	88c00015 	stw	r3,0(r17)
   429d8:	dfc00217 	ldw	ra,8(sp)
   429dc:	dc400117 	ldw	r17,4(sp)
   429e0:	dc000017 	ldw	r16,0(sp)
   429e4:	dec00304 	addi	sp,sp,12
   429e8:	f800283a 	ret

000429ec <_close_r>:
   429ec:	defffd04 	addi	sp,sp,-12
   429f0:	dc400115 	stw	r17,4(sp)
   429f4:	dc000015 	stw	r16,0(sp)
   429f8:	2023883a 	mov	r17,r4
   429fc:	04000174 	movhi	r16,5
   42a00:	84228504 	addi	r16,r16,-30188
   42a04:	2809883a 	mov	r4,r5
   42a08:	dfc00215 	stw	ra,8(sp)
   42a0c:	80000015 	stw	zero,0(r16)
   42a10:	0042dbc0 	call	42dbc <close>
   42a14:	00ffffc4 	movi	r3,-1
   42a18:	10c00526 	beq	r2,r3,42a30 <_close_r+0x44>
   42a1c:	dfc00217 	ldw	ra,8(sp)
   42a20:	dc400117 	ldw	r17,4(sp)
   42a24:	dc000017 	ldw	r16,0(sp)
   42a28:	dec00304 	addi	sp,sp,12
   42a2c:	f800283a 	ret
   42a30:	80c00017 	ldw	r3,0(r16)
   42a34:	183ff926 	beq	r3,zero,42a1c <_close_r+0x30>
   42a38:	88c00015 	stw	r3,0(r17)
   42a3c:	dfc00217 	ldw	ra,8(sp)
   42a40:	dc400117 	ldw	r17,4(sp)
   42a44:	dc000017 	ldw	r16,0(sp)
   42a48:	dec00304 	addi	sp,sp,12
   42a4c:	f800283a 	ret

00042a50 <_fclose_r>:
   42a50:	defffc04 	addi	sp,sp,-16
   42a54:	dc400115 	stw	r17,4(sp)
   42a58:	dc000015 	stw	r16,0(sp)
   42a5c:	dfc00315 	stw	ra,12(sp)
   42a60:	dc800215 	stw	r18,8(sp)
   42a64:	2821883a 	mov	r16,r5
   42a68:	2023883a 	mov	r17,r4
   42a6c:	28003426 	beq	r5,zero,42b40 <_fclose_r+0xf0>
   42a70:	00420100 	call	42010 <__sfp_lock_acquire>
   42a74:	88000226 	beq	r17,zero,42a80 <_fclose_r+0x30>
   42a78:	88800e17 	ldw	r2,56(r17)
   42a7c:	10003826 	beq	r2,zero,42b60 <_fclose_r+0x110>
   42a80:	8080030f 	ldh	r2,12(r16)
   42a84:	10002526 	beq	r2,zero,42b1c <_fclose_r+0xcc>
   42a88:	8809883a 	mov	r4,r17
   42a8c:	800b883a 	mov	r5,r16
   42a90:	0041b4c0 	call	41b4c <_fflush_r>
   42a94:	1025883a 	mov	r18,r2
   42a98:	80800b17 	ldw	r2,44(r16)
   42a9c:	10000426 	beq	r2,zero,42ab0 <_fclose_r+0x60>
   42aa0:	81400717 	ldw	r5,28(r16)
   42aa4:	8809883a 	mov	r4,r17
   42aa8:	103ee83a 	callr	r2
   42aac:	10003516 	blt	r2,zero,42b84 <_fclose_r+0x134>
   42ab0:	8080030b 	ldhu	r2,12(r16)
   42ab4:	1080200c 	andi	r2,r2,128
   42ab8:	10bfffcc 	andi	r2,r2,65535
   42abc:	10a0001c 	xori	r2,r2,32768
   42ac0:	10a00004 	addi	r2,r2,-32768
   42ac4:	10002b1e 	bne	r2,zero,42b74 <_fclose_r+0x124>
   42ac8:	81400c17 	ldw	r5,48(r16)
   42acc:	28000526 	beq	r5,zero,42ae4 <_fclose_r+0x94>
   42ad0:	80801004 	addi	r2,r16,64
   42ad4:	28800226 	beq	r5,r2,42ae0 <_fclose_r+0x90>
   42ad8:	8809883a 	mov	r4,r17
   42adc:	004218c0 	call	4218c <_free_r>
   42ae0:	80000c15 	stw	zero,48(r16)
   42ae4:	81401117 	ldw	r5,68(r16)
   42ae8:	28000326 	beq	r5,zero,42af8 <_fclose_r+0xa8>
   42aec:	8809883a 	mov	r4,r17
   42af0:	004218c0 	call	4218c <_free_r>
   42af4:	80001115 	stw	zero,68(r16)
   42af8:	8000030d 	sth	zero,12(r16)
   42afc:	00420140 	call	42014 <__sfp_lock_release>
   42b00:	9005883a 	mov	r2,r18
   42b04:	dfc00317 	ldw	ra,12(sp)
   42b08:	dc800217 	ldw	r18,8(sp)
   42b0c:	dc400117 	ldw	r17,4(sp)
   42b10:	dc000017 	ldw	r16,0(sp)
   42b14:	dec00404 	addi	sp,sp,16
   42b18:	f800283a 	ret
   42b1c:	00420140 	call	42014 <__sfp_lock_release>
   42b20:	0025883a 	mov	r18,zero
   42b24:	9005883a 	mov	r2,r18
   42b28:	dfc00317 	ldw	ra,12(sp)
   42b2c:	dc800217 	ldw	r18,8(sp)
   42b30:	dc400117 	ldw	r17,4(sp)
   42b34:	dc000017 	ldw	r16,0(sp)
   42b38:	dec00404 	addi	sp,sp,16
   42b3c:	f800283a 	ret
   42b40:	0025883a 	mov	r18,zero
   42b44:	9005883a 	mov	r2,r18
   42b48:	dfc00317 	ldw	ra,12(sp)
   42b4c:	dc800217 	ldw	r18,8(sp)
   42b50:	dc400117 	ldw	r17,4(sp)
   42b54:	dc000017 	ldw	r16,0(sp)
   42b58:	dec00404 	addi	sp,sp,16
   42b5c:	f800283a 	ret
   42b60:	8809883a 	mov	r4,r17
   42b64:	0041e080 	call	41e08 <__sinit>
   42b68:	8080030f 	ldh	r2,12(r16)
   42b6c:	103fc61e 	bne	r2,zero,42a88 <_fclose_r+0x38>
   42b70:	003fea06 	br	42b1c <_fclose_r+0xcc>
   42b74:	81400417 	ldw	r5,16(r16)
   42b78:	8809883a 	mov	r4,r17
   42b7c:	004218c0 	call	4218c <_free_r>
   42b80:	003fd106 	br	42ac8 <_fclose_r+0x78>
   42b84:	04bfffc4 	movi	r18,-1
   42b88:	003fc906 	br	42ab0 <_fclose_r+0x60>

00042b8c <fclose>:
   42b8c:	00800134 	movhi	r2,4
   42b90:	109be304 	addi	r2,r2,28556
   42b94:	200b883a 	mov	r5,r4
   42b98:	11000017 	ldw	r4,0(r2)
   42b9c:	0042a501 	jmpi	42a50 <_fclose_r>

00042ba0 <_fstat_r>:
   42ba0:	defffd04 	addi	sp,sp,-12
   42ba4:	dc400115 	stw	r17,4(sp)
   42ba8:	dc000015 	stw	r16,0(sp)
   42bac:	2023883a 	mov	r17,r4
   42bb0:	04000174 	movhi	r16,5
   42bb4:	84228504 	addi	r16,r16,-30188
   42bb8:	2809883a 	mov	r4,r5
   42bbc:	300b883a 	mov	r5,r6
   42bc0:	dfc00215 	stw	ra,8(sp)
   42bc4:	80000015 	stw	zero,0(r16)
   42bc8:	0042f040 	call	42f04 <fstat>
   42bcc:	00ffffc4 	movi	r3,-1
   42bd0:	10c00526 	beq	r2,r3,42be8 <_fstat_r+0x48>
   42bd4:	dfc00217 	ldw	ra,8(sp)
   42bd8:	dc400117 	ldw	r17,4(sp)
   42bdc:	dc000017 	ldw	r16,0(sp)
   42be0:	dec00304 	addi	sp,sp,12
   42be4:	f800283a 	ret
   42be8:	80c00017 	ldw	r3,0(r16)
   42bec:	183ff926 	beq	r3,zero,42bd4 <_fstat_r+0x34>
   42bf0:	88c00015 	stw	r3,0(r17)
   42bf4:	dfc00217 	ldw	ra,8(sp)
   42bf8:	dc400117 	ldw	r17,4(sp)
   42bfc:	dc000017 	ldw	r16,0(sp)
   42c00:	dec00304 	addi	sp,sp,12
   42c04:	f800283a 	ret

00042c08 <_isatty_r>:
   42c08:	defffd04 	addi	sp,sp,-12
   42c0c:	dc400115 	stw	r17,4(sp)
   42c10:	dc000015 	stw	r16,0(sp)
   42c14:	2023883a 	mov	r17,r4
   42c18:	04000174 	movhi	r16,5
   42c1c:	84228504 	addi	r16,r16,-30188
   42c20:	2809883a 	mov	r4,r5
   42c24:	dfc00215 	stw	ra,8(sp)
   42c28:	80000015 	stw	zero,0(r16)
   42c2c:	00430040 	call	43004 <isatty>
   42c30:	00ffffc4 	movi	r3,-1
   42c34:	10c00526 	beq	r2,r3,42c4c <_isatty_r+0x44>
   42c38:	dfc00217 	ldw	ra,8(sp)
   42c3c:	dc400117 	ldw	r17,4(sp)
   42c40:	dc000017 	ldw	r16,0(sp)
   42c44:	dec00304 	addi	sp,sp,12
   42c48:	f800283a 	ret
   42c4c:	80c00017 	ldw	r3,0(r16)
   42c50:	183ff926 	beq	r3,zero,42c38 <_isatty_r+0x30>
   42c54:	88c00015 	stw	r3,0(r17)
   42c58:	dfc00217 	ldw	ra,8(sp)
   42c5c:	dc400117 	ldw	r17,4(sp)
   42c60:	dc000017 	ldw	r16,0(sp)
   42c64:	dec00304 	addi	sp,sp,12
   42c68:	f800283a 	ret

00042c6c <_lseek_r>:
   42c6c:	defffd04 	addi	sp,sp,-12
   42c70:	dc400115 	stw	r17,4(sp)
   42c74:	dc000015 	stw	r16,0(sp)
   42c78:	2023883a 	mov	r17,r4
   42c7c:	04000174 	movhi	r16,5
   42c80:	84228504 	addi	r16,r16,-30188
   42c84:	2809883a 	mov	r4,r5
   42c88:	300b883a 	mov	r5,r6
   42c8c:	380d883a 	mov	r6,r7
   42c90:	dfc00215 	stw	ra,8(sp)
   42c94:	80000015 	stw	zero,0(r16)
   42c98:	00431e40 	call	431e4 <lseek>
   42c9c:	00ffffc4 	movi	r3,-1
   42ca0:	10c00526 	beq	r2,r3,42cb8 <_lseek_r+0x4c>
   42ca4:	dfc00217 	ldw	ra,8(sp)
   42ca8:	dc400117 	ldw	r17,4(sp)
   42cac:	dc000017 	ldw	r16,0(sp)
   42cb0:	dec00304 	addi	sp,sp,12
   42cb4:	f800283a 	ret
   42cb8:	80c00017 	ldw	r3,0(r16)
   42cbc:	183ff926 	beq	r3,zero,42ca4 <_lseek_r+0x38>
   42cc0:	88c00015 	stw	r3,0(r17)
   42cc4:	dfc00217 	ldw	ra,8(sp)
   42cc8:	dc400117 	ldw	r17,4(sp)
   42ccc:	dc000017 	ldw	r16,0(sp)
   42cd0:	dec00304 	addi	sp,sp,12
   42cd4:	f800283a 	ret

00042cd8 <_read_r>:
   42cd8:	defffd04 	addi	sp,sp,-12
   42cdc:	dc400115 	stw	r17,4(sp)
   42ce0:	dc000015 	stw	r16,0(sp)
   42ce4:	2023883a 	mov	r17,r4
   42ce8:	04000174 	movhi	r16,5
   42cec:	84228504 	addi	r16,r16,-30188
   42cf0:	2809883a 	mov	r4,r5
   42cf4:	300b883a 	mov	r5,r6
   42cf8:	380d883a 	mov	r6,r7
   42cfc:	dfc00215 	stw	ra,8(sp)
   42d00:	80000015 	stw	zero,0(r16)
   42d04:	00433c00 	call	433c0 <read>
   42d08:	00ffffc4 	movi	r3,-1
   42d0c:	10c00526 	beq	r2,r3,42d24 <_read_r+0x4c>
   42d10:	dfc00217 	ldw	ra,8(sp)
   42d14:	dc400117 	ldw	r17,4(sp)
   42d18:	dc000017 	ldw	r16,0(sp)
   42d1c:	dec00304 	addi	sp,sp,12
   42d20:	f800283a 	ret
   42d24:	80c00017 	ldw	r3,0(r16)
   42d28:	183ff926 	beq	r3,zero,42d10 <_read_r+0x38>
   42d2c:	88c00015 	stw	r3,0(r17)
   42d30:	dfc00217 	ldw	ra,8(sp)
   42d34:	dc400117 	ldw	r17,4(sp)
   42d38:	dc000017 	ldw	r16,0(sp)
   42d3c:	dec00304 	addi	sp,sp,12
   42d40:	f800283a 	ret

00042d44 <__mulsi3>:
   42d44:	0005883a 	mov	r2,zero
   42d48:	20000726 	beq	r4,zero,42d68 <__mulsi3+0x24>
   42d4c:	20c0004c 	andi	r3,r4,1
   42d50:	2008d07a 	srli	r4,r4,1
   42d54:	18000126 	beq	r3,zero,42d5c <__mulsi3+0x18>
   42d58:	1145883a 	add	r2,r2,r5
   42d5c:	294b883a 	add	r5,r5,r5
   42d60:	203ffa1e 	bne	r4,zero,42d4c <__mulsi3+0x8>
   42d64:	f800283a 	ret
   42d68:	f800283a 	ret

00042d6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   42d6c:	defffe04 	addi	sp,sp,-8
   42d70:	dfc00115 	stw	ra,4(sp)
   42d74:	df000015 	stw	fp,0(sp)
   42d78:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   42d7c:	00800134 	movhi	r2,4
   42d80:	109beb04 	addi	r2,r2,28588
   42d84:	10800017 	ldw	r2,0(r2)
   42d88:	10000526 	beq	r2,zero,42da0 <alt_get_errno+0x34>
   42d8c:	00800134 	movhi	r2,4
   42d90:	109beb04 	addi	r2,r2,28588
   42d94:	10800017 	ldw	r2,0(r2)
   42d98:	103ee83a 	callr	r2
   42d9c:	00000206 	br	42da8 <alt_get_errno+0x3c>
   42da0:	00800174 	movhi	r2,5
   42da4:	10a28504 	addi	r2,r2,-30188
}
   42da8:	e037883a 	mov	sp,fp
   42dac:	dfc00117 	ldw	ra,4(sp)
   42db0:	df000017 	ldw	fp,0(sp)
   42db4:	dec00204 	addi	sp,sp,8
   42db8:	f800283a 	ret

00042dbc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   42dbc:	defffb04 	addi	sp,sp,-20
   42dc0:	dfc00415 	stw	ra,16(sp)
   42dc4:	df000315 	stw	fp,12(sp)
   42dc8:	df000304 	addi	fp,sp,12
   42dcc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   42dd0:	e0bfff17 	ldw	r2,-4(fp)
   42dd4:	10000716 	blt	r2,zero,42df4 <close+0x38>
   42dd8:	e13fff17 	ldw	r4,-4(fp)
   42ddc:	01400304 	movi	r5,12
   42de0:	0042d440 	call	42d44 <__mulsi3>
   42de4:	00c00134 	movhi	r3,4
   42de8:	18d76a04 	addi	r3,r3,23976
   42dec:	10c5883a 	add	r2,r2,r3
   42df0:	00000106 	br	42df8 <close+0x3c>
   42df4:	0005883a 	mov	r2,zero
   42df8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   42dfc:	e0bffd17 	ldw	r2,-12(fp)
   42e00:	10001826 	beq	r2,zero,42e64 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   42e04:	e0bffd17 	ldw	r2,-12(fp)
   42e08:	10800017 	ldw	r2,0(r2)
   42e0c:	10800417 	ldw	r2,16(r2)
   42e10:	10000626 	beq	r2,zero,42e2c <close+0x70>
   42e14:	e0bffd17 	ldw	r2,-12(fp)
   42e18:	10800017 	ldw	r2,0(r2)
   42e1c:	10800417 	ldw	r2,16(r2)
   42e20:	e13ffd17 	ldw	r4,-12(fp)
   42e24:	103ee83a 	callr	r2
   42e28:	00000106 	br	42e30 <close+0x74>
   42e2c:	0005883a 	mov	r2,zero
   42e30:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   42e34:	e13fff17 	ldw	r4,-4(fp)
   42e38:	00434b40 	call	434b4 <alt_release_fd>
    if (rval < 0)
   42e3c:	e0bffe17 	ldw	r2,-8(fp)
   42e40:	1000060e 	bge	r2,zero,42e5c <close+0xa0>
    {
      ALT_ERRNO = -rval;
   42e44:	0042d6c0 	call	42d6c <alt_get_errno>
   42e48:	e0fffe17 	ldw	r3,-8(fp)
   42e4c:	00c7c83a 	sub	r3,zero,r3
   42e50:	10c00015 	stw	r3,0(r2)
      return -1;
   42e54:	00bfffc4 	movi	r2,-1
   42e58:	00000606 	br	42e74 <close+0xb8>
    }
    return 0;
   42e5c:	0005883a 	mov	r2,zero
   42e60:	00000406 	br	42e74 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   42e64:	0042d6c0 	call	42d6c <alt_get_errno>
   42e68:	00c01444 	movi	r3,81
   42e6c:	10c00015 	stw	r3,0(r2)
    return -1;
   42e70:	00bfffc4 	movi	r2,-1
  }
}
   42e74:	e037883a 	mov	sp,fp
   42e78:	dfc00117 	ldw	ra,4(sp)
   42e7c:	df000017 	ldw	fp,0(sp)
   42e80:	dec00204 	addi	sp,sp,8
   42e84:	f800283a 	ret

00042e88 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   42e88:	defffc04 	addi	sp,sp,-16
   42e8c:	df000315 	stw	fp,12(sp)
   42e90:	df000304 	addi	fp,sp,12
   42e94:	e13ffd15 	stw	r4,-12(fp)
   42e98:	e17ffe15 	stw	r5,-8(fp)
   42e9c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   42ea0:	e0bfff17 	ldw	r2,-4(fp)
}
   42ea4:	e037883a 	mov	sp,fp
   42ea8:	df000017 	ldw	fp,0(sp)
   42eac:	dec00104 	addi	sp,sp,4
   42eb0:	f800283a 	ret

00042eb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   42eb4:	defffe04 	addi	sp,sp,-8
   42eb8:	dfc00115 	stw	ra,4(sp)
   42ebc:	df000015 	stw	fp,0(sp)
   42ec0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   42ec4:	00800134 	movhi	r2,4
   42ec8:	109beb04 	addi	r2,r2,28588
   42ecc:	10800017 	ldw	r2,0(r2)
   42ed0:	10000526 	beq	r2,zero,42ee8 <alt_get_errno+0x34>
   42ed4:	00800134 	movhi	r2,4
   42ed8:	109beb04 	addi	r2,r2,28588
   42edc:	10800017 	ldw	r2,0(r2)
   42ee0:	103ee83a 	callr	r2
   42ee4:	00000206 	br	42ef0 <alt_get_errno+0x3c>
   42ee8:	00800174 	movhi	r2,5
   42eec:	10a28504 	addi	r2,r2,-30188
}
   42ef0:	e037883a 	mov	sp,fp
   42ef4:	dfc00117 	ldw	ra,4(sp)
   42ef8:	df000017 	ldw	fp,0(sp)
   42efc:	dec00204 	addi	sp,sp,8
   42f00:	f800283a 	ret

00042f04 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   42f04:	defffb04 	addi	sp,sp,-20
   42f08:	dfc00415 	stw	ra,16(sp)
   42f0c:	df000315 	stw	fp,12(sp)
   42f10:	df000304 	addi	fp,sp,12
   42f14:	e13ffe15 	stw	r4,-8(fp)
   42f18:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   42f1c:	e0bffe17 	ldw	r2,-8(fp)
   42f20:	10000716 	blt	r2,zero,42f40 <fstat+0x3c>
   42f24:	e13ffe17 	ldw	r4,-8(fp)
   42f28:	01400304 	movi	r5,12
   42f2c:	0042d440 	call	42d44 <__mulsi3>
   42f30:	00c00134 	movhi	r3,4
   42f34:	18d76a04 	addi	r3,r3,23976
   42f38:	10c5883a 	add	r2,r2,r3
   42f3c:	00000106 	br	42f44 <fstat+0x40>
   42f40:	0005883a 	mov	r2,zero
   42f44:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   42f48:	e0bffd17 	ldw	r2,-12(fp)
   42f4c:	10001026 	beq	r2,zero,42f90 <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   42f50:	e0bffd17 	ldw	r2,-12(fp)
   42f54:	10800017 	ldw	r2,0(r2)
   42f58:	10800817 	ldw	r2,32(r2)
   42f5c:	10000726 	beq	r2,zero,42f7c <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
   42f60:	e0bffd17 	ldw	r2,-12(fp)
   42f64:	10800017 	ldw	r2,0(r2)
   42f68:	10800817 	ldw	r2,32(r2)
   42f6c:	e13ffd17 	ldw	r4,-12(fp)
   42f70:	e17fff17 	ldw	r5,-4(fp)
   42f74:	103ee83a 	callr	r2
   42f78:	00000906 	br	42fa0 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   42f7c:	e0bfff17 	ldw	r2,-4(fp)
   42f80:	00c80004 	movi	r3,8192
   42f84:	10c00115 	stw	r3,4(r2)
      return 0;
   42f88:	0005883a 	mov	r2,zero
   42f8c:	00000406 	br	42fa0 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   42f90:	0042eb40 	call	42eb4 <alt_get_errno>
   42f94:	00c01444 	movi	r3,81
   42f98:	10c00015 	stw	r3,0(r2)
    return -1;
   42f9c:	00bfffc4 	movi	r2,-1
  }
}
   42fa0:	e037883a 	mov	sp,fp
   42fa4:	dfc00117 	ldw	ra,4(sp)
   42fa8:	df000017 	ldw	fp,0(sp)
   42fac:	dec00204 	addi	sp,sp,8
   42fb0:	f800283a 	ret

00042fb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   42fb4:	defffe04 	addi	sp,sp,-8
   42fb8:	dfc00115 	stw	ra,4(sp)
   42fbc:	df000015 	stw	fp,0(sp)
   42fc0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   42fc4:	00800134 	movhi	r2,4
   42fc8:	109beb04 	addi	r2,r2,28588
   42fcc:	10800017 	ldw	r2,0(r2)
   42fd0:	10000526 	beq	r2,zero,42fe8 <alt_get_errno+0x34>
   42fd4:	00800134 	movhi	r2,4
   42fd8:	109beb04 	addi	r2,r2,28588
   42fdc:	10800017 	ldw	r2,0(r2)
   42fe0:	103ee83a 	callr	r2
   42fe4:	00000206 	br	42ff0 <alt_get_errno+0x3c>
   42fe8:	00800174 	movhi	r2,5
   42fec:	10a28504 	addi	r2,r2,-30188
}
   42ff0:	e037883a 	mov	sp,fp
   42ff4:	dfc00117 	ldw	ra,4(sp)
   42ff8:	df000017 	ldw	fp,0(sp)
   42ffc:	dec00204 	addi	sp,sp,8
   43000:	f800283a 	ret

00043004 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   43004:	deffed04 	addi	sp,sp,-76
   43008:	dfc01215 	stw	ra,72(sp)
   4300c:	df001115 	stw	fp,68(sp)
   43010:	df001104 	addi	fp,sp,68
   43014:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43018:	e0bfff17 	ldw	r2,-4(fp)
   4301c:	10000716 	blt	r2,zero,4303c <isatty+0x38>
   43020:	e13fff17 	ldw	r4,-4(fp)
   43024:	01400304 	movi	r5,12
   43028:	0042d440 	call	42d44 <__mulsi3>
   4302c:	00c00134 	movhi	r3,4
   43030:	18d76a04 	addi	r3,r3,23976
   43034:	10c5883a 	add	r2,r2,r3
   43038:	00000106 	br	43040 <isatty+0x3c>
   4303c:	0005883a 	mov	r2,zero
   43040:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   43044:	e0bfef17 	ldw	r2,-68(fp)
   43048:	10000e26 	beq	r2,zero,43084 <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   4304c:	e0bfef17 	ldw	r2,-68(fp)
   43050:	10800017 	ldw	r2,0(r2)
   43054:	10800817 	ldw	r2,32(r2)
   43058:	1000021e 	bne	r2,zero,43064 <isatty+0x60>
    {
      return 1;
   4305c:	00800044 	movi	r2,1
   43060:	00000c06 	br	43094 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   43064:	e0bff004 	addi	r2,fp,-64
   43068:	e13fff17 	ldw	r4,-4(fp)
   4306c:	100b883a 	mov	r5,r2
   43070:	0042f040 	call	42f04 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   43074:	e0bff117 	ldw	r2,-60(fp)
   43078:	10880020 	cmpeqi	r2,r2,8192
   4307c:	10803fcc 	andi	r2,r2,255
   43080:	00000406 	br	43094 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   43084:	0042fb40 	call	42fb4 <alt_get_errno>
   43088:	00c01444 	movi	r3,81
   4308c:	10c00015 	stw	r3,0(r2)
    return 0;
   43090:	0005883a 	mov	r2,zero
  }
}
   43094:	e037883a 	mov	sp,fp
   43098:	dfc00117 	ldw	ra,4(sp)
   4309c:	df000017 	ldw	fp,0(sp)
   430a0:	dec00204 	addi	sp,sp,8
   430a4:	f800283a 	ret

000430a8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   430a8:	defffc04 	addi	sp,sp,-16
   430ac:	df000315 	stw	fp,12(sp)
   430b0:	df000304 	addi	fp,sp,12
   430b4:	e13ffd15 	stw	r4,-12(fp)
   430b8:	e17ffe15 	stw	r5,-8(fp)
   430bc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   430c0:	e0fffe17 	ldw	r3,-8(fp)
   430c4:	e0bffd17 	ldw	r2,-12(fp)
   430c8:	18800e26 	beq	r3,r2,43104 <alt_load_section+0x5c>
  {
    while( to != end )
   430cc:	00000a06 	br	430f8 <alt_load_section+0x50>
    {
      *to++ = *from++;
   430d0:	e0bffd17 	ldw	r2,-12(fp)
   430d4:	10c00017 	ldw	r3,0(r2)
   430d8:	e0bffe17 	ldw	r2,-8(fp)
   430dc:	10c00015 	stw	r3,0(r2)
   430e0:	e0bffe17 	ldw	r2,-8(fp)
   430e4:	10800104 	addi	r2,r2,4
   430e8:	e0bffe15 	stw	r2,-8(fp)
   430ec:	e0bffd17 	ldw	r2,-12(fp)
   430f0:	10800104 	addi	r2,r2,4
   430f4:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   430f8:	e0fffe17 	ldw	r3,-8(fp)
   430fc:	e0bfff17 	ldw	r2,-4(fp)
   43100:	18bff31e 	bne	r3,r2,430d0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   43104:	e037883a 	mov	sp,fp
   43108:	df000017 	ldw	fp,0(sp)
   4310c:	dec00104 	addi	sp,sp,4
   43110:	f800283a 	ret

00043114 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   43114:	defffe04 	addi	sp,sp,-8
   43118:	dfc00115 	stw	ra,4(sp)
   4311c:	df000015 	stw	fp,0(sp)
   43120:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   43124:	01000134 	movhi	r4,4
   43128:	211bf004 	addi	r4,r4,28608
   4312c:	01400134 	movhi	r5,4
   43130:	29555e04 	addi	r5,r5,21880
   43134:	01800134 	movhi	r6,4
   43138:	319bf004 	addi	r6,r6,28608
   4313c:	00430a80 	call	430a8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   43140:	01000134 	movhi	r4,4
   43144:	21000804 	addi	r4,r4,32
   43148:	01400134 	movhi	r5,4
   4314c:	29400804 	addi	r5,r5,32
   43150:	01800134 	movhi	r6,4
   43154:	31806e04 	addi	r6,r6,440
   43158:	00430a80 	call	430a8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   4315c:	01000134 	movhi	r4,4
   43160:	21154c04 	addi	r4,r4,21808
   43164:	01400134 	movhi	r5,4
   43168:	29554c04 	addi	r5,r5,21808
   4316c:	01800134 	movhi	r6,4
   43170:	31955e04 	addi	r6,r6,21880
   43174:	00430a80 	call	430a8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   43178:	00444900 	call	44490 <alt_dcache_flush_all>
  alt_icache_flush_all();
   4317c:	00446540 	call	44654 <alt_icache_flush_all>
}
   43180:	e037883a 	mov	sp,fp
   43184:	dfc00117 	ldw	ra,4(sp)
   43188:	df000017 	ldw	fp,0(sp)
   4318c:	dec00204 	addi	sp,sp,8
   43190:	f800283a 	ret

00043194 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43194:	defffe04 	addi	sp,sp,-8
   43198:	dfc00115 	stw	ra,4(sp)
   4319c:	df000015 	stw	fp,0(sp)
   431a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   431a4:	00800134 	movhi	r2,4
   431a8:	109beb04 	addi	r2,r2,28588
   431ac:	10800017 	ldw	r2,0(r2)
   431b0:	10000526 	beq	r2,zero,431c8 <alt_get_errno+0x34>
   431b4:	00800134 	movhi	r2,4
   431b8:	109beb04 	addi	r2,r2,28588
   431bc:	10800017 	ldw	r2,0(r2)
   431c0:	103ee83a 	callr	r2
   431c4:	00000206 	br	431d0 <alt_get_errno+0x3c>
   431c8:	00800174 	movhi	r2,5
   431cc:	10a28504 	addi	r2,r2,-30188
}
   431d0:	e037883a 	mov	sp,fp
   431d4:	dfc00117 	ldw	ra,4(sp)
   431d8:	df000017 	ldw	fp,0(sp)
   431dc:	dec00204 	addi	sp,sp,8
   431e0:	f800283a 	ret

000431e4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   431e4:	defff904 	addi	sp,sp,-28
   431e8:	dfc00615 	stw	ra,24(sp)
   431ec:	df000515 	stw	fp,20(sp)
   431f0:	df000504 	addi	fp,sp,20
   431f4:	e13ffd15 	stw	r4,-12(fp)
   431f8:	e17ffe15 	stw	r5,-8(fp)
   431fc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   43200:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43204:	e0bffd17 	ldw	r2,-12(fp)
   43208:	10000716 	blt	r2,zero,43228 <lseek+0x44>
   4320c:	e13ffd17 	ldw	r4,-12(fp)
   43210:	01400304 	movi	r5,12
   43214:	0042d440 	call	42d44 <__mulsi3>
   43218:	00c00134 	movhi	r3,4
   4321c:	18d76a04 	addi	r3,r3,23976
   43220:	10c5883a 	add	r2,r2,r3
   43224:	00000106 	br	4322c <lseek+0x48>
   43228:	0005883a 	mov	r2,zero
   4322c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   43230:	e0bffc17 	ldw	r2,-16(fp)
   43234:	10001026 	beq	r2,zero,43278 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   43238:	e0bffc17 	ldw	r2,-16(fp)
   4323c:	10800017 	ldw	r2,0(r2)
   43240:	10800717 	ldw	r2,28(r2)
   43244:	10000926 	beq	r2,zero,4326c <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   43248:	e0bffc17 	ldw	r2,-16(fp)
   4324c:	10800017 	ldw	r2,0(r2)
   43250:	10800717 	ldw	r2,28(r2)
   43254:	e13ffc17 	ldw	r4,-16(fp)
   43258:	e17ffe17 	ldw	r5,-8(fp)
   4325c:	e1bfff17 	ldw	r6,-4(fp)
   43260:	103ee83a 	callr	r2
   43264:	e0bffb15 	stw	r2,-20(fp)
   43268:	00000506 	br	43280 <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   4326c:	00bfde84 	movi	r2,-134
   43270:	e0bffb15 	stw	r2,-20(fp)
   43274:	00000206 	br	43280 <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
   43278:	00bfebc4 	movi	r2,-81
   4327c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   43280:	e0bffb17 	ldw	r2,-20(fp)
   43284:	1000060e 	bge	r2,zero,432a0 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   43288:	00431940 	call	43194 <alt_get_errno>
   4328c:	e0fffb17 	ldw	r3,-20(fp)
   43290:	00c7c83a 	sub	r3,zero,r3
   43294:	10c00015 	stw	r3,0(r2)
    rc = -1;
   43298:	00bfffc4 	movi	r2,-1
   4329c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   432a0:	e0bffb17 	ldw	r2,-20(fp)
}
   432a4:	e037883a 	mov	sp,fp
   432a8:	dfc00117 	ldw	ra,4(sp)
   432ac:	df000017 	ldw	fp,0(sp)
   432b0:	dec00204 	addi	sp,sp,8
   432b4:	f800283a 	ret

000432b8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   432b8:	defffd04 	addi	sp,sp,-12
   432bc:	dfc00215 	stw	ra,8(sp)
   432c0:	df000115 	stw	fp,4(sp)
   432c4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   432c8:	0009883a 	mov	r4,zero
   432cc:	004375c0 	call	4375c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   432d0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   432d4:	00437900 	call	43790 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   432d8:	01000134 	movhi	r4,4
   432dc:	21155604 	addi	r4,r4,21848
   432e0:	01400134 	movhi	r5,4
   432e4:	29555604 	addi	r5,r5,21848
   432e8:	01800134 	movhi	r6,4
   432ec:	31955604 	addi	r6,r6,21848
   432f0:	0044a180 	call	44a18 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   432f4:	004459c0 	call	4459c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   432f8:	01000134 	movhi	r4,4
   432fc:	21117e04 	addi	r4,r4,17912
   43300:	004515c0 	call	4515c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   43304:	d126a417 	ldw	r4,-25968(gp)
   43308:	d0e6a517 	ldw	r3,-25964(gp)
   4330c:	d0a6a617 	ldw	r2,-25960(gp)
   43310:	180b883a 	mov	r5,r3
   43314:	100d883a 	mov	r6,r2
   43318:	00401f40 	call	401f4 <main>
   4331c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   43320:	01000044 	movi	r4,1
   43324:	0042dbc0 	call	42dbc <close>
  exit (result);
   43328:	e13fff17 	ldw	r4,-4(fp)
   4332c:	00451700 	call	45170 <exit>

00043330 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   43330:	defffe04 	addi	sp,sp,-8
   43334:	df000115 	stw	fp,4(sp)
   43338:	df000104 	addi	fp,sp,4
   4333c:	e13fff15 	stw	r4,-4(fp)
}
   43340:	e037883a 	mov	sp,fp
   43344:	df000017 	ldw	fp,0(sp)
   43348:	dec00104 	addi	sp,sp,4
   4334c:	f800283a 	ret

00043350 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   43350:	defffe04 	addi	sp,sp,-8
   43354:	df000115 	stw	fp,4(sp)
   43358:	df000104 	addi	fp,sp,4
   4335c:	e13fff15 	stw	r4,-4(fp)
}
   43360:	e037883a 	mov	sp,fp
   43364:	df000017 	ldw	fp,0(sp)
   43368:	dec00104 	addi	sp,sp,4
   4336c:	f800283a 	ret

00043370 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43370:	defffe04 	addi	sp,sp,-8
   43374:	dfc00115 	stw	ra,4(sp)
   43378:	df000015 	stw	fp,0(sp)
   4337c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43380:	00800134 	movhi	r2,4
   43384:	109beb04 	addi	r2,r2,28588
   43388:	10800017 	ldw	r2,0(r2)
   4338c:	10000526 	beq	r2,zero,433a4 <alt_get_errno+0x34>
   43390:	00800134 	movhi	r2,4
   43394:	109beb04 	addi	r2,r2,28588
   43398:	10800017 	ldw	r2,0(r2)
   4339c:	103ee83a 	callr	r2
   433a0:	00000206 	br	433ac <alt_get_errno+0x3c>
   433a4:	00800174 	movhi	r2,5
   433a8:	10a28504 	addi	r2,r2,-30188
}
   433ac:	e037883a 	mov	sp,fp
   433b0:	dfc00117 	ldw	ra,4(sp)
   433b4:	df000017 	ldw	fp,0(sp)
   433b8:	dec00204 	addi	sp,sp,8
   433bc:	f800283a 	ret

000433c0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   433c0:	defff904 	addi	sp,sp,-28
   433c4:	dfc00615 	stw	ra,24(sp)
   433c8:	df000515 	stw	fp,20(sp)
   433cc:	df000504 	addi	fp,sp,20
   433d0:	e13ffd15 	stw	r4,-12(fp)
   433d4:	e17ffe15 	stw	r5,-8(fp)
   433d8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   433dc:	e0bffd17 	ldw	r2,-12(fp)
   433e0:	10000716 	blt	r2,zero,43400 <read+0x40>
   433e4:	e13ffd17 	ldw	r4,-12(fp)
   433e8:	01400304 	movi	r5,12
   433ec:	0042d440 	call	42d44 <__mulsi3>
   433f0:	00c00134 	movhi	r3,4
   433f4:	18d76a04 	addi	r3,r3,23976
   433f8:	10c5883a 	add	r2,r2,r3
   433fc:	00000106 	br	43404 <read+0x44>
   43400:	0005883a 	mov	r2,zero
   43404:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   43408:	e0bffb17 	ldw	r2,-20(fp)
   4340c:	10002026 	beq	r2,zero,43490 <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   43410:	e0bffb17 	ldw	r2,-20(fp)
   43414:	10800217 	ldw	r2,8(r2)
   43418:	108000cc 	andi	r2,r2,3
   4341c:	10800060 	cmpeqi	r2,r2,1
   43420:	1000171e 	bne	r2,zero,43480 <read+0xc0>
        (fd->dev->read))
   43424:	e0bffb17 	ldw	r2,-20(fp)
   43428:	10800017 	ldw	r2,0(r2)
   4342c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   43430:	10001326 	beq	r2,zero,43480 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   43434:	e0bffb17 	ldw	r2,-20(fp)
   43438:	10800017 	ldw	r2,0(r2)
   4343c:	10c00517 	ldw	r3,20(r2)
   43440:	e0bfff17 	ldw	r2,-4(fp)
   43444:	e13ffb17 	ldw	r4,-20(fp)
   43448:	e17ffe17 	ldw	r5,-8(fp)
   4344c:	100d883a 	mov	r6,r2
   43450:	183ee83a 	callr	r3
   43454:	e0bffc15 	stw	r2,-16(fp)
   43458:	e0bffc17 	ldw	r2,-16(fp)
   4345c:	1000060e 	bge	r2,zero,43478 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   43460:	00433700 	call	43370 <alt_get_errno>
   43464:	e0fffc17 	ldw	r3,-16(fp)
   43468:	00c7c83a 	sub	r3,zero,r3
   4346c:	10c00015 	stw	r3,0(r2)
          return -1;
   43470:	00bfffc4 	movi	r2,-1
   43474:	00000a06 	br	434a0 <read+0xe0>
        }
        return rval;
   43478:	e0bffc17 	ldw	r2,-16(fp)
   4347c:	00000806 	br	434a0 <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   43480:	00433700 	call	43370 <alt_get_errno>
   43484:	00c00344 	movi	r3,13
   43488:	10c00015 	stw	r3,0(r2)
   4348c:	00000306 	br	4349c <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   43490:	00433700 	call	43370 <alt_get_errno>
   43494:	00c01444 	movi	r3,81
   43498:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   4349c:	00bfffc4 	movi	r2,-1
}
   434a0:	e037883a 	mov	sp,fp
   434a4:	dfc00117 	ldw	ra,4(sp)
   434a8:	df000017 	ldw	fp,0(sp)
   434ac:	dec00204 	addi	sp,sp,8
   434b0:	f800283a 	ret

000434b4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   434b4:	defffc04 	addi	sp,sp,-16
   434b8:	dfc00315 	stw	ra,12(sp)
   434bc:	df000215 	stw	fp,8(sp)
   434c0:	dc000115 	stw	r16,4(sp)
   434c4:	df000104 	addi	fp,sp,4
   434c8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   434cc:	e0bfff17 	ldw	r2,-4(fp)
   434d0:	108000d0 	cmplti	r2,r2,3
   434d4:	1000111e 	bne	r2,zero,4351c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   434d8:	04000134 	movhi	r16,4
   434dc:	84176a04 	addi	r16,r16,23976
   434e0:	e0bfff17 	ldw	r2,-4(fp)
   434e4:	1009883a 	mov	r4,r2
   434e8:	01400304 	movi	r5,12
   434ec:	0042d440 	call	42d44 <__mulsi3>
   434f0:	8085883a 	add	r2,r16,r2
   434f4:	10800204 	addi	r2,r2,8
   434f8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   434fc:	04000134 	movhi	r16,4
   43500:	84176a04 	addi	r16,r16,23976
   43504:	e0bfff17 	ldw	r2,-4(fp)
   43508:	1009883a 	mov	r4,r2
   4350c:	01400304 	movi	r5,12
   43510:	0042d440 	call	42d44 <__mulsi3>
   43514:	8085883a 	add	r2,r16,r2
   43518:	10000015 	stw	zero,0(r2)
  }
}
   4351c:	e037883a 	mov	sp,fp
   43520:	dfc00217 	ldw	ra,8(sp)
   43524:	df000117 	ldw	fp,4(sp)
   43528:	dc000017 	ldw	r16,0(sp)
   4352c:	dec00304 	addi	sp,sp,12
   43530:	f800283a 	ret

00043534 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   43534:	defff904 	addi	sp,sp,-28
   43538:	df000615 	stw	fp,24(sp)
   4353c:	df000604 	addi	fp,sp,24
   43540:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   43544:	0005303a 	rdctl	r2,status
   43548:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4354c:	e0fffc17 	ldw	r3,-16(fp)
   43550:	00bfff84 	movi	r2,-2
   43554:	1884703a 	and	r2,r3,r2
   43558:	1001703a 	wrctl	status,r2
  
  return context;
   4355c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   43560:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   43564:	d0a00a17 	ldw	r2,-32728(gp)
   43568:	10c000c4 	addi	r3,r2,3
   4356c:	00bfff04 	movi	r2,-4
   43570:	1884703a 	and	r2,r3,r2
   43574:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   43578:	d0e00a17 	ldw	r3,-32728(gp)
   4357c:	e0bfff17 	ldw	r2,-4(fp)
   43580:	1885883a 	add	r2,r3,r2
   43584:	00c00234 	movhi	r3,8
   43588:	18c00004 	addi	r3,r3,0
   4358c:	1880062e 	bgeu	r3,r2,435a8 <sbrk+0x74>
   43590:	e0bffa17 	ldw	r2,-24(fp)
   43594:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   43598:	e0bffd17 	ldw	r2,-12(fp)
   4359c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   435a0:	00bfffc4 	movi	r2,-1
   435a4:	00000b06 	br	435d4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   435a8:	d0a00a17 	ldw	r2,-32728(gp)
   435ac:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   435b0:	d0e00a17 	ldw	r3,-32728(gp)
   435b4:	e0bfff17 	ldw	r2,-4(fp)
   435b8:	1885883a 	add	r2,r3,r2
   435bc:	d0a00a15 	stw	r2,-32728(gp)
   435c0:	e0bffa17 	ldw	r2,-24(fp)
   435c4:	e0bffe15 	stw	r2,-8(fp)
   435c8:	e0bffe17 	ldw	r2,-8(fp)
   435cc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   435d0:	e0bffb17 	ldw	r2,-20(fp)
} 
   435d4:	e037883a 	mov	sp,fp
   435d8:	df000017 	ldw	fp,0(sp)
   435dc:	dec00104 	addi	sp,sp,4
   435e0:	f800283a 	ret

000435e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   435e4:	defffe04 	addi	sp,sp,-8
   435e8:	dfc00115 	stw	ra,4(sp)
   435ec:	df000015 	stw	fp,0(sp)
   435f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   435f4:	00800134 	movhi	r2,4
   435f8:	109beb04 	addi	r2,r2,28588
   435fc:	10800017 	ldw	r2,0(r2)
   43600:	10000526 	beq	r2,zero,43618 <alt_get_errno+0x34>
   43604:	00800134 	movhi	r2,4
   43608:	109beb04 	addi	r2,r2,28588
   4360c:	10800017 	ldw	r2,0(r2)
   43610:	103ee83a 	callr	r2
   43614:	00000206 	br	43620 <alt_get_errno+0x3c>
   43618:	00800174 	movhi	r2,5
   4361c:	10a28504 	addi	r2,r2,-30188
}
   43620:	e037883a 	mov	sp,fp
   43624:	dfc00117 	ldw	ra,4(sp)
   43628:	df000017 	ldw	fp,0(sp)
   4362c:	dec00204 	addi	sp,sp,8
   43630:	f800283a 	ret

00043634 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   43634:	defff904 	addi	sp,sp,-28
   43638:	dfc00615 	stw	ra,24(sp)
   4363c:	df000515 	stw	fp,20(sp)
   43640:	df000504 	addi	fp,sp,20
   43644:	e13ffd15 	stw	r4,-12(fp)
   43648:	e17ffe15 	stw	r5,-8(fp)
   4364c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43650:	e0bffd17 	ldw	r2,-12(fp)
   43654:	10000716 	blt	r2,zero,43674 <write+0x40>
   43658:	e13ffd17 	ldw	r4,-12(fp)
   4365c:	01400304 	movi	r5,12
   43660:	0042d440 	call	42d44 <__mulsi3>
   43664:	00c00134 	movhi	r3,4
   43668:	18d76a04 	addi	r3,r3,23976
   4366c:	10c5883a 	add	r2,r2,r3
   43670:	00000106 	br	43678 <write+0x44>
   43674:	0005883a 	mov	r2,zero
   43678:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   4367c:	e0bffb17 	ldw	r2,-20(fp)
   43680:	10001f26 	beq	r2,zero,43700 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   43684:	e0bffb17 	ldw	r2,-20(fp)
   43688:	10800217 	ldw	r2,8(r2)
   4368c:	108000cc 	andi	r2,r2,3
   43690:	10001726 	beq	r2,zero,436f0 <write+0xbc>
   43694:	e0bffb17 	ldw	r2,-20(fp)
   43698:	10800017 	ldw	r2,0(r2)
   4369c:	10800617 	ldw	r2,24(r2)
   436a0:	10001326 	beq	r2,zero,436f0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   436a4:	e0bffb17 	ldw	r2,-20(fp)
   436a8:	10800017 	ldw	r2,0(r2)
   436ac:	10c00617 	ldw	r3,24(r2)
   436b0:	e0bfff17 	ldw	r2,-4(fp)
   436b4:	e13ffb17 	ldw	r4,-20(fp)
   436b8:	e17ffe17 	ldw	r5,-8(fp)
   436bc:	100d883a 	mov	r6,r2
   436c0:	183ee83a 	callr	r3
   436c4:	e0bffc15 	stw	r2,-16(fp)
   436c8:	e0bffc17 	ldw	r2,-16(fp)
   436cc:	1000060e 	bge	r2,zero,436e8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   436d0:	00435e40 	call	435e4 <alt_get_errno>
   436d4:	e0fffc17 	ldw	r3,-16(fp)
   436d8:	00c7c83a 	sub	r3,zero,r3
   436dc:	10c00015 	stw	r3,0(r2)
        return -1;
   436e0:	00bfffc4 	movi	r2,-1
   436e4:	00000a06 	br	43710 <write+0xdc>
      }
      return rval;
   436e8:	e0bffc17 	ldw	r2,-16(fp)
   436ec:	00000806 	br	43710 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
   436f0:	00435e40 	call	435e4 <alt_get_errno>
   436f4:	00c00344 	movi	r3,13
   436f8:	10c00015 	stw	r3,0(r2)
   436fc:	00000306 	br	4370c <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   43700:	00435e40 	call	435e4 <alt_get_errno>
   43704:	00c01444 	movi	r3,81
   43708:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   4370c:	00bfffc4 	movi	r2,-1
}
   43710:	e037883a 	mov	sp,fp
   43714:	dfc00117 	ldw	ra,4(sp)
   43718:	df000017 	ldw	fp,0(sp)
   4371c:	dec00204 	addi	sp,sp,8
   43720:	f800283a 	ret

00043724 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   43724:	defffd04 	addi	sp,sp,-12
   43728:	dfc00215 	stw	ra,8(sp)
   4372c:	df000115 	stw	fp,4(sp)
   43730:	df000104 	addi	fp,sp,4
   43734:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   43738:	e13fff17 	ldw	r4,-4(fp)
   4373c:	01400134 	movhi	r5,4
   43740:	295be804 	addi	r5,r5,28576
   43744:	00444fc0 	call	444fc <alt_dev_llist_insert>
}
   43748:	e037883a 	mov	sp,fp
   4374c:	dfc00117 	ldw	ra,4(sp)
   43750:	df000017 	ldw	fp,0(sp)
   43754:	dec00204 	addi	sp,sp,8
   43758:	f800283a 	ret

0004375c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   4375c:	defffd04 	addi	sp,sp,-12
   43760:	dfc00215 	stw	ra,8(sp)
   43764:	df000115 	stw	fp,4(sp)
   43768:	df000104 	addi	fp,sp,4
   4376c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU0, cpu0);
   43770:	0044ec40 	call	44ec4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   43774:	00800044 	movi	r2,1
   43778:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   4377c:	e037883a 	mov	sp,fp
   43780:	dfc00117 	ldw	ra,4(sp)
   43784:	df000017 	ldw	fp,0(sp)
   43788:	dec00204 	addi	sp,sp,8
   4378c:	f800283a 	ret

00043790 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   43790:	defffe04 	addi	sp,sp,-8
   43794:	dfc00115 	stw	ra,4(sp)
   43798:	df000015 	stw	fp,0(sp)
   4379c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER0, timer0);
   437a0:	01000234 	movhi	r4,8
   437a4:	21040004 	addi	r4,r4,4096
   437a8:	000b883a 	mov	r5,zero
   437ac:	000d883a 	mov	r6,zero
   437b0:	01c0fa04 	movi	r7,1000
   437b4:	00442c80 	call	442c8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART0, jtag_uart0);
   437b8:	01000134 	movhi	r4,4
   437bc:	2117d404 	addi	r4,r4,24400
   437c0:	000b883a 	mov	r5,zero
   437c4:	01800404 	movi	r6,16
   437c8:	00439540 	call	43954 <altera_avalon_jtag_uart_init>
   437cc:	01000134 	movhi	r4,4
   437d0:	2117ca04 	addi	r4,r4,24360
   437d4:	00437240 	call	43724 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID0, sysid0);
   437d8:	0001883a 	nop
}
   437dc:	e037883a 	mov	sp,fp
   437e0:	dfc00117 	ldw	ra,4(sp)
   437e4:	df000017 	ldw	fp,0(sp)
   437e8:	dec00204 	addi	sp,sp,8
   437ec:	f800283a 	ret

000437f0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   437f0:	defffa04 	addi	sp,sp,-24
   437f4:	dfc00515 	stw	ra,20(sp)
   437f8:	df000415 	stw	fp,16(sp)
   437fc:	df000404 	addi	fp,sp,16
   43800:	e13ffd15 	stw	r4,-12(fp)
   43804:	e17ffe15 	stw	r5,-8(fp)
   43808:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4380c:	e0bffd17 	ldw	r2,-12(fp)
   43810:	10800017 	ldw	r2,0(r2)
   43814:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   43818:	e0bffc17 	ldw	r2,-16(fp)
   4381c:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   43820:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   43824:	10800217 	ldw	r2,8(r2)
   43828:	1809883a 	mov	r4,r3
   4382c:	e17ffe17 	ldw	r5,-8(fp)
   43830:	e1bfff17 	ldw	r6,-4(fp)
   43834:	100f883a 	mov	r7,r2
   43838:	0043e180 	call	43e18 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   4383c:	e037883a 	mov	sp,fp
   43840:	dfc00117 	ldw	ra,4(sp)
   43844:	df000017 	ldw	fp,0(sp)
   43848:	dec00204 	addi	sp,sp,8
   4384c:	f800283a 	ret

00043850 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   43850:	defffa04 	addi	sp,sp,-24
   43854:	dfc00515 	stw	ra,20(sp)
   43858:	df000415 	stw	fp,16(sp)
   4385c:	df000404 	addi	fp,sp,16
   43860:	e13ffd15 	stw	r4,-12(fp)
   43864:	e17ffe15 	stw	r5,-8(fp)
   43868:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4386c:	e0bffd17 	ldw	r2,-12(fp)
   43870:	10800017 	ldw	r2,0(r2)
   43874:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   43878:	e0bffc17 	ldw	r2,-16(fp)
   4387c:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   43880:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   43884:	10800217 	ldw	r2,8(r2)
   43888:	1809883a 	mov	r4,r3
   4388c:	e17ffe17 	ldw	r5,-8(fp)
   43890:	e1bfff17 	ldw	r6,-4(fp)
   43894:	100f883a 	mov	r7,r2
   43898:	00440300 	call	44030 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   4389c:	e037883a 	mov	sp,fp
   438a0:	dfc00117 	ldw	ra,4(sp)
   438a4:	df000017 	ldw	fp,0(sp)
   438a8:	dec00204 	addi	sp,sp,8
   438ac:	f800283a 	ret

000438b0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   438b0:	defffc04 	addi	sp,sp,-16
   438b4:	dfc00315 	stw	ra,12(sp)
   438b8:	df000215 	stw	fp,8(sp)
   438bc:	df000204 	addi	fp,sp,8
   438c0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   438c4:	e0bfff17 	ldw	r2,-4(fp)
   438c8:	10800017 	ldw	r2,0(r2)
   438cc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   438d0:	e0bffe17 	ldw	r2,-8(fp)
   438d4:	10c00a04 	addi	r3,r2,40
   438d8:	e0bfff17 	ldw	r2,-4(fp)
   438dc:	10800217 	ldw	r2,8(r2)
   438e0:	1809883a 	mov	r4,r3
   438e4:	100b883a 	mov	r5,r2
   438e8:	0043cbc0 	call	43cbc <altera_avalon_jtag_uart_close>
}
   438ec:	e037883a 	mov	sp,fp
   438f0:	dfc00117 	ldw	ra,4(sp)
   438f4:	df000017 	ldw	fp,0(sp)
   438f8:	dec00204 	addi	sp,sp,8
   438fc:	f800283a 	ret

00043900 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   43900:	defffa04 	addi	sp,sp,-24
   43904:	dfc00515 	stw	ra,20(sp)
   43908:	df000415 	stw	fp,16(sp)
   4390c:	df000404 	addi	fp,sp,16
   43910:	e13ffd15 	stw	r4,-12(fp)
   43914:	e17ffe15 	stw	r5,-8(fp)
   43918:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   4391c:	e0bffd17 	ldw	r2,-12(fp)
   43920:	10800017 	ldw	r2,0(r2)
   43924:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   43928:	e0bffc17 	ldw	r2,-16(fp)
   4392c:	10800a04 	addi	r2,r2,40
   43930:	1009883a 	mov	r4,r2
   43934:	e17ffe17 	ldw	r5,-8(fp)
   43938:	e1bfff17 	ldw	r6,-4(fp)
   4393c:	0043d240 	call	43d24 <altera_avalon_jtag_uart_ioctl>
}
   43940:	e037883a 	mov	sp,fp
   43944:	dfc00117 	ldw	ra,4(sp)
   43948:	df000017 	ldw	fp,0(sp)
   4394c:	dec00204 	addi	sp,sp,8
   43950:	f800283a 	ret

00043954 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   43954:	defffa04 	addi	sp,sp,-24
   43958:	dfc00515 	stw	ra,20(sp)
   4395c:	df000415 	stw	fp,16(sp)
   43960:	df000404 	addi	fp,sp,16
   43964:	e13ffd15 	stw	r4,-12(fp)
   43968:	e17ffe15 	stw	r5,-8(fp)
   4396c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   43970:	e0bffd17 	ldw	r2,-12(fp)
   43974:	00c00044 	movi	r3,1
   43978:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   4397c:	e0bffd17 	ldw	r2,-12(fp)
   43980:	10800017 	ldw	r2,0(r2)
   43984:	10800104 	addi	r2,r2,4
   43988:	e0fffd17 	ldw	r3,-12(fp)
   4398c:	18c00817 	ldw	r3,32(r3)
   43990:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   43994:	e0fffe17 	ldw	r3,-8(fp)
   43998:	e0bfff17 	ldw	r2,-4(fp)
   4399c:	d8000015 	stw	zero,0(sp)
   439a0:	1809883a 	mov	r4,r3
   439a4:	100b883a 	mov	r5,r2
   439a8:	01800134 	movhi	r6,4
   439ac:	318e8504 	addi	r6,r6,14868
   439b0:	e1fffd17 	ldw	r7,-12(fp)
   439b4:	00446700 	call	44670 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   439b8:	e0bffd17 	ldw	r2,-12(fp)
   439bc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   439c0:	e0bffd17 	ldw	r2,-12(fp)
   439c4:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   439c8:	00800174 	movhi	r2,5
   439cc:	10a28a04 	addi	r2,r2,-30168
   439d0:	10800017 	ldw	r2,0(r2)
   439d4:	1809883a 	mov	r4,r3
   439d8:	100b883a 	mov	r5,r2
   439dc:	01800134 	movhi	r6,4
   439e0:	318f0604 	addi	r6,r6,15384
   439e4:	e1fffd17 	ldw	r7,-12(fp)
   439e8:	00443500 	call	44350 <alt_alarm_start>
   439ec:	1000040e 	bge	r2,zero,43a00 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   439f0:	e0bffd17 	ldw	r2,-12(fp)
   439f4:	00e00034 	movhi	r3,32768
   439f8:	18ffffc4 	addi	r3,r3,-1
   439fc:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   43a00:	e037883a 	mov	sp,fp
   43a04:	dfc00117 	ldw	ra,4(sp)
   43a08:	df000017 	ldw	fp,0(sp)
   43a0c:	dec00204 	addi	sp,sp,8
   43a10:	f800283a 	ret

00043a14 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   43a14:	defff804 	addi	sp,sp,-32
   43a18:	df000715 	stw	fp,28(sp)
   43a1c:	df000704 	addi	fp,sp,28
   43a20:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   43a24:	e0bfff17 	ldw	r2,-4(fp)
   43a28:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   43a2c:	e0bffb17 	ldw	r2,-20(fp)
   43a30:	10800017 	ldw	r2,0(r2)
   43a34:	e0bffc15 	stw	r2,-16(fp)
   43a38:	00000106 	br	43a40 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
   43a3c:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   43a40:	e0bffc17 	ldw	r2,-16(fp)
   43a44:	10800104 	addi	r2,r2,4
   43a48:	10800037 	ldwio	r2,0(r2)
   43a4c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   43a50:	e0bffd17 	ldw	r2,-12(fp)
   43a54:	1080c00c 	andi	r2,r2,768
   43a58:	10006a26 	beq	r2,zero,43c04 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   43a5c:	e0bffd17 	ldw	r2,-12(fp)
   43a60:	1080400c 	andi	r2,r2,256
   43a64:	10003326 	beq	r2,zero,43b34 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   43a68:	00800074 	movhi	r2,1
   43a6c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   43a70:	e0bffb17 	ldw	r2,-20(fp)
   43a74:	10800a17 	ldw	r2,40(r2)
   43a78:	10800044 	addi	r2,r2,1
   43a7c:	1081ffcc 	andi	r2,r2,2047
   43a80:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   43a84:	e0bffb17 	ldw	r2,-20(fp)
   43a88:	10c00b17 	ldw	r3,44(r2)
   43a8c:	e0bffe17 	ldw	r2,-8(fp)
   43a90:	18801426 	beq	r3,r2,43ae4 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   43a94:	e0bffc17 	ldw	r2,-16(fp)
   43a98:	10800037 	ldwio	r2,0(r2)
   43a9c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   43aa0:	e0bff917 	ldw	r2,-28(fp)
   43aa4:	10a0000c 	andi	r2,r2,32768
   43aa8:	10001026 	beq	r2,zero,43aec <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   43aac:	e0bffb17 	ldw	r2,-20(fp)
   43ab0:	10800a17 	ldw	r2,40(r2)
   43ab4:	e0fff917 	ldw	r3,-28(fp)
   43ab8:	e13ffb17 	ldw	r4,-20(fp)
   43abc:	2085883a 	add	r2,r4,r2
   43ac0:	10800e04 	addi	r2,r2,56
   43ac4:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   43ac8:	e0bffb17 	ldw	r2,-20(fp)
   43acc:	10800a17 	ldw	r2,40(r2)
   43ad0:	10800044 	addi	r2,r2,1
   43ad4:	10c1ffcc 	andi	r3,r2,2047
   43ad8:	e0bffb17 	ldw	r2,-20(fp)
   43adc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   43ae0:	003fe306 	br	43a70 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   43ae4:	0001883a 	nop
   43ae8:	00000106 	br	43af0 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   43aec:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   43af0:	e0bff917 	ldw	r2,-28(fp)
   43af4:	10bfffec 	andhi	r2,r2,65535
   43af8:	10000e26 	beq	r2,zero,43b34 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   43afc:	e0bffb17 	ldw	r2,-20(fp)
   43b00:	10c00817 	ldw	r3,32(r2)
   43b04:	00bfff84 	movi	r2,-2
   43b08:	1886703a 	and	r3,r3,r2
   43b0c:	e0bffb17 	ldw	r2,-20(fp)
   43b10:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   43b14:	e0bffc17 	ldw	r2,-16(fp)
   43b18:	10800104 	addi	r2,r2,4
   43b1c:	e0fffb17 	ldw	r3,-20(fp)
   43b20:	18c00817 	ldw	r3,32(r3)
   43b24:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   43b28:	e0bffc17 	ldw	r2,-16(fp)
   43b2c:	10800104 	addi	r2,r2,4
   43b30:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   43b34:	e0bffd17 	ldw	r2,-12(fp)
   43b38:	1080800c 	andi	r2,r2,512
   43b3c:	103fbf26 	beq	r2,zero,43a3c <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   43b40:	e0bffd17 	ldw	r2,-12(fp)
   43b44:	1004d43a 	srli	r2,r2,16
   43b48:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   43b4c:	00001406 	br	43ba0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   43b50:	e0bffc17 	ldw	r2,-16(fp)
   43b54:	e0fffb17 	ldw	r3,-20(fp)
   43b58:	18c00d17 	ldw	r3,52(r3)
   43b5c:	e13ffb17 	ldw	r4,-20(fp)
   43b60:	20c7883a 	add	r3,r4,r3
   43b64:	18c20e04 	addi	r3,r3,2104
   43b68:	18c00003 	ldbu	r3,0(r3)
   43b6c:	18c03fcc 	andi	r3,r3,255
   43b70:	18c0201c 	xori	r3,r3,128
   43b74:	18ffe004 	addi	r3,r3,-128
   43b78:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   43b7c:	e0bffb17 	ldw	r2,-20(fp)
   43b80:	10800d17 	ldw	r2,52(r2)
   43b84:	10800044 	addi	r2,r2,1
   43b88:	10c1ffcc 	andi	r3,r2,2047
   43b8c:	e0bffb17 	ldw	r2,-20(fp)
   43b90:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   43b94:	e0bffa17 	ldw	r2,-24(fp)
   43b98:	10bfffc4 	addi	r2,r2,-1
   43b9c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   43ba0:	e0bffa17 	ldw	r2,-24(fp)
   43ba4:	10000526 	beq	r2,zero,43bbc <altera_avalon_jtag_uart_irq+0x1a8>
   43ba8:	e0bffb17 	ldw	r2,-20(fp)
   43bac:	10c00d17 	ldw	r3,52(r2)
   43bb0:	e0bffb17 	ldw	r2,-20(fp)
   43bb4:	10800c17 	ldw	r2,48(r2)
   43bb8:	18bfe51e 	bne	r3,r2,43b50 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   43bbc:	e0bffa17 	ldw	r2,-24(fp)
   43bc0:	103f9e26 	beq	r2,zero,43a3c <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   43bc4:	e0bffb17 	ldw	r2,-20(fp)
   43bc8:	10c00817 	ldw	r3,32(r2)
   43bcc:	00bfff44 	movi	r2,-3
   43bd0:	1886703a 	and	r3,r3,r2
   43bd4:	e0bffb17 	ldw	r2,-20(fp)
   43bd8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   43bdc:	e0bffb17 	ldw	r2,-20(fp)
   43be0:	10800017 	ldw	r2,0(r2)
   43be4:	10800104 	addi	r2,r2,4
   43be8:	e0fffb17 	ldw	r3,-20(fp)
   43bec:	18c00817 	ldw	r3,32(r3)
   43bf0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   43bf4:	e0bffc17 	ldw	r2,-16(fp)
   43bf8:	10800104 	addi	r2,r2,4
   43bfc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   43c00:	003f8e06 	br	43a3c <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   43c04:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   43c08:	e037883a 	mov	sp,fp
   43c0c:	df000017 	ldw	fp,0(sp)
   43c10:	dec00104 	addi	sp,sp,4
   43c14:	f800283a 	ret

00043c18 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   43c18:	defffc04 	addi	sp,sp,-16
   43c1c:	df000315 	stw	fp,12(sp)
   43c20:	df000304 	addi	fp,sp,12
   43c24:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   43c28:	e0bfff17 	ldw	r2,-4(fp)
   43c2c:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   43c30:	e0bffd17 	ldw	r2,-12(fp)
   43c34:	10800017 	ldw	r2,0(r2)
   43c38:	10800104 	addi	r2,r2,4
   43c3c:	10800037 	ldwio	r2,0(r2)
   43c40:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   43c44:	e0bffe17 	ldw	r2,-8(fp)
   43c48:	1081000c 	andi	r2,r2,1024
   43c4c:	10000a26 	beq	r2,zero,43c78 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   43c50:	e0bffd17 	ldw	r2,-12(fp)
   43c54:	10800017 	ldw	r2,0(r2)
   43c58:	10800104 	addi	r2,r2,4
   43c5c:	e0fffd17 	ldw	r3,-12(fp)
   43c60:	18c00817 	ldw	r3,32(r3)
   43c64:	18c10014 	ori	r3,r3,1024
   43c68:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   43c6c:	e0bffd17 	ldw	r2,-12(fp)
   43c70:	10000915 	stw	zero,36(r2)
   43c74:	00000a06 	br	43ca0 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   43c78:	e0bffd17 	ldw	r2,-12(fp)
   43c7c:	10800917 	ldw	r2,36(r2)
   43c80:	00e00034 	movhi	r3,32768
   43c84:	18ffff04 	addi	r3,r3,-4
   43c88:	18800536 	bltu	r3,r2,43ca0 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
   43c8c:	e0bffd17 	ldw	r2,-12(fp)
   43c90:	10800917 	ldw	r2,36(r2)
   43c94:	10c00044 	addi	r3,r2,1
   43c98:	e0bffd17 	ldw	r2,-12(fp)
   43c9c:	10c00915 	stw	r3,36(r2)
   43ca0:	00800174 	movhi	r2,5
   43ca4:	10a28a04 	addi	r2,r2,-30168
   43ca8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   43cac:	e037883a 	mov	sp,fp
   43cb0:	df000017 	ldw	fp,0(sp)
   43cb4:	dec00104 	addi	sp,sp,4
   43cb8:	f800283a 	ret

00043cbc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   43cbc:	defffd04 	addi	sp,sp,-12
   43cc0:	df000215 	stw	fp,8(sp)
   43cc4:	df000204 	addi	fp,sp,8
   43cc8:	e13ffe15 	stw	r4,-8(fp)
   43ccc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   43cd0:	00000506 	br	43ce8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   43cd4:	e0bfff17 	ldw	r2,-4(fp)
   43cd8:	1090000c 	andi	r2,r2,16384
   43cdc:	10000226 	beq	r2,zero,43ce8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   43ce0:	00bffd44 	movi	r2,-11
   43ce4:	00000b06 	br	43d14 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   43ce8:	e0bffe17 	ldw	r2,-8(fp)
   43cec:	10c00d17 	ldw	r3,52(r2)
   43cf0:	e0bffe17 	ldw	r2,-8(fp)
   43cf4:	10800c17 	ldw	r2,48(r2)
   43cf8:	18800526 	beq	r3,r2,43d10 <altera_avalon_jtag_uart_close+0x54>
   43cfc:	e0bffe17 	ldw	r2,-8(fp)
   43d00:	10c00917 	ldw	r3,36(r2)
   43d04:	e0bffe17 	ldw	r2,-8(fp)
   43d08:	10800117 	ldw	r2,4(r2)
   43d0c:	18bff136 	bltu	r3,r2,43cd4 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   43d10:	0005883a 	mov	r2,zero
}
   43d14:	e037883a 	mov	sp,fp
   43d18:	df000017 	ldw	fp,0(sp)
   43d1c:	dec00104 	addi	sp,sp,4
   43d20:	f800283a 	ret

00043d24 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   43d24:	defffa04 	addi	sp,sp,-24
   43d28:	df000515 	stw	fp,20(sp)
   43d2c:	df000504 	addi	fp,sp,20
   43d30:	e13ffd15 	stw	r4,-12(fp)
   43d34:	e17ffe15 	stw	r5,-8(fp)
   43d38:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   43d3c:	00bff9c4 	movi	r2,-25
   43d40:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   43d44:	e0bffe17 	ldw	r2,-8(fp)
   43d48:	10da8060 	cmpeqi	r3,r2,27137
   43d4c:	1800031e 	bne	r3,zero,43d5c <altera_avalon_jtag_uart_ioctl+0x38>
   43d50:	109a80a0 	cmpeqi	r2,r2,27138
   43d54:	1000181e 	bne	r2,zero,43db8 <altera_avalon_jtag_uart_ioctl+0x94>
   43d58:	00002606 	br	43df4 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   43d5c:	e0bffd17 	ldw	r2,-12(fp)
   43d60:	10c00117 	ldw	r3,4(r2)
   43d64:	00a00034 	movhi	r2,32768
   43d68:	10bfffc4 	addi	r2,r2,-1
   43d6c:	18802226 	beq	r3,r2,43df8 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
   43d70:	e0bfff17 	ldw	r2,-4(fp)
   43d74:	10800017 	ldw	r2,0(r2)
   43d78:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   43d7c:	e0bffc17 	ldw	r2,-16(fp)
   43d80:	10800090 	cmplti	r2,r2,2
   43d84:	1000061e 	bne	r2,zero,43da0 <altera_avalon_jtag_uart_ioctl+0x7c>
   43d88:	e0fffc17 	ldw	r3,-16(fp)
   43d8c:	00a00034 	movhi	r2,32768
   43d90:	10bfffc4 	addi	r2,r2,-1
   43d94:	18800226 	beq	r3,r2,43da0 <altera_avalon_jtag_uart_ioctl+0x7c>
   43d98:	e0bffc17 	ldw	r2,-16(fp)
   43d9c:	00000206 	br	43da8 <altera_avalon_jtag_uart_ioctl+0x84>
   43da0:	00a00034 	movhi	r2,32768
   43da4:	10bfff84 	addi	r2,r2,-2
   43da8:	e0fffd17 	ldw	r3,-12(fp)
   43dac:	18800115 	stw	r2,4(r3)
      rc = 0;
   43db0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   43db4:	00001006 	br	43df8 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   43db8:	e0bffd17 	ldw	r2,-12(fp)
   43dbc:	10c00117 	ldw	r3,4(r2)
   43dc0:	00a00034 	movhi	r2,32768
   43dc4:	10bfffc4 	addi	r2,r2,-1
   43dc8:	18800d26 	beq	r3,r2,43e00 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   43dcc:	e0bffd17 	ldw	r2,-12(fp)
   43dd0:	10c00917 	ldw	r3,36(r2)
   43dd4:	e0bffd17 	ldw	r2,-12(fp)
   43dd8:	10800117 	ldw	r2,4(r2)
   43ddc:	1885803a 	cmpltu	r2,r3,r2
   43de0:	10c03fcc 	andi	r3,r2,255
   43de4:	e0bfff17 	ldw	r2,-4(fp)
   43de8:	10c00015 	stw	r3,0(r2)
      rc = 0;
   43dec:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   43df0:	00000306 	br	43e00 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
   43df4:	00000306 	br	43e04 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   43df8:	0001883a 	nop
   43dfc:	00000106 	br	43e04 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   43e00:	0001883a 	nop

  default:
    break;
  }

  return rc;
   43e04:	e0bffb17 	ldw	r2,-20(fp)
}
   43e08:	e037883a 	mov	sp,fp
   43e0c:	df000017 	ldw	fp,0(sp)
   43e10:	dec00104 	addi	sp,sp,4
   43e14:	f800283a 	ret

00043e18 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   43e18:	defff304 	addi	sp,sp,-52
   43e1c:	dfc00c15 	stw	ra,48(sp)
   43e20:	df000b15 	stw	fp,44(sp)
   43e24:	df000b04 	addi	fp,sp,44
   43e28:	e13ffc15 	stw	r4,-16(fp)
   43e2c:	e17ffd15 	stw	r5,-12(fp)
   43e30:	e1bffe15 	stw	r6,-8(fp)
   43e34:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   43e38:	e0bffd17 	ldw	r2,-12(fp)
   43e3c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   43e40:	00004706 	br	43f60 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   43e44:	e0bffc17 	ldw	r2,-16(fp)
   43e48:	10800a17 	ldw	r2,40(r2)
   43e4c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   43e50:	e0bffc17 	ldw	r2,-16(fp)
   43e54:	10800b17 	ldw	r2,44(r2)
   43e58:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   43e5c:	e0fff717 	ldw	r3,-36(fp)
   43e60:	e0bff817 	ldw	r2,-32(fp)
   43e64:	18800536 	bltu	r3,r2,43e7c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   43e68:	e0fff717 	ldw	r3,-36(fp)
   43e6c:	e0bff817 	ldw	r2,-32(fp)
   43e70:	1885c83a 	sub	r2,r3,r2
   43e74:	e0bff615 	stw	r2,-40(fp)
   43e78:	00000406 	br	43e8c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   43e7c:	00c20004 	movi	r3,2048
   43e80:	e0bff817 	ldw	r2,-32(fp)
   43e84:	1885c83a 	sub	r2,r3,r2
   43e88:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   43e8c:	e0bff617 	ldw	r2,-40(fp)
   43e90:	10001e26 	beq	r2,zero,43f0c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   43e94:	e0fffe17 	ldw	r3,-8(fp)
   43e98:	e0bff617 	ldw	r2,-40(fp)
   43e9c:	1880022e 	bgeu	r3,r2,43ea8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   43ea0:	e0bffe17 	ldw	r2,-8(fp)
   43ea4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   43ea8:	e0bff817 	ldw	r2,-32(fp)
   43eac:	10800e04 	addi	r2,r2,56
   43eb0:	e0fffc17 	ldw	r3,-16(fp)
   43eb4:	1885883a 	add	r2,r3,r2
   43eb8:	e13ff517 	ldw	r4,-44(fp)
   43ebc:	100b883a 	mov	r5,r2
   43ec0:	e1bff617 	ldw	r6,-40(fp)
   43ec4:	00410ac0 	call	410ac <memcpy>
      ptr   += n;
   43ec8:	e0fff517 	ldw	r3,-44(fp)
   43ecc:	e0bff617 	ldw	r2,-40(fp)
   43ed0:	1885883a 	add	r2,r3,r2
   43ed4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   43ed8:	e0fffe17 	ldw	r3,-8(fp)
   43edc:	e0bff617 	ldw	r2,-40(fp)
   43ee0:	1885c83a 	sub	r2,r3,r2
   43ee4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   43ee8:	e0fff817 	ldw	r3,-32(fp)
   43eec:	e0bff617 	ldw	r2,-40(fp)
   43ef0:	1885883a 	add	r2,r3,r2
   43ef4:	10c1ffcc 	andi	r3,r2,2047
   43ef8:	e0bffc17 	ldw	r2,-16(fp)
   43efc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   43f00:	e0bffe17 	ldw	r2,-8(fp)
   43f04:	00bfcf16 	blt	zero,r2,43e44 <altera_avalon_jtag_uart_read+0x2c>
   43f08:	00000106 	br	43f10 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   43f0c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   43f10:	e0fff517 	ldw	r3,-44(fp)
   43f14:	e0bffd17 	ldw	r2,-12(fp)
   43f18:	1880141e 	bne	r3,r2,43f6c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   43f1c:	e0bfff17 	ldw	r2,-4(fp)
   43f20:	1090000c 	andi	r2,r2,16384
   43f24:	1000131e 	bne	r2,zero,43f74 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   43f28:	0001883a 	nop
   43f2c:	e0bffc17 	ldw	r2,-16(fp)
   43f30:	10c00a17 	ldw	r3,40(r2)
   43f34:	e0bff717 	ldw	r2,-36(fp)
   43f38:	1880051e 	bne	r3,r2,43f50 <altera_avalon_jtag_uart_read+0x138>
   43f3c:	e0bffc17 	ldw	r2,-16(fp)
   43f40:	10c00917 	ldw	r3,36(r2)
   43f44:	e0bffc17 	ldw	r2,-16(fp)
   43f48:	10800117 	ldw	r2,4(r2)
   43f4c:	18bff736 	bltu	r3,r2,43f2c <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   43f50:	e0bffc17 	ldw	r2,-16(fp)
   43f54:	10c00a17 	ldw	r3,40(r2)
   43f58:	e0bff717 	ldw	r2,-36(fp)
   43f5c:	18800726 	beq	r3,r2,43f7c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   43f60:	e0bffe17 	ldw	r2,-8(fp)
   43f64:	00bfb716 	blt	zero,r2,43e44 <altera_avalon_jtag_uart_read+0x2c>
   43f68:	00000506 	br	43f80 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   43f6c:	0001883a 	nop
   43f70:	00000306 	br	43f80 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   43f74:	0001883a 	nop
   43f78:	00000106 	br	43f80 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   43f7c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   43f80:	e0fff517 	ldw	r3,-44(fp)
   43f84:	e0bffd17 	ldw	r2,-12(fp)
   43f88:	18801726 	beq	r3,r2,43fe8 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   43f8c:	0005303a 	rdctl	r2,status
   43f90:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   43f94:	e0fffa17 	ldw	r3,-24(fp)
   43f98:	00bfff84 	movi	r2,-2
   43f9c:	1884703a 	and	r2,r3,r2
   43fa0:	1001703a 	wrctl	status,r2
  
  return context;
   43fa4:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   43fa8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   43fac:	e0bffc17 	ldw	r2,-16(fp)
   43fb0:	10800817 	ldw	r2,32(r2)
   43fb4:	10c00054 	ori	r3,r2,1
   43fb8:	e0bffc17 	ldw	r2,-16(fp)
   43fbc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   43fc0:	e0bffc17 	ldw	r2,-16(fp)
   43fc4:	10800017 	ldw	r2,0(r2)
   43fc8:	10800104 	addi	r2,r2,4
   43fcc:	e0fffc17 	ldw	r3,-16(fp)
   43fd0:	18c00817 	ldw	r3,32(r3)
   43fd4:	10c00035 	stwio	r3,0(r2)
   43fd8:	e0bff917 	ldw	r2,-28(fp)
   43fdc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   43fe0:	e0bffb17 	ldw	r2,-20(fp)
   43fe4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   43fe8:	e0fff517 	ldw	r3,-44(fp)
   43fec:	e0bffd17 	ldw	r2,-12(fp)
   43ff0:	18800426 	beq	r3,r2,44004 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
   43ff4:	e0fff517 	ldw	r3,-44(fp)
   43ff8:	e0bffd17 	ldw	r2,-12(fp)
   43ffc:	1885c83a 	sub	r2,r3,r2
   44000:	00000606 	br	4401c <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
   44004:	e0bfff17 	ldw	r2,-4(fp)
   44008:	1090000c 	andi	r2,r2,16384
   4400c:	10000226 	beq	r2,zero,44018 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
   44010:	00bffd44 	movi	r2,-11
   44014:	00000106 	br	4401c <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
   44018:	00bffec4 	movi	r2,-5
}
   4401c:	e037883a 	mov	sp,fp
   44020:	dfc00117 	ldw	ra,4(sp)
   44024:	df000017 	ldw	fp,0(sp)
   44028:	dec00204 	addi	sp,sp,8
   4402c:	f800283a 	ret

00044030 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   44030:	defff304 	addi	sp,sp,-52
   44034:	dfc00c15 	stw	ra,48(sp)
   44038:	df000b15 	stw	fp,44(sp)
   4403c:	df000b04 	addi	fp,sp,44
   44040:	e13ffc15 	stw	r4,-16(fp)
   44044:	e17ffd15 	stw	r5,-12(fp)
   44048:	e1bffe15 	stw	r6,-8(fp)
   4404c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   44050:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   44054:	e0bffd17 	ldw	r2,-12(fp)
   44058:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4405c:	00003706 	br	4413c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   44060:	e0bffc17 	ldw	r2,-16(fp)
   44064:	10800c17 	ldw	r2,48(r2)
   44068:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   4406c:	e0bffc17 	ldw	r2,-16(fp)
   44070:	10800d17 	ldw	r2,52(r2)
   44074:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   44078:	e0fff817 	ldw	r3,-32(fp)
   4407c:	e0bff517 	ldw	r2,-44(fp)
   44080:	1880062e 	bgeu	r3,r2,4409c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   44084:	e0fff517 	ldw	r3,-44(fp)
   44088:	e0bff817 	ldw	r2,-32(fp)
   4408c:	1885c83a 	sub	r2,r3,r2
   44090:	10bfffc4 	addi	r2,r2,-1
   44094:	e0bff615 	stw	r2,-40(fp)
   44098:	00000b06 	br	440c8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   4409c:	e0bff517 	ldw	r2,-44(fp)
   440a0:	10000526 	beq	r2,zero,440b8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   440a4:	00c20004 	movi	r3,2048
   440a8:	e0bff817 	ldw	r2,-32(fp)
   440ac:	1885c83a 	sub	r2,r3,r2
   440b0:	e0bff615 	stw	r2,-40(fp)
   440b4:	00000406 	br	440c8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   440b8:	00c1ffc4 	movi	r3,2047
   440bc:	e0bff817 	ldw	r2,-32(fp)
   440c0:	1885c83a 	sub	r2,r3,r2
   440c4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   440c8:	e0bff617 	ldw	r2,-40(fp)
   440cc:	10001e26 	beq	r2,zero,44148 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   440d0:	e0fffe17 	ldw	r3,-8(fp)
   440d4:	e0bff617 	ldw	r2,-40(fp)
   440d8:	1880022e 	bgeu	r3,r2,440e4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   440dc:	e0bffe17 	ldw	r2,-8(fp)
   440e0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   440e4:	e0bff817 	ldw	r2,-32(fp)
   440e8:	10820e04 	addi	r2,r2,2104
   440ec:	e0fffc17 	ldw	r3,-16(fp)
   440f0:	1885883a 	add	r2,r3,r2
   440f4:	1009883a 	mov	r4,r2
   440f8:	e17ffd17 	ldw	r5,-12(fp)
   440fc:	e1bff617 	ldw	r6,-40(fp)
   44100:	00410ac0 	call	410ac <memcpy>
      ptr   += n;
   44104:	e0fffd17 	ldw	r3,-12(fp)
   44108:	e0bff617 	ldw	r2,-40(fp)
   4410c:	1885883a 	add	r2,r3,r2
   44110:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   44114:	e0fffe17 	ldw	r3,-8(fp)
   44118:	e0bff617 	ldw	r2,-40(fp)
   4411c:	1885c83a 	sub	r2,r3,r2
   44120:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   44124:	e0fff817 	ldw	r3,-32(fp)
   44128:	e0bff617 	ldw	r2,-40(fp)
   4412c:	1885883a 	add	r2,r3,r2
   44130:	10c1ffcc 	andi	r3,r2,2047
   44134:	e0bffc17 	ldw	r2,-16(fp)
   44138:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4413c:	e0bffe17 	ldw	r2,-8(fp)
   44140:	00bfc716 	blt	zero,r2,44060 <altera_avalon_jtag_uart_write+0x30>
   44144:	00000106 	br	4414c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   44148:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4414c:	0005303a 	rdctl	r2,status
   44150:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44154:	e0fffa17 	ldw	r3,-24(fp)
   44158:	00bfff84 	movi	r2,-2
   4415c:	1884703a 	and	r2,r3,r2
   44160:	1001703a 	wrctl	status,r2
  
  return context;
   44164:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   44168:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4416c:	e0bffc17 	ldw	r2,-16(fp)
   44170:	10800817 	ldw	r2,32(r2)
   44174:	10c00094 	ori	r3,r2,2
   44178:	e0bffc17 	ldw	r2,-16(fp)
   4417c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   44180:	e0bffc17 	ldw	r2,-16(fp)
   44184:	10800017 	ldw	r2,0(r2)
   44188:	10800104 	addi	r2,r2,4
   4418c:	e0fffc17 	ldw	r3,-16(fp)
   44190:	18c00817 	ldw	r3,32(r3)
   44194:	10c00035 	stwio	r3,0(r2)
   44198:	e0bff917 	ldw	r2,-28(fp)
   4419c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   441a0:	e0bffb17 	ldw	r2,-20(fp)
   441a4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   441a8:	e0bffe17 	ldw	r2,-8(fp)
   441ac:	0080110e 	bge	zero,r2,441f4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   441b0:	e0bfff17 	ldw	r2,-4(fp)
   441b4:	1090000c 	andi	r2,r2,16384
   441b8:	1000111e 	bne	r2,zero,44200 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   441bc:	0001883a 	nop
   441c0:	e0bffc17 	ldw	r2,-16(fp)
   441c4:	10c00d17 	ldw	r3,52(r2)
   441c8:	e0bff517 	ldw	r2,-44(fp)
   441cc:	1880051e 	bne	r3,r2,441e4 <altera_avalon_jtag_uart_write+0x1b4>
   441d0:	e0bffc17 	ldw	r2,-16(fp)
   441d4:	10c00917 	ldw	r3,36(r2)
   441d8:	e0bffc17 	ldw	r2,-16(fp)
   441dc:	10800117 	ldw	r2,4(r2)
   441e0:	18bff736 	bltu	r3,r2,441c0 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   441e4:	e0bffc17 	ldw	r2,-16(fp)
   441e8:	10c00d17 	ldw	r3,52(r2)
   441ec:	e0bff517 	ldw	r2,-44(fp)
   441f0:	18800526 	beq	r3,r2,44208 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   441f4:	e0bffe17 	ldw	r2,-8(fp)
   441f8:	00bfd016 	blt	zero,r2,4413c <altera_avalon_jtag_uart_write+0x10c>
   441fc:	00000306 	br	4420c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   44200:	0001883a 	nop
   44204:	00000106 	br	4420c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
   44208:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   4420c:	e0fffd17 	ldw	r3,-12(fp)
   44210:	e0bff717 	ldw	r2,-36(fp)
   44214:	18800426 	beq	r3,r2,44228 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   44218:	e0fffd17 	ldw	r3,-12(fp)
   4421c:	e0bff717 	ldw	r2,-36(fp)
   44220:	1885c83a 	sub	r2,r3,r2
   44224:	00000606 	br	44240 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   44228:	e0bfff17 	ldw	r2,-4(fp)
   4422c:	1090000c 	andi	r2,r2,16384
   44230:	10000226 	beq	r2,zero,4423c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   44234:	00bffd44 	movi	r2,-11
   44238:	00000106 	br	44240 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   4423c:	00bffec4 	movi	r2,-5
}
   44240:	e037883a 	mov	sp,fp
   44244:	dfc00117 	ldw	ra,4(sp)
   44248:	df000017 	ldw	fp,0(sp)
   4424c:	dec00204 	addi	sp,sp,8
   44250:	f800283a 	ret

00044254 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   44254:	defffa04 	addi	sp,sp,-24
   44258:	dfc00515 	stw	ra,20(sp)
   4425c:	df000415 	stw	fp,16(sp)
   44260:	df000404 	addi	fp,sp,16
   44264:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   44268:	0007883a 	mov	r3,zero
   4426c:	e0bfff17 	ldw	r2,-4(fp)
   44270:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   44274:	e0bfff17 	ldw	r2,-4(fp)
   44278:	10800104 	addi	r2,r2,4
   4427c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44280:	0005303a 	rdctl	r2,status
   44284:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44288:	e0fffd17 	ldw	r3,-12(fp)
   4428c:	00bfff84 	movi	r2,-2
   44290:	1884703a 	and	r2,r3,r2
   44294:	1001703a 	wrctl	status,r2
  
  return context;
   44298:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   4429c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   442a0:	0044dc00 	call	44dc0 <alt_tick>
   442a4:	e0bffc17 	ldw	r2,-16(fp)
   442a8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   442ac:	e0bffe17 	ldw	r2,-8(fp)
   442b0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   442b4:	e037883a 	mov	sp,fp
   442b8:	dfc00117 	ldw	ra,4(sp)
   442bc:	df000017 	ldw	fp,0(sp)
   442c0:	dec00204 	addi	sp,sp,8
   442c4:	f800283a 	ret

000442c8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   442c8:	defff804 	addi	sp,sp,-32
   442cc:	dfc00715 	stw	ra,28(sp)
   442d0:	df000615 	stw	fp,24(sp)
   442d4:	df000604 	addi	fp,sp,24
   442d8:	e13ffc15 	stw	r4,-16(fp)
   442dc:	e17ffd15 	stw	r5,-12(fp)
   442e0:	e1bffe15 	stw	r6,-8(fp)
   442e4:	e1ffff15 	stw	r7,-4(fp)
   442e8:	e0bfff17 	ldw	r2,-4(fp)
   442ec:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   442f0:	00800174 	movhi	r2,5
   442f4:	10a28a04 	addi	r2,r2,-30168
   442f8:	10800017 	ldw	r2,0(r2)
   442fc:	1000041e 	bne	r2,zero,44310 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   44300:	00800174 	movhi	r2,5
   44304:	10a28a04 	addi	r2,r2,-30168
   44308:	e0fffb17 	ldw	r3,-20(fp)
   4430c:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   44310:	e0bffc17 	ldw	r2,-16(fp)
   44314:	10800104 	addi	r2,r2,4
   44318:	00c001c4 	movi	r3,7
   4431c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   44320:	d8000015 	stw	zero,0(sp)
   44324:	e13ffd17 	ldw	r4,-12(fp)
   44328:	e17ffe17 	ldw	r5,-8(fp)
   4432c:	01800134 	movhi	r6,4
   44330:	31909504 	addi	r6,r6,16980
   44334:	e1fffc17 	ldw	r7,-16(fp)
   44338:	00446700 	call	44670 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   4433c:	e037883a 	mov	sp,fp
   44340:	dfc00117 	ldw	ra,4(sp)
   44344:	df000017 	ldw	fp,0(sp)
   44348:	dec00204 	addi	sp,sp,8
   4434c:	f800283a 	ret

00044350 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   44350:	defff504 	addi	sp,sp,-44
   44354:	df000a15 	stw	fp,40(sp)
   44358:	df000a04 	addi	fp,sp,40
   4435c:	e13ffc15 	stw	r4,-16(fp)
   44360:	e17ffd15 	stw	r5,-12(fp)
   44364:	e1bffe15 	stw	r6,-8(fp)
   44368:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   4436c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   44370:	00800174 	movhi	r2,5
   44374:	10a28a04 	addi	r2,r2,-30168
   44378:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   4437c:	10003f26 	beq	r2,zero,4447c <alt_alarm_start+0x12c>
  {
    if (alarm)
   44380:	e0bffc17 	ldw	r2,-16(fp)
   44384:	10003b26 	beq	r2,zero,44474 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   44388:	e0bffc17 	ldw	r2,-16(fp)
   4438c:	e0fffe17 	ldw	r3,-8(fp)
   44390:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   44394:	e0bffc17 	ldw	r2,-16(fp)
   44398:	e0ffff17 	ldw	r3,-4(fp)
   4439c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   443a0:	0005303a 	rdctl	r2,status
   443a4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   443a8:	e0fff817 	ldw	r3,-32(fp)
   443ac:	00bfff84 	movi	r2,-2
   443b0:	1884703a 	and	r2,r3,r2
   443b4:	1001703a 	wrctl	status,r2
  
  return context;
   443b8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   443bc:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   443c0:	00800174 	movhi	r2,5
   443c4:	10a28b04 	addi	r2,r2,-30164
   443c8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   443cc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   443d0:	e0fffd17 	ldw	r3,-12(fp)
   443d4:	e0bff617 	ldw	r2,-40(fp)
   443d8:	1885883a 	add	r2,r3,r2
   443dc:	10c00044 	addi	r3,r2,1
   443e0:	e0bffc17 	ldw	r2,-16(fp)
   443e4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   443e8:	e0bffc17 	ldw	r2,-16(fp)
   443ec:	10c00217 	ldw	r3,8(r2)
   443f0:	e0bff617 	ldw	r2,-40(fp)
   443f4:	1880042e 	bgeu	r3,r2,44408 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   443f8:	e0bffc17 	ldw	r2,-16(fp)
   443fc:	00c00044 	movi	r3,1
   44400:	10c00405 	stb	r3,16(r2)
   44404:	00000206 	br	44410 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   44408:	e0bffc17 	ldw	r2,-16(fp)
   4440c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   44410:	e0bffc17 	ldw	r2,-16(fp)
   44414:	00c00134 	movhi	r3,4
   44418:	18dbee04 	addi	r3,r3,28600
   4441c:	e0fff915 	stw	r3,-28(fp)
   44420:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   44424:	e0bffa17 	ldw	r2,-24(fp)
   44428:	e0fff917 	ldw	r3,-28(fp)
   4442c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   44430:	e0bff917 	ldw	r2,-28(fp)
   44434:	10c00017 	ldw	r3,0(r2)
   44438:	e0bffa17 	ldw	r2,-24(fp)
   4443c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   44440:	e0bff917 	ldw	r2,-28(fp)
   44444:	10800017 	ldw	r2,0(r2)
   44448:	e0fffa17 	ldw	r3,-24(fp)
   4444c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   44450:	e0bff917 	ldw	r2,-28(fp)
   44454:	e0fffa17 	ldw	r3,-24(fp)
   44458:	10c00015 	stw	r3,0(r2)
   4445c:	e0bff717 	ldw	r2,-36(fp)
   44460:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44464:	e0bffb17 	ldw	r2,-20(fp)
   44468:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   4446c:	0005883a 	mov	r2,zero
   44470:	00000306 	br	44480 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   44474:	00bffa84 	movi	r2,-22
   44478:	00000106 	br	44480 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   4447c:	00bfde84 	movi	r2,-134
  }
}
   44480:	e037883a 	mov	sp,fp
   44484:	df000017 	ldw	fp,0(sp)
   44488:	dec00104 	addi	sp,sp,4
   4448c:	f800283a 	ret

00044490 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   44490:	deffff04 	addi	sp,sp,-4
   44494:	df000015 	stw	fp,0(sp)
   44498:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   4449c:	e037883a 	mov	sp,fp
   444a0:	df000017 	ldw	fp,0(sp)
   444a4:	dec00104 	addi	sp,sp,4
   444a8:	f800283a 	ret

000444ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   444ac:	defffe04 	addi	sp,sp,-8
   444b0:	dfc00115 	stw	ra,4(sp)
   444b4:	df000015 	stw	fp,0(sp)
   444b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   444bc:	00800134 	movhi	r2,4
   444c0:	109beb04 	addi	r2,r2,28588
   444c4:	10800017 	ldw	r2,0(r2)
   444c8:	10000526 	beq	r2,zero,444e0 <alt_get_errno+0x34>
   444cc:	00800134 	movhi	r2,4
   444d0:	109beb04 	addi	r2,r2,28588
   444d4:	10800017 	ldw	r2,0(r2)
   444d8:	103ee83a 	callr	r2
   444dc:	00000206 	br	444e8 <alt_get_errno+0x3c>
   444e0:	00800174 	movhi	r2,5
   444e4:	10a28504 	addi	r2,r2,-30188
}
   444e8:	e037883a 	mov	sp,fp
   444ec:	dfc00117 	ldw	ra,4(sp)
   444f0:	df000017 	ldw	fp,0(sp)
   444f4:	dec00204 	addi	sp,sp,8
   444f8:	f800283a 	ret

000444fc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   444fc:	defffa04 	addi	sp,sp,-24
   44500:	dfc00515 	stw	ra,20(sp)
   44504:	df000415 	stw	fp,16(sp)
   44508:	df000404 	addi	fp,sp,16
   4450c:	e13ffe15 	stw	r4,-8(fp)
   44510:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   44514:	e0bffe17 	ldw	r2,-8(fp)
   44518:	10000326 	beq	r2,zero,44528 <alt_dev_llist_insert+0x2c>
   4451c:	e0bffe17 	ldw	r2,-8(fp)
   44520:	10800217 	ldw	r2,8(r2)
   44524:	1000051e 	bne	r2,zero,4453c <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   44528:	00444ac0 	call	444ac <alt_get_errno>
   4452c:	00c00584 	movi	r3,22
   44530:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   44534:	00bffa84 	movi	r2,-22
   44538:	00001306 	br	44588 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   4453c:	e0bffe17 	ldw	r2,-8(fp)
   44540:	e0ffff17 	ldw	r3,-4(fp)
   44544:	e0fffc15 	stw	r3,-16(fp)
   44548:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4454c:	e0bffd17 	ldw	r2,-12(fp)
   44550:	e0fffc17 	ldw	r3,-16(fp)
   44554:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   44558:	e0bffc17 	ldw	r2,-16(fp)
   4455c:	10c00017 	ldw	r3,0(r2)
   44560:	e0bffd17 	ldw	r2,-12(fp)
   44564:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   44568:	e0bffc17 	ldw	r2,-16(fp)
   4456c:	10800017 	ldw	r2,0(r2)
   44570:	e0fffd17 	ldw	r3,-12(fp)
   44574:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   44578:	e0bffc17 	ldw	r2,-16(fp)
   4457c:	e0fffd17 	ldw	r3,-12(fp)
   44580:	10c00015 	stw	r3,0(r2)

  return 0;  
   44584:	0005883a 	mov	r2,zero
}
   44588:	e037883a 	mov	sp,fp
   4458c:	dfc00117 	ldw	ra,4(sp)
   44590:	df000017 	ldw	fp,0(sp)
   44594:	dec00204 	addi	sp,sp,8
   44598:	f800283a 	ret

0004459c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   4459c:	defffd04 	addi	sp,sp,-12
   445a0:	dfc00215 	stw	ra,8(sp)
   445a4:	df000115 	stw	fp,4(sp)
   445a8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   445ac:	00800134 	movhi	r2,4
   445b0:	10954b04 	addi	r2,r2,21804
   445b4:	e0bfff15 	stw	r2,-4(fp)
   445b8:	00000606 	br	445d4 <_do_ctors+0x38>
        (*ctor) (); 
   445bc:	e0bfff17 	ldw	r2,-4(fp)
   445c0:	10800017 	ldw	r2,0(r2)
   445c4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   445c8:	e0bfff17 	ldw	r2,-4(fp)
   445cc:	10bfff04 	addi	r2,r2,-4
   445d0:	e0bfff15 	stw	r2,-4(fp)
   445d4:	e0ffff17 	ldw	r3,-4(fp)
   445d8:	00800134 	movhi	r2,4
   445dc:	10954c04 	addi	r2,r2,21808
   445e0:	18bff62e 	bgeu	r3,r2,445bc <_do_ctors+0x20>
        (*ctor) (); 
}
   445e4:	e037883a 	mov	sp,fp
   445e8:	dfc00117 	ldw	ra,4(sp)
   445ec:	df000017 	ldw	fp,0(sp)
   445f0:	dec00204 	addi	sp,sp,8
   445f4:	f800283a 	ret

000445f8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   445f8:	defffd04 	addi	sp,sp,-12
   445fc:	dfc00215 	stw	ra,8(sp)
   44600:	df000115 	stw	fp,4(sp)
   44604:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   44608:	00800134 	movhi	r2,4
   4460c:	10954b04 	addi	r2,r2,21804
   44610:	e0bfff15 	stw	r2,-4(fp)
   44614:	00000606 	br	44630 <_do_dtors+0x38>
        (*dtor) (); 
   44618:	e0bfff17 	ldw	r2,-4(fp)
   4461c:	10800017 	ldw	r2,0(r2)
   44620:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   44624:	e0bfff17 	ldw	r2,-4(fp)
   44628:	10bfff04 	addi	r2,r2,-4
   4462c:	e0bfff15 	stw	r2,-4(fp)
   44630:	e0ffff17 	ldw	r3,-4(fp)
   44634:	00800134 	movhi	r2,4
   44638:	10954c04 	addi	r2,r2,21808
   4463c:	18bff62e 	bgeu	r3,r2,44618 <_do_dtors+0x20>
        (*dtor) (); 
}
   44640:	e037883a 	mov	sp,fp
   44644:	dfc00117 	ldw	ra,4(sp)
   44648:	df000017 	ldw	fp,0(sp)
   4464c:	dec00204 	addi	sp,sp,8
   44650:	f800283a 	ret

00044654 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   44654:	deffff04 	addi	sp,sp,-4
   44658:	df000015 	stw	fp,0(sp)
   4465c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   44660:	e037883a 	mov	sp,fp
   44664:	df000017 	ldw	fp,0(sp)
   44668:	dec00104 	addi	sp,sp,4
   4466c:	f800283a 	ret

00044670 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   44670:	defff904 	addi	sp,sp,-28
   44674:	dfc00615 	stw	ra,24(sp)
   44678:	df000515 	stw	fp,20(sp)
   4467c:	df000504 	addi	fp,sp,20
   44680:	e13ffc15 	stw	r4,-16(fp)
   44684:	e17ffd15 	stw	r5,-12(fp)
   44688:	e1bffe15 	stw	r6,-8(fp)
   4468c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   44690:	e0800217 	ldw	r2,8(fp)
   44694:	d8800015 	stw	r2,0(sp)
   44698:	e13ffc17 	ldw	r4,-16(fp)
   4469c:	e17ffd17 	ldw	r5,-12(fp)
   446a0:	e1bffe17 	ldw	r6,-8(fp)
   446a4:	e1ffff17 	ldw	r7,-4(fp)
   446a8:	00448480 	call	44848 <alt_iic_isr_register>
}  
   446ac:	e037883a 	mov	sp,fp
   446b0:	dfc00117 	ldw	ra,4(sp)
   446b4:	df000017 	ldw	fp,0(sp)
   446b8:	dec00204 	addi	sp,sp,8
   446bc:	f800283a 	ret

000446c0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   446c0:	defff904 	addi	sp,sp,-28
   446c4:	df000615 	stw	fp,24(sp)
   446c8:	df000604 	addi	fp,sp,24
   446cc:	e13ffe15 	stw	r4,-8(fp)
   446d0:	e17fff15 	stw	r5,-4(fp)
   446d4:	e0bfff17 	ldw	r2,-4(fp)
   446d8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   446dc:	0005303a 	rdctl	r2,status
   446e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   446e4:	e0fffb17 	ldw	r3,-20(fp)
   446e8:	00bfff84 	movi	r2,-2
   446ec:	1884703a 	and	r2,r3,r2
   446f0:	1001703a 	wrctl	status,r2
  
  return context;
   446f4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   446f8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   446fc:	e0bffa17 	ldw	r2,-24(fp)
   44700:	00c00044 	movi	r3,1
   44704:	1884983a 	sll	r2,r3,r2
   44708:	1007883a 	mov	r3,r2
   4470c:	00800174 	movhi	r2,5
   44710:	10a28904 	addi	r2,r2,-30172
   44714:	10800017 	ldw	r2,0(r2)
   44718:	1886b03a 	or	r3,r3,r2
   4471c:	00800174 	movhi	r2,5
   44720:	10a28904 	addi	r2,r2,-30172
   44724:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   44728:	00800174 	movhi	r2,5
   4472c:	10a28904 	addi	r2,r2,-30172
   44730:	10800017 	ldw	r2,0(r2)
   44734:	100170fa 	wrctl	ienable,r2
   44738:	e0bffc17 	ldw	r2,-16(fp)
   4473c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44740:	e0bffd17 	ldw	r2,-12(fp)
   44744:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   44748:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   4474c:	e037883a 	mov	sp,fp
   44750:	df000017 	ldw	fp,0(sp)
   44754:	dec00104 	addi	sp,sp,4
   44758:	f800283a 	ret

0004475c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   4475c:	defff904 	addi	sp,sp,-28
   44760:	df000615 	stw	fp,24(sp)
   44764:	df000604 	addi	fp,sp,24
   44768:	e13ffe15 	stw	r4,-8(fp)
   4476c:	e17fff15 	stw	r5,-4(fp)
   44770:	e0bfff17 	ldw	r2,-4(fp)
   44774:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44778:	0005303a 	rdctl	r2,status
   4477c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44780:	e0fffb17 	ldw	r3,-20(fp)
   44784:	00bfff84 	movi	r2,-2
   44788:	1884703a 	and	r2,r3,r2
   4478c:	1001703a 	wrctl	status,r2
  
  return context;
   44790:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   44794:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   44798:	e0bffa17 	ldw	r2,-24(fp)
   4479c:	00c00044 	movi	r3,1
   447a0:	1884983a 	sll	r2,r3,r2
   447a4:	0084303a 	nor	r2,zero,r2
   447a8:	1007883a 	mov	r3,r2
   447ac:	00800174 	movhi	r2,5
   447b0:	10a28904 	addi	r2,r2,-30172
   447b4:	10800017 	ldw	r2,0(r2)
   447b8:	1886703a 	and	r3,r3,r2
   447bc:	00800174 	movhi	r2,5
   447c0:	10a28904 	addi	r2,r2,-30172
   447c4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   447c8:	00800174 	movhi	r2,5
   447cc:	10a28904 	addi	r2,r2,-30172
   447d0:	10800017 	ldw	r2,0(r2)
   447d4:	100170fa 	wrctl	ienable,r2
   447d8:	e0bffc17 	ldw	r2,-16(fp)
   447dc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   447e0:	e0bffd17 	ldw	r2,-12(fp)
   447e4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   447e8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   447ec:	e037883a 	mov	sp,fp
   447f0:	df000017 	ldw	fp,0(sp)
   447f4:	dec00104 	addi	sp,sp,4
   447f8:	f800283a 	ret

000447fc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   447fc:	defffc04 	addi	sp,sp,-16
   44800:	df000315 	stw	fp,12(sp)
   44804:	df000304 	addi	fp,sp,12
   44808:	e13ffe15 	stw	r4,-8(fp)
   4480c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   44810:	000530fa 	rdctl	r2,ienable
   44814:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   44818:	e0bfff17 	ldw	r2,-4(fp)
   4481c:	00c00044 	movi	r3,1
   44820:	1884983a 	sll	r2,r3,r2
   44824:	1007883a 	mov	r3,r2
   44828:	e0bffd17 	ldw	r2,-12(fp)
   4482c:	1884703a 	and	r2,r3,r2
   44830:	1004c03a 	cmpne	r2,r2,zero
   44834:	10803fcc 	andi	r2,r2,255
}
   44838:	e037883a 	mov	sp,fp
   4483c:	df000017 	ldw	fp,0(sp)
   44840:	dec00104 	addi	sp,sp,4
   44844:	f800283a 	ret

00044848 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   44848:	defff504 	addi	sp,sp,-44
   4484c:	dfc00a15 	stw	ra,40(sp)
   44850:	df000915 	stw	fp,36(sp)
   44854:	df000904 	addi	fp,sp,36
   44858:	e13ffc15 	stw	r4,-16(fp)
   4485c:	e17ffd15 	stw	r5,-12(fp)
   44860:	e1bffe15 	stw	r6,-8(fp)
   44864:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   44868:	00bffa84 	movi	r2,-22
   4486c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   44870:	e0bffd17 	ldw	r2,-12(fp)
   44874:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   44878:	e0bff817 	ldw	r2,-32(fp)
   4487c:	10800808 	cmpgei	r2,r2,32
   44880:	1000271e 	bne	r2,zero,44920 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44884:	0005303a 	rdctl	r2,status
   44888:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4488c:	e0fffa17 	ldw	r3,-24(fp)
   44890:	00bfff84 	movi	r2,-2
   44894:	1884703a 	and	r2,r3,r2
   44898:	1001703a 	wrctl	status,r2
  
  return context;
   4489c:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   448a0:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   448a4:	00c00174 	movhi	r3,5
   448a8:	18e29604 	addi	r3,r3,-30120
   448ac:	e0bff817 	ldw	r2,-32(fp)
   448b0:	100490fa 	slli	r2,r2,3
   448b4:	1885883a 	add	r2,r3,r2
   448b8:	e0fffe17 	ldw	r3,-8(fp)
   448bc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   448c0:	00c00174 	movhi	r3,5
   448c4:	18e29604 	addi	r3,r3,-30120
   448c8:	e0bff817 	ldw	r2,-32(fp)
   448cc:	100490fa 	slli	r2,r2,3
   448d0:	1885883a 	add	r2,r3,r2
   448d4:	10800104 	addi	r2,r2,4
   448d8:	e0ffff17 	ldw	r3,-4(fp)
   448dc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   448e0:	e0bffe17 	ldw	r2,-8(fp)
   448e4:	10000526 	beq	r2,zero,448fc <alt_iic_isr_register+0xb4>
   448e8:	e0bff817 	ldw	r2,-32(fp)
   448ec:	e13ffc17 	ldw	r4,-16(fp)
   448f0:	100b883a 	mov	r5,r2
   448f4:	00446c00 	call	446c0 <alt_ic_irq_enable>
   448f8:	00000406 	br	4490c <alt_iic_isr_register+0xc4>
   448fc:	e0bff817 	ldw	r2,-32(fp)
   44900:	e13ffc17 	ldw	r4,-16(fp)
   44904:	100b883a 	mov	r5,r2
   44908:	004475c0 	call	4475c <alt_ic_irq_disable>
   4490c:	e0bff715 	stw	r2,-36(fp)
   44910:	e0bff917 	ldw	r2,-28(fp)
   44914:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44918:	e0bffb17 	ldw	r2,-20(fp)
   4491c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   44920:	e0bff717 	ldw	r2,-36(fp)
}
   44924:	e037883a 	mov	sp,fp
   44928:	dfc00117 	ldw	ra,4(sp)
   4492c:	df000017 	ldw	fp,0(sp)
   44930:	dec00204 	addi	sp,sp,8
   44934:	f800283a 	ret

00044938 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   44938:	defff804 	addi	sp,sp,-32
   4493c:	dfc00715 	stw	ra,28(sp)
   44940:	df000615 	stw	fp,24(sp)
   44944:	dc000515 	stw	r16,20(sp)
   44948:	df000504 	addi	fp,sp,20
   4494c:	e13ffc15 	stw	r4,-16(fp)
   44950:	e17ffd15 	stw	r5,-12(fp)
   44954:	e1bffe15 	stw	r6,-8(fp)
   44958:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   4495c:	e13ffd17 	ldw	r4,-12(fp)
   44960:	e17ffe17 	ldw	r5,-8(fp)
   44964:	e1bfff17 	ldw	r6,-4(fp)
   44968:	0044bd00 	call	44bd0 <open>
   4496c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   44970:	e0bffb17 	ldw	r2,-20(fp)
   44974:	10002216 	blt	r2,zero,44a00 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   44978:	04000134 	movhi	r16,4
   4497c:	84176a04 	addi	r16,r16,23976
   44980:	e0bffb17 	ldw	r2,-20(fp)
   44984:	1009883a 	mov	r4,r2
   44988:	01400304 	movi	r5,12
   4498c:	0042d440 	call	42d44 <__mulsi3>
   44990:	8085883a 	add	r2,r16,r2
   44994:	10c00017 	ldw	r3,0(r2)
   44998:	e0bffc17 	ldw	r2,-16(fp)
   4499c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   449a0:	04000134 	movhi	r16,4
   449a4:	84176a04 	addi	r16,r16,23976
   449a8:	e0bffb17 	ldw	r2,-20(fp)
   449ac:	1009883a 	mov	r4,r2
   449b0:	01400304 	movi	r5,12
   449b4:	0042d440 	call	42d44 <__mulsi3>
   449b8:	8085883a 	add	r2,r16,r2
   449bc:	10800104 	addi	r2,r2,4
   449c0:	10c00017 	ldw	r3,0(r2)
   449c4:	e0bffc17 	ldw	r2,-16(fp)
   449c8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   449cc:	04000134 	movhi	r16,4
   449d0:	84176a04 	addi	r16,r16,23976
   449d4:	e0bffb17 	ldw	r2,-20(fp)
   449d8:	1009883a 	mov	r4,r2
   449dc:	01400304 	movi	r5,12
   449e0:	0042d440 	call	42d44 <__mulsi3>
   449e4:	8085883a 	add	r2,r16,r2
   449e8:	10800204 	addi	r2,r2,8
   449ec:	10c00017 	ldw	r3,0(r2)
   449f0:	e0bffc17 	ldw	r2,-16(fp)
   449f4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   449f8:	e13ffb17 	ldw	r4,-20(fp)
   449fc:	00434b40 	call	434b4 <alt_release_fd>
  }
} 
   44a00:	e037883a 	mov	sp,fp
   44a04:	dfc00217 	ldw	ra,8(sp)
   44a08:	df000117 	ldw	fp,4(sp)
   44a0c:	dc000017 	ldw	r16,0(sp)
   44a10:	dec00304 	addi	sp,sp,12
   44a14:	f800283a 	ret

00044a18 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   44a18:	defffb04 	addi	sp,sp,-20
   44a1c:	dfc00415 	stw	ra,16(sp)
   44a20:	df000315 	stw	fp,12(sp)
   44a24:	df000304 	addi	fp,sp,12
   44a28:	e13ffd15 	stw	r4,-12(fp)
   44a2c:	e17ffe15 	stw	r5,-8(fp)
   44a30:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   44a34:	01000134 	movhi	r4,4
   44a38:	21176d04 	addi	r4,r4,23988
   44a3c:	e17ffd17 	ldw	r5,-12(fp)
   44a40:	01800044 	movi	r6,1
   44a44:	01c07fc4 	movi	r7,511
   44a48:	00449380 	call	44938 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   44a4c:	01000134 	movhi	r4,4
   44a50:	21176a04 	addi	r4,r4,23976
   44a54:	e17ffe17 	ldw	r5,-8(fp)
   44a58:	000d883a 	mov	r6,zero
   44a5c:	01c07fc4 	movi	r7,511
   44a60:	00449380 	call	44938 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   44a64:	01000134 	movhi	r4,4
   44a68:	21177004 	addi	r4,r4,24000
   44a6c:	e17fff17 	ldw	r5,-4(fp)
   44a70:	01800044 	movi	r6,1
   44a74:	01c07fc4 	movi	r7,511
   44a78:	00449380 	call	44938 <alt_open_fd>
}  
   44a7c:	e037883a 	mov	sp,fp
   44a80:	dfc00117 	ldw	ra,4(sp)
   44a84:	df000017 	ldw	fp,0(sp)
   44a88:	dec00204 	addi	sp,sp,8
   44a8c:	f800283a 	ret

00044a90 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   44a90:	defffe04 	addi	sp,sp,-8
   44a94:	dfc00115 	stw	ra,4(sp)
   44a98:	df000015 	stw	fp,0(sp)
   44a9c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   44aa0:	00800134 	movhi	r2,4
   44aa4:	109beb04 	addi	r2,r2,28588
   44aa8:	10800017 	ldw	r2,0(r2)
   44aac:	10000526 	beq	r2,zero,44ac4 <alt_get_errno+0x34>
   44ab0:	00800134 	movhi	r2,4
   44ab4:	109beb04 	addi	r2,r2,28588
   44ab8:	10800017 	ldw	r2,0(r2)
   44abc:	103ee83a 	callr	r2
   44ac0:	00000206 	br	44acc <alt_get_errno+0x3c>
   44ac4:	00800174 	movhi	r2,5
   44ac8:	10a28504 	addi	r2,r2,-30188
}
   44acc:	e037883a 	mov	sp,fp
   44ad0:	dfc00117 	ldw	ra,4(sp)
   44ad4:	df000017 	ldw	fp,0(sp)
   44ad8:	dec00204 	addi	sp,sp,8
   44adc:	f800283a 	ret

00044ae0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   44ae0:	defffb04 	addi	sp,sp,-20
   44ae4:	dfc00415 	stw	ra,16(sp)
   44ae8:	df000315 	stw	fp,12(sp)
   44aec:	dc000215 	stw	r16,8(sp)
   44af0:	df000204 	addi	fp,sp,8
   44af4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   44af8:	e0bfff17 	ldw	r2,-4(fp)
   44afc:	10800217 	ldw	r2,8(r2)
   44b00:	10d00034 	orhi	r3,r2,16384
   44b04:	e0bfff17 	ldw	r2,-4(fp)
   44b08:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   44b0c:	e03ffe15 	stw	zero,-8(fp)
   44b10:	00002206 	br	44b9c <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   44b14:	04000134 	movhi	r16,4
   44b18:	84176a04 	addi	r16,r16,23976
   44b1c:	e0bffe17 	ldw	r2,-8(fp)
   44b20:	1009883a 	mov	r4,r2
   44b24:	01400304 	movi	r5,12
   44b28:	0042d440 	call	42d44 <__mulsi3>
   44b2c:	8085883a 	add	r2,r16,r2
   44b30:	10c00017 	ldw	r3,0(r2)
   44b34:	e0bfff17 	ldw	r2,-4(fp)
   44b38:	10800017 	ldw	r2,0(r2)
   44b3c:	1880141e 	bne	r3,r2,44b90 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   44b40:	04000134 	movhi	r16,4
   44b44:	84176a04 	addi	r16,r16,23976
   44b48:	e0bffe17 	ldw	r2,-8(fp)
   44b4c:	1009883a 	mov	r4,r2
   44b50:	01400304 	movi	r5,12
   44b54:	0042d440 	call	42d44 <__mulsi3>
   44b58:	8085883a 	add	r2,r16,r2
   44b5c:	10800204 	addi	r2,r2,8
   44b60:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   44b64:	10000a0e 	bge	r2,zero,44b90 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   44b68:	e13ffe17 	ldw	r4,-8(fp)
   44b6c:	01400304 	movi	r5,12
   44b70:	0042d440 	call	42d44 <__mulsi3>
   44b74:	00c00134 	movhi	r3,4
   44b78:	18d76a04 	addi	r3,r3,23976
   44b7c:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   44b80:	e0bfff17 	ldw	r2,-4(fp)
   44b84:	18800226 	beq	r3,r2,44b90 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   44b88:	00bffcc4 	movi	r2,-13
   44b8c:	00000a06 	br	44bb8 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   44b90:	e0bffe17 	ldw	r2,-8(fp)
   44b94:	10800044 	addi	r2,r2,1
   44b98:	e0bffe15 	stw	r2,-8(fp)
   44b9c:	00800134 	movhi	r2,4
   44ba0:	109bea04 	addi	r2,r2,28584
   44ba4:	10800017 	ldw	r2,0(r2)
   44ba8:	1007883a 	mov	r3,r2
   44bac:	e0bffe17 	ldw	r2,-8(fp)
   44bb0:	18bfd82e 	bgeu	r3,r2,44b14 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   44bb4:	0005883a 	mov	r2,zero
}
   44bb8:	e037883a 	mov	sp,fp
   44bbc:	dfc00217 	ldw	ra,8(sp)
   44bc0:	df000117 	ldw	fp,4(sp)
   44bc4:	dc000017 	ldw	r16,0(sp)
   44bc8:	dec00304 	addi	sp,sp,12
   44bcc:	f800283a 	ret

00044bd0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   44bd0:	defff604 	addi	sp,sp,-40
   44bd4:	dfc00915 	stw	ra,36(sp)
   44bd8:	df000815 	stw	fp,32(sp)
   44bdc:	df000804 	addi	fp,sp,32
   44be0:	e13ffd15 	stw	r4,-12(fp)
   44be4:	e17ffe15 	stw	r5,-8(fp)
   44be8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   44bec:	00bfffc4 	movi	r2,-1
   44bf0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   44bf4:	00bffb44 	movi	r2,-19
   44bf8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   44bfc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   44c00:	e13ffd17 	ldw	r4,-12(fp)
   44c04:	01400134 	movhi	r5,4
   44c08:	295be804 	addi	r5,r5,28576
   44c0c:	0044ee40 	call	44ee4 <alt_find_dev>
   44c10:	e0bff815 	stw	r2,-32(fp)
   44c14:	e0bff817 	ldw	r2,-32(fp)
   44c18:	1000051e 	bne	r2,zero,44c30 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   44c1c:	e13ffd17 	ldw	r4,-12(fp)
   44c20:	0044f740 	call	44f74 <alt_find_file>
   44c24:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   44c28:	00800044 	movi	r2,1
   44c2c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   44c30:	e0bff817 	ldw	r2,-32(fp)
   44c34:	10002a26 	beq	r2,zero,44ce0 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   44c38:	e13ff817 	ldw	r4,-32(fp)
   44c3c:	00450880 	call	45088 <alt_get_fd>
   44c40:	e0bff915 	stw	r2,-28(fp)
   44c44:	e0bff917 	ldw	r2,-28(fp)
   44c48:	1000030e 	bge	r2,zero,44c58 <open+0x88>
    {
      status = index;
   44c4c:	e0bff917 	ldw	r2,-28(fp)
   44c50:	e0bffa15 	stw	r2,-24(fp)
   44c54:	00002406 	br	44ce8 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   44c58:	e13ff917 	ldw	r4,-28(fp)
   44c5c:	01400304 	movi	r5,12
   44c60:	0042d440 	call	42d44 <__mulsi3>
   44c64:	00c00134 	movhi	r3,4
   44c68:	18d76a04 	addi	r3,r3,23976
   44c6c:	10c5883a 	add	r2,r2,r3
   44c70:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   44c74:	e0fffe17 	ldw	r3,-8(fp)
   44c78:	00900034 	movhi	r2,16384
   44c7c:	10bfffc4 	addi	r2,r2,-1
   44c80:	1886703a 	and	r3,r3,r2
   44c84:	e0bffc17 	ldw	r2,-16(fp)
   44c88:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   44c8c:	e0bffb17 	ldw	r2,-20(fp)
   44c90:	1000051e 	bne	r2,zero,44ca8 <open+0xd8>
   44c94:	e13ffc17 	ldw	r4,-16(fp)
   44c98:	0044ae00 	call	44ae0 <alt_file_locked>
   44c9c:	e0bffa15 	stw	r2,-24(fp)
   44ca0:	e0bffa17 	ldw	r2,-24(fp)
   44ca4:	10001016 	blt	r2,zero,44ce8 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   44ca8:	e0bff817 	ldw	r2,-32(fp)
   44cac:	10800317 	ldw	r2,12(r2)
   44cb0:	10000826 	beq	r2,zero,44cd4 <open+0x104>
   44cb4:	e0bff817 	ldw	r2,-32(fp)
   44cb8:	10800317 	ldw	r2,12(r2)
   44cbc:	e13ffc17 	ldw	r4,-16(fp)
   44cc0:	e17ffd17 	ldw	r5,-12(fp)
   44cc4:	e1bffe17 	ldw	r6,-8(fp)
   44cc8:	e1ffff17 	ldw	r7,-4(fp)
   44ccc:	103ee83a 	callr	r2
   44cd0:	00000106 	br	44cd8 <open+0x108>
   44cd4:	0005883a 	mov	r2,zero
   44cd8:	e0bffa15 	stw	r2,-24(fp)
   44cdc:	00000206 	br	44ce8 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   44ce0:	00bffb44 	movi	r2,-19
   44ce4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   44ce8:	e0bffa17 	ldw	r2,-24(fp)
   44cec:	1000080e 	bge	r2,zero,44d10 <open+0x140>
  {
    alt_release_fd (index);  
   44cf0:	e13ff917 	ldw	r4,-28(fp)
   44cf4:	00434b40 	call	434b4 <alt_release_fd>
    ALT_ERRNO = -status;
   44cf8:	0044a900 	call	44a90 <alt_get_errno>
   44cfc:	e0fffa17 	ldw	r3,-24(fp)
   44d00:	00c7c83a 	sub	r3,zero,r3
   44d04:	10c00015 	stw	r3,0(r2)
    return -1;
   44d08:	00bfffc4 	movi	r2,-1
   44d0c:	00000106 	br	44d14 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   44d10:	e0bff917 	ldw	r2,-28(fp)
}
   44d14:	e037883a 	mov	sp,fp
   44d18:	dfc00117 	ldw	ra,4(sp)
   44d1c:	df000017 	ldw	fp,0(sp)
   44d20:	dec00204 	addi	sp,sp,8
   44d24:	f800283a 	ret

00044d28 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   44d28:	defffa04 	addi	sp,sp,-24
   44d2c:	df000515 	stw	fp,20(sp)
   44d30:	df000504 	addi	fp,sp,20
   44d34:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44d38:	0005303a 	rdctl	r2,status
   44d3c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44d40:	e0fffc17 	ldw	r3,-16(fp)
   44d44:	00bfff84 	movi	r2,-2
   44d48:	1884703a 	and	r2,r3,r2
   44d4c:	1001703a 	wrctl	status,r2
  
  return context;
   44d50:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   44d54:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   44d58:	e0bfff17 	ldw	r2,-4(fp)
   44d5c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   44d60:	e0bffd17 	ldw	r2,-12(fp)
   44d64:	10800017 	ldw	r2,0(r2)
   44d68:	e0fffd17 	ldw	r3,-12(fp)
   44d6c:	18c00117 	ldw	r3,4(r3)
   44d70:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   44d74:	e0bffd17 	ldw	r2,-12(fp)
   44d78:	10800117 	ldw	r2,4(r2)
   44d7c:	e0fffd17 	ldw	r3,-12(fp)
   44d80:	18c00017 	ldw	r3,0(r3)
   44d84:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   44d88:	e0bffd17 	ldw	r2,-12(fp)
   44d8c:	e0fffd17 	ldw	r3,-12(fp)
   44d90:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   44d94:	e0bffd17 	ldw	r2,-12(fp)
   44d98:	e0fffd17 	ldw	r3,-12(fp)
   44d9c:	10c00015 	stw	r3,0(r2)
   44da0:	e0bffb17 	ldw	r2,-20(fp)
   44da4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44da8:	e0bffe17 	ldw	r2,-8(fp)
   44dac:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   44db0:	e037883a 	mov	sp,fp
   44db4:	df000017 	ldw	fp,0(sp)
   44db8:	dec00104 	addi	sp,sp,4
   44dbc:	f800283a 	ret

00044dc0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   44dc0:	defffb04 	addi	sp,sp,-20
   44dc4:	dfc00415 	stw	ra,16(sp)
   44dc8:	df000315 	stw	fp,12(sp)
   44dcc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   44dd0:	d0a00c17 	ldw	r2,-32720(gp)
   44dd4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   44dd8:	d0a6a917 	ldw	r2,-25948(gp)
   44ddc:	10800044 	addi	r2,r2,1
   44de0:	d0a6a915 	stw	r2,-25948(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   44de4:	00002e06 	br	44ea0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   44de8:	e0bffd17 	ldw	r2,-12(fp)
   44dec:	10800017 	ldw	r2,0(r2)
   44df0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   44df4:	e0bffd17 	ldw	r2,-12(fp)
   44df8:	10800403 	ldbu	r2,16(r2)
   44dfc:	10803fcc 	andi	r2,r2,255
   44e00:	10000426 	beq	r2,zero,44e14 <alt_tick+0x54>
   44e04:	d0a6a917 	ldw	r2,-25948(gp)
   44e08:	1000021e 	bne	r2,zero,44e14 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   44e0c:	e0bffd17 	ldw	r2,-12(fp)
   44e10:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   44e14:	e0bffd17 	ldw	r2,-12(fp)
   44e18:	10800217 	ldw	r2,8(r2)
   44e1c:	d0e6a917 	ldw	r3,-25948(gp)
   44e20:	18801d36 	bltu	r3,r2,44e98 <alt_tick+0xd8>
   44e24:	e0bffd17 	ldw	r2,-12(fp)
   44e28:	10800403 	ldbu	r2,16(r2)
   44e2c:	10803fcc 	andi	r2,r2,255
   44e30:	1000191e 	bne	r2,zero,44e98 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   44e34:	e0bffd17 	ldw	r2,-12(fp)
   44e38:	10c00317 	ldw	r3,12(r2)
   44e3c:	e0bffd17 	ldw	r2,-12(fp)
   44e40:	10800517 	ldw	r2,20(r2)
   44e44:	1009883a 	mov	r4,r2
   44e48:	183ee83a 	callr	r3
   44e4c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   44e50:	e0bfff17 	ldw	r2,-4(fp)
   44e54:	1000031e 	bne	r2,zero,44e64 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   44e58:	e13ffd17 	ldw	r4,-12(fp)
   44e5c:	0044d280 	call	44d28 <alt_alarm_stop>
   44e60:	00000d06 	br	44e98 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   44e64:	e0bffd17 	ldw	r2,-12(fp)
   44e68:	10c00217 	ldw	r3,8(r2)
   44e6c:	e0bfff17 	ldw	r2,-4(fp)
   44e70:	1887883a 	add	r3,r3,r2
   44e74:	e0bffd17 	ldw	r2,-12(fp)
   44e78:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   44e7c:	e0bffd17 	ldw	r2,-12(fp)
   44e80:	10c00217 	ldw	r3,8(r2)
   44e84:	d0a6a917 	ldw	r2,-25948(gp)
   44e88:	1880032e 	bgeu	r3,r2,44e98 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   44e8c:	e0bffd17 	ldw	r2,-12(fp)
   44e90:	00c00044 	movi	r3,1
   44e94:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   44e98:	e0bffe17 	ldw	r2,-8(fp)
   44e9c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   44ea0:	e0fffd17 	ldw	r3,-12(fp)
   44ea4:	d0a00c04 	addi	r2,gp,-32720
   44ea8:	18bfcf1e 	bne	r3,r2,44de8 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   44eac:	0001883a 	nop
}
   44eb0:	e037883a 	mov	sp,fp
   44eb4:	dfc00117 	ldw	ra,4(sp)
   44eb8:	df000017 	ldw	fp,0(sp)
   44ebc:	dec00204 	addi	sp,sp,8
   44ec0:	f800283a 	ret

00044ec4 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   44ec4:	deffff04 	addi	sp,sp,-4
   44ec8:	df000015 	stw	fp,0(sp)
   44ecc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   44ed0:	000170fa 	wrctl	ienable,zero
}
   44ed4:	e037883a 	mov	sp,fp
   44ed8:	df000017 	ldw	fp,0(sp)
   44edc:	dec00104 	addi	sp,sp,4
   44ee0:	f800283a 	ret

00044ee4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   44ee4:	defffa04 	addi	sp,sp,-24
   44ee8:	dfc00515 	stw	ra,20(sp)
   44eec:	df000415 	stw	fp,16(sp)
   44ef0:	df000404 	addi	fp,sp,16
   44ef4:	e13ffe15 	stw	r4,-8(fp)
   44ef8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   44efc:	e0bfff17 	ldw	r2,-4(fp)
   44f00:	10800017 	ldw	r2,0(r2)
   44f04:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   44f08:	e13ffe17 	ldw	r4,-8(fp)
   44f0c:	00402c00 	call	402c0 <strlen>
   44f10:	10800044 	addi	r2,r2,1
   44f14:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   44f18:	00000d06 	br	44f50 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   44f1c:	e0bffc17 	ldw	r2,-16(fp)
   44f20:	10c00217 	ldw	r3,8(r2)
   44f24:	e0bffd17 	ldw	r2,-12(fp)
   44f28:	1809883a 	mov	r4,r3
   44f2c:	e17ffe17 	ldw	r5,-8(fp)
   44f30:	100d883a 	mov	r6,r2
   44f34:	00451a80 	call	451a8 <memcmp>
   44f38:	1000021e 	bne	r2,zero,44f44 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   44f3c:	e0bffc17 	ldw	r2,-16(fp)
   44f40:	00000706 	br	44f60 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   44f44:	e0bffc17 	ldw	r2,-16(fp)
   44f48:	10800017 	ldw	r2,0(r2)
   44f4c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   44f50:	e0fffc17 	ldw	r3,-16(fp)
   44f54:	e0bfff17 	ldw	r2,-4(fp)
   44f58:	18bff01e 	bne	r3,r2,44f1c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   44f5c:	0005883a 	mov	r2,zero
}
   44f60:	e037883a 	mov	sp,fp
   44f64:	dfc00117 	ldw	ra,4(sp)
   44f68:	df000017 	ldw	fp,0(sp)
   44f6c:	dec00204 	addi	sp,sp,8
   44f70:	f800283a 	ret

00044f74 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   44f74:	defffb04 	addi	sp,sp,-20
   44f78:	dfc00415 	stw	ra,16(sp)
   44f7c:	df000315 	stw	fp,12(sp)
   44f80:	df000304 	addi	fp,sp,12
   44f84:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   44f88:	00800134 	movhi	r2,4
   44f8c:	109be604 	addi	r2,r2,28568
   44f90:	10800017 	ldw	r2,0(r2)
   44f94:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   44f98:	00003106 	br	45060 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   44f9c:	e0bffd17 	ldw	r2,-12(fp)
   44fa0:	10800217 	ldw	r2,8(r2)
   44fa4:	1009883a 	mov	r4,r2
   44fa8:	00402c00 	call	402c0 <strlen>
   44fac:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   44fb0:	e0bffd17 	ldw	r2,-12(fp)
   44fb4:	10c00217 	ldw	r3,8(r2)
   44fb8:	e0bffe17 	ldw	r2,-8(fp)
   44fbc:	10bfffc4 	addi	r2,r2,-1
   44fc0:	1885883a 	add	r2,r3,r2
   44fc4:	10800003 	ldbu	r2,0(r2)
   44fc8:	10803fcc 	andi	r2,r2,255
   44fcc:	1080201c 	xori	r2,r2,128
   44fd0:	10bfe004 	addi	r2,r2,-128
   44fd4:	10800bd8 	cmpnei	r2,r2,47
   44fd8:	1000031e 	bne	r2,zero,44fe8 <alt_find_file+0x74>
    {
      len -= 1;
   44fdc:	e0bffe17 	ldw	r2,-8(fp)
   44fe0:	10bfffc4 	addi	r2,r2,-1
   44fe4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   44fe8:	e0bffe17 	ldw	r2,-8(fp)
   44fec:	e0ffff17 	ldw	r3,-4(fp)
   44ff0:	1885883a 	add	r2,r3,r2
   44ff4:	10800003 	ldbu	r2,0(r2)
   44ff8:	10803fcc 	andi	r2,r2,255
   44ffc:	1080201c 	xori	r2,r2,128
   45000:	10bfe004 	addi	r2,r2,-128
   45004:	10800be0 	cmpeqi	r2,r2,47
   45008:	1000081e 	bne	r2,zero,4502c <alt_find_file+0xb8>
   4500c:	e0bffe17 	ldw	r2,-8(fp)
   45010:	e0ffff17 	ldw	r3,-4(fp)
   45014:	1885883a 	add	r2,r3,r2
   45018:	10800003 	ldbu	r2,0(r2)
   4501c:	10803fcc 	andi	r2,r2,255
   45020:	1080201c 	xori	r2,r2,128
   45024:	10bfe004 	addi	r2,r2,-128
   45028:	10000a1e 	bne	r2,zero,45054 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   4502c:	e0bffd17 	ldw	r2,-12(fp)
   45030:	10c00217 	ldw	r3,8(r2)
   45034:	e0bffe17 	ldw	r2,-8(fp)
   45038:	1809883a 	mov	r4,r3
   4503c:	e17fff17 	ldw	r5,-4(fp)
   45040:	100d883a 	mov	r6,r2
   45044:	00451a80 	call	451a8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   45048:	1000021e 	bne	r2,zero,45054 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   4504c:	e0bffd17 	ldw	r2,-12(fp)
   45050:	00000806 	br	45074 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   45054:	e0bffd17 	ldw	r2,-12(fp)
   45058:	10800017 	ldw	r2,0(r2)
   4505c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   45060:	e0fffd17 	ldw	r3,-12(fp)
   45064:	00800134 	movhi	r2,4
   45068:	109be604 	addi	r2,r2,28568
   4506c:	18bfcb1e 	bne	r3,r2,44f9c <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   45070:	0005883a 	mov	r2,zero
}
   45074:	e037883a 	mov	sp,fp
   45078:	dfc00117 	ldw	ra,4(sp)
   4507c:	df000017 	ldw	fp,0(sp)
   45080:	dec00204 	addi	sp,sp,8
   45084:	f800283a 	ret

00045088 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   45088:	defffa04 	addi	sp,sp,-24
   4508c:	dfc00515 	stw	ra,20(sp)
   45090:	df000415 	stw	fp,16(sp)
   45094:	dc000315 	stw	r16,12(sp)
   45098:	df000304 	addi	fp,sp,12
   4509c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   450a0:	00bffa04 	movi	r2,-24
   450a4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   450a8:	e03ffd15 	stw	zero,-12(fp)
   450ac:	00002106 	br	45134 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   450b0:	04000134 	movhi	r16,4
   450b4:	84176a04 	addi	r16,r16,23976
   450b8:	e0bffd17 	ldw	r2,-12(fp)
   450bc:	1009883a 	mov	r4,r2
   450c0:	01400304 	movi	r5,12
   450c4:	0042d440 	call	42d44 <__mulsi3>
   450c8:	8085883a 	add	r2,r16,r2
   450cc:	10800017 	ldw	r2,0(r2)
   450d0:	1000151e 	bne	r2,zero,45128 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   450d4:	04000134 	movhi	r16,4
   450d8:	84176a04 	addi	r16,r16,23976
   450dc:	e0bffd17 	ldw	r2,-12(fp)
   450e0:	1009883a 	mov	r4,r2
   450e4:	01400304 	movi	r5,12
   450e8:	0042d440 	call	42d44 <__mulsi3>
   450ec:	8085883a 	add	r2,r16,r2
   450f0:	e0ffff17 	ldw	r3,-4(fp)
   450f4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   450f8:	00800134 	movhi	r2,4
   450fc:	109bea04 	addi	r2,r2,28584
   45100:	10c00017 	ldw	r3,0(r2)
   45104:	e0bffd17 	ldw	r2,-12(fp)
   45108:	1880040e 	bge	r3,r2,4511c <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   4510c:	00800134 	movhi	r2,4
   45110:	109bea04 	addi	r2,r2,28584
   45114:	e0fffd17 	ldw	r3,-12(fp)
   45118:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   4511c:	e0bffd17 	ldw	r2,-12(fp)
   45120:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   45124:	00000606 	br	45140 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   45128:	e0bffd17 	ldw	r2,-12(fp)
   4512c:	10800044 	addi	r2,r2,1
   45130:	e0bffd15 	stw	r2,-12(fp)
   45134:	e0bffd17 	ldw	r2,-12(fp)
   45138:	10800810 	cmplti	r2,r2,32
   4513c:	103fdc1e 	bne	r2,zero,450b0 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   45140:	e0bffe17 	ldw	r2,-8(fp)
}
   45144:	e037883a 	mov	sp,fp
   45148:	dfc00217 	ldw	ra,8(sp)
   4514c:	df000117 	ldw	fp,4(sp)
   45150:	dc000017 	ldw	r16,0(sp)
   45154:	dec00304 	addi	sp,sp,12
   45158:	f800283a 	ret

0004515c <atexit>:
   4515c:	200b883a 	mov	r5,r4
   45160:	000d883a 	mov	r6,zero
   45164:	0009883a 	mov	r4,zero
   45168:	000f883a 	mov	r7,zero
   4516c:	00452241 	jmpi	45224 <__register_exitproc>

00045170 <exit>:
   45170:	defffe04 	addi	sp,sp,-8
   45174:	000b883a 	mov	r5,zero
   45178:	dc000015 	stw	r16,0(sp)
   4517c:	dfc00115 	stw	ra,4(sp)
   45180:	2021883a 	mov	r16,r4
   45184:	00453540 	call	45354 <__call_exitprocs>
   45188:	00800134 	movhi	r2,4
   4518c:	109be204 	addi	r2,r2,28552
   45190:	11000017 	ldw	r4,0(r2)
   45194:	20800f17 	ldw	r2,60(r4)
   45198:	10000126 	beq	r2,zero,451a0 <exit+0x30>
   4519c:	103ee83a 	callr	r2
   451a0:	8009883a 	mov	r4,r16
   451a4:	00454f40 	call	454f4 <_exit>

000451a8 <memcmp>:
   451a8:	01c000c4 	movi	r7,3
   451ac:	3980192e 	bgeu	r7,r6,45214 <memcmp+0x6c>
   451b0:	2904b03a 	or	r2,r5,r4
   451b4:	11c4703a 	and	r2,r2,r7
   451b8:	10000f26 	beq	r2,zero,451f8 <memcmp+0x50>
   451bc:	20c00003 	ldbu	r3,0(r4)
   451c0:	28800003 	ldbu	r2,0(r5)
   451c4:	1880151e 	bne	r3,r2,4521c <memcmp+0x74>
   451c8:	31bfff84 	addi	r6,r6,-2
   451cc:	01ffffc4 	movi	r7,-1
   451d0:	00000406 	br	451e4 <memcmp+0x3c>
   451d4:	20c00003 	ldbu	r3,0(r4)
   451d8:	28800003 	ldbu	r2,0(r5)
   451dc:	31bfffc4 	addi	r6,r6,-1
   451e0:	18800e1e 	bne	r3,r2,4521c <memcmp+0x74>
   451e4:	21000044 	addi	r4,r4,1
   451e8:	29400044 	addi	r5,r5,1
   451ec:	31fff91e 	bne	r6,r7,451d4 <memcmp+0x2c>
   451f0:	0005883a 	mov	r2,zero
   451f4:	f800283a 	ret
   451f8:	20c00017 	ldw	r3,0(r4)
   451fc:	28800017 	ldw	r2,0(r5)
   45200:	1880041e 	bne	r3,r2,45214 <memcmp+0x6c>
   45204:	31bfff04 	addi	r6,r6,-4
   45208:	21000104 	addi	r4,r4,4
   4520c:	29400104 	addi	r5,r5,4
   45210:	39bff936 	bltu	r7,r6,451f8 <memcmp+0x50>
   45214:	303fe91e 	bne	r6,zero,451bc <memcmp+0x14>
   45218:	003ff506 	br	451f0 <memcmp+0x48>
   4521c:	1885c83a 	sub	r2,r3,r2
   45220:	f800283a 	ret

00045224 <__register_exitproc>:
   45224:	defffa04 	addi	sp,sp,-24
   45228:	00800134 	movhi	r2,4
   4522c:	109be204 	addi	r2,r2,28552
   45230:	dc000315 	stw	r16,12(sp)
   45234:	14000017 	ldw	r16,0(r2)
   45238:	dc400415 	stw	r17,16(sp)
   4523c:	dfc00515 	stw	ra,20(sp)
   45240:	80805217 	ldw	r2,328(r16)
   45244:	2023883a 	mov	r17,r4
   45248:	10003e26 	beq	r2,zero,45344 <__register_exitproc+0x120>
   4524c:	10c00117 	ldw	r3,4(r2)
   45250:	020007c4 	movi	r8,31
   45254:	40c0180e 	bge	r8,r3,452b8 <__register_exitproc+0x94>
   45258:	00800034 	movhi	r2,0
   4525c:	10800004 	addi	r2,r2,0
   45260:	1000061e 	bne	r2,zero,4527c <__register_exitproc+0x58>
   45264:	00bfffc4 	movi	r2,-1
   45268:	dfc00517 	ldw	ra,20(sp)
   4526c:	dc400417 	ldw	r17,16(sp)
   45270:	dc000317 	ldw	r16,12(sp)
   45274:	dec00604 	addi	sp,sp,24
   45278:	f800283a 	ret
   4527c:	01006404 	movi	r4,400
   45280:	d9400015 	stw	r5,0(sp)
   45284:	d9800115 	stw	r6,4(sp)
   45288:	d9c00215 	stw	r7,8(sp)
   4528c:	00000000 	call	0 <__alt_mem_onchip_data_memory-0x40000>
   45290:	d9400017 	ldw	r5,0(sp)
   45294:	d9800117 	ldw	r6,4(sp)
   45298:	d9c00217 	ldw	r7,8(sp)
   4529c:	103ff126 	beq	r2,zero,45264 <__register_exitproc+0x40>
   452a0:	80c05217 	ldw	r3,328(r16)
   452a4:	10000115 	stw	zero,4(r2)
   452a8:	10c00015 	stw	r3,0(r2)
   452ac:	80805215 	stw	r2,328(r16)
   452b0:	10006215 	stw	zero,392(r2)
   452b4:	10006315 	stw	zero,396(r2)
   452b8:	10c00117 	ldw	r3,4(r2)
   452bc:	88000d1e 	bne	r17,zero,452f4 <__register_exitproc+0xd0>
   452c0:	19000084 	addi	r4,r3,2
   452c4:	2109883a 	add	r4,r4,r4
   452c8:	18c00044 	addi	r3,r3,1
   452cc:	2109883a 	add	r4,r4,r4
   452d0:	1109883a 	add	r4,r2,r4
   452d4:	10c00115 	stw	r3,4(r2)
   452d8:	0005883a 	mov	r2,zero
   452dc:	21400015 	stw	r5,0(r4)
   452e0:	dfc00517 	ldw	ra,20(sp)
   452e4:	dc400417 	ldw	r17,16(sp)
   452e8:	dc000317 	ldw	r16,12(sp)
   452ec:	dec00604 	addi	sp,sp,24
   452f0:	f800283a 	ret
   452f4:	02400044 	movi	r9,1
   452f8:	12806217 	ldw	r10,392(r2)
   452fc:	48d2983a 	sll	r9,r9,r3
   45300:	19000804 	addi	r4,r3,32
   45304:	18d1883a 	add	r8,r3,r3
   45308:	2109883a 	add	r4,r4,r4
   4530c:	4211883a 	add	r8,r8,r8
   45310:	2109883a 	add	r4,r4,r4
   45314:	1109883a 	add	r4,r2,r4
   45318:	1211883a 	add	r8,r2,r8
   4531c:	5254b03a 	or	r10,r10,r9
   45320:	21c02215 	stw	r7,136(r4)
   45324:	41802215 	stw	r6,136(r8)
   45328:	12806215 	stw	r10,392(r2)
   4532c:	01000084 	movi	r4,2
   45330:	893fe31e 	bne	r17,r4,452c0 <__register_exitproc+0x9c>
   45334:	11006317 	ldw	r4,396(r2)
   45338:	2252b03a 	or	r9,r4,r9
   4533c:	12406315 	stw	r9,396(r2)
   45340:	003fdf06 	br	452c0 <__register_exitproc+0x9c>
   45344:	00800174 	movhi	r2,5
   45348:	10a2d604 	addi	r2,r2,-29864
   4534c:	80805215 	stw	r2,328(r16)
   45350:	003fbe06 	br	4524c <__register_exitproc+0x28>

00045354 <__call_exitprocs>:
   45354:	00800134 	movhi	r2,4
   45358:	109be204 	addi	r2,r2,28552
   4535c:	10800017 	ldw	r2,0(r2)
   45360:	defff304 	addi	sp,sp,-52
   45364:	df000b15 	stw	fp,44(sp)
   45368:	d8800015 	stw	r2,0(sp)
   4536c:	10805204 	addi	r2,r2,328
   45370:	dd400815 	stw	r21,32(sp)
   45374:	dfc00c15 	stw	ra,48(sp)
   45378:	ddc00a15 	stw	r23,40(sp)
   4537c:	dd800915 	stw	r22,36(sp)
   45380:	dd000715 	stw	r20,28(sp)
   45384:	dcc00615 	stw	r19,24(sp)
   45388:	dc800515 	stw	r18,20(sp)
   4538c:	dc400415 	stw	r17,16(sp)
   45390:	dc000315 	stw	r16,12(sp)
   45394:	d9000115 	stw	r4,4(sp)
   45398:	2839883a 	mov	fp,r5
   4539c:	d8800215 	stw	r2,8(sp)
   453a0:	057fffc4 	movi	r21,-1
   453a4:	d8800017 	ldw	r2,0(sp)
   453a8:	ddc00217 	ldw	r23,8(sp)
   453ac:	14805217 	ldw	r18,328(r2)
   453b0:	90001726 	beq	r18,zero,45410 <__call_exitprocs+0xbc>
   453b4:	94400117 	ldw	r17,4(r18)
   453b8:	8c3fffc4 	addi	r16,r17,-1
   453bc:	80001116 	blt	r16,zero,45404 <__call_exitprocs+0xb0>
   453c0:	8c400044 	addi	r17,r17,1
   453c4:	8427883a 	add	r19,r16,r16
   453c8:	8c63883a 	add	r17,r17,r17
   453cc:	95802204 	addi	r22,r18,136
   453d0:	9ce7883a 	add	r19,r19,r19
   453d4:	8c63883a 	add	r17,r17,r17
   453d8:	b4e7883a 	add	r19,r22,r19
   453dc:	9463883a 	add	r17,r18,r17
   453e0:	e0001726 	beq	fp,zero,45440 <__call_exitprocs+0xec>
   453e4:	8c87c83a 	sub	r3,r17,r18
   453e8:	b0c7883a 	add	r3,r22,r3
   453ec:	18c01e17 	ldw	r3,120(r3)
   453f0:	1f001326 	beq	r3,fp,45440 <__call_exitprocs+0xec>
   453f4:	843fffc4 	addi	r16,r16,-1
   453f8:	9cffff04 	addi	r19,r19,-4
   453fc:	8c7fff04 	addi	r17,r17,-4
   45400:	857ff71e 	bne	r16,r21,453e0 <__call_exitprocs+0x8c>
   45404:	00800034 	movhi	r2,0
   45408:	10800004 	addi	r2,r2,0
   4540c:	10002a1e 	bne	r2,zero,454b8 <__call_exitprocs+0x164>
   45410:	dfc00c17 	ldw	ra,48(sp)
   45414:	df000b17 	ldw	fp,44(sp)
   45418:	ddc00a17 	ldw	r23,40(sp)
   4541c:	dd800917 	ldw	r22,36(sp)
   45420:	dd400817 	ldw	r21,32(sp)
   45424:	dd000717 	ldw	r20,28(sp)
   45428:	dcc00617 	ldw	r19,24(sp)
   4542c:	dc800517 	ldw	r18,20(sp)
   45430:	dc400417 	ldw	r17,16(sp)
   45434:	dc000317 	ldw	r16,12(sp)
   45438:	dec00d04 	addi	sp,sp,52
   4543c:	f800283a 	ret
   45440:	91000117 	ldw	r4,4(r18)
   45444:	88c00017 	ldw	r3,0(r17)
   45448:	213fffc4 	addi	r4,r4,-1
   4544c:	24001526 	beq	r4,r16,454a4 <__call_exitprocs+0x150>
   45450:	88000015 	stw	zero,0(r17)
   45454:	183fe726 	beq	r3,zero,453f4 <__call_exitprocs+0xa0>
   45458:	00800044 	movi	r2,1
   4545c:	1408983a 	sll	r4,r2,r16
   45460:	91406217 	ldw	r5,392(r18)
   45464:	95000117 	ldw	r20,4(r18)
   45468:	214a703a 	and	r5,r4,r5
   4546c:	28000b26 	beq	r5,zero,4549c <__call_exitprocs+0x148>
   45470:	91406317 	ldw	r5,396(r18)
   45474:	2148703a 	and	r4,r4,r5
   45478:	20000c1e 	bne	r4,zero,454ac <__call_exitprocs+0x158>
   4547c:	99400017 	ldw	r5,0(r19)
   45480:	d9000117 	ldw	r4,4(sp)
   45484:	183ee83a 	callr	r3
   45488:	90c00117 	ldw	r3,4(r18)
   4548c:	1d3fc51e 	bne	r3,r20,453a4 <__call_exitprocs+0x50>
   45490:	b8c00017 	ldw	r3,0(r23)
   45494:	1cbfd726 	beq	r3,r18,453f4 <__call_exitprocs+0xa0>
   45498:	003fc206 	br	453a4 <__call_exitprocs+0x50>
   4549c:	183ee83a 	callr	r3
   454a0:	003ff906 	br	45488 <__call_exitprocs+0x134>
   454a4:	94000115 	stw	r16,4(r18)
   454a8:	003fea06 	br	45454 <__call_exitprocs+0x100>
   454ac:	99000017 	ldw	r4,0(r19)
   454b0:	183ee83a 	callr	r3
   454b4:	003ff406 	br	45488 <__call_exitprocs+0x134>
   454b8:	90c00117 	ldw	r3,4(r18)
   454bc:	1800071e 	bne	r3,zero,454dc <__call_exitprocs+0x188>
   454c0:	90c00017 	ldw	r3,0(r18)
   454c4:	18000926 	beq	r3,zero,454ec <__call_exitprocs+0x198>
   454c8:	9009883a 	mov	r4,r18
   454cc:	b8c00015 	stw	r3,0(r23)
   454d0:	00000000 	call	0 <__alt_mem_onchip_data_memory-0x40000>
   454d4:	bc800017 	ldw	r18,0(r23)
   454d8:	003fb506 	br	453b0 <__call_exitprocs+0x5c>
   454dc:	90c00017 	ldw	r3,0(r18)
   454e0:	902f883a 	mov	r23,r18
   454e4:	1825883a 	mov	r18,r3
   454e8:	003fb106 	br	453b0 <__call_exitprocs+0x5c>
   454ec:	0007883a 	mov	r3,zero
   454f0:	003ffb06 	br	454e0 <__call_exitprocs+0x18c>

000454f4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   454f4:	defffc04 	addi	sp,sp,-16
   454f8:	df000315 	stw	fp,12(sp)
   454fc:	df000304 	addi	fp,sp,12
   45500:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   45504:	0001883a 	nop
   45508:	e0bfff17 	ldw	r2,-4(fp)
   4550c:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
   45510:	e0bffd17 	ldw	r2,-12(fp)
   45514:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   45518:	e0bffe17 	ldw	r2,-8(fp)
   4551c:	10000226 	beq	r2,zero,45528 <_exit+0x34>
    ALT_SIM_FAIL();
   45520:	002af070 	cmpltui	zero,zero,43969
   45524:	00000106 	br	4552c <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   45528:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   4552c:	003fff06 	br	4552c <_exit+0x38>

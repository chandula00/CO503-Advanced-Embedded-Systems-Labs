
test_13.elf:     file format elf32-littlenios2
test_13.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000501b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00050000 paddr 0x00050000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00050020 paddr 0x00050020 align 2**12
         filesz 0x00005510 memsz 0x00005510 flags r-x
    LOAD off    0x00007000 vaddr 0x00000000 paddr 0x00055530 align 2**12
         filesz 0x00001a90 memsz 0x00001d70 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00050000  00050000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00050020  00050020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005378  000501b8  000501b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000048  00000000  00055530  00007000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a48  00000048  00055578  00007048  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e0  00001a90  00056fc0  00008a90  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00008a90  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000950  00000000  00000000  00008ab8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00017801  00000000  00000000  00009408  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00005ad8  00000000  00000000  00020c09  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00006beb  00000000  00000000  000266e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000fe0  00000000  00000000  0002d2cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000021de  00000000  00000000  0002e2ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000562f  00000000  00000000  0003048a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  00035abc  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000398  00000000  00000000  00035ad0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0003830b  2**0
                  CONTENTS, READONLY
 17 .cpu          00000004  00000000  00000000  0003830e  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00038312  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00038313  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00038314  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00038318  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0003831c  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000a  00000000  00000000  00038320  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000a  00000000  00000000  0003832a  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000a  00000000  00000000  00038334  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000003  00000000  00000000  0003833e  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000051  00000000  00000000  00038341  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00062039  00000000  00000000  00038392  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00050000 l    d  .entry	00000000 .entry
00050020 l    d  .exceptions	00000000 .exceptions
000501b8 l    d  .text	00000000 .text
00000000 l    d  .rodata	00000000 .rodata
00000048 l    d  .rwdata	00000000 .rwdata
00001a90 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../test_13_bsp//obj/HAL/src/crt0.o
000501f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00050094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
00000048 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00051d64 l     F .text	00000008 __fp_lock
00051d6c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
00052d6c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00052e88 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00052eb4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00052fb4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000530a8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00053194 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00053370 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00001a80 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
000535e4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00053724 l     F .text	00000038 alt_dev_reg
000009f8 l     O .rwdata	00001060 jtag_uart0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00053a14 l     F .text	00000204 altera_avalon_jtag_uart_irq
00053c18 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00054254 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000544ac l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00054938 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00054a90 l     F .text	00000050 alt_get_errno
00054ae0 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00052c08 g     F .text	00000064 _isatty_r
000532b8 g     F .text	00000078 alt_main
00050228 g     F .text	00000084 _puts_r
00001ae0 g     O .bss	00000100 alt_irq
00052c6c g     F .text	0000006c _lseek_r
00055578 g       *ABS*	00000000 __flash_rwdata_start
00001d70 g       *ABS*	00000000 __alt_heap_start
0005291c g     F .text	0000005c __sseek
00051e08 g     F .text	0000010c __sinit
00051d80 g     F .text	00000078 __sfmoreglue
00053350 g     F .text	00000020 __malloc_unlock
000511ec g     F .text	0000018c memmove
00051df8 g     F .text	00000010 _cleanup
00000000  w      *UND*	00000000 __errno
00050000 g       *ABS*	00000000 __alt_mem_onchip_instruction_memory0
00050000 g     F .entry	0000000c __reset
00050020 g       *ABS*	00000000 __flash_exceptions_start
00052ba0 g     F .text	00000068 _fstat_r
00001a9c g     O .bss	00000004 errno
00001aa4 g     O .bss	00000004 alt_argv
00009a58 g       *ABS*	00000000 _gp
00000878 g     O .rwdata	00000180 alt_fd_list
00054ee4 g     F .text	00000090 alt_find_dev
000510ac g     F .text	00000140 memcpy
00051d74 g     F .text	0000000c _cleanup_r
00054a18 g     F .text	00000078 alt_io_redirect
00055530 g       *ABS*	00000000 __DTOR_END__
000502ac g     F .text	00000014 puts
00053e18 g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00053004 g     F .text	000000a4 isatty
00001a98 g     O .bss	00000004 __malloc_top_pad
0005034c g     F .text	000004e4 __sfvwrite_r
00051974 g     F .text	00000064 _sbrk_r
00052cd8 g     F .text	0000006c _read_r
00001a78 g     O .rwdata	00000004 alt_max_fd
00052a50 g     F .text	0000013c _fclose_r
00051d34 g     F .text	00000030 fflush
00001a94 g     O .bss	00000004 __malloc_max_sbrked_mem
000531e4 g     F .text	000000d4 lseek
00001a58 g     O .rwdata	00000004 _global_impure_ptr
00051378 g     F .text	000005fc _realloc_r
00001d70 g       *ABS*	00000000 __bss_end
00054848 g     F .text	000000f0 alt_iic_isr_register
00054dc0 g     F .text	00000104 alt_tick
00052020 g     F .text	00000018 __fp_lock_all
000547fc g     F .text	0000004c alt_ic_irq_enabled
00054d28 g     F .text	00000098 alt_alarm_stop
00001aac g     O .bss	00000004 alt_irq_active
000500ec g     F .exceptions	000000cc alt_irq_handler
00000850 g     O .rwdata	00000028 alt_dev_null
00054490 g     F .text	0000001c alt_dcache_flush_all
00001a90 g       *ABS*	00000000 __ram_rwdata_end
00001a70 g     O .rwdata	00000008 alt_dev_list
00053634 g     F .text	000000f0 write
00000048 g       *ABS*	00000000 __ram_rodata_end
00052f04 g     F .text	000000b0 fstat
00001d70 g       *ABS*	00000000 end
00053954 g     F .text	000000c0 altera_avalon_jtag_uart_init
00055530 g       *ABS*	00000000 __CTOR_LIST__
00040000 g       *ABS*	00000000 __alt_stack_pointer
000542c8 g     F .text	00000088 alt_avalon_timer_sc_init
00054030 g     F .text	00000224 altera_avalon_jtag_uart_write
00052010 g     F .text	00000004 __sfp_lock_acquire
00050fb4 g     F .text	000000f8 memchr
0005218c g     F .text	000002d0 _free_r
00055354 g     F .text	000001a0 __call_exitprocs
00001a60 g     O .rwdata	00000004 __malloc_sbrk_base
000501b8 g     F .text	0000003c _start
00001ab0 g     O .bss	00000004 _alt_tick_rate
00001ab4 g     O .bss	00000004 _alt_nticks
000533c0 g     F .text	000000f4 read
00053790 g     F .text	00000060 alt_sys_init
00055224 g     F .text	00000130 __register_exitproc
00053cbc g     F .text	00000068 altera_avalon_jtag_uart_close
00052d44 g     F .text	00000028 __mulsi3
00000048 g       *ABS*	00000000 __ram_rwdata_start
00000000 g       *ABS*	00000000 __ram_rodata_start
00001ab8 g     O .bss	00000028 __malloc_current_mallinfo
000537f0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00055088 g     F .text	000000d4 alt_get_fd
000529ec g     F .text	00000064 _close_r
000551a8 g     F .text	0000007c memcmp
000538b0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00001d70 g       *ABS*	00000000 __alt_stack_base
00053900 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000519d8 g     F .text	00000174 __swsetup_r
00051f14 g     F .text	000000fc __sfp
00000448 g     O .rwdata	00000408 __malloc_av_
0005201c g     F .text	00000004 __sinit_lock_release
00052840 g     F .text	00000054 __sread
00054f74 g     F .text	00000114 alt_find_file
000544fc g     F .text	000000a0 alt_dev_llist_insert
00053330 g     F .text	00000020 __malloc_lock
00053534 g     F .text	000000b0 sbrk
00051b4c g     F .text	000001e8 _fflush_r
00001a90 g       *ABS*	00000000 __bss_start
00052764 g     F .text	000000dc memset
000501f4 g     F .text	00000034 main
00001aa8 g     O .bss	00000004 alt_envp
00001a90 g     O .bss	00000004 __malloc_max_total_mem
00053850 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00052978 g     F .text	00000008 __sclose
00040000 g       *ABS*	00000000 __alt_heap_limit
00052b8c g     F .text	00000014 fclose
00001be0 g     O .bss	00000190 _atexit0
00000000 g       *ABS*	00000000 __alt_mem_onchip_data_memory
00050830 g     F .text	00000784 _malloc_r
00001a7c g     O .rwdata	00000004 alt_errno
0005245c g     F .text	000000a8 _fwalk
00052050 g     F .text	0000013c _malloc_trim_r
00055530 g       *ABS*	00000000 __CTOR_END__
00055530 g       *ABS*	00000000 __flash_rodata_start
00055530 g       *ABS*	00000000 __DTOR_LIST__
0005375c g     F .text	00000034 alt_irq_init
000534b4 g     F .text	00000080 alt_release_fd
0005515c g     F .text	00000014 atexit
00052980 g     F .text	0000006c _write_r
00001a5c g     O .rwdata	00000004 _impure_ptr
00001aa0 g     O .bss	00000004 alt_argc
000545f8 g     F .text	0000005c _do_dtors
00050020 g       .exceptions	00000000 alt_irq_entry
00052038 g     F .text	00000018 __fp_unlock_all
00001a68 g     O .rwdata	00000008 alt_fs_list
00050020 g       *ABS*	00000000 __ram_exceptions_start
00054670 g     F .text	00000050 alt_ic_isr_register
00001a90 g       *ABS*	00000000 _edata
00001d70 g       *ABS*	00000000 _end
000501b8 g       *ABS*	00000000 __ram_exceptions_end
00053d24 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0005475c g     F .text	000000a0 alt_ic_irq_disable
00052894 g     F .text	00000088 __swrite
00001a64 g     O .rwdata	00000004 __malloc_trim_threshold
00054ec4 g     F .text	00000020 altera_nios2_qsys_irq_init
00055170 g     F .text	00000038 exit
00052504 g     F .text	000000b8 _fwalk_reent
00040000 g       *ABS*	00000000 __alt_data_end
00050020 g     F .exceptions	00000000 alt_exception
00052014 g     F .text	00000004 __sfp_lock_release
000554f4 g     F .text	0000003c _exit
00054350 g     F .text	00000140 alt_alarm_start
000525bc g     F .text	000001a8 __smakebuf_r
000502c0 g     F .text	0000008c strlen
00054bd0 g     F .text	00000158 open
00054654 g     F .text	0000001c alt_icache_flush_all
00001a84 g     O .rwdata	00000004 alt_priority_mask
000546c0 g     F .text	0000009c alt_ic_irq_enable
00001a88 g     O .rwdata	00000008 alt_alarm_list
0005459c g     F .text	0000005c _do_ctors
00052dbc g     F .text	000000cc close
00053114 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
00052018 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00050000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   50000:	00400174 	movhi	at,5
    ori r1, r1, %lo(_start)
   50004:	08406e14 	ori	at,at,440
    jmp r1
   50008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00050020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   50020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   50024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   50028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   5002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   50030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   50034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   50038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   5003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   50040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   50044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   50048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   5004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   50050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   50054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   50058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   5005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   50060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   50064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   50068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   5006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   50070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   50074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   50078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   5007c:	10000326 	beq	r2,zero,5008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   50080:	20000226 	beq	r4,zero,5008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   50084:	00500ec0 	call	500ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   50088:	00000306 	br	50098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   5008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   50090:	e8bfff17 	ldw	r2,-4(ea)

00050094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   50094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   50098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   5009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   500a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   500a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   500a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   500ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   500b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   500b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   500b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   500bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   500c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   500c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   500c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   500cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   500d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   500d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   500d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   500dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   500e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   500e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   500e8:	ef80083a 	eret

000500ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   500ec:	defff904 	addi	sp,sp,-28
   500f0:	dfc00615 	stw	ra,24(sp)
   500f4:	df000515 	stw	fp,20(sp)
   500f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   500fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   50100:	0005313a 	rdctl	r2,ipending
   50104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   50108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   5010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   50110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   50114:	00800044 	movi	r2,1
   50118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   5011c:	e0fffb17 	ldw	r3,-20(fp)
   50120:	e0bffc17 	ldw	r2,-16(fp)
   50124:	1884703a 	and	r2,r3,r2
   50128:	10001726 	beq	r2,zero,50188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   5012c:	00c00034 	movhi	r3,0
   50130:	18c6b804 	addi	r3,r3,6880
   50134:	e0bffd17 	ldw	r2,-12(fp)
   50138:	100490fa 	slli	r2,r2,3
   5013c:	1885883a 	add	r2,r3,r2
   50140:	10c00017 	ldw	r3,0(r2)
   50144:	01000034 	movhi	r4,0
   50148:	2106b804 	addi	r4,r4,6880
   5014c:	e0bffd17 	ldw	r2,-12(fp)
   50150:	100490fa 	slli	r2,r2,3
   50154:	2085883a 	add	r2,r4,r2
   50158:	10800104 	addi	r2,r2,4
   5015c:	10800017 	ldw	r2,0(r2)
   50160:	1009883a 	mov	r4,r2
   50164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   50168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   5016c:	0005313a 	rdctl	r2,ipending
   50170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   50174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   50178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   5017c:	e0bffb17 	ldw	r2,-20(fp)
   50180:	103fe31e 	bne	r2,zero,50110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   50184:	00000706 	br	501a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   50188:	e0bffc17 	ldw	r2,-16(fp)
   5018c:	1085883a 	add	r2,r2,r2
   50190:	e0bffc15 	stw	r2,-16(fp)
      i++;
   50194:	e0bffd17 	ldw	r2,-12(fp)
   50198:	10800044 	addi	r2,r2,1
   5019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   501a0:	003fde06 	br	5011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   501a4:	e037883a 	mov	sp,fp
   501a8:	dfc00117 	ldw	ra,4(sp)
   501ac:	df000017 	ldw	fp,0(sp)
   501b0:	dec00204 	addi	sp,sp,8
   501b4:	f800283a 	ret

Disassembly of section .text:

000501b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   501b8:	06c00134 	movhi	sp,4
    ori sp, sp, %lo(__alt_stack_pointer)
   501bc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   501c0:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
   501c4:	d6a69614 	ori	gp,gp,39512
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   501c8:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
   501cc:	1086a414 	ori	r2,r2,6800

    movhi r3, %hi(__bss_end)
   501d0:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
   501d4:	18c75c14 	ori	r3,r3,7536

    beq r2, r3, 1f
   501d8:	10c00326 	beq	r2,r3,501e8 <_start+0x30>

0:
    stw zero, (r2)
   501dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   501e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   501e4:	10fffd36 	bltu	r2,r3,501dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   501e8:	00531140 	call	53114 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   501ec:	00532b80 	call	532b8 <alt_main>

000501f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   501f0:	003fff06 	br	501f0 <alt_after_alt_main>

000501f4 <main>:
 */

#include <stdio.h>

int main()
{
   501f4:	defffe04 	addi	sp,sp,-8
   501f8:	dfc00115 	stw	ra,4(sp)
   501fc:	df000015 	stw	fp,0(sp)
   50200:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
   50204:	01000034 	movhi	r4,0
   50208:	21000004 	addi	r4,r4,0
   5020c:	00502ac0 	call	502ac <puts>

  return 0;
   50210:	0005883a 	mov	r2,zero
}
   50214:	e037883a 	mov	sp,fp
   50218:	dfc00117 	ldw	ra,4(sp)
   5021c:	df000017 	ldw	fp,0(sp)
   50220:	dec00204 	addi	sp,sp,8
   50224:	f800283a 	ret

00050228 <_puts_r>:
   50228:	defff604 	addi	sp,sp,-40
   5022c:	dc400815 	stw	r17,32(sp)
   50230:	2023883a 	mov	r17,r4
   50234:	2809883a 	mov	r4,r5
   50238:	dc000715 	stw	r16,28(sp)
   5023c:	dfc00915 	stw	ra,36(sp)
   50240:	2821883a 	mov	r16,r5
   50244:	00502c00 	call	502c0 <strlen>
   50248:	10c00044 	addi	r3,r2,1
   5024c:	d8800115 	stw	r2,4(sp)
   50250:	89400217 	ldw	r5,8(r17)
   50254:	00800034 	movhi	r2,0
   50258:	10800504 	addi	r2,r2,20
   5025c:	d8800215 	stw	r2,8(sp)
   50260:	00800044 	movi	r2,1
   50264:	d8800315 	stw	r2,12(sp)
   50268:	8809883a 	mov	r4,r17
   5026c:	00800084 	movi	r2,2
   50270:	d9800404 	addi	r6,sp,16
   50274:	dc000015 	stw	r16,0(sp)
   50278:	d8c00615 	stw	r3,24(sp)
   5027c:	dec00415 	stw	sp,16(sp)
   50280:	d8800515 	stw	r2,20(sp)
   50284:	005034c0 	call	5034c <__sfvwrite_r>
   50288:	1000061e 	bne	r2,zero,502a4 <_puts_r+0x7c>
   5028c:	00800284 	movi	r2,10
   50290:	dfc00917 	ldw	ra,36(sp)
   50294:	dc400817 	ldw	r17,32(sp)
   50298:	dc000717 	ldw	r16,28(sp)
   5029c:	dec00a04 	addi	sp,sp,40
   502a0:	f800283a 	ret
   502a4:	00bfffc4 	movi	r2,-1
   502a8:	003ff906 	br	50290 <_puts_r+0x68>

000502ac <puts>:
   502ac:	00800034 	movhi	r2,0
   502b0:	10869704 	addi	r2,r2,6748
   502b4:	200b883a 	mov	r5,r4
   502b8:	11000017 	ldw	r4,0(r2)
   502bc:	00502281 	jmpi	50228 <_puts_r>

000502c0 <strlen>:
   502c0:	208000cc 	andi	r2,r4,3
   502c4:	10001f1e 	bne	r2,zero,50344 <strlen+0x84>
   502c8:	20800017 	ldw	r2,0(r4)
   502cc:	01ffbff4 	movhi	r7,65279
   502d0:	39ffbfc4 	addi	r7,r7,-257
   502d4:	01a02074 	movhi	r6,32897
   502d8:	31a02004 	addi	r6,r6,-32640
   502dc:	11c7883a 	add	r3,r2,r7
   502e0:	0084303a 	nor	r2,zero,r2
   502e4:	1886703a 	and	r3,r3,r2
   502e8:	1986703a 	and	r3,r3,r6
   502ec:	2005883a 	mov	r2,r4
   502f0:	1800101e 	bne	r3,zero,50334 <strlen+0x74>
   502f4:	10800104 	addi	r2,r2,4
   502f8:	10c00017 	ldw	r3,0(r2)
   502fc:	19cb883a 	add	r5,r3,r7
   50300:	00c6303a 	nor	r3,zero,r3
   50304:	28c6703a 	and	r3,r5,r3
   50308:	1986703a 	and	r3,r3,r6
   5030c:	1800091e 	bne	r3,zero,50334 <strlen+0x74>
   50310:	10800104 	addi	r2,r2,4
   50314:	10c00017 	ldw	r3,0(r2)
   50318:	19cb883a 	add	r5,r3,r7
   5031c:	00c6303a 	nor	r3,zero,r3
   50320:	28c6703a 	and	r3,r5,r3
   50324:	1986703a 	and	r3,r3,r6
   50328:	183ff226 	beq	r3,zero,502f4 <strlen+0x34>
   5032c:	00000106 	br	50334 <strlen+0x74>
   50330:	10800044 	addi	r2,r2,1
   50334:	10c00007 	ldb	r3,0(r2)
   50338:	183ffd1e 	bne	r3,zero,50330 <strlen+0x70>
   5033c:	1105c83a 	sub	r2,r2,r4
   50340:	f800283a 	ret
   50344:	2005883a 	mov	r2,r4
   50348:	003ffa06 	br	50334 <strlen+0x74>

0005034c <__sfvwrite_r>:
   5034c:	30800217 	ldw	r2,8(r6)
   50350:	defff504 	addi	sp,sp,-44
   50354:	dd400615 	stw	r21,24(sp)
   50358:	dd000515 	stw	r20,20(sp)
   5035c:	dc000115 	stw	r16,4(sp)
   50360:	dfc00a15 	stw	ra,40(sp)
   50364:	df000915 	stw	fp,36(sp)
   50368:	ddc00815 	stw	r23,32(sp)
   5036c:	dd800715 	stw	r22,28(sp)
   50370:	dcc00415 	stw	r19,16(sp)
   50374:	dc800315 	stw	r18,12(sp)
   50378:	dc400215 	stw	r17,8(sp)
   5037c:	3029883a 	mov	r20,r6
   50380:	202b883a 	mov	r21,r4
   50384:	2821883a 	mov	r16,r5
   50388:	10002126 	beq	r2,zero,50410 <__sfvwrite_r+0xc4>
   5038c:	2880030b 	ldhu	r2,12(r5)
   50390:	10c0020c 	andi	r3,r2,8
   50394:	18ffffcc 	andi	r3,r3,65535
   50398:	18e0001c 	xori	r3,r3,32768
   5039c:	18e00004 	addi	r3,r3,-32768
   503a0:	18002826 	beq	r3,zero,50444 <__sfvwrite_r+0xf8>
   503a4:	28c00417 	ldw	r3,16(r5)
   503a8:	18002626 	beq	r3,zero,50444 <__sfvwrite_r+0xf8>
   503ac:	10c0008c 	andi	r3,r2,2
   503b0:	18ffffcc 	andi	r3,r3,65535
   503b4:	18e0001c 	xori	r3,r3,32768
   503b8:	18e00004 	addi	r3,r3,-32768
   503bc:	a4400017 	ldw	r17,0(r20)
   503c0:	18002b26 	beq	r3,zero,50470 <__sfvwrite_r+0x124>
   503c4:	0027883a 	mov	r19,zero
   503c8:	0025883a 	mov	r18,zero
   503cc:	05810004 	movi	r22,1024
   503d0:	980d883a 	mov	r6,r19
   503d4:	a809883a 	mov	r4,r21
   503d8:	90004f26 	beq	r18,zero,50518 <__sfvwrite_r+0x1cc>
   503dc:	900f883a 	mov	r7,r18
   503e0:	81400717 	ldw	r5,28(r16)
   503e4:	b480012e 	bgeu	r22,r18,503ec <__sfvwrite_r+0xa0>
   503e8:	01c10004 	movi	r7,1024
   503ec:	80800917 	ldw	r2,36(r16)
   503f0:	103ee83a 	callr	r2
   503f4:	0080540e 	bge	zero,r2,50548 <__sfvwrite_r+0x1fc>
   503f8:	a0c00217 	ldw	r3,8(r20)
   503fc:	98a7883a 	add	r19,r19,r2
   50400:	90a5c83a 	sub	r18,r18,r2
   50404:	1885c83a 	sub	r2,r3,r2
   50408:	a0800215 	stw	r2,8(r20)
   5040c:	103ff01e 	bne	r2,zero,503d0 <__sfvwrite_r+0x84>
   50410:	0005883a 	mov	r2,zero
   50414:	dfc00a17 	ldw	ra,40(sp)
   50418:	df000917 	ldw	fp,36(sp)
   5041c:	ddc00817 	ldw	r23,32(sp)
   50420:	dd800717 	ldw	r22,28(sp)
   50424:	dd400617 	ldw	r21,24(sp)
   50428:	dd000517 	ldw	r20,20(sp)
   5042c:	dcc00417 	ldw	r19,16(sp)
   50430:	dc800317 	ldw	r18,12(sp)
   50434:	dc400217 	ldw	r17,8(sp)
   50438:	dc000117 	ldw	r16,4(sp)
   5043c:	dec00b04 	addi	sp,sp,44
   50440:	f800283a 	ret
   50444:	a809883a 	mov	r4,r21
   50448:	800b883a 	mov	r5,r16
   5044c:	00519d80 	call	519d8 <__swsetup_r>
   50450:	1000f01e 	bne	r2,zero,50814 <__sfvwrite_r+0x4c8>
   50454:	8080030b 	ldhu	r2,12(r16)
   50458:	a4400017 	ldw	r17,0(r20)
   5045c:	10c0008c 	andi	r3,r2,2
   50460:	18ffffcc 	andi	r3,r3,65535
   50464:	18e0001c 	xori	r3,r3,32768
   50468:	18e00004 	addi	r3,r3,-32768
   5046c:	183fd51e 	bne	r3,zero,503c4 <__sfvwrite_r+0x78>
   50470:	10c0004c 	andi	r3,r2,1
   50474:	002d883a 	mov	r22,zero
   50478:	1800381e 	bne	r3,zero,5055c <__sfvwrite_r+0x210>
   5047c:	0025883a 	mov	r18,zero
   50480:	90002126 	beq	r18,zero,50508 <__sfvwrite_r+0x1bc>
   50484:	10c0800c 	andi	r3,r2,512
   50488:	18ffffcc 	andi	r3,r3,65535
   5048c:	18e0001c 	xori	r3,r3,32768
   50490:	18e00004 	addi	r3,r3,-32768
   50494:	84c00217 	ldw	r19,8(r16)
   50498:	18006b26 	beq	r3,zero,50648 <__sfvwrite_r+0x2fc>
   5049c:	980f883a 	mov	r7,r19
   504a0:	94c08636 	bltu	r18,r19,506bc <__sfvwrite_r+0x370>
   504a4:	10c1200c 	andi	r3,r2,1152
   504a8:	18009f1e 	bne	r3,zero,50728 <__sfvwrite_r+0x3dc>
   504ac:	81000017 	ldw	r4,0(r16)
   504b0:	982f883a 	mov	r23,r19
   504b4:	9039883a 	mov	fp,r18
   504b8:	9027883a 	mov	r19,r18
   504bc:	380d883a 	mov	r6,r7
   504c0:	b00b883a 	mov	r5,r22
   504c4:	d9c00015 	stw	r7,0(sp)
   504c8:	00511ec0 	call	511ec <memmove>
   504cc:	d9c00017 	ldw	r7,0(sp)
   504d0:	81000217 	ldw	r4,8(r16)
   504d4:	80800017 	ldw	r2,0(r16)
   504d8:	25efc83a 	sub	r23,r4,r23
   504dc:	11cf883a 	add	r7,r2,r7
   504e0:	85c00215 	stw	r23,8(r16)
   504e4:	81c00015 	stw	r7,0(r16)
   504e8:	a0800217 	ldw	r2,8(r20)
   504ec:	b72d883a 	add	r22,r22,fp
   504f0:	9725c83a 	sub	r18,r18,fp
   504f4:	14e7c83a 	sub	r19,r2,r19
   504f8:	a4c00215 	stw	r19,8(r20)
   504fc:	983fc426 	beq	r19,zero,50410 <__sfvwrite_r+0xc4>
   50500:	8080030b 	ldhu	r2,12(r16)
   50504:	903fdf1e 	bne	r18,zero,50484 <__sfvwrite_r+0x138>
   50508:	8d800017 	ldw	r22,0(r17)
   5050c:	8c800117 	ldw	r18,4(r17)
   50510:	8c400204 	addi	r17,r17,8
   50514:	003fda06 	br	50480 <__sfvwrite_r+0x134>
   50518:	8cc00017 	ldw	r19,0(r17)
   5051c:	8c800117 	ldw	r18,4(r17)
   50520:	8c400204 	addi	r17,r17,8
   50524:	003faa06 	br	503d0 <__sfvwrite_r+0x84>
   50528:	00513780 	call	51378 <_realloc_r>
   5052c:	102f883a 	mov	r23,r2
   50530:	10009f1e 	bne	r2,zero,507b0 <__sfvwrite_r+0x464>
   50534:	81400417 	ldw	r5,16(r16)
   50538:	a809883a 	mov	r4,r21
   5053c:	005218c0 	call	5218c <_free_r>
   50540:	00800304 	movi	r2,12
   50544:	a8800015 	stw	r2,0(r21)
   50548:	80c0030b 	ldhu	r3,12(r16)
   5054c:	00bfffc4 	movi	r2,-1
   50550:	18c01014 	ori	r3,r3,64
   50554:	80c0030d 	sth	r3,12(r16)
   50558:	003fae06 	br	50414 <__sfvwrite_r+0xc8>
   5055c:	0007883a 	mov	r3,zero
   50560:	0039883a 	mov	fp,zero
   50564:	0025883a 	mov	r18,zero
   50568:	90001e26 	beq	r18,zero,505e4 <__sfvwrite_r+0x298>
   5056c:	18006526 	beq	r3,zero,50704 <__sfvwrite_r+0x3b8>
   50570:	b02f883a 	mov	r23,r22
   50574:	9580012e 	bgeu	r18,r22,5057c <__sfvwrite_r+0x230>
   50578:	902f883a 	mov	r23,r18
   5057c:	81000017 	ldw	r4,0(r16)
   50580:	80800417 	ldw	r2,16(r16)
   50584:	84c00217 	ldw	r19,8(r16)
   50588:	81c00517 	ldw	r7,20(r16)
   5058c:	1100022e 	bgeu	r2,r4,50598 <__sfvwrite_r+0x24c>
   50590:	99e7883a 	add	r19,r19,r7
   50594:	9dc01816 	blt	r19,r23,505f8 <__sfvwrite_r+0x2ac>
   50598:	b9c03b16 	blt	r23,r7,50688 <__sfvwrite_r+0x33c>
   5059c:	80800917 	ldw	r2,36(r16)
   505a0:	81400717 	ldw	r5,28(r16)
   505a4:	a809883a 	mov	r4,r21
   505a8:	d8c00015 	stw	r3,0(sp)
   505ac:	e00d883a 	mov	r6,fp
   505b0:	103ee83a 	callr	r2
   505b4:	1027883a 	mov	r19,r2
   505b8:	d8c00017 	ldw	r3,0(sp)
   505bc:	00bfe20e 	bge	zero,r2,50548 <__sfvwrite_r+0x1fc>
   505c0:	b4edc83a 	sub	r22,r22,r19
   505c4:	b0001a26 	beq	r22,zero,50630 <__sfvwrite_r+0x2e4>
   505c8:	a0800217 	ldw	r2,8(r20)
   505cc:	e4f9883a 	add	fp,fp,r19
   505d0:	94e5c83a 	sub	r18,r18,r19
   505d4:	14e7c83a 	sub	r19,r2,r19
   505d8:	a4c00215 	stw	r19,8(r20)
   505dc:	983f8c26 	beq	r19,zero,50410 <__sfvwrite_r+0xc4>
   505e0:	903fe21e 	bne	r18,zero,5056c <__sfvwrite_r+0x220>
   505e4:	8f000017 	ldw	fp,0(r17)
   505e8:	8c800117 	ldw	r18,4(r17)
   505ec:	0007883a 	mov	r3,zero
   505f0:	8c400204 	addi	r17,r17,8
   505f4:	003fdc06 	br	50568 <__sfvwrite_r+0x21c>
   505f8:	e00b883a 	mov	r5,fp
   505fc:	980d883a 	mov	r6,r19
   50600:	d8c00015 	stw	r3,0(sp)
   50604:	00511ec0 	call	511ec <memmove>
   50608:	80800017 	ldw	r2,0(r16)
   5060c:	a809883a 	mov	r4,r21
   50610:	800b883a 	mov	r5,r16
   50614:	14c5883a 	add	r2,r2,r19
   50618:	80800015 	stw	r2,0(r16)
   5061c:	0051b4c0 	call	51b4c <_fflush_r>
   50620:	d8c00017 	ldw	r3,0(sp)
   50624:	103fc81e 	bne	r2,zero,50548 <__sfvwrite_r+0x1fc>
   50628:	b4edc83a 	sub	r22,r22,r19
   5062c:	b03fe61e 	bne	r22,zero,505c8 <__sfvwrite_r+0x27c>
   50630:	a809883a 	mov	r4,r21
   50634:	800b883a 	mov	r5,r16
   50638:	0051b4c0 	call	51b4c <_fflush_r>
   5063c:	103fc21e 	bne	r2,zero,50548 <__sfvwrite_r+0x1fc>
   50640:	0007883a 	mov	r3,zero
   50644:	003fe006 	br	505c8 <__sfvwrite_r+0x27c>
   50648:	81000017 	ldw	r4,0(r16)
   5064c:	80800417 	ldw	r2,16(r16)
   50650:	1100022e 	bgeu	r2,r4,5065c <__sfvwrite_r+0x310>
   50654:	9839883a 	mov	fp,r19
   50658:	9c806036 	bltu	r19,r18,507dc <__sfvwrite_r+0x490>
   5065c:	81c00517 	ldw	r7,20(r16)
   50660:	91c01c36 	bltu	r18,r7,506d4 <__sfvwrite_r+0x388>
   50664:	80800917 	ldw	r2,36(r16)
   50668:	81400717 	ldw	r5,28(r16)
   5066c:	a809883a 	mov	r4,r21
   50670:	b00d883a 	mov	r6,r22
   50674:	103ee83a 	callr	r2
   50678:	1027883a 	mov	r19,r2
   5067c:	00bfb20e 	bge	zero,r2,50548 <__sfvwrite_r+0x1fc>
   50680:	1039883a 	mov	fp,r2
   50684:	003f9806 	br	504e8 <__sfvwrite_r+0x19c>
   50688:	b80d883a 	mov	r6,r23
   5068c:	e00b883a 	mov	r5,fp
   50690:	d8c00015 	stw	r3,0(sp)
   50694:	00511ec0 	call	511ec <memmove>
   50698:	80800217 	ldw	r2,8(r16)
   5069c:	81000017 	ldw	r4,0(r16)
   506a0:	b827883a 	mov	r19,r23
   506a4:	15c5c83a 	sub	r2,r2,r23
   506a8:	25ef883a 	add	r23,r4,r23
   506ac:	80800215 	stw	r2,8(r16)
   506b0:	85c00015 	stw	r23,0(r16)
   506b4:	d8c00017 	ldw	r3,0(sp)
   506b8:	003fc106 	br	505c0 <__sfvwrite_r+0x274>
   506bc:	81000017 	ldw	r4,0(r16)
   506c0:	902f883a 	mov	r23,r18
   506c4:	9039883a 	mov	fp,r18
   506c8:	9027883a 	mov	r19,r18
   506cc:	900f883a 	mov	r7,r18
   506d0:	003f7a06 	br	504bc <__sfvwrite_r+0x170>
   506d4:	b00b883a 	mov	r5,r22
   506d8:	900d883a 	mov	r6,r18
   506dc:	00511ec0 	call	511ec <memmove>
   506e0:	80c00217 	ldw	r3,8(r16)
   506e4:	80800017 	ldw	r2,0(r16)
   506e8:	9027883a 	mov	r19,r18
   506ec:	1c87c83a 	sub	r3,r3,r18
   506f0:	1485883a 	add	r2,r2,r18
   506f4:	80c00215 	stw	r3,8(r16)
   506f8:	80800015 	stw	r2,0(r16)
   506fc:	9039883a 	mov	fp,r18
   50700:	003f7906 	br	504e8 <__sfvwrite_r+0x19c>
   50704:	e009883a 	mov	r4,fp
   50708:	01400284 	movi	r5,10
   5070c:	900d883a 	mov	r6,r18
   50710:	0050fb40 	call	50fb4 <memchr>
   50714:	10003c26 	beq	r2,zero,50808 <__sfvwrite_r+0x4bc>
   50718:	15800044 	addi	r22,r2,1
   5071c:	b72dc83a 	sub	r22,r22,fp
   50720:	00c00044 	movi	r3,1
   50724:	003f9206 	br	50570 <__sfvwrite_r+0x224>
   50728:	81000517 	ldw	r4,20(r16)
   5072c:	81400417 	ldw	r5,16(r16)
   50730:	80c00017 	ldw	r3,0(r16)
   50734:	210d883a 	add	r6,r4,r4
   50738:	3109883a 	add	r4,r6,r4
   5073c:	2026d7fa 	srli	r19,r4,31
   50740:	1979c83a 	sub	fp,r3,r5
   50744:	e1800044 	addi	r6,fp,1
   50748:	9909883a 	add	r4,r19,r4
   5074c:	2027d07a 	srai	r19,r4,1
   50750:	3489883a 	add	r4,r6,r18
   50754:	980d883a 	mov	r6,r19
   50758:	9900022e 	bgeu	r19,r4,50764 <__sfvwrite_r+0x418>
   5075c:	2027883a 	mov	r19,r4
   50760:	200d883a 	mov	r6,r4
   50764:	1081000c 	andi	r2,r2,1024
   50768:	10bfffcc 	andi	r2,r2,65535
   5076c:	10a0001c 	xori	r2,r2,32768
   50770:	10a00004 	addi	r2,r2,-32768
   50774:	a809883a 	mov	r4,r21
   50778:	103f6b26 	beq	r2,zero,50528 <__sfvwrite_r+0x1dc>
   5077c:	300b883a 	mov	r5,r6
   50780:	00508300 	call	50830 <_malloc_r>
   50784:	102f883a 	mov	r23,r2
   50788:	103f6d26 	beq	r2,zero,50540 <__sfvwrite_r+0x1f4>
   5078c:	81400417 	ldw	r5,16(r16)
   50790:	1009883a 	mov	r4,r2
   50794:	e00d883a 	mov	r6,fp
   50798:	00510ac0 	call	510ac <memcpy>
   5079c:	8080030b 	ldhu	r2,12(r16)
   507a0:	00fedfc4 	movi	r3,-1153
   507a4:	10c4703a 	and	r2,r2,r3
   507a8:	10802014 	ori	r2,r2,128
   507ac:	8080030d 	sth	r2,12(r16)
   507b0:	bf09883a 	add	r4,r23,fp
   507b4:	9f07c83a 	sub	r3,r19,fp
   507b8:	85c00415 	stw	r23,16(r16)
   507bc:	84c00515 	stw	r19,20(r16)
   507c0:	81000015 	stw	r4,0(r16)
   507c4:	902f883a 	mov	r23,r18
   507c8:	80c00215 	stw	r3,8(r16)
   507cc:	9039883a 	mov	fp,r18
   507d0:	9027883a 	mov	r19,r18
   507d4:	900f883a 	mov	r7,r18
   507d8:	003f3806 	br	504bc <__sfvwrite_r+0x170>
   507dc:	b00b883a 	mov	r5,r22
   507e0:	980d883a 	mov	r6,r19
   507e4:	00511ec0 	call	511ec <memmove>
   507e8:	80800017 	ldw	r2,0(r16)
   507ec:	a809883a 	mov	r4,r21
   507f0:	800b883a 	mov	r5,r16
   507f4:	14c5883a 	add	r2,r2,r19
   507f8:	80800015 	stw	r2,0(r16)
   507fc:	0051b4c0 	call	51b4c <_fflush_r>
   50800:	103f3926 	beq	r2,zero,504e8 <__sfvwrite_r+0x19c>
   50804:	003f5006 	br	50548 <__sfvwrite_r+0x1fc>
   50808:	95800044 	addi	r22,r18,1
   5080c:	00c00044 	movi	r3,1
   50810:	003f5706 	br	50570 <__sfvwrite_r+0x224>
   50814:	80c0030b 	ldhu	r3,12(r16)
   50818:	00bfffc4 	movi	r2,-1
   5081c:	18c01014 	ori	r3,r3,64
   50820:	80c0030d 	sth	r3,12(r16)
   50824:	00c00244 	movi	r3,9
   50828:	a8c00015 	stw	r3,0(r21)
   5082c:	003ef906 	br	50414 <__sfvwrite_r+0xc8>

00050830 <_malloc_r>:
   50830:	defff604 	addi	sp,sp,-40
   50834:	dc800215 	stw	r18,8(sp)
   50838:	dfc00915 	stw	ra,36(sp)
   5083c:	df000815 	stw	fp,32(sp)
   50840:	ddc00715 	stw	r23,28(sp)
   50844:	dd800615 	stw	r22,24(sp)
   50848:	dd400515 	stw	r21,20(sp)
   5084c:	dd000415 	stw	r20,16(sp)
   50850:	dcc00315 	stw	r19,12(sp)
   50854:	dc400115 	stw	r17,4(sp)
   50858:	dc000015 	stw	r16,0(sp)
   5085c:	288002c4 	addi	r2,r5,11
   50860:	00c00584 	movi	r3,22
   50864:	2025883a 	mov	r18,r4
   50868:	18802b2e 	bgeu	r3,r2,50918 <_malloc_r+0xe8>
   5086c:	047ffe04 	movi	r17,-8
   50870:	1462703a 	and	r17,r2,r17
   50874:	88002a16 	blt	r17,zero,50920 <_malloc_r+0xf0>
   50878:	89402936 	bltu	r17,r5,50920 <_malloc_r+0xf0>
   5087c:	9009883a 	mov	r4,r18
   50880:	00533300 	call	53330 <__malloc_lock>
   50884:	00807dc4 	movi	r2,503
   50888:	14402936 	bltu	r2,r17,50930 <_malloc_r+0x100>
   5088c:	8808d0fa 	srli	r4,r17,3
   50890:	04c00034 	movhi	r19,0
   50894:	9cc11204 	addi	r19,r19,1096
   50898:	2105883a 	add	r2,r4,r4
   5089c:	1085883a 	add	r2,r2,r2
   508a0:	1085883a 	add	r2,r2,r2
   508a4:	9885883a 	add	r2,r19,r2
   508a8:	14000317 	ldw	r16,12(r2)
   508ac:	80815526 	beq	r16,r2,50e04 <_malloc_r+0x5d4>
   508b0:	81000117 	ldw	r4,4(r16)
   508b4:	00bfff04 	movi	r2,-4
   508b8:	80c00317 	ldw	r3,12(r16)
   508bc:	2084703a 	and	r2,r4,r2
   508c0:	8085883a 	add	r2,r16,r2
   508c4:	11800117 	ldw	r6,4(r2)
   508c8:	81400217 	ldw	r5,8(r16)
   508cc:	9009883a 	mov	r4,r18
   508d0:	31800054 	ori	r6,r6,1
   508d4:	11800115 	stw	r6,4(r2)
   508d8:	28c00315 	stw	r3,12(r5)
   508dc:	19400215 	stw	r5,8(r3)
   508e0:	00533500 	call	53350 <__malloc_unlock>
   508e4:	80800204 	addi	r2,r16,8
   508e8:	dfc00917 	ldw	ra,36(sp)
   508ec:	df000817 	ldw	fp,32(sp)
   508f0:	ddc00717 	ldw	r23,28(sp)
   508f4:	dd800617 	ldw	r22,24(sp)
   508f8:	dd400517 	ldw	r21,20(sp)
   508fc:	dd000417 	ldw	r20,16(sp)
   50900:	dcc00317 	ldw	r19,12(sp)
   50904:	dc800217 	ldw	r18,8(sp)
   50908:	dc400117 	ldw	r17,4(sp)
   5090c:	dc000017 	ldw	r16,0(sp)
   50910:	dec00a04 	addi	sp,sp,40
   50914:	f800283a 	ret
   50918:	04400404 	movi	r17,16
   5091c:	897fd72e 	bgeu	r17,r5,5087c <_malloc_r+0x4c>
   50920:	00800304 	movi	r2,12
   50924:	90800015 	stw	r2,0(r18)
   50928:	0005883a 	mov	r2,zero
   5092c:	003fee06 	br	508e8 <_malloc_r+0xb8>
   50930:	8808d27a 	srli	r4,r17,9
   50934:	20007126 	beq	r4,zero,50afc <_malloc_r+0x2cc>
   50938:	00800104 	movi	r2,4
   5093c:	1100eb36 	bltu	r2,r4,50cec <_malloc_r+0x4bc>
   50940:	8808d1ba 	srli	r4,r17,6
   50944:	21000e04 	addi	r4,r4,56
   50948:	210b883a 	add	r5,r4,r4
   5094c:	294b883a 	add	r5,r5,r5
   50950:	294b883a 	add	r5,r5,r5
   50954:	04c00034 	movhi	r19,0
   50958:	9cc11204 	addi	r19,r19,1096
   5095c:	994b883a 	add	r5,r19,r5
   50960:	2c000317 	ldw	r16,12(r5)
   50964:	2c000e26 	beq	r5,r16,509a0 <_malloc_r+0x170>
   50968:	80c00117 	ldw	r3,4(r16)
   5096c:	01ffff04 	movi	r7,-4
   50970:	018003c4 	movi	r6,15
   50974:	19c6703a 	and	r3,r3,r7
   50978:	1c45c83a 	sub	r2,r3,r17
   5097c:	30800716 	blt	r6,r2,5099c <_malloc_r+0x16c>
   50980:	1000610e 	bge	r2,zero,50b08 <_malloc_r+0x2d8>
   50984:	84000317 	ldw	r16,12(r16)
   50988:	2c000526 	beq	r5,r16,509a0 <_malloc_r+0x170>
   5098c:	80c00117 	ldw	r3,4(r16)
   50990:	19c6703a 	and	r3,r3,r7
   50994:	1c45c83a 	sub	r2,r3,r17
   50998:	30bff90e 	bge	r6,r2,50980 <_malloc_r+0x150>
   5099c:	213fffc4 	addi	r4,r4,-1
   509a0:	21000044 	addi	r4,r4,1
   509a4:	9c000417 	ldw	r16,16(r19)
   509a8:	00c00034 	movhi	r3,0
   509ac:	18c11204 	addi	r3,r3,1096
   509b0:	1a400204 	addi	r9,r3,8
   509b4:	8240ff26 	beq	r16,r9,50db4 <_malloc_r+0x584>
   509b8:	81400117 	ldw	r5,4(r16)
   509bc:	00bfff04 	movi	r2,-4
   509c0:	018003c4 	movi	r6,15
   509c4:	2884703a 	and	r2,r5,r2
   509c8:	144bc83a 	sub	r5,r2,r17
   509cc:	3140ea16 	blt	r6,r5,50d78 <_malloc_r+0x548>
   509d0:	1a400515 	stw	r9,20(r3)
   509d4:	1a400415 	stw	r9,16(r3)
   509d8:	2800570e 	bge	r5,zero,50b38 <_malloc_r+0x308>
   509dc:	01407fc4 	movi	r5,511
   509e0:	2880ca36 	bltu	r5,r2,50d0c <_malloc_r+0x4dc>
   509e4:	1004d0fa 	srli	r2,r2,3
   509e8:	02000044 	movi	r8,1
   509ec:	19c00117 	ldw	r7,4(r3)
   509f0:	108b883a 	add	r5,r2,r2
   509f4:	294b883a 	add	r5,r5,r5
   509f8:	1005d0ba 	srai	r2,r2,2
   509fc:	294b883a 	add	r5,r5,r5
   50a00:	28cb883a 	add	r5,r5,r3
   50a04:	29800217 	ldw	r6,8(r5)
   50a08:	4084983a 	sll	r2,r8,r2
   50a0c:	81400315 	stw	r5,12(r16)
   50a10:	81800215 	stw	r6,8(r16)
   50a14:	11c4b03a 	or	r2,r2,r7
   50a18:	18800115 	stw	r2,4(r3)
   50a1c:	2c000215 	stw	r16,8(r5)
   50a20:	34000315 	stw	r16,12(r6)
   50a24:	200bd0ba 	srai	r5,r4,2
   50a28:	00c00044 	movi	r3,1
   50a2c:	194a983a 	sll	r5,r3,r5
   50a30:	11404936 	bltu	r2,r5,50b58 <_malloc_r+0x328>
   50a34:	1146703a 	and	r3,r2,r5
   50a38:	18000a1e 	bne	r3,zero,50a64 <_malloc_r+0x234>
   50a3c:	00ffff04 	movi	r3,-4
   50a40:	294b883a 	add	r5,r5,r5
   50a44:	20c8703a 	and	r4,r4,r3
   50a48:	1146703a 	and	r3,r2,r5
   50a4c:	21000104 	addi	r4,r4,4
   50a50:	1800041e 	bne	r3,zero,50a64 <_malloc_r+0x234>
   50a54:	294b883a 	add	r5,r5,r5
   50a58:	1146703a 	and	r3,r2,r5
   50a5c:	21000104 	addi	r4,r4,4
   50a60:	183ffc26 	beq	r3,zero,50a54 <_malloc_r+0x224>
   50a64:	023fff04 	movi	r8,-4
   50a68:	01c003c4 	movi	r7,15
   50a6c:	2105883a 	add	r2,r4,r4
   50a70:	1085883a 	add	r2,r2,r2
   50a74:	1085883a 	add	r2,r2,r2
   50a78:	9899883a 	add	r12,r19,r2
   50a7c:	62800304 	addi	r10,r12,12
   50a80:	2017883a 	mov	r11,r4
   50a84:	54000017 	ldw	r16,0(r10)
   50a88:	51bffd04 	addi	r6,r10,-12
   50a8c:	8180041e 	bne	r16,r6,50aa0 <_malloc_r+0x270>
   50a90:	0000ca06 	br	50dbc <_malloc_r+0x58c>
   50a94:	10001c0e 	bge	r2,zero,50b08 <_malloc_r+0x2d8>
   50a98:	84000317 	ldw	r16,12(r16)
   50a9c:	8180c726 	beq	r16,r6,50dbc <_malloc_r+0x58c>
   50aa0:	80c00117 	ldw	r3,4(r16)
   50aa4:	1a06703a 	and	r3,r3,r8
   50aa8:	1c45c83a 	sub	r2,r3,r17
   50aac:	38bff90e 	bge	r7,r2,50a94 <_malloc_r+0x264>
   50ab0:	81000317 	ldw	r4,12(r16)
   50ab4:	81400217 	ldw	r5,8(r16)
   50ab8:	8447883a 	add	r3,r16,r17
   50abc:	8c400054 	ori	r17,r17,1
   50ac0:	29000315 	stw	r4,12(r5)
   50ac4:	21400215 	stw	r5,8(r4)
   50ac8:	84400115 	stw	r17,4(r16)
   50acc:	1889883a 	add	r4,r3,r2
   50ad0:	11400054 	ori	r5,r2,1
   50ad4:	98c00515 	stw	r3,20(r19)
   50ad8:	98c00415 	stw	r3,16(r19)
   50adc:	20800015 	stw	r2,0(r4)
   50ae0:	1a400315 	stw	r9,12(r3)
   50ae4:	1a400215 	stw	r9,8(r3)
   50ae8:	19400115 	stw	r5,4(r3)
   50aec:	9009883a 	mov	r4,r18
   50af0:	00533500 	call	53350 <__malloc_unlock>
   50af4:	80800204 	addi	r2,r16,8
   50af8:	003f7b06 	br	508e8 <_malloc_r+0xb8>
   50afc:	8808d0fa 	srli	r4,r17,3
   50b00:	210b883a 	add	r5,r4,r4
   50b04:	003f9106 	br	5094c <_malloc_r+0x11c>
   50b08:	80c7883a 	add	r3,r16,r3
   50b0c:	19400117 	ldw	r5,4(r3)
   50b10:	80800317 	ldw	r2,12(r16)
   50b14:	81000217 	ldw	r4,8(r16)
   50b18:	29400054 	ori	r5,r5,1
   50b1c:	19400115 	stw	r5,4(r3)
   50b20:	20800315 	stw	r2,12(r4)
   50b24:	11000215 	stw	r4,8(r2)
   50b28:	9009883a 	mov	r4,r18
   50b2c:	00533500 	call	53350 <__malloc_unlock>
   50b30:	80800204 	addi	r2,r16,8
   50b34:	003f6c06 	br	508e8 <_malloc_r+0xb8>
   50b38:	8085883a 	add	r2,r16,r2
   50b3c:	10c00117 	ldw	r3,4(r2)
   50b40:	9009883a 	mov	r4,r18
   50b44:	18c00054 	ori	r3,r3,1
   50b48:	10c00115 	stw	r3,4(r2)
   50b4c:	00533500 	call	53350 <__malloc_unlock>
   50b50:	80800204 	addi	r2,r16,8
   50b54:	003f6406 	br	508e8 <_malloc_r+0xb8>
   50b58:	9c000217 	ldw	r16,8(r19)
   50b5c:	00bfff04 	movi	r2,-4
   50b60:	85400117 	ldw	r21,4(r16)
   50b64:	a8aa703a 	and	r21,r21,r2
   50b68:	ac400336 	bltu	r21,r17,50b78 <_malloc_r+0x348>
   50b6c:	ac45c83a 	sub	r2,r21,r17
   50b70:	00c003c4 	movi	r3,15
   50b74:	18805316 	blt	r3,r2,50cc4 <_malloc_r+0x494>
   50b78:	d5e01017 	ldw	r23,-32704(gp)
   50b7c:	d0e00217 	ldw	r3,-32760(gp)
   50b80:	00bfffc4 	movi	r2,-1
   50b84:	8579883a 	add	fp,r16,r21
   50b88:	8def883a 	add	r23,r17,r23
   50b8c:	1880d226 	beq	r3,r2,50ed8 <_malloc_r+0x6a8>
   50b90:	bdc403c4 	addi	r23,r23,4111
   50b94:	00bc0004 	movi	r2,-4096
   50b98:	b8ae703a 	and	r23,r23,r2
   50b9c:	9009883a 	mov	r4,r18
   50ba0:	b80b883a 	mov	r5,r23
   50ba4:	00519740 	call	51974 <_sbrk_r>
   50ba8:	1029883a 	mov	r20,r2
   50bac:	00bfffc4 	movi	r2,-1
   50bb0:	a080d126 	beq	r20,r2,50ef8 <_malloc_r+0x6c8>
   50bb4:	a7009f36 	bltu	r20,fp,50e34 <_malloc_r+0x604>
   50bb8:	05800034 	movhi	r22,0
   50bbc:	b586ae04 	addi	r22,r22,6840
   50bc0:	b0800017 	ldw	r2,0(r22)
   50bc4:	b885883a 	add	r2,r23,r2
   50bc8:	b0800015 	stw	r2,0(r22)
   50bcc:	e500cf26 	beq	fp,r20,50f0c <_malloc_r+0x6dc>
   50bd0:	d1200217 	ldw	r4,-32760(gp)
   50bd4:	00ffffc4 	movi	r3,-1
   50bd8:	20c0e026 	beq	r4,r3,50f5c <_malloc_r+0x72c>
   50bdc:	a739c83a 	sub	fp,r20,fp
   50be0:	1705883a 	add	r2,r2,fp
   50be4:	b0800015 	stw	r2,0(r22)
   50be8:	a08001cc 	andi	r2,r20,7
   50bec:	1000a526 	beq	r2,zero,50e84 <_malloc_r+0x654>
   50bf0:	a0a9c83a 	sub	r20,r20,r2
   50bf4:	00c40204 	movi	r3,4104
   50bf8:	a5000204 	addi	r20,r20,8
   50bfc:	1885c83a 	sub	r2,r3,r2
   50c00:	a5c7883a 	add	r3,r20,r23
   50c04:	18c3ffcc 	andi	r3,r3,4095
   50c08:	10efc83a 	sub	r23,r2,r3
   50c0c:	9009883a 	mov	r4,r18
   50c10:	b80b883a 	mov	r5,r23
   50c14:	00519740 	call	51974 <_sbrk_r>
   50c18:	00ffffc4 	movi	r3,-1
   50c1c:	10c0cc26 	beq	r2,r3,50f50 <_malloc_r+0x720>
   50c20:	1505c83a 	sub	r2,r2,r20
   50c24:	b887883a 	add	r3,r23,r2
   50c28:	18c00054 	ori	r3,r3,1
   50c2c:	b0800017 	ldw	r2,0(r22)
   50c30:	9d000215 	stw	r20,8(r19)
   50c34:	a0c00115 	stw	r3,4(r20)
   50c38:	b885883a 	add	r2,r23,r2
   50c3c:	b0800015 	stw	r2,0(r22)
   50c40:	84c00e26 	beq	r16,r19,50c7c <_malloc_r+0x44c>
   50c44:	00c003c4 	movi	r3,15
   50c48:	1d40902e 	bgeu	r3,r21,50e8c <_malloc_r+0x65c>
   50c4c:	ad7ffd04 	addi	r21,r21,-12
   50c50:	013ffe04 	movi	r4,-8
   50c54:	a908703a 	and	r4,r21,r4
   50c58:	810b883a 	add	r5,r16,r4
   50c5c:	01800144 	movi	r6,5
   50c60:	29800115 	stw	r6,4(r5)
   50c64:	29800215 	stw	r6,8(r5)
   50c68:	81400117 	ldw	r5,4(r16)
   50c6c:	2940004c 	andi	r5,r5,1
   50c70:	214ab03a 	or	r5,r4,r5
   50c74:	81400115 	stw	r5,4(r16)
   50c78:	1900ae36 	bltu	r3,r4,50f34 <_malloc_r+0x704>
   50c7c:	d0e00f17 	ldw	r3,-32708(gp)
   50c80:	1880012e 	bgeu	r3,r2,50c88 <_malloc_r+0x458>
   50c84:	d0a00f15 	stw	r2,-32708(gp)
   50c88:	d0e00e17 	ldw	r3,-32712(gp)
   50c8c:	9c000217 	ldw	r16,8(r19)
   50c90:	1880012e 	bgeu	r3,r2,50c98 <_malloc_r+0x468>
   50c94:	d0a00e15 	stw	r2,-32712(gp)
   50c98:	80c00117 	ldw	r3,4(r16)
   50c9c:	00bfff04 	movi	r2,-4
   50ca0:	1886703a 	and	r3,r3,r2
   50ca4:	1c45c83a 	sub	r2,r3,r17
   50ca8:	1c400236 	bltu	r3,r17,50cb4 <_malloc_r+0x484>
   50cac:	00c003c4 	movi	r3,15
   50cb0:	18800416 	blt	r3,r2,50cc4 <_malloc_r+0x494>
   50cb4:	9009883a 	mov	r4,r18
   50cb8:	00533500 	call	53350 <__malloc_unlock>
   50cbc:	0005883a 	mov	r2,zero
   50cc0:	003f0906 	br	508e8 <_malloc_r+0xb8>
   50cc4:	88c00054 	ori	r3,r17,1
   50cc8:	10800054 	ori	r2,r2,1
   50ccc:	80c00115 	stw	r3,4(r16)
   50cd0:	8463883a 	add	r17,r16,r17
   50cd4:	88800115 	stw	r2,4(r17)
   50cd8:	9009883a 	mov	r4,r18
   50cdc:	9c400215 	stw	r17,8(r19)
   50ce0:	00533500 	call	53350 <__malloc_unlock>
   50ce4:	80800204 	addi	r2,r16,8
   50ce8:	003eff06 	br	508e8 <_malloc_r+0xb8>
   50cec:	00800504 	movi	r2,20
   50cf0:	1100492e 	bgeu	r2,r4,50e18 <_malloc_r+0x5e8>
   50cf4:	00801504 	movi	r2,84
   50cf8:	11005c36 	bltu	r2,r4,50e6c <_malloc_r+0x63c>
   50cfc:	8808d33a 	srli	r4,r17,12
   50d00:	21001b84 	addi	r4,r4,110
   50d04:	210b883a 	add	r5,r4,r4
   50d08:	003f1006 	br	5094c <_malloc_r+0x11c>
   50d0c:	1006d27a 	srli	r3,r2,9
   50d10:	01400104 	movi	r5,4
   50d14:	28c0432e 	bgeu	r5,r3,50e24 <_malloc_r+0x5f4>
   50d18:	01400504 	movi	r5,20
   50d1c:	28c07036 	bltu	r5,r3,50ee0 <_malloc_r+0x6b0>
   50d20:	194016c4 	addi	r5,r3,91
   50d24:	294d883a 	add	r6,r5,r5
   50d28:	318d883a 	add	r6,r6,r6
   50d2c:	318d883a 	add	r6,r6,r6
   50d30:	998d883a 	add	r6,r19,r6
   50d34:	30c00217 	ldw	r3,8(r6)
   50d38:	01c00034 	movhi	r7,0
   50d3c:	39c11204 	addi	r7,r7,1096
   50d40:	19805726 	beq	r3,r6,50ea0 <_malloc_r+0x670>
   50d44:	01ffff04 	movi	r7,-4
   50d48:	19400117 	ldw	r5,4(r3)
   50d4c:	29ca703a 	and	r5,r5,r7
   50d50:	1140022e 	bgeu	r2,r5,50d5c <_malloc_r+0x52c>
   50d54:	18c00217 	ldw	r3,8(r3)
   50d58:	30fffb1e 	bne	r6,r3,50d48 <_malloc_r+0x518>
   50d5c:	19400317 	ldw	r5,12(r3)
   50d60:	98800117 	ldw	r2,4(r19)
   50d64:	81400315 	stw	r5,12(r16)
   50d68:	80c00215 	stw	r3,8(r16)
   50d6c:	2c000215 	stw	r16,8(r5)
   50d70:	1c000315 	stw	r16,12(r3)
   50d74:	003f2b06 	br	50a24 <_malloc_r+0x1f4>
   50d78:	8445883a 	add	r2,r16,r17
   50d7c:	8c400054 	ori	r17,r17,1
   50d80:	18800515 	stw	r2,20(r3)
   50d84:	18800415 	stw	r2,16(r3)
   50d88:	29000054 	ori	r4,r5,1
   50d8c:	1147883a 	add	r3,r2,r5
   50d90:	84400115 	stw	r17,4(r16)
   50d94:	11000115 	stw	r4,4(r2)
   50d98:	12400315 	stw	r9,12(r2)
   50d9c:	12400215 	stw	r9,8(r2)
   50da0:	19400015 	stw	r5,0(r3)
   50da4:	9009883a 	mov	r4,r18
   50da8:	00533500 	call	53350 <__malloc_unlock>
   50dac:	80800204 	addi	r2,r16,8
   50db0:	003ecd06 	br	508e8 <_malloc_r+0xb8>
   50db4:	18800117 	ldw	r2,4(r3)
   50db8:	003f1a06 	br	50a24 <_malloc_r+0x1f4>
   50dbc:	5ac00044 	addi	r11,r11,1
   50dc0:	588000cc 	andi	r2,r11,3
   50dc4:	52800204 	addi	r10,r10,8
   50dc8:	103f2e1e 	bne	r2,zero,50a84 <_malloc_r+0x254>
   50dcc:	20c000cc 	andi	r3,r4,3
   50dd0:	60bffe04 	addi	r2,r12,-8
   50dd4:	18006f26 	beq	r3,zero,50f94 <_malloc_r+0x764>
   50dd8:	63000017 	ldw	r12,0(r12)
   50ddc:	213fffc4 	addi	r4,r4,-1
   50de0:	60bffa26 	beq	r12,r2,50dcc <_malloc_r+0x59c>
   50de4:	98800117 	ldw	r2,4(r19)
   50de8:	294b883a 	add	r5,r5,r5
   50dec:	117f5a36 	bltu	r2,r5,50b58 <_malloc_r+0x328>
   50df0:	283f5926 	beq	r5,zero,50b58 <_malloc_r+0x328>
   50df4:	1146703a 	and	r3,r2,r5
   50df8:	18001626 	beq	r3,zero,50e54 <_malloc_r+0x624>
   50dfc:	5809883a 	mov	r4,r11
   50e00:	003f1a06 	br	50a6c <_malloc_r+0x23c>
   50e04:	80800204 	addi	r2,r16,8
   50e08:	84000517 	ldw	r16,20(r16)
   50e0c:	143ea81e 	bne	r2,r16,508b0 <_malloc_r+0x80>
   50e10:	21000084 	addi	r4,r4,2
   50e14:	003ee306 	br	509a4 <_malloc_r+0x174>
   50e18:	210016c4 	addi	r4,r4,91
   50e1c:	210b883a 	add	r5,r4,r4
   50e20:	003eca06 	br	5094c <_malloc_r+0x11c>
   50e24:	100ad1ba 	srli	r5,r2,6
   50e28:	29400e04 	addi	r5,r5,56
   50e2c:	294d883a 	add	r6,r5,r5
   50e30:	003fbd06 	br	50d28 <_malloc_r+0x4f8>
   50e34:	84ff6026 	beq	r16,r19,50bb8 <_malloc_r+0x388>
   50e38:	00800034 	movhi	r2,0
   50e3c:	10811204 	addi	r2,r2,1096
   50e40:	14000217 	ldw	r16,8(r2)
   50e44:	00bfff04 	movi	r2,-4
   50e48:	80c00117 	ldw	r3,4(r16)
   50e4c:	1886703a 	and	r3,r3,r2
   50e50:	003f9406 	br	50ca4 <_malloc_r+0x474>
   50e54:	294b883a 	add	r5,r5,r5
   50e58:	1146703a 	and	r3,r2,r5
   50e5c:	5ac00104 	addi	r11,r11,4
   50e60:	183ffc26 	beq	r3,zero,50e54 <_malloc_r+0x624>
   50e64:	5809883a 	mov	r4,r11
   50e68:	003f0006 	br	50a6c <_malloc_r+0x23c>
   50e6c:	00805504 	movi	r2,340
   50e70:	11001336 	bltu	r2,r4,50ec0 <_malloc_r+0x690>
   50e74:	8808d3fa 	srli	r4,r17,15
   50e78:	21001dc4 	addi	r4,r4,119
   50e7c:	210b883a 	add	r5,r4,r4
   50e80:	003eb206 	br	5094c <_malloc_r+0x11c>
   50e84:	00840004 	movi	r2,4096
   50e88:	003f5d06 	br	50c00 <_malloc_r+0x3d0>
   50e8c:	00800044 	movi	r2,1
   50e90:	a0800115 	stw	r2,4(r20)
   50e94:	a021883a 	mov	r16,r20
   50e98:	0007883a 	mov	r3,zero
   50e9c:	003f8106 	br	50ca4 <_malloc_r+0x474>
   50ea0:	280bd0ba 	srai	r5,r5,2
   50ea4:	01800044 	movi	r6,1
   50ea8:	38800117 	ldw	r2,4(r7)
   50eac:	314c983a 	sll	r6,r6,r5
   50eb0:	180b883a 	mov	r5,r3
   50eb4:	3084b03a 	or	r2,r6,r2
   50eb8:	38800115 	stw	r2,4(r7)
   50ebc:	003fa906 	br	50d64 <_malloc_r+0x534>
   50ec0:	00815504 	movi	r2,1364
   50ec4:	11001836 	bltu	r2,r4,50f28 <_malloc_r+0x6f8>
   50ec8:	8808d4ba 	srli	r4,r17,18
   50ecc:	21001f04 	addi	r4,r4,124
   50ed0:	210b883a 	add	r5,r4,r4
   50ed4:	003e9d06 	br	5094c <_malloc_r+0x11c>
   50ed8:	bdc00404 	addi	r23,r23,16
   50edc:	003f2f06 	br	50b9c <_malloc_r+0x36c>
   50ee0:	01401504 	movi	r5,84
   50ee4:	28c01f36 	bltu	r5,r3,50f64 <_malloc_r+0x734>
   50ee8:	100ad33a 	srli	r5,r2,12
   50eec:	29401b84 	addi	r5,r5,110
   50ef0:	294d883a 	add	r6,r5,r5
   50ef4:	003f8c06 	br	50d28 <_malloc_r+0x4f8>
   50ef8:	9c000217 	ldw	r16,8(r19)
   50efc:	00bfff04 	movi	r2,-4
   50f00:	80c00117 	ldw	r3,4(r16)
   50f04:	1886703a 	and	r3,r3,r2
   50f08:	003f6606 	br	50ca4 <_malloc_r+0x474>
   50f0c:	e0c3ffcc 	andi	r3,fp,4095
   50f10:	183f2f1e 	bne	r3,zero,50bd0 <_malloc_r+0x3a0>
   50f14:	98c00217 	ldw	r3,8(r19)
   50f18:	bd49883a 	add	r4,r23,r21
   50f1c:	21000054 	ori	r4,r4,1
   50f20:	19000115 	stw	r4,4(r3)
   50f24:	003f5506 	br	50c7c <_malloc_r+0x44c>
   50f28:	01403f04 	movi	r5,252
   50f2c:	01001f84 	movi	r4,126
   50f30:	003e8606 	br	5094c <_malloc_r+0x11c>
   50f34:	9009883a 	mov	r4,r18
   50f38:	81400204 	addi	r5,r16,8
   50f3c:	005218c0 	call	5218c <_free_r>
   50f40:	00800034 	movhi	r2,0
   50f44:	1086ae04 	addi	r2,r2,6840
   50f48:	10800017 	ldw	r2,0(r2)
   50f4c:	003f4b06 	br	50c7c <_malloc_r+0x44c>
   50f50:	00c00044 	movi	r3,1
   50f54:	002f883a 	mov	r23,zero
   50f58:	003f3406 	br	50c2c <_malloc_r+0x3fc>
   50f5c:	d5200215 	stw	r20,-32760(gp)
   50f60:	003f2106 	br	50be8 <_malloc_r+0x3b8>
   50f64:	01405504 	movi	r5,340
   50f68:	28c00436 	bltu	r5,r3,50f7c <_malloc_r+0x74c>
   50f6c:	100ad3fa 	srli	r5,r2,15
   50f70:	29401dc4 	addi	r5,r5,119
   50f74:	294d883a 	add	r6,r5,r5
   50f78:	003f6b06 	br	50d28 <_malloc_r+0x4f8>
   50f7c:	01415504 	movi	r5,1364
   50f80:	28c00936 	bltu	r5,r3,50fa8 <_malloc_r+0x778>
   50f84:	100ad4ba 	srli	r5,r2,18
   50f88:	29401f04 	addi	r5,r5,124
   50f8c:	294d883a 	add	r6,r5,r5
   50f90:	003f6506 	br	50d28 <_malloc_r+0x4f8>
   50f94:	98800117 	ldw	r2,4(r19)
   50f98:	0146303a 	nor	r3,zero,r5
   50f9c:	1884703a 	and	r2,r3,r2
   50fa0:	98800115 	stw	r2,4(r19)
   50fa4:	003f9006 	br	50de8 <_malloc_r+0x5b8>
   50fa8:	01803f04 	movi	r6,252
   50fac:	01401f84 	movi	r5,126
   50fb0:	003f5d06 	br	50d28 <_malloc_r+0x4f8>

00050fb4 <memchr>:
   50fb4:	008000c4 	movi	r2,3
   50fb8:	29403fcc 	andi	r5,r5,255
   50fbc:	1180282e 	bgeu	r2,r6,51060 <memchr+0xac>
   50fc0:	2086703a 	and	r3,r4,r2
   50fc4:	1800351e 	bne	r3,zero,5109c <memchr+0xe8>
   50fc8:	2816923a 	slli	r11,r5,8
   50fcc:	2093883a 	add	r9,r4,r2
   50fd0:	22000084 	addi	r8,r4,2
   50fd4:	5957883a 	add	r11,r11,r5
   50fd8:	5816923a 	slli	r11,r11,8
   50fdc:	20c00044 	addi	r3,r4,1
   50fe0:	037fbff4 	movhi	r13,65279
   50fe4:	6b7fbfc4 	addi	r13,r13,-257
   50fe8:	5957883a 	add	r11,r11,r5
   50fec:	5816923a 	slli	r11,r11,8
   50ff0:	03202074 	movhi	r12,32897
   50ff4:	63202004 	addi	r12,r12,-32640
   50ff8:	101d883a 	mov	r14,r2
   50ffc:	5957883a 	add	r11,r11,r5
   51000:	21c00017 	ldw	r7,0(r4)
   51004:	31bfff04 	addi	r6,r6,-4
   51008:	1805883a 	mov	r2,r3
   5100c:	3acef03a 	xor	r7,r7,r11
   51010:	3b55883a 	add	r10,r7,r13
   51014:	01ce303a 	nor	r7,zero,r7
   51018:	51ce703a 	and	r7,r10,r7
   5101c:	3b0e703a 	and	r7,r7,r12
   51020:	38000a26 	beq	r7,zero,5104c <memchr+0x98>
   51024:	21c00003 	ldbu	r7,0(r4)
   51028:	39401e26 	beq	r7,r5,510a4 <memchr+0xf0>
   5102c:	19c00003 	ldbu	r7,0(r3)
   51030:	39401926 	beq	r7,r5,51098 <memchr+0xe4>
   51034:	41c00003 	ldbu	r7,0(r8)
   51038:	4005883a 	mov	r2,r8
   5103c:	39401626 	beq	r7,r5,51098 <memchr+0xe4>
   51040:	49c00003 	ldbu	r7,0(r9)
   51044:	4805883a 	mov	r2,r9
   51048:	39401326 	beq	r7,r5,51098 <memchr+0xe4>
   5104c:	21000104 	addi	r4,r4,4
   51050:	4a400104 	addi	r9,r9,4
   51054:	42000104 	addi	r8,r8,4
   51058:	18c00104 	addi	r3,r3,4
   5105c:	71bfe836 	bltu	r14,r6,51000 <memchr+0x4c>
   51060:	2005883a 	mov	r2,r4
   51064:	30000a26 	beq	r6,zero,51090 <memchr+0xdc>
   51068:	10c00003 	ldbu	r3,0(r2)
   5106c:	19400a26 	beq	r3,r5,51098 <memchr+0xe4>
   51070:	10c00044 	addi	r3,r2,1
   51074:	118d883a 	add	r6,r2,r6
   51078:	00000306 	br	51088 <memchr+0xd4>
   5107c:	11000003 	ldbu	r4,0(r2)
   51080:	18c00044 	addi	r3,r3,1
   51084:	21400426 	beq	r4,r5,51098 <memchr+0xe4>
   51088:	1805883a 	mov	r2,r3
   5108c:	19bffb1e 	bne	r3,r6,5107c <memchr+0xc8>
   51090:	0005883a 	mov	r2,zero
   51094:	f800283a 	ret
   51098:	f800283a 	ret
   5109c:	2005883a 	mov	r2,r4
   510a0:	003ff106 	br	51068 <memchr+0xb4>
   510a4:	2005883a 	mov	r2,r4
   510a8:	f800283a 	ret

000510ac <memcpy>:
   510ac:	defffb04 	addi	sp,sp,-20
   510b0:	dc000015 	stw	r16,0(sp)
   510b4:	dfc00415 	stw	ra,16(sp)
   510b8:	dcc00315 	stw	r19,12(sp)
   510bc:	dc800215 	stw	r18,8(sp)
   510c0:	dc400115 	stw	r17,4(sp)
   510c4:	00c003c4 	movi	r3,15
   510c8:	2021883a 	mov	r16,r4
   510cc:	3005883a 	mov	r2,r6
   510d0:	1980032e 	bgeu	r3,r6,510e0 <memcpy+0x34>
   510d4:	2906b03a 	or	r3,r5,r4
   510d8:	18c000cc 	andi	r3,r3,3
   510dc:	18001026 	beq	r3,zero,51120 <memcpy+0x74>
   510e0:	8007883a 	mov	r3,r16
   510e4:	288f883a 	add	r7,r5,r2
   510e8:	10000526 	beq	r2,zero,51100 <memcpy+0x54>
   510ec:	29800003 	ldbu	r6,0(r5)
   510f0:	18c00044 	addi	r3,r3,1
   510f4:	29400044 	addi	r5,r5,1
   510f8:	19bfffc5 	stb	r6,-1(r3)
   510fc:	29fffb1e 	bne	r5,r7,510ec <memcpy+0x40>
   51100:	8005883a 	mov	r2,r16
   51104:	dfc00417 	ldw	ra,16(sp)
   51108:	dcc00317 	ldw	r19,12(sp)
   5110c:	dc800217 	ldw	r18,8(sp)
   51110:	dc400117 	ldw	r17,4(sp)
   51114:	dc000017 	ldw	r16,0(sp)
   51118:	dec00504 	addi	sp,sp,20
   5111c:	f800283a 	ret
   51120:	32bffc04 	addi	r10,r6,-16
   51124:	5014d13a 	srli	r10,r10,4
   51128:	20800404 	addi	r2,r4,16
   5112c:	2007883a 	mov	r3,r4
   51130:	5008913a 	slli	r4,r10,4
   51134:	280f883a 	mov	r7,r5
   51138:	1105883a 	add	r2,r2,r4
   5113c:	3a000017 	ldw	r8,0(r7)
   51140:	18c00404 	addi	r3,r3,16
   51144:	39c00404 	addi	r7,r7,16
   51148:	1a3ffc15 	stw	r8,-16(r3)
   5114c:	3a3ffd17 	ldw	r8,-12(r7)
   51150:	1a3ffd15 	stw	r8,-12(r3)
   51154:	3a3ffe17 	ldw	r8,-8(r7)
   51158:	1a3ffe15 	stw	r8,-8(r3)
   5115c:	3a3fff17 	ldw	r8,-4(r7)
   51160:	1a3fff15 	stw	r8,-4(r3)
   51164:	18bff51e 	bne	r3,r2,5113c <memcpy+0x90>
   51168:	52800044 	addi	r10,r10,1
   5116c:	5014913a 	slli	r10,r10,4
   51170:	308003cc 	andi	r2,r6,15
   51174:	010000c4 	movi	r4,3
   51178:	8287883a 	add	r3,r16,r10
   5117c:	2a95883a 	add	r10,r5,r10
   51180:	2080182e 	bgeu	r4,r2,511e4 <memcpy+0x138>
   51184:	147fff04 	addi	r17,r2,-4
   51188:	8808d0ba 	srli	r4,r17,2
   5118c:	1a400104 	addi	r9,r3,4
   51190:	180d883a 	mov	r6,r3
   51194:	2105883a 	add	r2,r4,r4
   51198:	1085883a 	add	r2,r2,r2
   5119c:	4893883a 	add	r9,r9,r2
   511a0:	500f883a 	mov	r7,r10
   511a4:	3a000017 	ldw	r8,0(r7)
   511a8:	31800104 	addi	r6,r6,4
   511ac:	39c00104 	addi	r7,r7,4
   511b0:	323fff15 	stw	r8,-4(r6)
   511b4:	327ffb1e 	bne	r6,r9,511a4 <memcpy+0xf8>
   511b8:	20800044 	addi	r2,r4,1
   511bc:	1085883a 	add	r2,r2,r2
   511c0:	1085883a 	add	r2,r2,r2
   511c4:	017fff04 	movi	r5,-4
   511c8:	18a5883a 	add	r18,r3,r2
   511cc:	50a7883a 	add	r19,r10,r2
   511d0:	0052d440 	call	52d44 <__mulsi3>
   511d4:	1445883a 	add	r2,r2,r17
   511d8:	980b883a 	mov	r5,r19
   511dc:	9007883a 	mov	r3,r18
   511e0:	003fc006 	br	510e4 <memcpy+0x38>
   511e4:	500b883a 	mov	r5,r10
   511e8:	003fbe06 	br	510e4 <memcpy+0x38>

000511ec <memmove>:
   511ec:	defffb04 	addi	sp,sp,-20
   511f0:	dc000015 	stw	r16,0(sp)
   511f4:	dfc00415 	stw	ra,16(sp)
   511f8:	dcc00315 	stw	r19,12(sp)
   511fc:	dc800215 	stw	r18,8(sp)
   51200:	dc400115 	stw	r17,4(sp)
   51204:	2021883a 	mov	r16,r4
   51208:	300f883a 	mov	r7,r6
   5120c:	2900122e 	bgeu	r5,r4,51258 <memmove+0x6c>
   51210:	2987883a 	add	r3,r5,r6
   51214:	20c0102e 	bgeu	r4,r3,51258 <memmove+0x6c>
   51218:	218b883a 	add	r5,r4,r6
   5121c:	1989c83a 	sub	r4,r3,r6
   51220:	30000526 	beq	r6,zero,51238 <memmove+0x4c>
   51224:	18ffffc4 	addi	r3,r3,-1
   51228:	18800003 	ldbu	r2,0(r3)
   5122c:	297fffc4 	addi	r5,r5,-1
   51230:	28800005 	stb	r2,0(r5)
   51234:	193ffb1e 	bne	r3,r4,51224 <memmove+0x38>
   51238:	8005883a 	mov	r2,r16
   5123c:	dfc00417 	ldw	ra,16(sp)
   51240:	dcc00317 	ldw	r19,12(sp)
   51244:	dc800217 	ldw	r18,8(sp)
   51248:	dc400117 	ldw	r17,4(sp)
   5124c:	dc000017 	ldw	r16,0(sp)
   51250:	dec00504 	addi	sp,sp,20
   51254:	f800283a 	ret
   51258:	008003c4 	movi	r2,15
   5125c:	1180422e 	bgeu	r2,r6,51368 <memmove+0x17c>
   51260:	2c04b03a 	or	r2,r5,r16
   51264:	108000cc 	andi	r2,r2,3
   51268:	10003f1e 	bne	r2,zero,51368 <memmove+0x17c>
   5126c:	32bffc04 	addi	r10,r6,-16
   51270:	5014d13a 	srli	r10,r10,4
   51274:	81000404 	addi	r4,r16,16
   51278:	8007883a 	mov	r3,r16
   5127c:	5004913a 	slli	r2,r10,4
   51280:	280f883a 	mov	r7,r5
   51284:	2089883a 	add	r4,r4,r2
   51288:	38800017 	ldw	r2,0(r7)
   5128c:	18c00404 	addi	r3,r3,16
   51290:	39c00404 	addi	r7,r7,16
   51294:	18bffc15 	stw	r2,-16(r3)
   51298:	38bffd17 	ldw	r2,-12(r7)
   5129c:	18bffd15 	stw	r2,-12(r3)
   512a0:	38bffe17 	ldw	r2,-8(r7)
   512a4:	18bffe15 	stw	r2,-8(r3)
   512a8:	38bfff17 	ldw	r2,-4(r7)
   512ac:	18bfff15 	stw	r2,-4(r3)
   512b0:	193ff51e 	bne	r3,r4,51288 <memmove+0x9c>
   512b4:	52800044 	addi	r10,r10,1
   512b8:	5014913a 	slli	r10,r10,4
   512bc:	31c003cc 	andi	r7,r6,15
   512c0:	008000c4 	movi	r2,3
   512c4:	8287883a 	add	r3,r16,r10
   512c8:	2a95883a 	add	r10,r5,r10
   512cc:	11c0282e 	bgeu	r2,r7,51370 <memmove+0x184>
   512d0:	3c7fff04 	addi	r17,r7,-4
   512d4:	8808d0ba 	srli	r4,r17,2
   512d8:	1a400104 	addi	r9,r3,4
   512dc:	180d883a 	mov	r6,r3
   512e0:	2105883a 	add	r2,r4,r4
   512e4:	1085883a 	add	r2,r2,r2
   512e8:	4893883a 	add	r9,r9,r2
   512ec:	5005883a 	mov	r2,r10
   512f0:	12000017 	ldw	r8,0(r2)
   512f4:	31800104 	addi	r6,r6,4
   512f8:	10800104 	addi	r2,r2,4
   512fc:	323fff15 	stw	r8,-4(r6)
   51300:	327ffb1e 	bne	r6,r9,512f0 <memmove+0x104>
   51304:	20800044 	addi	r2,r4,1
   51308:	1085883a 	add	r2,r2,r2
   5130c:	1085883a 	add	r2,r2,r2
   51310:	017fff04 	movi	r5,-4
   51314:	18a5883a 	add	r18,r3,r2
   51318:	50a7883a 	add	r19,r10,r2
   5131c:	0052d440 	call	52d44 <__mulsi3>
   51320:	144f883a 	add	r7,r2,r17
   51324:	980b883a 	mov	r5,r19
   51328:	9007883a 	mov	r3,r18
   5132c:	383fc226 	beq	r7,zero,51238 <memmove+0x4c>
   51330:	19cf883a 	add	r7,r3,r7
   51334:	29800003 	ldbu	r6,0(r5)
   51338:	18c00044 	addi	r3,r3,1
   5133c:	29400044 	addi	r5,r5,1
   51340:	19bfffc5 	stb	r6,-1(r3)
   51344:	19fffb1e 	bne	r3,r7,51334 <memmove+0x148>
   51348:	8005883a 	mov	r2,r16
   5134c:	dfc00417 	ldw	ra,16(sp)
   51350:	dcc00317 	ldw	r19,12(sp)
   51354:	dc800217 	ldw	r18,8(sp)
   51358:	dc400117 	ldw	r17,4(sp)
   5135c:	dc000017 	ldw	r16,0(sp)
   51360:	dec00504 	addi	sp,sp,20
   51364:	f800283a 	ret
   51368:	8007883a 	mov	r3,r16
   5136c:	003fef06 	br	5132c <memmove+0x140>
   51370:	500b883a 	mov	r5,r10
   51374:	003fed06 	br	5132c <memmove+0x140>

00051378 <_realloc_r>:
   51378:	defff504 	addi	sp,sp,-44
   5137c:	dd400615 	stw	r21,24(sp)
   51380:	dc800315 	stw	r18,12(sp)
   51384:	dc000115 	stw	r16,4(sp)
   51388:	dfc00a15 	stw	ra,40(sp)
   5138c:	df000915 	stw	fp,36(sp)
   51390:	ddc00815 	stw	r23,32(sp)
   51394:	dd800715 	stw	r22,28(sp)
   51398:	dd000515 	stw	r20,20(sp)
   5139c:	dcc00415 	stw	r19,16(sp)
   513a0:	dc400215 	stw	r17,8(sp)
   513a4:	2821883a 	mov	r16,r5
   513a8:	202b883a 	mov	r21,r4
   513ac:	3025883a 	mov	r18,r6
   513b0:	28009626 	beq	r5,zero,5160c <_realloc_r+0x294>
   513b4:	00533300 	call	53330 <__malloc_lock>
   513b8:	80bfff17 	ldw	r2,-4(r16)
   513bc:	04ffff04 	movi	r19,-4
   513c0:	90c002c4 	addi	r3,r18,11
   513c4:	01000584 	movi	r4,22
   513c8:	85bffe04 	addi	r22,r16,-8
   513cc:	14e6703a 	and	r19,r2,r19
   513d0:	20c0372e 	bgeu	r4,r3,514b0 <_realloc_r+0x138>
   513d4:	047ffe04 	movi	r17,-8
   513d8:	1c62703a 	and	r17,r3,r17
   513dc:	8807883a 	mov	r3,r17
   513e0:	88005a16 	blt	r17,zero,5154c <_realloc_r+0x1d4>
   513e4:	8c805936 	bltu	r17,r18,5154c <_realloc_r+0x1d4>
   513e8:	98c0340e 	bge	r19,r3,514bc <_realloc_r+0x144>
   513ec:	07000034 	movhi	fp,0
   513f0:	e7011204 	addi	fp,fp,1096
   513f4:	e1400217 	ldw	r5,8(fp)
   513f8:	b4c9883a 	add	r4,r22,r19
   513fc:	29009026 	beq	r5,r4,51640 <_realloc_r+0x2c8>
   51400:	21800117 	ldw	r6,4(r4)
   51404:	01ffff84 	movi	r7,-2
   51408:	31ce703a 	and	r7,r6,r7
   5140c:	21cf883a 	add	r7,r4,r7
   51410:	39c00117 	ldw	r7,4(r7)
   51414:	39c0004c 	andi	r7,r7,1
   51418:	38004326 	beq	r7,zero,51528 <_realloc_r+0x1b0>
   5141c:	000d883a 	mov	r6,zero
   51420:	0009883a 	mov	r4,zero
   51424:	1080004c 	andi	r2,r2,1
   51428:	10005a1e 	bne	r2,zero,51594 <_realloc_r+0x21c>
   5142c:	85fffe17 	ldw	r23,-8(r16)
   51430:	00bfff04 	movi	r2,-4
   51434:	b5efc83a 	sub	r23,r22,r23
   51438:	b9c00117 	ldw	r7,4(r23)
   5143c:	388e703a 	and	r7,r7,r2
   51440:	3ccf883a 	add	r7,r7,r19
   51444:	20005226 	beq	r4,zero,51590 <_realloc_r+0x218>
   51448:	31e9883a 	add	r20,r6,r7
   5144c:	2140c726 	beq	r4,r5,5176c <_realloc_r+0x3f4>
   51450:	a0c04f16 	blt	r20,r3,51590 <_realloc_r+0x218>
   51454:	20800317 	ldw	r2,12(r4)
   51458:	20c00217 	ldw	r3,8(r4)
   5145c:	99bfff04 	addi	r6,r19,-4
   51460:	01000904 	movi	r4,36
   51464:	18800315 	stw	r2,12(r3)
   51468:	10c00215 	stw	r3,8(r2)
   5146c:	b8c00217 	ldw	r3,8(r23)
   51470:	b8800317 	ldw	r2,12(r23)
   51474:	bc800204 	addi	r18,r23,8
   51478:	18800315 	stw	r2,12(r3)
   5147c:	10c00215 	stw	r3,8(r2)
   51480:	2180ed36 	bltu	r4,r6,51838 <_realloc_r+0x4c0>
   51484:	008004c4 	movi	r2,19
   51488:	11809b2e 	bgeu	r2,r6,516f8 <_realloc_r+0x380>
   5148c:	80800017 	ldw	r2,0(r16)
   51490:	b8800215 	stw	r2,8(r23)
   51494:	80800117 	ldw	r2,4(r16)
   51498:	b8800315 	stw	r2,12(r23)
   5149c:	008006c4 	movi	r2,27
   514a0:	1180f936 	bltu	r2,r6,51888 <_realloc_r+0x510>
   514a4:	b8800404 	addi	r2,r23,16
   514a8:	80c00204 	addi	r3,r16,8
   514ac:	00009406 	br	51700 <_realloc_r+0x388>
   514b0:	00c00404 	movi	r3,16
   514b4:	1823883a 	mov	r17,r3
   514b8:	003fca06 	br	513e4 <_realloc_r+0x6c>
   514bc:	9829883a 	mov	r20,r19
   514c0:	a447c83a 	sub	r3,r20,r17
   514c4:	010003c4 	movi	r4,15
   514c8:	1080004c 	andi	r2,r2,1
   514cc:	20c02336 	bltu	r4,r3,5155c <_realloc_r+0x1e4>
   514d0:	1504b03a 	or	r2,r2,r20
   514d4:	b0800115 	stw	r2,4(r22)
   514d8:	b52d883a 	add	r22,r22,r20
   514dc:	b0800117 	ldw	r2,4(r22)
   514e0:	10800054 	ori	r2,r2,1
   514e4:	b0800115 	stw	r2,4(r22)
   514e8:	a809883a 	mov	r4,r21
   514ec:	00533500 	call	53350 <__malloc_unlock>
   514f0:	8025883a 	mov	r18,r16
   514f4:	9005883a 	mov	r2,r18
   514f8:	dfc00a17 	ldw	ra,40(sp)
   514fc:	df000917 	ldw	fp,36(sp)
   51500:	ddc00817 	ldw	r23,32(sp)
   51504:	dd800717 	ldw	r22,28(sp)
   51508:	dd400617 	ldw	r21,24(sp)
   5150c:	dd000517 	ldw	r20,20(sp)
   51510:	dcc00417 	ldw	r19,16(sp)
   51514:	dc800317 	ldw	r18,12(sp)
   51518:	dc400217 	ldw	r17,8(sp)
   5151c:	dc000117 	ldw	r16,4(sp)
   51520:	dec00b04 	addi	sp,sp,44
   51524:	f800283a 	ret
   51528:	01ffff04 	movi	r7,-4
   5152c:	31cc703a 	and	r6,r6,r7
   51530:	34e9883a 	add	r20,r6,r19
   51534:	a0ffbb16 	blt	r20,r3,51424 <_realloc_r+0xac>
   51538:	20c00317 	ldw	r3,12(r4)
   5153c:	21000217 	ldw	r4,8(r4)
   51540:	20c00315 	stw	r3,12(r4)
   51544:	19000215 	stw	r4,8(r3)
   51548:	003fdd06 	br	514c0 <_realloc_r+0x148>
   5154c:	00800304 	movi	r2,12
   51550:	a8800015 	stw	r2,0(r21)
   51554:	0025883a 	mov	r18,zero
   51558:	003fe606 	br	514f4 <_realloc_r+0x17c>
   5155c:	1444b03a 	or	r2,r2,r17
   51560:	b0800115 	stw	r2,4(r22)
   51564:	b44b883a 	add	r5,r22,r17
   51568:	18800054 	ori	r2,r3,1
   5156c:	28800115 	stw	r2,4(r5)
   51570:	28c7883a 	add	r3,r5,r3
   51574:	18800117 	ldw	r2,4(r3)
   51578:	a809883a 	mov	r4,r21
   5157c:	29400204 	addi	r5,r5,8
   51580:	10800054 	ori	r2,r2,1
   51584:	18800115 	stw	r2,4(r3)
   51588:	005218c0 	call	5218c <_free_r>
   5158c:	003fd606 	br	514e8 <_realloc_r+0x170>
   51590:	38c0330e 	bge	r7,r3,51660 <_realloc_r+0x2e8>
   51594:	900b883a 	mov	r5,r18
   51598:	a809883a 	mov	r4,r21
   5159c:	00508300 	call	50830 <_malloc_r>
   515a0:	1025883a 	mov	r18,r2
   515a4:	10001626 	beq	r2,zero,51600 <_realloc_r+0x288>
   515a8:	80bfff17 	ldw	r2,-4(r16)
   515ac:	00ffff84 	movi	r3,-2
   515b0:	913ffe04 	addi	r4,r18,-8
   515b4:	10c6703a 	and	r3,r2,r3
   515b8:	b0c7883a 	add	r3,r22,r3
   515bc:	20c09926 	beq	r4,r3,51824 <_realloc_r+0x4ac>
   515c0:	99bfff04 	addi	r6,r19,-4
   515c4:	00800904 	movi	r2,36
   515c8:	11806436 	bltu	r2,r6,5175c <_realloc_r+0x3e4>
   515cc:	00c004c4 	movi	r3,19
   515d0:	19804036 	bltu	r3,r6,516d4 <_realloc_r+0x35c>
   515d4:	9005883a 	mov	r2,r18
   515d8:	8007883a 	mov	r3,r16
   515dc:	19000017 	ldw	r4,0(r3)
   515e0:	11000015 	stw	r4,0(r2)
   515e4:	19000117 	ldw	r4,4(r3)
   515e8:	11000115 	stw	r4,4(r2)
   515ec:	18c00217 	ldw	r3,8(r3)
   515f0:	10c00215 	stw	r3,8(r2)
   515f4:	a809883a 	mov	r4,r21
   515f8:	800b883a 	mov	r5,r16
   515fc:	005218c0 	call	5218c <_free_r>
   51600:	a809883a 	mov	r4,r21
   51604:	00533500 	call	53350 <__malloc_unlock>
   51608:	003fba06 	br	514f4 <_realloc_r+0x17c>
   5160c:	300b883a 	mov	r5,r6
   51610:	dfc00a17 	ldw	ra,40(sp)
   51614:	df000917 	ldw	fp,36(sp)
   51618:	ddc00817 	ldw	r23,32(sp)
   5161c:	dd800717 	ldw	r22,28(sp)
   51620:	dd400617 	ldw	r21,24(sp)
   51624:	dd000517 	ldw	r20,20(sp)
   51628:	dcc00417 	ldw	r19,16(sp)
   5162c:	dc800317 	ldw	r18,12(sp)
   51630:	dc400217 	ldw	r17,8(sp)
   51634:	dc000117 	ldw	r16,4(sp)
   51638:	dec00b04 	addi	sp,sp,44
   5163c:	00508301 	jmpi	50830 <_malloc_r>
   51640:	29800117 	ldw	r6,4(r5)
   51644:	013fff04 	movi	r4,-4
   51648:	89c00404 	addi	r7,r17,16
   5164c:	310c703a 	and	r6,r6,r4
   51650:	34c9883a 	add	r4,r6,r19
   51654:	21c0340e 	bge	r4,r7,51728 <_realloc_r+0x3b0>
   51658:	2809883a 	mov	r4,r5
   5165c:	003f7106 	br	51424 <_realloc_r+0xac>
   51660:	b8800317 	ldw	r2,12(r23)
   51664:	b8c00217 	ldw	r3,8(r23)
   51668:	99bfff04 	addi	r6,r19,-4
   5166c:	01000904 	movi	r4,36
   51670:	18800315 	stw	r2,12(r3)
   51674:	10c00215 	stw	r3,8(r2)
   51678:	bc800204 	addi	r18,r23,8
   5167c:	21807836 	bltu	r4,r6,51860 <_realloc_r+0x4e8>
   51680:	008004c4 	movi	r2,19
   51684:	1180732e 	bgeu	r2,r6,51854 <_realloc_r+0x4dc>
   51688:	80800017 	ldw	r2,0(r16)
   5168c:	b8800215 	stw	r2,8(r23)
   51690:	80800117 	ldw	r2,4(r16)
   51694:	b8800315 	stw	r2,12(r23)
   51698:	008006c4 	movi	r2,27
   5169c:	11808936 	bltu	r2,r6,518c4 <_realloc_r+0x54c>
   516a0:	b8800404 	addi	r2,r23,16
   516a4:	80c00204 	addi	r3,r16,8
   516a8:	19000017 	ldw	r4,0(r3)
   516ac:	9021883a 	mov	r16,r18
   516b0:	3829883a 	mov	r20,r7
   516b4:	11000015 	stw	r4,0(r2)
   516b8:	19000117 	ldw	r4,4(r3)
   516bc:	b82d883a 	mov	r22,r23
   516c0:	11000115 	stw	r4,4(r2)
   516c4:	18c00217 	ldw	r3,8(r3)
   516c8:	10c00215 	stw	r3,8(r2)
   516cc:	b8800117 	ldw	r2,4(r23)
   516d0:	003f7b06 	br	514c0 <_realloc_r+0x148>
   516d4:	80c00017 	ldw	r3,0(r16)
   516d8:	90c00015 	stw	r3,0(r18)
   516dc:	80c00117 	ldw	r3,4(r16)
   516e0:	90c00115 	stw	r3,4(r18)
   516e4:	00c006c4 	movi	r3,27
   516e8:	19804636 	bltu	r3,r6,51804 <_realloc_r+0x48c>
   516ec:	90800204 	addi	r2,r18,8
   516f0:	80c00204 	addi	r3,r16,8
   516f4:	003fb906 	br	515dc <_realloc_r+0x264>
   516f8:	9005883a 	mov	r2,r18
   516fc:	8007883a 	mov	r3,r16
   51700:	19000017 	ldw	r4,0(r3)
   51704:	9021883a 	mov	r16,r18
   51708:	b82d883a 	mov	r22,r23
   5170c:	11000015 	stw	r4,0(r2)
   51710:	19000117 	ldw	r4,4(r3)
   51714:	11000115 	stw	r4,4(r2)
   51718:	18c00217 	ldw	r3,8(r3)
   5171c:	10c00215 	stw	r3,8(r2)
   51720:	b8800117 	ldw	r2,4(r23)
   51724:	003f6606 	br	514c0 <_realloc_r+0x148>
   51728:	2445c83a 	sub	r2,r4,r17
   5172c:	b46d883a 	add	r22,r22,r17
   51730:	10800054 	ori	r2,r2,1
   51734:	b0800115 	stw	r2,4(r22)
   51738:	80bfff17 	ldw	r2,-4(r16)
   5173c:	a809883a 	mov	r4,r21
   51740:	e5800215 	stw	r22,8(fp)
   51744:	1080004c 	andi	r2,r2,1
   51748:	88a2b03a 	or	r17,r17,r2
   5174c:	847fff15 	stw	r17,-4(r16)
   51750:	00533500 	call	53350 <__malloc_unlock>
   51754:	8025883a 	mov	r18,r16
   51758:	003f6606 	br	514f4 <_realloc_r+0x17c>
   5175c:	9009883a 	mov	r4,r18
   51760:	800b883a 	mov	r5,r16
   51764:	00511ec0 	call	511ec <memmove>
   51768:	003fa206 	br	515f4 <_realloc_r+0x27c>
   5176c:	88800404 	addi	r2,r17,16
   51770:	a0bf8716 	blt	r20,r2,51590 <_realloc_r+0x218>
   51774:	b8800317 	ldw	r2,12(r23)
   51778:	b8c00217 	ldw	r3,8(r23)
   5177c:	99bfff04 	addi	r6,r19,-4
   51780:	01000904 	movi	r4,36
   51784:	18800315 	stw	r2,12(r3)
   51788:	10c00215 	stw	r3,8(r2)
   5178c:	bc800204 	addi	r18,r23,8
   51790:	21806536 	bltu	r4,r6,51928 <_realloc_r+0x5b0>
   51794:	008004c4 	movi	r2,19
   51798:	1180592e 	bgeu	r2,r6,51900 <_realloc_r+0x588>
   5179c:	80800017 	ldw	r2,0(r16)
   517a0:	b8800215 	stw	r2,8(r23)
   517a4:	80800117 	ldw	r2,4(r16)
   517a8:	b8800315 	stw	r2,12(r23)
   517ac:	008006c4 	movi	r2,27
   517b0:	11806136 	bltu	r2,r6,51938 <_realloc_r+0x5c0>
   517b4:	b8800404 	addi	r2,r23,16
   517b8:	80c00204 	addi	r3,r16,8
   517bc:	19000017 	ldw	r4,0(r3)
   517c0:	11000015 	stw	r4,0(r2)
   517c4:	19000117 	ldw	r4,4(r3)
   517c8:	11000115 	stw	r4,4(r2)
   517cc:	18c00217 	ldw	r3,8(r3)
   517d0:	10c00215 	stw	r3,8(r2)
   517d4:	a447c83a 	sub	r3,r20,r17
   517d8:	bc45883a 	add	r2,r23,r17
   517dc:	18c00054 	ori	r3,r3,1
   517e0:	10c00115 	stw	r3,4(r2)
   517e4:	b8c00117 	ldw	r3,4(r23)
   517e8:	e0800215 	stw	r2,8(fp)
   517ec:	a809883a 	mov	r4,r21
   517f0:	1880004c 	andi	r2,r3,1
   517f4:	88a2b03a 	or	r17,r17,r2
   517f8:	bc400115 	stw	r17,4(r23)
   517fc:	00533500 	call	53350 <__malloc_unlock>
   51800:	003f3c06 	br	514f4 <_realloc_r+0x17c>
   51804:	80c00217 	ldw	r3,8(r16)
   51808:	90c00215 	stw	r3,8(r18)
   5180c:	80c00317 	ldw	r3,12(r16)
   51810:	90c00315 	stw	r3,12(r18)
   51814:	30802426 	beq	r6,r2,518a8 <_realloc_r+0x530>
   51818:	90800404 	addi	r2,r18,16
   5181c:	80c00404 	addi	r3,r16,16
   51820:	003f6e06 	br	515dc <_realloc_r+0x264>
   51824:	953fff17 	ldw	r20,-4(r18)
   51828:	00ffff04 	movi	r3,-4
   5182c:	a0e8703a 	and	r20,r20,r3
   51830:	a4e9883a 	add	r20,r20,r19
   51834:	003f2206 	br	514c0 <_realloc_r+0x148>
   51838:	800b883a 	mov	r5,r16
   5183c:	9009883a 	mov	r4,r18
   51840:	00511ec0 	call	511ec <memmove>
   51844:	9021883a 	mov	r16,r18
   51848:	b8800117 	ldw	r2,4(r23)
   5184c:	b82d883a 	mov	r22,r23
   51850:	003f1b06 	br	514c0 <_realloc_r+0x148>
   51854:	9005883a 	mov	r2,r18
   51858:	8007883a 	mov	r3,r16
   5185c:	003f9206 	br	516a8 <_realloc_r+0x330>
   51860:	800b883a 	mov	r5,r16
   51864:	9009883a 	mov	r4,r18
   51868:	d9c00015 	stw	r7,0(sp)
   5186c:	00511ec0 	call	511ec <memmove>
   51870:	d9c00017 	ldw	r7,0(sp)
   51874:	9021883a 	mov	r16,r18
   51878:	b8800117 	ldw	r2,4(r23)
   5187c:	3829883a 	mov	r20,r7
   51880:	b82d883a 	mov	r22,r23
   51884:	003f0e06 	br	514c0 <_realloc_r+0x148>
   51888:	80800217 	ldw	r2,8(r16)
   5188c:	b8800415 	stw	r2,16(r23)
   51890:	80800317 	ldw	r2,12(r16)
   51894:	b8800515 	stw	r2,20(r23)
   51898:	31001226 	beq	r6,r4,518e4 <_realloc_r+0x56c>
   5189c:	b8800604 	addi	r2,r23,24
   518a0:	80c00404 	addi	r3,r16,16
   518a4:	003f9606 	br	51700 <_realloc_r+0x388>
   518a8:	81000417 	ldw	r4,16(r16)
   518ac:	90800604 	addi	r2,r18,24
   518b0:	80c00604 	addi	r3,r16,24
   518b4:	91000415 	stw	r4,16(r18)
   518b8:	81000517 	ldw	r4,20(r16)
   518bc:	91000515 	stw	r4,20(r18)
   518c0:	003f4606 	br	515dc <_realloc_r+0x264>
   518c4:	80800217 	ldw	r2,8(r16)
   518c8:	b8800415 	stw	r2,16(r23)
   518cc:	80800317 	ldw	r2,12(r16)
   518d0:	b8800515 	stw	r2,20(r23)
   518d4:	31000d26 	beq	r6,r4,5190c <_realloc_r+0x594>
   518d8:	b8800604 	addi	r2,r23,24
   518dc:	80c00404 	addi	r3,r16,16
   518e0:	003f7106 	br	516a8 <_realloc_r+0x330>
   518e4:	81000417 	ldw	r4,16(r16)
   518e8:	b8800804 	addi	r2,r23,32
   518ec:	80c00604 	addi	r3,r16,24
   518f0:	b9000615 	stw	r4,24(r23)
   518f4:	81000517 	ldw	r4,20(r16)
   518f8:	b9000715 	stw	r4,28(r23)
   518fc:	003f8006 	br	51700 <_realloc_r+0x388>
   51900:	9005883a 	mov	r2,r18
   51904:	8007883a 	mov	r3,r16
   51908:	003fac06 	br	517bc <_realloc_r+0x444>
   5190c:	81000417 	ldw	r4,16(r16)
   51910:	b8800804 	addi	r2,r23,32
   51914:	80c00604 	addi	r3,r16,24
   51918:	b9000615 	stw	r4,24(r23)
   5191c:	81000517 	ldw	r4,20(r16)
   51920:	b9000715 	stw	r4,28(r23)
   51924:	003f6006 	br	516a8 <_realloc_r+0x330>
   51928:	9009883a 	mov	r4,r18
   5192c:	800b883a 	mov	r5,r16
   51930:	00511ec0 	call	511ec <memmove>
   51934:	003fa706 	br	517d4 <_realloc_r+0x45c>
   51938:	80800217 	ldw	r2,8(r16)
   5193c:	b8800415 	stw	r2,16(r23)
   51940:	80800317 	ldw	r2,12(r16)
   51944:	b8800515 	stw	r2,20(r23)
   51948:	31000326 	beq	r6,r4,51958 <_realloc_r+0x5e0>
   5194c:	b8800604 	addi	r2,r23,24
   51950:	80c00404 	addi	r3,r16,16
   51954:	003f9906 	br	517bc <_realloc_r+0x444>
   51958:	81000417 	ldw	r4,16(r16)
   5195c:	b8800804 	addi	r2,r23,32
   51960:	80c00604 	addi	r3,r16,24
   51964:	b9000615 	stw	r4,24(r23)
   51968:	81000517 	ldw	r4,20(r16)
   5196c:	b9000715 	stw	r4,28(r23)
   51970:	003f9206 	br	517bc <_realloc_r+0x444>

00051974 <_sbrk_r>:
   51974:	defffd04 	addi	sp,sp,-12
   51978:	dc400115 	stw	r17,4(sp)
   5197c:	dc000015 	stw	r16,0(sp)
   51980:	2023883a 	mov	r17,r4
   51984:	04000034 	movhi	r16,0
   51988:	8406a704 	addi	r16,r16,6812
   5198c:	2809883a 	mov	r4,r5
   51990:	dfc00215 	stw	ra,8(sp)
   51994:	80000015 	stw	zero,0(r16)
   51998:	00535340 	call	53534 <sbrk>
   5199c:	00ffffc4 	movi	r3,-1
   519a0:	10c00526 	beq	r2,r3,519b8 <_sbrk_r+0x44>
   519a4:	dfc00217 	ldw	ra,8(sp)
   519a8:	dc400117 	ldw	r17,4(sp)
   519ac:	dc000017 	ldw	r16,0(sp)
   519b0:	dec00304 	addi	sp,sp,12
   519b4:	f800283a 	ret
   519b8:	80c00017 	ldw	r3,0(r16)
   519bc:	183ff926 	beq	r3,zero,519a4 <_sbrk_r+0x30>
   519c0:	88c00015 	stw	r3,0(r17)
   519c4:	dfc00217 	ldw	ra,8(sp)
   519c8:	dc400117 	ldw	r17,4(sp)
   519cc:	dc000017 	ldw	r16,0(sp)
   519d0:	dec00304 	addi	sp,sp,12
   519d4:	f800283a 	ret

000519d8 <__swsetup_r>:
   519d8:	00800034 	movhi	r2,0
   519dc:	10869704 	addi	r2,r2,6748
   519e0:	10800017 	ldw	r2,0(r2)
   519e4:	defffd04 	addi	sp,sp,-12
   519e8:	dc400115 	stw	r17,4(sp)
   519ec:	dc000015 	stw	r16,0(sp)
   519f0:	dfc00215 	stw	ra,8(sp)
   519f4:	2023883a 	mov	r17,r4
   519f8:	2821883a 	mov	r16,r5
   519fc:	10000226 	beq	r2,zero,51a08 <__swsetup_r+0x30>
   51a00:	10c00e17 	ldw	r3,56(r2)
   51a04:	18003d26 	beq	r3,zero,51afc <__swsetup_r+0x124>
   51a08:	8080030b 	ldhu	r2,12(r16)
   51a0c:	10c0020c 	andi	r3,r2,8
   51a10:	18ffffcc 	andi	r3,r3,65535
   51a14:	18e0001c 	xori	r3,r3,32768
   51a18:	18e00004 	addi	r3,r3,-32768
   51a1c:	18001226 	beq	r3,zero,51a68 <__swsetup_r+0x90>
   51a20:	80c00417 	ldw	r3,16(r16)
   51a24:	18001f26 	beq	r3,zero,51aa4 <__swsetup_r+0xcc>
   51a28:	1100004c 	andi	r4,r2,1
   51a2c:	2000261e 	bne	r4,zero,51ac8 <__swsetup_r+0xf0>
   51a30:	1080008c 	andi	r2,r2,2
   51a34:	10bfffcc 	andi	r2,r2,65535
   51a38:	10a0001c 	xori	r2,r2,32768
   51a3c:	10a00004 	addi	r2,r2,-32768
   51a40:	1000311e 	bne	r2,zero,51b08 <__swsetup_r+0x130>
   51a44:	80800517 	ldw	r2,20(r16)
   51a48:	80800215 	stw	r2,8(r16)
   51a4c:	18002326 	beq	r3,zero,51adc <__swsetup_r+0x104>
   51a50:	0005883a 	mov	r2,zero
   51a54:	dfc00217 	ldw	ra,8(sp)
   51a58:	dc400117 	ldw	r17,4(sp)
   51a5c:	dc000017 	ldw	r16,0(sp)
   51a60:	dec00304 	addi	sp,sp,12
   51a64:	f800283a 	ret
   51a68:	10c0040c 	andi	r3,r2,16
   51a6c:	18ffffcc 	andi	r3,r3,65535
   51a70:	18e0001c 	xori	r3,r3,32768
   51a74:	18e00004 	addi	r3,r3,-32768
   51a78:	18001e26 	beq	r3,zero,51af4 <__swsetup_r+0x11c>
   51a7c:	10c0010c 	andi	r3,r2,4
   51a80:	18ffffcc 	andi	r3,r3,65535
   51a84:	18e0001c 	xori	r3,r3,32768
   51a88:	18e00004 	addi	r3,r3,-32768
   51a8c:	1800211e 	bne	r3,zero,51b14 <__swsetup_r+0x13c>
   51a90:	80c00417 	ldw	r3,16(r16)
   51a94:	11400214 	ori	r5,r2,8
   51a98:	8140030d 	sth	r5,12(r16)
   51a9c:	2805883a 	mov	r2,r5
   51aa0:	183fe11e 	bne	r3,zero,51a28 <__swsetup_r+0x50>
   51aa4:	1140a00c 	andi	r5,r2,640
   51aa8:	01008004 	movi	r4,512
   51aac:	293fde26 	beq	r5,r4,51a28 <__swsetup_r+0x50>
   51ab0:	8809883a 	mov	r4,r17
   51ab4:	800b883a 	mov	r5,r16
   51ab8:	00525bc0 	call	525bc <__smakebuf_r>
   51abc:	8080030b 	ldhu	r2,12(r16)
   51ac0:	80c00417 	ldw	r3,16(r16)
   51ac4:	003fd806 	br	51a28 <__swsetup_r+0x50>
   51ac8:	80800517 	ldw	r2,20(r16)
   51acc:	80000215 	stw	zero,8(r16)
   51ad0:	0085c83a 	sub	r2,zero,r2
   51ad4:	80800615 	stw	r2,24(r16)
   51ad8:	183fdd1e 	bne	r3,zero,51a50 <__swsetup_r+0x78>
   51adc:	8080030b 	ldhu	r2,12(r16)
   51ae0:	1080200c 	andi	r2,r2,128
   51ae4:	10bfffcc 	andi	r2,r2,65535
   51ae8:	10a0001c 	xori	r2,r2,32768
   51aec:	10a00004 	addi	r2,r2,-32768
   51af0:	103fd826 	beq	r2,zero,51a54 <__swsetup_r+0x7c>
   51af4:	00bfffc4 	movi	r2,-1
   51af8:	003fd606 	br	51a54 <__swsetup_r+0x7c>
   51afc:	1009883a 	mov	r4,r2
   51b00:	0051e080 	call	51e08 <__sinit>
   51b04:	003fc006 	br	51a08 <__swsetup_r+0x30>
   51b08:	0005883a 	mov	r2,zero
   51b0c:	80800215 	stw	r2,8(r16)
   51b10:	003fce06 	br	51a4c <__swsetup_r+0x74>
   51b14:	81400c17 	ldw	r5,48(r16)
   51b18:	28000626 	beq	r5,zero,51b34 <__swsetup_r+0x15c>
   51b1c:	80c01004 	addi	r3,r16,64
   51b20:	28c00326 	beq	r5,r3,51b30 <__swsetup_r+0x158>
   51b24:	8809883a 	mov	r4,r17
   51b28:	005218c0 	call	5218c <_free_r>
   51b2c:	8080030b 	ldhu	r2,12(r16)
   51b30:	80000c15 	stw	zero,48(r16)
   51b34:	80c00417 	ldw	r3,16(r16)
   51b38:	013ff6c4 	movi	r4,-37
   51b3c:	2084703a 	and	r2,r4,r2
   51b40:	80000115 	stw	zero,4(r16)
   51b44:	80c00015 	stw	r3,0(r16)
   51b48:	003fd206 	br	51a94 <__swsetup_r+0xbc>

00051b4c <_fflush_r>:
   51b4c:	defffb04 	addi	sp,sp,-20
   51b50:	dcc00315 	stw	r19,12(sp)
   51b54:	dc400115 	stw	r17,4(sp)
   51b58:	dfc00415 	stw	ra,16(sp)
   51b5c:	dc800215 	stw	r18,8(sp)
   51b60:	dc000015 	stw	r16,0(sp)
   51b64:	2027883a 	mov	r19,r4
   51b68:	2823883a 	mov	r17,r5
   51b6c:	20000226 	beq	r4,zero,51b78 <_fflush_r+0x2c>
   51b70:	20800e17 	ldw	r2,56(r4)
   51b74:	10005726 	beq	r2,zero,51cd4 <_fflush_r+0x188>
   51b78:	8880030b 	ldhu	r2,12(r17)
   51b7c:	10c0020c 	andi	r3,r2,8
   51b80:	18ffffcc 	andi	r3,r3,65535
   51b84:	18e0001c 	xori	r3,r3,32768
   51b88:	18e00004 	addi	r3,r3,-32768
   51b8c:	1800311e 	bne	r3,zero,51c54 <_fflush_r+0x108>
   51b90:	89000117 	ldw	r4,4(r17)
   51b94:	10c20014 	ori	r3,r2,2048
   51b98:	88c0030d 	sth	r3,12(r17)
   51b9c:	180b883a 	mov	r5,r3
   51ba0:	0100520e 	bge	zero,r4,51cec <_fflush_r+0x1a0>
   51ba4:	88c00a17 	ldw	r3,40(r17)
   51ba8:	18002226 	beq	r3,zero,51c34 <_fflush_r+0xe8>
   51bac:	1084000c 	andi	r2,r2,4096
   51bb0:	10bfffcc 	andi	r2,r2,65535
   51bb4:	10a0001c 	xori	r2,r2,32768
   51bb8:	10a00004 	addi	r2,r2,-32768
   51bbc:	10004e26 	beq	r2,zero,51cf8 <_fflush_r+0x1ac>
   51bc0:	8c001417 	ldw	r16,80(r17)
   51bc4:	2940010c 	andi	r5,r5,4
   51bc8:	297fffcc 	andi	r5,r5,65535
   51bcc:	2960001c 	xori	r5,r5,32768
   51bd0:	29600004 	addi	r5,r5,-32768
   51bd4:	28000626 	beq	r5,zero,51bf0 <_fflush_r+0xa4>
   51bd8:	89000117 	ldw	r4,4(r17)
   51bdc:	88800c17 	ldw	r2,48(r17)
   51be0:	8121c83a 	sub	r16,r16,r4
   51be4:	10000226 	beq	r2,zero,51bf0 <_fflush_r+0xa4>
   51be8:	88800f17 	ldw	r2,60(r17)
   51bec:	80a1c83a 	sub	r16,r16,r2
   51bf0:	89400717 	ldw	r5,28(r17)
   51bf4:	9809883a 	mov	r4,r19
   51bf8:	800d883a 	mov	r6,r16
   51bfc:	000f883a 	mov	r7,zero
   51c00:	183ee83a 	callr	r3
   51c04:	8080281e 	bne	r16,r2,51ca8 <_fflush_r+0x15c>
   51c08:	8880030b 	ldhu	r2,12(r17)
   51c0c:	88c00417 	ldw	r3,16(r17)
   51c10:	88000115 	stw	zero,4(r17)
   51c14:	113dffcc 	andi	r4,r2,63487
   51c18:	1084000c 	andi	r2,r2,4096
   51c1c:	10bfffcc 	andi	r2,r2,65535
   51c20:	10a0001c 	xori	r2,r2,32768
   51c24:	8900030d 	sth	r4,12(r17)
   51c28:	88c00015 	stw	r3,0(r17)
   51c2c:	10a00004 	addi	r2,r2,-32768
   51c30:	10002c1e 	bne	r2,zero,51ce4 <_fflush_r+0x198>
   51c34:	0005883a 	mov	r2,zero
   51c38:	dfc00417 	ldw	ra,16(sp)
   51c3c:	dcc00317 	ldw	r19,12(sp)
   51c40:	dc800217 	ldw	r18,8(sp)
   51c44:	dc400117 	ldw	r17,4(sp)
   51c48:	dc000017 	ldw	r16,0(sp)
   51c4c:	dec00504 	addi	sp,sp,20
   51c50:	f800283a 	ret
   51c54:	8c800417 	ldw	r18,16(r17)
   51c58:	903ff626 	beq	r18,zero,51c34 <_fflush_r+0xe8>
   51c5c:	8c000017 	ldw	r16,0(r17)
   51c60:	108000cc 	andi	r2,r2,3
   51c64:	8c800015 	stw	r18,0(r17)
   51c68:	84a1c83a 	sub	r16,r16,r18
   51c6c:	10001b1e 	bne	r2,zero,51cdc <_fflush_r+0x190>
   51c70:	88800517 	ldw	r2,20(r17)
   51c74:	88800215 	stw	r2,8(r17)
   51c78:	04000316 	blt	zero,r16,51c88 <_fflush_r+0x13c>
   51c7c:	003fed06 	br	51c34 <_fflush_r+0xe8>
   51c80:	90a5883a 	add	r18,r18,r2
   51c84:	043feb0e 	bge	zero,r16,51c34 <_fflush_r+0xe8>
   51c88:	88800917 	ldw	r2,36(r17)
   51c8c:	89400717 	ldw	r5,28(r17)
   51c90:	800f883a 	mov	r7,r16
   51c94:	900d883a 	mov	r6,r18
   51c98:	9809883a 	mov	r4,r19
   51c9c:	103ee83a 	callr	r2
   51ca0:	80a1c83a 	sub	r16,r16,r2
   51ca4:	00bff616 	blt	zero,r2,51c80 <_fflush_r+0x134>
   51ca8:	88c0030b 	ldhu	r3,12(r17)
   51cac:	00bfffc4 	movi	r2,-1
   51cb0:	18c01014 	ori	r3,r3,64
   51cb4:	88c0030d 	sth	r3,12(r17)
   51cb8:	dfc00417 	ldw	ra,16(sp)
   51cbc:	dcc00317 	ldw	r19,12(sp)
   51cc0:	dc800217 	ldw	r18,8(sp)
   51cc4:	dc400117 	ldw	r17,4(sp)
   51cc8:	dc000017 	ldw	r16,0(sp)
   51ccc:	dec00504 	addi	sp,sp,20
   51cd0:	f800283a 	ret
   51cd4:	0051e080 	call	51e08 <__sinit>
   51cd8:	003fa706 	br	51b78 <_fflush_r+0x2c>
   51cdc:	0005883a 	mov	r2,zero
   51ce0:	003fe406 	br	51c74 <_fflush_r+0x128>
   51ce4:	8c001415 	stw	r16,80(r17)
   51ce8:	003fd206 	br	51c34 <_fflush_r+0xe8>
   51cec:	88c00f17 	ldw	r3,60(r17)
   51cf0:	00ffac16 	blt	zero,r3,51ba4 <_fflush_r+0x58>
   51cf4:	003fcf06 	br	51c34 <_fflush_r+0xe8>
   51cf8:	89400717 	ldw	r5,28(r17)
   51cfc:	9809883a 	mov	r4,r19
   51d00:	000d883a 	mov	r6,zero
   51d04:	01c00044 	movi	r7,1
   51d08:	183ee83a 	callr	r3
   51d0c:	1021883a 	mov	r16,r2
   51d10:	00bfffc4 	movi	r2,-1
   51d14:	80800326 	beq	r16,r2,51d24 <_fflush_r+0x1d8>
   51d18:	8940030b 	ldhu	r5,12(r17)
   51d1c:	88c00a17 	ldw	r3,40(r17)
   51d20:	003fa806 	br	51bc4 <_fflush_r+0x78>
   51d24:	98c00017 	ldw	r3,0(r19)
   51d28:	00800744 	movi	r2,29
   51d2c:	18bfde1e 	bne	r3,r2,51ca8 <_fflush_r+0x15c>
   51d30:	003fc006 	br	51c34 <_fflush_r+0xe8>

00051d34 <fflush>:
   51d34:	200b883a 	mov	r5,r4
   51d38:	20000426 	beq	r4,zero,51d4c <fflush+0x18>
   51d3c:	00800034 	movhi	r2,0
   51d40:	10869704 	addi	r2,r2,6748
   51d44:	11000017 	ldw	r4,0(r2)
   51d48:	0051b4c1 	jmpi	51b4c <_fflush_r>
   51d4c:	00800034 	movhi	r2,0
   51d50:	10869604 	addi	r2,r2,6744
   51d54:	11000017 	ldw	r4,0(r2)
   51d58:	01400174 	movhi	r5,5
   51d5c:	2946d304 	addi	r5,r5,6988
   51d60:	00525041 	jmpi	52504 <_fwalk_reent>

00051d64 <__fp_lock>:
   51d64:	0005883a 	mov	r2,zero
   51d68:	f800283a 	ret

00051d6c <__fp_unlock>:
   51d6c:	0005883a 	mov	r2,zero
   51d70:	f800283a 	ret

00051d74 <_cleanup_r>:
   51d74:	01400174 	movhi	r5,5
   51d78:	294ae304 	addi	r5,r5,11148
   51d7c:	005245c1 	jmpi	5245c <_fwalk>

00051d80 <__sfmoreglue>:
   51d80:	defffc04 	addi	sp,sp,-16
   51d84:	dc800215 	stw	r18,8(sp)
   51d88:	2825883a 	mov	r18,r5
   51d8c:	dc000015 	stw	r16,0(sp)
   51d90:	01401704 	movi	r5,92
   51d94:	2021883a 	mov	r16,r4
   51d98:	9009883a 	mov	r4,r18
   51d9c:	dfc00315 	stw	ra,12(sp)
   51da0:	dc400115 	stw	r17,4(sp)
   51da4:	0052d440 	call	52d44 <__mulsi3>
   51da8:	8009883a 	mov	r4,r16
   51dac:	11400304 	addi	r5,r2,12
   51db0:	1023883a 	mov	r17,r2
   51db4:	00508300 	call	50830 <_malloc_r>
   51db8:	1021883a 	mov	r16,r2
   51dbc:	10000726 	beq	r2,zero,51ddc <__sfmoreglue+0x5c>
   51dc0:	11000304 	addi	r4,r2,12
   51dc4:	10000015 	stw	zero,0(r2)
   51dc8:	14800115 	stw	r18,4(r2)
   51dcc:	11000215 	stw	r4,8(r2)
   51dd0:	000b883a 	mov	r5,zero
   51dd4:	880d883a 	mov	r6,r17
   51dd8:	00527640 	call	52764 <memset>
   51ddc:	8005883a 	mov	r2,r16
   51de0:	dfc00317 	ldw	ra,12(sp)
   51de4:	dc800217 	ldw	r18,8(sp)
   51de8:	dc400117 	ldw	r17,4(sp)
   51dec:	dc000017 	ldw	r16,0(sp)
   51df0:	dec00404 	addi	sp,sp,16
   51df4:	f800283a 	ret

00051df8 <_cleanup>:
   51df8:	00800034 	movhi	r2,0
   51dfc:	10869604 	addi	r2,r2,6744
   51e00:	11000017 	ldw	r4,0(r2)
   51e04:	0051d741 	jmpi	51d74 <_cleanup_r>

00051e08 <__sinit>:
   51e08:	20800e17 	ldw	r2,56(r4)
   51e0c:	1000401e 	bne	r2,zero,51f10 <__sinit+0x108>
   51e10:	21400117 	ldw	r5,4(r4)
   51e14:	01800174 	movhi	r6,5
   51e18:	31875d04 	addi	r6,r6,7540
   51e1c:	20c00217 	ldw	r3,8(r4)
   51e20:	21800f15 	stw	r6,60(r4)
   51e24:	2080bb04 	addi	r2,r4,748
   51e28:	02400044 	movi	r9,1
   51e2c:	018000c4 	movi	r6,3
   51e30:	2180b915 	stw	r6,740(r4)
   51e34:	2080ba15 	stw	r2,744(r4)
   51e38:	22400e15 	stw	r9,56(r4)
   51e3c:	20800317 	ldw	r2,12(r4)
   51e40:	2000b815 	stw	zero,736(r4)
   51e44:	02000174 	movhi	r8,5
   51e48:	420a1004 	addi	r8,r8,10304
   51e4c:	01c00174 	movhi	r7,5
   51e50:	39ca2504 	addi	r7,r7,10388
   51e54:	01800174 	movhi	r6,5
   51e58:	318a4704 	addi	r6,r6,10524
   51e5c:	01000174 	movhi	r4,5
   51e60:	210a5e04 	addi	r4,r4,10616
   51e64:	02800104 	movi	r10,4
   51e68:	28000015 	stw	zero,0(r5)
   51e6c:	28000115 	stw	zero,4(r5)
   51e70:	28000215 	stw	zero,8(r5)
   51e74:	2a80030d 	sth	r10,12(r5)
   51e78:	2800038d 	sth	zero,14(r5)
   51e7c:	28000415 	stw	zero,16(r5)
   51e80:	28000515 	stw	zero,20(r5)
   51e84:	28000615 	stw	zero,24(r5)
   51e88:	29400715 	stw	r5,28(r5)
   51e8c:	2a000815 	stw	r8,32(r5)
   51e90:	29c00915 	stw	r7,36(r5)
   51e94:	29800a15 	stw	r6,40(r5)
   51e98:	29000b15 	stw	r4,44(r5)
   51e9c:	01400284 	movi	r5,10
   51ea0:	18000015 	stw	zero,0(r3)
   51ea4:	18000115 	stw	zero,4(r3)
   51ea8:	18000215 	stw	zero,8(r3)
   51eac:	1940030d 	sth	r5,12(r3)
   51eb0:	1a40038d 	sth	r9,14(r3)
   51eb4:	18000415 	stw	zero,16(r3)
   51eb8:	18000515 	stw	zero,20(r3)
   51ebc:	18000615 	stw	zero,24(r3)
   51ec0:	18c00715 	stw	r3,28(r3)
   51ec4:	1a000815 	stw	r8,32(r3)
   51ec8:	19c00915 	stw	r7,36(r3)
   51ecc:	19800a15 	stw	r6,40(r3)
   51ed0:	19000b15 	stw	r4,44(r3)
   51ed4:	00c00484 	movi	r3,18
   51ed8:	10c0030d 	sth	r3,12(r2)
   51edc:	00c00084 	movi	r3,2
   51ee0:	10000015 	stw	zero,0(r2)
   51ee4:	10000115 	stw	zero,4(r2)
   51ee8:	10000215 	stw	zero,8(r2)
   51eec:	10c0038d 	sth	r3,14(r2)
   51ef0:	10000415 	stw	zero,16(r2)
   51ef4:	10000515 	stw	zero,20(r2)
   51ef8:	10000615 	stw	zero,24(r2)
   51efc:	10800715 	stw	r2,28(r2)
   51f00:	12000815 	stw	r8,32(r2)
   51f04:	11c00915 	stw	r7,36(r2)
   51f08:	11800a15 	stw	r6,40(r2)
   51f0c:	11000b15 	stw	r4,44(r2)
   51f10:	f800283a 	ret

00051f14 <__sfp>:
   51f14:	defffc04 	addi	sp,sp,-16
   51f18:	00800034 	movhi	r2,0
   51f1c:	10869604 	addi	r2,r2,6744
   51f20:	dc400115 	stw	r17,4(sp)
   51f24:	14400017 	ldw	r17,0(r2)
   51f28:	dc800215 	stw	r18,8(sp)
   51f2c:	dfc00315 	stw	ra,12(sp)
   51f30:	88800e17 	ldw	r2,56(r17)
   51f34:	dc000015 	stw	r16,0(sp)
   51f38:	2025883a 	mov	r18,r4
   51f3c:	10002826 	beq	r2,zero,51fe0 <__sfp+0xcc>
   51f40:	8c40b804 	addi	r17,r17,736
   51f44:	043fffc4 	movi	r16,-1
   51f48:	89400117 	ldw	r5,4(r17)
   51f4c:	88800217 	ldw	r2,8(r17)
   51f50:	297fffc4 	addi	r5,r5,-1
   51f54:	28000a16 	blt	r5,zero,51f80 <__sfp+0x6c>
   51f58:	10c0030f 	ldh	r3,12(r2)
   51f5c:	18000c26 	beq	r3,zero,51f90 <__sfp+0x7c>
   51f60:	10c01a04 	addi	r3,r2,104
   51f64:	00000206 	br	51f70 <__sfp+0x5c>
   51f68:	19bfe90f 	ldh	r6,-92(r3)
   51f6c:	30000826 	beq	r6,zero,51f90 <__sfp+0x7c>
   51f70:	297fffc4 	addi	r5,r5,-1
   51f74:	18bffd04 	addi	r2,r3,-12
   51f78:	18c01704 	addi	r3,r3,92
   51f7c:	2c3ffa1e 	bne	r5,r16,51f68 <__sfp+0x54>
   51f80:	88800017 	ldw	r2,0(r17)
   51f84:	10001926 	beq	r2,zero,51fec <__sfp+0xd8>
   51f88:	1023883a 	mov	r17,r2
   51f8c:	003fee06 	br	51f48 <__sfp+0x34>
   51f90:	00ffffc4 	movi	r3,-1
   51f94:	10c0038d 	sth	r3,14(r2)
   51f98:	00c00044 	movi	r3,1
   51f9c:	10c0030d 	sth	r3,12(r2)
   51fa0:	10000015 	stw	zero,0(r2)
   51fa4:	10000215 	stw	zero,8(r2)
   51fa8:	10000115 	stw	zero,4(r2)
   51fac:	10000415 	stw	zero,16(r2)
   51fb0:	10000515 	stw	zero,20(r2)
   51fb4:	10000615 	stw	zero,24(r2)
   51fb8:	10000c15 	stw	zero,48(r2)
   51fbc:	10000d15 	stw	zero,52(r2)
   51fc0:	10001115 	stw	zero,68(r2)
   51fc4:	10001215 	stw	zero,72(r2)
   51fc8:	dfc00317 	ldw	ra,12(sp)
   51fcc:	dc800217 	ldw	r18,8(sp)
   51fd0:	dc400117 	ldw	r17,4(sp)
   51fd4:	dc000017 	ldw	r16,0(sp)
   51fd8:	dec00404 	addi	sp,sp,16
   51fdc:	f800283a 	ret
   51fe0:	8809883a 	mov	r4,r17
   51fe4:	0051e080 	call	51e08 <__sinit>
   51fe8:	003fd506 	br	51f40 <__sfp+0x2c>
   51fec:	9009883a 	mov	r4,r18
   51ff0:	01400104 	movi	r5,4
   51ff4:	0051d800 	call	51d80 <__sfmoreglue>
   51ff8:	88800015 	stw	r2,0(r17)
   51ffc:	103fe21e 	bne	r2,zero,51f88 <__sfp+0x74>
   52000:	00800304 	movi	r2,12
   52004:	90800015 	stw	r2,0(r18)
   52008:	0005883a 	mov	r2,zero
   5200c:	003fee06 	br	51fc8 <__sfp+0xb4>

00052010 <__sfp_lock_acquire>:
   52010:	f800283a 	ret

00052014 <__sfp_lock_release>:
   52014:	f800283a 	ret

00052018 <__sinit_lock_acquire>:
   52018:	f800283a 	ret

0005201c <__sinit_lock_release>:
   5201c:	f800283a 	ret

00052020 <__fp_lock_all>:
   52020:	00800034 	movhi	r2,0
   52024:	10869704 	addi	r2,r2,6748
   52028:	11000017 	ldw	r4,0(r2)
   5202c:	01400174 	movhi	r5,5
   52030:	29475904 	addi	r5,r5,7524
   52034:	005245c1 	jmpi	5245c <_fwalk>

00052038 <__fp_unlock_all>:
   52038:	00800034 	movhi	r2,0
   5203c:	10869704 	addi	r2,r2,6748
   52040:	11000017 	ldw	r4,0(r2)
   52044:	01400174 	movhi	r5,5
   52048:	29475b04 	addi	r5,r5,7532
   5204c:	005245c1 	jmpi	5245c <_fwalk>

00052050 <_malloc_trim_r>:
   52050:	defffb04 	addi	sp,sp,-20
   52054:	dcc00315 	stw	r19,12(sp)
   52058:	dc800215 	stw	r18,8(sp)
   5205c:	dc400115 	stw	r17,4(sp)
   52060:	dc000015 	stw	r16,0(sp)
   52064:	2827883a 	mov	r19,r5
   52068:	dfc00415 	stw	ra,16(sp)
   5206c:	04400034 	movhi	r17,0
   52070:	8c411204 	addi	r17,r17,1096
   52074:	2021883a 	mov	r16,r4
   52078:	00533300 	call	53330 <__malloc_lock>
   5207c:	88800217 	ldw	r2,8(r17)
   52080:	14800117 	ldw	r18,4(r2)
   52084:	00bfff04 	movi	r2,-4
   52088:	90a4703a 	and	r18,r18,r2
   5208c:	9083fbc4 	addi	r2,r18,4079
   52090:	14e7c83a 	sub	r19,r2,r19
   52094:	9826d33a 	srli	r19,r19,12
   52098:	0083ffc4 	movi	r2,4095
   5209c:	9cffffc4 	addi	r19,r19,-1
   520a0:	9826933a 	slli	r19,r19,12
   520a4:	14c0060e 	bge	r2,r19,520c0 <_malloc_trim_r+0x70>
   520a8:	8009883a 	mov	r4,r16
   520ac:	000b883a 	mov	r5,zero
   520b0:	00519740 	call	51974 <_sbrk_r>
   520b4:	88c00217 	ldw	r3,8(r17)
   520b8:	1c87883a 	add	r3,r3,r18
   520bc:	10c00a26 	beq	r2,r3,520e8 <_malloc_trim_r+0x98>
   520c0:	8009883a 	mov	r4,r16
   520c4:	00533500 	call	53350 <__malloc_unlock>
   520c8:	0005883a 	mov	r2,zero
   520cc:	dfc00417 	ldw	ra,16(sp)
   520d0:	dcc00317 	ldw	r19,12(sp)
   520d4:	dc800217 	ldw	r18,8(sp)
   520d8:	dc400117 	ldw	r17,4(sp)
   520dc:	dc000017 	ldw	r16,0(sp)
   520e0:	dec00504 	addi	sp,sp,20
   520e4:	f800283a 	ret
   520e8:	8009883a 	mov	r4,r16
   520ec:	04cbc83a 	sub	r5,zero,r19
   520f0:	00519740 	call	51974 <_sbrk_r>
   520f4:	00ffffc4 	movi	r3,-1
   520f8:	10c01326 	beq	r2,r3,52148 <_malloc_trim_r+0xf8>
   520fc:	00800034 	movhi	r2,0
   52100:	1086ae04 	addi	r2,r2,6840
   52104:	11000017 	ldw	r4,0(r2)
   52108:	88c00217 	ldw	r3,8(r17)
   5210c:	94e5c83a 	sub	r18,r18,r19
   52110:	94800054 	ori	r18,r18,1
   52114:	24e7c83a 	sub	r19,r4,r19
   52118:	1c800115 	stw	r18,4(r3)
   5211c:	8009883a 	mov	r4,r16
   52120:	14c00015 	stw	r19,0(r2)
   52124:	00533500 	call	53350 <__malloc_unlock>
   52128:	00800044 	movi	r2,1
   5212c:	dfc00417 	ldw	ra,16(sp)
   52130:	dcc00317 	ldw	r19,12(sp)
   52134:	dc800217 	ldw	r18,8(sp)
   52138:	dc400117 	ldw	r17,4(sp)
   5213c:	dc000017 	ldw	r16,0(sp)
   52140:	dec00504 	addi	sp,sp,20
   52144:	f800283a 	ret
   52148:	8009883a 	mov	r4,r16
   5214c:	000b883a 	mov	r5,zero
   52150:	00519740 	call	51974 <_sbrk_r>
   52154:	88c00217 	ldw	r3,8(r17)
   52158:	014003c4 	movi	r5,15
   5215c:	10c9c83a 	sub	r4,r2,r3
   52160:	293fd70e 	bge	r5,r4,520c0 <_malloc_trim_r+0x70>
   52164:	01400034 	movhi	r5,0
   52168:	29469804 	addi	r5,r5,6752
   5216c:	29400017 	ldw	r5,0(r5)
   52170:	21000054 	ori	r4,r4,1
   52174:	19000115 	stw	r4,4(r3)
   52178:	1145c83a 	sub	r2,r2,r5
   5217c:	01400034 	movhi	r5,0
   52180:	2946ae04 	addi	r5,r5,6840
   52184:	28800015 	stw	r2,0(r5)
   52188:	003fcd06 	br	520c0 <_malloc_trim_r+0x70>

0005218c <_free_r>:
   5218c:	defffd04 	addi	sp,sp,-12
   52190:	dc400115 	stw	r17,4(sp)
   52194:	dc000015 	stw	r16,0(sp)
   52198:	dfc00215 	stw	ra,8(sp)
   5219c:	2821883a 	mov	r16,r5
   521a0:	2023883a 	mov	r17,r4
   521a4:	28004b26 	beq	r5,zero,522d4 <_free_r+0x148>
   521a8:	00533300 	call	53330 <__malloc_lock>
   521ac:	823fff17 	ldw	r8,-4(r16)
   521b0:	00bfff84 	movi	r2,-2
   521b4:	81bffe04 	addi	r6,r16,-8
   521b8:	4084703a 	and	r2,r8,r2
   521bc:	3087883a 	add	r3,r6,r2
   521c0:	01400034 	movhi	r5,0
   521c4:	29411204 	addi	r5,r5,1096
   521c8:	1a400117 	ldw	r9,4(r3)
   521cc:	29000217 	ldw	r4,8(r5)
   521d0:	01ffff04 	movi	r7,-4
   521d4:	49ce703a 	and	r7,r9,r7
   521d8:	20c06526 	beq	r4,r3,52370 <_free_r+0x1e4>
   521dc:	19c00115 	stw	r7,4(r3)
   521e0:	4200004c 	andi	r8,r8,1
   521e4:	40003026 	beq	r8,zero,522a8 <_free_r+0x11c>
   521e8:	0009883a 	mov	r4,zero
   521ec:	19d1883a 	add	r8,r3,r7
   521f0:	42000117 	ldw	r8,4(r8)
   521f4:	4200004c 	andi	r8,r8,1
   521f8:	4000061e 	bne	r8,zero,52214 <_free_r+0x88>
   521fc:	11c5883a 	add	r2,r2,r7
   52200:	19c00217 	ldw	r7,8(r3)
   52204:	20004e26 	beq	r4,zero,52340 <_free_r+0x1b4>
   52208:	18c00317 	ldw	r3,12(r3)
   5220c:	38c00315 	stw	r3,12(r7)
   52210:	19c00215 	stw	r7,8(r3)
   52214:	11c00054 	ori	r7,r2,1
   52218:	3087883a 	add	r3,r6,r2
   5221c:	31c00115 	stw	r7,4(r6)
   52220:	18800015 	stw	r2,0(r3)
   52224:	20001a1e 	bne	r4,zero,52290 <_free_r+0x104>
   52228:	00c07fc4 	movi	r3,511
   5222c:	18802e2e 	bgeu	r3,r2,522e8 <_free_r+0x15c>
   52230:	1006d27a 	srli	r3,r2,9
   52234:	01000104 	movi	r4,4
   52238:	20c06636 	bltu	r4,r3,523d4 <_free_r+0x248>
   5223c:	1008d1ba 	srli	r4,r2,6
   52240:	21000e04 	addi	r4,r4,56
   52244:	210f883a 	add	r7,r4,r4
   52248:	39cf883a 	add	r7,r7,r7
   5224c:	39cf883a 	add	r7,r7,r7
   52250:	29cf883a 	add	r7,r5,r7
   52254:	38c00217 	ldw	r3,8(r7)
   52258:	01400034 	movhi	r5,0
   5225c:	29411204 	addi	r5,r5,1096
   52260:	19c06126 	beq	r3,r7,523e8 <_free_r+0x25c>
   52264:	013fff04 	movi	r4,-4
   52268:	19400117 	ldw	r5,4(r3)
   5226c:	290a703a 	and	r5,r5,r4
   52270:	1140022e 	bgeu	r2,r5,5227c <_free_r+0xf0>
   52274:	18c00217 	ldw	r3,8(r3)
   52278:	38fffb1e 	bne	r7,r3,52268 <_free_r+0xdc>
   5227c:	18800317 	ldw	r2,12(r3)
   52280:	30800315 	stw	r2,12(r6)
   52284:	30c00215 	stw	r3,8(r6)
   52288:	11800215 	stw	r6,8(r2)
   5228c:	19800315 	stw	r6,12(r3)
   52290:	8809883a 	mov	r4,r17
   52294:	dfc00217 	ldw	ra,8(sp)
   52298:	dc400117 	ldw	r17,4(sp)
   5229c:	dc000017 	ldw	r16,0(sp)
   522a0:	dec00304 	addi	sp,sp,12
   522a4:	00533501 	jmpi	53350 <__malloc_unlock>
   522a8:	813ffe17 	ldw	r4,-8(r16)
   522ac:	2a400204 	addi	r9,r5,8
   522b0:	310dc83a 	sub	r6,r6,r4
   522b4:	32000217 	ldw	r8,8(r6)
   522b8:	1105883a 	add	r2,r2,r4
   522bc:	42404326 	beq	r8,r9,523cc <_free_r+0x240>
   522c0:	32400317 	ldw	r9,12(r6)
   522c4:	0009883a 	mov	r4,zero
   522c8:	42400315 	stw	r9,12(r8)
   522cc:	4a000215 	stw	r8,8(r9)
   522d0:	003fc606 	br	521ec <_free_r+0x60>
   522d4:	dfc00217 	ldw	ra,8(sp)
   522d8:	dc400117 	ldw	r17,4(sp)
   522dc:	dc000017 	ldw	r16,0(sp)
   522e0:	dec00304 	addi	sp,sp,12
   522e4:	f800283a 	ret
   522e8:	1004d0fa 	srli	r2,r2,3
   522ec:	02000044 	movi	r8,1
   522f0:	29c00117 	ldw	r7,4(r5)
   522f4:	1087883a 	add	r3,r2,r2
   522f8:	18c7883a 	add	r3,r3,r3
   522fc:	1005d0ba 	srai	r2,r2,2
   52300:	18c7883a 	add	r3,r3,r3
   52304:	28c7883a 	add	r3,r5,r3
   52308:	19000217 	ldw	r4,8(r3)
   5230c:	4084983a 	sll	r2,r8,r2
   52310:	30c00315 	stw	r3,12(r6)
   52314:	31000215 	stw	r4,8(r6)
   52318:	11c4b03a 	or	r2,r2,r7
   5231c:	21800315 	stw	r6,12(r4)
   52320:	8809883a 	mov	r4,r17
   52324:	28800115 	stw	r2,4(r5)
   52328:	19800215 	stw	r6,8(r3)
   5232c:	dfc00217 	ldw	ra,8(sp)
   52330:	dc400117 	ldw	r17,4(sp)
   52334:	dc000017 	ldw	r16,0(sp)
   52338:	dec00304 	addi	sp,sp,12
   5233c:	00533501 	jmpi	53350 <__malloc_unlock>
   52340:	02000034 	movhi	r8,0
   52344:	42011404 	addi	r8,r8,1104
   52348:	3a3faf1e 	bne	r7,r8,52208 <_free_r+0x7c>
   5234c:	29800515 	stw	r6,20(r5)
   52350:	29800415 	stw	r6,16(r5)
   52354:	11000054 	ori	r4,r2,1
   52358:	3087883a 	add	r3,r6,r2
   5235c:	31c00315 	stw	r7,12(r6)
   52360:	31c00215 	stw	r7,8(r6)
   52364:	31000115 	stw	r4,4(r6)
   52368:	18800015 	stw	r2,0(r3)
   5236c:	003fc806 	br	52290 <_free_r+0x104>
   52370:	4200004c 	andi	r8,r8,1
   52374:	3885883a 	add	r2,r7,r2
   52378:	4000071e 	bne	r8,zero,52398 <_free_r+0x20c>
   5237c:	81fffe17 	ldw	r7,-8(r16)
   52380:	31cdc83a 	sub	r6,r6,r7
   52384:	30c00317 	ldw	r3,12(r6)
   52388:	31000217 	ldw	r4,8(r6)
   5238c:	11c5883a 	add	r2,r2,r7
   52390:	20c00315 	stw	r3,12(r4)
   52394:	19000215 	stw	r4,8(r3)
   52398:	00c00034 	movhi	r3,0
   5239c:	18c69904 	addi	r3,r3,6756
   523a0:	18c00017 	ldw	r3,0(r3)
   523a4:	11000054 	ori	r4,r2,1
   523a8:	31000115 	stw	r4,4(r6)
   523ac:	29800215 	stw	r6,8(r5)
   523b0:	10ffb736 	bltu	r2,r3,52290 <_free_r+0x104>
   523b4:	00800034 	movhi	r2,0
   523b8:	1086a604 	addi	r2,r2,6808
   523bc:	11400017 	ldw	r5,0(r2)
   523c0:	8809883a 	mov	r4,r17
   523c4:	00520500 	call	52050 <_malloc_trim_r>
   523c8:	003fb106 	br	52290 <_free_r+0x104>
   523cc:	01000044 	movi	r4,1
   523d0:	003f8606 	br	521ec <_free_r+0x60>
   523d4:	01000504 	movi	r4,20
   523d8:	20c00b36 	bltu	r4,r3,52408 <_free_r+0x27c>
   523dc:	190016c4 	addi	r4,r3,91
   523e0:	210f883a 	add	r7,r4,r4
   523e4:	003f9806 	br	52248 <_free_r+0xbc>
   523e8:	2009d0ba 	srai	r4,r4,2
   523ec:	00800044 	movi	r2,1
   523f0:	29c00117 	ldw	r7,4(r5)
   523f4:	1108983a 	sll	r4,r2,r4
   523f8:	1805883a 	mov	r2,r3
   523fc:	21c8b03a 	or	r4,r4,r7
   52400:	29000115 	stw	r4,4(r5)
   52404:	003f9e06 	br	52280 <_free_r+0xf4>
   52408:	01001504 	movi	r4,84
   5240c:	20c00436 	bltu	r4,r3,52420 <_free_r+0x294>
   52410:	1008d33a 	srli	r4,r2,12
   52414:	21001b84 	addi	r4,r4,110
   52418:	210f883a 	add	r7,r4,r4
   5241c:	003f8a06 	br	52248 <_free_r+0xbc>
   52420:	01005504 	movi	r4,340
   52424:	20c00436 	bltu	r4,r3,52438 <_free_r+0x2ac>
   52428:	1008d3fa 	srli	r4,r2,15
   5242c:	21001dc4 	addi	r4,r4,119
   52430:	210f883a 	add	r7,r4,r4
   52434:	003f8406 	br	52248 <_free_r+0xbc>
   52438:	01015504 	movi	r4,1364
   5243c:	20c00436 	bltu	r4,r3,52450 <_free_r+0x2c4>
   52440:	1008d4ba 	srli	r4,r2,18
   52444:	21001f04 	addi	r4,r4,124
   52448:	210f883a 	add	r7,r4,r4
   5244c:	003f7e06 	br	52248 <_free_r+0xbc>
   52450:	01c03f04 	movi	r7,252
   52454:	01001f84 	movi	r4,126
   52458:	003f7b06 	br	52248 <_free_r+0xbc>

0005245c <_fwalk>:
   5245c:	defff904 	addi	sp,sp,-28
   52460:	dcc00315 	stw	r19,12(sp)
   52464:	24c0b804 	addi	r19,r4,736
   52468:	dd400515 	stw	r21,20(sp)
   5246c:	dd000415 	stw	r20,16(sp)
   52470:	dfc00615 	stw	ra,24(sp)
   52474:	dc800215 	stw	r18,8(sp)
   52478:	dc400115 	stw	r17,4(sp)
   5247c:	dc000015 	stw	r16,0(sp)
   52480:	282b883a 	mov	r21,r5
   52484:	0029883a 	mov	r20,zero
   52488:	00520100 	call	52010 <__sfp_lock_acquire>
   5248c:	98001226 	beq	r19,zero,524d8 <_fwalk+0x7c>
   52490:	04bfffc4 	movi	r18,-1
   52494:	9c400117 	ldw	r17,4(r19)
   52498:	9c000217 	ldw	r16,8(r19)
   5249c:	8c7fffc4 	addi	r17,r17,-1
   524a0:	88000b16 	blt	r17,zero,524d0 <_fwalk+0x74>
   524a4:	84000304 	addi	r16,r16,12
   524a8:	80c0000f 	ldh	r3,0(r16)
   524ac:	8c7fffc4 	addi	r17,r17,-1
   524b0:	813ffd04 	addi	r4,r16,-12
   524b4:	18000426 	beq	r3,zero,524c8 <_fwalk+0x6c>
   524b8:	80c0008f 	ldh	r3,2(r16)
   524bc:	1c800226 	beq	r3,r18,524c8 <_fwalk+0x6c>
   524c0:	a83ee83a 	callr	r21
   524c4:	a0a8b03a 	or	r20,r20,r2
   524c8:	84001704 	addi	r16,r16,92
   524cc:	8cbff61e 	bne	r17,r18,524a8 <_fwalk+0x4c>
   524d0:	9cc00017 	ldw	r19,0(r19)
   524d4:	983fef1e 	bne	r19,zero,52494 <_fwalk+0x38>
   524d8:	00520140 	call	52014 <__sfp_lock_release>
   524dc:	a005883a 	mov	r2,r20
   524e0:	dfc00617 	ldw	ra,24(sp)
   524e4:	dd400517 	ldw	r21,20(sp)
   524e8:	dd000417 	ldw	r20,16(sp)
   524ec:	dcc00317 	ldw	r19,12(sp)
   524f0:	dc800217 	ldw	r18,8(sp)
   524f4:	dc400117 	ldw	r17,4(sp)
   524f8:	dc000017 	ldw	r16,0(sp)
   524fc:	dec00704 	addi	sp,sp,28
   52500:	f800283a 	ret

00052504 <_fwalk_reent>:
   52504:	defff804 	addi	sp,sp,-32
   52508:	dcc00315 	stw	r19,12(sp)
   5250c:	24c0b804 	addi	r19,r4,736
   52510:	dd800615 	stw	r22,24(sp)
   52514:	dd400515 	stw	r21,20(sp)
   52518:	dd000415 	stw	r20,16(sp)
   5251c:	dfc00715 	stw	ra,28(sp)
   52520:	dc800215 	stw	r18,8(sp)
   52524:	dc400115 	stw	r17,4(sp)
   52528:	dc000015 	stw	r16,0(sp)
   5252c:	2029883a 	mov	r20,r4
   52530:	282b883a 	mov	r21,r5
   52534:	002d883a 	mov	r22,zero
   52538:	00520100 	call	52010 <__sfp_lock_acquire>
   5253c:	98001326 	beq	r19,zero,5258c <_fwalk_reent+0x88>
   52540:	04bfffc4 	movi	r18,-1
   52544:	9c400117 	ldw	r17,4(r19)
   52548:	9c000217 	ldw	r16,8(r19)
   5254c:	8c7fffc4 	addi	r17,r17,-1
   52550:	88000c16 	blt	r17,zero,52584 <_fwalk_reent+0x80>
   52554:	84000304 	addi	r16,r16,12
   52558:	80c0000f 	ldh	r3,0(r16)
   5255c:	8c7fffc4 	addi	r17,r17,-1
   52560:	817ffd04 	addi	r5,r16,-12
   52564:	18000526 	beq	r3,zero,5257c <_fwalk_reent+0x78>
   52568:	80c0008f 	ldh	r3,2(r16)
   5256c:	a009883a 	mov	r4,r20
   52570:	1c800226 	beq	r3,r18,5257c <_fwalk_reent+0x78>
   52574:	a83ee83a 	callr	r21
   52578:	b0acb03a 	or	r22,r22,r2
   5257c:	84001704 	addi	r16,r16,92
   52580:	8cbff51e 	bne	r17,r18,52558 <_fwalk_reent+0x54>
   52584:	9cc00017 	ldw	r19,0(r19)
   52588:	983fee1e 	bne	r19,zero,52544 <_fwalk_reent+0x40>
   5258c:	00520140 	call	52014 <__sfp_lock_release>
   52590:	b005883a 	mov	r2,r22
   52594:	dfc00717 	ldw	ra,28(sp)
   52598:	dd800617 	ldw	r22,24(sp)
   5259c:	dd400517 	ldw	r21,20(sp)
   525a0:	dd000417 	ldw	r20,16(sp)
   525a4:	dcc00317 	ldw	r19,12(sp)
   525a8:	dc800217 	ldw	r18,8(sp)
   525ac:	dc400117 	ldw	r17,4(sp)
   525b0:	dc000017 	ldw	r16,0(sp)
   525b4:	dec00804 	addi	sp,sp,32
   525b8:	f800283a 	ret

000525bc <__smakebuf_r>:
   525bc:	2880030b 	ldhu	r2,12(r5)
   525c0:	deffed04 	addi	sp,sp,-76
   525c4:	dc401015 	stw	r17,64(sp)
   525c8:	10c0008c 	andi	r3,r2,2
   525cc:	18ffffcc 	andi	r3,r3,65535
   525d0:	18e0001c 	xori	r3,r3,32768
   525d4:	dc000f15 	stw	r16,60(sp)
   525d8:	dfc01215 	stw	ra,72(sp)
   525dc:	dc801115 	stw	r18,68(sp)
   525e0:	18e00004 	addi	r3,r3,-32768
   525e4:	2821883a 	mov	r16,r5
   525e8:	2023883a 	mov	r17,r4
   525ec:	1800381e 	bne	r3,zero,526d0 <__smakebuf_r+0x114>
   525f0:	2940038f 	ldh	r5,14(r5)
   525f4:	28002d16 	blt	r5,zero,526ac <__smakebuf_r+0xf0>
   525f8:	d80d883a 	mov	r6,sp
   525fc:	0052ba00 	call	52ba0 <_fstat_r>
   52600:	10002916 	blt	r2,zero,526a8 <__smakebuf_r+0xec>
   52604:	d8800117 	ldw	r2,4(sp)
   52608:	00e00014 	movui	r3,32768
   5260c:	10bc000c 	andi	r2,r2,61440
   52610:	10c03c26 	beq	r2,r3,52704 <__smakebuf_r+0x148>
   52614:	80c0030b 	ldhu	r3,12(r16)
   52618:	18c20014 	ori	r3,r3,2048
   5261c:	80c0030d 	sth	r3,12(r16)
   52620:	00c80004 	movi	r3,8192
   52624:	10c00c1e 	bne	r2,r3,52658 <__smakebuf_r+0x9c>
   52628:	8140038f 	ldh	r5,14(r16)
   5262c:	8809883a 	mov	r4,r17
   52630:	0052c080 	call	52c08 <_isatty_r>
   52634:	10000826 	beq	r2,zero,52658 <__smakebuf_r+0x9c>
   52638:	80c0030b 	ldhu	r3,12(r16)
   5263c:	808010c4 	addi	r2,r16,67
   52640:	80800015 	stw	r2,0(r16)
   52644:	18c00054 	ori	r3,r3,1
   52648:	80800415 	stw	r2,16(r16)
   5264c:	00800044 	movi	r2,1
   52650:	80c0030d 	sth	r3,12(r16)
   52654:	80800515 	stw	r2,20(r16)
   52658:	04810004 	movi	r18,1024
   5265c:	8809883a 	mov	r4,r17
   52660:	900b883a 	mov	r5,r18
   52664:	00508300 	call	50830 <_malloc_r>
   52668:	10003026 	beq	r2,zero,5272c <__smakebuf_r+0x170>
   5266c:	80c0030b 	ldhu	r3,12(r16)
   52670:	01000174 	movhi	r4,5
   52674:	21075d04 	addi	r4,r4,7540
   52678:	89000f15 	stw	r4,60(r17)
   5267c:	18c02014 	ori	r3,r3,128
   52680:	80c0030d 	sth	r3,12(r16)
   52684:	80800015 	stw	r2,0(r16)
   52688:	80800415 	stw	r2,16(r16)
   5268c:	84800515 	stw	r18,20(r16)
   52690:	dfc01217 	ldw	ra,72(sp)
   52694:	dc801117 	ldw	r18,68(sp)
   52698:	dc401017 	ldw	r17,64(sp)
   5269c:	dc000f17 	ldw	r16,60(sp)
   526a0:	dec01304 	addi	sp,sp,76
   526a4:	f800283a 	ret
   526a8:	8080030b 	ldhu	r2,12(r16)
   526ac:	10c0200c 	andi	r3,r2,128
   526b0:	18ffffcc 	andi	r3,r3,65535
   526b4:	18e0001c 	xori	r3,r3,32768
   526b8:	18e00004 	addi	r3,r3,-32768
   526bc:	18000f1e 	bne	r3,zero,526fc <__smakebuf_r+0x140>
   526c0:	04810004 	movi	r18,1024
   526c4:	10820014 	ori	r2,r2,2048
   526c8:	8080030d 	sth	r2,12(r16)
   526cc:	003fe306 	br	5265c <__smakebuf_r+0xa0>
   526d0:	288010c4 	addi	r2,r5,67
   526d4:	28800015 	stw	r2,0(r5)
   526d8:	28800415 	stw	r2,16(r5)
   526dc:	00800044 	movi	r2,1
   526e0:	28800515 	stw	r2,20(r5)
   526e4:	dfc01217 	ldw	ra,72(sp)
   526e8:	dc801117 	ldw	r18,68(sp)
   526ec:	dc401017 	ldw	r17,64(sp)
   526f0:	dc000f17 	ldw	r16,60(sp)
   526f4:	dec01304 	addi	sp,sp,76
   526f8:	f800283a 	ret
   526fc:	04801004 	movi	r18,64
   52700:	003ff006 	br	526c4 <__smakebuf_r+0x108>
   52704:	81000a17 	ldw	r4,40(r16)
   52708:	00c00174 	movhi	r3,5
   5270c:	18ca4704 	addi	r3,r3,10524
   52710:	20ffc01e 	bne	r4,r3,52614 <__smakebuf_r+0x58>
   52714:	8080030b 	ldhu	r2,12(r16)
   52718:	00c10004 	movi	r3,1024
   5271c:	80c01315 	stw	r3,76(r16)
   52720:	10c4b03a 	or	r2,r2,r3
   52724:	8080030d 	sth	r2,12(r16)
   52728:	003fcb06 	br	52658 <__smakebuf_r+0x9c>
   5272c:	8080030b 	ldhu	r2,12(r16)
   52730:	10c0800c 	andi	r3,r2,512
   52734:	18ffffcc 	andi	r3,r3,65535
   52738:	18e0001c 	xori	r3,r3,32768
   5273c:	18e00004 	addi	r3,r3,-32768
   52740:	183fd31e 	bne	r3,zero,52690 <__smakebuf_r+0xd4>
   52744:	10800094 	ori	r2,r2,2
   52748:	80c010c4 	addi	r3,r16,67
   5274c:	8080030d 	sth	r2,12(r16)
   52750:	00800044 	movi	r2,1
   52754:	80c00015 	stw	r3,0(r16)
   52758:	80c00415 	stw	r3,16(r16)
   5275c:	80800515 	stw	r2,20(r16)
   52760:	003fcb06 	br	52690 <__smakebuf_r+0xd4>

00052764 <memset>:
   52764:	00c000c4 	movi	r3,3
   52768:	2005883a 	mov	r2,r4
   5276c:	29403fcc 	andi	r5,r5,255
   52770:	19802d2e 	bgeu	r3,r6,52828 <memset+0xc4>
   52774:	20c6703a 	and	r3,r4,r3
   52778:	18002e1e 	bne	r3,zero,52834 <memset+0xd0>
   5277c:	2806923a 	slli	r3,r5,8
   52780:	010003c4 	movi	r4,15
   52784:	3011883a 	mov	r8,r6
   52788:	1946b03a 	or	r3,r3,r5
   5278c:	180e943a 	slli	r7,r3,16
   52790:	38ceb03a 	or	r7,r7,r3
   52794:	1007883a 	mov	r3,r2
   52798:	21800f2e 	bgeu	r4,r6,527d8 <memset+0x74>
   5279c:	19c00015 	stw	r7,0(r3)
   527a0:	19c00115 	stw	r7,4(r3)
   527a4:	19c00215 	stw	r7,8(r3)
   527a8:	19c00315 	stw	r7,12(r3)
   527ac:	423ffc04 	addi	r8,r8,-16
   527b0:	18c00404 	addi	r3,r3,16
   527b4:	223ff936 	bltu	r4,r8,5279c <memset+0x38>
   527b8:	30fffc04 	addi	r3,r6,-16
   527bc:	1806d13a 	srli	r3,r3,4
   527c0:	318003cc 	andi	r6,r6,15
   527c4:	010000c4 	movi	r4,3
   527c8:	18c00044 	addi	r3,r3,1
   527cc:	1806913a 	slli	r3,r3,4
   527d0:	10c7883a 	add	r3,r2,r3
   527d4:	21800e2e 	bgeu	r4,r6,52810 <memset+0xac>
   527d8:	1813883a 	mov	r9,r3
   527dc:	3011883a 	mov	r8,r6
   527e0:	010000c4 	movi	r4,3
   527e4:	49c00015 	stw	r7,0(r9)
   527e8:	423fff04 	addi	r8,r8,-4
   527ec:	4a400104 	addi	r9,r9,4
   527f0:	223ffc36 	bltu	r4,r8,527e4 <memset+0x80>
   527f4:	313fff04 	addi	r4,r6,-4
   527f8:	2008d0ba 	srli	r4,r4,2
   527fc:	318000cc 	andi	r6,r6,3
   52800:	21000044 	addi	r4,r4,1
   52804:	2109883a 	add	r4,r4,r4
   52808:	2109883a 	add	r4,r4,r4
   5280c:	1907883a 	add	r3,r3,r4
   52810:	30000a26 	beq	r6,zero,5283c <memset+0xd8>
   52814:	198d883a 	add	r6,r3,r6
   52818:	19400005 	stb	r5,0(r3)
   5281c:	18c00044 	addi	r3,r3,1
   52820:	19bffd1e 	bne	r3,r6,52818 <memset+0xb4>
   52824:	f800283a 	ret
   52828:	2007883a 	mov	r3,r4
   5282c:	303ff91e 	bne	r6,zero,52814 <memset+0xb0>
   52830:	00000206 	br	5283c <memset+0xd8>
   52834:	2007883a 	mov	r3,r4
   52838:	003ff606 	br	52814 <memset+0xb0>
   5283c:	f800283a 	ret

00052840 <__sread>:
   52840:	defffe04 	addi	sp,sp,-8
   52844:	dc000015 	stw	r16,0(sp)
   52848:	2821883a 	mov	r16,r5
   5284c:	2940038f 	ldh	r5,14(r5)
   52850:	dfc00115 	stw	ra,4(sp)
   52854:	0052cd80 	call	52cd8 <_read_r>
   52858:	10000716 	blt	r2,zero,52878 <__sread+0x38>
   5285c:	80c01417 	ldw	r3,80(r16)
   52860:	1887883a 	add	r3,r3,r2
   52864:	80c01415 	stw	r3,80(r16)
   52868:	dfc00117 	ldw	ra,4(sp)
   5286c:	dc000017 	ldw	r16,0(sp)
   52870:	dec00204 	addi	sp,sp,8
   52874:	f800283a 	ret
   52878:	80c0030b 	ldhu	r3,12(r16)
   5287c:	18fbffcc 	andi	r3,r3,61439
   52880:	80c0030d 	sth	r3,12(r16)
   52884:	dfc00117 	ldw	ra,4(sp)
   52888:	dc000017 	ldw	r16,0(sp)
   5288c:	dec00204 	addi	sp,sp,8
   52890:	f800283a 	ret

00052894 <__swrite>:
   52894:	2880030b 	ldhu	r2,12(r5)
   52898:	defffb04 	addi	sp,sp,-20
   5289c:	dcc00315 	stw	r19,12(sp)
   528a0:	10c0400c 	andi	r3,r2,256
   528a4:	18ffffcc 	andi	r3,r3,65535
   528a8:	18e0001c 	xori	r3,r3,32768
   528ac:	dc800215 	stw	r18,8(sp)
   528b0:	dc400115 	stw	r17,4(sp)
   528b4:	dc000015 	stw	r16,0(sp)
   528b8:	dfc00415 	stw	ra,16(sp)
   528bc:	18e00004 	addi	r3,r3,-32768
   528c0:	2821883a 	mov	r16,r5
   528c4:	2027883a 	mov	r19,r4
   528c8:	3025883a 	mov	r18,r6
   528cc:	3823883a 	mov	r17,r7
   528d0:	18000526 	beq	r3,zero,528e8 <__swrite+0x54>
   528d4:	2940038f 	ldh	r5,14(r5)
   528d8:	000d883a 	mov	r6,zero
   528dc:	01c00084 	movi	r7,2
   528e0:	0052c6c0 	call	52c6c <_lseek_r>
   528e4:	8080030b 	ldhu	r2,12(r16)
   528e8:	8140038f 	ldh	r5,14(r16)
   528ec:	10bbffcc 	andi	r2,r2,61439
   528f0:	9809883a 	mov	r4,r19
   528f4:	900d883a 	mov	r6,r18
   528f8:	880f883a 	mov	r7,r17
   528fc:	8080030d 	sth	r2,12(r16)
   52900:	dfc00417 	ldw	ra,16(sp)
   52904:	dcc00317 	ldw	r19,12(sp)
   52908:	dc800217 	ldw	r18,8(sp)
   5290c:	dc400117 	ldw	r17,4(sp)
   52910:	dc000017 	ldw	r16,0(sp)
   52914:	dec00504 	addi	sp,sp,20
   52918:	00529801 	jmpi	52980 <_write_r>

0005291c <__sseek>:
   5291c:	defffe04 	addi	sp,sp,-8
   52920:	dc000015 	stw	r16,0(sp)
   52924:	2821883a 	mov	r16,r5
   52928:	2940038f 	ldh	r5,14(r5)
   5292c:	dfc00115 	stw	ra,4(sp)
   52930:	0052c6c0 	call	52c6c <_lseek_r>
   52934:	00ffffc4 	movi	r3,-1
   52938:	10c00826 	beq	r2,r3,5295c <__sseek+0x40>
   5293c:	80c0030b 	ldhu	r3,12(r16)
   52940:	80801415 	stw	r2,80(r16)
   52944:	18c40014 	ori	r3,r3,4096
   52948:	80c0030d 	sth	r3,12(r16)
   5294c:	dfc00117 	ldw	ra,4(sp)
   52950:	dc000017 	ldw	r16,0(sp)
   52954:	dec00204 	addi	sp,sp,8
   52958:	f800283a 	ret
   5295c:	80c0030b 	ldhu	r3,12(r16)
   52960:	18fbffcc 	andi	r3,r3,61439
   52964:	80c0030d 	sth	r3,12(r16)
   52968:	dfc00117 	ldw	ra,4(sp)
   5296c:	dc000017 	ldw	r16,0(sp)
   52970:	dec00204 	addi	sp,sp,8
   52974:	f800283a 	ret

00052978 <__sclose>:
   52978:	2940038f 	ldh	r5,14(r5)
   5297c:	00529ec1 	jmpi	529ec <_close_r>

00052980 <_write_r>:
   52980:	defffd04 	addi	sp,sp,-12
   52984:	dc400115 	stw	r17,4(sp)
   52988:	dc000015 	stw	r16,0(sp)
   5298c:	2023883a 	mov	r17,r4
   52990:	04000034 	movhi	r16,0
   52994:	8406a704 	addi	r16,r16,6812
   52998:	2809883a 	mov	r4,r5
   5299c:	300b883a 	mov	r5,r6
   529a0:	380d883a 	mov	r6,r7
   529a4:	dfc00215 	stw	ra,8(sp)
   529a8:	80000015 	stw	zero,0(r16)
   529ac:	00536340 	call	53634 <write>
   529b0:	00ffffc4 	movi	r3,-1
   529b4:	10c00526 	beq	r2,r3,529cc <_write_r+0x4c>
   529b8:	dfc00217 	ldw	ra,8(sp)
   529bc:	dc400117 	ldw	r17,4(sp)
   529c0:	dc000017 	ldw	r16,0(sp)
   529c4:	dec00304 	addi	sp,sp,12
   529c8:	f800283a 	ret
   529cc:	80c00017 	ldw	r3,0(r16)
   529d0:	183ff926 	beq	r3,zero,529b8 <_write_r+0x38>
   529d4:	88c00015 	stw	r3,0(r17)
   529d8:	dfc00217 	ldw	ra,8(sp)
   529dc:	dc400117 	ldw	r17,4(sp)
   529e0:	dc000017 	ldw	r16,0(sp)
   529e4:	dec00304 	addi	sp,sp,12
   529e8:	f800283a 	ret

000529ec <_close_r>:
   529ec:	defffd04 	addi	sp,sp,-12
   529f0:	dc400115 	stw	r17,4(sp)
   529f4:	dc000015 	stw	r16,0(sp)
   529f8:	2023883a 	mov	r17,r4
   529fc:	04000034 	movhi	r16,0
   52a00:	8406a704 	addi	r16,r16,6812
   52a04:	2809883a 	mov	r4,r5
   52a08:	dfc00215 	stw	ra,8(sp)
   52a0c:	80000015 	stw	zero,0(r16)
   52a10:	0052dbc0 	call	52dbc <close>
   52a14:	00ffffc4 	movi	r3,-1
   52a18:	10c00526 	beq	r2,r3,52a30 <_close_r+0x44>
   52a1c:	dfc00217 	ldw	ra,8(sp)
   52a20:	dc400117 	ldw	r17,4(sp)
   52a24:	dc000017 	ldw	r16,0(sp)
   52a28:	dec00304 	addi	sp,sp,12
   52a2c:	f800283a 	ret
   52a30:	80c00017 	ldw	r3,0(r16)
   52a34:	183ff926 	beq	r3,zero,52a1c <_close_r+0x30>
   52a38:	88c00015 	stw	r3,0(r17)
   52a3c:	dfc00217 	ldw	ra,8(sp)
   52a40:	dc400117 	ldw	r17,4(sp)
   52a44:	dc000017 	ldw	r16,0(sp)
   52a48:	dec00304 	addi	sp,sp,12
   52a4c:	f800283a 	ret

00052a50 <_fclose_r>:
   52a50:	defffc04 	addi	sp,sp,-16
   52a54:	dc400115 	stw	r17,4(sp)
   52a58:	dc000015 	stw	r16,0(sp)
   52a5c:	dfc00315 	stw	ra,12(sp)
   52a60:	dc800215 	stw	r18,8(sp)
   52a64:	2821883a 	mov	r16,r5
   52a68:	2023883a 	mov	r17,r4
   52a6c:	28003426 	beq	r5,zero,52b40 <_fclose_r+0xf0>
   52a70:	00520100 	call	52010 <__sfp_lock_acquire>
   52a74:	88000226 	beq	r17,zero,52a80 <_fclose_r+0x30>
   52a78:	88800e17 	ldw	r2,56(r17)
   52a7c:	10003826 	beq	r2,zero,52b60 <_fclose_r+0x110>
   52a80:	8080030f 	ldh	r2,12(r16)
   52a84:	10002526 	beq	r2,zero,52b1c <_fclose_r+0xcc>
   52a88:	8809883a 	mov	r4,r17
   52a8c:	800b883a 	mov	r5,r16
   52a90:	0051b4c0 	call	51b4c <_fflush_r>
   52a94:	1025883a 	mov	r18,r2
   52a98:	80800b17 	ldw	r2,44(r16)
   52a9c:	10000426 	beq	r2,zero,52ab0 <_fclose_r+0x60>
   52aa0:	81400717 	ldw	r5,28(r16)
   52aa4:	8809883a 	mov	r4,r17
   52aa8:	103ee83a 	callr	r2
   52aac:	10003516 	blt	r2,zero,52b84 <_fclose_r+0x134>
   52ab0:	8080030b 	ldhu	r2,12(r16)
   52ab4:	1080200c 	andi	r2,r2,128
   52ab8:	10bfffcc 	andi	r2,r2,65535
   52abc:	10a0001c 	xori	r2,r2,32768
   52ac0:	10a00004 	addi	r2,r2,-32768
   52ac4:	10002b1e 	bne	r2,zero,52b74 <_fclose_r+0x124>
   52ac8:	81400c17 	ldw	r5,48(r16)
   52acc:	28000526 	beq	r5,zero,52ae4 <_fclose_r+0x94>
   52ad0:	80801004 	addi	r2,r16,64
   52ad4:	28800226 	beq	r5,r2,52ae0 <_fclose_r+0x90>
   52ad8:	8809883a 	mov	r4,r17
   52adc:	005218c0 	call	5218c <_free_r>
   52ae0:	80000c15 	stw	zero,48(r16)
   52ae4:	81401117 	ldw	r5,68(r16)
   52ae8:	28000326 	beq	r5,zero,52af8 <_fclose_r+0xa8>
   52aec:	8809883a 	mov	r4,r17
   52af0:	005218c0 	call	5218c <_free_r>
   52af4:	80001115 	stw	zero,68(r16)
   52af8:	8000030d 	sth	zero,12(r16)
   52afc:	00520140 	call	52014 <__sfp_lock_release>
   52b00:	9005883a 	mov	r2,r18
   52b04:	dfc00317 	ldw	ra,12(sp)
   52b08:	dc800217 	ldw	r18,8(sp)
   52b0c:	dc400117 	ldw	r17,4(sp)
   52b10:	dc000017 	ldw	r16,0(sp)
   52b14:	dec00404 	addi	sp,sp,16
   52b18:	f800283a 	ret
   52b1c:	00520140 	call	52014 <__sfp_lock_release>
   52b20:	0025883a 	mov	r18,zero
   52b24:	9005883a 	mov	r2,r18
   52b28:	dfc00317 	ldw	ra,12(sp)
   52b2c:	dc800217 	ldw	r18,8(sp)
   52b30:	dc400117 	ldw	r17,4(sp)
   52b34:	dc000017 	ldw	r16,0(sp)
   52b38:	dec00404 	addi	sp,sp,16
   52b3c:	f800283a 	ret
   52b40:	0025883a 	mov	r18,zero
   52b44:	9005883a 	mov	r2,r18
   52b48:	dfc00317 	ldw	ra,12(sp)
   52b4c:	dc800217 	ldw	r18,8(sp)
   52b50:	dc400117 	ldw	r17,4(sp)
   52b54:	dc000017 	ldw	r16,0(sp)
   52b58:	dec00404 	addi	sp,sp,16
   52b5c:	f800283a 	ret
   52b60:	8809883a 	mov	r4,r17
   52b64:	0051e080 	call	51e08 <__sinit>
   52b68:	8080030f 	ldh	r2,12(r16)
   52b6c:	103fc61e 	bne	r2,zero,52a88 <_fclose_r+0x38>
   52b70:	003fea06 	br	52b1c <_fclose_r+0xcc>
   52b74:	81400417 	ldw	r5,16(r16)
   52b78:	8809883a 	mov	r4,r17
   52b7c:	005218c0 	call	5218c <_free_r>
   52b80:	003fd106 	br	52ac8 <_fclose_r+0x78>
   52b84:	04bfffc4 	movi	r18,-1
   52b88:	003fc906 	br	52ab0 <_fclose_r+0x60>

00052b8c <fclose>:
   52b8c:	00800034 	movhi	r2,0
   52b90:	10869704 	addi	r2,r2,6748
   52b94:	200b883a 	mov	r5,r4
   52b98:	11000017 	ldw	r4,0(r2)
   52b9c:	0052a501 	jmpi	52a50 <_fclose_r>

00052ba0 <_fstat_r>:
   52ba0:	defffd04 	addi	sp,sp,-12
   52ba4:	dc400115 	stw	r17,4(sp)
   52ba8:	dc000015 	stw	r16,0(sp)
   52bac:	2023883a 	mov	r17,r4
   52bb0:	04000034 	movhi	r16,0
   52bb4:	8406a704 	addi	r16,r16,6812
   52bb8:	2809883a 	mov	r4,r5
   52bbc:	300b883a 	mov	r5,r6
   52bc0:	dfc00215 	stw	ra,8(sp)
   52bc4:	80000015 	stw	zero,0(r16)
   52bc8:	0052f040 	call	52f04 <fstat>
   52bcc:	00ffffc4 	movi	r3,-1
   52bd0:	10c00526 	beq	r2,r3,52be8 <_fstat_r+0x48>
   52bd4:	dfc00217 	ldw	ra,8(sp)
   52bd8:	dc400117 	ldw	r17,4(sp)
   52bdc:	dc000017 	ldw	r16,0(sp)
   52be0:	dec00304 	addi	sp,sp,12
   52be4:	f800283a 	ret
   52be8:	80c00017 	ldw	r3,0(r16)
   52bec:	183ff926 	beq	r3,zero,52bd4 <_fstat_r+0x34>
   52bf0:	88c00015 	stw	r3,0(r17)
   52bf4:	dfc00217 	ldw	ra,8(sp)
   52bf8:	dc400117 	ldw	r17,4(sp)
   52bfc:	dc000017 	ldw	r16,0(sp)
   52c00:	dec00304 	addi	sp,sp,12
   52c04:	f800283a 	ret

00052c08 <_isatty_r>:
   52c08:	defffd04 	addi	sp,sp,-12
   52c0c:	dc400115 	stw	r17,4(sp)
   52c10:	dc000015 	stw	r16,0(sp)
   52c14:	2023883a 	mov	r17,r4
   52c18:	04000034 	movhi	r16,0
   52c1c:	8406a704 	addi	r16,r16,6812
   52c20:	2809883a 	mov	r4,r5
   52c24:	dfc00215 	stw	ra,8(sp)
   52c28:	80000015 	stw	zero,0(r16)
   52c2c:	00530040 	call	53004 <isatty>
   52c30:	00ffffc4 	movi	r3,-1
   52c34:	10c00526 	beq	r2,r3,52c4c <_isatty_r+0x44>
   52c38:	dfc00217 	ldw	ra,8(sp)
   52c3c:	dc400117 	ldw	r17,4(sp)
   52c40:	dc000017 	ldw	r16,0(sp)
   52c44:	dec00304 	addi	sp,sp,12
   52c48:	f800283a 	ret
   52c4c:	80c00017 	ldw	r3,0(r16)
   52c50:	183ff926 	beq	r3,zero,52c38 <_isatty_r+0x30>
   52c54:	88c00015 	stw	r3,0(r17)
   52c58:	dfc00217 	ldw	ra,8(sp)
   52c5c:	dc400117 	ldw	r17,4(sp)
   52c60:	dc000017 	ldw	r16,0(sp)
   52c64:	dec00304 	addi	sp,sp,12
   52c68:	f800283a 	ret

00052c6c <_lseek_r>:
   52c6c:	defffd04 	addi	sp,sp,-12
   52c70:	dc400115 	stw	r17,4(sp)
   52c74:	dc000015 	stw	r16,0(sp)
   52c78:	2023883a 	mov	r17,r4
   52c7c:	04000034 	movhi	r16,0
   52c80:	8406a704 	addi	r16,r16,6812
   52c84:	2809883a 	mov	r4,r5
   52c88:	300b883a 	mov	r5,r6
   52c8c:	380d883a 	mov	r6,r7
   52c90:	dfc00215 	stw	ra,8(sp)
   52c94:	80000015 	stw	zero,0(r16)
   52c98:	00531e40 	call	531e4 <lseek>
   52c9c:	00ffffc4 	movi	r3,-1
   52ca0:	10c00526 	beq	r2,r3,52cb8 <_lseek_r+0x4c>
   52ca4:	dfc00217 	ldw	ra,8(sp)
   52ca8:	dc400117 	ldw	r17,4(sp)
   52cac:	dc000017 	ldw	r16,0(sp)
   52cb0:	dec00304 	addi	sp,sp,12
   52cb4:	f800283a 	ret
   52cb8:	80c00017 	ldw	r3,0(r16)
   52cbc:	183ff926 	beq	r3,zero,52ca4 <_lseek_r+0x38>
   52cc0:	88c00015 	stw	r3,0(r17)
   52cc4:	dfc00217 	ldw	ra,8(sp)
   52cc8:	dc400117 	ldw	r17,4(sp)
   52ccc:	dc000017 	ldw	r16,0(sp)
   52cd0:	dec00304 	addi	sp,sp,12
   52cd4:	f800283a 	ret

00052cd8 <_read_r>:
   52cd8:	defffd04 	addi	sp,sp,-12
   52cdc:	dc400115 	stw	r17,4(sp)
   52ce0:	dc000015 	stw	r16,0(sp)
   52ce4:	2023883a 	mov	r17,r4
   52ce8:	04000034 	movhi	r16,0
   52cec:	8406a704 	addi	r16,r16,6812
   52cf0:	2809883a 	mov	r4,r5
   52cf4:	300b883a 	mov	r5,r6
   52cf8:	380d883a 	mov	r6,r7
   52cfc:	dfc00215 	stw	ra,8(sp)
   52d00:	80000015 	stw	zero,0(r16)
   52d04:	00533c00 	call	533c0 <read>
   52d08:	00ffffc4 	movi	r3,-1
   52d0c:	10c00526 	beq	r2,r3,52d24 <_read_r+0x4c>
   52d10:	dfc00217 	ldw	ra,8(sp)
   52d14:	dc400117 	ldw	r17,4(sp)
   52d18:	dc000017 	ldw	r16,0(sp)
   52d1c:	dec00304 	addi	sp,sp,12
   52d20:	f800283a 	ret
   52d24:	80c00017 	ldw	r3,0(r16)
   52d28:	183ff926 	beq	r3,zero,52d10 <_read_r+0x38>
   52d2c:	88c00015 	stw	r3,0(r17)
   52d30:	dfc00217 	ldw	ra,8(sp)
   52d34:	dc400117 	ldw	r17,4(sp)
   52d38:	dc000017 	ldw	r16,0(sp)
   52d3c:	dec00304 	addi	sp,sp,12
   52d40:	f800283a 	ret

00052d44 <__mulsi3>:
   52d44:	0005883a 	mov	r2,zero
   52d48:	20000726 	beq	r4,zero,52d68 <__mulsi3+0x24>
   52d4c:	20c0004c 	andi	r3,r4,1
   52d50:	2008d07a 	srli	r4,r4,1
   52d54:	18000126 	beq	r3,zero,52d5c <__mulsi3+0x18>
   52d58:	1145883a 	add	r2,r2,r5
   52d5c:	294b883a 	add	r5,r5,r5
   52d60:	203ffa1e 	bne	r4,zero,52d4c <__mulsi3+0x8>
   52d64:	f800283a 	ret
   52d68:	f800283a 	ret

00052d6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   52d6c:	defffe04 	addi	sp,sp,-8
   52d70:	dfc00115 	stw	ra,4(sp)
   52d74:	df000015 	stw	fp,0(sp)
   52d78:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   52d7c:	00800034 	movhi	r2,0
   52d80:	10869f04 	addi	r2,r2,6780
   52d84:	10800017 	ldw	r2,0(r2)
   52d88:	10000526 	beq	r2,zero,52da0 <alt_get_errno+0x34>
   52d8c:	00800034 	movhi	r2,0
   52d90:	10869f04 	addi	r2,r2,6780
   52d94:	10800017 	ldw	r2,0(r2)
   52d98:	103ee83a 	callr	r2
   52d9c:	00000206 	br	52da8 <alt_get_errno+0x3c>
   52da0:	00800034 	movhi	r2,0
   52da4:	1086a704 	addi	r2,r2,6812
}
   52da8:	e037883a 	mov	sp,fp
   52dac:	dfc00117 	ldw	ra,4(sp)
   52db0:	df000017 	ldw	fp,0(sp)
   52db4:	dec00204 	addi	sp,sp,8
   52db8:	f800283a 	ret

00052dbc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   52dbc:	defffb04 	addi	sp,sp,-20
   52dc0:	dfc00415 	stw	ra,16(sp)
   52dc4:	df000315 	stw	fp,12(sp)
   52dc8:	df000304 	addi	fp,sp,12
   52dcc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   52dd0:	e0bfff17 	ldw	r2,-4(fp)
   52dd4:	10000716 	blt	r2,zero,52df4 <close+0x38>
   52dd8:	e13fff17 	ldw	r4,-4(fp)
   52ddc:	01400304 	movi	r5,12
   52de0:	0052d440 	call	52d44 <__mulsi3>
   52de4:	00c00034 	movhi	r3,0
   52de8:	18c21e04 	addi	r3,r3,2168
   52dec:	10c5883a 	add	r2,r2,r3
   52df0:	00000106 	br	52df8 <close+0x3c>
   52df4:	0005883a 	mov	r2,zero
   52df8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   52dfc:	e0bffd17 	ldw	r2,-12(fp)
   52e00:	10001826 	beq	r2,zero,52e64 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   52e04:	e0bffd17 	ldw	r2,-12(fp)
   52e08:	10800017 	ldw	r2,0(r2)
   52e0c:	10800417 	ldw	r2,16(r2)
   52e10:	10000626 	beq	r2,zero,52e2c <close+0x70>
   52e14:	e0bffd17 	ldw	r2,-12(fp)
   52e18:	10800017 	ldw	r2,0(r2)
   52e1c:	10800417 	ldw	r2,16(r2)
   52e20:	e13ffd17 	ldw	r4,-12(fp)
   52e24:	103ee83a 	callr	r2
   52e28:	00000106 	br	52e30 <close+0x74>
   52e2c:	0005883a 	mov	r2,zero
   52e30:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   52e34:	e13fff17 	ldw	r4,-4(fp)
   52e38:	00534b40 	call	534b4 <alt_release_fd>
    if (rval < 0)
   52e3c:	e0bffe17 	ldw	r2,-8(fp)
   52e40:	1000060e 	bge	r2,zero,52e5c <close+0xa0>
    {
      ALT_ERRNO = -rval;
   52e44:	0052d6c0 	call	52d6c <alt_get_errno>
   52e48:	e0fffe17 	ldw	r3,-8(fp)
   52e4c:	00c7c83a 	sub	r3,zero,r3
   52e50:	10c00015 	stw	r3,0(r2)
      return -1;
   52e54:	00bfffc4 	movi	r2,-1
   52e58:	00000606 	br	52e74 <close+0xb8>
    }
    return 0;
   52e5c:	0005883a 	mov	r2,zero
   52e60:	00000406 	br	52e74 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   52e64:	0052d6c0 	call	52d6c <alt_get_errno>
   52e68:	00c01444 	movi	r3,81
   52e6c:	10c00015 	stw	r3,0(r2)
    return -1;
   52e70:	00bfffc4 	movi	r2,-1
  }
}
   52e74:	e037883a 	mov	sp,fp
   52e78:	dfc00117 	ldw	ra,4(sp)
   52e7c:	df000017 	ldw	fp,0(sp)
   52e80:	dec00204 	addi	sp,sp,8
   52e84:	f800283a 	ret

00052e88 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   52e88:	defffc04 	addi	sp,sp,-16
   52e8c:	df000315 	stw	fp,12(sp)
   52e90:	df000304 	addi	fp,sp,12
   52e94:	e13ffd15 	stw	r4,-12(fp)
   52e98:	e17ffe15 	stw	r5,-8(fp)
   52e9c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   52ea0:	e0bfff17 	ldw	r2,-4(fp)
}
   52ea4:	e037883a 	mov	sp,fp
   52ea8:	df000017 	ldw	fp,0(sp)
   52eac:	dec00104 	addi	sp,sp,4
   52eb0:	f800283a 	ret

00052eb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   52eb4:	defffe04 	addi	sp,sp,-8
   52eb8:	dfc00115 	stw	ra,4(sp)
   52ebc:	df000015 	stw	fp,0(sp)
   52ec0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   52ec4:	00800034 	movhi	r2,0
   52ec8:	10869f04 	addi	r2,r2,6780
   52ecc:	10800017 	ldw	r2,0(r2)
   52ed0:	10000526 	beq	r2,zero,52ee8 <alt_get_errno+0x34>
   52ed4:	00800034 	movhi	r2,0
   52ed8:	10869f04 	addi	r2,r2,6780
   52edc:	10800017 	ldw	r2,0(r2)
   52ee0:	103ee83a 	callr	r2
   52ee4:	00000206 	br	52ef0 <alt_get_errno+0x3c>
   52ee8:	00800034 	movhi	r2,0
   52eec:	1086a704 	addi	r2,r2,6812
}
   52ef0:	e037883a 	mov	sp,fp
   52ef4:	dfc00117 	ldw	ra,4(sp)
   52ef8:	df000017 	ldw	fp,0(sp)
   52efc:	dec00204 	addi	sp,sp,8
   52f00:	f800283a 	ret

00052f04 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   52f04:	defffb04 	addi	sp,sp,-20
   52f08:	dfc00415 	stw	ra,16(sp)
   52f0c:	df000315 	stw	fp,12(sp)
   52f10:	df000304 	addi	fp,sp,12
   52f14:	e13ffe15 	stw	r4,-8(fp)
   52f18:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   52f1c:	e0bffe17 	ldw	r2,-8(fp)
   52f20:	10000716 	blt	r2,zero,52f40 <fstat+0x3c>
   52f24:	e13ffe17 	ldw	r4,-8(fp)
   52f28:	01400304 	movi	r5,12
   52f2c:	0052d440 	call	52d44 <__mulsi3>
   52f30:	00c00034 	movhi	r3,0
   52f34:	18c21e04 	addi	r3,r3,2168
   52f38:	10c5883a 	add	r2,r2,r3
   52f3c:	00000106 	br	52f44 <fstat+0x40>
   52f40:	0005883a 	mov	r2,zero
   52f44:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   52f48:	e0bffd17 	ldw	r2,-12(fp)
   52f4c:	10001026 	beq	r2,zero,52f90 <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   52f50:	e0bffd17 	ldw	r2,-12(fp)
   52f54:	10800017 	ldw	r2,0(r2)
   52f58:	10800817 	ldw	r2,32(r2)
   52f5c:	10000726 	beq	r2,zero,52f7c <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
   52f60:	e0bffd17 	ldw	r2,-12(fp)
   52f64:	10800017 	ldw	r2,0(r2)
   52f68:	10800817 	ldw	r2,32(r2)
   52f6c:	e13ffd17 	ldw	r4,-12(fp)
   52f70:	e17fff17 	ldw	r5,-4(fp)
   52f74:	103ee83a 	callr	r2
   52f78:	00000906 	br	52fa0 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   52f7c:	e0bfff17 	ldw	r2,-4(fp)
   52f80:	00c80004 	movi	r3,8192
   52f84:	10c00115 	stw	r3,4(r2)
      return 0;
   52f88:	0005883a 	mov	r2,zero
   52f8c:	00000406 	br	52fa0 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   52f90:	0052eb40 	call	52eb4 <alt_get_errno>
   52f94:	00c01444 	movi	r3,81
   52f98:	10c00015 	stw	r3,0(r2)
    return -1;
   52f9c:	00bfffc4 	movi	r2,-1
  }
}
   52fa0:	e037883a 	mov	sp,fp
   52fa4:	dfc00117 	ldw	ra,4(sp)
   52fa8:	df000017 	ldw	fp,0(sp)
   52fac:	dec00204 	addi	sp,sp,8
   52fb0:	f800283a 	ret

00052fb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   52fb4:	defffe04 	addi	sp,sp,-8
   52fb8:	dfc00115 	stw	ra,4(sp)
   52fbc:	df000015 	stw	fp,0(sp)
   52fc0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   52fc4:	00800034 	movhi	r2,0
   52fc8:	10869f04 	addi	r2,r2,6780
   52fcc:	10800017 	ldw	r2,0(r2)
   52fd0:	10000526 	beq	r2,zero,52fe8 <alt_get_errno+0x34>
   52fd4:	00800034 	movhi	r2,0
   52fd8:	10869f04 	addi	r2,r2,6780
   52fdc:	10800017 	ldw	r2,0(r2)
   52fe0:	103ee83a 	callr	r2
   52fe4:	00000206 	br	52ff0 <alt_get_errno+0x3c>
   52fe8:	00800034 	movhi	r2,0
   52fec:	1086a704 	addi	r2,r2,6812
}
   52ff0:	e037883a 	mov	sp,fp
   52ff4:	dfc00117 	ldw	ra,4(sp)
   52ff8:	df000017 	ldw	fp,0(sp)
   52ffc:	dec00204 	addi	sp,sp,8
   53000:	f800283a 	ret

00053004 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   53004:	deffed04 	addi	sp,sp,-76
   53008:	dfc01215 	stw	ra,72(sp)
   5300c:	df001115 	stw	fp,68(sp)
   53010:	df001104 	addi	fp,sp,68
   53014:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   53018:	e0bfff17 	ldw	r2,-4(fp)
   5301c:	10000716 	blt	r2,zero,5303c <isatty+0x38>
   53020:	e13fff17 	ldw	r4,-4(fp)
   53024:	01400304 	movi	r5,12
   53028:	0052d440 	call	52d44 <__mulsi3>
   5302c:	00c00034 	movhi	r3,0
   53030:	18c21e04 	addi	r3,r3,2168
   53034:	10c5883a 	add	r2,r2,r3
   53038:	00000106 	br	53040 <isatty+0x3c>
   5303c:	0005883a 	mov	r2,zero
   53040:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   53044:	e0bfef17 	ldw	r2,-68(fp)
   53048:	10000e26 	beq	r2,zero,53084 <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   5304c:	e0bfef17 	ldw	r2,-68(fp)
   53050:	10800017 	ldw	r2,0(r2)
   53054:	10800817 	ldw	r2,32(r2)
   53058:	1000021e 	bne	r2,zero,53064 <isatty+0x60>
    {
      return 1;
   5305c:	00800044 	movi	r2,1
   53060:	00000c06 	br	53094 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   53064:	e0bff004 	addi	r2,fp,-64
   53068:	e13fff17 	ldw	r4,-4(fp)
   5306c:	100b883a 	mov	r5,r2
   53070:	0052f040 	call	52f04 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   53074:	e0bff117 	ldw	r2,-60(fp)
   53078:	10880020 	cmpeqi	r2,r2,8192
   5307c:	10803fcc 	andi	r2,r2,255
   53080:	00000406 	br	53094 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   53084:	0052fb40 	call	52fb4 <alt_get_errno>
   53088:	00c01444 	movi	r3,81
   5308c:	10c00015 	stw	r3,0(r2)
    return 0;
   53090:	0005883a 	mov	r2,zero
  }
}
   53094:	e037883a 	mov	sp,fp
   53098:	dfc00117 	ldw	ra,4(sp)
   5309c:	df000017 	ldw	fp,0(sp)
   530a0:	dec00204 	addi	sp,sp,8
   530a4:	f800283a 	ret

000530a8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   530a8:	defffc04 	addi	sp,sp,-16
   530ac:	df000315 	stw	fp,12(sp)
   530b0:	df000304 	addi	fp,sp,12
   530b4:	e13ffd15 	stw	r4,-12(fp)
   530b8:	e17ffe15 	stw	r5,-8(fp)
   530bc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   530c0:	e0fffe17 	ldw	r3,-8(fp)
   530c4:	e0bffd17 	ldw	r2,-12(fp)
   530c8:	18800e26 	beq	r3,r2,53104 <alt_load_section+0x5c>
  {
    while( to != end )
   530cc:	00000a06 	br	530f8 <alt_load_section+0x50>
    {
      *to++ = *from++;
   530d0:	e0bffd17 	ldw	r2,-12(fp)
   530d4:	10c00017 	ldw	r3,0(r2)
   530d8:	e0bffe17 	ldw	r2,-8(fp)
   530dc:	10c00015 	stw	r3,0(r2)
   530e0:	e0bffe17 	ldw	r2,-8(fp)
   530e4:	10800104 	addi	r2,r2,4
   530e8:	e0bffe15 	stw	r2,-8(fp)
   530ec:	e0bffd17 	ldw	r2,-12(fp)
   530f0:	10800104 	addi	r2,r2,4
   530f4:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   530f8:	e0fffe17 	ldw	r3,-8(fp)
   530fc:	e0bfff17 	ldw	r2,-4(fp)
   53100:	18bff31e 	bne	r3,r2,530d0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   53104:	e037883a 	mov	sp,fp
   53108:	df000017 	ldw	fp,0(sp)
   5310c:	dec00104 	addi	sp,sp,4
   53110:	f800283a 	ret

00053114 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   53114:	defffe04 	addi	sp,sp,-8
   53118:	dfc00115 	stw	ra,4(sp)
   5311c:	df000015 	stw	fp,0(sp)
   53120:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   53124:	01000174 	movhi	r4,5
   53128:	21155e04 	addi	r4,r4,21880
   5312c:	01400034 	movhi	r5,0
   53130:	29401204 	addi	r5,r5,72
   53134:	01800034 	movhi	r6,0
   53138:	3186a404 	addi	r6,r6,6800
   5313c:	00530a80 	call	530a8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   53140:	01000174 	movhi	r4,5
   53144:	21000804 	addi	r4,r4,32
   53148:	01400174 	movhi	r5,5
   5314c:	29400804 	addi	r5,r5,32
   53150:	01800174 	movhi	r6,5
   53154:	31806e04 	addi	r6,r6,440
   53158:	00530a80 	call	530a8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   5315c:	01000174 	movhi	r4,5
   53160:	21154c04 	addi	r4,r4,21808
   53164:	01400034 	movhi	r5,0
   53168:	29400004 	addi	r5,r5,0
   5316c:	01800034 	movhi	r6,0
   53170:	31801204 	addi	r6,r6,72
   53174:	00530a80 	call	530a8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   53178:	00544900 	call	54490 <alt_dcache_flush_all>
  alt_icache_flush_all();
   5317c:	00546540 	call	54654 <alt_icache_flush_all>
}
   53180:	e037883a 	mov	sp,fp
   53184:	dfc00117 	ldw	ra,4(sp)
   53188:	df000017 	ldw	fp,0(sp)
   5318c:	dec00204 	addi	sp,sp,8
   53190:	f800283a 	ret

00053194 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   53194:	defffe04 	addi	sp,sp,-8
   53198:	dfc00115 	stw	ra,4(sp)
   5319c:	df000015 	stw	fp,0(sp)
   531a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   531a4:	00800034 	movhi	r2,0
   531a8:	10869f04 	addi	r2,r2,6780
   531ac:	10800017 	ldw	r2,0(r2)
   531b0:	10000526 	beq	r2,zero,531c8 <alt_get_errno+0x34>
   531b4:	00800034 	movhi	r2,0
   531b8:	10869f04 	addi	r2,r2,6780
   531bc:	10800017 	ldw	r2,0(r2)
   531c0:	103ee83a 	callr	r2
   531c4:	00000206 	br	531d0 <alt_get_errno+0x3c>
   531c8:	00800034 	movhi	r2,0
   531cc:	1086a704 	addi	r2,r2,6812
}
   531d0:	e037883a 	mov	sp,fp
   531d4:	dfc00117 	ldw	ra,4(sp)
   531d8:	df000017 	ldw	fp,0(sp)
   531dc:	dec00204 	addi	sp,sp,8
   531e0:	f800283a 	ret

000531e4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   531e4:	defff904 	addi	sp,sp,-28
   531e8:	dfc00615 	stw	ra,24(sp)
   531ec:	df000515 	stw	fp,20(sp)
   531f0:	df000504 	addi	fp,sp,20
   531f4:	e13ffd15 	stw	r4,-12(fp)
   531f8:	e17ffe15 	stw	r5,-8(fp)
   531fc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   53200:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   53204:	e0bffd17 	ldw	r2,-12(fp)
   53208:	10000716 	blt	r2,zero,53228 <lseek+0x44>
   5320c:	e13ffd17 	ldw	r4,-12(fp)
   53210:	01400304 	movi	r5,12
   53214:	0052d440 	call	52d44 <__mulsi3>
   53218:	00c00034 	movhi	r3,0
   5321c:	18c21e04 	addi	r3,r3,2168
   53220:	10c5883a 	add	r2,r2,r3
   53224:	00000106 	br	5322c <lseek+0x48>
   53228:	0005883a 	mov	r2,zero
   5322c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   53230:	e0bffc17 	ldw	r2,-16(fp)
   53234:	10001026 	beq	r2,zero,53278 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   53238:	e0bffc17 	ldw	r2,-16(fp)
   5323c:	10800017 	ldw	r2,0(r2)
   53240:	10800717 	ldw	r2,28(r2)
   53244:	10000926 	beq	r2,zero,5326c <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   53248:	e0bffc17 	ldw	r2,-16(fp)
   5324c:	10800017 	ldw	r2,0(r2)
   53250:	10800717 	ldw	r2,28(r2)
   53254:	e13ffc17 	ldw	r4,-16(fp)
   53258:	e17ffe17 	ldw	r5,-8(fp)
   5325c:	e1bfff17 	ldw	r6,-4(fp)
   53260:	103ee83a 	callr	r2
   53264:	e0bffb15 	stw	r2,-20(fp)
   53268:	00000506 	br	53280 <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   5326c:	00bfde84 	movi	r2,-134
   53270:	e0bffb15 	stw	r2,-20(fp)
   53274:	00000206 	br	53280 <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
   53278:	00bfebc4 	movi	r2,-81
   5327c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   53280:	e0bffb17 	ldw	r2,-20(fp)
   53284:	1000060e 	bge	r2,zero,532a0 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   53288:	00531940 	call	53194 <alt_get_errno>
   5328c:	e0fffb17 	ldw	r3,-20(fp)
   53290:	00c7c83a 	sub	r3,zero,r3
   53294:	10c00015 	stw	r3,0(r2)
    rc = -1;
   53298:	00bfffc4 	movi	r2,-1
   5329c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   532a0:	e0bffb17 	ldw	r2,-20(fp)
}
   532a4:	e037883a 	mov	sp,fp
   532a8:	dfc00117 	ldw	ra,4(sp)
   532ac:	df000017 	ldw	fp,0(sp)
   532b0:	dec00204 	addi	sp,sp,8
   532b4:	f800283a 	ret

000532b8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   532b8:	defffd04 	addi	sp,sp,-12
   532bc:	dfc00215 	stw	ra,8(sp)
   532c0:	df000115 	stw	fp,4(sp)
   532c4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   532c8:	0009883a 	mov	r4,zero
   532cc:	005375c0 	call	5375c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   532d0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   532d4:	00537900 	call	53790 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   532d8:	01000034 	movhi	r4,0
   532dc:	21000a04 	addi	r4,r4,40
   532e0:	01400034 	movhi	r5,0
   532e4:	29400a04 	addi	r5,r5,40
   532e8:	01800034 	movhi	r6,0
   532ec:	31800a04 	addi	r6,r6,40
   532f0:	0054a180 	call	54a18 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   532f4:	005459c0 	call	5459c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   532f8:	01000174 	movhi	r4,5
   532fc:	21117e04 	addi	r4,r4,17912
   53300:	005515c0 	call	5515c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   53304:	d1201217 	ldw	r4,-32696(gp)
   53308:	d0e01317 	ldw	r3,-32692(gp)
   5330c:	d0a01417 	ldw	r2,-32688(gp)
   53310:	180b883a 	mov	r5,r3
   53314:	100d883a 	mov	r6,r2
   53318:	00501f40 	call	501f4 <main>
   5331c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   53320:	01000044 	movi	r4,1
   53324:	0052dbc0 	call	52dbc <close>
  exit (result);
   53328:	e13fff17 	ldw	r4,-4(fp)
   5332c:	00551700 	call	55170 <exit>

00053330 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   53330:	defffe04 	addi	sp,sp,-8
   53334:	df000115 	stw	fp,4(sp)
   53338:	df000104 	addi	fp,sp,4
   5333c:	e13fff15 	stw	r4,-4(fp)
}
   53340:	e037883a 	mov	sp,fp
   53344:	df000017 	ldw	fp,0(sp)
   53348:	dec00104 	addi	sp,sp,4
   5334c:	f800283a 	ret

00053350 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   53350:	defffe04 	addi	sp,sp,-8
   53354:	df000115 	stw	fp,4(sp)
   53358:	df000104 	addi	fp,sp,4
   5335c:	e13fff15 	stw	r4,-4(fp)
}
   53360:	e037883a 	mov	sp,fp
   53364:	df000017 	ldw	fp,0(sp)
   53368:	dec00104 	addi	sp,sp,4
   5336c:	f800283a 	ret

00053370 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   53370:	defffe04 	addi	sp,sp,-8
   53374:	dfc00115 	stw	ra,4(sp)
   53378:	df000015 	stw	fp,0(sp)
   5337c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   53380:	00800034 	movhi	r2,0
   53384:	10869f04 	addi	r2,r2,6780
   53388:	10800017 	ldw	r2,0(r2)
   5338c:	10000526 	beq	r2,zero,533a4 <alt_get_errno+0x34>
   53390:	00800034 	movhi	r2,0
   53394:	10869f04 	addi	r2,r2,6780
   53398:	10800017 	ldw	r2,0(r2)
   5339c:	103ee83a 	callr	r2
   533a0:	00000206 	br	533ac <alt_get_errno+0x3c>
   533a4:	00800034 	movhi	r2,0
   533a8:	1086a704 	addi	r2,r2,6812
}
   533ac:	e037883a 	mov	sp,fp
   533b0:	dfc00117 	ldw	ra,4(sp)
   533b4:	df000017 	ldw	fp,0(sp)
   533b8:	dec00204 	addi	sp,sp,8
   533bc:	f800283a 	ret

000533c0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   533c0:	defff904 	addi	sp,sp,-28
   533c4:	dfc00615 	stw	ra,24(sp)
   533c8:	df000515 	stw	fp,20(sp)
   533cc:	df000504 	addi	fp,sp,20
   533d0:	e13ffd15 	stw	r4,-12(fp)
   533d4:	e17ffe15 	stw	r5,-8(fp)
   533d8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   533dc:	e0bffd17 	ldw	r2,-12(fp)
   533e0:	10000716 	blt	r2,zero,53400 <read+0x40>
   533e4:	e13ffd17 	ldw	r4,-12(fp)
   533e8:	01400304 	movi	r5,12
   533ec:	0052d440 	call	52d44 <__mulsi3>
   533f0:	00c00034 	movhi	r3,0
   533f4:	18c21e04 	addi	r3,r3,2168
   533f8:	10c5883a 	add	r2,r2,r3
   533fc:	00000106 	br	53404 <read+0x44>
   53400:	0005883a 	mov	r2,zero
   53404:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   53408:	e0bffb17 	ldw	r2,-20(fp)
   5340c:	10002026 	beq	r2,zero,53490 <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   53410:	e0bffb17 	ldw	r2,-20(fp)
   53414:	10800217 	ldw	r2,8(r2)
   53418:	108000cc 	andi	r2,r2,3
   5341c:	10800060 	cmpeqi	r2,r2,1
   53420:	1000171e 	bne	r2,zero,53480 <read+0xc0>
        (fd->dev->read))
   53424:	e0bffb17 	ldw	r2,-20(fp)
   53428:	10800017 	ldw	r2,0(r2)
   5342c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   53430:	10001326 	beq	r2,zero,53480 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   53434:	e0bffb17 	ldw	r2,-20(fp)
   53438:	10800017 	ldw	r2,0(r2)
   5343c:	10c00517 	ldw	r3,20(r2)
   53440:	e0bfff17 	ldw	r2,-4(fp)
   53444:	e13ffb17 	ldw	r4,-20(fp)
   53448:	e17ffe17 	ldw	r5,-8(fp)
   5344c:	100d883a 	mov	r6,r2
   53450:	183ee83a 	callr	r3
   53454:	e0bffc15 	stw	r2,-16(fp)
   53458:	e0bffc17 	ldw	r2,-16(fp)
   5345c:	1000060e 	bge	r2,zero,53478 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   53460:	00533700 	call	53370 <alt_get_errno>
   53464:	e0fffc17 	ldw	r3,-16(fp)
   53468:	00c7c83a 	sub	r3,zero,r3
   5346c:	10c00015 	stw	r3,0(r2)
          return -1;
   53470:	00bfffc4 	movi	r2,-1
   53474:	00000a06 	br	534a0 <read+0xe0>
        }
        return rval;
   53478:	e0bffc17 	ldw	r2,-16(fp)
   5347c:	00000806 	br	534a0 <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   53480:	00533700 	call	53370 <alt_get_errno>
   53484:	00c00344 	movi	r3,13
   53488:	10c00015 	stw	r3,0(r2)
   5348c:	00000306 	br	5349c <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   53490:	00533700 	call	53370 <alt_get_errno>
   53494:	00c01444 	movi	r3,81
   53498:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   5349c:	00bfffc4 	movi	r2,-1
}
   534a0:	e037883a 	mov	sp,fp
   534a4:	dfc00117 	ldw	ra,4(sp)
   534a8:	df000017 	ldw	fp,0(sp)
   534ac:	dec00204 	addi	sp,sp,8
   534b0:	f800283a 	ret

000534b4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   534b4:	defffc04 	addi	sp,sp,-16
   534b8:	dfc00315 	stw	ra,12(sp)
   534bc:	df000215 	stw	fp,8(sp)
   534c0:	dc000115 	stw	r16,4(sp)
   534c4:	df000104 	addi	fp,sp,4
   534c8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   534cc:	e0bfff17 	ldw	r2,-4(fp)
   534d0:	108000d0 	cmplti	r2,r2,3
   534d4:	1000111e 	bne	r2,zero,5351c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   534d8:	04000034 	movhi	r16,0
   534dc:	84021e04 	addi	r16,r16,2168
   534e0:	e0bfff17 	ldw	r2,-4(fp)
   534e4:	1009883a 	mov	r4,r2
   534e8:	01400304 	movi	r5,12
   534ec:	0052d440 	call	52d44 <__mulsi3>
   534f0:	8085883a 	add	r2,r16,r2
   534f4:	10800204 	addi	r2,r2,8
   534f8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   534fc:	04000034 	movhi	r16,0
   53500:	84021e04 	addi	r16,r16,2168
   53504:	e0bfff17 	ldw	r2,-4(fp)
   53508:	1009883a 	mov	r4,r2
   5350c:	01400304 	movi	r5,12
   53510:	0052d440 	call	52d44 <__mulsi3>
   53514:	8085883a 	add	r2,r16,r2
   53518:	10000015 	stw	zero,0(r2)
  }
}
   5351c:	e037883a 	mov	sp,fp
   53520:	dfc00217 	ldw	ra,8(sp)
   53524:	df000117 	ldw	fp,4(sp)
   53528:	dc000017 	ldw	r16,0(sp)
   5352c:	dec00304 	addi	sp,sp,12
   53530:	f800283a 	ret

00053534 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   53534:	defff904 	addi	sp,sp,-28
   53538:	df000615 	stw	fp,24(sp)
   5353c:	df000604 	addi	fp,sp,24
   53540:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   53544:	0005303a 	rdctl	r2,status
   53548:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   5354c:	e0fffc17 	ldw	r3,-16(fp)
   53550:	00bfff84 	movi	r2,-2
   53554:	1884703a 	and	r2,r3,r2
   53558:	1001703a 	wrctl	status,r2
  
  return context;
   5355c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   53560:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   53564:	d0a00a17 	ldw	r2,-32728(gp)
   53568:	10c000c4 	addi	r3,r2,3
   5356c:	00bfff04 	movi	r2,-4
   53570:	1884703a 	and	r2,r3,r2
   53574:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   53578:	d0e00a17 	ldw	r3,-32728(gp)
   5357c:	e0bfff17 	ldw	r2,-4(fp)
   53580:	1885883a 	add	r2,r3,r2
   53584:	00c00134 	movhi	r3,4
   53588:	18c00004 	addi	r3,r3,0
   5358c:	1880062e 	bgeu	r3,r2,535a8 <sbrk+0x74>
   53590:	e0bffa17 	ldw	r2,-24(fp)
   53594:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   53598:	e0bffd17 	ldw	r2,-12(fp)
   5359c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   535a0:	00bfffc4 	movi	r2,-1
   535a4:	00000b06 	br	535d4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   535a8:	d0a00a17 	ldw	r2,-32728(gp)
   535ac:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   535b0:	d0e00a17 	ldw	r3,-32728(gp)
   535b4:	e0bfff17 	ldw	r2,-4(fp)
   535b8:	1885883a 	add	r2,r3,r2
   535bc:	d0a00a15 	stw	r2,-32728(gp)
   535c0:	e0bffa17 	ldw	r2,-24(fp)
   535c4:	e0bffe15 	stw	r2,-8(fp)
   535c8:	e0bffe17 	ldw	r2,-8(fp)
   535cc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   535d0:	e0bffb17 	ldw	r2,-20(fp)
} 
   535d4:	e037883a 	mov	sp,fp
   535d8:	df000017 	ldw	fp,0(sp)
   535dc:	dec00104 	addi	sp,sp,4
   535e0:	f800283a 	ret

000535e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   535e4:	defffe04 	addi	sp,sp,-8
   535e8:	dfc00115 	stw	ra,4(sp)
   535ec:	df000015 	stw	fp,0(sp)
   535f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   535f4:	00800034 	movhi	r2,0
   535f8:	10869f04 	addi	r2,r2,6780
   535fc:	10800017 	ldw	r2,0(r2)
   53600:	10000526 	beq	r2,zero,53618 <alt_get_errno+0x34>
   53604:	00800034 	movhi	r2,0
   53608:	10869f04 	addi	r2,r2,6780
   5360c:	10800017 	ldw	r2,0(r2)
   53610:	103ee83a 	callr	r2
   53614:	00000206 	br	53620 <alt_get_errno+0x3c>
   53618:	00800034 	movhi	r2,0
   5361c:	1086a704 	addi	r2,r2,6812
}
   53620:	e037883a 	mov	sp,fp
   53624:	dfc00117 	ldw	ra,4(sp)
   53628:	df000017 	ldw	fp,0(sp)
   5362c:	dec00204 	addi	sp,sp,8
   53630:	f800283a 	ret

00053634 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   53634:	defff904 	addi	sp,sp,-28
   53638:	dfc00615 	stw	ra,24(sp)
   5363c:	df000515 	stw	fp,20(sp)
   53640:	df000504 	addi	fp,sp,20
   53644:	e13ffd15 	stw	r4,-12(fp)
   53648:	e17ffe15 	stw	r5,-8(fp)
   5364c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   53650:	e0bffd17 	ldw	r2,-12(fp)
   53654:	10000716 	blt	r2,zero,53674 <write+0x40>
   53658:	e13ffd17 	ldw	r4,-12(fp)
   5365c:	01400304 	movi	r5,12
   53660:	0052d440 	call	52d44 <__mulsi3>
   53664:	00c00034 	movhi	r3,0
   53668:	18c21e04 	addi	r3,r3,2168
   5366c:	10c5883a 	add	r2,r2,r3
   53670:	00000106 	br	53678 <write+0x44>
   53674:	0005883a 	mov	r2,zero
   53678:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   5367c:	e0bffb17 	ldw	r2,-20(fp)
   53680:	10001f26 	beq	r2,zero,53700 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   53684:	e0bffb17 	ldw	r2,-20(fp)
   53688:	10800217 	ldw	r2,8(r2)
   5368c:	108000cc 	andi	r2,r2,3
   53690:	10001726 	beq	r2,zero,536f0 <write+0xbc>
   53694:	e0bffb17 	ldw	r2,-20(fp)
   53698:	10800017 	ldw	r2,0(r2)
   5369c:	10800617 	ldw	r2,24(r2)
   536a0:	10001326 	beq	r2,zero,536f0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   536a4:	e0bffb17 	ldw	r2,-20(fp)
   536a8:	10800017 	ldw	r2,0(r2)
   536ac:	10c00617 	ldw	r3,24(r2)
   536b0:	e0bfff17 	ldw	r2,-4(fp)
   536b4:	e13ffb17 	ldw	r4,-20(fp)
   536b8:	e17ffe17 	ldw	r5,-8(fp)
   536bc:	100d883a 	mov	r6,r2
   536c0:	183ee83a 	callr	r3
   536c4:	e0bffc15 	stw	r2,-16(fp)
   536c8:	e0bffc17 	ldw	r2,-16(fp)
   536cc:	1000060e 	bge	r2,zero,536e8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   536d0:	00535e40 	call	535e4 <alt_get_errno>
   536d4:	e0fffc17 	ldw	r3,-16(fp)
   536d8:	00c7c83a 	sub	r3,zero,r3
   536dc:	10c00015 	stw	r3,0(r2)
        return -1;
   536e0:	00bfffc4 	movi	r2,-1
   536e4:	00000a06 	br	53710 <write+0xdc>
      }
      return rval;
   536e8:	e0bffc17 	ldw	r2,-16(fp)
   536ec:	00000806 	br	53710 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
   536f0:	00535e40 	call	535e4 <alt_get_errno>
   536f4:	00c00344 	movi	r3,13
   536f8:	10c00015 	stw	r3,0(r2)
   536fc:	00000306 	br	5370c <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   53700:	00535e40 	call	535e4 <alt_get_errno>
   53704:	00c01444 	movi	r3,81
   53708:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   5370c:	00bfffc4 	movi	r2,-1
}
   53710:	e037883a 	mov	sp,fp
   53714:	dfc00117 	ldw	ra,4(sp)
   53718:	df000017 	ldw	fp,0(sp)
   5371c:	dec00204 	addi	sp,sp,8
   53720:	f800283a 	ret

00053724 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   53724:	defffd04 	addi	sp,sp,-12
   53728:	dfc00215 	stw	ra,8(sp)
   5372c:	df000115 	stw	fp,4(sp)
   53730:	df000104 	addi	fp,sp,4
   53734:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   53738:	e13fff17 	ldw	r4,-4(fp)
   5373c:	01400034 	movhi	r5,0
   53740:	29469c04 	addi	r5,r5,6768
   53744:	00544fc0 	call	544fc <alt_dev_llist_insert>
}
   53748:	e037883a 	mov	sp,fp
   5374c:	dfc00117 	ldw	ra,4(sp)
   53750:	df000017 	ldw	fp,0(sp)
   53754:	dec00204 	addi	sp,sp,8
   53758:	f800283a 	ret

0005375c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   5375c:	defffd04 	addi	sp,sp,-12
   53760:	dfc00215 	stw	ra,8(sp)
   53764:	df000115 	stw	fp,4(sp)
   53768:	df000104 	addi	fp,sp,4
   5376c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU0, cpu0);
   53770:	0054ec40 	call	54ec4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   53774:	00800044 	movi	r2,1
   53778:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   5377c:	e037883a 	mov	sp,fp
   53780:	dfc00117 	ldw	ra,4(sp)
   53784:	df000017 	ldw	fp,0(sp)
   53788:	dec00204 	addi	sp,sp,8
   5378c:	f800283a 	ret

00053790 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   53790:	defffe04 	addi	sp,sp,-8
   53794:	dfc00115 	stw	ra,4(sp)
   53798:	df000015 	stw	fp,0(sp)
   5379c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER0, timer0);
   537a0:	010001b4 	movhi	r4,6
   537a4:	21040004 	addi	r4,r4,4096
   537a8:	000b883a 	mov	r5,zero
   537ac:	000d883a 	mov	r6,zero
   537b0:	01c0fa04 	movi	r7,1000
   537b4:	00542c80 	call	542c8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART0, jtag_uart0);
   537b8:	01000034 	movhi	r4,0
   537bc:	21028804 	addi	r4,r4,2592
   537c0:	000b883a 	mov	r5,zero
   537c4:	01800404 	movi	r6,16
   537c8:	00539540 	call	53954 <altera_avalon_jtag_uart_init>
   537cc:	01000034 	movhi	r4,0
   537d0:	21027e04 	addi	r4,r4,2552
   537d4:	00537240 	call	53724 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID0, sysid0);
   537d8:	0001883a 	nop
}
   537dc:	e037883a 	mov	sp,fp
   537e0:	dfc00117 	ldw	ra,4(sp)
   537e4:	df000017 	ldw	fp,0(sp)
   537e8:	dec00204 	addi	sp,sp,8
   537ec:	f800283a 	ret

000537f0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   537f0:	defffa04 	addi	sp,sp,-24
   537f4:	dfc00515 	stw	ra,20(sp)
   537f8:	df000415 	stw	fp,16(sp)
   537fc:	df000404 	addi	fp,sp,16
   53800:	e13ffd15 	stw	r4,-12(fp)
   53804:	e17ffe15 	stw	r5,-8(fp)
   53808:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   5380c:	e0bffd17 	ldw	r2,-12(fp)
   53810:	10800017 	ldw	r2,0(r2)
   53814:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   53818:	e0bffc17 	ldw	r2,-16(fp)
   5381c:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   53820:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   53824:	10800217 	ldw	r2,8(r2)
   53828:	1809883a 	mov	r4,r3
   5382c:	e17ffe17 	ldw	r5,-8(fp)
   53830:	e1bfff17 	ldw	r6,-4(fp)
   53834:	100f883a 	mov	r7,r2
   53838:	0053e180 	call	53e18 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   5383c:	e037883a 	mov	sp,fp
   53840:	dfc00117 	ldw	ra,4(sp)
   53844:	df000017 	ldw	fp,0(sp)
   53848:	dec00204 	addi	sp,sp,8
   5384c:	f800283a 	ret

00053850 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   53850:	defffa04 	addi	sp,sp,-24
   53854:	dfc00515 	stw	ra,20(sp)
   53858:	df000415 	stw	fp,16(sp)
   5385c:	df000404 	addi	fp,sp,16
   53860:	e13ffd15 	stw	r4,-12(fp)
   53864:	e17ffe15 	stw	r5,-8(fp)
   53868:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   5386c:	e0bffd17 	ldw	r2,-12(fp)
   53870:	10800017 	ldw	r2,0(r2)
   53874:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   53878:	e0bffc17 	ldw	r2,-16(fp)
   5387c:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   53880:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   53884:	10800217 	ldw	r2,8(r2)
   53888:	1809883a 	mov	r4,r3
   5388c:	e17ffe17 	ldw	r5,-8(fp)
   53890:	e1bfff17 	ldw	r6,-4(fp)
   53894:	100f883a 	mov	r7,r2
   53898:	00540300 	call	54030 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   5389c:	e037883a 	mov	sp,fp
   538a0:	dfc00117 	ldw	ra,4(sp)
   538a4:	df000017 	ldw	fp,0(sp)
   538a8:	dec00204 	addi	sp,sp,8
   538ac:	f800283a 	ret

000538b0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   538b0:	defffc04 	addi	sp,sp,-16
   538b4:	dfc00315 	stw	ra,12(sp)
   538b8:	df000215 	stw	fp,8(sp)
   538bc:	df000204 	addi	fp,sp,8
   538c0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   538c4:	e0bfff17 	ldw	r2,-4(fp)
   538c8:	10800017 	ldw	r2,0(r2)
   538cc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   538d0:	e0bffe17 	ldw	r2,-8(fp)
   538d4:	10c00a04 	addi	r3,r2,40
   538d8:	e0bfff17 	ldw	r2,-4(fp)
   538dc:	10800217 	ldw	r2,8(r2)
   538e0:	1809883a 	mov	r4,r3
   538e4:	100b883a 	mov	r5,r2
   538e8:	0053cbc0 	call	53cbc <altera_avalon_jtag_uart_close>
}
   538ec:	e037883a 	mov	sp,fp
   538f0:	dfc00117 	ldw	ra,4(sp)
   538f4:	df000017 	ldw	fp,0(sp)
   538f8:	dec00204 	addi	sp,sp,8
   538fc:	f800283a 	ret

00053900 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   53900:	defffa04 	addi	sp,sp,-24
   53904:	dfc00515 	stw	ra,20(sp)
   53908:	df000415 	stw	fp,16(sp)
   5390c:	df000404 	addi	fp,sp,16
   53910:	e13ffd15 	stw	r4,-12(fp)
   53914:	e17ffe15 	stw	r5,-8(fp)
   53918:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   5391c:	e0bffd17 	ldw	r2,-12(fp)
   53920:	10800017 	ldw	r2,0(r2)
   53924:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   53928:	e0bffc17 	ldw	r2,-16(fp)
   5392c:	10800a04 	addi	r2,r2,40
   53930:	1009883a 	mov	r4,r2
   53934:	e17ffe17 	ldw	r5,-8(fp)
   53938:	e1bfff17 	ldw	r6,-4(fp)
   5393c:	0053d240 	call	53d24 <altera_avalon_jtag_uart_ioctl>
}
   53940:	e037883a 	mov	sp,fp
   53944:	dfc00117 	ldw	ra,4(sp)
   53948:	df000017 	ldw	fp,0(sp)
   5394c:	dec00204 	addi	sp,sp,8
   53950:	f800283a 	ret

00053954 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   53954:	defffa04 	addi	sp,sp,-24
   53958:	dfc00515 	stw	ra,20(sp)
   5395c:	df000415 	stw	fp,16(sp)
   53960:	df000404 	addi	fp,sp,16
   53964:	e13ffd15 	stw	r4,-12(fp)
   53968:	e17ffe15 	stw	r5,-8(fp)
   5396c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   53970:	e0bffd17 	ldw	r2,-12(fp)
   53974:	00c00044 	movi	r3,1
   53978:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   5397c:	e0bffd17 	ldw	r2,-12(fp)
   53980:	10800017 	ldw	r2,0(r2)
   53984:	10800104 	addi	r2,r2,4
   53988:	e0fffd17 	ldw	r3,-12(fp)
   5398c:	18c00817 	ldw	r3,32(r3)
   53990:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   53994:	e0fffe17 	ldw	r3,-8(fp)
   53998:	e0bfff17 	ldw	r2,-4(fp)
   5399c:	d8000015 	stw	zero,0(sp)
   539a0:	1809883a 	mov	r4,r3
   539a4:	100b883a 	mov	r5,r2
   539a8:	01800174 	movhi	r6,5
   539ac:	318e8504 	addi	r6,r6,14868
   539b0:	e1fffd17 	ldw	r7,-12(fp)
   539b4:	00546700 	call	54670 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   539b8:	e0bffd17 	ldw	r2,-12(fp)
   539bc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   539c0:	e0bffd17 	ldw	r2,-12(fp)
   539c4:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   539c8:	00800034 	movhi	r2,0
   539cc:	1086ac04 	addi	r2,r2,6832
   539d0:	10800017 	ldw	r2,0(r2)
   539d4:	1809883a 	mov	r4,r3
   539d8:	100b883a 	mov	r5,r2
   539dc:	01800174 	movhi	r6,5
   539e0:	318f0604 	addi	r6,r6,15384
   539e4:	e1fffd17 	ldw	r7,-12(fp)
   539e8:	00543500 	call	54350 <alt_alarm_start>
   539ec:	1000040e 	bge	r2,zero,53a00 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   539f0:	e0bffd17 	ldw	r2,-12(fp)
   539f4:	00e00034 	movhi	r3,32768
   539f8:	18ffffc4 	addi	r3,r3,-1
   539fc:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   53a00:	e037883a 	mov	sp,fp
   53a04:	dfc00117 	ldw	ra,4(sp)
   53a08:	df000017 	ldw	fp,0(sp)
   53a0c:	dec00204 	addi	sp,sp,8
   53a10:	f800283a 	ret

00053a14 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   53a14:	defff804 	addi	sp,sp,-32
   53a18:	df000715 	stw	fp,28(sp)
   53a1c:	df000704 	addi	fp,sp,28
   53a20:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   53a24:	e0bfff17 	ldw	r2,-4(fp)
   53a28:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   53a2c:	e0bffb17 	ldw	r2,-20(fp)
   53a30:	10800017 	ldw	r2,0(r2)
   53a34:	e0bffc15 	stw	r2,-16(fp)
   53a38:	00000106 	br	53a40 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
   53a3c:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   53a40:	e0bffc17 	ldw	r2,-16(fp)
   53a44:	10800104 	addi	r2,r2,4
   53a48:	10800037 	ldwio	r2,0(r2)
   53a4c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   53a50:	e0bffd17 	ldw	r2,-12(fp)
   53a54:	1080c00c 	andi	r2,r2,768
   53a58:	10006a26 	beq	r2,zero,53c04 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   53a5c:	e0bffd17 	ldw	r2,-12(fp)
   53a60:	1080400c 	andi	r2,r2,256
   53a64:	10003326 	beq	r2,zero,53b34 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   53a68:	00800074 	movhi	r2,1
   53a6c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   53a70:	e0bffb17 	ldw	r2,-20(fp)
   53a74:	10800a17 	ldw	r2,40(r2)
   53a78:	10800044 	addi	r2,r2,1
   53a7c:	1081ffcc 	andi	r2,r2,2047
   53a80:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   53a84:	e0bffb17 	ldw	r2,-20(fp)
   53a88:	10c00b17 	ldw	r3,44(r2)
   53a8c:	e0bffe17 	ldw	r2,-8(fp)
   53a90:	18801426 	beq	r3,r2,53ae4 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   53a94:	e0bffc17 	ldw	r2,-16(fp)
   53a98:	10800037 	ldwio	r2,0(r2)
   53a9c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   53aa0:	e0bff917 	ldw	r2,-28(fp)
   53aa4:	10a0000c 	andi	r2,r2,32768
   53aa8:	10001026 	beq	r2,zero,53aec <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   53aac:	e0bffb17 	ldw	r2,-20(fp)
   53ab0:	10800a17 	ldw	r2,40(r2)
   53ab4:	e0fff917 	ldw	r3,-28(fp)
   53ab8:	e13ffb17 	ldw	r4,-20(fp)
   53abc:	2085883a 	add	r2,r4,r2
   53ac0:	10800e04 	addi	r2,r2,56
   53ac4:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   53ac8:	e0bffb17 	ldw	r2,-20(fp)
   53acc:	10800a17 	ldw	r2,40(r2)
   53ad0:	10800044 	addi	r2,r2,1
   53ad4:	10c1ffcc 	andi	r3,r2,2047
   53ad8:	e0bffb17 	ldw	r2,-20(fp)
   53adc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   53ae0:	003fe306 	br	53a70 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   53ae4:	0001883a 	nop
   53ae8:	00000106 	br	53af0 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   53aec:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   53af0:	e0bff917 	ldw	r2,-28(fp)
   53af4:	10bfffec 	andhi	r2,r2,65535
   53af8:	10000e26 	beq	r2,zero,53b34 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   53afc:	e0bffb17 	ldw	r2,-20(fp)
   53b00:	10c00817 	ldw	r3,32(r2)
   53b04:	00bfff84 	movi	r2,-2
   53b08:	1886703a 	and	r3,r3,r2
   53b0c:	e0bffb17 	ldw	r2,-20(fp)
   53b10:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   53b14:	e0bffc17 	ldw	r2,-16(fp)
   53b18:	10800104 	addi	r2,r2,4
   53b1c:	e0fffb17 	ldw	r3,-20(fp)
   53b20:	18c00817 	ldw	r3,32(r3)
   53b24:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   53b28:	e0bffc17 	ldw	r2,-16(fp)
   53b2c:	10800104 	addi	r2,r2,4
   53b30:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   53b34:	e0bffd17 	ldw	r2,-12(fp)
   53b38:	1080800c 	andi	r2,r2,512
   53b3c:	103fbf26 	beq	r2,zero,53a3c <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   53b40:	e0bffd17 	ldw	r2,-12(fp)
   53b44:	1004d43a 	srli	r2,r2,16
   53b48:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   53b4c:	00001406 	br	53ba0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   53b50:	e0bffc17 	ldw	r2,-16(fp)
   53b54:	e0fffb17 	ldw	r3,-20(fp)
   53b58:	18c00d17 	ldw	r3,52(r3)
   53b5c:	e13ffb17 	ldw	r4,-20(fp)
   53b60:	20c7883a 	add	r3,r4,r3
   53b64:	18c20e04 	addi	r3,r3,2104
   53b68:	18c00003 	ldbu	r3,0(r3)
   53b6c:	18c03fcc 	andi	r3,r3,255
   53b70:	18c0201c 	xori	r3,r3,128
   53b74:	18ffe004 	addi	r3,r3,-128
   53b78:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   53b7c:	e0bffb17 	ldw	r2,-20(fp)
   53b80:	10800d17 	ldw	r2,52(r2)
   53b84:	10800044 	addi	r2,r2,1
   53b88:	10c1ffcc 	andi	r3,r2,2047
   53b8c:	e0bffb17 	ldw	r2,-20(fp)
   53b90:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   53b94:	e0bffa17 	ldw	r2,-24(fp)
   53b98:	10bfffc4 	addi	r2,r2,-1
   53b9c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   53ba0:	e0bffa17 	ldw	r2,-24(fp)
   53ba4:	10000526 	beq	r2,zero,53bbc <altera_avalon_jtag_uart_irq+0x1a8>
   53ba8:	e0bffb17 	ldw	r2,-20(fp)
   53bac:	10c00d17 	ldw	r3,52(r2)
   53bb0:	e0bffb17 	ldw	r2,-20(fp)
   53bb4:	10800c17 	ldw	r2,48(r2)
   53bb8:	18bfe51e 	bne	r3,r2,53b50 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   53bbc:	e0bffa17 	ldw	r2,-24(fp)
   53bc0:	103f9e26 	beq	r2,zero,53a3c <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   53bc4:	e0bffb17 	ldw	r2,-20(fp)
   53bc8:	10c00817 	ldw	r3,32(r2)
   53bcc:	00bfff44 	movi	r2,-3
   53bd0:	1886703a 	and	r3,r3,r2
   53bd4:	e0bffb17 	ldw	r2,-20(fp)
   53bd8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   53bdc:	e0bffb17 	ldw	r2,-20(fp)
   53be0:	10800017 	ldw	r2,0(r2)
   53be4:	10800104 	addi	r2,r2,4
   53be8:	e0fffb17 	ldw	r3,-20(fp)
   53bec:	18c00817 	ldw	r3,32(r3)
   53bf0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   53bf4:	e0bffc17 	ldw	r2,-16(fp)
   53bf8:	10800104 	addi	r2,r2,4
   53bfc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   53c00:	003f8e06 	br	53a3c <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   53c04:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   53c08:	e037883a 	mov	sp,fp
   53c0c:	df000017 	ldw	fp,0(sp)
   53c10:	dec00104 	addi	sp,sp,4
   53c14:	f800283a 	ret

00053c18 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   53c18:	defffc04 	addi	sp,sp,-16
   53c1c:	df000315 	stw	fp,12(sp)
   53c20:	df000304 	addi	fp,sp,12
   53c24:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   53c28:	e0bfff17 	ldw	r2,-4(fp)
   53c2c:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   53c30:	e0bffd17 	ldw	r2,-12(fp)
   53c34:	10800017 	ldw	r2,0(r2)
   53c38:	10800104 	addi	r2,r2,4
   53c3c:	10800037 	ldwio	r2,0(r2)
   53c40:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   53c44:	e0bffe17 	ldw	r2,-8(fp)
   53c48:	1081000c 	andi	r2,r2,1024
   53c4c:	10000a26 	beq	r2,zero,53c78 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   53c50:	e0bffd17 	ldw	r2,-12(fp)
   53c54:	10800017 	ldw	r2,0(r2)
   53c58:	10800104 	addi	r2,r2,4
   53c5c:	e0fffd17 	ldw	r3,-12(fp)
   53c60:	18c00817 	ldw	r3,32(r3)
   53c64:	18c10014 	ori	r3,r3,1024
   53c68:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   53c6c:	e0bffd17 	ldw	r2,-12(fp)
   53c70:	10000915 	stw	zero,36(r2)
   53c74:	00000a06 	br	53ca0 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   53c78:	e0bffd17 	ldw	r2,-12(fp)
   53c7c:	10800917 	ldw	r2,36(r2)
   53c80:	00e00034 	movhi	r3,32768
   53c84:	18ffff04 	addi	r3,r3,-4
   53c88:	18800536 	bltu	r3,r2,53ca0 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
   53c8c:	e0bffd17 	ldw	r2,-12(fp)
   53c90:	10800917 	ldw	r2,36(r2)
   53c94:	10c00044 	addi	r3,r2,1
   53c98:	e0bffd17 	ldw	r2,-12(fp)
   53c9c:	10c00915 	stw	r3,36(r2)
   53ca0:	00800034 	movhi	r2,0
   53ca4:	1086ac04 	addi	r2,r2,6832
   53ca8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   53cac:	e037883a 	mov	sp,fp
   53cb0:	df000017 	ldw	fp,0(sp)
   53cb4:	dec00104 	addi	sp,sp,4
   53cb8:	f800283a 	ret

00053cbc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   53cbc:	defffd04 	addi	sp,sp,-12
   53cc0:	df000215 	stw	fp,8(sp)
   53cc4:	df000204 	addi	fp,sp,8
   53cc8:	e13ffe15 	stw	r4,-8(fp)
   53ccc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   53cd0:	00000506 	br	53ce8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   53cd4:	e0bfff17 	ldw	r2,-4(fp)
   53cd8:	1090000c 	andi	r2,r2,16384
   53cdc:	10000226 	beq	r2,zero,53ce8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   53ce0:	00bffd44 	movi	r2,-11
   53ce4:	00000b06 	br	53d14 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   53ce8:	e0bffe17 	ldw	r2,-8(fp)
   53cec:	10c00d17 	ldw	r3,52(r2)
   53cf0:	e0bffe17 	ldw	r2,-8(fp)
   53cf4:	10800c17 	ldw	r2,48(r2)
   53cf8:	18800526 	beq	r3,r2,53d10 <altera_avalon_jtag_uart_close+0x54>
   53cfc:	e0bffe17 	ldw	r2,-8(fp)
   53d00:	10c00917 	ldw	r3,36(r2)
   53d04:	e0bffe17 	ldw	r2,-8(fp)
   53d08:	10800117 	ldw	r2,4(r2)
   53d0c:	18bff136 	bltu	r3,r2,53cd4 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   53d10:	0005883a 	mov	r2,zero
}
   53d14:	e037883a 	mov	sp,fp
   53d18:	df000017 	ldw	fp,0(sp)
   53d1c:	dec00104 	addi	sp,sp,4
   53d20:	f800283a 	ret

00053d24 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   53d24:	defffa04 	addi	sp,sp,-24
   53d28:	df000515 	stw	fp,20(sp)
   53d2c:	df000504 	addi	fp,sp,20
   53d30:	e13ffd15 	stw	r4,-12(fp)
   53d34:	e17ffe15 	stw	r5,-8(fp)
   53d38:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   53d3c:	00bff9c4 	movi	r2,-25
   53d40:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   53d44:	e0bffe17 	ldw	r2,-8(fp)
   53d48:	10da8060 	cmpeqi	r3,r2,27137
   53d4c:	1800031e 	bne	r3,zero,53d5c <altera_avalon_jtag_uart_ioctl+0x38>
   53d50:	109a80a0 	cmpeqi	r2,r2,27138
   53d54:	1000181e 	bne	r2,zero,53db8 <altera_avalon_jtag_uart_ioctl+0x94>
   53d58:	00002606 	br	53df4 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   53d5c:	e0bffd17 	ldw	r2,-12(fp)
   53d60:	10c00117 	ldw	r3,4(r2)
   53d64:	00a00034 	movhi	r2,32768
   53d68:	10bfffc4 	addi	r2,r2,-1
   53d6c:	18802226 	beq	r3,r2,53df8 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
   53d70:	e0bfff17 	ldw	r2,-4(fp)
   53d74:	10800017 	ldw	r2,0(r2)
   53d78:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   53d7c:	e0bffc17 	ldw	r2,-16(fp)
   53d80:	10800090 	cmplti	r2,r2,2
   53d84:	1000061e 	bne	r2,zero,53da0 <altera_avalon_jtag_uart_ioctl+0x7c>
   53d88:	e0fffc17 	ldw	r3,-16(fp)
   53d8c:	00a00034 	movhi	r2,32768
   53d90:	10bfffc4 	addi	r2,r2,-1
   53d94:	18800226 	beq	r3,r2,53da0 <altera_avalon_jtag_uart_ioctl+0x7c>
   53d98:	e0bffc17 	ldw	r2,-16(fp)
   53d9c:	00000206 	br	53da8 <altera_avalon_jtag_uart_ioctl+0x84>
   53da0:	00a00034 	movhi	r2,32768
   53da4:	10bfff84 	addi	r2,r2,-2
   53da8:	e0fffd17 	ldw	r3,-12(fp)
   53dac:	18800115 	stw	r2,4(r3)
      rc = 0;
   53db0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   53db4:	00001006 	br	53df8 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   53db8:	e0bffd17 	ldw	r2,-12(fp)
   53dbc:	10c00117 	ldw	r3,4(r2)
   53dc0:	00a00034 	movhi	r2,32768
   53dc4:	10bfffc4 	addi	r2,r2,-1
   53dc8:	18800d26 	beq	r3,r2,53e00 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   53dcc:	e0bffd17 	ldw	r2,-12(fp)
   53dd0:	10c00917 	ldw	r3,36(r2)
   53dd4:	e0bffd17 	ldw	r2,-12(fp)
   53dd8:	10800117 	ldw	r2,4(r2)
   53ddc:	1885803a 	cmpltu	r2,r3,r2
   53de0:	10c03fcc 	andi	r3,r2,255
   53de4:	e0bfff17 	ldw	r2,-4(fp)
   53de8:	10c00015 	stw	r3,0(r2)
      rc = 0;
   53dec:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   53df0:	00000306 	br	53e00 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
   53df4:	00000306 	br	53e04 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   53df8:	0001883a 	nop
   53dfc:	00000106 	br	53e04 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   53e00:	0001883a 	nop

  default:
    break;
  }

  return rc;
   53e04:	e0bffb17 	ldw	r2,-20(fp)
}
   53e08:	e037883a 	mov	sp,fp
   53e0c:	df000017 	ldw	fp,0(sp)
   53e10:	dec00104 	addi	sp,sp,4
   53e14:	f800283a 	ret

00053e18 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   53e18:	defff304 	addi	sp,sp,-52
   53e1c:	dfc00c15 	stw	ra,48(sp)
   53e20:	df000b15 	stw	fp,44(sp)
   53e24:	df000b04 	addi	fp,sp,44
   53e28:	e13ffc15 	stw	r4,-16(fp)
   53e2c:	e17ffd15 	stw	r5,-12(fp)
   53e30:	e1bffe15 	stw	r6,-8(fp)
   53e34:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   53e38:	e0bffd17 	ldw	r2,-12(fp)
   53e3c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   53e40:	00004706 	br	53f60 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   53e44:	e0bffc17 	ldw	r2,-16(fp)
   53e48:	10800a17 	ldw	r2,40(r2)
   53e4c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   53e50:	e0bffc17 	ldw	r2,-16(fp)
   53e54:	10800b17 	ldw	r2,44(r2)
   53e58:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   53e5c:	e0fff717 	ldw	r3,-36(fp)
   53e60:	e0bff817 	ldw	r2,-32(fp)
   53e64:	18800536 	bltu	r3,r2,53e7c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   53e68:	e0fff717 	ldw	r3,-36(fp)
   53e6c:	e0bff817 	ldw	r2,-32(fp)
   53e70:	1885c83a 	sub	r2,r3,r2
   53e74:	e0bff615 	stw	r2,-40(fp)
   53e78:	00000406 	br	53e8c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   53e7c:	00c20004 	movi	r3,2048
   53e80:	e0bff817 	ldw	r2,-32(fp)
   53e84:	1885c83a 	sub	r2,r3,r2
   53e88:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   53e8c:	e0bff617 	ldw	r2,-40(fp)
   53e90:	10001e26 	beq	r2,zero,53f0c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   53e94:	e0fffe17 	ldw	r3,-8(fp)
   53e98:	e0bff617 	ldw	r2,-40(fp)
   53e9c:	1880022e 	bgeu	r3,r2,53ea8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   53ea0:	e0bffe17 	ldw	r2,-8(fp)
   53ea4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   53ea8:	e0bff817 	ldw	r2,-32(fp)
   53eac:	10800e04 	addi	r2,r2,56
   53eb0:	e0fffc17 	ldw	r3,-16(fp)
   53eb4:	1885883a 	add	r2,r3,r2
   53eb8:	e13ff517 	ldw	r4,-44(fp)
   53ebc:	100b883a 	mov	r5,r2
   53ec0:	e1bff617 	ldw	r6,-40(fp)
   53ec4:	00510ac0 	call	510ac <memcpy>
      ptr   += n;
   53ec8:	e0fff517 	ldw	r3,-44(fp)
   53ecc:	e0bff617 	ldw	r2,-40(fp)
   53ed0:	1885883a 	add	r2,r3,r2
   53ed4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   53ed8:	e0fffe17 	ldw	r3,-8(fp)
   53edc:	e0bff617 	ldw	r2,-40(fp)
   53ee0:	1885c83a 	sub	r2,r3,r2
   53ee4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   53ee8:	e0fff817 	ldw	r3,-32(fp)
   53eec:	e0bff617 	ldw	r2,-40(fp)
   53ef0:	1885883a 	add	r2,r3,r2
   53ef4:	10c1ffcc 	andi	r3,r2,2047
   53ef8:	e0bffc17 	ldw	r2,-16(fp)
   53efc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   53f00:	e0bffe17 	ldw	r2,-8(fp)
   53f04:	00bfcf16 	blt	zero,r2,53e44 <altera_avalon_jtag_uart_read+0x2c>
   53f08:	00000106 	br	53f10 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   53f0c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   53f10:	e0fff517 	ldw	r3,-44(fp)
   53f14:	e0bffd17 	ldw	r2,-12(fp)
   53f18:	1880141e 	bne	r3,r2,53f6c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   53f1c:	e0bfff17 	ldw	r2,-4(fp)
   53f20:	1090000c 	andi	r2,r2,16384
   53f24:	1000131e 	bne	r2,zero,53f74 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   53f28:	0001883a 	nop
   53f2c:	e0bffc17 	ldw	r2,-16(fp)
   53f30:	10c00a17 	ldw	r3,40(r2)
   53f34:	e0bff717 	ldw	r2,-36(fp)
   53f38:	1880051e 	bne	r3,r2,53f50 <altera_avalon_jtag_uart_read+0x138>
   53f3c:	e0bffc17 	ldw	r2,-16(fp)
   53f40:	10c00917 	ldw	r3,36(r2)
   53f44:	e0bffc17 	ldw	r2,-16(fp)
   53f48:	10800117 	ldw	r2,4(r2)
   53f4c:	18bff736 	bltu	r3,r2,53f2c <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   53f50:	e0bffc17 	ldw	r2,-16(fp)
   53f54:	10c00a17 	ldw	r3,40(r2)
   53f58:	e0bff717 	ldw	r2,-36(fp)
   53f5c:	18800726 	beq	r3,r2,53f7c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   53f60:	e0bffe17 	ldw	r2,-8(fp)
   53f64:	00bfb716 	blt	zero,r2,53e44 <altera_avalon_jtag_uart_read+0x2c>
   53f68:	00000506 	br	53f80 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   53f6c:	0001883a 	nop
   53f70:	00000306 	br	53f80 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   53f74:	0001883a 	nop
   53f78:	00000106 	br	53f80 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   53f7c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   53f80:	e0fff517 	ldw	r3,-44(fp)
   53f84:	e0bffd17 	ldw	r2,-12(fp)
   53f88:	18801726 	beq	r3,r2,53fe8 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   53f8c:	0005303a 	rdctl	r2,status
   53f90:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   53f94:	e0fffa17 	ldw	r3,-24(fp)
   53f98:	00bfff84 	movi	r2,-2
   53f9c:	1884703a 	and	r2,r3,r2
   53fa0:	1001703a 	wrctl	status,r2
  
  return context;
   53fa4:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   53fa8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   53fac:	e0bffc17 	ldw	r2,-16(fp)
   53fb0:	10800817 	ldw	r2,32(r2)
   53fb4:	10c00054 	ori	r3,r2,1
   53fb8:	e0bffc17 	ldw	r2,-16(fp)
   53fbc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   53fc0:	e0bffc17 	ldw	r2,-16(fp)
   53fc4:	10800017 	ldw	r2,0(r2)
   53fc8:	10800104 	addi	r2,r2,4
   53fcc:	e0fffc17 	ldw	r3,-16(fp)
   53fd0:	18c00817 	ldw	r3,32(r3)
   53fd4:	10c00035 	stwio	r3,0(r2)
   53fd8:	e0bff917 	ldw	r2,-28(fp)
   53fdc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   53fe0:	e0bffb17 	ldw	r2,-20(fp)
   53fe4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   53fe8:	e0fff517 	ldw	r3,-44(fp)
   53fec:	e0bffd17 	ldw	r2,-12(fp)
   53ff0:	18800426 	beq	r3,r2,54004 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
   53ff4:	e0fff517 	ldw	r3,-44(fp)
   53ff8:	e0bffd17 	ldw	r2,-12(fp)
   53ffc:	1885c83a 	sub	r2,r3,r2
   54000:	00000606 	br	5401c <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
   54004:	e0bfff17 	ldw	r2,-4(fp)
   54008:	1090000c 	andi	r2,r2,16384
   5400c:	10000226 	beq	r2,zero,54018 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
   54010:	00bffd44 	movi	r2,-11
   54014:	00000106 	br	5401c <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
   54018:	00bffec4 	movi	r2,-5
}
   5401c:	e037883a 	mov	sp,fp
   54020:	dfc00117 	ldw	ra,4(sp)
   54024:	df000017 	ldw	fp,0(sp)
   54028:	dec00204 	addi	sp,sp,8
   5402c:	f800283a 	ret

00054030 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   54030:	defff304 	addi	sp,sp,-52
   54034:	dfc00c15 	stw	ra,48(sp)
   54038:	df000b15 	stw	fp,44(sp)
   5403c:	df000b04 	addi	fp,sp,44
   54040:	e13ffc15 	stw	r4,-16(fp)
   54044:	e17ffd15 	stw	r5,-12(fp)
   54048:	e1bffe15 	stw	r6,-8(fp)
   5404c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   54050:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   54054:	e0bffd17 	ldw	r2,-12(fp)
   54058:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   5405c:	00003706 	br	5413c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   54060:	e0bffc17 	ldw	r2,-16(fp)
   54064:	10800c17 	ldw	r2,48(r2)
   54068:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   5406c:	e0bffc17 	ldw	r2,-16(fp)
   54070:	10800d17 	ldw	r2,52(r2)
   54074:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   54078:	e0fff817 	ldw	r3,-32(fp)
   5407c:	e0bff517 	ldw	r2,-44(fp)
   54080:	1880062e 	bgeu	r3,r2,5409c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   54084:	e0fff517 	ldw	r3,-44(fp)
   54088:	e0bff817 	ldw	r2,-32(fp)
   5408c:	1885c83a 	sub	r2,r3,r2
   54090:	10bfffc4 	addi	r2,r2,-1
   54094:	e0bff615 	stw	r2,-40(fp)
   54098:	00000b06 	br	540c8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   5409c:	e0bff517 	ldw	r2,-44(fp)
   540a0:	10000526 	beq	r2,zero,540b8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   540a4:	00c20004 	movi	r3,2048
   540a8:	e0bff817 	ldw	r2,-32(fp)
   540ac:	1885c83a 	sub	r2,r3,r2
   540b0:	e0bff615 	stw	r2,-40(fp)
   540b4:	00000406 	br	540c8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   540b8:	00c1ffc4 	movi	r3,2047
   540bc:	e0bff817 	ldw	r2,-32(fp)
   540c0:	1885c83a 	sub	r2,r3,r2
   540c4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   540c8:	e0bff617 	ldw	r2,-40(fp)
   540cc:	10001e26 	beq	r2,zero,54148 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   540d0:	e0fffe17 	ldw	r3,-8(fp)
   540d4:	e0bff617 	ldw	r2,-40(fp)
   540d8:	1880022e 	bgeu	r3,r2,540e4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   540dc:	e0bffe17 	ldw	r2,-8(fp)
   540e0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   540e4:	e0bff817 	ldw	r2,-32(fp)
   540e8:	10820e04 	addi	r2,r2,2104
   540ec:	e0fffc17 	ldw	r3,-16(fp)
   540f0:	1885883a 	add	r2,r3,r2
   540f4:	1009883a 	mov	r4,r2
   540f8:	e17ffd17 	ldw	r5,-12(fp)
   540fc:	e1bff617 	ldw	r6,-40(fp)
   54100:	00510ac0 	call	510ac <memcpy>
      ptr   += n;
   54104:	e0fffd17 	ldw	r3,-12(fp)
   54108:	e0bff617 	ldw	r2,-40(fp)
   5410c:	1885883a 	add	r2,r3,r2
   54110:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   54114:	e0fffe17 	ldw	r3,-8(fp)
   54118:	e0bff617 	ldw	r2,-40(fp)
   5411c:	1885c83a 	sub	r2,r3,r2
   54120:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   54124:	e0fff817 	ldw	r3,-32(fp)
   54128:	e0bff617 	ldw	r2,-40(fp)
   5412c:	1885883a 	add	r2,r3,r2
   54130:	10c1ffcc 	andi	r3,r2,2047
   54134:	e0bffc17 	ldw	r2,-16(fp)
   54138:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   5413c:	e0bffe17 	ldw	r2,-8(fp)
   54140:	00bfc716 	blt	zero,r2,54060 <altera_avalon_jtag_uart_write+0x30>
   54144:	00000106 	br	5414c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   54148:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   5414c:	0005303a 	rdctl	r2,status
   54150:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   54154:	e0fffa17 	ldw	r3,-24(fp)
   54158:	00bfff84 	movi	r2,-2
   5415c:	1884703a 	and	r2,r3,r2
   54160:	1001703a 	wrctl	status,r2
  
  return context;
   54164:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   54168:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   5416c:	e0bffc17 	ldw	r2,-16(fp)
   54170:	10800817 	ldw	r2,32(r2)
   54174:	10c00094 	ori	r3,r2,2
   54178:	e0bffc17 	ldw	r2,-16(fp)
   5417c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   54180:	e0bffc17 	ldw	r2,-16(fp)
   54184:	10800017 	ldw	r2,0(r2)
   54188:	10800104 	addi	r2,r2,4
   5418c:	e0fffc17 	ldw	r3,-16(fp)
   54190:	18c00817 	ldw	r3,32(r3)
   54194:	10c00035 	stwio	r3,0(r2)
   54198:	e0bff917 	ldw	r2,-28(fp)
   5419c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   541a0:	e0bffb17 	ldw	r2,-20(fp)
   541a4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   541a8:	e0bffe17 	ldw	r2,-8(fp)
   541ac:	0080110e 	bge	zero,r2,541f4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   541b0:	e0bfff17 	ldw	r2,-4(fp)
   541b4:	1090000c 	andi	r2,r2,16384
   541b8:	1000111e 	bne	r2,zero,54200 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   541bc:	0001883a 	nop
   541c0:	e0bffc17 	ldw	r2,-16(fp)
   541c4:	10c00d17 	ldw	r3,52(r2)
   541c8:	e0bff517 	ldw	r2,-44(fp)
   541cc:	1880051e 	bne	r3,r2,541e4 <altera_avalon_jtag_uart_write+0x1b4>
   541d0:	e0bffc17 	ldw	r2,-16(fp)
   541d4:	10c00917 	ldw	r3,36(r2)
   541d8:	e0bffc17 	ldw	r2,-16(fp)
   541dc:	10800117 	ldw	r2,4(r2)
   541e0:	18bff736 	bltu	r3,r2,541c0 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   541e4:	e0bffc17 	ldw	r2,-16(fp)
   541e8:	10c00d17 	ldw	r3,52(r2)
   541ec:	e0bff517 	ldw	r2,-44(fp)
   541f0:	18800526 	beq	r3,r2,54208 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   541f4:	e0bffe17 	ldw	r2,-8(fp)
   541f8:	00bfd016 	blt	zero,r2,5413c <altera_avalon_jtag_uart_write+0x10c>
   541fc:	00000306 	br	5420c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   54200:	0001883a 	nop
   54204:	00000106 	br	5420c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
   54208:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   5420c:	e0fffd17 	ldw	r3,-12(fp)
   54210:	e0bff717 	ldw	r2,-36(fp)
   54214:	18800426 	beq	r3,r2,54228 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   54218:	e0fffd17 	ldw	r3,-12(fp)
   5421c:	e0bff717 	ldw	r2,-36(fp)
   54220:	1885c83a 	sub	r2,r3,r2
   54224:	00000606 	br	54240 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   54228:	e0bfff17 	ldw	r2,-4(fp)
   5422c:	1090000c 	andi	r2,r2,16384
   54230:	10000226 	beq	r2,zero,5423c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   54234:	00bffd44 	movi	r2,-11
   54238:	00000106 	br	54240 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   5423c:	00bffec4 	movi	r2,-5
}
   54240:	e037883a 	mov	sp,fp
   54244:	dfc00117 	ldw	ra,4(sp)
   54248:	df000017 	ldw	fp,0(sp)
   5424c:	dec00204 	addi	sp,sp,8
   54250:	f800283a 	ret

00054254 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   54254:	defffa04 	addi	sp,sp,-24
   54258:	dfc00515 	stw	ra,20(sp)
   5425c:	df000415 	stw	fp,16(sp)
   54260:	df000404 	addi	fp,sp,16
   54264:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   54268:	0007883a 	mov	r3,zero
   5426c:	e0bfff17 	ldw	r2,-4(fp)
   54270:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   54274:	e0bfff17 	ldw	r2,-4(fp)
   54278:	10800104 	addi	r2,r2,4
   5427c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   54280:	0005303a 	rdctl	r2,status
   54284:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   54288:	e0fffd17 	ldw	r3,-12(fp)
   5428c:	00bfff84 	movi	r2,-2
   54290:	1884703a 	and	r2,r3,r2
   54294:	1001703a 	wrctl	status,r2
  
  return context;
   54298:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   5429c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   542a0:	0054dc00 	call	54dc0 <alt_tick>
   542a4:	e0bffc17 	ldw	r2,-16(fp)
   542a8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   542ac:	e0bffe17 	ldw	r2,-8(fp)
   542b0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   542b4:	e037883a 	mov	sp,fp
   542b8:	dfc00117 	ldw	ra,4(sp)
   542bc:	df000017 	ldw	fp,0(sp)
   542c0:	dec00204 	addi	sp,sp,8
   542c4:	f800283a 	ret

000542c8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   542c8:	defff804 	addi	sp,sp,-32
   542cc:	dfc00715 	stw	ra,28(sp)
   542d0:	df000615 	stw	fp,24(sp)
   542d4:	df000604 	addi	fp,sp,24
   542d8:	e13ffc15 	stw	r4,-16(fp)
   542dc:	e17ffd15 	stw	r5,-12(fp)
   542e0:	e1bffe15 	stw	r6,-8(fp)
   542e4:	e1ffff15 	stw	r7,-4(fp)
   542e8:	e0bfff17 	ldw	r2,-4(fp)
   542ec:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   542f0:	00800034 	movhi	r2,0
   542f4:	1086ac04 	addi	r2,r2,6832
   542f8:	10800017 	ldw	r2,0(r2)
   542fc:	1000041e 	bne	r2,zero,54310 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   54300:	00800034 	movhi	r2,0
   54304:	1086ac04 	addi	r2,r2,6832
   54308:	e0fffb17 	ldw	r3,-20(fp)
   5430c:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   54310:	e0bffc17 	ldw	r2,-16(fp)
   54314:	10800104 	addi	r2,r2,4
   54318:	00c001c4 	movi	r3,7
   5431c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   54320:	d8000015 	stw	zero,0(sp)
   54324:	e13ffd17 	ldw	r4,-12(fp)
   54328:	e17ffe17 	ldw	r5,-8(fp)
   5432c:	01800174 	movhi	r6,5
   54330:	31909504 	addi	r6,r6,16980
   54334:	e1fffc17 	ldw	r7,-16(fp)
   54338:	00546700 	call	54670 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   5433c:	e037883a 	mov	sp,fp
   54340:	dfc00117 	ldw	ra,4(sp)
   54344:	df000017 	ldw	fp,0(sp)
   54348:	dec00204 	addi	sp,sp,8
   5434c:	f800283a 	ret

00054350 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   54350:	defff504 	addi	sp,sp,-44
   54354:	df000a15 	stw	fp,40(sp)
   54358:	df000a04 	addi	fp,sp,40
   5435c:	e13ffc15 	stw	r4,-16(fp)
   54360:	e17ffd15 	stw	r5,-12(fp)
   54364:	e1bffe15 	stw	r6,-8(fp)
   54368:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   5436c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   54370:	00800034 	movhi	r2,0
   54374:	1086ac04 	addi	r2,r2,6832
   54378:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   5437c:	10003f26 	beq	r2,zero,5447c <alt_alarm_start+0x12c>
  {
    if (alarm)
   54380:	e0bffc17 	ldw	r2,-16(fp)
   54384:	10003b26 	beq	r2,zero,54474 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   54388:	e0bffc17 	ldw	r2,-16(fp)
   5438c:	e0fffe17 	ldw	r3,-8(fp)
   54390:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   54394:	e0bffc17 	ldw	r2,-16(fp)
   54398:	e0ffff17 	ldw	r3,-4(fp)
   5439c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   543a0:	0005303a 	rdctl	r2,status
   543a4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   543a8:	e0fff817 	ldw	r3,-32(fp)
   543ac:	00bfff84 	movi	r2,-2
   543b0:	1884703a 	and	r2,r3,r2
   543b4:	1001703a 	wrctl	status,r2
  
  return context;
   543b8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   543bc:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   543c0:	00800034 	movhi	r2,0
   543c4:	1086ad04 	addi	r2,r2,6836
   543c8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   543cc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   543d0:	e0fffd17 	ldw	r3,-12(fp)
   543d4:	e0bff617 	ldw	r2,-40(fp)
   543d8:	1885883a 	add	r2,r3,r2
   543dc:	10c00044 	addi	r3,r2,1
   543e0:	e0bffc17 	ldw	r2,-16(fp)
   543e4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   543e8:	e0bffc17 	ldw	r2,-16(fp)
   543ec:	10c00217 	ldw	r3,8(r2)
   543f0:	e0bff617 	ldw	r2,-40(fp)
   543f4:	1880042e 	bgeu	r3,r2,54408 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   543f8:	e0bffc17 	ldw	r2,-16(fp)
   543fc:	00c00044 	movi	r3,1
   54400:	10c00405 	stb	r3,16(r2)
   54404:	00000206 	br	54410 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   54408:	e0bffc17 	ldw	r2,-16(fp)
   5440c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   54410:	e0bffc17 	ldw	r2,-16(fp)
   54414:	00c00034 	movhi	r3,0
   54418:	18c6a204 	addi	r3,r3,6792
   5441c:	e0fff915 	stw	r3,-28(fp)
   54420:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   54424:	e0bffa17 	ldw	r2,-24(fp)
   54428:	e0fff917 	ldw	r3,-28(fp)
   5442c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   54430:	e0bff917 	ldw	r2,-28(fp)
   54434:	10c00017 	ldw	r3,0(r2)
   54438:	e0bffa17 	ldw	r2,-24(fp)
   5443c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   54440:	e0bff917 	ldw	r2,-28(fp)
   54444:	10800017 	ldw	r2,0(r2)
   54448:	e0fffa17 	ldw	r3,-24(fp)
   5444c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   54450:	e0bff917 	ldw	r2,-28(fp)
   54454:	e0fffa17 	ldw	r3,-24(fp)
   54458:	10c00015 	stw	r3,0(r2)
   5445c:	e0bff717 	ldw	r2,-36(fp)
   54460:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   54464:	e0bffb17 	ldw	r2,-20(fp)
   54468:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   5446c:	0005883a 	mov	r2,zero
   54470:	00000306 	br	54480 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   54474:	00bffa84 	movi	r2,-22
   54478:	00000106 	br	54480 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   5447c:	00bfde84 	movi	r2,-134
  }
}
   54480:	e037883a 	mov	sp,fp
   54484:	df000017 	ldw	fp,0(sp)
   54488:	dec00104 	addi	sp,sp,4
   5448c:	f800283a 	ret

00054490 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   54490:	deffff04 	addi	sp,sp,-4
   54494:	df000015 	stw	fp,0(sp)
   54498:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   5449c:	e037883a 	mov	sp,fp
   544a0:	df000017 	ldw	fp,0(sp)
   544a4:	dec00104 	addi	sp,sp,4
   544a8:	f800283a 	ret

000544ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   544ac:	defffe04 	addi	sp,sp,-8
   544b0:	dfc00115 	stw	ra,4(sp)
   544b4:	df000015 	stw	fp,0(sp)
   544b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   544bc:	00800034 	movhi	r2,0
   544c0:	10869f04 	addi	r2,r2,6780
   544c4:	10800017 	ldw	r2,0(r2)
   544c8:	10000526 	beq	r2,zero,544e0 <alt_get_errno+0x34>
   544cc:	00800034 	movhi	r2,0
   544d0:	10869f04 	addi	r2,r2,6780
   544d4:	10800017 	ldw	r2,0(r2)
   544d8:	103ee83a 	callr	r2
   544dc:	00000206 	br	544e8 <alt_get_errno+0x3c>
   544e0:	00800034 	movhi	r2,0
   544e4:	1086a704 	addi	r2,r2,6812
}
   544e8:	e037883a 	mov	sp,fp
   544ec:	dfc00117 	ldw	ra,4(sp)
   544f0:	df000017 	ldw	fp,0(sp)
   544f4:	dec00204 	addi	sp,sp,8
   544f8:	f800283a 	ret

000544fc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   544fc:	defffa04 	addi	sp,sp,-24
   54500:	dfc00515 	stw	ra,20(sp)
   54504:	df000415 	stw	fp,16(sp)
   54508:	df000404 	addi	fp,sp,16
   5450c:	e13ffe15 	stw	r4,-8(fp)
   54510:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   54514:	e0bffe17 	ldw	r2,-8(fp)
   54518:	10000326 	beq	r2,zero,54528 <alt_dev_llist_insert+0x2c>
   5451c:	e0bffe17 	ldw	r2,-8(fp)
   54520:	10800217 	ldw	r2,8(r2)
   54524:	1000051e 	bne	r2,zero,5453c <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   54528:	00544ac0 	call	544ac <alt_get_errno>
   5452c:	00c00584 	movi	r3,22
   54530:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   54534:	00bffa84 	movi	r2,-22
   54538:	00001306 	br	54588 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   5453c:	e0bffe17 	ldw	r2,-8(fp)
   54540:	e0ffff17 	ldw	r3,-4(fp)
   54544:	e0fffc15 	stw	r3,-16(fp)
   54548:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   5454c:	e0bffd17 	ldw	r2,-12(fp)
   54550:	e0fffc17 	ldw	r3,-16(fp)
   54554:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   54558:	e0bffc17 	ldw	r2,-16(fp)
   5455c:	10c00017 	ldw	r3,0(r2)
   54560:	e0bffd17 	ldw	r2,-12(fp)
   54564:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   54568:	e0bffc17 	ldw	r2,-16(fp)
   5456c:	10800017 	ldw	r2,0(r2)
   54570:	e0fffd17 	ldw	r3,-12(fp)
   54574:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   54578:	e0bffc17 	ldw	r2,-16(fp)
   5457c:	e0fffd17 	ldw	r3,-12(fp)
   54580:	10c00015 	stw	r3,0(r2)

  return 0;  
   54584:	0005883a 	mov	r2,zero
}
   54588:	e037883a 	mov	sp,fp
   5458c:	dfc00117 	ldw	ra,4(sp)
   54590:	df000017 	ldw	fp,0(sp)
   54594:	dec00204 	addi	sp,sp,8
   54598:	f800283a 	ret

0005459c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   5459c:	defffd04 	addi	sp,sp,-12
   545a0:	dfc00215 	stw	ra,8(sp)
   545a4:	df000115 	stw	fp,4(sp)
   545a8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   545ac:	00800174 	movhi	r2,5
   545b0:	10954b04 	addi	r2,r2,21804
   545b4:	e0bfff15 	stw	r2,-4(fp)
   545b8:	00000606 	br	545d4 <_do_ctors+0x38>
        (*ctor) (); 
   545bc:	e0bfff17 	ldw	r2,-4(fp)
   545c0:	10800017 	ldw	r2,0(r2)
   545c4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   545c8:	e0bfff17 	ldw	r2,-4(fp)
   545cc:	10bfff04 	addi	r2,r2,-4
   545d0:	e0bfff15 	stw	r2,-4(fp)
   545d4:	e0ffff17 	ldw	r3,-4(fp)
   545d8:	00800174 	movhi	r2,5
   545dc:	10954c04 	addi	r2,r2,21808
   545e0:	18bff62e 	bgeu	r3,r2,545bc <_do_ctors+0x20>
        (*ctor) (); 
}
   545e4:	e037883a 	mov	sp,fp
   545e8:	dfc00117 	ldw	ra,4(sp)
   545ec:	df000017 	ldw	fp,0(sp)
   545f0:	dec00204 	addi	sp,sp,8
   545f4:	f800283a 	ret

000545f8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   545f8:	defffd04 	addi	sp,sp,-12
   545fc:	dfc00215 	stw	ra,8(sp)
   54600:	df000115 	stw	fp,4(sp)
   54604:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   54608:	00800174 	movhi	r2,5
   5460c:	10954b04 	addi	r2,r2,21804
   54610:	e0bfff15 	stw	r2,-4(fp)
   54614:	00000606 	br	54630 <_do_dtors+0x38>
        (*dtor) (); 
   54618:	e0bfff17 	ldw	r2,-4(fp)
   5461c:	10800017 	ldw	r2,0(r2)
   54620:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   54624:	e0bfff17 	ldw	r2,-4(fp)
   54628:	10bfff04 	addi	r2,r2,-4
   5462c:	e0bfff15 	stw	r2,-4(fp)
   54630:	e0ffff17 	ldw	r3,-4(fp)
   54634:	00800174 	movhi	r2,5
   54638:	10954c04 	addi	r2,r2,21808
   5463c:	18bff62e 	bgeu	r3,r2,54618 <_do_dtors+0x20>
        (*dtor) (); 
}
   54640:	e037883a 	mov	sp,fp
   54644:	dfc00117 	ldw	ra,4(sp)
   54648:	df000017 	ldw	fp,0(sp)
   5464c:	dec00204 	addi	sp,sp,8
   54650:	f800283a 	ret

00054654 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   54654:	deffff04 	addi	sp,sp,-4
   54658:	df000015 	stw	fp,0(sp)
   5465c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   54660:	e037883a 	mov	sp,fp
   54664:	df000017 	ldw	fp,0(sp)
   54668:	dec00104 	addi	sp,sp,4
   5466c:	f800283a 	ret

00054670 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   54670:	defff904 	addi	sp,sp,-28
   54674:	dfc00615 	stw	ra,24(sp)
   54678:	df000515 	stw	fp,20(sp)
   5467c:	df000504 	addi	fp,sp,20
   54680:	e13ffc15 	stw	r4,-16(fp)
   54684:	e17ffd15 	stw	r5,-12(fp)
   54688:	e1bffe15 	stw	r6,-8(fp)
   5468c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   54690:	e0800217 	ldw	r2,8(fp)
   54694:	d8800015 	stw	r2,0(sp)
   54698:	e13ffc17 	ldw	r4,-16(fp)
   5469c:	e17ffd17 	ldw	r5,-12(fp)
   546a0:	e1bffe17 	ldw	r6,-8(fp)
   546a4:	e1ffff17 	ldw	r7,-4(fp)
   546a8:	00548480 	call	54848 <alt_iic_isr_register>
}  
   546ac:	e037883a 	mov	sp,fp
   546b0:	dfc00117 	ldw	ra,4(sp)
   546b4:	df000017 	ldw	fp,0(sp)
   546b8:	dec00204 	addi	sp,sp,8
   546bc:	f800283a 	ret

000546c0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   546c0:	defff904 	addi	sp,sp,-28
   546c4:	df000615 	stw	fp,24(sp)
   546c8:	df000604 	addi	fp,sp,24
   546cc:	e13ffe15 	stw	r4,-8(fp)
   546d0:	e17fff15 	stw	r5,-4(fp)
   546d4:	e0bfff17 	ldw	r2,-4(fp)
   546d8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   546dc:	0005303a 	rdctl	r2,status
   546e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   546e4:	e0fffb17 	ldw	r3,-20(fp)
   546e8:	00bfff84 	movi	r2,-2
   546ec:	1884703a 	and	r2,r3,r2
   546f0:	1001703a 	wrctl	status,r2
  
  return context;
   546f4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   546f8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   546fc:	e0bffa17 	ldw	r2,-24(fp)
   54700:	00c00044 	movi	r3,1
   54704:	1884983a 	sll	r2,r3,r2
   54708:	1007883a 	mov	r3,r2
   5470c:	00800034 	movhi	r2,0
   54710:	1086ab04 	addi	r2,r2,6828
   54714:	10800017 	ldw	r2,0(r2)
   54718:	1886b03a 	or	r3,r3,r2
   5471c:	00800034 	movhi	r2,0
   54720:	1086ab04 	addi	r2,r2,6828
   54724:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   54728:	00800034 	movhi	r2,0
   5472c:	1086ab04 	addi	r2,r2,6828
   54730:	10800017 	ldw	r2,0(r2)
   54734:	100170fa 	wrctl	ienable,r2
   54738:	e0bffc17 	ldw	r2,-16(fp)
   5473c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   54740:	e0bffd17 	ldw	r2,-12(fp)
   54744:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   54748:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   5474c:	e037883a 	mov	sp,fp
   54750:	df000017 	ldw	fp,0(sp)
   54754:	dec00104 	addi	sp,sp,4
   54758:	f800283a 	ret

0005475c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   5475c:	defff904 	addi	sp,sp,-28
   54760:	df000615 	stw	fp,24(sp)
   54764:	df000604 	addi	fp,sp,24
   54768:	e13ffe15 	stw	r4,-8(fp)
   5476c:	e17fff15 	stw	r5,-4(fp)
   54770:	e0bfff17 	ldw	r2,-4(fp)
   54774:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   54778:	0005303a 	rdctl	r2,status
   5477c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   54780:	e0fffb17 	ldw	r3,-20(fp)
   54784:	00bfff84 	movi	r2,-2
   54788:	1884703a 	and	r2,r3,r2
   5478c:	1001703a 	wrctl	status,r2
  
  return context;
   54790:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   54794:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   54798:	e0bffa17 	ldw	r2,-24(fp)
   5479c:	00c00044 	movi	r3,1
   547a0:	1884983a 	sll	r2,r3,r2
   547a4:	0084303a 	nor	r2,zero,r2
   547a8:	1007883a 	mov	r3,r2
   547ac:	00800034 	movhi	r2,0
   547b0:	1086ab04 	addi	r2,r2,6828
   547b4:	10800017 	ldw	r2,0(r2)
   547b8:	1886703a 	and	r3,r3,r2
   547bc:	00800034 	movhi	r2,0
   547c0:	1086ab04 	addi	r2,r2,6828
   547c4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   547c8:	00800034 	movhi	r2,0
   547cc:	1086ab04 	addi	r2,r2,6828
   547d0:	10800017 	ldw	r2,0(r2)
   547d4:	100170fa 	wrctl	ienable,r2
   547d8:	e0bffc17 	ldw	r2,-16(fp)
   547dc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   547e0:	e0bffd17 	ldw	r2,-12(fp)
   547e4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   547e8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   547ec:	e037883a 	mov	sp,fp
   547f0:	df000017 	ldw	fp,0(sp)
   547f4:	dec00104 	addi	sp,sp,4
   547f8:	f800283a 	ret

000547fc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   547fc:	defffc04 	addi	sp,sp,-16
   54800:	df000315 	stw	fp,12(sp)
   54804:	df000304 	addi	fp,sp,12
   54808:	e13ffe15 	stw	r4,-8(fp)
   5480c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   54810:	000530fa 	rdctl	r2,ienable
   54814:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   54818:	e0bfff17 	ldw	r2,-4(fp)
   5481c:	00c00044 	movi	r3,1
   54820:	1884983a 	sll	r2,r3,r2
   54824:	1007883a 	mov	r3,r2
   54828:	e0bffd17 	ldw	r2,-12(fp)
   5482c:	1884703a 	and	r2,r3,r2
   54830:	1004c03a 	cmpne	r2,r2,zero
   54834:	10803fcc 	andi	r2,r2,255
}
   54838:	e037883a 	mov	sp,fp
   5483c:	df000017 	ldw	fp,0(sp)
   54840:	dec00104 	addi	sp,sp,4
   54844:	f800283a 	ret

00054848 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   54848:	defff504 	addi	sp,sp,-44
   5484c:	dfc00a15 	stw	ra,40(sp)
   54850:	df000915 	stw	fp,36(sp)
   54854:	df000904 	addi	fp,sp,36
   54858:	e13ffc15 	stw	r4,-16(fp)
   5485c:	e17ffd15 	stw	r5,-12(fp)
   54860:	e1bffe15 	stw	r6,-8(fp)
   54864:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   54868:	00bffa84 	movi	r2,-22
   5486c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   54870:	e0bffd17 	ldw	r2,-12(fp)
   54874:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   54878:	e0bff817 	ldw	r2,-32(fp)
   5487c:	10800808 	cmpgei	r2,r2,32
   54880:	1000271e 	bne	r2,zero,54920 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   54884:	0005303a 	rdctl	r2,status
   54888:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   5488c:	e0fffa17 	ldw	r3,-24(fp)
   54890:	00bfff84 	movi	r2,-2
   54894:	1884703a 	and	r2,r3,r2
   54898:	1001703a 	wrctl	status,r2
  
  return context;
   5489c:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   548a0:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   548a4:	00c00034 	movhi	r3,0
   548a8:	18c6b804 	addi	r3,r3,6880
   548ac:	e0bff817 	ldw	r2,-32(fp)
   548b0:	100490fa 	slli	r2,r2,3
   548b4:	1885883a 	add	r2,r3,r2
   548b8:	e0fffe17 	ldw	r3,-8(fp)
   548bc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   548c0:	00c00034 	movhi	r3,0
   548c4:	18c6b804 	addi	r3,r3,6880
   548c8:	e0bff817 	ldw	r2,-32(fp)
   548cc:	100490fa 	slli	r2,r2,3
   548d0:	1885883a 	add	r2,r3,r2
   548d4:	10800104 	addi	r2,r2,4
   548d8:	e0ffff17 	ldw	r3,-4(fp)
   548dc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   548e0:	e0bffe17 	ldw	r2,-8(fp)
   548e4:	10000526 	beq	r2,zero,548fc <alt_iic_isr_register+0xb4>
   548e8:	e0bff817 	ldw	r2,-32(fp)
   548ec:	e13ffc17 	ldw	r4,-16(fp)
   548f0:	100b883a 	mov	r5,r2
   548f4:	00546c00 	call	546c0 <alt_ic_irq_enable>
   548f8:	00000406 	br	5490c <alt_iic_isr_register+0xc4>
   548fc:	e0bff817 	ldw	r2,-32(fp)
   54900:	e13ffc17 	ldw	r4,-16(fp)
   54904:	100b883a 	mov	r5,r2
   54908:	005475c0 	call	5475c <alt_ic_irq_disable>
   5490c:	e0bff715 	stw	r2,-36(fp)
   54910:	e0bff917 	ldw	r2,-28(fp)
   54914:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   54918:	e0bffb17 	ldw	r2,-20(fp)
   5491c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   54920:	e0bff717 	ldw	r2,-36(fp)
}
   54924:	e037883a 	mov	sp,fp
   54928:	dfc00117 	ldw	ra,4(sp)
   5492c:	df000017 	ldw	fp,0(sp)
   54930:	dec00204 	addi	sp,sp,8
   54934:	f800283a 	ret

00054938 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   54938:	defff804 	addi	sp,sp,-32
   5493c:	dfc00715 	stw	ra,28(sp)
   54940:	df000615 	stw	fp,24(sp)
   54944:	dc000515 	stw	r16,20(sp)
   54948:	df000504 	addi	fp,sp,20
   5494c:	e13ffc15 	stw	r4,-16(fp)
   54950:	e17ffd15 	stw	r5,-12(fp)
   54954:	e1bffe15 	stw	r6,-8(fp)
   54958:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   5495c:	e13ffd17 	ldw	r4,-12(fp)
   54960:	e17ffe17 	ldw	r5,-8(fp)
   54964:	e1bfff17 	ldw	r6,-4(fp)
   54968:	0054bd00 	call	54bd0 <open>
   5496c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   54970:	e0bffb17 	ldw	r2,-20(fp)
   54974:	10002216 	blt	r2,zero,54a00 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   54978:	04000034 	movhi	r16,0
   5497c:	84021e04 	addi	r16,r16,2168
   54980:	e0bffb17 	ldw	r2,-20(fp)
   54984:	1009883a 	mov	r4,r2
   54988:	01400304 	movi	r5,12
   5498c:	0052d440 	call	52d44 <__mulsi3>
   54990:	8085883a 	add	r2,r16,r2
   54994:	10c00017 	ldw	r3,0(r2)
   54998:	e0bffc17 	ldw	r2,-16(fp)
   5499c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   549a0:	04000034 	movhi	r16,0
   549a4:	84021e04 	addi	r16,r16,2168
   549a8:	e0bffb17 	ldw	r2,-20(fp)
   549ac:	1009883a 	mov	r4,r2
   549b0:	01400304 	movi	r5,12
   549b4:	0052d440 	call	52d44 <__mulsi3>
   549b8:	8085883a 	add	r2,r16,r2
   549bc:	10800104 	addi	r2,r2,4
   549c0:	10c00017 	ldw	r3,0(r2)
   549c4:	e0bffc17 	ldw	r2,-16(fp)
   549c8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   549cc:	04000034 	movhi	r16,0
   549d0:	84021e04 	addi	r16,r16,2168
   549d4:	e0bffb17 	ldw	r2,-20(fp)
   549d8:	1009883a 	mov	r4,r2
   549dc:	01400304 	movi	r5,12
   549e0:	0052d440 	call	52d44 <__mulsi3>
   549e4:	8085883a 	add	r2,r16,r2
   549e8:	10800204 	addi	r2,r2,8
   549ec:	10c00017 	ldw	r3,0(r2)
   549f0:	e0bffc17 	ldw	r2,-16(fp)
   549f4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   549f8:	e13ffb17 	ldw	r4,-20(fp)
   549fc:	00534b40 	call	534b4 <alt_release_fd>
  }
} 
   54a00:	e037883a 	mov	sp,fp
   54a04:	dfc00217 	ldw	ra,8(sp)
   54a08:	df000117 	ldw	fp,4(sp)
   54a0c:	dc000017 	ldw	r16,0(sp)
   54a10:	dec00304 	addi	sp,sp,12
   54a14:	f800283a 	ret

00054a18 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   54a18:	defffb04 	addi	sp,sp,-20
   54a1c:	dfc00415 	stw	ra,16(sp)
   54a20:	df000315 	stw	fp,12(sp)
   54a24:	df000304 	addi	fp,sp,12
   54a28:	e13ffd15 	stw	r4,-12(fp)
   54a2c:	e17ffe15 	stw	r5,-8(fp)
   54a30:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   54a34:	01000034 	movhi	r4,0
   54a38:	21022104 	addi	r4,r4,2180
   54a3c:	e17ffd17 	ldw	r5,-12(fp)
   54a40:	01800044 	movi	r6,1
   54a44:	01c07fc4 	movi	r7,511
   54a48:	00549380 	call	54938 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   54a4c:	01000034 	movhi	r4,0
   54a50:	21021e04 	addi	r4,r4,2168
   54a54:	e17ffe17 	ldw	r5,-8(fp)
   54a58:	000d883a 	mov	r6,zero
   54a5c:	01c07fc4 	movi	r7,511
   54a60:	00549380 	call	54938 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   54a64:	01000034 	movhi	r4,0
   54a68:	21022404 	addi	r4,r4,2192
   54a6c:	e17fff17 	ldw	r5,-4(fp)
   54a70:	01800044 	movi	r6,1
   54a74:	01c07fc4 	movi	r7,511
   54a78:	00549380 	call	54938 <alt_open_fd>
}  
   54a7c:	e037883a 	mov	sp,fp
   54a80:	dfc00117 	ldw	ra,4(sp)
   54a84:	df000017 	ldw	fp,0(sp)
   54a88:	dec00204 	addi	sp,sp,8
   54a8c:	f800283a 	ret

00054a90 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   54a90:	defffe04 	addi	sp,sp,-8
   54a94:	dfc00115 	stw	ra,4(sp)
   54a98:	df000015 	stw	fp,0(sp)
   54a9c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   54aa0:	00800034 	movhi	r2,0
   54aa4:	10869f04 	addi	r2,r2,6780
   54aa8:	10800017 	ldw	r2,0(r2)
   54aac:	10000526 	beq	r2,zero,54ac4 <alt_get_errno+0x34>
   54ab0:	00800034 	movhi	r2,0
   54ab4:	10869f04 	addi	r2,r2,6780
   54ab8:	10800017 	ldw	r2,0(r2)
   54abc:	103ee83a 	callr	r2
   54ac0:	00000206 	br	54acc <alt_get_errno+0x3c>
   54ac4:	00800034 	movhi	r2,0
   54ac8:	1086a704 	addi	r2,r2,6812
}
   54acc:	e037883a 	mov	sp,fp
   54ad0:	dfc00117 	ldw	ra,4(sp)
   54ad4:	df000017 	ldw	fp,0(sp)
   54ad8:	dec00204 	addi	sp,sp,8
   54adc:	f800283a 	ret

00054ae0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   54ae0:	defffb04 	addi	sp,sp,-20
   54ae4:	dfc00415 	stw	ra,16(sp)
   54ae8:	df000315 	stw	fp,12(sp)
   54aec:	dc000215 	stw	r16,8(sp)
   54af0:	df000204 	addi	fp,sp,8
   54af4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   54af8:	e0bfff17 	ldw	r2,-4(fp)
   54afc:	10800217 	ldw	r2,8(r2)
   54b00:	10d00034 	orhi	r3,r2,16384
   54b04:	e0bfff17 	ldw	r2,-4(fp)
   54b08:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   54b0c:	e03ffe15 	stw	zero,-8(fp)
   54b10:	00002206 	br	54b9c <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   54b14:	04000034 	movhi	r16,0
   54b18:	84021e04 	addi	r16,r16,2168
   54b1c:	e0bffe17 	ldw	r2,-8(fp)
   54b20:	1009883a 	mov	r4,r2
   54b24:	01400304 	movi	r5,12
   54b28:	0052d440 	call	52d44 <__mulsi3>
   54b2c:	8085883a 	add	r2,r16,r2
   54b30:	10c00017 	ldw	r3,0(r2)
   54b34:	e0bfff17 	ldw	r2,-4(fp)
   54b38:	10800017 	ldw	r2,0(r2)
   54b3c:	1880141e 	bne	r3,r2,54b90 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   54b40:	04000034 	movhi	r16,0
   54b44:	84021e04 	addi	r16,r16,2168
   54b48:	e0bffe17 	ldw	r2,-8(fp)
   54b4c:	1009883a 	mov	r4,r2
   54b50:	01400304 	movi	r5,12
   54b54:	0052d440 	call	52d44 <__mulsi3>
   54b58:	8085883a 	add	r2,r16,r2
   54b5c:	10800204 	addi	r2,r2,8
   54b60:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   54b64:	10000a0e 	bge	r2,zero,54b90 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   54b68:	e13ffe17 	ldw	r4,-8(fp)
   54b6c:	01400304 	movi	r5,12
   54b70:	0052d440 	call	52d44 <__mulsi3>
   54b74:	00c00034 	movhi	r3,0
   54b78:	18c21e04 	addi	r3,r3,2168
   54b7c:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   54b80:	e0bfff17 	ldw	r2,-4(fp)
   54b84:	18800226 	beq	r3,r2,54b90 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   54b88:	00bffcc4 	movi	r2,-13
   54b8c:	00000a06 	br	54bb8 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   54b90:	e0bffe17 	ldw	r2,-8(fp)
   54b94:	10800044 	addi	r2,r2,1
   54b98:	e0bffe15 	stw	r2,-8(fp)
   54b9c:	00800034 	movhi	r2,0
   54ba0:	10869e04 	addi	r2,r2,6776
   54ba4:	10800017 	ldw	r2,0(r2)
   54ba8:	1007883a 	mov	r3,r2
   54bac:	e0bffe17 	ldw	r2,-8(fp)
   54bb0:	18bfd82e 	bgeu	r3,r2,54b14 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   54bb4:	0005883a 	mov	r2,zero
}
   54bb8:	e037883a 	mov	sp,fp
   54bbc:	dfc00217 	ldw	ra,8(sp)
   54bc0:	df000117 	ldw	fp,4(sp)
   54bc4:	dc000017 	ldw	r16,0(sp)
   54bc8:	dec00304 	addi	sp,sp,12
   54bcc:	f800283a 	ret

00054bd0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   54bd0:	defff604 	addi	sp,sp,-40
   54bd4:	dfc00915 	stw	ra,36(sp)
   54bd8:	df000815 	stw	fp,32(sp)
   54bdc:	df000804 	addi	fp,sp,32
   54be0:	e13ffd15 	stw	r4,-12(fp)
   54be4:	e17ffe15 	stw	r5,-8(fp)
   54be8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   54bec:	00bfffc4 	movi	r2,-1
   54bf0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   54bf4:	00bffb44 	movi	r2,-19
   54bf8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   54bfc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   54c00:	e13ffd17 	ldw	r4,-12(fp)
   54c04:	01400034 	movhi	r5,0
   54c08:	29469c04 	addi	r5,r5,6768
   54c0c:	0054ee40 	call	54ee4 <alt_find_dev>
   54c10:	e0bff815 	stw	r2,-32(fp)
   54c14:	e0bff817 	ldw	r2,-32(fp)
   54c18:	1000051e 	bne	r2,zero,54c30 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   54c1c:	e13ffd17 	ldw	r4,-12(fp)
   54c20:	0054f740 	call	54f74 <alt_find_file>
   54c24:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   54c28:	00800044 	movi	r2,1
   54c2c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   54c30:	e0bff817 	ldw	r2,-32(fp)
   54c34:	10002a26 	beq	r2,zero,54ce0 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   54c38:	e13ff817 	ldw	r4,-32(fp)
   54c3c:	00550880 	call	55088 <alt_get_fd>
   54c40:	e0bff915 	stw	r2,-28(fp)
   54c44:	e0bff917 	ldw	r2,-28(fp)
   54c48:	1000030e 	bge	r2,zero,54c58 <open+0x88>
    {
      status = index;
   54c4c:	e0bff917 	ldw	r2,-28(fp)
   54c50:	e0bffa15 	stw	r2,-24(fp)
   54c54:	00002406 	br	54ce8 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   54c58:	e13ff917 	ldw	r4,-28(fp)
   54c5c:	01400304 	movi	r5,12
   54c60:	0052d440 	call	52d44 <__mulsi3>
   54c64:	00c00034 	movhi	r3,0
   54c68:	18c21e04 	addi	r3,r3,2168
   54c6c:	10c5883a 	add	r2,r2,r3
   54c70:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   54c74:	e0fffe17 	ldw	r3,-8(fp)
   54c78:	00900034 	movhi	r2,16384
   54c7c:	10bfffc4 	addi	r2,r2,-1
   54c80:	1886703a 	and	r3,r3,r2
   54c84:	e0bffc17 	ldw	r2,-16(fp)
   54c88:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   54c8c:	e0bffb17 	ldw	r2,-20(fp)
   54c90:	1000051e 	bne	r2,zero,54ca8 <open+0xd8>
   54c94:	e13ffc17 	ldw	r4,-16(fp)
   54c98:	0054ae00 	call	54ae0 <alt_file_locked>
   54c9c:	e0bffa15 	stw	r2,-24(fp)
   54ca0:	e0bffa17 	ldw	r2,-24(fp)
   54ca4:	10001016 	blt	r2,zero,54ce8 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   54ca8:	e0bff817 	ldw	r2,-32(fp)
   54cac:	10800317 	ldw	r2,12(r2)
   54cb0:	10000826 	beq	r2,zero,54cd4 <open+0x104>
   54cb4:	e0bff817 	ldw	r2,-32(fp)
   54cb8:	10800317 	ldw	r2,12(r2)
   54cbc:	e13ffc17 	ldw	r4,-16(fp)
   54cc0:	e17ffd17 	ldw	r5,-12(fp)
   54cc4:	e1bffe17 	ldw	r6,-8(fp)
   54cc8:	e1ffff17 	ldw	r7,-4(fp)
   54ccc:	103ee83a 	callr	r2
   54cd0:	00000106 	br	54cd8 <open+0x108>
   54cd4:	0005883a 	mov	r2,zero
   54cd8:	e0bffa15 	stw	r2,-24(fp)
   54cdc:	00000206 	br	54ce8 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   54ce0:	00bffb44 	movi	r2,-19
   54ce4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   54ce8:	e0bffa17 	ldw	r2,-24(fp)
   54cec:	1000080e 	bge	r2,zero,54d10 <open+0x140>
  {
    alt_release_fd (index);  
   54cf0:	e13ff917 	ldw	r4,-28(fp)
   54cf4:	00534b40 	call	534b4 <alt_release_fd>
    ALT_ERRNO = -status;
   54cf8:	0054a900 	call	54a90 <alt_get_errno>
   54cfc:	e0fffa17 	ldw	r3,-24(fp)
   54d00:	00c7c83a 	sub	r3,zero,r3
   54d04:	10c00015 	stw	r3,0(r2)
    return -1;
   54d08:	00bfffc4 	movi	r2,-1
   54d0c:	00000106 	br	54d14 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   54d10:	e0bff917 	ldw	r2,-28(fp)
}
   54d14:	e037883a 	mov	sp,fp
   54d18:	dfc00117 	ldw	ra,4(sp)
   54d1c:	df000017 	ldw	fp,0(sp)
   54d20:	dec00204 	addi	sp,sp,8
   54d24:	f800283a 	ret

00054d28 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   54d28:	defffa04 	addi	sp,sp,-24
   54d2c:	df000515 	stw	fp,20(sp)
   54d30:	df000504 	addi	fp,sp,20
   54d34:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   54d38:	0005303a 	rdctl	r2,status
   54d3c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   54d40:	e0fffc17 	ldw	r3,-16(fp)
   54d44:	00bfff84 	movi	r2,-2
   54d48:	1884703a 	and	r2,r3,r2
   54d4c:	1001703a 	wrctl	status,r2
  
  return context;
   54d50:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   54d54:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   54d58:	e0bfff17 	ldw	r2,-4(fp)
   54d5c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   54d60:	e0bffd17 	ldw	r2,-12(fp)
   54d64:	10800017 	ldw	r2,0(r2)
   54d68:	e0fffd17 	ldw	r3,-12(fp)
   54d6c:	18c00117 	ldw	r3,4(r3)
   54d70:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   54d74:	e0bffd17 	ldw	r2,-12(fp)
   54d78:	10800117 	ldw	r2,4(r2)
   54d7c:	e0fffd17 	ldw	r3,-12(fp)
   54d80:	18c00017 	ldw	r3,0(r3)
   54d84:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   54d88:	e0bffd17 	ldw	r2,-12(fp)
   54d8c:	e0fffd17 	ldw	r3,-12(fp)
   54d90:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   54d94:	e0bffd17 	ldw	r2,-12(fp)
   54d98:	e0fffd17 	ldw	r3,-12(fp)
   54d9c:	10c00015 	stw	r3,0(r2)
   54da0:	e0bffb17 	ldw	r2,-20(fp)
   54da4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   54da8:	e0bffe17 	ldw	r2,-8(fp)
   54dac:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   54db0:	e037883a 	mov	sp,fp
   54db4:	df000017 	ldw	fp,0(sp)
   54db8:	dec00104 	addi	sp,sp,4
   54dbc:	f800283a 	ret

00054dc0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   54dc0:	defffb04 	addi	sp,sp,-20
   54dc4:	dfc00415 	stw	ra,16(sp)
   54dc8:	df000315 	stw	fp,12(sp)
   54dcc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   54dd0:	d0a00c17 	ldw	r2,-32720(gp)
   54dd4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   54dd8:	d0a01717 	ldw	r2,-32676(gp)
   54ddc:	10800044 	addi	r2,r2,1
   54de0:	d0a01715 	stw	r2,-32676(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   54de4:	00002e06 	br	54ea0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   54de8:	e0bffd17 	ldw	r2,-12(fp)
   54dec:	10800017 	ldw	r2,0(r2)
   54df0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   54df4:	e0bffd17 	ldw	r2,-12(fp)
   54df8:	10800403 	ldbu	r2,16(r2)
   54dfc:	10803fcc 	andi	r2,r2,255
   54e00:	10000426 	beq	r2,zero,54e14 <alt_tick+0x54>
   54e04:	d0a01717 	ldw	r2,-32676(gp)
   54e08:	1000021e 	bne	r2,zero,54e14 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   54e0c:	e0bffd17 	ldw	r2,-12(fp)
   54e10:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   54e14:	e0bffd17 	ldw	r2,-12(fp)
   54e18:	10800217 	ldw	r2,8(r2)
   54e1c:	d0e01717 	ldw	r3,-32676(gp)
   54e20:	18801d36 	bltu	r3,r2,54e98 <alt_tick+0xd8>
   54e24:	e0bffd17 	ldw	r2,-12(fp)
   54e28:	10800403 	ldbu	r2,16(r2)
   54e2c:	10803fcc 	andi	r2,r2,255
   54e30:	1000191e 	bne	r2,zero,54e98 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   54e34:	e0bffd17 	ldw	r2,-12(fp)
   54e38:	10c00317 	ldw	r3,12(r2)
   54e3c:	e0bffd17 	ldw	r2,-12(fp)
   54e40:	10800517 	ldw	r2,20(r2)
   54e44:	1009883a 	mov	r4,r2
   54e48:	183ee83a 	callr	r3
   54e4c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   54e50:	e0bfff17 	ldw	r2,-4(fp)
   54e54:	1000031e 	bne	r2,zero,54e64 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   54e58:	e13ffd17 	ldw	r4,-12(fp)
   54e5c:	0054d280 	call	54d28 <alt_alarm_stop>
   54e60:	00000d06 	br	54e98 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   54e64:	e0bffd17 	ldw	r2,-12(fp)
   54e68:	10c00217 	ldw	r3,8(r2)
   54e6c:	e0bfff17 	ldw	r2,-4(fp)
   54e70:	1887883a 	add	r3,r3,r2
   54e74:	e0bffd17 	ldw	r2,-12(fp)
   54e78:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   54e7c:	e0bffd17 	ldw	r2,-12(fp)
   54e80:	10c00217 	ldw	r3,8(r2)
   54e84:	d0a01717 	ldw	r2,-32676(gp)
   54e88:	1880032e 	bgeu	r3,r2,54e98 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   54e8c:	e0bffd17 	ldw	r2,-12(fp)
   54e90:	00c00044 	movi	r3,1
   54e94:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   54e98:	e0bffe17 	ldw	r2,-8(fp)
   54e9c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   54ea0:	e0fffd17 	ldw	r3,-12(fp)
   54ea4:	d0a00c04 	addi	r2,gp,-32720
   54ea8:	18bfcf1e 	bne	r3,r2,54de8 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   54eac:	0001883a 	nop
}
   54eb0:	e037883a 	mov	sp,fp
   54eb4:	dfc00117 	ldw	ra,4(sp)
   54eb8:	df000017 	ldw	fp,0(sp)
   54ebc:	dec00204 	addi	sp,sp,8
   54ec0:	f800283a 	ret

00054ec4 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   54ec4:	deffff04 	addi	sp,sp,-4
   54ec8:	df000015 	stw	fp,0(sp)
   54ecc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   54ed0:	000170fa 	wrctl	ienable,zero
}
   54ed4:	e037883a 	mov	sp,fp
   54ed8:	df000017 	ldw	fp,0(sp)
   54edc:	dec00104 	addi	sp,sp,4
   54ee0:	f800283a 	ret

00054ee4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   54ee4:	defffa04 	addi	sp,sp,-24
   54ee8:	dfc00515 	stw	ra,20(sp)
   54eec:	df000415 	stw	fp,16(sp)
   54ef0:	df000404 	addi	fp,sp,16
   54ef4:	e13ffe15 	stw	r4,-8(fp)
   54ef8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   54efc:	e0bfff17 	ldw	r2,-4(fp)
   54f00:	10800017 	ldw	r2,0(r2)
   54f04:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   54f08:	e13ffe17 	ldw	r4,-8(fp)
   54f0c:	00502c00 	call	502c0 <strlen>
   54f10:	10800044 	addi	r2,r2,1
   54f14:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   54f18:	00000d06 	br	54f50 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   54f1c:	e0bffc17 	ldw	r2,-16(fp)
   54f20:	10c00217 	ldw	r3,8(r2)
   54f24:	e0bffd17 	ldw	r2,-12(fp)
   54f28:	1809883a 	mov	r4,r3
   54f2c:	e17ffe17 	ldw	r5,-8(fp)
   54f30:	100d883a 	mov	r6,r2
   54f34:	00551a80 	call	551a8 <memcmp>
   54f38:	1000021e 	bne	r2,zero,54f44 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   54f3c:	e0bffc17 	ldw	r2,-16(fp)
   54f40:	00000706 	br	54f60 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   54f44:	e0bffc17 	ldw	r2,-16(fp)
   54f48:	10800017 	ldw	r2,0(r2)
   54f4c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   54f50:	e0fffc17 	ldw	r3,-16(fp)
   54f54:	e0bfff17 	ldw	r2,-4(fp)
   54f58:	18bff01e 	bne	r3,r2,54f1c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   54f5c:	0005883a 	mov	r2,zero
}
   54f60:	e037883a 	mov	sp,fp
   54f64:	dfc00117 	ldw	ra,4(sp)
   54f68:	df000017 	ldw	fp,0(sp)
   54f6c:	dec00204 	addi	sp,sp,8
   54f70:	f800283a 	ret

00054f74 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   54f74:	defffb04 	addi	sp,sp,-20
   54f78:	dfc00415 	stw	ra,16(sp)
   54f7c:	df000315 	stw	fp,12(sp)
   54f80:	df000304 	addi	fp,sp,12
   54f84:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   54f88:	00800034 	movhi	r2,0
   54f8c:	10869a04 	addi	r2,r2,6760
   54f90:	10800017 	ldw	r2,0(r2)
   54f94:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   54f98:	00003106 	br	55060 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   54f9c:	e0bffd17 	ldw	r2,-12(fp)
   54fa0:	10800217 	ldw	r2,8(r2)
   54fa4:	1009883a 	mov	r4,r2
   54fa8:	00502c00 	call	502c0 <strlen>
   54fac:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   54fb0:	e0bffd17 	ldw	r2,-12(fp)
   54fb4:	10c00217 	ldw	r3,8(r2)
   54fb8:	e0bffe17 	ldw	r2,-8(fp)
   54fbc:	10bfffc4 	addi	r2,r2,-1
   54fc0:	1885883a 	add	r2,r3,r2
   54fc4:	10800003 	ldbu	r2,0(r2)
   54fc8:	10803fcc 	andi	r2,r2,255
   54fcc:	1080201c 	xori	r2,r2,128
   54fd0:	10bfe004 	addi	r2,r2,-128
   54fd4:	10800bd8 	cmpnei	r2,r2,47
   54fd8:	1000031e 	bne	r2,zero,54fe8 <alt_find_file+0x74>
    {
      len -= 1;
   54fdc:	e0bffe17 	ldw	r2,-8(fp)
   54fe0:	10bfffc4 	addi	r2,r2,-1
   54fe4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   54fe8:	e0bffe17 	ldw	r2,-8(fp)
   54fec:	e0ffff17 	ldw	r3,-4(fp)
   54ff0:	1885883a 	add	r2,r3,r2
   54ff4:	10800003 	ldbu	r2,0(r2)
   54ff8:	10803fcc 	andi	r2,r2,255
   54ffc:	1080201c 	xori	r2,r2,128
   55000:	10bfe004 	addi	r2,r2,-128
   55004:	10800be0 	cmpeqi	r2,r2,47
   55008:	1000081e 	bne	r2,zero,5502c <alt_find_file+0xb8>
   5500c:	e0bffe17 	ldw	r2,-8(fp)
   55010:	e0ffff17 	ldw	r3,-4(fp)
   55014:	1885883a 	add	r2,r3,r2
   55018:	10800003 	ldbu	r2,0(r2)
   5501c:	10803fcc 	andi	r2,r2,255
   55020:	1080201c 	xori	r2,r2,128
   55024:	10bfe004 	addi	r2,r2,-128
   55028:	10000a1e 	bne	r2,zero,55054 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   5502c:	e0bffd17 	ldw	r2,-12(fp)
   55030:	10c00217 	ldw	r3,8(r2)
   55034:	e0bffe17 	ldw	r2,-8(fp)
   55038:	1809883a 	mov	r4,r3
   5503c:	e17fff17 	ldw	r5,-4(fp)
   55040:	100d883a 	mov	r6,r2
   55044:	00551a80 	call	551a8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   55048:	1000021e 	bne	r2,zero,55054 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   5504c:	e0bffd17 	ldw	r2,-12(fp)
   55050:	00000806 	br	55074 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   55054:	e0bffd17 	ldw	r2,-12(fp)
   55058:	10800017 	ldw	r2,0(r2)
   5505c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   55060:	e0fffd17 	ldw	r3,-12(fp)
   55064:	00800034 	movhi	r2,0
   55068:	10869a04 	addi	r2,r2,6760
   5506c:	18bfcb1e 	bne	r3,r2,54f9c <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   55070:	0005883a 	mov	r2,zero
}
   55074:	e037883a 	mov	sp,fp
   55078:	dfc00117 	ldw	ra,4(sp)
   5507c:	df000017 	ldw	fp,0(sp)
   55080:	dec00204 	addi	sp,sp,8
   55084:	f800283a 	ret

00055088 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   55088:	defffa04 	addi	sp,sp,-24
   5508c:	dfc00515 	stw	ra,20(sp)
   55090:	df000415 	stw	fp,16(sp)
   55094:	dc000315 	stw	r16,12(sp)
   55098:	df000304 	addi	fp,sp,12
   5509c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   550a0:	00bffa04 	movi	r2,-24
   550a4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   550a8:	e03ffd15 	stw	zero,-12(fp)
   550ac:	00002106 	br	55134 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   550b0:	04000034 	movhi	r16,0
   550b4:	84021e04 	addi	r16,r16,2168
   550b8:	e0bffd17 	ldw	r2,-12(fp)
   550bc:	1009883a 	mov	r4,r2
   550c0:	01400304 	movi	r5,12
   550c4:	0052d440 	call	52d44 <__mulsi3>
   550c8:	8085883a 	add	r2,r16,r2
   550cc:	10800017 	ldw	r2,0(r2)
   550d0:	1000151e 	bne	r2,zero,55128 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   550d4:	04000034 	movhi	r16,0
   550d8:	84021e04 	addi	r16,r16,2168
   550dc:	e0bffd17 	ldw	r2,-12(fp)
   550e0:	1009883a 	mov	r4,r2
   550e4:	01400304 	movi	r5,12
   550e8:	0052d440 	call	52d44 <__mulsi3>
   550ec:	8085883a 	add	r2,r16,r2
   550f0:	e0ffff17 	ldw	r3,-4(fp)
   550f4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   550f8:	00800034 	movhi	r2,0
   550fc:	10869e04 	addi	r2,r2,6776
   55100:	10c00017 	ldw	r3,0(r2)
   55104:	e0bffd17 	ldw	r2,-12(fp)
   55108:	1880040e 	bge	r3,r2,5511c <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   5510c:	00800034 	movhi	r2,0
   55110:	10869e04 	addi	r2,r2,6776
   55114:	e0fffd17 	ldw	r3,-12(fp)
   55118:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   5511c:	e0bffd17 	ldw	r2,-12(fp)
   55120:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   55124:	00000606 	br	55140 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   55128:	e0bffd17 	ldw	r2,-12(fp)
   5512c:	10800044 	addi	r2,r2,1
   55130:	e0bffd15 	stw	r2,-12(fp)
   55134:	e0bffd17 	ldw	r2,-12(fp)
   55138:	10800810 	cmplti	r2,r2,32
   5513c:	103fdc1e 	bne	r2,zero,550b0 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   55140:	e0bffe17 	ldw	r2,-8(fp)
}
   55144:	e037883a 	mov	sp,fp
   55148:	dfc00217 	ldw	ra,8(sp)
   5514c:	df000117 	ldw	fp,4(sp)
   55150:	dc000017 	ldw	r16,0(sp)
   55154:	dec00304 	addi	sp,sp,12
   55158:	f800283a 	ret

0005515c <atexit>:
   5515c:	200b883a 	mov	r5,r4
   55160:	000d883a 	mov	r6,zero
   55164:	0009883a 	mov	r4,zero
   55168:	000f883a 	mov	r7,zero
   5516c:	00552241 	jmpi	55224 <__register_exitproc>

00055170 <exit>:
   55170:	defffe04 	addi	sp,sp,-8
   55174:	000b883a 	mov	r5,zero
   55178:	dc000015 	stw	r16,0(sp)
   5517c:	dfc00115 	stw	ra,4(sp)
   55180:	2021883a 	mov	r16,r4
   55184:	00553540 	call	55354 <__call_exitprocs>
   55188:	00800034 	movhi	r2,0
   5518c:	10869604 	addi	r2,r2,6744
   55190:	11000017 	ldw	r4,0(r2)
   55194:	20800f17 	ldw	r2,60(r4)
   55198:	10000126 	beq	r2,zero,551a0 <exit+0x30>
   5519c:	103ee83a 	callr	r2
   551a0:	8009883a 	mov	r4,r16
   551a4:	00554f40 	call	554f4 <_exit>

000551a8 <memcmp>:
   551a8:	01c000c4 	movi	r7,3
   551ac:	3980192e 	bgeu	r7,r6,55214 <memcmp+0x6c>
   551b0:	2904b03a 	or	r2,r5,r4
   551b4:	11c4703a 	and	r2,r2,r7
   551b8:	10000f26 	beq	r2,zero,551f8 <memcmp+0x50>
   551bc:	20c00003 	ldbu	r3,0(r4)
   551c0:	28800003 	ldbu	r2,0(r5)
   551c4:	1880151e 	bne	r3,r2,5521c <memcmp+0x74>
   551c8:	31bfff84 	addi	r6,r6,-2
   551cc:	01ffffc4 	movi	r7,-1
   551d0:	00000406 	br	551e4 <memcmp+0x3c>
   551d4:	20c00003 	ldbu	r3,0(r4)
   551d8:	28800003 	ldbu	r2,0(r5)
   551dc:	31bfffc4 	addi	r6,r6,-1
   551e0:	18800e1e 	bne	r3,r2,5521c <memcmp+0x74>
   551e4:	21000044 	addi	r4,r4,1
   551e8:	29400044 	addi	r5,r5,1
   551ec:	31fff91e 	bne	r6,r7,551d4 <memcmp+0x2c>
   551f0:	0005883a 	mov	r2,zero
   551f4:	f800283a 	ret
   551f8:	20c00017 	ldw	r3,0(r4)
   551fc:	28800017 	ldw	r2,0(r5)
   55200:	1880041e 	bne	r3,r2,55214 <memcmp+0x6c>
   55204:	31bfff04 	addi	r6,r6,-4
   55208:	21000104 	addi	r4,r4,4
   5520c:	29400104 	addi	r5,r5,4
   55210:	39bff936 	bltu	r7,r6,551f8 <memcmp+0x50>
   55214:	303fe91e 	bne	r6,zero,551bc <memcmp+0x14>
   55218:	003ff506 	br	551f0 <memcmp+0x48>
   5521c:	1885c83a 	sub	r2,r3,r2
   55220:	f800283a 	ret

00055224 <__register_exitproc>:
   55224:	defffa04 	addi	sp,sp,-24
   55228:	00800034 	movhi	r2,0
   5522c:	10869604 	addi	r2,r2,6744
   55230:	dc000315 	stw	r16,12(sp)
   55234:	14000017 	ldw	r16,0(r2)
   55238:	dc400415 	stw	r17,16(sp)
   5523c:	dfc00515 	stw	ra,20(sp)
   55240:	80805217 	ldw	r2,328(r16)
   55244:	2023883a 	mov	r17,r4
   55248:	10003e26 	beq	r2,zero,55344 <__register_exitproc+0x120>
   5524c:	10c00117 	ldw	r3,4(r2)
   55250:	020007c4 	movi	r8,31
   55254:	40c0180e 	bge	r8,r3,552b8 <__register_exitproc+0x94>
   55258:	00800034 	movhi	r2,0
   5525c:	10800004 	addi	r2,r2,0
   55260:	1000061e 	bne	r2,zero,5527c <__register_exitproc+0x58>
   55264:	00bfffc4 	movi	r2,-1
   55268:	dfc00517 	ldw	ra,20(sp)
   5526c:	dc400417 	ldw	r17,16(sp)
   55270:	dc000317 	ldw	r16,12(sp)
   55274:	dec00604 	addi	sp,sp,24
   55278:	f800283a 	ret
   5527c:	01006404 	movi	r4,400
   55280:	d9400015 	stw	r5,0(sp)
   55284:	d9800115 	stw	r6,4(sp)
   55288:	d9c00215 	stw	r7,8(sp)
   5528c:	00000000 	call	0 <__alt_mem_onchip_data_memory>
   55290:	d9400017 	ldw	r5,0(sp)
   55294:	d9800117 	ldw	r6,4(sp)
   55298:	d9c00217 	ldw	r7,8(sp)
   5529c:	103ff126 	beq	r2,zero,55264 <__register_exitproc+0x40>
   552a0:	80c05217 	ldw	r3,328(r16)
   552a4:	10000115 	stw	zero,4(r2)
   552a8:	10c00015 	stw	r3,0(r2)
   552ac:	80805215 	stw	r2,328(r16)
   552b0:	10006215 	stw	zero,392(r2)
   552b4:	10006315 	stw	zero,396(r2)
   552b8:	10c00117 	ldw	r3,4(r2)
   552bc:	88000d1e 	bne	r17,zero,552f4 <__register_exitproc+0xd0>
   552c0:	19000084 	addi	r4,r3,2
   552c4:	2109883a 	add	r4,r4,r4
   552c8:	18c00044 	addi	r3,r3,1
   552cc:	2109883a 	add	r4,r4,r4
   552d0:	1109883a 	add	r4,r2,r4
   552d4:	10c00115 	stw	r3,4(r2)
   552d8:	0005883a 	mov	r2,zero
   552dc:	21400015 	stw	r5,0(r4)
   552e0:	dfc00517 	ldw	ra,20(sp)
   552e4:	dc400417 	ldw	r17,16(sp)
   552e8:	dc000317 	ldw	r16,12(sp)
   552ec:	dec00604 	addi	sp,sp,24
   552f0:	f800283a 	ret
   552f4:	02400044 	movi	r9,1
   552f8:	12806217 	ldw	r10,392(r2)
   552fc:	48d2983a 	sll	r9,r9,r3
   55300:	19000804 	addi	r4,r3,32
   55304:	18d1883a 	add	r8,r3,r3
   55308:	2109883a 	add	r4,r4,r4
   5530c:	4211883a 	add	r8,r8,r8
   55310:	2109883a 	add	r4,r4,r4
   55314:	1109883a 	add	r4,r2,r4
   55318:	1211883a 	add	r8,r2,r8
   5531c:	5254b03a 	or	r10,r10,r9
   55320:	21c02215 	stw	r7,136(r4)
   55324:	41802215 	stw	r6,136(r8)
   55328:	12806215 	stw	r10,392(r2)
   5532c:	01000084 	movi	r4,2
   55330:	893fe31e 	bne	r17,r4,552c0 <__register_exitproc+0x9c>
   55334:	11006317 	ldw	r4,396(r2)
   55338:	2252b03a 	or	r9,r4,r9
   5533c:	12406315 	stw	r9,396(r2)
   55340:	003fdf06 	br	552c0 <__register_exitproc+0x9c>
   55344:	00800034 	movhi	r2,0
   55348:	1086f804 	addi	r2,r2,7136
   5534c:	80805215 	stw	r2,328(r16)
   55350:	003fbe06 	br	5524c <__register_exitproc+0x28>

00055354 <__call_exitprocs>:
   55354:	00800034 	movhi	r2,0
   55358:	10869604 	addi	r2,r2,6744
   5535c:	10800017 	ldw	r2,0(r2)
   55360:	defff304 	addi	sp,sp,-52
   55364:	df000b15 	stw	fp,44(sp)
   55368:	d8800015 	stw	r2,0(sp)
   5536c:	10805204 	addi	r2,r2,328
   55370:	dd400815 	stw	r21,32(sp)
   55374:	dfc00c15 	stw	ra,48(sp)
   55378:	ddc00a15 	stw	r23,40(sp)
   5537c:	dd800915 	stw	r22,36(sp)
   55380:	dd000715 	stw	r20,28(sp)
   55384:	dcc00615 	stw	r19,24(sp)
   55388:	dc800515 	stw	r18,20(sp)
   5538c:	dc400415 	stw	r17,16(sp)
   55390:	dc000315 	stw	r16,12(sp)
   55394:	d9000115 	stw	r4,4(sp)
   55398:	2839883a 	mov	fp,r5
   5539c:	d8800215 	stw	r2,8(sp)
   553a0:	057fffc4 	movi	r21,-1
   553a4:	d8800017 	ldw	r2,0(sp)
   553a8:	ddc00217 	ldw	r23,8(sp)
   553ac:	14805217 	ldw	r18,328(r2)
   553b0:	90001726 	beq	r18,zero,55410 <__call_exitprocs+0xbc>
   553b4:	94400117 	ldw	r17,4(r18)
   553b8:	8c3fffc4 	addi	r16,r17,-1
   553bc:	80001116 	blt	r16,zero,55404 <__call_exitprocs+0xb0>
   553c0:	8c400044 	addi	r17,r17,1
   553c4:	8427883a 	add	r19,r16,r16
   553c8:	8c63883a 	add	r17,r17,r17
   553cc:	95802204 	addi	r22,r18,136
   553d0:	9ce7883a 	add	r19,r19,r19
   553d4:	8c63883a 	add	r17,r17,r17
   553d8:	b4e7883a 	add	r19,r22,r19
   553dc:	9463883a 	add	r17,r18,r17
   553e0:	e0001726 	beq	fp,zero,55440 <__call_exitprocs+0xec>
   553e4:	8c87c83a 	sub	r3,r17,r18
   553e8:	b0c7883a 	add	r3,r22,r3
   553ec:	18c01e17 	ldw	r3,120(r3)
   553f0:	1f001326 	beq	r3,fp,55440 <__call_exitprocs+0xec>
   553f4:	843fffc4 	addi	r16,r16,-1
   553f8:	9cffff04 	addi	r19,r19,-4
   553fc:	8c7fff04 	addi	r17,r17,-4
   55400:	857ff71e 	bne	r16,r21,553e0 <__call_exitprocs+0x8c>
   55404:	00800034 	movhi	r2,0
   55408:	10800004 	addi	r2,r2,0
   5540c:	10002a1e 	bne	r2,zero,554b8 <__call_exitprocs+0x164>
   55410:	dfc00c17 	ldw	ra,48(sp)
   55414:	df000b17 	ldw	fp,44(sp)
   55418:	ddc00a17 	ldw	r23,40(sp)
   5541c:	dd800917 	ldw	r22,36(sp)
   55420:	dd400817 	ldw	r21,32(sp)
   55424:	dd000717 	ldw	r20,28(sp)
   55428:	dcc00617 	ldw	r19,24(sp)
   5542c:	dc800517 	ldw	r18,20(sp)
   55430:	dc400417 	ldw	r17,16(sp)
   55434:	dc000317 	ldw	r16,12(sp)
   55438:	dec00d04 	addi	sp,sp,52
   5543c:	f800283a 	ret
   55440:	91000117 	ldw	r4,4(r18)
   55444:	88c00017 	ldw	r3,0(r17)
   55448:	213fffc4 	addi	r4,r4,-1
   5544c:	24001526 	beq	r4,r16,554a4 <__call_exitprocs+0x150>
   55450:	88000015 	stw	zero,0(r17)
   55454:	183fe726 	beq	r3,zero,553f4 <__call_exitprocs+0xa0>
   55458:	00800044 	movi	r2,1
   5545c:	1408983a 	sll	r4,r2,r16
   55460:	91406217 	ldw	r5,392(r18)
   55464:	95000117 	ldw	r20,4(r18)
   55468:	214a703a 	and	r5,r4,r5
   5546c:	28000b26 	beq	r5,zero,5549c <__call_exitprocs+0x148>
   55470:	91406317 	ldw	r5,396(r18)
   55474:	2148703a 	and	r4,r4,r5
   55478:	20000c1e 	bne	r4,zero,554ac <__call_exitprocs+0x158>
   5547c:	99400017 	ldw	r5,0(r19)
   55480:	d9000117 	ldw	r4,4(sp)
   55484:	183ee83a 	callr	r3
   55488:	90c00117 	ldw	r3,4(r18)
   5548c:	1d3fc51e 	bne	r3,r20,553a4 <__call_exitprocs+0x50>
   55490:	b8c00017 	ldw	r3,0(r23)
   55494:	1cbfd726 	beq	r3,r18,553f4 <__call_exitprocs+0xa0>
   55498:	003fc206 	br	553a4 <__call_exitprocs+0x50>
   5549c:	183ee83a 	callr	r3
   554a0:	003ff906 	br	55488 <__call_exitprocs+0x134>
   554a4:	94000115 	stw	r16,4(r18)
   554a8:	003fea06 	br	55454 <__call_exitprocs+0x100>
   554ac:	99000017 	ldw	r4,0(r19)
   554b0:	183ee83a 	callr	r3
   554b4:	003ff406 	br	55488 <__call_exitprocs+0x134>
   554b8:	90c00117 	ldw	r3,4(r18)
   554bc:	1800071e 	bne	r3,zero,554dc <__call_exitprocs+0x188>
   554c0:	90c00017 	ldw	r3,0(r18)
   554c4:	18000926 	beq	r3,zero,554ec <__call_exitprocs+0x198>
   554c8:	9009883a 	mov	r4,r18
   554cc:	b8c00015 	stw	r3,0(r23)
   554d0:	00000000 	call	0 <__alt_mem_onchip_data_memory>
   554d4:	bc800017 	ldw	r18,0(r23)
   554d8:	003fb506 	br	553b0 <__call_exitprocs+0x5c>
   554dc:	90c00017 	ldw	r3,0(r18)
   554e0:	902f883a 	mov	r23,r18
   554e4:	1825883a 	mov	r18,r3
   554e8:	003fb106 	br	553b0 <__call_exitprocs+0x5c>
   554ec:	0007883a 	mov	r3,zero
   554f0:	003ffb06 	br	554e0 <__call_exitprocs+0x18c>

000554f4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   554f4:	defffc04 	addi	sp,sp,-16
   554f8:	df000315 	stw	fp,12(sp)
   554fc:	df000304 	addi	fp,sp,12
   55500:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   55504:	0001883a 	nop
   55508:	e0bfff17 	ldw	r2,-4(fp)
   5550c:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
   55510:	e0bffd17 	ldw	r2,-12(fp)
   55514:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   55518:	e0bffe17 	ldw	r2,-8(fp)
   5551c:	10000226 	beq	r2,zero,55528 <_exit+0x34>
    ALT_SIM_FAIL();
   55520:	002af070 	cmpltui	zero,zero,43969
   55524:	00000106 	br	5552c <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   55528:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   5552c:	003fff06 	br	5552c <_exit+0x38>

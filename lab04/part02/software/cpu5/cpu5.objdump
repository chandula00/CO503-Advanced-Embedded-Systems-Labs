
cpu5.elf:     file format elf32-littlenios2
cpu5.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000401b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x00006dc0 memsz 0x00006dc0 flags r-x
    LOAD off    0x00007de0 vaddr 0x00046de0 paddr 0x0004903c align 2**12
         filesz 0x0000225c memsz 0x0000225c flags rw-
    LOAD off    0x0000a298 vaddr 0x0004b298 paddr 0x0004b298 align 2**12
         filesz 0x00000000 memsz 0x000002f0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00006ba8  000401b8  000401b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000080  00046d60  00046d60  00007d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000225c  00046de0  0004903c  00007de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002f0  0004b298  0004b298  0000a298  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0000a03c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000990  00000000  00000000  0000a060  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000181b3  00000000  00000000  0000a9f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00005d0a  00000000  00000000  00022ba3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00007007  00000000  00000000  000288ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000012a0  00000000  00000000  0002f8b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000026a4  00000000  00000000  00030b54  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00005a4f  00000000  00000000  000331f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  00038c48  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000398  00000000  00000000  00038c58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0003ba75  2**0
                  CONTENTS, READONLY
 17 .cpu          00000004  00000000  00000000  0003ba78  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0003ba7c  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0003ba7d  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0003ba7e  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0003ba82  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0003ba86  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000a  00000000  00000000  0003ba8a  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000a  00000000  00000000  0003ba94  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000a  00000000  00000000  0003ba9e  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000004  00000000  00000000  0003baa8  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000052  00000000  00000000  0003baac  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00192ad8  00000000  00000000  0003bafe  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
000401b8 l    d  .text	00000000 .text
00046d60 l    d  .rodata	00000000 .rodata
00046de0 l    d  .rwdata	00000000 .rwdata
0004b298 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../cpu5_bsp//obj/HAL/src/crt0.o
000401f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00040094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 FIFO.c
00000000 l    df *ABS*	00000000 huffman.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
000475f4 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000430c0 l     F .text	00000008 __fp_lock
000430c8 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_close.c
000440a0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000441bc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000441e8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000442e8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000443dc l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000444c8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
000446a4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0004902c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00044918 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00044a58 l     F .text	00000038 alt_dev_reg
00047fa4 l     O .rwdata	00001060 jtag_uart5
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00045244 l     F .text	00000204 altera_avalon_jtag_uart_irq
00045448 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00045a84 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00045cdc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00046168 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000462c0 l     F .text	00000050 alt_get_errno
00046310 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00043f64 g     F .text	00000064 _isatty_r
000445ec g     F .text	00000078 alt_main
00041584 g     F .text	00000084 _puts_r
0004b2f8 g     O .bss	00000100 alt_irq
00043fc8 g     F .text	0000006c _lseek_r
00044db0 g     F .text	00000058 altera_avalon_fifo_write_almostfull
0004903c g       *ABS*	00000000 __flash_rwdata_start
0004b588 g       *ABS*	00000000 __alt_heap_start
00046de0 g     O .rwdata	00000018 luminance_dc_code_table
00043c78 g     F .text	0000005c __sseek
00043164 g     F .text	0000010c __sinit
000430dc g     F .text	00000078 __sfmoreglue
00044684 g     F .text	00000020 __malloc_unlock
00042548 g     F .text	0000018c memmove
00044b30 g     F .text	00000098 altera_avalon_fifo_init
00043154 g     F .text	00000010 _cleanup
00044e60 g     F .text	00000058 altera_avalon_fifo_write_fifo
00000000  w      *UND*	00000000 __errno
00040000 g     F .entry	0000000c __reset
00044ff8 g     F .text	00000028 altera_avalon_fifo_read_backpressure
00040020 g       *ABS*	00000000 __flash_exceptions_start
00043efc g     F .text	00000068 _fstat_r
0004b2b4 g     O .bss	00000004 errno
0004b2bc g     O .bss	00000004 alt_argv
00051004 g       *ABS*	00000000 _gp
00044cfc g     F .text	0000005c altera_avalon_fifo_clear_event
00047e24 g     O .rwdata	00000180 alt_fd_list
00046714 g     F .text	00000090 alt_find_dev
00042408 g     F .text	00000140 memcpy
000430d0 g     F .text	0000000c _cleanup_r
00046248 g     F .text	00000078 alt_io_redirect
00046d60 g       *ABS*	00000000 __DTOR_END__
00041608 g     F .text	00000014 puts
000470c8 g     O .rwdata	00000144 chrominance_ac_code_table
00045648 g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00044338 g     F .text	000000a4 isatty
0004b2b0 g     O .bss	00000004 __malloc_top_pad
000416a8 g     F .text	000004e4 __sfvwrite_r
00042cd0 g     F .text	00000064 _sbrk_r
00044034 g     F .text	0000006c _read_r
00049024 g     O .rwdata	00000004 alt_max_fd
00043dac g     F .text	0000013c _fclose_r
00043090 g     F .text	00000030 fflush
0004b2ac g     O .bss	00000004 __malloc_max_sbrked_mem
0004b2a4 g     O .bss	00000004 temp
00044518 g     F .text	000000d4 lseek
00049004 g     O .rwdata	00000004 _global_impure_ptr
000426d4 g     F .text	000005fc _realloc_r
0004b588 g       *ABS*	00000000 __bss_end
00046078 g     F .text	000000f0 alt_iic_isr_register
000465f0 g     F .text	00000104 alt_tick
0004337c g     F .text	00000018 __fp_lock_all
0004602c g     F .text	0000004c alt_ic_irq_enabled
000402a8 g     F .text	00000040 FIFO_INIT
00046558 g     F .text	00000098 alt_alarm_stop
0004b2c4 g     O .bss	00000004 alt_irq_active
000400ec g     F .exceptions	000000cc alt_irq_handler
00047dfc g     O .rwdata	00000028 alt_dev_null
00045cc0 g     F .text	0000001c alt_dcache_flush_all
00044d58 g     F .text	00000058 altera_avalon_fifo_write_ienable
0004903c g       *ABS*	00000000 __ram_rwdata_end
00044c6c g     F .text	0000002c altera_avalon_fifo_read_almostempty
0004901c g     O .rwdata	00000008 alt_dev_list
00044968 g     F .text	000000f0 write
00040328 g     F .text	000005b4 write_markers
00046de0 g       *ABS*	00000000 __ram_rodata_end
00044238 g     F .text	000000b0 fstat
0004b588 g       *ABS*	00000000 end
00045184 g     F .text	000000c0 altera_avalon_jtag_uart_init
00044c98 g     F .text	0000003c altera_avalon_fifo_read_event
00046d60 g       *ABS*	00000000 __CTOR_LIST__
00057000 g       *ABS*	00000000 __alt_stack_pointer
00045af8 g     F .text	00000088 alt_avalon_timer_sc_init
00046e10 g     O .rwdata	00000018 chrominance_dc_code_table
00045860 g     F .text	00000224 altera_avalon_jtag_uart_write
0004336c g     F .text	00000004 __sfp_lock_acquire
00044f24 g     F .text	0000004c altera_avalon_fifo_read_fifo
00042310 g     F .text	000000f8 memchr
000434e8 g     F .text	000002d0 _free_r
00046b84 g     F .text	000001a0 __call_exitprocs
0004900c g     O .rwdata	00000004 __malloc_sbrk_base
000401b8 g     F .text	0000003c _start
0004b2c8 g     O .bss	00000004 _alt_tick_rate
0004b2cc g     O .bss	00000004 _alt_nticks
000446f4 g     F .text	000000f4 read
00044ac4 g     F .text	0000006c alt_sys_init
00046a54 g     F .text	00000130 __register_exitproc
000454ec g     F .text	00000068 altera_avalon_jtag_uart_close
0004155c g     F .text	00000028 __mulsi3
00046de0 g       *ABS*	00000000 __ram_rwdata_start
00046d60 g       *ABS*	00000000 __ram_rodata_start
0004b2d0 g     O .bss	00000028 __malloc_current_mallinfo
0004b2a0 g     O .bss	00000002 ldc2
0004720c g     O .rwdata	00000144 chrominance_ac_size_table
00045020 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000468b8 g     F .text	000000d4 alt_get_fd
00043d48 g     F .text	00000064 _close_r
000469d8 g     F .text	0000007c memcmp
000450e0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0004b588 g       *ABS*	00000000 __alt_stack_base
00045130 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00042d34 g     F .text	00000174 __swsetup_r
00044bc8 g     F .text	0000003c altera_avalon_fifo_read_status
00043270 g     F .text	000000fc __sfp
000479f4 g     O .rwdata	00000408 __malloc_av_
00043378 g     F .text	00000004 __sinit_lock_release
00043b9c g     F .text	00000054 __sread
00044fcc g     F .text	0000002c altera_avalon_fifo_read_other_info
000467a4 g     F .text	00000114 alt_find_file
00045d2c g     F .text	000000a0 alt_dev_llist_insert
00044664 g     F .text	00000020 __malloc_lock
00044868 g     F .text	000000b0 sbrk
00042ea8 g     F .text	000001e8 _fflush_r
0004b298 g       *ABS*	00000000 __bss_start
00043ac0 g     F .text	000000dc memset
0004b29e g     O .bss	00000002 ldc1
0004144c g     F .text	00000110 main
0004b2c0 g     O .bss	00000004 alt_envp
0004b2a8 g     O .bss	00000004 __malloc_max_total_mem
00045080 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00044cd4 g     F .text	00000028 altera_avalon_fifo_read_level
00041338 g     F .text	00000114 close_bitstream
00043cd4 g     F .text	00000008 __sclose
00057000 g       *ABS*	00000000 __alt_heap_limit
00043ee8 g     F .text	00000014 fclose
0004b3f8 g     O .bss	00000190 _atexit0
00041b8c g     F .text	00000784 _malloc_r
00049028 g     O .rwdata	00000004 alt_errno
000437b8 g     F .text	000000a8 _fwalk
000433ac g     F .text	0000013c _malloc_trim_r
00046d60 g       *ABS*	00000000 __CTOR_END__
000408dc g     F .text	00000a5c huffman
00046d60 g       *ABS*	00000000 __flash_rodata_start
00046d60 g       *ABS*	00000000 __DTOR_LIST__
000402e8 g     F .text	00000040 delay
00044a90 g     F .text	00000034 alt_irq_init
000447e8 g     F .text	00000080 alt_release_fd
0004698c g     F .text	00000014 atexit
00043cdc g     F .text	0000006c _write_r
00047350 g     O .rwdata	00000100 bitsize
00049008 g     O .rwdata	00000004 _impure_ptr
0004b2b8 g     O .bss	00000004 alt_argc
00045e28 g     F .text	0000005c _do_dtors
00040254 g     F .text	00000054 READ_FIFO
00040020 g       .exceptions	00000000 alt_irq_entry
00043394 g     F .text	00000018 __fp_unlock_all
00049014 g     O .rwdata	00000008 alt_fs_list
00040020 g       *ABS*	00000000 __ram_exceptions_start
0004b298 g     O .bss	00000004 lcode
00044f70 g     F .text	0000005c altera_avalon_fifo_write_other_info
00045ea0 g     F .text	00000050 alt_ic_isr_register
0004903c g       *ABS*	00000000 _edata
0004b588 g       *ABS*	00000000 _end
000401b8 g       *ABS*	00000000 __ram_exceptions_end
00045554 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00045f8c g     F .text	000000a0 alt_ic_irq_disable
00043bf0 g     F .text	00000088 __swrite
00049010 g     O .rwdata	00000004 __malloc_trim_threshold
00046f84 g     O .rwdata	00000144 luminance_ac_size_table
000466f4 g     F .text	00000020 altera_nios2_qsys_irq_init
000469a0 g     F .text	00000038 exit
00047450 g     O .rwdata	000001a4 markerdata
00043860 g     F .text	000000b8 _fwalk_reent
00044c04 g     F .text	0000003c altera_avalon_fifo_read_ienable
00057000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
0004b2a2 g     O .bss	00000002 ldc3
00043370 g     F .text	00000004 __sfp_lock_release
00040000 g       *ABS*	00000000 __alt_mem_mem5
00046d24 g     F .text	0000003c _exit
00046e28 g     O .rwdata	00000018 chrominance_dc_size_table
00045b80 g     F .text	00000140 alt_alarm_start
00044c40 g     F .text	0000002c altera_avalon_fifo_read_almostfull
00043918 g     F .text	000001a8 __smakebuf_r
0004161c g     F .text	0000008c strlen
00046400 g     F .text	00000158 open
00044eb8 g     F .text	0000006c altera_avalon_read_fifo
0004b29c g     O .bss	00000002 bitindex
00045e84 g     F .text	0000001c alt_icache_flush_all
000401f4 g     F .text	00000060 WRITE_FIFO
00046e40 g     O .rwdata	00000144 luminance_ac_code_table
00049030 g     O .rwdata	00000004 alt_priority_mask
00045ef0 g     F .text	0000009c alt_ic_irq_enable
00044e08 g     F .text	00000058 altera_avalon_fifo_write_almostempty
00049034 g     O .rwdata	00000008 alt_alarm_list
00045dcc g     F .text	0000005c _do_ctors
00046df8 g     O .rwdata	00000018 luminance_dc_size_table
000440f0 g     F .text	000000cc close
00044448 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
00043374 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00040000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40000:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40004:	08406e14 	ori	at,at,440
    jmp r1
   40008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400ec0 	call	400ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000306 	br	40098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   4008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)

00040094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   40094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   40098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   4009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400e8:	ef80083a 	eret

000400ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400ec:	defff904 	addi	sp,sp,-28
   400f0:	dfc00615 	stw	ra,24(sp)
   400f4:	df000515 	stw	fp,20(sp)
   400f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   400fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40100:	0005313a 	rdctl	r2,ipending
   40104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40114:	00800044 	movi	r2,1
   40118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4011c:	e0fffb17 	ldw	r3,-20(fp)
   40120:	e0bffc17 	ldw	r2,-16(fp)
   40124:	1884703a 	and	r2,r3,r2
   40128:	10001726 	beq	r2,zero,40188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4012c:	00c00174 	movhi	r3,5
   40130:	18ecbe04 	addi	r3,r3,-19720
   40134:	e0bffd17 	ldw	r2,-12(fp)
   40138:	100490fa 	slli	r2,r2,3
   4013c:	1885883a 	add	r2,r3,r2
   40140:	10c00017 	ldw	r3,0(r2)
   40144:	01000174 	movhi	r4,5
   40148:	212cbe04 	addi	r4,r4,-19720
   4014c:	e0bffd17 	ldw	r2,-12(fp)
   40150:	100490fa 	slli	r2,r2,3
   40154:	2085883a 	add	r2,r4,r2
   40158:	10800104 	addi	r2,r2,4
   4015c:	10800017 	ldw	r2,0(r2)
   40160:	1009883a 	mov	r4,r2
   40164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4016c:	0005313a 	rdctl	r2,ipending
   40170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   40178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   4017c:	e0bffb17 	ldw	r2,-20(fp)
   40180:	103fe31e 	bne	r2,zero,40110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   40184:	00000706 	br	401a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   40188:	e0bffc17 	ldw	r2,-16(fp)
   4018c:	1085883a 	add	r2,r2,r2
   40190:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40194:	e0bffd17 	ldw	r2,-12(fp)
   40198:	10800044 	addi	r2,r2,1
   4019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a0:	003fde06 	br	4011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   401a4:	e037883a 	mov	sp,fp
   401a8:	dfc00117 	ldw	ra,4(sp)
   401ac:	df000017 	ldw	fp,0(sp)
   401b0:	dec00204 	addi	sp,sp,8
   401b4:	f800283a 	ret

Disassembly of section .text:

000401b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   401b8:	06c00174 	movhi	sp,5
    ori sp, sp, %lo(__alt_stack_pointer)
   401bc:	dedc0014 	ori	sp,sp,28672
    movhi gp, %hi(_gp)
   401c0:	06800174 	movhi	gp,5
    ori gp, gp, %lo(_gp)
   401c4:	d6840114 	ori	gp,gp,4100
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   401c8:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   401cc:	10aca614 	ori	r2,r2,45720

    movhi r3, %hi(__bss_end)
   401d0:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
   401d4:	18ed6214 	ori	r3,r3,46472

    beq r2, r3, 1f
   401d8:	10c00326 	beq	r2,r3,401e8 <_start+0x30>

0:
    stw zero, (r2)
   401dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   401e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   401e4:	10fffd36 	bltu	r2,r3,401dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   401e8:	00444480 	call	44448 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   401ec:	00445ec0 	call	445ec <alt_main>

000401f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   401f0:	003fff06 	br	401f0 <alt_after_alt_main>

000401f4 <WRITE_FIFO>:
 */

#include "FIFO.h"

void WRITE_FIFO(int buffer, int inBase, int controllBase)
{
   401f4:	defffb04 	addi	sp,sp,-20
   401f8:	dfc00415 	stw	ra,16(sp)
   401fc:	df000315 	stw	fp,12(sp)
   40200:	df000304 	addi	fp,sp,12
   40204:	e13ffd15 	stw	r4,-12(fp)
   40208:	e17ffe15 	stw	r5,-8(fp)
   4020c:	e1bfff15 	stw	r6,-4(fp)

	// // Check if FIFO is full before writing
	while (altera_avalon_fifo_read_level(controllBase) == ALMOST_FULL)
   40210:	0001883a 	nop
   40214:	e0bfff17 	ldw	r2,-4(fp)
   40218:	1009883a 	mov	r4,r2
   4021c:	0044cd40 	call	44cd4 <altera_avalon_fifo_read_level>
   40220:	10800220 	cmpeqi	r2,r2,8
   40224:	103ffb1e 	bne	r2,zero,40214 <WRITE_FIFO+0x20>
	{
	}

	// Write data to FIFO
	altera_avalon_fifo_write_fifo(inBase, controllBase, buffer);
   40228:	e13ffe17 	ldw	r4,-8(fp)
   4022c:	e0ffff17 	ldw	r3,-4(fp)
   40230:	e0bffd17 	ldw	r2,-12(fp)
   40234:	180b883a 	mov	r5,r3
   40238:	100d883a 	mov	r6,r2
   4023c:	0044e600 	call	44e60 <altera_avalon_fifo_write_fifo>
}
   40240:	e037883a 	mov	sp,fp
   40244:	dfc00117 	ldw	ra,4(sp)
   40248:	df000017 	ldw	fp,0(sp)
   4024c:	dec00204 	addi	sp,sp,8
   40250:	f800283a 	ret

00040254 <READ_FIFO>:

int READ_FIFO(int outBase, int controllBase)
{
   40254:	defffc04 	addi	sp,sp,-16
   40258:	dfc00315 	stw	ra,12(sp)
   4025c:	df000215 	stw	fp,8(sp)
   40260:	df000204 	addi	fp,sp,8
   40264:	e13ffe15 	stw	r4,-8(fp)
   40268:	e17fff15 	stw	r5,-4(fp)
	// Wait if the FIFO is empty
	// while (altera_avalon_fifo_read_status(FIFO_MEM_IN_CSR_BASE, ALTERA_AVALON_FIFO_STATUS_EMPTY))
	// 	;

	while (altera_avalon_fifo_read_level(controllBase) == ALMOST_EMTY)
   4026c:	0001883a 	nop
   40270:	e0bfff17 	ldw	r2,-4(fp)
   40274:	1009883a 	mov	r4,r2
   40278:	0044cd40 	call	44cd4 <altera_avalon_fifo_read_level>
   4027c:	103ffc26 	beq	r2,zero,40270 <READ_FIFO+0x1c>
	{
	}

	// Read the data
	return altera_avalon_fifo_read_fifo(outBase, controllBase);
   40280:	e0fffe17 	ldw	r3,-8(fp)
   40284:	e0bfff17 	ldw	r2,-4(fp)
   40288:	1809883a 	mov	r4,r3
   4028c:	100b883a 	mov	r5,r2
   40290:	0044f240 	call	44f24 <altera_avalon_fifo_read_fifo>
}
   40294:	e037883a 	mov	sp,fp
   40298:	dfc00117 	ldw	ra,4(sp)
   4029c:	df000017 	ldw	fp,0(sp)
   402a0:	dec00204 	addi	sp,sp,8
   402a4:	f800283a 	ret

000402a8 <FIFO_INIT>:

// Initialization
void FIFO_INIT(int controllBase)
{
   402a8:	defffd04 	addi	sp,sp,-12
   402ac:	dfc00215 	stw	ra,8(sp)
   402b0:	df000115 	stw	fp,4(sp)
   402b4:	df000104 	addi	fp,sp,4
   402b8:	e13fff15 	stw	r4,-4(fp)
	altera_avalon_fifo_init(controllBase,
   402bc:	e0bfff17 	ldw	r2,-4(fp)
   402c0:	1009883a 	mov	r4,r2
   402c4:	000b883a 	mov	r5,zero
   402c8:	000d883a 	mov	r6,zero
   402cc:	01c00204 	movi	r7,8
   402d0:	0044b300 	call	44b30 <altera_avalon_fifo_init>
							0,
							ALMOST_EMTY,  // Almost empty threshold
							ALMOST_FULL); // Almost full threshold
   402d4:	e037883a 	mov	sp,fp
   402d8:	dfc00117 	ldw	ra,4(sp)
   402dc:	df000017 	ldw	fp,0(sp)
   402e0:	dec00204 	addi	sp,sp,8
   402e4:	f800283a 	ret

000402e8 <delay>:
// #include <time.h>

int temp;

void delay(int n)
{
   402e8:	defffd04 	addi	sp,sp,-12
   402ec:	df000215 	stw	fp,8(sp)
   402f0:	df000204 	addi	fp,sp,8
   402f4:	e13fff15 	stw	r4,-4(fp)
	int i;
	for (i = n; i > 0; i--)
   402f8:	e0bfff17 	ldw	r2,-4(fp)
   402fc:	e0bffe15 	stw	r2,-8(fp)
   40300:	00000306 	br	40310 <delay+0x28>
   40304:	e0bffe17 	ldw	r2,-8(fp)
   40308:	10bfffc4 	addi	r2,r2,-1
   4030c:	e0bffe15 	stw	r2,-8(fp)
   40310:	e0bffe17 	ldw	r2,-8(fp)
   40314:	00bffb16 	blt	zero,r2,40304 <delay+0x1c>
	{
		continue;
	}
}
   40318:	e037883a 	mov	sp,fp
   4031c:	df000017 	ldw	fp,0(sp)
   40320:	dec00104 	addi	sp,sp,4
   40324:	f800283a 	ret

00040328 <write_markers>:
	}

// Header for JPEG Encoder

void write_markers(UINT32 image_width, UINT32 image_height)
{
   40328:	defffa04 	addi	sp,sp,-24
   4032c:	dfc00515 	stw	ra,20(sp)
   40330:	df000415 	stw	fp,16(sp)
   40334:	df000404 	addi	fp,sp,16
   40338:	e13ffe15 	stw	r4,-8(fp)
   4033c:	e17fff15 	stw	r5,-4(fp)
	UINT8 number_of_components;

	// // Start of image marker
	// SEND1(0xFF);
	// SEND1(0xD8);
	WRITE_FIFO(0xFF, IN_BASE_5to6, CONTROL_BASE_5to6);
   40340:	01003fc4 	movi	r4,255
   40344:	014000b4 	movhi	r5,2
   40348:	29441b04 	addi	r5,r5,4204
   4034c:	018000b4 	movhi	r6,2
   40350:	31840804 	addi	r6,r6,4128
   40354:	00401f40 	call	401f4 <WRITE_FIFO>
	WRITE_FIFO(0xD8, IN_BASE_5to6, CONTROL_BASE_5to6);
   40358:	01003604 	movi	r4,216
   4035c:	014000b4 	movhi	r5,2
   40360:	29441b04 	addi	r5,r5,4204
   40364:	018000b4 	movhi	r6,2
   40368:	31840804 	addi	r6,r6,4128
   4036c:	00401f40 	call	401f4 <WRITE_FIFO>

	// // Quantization table marker
	// SEND1(0xFF);
	// SEND1(0xDB);
	WRITE_FIFO(0xFF, IN_BASE_5to6, CONTROL_BASE_5to6);
   40370:	01003fc4 	movi	r4,255
   40374:	014000b4 	movhi	r5,2
   40378:	29441b04 	addi	r5,r5,4204
   4037c:	018000b4 	movhi	r6,2
   40380:	31840804 	addi	r6,r6,4128
   40384:	00401f40 	call	401f4 <WRITE_FIFO>
	WRITE_FIFO(0xDB, IN_BASE_5to6, CONTROL_BASE_5to6);
   40388:	010036c4 	movi	r4,219
   4038c:	014000b4 	movhi	r5,2
   40390:	29441b04 	addi	r5,r5,4204
   40394:	018000b4 	movhi	r6,2
   40398:	31840804 	addi	r6,r6,4128
   4039c:	00401f40 	call	401f4 <WRITE_FIFO>

	// // Quantization table length
	// SEND1(0x00);
	// SEND1(0x84);
	WRITE_FIFO(0x00, IN_BASE_5to6, CONTROL_BASE_5to6);
   403a0:	0009883a 	mov	r4,zero
   403a4:	014000b4 	movhi	r5,2
   403a8:	29441b04 	addi	r5,r5,4204
   403ac:	018000b4 	movhi	r6,2
   403b0:	31840804 	addi	r6,r6,4128
   403b4:	00401f40 	call	401f4 <WRITE_FIFO>
	WRITE_FIFO(0x84, IN_BASE_5to6, CONTROL_BASE_5to6);
   403b8:	01002104 	movi	r4,132
   403bc:	014000b4 	movhi	r5,2
   403c0:	29441b04 	addi	r5,r5,4204
   403c4:	018000b4 	movhi	r6,2
   403c8:	31840804 	addi	r6,r6,4128
   403cc:	00401f40 	call	401f4 <WRITE_FIFO>

	// // Pq, Tq
	// SEND1(0x00);
	WRITE_FIFO(0x00, IN_BASE_5to6, CONTROL_BASE_5to6);
   403d0:	0009883a 	mov	r4,zero
   403d4:	014000b4 	movhi	r5,2
   403d8:	29441b04 	addi	r5,r5,4204
   403dc:	018000b4 	movhi	r6,2
   403e0:	31840804 	addi	r6,r6,4128
   403e4:	00401f40 	call	401f4 <WRITE_FIFO>

	// // Lqt table
	for (i = 0; i < 64; i++)
   403e8:	e03ffc0d 	sth	zero,-16(fp)
   403ec:	00000e06 	br	40428 <write_markers+0x100>
	{
		// SEND1((UINT8)RECV2()); // Lqt [i];
		WRITE_FIFO(READ_FIFO(OUT_BASE_4to5, CONTROL_BASE_4to5), IN_BASE_5to6, CONTROL_BASE_5to6);
   403f0:	010000b4 	movhi	r4,2
   403f4:	21041c04 	addi	r4,r4,4208
   403f8:	014000b4 	movhi	r5,2
   403fc:	29440004 	addi	r5,r5,4096
   40400:	00402540 	call	40254 <READ_FIFO>
   40404:	1009883a 	mov	r4,r2
   40408:	014000b4 	movhi	r5,2
   4040c:	29441b04 	addi	r5,r5,4204
   40410:	018000b4 	movhi	r6,2
   40414:	31840804 	addi	r6,r6,4128
   40418:	00401f40 	call	401f4 <WRITE_FIFO>
	// // Pq, Tq
	// SEND1(0x00);
	WRITE_FIFO(0x00, IN_BASE_5to6, CONTROL_BASE_5to6);

	// // Lqt table
	for (i = 0; i < 64; i++)
   4041c:	e0bffc0b 	ldhu	r2,-16(fp)
   40420:	10800044 	addi	r2,r2,1
   40424:	e0bffc0d 	sth	r2,-16(fp)
   40428:	e0bffc0b 	ldhu	r2,-16(fp)
   4042c:	10801030 	cmpltui	r2,r2,64
   40430:	103fef1e 	bne	r2,zero,403f0 <write_markers+0xc8>
		WRITE_FIFO(READ_FIFO(OUT_BASE_4to5, CONTROL_BASE_4to5), IN_BASE_5to6, CONTROL_BASE_5to6);
	}

	// // Pq, Tq
	// SEND1(0x01);
	WRITE_FIFO(0x01, IN_BASE_5to6, CONTROL_BASE_5to6);
   40434:	01000044 	movi	r4,1
   40438:	014000b4 	movhi	r5,2
   4043c:	29441b04 	addi	r5,r5,4204
   40440:	018000b4 	movhi	r6,2
   40444:	31840804 	addi	r6,r6,4128
   40448:	00401f40 	call	401f4 <WRITE_FIFO>

	// // Cqt table
	for (i = 0; i < 64; i++)
   4044c:	e03ffc0d 	sth	zero,-16(fp)
   40450:	00000e06 	br	4048c <write_markers+0x164>
	{
		// SEND1((UINT8)RECV2()); // Cqt [i];
		WRITE_FIFO(READ_FIFO(OUT_BASE_4to5, CONTROL_BASE_4to5), IN_BASE_5to6, CONTROL_BASE_5to6);
   40454:	010000b4 	movhi	r4,2
   40458:	21041c04 	addi	r4,r4,4208
   4045c:	014000b4 	movhi	r5,2
   40460:	29440004 	addi	r5,r5,4096
   40464:	00402540 	call	40254 <READ_FIFO>
   40468:	1009883a 	mov	r4,r2
   4046c:	014000b4 	movhi	r5,2
   40470:	29441b04 	addi	r5,r5,4204
   40474:	018000b4 	movhi	r6,2
   40478:	31840804 	addi	r6,r6,4128
   4047c:	00401f40 	call	401f4 <WRITE_FIFO>
	// // Pq, Tq
	// SEND1(0x01);
	WRITE_FIFO(0x01, IN_BASE_5to6, CONTROL_BASE_5to6);

	// // Cqt table
	for (i = 0; i < 64; i++)
   40480:	e0bffc0b 	ldhu	r2,-16(fp)
   40484:	10800044 	addi	r2,r2,1
   40488:	e0bffc0d 	sth	r2,-16(fp)
   4048c:	e0bffc0b 	ldhu	r2,-16(fp)
   40490:	10801030 	cmpltui	r2,r2,64
   40494:	103fef1e 	bne	r2,zero,40454 <write_markers+0x12c>
		// SEND1((UINT8)RECV2()); // Cqt [i];
		WRITE_FIFO(READ_FIFO(OUT_BASE_4to5, CONTROL_BASE_4to5), IN_BASE_5to6, CONTROL_BASE_5to6);
	}

	// // huffman table(DHT)
	for (i = 0; i < 210; i++)
   40498:	e03ffc0d 	sth	zero,-16(fp)
   4049c:	00001f06 	br	4051c <write_markers+0x1f4>
	{
		// SEND1((UINT8)(markerdata[i] >> 8));
		// SEND1((UINT8)markerdata[i]);

		WRITE_FIFO((UINT8)(markerdata[i] >> 8), IN_BASE_5to6, CONTROL_BASE_5to6);
   404a0:	e0bffc0b 	ldhu	r2,-16(fp)
   404a4:	00c00134 	movhi	r3,4
   404a8:	18dd1404 	addi	r3,r3,29776
   404ac:	1085883a 	add	r2,r2,r2
   404b0:	1885883a 	add	r2,r3,r2
   404b4:	1080000b 	ldhu	r2,0(r2)
   404b8:	10bfffcc 	andi	r2,r2,65535
   404bc:	1004d23a 	srli	r2,r2,8
   404c0:	10803fcc 	andi	r2,r2,255
   404c4:	1009883a 	mov	r4,r2
   404c8:	014000b4 	movhi	r5,2
   404cc:	29441b04 	addi	r5,r5,4204
   404d0:	018000b4 	movhi	r6,2
   404d4:	31840804 	addi	r6,r6,4128
   404d8:	00401f40 	call	401f4 <WRITE_FIFO>
		WRITE_FIFO((UINT8)markerdata[i], IN_BASE_5to6, CONTROL_BASE_5to6);
   404dc:	e0bffc0b 	ldhu	r2,-16(fp)
   404e0:	00c00134 	movhi	r3,4
   404e4:	18dd1404 	addi	r3,r3,29776
   404e8:	1085883a 	add	r2,r2,r2
   404ec:	1885883a 	add	r2,r3,r2
   404f0:	1080000b 	ldhu	r2,0(r2)
   404f4:	10803fcc 	andi	r2,r2,255
   404f8:	1009883a 	mov	r4,r2
   404fc:	014000b4 	movhi	r5,2
   40500:	29441b04 	addi	r5,r5,4204
   40504:	018000b4 	movhi	r6,2
   40508:	31840804 	addi	r6,r6,4128
   4050c:	00401f40 	call	401f4 <WRITE_FIFO>
		// SEND1((UINT8)RECV2()); // Cqt [i];
		WRITE_FIFO(READ_FIFO(OUT_BASE_4to5, CONTROL_BASE_4to5), IN_BASE_5to6, CONTROL_BASE_5to6);
	}

	// // huffman table(DHT)
	for (i = 0; i < 210; i++)
   40510:	e0bffc0b 	ldhu	r2,-16(fp)
   40514:	10800044 	addi	r2,r2,1
   40518:	e0bffc0d 	sth	r2,-16(fp)
   4051c:	e0bffc0b 	ldhu	r2,-16(fp)
   40520:	108034b0 	cmpltui	r2,r2,210
   40524:	103fde1e 	bne	r2,zero,404a0 <write_markers+0x178>

		WRITE_FIFO((UINT8)(markerdata[i] >> 8), IN_BASE_5to6, CONTROL_BASE_5to6);
		WRITE_FIFO((UINT8)markerdata[i], IN_BASE_5to6, CONTROL_BASE_5to6);
	}

	number_of_components = 3;
   40528:	008000c4 	movi	r2,3
   4052c:	e0bffc85 	stb	r2,-14(fp)
	// Frame header(SOF)

	// Start of frame marker
	// SEND1(0xFF);
	// SEND1(0xC0);
	WRITE_FIFO(0xFF, IN_BASE_5to6, CONTROL_BASE_5to6);
   40530:	01003fc4 	movi	r4,255
   40534:	014000b4 	movhi	r5,2
   40538:	29441b04 	addi	r5,r5,4204
   4053c:	018000b4 	movhi	r6,2
   40540:	31840804 	addi	r6,r6,4128
   40544:	00401f40 	call	401f4 <WRITE_FIFO>
	WRITE_FIFO(0xC0, IN_BASE_5to6, CONTROL_BASE_5to6);
   40548:	01003004 	movi	r4,192
   4054c:	014000b4 	movhi	r5,2
   40550:	29441b04 	addi	r5,r5,4204
   40554:	018000b4 	movhi	r6,2
   40558:	31840804 	addi	r6,r6,4128
   4055c:	00401f40 	call	401f4 <WRITE_FIFO>

	header_length = (UINT16)(8 + 3 * number_of_components);
   40560:	e0fffc83 	ldbu	r3,-14(fp)
   40564:	1805883a 	mov	r2,r3
   40568:	1085883a 	add	r2,r2,r2
   4056c:	10c5883a 	add	r2,r2,r3
   40570:	10800204 	addi	r2,r2,8
   40574:	e0bffd0d 	sth	r2,-12(fp)

	// Frame header length
	// SEND1((UINT8)(header_length >> 8));
	// SEND1((UINT8)header_length);
	WRITE_FIFO((UINT8)(header_length >> 8), IN_BASE_5to6, CONTROL_BASE_5to6);
   40578:	e0bffd0b 	ldhu	r2,-12(fp)
   4057c:	1004d23a 	srli	r2,r2,8
   40580:	10803fcc 	andi	r2,r2,255
   40584:	1009883a 	mov	r4,r2
   40588:	014000b4 	movhi	r5,2
   4058c:	29441b04 	addi	r5,r5,4204
   40590:	018000b4 	movhi	r6,2
   40594:	31840804 	addi	r6,r6,4128
   40598:	00401f40 	call	401f4 <WRITE_FIFO>
	WRITE_FIFO((UINT8)header_length, IN_BASE_5to6, CONTROL_BASE_5to6);
   4059c:	e0bffd0b 	ldhu	r2,-12(fp)
   405a0:	10803fcc 	andi	r2,r2,255
   405a4:	1009883a 	mov	r4,r2
   405a8:	014000b4 	movhi	r5,2
   405ac:	29441b04 	addi	r5,r5,4204
   405b0:	018000b4 	movhi	r6,2
   405b4:	31840804 	addi	r6,r6,4128
   405b8:	00401f40 	call	401f4 <WRITE_FIFO>

	// Precision (P)
	// SEND1(0x08);
	WRITE_FIFO(0x08, IN_BASE_5to6, CONTROL_BASE_5to6);
   405bc:	01000204 	movi	r4,8
   405c0:	014000b4 	movhi	r5,2
   405c4:	29441b04 	addi	r5,r5,4204
   405c8:	018000b4 	movhi	r6,2
   405cc:	31840804 	addi	r6,r6,4128
   405d0:	00401f40 	call	401f4 <WRITE_FIFO>

	// image height
	// SEND1((UINT8)(image_height >> 8));
	// SEND1((UINT8)image_height);
	WRITE_FIFO((UINT8)(image_height >> 8), IN_BASE_5to6, CONTROL_BASE_5to6);
   405d4:	e0bfff17 	ldw	r2,-4(fp)
   405d8:	1004d23a 	srli	r2,r2,8
   405dc:	10803fcc 	andi	r2,r2,255
   405e0:	1009883a 	mov	r4,r2
   405e4:	014000b4 	movhi	r5,2
   405e8:	29441b04 	addi	r5,r5,4204
   405ec:	018000b4 	movhi	r6,2
   405f0:	31840804 	addi	r6,r6,4128
   405f4:	00401f40 	call	401f4 <WRITE_FIFO>
	WRITE_FIFO((UINT8)image_height, IN_BASE_5to6, CONTROL_BASE_5to6);
   405f8:	e0bfff17 	ldw	r2,-4(fp)
   405fc:	10803fcc 	andi	r2,r2,255
   40600:	1009883a 	mov	r4,r2
   40604:	014000b4 	movhi	r5,2
   40608:	29441b04 	addi	r5,r5,4204
   4060c:	018000b4 	movhi	r6,2
   40610:	31840804 	addi	r6,r6,4128
   40614:	00401f40 	call	401f4 <WRITE_FIFO>

	// image width
	// SEND1((UINT8)(image_width >> 8));
	// SEND1((UINT8)image_width);
	WRITE_FIFO((UINT8)(image_width >> 8), IN_BASE_5to6, CONTROL_BASE_5to6);
   40618:	e0bffe17 	ldw	r2,-8(fp)
   4061c:	1004d23a 	srli	r2,r2,8
   40620:	10803fcc 	andi	r2,r2,255
   40624:	1009883a 	mov	r4,r2
   40628:	014000b4 	movhi	r5,2
   4062c:	29441b04 	addi	r5,r5,4204
   40630:	018000b4 	movhi	r6,2
   40634:	31840804 	addi	r6,r6,4128
   40638:	00401f40 	call	401f4 <WRITE_FIFO>
	WRITE_FIFO((UINT8)image_width, IN_BASE_5to6, CONTROL_BASE_5to6);
   4063c:	e0bffe17 	ldw	r2,-8(fp)
   40640:	10803fcc 	andi	r2,r2,255
   40644:	1009883a 	mov	r4,r2
   40648:	014000b4 	movhi	r5,2
   4064c:	29441b04 	addi	r5,r5,4204
   40650:	018000b4 	movhi	r6,2
   40654:	31840804 	addi	r6,r6,4128
   40658:	00401f40 	call	401f4 <WRITE_FIFO>

	// Nf
	// SEND1(number_of_components);
	WRITE_FIFO(number_of_components, IN_BASE_5to6, CONTROL_BASE_5to6);
   4065c:	e0bffc83 	ldbu	r2,-14(fp)
   40660:	1009883a 	mov	r4,r2
   40664:	014000b4 	movhi	r5,2
   40668:	29441b04 	addi	r5,r5,4204
   4066c:	018000b4 	movhi	r6,2
   40670:	31840804 	addi	r6,r6,4128
   40674:	00401f40 	call	401f4 <WRITE_FIFO>

	// SEND1(0x01);
	WRITE_FIFO(0x01, IN_BASE_5to6, CONTROL_BASE_5to6);
   40678:	01000044 	movi	r4,1
   4067c:	014000b4 	movhi	r5,2
   40680:	29441b04 	addi	r5,r5,4204
   40684:	018000b4 	movhi	r6,2
   40688:	31840804 	addi	r6,r6,4128
   4068c:	00401f40 	call	401f4 <WRITE_FIFO>

	// SEND1(0x11);
	WRITE_FIFO(0x11, IN_BASE_5to6, CONTROL_BASE_5to6);
   40690:	01000444 	movi	r4,17
   40694:	014000b4 	movhi	r5,2
   40698:	29441b04 	addi	r5,r5,4204
   4069c:	018000b4 	movhi	r6,2
   406a0:	31840804 	addi	r6,r6,4128
   406a4:	00401f40 	call	401f4 <WRITE_FIFO>

	// SEND1(0x00);
	WRITE_FIFO(0x00, IN_BASE_5to6, CONTROL_BASE_5to6);
   406a8:	0009883a 	mov	r4,zero
   406ac:	014000b4 	movhi	r5,2
   406b0:	29441b04 	addi	r5,r5,4204
   406b4:	018000b4 	movhi	r6,2
   406b8:	31840804 	addi	r6,r6,4128
   406bc:	00401f40 	call	401f4 <WRITE_FIFO>

	// SEND1(0x02);
	// SEND1(0x11);
	// SEND1(0x01);
	WRITE_FIFO(0x02, IN_BASE_5to6, CONTROL_BASE_5to6);
   406c0:	01000084 	movi	r4,2
   406c4:	014000b4 	movhi	r5,2
   406c8:	29441b04 	addi	r5,r5,4204
   406cc:	018000b4 	movhi	r6,2
   406d0:	31840804 	addi	r6,r6,4128
   406d4:	00401f40 	call	401f4 <WRITE_FIFO>
	WRITE_FIFO(0x11, IN_BASE_5to6, CONTROL_BASE_5to6);
   406d8:	01000444 	movi	r4,17
   406dc:	014000b4 	movhi	r5,2
   406e0:	29441b04 	addi	r5,r5,4204
   406e4:	018000b4 	movhi	r6,2
   406e8:	31840804 	addi	r6,r6,4128
   406ec:	00401f40 	call	401f4 <WRITE_FIFO>
	WRITE_FIFO(0x01, IN_BASE_5to6, CONTROL_BASE_5to6);
   406f0:	01000044 	movi	r4,1
   406f4:	014000b4 	movhi	r5,2
   406f8:	29441b04 	addi	r5,r5,4204
   406fc:	018000b4 	movhi	r6,2
   40700:	31840804 	addi	r6,r6,4128
   40704:	00401f40 	call	401f4 <WRITE_FIFO>

	// SEND1(0x03);
	// SEND1(0x11);
	// SEND1(0x01);
	WRITE_FIFO(0x03, IN_BASE_5to6, CONTROL_BASE_5to6);
   40708:	010000c4 	movi	r4,3
   4070c:	014000b4 	movhi	r5,2
   40710:	29441b04 	addi	r5,r5,4204
   40714:	018000b4 	movhi	r6,2
   40718:	31840804 	addi	r6,r6,4128
   4071c:	00401f40 	call	401f4 <WRITE_FIFO>
	WRITE_FIFO(0x11, IN_BASE_5to6, CONTROL_BASE_5to6);
   40720:	01000444 	movi	r4,17
   40724:	014000b4 	movhi	r5,2
   40728:	29441b04 	addi	r5,r5,4204
   4072c:	018000b4 	movhi	r6,2
   40730:	31840804 	addi	r6,r6,4128
   40734:	00401f40 	call	401f4 <WRITE_FIFO>
	WRITE_FIFO(0x01, IN_BASE_5to6, CONTROL_BASE_5to6);
   40738:	01000044 	movi	r4,1
   4073c:	014000b4 	movhi	r5,2
   40740:	29441b04 	addi	r5,r5,4204
   40744:	018000b4 	movhi	r6,2
   40748:	31840804 	addi	r6,r6,4128
   4074c:	00401f40 	call	401f4 <WRITE_FIFO>

	// Start of scan marker
	// SEND1(0xFF);
	// SEND1(0xDA);
	WRITE_FIFO(0xFF, IN_BASE_5to6, CONTROL_BASE_5to6);
   40750:	01003fc4 	movi	r4,255
   40754:	014000b4 	movhi	r5,2
   40758:	29441b04 	addi	r5,r5,4204
   4075c:	018000b4 	movhi	r6,2
   40760:	31840804 	addi	r6,r6,4128
   40764:	00401f40 	call	401f4 <WRITE_FIFO>
	WRITE_FIFO(0xDA, IN_BASE_5to6, CONTROL_BASE_5to6);
   40768:	01003684 	movi	r4,218
   4076c:	014000b4 	movhi	r5,2
   40770:	29441b04 	addi	r5,r5,4204
   40774:	018000b4 	movhi	r6,2
   40778:	31840804 	addi	r6,r6,4128
   4077c:	00401f40 	call	401f4 <WRITE_FIFO>

	header_length = (UINT16)(6 + (number_of_components << 1));
   40780:	e0bffc83 	ldbu	r2,-14(fp)
   40784:	1085883a 	add	r2,r2,r2
   40788:	10800184 	addi	r2,r2,6
   4078c:	e0bffd0d 	sth	r2,-12(fp)

	// Scan header length

	// SEND1((UINT8)(header_length >> 8));
	// SEND1((UINT8)header_length);
	WRITE_FIFO((UINT8)(header_length >> 8), IN_BASE_5to6, CONTROL_BASE_5to6);
   40790:	e0bffd0b 	ldhu	r2,-12(fp)
   40794:	1004d23a 	srli	r2,r2,8
   40798:	10803fcc 	andi	r2,r2,255
   4079c:	1009883a 	mov	r4,r2
   407a0:	014000b4 	movhi	r5,2
   407a4:	29441b04 	addi	r5,r5,4204
   407a8:	018000b4 	movhi	r6,2
   407ac:	31840804 	addi	r6,r6,4128
   407b0:	00401f40 	call	401f4 <WRITE_FIFO>
	WRITE_FIFO((UINT8)header_length, IN_BASE_5to6, CONTROL_BASE_5to6);
   407b4:	e0bffd0b 	ldhu	r2,-12(fp)
   407b8:	10803fcc 	andi	r2,r2,255
   407bc:	1009883a 	mov	r4,r2
   407c0:	014000b4 	movhi	r5,2
   407c4:	29441b04 	addi	r5,r5,4204
   407c8:	018000b4 	movhi	r6,2
   407cc:	31840804 	addi	r6,r6,4128
   407d0:	00401f40 	call	401f4 <WRITE_FIFO>

	// Ns
	// SEND1(number_of_components);
	WRITE_FIFO(number_of_components, IN_BASE_5to6, CONTROL_BASE_5to6);
   407d4:	e0bffc83 	ldbu	r2,-14(fp)
   407d8:	1009883a 	mov	r4,r2
   407dc:	014000b4 	movhi	r5,2
   407e0:	29441b04 	addi	r5,r5,4204
   407e4:	018000b4 	movhi	r6,2
   407e8:	31840804 	addi	r6,r6,4128
   407ec:	00401f40 	call	401f4 <WRITE_FIFO>

	// SEND1(0x01);
	// SEND1(0x00);
	WRITE_FIFO(0x01, IN_BASE_5to6, CONTROL_BASE_5to6);
   407f0:	01000044 	movi	r4,1
   407f4:	014000b4 	movhi	r5,2
   407f8:	29441b04 	addi	r5,r5,4204
   407fc:	018000b4 	movhi	r6,2
   40800:	31840804 	addi	r6,r6,4128
   40804:	00401f40 	call	401f4 <WRITE_FIFO>
	WRITE_FIFO(0x00, IN_BASE_5to6, CONTROL_BASE_5to6);
   40808:	0009883a 	mov	r4,zero
   4080c:	014000b4 	movhi	r5,2
   40810:	29441b04 	addi	r5,r5,4204
   40814:	018000b4 	movhi	r6,2
   40818:	31840804 	addi	r6,r6,4128
   4081c:	00401f40 	call	401f4 <WRITE_FIFO>

	// SEND1(0x02);
	// SEND1(0x11);
	WRITE_FIFO(0x02, IN_BASE_5to6, CONTROL_BASE_5to6);
   40820:	01000084 	movi	r4,2
   40824:	014000b4 	movhi	r5,2
   40828:	29441b04 	addi	r5,r5,4204
   4082c:	018000b4 	movhi	r6,2
   40830:	31840804 	addi	r6,r6,4128
   40834:	00401f40 	call	401f4 <WRITE_FIFO>
	WRITE_FIFO(0x11, IN_BASE_5to6, CONTROL_BASE_5to6);
   40838:	01000444 	movi	r4,17
   4083c:	014000b4 	movhi	r5,2
   40840:	29441b04 	addi	r5,r5,4204
   40844:	018000b4 	movhi	r6,2
   40848:	31840804 	addi	r6,r6,4128
   4084c:	00401f40 	call	401f4 <WRITE_FIFO>

	// SEND1(0x03);
	// SEND1(0x11);
	WRITE_FIFO(0x03, IN_BASE_5to6, CONTROL_BASE_5to6);
   40850:	010000c4 	movi	r4,3
   40854:	014000b4 	movhi	r5,2
   40858:	29441b04 	addi	r5,r5,4204
   4085c:	018000b4 	movhi	r6,2
   40860:	31840804 	addi	r6,r6,4128
   40864:	00401f40 	call	401f4 <WRITE_FIFO>
	WRITE_FIFO(0x11, IN_BASE_5to6, CONTROL_BASE_5to6);
   40868:	01000444 	movi	r4,17
   4086c:	014000b4 	movhi	r5,2
   40870:	29441b04 	addi	r5,r5,4204
   40874:	018000b4 	movhi	r6,2
   40878:	31840804 	addi	r6,r6,4128
   4087c:	00401f40 	call	401f4 <WRITE_FIFO>

	// SEND1(0x00);
	// SEND1(0x3F);
	// SEND1(0x00);
	WRITE_FIFO(0x00, IN_BASE_5to6, CONTROL_BASE_5to6);
   40880:	0009883a 	mov	r4,zero
   40884:	014000b4 	movhi	r5,2
   40888:	29441b04 	addi	r5,r5,4204
   4088c:	018000b4 	movhi	r6,2
   40890:	31840804 	addi	r6,r6,4128
   40894:	00401f40 	call	401f4 <WRITE_FIFO>
	WRITE_FIFO(0x3F, IN_BASE_5to6, CONTROL_BASE_5to6);
   40898:	01000fc4 	movi	r4,63
   4089c:	014000b4 	movhi	r5,2
   408a0:	29441b04 	addi	r5,r5,4204
   408a4:	018000b4 	movhi	r6,2
   408a8:	31840804 	addi	r6,r6,4128
   408ac:	00401f40 	call	401f4 <WRITE_FIFO>
	WRITE_FIFO(0x00, IN_BASE_5to6, CONTROL_BASE_5to6);
   408b0:	0009883a 	mov	r4,zero
   408b4:	014000b4 	movhi	r5,2
   408b8:	29441b04 	addi	r5,r5,4204
   408bc:	018000b4 	movhi	r6,2
   408c0:	31840804 	addi	r6,r6,4128
   408c4:	00401f40 	call	401f4 <WRITE_FIFO>
}
   408c8:	e037883a 	mov	sp,fp
   408cc:	dfc00117 	ldw	ra,4(sp)
   408d0:	df000017 	ldw	fp,0(sp)
   408d4:	dec00204 	addi	sp,sp,8
   408d8:	f800283a 	ret

000408dc <huffman>:
UINT32 lcode = 0;
UINT16 bitindex = 0;
INT16 ldc1 = 0, ldc2 = 0, ldc3 = 0;

void huffman(UINT16 component)
{
   408dc:	defff104 	addi	sp,sp,-60
   408e0:	dfc00e15 	stw	ra,56(sp)
   408e4:	df000d15 	stw	fp,52(sp)
   408e8:	df000d04 	addi	fp,sp,52
   408ec:	2005883a 	mov	r2,r4
   408f0:	e0bfff0d 	sth	r2,-4(fp)
	UINT16 *DcCodeTable, *DcSizeTable, *AcCodeTable, *AcSizeTable;

	// static INT16 ldc1 = 0, ldc2 = 0, ldc3 = 0;

	INT16 *Temp_Ptr, Coeff, LastDc;
	UINT16 AbsCoeff, HuffCode, HuffSize, RunLength = 0, DataSize = 0, index;
   408f4:	e03ff98d 	sth	zero,-26(fp)
   408f8:	e03ffa0d 	sth	zero,-24(fp)
	UINT32 data;

	UINT8 out;

	// Coeff = (INT16)RECV2();
	Coeff = (INT16)READ_FIFO(OUT_BASE_4to5, CONTROL_BASE_4to5);
   408fc:	010000b4 	movhi	r4,2
   40900:	21041c04 	addi	r4,r4,4208
   40904:	014000b4 	movhi	r5,2
   40908:	29440004 	addi	r5,r5,4096
   4090c:	00402540 	call	40254 <READ_FIFO>
   40910:	e0bff80d 	sth	r2,-32(fp)

	// printf("Incoming Data:\n");
	// printf("%4d ", Coeff);

	if (component == 1)
   40914:	e0bfff0b 	ldhu	r2,-4(fp)
   40918:	10800058 	cmpnei	r2,r2,1
   4091c:	1000111e 	bne	r2,zero,40964 <huffman+0x88>
	{
		DcCodeTable = luminance_dc_code_table;
   40920:	00800134 	movhi	r2,4
   40924:	109b7804 	addi	r2,r2,28128
   40928:	e0bff415 	stw	r2,-48(fp)
		DcSizeTable = luminance_dc_size_table;
   4092c:	00800134 	movhi	r2,4
   40930:	109b7e04 	addi	r2,r2,28152
   40934:	e0bff515 	stw	r2,-44(fp)
		AcCodeTable = luminance_ac_code_table;
   40938:	00800134 	movhi	r2,4
   4093c:	109b9004 	addi	r2,r2,28224
   40940:	e0bff615 	stw	r2,-40(fp)
		AcSizeTable = luminance_ac_size_table;
   40944:	00800134 	movhi	r2,4
   40948:	109be104 	addi	r2,r2,28548
   4094c:	e0bff715 	stw	r2,-36(fp)

		LastDc = ldc1;
   40950:	d0a8a68b 	ldhu	r2,-23910(gp)
   40954:	e0bff88d 	sth	r2,-30(fp)
		ldc1 = Coeff;
   40958:	e0bff80b 	ldhu	r2,-32(fp)
   4095c:	d0a8a68d 	sth	r2,-23910(gp)
   40960:	00001806 	br	409c4 <huffman+0xe8>
	}
	else
	{
		DcCodeTable = chrominance_dc_code_table;
   40964:	00800134 	movhi	r2,4
   40968:	109b8404 	addi	r2,r2,28176
   4096c:	e0bff415 	stw	r2,-48(fp)
		DcSizeTable = chrominance_dc_size_table;
   40970:	00800134 	movhi	r2,4
   40974:	109b8a04 	addi	r2,r2,28200
   40978:	e0bff515 	stw	r2,-44(fp)
		AcCodeTable = chrominance_ac_code_table;
   4097c:	00800134 	movhi	r2,4
   40980:	109c3204 	addi	r2,r2,28872
   40984:	e0bff615 	stw	r2,-40(fp)
		AcSizeTable = chrominance_ac_size_table;
   40988:	00800134 	movhi	r2,4
   4098c:	109c8304 	addi	r2,r2,29196
   40990:	e0bff715 	stw	r2,-36(fp)

		if (component == 2)
   40994:	e0bfff0b 	ldhu	r2,-4(fp)
   40998:	10800098 	cmpnei	r2,r2,2
   4099c:	1000051e 	bne	r2,zero,409b4 <huffman+0xd8>
		{
			LastDc = ldc2;
   409a0:	d0a8a70b 	ldhu	r2,-23908(gp)
   409a4:	e0bff88d 	sth	r2,-30(fp)
			ldc2 = Coeff;
   409a8:	e0bff80b 	ldhu	r2,-32(fp)
   409ac:	d0a8a70d 	sth	r2,-23908(gp)
   409b0:	00000406 	br	409c4 <huffman+0xe8>
		}
		else
		{
			LastDc = ldc3;
   409b4:	d0a8a78b 	ldhu	r2,-23906(gp)
   409b8:	e0bff88d 	sth	r2,-30(fp)
			ldc3 = Coeff;
   409bc:	e0bff80b 	ldhu	r2,-32(fp)
   409c0:	d0a8a78d 	sth	r2,-23906(gp)
		}
	}

	Coeff -= LastDc;
   409c4:	e0fff80b 	ldhu	r3,-32(fp)
   409c8:	e0bff88b 	ldhu	r2,-30(fp)
   409cc:	1885c83a 	sub	r2,r3,r2
   409d0:	e0bff80d 	sth	r2,-32(fp)

	AbsCoeff = (Coeff < 0) ? -Coeff-- : Coeff;
   409d4:	e0bff80f 	ldh	r2,-32(fp)
   409d8:	1000060e 	bge	r2,zero,409f4 <huffman+0x118>
   409dc:	e0bff80b 	ldhu	r2,-32(fp)
   409e0:	0085c83a 	sub	r2,zero,r2
   409e4:	e0fff80b 	ldhu	r3,-32(fp)
   409e8:	18ffffc4 	addi	r3,r3,-1
   409ec:	e0fff80d 	sth	r3,-32(fp)
   409f0:	00000106 	br	409f8 <huffman+0x11c>
   409f4:	e0bff80b 	ldhu	r2,-32(fp)
   409f8:	e0bff90d 	sth	r2,-28(fp)

	while (AbsCoeff != 0)
   409fc:	00000606 	br	40a18 <huffman+0x13c>
	{
		AbsCoeff >>= 1;
   40a00:	e0bff90b 	ldhu	r2,-28(fp)
   40a04:	1004d07a 	srli	r2,r2,1
   40a08:	e0bff90d 	sth	r2,-28(fp)
		DataSize++;
   40a0c:	e0bffa0b 	ldhu	r2,-24(fp)
   40a10:	10800044 	addi	r2,r2,1
   40a14:	e0bffa0d 	sth	r2,-24(fp)

	Coeff -= LastDc;

	AbsCoeff = (Coeff < 0) ? -Coeff-- : Coeff;

	while (AbsCoeff != 0)
   40a18:	e0bff90b 	ldhu	r2,-28(fp)
   40a1c:	103ff81e 	bne	r2,zero,40a00 <huffman+0x124>
	{
		AbsCoeff >>= 1;
		DataSize++;
	}

	HuffCode = DcCodeTable[DataSize];
   40a20:	e0bffa0b 	ldhu	r2,-24(fp)
   40a24:	1085883a 	add	r2,r2,r2
   40a28:	e0fff417 	ldw	r3,-48(fp)
   40a2c:	1885883a 	add	r2,r3,r2
   40a30:	1080000b 	ldhu	r2,0(r2)
   40a34:	e0bffa8d 	sth	r2,-22(fp)
	HuffSize = DcSizeTable[DataSize];
   40a38:	e0bffa0b 	ldhu	r2,-24(fp)
   40a3c:	1085883a 	add	r2,r2,r2
   40a40:	e0fff517 	ldw	r3,-44(fp)
   40a44:	1885883a 	add	r2,r3,r2
   40a48:	1080000b 	ldhu	r2,0(r2)
   40a4c:	e0bffb0d 	sth	r2,-20(fp)

	Coeff &= (1 << DataSize) - 1;
   40a50:	e0bffa0b 	ldhu	r2,-24(fp)
   40a54:	00c00044 	movi	r3,1
   40a58:	1884983a 	sll	r2,r3,r2
   40a5c:	10bfffc4 	addi	r2,r2,-1
   40a60:	1007883a 	mov	r3,r2
   40a64:	e0bff80b 	ldhu	r2,-32(fp)
   40a68:	1884703a 	and	r2,r3,r2
   40a6c:	e0bff80d 	sth	r2,-32(fp)
	data = (HuffCode << DataSize) | Coeff;
   40a70:	e0fffa8b 	ldhu	r3,-22(fp)
   40a74:	e0bffa0b 	ldhu	r2,-24(fp)
   40a78:	1886983a 	sll	r3,r3,r2
   40a7c:	e0bff80f 	ldh	r2,-32(fp)
   40a80:	1884b03a 	or	r2,r3,r2
   40a84:	e0bffc15 	stw	r2,-16(fp)
	numbits = HuffSize + DataSize;
   40a88:	e0fffb0b 	ldhu	r3,-20(fp)
   40a8c:	e0bffa0b 	ldhu	r2,-24(fp)
   40a90:	1885883a 	add	r2,r3,r2
   40a94:	e0bffd0d 	sth	r2,-12(fp)

	PUTBITS
   40a98:	d0e8a60b 	ldhu	r3,-23912(gp)
   40a9c:	e0bffd0b 	ldhu	r2,-12(fp)
   40aa0:	1885883a 	add	r2,r3,r2
   40aa4:	10bff804 	addi	r2,r2,-32
   40aa8:	e0bffd8d 	sth	r2,-10(fp)
   40aac:	e0bffd8f 	ldh	r2,-10(fp)
   40ab0:	10000b0e 	bge	r2,zero,40ae0 <huffman+0x204>
   40ab4:	d0e8a517 	ldw	r3,-23916(gp)
   40ab8:	e0bffd0b 	ldhu	r2,-12(fp)
   40abc:	1886983a 	sll	r3,r3,r2
   40ac0:	e0bffc17 	ldw	r2,-16(fp)
   40ac4:	1884b03a 	or	r2,r3,r2
   40ac8:	d0a8a515 	stw	r2,-23916(gp)
   40acc:	d0e8a60b 	ldhu	r3,-23912(gp)
   40ad0:	e0bffd0b 	ldhu	r2,-12(fp)
   40ad4:	1885883a 	add	r2,r3,r2
   40ad8:	d0a8a60d 	sth	r2,-23912(gp)
   40adc:	00005a06 	br	40c48 <huffman+0x36c>
   40ae0:	d0e8a517 	ldw	r3,-23916(gp)
   40ae4:	d0a8a60b 	ldhu	r2,-23912(gp)
   40ae8:	10bfffcc 	andi	r2,r2,65535
   40aec:	01000804 	movi	r4,32
   40af0:	2085c83a 	sub	r2,r4,r2
   40af4:	1886983a 	sll	r3,r3,r2
   40af8:	e0bffd8f 	ldh	r2,-10(fp)
   40afc:	e13ffc17 	ldw	r4,-16(fp)
   40b00:	2084d83a 	srl	r2,r4,r2
   40b04:	1884b03a 	or	r2,r3,r2
   40b08:	d0a8a515 	stw	r2,-23916(gp)
   40b0c:	d0a8a517 	ldw	r2,-23916(gp)
   40b10:	1004d63a 	srli	r2,r2,24
   40b14:	e0bffe05 	stb	r2,-8(fp)
   40b18:	e0bffe03 	ldbu	r2,-8(fp)
   40b1c:	1009883a 	mov	r4,r2
   40b20:	014000b4 	movhi	r5,2
   40b24:	29441b04 	addi	r5,r5,4204
   40b28:	018000b4 	movhi	r6,2
   40b2c:	31840804 	addi	r6,r6,4128
   40b30:	00401f40 	call	401f4 <WRITE_FIFO>
   40b34:	e0bffe03 	ldbu	r2,-8(fp)
   40b38:	10803fd8 	cmpnei	r2,r2,255
   40b3c:	1000061e 	bne	r2,zero,40b58 <huffman+0x27c>
   40b40:	0009883a 	mov	r4,zero
   40b44:	014000b4 	movhi	r5,2
   40b48:	29441b04 	addi	r5,r5,4204
   40b4c:	018000b4 	movhi	r6,2
   40b50:	31840804 	addi	r6,r6,4128
   40b54:	00401f40 	call	401f4 <WRITE_FIFO>
   40b58:	d0a8a517 	ldw	r2,-23916(gp)
   40b5c:	1004d43a 	srli	r2,r2,16
   40b60:	e0bffe05 	stb	r2,-8(fp)
   40b64:	e0bffe03 	ldbu	r2,-8(fp)
   40b68:	1009883a 	mov	r4,r2
   40b6c:	014000b4 	movhi	r5,2
   40b70:	29441b04 	addi	r5,r5,4204
   40b74:	018000b4 	movhi	r6,2
   40b78:	31840804 	addi	r6,r6,4128
   40b7c:	00401f40 	call	401f4 <WRITE_FIFO>
   40b80:	e0bffe03 	ldbu	r2,-8(fp)
   40b84:	10803fd8 	cmpnei	r2,r2,255
   40b88:	1000061e 	bne	r2,zero,40ba4 <huffman+0x2c8>
   40b8c:	0009883a 	mov	r4,zero
   40b90:	014000b4 	movhi	r5,2
   40b94:	29441b04 	addi	r5,r5,4204
   40b98:	018000b4 	movhi	r6,2
   40b9c:	31840804 	addi	r6,r6,4128
   40ba0:	00401f40 	call	401f4 <WRITE_FIFO>
   40ba4:	d0a8a517 	ldw	r2,-23916(gp)
   40ba8:	1004d23a 	srli	r2,r2,8
   40bac:	e0bffe05 	stb	r2,-8(fp)
   40bb0:	e0bffe03 	ldbu	r2,-8(fp)
   40bb4:	1009883a 	mov	r4,r2
   40bb8:	014000b4 	movhi	r5,2
   40bbc:	29441b04 	addi	r5,r5,4204
   40bc0:	018000b4 	movhi	r6,2
   40bc4:	31840804 	addi	r6,r6,4128
   40bc8:	00401f40 	call	401f4 <WRITE_FIFO>
   40bcc:	e0bffe03 	ldbu	r2,-8(fp)
   40bd0:	10803fd8 	cmpnei	r2,r2,255
   40bd4:	1000061e 	bne	r2,zero,40bf0 <huffman+0x314>
   40bd8:	0009883a 	mov	r4,zero
   40bdc:	014000b4 	movhi	r5,2
   40be0:	29441b04 	addi	r5,r5,4204
   40be4:	018000b4 	movhi	r6,2
   40be8:	31840804 	addi	r6,r6,4128
   40bec:	00401f40 	call	401f4 <WRITE_FIFO>
   40bf0:	d0a8a517 	ldw	r2,-23916(gp)
   40bf4:	e0bffe05 	stb	r2,-8(fp)
   40bf8:	e0bffe03 	ldbu	r2,-8(fp)
   40bfc:	1009883a 	mov	r4,r2
   40c00:	014000b4 	movhi	r5,2
   40c04:	29441b04 	addi	r5,r5,4204
   40c08:	018000b4 	movhi	r6,2
   40c0c:	31840804 	addi	r6,r6,4128
   40c10:	00401f40 	call	401f4 <WRITE_FIFO>
   40c14:	e0bffe03 	ldbu	r2,-8(fp)
   40c18:	10803fd8 	cmpnei	r2,r2,255
   40c1c:	1000061e 	bne	r2,zero,40c38 <huffman+0x35c>
   40c20:	0009883a 	mov	r4,zero
   40c24:	014000b4 	movhi	r5,2
   40c28:	29441b04 	addi	r5,r5,4204
   40c2c:	018000b4 	movhi	r6,2
   40c30:	31840804 	addi	r6,r6,4128
   40c34:	00401f40 	call	401f4 <WRITE_FIFO>
   40c38:	e0bffc17 	ldw	r2,-16(fp)
   40c3c:	d0a8a515 	stw	r2,-23916(gp)
   40c40:	e0bffd8b 	ldhu	r2,-10(fp)
   40c44:	d0a8a60d 	sth	r2,-23912(gp)

	for (i = 63; i > 0; i--)
   40c48:	00800fc4 	movi	r2,63
   40c4c:	e0bff30d 	sth	r2,-52(fp)
   40c50:	00013d06 	br	41148 <huffman+0x86c>
	{

		if (((Coeff = (INT16)READ_FIFO(OUT_BASE_4to5, CONTROL_BASE_4to5)) != 0))
   40c54:	010000b4 	movhi	r4,2
   40c58:	21041c04 	addi	r4,r4,4208
   40c5c:	014000b4 	movhi	r5,2
   40c60:	29440004 	addi	r5,r5,4096
   40c64:	00402540 	call	40254 <READ_FIFO>
   40c68:	e0bff80d 	sth	r2,-32(fp)
   40c6c:	e0bff80f 	ldh	r2,-32(fp)
   40c70:	10012f26 	beq	r2,zero,41130 <huffman+0x854>
			// int col = i % 8;

			// if (col == 0)
			// 	printf("\n");

			while (RunLength > 15)
   40c74:	00007706 	br	40e54 <huffman+0x578>
			{
				RunLength -= 16;
   40c78:	e0bff98b 	ldhu	r2,-26(fp)
   40c7c:	10bffc04 	addi	r2,r2,-16
   40c80:	e0bff98d 	sth	r2,-26(fp)
				data = AcCodeTable[161];
   40c84:	e0bff617 	ldw	r2,-40(fp)
   40c88:	10805084 	addi	r2,r2,322
   40c8c:	1080000b 	ldhu	r2,0(r2)
   40c90:	10bfffcc 	andi	r2,r2,65535
   40c94:	e0bffc15 	stw	r2,-16(fp)
				numbits = AcSizeTable[161];
   40c98:	e0bff717 	ldw	r2,-36(fp)
   40c9c:	1080508b 	ldhu	r2,322(r2)
   40ca0:	e0bffd0d 	sth	r2,-12(fp)
				PUTBITS
   40ca4:	d0e8a60b 	ldhu	r3,-23912(gp)
   40ca8:	e0bffd0b 	ldhu	r2,-12(fp)
   40cac:	1885883a 	add	r2,r3,r2
   40cb0:	10bff804 	addi	r2,r2,-32
   40cb4:	e0bffd8d 	sth	r2,-10(fp)
   40cb8:	e0bffd8f 	ldh	r2,-10(fp)
   40cbc:	10000b0e 	bge	r2,zero,40cec <huffman+0x410>
   40cc0:	d0e8a517 	ldw	r3,-23916(gp)
   40cc4:	e0bffd0b 	ldhu	r2,-12(fp)
   40cc8:	1886983a 	sll	r3,r3,r2
   40ccc:	e0bffc17 	ldw	r2,-16(fp)
   40cd0:	1884b03a 	or	r2,r3,r2
   40cd4:	d0a8a515 	stw	r2,-23916(gp)
   40cd8:	d0e8a60b 	ldhu	r3,-23912(gp)
   40cdc:	e0bffd0b 	ldhu	r2,-12(fp)
   40ce0:	1885883a 	add	r2,r3,r2
   40ce4:	d0a8a60d 	sth	r2,-23912(gp)
   40ce8:	00005a06 	br	40e54 <huffman+0x578>
   40cec:	d0e8a517 	ldw	r3,-23916(gp)
   40cf0:	d0a8a60b 	ldhu	r2,-23912(gp)
   40cf4:	10bfffcc 	andi	r2,r2,65535
   40cf8:	01000804 	movi	r4,32
   40cfc:	2085c83a 	sub	r2,r4,r2
   40d00:	1886983a 	sll	r3,r3,r2
   40d04:	e0bffd8f 	ldh	r2,-10(fp)
   40d08:	e13ffc17 	ldw	r4,-16(fp)
   40d0c:	2084d83a 	srl	r2,r4,r2
   40d10:	1884b03a 	or	r2,r3,r2
   40d14:	d0a8a515 	stw	r2,-23916(gp)
   40d18:	d0a8a517 	ldw	r2,-23916(gp)
   40d1c:	1004d63a 	srli	r2,r2,24
   40d20:	e0bffe05 	stb	r2,-8(fp)
   40d24:	e0bffe03 	ldbu	r2,-8(fp)
   40d28:	1009883a 	mov	r4,r2
   40d2c:	014000b4 	movhi	r5,2
   40d30:	29441b04 	addi	r5,r5,4204
   40d34:	018000b4 	movhi	r6,2
   40d38:	31840804 	addi	r6,r6,4128
   40d3c:	00401f40 	call	401f4 <WRITE_FIFO>
   40d40:	e0bffe03 	ldbu	r2,-8(fp)
   40d44:	10803fd8 	cmpnei	r2,r2,255
   40d48:	1000061e 	bne	r2,zero,40d64 <huffman+0x488>
   40d4c:	0009883a 	mov	r4,zero
   40d50:	014000b4 	movhi	r5,2
   40d54:	29441b04 	addi	r5,r5,4204
   40d58:	018000b4 	movhi	r6,2
   40d5c:	31840804 	addi	r6,r6,4128
   40d60:	00401f40 	call	401f4 <WRITE_FIFO>
   40d64:	d0a8a517 	ldw	r2,-23916(gp)
   40d68:	1004d43a 	srli	r2,r2,16
   40d6c:	e0bffe05 	stb	r2,-8(fp)
   40d70:	e0bffe03 	ldbu	r2,-8(fp)
   40d74:	1009883a 	mov	r4,r2
   40d78:	014000b4 	movhi	r5,2
   40d7c:	29441b04 	addi	r5,r5,4204
   40d80:	018000b4 	movhi	r6,2
   40d84:	31840804 	addi	r6,r6,4128
   40d88:	00401f40 	call	401f4 <WRITE_FIFO>
   40d8c:	e0bffe03 	ldbu	r2,-8(fp)
   40d90:	10803fd8 	cmpnei	r2,r2,255
   40d94:	1000061e 	bne	r2,zero,40db0 <huffman+0x4d4>
   40d98:	0009883a 	mov	r4,zero
   40d9c:	014000b4 	movhi	r5,2
   40da0:	29441b04 	addi	r5,r5,4204
   40da4:	018000b4 	movhi	r6,2
   40da8:	31840804 	addi	r6,r6,4128
   40dac:	00401f40 	call	401f4 <WRITE_FIFO>
   40db0:	d0a8a517 	ldw	r2,-23916(gp)
   40db4:	1004d23a 	srli	r2,r2,8
   40db8:	e0bffe05 	stb	r2,-8(fp)
   40dbc:	e0bffe03 	ldbu	r2,-8(fp)
   40dc0:	1009883a 	mov	r4,r2
   40dc4:	014000b4 	movhi	r5,2
   40dc8:	29441b04 	addi	r5,r5,4204
   40dcc:	018000b4 	movhi	r6,2
   40dd0:	31840804 	addi	r6,r6,4128
   40dd4:	00401f40 	call	401f4 <WRITE_FIFO>
   40dd8:	e0bffe03 	ldbu	r2,-8(fp)
   40ddc:	10803fd8 	cmpnei	r2,r2,255
   40de0:	1000061e 	bne	r2,zero,40dfc <huffman+0x520>
   40de4:	0009883a 	mov	r4,zero
   40de8:	014000b4 	movhi	r5,2
   40dec:	29441b04 	addi	r5,r5,4204
   40df0:	018000b4 	movhi	r6,2
   40df4:	31840804 	addi	r6,r6,4128
   40df8:	00401f40 	call	401f4 <WRITE_FIFO>
   40dfc:	d0a8a517 	ldw	r2,-23916(gp)
   40e00:	e0bffe05 	stb	r2,-8(fp)
   40e04:	e0bffe03 	ldbu	r2,-8(fp)
   40e08:	1009883a 	mov	r4,r2
   40e0c:	014000b4 	movhi	r5,2
   40e10:	29441b04 	addi	r5,r5,4204
   40e14:	018000b4 	movhi	r6,2
   40e18:	31840804 	addi	r6,r6,4128
   40e1c:	00401f40 	call	401f4 <WRITE_FIFO>
   40e20:	e0bffe03 	ldbu	r2,-8(fp)
   40e24:	10803fd8 	cmpnei	r2,r2,255
   40e28:	1000061e 	bne	r2,zero,40e44 <huffman+0x568>
   40e2c:	0009883a 	mov	r4,zero
   40e30:	014000b4 	movhi	r5,2
   40e34:	29441b04 	addi	r5,r5,4204
   40e38:	018000b4 	movhi	r6,2
   40e3c:	31840804 	addi	r6,r6,4128
   40e40:	00401f40 	call	401f4 <WRITE_FIFO>
   40e44:	e0bffc17 	ldw	r2,-16(fp)
   40e48:	d0a8a515 	stw	r2,-23916(gp)
   40e4c:	e0bffd8b 	ldhu	r2,-10(fp)
   40e50:	d0a8a60d 	sth	r2,-23912(gp)
			// int col = i % 8;

			// if (col == 0)
			// 	printf("\n");

			while (RunLength > 15)
   40e54:	e0bff98b 	ldhu	r2,-26(fp)
   40e58:	10800428 	cmpgeui	r2,r2,16
   40e5c:	103f861e 	bne	r2,zero,40c78 <huffman+0x39c>
				data = AcCodeTable[161];
				numbits = AcSizeTable[161];
				PUTBITS
			}

			AbsCoeff = (Coeff < 0) ? -Coeff-- : Coeff;
   40e60:	e0bff80f 	ldh	r2,-32(fp)
   40e64:	1000060e 	bge	r2,zero,40e80 <huffman+0x5a4>
   40e68:	e0bff80b 	ldhu	r2,-32(fp)
   40e6c:	0085c83a 	sub	r2,zero,r2
   40e70:	e0fff80b 	ldhu	r3,-32(fp)
   40e74:	18ffffc4 	addi	r3,r3,-1
   40e78:	e0fff80d 	sth	r3,-32(fp)
   40e7c:	00000106 	br	40e84 <huffman+0x5a8>
   40e80:	e0bff80b 	ldhu	r2,-32(fp)
   40e84:	e0bff90d 	sth	r2,-28(fp)

			if (AbsCoeff >> 8 == 0)
   40e88:	e0bff90b 	ldhu	r2,-28(fp)
   40e8c:	1004d23a 	srli	r2,r2,8
   40e90:	10bfffcc 	andi	r2,r2,65535
   40e94:	1000081e 	bne	r2,zero,40eb8 <huffman+0x5dc>
				DataSize = bitsize[AbsCoeff];
   40e98:	e0bff90b 	ldhu	r2,-28(fp)
   40e9c:	00c00134 	movhi	r3,4
   40ea0:	18dcd404 	addi	r3,r3,29520
   40ea4:	1885883a 	add	r2,r3,r2
   40ea8:	10800003 	ldbu	r2,0(r2)
   40eac:	10803fcc 	andi	r2,r2,255
   40eb0:	e0bffa0d 	sth	r2,-24(fp)
   40eb4:	00000a06 	br	40ee0 <huffman+0x604>
			else
				DataSize = bitsize[AbsCoeff >> 8] + 8;
   40eb8:	e0bff90b 	ldhu	r2,-28(fp)
   40ebc:	1004d23a 	srli	r2,r2,8
   40ec0:	10bfffcc 	andi	r2,r2,65535
   40ec4:	00c00134 	movhi	r3,4
   40ec8:	18dcd404 	addi	r3,r3,29520
   40ecc:	1885883a 	add	r2,r3,r2
   40ed0:	10800003 	ldbu	r2,0(r2)
   40ed4:	10803fcc 	andi	r2,r2,255
   40ed8:	10800204 	addi	r2,r2,8
   40edc:	e0bffa0d 	sth	r2,-24(fp)

			index = RunLength * 10 + DataSize;
   40ee0:	e0bff98b 	ldhu	r2,-26(fp)
   40ee4:	1009883a 	mov	r4,r2
   40ee8:	01400284 	movi	r5,10
   40eec:	004155c0 	call	4155c <__mulsi3>
   40ef0:	1007883a 	mov	r3,r2
   40ef4:	e0bffa0b 	ldhu	r2,-24(fp)
   40ef8:	1885883a 	add	r2,r3,r2
   40efc:	e0bffe8d 	sth	r2,-6(fp)
			HuffCode = AcCodeTable[index];
   40f00:	e0bffe8b 	ldhu	r2,-6(fp)
   40f04:	1085883a 	add	r2,r2,r2
   40f08:	e0fff617 	ldw	r3,-40(fp)
   40f0c:	1885883a 	add	r2,r3,r2
   40f10:	1080000b 	ldhu	r2,0(r2)
   40f14:	e0bffa8d 	sth	r2,-22(fp)
			HuffSize = AcSizeTable[index];
   40f18:	e0bffe8b 	ldhu	r2,-6(fp)
   40f1c:	1085883a 	add	r2,r2,r2
   40f20:	e0fff717 	ldw	r3,-36(fp)
   40f24:	1885883a 	add	r2,r3,r2
   40f28:	1080000b 	ldhu	r2,0(r2)
   40f2c:	e0bffb0d 	sth	r2,-20(fp)

			Coeff &= (1 << DataSize) - 1;
   40f30:	e0bffa0b 	ldhu	r2,-24(fp)
   40f34:	00c00044 	movi	r3,1
   40f38:	1884983a 	sll	r2,r3,r2
   40f3c:	10bfffc4 	addi	r2,r2,-1
   40f40:	1007883a 	mov	r3,r2
   40f44:	e0bff80b 	ldhu	r2,-32(fp)
   40f48:	1884703a 	and	r2,r3,r2
   40f4c:	e0bff80d 	sth	r2,-32(fp)
			data = (HuffCode << DataSize) | Coeff;
   40f50:	e0fffa8b 	ldhu	r3,-22(fp)
   40f54:	e0bffa0b 	ldhu	r2,-24(fp)
   40f58:	1886983a 	sll	r3,r3,r2
   40f5c:	e0bff80f 	ldh	r2,-32(fp)
   40f60:	1884b03a 	or	r2,r3,r2
   40f64:	e0bffc15 	stw	r2,-16(fp)
			numbits = HuffSize + DataSize;
   40f68:	e0fffb0b 	ldhu	r3,-20(fp)
   40f6c:	e0bffa0b 	ldhu	r2,-24(fp)
   40f70:	1885883a 	add	r2,r3,r2
   40f74:	e0bffd0d 	sth	r2,-12(fp)

			PUTBITS
   40f78:	d0e8a60b 	ldhu	r3,-23912(gp)
   40f7c:	e0bffd0b 	ldhu	r2,-12(fp)
   40f80:	1885883a 	add	r2,r3,r2
   40f84:	10bff804 	addi	r2,r2,-32
   40f88:	e0bffd8d 	sth	r2,-10(fp)
   40f8c:	e0bffd8f 	ldh	r2,-10(fp)
   40f90:	10000b0e 	bge	r2,zero,40fc0 <huffman+0x6e4>
   40f94:	d0e8a517 	ldw	r3,-23916(gp)
   40f98:	e0bffd0b 	ldhu	r2,-12(fp)
   40f9c:	1886983a 	sll	r3,r3,r2
   40fa0:	e0bffc17 	ldw	r2,-16(fp)
   40fa4:	1884b03a 	or	r2,r3,r2
   40fa8:	d0a8a515 	stw	r2,-23916(gp)
   40fac:	d0e8a60b 	ldhu	r3,-23912(gp)
   40fb0:	e0bffd0b 	ldhu	r2,-12(fp)
   40fb4:	1885883a 	add	r2,r3,r2
   40fb8:	d0a8a60d 	sth	r2,-23912(gp)
   40fbc:	00005a06 	br	41128 <huffman+0x84c>
   40fc0:	d0e8a517 	ldw	r3,-23916(gp)
   40fc4:	d0a8a60b 	ldhu	r2,-23912(gp)
   40fc8:	10bfffcc 	andi	r2,r2,65535
   40fcc:	01000804 	movi	r4,32
   40fd0:	2085c83a 	sub	r2,r4,r2
   40fd4:	1886983a 	sll	r3,r3,r2
   40fd8:	e0bffd8f 	ldh	r2,-10(fp)
   40fdc:	e13ffc17 	ldw	r4,-16(fp)
   40fe0:	2084d83a 	srl	r2,r4,r2
   40fe4:	1884b03a 	or	r2,r3,r2
   40fe8:	d0a8a515 	stw	r2,-23916(gp)
   40fec:	d0a8a517 	ldw	r2,-23916(gp)
   40ff0:	1004d63a 	srli	r2,r2,24
   40ff4:	e0bffe05 	stb	r2,-8(fp)
   40ff8:	e0bffe03 	ldbu	r2,-8(fp)
   40ffc:	1009883a 	mov	r4,r2
   41000:	014000b4 	movhi	r5,2
   41004:	29441b04 	addi	r5,r5,4204
   41008:	018000b4 	movhi	r6,2
   4100c:	31840804 	addi	r6,r6,4128
   41010:	00401f40 	call	401f4 <WRITE_FIFO>
   41014:	e0bffe03 	ldbu	r2,-8(fp)
   41018:	10803fd8 	cmpnei	r2,r2,255
   4101c:	1000061e 	bne	r2,zero,41038 <huffman+0x75c>
   41020:	0009883a 	mov	r4,zero
   41024:	014000b4 	movhi	r5,2
   41028:	29441b04 	addi	r5,r5,4204
   4102c:	018000b4 	movhi	r6,2
   41030:	31840804 	addi	r6,r6,4128
   41034:	00401f40 	call	401f4 <WRITE_FIFO>
   41038:	d0a8a517 	ldw	r2,-23916(gp)
   4103c:	1004d43a 	srli	r2,r2,16
   41040:	e0bffe05 	stb	r2,-8(fp)
   41044:	e0bffe03 	ldbu	r2,-8(fp)
   41048:	1009883a 	mov	r4,r2
   4104c:	014000b4 	movhi	r5,2
   41050:	29441b04 	addi	r5,r5,4204
   41054:	018000b4 	movhi	r6,2
   41058:	31840804 	addi	r6,r6,4128
   4105c:	00401f40 	call	401f4 <WRITE_FIFO>
   41060:	e0bffe03 	ldbu	r2,-8(fp)
   41064:	10803fd8 	cmpnei	r2,r2,255
   41068:	1000061e 	bne	r2,zero,41084 <huffman+0x7a8>
   4106c:	0009883a 	mov	r4,zero
   41070:	014000b4 	movhi	r5,2
   41074:	29441b04 	addi	r5,r5,4204
   41078:	018000b4 	movhi	r6,2
   4107c:	31840804 	addi	r6,r6,4128
   41080:	00401f40 	call	401f4 <WRITE_FIFO>
   41084:	d0a8a517 	ldw	r2,-23916(gp)
   41088:	1004d23a 	srli	r2,r2,8
   4108c:	e0bffe05 	stb	r2,-8(fp)
   41090:	e0bffe03 	ldbu	r2,-8(fp)
   41094:	1009883a 	mov	r4,r2
   41098:	014000b4 	movhi	r5,2
   4109c:	29441b04 	addi	r5,r5,4204
   410a0:	018000b4 	movhi	r6,2
   410a4:	31840804 	addi	r6,r6,4128
   410a8:	00401f40 	call	401f4 <WRITE_FIFO>
   410ac:	e0bffe03 	ldbu	r2,-8(fp)
   410b0:	10803fd8 	cmpnei	r2,r2,255
   410b4:	1000061e 	bne	r2,zero,410d0 <huffman+0x7f4>
   410b8:	0009883a 	mov	r4,zero
   410bc:	014000b4 	movhi	r5,2
   410c0:	29441b04 	addi	r5,r5,4204
   410c4:	018000b4 	movhi	r6,2
   410c8:	31840804 	addi	r6,r6,4128
   410cc:	00401f40 	call	401f4 <WRITE_FIFO>
   410d0:	d0a8a517 	ldw	r2,-23916(gp)
   410d4:	e0bffe05 	stb	r2,-8(fp)
   410d8:	e0bffe03 	ldbu	r2,-8(fp)
   410dc:	1009883a 	mov	r4,r2
   410e0:	014000b4 	movhi	r5,2
   410e4:	29441b04 	addi	r5,r5,4204
   410e8:	018000b4 	movhi	r6,2
   410ec:	31840804 	addi	r6,r6,4128
   410f0:	00401f40 	call	401f4 <WRITE_FIFO>
   410f4:	e0bffe03 	ldbu	r2,-8(fp)
   410f8:	10803fd8 	cmpnei	r2,r2,255
   410fc:	1000061e 	bne	r2,zero,41118 <huffman+0x83c>
   41100:	0009883a 	mov	r4,zero
   41104:	014000b4 	movhi	r5,2
   41108:	29441b04 	addi	r5,r5,4204
   4110c:	018000b4 	movhi	r6,2
   41110:	31840804 	addi	r6,r6,4128
   41114:	00401f40 	call	401f4 <WRITE_FIFO>
   41118:	e0bffc17 	ldw	r2,-16(fp)
   4111c:	d0a8a515 	stw	r2,-23916(gp)
   41120:	e0bffd8b 	ldhu	r2,-10(fp)
   41124:	d0a8a60d 	sth	r2,-23912(gp)
			RunLength = 0;
   41128:	e03ff98d 	sth	zero,-26(fp)
   4112c:	00000306 	br	4113c <huffman+0x860>
		}
		else
		{
			RunLength++;
   41130:	e0bff98b 	ldhu	r2,-26(fp)
   41134:	10800044 	addi	r2,r2,1
   41138:	e0bff98d 	sth	r2,-26(fp)
	data = (HuffCode << DataSize) | Coeff;
	numbits = HuffSize + DataSize;

	PUTBITS

	for (i = 63; i > 0; i--)
   4113c:	e0bff30b 	ldhu	r2,-52(fp)
   41140:	10bfffc4 	addi	r2,r2,-1
   41144:	e0bff30d 	sth	r2,-52(fp)
   41148:	e0bff30b 	ldhu	r2,-52(fp)
   4114c:	103ec11e 	bne	r2,zero,40c54 <huffman+0x378>
		}
	}

	// printf("\n");

	if (RunLength != 0)
   41150:	e0bff98b 	ldhu	r2,-26(fp)
   41154:	10007326 	beq	r2,zero,41324 <huffman+0xa48>
	{
		data = AcCodeTable[0];
   41158:	e0bff617 	ldw	r2,-40(fp)
   4115c:	1080000b 	ldhu	r2,0(r2)
   41160:	10bfffcc 	andi	r2,r2,65535
   41164:	e0bffc15 	stw	r2,-16(fp)
		numbits = AcSizeTable[0];
   41168:	e0bff717 	ldw	r2,-36(fp)
   4116c:	1080000b 	ldhu	r2,0(r2)
   41170:	e0bffd0d 	sth	r2,-12(fp)
		PUTBITS
   41174:	d0e8a60b 	ldhu	r3,-23912(gp)
   41178:	e0bffd0b 	ldhu	r2,-12(fp)
   4117c:	1885883a 	add	r2,r3,r2
   41180:	10bff804 	addi	r2,r2,-32
   41184:	e0bffd8d 	sth	r2,-10(fp)
   41188:	e0bffd8f 	ldh	r2,-10(fp)
   4118c:	10000b0e 	bge	r2,zero,411bc <huffman+0x8e0>
   41190:	d0e8a517 	ldw	r3,-23916(gp)
   41194:	e0bffd0b 	ldhu	r2,-12(fp)
   41198:	1886983a 	sll	r3,r3,r2
   4119c:	e0bffc17 	ldw	r2,-16(fp)
   411a0:	1884b03a 	or	r2,r3,r2
   411a4:	d0a8a515 	stw	r2,-23916(gp)
   411a8:	d0e8a60b 	ldhu	r3,-23912(gp)
   411ac:	e0bffd0b 	ldhu	r2,-12(fp)
   411b0:	1885883a 	add	r2,r3,r2
   411b4:	d0a8a60d 	sth	r2,-23912(gp)
   411b8:	00005a06 	br	41324 <huffman+0xa48>
   411bc:	d0e8a517 	ldw	r3,-23916(gp)
   411c0:	d0a8a60b 	ldhu	r2,-23912(gp)
   411c4:	10bfffcc 	andi	r2,r2,65535
   411c8:	01000804 	movi	r4,32
   411cc:	2085c83a 	sub	r2,r4,r2
   411d0:	1886983a 	sll	r3,r3,r2
   411d4:	e0bffd8f 	ldh	r2,-10(fp)
   411d8:	e13ffc17 	ldw	r4,-16(fp)
   411dc:	2084d83a 	srl	r2,r4,r2
   411e0:	1884b03a 	or	r2,r3,r2
   411e4:	d0a8a515 	stw	r2,-23916(gp)
   411e8:	d0a8a517 	ldw	r2,-23916(gp)
   411ec:	1004d63a 	srli	r2,r2,24
   411f0:	e0bffe05 	stb	r2,-8(fp)
   411f4:	e0bffe03 	ldbu	r2,-8(fp)
   411f8:	1009883a 	mov	r4,r2
   411fc:	014000b4 	movhi	r5,2
   41200:	29441b04 	addi	r5,r5,4204
   41204:	018000b4 	movhi	r6,2
   41208:	31840804 	addi	r6,r6,4128
   4120c:	00401f40 	call	401f4 <WRITE_FIFO>
   41210:	e0bffe03 	ldbu	r2,-8(fp)
   41214:	10803fd8 	cmpnei	r2,r2,255
   41218:	1000061e 	bne	r2,zero,41234 <huffman+0x958>
   4121c:	0009883a 	mov	r4,zero
   41220:	014000b4 	movhi	r5,2
   41224:	29441b04 	addi	r5,r5,4204
   41228:	018000b4 	movhi	r6,2
   4122c:	31840804 	addi	r6,r6,4128
   41230:	00401f40 	call	401f4 <WRITE_FIFO>
   41234:	d0a8a517 	ldw	r2,-23916(gp)
   41238:	1004d43a 	srli	r2,r2,16
   4123c:	e0bffe05 	stb	r2,-8(fp)
   41240:	e0bffe03 	ldbu	r2,-8(fp)
   41244:	1009883a 	mov	r4,r2
   41248:	014000b4 	movhi	r5,2
   4124c:	29441b04 	addi	r5,r5,4204
   41250:	018000b4 	movhi	r6,2
   41254:	31840804 	addi	r6,r6,4128
   41258:	00401f40 	call	401f4 <WRITE_FIFO>
   4125c:	e0bffe03 	ldbu	r2,-8(fp)
   41260:	10803fd8 	cmpnei	r2,r2,255
   41264:	1000061e 	bne	r2,zero,41280 <huffman+0x9a4>
   41268:	0009883a 	mov	r4,zero
   4126c:	014000b4 	movhi	r5,2
   41270:	29441b04 	addi	r5,r5,4204
   41274:	018000b4 	movhi	r6,2
   41278:	31840804 	addi	r6,r6,4128
   4127c:	00401f40 	call	401f4 <WRITE_FIFO>
   41280:	d0a8a517 	ldw	r2,-23916(gp)
   41284:	1004d23a 	srli	r2,r2,8
   41288:	e0bffe05 	stb	r2,-8(fp)
   4128c:	e0bffe03 	ldbu	r2,-8(fp)
   41290:	1009883a 	mov	r4,r2
   41294:	014000b4 	movhi	r5,2
   41298:	29441b04 	addi	r5,r5,4204
   4129c:	018000b4 	movhi	r6,2
   412a0:	31840804 	addi	r6,r6,4128
   412a4:	00401f40 	call	401f4 <WRITE_FIFO>
   412a8:	e0bffe03 	ldbu	r2,-8(fp)
   412ac:	10803fd8 	cmpnei	r2,r2,255
   412b0:	1000061e 	bne	r2,zero,412cc <huffman+0x9f0>
   412b4:	0009883a 	mov	r4,zero
   412b8:	014000b4 	movhi	r5,2
   412bc:	29441b04 	addi	r5,r5,4204
   412c0:	018000b4 	movhi	r6,2
   412c4:	31840804 	addi	r6,r6,4128
   412c8:	00401f40 	call	401f4 <WRITE_FIFO>
   412cc:	d0a8a517 	ldw	r2,-23916(gp)
   412d0:	e0bffe05 	stb	r2,-8(fp)
   412d4:	e0bffe03 	ldbu	r2,-8(fp)
   412d8:	1009883a 	mov	r4,r2
   412dc:	014000b4 	movhi	r5,2
   412e0:	29441b04 	addi	r5,r5,4204
   412e4:	018000b4 	movhi	r6,2
   412e8:	31840804 	addi	r6,r6,4128
   412ec:	00401f40 	call	401f4 <WRITE_FIFO>
   412f0:	e0bffe03 	ldbu	r2,-8(fp)
   412f4:	10803fd8 	cmpnei	r2,r2,255
   412f8:	1000061e 	bne	r2,zero,41314 <huffman+0xa38>
   412fc:	0009883a 	mov	r4,zero
   41300:	014000b4 	movhi	r5,2
   41304:	29441b04 	addi	r5,r5,4204
   41308:	018000b4 	movhi	r6,2
   4130c:	31840804 	addi	r6,r6,4128
   41310:	00401f40 	call	401f4 <WRITE_FIFO>
   41314:	e0bffc17 	ldw	r2,-16(fp)
   41318:	d0a8a515 	stw	r2,-23916(gp)
   4131c:	e0bffd8b 	ldhu	r2,-10(fp)
   41320:	d0a8a60d 	sth	r2,-23912(gp)
	}
}
   41324:	e037883a 	mov	sp,fp
   41328:	dfc00117 	ldw	ra,4(sp)
   4132c:	df000017 	ldw	fp,0(sp)
   41330:	dec00204 	addi	sp,sp,8
   41334:	f800283a 	ret

00041338 <close_bitstream>:

/* For bit Stuffing and EOI marker */
void close_bitstream(void)
{
   41338:	defffb04 	addi	sp,sp,-20
   4133c:	dfc00415 	stw	ra,16(sp)
   41340:	df000315 	stw	fp,12(sp)
   41344:	df000304 	addi	fp,sp,12
	UINT16 i, count;
	UINT8 *ptr;

	UINT8 out;

	if (bitindex > 0)
   41348:	d0a8a60b 	ldhu	r2,-23912(gp)
   4134c:	10bfffcc 	andi	r2,r2,65535
   41350:	10002d26 	beq	r2,zero,41408 <close_bitstream+0xd0>
	{
		lcode <<= (32 - bitindex);
   41354:	d0e8a517 	ldw	r3,-23916(gp)
   41358:	d0a8a60b 	ldhu	r2,-23912(gp)
   4135c:	10bfffcc 	andi	r2,r2,65535
   41360:	01000804 	movi	r4,32
   41364:	2085c83a 	sub	r2,r4,r2
   41368:	1884983a 	sll	r2,r3,r2
   4136c:	d0a8a515 	stw	r2,-23916(gp)
		count = (bitindex + 7) >> 3;
   41370:	d0a8a60b 	ldhu	r2,-23912(gp)
   41374:	10bfffcc 	andi	r2,r2,65535
   41378:	108001c4 	addi	r2,r2,7
   4137c:	1005d0fa 	srai	r2,r2,3
   41380:	e0bfff0d 	sth	r2,-4(fp)

		ptr = (UINT8 *)&lcode + 3;
   41384:	00800174 	movhi	r2,5
   41388:	10aca6c4 	addi	r2,r2,-19813
   4138c:	e0bffe15 	stw	r2,-8(fp)

		for (i = count; i > 0; i--)
   41390:	e0bfff0b 	ldhu	r2,-4(fp)
   41394:	e0bffd0d 	sth	r2,-12(fp)
   41398:	00001906 	br	41400 <close_bitstream+0xc8>
		{
			out = *ptr--;
   4139c:	e0bffe17 	ldw	r2,-8(fp)
   413a0:	10800003 	ldbu	r2,0(r2)
   413a4:	e0bfff85 	stb	r2,-2(fp)
   413a8:	e0bffe17 	ldw	r2,-8(fp)
   413ac:	10bfffc4 	addi	r2,r2,-1
   413b0:	e0bffe15 	stw	r2,-8(fp)

			// SEND1(out);
			WRITE_FIFO(out, IN_BASE_5to6, CONTROL_BASE_5to6);
   413b4:	e0bfff83 	ldbu	r2,-2(fp)
   413b8:	1009883a 	mov	r4,r2
   413bc:	014000b4 	movhi	r5,2
   413c0:	29441b04 	addi	r5,r5,4204
   413c4:	018000b4 	movhi	r6,2
   413c8:	31840804 	addi	r6,r6,4128
   413cc:	00401f40 	call	401f4 <WRITE_FIFO>

			if (out == 0xff)
   413d0:	e0bfff83 	ldbu	r2,-2(fp)
   413d4:	10803fd8 	cmpnei	r2,r2,255
   413d8:	1000061e 	bne	r2,zero,413f4 <close_bitstream+0xbc>
			{
				// SEND1(0);
				WRITE_FIFO(0, IN_BASE_5to6, CONTROL_BASE_5to6);
   413dc:	0009883a 	mov	r4,zero
   413e0:	014000b4 	movhi	r5,2
   413e4:	29441b04 	addi	r5,r5,4204
   413e8:	018000b4 	movhi	r6,2
   413ec:	31840804 	addi	r6,r6,4128
   413f0:	00401f40 	call	401f4 <WRITE_FIFO>
		lcode <<= (32 - bitindex);
		count = (bitindex + 7) >> 3;

		ptr = (UINT8 *)&lcode + 3;

		for (i = count; i > 0; i--)
   413f4:	e0bffd0b 	ldhu	r2,-12(fp)
   413f8:	10bfffc4 	addi	r2,r2,-1
   413fc:	e0bffd0d 	sth	r2,-12(fp)
   41400:	e0bffd0b 	ldhu	r2,-12(fp)
   41404:	103fe51e 	bne	r2,zero,4139c <close_bitstream+0x64>
	}

	// End of image marker
	// SEND1(0xFF);
	// SEND1(0xD9);
	WRITE_FIFO(0xFF, IN_BASE_5to6, CONTROL_BASE_5to6);
   41408:	01003fc4 	movi	r4,255
   4140c:	014000b4 	movhi	r5,2
   41410:	29441b04 	addi	r5,r5,4204
   41414:	018000b4 	movhi	r6,2
   41418:	31840804 	addi	r6,r6,4128
   4141c:	00401f40 	call	401f4 <WRITE_FIFO>
	WRITE_FIFO(0xD9, IN_BASE_5to6, CONTROL_BASE_5to6);
   41420:	01003644 	movi	r4,217
   41424:	014000b4 	movhi	r5,2
   41428:	29441b04 	addi	r5,r5,4204
   4142c:	018000b4 	movhi	r6,2
   41430:	31840804 	addi	r6,r6,4128
   41434:	00401f40 	call	401f4 <WRITE_FIFO>
}
   41438:	e037883a 	mov	sp,fp
   4143c:	dfc00117 	ldw	ra,4(sp)
   41440:	df000017 	ldw	fp,0(sp)
   41444:	dec00204 	addi	sp,sp,8
   41448:	f800283a 	ret

0004144c <main>:

int main(void)
{
   4144c:	defffb04 	addi	sp,sp,-20
   41450:	dfc00415 	stw	ra,16(sp)
   41454:	df000315 	stw	fp,12(sp)
   41458:	df000304 	addi	fp,sp,12
	printf("Starting CPU5\n");
   4145c:	01000134 	movhi	r4,4
   41460:	211b5804 	addi	r4,r4,28000
   41464:	00416080 	call	41608 <puts>
	// {
	// 	fprintf(stderr, "Error opening log file\n");
	// 	return 1;
	// }

	delay(1000000);
   41468:	010003f4 	movhi	r4,15
   4146c:	21109004 	addi	r4,r4,16960
   41470:	00402e80 	call	402e8 <delay>
	FIFO_INIT(CONTROL_BASE_5to6);
   41474:	010000b4 	movhi	r4,2
   41478:	21040804 	addi	r4,r4,4128
   4147c:	00402a80 	call	402a8 <FIFO_INIT>
	delay(1000000);
   41480:	010003f4 	movhi	r4,15
   41484:	21109004 	addi	r4,r4,16960
   41488:	00402e80 	call	402e8 <delay>

	while (1)
	{
		printf("Huffman Started ! \n");
   4148c:	01000134 	movhi	r4,4
   41490:	211b5c04 	addi	r4,r4,28016
   41494:	00416080 	call	41608 <puts>

		lcode = 0;
   41498:	d028a515 	stw	zero,-23916(gp)
		bitindex = 0;
   4149c:	d028a60d 	sth	zero,-23912(gp)
		ldc1 = 0;
   414a0:	d028a68d 	sth	zero,-23910(gp)
		ldc2 = 0;
   414a4:	d028a70d 	sth	zero,-23908(gp)
		ldc3 = 0;
   414a8:	d028a78d 	sth	zero,-23906(gp)

		UINT32 width = (UINT32)READ_FIFO(OUT_BASE_1to5, CONTROL_BASE_1to5);
   414ac:	010000b4 	movhi	r4,2
   414b0:	21041a04 	addi	r4,r4,4200
   414b4:	01440034 	movhi	r5,4096
   414b8:	29440804 	addi	r5,r5,4128
   414bc:	00402540 	call	40254 <READ_FIFO>
   414c0:	e0bffe15 	stw	r2,-8(fp)
		UINT32 height = (UINT32)READ_FIFO(OUT_BASE_1to5, CONTROL_BASE_1to5);
   414c4:	010000b4 	movhi	r4,2
   414c8:	21041a04 	addi	r4,r4,4200
   414cc:	01440034 	movhi	r5,4096
   414d0:	29440804 	addi	r5,r5,4128
   414d4:	00402540 	call	40254 <READ_FIFO>
   414d8:	e0bfff15 	stw	r2,-4(fp)
		UINT32 count = (UINT32)READ_FIFO(OUT_BASE_1to5, CONTROL_BASE_1to5);
   414dc:	010000b4 	movhi	r4,2
   414e0:	21041a04 	addi	r4,r4,4200
   414e4:	01440034 	movhi	r5,4096
   414e8:	29440804 	addi	r5,r5,4128
   414ec:	00402540 	call	40254 <READ_FIFO>
   414f0:	e0bffd15 	stw	r2,-12(fp)

		printf("Meta Data Done\n");
   414f4:	01000134 	movhi	r4,4
   414f8:	211b6104 	addi	r4,r4,28036
   414fc:	00416080 	call	41608 <puts>

		write_markers(width, height);
   41500:	e13ffe17 	ldw	r4,-8(fp)
   41504:	e17fff17 	ldw	r5,-4(fp)
   41508:	00403280 	call	40328 <write_markers>

		for (; count > 0; count--)
   4150c:	00000c06 	br	41540 <main+0xf4>
		{
			// start_time = clock();
			huffman(1);
   41510:	01000044 	movi	r4,1
   41514:	00408dc0 	call	408dc <huffman>
			// end_time = clock();

			// log timestamp
			// fprintf(log_file, "Time taken for Huffman encoding: %f\n", (double)(end_time - start_time) / CLOCKS_PER_SEC);

			huffman(2);
   41518:	01000084 	movi	r4,2
   4151c:	00408dc0 	call	408dc <huffman>
			huffman(3);
   41520:	010000c4 	movi	r4,3
   41524:	00408dc0 	call	408dc <huffman>

			printf("Block Done\n");
   41528:	01000134 	movhi	r4,4
   4152c:	211b6504 	addi	r4,r4,28052
   41530:	00416080 	call	41608 <puts>

		printf("Meta Data Done\n");

		write_markers(width, height);

		for (; count > 0; count--)
   41534:	e0bffd17 	ldw	r2,-12(fp)
   41538:	10bfffc4 	addi	r2,r2,-1
   4153c:	e0bffd15 	stw	r2,-12(fp)
   41540:	e0bffd17 	ldw	r2,-12(fp)
   41544:	103ff21e 	bne	r2,zero,41510 <main+0xc4>
			huffman(3);

			printf("Block Done\n");
		}

		close_bitstream();
   41548:	00413380 	call	41338 <close_bitstream>

		// SEND2(1);

		printf("Image Done\n");
   4154c:	01000134 	movhi	r4,4
   41550:	211b6804 	addi	r4,r4,28064
   41554:	00416080 	call	41608 <puts>
	}
   41558:	003fcc06 	br	4148c <main+0x40>

0004155c <__mulsi3>:
   4155c:	0005883a 	mov	r2,zero
   41560:	20000726 	beq	r4,zero,41580 <__mulsi3+0x24>
   41564:	20c0004c 	andi	r3,r4,1
   41568:	2008d07a 	srli	r4,r4,1
   4156c:	18000126 	beq	r3,zero,41574 <__mulsi3+0x18>
   41570:	1145883a 	add	r2,r2,r5
   41574:	294b883a 	add	r5,r5,r5
   41578:	203ffa1e 	bne	r4,zero,41564 <__mulsi3+0x8>
   4157c:	f800283a 	ret
   41580:	f800283a 	ret

00041584 <_puts_r>:
   41584:	defff604 	addi	sp,sp,-40
   41588:	dc400815 	stw	r17,32(sp)
   4158c:	2023883a 	mov	r17,r4
   41590:	2809883a 	mov	r4,r5
   41594:	dc000715 	stw	r16,28(sp)
   41598:	dfc00915 	stw	ra,36(sp)
   4159c:	2821883a 	mov	r16,r5
   415a0:	004161c0 	call	4161c <strlen>
   415a4:	10c00044 	addi	r3,r2,1
   415a8:	d8800115 	stw	r2,4(sp)
   415ac:	89400217 	ldw	r5,8(r17)
   415b0:	00800134 	movhi	r2,4
   415b4:	109b6b04 	addi	r2,r2,28076
   415b8:	d8800215 	stw	r2,8(sp)
   415bc:	00800044 	movi	r2,1
   415c0:	d8800315 	stw	r2,12(sp)
   415c4:	8809883a 	mov	r4,r17
   415c8:	00800084 	movi	r2,2
   415cc:	d9800404 	addi	r6,sp,16
   415d0:	dc000015 	stw	r16,0(sp)
   415d4:	d8c00615 	stw	r3,24(sp)
   415d8:	dec00415 	stw	sp,16(sp)
   415dc:	d8800515 	stw	r2,20(sp)
   415e0:	00416a80 	call	416a8 <__sfvwrite_r>
   415e4:	1000061e 	bne	r2,zero,41600 <_puts_r+0x7c>
   415e8:	00800284 	movi	r2,10
   415ec:	dfc00917 	ldw	ra,36(sp)
   415f0:	dc400817 	ldw	r17,32(sp)
   415f4:	dc000717 	ldw	r16,28(sp)
   415f8:	dec00a04 	addi	sp,sp,40
   415fc:	f800283a 	ret
   41600:	00bfffc4 	movi	r2,-1
   41604:	003ff906 	br	415ec <_puts_r+0x68>

00041608 <puts>:
   41608:	00800174 	movhi	r2,5
   4160c:	10a40204 	addi	r2,r2,-28664
   41610:	200b883a 	mov	r5,r4
   41614:	11000017 	ldw	r4,0(r2)
   41618:	00415841 	jmpi	41584 <_puts_r>

0004161c <strlen>:
   4161c:	208000cc 	andi	r2,r4,3
   41620:	10001f1e 	bne	r2,zero,416a0 <strlen+0x84>
   41624:	20800017 	ldw	r2,0(r4)
   41628:	01ffbff4 	movhi	r7,65279
   4162c:	39ffbfc4 	addi	r7,r7,-257
   41630:	01a02074 	movhi	r6,32897
   41634:	31a02004 	addi	r6,r6,-32640
   41638:	11c7883a 	add	r3,r2,r7
   4163c:	0084303a 	nor	r2,zero,r2
   41640:	1886703a 	and	r3,r3,r2
   41644:	1986703a 	and	r3,r3,r6
   41648:	2005883a 	mov	r2,r4
   4164c:	1800101e 	bne	r3,zero,41690 <strlen+0x74>
   41650:	10800104 	addi	r2,r2,4
   41654:	10c00017 	ldw	r3,0(r2)
   41658:	19cb883a 	add	r5,r3,r7
   4165c:	00c6303a 	nor	r3,zero,r3
   41660:	28c6703a 	and	r3,r5,r3
   41664:	1986703a 	and	r3,r3,r6
   41668:	1800091e 	bne	r3,zero,41690 <strlen+0x74>
   4166c:	10800104 	addi	r2,r2,4
   41670:	10c00017 	ldw	r3,0(r2)
   41674:	19cb883a 	add	r5,r3,r7
   41678:	00c6303a 	nor	r3,zero,r3
   4167c:	28c6703a 	and	r3,r5,r3
   41680:	1986703a 	and	r3,r3,r6
   41684:	183ff226 	beq	r3,zero,41650 <strlen+0x34>
   41688:	00000106 	br	41690 <strlen+0x74>
   4168c:	10800044 	addi	r2,r2,1
   41690:	10c00007 	ldb	r3,0(r2)
   41694:	183ffd1e 	bne	r3,zero,4168c <strlen+0x70>
   41698:	1105c83a 	sub	r2,r2,r4
   4169c:	f800283a 	ret
   416a0:	2005883a 	mov	r2,r4
   416a4:	003ffa06 	br	41690 <strlen+0x74>

000416a8 <__sfvwrite_r>:
   416a8:	30800217 	ldw	r2,8(r6)
   416ac:	defff504 	addi	sp,sp,-44
   416b0:	dd400615 	stw	r21,24(sp)
   416b4:	dd000515 	stw	r20,20(sp)
   416b8:	dc000115 	stw	r16,4(sp)
   416bc:	dfc00a15 	stw	ra,40(sp)
   416c0:	df000915 	stw	fp,36(sp)
   416c4:	ddc00815 	stw	r23,32(sp)
   416c8:	dd800715 	stw	r22,28(sp)
   416cc:	dcc00415 	stw	r19,16(sp)
   416d0:	dc800315 	stw	r18,12(sp)
   416d4:	dc400215 	stw	r17,8(sp)
   416d8:	3029883a 	mov	r20,r6
   416dc:	202b883a 	mov	r21,r4
   416e0:	2821883a 	mov	r16,r5
   416e4:	10002126 	beq	r2,zero,4176c <__sfvwrite_r+0xc4>
   416e8:	2880030b 	ldhu	r2,12(r5)
   416ec:	10c0020c 	andi	r3,r2,8
   416f0:	18ffffcc 	andi	r3,r3,65535
   416f4:	18e0001c 	xori	r3,r3,32768
   416f8:	18e00004 	addi	r3,r3,-32768
   416fc:	18002826 	beq	r3,zero,417a0 <__sfvwrite_r+0xf8>
   41700:	28c00417 	ldw	r3,16(r5)
   41704:	18002626 	beq	r3,zero,417a0 <__sfvwrite_r+0xf8>
   41708:	10c0008c 	andi	r3,r2,2
   4170c:	18ffffcc 	andi	r3,r3,65535
   41710:	18e0001c 	xori	r3,r3,32768
   41714:	18e00004 	addi	r3,r3,-32768
   41718:	a4400017 	ldw	r17,0(r20)
   4171c:	18002b26 	beq	r3,zero,417cc <__sfvwrite_r+0x124>
   41720:	0027883a 	mov	r19,zero
   41724:	0025883a 	mov	r18,zero
   41728:	05810004 	movi	r22,1024
   4172c:	980d883a 	mov	r6,r19
   41730:	a809883a 	mov	r4,r21
   41734:	90004f26 	beq	r18,zero,41874 <__sfvwrite_r+0x1cc>
   41738:	900f883a 	mov	r7,r18
   4173c:	81400717 	ldw	r5,28(r16)
   41740:	b480012e 	bgeu	r22,r18,41748 <__sfvwrite_r+0xa0>
   41744:	01c10004 	movi	r7,1024
   41748:	80800917 	ldw	r2,36(r16)
   4174c:	103ee83a 	callr	r2
   41750:	0080540e 	bge	zero,r2,418a4 <__sfvwrite_r+0x1fc>
   41754:	a0c00217 	ldw	r3,8(r20)
   41758:	98a7883a 	add	r19,r19,r2
   4175c:	90a5c83a 	sub	r18,r18,r2
   41760:	1885c83a 	sub	r2,r3,r2
   41764:	a0800215 	stw	r2,8(r20)
   41768:	103ff01e 	bne	r2,zero,4172c <__sfvwrite_r+0x84>
   4176c:	0005883a 	mov	r2,zero
   41770:	dfc00a17 	ldw	ra,40(sp)
   41774:	df000917 	ldw	fp,36(sp)
   41778:	ddc00817 	ldw	r23,32(sp)
   4177c:	dd800717 	ldw	r22,28(sp)
   41780:	dd400617 	ldw	r21,24(sp)
   41784:	dd000517 	ldw	r20,20(sp)
   41788:	dcc00417 	ldw	r19,16(sp)
   4178c:	dc800317 	ldw	r18,12(sp)
   41790:	dc400217 	ldw	r17,8(sp)
   41794:	dc000117 	ldw	r16,4(sp)
   41798:	dec00b04 	addi	sp,sp,44
   4179c:	f800283a 	ret
   417a0:	a809883a 	mov	r4,r21
   417a4:	800b883a 	mov	r5,r16
   417a8:	0042d340 	call	42d34 <__swsetup_r>
   417ac:	1000f01e 	bne	r2,zero,41b70 <__sfvwrite_r+0x4c8>
   417b0:	8080030b 	ldhu	r2,12(r16)
   417b4:	a4400017 	ldw	r17,0(r20)
   417b8:	10c0008c 	andi	r3,r2,2
   417bc:	18ffffcc 	andi	r3,r3,65535
   417c0:	18e0001c 	xori	r3,r3,32768
   417c4:	18e00004 	addi	r3,r3,-32768
   417c8:	183fd51e 	bne	r3,zero,41720 <__sfvwrite_r+0x78>
   417cc:	10c0004c 	andi	r3,r2,1
   417d0:	002d883a 	mov	r22,zero
   417d4:	1800381e 	bne	r3,zero,418b8 <__sfvwrite_r+0x210>
   417d8:	0025883a 	mov	r18,zero
   417dc:	90002126 	beq	r18,zero,41864 <__sfvwrite_r+0x1bc>
   417e0:	10c0800c 	andi	r3,r2,512
   417e4:	18ffffcc 	andi	r3,r3,65535
   417e8:	18e0001c 	xori	r3,r3,32768
   417ec:	18e00004 	addi	r3,r3,-32768
   417f0:	84c00217 	ldw	r19,8(r16)
   417f4:	18006b26 	beq	r3,zero,419a4 <__sfvwrite_r+0x2fc>
   417f8:	980f883a 	mov	r7,r19
   417fc:	94c08636 	bltu	r18,r19,41a18 <__sfvwrite_r+0x370>
   41800:	10c1200c 	andi	r3,r2,1152
   41804:	18009f1e 	bne	r3,zero,41a84 <__sfvwrite_r+0x3dc>
   41808:	81000017 	ldw	r4,0(r16)
   4180c:	982f883a 	mov	r23,r19
   41810:	9039883a 	mov	fp,r18
   41814:	9027883a 	mov	r19,r18
   41818:	380d883a 	mov	r6,r7
   4181c:	b00b883a 	mov	r5,r22
   41820:	d9c00015 	stw	r7,0(sp)
   41824:	00425480 	call	42548 <memmove>
   41828:	d9c00017 	ldw	r7,0(sp)
   4182c:	81000217 	ldw	r4,8(r16)
   41830:	80800017 	ldw	r2,0(r16)
   41834:	25efc83a 	sub	r23,r4,r23
   41838:	11cf883a 	add	r7,r2,r7
   4183c:	85c00215 	stw	r23,8(r16)
   41840:	81c00015 	stw	r7,0(r16)
   41844:	a0800217 	ldw	r2,8(r20)
   41848:	b72d883a 	add	r22,r22,fp
   4184c:	9725c83a 	sub	r18,r18,fp
   41850:	14e7c83a 	sub	r19,r2,r19
   41854:	a4c00215 	stw	r19,8(r20)
   41858:	983fc426 	beq	r19,zero,4176c <__sfvwrite_r+0xc4>
   4185c:	8080030b 	ldhu	r2,12(r16)
   41860:	903fdf1e 	bne	r18,zero,417e0 <__sfvwrite_r+0x138>
   41864:	8d800017 	ldw	r22,0(r17)
   41868:	8c800117 	ldw	r18,4(r17)
   4186c:	8c400204 	addi	r17,r17,8
   41870:	003fda06 	br	417dc <__sfvwrite_r+0x134>
   41874:	8cc00017 	ldw	r19,0(r17)
   41878:	8c800117 	ldw	r18,4(r17)
   4187c:	8c400204 	addi	r17,r17,8
   41880:	003faa06 	br	4172c <__sfvwrite_r+0x84>
   41884:	00426d40 	call	426d4 <_realloc_r>
   41888:	102f883a 	mov	r23,r2
   4188c:	10009f1e 	bne	r2,zero,41b0c <__sfvwrite_r+0x464>
   41890:	81400417 	ldw	r5,16(r16)
   41894:	a809883a 	mov	r4,r21
   41898:	00434e80 	call	434e8 <_free_r>
   4189c:	00800304 	movi	r2,12
   418a0:	a8800015 	stw	r2,0(r21)
   418a4:	80c0030b 	ldhu	r3,12(r16)
   418a8:	00bfffc4 	movi	r2,-1
   418ac:	18c01014 	ori	r3,r3,64
   418b0:	80c0030d 	sth	r3,12(r16)
   418b4:	003fae06 	br	41770 <__sfvwrite_r+0xc8>
   418b8:	0007883a 	mov	r3,zero
   418bc:	0039883a 	mov	fp,zero
   418c0:	0025883a 	mov	r18,zero
   418c4:	90001e26 	beq	r18,zero,41940 <__sfvwrite_r+0x298>
   418c8:	18006526 	beq	r3,zero,41a60 <__sfvwrite_r+0x3b8>
   418cc:	b02f883a 	mov	r23,r22
   418d0:	9580012e 	bgeu	r18,r22,418d8 <__sfvwrite_r+0x230>
   418d4:	902f883a 	mov	r23,r18
   418d8:	81000017 	ldw	r4,0(r16)
   418dc:	80800417 	ldw	r2,16(r16)
   418e0:	84c00217 	ldw	r19,8(r16)
   418e4:	81c00517 	ldw	r7,20(r16)
   418e8:	1100022e 	bgeu	r2,r4,418f4 <__sfvwrite_r+0x24c>
   418ec:	99e7883a 	add	r19,r19,r7
   418f0:	9dc01816 	blt	r19,r23,41954 <__sfvwrite_r+0x2ac>
   418f4:	b9c03b16 	blt	r23,r7,419e4 <__sfvwrite_r+0x33c>
   418f8:	80800917 	ldw	r2,36(r16)
   418fc:	81400717 	ldw	r5,28(r16)
   41900:	a809883a 	mov	r4,r21
   41904:	d8c00015 	stw	r3,0(sp)
   41908:	e00d883a 	mov	r6,fp
   4190c:	103ee83a 	callr	r2
   41910:	1027883a 	mov	r19,r2
   41914:	d8c00017 	ldw	r3,0(sp)
   41918:	00bfe20e 	bge	zero,r2,418a4 <__sfvwrite_r+0x1fc>
   4191c:	b4edc83a 	sub	r22,r22,r19
   41920:	b0001a26 	beq	r22,zero,4198c <__sfvwrite_r+0x2e4>
   41924:	a0800217 	ldw	r2,8(r20)
   41928:	e4f9883a 	add	fp,fp,r19
   4192c:	94e5c83a 	sub	r18,r18,r19
   41930:	14e7c83a 	sub	r19,r2,r19
   41934:	a4c00215 	stw	r19,8(r20)
   41938:	983f8c26 	beq	r19,zero,4176c <__sfvwrite_r+0xc4>
   4193c:	903fe21e 	bne	r18,zero,418c8 <__sfvwrite_r+0x220>
   41940:	8f000017 	ldw	fp,0(r17)
   41944:	8c800117 	ldw	r18,4(r17)
   41948:	0007883a 	mov	r3,zero
   4194c:	8c400204 	addi	r17,r17,8
   41950:	003fdc06 	br	418c4 <__sfvwrite_r+0x21c>
   41954:	e00b883a 	mov	r5,fp
   41958:	980d883a 	mov	r6,r19
   4195c:	d8c00015 	stw	r3,0(sp)
   41960:	00425480 	call	42548 <memmove>
   41964:	80800017 	ldw	r2,0(r16)
   41968:	a809883a 	mov	r4,r21
   4196c:	800b883a 	mov	r5,r16
   41970:	14c5883a 	add	r2,r2,r19
   41974:	80800015 	stw	r2,0(r16)
   41978:	0042ea80 	call	42ea8 <_fflush_r>
   4197c:	d8c00017 	ldw	r3,0(sp)
   41980:	103fc81e 	bne	r2,zero,418a4 <__sfvwrite_r+0x1fc>
   41984:	b4edc83a 	sub	r22,r22,r19
   41988:	b03fe61e 	bne	r22,zero,41924 <__sfvwrite_r+0x27c>
   4198c:	a809883a 	mov	r4,r21
   41990:	800b883a 	mov	r5,r16
   41994:	0042ea80 	call	42ea8 <_fflush_r>
   41998:	103fc21e 	bne	r2,zero,418a4 <__sfvwrite_r+0x1fc>
   4199c:	0007883a 	mov	r3,zero
   419a0:	003fe006 	br	41924 <__sfvwrite_r+0x27c>
   419a4:	81000017 	ldw	r4,0(r16)
   419a8:	80800417 	ldw	r2,16(r16)
   419ac:	1100022e 	bgeu	r2,r4,419b8 <__sfvwrite_r+0x310>
   419b0:	9839883a 	mov	fp,r19
   419b4:	9c806036 	bltu	r19,r18,41b38 <__sfvwrite_r+0x490>
   419b8:	81c00517 	ldw	r7,20(r16)
   419bc:	91c01c36 	bltu	r18,r7,41a30 <__sfvwrite_r+0x388>
   419c0:	80800917 	ldw	r2,36(r16)
   419c4:	81400717 	ldw	r5,28(r16)
   419c8:	a809883a 	mov	r4,r21
   419cc:	b00d883a 	mov	r6,r22
   419d0:	103ee83a 	callr	r2
   419d4:	1027883a 	mov	r19,r2
   419d8:	00bfb20e 	bge	zero,r2,418a4 <__sfvwrite_r+0x1fc>
   419dc:	1039883a 	mov	fp,r2
   419e0:	003f9806 	br	41844 <__sfvwrite_r+0x19c>
   419e4:	b80d883a 	mov	r6,r23
   419e8:	e00b883a 	mov	r5,fp
   419ec:	d8c00015 	stw	r3,0(sp)
   419f0:	00425480 	call	42548 <memmove>
   419f4:	80800217 	ldw	r2,8(r16)
   419f8:	81000017 	ldw	r4,0(r16)
   419fc:	b827883a 	mov	r19,r23
   41a00:	15c5c83a 	sub	r2,r2,r23
   41a04:	25ef883a 	add	r23,r4,r23
   41a08:	80800215 	stw	r2,8(r16)
   41a0c:	85c00015 	stw	r23,0(r16)
   41a10:	d8c00017 	ldw	r3,0(sp)
   41a14:	003fc106 	br	4191c <__sfvwrite_r+0x274>
   41a18:	81000017 	ldw	r4,0(r16)
   41a1c:	902f883a 	mov	r23,r18
   41a20:	9039883a 	mov	fp,r18
   41a24:	9027883a 	mov	r19,r18
   41a28:	900f883a 	mov	r7,r18
   41a2c:	003f7a06 	br	41818 <__sfvwrite_r+0x170>
   41a30:	b00b883a 	mov	r5,r22
   41a34:	900d883a 	mov	r6,r18
   41a38:	00425480 	call	42548 <memmove>
   41a3c:	80c00217 	ldw	r3,8(r16)
   41a40:	80800017 	ldw	r2,0(r16)
   41a44:	9027883a 	mov	r19,r18
   41a48:	1c87c83a 	sub	r3,r3,r18
   41a4c:	1485883a 	add	r2,r2,r18
   41a50:	80c00215 	stw	r3,8(r16)
   41a54:	80800015 	stw	r2,0(r16)
   41a58:	9039883a 	mov	fp,r18
   41a5c:	003f7906 	br	41844 <__sfvwrite_r+0x19c>
   41a60:	e009883a 	mov	r4,fp
   41a64:	01400284 	movi	r5,10
   41a68:	900d883a 	mov	r6,r18
   41a6c:	00423100 	call	42310 <memchr>
   41a70:	10003c26 	beq	r2,zero,41b64 <__sfvwrite_r+0x4bc>
   41a74:	15800044 	addi	r22,r2,1
   41a78:	b72dc83a 	sub	r22,r22,fp
   41a7c:	00c00044 	movi	r3,1
   41a80:	003f9206 	br	418cc <__sfvwrite_r+0x224>
   41a84:	81000517 	ldw	r4,20(r16)
   41a88:	81400417 	ldw	r5,16(r16)
   41a8c:	80c00017 	ldw	r3,0(r16)
   41a90:	210d883a 	add	r6,r4,r4
   41a94:	3109883a 	add	r4,r6,r4
   41a98:	2026d7fa 	srli	r19,r4,31
   41a9c:	1979c83a 	sub	fp,r3,r5
   41aa0:	e1800044 	addi	r6,fp,1
   41aa4:	9909883a 	add	r4,r19,r4
   41aa8:	2027d07a 	srai	r19,r4,1
   41aac:	3489883a 	add	r4,r6,r18
   41ab0:	980d883a 	mov	r6,r19
   41ab4:	9900022e 	bgeu	r19,r4,41ac0 <__sfvwrite_r+0x418>
   41ab8:	2027883a 	mov	r19,r4
   41abc:	200d883a 	mov	r6,r4
   41ac0:	1081000c 	andi	r2,r2,1024
   41ac4:	10bfffcc 	andi	r2,r2,65535
   41ac8:	10a0001c 	xori	r2,r2,32768
   41acc:	10a00004 	addi	r2,r2,-32768
   41ad0:	a809883a 	mov	r4,r21
   41ad4:	103f6b26 	beq	r2,zero,41884 <__sfvwrite_r+0x1dc>
   41ad8:	300b883a 	mov	r5,r6
   41adc:	0041b8c0 	call	41b8c <_malloc_r>
   41ae0:	102f883a 	mov	r23,r2
   41ae4:	103f6d26 	beq	r2,zero,4189c <__sfvwrite_r+0x1f4>
   41ae8:	81400417 	ldw	r5,16(r16)
   41aec:	1009883a 	mov	r4,r2
   41af0:	e00d883a 	mov	r6,fp
   41af4:	00424080 	call	42408 <memcpy>
   41af8:	8080030b 	ldhu	r2,12(r16)
   41afc:	00fedfc4 	movi	r3,-1153
   41b00:	10c4703a 	and	r2,r2,r3
   41b04:	10802014 	ori	r2,r2,128
   41b08:	8080030d 	sth	r2,12(r16)
   41b0c:	bf09883a 	add	r4,r23,fp
   41b10:	9f07c83a 	sub	r3,r19,fp
   41b14:	85c00415 	stw	r23,16(r16)
   41b18:	84c00515 	stw	r19,20(r16)
   41b1c:	81000015 	stw	r4,0(r16)
   41b20:	902f883a 	mov	r23,r18
   41b24:	80c00215 	stw	r3,8(r16)
   41b28:	9039883a 	mov	fp,r18
   41b2c:	9027883a 	mov	r19,r18
   41b30:	900f883a 	mov	r7,r18
   41b34:	003f3806 	br	41818 <__sfvwrite_r+0x170>
   41b38:	b00b883a 	mov	r5,r22
   41b3c:	980d883a 	mov	r6,r19
   41b40:	00425480 	call	42548 <memmove>
   41b44:	80800017 	ldw	r2,0(r16)
   41b48:	a809883a 	mov	r4,r21
   41b4c:	800b883a 	mov	r5,r16
   41b50:	14c5883a 	add	r2,r2,r19
   41b54:	80800015 	stw	r2,0(r16)
   41b58:	0042ea80 	call	42ea8 <_fflush_r>
   41b5c:	103f3926 	beq	r2,zero,41844 <__sfvwrite_r+0x19c>
   41b60:	003f5006 	br	418a4 <__sfvwrite_r+0x1fc>
   41b64:	95800044 	addi	r22,r18,1
   41b68:	00c00044 	movi	r3,1
   41b6c:	003f5706 	br	418cc <__sfvwrite_r+0x224>
   41b70:	80c0030b 	ldhu	r3,12(r16)
   41b74:	00bfffc4 	movi	r2,-1
   41b78:	18c01014 	ori	r3,r3,64
   41b7c:	80c0030d 	sth	r3,12(r16)
   41b80:	00c00244 	movi	r3,9
   41b84:	a8c00015 	stw	r3,0(r21)
   41b88:	003ef906 	br	41770 <__sfvwrite_r+0xc8>

00041b8c <_malloc_r>:
   41b8c:	defff604 	addi	sp,sp,-40
   41b90:	dc800215 	stw	r18,8(sp)
   41b94:	dfc00915 	stw	ra,36(sp)
   41b98:	df000815 	stw	fp,32(sp)
   41b9c:	ddc00715 	stw	r23,28(sp)
   41ba0:	dd800615 	stw	r22,24(sp)
   41ba4:	dd400515 	stw	r21,20(sp)
   41ba8:	dd000415 	stw	r20,16(sp)
   41bac:	dcc00315 	stw	r19,12(sp)
   41bb0:	dc400115 	stw	r17,4(sp)
   41bb4:	dc000015 	stw	r16,0(sp)
   41bb8:	288002c4 	addi	r2,r5,11
   41bbc:	00c00584 	movi	r3,22
   41bc0:	2025883a 	mov	r18,r4
   41bc4:	18802b2e 	bgeu	r3,r2,41c74 <_malloc_r+0xe8>
   41bc8:	047ffe04 	movi	r17,-8
   41bcc:	1462703a 	and	r17,r2,r17
   41bd0:	88002a16 	blt	r17,zero,41c7c <_malloc_r+0xf0>
   41bd4:	89402936 	bltu	r17,r5,41c7c <_malloc_r+0xf0>
   41bd8:	9009883a 	mov	r4,r18
   41bdc:	00446640 	call	44664 <__malloc_lock>
   41be0:	00807dc4 	movi	r2,503
   41be4:	14402936 	bltu	r2,r17,41c8c <_malloc_r+0x100>
   41be8:	8808d0fa 	srli	r4,r17,3
   41bec:	04c00134 	movhi	r19,4
   41bf0:	9cde7d04 	addi	r19,r19,31220
   41bf4:	2105883a 	add	r2,r4,r4
   41bf8:	1085883a 	add	r2,r2,r2
   41bfc:	1085883a 	add	r2,r2,r2
   41c00:	9885883a 	add	r2,r19,r2
   41c04:	14000317 	ldw	r16,12(r2)
   41c08:	80815526 	beq	r16,r2,42160 <_malloc_r+0x5d4>
   41c0c:	81000117 	ldw	r4,4(r16)
   41c10:	00bfff04 	movi	r2,-4
   41c14:	80c00317 	ldw	r3,12(r16)
   41c18:	2084703a 	and	r2,r4,r2
   41c1c:	8085883a 	add	r2,r16,r2
   41c20:	11800117 	ldw	r6,4(r2)
   41c24:	81400217 	ldw	r5,8(r16)
   41c28:	9009883a 	mov	r4,r18
   41c2c:	31800054 	ori	r6,r6,1
   41c30:	11800115 	stw	r6,4(r2)
   41c34:	28c00315 	stw	r3,12(r5)
   41c38:	19400215 	stw	r5,8(r3)
   41c3c:	00446840 	call	44684 <__malloc_unlock>
   41c40:	80800204 	addi	r2,r16,8
   41c44:	dfc00917 	ldw	ra,36(sp)
   41c48:	df000817 	ldw	fp,32(sp)
   41c4c:	ddc00717 	ldw	r23,28(sp)
   41c50:	dd800617 	ldw	r22,24(sp)
   41c54:	dd400517 	ldw	r21,20(sp)
   41c58:	dd000417 	ldw	r20,16(sp)
   41c5c:	dcc00317 	ldw	r19,12(sp)
   41c60:	dc800217 	ldw	r18,8(sp)
   41c64:	dc400117 	ldw	r17,4(sp)
   41c68:	dc000017 	ldw	r16,0(sp)
   41c6c:	dec00a04 	addi	sp,sp,40
   41c70:	f800283a 	ret
   41c74:	04400404 	movi	r17,16
   41c78:	897fd72e 	bgeu	r17,r5,41bd8 <_malloc_r+0x4c>
   41c7c:	00800304 	movi	r2,12
   41c80:	90800015 	stw	r2,0(r18)
   41c84:	0005883a 	mov	r2,zero
   41c88:	003fee06 	br	41c44 <_malloc_r+0xb8>
   41c8c:	8808d27a 	srli	r4,r17,9
   41c90:	20007126 	beq	r4,zero,41e58 <_malloc_r+0x2cc>
   41c94:	00800104 	movi	r2,4
   41c98:	1100eb36 	bltu	r2,r4,42048 <_malloc_r+0x4bc>
   41c9c:	8808d1ba 	srli	r4,r17,6
   41ca0:	21000e04 	addi	r4,r4,56
   41ca4:	210b883a 	add	r5,r4,r4
   41ca8:	294b883a 	add	r5,r5,r5
   41cac:	294b883a 	add	r5,r5,r5
   41cb0:	04c00134 	movhi	r19,4
   41cb4:	9cde7d04 	addi	r19,r19,31220
   41cb8:	994b883a 	add	r5,r19,r5
   41cbc:	2c000317 	ldw	r16,12(r5)
   41cc0:	2c000e26 	beq	r5,r16,41cfc <_malloc_r+0x170>
   41cc4:	80c00117 	ldw	r3,4(r16)
   41cc8:	01ffff04 	movi	r7,-4
   41ccc:	018003c4 	movi	r6,15
   41cd0:	19c6703a 	and	r3,r3,r7
   41cd4:	1c45c83a 	sub	r2,r3,r17
   41cd8:	30800716 	blt	r6,r2,41cf8 <_malloc_r+0x16c>
   41cdc:	1000610e 	bge	r2,zero,41e64 <_malloc_r+0x2d8>
   41ce0:	84000317 	ldw	r16,12(r16)
   41ce4:	2c000526 	beq	r5,r16,41cfc <_malloc_r+0x170>
   41ce8:	80c00117 	ldw	r3,4(r16)
   41cec:	19c6703a 	and	r3,r3,r7
   41cf0:	1c45c83a 	sub	r2,r3,r17
   41cf4:	30bff90e 	bge	r6,r2,41cdc <_malloc_r+0x150>
   41cf8:	213fffc4 	addi	r4,r4,-1
   41cfc:	21000044 	addi	r4,r4,1
   41d00:	9c000417 	ldw	r16,16(r19)
   41d04:	00c00134 	movhi	r3,4
   41d08:	18de7d04 	addi	r3,r3,31220
   41d0c:	1a400204 	addi	r9,r3,8
   41d10:	8240ff26 	beq	r16,r9,42110 <_malloc_r+0x584>
   41d14:	81400117 	ldw	r5,4(r16)
   41d18:	00bfff04 	movi	r2,-4
   41d1c:	018003c4 	movi	r6,15
   41d20:	2884703a 	and	r2,r5,r2
   41d24:	144bc83a 	sub	r5,r2,r17
   41d28:	3140ea16 	blt	r6,r5,420d4 <_malloc_r+0x548>
   41d2c:	1a400515 	stw	r9,20(r3)
   41d30:	1a400415 	stw	r9,16(r3)
   41d34:	2800570e 	bge	r5,zero,41e94 <_malloc_r+0x308>
   41d38:	01407fc4 	movi	r5,511
   41d3c:	2880ca36 	bltu	r5,r2,42068 <_malloc_r+0x4dc>
   41d40:	1004d0fa 	srli	r2,r2,3
   41d44:	02000044 	movi	r8,1
   41d48:	19c00117 	ldw	r7,4(r3)
   41d4c:	108b883a 	add	r5,r2,r2
   41d50:	294b883a 	add	r5,r5,r5
   41d54:	1005d0ba 	srai	r2,r2,2
   41d58:	294b883a 	add	r5,r5,r5
   41d5c:	28cb883a 	add	r5,r5,r3
   41d60:	29800217 	ldw	r6,8(r5)
   41d64:	4084983a 	sll	r2,r8,r2
   41d68:	81400315 	stw	r5,12(r16)
   41d6c:	81800215 	stw	r6,8(r16)
   41d70:	11c4b03a 	or	r2,r2,r7
   41d74:	18800115 	stw	r2,4(r3)
   41d78:	2c000215 	stw	r16,8(r5)
   41d7c:	34000315 	stw	r16,12(r6)
   41d80:	200bd0ba 	srai	r5,r4,2
   41d84:	00c00044 	movi	r3,1
   41d88:	194a983a 	sll	r5,r3,r5
   41d8c:	11404936 	bltu	r2,r5,41eb4 <_malloc_r+0x328>
   41d90:	1146703a 	and	r3,r2,r5
   41d94:	18000a1e 	bne	r3,zero,41dc0 <_malloc_r+0x234>
   41d98:	00ffff04 	movi	r3,-4
   41d9c:	294b883a 	add	r5,r5,r5
   41da0:	20c8703a 	and	r4,r4,r3
   41da4:	1146703a 	and	r3,r2,r5
   41da8:	21000104 	addi	r4,r4,4
   41dac:	1800041e 	bne	r3,zero,41dc0 <_malloc_r+0x234>
   41db0:	294b883a 	add	r5,r5,r5
   41db4:	1146703a 	and	r3,r2,r5
   41db8:	21000104 	addi	r4,r4,4
   41dbc:	183ffc26 	beq	r3,zero,41db0 <_malloc_r+0x224>
   41dc0:	023fff04 	movi	r8,-4
   41dc4:	01c003c4 	movi	r7,15
   41dc8:	2105883a 	add	r2,r4,r4
   41dcc:	1085883a 	add	r2,r2,r2
   41dd0:	1085883a 	add	r2,r2,r2
   41dd4:	9899883a 	add	r12,r19,r2
   41dd8:	62800304 	addi	r10,r12,12
   41ddc:	2017883a 	mov	r11,r4
   41de0:	54000017 	ldw	r16,0(r10)
   41de4:	51bffd04 	addi	r6,r10,-12
   41de8:	8180041e 	bne	r16,r6,41dfc <_malloc_r+0x270>
   41dec:	0000ca06 	br	42118 <_malloc_r+0x58c>
   41df0:	10001c0e 	bge	r2,zero,41e64 <_malloc_r+0x2d8>
   41df4:	84000317 	ldw	r16,12(r16)
   41df8:	8180c726 	beq	r16,r6,42118 <_malloc_r+0x58c>
   41dfc:	80c00117 	ldw	r3,4(r16)
   41e00:	1a06703a 	and	r3,r3,r8
   41e04:	1c45c83a 	sub	r2,r3,r17
   41e08:	38bff90e 	bge	r7,r2,41df0 <_malloc_r+0x264>
   41e0c:	81000317 	ldw	r4,12(r16)
   41e10:	81400217 	ldw	r5,8(r16)
   41e14:	8447883a 	add	r3,r16,r17
   41e18:	8c400054 	ori	r17,r17,1
   41e1c:	29000315 	stw	r4,12(r5)
   41e20:	21400215 	stw	r5,8(r4)
   41e24:	84400115 	stw	r17,4(r16)
   41e28:	1889883a 	add	r4,r3,r2
   41e2c:	11400054 	ori	r5,r2,1
   41e30:	98c00515 	stw	r3,20(r19)
   41e34:	98c00415 	stw	r3,16(r19)
   41e38:	20800015 	stw	r2,0(r4)
   41e3c:	1a400315 	stw	r9,12(r3)
   41e40:	1a400215 	stw	r9,8(r3)
   41e44:	19400115 	stw	r5,4(r3)
   41e48:	9009883a 	mov	r4,r18
   41e4c:	00446840 	call	44684 <__malloc_unlock>
   41e50:	80800204 	addi	r2,r16,8
   41e54:	003f7b06 	br	41c44 <_malloc_r+0xb8>
   41e58:	8808d0fa 	srli	r4,r17,3
   41e5c:	210b883a 	add	r5,r4,r4
   41e60:	003f9106 	br	41ca8 <_malloc_r+0x11c>
   41e64:	80c7883a 	add	r3,r16,r3
   41e68:	19400117 	ldw	r5,4(r3)
   41e6c:	80800317 	ldw	r2,12(r16)
   41e70:	81000217 	ldw	r4,8(r16)
   41e74:	29400054 	ori	r5,r5,1
   41e78:	19400115 	stw	r5,4(r3)
   41e7c:	20800315 	stw	r2,12(r4)
   41e80:	11000215 	stw	r4,8(r2)
   41e84:	9009883a 	mov	r4,r18
   41e88:	00446840 	call	44684 <__malloc_unlock>
   41e8c:	80800204 	addi	r2,r16,8
   41e90:	003f6c06 	br	41c44 <_malloc_r+0xb8>
   41e94:	8085883a 	add	r2,r16,r2
   41e98:	10c00117 	ldw	r3,4(r2)
   41e9c:	9009883a 	mov	r4,r18
   41ea0:	18c00054 	ori	r3,r3,1
   41ea4:	10c00115 	stw	r3,4(r2)
   41ea8:	00446840 	call	44684 <__malloc_unlock>
   41eac:	80800204 	addi	r2,r16,8
   41eb0:	003f6406 	br	41c44 <_malloc_r+0xb8>
   41eb4:	9c000217 	ldw	r16,8(r19)
   41eb8:	00bfff04 	movi	r2,-4
   41ebc:	85400117 	ldw	r21,4(r16)
   41ec0:	a8aa703a 	and	r21,r21,r2
   41ec4:	ac400336 	bltu	r21,r17,41ed4 <_malloc_r+0x348>
   41ec8:	ac45c83a 	sub	r2,r21,r17
   41ecc:	00c003c4 	movi	r3,15
   41ed0:	18805316 	blt	r3,r2,42020 <_malloc_r+0x494>
   41ed4:	d5e8ab17 	ldw	r23,-23892(gp)
   41ed8:	d0e00217 	ldw	r3,-32760(gp)
   41edc:	00bfffc4 	movi	r2,-1
   41ee0:	8579883a 	add	fp,r16,r21
   41ee4:	8def883a 	add	r23,r17,r23
   41ee8:	1880d226 	beq	r3,r2,42234 <_malloc_r+0x6a8>
   41eec:	bdc403c4 	addi	r23,r23,4111
   41ef0:	00bc0004 	movi	r2,-4096
   41ef4:	b8ae703a 	and	r23,r23,r2
   41ef8:	9009883a 	mov	r4,r18
   41efc:	b80b883a 	mov	r5,r23
   41f00:	0042cd00 	call	42cd0 <_sbrk_r>
   41f04:	1029883a 	mov	r20,r2
   41f08:	00bfffc4 	movi	r2,-1
   41f0c:	a080d126 	beq	r20,r2,42254 <_malloc_r+0x6c8>
   41f10:	a7009f36 	bltu	r20,fp,42190 <_malloc_r+0x604>
   41f14:	05800174 	movhi	r22,5
   41f18:	b5acb404 	addi	r22,r22,-19760
   41f1c:	b0800017 	ldw	r2,0(r22)
   41f20:	b885883a 	add	r2,r23,r2
   41f24:	b0800015 	stw	r2,0(r22)
   41f28:	e500cf26 	beq	fp,r20,42268 <_malloc_r+0x6dc>
   41f2c:	d1200217 	ldw	r4,-32760(gp)
   41f30:	00ffffc4 	movi	r3,-1
   41f34:	20c0e026 	beq	r4,r3,422b8 <_malloc_r+0x72c>
   41f38:	a739c83a 	sub	fp,r20,fp
   41f3c:	1705883a 	add	r2,r2,fp
   41f40:	b0800015 	stw	r2,0(r22)
   41f44:	a08001cc 	andi	r2,r20,7
   41f48:	1000a526 	beq	r2,zero,421e0 <_malloc_r+0x654>
   41f4c:	a0a9c83a 	sub	r20,r20,r2
   41f50:	00c40204 	movi	r3,4104
   41f54:	a5000204 	addi	r20,r20,8
   41f58:	1885c83a 	sub	r2,r3,r2
   41f5c:	a5c7883a 	add	r3,r20,r23
   41f60:	18c3ffcc 	andi	r3,r3,4095
   41f64:	10efc83a 	sub	r23,r2,r3
   41f68:	9009883a 	mov	r4,r18
   41f6c:	b80b883a 	mov	r5,r23
   41f70:	0042cd00 	call	42cd0 <_sbrk_r>
   41f74:	00ffffc4 	movi	r3,-1
   41f78:	10c0cc26 	beq	r2,r3,422ac <_malloc_r+0x720>
   41f7c:	1505c83a 	sub	r2,r2,r20
   41f80:	b887883a 	add	r3,r23,r2
   41f84:	18c00054 	ori	r3,r3,1
   41f88:	b0800017 	ldw	r2,0(r22)
   41f8c:	9d000215 	stw	r20,8(r19)
   41f90:	a0c00115 	stw	r3,4(r20)
   41f94:	b885883a 	add	r2,r23,r2
   41f98:	b0800015 	stw	r2,0(r22)
   41f9c:	84c00e26 	beq	r16,r19,41fd8 <_malloc_r+0x44c>
   41fa0:	00c003c4 	movi	r3,15
   41fa4:	1d40902e 	bgeu	r3,r21,421e8 <_malloc_r+0x65c>
   41fa8:	ad7ffd04 	addi	r21,r21,-12
   41fac:	013ffe04 	movi	r4,-8
   41fb0:	a908703a 	and	r4,r21,r4
   41fb4:	810b883a 	add	r5,r16,r4
   41fb8:	01800144 	movi	r6,5
   41fbc:	29800115 	stw	r6,4(r5)
   41fc0:	29800215 	stw	r6,8(r5)
   41fc4:	81400117 	ldw	r5,4(r16)
   41fc8:	2940004c 	andi	r5,r5,1
   41fcc:	214ab03a 	or	r5,r4,r5
   41fd0:	81400115 	stw	r5,4(r16)
   41fd4:	1900ae36 	bltu	r3,r4,42290 <_malloc_r+0x704>
   41fd8:	d0e8aa17 	ldw	r3,-23896(gp)
   41fdc:	1880012e 	bgeu	r3,r2,41fe4 <_malloc_r+0x458>
   41fe0:	d0a8aa15 	stw	r2,-23896(gp)
   41fe4:	d0e8a917 	ldw	r3,-23900(gp)
   41fe8:	9c000217 	ldw	r16,8(r19)
   41fec:	1880012e 	bgeu	r3,r2,41ff4 <_malloc_r+0x468>
   41ff0:	d0a8a915 	stw	r2,-23900(gp)
   41ff4:	80c00117 	ldw	r3,4(r16)
   41ff8:	00bfff04 	movi	r2,-4
   41ffc:	1886703a 	and	r3,r3,r2
   42000:	1c45c83a 	sub	r2,r3,r17
   42004:	1c400236 	bltu	r3,r17,42010 <_malloc_r+0x484>
   42008:	00c003c4 	movi	r3,15
   4200c:	18800416 	blt	r3,r2,42020 <_malloc_r+0x494>
   42010:	9009883a 	mov	r4,r18
   42014:	00446840 	call	44684 <__malloc_unlock>
   42018:	0005883a 	mov	r2,zero
   4201c:	003f0906 	br	41c44 <_malloc_r+0xb8>
   42020:	88c00054 	ori	r3,r17,1
   42024:	10800054 	ori	r2,r2,1
   42028:	80c00115 	stw	r3,4(r16)
   4202c:	8463883a 	add	r17,r16,r17
   42030:	88800115 	stw	r2,4(r17)
   42034:	9009883a 	mov	r4,r18
   42038:	9c400215 	stw	r17,8(r19)
   4203c:	00446840 	call	44684 <__malloc_unlock>
   42040:	80800204 	addi	r2,r16,8
   42044:	003eff06 	br	41c44 <_malloc_r+0xb8>
   42048:	00800504 	movi	r2,20
   4204c:	1100492e 	bgeu	r2,r4,42174 <_malloc_r+0x5e8>
   42050:	00801504 	movi	r2,84
   42054:	11005c36 	bltu	r2,r4,421c8 <_malloc_r+0x63c>
   42058:	8808d33a 	srli	r4,r17,12
   4205c:	21001b84 	addi	r4,r4,110
   42060:	210b883a 	add	r5,r4,r4
   42064:	003f1006 	br	41ca8 <_malloc_r+0x11c>
   42068:	1006d27a 	srli	r3,r2,9
   4206c:	01400104 	movi	r5,4
   42070:	28c0432e 	bgeu	r5,r3,42180 <_malloc_r+0x5f4>
   42074:	01400504 	movi	r5,20
   42078:	28c07036 	bltu	r5,r3,4223c <_malloc_r+0x6b0>
   4207c:	194016c4 	addi	r5,r3,91
   42080:	294d883a 	add	r6,r5,r5
   42084:	318d883a 	add	r6,r6,r6
   42088:	318d883a 	add	r6,r6,r6
   4208c:	998d883a 	add	r6,r19,r6
   42090:	30c00217 	ldw	r3,8(r6)
   42094:	01c00134 	movhi	r7,4
   42098:	39de7d04 	addi	r7,r7,31220
   4209c:	19805726 	beq	r3,r6,421fc <_malloc_r+0x670>
   420a0:	01ffff04 	movi	r7,-4
   420a4:	19400117 	ldw	r5,4(r3)
   420a8:	29ca703a 	and	r5,r5,r7
   420ac:	1140022e 	bgeu	r2,r5,420b8 <_malloc_r+0x52c>
   420b0:	18c00217 	ldw	r3,8(r3)
   420b4:	30fffb1e 	bne	r6,r3,420a4 <_malloc_r+0x518>
   420b8:	19400317 	ldw	r5,12(r3)
   420bc:	98800117 	ldw	r2,4(r19)
   420c0:	81400315 	stw	r5,12(r16)
   420c4:	80c00215 	stw	r3,8(r16)
   420c8:	2c000215 	stw	r16,8(r5)
   420cc:	1c000315 	stw	r16,12(r3)
   420d0:	003f2b06 	br	41d80 <_malloc_r+0x1f4>
   420d4:	8445883a 	add	r2,r16,r17
   420d8:	8c400054 	ori	r17,r17,1
   420dc:	18800515 	stw	r2,20(r3)
   420e0:	18800415 	stw	r2,16(r3)
   420e4:	29000054 	ori	r4,r5,1
   420e8:	1147883a 	add	r3,r2,r5
   420ec:	84400115 	stw	r17,4(r16)
   420f0:	11000115 	stw	r4,4(r2)
   420f4:	12400315 	stw	r9,12(r2)
   420f8:	12400215 	stw	r9,8(r2)
   420fc:	19400015 	stw	r5,0(r3)
   42100:	9009883a 	mov	r4,r18
   42104:	00446840 	call	44684 <__malloc_unlock>
   42108:	80800204 	addi	r2,r16,8
   4210c:	003ecd06 	br	41c44 <_malloc_r+0xb8>
   42110:	18800117 	ldw	r2,4(r3)
   42114:	003f1a06 	br	41d80 <_malloc_r+0x1f4>
   42118:	5ac00044 	addi	r11,r11,1
   4211c:	588000cc 	andi	r2,r11,3
   42120:	52800204 	addi	r10,r10,8
   42124:	103f2e1e 	bne	r2,zero,41de0 <_malloc_r+0x254>
   42128:	20c000cc 	andi	r3,r4,3
   4212c:	60bffe04 	addi	r2,r12,-8
   42130:	18006f26 	beq	r3,zero,422f0 <_malloc_r+0x764>
   42134:	63000017 	ldw	r12,0(r12)
   42138:	213fffc4 	addi	r4,r4,-1
   4213c:	60bffa26 	beq	r12,r2,42128 <_malloc_r+0x59c>
   42140:	98800117 	ldw	r2,4(r19)
   42144:	294b883a 	add	r5,r5,r5
   42148:	117f5a36 	bltu	r2,r5,41eb4 <_malloc_r+0x328>
   4214c:	283f5926 	beq	r5,zero,41eb4 <_malloc_r+0x328>
   42150:	1146703a 	and	r3,r2,r5
   42154:	18001626 	beq	r3,zero,421b0 <_malloc_r+0x624>
   42158:	5809883a 	mov	r4,r11
   4215c:	003f1a06 	br	41dc8 <_malloc_r+0x23c>
   42160:	80800204 	addi	r2,r16,8
   42164:	84000517 	ldw	r16,20(r16)
   42168:	143ea81e 	bne	r2,r16,41c0c <_malloc_r+0x80>
   4216c:	21000084 	addi	r4,r4,2
   42170:	003ee306 	br	41d00 <_malloc_r+0x174>
   42174:	210016c4 	addi	r4,r4,91
   42178:	210b883a 	add	r5,r4,r4
   4217c:	003eca06 	br	41ca8 <_malloc_r+0x11c>
   42180:	100ad1ba 	srli	r5,r2,6
   42184:	29400e04 	addi	r5,r5,56
   42188:	294d883a 	add	r6,r5,r5
   4218c:	003fbd06 	br	42084 <_malloc_r+0x4f8>
   42190:	84ff6026 	beq	r16,r19,41f14 <_malloc_r+0x388>
   42194:	00800134 	movhi	r2,4
   42198:	109e7d04 	addi	r2,r2,31220
   4219c:	14000217 	ldw	r16,8(r2)
   421a0:	00bfff04 	movi	r2,-4
   421a4:	80c00117 	ldw	r3,4(r16)
   421a8:	1886703a 	and	r3,r3,r2
   421ac:	003f9406 	br	42000 <_malloc_r+0x474>
   421b0:	294b883a 	add	r5,r5,r5
   421b4:	1146703a 	and	r3,r2,r5
   421b8:	5ac00104 	addi	r11,r11,4
   421bc:	183ffc26 	beq	r3,zero,421b0 <_malloc_r+0x624>
   421c0:	5809883a 	mov	r4,r11
   421c4:	003f0006 	br	41dc8 <_malloc_r+0x23c>
   421c8:	00805504 	movi	r2,340
   421cc:	11001336 	bltu	r2,r4,4221c <_malloc_r+0x690>
   421d0:	8808d3fa 	srli	r4,r17,15
   421d4:	21001dc4 	addi	r4,r4,119
   421d8:	210b883a 	add	r5,r4,r4
   421dc:	003eb206 	br	41ca8 <_malloc_r+0x11c>
   421e0:	00840004 	movi	r2,4096
   421e4:	003f5d06 	br	41f5c <_malloc_r+0x3d0>
   421e8:	00800044 	movi	r2,1
   421ec:	a0800115 	stw	r2,4(r20)
   421f0:	a021883a 	mov	r16,r20
   421f4:	0007883a 	mov	r3,zero
   421f8:	003f8106 	br	42000 <_malloc_r+0x474>
   421fc:	280bd0ba 	srai	r5,r5,2
   42200:	01800044 	movi	r6,1
   42204:	38800117 	ldw	r2,4(r7)
   42208:	314c983a 	sll	r6,r6,r5
   4220c:	180b883a 	mov	r5,r3
   42210:	3084b03a 	or	r2,r6,r2
   42214:	38800115 	stw	r2,4(r7)
   42218:	003fa906 	br	420c0 <_malloc_r+0x534>
   4221c:	00815504 	movi	r2,1364
   42220:	11001836 	bltu	r2,r4,42284 <_malloc_r+0x6f8>
   42224:	8808d4ba 	srli	r4,r17,18
   42228:	21001f04 	addi	r4,r4,124
   4222c:	210b883a 	add	r5,r4,r4
   42230:	003e9d06 	br	41ca8 <_malloc_r+0x11c>
   42234:	bdc00404 	addi	r23,r23,16
   42238:	003f2f06 	br	41ef8 <_malloc_r+0x36c>
   4223c:	01401504 	movi	r5,84
   42240:	28c01f36 	bltu	r5,r3,422c0 <_malloc_r+0x734>
   42244:	100ad33a 	srli	r5,r2,12
   42248:	29401b84 	addi	r5,r5,110
   4224c:	294d883a 	add	r6,r5,r5
   42250:	003f8c06 	br	42084 <_malloc_r+0x4f8>
   42254:	9c000217 	ldw	r16,8(r19)
   42258:	00bfff04 	movi	r2,-4
   4225c:	80c00117 	ldw	r3,4(r16)
   42260:	1886703a 	and	r3,r3,r2
   42264:	003f6606 	br	42000 <_malloc_r+0x474>
   42268:	e0c3ffcc 	andi	r3,fp,4095
   4226c:	183f2f1e 	bne	r3,zero,41f2c <_malloc_r+0x3a0>
   42270:	98c00217 	ldw	r3,8(r19)
   42274:	bd49883a 	add	r4,r23,r21
   42278:	21000054 	ori	r4,r4,1
   4227c:	19000115 	stw	r4,4(r3)
   42280:	003f5506 	br	41fd8 <_malloc_r+0x44c>
   42284:	01403f04 	movi	r5,252
   42288:	01001f84 	movi	r4,126
   4228c:	003e8606 	br	41ca8 <_malloc_r+0x11c>
   42290:	9009883a 	mov	r4,r18
   42294:	81400204 	addi	r5,r16,8
   42298:	00434e80 	call	434e8 <_free_r>
   4229c:	00800174 	movhi	r2,5
   422a0:	10acb404 	addi	r2,r2,-19760
   422a4:	10800017 	ldw	r2,0(r2)
   422a8:	003f4b06 	br	41fd8 <_malloc_r+0x44c>
   422ac:	00c00044 	movi	r3,1
   422b0:	002f883a 	mov	r23,zero
   422b4:	003f3406 	br	41f88 <_malloc_r+0x3fc>
   422b8:	d5200215 	stw	r20,-32760(gp)
   422bc:	003f2106 	br	41f44 <_malloc_r+0x3b8>
   422c0:	01405504 	movi	r5,340
   422c4:	28c00436 	bltu	r5,r3,422d8 <_malloc_r+0x74c>
   422c8:	100ad3fa 	srli	r5,r2,15
   422cc:	29401dc4 	addi	r5,r5,119
   422d0:	294d883a 	add	r6,r5,r5
   422d4:	003f6b06 	br	42084 <_malloc_r+0x4f8>
   422d8:	01415504 	movi	r5,1364
   422dc:	28c00936 	bltu	r5,r3,42304 <_malloc_r+0x778>
   422e0:	100ad4ba 	srli	r5,r2,18
   422e4:	29401f04 	addi	r5,r5,124
   422e8:	294d883a 	add	r6,r5,r5
   422ec:	003f6506 	br	42084 <_malloc_r+0x4f8>
   422f0:	98800117 	ldw	r2,4(r19)
   422f4:	0146303a 	nor	r3,zero,r5
   422f8:	1884703a 	and	r2,r3,r2
   422fc:	98800115 	stw	r2,4(r19)
   42300:	003f9006 	br	42144 <_malloc_r+0x5b8>
   42304:	01803f04 	movi	r6,252
   42308:	01401f84 	movi	r5,126
   4230c:	003f5d06 	br	42084 <_malloc_r+0x4f8>

00042310 <memchr>:
   42310:	008000c4 	movi	r2,3
   42314:	29403fcc 	andi	r5,r5,255
   42318:	1180282e 	bgeu	r2,r6,423bc <memchr+0xac>
   4231c:	2086703a 	and	r3,r4,r2
   42320:	1800351e 	bne	r3,zero,423f8 <memchr+0xe8>
   42324:	2816923a 	slli	r11,r5,8
   42328:	2093883a 	add	r9,r4,r2
   4232c:	22000084 	addi	r8,r4,2
   42330:	5957883a 	add	r11,r11,r5
   42334:	5816923a 	slli	r11,r11,8
   42338:	20c00044 	addi	r3,r4,1
   4233c:	037fbff4 	movhi	r13,65279
   42340:	6b7fbfc4 	addi	r13,r13,-257
   42344:	5957883a 	add	r11,r11,r5
   42348:	5816923a 	slli	r11,r11,8
   4234c:	03202074 	movhi	r12,32897
   42350:	63202004 	addi	r12,r12,-32640
   42354:	101d883a 	mov	r14,r2
   42358:	5957883a 	add	r11,r11,r5
   4235c:	21c00017 	ldw	r7,0(r4)
   42360:	31bfff04 	addi	r6,r6,-4
   42364:	1805883a 	mov	r2,r3
   42368:	3acef03a 	xor	r7,r7,r11
   4236c:	3b55883a 	add	r10,r7,r13
   42370:	01ce303a 	nor	r7,zero,r7
   42374:	51ce703a 	and	r7,r10,r7
   42378:	3b0e703a 	and	r7,r7,r12
   4237c:	38000a26 	beq	r7,zero,423a8 <memchr+0x98>
   42380:	21c00003 	ldbu	r7,0(r4)
   42384:	39401e26 	beq	r7,r5,42400 <memchr+0xf0>
   42388:	19c00003 	ldbu	r7,0(r3)
   4238c:	39401926 	beq	r7,r5,423f4 <memchr+0xe4>
   42390:	41c00003 	ldbu	r7,0(r8)
   42394:	4005883a 	mov	r2,r8
   42398:	39401626 	beq	r7,r5,423f4 <memchr+0xe4>
   4239c:	49c00003 	ldbu	r7,0(r9)
   423a0:	4805883a 	mov	r2,r9
   423a4:	39401326 	beq	r7,r5,423f4 <memchr+0xe4>
   423a8:	21000104 	addi	r4,r4,4
   423ac:	4a400104 	addi	r9,r9,4
   423b0:	42000104 	addi	r8,r8,4
   423b4:	18c00104 	addi	r3,r3,4
   423b8:	71bfe836 	bltu	r14,r6,4235c <memchr+0x4c>
   423bc:	2005883a 	mov	r2,r4
   423c0:	30000a26 	beq	r6,zero,423ec <memchr+0xdc>
   423c4:	10c00003 	ldbu	r3,0(r2)
   423c8:	19400a26 	beq	r3,r5,423f4 <memchr+0xe4>
   423cc:	10c00044 	addi	r3,r2,1
   423d0:	118d883a 	add	r6,r2,r6
   423d4:	00000306 	br	423e4 <memchr+0xd4>
   423d8:	11000003 	ldbu	r4,0(r2)
   423dc:	18c00044 	addi	r3,r3,1
   423e0:	21400426 	beq	r4,r5,423f4 <memchr+0xe4>
   423e4:	1805883a 	mov	r2,r3
   423e8:	19bffb1e 	bne	r3,r6,423d8 <memchr+0xc8>
   423ec:	0005883a 	mov	r2,zero
   423f0:	f800283a 	ret
   423f4:	f800283a 	ret
   423f8:	2005883a 	mov	r2,r4
   423fc:	003ff106 	br	423c4 <memchr+0xb4>
   42400:	2005883a 	mov	r2,r4
   42404:	f800283a 	ret

00042408 <memcpy>:
   42408:	defffb04 	addi	sp,sp,-20
   4240c:	dc000015 	stw	r16,0(sp)
   42410:	dfc00415 	stw	ra,16(sp)
   42414:	dcc00315 	stw	r19,12(sp)
   42418:	dc800215 	stw	r18,8(sp)
   4241c:	dc400115 	stw	r17,4(sp)
   42420:	00c003c4 	movi	r3,15
   42424:	2021883a 	mov	r16,r4
   42428:	3005883a 	mov	r2,r6
   4242c:	1980032e 	bgeu	r3,r6,4243c <memcpy+0x34>
   42430:	2906b03a 	or	r3,r5,r4
   42434:	18c000cc 	andi	r3,r3,3
   42438:	18001026 	beq	r3,zero,4247c <memcpy+0x74>
   4243c:	8007883a 	mov	r3,r16
   42440:	288f883a 	add	r7,r5,r2
   42444:	10000526 	beq	r2,zero,4245c <memcpy+0x54>
   42448:	29800003 	ldbu	r6,0(r5)
   4244c:	18c00044 	addi	r3,r3,1
   42450:	29400044 	addi	r5,r5,1
   42454:	19bfffc5 	stb	r6,-1(r3)
   42458:	29fffb1e 	bne	r5,r7,42448 <memcpy+0x40>
   4245c:	8005883a 	mov	r2,r16
   42460:	dfc00417 	ldw	ra,16(sp)
   42464:	dcc00317 	ldw	r19,12(sp)
   42468:	dc800217 	ldw	r18,8(sp)
   4246c:	dc400117 	ldw	r17,4(sp)
   42470:	dc000017 	ldw	r16,0(sp)
   42474:	dec00504 	addi	sp,sp,20
   42478:	f800283a 	ret
   4247c:	32bffc04 	addi	r10,r6,-16
   42480:	5014d13a 	srli	r10,r10,4
   42484:	20800404 	addi	r2,r4,16
   42488:	2007883a 	mov	r3,r4
   4248c:	5008913a 	slli	r4,r10,4
   42490:	280f883a 	mov	r7,r5
   42494:	1105883a 	add	r2,r2,r4
   42498:	3a000017 	ldw	r8,0(r7)
   4249c:	18c00404 	addi	r3,r3,16
   424a0:	39c00404 	addi	r7,r7,16
   424a4:	1a3ffc15 	stw	r8,-16(r3)
   424a8:	3a3ffd17 	ldw	r8,-12(r7)
   424ac:	1a3ffd15 	stw	r8,-12(r3)
   424b0:	3a3ffe17 	ldw	r8,-8(r7)
   424b4:	1a3ffe15 	stw	r8,-8(r3)
   424b8:	3a3fff17 	ldw	r8,-4(r7)
   424bc:	1a3fff15 	stw	r8,-4(r3)
   424c0:	18bff51e 	bne	r3,r2,42498 <memcpy+0x90>
   424c4:	52800044 	addi	r10,r10,1
   424c8:	5014913a 	slli	r10,r10,4
   424cc:	308003cc 	andi	r2,r6,15
   424d0:	010000c4 	movi	r4,3
   424d4:	8287883a 	add	r3,r16,r10
   424d8:	2a95883a 	add	r10,r5,r10
   424dc:	2080182e 	bgeu	r4,r2,42540 <memcpy+0x138>
   424e0:	147fff04 	addi	r17,r2,-4
   424e4:	8808d0ba 	srli	r4,r17,2
   424e8:	1a400104 	addi	r9,r3,4
   424ec:	180d883a 	mov	r6,r3
   424f0:	2105883a 	add	r2,r4,r4
   424f4:	1085883a 	add	r2,r2,r2
   424f8:	4893883a 	add	r9,r9,r2
   424fc:	500f883a 	mov	r7,r10
   42500:	3a000017 	ldw	r8,0(r7)
   42504:	31800104 	addi	r6,r6,4
   42508:	39c00104 	addi	r7,r7,4
   4250c:	323fff15 	stw	r8,-4(r6)
   42510:	327ffb1e 	bne	r6,r9,42500 <memcpy+0xf8>
   42514:	20800044 	addi	r2,r4,1
   42518:	1085883a 	add	r2,r2,r2
   4251c:	1085883a 	add	r2,r2,r2
   42520:	017fff04 	movi	r5,-4
   42524:	18a5883a 	add	r18,r3,r2
   42528:	50a7883a 	add	r19,r10,r2
   4252c:	004155c0 	call	4155c <__mulsi3>
   42530:	1445883a 	add	r2,r2,r17
   42534:	980b883a 	mov	r5,r19
   42538:	9007883a 	mov	r3,r18
   4253c:	003fc006 	br	42440 <memcpy+0x38>
   42540:	500b883a 	mov	r5,r10
   42544:	003fbe06 	br	42440 <memcpy+0x38>

00042548 <memmove>:
   42548:	defffb04 	addi	sp,sp,-20
   4254c:	dc000015 	stw	r16,0(sp)
   42550:	dfc00415 	stw	ra,16(sp)
   42554:	dcc00315 	stw	r19,12(sp)
   42558:	dc800215 	stw	r18,8(sp)
   4255c:	dc400115 	stw	r17,4(sp)
   42560:	2021883a 	mov	r16,r4
   42564:	300f883a 	mov	r7,r6
   42568:	2900122e 	bgeu	r5,r4,425b4 <memmove+0x6c>
   4256c:	2987883a 	add	r3,r5,r6
   42570:	20c0102e 	bgeu	r4,r3,425b4 <memmove+0x6c>
   42574:	218b883a 	add	r5,r4,r6
   42578:	1989c83a 	sub	r4,r3,r6
   4257c:	30000526 	beq	r6,zero,42594 <memmove+0x4c>
   42580:	18ffffc4 	addi	r3,r3,-1
   42584:	18800003 	ldbu	r2,0(r3)
   42588:	297fffc4 	addi	r5,r5,-1
   4258c:	28800005 	stb	r2,0(r5)
   42590:	193ffb1e 	bne	r3,r4,42580 <memmove+0x38>
   42594:	8005883a 	mov	r2,r16
   42598:	dfc00417 	ldw	ra,16(sp)
   4259c:	dcc00317 	ldw	r19,12(sp)
   425a0:	dc800217 	ldw	r18,8(sp)
   425a4:	dc400117 	ldw	r17,4(sp)
   425a8:	dc000017 	ldw	r16,0(sp)
   425ac:	dec00504 	addi	sp,sp,20
   425b0:	f800283a 	ret
   425b4:	008003c4 	movi	r2,15
   425b8:	1180422e 	bgeu	r2,r6,426c4 <memmove+0x17c>
   425bc:	2c04b03a 	or	r2,r5,r16
   425c0:	108000cc 	andi	r2,r2,3
   425c4:	10003f1e 	bne	r2,zero,426c4 <memmove+0x17c>
   425c8:	32bffc04 	addi	r10,r6,-16
   425cc:	5014d13a 	srli	r10,r10,4
   425d0:	81000404 	addi	r4,r16,16
   425d4:	8007883a 	mov	r3,r16
   425d8:	5004913a 	slli	r2,r10,4
   425dc:	280f883a 	mov	r7,r5
   425e0:	2089883a 	add	r4,r4,r2
   425e4:	38800017 	ldw	r2,0(r7)
   425e8:	18c00404 	addi	r3,r3,16
   425ec:	39c00404 	addi	r7,r7,16
   425f0:	18bffc15 	stw	r2,-16(r3)
   425f4:	38bffd17 	ldw	r2,-12(r7)
   425f8:	18bffd15 	stw	r2,-12(r3)
   425fc:	38bffe17 	ldw	r2,-8(r7)
   42600:	18bffe15 	stw	r2,-8(r3)
   42604:	38bfff17 	ldw	r2,-4(r7)
   42608:	18bfff15 	stw	r2,-4(r3)
   4260c:	193ff51e 	bne	r3,r4,425e4 <memmove+0x9c>
   42610:	52800044 	addi	r10,r10,1
   42614:	5014913a 	slli	r10,r10,4
   42618:	31c003cc 	andi	r7,r6,15
   4261c:	008000c4 	movi	r2,3
   42620:	8287883a 	add	r3,r16,r10
   42624:	2a95883a 	add	r10,r5,r10
   42628:	11c0282e 	bgeu	r2,r7,426cc <memmove+0x184>
   4262c:	3c7fff04 	addi	r17,r7,-4
   42630:	8808d0ba 	srli	r4,r17,2
   42634:	1a400104 	addi	r9,r3,4
   42638:	180d883a 	mov	r6,r3
   4263c:	2105883a 	add	r2,r4,r4
   42640:	1085883a 	add	r2,r2,r2
   42644:	4893883a 	add	r9,r9,r2
   42648:	5005883a 	mov	r2,r10
   4264c:	12000017 	ldw	r8,0(r2)
   42650:	31800104 	addi	r6,r6,4
   42654:	10800104 	addi	r2,r2,4
   42658:	323fff15 	stw	r8,-4(r6)
   4265c:	327ffb1e 	bne	r6,r9,4264c <memmove+0x104>
   42660:	20800044 	addi	r2,r4,1
   42664:	1085883a 	add	r2,r2,r2
   42668:	1085883a 	add	r2,r2,r2
   4266c:	017fff04 	movi	r5,-4
   42670:	18a5883a 	add	r18,r3,r2
   42674:	50a7883a 	add	r19,r10,r2
   42678:	004155c0 	call	4155c <__mulsi3>
   4267c:	144f883a 	add	r7,r2,r17
   42680:	980b883a 	mov	r5,r19
   42684:	9007883a 	mov	r3,r18
   42688:	383fc226 	beq	r7,zero,42594 <memmove+0x4c>
   4268c:	19cf883a 	add	r7,r3,r7
   42690:	29800003 	ldbu	r6,0(r5)
   42694:	18c00044 	addi	r3,r3,1
   42698:	29400044 	addi	r5,r5,1
   4269c:	19bfffc5 	stb	r6,-1(r3)
   426a0:	19fffb1e 	bne	r3,r7,42690 <memmove+0x148>
   426a4:	8005883a 	mov	r2,r16
   426a8:	dfc00417 	ldw	ra,16(sp)
   426ac:	dcc00317 	ldw	r19,12(sp)
   426b0:	dc800217 	ldw	r18,8(sp)
   426b4:	dc400117 	ldw	r17,4(sp)
   426b8:	dc000017 	ldw	r16,0(sp)
   426bc:	dec00504 	addi	sp,sp,20
   426c0:	f800283a 	ret
   426c4:	8007883a 	mov	r3,r16
   426c8:	003fef06 	br	42688 <memmove+0x140>
   426cc:	500b883a 	mov	r5,r10
   426d0:	003fed06 	br	42688 <memmove+0x140>

000426d4 <_realloc_r>:
   426d4:	defff504 	addi	sp,sp,-44
   426d8:	dd400615 	stw	r21,24(sp)
   426dc:	dc800315 	stw	r18,12(sp)
   426e0:	dc000115 	stw	r16,4(sp)
   426e4:	dfc00a15 	stw	ra,40(sp)
   426e8:	df000915 	stw	fp,36(sp)
   426ec:	ddc00815 	stw	r23,32(sp)
   426f0:	dd800715 	stw	r22,28(sp)
   426f4:	dd000515 	stw	r20,20(sp)
   426f8:	dcc00415 	stw	r19,16(sp)
   426fc:	dc400215 	stw	r17,8(sp)
   42700:	2821883a 	mov	r16,r5
   42704:	202b883a 	mov	r21,r4
   42708:	3025883a 	mov	r18,r6
   4270c:	28009626 	beq	r5,zero,42968 <_realloc_r+0x294>
   42710:	00446640 	call	44664 <__malloc_lock>
   42714:	80bfff17 	ldw	r2,-4(r16)
   42718:	04ffff04 	movi	r19,-4
   4271c:	90c002c4 	addi	r3,r18,11
   42720:	01000584 	movi	r4,22
   42724:	85bffe04 	addi	r22,r16,-8
   42728:	14e6703a 	and	r19,r2,r19
   4272c:	20c0372e 	bgeu	r4,r3,4280c <_realloc_r+0x138>
   42730:	047ffe04 	movi	r17,-8
   42734:	1c62703a 	and	r17,r3,r17
   42738:	8807883a 	mov	r3,r17
   4273c:	88005a16 	blt	r17,zero,428a8 <_realloc_r+0x1d4>
   42740:	8c805936 	bltu	r17,r18,428a8 <_realloc_r+0x1d4>
   42744:	98c0340e 	bge	r19,r3,42818 <_realloc_r+0x144>
   42748:	07000134 	movhi	fp,4
   4274c:	e71e7d04 	addi	fp,fp,31220
   42750:	e1400217 	ldw	r5,8(fp)
   42754:	b4c9883a 	add	r4,r22,r19
   42758:	29009026 	beq	r5,r4,4299c <_realloc_r+0x2c8>
   4275c:	21800117 	ldw	r6,4(r4)
   42760:	01ffff84 	movi	r7,-2
   42764:	31ce703a 	and	r7,r6,r7
   42768:	21cf883a 	add	r7,r4,r7
   4276c:	39c00117 	ldw	r7,4(r7)
   42770:	39c0004c 	andi	r7,r7,1
   42774:	38004326 	beq	r7,zero,42884 <_realloc_r+0x1b0>
   42778:	000d883a 	mov	r6,zero
   4277c:	0009883a 	mov	r4,zero
   42780:	1080004c 	andi	r2,r2,1
   42784:	10005a1e 	bne	r2,zero,428f0 <_realloc_r+0x21c>
   42788:	85fffe17 	ldw	r23,-8(r16)
   4278c:	00bfff04 	movi	r2,-4
   42790:	b5efc83a 	sub	r23,r22,r23
   42794:	b9c00117 	ldw	r7,4(r23)
   42798:	388e703a 	and	r7,r7,r2
   4279c:	3ccf883a 	add	r7,r7,r19
   427a0:	20005226 	beq	r4,zero,428ec <_realloc_r+0x218>
   427a4:	31e9883a 	add	r20,r6,r7
   427a8:	2140c726 	beq	r4,r5,42ac8 <_realloc_r+0x3f4>
   427ac:	a0c04f16 	blt	r20,r3,428ec <_realloc_r+0x218>
   427b0:	20800317 	ldw	r2,12(r4)
   427b4:	20c00217 	ldw	r3,8(r4)
   427b8:	99bfff04 	addi	r6,r19,-4
   427bc:	01000904 	movi	r4,36
   427c0:	18800315 	stw	r2,12(r3)
   427c4:	10c00215 	stw	r3,8(r2)
   427c8:	b8c00217 	ldw	r3,8(r23)
   427cc:	b8800317 	ldw	r2,12(r23)
   427d0:	bc800204 	addi	r18,r23,8
   427d4:	18800315 	stw	r2,12(r3)
   427d8:	10c00215 	stw	r3,8(r2)
   427dc:	2180ed36 	bltu	r4,r6,42b94 <_realloc_r+0x4c0>
   427e0:	008004c4 	movi	r2,19
   427e4:	11809b2e 	bgeu	r2,r6,42a54 <_realloc_r+0x380>
   427e8:	80800017 	ldw	r2,0(r16)
   427ec:	b8800215 	stw	r2,8(r23)
   427f0:	80800117 	ldw	r2,4(r16)
   427f4:	b8800315 	stw	r2,12(r23)
   427f8:	008006c4 	movi	r2,27
   427fc:	1180f936 	bltu	r2,r6,42be4 <_realloc_r+0x510>
   42800:	b8800404 	addi	r2,r23,16
   42804:	80c00204 	addi	r3,r16,8
   42808:	00009406 	br	42a5c <_realloc_r+0x388>
   4280c:	00c00404 	movi	r3,16
   42810:	1823883a 	mov	r17,r3
   42814:	003fca06 	br	42740 <_realloc_r+0x6c>
   42818:	9829883a 	mov	r20,r19
   4281c:	a447c83a 	sub	r3,r20,r17
   42820:	010003c4 	movi	r4,15
   42824:	1080004c 	andi	r2,r2,1
   42828:	20c02336 	bltu	r4,r3,428b8 <_realloc_r+0x1e4>
   4282c:	1504b03a 	or	r2,r2,r20
   42830:	b0800115 	stw	r2,4(r22)
   42834:	b52d883a 	add	r22,r22,r20
   42838:	b0800117 	ldw	r2,4(r22)
   4283c:	10800054 	ori	r2,r2,1
   42840:	b0800115 	stw	r2,4(r22)
   42844:	a809883a 	mov	r4,r21
   42848:	00446840 	call	44684 <__malloc_unlock>
   4284c:	8025883a 	mov	r18,r16
   42850:	9005883a 	mov	r2,r18
   42854:	dfc00a17 	ldw	ra,40(sp)
   42858:	df000917 	ldw	fp,36(sp)
   4285c:	ddc00817 	ldw	r23,32(sp)
   42860:	dd800717 	ldw	r22,28(sp)
   42864:	dd400617 	ldw	r21,24(sp)
   42868:	dd000517 	ldw	r20,20(sp)
   4286c:	dcc00417 	ldw	r19,16(sp)
   42870:	dc800317 	ldw	r18,12(sp)
   42874:	dc400217 	ldw	r17,8(sp)
   42878:	dc000117 	ldw	r16,4(sp)
   4287c:	dec00b04 	addi	sp,sp,44
   42880:	f800283a 	ret
   42884:	01ffff04 	movi	r7,-4
   42888:	31cc703a 	and	r6,r6,r7
   4288c:	34e9883a 	add	r20,r6,r19
   42890:	a0ffbb16 	blt	r20,r3,42780 <_realloc_r+0xac>
   42894:	20c00317 	ldw	r3,12(r4)
   42898:	21000217 	ldw	r4,8(r4)
   4289c:	20c00315 	stw	r3,12(r4)
   428a0:	19000215 	stw	r4,8(r3)
   428a4:	003fdd06 	br	4281c <_realloc_r+0x148>
   428a8:	00800304 	movi	r2,12
   428ac:	a8800015 	stw	r2,0(r21)
   428b0:	0025883a 	mov	r18,zero
   428b4:	003fe606 	br	42850 <_realloc_r+0x17c>
   428b8:	1444b03a 	or	r2,r2,r17
   428bc:	b0800115 	stw	r2,4(r22)
   428c0:	b44b883a 	add	r5,r22,r17
   428c4:	18800054 	ori	r2,r3,1
   428c8:	28800115 	stw	r2,4(r5)
   428cc:	28c7883a 	add	r3,r5,r3
   428d0:	18800117 	ldw	r2,4(r3)
   428d4:	a809883a 	mov	r4,r21
   428d8:	29400204 	addi	r5,r5,8
   428dc:	10800054 	ori	r2,r2,1
   428e0:	18800115 	stw	r2,4(r3)
   428e4:	00434e80 	call	434e8 <_free_r>
   428e8:	003fd606 	br	42844 <_realloc_r+0x170>
   428ec:	38c0330e 	bge	r7,r3,429bc <_realloc_r+0x2e8>
   428f0:	900b883a 	mov	r5,r18
   428f4:	a809883a 	mov	r4,r21
   428f8:	0041b8c0 	call	41b8c <_malloc_r>
   428fc:	1025883a 	mov	r18,r2
   42900:	10001626 	beq	r2,zero,4295c <_realloc_r+0x288>
   42904:	80bfff17 	ldw	r2,-4(r16)
   42908:	00ffff84 	movi	r3,-2
   4290c:	913ffe04 	addi	r4,r18,-8
   42910:	10c6703a 	and	r3,r2,r3
   42914:	b0c7883a 	add	r3,r22,r3
   42918:	20c09926 	beq	r4,r3,42b80 <_realloc_r+0x4ac>
   4291c:	99bfff04 	addi	r6,r19,-4
   42920:	00800904 	movi	r2,36
   42924:	11806436 	bltu	r2,r6,42ab8 <_realloc_r+0x3e4>
   42928:	00c004c4 	movi	r3,19
   4292c:	19804036 	bltu	r3,r6,42a30 <_realloc_r+0x35c>
   42930:	9005883a 	mov	r2,r18
   42934:	8007883a 	mov	r3,r16
   42938:	19000017 	ldw	r4,0(r3)
   4293c:	11000015 	stw	r4,0(r2)
   42940:	19000117 	ldw	r4,4(r3)
   42944:	11000115 	stw	r4,4(r2)
   42948:	18c00217 	ldw	r3,8(r3)
   4294c:	10c00215 	stw	r3,8(r2)
   42950:	a809883a 	mov	r4,r21
   42954:	800b883a 	mov	r5,r16
   42958:	00434e80 	call	434e8 <_free_r>
   4295c:	a809883a 	mov	r4,r21
   42960:	00446840 	call	44684 <__malloc_unlock>
   42964:	003fba06 	br	42850 <_realloc_r+0x17c>
   42968:	300b883a 	mov	r5,r6
   4296c:	dfc00a17 	ldw	ra,40(sp)
   42970:	df000917 	ldw	fp,36(sp)
   42974:	ddc00817 	ldw	r23,32(sp)
   42978:	dd800717 	ldw	r22,28(sp)
   4297c:	dd400617 	ldw	r21,24(sp)
   42980:	dd000517 	ldw	r20,20(sp)
   42984:	dcc00417 	ldw	r19,16(sp)
   42988:	dc800317 	ldw	r18,12(sp)
   4298c:	dc400217 	ldw	r17,8(sp)
   42990:	dc000117 	ldw	r16,4(sp)
   42994:	dec00b04 	addi	sp,sp,44
   42998:	0041b8c1 	jmpi	41b8c <_malloc_r>
   4299c:	29800117 	ldw	r6,4(r5)
   429a0:	013fff04 	movi	r4,-4
   429a4:	89c00404 	addi	r7,r17,16
   429a8:	310c703a 	and	r6,r6,r4
   429ac:	34c9883a 	add	r4,r6,r19
   429b0:	21c0340e 	bge	r4,r7,42a84 <_realloc_r+0x3b0>
   429b4:	2809883a 	mov	r4,r5
   429b8:	003f7106 	br	42780 <_realloc_r+0xac>
   429bc:	b8800317 	ldw	r2,12(r23)
   429c0:	b8c00217 	ldw	r3,8(r23)
   429c4:	99bfff04 	addi	r6,r19,-4
   429c8:	01000904 	movi	r4,36
   429cc:	18800315 	stw	r2,12(r3)
   429d0:	10c00215 	stw	r3,8(r2)
   429d4:	bc800204 	addi	r18,r23,8
   429d8:	21807836 	bltu	r4,r6,42bbc <_realloc_r+0x4e8>
   429dc:	008004c4 	movi	r2,19
   429e0:	1180732e 	bgeu	r2,r6,42bb0 <_realloc_r+0x4dc>
   429e4:	80800017 	ldw	r2,0(r16)
   429e8:	b8800215 	stw	r2,8(r23)
   429ec:	80800117 	ldw	r2,4(r16)
   429f0:	b8800315 	stw	r2,12(r23)
   429f4:	008006c4 	movi	r2,27
   429f8:	11808936 	bltu	r2,r6,42c20 <_realloc_r+0x54c>
   429fc:	b8800404 	addi	r2,r23,16
   42a00:	80c00204 	addi	r3,r16,8
   42a04:	19000017 	ldw	r4,0(r3)
   42a08:	9021883a 	mov	r16,r18
   42a0c:	3829883a 	mov	r20,r7
   42a10:	11000015 	stw	r4,0(r2)
   42a14:	19000117 	ldw	r4,4(r3)
   42a18:	b82d883a 	mov	r22,r23
   42a1c:	11000115 	stw	r4,4(r2)
   42a20:	18c00217 	ldw	r3,8(r3)
   42a24:	10c00215 	stw	r3,8(r2)
   42a28:	b8800117 	ldw	r2,4(r23)
   42a2c:	003f7b06 	br	4281c <_realloc_r+0x148>
   42a30:	80c00017 	ldw	r3,0(r16)
   42a34:	90c00015 	stw	r3,0(r18)
   42a38:	80c00117 	ldw	r3,4(r16)
   42a3c:	90c00115 	stw	r3,4(r18)
   42a40:	00c006c4 	movi	r3,27
   42a44:	19804636 	bltu	r3,r6,42b60 <_realloc_r+0x48c>
   42a48:	90800204 	addi	r2,r18,8
   42a4c:	80c00204 	addi	r3,r16,8
   42a50:	003fb906 	br	42938 <_realloc_r+0x264>
   42a54:	9005883a 	mov	r2,r18
   42a58:	8007883a 	mov	r3,r16
   42a5c:	19000017 	ldw	r4,0(r3)
   42a60:	9021883a 	mov	r16,r18
   42a64:	b82d883a 	mov	r22,r23
   42a68:	11000015 	stw	r4,0(r2)
   42a6c:	19000117 	ldw	r4,4(r3)
   42a70:	11000115 	stw	r4,4(r2)
   42a74:	18c00217 	ldw	r3,8(r3)
   42a78:	10c00215 	stw	r3,8(r2)
   42a7c:	b8800117 	ldw	r2,4(r23)
   42a80:	003f6606 	br	4281c <_realloc_r+0x148>
   42a84:	2445c83a 	sub	r2,r4,r17
   42a88:	b46d883a 	add	r22,r22,r17
   42a8c:	10800054 	ori	r2,r2,1
   42a90:	b0800115 	stw	r2,4(r22)
   42a94:	80bfff17 	ldw	r2,-4(r16)
   42a98:	a809883a 	mov	r4,r21
   42a9c:	e5800215 	stw	r22,8(fp)
   42aa0:	1080004c 	andi	r2,r2,1
   42aa4:	88a2b03a 	or	r17,r17,r2
   42aa8:	847fff15 	stw	r17,-4(r16)
   42aac:	00446840 	call	44684 <__malloc_unlock>
   42ab0:	8025883a 	mov	r18,r16
   42ab4:	003f6606 	br	42850 <_realloc_r+0x17c>
   42ab8:	9009883a 	mov	r4,r18
   42abc:	800b883a 	mov	r5,r16
   42ac0:	00425480 	call	42548 <memmove>
   42ac4:	003fa206 	br	42950 <_realloc_r+0x27c>
   42ac8:	88800404 	addi	r2,r17,16
   42acc:	a0bf8716 	blt	r20,r2,428ec <_realloc_r+0x218>
   42ad0:	b8800317 	ldw	r2,12(r23)
   42ad4:	b8c00217 	ldw	r3,8(r23)
   42ad8:	99bfff04 	addi	r6,r19,-4
   42adc:	01000904 	movi	r4,36
   42ae0:	18800315 	stw	r2,12(r3)
   42ae4:	10c00215 	stw	r3,8(r2)
   42ae8:	bc800204 	addi	r18,r23,8
   42aec:	21806536 	bltu	r4,r6,42c84 <_realloc_r+0x5b0>
   42af0:	008004c4 	movi	r2,19
   42af4:	1180592e 	bgeu	r2,r6,42c5c <_realloc_r+0x588>
   42af8:	80800017 	ldw	r2,0(r16)
   42afc:	b8800215 	stw	r2,8(r23)
   42b00:	80800117 	ldw	r2,4(r16)
   42b04:	b8800315 	stw	r2,12(r23)
   42b08:	008006c4 	movi	r2,27
   42b0c:	11806136 	bltu	r2,r6,42c94 <_realloc_r+0x5c0>
   42b10:	b8800404 	addi	r2,r23,16
   42b14:	80c00204 	addi	r3,r16,8
   42b18:	19000017 	ldw	r4,0(r3)
   42b1c:	11000015 	stw	r4,0(r2)
   42b20:	19000117 	ldw	r4,4(r3)
   42b24:	11000115 	stw	r4,4(r2)
   42b28:	18c00217 	ldw	r3,8(r3)
   42b2c:	10c00215 	stw	r3,8(r2)
   42b30:	a447c83a 	sub	r3,r20,r17
   42b34:	bc45883a 	add	r2,r23,r17
   42b38:	18c00054 	ori	r3,r3,1
   42b3c:	10c00115 	stw	r3,4(r2)
   42b40:	b8c00117 	ldw	r3,4(r23)
   42b44:	e0800215 	stw	r2,8(fp)
   42b48:	a809883a 	mov	r4,r21
   42b4c:	1880004c 	andi	r2,r3,1
   42b50:	88a2b03a 	or	r17,r17,r2
   42b54:	bc400115 	stw	r17,4(r23)
   42b58:	00446840 	call	44684 <__malloc_unlock>
   42b5c:	003f3c06 	br	42850 <_realloc_r+0x17c>
   42b60:	80c00217 	ldw	r3,8(r16)
   42b64:	90c00215 	stw	r3,8(r18)
   42b68:	80c00317 	ldw	r3,12(r16)
   42b6c:	90c00315 	stw	r3,12(r18)
   42b70:	30802426 	beq	r6,r2,42c04 <_realloc_r+0x530>
   42b74:	90800404 	addi	r2,r18,16
   42b78:	80c00404 	addi	r3,r16,16
   42b7c:	003f6e06 	br	42938 <_realloc_r+0x264>
   42b80:	953fff17 	ldw	r20,-4(r18)
   42b84:	00ffff04 	movi	r3,-4
   42b88:	a0e8703a 	and	r20,r20,r3
   42b8c:	a4e9883a 	add	r20,r20,r19
   42b90:	003f2206 	br	4281c <_realloc_r+0x148>
   42b94:	800b883a 	mov	r5,r16
   42b98:	9009883a 	mov	r4,r18
   42b9c:	00425480 	call	42548 <memmove>
   42ba0:	9021883a 	mov	r16,r18
   42ba4:	b8800117 	ldw	r2,4(r23)
   42ba8:	b82d883a 	mov	r22,r23
   42bac:	003f1b06 	br	4281c <_realloc_r+0x148>
   42bb0:	9005883a 	mov	r2,r18
   42bb4:	8007883a 	mov	r3,r16
   42bb8:	003f9206 	br	42a04 <_realloc_r+0x330>
   42bbc:	800b883a 	mov	r5,r16
   42bc0:	9009883a 	mov	r4,r18
   42bc4:	d9c00015 	stw	r7,0(sp)
   42bc8:	00425480 	call	42548 <memmove>
   42bcc:	d9c00017 	ldw	r7,0(sp)
   42bd0:	9021883a 	mov	r16,r18
   42bd4:	b8800117 	ldw	r2,4(r23)
   42bd8:	3829883a 	mov	r20,r7
   42bdc:	b82d883a 	mov	r22,r23
   42be0:	003f0e06 	br	4281c <_realloc_r+0x148>
   42be4:	80800217 	ldw	r2,8(r16)
   42be8:	b8800415 	stw	r2,16(r23)
   42bec:	80800317 	ldw	r2,12(r16)
   42bf0:	b8800515 	stw	r2,20(r23)
   42bf4:	31001226 	beq	r6,r4,42c40 <_realloc_r+0x56c>
   42bf8:	b8800604 	addi	r2,r23,24
   42bfc:	80c00404 	addi	r3,r16,16
   42c00:	003f9606 	br	42a5c <_realloc_r+0x388>
   42c04:	81000417 	ldw	r4,16(r16)
   42c08:	90800604 	addi	r2,r18,24
   42c0c:	80c00604 	addi	r3,r16,24
   42c10:	91000415 	stw	r4,16(r18)
   42c14:	81000517 	ldw	r4,20(r16)
   42c18:	91000515 	stw	r4,20(r18)
   42c1c:	003f4606 	br	42938 <_realloc_r+0x264>
   42c20:	80800217 	ldw	r2,8(r16)
   42c24:	b8800415 	stw	r2,16(r23)
   42c28:	80800317 	ldw	r2,12(r16)
   42c2c:	b8800515 	stw	r2,20(r23)
   42c30:	31000d26 	beq	r6,r4,42c68 <_realloc_r+0x594>
   42c34:	b8800604 	addi	r2,r23,24
   42c38:	80c00404 	addi	r3,r16,16
   42c3c:	003f7106 	br	42a04 <_realloc_r+0x330>
   42c40:	81000417 	ldw	r4,16(r16)
   42c44:	b8800804 	addi	r2,r23,32
   42c48:	80c00604 	addi	r3,r16,24
   42c4c:	b9000615 	stw	r4,24(r23)
   42c50:	81000517 	ldw	r4,20(r16)
   42c54:	b9000715 	stw	r4,28(r23)
   42c58:	003f8006 	br	42a5c <_realloc_r+0x388>
   42c5c:	9005883a 	mov	r2,r18
   42c60:	8007883a 	mov	r3,r16
   42c64:	003fac06 	br	42b18 <_realloc_r+0x444>
   42c68:	81000417 	ldw	r4,16(r16)
   42c6c:	b8800804 	addi	r2,r23,32
   42c70:	80c00604 	addi	r3,r16,24
   42c74:	b9000615 	stw	r4,24(r23)
   42c78:	81000517 	ldw	r4,20(r16)
   42c7c:	b9000715 	stw	r4,28(r23)
   42c80:	003f6006 	br	42a04 <_realloc_r+0x330>
   42c84:	9009883a 	mov	r4,r18
   42c88:	800b883a 	mov	r5,r16
   42c8c:	00425480 	call	42548 <memmove>
   42c90:	003fa706 	br	42b30 <_realloc_r+0x45c>
   42c94:	80800217 	ldw	r2,8(r16)
   42c98:	b8800415 	stw	r2,16(r23)
   42c9c:	80800317 	ldw	r2,12(r16)
   42ca0:	b8800515 	stw	r2,20(r23)
   42ca4:	31000326 	beq	r6,r4,42cb4 <_realloc_r+0x5e0>
   42ca8:	b8800604 	addi	r2,r23,24
   42cac:	80c00404 	addi	r3,r16,16
   42cb0:	003f9906 	br	42b18 <_realloc_r+0x444>
   42cb4:	81000417 	ldw	r4,16(r16)
   42cb8:	b8800804 	addi	r2,r23,32
   42cbc:	80c00604 	addi	r3,r16,24
   42cc0:	b9000615 	stw	r4,24(r23)
   42cc4:	81000517 	ldw	r4,20(r16)
   42cc8:	b9000715 	stw	r4,28(r23)
   42ccc:	003f9206 	br	42b18 <_realloc_r+0x444>

00042cd0 <_sbrk_r>:
   42cd0:	defffd04 	addi	sp,sp,-12
   42cd4:	dc400115 	stw	r17,4(sp)
   42cd8:	dc000015 	stw	r16,0(sp)
   42cdc:	2023883a 	mov	r17,r4
   42ce0:	04000174 	movhi	r16,5
   42ce4:	842cad04 	addi	r16,r16,-19788
   42ce8:	2809883a 	mov	r4,r5
   42cec:	dfc00215 	stw	ra,8(sp)
   42cf0:	80000015 	stw	zero,0(r16)
   42cf4:	00448680 	call	44868 <sbrk>
   42cf8:	00ffffc4 	movi	r3,-1
   42cfc:	10c00526 	beq	r2,r3,42d14 <_sbrk_r+0x44>
   42d00:	dfc00217 	ldw	ra,8(sp)
   42d04:	dc400117 	ldw	r17,4(sp)
   42d08:	dc000017 	ldw	r16,0(sp)
   42d0c:	dec00304 	addi	sp,sp,12
   42d10:	f800283a 	ret
   42d14:	80c00017 	ldw	r3,0(r16)
   42d18:	183ff926 	beq	r3,zero,42d00 <_sbrk_r+0x30>
   42d1c:	88c00015 	stw	r3,0(r17)
   42d20:	dfc00217 	ldw	ra,8(sp)
   42d24:	dc400117 	ldw	r17,4(sp)
   42d28:	dc000017 	ldw	r16,0(sp)
   42d2c:	dec00304 	addi	sp,sp,12
   42d30:	f800283a 	ret

00042d34 <__swsetup_r>:
   42d34:	00800174 	movhi	r2,5
   42d38:	10a40204 	addi	r2,r2,-28664
   42d3c:	10800017 	ldw	r2,0(r2)
   42d40:	defffd04 	addi	sp,sp,-12
   42d44:	dc400115 	stw	r17,4(sp)
   42d48:	dc000015 	stw	r16,0(sp)
   42d4c:	dfc00215 	stw	ra,8(sp)
   42d50:	2023883a 	mov	r17,r4
   42d54:	2821883a 	mov	r16,r5
   42d58:	10000226 	beq	r2,zero,42d64 <__swsetup_r+0x30>
   42d5c:	10c00e17 	ldw	r3,56(r2)
   42d60:	18003d26 	beq	r3,zero,42e58 <__swsetup_r+0x124>
   42d64:	8080030b 	ldhu	r2,12(r16)
   42d68:	10c0020c 	andi	r3,r2,8
   42d6c:	18ffffcc 	andi	r3,r3,65535
   42d70:	18e0001c 	xori	r3,r3,32768
   42d74:	18e00004 	addi	r3,r3,-32768
   42d78:	18001226 	beq	r3,zero,42dc4 <__swsetup_r+0x90>
   42d7c:	80c00417 	ldw	r3,16(r16)
   42d80:	18001f26 	beq	r3,zero,42e00 <__swsetup_r+0xcc>
   42d84:	1100004c 	andi	r4,r2,1
   42d88:	2000261e 	bne	r4,zero,42e24 <__swsetup_r+0xf0>
   42d8c:	1080008c 	andi	r2,r2,2
   42d90:	10bfffcc 	andi	r2,r2,65535
   42d94:	10a0001c 	xori	r2,r2,32768
   42d98:	10a00004 	addi	r2,r2,-32768
   42d9c:	1000311e 	bne	r2,zero,42e64 <__swsetup_r+0x130>
   42da0:	80800517 	ldw	r2,20(r16)
   42da4:	80800215 	stw	r2,8(r16)
   42da8:	18002326 	beq	r3,zero,42e38 <__swsetup_r+0x104>
   42dac:	0005883a 	mov	r2,zero
   42db0:	dfc00217 	ldw	ra,8(sp)
   42db4:	dc400117 	ldw	r17,4(sp)
   42db8:	dc000017 	ldw	r16,0(sp)
   42dbc:	dec00304 	addi	sp,sp,12
   42dc0:	f800283a 	ret
   42dc4:	10c0040c 	andi	r3,r2,16
   42dc8:	18ffffcc 	andi	r3,r3,65535
   42dcc:	18e0001c 	xori	r3,r3,32768
   42dd0:	18e00004 	addi	r3,r3,-32768
   42dd4:	18001e26 	beq	r3,zero,42e50 <__swsetup_r+0x11c>
   42dd8:	10c0010c 	andi	r3,r2,4
   42ddc:	18ffffcc 	andi	r3,r3,65535
   42de0:	18e0001c 	xori	r3,r3,32768
   42de4:	18e00004 	addi	r3,r3,-32768
   42de8:	1800211e 	bne	r3,zero,42e70 <__swsetup_r+0x13c>
   42dec:	80c00417 	ldw	r3,16(r16)
   42df0:	11400214 	ori	r5,r2,8
   42df4:	8140030d 	sth	r5,12(r16)
   42df8:	2805883a 	mov	r2,r5
   42dfc:	183fe11e 	bne	r3,zero,42d84 <__swsetup_r+0x50>
   42e00:	1140a00c 	andi	r5,r2,640
   42e04:	01008004 	movi	r4,512
   42e08:	293fde26 	beq	r5,r4,42d84 <__swsetup_r+0x50>
   42e0c:	8809883a 	mov	r4,r17
   42e10:	800b883a 	mov	r5,r16
   42e14:	00439180 	call	43918 <__smakebuf_r>
   42e18:	8080030b 	ldhu	r2,12(r16)
   42e1c:	80c00417 	ldw	r3,16(r16)
   42e20:	003fd806 	br	42d84 <__swsetup_r+0x50>
   42e24:	80800517 	ldw	r2,20(r16)
   42e28:	80000215 	stw	zero,8(r16)
   42e2c:	0085c83a 	sub	r2,zero,r2
   42e30:	80800615 	stw	r2,24(r16)
   42e34:	183fdd1e 	bne	r3,zero,42dac <__swsetup_r+0x78>
   42e38:	8080030b 	ldhu	r2,12(r16)
   42e3c:	1080200c 	andi	r2,r2,128
   42e40:	10bfffcc 	andi	r2,r2,65535
   42e44:	10a0001c 	xori	r2,r2,32768
   42e48:	10a00004 	addi	r2,r2,-32768
   42e4c:	103fd826 	beq	r2,zero,42db0 <__swsetup_r+0x7c>
   42e50:	00bfffc4 	movi	r2,-1
   42e54:	003fd606 	br	42db0 <__swsetup_r+0x7c>
   42e58:	1009883a 	mov	r4,r2
   42e5c:	00431640 	call	43164 <__sinit>
   42e60:	003fc006 	br	42d64 <__swsetup_r+0x30>
   42e64:	0005883a 	mov	r2,zero
   42e68:	80800215 	stw	r2,8(r16)
   42e6c:	003fce06 	br	42da8 <__swsetup_r+0x74>
   42e70:	81400c17 	ldw	r5,48(r16)
   42e74:	28000626 	beq	r5,zero,42e90 <__swsetup_r+0x15c>
   42e78:	80c01004 	addi	r3,r16,64
   42e7c:	28c00326 	beq	r5,r3,42e8c <__swsetup_r+0x158>
   42e80:	8809883a 	mov	r4,r17
   42e84:	00434e80 	call	434e8 <_free_r>
   42e88:	8080030b 	ldhu	r2,12(r16)
   42e8c:	80000c15 	stw	zero,48(r16)
   42e90:	80c00417 	ldw	r3,16(r16)
   42e94:	013ff6c4 	movi	r4,-37
   42e98:	2084703a 	and	r2,r4,r2
   42e9c:	80000115 	stw	zero,4(r16)
   42ea0:	80c00015 	stw	r3,0(r16)
   42ea4:	003fd206 	br	42df0 <__swsetup_r+0xbc>

00042ea8 <_fflush_r>:
   42ea8:	defffb04 	addi	sp,sp,-20
   42eac:	dcc00315 	stw	r19,12(sp)
   42eb0:	dc400115 	stw	r17,4(sp)
   42eb4:	dfc00415 	stw	ra,16(sp)
   42eb8:	dc800215 	stw	r18,8(sp)
   42ebc:	dc000015 	stw	r16,0(sp)
   42ec0:	2027883a 	mov	r19,r4
   42ec4:	2823883a 	mov	r17,r5
   42ec8:	20000226 	beq	r4,zero,42ed4 <_fflush_r+0x2c>
   42ecc:	20800e17 	ldw	r2,56(r4)
   42ed0:	10005726 	beq	r2,zero,43030 <_fflush_r+0x188>
   42ed4:	8880030b 	ldhu	r2,12(r17)
   42ed8:	10c0020c 	andi	r3,r2,8
   42edc:	18ffffcc 	andi	r3,r3,65535
   42ee0:	18e0001c 	xori	r3,r3,32768
   42ee4:	18e00004 	addi	r3,r3,-32768
   42ee8:	1800311e 	bne	r3,zero,42fb0 <_fflush_r+0x108>
   42eec:	89000117 	ldw	r4,4(r17)
   42ef0:	10c20014 	ori	r3,r2,2048
   42ef4:	88c0030d 	sth	r3,12(r17)
   42ef8:	180b883a 	mov	r5,r3
   42efc:	0100520e 	bge	zero,r4,43048 <_fflush_r+0x1a0>
   42f00:	88c00a17 	ldw	r3,40(r17)
   42f04:	18002226 	beq	r3,zero,42f90 <_fflush_r+0xe8>
   42f08:	1084000c 	andi	r2,r2,4096
   42f0c:	10bfffcc 	andi	r2,r2,65535
   42f10:	10a0001c 	xori	r2,r2,32768
   42f14:	10a00004 	addi	r2,r2,-32768
   42f18:	10004e26 	beq	r2,zero,43054 <_fflush_r+0x1ac>
   42f1c:	8c001417 	ldw	r16,80(r17)
   42f20:	2940010c 	andi	r5,r5,4
   42f24:	297fffcc 	andi	r5,r5,65535
   42f28:	2960001c 	xori	r5,r5,32768
   42f2c:	29600004 	addi	r5,r5,-32768
   42f30:	28000626 	beq	r5,zero,42f4c <_fflush_r+0xa4>
   42f34:	89000117 	ldw	r4,4(r17)
   42f38:	88800c17 	ldw	r2,48(r17)
   42f3c:	8121c83a 	sub	r16,r16,r4
   42f40:	10000226 	beq	r2,zero,42f4c <_fflush_r+0xa4>
   42f44:	88800f17 	ldw	r2,60(r17)
   42f48:	80a1c83a 	sub	r16,r16,r2
   42f4c:	89400717 	ldw	r5,28(r17)
   42f50:	9809883a 	mov	r4,r19
   42f54:	800d883a 	mov	r6,r16
   42f58:	000f883a 	mov	r7,zero
   42f5c:	183ee83a 	callr	r3
   42f60:	8080281e 	bne	r16,r2,43004 <_fflush_r+0x15c>
   42f64:	8880030b 	ldhu	r2,12(r17)
   42f68:	88c00417 	ldw	r3,16(r17)
   42f6c:	88000115 	stw	zero,4(r17)
   42f70:	113dffcc 	andi	r4,r2,63487
   42f74:	1084000c 	andi	r2,r2,4096
   42f78:	10bfffcc 	andi	r2,r2,65535
   42f7c:	10a0001c 	xori	r2,r2,32768
   42f80:	8900030d 	sth	r4,12(r17)
   42f84:	88c00015 	stw	r3,0(r17)
   42f88:	10a00004 	addi	r2,r2,-32768
   42f8c:	10002c1e 	bne	r2,zero,43040 <_fflush_r+0x198>
   42f90:	0005883a 	mov	r2,zero
   42f94:	dfc00417 	ldw	ra,16(sp)
   42f98:	dcc00317 	ldw	r19,12(sp)
   42f9c:	dc800217 	ldw	r18,8(sp)
   42fa0:	dc400117 	ldw	r17,4(sp)
   42fa4:	dc000017 	ldw	r16,0(sp)
   42fa8:	dec00504 	addi	sp,sp,20
   42fac:	f800283a 	ret
   42fb0:	8c800417 	ldw	r18,16(r17)
   42fb4:	903ff626 	beq	r18,zero,42f90 <_fflush_r+0xe8>
   42fb8:	8c000017 	ldw	r16,0(r17)
   42fbc:	108000cc 	andi	r2,r2,3
   42fc0:	8c800015 	stw	r18,0(r17)
   42fc4:	84a1c83a 	sub	r16,r16,r18
   42fc8:	10001b1e 	bne	r2,zero,43038 <_fflush_r+0x190>
   42fcc:	88800517 	ldw	r2,20(r17)
   42fd0:	88800215 	stw	r2,8(r17)
   42fd4:	04000316 	blt	zero,r16,42fe4 <_fflush_r+0x13c>
   42fd8:	003fed06 	br	42f90 <_fflush_r+0xe8>
   42fdc:	90a5883a 	add	r18,r18,r2
   42fe0:	043feb0e 	bge	zero,r16,42f90 <_fflush_r+0xe8>
   42fe4:	88800917 	ldw	r2,36(r17)
   42fe8:	89400717 	ldw	r5,28(r17)
   42fec:	800f883a 	mov	r7,r16
   42ff0:	900d883a 	mov	r6,r18
   42ff4:	9809883a 	mov	r4,r19
   42ff8:	103ee83a 	callr	r2
   42ffc:	80a1c83a 	sub	r16,r16,r2
   43000:	00bff616 	blt	zero,r2,42fdc <_fflush_r+0x134>
   43004:	88c0030b 	ldhu	r3,12(r17)
   43008:	00bfffc4 	movi	r2,-1
   4300c:	18c01014 	ori	r3,r3,64
   43010:	88c0030d 	sth	r3,12(r17)
   43014:	dfc00417 	ldw	ra,16(sp)
   43018:	dcc00317 	ldw	r19,12(sp)
   4301c:	dc800217 	ldw	r18,8(sp)
   43020:	dc400117 	ldw	r17,4(sp)
   43024:	dc000017 	ldw	r16,0(sp)
   43028:	dec00504 	addi	sp,sp,20
   4302c:	f800283a 	ret
   43030:	00431640 	call	43164 <__sinit>
   43034:	003fa706 	br	42ed4 <_fflush_r+0x2c>
   43038:	0005883a 	mov	r2,zero
   4303c:	003fe406 	br	42fd0 <_fflush_r+0x128>
   43040:	8c001415 	stw	r16,80(r17)
   43044:	003fd206 	br	42f90 <_fflush_r+0xe8>
   43048:	88c00f17 	ldw	r3,60(r17)
   4304c:	00ffac16 	blt	zero,r3,42f00 <_fflush_r+0x58>
   43050:	003fcf06 	br	42f90 <_fflush_r+0xe8>
   43054:	89400717 	ldw	r5,28(r17)
   43058:	9809883a 	mov	r4,r19
   4305c:	000d883a 	mov	r6,zero
   43060:	01c00044 	movi	r7,1
   43064:	183ee83a 	callr	r3
   43068:	1021883a 	mov	r16,r2
   4306c:	00bfffc4 	movi	r2,-1
   43070:	80800326 	beq	r16,r2,43080 <_fflush_r+0x1d8>
   43074:	8940030b 	ldhu	r5,12(r17)
   43078:	88c00a17 	ldw	r3,40(r17)
   4307c:	003fa806 	br	42f20 <_fflush_r+0x78>
   43080:	98c00017 	ldw	r3,0(r19)
   43084:	00800744 	movi	r2,29
   43088:	18bfde1e 	bne	r3,r2,43004 <_fflush_r+0x15c>
   4308c:	003fc006 	br	42f90 <_fflush_r+0xe8>

00043090 <fflush>:
   43090:	200b883a 	mov	r5,r4
   43094:	20000426 	beq	r4,zero,430a8 <fflush+0x18>
   43098:	00800174 	movhi	r2,5
   4309c:	10a40204 	addi	r2,r2,-28664
   430a0:	11000017 	ldw	r4,0(r2)
   430a4:	0042ea81 	jmpi	42ea8 <_fflush_r>
   430a8:	00800174 	movhi	r2,5
   430ac:	10a40104 	addi	r2,r2,-28668
   430b0:	11000017 	ldw	r4,0(r2)
   430b4:	01400134 	movhi	r5,4
   430b8:	294baa04 	addi	r5,r5,11944
   430bc:	00438601 	jmpi	43860 <_fwalk_reent>

000430c0 <__fp_lock>:
   430c0:	0005883a 	mov	r2,zero
   430c4:	f800283a 	ret

000430c8 <__fp_unlock>:
   430c8:	0005883a 	mov	r2,zero
   430cc:	f800283a 	ret

000430d0 <_cleanup_r>:
   430d0:	01400134 	movhi	r5,4
   430d4:	294fba04 	addi	r5,r5,16104
   430d8:	00437b81 	jmpi	437b8 <_fwalk>

000430dc <__sfmoreglue>:
   430dc:	defffc04 	addi	sp,sp,-16
   430e0:	dc800215 	stw	r18,8(sp)
   430e4:	2825883a 	mov	r18,r5
   430e8:	dc000015 	stw	r16,0(sp)
   430ec:	01401704 	movi	r5,92
   430f0:	2021883a 	mov	r16,r4
   430f4:	9009883a 	mov	r4,r18
   430f8:	dfc00315 	stw	ra,12(sp)
   430fc:	dc400115 	stw	r17,4(sp)
   43100:	004155c0 	call	4155c <__mulsi3>
   43104:	8009883a 	mov	r4,r16
   43108:	11400304 	addi	r5,r2,12
   4310c:	1023883a 	mov	r17,r2
   43110:	0041b8c0 	call	41b8c <_malloc_r>
   43114:	1021883a 	mov	r16,r2
   43118:	10000726 	beq	r2,zero,43138 <__sfmoreglue+0x5c>
   4311c:	11000304 	addi	r4,r2,12
   43120:	10000015 	stw	zero,0(r2)
   43124:	14800115 	stw	r18,4(r2)
   43128:	11000215 	stw	r4,8(r2)
   4312c:	000b883a 	mov	r5,zero
   43130:	880d883a 	mov	r6,r17
   43134:	0043ac00 	call	43ac0 <memset>
   43138:	8005883a 	mov	r2,r16
   4313c:	dfc00317 	ldw	ra,12(sp)
   43140:	dc800217 	ldw	r18,8(sp)
   43144:	dc400117 	ldw	r17,4(sp)
   43148:	dc000017 	ldw	r16,0(sp)
   4314c:	dec00404 	addi	sp,sp,16
   43150:	f800283a 	ret

00043154 <_cleanup>:
   43154:	00800174 	movhi	r2,5
   43158:	10a40104 	addi	r2,r2,-28668
   4315c:	11000017 	ldw	r4,0(r2)
   43160:	00430d01 	jmpi	430d0 <_cleanup_r>

00043164 <__sinit>:
   43164:	20800e17 	ldw	r2,56(r4)
   43168:	1000401e 	bne	r2,zero,4326c <__sinit+0x108>
   4316c:	21400117 	ldw	r5,4(r4)
   43170:	01800134 	movhi	r6,4
   43174:	318c3404 	addi	r6,r6,12496
   43178:	20c00217 	ldw	r3,8(r4)
   4317c:	21800f15 	stw	r6,60(r4)
   43180:	2080bb04 	addi	r2,r4,748
   43184:	02400044 	movi	r9,1
   43188:	018000c4 	movi	r6,3
   4318c:	2180b915 	stw	r6,740(r4)
   43190:	2080ba15 	stw	r2,744(r4)
   43194:	22400e15 	stw	r9,56(r4)
   43198:	20800317 	ldw	r2,12(r4)
   4319c:	2000b815 	stw	zero,736(r4)
   431a0:	02000134 	movhi	r8,4
   431a4:	420ee704 	addi	r8,r8,15260
   431a8:	01c00134 	movhi	r7,4
   431ac:	39cefc04 	addi	r7,r7,15344
   431b0:	01800134 	movhi	r6,4
   431b4:	318f1e04 	addi	r6,r6,15480
   431b8:	01000134 	movhi	r4,4
   431bc:	210f3504 	addi	r4,r4,15572
   431c0:	02800104 	movi	r10,4
   431c4:	28000015 	stw	zero,0(r5)
   431c8:	28000115 	stw	zero,4(r5)
   431cc:	28000215 	stw	zero,8(r5)
   431d0:	2a80030d 	sth	r10,12(r5)
   431d4:	2800038d 	sth	zero,14(r5)
   431d8:	28000415 	stw	zero,16(r5)
   431dc:	28000515 	stw	zero,20(r5)
   431e0:	28000615 	stw	zero,24(r5)
   431e4:	29400715 	stw	r5,28(r5)
   431e8:	2a000815 	stw	r8,32(r5)
   431ec:	29c00915 	stw	r7,36(r5)
   431f0:	29800a15 	stw	r6,40(r5)
   431f4:	29000b15 	stw	r4,44(r5)
   431f8:	01400284 	movi	r5,10
   431fc:	18000015 	stw	zero,0(r3)
   43200:	18000115 	stw	zero,4(r3)
   43204:	18000215 	stw	zero,8(r3)
   43208:	1940030d 	sth	r5,12(r3)
   4320c:	1a40038d 	sth	r9,14(r3)
   43210:	18000415 	stw	zero,16(r3)
   43214:	18000515 	stw	zero,20(r3)
   43218:	18000615 	stw	zero,24(r3)
   4321c:	18c00715 	stw	r3,28(r3)
   43220:	1a000815 	stw	r8,32(r3)
   43224:	19c00915 	stw	r7,36(r3)
   43228:	19800a15 	stw	r6,40(r3)
   4322c:	19000b15 	stw	r4,44(r3)
   43230:	00c00484 	movi	r3,18
   43234:	10c0030d 	sth	r3,12(r2)
   43238:	00c00084 	movi	r3,2
   4323c:	10000015 	stw	zero,0(r2)
   43240:	10000115 	stw	zero,4(r2)
   43244:	10000215 	stw	zero,8(r2)
   43248:	10c0038d 	sth	r3,14(r2)
   4324c:	10000415 	stw	zero,16(r2)
   43250:	10000515 	stw	zero,20(r2)
   43254:	10000615 	stw	zero,24(r2)
   43258:	10800715 	stw	r2,28(r2)
   4325c:	12000815 	stw	r8,32(r2)
   43260:	11c00915 	stw	r7,36(r2)
   43264:	11800a15 	stw	r6,40(r2)
   43268:	11000b15 	stw	r4,44(r2)
   4326c:	f800283a 	ret

00043270 <__sfp>:
   43270:	defffc04 	addi	sp,sp,-16
   43274:	00800174 	movhi	r2,5
   43278:	10a40104 	addi	r2,r2,-28668
   4327c:	dc400115 	stw	r17,4(sp)
   43280:	14400017 	ldw	r17,0(r2)
   43284:	dc800215 	stw	r18,8(sp)
   43288:	dfc00315 	stw	ra,12(sp)
   4328c:	88800e17 	ldw	r2,56(r17)
   43290:	dc000015 	stw	r16,0(sp)
   43294:	2025883a 	mov	r18,r4
   43298:	10002826 	beq	r2,zero,4333c <__sfp+0xcc>
   4329c:	8c40b804 	addi	r17,r17,736
   432a0:	043fffc4 	movi	r16,-1
   432a4:	89400117 	ldw	r5,4(r17)
   432a8:	88800217 	ldw	r2,8(r17)
   432ac:	297fffc4 	addi	r5,r5,-1
   432b0:	28000a16 	blt	r5,zero,432dc <__sfp+0x6c>
   432b4:	10c0030f 	ldh	r3,12(r2)
   432b8:	18000c26 	beq	r3,zero,432ec <__sfp+0x7c>
   432bc:	10c01a04 	addi	r3,r2,104
   432c0:	00000206 	br	432cc <__sfp+0x5c>
   432c4:	19bfe90f 	ldh	r6,-92(r3)
   432c8:	30000826 	beq	r6,zero,432ec <__sfp+0x7c>
   432cc:	297fffc4 	addi	r5,r5,-1
   432d0:	18bffd04 	addi	r2,r3,-12
   432d4:	18c01704 	addi	r3,r3,92
   432d8:	2c3ffa1e 	bne	r5,r16,432c4 <__sfp+0x54>
   432dc:	88800017 	ldw	r2,0(r17)
   432e0:	10001926 	beq	r2,zero,43348 <__sfp+0xd8>
   432e4:	1023883a 	mov	r17,r2
   432e8:	003fee06 	br	432a4 <__sfp+0x34>
   432ec:	00ffffc4 	movi	r3,-1
   432f0:	10c0038d 	sth	r3,14(r2)
   432f4:	00c00044 	movi	r3,1
   432f8:	10c0030d 	sth	r3,12(r2)
   432fc:	10000015 	stw	zero,0(r2)
   43300:	10000215 	stw	zero,8(r2)
   43304:	10000115 	stw	zero,4(r2)
   43308:	10000415 	stw	zero,16(r2)
   4330c:	10000515 	stw	zero,20(r2)
   43310:	10000615 	stw	zero,24(r2)
   43314:	10000c15 	stw	zero,48(r2)
   43318:	10000d15 	stw	zero,52(r2)
   4331c:	10001115 	stw	zero,68(r2)
   43320:	10001215 	stw	zero,72(r2)
   43324:	dfc00317 	ldw	ra,12(sp)
   43328:	dc800217 	ldw	r18,8(sp)
   4332c:	dc400117 	ldw	r17,4(sp)
   43330:	dc000017 	ldw	r16,0(sp)
   43334:	dec00404 	addi	sp,sp,16
   43338:	f800283a 	ret
   4333c:	8809883a 	mov	r4,r17
   43340:	00431640 	call	43164 <__sinit>
   43344:	003fd506 	br	4329c <__sfp+0x2c>
   43348:	9009883a 	mov	r4,r18
   4334c:	01400104 	movi	r5,4
   43350:	00430dc0 	call	430dc <__sfmoreglue>
   43354:	88800015 	stw	r2,0(r17)
   43358:	103fe21e 	bne	r2,zero,432e4 <__sfp+0x74>
   4335c:	00800304 	movi	r2,12
   43360:	90800015 	stw	r2,0(r18)
   43364:	0005883a 	mov	r2,zero
   43368:	003fee06 	br	43324 <__sfp+0xb4>

0004336c <__sfp_lock_acquire>:
   4336c:	f800283a 	ret

00043370 <__sfp_lock_release>:
   43370:	f800283a 	ret

00043374 <__sinit_lock_acquire>:
   43374:	f800283a 	ret

00043378 <__sinit_lock_release>:
   43378:	f800283a 	ret

0004337c <__fp_lock_all>:
   4337c:	00800174 	movhi	r2,5
   43380:	10a40204 	addi	r2,r2,-28664
   43384:	11000017 	ldw	r4,0(r2)
   43388:	01400134 	movhi	r5,4
   4338c:	294c3004 	addi	r5,r5,12480
   43390:	00437b81 	jmpi	437b8 <_fwalk>

00043394 <__fp_unlock_all>:
   43394:	00800174 	movhi	r2,5
   43398:	10a40204 	addi	r2,r2,-28664
   4339c:	11000017 	ldw	r4,0(r2)
   433a0:	01400134 	movhi	r5,4
   433a4:	294c3204 	addi	r5,r5,12488
   433a8:	00437b81 	jmpi	437b8 <_fwalk>

000433ac <_malloc_trim_r>:
   433ac:	defffb04 	addi	sp,sp,-20
   433b0:	dcc00315 	stw	r19,12(sp)
   433b4:	dc800215 	stw	r18,8(sp)
   433b8:	dc400115 	stw	r17,4(sp)
   433bc:	dc000015 	stw	r16,0(sp)
   433c0:	2827883a 	mov	r19,r5
   433c4:	dfc00415 	stw	ra,16(sp)
   433c8:	04400134 	movhi	r17,4
   433cc:	8c5e7d04 	addi	r17,r17,31220
   433d0:	2021883a 	mov	r16,r4
   433d4:	00446640 	call	44664 <__malloc_lock>
   433d8:	88800217 	ldw	r2,8(r17)
   433dc:	14800117 	ldw	r18,4(r2)
   433e0:	00bfff04 	movi	r2,-4
   433e4:	90a4703a 	and	r18,r18,r2
   433e8:	9083fbc4 	addi	r2,r18,4079
   433ec:	14e7c83a 	sub	r19,r2,r19
   433f0:	9826d33a 	srli	r19,r19,12
   433f4:	0083ffc4 	movi	r2,4095
   433f8:	9cffffc4 	addi	r19,r19,-1
   433fc:	9826933a 	slli	r19,r19,12
   43400:	14c0060e 	bge	r2,r19,4341c <_malloc_trim_r+0x70>
   43404:	8009883a 	mov	r4,r16
   43408:	000b883a 	mov	r5,zero
   4340c:	0042cd00 	call	42cd0 <_sbrk_r>
   43410:	88c00217 	ldw	r3,8(r17)
   43414:	1c87883a 	add	r3,r3,r18
   43418:	10c00a26 	beq	r2,r3,43444 <_malloc_trim_r+0x98>
   4341c:	8009883a 	mov	r4,r16
   43420:	00446840 	call	44684 <__malloc_unlock>
   43424:	0005883a 	mov	r2,zero
   43428:	dfc00417 	ldw	ra,16(sp)
   4342c:	dcc00317 	ldw	r19,12(sp)
   43430:	dc800217 	ldw	r18,8(sp)
   43434:	dc400117 	ldw	r17,4(sp)
   43438:	dc000017 	ldw	r16,0(sp)
   4343c:	dec00504 	addi	sp,sp,20
   43440:	f800283a 	ret
   43444:	8009883a 	mov	r4,r16
   43448:	04cbc83a 	sub	r5,zero,r19
   4344c:	0042cd00 	call	42cd0 <_sbrk_r>
   43450:	00ffffc4 	movi	r3,-1
   43454:	10c01326 	beq	r2,r3,434a4 <_malloc_trim_r+0xf8>
   43458:	00800174 	movhi	r2,5
   4345c:	10acb404 	addi	r2,r2,-19760
   43460:	11000017 	ldw	r4,0(r2)
   43464:	88c00217 	ldw	r3,8(r17)
   43468:	94e5c83a 	sub	r18,r18,r19
   4346c:	94800054 	ori	r18,r18,1
   43470:	24e7c83a 	sub	r19,r4,r19
   43474:	1c800115 	stw	r18,4(r3)
   43478:	8009883a 	mov	r4,r16
   4347c:	14c00015 	stw	r19,0(r2)
   43480:	00446840 	call	44684 <__malloc_unlock>
   43484:	00800044 	movi	r2,1
   43488:	dfc00417 	ldw	ra,16(sp)
   4348c:	dcc00317 	ldw	r19,12(sp)
   43490:	dc800217 	ldw	r18,8(sp)
   43494:	dc400117 	ldw	r17,4(sp)
   43498:	dc000017 	ldw	r16,0(sp)
   4349c:	dec00504 	addi	sp,sp,20
   434a0:	f800283a 	ret
   434a4:	8009883a 	mov	r4,r16
   434a8:	000b883a 	mov	r5,zero
   434ac:	0042cd00 	call	42cd0 <_sbrk_r>
   434b0:	88c00217 	ldw	r3,8(r17)
   434b4:	014003c4 	movi	r5,15
   434b8:	10c9c83a 	sub	r4,r2,r3
   434bc:	293fd70e 	bge	r5,r4,4341c <_malloc_trim_r+0x70>
   434c0:	01400174 	movhi	r5,5
   434c4:	29640304 	addi	r5,r5,-28660
   434c8:	29400017 	ldw	r5,0(r5)
   434cc:	21000054 	ori	r4,r4,1
   434d0:	19000115 	stw	r4,4(r3)
   434d4:	1145c83a 	sub	r2,r2,r5
   434d8:	01400174 	movhi	r5,5
   434dc:	296cb404 	addi	r5,r5,-19760
   434e0:	28800015 	stw	r2,0(r5)
   434e4:	003fcd06 	br	4341c <_malloc_trim_r+0x70>

000434e8 <_free_r>:
   434e8:	defffd04 	addi	sp,sp,-12
   434ec:	dc400115 	stw	r17,4(sp)
   434f0:	dc000015 	stw	r16,0(sp)
   434f4:	dfc00215 	stw	ra,8(sp)
   434f8:	2821883a 	mov	r16,r5
   434fc:	2023883a 	mov	r17,r4
   43500:	28004b26 	beq	r5,zero,43630 <_free_r+0x148>
   43504:	00446640 	call	44664 <__malloc_lock>
   43508:	823fff17 	ldw	r8,-4(r16)
   4350c:	00bfff84 	movi	r2,-2
   43510:	81bffe04 	addi	r6,r16,-8
   43514:	4084703a 	and	r2,r8,r2
   43518:	3087883a 	add	r3,r6,r2
   4351c:	01400134 	movhi	r5,4
   43520:	295e7d04 	addi	r5,r5,31220
   43524:	1a400117 	ldw	r9,4(r3)
   43528:	29000217 	ldw	r4,8(r5)
   4352c:	01ffff04 	movi	r7,-4
   43530:	49ce703a 	and	r7,r9,r7
   43534:	20c06526 	beq	r4,r3,436cc <_free_r+0x1e4>
   43538:	19c00115 	stw	r7,4(r3)
   4353c:	4200004c 	andi	r8,r8,1
   43540:	40003026 	beq	r8,zero,43604 <_free_r+0x11c>
   43544:	0009883a 	mov	r4,zero
   43548:	19d1883a 	add	r8,r3,r7
   4354c:	42000117 	ldw	r8,4(r8)
   43550:	4200004c 	andi	r8,r8,1
   43554:	4000061e 	bne	r8,zero,43570 <_free_r+0x88>
   43558:	11c5883a 	add	r2,r2,r7
   4355c:	19c00217 	ldw	r7,8(r3)
   43560:	20004e26 	beq	r4,zero,4369c <_free_r+0x1b4>
   43564:	18c00317 	ldw	r3,12(r3)
   43568:	38c00315 	stw	r3,12(r7)
   4356c:	19c00215 	stw	r7,8(r3)
   43570:	11c00054 	ori	r7,r2,1
   43574:	3087883a 	add	r3,r6,r2
   43578:	31c00115 	stw	r7,4(r6)
   4357c:	18800015 	stw	r2,0(r3)
   43580:	20001a1e 	bne	r4,zero,435ec <_free_r+0x104>
   43584:	00c07fc4 	movi	r3,511
   43588:	18802e2e 	bgeu	r3,r2,43644 <_free_r+0x15c>
   4358c:	1006d27a 	srli	r3,r2,9
   43590:	01000104 	movi	r4,4
   43594:	20c06636 	bltu	r4,r3,43730 <_free_r+0x248>
   43598:	1008d1ba 	srli	r4,r2,6
   4359c:	21000e04 	addi	r4,r4,56
   435a0:	210f883a 	add	r7,r4,r4
   435a4:	39cf883a 	add	r7,r7,r7
   435a8:	39cf883a 	add	r7,r7,r7
   435ac:	29cf883a 	add	r7,r5,r7
   435b0:	38c00217 	ldw	r3,8(r7)
   435b4:	01400134 	movhi	r5,4
   435b8:	295e7d04 	addi	r5,r5,31220
   435bc:	19c06126 	beq	r3,r7,43744 <_free_r+0x25c>
   435c0:	013fff04 	movi	r4,-4
   435c4:	19400117 	ldw	r5,4(r3)
   435c8:	290a703a 	and	r5,r5,r4
   435cc:	1140022e 	bgeu	r2,r5,435d8 <_free_r+0xf0>
   435d0:	18c00217 	ldw	r3,8(r3)
   435d4:	38fffb1e 	bne	r7,r3,435c4 <_free_r+0xdc>
   435d8:	18800317 	ldw	r2,12(r3)
   435dc:	30800315 	stw	r2,12(r6)
   435e0:	30c00215 	stw	r3,8(r6)
   435e4:	11800215 	stw	r6,8(r2)
   435e8:	19800315 	stw	r6,12(r3)
   435ec:	8809883a 	mov	r4,r17
   435f0:	dfc00217 	ldw	ra,8(sp)
   435f4:	dc400117 	ldw	r17,4(sp)
   435f8:	dc000017 	ldw	r16,0(sp)
   435fc:	dec00304 	addi	sp,sp,12
   43600:	00446841 	jmpi	44684 <__malloc_unlock>
   43604:	813ffe17 	ldw	r4,-8(r16)
   43608:	2a400204 	addi	r9,r5,8
   4360c:	310dc83a 	sub	r6,r6,r4
   43610:	32000217 	ldw	r8,8(r6)
   43614:	1105883a 	add	r2,r2,r4
   43618:	42404326 	beq	r8,r9,43728 <_free_r+0x240>
   4361c:	32400317 	ldw	r9,12(r6)
   43620:	0009883a 	mov	r4,zero
   43624:	42400315 	stw	r9,12(r8)
   43628:	4a000215 	stw	r8,8(r9)
   4362c:	003fc606 	br	43548 <_free_r+0x60>
   43630:	dfc00217 	ldw	ra,8(sp)
   43634:	dc400117 	ldw	r17,4(sp)
   43638:	dc000017 	ldw	r16,0(sp)
   4363c:	dec00304 	addi	sp,sp,12
   43640:	f800283a 	ret
   43644:	1004d0fa 	srli	r2,r2,3
   43648:	02000044 	movi	r8,1
   4364c:	29c00117 	ldw	r7,4(r5)
   43650:	1087883a 	add	r3,r2,r2
   43654:	18c7883a 	add	r3,r3,r3
   43658:	1005d0ba 	srai	r2,r2,2
   4365c:	18c7883a 	add	r3,r3,r3
   43660:	28c7883a 	add	r3,r5,r3
   43664:	19000217 	ldw	r4,8(r3)
   43668:	4084983a 	sll	r2,r8,r2
   4366c:	30c00315 	stw	r3,12(r6)
   43670:	31000215 	stw	r4,8(r6)
   43674:	11c4b03a 	or	r2,r2,r7
   43678:	21800315 	stw	r6,12(r4)
   4367c:	8809883a 	mov	r4,r17
   43680:	28800115 	stw	r2,4(r5)
   43684:	19800215 	stw	r6,8(r3)
   43688:	dfc00217 	ldw	ra,8(sp)
   4368c:	dc400117 	ldw	r17,4(sp)
   43690:	dc000017 	ldw	r16,0(sp)
   43694:	dec00304 	addi	sp,sp,12
   43698:	00446841 	jmpi	44684 <__malloc_unlock>
   4369c:	02000134 	movhi	r8,4
   436a0:	421e7f04 	addi	r8,r8,31228
   436a4:	3a3faf1e 	bne	r7,r8,43564 <_free_r+0x7c>
   436a8:	29800515 	stw	r6,20(r5)
   436ac:	29800415 	stw	r6,16(r5)
   436b0:	11000054 	ori	r4,r2,1
   436b4:	3087883a 	add	r3,r6,r2
   436b8:	31c00315 	stw	r7,12(r6)
   436bc:	31c00215 	stw	r7,8(r6)
   436c0:	31000115 	stw	r4,4(r6)
   436c4:	18800015 	stw	r2,0(r3)
   436c8:	003fc806 	br	435ec <_free_r+0x104>
   436cc:	4200004c 	andi	r8,r8,1
   436d0:	3885883a 	add	r2,r7,r2
   436d4:	4000071e 	bne	r8,zero,436f4 <_free_r+0x20c>
   436d8:	81fffe17 	ldw	r7,-8(r16)
   436dc:	31cdc83a 	sub	r6,r6,r7
   436e0:	30c00317 	ldw	r3,12(r6)
   436e4:	31000217 	ldw	r4,8(r6)
   436e8:	11c5883a 	add	r2,r2,r7
   436ec:	20c00315 	stw	r3,12(r4)
   436f0:	19000215 	stw	r4,8(r3)
   436f4:	00c00174 	movhi	r3,5
   436f8:	18e40404 	addi	r3,r3,-28656
   436fc:	18c00017 	ldw	r3,0(r3)
   43700:	11000054 	ori	r4,r2,1
   43704:	31000115 	stw	r4,4(r6)
   43708:	29800215 	stw	r6,8(r5)
   4370c:	10ffb736 	bltu	r2,r3,435ec <_free_r+0x104>
   43710:	00800174 	movhi	r2,5
   43714:	10acac04 	addi	r2,r2,-19792
   43718:	11400017 	ldw	r5,0(r2)
   4371c:	8809883a 	mov	r4,r17
   43720:	00433ac0 	call	433ac <_malloc_trim_r>
   43724:	003fb106 	br	435ec <_free_r+0x104>
   43728:	01000044 	movi	r4,1
   4372c:	003f8606 	br	43548 <_free_r+0x60>
   43730:	01000504 	movi	r4,20
   43734:	20c00b36 	bltu	r4,r3,43764 <_free_r+0x27c>
   43738:	190016c4 	addi	r4,r3,91
   4373c:	210f883a 	add	r7,r4,r4
   43740:	003f9806 	br	435a4 <_free_r+0xbc>
   43744:	2009d0ba 	srai	r4,r4,2
   43748:	00800044 	movi	r2,1
   4374c:	29c00117 	ldw	r7,4(r5)
   43750:	1108983a 	sll	r4,r2,r4
   43754:	1805883a 	mov	r2,r3
   43758:	21c8b03a 	or	r4,r4,r7
   4375c:	29000115 	stw	r4,4(r5)
   43760:	003f9e06 	br	435dc <_free_r+0xf4>
   43764:	01001504 	movi	r4,84
   43768:	20c00436 	bltu	r4,r3,4377c <_free_r+0x294>
   4376c:	1008d33a 	srli	r4,r2,12
   43770:	21001b84 	addi	r4,r4,110
   43774:	210f883a 	add	r7,r4,r4
   43778:	003f8a06 	br	435a4 <_free_r+0xbc>
   4377c:	01005504 	movi	r4,340
   43780:	20c00436 	bltu	r4,r3,43794 <_free_r+0x2ac>
   43784:	1008d3fa 	srli	r4,r2,15
   43788:	21001dc4 	addi	r4,r4,119
   4378c:	210f883a 	add	r7,r4,r4
   43790:	003f8406 	br	435a4 <_free_r+0xbc>
   43794:	01015504 	movi	r4,1364
   43798:	20c00436 	bltu	r4,r3,437ac <_free_r+0x2c4>
   4379c:	1008d4ba 	srli	r4,r2,18
   437a0:	21001f04 	addi	r4,r4,124
   437a4:	210f883a 	add	r7,r4,r4
   437a8:	003f7e06 	br	435a4 <_free_r+0xbc>
   437ac:	01c03f04 	movi	r7,252
   437b0:	01001f84 	movi	r4,126
   437b4:	003f7b06 	br	435a4 <_free_r+0xbc>

000437b8 <_fwalk>:
   437b8:	defff904 	addi	sp,sp,-28
   437bc:	dcc00315 	stw	r19,12(sp)
   437c0:	24c0b804 	addi	r19,r4,736
   437c4:	dd400515 	stw	r21,20(sp)
   437c8:	dd000415 	stw	r20,16(sp)
   437cc:	dfc00615 	stw	ra,24(sp)
   437d0:	dc800215 	stw	r18,8(sp)
   437d4:	dc400115 	stw	r17,4(sp)
   437d8:	dc000015 	stw	r16,0(sp)
   437dc:	282b883a 	mov	r21,r5
   437e0:	0029883a 	mov	r20,zero
   437e4:	004336c0 	call	4336c <__sfp_lock_acquire>
   437e8:	98001226 	beq	r19,zero,43834 <_fwalk+0x7c>
   437ec:	04bfffc4 	movi	r18,-1
   437f0:	9c400117 	ldw	r17,4(r19)
   437f4:	9c000217 	ldw	r16,8(r19)
   437f8:	8c7fffc4 	addi	r17,r17,-1
   437fc:	88000b16 	blt	r17,zero,4382c <_fwalk+0x74>
   43800:	84000304 	addi	r16,r16,12
   43804:	80c0000f 	ldh	r3,0(r16)
   43808:	8c7fffc4 	addi	r17,r17,-1
   4380c:	813ffd04 	addi	r4,r16,-12
   43810:	18000426 	beq	r3,zero,43824 <_fwalk+0x6c>
   43814:	80c0008f 	ldh	r3,2(r16)
   43818:	1c800226 	beq	r3,r18,43824 <_fwalk+0x6c>
   4381c:	a83ee83a 	callr	r21
   43820:	a0a8b03a 	or	r20,r20,r2
   43824:	84001704 	addi	r16,r16,92
   43828:	8cbff61e 	bne	r17,r18,43804 <_fwalk+0x4c>
   4382c:	9cc00017 	ldw	r19,0(r19)
   43830:	983fef1e 	bne	r19,zero,437f0 <_fwalk+0x38>
   43834:	00433700 	call	43370 <__sfp_lock_release>
   43838:	a005883a 	mov	r2,r20
   4383c:	dfc00617 	ldw	ra,24(sp)
   43840:	dd400517 	ldw	r21,20(sp)
   43844:	dd000417 	ldw	r20,16(sp)
   43848:	dcc00317 	ldw	r19,12(sp)
   4384c:	dc800217 	ldw	r18,8(sp)
   43850:	dc400117 	ldw	r17,4(sp)
   43854:	dc000017 	ldw	r16,0(sp)
   43858:	dec00704 	addi	sp,sp,28
   4385c:	f800283a 	ret

00043860 <_fwalk_reent>:
   43860:	defff804 	addi	sp,sp,-32
   43864:	dcc00315 	stw	r19,12(sp)
   43868:	24c0b804 	addi	r19,r4,736
   4386c:	dd800615 	stw	r22,24(sp)
   43870:	dd400515 	stw	r21,20(sp)
   43874:	dd000415 	stw	r20,16(sp)
   43878:	dfc00715 	stw	ra,28(sp)
   4387c:	dc800215 	stw	r18,8(sp)
   43880:	dc400115 	stw	r17,4(sp)
   43884:	dc000015 	stw	r16,0(sp)
   43888:	2029883a 	mov	r20,r4
   4388c:	282b883a 	mov	r21,r5
   43890:	002d883a 	mov	r22,zero
   43894:	004336c0 	call	4336c <__sfp_lock_acquire>
   43898:	98001326 	beq	r19,zero,438e8 <_fwalk_reent+0x88>
   4389c:	04bfffc4 	movi	r18,-1
   438a0:	9c400117 	ldw	r17,4(r19)
   438a4:	9c000217 	ldw	r16,8(r19)
   438a8:	8c7fffc4 	addi	r17,r17,-1
   438ac:	88000c16 	blt	r17,zero,438e0 <_fwalk_reent+0x80>
   438b0:	84000304 	addi	r16,r16,12
   438b4:	80c0000f 	ldh	r3,0(r16)
   438b8:	8c7fffc4 	addi	r17,r17,-1
   438bc:	817ffd04 	addi	r5,r16,-12
   438c0:	18000526 	beq	r3,zero,438d8 <_fwalk_reent+0x78>
   438c4:	80c0008f 	ldh	r3,2(r16)
   438c8:	a009883a 	mov	r4,r20
   438cc:	1c800226 	beq	r3,r18,438d8 <_fwalk_reent+0x78>
   438d0:	a83ee83a 	callr	r21
   438d4:	b0acb03a 	or	r22,r22,r2
   438d8:	84001704 	addi	r16,r16,92
   438dc:	8cbff51e 	bne	r17,r18,438b4 <_fwalk_reent+0x54>
   438e0:	9cc00017 	ldw	r19,0(r19)
   438e4:	983fee1e 	bne	r19,zero,438a0 <_fwalk_reent+0x40>
   438e8:	00433700 	call	43370 <__sfp_lock_release>
   438ec:	b005883a 	mov	r2,r22
   438f0:	dfc00717 	ldw	ra,28(sp)
   438f4:	dd800617 	ldw	r22,24(sp)
   438f8:	dd400517 	ldw	r21,20(sp)
   438fc:	dd000417 	ldw	r20,16(sp)
   43900:	dcc00317 	ldw	r19,12(sp)
   43904:	dc800217 	ldw	r18,8(sp)
   43908:	dc400117 	ldw	r17,4(sp)
   4390c:	dc000017 	ldw	r16,0(sp)
   43910:	dec00804 	addi	sp,sp,32
   43914:	f800283a 	ret

00043918 <__smakebuf_r>:
   43918:	2880030b 	ldhu	r2,12(r5)
   4391c:	deffed04 	addi	sp,sp,-76
   43920:	dc401015 	stw	r17,64(sp)
   43924:	10c0008c 	andi	r3,r2,2
   43928:	18ffffcc 	andi	r3,r3,65535
   4392c:	18e0001c 	xori	r3,r3,32768
   43930:	dc000f15 	stw	r16,60(sp)
   43934:	dfc01215 	stw	ra,72(sp)
   43938:	dc801115 	stw	r18,68(sp)
   4393c:	18e00004 	addi	r3,r3,-32768
   43940:	2821883a 	mov	r16,r5
   43944:	2023883a 	mov	r17,r4
   43948:	1800381e 	bne	r3,zero,43a2c <__smakebuf_r+0x114>
   4394c:	2940038f 	ldh	r5,14(r5)
   43950:	28002d16 	blt	r5,zero,43a08 <__smakebuf_r+0xf0>
   43954:	d80d883a 	mov	r6,sp
   43958:	0043efc0 	call	43efc <_fstat_r>
   4395c:	10002916 	blt	r2,zero,43a04 <__smakebuf_r+0xec>
   43960:	d8800117 	ldw	r2,4(sp)
   43964:	00e00014 	movui	r3,32768
   43968:	10bc000c 	andi	r2,r2,61440
   4396c:	10c03c26 	beq	r2,r3,43a60 <__smakebuf_r+0x148>
   43970:	80c0030b 	ldhu	r3,12(r16)
   43974:	18c20014 	ori	r3,r3,2048
   43978:	80c0030d 	sth	r3,12(r16)
   4397c:	00c80004 	movi	r3,8192
   43980:	10c00c1e 	bne	r2,r3,439b4 <__smakebuf_r+0x9c>
   43984:	8140038f 	ldh	r5,14(r16)
   43988:	8809883a 	mov	r4,r17
   4398c:	0043f640 	call	43f64 <_isatty_r>
   43990:	10000826 	beq	r2,zero,439b4 <__smakebuf_r+0x9c>
   43994:	80c0030b 	ldhu	r3,12(r16)
   43998:	808010c4 	addi	r2,r16,67
   4399c:	80800015 	stw	r2,0(r16)
   439a0:	18c00054 	ori	r3,r3,1
   439a4:	80800415 	stw	r2,16(r16)
   439a8:	00800044 	movi	r2,1
   439ac:	80c0030d 	sth	r3,12(r16)
   439b0:	80800515 	stw	r2,20(r16)
   439b4:	04810004 	movi	r18,1024
   439b8:	8809883a 	mov	r4,r17
   439bc:	900b883a 	mov	r5,r18
   439c0:	0041b8c0 	call	41b8c <_malloc_r>
   439c4:	10003026 	beq	r2,zero,43a88 <__smakebuf_r+0x170>
   439c8:	80c0030b 	ldhu	r3,12(r16)
   439cc:	01000134 	movhi	r4,4
   439d0:	210c3404 	addi	r4,r4,12496
   439d4:	89000f15 	stw	r4,60(r17)
   439d8:	18c02014 	ori	r3,r3,128
   439dc:	80c0030d 	sth	r3,12(r16)
   439e0:	80800015 	stw	r2,0(r16)
   439e4:	80800415 	stw	r2,16(r16)
   439e8:	84800515 	stw	r18,20(r16)
   439ec:	dfc01217 	ldw	ra,72(sp)
   439f0:	dc801117 	ldw	r18,68(sp)
   439f4:	dc401017 	ldw	r17,64(sp)
   439f8:	dc000f17 	ldw	r16,60(sp)
   439fc:	dec01304 	addi	sp,sp,76
   43a00:	f800283a 	ret
   43a04:	8080030b 	ldhu	r2,12(r16)
   43a08:	10c0200c 	andi	r3,r2,128
   43a0c:	18ffffcc 	andi	r3,r3,65535
   43a10:	18e0001c 	xori	r3,r3,32768
   43a14:	18e00004 	addi	r3,r3,-32768
   43a18:	18000f1e 	bne	r3,zero,43a58 <__smakebuf_r+0x140>
   43a1c:	04810004 	movi	r18,1024
   43a20:	10820014 	ori	r2,r2,2048
   43a24:	8080030d 	sth	r2,12(r16)
   43a28:	003fe306 	br	439b8 <__smakebuf_r+0xa0>
   43a2c:	288010c4 	addi	r2,r5,67
   43a30:	28800015 	stw	r2,0(r5)
   43a34:	28800415 	stw	r2,16(r5)
   43a38:	00800044 	movi	r2,1
   43a3c:	28800515 	stw	r2,20(r5)
   43a40:	dfc01217 	ldw	ra,72(sp)
   43a44:	dc801117 	ldw	r18,68(sp)
   43a48:	dc401017 	ldw	r17,64(sp)
   43a4c:	dc000f17 	ldw	r16,60(sp)
   43a50:	dec01304 	addi	sp,sp,76
   43a54:	f800283a 	ret
   43a58:	04801004 	movi	r18,64
   43a5c:	003ff006 	br	43a20 <__smakebuf_r+0x108>
   43a60:	81000a17 	ldw	r4,40(r16)
   43a64:	00c00134 	movhi	r3,4
   43a68:	18cf1e04 	addi	r3,r3,15480
   43a6c:	20ffc01e 	bne	r4,r3,43970 <__smakebuf_r+0x58>
   43a70:	8080030b 	ldhu	r2,12(r16)
   43a74:	00c10004 	movi	r3,1024
   43a78:	80c01315 	stw	r3,76(r16)
   43a7c:	10c4b03a 	or	r2,r2,r3
   43a80:	8080030d 	sth	r2,12(r16)
   43a84:	003fcb06 	br	439b4 <__smakebuf_r+0x9c>
   43a88:	8080030b 	ldhu	r2,12(r16)
   43a8c:	10c0800c 	andi	r3,r2,512
   43a90:	18ffffcc 	andi	r3,r3,65535
   43a94:	18e0001c 	xori	r3,r3,32768
   43a98:	18e00004 	addi	r3,r3,-32768
   43a9c:	183fd31e 	bne	r3,zero,439ec <__smakebuf_r+0xd4>
   43aa0:	10800094 	ori	r2,r2,2
   43aa4:	80c010c4 	addi	r3,r16,67
   43aa8:	8080030d 	sth	r2,12(r16)
   43aac:	00800044 	movi	r2,1
   43ab0:	80c00015 	stw	r3,0(r16)
   43ab4:	80c00415 	stw	r3,16(r16)
   43ab8:	80800515 	stw	r2,20(r16)
   43abc:	003fcb06 	br	439ec <__smakebuf_r+0xd4>

00043ac0 <memset>:
   43ac0:	00c000c4 	movi	r3,3
   43ac4:	2005883a 	mov	r2,r4
   43ac8:	29403fcc 	andi	r5,r5,255
   43acc:	19802d2e 	bgeu	r3,r6,43b84 <memset+0xc4>
   43ad0:	20c6703a 	and	r3,r4,r3
   43ad4:	18002e1e 	bne	r3,zero,43b90 <memset+0xd0>
   43ad8:	2806923a 	slli	r3,r5,8
   43adc:	010003c4 	movi	r4,15
   43ae0:	3011883a 	mov	r8,r6
   43ae4:	1946b03a 	or	r3,r3,r5
   43ae8:	180e943a 	slli	r7,r3,16
   43aec:	38ceb03a 	or	r7,r7,r3
   43af0:	1007883a 	mov	r3,r2
   43af4:	21800f2e 	bgeu	r4,r6,43b34 <memset+0x74>
   43af8:	19c00015 	stw	r7,0(r3)
   43afc:	19c00115 	stw	r7,4(r3)
   43b00:	19c00215 	stw	r7,8(r3)
   43b04:	19c00315 	stw	r7,12(r3)
   43b08:	423ffc04 	addi	r8,r8,-16
   43b0c:	18c00404 	addi	r3,r3,16
   43b10:	223ff936 	bltu	r4,r8,43af8 <memset+0x38>
   43b14:	30fffc04 	addi	r3,r6,-16
   43b18:	1806d13a 	srli	r3,r3,4
   43b1c:	318003cc 	andi	r6,r6,15
   43b20:	010000c4 	movi	r4,3
   43b24:	18c00044 	addi	r3,r3,1
   43b28:	1806913a 	slli	r3,r3,4
   43b2c:	10c7883a 	add	r3,r2,r3
   43b30:	21800e2e 	bgeu	r4,r6,43b6c <memset+0xac>
   43b34:	1813883a 	mov	r9,r3
   43b38:	3011883a 	mov	r8,r6
   43b3c:	010000c4 	movi	r4,3
   43b40:	49c00015 	stw	r7,0(r9)
   43b44:	423fff04 	addi	r8,r8,-4
   43b48:	4a400104 	addi	r9,r9,4
   43b4c:	223ffc36 	bltu	r4,r8,43b40 <memset+0x80>
   43b50:	313fff04 	addi	r4,r6,-4
   43b54:	2008d0ba 	srli	r4,r4,2
   43b58:	318000cc 	andi	r6,r6,3
   43b5c:	21000044 	addi	r4,r4,1
   43b60:	2109883a 	add	r4,r4,r4
   43b64:	2109883a 	add	r4,r4,r4
   43b68:	1907883a 	add	r3,r3,r4
   43b6c:	30000a26 	beq	r6,zero,43b98 <memset+0xd8>
   43b70:	198d883a 	add	r6,r3,r6
   43b74:	19400005 	stb	r5,0(r3)
   43b78:	18c00044 	addi	r3,r3,1
   43b7c:	19bffd1e 	bne	r3,r6,43b74 <memset+0xb4>
   43b80:	f800283a 	ret
   43b84:	2007883a 	mov	r3,r4
   43b88:	303ff91e 	bne	r6,zero,43b70 <memset+0xb0>
   43b8c:	00000206 	br	43b98 <memset+0xd8>
   43b90:	2007883a 	mov	r3,r4
   43b94:	003ff606 	br	43b70 <memset+0xb0>
   43b98:	f800283a 	ret

00043b9c <__sread>:
   43b9c:	defffe04 	addi	sp,sp,-8
   43ba0:	dc000015 	stw	r16,0(sp)
   43ba4:	2821883a 	mov	r16,r5
   43ba8:	2940038f 	ldh	r5,14(r5)
   43bac:	dfc00115 	stw	ra,4(sp)
   43bb0:	00440340 	call	44034 <_read_r>
   43bb4:	10000716 	blt	r2,zero,43bd4 <__sread+0x38>
   43bb8:	80c01417 	ldw	r3,80(r16)
   43bbc:	1887883a 	add	r3,r3,r2
   43bc0:	80c01415 	stw	r3,80(r16)
   43bc4:	dfc00117 	ldw	ra,4(sp)
   43bc8:	dc000017 	ldw	r16,0(sp)
   43bcc:	dec00204 	addi	sp,sp,8
   43bd0:	f800283a 	ret
   43bd4:	80c0030b 	ldhu	r3,12(r16)
   43bd8:	18fbffcc 	andi	r3,r3,61439
   43bdc:	80c0030d 	sth	r3,12(r16)
   43be0:	dfc00117 	ldw	ra,4(sp)
   43be4:	dc000017 	ldw	r16,0(sp)
   43be8:	dec00204 	addi	sp,sp,8
   43bec:	f800283a 	ret

00043bf0 <__swrite>:
   43bf0:	2880030b 	ldhu	r2,12(r5)
   43bf4:	defffb04 	addi	sp,sp,-20
   43bf8:	dcc00315 	stw	r19,12(sp)
   43bfc:	10c0400c 	andi	r3,r2,256
   43c00:	18ffffcc 	andi	r3,r3,65535
   43c04:	18e0001c 	xori	r3,r3,32768
   43c08:	dc800215 	stw	r18,8(sp)
   43c0c:	dc400115 	stw	r17,4(sp)
   43c10:	dc000015 	stw	r16,0(sp)
   43c14:	dfc00415 	stw	ra,16(sp)
   43c18:	18e00004 	addi	r3,r3,-32768
   43c1c:	2821883a 	mov	r16,r5
   43c20:	2027883a 	mov	r19,r4
   43c24:	3025883a 	mov	r18,r6
   43c28:	3823883a 	mov	r17,r7
   43c2c:	18000526 	beq	r3,zero,43c44 <__swrite+0x54>
   43c30:	2940038f 	ldh	r5,14(r5)
   43c34:	000d883a 	mov	r6,zero
   43c38:	01c00084 	movi	r7,2
   43c3c:	0043fc80 	call	43fc8 <_lseek_r>
   43c40:	8080030b 	ldhu	r2,12(r16)
   43c44:	8140038f 	ldh	r5,14(r16)
   43c48:	10bbffcc 	andi	r2,r2,61439
   43c4c:	9809883a 	mov	r4,r19
   43c50:	900d883a 	mov	r6,r18
   43c54:	880f883a 	mov	r7,r17
   43c58:	8080030d 	sth	r2,12(r16)
   43c5c:	dfc00417 	ldw	ra,16(sp)
   43c60:	dcc00317 	ldw	r19,12(sp)
   43c64:	dc800217 	ldw	r18,8(sp)
   43c68:	dc400117 	ldw	r17,4(sp)
   43c6c:	dc000017 	ldw	r16,0(sp)
   43c70:	dec00504 	addi	sp,sp,20
   43c74:	0043cdc1 	jmpi	43cdc <_write_r>

00043c78 <__sseek>:
   43c78:	defffe04 	addi	sp,sp,-8
   43c7c:	dc000015 	stw	r16,0(sp)
   43c80:	2821883a 	mov	r16,r5
   43c84:	2940038f 	ldh	r5,14(r5)
   43c88:	dfc00115 	stw	ra,4(sp)
   43c8c:	0043fc80 	call	43fc8 <_lseek_r>
   43c90:	00ffffc4 	movi	r3,-1
   43c94:	10c00826 	beq	r2,r3,43cb8 <__sseek+0x40>
   43c98:	80c0030b 	ldhu	r3,12(r16)
   43c9c:	80801415 	stw	r2,80(r16)
   43ca0:	18c40014 	ori	r3,r3,4096
   43ca4:	80c0030d 	sth	r3,12(r16)
   43ca8:	dfc00117 	ldw	ra,4(sp)
   43cac:	dc000017 	ldw	r16,0(sp)
   43cb0:	dec00204 	addi	sp,sp,8
   43cb4:	f800283a 	ret
   43cb8:	80c0030b 	ldhu	r3,12(r16)
   43cbc:	18fbffcc 	andi	r3,r3,61439
   43cc0:	80c0030d 	sth	r3,12(r16)
   43cc4:	dfc00117 	ldw	ra,4(sp)
   43cc8:	dc000017 	ldw	r16,0(sp)
   43ccc:	dec00204 	addi	sp,sp,8
   43cd0:	f800283a 	ret

00043cd4 <__sclose>:
   43cd4:	2940038f 	ldh	r5,14(r5)
   43cd8:	0043d481 	jmpi	43d48 <_close_r>

00043cdc <_write_r>:
   43cdc:	defffd04 	addi	sp,sp,-12
   43ce0:	dc400115 	stw	r17,4(sp)
   43ce4:	dc000015 	stw	r16,0(sp)
   43ce8:	2023883a 	mov	r17,r4
   43cec:	04000174 	movhi	r16,5
   43cf0:	842cad04 	addi	r16,r16,-19788
   43cf4:	2809883a 	mov	r4,r5
   43cf8:	300b883a 	mov	r5,r6
   43cfc:	380d883a 	mov	r6,r7
   43d00:	dfc00215 	stw	ra,8(sp)
   43d04:	80000015 	stw	zero,0(r16)
   43d08:	00449680 	call	44968 <write>
   43d0c:	00ffffc4 	movi	r3,-1
   43d10:	10c00526 	beq	r2,r3,43d28 <_write_r+0x4c>
   43d14:	dfc00217 	ldw	ra,8(sp)
   43d18:	dc400117 	ldw	r17,4(sp)
   43d1c:	dc000017 	ldw	r16,0(sp)
   43d20:	dec00304 	addi	sp,sp,12
   43d24:	f800283a 	ret
   43d28:	80c00017 	ldw	r3,0(r16)
   43d2c:	183ff926 	beq	r3,zero,43d14 <_write_r+0x38>
   43d30:	88c00015 	stw	r3,0(r17)
   43d34:	dfc00217 	ldw	ra,8(sp)
   43d38:	dc400117 	ldw	r17,4(sp)
   43d3c:	dc000017 	ldw	r16,0(sp)
   43d40:	dec00304 	addi	sp,sp,12
   43d44:	f800283a 	ret

00043d48 <_close_r>:
   43d48:	defffd04 	addi	sp,sp,-12
   43d4c:	dc400115 	stw	r17,4(sp)
   43d50:	dc000015 	stw	r16,0(sp)
   43d54:	2023883a 	mov	r17,r4
   43d58:	04000174 	movhi	r16,5
   43d5c:	842cad04 	addi	r16,r16,-19788
   43d60:	2809883a 	mov	r4,r5
   43d64:	dfc00215 	stw	ra,8(sp)
   43d68:	80000015 	stw	zero,0(r16)
   43d6c:	00440f00 	call	440f0 <close>
   43d70:	00ffffc4 	movi	r3,-1
   43d74:	10c00526 	beq	r2,r3,43d8c <_close_r+0x44>
   43d78:	dfc00217 	ldw	ra,8(sp)
   43d7c:	dc400117 	ldw	r17,4(sp)
   43d80:	dc000017 	ldw	r16,0(sp)
   43d84:	dec00304 	addi	sp,sp,12
   43d88:	f800283a 	ret
   43d8c:	80c00017 	ldw	r3,0(r16)
   43d90:	183ff926 	beq	r3,zero,43d78 <_close_r+0x30>
   43d94:	88c00015 	stw	r3,0(r17)
   43d98:	dfc00217 	ldw	ra,8(sp)
   43d9c:	dc400117 	ldw	r17,4(sp)
   43da0:	dc000017 	ldw	r16,0(sp)
   43da4:	dec00304 	addi	sp,sp,12
   43da8:	f800283a 	ret

00043dac <_fclose_r>:
   43dac:	defffc04 	addi	sp,sp,-16
   43db0:	dc400115 	stw	r17,4(sp)
   43db4:	dc000015 	stw	r16,0(sp)
   43db8:	dfc00315 	stw	ra,12(sp)
   43dbc:	dc800215 	stw	r18,8(sp)
   43dc0:	2821883a 	mov	r16,r5
   43dc4:	2023883a 	mov	r17,r4
   43dc8:	28003426 	beq	r5,zero,43e9c <_fclose_r+0xf0>
   43dcc:	004336c0 	call	4336c <__sfp_lock_acquire>
   43dd0:	88000226 	beq	r17,zero,43ddc <_fclose_r+0x30>
   43dd4:	88800e17 	ldw	r2,56(r17)
   43dd8:	10003826 	beq	r2,zero,43ebc <_fclose_r+0x110>
   43ddc:	8080030f 	ldh	r2,12(r16)
   43de0:	10002526 	beq	r2,zero,43e78 <_fclose_r+0xcc>
   43de4:	8809883a 	mov	r4,r17
   43de8:	800b883a 	mov	r5,r16
   43dec:	0042ea80 	call	42ea8 <_fflush_r>
   43df0:	1025883a 	mov	r18,r2
   43df4:	80800b17 	ldw	r2,44(r16)
   43df8:	10000426 	beq	r2,zero,43e0c <_fclose_r+0x60>
   43dfc:	81400717 	ldw	r5,28(r16)
   43e00:	8809883a 	mov	r4,r17
   43e04:	103ee83a 	callr	r2
   43e08:	10003516 	blt	r2,zero,43ee0 <_fclose_r+0x134>
   43e0c:	8080030b 	ldhu	r2,12(r16)
   43e10:	1080200c 	andi	r2,r2,128
   43e14:	10bfffcc 	andi	r2,r2,65535
   43e18:	10a0001c 	xori	r2,r2,32768
   43e1c:	10a00004 	addi	r2,r2,-32768
   43e20:	10002b1e 	bne	r2,zero,43ed0 <_fclose_r+0x124>
   43e24:	81400c17 	ldw	r5,48(r16)
   43e28:	28000526 	beq	r5,zero,43e40 <_fclose_r+0x94>
   43e2c:	80801004 	addi	r2,r16,64
   43e30:	28800226 	beq	r5,r2,43e3c <_fclose_r+0x90>
   43e34:	8809883a 	mov	r4,r17
   43e38:	00434e80 	call	434e8 <_free_r>
   43e3c:	80000c15 	stw	zero,48(r16)
   43e40:	81401117 	ldw	r5,68(r16)
   43e44:	28000326 	beq	r5,zero,43e54 <_fclose_r+0xa8>
   43e48:	8809883a 	mov	r4,r17
   43e4c:	00434e80 	call	434e8 <_free_r>
   43e50:	80001115 	stw	zero,68(r16)
   43e54:	8000030d 	sth	zero,12(r16)
   43e58:	00433700 	call	43370 <__sfp_lock_release>
   43e5c:	9005883a 	mov	r2,r18
   43e60:	dfc00317 	ldw	ra,12(sp)
   43e64:	dc800217 	ldw	r18,8(sp)
   43e68:	dc400117 	ldw	r17,4(sp)
   43e6c:	dc000017 	ldw	r16,0(sp)
   43e70:	dec00404 	addi	sp,sp,16
   43e74:	f800283a 	ret
   43e78:	00433700 	call	43370 <__sfp_lock_release>
   43e7c:	0025883a 	mov	r18,zero
   43e80:	9005883a 	mov	r2,r18
   43e84:	dfc00317 	ldw	ra,12(sp)
   43e88:	dc800217 	ldw	r18,8(sp)
   43e8c:	dc400117 	ldw	r17,4(sp)
   43e90:	dc000017 	ldw	r16,0(sp)
   43e94:	dec00404 	addi	sp,sp,16
   43e98:	f800283a 	ret
   43e9c:	0025883a 	mov	r18,zero
   43ea0:	9005883a 	mov	r2,r18
   43ea4:	dfc00317 	ldw	ra,12(sp)
   43ea8:	dc800217 	ldw	r18,8(sp)
   43eac:	dc400117 	ldw	r17,4(sp)
   43eb0:	dc000017 	ldw	r16,0(sp)
   43eb4:	dec00404 	addi	sp,sp,16
   43eb8:	f800283a 	ret
   43ebc:	8809883a 	mov	r4,r17
   43ec0:	00431640 	call	43164 <__sinit>
   43ec4:	8080030f 	ldh	r2,12(r16)
   43ec8:	103fc61e 	bne	r2,zero,43de4 <_fclose_r+0x38>
   43ecc:	003fea06 	br	43e78 <_fclose_r+0xcc>
   43ed0:	81400417 	ldw	r5,16(r16)
   43ed4:	8809883a 	mov	r4,r17
   43ed8:	00434e80 	call	434e8 <_free_r>
   43edc:	003fd106 	br	43e24 <_fclose_r+0x78>
   43ee0:	04bfffc4 	movi	r18,-1
   43ee4:	003fc906 	br	43e0c <_fclose_r+0x60>

00043ee8 <fclose>:
   43ee8:	00800174 	movhi	r2,5
   43eec:	10a40204 	addi	r2,r2,-28664
   43ef0:	200b883a 	mov	r5,r4
   43ef4:	11000017 	ldw	r4,0(r2)
   43ef8:	0043dac1 	jmpi	43dac <_fclose_r>

00043efc <_fstat_r>:
   43efc:	defffd04 	addi	sp,sp,-12
   43f00:	dc400115 	stw	r17,4(sp)
   43f04:	dc000015 	stw	r16,0(sp)
   43f08:	2023883a 	mov	r17,r4
   43f0c:	04000174 	movhi	r16,5
   43f10:	842cad04 	addi	r16,r16,-19788
   43f14:	2809883a 	mov	r4,r5
   43f18:	300b883a 	mov	r5,r6
   43f1c:	dfc00215 	stw	ra,8(sp)
   43f20:	80000015 	stw	zero,0(r16)
   43f24:	00442380 	call	44238 <fstat>
   43f28:	00ffffc4 	movi	r3,-1
   43f2c:	10c00526 	beq	r2,r3,43f44 <_fstat_r+0x48>
   43f30:	dfc00217 	ldw	ra,8(sp)
   43f34:	dc400117 	ldw	r17,4(sp)
   43f38:	dc000017 	ldw	r16,0(sp)
   43f3c:	dec00304 	addi	sp,sp,12
   43f40:	f800283a 	ret
   43f44:	80c00017 	ldw	r3,0(r16)
   43f48:	183ff926 	beq	r3,zero,43f30 <_fstat_r+0x34>
   43f4c:	88c00015 	stw	r3,0(r17)
   43f50:	dfc00217 	ldw	ra,8(sp)
   43f54:	dc400117 	ldw	r17,4(sp)
   43f58:	dc000017 	ldw	r16,0(sp)
   43f5c:	dec00304 	addi	sp,sp,12
   43f60:	f800283a 	ret

00043f64 <_isatty_r>:
   43f64:	defffd04 	addi	sp,sp,-12
   43f68:	dc400115 	stw	r17,4(sp)
   43f6c:	dc000015 	stw	r16,0(sp)
   43f70:	2023883a 	mov	r17,r4
   43f74:	04000174 	movhi	r16,5
   43f78:	842cad04 	addi	r16,r16,-19788
   43f7c:	2809883a 	mov	r4,r5
   43f80:	dfc00215 	stw	ra,8(sp)
   43f84:	80000015 	stw	zero,0(r16)
   43f88:	00443380 	call	44338 <isatty>
   43f8c:	00ffffc4 	movi	r3,-1
   43f90:	10c00526 	beq	r2,r3,43fa8 <_isatty_r+0x44>
   43f94:	dfc00217 	ldw	ra,8(sp)
   43f98:	dc400117 	ldw	r17,4(sp)
   43f9c:	dc000017 	ldw	r16,0(sp)
   43fa0:	dec00304 	addi	sp,sp,12
   43fa4:	f800283a 	ret
   43fa8:	80c00017 	ldw	r3,0(r16)
   43fac:	183ff926 	beq	r3,zero,43f94 <_isatty_r+0x30>
   43fb0:	88c00015 	stw	r3,0(r17)
   43fb4:	dfc00217 	ldw	ra,8(sp)
   43fb8:	dc400117 	ldw	r17,4(sp)
   43fbc:	dc000017 	ldw	r16,0(sp)
   43fc0:	dec00304 	addi	sp,sp,12
   43fc4:	f800283a 	ret

00043fc8 <_lseek_r>:
   43fc8:	defffd04 	addi	sp,sp,-12
   43fcc:	dc400115 	stw	r17,4(sp)
   43fd0:	dc000015 	stw	r16,0(sp)
   43fd4:	2023883a 	mov	r17,r4
   43fd8:	04000174 	movhi	r16,5
   43fdc:	842cad04 	addi	r16,r16,-19788
   43fe0:	2809883a 	mov	r4,r5
   43fe4:	300b883a 	mov	r5,r6
   43fe8:	380d883a 	mov	r6,r7
   43fec:	dfc00215 	stw	ra,8(sp)
   43ff0:	80000015 	stw	zero,0(r16)
   43ff4:	00445180 	call	44518 <lseek>
   43ff8:	00ffffc4 	movi	r3,-1
   43ffc:	10c00526 	beq	r2,r3,44014 <_lseek_r+0x4c>
   44000:	dfc00217 	ldw	ra,8(sp)
   44004:	dc400117 	ldw	r17,4(sp)
   44008:	dc000017 	ldw	r16,0(sp)
   4400c:	dec00304 	addi	sp,sp,12
   44010:	f800283a 	ret
   44014:	80c00017 	ldw	r3,0(r16)
   44018:	183ff926 	beq	r3,zero,44000 <_lseek_r+0x38>
   4401c:	88c00015 	stw	r3,0(r17)
   44020:	dfc00217 	ldw	ra,8(sp)
   44024:	dc400117 	ldw	r17,4(sp)
   44028:	dc000017 	ldw	r16,0(sp)
   4402c:	dec00304 	addi	sp,sp,12
   44030:	f800283a 	ret

00044034 <_read_r>:
   44034:	defffd04 	addi	sp,sp,-12
   44038:	dc400115 	stw	r17,4(sp)
   4403c:	dc000015 	stw	r16,0(sp)
   44040:	2023883a 	mov	r17,r4
   44044:	04000174 	movhi	r16,5
   44048:	842cad04 	addi	r16,r16,-19788
   4404c:	2809883a 	mov	r4,r5
   44050:	300b883a 	mov	r5,r6
   44054:	380d883a 	mov	r6,r7
   44058:	dfc00215 	stw	ra,8(sp)
   4405c:	80000015 	stw	zero,0(r16)
   44060:	00446f40 	call	446f4 <read>
   44064:	00ffffc4 	movi	r3,-1
   44068:	10c00526 	beq	r2,r3,44080 <_read_r+0x4c>
   4406c:	dfc00217 	ldw	ra,8(sp)
   44070:	dc400117 	ldw	r17,4(sp)
   44074:	dc000017 	ldw	r16,0(sp)
   44078:	dec00304 	addi	sp,sp,12
   4407c:	f800283a 	ret
   44080:	80c00017 	ldw	r3,0(r16)
   44084:	183ff926 	beq	r3,zero,4406c <_read_r+0x38>
   44088:	88c00015 	stw	r3,0(r17)
   4408c:	dfc00217 	ldw	ra,8(sp)
   44090:	dc400117 	ldw	r17,4(sp)
   44094:	dc000017 	ldw	r16,0(sp)
   44098:	dec00304 	addi	sp,sp,12
   4409c:	f800283a 	ret

000440a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   440a0:	defffe04 	addi	sp,sp,-8
   440a4:	dfc00115 	stw	ra,4(sp)
   440a8:	df000015 	stw	fp,0(sp)
   440ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   440b0:	00800174 	movhi	r2,5
   440b4:	10a40a04 	addi	r2,r2,-28632
   440b8:	10800017 	ldw	r2,0(r2)
   440bc:	10000526 	beq	r2,zero,440d4 <alt_get_errno+0x34>
   440c0:	00800174 	movhi	r2,5
   440c4:	10a40a04 	addi	r2,r2,-28632
   440c8:	10800017 	ldw	r2,0(r2)
   440cc:	103ee83a 	callr	r2
   440d0:	00000206 	br	440dc <alt_get_errno+0x3c>
   440d4:	00800174 	movhi	r2,5
   440d8:	10acad04 	addi	r2,r2,-19788
}
   440dc:	e037883a 	mov	sp,fp
   440e0:	dfc00117 	ldw	ra,4(sp)
   440e4:	df000017 	ldw	fp,0(sp)
   440e8:	dec00204 	addi	sp,sp,8
   440ec:	f800283a 	ret

000440f0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   440f0:	defffb04 	addi	sp,sp,-20
   440f4:	dfc00415 	stw	ra,16(sp)
   440f8:	df000315 	stw	fp,12(sp)
   440fc:	df000304 	addi	fp,sp,12
   44100:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   44104:	e0bfff17 	ldw	r2,-4(fp)
   44108:	10000716 	blt	r2,zero,44128 <close+0x38>
   4410c:	e13fff17 	ldw	r4,-4(fp)
   44110:	01400304 	movi	r5,12
   44114:	004155c0 	call	4155c <__mulsi3>
   44118:	00c00134 	movhi	r3,4
   4411c:	18df8904 	addi	r3,r3,32292
   44120:	10c5883a 	add	r2,r2,r3
   44124:	00000106 	br	4412c <close+0x3c>
   44128:	0005883a 	mov	r2,zero
   4412c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   44130:	e0bffd17 	ldw	r2,-12(fp)
   44134:	10001826 	beq	r2,zero,44198 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   44138:	e0bffd17 	ldw	r2,-12(fp)
   4413c:	10800017 	ldw	r2,0(r2)
   44140:	10800417 	ldw	r2,16(r2)
   44144:	10000626 	beq	r2,zero,44160 <close+0x70>
   44148:	e0bffd17 	ldw	r2,-12(fp)
   4414c:	10800017 	ldw	r2,0(r2)
   44150:	10800417 	ldw	r2,16(r2)
   44154:	e13ffd17 	ldw	r4,-12(fp)
   44158:	103ee83a 	callr	r2
   4415c:	00000106 	br	44164 <close+0x74>
   44160:	0005883a 	mov	r2,zero
   44164:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   44168:	e13fff17 	ldw	r4,-4(fp)
   4416c:	00447e80 	call	447e8 <alt_release_fd>
    if (rval < 0)
   44170:	e0bffe17 	ldw	r2,-8(fp)
   44174:	1000060e 	bge	r2,zero,44190 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   44178:	00440a00 	call	440a0 <alt_get_errno>
   4417c:	e0fffe17 	ldw	r3,-8(fp)
   44180:	00c7c83a 	sub	r3,zero,r3
   44184:	10c00015 	stw	r3,0(r2)
      return -1;
   44188:	00bfffc4 	movi	r2,-1
   4418c:	00000606 	br	441a8 <close+0xb8>
    }
    return 0;
   44190:	0005883a 	mov	r2,zero
   44194:	00000406 	br	441a8 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   44198:	00440a00 	call	440a0 <alt_get_errno>
   4419c:	00c01444 	movi	r3,81
   441a0:	10c00015 	stw	r3,0(r2)
    return -1;
   441a4:	00bfffc4 	movi	r2,-1
  }
}
   441a8:	e037883a 	mov	sp,fp
   441ac:	dfc00117 	ldw	ra,4(sp)
   441b0:	df000017 	ldw	fp,0(sp)
   441b4:	dec00204 	addi	sp,sp,8
   441b8:	f800283a 	ret

000441bc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   441bc:	defffc04 	addi	sp,sp,-16
   441c0:	df000315 	stw	fp,12(sp)
   441c4:	df000304 	addi	fp,sp,12
   441c8:	e13ffd15 	stw	r4,-12(fp)
   441cc:	e17ffe15 	stw	r5,-8(fp)
   441d0:	e1bfff15 	stw	r6,-4(fp)
  return len;
   441d4:	e0bfff17 	ldw	r2,-4(fp)
}
   441d8:	e037883a 	mov	sp,fp
   441dc:	df000017 	ldw	fp,0(sp)
   441e0:	dec00104 	addi	sp,sp,4
   441e4:	f800283a 	ret

000441e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   441e8:	defffe04 	addi	sp,sp,-8
   441ec:	dfc00115 	stw	ra,4(sp)
   441f0:	df000015 	stw	fp,0(sp)
   441f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   441f8:	00800174 	movhi	r2,5
   441fc:	10a40a04 	addi	r2,r2,-28632
   44200:	10800017 	ldw	r2,0(r2)
   44204:	10000526 	beq	r2,zero,4421c <alt_get_errno+0x34>
   44208:	00800174 	movhi	r2,5
   4420c:	10a40a04 	addi	r2,r2,-28632
   44210:	10800017 	ldw	r2,0(r2)
   44214:	103ee83a 	callr	r2
   44218:	00000206 	br	44224 <alt_get_errno+0x3c>
   4421c:	00800174 	movhi	r2,5
   44220:	10acad04 	addi	r2,r2,-19788
}
   44224:	e037883a 	mov	sp,fp
   44228:	dfc00117 	ldw	ra,4(sp)
   4422c:	df000017 	ldw	fp,0(sp)
   44230:	dec00204 	addi	sp,sp,8
   44234:	f800283a 	ret

00044238 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   44238:	defffb04 	addi	sp,sp,-20
   4423c:	dfc00415 	stw	ra,16(sp)
   44240:	df000315 	stw	fp,12(sp)
   44244:	df000304 	addi	fp,sp,12
   44248:	e13ffe15 	stw	r4,-8(fp)
   4424c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   44250:	e0bffe17 	ldw	r2,-8(fp)
   44254:	10000716 	blt	r2,zero,44274 <fstat+0x3c>
   44258:	e13ffe17 	ldw	r4,-8(fp)
   4425c:	01400304 	movi	r5,12
   44260:	004155c0 	call	4155c <__mulsi3>
   44264:	00c00134 	movhi	r3,4
   44268:	18df8904 	addi	r3,r3,32292
   4426c:	10c5883a 	add	r2,r2,r3
   44270:	00000106 	br	44278 <fstat+0x40>
   44274:	0005883a 	mov	r2,zero
   44278:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   4427c:	e0bffd17 	ldw	r2,-12(fp)
   44280:	10001026 	beq	r2,zero,442c4 <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   44284:	e0bffd17 	ldw	r2,-12(fp)
   44288:	10800017 	ldw	r2,0(r2)
   4428c:	10800817 	ldw	r2,32(r2)
   44290:	10000726 	beq	r2,zero,442b0 <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
   44294:	e0bffd17 	ldw	r2,-12(fp)
   44298:	10800017 	ldw	r2,0(r2)
   4429c:	10800817 	ldw	r2,32(r2)
   442a0:	e13ffd17 	ldw	r4,-12(fp)
   442a4:	e17fff17 	ldw	r5,-4(fp)
   442a8:	103ee83a 	callr	r2
   442ac:	00000906 	br	442d4 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   442b0:	e0bfff17 	ldw	r2,-4(fp)
   442b4:	00c80004 	movi	r3,8192
   442b8:	10c00115 	stw	r3,4(r2)
      return 0;
   442bc:	0005883a 	mov	r2,zero
   442c0:	00000406 	br	442d4 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   442c4:	00441e80 	call	441e8 <alt_get_errno>
   442c8:	00c01444 	movi	r3,81
   442cc:	10c00015 	stw	r3,0(r2)
    return -1;
   442d0:	00bfffc4 	movi	r2,-1
  }
}
   442d4:	e037883a 	mov	sp,fp
   442d8:	dfc00117 	ldw	ra,4(sp)
   442dc:	df000017 	ldw	fp,0(sp)
   442e0:	dec00204 	addi	sp,sp,8
   442e4:	f800283a 	ret

000442e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   442e8:	defffe04 	addi	sp,sp,-8
   442ec:	dfc00115 	stw	ra,4(sp)
   442f0:	df000015 	stw	fp,0(sp)
   442f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   442f8:	00800174 	movhi	r2,5
   442fc:	10a40a04 	addi	r2,r2,-28632
   44300:	10800017 	ldw	r2,0(r2)
   44304:	10000526 	beq	r2,zero,4431c <alt_get_errno+0x34>
   44308:	00800174 	movhi	r2,5
   4430c:	10a40a04 	addi	r2,r2,-28632
   44310:	10800017 	ldw	r2,0(r2)
   44314:	103ee83a 	callr	r2
   44318:	00000206 	br	44324 <alt_get_errno+0x3c>
   4431c:	00800174 	movhi	r2,5
   44320:	10acad04 	addi	r2,r2,-19788
}
   44324:	e037883a 	mov	sp,fp
   44328:	dfc00117 	ldw	ra,4(sp)
   4432c:	df000017 	ldw	fp,0(sp)
   44330:	dec00204 	addi	sp,sp,8
   44334:	f800283a 	ret

00044338 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   44338:	deffed04 	addi	sp,sp,-76
   4433c:	dfc01215 	stw	ra,72(sp)
   44340:	df001115 	stw	fp,68(sp)
   44344:	df001104 	addi	fp,sp,68
   44348:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4434c:	e0bfff17 	ldw	r2,-4(fp)
   44350:	10000716 	blt	r2,zero,44370 <isatty+0x38>
   44354:	e13fff17 	ldw	r4,-4(fp)
   44358:	01400304 	movi	r5,12
   4435c:	004155c0 	call	4155c <__mulsi3>
   44360:	00c00134 	movhi	r3,4
   44364:	18df8904 	addi	r3,r3,32292
   44368:	10c5883a 	add	r2,r2,r3
   4436c:	00000106 	br	44374 <isatty+0x3c>
   44370:	0005883a 	mov	r2,zero
   44374:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   44378:	e0bfef17 	ldw	r2,-68(fp)
   4437c:	10000e26 	beq	r2,zero,443b8 <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   44380:	e0bfef17 	ldw	r2,-68(fp)
   44384:	10800017 	ldw	r2,0(r2)
   44388:	10800817 	ldw	r2,32(r2)
   4438c:	1000021e 	bne	r2,zero,44398 <isatty+0x60>
    {
      return 1;
   44390:	00800044 	movi	r2,1
   44394:	00000c06 	br	443c8 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   44398:	e0bff004 	addi	r2,fp,-64
   4439c:	e13fff17 	ldw	r4,-4(fp)
   443a0:	100b883a 	mov	r5,r2
   443a4:	00442380 	call	44238 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   443a8:	e0bff117 	ldw	r2,-60(fp)
   443ac:	10880020 	cmpeqi	r2,r2,8192
   443b0:	10803fcc 	andi	r2,r2,255
   443b4:	00000406 	br	443c8 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   443b8:	00442e80 	call	442e8 <alt_get_errno>
   443bc:	00c01444 	movi	r3,81
   443c0:	10c00015 	stw	r3,0(r2)
    return 0;
   443c4:	0005883a 	mov	r2,zero
  }
}
   443c8:	e037883a 	mov	sp,fp
   443cc:	dfc00117 	ldw	ra,4(sp)
   443d0:	df000017 	ldw	fp,0(sp)
   443d4:	dec00204 	addi	sp,sp,8
   443d8:	f800283a 	ret

000443dc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   443dc:	defffc04 	addi	sp,sp,-16
   443e0:	df000315 	stw	fp,12(sp)
   443e4:	df000304 	addi	fp,sp,12
   443e8:	e13ffd15 	stw	r4,-12(fp)
   443ec:	e17ffe15 	stw	r5,-8(fp)
   443f0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   443f4:	e0fffe17 	ldw	r3,-8(fp)
   443f8:	e0bffd17 	ldw	r2,-12(fp)
   443fc:	18800e26 	beq	r3,r2,44438 <alt_load_section+0x5c>
  {
    while( to != end )
   44400:	00000a06 	br	4442c <alt_load_section+0x50>
    {
      *to++ = *from++;
   44404:	e0bffd17 	ldw	r2,-12(fp)
   44408:	10c00017 	ldw	r3,0(r2)
   4440c:	e0bffe17 	ldw	r2,-8(fp)
   44410:	10c00015 	stw	r3,0(r2)
   44414:	e0bffe17 	ldw	r2,-8(fp)
   44418:	10800104 	addi	r2,r2,4
   4441c:	e0bffe15 	stw	r2,-8(fp)
   44420:	e0bffd17 	ldw	r2,-12(fp)
   44424:	10800104 	addi	r2,r2,4
   44428:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   4442c:	e0fffe17 	ldw	r3,-8(fp)
   44430:	e0bfff17 	ldw	r2,-4(fp)
   44434:	18bff31e 	bne	r3,r2,44404 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   44438:	e037883a 	mov	sp,fp
   4443c:	df000017 	ldw	fp,0(sp)
   44440:	dec00104 	addi	sp,sp,4
   44444:	f800283a 	ret

00044448 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   44448:	defffe04 	addi	sp,sp,-8
   4444c:	dfc00115 	stw	ra,4(sp)
   44450:	df000015 	stw	fp,0(sp)
   44454:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   44458:	01000174 	movhi	r4,5
   4445c:	21240f04 	addi	r4,r4,-28612
   44460:	01400134 	movhi	r5,4
   44464:	295b7804 	addi	r5,r5,28128
   44468:	01800174 	movhi	r6,5
   4446c:	31a40f04 	addi	r6,r6,-28612
   44470:	00443dc0 	call	443dc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   44474:	01000134 	movhi	r4,4
   44478:	21000804 	addi	r4,r4,32
   4447c:	01400134 	movhi	r5,4
   44480:	29400804 	addi	r5,r5,32
   44484:	01800134 	movhi	r6,4
   44488:	31806e04 	addi	r6,r6,440
   4448c:	00443dc0 	call	443dc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   44490:	01000134 	movhi	r4,4
   44494:	211b5804 	addi	r4,r4,28000
   44498:	01400134 	movhi	r5,4
   4449c:	295b5804 	addi	r5,r5,28000
   444a0:	01800134 	movhi	r6,4
   444a4:	319b7804 	addi	r6,r6,28128
   444a8:	00443dc0 	call	443dc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   444ac:	0045cc00 	call	45cc0 <alt_dcache_flush_all>
  alt_icache_flush_all();
   444b0:	0045e840 	call	45e84 <alt_icache_flush_all>
}
   444b4:	e037883a 	mov	sp,fp
   444b8:	dfc00117 	ldw	ra,4(sp)
   444bc:	df000017 	ldw	fp,0(sp)
   444c0:	dec00204 	addi	sp,sp,8
   444c4:	f800283a 	ret

000444c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   444c8:	defffe04 	addi	sp,sp,-8
   444cc:	dfc00115 	stw	ra,4(sp)
   444d0:	df000015 	stw	fp,0(sp)
   444d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   444d8:	00800174 	movhi	r2,5
   444dc:	10a40a04 	addi	r2,r2,-28632
   444e0:	10800017 	ldw	r2,0(r2)
   444e4:	10000526 	beq	r2,zero,444fc <alt_get_errno+0x34>
   444e8:	00800174 	movhi	r2,5
   444ec:	10a40a04 	addi	r2,r2,-28632
   444f0:	10800017 	ldw	r2,0(r2)
   444f4:	103ee83a 	callr	r2
   444f8:	00000206 	br	44504 <alt_get_errno+0x3c>
   444fc:	00800174 	movhi	r2,5
   44500:	10acad04 	addi	r2,r2,-19788
}
   44504:	e037883a 	mov	sp,fp
   44508:	dfc00117 	ldw	ra,4(sp)
   4450c:	df000017 	ldw	fp,0(sp)
   44510:	dec00204 	addi	sp,sp,8
   44514:	f800283a 	ret

00044518 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   44518:	defff904 	addi	sp,sp,-28
   4451c:	dfc00615 	stw	ra,24(sp)
   44520:	df000515 	stw	fp,20(sp)
   44524:	df000504 	addi	fp,sp,20
   44528:	e13ffd15 	stw	r4,-12(fp)
   4452c:	e17ffe15 	stw	r5,-8(fp)
   44530:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   44534:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   44538:	e0bffd17 	ldw	r2,-12(fp)
   4453c:	10000716 	blt	r2,zero,4455c <lseek+0x44>
   44540:	e13ffd17 	ldw	r4,-12(fp)
   44544:	01400304 	movi	r5,12
   44548:	004155c0 	call	4155c <__mulsi3>
   4454c:	00c00134 	movhi	r3,4
   44550:	18df8904 	addi	r3,r3,32292
   44554:	10c5883a 	add	r2,r2,r3
   44558:	00000106 	br	44560 <lseek+0x48>
   4455c:	0005883a 	mov	r2,zero
   44560:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   44564:	e0bffc17 	ldw	r2,-16(fp)
   44568:	10001026 	beq	r2,zero,445ac <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   4456c:	e0bffc17 	ldw	r2,-16(fp)
   44570:	10800017 	ldw	r2,0(r2)
   44574:	10800717 	ldw	r2,28(r2)
   44578:	10000926 	beq	r2,zero,445a0 <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   4457c:	e0bffc17 	ldw	r2,-16(fp)
   44580:	10800017 	ldw	r2,0(r2)
   44584:	10800717 	ldw	r2,28(r2)
   44588:	e13ffc17 	ldw	r4,-16(fp)
   4458c:	e17ffe17 	ldw	r5,-8(fp)
   44590:	e1bfff17 	ldw	r6,-4(fp)
   44594:	103ee83a 	callr	r2
   44598:	e0bffb15 	stw	r2,-20(fp)
   4459c:	00000506 	br	445b4 <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   445a0:	00bfde84 	movi	r2,-134
   445a4:	e0bffb15 	stw	r2,-20(fp)
   445a8:	00000206 	br	445b4 <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
   445ac:	00bfebc4 	movi	r2,-81
   445b0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   445b4:	e0bffb17 	ldw	r2,-20(fp)
   445b8:	1000060e 	bge	r2,zero,445d4 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   445bc:	00444c80 	call	444c8 <alt_get_errno>
   445c0:	e0fffb17 	ldw	r3,-20(fp)
   445c4:	00c7c83a 	sub	r3,zero,r3
   445c8:	10c00015 	stw	r3,0(r2)
    rc = -1;
   445cc:	00bfffc4 	movi	r2,-1
   445d0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   445d4:	e0bffb17 	ldw	r2,-20(fp)
}
   445d8:	e037883a 	mov	sp,fp
   445dc:	dfc00117 	ldw	ra,4(sp)
   445e0:	df000017 	ldw	fp,0(sp)
   445e4:	dec00204 	addi	sp,sp,8
   445e8:	f800283a 	ret

000445ec <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   445ec:	defffd04 	addi	sp,sp,-12
   445f0:	dfc00215 	stw	ra,8(sp)
   445f4:	df000115 	stw	fp,4(sp)
   445f8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   445fc:	0009883a 	mov	r4,zero
   44600:	0044a900 	call	44a90 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   44604:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   44608:	0044ac40 	call	44ac4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   4460c:	01000134 	movhi	r4,4
   44610:	211b7004 	addi	r4,r4,28096
   44614:	01400134 	movhi	r5,4
   44618:	295b7004 	addi	r5,r5,28096
   4461c:	01800134 	movhi	r6,4
   44620:	319b7004 	addi	r6,r6,28096
   44624:	00462480 	call	46248 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   44628:	0045dcc0 	call	45dcc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   4462c:	01000134 	movhi	r4,4
   44630:	21178a04 	addi	r4,r4,24104
   44634:	004698c0 	call	4698c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   44638:	d128ad17 	ldw	r4,-23884(gp)
   4463c:	d0e8ae17 	ldw	r3,-23880(gp)
   44640:	d0a8af17 	ldw	r2,-23876(gp)
   44644:	180b883a 	mov	r5,r3
   44648:	100d883a 	mov	r6,r2
   4464c:	004144c0 	call	4144c <main>
   44650:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   44654:	01000044 	movi	r4,1
   44658:	00440f00 	call	440f0 <close>
  exit (result);
   4465c:	e13fff17 	ldw	r4,-4(fp)
   44660:	00469a00 	call	469a0 <exit>

00044664 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   44664:	defffe04 	addi	sp,sp,-8
   44668:	df000115 	stw	fp,4(sp)
   4466c:	df000104 	addi	fp,sp,4
   44670:	e13fff15 	stw	r4,-4(fp)
}
   44674:	e037883a 	mov	sp,fp
   44678:	df000017 	ldw	fp,0(sp)
   4467c:	dec00104 	addi	sp,sp,4
   44680:	f800283a 	ret

00044684 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   44684:	defffe04 	addi	sp,sp,-8
   44688:	df000115 	stw	fp,4(sp)
   4468c:	df000104 	addi	fp,sp,4
   44690:	e13fff15 	stw	r4,-4(fp)
}
   44694:	e037883a 	mov	sp,fp
   44698:	df000017 	ldw	fp,0(sp)
   4469c:	dec00104 	addi	sp,sp,4
   446a0:	f800283a 	ret

000446a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   446a4:	defffe04 	addi	sp,sp,-8
   446a8:	dfc00115 	stw	ra,4(sp)
   446ac:	df000015 	stw	fp,0(sp)
   446b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   446b4:	00800174 	movhi	r2,5
   446b8:	10a40a04 	addi	r2,r2,-28632
   446bc:	10800017 	ldw	r2,0(r2)
   446c0:	10000526 	beq	r2,zero,446d8 <alt_get_errno+0x34>
   446c4:	00800174 	movhi	r2,5
   446c8:	10a40a04 	addi	r2,r2,-28632
   446cc:	10800017 	ldw	r2,0(r2)
   446d0:	103ee83a 	callr	r2
   446d4:	00000206 	br	446e0 <alt_get_errno+0x3c>
   446d8:	00800174 	movhi	r2,5
   446dc:	10acad04 	addi	r2,r2,-19788
}
   446e0:	e037883a 	mov	sp,fp
   446e4:	dfc00117 	ldw	ra,4(sp)
   446e8:	df000017 	ldw	fp,0(sp)
   446ec:	dec00204 	addi	sp,sp,8
   446f0:	f800283a 	ret

000446f4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   446f4:	defff904 	addi	sp,sp,-28
   446f8:	dfc00615 	stw	ra,24(sp)
   446fc:	df000515 	stw	fp,20(sp)
   44700:	df000504 	addi	fp,sp,20
   44704:	e13ffd15 	stw	r4,-12(fp)
   44708:	e17ffe15 	stw	r5,-8(fp)
   4470c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   44710:	e0bffd17 	ldw	r2,-12(fp)
   44714:	10000716 	blt	r2,zero,44734 <read+0x40>
   44718:	e13ffd17 	ldw	r4,-12(fp)
   4471c:	01400304 	movi	r5,12
   44720:	004155c0 	call	4155c <__mulsi3>
   44724:	00c00134 	movhi	r3,4
   44728:	18df8904 	addi	r3,r3,32292
   4472c:	10c5883a 	add	r2,r2,r3
   44730:	00000106 	br	44738 <read+0x44>
   44734:	0005883a 	mov	r2,zero
   44738:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   4473c:	e0bffb17 	ldw	r2,-20(fp)
   44740:	10002026 	beq	r2,zero,447c4 <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   44744:	e0bffb17 	ldw	r2,-20(fp)
   44748:	10800217 	ldw	r2,8(r2)
   4474c:	108000cc 	andi	r2,r2,3
   44750:	10800060 	cmpeqi	r2,r2,1
   44754:	1000171e 	bne	r2,zero,447b4 <read+0xc0>
        (fd->dev->read))
   44758:	e0bffb17 	ldw	r2,-20(fp)
   4475c:	10800017 	ldw	r2,0(r2)
   44760:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   44764:	10001326 	beq	r2,zero,447b4 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   44768:	e0bffb17 	ldw	r2,-20(fp)
   4476c:	10800017 	ldw	r2,0(r2)
   44770:	10c00517 	ldw	r3,20(r2)
   44774:	e0bfff17 	ldw	r2,-4(fp)
   44778:	e13ffb17 	ldw	r4,-20(fp)
   4477c:	e17ffe17 	ldw	r5,-8(fp)
   44780:	100d883a 	mov	r6,r2
   44784:	183ee83a 	callr	r3
   44788:	e0bffc15 	stw	r2,-16(fp)
   4478c:	e0bffc17 	ldw	r2,-16(fp)
   44790:	1000060e 	bge	r2,zero,447ac <read+0xb8>
        {
          ALT_ERRNO = -rval;
   44794:	00446a40 	call	446a4 <alt_get_errno>
   44798:	e0fffc17 	ldw	r3,-16(fp)
   4479c:	00c7c83a 	sub	r3,zero,r3
   447a0:	10c00015 	stw	r3,0(r2)
          return -1;
   447a4:	00bfffc4 	movi	r2,-1
   447a8:	00000a06 	br	447d4 <read+0xe0>
        }
        return rval;
   447ac:	e0bffc17 	ldw	r2,-16(fp)
   447b0:	00000806 	br	447d4 <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   447b4:	00446a40 	call	446a4 <alt_get_errno>
   447b8:	00c00344 	movi	r3,13
   447bc:	10c00015 	stw	r3,0(r2)
   447c0:	00000306 	br	447d0 <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   447c4:	00446a40 	call	446a4 <alt_get_errno>
   447c8:	00c01444 	movi	r3,81
   447cc:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   447d0:	00bfffc4 	movi	r2,-1
}
   447d4:	e037883a 	mov	sp,fp
   447d8:	dfc00117 	ldw	ra,4(sp)
   447dc:	df000017 	ldw	fp,0(sp)
   447e0:	dec00204 	addi	sp,sp,8
   447e4:	f800283a 	ret

000447e8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   447e8:	defffc04 	addi	sp,sp,-16
   447ec:	dfc00315 	stw	ra,12(sp)
   447f0:	df000215 	stw	fp,8(sp)
   447f4:	dc000115 	stw	r16,4(sp)
   447f8:	df000104 	addi	fp,sp,4
   447fc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   44800:	e0bfff17 	ldw	r2,-4(fp)
   44804:	108000d0 	cmplti	r2,r2,3
   44808:	1000111e 	bne	r2,zero,44850 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   4480c:	04000134 	movhi	r16,4
   44810:	841f8904 	addi	r16,r16,32292
   44814:	e0bfff17 	ldw	r2,-4(fp)
   44818:	1009883a 	mov	r4,r2
   4481c:	01400304 	movi	r5,12
   44820:	004155c0 	call	4155c <__mulsi3>
   44824:	8085883a 	add	r2,r16,r2
   44828:	10800204 	addi	r2,r2,8
   4482c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   44830:	04000134 	movhi	r16,4
   44834:	841f8904 	addi	r16,r16,32292
   44838:	e0bfff17 	ldw	r2,-4(fp)
   4483c:	1009883a 	mov	r4,r2
   44840:	01400304 	movi	r5,12
   44844:	004155c0 	call	4155c <__mulsi3>
   44848:	8085883a 	add	r2,r16,r2
   4484c:	10000015 	stw	zero,0(r2)
  }
}
   44850:	e037883a 	mov	sp,fp
   44854:	dfc00217 	ldw	ra,8(sp)
   44858:	df000117 	ldw	fp,4(sp)
   4485c:	dc000017 	ldw	r16,0(sp)
   44860:	dec00304 	addi	sp,sp,12
   44864:	f800283a 	ret

00044868 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   44868:	defff904 	addi	sp,sp,-28
   4486c:	df000615 	stw	fp,24(sp)
   44870:	df000604 	addi	fp,sp,24
   44874:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44878:	0005303a 	rdctl	r2,status
   4487c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44880:	e0fffc17 	ldw	r3,-16(fp)
   44884:	00bfff84 	movi	r2,-2
   44888:	1884703a 	and	r2,r3,r2
   4488c:	1001703a 	wrctl	status,r2
  
  return context;
   44890:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   44894:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   44898:	d0a00a17 	ldw	r2,-32728(gp)
   4489c:	10c000c4 	addi	r3,r2,3
   448a0:	00bfff04 	movi	r2,-4
   448a4:	1884703a 	and	r2,r3,r2
   448a8:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   448ac:	d0e00a17 	ldw	r3,-32728(gp)
   448b0:	e0bfff17 	ldw	r2,-4(fp)
   448b4:	1885883a 	add	r2,r3,r2
   448b8:	00c00174 	movhi	r3,5
   448bc:	18dc0004 	addi	r3,r3,28672
   448c0:	1880062e 	bgeu	r3,r2,448dc <sbrk+0x74>
   448c4:	e0bffa17 	ldw	r2,-24(fp)
   448c8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   448cc:	e0bffd17 	ldw	r2,-12(fp)
   448d0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   448d4:	00bfffc4 	movi	r2,-1
   448d8:	00000b06 	br	44908 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   448dc:	d0a00a17 	ldw	r2,-32728(gp)
   448e0:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   448e4:	d0e00a17 	ldw	r3,-32728(gp)
   448e8:	e0bfff17 	ldw	r2,-4(fp)
   448ec:	1885883a 	add	r2,r3,r2
   448f0:	d0a00a15 	stw	r2,-32728(gp)
   448f4:	e0bffa17 	ldw	r2,-24(fp)
   448f8:	e0bffe15 	stw	r2,-8(fp)
   448fc:	e0bffe17 	ldw	r2,-8(fp)
   44900:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   44904:	e0bffb17 	ldw	r2,-20(fp)
} 
   44908:	e037883a 	mov	sp,fp
   4490c:	df000017 	ldw	fp,0(sp)
   44910:	dec00104 	addi	sp,sp,4
   44914:	f800283a 	ret

00044918 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   44918:	defffe04 	addi	sp,sp,-8
   4491c:	dfc00115 	stw	ra,4(sp)
   44920:	df000015 	stw	fp,0(sp)
   44924:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   44928:	00800174 	movhi	r2,5
   4492c:	10a40a04 	addi	r2,r2,-28632
   44930:	10800017 	ldw	r2,0(r2)
   44934:	10000526 	beq	r2,zero,4494c <alt_get_errno+0x34>
   44938:	00800174 	movhi	r2,5
   4493c:	10a40a04 	addi	r2,r2,-28632
   44940:	10800017 	ldw	r2,0(r2)
   44944:	103ee83a 	callr	r2
   44948:	00000206 	br	44954 <alt_get_errno+0x3c>
   4494c:	00800174 	movhi	r2,5
   44950:	10acad04 	addi	r2,r2,-19788
}
   44954:	e037883a 	mov	sp,fp
   44958:	dfc00117 	ldw	ra,4(sp)
   4495c:	df000017 	ldw	fp,0(sp)
   44960:	dec00204 	addi	sp,sp,8
   44964:	f800283a 	ret

00044968 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   44968:	defff904 	addi	sp,sp,-28
   4496c:	dfc00615 	stw	ra,24(sp)
   44970:	df000515 	stw	fp,20(sp)
   44974:	df000504 	addi	fp,sp,20
   44978:	e13ffd15 	stw	r4,-12(fp)
   4497c:	e17ffe15 	stw	r5,-8(fp)
   44980:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   44984:	e0bffd17 	ldw	r2,-12(fp)
   44988:	10000716 	blt	r2,zero,449a8 <write+0x40>
   4498c:	e13ffd17 	ldw	r4,-12(fp)
   44990:	01400304 	movi	r5,12
   44994:	004155c0 	call	4155c <__mulsi3>
   44998:	00c00134 	movhi	r3,4
   4499c:	18df8904 	addi	r3,r3,32292
   449a0:	10c5883a 	add	r2,r2,r3
   449a4:	00000106 	br	449ac <write+0x44>
   449a8:	0005883a 	mov	r2,zero
   449ac:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   449b0:	e0bffb17 	ldw	r2,-20(fp)
   449b4:	10001f26 	beq	r2,zero,44a34 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   449b8:	e0bffb17 	ldw	r2,-20(fp)
   449bc:	10800217 	ldw	r2,8(r2)
   449c0:	108000cc 	andi	r2,r2,3
   449c4:	10001726 	beq	r2,zero,44a24 <write+0xbc>
   449c8:	e0bffb17 	ldw	r2,-20(fp)
   449cc:	10800017 	ldw	r2,0(r2)
   449d0:	10800617 	ldw	r2,24(r2)
   449d4:	10001326 	beq	r2,zero,44a24 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   449d8:	e0bffb17 	ldw	r2,-20(fp)
   449dc:	10800017 	ldw	r2,0(r2)
   449e0:	10c00617 	ldw	r3,24(r2)
   449e4:	e0bfff17 	ldw	r2,-4(fp)
   449e8:	e13ffb17 	ldw	r4,-20(fp)
   449ec:	e17ffe17 	ldw	r5,-8(fp)
   449f0:	100d883a 	mov	r6,r2
   449f4:	183ee83a 	callr	r3
   449f8:	e0bffc15 	stw	r2,-16(fp)
   449fc:	e0bffc17 	ldw	r2,-16(fp)
   44a00:	1000060e 	bge	r2,zero,44a1c <write+0xb4>
      {
        ALT_ERRNO = -rval;
   44a04:	00449180 	call	44918 <alt_get_errno>
   44a08:	e0fffc17 	ldw	r3,-16(fp)
   44a0c:	00c7c83a 	sub	r3,zero,r3
   44a10:	10c00015 	stw	r3,0(r2)
        return -1;
   44a14:	00bfffc4 	movi	r2,-1
   44a18:	00000a06 	br	44a44 <write+0xdc>
      }
      return rval;
   44a1c:	e0bffc17 	ldw	r2,-16(fp)
   44a20:	00000806 	br	44a44 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
   44a24:	00449180 	call	44918 <alt_get_errno>
   44a28:	00c00344 	movi	r3,13
   44a2c:	10c00015 	stw	r3,0(r2)
   44a30:	00000306 	br	44a40 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   44a34:	00449180 	call	44918 <alt_get_errno>
   44a38:	00c01444 	movi	r3,81
   44a3c:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   44a40:	00bfffc4 	movi	r2,-1
}
   44a44:	e037883a 	mov	sp,fp
   44a48:	dfc00117 	ldw	ra,4(sp)
   44a4c:	df000017 	ldw	fp,0(sp)
   44a50:	dec00204 	addi	sp,sp,8
   44a54:	f800283a 	ret

00044a58 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   44a58:	defffd04 	addi	sp,sp,-12
   44a5c:	dfc00215 	stw	ra,8(sp)
   44a60:	df000115 	stw	fp,4(sp)
   44a64:	df000104 	addi	fp,sp,4
   44a68:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   44a6c:	e13fff17 	ldw	r4,-4(fp)
   44a70:	01400174 	movhi	r5,5
   44a74:	29640704 	addi	r5,r5,-28644
   44a78:	0045d2c0 	call	45d2c <alt_dev_llist_insert>
}
   44a7c:	e037883a 	mov	sp,fp
   44a80:	dfc00117 	ldw	ra,4(sp)
   44a84:	df000017 	ldw	fp,0(sp)
   44a88:	dec00204 	addi	sp,sp,8
   44a8c:	f800283a 	ret

00044a90 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   44a90:	defffd04 	addi	sp,sp,-12
   44a94:	dfc00215 	stw	ra,8(sp)
   44a98:	df000115 	stw	fp,4(sp)
   44a9c:	df000104 	addi	fp,sp,4
   44aa0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU5, cpu5);
   44aa4:	00466f40 	call	466f4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   44aa8:	00800044 	movi	r2,1
   44aac:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   44ab0:	e037883a 	mov	sp,fp
   44ab4:	dfc00117 	ldw	ra,4(sp)
   44ab8:	df000017 	ldw	fp,0(sp)
   44abc:	dec00204 	addi	sp,sp,8
   44ac0:	f800283a 	ret

00044ac4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   44ac4:	defffe04 	addi	sp,sp,-8
   44ac8:	dfc00115 	stw	ra,4(sp)
   44acc:	df000015 	stw	fp,0(sp)
   44ad0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER5, timer5);
   44ad4:	010000b4 	movhi	r4,2
   44ad8:	21041004 	addi	r4,r4,4160
   44adc:	000b883a 	mov	r5,zero
   44ae0:	01800044 	movi	r6,1
   44ae4:	01c0fa04 	movi	r7,1000
   44ae8:	0045af80 	call	45af8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_FIFO_INIT ( FIFO1TO5, fifo1to5);
   44aec:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO4TO5, fifo4to5);
   44af0:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO5TO6, fifo5to6);
   44af4:	0001883a 	nop
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART5, jtag_uart5);
   44af8:	01000134 	movhi	r4,4
   44afc:	211ff304 	addi	r4,r4,32716
   44b00:	000b883a 	mov	r5,zero
   44b04:	01800404 	movi	r6,16
   44b08:	00451840 	call	45184 <altera_avalon_jtag_uart_init>
   44b0c:	01000134 	movhi	r4,4
   44b10:	211fe904 	addi	r4,r4,32676
   44b14:	0044a580 	call	44a58 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   44b18:	0001883a 	nop
}
   44b1c:	e037883a 	mov	sp,fp
   44b20:	dfc00117 	ldw	ra,4(sp)
   44b24:	df000017 	ldw	fp,0(sp)
   44b28:	dec00204 	addi	sp,sp,8
   44b2c:	f800283a 	ret

00044b30 <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
   44b30:	defffa04 	addi	sp,sp,-24
   44b34:	dfc00515 	stw	ra,20(sp)
   44b38:	df000415 	stw	fp,16(sp)
   44b3c:	df000404 	addi	fp,sp,16
   44b40:	e13ffc15 	stw	r4,-16(fp)
   44b44:	e17ffd15 	stw	r5,-12(fp)
   44b48:	e1bffe15 	stw	r6,-8(fp)
   44b4c:	e1ffff15 	stw	r7,-4(fp)
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
   44b50:	e13ffc17 	ldw	r4,-16(fp)
   44b54:	01400fc4 	movi	r5,63
   44b58:	0044cfc0 	call	44cfc <altera_avalon_fifo_clear_event>
   44b5c:	10000226 	beq	r2,zero,44b68 <altera_avalon_fifo_init+0x38>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   44b60:	00bfffc4 	movi	r2,-1
   44b64:	00001306 	br	44bb4 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
   44b68:	e13ffc17 	ldw	r4,-16(fp)
   44b6c:	e17ffd17 	ldw	r5,-12(fp)
   44b70:	0044d580 	call	44d58 <altera_avalon_fifo_write_ienable>
   44b74:	10000226 	beq	r2,zero,44b80 <altera_avalon_fifo_init+0x50>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   44b78:	00bfff84 	movi	r2,-2
   44b7c:	00000d06 	br	44bb4 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
   44b80:	e13ffc17 	ldw	r4,-16(fp)
   44b84:	e17fff17 	ldw	r5,-4(fp)
   44b88:	0044db00 	call	44db0 <altera_avalon_fifo_write_almostfull>
   44b8c:	10000226 	beq	r2,zero,44b98 <altera_avalon_fifo_init+0x68>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   44b90:	00bfff44 	movi	r2,-3
   44b94:	00000706 	br	44bb4 <altera_avalon_fifo_init+0x84>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
   44b98:	e13ffc17 	ldw	r4,-16(fp)
   44b9c:	e17ffe17 	ldw	r5,-8(fp)
   44ba0:	0044e080 	call	44e08 <altera_avalon_fifo_write_almostempty>
   44ba4:	10000226 	beq	r2,zero,44bb0 <altera_avalon_fifo_init+0x80>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   44ba8:	00bfff44 	movi	r2,-3
   44bac:	00000106 	br	44bb4 <altera_avalon_fifo_init+0x84>
    }

    return ALTERA_AVALON_FIFO_OK;
   44bb0:	0005883a 	mov	r2,zero
}
   44bb4:	e037883a 	mov	sp,fp
   44bb8:	dfc00117 	ldw	ra,4(sp)
   44bbc:	df000017 	ldw	fp,0(sp)
   44bc0:	dec00204 	addi	sp,sp,8
   44bc4:	f800283a 	ret

00044bc8 <altera_avalon_fifo_read_status>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
   44bc8:	defffd04 	addi	sp,sp,-12
   44bcc:	df000215 	stw	fp,8(sp)
   44bd0:	df000204 	addi	fp,sp,8
   44bd4:	e13ffe15 	stw	r4,-8(fp)
   44bd8:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   44bdc:	e0bffe17 	ldw	r2,-8(fp)
   44be0:	10800104 	addi	r2,r2,4
   44be4:	10800037 	ldwio	r2,0(r2)
   44be8:	1007883a 	mov	r3,r2
   44bec:	e0bfff17 	ldw	r2,-4(fp)
   44bf0:	1884703a 	and	r2,r3,r2
}
   44bf4:	e037883a 	mov	sp,fp
   44bf8:	df000017 	ldw	fp,0(sp)
   44bfc:	dec00104 	addi	sp,sp,4
   44c00:	f800283a 	ret

00044c04 <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
   44c04:	defffd04 	addi	sp,sp,-12
   44c08:	df000215 	stw	fp,8(sp)
   44c0c:	df000204 	addi	fp,sp,8
   44c10:	e13ffe15 	stw	r4,-8(fp)
   44c14:	e17fff15 	stw	r5,-4(fp)
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
   44c18:	e0bffe17 	ldw	r2,-8(fp)
   44c1c:	10800304 	addi	r2,r2,12
   44c20:	10800037 	ldwio	r2,0(r2)
   44c24:	1007883a 	mov	r3,r2
   44c28:	e0bfff17 	ldw	r2,-4(fp)
   44c2c:	1884703a 	and	r2,r3,r2
}
   44c30:	e037883a 	mov	sp,fp
   44c34:	df000017 	ldw	fp,0(sp)
   44c38:	dec00104 	addi	sp,sp,4
   44c3c:	f800283a 	ret

00044c40 <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
   44c40:	defffe04 	addi	sp,sp,-8
   44c44:	df000115 	stw	fp,4(sp)
   44c48:	df000104 	addi	fp,sp,4
   44c4c:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
   44c50:	e0bfff17 	ldw	r2,-4(fp)
   44c54:	10800404 	addi	r2,r2,16
   44c58:	10800037 	ldwio	r2,0(r2)
}
   44c5c:	e037883a 	mov	sp,fp
   44c60:	df000017 	ldw	fp,0(sp)
   44c64:	dec00104 	addi	sp,sp,4
   44c68:	f800283a 	ret

00044c6c <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
   44c6c:	defffe04 	addi	sp,sp,-8
   44c70:	df000115 	stw	fp,4(sp)
   44c74:	df000104 	addi	fp,sp,4
   44c78:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
   44c7c:	e0bfff17 	ldw	r2,-4(fp)
   44c80:	10800504 	addi	r2,r2,20
   44c84:	10800037 	ldwio	r2,0(r2)
}
   44c88:	e037883a 	mov	sp,fp
   44c8c:	df000017 	ldw	fp,0(sp)
   44c90:	dec00104 	addi	sp,sp,4
   44c94:	f800283a 	ret

00044c98 <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
   44c98:	defffd04 	addi	sp,sp,-12
   44c9c:	df000215 	stw	fp,8(sp)
   44ca0:	df000204 	addi	fp,sp,8
   44ca4:	e13ffe15 	stw	r4,-8(fp)
   44ca8:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
   44cac:	e0bffe17 	ldw	r2,-8(fp)
   44cb0:	10800204 	addi	r2,r2,8
   44cb4:	10800037 	ldwio	r2,0(r2)
   44cb8:	1007883a 	mov	r3,r2
   44cbc:	e0bfff17 	ldw	r2,-4(fp)
   44cc0:	1884703a 	and	r2,r3,r2
}
   44cc4:	e037883a 	mov	sp,fp
   44cc8:	df000017 	ldw	fp,0(sp)
   44ccc:	dec00104 	addi	sp,sp,4
   44cd0:	f800283a 	ret

00044cd4 <altera_avalon_fifo_read_level>:

int altera_avalon_fifo_read_level(alt_u32 address)
{
   44cd4:	defffe04 	addi	sp,sp,-8
   44cd8:	df000115 	stw	fp,4(sp)
   44cdc:	df000104 	addi	fp,sp,4
   44ce0:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
   44ce4:	e0bfff17 	ldw	r2,-4(fp)
   44ce8:	10800037 	ldwio	r2,0(r2)
}
   44cec:	e037883a 	mov	sp,fp
   44cf0:	df000017 	ldw	fp,0(sp)
   44cf4:	dec00104 	addi	sp,sp,4
   44cf8:	f800283a 	ret

00044cfc <altera_avalon_fifo_clear_event>:

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
   44cfc:	defffd04 	addi	sp,sp,-12
   44d00:	df000215 	stw	fp,8(sp)
   44d04:	df000204 	addi	fp,sp,8
   44d08:	e13ffe15 	stw	r4,-8(fp)
   44d0c:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
   44d10:	e0bffe17 	ldw	r2,-8(fp)
   44d14:	10800204 	addi	r2,r2,8
   44d18:	e0ffff17 	ldw	r3,-4(fp)
   44d1c:	10c00035 	stwio	r3,0(r2)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
   44d20:	e0bffe17 	ldw	r2,-8(fp)
   44d24:	10800204 	addi	r2,r2,8
   44d28:	10800037 	ldwio	r2,0(r2)
   44d2c:	1007883a 	mov	r3,r2
   44d30:	e0bfff17 	ldw	r2,-4(fp)
   44d34:	1884703a 	and	r2,r3,r2
   44d38:	1000021e 	bne	r2,zero,44d44 <altera_avalon_fifo_clear_event+0x48>
        return ALTERA_AVALON_FIFO_OK;
   44d3c:	0005883a 	mov	r2,zero
   44d40:	00000106 	br	44d48 <altera_avalon_fifo_clear_event+0x4c>
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   44d44:	00bfffc4 	movi	r2,-1
}
   44d48:	e037883a 	mov	sp,fp
   44d4c:	df000017 	ldw	fp,0(sp)
   44d50:	dec00104 	addi	sp,sp,4
   44d54:	f800283a 	ret

00044d58 <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
   44d58:	defffd04 	addi	sp,sp,-12
   44d5c:	df000215 	stw	fp,8(sp)
   44d60:	df000204 	addi	fp,sp,8
   44d64:	e13ffe15 	stw	r4,-8(fp)
   44d68:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
   44d6c:	e0bffe17 	ldw	r2,-8(fp)
   44d70:	10800304 	addi	r2,r2,12
   44d74:	e0ffff17 	ldw	r3,-4(fp)
   44d78:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
   44d7c:	e0bffe17 	ldw	r2,-8(fp)
   44d80:	10800304 	addi	r2,r2,12
   44d84:	10800037 	ldwio	r2,0(r2)
   44d88:	1007883a 	mov	r3,r2
   44d8c:	e0bfff17 	ldw	r2,-4(fp)
   44d90:	1880021e 	bne	r3,r2,44d9c <altera_avalon_fifo_write_ienable+0x44>
        return ALTERA_AVALON_FIFO_OK;
   44d94:	0005883a 	mov	r2,zero
   44d98:	00000106 	br	44da0 <altera_avalon_fifo_write_ienable+0x48>
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   44d9c:	00bfff84 	movi	r2,-2
}
   44da0:	e037883a 	mov	sp,fp
   44da4:	df000017 	ldw	fp,0(sp)
   44da8:	dec00104 	addi	sp,sp,4
   44dac:	f800283a 	ret

00044db0 <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
   44db0:	defffd04 	addi	sp,sp,-12
   44db4:	df000215 	stw	fp,8(sp)
   44db8:	df000204 	addi	fp,sp,8
   44dbc:	e13ffe15 	stw	r4,-8(fp)
   44dc0:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
   44dc4:	e0bffe17 	ldw	r2,-8(fp)
   44dc8:	10800404 	addi	r2,r2,16
   44dcc:	e0ffff17 	ldw	r3,-4(fp)
   44dd0:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
   44dd4:	e0bffe17 	ldw	r2,-8(fp)
   44dd8:	10800404 	addi	r2,r2,16
   44ddc:	10800037 	ldwio	r2,0(r2)
   44de0:	1007883a 	mov	r3,r2
   44de4:	e0bfff17 	ldw	r2,-4(fp)
   44de8:	1880021e 	bne	r3,r2,44df4 <altera_avalon_fifo_write_almostfull+0x44>
        return ALTERA_AVALON_FIFO_OK;
   44dec:	0005883a 	mov	r2,zero
   44df0:	00000106 	br	44df8 <altera_avalon_fifo_write_almostfull+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   44df4:	00bfff44 	movi	r2,-3
}
   44df8:	e037883a 	mov	sp,fp
   44dfc:	df000017 	ldw	fp,0(sp)
   44e00:	dec00104 	addi	sp,sp,4
   44e04:	f800283a 	ret

00044e08 <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
   44e08:	defffd04 	addi	sp,sp,-12
   44e0c:	df000215 	stw	fp,8(sp)
   44e10:	df000204 	addi	fp,sp,8
   44e14:	e13ffe15 	stw	r4,-8(fp)
   44e18:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
   44e1c:	e0bffe17 	ldw	r2,-8(fp)
   44e20:	10800504 	addi	r2,r2,20
   44e24:	e0ffff17 	ldw	r3,-4(fp)
   44e28:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
   44e2c:	e0bffe17 	ldw	r2,-8(fp)
   44e30:	10800504 	addi	r2,r2,20
   44e34:	10800037 	ldwio	r2,0(r2)
   44e38:	1007883a 	mov	r3,r2
   44e3c:	e0bfff17 	ldw	r2,-4(fp)
   44e40:	1880021e 	bne	r3,r2,44e4c <altera_avalon_fifo_write_almostempty+0x44>
        return ALTERA_AVALON_FIFO_OK;
   44e44:	0005883a 	mov	r2,zero
   44e48:	00000106 	br	44e50 <altera_avalon_fifo_write_almostempty+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   44e4c:	00bfff44 	movi	r2,-3
}
   44e50:	e037883a 	mov	sp,fp
   44e54:	df000017 	ldw	fp,0(sp)
   44e58:	dec00104 	addi	sp,sp,4
   44e5c:	f800283a 	ret

00044e60 <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
   44e60:	defffb04 	addi	sp,sp,-20
   44e64:	dfc00415 	stw	ra,16(sp)
   44e68:	df000315 	stw	fp,12(sp)
   44e6c:	df000304 	addi	fp,sp,12
   44e70:	e13ffd15 	stw	r4,-12(fp)
   44e74:	e17ffe15 	stw	r5,-8(fp)
   44e78:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   44e7c:	e13ffe17 	ldw	r4,-8(fp)
   44e80:	01400044 	movi	r5,1
   44e84:	0044bc80 	call	44bc8 <altera_avalon_fifo_read_status>
   44e88:	1000051e 	bne	r2,zero,44ea0 <altera_avalon_fifo_write_fifo+0x40>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
   44e8c:	e0bffd17 	ldw	r2,-12(fp)
   44e90:	e0ffff17 	ldw	r3,-4(fp)
   44e94:	10c00035 	stwio	r3,0(r2)
        return ALTERA_AVALON_FIFO_OK;
   44e98:	0005883a 	mov	r2,zero
   44e9c:	00000106 	br	44ea4 <altera_avalon_fifo_write_fifo+0x44>
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
   44ea0:	00bfff04 	movi	r2,-4
    }
}
   44ea4:	e037883a 	mov	sp,fp
   44ea8:	dfc00117 	ldw	ra,4(sp)
   44eac:	df000017 	ldw	fp,0(sp)
   44eb0:	dec00204 	addi	sp,sp,8
   44eb4:	f800283a 	ret

00044eb8 <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
   44eb8:	defffa04 	addi	sp,sp,-24
   44ebc:	dfc00515 	stw	ra,20(sp)
   44ec0:	df000415 	stw	fp,16(sp)
   44ec4:	df000404 	addi	fp,sp,16
   44ec8:	e13ffd15 	stw	r4,-12(fp)
   44ecc:	e17ffe15 	stw	r5,-8(fp)
   44ed0:	e1bfff15 	stw	r6,-4(fp)
    int return_val = 0;
   44ed4:	e03ffc15 	stw	zero,-16(fp)
    *data = 0;
   44ed8:	e0bfff17 	ldw	r2,-4(fp)
   44edc:	10000015 	stw	zero,0(r2)
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   44ee0:	e13ffe17 	ldw	r4,-8(fp)
   44ee4:	01400084 	movi	r5,2
   44ee8:	0044bc80 	call	44bc8 <altera_avalon_fifo_read_status>
   44eec:	1000071e 	bne	r2,zero,44f0c <altera_avalon_read_fifo+0x54>
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
   44ef0:	e13ffe17 	ldw	r4,-8(fp)
   44ef4:	0044cd40 	call	44cd4 <altera_avalon_fifo_read_level>
   44ef8:	e0bffc15 	stw	r2,-16(fp)
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   44efc:	e0bffd17 	ldw	r2,-12(fp)
   44f00:	10c00037 	ldwio	r3,0(r2)
   44f04:	e0bfff17 	ldw	r2,-4(fp)
   44f08:	10c00015 	stw	r3,0(r2)
    
    }
    return return_val;
   44f0c:	e0bffc17 	ldw	r2,-16(fp)
}
   44f10:	e037883a 	mov	sp,fp
   44f14:	dfc00117 	ldw	ra,4(sp)
   44f18:	df000017 	ldw	fp,0(sp)
   44f1c:	dec00204 	addi	sp,sp,8
   44f20:	f800283a 	ret

00044f24 <altera_avalon_fifo_read_fifo>:

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
   44f24:	defffc04 	addi	sp,sp,-16
   44f28:	dfc00315 	stw	ra,12(sp)
   44f2c:	df000215 	stw	fp,8(sp)
   44f30:	df000204 	addi	fp,sp,8
   44f34:	e13ffe15 	stw	r4,-8(fp)
   44f38:	e17fff15 	stw	r5,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   44f3c:	e13fff17 	ldw	r4,-4(fp)
   44f40:	01400084 	movi	r5,2
   44f44:	0044bc80 	call	44bc8 <altera_avalon_fifo_read_status>
   44f48:	1000031e 	bne	r2,zero,44f58 <altera_avalon_fifo_read_fifo+0x34>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   44f4c:	e0bffe17 	ldw	r2,-8(fp)
   44f50:	10800037 	ldwio	r2,0(r2)
   44f54:	00000106 	br	44f5c <altera_avalon_fifo_read_fifo+0x38>
    }
    return 0;
   44f58:	0005883a 	mov	r2,zero
}
   44f5c:	e037883a 	mov	sp,fp
   44f60:	dfc00117 	ldw	ra,4(sp)
   44f64:	df000017 	ldw	fp,0(sp)
   44f68:	dec00204 	addi	sp,sp,8
   44f6c:	f800283a 	ret

00044f70 <altera_avalon_fifo_write_other_info>:

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
   44f70:	defffb04 	addi	sp,sp,-20
   44f74:	dfc00415 	stw	ra,16(sp)
   44f78:	df000315 	stw	fp,12(sp)
   44f7c:	df000304 	addi	fp,sp,12
   44f80:	e13ffd15 	stw	r4,-12(fp)
   44f84:	e17ffe15 	stw	r5,-8(fp)
   44f88:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   44f8c:	e13ffe17 	ldw	r4,-8(fp)
   44f90:	01400044 	movi	r5,1
   44f94:	0044bc80 	call	44bc8 <altera_avalon_fifo_read_status>
   44f98:	1000061e 	bne	r2,zero,44fb4 <altera_avalon_fifo_write_other_info+0x44>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
   44f9c:	e0bffd17 	ldw	r2,-12(fp)
   44fa0:	10800104 	addi	r2,r2,4
   44fa4:	e0ffff17 	ldw	r3,-4(fp)
   44fa8:	10c00035 	stwio	r3,0(r2)
	return ALTERA_AVALON_FIFO_OK;
   44fac:	0005883a 	mov	r2,zero
   44fb0:	00000106 	br	44fb8 <altera_avalon_fifo_write_other_info+0x48>
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
   44fb4:	00bfff04 	movi	r2,-4
    }
}
   44fb8:	e037883a 	mov	sp,fp
   44fbc:	dfc00117 	ldw	ra,4(sp)
   44fc0:	df000017 	ldw	fp,0(sp)
   44fc4:	dec00204 	addi	sp,sp,8
   44fc8:	f800283a 	ret

00044fcc <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
   44fcc:	defffe04 	addi	sp,sp,-8
   44fd0:	df000115 	stw	fp,4(sp)
   44fd4:	df000104 	addi	fp,sp,4
   44fd8:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
   44fdc:	e0bfff17 	ldw	r2,-4(fp)
   44fe0:	10800104 	addi	r2,r2,4
   44fe4:	10800037 	ldwio	r2,0(r2)
}
   44fe8:	e037883a 	mov	sp,fp
   44fec:	df000017 	ldw	fp,0(sp)
   44ff0:	dec00104 	addi	sp,sp,4
   44ff4:	f800283a 	ret

00044ff8 <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
   44ff8:	defffe04 	addi	sp,sp,-8
   44ffc:	df000115 	stw	fp,4(sp)
   45000:	df000104 	addi	fp,sp,4
   45004:	e13fff15 	stw	r4,-4(fp)
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
   45008:	e0bfff17 	ldw	r2,-4(fp)
   4500c:	10800037 	ldwio	r2,0(r2)
}
   45010:	e037883a 	mov	sp,fp
   45014:	df000017 	ldw	fp,0(sp)
   45018:	dec00104 	addi	sp,sp,4
   4501c:	f800283a 	ret

00045020 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   45020:	defffa04 	addi	sp,sp,-24
   45024:	dfc00515 	stw	ra,20(sp)
   45028:	df000415 	stw	fp,16(sp)
   4502c:	df000404 	addi	fp,sp,16
   45030:	e13ffd15 	stw	r4,-12(fp)
   45034:	e17ffe15 	stw	r5,-8(fp)
   45038:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4503c:	e0bffd17 	ldw	r2,-12(fp)
   45040:	10800017 	ldw	r2,0(r2)
   45044:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   45048:	e0bffc17 	ldw	r2,-16(fp)
   4504c:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   45050:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   45054:	10800217 	ldw	r2,8(r2)
   45058:	1809883a 	mov	r4,r3
   4505c:	e17ffe17 	ldw	r5,-8(fp)
   45060:	e1bfff17 	ldw	r6,-4(fp)
   45064:	100f883a 	mov	r7,r2
   45068:	00456480 	call	45648 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   4506c:	e037883a 	mov	sp,fp
   45070:	dfc00117 	ldw	ra,4(sp)
   45074:	df000017 	ldw	fp,0(sp)
   45078:	dec00204 	addi	sp,sp,8
   4507c:	f800283a 	ret

00045080 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   45080:	defffa04 	addi	sp,sp,-24
   45084:	dfc00515 	stw	ra,20(sp)
   45088:	df000415 	stw	fp,16(sp)
   4508c:	df000404 	addi	fp,sp,16
   45090:	e13ffd15 	stw	r4,-12(fp)
   45094:	e17ffe15 	stw	r5,-8(fp)
   45098:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4509c:	e0bffd17 	ldw	r2,-12(fp)
   450a0:	10800017 	ldw	r2,0(r2)
   450a4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   450a8:	e0bffc17 	ldw	r2,-16(fp)
   450ac:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   450b0:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   450b4:	10800217 	ldw	r2,8(r2)
   450b8:	1809883a 	mov	r4,r3
   450bc:	e17ffe17 	ldw	r5,-8(fp)
   450c0:	e1bfff17 	ldw	r6,-4(fp)
   450c4:	100f883a 	mov	r7,r2
   450c8:	00458600 	call	45860 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   450cc:	e037883a 	mov	sp,fp
   450d0:	dfc00117 	ldw	ra,4(sp)
   450d4:	df000017 	ldw	fp,0(sp)
   450d8:	dec00204 	addi	sp,sp,8
   450dc:	f800283a 	ret

000450e0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   450e0:	defffc04 	addi	sp,sp,-16
   450e4:	dfc00315 	stw	ra,12(sp)
   450e8:	df000215 	stw	fp,8(sp)
   450ec:	df000204 	addi	fp,sp,8
   450f0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   450f4:	e0bfff17 	ldw	r2,-4(fp)
   450f8:	10800017 	ldw	r2,0(r2)
   450fc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   45100:	e0bffe17 	ldw	r2,-8(fp)
   45104:	10c00a04 	addi	r3,r2,40
   45108:	e0bfff17 	ldw	r2,-4(fp)
   4510c:	10800217 	ldw	r2,8(r2)
   45110:	1809883a 	mov	r4,r3
   45114:	100b883a 	mov	r5,r2
   45118:	00454ec0 	call	454ec <altera_avalon_jtag_uart_close>
}
   4511c:	e037883a 	mov	sp,fp
   45120:	dfc00117 	ldw	ra,4(sp)
   45124:	df000017 	ldw	fp,0(sp)
   45128:	dec00204 	addi	sp,sp,8
   4512c:	f800283a 	ret

00045130 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   45130:	defffa04 	addi	sp,sp,-24
   45134:	dfc00515 	stw	ra,20(sp)
   45138:	df000415 	stw	fp,16(sp)
   4513c:	df000404 	addi	fp,sp,16
   45140:	e13ffd15 	stw	r4,-12(fp)
   45144:	e17ffe15 	stw	r5,-8(fp)
   45148:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   4514c:	e0bffd17 	ldw	r2,-12(fp)
   45150:	10800017 	ldw	r2,0(r2)
   45154:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   45158:	e0bffc17 	ldw	r2,-16(fp)
   4515c:	10800a04 	addi	r2,r2,40
   45160:	1009883a 	mov	r4,r2
   45164:	e17ffe17 	ldw	r5,-8(fp)
   45168:	e1bfff17 	ldw	r6,-4(fp)
   4516c:	00455540 	call	45554 <altera_avalon_jtag_uart_ioctl>
}
   45170:	e037883a 	mov	sp,fp
   45174:	dfc00117 	ldw	ra,4(sp)
   45178:	df000017 	ldw	fp,0(sp)
   4517c:	dec00204 	addi	sp,sp,8
   45180:	f800283a 	ret

00045184 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   45184:	defffa04 	addi	sp,sp,-24
   45188:	dfc00515 	stw	ra,20(sp)
   4518c:	df000415 	stw	fp,16(sp)
   45190:	df000404 	addi	fp,sp,16
   45194:	e13ffd15 	stw	r4,-12(fp)
   45198:	e17ffe15 	stw	r5,-8(fp)
   4519c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   451a0:	e0bffd17 	ldw	r2,-12(fp)
   451a4:	00c00044 	movi	r3,1
   451a8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   451ac:	e0bffd17 	ldw	r2,-12(fp)
   451b0:	10800017 	ldw	r2,0(r2)
   451b4:	10800104 	addi	r2,r2,4
   451b8:	e0fffd17 	ldw	r3,-12(fp)
   451bc:	18c00817 	ldw	r3,32(r3)
   451c0:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   451c4:	e0fffe17 	ldw	r3,-8(fp)
   451c8:	e0bfff17 	ldw	r2,-4(fp)
   451cc:	d8000015 	stw	zero,0(sp)
   451d0:	1809883a 	mov	r4,r3
   451d4:	100b883a 	mov	r5,r2
   451d8:	01800134 	movhi	r6,4
   451dc:	31949104 	addi	r6,r6,21060
   451e0:	e1fffd17 	ldw	r7,-12(fp)
   451e4:	0045ea00 	call	45ea0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   451e8:	e0bffd17 	ldw	r2,-12(fp)
   451ec:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   451f0:	e0bffd17 	ldw	r2,-12(fp)
   451f4:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   451f8:	00800174 	movhi	r2,5
   451fc:	10acb204 	addi	r2,r2,-19768
   45200:	10800017 	ldw	r2,0(r2)
   45204:	1809883a 	mov	r4,r3
   45208:	100b883a 	mov	r5,r2
   4520c:	01800134 	movhi	r6,4
   45210:	31951204 	addi	r6,r6,21576
   45214:	e1fffd17 	ldw	r7,-12(fp)
   45218:	0045b800 	call	45b80 <alt_alarm_start>
   4521c:	1000040e 	bge	r2,zero,45230 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   45220:	e0bffd17 	ldw	r2,-12(fp)
   45224:	00e00034 	movhi	r3,32768
   45228:	18ffffc4 	addi	r3,r3,-1
   4522c:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   45230:	e037883a 	mov	sp,fp
   45234:	dfc00117 	ldw	ra,4(sp)
   45238:	df000017 	ldw	fp,0(sp)
   4523c:	dec00204 	addi	sp,sp,8
   45240:	f800283a 	ret

00045244 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   45244:	defff804 	addi	sp,sp,-32
   45248:	df000715 	stw	fp,28(sp)
   4524c:	df000704 	addi	fp,sp,28
   45250:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   45254:	e0bfff17 	ldw	r2,-4(fp)
   45258:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   4525c:	e0bffb17 	ldw	r2,-20(fp)
   45260:	10800017 	ldw	r2,0(r2)
   45264:	e0bffc15 	stw	r2,-16(fp)
   45268:	00000106 	br	45270 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
   4526c:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   45270:	e0bffc17 	ldw	r2,-16(fp)
   45274:	10800104 	addi	r2,r2,4
   45278:	10800037 	ldwio	r2,0(r2)
   4527c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   45280:	e0bffd17 	ldw	r2,-12(fp)
   45284:	1080c00c 	andi	r2,r2,768
   45288:	10006a26 	beq	r2,zero,45434 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   4528c:	e0bffd17 	ldw	r2,-12(fp)
   45290:	1080400c 	andi	r2,r2,256
   45294:	10003326 	beq	r2,zero,45364 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   45298:	00800074 	movhi	r2,1
   4529c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   452a0:	e0bffb17 	ldw	r2,-20(fp)
   452a4:	10800a17 	ldw	r2,40(r2)
   452a8:	10800044 	addi	r2,r2,1
   452ac:	1081ffcc 	andi	r2,r2,2047
   452b0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   452b4:	e0bffb17 	ldw	r2,-20(fp)
   452b8:	10c00b17 	ldw	r3,44(r2)
   452bc:	e0bffe17 	ldw	r2,-8(fp)
   452c0:	18801426 	beq	r3,r2,45314 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   452c4:	e0bffc17 	ldw	r2,-16(fp)
   452c8:	10800037 	ldwio	r2,0(r2)
   452cc:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   452d0:	e0bff917 	ldw	r2,-28(fp)
   452d4:	10a0000c 	andi	r2,r2,32768
   452d8:	10001026 	beq	r2,zero,4531c <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   452dc:	e0bffb17 	ldw	r2,-20(fp)
   452e0:	10800a17 	ldw	r2,40(r2)
   452e4:	e0fff917 	ldw	r3,-28(fp)
   452e8:	e13ffb17 	ldw	r4,-20(fp)
   452ec:	2085883a 	add	r2,r4,r2
   452f0:	10800e04 	addi	r2,r2,56
   452f4:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   452f8:	e0bffb17 	ldw	r2,-20(fp)
   452fc:	10800a17 	ldw	r2,40(r2)
   45300:	10800044 	addi	r2,r2,1
   45304:	10c1ffcc 	andi	r3,r2,2047
   45308:	e0bffb17 	ldw	r2,-20(fp)
   4530c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   45310:	003fe306 	br	452a0 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   45314:	0001883a 	nop
   45318:	00000106 	br	45320 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   4531c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   45320:	e0bff917 	ldw	r2,-28(fp)
   45324:	10bfffec 	andhi	r2,r2,65535
   45328:	10000e26 	beq	r2,zero,45364 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4532c:	e0bffb17 	ldw	r2,-20(fp)
   45330:	10c00817 	ldw	r3,32(r2)
   45334:	00bfff84 	movi	r2,-2
   45338:	1886703a 	and	r3,r3,r2
   4533c:	e0bffb17 	ldw	r2,-20(fp)
   45340:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   45344:	e0bffc17 	ldw	r2,-16(fp)
   45348:	10800104 	addi	r2,r2,4
   4534c:	e0fffb17 	ldw	r3,-20(fp)
   45350:	18c00817 	ldw	r3,32(r3)
   45354:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   45358:	e0bffc17 	ldw	r2,-16(fp)
   4535c:	10800104 	addi	r2,r2,4
   45360:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   45364:	e0bffd17 	ldw	r2,-12(fp)
   45368:	1080800c 	andi	r2,r2,512
   4536c:	103fbf26 	beq	r2,zero,4526c <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   45370:	e0bffd17 	ldw	r2,-12(fp)
   45374:	1004d43a 	srli	r2,r2,16
   45378:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   4537c:	00001406 	br	453d0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   45380:	e0bffc17 	ldw	r2,-16(fp)
   45384:	e0fffb17 	ldw	r3,-20(fp)
   45388:	18c00d17 	ldw	r3,52(r3)
   4538c:	e13ffb17 	ldw	r4,-20(fp)
   45390:	20c7883a 	add	r3,r4,r3
   45394:	18c20e04 	addi	r3,r3,2104
   45398:	18c00003 	ldbu	r3,0(r3)
   4539c:	18c03fcc 	andi	r3,r3,255
   453a0:	18c0201c 	xori	r3,r3,128
   453a4:	18ffe004 	addi	r3,r3,-128
   453a8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   453ac:	e0bffb17 	ldw	r2,-20(fp)
   453b0:	10800d17 	ldw	r2,52(r2)
   453b4:	10800044 	addi	r2,r2,1
   453b8:	10c1ffcc 	andi	r3,r2,2047
   453bc:	e0bffb17 	ldw	r2,-20(fp)
   453c0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   453c4:	e0bffa17 	ldw	r2,-24(fp)
   453c8:	10bfffc4 	addi	r2,r2,-1
   453cc:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   453d0:	e0bffa17 	ldw	r2,-24(fp)
   453d4:	10000526 	beq	r2,zero,453ec <altera_avalon_jtag_uart_irq+0x1a8>
   453d8:	e0bffb17 	ldw	r2,-20(fp)
   453dc:	10c00d17 	ldw	r3,52(r2)
   453e0:	e0bffb17 	ldw	r2,-20(fp)
   453e4:	10800c17 	ldw	r2,48(r2)
   453e8:	18bfe51e 	bne	r3,r2,45380 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   453ec:	e0bffa17 	ldw	r2,-24(fp)
   453f0:	103f9e26 	beq	r2,zero,4526c <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   453f4:	e0bffb17 	ldw	r2,-20(fp)
   453f8:	10c00817 	ldw	r3,32(r2)
   453fc:	00bfff44 	movi	r2,-3
   45400:	1886703a 	and	r3,r3,r2
   45404:	e0bffb17 	ldw	r2,-20(fp)
   45408:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4540c:	e0bffb17 	ldw	r2,-20(fp)
   45410:	10800017 	ldw	r2,0(r2)
   45414:	10800104 	addi	r2,r2,4
   45418:	e0fffb17 	ldw	r3,-20(fp)
   4541c:	18c00817 	ldw	r3,32(r3)
   45420:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   45424:	e0bffc17 	ldw	r2,-16(fp)
   45428:	10800104 	addi	r2,r2,4
   4542c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   45430:	003f8e06 	br	4526c <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   45434:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   45438:	e037883a 	mov	sp,fp
   4543c:	df000017 	ldw	fp,0(sp)
   45440:	dec00104 	addi	sp,sp,4
   45444:	f800283a 	ret

00045448 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   45448:	defffc04 	addi	sp,sp,-16
   4544c:	df000315 	stw	fp,12(sp)
   45450:	df000304 	addi	fp,sp,12
   45454:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   45458:	e0bfff17 	ldw	r2,-4(fp)
   4545c:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   45460:	e0bffd17 	ldw	r2,-12(fp)
   45464:	10800017 	ldw	r2,0(r2)
   45468:	10800104 	addi	r2,r2,4
   4546c:	10800037 	ldwio	r2,0(r2)
   45470:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   45474:	e0bffe17 	ldw	r2,-8(fp)
   45478:	1081000c 	andi	r2,r2,1024
   4547c:	10000a26 	beq	r2,zero,454a8 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   45480:	e0bffd17 	ldw	r2,-12(fp)
   45484:	10800017 	ldw	r2,0(r2)
   45488:	10800104 	addi	r2,r2,4
   4548c:	e0fffd17 	ldw	r3,-12(fp)
   45490:	18c00817 	ldw	r3,32(r3)
   45494:	18c10014 	ori	r3,r3,1024
   45498:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   4549c:	e0bffd17 	ldw	r2,-12(fp)
   454a0:	10000915 	stw	zero,36(r2)
   454a4:	00000a06 	br	454d0 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   454a8:	e0bffd17 	ldw	r2,-12(fp)
   454ac:	10800917 	ldw	r2,36(r2)
   454b0:	00e00034 	movhi	r3,32768
   454b4:	18ffff04 	addi	r3,r3,-4
   454b8:	18800536 	bltu	r3,r2,454d0 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
   454bc:	e0bffd17 	ldw	r2,-12(fp)
   454c0:	10800917 	ldw	r2,36(r2)
   454c4:	10c00044 	addi	r3,r2,1
   454c8:	e0bffd17 	ldw	r2,-12(fp)
   454cc:	10c00915 	stw	r3,36(r2)
   454d0:	00800174 	movhi	r2,5
   454d4:	10acb204 	addi	r2,r2,-19768
   454d8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   454dc:	e037883a 	mov	sp,fp
   454e0:	df000017 	ldw	fp,0(sp)
   454e4:	dec00104 	addi	sp,sp,4
   454e8:	f800283a 	ret

000454ec <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   454ec:	defffd04 	addi	sp,sp,-12
   454f0:	df000215 	stw	fp,8(sp)
   454f4:	df000204 	addi	fp,sp,8
   454f8:	e13ffe15 	stw	r4,-8(fp)
   454fc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   45500:	00000506 	br	45518 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   45504:	e0bfff17 	ldw	r2,-4(fp)
   45508:	1090000c 	andi	r2,r2,16384
   4550c:	10000226 	beq	r2,zero,45518 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   45510:	00bffd44 	movi	r2,-11
   45514:	00000b06 	br	45544 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   45518:	e0bffe17 	ldw	r2,-8(fp)
   4551c:	10c00d17 	ldw	r3,52(r2)
   45520:	e0bffe17 	ldw	r2,-8(fp)
   45524:	10800c17 	ldw	r2,48(r2)
   45528:	18800526 	beq	r3,r2,45540 <altera_avalon_jtag_uart_close+0x54>
   4552c:	e0bffe17 	ldw	r2,-8(fp)
   45530:	10c00917 	ldw	r3,36(r2)
   45534:	e0bffe17 	ldw	r2,-8(fp)
   45538:	10800117 	ldw	r2,4(r2)
   4553c:	18bff136 	bltu	r3,r2,45504 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   45540:	0005883a 	mov	r2,zero
}
   45544:	e037883a 	mov	sp,fp
   45548:	df000017 	ldw	fp,0(sp)
   4554c:	dec00104 	addi	sp,sp,4
   45550:	f800283a 	ret

00045554 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   45554:	defffa04 	addi	sp,sp,-24
   45558:	df000515 	stw	fp,20(sp)
   4555c:	df000504 	addi	fp,sp,20
   45560:	e13ffd15 	stw	r4,-12(fp)
   45564:	e17ffe15 	stw	r5,-8(fp)
   45568:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   4556c:	00bff9c4 	movi	r2,-25
   45570:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   45574:	e0bffe17 	ldw	r2,-8(fp)
   45578:	10da8060 	cmpeqi	r3,r2,27137
   4557c:	1800031e 	bne	r3,zero,4558c <altera_avalon_jtag_uart_ioctl+0x38>
   45580:	109a80a0 	cmpeqi	r2,r2,27138
   45584:	1000181e 	bne	r2,zero,455e8 <altera_avalon_jtag_uart_ioctl+0x94>
   45588:	00002606 	br	45624 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   4558c:	e0bffd17 	ldw	r2,-12(fp)
   45590:	10c00117 	ldw	r3,4(r2)
   45594:	00a00034 	movhi	r2,32768
   45598:	10bfffc4 	addi	r2,r2,-1
   4559c:	18802226 	beq	r3,r2,45628 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
   455a0:	e0bfff17 	ldw	r2,-4(fp)
   455a4:	10800017 	ldw	r2,0(r2)
   455a8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   455ac:	e0bffc17 	ldw	r2,-16(fp)
   455b0:	10800090 	cmplti	r2,r2,2
   455b4:	1000061e 	bne	r2,zero,455d0 <altera_avalon_jtag_uart_ioctl+0x7c>
   455b8:	e0fffc17 	ldw	r3,-16(fp)
   455bc:	00a00034 	movhi	r2,32768
   455c0:	10bfffc4 	addi	r2,r2,-1
   455c4:	18800226 	beq	r3,r2,455d0 <altera_avalon_jtag_uart_ioctl+0x7c>
   455c8:	e0bffc17 	ldw	r2,-16(fp)
   455cc:	00000206 	br	455d8 <altera_avalon_jtag_uart_ioctl+0x84>
   455d0:	00a00034 	movhi	r2,32768
   455d4:	10bfff84 	addi	r2,r2,-2
   455d8:	e0fffd17 	ldw	r3,-12(fp)
   455dc:	18800115 	stw	r2,4(r3)
      rc = 0;
   455e0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   455e4:	00001006 	br	45628 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   455e8:	e0bffd17 	ldw	r2,-12(fp)
   455ec:	10c00117 	ldw	r3,4(r2)
   455f0:	00a00034 	movhi	r2,32768
   455f4:	10bfffc4 	addi	r2,r2,-1
   455f8:	18800d26 	beq	r3,r2,45630 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   455fc:	e0bffd17 	ldw	r2,-12(fp)
   45600:	10c00917 	ldw	r3,36(r2)
   45604:	e0bffd17 	ldw	r2,-12(fp)
   45608:	10800117 	ldw	r2,4(r2)
   4560c:	1885803a 	cmpltu	r2,r3,r2
   45610:	10c03fcc 	andi	r3,r2,255
   45614:	e0bfff17 	ldw	r2,-4(fp)
   45618:	10c00015 	stw	r3,0(r2)
      rc = 0;
   4561c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   45620:	00000306 	br	45630 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
   45624:	00000306 	br	45634 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   45628:	0001883a 	nop
   4562c:	00000106 	br	45634 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   45630:	0001883a 	nop

  default:
    break;
  }

  return rc;
   45634:	e0bffb17 	ldw	r2,-20(fp)
}
   45638:	e037883a 	mov	sp,fp
   4563c:	df000017 	ldw	fp,0(sp)
   45640:	dec00104 	addi	sp,sp,4
   45644:	f800283a 	ret

00045648 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   45648:	defff304 	addi	sp,sp,-52
   4564c:	dfc00c15 	stw	ra,48(sp)
   45650:	df000b15 	stw	fp,44(sp)
   45654:	df000b04 	addi	fp,sp,44
   45658:	e13ffc15 	stw	r4,-16(fp)
   4565c:	e17ffd15 	stw	r5,-12(fp)
   45660:	e1bffe15 	stw	r6,-8(fp)
   45664:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   45668:	e0bffd17 	ldw	r2,-12(fp)
   4566c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   45670:	00004706 	br	45790 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   45674:	e0bffc17 	ldw	r2,-16(fp)
   45678:	10800a17 	ldw	r2,40(r2)
   4567c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   45680:	e0bffc17 	ldw	r2,-16(fp)
   45684:	10800b17 	ldw	r2,44(r2)
   45688:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   4568c:	e0fff717 	ldw	r3,-36(fp)
   45690:	e0bff817 	ldw	r2,-32(fp)
   45694:	18800536 	bltu	r3,r2,456ac <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   45698:	e0fff717 	ldw	r3,-36(fp)
   4569c:	e0bff817 	ldw	r2,-32(fp)
   456a0:	1885c83a 	sub	r2,r3,r2
   456a4:	e0bff615 	stw	r2,-40(fp)
   456a8:	00000406 	br	456bc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   456ac:	00c20004 	movi	r3,2048
   456b0:	e0bff817 	ldw	r2,-32(fp)
   456b4:	1885c83a 	sub	r2,r3,r2
   456b8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   456bc:	e0bff617 	ldw	r2,-40(fp)
   456c0:	10001e26 	beq	r2,zero,4573c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   456c4:	e0fffe17 	ldw	r3,-8(fp)
   456c8:	e0bff617 	ldw	r2,-40(fp)
   456cc:	1880022e 	bgeu	r3,r2,456d8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   456d0:	e0bffe17 	ldw	r2,-8(fp)
   456d4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   456d8:	e0bff817 	ldw	r2,-32(fp)
   456dc:	10800e04 	addi	r2,r2,56
   456e0:	e0fffc17 	ldw	r3,-16(fp)
   456e4:	1885883a 	add	r2,r3,r2
   456e8:	e13ff517 	ldw	r4,-44(fp)
   456ec:	100b883a 	mov	r5,r2
   456f0:	e1bff617 	ldw	r6,-40(fp)
   456f4:	00424080 	call	42408 <memcpy>
      ptr   += n;
   456f8:	e0fff517 	ldw	r3,-44(fp)
   456fc:	e0bff617 	ldw	r2,-40(fp)
   45700:	1885883a 	add	r2,r3,r2
   45704:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   45708:	e0fffe17 	ldw	r3,-8(fp)
   4570c:	e0bff617 	ldw	r2,-40(fp)
   45710:	1885c83a 	sub	r2,r3,r2
   45714:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   45718:	e0fff817 	ldw	r3,-32(fp)
   4571c:	e0bff617 	ldw	r2,-40(fp)
   45720:	1885883a 	add	r2,r3,r2
   45724:	10c1ffcc 	andi	r3,r2,2047
   45728:	e0bffc17 	ldw	r2,-16(fp)
   4572c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   45730:	e0bffe17 	ldw	r2,-8(fp)
   45734:	00bfcf16 	blt	zero,r2,45674 <altera_avalon_jtag_uart_read+0x2c>
   45738:	00000106 	br	45740 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   4573c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   45740:	e0fff517 	ldw	r3,-44(fp)
   45744:	e0bffd17 	ldw	r2,-12(fp)
   45748:	1880141e 	bne	r3,r2,4579c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   4574c:	e0bfff17 	ldw	r2,-4(fp)
   45750:	1090000c 	andi	r2,r2,16384
   45754:	1000131e 	bne	r2,zero,457a4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   45758:	0001883a 	nop
   4575c:	e0bffc17 	ldw	r2,-16(fp)
   45760:	10c00a17 	ldw	r3,40(r2)
   45764:	e0bff717 	ldw	r2,-36(fp)
   45768:	1880051e 	bne	r3,r2,45780 <altera_avalon_jtag_uart_read+0x138>
   4576c:	e0bffc17 	ldw	r2,-16(fp)
   45770:	10c00917 	ldw	r3,36(r2)
   45774:	e0bffc17 	ldw	r2,-16(fp)
   45778:	10800117 	ldw	r2,4(r2)
   4577c:	18bff736 	bltu	r3,r2,4575c <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   45780:	e0bffc17 	ldw	r2,-16(fp)
   45784:	10c00a17 	ldw	r3,40(r2)
   45788:	e0bff717 	ldw	r2,-36(fp)
   4578c:	18800726 	beq	r3,r2,457ac <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   45790:	e0bffe17 	ldw	r2,-8(fp)
   45794:	00bfb716 	blt	zero,r2,45674 <altera_avalon_jtag_uart_read+0x2c>
   45798:	00000506 	br	457b0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   4579c:	0001883a 	nop
   457a0:	00000306 	br	457b0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   457a4:	0001883a 	nop
   457a8:	00000106 	br	457b0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   457ac:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   457b0:	e0fff517 	ldw	r3,-44(fp)
   457b4:	e0bffd17 	ldw	r2,-12(fp)
   457b8:	18801726 	beq	r3,r2,45818 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   457bc:	0005303a 	rdctl	r2,status
   457c0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   457c4:	e0fffa17 	ldw	r3,-24(fp)
   457c8:	00bfff84 	movi	r2,-2
   457cc:	1884703a 	and	r2,r3,r2
   457d0:	1001703a 	wrctl	status,r2
  
  return context;
   457d4:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   457d8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   457dc:	e0bffc17 	ldw	r2,-16(fp)
   457e0:	10800817 	ldw	r2,32(r2)
   457e4:	10c00054 	ori	r3,r2,1
   457e8:	e0bffc17 	ldw	r2,-16(fp)
   457ec:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   457f0:	e0bffc17 	ldw	r2,-16(fp)
   457f4:	10800017 	ldw	r2,0(r2)
   457f8:	10800104 	addi	r2,r2,4
   457fc:	e0fffc17 	ldw	r3,-16(fp)
   45800:	18c00817 	ldw	r3,32(r3)
   45804:	10c00035 	stwio	r3,0(r2)
   45808:	e0bff917 	ldw	r2,-28(fp)
   4580c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45810:	e0bffb17 	ldw	r2,-20(fp)
   45814:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   45818:	e0fff517 	ldw	r3,-44(fp)
   4581c:	e0bffd17 	ldw	r2,-12(fp)
   45820:	18800426 	beq	r3,r2,45834 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
   45824:	e0fff517 	ldw	r3,-44(fp)
   45828:	e0bffd17 	ldw	r2,-12(fp)
   4582c:	1885c83a 	sub	r2,r3,r2
   45830:	00000606 	br	4584c <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
   45834:	e0bfff17 	ldw	r2,-4(fp)
   45838:	1090000c 	andi	r2,r2,16384
   4583c:	10000226 	beq	r2,zero,45848 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
   45840:	00bffd44 	movi	r2,-11
   45844:	00000106 	br	4584c <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
   45848:	00bffec4 	movi	r2,-5
}
   4584c:	e037883a 	mov	sp,fp
   45850:	dfc00117 	ldw	ra,4(sp)
   45854:	df000017 	ldw	fp,0(sp)
   45858:	dec00204 	addi	sp,sp,8
   4585c:	f800283a 	ret

00045860 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   45860:	defff304 	addi	sp,sp,-52
   45864:	dfc00c15 	stw	ra,48(sp)
   45868:	df000b15 	stw	fp,44(sp)
   4586c:	df000b04 	addi	fp,sp,44
   45870:	e13ffc15 	stw	r4,-16(fp)
   45874:	e17ffd15 	stw	r5,-12(fp)
   45878:	e1bffe15 	stw	r6,-8(fp)
   4587c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   45880:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   45884:	e0bffd17 	ldw	r2,-12(fp)
   45888:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4588c:	00003706 	br	4596c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   45890:	e0bffc17 	ldw	r2,-16(fp)
   45894:	10800c17 	ldw	r2,48(r2)
   45898:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   4589c:	e0bffc17 	ldw	r2,-16(fp)
   458a0:	10800d17 	ldw	r2,52(r2)
   458a4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   458a8:	e0fff817 	ldw	r3,-32(fp)
   458ac:	e0bff517 	ldw	r2,-44(fp)
   458b0:	1880062e 	bgeu	r3,r2,458cc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   458b4:	e0fff517 	ldw	r3,-44(fp)
   458b8:	e0bff817 	ldw	r2,-32(fp)
   458bc:	1885c83a 	sub	r2,r3,r2
   458c0:	10bfffc4 	addi	r2,r2,-1
   458c4:	e0bff615 	stw	r2,-40(fp)
   458c8:	00000b06 	br	458f8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   458cc:	e0bff517 	ldw	r2,-44(fp)
   458d0:	10000526 	beq	r2,zero,458e8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   458d4:	00c20004 	movi	r3,2048
   458d8:	e0bff817 	ldw	r2,-32(fp)
   458dc:	1885c83a 	sub	r2,r3,r2
   458e0:	e0bff615 	stw	r2,-40(fp)
   458e4:	00000406 	br	458f8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   458e8:	00c1ffc4 	movi	r3,2047
   458ec:	e0bff817 	ldw	r2,-32(fp)
   458f0:	1885c83a 	sub	r2,r3,r2
   458f4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   458f8:	e0bff617 	ldw	r2,-40(fp)
   458fc:	10001e26 	beq	r2,zero,45978 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   45900:	e0fffe17 	ldw	r3,-8(fp)
   45904:	e0bff617 	ldw	r2,-40(fp)
   45908:	1880022e 	bgeu	r3,r2,45914 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   4590c:	e0bffe17 	ldw	r2,-8(fp)
   45910:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   45914:	e0bff817 	ldw	r2,-32(fp)
   45918:	10820e04 	addi	r2,r2,2104
   4591c:	e0fffc17 	ldw	r3,-16(fp)
   45920:	1885883a 	add	r2,r3,r2
   45924:	1009883a 	mov	r4,r2
   45928:	e17ffd17 	ldw	r5,-12(fp)
   4592c:	e1bff617 	ldw	r6,-40(fp)
   45930:	00424080 	call	42408 <memcpy>
      ptr   += n;
   45934:	e0fffd17 	ldw	r3,-12(fp)
   45938:	e0bff617 	ldw	r2,-40(fp)
   4593c:	1885883a 	add	r2,r3,r2
   45940:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   45944:	e0fffe17 	ldw	r3,-8(fp)
   45948:	e0bff617 	ldw	r2,-40(fp)
   4594c:	1885c83a 	sub	r2,r3,r2
   45950:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   45954:	e0fff817 	ldw	r3,-32(fp)
   45958:	e0bff617 	ldw	r2,-40(fp)
   4595c:	1885883a 	add	r2,r3,r2
   45960:	10c1ffcc 	andi	r3,r2,2047
   45964:	e0bffc17 	ldw	r2,-16(fp)
   45968:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4596c:	e0bffe17 	ldw	r2,-8(fp)
   45970:	00bfc716 	blt	zero,r2,45890 <altera_avalon_jtag_uart_write+0x30>
   45974:	00000106 	br	4597c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   45978:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4597c:	0005303a 	rdctl	r2,status
   45980:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   45984:	e0fffa17 	ldw	r3,-24(fp)
   45988:	00bfff84 	movi	r2,-2
   4598c:	1884703a 	and	r2,r3,r2
   45990:	1001703a 	wrctl	status,r2
  
  return context;
   45994:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   45998:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4599c:	e0bffc17 	ldw	r2,-16(fp)
   459a0:	10800817 	ldw	r2,32(r2)
   459a4:	10c00094 	ori	r3,r2,2
   459a8:	e0bffc17 	ldw	r2,-16(fp)
   459ac:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   459b0:	e0bffc17 	ldw	r2,-16(fp)
   459b4:	10800017 	ldw	r2,0(r2)
   459b8:	10800104 	addi	r2,r2,4
   459bc:	e0fffc17 	ldw	r3,-16(fp)
   459c0:	18c00817 	ldw	r3,32(r3)
   459c4:	10c00035 	stwio	r3,0(r2)
   459c8:	e0bff917 	ldw	r2,-28(fp)
   459cc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   459d0:	e0bffb17 	ldw	r2,-20(fp)
   459d4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   459d8:	e0bffe17 	ldw	r2,-8(fp)
   459dc:	0080110e 	bge	zero,r2,45a24 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   459e0:	e0bfff17 	ldw	r2,-4(fp)
   459e4:	1090000c 	andi	r2,r2,16384
   459e8:	1000111e 	bne	r2,zero,45a30 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   459ec:	0001883a 	nop
   459f0:	e0bffc17 	ldw	r2,-16(fp)
   459f4:	10c00d17 	ldw	r3,52(r2)
   459f8:	e0bff517 	ldw	r2,-44(fp)
   459fc:	1880051e 	bne	r3,r2,45a14 <altera_avalon_jtag_uart_write+0x1b4>
   45a00:	e0bffc17 	ldw	r2,-16(fp)
   45a04:	10c00917 	ldw	r3,36(r2)
   45a08:	e0bffc17 	ldw	r2,-16(fp)
   45a0c:	10800117 	ldw	r2,4(r2)
   45a10:	18bff736 	bltu	r3,r2,459f0 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   45a14:	e0bffc17 	ldw	r2,-16(fp)
   45a18:	10c00d17 	ldw	r3,52(r2)
   45a1c:	e0bff517 	ldw	r2,-44(fp)
   45a20:	18800526 	beq	r3,r2,45a38 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   45a24:	e0bffe17 	ldw	r2,-8(fp)
   45a28:	00bfd016 	blt	zero,r2,4596c <altera_avalon_jtag_uart_write+0x10c>
   45a2c:	00000306 	br	45a3c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   45a30:	0001883a 	nop
   45a34:	00000106 	br	45a3c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
   45a38:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   45a3c:	e0fffd17 	ldw	r3,-12(fp)
   45a40:	e0bff717 	ldw	r2,-36(fp)
   45a44:	18800426 	beq	r3,r2,45a58 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   45a48:	e0fffd17 	ldw	r3,-12(fp)
   45a4c:	e0bff717 	ldw	r2,-36(fp)
   45a50:	1885c83a 	sub	r2,r3,r2
   45a54:	00000606 	br	45a70 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   45a58:	e0bfff17 	ldw	r2,-4(fp)
   45a5c:	1090000c 	andi	r2,r2,16384
   45a60:	10000226 	beq	r2,zero,45a6c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   45a64:	00bffd44 	movi	r2,-11
   45a68:	00000106 	br	45a70 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   45a6c:	00bffec4 	movi	r2,-5
}
   45a70:	e037883a 	mov	sp,fp
   45a74:	dfc00117 	ldw	ra,4(sp)
   45a78:	df000017 	ldw	fp,0(sp)
   45a7c:	dec00204 	addi	sp,sp,8
   45a80:	f800283a 	ret

00045a84 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   45a84:	defffa04 	addi	sp,sp,-24
   45a88:	dfc00515 	stw	ra,20(sp)
   45a8c:	df000415 	stw	fp,16(sp)
   45a90:	df000404 	addi	fp,sp,16
   45a94:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   45a98:	0007883a 	mov	r3,zero
   45a9c:	e0bfff17 	ldw	r2,-4(fp)
   45aa0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   45aa4:	e0bfff17 	ldw	r2,-4(fp)
   45aa8:	10800104 	addi	r2,r2,4
   45aac:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45ab0:	0005303a 	rdctl	r2,status
   45ab4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   45ab8:	e0fffd17 	ldw	r3,-12(fp)
   45abc:	00bfff84 	movi	r2,-2
   45ac0:	1884703a 	and	r2,r3,r2
   45ac4:	1001703a 	wrctl	status,r2
  
  return context;
   45ac8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   45acc:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   45ad0:	00465f00 	call	465f0 <alt_tick>
   45ad4:	e0bffc17 	ldw	r2,-16(fp)
   45ad8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45adc:	e0bffe17 	ldw	r2,-8(fp)
   45ae0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   45ae4:	e037883a 	mov	sp,fp
   45ae8:	dfc00117 	ldw	ra,4(sp)
   45aec:	df000017 	ldw	fp,0(sp)
   45af0:	dec00204 	addi	sp,sp,8
   45af4:	f800283a 	ret

00045af8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   45af8:	defff804 	addi	sp,sp,-32
   45afc:	dfc00715 	stw	ra,28(sp)
   45b00:	df000615 	stw	fp,24(sp)
   45b04:	df000604 	addi	fp,sp,24
   45b08:	e13ffc15 	stw	r4,-16(fp)
   45b0c:	e17ffd15 	stw	r5,-12(fp)
   45b10:	e1bffe15 	stw	r6,-8(fp)
   45b14:	e1ffff15 	stw	r7,-4(fp)
   45b18:	e0bfff17 	ldw	r2,-4(fp)
   45b1c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   45b20:	00800174 	movhi	r2,5
   45b24:	10acb204 	addi	r2,r2,-19768
   45b28:	10800017 	ldw	r2,0(r2)
   45b2c:	1000041e 	bne	r2,zero,45b40 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   45b30:	00800174 	movhi	r2,5
   45b34:	10acb204 	addi	r2,r2,-19768
   45b38:	e0fffb17 	ldw	r3,-20(fp)
   45b3c:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   45b40:	e0bffc17 	ldw	r2,-16(fp)
   45b44:	10800104 	addi	r2,r2,4
   45b48:	00c001c4 	movi	r3,7
   45b4c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   45b50:	d8000015 	stw	zero,0(sp)
   45b54:	e13ffd17 	ldw	r4,-12(fp)
   45b58:	e17ffe17 	ldw	r5,-8(fp)
   45b5c:	01800134 	movhi	r6,4
   45b60:	3196a104 	addi	r6,r6,23172
   45b64:	e1fffc17 	ldw	r7,-16(fp)
   45b68:	0045ea00 	call	45ea0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   45b6c:	e037883a 	mov	sp,fp
   45b70:	dfc00117 	ldw	ra,4(sp)
   45b74:	df000017 	ldw	fp,0(sp)
   45b78:	dec00204 	addi	sp,sp,8
   45b7c:	f800283a 	ret

00045b80 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   45b80:	defff504 	addi	sp,sp,-44
   45b84:	df000a15 	stw	fp,40(sp)
   45b88:	df000a04 	addi	fp,sp,40
   45b8c:	e13ffc15 	stw	r4,-16(fp)
   45b90:	e17ffd15 	stw	r5,-12(fp)
   45b94:	e1bffe15 	stw	r6,-8(fp)
   45b98:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   45b9c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   45ba0:	00800174 	movhi	r2,5
   45ba4:	10acb204 	addi	r2,r2,-19768
   45ba8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   45bac:	10003f26 	beq	r2,zero,45cac <alt_alarm_start+0x12c>
  {
    if (alarm)
   45bb0:	e0bffc17 	ldw	r2,-16(fp)
   45bb4:	10003b26 	beq	r2,zero,45ca4 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   45bb8:	e0bffc17 	ldw	r2,-16(fp)
   45bbc:	e0fffe17 	ldw	r3,-8(fp)
   45bc0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   45bc4:	e0bffc17 	ldw	r2,-16(fp)
   45bc8:	e0ffff17 	ldw	r3,-4(fp)
   45bcc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45bd0:	0005303a 	rdctl	r2,status
   45bd4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   45bd8:	e0fff817 	ldw	r3,-32(fp)
   45bdc:	00bfff84 	movi	r2,-2
   45be0:	1884703a 	and	r2,r3,r2
   45be4:	1001703a 	wrctl	status,r2
  
  return context;
   45be8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   45bec:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   45bf0:	00800174 	movhi	r2,5
   45bf4:	10acb304 	addi	r2,r2,-19764
   45bf8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   45bfc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   45c00:	e0fffd17 	ldw	r3,-12(fp)
   45c04:	e0bff617 	ldw	r2,-40(fp)
   45c08:	1885883a 	add	r2,r3,r2
   45c0c:	10c00044 	addi	r3,r2,1
   45c10:	e0bffc17 	ldw	r2,-16(fp)
   45c14:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   45c18:	e0bffc17 	ldw	r2,-16(fp)
   45c1c:	10c00217 	ldw	r3,8(r2)
   45c20:	e0bff617 	ldw	r2,-40(fp)
   45c24:	1880042e 	bgeu	r3,r2,45c38 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   45c28:	e0bffc17 	ldw	r2,-16(fp)
   45c2c:	00c00044 	movi	r3,1
   45c30:	10c00405 	stb	r3,16(r2)
   45c34:	00000206 	br	45c40 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   45c38:	e0bffc17 	ldw	r2,-16(fp)
   45c3c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   45c40:	e0bffc17 	ldw	r2,-16(fp)
   45c44:	00c00174 	movhi	r3,5
   45c48:	18e40d04 	addi	r3,r3,-28620
   45c4c:	e0fff915 	stw	r3,-28(fp)
   45c50:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   45c54:	e0bffa17 	ldw	r2,-24(fp)
   45c58:	e0fff917 	ldw	r3,-28(fp)
   45c5c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   45c60:	e0bff917 	ldw	r2,-28(fp)
   45c64:	10c00017 	ldw	r3,0(r2)
   45c68:	e0bffa17 	ldw	r2,-24(fp)
   45c6c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   45c70:	e0bff917 	ldw	r2,-28(fp)
   45c74:	10800017 	ldw	r2,0(r2)
   45c78:	e0fffa17 	ldw	r3,-24(fp)
   45c7c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   45c80:	e0bff917 	ldw	r2,-28(fp)
   45c84:	e0fffa17 	ldw	r3,-24(fp)
   45c88:	10c00015 	stw	r3,0(r2)
   45c8c:	e0bff717 	ldw	r2,-36(fp)
   45c90:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45c94:	e0bffb17 	ldw	r2,-20(fp)
   45c98:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   45c9c:	0005883a 	mov	r2,zero
   45ca0:	00000306 	br	45cb0 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   45ca4:	00bffa84 	movi	r2,-22
   45ca8:	00000106 	br	45cb0 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   45cac:	00bfde84 	movi	r2,-134
  }
}
   45cb0:	e037883a 	mov	sp,fp
   45cb4:	df000017 	ldw	fp,0(sp)
   45cb8:	dec00104 	addi	sp,sp,4
   45cbc:	f800283a 	ret

00045cc0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   45cc0:	deffff04 	addi	sp,sp,-4
   45cc4:	df000015 	stw	fp,0(sp)
   45cc8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   45ccc:	e037883a 	mov	sp,fp
   45cd0:	df000017 	ldw	fp,0(sp)
   45cd4:	dec00104 	addi	sp,sp,4
   45cd8:	f800283a 	ret

00045cdc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   45cdc:	defffe04 	addi	sp,sp,-8
   45ce0:	dfc00115 	stw	ra,4(sp)
   45ce4:	df000015 	stw	fp,0(sp)
   45ce8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   45cec:	00800174 	movhi	r2,5
   45cf0:	10a40a04 	addi	r2,r2,-28632
   45cf4:	10800017 	ldw	r2,0(r2)
   45cf8:	10000526 	beq	r2,zero,45d10 <alt_get_errno+0x34>
   45cfc:	00800174 	movhi	r2,5
   45d00:	10a40a04 	addi	r2,r2,-28632
   45d04:	10800017 	ldw	r2,0(r2)
   45d08:	103ee83a 	callr	r2
   45d0c:	00000206 	br	45d18 <alt_get_errno+0x3c>
   45d10:	00800174 	movhi	r2,5
   45d14:	10acad04 	addi	r2,r2,-19788
}
   45d18:	e037883a 	mov	sp,fp
   45d1c:	dfc00117 	ldw	ra,4(sp)
   45d20:	df000017 	ldw	fp,0(sp)
   45d24:	dec00204 	addi	sp,sp,8
   45d28:	f800283a 	ret

00045d2c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   45d2c:	defffa04 	addi	sp,sp,-24
   45d30:	dfc00515 	stw	ra,20(sp)
   45d34:	df000415 	stw	fp,16(sp)
   45d38:	df000404 	addi	fp,sp,16
   45d3c:	e13ffe15 	stw	r4,-8(fp)
   45d40:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   45d44:	e0bffe17 	ldw	r2,-8(fp)
   45d48:	10000326 	beq	r2,zero,45d58 <alt_dev_llist_insert+0x2c>
   45d4c:	e0bffe17 	ldw	r2,-8(fp)
   45d50:	10800217 	ldw	r2,8(r2)
   45d54:	1000051e 	bne	r2,zero,45d6c <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   45d58:	0045cdc0 	call	45cdc <alt_get_errno>
   45d5c:	00c00584 	movi	r3,22
   45d60:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   45d64:	00bffa84 	movi	r2,-22
   45d68:	00001306 	br	45db8 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   45d6c:	e0bffe17 	ldw	r2,-8(fp)
   45d70:	e0ffff17 	ldw	r3,-4(fp)
   45d74:	e0fffc15 	stw	r3,-16(fp)
   45d78:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   45d7c:	e0bffd17 	ldw	r2,-12(fp)
   45d80:	e0fffc17 	ldw	r3,-16(fp)
   45d84:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   45d88:	e0bffc17 	ldw	r2,-16(fp)
   45d8c:	10c00017 	ldw	r3,0(r2)
   45d90:	e0bffd17 	ldw	r2,-12(fp)
   45d94:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   45d98:	e0bffc17 	ldw	r2,-16(fp)
   45d9c:	10800017 	ldw	r2,0(r2)
   45da0:	e0fffd17 	ldw	r3,-12(fp)
   45da4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   45da8:	e0bffc17 	ldw	r2,-16(fp)
   45dac:	e0fffd17 	ldw	r3,-12(fp)
   45db0:	10c00015 	stw	r3,0(r2)

  return 0;  
   45db4:	0005883a 	mov	r2,zero
}
   45db8:	e037883a 	mov	sp,fp
   45dbc:	dfc00117 	ldw	ra,4(sp)
   45dc0:	df000017 	ldw	fp,0(sp)
   45dc4:	dec00204 	addi	sp,sp,8
   45dc8:	f800283a 	ret

00045dcc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   45dcc:	defffd04 	addi	sp,sp,-12
   45dd0:	dfc00215 	stw	ra,8(sp)
   45dd4:	df000115 	stw	fp,4(sp)
   45dd8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   45ddc:	00800134 	movhi	r2,4
   45de0:	109b5704 	addi	r2,r2,27996
   45de4:	e0bfff15 	stw	r2,-4(fp)
   45de8:	00000606 	br	45e04 <_do_ctors+0x38>
        (*ctor) (); 
   45dec:	e0bfff17 	ldw	r2,-4(fp)
   45df0:	10800017 	ldw	r2,0(r2)
   45df4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   45df8:	e0bfff17 	ldw	r2,-4(fp)
   45dfc:	10bfff04 	addi	r2,r2,-4
   45e00:	e0bfff15 	stw	r2,-4(fp)
   45e04:	e0ffff17 	ldw	r3,-4(fp)
   45e08:	00800134 	movhi	r2,4
   45e0c:	109b5804 	addi	r2,r2,28000
   45e10:	18bff62e 	bgeu	r3,r2,45dec <_do_ctors+0x20>
        (*ctor) (); 
}
   45e14:	e037883a 	mov	sp,fp
   45e18:	dfc00117 	ldw	ra,4(sp)
   45e1c:	df000017 	ldw	fp,0(sp)
   45e20:	dec00204 	addi	sp,sp,8
   45e24:	f800283a 	ret

00045e28 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   45e28:	defffd04 	addi	sp,sp,-12
   45e2c:	dfc00215 	stw	ra,8(sp)
   45e30:	df000115 	stw	fp,4(sp)
   45e34:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   45e38:	00800134 	movhi	r2,4
   45e3c:	109b5704 	addi	r2,r2,27996
   45e40:	e0bfff15 	stw	r2,-4(fp)
   45e44:	00000606 	br	45e60 <_do_dtors+0x38>
        (*dtor) (); 
   45e48:	e0bfff17 	ldw	r2,-4(fp)
   45e4c:	10800017 	ldw	r2,0(r2)
   45e50:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   45e54:	e0bfff17 	ldw	r2,-4(fp)
   45e58:	10bfff04 	addi	r2,r2,-4
   45e5c:	e0bfff15 	stw	r2,-4(fp)
   45e60:	e0ffff17 	ldw	r3,-4(fp)
   45e64:	00800134 	movhi	r2,4
   45e68:	109b5804 	addi	r2,r2,28000
   45e6c:	18bff62e 	bgeu	r3,r2,45e48 <_do_dtors+0x20>
        (*dtor) (); 
}
   45e70:	e037883a 	mov	sp,fp
   45e74:	dfc00117 	ldw	ra,4(sp)
   45e78:	df000017 	ldw	fp,0(sp)
   45e7c:	dec00204 	addi	sp,sp,8
   45e80:	f800283a 	ret

00045e84 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   45e84:	deffff04 	addi	sp,sp,-4
   45e88:	df000015 	stw	fp,0(sp)
   45e8c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   45e90:	e037883a 	mov	sp,fp
   45e94:	df000017 	ldw	fp,0(sp)
   45e98:	dec00104 	addi	sp,sp,4
   45e9c:	f800283a 	ret

00045ea0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   45ea0:	defff904 	addi	sp,sp,-28
   45ea4:	dfc00615 	stw	ra,24(sp)
   45ea8:	df000515 	stw	fp,20(sp)
   45eac:	df000504 	addi	fp,sp,20
   45eb0:	e13ffc15 	stw	r4,-16(fp)
   45eb4:	e17ffd15 	stw	r5,-12(fp)
   45eb8:	e1bffe15 	stw	r6,-8(fp)
   45ebc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   45ec0:	e0800217 	ldw	r2,8(fp)
   45ec4:	d8800015 	stw	r2,0(sp)
   45ec8:	e13ffc17 	ldw	r4,-16(fp)
   45ecc:	e17ffd17 	ldw	r5,-12(fp)
   45ed0:	e1bffe17 	ldw	r6,-8(fp)
   45ed4:	e1ffff17 	ldw	r7,-4(fp)
   45ed8:	00460780 	call	46078 <alt_iic_isr_register>
}  
   45edc:	e037883a 	mov	sp,fp
   45ee0:	dfc00117 	ldw	ra,4(sp)
   45ee4:	df000017 	ldw	fp,0(sp)
   45ee8:	dec00204 	addi	sp,sp,8
   45eec:	f800283a 	ret

00045ef0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   45ef0:	defff904 	addi	sp,sp,-28
   45ef4:	df000615 	stw	fp,24(sp)
   45ef8:	df000604 	addi	fp,sp,24
   45efc:	e13ffe15 	stw	r4,-8(fp)
   45f00:	e17fff15 	stw	r5,-4(fp)
   45f04:	e0bfff17 	ldw	r2,-4(fp)
   45f08:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45f0c:	0005303a 	rdctl	r2,status
   45f10:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   45f14:	e0fffb17 	ldw	r3,-20(fp)
   45f18:	00bfff84 	movi	r2,-2
   45f1c:	1884703a 	and	r2,r3,r2
   45f20:	1001703a 	wrctl	status,r2
  
  return context;
   45f24:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   45f28:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   45f2c:	e0bffa17 	ldw	r2,-24(fp)
   45f30:	00c00044 	movi	r3,1
   45f34:	1884983a 	sll	r2,r3,r2
   45f38:	1007883a 	mov	r3,r2
   45f3c:	00800174 	movhi	r2,5
   45f40:	10acb104 	addi	r2,r2,-19772
   45f44:	10800017 	ldw	r2,0(r2)
   45f48:	1886b03a 	or	r3,r3,r2
   45f4c:	00800174 	movhi	r2,5
   45f50:	10acb104 	addi	r2,r2,-19772
   45f54:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   45f58:	00800174 	movhi	r2,5
   45f5c:	10acb104 	addi	r2,r2,-19772
   45f60:	10800017 	ldw	r2,0(r2)
   45f64:	100170fa 	wrctl	ienable,r2
   45f68:	e0bffc17 	ldw	r2,-16(fp)
   45f6c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45f70:	e0bffd17 	ldw	r2,-12(fp)
   45f74:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   45f78:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   45f7c:	e037883a 	mov	sp,fp
   45f80:	df000017 	ldw	fp,0(sp)
   45f84:	dec00104 	addi	sp,sp,4
   45f88:	f800283a 	ret

00045f8c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   45f8c:	defff904 	addi	sp,sp,-28
   45f90:	df000615 	stw	fp,24(sp)
   45f94:	df000604 	addi	fp,sp,24
   45f98:	e13ffe15 	stw	r4,-8(fp)
   45f9c:	e17fff15 	stw	r5,-4(fp)
   45fa0:	e0bfff17 	ldw	r2,-4(fp)
   45fa4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45fa8:	0005303a 	rdctl	r2,status
   45fac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   45fb0:	e0fffb17 	ldw	r3,-20(fp)
   45fb4:	00bfff84 	movi	r2,-2
   45fb8:	1884703a 	and	r2,r3,r2
   45fbc:	1001703a 	wrctl	status,r2
  
  return context;
   45fc0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   45fc4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   45fc8:	e0bffa17 	ldw	r2,-24(fp)
   45fcc:	00c00044 	movi	r3,1
   45fd0:	1884983a 	sll	r2,r3,r2
   45fd4:	0084303a 	nor	r2,zero,r2
   45fd8:	1007883a 	mov	r3,r2
   45fdc:	00800174 	movhi	r2,5
   45fe0:	10acb104 	addi	r2,r2,-19772
   45fe4:	10800017 	ldw	r2,0(r2)
   45fe8:	1886703a 	and	r3,r3,r2
   45fec:	00800174 	movhi	r2,5
   45ff0:	10acb104 	addi	r2,r2,-19772
   45ff4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   45ff8:	00800174 	movhi	r2,5
   45ffc:	10acb104 	addi	r2,r2,-19772
   46000:	10800017 	ldw	r2,0(r2)
   46004:	100170fa 	wrctl	ienable,r2
   46008:	e0bffc17 	ldw	r2,-16(fp)
   4600c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   46010:	e0bffd17 	ldw	r2,-12(fp)
   46014:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   46018:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   4601c:	e037883a 	mov	sp,fp
   46020:	df000017 	ldw	fp,0(sp)
   46024:	dec00104 	addi	sp,sp,4
   46028:	f800283a 	ret

0004602c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   4602c:	defffc04 	addi	sp,sp,-16
   46030:	df000315 	stw	fp,12(sp)
   46034:	df000304 	addi	fp,sp,12
   46038:	e13ffe15 	stw	r4,-8(fp)
   4603c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   46040:	000530fa 	rdctl	r2,ienable
   46044:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   46048:	e0bfff17 	ldw	r2,-4(fp)
   4604c:	00c00044 	movi	r3,1
   46050:	1884983a 	sll	r2,r3,r2
   46054:	1007883a 	mov	r3,r2
   46058:	e0bffd17 	ldw	r2,-12(fp)
   4605c:	1884703a 	and	r2,r3,r2
   46060:	1004c03a 	cmpne	r2,r2,zero
   46064:	10803fcc 	andi	r2,r2,255
}
   46068:	e037883a 	mov	sp,fp
   4606c:	df000017 	ldw	fp,0(sp)
   46070:	dec00104 	addi	sp,sp,4
   46074:	f800283a 	ret

00046078 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   46078:	defff504 	addi	sp,sp,-44
   4607c:	dfc00a15 	stw	ra,40(sp)
   46080:	df000915 	stw	fp,36(sp)
   46084:	df000904 	addi	fp,sp,36
   46088:	e13ffc15 	stw	r4,-16(fp)
   4608c:	e17ffd15 	stw	r5,-12(fp)
   46090:	e1bffe15 	stw	r6,-8(fp)
   46094:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   46098:	00bffa84 	movi	r2,-22
   4609c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   460a0:	e0bffd17 	ldw	r2,-12(fp)
   460a4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   460a8:	e0bff817 	ldw	r2,-32(fp)
   460ac:	10800808 	cmpgei	r2,r2,32
   460b0:	1000271e 	bne	r2,zero,46150 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   460b4:	0005303a 	rdctl	r2,status
   460b8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   460bc:	e0fffa17 	ldw	r3,-24(fp)
   460c0:	00bfff84 	movi	r2,-2
   460c4:	1884703a 	and	r2,r3,r2
   460c8:	1001703a 	wrctl	status,r2
  
  return context;
   460cc:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   460d0:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   460d4:	00c00174 	movhi	r3,5
   460d8:	18ecbe04 	addi	r3,r3,-19720
   460dc:	e0bff817 	ldw	r2,-32(fp)
   460e0:	100490fa 	slli	r2,r2,3
   460e4:	1885883a 	add	r2,r3,r2
   460e8:	e0fffe17 	ldw	r3,-8(fp)
   460ec:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   460f0:	00c00174 	movhi	r3,5
   460f4:	18ecbe04 	addi	r3,r3,-19720
   460f8:	e0bff817 	ldw	r2,-32(fp)
   460fc:	100490fa 	slli	r2,r2,3
   46100:	1885883a 	add	r2,r3,r2
   46104:	10800104 	addi	r2,r2,4
   46108:	e0ffff17 	ldw	r3,-4(fp)
   4610c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   46110:	e0bffe17 	ldw	r2,-8(fp)
   46114:	10000526 	beq	r2,zero,4612c <alt_iic_isr_register+0xb4>
   46118:	e0bff817 	ldw	r2,-32(fp)
   4611c:	e13ffc17 	ldw	r4,-16(fp)
   46120:	100b883a 	mov	r5,r2
   46124:	0045ef00 	call	45ef0 <alt_ic_irq_enable>
   46128:	00000406 	br	4613c <alt_iic_isr_register+0xc4>
   4612c:	e0bff817 	ldw	r2,-32(fp)
   46130:	e13ffc17 	ldw	r4,-16(fp)
   46134:	100b883a 	mov	r5,r2
   46138:	0045f8c0 	call	45f8c <alt_ic_irq_disable>
   4613c:	e0bff715 	stw	r2,-36(fp)
   46140:	e0bff917 	ldw	r2,-28(fp)
   46144:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   46148:	e0bffb17 	ldw	r2,-20(fp)
   4614c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   46150:	e0bff717 	ldw	r2,-36(fp)
}
   46154:	e037883a 	mov	sp,fp
   46158:	dfc00117 	ldw	ra,4(sp)
   4615c:	df000017 	ldw	fp,0(sp)
   46160:	dec00204 	addi	sp,sp,8
   46164:	f800283a 	ret

00046168 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   46168:	defff804 	addi	sp,sp,-32
   4616c:	dfc00715 	stw	ra,28(sp)
   46170:	df000615 	stw	fp,24(sp)
   46174:	dc000515 	stw	r16,20(sp)
   46178:	df000504 	addi	fp,sp,20
   4617c:	e13ffc15 	stw	r4,-16(fp)
   46180:	e17ffd15 	stw	r5,-12(fp)
   46184:	e1bffe15 	stw	r6,-8(fp)
   46188:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   4618c:	e13ffd17 	ldw	r4,-12(fp)
   46190:	e17ffe17 	ldw	r5,-8(fp)
   46194:	e1bfff17 	ldw	r6,-4(fp)
   46198:	00464000 	call	46400 <open>
   4619c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   461a0:	e0bffb17 	ldw	r2,-20(fp)
   461a4:	10002216 	blt	r2,zero,46230 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   461a8:	04000134 	movhi	r16,4
   461ac:	841f8904 	addi	r16,r16,32292
   461b0:	e0bffb17 	ldw	r2,-20(fp)
   461b4:	1009883a 	mov	r4,r2
   461b8:	01400304 	movi	r5,12
   461bc:	004155c0 	call	4155c <__mulsi3>
   461c0:	8085883a 	add	r2,r16,r2
   461c4:	10c00017 	ldw	r3,0(r2)
   461c8:	e0bffc17 	ldw	r2,-16(fp)
   461cc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   461d0:	04000134 	movhi	r16,4
   461d4:	841f8904 	addi	r16,r16,32292
   461d8:	e0bffb17 	ldw	r2,-20(fp)
   461dc:	1009883a 	mov	r4,r2
   461e0:	01400304 	movi	r5,12
   461e4:	004155c0 	call	4155c <__mulsi3>
   461e8:	8085883a 	add	r2,r16,r2
   461ec:	10800104 	addi	r2,r2,4
   461f0:	10c00017 	ldw	r3,0(r2)
   461f4:	e0bffc17 	ldw	r2,-16(fp)
   461f8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   461fc:	04000134 	movhi	r16,4
   46200:	841f8904 	addi	r16,r16,32292
   46204:	e0bffb17 	ldw	r2,-20(fp)
   46208:	1009883a 	mov	r4,r2
   4620c:	01400304 	movi	r5,12
   46210:	004155c0 	call	4155c <__mulsi3>
   46214:	8085883a 	add	r2,r16,r2
   46218:	10800204 	addi	r2,r2,8
   4621c:	10c00017 	ldw	r3,0(r2)
   46220:	e0bffc17 	ldw	r2,-16(fp)
   46224:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   46228:	e13ffb17 	ldw	r4,-20(fp)
   4622c:	00447e80 	call	447e8 <alt_release_fd>
  }
} 
   46230:	e037883a 	mov	sp,fp
   46234:	dfc00217 	ldw	ra,8(sp)
   46238:	df000117 	ldw	fp,4(sp)
   4623c:	dc000017 	ldw	r16,0(sp)
   46240:	dec00304 	addi	sp,sp,12
   46244:	f800283a 	ret

00046248 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   46248:	defffb04 	addi	sp,sp,-20
   4624c:	dfc00415 	stw	ra,16(sp)
   46250:	df000315 	stw	fp,12(sp)
   46254:	df000304 	addi	fp,sp,12
   46258:	e13ffd15 	stw	r4,-12(fp)
   4625c:	e17ffe15 	stw	r5,-8(fp)
   46260:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   46264:	01000134 	movhi	r4,4
   46268:	211f8c04 	addi	r4,r4,32304
   4626c:	e17ffd17 	ldw	r5,-12(fp)
   46270:	01800044 	movi	r6,1
   46274:	01c07fc4 	movi	r7,511
   46278:	00461680 	call	46168 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   4627c:	01000134 	movhi	r4,4
   46280:	211f8904 	addi	r4,r4,32292
   46284:	e17ffe17 	ldw	r5,-8(fp)
   46288:	000d883a 	mov	r6,zero
   4628c:	01c07fc4 	movi	r7,511
   46290:	00461680 	call	46168 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   46294:	01000134 	movhi	r4,4
   46298:	211f8f04 	addi	r4,r4,32316
   4629c:	e17fff17 	ldw	r5,-4(fp)
   462a0:	01800044 	movi	r6,1
   462a4:	01c07fc4 	movi	r7,511
   462a8:	00461680 	call	46168 <alt_open_fd>
}  
   462ac:	e037883a 	mov	sp,fp
   462b0:	dfc00117 	ldw	ra,4(sp)
   462b4:	df000017 	ldw	fp,0(sp)
   462b8:	dec00204 	addi	sp,sp,8
   462bc:	f800283a 	ret

000462c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   462c0:	defffe04 	addi	sp,sp,-8
   462c4:	dfc00115 	stw	ra,4(sp)
   462c8:	df000015 	stw	fp,0(sp)
   462cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   462d0:	00800174 	movhi	r2,5
   462d4:	10a40a04 	addi	r2,r2,-28632
   462d8:	10800017 	ldw	r2,0(r2)
   462dc:	10000526 	beq	r2,zero,462f4 <alt_get_errno+0x34>
   462e0:	00800174 	movhi	r2,5
   462e4:	10a40a04 	addi	r2,r2,-28632
   462e8:	10800017 	ldw	r2,0(r2)
   462ec:	103ee83a 	callr	r2
   462f0:	00000206 	br	462fc <alt_get_errno+0x3c>
   462f4:	00800174 	movhi	r2,5
   462f8:	10acad04 	addi	r2,r2,-19788
}
   462fc:	e037883a 	mov	sp,fp
   46300:	dfc00117 	ldw	ra,4(sp)
   46304:	df000017 	ldw	fp,0(sp)
   46308:	dec00204 	addi	sp,sp,8
   4630c:	f800283a 	ret

00046310 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   46310:	defffb04 	addi	sp,sp,-20
   46314:	dfc00415 	stw	ra,16(sp)
   46318:	df000315 	stw	fp,12(sp)
   4631c:	dc000215 	stw	r16,8(sp)
   46320:	df000204 	addi	fp,sp,8
   46324:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   46328:	e0bfff17 	ldw	r2,-4(fp)
   4632c:	10800217 	ldw	r2,8(r2)
   46330:	10d00034 	orhi	r3,r2,16384
   46334:	e0bfff17 	ldw	r2,-4(fp)
   46338:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4633c:	e03ffe15 	stw	zero,-8(fp)
   46340:	00002206 	br	463cc <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   46344:	04000134 	movhi	r16,4
   46348:	841f8904 	addi	r16,r16,32292
   4634c:	e0bffe17 	ldw	r2,-8(fp)
   46350:	1009883a 	mov	r4,r2
   46354:	01400304 	movi	r5,12
   46358:	004155c0 	call	4155c <__mulsi3>
   4635c:	8085883a 	add	r2,r16,r2
   46360:	10c00017 	ldw	r3,0(r2)
   46364:	e0bfff17 	ldw	r2,-4(fp)
   46368:	10800017 	ldw	r2,0(r2)
   4636c:	1880141e 	bne	r3,r2,463c0 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   46370:	04000134 	movhi	r16,4
   46374:	841f8904 	addi	r16,r16,32292
   46378:	e0bffe17 	ldw	r2,-8(fp)
   4637c:	1009883a 	mov	r4,r2
   46380:	01400304 	movi	r5,12
   46384:	004155c0 	call	4155c <__mulsi3>
   46388:	8085883a 	add	r2,r16,r2
   4638c:	10800204 	addi	r2,r2,8
   46390:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   46394:	10000a0e 	bge	r2,zero,463c0 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   46398:	e13ffe17 	ldw	r4,-8(fp)
   4639c:	01400304 	movi	r5,12
   463a0:	004155c0 	call	4155c <__mulsi3>
   463a4:	00c00134 	movhi	r3,4
   463a8:	18df8904 	addi	r3,r3,32292
   463ac:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   463b0:	e0bfff17 	ldw	r2,-4(fp)
   463b4:	18800226 	beq	r3,r2,463c0 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   463b8:	00bffcc4 	movi	r2,-13
   463bc:	00000a06 	br	463e8 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   463c0:	e0bffe17 	ldw	r2,-8(fp)
   463c4:	10800044 	addi	r2,r2,1
   463c8:	e0bffe15 	stw	r2,-8(fp)
   463cc:	00800174 	movhi	r2,5
   463d0:	10a40904 	addi	r2,r2,-28636
   463d4:	10800017 	ldw	r2,0(r2)
   463d8:	1007883a 	mov	r3,r2
   463dc:	e0bffe17 	ldw	r2,-8(fp)
   463e0:	18bfd82e 	bgeu	r3,r2,46344 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   463e4:	0005883a 	mov	r2,zero
}
   463e8:	e037883a 	mov	sp,fp
   463ec:	dfc00217 	ldw	ra,8(sp)
   463f0:	df000117 	ldw	fp,4(sp)
   463f4:	dc000017 	ldw	r16,0(sp)
   463f8:	dec00304 	addi	sp,sp,12
   463fc:	f800283a 	ret

00046400 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   46400:	defff604 	addi	sp,sp,-40
   46404:	dfc00915 	stw	ra,36(sp)
   46408:	df000815 	stw	fp,32(sp)
   4640c:	df000804 	addi	fp,sp,32
   46410:	e13ffd15 	stw	r4,-12(fp)
   46414:	e17ffe15 	stw	r5,-8(fp)
   46418:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   4641c:	00bfffc4 	movi	r2,-1
   46420:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   46424:	00bffb44 	movi	r2,-19
   46428:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   4642c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   46430:	e13ffd17 	ldw	r4,-12(fp)
   46434:	01400174 	movhi	r5,5
   46438:	29640704 	addi	r5,r5,-28644
   4643c:	00467140 	call	46714 <alt_find_dev>
   46440:	e0bff815 	stw	r2,-32(fp)
   46444:	e0bff817 	ldw	r2,-32(fp)
   46448:	1000051e 	bne	r2,zero,46460 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   4644c:	e13ffd17 	ldw	r4,-12(fp)
   46450:	00467a40 	call	467a4 <alt_find_file>
   46454:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   46458:	00800044 	movi	r2,1
   4645c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   46460:	e0bff817 	ldw	r2,-32(fp)
   46464:	10002a26 	beq	r2,zero,46510 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   46468:	e13ff817 	ldw	r4,-32(fp)
   4646c:	00468b80 	call	468b8 <alt_get_fd>
   46470:	e0bff915 	stw	r2,-28(fp)
   46474:	e0bff917 	ldw	r2,-28(fp)
   46478:	1000030e 	bge	r2,zero,46488 <open+0x88>
    {
      status = index;
   4647c:	e0bff917 	ldw	r2,-28(fp)
   46480:	e0bffa15 	stw	r2,-24(fp)
   46484:	00002406 	br	46518 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   46488:	e13ff917 	ldw	r4,-28(fp)
   4648c:	01400304 	movi	r5,12
   46490:	004155c0 	call	4155c <__mulsi3>
   46494:	00c00134 	movhi	r3,4
   46498:	18df8904 	addi	r3,r3,32292
   4649c:	10c5883a 	add	r2,r2,r3
   464a0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   464a4:	e0fffe17 	ldw	r3,-8(fp)
   464a8:	00900034 	movhi	r2,16384
   464ac:	10bfffc4 	addi	r2,r2,-1
   464b0:	1886703a 	and	r3,r3,r2
   464b4:	e0bffc17 	ldw	r2,-16(fp)
   464b8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   464bc:	e0bffb17 	ldw	r2,-20(fp)
   464c0:	1000051e 	bne	r2,zero,464d8 <open+0xd8>
   464c4:	e13ffc17 	ldw	r4,-16(fp)
   464c8:	00463100 	call	46310 <alt_file_locked>
   464cc:	e0bffa15 	stw	r2,-24(fp)
   464d0:	e0bffa17 	ldw	r2,-24(fp)
   464d4:	10001016 	blt	r2,zero,46518 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   464d8:	e0bff817 	ldw	r2,-32(fp)
   464dc:	10800317 	ldw	r2,12(r2)
   464e0:	10000826 	beq	r2,zero,46504 <open+0x104>
   464e4:	e0bff817 	ldw	r2,-32(fp)
   464e8:	10800317 	ldw	r2,12(r2)
   464ec:	e13ffc17 	ldw	r4,-16(fp)
   464f0:	e17ffd17 	ldw	r5,-12(fp)
   464f4:	e1bffe17 	ldw	r6,-8(fp)
   464f8:	e1ffff17 	ldw	r7,-4(fp)
   464fc:	103ee83a 	callr	r2
   46500:	00000106 	br	46508 <open+0x108>
   46504:	0005883a 	mov	r2,zero
   46508:	e0bffa15 	stw	r2,-24(fp)
   4650c:	00000206 	br	46518 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   46510:	00bffb44 	movi	r2,-19
   46514:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   46518:	e0bffa17 	ldw	r2,-24(fp)
   4651c:	1000080e 	bge	r2,zero,46540 <open+0x140>
  {
    alt_release_fd (index);  
   46520:	e13ff917 	ldw	r4,-28(fp)
   46524:	00447e80 	call	447e8 <alt_release_fd>
    ALT_ERRNO = -status;
   46528:	00462c00 	call	462c0 <alt_get_errno>
   4652c:	e0fffa17 	ldw	r3,-24(fp)
   46530:	00c7c83a 	sub	r3,zero,r3
   46534:	10c00015 	stw	r3,0(r2)
    return -1;
   46538:	00bfffc4 	movi	r2,-1
   4653c:	00000106 	br	46544 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   46540:	e0bff917 	ldw	r2,-28(fp)
}
   46544:	e037883a 	mov	sp,fp
   46548:	dfc00117 	ldw	ra,4(sp)
   4654c:	df000017 	ldw	fp,0(sp)
   46550:	dec00204 	addi	sp,sp,8
   46554:	f800283a 	ret

00046558 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   46558:	defffa04 	addi	sp,sp,-24
   4655c:	df000515 	stw	fp,20(sp)
   46560:	df000504 	addi	fp,sp,20
   46564:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   46568:	0005303a 	rdctl	r2,status
   4656c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   46570:	e0fffc17 	ldw	r3,-16(fp)
   46574:	00bfff84 	movi	r2,-2
   46578:	1884703a 	and	r2,r3,r2
   4657c:	1001703a 	wrctl	status,r2
  
  return context;
   46580:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   46584:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   46588:	e0bfff17 	ldw	r2,-4(fp)
   4658c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   46590:	e0bffd17 	ldw	r2,-12(fp)
   46594:	10800017 	ldw	r2,0(r2)
   46598:	e0fffd17 	ldw	r3,-12(fp)
   4659c:	18c00117 	ldw	r3,4(r3)
   465a0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   465a4:	e0bffd17 	ldw	r2,-12(fp)
   465a8:	10800117 	ldw	r2,4(r2)
   465ac:	e0fffd17 	ldw	r3,-12(fp)
   465b0:	18c00017 	ldw	r3,0(r3)
   465b4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   465b8:	e0bffd17 	ldw	r2,-12(fp)
   465bc:	e0fffd17 	ldw	r3,-12(fp)
   465c0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   465c4:	e0bffd17 	ldw	r2,-12(fp)
   465c8:	e0fffd17 	ldw	r3,-12(fp)
   465cc:	10c00015 	stw	r3,0(r2)
   465d0:	e0bffb17 	ldw	r2,-20(fp)
   465d4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   465d8:	e0bffe17 	ldw	r2,-8(fp)
   465dc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   465e0:	e037883a 	mov	sp,fp
   465e4:	df000017 	ldw	fp,0(sp)
   465e8:	dec00104 	addi	sp,sp,4
   465ec:	f800283a 	ret

000465f0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   465f0:	defffb04 	addi	sp,sp,-20
   465f4:	dfc00415 	stw	ra,16(sp)
   465f8:	df000315 	stw	fp,12(sp)
   465fc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   46600:	d0a00c17 	ldw	r2,-32720(gp)
   46604:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   46608:	d0a8b217 	ldw	r2,-23864(gp)
   4660c:	10800044 	addi	r2,r2,1
   46610:	d0a8b215 	stw	r2,-23864(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   46614:	00002e06 	br	466d0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   46618:	e0bffd17 	ldw	r2,-12(fp)
   4661c:	10800017 	ldw	r2,0(r2)
   46620:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   46624:	e0bffd17 	ldw	r2,-12(fp)
   46628:	10800403 	ldbu	r2,16(r2)
   4662c:	10803fcc 	andi	r2,r2,255
   46630:	10000426 	beq	r2,zero,46644 <alt_tick+0x54>
   46634:	d0a8b217 	ldw	r2,-23864(gp)
   46638:	1000021e 	bne	r2,zero,46644 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   4663c:	e0bffd17 	ldw	r2,-12(fp)
   46640:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   46644:	e0bffd17 	ldw	r2,-12(fp)
   46648:	10800217 	ldw	r2,8(r2)
   4664c:	d0e8b217 	ldw	r3,-23864(gp)
   46650:	18801d36 	bltu	r3,r2,466c8 <alt_tick+0xd8>
   46654:	e0bffd17 	ldw	r2,-12(fp)
   46658:	10800403 	ldbu	r2,16(r2)
   4665c:	10803fcc 	andi	r2,r2,255
   46660:	1000191e 	bne	r2,zero,466c8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   46664:	e0bffd17 	ldw	r2,-12(fp)
   46668:	10c00317 	ldw	r3,12(r2)
   4666c:	e0bffd17 	ldw	r2,-12(fp)
   46670:	10800517 	ldw	r2,20(r2)
   46674:	1009883a 	mov	r4,r2
   46678:	183ee83a 	callr	r3
   4667c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   46680:	e0bfff17 	ldw	r2,-4(fp)
   46684:	1000031e 	bne	r2,zero,46694 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   46688:	e13ffd17 	ldw	r4,-12(fp)
   4668c:	00465580 	call	46558 <alt_alarm_stop>
   46690:	00000d06 	br	466c8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   46694:	e0bffd17 	ldw	r2,-12(fp)
   46698:	10c00217 	ldw	r3,8(r2)
   4669c:	e0bfff17 	ldw	r2,-4(fp)
   466a0:	1887883a 	add	r3,r3,r2
   466a4:	e0bffd17 	ldw	r2,-12(fp)
   466a8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   466ac:	e0bffd17 	ldw	r2,-12(fp)
   466b0:	10c00217 	ldw	r3,8(r2)
   466b4:	d0a8b217 	ldw	r2,-23864(gp)
   466b8:	1880032e 	bgeu	r3,r2,466c8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   466bc:	e0bffd17 	ldw	r2,-12(fp)
   466c0:	00c00044 	movi	r3,1
   466c4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   466c8:	e0bffe17 	ldw	r2,-8(fp)
   466cc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   466d0:	e0fffd17 	ldw	r3,-12(fp)
   466d4:	d0a00c04 	addi	r2,gp,-32720
   466d8:	18bfcf1e 	bne	r3,r2,46618 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   466dc:	0001883a 	nop
}
   466e0:	e037883a 	mov	sp,fp
   466e4:	dfc00117 	ldw	ra,4(sp)
   466e8:	df000017 	ldw	fp,0(sp)
   466ec:	dec00204 	addi	sp,sp,8
   466f0:	f800283a 	ret

000466f4 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   466f4:	deffff04 	addi	sp,sp,-4
   466f8:	df000015 	stw	fp,0(sp)
   466fc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   46700:	000170fa 	wrctl	ienable,zero
}
   46704:	e037883a 	mov	sp,fp
   46708:	df000017 	ldw	fp,0(sp)
   4670c:	dec00104 	addi	sp,sp,4
   46710:	f800283a 	ret

00046714 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   46714:	defffa04 	addi	sp,sp,-24
   46718:	dfc00515 	stw	ra,20(sp)
   4671c:	df000415 	stw	fp,16(sp)
   46720:	df000404 	addi	fp,sp,16
   46724:	e13ffe15 	stw	r4,-8(fp)
   46728:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   4672c:	e0bfff17 	ldw	r2,-4(fp)
   46730:	10800017 	ldw	r2,0(r2)
   46734:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   46738:	e13ffe17 	ldw	r4,-8(fp)
   4673c:	004161c0 	call	4161c <strlen>
   46740:	10800044 	addi	r2,r2,1
   46744:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   46748:	00000d06 	br	46780 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   4674c:	e0bffc17 	ldw	r2,-16(fp)
   46750:	10c00217 	ldw	r3,8(r2)
   46754:	e0bffd17 	ldw	r2,-12(fp)
   46758:	1809883a 	mov	r4,r3
   4675c:	e17ffe17 	ldw	r5,-8(fp)
   46760:	100d883a 	mov	r6,r2
   46764:	00469d80 	call	469d8 <memcmp>
   46768:	1000021e 	bne	r2,zero,46774 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   4676c:	e0bffc17 	ldw	r2,-16(fp)
   46770:	00000706 	br	46790 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   46774:	e0bffc17 	ldw	r2,-16(fp)
   46778:	10800017 	ldw	r2,0(r2)
   4677c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   46780:	e0fffc17 	ldw	r3,-16(fp)
   46784:	e0bfff17 	ldw	r2,-4(fp)
   46788:	18bff01e 	bne	r3,r2,4674c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   4678c:	0005883a 	mov	r2,zero
}
   46790:	e037883a 	mov	sp,fp
   46794:	dfc00117 	ldw	ra,4(sp)
   46798:	df000017 	ldw	fp,0(sp)
   4679c:	dec00204 	addi	sp,sp,8
   467a0:	f800283a 	ret

000467a4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   467a4:	defffb04 	addi	sp,sp,-20
   467a8:	dfc00415 	stw	ra,16(sp)
   467ac:	df000315 	stw	fp,12(sp)
   467b0:	df000304 	addi	fp,sp,12
   467b4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   467b8:	00800174 	movhi	r2,5
   467bc:	10a40504 	addi	r2,r2,-28652
   467c0:	10800017 	ldw	r2,0(r2)
   467c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   467c8:	00003106 	br	46890 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   467cc:	e0bffd17 	ldw	r2,-12(fp)
   467d0:	10800217 	ldw	r2,8(r2)
   467d4:	1009883a 	mov	r4,r2
   467d8:	004161c0 	call	4161c <strlen>
   467dc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   467e0:	e0bffd17 	ldw	r2,-12(fp)
   467e4:	10c00217 	ldw	r3,8(r2)
   467e8:	e0bffe17 	ldw	r2,-8(fp)
   467ec:	10bfffc4 	addi	r2,r2,-1
   467f0:	1885883a 	add	r2,r3,r2
   467f4:	10800003 	ldbu	r2,0(r2)
   467f8:	10803fcc 	andi	r2,r2,255
   467fc:	1080201c 	xori	r2,r2,128
   46800:	10bfe004 	addi	r2,r2,-128
   46804:	10800bd8 	cmpnei	r2,r2,47
   46808:	1000031e 	bne	r2,zero,46818 <alt_find_file+0x74>
    {
      len -= 1;
   4680c:	e0bffe17 	ldw	r2,-8(fp)
   46810:	10bfffc4 	addi	r2,r2,-1
   46814:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   46818:	e0bffe17 	ldw	r2,-8(fp)
   4681c:	e0ffff17 	ldw	r3,-4(fp)
   46820:	1885883a 	add	r2,r3,r2
   46824:	10800003 	ldbu	r2,0(r2)
   46828:	10803fcc 	andi	r2,r2,255
   4682c:	1080201c 	xori	r2,r2,128
   46830:	10bfe004 	addi	r2,r2,-128
   46834:	10800be0 	cmpeqi	r2,r2,47
   46838:	1000081e 	bne	r2,zero,4685c <alt_find_file+0xb8>
   4683c:	e0bffe17 	ldw	r2,-8(fp)
   46840:	e0ffff17 	ldw	r3,-4(fp)
   46844:	1885883a 	add	r2,r3,r2
   46848:	10800003 	ldbu	r2,0(r2)
   4684c:	10803fcc 	andi	r2,r2,255
   46850:	1080201c 	xori	r2,r2,128
   46854:	10bfe004 	addi	r2,r2,-128
   46858:	10000a1e 	bne	r2,zero,46884 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   4685c:	e0bffd17 	ldw	r2,-12(fp)
   46860:	10c00217 	ldw	r3,8(r2)
   46864:	e0bffe17 	ldw	r2,-8(fp)
   46868:	1809883a 	mov	r4,r3
   4686c:	e17fff17 	ldw	r5,-4(fp)
   46870:	100d883a 	mov	r6,r2
   46874:	00469d80 	call	469d8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   46878:	1000021e 	bne	r2,zero,46884 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   4687c:	e0bffd17 	ldw	r2,-12(fp)
   46880:	00000806 	br	468a4 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   46884:	e0bffd17 	ldw	r2,-12(fp)
   46888:	10800017 	ldw	r2,0(r2)
   4688c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   46890:	e0fffd17 	ldw	r3,-12(fp)
   46894:	00800174 	movhi	r2,5
   46898:	10a40504 	addi	r2,r2,-28652
   4689c:	18bfcb1e 	bne	r3,r2,467cc <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   468a0:	0005883a 	mov	r2,zero
}
   468a4:	e037883a 	mov	sp,fp
   468a8:	dfc00117 	ldw	ra,4(sp)
   468ac:	df000017 	ldw	fp,0(sp)
   468b0:	dec00204 	addi	sp,sp,8
   468b4:	f800283a 	ret

000468b8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   468b8:	defffa04 	addi	sp,sp,-24
   468bc:	dfc00515 	stw	ra,20(sp)
   468c0:	df000415 	stw	fp,16(sp)
   468c4:	dc000315 	stw	r16,12(sp)
   468c8:	df000304 	addi	fp,sp,12
   468cc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   468d0:	00bffa04 	movi	r2,-24
   468d4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   468d8:	e03ffd15 	stw	zero,-12(fp)
   468dc:	00002106 	br	46964 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   468e0:	04000134 	movhi	r16,4
   468e4:	841f8904 	addi	r16,r16,32292
   468e8:	e0bffd17 	ldw	r2,-12(fp)
   468ec:	1009883a 	mov	r4,r2
   468f0:	01400304 	movi	r5,12
   468f4:	004155c0 	call	4155c <__mulsi3>
   468f8:	8085883a 	add	r2,r16,r2
   468fc:	10800017 	ldw	r2,0(r2)
   46900:	1000151e 	bne	r2,zero,46958 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   46904:	04000134 	movhi	r16,4
   46908:	841f8904 	addi	r16,r16,32292
   4690c:	e0bffd17 	ldw	r2,-12(fp)
   46910:	1009883a 	mov	r4,r2
   46914:	01400304 	movi	r5,12
   46918:	004155c0 	call	4155c <__mulsi3>
   4691c:	8085883a 	add	r2,r16,r2
   46920:	e0ffff17 	ldw	r3,-4(fp)
   46924:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   46928:	00800174 	movhi	r2,5
   4692c:	10a40904 	addi	r2,r2,-28636
   46930:	10c00017 	ldw	r3,0(r2)
   46934:	e0bffd17 	ldw	r2,-12(fp)
   46938:	1880040e 	bge	r3,r2,4694c <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   4693c:	00800174 	movhi	r2,5
   46940:	10a40904 	addi	r2,r2,-28636
   46944:	e0fffd17 	ldw	r3,-12(fp)
   46948:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   4694c:	e0bffd17 	ldw	r2,-12(fp)
   46950:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   46954:	00000606 	br	46970 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   46958:	e0bffd17 	ldw	r2,-12(fp)
   4695c:	10800044 	addi	r2,r2,1
   46960:	e0bffd15 	stw	r2,-12(fp)
   46964:	e0bffd17 	ldw	r2,-12(fp)
   46968:	10800810 	cmplti	r2,r2,32
   4696c:	103fdc1e 	bne	r2,zero,468e0 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   46970:	e0bffe17 	ldw	r2,-8(fp)
}
   46974:	e037883a 	mov	sp,fp
   46978:	dfc00217 	ldw	ra,8(sp)
   4697c:	df000117 	ldw	fp,4(sp)
   46980:	dc000017 	ldw	r16,0(sp)
   46984:	dec00304 	addi	sp,sp,12
   46988:	f800283a 	ret

0004698c <atexit>:
   4698c:	200b883a 	mov	r5,r4
   46990:	000d883a 	mov	r6,zero
   46994:	0009883a 	mov	r4,zero
   46998:	000f883a 	mov	r7,zero
   4699c:	0046a541 	jmpi	46a54 <__register_exitproc>

000469a0 <exit>:
   469a0:	defffe04 	addi	sp,sp,-8
   469a4:	000b883a 	mov	r5,zero
   469a8:	dc000015 	stw	r16,0(sp)
   469ac:	dfc00115 	stw	ra,4(sp)
   469b0:	2021883a 	mov	r16,r4
   469b4:	0046b840 	call	46b84 <__call_exitprocs>
   469b8:	00800174 	movhi	r2,5
   469bc:	10a40104 	addi	r2,r2,-28668
   469c0:	11000017 	ldw	r4,0(r2)
   469c4:	20800f17 	ldw	r2,60(r4)
   469c8:	10000126 	beq	r2,zero,469d0 <exit+0x30>
   469cc:	103ee83a 	callr	r2
   469d0:	8009883a 	mov	r4,r16
   469d4:	0046d240 	call	46d24 <_exit>

000469d8 <memcmp>:
   469d8:	01c000c4 	movi	r7,3
   469dc:	3980192e 	bgeu	r7,r6,46a44 <memcmp+0x6c>
   469e0:	2904b03a 	or	r2,r5,r4
   469e4:	11c4703a 	and	r2,r2,r7
   469e8:	10000f26 	beq	r2,zero,46a28 <memcmp+0x50>
   469ec:	20c00003 	ldbu	r3,0(r4)
   469f0:	28800003 	ldbu	r2,0(r5)
   469f4:	1880151e 	bne	r3,r2,46a4c <memcmp+0x74>
   469f8:	31bfff84 	addi	r6,r6,-2
   469fc:	01ffffc4 	movi	r7,-1
   46a00:	00000406 	br	46a14 <memcmp+0x3c>
   46a04:	20c00003 	ldbu	r3,0(r4)
   46a08:	28800003 	ldbu	r2,0(r5)
   46a0c:	31bfffc4 	addi	r6,r6,-1
   46a10:	18800e1e 	bne	r3,r2,46a4c <memcmp+0x74>
   46a14:	21000044 	addi	r4,r4,1
   46a18:	29400044 	addi	r5,r5,1
   46a1c:	31fff91e 	bne	r6,r7,46a04 <memcmp+0x2c>
   46a20:	0005883a 	mov	r2,zero
   46a24:	f800283a 	ret
   46a28:	20c00017 	ldw	r3,0(r4)
   46a2c:	28800017 	ldw	r2,0(r5)
   46a30:	1880041e 	bne	r3,r2,46a44 <memcmp+0x6c>
   46a34:	31bfff04 	addi	r6,r6,-4
   46a38:	21000104 	addi	r4,r4,4
   46a3c:	29400104 	addi	r5,r5,4
   46a40:	39bff936 	bltu	r7,r6,46a28 <memcmp+0x50>
   46a44:	303fe91e 	bne	r6,zero,469ec <memcmp+0x14>
   46a48:	003ff506 	br	46a20 <memcmp+0x48>
   46a4c:	1885c83a 	sub	r2,r3,r2
   46a50:	f800283a 	ret

00046a54 <__register_exitproc>:
   46a54:	defffa04 	addi	sp,sp,-24
   46a58:	00800174 	movhi	r2,5
   46a5c:	10a40104 	addi	r2,r2,-28668
   46a60:	dc000315 	stw	r16,12(sp)
   46a64:	14000017 	ldw	r16,0(r2)
   46a68:	dc400415 	stw	r17,16(sp)
   46a6c:	dfc00515 	stw	ra,20(sp)
   46a70:	80805217 	ldw	r2,328(r16)
   46a74:	2023883a 	mov	r17,r4
   46a78:	10003e26 	beq	r2,zero,46b74 <__register_exitproc+0x120>
   46a7c:	10c00117 	ldw	r3,4(r2)
   46a80:	020007c4 	movi	r8,31
   46a84:	40c0180e 	bge	r8,r3,46ae8 <__register_exitproc+0x94>
   46a88:	00800034 	movhi	r2,0
   46a8c:	10800004 	addi	r2,r2,0
   46a90:	1000061e 	bne	r2,zero,46aac <__register_exitproc+0x58>
   46a94:	00bfffc4 	movi	r2,-1
   46a98:	dfc00517 	ldw	ra,20(sp)
   46a9c:	dc400417 	ldw	r17,16(sp)
   46aa0:	dc000317 	ldw	r16,12(sp)
   46aa4:	dec00604 	addi	sp,sp,24
   46aa8:	f800283a 	ret
   46aac:	01006404 	movi	r4,400
   46ab0:	d9400015 	stw	r5,0(sp)
   46ab4:	d9800115 	stw	r6,4(sp)
   46ab8:	d9c00215 	stw	r7,8(sp)
   46abc:	00000000 	call	0 <__alt_mem_mem5-0x40000>
   46ac0:	d9400017 	ldw	r5,0(sp)
   46ac4:	d9800117 	ldw	r6,4(sp)
   46ac8:	d9c00217 	ldw	r7,8(sp)
   46acc:	103ff126 	beq	r2,zero,46a94 <__register_exitproc+0x40>
   46ad0:	80c05217 	ldw	r3,328(r16)
   46ad4:	10000115 	stw	zero,4(r2)
   46ad8:	10c00015 	stw	r3,0(r2)
   46adc:	80805215 	stw	r2,328(r16)
   46ae0:	10006215 	stw	zero,392(r2)
   46ae4:	10006315 	stw	zero,396(r2)
   46ae8:	10c00117 	ldw	r3,4(r2)
   46aec:	88000d1e 	bne	r17,zero,46b24 <__register_exitproc+0xd0>
   46af0:	19000084 	addi	r4,r3,2
   46af4:	2109883a 	add	r4,r4,r4
   46af8:	18c00044 	addi	r3,r3,1
   46afc:	2109883a 	add	r4,r4,r4
   46b00:	1109883a 	add	r4,r2,r4
   46b04:	10c00115 	stw	r3,4(r2)
   46b08:	0005883a 	mov	r2,zero
   46b0c:	21400015 	stw	r5,0(r4)
   46b10:	dfc00517 	ldw	ra,20(sp)
   46b14:	dc400417 	ldw	r17,16(sp)
   46b18:	dc000317 	ldw	r16,12(sp)
   46b1c:	dec00604 	addi	sp,sp,24
   46b20:	f800283a 	ret
   46b24:	02400044 	movi	r9,1
   46b28:	12806217 	ldw	r10,392(r2)
   46b2c:	48d2983a 	sll	r9,r9,r3
   46b30:	19000804 	addi	r4,r3,32
   46b34:	18d1883a 	add	r8,r3,r3
   46b38:	2109883a 	add	r4,r4,r4
   46b3c:	4211883a 	add	r8,r8,r8
   46b40:	2109883a 	add	r4,r4,r4
   46b44:	1109883a 	add	r4,r2,r4
   46b48:	1211883a 	add	r8,r2,r8
   46b4c:	5254b03a 	or	r10,r10,r9
   46b50:	21c02215 	stw	r7,136(r4)
   46b54:	41802215 	stw	r6,136(r8)
   46b58:	12806215 	stw	r10,392(r2)
   46b5c:	01000084 	movi	r4,2
   46b60:	893fe31e 	bne	r17,r4,46af0 <__register_exitproc+0x9c>
   46b64:	11006317 	ldw	r4,396(r2)
   46b68:	2252b03a 	or	r9,r4,r9
   46b6c:	12406315 	stw	r9,396(r2)
   46b70:	003fdf06 	br	46af0 <__register_exitproc+0x9c>
   46b74:	00800174 	movhi	r2,5
   46b78:	10acfe04 	addi	r2,r2,-19464
   46b7c:	80805215 	stw	r2,328(r16)
   46b80:	003fbe06 	br	46a7c <__register_exitproc+0x28>

00046b84 <__call_exitprocs>:
   46b84:	00800174 	movhi	r2,5
   46b88:	10a40104 	addi	r2,r2,-28668
   46b8c:	10800017 	ldw	r2,0(r2)
   46b90:	defff304 	addi	sp,sp,-52
   46b94:	df000b15 	stw	fp,44(sp)
   46b98:	d8800015 	stw	r2,0(sp)
   46b9c:	10805204 	addi	r2,r2,328
   46ba0:	dd400815 	stw	r21,32(sp)
   46ba4:	dfc00c15 	stw	ra,48(sp)
   46ba8:	ddc00a15 	stw	r23,40(sp)
   46bac:	dd800915 	stw	r22,36(sp)
   46bb0:	dd000715 	stw	r20,28(sp)
   46bb4:	dcc00615 	stw	r19,24(sp)
   46bb8:	dc800515 	stw	r18,20(sp)
   46bbc:	dc400415 	stw	r17,16(sp)
   46bc0:	dc000315 	stw	r16,12(sp)
   46bc4:	d9000115 	stw	r4,4(sp)
   46bc8:	2839883a 	mov	fp,r5
   46bcc:	d8800215 	stw	r2,8(sp)
   46bd0:	057fffc4 	movi	r21,-1
   46bd4:	d8800017 	ldw	r2,0(sp)
   46bd8:	ddc00217 	ldw	r23,8(sp)
   46bdc:	14805217 	ldw	r18,328(r2)
   46be0:	90001726 	beq	r18,zero,46c40 <__call_exitprocs+0xbc>
   46be4:	94400117 	ldw	r17,4(r18)
   46be8:	8c3fffc4 	addi	r16,r17,-1
   46bec:	80001116 	blt	r16,zero,46c34 <__call_exitprocs+0xb0>
   46bf0:	8c400044 	addi	r17,r17,1
   46bf4:	8427883a 	add	r19,r16,r16
   46bf8:	8c63883a 	add	r17,r17,r17
   46bfc:	95802204 	addi	r22,r18,136
   46c00:	9ce7883a 	add	r19,r19,r19
   46c04:	8c63883a 	add	r17,r17,r17
   46c08:	b4e7883a 	add	r19,r22,r19
   46c0c:	9463883a 	add	r17,r18,r17
   46c10:	e0001726 	beq	fp,zero,46c70 <__call_exitprocs+0xec>
   46c14:	8c87c83a 	sub	r3,r17,r18
   46c18:	b0c7883a 	add	r3,r22,r3
   46c1c:	18c01e17 	ldw	r3,120(r3)
   46c20:	1f001326 	beq	r3,fp,46c70 <__call_exitprocs+0xec>
   46c24:	843fffc4 	addi	r16,r16,-1
   46c28:	9cffff04 	addi	r19,r19,-4
   46c2c:	8c7fff04 	addi	r17,r17,-4
   46c30:	857ff71e 	bne	r16,r21,46c10 <__call_exitprocs+0x8c>
   46c34:	00800034 	movhi	r2,0
   46c38:	10800004 	addi	r2,r2,0
   46c3c:	10002a1e 	bne	r2,zero,46ce8 <__call_exitprocs+0x164>
   46c40:	dfc00c17 	ldw	ra,48(sp)
   46c44:	df000b17 	ldw	fp,44(sp)
   46c48:	ddc00a17 	ldw	r23,40(sp)
   46c4c:	dd800917 	ldw	r22,36(sp)
   46c50:	dd400817 	ldw	r21,32(sp)
   46c54:	dd000717 	ldw	r20,28(sp)
   46c58:	dcc00617 	ldw	r19,24(sp)
   46c5c:	dc800517 	ldw	r18,20(sp)
   46c60:	dc400417 	ldw	r17,16(sp)
   46c64:	dc000317 	ldw	r16,12(sp)
   46c68:	dec00d04 	addi	sp,sp,52
   46c6c:	f800283a 	ret
   46c70:	91000117 	ldw	r4,4(r18)
   46c74:	88c00017 	ldw	r3,0(r17)
   46c78:	213fffc4 	addi	r4,r4,-1
   46c7c:	24001526 	beq	r4,r16,46cd4 <__call_exitprocs+0x150>
   46c80:	88000015 	stw	zero,0(r17)
   46c84:	183fe726 	beq	r3,zero,46c24 <__call_exitprocs+0xa0>
   46c88:	00800044 	movi	r2,1
   46c8c:	1408983a 	sll	r4,r2,r16
   46c90:	91406217 	ldw	r5,392(r18)
   46c94:	95000117 	ldw	r20,4(r18)
   46c98:	214a703a 	and	r5,r4,r5
   46c9c:	28000b26 	beq	r5,zero,46ccc <__call_exitprocs+0x148>
   46ca0:	91406317 	ldw	r5,396(r18)
   46ca4:	2148703a 	and	r4,r4,r5
   46ca8:	20000c1e 	bne	r4,zero,46cdc <__call_exitprocs+0x158>
   46cac:	99400017 	ldw	r5,0(r19)
   46cb0:	d9000117 	ldw	r4,4(sp)
   46cb4:	183ee83a 	callr	r3
   46cb8:	90c00117 	ldw	r3,4(r18)
   46cbc:	1d3fc51e 	bne	r3,r20,46bd4 <__call_exitprocs+0x50>
   46cc0:	b8c00017 	ldw	r3,0(r23)
   46cc4:	1cbfd726 	beq	r3,r18,46c24 <__call_exitprocs+0xa0>
   46cc8:	003fc206 	br	46bd4 <__call_exitprocs+0x50>
   46ccc:	183ee83a 	callr	r3
   46cd0:	003ff906 	br	46cb8 <__call_exitprocs+0x134>
   46cd4:	94000115 	stw	r16,4(r18)
   46cd8:	003fea06 	br	46c84 <__call_exitprocs+0x100>
   46cdc:	99000017 	ldw	r4,0(r19)
   46ce0:	183ee83a 	callr	r3
   46ce4:	003ff406 	br	46cb8 <__call_exitprocs+0x134>
   46ce8:	90c00117 	ldw	r3,4(r18)
   46cec:	1800071e 	bne	r3,zero,46d0c <__call_exitprocs+0x188>
   46cf0:	90c00017 	ldw	r3,0(r18)
   46cf4:	18000926 	beq	r3,zero,46d1c <__call_exitprocs+0x198>
   46cf8:	9009883a 	mov	r4,r18
   46cfc:	b8c00015 	stw	r3,0(r23)
   46d00:	00000000 	call	0 <__alt_mem_mem5-0x40000>
   46d04:	bc800017 	ldw	r18,0(r23)
   46d08:	003fb506 	br	46be0 <__call_exitprocs+0x5c>
   46d0c:	90c00017 	ldw	r3,0(r18)
   46d10:	902f883a 	mov	r23,r18
   46d14:	1825883a 	mov	r18,r3
   46d18:	003fb106 	br	46be0 <__call_exitprocs+0x5c>
   46d1c:	0007883a 	mov	r3,zero
   46d20:	003ffb06 	br	46d10 <__call_exitprocs+0x18c>

00046d24 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   46d24:	defffc04 	addi	sp,sp,-16
   46d28:	df000315 	stw	fp,12(sp)
   46d2c:	df000304 	addi	fp,sp,12
   46d30:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   46d34:	0001883a 	nop
   46d38:	e0bfff17 	ldw	r2,-4(fp)
   46d3c:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
   46d40:	e0bffd17 	ldw	r2,-12(fp)
   46d44:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   46d48:	e0bffe17 	ldw	r2,-8(fp)
   46d4c:	10000226 	beq	r2,zero,46d58 <_exit+0x34>
    ALT_SIM_FAIL();
   46d50:	002af070 	cmpltui	zero,zero,43969
   46d54:	00000106 	br	46d5c <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   46d58:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   46d5c:	003fff06 	br	46d5c <_exit+0x38>

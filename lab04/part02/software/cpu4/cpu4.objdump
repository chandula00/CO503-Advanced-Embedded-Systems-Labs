
cpu4.elf:     file format elf32-littlenios2
cpu4.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000101b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x000061d4 memsz 0x000061d4 flags r-x
    LOAD off    0x000071f4 vaddr 0x000161f4 paddr 0x00017c7c align 2**12
         filesz 0x00001a88 memsz 0x00001a88 flags rw-
    LOAD off    0x00009704 vaddr 0x00019704 paddr 0x00019704 align 2**12
         filesz 0x00000000 memsz 0x000004e0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005f24  000101b8  000101b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000118  000160dc  000160dc  000070dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a88  000161f4  00017c7c  000071f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000004e0  00019704  00019704  00009704  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00008c7c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000990  00000000  00000000  00008ca0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00018044  00000000  00000000  00009630  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00005d02  00000000  00000000  00021674  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00006e4f  00000000  00000000  00027376  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000012a4  00000000  00000000  0002e1c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000256a  00000000  00000000  0002f46c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00005a50  00000000  00000000  000319d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  00037428  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000398  00000000  00000000  00037438  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0003a0ec  2**0
                  CONTENTS, READONLY
 17 .cpu          00000004  00000000  00000000  0003a0ef  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0003a0f3  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0003a0f4  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0003a0f5  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0003a0f9  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0003a0fd  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000a  00000000  00000000  0003a101  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000a  00000000  00000000  0003a10b  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000a  00000000  00000000  0003a115  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000004  00000000  00000000  0003a11f  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000052  00000000  00000000  0003a123  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00192ad8  00000000  00000000  0003a175  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
000101b8 l    d  .text	00000000 .text
000160dc l    d  .rodata	00000000 .rodata
000161f4 l    d  .rwdata	00000000 .rwdata
00019704 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../cpu4_bsp//obj/HAL/src/crt0.o
000101f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00010094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 FIFO.c
00000000 l    df *ABS*	00000000 quant.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
00016234 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0001243c l     F .text	00000008 __fp_lock
00012444 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_close.c
0001341c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00013538 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00013564 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00013664 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00013758 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00013844 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00013a20 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00017c6c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00013c94 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00013dd4 l     F .text	00000038 alt_dev_reg
00016be4 l     O .rwdata	00001060 jtag_uart4
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000145c0 l     F .text	00000204 altera_avalon_jtag_uart_irq
000147c4 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00014e00 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00015058 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000154e4 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0001563c l     F .text	00000050 alt_get_errno
0001568c l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
000132e0 g     F .text	00000064 _isatty_r
00013968 g     F .text	00000078 alt_main
00010a40 g     F .text	00000084 _puts_r
00019954 g     O .bss	00000100 alt_irq
00013344 g     F .text	0000006c _lseek_r
00010698 g     F .text	00000174 quantization
0001412c g     F .text	00000058 altera_avalon_fifo_write_almostfull
00017c7c g       *ABS*	00000000 __flash_rwdata_start
00019be4 g       *ABS*	00000000 __alt_heap_start
00012ff4 g     F .text	0000005c __sseek
000124e0 g     F .text	0000010c __sinit
00012458 g     F .text	00000078 __sfmoreglue
00013a00 g     F .text	00000020 __malloc_unlock
000118c4 g     F .text	0000018c memmove
00013eac g     F .text	00000098 altera_avalon_fifo_init
000124d0 g     F .text	00000010 _cleanup
000141dc g     F .text	00000058 altera_avalon_fifo_write_fifo
00000000  w      *UND*	00000000 __errno
00010000 g     F .entry	0000000c __reset
00014374 g     F .text	00000028 altera_avalon_fifo_read_backpressure
00010020 g       *ABS*	00000000 __flash_exceptions_start
00013278 g     F .text	00000068 _fstat_r
00019710 g     O .bss	00000004 errno
00019718 g     O .bss	00000004 alt_argv
0001fc44 g       *ABS*	00000000 _gp
00014078 g     F .text	0000005c altera_avalon_fifo_clear_event
00010000 g       *ABS*	00000000 __alt_mem_mem4
00016a64 g     O .rwdata	00000180 alt_fd_list
00015a90 g     F .text	00000090 alt_find_dev
00010900 g     F .text	00000140 memcpy
0001244c g     F .text	0000000c _cleanup_r
000155c4 g     F .text	00000078 alt_io_redirect
000160dc g       *ABS*	00000000 __DTOR_END__
00010ac4 g     F .text	00000014 puts
000149c4 g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000136b4 g     F .text	000000a4 isatty
0001970c g     O .bss	00000004 __malloc_top_pad
000103d8 g     F .text	000002c0 initialize_quantization_tables
00010b64 g     F .text	000004e4 __sfvwrite_r
0001204c g     F .text	00000064 _sbrk_r
00019754 g     O .bss	00000080 Temp
000133b0 g     F .text	0000006c _read_r
00017c64 g     O .rwdata	00000004 alt_max_fd
00013128 g     F .text	0000013c _fclose_r
0001240c g     F .text	00000030 fflush
00019708 g     O .bss	00000004 __malloc_max_sbrked_mem
00013894 g     F .text	000000d4 lseek
00017c44 g     O .rwdata	00000004 _global_impure_ptr
00011a50 g     F .text	000005fc _realloc_r
00019be4 g       *ABS*	00000000 __bss_end
000153f4 g     F .text	000000f0 alt_iic_isr_register
0001596c g     F .text	00000104 alt_tick
000126f8 g     F .text	00000018 __fp_lock_all
000153a8 g     F .text	0000004c alt_ic_irq_enabled
000102c0 g     F .text	00000040 FIFO_INIT
000158d4 g     F .text	00000098 alt_alarm_stop
00019720 g     O .bss	00000004 alt_irq_active
000100ec g     F .exceptions	000000cc alt_irq_handler
00016a3c g     O .rwdata	00000028 alt_dev_null
0001503c g     F .text	0000001c alt_dcache_flush_all
000197d4 g     O .bss	00000040 Lqt
000140d4 g     F .text	00000058 altera_avalon_fifo_write_ienable
00017c7c g       *ABS*	00000000 __ram_rwdata_end
00013fe8 g     F .text	0000002c altera_avalon_fifo_read_almostempty
00017c5c g     O .rwdata	00000008 alt_dev_list
00013ce4 g     F .text	000000f0 write
000161f4 g       *ABS*	00000000 __ram_rodata_end
000135b4 g     F .text	000000b0 fstat
00019be4 g       *ABS*	00000000 end
00014500 g     F .text	000000c0 altera_avalon_jtag_uart_init
00014014 g     F .text	0000003c altera_avalon_fifo_read_event
000160dc g       *ABS*	00000000 __CTOR_LIST__
00020000 g       *ABS*	00000000 __alt_stack_pointer
00014e74 g     F .text	00000088 alt_avalon_timer_sc_init
00014bdc g     F .text	00000224 altera_avalon_jtag_uart_write
000126e8 g     F .text	00000004 __sfp_lock_acquire
000142a0 g     F .text	0000004c altera_avalon_fifo_read_fifo
000117cc g     F .text	000000f8 memchr
00012864 g     F .text	000002d0 _free_r
00015f00 g     F .text	000001a0 __call_exitprocs
00010340 g     F .text	00000098 DSP_Division
00017c4c g     O .rwdata	00000004 __malloc_sbrk_base
000101b8 g     F .text	0000003c _start
00019724 g     O .bss	00000004 _alt_tick_rate
00019728 g     O .bss	00000004 _alt_nticks
00013a70 g     F .text	000000f4 read
00013e40 g     F .text	0000006c alt_sys_init
00015dd0 g     F .text	00000130 __register_exitproc
00014868 g     F .text	00000068 altera_avalon_jtag_uart_close
000108d8 g     F .text	00000028 __mulsi3
000161f4 g       *ABS*	00000000 __ram_rwdata_start
000160dc g       *ABS*	00000000 __ram_rodata_start
0001972c g     O .bss	00000028 __malloc_current_mallinfo
0001439c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00015c34 g     F .text	000000d4 alt_get_fd
000130c4 g     F .text	00000064 _close_r
00015d54 g     F .text	0000007c memcmp
0001445c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00019be4 g       *ABS*	00000000 __alt_stack_base
000144ac g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000120b0 g     F .text	00000174 __swsetup_r
00013f44 g     F .text	0000003c altera_avalon_fifo_read_status
000125ec g     F .text	000000fc __sfp
00016634 g     O .rwdata	00000408 __malloc_av_
000126f4 g     F .text	00000004 __sinit_lock_release
00012f18 g     F .text	00000054 __sread
00014348 g     F .text	0000002c altera_avalon_fifo_read_other_info
00015b20 g     F .text	00000114 alt_find_file
000150a8 g     F .text	000000a0 alt_dev_llist_insert
000139e0 g     F .text	00000020 __malloc_lock
00013be4 g     F .text	000000b0 sbrk
00012224 g     F .text	000001e8 _fflush_r
00019704 g       *ABS*	00000000 __bss_start
00012e3c g     F .text	000000dc memset
0001080c g     F .text	000000cc main
00019814 g     O .bss	00000080 ILqt
0001971c g     O .bss	00000004 alt_envp
00019704 g     O .bss	00000004 __malloc_max_total_mem
000143fc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00014050 g     F .text	00000028 altera_avalon_fifo_read_level
00013050 g     F .text	00000008 __sclose
00020000 g       *ABS*	00000000 __alt_heap_limit
00013264 g     F .text	00000014 fclose
00019a54 g     O .bss	00000190 _atexit0
00011048 g     F .text	00000784 _malloc_r
00017c68 g     O .rwdata	00000004 alt_errno
00012b34 g     F .text	000000a8 _fwalk
00012728 g     F .text	0000013c _malloc_trim_r
000160dc g       *ABS*	00000000 __CTOR_END__
000160dc g       *ABS*	00000000 __flash_rodata_start
000160dc g       *ABS*	00000000 __DTOR_LIST__
00010300 g     F .text	00000040 delay
00013e0c g     F .text	00000034 alt_irq_init
00013b64 g     F .text	00000080 alt_release_fd
00015d08 g     F .text	00000014 atexit
00013058 g     F .text	0000006c _write_r
00017c48 g     O .rwdata	00000004 _impure_ptr
00019714 g     O .bss	00000004 alt_argc
000151a4 g     F .text	0000005c _do_dtors
00019894 g     O .bss	00000040 Cqt
00010258 g     F .text	00000068 READ_FIFO
000161f4 g     O .rwdata	00000040 zigzag_table
00010020 g       .exceptions	00000000 alt_irq_entry
00012710 g     F .text	00000018 __fp_unlock_all
00017c54 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
000142ec g     F .text	0000005c altera_avalon_fifo_write_other_info
0001521c g     F .text	00000050 alt_ic_isr_register
00017c7c g       *ABS*	00000000 _edata
00019be4 g       *ABS*	00000000 _end
000101b8 g       *ABS*	00000000 __ram_exceptions_end
000148d0 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00015308 g     F .text	000000a0 alt_ic_irq_disable
00012f6c g     F .text	00000088 __swrite
00017c50 g     O .rwdata	00000004 __malloc_trim_threshold
00015a70 g     F .text	00000020 altera_nios2_qsys_irq_init
00015d1c g     F .text	00000038 exit
00012bdc g     F .text	000000b8 _fwalk_reent
00013f80 g     F .text	0000003c altera_avalon_fifo_read_ienable
00020000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
000126ec g     F .text	00000004 __sfp_lock_release
000198d4 g     O .bss	00000080 ICqt
000160a0 g     F .text	0000003c _exit
00014efc g     F .text	00000140 alt_alarm_start
00013fbc g     F .text	0000002c altera_avalon_fifo_read_almostfull
00012c94 g     F .text	000001a8 __smakebuf_r
00010ad8 g     F .text	0000008c strlen
0001577c g     F .text	00000158 open
00014234 g     F .text	0000006c altera_avalon_read_fifo
00015200 g     F .text	0000001c alt_icache_flush_all
000101f4 g     F .text	00000064 WRITE_FIFO
00017c70 g     O .rwdata	00000004 alt_priority_mask
0001526c g     F .text	0000009c alt_ic_irq_enable
00014184 g     F .text	00000058 altera_avalon_fifo_write_almostempty
00017c74 g     O .rwdata	00000008 alt_alarm_list
00015148 g     F .text	0000005c _do_ctors
0001346c g     F .text	000000cc close
000137c4 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
000126f0 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08406e14 	ori	at,at,440
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100ec0 	call	100ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000306 	br	10098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   1008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)

00010094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   10094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   10098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   1009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100e8:	ef80083a 	eret

000100ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100ec:	defff904 	addi	sp,sp,-28
   100f0:	dfc00615 	stw	ra,24(sp)
   100f4:	df000515 	stw	fp,20(sp)
   100f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   100fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10100:	0005313a 	rdctl	r2,ipending
   10104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   10108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   10110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10114:	00800044 	movi	r2,1
   10118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1011c:	e0fffb17 	ldw	r3,-20(fp)
   10120:	e0bffc17 	ldw	r2,-16(fp)
   10124:	1884703a 	and	r2,r3,r2
   10128:	10001726 	beq	r2,zero,10188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1012c:	00c000b4 	movhi	r3,2
   10130:	18e65504 	addi	r3,r3,-26284
   10134:	e0bffd17 	ldw	r2,-12(fp)
   10138:	100490fa 	slli	r2,r2,3
   1013c:	1885883a 	add	r2,r3,r2
   10140:	10c00017 	ldw	r3,0(r2)
   10144:	010000b4 	movhi	r4,2
   10148:	21265504 	addi	r4,r4,-26284
   1014c:	e0bffd17 	ldw	r2,-12(fp)
   10150:	100490fa 	slli	r2,r2,3
   10154:	2085883a 	add	r2,r4,r2
   10158:	10800104 	addi	r2,r2,4
   1015c:	10800017 	ldw	r2,0(r2)
   10160:	1009883a 	mov	r4,r2
   10164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   10168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   1016c:	0005313a 	rdctl	r2,ipending
   10170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   10174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   10178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   1017c:	e0bffb17 	ldw	r2,-20(fp)
   10180:	103fe31e 	bne	r2,zero,10110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   10184:	00000706 	br	101a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10188:	e0bffc17 	ldw	r2,-16(fp)
   1018c:	1085883a 	add	r2,r2,r2
   10190:	e0bffc15 	stw	r2,-16(fp)
      i++;
   10194:	e0bffd17 	ldw	r2,-12(fp)
   10198:	10800044 	addi	r2,r2,1
   1019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   101a0:	003fde06 	br	1011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   101a4:	e037883a 	mov	sp,fp
   101a8:	dfc00117 	ldw	ra,4(sp)
   101ac:	df000017 	ldw	fp,0(sp)
   101b0:	dec00204 	addi	sp,sp,8
   101b4:	f800283a 	ret

Disassembly of section .text:

000101b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   101b8:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   101bc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   101c0:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   101c4:	d6bf1114 	ori	gp,gp,64580
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   101c8:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   101cc:	10a5c114 	ori	r2,r2,38660

    movhi r3, %hi(__bss_end)
   101d0:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   101d4:	18e6f914 	ori	r3,r3,39908

    beq r2, r3, 1f
   101d8:	10c00326 	beq	r2,r3,101e8 <_start+0x30>

0:
    stw zero, (r2)
   101dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101e4:	10fffd36 	bltu	r2,r3,101dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101e8:	00137c40 	call	137c4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101ec:	00139680 	call	13968 <alt_main>

000101f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101f0:	003fff06 	br	101f0 <alt_after_alt_main>

000101f4 <WRITE_FIFO>:
 */

#include "FIFO.h"

void WRITE_FIFO(int *buffer, int inBase, int controllBase)
{
   101f4:	defffb04 	addi	sp,sp,-20
   101f8:	dfc00415 	stw	ra,16(sp)
   101fc:	df000315 	stw	fp,12(sp)
   10200:	df000304 	addi	fp,sp,12
   10204:	e13ffd15 	stw	r4,-12(fp)
   10208:	e17ffe15 	stw	r5,-8(fp)
   1020c:	e1bfff15 	stw	r6,-4(fp)

	// Check if FIFO is full before writing
	while (altera_avalon_fifo_read_level(controllBase) == ALMOST_FULL)
   10210:	0001883a 	nop
   10214:	e0bfff17 	ldw	r2,-4(fp)
   10218:	1009883a 	mov	r4,r2
   1021c:	00140500 	call	14050 <altera_avalon_fifo_read_level>
   10220:	10800220 	cmpeqi	r2,r2,8
   10224:	103ffb1e 	bne	r2,zero,10214 <WRITE_FIFO+0x20>
	{
	}

	// Write data to FIFO
	altera_avalon_fifo_write_fifo(inBase, controllBase, *buffer);
   10228:	e13ffe17 	ldw	r4,-8(fp)
   1022c:	e0ffff17 	ldw	r3,-4(fp)
   10230:	e0bffd17 	ldw	r2,-12(fp)
   10234:	10800017 	ldw	r2,0(r2)
   10238:	180b883a 	mov	r5,r3
   1023c:	100d883a 	mov	r6,r2
   10240:	00141dc0 	call	141dc <altera_avalon_fifo_write_fifo>
}
   10244:	e037883a 	mov	sp,fp
   10248:	dfc00117 	ldw	ra,4(sp)
   1024c:	df000017 	ldw	fp,0(sp)
   10250:	dec00204 	addi	sp,sp,8
   10254:	f800283a 	ret

00010258 <READ_FIFO>:

int READ_FIFO(int *buffer, int outBase, int controllBase)
{
   10258:	defffb04 	addi	sp,sp,-20
   1025c:	dfc00415 	stw	ra,16(sp)
   10260:	df000315 	stw	fp,12(sp)
   10264:	df000304 	addi	fp,sp,12
   10268:	e13ffd15 	stw	r4,-12(fp)
   1026c:	e17ffe15 	stw	r5,-8(fp)
   10270:	e1bfff15 	stw	r6,-4(fp)
	// Wait if the FIFO is empty
	// while (altera_avalon_fifo_read_status(FIFO_MEM_IN_CSR_BASE, ALTERA_AVALON_FIFO_STATUS_EMPTY))
	// 	;

	while (altera_avalon_fifo_read_level(controllBase) == ALMOST_EMTY)
   10274:	0001883a 	nop
   10278:	e0bfff17 	ldw	r2,-4(fp)
   1027c:	1009883a 	mov	r4,r2
   10280:	00140500 	call	14050 <altera_avalon_fifo_read_level>
   10284:	103ffc26 	beq	r2,zero,10278 <READ_FIFO+0x20>
	{
	}

	// Read the data
	*buffer = altera_avalon_fifo_read_fifo(outBase, controllBase);
   10288:	e0fffe17 	ldw	r3,-8(fp)
   1028c:	e0bfff17 	ldw	r2,-4(fp)
   10290:	1809883a 	mov	r4,r3
   10294:	100b883a 	mov	r5,r2
   10298:	00142a00 	call	142a0 <altera_avalon_fifo_read_fifo>
   1029c:	e0fffd17 	ldw	r3,-12(fp)
   102a0:	18800015 	stw	r2,0(r3)

	return *buffer;
   102a4:	e0bffd17 	ldw	r2,-12(fp)
   102a8:	10800017 	ldw	r2,0(r2)
}
   102ac:	e037883a 	mov	sp,fp
   102b0:	dfc00117 	ldw	ra,4(sp)
   102b4:	df000017 	ldw	fp,0(sp)
   102b8:	dec00204 	addi	sp,sp,8
   102bc:	f800283a 	ret

000102c0 <FIFO_INIT>:

// Initialization
void FIFO_INIT(int controllBase)
{
   102c0:	defffd04 	addi	sp,sp,-12
   102c4:	dfc00215 	stw	ra,8(sp)
   102c8:	df000115 	stw	fp,4(sp)
   102cc:	df000104 	addi	fp,sp,4
   102d0:	e13fff15 	stw	r4,-4(fp)
	altera_avalon_fifo_init(controllBase,
   102d4:	e0bfff17 	ldw	r2,-4(fp)
   102d8:	1009883a 	mov	r4,r2
   102dc:	000b883a 	mov	r5,zero
   102e0:	000d883a 	mov	r6,zero
   102e4:	01c00204 	movi	r7,8
   102e8:	0013eac0 	call	13eac <altera_avalon_fifo_init>
							0,
							ALMOST_EMTY,  // Almost empty threshold
							ALMOST_FULL); // Almost full threshold
   102ec:	e037883a 	mov	sp,fp
   102f0:	dfc00117 	ldw	ra,4(sp)
   102f4:	df000017 	ldw	fp,0(sp)
   102f8:	dec00204 	addi	sp,sp,8
   102fc:	f800283a 	ret

00010300 <delay>:
		20, 22, 33, 38, 46, 51, 55, 60,
		21, 34, 37, 47, 50, 56, 59, 61,
		35, 36, 48, 49, 57, 58, 62, 63};

void delay(int n)
{
   10300:	defffd04 	addi	sp,sp,-12
   10304:	df000215 	stw	fp,8(sp)
   10308:	df000204 	addi	fp,sp,8
   1030c:	e13fff15 	stw	r4,-4(fp)
	int i;
	for (i = n; i > 0; i--)
   10310:	e0bfff17 	ldw	r2,-4(fp)
   10314:	e0bffe15 	stw	r2,-8(fp)
   10318:	00000306 	br	10328 <delay+0x28>
   1031c:	e0bffe17 	ldw	r2,-8(fp)
   10320:	10bfffc4 	addi	r2,r2,-1
   10324:	e0bffe15 	stw	r2,-8(fp)
   10328:	e0bffe17 	ldw	r2,-8(fp)
   1032c:	00bffb16 	blt	zero,r2,1031c <delay+0x1c>
	{
		continue;
	}
}
   10330:	e037883a 	mov	sp,fp
   10334:	df000017 	ldw	fp,0(sp)
   10338:	dec00104 	addi	sp,sp,4
   1033c:	f800283a 	ret

00010340 <DSP_Division>:

/*	This function implements 16 Step division for Q.15 format data */
UINT16 DSP_Division(UINT32 numer, UINT32 denom)
{
   10340:	defffc04 	addi	sp,sp,-16
   10344:	df000315 	stw	fp,12(sp)
   10348:	df000304 	addi	fp,sp,12
   1034c:	e13ffe15 	stw	r4,-8(fp)
   10350:	e17fff15 	stw	r5,-4(fp)
	UINT16 i;

	denom <<= 15;
   10354:	e0bfff17 	ldw	r2,-4(fp)
   10358:	100493fa 	slli	r2,r2,15
   1035c:	e0bfff15 	stw	r2,-4(fp)

	for (i = 16; i > 0; i--)
   10360:	00800404 	movi	r2,16
   10364:	e0bffd0d 	sth	r2,-12(fp)
   10368:	00001406 	br	103bc <DSP_Division+0x7c>
	{
		if (numer > denom)
   1036c:	e0bffe17 	ldw	r2,-8(fp)
   10370:	e0ffff17 	ldw	r3,-4(fp)
   10374:	18800b2e 	bgeu	r3,r2,103a4 <DSP_Division+0x64>
		{
			numer -= denom;
   10378:	e0fffe17 	ldw	r3,-8(fp)
   1037c:	e0bfff17 	ldw	r2,-4(fp)
   10380:	1885c83a 	sub	r2,r3,r2
   10384:	e0bffe15 	stw	r2,-8(fp)
			numer <<= 1;
   10388:	e0bffe17 	ldw	r2,-8(fp)
   1038c:	1085883a 	add	r2,r2,r2
   10390:	e0bffe15 	stw	r2,-8(fp)
			numer++;
   10394:	e0bffe17 	ldw	r2,-8(fp)
   10398:	10800044 	addi	r2,r2,1
   1039c:	e0bffe15 	stw	r2,-8(fp)
   103a0:	00000306 	br	103b0 <DSP_Division+0x70>
		}
		else
			numer <<= 1;
   103a4:	e0bffe17 	ldw	r2,-8(fp)
   103a8:	1085883a 	add	r2,r2,r2
   103ac:	e0bffe15 	stw	r2,-8(fp)
{
	UINT16 i;

	denom <<= 15;

	for (i = 16; i > 0; i--)
   103b0:	e0bffd0b 	ldhu	r2,-12(fp)
   103b4:	10bfffc4 	addi	r2,r2,-1
   103b8:	e0bffd0d 	sth	r2,-12(fp)
   103bc:	e0bffd0b 	ldhu	r2,-12(fp)
   103c0:	103fea1e 	bne	r2,zero,1036c <DSP_Division+0x2c>
		}
		else
			numer <<= 1;
	}

	return (UINT16)numer;
   103c4:	e0bffe17 	ldw	r2,-8(fp)
}
   103c8:	e037883a 	mov	sp,fp
   103cc:	df000017 	ldw	fp,0(sp)
   103d0:	dec00104 	addi	sp,sp,4
   103d4:	f800283a 	ret

000103d8 <initialize_quantization_tables>:

/* Multiply Quantization table with quality factor to get LQT and CQT */
void initialize_quantization_tables(void)
{
   103d8:	deffd804 	addi	sp,sp,-160
   103dc:	dfc02715 	stw	ra,156(sp)
   103e0:	df002615 	stw	fp,152(sp)
   103e4:	dc002515 	stw	r16,148(sp)
   103e8:	df002504 	addi	fp,sp,148
	UINT16 i, index;
	UINT32 value;
	int temp;

	UINT8 luminance_quant_table[] =
   103ec:	00800074 	movhi	r2,1
   103f0:	10983a44 	addi	r2,r2,24809
   103f4:	e13fe004 	addi	r4,fp,-128
   103f8:	1007883a 	mov	r3,r2
   103fc:	00801004 	movi	r2,64
   10400:	180b883a 	mov	r5,r3
   10404:	100d883a 	mov	r6,r2
   10408:	00109000 	call	10900 <memcpy>
			18, 22, 37, 56, 68, 109, 103, 77,
			24, 35, 55, 64, 81, 104, 113, 92,
			49, 64, 78, 87, 103, 121, 120, 101,
			72, 92, 95, 98, 112, 100, 103, 99};

	UINT8 chrominance_quant_table[] =
   1040c:	00800074 	movhi	r2,1
   10410:	10984a44 	addi	r2,r2,24873
   10414:	e13ff004 	addi	r4,fp,-64
   10418:	1007883a 	mov	r3,r2
   1041c:	00801004 	movi	r2,64
   10420:	180b883a 	mov	r5,r3
   10424:	100d883a 	mov	r6,r2
   10428:	00109000 	call	10900 <memcpy>
			99, 99, 99, 99, 99, 99, 99, 99,
			99, 99, 99, 99, 99, 99, 99, 99,
			99, 99, 99, 99, 99, 99, 99, 99,
			99, 99, 99, 99, 99, 99, 99, 99};

	READ_FIFO(&temp, OUT_BASE_1to4, CONTROL_BASE_1to4);
   1042c:	e0bfdf04 	addi	r2,fp,-132
   10430:	1009883a 	mov	r4,r2
   10434:	014000b4 	movhi	r5,2
   10438:	29441a04 	addi	r5,r5,4200
   1043c:	01840034 	movhi	r6,4096
   10440:	31841004 	addi	r6,r6,4160
   10444:	00102580 	call	10258 <READ_FIFO>
	UINT32 quality_factor = temp;
   10448:	e0bfdf17 	ldw	r2,-132(fp)
   1044c:	e0bfdd15 	stw	r2,-140(fp)

	printf("Quality Done\n");
   10450:	01000074 	movhi	r4,1
   10454:	21183704 	addi	r4,r4,24796
   10458:	0010ac40 	call	10ac4 <puts>

	for (i = 0; i < 64; i++)
   1045c:	e03fdb0d 	sth	zero,-148(fp)
   10460:	00005606 	br	105bc <initialize_quantization_tables+0x1e4>
	{
		index = zigzag_table[i];
   10464:	e0bfdb0b 	ldhu	r2,-148(fp)
   10468:	00c00074 	movhi	r3,1
   1046c:	18d87d04 	addi	r3,r3,25076
   10470:	1885883a 	add	r2,r3,r2
   10474:	10800003 	ldbu	r2,0(r2)
   10478:	10803fcc 	andi	r2,r2,255
   1047c:	e0bfde0d 	sth	r2,-136(fp)

		/* luminance quantization table * quality factor */
		value = luminance_quant_table[i] * quality_factor;
   10480:	e0bfdb0b 	ldhu	r2,-148(fp)
   10484:	e0ffe004 	addi	r3,fp,-128
   10488:	1885883a 	add	r2,r3,r2
   1048c:	10800003 	ldbu	r2,0(r2)
   10490:	10803fcc 	andi	r2,r2,255
   10494:	1009883a 	mov	r4,r2
   10498:	e17fdd17 	ldw	r5,-140(fp)
   1049c:	00108d80 	call	108d8 <__mulsi3>
   104a0:	e0bfdc15 	stw	r2,-144(fp)
		value = (value + 0x200) >> 10;
   104a4:	e0bfdc17 	ldw	r2,-144(fp)
   104a8:	10808004 	addi	r2,r2,512
   104ac:	1004d2ba 	srli	r2,r2,10
   104b0:	e0bfdc15 	stw	r2,-144(fp)

		if (value == 0)
   104b4:	e0bfdc17 	ldw	r2,-144(fp)
   104b8:	1000031e 	bne	r2,zero,104c8 <initialize_quantization_tables+0xf0>
			value = 1;
   104bc:	00800044 	movi	r2,1
   104c0:	e0bfdc15 	stw	r2,-144(fp)
   104c4:	00000506 	br	104dc <initialize_quantization_tables+0x104>
		else if (value > 255)
   104c8:	e0bfdc17 	ldw	r2,-144(fp)
   104cc:	10804030 	cmpltui	r2,r2,256
   104d0:	1000021e 	bne	r2,zero,104dc <initialize_quantization_tables+0x104>
			value = 255;
   104d4:	00803fc4 	movi	r2,255
   104d8:	e0bfdc15 	stw	r2,-144(fp)

		Lqt[index] = (UINT8)value;
   104dc:	e0bfde0b 	ldhu	r2,-136(fp)
   104e0:	e0ffdc17 	ldw	r3,-144(fp)
   104e4:	010000b4 	movhi	r4,2
   104e8:	2125f504 	addi	r4,r4,-26668
   104ec:	2085883a 	add	r2,r4,r2
   104f0:	10c00005 	stb	r3,0(r2)
		ILqt[i] = DSP_Division(0x8000, value);
   104f4:	e43fdb0b 	ldhu	r16,-148(fp)
   104f8:	01200014 	movui	r4,32768
   104fc:	e17fdc17 	ldw	r5,-144(fp)
   10500:	00103400 	call	10340 <DSP_Division>
   10504:	010000b4 	movhi	r4,2
   10508:	21260504 	addi	r4,r4,-26604
   1050c:	8407883a 	add	r3,r16,r16
   10510:	20c7883a 	add	r3,r4,r3
   10514:	1880000d 	sth	r2,0(r3)

		/* chrominance quantization table * quality factor */
		value = chrominance_quant_table[i] * quality_factor;
   10518:	e0bfdb0b 	ldhu	r2,-148(fp)
   1051c:	e0fff004 	addi	r3,fp,-64
   10520:	1885883a 	add	r2,r3,r2
   10524:	10800003 	ldbu	r2,0(r2)
   10528:	10803fcc 	andi	r2,r2,255
   1052c:	1009883a 	mov	r4,r2
   10530:	e17fdd17 	ldw	r5,-140(fp)
   10534:	00108d80 	call	108d8 <__mulsi3>
   10538:	e0bfdc15 	stw	r2,-144(fp)
		value = (value + 0x200) >> 10;
   1053c:	e0bfdc17 	ldw	r2,-144(fp)
   10540:	10808004 	addi	r2,r2,512
   10544:	1004d2ba 	srli	r2,r2,10
   10548:	e0bfdc15 	stw	r2,-144(fp)

		if (value == 0)
   1054c:	e0bfdc17 	ldw	r2,-144(fp)
   10550:	1000031e 	bne	r2,zero,10560 <initialize_quantization_tables+0x188>
			value = 1;
   10554:	00800044 	movi	r2,1
   10558:	e0bfdc15 	stw	r2,-144(fp)
   1055c:	00000506 	br	10574 <initialize_quantization_tables+0x19c>
		else if (value > 255)
   10560:	e0bfdc17 	ldw	r2,-144(fp)
   10564:	10804030 	cmpltui	r2,r2,256
   10568:	1000021e 	bne	r2,zero,10574 <initialize_quantization_tables+0x19c>
			value = 255;
   1056c:	00803fc4 	movi	r2,255
   10570:	e0bfdc15 	stw	r2,-144(fp)

		Cqt[index] = (UINT8)value;
   10574:	e0bfde0b 	ldhu	r2,-136(fp)
   10578:	e0ffdc17 	ldw	r3,-144(fp)
   1057c:	010000b4 	movhi	r4,2
   10580:	21262504 	addi	r4,r4,-26476
   10584:	2085883a 	add	r2,r4,r2
   10588:	10c00005 	stb	r3,0(r2)
		ICqt[i] = DSP_Division(0x8000, value);
   1058c:	e43fdb0b 	ldhu	r16,-148(fp)
   10590:	01200014 	movui	r4,32768
   10594:	e17fdc17 	ldw	r5,-144(fp)
   10598:	00103400 	call	10340 <DSP_Division>
   1059c:	010000b4 	movhi	r4,2
   105a0:	21263504 	addi	r4,r4,-26412
   105a4:	8407883a 	add	r3,r16,r16
   105a8:	20c7883a 	add	r3,r4,r3
   105ac:	1880000d 	sth	r2,0(r3)
	READ_FIFO(&temp, OUT_BASE_1to4, CONTROL_BASE_1to4);
	UINT32 quality_factor = temp;

	printf("Quality Done\n");

	for (i = 0; i < 64; i++)
   105b0:	e0bfdb0b 	ldhu	r2,-148(fp)
   105b4:	10800044 	addi	r2,r2,1
   105b8:	e0bfdb0d 	sth	r2,-148(fp)
   105bc:	e0bfdb0b 	ldhu	r2,-148(fp)
   105c0:	10801030 	cmpltui	r2,r2,64
   105c4:	103fa71e 	bne	r2,zero,10464 <initialize_quantization_tables+0x8c>

		Cqt[index] = (UINT8)value;
		ICqt[i] = DSP_Division(0x8000, value);
	}

	for (i = 0; i < 64; i++)
   105c8:	e03fdb0d 	sth	zero,-148(fp)
   105cc:	00001206 	br	10618 <initialize_quantization_tables+0x240>
	{
		temp = ILqt[i];
   105d0:	e0bfdb0b 	ldhu	r2,-148(fp)
   105d4:	00c000b4 	movhi	r3,2
   105d8:	18e60504 	addi	r3,r3,-26604
   105dc:	1085883a 	add	r2,r2,r2
   105e0:	1885883a 	add	r2,r3,r2
   105e4:	1080000b 	ldhu	r2,0(r2)
   105e8:	10bfffcc 	andi	r2,r2,65535
   105ec:	e0bfdf15 	stw	r2,-132(fp)
		WRITE_FIFO(&temp, IN_BASE_4to5, CONTROL_BASE_4to5);
   105f0:	e0bfdf04 	addi	r2,fp,-132
   105f4:	1009883a 	mov	r4,r2
   105f8:	014000b4 	movhi	r5,2
   105fc:	29441b04 	addi	r5,r5,4204
   10600:	018000b4 	movhi	r6,2
   10604:	31840004 	addi	r6,r6,4096
   10608:	00101f40 	call	101f4 <WRITE_FIFO>

		Cqt[index] = (UINT8)value;
		ICqt[i] = DSP_Division(0x8000, value);
	}

	for (i = 0; i < 64; i++)
   1060c:	e0bfdb0b 	ldhu	r2,-148(fp)
   10610:	10800044 	addi	r2,r2,1
   10614:	e0bfdb0d 	sth	r2,-148(fp)
   10618:	e0bfdb0b 	ldhu	r2,-148(fp)
   1061c:	10801030 	cmpltui	r2,r2,64
   10620:	103feb1e 	bne	r2,zero,105d0 <initialize_quantization_tables+0x1f8>
	{
		temp = ILqt[i];
		WRITE_FIFO(&temp, IN_BASE_4to5, CONTROL_BASE_4to5);
	}

	for (i = 0; i < 64; i++)
   10624:	e03fdb0d 	sth	zero,-148(fp)
   10628:	00001206 	br	10674 <initialize_quantization_tables+0x29c>
	{
		temp = ICqt[i];
   1062c:	e0bfdb0b 	ldhu	r2,-148(fp)
   10630:	00c000b4 	movhi	r3,2
   10634:	18e63504 	addi	r3,r3,-26412
   10638:	1085883a 	add	r2,r2,r2
   1063c:	1885883a 	add	r2,r3,r2
   10640:	1080000b 	ldhu	r2,0(r2)
   10644:	10bfffcc 	andi	r2,r2,65535
   10648:	e0bfdf15 	stw	r2,-132(fp)
		WRITE_FIFO(&temp, IN_BASE_4to5, CONTROL_BASE_4to5);
   1064c:	e0bfdf04 	addi	r2,fp,-132
   10650:	1009883a 	mov	r4,r2
   10654:	014000b4 	movhi	r5,2
   10658:	29441b04 	addi	r5,r5,4204
   1065c:	018000b4 	movhi	r6,2
   10660:	31840004 	addi	r6,r6,4096
   10664:	00101f40 	call	101f4 <WRITE_FIFO>
	{
		temp = ILqt[i];
		WRITE_FIFO(&temp, IN_BASE_4to5, CONTROL_BASE_4to5);
	}

	for (i = 0; i < 64; i++)
   10668:	e0bfdb0b 	ldhu	r2,-148(fp)
   1066c:	10800044 	addi	r2,r2,1
   10670:	e0bfdb0d 	sth	r2,-148(fp)
   10674:	e0bfdb0b 	ldhu	r2,-148(fp)
   10678:	10801030 	cmpltui	r2,r2,64
   1067c:	103feb1e 	bne	r2,zero,1062c <initialize_quantization_tables+0x254>
	{
		temp = ICqt[i];
		WRITE_FIFO(&temp, IN_BASE_4to5, CONTROL_BASE_4to5);
	}
}
   10680:	e037883a 	mov	sp,fp
   10684:	dfc00217 	ldw	ra,8(sp)
   10688:	df000117 	ldw	fp,4(sp)
   1068c:	dc000017 	ldw	r16,0(sp)
   10690:	dec00304 	addi	sp,sp,12
   10694:	f800283a 	ret

00010698 <quantization>:

/* multiply DCT Coefficients with Quantization table and store in ZigZag location */
void quantization(UINT16 *const quant_table_ptr)
{
   10698:	defff904 	addi	sp,sp,-28
   1069c:	dfc00615 	stw	ra,24(sp)
   106a0:	df000515 	stw	fp,20(sp)
   106a4:	df000504 	addi	fp,sp,20
   106a8:	e13fff15 	stw	r4,-4(fp)
	INT32 value;
	int temp;

	// printf("Income Data:\n");

	for (i = 0; i <= 63; i++)
   106ac:	e03ffb0d 	sth	zero,-20(fp)
   106b0:	00003506 	br	10788 <quantization+0xf0>
	{
		int col = i % 8;
   106b4:	e0fffb0f 	ldh	r3,-20(fp)
   106b8:	00a00034 	movhi	r2,32768
   106bc:	108001c4 	addi	r2,r2,7
   106c0:	1884703a 	and	r2,r3,r2
   106c4:	1000040e 	bge	r2,zero,106d8 <quantization+0x40>
   106c8:	10bfffc4 	addi	r2,r2,-1
   106cc:	00fffe04 	movi	r3,-8
   106d0:	10c4b03a 	or	r2,r2,r3
   106d4:	10800044 	addi	r2,r2,1
   106d8:	10bfffcc 	andi	r2,r2,65535
   106dc:	10a0001c 	xori	r2,r2,32768
   106e0:	10a00004 	addi	r2,r2,-32768
   106e4:	e0bffc15 	stw	r2,-16(fp)

		READ_FIFO(&temp, OUT_BASE_3to4, CONTROL_BASE_3to4);
   106e8:	e0bffe04 	addi	r2,fp,-8
   106ec:	1009883a 	mov	r4,r2
   106f0:	014000b4 	movhi	r5,2
   106f4:	29441c04 	addi	r5,r5,4208
   106f8:	018000b4 	movhi	r6,2
   106fc:	31840804 	addi	r6,r6,4128
   10700:	00102580 	call	10258 <READ_FIFO>
		// printf("%4d ", temp);

		// if (col == 7)
		// 	printf("\n");

		value = (INT16)temp * quant_table_ptr[i];
   10704:	e0bffe17 	ldw	r2,-8(fp)
   10708:	10ffffcc 	andi	r3,r2,65535
   1070c:	18e0001c 	xori	r3,r3,32768
   10710:	18e00004 	addi	r3,r3,-32768
   10714:	e0bffb0f 	ldh	r2,-20(fp)
   10718:	1085883a 	add	r2,r2,r2
   1071c:	e13fff17 	ldw	r4,-4(fp)
   10720:	2085883a 	add	r2,r4,r2
   10724:	1080000b 	ldhu	r2,0(r2)
   10728:	10bfffcc 	andi	r2,r2,65535
   1072c:	1809883a 	mov	r4,r3
   10730:	100b883a 	mov	r5,r2
   10734:	00108d80 	call	108d8 <__mulsi3>
   10738:	e0bffd15 	stw	r2,-12(fp)

		value = (value + 0x4000) >> 15;
   1073c:	e0bffd17 	ldw	r2,-12(fp)
   10740:	10900004 	addi	r2,r2,16384
   10744:	1005d3fa 	srai	r2,r2,15
   10748:	e0bffd15 	stw	r2,-12(fp)

		Temp[zigzag_table[i]] = (INT16)value;
   1074c:	e0bffb0f 	ldh	r2,-20(fp)
   10750:	00c00074 	movhi	r3,1
   10754:	18d87d04 	addi	r3,r3,25076
   10758:	1885883a 	add	r2,r3,r2
   1075c:	10800003 	ldbu	r2,0(r2)
   10760:	10803fcc 	andi	r2,r2,255
   10764:	e0fffd17 	ldw	r3,-12(fp)
   10768:	010000b4 	movhi	r4,2
   1076c:	2125d504 	addi	r4,r4,-26796
   10770:	1085883a 	add	r2,r2,r2
   10774:	2085883a 	add	r2,r4,r2
   10778:	10c0000d 	sth	r3,0(r2)
	INT32 value;
	int temp;

	// printf("Income Data:\n");

	for (i = 0; i <= 63; i++)
   1077c:	e0bffb0b 	ldhu	r2,-20(fp)
   10780:	10800044 	addi	r2,r2,1
   10784:	e0bffb0d 	sth	r2,-20(fp)
   10788:	e0bffb0f 	ldh	r2,-20(fp)
   1078c:	10801010 	cmplti	r2,r2,64
   10790:	103fc81e 	bne	r2,zero,106b4 <quantization+0x1c>

	// printf("\n");

	// printf("Output Data\n");

	for (i = 0; i <= 63; i++)
   10794:	e03ffb0d 	sth	zero,-20(fp)
   10798:	00001406 	br	107ec <quantization+0x154>
	{
		temp = Temp[i];
   1079c:	e0bffb0f 	ldh	r2,-20(fp)
   107a0:	00c000b4 	movhi	r3,2
   107a4:	18e5d504 	addi	r3,r3,-26796
   107a8:	1085883a 	add	r2,r2,r2
   107ac:	1885883a 	add	r2,r3,r2
   107b0:	1080000b 	ldhu	r2,0(r2)
   107b4:	10bfffcc 	andi	r2,r2,65535
   107b8:	10a0001c 	xori	r2,r2,32768
   107bc:	10a00004 	addi	r2,r2,-32768
   107c0:	e0bffe15 	stw	r2,-8(fp)
		WRITE_FIFO(&temp, IN_BASE_4to5, CONTROL_BASE_4to5);
   107c4:	e0bffe04 	addi	r2,fp,-8
   107c8:	1009883a 	mov	r4,r2
   107cc:	014000b4 	movhi	r5,2
   107d0:	29441b04 	addi	r5,r5,4204
   107d4:	018000b4 	movhi	r6,2
   107d8:	31840004 	addi	r6,r6,4096
   107dc:	00101f40 	call	101f4 <WRITE_FIFO>

	// printf("\n");

	// printf("Output Data\n");

	for (i = 0; i <= 63; i++)
   107e0:	e0bffb0b 	ldhu	r2,-20(fp)
   107e4:	10800044 	addi	r2,r2,1
   107e8:	e0bffb0d 	sth	r2,-20(fp)
   107ec:	e0bffb0f 	ldh	r2,-20(fp)
   107f0:	10801010 	cmplti	r2,r2,64
   107f4:	103fe91e 	bne	r2,zero,1079c <quantization+0x104>
		// if (col == 7)
		// 	printf("\n");
	}

	// printf("\n");
}
   107f8:	e037883a 	mov	sp,fp
   107fc:	dfc00117 	ldw	ra,4(sp)
   10800:	df000017 	ldw	fp,0(sp)
   10804:	dec00204 	addi	sp,sp,8
   10808:	f800283a 	ret

0001080c <main>:

int main(void)
{
   1080c:	defffd04 	addi	sp,sp,-12
   10810:	dfc00215 	stw	ra,8(sp)
   10814:	df000115 	stw	fp,4(sp)
   10818:	df000104 	addi	fp,sp,4
	printf("Starting CPU4\n");
   1081c:	01000074 	movhi	r4,1
   10820:	21185b04 	addi	r4,r4,24940
   10824:	0010ac40 	call	10ac4 <puts>

	delay(1000000);
   10828:	010003f4 	movhi	r4,15
   1082c:	21109004 	addi	r4,r4,16960
   10830:	00103000 	call	10300 <delay>
	FIFO_INIT(CONTROL_BASE_4to5);
   10834:	010000b4 	movhi	r4,2
   10838:	21040004 	addi	r4,r4,4096
   1083c:	00102c00 	call	102c0 <FIFO_INIT>
	delay(1000000);
   10840:	010003f4 	movhi	r4,15
   10844:	21109004 	addi	r4,r4,16960
   10848:	00103000 	call	10300 <delay>

	while (1)
	{
		printf("Quantization Started\n");
   1084c:	01000074 	movhi	r4,1
   10850:	21185f04 	addi	r4,r4,24956
   10854:	0010ac40 	call	10ac4 <puts>

		UINT32 count;
		READ_FIFO(&count, OUT_BASE_1to4, CONTROL_BASE_1to4);
   10858:	e13fff04 	addi	r4,fp,-4
   1085c:	014000b4 	movhi	r5,2
   10860:	29441a04 	addi	r5,r5,4200
   10864:	01840034 	movhi	r6,4096
   10868:	31841004 	addi	r6,r6,4160
   1086c:	00102580 	call	10258 <READ_FIFO>

		printf("Count Done\n");
   10870:	01000074 	movhi	r4,1
   10874:	21186504 	addi	r4,r4,24980
   10878:	0010ac40 	call	10ac4 <puts>

		initialize_quantization_tables();
   1087c:	00103d80 	call	103d8 <initialize_quantization_tables>

		for (; count > 0; count--)
   10880:	00000f06 	br	108c0 <main+0xb4>
		{
			quantization(ILqt);
   10884:	010000b4 	movhi	r4,2
   10888:	21260504 	addi	r4,r4,-26604
   1088c:	00106980 	call	10698 <quantization>
			quantization(ICqt);
   10890:	010000b4 	movhi	r4,2
   10894:	21263504 	addi	r4,r4,-26412
   10898:	00106980 	call	10698 <quantization>
			quantization(ICqt);
   1089c:	010000b4 	movhi	r4,2
   108a0:	21263504 	addi	r4,r4,-26412
   108a4:	00106980 	call	10698 <quantization>

			printf("Quantization Done\n");
   108a8:	01000074 	movhi	r4,1
   108ac:	21186804 	addi	r4,r4,24992
   108b0:	0010ac40 	call	10ac4 <puts>

		printf("Count Done\n");

		initialize_quantization_tables();

		for (; count > 0; count--)
   108b4:	e0bfff17 	ldw	r2,-4(fp)
   108b8:	10bfffc4 	addi	r2,r2,-1
   108bc:	e0bfff15 	stw	r2,-4(fp)
   108c0:	e0bfff17 	ldw	r2,-4(fp)
   108c4:	103fef1e 	bne	r2,zero,10884 <main+0x78>
			quantization(ICqt);

			printf("Quantization Done\n");
		}

		printf("\n Done ! \n");
   108c8:	01000074 	movhi	r4,1
   108cc:	21186d04 	addi	r4,r4,25012
   108d0:	0010ac40 	call	10ac4 <puts>
		// break;
	}
   108d4:	003fdd06 	br	1084c <main+0x40>

000108d8 <__mulsi3>:
   108d8:	0005883a 	mov	r2,zero
   108dc:	20000726 	beq	r4,zero,108fc <__mulsi3+0x24>
   108e0:	20c0004c 	andi	r3,r4,1
   108e4:	2008d07a 	srli	r4,r4,1
   108e8:	18000126 	beq	r3,zero,108f0 <__mulsi3+0x18>
   108ec:	1145883a 	add	r2,r2,r5
   108f0:	294b883a 	add	r5,r5,r5
   108f4:	203ffa1e 	bne	r4,zero,108e0 <__mulsi3+0x8>
   108f8:	f800283a 	ret
   108fc:	f800283a 	ret

00010900 <memcpy>:
   10900:	defffb04 	addi	sp,sp,-20
   10904:	dc000015 	stw	r16,0(sp)
   10908:	dfc00415 	stw	ra,16(sp)
   1090c:	dcc00315 	stw	r19,12(sp)
   10910:	dc800215 	stw	r18,8(sp)
   10914:	dc400115 	stw	r17,4(sp)
   10918:	00c003c4 	movi	r3,15
   1091c:	2021883a 	mov	r16,r4
   10920:	3005883a 	mov	r2,r6
   10924:	1980032e 	bgeu	r3,r6,10934 <memcpy+0x34>
   10928:	2906b03a 	or	r3,r5,r4
   1092c:	18c000cc 	andi	r3,r3,3
   10930:	18001026 	beq	r3,zero,10974 <memcpy+0x74>
   10934:	8007883a 	mov	r3,r16
   10938:	288f883a 	add	r7,r5,r2
   1093c:	10000526 	beq	r2,zero,10954 <memcpy+0x54>
   10940:	29800003 	ldbu	r6,0(r5)
   10944:	18c00044 	addi	r3,r3,1
   10948:	29400044 	addi	r5,r5,1
   1094c:	19bfffc5 	stb	r6,-1(r3)
   10950:	29fffb1e 	bne	r5,r7,10940 <memcpy+0x40>
   10954:	8005883a 	mov	r2,r16
   10958:	dfc00417 	ldw	ra,16(sp)
   1095c:	dcc00317 	ldw	r19,12(sp)
   10960:	dc800217 	ldw	r18,8(sp)
   10964:	dc400117 	ldw	r17,4(sp)
   10968:	dc000017 	ldw	r16,0(sp)
   1096c:	dec00504 	addi	sp,sp,20
   10970:	f800283a 	ret
   10974:	32bffc04 	addi	r10,r6,-16
   10978:	5014d13a 	srli	r10,r10,4
   1097c:	20800404 	addi	r2,r4,16
   10980:	2007883a 	mov	r3,r4
   10984:	5008913a 	slli	r4,r10,4
   10988:	280f883a 	mov	r7,r5
   1098c:	1105883a 	add	r2,r2,r4
   10990:	3a000017 	ldw	r8,0(r7)
   10994:	18c00404 	addi	r3,r3,16
   10998:	39c00404 	addi	r7,r7,16
   1099c:	1a3ffc15 	stw	r8,-16(r3)
   109a0:	3a3ffd17 	ldw	r8,-12(r7)
   109a4:	1a3ffd15 	stw	r8,-12(r3)
   109a8:	3a3ffe17 	ldw	r8,-8(r7)
   109ac:	1a3ffe15 	stw	r8,-8(r3)
   109b0:	3a3fff17 	ldw	r8,-4(r7)
   109b4:	1a3fff15 	stw	r8,-4(r3)
   109b8:	18bff51e 	bne	r3,r2,10990 <memcpy+0x90>
   109bc:	52800044 	addi	r10,r10,1
   109c0:	5014913a 	slli	r10,r10,4
   109c4:	308003cc 	andi	r2,r6,15
   109c8:	010000c4 	movi	r4,3
   109cc:	8287883a 	add	r3,r16,r10
   109d0:	2a95883a 	add	r10,r5,r10
   109d4:	2080182e 	bgeu	r4,r2,10a38 <memcpy+0x138>
   109d8:	147fff04 	addi	r17,r2,-4
   109dc:	8808d0ba 	srli	r4,r17,2
   109e0:	1a400104 	addi	r9,r3,4
   109e4:	180d883a 	mov	r6,r3
   109e8:	2105883a 	add	r2,r4,r4
   109ec:	1085883a 	add	r2,r2,r2
   109f0:	4893883a 	add	r9,r9,r2
   109f4:	500f883a 	mov	r7,r10
   109f8:	3a000017 	ldw	r8,0(r7)
   109fc:	31800104 	addi	r6,r6,4
   10a00:	39c00104 	addi	r7,r7,4
   10a04:	323fff15 	stw	r8,-4(r6)
   10a08:	327ffb1e 	bne	r6,r9,109f8 <memcpy+0xf8>
   10a0c:	20800044 	addi	r2,r4,1
   10a10:	1085883a 	add	r2,r2,r2
   10a14:	1085883a 	add	r2,r2,r2
   10a18:	017fff04 	movi	r5,-4
   10a1c:	18a5883a 	add	r18,r3,r2
   10a20:	50a7883a 	add	r19,r10,r2
   10a24:	00108d80 	call	108d8 <__mulsi3>
   10a28:	1445883a 	add	r2,r2,r17
   10a2c:	980b883a 	mov	r5,r19
   10a30:	9007883a 	mov	r3,r18
   10a34:	003fc006 	br	10938 <memcpy+0x38>
   10a38:	500b883a 	mov	r5,r10
   10a3c:	003fbe06 	br	10938 <memcpy+0x38>

00010a40 <_puts_r>:
   10a40:	defff604 	addi	sp,sp,-40
   10a44:	dc400815 	stw	r17,32(sp)
   10a48:	2023883a 	mov	r17,r4
   10a4c:	2809883a 	mov	r4,r5
   10a50:	dc000715 	stw	r16,28(sp)
   10a54:	dfc00915 	stw	ra,36(sp)
   10a58:	2821883a 	mov	r16,r5
   10a5c:	0010ad80 	call	10ad8 <strlen>
   10a60:	10c00044 	addi	r3,r2,1
   10a64:	d8800115 	stw	r2,4(sp)
   10a68:	89400217 	ldw	r5,8(r17)
   10a6c:	00800074 	movhi	r2,1
   10a70:	10987004 	addi	r2,r2,25024
   10a74:	d8800215 	stw	r2,8(sp)
   10a78:	00800044 	movi	r2,1
   10a7c:	d8800315 	stw	r2,12(sp)
   10a80:	8809883a 	mov	r4,r17
   10a84:	00800084 	movi	r2,2
   10a88:	d9800404 	addi	r6,sp,16
   10a8c:	dc000015 	stw	r16,0(sp)
   10a90:	d8c00615 	stw	r3,24(sp)
   10a94:	dec00415 	stw	sp,16(sp)
   10a98:	d8800515 	stw	r2,20(sp)
   10a9c:	0010b640 	call	10b64 <__sfvwrite_r>
   10aa0:	1000061e 	bne	r2,zero,10abc <_puts_r+0x7c>
   10aa4:	00800284 	movi	r2,10
   10aa8:	dfc00917 	ldw	ra,36(sp)
   10aac:	dc400817 	ldw	r17,32(sp)
   10ab0:	dc000717 	ldw	r16,28(sp)
   10ab4:	dec00a04 	addi	sp,sp,40
   10ab8:	f800283a 	ret
   10abc:	00bfffc4 	movi	r2,-1
   10ac0:	003ff906 	br	10aa8 <_puts_r+0x68>

00010ac4 <puts>:
   10ac4:	00800074 	movhi	r2,1
   10ac8:	109f1204 	addi	r2,r2,31816
   10acc:	200b883a 	mov	r5,r4
   10ad0:	11000017 	ldw	r4,0(r2)
   10ad4:	0010a401 	jmpi	10a40 <_puts_r>

00010ad8 <strlen>:
   10ad8:	208000cc 	andi	r2,r4,3
   10adc:	10001f1e 	bne	r2,zero,10b5c <strlen+0x84>
   10ae0:	20800017 	ldw	r2,0(r4)
   10ae4:	01ffbff4 	movhi	r7,65279
   10ae8:	39ffbfc4 	addi	r7,r7,-257
   10aec:	01a02074 	movhi	r6,32897
   10af0:	31a02004 	addi	r6,r6,-32640
   10af4:	11c7883a 	add	r3,r2,r7
   10af8:	0084303a 	nor	r2,zero,r2
   10afc:	1886703a 	and	r3,r3,r2
   10b00:	1986703a 	and	r3,r3,r6
   10b04:	2005883a 	mov	r2,r4
   10b08:	1800101e 	bne	r3,zero,10b4c <strlen+0x74>
   10b0c:	10800104 	addi	r2,r2,4
   10b10:	10c00017 	ldw	r3,0(r2)
   10b14:	19cb883a 	add	r5,r3,r7
   10b18:	00c6303a 	nor	r3,zero,r3
   10b1c:	28c6703a 	and	r3,r5,r3
   10b20:	1986703a 	and	r3,r3,r6
   10b24:	1800091e 	bne	r3,zero,10b4c <strlen+0x74>
   10b28:	10800104 	addi	r2,r2,4
   10b2c:	10c00017 	ldw	r3,0(r2)
   10b30:	19cb883a 	add	r5,r3,r7
   10b34:	00c6303a 	nor	r3,zero,r3
   10b38:	28c6703a 	and	r3,r5,r3
   10b3c:	1986703a 	and	r3,r3,r6
   10b40:	183ff226 	beq	r3,zero,10b0c <strlen+0x34>
   10b44:	00000106 	br	10b4c <strlen+0x74>
   10b48:	10800044 	addi	r2,r2,1
   10b4c:	10c00007 	ldb	r3,0(r2)
   10b50:	183ffd1e 	bne	r3,zero,10b48 <strlen+0x70>
   10b54:	1105c83a 	sub	r2,r2,r4
   10b58:	f800283a 	ret
   10b5c:	2005883a 	mov	r2,r4
   10b60:	003ffa06 	br	10b4c <strlen+0x74>

00010b64 <__sfvwrite_r>:
   10b64:	30800217 	ldw	r2,8(r6)
   10b68:	defff504 	addi	sp,sp,-44
   10b6c:	dd400615 	stw	r21,24(sp)
   10b70:	dd000515 	stw	r20,20(sp)
   10b74:	dc000115 	stw	r16,4(sp)
   10b78:	dfc00a15 	stw	ra,40(sp)
   10b7c:	df000915 	stw	fp,36(sp)
   10b80:	ddc00815 	stw	r23,32(sp)
   10b84:	dd800715 	stw	r22,28(sp)
   10b88:	dcc00415 	stw	r19,16(sp)
   10b8c:	dc800315 	stw	r18,12(sp)
   10b90:	dc400215 	stw	r17,8(sp)
   10b94:	3029883a 	mov	r20,r6
   10b98:	202b883a 	mov	r21,r4
   10b9c:	2821883a 	mov	r16,r5
   10ba0:	10002126 	beq	r2,zero,10c28 <__sfvwrite_r+0xc4>
   10ba4:	2880030b 	ldhu	r2,12(r5)
   10ba8:	10c0020c 	andi	r3,r2,8
   10bac:	18ffffcc 	andi	r3,r3,65535
   10bb0:	18e0001c 	xori	r3,r3,32768
   10bb4:	18e00004 	addi	r3,r3,-32768
   10bb8:	18002826 	beq	r3,zero,10c5c <__sfvwrite_r+0xf8>
   10bbc:	28c00417 	ldw	r3,16(r5)
   10bc0:	18002626 	beq	r3,zero,10c5c <__sfvwrite_r+0xf8>
   10bc4:	10c0008c 	andi	r3,r2,2
   10bc8:	18ffffcc 	andi	r3,r3,65535
   10bcc:	18e0001c 	xori	r3,r3,32768
   10bd0:	18e00004 	addi	r3,r3,-32768
   10bd4:	a4400017 	ldw	r17,0(r20)
   10bd8:	18002b26 	beq	r3,zero,10c88 <__sfvwrite_r+0x124>
   10bdc:	0027883a 	mov	r19,zero
   10be0:	0025883a 	mov	r18,zero
   10be4:	05810004 	movi	r22,1024
   10be8:	980d883a 	mov	r6,r19
   10bec:	a809883a 	mov	r4,r21
   10bf0:	90004f26 	beq	r18,zero,10d30 <__sfvwrite_r+0x1cc>
   10bf4:	900f883a 	mov	r7,r18
   10bf8:	81400717 	ldw	r5,28(r16)
   10bfc:	b480012e 	bgeu	r22,r18,10c04 <__sfvwrite_r+0xa0>
   10c00:	01c10004 	movi	r7,1024
   10c04:	80800917 	ldw	r2,36(r16)
   10c08:	103ee83a 	callr	r2
   10c0c:	0080540e 	bge	zero,r2,10d60 <__sfvwrite_r+0x1fc>
   10c10:	a0c00217 	ldw	r3,8(r20)
   10c14:	98a7883a 	add	r19,r19,r2
   10c18:	90a5c83a 	sub	r18,r18,r2
   10c1c:	1885c83a 	sub	r2,r3,r2
   10c20:	a0800215 	stw	r2,8(r20)
   10c24:	103ff01e 	bne	r2,zero,10be8 <__sfvwrite_r+0x84>
   10c28:	0005883a 	mov	r2,zero
   10c2c:	dfc00a17 	ldw	ra,40(sp)
   10c30:	df000917 	ldw	fp,36(sp)
   10c34:	ddc00817 	ldw	r23,32(sp)
   10c38:	dd800717 	ldw	r22,28(sp)
   10c3c:	dd400617 	ldw	r21,24(sp)
   10c40:	dd000517 	ldw	r20,20(sp)
   10c44:	dcc00417 	ldw	r19,16(sp)
   10c48:	dc800317 	ldw	r18,12(sp)
   10c4c:	dc400217 	ldw	r17,8(sp)
   10c50:	dc000117 	ldw	r16,4(sp)
   10c54:	dec00b04 	addi	sp,sp,44
   10c58:	f800283a 	ret
   10c5c:	a809883a 	mov	r4,r21
   10c60:	800b883a 	mov	r5,r16
   10c64:	00120b00 	call	120b0 <__swsetup_r>
   10c68:	1000f01e 	bne	r2,zero,1102c <__sfvwrite_r+0x4c8>
   10c6c:	8080030b 	ldhu	r2,12(r16)
   10c70:	a4400017 	ldw	r17,0(r20)
   10c74:	10c0008c 	andi	r3,r2,2
   10c78:	18ffffcc 	andi	r3,r3,65535
   10c7c:	18e0001c 	xori	r3,r3,32768
   10c80:	18e00004 	addi	r3,r3,-32768
   10c84:	183fd51e 	bne	r3,zero,10bdc <__sfvwrite_r+0x78>
   10c88:	10c0004c 	andi	r3,r2,1
   10c8c:	002d883a 	mov	r22,zero
   10c90:	1800381e 	bne	r3,zero,10d74 <__sfvwrite_r+0x210>
   10c94:	0025883a 	mov	r18,zero
   10c98:	90002126 	beq	r18,zero,10d20 <__sfvwrite_r+0x1bc>
   10c9c:	10c0800c 	andi	r3,r2,512
   10ca0:	18ffffcc 	andi	r3,r3,65535
   10ca4:	18e0001c 	xori	r3,r3,32768
   10ca8:	18e00004 	addi	r3,r3,-32768
   10cac:	84c00217 	ldw	r19,8(r16)
   10cb0:	18006b26 	beq	r3,zero,10e60 <__sfvwrite_r+0x2fc>
   10cb4:	980f883a 	mov	r7,r19
   10cb8:	94c08636 	bltu	r18,r19,10ed4 <__sfvwrite_r+0x370>
   10cbc:	10c1200c 	andi	r3,r2,1152
   10cc0:	18009f1e 	bne	r3,zero,10f40 <__sfvwrite_r+0x3dc>
   10cc4:	81000017 	ldw	r4,0(r16)
   10cc8:	982f883a 	mov	r23,r19
   10ccc:	9039883a 	mov	fp,r18
   10cd0:	9027883a 	mov	r19,r18
   10cd4:	380d883a 	mov	r6,r7
   10cd8:	b00b883a 	mov	r5,r22
   10cdc:	d9c00015 	stw	r7,0(sp)
   10ce0:	00118c40 	call	118c4 <memmove>
   10ce4:	d9c00017 	ldw	r7,0(sp)
   10ce8:	81000217 	ldw	r4,8(r16)
   10cec:	80800017 	ldw	r2,0(r16)
   10cf0:	25efc83a 	sub	r23,r4,r23
   10cf4:	11cf883a 	add	r7,r2,r7
   10cf8:	85c00215 	stw	r23,8(r16)
   10cfc:	81c00015 	stw	r7,0(r16)
   10d00:	a0800217 	ldw	r2,8(r20)
   10d04:	b72d883a 	add	r22,r22,fp
   10d08:	9725c83a 	sub	r18,r18,fp
   10d0c:	14e7c83a 	sub	r19,r2,r19
   10d10:	a4c00215 	stw	r19,8(r20)
   10d14:	983fc426 	beq	r19,zero,10c28 <__sfvwrite_r+0xc4>
   10d18:	8080030b 	ldhu	r2,12(r16)
   10d1c:	903fdf1e 	bne	r18,zero,10c9c <__sfvwrite_r+0x138>
   10d20:	8d800017 	ldw	r22,0(r17)
   10d24:	8c800117 	ldw	r18,4(r17)
   10d28:	8c400204 	addi	r17,r17,8
   10d2c:	003fda06 	br	10c98 <__sfvwrite_r+0x134>
   10d30:	8cc00017 	ldw	r19,0(r17)
   10d34:	8c800117 	ldw	r18,4(r17)
   10d38:	8c400204 	addi	r17,r17,8
   10d3c:	003faa06 	br	10be8 <__sfvwrite_r+0x84>
   10d40:	0011a500 	call	11a50 <_realloc_r>
   10d44:	102f883a 	mov	r23,r2
   10d48:	10009f1e 	bne	r2,zero,10fc8 <__sfvwrite_r+0x464>
   10d4c:	81400417 	ldw	r5,16(r16)
   10d50:	a809883a 	mov	r4,r21
   10d54:	00128640 	call	12864 <_free_r>
   10d58:	00800304 	movi	r2,12
   10d5c:	a8800015 	stw	r2,0(r21)
   10d60:	80c0030b 	ldhu	r3,12(r16)
   10d64:	00bfffc4 	movi	r2,-1
   10d68:	18c01014 	ori	r3,r3,64
   10d6c:	80c0030d 	sth	r3,12(r16)
   10d70:	003fae06 	br	10c2c <__sfvwrite_r+0xc8>
   10d74:	0007883a 	mov	r3,zero
   10d78:	0039883a 	mov	fp,zero
   10d7c:	0025883a 	mov	r18,zero
   10d80:	90001e26 	beq	r18,zero,10dfc <__sfvwrite_r+0x298>
   10d84:	18006526 	beq	r3,zero,10f1c <__sfvwrite_r+0x3b8>
   10d88:	b02f883a 	mov	r23,r22
   10d8c:	9580012e 	bgeu	r18,r22,10d94 <__sfvwrite_r+0x230>
   10d90:	902f883a 	mov	r23,r18
   10d94:	81000017 	ldw	r4,0(r16)
   10d98:	80800417 	ldw	r2,16(r16)
   10d9c:	84c00217 	ldw	r19,8(r16)
   10da0:	81c00517 	ldw	r7,20(r16)
   10da4:	1100022e 	bgeu	r2,r4,10db0 <__sfvwrite_r+0x24c>
   10da8:	99e7883a 	add	r19,r19,r7
   10dac:	9dc01816 	blt	r19,r23,10e10 <__sfvwrite_r+0x2ac>
   10db0:	b9c03b16 	blt	r23,r7,10ea0 <__sfvwrite_r+0x33c>
   10db4:	80800917 	ldw	r2,36(r16)
   10db8:	81400717 	ldw	r5,28(r16)
   10dbc:	a809883a 	mov	r4,r21
   10dc0:	d8c00015 	stw	r3,0(sp)
   10dc4:	e00d883a 	mov	r6,fp
   10dc8:	103ee83a 	callr	r2
   10dcc:	1027883a 	mov	r19,r2
   10dd0:	d8c00017 	ldw	r3,0(sp)
   10dd4:	00bfe20e 	bge	zero,r2,10d60 <__sfvwrite_r+0x1fc>
   10dd8:	b4edc83a 	sub	r22,r22,r19
   10ddc:	b0001a26 	beq	r22,zero,10e48 <__sfvwrite_r+0x2e4>
   10de0:	a0800217 	ldw	r2,8(r20)
   10de4:	e4f9883a 	add	fp,fp,r19
   10de8:	94e5c83a 	sub	r18,r18,r19
   10dec:	14e7c83a 	sub	r19,r2,r19
   10df0:	a4c00215 	stw	r19,8(r20)
   10df4:	983f8c26 	beq	r19,zero,10c28 <__sfvwrite_r+0xc4>
   10df8:	903fe21e 	bne	r18,zero,10d84 <__sfvwrite_r+0x220>
   10dfc:	8f000017 	ldw	fp,0(r17)
   10e00:	8c800117 	ldw	r18,4(r17)
   10e04:	0007883a 	mov	r3,zero
   10e08:	8c400204 	addi	r17,r17,8
   10e0c:	003fdc06 	br	10d80 <__sfvwrite_r+0x21c>
   10e10:	e00b883a 	mov	r5,fp
   10e14:	980d883a 	mov	r6,r19
   10e18:	d8c00015 	stw	r3,0(sp)
   10e1c:	00118c40 	call	118c4 <memmove>
   10e20:	80800017 	ldw	r2,0(r16)
   10e24:	a809883a 	mov	r4,r21
   10e28:	800b883a 	mov	r5,r16
   10e2c:	14c5883a 	add	r2,r2,r19
   10e30:	80800015 	stw	r2,0(r16)
   10e34:	00122240 	call	12224 <_fflush_r>
   10e38:	d8c00017 	ldw	r3,0(sp)
   10e3c:	103fc81e 	bne	r2,zero,10d60 <__sfvwrite_r+0x1fc>
   10e40:	b4edc83a 	sub	r22,r22,r19
   10e44:	b03fe61e 	bne	r22,zero,10de0 <__sfvwrite_r+0x27c>
   10e48:	a809883a 	mov	r4,r21
   10e4c:	800b883a 	mov	r5,r16
   10e50:	00122240 	call	12224 <_fflush_r>
   10e54:	103fc21e 	bne	r2,zero,10d60 <__sfvwrite_r+0x1fc>
   10e58:	0007883a 	mov	r3,zero
   10e5c:	003fe006 	br	10de0 <__sfvwrite_r+0x27c>
   10e60:	81000017 	ldw	r4,0(r16)
   10e64:	80800417 	ldw	r2,16(r16)
   10e68:	1100022e 	bgeu	r2,r4,10e74 <__sfvwrite_r+0x310>
   10e6c:	9839883a 	mov	fp,r19
   10e70:	9c806036 	bltu	r19,r18,10ff4 <__sfvwrite_r+0x490>
   10e74:	81c00517 	ldw	r7,20(r16)
   10e78:	91c01c36 	bltu	r18,r7,10eec <__sfvwrite_r+0x388>
   10e7c:	80800917 	ldw	r2,36(r16)
   10e80:	81400717 	ldw	r5,28(r16)
   10e84:	a809883a 	mov	r4,r21
   10e88:	b00d883a 	mov	r6,r22
   10e8c:	103ee83a 	callr	r2
   10e90:	1027883a 	mov	r19,r2
   10e94:	00bfb20e 	bge	zero,r2,10d60 <__sfvwrite_r+0x1fc>
   10e98:	1039883a 	mov	fp,r2
   10e9c:	003f9806 	br	10d00 <__sfvwrite_r+0x19c>
   10ea0:	b80d883a 	mov	r6,r23
   10ea4:	e00b883a 	mov	r5,fp
   10ea8:	d8c00015 	stw	r3,0(sp)
   10eac:	00118c40 	call	118c4 <memmove>
   10eb0:	80800217 	ldw	r2,8(r16)
   10eb4:	81000017 	ldw	r4,0(r16)
   10eb8:	b827883a 	mov	r19,r23
   10ebc:	15c5c83a 	sub	r2,r2,r23
   10ec0:	25ef883a 	add	r23,r4,r23
   10ec4:	80800215 	stw	r2,8(r16)
   10ec8:	85c00015 	stw	r23,0(r16)
   10ecc:	d8c00017 	ldw	r3,0(sp)
   10ed0:	003fc106 	br	10dd8 <__sfvwrite_r+0x274>
   10ed4:	81000017 	ldw	r4,0(r16)
   10ed8:	902f883a 	mov	r23,r18
   10edc:	9039883a 	mov	fp,r18
   10ee0:	9027883a 	mov	r19,r18
   10ee4:	900f883a 	mov	r7,r18
   10ee8:	003f7a06 	br	10cd4 <__sfvwrite_r+0x170>
   10eec:	b00b883a 	mov	r5,r22
   10ef0:	900d883a 	mov	r6,r18
   10ef4:	00118c40 	call	118c4 <memmove>
   10ef8:	80c00217 	ldw	r3,8(r16)
   10efc:	80800017 	ldw	r2,0(r16)
   10f00:	9027883a 	mov	r19,r18
   10f04:	1c87c83a 	sub	r3,r3,r18
   10f08:	1485883a 	add	r2,r2,r18
   10f0c:	80c00215 	stw	r3,8(r16)
   10f10:	80800015 	stw	r2,0(r16)
   10f14:	9039883a 	mov	fp,r18
   10f18:	003f7906 	br	10d00 <__sfvwrite_r+0x19c>
   10f1c:	e009883a 	mov	r4,fp
   10f20:	01400284 	movi	r5,10
   10f24:	900d883a 	mov	r6,r18
   10f28:	00117cc0 	call	117cc <memchr>
   10f2c:	10003c26 	beq	r2,zero,11020 <__sfvwrite_r+0x4bc>
   10f30:	15800044 	addi	r22,r2,1
   10f34:	b72dc83a 	sub	r22,r22,fp
   10f38:	00c00044 	movi	r3,1
   10f3c:	003f9206 	br	10d88 <__sfvwrite_r+0x224>
   10f40:	81000517 	ldw	r4,20(r16)
   10f44:	81400417 	ldw	r5,16(r16)
   10f48:	80c00017 	ldw	r3,0(r16)
   10f4c:	210d883a 	add	r6,r4,r4
   10f50:	3109883a 	add	r4,r6,r4
   10f54:	2026d7fa 	srli	r19,r4,31
   10f58:	1979c83a 	sub	fp,r3,r5
   10f5c:	e1800044 	addi	r6,fp,1
   10f60:	9909883a 	add	r4,r19,r4
   10f64:	2027d07a 	srai	r19,r4,1
   10f68:	3489883a 	add	r4,r6,r18
   10f6c:	980d883a 	mov	r6,r19
   10f70:	9900022e 	bgeu	r19,r4,10f7c <__sfvwrite_r+0x418>
   10f74:	2027883a 	mov	r19,r4
   10f78:	200d883a 	mov	r6,r4
   10f7c:	1081000c 	andi	r2,r2,1024
   10f80:	10bfffcc 	andi	r2,r2,65535
   10f84:	10a0001c 	xori	r2,r2,32768
   10f88:	10a00004 	addi	r2,r2,-32768
   10f8c:	a809883a 	mov	r4,r21
   10f90:	103f6b26 	beq	r2,zero,10d40 <__sfvwrite_r+0x1dc>
   10f94:	300b883a 	mov	r5,r6
   10f98:	00110480 	call	11048 <_malloc_r>
   10f9c:	102f883a 	mov	r23,r2
   10fa0:	103f6d26 	beq	r2,zero,10d58 <__sfvwrite_r+0x1f4>
   10fa4:	81400417 	ldw	r5,16(r16)
   10fa8:	1009883a 	mov	r4,r2
   10fac:	e00d883a 	mov	r6,fp
   10fb0:	00109000 	call	10900 <memcpy>
   10fb4:	8080030b 	ldhu	r2,12(r16)
   10fb8:	00fedfc4 	movi	r3,-1153
   10fbc:	10c4703a 	and	r2,r2,r3
   10fc0:	10802014 	ori	r2,r2,128
   10fc4:	8080030d 	sth	r2,12(r16)
   10fc8:	bf09883a 	add	r4,r23,fp
   10fcc:	9f07c83a 	sub	r3,r19,fp
   10fd0:	85c00415 	stw	r23,16(r16)
   10fd4:	84c00515 	stw	r19,20(r16)
   10fd8:	81000015 	stw	r4,0(r16)
   10fdc:	902f883a 	mov	r23,r18
   10fe0:	80c00215 	stw	r3,8(r16)
   10fe4:	9039883a 	mov	fp,r18
   10fe8:	9027883a 	mov	r19,r18
   10fec:	900f883a 	mov	r7,r18
   10ff0:	003f3806 	br	10cd4 <__sfvwrite_r+0x170>
   10ff4:	b00b883a 	mov	r5,r22
   10ff8:	980d883a 	mov	r6,r19
   10ffc:	00118c40 	call	118c4 <memmove>
   11000:	80800017 	ldw	r2,0(r16)
   11004:	a809883a 	mov	r4,r21
   11008:	800b883a 	mov	r5,r16
   1100c:	14c5883a 	add	r2,r2,r19
   11010:	80800015 	stw	r2,0(r16)
   11014:	00122240 	call	12224 <_fflush_r>
   11018:	103f3926 	beq	r2,zero,10d00 <__sfvwrite_r+0x19c>
   1101c:	003f5006 	br	10d60 <__sfvwrite_r+0x1fc>
   11020:	95800044 	addi	r22,r18,1
   11024:	00c00044 	movi	r3,1
   11028:	003f5706 	br	10d88 <__sfvwrite_r+0x224>
   1102c:	80c0030b 	ldhu	r3,12(r16)
   11030:	00bfffc4 	movi	r2,-1
   11034:	18c01014 	ori	r3,r3,64
   11038:	80c0030d 	sth	r3,12(r16)
   1103c:	00c00244 	movi	r3,9
   11040:	a8c00015 	stw	r3,0(r21)
   11044:	003ef906 	br	10c2c <__sfvwrite_r+0xc8>

00011048 <_malloc_r>:
   11048:	defff604 	addi	sp,sp,-40
   1104c:	dc800215 	stw	r18,8(sp)
   11050:	dfc00915 	stw	ra,36(sp)
   11054:	df000815 	stw	fp,32(sp)
   11058:	ddc00715 	stw	r23,28(sp)
   1105c:	dd800615 	stw	r22,24(sp)
   11060:	dd400515 	stw	r21,20(sp)
   11064:	dd000415 	stw	r20,16(sp)
   11068:	dcc00315 	stw	r19,12(sp)
   1106c:	dc400115 	stw	r17,4(sp)
   11070:	dc000015 	stw	r16,0(sp)
   11074:	288002c4 	addi	r2,r5,11
   11078:	00c00584 	movi	r3,22
   1107c:	2025883a 	mov	r18,r4
   11080:	18802b2e 	bgeu	r3,r2,11130 <_malloc_r+0xe8>
   11084:	047ffe04 	movi	r17,-8
   11088:	1462703a 	and	r17,r2,r17
   1108c:	88002a16 	blt	r17,zero,11138 <_malloc_r+0xf0>
   11090:	89402936 	bltu	r17,r5,11138 <_malloc_r+0xf0>
   11094:	9009883a 	mov	r4,r18
   11098:	00139e00 	call	139e0 <__malloc_lock>
   1109c:	00807dc4 	movi	r2,503
   110a0:	14402936 	bltu	r2,r17,11148 <_malloc_r+0x100>
   110a4:	8808d0fa 	srli	r4,r17,3
   110a8:	04c00074 	movhi	r19,1
   110ac:	9cd98d04 	addi	r19,r19,26164
   110b0:	2105883a 	add	r2,r4,r4
   110b4:	1085883a 	add	r2,r2,r2
   110b8:	1085883a 	add	r2,r2,r2
   110bc:	9885883a 	add	r2,r19,r2
   110c0:	14000317 	ldw	r16,12(r2)
   110c4:	80815526 	beq	r16,r2,1161c <_malloc_r+0x5d4>
   110c8:	81000117 	ldw	r4,4(r16)
   110cc:	00bfff04 	movi	r2,-4
   110d0:	80c00317 	ldw	r3,12(r16)
   110d4:	2084703a 	and	r2,r4,r2
   110d8:	8085883a 	add	r2,r16,r2
   110dc:	11800117 	ldw	r6,4(r2)
   110e0:	81400217 	ldw	r5,8(r16)
   110e4:	9009883a 	mov	r4,r18
   110e8:	31800054 	ori	r6,r6,1
   110ec:	11800115 	stw	r6,4(r2)
   110f0:	28c00315 	stw	r3,12(r5)
   110f4:	19400215 	stw	r5,8(r3)
   110f8:	0013a000 	call	13a00 <__malloc_unlock>
   110fc:	80800204 	addi	r2,r16,8
   11100:	dfc00917 	ldw	ra,36(sp)
   11104:	df000817 	ldw	fp,32(sp)
   11108:	ddc00717 	ldw	r23,28(sp)
   1110c:	dd800617 	ldw	r22,24(sp)
   11110:	dd400517 	ldw	r21,20(sp)
   11114:	dd000417 	ldw	r20,16(sp)
   11118:	dcc00317 	ldw	r19,12(sp)
   1111c:	dc800217 	ldw	r18,8(sp)
   11120:	dc400117 	ldw	r17,4(sp)
   11124:	dc000017 	ldw	r16,0(sp)
   11128:	dec00a04 	addi	sp,sp,40
   1112c:	f800283a 	ret
   11130:	04400404 	movi	r17,16
   11134:	897fd72e 	bgeu	r17,r5,11094 <_malloc_r+0x4c>
   11138:	00800304 	movi	r2,12
   1113c:	90800015 	stw	r2,0(r18)
   11140:	0005883a 	mov	r2,zero
   11144:	003fee06 	br	11100 <_malloc_r+0xb8>
   11148:	8808d27a 	srli	r4,r17,9
   1114c:	20007126 	beq	r4,zero,11314 <_malloc_r+0x2cc>
   11150:	00800104 	movi	r2,4
   11154:	1100eb36 	bltu	r2,r4,11504 <_malloc_r+0x4bc>
   11158:	8808d1ba 	srli	r4,r17,6
   1115c:	21000e04 	addi	r4,r4,56
   11160:	210b883a 	add	r5,r4,r4
   11164:	294b883a 	add	r5,r5,r5
   11168:	294b883a 	add	r5,r5,r5
   1116c:	04c00074 	movhi	r19,1
   11170:	9cd98d04 	addi	r19,r19,26164
   11174:	994b883a 	add	r5,r19,r5
   11178:	2c000317 	ldw	r16,12(r5)
   1117c:	2c000e26 	beq	r5,r16,111b8 <_malloc_r+0x170>
   11180:	80c00117 	ldw	r3,4(r16)
   11184:	01ffff04 	movi	r7,-4
   11188:	018003c4 	movi	r6,15
   1118c:	19c6703a 	and	r3,r3,r7
   11190:	1c45c83a 	sub	r2,r3,r17
   11194:	30800716 	blt	r6,r2,111b4 <_malloc_r+0x16c>
   11198:	1000610e 	bge	r2,zero,11320 <_malloc_r+0x2d8>
   1119c:	84000317 	ldw	r16,12(r16)
   111a0:	2c000526 	beq	r5,r16,111b8 <_malloc_r+0x170>
   111a4:	80c00117 	ldw	r3,4(r16)
   111a8:	19c6703a 	and	r3,r3,r7
   111ac:	1c45c83a 	sub	r2,r3,r17
   111b0:	30bff90e 	bge	r6,r2,11198 <_malloc_r+0x150>
   111b4:	213fffc4 	addi	r4,r4,-1
   111b8:	21000044 	addi	r4,r4,1
   111bc:	9c000417 	ldw	r16,16(r19)
   111c0:	00c00074 	movhi	r3,1
   111c4:	18d98d04 	addi	r3,r3,26164
   111c8:	1a400204 	addi	r9,r3,8
   111cc:	8240ff26 	beq	r16,r9,115cc <_malloc_r+0x584>
   111d0:	81400117 	ldw	r5,4(r16)
   111d4:	00bfff04 	movi	r2,-4
   111d8:	018003c4 	movi	r6,15
   111dc:	2884703a 	and	r2,r5,r2
   111e0:	144bc83a 	sub	r5,r2,r17
   111e4:	3140ea16 	blt	r6,r5,11590 <_malloc_r+0x548>
   111e8:	1a400515 	stw	r9,20(r3)
   111ec:	1a400415 	stw	r9,16(r3)
   111f0:	2800570e 	bge	r5,zero,11350 <_malloc_r+0x308>
   111f4:	01407fc4 	movi	r5,511
   111f8:	2880ca36 	bltu	r5,r2,11524 <_malloc_r+0x4dc>
   111fc:	1004d0fa 	srli	r2,r2,3
   11200:	02000044 	movi	r8,1
   11204:	19c00117 	ldw	r7,4(r3)
   11208:	108b883a 	add	r5,r2,r2
   1120c:	294b883a 	add	r5,r5,r5
   11210:	1005d0ba 	srai	r2,r2,2
   11214:	294b883a 	add	r5,r5,r5
   11218:	28cb883a 	add	r5,r5,r3
   1121c:	29800217 	ldw	r6,8(r5)
   11220:	4084983a 	sll	r2,r8,r2
   11224:	81400315 	stw	r5,12(r16)
   11228:	81800215 	stw	r6,8(r16)
   1122c:	11c4b03a 	or	r2,r2,r7
   11230:	18800115 	stw	r2,4(r3)
   11234:	2c000215 	stw	r16,8(r5)
   11238:	34000315 	stw	r16,12(r6)
   1123c:	200bd0ba 	srai	r5,r4,2
   11240:	00c00044 	movi	r3,1
   11244:	194a983a 	sll	r5,r3,r5
   11248:	11404936 	bltu	r2,r5,11370 <_malloc_r+0x328>
   1124c:	1146703a 	and	r3,r2,r5
   11250:	18000a1e 	bne	r3,zero,1127c <_malloc_r+0x234>
   11254:	00ffff04 	movi	r3,-4
   11258:	294b883a 	add	r5,r5,r5
   1125c:	20c8703a 	and	r4,r4,r3
   11260:	1146703a 	and	r3,r2,r5
   11264:	21000104 	addi	r4,r4,4
   11268:	1800041e 	bne	r3,zero,1127c <_malloc_r+0x234>
   1126c:	294b883a 	add	r5,r5,r5
   11270:	1146703a 	and	r3,r2,r5
   11274:	21000104 	addi	r4,r4,4
   11278:	183ffc26 	beq	r3,zero,1126c <_malloc_r+0x224>
   1127c:	023fff04 	movi	r8,-4
   11280:	01c003c4 	movi	r7,15
   11284:	2105883a 	add	r2,r4,r4
   11288:	1085883a 	add	r2,r2,r2
   1128c:	1085883a 	add	r2,r2,r2
   11290:	9899883a 	add	r12,r19,r2
   11294:	62800304 	addi	r10,r12,12
   11298:	2017883a 	mov	r11,r4
   1129c:	54000017 	ldw	r16,0(r10)
   112a0:	51bffd04 	addi	r6,r10,-12
   112a4:	8180041e 	bne	r16,r6,112b8 <_malloc_r+0x270>
   112a8:	0000ca06 	br	115d4 <_malloc_r+0x58c>
   112ac:	10001c0e 	bge	r2,zero,11320 <_malloc_r+0x2d8>
   112b0:	84000317 	ldw	r16,12(r16)
   112b4:	8180c726 	beq	r16,r6,115d4 <_malloc_r+0x58c>
   112b8:	80c00117 	ldw	r3,4(r16)
   112bc:	1a06703a 	and	r3,r3,r8
   112c0:	1c45c83a 	sub	r2,r3,r17
   112c4:	38bff90e 	bge	r7,r2,112ac <_malloc_r+0x264>
   112c8:	81000317 	ldw	r4,12(r16)
   112cc:	81400217 	ldw	r5,8(r16)
   112d0:	8447883a 	add	r3,r16,r17
   112d4:	8c400054 	ori	r17,r17,1
   112d8:	29000315 	stw	r4,12(r5)
   112dc:	21400215 	stw	r5,8(r4)
   112e0:	84400115 	stw	r17,4(r16)
   112e4:	1889883a 	add	r4,r3,r2
   112e8:	11400054 	ori	r5,r2,1
   112ec:	98c00515 	stw	r3,20(r19)
   112f0:	98c00415 	stw	r3,16(r19)
   112f4:	20800015 	stw	r2,0(r4)
   112f8:	1a400315 	stw	r9,12(r3)
   112fc:	1a400215 	stw	r9,8(r3)
   11300:	19400115 	stw	r5,4(r3)
   11304:	9009883a 	mov	r4,r18
   11308:	0013a000 	call	13a00 <__malloc_unlock>
   1130c:	80800204 	addi	r2,r16,8
   11310:	003f7b06 	br	11100 <_malloc_r+0xb8>
   11314:	8808d0fa 	srli	r4,r17,3
   11318:	210b883a 	add	r5,r4,r4
   1131c:	003f9106 	br	11164 <_malloc_r+0x11c>
   11320:	80c7883a 	add	r3,r16,r3
   11324:	19400117 	ldw	r5,4(r3)
   11328:	80800317 	ldw	r2,12(r16)
   1132c:	81000217 	ldw	r4,8(r16)
   11330:	29400054 	ori	r5,r5,1
   11334:	19400115 	stw	r5,4(r3)
   11338:	20800315 	stw	r2,12(r4)
   1133c:	11000215 	stw	r4,8(r2)
   11340:	9009883a 	mov	r4,r18
   11344:	0013a000 	call	13a00 <__malloc_unlock>
   11348:	80800204 	addi	r2,r16,8
   1134c:	003f6c06 	br	11100 <_malloc_r+0xb8>
   11350:	8085883a 	add	r2,r16,r2
   11354:	10c00117 	ldw	r3,4(r2)
   11358:	9009883a 	mov	r4,r18
   1135c:	18c00054 	ori	r3,r3,1
   11360:	10c00115 	stw	r3,4(r2)
   11364:	0013a000 	call	13a00 <__malloc_unlock>
   11368:	80800204 	addi	r2,r16,8
   1136c:	003f6406 	br	11100 <_malloc_r+0xb8>
   11370:	9c000217 	ldw	r16,8(r19)
   11374:	00bfff04 	movi	r2,-4
   11378:	85400117 	ldw	r21,4(r16)
   1137c:	a8aa703a 	and	r21,r21,r2
   11380:	ac400336 	bltu	r21,r17,11390 <_malloc_r+0x348>
   11384:	ac45c83a 	sub	r2,r21,r17
   11388:	00c003c4 	movi	r3,15
   1138c:	18805316 	blt	r3,r2,114dc <_malloc_r+0x494>
   11390:	d5e6b217 	ldw	r23,-25912(gp)
   11394:	d0e00217 	ldw	r3,-32760(gp)
   11398:	00bfffc4 	movi	r2,-1
   1139c:	8579883a 	add	fp,r16,r21
   113a0:	8def883a 	add	r23,r17,r23
   113a4:	1880d226 	beq	r3,r2,116f0 <_malloc_r+0x6a8>
   113a8:	bdc403c4 	addi	r23,r23,4111
   113ac:	00bc0004 	movi	r2,-4096
   113b0:	b8ae703a 	and	r23,r23,r2
   113b4:	9009883a 	mov	r4,r18
   113b8:	b80b883a 	mov	r5,r23
   113bc:	001204c0 	call	1204c <_sbrk_r>
   113c0:	1029883a 	mov	r20,r2
   113c4:	00bfffc4 	movi	r2,-1
   113c8:	a080d126 	beq	r20,r2,11710 <_malloc_r+0x6c8>
   113cc:	a7009f36 	bltu	r20,fp,1164c <_malloc_r+0x604>
   113d0:	058000b4 	movhi	r22,2
   113d4:	b5a5cb04 	addi	r22,r22,-26836
   113d8:	b0800017 	ldw	r2,0(r22)
   113dc:	b885883a 	add	r2,r23,r2
   113e0:	b0800015 	stw	r2,0(r22)
   113e4:	e500cf26 	beq	fp,r20,11724 <_malloc_r+0x6dc>
   113e8:	d1200217 	ldw	r4,-32760(gp)
   113ec:	00ffffc4 	movi	r3,-1
   113f0:	20c0e026 	beq	r4,r3,11774 <_malloc_r+0x72c>
   113f4:	a739c83a 	sub	fp,r20,fp
   113f8:	1705883a 	add	r2,r2,fp
   113fc:	b0800015 	stw	r2,0(r22)
   11400:	a08001cc 	andi	r2,r20,7
   11404:	1000a526 	beq	r2,zero,1169c <_malloc_r+0x654>
   11408:	a0a9c83a 	sub	r20,r20,r2
   1140c:	00c40204 	movi	r3,4104
   11410:	a5000204 	addi	r20,r20,8
   11414:	1885c83a 	sub	r2,r3,r2
   11418:	a5c7883a 	add	r3,r20,r23
   1141c:	18c3ffcc 	andi	r3,r3,4095
   11420:	10efc83a 	sub	r23,r2,r3
   11424:	9009883a 	mov	r4,r18
   11428:	b80b883a 	mov	r5,r23
   1142c:	001204c0 	call	1204c <_sbrk_r>
   11430:	00ffffc4 	movi	r3,-1
   11434:	10c0cc26 	beq	r2,r3,11768 <_malloc_r+0x720>
   11438:	1505c83a 	sub	r2,r2,r20
   1143c:	b887883a 	add	r3,r23,r2
   11440:	18c00054 	ori	r3,r3,1
   11444:	b0800017 	ldw	r2,0(r22)
   11448:	9d000215 	stw	r20,8(r19)
   1144c:	a0c00115 	stw	r3,4(r20)
   11450:	b885883a 	add	r2,r23,r2
   11454:	b0800015 	stw	r2,0(r22)
   11458:	84c00e26 	beq	r16,r19,11494 <_malloc_r+0x44c>
   1145c:	00c003c4 	movi	r3,15
   11460:	1d40902e 	bgeu	r3,r21,116a4 <_malloc_r+0x65c>
   11464:	ad7ffd04 	addi	r21,r21,-12
   11468:	013ffe04 	movi	r4,-8
   1146c:	a908703a 	and	r4,r21,r4
   11470:	810b883a 	add	r5,r16,r4
   11474:	01800144 	movi	r6,5
   11478:	29800115 	stw	r6,4(r5)
   1147c:	29800215 	stw	r6,8(r5)
   11480:	81400117 	ldw	r5,4(r16)
   11484:	2940004c 	andi	r5,r5,1
   11488:	214ab03a 	or	r5,r4,r5
   1148c:	81400115 	stw	r5,4(r16)
   11490:	1900ae36 	bltu	r3,r4,1174c <_malloc_r+0x704>
   11494:	d0e6b117 	ldw	r3,-25916(gp)
   11498:	1880012e 	bgeu	r3,r2,114a0 <_malloc_r+0x458>
   1149c:	d0a6b115 	stw	r2,-25916(gp)
   114a0:	d0e6b017 	ldw	r3,-25920(gp)
   114a4:	9c000217 	ldw	r16,8(r19)
   114a8:	1880012e 	bgeu	r3,r2,114b0 <_malloc_r+0x468>
   114ac:	d0a6b015 	stw	r2,-25920(gp)
   114b0:	80c00117 	ldw	r3,4(r16)
   114b4:	00bfff04 	movi	r2,-4
   114b8:	1886703a 	and	r3,r3,r2
   114bc:	1c45c83a 	sub	r2,r3,r17
   114c0:	1c400236 	bltu	r3,r17,114cc <_malloc_r+0x484>
   114c4:	00c003c4 	movi	r3,15
   114c8:	18800416 	blt	r3,r2,114dc <_malloc_r+0x494>
   114cc:	9009883a 	mov	r4,r18
   114d0:	0013a000 	call	13a00 <__malloc_unlock>
   114d4:	0005883a 	mov	r2,zero
   114d8:	003f0906 	br	11100 <_malloc_r+0xb8>
   114dc:	88c00054 	ori	r3,r17,1
   114e0:	10800054 	ori	r2,r2,1
   114e4:	80c00115 	stw	r3,4(r16)
   114e8:	8463883a 	add	r17,r16,r17
   114ec:	88800115 	stw	r2,4(r17)
   114f0:	9009883a 	mov	r4,r18
   114f4:	9c400215 	stw	r17,8(r19)
   114f8:	0013a000 	call	13a00 <__malloc_unlock>
   114fc:	80800204 	addi	r2,r16,8
   11500:	003eff06 	br	11100 <_malloc_r+0xb8>
   11504:	00800504 	movi	r2,20
   11508:	1100492e 	bgeu	r2,r4,11630 <_malloc_r+0x5e8>
   1150c:	00801504 	movi	r2,84
   11510:	11005c36 	bltu	r2,r4,11684 <_malloc_r+0x63c>
   11514:	8808d33a 	srli	r4,r17,12
   11518:	21001b84 	addi	r4,r4,110
   1151c:	210b883a 	add	r5,r4,r4
   11520:	003f1006 	br	11164 <_malloc_r+0x11c>
   11524:	1006d27a 	srli	r3,r2,9
   11528:	01400104 	movi	r5,4
   1152c:	28c0432e 	bgeu	r5,r3,1163c <_malloc_r+0x5f4>
   11530:	01400504 	movi	r5,20
   11534:	28c07036 	bltu	r5,r3,116f8 <_malloc_r+0x6b0>
   11538:	194016c4 	addi	r5,r3,91
   1153c:	294d883a 	add	r6,r5,r5
   11540:	318d883a 	add	r6,r6,r6
   11544:	318d883a 	add	r6,r6,r6
   11548:	998d883a 	add	r6,r19,r6
   1154c:	30c00217 	ldw	r3,8(r6)
   11550:	01c00074 	movhi	r7,1
   11554:	39d98d04 	addi	r7,r7,26164
   11558:	19805726 	beq	r3,r6,116b8 <_malloc_r+0x670>
   1155c:	01ffff04 	movi	r7,-4
   11560:	19400117 	ldw	r5,4(r3)
   11564:	29ca703a 	and	r5,r5,r7
   11568:	1140022e 	bgeu	r2,r5,11574 <_malloc_r+0x52c>
   1156c:	18c00217 	ldw	r3,8(r3)
   11570:	30fffb1e 	bne	r6,r3,11560 <_malloc_r+0x518>
   11574:	19400317 	ldw	r5,12(r3)
   11578:	98800117 	ldw	r2,4(r19)
   1157c:	81400315 	stw	r5,12(r16)
   11580:	80c00215 	stw	r3,8(r16)
   11584:	2c000215 	stw	r16,8(r5)
   11588:	1c000315 	stw	r16,12(r3)
   1158c:	003f2b06 	br	1123c <_malloc_r+0x1f4>
   11590:	8445883a 	add	r2,r16,r17
   11594:	8c400054 	ori	r17,r17,1
   11598:	18800515 	stw	r2,20(r3)
   1159c:	18800415 	stw	r2,16(r3)
   115a0:	29000054 	ori	r4,r5,1
   115a4:	1147883a 	add	r3,r2,r5
   115a8:	84400115 	stw	r17,4(r16)
   115ac:	11000115 	stw	r4,4(r2)
   115b0:	12400315 	stw	r9,12(r2)
   115b4:	12400215 	stw	r9,8(r2)
   115b8:	19400015 	stw	r5,0(r3)
   115bc:	9009883a 	mov	r4,r18
   115c0:	0013a000 	call	13a00 <__malloc_unlock>
   115c4:	80800204 	addi	r2,r16,8
   115c8:	003ecd06 	br	11100 <_malloc_r+0xb8>
   115cc:	18800117 	ldw	r2,4(r3)
   115d0:	003f1a06 	br	1123c <_malloc_r+0x1f4>
   115d4:	5ac00044 	addi	r11,r11,1
   115d8:	588000cc 	andi	r2,r11,3
   115dc:	52800204 	addi	r10,r10,8
   115e0:	103f2e1e 	bne	r2,zero,1129c <_malloc_r+0x254>
   115e4:	20c000cc 	andi	r3,r4,3
   115e8:	60bffe04 	addi	r2,r12,-8
   115ec:	18006f26 	beq	r3,zero,117ac <_malloc_r+0x764>
   115f0:	63000017 	ldw	r12,0(r12)
   115f4:	213fffc4 	addi	r4,r4,-1
   115f8:	60bffa26 	beq	r12,r2,115e4 <_malloc_r+0x59c>
   115fc:	98800117 	ldw	r2,4(r19)
   11600:	294b883a 	add	r5,r5,r5
   11604:	117f5a36 	bltu	r2,r5,11370 <_malloc_r+0x328>
   11608:	283f5926 	beq	r5,zero,11370 <_malloc_r+0x328>
   1160c:	1146703a 	and	r3,r2,r5
   11610:	18001626 	beq	r3,zero,1166c <_malloc_r+0x624>
   11614:	5809883a 	mov	r4,r11
   11618:	003f1a06 	br	11284 <_malloc_r+0x23c>
   1161c:	80800204 	addi	r2,r16,8
   11620:	84000517 	ldw	r16,20(r16)
   11624:	143ea81e 	bne	r2,r16,110c8 <_malloc_r+0x80>
   11628:	21000084 	addi	r4,r4,2
   1162c:	003ee306 	br	111bc <_malloc_r+0x174>
   11630:	210016c4 	addi	r4,r4,91
   11634:	210b883a 	add	r5,r4,r4
   11638:	003eca06 	br	11164 <_malloc_r+0x11c>
   1163c:	100ad1ba 	srli	r5,r2,6
   11640:	29400e04 	addi	r5,r5,56
   11644:	294d883a 	add	r6,r5,r5
   11648:	003fbd06 	br	11540 <_malloc_r+0x4f8>
   1164c:	84ff6026 	beq	r16,r19,113d0 <_malloc_r+0x388>
   11650:	00800074 	movhi	r2,1
   11654:	10998d04 	addi	r2,r2,26164
   11658:	14000217 	ldw	r16,8(r2)
   1165c:	00bfff04 	movi	r2,-4
   11660:	80c00117 	ldw	r3,4(r16)
   11664:	1886703a 	and	r3,r3,r2
   11668:	003f9406 	br	114bc <_malloc_r+0x474>
   1166c:	294b883a 	add	r5,r5,r5
   11670:	1146703a 	and	r3,r2,r5
   11674:	5ac00104 	addi	r11,r11,4
   11678:	183ffc26 	beq	r3,zero,1166c <_malloc_r+0x624>
   1167c:	5809883a 	mov	r4,r11
   11680:	003f0006 	br	11284 <_malloc_r+0x23c>
   11684:	00805504 	movi	r2,340
   11688:	11001336 	bltu	r2,r4,116d8 <_malloc_r+0x690>
   1168c:	8808d3fa 	srli	r4,r17,15
   11690:	21001dc4 	addi	r4,r4,119
   11694:	210b883a 	add	r5,r4,r4
   11698:	003eb206 	br	11164 <_malloc_r+0x11c>
   1169c:	00840004 	movi	r2,4096
   116a0:	003f5d06 	br	11418 <_malloc_r+0x3d0>
   116a4:	00800044 	movi	r2,1
   116a8:	a0800115 	stw	r2,4(r20)
   116ac:	a021883a 	mov	r16,r20
   116b0:	0007883a 	mov	r3,zero
   116b4:	003f8106 	br	114bc <_malloc_r+0x474>
   116b8:	280bd0ba 	srai	r5,r5,2
   116bc:	01800044 	movi	r6,1
   116c0:	38800117 	ldw	r2,4(r7)
   116c4:	314c983a 	sll	r6,r6,r5
   116c8:	180b883a 	mov	r5,r3
   116cc:	3084b03a 	or	r2,r6,r2
   116d0:	38800115 	stw	r2,4(r7)
   116d4:	003fa906 	br	1157c <_malloc_r+0x534>
   116d8:	00815504 	movi	r2,1364
   116dc:	11001836 	bltu	r2,r4,11740 <_malloc_r+0x6f8>
   116e0:	8808d4ba 	srli	r4,r17,18
   116e4:	21001f04 	addi	r4,r4,124
   116e8:	210b883a 	add	r5,r4,r4
   116ec:	003e9d06 	br	11164 <_malloc_r+0x11c>
   116f0:	bdc00404 	addi	r23,r23,16
   116f4:	003f2f06 	br	113b4 <_malloc_r+0x36c>
   116f8:	01401504 	movi	r5,84
   116fc:	28c01f36 	bltu	r5,r3,1177c <_malloc_r+0x734>
   11700:	100ad33a 	srli	r5,r2,12
   11704:	29401b84 	addi	r5,r5,110
   11708:	294d883a 	add	r6,r5,r5
   1170c:	003f8c06 	br	11540 <_malloc_r+0x4f8>
   11710:	9c000217 	ldw	r16,8(r19)
   11714:	00bfff04 	movi	r2,-4
   11718:	80c00117 	ldw	r3,4(r16)
   1171c:	1886703a 	and	r3,r3,r2
   11720:	003f6606 	br	114bc <_malloc_r+0x474>
   11724:	e0c3ffcc 	andi	r3,fp,4095
   11728:	183f2f1e 	bne	r3,zero,113e8 <_malloc_r+0x3a0>
   1172c:	98c00217 	ldw	r3,8(r19)
   11730:	bd49883a 	add	r4,r23,r21
   11734:	21000054 	ori	r4,r4,1
   11738:	19000115 	stw	r4,4(r3)
   1173c:	003f5506 	br	11494 <_malloc_r+0x44c>
   11740:	01403f04 	movi	r5,252
   11744:	01001f84 	movi	r4,126
   11748:	003e8606 	br	11164 <_malloc_r+0x11c>
   1174c:	9009883a 	mov	r4,r18
   11750:	81400204 	addi	r5,r16,8
   11754:	00128640 	call	12864 <_free_r>
   11758:	008000b4 	movhi	r2,2
   1175c:	10a5cb04 	addi	r2,r2,-26836
   11760:	10800017 	ldw	r2,0(r2)
   11764:	003f4b06 	br	11494 <_malloc_r+0x44c>
   11768:	00c00044 	movi	r3,1
   1176c:	002f883a 	mov	r23,zero
   11770:	003f3406 	br	11444 <_malloc_r+0x3fc>
   11774:	d5200215 	stw	r20,-32760(gp)
   11778:	003f2106 	br	11400 <_malloc_r+0x3b8>
   1177c:	01405504 	movi	r5,340
   11780:	28c00436 	bltu	r5,r3,11794 <_malloc_r+0x74c>
   11784:	100ad3fa 	srli	r5,r2,15
   11788:	29401dc4 	addi	r5,r5,119
   1178c:	294d883a 	add	r6,r5,r5
   11790:	003f6b06 	br	11540 <_malloc_r+0x4f8>
   11794:	01415504 	movi	r5,1364
   11798:	28c00936 	bltu	r5,r3,117c0 <_malloc_r+0x778>
   1179c:	100ad4ba 	srli	r5,r2,18
   117a0:	29401f04 	addi	r5,r5,124
   117a4:	294d883a 	add	r6,r5,r5
   117a8:	003f6506 	br	11540 <_malloc_r+0x4f8>
   117ac:	98800117 	ldw	r2,4(r19)
   117b0:	0146303a 	nor	r3,zero,r5
   117b4:	1884703a 	and	r2,r3,r2
   117b8:	98800115 	stw	r2,4(r19)
   117bc:	003f9006 	br	11600 <_malloc_r+0x5b8>
   117c0:	01803f04 	movi	r6,252
   117c4:	01401f84 	movi	r5,126
   117c8:	003f5d06 	br	11540 <_malloc_r+0x4f8>

000117cc <memchr>:
   117cc:	008000c4 	movi	r2,3
   117d0:	29403fcc 	andi	r5,r5,255
   117d4:	1180282e 	bgeu	r2,r6,11878 <memchr+0xac>
   117d8:	2086703a 	and	r3,r4,r2
   117dc:	1800351e 	bne	r3,zero,118b4 <memchr+0xe8>
   117e0:	2816923a 	slli	r11,r5,8
   117e4:	2093883a 	add	r9,r4,r2
   117e8:	22000084 	addi	r8,r4,2
   117ec:	5957883a 	add	r11,r11,r5
   117f0:	5816923a 	slli	r11,r11,8
   117f4:	20c00044 	addi	r3,r4,1
   117f8:	037fbff4 	movhi	r13,65279
   117fc:	6b7fbfc4 	addi	r13,r13,-257
   11800:	5957883a 	add	r11,r11,r5
   11804:	5816923a 	slli	r11,r11,8
   11808:	03202074 	movhi	r12,32897
   1180c:	63202004 	addi	r12,r12,-32640
   11810:	101d883a 	mov	r14,r2
   11814:	5957883a 	add	r11,r11,r5
   11818:	21c00017 	ldw	r7,0(r4)
   1181c:	31bfff04 	addi	r6,r6,-4
   11820:	1805883a 	mov	r2,r3
   11824:	3acef03a 	xor	r7,r7,r11
   11828:	3b55883a 	add	r10,r7,r13
   1182c:	01ce303a 	nor	r7,zero,r7
   11830:	51ce703a 	and	r7,r10,r7
   11834:	3b0e703a 	and	r7,r7,r12
   11838:	38000a26 	beq	r7,zero,11864 <memchr+0x98>
   1183c:	21c00003 	ldbu	r7,0(r4)
   11840:	39401e26 	beq	r7,r5,118bc <memchr+0xf0>
   11844:	19c00003 	ldbu	r7,0(r3)
   11848:	39401926 	beq	r7,r5,118b0 <memchr+0xe4>
   1184c:	41c00003 	ldbu	r7,0(r8)
   11850:	4005883a 	mov	r2,r8
   11854:	39401626 	beq	r7,r5,118b0 <memchr+0xe4>
   11858:	49c00003 	ldbu	r7,0(r9)
   1185c:	4805883a 	mov	r2,r9
   11860:	39401326 	beq	r7,r5,118b0 <memchr+0xe4>
   11864:	21000104 	addi	r4,r4,4
   11868:	4a400104 	addi	r9,r9,4
   1186c:	42000104 	addi	r8,r8,4
   11870:	18c00104 	addi	r3,r3,4
   11874:	71bfe836 	bltu	r14,r6,11818 <memchr+0x4c>
   11878:	2005883a 	mov	r2,r4
   1187c:	30000a26 	beq	r6,zero,118a8 <memchr+0xdc>
   11880:	10c00003 	ldbu	r3,0(r2)
   11884:	19400a26 	beq	r3,r5,118b0 <memchr+0xe4>
   11888:	10c00044 	addi	r3,r2,1
   1188c:	118d883a 	add	r6,r2,r6
   11890:	00000306 	br	118a0 <memchr+0xd4>
   11894:	11000003 	ldbu	r4,0(r2)
   11898:	18c00044 	addi	r3,r3,1
   1189c:	21400426 	beq	r4,r5,118b0 <memchr+0xe4>
   118a0:	1805883a 	mov	r2,r3
   118a4:	19bffb1e 	bne	r3,r6,11894 <memchr+0xc8>
   118a8:	0005883a 	mov	r2,zero
   118ac:	f800283a 	ret
   118b0:	f800283a 	ret
   118b4:	2005883a 	mov	r2,r4
   118b8:	003ff106 	br	11880 <memchr+0xb4>
   118bc:	2005883a 	mov	r2,r4
   118c0:	f800283a 	ret

000118c4 <memmove>:
   118c4:	defffb04 	addi	sp,sp,-20
   118c8:	dc000015 	stw	r16,0(sp)
   118cc:	dfc00415 	stw	ra,16(sp)
   118d0:	dcc00315 	stw	r19,12(sp)
   118d4:	dc800215 	stw	r18,8(sp)
   118d8:	dc400115 	stw	r17,4(sp)
   118dc:	2021883a 	mov	r16,r4
   118e0:	300f883a 	mov	r7,r6
   118e4:	2900122e 	bgeu	r5,r4,11930 <memmove+0x6c>
   118e8:	2987883a 	add	r3,r5,r6
   118ec:	20c0102e 	bgeu	r4,r3,11930 <memmove+0x6c>
   118f0:	218b883a 	add	r5,r4,r6
   118f4:	1989c83a 	sub	r4,r3,r6
   118f8:	30000526 	beq	r6,zero,11910 <memmove+0x4c>
   118fc:	18ffffc4 	addi	r3,r3,-1
   11900:	18800003 	ldbu	r2,0(r3)
   11904:	297fffc4 	addi	r5,r5,-1
   11908:	28800005 	stb	r2,0(r5)
   1190c:	193ffb1e 	bne	r3,r4,118fc <memmove+0x38>
   11910:	8005883a 	mov	r2,r16
   11914:	dfc00417 	ldw	ra,16(sp)
   11918:	dcc00317 	ldw	r19,12(sp)
   1191c:	dc800217 	ldw	r18,8(sp)
   11920:	dc400117 	ldw	r17,4(sp)
   11924:	dc000017 	ldw	r16,0(sp)
   11928:	dec00504 	addi	sp,sp,20
   1192c:	f800283a 	ret
   11930:	008003c4 	movi	r2,15
   11934:	1180422e 	bgeu	r2,r6,11a40 <memmove+0x17c>
   11938:	2c04b03a 	or	r2,r5,r16
   1193c:	108000cc 	andi	r2,r2,3
   11940:	10003f1e 	bne	r2,zero,11a40 <memmove+0x17c>
   11944:	32bffc04 	addi	r10,r6,-16
   11948:	5014d13a 	srli	r10,r10,4
   1194c:	81000404 	addi	r4,r16,16
   11950:	8007883a 	mov	r3,r16
   11954:	5004913a 	slli	r2,r10,4
   11958:	280f883a 	mov	r7,r5
   1195c:	2089883a 	add	r4,r4,r2
   11960:	38800017 	ldw	r2,0(r7)
   11964:	18c00404 	addi	r3,r3,16
   11968:	39c00404 	addi	r7,r7,16
   1196c:	18bffc15 	stw	r2,-16(r3)
   11970:	38bffd17 	ldw	r2,-12(r7)
   11974:	18bffd15 	stw	r2,-12(r3)
   11978:	38bffe17 	ldw	r2,-8(r7)
   1197c:	18bffe15 	stw	r2,-8(r3)
   11980:	38bfff17 	ldw	r2,-4(r7)
   11984:	18bfff15 	stw	r2,-4(r3)
   11988:	193ff51e 	bne	r3,r4,11960 <memmove+0x9c>
   1198c:	52800044 	addi	r10,r10,1
   11990:	5014913a 	slli	r10,r10,4
   11994:	31c003cc 	andi	r7,r6,15
   11998:	008000c4 	movi	r2,3
   1199c:	8287883a 	add	r3,r16,r10
   119a0:	2a95883a 	add	r10,r5,r10
   119a4:	11c0282e 	bgeu	r2,r7,11a48 <memmove+0x184>
   119a8:	3c7fff04 	addi	r17,r7,-4
   119ac:	8808d0ba 	srli	r4,r17,2
   119b0:	1a400104 	addi	r9,r3,4
   119b4:	180d883a 	mov	r6,r3
   119b8:	2105883a 	add	r2,r4,r4
   119bc:	1085883a 	add	r2,r2,r2
   119c0:	4893883a 	add	r9,r9,r2
   119c4:	5005883a 	mov	r2,r10
   119c8:	12000017 	ldw	r8,0(r2)
   119cc:	31800104 	addi	r6,r6,4
   119d0:	10800104 	addi	r2,r2,4
   119d4:	323fff15 	stw	r8,-4(r6)
   119d8:	327ffb1e 	bne	r6,r9,119c8 <memmove+0x104>
   119dc:	20800044 	addi	r2,r4,1
   119e0:	1085883a 	add	r2,r2,r2
   119e4:	1085883a 	add	r2,r2,r2
   119e8:	017fff04 	movi	r5,-4
   119ec:	18a5883a 	add	r18,r3,r2
   119f0:	50a7883a 	add	r19,r10,r2
   119f4:	00108d80 	call	108d8 <__mulsi3>
   119f8:	144f883a 	add	r7,r2,r17
   119fc:	980b883a 	mov	r5,r19
   11a00:	9007883a 	mov	r3,r18
   11a04:	383fc226 	beq	r7,zero,11910 <memmove+0x4c>
   11a08:	19cf883a 	add	r7,r3,r7
   11a0c:	29800003 	ldbu	r6,0(r5)
   11a10:	18c00044 	addi	r3,r3,1
   11a14:	29400044 	addi	r5,r5,1
   11a18:	19bfffc5 	stb	r6,-1(r3)
   11a1c:	19fffb1e 	bne	r3,r7,11a0c <memmove+0x148>
   11a20:	8005883a 	mov	r2,r16
   11a24:	dfc00417 	ldw	ra,16(sp)
   11a28:	dcc00317 	ldw	r19,12(sp)
   11a2c:	dc800217 	ldw	r18,8(sp)
   11a30:	dc400117 	ldw	r17,4(sp)
   11a34:	dc000017 	ldw	r16,0(sp)
   11a38:	dec00504 	addi	sp,sp,20
   11a3c:	f800283a 	ret
   11a40:	8007883a 	mov	r3,r16
   11a44:	003fef06 	br	11a04 <memmove+0x140>
   11a48:	500b883a 	mov	r5,r10
   11a4c:	003fed06 	br	11a04 <memmove+0x140>

00011a50 <_realloc_r>:
   11a50:	defff504 	addi	sp,sp,-44
   11a54:	dd400615 	stw	r21,24(sp)
   11a58:	dc800315 	stw	r18,12(sp)
   11a5c:	dc000115 	stw	r16,4(sp)
   11a60:	dfc00a15 	stw	ra,40(sp)
   11a64:	df000915 	stw	fp,36(sp)
   11a68:	ddc00815 	stw	r23,32(sp)
   11a6c:	dd800715 	stw	r22,28(sp)
   11a70:	dd000515 	stw	r20,20(sp)
   11a74:	dcc00415 	stw	r19,16(sp)
   11a78:	dc400215 	stw	r17,8(sp)
   11a7c:	2821883a 	mov	r16,r5
   11a80:	202b883a 	mov	r21,r4
   11a84:	3025883a 	mov	r18,r6
   11a88:	28009626 	beq	r5,zero,11ce4 <_realloc_r+0x294>
   11a8c:	00139e00 	call	139e0 <__malloc_lock>
   11a90:	80bfff17 	ldw	r2,-4(r16)
   11a94:	04ffff04 	movi	r19,-4
   11a98:	90c002c4 	addi	r3,r18,11
   11a9c:	01000584 	movi	r4,22
   11aa0:	85bffe04 	addi	r22,r16,-8
   11aa4:	14e6703a 	and	r19,r2,r19
   11aa8:	20c0372e 	bgeu	r4,r3,11b88 <_realloc_r+0x138>
   11aac:	047ffe04 	movi	r17,-8
   11ab0:	1c62703a 	and	r17,r3,r17
   11ab4:	8807883a 	mov	r3,r17
   11ab8:	88005a16 	blt	r17,zero,11c24 <_realloc_r+0x1d4>
   11abc:	8c805936 	bltu	r17,r18,11c24 <_realloc_r+0x1d4>
   11ac0:	98c0340e 	bge	r19,r3,11b94 <_realloc_r+0x144>
   11ac4:	07000074 	movhi	fp,1
   11ac8:	e7198d04 	addi	fp,fp,26164
   11acc:	e1400217 	ldw	r5,8(fp)
   11ad0:	b4c9883a 	add	r4,r22,r19
   11ad4:	29009026 	beq	r5,r4,11d18 <_realloc_r+0x2c8>
   11ad8:	21800117 	ldw	r6,4(r4)
   11adc:	01ffff84 	movi	r7,-2
   11ae0:	31ce703a 	and	r7,r6,r7
   11ae4:	21cf883a 	add	r7,r4,r7
   11ae8:	39c00117 	ldw	r7,4(r7)
   11aec:	39c0004c 	andi	r7,r7,1
   11af0:	38004326 	beq	r7,zero,11c00 <_realloc_r+0x1b0>
   11af4:	000d883a 	mov	r6,zero
   11af8:	0009883a 	mov	r4,zero
   11afc:	1080004c 	andi	r2,r2,1
   11b00:	10005a1e 	bne	r2,zero,11c6c <_realloc_r+0x21c>
   11b04:	85fffe17 	ldw	r23,-8(r16)
   11b08:	00bfff04 	movi	r2,-4
   11b0c:	b5efc83a 	sub	r23,r22,r23
   11b10:	b9c00117 	ldw	r7,4(r23)
   11b14:	388e703a 	and	r7,r7,r2
   11b18:	3ccf883a 	add	r7,r7,r19
   11b1c:	20005226 	beq	r4,zero,11c68 <_realloc_r+0x218>
   11b20:	31e9883a 	add	r20,r6,r7
   11b24:	2140c726 	beq	r4,r5,11e44 <_realloc_r+0x3f4>
   11b28:	a0c04f16 	blt	r20,r3,11c68 <_realloc_r+0x218>
   11b2c:	20800317 	ldw	r2,12(r4)
   11b30:	20c00217 	ldw	r3,8(r4)
   11b34:	99bfff04 	addi	r6,r19,-4
   11b38:	01000904 	movi	r4,36
   11b3c:	18800315 	stw	r2,12(r3)
   11b40:	10c00215 	stw	r3,8(r2)
   11b44:	b8c00217 	ldw	r3,8(r23)
   11b48:	b8800317 	ldw	r2,12(r23)
   11b4c:	bc800204 	addi	r18,r23,8
   11b50:	18800315 	stw	r2,12(r3)
   11b54:	10c00215 	stw	r3,8(r2)
   11b58:	2180ed36 	bltu	r4,r6,11f10 <_realloc_r+0x4c0>
   11b5c:	008004c4 	movi	r2,19
   11b60:	11809b2e 	bgeu	r2,r6,11dd0 <_realloc_r+0x380>
   11b64:	80800017 	ldw	r2,0(r16)
   11b68:	b8800215 	stw	r2,8(r23)
   11b6c:	80800117 	ldw	r2,4(r16)
   11b70:	b8800315 	stw	r2,12(r23)
   11b74:	008006c4 	movi	r2,27
   11b78:	1180f936 	bltu	r2,r6,11f60 <_realloc_r+0x510>
   11b7c:	b8800404 	addi	r2,r23,16
   11b80:	80c00204 	addi	r3,r16,8
   11b84:	00009406 	br	11dd8 <_realloc_r+0x388>
   11b88:	00c00404 	movi	r3,16
   11b8c:	1823883a 	mov	r17,r3
   11b90:	003fca06 	br	11abc <_realloc_r+0x6c>
   11b94:	9829883a 	mov	r20,r19
   11b98:	a447c83a 	sub	r3,r20,r17
   11b9c:	010003c4 	movi	r4,15
   11ba0:	1080004c 	andi	r2,r2,1
   11ba4:	20c02336 	bltu	r4,r3,11c34 <_realloc_r+0x1e4>
   11ba8:	1504b03a 	or	r2,r2,r20
   11bac:	b0800115 	stw	r2,4(r22)
   11bb0:	b52d883a 	add	r22,r22,r20
   11bb4:	b0800117 	ldw	r2,4(r22)
   11bb8:	10800054 	ori	r2,r2,1
   11bbc:	b0800115 	stw	r2,4(r22)
   11bc0:	a809883a 	mov	r4,r21
   11bc4:	0013a000 	call	13a00 <__malloc_unlock>
   11bc8:	8025883a 	mov	r18,r16
   11bcc:	9005883a 	mov	r2,r18
   11bd0:	dfc00a17 	ldw	ra,40(sp)
   11bd4:	df000917 	ldw	fp,36(sp)
   11bd8:	ddc00817 	ldw	r23,32(sp)
   11bdc:	dd800717 	ldw	r22,28(sp)
   11be0:	dd400617 	ldw	r21,24(sp)
   11be4:	dd000517 	ldw	r20,20(sp)
   11be8:	dcc00417 	ldw	r19,16(sp)
   11bec:	dc800317 	ldw	r18,12(sp)
   11bf0:	dc400217 	ldw	r17,8(sp)
   11bf4:	dc000117 	ldw	r16,4(sp)
   11bf8:	dec00b04 	addi	sp,sp,44
   11bfc:	f800283a 	ret
   11c00:	01ffff04 	movi	r7,-4
   11c04:	31cc703a 	and	r6,r6,r7
   11c08:	34e9883a 	add	r20,r6,r19
   11c0c:	a0ffbb16 	blt	r20,r3,11afc <_realloc_r+0xac>
   11c10:	20c00317 	ldw	r3,12(r4)
   11c14:	21000217 	ldw	r4,8(r4)
   11c18:	20c00315 	stw	r3,12(r4)
   11c1c:	19000215 	stw	r4,8(r3)
   11c20:	003fdd06 	br	11b98 <_realloc_r+0x148>
   11c24:	00800304 	movi	r2,12
   11c28:	a8800015 	stw	r2,0(r21)
   11c2c:	0025883a 	mov	r18,zero
   11c30:	003fe606 	br	11bcc <_realloc_r+0x17c>
   11c34:	1444b03a 	or	r2,r2,r17
   11c38:	b0800115 	stw	r2,4(r22)
   11c3c:	b44b883a 	add	r5,r22,r17
   11c40:	18800054 	ori	r2,r3,1
   11c44:	28800115 	stw	r2,4(r5)
   11c48:	28c7883a 	add	r3,r5,r3
   11c4c:	18800117 	ldw	r2,4(r3)
   11c50:	a809883a 	mov	r4,r21
   11c54:	29400204 	addi	r5,r5,8
   11c58:	10800054 	ori	r2,r2,1
   11c5c:	18800115 	stw	r2,4(r3)
   11c60:	00128640 	call	12864 <_free_r>
   11c64:	003fd606 	br	11bc0 <_realloc_r+0x170>
   11c68:	38c0330e 	bge	r7,r3,11d38 <_realloc_r+0x2e8>
   11c6c:	900b883a 	mov	r5,r18
   11c70:	a809883a 	mov	r4,r21
   11c74:	00110480 	call	11048 <_malloc_r>
   11c78:	1025883a 	mov	r18,r2
   11c7c:	10001626 	beq	r2,zero,11cd8 <_realloc_r+0x288>
   11c80:	80bfff17 	ldw	r2,-4(r16)
   11c84:	00ffff84 	movi	r3,-2
   11c88:	913ffe04 	addi	r4,r18,-8
   11c8c:	10c6703a 	and	r3,r2,r3
   11c90:	b0c7883a 	add	r3,r22,r3
   11c94:	20c09926 	beq	r4,r3,11efc <_realloc_r+0x4ac>
   11c98:	99bfff04 	addi	r6,r19,-4
   11c9c:	00800904 	movi	r2,36
   11ca0:	11806436 	bltu	r2,r6,11e34 <_realloc_r+0x3e4>
   11ca4:	00c004c4 	movi	r3,19
   11ca8:	19804036 	bltu	r3,r6,11dac <_realloc_r+0x35c>
   11cac:	9005883a 	mov	r2,r18
   11cb0:	8007883a 	mov	r3,r16
   11cb4:	19000017 	ldw	r4,0(r3)
   11cb8:	11000015 	stw	r4,0(r2)
   11cbc:	19000117 	ldw	r4,4(r3)
   11cc0:	11000115 	stw	r4,4(r2)
   11cc4:	18c00217 	ldw	r3,8(r3)
   11cc8:	10c00215 	stw	r3,8(r2)
   11ccc:	a809883a 	mov	r4,r21
   11cd0:	800b883a 	mov	r5,r16
   11cd4:	00128640 	call	12864 <_free_r>
   11cd8:	a809883a 	mov	r4,r21
   11cdc:	0013a000 	call	13a00 <__malloc_unlock>
   11ce0:	003fba06 	br	11bcc <_realloc_r+0x17c>
   11ce4:	300b883a 	mov	r5,r6
   11ce8:	dfc00a17 	ldw	ra,40(sp)
   11cec:	df000917 	ldw	fp,36(sp)
   11cf0:	ddc00817 	ldw	r23,32(sp)
   11cf4:	dd800717 	ldw	r22,28(sp)
   11cf8:	dd400617 	ldw	r21,24(sp)
   11cfc:	dd000517 	ldw	r20,20(sp)
   11d00:	dcc00417 	ldw	r19,16(sp)
   11d04:	dc800317 	ldw	r18,12(sp)
   11d08:	dc400217 	ldw	r17,8(sp)
   11d0c:	dc000117 	ldw	r16,4(sp)
   11d10:	dec00b04 	addi	sp,sp,44
   11d14:	00110481 	jmpi	11048 <_malloc_r>
   11d18:	29800117 	ldw	r6,4(r5)
   11d1c:	013fff04 	movi	r4,-4
   11d20:	89c00404 	addi	r7,r17,16
   11d24:	310c703a 	and	r6,r6,r4
   11d28:	34c9883a 	add	r4,r6,r19
   11d2c:	21c0340e 	bge	r4,r7,11e00 <_realloc_r+0x3b0>
   11d30:	2809883a 	mov	r4,r5
   11d34:	003f7106 	br	11afc <_realloc_r+0xac>
   11d38:	b8800317 	ldw	r2,12(r23)
   11d3c:	b8c00217 	ldw	r3,8(r23)
   11d40:	99bfff04 	addi	r6,r19,-4
   11d44:	01000904 	movi	r4,36
   11d48:	18800315 	stw	r2,12(r3)
   11d4c:	10c00215 	stw	r3,8(r2)
   11d50:	bc800204 	addi	r18,r23,8
   11d54:	21807836 	bltu	r4,r6,11f38 <_realloc_r+0x4e8>
   11d58:	008004c4 	movi	r2,19
   11d5c:	1180732e 	bgeu	r2,r6,11f2c <_realloc_r+0x4dc>
   11d60:	80800017 	ldw	r2,0(r16)
   11d64:	b8800215 	stw	r2,8(r23)
   11d68:	80800117 	ldw	r2,4(r16)
   11d6c:	b8800315 	stw	r2,12(r23)
   11d70:	008006c4 	movi	r2,27
   11d74:	11808936 	bltu	r2,r6,11f9c <_realloc_r+0x54c>
   11d78:	b8800404 	addi	r2,r23,16
   11d7c:	80c00204 	addi	r3,r16,8
   11d80:	19000017 	ldw	r4,0(r3)
   11d84:	9021883a 	mov	r16,r18
   11d88:	3829883a 	mov	r20,r7
   11d8c:	11000015 	stw	r4,0(r2)
   11d90:	19000117 	ldw	r4,4(r3)
   11d94:	b82d883a 	mov	r22,r23
   11d98:	11000115 	stw	r4,4(r2)
   11d9c:	18c00217 	ldw	r3,8(r3)
   11da0:	10c00215 	stw	r3,8(r2)
   11da4:	b8800117 	ldw	r2,4(r23)
   11da8:	003f7b06 	br	11b98 <_realloc_r+0x148>
   11dac:	80c00017 	ldw	r3,0(r16)
   11db0:	90c00015 	stw	r3,0(r18)
   11db4:	80c00117 	ldw	r3,4(r16)
   11db8:	90c00115 	stw	r3,4(r18)
   11dbc:	00c006c4 	movi	r3,27
   11dc0:	19804636 	bltu	r3,r6,11edc <_realloc_r+0x48c>
   11dc4:	90800204 	addi	r2,r18,8
   11dc8:	80c00204 	addi	r3,r16,8
   11dcc:	003fb906 	br	11cb4 <_realloc_r+0x264>
   11dd0:	9005883a 	mov	r2,r18
   11dd4:	8007883a 	mov	r3,r16
   11dd8:	19000017 	ldw	r4,0(r3)
   11ddc:	9021883a 	mov	r16,r18
   11de0:	b82d883a 	mov	r22,r23
   11de4:	11000015 	stw	r4,0(r2)
   11de8:	19000117 	ldw	r4,4(r3)
   11dec:	11000115 	stw	r4,4(r2)
   11df0:	18c00217 	ldw	r3,8(r3)
   11df4:	10c00215 	stw	r3,8(r2)
   11df8:	b8800117 	ldw	r2,4(r23)
   11dfc:	003f6606 	br	11b98 <_realloc_r+0x148>
   11e00:	2445c83a 	sub	r2,r4,r17
   11e04:	b46d883a 	add	r22,r22,r17
   11e08:	10800054 	ori	r2,r2,1
   11e0c:	b0800115 	stw	r2,4(r22)
   11e10:	80bfff17 	ldw	r2,-4(r16)
   11e14:	a809883a 	mov	r4,r21
   11e18:	e5800215 	stw	r22,8(fp)
   11e1c:	1080004c 	andi	r2,r2,1
   11e20:	88a2b03a 	or	r17,r17,r2
   11e24:	847fff15 	stw	r17,-4(r16)
   11e28:	0013a000 	call	13a00 <__malloc_unlock>
   11e2c:	8025883a 	mov	r18,r16
   11e30:	003f6606 	br	11bcc <_realloc_r+0x17c>
   11e34:	9009883a 	mov	r4,r18
   11e38:	800b883a 	mov	r5,r16
   11e3c:	00118c40 	call	118c4 <memmove>
   11e40:	003fa206 	br	11ccc <_realloc_r+0x27c>
   11e44:	88800404 	addi	r2,r17,16
   11e48:	a0bf8716 	blt	r20,r2,11c68 <_realloc_r+0x218>
   11e4c:	b8800317 	ldw	r2,12(r23)
   11e50:	b8c00217 	ldw	r3,8(r23)
   11e54:	99bfff04 	addi	r6,r19,-4
   11e58:	01000904 	movi	r4,36
   11e5c:	18800315 	stw	r2,12(r3)
   11e60:	10c00215 	stw	r3,8(r2)
   11e64:	bc800204 	addi	r18,r23,8
   11e68:	21806536 	bltu	r4,r6,12000 <_realloc_r+0x5b0>
   11e6c:	008004c4 	movi	r2,19
   11e70:	1180592e 	bgeu	r2,r6,11fd8 <_realloc_r+0x588>
   11e74:	80800017 	ldw	r2,0(r16)
   11e78:	b8800215 	stw	r2,8(r23)
   11e7c:	80800117 	ldw	r2,4(r16)
   11e80:	b8800315 	stw	r2,12(r23)
   11e84:	008006c4 	movi	r2,27
   11e88:	11806136 	bltu	r2,r6,12010 <_realloc_r+0x5c0>
   11e8c:	b8800404 	addi	r2,r23,16
   11e90:	80c00204 	addi	r3,r16,8
   11e94:	19000017 	ldw	r4,0(r3)
   11e98:	11000015 	stw	r4,0(r2)
   11e9c:	19000117 	ldw	r4,4(r3)
   11ea0:	11000115 	stw	r4,4(r2)
   11ea4:	18c00217 	ldw	r3,8(r3)
   11ea8:	10c00215 	stw	r3,8(r2)
   11eac:	a447c83a 	sub	r3,r20,r17
   11eb0:	bc45883a 	add	r2,r23,r17
   11eb4:	18c00054 	ori	r3,r3,1
   11eb8:	10c00115 	stw	r3,4(r2)
   11ebc:	b8c00117 	ldw	r3,4(r23)
   11ec0:	e0800215 	stw	r2,8(fp)
   11ec4:	a809883a 	mov	r4,r21
   11ec8:	1880004c 	andi	r2,r3,1
   11ecc:	88a2b03a 	or	r17,r17,r2
   11ed0:	bc400115 	stw	r17,4(r23)
   11ed4:	0013a000 	call	13a00 <__malloc_unlock>
   11ed8:	003f3c06 	br	11bcc <_realloc_r+0x17c>
   11edc:	80c00217 	ldw	r3,8(r16)
   11ee0:	90c00215 	stw	r3,8(r18)
   11ee4:	80c00317 	ldw	r3,12(r16)
   11ee8:	90c00315 	stw	r3,12(r18)
   11eec:	30802426 	beq	r6,r2,11f80 <_realloc_r+0x530>
   11ef0:	90800404 	addi	r2,r18,16
   11ef4:	80c00404 	addi	r3,r16,16
   11ef8:	003f6e06 	br	11cb4 <_realloc_r+0x264>
   11efc:	953fff17 	ldw	r20,-4(r18)
   11f00:	00ffff04 	movi	r3,-4
   11f04:	a0e8703a 	and	r20,r20,r3
   11f08:	a4e9883a 	add	r20,r20,r19
   11f0c:	003f2206 	br	11b98 <_realloc_r+0x148>
   11f10:	800b883a 	mov	r5,r16
   11f14:	9009883a 	mov	r4,r18
   11f18:	00118c40 	call	118c4 <memmove>
   11f1c:	9021883a 	mov	r16,r18
   11f20:	b8800117 	ldw	r2,4(r23)
   11f24:	b82d883a 	mov	r22,r23
   11f28:	003f1b06 	br	11b98 <_realloc_r+0x148>
   11f2c:	9005883a 	mov	r2,r18
   11f30:	8007883a 	mov	r3,r16
   11f34:	003f9206 	br	11d80 <_realloc_r+0x330>
   11f38:	800b883a 	mov	r5,r16
   11f3c:	9009883a 	mov	r4,r18
   11f40:	d9c00015 	stw	r7,0(sp)
   11f44:	00118c40 	call	118c4 <memmove>
   11f48:	d9c00017 	ldw	r7,0(sp)
   11f4c:	9021883a 	mov	r16,r18
   11f50:	b8800117 	ldw	r2,4(r23)
   11f54:	3829883a 	mov	r20,r7
   11f58:	b82d883a 	mov	r22,r23
   11f5c:	003f0e06 	br	11b98 <_realloc_r+0x148>
   11f60:	80800217 	ldw	r2,8(r16)
   11f64:	b8800415 	stw	r2,16(r23)
   11f68:	80800317 	ldw	r2,12(r16)
   11f6c:	b8800515 	stw	r2,20(r23)
   11f70:	31001226 	beq	r6,r4,11fbc <_realloc_r+0x56c>
   11f74:	b8800604 	addi	r2,r23,24
   11f78:	80c00404 	addi	r3,r16,16
   11f7c:	003f9606 	br	11dd8 <_realloc_r+0x388>
   11f80:	81000417 	ldw	r4,16(r16)
   11f84:	90800604 	addi	r2,r18,24
   11f88:	80c00604 	addi	r3,r16,24
   11f8c:	91000415 	stw	r4,16(r18)
   11f90:	81000517 	ldw	r4,20(r16)
   11f94:	91000515 	stw	r4,20(r18)
   11f98:	003f4606 	br	11cb4 <_realloc_r+0x264>
   11f9c:	80800217 	ldw	r2,8(r16)
   11fa0:	b8800415 	stw	r2,16(r23)
   11fa4:	80800317 	ldw	r2,12(r16)
   11fa8:	b8800515 	stw	r2,20(r23)
   11fac:	31000d26 	beq	r6,r4,11fe4 <_realloc_r+0x594>
   11fb0:	b8800604 	addi	r2,r23,24
   11fb4:	80c00404 	addi	r3,r16,16
   11fb8:	003f7106 	br	11d80 <_realloc_r+0x330>
   11fbc:	81000417 	ldw	r4,16(r16)
   11fc0:	b8800804 	addi	r2,r23,32
   11fc4:	80c00604 	addi	r3,r16,24
   11fc8:	b9000615 	stw	r4,24(r23)
   11fcc:	81000517 	ldw	r4,20(r16)
   11fd0:	b9000715 	stw	r4,28(r23)
   11fd4:	003f8006 	br	11dd8 <_realloc_r+0x388>
   11fd8:	9005883a 	mov	r2,r18
   11fdc:	8007883a 	mov	r3,r16
   11fe0:	003fac06 	br	11e94 <_realloc_r+0x444>
   11fe4:	81000417 	ldw	r4,16(r16)
   11fe8:	b8800804 	addi	r2,r23,32
   11fec:	80c00604 	addi	r3,r16,24
   11ff0:	b9000615 	stw	r4,24(r23)
   11ff4:	81000517 	ldw	r4,20(r16)
   11ff8:	b9000715 	stw	r4,28(r23)
   11ffc:	003f6006 	br	11d80 <_realloc_r+0x330>
   12000:	9009883a 	mov	r4,r18
   12004:	800b883a 	mov	r5,r16
   12008:	00118c40 	call	118c4 <memmove>
   1200c:	003fa706 	br	11eac <_realloc_r+0x45c>
   12010:	80800217 	ldw	r2,8(r16)
   12014:	b8800415 	stw	r2,16(r23)
   12018:	80800317 	ldw	r2,12(r16)
   1201c:	b8800515 	stw	r2,20(r23)
   12020:	31000326 	beq	r6,r4,12030 <_realloc_r+0x5e0>
   12024:	b8800604 	addi	r2,r23,24
   12028:	80c00404 	addi	r3,r16,16
   1202c:	003f9906 	br	11e94 <_realloc_r+0x444>
   12030:	81000417 	ldw	r4,16(r16)
   12034:	b8800804 	addi	r2,r23,32
   12038:	80c00604 	addi	r3,r16,24
   1203c:	b9000615 	stw	r4,24(r23)
   12040:	81000517 	ldw	r4,20(r16)
   12044:	b9000715 	stw	r4,28(r23)
   12048:	003f9206 	br	11e94 <_realloc_r+0x444>

0001204c <_sbrk_r>:
   1204c:	defffd04 	addi	sp,sp,-12
   12050:	dc400115 	stw	r17,4(sp)
   12054:	dc000015 	stw	r16,0(sp)
   12058:	2023883a 	mov	r17,r4
   1205c:	040000b4 	movhi	r16,2
   12060:	8425c404 	addi	r16,r16,-26864
   12064:	2809883a 	mov	r4,r5
   12068:	dfc00215 	stw	ra,8(sp)
   1206c:	80000015 	stw	zero,0(r16)
   12070:	0013be40 	call	13be4 <sbrk>
   12074:	00ffffc4 	movi	r3,-1
   12078:	10c00526 	beq	r2,r3,12090 <_sbrk_r+0x44>
   1207c:	dfc00217 	ldw	ra,8(sp)
   12080:	dc400117 	ldw	r17,4(sp)
   12084:	dc000017 	ldw	r16,0(sp)
   12088:	dec00304 	addi	sp,sp,12
   1208c:	f800283a 	ret
   12090:	80c00017 	ldw	r3,0(r16)
   12094:	183ff926 	beq	r3,zero,1207c <_sbrk_r+0x30>
   12098:	88c00015 	stw	r3,0(r17)
   1209c:	dfc00217 	ldw	ra,8(sp)
   120a0:	dc400117 	ldw	r17,4(sp)
   120a4:	dc000017 	ldw	r16,0(sp)
   120a8:	dec00304 	addi	sp,sp,12
   120ac:	f800283a 	ret

000120b0 <__swsetup_r>:
   120b0:	00800074 	movhi	r2,1
   120b4:	109f1204 	addi	r2,r2,31816
   120b8:	10800017 	ldw	r2,0(r2)
   120bc:	defffd04 	addi	sp,sp,-12
   120c0:	dc400115 	stw	r17,4(sp)
   120c4:	dc000015 	stw	r16,0(sp)
   120c8:	dfc00215 	stw	ra,8(sp)
   120cc:	2023883a 	mov	r17,r4
   120d0:	2821883a 	mov	r16,r5
   120d4:	10000226 	beq	r2,zero,120e0 <__swsetup_r+0x30>
   120d8:	10c00e17 	ldw	r3,56(r2)
   120dc:	18003d26 	beq	r3,zero,121d4 <__swsetup_r+0x124>
   120e0:	8080030b 	ldhu	r2,12(r16)
   120e4:	10c0020c 	andi	r3,r2,8
   120e8:	18ffffcc 	andi	r3,r3,65535
   120ec:	18e0001c 	xori	r3,r3,32768
   120f0:	18e00004 	addi	r3,r3,-32768
   120f4:	18001226 	beq	r3,zero,12140 <__swsetup_r+0x90>
   120f8:	80c00417 	ldw	r3,16(r16)
   120fc:	18001f26 	beq	r3,zero,1217c <__swsetup_r+0xcc>
   12100:	1100004c 	andi	r4,r2,1
   12104:	2000261e 	bne	r4,zero,121a0 <__swsetup_r+0xf0>
   12108:	1080008c 	andi	r2,r2,2
   1210c:	10bfffcc 	andi	r2,r2,65535
   12110:	10a0001c 	xori	r2,r2,32768
   12114:	10a00004 	addi	r2,r2,-32768
   12118:	1000311e 	bne	r2,zero,121e0 <__swsetup_r+0x130>
   1211c:	80800517 	ldw	r2,20(r16)
   12120:	80800215 	stw	r2,8(r16)
   12124:	18002326 	beq	r3,zero,121b4 <__swsetup_r+0x104>
   12128:	0005883a 	mov	r2,zero
   1212c:	dfc00217 	ldw	ra,8(sp)
   12130:	dc400117 	ldw	r17,4(sp)
   12134:	dc000017 	ldw	r16,0(sp)
   12138:	dec00304 	addi	sp,sp,12
   1213c:	f800283a 	ret
   12140:	10c0040c 	andi	r3,r2,16
   12144:	18ffffcc 	andi	r3,r3,65535
   12148:	18e0001c 	xori	r3,r3,32768
   1214c:	18e00004 	addi	r3,r3,-32768
   12150:	18001e26 	beq	r3,zero,121cc <__swsetup_r+0x11c>
   12154:	10c0010c 	andi	r3,r2,4
   12158:	18ffffcc 	andi	r3,r3,65535
   1215c:	18e0001c 	xori	r3,r3,32768
   12160:	18e00004 	addi	r3,r3,-32768
   12164:	1800211e 	bne	r3,zero,121ec <__swsetup_r+0x13c>
   12168:	80c00417 	ldw	r3,16(r16)
   1216c:	11400214 	ori	r5,r2,8
   12170:	8140030d 	sth	r5,12(r16)
   12174:	2805883a 	mov	r2,r5
   12178:	183fe11e 	bne	r3,zero,12100 <__swsetup_r+0x50>
   1217c:	1140a00c 	andi	r5,r2,640
   12180:	01008004 	movi	r4,512
   12184:	293fde26 	beq	r5,r4,12100 <__swsetup_r+0x50>
   12188:	8809883a 	mov	r4,r17
   1218c:	800b883a 	mov	r5,r16
   12190:	0012c940 	call	12c94 <__smakebuf_r>
   12194:	8080030b 	ldhu	r2,12(r16)
   12198:	80c00417 	ldw	r3,16(r16)
   1219c:	003fd806 	br	12100 <__swsetup_r+0x50>
   121a0:	80800517 	ldw	r2,20(r16)
   121a4:	80000215 	stw	zero,8(r16)
   121a8:	0085c83a 	sub	r2,zero,r2
   121ac:	80800615 	stw	r2,24(r16)
   121b0:	183fdd1e 	bne	r3,zero,12128 <__swsetup_r+0x78>
   121b4:	8080030b 	ldhu	r2,12(r16)
   121b8:	1080200c 	andi	r2,r2,128
   121bc:	10bfffcc 	andi	r2,r2,65535
   121c0:	10a0001c 	xori	r2,r2,32768
   121c4:	10a00004 	addi	r2,r2,-32768
   121c8:	103fd826 	beq	r2,zero,1212c <__swsetup_r+0x7c>
   121cc:	00bfffc4 	movi	r2,-1
   121d0:	003fd606 	br	1212c <__swsetup_r+0x7c>
   121d4:	1009883a 	mov	r4,r2
   121d8:	00124e00 	call	124e0 <__sinit>
   121dc:	003fc006 	br	120e0 <__swsetup_r+0x30>
   121e0:	0005883a 	mov	r2,zero
   121e4:	80800215 	stw	r2,8(r16)
   121e8:	003fce06 	br	12124 <__swsetup_r+0x74>
   121ec:	81400c17 	ldw	r5,48(r16)
   121f0:	28000626 	beq	r5,zero,1220c <__swsetup_r+0x15c>
   121f4:	80c01004 	addi	r3,r16,64
   121f8:	28c00326 	beq	r5,r3,12208 <__swsetup_r+0x158>
   121fc:	8809883a 	mov	r4,r17
   12200:	00128640 	call	12864 <_free_r>
   12204:	8080030b 	ldhu	r2,12(r16)
   12208:	80000c15 	stw	zero,48(r16)
   1220c:	80c00417 	ldw	r3,16(r16)
   12210:	013ff6c4 	movi	r4,-37
   12214:	2084703a 	and	r2,r4,r2
   12218:	80000115 	stw	zero,4(r16)
   1221c:	80c00015 	stw	r3,0(r16)
   12220:	003fd206 	br	1216c <__swsetup_r+0xbc>

00012224 <_fflush_r>:
   12224:	defffb04 	addi	sp,sp,-20
   12228:	dcc00315 	stw	r19,12(sp)
   1222c:	dc400115 	stw	r17,4(sp)
   12230:	dfc00415 	stw	ra,16(sp)
   12234:	dc800215 	stw	r18,8(sp)
   12238:	dc000015 	stw	r16,0(sp)
   1223c:	2027883a 	mov	r19,r4
   12240:	2823883a 	mov	r17,r5
   12244:	20000226 	beq	r4,zero,12250 <_fflush_r+0x2c>
   12248:	20800e17 	ldw	r2,56(r4)
   1224c:	10005726 	beq	r2,zero,123ac <_fflush_r+0x188>
   12250:	8880030b 	ldhu	r2,12(r17)
   12254:	10c0020c 	andi	r3,r2,8
   12258:	18ffffcc 	andi	r3,r3,65535
   1225c:	18e0001c 	xori	r3,r3,32768
   12260:	18e00004 	addi	r3,r3,-32768
   12264:	1800311e 	bne	r3,zero,1232c <_fflush_r+0x108>
   12268:	89000117 	ldw	r4,4(r17)
   1226c:	10c20014 	ori	r3,r2,2048
   12270:	88c0030d 	sth	r3,12(r17)
   12274:	180b883a 	mov	r5,r3
   12278:	0100520e 	bge	zero,r4,123c4 <_fflush_r+0x1a0>
   1227c:	88c00a17 	ldw	r3,40(r17)
   12280:	18002226 	beq	r3,zero,1230c <_fflush_r+0xe8>
   12284:	1084000c 	andi	r2,r2,4096
   12288:	10bfffcc 	andi	r2,r2,65535
   1228c:	10a0001c 	xori	r2,r2,32768
   12290:	10a00004 	addi	r2,r2,-32768
   12294:	10004e26 	beq	r2,zero,123d0 <_fflush_r+0x1ac>
   12298:	8c001417 	ldw	r16,80(r17)
   1229c:	2940010c 	andi	r5,r5,4
   122a0:	297fffcc 	andi	r5,r5,65535
   122a4:	2960001c 	xori	r5,r5,32768
   122a8:	29600004 	addi	r5,r5,-32768
   122ac:	28000626 	beq	r5,zero,122c8 <_fflush_r+0xa4>
   122b0:	89000117 	ldw	r4,4(r17)
   122b4:	88800c17 	ldw	r2,48(r17)
   122b8:	8121c83a 	sub	r16,r16,r4
   122bc:	10000226 	beq	r2,zero,122c8 <_fflush_r+0xa4>
   122c0:	88800f17 	ldw	r2,60(r17)
   122c4:	80a1c83a 	sub	r16,r16,r2
   122c8:	89400717 	ldw	r5,28(r17)
   122cc:	9809883a 	mov	r4,r19
   122d0:	800d883a 	mov	r6,r16
   122d4:	000f883a 	mov	r7,zero
   122d8:	183ee83a 	callr	r3
   122dc:	8080281e 	bne	r16,r2,12380 <_fflush_r+0x15c>
   122e0:	8880030b 	ldhu	r2,12(r17)
   122e4:	88c00417 	ldw	r3,16(r17)
   122e8:	88000115 	stw	zero,4(r17)
   122ec:	113dffcc 	andi	r4,r2,63487
   122f0:	1084000c 	andi	r2,r2,4096
   122f4:	10bfffcc 	andi	r2,r2,65535
   122f8:	10a0001c 	xori	r2,r2,32768
   122fc:	8900030d 	sth	r4,12(r17)
   12300:	88c00015 	stw	r3,0(r17)
   12304:	10a00004 	addi	r2,r2,-32768
   12308:	10002c1e 	bne	r2,zero,123bc <_fflush_r+0x198>
   1230c:	0005883a 	mov	r2,zero
   12310:	dfc00417 	ldw	ra,16(sp)
   12314:	dcc00317 	ldw	r19,12(sp)
   12318:	dc800217 	ldw	r18,8(sp)
   1231c:	dc400117 	ldw	r17,4(sp)
   12320:	dc000017 	ldw	r16,0(sp)
   12324:	dec00504 	addi	sp,sp,20
   12328:	f800283a 	ret
   1232c:	8c800417 	ldw	r18,16(r17)
   12330:	903ff626 	beq	r18,zero,1230c <_fflush_r+0xe8>
   12334:	8c000017 	ldw	r16,0(r17)
   12338:	108000cc 	andi	r2,r2,3
   1233c:	8c800015 	stw	r18,0(r17)
   12340:	84a1c83a 	sub	r16,r16,r18
   12344:	10001b1e 	bne	r2,zero,123b4 <_fflush_r+0x190>
   12348:	88800517 	ldw	r2,20(r17)
   1234c:	88800215 	stw	r2,8(r17)
   12350:	04000316 	blt	zero,r16,12360 <_fflush_r+0x13c>
   12354:	003fed06 	br	1230c <_fflush_r+0xe8>
   12358:	90a5883a 	add	r18,r18,r2
   1235c:	043feb0e 	bge	zero,r16,1230c <_fflush_r+0xe8>
   12360:	88800917 	ldw	r2,36(r17)
   12364:	89400717 	ldw	r5,28(r17)
   12368:	800f883a 	mov	r7,r16
   1236c:	900d883a 	mov	r6,r18
   12370:	9809883a 	mov	r4,r19
   12374:	103ee83a 	callr	r2
   12378:	80a1c83a 	sub	r16,r16,r2
   1237c:	00bff616 	blt	zero,r2,12358 <_fflush_r+0x134>
   12380:	88c0030b 	ldhu	r3,12(r17)
   12384:	00bfffc4 	movi	r2,-1
   12388:	18c01014 	ori	r3,r3,64
   1238c:	88c0030d 	sth	r3,12(r17)
   12390:	dfc00417 	ldw	ra,16(sp)
   12394:	dcc00317 	ldw	r19,12(sp)
   12398:	dc800217 	ldw	r18,8(sp)
   1239c:	dc400117 	ldw	r17,4(sp)
   123a0:	dc000017 	ldw	r16,0(sp)
   123a4:	dec00504 	addi	sp,sp,20
   123a8:	f800283a 	ret
   123ac:	00124e00 	call	124e0 <__sinit>
   123b0:	003fa706 	br	12250 <_fflush_r+0x2c>
   123b4:	0005883a 	mov	r2,zero
   123b8:	003fe406 	br	1234c <_fflush_r+0x128>
   123bc:	8c001415 	stw	r16,80(r17)
   123c0:	003fd206 	br	1230c <_fflush_r+0xe8>
   123c4:	88c00f17 	ldw	r3,60(r17)
   123c8:	00ffac16 	blt	zero,r3,1227c <_fflush_r+0x58>
   123cc:	003fcf06 	br	1230c <_fflush_r+0xe8>
   123d0:	89400717 	ldw	r5,28(r17)
   123d4:	9809883a 	mov	r4,r19
   123d8:	000d883a 	mov	r6,zero
   123dc:	01c00044 	movi	r7,1
   123e0:	183ee83a 	callr	r3
   123e4:	1021883a 	mov	r16,r2
   123e8:	00bfffc4 	movi	r2,-1
   123ec:	80800326 	beq	r16,r2,123fc <_fflush_r+0x1d8>
   123f0:	8940030b 	ldhu	r5,12(r17)
   123f4:	88c00a17 	ldw	r3,40(r17)
   123f8:	003fa806 	br	1229c <_fflush_r+0x78>
   123fc:	98c00017 	ldw	r3,0(r19)
   12400:	00800744 	movi	r2,29
   12404:	18bfde1e 	bne	r3,r2,12380 <_fflush_r+0x15c>
   12408:	003fc006 	br	1230c <_fflush_r+0xe8>

0001240c <fflush>:
   1240c:	200b883a 	mov	r5,r4
   12410:	20000426 	beq	r4,zero,12424 <fflush+0x18>
   12414:	00800074 	movhi	r2,1
   12418:	109f1204 	addi	r2,r2,31816
   1241c:	11000017 	ldw	r4,0(r2)
   12420:	00122241 	jmpi	12224 <_fflush_r>
   12424:	00800074 	movhi	r2,1
   12428:	109f1104 	addi	r2,r2,31812
   1242c:	11000017 	ldw	r4,0(r2)
   12430:	01400074 	movhi	r5,1
   12434:	29488904 	addi	r5,r5,8740
   12438:	0012bdc1 	jmpi	12bdc <_fwalk_reent>

0001243c <__fp_lock>:
   1243c:	0005883a 	mov	r2,zero
   12440:	f800283a 	ret

00012444 <__fp_unlock>:
   12444:	0005883a 	mov	r2,zero
   12448:	f800283a 	ret

0001244c <_cleanup_r>:
   1244c:	01400074 	movhi	r5,1
   12450:	294c9904 	addi	r5,r5,12900
   12454:	0012b341 	jmpi	12b34 <_fwalk>

00012458 <__sfmoreglue>:
   12458:	defffc04 	addi	sp,sp,-16
   1245c:	dc800215 	stw	r18,8(sp)
   12460:	2825883a 	mov	r18,r5
   12464:	dc000015 	stw	r16,0(sp)
   12468:	01401704 	movi	r5,92
   1246c:	2021883a 	mov	r16,r4
   12470:	9009883a 	mov	r4,r18
   12474:	dfc00315 	stw	ra,12(sp)
   12478:	dc400115 	stw	r17,4(sp)
   1247c:	00108d80 	call	108d8 <__mulsi3>
   12480:	8009883a 	mov	r4,r16
   12484:	11400304 	addi	r5,r2,12
   12488:	1023883a 	mov	r17,r2
   1248c:	00110480 	call	11048 <_malloc_r>
   12490:	1021883a 	mov	r16,r2
   12494:	10000726 	beq	r2,zero,124b4 <__sfmoreglue+0x5c>
   12498:	11000304 	addi	r4,r2,12
   1249c:	10000015 	stw	zero,0(r2)
   124a0:	14800115 	stw	r18,4(r2)
   124a4:	11000215 	stw	r4,8(r2)
   124a8:	000b883a 	mov	r5,zero
   124ac:	880d883a 	mov	r6,r17
   124b0:	0012e3c0 	call	12e3c <memset>
   124b4:	8005883a 	mov	r2,r16
   124b8:	dfc00317 	ldw	ra,12(sp)
   124bc:	dc800217 	ldw	r18,8(sp)
   124c0:	dc400117 	ldw	r17,4(sp)
   124c4:	dc000017 	ldw	r16,0(sp)
   124c8:	dec00404 	addi	sp,sp,16
   124cc:	f800283a 	ret

000124d0 <_cleanup>:
   124d0:	00800074 	movhi	r2,1
   124d4:	109f1104 	addi	r2,r2,31812
   124d8:	11000017 	ldw	r4,0(r2)
   124dc:	001244c1 	jmpi	1244c <_cleanup_r>

000124e0 <__sinit>:
   124e0:	20800e17 	ldw	r2,56(r4)
   124e4:	1000401e 	bne	r2,zero,125e8 <__sinit+0x108>
   124e8:	21400117 	ldw	r5,4(r4)
   124ec:	01800074 	movhi	r6,1
   124f0:	31891304 	addi	r6,r6,9292
   124f4:	20c00217 	ldw	r3,8(r4)
   124f8:	21800f15 	stw	r6,60(r4)
   124fc:	2080bb04 	addi	r2,r4,748
   12500:	02400044 	movi	r9,1
   12504:	018000c4 	movi	r6,3
   12508:	2180b915 	stw	r6,740(r4)
   1250c:	2080ba15 	stw	r2,744(r4)
   12510:	22400e15 	stw	r9,56(r4)
   12514:	20800317 	ldw	r2,12(r4)
   12518:	2000b815 	stw	zero,736(r4)
   1251c:	02000074 	movhi	r8,1
   12520:	420bc604 	addi	r8,r8,12056
   12524:	01c00074 	movhi	r7,1
   12528:	39cbdb04 	addi	r7,r7,12140
   1252c:	01800074 	movhi	r6,1
   12530:	318bfd04 	addi	r6,r6,12276
   12534:	01000074 	movhi	r4,1
   12538:	210c1404 	addi	r4,r4,12368
   1253c:	02800104 	movi	r10,4
   12540:	28000015 	stw	zero,0(r5)
   12544:	28000115 	stw	zero,4(r5)
   12548:	28000215 	stw	zero,8(r5)
   1254c:	2a80030d 	sth	r10,12(r5)
   12550:	2800038d 	sth	zero,14(r5)
   12554:	28000415 	stw	zero,16(r5)
   12558:	28000515 	stw	zero,20(r5)
   1255c:	28000615 	stw	zero,24(r5)
   12560:	29400715 	stw	r5,28(r5)
   12564:	2a000815 	stw	r8,32(r5)
   12568:	29c00915 	stw	r7,36(r5)
   1256c:	29800a15 	stw	r6,40(r5)
   12570:	29000b15 	stw	r4,44(r5)
   12574:	01400284 	movi	r5,10
   12578:	18000015 	stw	zero,0(r3)
   1257c:	18000115 	stw	zero,4(r3)
   12580:	18000215 	stw	zero,8(r3)
   12584:	1940030d 	sth	r5,12(r3)
   12588:	1a40038d 	sth	r9,14(r3)
   1258c:	18000415 	stw	zero,16(r3)
   12590:	18000515 	stw	zero,20(r3)
   12594:	18000615 	stw	zero,24(r3)
   12598:	18c00715 	stw	r3,28(r3)
   1259c:	1a000815 	stw	r8,32(r3)
   125a0:	19c00915 	stw	r7,36(r3)
   125a4:	19800a15 	stw	r6,40(r3)
   125a8:	19000b15 	stw	r4,44(r3)
   125ac:	00c00484 	movi	r3,18
   125b0:	10c0030d 	sth	r3,12(r2)
   125b4:	00c00084 	movi	r3,2
   125b8:	10000015 	stw	zero,0(r2)
   125bc:	10000115 	stw	zero,4(r2)
   125c0:	10000215 	stw	zero,8(r2)
   125c4:	10c0038d 	sth	r3,14(r2)
   125c8:	10000415 	stw	zero,16(r2)
   125cc:	10000515 	stw	zero,20(r2)
   125d0:	10000615 	stw	zero,24(r2)
   125d4:	10800715 	stw	r2,28(r2)
   125d8:	12000815 	stw	r8,32(r2)
   125dc:	11c00915 	stw	r7,36(r2)
   125e0:	11800a15 	stw	r6,40(r2)
   125e4:	11000b15 	stw	r4,44(r2)
   125e8:	f800283a 	ret

000125ec <__sfp>:
   125ec:	defffc04 	addi	sp,sp,-16
   125f0:	00800074 	movhi	r2,1
   125f4:	109f1104 	addi	r2,r2,31812
   125f8:	dc400115 	stw	r17,4(sp)
   125fc:	14400017 	ldw	r17,0(r2)
   12600:	dc800215 	stw	r18,8(sp)
   12604:	dfc00315 	stw	ra,12(sp)
   12608:	88800e17 	ldw	r2,56(r17)
   1260c:	dc000015 	stw	r16,0(sp)
   12610:	2025883a 	mov	r18,r4
   12614:	10002826 	beq	r2,zero,126b8 <__sfp+0xcc>
   12618:	8c40b804 	addi	r17,r17,736
   1261c:	043fffc4 	movi	r16,-1
   12620:	89400117 	ldw	r5,4(r17)
   12624:	88800217 	ldw	r2,8(r17)
   12628:	297fffc4 	addi	r5,r5,-1
   1262c:	28000a16 	blt	r5,zero,12658 <__sfp+0x6c>
   12630:	10c0030f 	ldh	r3,12(r2)
   12634:	18000c26 	beq	r3,zero,12668 <__sfp+0x7c>
   12638:	10c01a04 	addi	r3,r2,104
   1263c:	00000206 	br	12648 <__sfp+0x5c>
   12640:	19bfe90f 	ldh	r6,-92(r3)
   12644:	30000826 	beq	r6,zero,12668 <__sfp+0x7c>
   12648:	297fffc4 	addi	r5,r5,-1
   1264c:	18bffd04 	addi	r2,r3,-12
   12650:	18c01704 	addi	r3,r3,92
   12654:	2c3ffa1e 	bne	r5,r16,12640 <__sfp+0x54>
   12658:	88800017 	ldw	r2,0(r17)
   1265c:	10001926 	beq	r2,zero,126c4 <__sfp+0xd8>
   12660:	1023883a 	mov	r17,r2
   12664:	003fee06 	br	12620 <__sfp+0x34>
   12668:	00ffffc4 	movi	r3,-1
   1266c:	10c0038d 	sth	r3,14(r2)
   12670:	00c00044 	movi	r3,1
   12674:	10c0030d 	sth	r3,12(r2)
   12678:	10000015 	stw	zero,0(r2)
   1267c:	10000215 	stw	zero,8(r2)
   12680:	10000115 	stw	zero,4(r2)
   12684:	10000415 	stw	zero,16(r2)
   12688:	10000515 	stw	zero,20(r2)
   1268c:	10000615 	stw	zero,24(r2)
   12690:	10000c15 	stw	zero,48(r2)
   12694:	10000d15 	stw	zero,52(r2)
   12698:	10001115 	stw	zero,68(r2)
   1269c:	10001215 	stw	zero,72(r2)
   126a0:	dfc00317 	ldw	ra,12(sp)
   126a4:	dc800217 	ldw	r18,8(sp)
   126a8:	dc400117 	ldw	r17,4(sp)
   126ac:	dc000017 	ldw	r16,0(sp)
   126b0:	dec00404 	addi	sp,sp,16
   126b4:	f800283a 	ret
   126b8:	8809883a 	mov	r4,r17
   126bc:	00124e00 	call	124e0 <__sinit>
   126c0:	003fd506 	br	12618 <__sfp+0x2c>
   126c4:	9009883a 	mov	r4,r18
   126c8:	01400104 	movi	r5,4
   126cc:	00124580 	call	12458 <__sfmoreglue>
   126d0:	88800015 	stw	r2,0(r17)
   126d4:	103fe21e 	bne	r2,zero,12660 <__sfp+0x74>
   126d8:	00800304 	movi	r2,12
   126dc:	90800015 	stw	r2,0(r18)
   126e0:	0005883a 	mov	r2,zero
   126e4:	003fee06 	br	126a0 <__sfp+0xb4>

000126e8 <__sfp_lock_acquire>:
   126e8:	f800283a 	ret

000126ec <__sfp_lock_release>:
   126ec:	f800283a 	ret

000126f0 <__sinit_lock_acquire>:
   126f0:	f800283a 	ret

000126f4 <__sinit_lock_release>:
   126f4:	f800283a 	ret

000126f8 <__fp_lock_all>:
   126f8:	00800074 	movhi	r2,1
   126fc:	109f1204 	addi	r2,r2,31816
   12700:	11000017 	ldw	r4,0(r2)
   12704:	01400074 	movhi	r5,1
   12708:	29490f04 	addi	r5,r5,9276
   1270c:	0012b341 	jmpi	12b34 <_fwalk>

00012710 <__fp_unlock_all>:
   12710:	00800074 	movhi	r2,1
   12714:	109f1204 	addi	r2,r2,31816
   12718:	11000017 	ldw	r4,0(r2)
   1271c:	01400074 	movhi	r5,1
   12720:	29491104 	addi	r5,r5,9284
   12724:	0012b341 	jmpi	12b34 <_fwalk>

00012728 <_malloc_trim_r>:
   12728:	defffb04 	addi	sp,sp,-20
   1272c:	dcc00315 	stw	r19,12(sp)
   12730:	dc800215 	stw	r18,8(sp)
   12734:	dc400115 	stw	r17,4(sp)
   12738:	dc000015 	stw	r16,0(sp)
   1273c:	2827883a 	mov	r19,r5
   12740:	dfc00415 	stw	ra,16(sp)
   12744:	04400074 	movhi	r17,1
   12748:	8c598d04 	addi	r17,r17,26164
   1274c:	2021883a 	mov	r16,r4
   12750:	00139e00 	call	139e0 <__malloc_lock>
   12754:	88800217 	ldw	r2,8(r17)
   12758:	14800117 	ldw	r18,4(r2)
   1275c:	00bfff04 	movi	r2,-4
   12760:	90a4703a 	and	r18,r18,r2
   12764:	9083fbc4 	addi	r2,r18,4079
   12768:	14e7c83a 	sub	r19,r2,r19
   1276c:	9826d33a 	srli	r19,r19,12
   12770:	0083ffc4 	movi	r2,4095
   12774:	9cffffc4 	addi	r19,r19,-1
   12778:	9826933a 	slli	r19,r19,12
   1277c:	14c0060e 	bge	r2,r19,12798 <_malloc_trim_r+0x70>
   12780:	8009883a 	mov	r4,r16
   12784:	000b883a 	mov	r5,zero
   12788:	001204c0 	call	1204c <_sbrk_r>
   1278c:	88c00217 	ldw	r3,8(r17)
   12790:	1c87883a 	add	r3,r3,r18
   12794:	10c00a26 	beq	r2,r3,127c0 <_malloc_trim_r+0x98>
   12798:	8009883a 	mov	r4,r16
   1279c:	0013a000 	call	13a00 <__malloc_unlock>
   127a0:	0005883a 	mov	r2,zero
   127a4:	dfc00417 	ldw	ra,16(sp)
   127a8:	dcc00317 	ldw	r19,12(sp)
   127ac:	dc800217 	ldw	r18,8(sp)
   127b0:	dc400117 	ldw	r17,4(sp)
   127b4:	dc000017 	ldw	r16,0(sp)
   127b8:	dec00504 	addi	sp,sp,20
   127bc:	f800283a 	ret
   127c0:	8009883a 	mov	r4,r16
   127c4:	04cbc83a 	sub	r5,zero,r19
   127c8:	001204c0 	call	1204c <_sbrk_r>
   127cc:	00ffffc4 	movi	r3,-1
   127d0:	10c01326 	beq	r2,r3,12820 <_malloc_trim_r+0xf8>
   127d4:	008000b4 	movhi	r2,2
   127d8:	10a5cb04 	addi	r2,r2,-26836
   127dc:	11000017 	ldw	r4,0(r2)
   127e0:	88c00217 	ldw	r3,8(r17)
   127e4:	94e5c83a 	sub	r18,r18,r19
   127e8:	94800054 	ori	r18,r18,1
   127ec:	24e7c83a 	sub	r19,r4,r19
   127f0:	1c800115 	stw	r18,4(r3)
   127f4:	8009883a 	mov	r4,r16
   127f8:	14c00015 	stw	r19,0(r2)
   127fc:	0013a000 	call	13a00 <__malloc_unlock>
   12800:	00800044 	movi	r2,1
   12804:	dfc00417 	ldw	ra,16(sp)
   12808:	dcc00317 	ldw	r19,12(sp)
   1280c:	dc800217 	ldw	r18,8(sp)
   12810:	dc400117 	ldw	r17,4(sp)
   12814:	dc000017 	ldw	r16,0(sp)
   12818:	dec00504 	addi	sp,sp,20
   1281c:	f800283a 	ret
   12820:	8009883a 	mov	r4,r16
   12824:	000b883a 	mov	r5,zero
   12828:	001204c0 	call	1204c <_sbrk_r>
   1282c:	88c00217 	ldw	r3,8(r17)
   12830:	014003c4 	movi	r5,15
   12834:	10c9c83a 	sub	r4,r2,r3
   12838:	293fd70e 	bge	r5,r4,12798 <_malloc_trim_r+0x70>
   1283c:	01400074 	movhi	r5,1
   12840:	295f1304 	addi	r5,r5,31820
   12844:	29400017 	ldw	r5,0(r5)
   12848:	21000054 	ori	r4,r4,1
   1284c:	19000115 	stw	r4,4(r3)
   12850:	1145c83a 	sub	r2,r2,r5
   12854:	014000b4 	movhi	r5,2
   12858:	2965cb04 	addi	r5,r5,-26836
   1285c:	28800015 	stw	r2,0(r5)
   12860:	003fcd06 	br	12798 <_malloc_trim_r+0x70>

00012864 <_free_r>:
   12864:	defffd04 	addi	sp,sp,-12
   12868:	dc400115 	stw	r17,4(sp)
   1286c:	dc000015 	stw	r16,0(sp)
   12870:	dfc00215 	stw	ra,8(sp)
   12874:	2821883a 	mov	r16,r5
   12878:	2023883a 	mov	r17,r4
   1287c:	28004b26 	beq	r5,zero,129ac <_free_r+0x148>
   12880:	00139e00 	call	139e0 <__malloc_lock>
   12884:	823fff17 	ldw	r8,-4(r16)
   12888:	00bfff84 	movi	r2,-2
   1288c:	81bffe04 	addi	r6,r16,-8
   12890:	4084703a 	and	r2,r8,r2
   12894:	3087883a 	add	r3,r6,r2
   12898:	01400074 	movhi	r5,1
   1289c:	29598d04 	addi	r5,r5,26164
   128a0:	1a400117 	ldw	r9,4(r3)
   128a4:	29000217 	ldw	r4,8(r5)
   128a8:	01ffff04 	movi	r7,-4
   128ac:	49ce703a 	and	r7,r9,r7
   128b0:	20c06526 	beq	r4,r3,12a48 <_free_r+0x1e4>
   128b4:	19c00115 	stw	r7,4(r3)
   128b8:	4200004c 	andi	r8,r8,1
   128bc:	40003026 	beq	r8,zero,12980 <_free_r+0x11c>
   128c0:	0009883a 	mov	r4,zero
   128c4:	19d1883a 	add	r8,r3,r7
   128c8:	42000117 	ldw	r8,4(r8)
   128cc:	4200004c 	andi	r8,r8,1
   128d0:	4000061e 	bne	r8,zero,128ec <_free_r+0x88>
   128d4:	11c5883a 	add	r2,r2,r7
   128d8:	19c00217 	ldw	r7,8(r3)
   128dc:	20004e26 	beq	r4,zero,12a18 <_free_r+0x1b4>
   128e0:	18c00317 	ldw	r3,12(r3)
   128e4:	38c00315 	stw	r3,12(r7)
   128e8:	19c00215 	stw	r7,8(r3)
   128ec:	11c00054 	ori	r7,r2,1
   128f0:	3087883a 	add	r3,r6,r2
   128f4:	31c00115 	stw	r7,4(r6)
   128f8:	18800015 	stw	r2,0(r3)
   128fc:	20001a1e 	bne	r4,zero,12968 <_free_r+0x104>
   12900:	00c07fc4 	movi	r3,511
   12904:	18802e2e 	bgeu	r3,r2,129c0 <_free_r+0x15c>
   12908:	1006d27a 	srli	r3,r2,9
   1290c:	01000104 	movi	r4,4
   12910:	20c06636 	bltu	r4,r3,12aac <_free_r+0x248>
   12914:	1008d1ba 	srli	r4,r2,6
   12918:	21000e04 	addi	r4,r4,56
   1291c:	210f883a 	add	r7,r4,r4
   12920:	39cf883a 	add	r7,r7,r7
   12924:	39cf883a 	add	r7,r7,r7
   12928:	29cf883a 	add	r7,r5,r7
   1292c:	38c00217 	ldw	r3,8(r7)
   12930:	01400074 	movhi	r5,1
   12934:	29598d04 	addi	r5,r5,26164
   12938:	19c06126 	beq	r3,r7,12ac0 <_free_r+0x25c>
   1293c:	013fff04 	movi	r4,-4
   12940:	19400117 	ldw	r5,4(r3)
   12944:	290a703a 	and	r5,r5,r4
   12948:	1140022e 	bgeu	r2,r5,12954 <_free_r+0xf0>
   1294c:	18c00217 	ldw	r3,8(r3)
   12950:	38fffb1e 	bne	r7,r3,12940 <_free_r+0xdc>
   12954:	18800317 	ldw	r2,12(r3)
   12958:	30800315 	stw	r2,12(r6)
   1295c:	30c00215 	stw	r3,8(r6)
   12960:	11800215 	stw	r6,8(r2)
   12964:	19800315 	stw	r6,12(r3)
   12968:	8809883a 	mov	r4,r17
   1296c:	dfc00217 	ldw	ra,8(sp)
   12970:	dc400117 	ldw	r17,4(sp)
   12974:	dc000017 	ldw	r16,0(sp)
   12978:	dec00304 	addi	sp,sp,12
   1297c:	0013a001 	jmpi	13a00 <__malloc_unlock>
   12980:	813ffe17 	ldw	r4,-8(r16)
   12984:	2a400204 	addi	r9,r5,8
   12988:	310dc83a 	sub	r6,r6,r4
   1298c:	32000217 	ldw	r8,8(r6)
   12990:	1105883a 	add	r2,r2,r4
   12994:	42404326 	beq	r8,r9,12aa4 <_free_r+0x240>
   12998:	32400317 	ldw	r9,12(r6)
   1299c:	0009883a 	mov	r4,zero
   129a0:	42400315 	stw	r9,12(r8)
   129a4:	4a000215 	stw	r8,8(r9)
   129a8:	003fc606 	br	128c4 <_free_r+0x60>
   129ac:	dfc00217 	ldw	ra,8(sp)
   129b0:	dc400117 	ldw	r17,4(sp)
   129b4:	dc000017 	ldw	r16,0(sp)
   129b8:	dec00304 	addi	sp,sp,12
   129bc:	f800283a 	ret
   129c0:	1004d0fa 	srli	r2,r2,3
   129c4:	02000044 	movi	r8,1
   129c8:	29c00117 	ldw	r7,4(r5)
   129cc:	1087883a 	add	r3,r2,r2
   129d0:	18c7883a 	add	r3,r3,r3
   129d4:	1005d0ba 	srai	r2,r2,2
   129d8:	18c7883a 	add	r3,r3,r3
   129dc:	28c7883a 	add	r3,r5,r3
   129e0:	19000217 	ldw	r4,8(r3)
   129e4:	4084983a 	sll	r2,r8,r2
   129e8:	30c00315 	stw	r3,12(r6)
   129ec:	31000215 	stw	r4,8(r6)
   129f0:	11c4b03a 	or	r2,r2,r7
   129f4:	21800315 	stw	r6,12(r4)
   129f8:	8809883a 	mov	r4,r17
   129fc:	28800115 	stw	r2,4(r5)
   12a00:	19800215 	stw	r6,8(r3)
   12a04:	dfc00217 	ldw	ra,8(sp)
   12a08:	dc400117 	ldw	r17,4(sp)
   12a0c:	dc000017 	ldw	r16,0(sp)
   12a10:	dec00304 	addi	sp,sp,12
   12a14:	0013a001 	jmpi	13a00 <__malloc_unlock>
   12a18:	02000074 	movhi	r8,1
   12a1c:	42198f04 	addi	r8,r8,26172
   12a20:	3a3faf1e 	bne	r7,r8,128e0 <_free_r+0x7c>
   12a24:	29800515 	stw	r6,20(r5)
   12a28:	29800415 	stw	r6,16(r5)
   12a2c:	11000054 	ori	r4,r2,1
   12a30:	3087883a 	add	r3,r6,r2
   12a34:	31c00315 	stw	r7,12(r6)
   12a38:	31c00215 	stw	r7,8(r6)
   12a3c:	31000115 	stw	r4,4(r6)
   12a40:	18800015 	stw	r2,0(r3)
   12a44:	003fc806 	br	12968 <_free_r+0x104>
   12a48:	4200004c 	andi	r8,r8,1
   12a4c:	3885883a 	add	r2,r7,r2
   12a50:	4000071e 	bne	r8,zero,12a70 <_free_r+0x20c>
   12a54:	81fffe17 	ldw	r7,-8(r16)
   12a58:	31cdc83a 	sub	r6,r6,r7
   12a5c:	30c00317 	ldw	r3,12(r6)
   12a60:	31000217 	ldw	r4,8(r6)
   12a64:	11c5883a 	add	r2,r2,r7
   12a68:	20c00315 	stw	r3,12(r4)
   12a6c:	19000215 	stw	r4,8(r3)
   12a70:	00c00074 	movhi	r3,1
   12a74:	18df1404 	addi	r3,r3,31824
   12a78:	18c00017 	ldw	r3,0(r3)
   12a7c:	11000054 	ori	r4,r2,1
   12a80:	31000115 	stw	r4,4(r6)
   12a84:	29800215 	stw	r6,8(r5)
   12a88:	10ffb736 	bltu	r2,r3,12968 <_free_r+0x104>
   12a8c:	008000b4 	movhi	r2,2
   12a90:	10a5c304 	addi	r2,r2,-26868
   12a94:	11400017 	ldw	r5,0(r2)
   12a98:	8809883a 	mov	r4,r17
   12a9c:	00127280 	call	12728 <_malloc_trim_r>
   12aa0:	003fb106 	br	12968 <_free_r+0x104>
   12aa4:	01000044 	movi	r4,1
   12aa8:	003f8606 	br	128c4 <_free_r+0x60>
   12aac:	01000504 	movi	r4,20
   12ab0:	20c00b36 	bltu	r4,r3,12ae0 <_free_r+0x27c>
   12ab4:	190016c4 	addi	r4,r3,91
   12ab8:	210f883a 	add	r7,r4,r4
   12abc:	003f9806 	br	12920 <_free_r+0xbc>
   12ac0:	2009d0ba 	srai	r4,r4,2
   12ac4:	00800044 	movi	r2,1
   12ac8:	29c00117 	ldw	r7,4(r5)
   12acc:	1108983a 	sll	r4,r2,r4
   12ad0:	1805883a 	mov	r2,r3
   12ad4:	21c8b03a 	or	r4,r4,r7
   12ad8:	29000115 	stw	r4,4(r5)
   12adc:	003f9e06 	br	12958 <_free_r+0xf4>
   12ae0:	01001504 	movi	r4,84
   12ae4:	20c00436 	bltu	r4,r3,12af8 <_free_r+0x294>
   12ae8:	1008d33a 	srli	r4,r2,12
   12aec:	21001b84 	addi	r4,r4,110
   12af0:	210f883a 	add	r7,r4,r4
   12af4:	003f8a06 	br	12920 <_free_r+0xbc>
   12af8:	01005504 	movi	r4,340
   12afc:	20c00436 	bltu	r4,r3,12b10 <_free_r+0x2ac>
   12b00:	1008d3fa 	srli	r4,r2,15
   12b04:	21001dc4 	addi	r4,r4,119
   12b08:	210f883a 	add	r7,r4,r4
   12b0c:	003f8406 	br	12920 <_free_r+0xbc>
   12b10:	01015504 	movi	r4,1364
   12b14:	20c00436 	bltu	r4,r3,12b28 <_free_r+0x2c4>
   12b18:	1008d4ba 	srli	r4,r2,18
   12b1c:	21001f04 	addi	r4,r4,124
   12b20:	210f883a 	add	r7,r4,r4
   12b24:	003f7e06 	br	12920 <_free_r+0xbc>
   12b28:	01c03f04 	movi	r7,252
   12b2c:	01001f84 	movi	r4,126
   12b30:	003f7b06 	br	12920 <_free_r+0xbc>

00012b34 <_fwalk>:
   12b34:	defff904 	addi	sp,sp,-28
   12b38:	dcc00315 	stw	r19,12(sp)
   12b3c:	24c0b804 	addi	r19,r4,736
   12b40:	dd400515 	stw	r21,20(sp)
   12b44:	dd000415 	stw	r20,16(sp)
   12b48:	dfc00615 	stw	ra,24(sp)
   12b4c:	dc800215 	stw	r18,8(sp)
   12b50:	dc400115 	stw	r17,4(sp)
   12b54:	dc000015 	stw	r16,0(sp)
   12b58:	282b883a 	mov	r21,r5
   12b5c:	0029883a 	mov	r20,zero
   12b60:	00126e80 	call	126e8 <__sfp_lock_acquire>
   12b64:	98001226 	beq	r19,zero,12bb0 <_fwalk+0x7c>
   12b68:	04bfffc4 	movi	r18,-1
   12b6c:	9c400117 	ldw	r17,4(r19)
   12b70:	9c000217 	ldw	r16,8(r19)
   12b74:	8c7fffc4 	addi	r17,r17,-1
   12b78:	88000b16 	blt	r17,zero,12ba8 <_fwalk+0x74>
   12b7c:	84000304 	addi	r16,r16,12
   12b80:	80c0000f 	ldh	r3,0(r16)
   12b84:	8c7fffc4 	addi	r17,r17,-1
   12b88:	813ffd04 	addi	r4,r16,-12
   12b8c:	18000426 	beq	r3,zero,12ba0 <_fwalk+0x6c>
   12b90:	80c0008f 	ldh	r3,2(r16)
   12b94:	1c800226 	beq	r3,r18,12ba0 <_fwalk+0x6c>
   12b98:	a83ee83a 	callr	r21
   12b9c:	a0a8b03a 	or	r20,r20,r2
   12ba0:	84001704 	addi	r16,r16,92
   12ba4:	8cbff61e 	bne	r17,r18,12b80 <_fwalk+0x4c>
   12ba8:	9cc00017 	ldw	r19,0(r19)
   12bac:	983fef1e 	bne	r19,zero,12b6c <_fwalk+0x38>
   12bb0:	00126ec0 	call	126ec <__sfp_lock_release>
   12bb4:	a005883a 	mov	r2,r20
   12bb8:	dfc00617 	ldw	ra,24(sp)
   12bbc:	dd400517 	ldw	r21,20(sp)
   12bc0:	dd000417 	ldw	r20,16(sp)
   12bc4:	dcc00317 	ldw	r19,12(sp)
   12bc8:	dc800217 	ldw	r18,8(sp)
   12bcc:	dc400117 	ldw	r17,4(sp)
   12bd0:	dc000017 	ldw	r16,0(sp)
   12bd4:	dec00704 	addi	sp,sp,28
   12bd8:	f800283a 	ret

00012bdc <_fwalk_reent>:
   12bdc:	defff804 	addi	sp,sp,-32
   12be0:	dcc00315 	stw	r19,12(sp)
   12be4:	24c0b804 	addi	r19,r4,736
   12be8:	dd800615 	stw	r22,24(sp)
   12bec:	dd400515 	stw	r21,20(sp)
   12bf0:	dd000415 	stw	r20,16(sp)
   12bf4:	dfc00715 	stw	ra,28(sp)
   12bf8:	dc800215 	stw	r18,8(sp)
   12bfc:	dc400115 	stw	r17,4(sp)
   12c00:	dc000015 	stw	r16,0(sp)
   12c04:	2029883a 	mov	r20,r4
   12c08:	282b883a 	mov	r21,r5
   12c0c:	002d883a 	mov	r22,zero
   12c10:	00126e80 	call	126e8 <__sfp_lock_acquire>
   12c14:	98001326 	beq	r19,zero,12c64 <_fwalk_reent+0x88>
   12c18:	04bfffc4 	movi	r18,-1
   12c1c:	9c400117 	ldw	r17,4(r19)
   12c20:	9c000217 	ldw	r16,8(r19)
   12c24:	8c7fffc4 	addi	r17,r17,-1
   12c28:	88000c16 	blt	r17,zero,12c5c <_fwalk_reent+0x80>
   12c2c:	84000304 	addi	r16,r16,12
   12c30:	80c0000f 	ldh	r3,0(r16)
   12c34:	8c7fffc4 	addi	r17,r17,-1
   12c38:	817ffd04 	addi	r5,r16,-12
   12c3c:	18000526 	beq	r3,zero,12c54 <_fwalk_reent+0x78>
   12c40:	80c0008f 	ldh	r3,2(r16)
   12c44:	a009883a 	mov	r4,r20
   12c48:	1c800226 	beq	r3,r18,12c54 <_fwalk_reent+0x78>
   12c4c:	a83ee83a 	callr	r21
   12c50:	b0acb03a 	or	r22,r22,r2
   12c54:	84001704 	addi	r16,r16,92
   12c58:	8cbff51e 	bne	r17,r18,12c30 <_fwalk_reent+0x54>
   12c5c:	9cc00017 	ldw	r19,0(r19)
   12c60:	983fee1e 	bne	r19,zero,12c1c <_fwalk_reent+0x40>
   12c64:	00126ec0 	call	126ec <__sfp_lock_release>
   12c68:	b005883a 	mov	r2,r22
   12c6c:	dfc00717 	ldw	ra,28(sp)
   12c70:	dd800617 	ldw	r22,24(sp)
   12c74:	dd400517 	ldw	r21,20(sp)
   12c78:	dd000417 	ldw	r20,16(sp)
   12c7c:	dcc00317 	ldw	r19,12(sp)
   12c80:	dc800217 	ldw	r18,8(sp)
   12c84:	dc400117 	ldw	r17,4(sp)
   12c88:	dc000017 	ldw	r16,0(sp)
   12c8c:	dec00804 	addi	sp,sp,32
   12c90:	f800283a 	ret

00012c94 <__smakebuf_r>:
   12c94:	2880030b 	ldhu	r2,12(r5)
   12c98:	deffed04 	addi	sp,sp,-76
   12c9c:	dc401015 	stw	r17,64(sp)
   12ca0:	10c0008c 	andi	r3,r2,2
   12ca4:	18ffffcc 	andi	r3,r3,65535
   12ca8:	18e0001c 	xori	r3,r3,32768
   12cac:	dc000f15 	stw	r16,60(sp)
   12cb0:	dfc01215 	stw	ra,72(sp)
   12cb4:	dc801115 	stw	r18,68(sp)
   12cb8:	18e00004 	addi	r3,r3,-32768
   12cbc:	2821883a 	mov	r16,r5
   12cc0:	2023883a 	mov	r17,r4
   12cc4:	1800381e 	bne	r3,zero,12da8 <__smakebuf_r+0x114>
   12cc8:	2940038f 	ldh	r5,14(r5)
   12ccc:	28002d16 	blt	r5,zero,12d84 <__smakebuf_r+0xf0>
   12cd0:	d80d883a 	mov	r6,sp
   12cd4:	00132780 	call	13278 <_fstat_r>
   12cd8:	10002916 	blt	r2,zero,12d80 <__smakebuf_r+0xec>
   12cdc:	d8800117 	ldw	r2,4(sp)
   12ce0:	00e00014 	movui	r3,32768
   12ce4:	10bc000c 	andi	r2,r2,61440
   12ce8:	10c03c26 	beq	r2,r3,12ddc <__smakebuf_r+0x148>
   12cec:	80c0030b 	ldhu	r3,12(r16)
   12cf0:	18c20014 	ori	r3,r3,2048
   12cf4:	80c0030d 	sth	r3,12(r16)
   12cf8:	00c80004 	movi	r3,8192
   12cfc:	10c00c1e 	bne	r2,r3,12d30 <__smakebuf_r+0x9c>
   12d00:	8140038f 	ldh	r5,14(r16)
   12d04:	8809883a 	mov	r4,r17
   12d08:	00132e00 	call	132e0 <_isatty_r>
   12d0c:	10000826 	beq	r2,zero,12d30 <__smakebuf_r+0x9c>
   12d10:	80c0030b 	ldhu	r3,12(r16)
   12d14:	808010c4 	addi	r2,r16,67
   12d18:	80800015 	stw	r2,0(r16)
   12d1c:	18c00054 	ori	r3,r3,1
   12d20:	80800415 	stw	r2,16(r16)
   12d24:	00800044 	movi	r2,1
   12d28:	80c0030d 	sth	r3,12(r16)
   12d2c:	80800515 	stw	r2,20(r16)
   12d30:	04810004 	movi	r18,1024
   12d34:	8809883a 	mov	r4,r17
   12d38:	900b883a 	mov	r5,r18
   12d3c:	00110480 	call	11048 <_malloc_r>
   12d40:	10003026 	beq	r2,zero,12e04 <__smakebuf_r+0x170>
   12d44:	80c0030b 	ldhu	r3,12(r16)
   12d48:	01000074 	movhi	r4,1
   12d4c:	21091304 	addi	r4,r4,9292
   12d50:	89000f15 	stw	r4,60(r17)
   12d54:	18c02014 	ori	r3,r3,128
   12d58:	80c0030d 	sth	r3,12(r16)
   12d5c:	80800015 	stw	r2,0(r16)
   12d60:	80800415 	stw	r2,16(r16)
   12d64:	84800515 	stw	r18,20(r16)
   12d68:	dfc01217 	ldw	ra,72(sp)
   12d6c:	dc801117 	ldw	r18,68(sp)
   12d70:	dc401017 	ldw	r17,64(sp)
   12d74:	dc000f17 	ldw	r16,60(sp)
   12d78:	dec01304 	addi	sp,sp,76
   12d7c:	f800283a 	ret
   12d80:	8080030b 	ldhu	r2,12(r16)
   12d84:	10c0200c 	andi	r3,r2,128
   12d88:	18ffffcc 	andi	r3,r3,65535
   12d8c:	18e0001c 	xori	r3,r3,32768
   12d90:	18e00004 	addi	r3,r3,-32768
   12d94:	18000f1e 	bne	r3,zero,12dd4 <__smakebuf_r+0x140>
   12d98:	04810004 	movi	r18,1024
   12d9c:	10820014 	ori	r2,r2,2048
   12da0:	8080030d 	sth	r2,12(r16)
   12da4:	003fe306 	br	12d34 <__smakebuf_r+0xa0>
   12da8:	288010c4 	addi	r2,r5,67
   12dac:	28800015 	stw	r2,0(r5)
   12db0:	28800415 	stw	r2,16(r5)
   12db4:	00800044 	movi	r2,1
   12db8:	28800515 	stw	r2,20(r5)
   12dbc:	dfc01217 	ldw	ra,72(sp)
   12dc0:	dc801117 	ldw	r18,68(sp)
   12dc4:	dc401017 	ldw	r17,64(sp)
   12dc8:	dc000f17 	ldw	r16,60(sp)
   12dcc:	dec01304 	addi	sp,sp,76
   12dd0:	f800283a 	ret
   12dd4:	04801004 	movi	r18,64
   12dd8:	003ff006 	br	12d9c <__smakebuf_r+0x108>
   12ddc:	81000a17 	ldw	r4,40(r16)
   12de0:	00c00074 	movhi	r3,1
   12de4:	18cbfd04 	addi	r3,r3,12276
   12de8:	20ffc01e 	bne	r4,r3,12cec <__smakebuf_r+0x58>
   12dec:	8080030b 	ldhu	r2,12(r16)
   12df0:	00c10004 	movi	r3,1024
   12df4:	80c01315 	stw	r3,76(r16)
   12df8:	10c4b03a 	or	r2,r2,r3
   12dfc:	8080030d 	sth	r2,12(r16)
   12e00:	003fcb06 	br	12d30 <__smakebuf_r+0x9c>
   12e04:	8080030b 	ldhu	r2,12(r16)
   12e08:	10c0800c 	andi	r3,r2,512
   12e0c:	18ffffcc 	andi	r3,r3,65535
   12e10:	18e0001c 	xori	r3,r3,32768
   12e14:	18e00004 	addi	r3,r3,-32768
   12e18:	183fd31e 	bne	r3,zero,12d68 <__smakebuf_r+0xd4>
   12e1c:	10800094 	ori	r2,r2,2
   12e20:	80c010c4 	addi	r3,r16,67
   12e24:	8080030d 	sth	r2,12(r16)
   12e28:	00800044 	movi	r2,1
   12e2c:	80c00015 	stw	r3,0(r16)
   12e30:	80c00415 	stw	r3,16(r16)
   12e34:	80800515 	stw	r2,20(r16)
   12e38:	003fcb06 	br	12d68 <__smakebuf_r+0xd4>

00012e3c <memset>:
   12e3c:	00c000c4 	movi	r3,3
   12e40:	2005883a 	mov	r2,r4
   12e44:	29403fcc 	andi	r5,r5,255
   12e48:	19802d2e 	bgeu	r3,r6,12f00 <memset+0xc4>
   12e4c:	20c6703a 	and	r3,r4,r3
   12e50:	18002e1e 	bne	r3,zero,12f0c <memset+0xd0>
   12e54:	2806923a 	slli	r3,r5,8
   12e58:	010003c4 	movi	r4,15
   12e5c:	3011883a 	mov	r8,r6
   12e60:	1946b03a 	or	r3,r3,r5
   12e64:	180e943a 	slli	r7,r3,16
   12e68:	38ceb03a 	or	r7,r7,r3
   12e6c:	1007883a 	mov	r3,r2
   12e70:	21800f2e 	bgeu	r4,r6,12eb0 <memset+0x74>
   12e74:	19c00015 	stw	r7,0(r3)
   12e78:	19c00115 	stw	r7,4(r3)
   12e7c:	19c00215 	stw	r7,8(r3)
   12e80:	19c00315 	stw	r7,12(r3)
   12e84:	423ffc04 	addi	r8,r8,-16
   12e88:	18c00404 	addi	r3,r3,16
   12e8c:	223ff936 	bltu	r4,r8,12e74 <memset+0x38>
   12e90:	30fffc04 	addi	r3,r6,-16
   12e94:	1806d13a 	srli	r3,r3,4
   12e98:	318003cc 	andi	r6,r6,15
   12e9c:	010000c4 	movi	r4,3
   12ea0:	18c00044 	addi	r3,r3,1
   12ea4:	1806913a 	slli	r3,r3,4
   12ea8:	10c7883a 	add	r3,r2,r3
   12eac:	21800e2e 	bgeu	r4,r6,12ee8 <memset+0xac>
   12eb0:	1813883a 	mov	r9,r3
   12eb4:	3011883a 	mov	r8,r6
   12eb8:	010000c4 	movi	r4,3
   12ebc:	49c00015 	stw	r7,0(r9)
   12ec0:	423fff04 	addi	r8,r8,-4
   12ec4:	4a400104 	addi	r9,r9,4
   12ec8:	223ffc36 	bltu	r4,r8,12ebc <memset+0x80>
   12ecc:	313fff04 	addi	r4,r6,-4
   12ed0:	2008d0ba 	srli	r4,r4,2
   12ed4:	318000cc 	andi	r6,r6,3
   12ed8:	21000044 	addi	r4,r4,1
   12edc:	2109883a 	add	r4,r4,r4
   12ee0:	2109883a 	add	r4,r4,r4
   12ee4:	1907883a 	add	r3,r3,r4
   12ee8:	30000a26 	beq	r6,zero,12f14 <memset+0xd8>
   12eec:	198d883a 	add	r6,r3,r6
   12ef0:	19400005 	stb	r5,0(r3)
   12ef4:	18c00044 	addi	r3,r3,1
   12ef8:	19bffd1e 	bne	r3,r6,12ef0 <memset+0xb4>
   12efc:	f800283a 	ret
   12f00:	2007883a 	mov	r3,r4
   12f04:	303ff91e 	bne	r6,zero,12eec <memset+0xb0>
   12f08:	00000206 	br	12f14 <memset+0xd8>
   12f0c:	2007883a 	mov	r3,r4
   12f10:	003ff606 	br	12eec <memset+0xb0>
   12f14:	f800283a 	ret

00012f18 <__sread>:
   12f18:	defffe04 	addi	sp,sp,-8
   12f1c:	dc000015 	stw	r16,0(sp)
   12f20:	2821883a 	mov	r16,r5
   12f24:	2940038f 	ldh	r5,14(r5)
   12f28:	dfc00115 	stw	ra,4(sp)
   12f2c:	00133b00 	call	133b0 <_read_r>
   12f30:	10000716 	blt	r2,zero,12f50 <__sread+0x38>
   12f34:	80c01417 	ldw	r3,80(r16)
   12f38:	1887883a 	add	r3,r3,r2
   12f3c:	80c01415 	stw	r3,80(r16)
   12f40:	dfc00117 	ldw	ra,4(sp)
   12f44:	dc000017 	ldw	r16,0(sp)
   12f48:	dec00204 	addi	sp,sp,8
   12f4c:	f800283a 	ret
   12f50:	80c0030b 	ldhu	r3,12(r16)
   12f54:	18fbffcc 	andi	r3,r3,61439
   12f58:	80c0030d 	sth	r3,12(r16)
   12f5c:	dfc00117 	ldw	ra,4(sp)
   12f60:	dc000017 	ldw	r16,0(sp)
   12f64:	dec00204 	addi	sp,sp,8
   12f68:	f800283a 	ret

00012f6c <__swrite>:
   12f6c:	2880030b 	ldhu	r2,12(r5)
   12f70:	defffb04 	addi	sp,sp,-20
   12f74:	dcc00315 	stw	r19,12(sp)
   12f78:	10c0400c 	andi	r3,r2,256
   12f7c:	18ffffcc 	andi	r3,r3,65535
   12f80:	18e0001c 	xori	r3,r3,32768
   12f84:	dc800215 	stw	r18,8(sp)
   12f88:	dc400115 	stw	r17,4(sp)
   12f8c:	dc000015 	stw	r16,0(sp)
   12f90:	dfc00415 	stw	ra,16(sp)
   12f94:	18e00004 	addi	r3,r3,-32768
   12f98:	2821883a 	mov	r16,r5
   12f9c:	2027883a 	mov	r19,r4
   12fa0:	3025883a 	mov	r18,r6
   12fa4:	3823883a 	mov	r17,r7
   12fa8:	18000526 	beq	r3,zero,12fc0 <__swrite+0x54>
   12fac:	2940038f 	ldh	r5,14(r5)
   12fb0:	000d883a 	mov	r6,zero
   12fb4:	01c00084 	movi	r7,2
   12fb8:	00133440 	call	13344 <_lseek_r>
   12fbc:	8080030b 	ldhu	r2,12(r16)
   12fc0:	8140038f 	ldh	r5,14(r16)
   12fc4:	10bbffcc 	andi	r2,r2,61439
   12fc8:	9809883a 	mov	r4,r19
   12fcc:	900d883a 	mov	r6,r18
   12fd0:	880f883a 	mov	r7,r17
   12fd4:	8080030d 	sth	r2,12(r16)
   12fd8:	dfc00417 	ldw	ra,16(sp)
   12fdc:	dcc00317 	ldw	r19,12(sp)
   12fe0:	dc800217 	ldw	r18,8(sp)
   12fe4:	dc400117 	ldw	r17,4(sp)
   12fe8:	dc000017 	ldw	r16,0(sp)
   12fec:	dec00504 	addi	sp,sp,20
   12ff0:	00130581 	jmpi	13058 <_write_r>

00012ff4 <__sseek>:
   12ff4:	defffe04 	addi	sp,sp,-8
   12ff8:	dc000015 	stw	r16,0(sp)
   12ffc:	2821883a 	mov	r16,r5
   13000:	2940038f 	ldh	r5,14(r5)
   13004:	dfc00115 	stw	ra,4(sp)
   13008:	00133440 	call	13344 <_lseek_r>
   1300c:	00ffffc4 	movi	r3,-1
   13010:	10c00826 	beq	r2,r3,13034 <__sseek+0x40>
   13014:	80c0030b 	ldhu	r3,12(r16)
   13018:	80801415 	stw	r2,80(r16)
   1301c:	18c40014 	ori	r3,r3,4096
   13020:	80c0030d 	sth	r3,12(r16)
   13024:	dfc00117 	ldw	ra,4(sp)
   13028:	dc000017 	ldw	r16,0(sp)
   1302c:	dec00204 	addi	sp,sp,8
   13030:	f800283a 	ret
   13034:	80c0030b 	ldhu	r3,12(r16)
   13038:	18fbffcc 	andi	r3,r3,61439
   1303c:	80c0030d 	sth	r3,12(r16)
   13040:	dfc00117 	ldw	ra,4(sp)
   13044:	dc000017 	ldw	r16,0(sp)
   13048:	dec00204 	addi	sp,sp,8
   1304c:	f800283a 	ret

00013050 <__sclose>:
   13050:	2940038f 	ldh	r5,14(r5)
   13054:	00130c41 	jmpi	130c4 <_close_r>

00013058 <_write_r>:
   13058:	defffd04 	addi	sp,sp,-12
   1305c:	dc400115 	stw	r17,4(sp)
   13060:	dc000015 	stw	r16,0(sp)
   13064:	2023883a 	mov	r17,r4
   13068:	040000b4 	movhi	r16,2
   1306c:	8425c404 	addi	r16,r16,-26864
   13070:	2809883a 	mov	r4,r5
   13074:	300b883a 	mov	r5,r6
   13078:	380d883a 	mov	r6,r7
   1307c:	dfc00215 	stw	ra,8(sp)
   13080:	80000015 	stw	zero,0(r16)
   13084:	0013ce40 	call	13ce4 <write>
   13088:	00ffffc4 	movi	r3,-1
   1308c:	10c00526 	beq	r2,r3,130a4 <_write_r+0x4c>
   13090:	dfc00217 	ldw	ra,8(sp)
   13094:	dc400117 	ldw	r17,4(sp)
   13098:	dc000017 	ldw	r16,0(sp)
   1309c:	dec00304 	addi	sp,sp,12
   130a0:	f800283a 	ret
   130a4:	80c00017 	ldw	r3,0(r16)
   130a8:	183ff926 	beq	r3,zero,13090 <_write_r+0x38>
   130ac:	88c00015 	stw	r3,0(r17)
   130b0:	dfc00217 	ldw	ra,8(sp)
   130b4:	dc400117 	ldw	r17,4(sp)
   130b8:	dc000017 	ldw	r16,0(sp)
   130bc:	dec00304 	addi	sp,sp,12
   130c0:	f800283a 	ret

000130c4 <_close_r>:
   130c4:	defffd04 	addi	sp,sp,-12
   130c8:	dc400115 	stw	r17,4(sp)
   130cc:	dc000015 	stw	r16,0(sp)
   130d0:	2023883a 	mov	r17,r4
   130d4:	040000b4 	movhi	r16,2
   130d8:	8425c404 	addi	r16,r16,-26864
   130dc:	2809883a 	mov	r4,r5
   130e0:	dfc00215 	stw	ra,8(sp)
   130e4:	80000015 	stw	zero,0(r16)
   130e8:	001346c0 	call	1346c <close>
   130ec:	00ffffc4 	movi	r3,-1
   130f0:	10c00526 	beq	r2,r3,13108 <_close_r+0x44>
   130f4:	dfc00217 	ldw	ra,8(sp)
   130f8:	dc400117 	ldw	r17,4(sp)
   130fc:	dc000017 	ldw	r16,0(sp)
   13100:	dec00304 	addi	sp,sp,12
   13104:	f800283a 	ret
   13108:	80c00017 	ldw	r3,0(r16)
   1310c:	183ff926 	beq	r3,zero,130f4 <_close_r+0x30>
   13110:	88c00015 	stw	r3,0(r17)
   13114:	dfc00217 	ldw	ra,8(sp)
   13118:	dc400117 	ldw	r17,4(sp)
   1311c:	dc000017 	ldw	r16,0(sp)
   13120:	dec00304 	addi	sp,sp,12
   13124:	f800283a 	ret

00013128 <_fclose_r>:
   13128:	defffc04 	addi	sp,sp,-16
   1312c:	dc400115 	stw	r17,4(sp)
   13130:	dc000015 	stw	r16,0(sp)
   13134:	dfc00315 	stw	ra,12(sp)
   13138:	dc800215 	stw	r18,8(sp)
   1313c:	2821883a 	mov	r16,r5
   13140:	2023883a 	mov	r17,r4
   13144:	28003426 	beq	r5,zero,13218 <_fclose_r+0xf0>
   13148:	00126e80 	call	126e8 <__sfp_lock_acquire>
   1314c:	88000226 	beq	r17,zero,13158 <_fclose_r+0x30>
   13150:	88800e17 	ldw	r2,56(r17)
   13154:	10003826 	beq	r2,zero,13238 <_fclose_r+0x110>
   13158:	8080030f 	ldh	r2,12(r16)
   1315c:	10002526 	beq	r2,zero,131f4 <_fclose_r+0xcc>
   13160:	8809883a 	mov	r4,r17
   13164:	800b883a 	mov	r5,r16
   13168:	00122240 	call	12224 <_fflush_r>
   1316c:	1025883a 	mov	r18,r2
   13170:	80800b17 	ldw	r2,44(r16)
   13174:	10000426 	beq	r2,zero,13188 <_fclose_r+0x60>
   13178:	81400717 	ldw	r5,28(r16)
   1317c:	8809883a 	mov	r4,r17
   13180:	103ee83a 	callr	r2
   13184:	10003516 	blt	r2,zero,1325c <_fclose_r+0x134>
   13188:	8080030b 	ldhu	r2,12(r16)
   1318c:	1080200c 	andi	r2,r2,128
   13190:	10bfffcc 	andi	r2,r2,65535
   13194:	10a0001c 	xori	r2,r2,32768
   13198:	10a00004 	addi	r2,r2,-32768
   1319c:	10002b1e 	bne	r2,zero,1324c <_fclose_r+0x124>
   131a0:	81400c17 	ldw	r5,48(r16)
   131a4:	28000526 	beq	r5,zero,131bc <_fclose_r+0x94>
   131a8:	80801004 	addi	r2,r16,64
   131ac:	28800226 	beq	r5,r2,131b8 <_fclose_r+0x90>
   131b0:	8809883a 	mov	r4,r17
   131b4:	00128640 	call	12864 <_free_r>
   131b8:	80000c15 	stw	zero,48(r16)
   131bc:	81401117 	ldw	r5,68(r16)
   131c0:	28000326 	beq	r5,zero,131d0 <_fclose_r+0xa8>
   131c4:	8809883a 	mov	r4,r17
   131c8:	00128640 	call	12864 <_free_r>
   131cc:	80001115 	stw	zero,68(r16)
   131d0:	8000030d 	sth	zero,12(r16)
   131d4:	00126ec0 	call	126ec <__sfp_lock_release>
   131d8:	9005883a 	mov	r2,r18
   131dc:	dfc00317 	ldw	ra,12(sp)
   131e0:	dc800217 	ldw	r18,8(sp)
   131e4:	dc400117 	ldw	r17,4(sp)
   131e8:	dc000017 	ldw	r16,0(sp)
   131ec:	dec00404 	addi	sp,sp,16
   131f0:	f800283a 	ret
   131f4:	00126ec0 	call	126ec <__sfp_lock_release>
   131f8:	0025883a 	mov	r18,zero
   131fc:	9005883a 	mov	r2,r18
   13200:	dfc00317 	ldw	ra,12(sp)
   13204:	dc800217 	ldw	r18,8(sp)
   13208:	dc400117 	ldw	r17,4(sp)
   1320c:	dc000017 	ldw	r16,0(sp)
   13210:	dec00404 	addi	sp,sp,16
   13214:	f800283a 	ret
   13218:	0025883a 	mov	r18,zero
   1321c:	9005883a 	mov	r2,r18
   13220:	dfc00317 	ldw	ra,12(sp)
   13224:	dc800217 	ldw	r18,8(sp)
   13228:	dc400117 	ldw	r17,4(sp)
   1322c:	dc000017 	ldw	r16,0(sp)
   13230:	dec00404 	addi	sp,sp,16
   13234:	f800283a 	ret
   13238:	8809883a 	mov	r4,r17
   1323c:	00124e00 	call	124e0 <__sinit>
   13240:	8080030f 	ldh	r2,12(r16)
   13244:	103fc61e 	bne	r2,zero,13160 <_fclose_r+0x38>
   13248:	003fea06 	br	131f4 <_fclose_r+0xcc>
   1324c:	81400417 	ldw	r5,16(r16)
   13250:	8809883a 	mov	r4,r17
   13254:	00128640 	call	12864 <_free_r>
   13258:	003fd106 	br	131a0 <_fclose_r+0x78>
   1325c:	04bfffc4 	movi	r18,-1
   13260:	003fc906 	br	13188 <_fclose_r+0x60>

00013264 <fclose>:
   13264:	00800074 	movhi	r2,1
   13268:	109f1204 	addi	r2,r2,31816
   1326c:	200b883a 	mov	r5,r4
   13270:	11000017 	ldw	r4,0(r2)
   13274:	00131281 	jmpi	13128 <_fclose_r>

00013278 <_fstat_r>:
   13278:	defffd04 	addi	sp,sp,-12
   1327c:	dc400115 	stw	r17,4(sp)
   13280:	dc000015 	stw	r16,0(sp)
   13284:	2023883a 	mov	r17,r4
   13288:	040000b4 	movhi	r16,2
   1328c:	8425c404 	addi	r16,r16,-26864
   13290:	2809883a 	mov	r4,r5
   13294:	300b883a 	mov	r5,r6
   13298:	dfc00215 	stw	ra,8(sp)
   1329c:	80000015 	stw	zero,0(r16)
   132a0:	00135b40 	call	135b4 <fstat>
   132a4:	00ffffc4 	movi	r3,-1
   132a8:	10c00526 	beq	r2,r3,132c0 <_fstat_r+0x48>
   132ac:	dfc00217 	ldw	ra,8(sp)
   132b0:	dc400117 	ldw	r17,4(sp)
   132b4:	dc000017 	ldw	r16,0(sp)
   132b8:	dec00304 	addi	sp,sp,12
   132bc:	f800283a 	ret
   132c0:	80c00017 	ldw	r3,0(r16)
   132c4:	183ff926 	beq	r3,zero,132ac <_fstat_r+0x34>
   132c8:	88c00015 	stw	r3,0(r17)
   132cc:	dfc00217 	ldw	ra,8(sp)
   132d0:	dc400117 	ldw	r17,4(sp)
   132d4:	dc000017 	ldw	r16,0(sp)
   132d8:	dec00304 	addi	sp,sp,12
   132dc:	f800283a 	ret

000132e0 <_isatty_r>:
   132e0:	defffd04 	addi	sp,sp,-12
   132e4:	dc400115 	stw	r17,4(sp)
   132e8:	dc000015 	stw	r16,0(sp)
   132ec:	2023883a 	mov	r17,r4
   132f0:	040000b4 	movhi	r16,2
   132f4:	8425c404 	addi	r16,r16,-26864
   132f8:	2809883a 	mov	r4,r5
   132fc:	dfc00215 	stw	ra,8(sp)
   13300:	80000015 	stw	zero,0(r16)
   13304:	00136b40 	call	136b4 <isatty>
   13308:	00ffffc4 	movi	r3,-1
   1330c:	10c00526 	beq	r2,r3,13324 <_isatty_r+0x44>
   13310:	dfc00217 	ldw	ra,8(sp)
   13314:	dc400117 	ldw	r17,4(sp)
   13318:	dc000017 	ldw	r16,0(sp)
   1331c:	dec00304 	addi	sp,sp,12
   13320:	f800283a 	ret
   13324:	80c00017 	ldw	r3,0(r16)
   13328:	183ff926 	beq	r3,zero,13310 <_isatty_r+0x30>
   1332c:	88c00015 	stw	r3,0(r17)
   13330:	dfc00217 	ldw	ra,8(sp)
   13334:	dc400117 	ldw	r17,4(sp)
   13338:	dc000017 	ldw	r16,0(sp)
   1333c:	dec00304 	addi	sp,sp,12
   13340:	f800283a 	ret

00013344 <_lseek_r>:
   13344:	defffd04 	addi	sp,sp,-12
   13348:	dc400115 	stw	r17,4(sp)
   1334c:	dc000015 	stw	r16,0(sp)
   13350:	2023883a 	mov	r17,r4
   13354:	040000b4 	movhi	r16,2
   13358:	8425c404 	addi	r16,r16,-26864
   1335c:	2809883a 	mov	r4,r5
   13360:	300b883a 	mov	r5,r6
   13364:	380d883a 	mov	r6,r7
   13368:	dfc00215 	stw	ra,8(sp)
   1336c:	80000015 	stw	zero,0(r16)
   13370:	00138940 	call	13894 <lseek>
   13374:	00ffffc4 	movi	r3,-1
   13378:	10c00526 	beq	r2,r3,13390 <_lseek_r+0x4c>
   1337c:	dfc00217 	ldw	ra,8(sp)
   13380:	dc400117 	ldw	r17,4(sp)
   13384:	dc000017 	ldw	r16,0(sp)
   13388:	dec00304 	addi	sp,sp,12
   1338c:	f800283a 	ret
   13390:	80c00017 	ldw	r3,0(r16)
   13394:	183ff926 	beq	r3,zero,1337c <_lseek_r+0x38>
   13398:	88c00015 	stw	r3,0(r17)
   1339c:	dfc00217 	ldw	ra,8(sp)
   133a0:	dc400117 	ldw	r17,4(sp)
   133a4:	dc000017 	ldw	r16,0(sp)
   133a8:	dec00304 	addi	sp,sp,12
   133ac:	f800283a 	ret

000133b0 <_read_r>:
   133b0:	defffd04 	addi	sp,sp,-12
   133b4:	dc400115 	stw	r17,4(sp)
   133b8:	dc000015 	stw	r16,0(sp)
   133bc:	2023883a 	mov	r17,r4
   133c0:	040000b4 	movhi	r16,2
   133c4:	8425c404 	addi	r16,r16,-26864
   133c8:	2809883a 	mov	r4,r5
   133cc:	300b883a 	mov	r5,r6
   133d0:	380d883a 	mov	r6,r7
   133d4:	dfc00215 	stw	ra,8(sp)
   133d8:	80000015 	stw	zero,0(r16)
   133dc:	0013a700 	call	13a70 <read>
   133e0:	00ffffc4 	movi	r3,-1
   133e4:	10c00526 	beq	r2,r3,133fc <_read_r+0x4c>
   133e8:	dfc00217 	ldw	ra,8(sp)
   133ec:	dc400117 	ldw	r17,4(sp)
   133f0:	dc000017 	ldw	r16,0(sp)
   133f4:	dec00304 	addi	sp,sp,12
   133f8:	f800283a 	ret
   133fc:	80c00017 	ldw	r3,0(r16)
   13400:	183ff926 	beq	r3,zero,133e8 <_read_r+0x38>
   13404:	88c00015 	stw	r3,0(r17)
   13408:	dfc00217 	ldw	ra,8(sp)
   1340c:	dc400117 	ldw	r17,4(sp)
   13410:	dc000017 	ldw	r16,0(sp)
   13414:	dec00304 	addi	sp,sp,12
   13418:	f800283a 	ret

0001341c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1341c:	defffe04 	addi	sp,sp,-8
   13420:	dfc00115 	stw	ra,4(sp)
   13424:	df000015 	stw	fp,0(sp)
   13428:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1342c:	00800074 	movhi	r2,1
   13430:	109f1a04 	addi	r2,r2,31848
   13434:	10800017 	ldw	r2,0(r2)
   13438:	10000526 	beq	r2,zero,13450 <alt_get_errno+0x34>
   1343c:	00800074 	movhi	r2,1
   13440:	109f1a04 	addi	r2,r2,31848
   13444:	10800017 	ldw	r2,0(r2)
   13448:	103ee83a 	callr	r2
   1344c:	00000206 	br	13458 <alt_get_errno+0x3c>
   13450:	008000b4 	movhi	r2,2
   13454:	10a5c404 	addi	r2,r2,-26864
}
   13458:	e037883a 	mov	sp,fp
   1345c:	dfc00117 	ldw	ra,4(sp)
   13460:	df000017 	ldw	fp,0(sp)
   13464:	dec00204 	addi	sp,sp,8
   13468:	f800283a 	ret

0001346c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   1346c:	defffb04 	addi	sp,sp,-20
   13470:	dfc00415 	stw	ra,16(sp)
   13474:	df000315 	stw	fp,12(sp)
   13478:	df000304 	addi	fp,sp,12
   1347c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   13480:	e0bfff17 	ldw	r2,-4(fp)
   13484:	10000716 	blt	r2,zero,134a4 <close+0x38>
   13488:	e13fff17 	ldw	r4,-4(fp)
   1348c:	01400304 	movi	r5,12
   13490:	00108d80 	call	108d8 <__mulsi3>
   13494:	00c00074 	movhi	r3,1
   13498:	18da9904 	addi	r3,r3,27236
   1349c:	10c5883a 	add	r2,r2,r3
   134a0:	00000106 	br	134a8 <close+0x3c>
   134a4:	0005883a 	mov	r2,zero
   134a8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   134ac:	e0bffd17 	ldw	r2,-12(fp)
   134b0:	10001826 	beq	r2,zero,13514 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   134b4:	e0bffd17 	ldw	r2,-12(fp)
   134b8:	10800017 	ldw	r2,0(r2)
   134bc:	10800417 	ldw	r2,16(r2)
   134c0:	10000626 	beq	r2,zero,134dc <close+0x70>
   134c4:	e0bffd17 	ldw	r2,-12(fp)
   134c8:	10800017 	ldw	r2,0(r2)
   134cc:	10800417 	ldw	r2,16(r2)
   134d0:	e13ffd17 	ldw	r4,-12(fp)
   134d4:	103ee83a 	callr	r2
   134d8:	00000106 	br	134e0 <close+0x74>
   134dc:	0005883a 	mov	r2,zero
   134e0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   134e4:	e13fff17 	ldw	r4,-4(fp)
   134e8:	0013b640 	call	13b64 <alt_release_fd>
    if (rval < 0)
   134ec:	e0bffe17 	ldw	r2,-8(fp)
   134f0:	1000060e 	bge	r2,zero,1350c <close+0xa0>
    {
      ALT_ERRNO = -rval;
   134f4:	001341c0 	call	1341c <alt_get_errno>
   134f8:	e0fffe17 	ldw	r3,-8(fp)
   134fc:	00c7c83a 	sub	r3,zero,r3
   13500:	10c00015 	stw	r3,0(r2)
      return -1;
   13504:	00bfffc4 	movi	r2,-1
   13508:	00000606 	br	13524 <close+0xb8>
    }
    return 0;
   1350c:	0005883a 	mov	r2,zero
   13510:	00000406 	br	13524 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13514:	001341c0 	call	1341c <alt_get_errno>
   13518:	00c01444 	movi	r3,81
   1351c:	10c00015 	stw	r3,0(r2)
    return -1;
   13520:	00bfffc4 	movi	r2,-1
  }
}
   13524:	e037883a 	mov	sp,fp
   13528:	dfc00117 	ldw	ra,4(sp)
   1352c:	df000017 	ldw	fp,0(sp)
   13530:	dec00204 	addi	sp,sp,8
   13534:	f800283a 	ret

00013538 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   13538:	defffc04 	addi	sp,sp,-16
   1353c:	df000315 	stw	fp,12(sp)
   13540:	df000304 	addi	fp,sp,12
   13544:	e13ffd15 	stw	r4,-12(fp)
   13548:	e17ffe15 	stw	r5,-8(fp)
   1354c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   13550:	e0bfff17 	ldw	r2,-4(fp)
}
   13554:	e037883a 	mov	sp,fp
   13558:	df000017 	ldw	fp,0(sp)
   1355c:	dec00104 	addi	sp,sp,4
   13560:	f800283a 	ret

00013564 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13564:	defffe04 	addi	sp,sp,-8
   13568:	dfc00115 	stw	ra,4(sp)
   1356c:	df000015 	stw	fp,0(sp)
   13570:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13574:	00800074 	movhi	r2,1
   13578:	109f1a04 	addi	r2,r2,31848
   1357c:	10800017 	ldw	r2,0(r2)
   13580:	10000526 	beq	r2,zero,13598 <alt_get_errno+0x34>
   13584:	00800074 	movhi	r2,1
   13588:	109f1a04 	addi	r2,r2,31848
   1358c:	10800017 	ldw	r2,0(r2)
   13590:	103ee83a 	callr	r2
   13594:	00000206 	br	135a0 <alt_get_errno+0x3c>
   13598:	008000b4 	movhi	r2,2
   1359c:	10a5c404 	addi	r2,r2,-26864
}
   135a0:	e037883a 	mov	sp,fp
   135a4:	dfc00117 	ldw	ra,4(sp)
   135a8:	df000017 	ldw	fp,0(sp)
   135ac:	dec00204 	addi	sp,sp,8
   135b0:	f800283a 	ret

000135b4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   135b4:	defffb04 	addi	sp,sp,-20
   135b8:	dfc00415 	stw	ra,16(sp)
   135bc:	df000315 	stw	fp,12(sp)
   135c0:	df000304 	addi	fp,sp,12
   135c4:	e13ffe15 	stw	r4,-8(fp)
   135c8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   135cc:	e0bffe17 	ldw	r2,-8(fp)
   135d0:	10000716 	blt	r2,zero,135f0 <fstat+0x3c>
   135d4:	e13ffe17 	ldw	r4,-8(fp)
   135d8:	01400304 	movi	r5,12
   135dc:	00108d80 	call	108d8 <__mulsi3>
   135e0:	00c00074 	movhi	r3,1
   135e4:	18da9904 	addi	r3,r3,27236
   135e8:	10c5883a 	add	r2,r2,r3
   135ec:	00000106 	br	135f4 <fstat+0x40>
   135f0:	0005883a 	mov	r2,zero
   135f4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   135f8:	e0bffd17 	ldw	r2,-12(fp)
   135fc:	10001026 	beq	r2,zero,13640 <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   13600:	e0bffd17 	ldw	r2,-12(fp)
   13604:	10800017 	ldw	r2,0(r2)
   13608:	10800817 	ldw	r2,32(r2)
   1360c:	10000726 	beq	r2,zero,1362c <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
   13610:	e0bffd17 	ldw	r2,-12(fp)
   13614:	10800017 	ldw	r2,0(r2)
   13618:	10800817 	ldw	r2,32(r2)
   1361c:	e13ffd17 	ldw	r4,-12(fp)
   13620:	e17fff17 	ldw	r5,-4(fp)
   13624:	103ee83a 	callr	r2
   13628:	00000906 	br	13650 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   1362c:	e0bfff17 	ldw	r2,-4(fp)
   13630:	00c80004 	movi	r3,8192
   13634:	10c00115 	stw	r3,4(r2)
      return 0;
   13638:	0005883a 	mov	r2,zero
   1363c:	00000406 	br	13650 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13640:	00135640 	call	13564 <alt_get_errno>
   13644:	00c01444 	movi	r3,81
   13648:	10c00015 	stw	r3,0(r2)
    return -1;
   1364c:	00bfffc4 	movi	r2,-1
  }
}
   13650:	e037883a 	mov	sp,fp
   13654:	dfc00117 	ldw	ra,4(sp)
   13658:	df000017 	ldw	fp,0(sp)
   1365c:	dec00204 	addi	sp,sp,8
   13660:	f800283a 	ret

00013664 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13664:	defffe04 	addi	sp,sp,-8
   13668:	dfc00115 	stw	ra,4(sp)
   1366c:	df000015 	stw	fp,0(sp)
   13670:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13674:	00800074 	movhi	r2,1
   13678:	109f1a04 	addi	r2,r2,31848
   1367c:	10800017 	ldw	r2,0(r2)
   13680:	10000526 	beq	r2,zero,13698 <alt_get_errno+0x34>
   13684:	00800074 	movhi	r2,1
   13688:	109f1a04 	addi	r2,r2,31848
   1368c:	10800017 	ldw	r2,0(r2)
   13690:	103ee83a 	callr	r2
   13694:	00000206 	br	136a0 <alt_get_errno+0x3c>
   13698:	008000b4 	movhi	r2,2
   1369c:	10a5c404 	addi	r2,r2,-26864
}
   136a0:	e037883a 	mov	sp,fp
   136a4:	dfc00117 	ldw	ra,4(sp)
   136a8:	df000017 	ldw	fp,0(sp)
   136ac:	dec00204 	addi	sp,sp,8
   136b0:	f800283a 	ret

000136b4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   136b4:	deffed04 	addi	sp,sp,-76
   136b8:	dfc01215 	stw	ra,72(sp)
   136bc:	df001115 	stw	fp,68(sp)
   136c0:	df001104 	addi	fp,sp,68
   136c4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   136c8:	e0bfff17 	ldw	r2,-4(fp)
   136cc:	10000716 	blt	r2,zero,136ec <isatty+0x38>
   136d0:	e13fff17 	ldw	r4,-4(fp)
   136d4:	01400304 	movi	r5,12
   136d8:	00108d80 	call	108d8 <__mulsi3>
   136dc:	00c00074 	movhi	r3,1
   136e0:	18da9904 	addi	r3,r3,27236
   136e4:	10c5883a 	add	r2,r2,r3
   136e8:	00000106 	br	136f0 <isatty+0x3c>
   136ec:	0005883a 	mov	r2,zero
   136f0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   136f4:	e0bfef17 	ldw	r2,-68(fp)
   136f8:	10000e26 	beq	r2,zero,13734 <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   136fc:	e0bfef17 	ldw	r2,-68(fp)
   13700:	10800017 	ldw	r2,0(r2)
   13704:	10800817 	ldw	r2,32(r2)
   13708:	1000021e 	bne	r2,zero,13714 <isatty+0x60>
    {
      return 1;
   1370c:	00800044 	movi	r2,1
   13710:	00000c06 	br	13744 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   13714:	e0bff004 	addi	r2,fp,-64
   13718:	e13fff17 	ldw	r4,-4(fp)
   1371c:	100b883a 	mov	r5,r2
   13720:	00135b40 	call	135b4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   13724:	e0bff117 	ldw	r2,-60(fp)
   13728:	10880020 	cmpeqi	r2,r2,8192
   1372c:	10803fcc 	andi	r2,r2,255
   13730:	00000406 	br	13744 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13734:	00136640 	call	13664 <alt_get_errno>
   13738:	00c01444 	movi	r3,81
   1373c:	10c00015 	stw	r3,0(r2)
    return 0;
   13740:	0005883a 	mov	r2,zero
  }
}
   13744:	e037883a 	mov	sp,fp
   13748:	dfc00117 	ldw	ra,4(sp)
   1374c:	df000017 	ldw	fp,0(sp)
   13750:	dec00204 	addi	sp,sp,8
   13754:	f800283a 	ret

00013758 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   13758:	defffc04 	addi	sp,sp,-16
   1375c:	df000315 	stw	fp,12(sp)
   13760:	df000304 	addi	fp,sp,12
   13764:	e13ffd15 	stw	r4,-12(fp)
   13768:	e17ffe15 	stw	r5,-8(fp)
   1376c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   13770:	e0fffe17 	ldw	r3,-8(fp)
   13774:	e0bffd17 	ldw	r2,-12(fp)
   13778:	18800e26 	beq	r3,r2,137b4 <alt_load_section+0x5c>
  {
    while( to != end )
   1377c:	00000a06 	br	137a8 <alt_load_section+0x50>
    {
      *to++ = *from++;
   13780:	e0bffd17 	ldw	r2,-12(fp)
   13784:	10c00017 	ldw	r3,0(r2)
   13788:	e0bffe17 	ldw	r2,-8(fp)
   1378c:	10c00015 	stw	r3,0(r2)
   13790:	e0bffe17 	ldw	r2,-8(fp)
   13794:	10800104 	addi	r2,r2,4
   13798:	e0bffe15 	stw	r2,-8(fp)
   1379c:	e0bffd17 	ldw	r2,-12(fp)
   137a0:	10800104 	addi	r2,r2,4
   137a4:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   137a8:	e0fffe17 	ldw	r3,-8(fp)
   137ac:	e0bfff17 	ldw	r2,-4(fp)
   137b0:	18bff31e 	bne	r3,r2,13780 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   137b4:	e037883a 	mov	sp,fp
   137b8:	df000017 	ldw	fp,0(sp)
   137bc:	dec00104 	addi	sp,sp,4
   137c0:	f800283a 	ret

000137c4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   137c4:	defffe04 	addi	sp,sp,-8
   137c8:	dfc00115 	stw	ra,4(sp)
   137cc:	df000015 	stw	fp,0(sp)
   137d0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   137d4:	01000074 	movhi	r4,1
   137d8:	211f1f04 	addi	r4,r4,31868
   137dc:	01400074 	movhi	r5,1
   137e0:	29587d04 	addi	r5,r5,25076
   137e4:	01800074 	movhi	r6,1
   137e8:	319f1f04 	addi	r6,r6,31868
   137ec:	00137580 	call	13758 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   137f0:	01000074 	movhi	r4,1
   137f4:	21000804 	addi	r4,r4,32
   137f8:	01400074 	movhi	r5,1
   137fc:	29400804 	addi	r5,r5,32
   13800:	01800074 	movhi	r6,1
   13804:	31806e04 	addi	r6,r6,440
   13808:	00137580 	call	13758 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   1380c:	01000074 	movhi	r4,1
   13810:	21183704 	addi	r4,r4,24796
   13814:	01400074 	movhi	r5,1
   13818:	29583704 	addi	r5,r5,24796
   1381c:	01800074 	movhi	r6,1
   13820:	31987d04 	addi	r6,r6,25076
   13824:	00137580 	call	13758 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   13828:	001503c0 	call	1503c <alt_dcache_flush_all>
  alt_icache_flush_all();
   1382c:	00152000 	call	15200 <alt_icache_flush_all>
}
   13830:	e037883a 	mov	sp,fp
   13834:	dfc00117 	ldw	ra,4(sp)
   13838:	df000017 	ldw	fp,0(sp)
   1383c:	dec00204 	addi	sp,sp,8
   13840:	f800283a 	ret

00013844 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13844:	defffe04 	addi	sp,sp,-8
   13848:	dfc00115 	stw	ra,4(sp)
   1384c:	df000015 	stw	fp,0(sp)
   13850:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13854:	00800074 	movhi	r2,1
   13858:	109f1a04 	addi	r2,r2,31848
   1385c:	10800017 	ldw	r2,0(r2)
   13860:	10000526 	beq	r2,zero,13878 <alt_get_errno+0x34>
   13864:	00800074 	movhi	r2,1
   13868:	109f1a04 	addi	r2,r2,31848
   1386c:	10800017 	ldw	r2,0(r2)
   13870:	103ee83a 	callr	r2
   13874:	00000206 	br	13880 <alt_get_errno+0x3c>
   13878:	008000b4 	movhi	r2,2
   1387c:	10a5c404 	addi	r2,r2,-26864
}
   13880:	e037883a 	mov	sp,fp
   13884:	dfc00117 	ldw	ra,4(sp)
   13888:	df000017 	ldw	fp,0(sp)
   1388c:	dec00204 	addi	sp,sp,8
   13890:	f800283a 	ret

00013894 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   13894:	defff904 	addi	sp,sp,-28
   13898:	dfc00615 	stw	ra,24(sp)
   1389c:	df000515 	stw	fp,20(sp)
   138a0:	df000504 	addi	fp,sp,20
   138a4:	e13ffd15 	stw	r4,-12(fp)
   138a8:	e17ffe15 	stw	r5,-8(fp)
   138ac:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   138b0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   138b4:	e0bffd17 	ldw	r2,-12(fp)
   138b8:	10000716 	blt	r2,zero,138d8 <lseek+0x44>
   138bc:	e13ffd17 	ldw	r4,-12(fp)
   138c0:	01400304 	movi	r5,12
   138c4:	00108d80 	call	108d8 <__mulsi3>
   138c8:	00c00074 	movhi	r3,1
   138cc:	18da9904 	addi	r3,r3,27236
   138d0:	10c5883a 	add	r2,r2,r3
   138d4:	00000106 	br	138dc <lseek+0x48>
   138d8:	0005883a 	mov	r2,zero
   138dc:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   138e0:	e0bffc17 	ldw	r2,-16(fp)
   138e4:	10001026 	beq	r2,zero,13928 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   138e8:	e0bffc17 	ldw	r2,-16(fp)
   138ec:	10800017 	ldw	r2,0(r2)
   138f0:	10800717 	ldw	r2,28(r2)
   138f4:	10000926 	beq	r2,zero,1391c <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   138f8:	e0bffc17 	ldw	r2,-16(fp)
   138fc:	10800017 	ldw	r2,0(r2)
   13900:	10800717 	ldw	r2,28(r2)
   13904:	e13ffc17 	ldw	r4,-16(fp)
   13908:	e17ffe17 	ldw	r5,-8(fp)
   1390c:	e1bfff17 	ldw	r6,-4(fp)
   13910:	103ee83a 	callr	r2
   13914:	e0bffb15 	stw	r2,-20(fp)
   13918:	00000506 	br	13930 <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   1391c:	00bfde84 	movi	r2,-134
   13920:	e0bffb15 	stw	r2,-20(fp)
   13924:	00000206 	br	13930 <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
   13928:	00bfebc4 	movi	r2,-81
   1392c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   13930:	e0bffb17 	ldw	r2,-20(fp)
   13934:	1000060e 	bge	r2,zero,13950 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   13938:	00138440 	call	13844 <alt_get_errno>
   1393c:	e0fffb17 	ldw	r3,-20(fp)
   13940:	00c7c83a 	sub	r3,zero,r3
   13944:	10c00015 	stw	r3,0(r2)
    rc = -1;
   13948:	00bfffc4 	movi	r2,-1
   1394c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   13950:	e0bffb17 	ldw	r2,-20(fp)
}
   13954:	e037883a 	mov	sp,fp
   13958:	dfc00117 	ldw	ra,4(sp)
   1395c:	df000017 	ldw	fp,0(sp)
   13960:	dec00204 	addi	sp,sp,8
   13964:	f800283a 	ret

00013968 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   13968:	defffd04 	addi	sp,sp,-12
   1396c:	dfc00215 	stw	ra,8(sp)
   13970:	df000115 	stw	fp,4(sp)
   13974:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   13978:	0009883a 	mov	r4,zero
   1397c:	0013e0c0 	call	13e0c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   13980:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   13984:	0013e400 	call	13e40 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   13988:	01000074 	movhi	r4,1
   1398c:	21187504 	addi	r4,r4,25044
   13990:	01400074 	movhi	r5,1
   13994:	29587504 	addi	r5,r5,25044
   13998:	01800074 	movhi	r6,1
   1399c:	31987504 	addi	r6,r6,25044
   139a0:	00155c40 	call	155c4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   139a4:	00151480 	call	15148 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   139a8:	01000074 	movhi	r4,1
   139ac:	21146904 	addi	r4,r4,20900
   139b0:	0015d080 	call	15d08 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   139b4:	d126b417 	ldw	r4,-25904(gp)
   139b8:	d0e6b517 	ldw	r3,-25900(gp)
   139bc:	d0a6b617 	ldw	r2,-25896(gp)
   139c0:	180b883a 	mov	r5,r3
   139c4:	100d883a 	mov	r6,r2
   139c8:	001080c0 	call	1080c <main>
   139cc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   139d0:	01000044 	movi	r4,1
   139d4:	001346c0 	call	1346c <close>
  exit (result);
   139d8:	e13fff17 	ldw	r4,-4(fp)
   139dc:	0015d1c0 	call	15d1c <exit>

000139e0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   139e0:	defffe04 	addi	sp,sp,-8
   139e4:	df000115 	stw	fp,4(sp)
   139e8:	df000104 	addi	fp,sp,4
   139ec:	e13fff15 	stw	r4,-4(fp)
}
   139f0:	e037883a 	mov	sp,fp
   139f4:	df000017 	ldw	fp,0(sp)
   139f8:	dec00104 	addi	sp,sp,4
   139fc:	f800283a 	ret

00013a00 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   13a00:	defffe04 	addi	sp,sp,-8
   13a04:	df000115 	stw	fp,4(sp)
   13a08:	df000104 	addi	fp,sp,4
   13a0c:	e13fff15 	stw	r4,-4(fp)
}
   13a10:	e037883a 	mov	sp,fp
   13a14:	df000017 	ldw	fp,0(sp)
   13a18:	dec00104 	addi	sp,sp,4
   13a1c:	f800283a 	ret

00013a20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13a20:	defffe04 	addi	sp,sp,-8
   13a24:	dfc00115 	stw	ra,4(sp)
   13a28:	df000015 	stw	fp,0(sp)
   13a2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13a30:	00800074 	movhi	r2,1
   13a34:	109f1a04 	addi	r2,r2,31848
   13a38:	10800017 	ldw	r2,0(r2)
   13a3c:	10000526 	beq	r2,zero,13a54 <alt_get_errno+0x34>
   13a40:	00800074 	movhi	r2,1
   13a44:	109f1a04 	addi	r2,r2,31848
   13a48:	10800017 	ldw	r2,0(r2)
   13a4c:	103ee83a 	callr	r2
   13a50:	00000206 	br	13a5c <alt_get_errno+0x3c>
   13a54:	008000b4 	movhi	r2,2
   13a58:	10a5c404 	addi	r2,r2,-26864
}
   13a5c:	e037883a 	mov	sp,fp
   13a60:	dfc00117 	ldw	ra,4(sp)
   13a64:	df000017 	ldw	fp,0(sp)
   13a68:	dec00204 	addi	sp,sp,8
   13a6c:	f800283a 	ret

00013a70 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   13a70:	defff904 	addi	sp,sp,-28
   13a74:	dfc00615 	stw	ra,24(sp)
   13a78:	df000515 	stw	fp,20(sp)
   13a7c:	df000504 	addi	fp,sp,20
   13a80:	e13ffd15 	stw	r4,-12(fp)
   13a84:	e17ffe15 	stw	r5,-8(fp)
   13a88:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13a8c:	e0bffd17 	ldw	r2,-12(fp)
   13a90:	10000716 	blt	r2,zero,13ab0 <read+0x40>
   13a94:	e13ffd17 	ldw	r4,-12(fp)
   13a98:	01400304 	movi	r5,12
   13a9c:	00108d80 	call	108d8 <__mulsi3>
   13aa0:	00c00074 	movhi	r3,1
   13aa4:	18da9904 	addi	r3,r3,27236
   13aa8:	10c5883a 	add	r2,r2,r3
   13aac:	00000106 	br	13ab4 <read+0x44>
   13ab0:	0005883a 	mov	r2,zero
   13ab4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   13ab8:	e0bffb17 	ldw	r2,-20(fp)
   13abc:	10002026 	beq	r2,zero,13b40 <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   13ac0:	e0bffb17 	ldw	r2,-20(fp)
   13ac4:	10800217 	ldw	r2,8(r2)
   13ac8:	108000cc 	andi	r2,r2,3
   13acc:	10800060 	cmpeqi	r2,r2,1
   13ad0:	1000171e 	bne	r2,zero,13b30 <read+0xc0>
        (fd->dev->read))
   13ad4:	e0bffb17 	ldw	r2,-20(fp)
   13ad8:	10800017 	ldw	r2,0(r2)
   13adc:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   13ae0:	10001326 	beq	r2,zero,13b30 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   13ae4:	e0bffb17 	ldw	r2,-20(fp)
   13ae8:	10800017 	ldw	r2,0(r2)
   13aec:	10c00517 	ldw	r3,20(r2)
   13af0:	e0bfff17 	ldw	r2,-4(fp)
   13af4:	e13ffb17 	ldw	r4,-20(fp)
   13af8:	e17ffe17 	ldw	r5,-8(fp)
   13afc:	100d883a 	mov	r6,r2
   13b00:	183ee83a 	callr	r3
   13b04:	e0bffc15 	stw	r2,-16(fp)
   13b08:	e0bffc17 	ldw	r2,-16(fp)
   13b0c:	1000060e 	bge	r2,zero,13b28 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   13b10:	0013a200 	call	13a20 <alt_get_errno>
   13b14:	e0fffc17 	ldw	r3,-16(fp)
   13b18:	00c7c83a 	sub	r3,zero,r3
   13b1c:	10c00015 	stw	r3,0(r2)
          return -1;
   13b20:	00bfffc4 	movi	r2,-1
   13b24:	00000a06 	br	13b50 <read+0xe0>
        }
        return rval;
   13b28:	e0bffc17 	ldw	r2,-16(fp)
   13b2c:	00000806 	br	13b50 <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   13b30:	0013a200 	call	13a20 <alt_get_errno>
   13b34:	00c00344 	movi	r3,13
   13b38:	10c00015 	stw	r3,0(r2)
   13b3c:	00000306 	br	13b4c <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   13b40:	0013a200 	call	13a20 <alt_get_errno>
   13b44:	00c01444 	movi	r3,81
   13b48:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   13b4c:	00bfffc4 	movi	r2,-1
}
   13b50:	e037883a 	mov	sp,fp
   13b54:	dfc00117 	ldw	ra,4(sp)
   13b58:	df000017 	ldw	fp,0(sp)
   13b5c:	dec00204 	addi	sp,sp,8
   13b60:	f800283a 	ret

00013b64 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   13b64:	defffc04 	addi	sp,sp,-16
   13b68:	dfc00315 	stw	ra,12(sp)
   13b6c:	df000215 	stw	fp,8(sp)
   13b70:	dc000115 	stw	r16,4(sp)
   13b74:	df000104 	addi	fp,sp,4
   13b78:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   13b7c:	e0bfff17 	ldw	r2,-4(fp)
   13b80:	108000d0 	cmplti	r2,r2,3
   13b84:	1000111e 	bne	r2,zero,13bcc <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   13b88:	04000074 	movhi	r16,1
   13b8c:	841a9904 	addi	r16,r16,27236
   13b90:	e0bfff17 	ldw	r2,-4(fp)
   13b94:	1009883a 	mov	r4,r2
   13b98:	01400304 	movi	r5,12
   13b9c:	00108d80 	call	108d8 <__mulsi3>
   13ba0:	8085883a 	add	r2,r16,r2
   13ba4:	10800204 	addi	r2,r2,8
   13ba8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   13bac:	04000074 	movhi	r16,1
   13bb0:	841a9904 	addi	r16,r16,27236
   13bb4:	e0bfff17 	ldw	r2,-4(fp)
   13bb8:	1009883a 	mov	r4,r2
   13bbc:	01400304 	movi	r5,12
   13bc0:	00108d80 	call	108d8 <__mulsi3>
   13bc4:	8085883a 	add	r2,r16,r2
   13bc8:	10000015 	stw	zero,0(r2)
  }
}
   13bcc:	e037883a 	mov	sp,fp
   13bd0:	dfc00217 	ldw	ra,8(sp)
   13bd4:	df000117 	ldw	fp,4(sp)
   13bd8:	dc000017 	ldw	r16,0(sp)
   13bdc:	dec00304 	addi	sp,sp,12
   13be0:	f800283a 	ret

00013be4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   13be4:	defff904 	addi	sp,sp,-28
   13be8:	df000615 	stw	fp,24(sp)
   13bec:	df000604 	addi	fp,sp,24
   13bf0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13bf4:	0005303a 	rdctl	r2,status
   13bf8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13bfc:	e0fffc17 	ldw	r3,-16(fp)
   13c00:	00bfff84 	movi	r2,-2
   13c04:	1884703a 	and	r2,r3,r2
   13c08:	1001703a 	wrctl	status,r2
  
  return context;
   13c0c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   13c10:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   13c14:	d0a00a17 	ldw	r2,-32728(gp)
   13c18:	10c000c4 	addi	r3,r2,3
   13c1c:	00bfff04 	movi	r2,-4
   13c20:	1884703a 	and	r2,r3,r2
   13c24:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   13c28:	d0e00a17 	ldw	r3,-32728(gp)
   13c2c:	e0bfff17 	ldw	r2,-4(fp)
   13c30:	1885883a 	add	r2,r3,r2
   13c34:	00c000b4 	movhi	r3,2
   13c38:	18c00004 	addi	r3,r3,0
   13c3c:	1880062e 	bgeu	r3,r2,13c58 <sbrk+0x74>
   13c40:	e0bffa17 	ldw	r2,-24(fp)
   13c44:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13c48:	e0bffd17 	ldw	r2,-12(fp)
   13c4c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   13c50:	00bfffc4 	movi	r2,-1
   13c54:	00000b06 	br	13c84 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   13c58:	d0a00a17 	ldw	r2,-32728(gp)
   13c5c:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   13c60:	d0e00a17 	ldw	r3,-32728(gp)
   13c64:	e0bfff17 	ldw	r2,-4(fp)
   13c68:	1885883a 	add	r2,r3,r2
   13c6c:	d0a00a15 	stw	r2,-32728(gp)
   13c70:	e0bffa17 	ldw	r2,-24(fp)
   13c74:	e0bffe15 	stw	r2,-8(fp)
   13c78:	e0bffe17 	ldw	r2,-8(fp)
   13c7c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   13c80:	e0bffb17 	ldw	r2,-20(fp)
} 
   13c84:	e037883a 	mov	sp,fp
   13c88:	df000017 	ldw	fp,0(sp)
   13c8c:	dec00104 	addi	sp,sp,4
   13c90:	f800283a 	ret

00013c94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13c94:	defffe04 	addi	sp,sp,-8
   13c98:	dfc00115 	stw	ra,4(sp)
   13c9c:	df000015 	stw	fp,0(sp)
   13ca0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13ca4:	00800074 	movhi	r2,1
   13ca8:	109f1a04 	addi	r2,r2,31848
   13cac:	10800017 	ldw	r2,0(r2)
   13cb0:	10000526 	beq	r2,zero,13cc8 <alt_get_errno+0x34>
   13cb4:	00800074 	movhi	r2,1
   13cb8:	109f1a04 	addi	r2,r2,31848
   13cbc:	10800017 	ldw	r2,0(r2)
   13cc0:	103ee83a 	callr	r2
   13cc4:	00000206 	br	13cd0 <alt_get_errno+0x3c>
   13cc8:	008000b4 	movhi	r2,2
   13ccc:	10a5c404 	addi	r2,r2,-26864
}
   13cd0:	e037883a 	mov	sp,fp
   13cd4:	dfc00117 	ldw	ra,4(sp)
   13cd8:	df000017 	ldw	fp,0(sp)
   13cdc:	dec00204 	addi	sp,sp,8
   13ce0:	f800283a 	ret

00013ce4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   13ce4:	defff904 	addi	sp,sp,-28
   13ce8:	dfc00615 	stw	ra,24(sp)
   13cec:	df000515 	stw	fp,20(sp)
   13cf0:	df000504 	addi	fp,sp,20
   13cf4:	e13ffd15 	stw	r4,-12(fp)
   13cf8:	e17ffe15 	stw	r5,-8(fp)
   13cfc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13d00:	e0bffd17 	ldw	r2,-12(fp)
   13d04:	10000716 	blt	r2,zero,13d24 <write+0x40>
   13d08:	e13ffd17 	ldw	r4,-12(fp)
   13d0c:	01400304 	movi	r5,12
   13d10:	00108d80 	call	108d8 <__mulsi3>
   13d14:	00c00074 	movhi	r3,1
   13d18:	18da9904 	addi	r3,r3,27236
   13d1c:	10c5883a 	add	r2,r2,r3
   13d20:	00000106 	br	13d28 <write+0x44>
   13d24:	0005883a 	mov	r2,zero
   13d28:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   13d2c:	e0bffb17 	ldw	r2,-20(fp)
   13d30:	10001f26 	beq	r2,zero,13db0 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   13d34:	e0bffb17 	ldw	r2,-20(fp)
   13d38:	10800217 	ldw	r2,8(r2)
   13d3c:	108000cc 	andi	r2,r2,3
   13d40:	10001726 	beq	r2,zero,13da0 <write+0xbc>
   13d44:	e0bffb17 	ldw	r2,-20(fp)
   13d48:	10800017 	ldw	r2,0(r2)
   13d4c:	10800617 	ldw	r2,24(r2)
   13d50:	10001326 	beq	r2,zero,13da0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   13d54:	e0bffb17 	ldw	r2,-20(fp)
   13d58:	10800017 	ldw	r2,0(r2)
   13d5c:	10c00617 	ldw	r3,24(r2)
   13d60:	e0bfff17 	ldw	r2,-4(fp)
   13d64:	e13ffb17 	ldw	r4,-20(fp)
   13d68:	e17ffe17 	ldw	r5,-8(fp)
   13d6c:	100d883a 	mov	r6,r2
   13d70:	183ee83a 	callr	r3
   13d74:	e0bffc15 	stw	r2,-16(fp)
   13d78:	e0bffc17 	ldw	r2,-16(fp)
   13d7c:	1000060e 	bge	r2,zero,13d98 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   13d80:	0013c940 	call	13c94 <alt_get_errno>
   13d84:	e0fffc17 	ldw	r3,-16(fp)
   13d88:	00c7c83a 	sub	r3,zero,r3
   13d8c:	10c00015 	stw	r3,0(r2)
        return -1;
   13d90:	00bfffc4 	movi	r2,-1
   13d94:	00000a06 	br	13dc0 <write+0xdc>
      }
      return rval;
   13d98:	e0bffc17 	ldw	r2,-16(fp)
   13d9c:	00000806 	br	13dc0 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
   13da0:	0013c940 	call	13c94 <alt_get_errno>
   13da4:	00c00344 	movi	r3,13
   13da8:	10c00015 	stw	r3,0(r2)
   13dac:	00000306 	br	13dbc <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   13db0:	0013c940 	call	13c94 <alt_get_errno>
   13db4:	00c01444 	movi	r3,81
   13db8:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   13dbc:	00bfffc4 	movi	r2,-1
}
   13dc0:	e037883a 	mov	sp,fp
   13dc4:	dfc00117 	ldw	ra,4(sp)
   13dc8:	df000017 	ldw	fp,0(sp)
   13dcc:	dec00204 	addi	sp,sp,8
   13dd0:	f800283a 	ret

00013dd4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   13dd4:	defffd04 	addi	sp,sp,-12
   13dd8:	dfc00215 	stw	ra,8(sp)
   13ddc:	df000115 	stw	fp,4(sp)
   13de0:	df000104 	addi	fp,sp,4
   13de4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   13de8:	e13fff17 	ldw	r4,-4(fp)
   13dec:	01400074 	movhi	r5,1
   13df0:	295f1704 	addi	r5,r5,31836
   13df4:	00150a80 	call	150a8 <alt_dev_llist_insert>
}
   13df8:	e037883a 	mov	sp,fp
   13dfc:	dfc00117 	ldw	ra,4(sp)
   13e00:	df000017 	ldw	fp,0(sp)
   13e04:	dec00204 	addi	sp,sp,8
   13e08:	f800283a 	ret

00013e0c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   13e0c:	defffd04 	addi	sp,sp,-12
   13e10:	dfc00215 	stw	ra,8(sp)
   13e14:	df000115 	stw	fp,4(sp)
   13e18:	df000104 	addi	fp,sp,4
   13e1c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU4, cpu4);
   13e20:	0015a700 	call	15a70 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   13e24:	00800044 	movi	r2,1
   13e28:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   13e2c:	e037883a 	mov	sp,fp
   13e30:	dfc00117 	ldw	ra,4(sp)
   13e34:	df000017 	ldw	fp,0(sp)
   13e38:	dec00204 	addi	sp,sp,8
   13e3c:	f800283a 	ret

00013e40 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   13e40:	defffe04 	addi	sp,sp,-8
   13e44:	dfc00115 	stw	ra,4(sp)
   13e48:	df000015 	stw	fp,0(sp)
   13e4c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER4, timer4);
   13e50:	010000b4 	movhi	r4,2
   13e54:	21041004 	addi	r4,r4,4160
   13e58:	000b883a 	mov	r5,zero
   13e5c:	01800044 	movi	r6,1
   13e60:	01c0fa04 	movi	r7,1000
   13e64:	0014e740 	call	14e74 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_FIFO_INIT ( FIFO1TO4, fifo1to4);
   13e68:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO3TO4, fifo3to4);
   13e6c:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO4TO5, fifo4to5);
   13e70:	0001883a 	nop
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART4, jtag_uart4);
   13e74:	01000074 	movhi	r4,1
   13e78:	211b0304 	addi	r4,r4,27660
   13e7c:	000b883a 	mov	r5,zero
   13e80:	01800404 	movi	r6,16
   13e84:	00145000 	call	14500 <altera_avalon_jtag_uart_init>
   13e88:	01000074 	movhi	r4,1
   13e8c:	211af904 	addi	r4,r4,27620
   13e90:	0013dd40 	call	13dd4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   13e94:	0001883a 	nop
}
   13e98:	e037883a 	mov	sp,fp
   13e9c:	dfc00117 	ldw	ra,4(sp)
   13ea0:	df000017 	ldw	fp,0(sp)
   13ea4:	dec00204 	addi	sp,sp,8
   13ea8:	f800283a 	ret

00013eac <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
   13eac:	defffa04 	addi	sp,sp,-24
   13eb0:	dfc00515 	stw	ra,20(sp)
   13eb4:	df000415 	stw	fp,16(sp)
   13eb8:	df000404 	addi	fp,sp,16
   13ebc:	e13ffc15 	stw	r4,-16(fp)
   13ec0:	e17ffd15 	stw	r5,-12(fp)
   13ec4:	e1bffe15 	stw	r6,-8(fp)
   13ec8:	e1ffff15 	stw	r7,-4(fp)
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
   13ecc:	e13ffc17 	ldw	r4,-16(fp)
   13ed0:	01400fc4 	movi	r5,63
   13ed4:	00140780 	call	14078 <altera_avalon_fifo_clear_event>
   13ed8:	10000226 	beq	r2,zero,13ee4 <altera_avalon_fifo_init+0x38>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   13edc:	00bfffc4 	movi	r2,-1
   13ee0:	00001306 	br	13f30 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
   13ee4:	e13ffc17 	ldw	r4,-16(fp)
   13ee8:	e17ffd17 	ldw	r5,-12(fp)
   13eec:	00140d40 	call	140d4 <altera_avalon_fifo_write_ienable>
   13ef0:	10000226 	beq	r2,zero,13efc <altera_avalon_fifo_init+0x50>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   13ef4:	00bfff84 	movi	r2,-2
   13ef8:	00000d06 	br	13f30 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
   13efc:	e13ffc17 	ldw	r4,-16(fp)
   13f00:	e17fff17 	ldw	r5,-4(fp)
   13f04:	001412c0 	call	1412c <altera_avalon_fifo_write_almostfull>
   13f08:	10000226 	beq	r2,zero,13f14 <altera_avalon_fifo_init+0x68>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   13f0c:	00bfff44 	movi	r2,-3
   13f10:	00000706 	br	13f30 <altera_avalon_fifo_init+0x84>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
   13f14:	e13ffc17 	ldw	r4,-16(fp)
   13f18:	e17ffe17 	ldw	r5,-8(fp)
   13f1c:	00141840 	call	14184 <altera_avalon_fifo_write_almostempty>
   13f20:	10000226 	beq	r2,zero,13f2c <altera_avalon_fifo_init+0x80>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   13f24:	00bfff44 	movi	r2,-3
   13f28:	00000106 	br	13f30 <altera_avalon_fifo_init+0x84>
    }

    return ALTERA_AVALON_FIFO_OK;
   13f2c:	0005883a 	mov	r2,zero
}
   13f30:	e037883a 	mov	sp,fp
   13f34:	dfc00117 	ldw	ra,4(sp)
   13f38:	df000017 	ldw	fp,0(sp)
   13f3c:	dec00204 	addi	sp,sp,8
   13f40:	f800283a 	ret

00013f44 <altera_avalon_fifo_read_status>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
   13f44:	defffd04 	addi	sp,sp,-12
   13f48:	df000215 	stw	fp,8(sp)
   13f4c:	df000204 	addi	fp,sp,8
   13f50:	e13ffe15 	stw	r4,-8(fp)
   13f54:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   13f58:	e0bffe17 	ldw	r2,-8(fp)
   13f5c:	10800104 	addi	r2,r2,4
   13f60:	10800037 	ldwio	r2,0(r2)
   13f64:	1007883a 	mov	r3,r2
   13f68:	e0bfff17 	ldw	r2,-4(fp)
   13f6c:	1884703a 	and	r2,r3,r2
}
   13f70:	e037883a 	mov	sp,fp
   13f74:	df000017 	ldw	fp,0(sp)
   13f78:	dec00104 	addi	sp,sp,4
   13f7c:	f800283a 	ret

00013f80 <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
   13f80:	defffd04 	addi	sp,sp,-12
   13f84:	df000215 	stw	fp,8(sp)
   13f88:	df000204 	addi	fp,sp,8
   13f8c:	e13ffe15 	stw	r4,-8(fp)
   13f90:	e17fff15 	stw	r5,-4(fp)
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
   13f94:	e0bffe17 	ldw	r2,-8(fp)
   13f98:	10800304 	addi	r2,r2,12
   13f9c:	10800037 	ldwio	r2,0(r2)
   13fa0:	1007883a 	mov	r3,r2
   13fa4:	e0bfff17 	ldw	r2,-4(fp)
   13fa8:	1884703a 	and	r2,r3,r2
}
   13fac:	e037883a 	mov	sp,fp
   13fb0:	df000017 	ldw	fp,0(sp)
   13fb4:	dec00104 	addi	sp,sp,4
   13fb8:	f800283a 	ret

00013fbc <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
   13fbc:	defffe04 	addi	sp,sp,-8
   13fc0:	df000115 	stw	fp,4(sp)
   13fc4:	df000104 	addi	fp,sp,4
   13fc8:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
   13fcc:	e0bfff17 	ldw	r2,-4(fp)
   13fd0:	10800404 	addi	r2,r2,16
   13fd4:	10800037 	ldwio	r2,0(r2)
}
   13fd8:	e037883a 	mov	sp,fp
   13fdc:	df000017 	ldw	fp,0(sp)
   13fe0:	dec00104 	addi	sp,sp,4
   13fe4:	f800283a 	ret

00013fe8 <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
   13fe8:	defffe04 	addi	sp,sp,-8
   13fec:	df000115 	stw	fp,4(sp)
   13ff0:	df000104 	addi	fp,sp,4
   13ff4:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
   13ff8:	e0bfff17 	ldw	r2,-4(fp)
   13ffc:	10800504 	addi	r2,r2,20
   14000:	10800037 	ldwio	r2,0(r2)
}
   14004:	e037883a 	mov	sp,fp
   14008:	df000017 	ldw	fp,0(sp)
   1400c:	dec00104 	addi	sp,sp,4
   14010:	f800283a 	ret

00014014 <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
   14014:	defffd04 	addi	sp,sp,-12
   14018:	df000215 	stw	fp,8(sp)
   1401c:	df000204 	addi	fp,sp,8
   14020:	e13ffe15 	stw	r4,-8(fp)
   14024:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
   14028:	e0bffe17 	ldw	r2,-8(fp)
   1402c:	10800204 	addi	r2,r2,8
   14030:	10800037 	ldwio	r2,0(r2)
   14034:	1007883a 	mov	r3,r2
   14038:	e0bfff17 	ldw	r2,-4(fp)
   1403c:	1884703a 	and	r2,r3,r2
}
   14040:	e037883a 	mov	sp,fp
   14044:	df000017 	ldw	fp,0(sp)
   14048:	dec00104 	addi	sp,sp,4
   1404c:	f800283a 	ret

00014050 <altera_avalon_fifo_read_level>:

int altera_avalon_fifo_read_level(alt_u32 address)
{
   14050:	defffe04 	addi	sp,sp,-8
   14054:	df000115 	stw	fp,4(sp)
   14058:	df000104 	addi	fp,sp,4
   1405c:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
   14060:	e0bfff17 	ldw	r2,-4(fp)
   14064:	10800037 	ldwio	r2,0(r2)
}
   14068:	e037883a 	mov	sp,fp
   1406c:	df000017 	ldw	fp,0(sp)
   14070:	dec00104 	addi	sp,sp,4
   14074:	f800283a 	ret

00014078 <altera_avalon_fifo_clear_event>:

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
   14078:	defffd04 	addi	sp,sp,-12
   1407c:	df000215 	stw	fp,8(sp)
   14080:	df000204 	addi	fp,sp,8
   14084:	e13ffe15 	stw	r4,-8(fp)
   14088:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
   1408c:	e0bffe17 	ldw	r2,-8(fp)
   14090:	10800204 	addi	r2,r2,8
   14094:	e0ffff17 	ldw	r3,-4(fp)
   14098:	10c00035 	stwio	r3,0(r2)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
   1409c:	e0bffe17 	ldw	r2,-8(fp)
   140a0:	10800204 	addi	r2,r2,8
   140a4:	10800037 	ldwio	r2,0(r2)
   140a8:	1007883a 	mov	r3,r2
   140ac:	e0bfff17 	ldw	r2,-4(fp)
   140b0:	1884703a 	and	r2,r3,r2
   140b4:	1000021e 	bne	r2,zero,140c0 <altera_avalon_fifo_clear_event+0x48>
        return ALTERA_AVALON_FIFO_OK;
   140b8:	0005883a 	mov	r2,zero
   140bc:	00000106 	br	140c4 <altera_avalon_fifo_clear_event+0x4c>
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   140c0:	00bfffc4 	movi	r2,-1
}
   140c4:	e037883a 	mov	sp,fp
   140c8:	df000017 	ldw	fp,0(sp)
   140cc:	dec00104 	addi	sp,sp,4
   140d0:	f800283a 	ret

000140d4 <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
   140d4:	defffd04 	addi	sp,sp,-12
   140d8:	df000215 	stw	fp,8(sp)
   140dc:	df000204 	addi	fp,sp,8
   140e0:	e13ffe15 	stw	r4,-8(fp)
   140e4:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
   140e8:	e0bffe17 	ldw	r2,-8(fp)
   140ec:	10800304 	addi	r2,r2,12
   140f0:	e0ffff17 	ldw	r3,-4(fp)
   140f4:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
   140f8:	e0bffe17 	ldw	r2,-8(fp)
   140fc:	10800304 	addi	r2,r2,12
   14100:	10800037 	ldwio	r2,0(r2)
   14104:	1007883a 	mov	r3,r2
   14108:	e0bfff17 	ldw	r2,-4(fp)
   1410c:	1880021e 	bne	r3,r2,14118 <altera_avalon_fifo_write_ienable+0x44>
        return ALTERA_AVALON_FIFO_OK;
   14110:	0005883a 	mov	r2,zero
   14114:	00000106 	br	1411c <altera_avalon_fifo_write_ienable+0x48>
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   14118:	00bfff84 	movi	r2,-2
}
   1411c:	e037883a 	mov	sp,fp
   14120:	df000017 	ldw	fp,0(sp)
   14124:	dec00104 	addi	sp,sp,4
   14128:	f800283a 	ret

0001412c <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
   1412c:	defffd04 	addi	sp,sp,-12
   14130:	df000215 	stw	fp,8(sp)
   14134:	df000204 	addi	fp,sp,8
   14138:	e13ffe15 	stw	r4,-8(fp)
   1413c:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
   14140:	e0bffe17 	ldw	r2,-8(fp)
   14144:	10800404 	addi	r2,r2,16
   14148:	e0ffff17 	ldw	r3,-4(fp)
   1414c:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
   14150:	e0bffe17 	ldw	r2,-8(fp)
   14154:	10800404 	addi	r2,r2,16
   14158:	10800037 	ldwio	r2,0(r2)
   1415c:	1007883a 	mov	r3,r2
   14160:	e0bfff17 	ldw	r2,-4(fp)
   14164:	1880021e 	bne	r3,r2,14170 <altera_avalon_fifo_write_almostfull+0x44>
        return ALTERA_AVALON_FIFO_OK;
   14168:	0005883a 	mov	r2,zero
   1416c:	00000106 	br	14174 <altera_avalon_fifo_write_almostfull+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   14170:	00bfff44 	movi	r2,-3
}
   14174:	e037883a 	mov	sp,fp
   14178:	df000017 	ldw	fp,0(sp)
   1417c:	dec00104 	addi	sp,sp,4
   14180:	f800283a 	ret

00014184 <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
   14184:	defffd04 	addi	sp,sp,-12
   14188:	df000215 	stw	fp,8(sp)
   1418c:	df000204 	addi	fp,sp,8
   14190:	e13ffe15 	stw	r4,-8(fp)
   14194:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
   14198:	e0bffe17 	ldw	r2,-8(fp)
   1419c:	10800504 	addi	r2,r2,20
   141a0:	e0ffff17 	ldw	r3,-4(fp)
   141a4:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
   141a8:	e0bffe17 	ldw	r2,-8(fp)
   141ac:	10800504 	addi	r2,r2,20
   141b0:	10800037 	ldwio	r2,0(r2)
   141b4:	1007883a 	mov	r3,r2
   141b8:	e0bfff17 	ldw	r2,-4(fp)
   141bc:	1880021e 	bne	r3,r2,141c8 <altera_avalon_fifo_write_almostempty+0x44>
        return ALTERA_AVALON_FIFO_OK;
   141c0:	0005883a 	mov	r2,zero
   141c4:	00000106 	br	141cc <altera_avalon_fifo_write_almostempty+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   141c8:	00bfff44 	movi	r2,-3
}
   141cc:	e037883a 	mov	sp,fp
   141d0:	df000017 	ldw	fp,0(sp)
   141d4:	dec00104 	addi	sp,sp,4
   141d8:	f800283a 	ret

000141dc <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
   141dc:	defffb04 	addi	sp,sp,-20
   141e0:	dfc00415 	stw	ra,16(sp)
   141e4:	df000315 	stw	fp,12(sp)
   141e8:	df000304 	addi	fp,sp,12
   141ec:	e13ffd15 	stw	r4,-12(fp)
   141f0:	e17ffe15 	stw	r5,-8(fp)
   141f4:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   141f8:	e13ffe17 	ldw	r4,-8(fp)
   141fc:	01400044 	movi	r5,1
   14200:	0013f440 	call	13f44 <altera_avalon_fifo_read_status>
   14204:	1000051e 	bne	r2,zero,1421c <altera_avalon_fifo_write_fifo+0x40>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
   14208:	e0bffd17 	ldw	r2,-12(fp)
   1420c:	e0ffff17 	ldw	r3,-4(fp)
   14210:	10c00035 	stwio	r3,0(r2)
        return ALTERA_AVALON_FIFO_OK;
   14214:	0005883a 	mov	r2,zero
   14218:	00000106 	br	14220 <altera_avalon_fifo_write_fifo+0x44>
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
   1421c:	00bfff04 	movi	r2,-4
    }
}
   14220:	e037883a 	mov	sp,fp
   14224:	dfc00117 	ldw	ra,4(sp)
   14228:	df000017 	ldw	fp,0(sp)
   1422c:	dec00204 	addi	sp,sp,8
   14230:	f800283a 	ret

00014234 <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
   14234:	defffa04 	addi	sp,sp,-24
   14238:	dfc00515 	stw	ra,20(sp)
   1423c:	df000415 	stw	fp,16(sp)
   14240:	df000404 	addi	fp,sp,16
   14244:	e13ffd15 	stw	r4,-12(fp)
   14248:	e17ffe15 	stw	r5,-8(fp)
   1424c:	e1bfff15 	stw	r6,-4(fp)
    int return_val = 0;
   14250:	e03ffc15 	stw	zero,-16(fp)
    *data = 0;
   14254:	e0bfff17 	ldw	r2,-4(fp)
   14258:	10000015 	stw	zero,0(r2)
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   1425c:	e13ffe17 	ldw	r4,-8(fp)
   14260:	01400084 	movi	r5,2
   14264:	0013f440 	call	13f44 <altera_avalon_fifo_read_status>
   14268:	1000071e 	bne	r2,zero,14288 <altera_avalon_read_fifo+0x54>
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
   1426c:	e13ffe17 	ldw	r4,-8(fp)
   14270:	00140500 	call	14050 <altera_avalon_fifo_read_level>
   14274:	e0bffc15 	stw	r2,-16(fp)
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   14278:	e0bffd17 	ldw	r2,-12(fp)
   1427c:	10c00037 	ldwio	r3,0(r2)
   14280:	e0bfff17 	ldw	r2,-4(fp)
   14284:	10c00015 	stw	r3,0(r2)
    
    }
    return return_val;
   14288:	e0bffc17 	ldw	r2,-16(fp)
}
   1428c:	e037883a 	mov	sp,fp
   14290:	dfc00117 	ldw	ra,4(sp)
   14294:	df000017 	ldw	fp,0(sp)
   14298:	dec00204 	addi	sp,sp,8
   1429c:	f800283a 	ret

000142a0 <altera_avalon_fifo_read_fifo>:

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
   142a0:	defffc04 	addi	sp,sp,-16
   142a4:	dfc00315 	stw	ra,12(sp)
   142a8:	df000215 	stw	fp,8(sp)
   142ac:	df000204 	addi	fp,sp,8
   142b0:	e13ffe15 	stw	r4,-8(fp)
   142b4:	e17fff15 	stw	r5,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   142b8:	e13fff17 	ldw	r4,-4(fp)
   142bc:	01400084 	movi	r5,2
   142c0:	0013f440 	call	13f44 <altera_avalon_fifo_read_status>
   142c4:	1000031e 	bne	r2,zero,142d4 <altera_avalon_fifo_read_fifo+0x34>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   142c8:	e0bffe17 	ldw	r2,-8(fp)
   142cc:	10800037 	ldwio	r2,0(r2)
   142d0:	00000106 	br	142d8 <altera_avalon_fifo_read_fifo+0x38>
    }
    return 0;
   142d4:	0005883a 	mov	r2,zero
}
   142d8:	e037883a 	mov	sp,fp
   142dc:	dfc00117 	ldw	ra,4(sp)
   142e0:	df000017 	ldw	fp,0(sp)
   142e4:	dec00204 	addi	sp,sp,8
   142e8:	f800283a 	ret

000142ec <altera_avalon_fifo_write_other_info>:

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
   142ec:	defffb04 	addi	sp,sp,-20
   142f0:	dfc00415 	stw	ra,16(sp)
   142f4:	df000315 	stw	fp,12(sp)
   142f8:	df000304 	addi	fp,sp,12
   142fc:	e13ffd15 	stw	r4,-12(fp)
   14300:	e17ffe15 	stw	r5,-8(fp)
   14304:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   14308:	e13ffe17 	ldw	r4,-8(fp)
   1430c:	01400044 	movi	r5,1
   14310:	0013f440 	call	13f44 <altera_avalon_fifo_read_status>
   14314:	1000061e 	bne	r2,zero,14330 <altera_avalon_fifo_write_other_info+0x44>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
   14318:	e0bffd17 	ldw	r2,-12(fp)
   1431c:	10800104 	addi	r2,r2,4
   14320:	e0ffff17 	ldw	r3,-4(fp)
   14324:	10c00035 	stwio	r3,0(r2)
	return ALTERA_AVALON_FIFO_OK;
   14328:	0005883a 	mov	r2,zero
   1432c:	00000106 	br	14334 <altera_avalon_fifo_write_other_info+0x48>
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
   14330:	00bfff04 	movi	r2,-4
    }
}
   14334:	e037883a 	mov	sp,fp
   14338:	dfc00117 	ldw	ra,4(sp)
   1433c:	df000017 	ldw	fp,0(sp)
   14340:	dec00204 	addi	sp,sp,8
   14344:	f800283a 	ret

00014348 <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
   14348:	defffe04 	addi	sp,sp,-8
   1434c:	df000115 	stw	fp,4(sp)
   14350:	df000104 	addi	fp,sp,4
   14354:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
   14358:	e0bfff17 	ldw	r2,-4(fp)
   1435c:	10800104 	addi	r2,r2,4
   14360:	10800037 	ldwio	r2,0(r2)
}
   14364:	e037883a 	mov	sp,fp
   14368:	df000017 	ldw	fp,0(sp)
   1436c:	dec00104 	addi	sp,sp,4
   14370:	f800283a 	ret

00014374 <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
   14374:	defffe04 	addi	sp,sp,-8
   14378:	df000115 	stw	fp,4(sp)
   1437c:	df000104 	addi	fp,sp,4
   14380:	e13fff15 	stw	r4,-4(fp)
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
   14384:	e0bfff17 	ldw	r2,-4(fp)
   14388:	10800037 	ldwio	r2,0(r2)
}
   1438c:	e037883a 	mov	sp,fp
   14390:	df000017 	ldw	fp,0(sp)
   14394:	dec00104 	addi	sp,sp,4
   14398:	f800283a 	ret

0001439c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   1439c:	defffa04 	addi	sp,sp,-24
   143a0:	dfc00515 	stw	ra,20(sp)
   143a4:	df000415 	stw	fp,16(sp)
   143a8:	df000404 	addi	fp,sp,16
   143ac:	e13ffd15 	stw	r4,-12(fp)
   143b0:	e17ffe15 	stw	r5,-8(fp)
   143b4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   143b8:	e0bffd17 	ldw	r2,-12(fp)
   143bc:	10800017 	ldw	r2,0(r2)
   143c0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   143c4:	e0bffc17 	ldw	r2,-16(fp)
   143c8:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   143cc:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   143d0:	10800217 	ldw	r2,8(r2)
   143d4:	1809883a 	mov	r4,r3
   143d8:	e17ffe17 	ldw	r5,-8(fp)
   143dc:	e1bfff17 	ldw	r6,-4(fp)
   143e0:	100f883a 	mov	r7,r2
   143e4:	00149c40 	call	149c4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   143e8:	e037883a 	mov	sp,fp
   143ec:	dfc00117 	ldw	ra,4(sp)
   143f0:	df000017 	ldw	fp,0(sp)
   143f4:	dec00204 	addi	sp,sp,8
   143f8:	f800283a 	ret

000143fc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   143fc:	defffa04 	addi	sp,sp,-24
   14400:	dfc00515 	stw	ra,20(sp)
   14404:	df000415 	stw	fp,16(sp)
   14408:	df000404 	addi	fp,sp,16
   1440c:	e13ffd15 	stw	r4,-12(fp)
   14410:	e17ffe15 	stw	r5,-8(fp)
   14414:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   14418:	e0bffd17 	ldw	r2,-12(fp)
   1441c:	10800017 	ldw	r2,0(r2)
   14420:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   14424:	e0bffc17 	ldw	r2,-16(fp)
   14428:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   1442c:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   14430:	10800217 	ldw	r2,8(r2)
   14434:	1809883a 	mov	r4,r3
   14438:	e17ffe17 	ldw	r5,-8(fp)
   1443c:	e1bfff17 	ldw	r6,-4(fp)
   14440:	100f883a 	mov	r7,r2
   14444:	0014bdc0 	call	14bdc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   14448:	e037883a 	mov	sp,fp
   1444c:	dfc00117 	ldw	ra,4(sp)
   14450:	df000017 	ldw	fp,0(sp)
   14454:	dec00204 	addi	sp,sp,8
   14458:	f800283a 	ret

0001445c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   1445c:	defffc04 	addi	sp,sp,-16
   14460:	dfc00315 	stw	ra,12(sp)
   14464:	df000215 	stw	fp,8(sp)
   14468:	df000204 	addi	fp,sp,8
   1446c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   14470:	e0bfff17 	ldw	r2,-4(fp)
   14474:	10800017 	ldw	r2,0(r2)
   14478:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   1447c:	e0bffe17 	ldw	r2,-8(fp)
   14480:	10c00a04 	addi	r3,r2,40
   14484:	e0bfff17 	ldw	r2,-4(fp)
   14488:	10800217 	ldw	r2,8(r2)
   1448c:	1809883a 	mov	r4,r3
   14490:	100b883a 	mov	r5,r2
   14494:	00148680 	call	14868 <altera_avalon_jtag_uart_close>
}
   14498:	e037883a 	mov	sp,fp
   1449c:	dfc00117 	ldw	ra,4(sp)
   144a0:	df000017 	ldw	fp,0(sp)
   144a4:	dec00204 	addi	sp,sp,8
   144a8:	f800283a 	ret

000144ac <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   144ac:	defffa04 	addi	sp,sp,-24
   144b0:	dfc00515 	stw	ra,20(sp)
   144b4:	df000415 	stw	fp,16(sp)
   144b8:	df000404 	addi	fp,sp,16
   144bc:	e13ffd15 	stw	r4,-12(fp)
   144c0:	e17ffe15 	stw	r5,-8(fp)
   144c4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   144c8:	e0bffd17 	ldw	r2,-12(fp)
   144cc:	10800017 	ldw	r2,0(r2)
   144d0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   144d4:	e0bffc17 	ldw	r2,-16(fp)
   144d8:	10800a04 	addi	r2,r2,40
   144dc:	1009883a 	mov	r4,r2
   144e0:	e17ffe17 	ldw	r5,-8(fp)
   144e4:	e1bfff17 	ldw	r6,-4(fp)
   144e8:	00148d00 	call	148d0 <altera_avalon_jtag_uart_ioctl>
}
   144ec:	e037883a 	mov	sp,fp
   144f0:	dfc00117 	ldw	ra,4(sp)
   144f4:	df000017 	ldw	fp,0(sp)
   144f8:	dec00204 	addi	sp,sp,8
   144fc:	f800283a 	ret

00014500 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   14500:	defffa04 	addi	sp,sp,-24
   14504:	dfc00515 	stw	ra,20(sp)
   14508:	df000415 	stw	fp,16(sp)
   1450c:	df000404 	addi	fp,sp,16
   14510:	e13ffd15 	stw	r4,-12(fp)
   14514:	e17ffe15 	stw	r5,-8(fp)
   14518:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1451c:	e0bffd17 	ldw	r2,-12(fp)
   14520:	00c00044 	movi	r3,1
   14524:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   14528:	e0bffd17 	ldw	r2,-12(fp)
   1452c:	10800017 	ldw	r2,0(r2)
   14530:	10800104 	addi	r2,r2,4
   14534:	e0fffd17 	ldw	r3,-12(fp)
   14538:	18c00817 	ldw	r3,32(r3)
   1453c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   14540:	e0fffe17 	ldw	r3,-8(fp)
   14544:	e0bfff17 	ldw	r2,-4(fp)
   14548:	d8000015 	stw	zero,0(sp)
   1454c:	1809883a 	mov	r4,r3
   14550:	100b883a 	mov	r5,r2
   14554:	01800074 	movhi	r6,1
   14558:	31917004 	addi	r6,r6,17856
   1455c:	e1fffd17 	ldw	r7,-12(fp)
   14560:	001521c0 	call	1521c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   14564:	e0bffd17 	ldw	r2,-12(fp)
   14568:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   1456c:	e0bffd17 	ldw	r2,-12(fp)
   14570:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   14574:	008000b4 	movhi	r2,2
   14578:	10a5c904 	addi	r2,r2,-26844
   1457c:	10800017 	ldw	r2,0(r2)
   14580:	1809883a 	mov	r4,r3
   14584:	100b883a 	mov	r5,r2
   14588:	01800074 	movhi	r6,1
   1458c:	3191f104 	addi	r6,r6,18372
   14590:	e1fffd17 	ldw	r7,-12(fp)
   14594:	0014efc0 	call	14efc <alt_alarm_start>
   14598:	1000040e 	bge	r2,zero,145ac <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   1459c:	e0bffd17 	ldw	r2,-12(fp)
   145a0:	00e00034 	movhi	r3,32768
   145a4:	18ffffc4 	addi	r3,r3,-1
   145a8:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   145ac:	e037883a 	mov	sp,fp
   145b0:	dfc00117 	ldw	ra,4(sp)
   145b4:	df000017 	ldw	fp,0(sp)
   145b8:	dec00204 	addi	sp,sp,8
   145bc:	f800283a 	ret

000145c0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   145c0:	defff804 	addi	sp,sp,-32
   145c4:	df000715 	stw	fp,28(sp)
   145c8:	df000704 	addi	fp,sp,28
   145cc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   145d0:	e0bfff17 	ldw	r2,-4(fp)
   145d4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   145d8:	e0bffb17 	ldw	r2,-20(fp)
   145dc:	10800017 	ldw	r2,0(r2)
   145e0:	e0bffc15 	stw	r2,-16(fp)
   145e4:	00000106 	br	145ec <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
   145e8:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   145ec:	e0bffc17 	ldw	r2,-16(fp)
   145f0:	10800104 	addi	r2,r2,4
   145f4:	10800037 	ldwio	r2,0(r2)
   145f8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   145fc:	e0bffd17 	ldw	r2,-12(fp)
   14600:	1080c00c 	andi	r2,r2,768
   14604:	10006a26 	beq	r2,zero,147b0 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   14608:	e0bffd17 	ldw	r2,-12(fp)
   1460c:	1080400c 	andi	r2,r2,256
   14610:	10003326 	beq	r2,zero,146e0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   14614:	00800074 	movhi	r2,1
   14618:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1461c:	e0bffb17 	ldw	r2,-20(fp)
   14620:	10800a17 	ldw	r2,40(r2)
   14624:	10800044 	addi	r2,r2,1
   14628:	1081ffcc 	andi	r2,r2,2047
   1462c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   14630:	e0bffb17 	ldw	r2,-20(fp)
   14634:	10c00b17 	ldw	r3,44(r2)
   14638:	e0bffe17 	ldw	r2,-8(fp)
   1463c:	18801426 	beq	r3,r2,14690 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   14640:	e0bffc17 	ldw	r2,-16(fp)
   14644:	10800037 	ldwio	r2,0(r2)
   14648:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   1464c:	e0bff917 	ldw	r2,-28(fp)
   14650:	10a0000c 	andi	r2,r2,32768
   14654:	10001026 	beq	r2,zero,14698 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   14658:	e0bffb17 	ldw	r2,-20(fp)
   1465c:	10800a17 	ldw	r2,40(r2)
   14660:	e0fff917 	ldw	r3,-28(fp)
   14664:	e13ffb17 	ldw	r4,-20(fp)
   14668:	2085883a 	add	r2,r4,r2
   1466c:	10800e04 	addi	r2,r2,56
   14670:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14674:	e0bffb17 	ldw	r2,-20(fp)
   14678:	10800a17 	ldw	r2,40(r2)
   1467c:	10800044 	addi	r2,r2,1
   14680:	10c1ffcc 	andi	r3,r2,2047
   14684:	e0bffb17 	ldw	r2,-20(fp)
   14688:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   1468c:	003fe306 	br	1461c <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   14690:	0001883a 	nop
   14694:	00000106 	br	1469c <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   14698:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   1469c:	e0bff917 	ldw	r2,-28(fp)
   146a0:	10bfffec 	andhi	r2,r2,65535
   146a4:	10000e26 	beq	r2,zero,146e0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   146a8:	e0bffb17 	ldw	r2,-20(fp)
   146ac:	10c00817 	ldw	r3,32(r2)
   146b0:	00bfff84 	movi	r2,-2
   146b4:	1886703a 	and	r3,r3,r2
   146b8:	e0bffb17 	ldw	r2,-20(fp)
   146bc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   146c0:	e0bffc17 	ldw	r2,-16(fp)
   146c4:	10800104 	addi	r2,r2,4
   146c8:	e0fffb17 	ldw	r3,-20(fp)
   146cc:	18c00817 	ldw	r3,32(r3)
   146d0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   146d4:	e0bffc17 	ldw	r2,-16(fp)
   146d8:	10800104 	addi	r2,r2,4
   146dc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   146e0:	e0bffd17 	ldw	r2,-12(fp)
   146e4:	1080800c 	andi	r2,r2,512
   146e8:	103fbf26 	beq	r2,zero,145e8 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   146ec:	e0bffd17 	ldw	r2,-12(fp)
   146f0:	1004d43a 	srli	r2,r2,16
   146f4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   146f8:	00001406 	br	1474c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   146fc:	e0bffc17 	ldw	r2,-16(fp)
   14700:	e0fffb17 	ldw	r3,-20(fp)
   14704:	18c00d17 	ldw	r3,52(r3)
   14708:	e13ffb17 	ldw	r4,-20(fp)
   1470c:	20c7883a 	add	r3,r4,r3
   14710:	18c20e04 	addi	r3,r3,2104
   14714:	18c00003 	ldbu	r3,0(r3)
   14718:	18c03fcc 	andi	r3,r3,255
   1471c:	18c0201c 	xori	r3,r3,128
   14720:	18ffe004 	addi	r3,r3,-128
   14724:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14728:	e0bffb17 	ldw	r2,-20(fp)
   1472c:	10800d17 	ldw	r2,52(r2)
   14730:	10800044 	addi	r2,r2,1
   14734:	10c1ffcc 	andi	r3,r2,2047
   14738:	e0bffb17 	ldw	r2,-20(fp)
   1473c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   14740:	e0bffa17 	ldw	r2,-24(fp)
   14744:	10bfffc4 	addi	r2,r2,-1
   14748:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   1474c:	e0bffa17 	ldw	r2,-24(fp)
   14750:	10000526 	beq	r2,zero,14768 <altera_avalon_jtag_uart_irq+0x1a8>
   14754:	e0bffb17 	ldw	r2,-20(fp)
   14758:	10c00d17 	ldw	r3,52(r2)
   1475c:	e0bffb17 	ldw	r2,-20(fp)
   14760:	10800c17 	ldw	r2,48(r2)
   14764:	18bfe51e 	bne	r3,r2,146fc <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   14768:	e0bffa17 	ldw	r2,-24(fp)
   1476c:	103f9e26 	beq	r2,zero,145e8 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   14770:	e0bffb17 	ldw	r2,-20(fp)
   14774:	10c00817 	ldw	r3,32(r2)
   14778:	00bfff44 	movi	r2,-3
   1477c:	1886703a 	and	r3,r3,r2
   14780:	e0bffb17 	ldw	r2,-20(fp)
   14784:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   14788:	e0bffb17 	ldw	r2,-20(fp)
   1478c:	10800017 	ldw	r2,0(r2)
   14790:	10800104 	addi	r2,r2,4
   14794:	e0fffb17 	ldw	r3,-20(fp)
   14798:	18c00817 	ldw	r3,32(r3)
   1479c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   147a0:	e0bffc17 	ldw	r2,-16(fp)
   147a4:	10800104 	addi	r2,r2,4
   147a8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   147ac:	003f8e06 	br	145e8 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   147b0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   147b4:	e037883a 	mov	sp,fp
   147b8:	df000017 	ldw	fp,0(sp)
   147bc:	dec00104 	addi	sp,sp,4
   147c0:	f800283a 	ret

000147c4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   147c4:	defffc04 	addi	sp,sp,-16
   147c8:	df000315 	stw	fp,12(sp)
   147cc:	df000304 	addi	fp,sp,12
   147d0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   147d4:	e0bfff17 	ldw	r2,-4(fp)
   147d8:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   147dc:	e0bffd17 	ldw	r2,-12(fp)
   147e0:	10800017 	ldw	r2,0(r2)
   147e4:	10800104 	addi	r2,r2,4
   147e8:	10800037 	ldwio	r2,0(r2)
   147ec:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   147f0:	e0bffe17 	ldw	r2,-8(fp)
   147f4:	1081000c 	andi	r2,r2,1024
   147f8:	10000a26 	beq	r2,zero,14824 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   147fc:	e0bffd17 	ldw	r2,-12(fp)
   14800:	10800017 	ldw	r2,0(r2)
   14804:	10800104 	addi	r2,r2,4
   14808:	e0fffd17 	ldw	r3,-12(fp)
   1480c:	18c00817 	ldw	r3,32(r3)
   14810:	18c10014 	ori	r3,r3,1024
   14814:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   14818:	e0bffd17 	ldw	r2,-12(fp)
   1481c:	10000915 	stw	zero,36(r2)
   14820:	00000a06 	br	1484c <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   14824:	e0bffd17 	ldw	r2,-12(fp)
   14828:	10800917 	ldw	r2,36(r2)
   1482c:	00e00034 	movhi	r3,32768
   14830:	18ffff04 	addi	r3,r3,-4
   14834:	18800536 	bltu	r3,r2,1484c <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
   14838:	e0bffd17 	ldw	r2,-12(fp)
   1483c:	10800917 	ldw	r2,36(r2)
   14840:	10c00044 	addi	r3,r2,1
   14844:	e0bffd17 	ldw	r2,-12(fp)
   14848:	10c00915 	stw	r3,36(r2)
   1484c:	008000b4 	movhi	r2,2
   14850:	10a5c904 	addi	r2,r2,-26844
   14854:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   14858:	e037883a 	mov	sp,fp
   1485c:	df000017 	ldw	fp,0(sp)
   14860:	dec00104 	addi	sp,sp,4
   14864:	f800283a 	ret

00014868 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   14868:	defffd04 	addi	sp,sp,-12
   1486c:	df000215 	stw	fp,8(sp)
   14870:	df000204 	addi	fp,sp,8
   14874:	e13ffe15 	stw	r4,-8(fp)
   14878:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1487c:	00000506 	br	14894 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   14880:	e0bfff17 	ldw	r2,-4(fp)
   14884:	1090000c 	andi	r2,r2,16384
   14888:	10000226 	beq	r2,zero,14894 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   1488c:	00bffd44 	movi	r2,-11
   14890:	00000b06 	br	148c0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   14894:	e0bffe17 	ldw	r2,-8(fp)
   14898:	10c00d17 	ldw	r3,52(r2)
   1489c:	e0bffe17 	ldw	r2,-8(fp)
   148a0:	10800c17 	ldw	r2,48(r2)
   148a4:	18800526 	beq	r3,r2,148bc <altera_avalon_jtag_uart_close+0x54>
   148a8:	e0bffe17 	ldw	r2,-8(fp)
   148ac:	10c00917 	ldw	r3,36(r2)
   148b0:	e0bffe17 	ldw	r2,-8(fp)
   148b4:	10800117 	ldw	r2,4(r2)
   148b8:	18bff136 	bltu	r3,r2,14880 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   148bc:	0005883a 	mov	r2,zero
}
   148c0:	e037883a 	mov	sp,fp
   148c4:	df000017 	ldw	fp,0(sp)
   148c8:	dec00104 	addi	sp,sp,4
   148cc:	f800283a 	ret

000148d0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   148d0:	defffa04 	addi	sp,sp,-24
   148d4:	df000515 	stw	fp,20(sp)
   148d8:	df000504 	addi	fp,sp,20
   148dc:	e13ffd15 	stw	r4,-12(fp)
   148e0:	e17ffe15 	stw	r5,-8(fp)
   148e4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   148e8:	00bff9c4 	movi	r2,-25
   148ec:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   148f0:	e0bffe17 	ldw	r2,-8(fp)
   148f4:	10da8060 	cmpeqi	r3,r2,27137
   148f8:	1800031e 	bne	r3,zero,14908 <altera_avalon_jtag_uart_ioctl+0x38>
   148fc:	109a80a0 	cmpeqi	r2,r2,27138
   14900:	1000181e 	bne	r2,zero,14964 <altera_avalon_jtag_uart_ioctl+0x94>
   14904:	00002606 	br	149a0 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   14908:	e0bffd17 	ldw	r2,-12(fp)
   1490c:	10c00117 	ldw	r3,4(r2)
   14910:	00a00034 	movhi	r2,32768
   14914:	10bfffc4 	addi	r2,r2,-1
   14918:	18802226 	beq	r3,r2,149a4 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
   1491c:	e0bfff17 	ldw	r2,-4(fp)
   14920:	10800017 	ldw	r2,0(r2)
   14924:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   14928:	e0bffc17 	ldw	r2,-16(fp)
   1492c:	10800090 	cmplti	r2,r2,2
   14930:	1000061e 	bne	r2,zero,1494c <altera_avalon_jtag_uart_ioctl+0x7c>
   14934:	e0fffc17 	ldw	r3,-16(fp)
   14938:	00a00034 	movhi	r2,32768
   1493c:	10bfffc4 	addi	r2,r2,-1
   14940:	18800226 	beq	r3,r2,1494c <altera_avalon_jtag_uart_ioctl+0x7c>
   14944:	e0bffc17 	ldw	r2,-16(fp)
   14948:	00000206 	br	14954 <altera_avalon_jtag_uart_ioctl+0x84>
   1494c:	00a00034 	movhi	r2,32768
   14950:	10bfff84 	addi	r2,r2,-2
   14954:	e0fffd17 	ldw	r3,-12(fp)
   14958:	18800115 	stw	r2,4(r3)
      rc = 0;
   1495c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   14960:	00001006 	br	149a4 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   14964:	e0bffd17 	ldw	r2,-12(fp)
   14968:	10c00117 	ldw	r3,4(r2)
   1496c:	00a00034 	movhi	r2,32768
   14970:	10bfffc4 	addi	r2,r2,-1
   14974:	18800d26 	beq	r3,r2,149ac <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   14978:	e0bffd17 	ldw	r2,-12(fp)
   1497c:	10c00917 	ldw	r3,36(r2)
   14980:	e0bffd17 	ldw	r2,-12(fp)
   14984:	10800117 	ldw	r2,4(r2)
   14988:	1885803a 	cmpltu	r2,r3,r2
   1498c:	10c03fcc 	andi	r3,r2,255
   14990:	e0bfff17 	ldw	r2,-4(fp)
   14994:	10c00015 	stw	r3,0(r2)
      rc = 0;
   14998:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1499c:	00000306 	br	149ac <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
   149a0:	00000306 	br	149b0 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   149a4:	0001883a 	nop
   149a8:	00000106 	br	149b0 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   149ac:	0001883a 	nop

  default:
    break;
  }

  return rc;
   149b0:	e0bffb17 	ldw	r2,-20(fp)
}
   149b4:	e037883a 	mov	sp,fp
   149b8:	df000017 	ldw	fp,0(sp)
   149bc:	dec00104 	addi	sp,sp,4
   149c0:	f800283a 	ret

000149c4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   149c4:	defff304 	addi	sp,sp,-52
   149c8:	dfc00c15 	stw	ra,48(sp)
   149cc:	df000b15 	stw	fp,44(sp)
   149d0:	df000b04 	addi	fp,sp,44
   149d4:	e13ffc15 	stw	r4,-16(fp)
   149d8:	e17ffd15 	stw	r5,-12(fp)
   149dc:	e1bffe15 	stw	r6,-8(fp)
   149e0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   149e4:	e0bffd17 	ldw	r2,-12(fp)
   149e8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   149ec:	00004706 	br	14b0c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   149f0:	e0bffc17 	ldw	r2,-16(fp)
   149f4:	10800a17 	ldw	r2,40(r2)
   149f8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   149fc:	e0bffc17 	ldw	r2,-16(fp)
   14a00:	10800b17 	ldw	r2,44(r2)
   14a04:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   14a08:	e0fff717 	ldw	r3,-36(fp)
   14a0c:	e0bff817 	ldw	r2,-32(fp)
   14a10:	18800536 	bltu	r3,r2,14a28 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   14a14:	e0fff717 	ldw	r3,-36(fp)
   14a18:	e0bff817 	ldw	r2,-32(fp)
   14a1c:	1885c83a 	sub	r2,r3,r2
   14a20:	e0bff615 	stw	r2,-40(fp)
   14a24:	00000406 	br	14a38 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   14a28:	00c20004 	movi	r3,2048
   14a2c:	e0bff817 	ldw	r2,-32(fp)
   14a30:	1885c83a 	sub	r2,r3,r2
   14a34:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   14a38:	e0bff617 	ldw	r2,-40(fp)
   14a3c:	10001e26 	beq	r2,zero,14ab8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   14a40:	e0fffe17 	ldw	r3,-8(fp)
   14a44:	e0bff617 	ldw	r2,-40(fp)
   14a48:	1880022e 	bgeu	r3,r2,14a54 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   14a4c:	e0bffe17 	ldw	r2,-8(fp)
   14a50:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   14a54:	e0bff817 	ldw	r2,-32(fp)
   14a58:	10800e04 	addi	r2,r2,56
   14a5c:	e0fffc17 	ldw	r3,-16(fp)
   14a60:	1885883a 	add	r2,r3,r2
   14a64:	e13ff517 	ldw	r4,-44(fp)
   14a68:	100b883a 	mov	r5,r2
   14a6c:	e1bff617 	ldw	r6,-40(fp)
   14a70:	00109000 	call	10900 <memcpy>
      ptr   += n;
   14a74:	e0fff517 	ldw	r3,-44(fp)
   14a78:	e0bff617 	ldw	r2,-40(fp)
   14a7c:	1885883a 	add	r2,r3,r2
   14a80:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   14a84:	e0fffe17 	ldw	r3,-8(fp)
   14a88:	e0bff617 	ldw	r2,-40(fp)
   14a8c:	1885c83a 	sub	r2,r3,r2
   14a90:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14a94:	e0fff817 	ldw	r3,-32(fp)
   14a98:	e0bff617 	ldw	r2,-40(fp)
   14a9c:	1885883a 	add	r2,r3,r2
   14aa0:	10c1ffcc 	andi	r3,r2,2047
   14aa4:	e0bffc17 	ldw	r2,-16(fp)
   14aa8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   14aac:	e0bffe17 	ldw	r2,-8(fp)
   14ab0:	00bfcf16 	blt	zero,r2,149f0 <altera_avalon_jtag_uart_read+0x2c>
   14ab4:	00000106 	br	14abc <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   14ab8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   14abc:	e0fff517 	ldw	r3,-44(fp)
   14ac0:	e0bffd17 	ldw	r2,-12(fp)
   14ac4:	1880141e 	bne	r3,r2,14b18 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   14ac8:	e0bfff17 	ldw	r2,-4(fp)
   14acc:	1090000c 	andi	r2,r2,16384
   14ad0:	1000131e 	bne	r2,zero,14b20 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   14ad4:	0001883a 	nop
   14ad8:	e0bffc17 	ldw	r2,-16(fp)
   14adc:	10c00a17 	ldw	r3,40(r2)
   14ae0:	e0bff717 	ldw	r2,-36(fp)
   14ae4:	1880051e 	bne	r3,r2,14afc <altera_avalon_jtag_uart_read+0x138>
   14ae8:	e0bffc17 	ldw	r2,-16(fp)
   14aec:	10c00917 	ldw	r3,36(r2)
   14af0:	e0bffc17 	ldw	r2,-16(fp)
   14af4:	10800117 	ldw	r2,4(r2)
   14af8:	18bff736 	bltu	r3,r2,14ad8 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   14afc:	e0bffc17 	ldw	r2,-16(fp)
   14b00:	10c00a17 	ldw	r3,40(r2)
   14b04:	e0bff717 	ldw	r2,-36(fp)
   14b08:	18800726 	beq	r3,r2,14b28 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   14b0c:	e0bffe17 	ldw	r2,-8(fp)
   14b10:	00bfb716 	blt	zero,r2,149f0 <altera_avalon_jtag_uart_read+0x2c>
   14b14:	00000506 	br	14b2c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   14b18:	0001883a 	nop
   14b1c:	00000306 	br	14b2c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   14b20:	0001883a 	nop
   14b24:	00000106 	br	14b2c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   14b28:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   14b2c:	e0fff517 	ldw	r3,-44(fp)
   14b30:	e0bffd17 	ldw	r2,-12(fp)
   14b34:	18801726 	beq	r3,r2,14b94 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14b38:	0005303a 	rdctl	r2,status
   14b3c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14b40:	e0fffa17 	ldw	r3,-24(fp)
   14b44:	00bfff84 	movi	r2,-2
   14b48:	1884703a 	and	r2,r3,r2
   14b4c:	1001703a 	wrctl	status,r2
  
  return context;
   14b50:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   14b54:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   14b58:	e0bffc17 	ldw	r2,-16(fp)
   14b5c:	10800817 	ldw	r2,32(r2)
   14b60:	10c00054 	ori	r3,r2,1
   14b64:	e0bffc17 	ldw	r2,-16(fp)
   14b68:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   14b6c:	e0bffc17 	ldw	r2,-16(fp)
   14b70:	10800017 	ldw	r2,0(r2)
   14b74:	10800104 	addi	r2,r2,4
   14b78:	e0fffc17 	ldw	r3,-16(fp)
   14b7c:	18c00817 	ldw	r3,32(r3)
   14b80:	10c00035 	stwio	r3,0(r2)
   14b84:	e0bff917 	ldw	r2,-28(fp)
   14b88:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14b8c:	e0bffb17 	ldw	r2,-20(fp)
   14b90:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   14b94:	e0fff517 	ldw	r3,-44(fp)
   14b98:	e0bffd17 	ldw	r2,-12(fp)
   14b9c:	18800426 	beq	r3,r2,14bb0 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
   14ba0:	e0fff517 	ldw	r3,-44(fp)
   14ba4:	e0bffd17 	ldw	r2,-12(fp)
   14ba8:	1885c83a 	sub	r2,r3,r2
   14bac:	00000606 	br	14bc8 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
   14bb0:	e0bfff17 	ldw	r2,-4(fp)
   14bb4:	1090000c 	andi	r2,r2,16384
   14bb8:	10000226 	beq	r2,zero,14bc4 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
   14bbc:	00bffd44 	movi	r2,-11
   14bc0:	00000106 	br	14bc8 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
   14bc4:	00bffec4 	movi	r2,-5
}
   14bc8:	e037883a 	mov	sp,fp
   14bcc:	dfc00117 	ldw	ra,4(sp)
   14bd0:	df000017 	ldw	fp,0(sp)
   14bd4:	dec00204 	addi	sp,sp,8
   14bd8:	f800283a 	ret

00014bdc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   14bdc:	defff304 	addi	sp,sp,-52
   14be0:	dfc00c15 	stw	ra,48(sp)
   14be4:	df000b15 	stw	fp,44(sp)
   14be8:	df000b04 	addi	fp,sp,44
   14bec:	e13ffc15 	stw	r4,-16(fp)
   14bf0:	e17ffd15 	stw	r5,-12(fp)
   14bf4:	e1bffe15 	stw	r6,-8(fp)
   14bf8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   14bfc:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   14c00:	e0bffd17 	ldw	r2,-12(fp)
   14c04:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   14c08:	00003706 	br	14ce8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   14c0c:	e0bffc17 	ldw	r2,-16(fp)
   14c10:	10800c17 	ldw	r2,48(r2)
   14c14:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   14c18:	e0bffc17 	ldw	r2,-16(fp)
   14c1c:	10800d17 	ldw	r2,52(r2)
   14c20:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   14c24:	e0fff817 	ldw	r3,-32(fp)
   14c28:	e0bff517 	ldw	r2,-44(fp)
   14c2c:	1880062e 	bgeu	r3,r2,14c48 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   14c30:	e0fff517 	ldw	r3,-44(fp)
   14c34:	e0bff817 	ldw	r2,-32(fp)
   14c38:	1885c83a 	sub	r2,r3,r2
   14c3c:	10bfffc4 	addi	r2,r2,-1
   14c40:	e0bff615 	stw	r2,-40(fp)
   14c44:	00000b06 	br	14c74 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   14c48:	e0bff517 	ldw	r2,-44(fp)
   14c4c:	10000526 	beq	r2,zero,14c64 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   14c50:	00c20004 	movi	r3,2048
   14c54:	e0bff817 	ldw	r2,-32(fp)
   14c58:	1885c83a 	sub	r2,r3,r2
   14c5c:	e0bff615 	stw	r2,-40(fp)
   14c60:	00000406 	br	14c74 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   14c64:	00c1ffc4 	movi	r3,2047
   14c68:	e0bff817 	ldw	r2,-32(fp)
   14c6c:	1885c83a 	sub	r2,r3,r2
   14c70:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   14c74:	e0bff617 	ldw	r2,-40(fp)
   14c78:	10001e26 	beq	r2,zero,14cf4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   14c7c:	e0fffe17 	ldw	r3,-8(fp)
   14c80:	e0bff617 	ldw	r2,-40(fp)
   14c84:	1880022e 	bgeu	r3,r2,14c90 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   14c88:	e0bffe17 	ldw	r2,-8(fp)
   14c8c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   14c90:	e0bff817 	ldw	r2,-32(fp)
   14c94:	10820e04 	addi	r2,r2,2104
   14c98:	e0fffc17 	ldw	r3,-16(fp)
   14c9c:	1885883a 	add	r2,r3,r2
   14ca0:	1009883a 	mov	r4,r2
   14ca4:	e17ffd17 	ldw	r5,-12(fp)
   14ca8:	e1bff617 	ldw	r6,-40(fp)
   14cac:	00109000 	call	10900 <memcpy>
      ptr   += n;
   14cb0:	e0fffd17 	ldw	r3,-12(fp)
   14cb4:	e0bff617 	ldw	r2,-40(fp)
   14cb8:	1885883a 	add	r2,r3,r2
   14cbc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   14cc0:	e0fffe17 	ldw	r3,-8(fp)
   14cc4:	e0bff617 	ldw	r2,-40(fp)
   14cc8:	1885c83a 	sub	r2,r3,r2
   14ccc:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14cd0:	e0fff817 	ldw	r3,-32(fp)
   14cd4:	e0bff617 	ldw	r2,-40(fp)
   14cd8:	1885883a 	add	r2,r3,r2
   14cdc:	10c1ffcc 	andi	r3,r2,2047
   14ce0:	e0bffc17 	ldw	r2,-16(fp)
   14ce4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   14ce8:	e0bffe17 	ldw	r2,-8(fp)
   14cec:	00bfc716 	blt	zero,r2,14c0c <altera_avalon_jtag_uart_write+0x30>
   14cf0:	00000106 	br	14cf8 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   14cf4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14cf8:	0005303a 	rdctl	r2,status
   14cfc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14d00:	e0fffa17 	ldw	r3,-24(fp)
   14d04:	00bfff84 	movi	r2,-2
   14d08:	1884703a 	and	r2,r3,r2
   14d0c:	1001703a 	wrctl	status,r2
  
  return context;
   14d10:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   14d14:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   14d18:	e0bffc17 	ldw	r2,-16(fp)
   14d1c:	10800817 	ldw	r2,32(r2)
   14d20:	10c00094 	ori	r3,r2,2
   14d24:	e0bffc17 	ldw	r2,-16(fp)
   14d28:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   14d2c:	e0bffc17 	ldw	r2,-16(fp)
   14d30:	10800017 	ldw	r2,0(r2)
   14d34:	10800104 	addi	r2,r2,4
   14d38:	e0fffc17 	ldw	r3,-16(fp)
   14d3c:	18c00817 	ldw	r3,32(r3)
   14d40:	10c00035 	stwio	r3,0(r2)
   14d44:	e0bff917 	ldw	r2,-28(fp)
   14d48:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14d4c:	e0bffb17 	ldw	r2,-20(fp)
   14d50:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   14d54:	e0bffe17 	ldw	r2,-8(fp)
   14d58:	0080110e 	bge	zero,r2,14da0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   14d5c:	e0bfff17 	ldw	r2,-4(fp)
   14d60:	1090000c 	andi	r2,r2,16384
   14d64:	1000111e 	bne	r2,zero,14dac <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   14d68:	0001883a 	nop
   14d6c:	e0bffc17 	ldw	r2,-16(fp)
   14d70:	10c00d17 	ldw	r3,52(r2)
   14d74:	e0bff517 	ldw	r2,-44(fp)
   14d78:	1880051e 	bne	r3,r2,14d90 <altera_avalon_jtag_uart_write+0x1b4>
   14d7c:	e0bffc17 	ldw	r2,-16(fp)
   14d80:	10c00917 	ldw	r3,36(r2)
   14d84:	e0bffc17 	ldw	r2,-16(fp)
   14d88:	10800117 	ldw	r2,4(r2)
   14d8c:	18bff736 	bltu	r3,r2,14d6c <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   14d90:	e0bffc17 	ldw	r2,-16(fp)
   14d94:	10c00d17 	ldw	r3,52(r2)
   14d98:	e0bff517 	ldw	r2,-44(fp)
   14d9c:	18800526 	beq	r3,r2,14db4 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   14da0:	e0bffe17 	ldw	r2,-8(fp)
   14da4:	00bfd016 	blt	zero,r2,14ce8 <altera_avalon_jtag_uart_write+0x10c>
   14da8:	00000306 	br	14db8 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   14dac:	0001883a 	nop
   14db0:	00000106 	br	14db8 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
   14db4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   14db8:	e0fffd17 	ldw	r3,-12(fp)
   14dbc:	e0bff717 	ldw	r2,-36(fp)
   14dc0:	18800426 	beq	r3,r2,14dd4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   14dc4:	e0fffd17 	ldw	r3,-12(fp)
   14dc8:	e0bff717 	ldw	r2,-36(fp)
   14dcc:	1885c83a 	sub	r2,r3,r2
   14dd0:	00000606 	br	14dec <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   14dd4:	e0bfff17 	ldw	r2,-4(fp)
   14dd8:	1090000c 	andi	r2,r2,16384
   14ddc:	10000226 	beq	r2,zero,14de8 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   14de0:	00bffd44 	movi	r2,-11
   14de4:	00000106 	br	14dec <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   14de8:	00bffec4 	movi	r2,-5
}
   14dec:	e037883a 	mov	sp,fp
   14df0:	dfc00117 	ldw	ra,4(sp)
   14df4:	df000017 	ldw	fp,0(sp)
   14df8:	dec00204 	addi	sp,sp,8
   14dfc:	f800283a 	ret

00014e00 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   14e00:	defffa04 	addi	sp,sp,-24
   14e04:	dfc00515 	stw	ra,20(sp)
   14e08:	df000415 	stw	fp,16(sp)
   14e0c:	df000404 	addi	fp,sp,16
   14e10:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   14e14:	0007883a 	mov	r3,zero
   14e18:	e0bfff17 	ldw	r2,-4(fp)
   14e1c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   14e20:	e0bfff17 	ldw	r2,-4(fp)
   14e24:	10800104 	addi	r2,r2,4
   14e28:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14e2c:	0005303a 	rdctl	r2,status
   14e30:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14e34:	e0fffd17 	ldw	r3,-12(fp)
   14e38:	00bfff84 	movi	r2,-2
   14e3c:	1884703a 	and	r2,r3,r2
   14e40:	1001703a 	wrctl	status,r2
  
  return context;
   14e44:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   14e48:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   14e4c:	001596c0 	call	1596c <alt_tick>
   14e50:	e0bffc17 	ldw	r2,-16(fp)
   14e54:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14e58:	e0bffe17 	ldw	r2,-8(fp)
   14e5c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   14e60:	e037883a 	mov	sp,fp
   14e64:	dfc00117 	ldw	ra,4(sp)
   14e68:	df000017 	ldw	fp,0(sp)
   14e6c:	dec00204 	addi	sp,sp,8
   14e70:	f800283a 	ret

00014e74 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   14e74:	defff804 	addi	sp,sp,-32
   14e78:	dfc00715 	stw	ra,28(sp)
   14e7c:	df000615 	stw	fp,24(sp)
   14e80:	df000604 	addi	fp,sp,24
   14e84:	e13ffc15 	stw	r4,-16(fp)
   14e88:	e17ffd15 	stw	r5,-12(fp)
   14e8c:	e1bffe15 	stw	r6,-8(fp)
   14e90:	e1ffff15 	stw	r7,-4(fp)
   14e94:	e0bfff17 	ldw	r2,-4(fp)
   14e98:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   14e9c:	008000b4 	movhi	r2,2
   14ea0:	10a5c904 	addi	r2,r2,-26844
   14ea4:	10800017 	ldw	r2,0(r2)
   14ea8:	1000041e 	bne	r2,zero,14ebc <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   14eac:	008000b4 	movhi	r2,2
   14eb0:	10a5c904 	addi	r2,r2,-26844
   14eb4:	e0fffb17 	ldw	r3,-20(fp)
   14eb8:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   14ebc:	e0bffc17 	ldw	r2,-16(fp)
   14ec0:	10800104 	addi	r2,r2,4
   14ec4:	00c001c4 	movi	r3,7
   14ec8:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   14ecc:	d8000015 	stw	zero,0(sp)
   14ed0:	e13ffd17 	ldw	r4,-12(fp)
   14ed4:	e17ffe17 	ldw	r5,-8(fp)
   14ed8:	01800074 	movhi	r6,1
   14edc:	31938004 	addi	r6,r6,19968
   14ee0:	e1fffc17 	ldw	r7,-16(fp)
   14ee4:	001521c0 	call	1521c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   14ee8:	e037883a 	mov	sp,fp
   14eec:	dfc00117 	ldw	ra,4(sp)
   14ef0:	df000017 	ldw	fp,0(sp)
   14ef4:	dec00204 	addi	sp,sp,8
   14ef8:	f800283a 	ret

00014efc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   14efc:	defff504 	addi	sp,sp,-44
   14f00:	df000a15 	stw	fp,40(sp)
   14f04:	df000a04 	addi	fp,sp,40
   14f08:	e13ffc15 	stw	r4,-16(fp)
   14f0c:	e17ffd15 	stw	r5,-12(fp)
   14f10:	e1bffe15 	stw	r6,-8(fp)
   14f14:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   14f18:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   14f1c:	008000b4 	movhi	r2,2
   14f20:	10a5c904 	addi	r2,r2,-26844
   14f24:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   14f28:	10003f26 	beq	r2,zero,15028 <alt_alarm_start+0x12c>
  {
    if (alarm)
   14f2c:	e0bffc17 	ldw	r2,-16(fp)
   14f30:	10003b26 	beq	r2,zero,15020 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   14f34:	e0bffc17 	ldw	r2,-16(fp)
   14f38:	e0fffe17 	ldw	r3,-8(fp)
   14f3c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   14f40:	e0bffc17 	ldw	r2,-16(fp)
   14f44:	e0ffff17 	ldw	r3,-4(fp)
   14f48:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14f4c:	0005303a 	rdctl	r2,status
   14f50:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14f54:	e0fff817 	ldw	r3,-32(fp)
   14f58:	00bfff84 	movi	r2,-2
   14f5c:	1884703a 	and	r2,r3,r2
   14f60:	1001703a 	wrctl	status,r2
  
  return context;
   14f64:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   14f68:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   14f6c:	008000b4 	movhi	r2,2
   14f70:	10a5ca04 	addi	r2,r2,-26840
   14f74:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   14f78:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   14f7c:	e0fffd17 	ldw	r3,-12(fp)
   14f80:	e0bff617 	ldw	r2,-40(fp)
   14f84:	1885883a 	add	r2,r3,r2
   14f88:	10c00044 	addi	r3,r2,1
   14f8c:	e0bffc17 	ldw	r2,-16(fp)
   14f90:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   14f94:	e0bffc17 	ldw	r2,-16(fp)
   14f98:	10c00217 	ldw	r3,8(r2)
   14f9c:	e0bff617 	ldw	r2,-40(fp)
   14fa0:	1880042e 	bgeu	r3,r2,14fb4 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   14fa4:	e0bffc17 	ldw	r2,-16(fp)
   14fa8:	00c00044 	movi	r3,1
   14fac:	10c00405 	stb	r3,16(r2)
   14fb0:	00000206 	br	14fbc <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   14fb4:	e0bffc17 	ldw	r2,-16(fp)
   14fb8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   14fbc:	e0bffc17 	ldw	r2,-16(fp)
   14fc0:	00c00074 	movhi	r3,1
   14fc4:	18df1d04 	addi	r3,r3,31860
   14fc8:	e0fff915 	stw	r3,-28(fp)
   14fcc:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   14fd0:	e0bffa17 	ldw	r2,-24(fp)
   14fd4:	e0fff917 	ldw	r3,-28(fp)
   14fd8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   14fdc:	e0bff917 	ldw	r2,-28(fp)
   14fe0:	10c00017 	ldw	r3,0(r2)
   14fe4:	e0bffa17 	ldw	r2,-24(fp)
   14fe8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   14fec:	e0bff917 	ldw	r2,-28(fp)
   14ff0:	10800017 	ldw	r2,0(r2)
   14ff4:	e0fffa17 	ldw	r3,-24(fp)
   14ff8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   14ffc:	e0bff917 	ldw	r2,-28(fp)
   15000:	e0fffa17 	ldw	r3,-24(fp)
   15004:	10c00015 	stw	r3,0(r2)
   15008:	e0bff717 	ldw	r2,-36(fp)
   1500c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15010:	e0bffb17 	ldw	r2,-20(fp)
   15014:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   15018:	0005883a 	mov	r2,zero
   1501c:	00000306 	br	1502c <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   15020:	00bffa84 	movi	r2,-22
   15024:	00000106 	br	1502c <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   15028:	00bfde84 	movi	r2,-134
  }
}
   1502c:	e037883a 	mov	sp,fp
   15030:	df000017 	ldw	fp,0(sp)
   15034:	dec00104 	addi	sp,sp,4
   15038:	f800283a 	ret

0001503c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1503c:	deffff04 	addi	sp,sp,-4
   15040:	df000015 	stw	fp,0(sp)
   15044:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   15048:	e037883a 	mov	sp,fp
   1504c:	df000017 	ldw	fp,0(sp)
   15050:	dec00104 	addi	sp,sp,4
   15054:	f800283a 	ret

00015058 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   15058:	defffe04 	addi	sp,sp,-8
   1505c:	dfc00115 	stw	ra,4(sp)
   15060:	df000015 	stw	fp,0(sp)
   15064:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   15068:	00800074 	movhi	r2,1
   1506c:	109f1a04 	addi	r2,r2,31848
   15070:	10800017 	ldw	r2,0(r2)
   15074:	10000526 	beq	r2,zero,1508c <alt_get_errno+0x34>
   15078:	00800074 	movhi	r2,1
   1507c:	109f1a04 	addi	r2,r2,31848
   15080:	10800017 	ldw	r2,0(r2)
   15084:	103ee83a 	callr	r2
   15088:	00000206 	br	15094 <alt_get_errno+0x3c>
   1508c:	008000b4 	movhi	r2,2
   15090:	10a5c404 	addi	r2,r2,-26864
}
   15094:	e037883a 	mov	sp,fp
   15098:	dfc00117 	ldw	ra,4(sp)
   1509c:	df000017 	ldw	fp,0(sp)
   150a0:	dec00204 	addi	sp,sp,8
   150a4:	f800283a 	ret

000150a8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   150a8:	defffa04 	addi	sp,sp,-24
   150ac:	dfc00515 	stw	ra,20(sp)
   150b0:	df000415 	stw	fp,16(sp)
   150b4:	df000404 	addi	fp,sp,16
   150b8:	e13ffe15 	stw	r4,-8(fp)
   150bc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   150c0:	e0bffe17 	ldw	r2,-8(fp)
   150c4:	10000326 	beq	r2,zero,150d4 <alt_dev_llist_insert+0x2c>
   150c8:	e0bffe17 	ldw	r2,-8(fp)
   150cc:	10800217 	ldw	r2,8(r2)
   150d0:	1000051e 	bne	r2,zero,150e8 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   150d4:	00150580 	call	15058 <alt_get_errno>
   150d8:	00c00584 	movi	r3,22
   150dc:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   150e0:	00bffa84 	movi	r2,-22
   150e4:	00001306 	br	15134 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   150e8:	e0bffe17 	ldw	r2,-8(fp)
   150ec:	e0ffff17 	ldw	r3,-4(fp)
   150f0:	e0fffc15 	stw	r3,-16(fp)
   150f4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   150f8:	e0bffd17 	ldw	r2,-12(fp)
   150fc:	e0fffc17 	ldw	r3,-16(fp)
   15100:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   15104:	e0bffc17 	ldw	r2,-16(fp)
   15108:	10c00017 	ldw	r3,0(r2)
   1510c:	e0bffd17 	ldw	r2,-12(fp)
   15110:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   15114:	e0bffc17 	ldw	r2,-16(fp)
   15118:	10800017 	ldw	r2,0(r2)
   1511c:	e0fffd17 	ldw	r3,-12(fp)
   15120:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   15124:	e0bffc17 	ldw	r2,-16(fp)
   15128:	e0fffd17 	ldw	r3,-12(fp)
   1512c:	10c00015 	stw	r3,0(r2)

  return 0;  
   15130:	0005883a 	mov	r2,zero
}
   15134:	e037883a 	mov	sp,fp
   15138:	dfc00117 	ldw	ra,4(sp)
   1513c:	df000017 	ldw	fp,0(sp)
   15140:	dec00204 	addi	sp,sp,8
   15144:	f800283a 	ret

00015148 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   15148:	defffd04 	addi	sp,sp,-12
   1514c:	dfc00215 	stw	ra,8(sp)
   15150:	df000115 	stw	fp,4(sp)
   15154:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   15158:	00800074 	movhi	r2,1
   1515c:	10983604 	addi	r2,r2,24792
   15160:	e0bfff15 	stw	r2,-4(fp)
   15164:	00000606 	br	15180 <_do_ctors+0x38>
        (*ctor) (); 
   15168:	e0bfff17 	ldw	r2,-4(fp)
   1516c:	10800017 	ldw	r2,0(r2)
   15170:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   15174:	e0bfff17 	ldw	r2,-4(fp)
   15178:	10bfff04 	addi	r2,r2,-4
   1517c:	e0bfff15 	stw	r2,-4(fp)
   15180:	e0ffff17 	ldw	r3,-4(fp)
   15184:	00800074 	movhi	r2,1
   15188:	10983704 	addi	r2,r2,24796
   1518c:	18bff62e 	bgeu	r3,r2,15168 <_do_ctors+0x20>
        (*ctor) (); 
}
   15190:	e037883a 	mov	sp,fp
   15194:	dfc00117 	ldw	ra,4(sp)
   15198:	df000017 	ldw	fp,0(sp)
   1519c:	dec00204 	addi	sp,sp,8
   151a0:	f800283a 	ret

000151a4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   151a4:	defffd04 	addi	sp,sp,-12
   151a8:	dfc00215 	stw	ra,8(sp)
   151ac:	df000115 	stw	fp,4(sp)
   151b0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   151b4:	00800074 	movhi	r2,1
   151b8:	10983604 	addi	r2,r2,24792
   151bc:	e0bfff15 	stw	r2,-4(fp)
   151c0:	00000606 	br	151dc <_do_dtors+0x38>
        (*dtor) (); 
   151c4:	e0bfff17 	ldw	r2,-4(fp)
   151c8:	10800017 	ldw	r2,0(r2)
   151cc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   151d0:	e0bfff17 	ldw	r2,-4(fp)
   151d4:	10bfff04 	addi	r2,r2,-4
   151d8:	e0bfff15 	stw	r2,-4(fp)
   151dc:	e0ffff17 	ldw	r3,-4(fp)
   151e0:	00800074 	movhi	r2,1
   151e4:	10983704 	addi	r2,r2,24796
   151e8:	18bff62e 	bgeu	r3,r2,151c4 <_do_dtors+0x20>
        (*dtor) (); 
}
   151ec:	e037883a 	mov	sp,fp
   151f0:	dfc00117 	ldw	ra,4(sp)
   151f4:	df000017 	ldw	fp,0(sp)
   151f8:	dec00204 	addi	sp,sp,8
   151fc:	f800283a 	ret

00015200 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   15200:	deffff04 	addi	sp,sp,-4
   15204:	df000015 	stw	fp,0(sp)
   15208:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   1520c:	e037883a 	mov	sp,fp
   15210:	df000017 	ldw	fp,0(sp)
   15214:	dec00104 	addi	sp,sp,4
   15218:	f800283a 	ret

0001521c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   1521c:	defff904 	addi	sp,sp,-28
   15220:	dfc00615 	stw	ra,24(sp)
   15224:	df000515 	stw	fp,20(sp)
   15228:	df000504 	addi	fp,sp,20
   1522c:	e13ffc15 	stw	r4,-16(fp)
   15230:	e17ffd15 	stw	r5,-12(fp)
   15234:	e1bffe15 	stw	r6,-8(fp)
   15238:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   1523c:	e0800217 	ldw	r2,8(fp)
   15240:	d8800015 	stw	r2,0(sp)
   15244:	e13ffc17 	ldw	r4,-16(fp)
   15248:	e17ffd17 	ldw	r5,-12(fp)
   1524c:	e1bffe17 	ldw	r6,-8(fp)
   15250:	e1ffff17 	ldw	r7,-4(fp)
   15254:	00153f40 	call	153f4 <alt_iic_isr_register>
}  
   15258:	e037883a 	mov	sp,fp
   1525c:	dfc00117 	ldw	ra,4(sp)
   15260:	df000017 	ldw	fp,0(sp)
   15264:	dec00204 	addi	sp,sp,8
   15268:	f800283a 	ret

0001526c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   1526c:	defff904 	addi	sp,sp,-28
   15270:	df000615 	stw	fp,24(sp)
   15274:	df000604 	addi	fp,sp,24
   15278:	e13ffe15 	stw	r4,-8(fp)
   1527c:	e17fff15 	stw	r5,-4(fp)
   15280:	e0bfff17 	ldw	r2,-4(fp)
   15284:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15288:	0005303a 	rdctl	r2,status
   1528c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15290:	e0fffb17 	ldw	r3,-20(fp)
   15294:	00bfff84 	movi	r2,-2
   15298:	1884703a 	and	r2,r3,r2
   1529c:	1001703a 	wrctl	status,r2
  
  return context;
   152a0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   152a4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   152a8:	e0bffa17 	ldw	r2,-24(fp)
   152ac:	00c00044 	movi	r3,1
   152b0:	1884983a 	sll	r2,r3,r2
   152b4:	1007883a 	mov	r3,r2
   152b8:	008000b4 	movhi	r2,2
   152bc:	10a5c804 	addi	r2,r2,-26848
   152c0:	10800017 	ldw	r2,0(r2)
   152c4:	1886b03a 	or	r3,r3,r2
   152c8:	008000b4 	movhi	r2,2
   152cc:	10a5c804 	addi	r2,r2,-26848
   152d0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   152d4:	008000b4 	movhi	r2,2
   152d8:	10a5c804 	addi	r2,r2,-26848
   152dc:	10800017 	ldw	r2,0(r2)
   152e0:	100170fa 	wrctl	ienable,r2
   152e4:	e0bffc17 	ldw	r2,-16(fp)
   152e8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   152ec:	e0bffd17 	ldw	r2,-12(fp)
   152f0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   152f4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   152f8:	e037883a 	mov	sp,fp
   152fc:	df000017 	ldw	fp,0(sp)
   15300:	dec00104 	addi	sp,sp,4
   15304:	f800283a 	ret

00015308 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   15308:	defff904 	addi	sp,sp,-28
   1530c:	df000615 	stw	fp,24(sp)
   15310:	df000604 	addi	fp,sp,24
   15314:	e13ffe15 	stw	r4,-8(fp)
   15318:	e17fff15 	stw	r5,-4(fp)
   1531c:	e0bfff17 	ldw	r2,-4(fp)
   15320:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15324:	0005303a 	rdctl	r2,status
   15328:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1532c:	e0fffb17 	ldw	r3,-20(fp)
   15330:	00bfff84 	movi	r2,-2
   15334:	1884703a 	and	r2,r3,r2
   15338:	1001703a 	wrctl	status,r2
  
  return context;
   1533c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   15340:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   15344:	e0bffa17 	ldw	r2,-24(fp)
   15348:	00c00044 	movi	r3,1
   1534c:	1884983a 	sll	r2,r3,r2
   15350:	0084303a 	nor	r2,zero,r2
   15354:	1007883a 	mov	r3,r2
   15358:	008000b4 	movhi	r2,2
   1535c:	10a5c804 	addi	r2,r2,-26848
   15360:	10800017 	ldw	r2,0(r2)
   15364:	1886703a 	and	r3,r3,r2
   15368:	008000b4 	movhi	r2,2
   1536c:	10a5c804 	addi	r2,r2,-26848
   15370:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   15374:	008000b4 	movhi	r2,2
   15378:	10a5c804 	addi	r2,r2,-26848
   1537c:	10800017 	ldw	r2,0(r2)
   15380:	100170fa 	wrctl	ienable,r2
   15384:	e0bffc17 	ldw	r2,-16(fp)
   15388:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1538c:	e0bffd17 	ldw	r2,-12(fp)
   15390:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   15394:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   15398:	e037883a 	mov	sp,fp
   1539c:	df000017 	ldw	fp,0(sp)
   153a0:	dec00104 	addi	sp,sp,4
   153a4:	f800283a 	ret

000153a8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   153a8:	defffc04 	addi	sp,sp,-16
   153ac:	df000315 	stw	fp,12(sp)
   153b0:	df000304 	addi	fp,sp,12
   153b4:	e13ffe15 	stw	r4,-8(fp)
   153b8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   153bc:	000530fa 	rdctl	r2,ienable
   153c0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   153c4:	e0bfff17 	ldw	r2,-4(fp)
   153c8:	00c00044 	movi	r3,1
   153cc:	1884983a 	sll	r2,r3,r2
   153d0:	1007883a 	mov	r3,r2
   153d4:	e0bffd17 	ldw	r2,-12(fp)
   153d8:	1884703a 	and	r2,r3,r2
   153dc:	1004c03a 	cmpne	r2,r2,zero
   153e0:	10803fcc 	andi	r2,r2,255
}
   153e4:	e037883a 	mov	sp,fp
   153e8:	df000017 	ldw	fp,0(sp)
   153ec:	dec00104 	addi	sp,sp,4
   153f0:	f800283a 	ret

000153f4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   153f4:	defff504 	addi	sp,sp,-44
   153f8:	dfc00a15 	stw	ra,40(sp)
   153fc:	df000915 	stw	fp,36(sp)
   15400:	df000904 	addi	fp,sp,36
   15404:	e13ffc15 	stw	r4,-16(fp)
   15408:	e17ffd15 	stw	r5,-12(fp)
   1540c:	e1bffe15 	stw	r6,-8(fp)
   15410:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   15414:	00bffa84 	movi	r2,-22
   15418:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   1541c:	e0bffd17 	ldw	r2,-12(fp)
   15420:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   15424:	e0bff817 	ldw	r2,-32(fp)
   15428:	10800808 	cmpgei	r2,r2,32
   1542c:	1000271e 	bne	r2,zero,154cc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15430:	0005303a 	rdctl	r2,status
   15434:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15438:	e0fffa17 	ldw	r3,-24(fp)
   1543c:	00bfff84 	movi	r2,-2
   15440:	1884703a 	and	r2,r3,r2
   15444:	1001703a 	wrctl	status,r2
  
  return context;
   15448:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   1544c:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   15450:	00c000b4 	movhi	r3,2
   15454:	18e65504 	addi	r3,r3,-26284
   15458:	e0bff817 	ldw	r2,-32(fp)
   1545c:	100490fa 	slli	r2,r2,3
   15460:	1885883a 	add	r2,r3,r2
   15464:	e0fffe17 	ldw	r3,-8(fp)
   15468:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   1546c:	00c000b4 	movhi	r3,2
   15470:	18e65504 	addi	r3,r3,-26284
   15474:	e0bff817 	ldw	r2,-32(fp)
   15478:	100490fa 	slli	r2,r2,3
   1547c:	1885883a 	add	r2,r3,r2
   15480:	10800104 	addi	r2,r2,4
   15484:	e0ffff17 	ldw	r3,-4(fp)
   15488:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   1548c:	e0bffe17 	ldw	r2,-8(fp)
   15490:	10000526 	beq	r2,zero,154a8 <alt_iic_isr_register+0xb4>
   15494:	e0bff817 	ldw	r2,-32(fp)
   15498:	e13ffc17 	ldw	r4,-16(fp)
   1549c:	100b883a 	mov	r5,r2
   154a0:	001526c0 	call	1526c <alt_ic_irq_enable>
   154a4:	00000406 	br	154b8 <alt_iic_isr_register+0xc4>
   154a8:	e0bff817 	ldw	r2,-32(fp)
   154ac:	e13ffc17 	ldw	r4,-16(fp)
   154b0:	100b883a 	mov	r5,r2
   154b4:	00153080 	call	15308 <alt_ic_irq_disable>
   154b8:	e0bff715 	stw	r2,-36(fp)
   154bc:	e0bff917 	ldw	r2,-28(fp)
   154c0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   154c4:	e0bffb17 	ldw	r2,-20(fp)
   154c8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   154cc:	e0bff717 	ldw	r2,-36(fp)
}
   154d0:	e037883a 	mov	sp,fp
   154d4:	dfc00117 	ldw	ra,4(sp)
   154d8:	df000017 	ldw	fp,0(sp)
   154dc:	dec00204 	addi	sp,sp,8
   154e0:	f800283a 	ret

000154e4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   154e4:	defff804 	addi	sp,sp,-32
   154e8:	dfc00715 	stw	ra,28(sp)
   154ec:	df000615 	stw	fp,24(sp)
   154f0:	dc000515 	stw	r16,20(sp)
   154f4:	df000504 	addi	fp,sp,20
   154f8:	e13ffc15 	stw	r4,-16(fp)
   154fc:	e17ffd15 	stw	r5,-12(fp)
   15500:	e1bffe15 	stw	r6,-8(fp)
   15504:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   15508:	e13ffd17 	ldw	r4,-12(fp)
   1550c:	e17ffe17 	ldw	r5,-8(fp)
   15510:	e1bfff17 	ldw	r6,-4(fp)
   15514:	001577c0 	call	1577c <open>
   15518:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   1551c:	e0bffb17 	ldw	r2,-20(fp)
   15520:	10002216 	blt	r2,zero,155ac <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   15524:	04000074 	movhi	r16,1
   15528:	841a9904 	addi	r16,r16,27236
   1552c:	e0bffb17 	ldw	r2,-20(fp)
   15530:	1009883a 	mov	r4,r2
   15534:	01400304 	movi	r5,12
   15538:	00108d80 	call	108d8 <__mulsi3>
   1553c:	8085883a 	add	r2,r16,r2
   15540:	10c00017 	ldw	r3,0(r2)
   15544:	e0bffc17 	ldw	r2,-16(fp)
   15548:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   1554c:	04000074 	movhi	r16,1
   15550:	841a9904 	addi	r16,r16,27236
   15554:	e0bffb17 	ldw	r2,-20(fp)
   15558:	1009883a 	mov	r4,r2
   1555c:	01400304 	movi	r5,12
   15560:	00108d80 	call	108d8 <__mulsi3>
   15564:	8085883a 	add	r2,r16,r2
   15568:	10800104 	addi	r2,r2,4
   1556c:	10c00017 	ldw	r3,0(r2)
   15570:	e0bffc17 	ldw	r2,-16(fp)
   15574:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   15578:	04000074 	movhi	r16,1
   1557c:	841a9904 	addi	r16,r16,27236
   15580:	e0bffb17 	ldw	r2,-20(fp)
   15584:	1009883a 	mov	r4,r2
   15588:	01400304 	movi	r5,12
   1558c:	00108d80 	call	108d8 <__mulsi3>
   15590:	8085883a 	add	r2,r16,r2
   15594:	10800204 	addi	r2,r2,8
   15598:	10c00017 	ldw	r3,0(r2)
   1559c:	e0bffc17 	ldw	r2,-16(fp)
   155a0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   155a4:	e13ffb17 	ldw	r4,-20(fp)
   155a8:	0013b640 	call	13b64 <alt_release_fd>
  }
} 
   155ac:	e037883a 	mov	sp,fp
   155b0:	dfc00217 	ldw	ra,8(sp)
   155b4:	df000117 	ldw	fp,4(sp)
   155b8:	dc000017 	ldw	r16,0(sp)
   155bc:	dec00304 	addi	sp,sp,12
   155c0:	f800283a 	ret

000155c4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   155c4:	defffb04 	addi	sp,sp,-20
   155c8:	dfc00415 	stw	ra,16(sp)
   155cc:	df000315 	stw	fp,12(sp)
   155d0:	df000304 	addi	fp,sp,12
   155d4:	e13ffd15 	stw	r4,-12(fp)
   155d8:	e17ffe15 	stw	r5,-8(fp)
   155dc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   155e0:	01000074 	movhi	r4,1
   155e4:	211a9c04 	addi	r4,r4,27248
   155e8:	e17ffd17 	ldw	r5,-12(fp)
   155ec:	01800044 	movi	r6,1
   155f0:	01c07fc4 	movi	r7,511
   155f4:	00154e40 	call	154e4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   155f8:	01000074 	movhi	r4,1
   155fc:	211a9904 	addi	r4,r4,27236
   15600:	e17ffe17 	ldw	r5,-8(fp)
   15604:	000d883a 	mov	r6,zero
   15608:	01c07fc4 	movi	r7,511
   1560c:	00154e40 	call	154e4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   15610:	01000074 	movhi	r4,1
   15614:	211a9f04 	addi	r4,r4,27260
   15618:	e17fff17 	ldw	r5,-4(fp)
   1561c:	01800044 	movi	r6,1
   15620:	01c07fc4 	movi	r7,511
   15624:	00154e40 	call	154e4 <alt_open_fd>
}  
   15628:	e037883a 	mov	sp,fp
   1562c:	dfc00117 	ldw	ra,4(sp)
   15630:	df000017 	ldw	fp,0(sp)
   15634:	dec00204 	addi	sp,sp,8
   15638:	f800283a 	ret

0001563c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1563c:	defffe04 	addi	sp,sp,-8
   15640:	dfc00115 	stw	ra,4(sp)
   15644:	df000015 	stw	fp,0(sp)
   15648:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1564c:	00800074 	movhi	r2,1
   15650:	109f1a04 	addi	r2,r2,31848
   15654:	10800017 	ldw	r2,0(r2)
   15658:	10000526 	beq	r2,zero,15670 <alt_get_errno+0x34>
   1565c:	00800074 	movhi	r2,1
   15660:	109f1a04 	addi	r2,r2,31848
   15664:	10800017 	ldw	r2,0(r2)
   15668:	103ee83a 	callr	r2
   1566c:	00000206 	br	15678 <alt_get_errno+0x3c>
   15670:	008000b4 	movhi	r2,2
   15674:	10a5c404 	addi	r2,r2,-26864
}
   15678:	e037883a 	mov	sp,fp
   1567c:	dfc00117 	ldw	ra,4(sp)
   15680:	df000017 	ldw	fp,0(sp)
   15684:	dec00204 	addi	sp,sp,8
   15688:	f800283a 	ret

0001568c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1568c:	defffb04 	addi	sp,sp,-20
   15690:	dfc00415 	stw	ra,16(sp)
   15694:	df000315 	stw	fp,12(sp)
   15698:	dc000215 	stw	r16,8(sp)
   1569c:	df000204 	addi	fp,sp,8
   156a0:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   156a4:	e0bfff17 	ldw	r2,-4(fp)
   156a8:	10800217 	ldw	r2,8(r2)
   156ac:	10d00034 	orhi	r3,r2,16384
   156b0:	e0bfff17 	ldw	r2,-4(fp)
   156b4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   156b8:	e03ffe15 	stw	zero,-8(fp)
   156bc:	00002206 	br	15748 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   156c0:	04000074 	movhi	r16,1
   156c4:	841a9904 	addi	r16,r16,27236
   156c8:	e0bffe17 	ldw	r2,-8(fp)
   156cc:	1009883a 	mov	r4,r2
   156d0:	01400304 	movi	r5,12
   156d4:	00108d80 	call	108d8 <__mulsi3>
   156d8:	8085883a 	add	r2,r16,r2
   156dc:	10c00017 	ldw	r3,0(r2)
   156e0:	e0bfff17 	ldw	r2,-4(fp)
   156e4:	10800017 	ldw	r2,0(r2)
   156e8:	1880141e 	bne	r3,r2,1573c <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   156ec:	04000074 	movhi	r16,1
   156f0:	841a9904 	addi	r16,r16,27236
   156f4:	e0bffe17 	ldw	r2,-8(fp)
   156f8:	1009883a 	mov	r4,r2
   156fc:	01400304 	movi	r5,12
   15700:	00108d80 	call	108d8 <__mulsi3>
   15704:	8085883a 	add	r2,r16,r2
   15708:	10800204 	addi	r2,r2,8
   1570c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   15710:	10000a0e 	bge	r2,zero,1573c <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   15714:	e13ffe17 	ldw	r4,-8(fp)
   15718:	01400304 	movi	r5,12
   1571c:	00108d80 	call	108d8 <__mulsi3>
   15720:	00c00074 	movhi	r3,1
   15724:	18da9904 	addi	r3,r3,27236
   15728:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1572c:	e0bfff17 	ldw	r2,-4(fp)
   15730:	18800226 	beq	r3,r2,1573c <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   15734:	00bffcc4 	movi	r2,-13
   15738:	00000a06 	br	15764 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1573c:	e0bffe17 	ldw	r2,-8(fp)
   15740:	10800044 	addi	r2,r2,1
   15744:	e0bffe15 	stw	r2,-8(fp)
   15748:	00800074 	movhi	r2,1
   1574c:	109f1904 	addi	r2,r2,31844
   15750:	10800017 	ldw	r2,0(r2)
   15754:	1007883a 	mov	r3,r2
   15758:	e0bffe17 	ldw	r2,-8(fp)
   1575c:	18bfd82e 	bgeu	r3,r2,156c0 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   15760:	0005883a 	mov	r2,zero
}
   15764:	e037883a 	mov	sp,fp
   15768:	dfc00217 	ldw	ra,8(sp)
   1576c:	df000117 	ldw	fp,4(sp)
   15770:	dc000017 	ldw	r16,0(sp)
   15774:	dec00304 	addi	sp,sp,12
   15778:	f800283a 	ret

0001577c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1577c:	defff604 	addi	sp,sp,-40
   15780:	dfc00915 	stw	ra,36(sp)
   15784:	df000815 	stw	fp,32(sp)
   15788:	df000804 	addi	fp,sp,32
   1578c:	e13ffd15 	stw	r4,-12(fp)
   15790:	e17ffe15 	stw	r5,-8(fp)
   15794:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   15798:	00bfffc4 	movi	r2,-1
   1579c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   157a0:	00bffb44 	movi	r2,-19
   157a4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   157a8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   157ac:	e13ffd17 	ldw	r4,-12(fp)
   157b0:	01400074 	movhi	r5,1
   157b4:	295f1704 	addi	r5,r5,31836
   157b8:	0015a900 	call	15a90 <alt_find_dev>
   157bc:	e0bff815 	stw	r2,-32(fp)
   157c0:	e0bff817 	ldw	r2,-32(fp)
   157c4:	1000051e 	bne	r2,zero,157dc <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   157c8:	e13ffd17 	ldw	r4,-12(fp)
   157cc:	0015b200 	call	15b20 <alt_find_file>
   157d0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   157d4:	00800044 	movi	r2,1
   157d8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   157dc:	e0bff817 	ldw	r2,-32(fp)
   157e0:	10002a26 	beq	r2,zero,1588c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   157e4:	e13ff817 	ldw	r4,-32(fp)
   157e8:	0015c340 	call	15c34 <alt_get_fd>
   157ec:	e0bff915 	stw	r2,-28(fp)
   157f0:	e0bff917 	ldw	r2,-28(fp)
   157f4:	1000030e 	bge	r2,zero,15804 <open+0x88>
    {
      status = index;
   157f8:	e0bff917 	ldw	r2,-28(fp)
   157fc:	e0bffa15 	stw	r2,-24(fp)
   15800:	00002406 	br	15894 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   15804:	e13ff917 	ldw	r4,-28(fp)
   15808:	01400304 	movi	r5,12
   1580c:	00108d80 	call	108d8 <__mulsi3>
   15810:	00c00074 	movhi	r3,1
   15814:	18da9904 	addi	r3,r3,27236
   15818:	10c5883a 	add	r2,r2,r3
   1581c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   15820:	e0fffe17 	ldw	r3,-8(fp)
   15824:	00900034 	movhi	r2,16384
   15828:	10bfffc4 	addi	r2,r2,-1
   1582c:	1886703a 	and	r3,r3,r2
   15830:	e0bffc17 	ldw	r2,-16(fp)
   15834:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   15838:	e0bffb17 	ldw	r2,-20(fp)
   1583c:	1000051e 	bne	r2,zero,15854 <open+0xd8>
   15840:	e13ffc17 	ldw	r4,-16(fp)
   15844:	001568c0 	call	1568c <alt_file_locked>
   15848:	e0bffa15 	stw	r2,-24(fp)
   1584c:	e0bffa17 	ldw	r2,-24(fp)
   15850:	10001016 	blt	r2,zero,15894 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   15854:	e0bff817 	ldw	r2,-32(fp)
   15858:	10800317 	ldw	r2,12(r2)
   1585c:	10000826 	beq	r2,zero,15880 <open+0x104>
   15860:	e0bff817 	ldw	r2,-32(fp)
   15864:	10800317 	ldw	r2,12(r2)
   15868:	e13ffc17 	ldw	r4,-16(fp)
   1586c:	e17ffd17 	ldw	r5,-12(fp)
   15870:	e1bffe17 	ldw	r6,-8(fp)
   15874:	e1ffff17 	ldw	r7,-4(fp)
   15878:	103ee83a 	callr	r2
   1587c:	00000106 	br	15884 <open+0x108>
   15880:	0005883a 	mov	r2,zero
   15884:	e0bffa15 	stw	r2,-24(fp)
   15888:	00000206 	br	15894 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1588c:	00bffb44 	movi	r2,-19
   15890:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   15894:	e0bffa17 	ldw	r2,-24(fp)
   15898:	1000080e 	bge	r2,zero,158bc <open+0x140>
  {
    alt_release_fd (index);  
   1589c:	e13ff917 	ldw	r4,-28(fp)
   158a0:	0013b640 	call	13b64 <alt_release_fd>
    ALT_ERRNO = -status;
   158a4:	001563c0 	call	1563c <alt_get_errno>
   158a8:	e0fffa17 	ldw	r3,-24(fp)
   158ac:	00c7c83a 	sub	r3,zero,r3
   158b0:	10c00015 	stw	r3,0(r2)
    return -1;
   158b4:	00bfffc4 	movi	r2,-1
   158b8:	00000106 	br	158c0 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   158bc:	e0bff917 	ldw	r2,-28(fp)
}
   158c0:	e037883a 	mov	sp,fp
   158c4:	dfc00117 	ldw	ra,4(sp)
   158c8:	df000017 	ldw	fp,0(sp)
   158cc:	dec00204 	addi	sp,sp,8
   158d0:	f800283a 	ret

000158d4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   158d4:	defffa04 	addi	sp,sp,-24
   158d8:	df000515 	stw	fp,20(sp)
   158dc:	df000504 	addi	fp,sp,20
   158e0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   158e4:	0005303a 	rdctl	r2,status
   158e8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   158ec:	e0fffc17 	ldw	r3,-16(fp)
   158f0:	00bfff84 	movi	r2,-2
   158f4:	1884703a 	and	r2,r3,r2
   158f8:	1001703a 	wrctl	status,r2
  
  return context;
   158fc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   15900:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   15904:	e0bfff17 	ldw	r2,-4(fp)
   15908:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1590c:	e0bffd17 	ldw	r2,-12(fp)
   15910:	10800017 	ldw	r2,0(r2)
   15914:	e0fffd17 	ldw	r3,-12(fp)
   15918:	18c00117 	ldw	r3,4(r3)
   1591c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   15920:	e0bffd17 	ldw	r2,-12(fp)
   15924:	10800117 	ldw	r2,4(r2)
   15928:	e0fffd17 	ldw	r3,-12(fp)
   1592c:	18c00017 	ldw	r3,0(r3)
   15930:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   15934:	e0bffd17 	ldw	r2,-12(fp)
   15938:	e0fffd17 	ldw	r3,-12(fp)
   1593c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   15940:	e0bffd17 	ldw	r2,-12(fp)
   15944:	e0fffd17 	ldw	r3,-12(fp)
   15948:	10c00015 	stw	r3,0(r2)
   1594c:	e0bffb17 	ldw	r2,-20(fp)
   15950:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15954:	e0bffe17 	ldw	r2,-8(fp)
   15958:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   1595c:	e037883a 	mov	sp,fp
   15960:	df000017 	ldw	fp,0(sp)
   15964:	dec00104 	addi	sp,sp,4
   15968:	f800283a 	ret

0001596c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1596c:	defffb04 	addi	sp,sp,-20
   15970:	dfc00415 	stw	ra,16(sp)
   15974:	df000315 	stw	fp,12(sp)
   15978:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   1597c:	d0a00c17 	ldw	r2,-32720(gp)
   15980:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   15984:	d0a6b917 	ldw	r2,-25884(gp)
   15988:	10800044 	addi	r2,r2,1
   1598c:	d0a6b915 	stw	r2,-25884(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   15990:	00002e06 	br	15a4c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   15994:	e0bffd17 	ldw	r2,-12(fp)
   15998:	10800017 	ldw	r2,0(r2)
   1599c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   159a0:	e0bffd17 	ldw	r2,-12(fp)
   159a4:	10800403 	ldbu	r2,16(r2)
   159a8:	10803fcc 	andi	r2,r2,255
   159ac:	10000426 	beq	r2,zero,159c0 <alt_tick+0x54>
   159b0:	d0a6b917 	ldw	r2,-25884(gp)
   159b4:	1000021e 	bne	r2,zero,159c0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   159b8:	e0bffd17 	ldw	r2,-12(fp)
   159bc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   159c0:	e0bffd17 	ldw	r2,-12(fp)
   159c4:	10800217 	ldw	r2,8(r2)
   159c8:	d0e6b917 	ldw	r3,-25884(gp)
   159cc:	18801d36 	bltu	r3,r2,15a44 <alt_tick+0xd8>
   159d0:	e0bffd17 	ldw	r2,-12(fp)
   159d4:	10800403 	ldbu	r2,16(r2)
   159d8:	10803fcc 	andi	r2,r2,255
   159dc:	1000191e 	bne	r2,zero,15a44 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   159e0:	e0bffd17 	ldw	r2,-12(fp)
   159e4:	10c00317 	ldw	r3,12(r2)
   159e8:	e0bffd17 	ldw	r2,-12(fp)
   159ec:	10800517 	ldw	r2,20(r2)
   159f0:	1009883a 	mov	r4,r2
   159f4:	183ee83a 	callr	r3
   159f8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   159fc:	e0bfff17 	ldw	r2,-4(fp)
   15a00:	1000031e 	bne	r2,zero,15a10 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   15a04:	e13ffd17 	ldw	r4,-12(fp)
   15a08:	00158d40 	call	158d4 <alt_alarm_stop>
   15a0c:	00000d06 	br	15a44 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   15a10:	e0bffd17 	ldw	r2,-12(fp)
   15a14:	10c00217 	ldw	r3,8(r2)
   15a18:	e0bfff17 	ldw	r2,-4(fp)
   15a1c:	1887883a 	add	r3,r3,r2
   15a20:	e0bffd17 	ldw	r2,-12(fp)
   15a24:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   15a28:	e0bffd17 	ldw	r2,-12(fp)
   15a2c:	10c00217 	ldw	r3,8(r2)
   15a30:	d0a6b917 	ldw	r2,-25884(gp)
   15a34:	1880032e 	bgeu	r3,r2,15a44 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   15a38:	e0bffd17 	ldw	r2,-12(fp)
   15a3c:	00c00044 	movi	r3,1
   15a40:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   15a44:	e0bffe17 	ldw	r2,-8(fp)
   15a48:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   15a4c:	e0fffd17 	ldw	r3,-12(fp)
   15a50:	d0a00c04 	addi	r2,gp,-32720
   15a54:	18bfcf1e 	bne	r3,r2,15994 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   15a58:	0001883a 	nop
}
   15a5c:	e037883a 	mov	sp,fp
   15a60:	dfc00117 	ldw	ra,4(sp)
   15a64:	df000017 	ldw	fp,0(sp)
   15a68:	dec00204 	addi	sp,sp,8
   15a6c:	f800283a 	ret

00015a70 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   15a70:	deffff04 	addi	sp,sp,-4
   15a74:	df000015 	stw	fp,0(sp)
   15a78:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   15a7c:	000170fa 	wrctl	ienable,zero
}
   15a80:	e037883a 	mov	sp,fp
   15a84:	df000017 	ldw	fp,0(sp)
   15a88:	dec00104 	addi	sp,sp,4
   15a8c:	f800283a 	ret

00015a90 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   15a90:	defffa04 	addi	sp,sp,-24
   15a94:	dfc00515 	stw	ra,20(sp)
   15a98:	df000415 	stw	fp,16(sp)
   15a9c:	df000404 	addi	fp,sp,16
   15aa0:	e13ffe15 	stw	r4,-8(fp)
   15aa4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   15aa8:	e0bfff17 	ldw	r2,-4(fp)
   15aac:	10800017 	ldw	r2,0(r2)
   15ab0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   15ab4:	e13ffe17 	ldw	r4,-8(fp)
   15ab8:	0010ad80 	call	10ad8 <strlen>
   15abc:	10800044 	addi	r2,r2,1
   15ac0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   15ac4:	00000d06 	br	15afc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   15ac8:	e0bffc17 	ldw	r2,-16(fp)
   15acc:	10c00217 	ldw	r3,8(r2)
   15ad0:	e0bffd17 	ldw	r2,-12(fp)
   15ad4:	1809883a 	mov	r4,r3
   15ad8:	e17ffe17 	ldw	r5,-8(fp)
   15adc:	100d883a 	mov	r6,r2
   15ae0:	0015d540 	call	15d54 <memcmp>
   15ae4:	1000021e 	bne	r2,zero,15af0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   15ae8:	e0bffc17 	ldw	r2,-16(fp)
   15aec:	00000706 	br	15b0c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   15af0:	e0bffc17 	ldw	r2,-16(fp)
   15af4:	10800017 	ldw	r2,0(r2)
   15af8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   15afc:	e0fffc17 	ldw	r3,-16(fp)
   15b00:	e0bfff17 	ldw	r2,-4(fp)
   15b04:	18bff01e 	bne	r3,r2,15ac8 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   15b08:	0005883a 	mov	r2,zero
}
   15b0c:	e037883a 	mov	sp,fp
   15b10:	dfc00117 	ldw	ra,4(sp)
   15b14:	df000017 	ldw	fp,0(sp)
   15b18:	dec00204 	addi	sp,sp,8
   15b1c:	f800283a 	ret

00015b20 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   15b20:	defffb04 	addi	sp,sp,-20
   15b24:	dfc00415 	stw	ra,16(sp)
   15b28:	df000315 	stw	fp,12(sp)
   15b2c:	df000304 	addi	fp,sp,12
   15b30:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   15b34:	00800074 	movhi	r2,1
   15b38:	109f1504 	addi	r2,r2,31828
   15b3c:	10800017 	ldw	r2,0(r2)
   15b40:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   15b44:	00003106 	br	15c0c <alt_find_file+0xec>
  {
    len = strlen(next->name);
   15b48:	e0bffd17 	ldw	r2,-12(fp)
   15b4c:	10800217 	ldw	r2,8(r2)
   15b50:	1009883a 	mov	r4,r2
   15b54:	0010ad80 	call	10ad8 <strlen>
   15b58:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   15b5c:	e0bffd17 	ldw	r2,-12(fp)
   15b60:	10c00217 	ldw	r3,8(r2)
   15b64:	e0bffe17 	ldw	r2,-8(fp)
   15b68:	10bfffc4 	addi	r2,r2,-1
   15b6c:	1885883a 	add	r2,r3,r2
   15b70:	10800003 	ldbu	r2,0(r2)
   15b74:	10803fcc 	andi	r2,r2,255
   15b78:	1080201c 	xori	r2,r2,128
   15b7c:	10bfe004 	addi	r2,r2,-128
   15b80:	10800bd8 	cmpnei	r2,r2,47
   15b84:	1000031e 	bne	r2,zero,15b94 <alt_find_file+0x74>
    {
      len -= 1;
   15b88:	e0bffe17 	ldw	r2,-8(fp)
   15b8c:	10bfffc4 	addi	r2,r2,-1
   15b90:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   15b94:	e0bffe17 	ldw	r2,-8(fp)
   15b98:	e0ffff17 	ldw	r3,-4(fp)
   15b9c:	1885883a 	add	r2,r3,r2
   15ba0:	10800003 	ldbu	r2,0(r2)
   15ba4:	10803fcc 	andi	r2,r2,255
   15ba8:	1080201c 	xori	r2,r2,128
   15bac:	10bfe004 	addi	r2,r2,-128
   15bb0:	10800be0 	cmpeqi	r2,r2,47
   15bb4:	1000081e 	bne	r2,zero,15bd8 <alt_find_file+0xb8>
   15bb8:	e0bffe17 	ldw	r2,-8(fp)
   15bbc:	e0ffff17 	ldw	r3,-4(fp)
   15bc0:	1885883a 	add	r2,r3,r2
   15bc4:	10800003 	ldbu	r2,0(r2)
   15bc8:	10803fcc 	andi	r2,r2,255
   15bcc:	1080201c 	xori	r2,r2,128
   15bd0:	10bfe004 	addi	r2,r2,-128
   15bd4:	10000a1e 	bne	r2,zero,15c00 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   15bd8:	e0bffd17 	ldw	r2,-12(fp)
   15bdc:	10c00217 	ldw	r3,8(r2)
   15be0:	e0bffe17 	ldw	r2,-8(fp)
   15be4:	1809883a 	mov	r4,r3
   15be8:	e17fff17 	ldw	r5,-4(fp)
   15bec:	100d883a 	mov	r6,r2
   15bf0:	0015d540 	call	15d54 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   15bf4:	1000021e 	bne	r2,zero,15c00 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   15bf8:	e0bffd17 	ldw	r2,-12(fp)
   15bfc:	00000806 	br	15c20 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   15c00:	e0bffd17 	ldw	r2,-12(fp)
   15c04:	10800017 	ldw	r2,0(r2)
   15c08:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   15c0c:	e0fffd17 	ldw	r3,-12(fp)
   15c10:	00800074 	movhi	r2,1
   15c14:	109f1504 	addi	r2,r2,31828
   15c18:	18bfcb1e 	bne	r3,r2,15b48 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   15c1c:	0005883a 	mov	r2,zero
}
   15c20:	e037883a 	mov	sp,fp
   15c24:	dfc00117 	ldw	ra,4(sp)
   15c28:	df000017 	ldw	fp,0(sp)
   15c2c:	dec00204 	addi	sp,sp,8
   15c30:	f800283a 	ret

00015c34 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   15c34:	defffa04 	addi	sp,sp,-24
   15c38:	dfc00515 	stw	ra,20(sp)
   15c3c:	df000415 	stw	fp,16(sp)
   15c40:	dc000315 	stw	r16,12(sp)
   15c44:	df000304 	addi	fp,sp,12
   15c48:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   15c4c:	00bffa04 	movi	r2,-24
   15c50:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   15c54:	e03ffd15 	stw	zero,-12(fp)
   15c58:	00002106 	br	15ce0 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   15c5c:	04000074 	movhi	r16,1
   15c60:	841a9904 	addi	r16,r16,27236
   15c64:	e0bffd17 	ldw	r2,-12(fp)
   15c68:	1009883a 	mov	r4,r2
   15c6c:	01400304 	movi	r5,12
   15c70:	00108d80 	call	108d8 <__mulsi3>
   15c74:	8085883a 	add	r2,r16,r2
   15c78:	10800017 	ldw	r2,0(r2)
   15c7c:	1000151e 	bne	r2,zero,15cd4 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   15c80:	04000074 	movhi	r16,1
   15c84:	841a9904 	addi	r16,r16,27236
   15c88:	e0bffd17 	ldw	r2,-12(fp)
   15c8c:	1009883a 	mov	r4,r2
   15c90:	01400304 	movi	r5,12
   15c94:	00108d80 	call	108d8 <__mulsi3>
   15c98:	8085883a 	add	r2,r16,r2
   15c9c:	e0ffff17 	ldw	r3,-4(fp)
   15ca0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   15ca4:	00800074 	movhi	r2,1
   15ca8:	109f1904 	addi	r2,r2,31844
   15cac:	10c00017 	ldw	r3,0(r2)
   15cb0:	e0bffd17 	ldw	r2,-12(fp)
   15cb4:	1880040e 	bge	r3,r2,15cc8 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   15cb8:	00800074 	movhi	r2,1
   15cbc:	109f1904 	addi	r2,r2,31844
   15cc0:	e0fffd17 	ldw	r3,-12(fp)
   15cc4:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   15cc8:	e0bffd17 	ldw	r2,-12(fp)
   15ccc:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   15cd0:	00000606 	br	15cec <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   15cd4:	e0bffd17 	ldw	r2,-12(fp)
   15cd8:	10800044 	addi	r2,r2,1
   15cdc:	e0bffd15 	stw	r2,-12(fp)
   15ce0:	e0bffd17 	ldw	r2,-12(fp)
   15ce4:	10800810 	cmplti	r2,r2,32
   15ce8:	103fdc1e 	bne	r2,zero,15c5c <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   15cec:	e0bffe17 	ldw	r2,-8(fp)
}
   15cf0:	e037883a 	mov	sp,fp
   15cf4:	dfc00217 	ldw	ra,8(sp)
   15cf8:	df000117 	ldw	fp,4(sp)
   15cfc:	dc000017 	ldw	r16,0(sp)
   15d00:	dec00304 	addi	sp,sp,12
   15d04:	f800283a 	ret

00015d08 <atexit>:
   15d08:	200b883a 	mov	r5,r4
   15d0c:	000d883a 	mov	r6,zero
   15d10:	0009883a 	mov	r4,zero
   15d14:	000f883a 	mov	r7,zero
   15d18:	0015dd01 	jmpi	15dd0 <__register_exitproc>

00015d1c <exit>:
   15d1c:	defffe04 	addi	sp,sp,-8
   15d20:	000b883a 	mov	r5,zero
   15d24:	dc000015 	stw	r16,0(sp)
   15d28:	dfc00115 	stw	ra,4(sp)
   15d2c:	2021883a 	mov	r16,r4
   15d30:	0015f000 	call	15f00 <__call_exitprocs>
   15d34:	00800074 	movhi	r2,1
   15d38:	109f1104 	addi	r2,r2,31812
   15d3c:	11000017 	ldw	r4,0(r2)
   15d40:	20800f17 	ldw	r2,60(r4)
   15d44:	10000126 	beq	r2,zero,15d4c <exit+0x30>
   15d48:	103ee83a 	callr	r2
   15d4c:	8009883a 	mov	r4,r16
   15d50:	00160a00 	call	160a0 <_exit>

00015d54 <memcmp>:
   15d54:	01c000c4 	movi	r7,3
   15d58:	3980192e 	bgeu	r7,r6,15dc0 <memcmp+0x6c>
   15d5c:	2904b03a 	or	r2,r5,r4
   15d60:	11c4703a 	and	r2,r2,r7
   15d64:	10000f26 	beq	r2,zero,15da4 <memcmp+0x50>
   15d68:	20c00003 	ldbu	r3,0(r4)
   15d6c:	28800003 	ldbu	r2,0(r5)
   15d70:	1880151e 	bne	r3,r2,15dc8 <memcmp+0x74>
   15d74:	31bfff84 	addi	r6,r6,-2
   15d78:	01ffffc4 	movi	r7,-1
   15d7c:	00000406 	br	15d90 <memcmp+0x3c>
   15d80:	20c00003 	ldbu	r3,0(r4)
   15d84:	28800003 	ldbu	r2,0(r5)
   15d88:	31bfffc4 	addi	r6,r6,-1
   15d8c:	18800e1e 	bne	r3,r2,15dc8 <memcmp+0x74>
   15d90:	21000044 	addi	r4,r4,1
   15d94:	29400044 	addi	r5,r5,1
   15d98:	31fff91e 	bne	r6,r7,15d80 <memcmp+0x2c>
   15d9c:	0005883a 	mov	r2,zero
   15da0:	f800283a 	ret
   15da4:	20c00017 	ldw	r3,0(r4)
   15da8:	28800017 	ldw	r2,0(r5)
   15dac:	1880041e 	bne	r3,r2,15dc0 <memcmp+0x6c>
   15db0:	31bfff04 	addi	r6,r6,-4
   15db4:	21000104 	addi	r4,r4,4
   15db8:	29400104 	addi	r5,r5,4
   15dbc:	39bff936 	bltu	r7,r6,15da4 <memcmp+0x50>
   15dc0:	303fe91e 	bne	r6,zero,15d68 <memcmp+0x14>
   15dc4:	003ff506 	br	15d9c <memcmp+0x48>
   15dc8:	1885c83a 	sub	r2,r3,r2
   15dcc:	f800283a 	ret

00015dd0 <__register_exitproc>:
   15dd0:	defffa04 	addi	sp,sp,-24
   15dd4:	00800074 	movhi	r2,1
   15dd8:	109f1104 	addi	r2,r2,31812
   15ddc:	dc000315 	stw	r16,12(sp)
   15de0:	14000017 	ldw	r16,0(r2)
   15de4:	dc400415 	stw	r17,16(sp)
   15de8:	dfc00515 	stw	ra,20(sp)
   15dec:	80805217 	ldw	r2,328(r16)
   15df0:	2023883a 	mov	r17,r4
   15df4:	10003e26 	beq	r2,zero,15ef0 <__register_exitproc+0x120>
   15df8:	10c00117 	ldw	r3,4(r2)
   15dfc:	020007c4 	movi	r8,31
   15e00:	40c0180e 	bge	r8,r3,15e64 <__register_exitproc+0x94>
   15e04:	00800034 	movhi	r2,0
   15e08:	10800004 	addi	r2,r2,0
   15e0c:	1000061e 	bne	r2,zero,15e28 <__register_exitproc+0x58>
   15e10:	00bfffc4 	movi	r2,-1
   15e14:	dfc00517 	ldw	ra,20(sp)
   15e18:	dc400417 	ldw	r17,16(sp)
   15e1c:	dc000317 	ldw	r16,12(sp)
   15e20:	dec00604 	addi	sp,sp,24
   15e24:	f800283a 	ret
   15e28:	01006404 	movi	r4,400
   15e2c:	d9400015 	stw	r5,0(sp)
   15e30:	d9800115 	stw	r6,4(sp)
   15e34:	d9c00215 	stw	r7,8(sp)
   15e38:	00000000 	call	0 <__alt_mem_mem4-0x10000>
   15e3c:	d9400017 	ldw	r5,0(sp)
   15e40:	d9800117 	ldw	r6,4(sp)
   15e44:	d9c00217 	ldw	r7,8(sp)
   15e48:	103ff126 	beq	r2,zero,15e10 <__register_exitproc+0x40>
   15e4c:	80c05217 	ldw	r3,328(r16)
   15e50:	10000115 	stw	zero,4(r2)
   15e54:	10c00015 	stw	r3,0(r2)
   15e58:	80805215 	stw	r2,328(r16)
   15e5c:	10006215 	stw	zero,392(r2)
   15e60:	10006315 	stw	zero,396(r2)
   15e64:	10c00117 	ldw	r3,4(r2)
   15e68:	88000d1e 	bne	r17,zero,15ea0 <__register_exitproc+0xd0>
   15e6c:	19000084 	addi	r4,r3,2
   15e70:	2109883a 	add	r4,r4,r4
   15e74:	18c00044 	addi	r3,r3,1
   15e78:	2109883a 	add	r4,r4,r4
   15e7c:	1109883a 	add	r4,r2,r4
   15e80:	10c00115 	stw	r3,4(r2)
   15e84:	0005883a 	mov	r2,zero
   15e88:	21400015 	stw	r5,0(r4)
   15e8c:	dfc00517 	ldw	ra,20(sp)
   15e90:	dc400417 	ldw	r17,16(sp)
   15e94:	dc000317 	ldw	r16,12(sp)
   15e98:	dec00604 	addi	sp,sp,24
   15e9c:	f800283a 	ret
   15ea0:	02400044 	movi	r9,1
   15ea4:	12806217 	ldw	r10,392(r2)
   15ea8:	48d2983a 	sll	r9,r9,r3
   15eac:	19000804 	addi	r4,r3,32
   15eb0:	18d1883a 	add	r8,r3,r3
   15eb4:	2109883a 	add	r4,r4,r4
   15eb8:	4211883a 	add	r8,r8,r8
   15ebc:	2109883a 	add	r4,r4,r4
   15ec0:	1109883a 	add	r4,r2,r4
   15ec4:	1211883a 	add	r8,r2,r8
   15ec8:	5254b03a 	or	r10,r10,r9
   15ecc:	21c02215 	stw	r7,136(r4)
   15ed0:	41802215 	stw	r6,136(r8)
   15ed4:	12806215 	stw	r10,392(r2)
   15ed8:	01000084 	movi	r4,2
   15edc:	893fe31e 	bne	r17,r4,15e6c <__register_exitproc+0x9c>
   15ee0:	11006317 	ldw	r4,396(r2)
   15ee4:	2252b03a 	or	r9,r4,r9
   15ee8:	12406315 	stw	r9,396(r2)
   15eec:	003fdf06 	br	15e6c <__register_exitproc+0x9c>
   15ef0:	008000b4 	movhi	r2,2
   15ef4:	10a69504 	addi	r2,r2,-26028
   15ef8:	80805215 	stw	r2,328(r16)
   15efc:	003fbe06 	br	15df8 <__register_exitproc+0x28>

00015f00 <__call_exitprocs>:
   15f00:	00800074 	movhi	r2,1
   15f04:	109f1104 	addi	r2,r2,31812
   15f08:	10800017 	ldw	r2,0(r2)
   15f0c:	defff304 	addi	sp,sp,-52
   15f10:	df000b15 	stw	fp,44(sp)
   15f14:	d8800015 	stw	r2,0(sp)
   15f18:	10805204 	addi	r2,r2,328
   15f1c:	dd400815 	stw	r21,32(sp)
   15f20:	dfc00c15 	stw	ra,48(sp)
   15f24:	ddc00a15 	stw	r23,40(sp)
   15f28:	dd800915 	stw	r22,36(sp)
   15f2c:	dd000715 	stw	r20,28(sp)
   15f30:	dcc00615 	stw	r19,24(sp)
   15f34:	dc800515 	stw	r18,20(sp)
   15f38:	dc400415 	stw	r17,16(sp)
   15f3c:	dc000315 	stw	r16,12(sp)
   15f40:	d9000115 	stw	r4,4(sp)
   15f44:	2839883a 	mov	fp,r5
   15f48:	d8800215 	stw	r2,8(sp)
   15f4c:	057fffc4 	movi	r21,-1
   15f50:	d8800017 	ldw	r2,0(sp)
   15f54:	ddc00217 	ldw	r23,8(sp)
   15f58:	14805217 	ldw	r18,328(r2)
   15f5c:	90001726 	beq	r18,zero,15fbc <__call_exitprocs+0xbc>
   15f60:	94400117 	ldw	r17,4(r18)
   15f64:	8c3fffc4 	addi	r16,r17,-1
   15f68:	80001116 	blt	r16,zero,15fb0 <__call_exitprocs+0xb0>
   15f6c:	8c400044 	addi	r17,r17,1
   15f70:	8427883a 	add	r19,r16,r16
   15f74:	8c63883a 	add	r17,r17,r17
   15f78:	95802204 	addi	r22,r18,136
   15f7c:	9ce7883a 	add	r19,r19,r19
   15f80:	8c63883a 	add	r17,r17,r17
   15f84:	b4e7883a 	add	r19,r22,r19
   15f88:	9463883a 	add	r17,r18,r17
   15f8c:	e0001726 	beq	fp,zero,15fec <__call_exitprocs+0xec>
   15f90:	8c87c83a 	sub	r3,r17,r18
   15f94:	b0c7883a 	add	r3,r22,r3
   15f98:	18c01e17 	ldw	r3,120(r3)
   15f9c:	1f001326 	beq	r3,fp,15fec <__call_exitprocs+0xec>
   15fa0:	843fffc4 	addi	r16,r16,-1
   15fa4:	9cffff04 	addi	r19,r19,-4
   15fa8:	8c7fff04 	addi	r17,r17,-4
   15fac:	857ff71e 	bne	r16,r21,15f8c <__call_exitprocs+0x8c>
   15fb0:	00800034 	movhi	r2,0
   15fb4:	10800004 	addi	r2,r2,0
   15fb8:	10002a1e 	bne	r2,zero,16064 <__call_exitprocs+0x164>
   15fbc:	dfc00c17 	ldw	ra,48(sp)
   15fc0:	df000b17 	ldw	fp,44(sp)
   15fc4:	ddc00a17 	ldw	r23,40(sp)
   15fc8:	dd800917 	ldw	r22,36(sp)
   15fcc:	dd400817 	ldw	r21,32(sp)
   15fd0:	dd000717 	ldw	r20,28(sp)
   15fd4:	dcc00617 	ldw	r19,24(sp)
   15fd8:	dc800517 	ldw	r18,20(sp)
   15fdc:	dc400417 	ldw	r17,16(sp)
   15fe0:	dc000317 	ldw	r16,12(sp)
   15fe4:	dec00d04 	addi	sp,sp,52
   15fe8:	f800283a 	ret
   15fec:	91000117 	ldw	r4,4(r18)
   15ff0:	88c00017 	ldw	r3,0(r17)
   15ff4:	213fffc4 	addi	r4,r4,-1
   15ff8:	24001526 	beq	r4,r16,16050 <__call_exitprocs+0x150>
   15ffc:	88000015 	stw	zero,0(r17)
   16000:	183fe726 	beq	r3,zero,15fa0 <__call_exitprocs+0xa0>
   16004:	00800044 	movi	r2,1
   16008:	1408983a 	sll	r4,r2,r16
   1600c:	91406217 	ldw	r5,392(r18)
   16010:	95000117 	ldw	r20,4(r18)
   16014:	214a703a 	and	r5,r4,r5
   16018:	28000b26 	beq	r5,zero,16048 <__call_exitprocs+0x148>
   1601c:	91406317 	ldw	r5,396(r18)
   16020:	2148703a 	and	r4,r4,r5
   16024:	20000c1e 	bne	r4,zero,16058 <__call_exitprocs+0x158>
   16028:	99400017 	ldw	r5,0(r19)
   1602c:	d9000117 	ldw	r4,4(sp)
   16030:	183ee83a 	callr	r3
   16034:	90c00117 	ldw	r3,4(r18)
   16038:	1d3fc51e 	bne	r3,r20,15f50 <__call_exitprocs+0x50>
   1603c:	b8c00017 	ldw	r3,0(r23)
   16040:	1cbfd726 	beq	r3,r18,15fa0 <__call_exitprocs+0xa0>
   16044:	003fc206 	br	15f50 <__call_exitprocs+0x50>
   16048:	183ee83a 	callr	r3
   1604c:	003ff906 	br	16034 <__call_exitprocs+0x134>
   16050:	94000115 	stw	r16,4(r18)
   16054:	003fea06 	br	16000 <__call_exitprocs+0x100>
   16058:	99000017 	ldw	r4,0(r19)
   1605c:	183ee83a 	callr	r3
   16060:	003ff406 	br	16034 <__call_exitprocs+0x134>
   16064:	90c00117 	ldw	r3,4(r18)
   16068:	1800071e 	bne	r3,zero,16088 <__call_exitprocs+0x188>
   1606c:	90c00017 	ldw	r3,0(r18)
   16070:	18000926 	beq	r3,zero,16098 <__call_exitprocs+0x198>
   16074:	9009883a 	mov	r4,r18
   16078:	b8c00015 	stw	r3,0(r23)
   1607c:	00000000 	call	0 <__alt_mem_mem4-0x10000>
   16080:	bc800017 	ldw	r18,0(r23)
   16084:	003fb506 	br	15f5c <__call_exitprocs+0x5c>
   16088:	90c00017 	ldw	r3,0(r18)
   1608c:	902f883a 	mov	r23,r18
   16090:	1825883a 	mov	r18,r3
   16094:	003fb106 	br	15f5c <__call_exitprocs+0x5c>
   16098:	0007883a 	mov	r3,zero
   1609c:	003ffb06 	br	1608c <__call_exitprocs+0x18c>

000160a0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   160a0:	defffc04 	addi	sp,sp,-16
   160a4:	df000315 	stw	fp,12(sp)
   160a8:	df000304 	addi	fp,sp,12
   160ac:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   160b0:	0001883a 	nop
   160b4:	e0bfff17 	ldw	r2,-4(fp)
   160b8:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
   160bc:	e0bffd17 	ldw	r2,-12(fp)
   160c0:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   160c4:	e0bffe17 	ldw	r2,-8(fp)
   160c8:	10000226 	beq	r2,zero,160d4 <_exit+0x34>
    ALT_SIM_FAIL();
   160cc:	002af070 	cmpltui	zero,zero,43969
   160d0:	00000106 	br	160d8 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   160d4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   160d8:	003fff06 	br	160d8 <_exit+0x38>

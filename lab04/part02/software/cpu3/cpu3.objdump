
cpu3.elf:     file format elf32-littlenios2
cpu3.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000401b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x00006714 memsz 0x00006714 flags r-x
    LOAD off    0x00007734 vaddr 0x00046734 paddr 0x00048200 align 2**12
         filesz 0x00001acc memsz 0x00001acc flags rw-
    LOAD off    0x00009ccc vaddr 0x00049ccc paddr 0x00049ccc align 2**12
         filesz 0x00000000 memsz 0x000002e4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00006514  000401b8  000401b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000068  000466cc  000466cc  000076cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001acc  00046734  00048200  00007734  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e4  00049ccc  00049ccc  00009ccc  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00009200  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000009f0  00000000  00000000  00009228  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000196bd  00000000  00000000  00009c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00006127  00000000  00000000  000232d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000743a  00000000  00000000  000293fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001390  00000000  00000000  00030838  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000025fe  00000000  00000000  00031bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00005b85  00000000  00000000  000341c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  00039d4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000398  00000000  00000000  00039d60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0003cc20  2**0
                  CONTENTS, READONLY
 17 .cpu          00000004  00000000  00000000  0003cc23  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0003cc27  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0003cc28  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0003cc29  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0003cc2d  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0003cc31  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000a  00000000  00000000  0003cc35  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000a  00000000  00000000  0003cc3f  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000a  00000000  00000000  0003cc49  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000004  00000000  00000000  0003cc53  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000052  00000000  00000000  0003cc57  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00192ad8  00000000  00000000  0003cca9  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
000401b8 l    d  .text	00000000 .text
000466cc l    d  .rodata	00000000 .rodata
00046734 l    d  .rwdata	00000000 .rwdata
00049ccc l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../cpu3_bsp//obj/HAL/src/crt0.o
000401f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00040094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 FIFO.c
00000000 l    df *ABS*	00000000 dct.c
0004816c l     O .rwdata	00000002 s3.2795
0004816e l     O .rwdata	00000002 s2.2794
00048170 l     O .rwdata	00000002 s1.2793
00048172 l     O .rwdata	00000002 c7.2792
00048174 l     O .rwdata	00000002 c6.2791
00048176 l     O .rwdata	00000002 c5.2790
00048178 l     O .rwdata	00000002 c3.2789
0004817a l     O .rwdata	00000002 c2.2788
0004817c l     O .rwdata	00000002 c1.2787
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
00046b3c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0004275c l     F .text	00000008 __fp_lock
00042764 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
00043358 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00043474 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000434a0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000435a0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00043694 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00043780 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0004395c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000481a8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00043bd0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00043d10 l     F .text	00000038 alt_dev_reg
000470e4 l     O .rwdata	00001060 jtag_uart3
00048144 l     O .rwdata	00000028 altera_hostfs
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00044504 l     F .text	00000204 altera_avalon_jtag_uart_irq
00044708 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00044d44 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_hostfs.c
000481e8 l     O .rwdata	00000004 hcinfo.2311
000481dc l     O .rwdata	00000004 hcinfo.2324
000481d0 l     O .rwdata	00000004 hcinfo.2333
000481c4 l     O .rwdata	00000004 hcinfo.2346
000481b8 l     O .rwdata	00000004 hcinfo.2359
000481ac l     O .rwdata	00000004 hcinfo.2385
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000455c4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00045ad4 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00045c2c l     F .text	00000050 alt_get_errno
00045c7c l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
000431f4 g     F .text	00000064 _isatty_r
000438a4 g     F .text	00000078 alt_main
00040f98 g     F .text	00000084 _puts_r
00049d20 g     O .bss	00000100 alt_irq
00043258 g     F .text	0000006c _lseek_r
00044070 g     F .text	00000058 altera_avalon_fifo_write_almostfull
00048200 g       *ABS*	00000000 __flash_rwdata_start
00049fb0 g       *ABS*	00000000 __alt_heap_start
00042f08 g     F .text	0000005c __sseek
00042800 g     F .text	0000010c __sinit
00042778 g     F .text	00000078 __sfmoreglue
0004393c g     F .text	00000020 __malloc_unlock
00044e40 g     F .text	0000016c alt_hostfs_open
00041c48 g     F .text	0000018c memmove
00043df0 g     F .text	00000098 altera_avalon_fifo_init
000427f0 g     F .text	00000010 _cleanup
00044120 g     F .text	00000058 altera_avalon_fifo_write_fifo
00000000  w      *UND*	00000000 __errno
00040000 g     F .entry	0000000c __reset
000442b8 g     F .text	00000028 altera_avalon_fifo_read_backpressure
00040020 g       *ABS*	00000000 __flash_exceptions_start
0004318c g     F .text	00000068 _fstat_r
00049cdc g     O .bss	00000004 errno
00049ce4 g     O .bss	00000004 alt_argv
0005016c g       *ABS*	00000000 _gp
00043fbc g     F .text	0000005c altera_avalon_fifo_clear_event
00046f64 g     O .rwdata	00000180 alt_fd_list
00045188 g     F .text	000000b8 alt_hostfs_seek
00046080 g     F .text	00000090 alt_find_dev
00041b08 g     F .text	00000140 memcpy
0004276c g     F .text	0000000c _cleanup_r
0004576c g     F .text	00000084 alt_fs_reg
00045bb4 g     F .text	00000078 alt_io_redirect
000466cc g       *ABS*	00000000 __DTOR_END__
0004101c g     F .text	00000014 puts
00044908 g     F .text	00000218 altera_avalon_jtag_uart_read
000407ec g     F .text	00000014 malloc
000435f0 g     F .text	000000a4 isatty
00049cd8 g     O .bss	00000004 __malloc_top_pad
0004152c g     F .text	000004e4 __sfvwrite_r
00041030 g     F .text	00000064 _sbrk_r
00045018 g     F .text	000000b8 alt_hostfs_read
000432c4 g     F .text	0000006c _read_r
000481a0 g     O .rwdata	00000004 alt_max_fd
0004303c g     F .text	0000013c _fclose_r
0004272c g     F .text	00000030 fflush
00049cd4 g     O .bss	00000004 __malloc_max_sbrked_mem
000437d0 g     F .text	000000d4 lseek
00048188 g     O .rwdata	00000004 _global_impure_ptr
00041dd4 g     F .text	000005fc _realloc_r
00049fb0 g       *ABS*	00000000 __bss_end
000459e4 g     F .text	000000f0 alt_iic_isr_register
00045f5c g     F .text	00000104 alt_tick
00042a18 g     F .text	00000018 __fp_lock_all
00045998 g     F .text	0000004c alt_ic_irq_enabled
000402c0 g     F .text	00000040 FIFO_INIT
00045ec4 g     F .text	00000098 alt_alarm_stop
00049cec g     O .bss	00000004 alt_irq_active
00044fac g     F .text	0000006c alt_hostfs_close
000400ec g     F .exceptions	000000cc alt_irq_handler
00046f3c g     O .rwdata	00000028 alt_dev_null
000455a8 g     F .text	0000001c alt_dcache_flush_all
00044018 g     F .text	00000058 altera_avalon_fifo_write_ienable
00048200 g       *ABS*	00000000 __ram_rwdata_end
00043f2c g     F .text	0000002c altera_avalon_fifo_read_almostempty
00048198 g     O .rwdata	00000008 alt_dev_list
00043c20 g     F .text	000000f0 write
00046734 g       *ABS*	00000000 __ram_rodata_end
000434f0 g     F .text	000000b0 fstat
00049fb0 g       *ABS*	00000000 end
00044444 g     F .text	000000c0 altera_avalon_jtag_uart_init
00043f58 g     F .text	0000003c altera_avalon_fifo_read_event
000466cc g       *ABS*	00000000 __CTOR_LIST__
00057000 g       *ABS*	00000000 __alt_stack_pointer
00044db8 g     F .text	00000088 alt_avalon_timer_sc_init
00044b20 g     F .text	00000224 altera_avalon_jtag_uart_write
00042a08 g     F .text	00000004 __sfp_lock_acquire
000441e4 g     F .text	0000004c altera_avalon_fifo_read_fifo
00041a10 g     F .text	000000f8 memchr
0004125c g     F .text	000002d0 _free_r
000464f0 g     F .text	000001a0 __call_exitprocs
00048180 g     O .rwdata	00000004 __malloc_sbrk_base
000401b8 g     F .text	0000003c _start
00049cf0 g     O .bss	00000004 _alt_tick_rate
00049cf4 g     O .bss	00000004 _alt_nticks
000439ac g     F .text	000000f4 read
00043d7c g     F .text	00000074 alt_sys_init
000463c0 g     F .text	00000130 __register_exitproc
000447ac g     F .text	00000068 altera_avalon_jtag_uart_close
00043330 g     F .text	00000028 __mulsi3
00046734 g       *ABS*	00000000 __ram_rwdata_start
000466cc g       *ABS*	00000000 __ram_rodata_start
00049cf8 g     O .bss	00000028 __malloc_current_mallinfo
000442e0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00046224 g     F .text	000000d4 alt_get_fd
00042fd8 g     F .text	00000064 _close_r
00046344 g     F .text	0000007c memcmp
000443a0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00049fb0 g       *ABS*	00000000 __alt_stack_base
000443f0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000423d0 g     F .text	00000174 __swsetup_r
00043e88 g     F .text	0000003c altera_avalon_fifo_read_status
0004290c g     F .text	000000fc __sfp
00046734 g     O .rwdata	00000408 __malloc_av_
00042a14 g     F .text	00000004 __sinit_lock_release
00042e2c g     F .text	00000054 __sread
0004428c g     F .text	0000002c altera_avalon_fifo_read_other_info
00046110 g     F .text	00000114 alt_find_file
00045614 g     F .text	000000a0 alt_dev_llist_insert
0004391c g     F .text	00000020 __malloc_lock
00043b20 g     F .text	000000b0 sbrk
00042544 g     F .text	000001e8 _fflush_r
00049ccc g       *ABS*	00000000 __bss_start
00049ccc g     O .bss	00000004 data
00042d50 g     F .text	000000dc memset
00040778 g     F .text	00000074 main
00049ce8 g     O .bss	00000004 alt_envp
00049cd0 g     O .bss	00000004 __malloc_max_total_mem
00044340 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00043f94 g     F .text	00000028 altera_avalon_fifo_read_level
00042f64 g     F .text	00000008 __sclose
00057000 g       *ABS*	00000000 __alt_heap_limit
00043178 g     F .text	00000014 fclose
00049e20 g     O .bss	00000190 _atexit0
00040814 g     F .text	00000784 _malloc_r
000481a4 g     O .rwdata	00000004 alt_errno
00042a48 g     F .text	000000a8 _fwalk
00041120 g     F .text	0000013c _malloc_trim_r
000466cc g       *ABS*	00000000 __CTOR_END__
000466cc g       *ABS*	00000000 __flash_rodata_start
000466cc g       *ABS*	00000000 __DTOR_LIST__
00040300 g     F .text	00000040 delay
00040340 g     F .text	00000438 DCT
00043d48 g     F .text	00000034 alt_irq_init
00043aa0 g     F .text	00000080 alt_release_fd
000462f8 g     F .text	00000014 atexit
00042f6c g     F .text	0000006c _write_r
0004818c g     O .rwdata	00000004 _impure_ptr
00049ce0 g     O .bss	00000004 alt_argc
00045710 g     F .text	0000005c _do_dtors
00040258 g     F .text	00000068 READ_FIFO
00040020 g       .exceptions	00000000 alt_irq_entry
00042a30 g     F .text	00000018 __fp_unlock_all
00048190 g     O .rwdata	00000008 alt_fs_list
00040000 g       *ABS*	00000000 __alt_mem_mem3
000450d0 g     F .text	000000b8 alt_hostfs_write
00040020 g       *ABS*	00000000 __ram_exceptions_start
00044230 g     F .text	0000005c altera_avalon_fifo_write_other_info
0004580c g     F .text	00000050 alt_ic_isr_register
00048200 g       *ABS*	00000000 _edata
00049fb0 g       *ABS*	00000000 _end
000401b8 g       *ABS*	00000000 __ram_exceptions_end
00044814 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
000458f8 g     F .text	000000a0 alt_ic_irq_disable
00042e80 g     F .text	00000088 __swrite
00048184 g     O .rwdata	00000004 __malloc_trim_threshold
00046060 g     F .text	00000020 altera_nios2_qsys_irq_init
0004630c g     F .text	00000038 exit
00042af0 g     F .text	000000b8 _fwalk_reent
00043ec4 g     F .text	0000003c altera_avalon_fifo_read_ienable
00057000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
00042a0c g     F .text	00000004 __sfp_lock_release
00046690 g     F .text	0000003c _exit
00045468 g     F .text	00000140 alt_alarm_start
00043f00 g     F .text	0000002c altera_avalon_fifo_read_almostfull
00042ba8 g     F .text	000001a8 __smakebuf_r
00041094 g     F .text	0000008c strlen
00045d6c g     F .text	00000158 open
00044178 g     F .text	0000006c altera_avalon_read_fifo
000457f0 g     F .text	0000001c alt_icache_flush_all
000401f4 g     F .text	00000064 WRITE_FIFO
000481f4 g     O .rwdata	00000004 alt_priority_mask
0004585c g     F .text	0000009c alt_ic_irq_enable
000440c8 g     F .text	00000058 altera_avalon_fifo_write_almostempty
000481f8 g     O .rwdata	00000008 alt_alarm_list
000456b4 g     F .text	0000005c _do_ctors
000433a8 g     F .text	000000cc close
00043700 g     F .text	00000080 alt_load
00040800 g     F .text	00000014 free
00042a10 g     F .text	00000004 __sinit_lock_acquire
00045240 g     F .text	00000228 alt_hostfs_fstat



Disassembly of section .entry:

00040000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40000:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40004:	08406e14 	ori	at,at,440
    jmp r1
   40008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400ec0 	call	400ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000306 	br	40098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   4008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)

00040094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   40094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   40098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   4009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400e8:	ef80083a 	eret

000400ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400ec:	defff904 	addi	sp,sp,-28
   400f0:	dfc00615 	stw	ra,24(sp)
   400f4:	df000515 	stw	fp,20(sp)
   400f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   400fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40100:	0005313a 	rdctl	r2,ipending
   40104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40114:	00800044 	movi	r2,1
   40118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4011c:	e0fffb17 	ldw	r3,-20(fp)
   40120:	e0bffc17 	ldw	r2,-16(fp)
   40124:	1884703a 	and	r2,r3,r2
   40128:	10001726 	beq	r2,zero,40188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4012c:	00c00174 	movhi	r3,5
   40130:	18e74804 	addi	r3,r3,-25312
   40134:	e0bffd17 	ldw	r2,-12(fp)
   40138:	100490fa 	slli	r2,r2,3
   4013c:	1885883a 	add	r2,r3,r2
   40140:	10c00017 	ldw	r3,0(r2)
   40144:	01000174 	movhi	r4,5
   40148:	21274804 	addi	r4,r4,-25312
   4014c:	e0bffd17 	ldw	r2,-12(fp)
   40150:	100490fa 	slli	r2,r2,3
   40154:	2085883a 	add	r2,r4,r2
   40158:	10800104 	addi	r2,r2,4
   4015c:	10800017 	ldw	r2,0(r2)
   40160:	1009883a 	mov	r4,r2
   40164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4016c:	0005313a 	rdctl	r2,ipending
   40170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   40178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   4017c:	e0bffb17 	ldw	r2,-20(fp)
   40180:	103fe31e 	bne	r2,zero,40110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   40184:	00000706 	br	401a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   40188:	e0bffc17 	ldw	r2,-16(fp)
   4018c:	1085883a 	add	r2,r2,r2
   40190:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40194:	e0bffd17 	ldw	r2,-12(fp)
   40198:	10800044 	addi	r2,r2,1
   4019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a0:	003fde06 	br	4011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   401a4:	e037883a 	mov	sp,fp
   401a8:	dfc00117 	ldw	ra,4(sp)
   401ac:	df000017 	ldw	fp,0(sp)
   401b0:	dec00204 	addi	sp,sp,8
   401b4:	f800283a 	ret

Disassembly of section .text:

000401b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   401b8:	06c00174 	movhi	sp,5
    ori sp, sp, %lo(__alt_stack_pointer)
   401bc:	dedc0014 	ori	sp,sp,28672
    movhi gp, %hi(_gp)
   401c0:	06800174 	movhi	gp,5
    ori gp, gp, %lo(_gp)
   401c4:	d6805b14 	ori	gp,gp,364
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   401c8:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   401cc:	10a73314 	ori	r2,r2,40140

    movhi r3, %hi(__bss_end)
   401d0:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
   401d4:	18e7ec14 	ori	r3,r3,40880

    beq r2, r3, 1f
   401d8:	10c00326 	beq	r2,r3,401e8 <_start+0x30>

0:
    stw zero, (r2)
   401dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   401e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   401e4:	10fffd36 	bltu	r2,r3,401dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   401e8:	00437000 	call	43700 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   401ec:	00438a40 	call	438a4 <alt_main>

000401f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   401f0:	003fff06 	br	401f0 <alt_after_alt_main>

000401f4 <WRITE_FIFO>:
 */

#include "FIFO.h"

void WRITE_FIFO(int *buffer, int inBase, int controllBase)
{
   401f4:	defffb04 	addi	sp,sp,-20
   401f8:	dfc00415 	stw	ra,16(sp)
   401fc:	df000315 	stw	fp,12(sp)
   40200:	df000304 	addi	fp,sp,12
   40204:	e13ffd15 	stw	r4,-12(fp)
   40208:	e17ffe15 	stw	r5,-8(fp)
   4020c:	e1bfff15 	stw	r6,-4(fp)
	// printf("Writing to FIFO : %d\n", altera_avalon_fifo_read_level(controllBase));

	// Check if FIFO is full before writing
	while (altera_avalon_fifo_read_level(controllBase) == ALMOST_FULL)
   40210:	0001883a 	nop
   40214:	e0bfff17 	ldw	r2,-4(fp)
   40218:	1009883a 	mov	r4,r2
   4021c:	0043f940 	call	43f94 <altera_avalon_fifo_read_level>
   40220:	10800220 	cmpeqi	r2,r2,8
   40224:	103ffb1e 	bne	r2,zero,40214 <WRITE_FIFO+0x20>
	{
	}

	// Write data to FIFO
	altera_avalon_fifo_write_fifo(inBase, controllBase, *buffer);
   40228:	e13ffe17 	ldw	r4,-8(fp)
   4022c:	e0ffff17 	ldw	r3,-4(fp)
   40230:	e0bffd17 	ldw	r2,-12(fp)
   40234:	10800017 	ldw	r2,0(r2)
   40238:	180b883a 	mov	r5,r3
   4023c:	100d883a 	mov	r6,r2
   40240:	00441200 	call	44120 <altera_avalon_fifo_write_fifo>
}
   40244:	e037883a 	mov	sp,fp
   40248:	dfc00117 	ldw	ra,4(sp)
   4024c:	df000017 	ldw	fp,0(sp)
   40250:	dec00204 	addi	sp,sp,8
   40254:	f800283a 	ret

00040258 <READ_FIFO>:

int READ_FIFO(int *buffer, int outBase, int controllBase)
{
   40258:	defffb04 	addi	sp,sp,-20
   4025c:	dfc00415 	stw	ra,16(sp)
   40260:	df000315 	stw	fp,12(sp)
   40264:	df000304 	addi	fp,sp,12
   40268:	e13ffd15 	stw	r4,-12(fp)
   4026c:	e17ffe15 	stw	r5,-8(fp)
   40270:	e1bfff15 	stw	r6,-4(fp)
	// Wait if the FIFO is empty
	// while (altera_avalon_fifo_read_status(FIFO_MEM_IN_CSR_BASE, ALTERA_AVALON_FIFO_STATUS_EMPTY))
	// 	;

	while (altera_avalon_fifo_read_level(controllBase) == ALMOST_EMTY)
   40274:	0001883a 	nop
   40278:	e0bfff17 	ldw	r2,-4(fp)
   4027c:	1009883a 	mov	r4,r2
   40280:	0043f940 	call	43f94 <altera_avalon_fifo_read_level>
   40284:	103ffc26 	beq	r2,zero,40278 <READ_FIFO+0x20>
	{
	}

	// Read the data
	*buffer = altera_avalon_fifo_read_fifo(outBase, controllBase);
   40288:	e0fffe17 	ldw	r3,-8(fp)
   4028c:	e0bfff17 	ldw	r2,-4(fp)
   40290:	1809883a 	mov	r4,r3
   40294:	100b883a 	mov	r5,r2
   40298:	00441e40 	call	441e4 <altera_avalon_fifo_read_fifo>
   4029c:	e0fffd17 	ldw	r3,-12(fp)
   402a0:	18800015 	stw	r2,0(r3)

	return *buffer;
   402a4:	e0bffd17 	ldw	r2,-12(fp)
   402a8:	10800017 	ldw	r2,0(r2)
}
   402ac:	e037883a 	mov	sp,fp
   402b0:	dfc00117 	ldw	ra,4(sp)
   402b4:	df000017 	ldw	fp,0(sp)
   402b8:	dec00204 	addi	sp,sp,8
   402bc:	f800283a 	ret

000402c0 <FIFO_INIT>:

// Initialization
void FIFO_INIT(int controllBase)
{
   402c0:	defffd04 	addi	sp,sp,-12
   402c4:	dfc00215 	stw	ra,8(sp)
   402c8:	df000115 	stw	fp,4(sp)
   402cc:	df000104 	addi	fp,sp,4
   402d0:	e13fff15 	stw	r4,-4(fp)
	altera_avalon_fifo_init(controllBase,
   402d4:	e0bfff17 	ldw	r2,-4(fp)
   402d8:	1009883a 	mov	r4,r2
   402dc:	000b883a 	mov	r5,zero
   402e0:	000d883a 	mov	r6,zero
   402e4:	01c00204 	movi	r7,8
   402e8:	0043df00 	call	43df0 <altera_avalon_fifo_init>
							0,
							ALMOST_EMTY,  // Almost empty threshold
							ALMOST_FULL); // Almost full threshold
   402ec:	e037883a 	mov	sp,fp
   402f0:	dfc00117 	ldw	ra,4(sp)
   402f4:	df000017 	ldw	fp,0(sp)
   402f8:	dec00204 	addi	sp,sp,8
   402fc:	f800283a 	ret

00040300 <delay>:
#include "system.h"

#define DCT_CI_MACRO(n, A) __builtin_custom_ini(ALT_CI_DCT_COMPONENT_0_N + (n & 0b11111), (A))

void delay(int n)
{
   40300:	defffd04 	addi	sp,sp,-12
   40304:	df000215 	stw	fp,8(sp)
   40308:	df000204 	addi	fp,sp,8
   4030c:	e13fff15 	stw	r4,-4(fp)
	int i;
	for (i = n; i > 0; i--)
   40310:	e0bfff17 	ldw	r2,-4(fp)
   40314:	e0bffe15 	stw	r2,-8(fp)
   40318:	00000306 	br	40328 <delay+0x28>
   4031c:	e0bffe17 	ldw	r2,-8(fp)
   40320:	10bfffc4 	addi	r2,r2,-1
   40324:	e0bffe15 	stw	r2,-8(fp)
   40328:	e0bffe17 	ldw	r2,-8(fp)
   4032c:	00bffb16 	blt	zero,r2,4031c <delay+0x1c>
	{
		continue;
	}
}
   40330:	e037883a 	mov	sp,fp
   40334:	df000017 	ldw	fp,0(sp)
   40338:	dec00104 	addi	sp,sp,4
   4033c:	f800283a 	ret

00040340 <DCT>:

INT16 *data;

/* DCT for One block(8x8) */
void DCT(void)
{
   40340:	defffc04 	addi	sp,sp,-16
   40344:	dfc00315 	stw	ra,12(sp)
   40348:	df000215 	stw	fp,8(sp)
   4034c:	df000204 	addi	fp,sp,8
	static const UINT16 s1 = 3;
	static const UINT16 s2 = 10;
	static const UINT16 s3 = 13;

	/* read back from queue */
	for (i = 0; i < 64; i++)
   40350:	e03ffe0d 	sth	zero,-8(fp)
   40354:	00001006 	br	40398 <DCT+0x58>
	{
		READ_FIFO(&temp, OUT_BASE_2to3, CONTROL_BASE_2to3);
   40358:	e0bfff04 	addi	r2,fp,-4
   4035c:	1009883a 	mov	r4,r2
   40360:	014000b4 	movhi	r5,2
   40364:	29441b04 	addi	r5,r5,4204
   40368:	018000b4 	movhi	r6,2
   4036c:	31840004 	addi	r6,r6,4096
   40370:	00402580 	call	40258 <READ_FIFO>
		data[i] = temp; // Casting data
   40374:	d0e6d817 	ldw	r3,-25760(gp)
   40378:	e0bffe0b 	ldhu	r2,-8(fp)
   4037c:	1085883a 	add	r2,r2,r2
   40380:	1885883a 	add	r2,r3,r2
   40384:	e0ffff17 	ldw	r3,-4(fp)
   40388:	10c0000d 	sth	r3,0(r2)
	static const UINT16 s1 = 3;
	static const UINT16 s2 = 10;
	static const UINT16 s3 = 13;

	/* read back from queue */
	for (i = 0; i < 64; i++)
   4038c:	e0bffe0b 	ldhu	r2,-8(fp)
   40390:	10800044 	addi	r2,r2,1
   40394:	e0bffe0d 	sth	r2,-8(fp)
   40398:	e0bffe0b 	ldhu	r2,-8(fp)
   4039c:	10801030 	cmpltui	r2,r2,64
   403a0:	103fed1e 	bne	r2,zero,40358 <DCT+0x18>
	// 		printf("\n");
	// }

	// start_time = clock();

	for (i = 8; i > 0; i--)
   403a4:	00800204 	movi	r2,8
   403a8:	e0bffe0d 	sth	r2,-8(fp)
   403ac:	00006406 	br	40540 <DCT+0x200>
	{
		DCT_CI_MACRO(0, data[0]);
   403b0:	d0a6d817 	ldw	r2,-25760(gp)
   403b4:	1080000b 	ldhu	r2,0(r2)
   403b8:	10bfffcc 	andi	r2,r2,65535
   403bc:	10a0001c 	xori	r2,r2,32768
   403c0:	10a00004 	addi	r2,r2,-32768
   403c4:	1005c032 	custom	0,r2,r2,zero
		DCT_CI_MACRO(1, data[1]);
   403c8:	d0a6d817 	ldw	r2,-25760(gp)
   403cc:	10800084 	addi	r2,r2,2
   403d0:	1080000b 	ldhu	r2,0(r2)
   403d4:	10bfffcc 	andi	r2,r2,65535
   403d8:	10a0001c 	xori	r2,r2,32768
   403dc:	10a00004 	addi	r2,r2,-32768
   403e0:	1005c072 	custom	1,r2,r2,zero
		DCT_CI_MACRO(2, data[2]);
   403e4:	d0a6d817 	ldw	r2,-25760(gp)
   403e8:	10800104 	addi	r2,r2,4
   403ec:	1080000b 	ldhu	r2,0(r2)
   403f0:	10bfffcc 	andi	r2,r2,65535
   403f4:	10a0001c 	xori	r2,r2,32768
   403f8:	10a00004 	addi	r2,r2,-32768
   403fc:	1005c0b2 	custom	2,r2,r2,zero
		DCT_CI_MACRO(3, data[3]);
   40400:	d0a6d817 	ldw	r2,-25760(gp)
   40404:	10800184 	addi	r2,r2,6
   40408:	1080000b 	ldhu	r2,0(r2)
   4040c:	10bfffcc 	andi	r2,r2,65535
   40410:	10a0001c 	xori	r2,r2,32768
   40414:	10a00004 	addi	r2,r2,-32768
   40418:	1005c0f2 	custom	3,r2,r2,zero
		DCT_CI_MACRO(4, data[4]);
   4041c:	d0a6d817 	ldw	r2,-25760(gp)
   40420:	10800204 	addi	r2,r2,8
   40424:	1080000b 	ldhu	r2,0(r2)
   40428:	10bfffcc 	andi	r2,r2,65535
   4042c:	10a0001c 	xori	r2,r2,32768
   40430:	10a00004 	addi	r2,r2,-32768
   40434:	1005c132 	custom	4,r2,r2,zero
		DCT_CI_MACRO(5, data[5]);
   40438:	d0a6d817 	ldw	r2,-25760(gp)
   4043c:	10800284 	addi	r2,r2,10
   40440:	1080000b 	ldhu	r2,0(r2)
   40444:	10bfffcc 	andi	r2,r2,65535
   40448:	10a0001c 	xori	r2,r2,32768
   4044c:	10a00004 	addi	r2,r2,-32768
   40450:	1005c172 	custom	5,r2,r2,zero
		DCT_CI_MACRO(6, data[6]);
   40454:	d0a6d817 	ldw	r2,-25760(gp)
   40458:	10800304 	addi	r2,r2,12
   4045c:	1080000b 	ldhu	r2,0(r2)
   40460:	10bfffcc 	andi	r2,r2,65535
   40464:	10a0001c 	xori	r2,r2,32768
   40468:	10a00004 	addi	r2,r2,-32768
   4046c:	1005c1b2 	custom	6,r2,r2,zero
		DCT_CI_MACRO(7, data[7]);
   40470:	d0a6d817 	ldw	r2,-25760(gp)
   40474:	10800384 	addi	r2,r2,14
   40478:	1080000b 	ldhu	r2,0(r2)
   4047c:	10bfffcc 	andi	r2,r2,65535
   40480:	10a0001c 	xori	r2,r2,32768
   40484:	10a00004 	addi	r2,r2,-32768
   40488:	1005c1f2 	custom	7,r2,r2,zero

		data[0] = DCT_CI_MACRO(8, 0);
   4048c:	d0a6d817 	ldw	r2,-25760(gp)
   40490:	0007883a 	mov	r3,zero
   40494:	1807c232 	custom	8,r3,r3,zero
   40498:	10c0000d 	sth	r3,0(r2)
		data[1] = DCT_CI_MACRO(9, 0);
   4049c:	d0a6d817 	ldw	r2,-25760(gp)
   404a0:	10800084 	addi	r2,r2,2
   404a4:	0007883a 	mov	r3,zero
   404a8:	1807c272 	custom	9,r3,r3,zero
   404ac:	10c0000d 	sth	r3,0(r2)
		data[2] = DCT_CI_MACRO(10, 0);
   404b0:	d0a6d817 	ldw	r2,-25760(gp)
   404b4:	10800104 	addi	r2,r2,4
   404b8:	0007883a 	mov	r3,zero
   404bc:	1807c2b2 	custom	10,r3,r3,zero
   404c0:	10c0000d 	sth	r3,0(r2)
		data[3] = DCT_CI_MACRO(11, 0);
   404c4:	d0a6d817 	ldw	r2,-25760(gp)
   404c8:	10800184 	addi	r2,r2,6
   404cc:	0007883a 	mov	r3,zero
   404d0:	1807c2f2 	custom	11,r3,r3,zero
   404d4:	10c0000d 	sth	r3,0(r2)
		data[4] = DCT_CI_MACRO(12, 0);
   404d8:	d0a6d817 	ldw	r2,-25760(gp)
   404dc:	10800204 	addi	r2,r2,8
   404e0:	0007883a 	mov	r3,zero
   404e4:	1807c332 	custom	12,r3,r3,zero
   404e8:	10c0000d 	sth	r3,0(r2)
		data[5] = DCT_CI_MACRO(13, 0);
   404ec:	d0a6d817 	ldw	r2,-25760(gp)
   404f0:	10800284 	addi	r2,r2,10
   404f4:	0007883a 	mov	r3,zero
   404f8:	1807c372 	custom	13,r3,r3,zero
   404fc:	10c0000d 	sth	r3,0(r2)
		data[6] = DCT_CI_MACRO(14, 0);
   40500:	d0a6d817 	ldw	r2,-25760(gp)
   40504:	10800304 	addi	r2,r2,12
   40508:	0007883a 	mov	r3,zero
   4050c:	1807c3b2 	custom	14,r3,r3,zero
   40510:	10c0000d 	sth	r3,0(r2)
		data[7] = DCT_CI_MACRO(15, 0);
   40514:	d0a6d817 	ldw	r2,-25760(gp)
   40518:	10800384 	addi	r2,r2,14
   4051c:	0007883a 	mov	r3,zero
   40520:	1807c3f2 	custom	15,r3,r3,zero
   40524:	10c0000d 	sth	r3,0(r2)

		data += 8;
   40528:	d0a6d817 	ldw	r2,-25760(gp)
   4052c:	10800404 	addi	r2,r2,16
   40530:	d0a6d815 	stw	r2,-25760(gp)
	// 		printf("\n");
	// }

	// start_time = clock();

	for (i = 8; i > 0; i--)
   40534:	e0bffe0b 	ldhu	r2,-8(fp)
   40538:	10bfffc4 	addi	r2,r2,-1
   4053c:	e0bffe0d 	sth	r2,-8(fp)
   40540:	e0bffe0b 	ldhu	r2,-8(fp)
   40544:	103f9a1e 	bne	r2,zero,403b0 <DCT+0x70>
		data[7] = DCT_CI_MACRO(15, 0);

		data += 8;
	}

	data -= 64;
   40548:	d0a6d817 	ldw	r2,-25760(gp)
   4054c:	10bfe004 	addi	r2,r2,-128
   40550:	d0a6d815 	stw	r2,-25760(gp)

	for (i = 8; i > 0; i--)
   40554:	00800204 	movi	r2,8
   40558:	e0bffe0d 	sth	r2,-8(fp)
   4055c:	00006406 	br	406f0 <DCT+0x3b0>
	{
		DCT_CI_MACRO(0, data[0]); // Start the DCT component
   40560:	d0a6d817 	ldw	r2,-25760(gp)
   40564:	1080000b 	ldhu	r2,0(r2)
   40568:	10bfffcc 	andi	r2,r2,65535
   4056c:	10a0001c 	xori	r2,r2,32768
   40570:	10a00004 	addi	r2,r2,-32768
   40574:	1005c032 	custom	0,r2,r2,zero
		DCT_CI_MACRO(1, data[8]);
   40578:	d0a6d817 	ldw	r2,-25760(gp)
   4057c:	10800404 	addi	r2,r2,16
   40580:	1080000b 	ldhu	r2,0(r2)
   40584:	10bfffcc 	andi	r2,r2,65535
   40588:	10a0001c 	xori	r2,r2,32768
   4058c:	10a00004 	addi	r2,r2,-32768
   40590:	1005c072 	custom	1,r2,r2,zero
		DCT_CI_MACRO(2, data[16]);
   40594:	d0a6d817 	ldw	r2,-25760(gp)
   40598:	10800804 	addi	r2,r2,32
   4059c:	1080000b 	ldhu	r2,0(r2)
   405a0:	10bfffcc 	andi	r2,r2,65535
   405a4:	10a0001c 	xori	r2,r2,32768
   405a8:	10a00004 	addi	r2,r2,-32768
   405ac:	1005c0b2 	custom	2,r2,r2,zero
		DCT_CI_MACRO(3, data[24]);
   405b0:	d0a6d817 	ldw	r2,-25760(gp)
   405b4:	10800c04 	addi	r2,r2,48
   405b8:	1080000b 	ldhu	r2,0(r2)
   405bc:	10bfffcc 	andi	r2,r2,65535
   405c0:	10a0001c 	xori	r2,r2,32768
   405c4:	10a00004 	addi	r2,r2,-32768
   405c8:	1005c0f2 	custom	3,r2,r2,zero
		DCT_CI_MACRO(4, data[32]);
   405cc:	d0a6d817 	ldw	r2,-25760(gp)
   405d0:	10801004 	addi	r2,r2,64
   405d4:	1080000b 	ldhu	r2,0(r2)
   405d8:	10bfffcc 	andi	r2,r2,65535
   405dc:	10a0001c 	xori	r2,r2,32768
   405e0:	10a00004 	addi	r2,r2,-32768
   405e4:	1005c132 	custom	4,r2,r2,zero
		DCT_CI_MACRO(5, data[40]);
   405e8:	d0a6d817 	ldw	r2,-25760(gp)
   405ec:	10801404 	addi	r2,r2,80
   405f0:	1080000b 	ldhu	r2,0(r2)
   405f4:	10bfffcc 	andi	r2,r2,65535
   405f8:	10a0001c 	xori	r2,r2,32768
   405fc:	10a00004 	addi	r2,r2,-32768
   40600:	1005c172 	custom	5,r2,r2,zero
		DCT_CI_MACRO(6, data[48]);
   40604:	d0a6d817 	ldw	r2,-25760(gp)
   40608:	10801804 	addi	r2,r2,96
   4060c:	1080000b 	ldhu	r2,0(r2)
   40610:	10bfffcc 	andi	r2,r2,65535
   40614:	10a0001c 	xori	r2,r2,32768
   40618:	10a00004 	addi	r2,r2,-32768
   4061c:	1005c1b2 	custom	6,r2,r2,zero
		DCT_CI_MACRO(7, data[56]);
   40620:	d0a6d817 	ldw	r2,-25760(gp)
   40624:	10801c04 	addi	r2,r2,112
   40628:	1080000b 	ldhu	r2,0(r2)
   4062c:	10bfffcc 	andi	r2,r2,65535
   40630:	10a0001c 	xori	r2,r2,32768
   40634:	10a00004 	addi	r2,r2,-32768
   40638:	1005c1f2 	custom	7,r2,r2,zero

		data[0] = DCT_CI_MACRO(16, 0);
   4063c:	d0a6d817 	ldw	r2,-25760(gp)
   40640:	0007883a 	mov	r3,zero
   40644:	1807c432 	custom	16,r3,r3,zero
   40648:	10c0000d 	sth	r3,0(r2)
		data[8] = DCT_CI_MACRO(17, 0);
   4064c:	d0a6d817 	ldw	r2,-25760(gp)
   40650:	10800404 	addi	r2,r2,16
   40654:	0007883a 	mov	r3,zero
   40658:	1807c472 	custom	17,r3,r3,zero
   4065c:	10c0000d 	sth	r3,0(r2)
		data[16] = DCT_CI_MACRO(18, 0);
   40660:	d0a6d817 	ldw	r2,-25760(gp)
   40664:	10800804 	addi	r2,r2,32
   40668:	0007883a 	mov	r3,zero
   4066c:	1807c4b2 	custom	18,r3,r3,zero
   40670:	10c0000d 	sth	r3,0(r2)
		data[24] = DCT_CI_MACRO(19, 0);
   40674:	d0a6d817 	ldw	r2,-25760(gp)
   40678:	10800c04 	addi	r2,r2,48
   4067c:	0007883a 	mov	r3,zero
   40680:	1807c4f2 	custom	19,r3,r3,zero
   40684:	10c0000d 	sth	r3,0(r2)
		data[32] = DCT_CI_MACRO(20, 0);
   40688:	d0a6d817 	ldw	r2,-25760(gp)
   4068c:	10801004 	addi	r2,r2,64
   40690:	0007883a 	mov	r3,zero
   40694:	1807c532 	custom	20,r3,r3,zero
   40698:	10c0000d 	sth	r3,0(r2)
		data[40] = DCT_CI_MACRO(21, 0);
   4069c:	d0a6d817 	ldw	r2,-25760(gp)
   406a0:	10801404 	addi	r2,r2,80
   406a4:	0007883a 	mov	r3,zero
   406a8:	1807c572 	custom	21,r3,r3,zero
   406ac:	10c0000d 	sth	r3,0(r2)
		data[48] = DCT_CI_MACRO(22, 0);
   406b0:	d0a6d817 	ldw	r2,-25760(gp)
   406b4:	10801804 	addi	r2,r2,96
   406b8:	0007883a 	mov	r3,zero
   406bc:	1807c5b2 	custom	22,r3,r3,zero
   406c0:	10c0000d 	sth	r3,0(r2)
		data[56] = DCT_CI_MACRO(23, 0);
   406c4:	d0a6d817 	ldw	r2,-25760(gp)
   406c8:	10801c04 	addi	r2,r2,112
   406cc:	0007883a 	mov	r3,zero
   406d0:	1807c5f2 	custom	23,r3,r3,zero
   406d4:	10c0000d 	sth	r3,0(r2)

		data++;
   406d8:	d0a6d817 	ldw	r2,-25760(gp)
   406dc:	10800084 	addi	r2,r2,2
   406e0:	d0a6d815 	stw	r2,-25760(gp)
		data += 8;
	}

	data -= 64;

	for (i = 8; i > 0; i--)
   406e4:	e0bffe0b 	ldhu	r2,-8(fp)
   406e8:	10bfffc4 	addi	r2,r2,-1
   406ec:	e0bffe0d 	sth	r2,-8(fp)
   406f0:	e0bffe0b 	ldhu	r2,-8(fp)
   406f4:	103f9a1e 	bne	r2,zero,40560 <DCT+0x220>
		data[56] = DCT_CI_MACRO(23, 0);

		data++;
	}

	data -= 8;
   406f8:	d0a6d817 	ldw	r2,-25760(gp)
   406fc:	10bffc04 	addi	r2,r2,-16
   40700:	d0a6d815 	stw	r2,-25760(gp)

	// end_time = clock();
	// fprintf(log_file, "Time taken for DCT encoding: %f\n", (double)(end_time - start_time) / CLOCKS_PER_SEC);

	/* write out to queue */
	for (i = 0; i < 64; i++)
   40704:	e03ffe0d 	sth	zero,-8(fp)
   40708:	00001306 	br	40758 <DCT+0x418>
	{
		temp = data[i];
   4070c:	d0e6d817 	ldw	r3,-25760(gp)
   40710:	e0bffe0b 	ldhu	r2,-8(fp)
   40714:	1085883a 	add	r2,r2,r2
   40718:	1885883a 	add	r2,r3,r2
   4071c:	1080000b 	ldhu	r2,0(r2)
   40720:	10bfffcc 	andi	r2,r2,65535
   40724:	10a0001c 	xori	r2,r2,32768
   40728:	10a00004 	addi	r2,r2,-32768
   4072c:	e0bfff15 	stw	r2,-4(fp)
		WRITE_FIFO(&temp, IN_BASE_3to4, CONTROL_BASE_3to4); // Casting data
   40730:	e0bfff04 	addi	r2,fp,-4
   40734:	1009883a 	mov	r4,r2
   40738:	014000b4 	movhi	r5,2
   4073c:	29441a04 	addi	r5,r5,4200
   40740:	018000b4 	movhi	r6,2
   40744:	31840804 	addi	r6,r6,4128
   40748:	00401f40 	call	401f4 <WRITE_FIFO>

	// end_time = clock();
	// fprintf(log_file, "Time taken for DCT encoding: %f\n", (double)(end_time - start_time) / CLOCKS_PER_SEC);

	/* write out to queue */
	for (i = 0; i < 64; i++)
   4074c:	e0bffe0b 	ldhu	r2,-8(fp)
   40750:	10800044 	addi	r2,r2,1
   40754:	e0bffe0d 	sth	r2,-8(fp)
   40758:	e0bffe0b 	ldhu	r2,-8(fp)
   4075c:	10801030 	cmpltui	r2,r2,64
   40760:	103fea1e 	bne	r2,zero,4070c <DCT+0x3cc>
	{
		temp = data[i];
		WRITE_FIFO(&temp, IN_BASE_3to4, CONTROL_BASE_3to4); // Casting data
	}
}
   40764:	e037883a 	mov	sp,fp
   40768:	dfc00117 	ldw	ra,4(sp)
   4076c:	df000017 	ldw	fp,0(sp)
   40770:	dec00204 	addi	sp,sp,8
   40774:	f800283a 	ret

00040778 <main>:

int main(void)
{
   40778:	defffe04 	addi	sp,sp,-8
   4077c:	dfc00115 	stw	ra,4(sp)
   40780:	df000015 	stw	fp,0(sp)
   40784:	d839883a 	mov	fp,sp
	printf("Starting CPU3\n");
   40788:	01000134 	movhi	r4,4
   4078c:	2119b304 	addi	r4,r4,26316
   40790:	004101c0 	call	4101c <puts>
	// 	fprintf(stderr, "Error opening log file\n");
	// 	return 1;
	// }

	/* Initialize FIFO */
	delay(100000);
   40794:	010000b4 	movhi	r4,2
   40798:	2121a804 	addi	r4,r4,-31072
   4079c:	00403000 	call	40300 <delay>
	FIFO_INIT(CONTROL_BASE_3to4);
   407a0:	010000b4 	movhi	r4,2
   407a4:	21040804 	addi	r4,r4,4128
   407a8:	00402c00 	call	402c0 <FIFO_INIT>
	delay(100000);
   407ac:	010000b4 	movhi	r4,2
   407b0:	2121a804 	addi	r4,r4,-31072
   407b4:	00403000 	call	40300 <delay>

	data = (INT16 *)malloc(sizeof(INT16) * 64);
   407b8:	01002004 	movi	r4,128
   407bc:	00407ec0 	call	407ec <malloc>
   407c0:	d0a6d815 	stw	r2,-25760(gp)

	while (1)
	{
		printf("DCT Started\n");
   407c4:	01000134 	movhi	r4,4
   407c8:	2119b704 	addi	r4,r4,26332
   407cc:	004101c0 	call	4101c <puts>

		DCT();
   407d0:	00403400 	call	40340 <DCT>
		DCT();
   407d4:	00403400 	call	40340 <DCT>
		DCT();
   407d8:	00403400 	call	40340 <DCT>

		printf("DCT Done\n");
   407dc:	01000134 	movhi	r4,4
   407e0:	2119ba04 	addi	r4,r4,26344
   407e4:	004101c0 	call	4101c <puts>
	}
   407e8:	003ff606 	br	407c4 <main+0x4c>

000407ec <malloc>:
   407ec:	00800174 	movhi	r2,5
   407f0:	10a06304 	addi	r2,r2,-32372
   407f4:	200b883a 	mov	r5,r4
   407f8:	11000017 	ldw	r4,0(r2)
   407fc:	00408141 	jmpi	40814 <_malloc_r>

00040800 <free>:
   40800:	00800174 	movhi	r2,5
   40804:	10a06304 	addi	r2,r2,-32372
   40808:	200b883a 	mov	r5,r4
   4080c:	11000017 	ldw	r4,0(r2)
   40810:	004125c1 	jmpi	4125c <_free_r>

00040814 <_malloc_r>:
   40814:	defff604 	addi	sp,sp,-40
   40818:	dc800215 	stw	r18,8(sp)
   4081c:	dfc00915 	stw	ra,36(sp)
   40820:	df000815 	stw	fp,32(sp)
   40824:	ddc00715 	stw	r23,28(sp)
   40828:	dd800615 	stw	r22,24(sp)
   4082c:	dd400515 	stw	r21,20(sp)
   40830:	dd000415 	stw	r20,16(sp)
   40834:	dcc00315 	stw	r19,12(sp)
   40838:	dc400115 	stw	r17,4(sp)
   4083c:	dc000015 	stw	r16,0(sp)
   40840:	288002c4 	addi	r2,r5,11
   40844:	00c00584 	movi	r3,22
   40848:	2025883a 	mov	r18,r4
   4084c:	18802b2e 	bgeu	r3,r2,408fc <_malloc_r+0xe8>
   40850:	047ffe04 	movi	r17,-8
   40854:	1462703a 	and	r17,r2,r17
   40858:	88002a16 	blt	r17,zero,40904 <_malloc_r+0xf0>
   4085c:	89402936 	bltu	r17,r5,40904 <_malloc_r+0xf0>
   40860:	9009883a 	mov	r4,r18
   40864:	004391c0 	call	4391c <__malloc_lock>
   40868:	00807dc4 	movi	r2,503
   4086c:	14402936 	bltu	r2,r17,40914 <_malloc_r+0x100>
   40870:	8808d0fa 	srli	r4,r17,3
   40874:	04c00134 	movhi	r19,4
   40878:	9cd9cd04 	addi	r19,r19,26420
   4087c:	2105883a 	add	r2,r4,r4
   40880:	1085883a 	add	r2,r2,r2
   40884:	1085883a 	add	r2,r2,r2
   40888:	9885883a 	add	r2,r19,r2
   4088c:	14000317 	ldw	r16,12(r2)
   40890:	80815526 	beq	r16,r2,40de8 <_malloc_r+0x5d4>
   40894:	81000117 	ldw	r4,4(r16)
   40898:	00bfff04 	movi	r2,-4
   4089c:	80c00317 	ldw	r3,12(r16)
   408a0:	2084703a 	and	r2,r4,r2
   408a4:	8085883a 	add	r2,r16,r2
   408a8:	11800117 	ldw	r6,4(r2)
   408ac:	81400217 	ldw	r5,8(r16)
   408b0:	9009883a 	mov	r4,r18
   408b4:	31800054 	ori	r6,r6,1
   408b8:	11800115 	stw	r6,4(r2)
   408bc:	28c00315 	stw	r3,12(r5)
   408c0:	19400215 	stw	r5,8(r3)
   408c4:	004393c0 	call	4393c <__malloc_unlock>
   408c8:	80800204 	addi	r2,r16,8
   408cc:	dfc00917 	ldw	ra,36(sp)
   408d0:	df000817 	ldw	fp,32(sp)
   408d4:	ddc00717 	ldw	r23,28(sp)
   408d8:	dd800617 	ldw	r22,24(sp)
   408dc:	dd400517 	ldw	r21,20(sp)
   408e0:	dd000417 	ldw	r20,16(sp)
   408e4:	dcc00317 	ldw	r19,12(sp)
   408e8:	dc800217 	ldw	r18,8(sp)
   408ec:	dc400117 	ldw	r17,4(sp)
   408f0:	dc000017 	ldw	r16,0(sp)
   408f4:	dec00a04 	addi	sp,sp,40
   408f8:	f800283a 	ret
   408fc:	04400404 	movi	r17,16
   40900:	897fd72e 	bgeu	r17,r5,40860 <_malloc_r+0x4c>
   40904:	00800304 	movi	r2,12
   40908:	90800015 	stw	r2,0(r18)
   4090c:	0005883a 	mov	r2,zero
   40910:	003fee06 	br	408cc <_malloc_r+0xb8>
   40914:	8808d27a 	srli	r4,r17,9
   40918:	20007126 	beq	r4,zero,40ae0 <_malloc_r+0x2cc>
   4091c:	00800104 	movi	r2,4
   40920:	1100eb36 	bltu	r2,r4,40cd0 <_malloc_r+0x4bc>
   40924:	8808d1ba 	srli	r4,r17,6
   40928:	21000e04 	addi	r4,r4,56
   4092c:	210b883a 	add	r5,r4,r4
   40930:	294b883a 	add	r5,r5,r5
   40934:	294b883a 	add	r5,r5,r5
   40938:	04c00134 	movhi	r19,4
   4093c:	9cd9cd04 	addi	r19,r19,26420
   40940:	994b883a 	add	r5,r19,r5
   40944:	2c000317 	ldw	r16,12(r5)
   40948:	2c000e26 	beq	r5,r16,40984 <_malloc_r+0x170>
   4094c:	80c00117 	ldw	r3,4(r16)
   40950:	01ffff04 	movi	r7,-4
   40954:	018003c4 	movi	r6,15
   40958:	19c6703a 	and	r3,r3,r7
   4095c:	1c45c83a 	sub	r2,r3,r17
   40960:	30800716 	blt	r6,r2,40980 <_malloc_r+0x16c>
   40964:	1000610e 	bge	r2,zero,40aec <_malloc_r+0x2d8>
   40968:	84000317 	ldw	r16,12(r16)
   4096c:	2c000526 	beq	r5,r16,40984 <_malloc_r+0x170>
   40970:	80c00117 	ldw	r3,4(r16)
   40974:	19c6703a 	and	r3,r3,r7
   40978:	1c45c83a 	sub	r2,r3,r17
   4097c:	30bff90e 	bge	r6,r2,40964 <_malloc_r+0x150>
   40980:	213fffc4 	addi	r4,r4,-1
   40984:	21000044 	addi	r4,r4,1
   40988:	9c000417 	ldw	r16,16(r19)
   4098c:	00c00134 	movhi	r3,4
   40990:	18d9cd04 	addi	r3,r3,26420
   40994:	1a400204 	addi	r9,r3,8
   40998:	8240ff26 	beq	r16,r9,40d98 <_malloc_r+0x584>
   4099c:	81400117 	ldw	r5,4(r16)
   409a0:	00bfff04 	movi	r2,-4
   409a4:	018003c4 	movi	r6,15
   409a8:	2884703a 	and	r2,r5,r2
   409ac:	144bc83a 	sub	r5,r2,r17
   409b0:	3140ea16 	blt	r6,r5,40d5c <_malloc_r+0x548>
   409b4:	1a400515 	stw	r9,20(r3)
   409b8:	1a400415 	stw	r9,16(r3)
   409bc:	2800570e 	bge	r5,zero,40b1c <_malloc_r+0x308>
   409c0:	01407fc4 	movi	r5,511
   409c4:	2880ca36 	bltu	r5,r2,40cf0 <_malloc_r+0x4dc>
   409c8:	1004d0fa 	srli	r2,r2,3
   409cc:	02000044 	movi	r8,1
   409d0:	19c00117 	ldw	r7,4(r3)
   409d4:	108b883a 	add	r5,r2,r2
   409d8:	294b883a 	add	r5,r5,r5
   409dc:	1005d0ba 	srai	r2,r2,2
   409e0:	294b883a 	add	r5,r5,r5
   409e4:	28cb883a 	add	r5,r5,r3
   409e8:	29800217 	ldw	r6,8(r5)
   409ec:	4084983a 	sll	r2,r8,r2
   409f0:	81400315 	stw	r5,12(r16)
   409f4:	81800215 	stw	r6,8(r16)
   409f8:	11c4b03a 	or	r2,r2,r7
   409fc:	18800115 	stw	r2,4(r3)
   40a00:	2c000215 	stw	r16,8(r5)
   40a04:	34000315 	stw	r16,12(r6)
   40a08:	200bd0ba 	srai	r5,r4,2
   40a0c:	00c00044 	movi	r3,1
   40a10:	194a983a 	sll	r5,r3,r5
   40a14:	11404936 	bltu	r2,r5,40b3c <_malloc_r+0x328>
   40a18:	1146703a 	and	r3,r2,r5
   40a1c:	18000a1e 	bne	r3,zero,40a48 <_malloc_r+0x234>
   40a20:	00ffff04 	movi	r3,-4
   40a24:	294b883a 	add	r5,r5,r5
   40a28:	20c8703a 	and	r4,r4,r3
   40a2c:	1146703a 	and	r3,r2,r5
   40a30:	21000104 	addi	r4,r4,4
   40a34:	1800041e 	bne	r3,zero,40a48 <_malloc_r+0x234>
   40a38:	294b883a 	add	r5,r5,r5
   40a3c:	1146703a 	and	r3,r2,r5
   40a40:	21000104 	addi	r4,r4,4
   40a44:	183ffc26 	beq	r3,zero,40a38 <_malloc_r+0x224>
   40a48:	023fff04 	movi	r8,-4
   40a4c:	01c003c4 	movi	r7,15
   40a50:	2105883a 	add	r2,r4,r4
   40a54:	1085883a 	add	r2,r2,r2
   40a58:	1085883a 	add	r2,r2,r2
   40a5c:	9899883a 	add	r12,r19,r2
   40a60:	62800304 	addi	r10,r12,12
   40a64:	2017883a 	mov	r11,r4
   40a68:	54000017 	ldw	r16,0(r10)
   40a6c:	51bffd04 	addi	r6,r10,-12
   40a70:	8180041e 	bne	r16,r6,40a84 <_malloc_r+0x270>
   40a74:	0000ca06 	br	40da0 <_malloc_r+0x58c>
   40a78:	10001c0e 	bge	r2,zero,40aec <_malloc_r+0x2d8>
   40a7c:	84000317 	ldw	r16,12(r16)
   40a80:	8180c726 	beq	r16,r6,40da0 <_malloc_r+0x58c>
   40a84:	80c00117 	ldw	r3,4(r16)
   40a88:	1a06703a 	and	r3,r3,r8
   40a8c:	1c45c83a 	sub	r2,r3,r17
   40a90:	38bff90e 	bge	r7,r2,40a78 <_malloc_r+0x264>
   40a94:	81000317 	ldw	r4,12(r16)
   40a98:	81400217 	ldw	r5,8(r16)
   40a9c:	8447883a 	add	r3,r16,r17
   40aa0:	8c400054 	ori	r17,r17,1
   40aa4:	29000315 	stw	r4,12(r5)
   40aa8:	21400215 	stw	r5,8(r4)
   40aac:	84400115 	stw	r17,4(r16)
   40ab0:	1889883a 	add	r4,r3,r2
   40ab4:	11400054 	ori	r5,r2,1
   40ab8:	98c00515 	stw	r3,20(r19)
   40abc:	98c00415 	stw	r3,16(r19)
   40ac0:	20800015 	stw	r2,0(r4)
   40ac4:	1a400315 	stw	r9,12(r3)
   40ac8:	1a400215 	stw	r9,8(r3)
   40acc:	19400115 	stw	r5,4(r3)
   40ad0:	9009883a 	mov	r4,r18
   40ad4:	004393c0 	call	4393c <__malloc_unlock>
   40ad8:	80800204 	addi	r2,r16,8
   40adc:	003f7b06 	br	408cc <_malloc_r+0xb8>
   40ae0:	8808d0fa 	srli	r4,r17,3
   40ae4:	210b883a 	add	r5,r4,r4
   40ae8:	003f9106 	br	40930 <_malloc_r+0x11c>
   40aec:	80c7883a 	add	r3,r16,r3
   40af0:	19400117 	ldw	r5,4(r3)
   40af4:	80800317 	ldw	r2,12(r16)
   40af8:	81000217 	ldw	r4,8(r16)
   40afc:	29400054 	ori	r5,r5,1
   40b00:	19400115 	stw	r5,4(r3)
   40b04:	20800315 	stw	r2,12(r4)
   40b08:	11000215 	stw	r4,8(r2)
   40b0c:	9009883a 	mov	r4,r18
   40b10:	004393c0 	call	4393c <__malloc_unlock>
   40b14:	80800204 	addi	r2,r16,8
   40b18:	003f6c06 	br	408cc <_malloc_r+0xb8>
   40b1c:	8085883a 	add	r2,r16,r2
   40b20:	10c00117 	ldw	r3,4(r2)
   40b24:	9009883a 	mov	r4,r18
   40b28:	18c00054 	ori	r3,r3,1
   40b2c:	10c00115 	stw	r3,4(r2)
   40b30:	004393c0 	call	4393c <__malloc_unlock>
   40b34:	80800204 	addi	r2,r16,8
   40b38:	003f6406 	br	408cc <_malloc_r+0xb8>
   40b3c:	9c000217 	ldw	r16,8(r19)
   40b40:	00bfff04 	movi	r2,-4
   40b44:	85400117 	ldw	r21,4(r16)
   40b48:	a8aa703a 	and	r21,r21,r2
   40b4c:	ac400336 	bltu	r21,r17,40b5c <_malloc_r+0x348>
   40b50:	ac45c83a 	sub	r2,r21,r17
   40b54:	00c003c4 	movi	r3,15
   40b58:	18805316 	blt	r3,r2,40ca8 <_malloc_r+0x494>
   40b5c:	d5e6db17 	ldw	r23,-25748(gp)
   40b60:	d0e00517 	ldw	r3,-32748(gp)
   40b64:	00bfffc4 	movi	r2,-1
   40b68:	8579883a 	add	fp,r16,r21
   40b6c:	8def883a 	add	r23,r17,r23
   40b70:	1880d226 	beq	r3,r2,40ebc <_malloc_r+0x6a8>
   40b74:	bdc403c4 	addi	r23,r23,4111
   40b78:	00bc0004 	movi	r2,-4096
   40b7c:	b8ae703a 	and	r23,r23,r2
   40b80:	9009883a 	mov	r4,r18
   40b84:	b80b883a 	mov	r5,r23
   40b88:	00410300 	call	41030 <_sbrk_r>
   40b8c:	1029883a 	mov	r20,r2
   40b90:	00bfffc4 	movi	r2,-1
   40b94:	a080d126 	beq	r20,r2,40edc <_malloc_r+0x6c8>
   40b98:	a7009f36 	bltu	r20,fp,40e18 <_malloc_r+0x604>
   40b9c:	05800174 	movhi	r22,5
   40ba0:	b5a73e04 	addi	r22,r22,-25352
   40ba4:	b0800017 	ldw	r2,0(r22)
   40ba8:	b885883a 	add	r2,r23,r2
   40bac:	b0800015 	stw	r2,0(r22)
   40bb0:	e500cf26 	beq	fp,r20,40ef0 <_malloc_r+0x6dc>
   40bb4:	d1200517 	ldw	r4,-32748(gp)
   40bb8:	00ffffc4 	movi	r3,-1
   40bbc:	20c0e026 	beq	r4,r3,40f40 <_malloc_r+0x72c>
   40bc0:	a739c83a 	sub	fp,r20,fp
   40bc4:	1705883a 	add	r2,r2,fp
   40bc8:	b0800015 	stw	r2,0(r22)
   40bcc:	a08001cc 	andi	r2,r20,7
   40bd0:	1000a526 	beq	r2,zero,40e68 <_malloc_r+0x654>
   40bd4:	a0a9c83a 	sub	r20,r20,r2
   40bd8:	00c40204 	movi	r3,4104
   40bdc:	a5000204 	addi	r20,r20,8
   40be0:	1885c83a 	sub	r2,r3,r2
   40be4:	a5c7883a 	add	r3,r20,r23
   40be8:	18c3ffcc 	andi	r3,r3,4095
   40bec:	10efc83a 	sub	r23,r2,r3
   40bf0:	9009883a 	mov	r4,r18
   40bf4:	b80b883a 	mov	r5,r23
   40bf8:	00410300 	call	41030 <_sbrk_r>
   40bfc:	00ffffc4 	movi	r3,-1
   40c00:	10c0cc26 	beq	r2,r3,40f34 <_malloc_r+0x720>
   40c04:	1505c83a 	sub	r2,r2,r20
   40c08:	b887883a 	add	r3,r23,r2
   40c0c:	18c00054 	ori	r3,r3,1
   40c10:	b0800017 	ldw	r2,0(r22)
   40c14:	9d000215 	stw	r20,8(r19)
   40c18:	a0c00115 	stw	r3,4(r20)
   40c1c:	b885883a 	add	r2,r23,r2
   40c20:	b0800015 	stw	r2,0(r22)
   40c24:	84c00e26 	beq	r16,r19,40c60 <_malloc_r+0x44c>
   40c28:	00c003c4 	movi	r3,15
   40c2c:	1d40902e 	bgeu	r3,r21,40e70 <_malloc_r+0x65c>
   40c30:	ad7ffd04 	addi	r21,r21,-12
   40c34:	013ffe04 	movi	r4,-8
   40c38:	a908703a 	and	r4,r21,r4
   40c3c:	810b883a 	add	r5,r16,r4
   40c40:	01800144 	movi	r6,5
   40c44:	29800115 	stw	r6,4(r5)
   40c48:	29800215 	stw	r6,8(r5)
   40c4c:	81400117 	ldw	r5,4(r16)
   40c50:	2940004c 	andi	r5,r5,1
   40c54:	214ab03a 	or	r5,r4,r5
   40c58:	81400115 	stw	r5,4(r16)
   40c5c:	1900ae36 	bltu	r3,r4,40f18 <_malloc_r+0x704>
   40c60:	d0e6da17 	ldw	r3,-25752(gp)
   40c64:	1880012e 	bgeu	r3,r2,40c6c <_malloc_r+0x458>
   40c68:	d0a6da15 	stw	r2,-25752(gp)
   40c6c:	d0e6d917 	ldw	r3,-25756(gp)
   40c70:	9c000217 	ldw	r16,8(r19)
   40c74:	1880012e 	bgeu	r3,r2,40c7c <_malloc_r+0x468>
   40c78:	d0a6d915 	stw	r2,-25756(gp)
   40c7c:	80c00117 	ldw	r3,4(r16)
   40c80:	00bfff04 	movi	r2,-4
   40c84:	1886703a 	and	r3,r3,r2
   40c88:	1c45c83a 	sub	r2,r3,r17
   40c8c:	1c400236 	bltu	r3,r17,40c98 <_malloc_r+0x484>
   40c90:	00c003c4 	movi	r3,15
   40c94:	18800416 	blt	r3,r2,40ca8 <_malloc_r+0x494>
   40c98:	9009883a 	mov	r4,r18
   40c9c:	004393c0 	call	4393c <__malloc_unlock>
   40ca0:	0005883a 	mov	r2,zero
   40ca4:	003f0906 	br	408cc <_malloc_r+0xb8>
   40ca8:	88c00054 	ori	r3,r17,1
   40cac:	10800054 	ori	r2,r2,1
   40cb0:	80c00115 	stw	r3,4(r16)
   40cb4:	8463883a 	add	r17,r16,r17
   40cb8:	88800115 	stw	r2,4(r17)
   40cbc:	9009883a 	mov	r4,r18
   40cc0:	9c400215 	stw	r17,8(r19)
   40cc4:	004393c0 	call	4393c <__malloc_unlock>
   40cc8:	80800204 	addi	r2,r16,8
   40ccc:	003eff06 	br	408cc <_malloc_r+0xb8>
   40cd0:	00800504 	movi	r2,20
   40cd4:	1100492e 	bgeu	r2,r4,40dfc <_malloc_r+0x5e8>
   40cd8:	00801504 	movi	r2,84
   40cdc:	11005c36 	bltu	r2,r4,40e50 <_malloc_r+0x63c>
   40ce0:	8808d33a 	srli	r4,r17,12
   40ce4:	21001b84 	addi	r4,r4,110
   40ce8:	210b883a 	add	r5,r4,r4
   40cec:	003f1006 	br	40930 <_malloc_r+0x11c>
   40cf0:	1006d27a 	srli	r3,r2,9
   40cf4:	01400104 	movi	r5,4
   40cf8:	28c0432e 	bgeu	r5,r3,40e08 <_malloc_r+0x5f4>
   40cfc:	01400504 	movi	r5,20
   40d00:	28c07036 	bltu	r5,r3,40ec4 <_malloc_r+0x6b0>
   40d04:	194016c4 	addi	r5,r3,91
   40d08:	294d883a 	add	r6,r5,r5
   40d0c:	318d883a 	add	r6,r6,r6
   40d10:	318d883a 	add	r6,r6,r6
   40d14:	998d883a 	add	r6,r19,r6
   40d18:	30c00217 	ldw	r3,8(r6)
   40d1c:	01c00134 	movhi	r7,4
   40d20:	39d9cd04 	addi	r7,r7,26420
   40d24:	19805726 	beq	r3,r6,40e84 <_malloc_r+0x670>
   40d28:	01ffff04 	movi	r7,-4
   40d2c:	19400117 	ldw	r5,4(r3)
   40d30:	29ca703a 	and	r5,r5,r7
   40d34:	1140022e 	bgeu	r2,r5,40d40 <_malloc_r+0x52c>
   40d38:	18c00217 	ldw	r3,8(r3)
   40d3c:	30fffb1e 	bne	r6,r3,40d2c <_malloc_r+0x518>
   40d40:	19400317 	ldw	r5,12(r3)
   40d44:	98800117 	ldw	r2,4(r19)
   40d48:	81400315 	stw	r5,12(r16)
   40d4c:	80c00215 	stw	r3,8(r16)
   40d50:	2c000215 	stw	r16,8(r5)
   40d54:	1c000315 	stw	r16,12(r3)
   40d58:	003f2b06 	br	40a08 <_malloc_r+0x1f4>
   40d5c:	8445883a 	add	r2,r16,r17
   40d60:	8c400054 	ori	r17,r17,1
   40d64:	18800515 	stw	r2,20(r3)
   40d68:	18800415 	stw	r2,16(r3)
   40d6c:	29000054 	ori	r4,r5,1
   40d70:	1147883a 	add	r3,r2,r5
   40d74:	84400115 	stw	r17,4(r16)
   40d78:	11000115 	stw	r4,4(r2)
   40d7c:	12400315 	stw	r9,12(r2)
   40d80:	12400215 	stw	r9,8(r2)
   40d84:	19400015 	stw	r5,0(r3)
   40d88:	9009883a 	mov	r4,r18
   40d8c:	004393c0 	call	4393c <__malloc_unlock>
   40d90:	80800204 	addi	r2,r16,8
   40d94:	003ecd06 	br	408cc <_malloc_r+0xb8>
   40d98:	18800117 	ldw	r2,4(r3)
   40d9c:	003f1a06 	br	40a08 <_malloc_r+0x1f4>
   40da0:	5ac00044 	addi	r11,r11,1
   40da4:	588000cc 	andi	r2,r11,3
   40da8:	52800204 	addi	r10,r10,8
   40dac:	103f2e1e 	bne	r2,zero,40a68 <_malloc_r+0x254>
   40db0:	20c000cc 	andi	r3,r4,3
   40db4:	60bffe04 	addi	r2,r12,-8
   40db8:	18006f26 	beq	r3,zero,40f78 <_malloc_r+0x764>
   40dbc:	63000017 	ldw	r12,0(r12)
   40dc0:	213fffc4 	addi	r4,r4,-1
   40dc4:	60bffa26 	beq	r12,r2,40db0 <_malloc_r+0x59c>
   40dc8:	98800117 	ldw	r2,4(r19)
   40dcc:	294b883a 	add	r5,r5,r5
   40dd0:	117f5a36 	bltu	r2,r5,40b3c <_malloc_r+0x328>
   40dd4:	283f5926 	beq	r5,zero,40b3c <_malloc_r+0x328>
   40dd8:	1146703a 	and	r3,r2,r5
   40ddc:	18001626 	beq	r3,zero,40e38 <_malloc_r+0x624>
   40de0:	5809883a 	mov	r4,r11
   40de4:	003f1a06 	br	40a50 <_malloc_r+0x23c>
   40de8:	80800204 	addi	r2,r16,8
   40dec:	84000517 	ldw	r16,20(r16)
   40df0:	143ea81e 	bne	r2,r16,40894 <_malloc_r+0x80>
   40df4:	21000084 	addi	r4,r4,2
   40df8:	003ee306 	br	40988 <_malloc_r+0x174>
   40dfc:	210016c4 	addi	r4,r4,91
   40e00:	210b883a 	add	r5,r4,r4
   40e04:	003eca06 	br	40930 <_malloc_r+0x11c>
   40e08:	100ad1ba 	srli	r5,r2,6
   40e0c:	29400e04 	addi	r5,r5,56
   40e10:	294d883a 	add	r6,r5,r5
   40e14:	003fbd06 	br	40d0c <_malloc_r+0x4f8>
   40e18:	84ff6026 	beq	r16,r19,40b9c <_malloc_r+0x388>
   40e1c:	00800134 	movhi	r2,4
   40e20:	1099cd04 	addi	r2,r2,26420
   40e24:	14000217 	ldw	r16,8(r2)
   40e28:	00bfff04 	movi	r2,-4
   40e2c:	80c00117 	ldw	r3,4(r16)
   40e30:	1886703a 	and	r3,r3,r2
   40e34:	003f9406 	br	40c88 <_malloc_r+0x474>
   40e38:	294b883a 	add	r5,r5,r5
   40e3c:	1146703a 	and	r3,r2,r5
   40e40:	5ac00104 	addi	r11,r11,4
   40e44:	183ffc26 	beq	r3,zero,40e38 <_malloc_r+0x624>
   40e48:	5809883a 	mov	r4,r11
   40e4c:	003f0006 	br	40a50 <_malloc_r+0x23c>
   40e50:	00805504 	movi	r2,340
   40e54:	11001336 	bltu	r2,r4,40ea4 <_malloc_r+0x690>
   40e58:	8808d3fa 	srli	r4,r17,15
   40e5c:	21001dc4 	addi	r4,r4,119
   40e60:	210b883a 	add	r5,r4,r4
   40e64:	003eb206 	br	40930 <_malloc_r+0x11c>
   40e68:	00840004 	movi	r2,4096
   40e6c:	003f5d06 	br	40be4 <_malloc_r+0x3d0>
   40e70:	00800044 	movi	r2,1
   40e74:	a0800115 	stw	r2,4(r20)
   40e78:	a021883a 	mov	r16,r20
   40e7c:	0007883a 	mov	r3,zero
   40e80:	003f8106 	br	40c88 <_malloc_r+0x474>
   40e84:	280bd0ba 	srai	r5,r5,2
   40e88:	01800044 	movi	r6,1
   40e8c:	38800117 	ldw	r2,4(r7)
   40e90:	314c983a 	sll	r6,r6,r5
   40e94:	180b883a 	mov	r5,r3
   40e98:	3084b03a 	or	r2,r6,r2
   40e9c:	38800115 	stw	r2,4(r7)
   40ea0:	003fa906 	br	40d48 <_malloc_r+0x534>
   40ea4:	00815504 	movi	r2,1364
   40ea8:	11001836 	bltu	r2,r4,40f0c <_malloc_r+0x6f8>
   40eac:	8808d4ba 	srli	r4,r17,18
   40eb0:	21001f04 	addi	r4,r4,124
   40eb4:	210b883a 	add	r5,r4,r4
   40eb8:	003e9d06 	br	40930 <_malloc_r+0x11c>
   40ebc:	bdc00404 	addi	r23,r23,16
   40ec0:	003f2f06 	br	40b80 <_malloc_r+0x36c>
   40ec4:	01401504 	movi	r5,84
   40ec8:	28c01f36 	bltu	r5,r3,40f48 <_malloc_r+0x734>
   40ecc:	100ad33a 	srli	r5,r2,12
   40ed0:	29401b84 	addi	r5,r5,110
   40ed4:	294d883a 	add	r6,r5,r5
   40ed8:	003f8c06 	br	40d0c <_malloc_r+0x4f8>
   40edc:	9c000217 	ldw	r16,8(r19)
   40ee0:	00bfff04 	movi	r2,-4
   40ee4:	80c00117 	ldw	r3,4(r16)
   40ee8:	1886703a 	and	r3,r3,r2
   40eec:	003f6606 	br	40c88 <_malloc_r+0x474>
   40ef0:	e0c3ffcc 	andi	r3,fp,4095
   40ef4:	183f2f1e 	bne	r3,zero,40bb4 <_malloc_r+0x3a0>
   40ef8:	98c00217 	ldw	r3,8(r19)
   40efc:	bd49883a 	add	r4,r23,r21
   40f00:	21000054 	ori	r4,r4,1
   40f04:	19000115 	stw	r4,4(r3)
   40f08:	003f5506 	br	40c60 <_malloc_r+0x44c>
   40f0c:	01403f04 	movi	r5,252
   40f10:	01001f84 	movi	r4,126
   40f14:	003e8606 	br	40930 <_malloc_r+0x11c>
   40f18:	9009883a 	mov	r4,r18
   40f1c:	81400204 	addi	r5,r16,8
   40f20:	004125c0 	call	4125c <_free_r>
   40f24:	00800174 	movhi	r2,5
   40f28:	10a73e04 	addi	r2,r2,-25352
   40f2c:	10800017 	ldw	r2,0(r2)
   40f30:	003f4b06 	br	40c60 <_malloc_r+0x44c>
   40f34:	00c00044 	movi	r3,1
   40f38:	002f883a 	mov	r23,zero
   40f3c:	003f3406 	br	40c10 <_malloc_r+0x3fc>
   40f40:	d5200515 	stw	r20,-32748(gp)
   40f44:	003f2106 	br	40bcc <_malloc_r+0x3b8>
   40f48:	01405504 	movi	r5,340
   40f4c:	28c00436 	bltu	r5,r3,40f60 <_malloc_r+0x74c>
   40f50:	100ad3fa 	srli	r5,r2,15
   40f54:	29401dc4 	addi	r5,r5,119
   40f58:	294d883a 	add	r6,r5,r5
   40f5c:	003f6b06 	br	40d0c <_malloc_r+0x4f8>
   40f60:	01415504 	movi	r5,1364
   40f64:	28c00936 	bltu	r5,r3,40f8c <_malloc_r+0x778>
   40f68:	100ad4ba 	srli	r5,r2,18
   40f6c:	29401f04 	addi	r5,r5,124
   40f70:	294d883a 	add	r6,r5,r5
   40f74:	003f6506 	br	40d0c <_malloc_r+0x4f8>
   40f78:	98800117 	ldw	r2,4(r19)
   40f7c:	0146303a 	nor	r3,zero,r5
   40f80:	1884703a 	and	r2,r3,r2
   40f84:	98800115 	stw	r2,4(r19)
   40f88:	003f9006 	br	40dcc <_malloc_r+0x5b8>
   40f8c:	01803f04 	movi	r6,252
   40f90:	01401f84 	movi	r5,126
   40f94:	003f5d06 	br	40d0c <_malloc_r+0x4f8>

00040f98 <_puts_r>:
   40f98:	defff604 	addi	sp,sp,-40
   40f9c:	dc400815 	stw	r17,32(sp)
   40fa0:	2023883a 	mov	r17,r4
   40fa4:	2809883a 	mov	r4,r5
   40fa8:	dc000715 	stw	r16,28(sp)
   40fac:	dfc00915 	stw	ra,36(sp)
   40fb0:	2821883a 	mov	r16,r5
   40fb4:	00410940 	call	41094 <strlen>
   40fb8:	10c00044 	addi	r3,r2,1
   40fbc:	d8800115 	stw	r2,4(sp)
   40fc0:	89400217 	ldw	r5,8(r17)
   40fc4:	00800134 	movhi	r2,4
   40fc8:	1099bd04 	addi	r2,r2,26356
   40fcc:	d8800215 	stw	r2,8(sp)
   40fd0:	00800044 	movi	r2,1
   40fd4:	d8800315 	stw	r2,12(sp)
   40fd8:	8809883a 	mov	r4,r17
   40fdc:	00800084 	movi	r2,2
   40fe0:	d9800404 	addi	r6,sp,16
   40fe4:	dc000015 	stw	r16,0(sp)
   40fe8:	d8c00615 	stw	r3,24(sp)
   40fec:	dec00415 	stw	sp,16(sp)
   40ff0:	d8800515 	stw	r2,20(sp)
   40ff4:	004152c0 	call	4152c <__sfvwrite_r>
   40ff8:	1000061e 	bne	r2,zero,41014 <_puts_r+0x7c>
   40ffc:	00800284 	movi	r2,10
   41000:	dfc00917 	ldw	ra,36(sp)
   41004:	dc400817 	ldw	r17,32(sp)
   41008:	dc000717 	ldw	r16,28(sp)
   4100c:	dec00a04 	addi	sp,sp,40
   41010:	f800283a 	ret
   41014:	00bfffc4 	movi	r2,-1
   41018:	003ff906 	br	41000 <_puts_r+0x68>

0004101c <puts>:
   4101c:	00800174 	movhi	r2,5
   41020:	10a06304 	addi	r2,r2,-32372
   41024:	200b883a 	mov	r5,r4
   41028:	11000017 	ldw	r4,0(r2)
   4102c:	0040f981 	jmpi	40f98 <_puts_r>

00041030 <_sbrk_r>:
   41030:	defffd04 	addi	sp,sp,-12
   41034:	dc400115 	stw	r17,4(sp)
   41038:	dc000015 	stw	r16,0(sp)
   4103c:	2023883a 	mov	r17,r4
   41040:	04000174 	movhi	r16,5
   41044:	84273704 	addi	r16,r16,-25380
   41048:	2809883a 	mov	r4,r5
   4104c:	dfc00215 	stw	ra,8(sp)
   41050:	80000015 	stw	zero,0(r16)
   41054:	0043b200 	call	43b20 <sbrk>
   41058:	00ffffc4 	movi	r3,-1
   4105c:	10c00526 	beq	r2,r3,41074 <_sbrk_r+0x44>
   41060:	dfc00217 	ldw	ra,8(sp)
   41064:	dc400117 	ldw	r17,4(sp)
   41068:	dc000017 	ldw	r16,0(sp)
   4106c:	dec00304 	addi	sp,sp,12
   41070:	f800283a 	ret
   41074:	80c00017 	ldw	r3,0(r16)
   41078:	183ff926 	beq	r3,zero,41060 <_sbrk_r+0x30>
   4107c:	88c00015 	stw	r3,0(r17)
   41080:	dfc00217 	ldw	ra,8(sp)
   41084:	dc400117 	ldw	r17,4(sp)
   41088:	dc000017 	ldw	r16,0(sp)
   4108c:	dec00304 	addi	sp,sp,12
   41090:	f800283a 	ret

00041094 <strlen>:
   41094:	208000cc 	andi	r2,r4,3
   41098:	10001f1e 	bne	r2,zero,41118 <strlen+0x84>
   4109c:	20800017 	ldw	r2,0(r4)
   410a0:	01ffbff4 	movhi	r7,65279
   410a4:	39ffbfc4 	addi	r7,r7,-257
   410a8:	01a02074 	movhi	r6,32897
   410ac:	31a02004 	addi	r6,r6,-32640
   410b0:	11c7883a 	add	r3,r2,r7
   410b4:	0084303a 	nor	r2,zero,r2
   410b8:	1886703a 	and	r3,r3,r2
   410bc:	1986703a 	and	r3,r3,r6
   410c0:	2005883a 	mov	r2,r4
   410c4:	1800101e 	bne	r3,zero,41108 <strlen+0x74>
   410c8:	10800104 	addi	r2,r2,4
   410cc:	10c00017 	ldw	r3,0(r2)
   410d0:	19cb883a 	add	r5,r3,r7
   410d4:	00c6303a 	nor	r3,zero,r3
   410d8:	28c6703a 	and	r3,r5,r3
   410dc:	1986703a 	and	r3,r3,r6
   410e0:	1800091e 	bne	r3,zero,41108 <strlen+0x74>
   410e4:	10800104 	addi	r2,r2,4
   410e8:	10c00017 	ldw	r3,0(r2)
   410ec:	19cb883a 	add	r5,r3,r7
   410f0:	00c6303a 	nor	r3,zero,r3
   410f4:	28c6703a 	and	r3,r5,r3
   410f8:	1986703a 	and	r3,r3,r6
   410fc:	183ff226 	beq	r3,zero,410c8 <strlen+0x34>
   41100:	00000106 	br	41108 <strlen+0x74>
   41104:	10800044 	addi	r2,r2,1
   41108:	10c00007 	ldb	r3,0(r2)
   4110c:	183ffd1e 	bne	r3,zero,41104 <strlen+0x70>
   41110:	1105c83a 	sub	r2,r2,r4
   41114:	f800283a 	ret
   41118:	2005883a 	mov	r2,r4
   4111c:	003ffa06 	br	41108 <strlen+0x74>

00041120 <_malloc_trim_r>:
   41120:	defffb04 	addi	sp,sp,-20
   41124:	dcc00315 	stw	r19,12(sp)
   41128:	dc800215 	stw	r18,8(sp)
   4112c:	dc400115 	stw	r17,4(sp)
   41130:	dc000015 	stw	r16,0(sp)
   41134:	2827883a 	mov	r19,r5
   41138:	dfc00415 	stw	ra,16(sp)
   4113c:	04400134 	movhi	r17,4
   41140:	8c59cd04 	addi	r17,r17,26420
   41144:	2021883a 	mov	r16,r4
   41148:	004391c0 	call	4391c <__malloc_lock>
   4114c:	88800217 	ldw	r2,8(r17)
   41150:	14800117 	ldw	r18,4(r2)
   41154:	00bfff04 	movi	r2,-4
   41158:	90a4703a 	and	r18,r18,r2
   4115c:	9083fbc4 	addi	r2,r18,4079
   41160:	14e7c83a 	sub	r19,r2,r19
   41164:	9826d33a 	srli	r19,r19,12
   41168:	0083ffc4 	movi	r2,4095
   4116c:	9cffffc4 	addi	r19,r19,-1
   41170:	9826933a 	slli	r19,r19,12
   41174:	14c0060e 	bge	r2,r19,41190 <_malloc_trim_r+0x70>
   41178:	8009883a 	mov	r4,r16
   4117c:	000b883a 	mov	r5,zero
   41180:	00410300 	call	41030 <_sbrk_r>
   41184:	88c00217 	ldw	r3,8(r17)
   41188:	1c87883a 	add	r3,r3,r18
   4118c:	10c00a26 	beq	r2,r3,411b8 <_malloc_trim_r+0x98>
   41190:	8009883a 	mov	r4,r16
   41194:	004393c0 	call	4393c <__malloc_unlock>
   41198:	0005883a 	mov	r2,zero
   4119c:	dfc00417 	ldw	ra,16(sp)
   411a0:	dcc00317 	ldw	r19,12(sp)
   411a4:	dc800217 	ldw	r18,8(sp)
   411a8:	dc400117 	ldw	r17,4(sp)
   411ac:	dc000017 	ldw	r16,0(sp)
   411b0:	dec00504 	addi	sp,sp,20
   411b4:	f800283a 	ret
   411b8:	8009883a 	mov	r4,r16
   411bc:	04cbc83a 	sub	r5,zero,r19
   411c0:	00410300 	call	41030 <_sbrk_r>
   411c4:	00ffffc4 	movi	r3,-1
   411c8:	10c01326 	beq	r2,r3,41218 <_malloc_trim_r+0xf8>
   411cc:	00800174 	movhi	r2,5
   411d0:	10a73e04 	addi	r2,r2,-25352
   411d4:	11000017 	ldw	r4,0(r2)
   411d8:	88c00217 	ldw	r3,8(r17)
   411dc:	94e5c83a 	sub	r18,r18,r19
   411e0:	94800054 	ori	r18,r18,1
   411e4:	24e7c83a 	sub	r19,r4,r19
   411e8:	1c800115 	stw	r18,4(r3)
   411ec:	8009883a 	mov	r4,r16
   411f0:	14c00015 	stw	r19,0(r2)
   411f4:	004393c0 	call	4393c <__malloc_unlock>
   411f8:	00800044 	movi	r2,1
   411fc:	dfc00417 	ldw	ra,16(sp)
   41200:	dcc00317 	ldw	r19,12(sp)
   41204:	dc800217 	ldw	r18,8(sp)
   41208:	dc400117 	ldw	r17,4(sp)
   4120c:	dc000017 	ldw	r16,0(sp)
   41210:	dec00504 	addi	sp,sp,20
   41214:	f800283a 	ret
   41218:	8009883a 	mov	r4,r16
   4121c:	000b883a 	mov	r5,zero
   41220:	00410300 	call	41030 <_sbrk_r>
   41224:	88c00217 	ldw	r3,8(r17)
   41228:	014003c4 	movi	r5,15
   4122c:	10c9c83a 	sub	r4,r2,r3
   41230:	293fd70e 	bge	r5,r4,41190 <_malloc_trim_r+0x70>
   41234:	01400174 	movhi	r5,5
   41238:	29606004 	addi	r5,r5,-32384
   4123c:	29400017 	ldw	r5,0(r5)
   41240:	21000054 	ori	r4,r4,1
   41244:	19000115 	stw	r4,4(r3)
   41248:	1145c83a 	sub	r2,r2,r5
   4124c:	01400174 	movhi	r5,5
   41250:	29673e04 	addi	r5,r5,-25352
   41254:	28800015 	stw	r2,0(r5)
   41258:	003fcd06 	br	41190 <_malloc_trim_r+0x70>

0004125c <_free_r>:
   4125c:	defffd04 	addi	sp,sp,-12
   41260:	dc400115 	stw	r17,4(sp)
   41264:	dc000015 	stw	r16,0(sp)
   41268:	dfc00215 	stw	ra,8(sp)
   4126c:	2821883a 	mov	r16,r5
   41270:	2023883a 	mov	r17,r4
   41274:	28004b26 	beq	r5,zero,413a4 <_free_r+0x148>
   41278:	004391c0 	call	4391c <__malloc_lock>
   4127c:	823fff17 	ldw	r8,-4(r16)
   41280:	00bfff84 	movi	r2,-2
   41284:	81bffe04 	addi	r6,r16,-8
   41288:	4084703a 	and	r2,r8,r2
   4128c:	3087883a 	add	r3,r6,r2
   41290:	01400134 	movhi	r5,4
   41294:	2959cd04 	addi	r5,r5,26420
   41298:	1a400117 	ldw	r9,4(r3)
   4129c:	29000217 	ldw	r4,8(r5)
   412a0:	01ffff04 	movi	r7,-4
   412a4:	49ce703a 	and	r7,r9,r7
   412a8:	20c06526 	beq	r4,r3,41440 <_free_r+0x1e4>
   412ac:	19c00115 	stw	r7,4(r3)
   412b0:	4200004c 	andi	r8,r8,1
   412b4:	40003026 	beq	r8,zero,41378 <_free_r+0x11c>
   412b8:	0009883a 	mov	r4,zero
   412bc:	19d1883a 	add	r8,r3,r7
   412c0:	42000117 	ldw	r8,4(r8)
   412c4:	4200004c 	andi	r8,r8,1
   412c8:	4000061e 	bne	r8,zero,412e4 <_free_r+0x88>
   412cc:	11c5883a 	add	r2,r2,r7
   412d0:	19c00217 	ldw	r7,8(r3)
   412d4:	20004e26 	beq	r4,zero,41410 <_free_r+0x1b4>
   412d8:	18c00317 	ldw	r3,12(r3)
   412dc:	38c00315 	stw	r3,12(r7)
   412e0:	19c00215 	stw	r7,8(r3)
   412e4:	11c00054 	ori	r7,r2,1
   412e8:	3087883a 	add	r3,r6,r2
   412ec:	31c00115 	stw	r7,4(r6)
   412f0:	18800015 	stw	r2,0(r3)
   412f4:	20001a1e 	bne	r4,zero,41360 <_free_r+0x104>
   412f8:	00c07fc4 	movi	r3,511
   412fc:	18802e2e 	bgeu	r3,r2,413b8 <_free_r+0x15c>
   41300:	1006d27a 	srli	r3,r2,9
   41304:	01000104 	movi	r4,4
   41308:	20c06636 	bltu	r4,r3,414a4 <_free_r+0x248>
   4130c:	1008d1ba 	srli	r4,r2,6
   41310:	21000e04 	addi	r4,r4,56
   41314:	210f883a 	add	r7,r4,r4
   41318:	39cf883a 	add	r7,r7,r7
   4131c:	39cf883a 	add	r7,r7,r7
   41320:	29cf883a 	add	r7,r5,r7
   41324:	38c00217 	ldw	r3,8(r7)
   41328:	01400134 	movhi	r5,4
   4132c:	2959cd04 	addi	r5,r5,26420
   41330:	19c06126 	beq	r3,r7,414b8 <_free_r+0x25c>
   41334:	013fff04 	movi	r4,-4
   41338:	19400117 	ldw	r5,4(r3)
   4133c:	290a703a 	and	r5,r5,r4
   41340:	1140022e 	bgeu	r2,r5,4134c <_free_r+0xf0>
   41344:	18c00217 	ldw	r3,8(r3)
   41348:	38fffb1e 	bne	r7,r3,41338 <_free_r+0xdc>
   4134c:	18800317 	ldw	r2,12(r3)
   41350:	30800315 	stw	r2,12(r6)
   41354:	30c00215 	stw	r3,8(r6)
   41358:	11800215 	stw	r6,8(r2)
   4135c:	19800315 	stw	r6,12(r3)
   41360:	8809883a 	mov	r4,r17
   41364:	dfc00217 	ldw	ra,8(sp)
   41368:	dc400117 	ldw	r17,4(sp)
   4136c:	dc000017 	ldw	r16,0(sp)
   41370:	dec00304 	addi	sp,sp,12
   41374:	004393c1 	jmpi	4393c <__malloc_unlock>
   41378:	813ffe17 	ldw	r4,-8(r16)
   4137c:	2a400204 	addi	r9,r5,8
   41380:	310dc83a 	sub	r6,r6,r4
   41384:	32000217 	ldw	r8,8(r6)
   41388:	1105883a 	add	r2,r2,r4
   4138c:	42404326 	beq	r8,r9,4149c <_free_r+0x240>
   41390:	32400317 	ldw	r9,12(r6)
   41394:	0009883a 	mov	r4,zero
   41398:	42400315 	stw	r9,12(r8)
   4139c:	4a000215 	stw	r8,8(r9)
   413a0:	003fc606 	br	412bc <_free_r+0x60>
   413a4:	dfc00217 	ldw	ra,8(sp)
   413a8:	dc400117 	ldw	r17,4(sp)
   413ac:	dc000017 	ldw	r16,0(sp)
   413b0:	dec00304 	addi	sp,sp,12
   413b4:	f800283a 	ret
   413b8:	1004d0fa 	srli	r2,r2,3
   413bc:	02000044 	movi	r8,1
   413c0:	29c00117 	ldw	r7,4(r5)
   413c4:	1087883a 	add	r3,r2,r2
   413c8:	18c7883a 	add	r3,r3,r3
   413cc:	1005d0ba 	srai	r2,r2,2
   413d0:	18c7883a 	add	r3,r3,r3
   413d4:	28c7883a 	add	r3,r5,r3
   413d8:	19000217 	ldw	r4,8(r3)
   413dc:	4084983a 	sll	r2,r8,r2
   413e0:	30c00315 	stw	r3,12(r6)
   413e4:	31000215 	stw	r4,8(r6)
   413e8:	11c4b03a 	or	r2,r2,r7
   413ec:	21800315 	stw	r6,12(r4)
   413f0:	8809883a 	mov	r4,r17
   413f4:	28800115 	stw	r2,4(r5)
   413f8:	19800215 	stw	r6,8(r3)
   413fc:	dfc00217 	ldw	ra,8(sp)
   41400:	dc400117 	ldw	r17,4(sp)
   41404:	dc000017 	ldw	r16,0(sp)
   41408:	dec00304 	addi	sp,sp,12
   4140c:	004393c1 	jmpi	4393c <__malloc_unlock>
   41410:	02000134 	movhi	r8,4
   41414:	4219cf04 	addi	r8,r8,26428
   41418:	3a3faf1e 	bne	r7,r8,412d8 <_free_r+0x7c>
   4141c:	29800515 	stw	r6,20(r5)
   41420:	29800415 	stw	r6,16(r5)
   41424:	11000054 	ori	r4,r2,1
   41428:	3087883a 	add	r3,r6,r2
   4142c:	31c00315 	stw	r7,12(r6)
   41430:	31c00215 	stw	r7,8(r6)
   41434:	31000115 	stw	r4,4(r6)
   41438:	18800015 	stw	r2,0(r3)
   4143c:	003fc806 	br	41360 <_free_r+0x104>
   41440:	4200004c 	andi	r8,r8,1
   41444:	3885883a 	add	r2,r7,r2
   41448:	4000071e 	bne	r8,zero,41468 <_free_r+0x20c>
   4144c:	81fffe17 	ldw	r7,-8(r16)
   41450:	31cdc83a 	sub	r6,r6,r7
   41454:	30c00317 	ldw	r3,12(r6)
   41458:	31000217 	ldw	r4,8(r6)
   4145c:	11c5883a 	add	r2,r2,r7
   41460:	20c00315 	stw	r3,12(r4)
   41464:	19000215 	stw	r4,8(r3)
   41468:	00c00174 	movhi	r3,5
   4146c:	18e06104 	addi	r3,r3,-32380
   41470:	18c00017 	ldw	r3,0(r3)
   41474:	11000054 	ori	r4,r2,1
   41478:	31000115 	stw	r4,4(r6)
   4147c:	29800215 	stw	r6,8(r5)
   41480:	10ffb736 	bltu	r2,r3,41360 <_free_r+0x104>
   41484:	00800174 	movhi	r2,5
   41488:	10a73604 	addi	r2,r2,-25384
   4148c:	11400017 	ldw	r5,0(r2)
   41490:	8809883a 	mov	r4,r17
   41494:	00411200 	call	41120 <_malloc_trim_r>
   41498:	003fb106 	br	41360 <_free_r+0x104>
   4149c:	01000044 	movi	r4,1
   414a0:	003f8606 	br	412bc <_free_r+0x60>
   414a4:	01000504 	movi	r4,20
   414a8:	20c00b36 	bltu	r4,r3,414d8 <_free_r+0x27c>
   414ac:	190016c4 	addi	r4,r3,91
   414b0:	210f883a 	add	r7,r4,r4
   414b4:	003f9806 	br	41318 <_free_r+0xbc>
   414b8:	2009d0ba 	srai	r4,r4,2
   414bc:	00800044 	movi	r2,1
   414c0:	29c00117 	ldw	r7,4(r5)
   414c4:	1108983a 	sll	r4,r2,r4
   414c8:	1805883a 	mov	r2,r3
   414cc:	21c8b03a 	or	r4,r4,r7
   414d0:	29000115 	stw	r4,4(r5)
   414d4:	003f9e06 	br	41350 <_free_r+0xf4>
   414d8:	01001504 	movi	r4,84
   414dc:	20c00436 	bltu	r4,r3,414f0 <_free_r+0x294>
   414e0:	1008d33a 	srli	r4,r2,12
   414e4:	21001b84 	addi	r4,r4,110
   414e8:	210f883a 	add	r7,r4,r4
   414ec:	003f8a06 	br	41318 <_free_r+0xbc>
   414f0:	01005504 	movi	r4,340
   414f4:	20c00436 	bltu	r4,r3,41508 <_free_r+0x2ac>
   414f8:	1008d3fa 	srli	r4,r2,15
   414fc:	21001dc4 	addi	r4,r4,119
   41500:	210f883a 	add	r7,r4,r4
   41504:	003f8406 	br	41318 <_free_r+0xbc>
   41508:	01015504 	movi	r4,1364
   4150c:	20c00436 	bltu	r4,r3,41520 <_free_r+0x2c4>
   41510:	1008d4ba 	srli	r4,r2,18
   41514:	21001f04 	addi	r4,r4,124
   41518:	210f883a 	add	r7,r4,r4
   4151c:	003f7e06 	br	41318 <_free_r+0xbc>
   41520:	01c03f04 	movi	r7,252
   41524:	01001f84 	movi	r4,126
   41528:	003f7b06 	br	41318 <_free_r+0xbc>

0004152c <__sfvwrite_r>:
   4152c:	30800217 	ldw	r2,8(r6)
   41530:	defff504 	addi	sp,sp,-44
   41534:	dd400615 	stw	r21,24(sp)
   41538:	dd000515 	stw	r20,20(sp)
   4153c:	dc000115 	stw	r16,4(sp)
   41540:	dfc00a15 	stw	ra,40(sp)
   41544:	df000915 	stw	fp,36(sp)
   41548:	ddc00815 	stw	r23,32(sp)
   4154c:	dd800715 	stw	r22,28(sp)
   41550:	dcc00415 	stw	r19,16(sp)
   41554:	dc800315 	stw	r18,12(sp)
   41558:	dc400215 	stw	r17,8(sp)
   4155c:	3029883a 	mov	r20,r6
   41560:	202b883a 	mov	r21,r4
   41564:	2821883a 	mov	r16,r5
   41568:	10002126 	beq	r2,zero,415f0 <__sfvwrite_r+0xc4>
   4156c:	2880030b 	ldhu	r2,12(r5)
   41570:	10c0020c 	andi	r3,r2,8
   41574:	18ffffcc 	andi	r3,r3,65535
   41578:	18e0001c 	xori	r3,r3,32768
   4157c:	18e00004 	addi	r3,r3,-32768
   41580:	18002826 	beq	r3,zero,41624 <__sfvwrite_r+0xf8>
   41584:	28c00417 	ldw	r3,16(r5)
   41588:	18002626 	beq	r3,zero,41624 <__sfvwrite_r+0xf8>
   4158c:	10c0008c 	andi	r3,r2,2
   41590:	18ffffcc 	andi	r3,r3,65535
   41594:	18e0001c 	xori	r3,r3,32768
   41598:	18e00004 	addi	r3,r3,-32768
   4159c:	a4400017 	ldw	r17,0(r20)
   415a0:	18002b26 	beq	r3,zero,41650 <__sfvwrite_r+0x124>
   415a4:	0027883a 	mov	r19,zero
   415a8:	0025883a 	mov	r18,zero
   415ac:	05810004 	movi	r22,1024
   415b0:	980d883a 	mov	r6,r19
   415b4:	a809883a 	mov	r4,r21
   415b8:	90004f26 	beq	r18,zero,416f8 <__sfvwrite_r+0x1cc>
   415bc:	900f883a 	mov	r7,r18
   415c0:	81400717 	ldw	r5,28(r16)
   415c4:	b480012e 	bgeu	r22,r18,415cc <__sfvwrite_r+0xa0>
   415c8:	01c10004 	movi	r7,1024
   415cc:	80800917 	ldw	r2,36(r16)
   415d0:	103ee83a 	callr	r2
   415d4:	0080540e 	bge	zero,r2,41728 <__sfvwrite_r+0x1fc>
   415d8:	a0c00217 	ldw	r3,8(r20)
   415dc:	98a7883a 	add	r19,r19,r2
   415e0:	90a5c83a 	sub	r18,r18,r2
   415e4:	1885c83a 	sub	r2,r3,r2
   415e8:	a0800215 	stw	r2,8(r20)
   415ec:	103ff01e 	bne	r2,zero,415b0 <__sfvwrite_r+0x84>
   415f0:	0005883a 	mov	r2,zero
   415f4:	dfc00a17 	ldw	ra,40(sp)
   415f8:	df000917 	ldw	fp,36(sp)
   415fc:	ddc00817 	ldw	r23,32(sp)
   41600:	dd800717 	ldw	r22,28(sp)
   41604:	dd400617 	ldw	r21,24(sp)
   41608:	dd000517 	ldw	r20,20(sp)
   4160c:	dcc00417 	ldw	r19,16(sp)
   41610:	dc800317 	ldw	r18,12(sp)
   41614:	dc400217 	ldw	r17,8(sp)
   41618:	dc000117 	ldw	r16,4(sp)
   4161c:	dec00b04 	addi	sp,sp,44
   41620:	f800283a 	ret
   41624:	a809883a 	mov	r4,r21
   41628:	800b883a 	mov	r5,r16
   4162c:	00423d00 	call	423d0 <__swsetup_r>
   41630:	1000f01e 	bne	r2,zero,419f4 <__sfvwrite_r+0x4c8>
   41634:	8080030b 	ldhu	r2,12(r16)
   41638:	a4400017 	ldw	r17,0(r20)
   4163c:	10c0008c 	andi	r3,r2,2
   41640:	18ffffcc 	andi	r3,r3,65535
   41644:	18e0001c 	xori	r3,r3,32768
   41648:	18e00004 	addi	r3,r3,-32768
   4164c:	183fd51e 	bne	r3,zero,415a4 <__sfvwrite_r+0x78>
   41650:	10c0004c 	andi	r3,r2,1
   41654:	002d883a 	mov	r22,zero
   41658:	1800381e 	bne	r3,zero,4173c <__sfvwrite_r+0x210>
   4165c:	0025883a 	mov	r18,zero
   41660:	90002126 	beq	r18,zero,416e8 <__sfvwrite_r+0x1bc>
   41664:	10c0800c 	andi	r3,r2,512
   41668:	18ffffcc 	andi	r3,r3,65535
   4166c:	18e0001c 	xori	r3,r3,32768
   41670:	18e00004 	addi	r3,r3,-32768
   41674:	84c00217 	ldw	r19,8(r16)
   41678:	18006b26 	beq	r3,zero,41828 <__sfvwrite_r+0x2fc>
   4167c:	980f883a 	mov	r7,r19
   41680:	94c08636 	bltu	r18,r19,4189c <__sfvwrite_r+0x370>
   41684:	10c1200c 	andi	r3,r2,1152
   41688:	18009f1e 	bne	r3,zero,41908 <__sfvwrite_r+0x3dc>
   4168c:	81000017 	ldw	r4,0(r16)
   41690:	982f883a 	mov	r23,r19
   41694:	9039883a 	mov	fp,r18
   41698:	9027883a 	mov	r19,r18
   4169c:	380d883a 	mov	r6,r7
   416a0:	b00b883a 	mov	r5,r22
   416a4:	d9c00015 	stw	r7,0(sp)
   416a8:	0041c480 	call	41c48 <memmove>
   416ac:	d9c00017 	ldw	r7,0(sp)
   416b0:	81000217 	ldw	r4,8(r16)
   416b4:	80800017 	ldw	r2,0(r16)
   416b8:	25efc83a 	sub	r23,r4,r23
   416bc:	11cf883a 	add	r7,r2,r7
   416c0:	85c00215 	stw	r23,8(r16)
   416c4:	81c00015 	stw	r7,0(r16)
   416c8:	a0800217 	ldw	r2,8(r20)
   416cc:	b72d883a 	add	r22,r22,fp
   416d0:	9725c83a 	sub	r18,r18,fp
   416d4:	14e7c83a 	sub	r19,r2,r19
   416d8:	a4c00215 	stw	r19,8(r20)
   416dc:	983fc426 	beq	r19,zero,415f0 <__sfvwrite_r+0xc4>
   416e0:	8080030b 	ldhu	r2,12(r16)
   416e4:	903fdf1e 	bne	r18,zero,41664 <__sfvwrite_r+0x138>
   416e8:	8d800017 	ldw	r22,0(r17)
   416ec:	8c800117 	ldw	r18,4(r17)
   416f0:	8c400204 	addi	r17,r17,8
   416f4:	003fda06 	br	41660 <__sfvwrite_r+0x134>
   416f8:	8cc00017 	ldw	r19,0(r17)
   416fc:	8c800117 	ldw	r18,4(r17)
   41700:	8c400204 	addi	r17,r17,8
   41704:	003faa06 	br	415b0 <__sfvwrite_r+0x84>
   41708:	0041dd40 	call	41dd4 <_realloc_r>
   4170c:	102f883a 	mov	r23,r2
   41710:	10009f1e 	bne	r2,zero,41990 <__sfvwrite_r+0x464>
   41714:	81400417 	ldw	r5,16(r16)
   41718:	a809883a 	mov	r4,r21
   4171c:	004125c0 	call	4125c <_free_r>
   41720:	00800304 	movi	r2,12
   41724:	a8800015 	stw	r2,0(r21)
   41728:	80c0030b 	ldhu	r3,12(r16)
   4172c:	00bfffc4 	movi	r2,-1
   41730:	18c01014 	ori	r3,r3,64
   41734:	80c0030d 	sth	r3,12(r16)
   41738:	003fae06 	br	415f4 <__sfvwrite_r+0xc8>
   4173c:	0007883a 	mov	r3,zero
   41740:	0039883a 	mov	fp,zero
   41744:	0025883a 	mov	r18,zero
   41748:	90001e26 	beq	r18,zero,417c4 <__sfvwrite_r+0x298>
   4174c:	18006526 	beq	r3,zero,418e4 <__sfvwrite_r+0x3b8>
   41750:	b02f883a 	mov	r23,r22
   41754:	9580012e 	bgeu	r18,r22,4175c <__sfvwrite_r+0x230>
   41758:	902f883a 	mov	r23,r18
   4175c:	81000017 	ldw	r4,0(r16)
   41760:	80800417 	ldw	r2,16(r16)
   41764:	84c00217 	ldw	r19,8(r16)
   41768:	81c00517 	ldw	r7,20(r16)
   4176c:	1100022e 	bgeu	r2,r4,41778 <__sfvwrite_r+0x24c>
   41770:	99e7883a 	add	r19,r19,r7
   41774:	9dc01816 	blt	r19,r23,417d8 <__sfvwrite_r+0x2ac>
   41778:	b9c03b16 	blt	r23,r7,41868 <__sfvwrite_r+0x33c>
   4177c:	80800917 	ldw	r2,36(r16)
   41780:	81400717 	ldw	r5,28(r16)
   41784:	a809883a 	mov	r4,r21
   41788:	d8c00015 	stw	r3,0(sp)
   4178c:	e00d883a 	mov	r6,fp
   41790:	103ee83a 	callr	r2
   41794:	1027883a 	mov	r19,r2
   41798:	d8c00017 	ldw	r3,0(sp)
   4179c:	00bfe20e 	bge	zero,r2,41728 <__sfvwrite_r+0x1fc>
   417a0:	b4edc83a 	sub	r22,r22,r19
   417a4:	b0001a26 	beq	r22,zero,41810 <__sfvwrite_r+0x2e4>
   417a8:	a0800217 	ldw	r2,8(r20)
   417ac:	e4f9883a 	add	fp,fp,r19
   417b0:	94e5c83a 	sub	r18,r18,r19
   417b4:	14e7c83a 	sub	r19,r2,r19
   417b8:	a4c00215 	stw	r19,8(r20)
   417bc:	983f8c26 	beq	r19,zero,415f0 <__sfvwrite_r+0xc4>
   417c0:	903fe21e 	bne	r18,zero,4174c <__sfvwrite_r+0x220>
   417c4:	8f000017 	ldw	fp,0(r17)
   417c8:	8c800117 	ldw	r18,4(r17)
   417cc:	0007883a 	mov	r3,zero
   417d0:	8c400204 	addi	r17,r17,8
   417d4:	003fdc06 	br	41748 <__sfvwrite_r+0x21c>
   417d8:	e00b883a 	mov	r5,fp
   417dc:	980d883a 	mov	r6,r19
   417e0:	d8c00015 	stw	r3,0(sp)
   417e4:	0041c480 	call	41c48 <memmove>
   417e8:	80800017 	ldw	r2,0(r16)
   417ec:	a809883a 	mov	r4,r21
   417f0:	800b883a 	mov	r5,r16
   417f4:	14c5883a 	add	r2,r2,r19
   417f8:	80800015 	stw	r2,0(r16)
   417fc:	00425440 	call	42544 <_fflush_r>
   41800:	d8c00017 	ldw	r3,0(sp)
   41804:	103fc81e 	bne	r2,zero,41728 <__sfvwrite_r+0x1fc>
   41808:	b4edc83a 	sub	r22,r22,r19
   4180c:	b03fe61e 	bne	r22,zero,417a8 <__sfvwrite_r+0x27c>
   41810:	a809883a 	mov	r4,r21
   41814:	800b883a 	mov	r5,r16
   41818:	00425440 	call	42544 <_fflush_r>
   4181c:	103fc21e 	bne	r2,zero,41728 <__sfvwrite_r+0x1fc>
   41820:	0007883a 	mov	r3,zero
   41824:	003fe006 	br	417a8 <__sfvwrite_r+0x27c>
   41828:	81000017 	ldw	r4,0(r16)
   4182c:	80800417 	ldw	r2,16(r16)
   41830:	1100022e 	bgeu	r2,r4,4183c <__sfvwrite_r+0x310>
   41834:	9839883a 	mov	fp,r19
   41838:	9c806036 	bltu	r19,r18,419bc <__sfvwrite_r+0x490>
   4183c:	81c00517 	ldw	r7,20(r16)
   41840:	91c01c36 	bltu	r18,r7,418b4 <__sfvwrite_r+0x388>
   41844:	80800917 	ldw	r2,36(r16)
   41848:	81400717 	ldw	r5,28(r16)
   4184c:	a809883a 	mov	r4,r21
   41850:	b00d883a 	mov	r6,r22
   41854:	103ee83a 	callr	r2
   41858:	1027883a 	mov	r19,r2
   4185c:	00bfb20e 	bge	zero,r2,41728 <__sfvwrite_r+0x1fc>
   41860:	1039883a 	mov	fp,r2
   41864:	003f9806 	br	416c8 <__sfvwrite_r+0x19c>
   41868:	b80d883a 	mov	r6,r23
   4186c:	e00b883a 	mov	r5,fp
   41870:	d8c00015 	stw	r3,0(sp)
   41874:	0041c480 	call	41c48 <memmove>
   41878:	80800217 	ldw	r2,8(r16)
   4187c:	81000017 	ldw	r4,0(r16)
   41880:	b827883a 	mov	r19,r23
   41884:	15c5c83a 	sub	r2,r2,r23
   41888:	25ef883a 	add	r23,r4,r23
   4188c:	80800215 	stw	r2,8(r16)
   41890:	85c00015 	stw	r23,0(r16)
   41894:	d8c00017 	ldw	r3,0(sp)
   41898:	003fc106 	br	417a0 <__sfvwrite_r+0x274>
   4189c:	81000017 	ldw	r4,0(r16)
   418a0:	902f883a 	mov	r23,r18
   418a4:	9039883a 	mov	fp,r18
   418a8:	9027883a 	mov	r19,r18
   418ac:	900f883a 	mov	r7,r18
   418b0:	003f7a06 	br	4169c <__sfvwrite_r+0x170>
   418b4:	b00b883a 	mov	r5,r22
   418b8:	900d883a 	mov	r6,r18
   418bc:	0041c480 	call	41c48 <memmove>
   418c0:	80c00217 	ldw	r3,8(r16)
   418c4:	80800017 	ldw	r2,0(r16)
   418c8:	9027883a 	mov	r19,r18
   418cc:	1c87c83a 	sub	r3,r3,r18
   418d0:	1485883a 	add	r2,r2,r18
   418d4:	80c00215 	stw	r3,8(r16)
   418d8:	80800015 	stw	r2,0(r16)
   418dc:	9039883a 	mov	fp,r18
   418e0:	003f7906 	br	416c8 <__sfvwrite_r+0x19c>
   418e4:	e009883a 	mov	r4,fp
   418e8:	01400284 	movi	r5,10
   418ec:	900d883a 	mov	r6,r18
   418f0:	0041a100 	call	41a10 <memchr>
   418f4:	10003c26 	beq	r2,zero,419e8 <__sfvwrite_r+0x4bc>
   418f8:	15800044 	addi	r22,r2,1
   418fc:	b72dc83a 	sub	r22,r22,fp
   41900:	00c00044 	movi	r3,1
   41904:	003f9206 	br	41750 <__sfvwrite_r+0x224>
   41908:	81000517 	ldw	r4,20(r16)
   4190c:	81400417 	ldw	r5,16(r16)
   41910:	80c00017 	ldw	r3,0(r16)
   41914:	210d883a 	add	r6,r4,r4
   41918:	3109883a 	add	r4,r6,r4
   4191c:	2026d7fa 	srli	r19,r4,31
   41920:	1979c83a 	sub	fp,r3,r5
   41924:	e1800044 	addi	r6,fp,1
   41928:	9909883a 	add	r4,r19,r4
   4192c:	2027d07a 	srai	r19,r4,1
   41930:	3489883a 	add	r4,r6,r18
   41934:	980d883a 	mov	r6,r19
   41938:	9900022e 	bgeu	r19,r4,41944 <__sfvwrite_r+0x418>
   4193c:	2027883a 	mov	r19,r4
   41940:	200d883a 	mov	r6,r4
   41944:	1081000c 	andi	r2,r2,1024
   41948:	10bfffcc 	andi	r2,r2,65535
   4194c:	10a0001c 	xori	r2,r2,32768
   41950:	10a00004 	addi	r2,r2,-32768
   41954:	a809883a 	mov	r4,r21
   41958:	103f6b26 	beq	r2,zero,41708 <__sfvwrite_r+0x1dc>
   4195c:	300b883a 	mov	r5,r6
   41960:	00408140 	call	40814 <_malloc_r>
   41964:	102f883a 	mov	r23,r2
   41968:	103f6d26 	beq	r2,zero,41720 <__sfvwrite_r+0x1f4>
   4196c:	81400417 	ldw	r5,16(r16)
   41970:	1009883a 	mov	r4,r2
   41974:	e00d883a 	mov	r6,fp
   41978:	0041b080 	call	41b08 <memcpy>
   4197c:	8080030b 	ldhu	r2,12(r16)
   41980:	00fedfc4 	movi	r3,-1153
   41984:	10c4703a 	and	r2,r2,r3
   41988:	10802014 	ori	r2,r2,128
   4198c:	8080030d 	sth	r2,12(r16)
   41990:	bf09883a 	add	r4,r23,fp
   41994:	9f07c83a 	sub	r3,r19,fp
   41998:	85c00415 	stw	r23,16(r16)
   4199c:	84c00515 	stw	r19,20(r16)
   419a0:	81000015 	stw	r4,0(r16)
   419a4:	902f883a 	mov	r23,r18
   419a8:	80c00215 	stw	r3,8(r16)
   419ac:	9039883a 	mov	fp,r18
   419b0:	9027883a 	mov	r19,r18
   419b4:	900f883a 	mov	r7,r18
   419b8:	003f3806 	br	4169c <__sfvwrite_r+0x170>
   419bc:	b00b883a 	mov	r5,r22
   419c0:	980d883a 	mov	r6,r19
   419c4:	0041c480 	call	41c48 <memmove>
   419c8:	80800017 	ldw	r2,0(r16)
   419cc:	a809883a 	mov	r4,r21
   419d0:	800b883a 	mov	r5,r16
   419d4:	14c5883a 	add	r2,r2,r19
   419d8:	80800015 	stw	r2,0(r16)
   419dc:	00425440 	call	42544 <_fflush_r>
   419e0:	103f3926 	beq	r2,zero,416c8 <__sfvwrite_r+0x19c>
   419e4:	003f5006 	br	41728 <__sfvwrite_r+0x1fc>
   419e8:	95800044 	addi	r22,r18,1
   419ec:	00c00044 	movi	r3,1
   419f0:	003f5706 	br	41750 <__sfvwrite_r+0x224>
   419f4:	80c0030b 	ldhu	r3,12(r16)
   419f8:	00bfffc4 	movi	r2,-1
   419fc:	18c01014 	ori	r3,r3,64
   41a00:	80c0030d 	sth	r3,12(r16)
   41a04:	00c00244 	movi	r3,9
   41a08:	a8c00015 	stw	r3,0(r21)
   41a0c:	003ef906 	br	415f4 <__sfvwrite_r+0xc8>

00041a10 <memchr>:
   41a10:	008000c4 	movi	r2,3
   41a14:	29403fcc 	andi	r5,r5,255
   41a18:	1180282e 	bgeu	r2,r6,41abc <memchr+0xac>
   41a1c:	2086703a 	and	r3,r4,r2
   41a20:	1800351e 	bne	r3,zero,41af8 <memchr+0xe8>
   41a24:	2816923a 	slli	r11,r5,8
   41a28:	2093883a 	add	r9,r4,r2
   41a2c:	22000084 	addi	r8,r4,2
   41a30:	5957883a 	add	r11,r11,r5
   41a34:	5816923a 	slli	r11,r11,8
   41a38:	20c00044 	addi	r3,r4,1
   41a3c:	037fbff4 	movhi	r13,65279
   41a40:	6b7fbfc4 	addi	r13,r13,-257
   41a44:	5957883a 	add	r11,r11,r5
   41a48:	5816923a 	slli	r11,r11,8
   41a4c:	03202074 	movhi	r12,32897
   41a50:	63202004 	addi	r12,r12,-32640
   41a54:	101d883a 	mov	r14,r2
   41a58:	5957883a 	add	r11,r11,r5
   41a5c:	21c00017 	ldw	r7,0(r4)
   41a60:	31bfff04 	addi	r6,r6,-4
   41a64:	1805883a 	mov	r2,r3
   41a68:	3acef03a 	xor	r7,r7,r11
   41a6c:	3b55883a 	add	r10,r7,r13
   41a70:	01ce303a 	nor	r7,zero,r7
   41a74:	51ce703a 	and	r7,r10,r7
   41a78:	3b0e703a 	and	r7,r7,r12
   41a7c:	38000a26 	beq	r7,zero,41aa8 <memchr+0x98>
   41a80:	21c00003 	ldbu	r7,0(r4)
   41a84:	39401e26 	beq	r7,r5,41b00 <memchr+0xf0>
   41a88:	19c00003 	ldbu	r7,0(r3)
   41a8c:	39401926 	beq	r7,r5,41af4 <memchr+0xe4>
   41a90:	41c00003 	ldbu	r7,0(r8)
   41a94:	4005883a 	mov	r2,r8
   41a98:	39401626 	beq	r7,r5,41af4 <memchr+0xe4>
   41a9c:	49c00003 	ldbu	r7,0(r9)
   41aa0:	4805883a 	mov	r2,r9
   41aa4:	39401326 	beq	r7,r5,41af4 <memchr+0xe4>
   41aa8:	21000104 	addi	r4,r4,4
   41aac:	4a400104 	addi	r9,r9,4
   41ab0:	42000104 	addi	r8,r8,4
   41ab4:	18c00104 	addi	r3,r3,4
   41ab8:	71bfe836 	bltu	r14,r6,41a5c <memchr+0x4c>
   41abc:	2005883a 	mov	r2,r4
   41ac0:	30000a26 	beq	r6,zero,41aec <memchr+0xdc>
   41ac4:	10c00003 	ldbu	r3,0(r2)
   41ac8:	19400a26 	beq	r3,r5,41af4 <memchr+0xe4>
   41acc:	10c00044 	addi	r3,r2,1
   41ad0:	118d883a 	add	r6,r2,r6
   41ad4:	00000306 	br	41ae4 <memchr+0xd4>
   41ad8:	11000003 	ldbu	r4,0(r2)
   41adc:	18c00044 	addi	r3,r3,1
   41ae0:	21400426 	beq	r4,r5,41af4 <memchr+0xe4>
   41ae4:	1805883a 	mov	r2,r3
   41ae8:	19bffb1e 	bne	r3,r6,41ad8 <memchr+0xc8>
   41aec:	0005883a 	mov	r2,zero
   41af0:	f800283a 	ret
   41af4:	f800283a 	ret
   41af8:	2005883a 	mov	r2,r4
   41afc:	003ff106 	br	41ac4 <memchr+0xb4>
   41b00:	2005883a 	mov	r2,r4
   41b04:	f800283a 	ret

00041b08 <memcpy>:
   41b08:	defffb04 	addi	sp,sp,-20
   41b0c:	dc000015 	stw	r16,0(sp)
   41b10:	dfc00415 	stw	ra,16(sp)
   41b14:	dcc00315 	stw	r19,12(sp)
   41b18:	dc800215 	stw	r18,8(sp)
   41b1c:	dc400115 	stw	r17,4(sp)
   41b20:	00c003c4 	movi	r3,15
   41b24:	2021883a 	mov	r16,r4
   41b28:	3005883a 	mov	r2,r6
   41b2c:	1980032e 	bgeu	r3,r6,41b3c <memcpy+0x34>
   41b30:	2906b03a 	or	r3,r5,r4
   41b34:	18c000cc 	andi	r3,r3,3
   41b38:	18001026 	beq	r3,zero,41b7c <memcpy+0x74>
   41b3c:	8007883a 	mov	r3,r16
   41b40:	288f883a 	add	r7,r5,r2
   41b44:	10000526 	beq	r2,zero,41b5c <memcpy+0x54>
   41b48:	29800003 	ldbu	r6,0(r5)
   41b4c:	18c00044 	addi	r3,r3,1
   41b50:	29400044 	addi	r5,r5,1
   41b54:	19bfffc5 	stb	r6,-1(r3)
   41b58:	29fffb1e 	bne	r5,r7,41b48 <memcpy+0x40>
   41b5c:	8005883a 	mov	r2,r16
   41b60:	dfc00417 	ldw	ra,16(sp)
   41b64:	dcc00317 	ldw	r19,12(sp)
   41b68:	dc800217 	ldw	r18,8(sp)
   41b6c:	dc400117 	ldw	r17,4(sp)
   41b70:	dc000017 	ldw	r16,0(sp)
   41b74:	dec00504 	addi	sp,sp,20
   41b78:	f800283a 	ret
   41b7c:	32bffc04 	addi	r10,r6,-16
   41b80:	5014d13a 	srli	r10,r10,4
   41b84:	20800404 	addi	r2,r4,16
   41b88:	2007883a 	mov	r3,r4
   41b8c:	5008913a 	slli	r4,r10,4
   41b90:	280f883a 	mov	r7,r5
   41b94:	1105883a 	add	r2,r2,r4
   41b98:	3a000017 	ldw	r8,0(r7)
   41b9c:	18c00404 	addi	r3,r3,16
   41ba0:	39c00404 	addi	r7,r7,16
   41ba4:	1a3ffc15 	stw	r8,-16(r3)
   41ba8:	3a3ffd17 	ldw	r8,-12(r7)
   41bac:	1a3ffd15 	stw	r8,-12(r3)
   41bb0:	3a3ffe17 	ldw	r8,-8(r7)
   41bb4:	1a3ffe15 	stw	r8,-8(r3)
   41bb8:	3a3fff17 	ldw	r8,-4(r7)
   41bbc:	1a3fff15 	stw	r8,-4(r3)
   41bc0:	18bff51e 	bne	r3,r2,41b98 <memcpy+0x90>
   41bc4:	52800044 	addi	r10,r10,1
   41bc8:	5014913a 	slli	r10,r10,4
   41bcc:	308003cc 	andi	r2,r6,15
   41bd0:	010000c4 	movi	r4,3
   41bd4:	8287883a 	add	r3,r16,r10
   41bd8:	2a95883a 	add	r10,r5,r10
   41bdc:	2080182e 	bgeu	r4,r2,41c40 <memcpy+0x138>
   41be0:	147fff04 	addi	r17,r2,-4
   41be4:	8808d0ba 	srli	r4,r17,2
   41be8:	1a400104 	addi	r9,r3,4
   41bec:	180d883a 	mov	r6,r3
   41bf0:	2105883a 	add	r2,r4,r4
   41bf4:	1085883a 	add	r2,r2,r2
   41bf8:	4893883a 	add	r9,r9,r2
   41bfc:	500f883a 	mov	r7,r10
   41c00:	3a000017 	ldw	r8,0(r7)
   41c04:	31800104 	addi	r6,r6,4
   41c08:	39c00104 	addi	r7,r7,4
   41c0c:	323fff15 	stw	r8,-4(r6)
   41c10:	327ffb1e 	bne	r6,r9,41c00 <memcpy+0xf8>
   41c14:	20800044 	addi	r2,r4,1
   41c18:	1085883a 	add	r2,r2,r2
   41c1c:	1085883a 	add	r2,r2,r2
   41c20:	017fff04 	movi	r5,-4
   41c24:	18a5883a 	add	r18,r3,r2
   41c28:	50a7883a 	add	r19,r10,r2
   41c2c:	00433300 	call	43330 <__mulsi3>
   41c30:	1445883a 	add	r2,r2,r17
   41c34:	980b883a 	mov	r5,r19
   41c38:	9007883a 	mov	r3,r18
   41c3c:	003fc006 	br	41b40 <memcpy+0x38>
   41c40:	500b883a 	mov	r5,r10
   41c44:	003fbe06 	br	41b40 <memcpy+0x38>

00041c48 <memmove>:
   41c48:	defffb04 	addi	sp,sp,-20
   41c4c:	dc000015 	stw	r16,0(sp)
   41c50:	dfc00415 	stw	ra,16(sp)
   41c54:	dcc00315 	stw	r19,12(sp)
   41c58:	dc800215 	stw	r18,8(sp)
   41c5c:	dc400115 	stw	r17,4(sp)
   41c60:	2021883a 	mov	r16,r4
   41c64:	300f883a 	mov	r7,r6
   41c68:	2900122e 	bgeu	r5,r4,41cb4 <memmove+0x6c>
   41c6c:	2987883a 	add	r3,r5,r6
   41c70:	20c0102e 	bgeu	r4,r3,41cb4 <memmove+0x6c>
   41c74:	218b883a 	add	r5,r4,r6
   41c78:	1989c83a 	sub	r4,r3,r6
   41c7c:	30000526 	beq	r6,zero,41c94 <memmove+0x4c>
   41c80:	18ffffc4 	addi	r3,r3,-1
   41c84:	18800003 	ldbu	r2,0(r3)
   41c88:	297fffc4 	addi	r5,r5,-1
   41c8c:	28800005 	stb	r2,0(r5)
   41c90:	193ffb1e 	bne	r3,r4,41c80 <memmove+0x38>
   41c94:	8005883a 	mov	r2,r16
   41c98:	dfc00417 	ldw	ra,16(sp)
   41c9c:	dcc00317 	ldw	r19,12(sp)
   41ca0:	dc800217 	ldw	r18,8(sp)
   41ca4:	dc400117 	ldw	r17,4(sp)
   41ca8:	dc000017 	ldw	r16,0(sp)
   41cac:	dec00504 	addi	sp,sp,20
   41cb0:	f800283a 	ret
   41cb4:	008003c4 	movi	r2,15
   41cb8:	1180422e 	bgeu	r2,r6,41dc4 <memmove+0x17c>
   41cbc:	2c04b03a 	or	r2,r5,r16
   41cc0:	108000cc 	andi	r2,r2,3
   41cc4:	10003f1e 	bne	r2,zero,41dc4 <memmove+0x17c>
   41cc8:	32bffc04 	addi	r10,r6,-16
   41ccc:	5014d13a 	srli	r10,r10,4
   41cd0:	81000404 	addi	r4,r16,16
   41cd4:	8007883a 	mov	r3,r16
   41cd8:	5004913a 	slli	r2,r10,4
   41cdc:	280f883a 	mov	r7,r5
   41ce0:	2089883a 	add	r4,r4,r2
   41ce4:	38800017 	ldw	r2,0(r7)
   41ce8:	18c00404 	addi	r3,r3,16
   41cec:	39c00404 	addi	r7,r7,16
   41cf0:	18bffc15 	stw	r2,-16(r3)
   41cf4:	38bffd17 	ldw	r2,-12(r7)
   41cf8:	18bffd15 	stw	r2,-12(r3)
   41cfc:	38bffe17 	ldw	r2,-8(r7)
   41d00:	18bffe15 	stw	r2,-8(r3)
   41d04:	38bfff17 	ldw	r2,-4(r7)
   41d08:	18bfff15 	stw	r2,-4(r3)
   41d0c:	193ff51e 	bne	r3,r4,41ce4 <memmove+0x9c>
   41d10:	52800044 	addi	r10,r10,1
   41d14:	5014913a 	slli	r10,r10,4
   41d18:	31c003cc 	andi	r7,r6,15
   41d1c:	008000c4 	movi	r2,3
   41d20:	8287883a 	add	r3,r16,r10
   41d24:	2a95883a 	add	r10,r5,r10
   41d28:	11c0282e 	bgeu	r2,r7,41dcc <memmove+0x184>
   41d2c:	3c7fff04 	addi	r17,r7,-4
   41d30:	8808d0ba 	srli	r4,r17,2
   41d34:	1a400104 	addi	r9,r3,4
   41d38:	180d883a 	mov	r6,r3
   41d3c:	2105883a 	add	r2,r4,r4
   41d40:	1085883a 	add	r2,r2,r2
   41d44:	4893883a 	add	r9,r9,r2
   41d48:	5005883a 	mov	r2,r10
   41d4c:	12000017 	ldw	r8,0(r2)
   41d50:	31800104 	addi	r6,r6,4
   41d54:	10800104 	addi	r2,r2,4
   41d58:	323fff15 	stw	r8,-4(r6)
   41d5c:	327ffb1e 	bne	r6,r9,41d4c <memmove+0x104>
   41d60:	20800044 	addi	r2,r4,1
   41d64:	1085883a 	add	r2,r2,r2
   41d68:	1085883a 	add	r2,r2,r2
   41d6c:	017fff04 	movi	r5,-4
   41d70:	18a5883a 	add	r18,r3,r2
   41d74:	50a7883a 	add	r19,r10,r2
   41d78:	00433300 	call	43330 <__mulsi3>
   41d7c:	144f883a 	add	r7,r2,r17
   41d80:	980b883a 	mov	r5,r19
   41d84:	9007883a 	mov	r3,r18
   41d88:	383fc226 	beq	r7,zero,41c94 <memmove+0x4c>
   41d8c:	19cf883a 	add	r7,r3,r7
   41d90:	29800003 	ldbu	r6,0(r5)
   41d94:	18c00044 	addi	r3,r3,1
   41d98:	29400044 	addi	r5,r5,1
   41d9c:	19bfffc5 	stb	r6,-1(r3)
   41da0:	19fffb1e 	bne	r3,r7,41d90 <memmove+0x148>
   41da4:	8005883a 	mov	r2,r16
   41da8:	dfc00417 	ldw	ra,16(sp)
   41dac:	dcc00317 	ldw	r19,12(sp)
   41db0:	dc800217 	ldw	r18,8(sp)
   41db4:	dc400117 	ldw	r17,4(sp)
   41db8:	dc000017 	ldw	r16,0(sp)
   41dbc:	dec00504 	addi	sp,sp,20
   41dc0:	f800283a 	ret
   41dc4:	8007883a 	mov	r3,r16
   41dc8:	003fef06 	br	41d88 <memmove+0x140>
   41dcc:	500b883a 	mov	r5,r10
   41dd0:	003fed06 	br	41d88 <memmove+0x140>

00041dd4 <_realloc_r>:
   41dd4:	defff504 	addi	sp,sp,-44
   41dd8:	dd400615 	stw	r21,24(sp)
   41ddc:	dc800315 	stw	r18,12(sp)
   41de0:	dc000115 	stw	r16,4(sp)
   41de4:	dfc00a15 	stw	ra,40(sp)
   41de8:	df000915 	stw	fp,36(sp)
   41dec:	ddc00815 	stw	r23,32(sp)
   41df0:	dd800715 	stw	r22,28(sp)
   41df4:	dd000515 	stw	r20,20(sp)
   41df8:	dcc00415 	stw	r19,16(sp)
   41dfc:	dc400215 	stw	r17,8(sp)
   41e00:	2821883a 	mov	r16,r5
   41e04:	202b883a 	mov	r21,r4
   41e08:	3025883a 	mov	r18,r6
   41e0c:	28009626 	beq	r5,zero,42068 <_realloc_r+0x294>
   41e10:	004391c0 	call	4391c <__malloc_lock>
   41e14:	80bfff17 	ldw	r2,-4(r16)
   41e18:	04ffff04 	movi	r19,-4
   41e1c:	90c002c4 	addi	r3,r18,11
   41e20:	01000584 	movi	r4,22
   41e24:	85bffe04 	addi	r22,r16,-8
   41e28:	14e6703a 	and	r19,r2,r19
   41e2c:	20c0372e 	bgeu	r4,r3,41f0c <_realloc_r+0x138>
   41e30:	047ffe04 	movi	r17,-8
   41e34:	1c62703a 	and	r17,r3,r17
   41e38:	8807883a 	mov	r3,r17
   41e3c:	88005a16 	blt	r17,zero,41fa8 <_realloc_r+0x1d4>
   41e40:	8c805936 	bltu	r17,r18,41fa8 <_realloc_r+0x1d4>
   41e44:	98c0340e 	bge	r19,r3,41f18 <_realloc_r+0x144>
   41e48:	07000134 	movhi	fp,4
   41e4c:	e719cd04 	addi	fp,fp,26420
   41e50:	e1400217 	ldw	r5,8(fp)
   41e54:	b4c9883a 	add	r4,r22,r19
   41e58:	29009026 	beq	r5,r4,4209c <_realloc_r+0x2c8>
   41e5c:	21800117 	ldw	r6,4(r4)
   41e60:	01ffff84 	movi	r7,-2
   41e64:	31ce703a 	and	r7,r6,r7
   41e68:	21cf883a 	add	r7,r4,r7
   41e6c:	39c00117 	ldw	r7,4(r7)
   41e70:	39c0004c 	andi	r7,r7,1
   41e74:	38004326 	beq	r7,zero,41f84 <_realloc_r+0x1b0>
   41e78:	000d883a 	mov	r6,zero
   41e7c:	0009883a 	mov	r4,zero
   41e80:	1080004c 	andi	r2,r2,1
   41e84:	10005a1e 	bne	r2,zero,41ff0 <_realloc_r+0x21c>
   41e88:	85fffe17 	ldw	r23,-8(r16)
   41e8c:	00bfff04 	movi	r2,-4
   41e90:	b5efc83a 	sub	r23,r22,r23
   41e94:	b9c00117 	ldw	r7,4(r23)
   41e98:	388e703a 	and	r7,r7,r2
   41e9c:	3ccf883a 	add	r7,r7,r19
   41ea0:	20005226 	beq	r4,zero,41fec <_realloc_r+0x218>
   41ea4:	31e9883a 	add	r20,r6,r7
   41ea8:	2140c726 	beq	r4,r5,421c8 <_realloc_r+0x3f4>
   41eac:	a0c04f16 	blt	r20,r3,41fec <_realloc_r+0x218>
   41eb0:	20800317 	ldw	r2,12(r4)
   41eb4:	20c00217 	ldw	r3,8(r4)
   41eb8:	99bfff04 	addi	r6,r19,-4
   41ebc:	01000904 	movi	r4,36
   41ec0:	18800315 	stw	r2,12(r3)
   41ec4:	10c00215 	stw	r3,8(r2)
   41ec8:	b8c00217 	ldw	r3,8(r23)
   41ecc:	b8800317 	ldw	r2,12(r23)
   41ed0:	bc800204 	addi	r18,r23,8
   41ed4:	18800315 	stw	r2,12(r3)
   41ed8:	10c00215 	stw	r3,8(r2)
   41edc:	2180ed36 	bltu	r4,r6,42294 <_realloc_r+0x4c0>
   41ee0:	008004c4 	movi	r2,19
   41ee4:	11809b2e 	bgeu	r2,r6,42154 <_realloc_r+0x380>
   41ee8:	80800017 	ldw	r2,0(r16)
   41eec:	b8800215 	stw	r2,8(r23)
   41ef0:	80800117 	ldw	r2,4(r16)
   41ef4:	b8800315 	stw	r2,12(r23)
   41ef8:	008006c4 	movi	r2,27
   41efc:	1180f936 	bltu	r2,r6,422e4 <_realloc_r+0x510>
   41f00:	b8800404 	addi	r2,r23,16
   41f04:	80c00204 	addi	r3,r16,8
   41f08:	00009406 	br	4215c <_realloc_r+0x388>
   41f0c:	00c00404 	movi	r3,16
   41f10:	1823883a 	mov	r17,r3
   41f14:	003fca06 	br	41e40 <_realloc_r+0x6c>
   41f18:	9829883a 	mov	r20,r19
   41f1c:	a447c83a 	sub	r3,r20,r17
   41f20:	010003c4 	movi	r4,15
   41f24:	1080004c 	andi	r2,r2,1
   41f28:	20c02336 	bltu	r4,r3,41fb8 <_realloc_r+0x1e4>
   41f2c:	1504b03a 	or	r2,r2,r20
   41f30:	b0800115 	stw	r2,4(r22)
   41f34:	b52d883a 	add	r22,r22,r20
   41f38:	b0800117 	ldw	r2,4(r22)
   41f3c:	10800054 	ori	r2,r2,1
   41f40:	b0800115 	stw	r2,4(r22)
   41f44:	a809883a 	mov	r4,r21
   41f48:	004393c0 	call	4393c <__malloc_unlock>
   41f4c:	8025883a 	mov	r18,r16
   41f50:	9005883a 	mov	r2,r18
   41f54:	dfc00a17 	ldw	ra,40(sp)
   41f58:	df000917 	ldw	fp,36(sp)
   41f5c:	ddc00817 	ldw	r23,32(sp)
   41f60:	dd800717 	ldw	r22,28(sp)
   41f64:	dd400617 	ldw	r21,24(sp)
   41f68:	dd000517 	ldw	r20,20(sp)
   41f6c:	dcc00417 	ldw	r19,16(sp)
   41f70:	dc800317 	ldw	r18,12(sp)
   41f74:	dc400217 	ldw	r17,8(sp)
   41f78:	dc000117 	ldw	r16,4(sp)
   41f7c:	dec00b04 	addi	sp,sp,44
   41f80:	f800283a 	ret
   41f84:	01ffff04 	movi	r7,-4
   41f88:	31cc703a 	and	r6,r6,r7
   41f8c:	34e9883a 	add	r20,r6,r19
   41f90:	a0ffbb16 	blt	r20,r3,41e80 <_realloc_r+0xac>
   41f94:	20c00317 	ldw	r3,12(r4)
   41f98:	21000217 	ldw	r4,8(r4)
   41f9c:	20c00315 	stw	r3,12(r4)
   41fa0:	19000215 	stw	r4,8(r3)
   41fa4:	003fdd06 	br	41f1c <_realloc_r+0x148>
   41fa8:	00800304 	movi	r2,12
   41fac:	a8800015 	stw	r2,0(r21)
   41fb0:	0025883a 	mov	r18,zero
   41fb4:	003fe606 	br	41f50 <_realloc_r+0x17c>
   41fb8:	1444b03a 	or	r2,r2,r17
   41fbc:	b0800115 	stw	r2,4(r22)
   41fc0:	b44b883a 	add	r5,r22,r17
   41fc4:	18800054 	ori	r2,r3,1
   41fc8:	28800115 	stw	r2,4(r5)
   41fcc:	28c7883a 	add	r3,r5,r3
   41fd0:	18800117 	ldw	r2,4(r3)
   41fd4:	a809883a 	mov	r4,r21
   41fd8:	29400204 	addi	r5,r5,8
   41fdc:	10800054 	ori	r2,r2,1
   41fe0:	18800115 	stw	r2,4(r3)
   41fe4:	004125c0 	call	4125c <_free_r>
   41fe8:	003fd606 	br	41f44 <_realloc_r+0x170>
   41fec:	38c0330e 	bge	r7,r3,420bc <_realloc_r+0x2e8>
   41ff0:	900b883a 	mov	r5,r18
   41ff4:	a809883a 	mov	r4,r21
   41ff8:	00408140 	call	40814 <_malloc_r>
   41ffc:	1025883a 	mov	r18,r2
   42000:	10001626 	beq	r2,zero,4205c <_realloc_r+0x288>
   42004:	80bfff17 	ldw	r2,-4(r16)
   42008:	00ffff84 	movi	r3,-2
   4200c:	913ffe04 	addi	r4,r18,-8
   42010:	10c6703a 	and	r3,r2,r3
   42014:	b0c7883a 	add	r3,r22,r3
   42018:	20c09926 	beq	r4,r3,42280 <_realloc_r+0x4ac>
   4201c:	99bfff04 	addi	r6,r19,-4
   42020:	00800904 	movi	r2,36
   42024:	11806436 	bltu	r2,r6,421b8 <_realloc_r+0x3e4>
   42028:	00c004c4 	movi	r3,19
   4202c:	19804036 	bltu	r3,r6,42130 <_realloc_r+0x35c>
   42030:	9005883a 	mov	r2,r18
   42034:	8007883a 	mov	r3,r16
   42038:	19000017 	ldw	r4,0(r3)
   4203c:	11000015 	stw	r4,0(r2)
   42040:	19000117 	ldw	r4,4(r3)
   42044:	11000115 	stw	r4,4(r2)
   42048:	18c00217 	ldw	r3,8(r3)
   4204c:	10c00215 	stw	r3,8(r2)
   42050:	a809883a 	mov	r4,r21
   42054:	800b883a 	mov	r5,r16
   42058:	004125c0 	call	4125c <_free_r>
   4205c:	a809883a 	mov	r4,r21
   42060:	004393c0 	call	4393c <__malloc_unlock>
   42064:	003fba06 	br	41f50 <_realloc_r+0x17c>
   42068:	300b883a 	mov	r5,r6
   4206c:	dfc00a17 	ldw	ra,40(sp)
   42070:	df000917 	ldw	fp,36(sp)
   42074:	ddc00817 	ldw	r23,32(sp)
   42078:	dd800717 	ldw	r22,28(sp)
   4207c:	dd400617 	ldw	r21,24(sp)
   42080:	dd000517 	ldw	r20,20(sp)
   42084:	dcc00417 	ldw	r19,16(sp)
   42088:	dc800317 	ldw	r18,12(sp)
   4208c:	dc400217 	ldw	r17,8(sp)
   42090:	dc000117 	ldw	r16,4(sp)
   42094:	dec00b04 	addi	sp,sp,44
   42098:	00408141 	jmpi	40814 <_malloc_r>
   4209c:	29800117 	ldw	r6,4(r5)
   420a0:	013fff04 	movi	r4,-4
   420a4:	89c00404 	addi	r7,r17,16
   420a8:	310c703a 	and	r6,r6,r4
   420ac:	34c9883a 	add	r4,r6,r19
   420b0:	21c0340e 	bge	r4,r7,42184 <_realloc_r+0x3b0>
   420b4:	2809883a 	mov	r4,r5
   420b8:	003f7106 	br	41e80 <_realloc_r+0xac>
   420bc:	b8800317 	ldw	r2,12(r23)
   420c0:	b8c00217 	ldw	r3,8(r23)
   420c4:	99bfff04 	addi	r6,r19,-4
   420c8:	01000904 	movi	r4,36
   420cc:	18800315 	stw	r2,12(r3)
   420d0:	10c00215 	stw	r3,8(r2)
   420d4:	bc800204 	addi	r18,r23,8
   420d8:	21807836 	bltu	r4,r6,422bc <_realloc_r+0x4e8>
   420dc:	008004c4 	movi	r2,19
   420e0:	1180732e 	bgeu	r2,r6,422b0 <_realloc_r+0x4dc>
   420e4:	80800017 	ldw	r2,0(r16)
   420e8:	b8800215 	stw	r2,8(r23)
   420ec:	80800117 	ldw	r2,4(r16)
   420f0:	b8800315 	stw	r2,12(r23)
   420f4:	008006c4 	movi	r2,27
   420f8:	11808936 	bltu	r2,r6,42320 <_realloc_r+0x54c>
   420fc:	b8800404 	addi	r2,r23,16
   42100:	80c00204 	addi	r3,r16,8
   42104:	19000017 	ldw	r4,0(r3)
   42108:	9021883a 	mov	r16,r18
   4210c:	3829883a 	mov	r20,r7
   42110:	11000015 	stw	r4,0(r2)
   42114:	19000117 	ldw	r4,4(r3)
   42118:	b82d883a 	mov	r22,r23
   4211c:	11000115 	stw	r4,4(r2)
   42120:	18c00217 	ldw	r3,8(r3)
   42124:	10c00215 	stw	r3,8(r2)
   42128:	b8800117 	ldw	r2,4(r23)
   4212c:	003f7b06 	br	41f1c <_realloc_r+0x148>
   42130:	80c00017 	ldw	r3,0(r16)
   42134:	90c00015 	stw	r3,0(r18)
   42138:	80c00117 	ldw	r3,4(r16)
   4213c:	90c00115 	stw	r3,4(r18)
   42140:	00c006c4 	movi	r3,27
   42144:	19804636 	bltu	r3,r6,42260 <_realloc_r+0x48c>
   42148:	90800204 	addi	r2,r18,8
   4214c:	80c00204 	addi	r3,r16,8
   42150:	003fb906 	br	42038 <_realloc_r+0x264>
   42154:	9005883a 	mov	r2,r18
   42158:	8007883a 	mov	r3,r16
   4215c:	19000017 	ldw	r4,0(r3)
   42160:	9021883a 	mov	r16,r18
   42164:	b82d883a 	mov	r22,r23
   42168:	11000015 	stw	r4,0(r2)
   4216c:	19000117 	ldw	r4,4(r3)
   42170:	11000115 	stw	r4,4(r2)
   42174:	18c00217 	ldw	r3,8(r3)
   42178:	10c00215 	stw	r3,8(r2)
   4217c:	b8800117 	ldw	r2,4(r23)
   42180:	003f6606 	br	41f1c <_realloc_r+0x148>
   42184:	2445c83a 	sub	r2,r4,r17
   42188:	b46d883a 	add	r22,r22,r17
   4218c:	10800054 	ori	r2,r2,1
   42190:	b0800115 	stw	r2,4(r22)
   42194:	80bfff17 	ldw	r2,-4(r16)
   42198:	a809883a 	mov	r4,r21
   4219c:	e5800215 	stw	r22,8(fp)
   421a0:	1080004c 	andi	r2,r2,1
   421a4:	88a2b03a 	or	r17,r17,r2
   421a8:	847fff15 	stw	r17,-4(r16)
   421ac:	004393c0 	call	4393c <__malloc_unlock>
   421b0:	8025883a 	mov	r18,r16
   421b4:	003f6606 	br	41f50 <_realloc_r+0x17c>
   421b8:	9009883a 	mov	r4,r18
   421bc:	800b883a 	mov	r5,r16
   421c0:	0041c480 	call	41c48 <memmove>
   421c4:	003fa206 	br	42050 <_realloc_r+0x27c>
   421c8:	88800404 	addi	r2,r17,16
   421cc:	a0bf8716 	blt	r20,r2,41fec <_realloc_r+0x218>
   421d0:	b8800317 	ldw	r2,12(r23)
   421d4:	b8c00217 	ldw	r3,8(r23)
   421d8:	99bfff04 	addi	r6,r19,-4
   421dc:	01000904 	movi	r4,36
   421e0:	18800315 	stw	r2,12(r3)
   421e4:	10c00215 	stw	r3,8(r2)
   421e8:	bc800204 	addi	r18,r23,8
   421ec:	21806536 	bltu	r4,r6,42384 <_realloc_r+0x5b0>
   421f0:	008004c4 	movi	r2,19
   421f4:	1180592e 	bgeu	r2,r6,4235c <_realloc_r+0x588>
   421f8:	80800017 	ldw	r2,0(r16)
   421fc:	b8800215 	stw	r2,8(r23)
   42200:	80800117 	ldw	r2,4(r16)
   42204:	b8800315 	stw	r2,12(r23)
   42208:	008006c4 	movi	r2,27
   4220c:	11806136 	bltu	r2,r6,42394 <_realloc_r+0x5c0>
   42210:	b8800404 	addi	r2,r23,16
   42214:	80c00204 	addi	r3,r16,8
   42218:	19000017 	ldw	r4,0(r3)
   4221c:	11000015 	stw	r4,0(r2)
   42220:	19000117 	ldw	r4,4(r3)
   42224:	11000115 	stw	r4,4(r2)
   42228:	18c00217 	ldw	r3,8(r3)
   4222c:	10c00215 	stw	r3,8(r2)
   42230:	a447c83a 	sub	r3,r20,r17
   42234:	bc45883a 	add	r2,r23,r17
   42238:	18c00054 	ori	r3,r3,1
   4223c:	10c00115 	stw	r3,4(r2)
   42240:	b8c00117 	ldw	r3,4(r23)
   42244:	e0800215 	stw	r2,8(fp)
   42248:	a809883a 	mov	r4,r21
   4224c:	1880004c 	andi	r2,r3,1
   42250:	88a2b03a 	or	r17,r17,r2
   42254:	bc400115 	stw	r17,4(r23)
   42258:	004393c0 	call	4393c <__malloc_unlock>
   4225c:	003f3c06 	br	41f50 <_realloc_r+0x17c>
   42260:	80c00217 	ldw	r3,8(r16)
   42264:	90c00215 	stw	r3,8(r18)
   42268:	80c00317 	ldw	r3,12(r16)
   4226c:	90c00315 	stw	r3,12(r18)
   42270:	30802426 	beq	r6,r2,42304 <_realloc_r+0x530>
   42274:	90800404 	addi	r2,r18,16
   42278:	80c00404 	addi	r3,r16,16
   4227c:	003f6e06 	br	42038 <_realloc_r+0x264>
   42280:	953fff17 	ldw	r20,-4(r18)
   42284:	00ffff04 	movi	r3,-4
   42288:	a0e8703a 	and	r20,r20,r3
   4228c:	a4e9883a 	add	r20,r20,r19
   42290:	003f2206 	br	41f1c <_realloc_r+0x148>
   42294:	800b883a 	mov	r5,r16
   42298:	9009883a 	mov	r4,r18
   4229c:	0041c480 	call	41c48 <memmove>
   422a0:	9021883a 	mov	r16,r18
   422a4:	b8800117 	ldw	r2,4(r23)
   422a8:	b82d883a 	mov	r22,r23
   422ac:	003f1b06 	br	41f1c <_realloc_r+0x148>
   422b0:	9005883a 	mov	r2,r18
   422b4:	8007883a 	mov	r3,r16
   422b8:	003f9206 	br	42104 <_realloc_r+0x330>
   422bc:	800b883a 	mov	r5,r16
   422c0:	9009883a 	mov	r4,r18
   422c4:	d9c00015 	stw	r7,0(sp)
   422c8:	0041c480 	call	41c48 <memmove>
   422cc:	d9c00017 	ldw	r7,0(sp)
   422d0:	9021883a 	mov	r16,r18
   422d4:	b8800117 	ldw	r2,4(r23)
   422d8:	3829883a 	mov	r20,r7
   422dc:	b82d883a 	mov	r22,r23
   422e0:	003f0e06 	br	41f1c <_realloc_r+0x148>
   422e4:	80800217 	ldw	r2,8(r16)
   422e8:	b8800415 	stw	r2,16(r23)
   422ec:	80800317 	ldw	r2,12(r16)
   422f0:	b8800515 	stw	r2,20(r23)
   422f4:	31001226 	beq	r6,r4,42340 <_realloc_r+0x56c>
   422f8:	b8800604 	addi	r2,r23,24
   422fc:	80c00404 	addi	r3,r16,16
   42300:	003f9606 	br	4215c <_realloc_r+0x388>
   42304:	81000417 	ldw	r4,16(r16)
   42308:	90800604 	addi	r2,r18,24
   4230c:	80c00604 	addi	r3,r16,24
   42310:	91000415 	stw	r4,16(r18)
   42314:	81000517 	ldw	r4,20(r16)
   42318:	91000515 	stw	r4,20(r18)
   4231c:	003f4606 	br	42038 <_realloc_r+0x264>
   42320:	80800217 	ldw	r2,8(r16)
   42324:	b8800415 	stw	r2,16(r23)
   42328:	80800317 	ldw	r2,12(r16)
   4232c:	b8800515 	stw	r2,20(r23)
   42330:	31000d26 	beq	r6,r4,42368 <_realloc_r+0x594>
   42334:	b8800604 	addi	r2,r23,24
   42338:	80c00404 	addi	r3,r16,16
   4233c:	003f7106 	br	42104 <_realloc_r+0x330>
   42340:	81000417 	ldw	r4,16(r16)
   42344:	b8800804 	addi	r2,r23,32
   42348:	80c00604 	addi	r3,r16,24
   4234c:	b9000615 	stw	r4,24(r23)
   42350:	81000517 	ldw	r4,20(r16)
   42354:	b9000715 	stw	r4,28(r23)
   42358:	003f8006 	br	4215c <_realloc_r+0x388>
   4235c:	9005883a 	mov	r2,r18
   42360:	8007883a 	mov	r3,r16
   42364:	003fac06 	br	42218 <_realloc_r+0x444>
   42368:	81000417 	ldw	r4,16(r16)
   4236c:	b8800804 	addi	r2,r23,32
   42370:	80c00604 	addi	r3,r16,24
   42374:	b9000615 	stw	r4,24(r23)
   42378:	81000517 	ldw	r4,20(r16)
   4237c:	b9000715 	stw	r4,28(r23)
   42380:	003f6006 	br	42104 <_realloc_r+0x330>
   42384:	9009883a 	mov	r4,r18
   42388:	800b883a 	mov	r5,r16
   4238c:	0041c480 	call	41c48 <memmove>
   42390:	003fa706 	br	42230 <_realloc_r+0x45c>
   42394:	80800217 	ldw	r2,8(r16)
   42398:	b8800415 	stw	r2,16(r23)
   4239c:	80800317 	ldw	r2,12(r16)
   423a0:	b8800515 	stw	r2,20(r23)
   423a4:	31000326 	beq	r6,r4,423b4 <_realloc_r+0x5e0>
   423a8:	b8800604 	addi	r2,r23,24
   423ac:	80c00404 	addi	r3,r16,16
   423b0:	003f9906 	br	42218 <_realloc_r+0x444>
   423b4:	81000417 	ldw	r4,16(r16)
   423b8:	b8800804 	addi	r2,r23,32
   423bc:	80c00604 	addi	r3,r16,24
   423c0:	b9000615 	stw	r4,24(r23)
   423c4:	81000517 	ldw	r4,20(r16)
   423c8:	b9000715 	stw	r4,28(r23)
   423cc:	003f9206 	br	42218 <_realloc_r+0x444>

000423d0 <__swsetup_r>:
   423d0:	00800174 	movhi	r2,5
   423d4:	10a06304 	addi	r2,r2,-32372
   423d8:	10800017 	ldw	r2,0(r2)
   423dc:	defffd04 	addi	sp,sp,-12
   423e0:	dc400115 	stw	r17,4(sp)
   423e4:	dc000015 	stw	r16,0(sp)
   423e8:	dfc00215 	stw	ra,8(sp)
   423ec:	2023883a 	mov	r17,r4
   423f0:	2821883a 	mov	r16,r5
   423f4:	10000226 	beq	r2,zero,42400 <__swsetup_r+0x30>
   423f8:	10c00e17 	ldw	r3,56(r2)
   423fc:	18003d26 	beq	r3,zero,424f4 <__swsetup_r+0x124>
   42400:	8080030b 	ldhu	r2,12(r16)
   42404:	10c0020c 	andi	r3,r2,8
   42408:	18ffffcc 	andi	r3,r3,65535
   4240c:	18e0001c 	xori	r3,r3,32768
   42410:	18e00004 	addi	r3,r3,-32768
   42414:	18001226 	beq	r3,zero,42460 <__swsetup_r+0x90>
   42418:	80c00417 	ldw	r3,16(r16)
   4241c:	18001f26 	beq	r3,zero,4249c <__swsetup_r+0xcc>
   42420:	1100004c 	andi	r4,r2,1
   42424:	2000261e 	bne	r4,zero,424c0 <__swsetup_r+0xf0>
   42428:	1080008c 	andi	r2,r2,2
   4242c:	10bfffcc 	andi	r2,r2,65535
   42430:	10a0001c 	xori	r2,r2,32768
   42434:	10a00004 	addi	r2,r2,-32768
   42438:	1000311e 	bne	r2,zero,42500 <__swsetup_r+0x130>
   4243c:	80800517 	ldw	r2,20(r16)
   42440:	80800215 	stw	r2,8(r16)
   42444:	18002326 	beq	r3,zero,424d4 <__swsetup_r+0x104>
   42448:	0005883a 	mov	r2,zero
   4244c:	dfc00217 	ldw	ra,8(sp)
   42450:	dc400117 	ldw	r17,4(sp)
   42454:	dc000017 	ldw	r16,0(sp)
   42458:	dec00304 	addi	sp,sp,12
   4245c:	f800283a 	ret
   42460:	10c0040c 	andi	r3,r2,16
   42464:	18ffffcc 	andi	r3,r3,65535
   42468:	18e0001c 	xori	r3,r3,32768
   4246c:	18e00004 	addi	r3,r3,-32768
   42470:	18001e26 	beq	r3,zero,424ec <__swsetup_r+0x11c>
   42474:	10c0010c 	andi	r3,r2,4
   42478:	18ffffcc 	andi	r3,r3,65535
   4247c:	18e0001c 	xori	r3,r3,32768
   42480:	18e00004 	addi	r3,r3,-32768
   42484:	1800211e 	bne	r3,zero,4250c <__swsetup_r+0x13c>
   42488:	80c00417 	ldw	r3,16(r16)
   4248c:	11400214 	ori	r5,r2,8
   42490:	8140030d 	sth	r5,12(r16)
   42494:	2805883a 	mov	r2,r5
   42498:	183fe11e 	bne	r3,zero,42420 <__swsetup_r+0x50>
   4249c:	1140a00c 	andi	r5,r2,640
   424a0:	01008004 	movi	r4,512
   424a4:	293fde26 	beq	r5,r4,42420 <__swsetup_r+0x50>
   424a8:	8809883a 	mov	r4,r17
   424ac:	800b883a 	mov	r5,r16
   424b0:	0042ba80 	call	42ba8 <__smakebuf_r>
   424b4:	8080030b 	ldhu	r2,12(r16)
   424b8:	80c00417 	ldw	r3,16(r16)
   424bc:	003fd806 	br	42420 <__swsetup_r+0x50>
   424c0:	80800517 	ldw	r2,20(r16)
   424c4:	80000215 	stw	zero,8(r16)
   424c8:	0085c83a 	sub	r2,zero,r2
   424cc:	80800615 	stw	r2,24(r16)
   424d0:	183fdd1e 	bne	r3,zero,42448 <__swsetup_r+0x78>
   424d4:	8080030b 	ldhu	r2,12(r16)
   424d8:	1080200c 	andi	r2,r2,128
   424dc:	10bfffcc 	andi	r2,r2,65535
   424e0:	10a0001c 	xori	r2,r2,32768
   424e4:	10a00004 	addi	r2,r2,-32768
   424e8:	103fd826 	beq	r2,zero,4244c <__swsetup_r+0x7c>
   424ec:	00bfffc4 	movi	r2,-1
   424f0:	003fd606 	br	4244c <__swsetup_r+0x7c>
   424f4:	1009883a 	mov	r4,r2
   424f8:	00428000 	call	42800 <__sinit>
   424fc:	003fc006 	br	42400 <__swsetup_r+0x30>
   42500:	0005883a 	mov	r2,zero
   42504:	80800215 	stw	r2,8(r16)
   42508:	003fce06 	br	42444 <__swsetup_r+0x74>
   4250c:	81400c17 	ldw	r5,48(r16)
   42510:	28000626 	beq	r5,zero,4252c <__swsetup_r+0x15c>
   42514:	80c01004 	addi	r3,r16,64
   42518:	28c00326 	beq	r5,r3,42528 <__swsetup_r+0x158>
   4251c:	8809883a 	mov	r4,r17
   42520:	004125c0 	call	4125c <_free_r>
   42524:	8080030b 	ldhu	r2,12(r16)
   42528:	80000c15 	stw	zero,48(r16)
   4252c:	80c00417 	ldw	r3,16(r16)
   42530:	013ff6c4 	movi	r4,-37
   42534:	2084703a 	and	r2,r4,r2
   42538:	80000115 	stw	zero,4(r16)
   4253c:	80c00015 	stw	r3,0(r16)
   42540:	003fd206 	br	4248c <__swsetup_r+0xbc>

00042544 <_fflush_r>:
   42544:	defffb04 	addi	sp,sp,-20
   42548:	dcc00315 	stw	r19,12(sp)
   4254c:	dc400115 	stw	r17,4(sp)
   42550:	dfc00415 	stw	ra,16(sp)
   42554:	dc800215 	stw	r18,8(sp)
   42558:	dc000015 	stw	r16,0(sp)
   4255c:	2027883a 	mov	r19,r4
   42560:	2823883a 	mov	r17,r5
   42564:	20000226 	beq	r4,zero,42570 <_fflush_r+0x2c>
   42568:	20800e17 	ldw	r2,56(r4)
   4256c:	10005726 	beq	r2,zero,426cc <_fflush_r+0x188>
   42570:	8880030b 	ldhu	r2,12(r17)
   42574:	10c0020c 	andi	r3,r2,8
   42578:	18ffffcc 	andi	r3,r3,65535
   4257c:	18e0001c 	xori	r3,r3,32768
   42580:	18e00004 	addi	r3,r3,-32768
   42584:	1800311e 	bne	r3,zero,4264c <_fflush_r+0x108>
   42588:	89000117 	ldw	r4,4(r17)
   4258c:	10c20014 	ori	r3,r2,2048
   42590:	88c0030d 	sth	r3,12(r17)
   42594:	180b883a 	mov	r5,r3
   42598:	0100520e 	bge	zero,r4,426e4 <_fflush_r+0x1a0>
   4259c:	88c00a17 	ldw	r3,40(r17)
   425a0:	18002226 	beq	r3,zero,4262c <_fflush_r+0xe8>
   425a4:	1084000c 	andi	r2,r2,4096
   425a8:	10bfffcc 	andi	r2,r2,65535
   425ac:	10a0001c 	xori	r2,r2,32768
   425b0:	10a00004 	addi	r2,r2,-32768
   425b4:	10004e26 	beq	r2,zero,426f0 <_fflush_r+0x1ac>
   425b8:	8c001417 	ldw	r16,80(r17)
   425bc:	2940010c 	andi	r5,r5,4
   425c0:	297fffcc 	andi	r5,r5,65535
   425c4:	2960001c 	xori	r5,r5,32768
   425c8:	29600004 	addi	r5,r5,-32768
   425cc:	28000626 	beq	r5,zero,425e8 <_fflush_r+0xa4>
   425d0:	89000117 	ldw	r4,4(r17)
   425d4:	88800c17 	ldw	r2,48(r17)
   425d8:	8121c83a 	sub	r16,r16,r4
   425dc:	10000226 	beq	r2,zero,425e8 <_fflush_r+0xa4>
   425e0:	88800f17 	ldw	r2,60(r17)
   425e4:	80a1c83a 	sub	r16,r16,r2
   425e8:	89400717 	ldw	r5,28(r17)
   425ec:	9809883a 	mov	r4,r19
   425f0:	800d883a 	mov	r6,r16
   425f4:	000f883a 	mov	r7,zero
   425f8:	183ee83a 	callr	r3
   425fc:	8080281e 	bne	r16,r2,426a0 <_fflush_r+0x15c>
   42600:	8880030b 	ldhu	r2,12(r17)
   42604:	88c00417 	ldw	r3,16(r17)
   42608:	88000115 	stw	zero,4(r17)
   4260c:	113dffcc 	andi	r4,r2,63487
   42610:	1084000c 	andi	r2,r2,4096
   42614:	10bfffcc 	andi	r2,r2,65535
   42618:	10a0001c 	xori	r2,r2,32768
   4261c:	8900030d 	sth	r4,12(r17)
   42620:	88c00015 	stw	r3,0(r17)
   42624:	10a00004 	addi	r2,r2,-32768
   42628:	10002c1e 	bne	r2,zero,426dc <_fflush_r+0x198>
   4262c:	0005883a 	mov	r2,zero
   42630:	dfc00417 	ldw	ra,16(sp)
   42634:	dcc00317 	ldw	r19,12(sp)
   42638:	dc800217 	ldw	r18,8(sp)
   4263c:	dc400117 	ldw	r17,4(sp)
   42640:	dc000017 	ldw	r16,0(sp)
   42644:	dec00504 	addi	sp,sp,20
   42648:	f800283a 	ret
   4264c:	8c800417 	ldw	r18,16(r17)
   42650:	903ff626 	beq	r18,zero,4262c <_fflush_r+0xe8>
   42654:	8c000017 	ldw	r16,0(r17)
   42658:	108000cc 	andi	r2,r2,3
   4265c:	8c800015 	stw	r18,0(r17)
   42660:	84a1c83a 	sub	r16,r16,r18
   42664:	10001b1e 	bne	r2,zero,426d4 <_fflush_r+0x190>
   42668:	88800517 	ldw	r2,20(r17)
   4266c:	88800215 	stw	r2,8(r17)
   42670:	04000316 	blt	zero,r16,42680 <_fflush_r+0x13c>
   42674:	003fed06 	br	4262c <_fflush_r+0xe8>
   42678:	90a5883a 	add	r18,r18,r2
   4267c:	043feb0e 	bge	zero,r16,4262c <_fflush_r+0xe8>
   42680:	88800917 	ldw	r2,36(r17)
   42684:	89400717 	ldw	r5,28(r17)
   42688:	800f883a 	mov	r7,r16
   4268c:	900d883a 	mov	r6,r18
   42690:	9809883a 	mov	r4,r19
   42694:	103ee83a 	callr	r2
   42698:	80a1c83a 	sub	r16,r16,r2
   4269c:	00bff616 	blt	zero,r2,42678 <_fflush_r+0x134>
   426a0:	88c0030b 	ldhu	r3,12(r17)
   426a4:	00bfffc4 	movi	r2,-1
   426a8:	18c01014 	ori	r3,r3,64
   426ac:	88c0030d 	sth	r3,12(r17)
   426b0:	dfc00417 	ldw	ra,16(sp)
   426b4:	dcc00317 	ldw	r19,12(sp)
   426b8:	dc800217 	ldw	r18,8(sp)
   426bc:	dc400117 	ldw	r17,4(sp)
   426c0:	dc000017 	ldw	r16,0(sp)
   426c4:	dec00504 	addi	sp,sp,20
   426c8:	f800283a 	ret
   426cc:	00428000 	call	42800 <__sinit>
   426d0:	003fa706 	br	42570 <_fflush_r+0x2c>
   426d4:	0005883a 	mov	r2,zero
   426d8:	003fe406 	br	4266c <_fflush_r+0x128>
   426dc:	8c001415 	stw	r16,80(r17)
   426e0:	003fd206 	br	4262c <_fflush_r+0xe8>
   426e4:	88c00f17 	ldw	r3,60(r17)
   426e8:	00ffac16 	blt	zero,r3,4259c <_fflush_r+0x58>
   426ec:	003fcf06 	br	4262c <_fflush_r+0xe8>
   426f0:	89400717 	ldw	r5,28(r17)
   426f4:	9809883a 	mov	r4,r19
   426f8:	000d883a 	mov	r6,zero
   426fc:	01c00044 	movi	r7,1
   42700:	183ee83a 	callr	r3
   42704:	1021883a 	mov	r16,r2
   42708:	00bfffc4 	movi	r2,-1
   4270c:	80800326 	beq	r16,r2,4271c <_fflush_r+0x1d8>
   42710:	8940030b 	ldhu	r5,12(r17)
   42714:	88c00a17 	ldw	r3,40(r17)
   42718:	003fa806 	br	425bc <_fflush_r+0x78>
   4271c:	98c00017 	ldw	r3,0(r19)
   42720:	00800744 	movi	r2,29
   42724:	18bfde1e 	bne	r3,r2,426a0 <_fflush_r+0x15c>
   42728:	003fc006 	br	4262c <_fflush_r+0xe8>

0004272c <fflush>:
   4272c:	200b883a 	mov	r5,r4
   42730:	20000426 	beq	r4,zero,42744 <fflush+0x18>
   42734:	00800174 	movhi	r2,5
   42738:	10a06304 	addi	r2,r2,-32372
   4273c:	11000017 	ldw	r4,0(r2)
   42740:	00425441 	jmpi	42544 <_fflush_r>
   42744:	00800174 	movhi	r2,5
   42748:	10a06204 	addi	r2,r2,-32376
   4274c:	11000017 	ldw	r4,0(r2)
   42750:	01400134 	movhi	r5,4
   42754:	29495104 	addi	r5,r5,9540
   42758:	0042af01 	jmpi	42af0 <_fwalk_reent>

0004275c <__fp_lock>:
   4275c:	0005883a 	mov	r2,zero
   42760:	f800283a 	ret

00042764 <__fp_unlock>:
   42764:	0005883a 	mov	r2,zero
   42768:	f800283a 	ret

0004276c <_cleanup_r>:
   4276c:	01400134 	movhi	r5,4
   42770:	294c5e04 	addi	r5,r5,12664
   42774:	0042a481 	jmpi	42a48 <_fwalk>

00042778 <__sfmoreglue>:
   42778:	defffc04 	addi	sp,sp,-16
   4277c:	dc800215 	stw	r18,8(sp)
   42780:	2825883a 	mov	r18,r5
   42784:	dc000015 	stw	r16,0(sp)
   42788:	01401704 	movi	r5,92
   4278c:	2021883a 	mov	r16,r4
   42790:	9009883a 	mov	r4,r18
   42794:	dfc00315 	stw	ra,12(sp)
   42798:	dc400115 	stw	r17,4(sp)
   4279c:	00433300 	call	43330 <__mulsi3>
   427a0:	8009883a 	mov	r4,r16
   427a4:	11400304 	addi	r5,r2,12
   427a8:	1023883a 	mov	r17,r2
   427ac:	00408140 	call	40814 <_malloc_r>
   427b0:	1021883a 	mov	r16,r2
   427b4:	10000726 	beq	r2,zero,427d4 <__sfmoreglue+0x5c>
   427b8:	11000304 	addi	r4,r2,12
   427bc:	10000015 	stw	zero,0(r2)
   427c0:	14800115 	stw	r18,4(r2)
   427c4:	11000215 	stw	r4,8(r2)
   427c8:	000b883a 	mov	r5,zero
   427cc:	880d883a 	mov	r6,r17
   427d0:	0042d500 	call	42d50 <memset>
   427d4:	8005883a 	mov	r2,r16
   427d8:	dfc00317 	ldw	ra,12(sp)
   427dc:	dc800217 	ldw	r18,8(sp)
   427e0:	dc400117 	ldw	r17,4(sp)
   427e4:	dc000017 	ldw	r16,0(sp)
   427e8:	dec00404 	addi	sp,sp,16
   427ec:	f800283a 	ret

000427f0 <_cleanup>:
   427f0:	00800174 	movhi	r2,5
   427f4:	10a06204 	addi	r2,r2,-32376
   427f8:	11000017 	ldw	r4,0(r2)
   427fc:	004276c1 	jmpi	4276c <_cleanup_r>

00042800 <__sinit>:
   42800:	20800e17 	ldw	r2,56(r4)
   42804:	1000401e 	bne	r2,zero,42908 <__sinit+0x108>
   42808:	21400117 	ldw	r5,4(r4)
   4280c:	01800134 	movhi	r6,4
   42810:	3189db04 	addi	r6,r6,10092
   42814:	20c00217 	ldw	r3,8(r4)
   42818:	21800f15 	stw	r6,60(r4)
   4281c:	2080bb04 	addi	r2,r4,748
   42820:	02400044 	movi	r9,1
   42824:	018000c4 	movi	r6,3
   42828:	2180b915 	stw	r6,740(r4)
   4282c:	2080ba15 	stw	r2,744(r4)
   42830:	22400e15 	stw	r9,56(r4)
   42834:	20800317 	ldw	r2,12(r4)
   42838:	2000b815 	stw	zero,736(r4)
   4283c:	02000134 	movhi	r8,4
   42840:	420b8b04 	addi	r8,r8,11820
   42844:	01c00134 	movhi	r7,4
   42848:	39cba004 	addi	r7,r7,11904
   4284c:	01800134 	movhi	r6,4
   42850:	318bc204 	addi	r6,r6,12040
   42854:	01000134 	movhi	r4,4
   42858:	210bd904 	addi	r4,r4,12132
   4285c:	02800104 	movi	r10,4
   42860:	28000015 	stw	zero,0(r5)
   42864:	28000115 	stw	zero,4(r5)
   42868:	28000215 	stw	zero,8(r5)
   4286c:	2a80030d 	sth	r10,12(r5)
   42870:	2800038d 	sth	zero,14(r5)
   42874:	28000415 	stw	zero,16(r5)
   42878:	28000515 	stw	zero,20(r5)
   4287c:	28000615 	stw	zero,24(r5)
   42880:	29400715 	stw	r5,28(r5)
   42884:	2a000815 	stw	r8,32(r5)
   42888:	29c00915 	stw	r7,36(r5)
   4288c:	29800a15 	stw	r6,40(r5)
   42890:	29000b15 	stw	r4,44(r5)
   42894:	01400284 	movi	r5,10
   42898:	18000015 	stw	zero,0(r3)
   4289c:	18000115 	stw	zero,4(r3)
   428a0:	18000215 	stw	zero,8(r3)
   428a4:	1940030d 	sth	r5,12(r3)
   428a8:	1a40038d 	sth	r9,14(r3)
   428ac:	18000415 	stw	zero,16(r3)
   428b0:	18000515 	stw	zero,20(r3)
   428b4:	18000615 	stw	zero,24(r3)
   428b8:	18c00715 	stw	r3,28(r3)
   428bc:	1a000815 	stw	r8,32(r3)
   428c0:	19c00915 	stw	r7,36(r3)
   428c4:	19800a15 	stw	r6,40(r3)
   428c8:	19000b15 	stw	r4,44(r3)
   428cc:	00c00484 	movi	r3,18
   428d0:	10c0030d 	sth	r3,12(r2)
   428d4:	00c00084 	movi	r3,2
   428d8:	10000015 	stw	zero,0(r2)
   428dc:	10000115 	stw	zero,4(r2)
   428e0:	10000215 	stw	zero,8(r2)
   428e4:	10c0038d 	sth	r3,14(r2)
   428e8:	10000415 	stw	zero,16(r2)
   428ec:	10000515 	stw	zero,20(r2)
   428f0:	10000615 	stw	zero,24(r2)
   428f4:	10800715 	stw	r2,28(r2)
   428f8:	12000815 	stw	r8,32(r2)
   428fc:	11c00915 	stw	r7,36(r2)
   42900:	11800a15 	stw	r6,40(r2)
   42904:	11000b15 	stw	r4,44(r2)
   42908:	f800283a 	ret

0004290c <__sfp>:
   4290c:	defffc04 	addi	sp,sp,-16
   42910:	00800174 	movhi	r2,5
   42914:	10a06204 	addi	r2,r2,-32376
   42918:	dc400115 	stw	r17,4(sp)
   4291c:	14400017 	ldw	r17,0(r2)
   42920:	dc800215 	stw	r18,8(sp)
   42924:	dfc00315 	stw	ra,12(sp)
   42928:	88800e17 	ldw	r2,56(r17)
   4292c:	dc000015 	stw	r16,0(sp)
   42930:	2025883a 	mov	r18,r4
   42934:	10002826 	beq	r2,zero,429d8 <__sfp+0xcc>
   42938:	8c40b804 	addi	r17,r17,736
   4293c:	043fffc4 	movi	r16,-1
   42940:	89400117 	ldw	r5,4(r17)
   42944:	88800217 	ldw	r2,8(r17)
   42948:	297fffc4 	addi	r5,r5,-1
   4294c:	28000a16 	blt	r5,zero,42978 <__sfp+0x6c>
   42950:	10c0030f 	ldh	r3,12(r2)
   42954:	18000c26 	beq	r3,zero,42988 <__sfp+0x7c>
   42958:	10c01a04 	addi	r3,r2,104
   4295c:	00000206 	br	42968 <__sfp+0x5c>
   42960:	19bfe90f 	ldh	r6,-92(r3)
   42964:	30000826 	beq	r6,zero,42988 <__sfp+0x7c>
   42968:	297fffc4 	addi	r5,r5,-1
   4296c:	18bffd04 	addi	r2,r3,-12
   42970:	18c01704 	addi	r3,r3,92
   42974:	2c3ffa1e 	bne	r5,r16,42960 <__sfp+0x54>
   42978:	88800017 	ldw	r2,0(r17)
   4297c:	10001926 	beq	r2,zero,429e4 <__sfp+0xd8>
   42980:	1023883a 	mov	r17,r2
   42984:	003fee06 	br	42940 <__sfp+0x34>
   42988:	00ffffc4 	movi	r3,-1
   4298c:	10c0038d 	sth	r3,14(r2)
   42990:	00c00044 	movi	r3,1
   42994:	10c0030d 	sth	r3,12(r2)
   42998:	10000015 	stw	zero,0(r2)
   4299c:	10000215 	stw	zero,8(r2)
   429a0:	10000115 	stw	zero,4(r2)
   429a4:	10000415 	stw	zero,16(r2)
   429a8:	10000515 	stw	zero,20(r2)
   429ac:	10000615 	stw	zero,24(r2)
   429b0:	10000c15 	stw	zero,48(r2)
   429b4:	10000d15 	stw	zero,52(r2)
   429b8:	10001115 	stw	zero,68(r2)
   429bc:	10001215 	stw	zero,72(r2)
   429c0:	dfc00317 	ldw	ra,12(sp)
   429c4:	dc800217 	ldw	r18,8(sp)
   429c8:	dc400117 	ldw	r17,4(sp)
   429cc:	dc000017 	ldw	r16,0(sp)
   429d0:	dec00404 	addi	sp,sp,16
   429d4:	f800283a 	ret
   429d8:	8809883a 	mov	r4,r17
   429dc:	00428000 	call	42800 <__sinit>
   429e0:	003fd506 	br	42938 <__sfp+0x2c>
   429e4:	9009883a 	mov	r4,r18
   429e8:	01400104 	movi	r5,4
   429ec:	00427780 	call	42778 <__sfmoreglue>
   429f0:	88800015 	stw	r2,0(r17)
   429f4:	103fe21e 	bne	r2,zero,42980 <__sfp+0x74>
   429f8:	00800304 	movi	r2,12
   429fc:	90800015 	stw	r2,0(r18)
   42a00:	0005883a 	mov	r2,zero
   42a04:	003fee06 	br	429c0 <__sfp+0xb4>

00042a08 <__sfp_lock_acquire>:
   42a08:	f800283a 	ret

00042a0c <__sfp_lock_release>:
   42a0c:	f800283a 	ret

00042a10 <__sinit_lock_acquire>:
   42a10:	f800283a 	ret

00042a14 <__sinit_lock_release>:
   42a14:	f800283a 	ret

00042a18 <__fp_lock_all>:
   42a18:	00800174 	movhi	r2,5
   42a1c:	10a06304 	addi	r2,r2,-32372
   42a20:	11000017 	ldw	r4,0(r2)
   42a24:	01400134 	movhi	r5,4
   42a28:	2949d704 	addi	r5,r5,10076
   42a2c:	0042a481 	jmpi	42a48 <_fwalk>

00042a30 <__fp_unlock_all>:
   42a30:	00800174 	movhi	r2,5
   42a34:	10a06304 	addi	r2,r2,-32372
   42a38:	11000017 	ldw	r4,0(r2)
   42a3c:	01400134 	movhi	r5,4
   42a40:	2949d904 	addi	r5,r5,10084
   42a44:	0042a481 	jmpi	42a48 <_fwalk>

00042a48 <_fwalk>:
   42a48:	defff904 	addi	sp,sp,-28
   42a4c:	dcc00315 	stw	r19,12(sp)
   42a50:	24c0b804 	addi	r19,r4,736
   42a54:	dd400515 	stw	r21,20(sp)
   42a58:	dd000415 	stw	r20,16(sp)
   42a5c:	dfc00615 	stw	ra,24(sp)
   42a60:	dc800215 	stw	r18,8(sp)
   42a64:	dc400115 	stw	r17,4(sp)
   42a68:	dc000015 	stw	r16,0(sp)
   42a6c:	282b883a 	mov	r21,r5
   42a70:	0029883a 	mov	r20,zero
   42a74:	0042a080 	call	42a08 <__sfp_lock_acquire>
   42a78:	98001226 	beq	r19,zero,42ac4 <_fwalk+0x7c>
   42a7c:	04bfffc4 	movi	r18,-1
   42a80:	9c400117 	ldw	r17,4(r19)
   42a84:	9c000217 	ldw	r16,8(r19)
   42a88:	8c7fffc4 	addi	r17,r17,-1
   42a8c:	88000b16 	blt	r17,zero,42abc <_fwalk+0x74>
   42a90:	84000304 	addi	r16,r16,12
   42a94:	80c0000f 	ldh	r3,0(r16)
   42a98:	8c7fffc4 	addi	r17,r17,-1
   42a9c:	813ffd04 	addi	r4,r16,-12
   42aa0:	18000426 	beq	r3,zero,42ab4 <_fwalk+0x6c>
   42aa4:	80c0008f 	ldh	r3,2(r16)
   42aa8:	1c800226 	beq	r3,r18,42ab4 <_fwalk+0x6c>
   42aac:	a83ee83a 	callr	r21
   42ab0:	a0a8b03a 	or	r20,r20,r2
   42ab4:	84001704 	addi	r16,r16,92
   42ab8:	8cbff61e 	bne	r17,r18,42a94 <_fwalk+0x4c>
   42abc:	9cc00017 	ldw	r19,0(r19)
   42ac0:	983fef1e 	bne	r19,zero,42a80 <_fwalk+0x38>
   42ac4:	0042a0c0 	call	42a0c <__sfp_lock_release>
   42ac8:	a005883a 	mov	r2,r20
   42acc:	dfc00617 	ldw	ra,24(sp)
   42ad0:	dd400517 	ldw	r21,20(sp)
   42ad4:	dd000417 	ldw	r20,16(sp)
   42ad8:	dcc00317 	ldw	r19,12(sp)
   42adc:	dc800217 	ldw	r18,8(sp)
   42ae0:	dc400117 	ldw	r17,4(sp)
   42ae4:	dc000017 	ldw	r16,0(sp)
   42ae8:	dec00704 	addi	sp,sp,28
   42aec:	f800283a 	ret

00042af0 <_fwalk_reent>:
   42af0:	defff804 	addi	sp,sp,-32
   42af4:	dcc00315 	stw	r19,12(sp)
   42af8:	24c0b804 	addi	r19,r4,736
   42afc:	dd800615 	stw	r22,24(sp)
   42b00:	dd400515 	stw	r21,20(sp)
   42b04:	dd000415 	stw	r20,16(sp)
   42b08:	dfc00715 	stw	ra,28(sp)
   42b0c:	dc800215 	stw	r18,8(sp)
   42b10:	dc400115 	stw	r17,4(sp)
   42b14:	dc000015 	stw	r16,0(sp)
   42b18:	2029883a 	mov	r20,r4
   42b1c:	282b883a 	mov	r21,r5
   42b20:	002d883a 	mov	r22,zero
   42b24:	0042a080 	call	42a08 <__sfp_lock_acquire>
   42b28:	98001326 	beq	r19,zero,42b78 <_fwalk_reent+0x88>
   42b2c:	04bfffc4 	movi	r18,-1
   42b30:	9c400117 	ldw	r17,4(r19)
   42b34:	9c000217 	ldw	r16,8(r19)
   42b38:	8c7fffc4 	addi	r17,r17,-1
   42b3c:	88000c16 	blt	r17,zero,42b70 <_fwalk_reent+0x80>
   42b40:	84000304 	addi	r16,r16,12
   42b44:	80c0000f 	ldh	r3,0(r16)
   42b48:	8c7fffc4 	addi	r17,r17,-1
   42b4c:	817ffd04 	addi	r5,r16,-12
   42b50:	18000526 	beq	r3,zero,42b68 <_fwalk_reent+0x78>
   42b54:	80c0008f 	ldh	r3,2(r16)
   42b58:	a009883a 	mov	r4,r20
   42b5c:	1c800226 	beq	r3,r18,42b68 <_fwalk_reent+0x78>
   42b60:	a83ee83a 	callr	r21
   42b64:	b0acb03a 	or	r22,r22,r2
   42b68:	84001704 	addi	r16,r16,92
   42b6c:	8cbff51e 	bne	r17,r18,42b44 <_fwalk_reent+0x54>
   42b70:	9cc00017 	ldw	r19,0(r19)
   42b74:	983fee1e 	bne	r19,zero,42b30 <_fwalk_reent+0x40>
   42b78:	0042a0c0 	call	42a0c <__sfp_lock_release>
   42b7c:	b005883a 	mov	r2,r22
   42b80:	dfc00717 	ldw	ra,28(sp)
   42b84:	dd800617 	ldw	r22,24(sp)
   42b88:	dd400517 	ldw	r21,20(sp)
   42b8c:	dd000417 	ldw	r20,16(sp)
   42b90:	dcc00317 	ldw	r19,12(sp)
   42b94:	dc800217 	ldw	r18,8(sp)
   42b98:	dc400117 	ldw	r17,4(sp)
   42b9c:	dc000017 	ldw	r16,0(sp)
   42ba0:	dec00804 	addi	sp,sp,32
   42ba4:	f800283a 	ret

00042ba8 <__smakebuf_r>:
   42ba8:	2880030b 	ldhu	r2,12(r5)
   42bac:	deffed04 	addi	sp,sp,-76
   42bb0:	dc401015 	stw	r17,64(sp)
   42bb4:	10c0008c 	andi	r3,r2,2
   42bb8:	18ffffcc 	andi	r3,r3,65535
   42bbc:	18e0001c 	xori	r3,r3,32768
   42bc0:	dc000f15 	stw	r16,60(sp)
   42bc4:	dfc01215 	stw	ra,72(sp)
   42bc8:	dc801115 	stw	r18,68(sp)
   42bcc:	18e00004 	addi	r3,r3,-32768
   42bd0:	2821883a 	mov	r16,r5
   42bd4:	2023883a 	mov	r17,r4
   42bd8:	1800381e 	bne	r3,zero,42cbc <__smakebuf_r+0x114>
   42bdc:	2940038f 	ldh	r5,14(r5)
   42be0:	28002d16 	blt	r5,zero,42c98 <__smakebuf_r+0xf0>
   42be4:	d80d883a 	mov	r6,sp
   42be8:	004318c0 	call	4318c <_fstat_r>
   42bec:	10002916 	blt	r2,zero,42c94 <__smakebuf_r+0xec>
   42bf0:	d8800117 	ldw	r2,4(sp)
   42bf4:	00e00014 	movui	r3,32768
   42bf8:	10bc000c 	andi	r2,r2,61440
   42bfc:	10c03c26 	beq	r2,r3,42cf0 <__smakebuf_r+0x148>
   42c00:	80c0030b 	ldhu	r3,12(r16)
   42c04:	18c20014 	ori	r3,r3,2048
   42c08:	80c0030d 	sth	r3,12(r16)
   42c0c:	00c80004 	movi	r3,8192
   42c10:	10c00c1e 	bne	r2,r3,42c44 <__smakebuf_r+0x9c>
   42c14:	8140038f 	ldh	r5,14(r16)
   42c18:	8809883a 	mov	r4,r17
   42c1c:	00431f40 	call	431f4 <_isatty_r>
   42c20:	10000826 	beq	r2,zero,42c44 <__smakebuf_r+0x9c>
   42c24:	80c0030b 	ldhu	r3,12(r16)
   42c28:	808010c4 	addi	r2,r16,67
   42c2c:	80800015 	stw	r2,0(r16)
   42c30:	18c00054 	ori	r3,r3,1
   42c34:	80800415 	stw	r2,16(r16)
   42c38:	00800044 	movi	r2,1
   42c3c:	80c0030d 	sth	r3,12(r16)
   42c40:	80800515 	stw	r2,20(r16)
   42c44:	04810004 	movi	r18,1024
   42c48:	8809883a 	mov	r4,r17
   42c4c:	900b883a 	mov	r5,r18
   42c50:	00408140 	call	40814 <_malloc_r>
   42c54:	10003026 	beq	r2,zero,42d18 <__smakebuf_r+0x170>
   42c58:	80c0030b 	ldhu	r3,12(r16)
   42c5c:	01000134 	movhi	r4,4
   42c60:	2109db04 	addi	r4,r4,10092
   42c64:	89000f15 	stw	r4,60(r17)
   42c68:	18c02014 	ori	r3,r3,128
   42c6c:	80c0030d 	sth	r3,12(r16)
   42c70:	80800015 	stw	r2,0(r16)
   42c74:	80800415 	stw	r2,16(r16)
   42c78:	84800515 	stw	r18,20(r16)
   42c7c:	dfc01217 	ldw	ra,72(sp)
   42c80:	dc801117 	ldw	r18,68(sp)
   42c84:	dc401017 	ldw	r17,64(sp)
   42c88:	dc000f17 	ldw	r16,60(sp)
   42c8c:	dec01304 	addi	sp,sp,76
   42c90:	f800283a 	ret
   42c94:	8080030b 	ldhu	r2,12(r16)
   42c98:	10c0200c 	andi	r3,r2,128
   42c9c:	18ffffcc 	andi	r3,r3,65535
   42ca0:	18e0001c 	xori	r3,r3,32768
   42ca4:	18e00004 	addi	r3,r3,-32768
   42ca8:	18000f1e 	bne	r3,zero,42ce8 <__smakebuf_r+0x140>
   42cac:	04810004 	movi	r18,1024
   42cb0:	10820014 	ori	r2,r2,2048
   42cb4:	8080030d 	sth	r2,12(r16)
   42cb8:	003fe306 	br	42c48 <__smakebuf_r+0xa0>
   42cbc:	288010c4 	addi	r2,r5,67
   42cc0:	28800015 	stw	r2,0(r5)
   42cc4:	28800415 	stw	r2,16(r5)
   42cc8:	00800044 	movi	r2,1
   42ccc:	28800515 	stw	r2,20(r5)
   42cd0:	dfc01217 	ldw	ra,72(sp)
   42cd4:	dc801117 	ldw	r18,68(sp)
   42cd8:	dc401017 	ldw	r17,64(sp)
   42cdc:	dc000f17 	ldw	r16,60(sp)
   42ce0:	dec01304 	addi	sp,sp,76
   42ce4:	f800283a 	ret
   42ce8:	04801004 	movi	r18,64
   42cec:	003ff006 	br	42cb0 <__smakebuf_r+0x108>
   42cf0:	81000a17 	ldw	r4,40(r16)
   42cf4:	00c00134 	movhi	r3,4
   42cf8:	18cbc204 	addi	r3,r3,12040
   42cfc:	20ffc01e 	bne	r4,r3,42c00 <__smakebuf_r+0x58>
   42d00:	8080030b 	ldhu	r2,12(r16)
   42d04:	00c10004 	movi	r3,1024
   42d08:	80c01315 	stw	r3,76(r16)
   42d0c:	10c4b03a 	or	r2,r2,r3
   42d10:	8080030d 	sth	r2,12(r16)
   42d14:	003fcb06 	br	42c44 <__smakebuf_r+0x9c>
   42d18:	8080030b 	ldhu	r2,12(r16)
   42d1c:	10c0800c 	andi	r3,r2,512
   42d20:	18ffffcc 	andi	r3,r3,65535
   42d24:	18e0001c 	xori	r3,r3,32768
   42d28:	18e00004 	addi	r3,r3,-32768
   42d2c:	183fd31e 	bne	r3,zero,42c7c <__smakebuf_r+0xd4>
   42d30:	10800094 	ori	r2,r2,2
   42d34:	80c010c4 	addi	r3,r16,67
   42d38:	8080030d 	sth	r2,12(r16)
   42d3c:	00800044 	movi	r2,1
   42d40:	80c00015 	stw	r3,0(r16)
   42d44:	80c00415 	stw	r3,16(r16)
   42d48:	80800515 	stw	r2,20(r16)
   42d4c:	003fcb06 	br	42c7c <__smakebuf_r+0xd4>

00042d50 <memset>:
   42d50:	00c000c4 	movi	r3,3
   42d54:	2005883a 	mov	r2,r4
   42d58:	29403fcc 	andi	r5,r5,255
   42d5c:	19802d2e 	bgeu	r3,r6,42e14 <memset+0xc4>
   42d60:	20c6703a 	and	r3,r4,r3
   42d64:	18002e1e 	bne	r3,zero,42e20 <memset+0xd0>
   42d68:	2806923a 	slli	r3,r5,8
   42d6c:	010003c4 	movi	r4,15
   42d70:	3011883a 	mov	r8,r6
   42d74:	1946b03a 	or	r3,r3,r5
   42d78:	180e943a 	slli	r7,r3,16
   42d7c:	38ceb03a 	or	r7,r7,r3
   42d80:	1007883a 	mov	r3,r2
   42d84:	21800f2e 	bgeu	r4,r6,42dc4 <memset+0x74>
   42d88:	19c00015 	stw	r7,0(r3)
   42d8c:	19c00115 	stw	r7,4(r3)
   42d90:	19c00215 	stw	r7,8(r3)
   42d94:	19c00315 	stw	r7,12(r3)
   42d98:	423ffc04 	addi	r8,r8,-16
   42d9c:	18c00404 	addi	r3,r3,16
   42da0:	223ff936 	bltu	r4,r8,42d88 <memset+0x38>
   42da4:	30fffc04 	addi	r3,r6,-16
   42da8:	1806d13a 	srli	r3,r3,4
   42dac:	318003cc 	andi	r6,r6,15
   42db0:	010000c4 	movi	r4,3
   42db4:	18c00044 	addi	r3,r3,1
   42db8:	1806913a 	slli	r3,r3,4
   42dbc:	10c7883a 	add	r3,r2,r3
   42dc0:	21800e2e 	bgeu	r4,r6,42dfc <memset+0xac>
   42dc4:	1813883a 	mov	r9,r3
   42dc8:	3011883a 	mov	r8,r6
   42dcc:	010000c4 	movi	r4,3
   42dd0:	49c00015 	stw	r7,0(r9)
   42dd4:	423fff04 	addi	r8,r8,-4
   42dd8:	4a400104 	addi	r9,r9,4
   42ddc:	223ffc36 	bltu	r4,r8,42dd0 <memset+0x80>
   42de0:	313fff04 	addi	r4,r6,-4
   42de4:	2008d0ba 	srli	r4,r4,2
   42de8:	318000cc 	andi	r6,r6,3
   42dec:	21000044 	addi	r4,r4,1
   42df0:	2109883a 	add	r4,r4,r4
   42df4:	2109883a 	add	r4,r4,r4
   42df8:	1907883a 	add	r3,r3,r4
   42dfc:	30000a26 	beq	r6,zero,42e28 <memset+0xd8>
   42e00:	198d883a 	add	r6,r3,r6
   42e04:	19400005 	stb	r5,0(r3)
   42e08:	18c00044 	addi	r3,r3,1
   42e0c:	19bffd1e 	bne	r3,r6,42e04 <memset+0xb4>
   42e10:	f800283a 	ret
   42e14:	2007883a 	mov	r3,r4
   42e18:	303ff91e 	bne	r6,zero,42e00 <memset+0xb0>
   42e1c:	00000206 	br	42e28 <memset+0xd8>
   42e20:	2007883a 	mov	r3,r4
   42e24:	003ff606 	br	42e00 <memset+0xb0>
   42e28:	f800283a 	ret

00042e2c <__sread>:
   42e2c:	defffe04 	addi	sp,sp,-8
   42e30:	dc000015 	stw	r16,0(sp)
   42e34:	2821883a 	mov	r16,r5
   42e38:	2940038f 	ldh	r5,14(r5)
   42e3c:	dfc00115 	stw	ra,4(sp)
   42e40:	00432c40 	call	432c4 <_read_r>
   42e44:	10000716 	blt	r2,zero,42e64 <__sread+0x38>
   42e48:	80c01417 	ldw	r3,80(r16)
   42e4c:	1887883a 	add	r3,r3,r2
   42e50:	80c01415 	stw	r3,80(r16)
   42e54:	dfc00117 	ldw	ra,4(sp)
   42e58:	dc000017 	ldw	r16,0(sp)
   42e5c:	dec00204 	addi	sp,sp,8
   42e60:	f800283a 	ret
   42e64:	80c0030b 	ldhu	r3,12(r16)
   42e68:	18fbffcc 	andi	r3,r3,61439
   42e6c:	80c0030d 	sth	r3,12(r16)
   42e70:	dfc00117 	ldw	ra,4(sp)
   42e74:	dc000017 	ldw	r16,0(sp)
   42e78:	dec00204 	addi	sp,sp,8
   42e7c:	f800283a 	ret

00042e80 <__swrite>:
   42e80:	2880030b 	ldhu	r2,12(r5)
   42e84:	defffb04 	addi	sp,sp,-20
   42e88:	dcc00315 	stw	r19,12(sp)
   42e8c:	10c0400c 	andi	r3,r2,256
   42e90:	18ffffcc 	andi	r3,r3,65535
   42e94:	18e0001c 	xori	r3,r3,32768
   42e98:	dc800215 	stw	r18,8(sp)
   42e9c:	dc400115 	stw	r17,4(sp)
   42ea0:	dc000015 	stw	r16,0(sp)
   42ea4:	dfc00415 	stw	ra,16(sp)
   42ea8:	18e00004 	addi	r3,r3,-32768
   42eac:	2821883a 	mov	r16,r5
   42eb0:	2027883a 	mov	r19,r4
   42eb4:	3025883a 	mov	r18,r6
   42eb8:	3823883a 	mov	r17,r7
   42ebc:	18000526 	beq	r3,zero,42ed4 <__swrite+0x54>
   42ec0:	2940038f 	ldh	r5,14(r5)
   42ec4:	000d883a 	mov	r6,zero
   42ec8:	01c00084 	movi	r7,2
   42ecc:	00432580 	call	43258 <_lseek_r>
   42ed0:	8080030b 	ldhu	r2,12(r16)
   42ed4:	8140038f 	ldh	r5,14(r16)
   42ed8:	10bbffcc 	andi	r2,r2,61439
   42edc:	9809883a 	mov	r4,r19
   42ee0:	900d883a 	mov	r6,r18
   42ee4:	880f883a 	mov	r7,r17
   42ee8:	8080030d 	sth	r2,12(r16)
   42eec:	dfc00417 	ldw	ra,16(sp)
   42ef0:	dcc00317 	ldw	r19,12(sp)
   42ef4:	dc800217 	ldw	r18,8(sp)
   42ef8:	dc400117 	ldw	r17,4(sp)
   42efc:	dc000017 	ldw	r16,0(sp)
   42f00:	dec00504 	addi	sp,sp,20
   42f04:	0042f6c1 	jmpi	42f6c <_write_r>

00042f08 <__sseek>:
   42f08:	defffe04 	addi	sp,sp,-8
   42f0c:	dc000015 	stw	r16,0(sp)
   42f10:	2821883a 	mov	r16,r5
   42f14:	2940038f 	ldh	r5,14(r5)
   42f18:	dfc00115 	stw	ra,4(sp)
   42f1c:	00432580 	call	43258 <_lseek_r>
   42f20:	00ffffc4 	movi	r3,-1
   42f24:	10c00826 	beq	r2,r3,42f48 <__sseek+0x40>
   42f28:	80c0030b 	ldhu	r3,12(r16)
   42f2c:	80801415 	stw	r2,80(r16)
   42f30:	18c40014 	ori	r3,r3,4096
   42f34:	80c0030d 	sth	r3,12(r16)
   42f38:	dfc00117 	ldw	ra,4(sp)
   42f3c:	dc000017 	ldw	r16,0(sp)
   42f40:	dec00204 	addi	sp,sp,8
   42f44:	f800283a 	ret
   42f48:	80c0030b 	ldhu	r3,12(r16)
   42f4c:	18fbffcc 	andi	r3,r3,61439
   42f50:	80c0030d 	sth	r3,12(r16)
   42f54:	dfc00117 	ldw	ra,4(sp)
   42f58:	dc000017 	ldw	r16,0(sp)
   42f5c:	dec00204 	addi	sp,sp,8
   42f60:	f800283a 	ret

00042f64 <__sclose>:
   42f64:	2940038f 	ldh	r5,14(r5)
   42f68:	0042fd81 	jmpi	42fd8 <_close_r>

00042f6c <_write_r>:
   42f6c:	defffd04 	addi	sp,sp,-12
   42f70:	dc400115 	stw	r17,4(sp)
   42f74:	dc000015 	stw	r16,0(sp)
   42f78:	2023883a 	mov	r17,r4
   42f7c:	04000174 	movhi	r16,5
   42f80:	84273704 	addi	r16,r16,-25380
   42f84:	2809883a 	mov	r4,r5
   42f88:	300b883a 	mov	r5,r6
   42f8c:	380d883a 	mov	r6,r7
   42f90:	dfc00215 	stw	ra,8(sp)
   42f94:	80000015 	stw	zero,0(r16)
   42f98:	0043c200 	call	43c20 <write>
   42f9c:	00ffffc4 	movi	r3,-1
   42fa0:	10c00526 	beq	r2,r3,42fb8 <_write_r+0x4c>
   42fa4:	dfc00217 	ldw	ra,8(sp)
   42fa8:	dc400117 	ldw	r17,4(sp)
   42fac:	dc000017 	ldw	r16,0(sp)
   42fb0:	dec00304 	addi	sp,sp,12
   42fb4:	f800283a 	ret
   42fb8:	80c00017 	ldw	r3,0(r16)
   42fbc:	183ff926 	beq	r3,zero,42fa4 <_write_r+0x38>
   42fc0:	88c00015 	stw	r3,0(r17)
   42fc4:	dfc00217 	ldw	ra,8(sp)
   42fc8:	dc400117 	ldw	r17,4(sp)
   42fcc:	dc000017 	ldw	r16,0(sp)
   42fd0:	dec00304 	addi	sp,sp,12
   42fd4:	f800283a 	ret

00042fd8 <_close_r>:
   42fd8:	defffd04 	addi	sp,sp,-12
   42fdc:	dc400115 	stw	r17,4(sp)
   42fe0:	dc000015 	stw	r16,0(sp)
   42fe4:	2023883a 	mov	r17,r4
   42fe8:	04000174 	movhi	r16,5
   42fec:	84273704 	addi	r16,r16,-25380
   42ff0:	2809883a 	mov	r4,r5
   42ff4:	dfc00215 	stw	ra,8(sp)
   42ff8:	80000015 	stw	zero,0(r16)
   42ffc:	00433a80 	call	433a8 <close>
   43000:	00ffffc4 	movi	r3,-1
   43004:	10c00526 	beq	r2,r3,4301c <_close_r+0x44>
   43008:	dfc00217 	ldw	ra,8(sp)
   4300c:	dc400117 	ldw	r17,4(sp)
   43010:	dc000017 	ldw	r16,0(sp)
   43014:	dec00304 	addi	sp,sp,12
   43018:	f800283a 	ret
   4301c:	80c00017 	ldw	r3,0(r16)
   43020:	183ff926 	beq	r3,zero,43008 <_close_r+0x30>
   43024:	88c00015 	stw	r3,0(r17)
   43028:	dfc00217 	ldw	ra,8(sp)
   4302c:	dc400117 	ldw	r17,4(sp)
   43030:	dc000017 	ldw	r16,0(sp)
   43034:	dec00304 	addi	sp,sp,12
   43038:	f800283a 	ret

0004303c <_fclose_r>:
   4303c:	defffc04 	addi	sp,sp,-16
   43040:	dc400115 	stw	r17,4(sp)
   43044:	dc000015 	stw	r16,0(sp)
   43048:	dfc00315 	stw	ra,12(sp)
   4304c:	dc800215 	stw	r18,8(sp)
   43050:	2821883a 	mov	r16,r5
   43054:	2023883a 	mov	r17,r4
   43058:	28003426 	beq	r5,zero,4312c <_fclose_r+0xf0>
   4305c:	0042a080 	call	42a08 <__sfp_lock_acquire>
   43060:	88000226 	beq	r17,zero,4306c <_fclose_r+0x30>
   43064:	88800e17 	ldw	r2,56(r17)
   43068:	10003826 	beq	r2,zero,4314c <_fclose_r+0x110>
   4306c:	8080030f 	ldh	r2,12(r16)
   43070:	10002526 	beq	r2,zero,43108 <_fclose_r+0xcc>
   43074:	8809883a 	mov	r4,r17
   43078:	800b883a 	mov	r5,r16
   4307c:	00425440 	call	42544 <_fflush_r>
   43080:	1025883a 	mov	r18,r2
   43084:	80800b17 	ldw	r2,44(r16)
   43088:	10000426 	beq	r2,zero,4309c <_fclose_r+0x60>
   4308c:	81400717 	ldw	r5,28(r16)
   43090:	8809883a 	mov	r4,r17
   43094:	103ee83a 	callr	r2
   43098:	10003516 	blt	r2,zero,43170 <_fclose_r+0x134>
   4309c:	8080030b 	ldhu	r2,12(r16)
   430a0:	1080200c 	andi	r2,r2,128
   430a4:	10bfffcc 	andi	r2,r2,65535
   430a8:	10a0001c 	xori	r2,r2,32768
   430ac:	10a00004 	addi	r2,r2,-32768
   430b0:	10002b1e 	bne	r2,zero,43160 <_fclose_r+0x124>
   430b4:	81400c17 	ldw	r5,48(r16)
   430b8:	28000526 	beq	r5,zero,430d0 <_fclose_r+0x94>
   430bc:	80801004 	addi	r2,r16,64
   430c0:	28800226 	beq	r5,r2,430cc <_fclose_r+0x90>
   430c4:	8809883a 	mov	r4,r17
   430c8:	004125c0 	call	4125c <_free_r>
   430cc:	80000c15 	stw	zero,48(r16)
   430d0:	81401117 	ldw	r5,68(r16)
   430d4:	28000326 	beq	r5,zero,430e4 <_fclose_r+0xa8>
   430d8:	8809883a 	mov	r4,r17
   430dc:	004125c0 	call	4125c <_free_r>
   430e0:	80001115 	stw	zero,68(r16)
   430e4:	8000030d 	sth	zero,12(r16)
   430e8:	0042a0c0 	call	42a0c <__sfp_lock_release>
   430ec:	9005883a 	mov	r2,r18
   430f0:	dfc00317 	ldw	ra,12(sp)
   430f4:	dc800217 	ldw	r18,8(sp)
   430f8:	dc400117 	ldw	r17,4(sp)
   430fc:	dc000017 	ldw	r16,0(sp)
   43100:	dec00404 	addi	sp,sp,16
   43104:	f800283a 	ret
   43108:	0042a0c0 	call	42a0c <__sfp_lock_release>
   4310c:	0025883a 	mov	r18,zero
   43110:	9005883a 	mov	r2,r18
   43114:	dfc00317 	ldw	ra,12(sp)
   43118:	dc800217 	ldw	r18,8(sp)
   4311c:	dc400117 	ldw	r17,4(sp)
   43120:	dc000017 	ldw	r16,0(sp)
   43124:	dec00404 	addi	sp,sp,16
   43128:	f800283a 	ret
   4312c:	0025883a 	mov	r18,zero
   43130:	9005883a 	mov	r2,r18
   43134:	dfc00317 	ldw	ra,12(sp)
   43138:	dc800217 	ldw	r18,8(sp)
   4313c:	dc400117 	ldw	r17,4(sp)
   43140:	dc000017 	ldw	r16,0(sp)
   43144:	dec00404 	addi	sp,sp,16
   43148:	f800283a 	ret
   4314c:	8809883a 	mov	r4,r17
   43150:	00428000 	call	42800 <__sinit>
   43154:	8080030f 	ldh	r2,12(r16)
   43158:	103fc61e 	bne	r2,zero,43074 <_fclose_r+0x38>
   4315c:	003fea06 	br	43108 <_fclose_r+0xcc>
   43160:	81400417 	ldw	r5,16(r16)
   43164:	8809883a 	mov	r4,r17
   43168:	004125c0 	call	4125c <_free_r>
   4316c:	003fd106 	br	430b4 <_fclose_r+0x78>
   43170:	04bfffc4 	movi	r18,-1
   43174:	003fc906 	br	4309c <_fclose_r+0x60>

00043178 <fclose>:
   43178:	00800174 	movhi	r2,5
   4317c:	10a06304 	addi	r2,r2,-32372
   43180:	200b883a 	mov	r5,r4
   43184:	11000017 	ldw	r4,0(r2)
   43188:	004303c1 	jmpi	4303c <_fclose_r>

0004318c <_fstat_r>:
   4318c:	defffd04 	addi	sp,sp,-12
   43190:	dc400115 	stw	r17,4(sp)
   43194:	dc000015 	stw	r16,0(sp)
   43198:	2023883a 	mov	r17,r4
   4319c:	04000174 	movhi	r16,5
   431a0:	84273704 	addi	r16,r16,-25380
   431a4:	2809883a 	mov	r4,r5
   431a8:	300b883a 	mov	r5,r6
   431ac:	dfc00215 	stw	ra,8(sp)
   431b0:	80000015 	stw	zero,0(r16)
   431b4:	00434f00 	call	434f0 <fstat>
   431b8:	00ffffc4 	movi	r3,-1
   431bc:	10c00526 	beq	r2,r3,431d4 <_fstat_r+0x48>
   431c0:	dfc00217 	ldw	ra,8(sp)
   431c4:	dc400117 	ldw	r17,4(sp)
   431c8:	dc000017 	ldw	r16,0(sp)
   431cc:	dec00304 	addi	sp,sp,12
   431d0:	f800283a 	ret
   431d4:	80c00017 	ldw	r3,0(r16)
   431d8:	183ff926 	beq	r3,zero,431c0 <_fstat_r+0x34>
   431dc:	88c00015 	stw	r3,0(r17)
   431e0:	dfc00217 	ldw	ra,8(sp)
   431e4:	dc400117 	ldw	r17,4(sp)
   431e8:	dc000017 	ldw	r16,0(sp)
   431ec:	dec00304 	addi	sp,sp,12
   431f0:	f800283a 	ret

000431f4 <_isatty_r>:
   431f4:	defffd04 	addi	sp,sp,-12
   431f8:	dc400115 	stw	r17,4(sp)
   431fc:	dc000015 	stw	r16,0(sp)
   43200:	2023883a 	mov	r17,r4
   43204:	04000174 	movhi	r16,5
   43208:	84273704 	addi	r16,r16,-25380
   4320c:	2809883a 	mov	r4,r5
   43210:	dfc00215 	stw	ra,8(sp)
   43214:	80000015 	stw	zero,0(r16)
   43218:	00435f00 	call	435f0 <isatty>
   4321c:	00ffffc4 	movi	r3,-1
   43220:	10c00526 	beq	r2,r3,43238 <_isatty_r+0x44>
   43224:	dfc00217 	ldw	ra,8(sp)
   43228:	dc400117 	ldw	r17,4(sp)
   4322c:	dc000017 	ldw	r16,0(sp)
   43230:	dec00304 	addi	sp,sp,12
   43234:	f800283a 	ret
   43238:	80c00017 	ldw	r3,0(r16)
   4323c:	183ff926 	beq	r3,zero,43224 <_isatty_r+0x30>
   43240:	88c00015 	stw	r3,0(r17)
   43244:	dfc00217 	ldw	ra,8(sp)
   43248:	dc400117 	ldw	r17,4(sp)
   4324c:	dc000017 	ldw	r16,0(sp)
   43250:	dec00304 	addi	sp,sp,12
   43254:	f800283a 	ret

00043258 <_lseek_r>:
   43258:	defffd04 	addi	sp,sp,-12
   4325c:	dc400115 	stw	r17,4(sp)
   43260:	dc000015 	stw	r16,0(sp)
   43264:	2023883a 	mov	r17,r4
   43268:	04000174 	movhi	r16,5
   4326c:	84273704 	addi	r16,r16,-25380
   43270:	2809883a 	mov	r4,r5
   43274:	300b883a 	mov	r5,r6
   43278:	380d883a 	mov	r6,r7
   4327c:	dfc00215 	stw	ra,8(sp)
   43280:	80000015 	stw	zero,0(r16)
   43284:	00437d00 	call	437d0 <lseek>
   43288:	00ffffc4 	movi	r3,-1
   4328c:	10c00526 	beq	r2,r3,432a4 <_lseek_r+0x4c>
   43290:	dfc00217 	ldw	ra,8(sp)
   43294:	dc400117 	ldw	r17,4(sp)
   43298:	dc000017 	ldw	r16,0(sp)
   4329c:	dec00304 	addi	sp,sp,12
   432a0:	f800283a 	ret
   432a4:	80c00017 	ldw	r3,0(r16)
   432a8:	183ff926 	beq	r3,zero,43290 <_lseek_r+0x38>
   432ac:	88c00015 	stw	r3,0(r17)
   432b0:	dfc00217 	ldw	ra,8(sp)
   432b4:	dc400117 	ldw	r17,4(sp)
   432b8:	dc000017 	ldw	r16,0(sp)
   432bc:	dec00304 	addi	sp,sp,12
   432c0:	f800283a 	ret

000432c4 <_read_r>:
   432c4:	defffd04 	addi	sp,sp,-12
   432c8:	dc400115 	stw	r17,4(sp)
   432cc:	dc000015 	stw	r16,0(sp)
   432d0:	2023883a 	mov	r17,r4
   432d4:	04000174 	movhi	r16,5
   432d8:	84273704 	addi	r16,r16,-25380
   432dc:	2809883a 	mov	r4,r5
   432e0:	300b883a 	mov	r5,r6
   432e4:	380d883a 	mov	r6,r7
   432e8:	dfc00215 	stw	ra,8(sp)
   432ec:	80000015 	stw	zero,0(r16)
   432f0:	00439ac0 	call	439ac <read>
   432f4:	00ffffc4 	movi	r3,-1
   432f8:	10c00526 	beq	r2,r3,43310 <_read_r+0x4c>
   432fc:	dfc00217 	ldw	ra,8(sp)
   43300:	dc400117 	ldw	r17,4(sp)
   43304:	dc000017 	ldw	r16,0(sp)
   43308:	dec00304 	addi	sp,sp,12
   4330c:	f800283a 	ret
   43310:	80c00017 	ldw	r3,0(r16)
   43314:	183ff926 	beq	r3,zero,432fc <_read_r+0x38>
   43318:	88c00015 	stw	r3,0(r17)
   4331c:	dfc00217 	ldw	ra,8(sp)
   43320:	dc400117 	ldw	r17,4(sp)
   43324:	dc000017 	ldw	r16,0(sp)
   43328:	dec00304 	addi	sp,sp,12
   4332c:	f800283a 	ret

00043330 <__mulsi3>:
   43330:	0005883a 	mov	r2,zero
   43334:	20000726 	beq	r4,zero,43354 <__mulsi3+0x24>
   43338:	20c0004c 	andi	r3,r4,1
   4333c:	2008d07a 	srli	r4,r4,1
   43340:	18000126 	beq	r3,zero,43348 <__mulsi3+0x18>
   43344:	1145883a 	add	r2,r2,r5
   43348:	294b883a 	add	r5,r5,r5
   4334c:	203ffa1e 	bne	r4,zero,43338 <__mulsi3+0x8>
   43350:	f800283a 	ret
   43354:	f800283a 	ret

00043358 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43358:	defffe04 	addi	sp,sp,-8
   4335c:	dfc00115 	stw	ra,4(sp)
   43360:	df000015 	stw	fp,0(sp)
   43364:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43368:	00800174 	movhi	r2,5
   4336c:	10a06904 	addi	r2,r2,-32348
   43370:	10800017 	ldw	r2,0(r2)
   43374:	10000526 	beq	r2,zero,4338c <alt_get_errno+0x34>
   43378:	00800174 	movhi	r2,5
   4337c:	10a06904 	addi	r2,r2,-32348
   43380:	10800017 	ldw	r2,0(r2)
   43384:	103ee83a 	callr	r2
   43388:	00000206 	br	43394 <alt_get_errno+0x3c>
   4338c:	00800174 	movhi	r2,5
   43390:	10a73704 	addi	r2,r2,-25380
}
   43394:	e037883a 	mov	sp,fp
   43398:	dfc00117 	ldw	ra,4(sp)
   4339c:	df000017 	ldw	fp,0(sp)
   433a0:	dec00204 	addi	sp,sp,8
   433a4:	f800283a 	ret

000433a8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   433a8:	defffb04 	addi	sp,sp,-20
   433ac:	dfc00415 	stw	ra,16(sp)
   433b0:	df000315 	stw	fp,12(sp)
   433b4:	df000304 	addi	fp,sp,12
   433b8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   433bc:	e0bfff17 	ldw	r2,-4(fp)
   433c0:	10000716 	blt	r2,zero,433e0 <close+0x38>
   433c4:	e13fff17 	ldw	r4,-4(fp)
   433c8:	01400304 	movi	r5,12
   433cc:	00433300 	call	43330 <__mulsi3>
   433d0:	00c00134 	movhi	r3,4
   433d4:	18dbd904 	addi	r3,r3,28516
   433d8:	10c5883a 	add	r2,r2,r3
   433dc:	00000106 	br	433e4 <close+0x3c>
   433e0:	0005883a 	mov	r2,zero
   433e4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   433e8:	e0bffd17 	ldw	r2,-12(fp)
   433ec:	10001826 	beq	r2,zero,43450 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   433f0:	e0bffd17 	ldw	r2,-12(fp)
   433f4:	10800017 	ldw	r2,0(r2)
   433f8:	10800417 	ldw	r2,16(r2)
   433fc:	10000626 	beq	r2,zero,43418 <close+0x70>
   43400:	e0bffd17 	ldw	r2,-12(fp)
   43404:	10800017 	ldw	r2,0(r2)
   43408:	10800417 	ldw	r2,16(r2)
   4340c:	e13ffd17 	ldw	r4,-12(fp)
   43410:	103ee83a 	callr	r2
   43414:	00000106 	br	4341c <close+0x74>
   43418:	0005883a 	mov	r2,zero
   4341c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   43420:	e13fff17 	ldw	r4,-4(fp)
   43424:	0043aa00 	call	43aa0 <alt_release_fd>
    if (rval < 0)
   43428:	e0bffe17 	ldw	r2,-8(fp)
   4342c:	1000060e 	bge	r2,zero,43448 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   43430:	00433580 	call	43358 <alt_get_errno>
   43434:	e0fffe17 	ldw	r3,-8(fp)
   43438:	00c7c83a 	sub	r3,zero,r3
   4343c:	10c00015 	stw	r3,0(r2)
      return -1;
   43440:	00bfffc4 	movi	r2,-1
   43444:	00000606 	br	43460 <close+0xb8>
    }
    return 0;
   43448:	0005883a 	mov	r2,zero
   4344c:	00000406 	br	43460 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   43450:	00433580 	call	43358 <alt_get_errno>
   43454:	00c01444 	movi	r3,81
   43458:	10c00015 	stw	r3,0(r2)
    return -1;
   4345c:	00bfffc4 	movi	r2,-1
  }
}
   43460:	e037883a 	mov	sp,fp
   43464:	dfc00117 	ldw	ra,4(sp)
   43468:	df000017 	ldw	fp,0(sp)
   4346c:	dec00204 	addi	sp,sp,8
   43470:	f800283a 	ret

00043474 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   43474:	defffc04 	addi	sp,sp,-16
   43478:	df000315 	stw	fp,12(sp)
   4347c:	df000304 	addi	fp,sp,12
   43480:	e13ffd15 	stw	r4,-12(fp)
   43484:	e17ffe15 	stw	r5,-8(fp)
   43488:	e1bfff15 	stw	r6,-4(fp)
  return len;
   4348c:	e0bfff17 	ldw	r2,-4(fp)
}
   43490:	e037883a 	mov	sp,fp
   43494:	df000017 	ldw	fp,0(sp)
   43498:	dec00104 	addi	sp,sp,4
   4349c:	f800283a 	ret

000434a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   434a0:	defffe04 	addi	sp,sp,-8
   434a4:	dfc00115 	stw	ra,4(sp)
   434a8:	df000015 	stw	fp,0(sp)
   434ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   434b0:	00800174 	movhi	r2,5
   434b4:	10a06904 	addi	r2,r2,-32348
   434b8:	10800017 	ldw	r2,0(r2)
   434bc:	10000526 	beq	r2,zero,434d4 <alt_get_errno+0x34>
   434c0:	00800174 	movhi	r2,5
   434c4:	10a06904 	addi	r2,r2,-32348
   434c8:	10800017 	ldw	r2,0(r2)
   434cc:	103ee83a 	callr	r2
   434d0:	00000206 	br	434dc <alt_get_errno+0x3c>
   434d4:	00800174 	movhi	r2,5
   434d8:	10a73704 	addi	r2,r2,-25380
}
   434dc:	e037883a 	mov	sp,fp
   434e0:	dfc00117 	ldw	ra,4(sp)
   434e4:	df000017 	ldw	fp,0(sp)
   434e8:	dec00204 	addi	sp,sp,8
   434ec:	f800283a 	ret

000434f0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   434f0:	defffb04 	addi	sp,sp,-20
   434f4:	dfc00415 	stw	ra,16(sp)
   434f8:	df000315 	stw	fp,12(sp)
   434fc:	df000304 	addi	fp,sp,12
   43500:	e13ffe15 	stw	r4,-8(fp)
   43504:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43508:	e0bffe17 	ldw	r2,-8(fp)
   4350c:	10000716 	blt	r2,zero,4352c <fstat+0x3c>
   43510:	e13ffe17 	ldw	r4,-8(fp)
   43514:	01400304 	movi	r5,12
   43518:	00433300 	call	43330 <__mulsi3>
   4351c:	00c00134 	movhi	r3,4
   43520:	18dbd904 	addi	r3,r3,28516
   43524:	10c5883a 	add	r2,r2,r3
   43528:	00000106 	br	43530 <fstat+0x40>
   4352c:	0005883a 	mov	r2,zero
   43530:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   43534:	e0bffd17 	ldw	r2,-12(fp)
   43538:	10001026 	beq	r2,zero,4357c <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   4353c:	e0bffd17 	ldw	r2,-12(fp)
   43540:	10800017 	ldw	r2,0(r2)
   43544:	10800817 	ldw	r2,32(r2)
   43548:	10000726 	beq	r2,zero,43568 <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
   4354c:	e0bffd17 	ldw	r2,-12(fp)
   43550:	10800017 	ldw	r2,0(r2)
   43554:	10800817 	ldw	r2,32(r2)
   43558:	e13ffd17 	ldw	r4,-12(fp)
   4355c:	e17fff17 	ldw	r5,-4(fp)
   43560:	103ee83a 	callr	r2
   43564:	00000906 	br	4358c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   43568:	e0bfff17 	ldw	r2,-4(fp)
   4356c:	00c80004 	movi	r3,8192
   43570:	10c00115 	stw	r3,4(r2)
      return 0;
   43574:	0005883a 	mov	r2,zero
   43578:	00000406 	br	4358c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4357c:	00434a00 	call	434a0 <alt_get_errno>
   43580:	00c01444 	movi	r3,81
   43584:	10c00015 	stw	r3,0(r2)
    return -1;
   43588:	00bfffc4 	movi	r2,-1
  }
}
   4358c:	e037883a 	mov	sp,fp
   43590:	dfc00117 	ldw	ra,4(sp)
   43594:	df000017 	ldw	fp,0(sp)
   43598:	dec00204 	addi	sp,sp,8
   4359c:	f800283a 	ret

000435a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   435a0:	defffe04 	addi	sp,sp,-8
   435a4:	dfc00115 	stw	ra,4(sp)
   435a8:	df000015 	stw	fp,0(sp)
   435ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   435b0:	00800174 	movhi	r2,5
   435b4:	10a06904 	addi	r2,r2,-32348
   435b8:	10800017 	ldw	r2,0(r2)
   435bc:	10000526 	beq	r2,zero,435d4 <alt_get_errno+0x34>
   435c0:	00800174 	movhi	r2,5
   435c4:	10a06904 	addi	r2,r2,-32348
   435c8:	10800017 	ldw	r2,0(r2)
   435cc:	103ee83a 	callr	r2
   435d0:	00000206 	br	435dc <alt_get_errno+0x3c>
   435d4:	00800174 	movhi	r2,5
   435d8:	10a73704 	addi	r2,r2,-25380
}
   435dc:	e037883a 	mov	sp,fp
   435e0:	dfc00117 	ldw	ra,4(sp)
   435e4:	df000017 	ldw	fp,0(sp)
   435e8:	dec00204 	addi	sp,sp,8
   435ec:	f800283a 	ret

000435f0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   435f0:	deffed04 	addi	sp,sp,-76
   435f4:	dfc01215 	stw	ra,72(sp)
   435f8:	df001115 	stw	fp,68(sp)
   435fc:	df001104 	addi	fp,sp,68
   43600:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43604:	e0bfff17 	ldw	r2,-4(fp)
   43608:	10000716 	blt	r2,zero,43628 <isatty+0x38>
   4360c:	e13fff17 	ldw	r4,-4(fp)
   43610:	01400304 	movi	r5,12
   43614:	00433300 	call	43330 <__mulsi3>
   43618:	00c00134 	movhi	r3,4
   4361c:	18dbd904 	addi	r3,r3,28516
   43620:	10c5883a 	add	r2,r2,r3
   43624:	00000106 	br	4362c <isatty+0x3c>
   43628:	0005883a 	mov	r2,zero
   4362c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   43630:	e0bfef17 	ldw	r2,-68(fp)
   43634:	10000e26 	beq	r2,zero,43670 <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   43638:	e0bfef17 	ldw	r2,-68(fp)
   4363c:	10800017 	ldw	r2,0(r2)
   43640:	10800817 	ldw	r2,32(r2)
   43644:	1000021e 	bne	r2,zero,43650 <isatty+0x60>
    {
      return 1;
   43648:	00800044 	movi	r2,1
   4364c:	00000c06 	br	43680 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   43650:	e0bff004 	addi	r2,fp,-64
   43654:	e13fff17 	ldw	r4,-4(fp)
   43658:	100b883a 	mov	r5,r2
   4365c:	00434f00 	call	434f0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   43660:	e0bff117 	ldw	r2,-60(fp)
   43664:	10880020 	cmpeqi	r2,r2,8192
   43668:	10803fcc 	andi	r2,r2,255
   4366c:	00000406 	br	43680 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   43670:	00435a00 	call	435a0 <alt_get_errno>
   43674:	00c01444 	movi	r3,81
   43678:	10c00015 	stw	r3,0(r2)
    return 0;
   4367c:	0005883a 	mov	r2,zero
  }
}
   43680:	e037883a 	mov	sp,fp
   43684:	dfc00117 	ldw	ra,4(sp)
   43688:	df000017 	ldw	fp,0(sp)
   4368c:	dec00204 	addi	sp,sp,8
   43690:	f800283a 	ret

00043694 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   43694:	defffc04 	addi	sp,sp,-16
   43698:	df000315 	stw	fp,12(sp)
   4369c:	df000304 	addi	fp,sp,12
   436a0:	e13ffd15 	stw	r4,-12(fp)
   436a4:	e17ffe15 	stw	r5,-8(fp)
   436a8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   436ac:	e0fffe17 	ldw	r3,-8(fp)
   436b0:	e0bffd17 	ldw	r2,-12(fp)
   436b4:	18800e26 	beq	r3,r2,436f0 <alt_load_section+0x5c>
  {
    while( to != end )
   436b8:	00000a06 	br	436e4 <alt_load_section+0x50>
    {
      *to++ = *from++;
   436bc:	e0bffd17 	ldw	r2,-12(fp)
   436c0:	10c00017 	ldw	r3,0(r2)
   436c4:	e0bffe17 	ldw	r2,-8(fp)
   436c8:	10c00015 	stw	r3,0(r2)
   436cc:	e0bffe17 	ldw	r2,-8(fp)
   436d0:	10800104 	addi	r2,r2,4
   436d4:	e0bffe15 	stw	r2,-8(fp)
   436d8:	e0bffd17 	ldw	r2,-12(fp)
   436dc:	10800104 	addi	r2,r2,4
   436e0:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   436e4:	e0fffe17 	ldw	r3,-8(fp)
   436e8:	e0bfff17 	ldw	r2,-4(fp)
   436ec:	18bff31e 	bne	r3,r2,436bc <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   436f0:	e037883a 	mov	sp,fp
   436f4:	df000017 	ldw	fp,0(sp)
   436f8:	dec00104 	addi	sp,sp,4
   436fc:	f800283a 	ret

00043700 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   43700:	defffe04 	addi	sp,sp,-8
   43704:	dfc00115 	stw	ra,4(sp)
   43708:	df000015 	stw	fp,0(sp)
   4370c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   43710:	01000174 	movhi	r4,5
   43714:	21208004 	addi	r4,r4,-32256
   43718:	01400134 	movhi	r5,4
   4371c:	2959cd04 	addi	r5,r5,26420
   43720:	01800174 	movhi	r6,5
   43724:	31a08004 	addi	r6,r6,-32256
   43728:	00436940 	call	43694 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   4372c:	01000134 	movhi	r4,4
   43730:	21000804 	addi	r4,r4,32
   43734:	01400134 	movhi	r5,4
   43738:	29400804 	addi	r5,r5,32
   4373c:	01800134 	movhi	r6,4
   43740:	31806e04 	addi	r6,r6,440
   43744:	00436940 	call	43694 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   43748:	01000134 	movhi	r4,4
   4374c:	2119b304 	addi	r4,r4,26316
   43750:	01400134 	movhi	r5,4
   43754:	2959b304 	addi	r5,r5,26316
   43758:	01800134 	movhi	r6,4
   4375c:	3199cd04 	addi	r6,r6,26420
   43760:	00436940 	call	43694 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   43764:	00455a80 	call	455a8 <alt_dcache_flush_all>
  alt_icache_flush_all();
   43768:	00457f00 	call	457f0 <alt_icache_flush_all>
}
   4376c:	e037883a 	mov	sp,fp
   43770:	dfc00117 	ldw	ra,4(sp)
   43774:	df000017 	ldw	fp,0(sp)
   43778:	dec00204 	addi	sp,sp,8
   4377c:	f800283a 	ret

00043780 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43780:	defffe04 	addi	sp,sp,-8
   43784:	dfc00115 	stw	ra,4(sp)
   43788:	df000015 	stw	fp,0(sp)
   4378c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43790:	00800174 	movhi	r2,5
   43794:	10a06904 	addi	r2,r2,-32348
   43798:	10800017 	ldw	r2,0(r2)
   4379c:	10000526 	beq	r2,zero,437b4 <alt_get_errno+0x34>
   437a0:	00800174 	movhi	r2,5
   437a4:	10a06904 	addi	r2,r2,-32348
   437a8:	10800017 	ldw	r2,0(r2)
   437ac:	103ee83a 	callr	r2
   437b0:	00000206 	br	437bc <alt_get_errno+0x3c>
   437b4:	00800174 	movhi	r2,5
   437b8:	10a73704 	addi	r2,r2,-25380
}
   437bc:	e037883a 	mov	sp,fp
   437c0:	dfc00117 	ldw	ra,4(sp)
   437c4:	df000017 	ldw	fp,0(sp)
   437c8:	dec00204 	addi	sp,sp,8
   437cc:	f800283a 	ret

000437d0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   437d0:	defff904 	addi	sp,sp,-28
   437d4:	dfc00615 	stw	ra,24(sp)
   437d8:	df000515 	stw	fp,20(sp)
   437dc:	df000504 	addi	fp,sp,20
   437e0:	e13ffd15 	stw	r4,-12(fp)
   437e4:	e17ffe15 	stw	r5,-8(fp)
   437e8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   437ec:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   437f0:	e0bffd17 	ldw	r2,-12(fp)
   437f4:	10000716 	blt	r2,zero,43814 <lseek+0x44>
   437f8:	e13ffd17 	ldw	r4,-12(fp)
   437fc:	01400304 	movi	r5,12
   43800:	00433300 	call	43330 <__mulsi3>
   43804:	00c00134 	movhi	r3,4
   43808:	18dbd904 	addi	r3,r3,28516
   4380c:	10c5883a 	add	r2,r2,r3
   43810:	00000106 	br	43818 <lseek+0x48>
   43814:	0005883a 	mov	r2,zero
   43818:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   4381c:	e0bffc17 	ldw	r2,-16(fp)
   43820:	10001026 	beq	r2,zero,43864 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   43824:	e0bffc17 	ldw	r2,-16(fp)
   43828:	10800017 	ldw	r2,0(r2)
   4382c:	10800717 	ldw	r2,28(r2)
   43830:	10000926 	beq	r2,zero,43858 <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   43834:	e0bffc17 	ldw	r2,-16(fp)
   43838:	10800017 	ldw	r2,0(r2)
   4383c:	10800717 	ldw	r2,28(r2)
   43840:	e13ffc17 	ldw	r4,-16(fp)
   43844:	e17ffe17 	ldw	r5,-8(fp)
   43848:	e1bfff17 	ldw	r6,-4(fp)
   4384c:	103ee83a 	callr	r2
   43850:	e0bffb15 	stw	r2,-20(fp)
   43854:	00000506 	br	4386c <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   43858:	00bfde84 	movi	r2,-134
   4385c:	e0bffb15 	stw	r2,-20(fp)
   43860:	00000206 	br	4386c <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
   43864:	00bfebc4 	movi	r2,-81
   43868:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   4386c:	e0bffb17 	ldw	r2,-20(fp)
   43870:	1000060e 	bge	r2,zero,4388c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   43874:	00437800 	call	43780 <alt_get_errno>
   43878:	e0fffb17 	ldw	r3,-20(fp)
   4387c:	00c7c83a 	sub	r3,zero,r3
   43880:	10c00015 	stw	r3,0(r2)
    rc = -1;
   43884:	00bfffc4 	movi	r2,-1
   43888:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   4388c:	e0bffb17 	ldw	r2,-20(fp)
}
   43890:	e037883a 	mov	sp,fp
   43894:	dfc00117 	ldw	ra,4(sp)
   43898:	df000017 	ldw	fp,0(sp)
   4389c:	dec00204 	addi	sp,sp,8
   438a0:	f800283a 	ret

000438a4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   438a4:	defffd04 	addi	sp,sp,-12
   438a8:	dfc00215 	stw	ra,8(sp)
   438ac:	df000115 	stw	fp,4(sp)
   438b0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   438b4:	0009883a 	mov	r4,zero
   438b8:	0043d480 	call	43d48 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   438bc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   438c0:	0043d7c0 	call	43d7c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   438c4:	01000134 	movhi	r4,4
   438c8:	2119c204 	addi	r4,r4,26376
   438cc:	01400134 	movhi	r5,4
   438d0:	2959c204 	addi	r5,r5,26376
   438d4:	01800134 	movhi	r6,4
   438d8:	3199c204 	addi	r6,r6,26376
   438dc:	0045bb40 	call	45bb4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   438e0:	00456b40 	call	456b4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   438e4:	01000134 	movhi	r4,4
   438e8:	2115c404 	addi	r4,r4,22288
   438ec:	00462f80 	call	462f8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   438f0:	d126dd17 	ldw	r4,-25740(gp)
   438f4:	d0e6de17 	ldw	r3,-25736(gp)
   438f8:	d0a6df17 	ldw	r2,-25732(gp)
   438fc:	180b883a 	mov	r5,r3
   43900:	100d883a 	mov	r6,r2
   43904:	00407780 	call	40778 <main>
   43908:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   4390c:	01000044 	movi	r4,1
   43910:	00433a80 	call	433a8 <close>
  exit (result);
   43914:	e13fff17 	ldw	r4,-4(fp)
   43918:	004630c0 	call	4630c <exit>

0004391c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   4391c:	defffe04 	addi	sp,sp,-8
   43920:	df000115 	stw	fp,4(sp)
   43924:	df000104 	addi	fp,sp,4
   43928:	e13fff15 	stw	r4,-4(fp)
}
   4392c:	e037883a 	mov	sp,fp
   43930:	df000017 	ldw	fp,0(sp)
   43934:	dec00104 	addi	sp,sp,4
   43938:	f800283a 	ret

0004393c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   4393c:	defffe04 	addi	sp,sp,-8
   43940:	df000115 	stw	fp,4(sp)
   43944:	df000104 	addi	fp,sp,4
   43948:	e13fff15 	stw	r4,-4(fp)
}
   4394c:	e037883a 	mov	sp,fp
   43950:	df000017 	ldw	fp,0(sp)
   43954:	dec00104 	addi	sp,sp,4
   43958:	f800283a 	ret

0004395c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4395c:	defffe04 	addi	sp,sp,-8
   43960:	dfc00115 	stw	ra,4(sp)
   43964:	df000015 	stw	fp,0(sp)
   43968:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4396c:	00800174 	movhi	r2,5
   43970:	10a06904 	addi	r2,r2,-32348
   43974:	10800017 	ldw	r2,0(r2)
   43978:	10000526 	beq	r2,zero,43990 <alt_get_errno+0x34>
   4397c:	00800174 	movhi	r2,5
   43980:	10a06904 	addi	r2,r2,-32348
   43984:	10800017 	ldw	r2,0(r2)
   43988:	103ee83a 	callr	r2
   4398c:	00000206 	br	43998 <alt_get_errno+0x3c>
   43990:	00800174 	movhi	r2,5
   43994:	10a73704 	addi	r2,r2,-25380
}
   43998:	e037883a 	mov	sp,fp
   4399c:	dfc00117 	ldw	ra,4(sp)
   439a0:	df000017 	ldw	fp,0(sp)
   439a4:	dec00204 	addi	sp,sp,8
   439a8:	f800283a 	ret

000439ac <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   439ac:	defff904 	addi	sp,sp,-28
   439b0:	dfc00615 	stw	ra,24(sp)
   439b4:	df000515 	stw	fp,20(sp)
   439b8:	df000504 	addi	fp,sp,20
   439bc:	e13ffd15 	stw	r4,-12(fp)
   439c0:	e17ffe15 	stw	r5,-8(fp)
   439c4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   439c8:	e0bffd17 	ldw	r2,-12(fp)
   439cc:	10000716 	blt	r2,zero,439ec <read+0x40>
   439d0:	e13ffd17 	ldw	r4,-12(fp)
   439d4:	01400304 	movi	r5,12
   439d8:	00433300 	call	43330 <__mulsi3>
   439dc:	00c00134 	movhi	r3,4
   439e0:	18dbd904 	addi	r3,r3,28516
   439e4:	10c5883a 	add	r2,r2,r3
   439e8:	00000106 	br	439f0 <read+0x44>
   439ec:	0005883a 	mov	r2,zero
   439f0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   439f4:	e0bffb17 	ldw	r2,-20(fp)
   439f8:	10002026 	beq	r2,zero,43a7c <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   439fc:	e0bffb17 	ldw	r2,-20(fp)
   43a00:	10800217 	ldw	r2,8(r2)
   43a04:	108000cc 	andi	r2,r2,3
   43a08:	10800060 	cmpeqi	r2,r2,1
   43a0c:	1000171e 	bne	r2,zero,43a6c <read+0xc0>
        (fd->dev->read))
   43a10:	e0bffb17 	ldw	r2,-20(fp)
   43a14:	10800017 	ldw	r2,0(r2)
   43a18:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   43a1c:	10001326 	beq	r2,zero,43a6c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   43a20:	e0bffb17 	ldw	r2,-20(fp)
   43a24:	10800017 	ldw	r2,0(r2)
   43a28:	10c00517 	ldw	r3,20(r2)
   43a2c:	e0bfff17 	ldw	r2,-4(fp)
   43a30:	e13ffb17 	ldw	r4,-20(fp)
   43a34:	e17ffe17 	ldw	r5,-8(fp)
   43a38:	100d883a 	mov	r6,r2
   43a3c:	183ee83a 	callr	r3
   43a40:	e0bffc15 	stw	r2,-16(fp)
   43a44:	e0bffc17 	ldw	r2,-16(fp)
   43a48:	1000060e 	bge	r2,zero,43a64 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   43a4c:	004395c0 	call	4395c <alt_get_errno>
   43a50:	e0fffc17 	ldw	r3,-16(fp)
   43a54:	00c7c83a 	sub	r3,zero,r3
   43a58:	10c00015 	stw	r3,0(r2)
          return -1;
   43a5c:	00bfffc4 	movi	r2,-1
   43a60:	00000a06 	br	43a8c <read+0xe0>
        }
        return rval;
   43a64:	e0bffc17 	ldw	r2,-16(fp)
   43a68:	00000806 	br	43a8c <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   43a6c:	004395c0 	call	4395c <alt_get_errno>
   43a70:	00c00344 	movi	r3,13
   43a74:	10c00015 	stw	r3,0(r2)
   43a78:	00000306 	br	43a88 <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   43a7c:	004395c0 	call	4395c <alt_get_errno>
   43a80:	00c01444 	movi	r3,81
   43a84:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   43a88:	00bfffc4 	movi	r2,-1
}
   43a8c:	e037883a 	mov	sp,fp
   43a90:	dfc00117 	ldw	ra,4(sp)
   43a94:	df000017 	ldw	fp,0(sp)
   43a98:	dec00204 	addi	sp,sp,8
   43a9c:	f800283a 	ret

00043aa0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   43aa0:	defffc04 	addi	sp,sp,-16
   43aa4:	dfc00315 	stw	ra,12(sp)
   43aa8:	df000215 	stw	fp,8(sp)
   43aac:	dc000115 	stw	r16,4(sp)
   43ab0:	df000104 	addi	fp,sp,4
   43ab4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   43ab8:	e0bfff17 	ldw	r2,-4(fp)
   43abc:	108000d0 	cmplti	r2,r2,3
   43ac0:	1000111e 	bne	r2,zero,43b08 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   43ac4:	04000134 	movhi	r16,4
   43ac8:	841bd904 	addi	r16,r16,28516
   43acc:	e0bfff17 	ldw	r2,-4(fp)
   43ad0:	1009883a 	mov	r4,r2
   43ad4:	01400304 	movi	r5,12
   43ad8:	00433300 	call	43330 <__mulsi3>
   43adc:	8085883a 	add	r2,r16,r2
   43ae0:	10800204 	addi	r2,r2,8
   43ae4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   43ae8:	04000134 	movhi	r16,4
   43aec:	841bd904 	addi	r16,r16,28516
   43af0:	e0bfff17 	ldw	r2,-4(fp)
   43af4:	1009883a 	mov	r4,r2
   43af8:	01400304 	movi	r5,12
   43afc:	00433300 	call	43330 <__mulsi3>
   43b00:	8085883a 	add	r2,r16,r2
   43b04:	10000015 	stw	zero,0(r2)
  }
}
   43b08:	e037883a 	mov	sp,fp
   43b0c:	dfc00217 	ldw	ra,8(sp)
   43b10:	df000117 	ldw	fp,4(sp)
   43b14:	dc000017 	ldw	r16,0(sp)
   43b18:	dec00304 	addi	sp,sp,12
   43b1c:	f800283a 	ret

00043b20 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   43b20:	defff904 	addi	sp,sp,-28
   43b24:	df000615 	stw	fp,24(sp)
   43b28:	df000604 	addi	fp,sp,24
   43b2c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   43b30:	0005303a 	rdctl	r2,status
   43b34:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   43b38:	e0fffc17 	ldw	r3,-16(fp)
   43b3c:	00bfff84 	movi	r2,-2
   43b40:	1884703a 	and	r2,r3,r2
   43b44:	1001703a 	wrctl	status,r2
  
  return context;
   43b48:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   43b4c:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   43b50:	d0a00f17 	ldw	r2,-32708(gp)
   43b54:	10c000c4 	addi	r3,r2,3
   43b58:	00bfff04 	movi	r2,-4
   43b5c:	1884703a 	and	r2,r3,r2
   43b60:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   43b64:	d0e00f17 	ldw	r3,-32708(gp)
   43b68:	e0bfff17 	ldw	r2,-4(fp)
   43b6c:	1885883a 	add	r2,r3,r2
   43b70:	00c00174 	movhi	r3,5
   43b74:	18dc0004 	addi	r3,r3,28672
   43b78:	1880062e 	bgeu	r3,r2,43b94 <sbrk+0x74>
   43b7c:	e0bffa17 	ldw	r2,-24(fp)
   43b80:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   43b84:	e0bffd17 	ldw	r2,-12(fp)
   43b88:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   43b8c:	00bfffc4 	movi	r2,-1
   43b90:	00000b06 	br	43bc0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   43b94:	d0a00f17 	ldw	r2,-32708(gp)
   43b98:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   43b9c:	d0e00f17 	ldw	r3,-32708(gp)
   43ba0:	e0bfff17 	ldw	r2,-4(fp)
   43ba4:	1885883a 	add	r2,r3,r2
   43ba8:	d0a00f15 	stw	r2,-32708(gp)
   43bac:	e0bffa17 	ldw	r2,-24(fp)
   43bb0:	e0bffe15 	stw	r2,-8(fp)
   43bb4:	e0bffe17 	ldw	r2,-8(fp)
   43bb8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   43bbc:	e0bffb17 	ldw	r2,-20(fp)
} 
   43bc0:	e037883a 	mov	sp,fp
   43bc4:	df000017 	ldw	fp,0(sp)
   43bc8:	dec00104 	addi	sp,sp,4
   43bcc:	f800283a 	ret

00043bd0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43bd0:	defffe04 	addi	sp,sp,-8
   43bd4:	dfc00115 	stw	ra,4(sp)
   43bd8:	df000015 	stw	fp,0(sp)
   43bdc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43be0:	00800174 	movhi	r2,5
   43be4:	10a06904 	addi	r2,r2,-32348
   43be8:	10800017 	ldw	r2,0(r2)
   43bec:	10000526 	beq	r2,zero,43c04 <alt_get_errno+0x34>
   43bf0:	00800174 	movhi	r2,5
   43bf4:	10a06904 	addi	r2,r2,-32348
   43bf8:	10800017 	ldw	r2,0(r2)
   43bfc:	103ee83a 	callr	r2
   43c00:	00000206 	br	43c0c <alt_get_errno+0x3c>
   43c04:	00800174 	movhi	r2,5
   43c08:	10a73704 	addi	r2,r2,-25380
}
   43c0c:	e037883a 	mov	sp,fp
   43c10:	dfc00117 	ldw	ra,4(sp)
   43c14:	df000017 	ldw	fp,0(sp)
   43c18:	dec00204 	addi	sp,sp,8
   43c1c:	f800283a 	ret

00043c20 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   43c20:	defff904 	addi	sp,sp,-28
   43c24:	dfc00615 	stw	ra,24(sp)
   43c28:	df000515 	stw	fp,20(sp)
   43c2c:	df000504 	addi	fp,sp,20
   43c30:	e13ffd15 	stw	r4,-12(fp)
   43c34:	e17ffe15 	stw	r5,-8(fp)
   43c38:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43c3c:	e0bffd17 	ldw	r2,-12(fp)
   43c40:	10000716 	blt	r2,zero,43c60 <write+0x40>
   43c44:	e13ffd17 	ldw	r4,-12(fp)
   43c48:	01400304 	movi	r5,12
   43c4c:	00433300 	call	43330 <__mulsi3>
   43c50:	00c00134 	movhi	r3,4
   43c54:	18dbd904 	addi	r3,r3,28516
   43c58:	10c5883a 	add	r2,r2,r3
   43c5c:	00000106 	br	43c64 <write+0x44>
   43c60:	0005883a 	mov	r2,zero
   43c64:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   43c68:	e0bffb17 	ldw	r2,-20(fp)
   43c6c:	10001f26 	beq	r2,zero,43cec <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   43c70:	e0bffb17 	ldw	r2,-20(fp)
   43c74:	10800217 	ldw	r2,8(r2)
   43c78:	108000cc 	andi	r2,r2,3
   43c7c:	10001726 	beq	r2,zero,43cdc <write+0xbc>
   43c80:	e0bffb17 	ldw	r2,-20(fp)
   43c84:	10800017 	ldw	r2,0(r2)
   43c88:	10800617 	ldw	r2,24(r2)
   43c8c:	10001326 	beq	r2,zero,43cdc <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   43c90:	e0bffb17 	ldw	r2,-20(fp)
   43c94:	10800017 	ldw	r2,0(r2)
   43c98:	10c00617 	ldw	r3,24(r2)
   43c9c:	e0bfff17 	ldw	r2,-4(fp)
   43ca0:	e13ffb17 	ldw	r4,-20(fp)
   43ca4:	e17ffe17 	ldw	r5,-8(fp)
   43ca8:	100d883a 	mov	r6,r2
   43cac:	183ee83a 	callr	r3
   43cb0:	e0bffc15 	stw	r2,-16(fp)
   43cb4:	e0bffc17 	ldw	r2,-16(fp)
   43cb8:	1000060e 	bge	r2,zero,43cd4 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   43cbc:	0043bd00 	call	43bd0 <alt_get_errno>
   43cc0:	e0fffc17 	ldw	r3,-16(fp)
   43cc4:	00c7c83a 	sub	r3,zero,r3
   43cc8:	10c00015 	stw	r3,0(r2)
        return -1;
   43ccc:	00bfffc4 	movi	r2,-1
   43cd0:	00000a06 	br	43cfc <write+0xdc>
      }
      return rval;
   43cd4:	e0bffc17 	ldw	r2,-16(fp)
   43cd8:	00000806 	br	43cfc <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
   43cdc:	0043bd00 	call	43bd0 <alt_get_errno>
   43ce0:	00c00344 	movi	r3,13
   43ce4:	10c00015 	stw	r3,0(r2)
   43ce8:	00000306 	br	43cf8 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   43cec:	0043bd00 	call	43bd0 <alt_get_errno>
   43cf0:	00c01444 	movi	r3,81
   43cf4:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   43cf8:	00bfffc4 	movi	r2,-1
}
   43cfc:	e037883a 	mov	sp,fp
   43d00:	dfc00117 	ldw	ra,4(sp)
   43d04:	df000017 	ldw	fp,0(sp)
   43d08:	dec00204 	addi	sp,sp,8
   43d0c:	f800283a 	ret

00043d10 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   43d10:	defffd04 	addi	sp,sp,-12
   43d14:	dfc00215 	stw	ra,8(sp)
   43d18:	df000115 	stw	fp,4(sp)
   43d1c:	df000104 	addi	fp,sp,4
   43d20:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   43d24:	e13fff17 	ldw	r4,-4(fp)
   43d28:	01400174 	movhi	r5,5
   43d2c:	29606604 	addi	r5,r5,-32360
   43d30:	00456140 	call	45614 <alt_dev_llist_insert>
}
   43d34:	e037883a 	mov	sp,fp
   43d38:	dfc00117 	ldw	ra,4(sp)
   43d3c:	df000017 	ldw	fp,0(sp)
   43d40:	dec00204 	addi	sp,sp,8
   43d44:	f800283a 	ret

00043d48 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   43d48:	defffd04 	addi	sp,sp,-12
   43d4c:	dfc00215 	stw	ra,8(sp)
   43d50:	df000115 	stw	fp,4(sp)
   43d54:	df000104 	addi	fp,sp,4
   43d58:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU3, cpu3);
   43d5c:	00460600 	call	46060 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   43d60:	00800044 	movi	r2,1
   43d64:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   43d68:	e037883a 	mov	sp,fp
   43d6c:	dfc00117 	ldw	ra,4(sp)
   43d70:	df000017 	ldw	fp,0(sp)
   43d74:	dec00204 	addi	sp,sp,8
   43d78:	f800283a 	ret

00043d7c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   43d7c:	defffe04 	addi	sp,sp,-8
   43d80:	dfc00115 	stw	ra,4(sp)
   43d84:	df000015 	stw	fp,0(sp)
   43d88:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER3, timer3);
   43d8c:	010000b4 	movhi	r4,2
   43d90:	21041004 	addi	r4,r4,4160
   43d94:	000b883a 	mov	r5,zero
   43d98:	01800044 	movi	r6,1
   43d9c:	01c0fa04 	movi	r7,1000
   43da0:	0044db80 	call	44db8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_FIFO_INIT ( FIFO2TO3, fifo2to3);
   43da4:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO3TO4, fifo3to4);
   43da8:	0001883a 	nop
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART3, jtag_uart3);
   43dac:	01000134 	movhi	r4,4
   43db0:	211c4304 	addi	r4,r4,28940
   43db4:	000b883a 	mov	r5,zero
   43db8:	01800404 	movi	r6,16
   43dbc:	00444440 	call	44444 <altera_avalon_jtag_uart_init>
   43dc0:	01000134 	movhi	r4,4
   43dc4:	211c3904 	addi	r4,r4,28900
   43dc8:	0043d100 	call	43d10 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   43dcc:	0001883a 	nop
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
   43dd0:	01000174 	movhi	r4,5
   43dd4:	21205104 	addi	r4,r4,-32444
   43dd8:	004576c0 	call	4576c <alt_fs_reg>
}
   43ddc:	e037883a 	mov	sp,fp
   43de0:	dfc00117 	ldw	ra,4(sp)
   43de4:	df000017 	ldw	fp,0(sp)
   43de8:	dec00204 	addi	sp,sp,8
   43dec:	f800283a 	ret

00043df0 <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
   43df0:	defffa04 	addi	sp,sp,-24
   43df4:	dfc00515 	stw	ra,20(sp)
   43df8:	df000415 	stw	fp,16(sp)
   43dfc:	df000404 	addi	fp,sp,16
   43e00:	e13ffc15 	stw	r4,-16(fp)
   43e04:	e17ffd15 	stw	r5,-12(fp)
   43e08:	e1bffe15 	stw	r6,-8(fp)
   43e0c:	e1ffff15 	stw	r7,-4(fp)
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
   43e10:	e13ffc17 	ldw	r4,-16(fp)
   43e14:	01400fc4 	movi	r5,63
   43e18:	0043fbc0 	call	43fbc <altera_avalon_fifo_clear_event>
   43e1c:	10000226 	beq	r2,zero,43e28 <altera_avalon_fifo_init+0x38>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   43e20:	00bfffc4 	movi	r2,-1
   43e24:	00001306 	br	43e74 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
   43e28:	e13ffc17 	ldw	r4,-16(fp)
   43e2c:	e17ffd17 	ldw	r5,-12(fp)
   43e30:	00440180 	call	44018 <altera_avalon_fifo_write_ienable>
   43e34:	10000226 	beq	r2,zero,43e40 <altera_avalon_fifo_init+0x50>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   43e38:	00bfff84 	movi	r2,-2
   43e3c:	00000d06 	br	43e74 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
   43e40:	e13ffc17 	ldw	r4,-16(fp)
   43e44:	e17fff17 	ldw	r5,-4(fp)
   43e48:	00440700 	call	44070 <altera_avalon_fifo_write_almostfull>
   43e4c:	10000226 	beq	r2,zero,43e58 <altera_avalon_fifo_init+0x68>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   43e50:	00bfff44 	movi	r2,-3
   43e54:	00000706 	br	43e74 <altera_avalon_fifo_init+0x84>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
   43e58:	e13ffc17 	ldw	r4,-16(fp)
   43e5c:	e17ffe17 	ldw	r5,-8(fp)
   43e60:	00440c80 	call	440c8 <altera_avalon_fifo_write_almostempty>
   43e64:	10000226 	beq	r2,zero,43e70 <altera_avalon_fifo_init+0x80>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   43e68:	00bfff44 	movi	r2,-3
   43e6c:	00000106 	br	43e74 <altera_avalon_fifo_init+0x84>
    }

    return ALTERA_AVALON_FIFO_OK;
   43e70:	0005883a 	mov	r2,zero
}
   43e74:	e037883a 	mov	sp,fp
   43e78:	dfc00117 	ldw	ra,4(sp)
   43e7c:	df000017 	ldw	fp,0(sp)
   43e80:	dec00204 	addi	sp,sp,8
   43e84:	f800283a 	ret

00043e88 <altera_avalon_fifo_read_status>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
   43e88:	defffd04 	addi	sp,sp,-12
   43e8c:	df000215 	stw	fp,8(sp)
   43e90:	df000204 	addi	fp,sp,8
   43e94:	e13ffe15 	stw	r4,-8(fp)
   43e98:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   43e9c:	e0bffe17 	ldw	r2,-8(fp)
   43ea0:	10800104 	addi	r2,r2,4
   43ea4:	10800037 	ldwio	r2,0(r2)
   43ea8:	1007883a 	mov	r3,r2
   43eac:	e0bfff17 	ldw	r2,-4(fp)
   43eb0:	1884703a 	and	r2,r3,r2
}
   43eb4:	e037883a 	mov	sp,fp
   43eb8:	df000017 	ldw	fp,0(sp)
   43ebc:	dec00104 	addi	sp,sp,4
   43ec0:	f800283a 	ret

00043ec4 <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
   43ec4:	defffd04 	addi	sp,sp,-12
   43ec8:	df000215 	stw	fp,8(sp)
   43ecc:	df000204 	addi	fp,sp,8
   43ed0:	e13ffe15 	stw	r4,-8(fp)
   43ed4:	e17fff15 	stw	r5,-4(fp)
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
   43ed8:	e0bffe17 	ldw	r2,-8(fp)
   43edc:	10800304 	addi	r2,r2,12
   43ee0:	10800037 	ldwio	r2,0(r2)
   43ee4:	1007883a 	mov	r3,r2
   43ee8:	e0bfff17 	ldw	r2,-4(fp)
   43eec:	1884703a 	and	r2,r3,r2
}
   43ef0:	e037883a 	mov	sp,fp
   43ef4:	df000017 	ldw	fp,0(sp)
   43ef8:	dec00104 	addi	sp,sp,4
   43efc:	f800283a 	ret

00043f00 <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
   43f00:	defffe04 	addi	sp,sp,-8
   43f04:	df000115 	stw	fp,4(sp)
   43f08:	df000104 	addi	fp,sp,4
   43f0c:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
   43f10:	e0bfff17 	ldw	r2,-4(fp)
   43f14:	10800404 	addi	r2,r2,16
   43f18:	10800037 	ldwio	r2,0(r2)
}
   43f1c:	e037883a 	mov	sp,fp
   43f20:	df000017 	ldw	fp,0(sp)
   43f24:	dec00104 	addi	sp,sp,4
   43f28:	f800283a 	ret

00043f2c <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
   43f2c:	defffe04 	addi	sp,sp,-8
   43f30:	df000115 	stw	fp,4(sp)
   43f34:	df000104 	addi	fp,sp,4
   43f38:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
   43f3c:	e0bfff17 	ldw	r2,-4(fp)
   43f40:	10800504 	addi	r2,r2,20
   43f44:	10800037 	ldwio	r2,0(r2)
}
   43f48:	e037883a 	mov	sp,fp
   43f4c:	df000017 	ldw	fp,0(sp)
   43f50:	dec00104 	addi	sp,sp,4
   43f54:	f800283a 	ret

00043f58 <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
   43f58:	defffd04 	addi	sp,sp,-12
   43f5c:	df000215 	stw	fp,8(sp)
   43f60:	df000204 	addi	fp,sp,8
   43f64:	e13ffe15 	stw	r4,-8(fp)
   43f68:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
   43f6c:	e0bffe17 	ldw	r2,-8(fp)
   43f70:	10800204 	addi	r2,r2,8
   43f74:	10800037 	ldwio	r2,0(r2)
   43f78:	1007883a 	mov	r3,r2
   43f7c:	e0bfff17 	ldw	r2,-4(fp)
   43f80:	1884703a 	and	r2,r3,r2
}
   43f84:	e037883a 	mov	sp,fp
   43f88:	df000017 	ldw	fp,0(sp)
   43f8c:	dec00104 	addi	sp,sp,4
   43f90:	f800283a 	ret

00043f94 <altera_avalon_fifo_read_level>:

int altera_avalon_fifo_read_level(alt_u32 address)
{
   43f94:	defffe04 	addi	sp,sp,-8
   43f98:	df000115 	stw	fp,4(sp)
   43f9c:	df000104 	addi	fp,sp,4
   43fa0:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
   43fa4:	e0bfff17 	ldw	r2,-4(fp)
   43fa8:	10800037 	ldwio	r2,0(r2)
}
   43fac:	e037883a 	mov	sp,fp
   43fb0:	df000017 	ldw	fp,0(sp)
   43fb4:	dec00104 	addi	sp,sp,4
   43fb8:	f800283a 	ret

00043fbc <altera_avalon_fifo_clear_event>:

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
   43fbc:	defffd04 	addi	sp,sp,-12
   43fc0:	df000215 	stw	fp,8(sp)
   43fc4:	df000204 	addi	fp,sp,8
   43fc8:	e13ffe15 	stw	r4,-8(fp)
   43fcc:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
   43fd0:	e0bffe17 	ldw	r2,-8(fp)
   43fd4:	10800204 	addi	r2,r2,8
   43fd8:	e0ffff17 	ldw	r3,-4(fp)
   43fdc:	10c00035 	stwio	r3,0(r2)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
   43fe0:	e0bffe17 	ldw	r2,-8(fp)
   43fe4:	10800204 	addi	r2,r2,8
   43fe8:	10800037 	ldwio	r2,0(r2)
   43fec:	1007883a 	mov	r3,r2
   43ff0:	e0bfff17 	ldw	r2,-4(fp)
   43ff4:	1884703a 	and	r2,r3,r2
   43ff8:	1000021e 	bne	r2,zero,44004 <altera_avalon_fifo_clear_event+0x48>
        return ALTERA_AVALON_FIFO_OK;
   43ffc:	0005883a 	mov	r2,zero
   44000:	00000106 	br	44008 <altera_avalon_fifo_clear_event+0x4c>
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   44004:	00bfffc4 	movi	r2,-1
}
   44008:	e037883a 	mov	sp,fp
   4400c:	df000017 	ldw	fp,0(sp)
   44010:	dec00104 	addi	sp,sp,4
   44014:	f800283a 	ret

00044018 <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
   44018:	defffd04 	addi	sp,sp,-12
   4401c:	df000215 	stw	fp,8(sp)
   44020:	df000204 	addi	fp,sp,8
   44024:	e13ffe15 	stw	r4,-8(fp)
   44028:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
   4402c:	e0bffe17 	ldw	r2,-8(fp)
   44030:	10800304 	addi	r2,r2,12
   44034:	e0ffff17 	ldw	r3,-4(fp)
   44038:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
   4403c:	e0bffe17 	ldw	r2,-8(fp)
   44040:	10800304 	addi	r2,r2,12
   44044:	10800037 	ldwio	r2,0(r2)
   44048:	1007883a 	mov	r3,r2
   4404c:	e0bfff17 	ldw	r2,-4(fp)
   44050:	1880021e 	bne	r3,r2,4405c <altera_avalon_fifo_write_ienable+0x44>
        return ALTERA_AVALON_FIFO_OK;
   44054:	0005883a 	mov	r2,zero
   44058:	00000106 	br	44060 <altera_avalon_fifo_write_ienable+0x48>
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   4405c:	00bfff84 	movi	r2,-2
}
   44060:	e037883a 	mov	sp,fp
   44064:	df000017 	ldw	fp,0(sp)
   44068:	dec00104 	addi	sp,sp,4
   4406c:	f800283a 	ret

00044070 <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
   44070:	defffd04 	addi	sp,sp,-12
   44074:	df000215 	stw	fp,8(sp)
   44078:	df000204 	addi	fp,sp,8
   4407c:	e13ffe15 	stw	r4,-8(fp)
   44080:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
   44084:	e0bffe17 	ldw	r2,-8(fp)
   44088:	10800404 	addi	r2,r2,16
   4408c:	e0ffff17 	ldw	r3,-4(fp)
   44090:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
   44094:	e0bffe17 	ldw	r2,-8(fp)
   44098:	10800404 	addi	r2,r2,16
   4409c:	10800037 	ldwio	r2,0(r2)
   440a0:	1007883a 	mov	r3,r2
   440a4:	e0bfff17 	ldw	r2,-4(fp)
   440a8:	1880021e 	bne	r3,r2,440b4 <altera_avalon_fifo_write_almostfull+0x44>
        return ALTERA_AVALON_FIFO_OK;
   440ac:	0005883a 	mov	r2,zero
   440b0:	00000106 	br	440b8 <altera_avalon_fifo_write_almostfull+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   440b4:	00bfff44 	movi	r2,-3
}
   440b8:	e037883a 	mov	sp,fp
   440bc:	df000017 	ldw	fp,0(sp)
   440c0:	dec00104 	addi	sp,sp,4
   440c4:	f800283a 	ret

000440c8 <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
   440c8:	defffd04 	addi	sp,sp,-12
   440cc:	df000215 	stw	fp,8(sp)
   440d0:	df000204 	addi	fp,sp,8
   440d4:	e13ffe15 	stw	r4,-8(fp)
   440d8:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
   440dc:	e0bffe17 	ldw	r2,-8(fp)
   440e0:	10800504 	addi	r2,r2,20
   440e4:	e0ffff17 	ldw	r3,-4(fp)
   440e8:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
   440ec:	e0bffe17 	ldw	r2,-8(fp)
   440f0:	10800504 	addi	r2,r2,20
   440f4:	10800037 	ldwio	r2,0(r2)
   440f8:	1007883a 	mov	r3,r2
   440fc:	e0bfff17 	ldw	r2,-4(fp)
   44100:	1880021e 	bne	r3,r2,4410c <altera_avalon_fifo_write_almostempty+0x44>
        return ALTERA_AVALON_FIFO_OK;
   44104:	0005883a 	mov	r2,zero
   44108:	00000106 	br	44110 <altera_avalon_fifo_write_almostempty+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   4410c:	00bfff44 	movi	r2,-3
}
   44110:	e037883a 	mov	sp,fp
   44114:	df000017 	ldw	fp,0(sp)
   44118:	dec00104 	addi	sp,sp,4
   4411c:	f800283a 	ret

00044120 <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
   44120:	defffb04 	addi	sp,sp,-20
   44124:	dfc00415 	stw	ra,16(sp)
   44128:	df000315 	stw	fp,12(sp)
   4412c:	df000304 	addi	fp,sp,12
   44130:	e13ffd15 	stw	r4,-12(fp)
   44134:	e17ffe15 	stw	r5,-8(fp)
   44138:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   4413c:	e13ffe17 	ldw	r4,-8(fp)
   44140:	01400044 	movi	r5,1
   44144:	0043e880 	call	43e88 <altera_avalon_fifo_read_status>
   44148:	1000051e 	bne	r2,zero,44160 <altera_avalon_fifo_write_fifo+0x40>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
   4414c:	e0bffd17 	ldw	r2,-12(fp)
   44150:	e0ffff17 	ldw	r3,-4(fp)
   44154:	10c00035 	stwio	r3,0(r2)
        return ALTERA_AVALON_FIFO_OK;
   44158:	0005883a 	mov	r2,zero
   4415c:	00000106 	br	44164 <altera_avalon_fifo_write_fifo+0x44>
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
   44160:	00bfff04 	movi	r2,-4
    }
}
   44164:	e037883a 	mov	sp,fp
   44168:	dfc00117 	ldw	ra,4(sp)
   4416c:	df000017 	ldw	fp,0(sp)
   44170:	dec00204 	addi	sp,sp,8
   44174:	f800283a 	ret

00044178 <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
   44178:	defffa04 	addi	sp,sp,-24
   4417c:	dfc00515 	stw	ra,20(sp)
   44180:	df000415 	stw	fp,16(sp)
   44184:	df000404 	addi	fp,sp,16
   44188:	e13ffd15 	stw	r4,-12(fp)
   4418c:	e17ffe15 	stw	r5,-8(fp)
   44190:	e1bfff15 	stw	r6,-4(fp)
    int return_val = 0;
   44194:	e03ffc15 	stw	zero,-16(fp)
    *data = 0;
   44198:	e0bfff17 	ldw	r2,-4(fp)
   4419c:	10000015 	stw	zero,0(r2)
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   441a0:	e13ffe17 	ldw	r4,-8(fp)
   441a4:	01400084 	movi	r5,2
   441a8:	0043e880 	call	43e88 <altera_avalon_fifo_read_status>
   441ac:	1000071e 	bne	r2,zero,441cc <altera_avalon_read_fifo+0x54>
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
   441b0:	e13ffe17 	ldw	r4,-8(fp)
   441b4:	0043f940 	call	43f94 <altera_avalon_fifo_read_level>
   441b8:	e0bffc15 	stw	r2,-16(fp)
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   441bc:	e0bffd17 	ldw	r2,-12(fp)
   441c0:	10c00037 	ldwio	r3,0(r2)
   441c4:	e0bfff17 	ldw	r2,-4(fp)
   441c8:	10c00015 	stw	r3,0(r2)
    
    }
    return return_val;
   441cc:	e0bffc17 	ldw	r2,-16(fp)
}
   441d0:	e037883a 	mov	sp,fp
   441d4:	dfc00117 	ldw	ra,4(sp)
   441d8:	df000017 	ldw	fp,0(sp)
   441dc:	dec00204 	addi	sp,sp,8
   441e0:	f800283a 	ret

000441e4 <altera_avalon_fifo_read_fifo>:

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
   441e4:	defffc04 	addi	sp,sp,-16
   441e8:	dfc00315 	stw	ra,12(sp)
   441ec:	df000215 	stw	fp,8(sp)
   441f0:	df000204 	addi	fp,sp,8
   441f4:	e13ffe15 	stw	r4,-8(fp)
   441f8:	e17fff15 	stw	r5,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   441fc:	e13fff17 	ldw	r4,-4(fp)
   44200:	01400084 	movi	r5,2
   44204:	0043e880 	call	43e88 <altera_avalon_fifo_read_status>
   44208:	1000031e 	bne	r2,zero,44218 <altera_avalon_fifo_read_fifo+0x34>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   4420c:	e0bffe17 	ldw	r2,-8(fp)
   44210:	10800037 	ldwio	r2,0(r2)
   44214:	00000106 	br	4421c <altera_avalon_fifo_read_fifo+0x38>
    }
    return 0;
   44218:	0005883a 	mov	r2,zero
}
   4421c:	e037883a 	mov	sp,fp
   44220:	dfc00117 	ldw	ra,4(sp)
   44224:	df000017 	ldw	fp,0(sp)
   44228:	dec00204 	addi	sp,sp,8
   4422c:	f800283a 	ret

00044230 <altera_avalon_fifo_write_other_info>:

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
   44230:	defffb04 	addi	sp,sp,-20
   44234:	dfc00415 	stw	ra,16(sp)
   44238:	df000315 	stw	fp,12(sp)
   4423c:	df000304 	addi	fp,sp,12
   44240:	e13ffd15 	stw	r4,-12(fp)
   44244:	e17ffe15 	stw	r5,-8(fp)
   44248:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   4424c:	e13ffe17 	ldw	r4,-8(fp)
   44250:	01400044 	movi	r5,1
   44254:	0043e880 	call	43e88 <altera_avalon_fifo_read_status>
   44258:	1000061e 	bne	r2,zero,44274 <altera_avalon_fifo_write_other_info+0x44>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
   4425c:	e0bffd17 	ldw	r2,-12(fp)
   44260:	10800104 	addi	r2,r2,4
   44264:	e0ffff17 	ldw	r3,-4(fp)
   44268:	10c00035 	stwio	r3,0(r2)
	return ALTERA_AVALON_FIFO_OK;
   4426c:	0005883a 	mov	r2,zero
   44270:	00000106 	br	44278 <altera_avalon_fifo_write_other_info+0x48>
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
   44274:	00bfff04 	movi	r2,-4
    }
}
   44278:	e037883a 	mov	sp,fp
   4427c:	dfc00117 	ldw	ra,4(sp)
   44280:	df000017 	ldw	fp,0(sp)
   44284:	dec00204 	addi	sp,sp,8
   44288:	f800283a 	ret

0004428c <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
   4428c:	defffe04 	addi	sp,sp,-8
   44290:	df000115 	stw	fp,4(sp)
   44294:	df000104 	addi	fp,sp,4
   44298:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
   4429c:	e0bfff17 	ldw	r2,-4(fp)
   442a0:	10800104 	addi	r2,r2,4
   442a4:	10800037 	ldwio	r2,0(r2)
}
   442a8:	e037883a 	mov	sp,fp
   442ac:	df000017 	ldw	fp,0(sp)
   442b0:	dec00104 	addi	sp,sp,4
   442b4:	f800283a 	ret

000442b8 <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
   442b8:	defffe04 	addi	sp,sp,-8
   442bc:	df000115 	stw	fp,4(sp)
   442c0:	df000104 	addi	fp,sp,4
   442c4:	e13fff15 	stw	r4,-4(fp)
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
   442c8:	e0bfff17 	ldw	r2,-4(fp)
   442cc:	10800037 	ldwio	r2,0(r2)
}
   442d0:	e037883a 	mov	sp,fp
   442d4:	df000017 	ldw	fp,0(sp)
   442d8:	dec00104 	addi	sp,sp,4
   442dc:	f800283a 	ret

000442e0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   442e0:	defffa04 	addi	sp,sp,-24
   442e4:	dfc00515 	stw	ra,20(sp)
   442e8:	df000415 	stw	fp,16(sp)
   442ec:	df000404 	addi	fp,sp,16
   442f0:	e13ffd15 	stw	r4,-12(fp)
   442f4:	e17ffe15 	stw	r5,-8(fp)
   442f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   442fc:	e0bffd17 	ldw	r2,-12(fp)
   44300:	10800017 	ldw	r2,0(r2)
   44304:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   44308:	e0bffc17 	ldw	r2,-16(fp)
   4430c:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   44310:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   44314:	10800217 	ldw	r2,8(r2)
   44318:	1809883a 	mov	r4,r3
   4431c:	e17ffe17 	ldw	r5,-8(fp)
   44320:	e1bfff17 	ldw	r6,-4(fp)
   44324:	100f883a 	mov	r7,r2
   44328:	00449080 	call	44908 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   4432c:	e037883a 	mov	sp,fp
   44330:	dfc00117 	ldw	ra,4(sp)
   44334:	df000017 	ldw	fp,0(sp)
   44338:	dec00204 	addi	sp,sp,8
   4433c:	f800283a 	ret

00044340 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   44340:	defffa04 	addi	sp,sp,-24
   44344:	dfc00515 	stw	ra,20(sp)
   44348:	df000415 	stw	fp,16(sp)
   4434c:	df000404 	addi	fp,sp,16
   44350:	e13ffd15 	stw	r4,-12(fp)
   44354:	e17ffe15 	stw	r5,-8(fp)
   44358:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4435c:	e0bffd17 	ldw	r2,-12(fp)
   44360:	10800017 	ldw	r2,0(r2)
   44364:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   44368:	e0bffc17 	ldw	r2,-16(fp)
   4436c:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   44370:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   44374:	10800217 	ldw	r2,8(r2)
   44378:	1809883a 	mov	r4,r3
   4437c:	e17ffe17 	ldw	r5,-8(fp)
   44380:	e1bfff17 	ldw	r6,-4(fp)
   44384:	100f883a 	mov	r7,r2
   44388:	0044b200 	call	44b20 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   4438c:	e037883a 	mov	sp,fp
   44390:	dfc00117 	ldw	ra,4(sp)
   44394:	df000017 	ldw	fp,0(sp)
   44398:	dec00204 	addi	sp,sp,8
   4439c:	f800283a 	ret

000443a0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   443a0:	defffc04 	addi	sp,sp,-16
   443a4:	dfc00315 	stw	ra,12(sp)
   443a8:	df000215 	stw	fp,8(sp)
   443ac:	df000204 	addi	fp,sp,8
   443b0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   443b4:	e0bfff17 	ldw	r2,-4(fp)
   443b8:	10800017 	ldw	r2,0(r2)
   443bc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   443c0:	e0bffe17 	ldw	r2,-8(fp)
   443c4:	10c00a04 	addi	r3,r2,40
   443c8:	e0bfff17 	ldw	r2,-4(fp)
   443cc:	10800217 	ldw	r2,8(r2)
   443d0:	1809883a 	mov	r4,r3
   443d4:	100b883a 	mov	r5,r2
   443d8:	00447ac0 	call	447ac <altera_avalon_jtag_uart_close>
}
   443dc:	e037883a 	mov	sp,fp
   443e0:	dfc00117 	ldw	ra,4(sp)
   443e4:	df000017 	ldw	fp,0(sp)
   443e8:	dec00204 	addi	sp,sp,8
   443ec:	f800283a 	ret

000443f0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   443f0:	defffa04 	addi	sp,sp,-24
   443f4:	dfc00515 	stw	ra,20(sp)
   443f8:	df000415 	stw	fp,16(sp)
   443fc:	df000404 	addi	fp,sp,16
   44400:	e13ffd15 	stw	r4,-12(fp)
   44404:	e17ffe15 	stw	r5,-8(fp)
   44408:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   4440c:	e0bffd17 	ldw	r2,-12(fp)
   44410:	10800017 	ldw	r2,0(r2)
   44414:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   44418:	e0bffc17 	ldw	r2,-16(fp)
   4441c:	10800a04 	addi	r2,r2,40
   44420:	1009883a 	mov	r4,r2
   44424:	e17ffe17 	ldw	r5,-8(fp)
   44428:	e1bfff17 	ldw	r6,-4(fp)
   4442c:	00448140 	call	44814 <altera_avalon_jtag_uart_ioctl>
}
   44430:	e037883a 	mov	sp,fp
   44434:	dfc00117 	ldw	ra,4(sp)
   44438:	df000017 	ldw	fp,0(sp)
   4443c:	dec00204 	addi	sp,sp,8
   44440:	f800283a 	ret

00044444 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   44444:	defffa04 	addi	sp,sp,-24
   44448:	dfc00515 	stw	ra,20(sp)
   4444c:	df000415 	stw	fp,16(sp)
   44450:	df000404 	addi	fp,sp,16
   44454:	e13ffd15 	stw	r4,-12(fp)
   44458:	e17ffe15 	stw	r5,-8(fp)
   4445c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   44460:	e0bffd17 	ldw	r2,-12(fp)
   44464:	00c00044 	movi	r3,1
   44468:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   4446c:	e0bffd17 	ldw	r2,-12(fp)
   44470:	10800017 	ldw	r2,0(r2)
   44474:	10800104 	addi	r2,r2,4
   44478:	e0fffd17 	ldw	r3,-12(fp)
   4447c:	18c00817 	ldw	r3,32(r3)
   44480:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   44484:	e0fffe17 	ldw	r3,-8(fp)
   44488:	e0bfff17 	ldw	r2,-4(fp)
   4448c:	d8000015 	stw	zero,0(sp)
   44490:	1809883a 	mov	r4,r3
   44494:	100b883a 	mov	r5,r2
   44498:	01800134 	movhi	r6,4
   4449c:	31914104 	addi	r6,r6,17668
   444a0:	e1fffd17 	ldw	r7,-12(fp)
   444a4:	004580c0 	call	4580c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   444a8:	e0bffd17 	ldw	r2,-12(fp)
   444ac:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   444b0:	e0bffd17 	ldw	r2,-12(fp)
   444b4:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   444b8:	00800174 	movhi	r2,5
   444bc:	10a73c04 	addi	r2,r2,-25360
   444c0:	10800017 	ldw	r2,0(r2)
   444c4:	1809883a 	mov	r4,r3
   444c8:	100b883a 	mov	r5,r2
   444cc:	01800134 	movhi	r6,4
   444d0:	3191c204 	addi	r6,r6,18184
   444d4:	e1fffd17 	ldw	r7,-12(fp)
   444d8:	00454680 	call	45468 <alt_alarm_start>
   444dc:	1000040e 	bge	r2,zero,444f0 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   444e0:	e0bffd17 	ldw	r2,-12(fp)
   444e4:	00e00034 	movhi	r3,32768
   444e8:	18ffffc4 	addi	r3,r3,-1
   444ec:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   444f0:	e037883a 	mov	sp,fp
   444f4:	dfc00117 	ldw	ra,4(sp)
   444f8:	df000017 	ldw	fp,0(sp)
   444fc:	dec00204 	addi	sp,sp,8
   44500:	f800283a 	ret

00044504 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   44504:	defff804 	addi	sp,sp,-32
   44508:	df000715 	stw	fp,28(sp)
   4450c:	df000704 	addi	fp,sp,28
   44510:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   44514:	e0bfff17 	ldw	r2,-4(fp)
   44518:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   4451c:	e0bffb17 	ldw	r2,-20(fp)
   44520:	10800017 	ldw	r2,0(r2)
   44524:	e0bffc15 	stw	r2,-16(fp)
   44528:	00000106 	br	44530 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
   4452c:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   44530:	e0bffc17 	ldw	r2,-16(fp)
   44534:	10800104 	addi	r2,r2,4
   44538:	10800037 	ldwio	r2,0(r2)
   4453c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   44540:	e0bffd17 	ldw	r2,-12(fp)
   44544:	1080c00c 	andi	r2,r2,768
   44548:	10006a26 	beq	r2,zero,446f4 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   4454c:	e0bffd17 	ldw	r2,-12(fp)
   44550:	1080400c 	andi	r2,r2,256
   44554:	10003326 	beq	r2,zero,44624 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   44558:	00800074 	movhi	r2,1
   4455c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   44560:	e0bffb17 	ldw	r2,-20(fp)
   44564:	10800a17 	ldw	r2,40(r2)
   44568:	10800044 	addi	r2,r2,1
   4456c:	1081ffcc 	andi	r2,r2,2047
   44570:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   44574:	e0bffb17 	ldw	r2,-20(fp)
   44578:	10c00b17 	ldw	r3,44(r2)
   4457c:	e0bffe17 	ldw	r2,-8(fp)
   44580:	18801426 	beq	r3,r2,445d4 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   44584:	e0bffc17 	ldw	r2,-16(fp)
   44588:	10800037 	ldwio	r2,0(r2)
   4458c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   44590:	e0bff917 	ldw	r2,-28(fp)
   44594:	10a0000c 	andi	r2,r2,32768
   44598:	10001026 	beq	r2,zero,445dc <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   4459c:	e0bffb17 	ldw	r2,-20(fp)
   445a0:	10800a17 	ldw	r2,40(r2)
   445a4:	e0fff917 	ldw	r3,-28(fp)
   445a8:	e13ffb17 	ldw	r4,-20(fp)
   445ac:	2085883a 	add	r2,r4,r2
   445b0:	10800e04 	addi	r2,r2,56
   445b4:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   445b8:	e0bffb17 	ldw	r2,-20(fp)
   445bc:	10800a17 	ldw	r2,40(r2)
   445c0:	10800044 	addi	r2,r2,1
   445c4:	10c1ffcc 	andi	r3,r2,2047
   445c8:	e0bffb17 	ldw	r2,-20(fp)
   445cc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   445d0:	003fe306 	br	44560 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   445d4:	0001883a 	nop
   445d8:	00000106 	br	445e0 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   445dc:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   445e0:	e0bff917 	ldw	r2,-28(fp)
   445e4:	10bfffec 	andhi	r2,r2,65535
   445e8:	10000e26 	beq	r2,zero,44624 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   445ec:	e0bffb17 	ldw	r2,-20(fp)
   445f0:	10c00817 	ldw	r3,32(r2)
   445f4:	00bfff84 	movi	r2,-2
   445f8:	1886703a 	and	r3,r3,r2
   445fc:	e0bffb17 	ldw	r2,-20(fp)
   44600:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   44604:	e0bffc17 	ldw	r2,-16(fp)
   44608:	10800104 	addi	r2,r2,4
   4460c:	e0fffb17 	ldw	r3,-20(fp)
   44610:	18c00817 	ldw	r3,32(r3)
   44614:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   44618:	e0bffc17 	ldw	r2,-16(fp)
   4461c:	10800104 	addi	r2,r2,4
   44620:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   44624:	e0bffd17 	ldw	r2,-12(fp)
   44628:	1080800c 	andi	r2,r2,512
   4462c:	103fbf26 	beq	r2,zero,4452c <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   44630:	e0bffd17 	ldw	r2,-12(fp)
   44634:	1004d43a 	srli	r2,r2,16
   44638:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   4463c:	00001406 	br	44690 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   44640:	e0bffc17 	ldw	r2,-16(fp)
   44644:	e0fffb17 	ldw	r3,-20(fp)
   44648:	18c00d17 	ldw	r3,52(r3)
   4464c:	e13ffb17 	ldw	r4,-20(fp)
   44650:	20c7883a 	add	r3,r4,r3
   44654:	18c20e04 	addi	r3,r3,2104
   44658:	18c00003 	ldbu	r3,0(r3)
   4465c:	18c03fcc 	andi	r3,r3,255
   44660:	18c0201c 	xori	r3,r3,128
   44664:	18ffe004 	addi	r3,r3,-128
   44668:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4466c:	e0bffb17 	ldw	r2,-20(fp)
   44670:	10800d17 	ldw	r2,52(r2)
   44674:	10800044 	addi	r2,r2,1
   44678:	10c1ffcc 	andi	r3,r2,2047
   4467c:	e0bffb17 	ldw	r2,-20(fp)
   44680:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   44684:	e0bffa17 	ldw	r2,-24(fp)
   44688:	10bfffc4 	addi	r2,r2,-1
   4468c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   44690:	e0bffa17 	ldw	r2,-24(fp)
   44694:	10000526 	beq	r2,zero,446ac <altera_avalon_jtag_uart_irq+0x1a8>
   44698:	e0bffb17 	ldw	r2,-20(fp)
   4469c:	10c00d17 	ldw	r3,52(r2)
   446a0:	e0bffb17 	ldw	r2,-20(fp)
   446a4:	10800c17 	ldw	r2,48(r2)
   446a8:	18bfe51e 	bne	r3,r2,44640 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   446ac:	e0bffa17 	ldw	r2,-24(fp)
   446b0:	103f9e26 	beq	r2,zero,4452c <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   446b4:	e0bffb17 	ldw	r2,-20(fp)
   446b8:	10c00817 	ldw	r3,32(r2)
   446bc:	00bfff44 	movi	r2,-3
   446c0:	1886703a 	and	r3,r3,r2
   446c4:	e0bffb17 	ldw	r2,-20(fp)
   446c8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   446cc:	e0bffb17 	ldw	r2,-20(fp)
   446d0:	10800017 	ldw	r2,0(r2)
   446d4:	10800104 	addi	r2,r2,4
   446d8:	e0fffb17 	ldw	r3,-20(fp)
   446dc:	18c00817 	ldw	r3,32(r3)
   446e0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   446e4:	e0bffc17 	ldw	r2,-16(fp)
   446e8:	10800104 	addi	r2,r2,4
   446ec:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   446f0:	003f8e06 	br	4452c <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   446f4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   446f8:	e037883a 	mov	sp,fp
   446fc:	df000017 	ldw	fp,0(sp)
   44700:	dec00104 	addi	sp,sp,4
   44704:	f800283a 	ret

00044708 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   44708:	defffc04 	addi	sp,sp,-16
   4470c:	df000315 	stw	fp,12(sp)
   44710:	df000304 	addi	fp,sp,12
   44714:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   44718:	e0bfff17 	ldw	r2,-4(fp)
   4471c:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   44720:	e0bffd17 	ldw	r2,-12(fp)
   44724:	10800017 	ldw	r2,0(r2)
   44728:	10800104 	addi	r2,r2,4
   4472c:	10800037 	ldwio	r2,0(r2)
   44730:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   44734:	e0bffe17 	ldw	r2,-8(fp)
   44738:	1081000c 	andi	r2,r2,1024
   4473c:	10000a26 	beq	r2,zero,44768 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   44740:	e0bffd17 	ldw	r2,-12(fp)
   44744:	10800017 	ldw	r2,0(r2)
   44748:	10800104 	addi	r2,r2,4
   4474c:	e0fffd17 	ldw	r3,-12(fp)
   44750:	18c00817 	ldw	r3,32(r3)
   44754:	18c10014 	ori	r3,r3,1024
   44758:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   4475c:	e0bffd17 	ldw	r2,-12(fp)
   44760:	10000915 	stw	zero,36(r2)
   44764:	00000a06 	br	44790 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   44768:	e0bffd17 	ldw	r2,-12(fp)
   4476c:	10800917 	ldw	r2,36(r2)
   44770:	00e00034 	movhi	r3,32768
   44774:	18ffff04 	addi	r3,r3,-4
   44778:	18800536 	bltu	r3,r2,44790 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
   4477c:	e0bffd17 	ldw	r2,-12(fp)
   44780:	10800917 	ldw	r2,36(r2)
   44784:	10c00044 	addi	r3,r2,1
   44788:	e0bffd17 	ldw	r2,-12(fp)
   4478c:	10c00915 	stw	r3,36(r2)
   44790:	00800174 	movhi	r2,5
   44794:	10a73c04 	addi	r2,r2,-25360
   44798:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   4479c:	e037883a 	mov	sp,fp
   447a0:	df000017 	ldw	fp,0(sp)
   447a4:	dec00104 	addi	sp,sp,4
   447a8:	f800283a 	ret

000447ac <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   447ac:	defffd04 	addi	sp,sp,-12
   447b0:	df000215 	stw	fp,8(sp)
   447b4:	df000204 	addi	fp,sp,8
   447b8:	e13ffe15 	stw	r4,-8(fp)
   447bc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   447c0:	00000506 	br	447d8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   447c4:	e0bfff17 	ldw	r2,-4(fp)
   447c8:	1090000c 	andi	r2,r2,16384
   447cc:	10000226 	beq	r2,zero,447d8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   447d0:	00bffd44 	movi	r2,-11
   447d4:	00000b06 	br	44804 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   447d8:	e0bffe17 	ldw	r2,-8(fp)
   447dc:	10c00d17 	ldw	r3,52(r2)
   447e0:	e0bffe17 	ldw	r2,-8(fp)
   447e4:	10800c17 	ldw	r2,48(r2)
   447e8:	18800526 	beq	r3,r2,44800 <altera_avalon_jtag_uart_close+0x54>
   447ec:	e0bffe17 	ldw	r2,-8(fp)
   447f0:	10c00917 	ldw	r3,36(r2)
   447f4:	e0bffe17 	ldw	r2,-8(fp)
   447f8:	10800117 	ldw	r2,4(r2)
   447fc:	18bff136 	bltu	r3,r2,447c4 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   44800:	0005883a 	mov	r2,zero
}
   44804:	e037883a 	mov	sp,fp
   44808:	df000017 	ldw	fp,0(sp)
   4480c:	dec00104 	addi	sp,sp,4
   44810:	f800283a 	ret

00044814 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   44814:	defffa04 	addi	sp,sp,-24
   44818:	df000515 	stw	fp,20(sp)
   4481c:	df000504 	addi	fp,sp,20
   44820:	e13ffd15 	stw	r4,-12(fp)
   44824:	e17ffe15 	stw	r5,-8(fp)
   44828:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   4482c:	00bff9c4 	movi	r2,-25
   44830:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   44834:	e0bffe17 	ldw	r2,-8(fp)
   44838:	10da8060 	cmpeqi	r3,r2,27137
   4483c:	1800031e 	bne	r3,zero,4484c <altera_avalon_jtag_uart_ioctl+0x38>
   44840:	109a80a0 	cmpeqi	r2,r2,27138
   44844:	1000181e 	bne	r2,zero,448a8 <altera_avalon_jtag_uart_ioctl+0x94>
   44848:	00002606 	br	448e4 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   4484c:	e0bffd17 	ldw	r2,-12(fp)
   44850:	10c00117 	ldw	r3,4(r2)
   44854:	00a00034 	movhi	r2,32768
   44858:	10bfffc4 	addi	r2,r2,-1
   4485c:	18802226 	beq	r3,r2,448e8 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
   44860:	e0bfff17 	ldw	r2,-4(fp)
   44864:	10800017 	ldw	r2,0(r2)
   44868:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   4486c:	e0bffc17 	ldw	r2,-16(fp)
   44870:	10800090 	cmplti	r2,r2,2
   44874:	1000061e 	bne	r2,zero,44890 <altera_avalon_jtag_uart_ioctl+0x7c>
   44878:	e0fffc17 	ldw	r3,-16(fp)
   4487c:	00a00034 	movhi	r2,32768
   44880:	10bfffc4 	addi	r2,r2,-1
   44884:	18800226 	beq	r3,r2,44890 <altera_avalon_jtag_uart_ioctl+0x7c>
   44888:	e0bffc17 	ldw	r2,-16(fp)
   4488c:	00000206 	br	44898 <altera_avalon_jtag_uart_ioctl+0x84>
   44890:	00a00034 	movhi	r2,32768
   44894:	10bfff84 	addi	r2,r2,-2
   44898:	e0fffd17 	ldw	r3,-12(fp)
   4489c:	18800115 	stw	r2,4(r3)
      rc = 0;
   448a0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   448a4:	00001006 	br	448e8 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   448a8:	e0bffd17 	ldw	r2,-12(fp)
   448ac:	10c00117 	ldw	r3,4(r2)
   448b0:	00a00034 	movhi	r2,32768
   448b4:	10bfffc4 	addi	r2,r2,-1
   448b8:	18800d26 	beq	r3,r2,448f0 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   448bc:	e0bffd17 	ldw	r2,-12(fp)
   448c0:	10c00917 	ldw	r3,36(r2)
   448c4:	e0bffd17 	ldw	r2,-12(fp)
   448c8:	10800117 	ldw	r2,4(r2)
   448cc:	1885803a 	cmpltu	r2,r3,r2
   448d0:	10c03fcc 	andi	r3,r2,255
   448d4:	e0bfff17 	ldw	r2,-4(fp)
   448d8:	10c00015 	stw	r3,0(r2)
      rc = 0;
   448dc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   448e0:	00000306 	br	448f0 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
   448e4:	00000306 	br	448f4 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   448e8:	0001883a 	nop
   448ec:	00000106 	br	448f4 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   448f0:	0001883a 	nop

  default:
    break;
  }

  return rc;
   448f4:	e0bffb17 	ldw	r2,-20(fp)
}
   448f8:	e037883a 	mov	sp,fp
   448fc:	df000017 	ldw	fp,0(sp)
   44900:	dec00104 	addi	sp,sp,4
   44904:	f800283a 	ret

00044908 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   44908:	defff304 	addi	sp,sp,-52
   4490c:	dfc00c15 	stw	ra,48(sp)
   44910:	df000b15 	stw	fp,44(sp)
   44914:	df000b04 	addi	fp,sp,44
   44918:	e13ffc15 	stw	r4,-16(fp)
   4491c:	e17ffd15 	stw	r5,-12(fp)
   44920:	e1bffe15 	stw	r6,-8(fp)
   44924:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   44928:	e0bffd17 	ldw	r2,-12(fp)
   4492c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   44930:	00004706 	br	44a50 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   44934:	e0bffc17 	ldw	r2,-16(fp)
   44938:	10800a17 	ldw	r2,40(r2)
   4493c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   44940:	e0bffc17 	ldw	r2,-16(fp)
   44944:	10800b17 	ldw	r2,44(r2)
   44948:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   4494c:	e0fff717 	ldw	r3,-36(fp)
   44950:	e0bff817 	ldw	r2,-32(fp)
   44954:	18800536 	bltu	r3,r2,4496c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   44958:	e0fff717 	ldw	r3,-36(fp)
   4495c:	e0bff817 	ldw	r2,-32(fp)
   44960:	1885c83a 	sub	r2,r3,r2
   44964:	e0bff615 	stw	r2,-40(fp)
   44968:	00000406 	br	4497c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   4496c:	00c20004 	movi	r3,2048
   44970:	e0bff817 	ldw	r2,-32(fp)
   44974:	1885c83a 	sub	r2,r3,r2
   44978:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   4497c:	e0bff617 	ldw	r2,-40(fp)
   44980:	10001e26 	beq	r2,zero,449fc <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   44984:	e0fffe17 	ldw	r3,-8(fp)
   44988:	e0bff617 	ldw	r2,-40(fp)
   4498c:	1880022e 	bgeu	r3,r2,44998 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   44990:	e0bffe17 	ldw	r2,-8(fp)
   44994:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   44998:	e0bff817 	ldw	r2,-32(fp)
   4499c:	10800e04 	addi	r2,r2,56
   449a0:	e0fffc17 	ldw	r3,-16(fp)
   449a4:	1885883a 	add	r2,r3,r2
   449a8:	e13ff517 	ldw	r4,-44(fp)
   449ac:	100b883a 	mov	r5,r2
   449b0:	e1bff617 	ldw	r6,-40(fp)
   449b4:	0041b080 	call	41b08 <memcpy>
      ptr   += n;
   449b8:	e0fff517 	ldw	r3,-44(fp)
   449bc:	e0bff617 	ldw	r2,-40(fp)
   449c0:	1885883a 	add	r2,r3,r2
   449c4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   449c8:	e0fffe17 	ldw	r3,-8(fp)
   449cc:	e0bff617 	ldw	r2,-40(fp)
   449d0:	1885c83a 	sub	r2,r3,r2
   449d4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   449d8:	e0fff817 	ldw	r3,-32(fp)
   449dc:	e0bff617 	ldw	r2,-40(fp)
   449e0:	1885883a 	add	r2,r3,r2
   449e4:	10c1ffcc 	andi	r3,r2,2047
   449e8:	e0bffc17 	ldw	r2,-16(fp)
   449ec:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   449f0:	e0bffe17 	ldw	r2,-8(fp)
   449f4:	00bfcf16 	blt	zero,r2,44934 <altera_avalon_jtag_uart_read+0x2c>
   449f8:	00000106 	br	44a00 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   449fc:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   44a00:	e0fff517 	ldw	r3,-44(fp)
   44a04:	e0bffd17 	ldw	r2,-12(fp)
   44a08:	1880141e 	bne	r3,r2,44a5c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   44a0c:	e0bfff17 	ldw	r2,-4(fp)
   44a10:	1090000c 	andi	r2,r2,16384
   44a14:	1000131e 	bne	r2,zero,44a64 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   44a18:	0001883a 	nop
   44a1c:	e0bffc17 	ldw	r2,-16(fp)
   44a20:	10c00a17 	ldw	r3,40(r2)
   44a24:	e0bff717 	ldw	r2,-36(fp)
   44a28:	1880051e 	bne	r3,r2,44a40 <altera_avalon_jtag_uart_read+0x138>
   44a2c:	e0bffc17 	ldw	r2,-16(fp)
   44a30:	10c00917 	ldw	r3,36(r2)
   44a34:	e0bffc17 	ldw	r2,-16(fp)
   44a38:	10800117 	ldw	r2,4(r2)
   44a3c:	18bff736 	bltu	r3,r2,44a1c <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   44a40:	e0bffc17 	ldw	r2,-16(fp)
   44a44:	10c00a17 	ldw	r3,40(r2)
   44a48:	e0bff717 	ldw	r2,-36(fp)
   44a4c:	18800726 	beq	r3,r2,44a6c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   44a50:	e0bffe17 	ldw	r2,-8(fp)
   44a54:	00bfb716 	blt	zero,r2,44934 <altera_avalon_jtag_uart_read+0x2c>
   44a58:	00000506 	br	44a70 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   44a5c:	0001883a 	nop
   44a60:	00000306 	br	44a70 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   44a64:	0001883a 	nop
   44a68:	00000106 	br	44a70 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   44a6c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   44a70:	e0fff517 	ldw	r3,-44(fp)
   44a74:	e0bffd17 	ldw	r2,-12(fp)
   44a78:	18801726 	beq	r3,r2,44ad8 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44a7c:	0005303a 	rdctl	r2,status
   44a80:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44a84:	e0fffa17 	ldw	r3,-24(fp)
   44a88:	00bfff84 	movi	r2,-2
   44a8c:	1884703a 	and	r2,r3,r2
   44a90:	1001703a 	wrctl	status,r2
  
  return context;
   44a94:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   44a98:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   44a9c:	e0bffc17 	ldw	r2,-16(fp)
   44aa0:	10800817 	ldw	r2,32(r2)
   44aa4:	10c00054 	ori	r3,r2,1
   44aa8:	e0bffc17 	ldw	r2,-16(fp)
   44aac:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   44ab0:	e0bffc17 	ldw	r2,-16(fp)
   44ab4:	10800017 	ldw	r2,0(r2)
   44ab8:	10800104 	addi	r2,r2,4
   44abc:	e0fffc17 	ldw	r3,-16(fp)
   44ac0:	18c00817 	ldw	r3,32(r3)
   44ac4:	10c00035 	stwio	r3,0(r2)
   44ac8:	e0bff917 	ldw	r2,-28(fp)
   44acc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44ad0:	e0bffb17 	ldw	r2,-20(fp)
   44ad4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   44ad8:	e0fff517 	ldw	r3,-44(fp)
   44adc:	e0bffd17 	ldw	r2,-12(fp)
   44ae0:	18800426 	beq	r3,r2,44af4 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
   44ae4:	e0fff517 	ldw	r3,-44(fp)
   44ae8:	e0bffd17 	ldw	r2,-12(fp)
   44aec:	1885c83a 	sub	r2,r3,r2
   44af0:	00000606 	br	44b0c <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
   44af4:	e0bfff17 	ldw	r2,-4(fp)
   44af8:	1090000c 	andi	r2,r2,16384
   44afc:	10000226 	beq	r2,zero,44b08 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
   44b00:	00bffd44 	movi	r2,-11
   44b04:	00000106 	br	44b0c <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
   44b08:	00bffec4 	movi	r2,-5
}
   44b0c:	e037883a 	mov	sp,fp
   44b10:	dfc00117 	ldw	ra,4(sp)
   44b14:	df000017 	ldw	fp,0(sp)
   44b18:	dec00204 	addi	sp,sp,8
   44b1c:	f800283a 	ret

00044b20 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   44b20:	defff304 	addi	sp,sp,-52
   44b24:	dfc00c15 	stw	ra,48(sp)
   44b28:	df000b15 	stw	fp,44(sp)
   44b2c:	df000b04 	addi	fp,sp,44
   44b30:	e13ffc15 	stw	r4,-16(fp)
   44b34:	e17ffd15 	stw	r5,-12(fp)
   44b38:	e1bffe15 	stw	r6,-8(fp)
   44b3c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   44b40:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   44b44:	e0bffd17 	ldw	r2,-12(fp)
   44b48:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   44b4c:	00003706 	br	44c2c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   44b50:	e0bffc17 	ldw	r2,-16(fp)
   44b54:	10800c17 	ldw	r2,48(r2)
   44b58:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   44b5c:	e0bffc17 	ldw	r2,-16(fp)
   44b60:	10800d17 	ldw	r2,52(r2)
   44b64:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   44b68:	e0fff817 	ldw	r3,-32(fp)
   44b6c:	e0bff517 	ldw	r2,-44(fp)
   44b70:	1880062e 	bgeu	r3,r2,44b8c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   44b74:	e0fff517 	ldw	r3,-44(fp)
   44b78:	e0bff817 	ldw	r2,-32(fp)
   44b7c:	1885c83a 	sub	r2,r3,r2
   44b80:	10bfffc4 	addi	r2,r2,-1
   44b84:	e0bff615 	stw	r2,-40(fp)
   44b88:	00000b06 	br	44bb8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   44b8c:	e0bff517 	ldw	r2,-44(fp)
   44b90:	10000526 	beq	r2,zero,44ba8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   44b94:	00c20004 	movi	r3,2048
   44b98:	e0bff817 	ldw	r2,-32(fp)
   44b9c:	1885c83a 	sub	r2,r3,r2
   44ba0:	e0bff615 	stw	r2,-40(fp)
   44ba4:	00000406 	br	44bb8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   44ba8:	00c1ffc4 	movi	r3,2047
   44bac:	e0bff817 	ldw	r2,-32(fp)
   44bb0:	1885c83a 	sub	r2,r3,r2
   44bb4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   44bb8:	e0bff617 	ldw	r2,-40(fp)
   44bbc:	10001e26 	beq	r2,zero,44c38 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   44bc0:	e0fffe17 	ldw	r3,-8(fp)
   44bc4:	e0bff617 	ldw	r2,-40(fp)
   44bc8:	1880022e 	bgeu	r3,r2,44bd4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   44bcc:	e0bffe17 	ldw	r2,-8(fp)
   44bd0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   44bd4:	e0bff817 	ldw	r2,-32(fp)
   44bd8:	10820e04 	addi	r2,r2,2104
   44bdc:	e0fffc17 	ldw	r3,-16(fp)
   44be0:	1885883a 	add	r2,r3,r2
   44be4:	1009883a 	mov	r4,r2
   44be8:	e17ffd17 	ldw	r5,-12(fp)
   44bec:	e1bff617 	ldw	r6,-40(fp)
   44bf0:	0041b080 	call	41b08 <memcpy>
      ptr   += n;
   44bf4:	e0fffd17 	ldw	r3,-12(fp)
   44bf8:	e0bff617 	ldw	r2,-40(fp)
   44bfc:	1885883a 	add	r2,r3,r2
   44c00:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   44c04:	e0fffe17 	ldw	r3,-8(fp)
   44c08:	e0bff617 	ldw	r2,-40(fp)
   44c0c:	1885c83a 	sub	r2,r3,r2
   44c10:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   44c14:	e0fff817 	ldw	r3,-32(fp)
   44c18:	e0bff617 	ldw	r2,-40(fp)
   44c1c:	1885883a 	add	r2,r3,r2
   44c20:	10c1ffcc 	andi	r3,r2,2047
   44c24:	e0bffc17 	ldw	r2,-16(fp)
   44c28:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   44c2c:	e0bffe17 	ldw	r2,-8(fp)
   44c30:	00bfc716 	blt	zero,r2,44b50 <altera_avalon_jtag_uart_write+0x30>
   44c34:	00000106 	br	44c3c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   44c38:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44c3c:	0005303a 	rdctl	r2,status
   44c40:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44c44:	e0fffa17 	ldw	r3,-24(fp)
   44c48:	00bfff84 	movi	r2,-2
   44c4c:	1884703a 	and	r2,r3,r2
   44c50:	1001703a 	wrctl	status,r2
  
  return context;
   44c54:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   44c58:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   44c5c:	e0bffc17 	ldw	r2,-16(fp)
   44c60:	10800817 	ldw	r2,32(r2)
   44c64:	10c00094 	ori	r3,r2,2
   44c68:	e0bffc17 	ldw	r2,-16(fp)
   44c6c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   44c70:	e0bffc17 	ldw	r2,-16(fp)
   44c74:	10800017 	ldw	r2,0(r2)
   44c78:	10800104 	addi	r2,r2,4
   44c7c:	e0fffc17 	ldw	r3,-16(fp)
   44c80:	18c00817 	ldw	r3,32(r3)
   44c84:	10c00035 	stwio	r3,0(r2)
   44c88:	e0bff917 	ldw	r2,-28(fp)
   44c8c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44c90:	e0bffb17 	ldw	r2,-20(fp)
   44c94:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   44c98:	e0bffe17 	ldw	r2,-8(fp)
   44c9c:	0080110e 	bge	zero,r2,44ce4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   44ca0:	e0bfff17 	ldw	r2,-4(fp)
   44ca4:	1090000c 	andi	r2,r2,16384
   44ca8:	1000111e 	bne	r2,zero,44cf0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   44cac:	0001883a 	nop
   44cb0:	e0bffc17 	ldw	r2,-16(fp)
   44cb4:	10c00d17 	ldw	r3,52(r2)
   44cb8:	e0bff517 	ldw	r2,-44(fp)
   44cbc:	1880051e 	bne	r3,r2,44cd4 <altera_avalon_jtag_uart_write+0x1b4>
   44cc0:	e0bffc17 	ldw	r2,-16(fp)
   44cc4:	10c00917 	ldw	r3,36(r2)
   44cc8:	e0bffc17 	ldw	r2,-16(fp)
   44ccc:	10800117 	ldw	r2,4(r2)
   44cd0:	18bff736 	bltu	r3,r2,44cb0 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   44cd4:	e0bffc17 	ldw	r2,-16(fp)
   44cd8:	10c00d17 	ldw	r3,52(r2)
   44cdc:	e0bff517 	ldw	r2,-44(fp)
   44ce0:	18800526 	beq	r3,r2,44cf8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   44ce4:	e0bffe17 	ldw	r2,-8(fp)
   44ce8:	00bfd016 	blt	zero,r2,44c2c <altera_avalon_jtag_uart_write+0x10c>
   44cec:	00000306 	br	44cfc <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   44cf0:	0001883a 	nop
   44cf4:	00000106 	br	44cfc <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
   44cf8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   44cfc:	e0fffd17 	ldw	r3,-12(fp)
   44d00:	e0bff717 	ldw	r2,-36(fp)
   44d04:	18800426 	beq	r3,r2,44d18 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   44d08:	e0fffd17 	ldw	r3,-12(fp)
   44d0c:	e0bff717 	ldw	r2,-36(fp)
   44d10:	1885c83a 	sub	r2,r3,r2
   44d14:	00000606 	br	44d30 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   44d18:	e0bfff17 	ldw	r2,-4(fp)
   44d1c:	1090000c 	andi	r2,r2,16384
   44d20:	10000226 	beq	r2,zero,44d2c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   44d24:	00bffd44 	movi	r2,-11
   44d28:	00000106 	br	44d30 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   44d2c:	00bffec4 	movi	r2,-5
}
   44d30:	e037883a 	mov	sp,fp
   44d34:	dfc00117 	ldw	ra,4(sp)
   44d38:	df000017 	ldw	fp,0(sp)
   44d3c:	dec00204 	addi	sp,sp,8
   44d40:	f800283a 	ret

00044d44 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   44d44:	defffa04 	addi	sp,sp,-24
   44d48:	dfc00515 	stw	ra,20(sp)
   44d4c:	df000415 	stw	fp,16(sp)
   44d50:	df000404 	addi	fp,sp,16
   44d54:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   44d58:	0007883a 	mov	r3,zero
   44d5c:	e0bfff17 	ldw	r2,-4(fp)
   44d60:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   44d64:	e0bfff17 	ldw	r2,-4(fp)
   44d68:	10800104 	addi	r2,r2,4
   44d6c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44d70:	0005303a 	rdctl	r2,status
   44d74:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44d78:	e0fffd17 	ldw	r3,-12(fp)
   44d7c:	00bfff84 	movi	r2,-2
   44d80:	1884703a 	and	r2,r3,r2
   44d84:	1001703a 	wrctl	status,r2
  
  return context;
   44d88:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   44d8c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   44d90:	0045f5c0 	call	45f5c <alt_tick>
   44d94:	e0bffc17 	ldw	r2,-16(fp)
   44d98:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44d9c:	e0bffe17 	ldw	r2,-8(fp)
   44da0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   44da4:	e037883a 	mov	sp,fp
   44da8:	dfc00117 	ldw	ra,4(sp)
   44dac:	df000017 	ldw	fp,0(sp)
   44db0:	dec00204 	addi	sp,sp,8
   44db4:	f800283a 	ret

00044db8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   44db8:	defff804 	addi	sp,sp,-32
   44dbc:	dfc00715 	stw	ra,28(sp)
   44dc0:	df000615 	stw	fp,24(sp)
   44dc4:	df000604 	addi	fp,sp,24
   44dc8:	e13ffc15 	stw	r4,-16(fp)
   44dcc:	e17ffd15 	stw	r5,-12(fp)
   44dd0:	e1bffe15 	stw	r6,-8(fp)
   44dd4:	e1ffff15 	stw	r7,-4(fp)
   44dd8:	e0bfff17 	ldw	r2,-4(fp)
   44ddc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   44de0:	00800174 	movhi	r2,5
   44de4:	10a73c04 	addi	r2,r2,-25360
   44de8:	10800017 	ldw	r2,0(r2)
   44dec:	1000041e 	bne	r2,zero,44e00 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   44df0:	00800174 	movhi	r2,5
   44df4:	10a73c04 	addi	r2,r2,-25360
   44df8:	e0fffb17 	ldw	r3,-20(fp)
   44dfc:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   44e00:	e0bffc17 	ldw	r2,-16(fp)
   44e04:	10800104 	addi	r2,r2,4
   44e08:	00c001c4 	movi	r3,7
   44e0c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   44e10:	d8000015 	stw	zero,0(sp)
   44e14:	e13ffd17 	ldw	r4,-12(fp)
   44e18:	e17ffe17 	ldw	r5,-8(fp)
   44e1c:	01800134 	movhi	r6,4
   44e20:	31935104 	addi	r6,r6,19780
   44e24:	e1fffc17 	ldw	r7,-16(fp)
   44e28:	004580c0 	call	4580c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   44e2c:	e037883a 	mov	sp,fp
   44e30:	dfc00117 	ldw	ra,4(sp)
   44e34:	df000017 	ldw	fp,0(sp)
   44e38:	dec00204 	addi	sp,sp,8
   44e3c:	f800283a 	ret

00044e40 <alt_hostfs_open>:
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
   44e40:	deffeb04 	addi	sp,sp,-84
   44e44:	df001415 	stw	fp,80(sp)
   44e48:	dc401315 	stw	r17,76(sp)
   44e4c:	dc001215 	stw	r16,72(sp)
   44e50:	df001204 	addi	fp,sp,72
   44e54:	e13ffb15 	stw	r4,-20(fp)
   44e58:	e17ffc15 	stw	r5,-16(fp)
   44e5c:	e1bffd15 	stw	r6,-12(fp)
   44e60:	e1fffe15 	stw	r7,-8(fp)
  static const struct HOSTCALL_INFO hcinfo = { 0x0103, "open" };

  alt_hostfs_dev* dev= (alt_hostfs_dev*)fd->dev;
   44e64:	e0bffb17 	ldw	r2,-20(fp)
   44e68:	10800017 	ldw	r2,0(r2)
   44e6c:	e0bfee15 	stw	r2,-72(fp)
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
   44e70:	e0bfee17 	ldw	r2,-72(fp)
   44e74:	10800217 	ldw	r2,8(r2)
   44e78:	e0bff715 	stw	r2,-36(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
   44e7c:	e0bff717 	ldw	r2,-36(fp)
   44e80:	10bfffc4 	addi	r2,r2,-1
   44e84:	e0bff815 	stw	r2,-32(fp)

  while (*++ptr != 0)
   44e88:	e0bff817 	ldw	r2,-32(fp)
   44e8c:	10800044 	addi	r2,r2,1
   44e90:	e0bff815 	stw	r2,-32(fp)
   44e94:	e0bff817 	ldw	r2,-32(fp)
   44e98:	10800003 	ldbu	r2,0(r2)
   44e9c:	10803fcc 	andi	r2,r2,255
   44ea0:	1080201c 	xori	r2,r2,128
   44ea4:	10bfe004 	addi	r2,r2,-128
   44ea8:	103ff71e 	bne	r2,zero,44e88 <alt_hostfs_open+0x48>
    ;

  return ptr - string;
   44eac:	e0fff817 	ldw	r3,-32(fp)
   44eb0:	e0bff717 	ldw	r2,-36(fp)
   44eb4:	1885c83a 	sub	r2,r3,r2
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
   44eb8:	10800044 	addi	r2,r2,1
   44ebc:	e0fffc17 	ldw	r3,-16(fp)
   44ec0:	1885883a 	add	r2,r3,r2
   44ec4:	e0bffc15 	stw	r2,-16(fp)

  r3 = (int)&hcinfo;
   44ec8:	d0a01f04 	addi	r2,gp,-32644
   44ecc:	e0bfef15 	stw	r2,-68(fp)
  r4 = (int)name;
   44ed0:	e0bffc17 	ldw	r2,-16(fp)
   44ed4:	e0bff015 	stw	r2,-64(fp)
  r5 = flags;
   44ed8:	e0bffd17 	ldw	r2,-12(fp)
   44edc:	e0bff115 	stw	r2,-60(fp)
  r6 = mode;
   44ee0:	e0bffe17 	ldw	r2,-8(fp)
   44ee4:	e0bff215 	stw	r2,-56(fp)
   44ee8:	e0bffc17 	ldw	r2,-16(fp)
   44eec:	e0bff915 	stw	r2,-28(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
   44ef0:	e0bff917 	ldw	r2,-28(fp)
   44ef4:	10bfffc4 	addi	r2,r2,-1
   44ef8:	e0bffa15 	stw	r2,-24(fp)

  while (*++ptr != 0)
   44efc:	e0bffa17 	ldw	r2,-24(fp)
   44f00:	10800044 	addi	r2,r2,1
   44f04:	e0bffa15 	stw	r2,-24(fp)
   44f08:	e0bffa17 	ldw	r2,-24(fp)
   44f0c:	10800003 	ldbu	r2,0(r2)
   44f10:	10803fcc 	andi	r2,r2,255
   44f14:	1080201c 	xori	r2,r2,128
   44f18:	10bfe004 	addi	r2,r2,-128
   44f1c:	103ff71e 	bne	r2,zero,44efc <alt_hostfs_open+0xbc>
    ;

  return ptr - string;
   44f20:	e0fffa17 	ldw	r3,-24(fp)
   44f24:	e0bff917 	ldw	r2,-28(fp)
   44f28:	1885c83a 	sub	r2,r3,r2

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
   44f2c:	e0bff315 	stw	r2,-52(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6), "D07" (r7) : "memory" );
   44f30:	e13ff017 	ldw	r4,-64(fp)
   44f34:	e13fff15 	stw	r4,-4(fp)
   44f38:	e17ff117 	ldw	r5,-60(fp)
   44f3c:	e1bff217 	ldw	r6,-56(fp)
   44f40:	e1fff317 	ldw	r7,-52(fp)
   44f44:	e0ffef17 	ldw	r3,-68(fp)
   44f48:	1821883a 	mov	r16,r3
   44f4c:	8007883a 	mov	r3,r16
   44f50:	e13fff17 	ldw	r4,-4(fp)
   44f54:	003da07a 	break	1
   44f58:	1821883a 	mov	r16,r3
   44f5c:	1023883a 	mov	r17,r2
   44f60:	e47ff415 	stw	r17,-48(fp)
   44f64:	e43fef15 	stw	r16,-68(fp)

  handle = (void *)r2;
   44f68:	e0bff417 	ldw	r2,-48(fp)
   44f6c:	e0bff515 	stw	r2,-44(fp)
  error = r3;
   44f70:	e0bfef17 	ldw	r2,-68(fp)
   44f74:	e0bff615 	stw	r2,-40(fp)

  if (error == 0)
   44f78:	e0bff617 	ldw	r2,-40(fp)
   44f7c:	1000031e 	bne	r2,zero,44f8c <alt_hostfs_open+0x14c>
    fd->priv = handle;
   44f80:	e0bffb17 	ldw	r2,-20(fp)
   44f84:	e0fff517 	ldw	r3,-44(fp)
   44f88:	10c00115 	stw	r3,4(r2)

  return -error;
   44f8c:	e0bff617 	ldw	r2,-40(fp)
   44f90:	0085c83a 	sub	r2,zero,r2
}
   44f94:	e037883a 	mov	sp,fp
   44f98:	df000217 	ldw	fp,8(sp)
   44f9c:	dc400117 	ldw	r17,4(sp)
   44fa0:	dc000017 	ldw	r16,0(sp)
   44fa4:	dec00304 	addi	sp,sp,12
   44fa8:	f800283a 	ret

00044fac <alt_hostfs_close>:
* alt_hostfs_close
*
* Read the file
*/
int alt_hostfs_close(alt_fd* fd)
{
   44fac:	defffa04 	addi	sp,sp,-24
   44fb0:	df000515 	stw	fp,20(sp)
   44fb4:	dc000415 	stw	r16,16(sp)
   44fb8:	df000404 	addi	fp,sp,16
   44fbc:	e13fff15 	stw	r4,-4(fp)
  int error;

  /* Input and output parameters for the hostcall */
  int r3, r4;

  r3 = (int)&hcinfo;
   44fc0:	d0a01c04 	addi	r2,gp,-32656
   44fc4:	e0bffc15 	stw	r2,-16(fp)
  r4 = (int)fd->priv;
   44fc8:	e0bfff17 	ldw	r2,-4(fp)
   44fcc:	10800117 	ldw	r2,4(r2)
   44fd0:	e0bffd15 	stw	r2,-12(fp)

  __asm__ volatile("break 1" : "+D03" (r3) : "D04" (r4) );
   44fd4:	e0bffd17 	ldw	r2,-12(fp)
   44fd8:	e0fffc17 	ldw	r3,-16(fp)
   44fdc:	1821883a 	mov	r16,r3
   44fe0:	8007883a 	mov	r3,r16
   44fe4:	1009883a 	mov	r4,r2
   44fe8:	003da07a 	break	1
   44fec:	1821883a 	mov	r16,r3
   44ff0:	e43ffc15 	stw	r16,-16(fp)

  error = r3;
   44ff4:	e0bffc17 	ldw	r2,-16(fp)
   44ff8:	e0bffe15 	stw	r2,-8(fp)

  return -error;
   44ffc:	e0bffe17 	ldw	r2,-8(fp)
   45000:	0085c83a 	sub	r2,zero,r2
}
   45004:	e037883a 	mov	sp,fp
   45008:	df000117 	ldw	fp,4(sp)
   4500c:	dc000017 	ldw	r16,0(sp)
   45010:	dec00204 	addi	sp,sp,8
   45014:	f800283a 	ret

00045018 <alt_hostfs_read>:
* alt_hostfs_read
*
* Read the file
*/
int alt_hostfs_read(alt_fd* fd, char * ptr, int len)
{
   45018:	defff204 	addi	sp,sp,-56
   4501c:	df000d15 	stw	fp,52(sp)
   45020:	dc400c15 	stw	r17,48(sp)
   45024:	dc000b15 	stw	r16,44(sp)
   45028:	df000b04 	addi	fp,sp,44
   4502c:	e13ffc15 	stw	r4,-16(fp)
   45030:	e17ffd15 	stw	r5,-12(fp)
   45034:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
   45038:	d0a01904 	addi	r2,gp,-32668
   4503c:	e0bff515 	stw	r2,-44(fp)
  r4 = (int)fd->priv;
   45040:	e0bffc17 	ldw	r2,-16(fp)
   45044:	10800117 	ldw	r2,4(r2)
   45048:	e0bff615 	stw	r2,-40(fp)
  r5 = (int)ptr;
   4504c:	e0bffd17 	ldw	r2,-12(fp)
   45050:	e0bff715 	stw	r2,-36(fp)
  r6 = len;
   45054:	e0bffe17 	ldw	r2,-8(fp)
   45058:	e0bff815 	stw	r2,-32(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
   4505c:	e13ff617 	ldw	r4,-40(fp)
   45060:	e13fff15 	stw	r4,-4(fp)
   45064:	e17ff717 	ldw	r5,-36(fp)
   45068:	e1bff817 	ldw	r6,-32(fp)
   4506c:	e0fff517 	ldw	r3,-44(fp)
   45070:	1821883a 	mov	r16,r3
   45074:	8007883a 	mov	r3,r16
   45078:	e13fff17 	ldw	r4,-4(fp)
   4507c:	003da07a 	break	1
   45080:	1821883a 	mov	r16,r3
   45084:	1023883a 	mov	r17,r2
   45088:	e47ff915 	stw	r17,-28(fp)
   4508c:	e43ff515 	stw	r16,-44(fp)

  rc = r2;
   45090:	e0bff917 	ldw	r2,-28(fp)
   45094:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
   45098:	e0bff517 	ldw	r2,-44(fp)
   4509c:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
   450a0:	e0bffb17 	ldw	r2,-20(fp)
   450a4:	10000326 	beq	r2,zero,450b4 <alt_hostfs_read+0x9c>
   450a8:	e0bffb17 	ldw	r2,-20(fp)
   450ac:	0085c83a 	sub	r2,zero,r2
   450b0:	00000106 	br	450b8 <alt_hostfs_read+0xa0>
   450b4:	e0bffa17 	ldw	r2,-24(fp)
}
   450b8:	e037883a 	mov	sp,fp
   450bc:	df000217 	ldw	fp,8(sp)
   450c0:	dc400117 	ldw	r17,4(sp)
   450c4:	dc000017 	ldw	r16,0(sp)
   450c8:	dec00304 	addi	sp,sp,12
   450cc:	f800283a 	ret

000450d0 <alt_hostfs_write>:
* alt_hostfs_write
*
* Read the file
*/
int alt_hostfs_write(alt_fd* fd, const char * ptr, int len)
{
   450d0:	defff204 	addi	sp,sp,-56
   450d4:	df000d15 	stw	fp,52(sp)
   450d8:	dc400c15 	stw	r17,48(sp)
   450dc:	dc000b15 	stw	r16,44(sp)
   450e0:	df000b04 	addi	fp,sp,44
   450e4:	e13ffc15 	stw	r4,-16(fp)
   450e8:	e17ffd15 	stw	r5,-12(fp)
   450ec:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
   450f0:	d0a01604 	addi	r2,gp,-32680
   450f4:	e0bff515 	stw	r2,-44(fp)
  r4 = (int)fd->priv;
   450f8:	e0bffc17 	ldw	r2,-16(fp)
   450fc:	10800117 	ldw	r2,4(r2)
   45100:	e0bff615 	stw	r2,-40(fp)
  r5 = (int)ptr;
   45104:	e0bffd17 	ldw	r2,-12(fp)
   45108:	e0bff715 	stw	r2,-36(fp)
  r6 = len;
   4510c:	e0bffe17 	ldw	r2,-8(fp)
   45110:	e0bff815 	stw	r2,-32(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
   45114:	e13ff617 	ldw	r4,-40(fp)
   45118:	e13fff15 	stw	r4,-4(fp)
   4511c:	e17ff717 	ldw	r5,-36(fp)
   45120:	e1bff817 	ldw	r6,-32(fp)
   45124:	e0fff517 	ldw	r3,-44(fp)
   45128:	1821883a 	mov	r16,r3
   4512c:	8007883a 	mov	r3,r16
   45130:	e13fff17 	ldw	r4,-4(fp)
   45134:	003da07a 	break	1
   45138:	1821883a 	mov	r16,r3
   4513c:	1023883a 	mov	r17,r2
   45140:	e47ff915 	stw	r17,-28(fp)
   45144:	e43ff515 	stw	r16,-44(fp)

  rc = r2;
   45148:	e0bff917 	ldw	r2,-28(fp)
   4514c:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
   45150:	e0bff517 	ldw	r2,-44(fp)
   45154:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
   45158:	e0bffb17 	ldw	r2,-20(fp)
   4515c:	10000326 	beq	r2,zero,4516c <alt_hostfs_write+0x9c>
   45160:	e0bffb17 	ldw	r2,-20(fp)
   45164:	0085c83a 	sub	r2,zero,r2
   45168:	00000106 	br	45170 <alt_hostfs_write+0xa0>
   4516c:	e0bffa17 	ldw	r2,-24(fp)
}
   45170:	e037883a 	mov	sp,fp
   45174:	df000217 	ldw	fp,8(sp)
   45178:	dc400117 	ldw	r17,4(sp)
   4517c:	dc000017 	ldw	r16,0(sp)
   45180:	dec00304 	addi	sp,sp,12
   45184:	f800283a 	ret

00045188 <alt_hostfs_seek>:
* Move around within a file
*
* returns -errno for an error or the offset within the file
*/
int alt_hostfs_seek(alt_fd* fd, int ptr, int dir)
{
   45188:	defff204 	addi	sp,sp,-56
   4518c:	df000d15 	stw	fp,52(sp)
   45190:	dc400c15 	stw	r17,48(sp)
   45194:	dc000b15 	stw	r16,44(sp)
   45198:	df000b04 	addi	fp,sp,44
   4519c:	e13ffc15 	stw	r4,-16(fp)
   451a0:	e17ffd15 	stw	r5,-12(fp)
   451a4:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
   451a8:	d0a01304 	addi	r2,gp,-32692
   451ac:	e0bff515 	stw	r2,-44(fp)
  r4 = (int)fd->priv;
   451b0:	e0bffc17 	ldw	r2,-16(fp)
   451b4:	10800117 	ldw	r2,4(r2)
   451b8:	e0bff615 	stw	r2,-40(fp)
  r5 = ptr;
   451bc:	e0bffd17 	ldw	r2,-12(fp)
   451c0:	e0bff715 	stw	r2,-36(fp)
  r6 = dir;
   451c4:	e0bffe17 	ldw	r2,-8(fp)
   451c8:	e0bff815 	stw	r2,-32(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
   451cc:	e13ff617 	ldw	r4,-40(fp)
   451d0:	e13fff15 	stw	r4,-4(fp)
   451d4:	e17ff717 	ldw	r5,-36(fp)
   451d8:	e1bff817 	ldw	r6,-32(fp)
   451dc:	e0fff517 	ldw	r3,-44(fp)
   451e0:	1821883a 	mov	r16,r3
   451e4:	8007883a 	mov	r3,r16
   451e8:	e13fff17 	ldw	r4,-4(fp)
   451ec:	003da07a 	break	1
   451f0:	1821883a 	mov	r16,r3
   451f4:	1023883a 	mov	r17,r2
   451f8:	e47ff915 	stw	r17,-28(fp)
   451fc:	e43ff515 	stw	r16,-44(fp)

  rc = r2;
   45200:	e0bff917 	ldw	r2,-28(fp)
   45204:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
   45208:	e0bff517 	ldw	r2,-44(fp)
   4520c:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
   45210:	e0bffb17 	ldw	r2,-20(fp)
   45214:	10000326 	beq	r2,zero,45224 <alt_hostfs_seek+0x9c>
   45218:	e0bffb17 	ldw	r2,-20(fp)
   4521c:	0085c83a 	sub	r2,zero,r2
   45220:	00000106 	br	45228 <alt_hostfs_seek+0xa0>
   45224:	e0bffa17 	ldw	r2,-24(fp)
}
   45228:	e037883a 	mov	sp,fp
   4522c:	df000217 	ldw	fp,8(sp)
   45230:	dc400117 	ldw	r17,4(sp)
   45234:	dc000017 	ldw	r16,0(sp)
   45238:	dec00304 	addi	sp,sp,12
   4523c:	f800283a 	ret

00045240 <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
   45240:	deffe204 	addi	sp,sp,-120
   45244:	df001d15 	stw	fp,116(sp)
   45248:	dc401c15 	stw	r17,112(sp)
   4524c:	dc001b15 	stw	r16,108(sp)
   45250:	df001b04 	addi	fp,sp,108
   45254:	e13ffd15 	stw	r4,-12(fp)
   45258:	e17ffe15 	stw	r5,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5;

  r3 = (int)&hcinfo;
   4525c:	d0a01004 	addi	r2,gp,-32704
   45260:	e0bfe615 	stw	r2,-104(fp)
  r4 = (int)fd->priv;
   45264:	e0bffd17 	ldw	r2,-12(fp)
   45268:	10800117 	ldw	r2,4(r2)
   4526c:	e0bfe715 	stw	r2,-100(fp)
  r5 = (int)&hoststat;
   45270:	e0bfed04 	addi	r2,fp,-76
   45274:	e0bfe815 	stw	r2,-96(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5) : "memory" );
   45278:	e13fe717 	ldw	r4,-100(fp)
   4527c:	e13fff15 	stw	r4,-4(fp)
   45280:	e17fe817 	ldw	r5,-96(fp)
   45284:	e0ffe617 	ldw	r3,-104(fp)
   45288:	1821883a 	mov	r16,r3
   4528c:	8007883a 	mov	r3,r16
   45290:	e13fff17 	ldw	r4,-4(fp)
   45294:	003da07a 	break	1
   45298:	1821883a 	mov	r16,r3
   4529c:	1023883a 	mov	r17,r2
   452a0:	e47fe915 	stw	r17,-92(fp)
   452a4:	e43fe615 	stw	r16,-104(fp)

  rc = r2;
   452a8:	e0bfe917 	ldw	r2,-92(fp)
   452ac:	e0bfea15 	stw	r2,-88(fp)
  error = r3;
   452b0:	e0bfe617 	ldw	r2,-104(fp)
   452b4:	e0bfeb15 	stw	r2,-84(fp)

  if (error == 0)
   452b8:	e0bfeb17 	ldw	r2,-84(fp)
   452bc:	1000621e 	bne	r2,zero,45448 <alt_hostfs_fstat+0x208>
     * no change is required.  On a little-endian processor we need to swap
     * the bytes in each word.
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
   452c0:	e0bfed04 	addi	r2,fp,-76
   452c4:	e0bfe515 	stw	r2,-108(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
   452c8:	e0bfe517 	ldw	r2,-108(fp)
   452cc:	10801004 	addi	r2,r2,64
   452d0:	e0bfec15 	stw	r2,-80(fp)
    for ( ; ptr < end ; ptr++)
   452d4:	00001606 	br	45330 <alt_hostfs_fstat+0xf0>
      *ptr = ((*ptr & 0xFF000000) >> 24) |
   452d8:	e0bfe517 	ldw	r2,-108(fp)
   452dc:	10800017 	ldw	r2,0(r2)
   452e0:	1006d63a 	srli	r3,r2,24
             ((*ptr & 0x00FF0000) >> 8)  |
   452e4:	e0bfe517 	ldw	r2,-108(fp)
   452e8:	10800017 	ldw	r2,0(r2)
   452ec:	10803fec 	andhi	r2,r2,255
   452f0:	1004d23a 	srli	r2,r2,8

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
   452f4:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
   452f8:	e0bfe517 	ldw	r2,-108(fp)
   452fc:	10800017 	ldw	r2,0(r2)
   45300:	10bfc00c 	andi	r2,r2,65280
   45304:	1004923a 	slli	r2,r2,8
#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
   45308:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
   4530c:	e0bfe517 	ldw	r2,-108(fp)
   45310:	10800017 	ldw	r2,0(r2)
   45314:	1004963a 	slli	r2,r2,24
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
   45318:	1886b03a 	or	r3,r3,r2

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
   4531c:	e0bfe517 	ldw	r2,-108(fp)
   45320:	10c00015 	stw	r3,0(r2)
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
   45324:	e0bfe517 	ldw	r2,-108(fp)
   45328:	10800104 	addi	r2,r2,4
   4532c:	e0bfe515 	stw	r2,-108(fp)
   45330:	e0ffe517 	ldw	r3,-108(fp)
   45334:	e0bfec17 	ldw	r2,-80(fp)
   45338:	18bfe736 	bltu	r3,r2,452d8 <alt_hostfs_fstat+0x98>
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
   4533c:	e0bffe17 	ldw	r2,-8(fp)
   45340:	e0bfe515 	stw	r2,-108(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
   45344:	e0bfe517 	ldw	r2,-108(fp)
   45348:	10800f04 	addi	r2,r2,60
   4534c:	e0bfec15 	stw	r2,-80(fp)
    for ( ; ptr < end ; ptr++)
   45350:	00000506 	br	45368 <alt_hostfs_fstat+0x128>
      *ptr = 0;
   45354:	e0bfe517 	ldw	r2,-108(fp)
   45358:	10000015 	stw	zero,0(r2)
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
    for ( ; ptr < end ; ptr++)
   4535c:	e0bfe517 	ldw	r2,-108(fp)
   45360:	10800104 	addi	r2,r2,4
   45364:	e0bfe515 	stw	r2,-108(fp)
   45368:	e0ffe517 	ldw	r3,-108(fp)
   4536c:	e0bfec17 	ldw	r2,-80(fp)
   45370:	18bff836 	bltu	r3,r2,45354 <alt_hostfs_fstat+0x114>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
   45374:	e0bfed17 	ldw	r2,-76(fp)
   45378:	1007883a 	mov	r3,r2
   4537c:	e0bffe17 	ldw	r2,-8(fp)
   45380:	10c0000d 	sth	r3,0(r2)
    st->st_ino     = hoststat.fst_ino;
   45384:	e0bfee17 	ldw	r2,-72(fp)
   45388:	1007883a 	mov	r3,r2
   4538c:	e0bffe17 	ldw	r2,-8(fp)
   45390:	10c0008d 	sth	r3,2(r2)
    st->st_mode    = hoststat.fst_mode;
   45394:	e0ffef17 	ldw	r3,-68(fp)
   45398:	e0bffe17 	ldw	r2,-8(fp)
   4539c:	10c00115 	stw	r3,4(r2)
    st->st_nlink   = hoststat.fst_nlink;
   453a0:	e0bff017 	ldw	r2,-64(fp)
   453a4:	1007883a 	mov	r3,r2
   453a8:	e0bffe17 	ldw	r2,-8(fp)
   453ac:	10c0020d 	sth	r3,8(r2)
    st->st_uid     = hoststat.fst_uid;
   453b0:	e0bff117 	ldw	r2,-60(fp)
   453b4:	1007883a 	mov	r3,r2
   453b8:	e0bffe17 	ldw	r2,-8(fp)
   453bc:	10c0028d 	sth	r3,10(r2)
    st->st_gid     = hoststat.fst_gid;
   453c0:	e0bff217 	ldw	r2,-56(fp)
   453c4:	1007883a 	mov	r3,r2
   453c8:	e0bffe17 	ldw	r2,-8(fp)
   453cc:	10c0030d 	sth	r3,12(r2)
    st->st_rdev    = hoststat.fst_rdev;
   453d0:	e0bff317 	ldw	r2,-52(fp)
   453d4:	1007883a 	mov	r3,r2
   453d8:	e0bffe17 	ldw	r2,-8(fp)
   453dc:	10c0038d 	sth	r3,14(r2)
    st->st_size    = hoststat.fst_size[1];
   453e0:	e0bff517 	ldw	r2,-44(fp)
   453e4:	1007883a 	mov	r3,r2
   453e8:	e0bffe17 	ldw	r2,-8(fp)
   453ec:	10c00415 	stw	r3,16(r2)

    st->st_atime   = hoststat.fst_atime;
   453f0:	e0bffa17 	ldw	r2,-24(fp)
   453f4:	1007883a 	mov	r3,r2
   453f8:	e0bffe17 	ldw	r2,-8(fp)
   453fc:	10c00515 	stw	r3,20(r2)
    st->st_mtime   = hoststat.fst_mtime;
   45400:	e0bffb17 	ldw	r2,-20(fp)
   45404:	1007883a 	mov	r3,r2
   45408:	e0bffe17 	ldw	r2,-8(fp)
   4540c:	10c00715 	stw	r3,28(r2)
    st->st_ctime   = hoststat.fst_ctime;
   45410:	e0bffc17 	ldw	r2,-16(fp)
   45414:	1007883a 	mov	r3,r2
   45418:	e0bffe17 	ldw	r2,-8(fp)
   4541c:	10c00915 	stw	r3,36(r2)

    st->st_blksize = hoststat.fst_blksize[1];
   45420:	e0bff717 	ldw	r2,-36(fp)
   45424:	1007883a 	mov	r3,r2
   45428:	e0bffe17 	ldw	r2,-8(fp)
   4542c:	10c00b15 	stw	r3,44(r2)
    st->st_blocks  = hoststat.fst_blocks[1];
   45430:	e0bff917 	ldw	r2,-28(fp)
   45434:	1007883a 	mov	r3,r2
   45438:	e0bffe17 	ldw	r2,-8(fp)
   4543c:	10c00c15 	stw	r3,48(r2)

    return rc;
   45440:	e0bfea17 	ldw	r2,-88(fp)
   45444:	00000206 	br	45450 <alt_hostfs_fstat+0x210>
  }
  else
    return -error;
   45448:	e0bfeb17 	ldw	r2,-84(fp)
   4544c:	0085c83a 	sub	r2,zero,r2
}
   45450:	e037883a 	mov	sp,fp
   45454:	df000217 	ldw	fp,8(sp)
   45458:	dc400117 	ldw	r17,4(sp)
   4545c:	dc000017 	ldw	r16,0(sp)
   45460:	dec00304 	addi	sp,sp,12
   45464:	f800283a 	ret

00045468 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   45468:	defff504 	addi	sp,sp,-44
   4546c:	df000a15 	stw	fp,40(sp)
   45470:	df000a04 	addi	fp,sp,40
   45474:	e13ffc15 	stw	r4,-16(fp)
   45478:	e17ffd15 	stw	r5,-12(fp)
   4547c:	e1bffe15 	stw	r6,-8(fp)
   45480:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   45484:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   45488:	00800174 	movhi	r2,5
   4548c:	10a73c04 	addi	r2,r2,-25360
   45490:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   45494:	10003f26 	beq	r2,zero,45594 <alt_alarm_start+0x12c>
  {
    if (alarm)
   45498:	e0bffc17 	ldw	r2,-16(fp)
   4549c:	10003b26 	beq	r2,zero,4558c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   454a0:	e0bffc17 	ldw	r2,-16(fp)
   454a4:	e0fffe17 	ldw	r3,-8(fp)
   454a8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   454ac:	e0bffc17 	ldw	r2,-16(fp)
   454b0:	e0ffff17 	ldw	r3,-4(fp)
   454b4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   454b8:	0005303a 	rdctl	r2,status
   454bc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   454c0:	e0fff817 	ldw	r3,-32(fp)
   454c4:	00bfff84 	movi	r2,-2
   454c8:	1884703a 	and	r2,r3,r2
   454cc:	1001703a 	wrctl	status,r2
  
  return context;
   454d0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   454d4:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   454d8:	00800174 	movhi	r2,5
   454dc:	10a73d04 	addi	r2,r2,-25356
   454e0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   454e4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   454e8:	e0fffd17 	ldw	r3,-12(fp)
   454ec:	e0bff617 	ldw	r2,-40(fp)
   454f0:	1885883a 	add	r2,r3,r2
   454f4:	10c00044 	addi	r3,r2,1
   454f8:	e0bffc17 	ldw	r2,-16(fp)
   454fc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   45500:	e0bffc17 	ldw	r2,-16(fp)
   45504:	10c00217 	ldw	r3,8(r2)
   45508:	e0bff617 	ldw	r2,-40(fp)
   4550c:	1880042e 	bgeu	r3,r2,45520 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   45510:	e0bffc17 	ldw	r2,-16(fp)
   45514:	00c00044 	movi	r3,1
   45518:	10c00405 	stb	r3,16(r2)
   4551c:	00000206 	br	45528 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   45520:	e0bffc17 	ldw	r2,-16(fp)
   45524:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   45528:	e0bffc17 	ldw	r2,-16(fp)
   4552c:	00c00174 	movhi	r3,5
   45530:	18e07e04 	addi	r3,r3,-32264
   45534:	e0fff915 	stw	r3,-28(fp)
   45538:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4553c:	e0bffa17 	ldw	r2,-24(fp)
   45540:	e0fff917 	ldw	r3,-28(fp)
   45544:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   45548:	e0bff917 	ldw	r2,-28(fp)
   4554c:	10c00017 	ldw	r3,0(r2)
   45550:	e0bffa17 	ldw	r2,-24(fp)
   45554:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   45558:	e0bff917 	ldw	r2,-28(fp)
   4555c:	10800017 	ldw	r2,0(r2)
   45560:	e0fffa17 	ldw	r3,-24(fp)
   45564:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   45568:	e0bff917 	ldw	r2,-28(fp)
   4556c:	e0fffa17 	ldw	r3,-24(fp)
   45570:	10c00015 	stw	r3,0(r2)
   45574:	e0bff717 	ldw	r2,-36(fp)
   45578:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4557c:	e0bffb17 	ldw	r2,-20(fp)
   45580:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   45584:	0005883a 	mov	r2,zero
   45588:	00000306 	br	45598 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   4558c:	00bffa84 	movi	r2,-22
   45590:	00000106 	br	45598 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   45594:	00bfde84 	movi	r2,-134
  }
}
   45598:	e037883a 	mov	sp,fp
   4559c:	df000017 	ldw	fp,0(sp)
   455a0:	dec00104 	addi	sp,sp,4
   455a4:	f800283a 	ret

000455a8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   455a8:	deffff04 	addi	sp,sp,-4
   455ac:	df000015 	stw	fp,0(sp)
   455b0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   455b4:	e037883a 	mov	sp,fp
   455b8:	df000017 	ldw	fp,0(sp)
   455bc:	dec00104 	addi	sp,sp,4
   455c0:	f800283a 	ret

000455c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   455c4:	defffe04 	addi	sp,sp,-8
   455c8:	dfc00115 	stw	ra,4(sp)
   455cc:	df000015 	stw	fp,0(sp)
   455d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   455d4:	00800174 	movhi	r2,5
   455d8:	10a06904 	addi	r2,r2,-32348
   455dc:	10800017 	ldw	r2,0(r2)
   455e0:	10000526 	beq	r2,zero,455f8 <alt_get_errno+0x34>
   455e4:	00800174 	movhi	r2,5
   455e8:	10a06904 	addi	r2,r2,-32348
   455ec:	10800017 	ldw	r2,0(r2)
   455f0:	103ee83a 	callr	r2
   455f4:	00000206 	br	45600 <alt_get_errno+0x3c>
   455f8:	00800174 	movhi	r2,5
   455fc:	10a73704 	addi	r2,r2,-25380
}
   45600:	e037883a 	mov	sp,fp
   45604:	dfc00117 	ldw	ra,4(sp)
   45608:	df000017 	ldw	fp,0(sp)
   4560c:	dec00204 	addi	sp,sp,8
   45610:	f800283a 	ret

00045614 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   45614:	defffa04 	addi	sp,sp,-24
   45618:	dfc00515 	stw	ra,20(sp)
   4561c:	df000415 	stw	fp,16(sp)
   45620:	df000404 	addi	fp,sp,16
   45624:	e13ffe15 	stw	r4,-8(fp)
   45628:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   4562c:	e0bffe17 	ldw	r2,-8(fp)
   45630:	10000326 	beq	r2,zero,45640 <alt_dev_llist_insert+0x2c>
   45634:	e0bffe17 	ldw	r2,-8(fp)
   45638:	10800217 	ldw	r2,8(r2)
   4563c:	1000051e 	bne	r2,zero,45654 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   45640:	00455c40 	call	455c4 <alt_get_errno>
   45644:	00c00584 	movi	r3,22
   45648:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   4564c:	00bffa84 	movi	r2,-22
   45650:	00001306 	br	456a0 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   45654:	e0bffe17 	ldw	r2,-8(fp)
   45658:	e0ffff17 	ldw	r3,-4(fp)
   4565c:	e0fffc15 	stw	r3,-16(fp)
   45660:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   45664:	e0bffd17 	ldw	r2,-12(fp)
   45668:	e0fffc17 	ldw	r3,-16(fp)
   4566c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   45670:	e0bffc17 	ldw	r2,-16(fp)
   45674:	10c00017 	ldw	r3,0(r2)
   45678:	e0bffd17 	ldw	r2,-12(fp)
   4567c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   45680:	e0bffc17 	ldw	r2,-16(fp)
   45684:	10800017 	ldw	r2,0(r2)
   45688:	e0fffd17 	ldw	r3,-12(fp)
   4568c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   45690:	e0bffc17 	ldw	r2,-16(fp)
   45694:	e0fffd17 	ldw	r3,-12(fp)
   45698:	10c00015 	stw	r3,0(r2)

  return 0;  
   4569c:	0005883a 	mov	r2,zero
}
   456a0:	e037883a 	mov	sp,fp
   456a4:	dfc00117 	ldw	ra,4(sp)
   456a8:	df000017 	ldw	fp,0(sp)
   456ac:	dec00204 	addi	sp,sp,8
   456b0:	f800283a 	ret

000456b4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   456b4:	defffd04 	addi	sp,sp,-12
   456b8:	dfc00215 	stw	ra,8(sp)
   456bc:	df000115 	stw	fp,4(sp)
   456c0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   456c4:	00800134 	movhi	r2,4
   456c8:	1099b204 	addi	r2,r2,26312
   456cc:	e0bfff15 	stw	r2,-4(fp)
   456d0:	00000606 	br	456ec <_do_ctors+0x38>
        (*ctor) (); 
   456d4:	e0bfff17 	ldw	r2,-4(fp)
   456d8:	10800017 	ldw	r2,0(r2)
   456dc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   456e0:	e0bfff17 	ldw	r2,-4(fp)
   456e4:	10bfff04 	addi	r2,r2,-4
   456e8:	e0bfff15 	stw	r2,-4(fp)
   456ec:	e0ffff17 	ldw	r3,-4(fp)
   456f0:	00800134 	movhi	r2,4
   456f4:	1099b304 	addi	r2,r2,26316
   456f8:	18bff62e 	bgeu	r3,r2,456d4 <_do_ctors+0x20>
        (*ctor) (); 
}
   456fc:	e037883a 	mov	sp,fp
   45700:	dfc00117 	ldw	ra,4(sp)
   45704:	df000017 	ldw	fp,0(sp)
   45708:	dec00204 	addi	sp,sp,8
   4570c:	f800283a 	ret

00045710 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   45710:	defffd04 	addi	sp,sp,-12
   45714:	dfc00215 	stw	ra,8(sp)
   45718:	df000115 	stw	fp,4(sp)
   4571c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   45720:	00800134 	movhi	r2,4
   45724:	1099b204 	addi	r2,r2,26312
   45728:	e0bfff15 	stw	r2,-4(fp)
   4572c:	00000606 	br	45748 <_do_dtors+0x38>
        (*dtor) (); 
   45730:	e0bfff17 	ldw	r2,-4(fp)
   45734:	10800017 	ldw	r2,0(r2)
   45738:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   4573c:	e0bfff17 	ldw	r2,-4(fp)
   45740:	10bfff04 	addi	r2,r2,-4
   45744:	e0bfff15 	stw	r2,-4(fp)
   45748:	e0ffff17 	ldw	r3,-4(fp)
   4574c:	00800134 	movhi	r2,4
   45750:	1099b304 	addi	r2,r2,26316
   45754:	18bff62e 	bgeu	r3,r2,45730 <_do_dtors+0x20>
        (*dtor) (); 
}
   45758:	e037883a 	mov	sp,fp
   4575c:	dfc00117 	ldw	ra,4(sp)
   45760:	df000017 	ldw	fp,0(sp)
   45764:	dec00204 	addi	sp,sp,8
   45768:	f800283a 	ret

0004576c <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
   4576c:	defffc04 	addi	sp,sp,-16
   45770:	df000315 	stw	fp,12(sp)
   45774:	df000304 	addi	fp,sp,12
   45778:	e13fff15 	stw	r4,-4(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
   4577c:	e0bfff17 	ldw	r2,-4(fp)
   45780:	10800217 	ldw	r2,8(r2)
   45784:	1000021e 	bne	r2,zero,45790 <alt_fs_reg+0x24>
  {
    return -ENODEV;
   45788:	00bffb44 	movi	r2,-19
   4578c:	00001406 	br	457e0 <alt_fs_reg+0x74>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
   45790:	e0bfff17 	ldw	r2,-4(fp)
   45794:	00c00174 	movhi	r3,5
   45798:	18e06404 	addi	r3,r3,-32368
   4579c:	e0fffd15 	stw	r3,-12(fp)
   457a0:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   457a4:	e0bffe17 	ldw	r2,-8(fp)
   457a8:	e0fffd17 	ldw	r3,-12(fp)
   457ac:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   457b0:	e0bffd17 	ldw	r2,-12(fp)
   457b4:	10c00017 	ldw	r3,0(r2)
   457b8:	e0bffe17 	ldw	r2,-8(fp)
   457bc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   457c0:	e0bffd17 	ldw	r2,-12(fp)
   457c4:	10800017 	ldw	r2,0(r2)
   457c8:	e0fffe17 	ldw	r3,-8(fp)
   457cc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   457d0:	e0bffd17 	ldw	r2,-12(fp)
   457d4:	e0fffe17 	ldw	r3,-8(fp)
   457d8:	10c00015 	stw	r3,0(r2)

  return 0;
   457dc:	0005883a 	mov	r2,zero
} 
   457e0:	e037883a 	mov	sp,fp
   457e4:	df000017 	ldw	fp,0(sp)
   457e8:	dec00104 	addi	sp,sp,4
   457ec:	f800283a 	ret

000457f0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   457f0:	deffff04 	addi	sp,sp,-4
   457f4:	df000015 	stw	fp,0(sp)
   457f8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   457fc:	e037883a 	mov	sp,fp
   45800:	df000017 	ldw	fp,0(sp)
   45804:	dec00104 	addi	sp,sp,4
   45808:	f800283a 	ret

0004580c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4580c:	defff904 	addi	sp,sp,-28
   45810:	dfc00615 	stw	ra,24(sp)
   45814:	df000515 	stw	fp,20(sp)
   45818:	df000504 	addi	fp,sp,20
   4581c:	e13ffc15 	stw	r4,-16(fp)
   45820:	e17ffd15 	stw	r5,-12(fp)
   45824:	e1bffe15 	stw	r6,-8(fp)
   45828:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   4582c:	e0800217 	ldw	r2,8(fp)
   45830:	d8800015 	stw	r2,0(sp)
   45834:	e13ffc17 	ldw	r4,-16(fp)
   45838:	e17ffd17 	ldw	r5,-12(fp)
   4583c:	e1bffe17 	ldw	r6,-8(fp)
   45840:	e1ffff17 	ldw	r7,-4(fp)
   45844:	00459e40 	call	459e4 <alt_iic_isr_register>
}  
   45848:	e037883a 	mov	sp,fp
   4584c:	dfc00117 	ldw	ra,4(sp)
   45850:	df000017 	ldw	fp,0(sp)
   45854:	dec00204 	addi	sp,sp,8
   45858:	f800283a 	ret

0004585c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   4585c:	defff904 	addi	sp,sp,-28
   45860:	df000615 	stw	fp,24(sp)
   45864:	df000604 	addi	fp,sp,24
   45868:	e13ffe15 	stw	r4,-8(fp)
   4586c:	e17fff15 	stw	r5,-4(fp)
   45870:	e0bfff17 	ldw	r2,-4(fp)
   45874:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45878:	0005303a 	rdctl	r2,status
   4587c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   45880:	e0fffb17 	ldw	r3,-20(fp)
   45884:	00bfff84 	movi	r2,-2
   45888:	1884703a 	and	r2,r3,r2
   4588c:	1001703a 	wrctl	status,r2
  
  return context;
   45890:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   45894:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   45898:	e0bffa17 	ldw	r2,-24(fp)
   4589c:	00c00044 	movi	r3,1
   458a0:	1884983a 	sll	r2,r3,r2
   458a4:	1007883a 	mov	r3,r2
   458a8:	00800174 	movhi	r2,5
   458ac:	10a73b04 	addi	r2,r2,-25364
   458b0:	10800017 	ldw	r2,0(r2)
   458b4:	1886b03a 	or	r3,r3,r2
   458b8:	00800174 	movhi	r2,5
   458bc:	10a73b04 	addi	r2,r2,-25364
   458c0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   458c4:	00800174 	movhi	r2,5
   458c8:	10a73b04 	addi	r2,r2,-25364
   458cc:	10800017 	ldw	r2,0(r2)
   458d0:	100170fa 	wrctl	ienable,r2
   458d4:	e0bffc17 	ldw	r2,-16(fp)
   458d8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   458dc:	e0bffd17 	ldw	r2,-12(fp)
   458e0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   458e4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   458e8:	e037883a 	mov	sp,fp
   458ec:	df000017 	ldw	fp,0(sp)
   458f0:	dec00104 	addi	sp,sp,4
   458f4:	f800283a 	ret

000458f8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   458f8:	defff904 	addi	sp,sp,-28
   458fc:	df000615 	stw	fp,24(sp)
   45900:	df000604 	addi	fp,sp,24
   45904:	e13ffe15 	stw	r4,-8(fp)
   45908:	e17fff15 	stw	r5,-4(fp)
   4590c:	e0bfff17 	ldw	r2,-4(fp)
   45910:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45914:	0005303a 	rdctl	r2,status
   45918:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4591c:	e0fffb17 	ldw	r3,-20(fp)
   45920:	00bfff84 	movi	r2,-2
   45924:	1884703a 	and	r2,r3,r2
   45928:	1001703a 	wrctl	status,r2
  
  return context;
   4592c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   45930:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   45934:	e0bffa17 	ldw	r2,-24(fp)
   45938:	00c00044 	movi	r3,1
   4593c:	1884983a 	sll	r2,r3,r2
   45940:	0084303a 	nor	r2,zero,r2
   45944:	1007883a 	mov	r3,r2
   45948:	00800174 	movhi	r2,5
   4594c:	10a73b04 	addi	r2,r2,-25364
   45950:	10800017 	ldw	r2,0(r2)
   45954:	1886703a 	and	r3,r3,r2
   45958:	00800174 	movhi	r2,5
   4595c:	10a73b04 	addi	r2,r2,-25364
   45960:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   45964:	00800174 	movhi	r2,5
   45968:	10a73b04 	addi	r2,r2,-25364
   4596c:	10800017 	ldw	r2,0(r2)
   45970:	100170fa 	wrctl	ienable,r2
   45974:	e0bffc17 	ldw	r2,-16(fp)
   45978:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4597c:	e0bffd17 	ldw	r2,-12(fp)
   45980:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   45984:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   45988:	e037883a 	mov	sp,fp
   4598c:	df000017 	ldw	fp,0(sp)
   45990:	dec00104 	addi	sp,sp,4
   45994:	f800283a 	ret

00045998 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   45998:	defffc04 	addi	sp,sp,-16
   4599c:	df000315 	stw	fp,12(sp)
   459a0:	df000304 	addi	fp,sp,12
   459a4:	e13ffe15 	stw	r4,-8(fp)
   459a8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   459ac:	000530fa 	rdctl	r2,ienable
   459b0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   459b4:	e0bfff17 	ldw	r2,-4(fp)
   459b8:	00c00044 	movi	r3,1
   459bc:	1884983a 	sll	r2,r3,r2
   459c0:	1007883a 	mov	r3,r2
   459c4:	e0bffd17 	ldw	r2,-12(fp)
   459c8:	1884703a 	and	r2,r3,r2
   459cc:	1004c03a 	cmpne	r2,r2,zero
   459d0:	10803fcc 	andi	r2,r2,255
}
   459d4:	e037883a 	mov	sp,fp
   459d8:	df000017 	ldw	fp,0(sp)
   459dc:	dec00104 	addi	sp,sp,4
   459e0:	f800283a 	ret

000459e4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   459e4:	defff504 	addi	sp,sp,-44
   459e8:	dfc00a15 	stw	ra,40(sp)
   459ec:	df000915 	stw	fp,36(sp)
   459f0:	df000904 	addi	fp,sp,36
   459f4:	e13ffc15 	stw	r4,-16(fp)
   459f8:	e17ffd15 	stw	r5,-12(fp)
   459fc:	e1bffe15 	stw	r6,-8(fp)
   45a00:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   45a04:	00bffa84 	movi	r2,-22
   45a08:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   45a0c:	e0bffd17 	ldw	r2,-12(fp)
   45a10:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   45a14:	e0bff817 	ldw	r2,-32(fp)
   45a18:	10800808 	cmpgei	r2,r2,32
   45a1c:	1000271e 	bne	r2,zero,45abc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45a20:	0005303a 	rdctl	r2,status
   45a24:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   45a28:	e0fffa17 	ldw	r3,-24(fp)
   45a2c:	00bfff84 	movi	r2,-2
   45a30:	1884703a 	and	r2,r3,r2
   45a34:	1001703a 	wrctl	status,r2
  
  return context;
   45a38:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   45a3c:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   45a40:	00c00174 	movhi	r3,5
   45a44:	18e74804 	addi	r3,r3,-25312
   45a48:	e0bff817 	ldw	r2,-32(fp)
   45a4c:	100490fa 	slli	r2,r2,3
   45a50:	1885883a 	add	r2,r3,r2
   45a54:	e0fffe17 	ldw	r3,-8(fp)
   45a58:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   45a5c:	00c00174 	movhi	r3,5
   45a60:	18e74804 	addi	r3,r3,-25312
   45a64:	e0bff817 	ldw	r2,-32(fp)
   45a68:	100490fa 	slli	r2,r2,3
   45a6c:	1885883a 	add	r2,r3,r2
   45a70:	10800104 	addi	r2,r2,4
   45a74:	e0ffff17 	ldw	r3,-4(fp)
   45a78:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   45a7c:	e0bffe17 	ldw	r2,-8(fp)
   45a80:	10000526 	beq	r2,zero,45a98 <alt_iic_isr_register+0xb4>
   45a84:	e0bff817 	ldw	r2,-32(fp)
   45a88:	e13ffc17 	ldw	r4,-16(fp)
   45a8c:	100b883a 	mov	r5,r2
   45a90:	004585c0 	call	4585c <alt_ic_irq_enable>
   45a94:	00000406 	br	45aa8 <alt_iic_isr_register+0xc4>
   45a98:	e0bff817 	ldw	r2,-32(fp)
   45a9c:	e13ffc17 	ldw	r4,-16(fp)
   45aa0:	100b883a 	mov	r5,r2
   45aa4:	00458f80 	call	458f8 <alt_ic_irq_disable>
   45aa8:	e0bff715 	stw	r2,-36(fp)
   45aac:	e0bff917 	ldw	r2,-28(fp)
   45ab0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45ab4:	e0bffb17 	ldw	r2,-20(fp)
   45ab8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   45abc:	e0bff717 	ldw	r2,-36(fp)
}
   45ac0:	e037883a 	mov	sp,fp
   45ac4:	dfc00117 	ldw	ra,4(sp)
   45ac8:	df000017 	ldw	fp,0(sp)
   45acc:	dec00204 	addi	sp,sp,8
   45ad0:	f800283a 	ret

00045ad4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   45ad4:	defff804 	addi	sp,sp,-32
   45ad8:	dfc00715 	stw	ra,28(sp)
   45adc:	df000615 	stw	fp,24(sp)
   45ae0:	dc000515 	stw	r16,20(sp)
   45ae4:	df000504 	addi	fp,sp,20
   45ae8:	e13ffc15 	stw	r4,-16(fp)
   45aec:	e17ffd15 	stw	r5,-12(fp)
   45af0:	e1bffe15 	stw	r6,-8(fp)
   45af4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   45af8:	e13ffd17 	ldw	r4,-12(fp)
   45afc:	e17ffe17 	ldw	r5,-8(fp)
   45b00:	e1bfff17 	ldw	r6,-4(fp)
   45b04:	0045d6c0 	call	45d6c <open>
   45b08:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   45b0c:	e0bffb17 	ldw	r2,-20(fp)
   45b10:	10002216 	blt	r2,zero,45b9c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   45b14:	04000134 	movhi	r16,4
   45b18:	841bd904 	addi	r16,r16,28516
   45b1c:	e0bffb17 	ldw	r2,-20(fp)
   45b20:	1009883a 	mov	r4,r2
   45b24:	01400304 	movi	r5,12
   45b28:	00433300 	call	43330 <__mulsi3>
   45b2c:	8085883a 	add	r2,r16,r2
   45b30:	10c00017 	ldw	r3,0(r2)
   45b34:	e0bffc17 	ldw	r2,-16(fp)
   45b38:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   45b3c:	04000134 	movhi	r16,4
   45b40:	841bd904 	addi	r16,r16,28516
   45b44:	e0bffb17 	ldw	r2,-20(fp)
   45b48:	1009883a 	mov	r4,r2
   45b4c:	01400304 	movi	r5,12
   45b50:	00433300 	call	43330 <__mulsi3>
   45b54:	8085883a 	add	r2,r16,r2
   45b58:	10800104 	addi	r2,r2,4
   45b5c:	10c00017 	ldw	r3,0(r2)
   45b60:	e0bffc17 	ldw	r2,-16(fp)
   45b64:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   45b68:	04000134 	movhi	r16,4
   45b6c:	841bd904 	addi	r16,r16,28516
   45b70:	e0bffb17 	ldw	r2,-20(fp)
   45b74:	1009883a 	mov	r4,r2
   45b78:	01400304 	movi	r5,12
   45b7c:	00433300 	call	43330 <__mulsi3>
   45b80:	8085883a 	add	r2,r16,r2
   45b84:	10800204 	addi	r2,r2,8
   45b88:	10c00017 	ldw	r3,0(r2)
   45b8c:	e0bffc17 	ldw	r2,-16(fp)
   45b90:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   45b94:	e13ffb17 	ldw	r4,-20(fp)
   45b98:	0043aa00 	call	43aa0 <alt_release_fd>
  }
} 
   45b9c:	e037883a 	mov	sp,fp
   45ba0:	dfc00217 	ldw	ra,8(sp)
   45ba4:	df000117 	ldw	fp,4(sp)
   45ba8:	dc000017 	ldw	r16,0(sp)
   45bac:	dec00304 	addi	sp,sp,12
   45bb0:	f800283a 	ret

00045bb4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   45bb4:	defffb04 	addi	sp,sp,-20
   45bb8:	dfc00415 	stw	ra,16(sp)
   45bbc:	df000315 	stw	fp,12(sp)
   45bc0:	df000304 	addi	fp,sp,12
   45bc4:	e13ffd15 	stw	r4,-12(fp)
   45bc8:	e17ffe15 	stw	r5,-8(fp)
   45bcc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   45bd0:	01000134 	movhi	r4,4
   45bd4:	211bdc04 	addi	r4,r4,28528
   45bd8:	e17ffd17 	ldw	r5,-12(fp)
   45bdc:	01800044 	movi	r6,1
   45be0:	01c07fc4 	movi	r7,511
   45be4:	0045ad40 	call	45ad4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   45be8:	01000134 	movhi	r4,4
   45bec:	211bd904 	addi	r4,r4,28516
   45bf0:	e17ffe17 	ldw	r5,-8(fp)
   45bf4:	000d883a 	mov	r6,zero
   45bf8:	01c07fc4 	movi	r7,511
   45bfc:	0045ad40 	call	45ad4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   45c00:	01000134 	movhi	r4,4
   45c04:	211bdf04 	addi	r4,r4,28540
   45c08:	e17fff17 	ldw	r5,-4(fp)
   45c0c:	01800044 	movi	r6,1
   45c10:	01c07fc4 	movi	r7,511
   45c14:	0045ad40 	call	45ad4 <alt_open_fd>
}  
   45c18:	e037883a 	mov	sp,fp
   45c1c:	dfc00117 	ldw	ra,4(sp)
   45c20:	df000017 	ldw	fp,0(sp)
   45c24:	dec00204 	addi	sp,sp,8
   45c28:	f800283a 	ret

00045c2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   45c2c:	defffe04 	addi	sp,sp,-8
   45c30:	dfc00115 	stw	ra,4(sp)
   45c34:	df000015 	stw	fp,0(sp)
   45c38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   45c3c:	00800174 	movhi	r2,5
   45c40:	10a06904 	addi	r2,r2,-32348
   45c44:	10800017 	ldw	r2,0(r2)
   45c48:	10000526 	beq	r2,zero,45c60 <alt_get_errno+0x34>
   45c4c:	00800174 	movhi	r2,5
   45c50:	10a06904 	addi	r2,r2,-32348
   45c54:	10800017 	ldw	r2,0(r2)
   45c58:	103ee83a 	callr	r2
   45c5c:	00000206 	br	45c68 <alt_get_errno+0x3c>
   45c60:	00800174 	movhi	r2,5
   45c64:	10a73704 	addi	r2,r2,-25380
}
   45c68:	e037883a 	mov	sp,fp
   45c6c:	dfc00117 	ldw	ra,4(sp)
   45c70:	df000017 	ldw	fp,0(sp)
   45c74:	dec00204 	addi	sp,sp,8
   45c78:	f800283a 	ret

00045c7c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   45c7c:	defffb04 	addi	sp,sp,-20
   45c80:	dfc00415 	stw	ra,16(sp)
   45c84:	df000315 	stw	fp,12(sp)
   45c88:	dc000215 	stw	r16,8(sp)
   45c8c:	df000204 	addi	fp,sp,8
   45c90:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   45c94:	e0bfff17 	ldw	r2,-4(fp)
   45c98:	10800217 	ldw	r2,8(r2)
   45c9c:	10d00034 	orhi	r3,r2,16384
   45ca0:	e0bfff17 	ldw	r2,-4(fp)
   45ca4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   45ca8:	e03ffe15 	stw	zero,-8(fp)
   45cac:	00002206 	br	45d38 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   45cb0:	04000134 	movhi	r16,4
   45cb4:	841bd904 	addi	r16,r16,28516
   45cb8:	e0bffe17 	ldw	r2,-8(fp)
   45cbc:	1009883a 	mov	r4,r2
   45cc0:	01400304 	movi	r5,12
   45cc4:	00433300 	call	43330 <__mulsi3>
   45cc8:	8085883a 	add	r2,r16,r2
   45ccc:	10c00017 	ldw	r3,0(r2)
   45cd0:	e0bfff17 	ldw	r2,-4(fp)
   45cd4:	10800017 	ldw	r2,0(r2)
   45cd8:	1880141e 	bne	r3,r2,45d2c <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   45cdc:	04000134 	movhi	r16,4
   45ce0:	841bd904 	addi	r16,r16,28516
   45ce4:	e0bffe17 	ldw	r2,-8(fp)
   45ce8:	1009883a 	mov	r4,r2
   45cec:	01400304 	movi	r5,12
   45cf0:	00433300 	call	43330 <__mulsi3>
   45cf4:	8085883a 	add	r2,r16,r2
   45cf8:	10800204 	addi	r2,r2,8
   45cfc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   45d00:	10000a0e 	bge	r2,zero,45d2c <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   45d04:	e13ffe17 	ldw	r4,-8(fp)
   45d08:	01400304 	movi	r5,12
   45d0c:	00433300 	call	43330 <__mulsi3>
   45d10:	00c00134 	movhi	r3,4
   45d14:	18dbd904 	addi	r3,r3,28516
   45d18:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   45d1c:	e0bfff17 	ldw	r2,-4(fp)
   45d20:	18800226 	beq	r3,r2,45d2c <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   45d24:	00bffcc4 	movi	r2,-13
   45d28:	00000a06 	br	45d54 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   45d2c:	e0bffe17 	ldw	r2,-8(fp)
   45d30:	10800044 	addi	r2,r2,1
   45d34:	e0bffe15 	stw	r2,-8(fp)
   45d38:	00800174 	movhi	r2,5
   45d3c:	10a06804 	addi	r2,r2,-32352
   45d40:	10800017 	ldw	r2,0(r2)
   45d44:	1007883a 	mov	r3,r2
   45d48:	e0bffe17 	ldw	r2,-8(fp)
   45d4c:	18bfd82e 	bgeu	r3,r2,45cb0 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   45d50:	0005883a 	mov	r2,zero
}
   45d54:	e037883a 	mov	sp,fp
   45d58:	dfc00217 	ldw	ra,8(sp)
   45d5c:	df000117 	ldw	fp,4(sp)
   45d60:	dc000017 	ldw	r16,0(sp)
   45d64:	dec00304 	addi	sp,sp,12
   45d68:	f800283a 	ret

00045d6c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   45d6c:	defff604 	addi	sp,sp,-40
   45d70:	dfc00915 	stw	ra,36(sp)
   45d74:	df000815 	stw	fp,32(sp)
   45d78:	df000804 	addi	fp,sp,32
   45d7c:	e13ffd15 	stw	r4,-12(fp)
   45d80:	e17ffe15 	stw	r5,-8(fp)
   45d84:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   45d88:	00bfffc4 	movi	r2,-1
   45d8c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   45d90:	00bffb44 	movi	r2,-19
   45d94:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   45d98:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   45d9c:	e13ffd17 	ldw	r4,-12(fp)
   45da0:	01400174 	movhi	r5,5
   45da4:	29606604 	addi	r5,r5,-32360
   45da8:	00460800 	call	46080 <alt_find_dev>
   45dac:	e0bff815 	stw	r2,-32(fp)
   45db0:	e0bff817 	ldw	r2,-32(fp)
   45db4:	1000051e 	bne	r2,zero,45dcc <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   45db8:	e13ffd17 	ldw	r4,-12(fp)
   45dbc:	00461100 	call	46110 <alt_find_file>
   45dc0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   45dc4:	00800044 	movi	r2,1
   45dc8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   45dcc:	e0bff817 	ldw	r2,-32(fp)
   45dd0:	10002a26 	beq	r2,zero,45e7c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   45dd4:	e13ff817 	ldw	r4,-32(fp)
   45dd8:	00462240 	call	46224 <alt_get_fd>
   45ddc:	e0bff915 	stw	r2,-28(fp)
   45de0:	e0bff917 	ldw	r2,-28(fp)
   45de4:	1000030e 	bge	r2,zero,45df4 <open+0x88>
    {
      status = index;
   45de8:	e0bff917 	ldw	r2,-28(fp)
   45dec:	e0bffa15 	stw	r2,-24(fp)
   45df0:	00002406 	br	45e84 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   45df4:	e13ff917 	ldw	r4,-28(fp)
   45df8:	01400304 	movi	r5,12
   45dfc:	00433300 	call	43330 <__mulsi3>
   45e00:	00c00134 	movhi	r3,4
   45e04:	18dbd904 	addi	r3,r3,28516
   45e08:	10c5883a 	add	r2,r2,r3
   45e0c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   45e10:	e0fffe17 	ldw	r3,-8(fp)
   45e14:	00900034 	movhi	r2,16384
   45e18:	10bfffc4 	addi	r2,r2,-1
   45e1c:	1886703a 	and	r3,r3,r2
   45e20:	e0bffc17 	ldw	r2,-16(fp)
   45e24:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   45e28:	e0bffb17 	ldw	r2,-20(fp)
   45e2c:	1000051e 	bne	r2,zero,45e44 <open+0xd8>
   45e30:	e13ffc17 	ldw	r4,-16(fp)
   45e34:	0045c7c0 	call	45c7c <alt_file_locked>
   45e38:	e0bffa15 	stw	r2,-24(fp)
   45e3c:	e0bffa17 	ldw	r2,-24(fp)
   45e40:	10001016 	blt	r2,zero,45e84 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   45e44:	e0bff817 	ldw	r2,-32(fp)
   45e48:	10800317 	ldw	r2,12(r2)
   45e4c:	10000826 	beq	r2,zero,45e70 <open+0x104>
   45e50:	e0bff817 	ldw	r2,-32(fp)
   45e54:	10800317 	ldw	r2,12(r2)
   45e58:	e13ffc17 	ldw	r4,-16(fp)
   45e5c:	e17ffd17 	ldw	r5,-12(fp)
   45e60:	e1bffe17 	ldw	r6,-8(fp)
   45e64:	e1ffff17 	ldw	r7,-4(fp)
   45e68:	103ee83a 	callr	r2
   45e6c:	00000106 	br	45e74 <open+0x108>
   45e70:	0005883a 	mov	r2,zero
   45e74:	e0bffa15 	stw	r2,-24(fp)
   45e78:	00000206 	br	45e84 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   45e7c:	00bffb44 	movi	r2,-19
   45e80:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   45e84:	e0bffa17 	ldw	r2,-24(fp)
   45e88:	1000080e 	bge	r2,zero,45eac <open+0x140>
  {
    alt_release_fd (index);  
   45e8c:	e13ff917 	ldw	r4,-28(fp)
   45e90:	0043aa00 	call	43aa0 <alt_release_fd>
    ALT_ERRNO = -status;
   45e94:	0045c2c0 	call	45c2c <alt_get_errno>
   45e98:	e0fffa17 	ldw	r3,-24(fp)
   45e9c:	00c7c83a 	sub	r3,zero,r3
   45ea0:	10c00015 	stw	r3,0(r2)
    return -1;
   45ea4:	00bfffc4 	movi	r2,-1
   45ea8:	00000106 	br	45eb0 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   45eac:	e0bff917 	ldw	r2,-28(fp)
}
   45eb0:	e037883a 	mov	sp,fp
   45eb4:	dfc00117 	ldw	ra,4(sp)
   45eb8:	df000017 	ldw	fp,0(sp)
   45ebc:	dec00204 	addi	sp,sp,8
   45ec0:	f800283a 	ret

00045ec4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   45ec4:	defffa04 	addi	sp,sp,-24
   45ec8:	df000515 	stw	fp,20(sp)
   45ecc:	df000504 	addi	fp,sp,20
   45ed0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45ed4:	0005303a 	rdctl	r2,status
   45ed8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   45edc:	e0fffc17 	ldw	r3,-16(fp)
   45ee0:	00bfff84 	movi	r2,-2
   45ee4:	1884703a 	and	r2,r3,r2
   45ee8:	1001703a 	wrctl	status,r2
  
  return context;
   45eec:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   45ef0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   45ef4:	e0bfff17 	ldw	r2,-4(fp)
   45ef8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   45efc:	e0bffd17 	ldw	r2,-12(fp)
   45f00:	10800017 	ldw	r2,0(r2)
   45f04:	e0fffd17 	ldw	r3,-12(fp)
   45f08:	18c00117 	ldw	r3,4(r3)
   45f0c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   45f10:	e0bffd17 	ldw	r2,-12(fp)
   45f14:	10800117 	ldw	r2,4(r2)
   45f18:	e0fffd17 	ldw	r3,-12(fp)
   45f1c:	18c00017 	ldw	r3,0(r3)
   45f20:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   45f24:	e0bffd17 	ldw	r2,-12(fp)
   45f28:	e0fffd17 	ldw	r3,-12(fp)
   45f2c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   45f30:	e0bffd17 	ldw	r2,-12(fp)
   45f34:	e0fffd17 	ldw	r3,-12(fp)
   45f38:	10c00015 	stw	r3,0(r2)
   45f3c:	e0bffb17 	ldw	r2,-20(fp)
   45f40:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45f44:	e0bffe17 	ldw	r2,-8(fp)
   45f48:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   45f4c:	e037883a 	mov	sp,fp
   45f50:	df000017 	ldw	fp,0(sp)
   45f54:	dec00104 	addi	sp,sp,4
   45f58:	f800283a 	ret

00045f5c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   45f5c:	defffb04 	addi	sp,sp,-20
   45f60:	dfc00415 	stw	ra,16(sp)
   45f64:	df000315 	stw	fp,12(sp)
   45f68:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   45f6c:	d0a02317 	ldw	r2,-32628(gp)
   45f70:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   45f74:	d0a6e217 	ldw	r2,-25720(gp)
   45f78:	10800044 	addi	r2,r2,1
   45f7c:	d0a6e215 	stw	r2,-25720(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   45f80:	00002e06 	br	4603c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   45f84:	e0bffd17 	ldw	r2,-12(fp)
   45f88:	10800017 	ldw	r2,0(r2)
   45f8c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   45f90:	e0bffd17 	ldw	r2,-12(fp)
   45f94:	10800403 	ldbu	r2,16(r2)
   45f98:	10803fcc 	andi	r2,r2,255
   45f9c:	10000426 	beq	r2,zero,45fb0 <alt_tick+0x54>
   45fa0:	d0a6e217 	ldw	r2,-25720(gp)
   45fa4:	1000021e 	bne	r2,zero,45fb0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   45fa8:	e0bffd17 	ldw	r2,-12(fp)
   45fac:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   45fb0:	e0bffd17 	ldw	r2,-12(fp)
   45fb4:	10800217 	ldw	r2,8(r2)
   45fb8:	d0e6e217 	ldw	r3,-25720(gp)
   45fbc:	18801d36 	bltu	r3,r2,46034 <alt_tick+0xd8>
   45fc0:	e0bffd17 	ldw	r2,-12(fp)
   45fc4:	10800403 	ldbu	r2,16(r2)
   45fc8:	10803fcc 	andi	r2,r2,255
   45fcc:	1000191e 	bne	r2,zero,46034 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   45fd0:	e0bffd17 	ldw	r2,-12(fp)
   45fd4:	10c00317 	ldw	r3,12(r2)
   45fd8:	e0bffd17 	ldw	r2,-12(fp)
   45fdc:	10800517 	ldw	r2,20(r2)
   45fe0:	1009883a 	mov	r4,r2
   45fe4:	183ee83a 	callr	r3
   45fe8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   45fec:	e0bfff17 	ldw	r2,-4(fp)
   45ff0:	1000031e 	bne	r2,zero,46000 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   45ff4:	e13ffd17 	ldw	r4,-12(fp)
   45ff8:	0045ec40 	call	45ec4 <alt_alarm_stop>
   45ffc:	00000d06 	br	46034 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   46000:	e0bffd17 	ldw	r2,-12(fp)
   46004:	10c00217 	ldw	r3,8(r2)
   46008:	e0bfff17 	ldw	r2,-4(fp)
   4600c:	1887883a 	add	r3,r3,r2
   46010:	e0bffd17 	ldw	r2,-12(fp)
   46014:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   46018:	e0bffd17 	ldw	r2,-12(fp)
   4601c:	10c00217 	ldw	r3,8(r2)
   46020:	d0a6e217 	ldw	r2,-25720(gp)
   46024:	1880032e 	bgeu	r3,r2,46034 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   46028:	e0bffd17 	ldw	r2,-12(fp)
   4602c:	00c00044 	movi	r3,1
   46030:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   46034:	e0bffe17 	ldw	r2,-8(fp)
   46038:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   4603c:	e0fffd17 	ldw	r3,-12(fp)
   46040:	d0a02304 	addi	r2,gp,-32628
   46044:	18bfcf1e 	bne	r3,r2,45f84 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   46048:	0001883a 	nop
}
   4604c:	e037883a 	mov	sp,fp
   46050:	dfc00117 	ldw	ra,4(sp)
   46054:	df000017 	ldw	fp,0(sp)
   46058:	dec00204 	addi	sp,sp,8
   4605c:	f800283a 	ret

00046060 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   46060:	deffff04 	addi	sp,sp,-4
   46064:	df000015 	stw	fp,0(sp)
   46068:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   4606c:	000170fa 	wrctl	ienable,zero
}
   46070:	e037883a 	mov	sp,fp
   46074:	df000017 	ldw	fp,0(sp)
   46078:	dec00104 	addi	sp,sp,4
   4607c:	f800283a 	ret

00046080 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   46080:	defffa04 	addi	sp,sp,-24
   46084:	dfc00515 	stw	ra,20(sp)
   46088:	df000415 	stw	fp,16(sp)
   4608c:	df000404 	addi	fp,sp,16
   46090:	e13ffe15 	stw	r4,-8(fp)
   46094:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   46098:	e0bfff17 	ldw	r2,-4(fp)
   4609c:	10800017 	ldw	r2,0(r2)
   460a0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   460a4:	e13ffe17 	ldw	r4,-8(fp)
   460a8:	00410940 	call	41094 <strlen>
   460ac:	10800044 	addi	r2,r2,1
   460b0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   460b4:	00000d06 	br	460ec <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   460b8:	e0bffc17 	ldw	r2,-16(fp)
   460bc:	10c00217 	ldw	r3,8(r2)
   460c0:	e0bffd17 	ldw	r2,-12(fp)
   460c4:	1809883a 	mov	r4,r3
   460c8:	e17ffe17 	ldw	r5,-8(fp)
   460cc:	100d883a 	mov	r6,r2
   460d0:	00463440 	call	46344 <memcmp>
   460d4:	1000021e 	bne	r2,zero,460e0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   460d8:	e0bffc17 	ldw	r2,-16(fp)
   460dc:	00000706 	br	460fc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   460e0:	e0bffc17 	ldw	r2,-16(fp)
   460e4:	10800017 	ldw	r2,0(r2)
   460e8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   460ec:	e0fffc17 	ldw	r3,-16(fp)
   460f0:	e0bfff17 	ldw	r2,-4(fp)
   460f4:	18bff01e 	bne	r3,r2,460b8 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   460f8:	0005883a 	mov	r2,zero
}
   460fc:	e037883a 	mov	sp,fp
   46100:	dfc00117 	ldw	ra,4(sp)
   46104:	df000017 	ldw	fp,0(sp)
   46108:	dec00204 	addi	sp,sp,8
   4610c:	f800283a 	ret

00046110 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   46110:	defffb04 	addi	sp,sp,-20
   46114:	dfc00415 	stw	ra,16(sp)
   46118:	df000315 	stw	fp,12(sp)
   4611c:	df000304 	addi	fp,sp,12
   46120:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   46124:	00800174 	movhi	r2,5
   46128:	10a06404 	addi	r2,r2,-32368
   4612c:	10800017 	ldw	r2,0(r2)
   46130:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   46134:	00003106 	br	461fc <alt_find_file+0xec>
  {
    len = strlen(next->name);
   46138:	e0bffd17 	ldw	r2,-12(fp)
   4613c:	10800217 	ldw	r2,8(r2)
   46140:	1009883a 	mov	r4,r2
   46144:	00410940 	call	41094 <strlen>
   46148:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   4614c:	e0bffd17 	ldw	r2,-12(fp)
   46150:	10c00217 	ldw	r3,8(r2)
   46154:	e0bffe17 	ldw	r2,-8(fp)
   46158:	10bfffc4 	addi	r2,r2,-1
   4615c:	1885883a 	add	r2,r3,r2
   46160:	10800003 	ldbu	r2,0(r2)
   46164:	10803fcc 	andi	r2,r2,255
   46168:	1080201c 	xori	r2,r2,128
   4616c:	10bfe004 	addi	r2,r2,-128
   46170:	10800bd8 	cmpnei	r2,r2,47
   46174:	1000031e 	bne	r2,zero,46184 <alt_find_file+0x74>
    {
      len -= 1;
   46178:	e0bffe17 	ldw	r2,-8(fp)
   4617c:	10bfffc4 	addi	r2,r2,-1
   46180:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   46184:	e0bffe17 	ldw	r2,-8(fp)
   46188:	e0ffff17 	ldw	r3,-4(fp)
   4618c:	1885883a 	add	r2,r3,r2
   46190:	10800003 	ldbu	r2,0(r2)
   46194:	10803fcc 	andi	r2,r2,255
   46198:	1080201c 	xori	r2,r2,128
   4619c:	10bfe004 	addi	r2,r2,-128
   461a0:	10800be0 	cmpeqi	r2,r2,47
   461a4:	1000081e 	bne	r2,zero,461c8 <alt_find_file+0xb8>
   461a8:	e0bffe17 	ldw	r2,-8(fp)
   461ac:	e0ffff17 	ldw	r3,-4(fp)
   461b0:	1885883a 	add	r2,r3,r2
   461b4:	10800003 	ldbu	r2,0(r2)
   461b8:	10803fcc 	andi	r2,r2,255
   461bc:	1080201c 	xori	r2,r2,128
   461c0:	10bfe004 	addi	r2,r2,-128
   461c4:	10000a1e 	bne	r2,zero,461f0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   461c8:	e0bffd17 	ldw	r2,-12(fp)
   461cc:	10c00217 	ldw	r3,8(r2)
   461d0:	e0bffe17 	ldw	r2,-8(fp)
   461d4:	1809883a 	mov	r4,r3
   461d8:	e17fff17 	ldw	r5,-4(fp)
   461dc:	100d883a 	mov	r6,r2
   461e0:	00463440 	call	46344 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   461e4:	1000021e 	bne	r2,zero,461f0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   461e8:	e0bffd17 	ldw	r2,-12(fp)
   461ec:	00000806 	br	46210 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   461f0:	e0bffd17 	ldw	r2,-12(fp)
   461f4:	10800017 	ldw	r2,0(r2)
   461f8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   461fc:	e0fffd17 	ldw	r3,-12(fp)
   46200:	00800174 	movhi	r2,5
   46204:	10a06404 	addi	r2,r2,-32368
   46208:	18bfcb1e 	bne	r3,r2,46138 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   4620c:	0005883a 	mov	r2,zero
}
   46210:	e037883a 	mov	sp,fp
   46214:	dfc00117 	ldw	ra,4(sp)
   46218:	df000017 	ldw	fp,0(sp)
   4621c:	dec00204 	addi	sp,sp,8
   46220:	f800283a 	ret

00046224 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   46224:	defffa04 	addi	sp,sp,-24
   46228:	dfc00515 	stw	ra,20(sp)
   4622c:	df000415 	stw	fp,16(sp)
   46230:	dc000315 	stw	r16,12(sp)
   46234:	df000304 	addi	fp,sp,12
   46238:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   4623c:	00bffa04 	movi	r2,-24
   46240:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   46244:	e03ffd15 	stw	zero,-12(fp)
   46248:	00002106 	br	462d0 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   4624c:	04000134 	movhi	r16,4
   46250:	841bd904 	addi	r16,r16,28516
   46254:	e0bffd17 	ldw	r2,-12(fp)
   46258:	1009883a 	mov	r4,r2
   4625c:	01400304 	movi	r5,12
   46260:	00433300 	call	43330 <__mulsi3>
   46264:	8085883a 	add	r2,r16,r2
   46268:	10800017 	ldw	r2,0(r2)
   4626c:	1000151e 	bne	r2,zero,462c4 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   46270:	04000134 	movhi	r16,4
   46274:	841bd904 	addi	r16,r16,28516
   46278:	e0bffd17 	ldw	r2,-12(fp)
   4627c:	1009883a 	mov	r4,r2
   46280:	01400304 	movi	r5,12
   46284:	00433300 	call	43330 <__mulsi3>
   46288:	8085883a 	add	r2,r16,r2
   4628c:	e0ffff17 	ldw	r3,-4(fp)
   46290:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   46294:	00800174 	movhi	r2,5
   46298:	10a06804 	addi	r2,r2,-32352
   4629c:	10c00017 	ldw	r3,0(r2)
   462a0:	e0bffd17 	ldw	r2,-12(fp)
   462a4:	1880040e 	bge	r3,r2,462b8 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   462a8:	00800174 	movhi	r2,5
   462ac:	10a06804 	addi	r2,r2,-32352
   462b0:	e0fffd17 	ldw	r3,-12(fp)
   462b4:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   462b8:	e0bffd17 	ldw	r2,-12(fp)
   462bc:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   462c0:	00000606 	br	462dc <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   462c4:	e0bffd17 	ldw	r2,-12(fp)
   462c8:	10800044 	addi	r2,r2,1
   462cc:	e0bffd15 	stw	r2,-12(fp)
   462d0:	e0bffd17 	ldw	r2,-12(fp)
   462d4:	10800810 	cmplti	r2,r2,32
   462d8:	103fdc1e 	bne	r2,zero,4624c <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   462dc:	e0bffe17 	ldw	r2,-8(fp)
}
   462e0:	e037883a 	mov	sp,fp
   462e4:	dfc00217 	ldw	ra,8(sp)
   462e8:	df000117 	ldw	fp,4(sp)
   462ec:	dc000017 	ldw	r16,0(sp)
   462f0:	dec00304 	addi	sp,sp,12
   462f4:	f800283a 	ret

000462f8 <atexit>:
   462f8:	200b883a 	mov	r5,r4
   462fc:	000d883a 	mov	r6,zero
   46300:	0009883a 	mov	r4,zero
   46304:	000f883a 	mov	r7,zero
   46308:	00463c01 	jmpi	463c0 <__register_exitproc>

0004630c <exit>:
   4630c:	defffe04 	addi	sp,sp,-8
   46310:	000b883a 	mov	r5,zero
   46314:	dc000015 	stw	r16,0(sp)
   46318:	dfc00115 	stw	ra,4(sp)
   4631c:	2021883a 	mov	r16,r4
   46320:	00464f00 	call	464f0 <__call_exitprocs>
   46324:	00800174 	movhi	r2,5
   46328:	10a06204 	addi	r2,r2,-32376
   4632c:	11000017 	ldw	r4,0(r2)
   46330:	20800f17 	ldw	r2,60(r4)
   46334:	10000126 	beq	r2,zero,4633c <exit+0x30>
   46338:	103ee83a 	callr	r2
   4633c:	8009883a 	mov	r4,r16
   46340:	00466900 	call	46690 <_exit>

00046344 <memcmp>:
   46344:	01c000c4 	movi	r7,3
   46348:	3980192e 	bgeu	r7,r6,463b0 <memcmp+0x6c>
   4634c:	2904b03a 	or	r2,r5,r4
   46350:	11c4703a 	and	r2,r2,r7
   46354:	10000f26 	beq	r2,zero,46394 <memcmp+0x50>
   46358:	20c00003 	ldbu	r3,0(r4)
   4635c:	28800003 	ldbu	r2,0(r5)
   46360:	1880151e 	bne	r3,r2,463b8 <memcmp+0x74>
   46364:	31bfff84 	addi	r6,r6,-2
   46368:	01ffffc4 	movi	r7,-1
   4636c:	00000406 	br	46380 <memcmp+0x3c>
   46370:	20c00003 	ldbu	r3,0(r4)
   46374:	28800003 	ldbu	r2,0(r5)
   46378:	31bfffc4 	addi	r6,r6,-1
   4637c:	18800e1e 	bne	r3,r2,463b8 <memcmp+0x74>
   46380:	21000044 	addi	r4,r4,1
   46384:	29400044 	addi	r5,r5,1
   46388:	31fff91e 	bne	r6,r7,46370 <memcmp+0x2c>
   4638c:	0005883a 	mov	r2,zero
   46390:	f800283a 	ret
   46394:	20c00017 	ldw	r3,0(r4)
   46398:	28800017 	ldw	r2,0(r5)
   4639c:	1880041e 	bne	r3,r2,463b0 <memcmp+0x6c>
   463a0:	31bfff04 	addi	r6,r6,-4
   463a4:	21000104 	addi	r4,r4,4
   463a8:	29400104 	addi	r5,r5,4
   463ac:	39bff936 	bltu	r7,r6,46394 <memcmp+0x50>
   463b0:	303fe91e 	bne	r6,zero,46358 <memcmp+0x14>
   463b4:	003ff506 	br	4638c <memcmp+0x48>
   463b8:	1885c83a 	sub	r2,r3,r2
   463bc:	f800283a 	ret

000463c0 <__register_exitproc>:
   463c0:	defffa04 	addi	sp,sp,-24
   463c4:	00800174 	movhi	r2,5
   463c8:	10a06204 	addi	r2,r2,-32376
   463cc:	dc000315 	stw	r16,12(sp)
   463d0:	14000017 	ldw	r16,0(r2)
   463d4:	dc400415 	stw	r17,16(sp)
   463d8:	dfc00515 	stw	ra,20(sp)
   463dc:	80805217 	ldw	r2,328(r16)
   463e0:	2023883a 	mov	r17,r4
   463e4:	10003e26 	beq	r2,zero,464e0 <__register_exitproc+0x120>
   463e8:	10c00117 	ldw	r3,4(r2)
   463ec:	020007c4 	movi	r8,31
   463f0:	40c0180e 	bge	r8,r3,46454 <__register_exitproc+0x94>
   463f4:	00800134 	movhi	r2,4
   463f8:	1081fb04 	addi	r2,r2,2028
   463fc:	1000061e 	bne	r2,zero,46418 <__register_exitproc+0x58>
   46400:	00bfffc4 	movi	r2,-1
   46404:	dfc00517 	ldw	ra,20(sp)
   46408:	dc400417 	ldw	r17,16(sp)
   4640c:	dc000317 	ldw	r16,12(sp)
   46410:	dec00604 	addi	sp,sp,24
   46414:	f800283a 	ret
   46418:	01006404 	movi	r4,400
   4641c:	d9400015 	stw	r5,0(sp)
   46420:	d9800115 	stw	r6,4(sp)
   46424:	d9c00215 	stw	r7,8(sp)
   46428:	00407ec0 	call	407ec <malloc>
   4642c:	d9400017 	ldw	r5,0(sp)
   46430:	d9800117 	ldw	r6,4(sp)
   46434:	d9c00217 	ldw	r7,8(sp)
   46438:	103ff126 	beq	r2,zero,46400 <__register_exitproc+0x40>
   4643c:	80c05217 	ldw	r3,328(r16)
   46440:	10000115 	stw	zero,4(r2)
   46444:	10c00015 	stw	r3,0(r2)
   46448:	80805215 	stw	r2,328(r16)
   4644c:	10006215 	stw	zero,392(r2)
   46450:	10006315 	stw	zero,396(r2)
   46454:	10c00117 	ldw	r3,4(r2)
   46458:	88000d1e 	bne	r17,zero,46490 <__register_exitproc+0xd0>
   4645c:	19000084 	addi	r4,r3,2
   46460:	2109883a 	add	r4,r4,r4
   46464:	18c00044 	addi	r3,r3,1
   46468:	2109883a 	add	r4,r4,r4
   4646c:	1109883a 	add	r4,r2,r4
   46470:	10c00115 	stw	r3,4(r2)
   46474:	0005883a 	mov	r2,zero
   46478:	21400015 	stw	r5,0(r4)
   4647c:	dfc00517 	ldw	ra,20(sp)
   46480:	dc400417 	ldw	r17,16(sp)
   46484:	dc000317 	ldw	r16,12(sp)
   46488:	dec00604 	addi	sp,sp,24
   4648c:	f800283a 	ret
   46490:	02400044 	movi	r9,1
   46494:	12806217 	ldw	r10,392(r2)
   46498:	48d2983a 	sll	r9,r9,r3
   4649c:	19000804 	addi	r4,r3,32
   464a0:	18d1883a 	add	r8,r3,r3
   464a4:	2109883a 	add	r4,r4,r4
   464a8:	4211883a 	add	r8,r8,r8
   464ac:	2109883a 	add	r4,r4,r4
   464b0:	1109883a 	add	r4,r2,r4
   464b4:	1211883a 	add	r8,r2,r8
   464b8:	5254b03a 	or	r10,r10,r9
   464bc:	21c02215 	stw	r7,136(r4)
   464c0:	41802215 	stw	r6,136(r8)
   464c4:	12806215 	stw	r10,392(r2)
   464c8:	01000084 	movi	r4,2
   464cc:	893fe31e 	bne	r17,r4,4645c <__register_exitproc+0x9c>
   464d0:	11006317 	ldw	r4,396(r2)
   464d4:	2252b03a 	or	r9,r4,r9
   464d8:	12406315 	stw	r9,396(r2)
   464dc:	003fdf06 	br	4645c <__register_exitproc+0x9c>
   464e0:	00800174 	movhi	r2,5
   464e4:	10a78804 	addi	r2,r2,-25056
   464e8:	80805215 	stw	r2,328(r16)
   464ec:	003fbe06 	br	463e8 <__register_exitproc+0x28>

000464f0 <__call_exitprocs>:
   464f0:	00800174 	movhi	r2,5
   464f4:	10a06204 	addi	r2,r2,-32376
   464f8:	10800017 	ldw	r2,0(r2)
   464fc:	defff304 	addi	sp,sp,-52
   46500:	df000b15 	stw	fp,44(sp)
   46504:	d8800015 	stw	r2,0(sp)
   46508:	10805204 	addi	r2,r2,328
   4650c:	dd400815 	stw	r21,32(sp)
   46510:	dfc00c15 	stw	ra,48(sp)
   46514:	ddc00a15 	stw	r23,40(sp)
   46518:	dd800915 	stw	r22,36(sp)
   4651c:	dd000715 	stw	r20,28(sp)
   46520:	dcc00615 	stw	r19,24(sp)
   46524:	dc800515 	stw	r18,20(sp)
   46528:	dc400415 	stw	r17,16(sp)
   4652c:	dc000315 	stw	r16,12(sp)
   46530:	d9000115 	stw	r4,4(sp)
   46534:	2839883a 	mov	fp,r5
   46538:	d8800215 	stw	r2,8(sp)
   4653c:	057fffc4 	movi	r21,-1
   46540:	d8800017 	ldw	r2,0(sp)
   46544:	ddc00217 	ldw	r23,8(sp)
   46548:	14805217 	ldw	r18,328(r2)
   4654c:	90001726 	beq	r18,zero,465ac <__call_exitprocs+0xbc>
   46550:	94400117 	ldw	r17,4(r18)
   46554:	8c3fffc4 	addi	r16,r17,-1
   46558:	80001116 	blt	r16,zero,465a0 <__call_exitprocs+0xb0>
   4655c:	8c400044 	addi	r17,r17,1
   46560:	8427883a 	add	r19,r16,r16
   46564:	8c63883a 	add	r17,r17,r17
   46568:	95802204 	addi	r22,r18,136
   4656c:	9ce7883a 	add	r19,r19,r19
   46570:	8c63883a 	add	r17,r17,r17
   46574:	b4e7883a 	add	r19,r22,r19
   46578:	9463883a 	add	r17,r18,r17
   4657c:	e0001726 	beq	fp,zero,465dc <__call_exitprocs+0xec>
   46580:	8c87c83a 	sub	r3,r17,r18
   46584:	b0c7883a 	add	r3,r22,r3
   46588:	18c01e17 	ldw	r3,120(r3)
   4658c:	1f001326 	beq	r3,fp,465dc <__call_exitprocs+0xec>
   46590:	843fffc4 	addi	r16,r16,-1
   46594:	9cffff04 	addi	r19,r19,-4
   46598:	8c7fff04 	addi	r17,r17,-4
   4659c:	857ff71e 	bne	r16,r21,4657c <__call_exitprocs+0x8c>
   465a0:	00800134 	movhi	r2,4
   465a4:	10820004 	addi	r2,r2,2048
   465a8:	10002a1e 	bne	r2,zero,46654 <__call_exitprocs+0x164>
   465ac:	dfc00c17 	ldw	ra,48(sp)
   465b0:	df000b17 	ldw	fp,44(sp)
   465b4:	ddc00a17 	ldw	r23,40(sp)
   465b8:	dd800917 	ldw	r22,36(sp)
   465bc:	dd400817 	ldw	r21,32(sp)
   465c0:	dd000717 	ldw	r20,28(sp)
   465c4:	dcc00617 	ldw	r19,24(sp)
   465c8:	dc800517 	ldw	r18,20(sp)
   465cc:	dc400417 	ldw	r17,16(sp)
   465d0:	dc000317 	ldw	r16,12(sp)
   465d4:	dec00d04 	addi	sp,sp,52
   465d8:	f800283a 	ret
   465dc:	91000117 	ldw	r4,4(r18)
   465e0:	88c00017 	ldw	r3,0(r17)
   465e4:	213fffc4 	addi	r4,r4,-1
   465e8:	24001526 	beq	r4,r16,46640 <__call_exitprocs+0x150>
   465ec:	88000015 	stw	zero,0(r17)
   465f0:	183fe726 	beq	r3,zero,46590 <__call_exitprocs+0xa0>
   465f4:	00800044 	movi	r2,1
   465f8:	1408983a 	sll	r4,r2,r16
   465fc:	91406217 	ldw	r5,392(r18)
   46600:	95000117 	ldw	r20,4(r18)
   46604:	214a703a 	and	r5,r4,r5
   46608:	28000b26 	beq	r5,zero,46638 <__call_exitprocs+0x148>
   4660c:	91406317 	ldw	r5,396(r18)
   46610:	2148703a 	and	r4,r4,r5
   46614:	20000c1e 	bne	r4,zero,46648 <__call_exitprocs+0x158>
   46618:	99400017 	ldw	r5,0(r19)
   4661c:	d9000117 	ldw	r4,4(sp)
   46620:	183ee83a 	callr	r3
   46624:	90c00117 	ldw	r3,4(r18)
   46628:	1d3fc51e 	bne	r3,r20,46540 <__call_exitprocs+0x50>
   4662c:	b8c00017 	ldw	r3,0(r23)
   46630:	1cbfd726 	beq	r3,r18,46590 <__call_exitprocs+0xa0>
   46634:	003fc206 	br	46540 <__call_exitprocs+0x50>
   46638:	183ee83a 	callr	r3
   4663c:	003ff906 	br	46624 <__call_exitprocs+0x134>
   46640:	94000115 	stw	r16,4(r18)
   46644:	003fea06 	br	465f0 <__call_exitprocs+0x100>
   46648:	99000017 	ldw	r4,0(r19)
   4664c:	183ee83a 	callr	r3
   46650:	003ff406 	br	46624 <__call_exitprocs+0x134>
   46654:	90c00117 	ldw	r3,4(r18)
   46658:	1800071e 	bne	r3,zero,46678 <__call_exitprocs+0x188>
   4665c:	90c00017 	ldw	r3,0(r18)
   46660:	18000926 	beq	r3,zero,46688 <__call_exitprocs+0x198>
   46664:	9009883a 	mov	r4,r18
   46668:	b8c00015 	stw	r3,0(r23)
   4666c:	00408000 	call	40800 <free>
   46670:	bc800017 	ldw	r18,0(r23)
   46674:	003fb506 	br	4654c <__call_exitprocs+0x5c>
   46678:	90c00017 	ldw	r3,0(r18)
   4667c:	902f883a 	mov	r23,r18
   46680:	1825883a 	mov	r18,r3
   46684:	003fb106 	br	4654c <__call_exitprocs+0x5c>
   46688:	0007883a 	mov	r3,zero
   4668c:	003ffb06 	br	4667c <__call_exitprocs+0x18c>

00046690 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   46690:	defffc04 	addi	sp,sp,-16
   46694:	df000315 	stw	fp,12(sp)
   46698:	df000304 	addi	fp,sp,12
   4669c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   466a0:	0001883a 	nop
   466a4:	e0bfff17 	ldw	r2,-4(fp)
   466a8:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
   466ac:	e0bffd17 	ldw	r2,-12(fp)
   466b0:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   466b4:	e0bffe17 	ldw	r2,-8(fp)
   466b8:	10000226 	beq	r2,zero,466c4 <_exit+0x34>
    ALT_SIM_FAIL();
   466bc:	002af070 	cmpltui	zero,zero,43969
   466c0:	00000106 	br	466c8 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   466c4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   466c8:	003fff06 	br	466c8 <_exit+0x38>

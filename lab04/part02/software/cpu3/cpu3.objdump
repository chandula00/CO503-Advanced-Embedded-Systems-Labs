
cpu3.elf:     file format elf32-littlenios2
cpu3.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000401b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x0000e838 memsz 0x0000e838 flags r-x
    LOAD off    0x0000f858 vaddr 0x0004e858 paddr 0x00050334 align 2**12
         filesz 0x00001adc memsz 0x00001adc flags rw-
    LOAD off    0x00011e10 vaddr 0x00051e10 paddr 0x00051e10 align 2**12
         filesz 0x00000000 memsz 0x000002f4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000e2f4  000401b8  000401b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003ac  0004e4ac  0004e4ac  0000f4ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001adc  0004e858  00050334  0000f858  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002f4  00051e10  00051e10  00011e10  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00011334  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000f00  00000000  00000000  00011358  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0002a6c5  00000000  00000000  00012258  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000a663  00000000  00000000  0003c91d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000bd04  00000000  00000000  00046f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001d78  00000000  00000000  00052c84  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000351d  00000000  00000000  000549fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00011d39  00000000  00000000  00057f19  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  00069c54  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a98  00000000  00000000  00069c68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0006deb2  2**0
                  CONTENTS, READONLY
 17 .cpu          00000004  00000000  00000000  0006deb5  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0006deb9  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0006deba  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0006debb  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0006debf  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0006dec3  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000a  00000000  00000000  0006dec7  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000a  00000000  00000000  0006ded1  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000a  00000000  00000000  0006dedb  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000004  00000000  00000000  0006dee5  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000052  00000000  00000000  0006dee9  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00190008  00000000  00000000  0006df3b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
000401b8 l    d  .text	00000000 .text
0004e4ac l    d  .rodata	00000000 .rodata
0004e858 l    d  .rwdata	00000000 .rwdata
00051e10 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../cpu3_bsp//obj/HAL/src/crt0.o
000401f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00040094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 FIFO.c
00000000 l    df *ABS*	00000000 dct.c
0005029c l     O .rwdata	00000002 c2.2798
0005029e l     O .rwdata	00000002 c6.2801
000502a0 l     O .rwdata	00000002 s2.2804
000502a2 l     O .rwdata	00000002 c7.2802
000502a4 l     O .rwdata	00000002 c5.2800
000502a6 l     O .rwdata	00000002 c3.2799
000502a8 l     O .rwdata	00000002 c1.2797
000502aa l     O .rwdata	00000002 s1.2803
000502ac l     O .rwdata	00000002 s3.2805
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
0004e858 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
000428a8 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 vfprintf.c
00042ce8 l     F .text	00000034 __sprint_r
0004e68a l     O .rodata	00000010 blanks.3515
0004e69a l     O .rodata	00000010 zeroes.3516
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
00044e00 l     F .text	0000023c quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00046870 l     F .text	00000008 __fp_lock
00046878 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
0004e6cc l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0004e814 l     O .rodata	0000000c p05.2435
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
0004a2e4 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0004ad54 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0004b064 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0004b180 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0004b1ac l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0004b2ac l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0004b3a0 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0004b48c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0004b668 l     F .text	00000050 alt_get_errno
0004b6b8 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
0004b900 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000502dc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
0004bb74 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_write.c
0004bc48 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0004bd88 l     F .text	00000038 alt_dev_reg
0004f214 l     O .rwdata	00001060 jtag_uart3
00050274 l     O .rwdata	00000028 altera_hostfs
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0004c57c l     F .text	00000204 altera_avalon_jtag_uart_irq
0004c780 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0004cdbc l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_hostfs.c
0005031c l     O .rwdata	00000004 hcinfo.2311
00050310 l     O .rwdata	00000004 hcinfo.2324
00050304 l     O .rwdata	00000004 hcinfo.2333
000502f8 l     O .rwdata	00000004 hcinfo.2346
000502ec l     O .rwdata	00000004 hcinfo.2359
000502e0 l     O .rwdata	00000004 hcinfo.2385
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0004d63c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0004ddc4 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00048b6c g     F .text	00000074 _mprec_log10
00048c5c g     F .text	00000084 __any_on
00047644 g     F .text	00000064 _isatty_r
0004e6fc g     O .rodata	00000028 __mprec_tinytens
0004b5b0 g     F .text	00000078 alt_main
00041638 g     F .text	00000044 __ashldi3
00042810 g     F .text	00000084 _puts_r
00051e74 g     O .bss	00000100 alt_irq
00047784 g     F .text	0000006c _lseek_r
0004c0e8 g     F .text	00000058 altera_avalon_fifo_write_almostfull
00050334 g       *ABS*	00000000 __flash_rwdata_start
00046b5c g     F .text	00000098 __sflags
0004a9d0 g     F .text	0000005c __eqdf2
00052104 g       *ABS*	00000000 __alt_heap_start
00042bf0 g     F .text	0000005c __sseek
00046914 g     F .text	0000010c __sinit
000476a8 g     F .text	0000009c _setlocale_r
0004688c g     F .text	00000078 __sfmoreglue
0004b648 g     F .text	00000020 __malloc_unlock
0004ceb8 g     F .text	0000016c alt_hostfs_open
00047a28 g     F .text	0000018c memmove
0004be68 g     F .text	00000098 altera_avalon_fifo_init
00046904 g     F .text	00000010 _cleanup
0004c198 g     F .text	00000058 altera_avalon_fifo_write_fifo
00047c90 g     F .text	000000a8 _Balloc
0004aa88 g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
00040000 g     F .entry	0000000c __reset
0004bbc4 g     F .text	00000084 times
0004c330 g     F .text	00000028 altera_avalon_fifo_read_backpressure
00040020 g       *ABS*	00000000 __flash_exceptions_start
00041cf8 g     F .text	00000068 _fstat_r
00051e18 g     O .bss	00000004 errno
00051e38 g     O .bss	00000004 alt_argv
0005829c g       *ABS*	00000000 _gp
0004c034 g     F .text	0000005c altera_avalon_fifo_clear_event
0004f094 g     O .rwdata	00000180 alt_fd_list
0004d200 g     F .text	000000b8 alt_hostfs_seek
0004d7e4 g     F .text	00000090 alt_find_dev
000478e8 g     F .text	00000140 memcpy
00042ce0 g     F .text	00000008 _times_r
00046880 g     F .text	0000000c _cleanup_r
0004abac g     F .text	000000d4 __floatsidf
0004d988 g     F .text	00000084 alt_fs_reg
0004dea4 g     F .text	00000078 alt_io_redirect
0004ab50 g     F .text	0000005c __ltdf2
0004e4ac g       *ABS*	00000000 __DTOR_END__
00042894 g     F .text	00000014 puts
00048ac8 g     F .text	000000a4 __ratio
0004c980 g     F .text	00000218 altera_avalon_jtag_uart_read
00041ff8 g     F .text	00000014 malloc
0004ae74 g     F .text	00000008 __udivsi3
0004b2fc g     F .text	000000a4 isatty
0004e74c g     O .rodata	000000c8 __mprec_tens
00047744 g     F .text	0000000c __locale_charset
00051e24 g     O .bss	00000004 __malloc_top_pad
000502c0 g     O .rwdata	00000004 __mb_cur_max
00047750 g     F .text	0000000c _localeconv_r
000480c0 g     F .text	0000003c __i2b
00047000 g     F .text	000004e4 __sfvwrite_r
00042ab0 g     F .text	00000064 _sbrk_r
0004d090 g     F .text	000000b8 alt_hostfs_read
00048ce0 g     F .text	0000006c _read_r
0004f060 g     O .rwdata	0000000c __lc_ctype
000502d4 g     O .rwdata	00000004 alt_max_fd
000414f0 g     F .text	00000104 __unpack_d
0004951c g     F .text	0000013c _fclose_r
00046840 g     F .text	00000030 fflush
00051e20 g     O .bss	00000004 __malloc_max_sbrked_mem
0004a638 g     F .text	00000054 __adddf3
0004883c g     F .text	00000148 __b2d
00049cbc g     F .text	00000628 __umoddi3
0004b4dc g     F .text	000000d4 lseek
000502b0 g     O .rwdata	00000004 _global_impure_ptr
00048d4c g     F .text	000005fc _realloc_r
00052104 g       *ABS*	00000000 __bss_end
0004dcd4 g     F .text	000000f0 alt_iic_isr_register
0004dfb4 g     F .text	00000104 alt_tick
0004966c g     F .text	00000650 __udivdi3
0004e724 g     O .rodata	00000028 __mprec_bigtens
00047ea4 g     F .text	00000104 __s2b
000410dc g     F .text	0000011c __floatunsidf
000485dc g     F .text	00000058 __mcmp
00046b2c g     F .text	00000018 __fp_lock_all
0004dc88 g     F .text	0000004c alt_ic_irq_enabled
000402c0 g     F .text	00000040 FIFO_INIT
0004df1c g     F .text	00000098 alt_alarm_stop
00051e40 g     O .bss	00000004 alt_irq_active
0004d024 g     F .text	0000006c alt_hostfs_close
000400ec g     F .exceptions	000000cc alt_irq_handler
0004f06c g     O .rwdata	00000028 alt_dev_null
0004d620 g     F .text	0000001c alt_dcache_flush_all
00047fa8 g     F .text	00000068 __hi0bits
0004ac80 g     F .text	000000d4 __fixdfsi
0004c090 g     F .text	00000058 altera_avalon_fifo_write_ienable
00050334 g       *ABS*	00000000 __ram_rwdata_end
0004bfa4 g     F .text	0000002c altera_avalon_fifo_read_almostempty
000502cc g     O .rwdata	00000008 alt_dev_list
0004bc98 g     F .text	000000f0 write
0004e858 g       *ABS*	00000000 __ram_rodata_end
0004b1fc g     F .text	000000b0 fstat
0004183c g     F .text	00000024 fprintf
000415f4 g     F .text	00000044 __lshrdi3
00048354 g     F .text	0000012c __pow5mult
00051e30 g     O .bss	00000004 __nlocale_changed
0004ae7c g     F .text	00000008 __umodsi3
00052104 g       *ABS*	00000000 end
00041cd4 g     F .text	00000024 fseek
0004c4bc g     F .text	000000c0 altera_avalon_jtag_uart_init
0004bfd0 g     F .text	0000003c altera_avalon_fifo_read_event
0004e4ac g       *ABS*	00000000 __CTOR_LIST__
00057000 g       *ABS*	00000000 __alt_stack_pointer
0004ce30 g     F .text	00000088 alt_avalon_timer_sc_init
00041220 g     F .text	000000ac __clzsi2
0004cb98 g     F .text	00000224 altera_avalon_jtag_uart_write
00046b1c g     F .text	00000004 __sfp_lock_acquire
0004c25c g     F .text	0000004c altera_avalon_fifo_read_fifo
000477f0 g     F .text	000000f8 memchr
00042d1c g     F .text	00001e7c ___vfprintf_internal_r
00046d30 g     F .text	000002d0 _free_r
0004e2d0 g     F .text	000001a0 __call_exitprocs
00051e2c g     O .bss	00000004 __mlocale_changed
000502b8 g     O .rwdata	00000004 __malloc_sbrk_base
000401b8 g     F .text	0000003c _start
00051e44 g     O .bss	00000004 _alt_tick_rate
00048480 g     F .text	0000015c __lshift
00051e48 g     O .bss	00000004 _alt_nticks
0004b950 g     F .text	000000f4 read
0004bdf4 g     F .text	00000074 alt_sys_init
000427a4 g     F .text	0000006c _open_r
0004e1a0 g     F .text	00000130 __register_exitproc
000480fc g     F .text	00000258 __multiply
0004c824 g     F .text	00000068 altera_avalon_jtag_uart_close
000411f8 g     F .text	00000028 __mulsi3
0004e858 g       *ABS*	00000000 __ram_rwdata_start
0004e4ac g       *ABS*	00000000 __ram_rodata_start
00051e4c g     O .bss	00000028 __malloc_current_mallinfo
00048984 g     F .text	00000144 __d2b
0004c358 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0004da0c g     F .text	000000d4 alt_get_fd
0004af94 g     F .text	000000d0 __fpcmp_parts_d
00044d9c g     F .text	00000064 _close_r
0004e124 g     F .text	0000007c memcmp
0004c418 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00052104 g       *ABS*	00000000 __alt_stack_base
0004c468 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00041d60 g     F .text	000000b0 _fwrite_r
00044c28 g     F .text	00000174 __swsetup_r
0004bf00 g     F .text	0000003c altera_avalon_fifo_read_status
00040f28 g     F .text	000001b4 __divdf3
00046a20 g     F .text	000000fc __sfp
00048be0 g     F .text	0000007c __copybits
0004ec58 g     O .rwdata	00000408 __malloc_av_
00046b28 g     F .text	00000004 __sinit_lock_release
0004a6ec g     F .text	000002e4 __muldf3
00042b14 g     F .text	00000054 __sread
0004c304 g     F .text	0000002c altera_avalon_fifo_read_other_info
0004d874 g     F .text	00000114 alt_find_file
0004d68c g     F .text	000000a0 alt_dev_llist_insert
0004b628 g     F .text	00000020 __malloc_lock
00041814 g     F .text	00000028 _fprintf_r
0004bac4 g     F .text	000000b0 sbrk
00046658 g     F .text	000001e8 _fflush_r
00049450 g     F .text	000000cc _calloc_r
000417f8 g     F .text	0000001c fopen
00051e10 g       *ABS*	00000000 __bss_start
00051e10 g     O .bss	00000004 data
00047bb4 g     F .text	000000dc memset
00040e50 g     F .text	000000d8 main
00051e3c g     O .bss	00000004 alt_envp
00051e1c g     O .bss	00000004 __malloc_max_total_mem
0004c3b8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0004c00c g     F .text	00000028 altera_avalon_fifo_read_level
00042c4c g     F .text	00000008 __sclose
00057000 g       *ABS*	00000000 __alt_heap_limit
00049658 g     F .text	00000014 fclose
00051f74 g     O .bss	00000190 _atexit0
0004503c g     F .text	0000161c _dtoa_r
00042020 g     F .text	00000784 _malloc_r
000502d8 g     O .rwdata	00000004 alt_errno
000474e4 g     F .text	000000a8 _fwalk
0004adc8 g     F .text	00000050 __divsi3
0004e52c g     O .rodata	00000014 __thenan_df
00046bf4 g     F .text	0000013c _malloc_trim_r
0004e4ac g       *ABS*	00000000 __CTOR_END__
000493ac g     F .text	000000a4 strcmp
0004e4ac g       *ABS*	00000000 __flash_rodata_start
0004e4ac g       *ABS*	00000000 __DTOR_LIST__
00040300 g     F .text	00000040 delay
0004aa2c g     F .text	0000005c __nedf2
00040340 g     F .text	00000b10 DCT
0004bdc0 g     F .text	00000034 alt_irq_init
0004ba44 g     F .text	00000080 alt_release_fd
0004e540 g     O .rodata	00000100 __clz_tab
00051e28 g     O .bss	00000004 _PathLocale
0004e0d8 g     F .text	00000014 atexit
00044bbc g     F .text	0000006c _write_r
0004775c g     F .text	0000001c setlocale
000502b4 g     O .rwdata	00000004 _impure_ptr
00051e34 g     O .bss	00000004 alt_argc
0004d788 g     F .text	0000005c _do_dtors
00041860 g     F .text	00000474 _fseek_r
00040258 g     F .text	00000068 READ_FIFO
000428c4 g     F .text	000001ec __srefill_r
00040020 g       .exceptions	00000000 alt_irq_entry
000487dc g     F .text	00000060 __ulp
00049348 g     F .text	00000038 __isinfd
00046b44 g     F .text	00000018 __fp_unlock_all
000502c4 g     O .rwdata	00000008 alt_fs_list
00040000 g       *ABS*	00000000 __alt_mem_mem3
0004d148 g     F .text	000000b8 alt_hostfs_write
00040020 g       *ABS*	00000000 __ram_exceptions_start
00047778 g     F .text	0000000c localeconv
0004c2a8 g     F .text	0000005c altera_avalon_fifo_write_other_info
0004dafc g     F .text	00000050 alt_ic_isr_register
00041e10 g     F .text	00000040 fwrite
00050334 g       *ABS*	00000000 _edata
00052104 g       *ABS*	00000000 _end
000401b8 g       *ABS*	00000000 __ram_exceptions_end
0004c88c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0004dbe8 g     F .text	000000a0 alt_ic_irq_disable
00042b68 g     F .text	00000088 __swrite
000502bc g     O .rwdata	00000004 __malloc_trim_threshold
0004e0b8 g     F .text	00000020 altera_nios2_qsys_irq_init
0004e0ec g     F .text	00000038 exit
0004758c g     F .text	000000b8 _fwalk_reent
00048634 g     F .text	000001a8 __mdiff
0004ae18 g     F .text	0000005c __modsi3
0004bf3c g     F .text	0000003c altera_avalon_fifo_read_ienable
00057000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
00046b20 g     F .text	00000004 __sfp_lock_release
000416c8 g     F .text	00000130 _fopen_r
0004e470 g     F .text	0000003c _exit
00049380 g     F .text	0000002c __isnand
0004d4e0 g     F .text	00000140 alt_alarm_start
0004ae84 g     F .text	00000110 __muldi3
0004bf78 g     F .text	0000002c altera_avalon_fifo_read_almostfull
00041e50 g     F .text	000001a8 __smakebuf_r
00042c54 g     F .text	0000008c strlen
0004b7a8 g     F .text	00000158 open
0004c1f0 g     F .text	0000006c altera_avalon_read_fifo
0004aaec g     F .text	00000064 __gedf2
0004167c g     F .text	0000004c clock
0004dae0 g     F .text	0000001c alt_icache_flush_all
000401f4 g     F .text	00000064 WRITE_FIFO
00050328 g     O .rwdata	00000004 alt_priority_mask
0004db4c g     F .text	0000009c alt_ic_irq_enable
00044b98 g     F .text	00000024 __vfprintf_internal
0004a68c g     F .text	00000060 __subdf3
00048010 g     F .text	000000b0 __lo0bits
0004c140 g     F .text	00000058 altera_avalon_fifo_write_almostempty
0005032c g     O .rwdata	00000008 alt_alarm_list
0004d72c g     F .text	0000005c _do_ctors
00051e14 g     O .bss	00000004 log_file
0004b0b4 g     F .text	000000cc close
0004b40c g     F .text	00000080 alt_load
000412cc g     F .text	00000224 __pack_d
0004200c g     F .text	00000014 free
00046b24 g     F .text	00000004 __sinit_lock_acquire
00047d60 g     F .text	00000144 __multadd
00047d38 g     F .text	00000028 _Bfree
0004d2b8 g     F .text	00000228 alt_hostfs_fstat



Disassembly of section .entry:

00040000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40000:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40004:	08406e14 	ori	at,at,440
    jmp r1
   40008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400ec0 	call	400ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000306 	br	40098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   4008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)

00040094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   40094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   40098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   4009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400e8:	ef80083a 	eret

000400ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400ec:	defff904 	addi	sp,sp,-28
   400f0:	dfc00615 	stw	ra,24(sp)
   400f4:	df000515 	stw	fp,20(sp)
   400f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   400fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40100:	0005313a 	rdctl	r2,ipending
   40104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40114:	00800044 	movi	r2,1
   40118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4011c:	e0fffb17 	ldw	r3,-20(fp)
   40120:	e0bffc17 	ldw	r2,-16(fp)
   40124:	1884703a 	and	r2,r3,r2
   40128:	10001726 	beq	r2,zero,40188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4012c:	00c00174 	movhi	r3,5
   40130:	18c79d04 	addi	r3,r3,7796
   40134:	e0bffd17 	ldw	r2,-12(fp)
   40138:	100490fa 	slli	r2,r2,3
   4013c:	1885883a 	add	r2,r3,r2
   40140:	10c00017 	ldw	r3,0(r2)
   40144:	01000174 	movhi	r4,5
   40148:	21079d04 	addi	r4,r4,7796
   4014c:	e0bffd17 	ldw	r2,-12(fp)
   40150:	100490fa 	slli	r2,r2,3
   40154:	2085883a 	add	r2,r4,r2
   40158:	10800104 	addi	r2,r2,4
   4015c:	10800017 	ldw	r2,0(r2)
   40160:	1009883a 	mov	r4,r2
   40164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4016c:	0005313a 	rdctl	r2,ipending
   40170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   40178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   4017c:	e0bffb17 	ldw	r2,-20(fp)
   40180:	103fe31e 	bne	r2,zero,40110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   40184:	00000706 	br	401a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   40188:	e0bffc17 	ldw	r2,-16(fp)
   4018c:	1085883a 	add	r2,r2,r2
   40190:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40194:	e0bffd17 	ldw	r2,-12(fp)
   40198:	10800044 	addi	r2,r2,1
   4019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a0:	003fde06 	br	4011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   401a4:	e037883a 	mov	sp,fp
   401a8:	dfc00117 	ldw	ra,4(sp)
   401ac:	df000017 	ldw	fp,0(sp)
   401b0:	dec00204 	addi	sp,sp,8
   401b4:	f800283a 	ret

Disassembly of section .text:

000401b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   401b8:	06c00174 	movhi	sp,5
    ori sp, sp, %lo(__alt_stack_pointer)
   401bc:	dedc0014 	ori	sp,sp,28672
    movhi gp, %hi(_gp)
   401c0:	06800174 	movhi	gp,5
    ori gp, gp, %lo(_gp)
   401c4:	d6a0a714 	ori	gp,gp,33436
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   401c8:	00800174 	movhi	r2,5
    ori r2, r2, %lo(__bss_start)
   401cc:	10878414 	ori	r2,r2,7696

    movhi r3, %hi(__bss_end)
   401d0:	00c00174 	movhi	r3,5
    ori r3, r3, %lo(__bss_end)
   401d4:	18c84114 	ori	r3,r3,8452

    beq r2, r3, 1f
   401d8:	10c00326 	beq	r2,r3,401e8 <_start+0x30>

0:
    stw zero, (r2)
   401dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   401e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   401e4:	10fffd36 	bltu	r2,r3,401dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   401e8:	004b40c0 	call	4b40c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   401ec:	004b5b00 	call	4b5b0 <alt_main>

000401f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   401f0:	003fff06 	br	401f0 <alt_after_alt_main>

000401f4 <WRITE_FIFO>:
 */

#include "FIFO.h"

void WRITE_FIFO(int *buffer, int inBase, int controllBase)
{
   401f4:	defffb04 	addi	sp,sp,-20
   401f8:	dfc00415 	stw	ra,16(sp)
   401fc:	df000315 	stw	fp,12(sp)
   40200:	df000304 	addi	fp,sp,12
   40204:	e13ffd15 	stw	r4,-12(fp)
   40208:	e17ffe15 	stw	r5,-8(fp)
   4020c:	e1bfff15 	stw	r6,-4(fp)
	// printf("Writing to FIFO : %d\n", altera_avalon_fifo_read_level(controllBase));

	// Check if FIFO is full before writing
	while (altera_avalon_fifo_read_level(controllBase) == ALMOST_FULL)
   40210:	0001883a 	nop
   40214:	e0bfff17 	ldw	r2,-4(fp)
   40218:	1009883a 	mov	r4,r2
   4021c:	004c00c0 	call	4c00c <altera_avalon_fifo_read_level>
   40220:	10800220 	cmpeqi	r2,r2,8
   40224:	103ffb1e 	bne	r2,zero,40214 <WRITE_FIFO+0x20>
	{
	}

	// Write data to FIFO
	altera_avalon_fifo_write_fifo(inBase, controllBase, *buffer);
   40228:	e13ffe17 	ldw	r4,-8(fp)
   4022c:	e0ffff17 	ldw	r3,-4(fp)
   40230:	e0bffd17 	ldw	r2,-12(fp)
   40234:	10800017 	ldw	r2,0(r2)
   40238:	180b883a 	mov	r5,r3
   4023c:	100d883a 	mov	r6,r2
   40240:	004c1980 	call	4c198 <altera_avalon_fifo_write_fifo>
}
   40244:	e037883a 	mov	sp,fp
   40248:	dfc00117 	ldw	ra,4(sp)
   4024c:	df000017 	ldw	fp,0(sp)
   40250:	dec00204 	addi	sp,sp,8
   40254:	f800283a 	ret

00040258 <READ_FIFO>:

int READ_FIFO(int *buffer, int outBase, int controllBase)
{
   40258:	defffb04 	addi	sp,sp,-20
   4025c:	dfc00415 	stw	ra,16(sp)
   40260:	df000315 	stw	fp,12(sp)
   40264:	df000304 	addi	fp,sp,12
   40268:	e13ffd15 	stw	r4,-12(fp)
   4026c:	e17ffe15 	stw	r5,-8(fp)
   40270:	e1bfff15 	stw	r6,-4(fp)
	// Wait if the FIFO is empty
	// while (altera_avalon_fifo_read_status(FIFO_MEM_IN_CSR_BASE, ALTERA_AVALON_FIFO_STATUS_EMPTY))
	// 	;

	while (altera_avalon_fifo_read_level(controllBase) == ALMOST_EMTY)
   40274:	0001883a 	nop
   40278:	e0bfff17 	ldw	r2,-4(fp)
   4027c:	1009883a 	mov	r4,r2
   40280:	004c00c0 	call	4c00c <altera_avalon_fifo_read_level>
   40284:	103ffc26 	beq	r2,zero,40278 <READ_FIFO+0x20>
	{
	}

	// Read the data
	*buffer = altera_avalon_fifo_read_fifo(outBase, controllBase);
   40288:	e0fffe17 	ldw	r3,-8(fp)
   4028c:	e0bfff17 	ldw	r2,-4(fp)
   40290:	1809883a 	mov	r4,r3
   40294:	100b883a 	mov	r5,r2
   40298:	004c25c0 	call	4c25c <altera_avalon_fifo_read_fifo>
   4029c:	e0fffd17 	ldw	r3,-12(fp)
   402a0:	18800015 	stw	r2,0(r3)

	return *buffer;
   402a4:	e0bffd17 	ldw	r2,-12(fp)
   402a8:	10800017 	ldw	r2,0(r2)
}
   402ac:	e037883a 	mov	sp,fp
   402b0:	dfc00117 	ldw	ra,4(sp)
   402b4:	df000017 	ldw	fp,0(sp)
   402b8:	dec00204 	addi	sp,sp,8
   402bc:	f800283a 	ret

000402c0 <FIFO_INIT>:

// Initialization
void FIFO_INIT(int controllBase)
{
   402c0:	defffd04 	addi	sp,sp,-12
   402c4:	dfc00215 	stw	ra,8(sp)
   402c8:	df000115 	stw	fp,4(sp)
   402cc:	df000104 	addi	fp,sp,4
   402d0:	e13fff15 	stw	r4,-4(fp)
	altera_avalon_fifo_init(controllBase,
   402d4:	e0bfff17 	ldw	r2,-4(fp)
   402d8:	1009883a 	mov	r4,r2
   402dc:	000b883a 	mov	r5,zero
   402e0:	000d883a 	mov	r6,zero
   402e4:	01c00204 	movi	r7,8
   402e8:	004be680 	call	4be68 <altera_avalon_fifo_init>
							0,
							ALMOST_EMTY,  // Almost empty threshold
							ALMOST_FULL); // Almost full threshold
   402ec:	e037883a 	mov	sp,fp
   402f0:	dfc00117 	ldw	ra,4(sp)
   402f4:	df000017 	ldw	fp,0(sp)
   402f8:	dec00204 	addi	sp,sp,8
   402fc:	f800283a 	ret

00040300 <delay>:
#include <time.h>

FILE *log_file;

void delay(int n)
{
   40300:	defffd04 	addi	sp,sp,-12
   40304:	df000215 	stw	fp,8(sp)
   40308:	df000204 	addi	fp,sp,8
   4030c:	e13fff15 	stw	r4,-4(fp)
	int i;
	for (i = n; i > 0; i--)
   40310:	e0bfff17 	ldw	r2,-4(fp)
   40314:	e0bffe15 	stw	r2,-8(fp)
   40318:	00000306 	br	40328 <delay+0x28>
   4031c:	e0bffe17 	ldw	r2,-8(fp)
   40320:	10bfffc4 	addi	r2,r2,-1
   40324:	e0bffe15 	stw	r2,-8(fp)
   40328:	e0bffe17 	ldw	r2,-8(fp)
   4032c:	00bffb16 	blt	zero,r2,4031c <delay+0x1c>
	{
		continue;
	}
}
   40330:	e037883a 	mov	sp,fp
   40334:	df000017 	ldw	fp,0(sp)
   40338:	dec00104 	addi	sp,sp,4
   4033c:	f800283a 	ret

00040340 <DCT>:

INT16 *data;

/* DCT for One block(8x8) */
void DCT(void)
{
   40340:	deffef04 	addi	sp,sp,-68
   40344:	dfc01015 	stw	ra,64(sp)
   40348:	df000f15 	stw	fp,60(sp)
   4034c:	dc400e15 	stw	r17,56(sp)
   40350:	dc000d15 	stw	r16,52(sp)
   40354:	df000d04 	addi	fp,sp,52
	static const UINT16 s1 = 3;
	static const UINT16 s2 = 10;
	static const UINT16 s3 = 13;

	/* read back from queue */
	for (i = 0; i < 64; i++)
   40358:	e03ff30d 	sth	zero,-52(fp)
   4035c:	00001006 	br	403a0 <DCT+0x60>
	{
		READ_FIFO(&temp, OUT_BASE_2to3, CONTROL_BASE_2to3);
   40360:	e0bfff04 	addi	r2,fp,-4
   40364:	1009883a 	mov	r4,r2
   40368:	014000b4 	movhi	r5,2
   4036c:	29441b04 	addi	r5,r5,4204
   40370:	018000b4 	movhi	r6,2
   40374:	31840004 	addi	r6,r6,4096
   40378:	00402580 	call	40258 <READ_FIFO>
		data[i] = temp; // Casting data
   4037c:	d0e6dd17 	ldw	r3,-25740(gp)
   40380:	e0bff30b 	ldhu	r2,-52(fp)
   40384:	1085883a 	add	r2,r2,r2
   40388:	1885883a 	add	r2,r3,r2
   4038c:	e0ffff17 	ldw	r3,-4(fp)
   40390:	10c0000d 	sth	r3,0(r2)
	static const UINT16 s1 = 3;
	static const UINT16 s2 = 10;
	static const UINT16 s3 = 13;

	/* read back from queue */
	for (i = 0; i < 64; i++)
   40394:	e0bff30b 	ldhu	r2,-52(fp)
   40398:	10800044 	addi	r2,r2,1
   4039c:	e0bff30d 	sth	r2,-52(fp)
   403a0:	e0bff30b 	ldhu	r2,-52(fp)
   403a4:	10801030 	cmpltui	r2,r2,64
   403a8:	103fed1e 	bne	r2,zero,40360 <DCT+0x20>
	// 	printf("%4d ", data[i]);
	// 	if ((i + 1) % 8 == 0)
	// 		printf("\n");
	// }

	start_time = clock();
   403ac:	004167c0 	call	4167c <clock>
   403b0:	e0bff415 	stw	r2,-48(fp)

	for (i = 8; i > 0; i--)
   403b4:	00800204 	movi	r2,8
   403b8:	e0bff30d 	sth	r2,-52(fp)
   403bc:	00012d06 	br	40874 <DCT+0x534>
	{
		x8 = data[0] + data[7];
   403c0:	d0a6dd17 	ldw	r2,-25740(gp)
   403c4:	1080000b 	ldhu	r2,0(r2)
   403c8:	10ffffcc 	andi	r3,r2,65535
   403cc:	18e0001c 	xori	r3,r3,32768
   403d0:	18e00004 	addi	r3,r3,-32768
   403d4:	d0a6dd17 	ldw	r2,-25740(gp)
   403d8:	10800384 	addi	r2,r2,14
   403dc:	1080000b 	ldhu	r2,0(r2)
   403e0:	10bfffcc 	andi	r2,r2,65535
   403e4:	10a0001c 	xori	r2,r2,32768
   403e8:	10a00004 	addi	r2,r2,-32768
   403ec:	1885883a 	add	r2,r3,r2
   403f0:	e0bff515 	stw	r2,-44(fp)
		x0 = data[0] - data[7];
   403f4:	d0a6dd17 	ldw	r2,-25740(gp)
   403f8:	1080000b 	ldhu	r2,0(r2)
   403fc:	10ffffcc 	andi	r3,r2,65535
   40400:	18e0001c 	xori	r3,r3,32768
   40404:	18e00004 	addi	r3,r3,-32768
   40408:	d0a6dd17 	ldw	r2,-25740(gp)
   4040c:	10800384 	addi	r2,r2,14
   40410:	1080000b 	ldhu	r2,0(r2)
   40414:	10bfffcc 	andi	r2,r2,65535
   40418:	10a0001c 	xori	r2,r2,32768
   4041c:	10a00004 	addi	r2,r2,-32768
   40420:	1885c83a 	sub	r2,r3,r2
   40424:	e0bff615 	stw	r2,-40(fp)

		x7 = data[1] + data[6];
   40428:	d0a6dd17 	ldw	r2,-25740(gp)
   4042c:	10800084 	addi	r2,r2,2
   40430:	1080000b 	ldhu	r2,0(r2)
   40434:	10ffffcc 	andi	r3,r2,65535
   40438:	18e0001c 	xori	r3,r3,32768
   4043c:	18e00004 	addi	r3,r3,-32768
   40440:	d0a6dd17 	ldw	r2,-25740(gp)
   40444:	10800304 	addi	r2,r2,12
   40448:	1080000b 	ldhu	r2,0(r2)
   4044c:	10bfffcc 	andi	r2,r2,65535
   40450:	10a0001c 	xori	r2,r2,32768
   40454:	10a00004 	addi	r2,r2,-32768
   40458:	1885883a 	add	r2,r3,r2
   4045c:	e0bff715 	stw	r2,-36(fp)
		x1 = data[1] - data[6];
   40460:	d0a6dd17 	ldw	r2,-25740(gp)
   40464:	10800084 	addi	r2,r2,2
   40468:	1080000b 	ldhu	r2,0(r2)
   4046c:	10ffffcc 	andi	r3,r2,65535
   40470:	18e0001c 	xori	r3,r3,32768
   40474:	18e00004 	addi	r3,r3,-32768
   40478:	d0a6dd17 	ldw	r2,-25740(gp)
   4047c:	10800304 	addi	r2,r2,12
   40480:	1080000b 	ldhu	r2,0(r2)
   40484:	10bfffcc 	andi	r2,r2,65535
   40488:	10a0001c 	xori	r2,r2,32768
   4048c:	10a00004 	addi	r2,r2,-32768
   40490:	1885c83a 	sub	r2,r3,r2
   40494:	e0bff815 	stw	r2,-32(fp)

		x6 = data[2] + data[5];
   40498:	d0a6dd17 	ldw	r2,-25740(gp)
   4049c:	10800104 	addi	r2,r2,4
   404a0:	1080000b 	ldhu	r2,0(r2)
   404a4:	10ffffcc 	andi	r3,r2,65535
   404a8:	18e0001c 	xori	r3,r3,32768
   404ac:	18e00004 	addi	r3,r3,-32768
   404b0:	d0a6dd17 	ldw	r2,-25740(gp)
   404b4:	10800284 	addi	r2,r2,10
   404b8:	1080000b 	ldhu	r2,0(r2)
   404bc:	10bfffcc 	andi	r2,r2,65535
   404c0:	10a0001c 	xori	r2,r2,32768
   404c4:	10a00004 	addi	r2,r2,-32768
   404c8:	1885883a 	add	r2,r3,r2
   404cc:	e0bff915 	stw	r2,-28(fp)
		x2 = data[2] - data[5];
   404d0:	d0a6dd17 	ldw	r2,-25740(gp)
   404d4:	10800104 	addi	r2,r2,4
   404d8:	1080000b 	ldhu	r2,0(r2)
   404dc:	10ffffcc 	andi	r3,r2,65535
   404e0:	18e0001c 	xori	r3,r3,32768
   404e4:	18e00004 	addi	r3,r3,-32768
   404e8:	d0a6dd17 	ldw	r2,-25740(gp)
   404ec:	10800284 	addi	r2,r2,10
   404f0:	1080000b 	ldhu	r2,0(r2)
   404f4:	10bfffcc 	andi	r2,r2,65535
   404f8:	10a0001c 	xori	r2,r2,32768
   404fc:	10a00004 	addi	r2,r2,-32768
   40500:	1885c83a 	sub	r2,r3,r2
   40504:	e0bffa15 	stw	r2,-24(fp)

		x5 = data[3] + data[4];
   40508:	d0a6dd17 	ldw	r2,-25740(gp)
   4050c:	10800184 	addi	r2,r2,6
   40510:	1080000b 	ldhu	r2,0(r2)
   40514:	10ffffcc 	andi	r3,r2,65535
   40518:	18e0001c 	xori	r3,r3,32768
   4051c:	18e00004 	addi	r3,r3,-32768
   40520:	d0a6dd17 	ldw	r2,-25740(gp)
   40524:	10800204 	addi	r2,r2,8
   40528:	1080000b 	ldhu	r2,0(r2)
   4052c:	10bfffcc 	andi	r2,r2,65535
   40530:	10a0001c 	xori	r2,r2,32768
   40534:	10a00004 	addi	r2,r2,-32768
   40538:	1885883a 	add	r2,r3,r2
   4053c:	e0bffb15 	stw	r2,-20(fp)
		x3 = data[3] - data[4];
   40540:	d0a6dd17 	ldw	r2,-25740(gp)
   40544:	10800184 	addi	r2,r2,6
   40548:	1080000b 	ldhu	r2,0(r2)
   4054c:	10ffffcc 	andi	r3,r2,65535
   40550:	18e0001c 	xori	r3,r3,32768
   40554:	18e00004 	addi	r3,r3,-32768
   40558:	d0a6dd17 	ldw	r2,-25740(gp)
   4055c:	10800204 	addi	r2,r2,8
   40560:	1080000b 	ldhu	r2,0(r2)
   40564:	10bfffcc 	andi	r2,r2,65535
   40568:	10a0001c 	xori	r2,r2,32768
   4056c:	10a00004 	addi	r2,r2,-32768
   40570:	1885c83a 	sub	r2,r3,r2
   40574:	e0bffc15 	stw	r2,-16(fp)

		x4 = x8 + x5;
   40578:	e0fff517 	ldw	r3,-44(fp)
   4057c:	e0bffb17 	ldw	r2,-20(fp)
   40580:	1885883a 	add	r2,r3,r2
   40584:	e0bffd15 	stw	r2,-12(fp)
		x8 -= x5;
   40588:	e0fff517 	ldw	r3,-44(fp)
   4058c:	e0bffb17 	ldw	r2,-20(fp)
   40590:	1885c83a 	sub	r2,r3,r2
   40594:	e0bff515 	stw	r2,-44(fp)

		x5 = x7 + x6;
   40598:	e0fff717 	ldw	r3,-36(fp)
   4059c:	e0bff917 	ldw	r2,-28(fp)
   405a0:	1885883a 	add	r2,r3,r2
   405a4:	e0bffb15 	stw	r2,-20(fp)
		x7 -= x6;
   405a8:	e0fff717 	ldw	r3,-36(fp)
   405ac:	e0bff917 	ldw	r2,-28(fp)
   405b0:	1885c83a 	sub	r2,r3,r2
   405b4:	e0bff715 	stw	r2,-36(fp)

		data[0] = (INT16)(x4 + x5);
   405b8:	d0a6dd17 	ldw	r2,-25740(gp)
   405bc:	e0fffd17 	ldw	r3,-12(fp)
   405c0:	1809883a 	mov	r4,r3
   405c4:	e0fffb17 	ldw	r3,-20(fp)
   405c8:	20c7883a 	add	r3,r4,r3
   405cc:	10c0000d 	sth	r3,0(r2)
		data[4] = (INT16)(x4 - x5);
   405d0:	d0a6dd17 	ldw	r2,-25740(gp)
   405d4:	10800204 	addi	r2,r2,8
   405d8:	e0fffd17 	ldw	r3,-12(fp)
   405dc:	1809883a 	mov	r4,r3
   405e0:	e0fffb17 	ldw	r3,-20(fp)
   405e4:	20c7c83a 	sub	r3,r4,r3
   405e8:	10c0000d 	sth	r3,0(r2)

		data[2] = (INT16)((x8 * c2 + x7 * c6) >> s2);
   405ec:	d0a6dd17 	ldw	r2,-25740(gp)
   405f0:	14000104 	addi	r16,r2,4
   405f4:	d0a0000b 	ldhu	r2,-32768(gp)
   405f8:	10bfffcc 	andi	r2,r2,65535
   405fc:	1009883a 	mov	r4,r2
   40600:	e17ff517 	ldw	r5,-44(fp)
   40604:	00411f80 	call	411f8 <__mulsi3>
   40608:	1023883a 	mov	r17,r2
   4060c:	d0a0008b 	ldhu	r2,-32766(gp)
   40610:	10bfffcc 	andi	r2,r2,65535
   40614:	1009883a 	mov	r4,r2
   40618:	e17ff717 	ldw	r5,-36(fp)
   4061c:	00411f80 	call	411f8 <__mulsi3>
   40620:	8887883a 	add	r3,r17,r2
   40624:	d0a0010b 	ldhu	r2,-32764(gp)
   40628:	10bfffcc 	andi	r2,r2,65535
   4062c:	1885d83a 	sra	r2,r3,r2
   40630:	8080000d 	sth	r2,0(r16)
		data[6] = (INT16)((x8 * c6 - x7 * c2) >> s2);
   40634:	d0a6dd17 	ldw	r2,-25740(gp)
   40638:	14000304 	addi	r16,r2,12
   4063c:	d0a0008b 	ldhu	r2,-32766(gp)
   40640:	10bfffcc 	andi	r2,r2,65535
   40644:	1009883a 	mov	r4,r2
   40648:	e17ff517 	ldw	r5,-44(fp)
   4064c:	00411f80 	call	411f8 <__mulsi3>
   40650:	1023883a 	mov	r17,r2
   40654:	d0a0000b 	ldhu	r2,-32768(gp)
   40658:	10bfffcc 	andi	r2,r2,65535
   4065c:	1009883a 	mov	r4,r2
   40660:	e17ff717 	ldw	r5,-36(fp)
   40664:	00411f80 	call	411f8 <__mulsi3>
   40668:	8887c83a 	sub	r3,r17,r2
   4066c:	d0a0010b 	ldhu	r2,-32764(gp)
   40670:	10bfffcc 	andi	r2,r2,65535
   40674:	1885d83a 	sra	r2,r3,r2
   40678:	8080000d 	sth	r2,0(r16)

		data[7] = (INT16)((x0 * c7 - x1 * c5 + x2 * c3 - x3 * c1) >> s2);
   4067c:	d0a6dd17 	ldw	r2,-25740(gp)
   40680:	14000384 	addi	r16,r2,14
   40684:	d0a0018b 	ldhu	r2,-32762(gp)
   40688:	10bfffcc 	andi	r2,r2,65535
   4068c:	1009883a 	mov	r4,r2
   40690:	e17ff617 	ldw	r5,-40(fp)
   40694:	00411f80 	call	411f8 <__mulsi3>
   40698:	1023883a 	mov	r17,r2
   4069c:	d0a0020b 	ldhu	r2,-32760(gp)
   406a0:	10bfffcc 	andi	r2,r2,65535
   406a4:	1009883a 	mov	r4,r2
   406a8:	e17ff817 	ldw	r5,-32(fp)
   406ac:	00411f80 	call	411f8 <__mulsi3>
   406b0:	88a3c83a 	sub	r17,r17,r2
   406b4:	d0a0028b 	ldhu	r2,-32758(gp)
   406b8:	10bfffcc 	andi	r2,r2,65535
   406bc:	1009883a 	mov	r4,r2
   406c0:	e17ffa17 	ldw	r5,-24(fp)
   406c4:	00411f80 	call	411f8 <__mulsi3>
   406c8:	88a3883a 	add	r17,r17,r2
   406cc:	d0a0030b 	ldhu	r2,-32756(gp)
   406d0:	10bfffcc 	andi	r2,r2,65535
   406d4:	1009883a 	mov	r4,r2
   406d8:	e17ffc17 	ldw	r5,-16(fp)
   406dc:	00411f80 	call	411f8 <__mulsi3>
   406e0:	8887c83a 	sub	r3,r17,r2
   406e4:	d0a0010b 	ldhu	r2,-32764(gp)
   406e8:	10bfffcc 	andi	r2,r2,65535
   406ec:	1885d83a 	sra	r2,r3,r2
   406f0:	8080000d 	sth	r2,0(r16)
		data[5] = (INT16)((x0 * c5 - x1 * c1 + x2 * c7 + x3 * c3) >> s2);
   406f4:	d0a6dd17 	ldw	r2,-25740(gp)
   406f8:	14000284 	addi	r16,r2,10
   406fc:	d0a0020b 	ldhu	r2,-32760(gp)
   40700:	10bfffcc 	andi	r2,r2,65535
   40704:	1009883a 	mov	r4,r2
   40708:	e17ff617 	ldw	r5,-40(fp)
   4070c:	00411f80 	call	411f8 <__mulsi3>
   40710:	1023883a 	mov	r17,r2
   40714:	d0a0030b 	ldhu	r2,-32756(gp)
   40718:	10bfffcc 	andi	r2,r2,65535
   4071c:	1009883a 	mov	r4,r2
   40720:	e17ff817 	ldw	r5,-32(fp)
   40724:	00411f80 	call	411f8 <__mulsi3>
   40728:	88a3c83a 	sub	r17,r17,r2
   4072c:	d0a0018b 	ldhu	r2,-32762(gp)
   40730:	10bfffcc 	andi	r2,r2,65535
   40734:	1009883a 	mov	r4,r2
   40738:	e17ffa17 	ldw	r5,-24(fp)
   4073c:	00411f80 	call	411f8 <__mulsi3>
   40740:	88a3883a 	add	r17,r17,r2
   40744:	d0a0028b 	ldhu	r2,-32758(gp)
   40748:	10bfffcc 	andi	r2,r2,65535
   4074c:	1009883a 	mov	r4,r2
   40750:	e17ffc17 	ldw	r5,-16(fp)
   40754:	00411f80 	call	411f8 <__mulsi3>
   40758:	8887883a 	add	r3,r17,r2
   4075c:	d0a0010b 	ldhu	r2,-32764(gp)
   40760:	10bfffcc 	andi	r2,r2,65535
   40764:	1885d83a 	sra	r2,r3,r2
   40768:	8080000d 	sth	r2,0(r16)
		data[3] = (INT16)((x0 * c3 - x1 * c7 - x2 * c1 - x3 * c5) >> s2);
   4076c:	d0a6dd17 	ldw	r2,-25740(gp)
   40770:	14000184 	addi	r16,r2,6
   40774:	d0a0028b 	ldhu	r2,-32758(gp)
   40778:	10bfffcc 	andi	r2,r2,65535
   4077c:	1009883a 	mov	r4,r2
   40780:	e17ff617 	ldw	r5,-40(fp)
   40784:	00411f80 	call	411f8 <__mulsi3>
   40788:	1023883a 	mov	r17,r2
   4078c:	d0a0018b 	ldhu	r2,-32762(gp)
   40790:	10bfffcc 	andi	r2,r2,65535
   40794:	1009883a 	mov	r4,r2
   40798:	e17ff817 	ldw	r5,-32(fp)
   4079c:	00411f80 	call	411f8 <__mulsi3>
   407a0:	88a3c83a 	sub	r17,r17,r2
   407a4:	d0a0030b 	ldhu	r2,-32756(gp)
   407a8:	10bfffcc 	andi	r2,r2,65535
   407ac:	1009883a 	mov	r4,r2
   407b0:	e17ffa17 	ldw	r5,-24(fp)
   407b4:	00411f80 	call	411f8 <__mulsi3>
   407b8:	88a3c83a 	sub	r17,r17,r2
   407bc:	d0a0020b 	ldhu	r2,-32760(gp)
   407c0:	10bfffcc 	andi	r2,r2,65535
   407c4:	1009883a 	mov	r4,r2
   407c8:	e17ffc17 	ldw	r5,-16(fp)
   407cc:	00411f80 	call	411f8 <__mulsi3>
   407d0:	8887c83a 	sub	r3,r17,r2
   407d4:	d0a0010b 	ldhu	r2,-32764(gp)
   407d8:	10bfffcc 	andi	r2,r2,65535
   407dc:	1885d83a 	sra	r2,r3,r2
   407e0:	8080000d 	sth	r2,0(r16)
		data[1] = (INT16)((x0 * c1 + x1 * c3 + x2 * c5 + x3 * c7) >> s2);
   407e4:	d0a6dd17 	ldw	r2,-25740(gp)
   407e8:	14000084 	addi	r16,r2,2
   407ec:	d0a0030b 	ldhu	r2,-32756(gp)
   407f0:	10bfffcc 	andi	r2,r2,65535
   407f4:	1009883a 	mov	r4,r2
   407f8:	e17ff617 	ldw	r5,-40(fp)
   407fc:	00411f80 	call	411f8 <__mulsi3>
   40800:	1023883a 	mov	r17,r2
   40804:	d0a0028b 	ldhu	r2,-32758(gp)
   40808:	10bfffcc 	andi	r2,r2,65535
   4080c:	1009883a 	mov	r4,r2
   40810:	e17ff817 	ldw	r5,-32(fp)
   40814:	00411f80 	call	411f8 <__mulsi3>
   40818:	88a3883a 	add	r17,r17,r2
   4081c:	d0a0020b 	ldhu	r2,-32760(gp)
   40820:	10bfffcc 	andi	r2,r2,65535
   40824:	1009883a 	mov	r4,r2
   40828:	e17ffa17 	ldw	r5,-24(fp)
   4082c:	00411f80 	call	411f8 <__mulsi3>
   40830:	88a3883a 	add	r17,r17,r2
   40834:	d0a0018b 	ldhu	r2,-32762(gp)
   40838:	10bfffcc 	andi	r2,r2,65535
   4083c:	1009883a 	mov	r4,r2
   40840:	e17ffc17 	ldw	r5,-16(fp)
   40844:	00411f80 	call	411f8 <__mulsi3>
   40848:	8887883a 	add	r3,r17,r2
   4084c:	d0a0010b 	ldhu	r2,-32764(gp)
   40850:	10bfffcc 	andi	r2,r2,65535
   40854:	1885d83a 	sra	r2,r3,r2
   40858:	8080000d 	sth	r2,0(r16)

		data += 8;
   4085c:	d0a6dd17 	ldw	r2,-25740(gp)
   40860:	10800404 	addi	r2,r2,16
   40864:	d0a6dd15 	stw	r2,-25740(gp)
	// 		printf("\n");
	// }

	start_time = clock();

	for (i = 8; i > 0; i--)
   40868:	e0bff30b 	ldhu	r2,-52(fp)
   4086c:	10bfffc4 	addi	r2,r2,-1
   40870:	e0bff30d 	sth	r2,-52(fp)
   40874:	e0bff30b 	ldhu	r2,-52(fp)
   40878:	103ed11e 	bne	r2,zero,403c0 <DCT+0x80>
		data[1] = (INT16)((x0 * c1 + x1 * c3 + x2 * c5 + x3 * c7) >> s2);

		data += 8;
	}

	data -= 64;
   4087c:	d0a6dd17 	ldw	r2,-25740(gp)
   40880:	10bfe004 	addi	r2,r2,-128
   40884:	d0a6dd15 	stw	r2,-25740(gp)

	for (i = 8; i > 0; i--)
   40888:	00800204 	movi	r2,8
   4088c:	e0bff30d 	sth	r2,-52(fp)
   40890:	00013106 	br	40d58 <DCT+0xa18>
	{
		x8 = data[0] + data[56];
   40894:	d0a6dd17 	ldw	r2,-25740(gp)
   40898:	1080000b 	ldhu	r2,0(r2)
   4089c:	10ffffcc 	andi	r3,r2,65535
   408a0:	18e0001c 	xori	r3,r3,32768
   408a4:	18e00004 	addi	r3,r3,-32768
   408a8:	d0a6dd17 	ldw	r2,-25740(gp)
   408ac:	10801c04 	addi	r2,r2,112
   408b0:	1080000b 	ldhu	r2,0(r2)
   408b4:	10bfffcc 	andi	r2,r2,65535
   408b8:	10a0001c 	xori	r2,r2,32768
   408bc:	10a00004 	addi	r2,r2,-32768
   408c0:	1885883a 	add	r2,r3,r2
   408c4:	e0bff515 	stw	r2,-44(fp)
		x0 = data[0] - data[56];
   408c8:	d0a6dd17 	ldw	r2,-25740(gp)
   408cc:	1080000b 	ldhu	r2,0(r2)
   408d0:	10ffffcc 	andi	r3,r2,65535
   408d4:	18e0001c 	xori	r3,r3,32768
   408d8:	18e00004 	addi	r3,r3,-32768
   408dc:	d0a6dd17 	ldw	r2,-25740(gp)
   408e0:	10801c04 	addi	r2,r2,112
   408e4:	1080000b 	ldhu	r2,0(r2)
   408e8:	10bfffcc 	andi	r2,r2,65535
   408ec:	10a0001c 	xori	r2,r2,32768
   408f0:	10a00004 	addi	r2,r2,-32768
   408f4:	1885c83a 	sub	r2,r3,r2
   408f8:	e0bff615 	stw	r2,-40(fp)

		x7 = data[8] + data[48];
   408fc:	d0a6dd17 	ldw	r2,-25740(gp)
   40900:	10800404 	addi	r2,r2,16
   40904:	1080000b 	ldhu	r2,0(r2)
   40908:	10ffffcc 	andi	r3,r2,65535
   4090c:	18e0001c 	xori	r3,r3,32768
   40910:	18e00004 	addi	r3,r3,-32768
   40914:	d0a6dd17 	ldw	r2,-25740(gp)
   40918:	10801804 	addi	r2,r2,96
   4091c:	1080000b 	ldhu	r2,0(r2)
   40920:	10bfffcc 	andi	r2,r2,65535
   40924:	10a0001c 	xori	r2,r2,32768
   40928:	10a00004 	addi	r2,r2,-32768
   4092c:	1885883a 	add	r2,r3,r2
   40930:	e0bff715 	stw	r2,-36(fp)
		x1 = data[8] - data[48];
   40934:	d0a6dd17 	ldw	r2,-25740(gp)
   40938:	10800404 	addi	r2,r2,16
   4093c:	1080000b 	ldhu	r2,0(r2)
   40940:	10ffffcc 	andi	r3,r2,65535
   40944:	18e0001c 	xori	r3,r3,32768
   40948:	18e00004 	addi	r3,r3,-32768
   4094c:	d0a6dd17 	ldw	r2,-25740(gp)
   40950:	10801804 	addi	r2,r2,96
   40954:	1080000b 	ldhu	r2,0(r2)
   40958:	10bfffcc 	andi	r2,r2,65535
   4095c:	10a0001c 	xori	r2,r2,32768
   40960:	10a00004 	addi	r2,r2,-32768
   40964:	1885c83a 	sub	r2,r3,r2
   40968:	e0bff815 	stw	r2,-32(fp)

		x6 = data[16] + data[40];
   4096c:	d0a6dd17 	ldw	r2,-25740(gp)
   40970:	10800804 	addi	r2,r2,32
   40974:	1080000b 	ldhu	r2,0(r2)
   40978:	10ffffcc 	andi	r3,r2,65535
   4097c:	18e0001c 	xori	r3,r3,32768
   40980:	18e00004 	addi	r3,r3,-32768
   40984:	d0a6dd17 	ldw	r2,-25740(gp)
   40988:	10801404 	addi	r2,r2,80
   4098c:	1080000b 	ldhu	r2,0(r2)
   40990:	10bfffcc 	andi	r2,r2,65535
   40994:	10a0001c 	xori	r2,r2,32768
   40998:	10a00004 	addi	r2,r2,-32768
   4099c:	1885883a 	add	r2,r3,r2
   409a0:	e0bff915 	stw	r2,-28(fp)
		x2 = data[16] - data[40];
   409a4:	d0a6dd17 	ldw	r2,-25740(gp)
   409a8:	10800804 	addi	r2,r2,32
   409ac:	1080000b 	ldhu	r2,0(r2)
   409b0:	10ffffcc 	andi	r3,r2,65535
   409b4:	18e0001c 	xori	r3,r3,32768
   409b8:	18e00004 	addi	r3,r3,-32768
   409bc:	d0a6dd17 	ldw	r2,-25740(gp)
   409c0:	10801404 	addi	r2,r2,80
   409c4:	1080000b 	ldhu	r2,0(r2)
   409c8:	10bfffcc 	andi	r2,r2,65535
   409cc:	10a0001c 	xori	r2,r2,32768
   409d0:	10a00004 	addi	r2,r2,-32768
   409d4:	1885c83a 	sub	r2,r3,r2
   409d8:	e0bffa15 	stw	r2,-24(fp)

		x5 = data[24] + data[32];
   409dc:	d0a6dd17 	ldw	r2,-25740(gp)
   409e0:	10800c04 	addi	r2,r2,48
   409e4:	1080000b 	ldhu	r2,0(r2)
   409e8:	10ffffcc 	andi	r3,r2,65535
   409ec:	18e0001c 	xori	r3,r3,32768
   409f0:	18e00004 	addi	r3,r3,-32768
   409f4:	d0a6dd17 	ldw	r2,-25740(gp)
   409f8:	10801004 	addi	r2,r2,64
   409fc:	1080000b 	ldhu	r2,0(r2)
   40a00:	10bfffcc 	andi	r2,r2,65535
   40a04:	10a0001c 	xori	r2,r2,32768
   40a08:	10a00004 	addi	r2,r2,-32768
   40a0c:	1885883a 	add	r2,r3,r2
   40a10:	e0bffb15 	stw	r2,-20(fp)
		x3 = data[24] - data[32];
   40a14:	d0a6dd17 	ldw	r2,-25740(gp)
   40a18:	10800c04 	addi	r2,r2,48
   40a1c:	1080000b 	ldhu	r2,0(r2)
   40a20:	10ffffcc 	andi	r3,r2,65535
   40a24:	18e0001c 	xori	r3,r3,32768
   40a28:	18e00004 	addi	r3,r3,-32768
   40a2c:	d0a6dd17 	ldw	r2,-25740(gp)
   40a30:	10801004 	addi	r2,r2,64
   40a34:	1080000b 	ldhu	r2,0(r2)
   40a38:	10bfffcc 	andi	r2,r2,65535
   40a3c:	10a0001c 	xori	r2,r2,32768
   40a40:	10a00004 	addi	r2,r2,-32768
   40a44:	1885c83a 	sub	r2,r3,r2
   40a48:	e0bffc15 	stw	r2,-16(fp)

		x4 = x8 + x5;
   40a4c:	e0fff517 	ldw	r3,-44(fp)
   40a50:	e0bffb17 	ldw	r2,-20(fp)
   40a54:	1885883a 	add	r2,r3,r2
   40a58:	e0bffd15 	stw	r2,-12(fp)
		x8 -= x5;
   40a5c:	e0fff517 	ldw	r3,-44(fp)
   40a60:	e0bffb17 	ldw	r2,-20(fp)
   40a64:	1885c83a 	sub	r2,r3,r2
   40a68:	e0bff515 	stw	r2,-44(fp)

		x5 = x7 + x6;
   40a6c:	e0fff717 	ldw	r3,-36(fp)
   40a70:	e0bff917 	ldw	r2,-28(fp)
   40a74:	1885883a 	add	r2,r3,r2
   40a78:	e0bffb15 	stw	r2,-20(fp)
		x7 -= x6;
   40a7c:	e0fff717 	ldw	r3,-36(fp)
   40a80:	e0bff917 	ldw	r2,-28(fp)
   40a84:	1885c83a 	sub	r2,r3,r2
   40a88:	e0bff715 	stw	r2,-36(fp)

		data[0] = (INT16)((x4 + x5) >> s1);
   40a8c:	d0a6dd17 	ldw	r2,-25740(gp)
   40a90:	e13ffd17 	ldw	r4,-12(fp)
   40a94:	e0fffb17 	ldw	r3,-20(fp)
   40a98:	20c9883a 	add	r4,r4,r3
   40a9c:	d0e0038b 	ldhu	r3,-32754(gp)
   40aa0:	18ffffcc 	andi	r3,r3,65535
   40aa4:	20c7d83a 	sra	r3,r4,r3
   40aa8:	10c0000d 	sth	r3,0(r2)
		data[32] = (INT16)((x4 - x5) >> s1);
   40aac:	d0a6dd17 	ldw	r2,-25740(gp)
   40ab0:	10801004 	addi	r2,r2,64
   40ab4:	e13ffd17 	ldw	r4,-12(fp)
   40ab8:	e0fffb17 	ldw	r3,-20(fp)
   40abc:	20c9c83a 	sub	r4,r4,r3
   40ac0:	d0e0038b 	ldhu	r3,-32754(gp)
   40ac4:	18ffffcc 	andi	r3,r3,65535
   40ac8:	20c7d83a 	sra	r3,r4,r3
   40acc:	10c0000d 	sth	r3,0(r2)

		data[16] = (INT16)((x8 * c2 + x7 * c6) >> s3);
   40ad0:	d0a6dd17 	ldw	r2,-25740(gp)
   40ad4:	14000804 	addi	r16,r2,32
   40ad8:	d0a0000b 	ldhu	r2,-32768(gp)
   40adc:	10bfffcc 	andi	r2,r2,65535
   40ae0:	1009883a 	mov	r4,r2
   40ae4:	e17ff517 	ldw	r5,-44(fp)
   40ae8:	00411f80 	call	411f8 <__mulsi3>
   40aec:	1023883a 	mov	r17,r2
   40af0:	d0a0008b 	ldhu	r2,-32766(gp)
   40af4:	10bfffcc 	andi	r2,r2,65535
   40af8:	1009883a 	mov	r4,r2
   40afc:	e17ff717 	ldw	r5,-36(fp)
   40b00:	00411f80 	call	411f8 <__mulsi3>
   40b04:	8887883a 	add	r3,r17,r2
   40b08:	d0a0040b 	ldhu	r2,-32752(gp)
   40b0c:	10bfffcc 	andi	r2,r2,65535
   40b10:	1885d83a 	sra	r2,r3,r2
   40b14:	8080000d 	sth	r2,0(r16)
		data[48] = (INT16)((x8 * c6 - x7 * c2) >> s3);
   40b18:	d0a6dd17 	ldw	r2,-25740(gp)
   40b1c:	14001804 	addi	r16,r2,96
   40b20:	d0a0008b 	ldhu	r2,-32766(gp)
   40b24:	10bfffcc 	andi	r2,r2,65535
   40b28:	1009883a 	mov	r4,r2
   40b2c:	e17ff517 	ldw	r5,-44(fp)
   40b30:	00411f80 	call	411f8 <__mulsi3>
   40b34:	1023883a 	mov	r17,r2
   40b38:	d0a0000b 	ldhu	r2,-32768(gp)
   40b3c:	10bfffcc 	andi	r2,r2,65535
   40b40:	1009883a 	mov	r4,r2
   40b44:	e17ff717 	ldw	r5,-36(fp)
   40b48:	00411f80 	call	411f8 <__mulsi3>
   40b4c:	8887c83a 	sub	r3,r17,r2
   40b50:	d0a0040b 	ldhu	r2,-32752(gp)
   40b54:	10bfffcc 	andi	r2,r2,65535
   40b58:	1885d83a 	sra	r2,r3,r2
   40b5c:	8080000d 	sth	r2,0(r16)

		data[56] = (INT16)((x0 * c7 - x1 * c5 + x2 * c3 - x3 * c1) >> s3);
   40b60:	d0a6dd17 	ldw	r2,-25740(gp)
   40b64:	14001c04 	addi	r16,r2,112
   40b68:	d0a0018b 	ldhu	r2,-32762(gp)
   40b6c:	10bfffcc 	andi	r2,r2,65535
   40b70:	1009883a 	mov	r4,r2
   40b74:	e17ff617 	ldw	r5,-40(fp)
   40b78:	00411f80 	call	411f8 <__mulsi3>
   40b7c:	1023883a 	mov	r17,r2
   40b80:	d0a0020b 	ldhu	r2,-32760(gp)
   40b84:	10bfffcc 	andi	r2,r2,65535
   40b88:	1009883a 	mov	r4,r2
   40b8c:	e17ff817 	ldw	r5,-32(fp)
   40b90:	00411f80 	call	411f8 <__mulsi3>
   40b94:	88a3c83a 	sub	r17,r17,r2
   40b98:	d0a0028b 	ldhu	r2,-32758(gp)
   40b9c:	10bfffcc 	andi	r2,r2,65535
   40ba0:	1009883a 	mov	r4,r2
   40ba4:	e17ffa17 	ldw	r5,-24(fp)
   40ba8:	00411f80 	call	411f8 <__mulsi3>
   40bac:	88a3883a 	add	r17,r17,r2
   40bb0:	d0a0030b 	ldhu	r2,-32756(gp)
   40bb4:	10bfffcc 	andi	r2,r2,65535
   40bb8:	1009883a 	mov	r4,r2
   40bbc:	e17ffc17 	ldw	r5,-16(fp)
   40bc0:	00411f80 	call	411f8 <__mulsi3>
   40bc4:	8887c83a 	sub	r3,r17,r2
   40bc8:	d0a0040b 	ldhu	r2,-32752(gp)
   40bcc:	10bfffcc 	andi	r2,r2,65535
   40bd0:	1885d83a 	sra	r2,r3,r2
   40bd4:	8080000d 	sth	r2,0(r16)
		data[40] = (INT16)((x0 * c5 - x1 * c1 + x2 * c7 + x3 * c3) >> s3);
   40bd8:	d0a6dd17 	ldw	r2,-25740(gp)
   40bdc:	14001404 	addi	r16,r2,80
   40be0:	d0a0020b 	ldhu	r2,-32760(gp)
   40be4:	10bfffcc 	andi	r2,r2,65535
   40be8:	1009883a 	mov	r4,r2
   40bec:	e17ff617 	ldw	r5,-40(fp)
   40bf0:	00411f80 	call	411f8 <__mulsi3>
   40bf4:	1023883a 	mov	r17,r2
   40bf8:	d0a0030b 	ldhu	r2,-32756(gp)
   40bfc:	10bfffcc 	andi	r2,r2,65535
   40c00:	1009883a 	mov	r4,r2
   40c04:	e17ff817 	ldw	r5,-32(fp)
   40c08:	00411f80 	call	411f8 <__mulsi3>
   40c0c:	88a3c83a 	sub	r17,r17,r2
   40c10:	d0a0018b 	ldhu	r2,-32762(gp)
   40c14:	10bfffcc 	andi	r2,r2,65535
   40c18:	1009883a 	mov	r4,r2
   40c1c:	e17ffa17 	ldw	r5,-24(fp)
   40c20:	00411f80 	call	411f8 <__mulsi3>
   40c24:	88a3883a 	add	r17,r17,r2
   40c28:	d0a0028b 	ldhu	r2,-32758(gp)
   40c2c:	10bfffcc 	andi	r2,r2,65535
   40c30:	1009883a 	mov	r4,r2
   40c34:	e17ffc17 	ldw	r5,-16(fp)
   40c38:	00411f80 	call	411f8 <__mulsi3>
   40c3c:	8887883a 	add	r3,r17,r2
   40c40:	d0a0040b 	ldhu	r2,-32752(gp)
   40c44:	10bfffcc 	andi	r2,r2,65535
   40c48:	1885d83a 	sra	r2,r3,r2
   40c4c:	8080000d 	sth	r2,0(r16)
		data[24] = (INT16)((x0 * c3 - x1 * c7 - x2 * c1 - x3 * c5) >> s3);
   40c50:	d0a6dd17 	ldw	r2,-25740(gp)
   40c54:	14000c04 	addi	r16,r2,48
   40c58:	d0a0028b 	ldhu	r2,-32758(gp)
   40c5c:	10bfffcc 	andi	r2,r2,65535
   40c60:	1009883a 	mov	r4,r2
   40c64:	e17ff617 	ldw	r5,-40(fp)
   40c68:	00411f80 	call	411f8 <__mulsi3>
   40c6c:	1023883a 	mov	r17,r2
   40c70:	d0a0018b 	ldhu	r2,-32762(gp)
   40c74:	10bfffcc 	andi	r2,r2,65535
   40c78:	1009883a 	mov	r4,r2
   40c7c:	e17ff817 	ldw	r5,-32(fp)
   40c80:	00411f80 	call	411f8 <__mulsi3>
   40c84:	88a3c83a 	sub	r17,r17,r2
   40c88:	d0a0030b 	ldhu	r2,-32756(gp)
   40c8c:	10bfffcc 	andi	r2,r2,65535
   40c90:	1009883a 	mov	r4,r2
   40c94:	e17ffa17 	ldw	r5,-24(fp)
   40c98:	00411f80 	call	411f8 <__mulsi3>
   40c9c:	88a3c83a 	sub	r17,r17,r2
   40ca0:	d0a0020b 	ldhu	r2,-32760(gp)
   40ca4:	10bfffcc 	andi	r2,r2,65535
   40ca8:	1009883a 	mov	r4,r2
   40cac:	e17ffc17 	ldw	r5,-16(fp)
   40cb0:	00411f80 	call	411f8 <__mulsi3>
   40cb4:	8887c83a 	sub	r3,r17,r2
   40cb8:	d0a0040b 	ldhu	r2,-32752(gp)
   40cbc:	10bfffcc 	andi	r2,r2,65535
   40cc0:	1885d83a 	sra	r2,r3,r2
   40cc4:	8080000d 	sth	r2,0(r16)
		data[8] = (INT16)((x0 * c1 + x1 * c3 + x2 * c5 + x3 * c7) >> s3);
   40cc8:	d0a6dd17 	ldw	r2,-25740(gp)
   40ccc:	14000404 	addi	r16,r2,16
   40cd0:	d0a0030b 	ldhu	r2,-32756(gp)
   40cd4:	10bfffcc 	andi	r2,r2,65535
   40cd8:	1009883a 	mov	r4,r2
   40cdc:	e17ff617 	ldw	r5,-40(fp)
   40ce0:	00411f80 	call	411f8 <__mulsi3>
   40ce4:	1023883a 	mov	r17,r2
   40ce8:	d0a0028b 	ldhu	r2,-32758(gp)
   40cec:	10bfffcc 	andi	r2,r2,65535
   40cf0:	1009883a 	mov	r4,r2
   40cf4:	e17ff817 	ldw	r5,-32(fp)
   40cf8:	00411f80 	call	411f8 <__mulsi3>
   40cfc:	88a3883a 	add	r17,r17,r2
   40d00:	d0a0020b 	ldhu	r2,-32760(gp)
   40d04:	10bfffcc 	andi	r2,r2,65535
   40d08:	1009883a 	mov	r4,r2
   40d0c:	e17ffa17 	ldw	r5,-24(fp)
   40d10:	00411f80 	call	411f8 <__mulsi3>
   40d14:	88a3883a 	add	r17,r17,r2
   40d18:	d0a0018b 	ldhu	r2,-32762(gp)
   40d1c:	10bfffcc 	andi	r2,r2,65535
   40d20:	1009883a 	mov	r4,r2
   40d24:	e17ffc17 	ldw	r5,-16(fp)
   40d28:	00411f80 	call	411f8 <__mulsi3>
   40d2c:	8887883a 	add	r3,r17,r2
   40d30:	d0a0040b 	ldhu	r2,-32752(gp)
   40d34:	10bfffcc 	andi	r2,r2,65535
   40d38:	1885d83a 	sra	r2,r3,r2
   40d3c:	8080000d 	sth	r2,0(r16)

		data++;
   40d40:	d0a6dd17 	ldw	r2,-25740(gp)
   40d44:	10800084 	addi	r2,r2,2
   40d48:	d0a6dd15 	stw	r2,-25740(gp)
		data += 8;
	}

	data -= 64;

	for (i = 8; i > 0; i--)
   40d4c:	e0bff30b 	ldhu	r2,-52(fp)
   40d50:	10bfffc4 	addi	r2,r2,-1
   40d54:	e0bff30d 	sth	r2,-52(fp)
   40d58:	e0bff30b 	ldhu	r2,-52(fp)
   40d5c:	103ecd1e 	bne	r2,zero,40894 <DCT+0x554>
		data[8] = (INT16)((x0 * c1 + x1 * c3 + x2 * c5 + x3 * c7) >> s3);

		data++;
	}

	data -= 8;
   40d60:	d0a6dd17 	ldw	r2,-25740(gp)
   40d64:	10bffc04 	addi	r2,r2,-16
   40d68:	d0a6dd15 	stw	r2,-25740(gp)
	// 	printf("%4d ", data[i]);
	// 	if ((i + 1) % 8 == 0)
	// 		printf("\n");
	// }

	end_time = clock();
   40d6c:	004167c0 	call	4167c <clock>
   40d70:	e0bffe15 	stw	r2,-8(fp)
	fprintf(log_file, "Time taken for DCT encoding: %f\n", (double)(end_time - start_time) / CLOCKS_PER_SEC);
   40d74:	d426de17 	ldw	r16,-25736(gp)
   40d78:	e0fffe17 	ldw	r3,-8(fp)
   40d7c:	e0bff417 	ldw	r2,-48(fp)
   40d80:	1885c83a 	sub	r2,r3,r2
   40d84:	1009883a 	mov	r4,r2
   40d88:	00410dc0 	call	410dc <__floatunsidf>
   40d8c:	100b883a 	mov	r5,r2
   40d90:	180d883a 	mov	r6,r3
   40d94:	2809883a 	mov	r4,r5
   40d98:	300b883a 	mov	r5,r6
   40d9c:	000d883a 	mov	r6,zero
   40da0:	01d023f4 	movhi	r7,16527
   40da4:	39d00004 	addi	r7,r7,16384
   40da8:	0040f280 	call	40f28 <__divdf3>
   40dac:	1009883a 	mov	r4,r2
   40db0:	180b883a 	mov	r5,r3
   40db4:	2005883a 	mov	r2,r4
   40db8:	2807883a 	mov	r3,r5
   40dbc:	8009883a 	mov	r4,r16
   40dc0:	01400174 	movhi	r5,5
   40dc4:	29792b04 	addi	r5,r5,-6996
   40dc8:	100d883a 	mov	r6,r2
   40dcc:	180f883a 	mov	r7,r3
   40dd0:	004183c0 	call	4183c <fprintf>

	/* write out to queue */
	for (i = 0; i < 64; i++)
   40dd4:	e03ff30d 	sth	zero,-52(fp)
   40dd8:	00001306 	br	40e28 <DCT+0xae8>
	{
		temp = data[i];
   40ddc:	d0e6dd17 	ldw	r3,-25740(gp)
   40de0:	e0bff30b 	ldhu	r2,-52(fp)
   40de4:	1085883a 	add	r2,r2,r2
   40de8:	1885883a 	add	r2,r3,r2
   40dec:	1080000b 	ldhu	r2,0(r2)
   40df0:	10bfffcc 	andi	r2,r2,65535
   40df4:	10a0001c 	xori	r2,r2,32768
   40df8:	10a00004 	addi	r2,r2,-32768
   40dfc:	e0bfff15 	stw	r2,-4(fp)
		WRITE_FIFO(&temp, IN_BASE_3to4, CONTROL_BASE_3to4); // Casting data
   40e00:	e0bfff04 	addi	r2,fp,-4
   40e04:	1009883a 	mov	r4,r2
   40e08:	014000b4 	movhi	r5,2
   40e0c:	29441a04 	addi	r5,r5,4200
   40e10:	018000b4 	movhi	r6,2
   40e14:	31840804 	addi	r6,r6,4128
   40e18:	00401f40 	call	401f4 <WRITE_FIFO>

	end_time = clock();
	fprintf(log_file, "Time taken for DCT encoding: %f\n", (double)(end_time - start_time) / CLOCKS_PER_SEC);

	/* write out to queue */
	for (i = 0; i < 64; i++)
   40e1c:	e0bff30b 	ldhu	r2,-52(fp)
   40e20:	10800044 	addi	r2,r2,1
   40e24:	e0bff30d 	sth	r2,-52(fp)
   40e28:	e0bff30b 	ldhu	r2,-52(fp)
   40e2c:	10801030 	cmpltui	r2,r2,64
   40e30:	103fea1e 	bne	r2,zero,40ddc <DCT+0xa9c>
	{
		temp = data[i];
		WRITE_FIFO(&temp, IN_BASE_3to4, CONTROL_BASE_3to4); // Casting data
	}
}
   40e34:	e037883a 	mov	sp,fp
   40e38:	dfc00317 	ldw	ra,12(sp)
   40e3c:	df000217 	ldw	fp,8(sp)
   40e40:	dc400117 	ldw	r17,4(sp)
   40e44:	dc000017 	ldw	r16,0(sp)
   40e48:	dec00404 	addi	sp,sp,16
   40e4c:	f800283a 	ret

00040e50 <main>:

int main(void)
{
   40e50:	defffe04 	addi	sp,sp,-8
   40e54:	dfc00115 	stw	ra,4(sp)
   40e58:	df000015 	stw	fp,0(sp)
   40e5c:	d839883a 	mov	fp,sp
	printf("Starting CPU3\n");
   40e60:	01000174 	movhi	r4,5
   40e64:	21393404 	addi	r4,r4,-6960
   40e68:	00428940 	call	42894 <puts>

	log_file = fopen("/mnt/host/files/log.txt", "w");
   40e6c:	01000174 	movhi	r4,5
   40e70:	21393804 	addi	r4,r4,-6944
   40e74:	01400174 	movhi	r5,5
   40e78:	29793e04 	addi	r5,r5,-6920
   40e7c:	00417f80 	call	417f8 <fopen>
   40e80:	d0a6de15 	stw	r2,-25736(gp)
	if (log_file == NULL)
   40e84:	d0a6de17 	ldw	r2,-25736(gp)
   40e88:	10000c1e 	bne	r2,zero,40ebc <main+0x6c>
	{
		fprintf(stderr, "Error opening log file\n");
   40e8c:	00800174 	movhi	r2,5
   40e90:	1080ad04 	addi	r2,r2,692
   40e94:	10800017 	ldw	r2,0(r2)
   40e98:	10800317 	ldw	r2,12(r2)
   40e9c:	01000174 	movhi	r4,5
   40ea0:	21393f04 	addi	r4,r4,-6916
   40ea4:	01400044 	movi	r5,1
   40ea8:	018005c4 	movi	r6,23
   40eac:	100f883a 	mov	r7,r2
   40eb0:	0041e100 	call	41e10 <fwrite>
		return 1;
   40eb4:	00800044 	movi	r2,1
   40eb8:	00001606 	br	40f14 <main+0xc4>
	}

	/* Initialize FIFO */
	delay(100000);
   40ebc:	010000b4 	movhi	r4,2
   40ec0:	2121a804 	addi	r4,r4,-31072
   40ec4:	00403000 	call	40300 <delay>
	FIFO_INIT(CONTROL_BASE_3to4);
   40ec8:	010000b4 	movhi	r4,2
   40ecc:	21040804 	addi	r4,r4,4128
   40ed0:	00402c00 	call	402c0 <FIFO_INIT>
	delay(100000);
   40ed4:	010000b4 	movhi	r4,2
   40ed8:	2121a804 	addi	r4,r4,-31072
   40edc:	00403000 	call	40300 <delay>

	data = (INT16 *)malloc(sizeof(INT16) * 64);
   40ee0:	01002004 	movi	r4,128
   40ee4:	0041ff80 	call	41ff8 <malloc>
   40ee8:	d0a6dd15 	stw	r2,-25740(gp)

	while (1)
	{
		printf("DCT Started\n");
   40eec:	01000174 	movhi	r4,5
   40ef0:	21394504 	addi	r4,r4,-6892
   40ef4:	00428940 	call	42894 <puts>

		DCT();
   40ef8:	00403400 	call	40340 <DCT>
		DCT();
   40efc:	00403400 	call	40340 <DCT>
		DCT();
   40f00:	00403400 	call	40340 <DCT>

		printf("DCT Done\n");
   40f04:	01000174 	movhi	r4,5
   40f08:	21394804 	addi	r4,r4,-6880
   40f0c:	00428940 	call	42894 <puts>
	}
   40f10:	003ff606 	br	40eec <main+0x9c>

	free(data);

	return 0;
}
   40f14:	e037883a 	mov	sp,fp
   40f18:	dfc00117 	ldw	ra,4(sp)
   40f1c:	df000017 	ldw	fp,0(sp)
   40f20:	dec00204 	addi	sp,sp,8
   40f24:	f800283a 	ret

00040f28 <__divdf3>:
   40f28:	defff104 	addi	sp,sp,-60
   40f2c:	d9000c15 	stw	r4,48(sp)
   40f30:	d9400d15 	stw	r5,52(sp)
   40f34:	d9000c04 	addi	r4,sp,48
   40f38:	d9400504 	addi	r5,sp,20
   40f3c:	dfc00e15 	stw	ra,56(sp)
   40f40:	d9800a15 	stw	r6,40(sp)
   40f44:	d9c00b15 	stw	r7,44(sp)
   40f48:	00414f00 	call	414f0 <__unpack_d>
   40f4c:	d9000a04 	addi	r4,sp,40
   40f50:	d80b883a 	mov	r5,sp
   40f54:	00414f00 	call	414f0 <__unpack_d>
   40f58:	d8c00517 	ldw	r3,20(sp)
   40f5c:	00800044 	movi	r2,1
   40f60:	10c00536 	bltu	r2,r3,40f78 <__divdf3+0x50>
   40f64:	d9000504 	addi	r4,sp,20
   40f68:	00412cc0 	call	412cc <__pack_d>
   40f6c:	dfc00e17 	ldw	ra,56(sp)
   40f70:	dec00f04 	addi	sp,sp,60
   40f74:	f800283a 	ret
   40f78:	d9000017 	ldw	r4,0(sp)
   40f7c:	11000536 	bltu	r2,r4,40f94 <__divdf3+0x6c>
   40f80:	d809883a 	mov	r4,sp
   40f84:	00412cc0 	call	412cc <__pack_d>
   40f88:	dfc00e17 	ldw	ra,56(sp)
   40f8c:	dec00f04 	addi	sp,sp,60
   40f90:	f800283a 	ret
   40f94:	d9800617 	ldw	r6,24(sp)
   40f98:	d9400117 	ldw	r5,4(sp)
   40f9c:	00800104 	movi	r2,4
   40fa0:	314af03a 	xor	r5,r6,r5
   40fa4:	d9400615 	stw	r5,24(sp)
   40fa8:	18800226 	beq	r3,r2,40fb4 <__divdf3+0x8c>
   40fac:	01400084 	movi	r5,2
   40fb0:	1940041e 	bne	r3,r5,40fc4 <__divdf3+0x9c>
   40fb4:	193feb1e 	bne	r3,r4,40f64 <__divdf3+0x3c>
   40fb8:	01000174 	movhi	r4,5
   40fbc:	21394b04 	addi	r4,r4,-6868
   40fc0:	003fe906 	br	40f68 <__divdf3+0x40>
   40fc4:	20803326 	beq	r4,r2,41094 <__divdf3+0x16c>
   40fc8:	21403726 	beq	r4,r5,410a8 <__divdf3+0x180>
   40fcc:	d8800217 	ldw	r2,8(sp)
   40fd0:	d9000717 	ldw	r4,28(sp)
   40fd4:	d8c00917 	ldw	r3,36(sp)
   40fd8:	da000417 	ldw	r8,16(sp)
   40fdc:	2089c83a 	sub	r4,r4,r2
   40fe0:	d9000715 	stw	r4,28(sp)
   40fe4:	d8800817 	ldw	r2,32(sp)
   40fe8:	dbc00317 	ldw	r15,12(sp)
   40fec:	1a000236 	bltu	r3,r8,40ff8 <__divdf3+0xd0>
   40ff0:	40c0081e 	bne	r8,r3,41014 <__divdf3+0xec>
   40ff4:	13c0072e 	bgeu	r2,r15,41014 <__divdf3+0xec>
   40ff8:	108b883a 	add	r5,r2,r2
   40ffc:	288d803a 	cmpltu	r6,r5,r2
   41000:	18c7883a 	add	r3,r3,r3
   41004:	213fffc4 	addi	r4,r4,-1
   41008:	2805883a 	mov	r2,r5
   4100c:	30c7883a 	add	r3,r6,r3
   41010:	d9000715 	stw	r4,28(sp)
   41014:	01400f44 	movi	r5,61
   41018:	000f883a 	mov	r7,zero
   4101c:	01040034 	movhi	r4,4096
   41020:	0019883a 	mov	r12,zero
   41024:	001b883a 	mov	r13,zero
   41028:	201697fa 	slli	r11,r4,31
   4102c:	3814d07a 	srli	r10,r7,1
   41030:	297fffc4 	addi	r5,r5,-1
   41034:	1a000936 	bltu	r3,r8,4105c <__divdf3+0x134>
   41038:	13cdc83a 	sub	r6,r2,r15
   4103c:	1193803a 	cmpltu	r9,r2,r6
   41040:	1a1dc83a 	sub	r14,r3,r8
   41044:	40c0011e 	bne	r8,r3,4104c <__divdf3+0x124>
   41048:	13c00436 	bltu	r2,r15,4105c <__divdf3+0x134>
   4104c:	3005883a 	mov	r2,r6
   41050:	7247c83a 	sub	r3,r14,r9
   41054:	61d8b03a 	or	r12,r12,r7
   41058:	691ab03a 	or	r13,r13,r4
   4105c:	108d883a 	add	r6,r2,r2
   41060:	3093803a 	cmpltu	r9,r6,r2
   41064:	18c7883a 	add	r3,r3,r3
   41068:	5a8eb03a 	or	r7,r11,r10
   4106c:	2008d07a 	srli	r4,r4,1
   41070:	3005883a 	mov	r2,r6
   41074:	48c7883a 	add	r3,r9,r3
   41078:	283feb1e 	bne	r5,zero,41028 <__divdf3+0x100>
   4107c:	61003fcc 	andi	r4,r12,255
   41080:	01402004 	movi	r5,128
   41084:	21400b26 	beq	r4,r5,410b4 <__divdf3+0x18c>
   41088:	db000815 	stw	r12,32(sp)
   4108c:	db400915 	stw	r13,36(sp)
   41090:	003fb406 	br	40f64 <__divdf3+0x3c>
   41094:	d8000815 	stw	zero,32(sp)
   41098:	d8000915 	stw	zero,36(sp)
   4109c:	d8000715 	stw	zero,28(sp)
   410a0:	d9000504 	addi	r4,sp,20
   410a4:	003fb006 	br	40f68 <__divdf3+0x40>
   410a8:	d8800515 	stw	r2,20(sp)
   410ac:	d9000504 	addi	r4,sp,20
   410b0:	003fad06 	br	40f68 <__divdf3+0x40>
   410b4:	6140400c 	andi	r5,r12,256
   410b8:	283ff31e 	bne	r5,zero,41088 <__divdf3+0x160>
   410bc:	30c4b03a 	or	r2,r6,r3
   410c0:	103ff126 	beq	r2,zero,41088 <__divdf3+0x160>
   410c4:	6109883a 	add	r4,r12,r4
   410c8:	2305803a 	cmpltu	r2,r4,r12
   410cc:	033fc004 	movi	r12,-256
   410d0:	2318703a 	and	r12,r4,r12
   410d4:	135b883a 	add	r13,r2,r13
   410d8:	003feb06 	br	41088 <__divdf3+0x160>

000410dc <__floatunsidf>:
   410dc:	defff904 	addi	sp,sp,-28
   410e0:	dc000515 	stw	r16,20(sp)
   410e4:	dfc00615 	stw	ra,24(sp)
   410e8:	d8000115 	stw	zero,4(sp)
   410ec:	2021883a 	mov	r16,r4
   410f0:	20001726 	beq	r4,zero,41150 <__floatunsidf+0x74>
   410f4:	008000c4 	movi	r2,3
   410f8:	d8800015 	stw	r2,0(sp)
   410fc:	00800f04 	movi	r2,60
   41100:	d8800215 	stw	r2,8(sp)
   41104:	00412200 	call	41220 <__clzsi2>
   41108:	10c00744 	addi	r3,r2,29
   4110c:	18001816 	blt	r3,zero,41170 <__floatunsidf+0x94>
   41110:	18002d26 	beq	r3,zero,411c8 <__floatunsidf+0xec>
   41114:	113fff44 	addi	r4,r2,-3
   41118:	20002e16 	blt	r4,zero,411d4 <__floatunsidf+0xf8>
   4111c:	8108983a 	sll	r4,r16,r4
   41120:	0021883a 	mov	r16,zero
   41124:	014007c4 	movi	r5,31
   41128:	2885c83a 	sub	r2,r5,r2
   4112c:	dc000315 	stw	r16,12(sp)
   41130:	d9000415 	stw	r4,16(sp)
   41134:	d8800215 	stw	r2,8(sp)
   41138:	d809883a 	mov	r4,sp
   4113c:	00412cc0 	call	412cc <__pack_d>
   41140:	dfc00617 	ldw	ra,24(sp)
   41144:	dc000517 	ldw	r16,20(sp)
   41148:	dec00704 	addi	sp,sp,28
   4114c:	f800283a 	ret
   41150:	00800084 	movi	r2,2
   41154:	d809883a 	mov	r4,sp
   41158:	d8800015 	stw	r2,0(sp)
   4115c:	00412cc0 	call	412cc <__pack_d>
   41160:	dfc00617 	ldw	ra,24(sp)
   41164:	dc000517 	ldw	r16,20(sp)
   41168:	dec00704 	addi	sp,sp,28
   4116c:	f800283a 	ret
   41170:	00c7c83a 	sub	r3,zero,r3
   41174:	193ff804 	addi	r4,r3,-32
   41178:	20001c16 	blt	r4,zero,411ec <__floatunsidf+0x110>
   4117c:	000b883a 	mov	r5,zero
   41180:	2009d7fa 	srai	r4,r4,31
   41184:	80c6d83a 	srl	r3,r16,r3
   41188:	297fffc4 	addi	r5,r5,-1
   4118c:	2c20703a 	and	r16,r5,r16
   41190:	8020c03a 	cmpne	r16,r16,zero
   41194:	1906703a 	and	r3,r3,r4
   41198:	010007c4 	movi	r4,31
   4119c:	80c6b03a 	or	r3,r16,r3
   411a0:	2085c83a 	sub	r2,r4,r2
   411a4:	d809883a 	mov	r4,sp
   411a8:	d8c00315 	stw	r3,12(sp)
   411ac:	d8000415 	stw	zero,16(sp)
   411b0:	d8800215 	stw	r2,8(sp)
   411b4:	00412cc0 	call	412cc <__pack_d>
   411b8:	dfc00617 	ldw	ra,24(sp)
   411bc:	dc000517 	ldw	r16,20(sp)
   411c0:	dec00704 	addi	sp,sp,28
   411c4:	f800283a 	ret
   411c8:	dc000315 	stw	r16,12(sp)
   411cc:	d8000415 	stw	zero,16(sp)
   411d0:	003fd906 	br	41138 <__floatunsidf+0x5c>
   411d4:	800ad07a 	srli	r5,r16,1
   411d8:	010007c4 	movi	r4,31
   411dc:	20c9c83a 	sub	r4,r4,r3
   411e0:	2908d83a 	srl	r4,r5,r4
   411e4:	80e0983a 	sll	r16,r16,r3
   411e8:	003fce06 	br	41124 <__floatunsidf+0x48>
   411ec:	01400044 	movi	r5,1
   411f0:	28ca983a 	sll	r5,r5,r3
   411f4:	003fe206 	br	41180 <__floatunsidf+0xa4>

000411f8 <__mulsi3>:
   411f8:	0005883a 	mov	r2,zero
   411fc:	20000726 	beq	r4,zero,4121c <__mulsi3+0x24>
   41200:	20c0004c 	andi	r3,r4,1
   41204:	2008d07a 	srli	r4,r4,1
   41208:	18000126 	beq	r3,zero,41210 <__mulsi3+0x18>
   4120c:	1145883a 	add	r2,r2,r5
   41210:	294b883a 	add	r5,r5,r5
   41214:	203ffa1e 	bne	r4,zero,41200 <__mulsi3+0x8>
   41218:	f800283a 	ret
   4121c:	f800283a 	ret

00041220 <__clzsi2>:
   41220:	00bfffd4 	movui	r2,65535
   41224:	11000b36 	bltu	r2,r4,41254 <__clzsi2+0x34>
   41228:	00803fc4 	movi	r2,255
   4122c:	11001e2e 	bgeu	r2,r4,412a8 <__clzsi2+0x88>
   41230:	00c00204 	movi	r3,8
   41234:	20c8d83a 	srl	r4,r4,r3
   41238:	00c00174 	movhi	r3,5
   4123c:	18f95004 	addi	r3,r3,-6848
   41240:	00800604 	movi	r2,24
   41244:	1909883a 	add	r4,r3,r4
   41248:	20c00003 	ldbu	r3,0(r4)
   4124c:	10c5c83a 	sub	r2,r2,r3
   41250:	f800283a 	ret
   41254:	00804034 	movhi	r2,256
   41258:	10bfffc4 	addi	r2,r2,-1
   4125c:	11000936 	bltu	r2,r4,41284 <__clzsi2+0x64>
   41260:	00800404 	movi	r2,16
   41264:	1007883a 	mov	r3,r2
   41268:	20c8d83a 	srl	r4,r4,r3
   4126c:	00c00174 	movhi	r3,5
   41270:	18f95004 	addi	r3,r3,-6848
   41274:	1909883a 	add	r4,r3,r4
   41278:	20c00003 	ldbu	r3,0(r4)
   4127c:	10c5c83a 	sub	r2,r2,r3
   41280:	f800283a 	ret
   41284:	00c00604 	movi	r3,24
   41288:	20c8d83a 	srl	r4,r4,r3
   4128c:	00c00174 	movhi	r3,5
   41290:	18f95004 	addi	r3,r3,-6848
   41294:	00800204 	movi	r2,8
   41298:	1909883a 	add	r4,r3,r4
   4129c:	20c00003 	ldbu	r3,0(r4)
   412a0:	10c5c83a 	sub	r2,r2,r3
   412a4:	f800283a 	ret
   412a8:	0007883a 	mov	r3,zero
   412ac:	20c8d83a 	srl	r4,r4,r3
   412b0:	00c00174 	movhi	r3,5
   412b4:	18f95004 	addi	r3,r3,-6848
   412b8:	00800804 	movi	r2,32
   412bc:	1909883a 	add	r4,r3,r4
   412c0:	20c00003 	ldbu	r3,0(r4)
   412c4:	10c5c83a 	sub	r2,r2,r3
   412c8:	f800283a 	ret

000412cc <__pack_d>:
   412cc:	20800017 	ldw	r2,0(r4)
   412d0:	defff804 	addi	sp,sp,-32
   412d4:	dcc00315 	stw	r19,12(sp)
   412d8:	dc800215 	stw	r18,8(sp)
   412dc:	dfc00715 	stw	ra,28(sp)
   412e0:	dd800615 	stw	r22,24(sp)
   412e4:	dd400515 	stw	r21,20(sp)
   412e8:	dd000415 	stw	r20,16(sp)
   412ec:	dc400115 	stw	r17,4(sp)
   412f0:	dc000015 	stw	r16,0(sp)
   412f4:	04800044 	movi	r18,1
   412f8:	24400317 	ldw	r17,12(r4)
   412fc:	24000417 	ldw	r16,16(r4)
   41300:	24c00117 	ldw	r19,4(r4)
   41304:	9080422e 	bgeu	r18,r2,41410 <__pack_d+0x144>
   41308:	00c00104 	movi	r3,4
   4130c:	10c03c26 	beq	r2,r3,41400 <__pack_d+0x134>
   41310:	00c00084 	movi	r3,2
   41314:	10c01926 	beq	r2,r3,4137c <__pack_d+0xb0>
   41318:	8c04b03a 	or	r2,r17,r16
   4131c:	10001726 	beq	r2,zero,4137c <__pack_d+0xb0>
   41320:	21000217 	ldw	r4,8(r4)
   41324:	00bf0084 	movi	r2,-1022
   41328:	20804016 	blt	r4,r2,4142c <__pack_d+0x160>
   4132c:	0080ffc4 	movi	r2,1023
   41330:	11003316 	blt	r2,r4,41400 <__pack_d+0x134>
   41334:	88803fcc 	andi	r2,r17,255
   41338:	00c02004 	movi	r3,128
   4133c:	10c02926 	beq	r2,r3,413e4 <__pack_d+0x118>
   41340:	88801fc4 	addi	r2,r17,127
   41344:	1463803a 	cmpltu	r17,r2,r17
   41348:	8c21883a 	add	r16,r17,r16
   4134c:	1023883a 	mov	r17,r2
   41350:	00880034 	movhi	r2,8192
   41354:	10bfffc4 	addi	r2,r2,-1
   41358:	14001c36 	bltu	r2,r16,413cc <__pack_d+0x100>
   4135c:	2100ffc4 	addi	r4,r4,1023
   41360:	8006963a 	slli	r3,r16,24
   41364:	8804d23a 	srli	r2,r17,8
   41368:	8020913a 	slli	r16,r16,4
   4136c:	2101ffcc 	andi	r4,r4,2047
   41370:	1884b03a 	or	r2,r3,r2
   41374:	8020d33a 	srli	r16,r16,12
   41378:	00000306 	br	41388 <__pack_d+0xbc>
   4137c:	0009883a 	mov	r4,zero
   41380:	0005883a 	mov	r2,zero
   41384:	0021883a 	mov	r16,zero
   41388:	2008953a 	slli	r4,r4,20
   4138c:	982697fa 	slli	r19,r19,31
   41390:	00c00434 	movhi	r3,16
   41394:	18ffffc4 	addi	r3,r3,-1
   41398:	80e0703a 	and	r16,r16,r3
   4139c:	8106b03a 	or	r3,r16,r4
   413a0:	1cc6b03a 	or	r3,r3,r19
   413a4:	dfc00717 	ldw	ra,28(sp)
   413a8:	dd800617 	ldw	r22,24(sp)
   413ac:	dd400517 	ldw	r21,20(sp)
   413b0:	dd000417 	ldw	r20,16(sp)
   413b4:	dcc00317 	ldw	r19,12(sp)
   413b8:	dc800217 	ldw	r18,8(sp)
   413bc:	dc400117 	ldw	r17,4(sp)
   413c0:	dc000017 	ldw	r16,0(sp)
   413c4:	dec00804 	addi	sp,sp,32
   413c8:	f800283a 	ret
   413cc:	800697fa 	slli	r3,r16,31
   413d0:	8804d07a 	srli	r2,r17,1
   413d4:	21010004 	addi	r4,r4,1024
   413d8:	8020d07a 	srli	r16,r16,1
   413dc:	18a2b03a 	or	r17,r3,r2
   413e0:	003fdf06 	br	41360 <__pack_d+0x94>
   413e4:	88c0400c 	andi	r3,r17,256
   413e8:	183fd926 	beq	r3,zero,41350 <__pack_d+0x84>
   413ec:	8885883a 	add	r2,r17,r2
   413f0:	1463803a 	cmpltu	r17,r2,r17
   413f4:	8c21883a 	add	r16,r17,r16
   413f8:	1023883a 	mov	r17,r2
   413fc:	003fd406 	br	41350 <__pack_d+0x84>
   41400:	0101ffc4 	movi	r4,2047
   41404:	0005883a 	mov	r2,zero
   41408:	0021883a 	mov	r16,zero
   4140c:	003fde06 	br	41388 <__pack_d+0xbc>
   41410:	84000234 	orhi	r16,r16,8
   41414:	00c00434 	movhi	r3,16
   41418:	18ffffc4 	addi	r3,r3,-1
   4141c:	8805883a 	mov	r2,r17
   41420:	80e0703a 	and	r16,r16,r3
   41424:	0101ffc4 	movi	r4,2047
   41428:	003fd706 	br	41388 <__pack_d+0xbc>
   4142c:	1129c83a 	sub	r20,r2,r4
   41430:	00800e04 	movi	r2,56
   41434:	15002716 	blt	r2,r20,414d4 <__pack_d+0x208>
   41438:	800b883a 	mov	r5,r16
   4143c:	a00d883a 	mov	r6,r20
   41440:	8809883a 	mov	r4,r17
   41444:	00415f40 	call	415f4 <__lshrdi3>
   41448:	9009883a 	mov	r4,r18
   4144c:	000b883a 	mov	r5,zero
   41450:	a00d883a 	mov	r6,r20
   41454:	102d883a 	mov	r22,r2
   41458:	182b883a 	mov	r21,r3
   4145c:	00416380 	call	41638 <__ashldi3>
   41460:	1009003a 	cmpeq	r4,r2,zero
   41464:	1907c83a 	sub	r3,r3,r4
   41468:	10bfffc4 	addi	r2,r2,-1
   4146c:	1c20703a 	and	r16,r3,r16
   41470:	1444703a 	and	r2,r2,r17
   41474:	1404b03a 	or	r2,r2,r16
   41478:	1004c03a 	cmpne	r2,r2,zero
   4147c:	1584b03a 	or	r2,r2,r22
   41480:	11003fcc 	andi	r4,r2,255
   41484:	01402004 	movi	r5,128
   41488:	a807883a 	mov	r3,r21
   4148c:	2140131e 	bne	r4,r5,414dc <__pack_d+0x210>
   41490:	1140400c 	andi	r5,r2,256
   41494:	28000426 	beq	r5,zero,414a8 <__pack_d+0x1dc>
   41498:	1109883a 	add	r4,r2,r4
   4149c:	2085803a 	cmpltu	r2,r4,r2
   414a0:	1547883a 	add	r3,r2,r21
   414a4:	2005883a 	mov	r2,r4
   414a8:	1808963a 	slli	r4,r3,24
   414ac:	1004d23a 	srli	r2,r2,8
   414b0:	1820913a 	slli	r16,r3,4
   414b4:	01440034 	movhi	r5,4096
   414b8:	297fffc4 	addi	r5,r5,-1
   414bc:	2084b03a 	or	r2,r4,r2
   414c0:	8020d33a 	srli	r16,r16,12
   414c4:	01000044 	movi	r4,1
   414c8:	28ffaf36 	bltu	r5,r3,41388 <__pack_d+0xbc>
   414cc:	0009883a 	mov	r4,zero
   414d0:	003fad06 	br	41388 <__pack_d+0xbc>
   414d4:	0005883a 	mov	r2,zero
   414d8:	0007883a 	mov	r3,zero
   414dc:	11001fc4 	addi	r4,r2,127
   414e0:	2085803a 	cmpltu	r2,r4,r2
   414e4:	10c7883a 	add	r3,r2,r3
   414e8:	2005883a 	mov	r2,r4
   414ec:	003fee06 	br	414a8 <__pack_d+0x1dc>

000414f0 <__unpack_d>:
   414f0:	21800117 	ldw	r6,4(r4)
   414f4:	20c00017 	ldw	r3,0(r4)
   414f8:	3004d7fa 	srli	r2,r6,31
   414fc:	3008d53a 	srli	r4,r6,20
   41500:	28800115 	stw	r2,4(r5)
   41504:	2101ffcc 	andi	r4,r4,2047
   41508:	00800434 	movhi	r2,16
   4150c:	10bfffc4 	addi	r2,r2,-1
   41510:	3084703a 	and	r2,r6,r2
   41514:	20001a1e 	bne	r4,zero,41580 <__unpack_d+0x90>
   41518:	1888b03a 	or	r4,r3,r2
   4151c:	20002626 	beq	r4,zero,415b8 <__unpack_d+0xc8>
   41520:	1808d63a 	srli	r4,r3,24
   41524:	1004923a 	slli	r2,r2,8
   41528:	01bf0084 	movi	r6,-1022
   4152c:	29800215 	stw	r6,8(r5)
   41530:	2084b03a 	or	r2,r4,r2
   41534:	010000c4 	movi	r4,3
   41538:	29000015 	stw	r4,0(r5)
   4153c:	02040034 	movhi	r8,4096
   41540:	423fffc4 	addi	r8,r8,-1
   41544:	1806923a 	slli	r3,r3,8
   41548:	40801836 	bltu	r8,r2,415ac <__unpack_d+0xbc>
   4154c:	013f0044 	movi	r4,-1023
   41550:	18cd883a 	add	r6,r3,r3
   41554:	30c7803a 	cmpltu	r3,r6,r3
   41558:	1085883a 	add	r2,r2,r2
   4155c:	1885883a 	add	r2,r3,r2
   41560:	200f883a 	mov	r7,r4
   41564:	3007883a 	mov	r3,r6
   41568:	213fffc4 	addi	r4,r4,-1
   4156c:	40bff82e 	bgeu	r8,r2,41550 <__unpack_d+0x60>
   41570:	29c00215 	stw	r7,8(r5)
   41574:	28c00315 	stw	r3,12(r5)
   41578:	28800415 	stw	r2,16(r5)
   4157c:	f800283a 	ret
   41580:	01c1ffc4 	movi	r7,2047
   41584:	21c00f26 	beq	r4,r7,415c4 <__unpack_d+0xd4>
   41588:	180cd63a 	srli	r6,r3,24
   4158c:	1004923a 	slli	r2,r2,8
   41590:	213f0044 	addi	r4,r4,-1023
   41594:	1806923a 	slli	r3,r3,8
   41598:	3084b03a 	or	r2,r6,r2
   4159c:	29000215 	stw	r4,8(r5)
   415a0:	010000c4 	movi	r4,3
   415a4:	10840034 	orhi	r2,r2,4096
   415a8:	29000015 	stw	r4,0(r5)
   415ac:	28c00315 	stw	r3,12(r5)
   415b0:	28800415 	stw	r2,16(r5)
   415b4:	f800283a 	ret
   415b8:	00800084 	movi	r2,2
   415bc:	28800015 	stw	r2,0(r5)
   415c0:	f800283a 	ret
   415c4:	1888b03a 	or	r4,r3,r2
   415c8:	20000526 	beq	r4,zero,415e0 <__unpack_d+0xf0>
   415cc:	3180022c 	andhi	r6,r6,8
   415d0:	30000626 	beq	r6,zero,415ec <__unpack_d+0xfc>
   415d4:	01000044 	movi	r4,1
   415d8:	29000015 	stw	r4,0(r5)
   415dc:	003ff306 	br	415ac <__unpack_d+0xbc>
   415e0:	00800104 	movi	r2,4
   415e4:	28800015 	stw	r2,0(r5)
   415e8:	f800283a 	ret
   415ec:	28000015 	stw	zero,0(r5)
   415f0:	003fee06 	br	415ac <__unpack_d+0xbc>

000415f4 <__lshrdi3>:
   415f4:	2005883a 	mov	r2,r4
   415f8:	2807883a 	mov	r3,r5
   415fc:	30000826 	beq	r6,zero,41620 <__lshrdi3+0x2c>
   41600:	01000804 	movi	r4,32
   41604:	2189c83a 	sub	r4,r4,r6
   41608:	0100060e 	bge	zero,r4,41624 <__lshrdi3+0x30>
   4160c:	1184d83a 	srl	r2,r2,r6
   41610:	2908983a 	sll	r4,r5,r4
   41614:	298cd83a 	srl	r6,r5,r6
   41618:	2084b03a 	or	r2,r4,r2
   4161c:	3007883a 	mov	r3,r6
   41620:	f800283a 	ret
   41624:	0105c83a 	sub	r2,zero,r4
   41628:	000d883a 	mov	r6,zero
   4162c:	2884d83a 	srl	r2,r5,r2
   41630:	3007883a 	mov	r3,r6
   41634:	003ffa06 	br	41620 <__lshrdi3+0x2c>

00041638 <__ashldi3>:
   41638:	2005883a 	mov	r2,r4
   4163c:	2807883a 	mov	r3,r5
   41640:	30000826 	beq	r6,zero,41664 <__ashldi3+0x2c>
   41644:	01000804 	movi	r4,32
   41648:	2189c83a 	sub	r4,r4,r6
   4164c:	0100060e 	bge	zero,r4,41668 <__ashldi3+0x30>
   41650:	1108d83a 	srl	r4,r2,r4
   41654:	2986983a 	sll	r3,r5,r6
   41658:	118c983a 	sll	r6,r2,r6
   4165c:	20c6b03a 	or	r3,r4,r3
   41660:	3005883a 	mov	r2,r6
   41664:	f800283a 	ret
   41668:	0107c83a 	sub	r3,zero,r4
   4166c:	000d883a 	mov	r6,zero
   41670:	10c6983a 	sll	r3,r2,r3
   41674:	3005883a 	mov	r2,r6
   41678:	003ffa06 	br	41664 <__ashldi3+0x2c>

0004167c <clock>:
   4167c:	00800174 	movhi	r2,5
   41680:	1080ad04 	addi	r2,r2,692
   41684:	11000017 	ldw	r4,0(r2)
   41688:	defffb04 	addi	sp,sp,-20
   4168c:	d80b883a 	mov	r5,sp
   41690:	dfc00415 	stw	ra,16(sp)
   41694:	0042ce00 	call	42ce0 <_times_r>
   41698:	00ffffc4 	movi	r3,-1
   4169c:	10c00726 	beq	r2,r3,416bc <clock+0x40>
   416a0:	d8c00117 	ldw	r3,4(sp)
   416a4:	d8800017 	ldw	r2,0(sp)
   416a8:	1885883a 	add	r2,r3,r2
   416ac:	d8c00217 	ldw	r3,8(sp)
   416b0:	10c5883a 	add	r2,r2,r3
   416b4:	d8c00317 	ldw	r3,12(sp)
   416b8:	10c5883a 	add	r2,r2,r3
   416bc:	dfc00417 	ldw	ra,16(sp)
   416c0:	dec00504 	addi	sp,sp,20
   416c4:	f800283a 	ret

000416c8 <_fopen_r>:
   416c8:	defffa04 	addi	sp,sp,-24
   416cc:	dcc00415 	stw	r19,16(sp)
   416d0:	2827883a 	mov	r19,r5
   416d4:	300b883a 	mov	r5,r6
   416d8:	d80d883a 	mov	r6,sp
   416dc:	dc800315 	stw	r18,12(sp)
   416e0:	dc400215 	stw	r17,8(sp)
   416e4:	dfc00515 	stw	ra,20(sp)
   416e8:	dc000115 	stw	r16,4(sp)
   416ec:	2025883a 	mov	r18,r4
   416f0:	0046b5c0 	call	46b5c <__sflags>
   416f4:	1023883a 	mov	r17,r2
   416f8:	10002926 	beq	r2,zero,417a0 <_fopen_r+0xd8>
   416fc:	9009883a 	mov	r4,r18
   41700:	0046a200 	call	46a20 <__sfp>
   41704:	1021883a 	mov	r16,r2
   41708:	10002526 	beq	r2,zero,417a0 <_fopen_r+0xd8>
   4170c:	d9800017 	ldw	r6,0(sp)
   41710:	9009883a 	mov	r4,r18
   41714:	980b883a 	mov	r5,r19
   41718:	01c06d84 	movi	r7,438
   4171c:	00427a40 	call	427a4 <_open_r>
   41720:	10001c16 	blt	r2,zero,41794 <_fopen_r+0xcc>
   41724:	8080038d 	sth	r2,14(r16)
   41728:	00800134 	movhi	r2,4
   4172c:	108ac504 	addi	r2,r2,11028
   41730:	80800815 	stw	r2,32(r16)
   41734:	00800134 	movhi	r2,4
   41738:	108ada04 	addi	r2,r2,11112
   4173c:	80800915 	stw	r2,36(r16)
   41740:	00800134 	movhi	r2,4
   41744:	108afc04 	addi	r2,r2,11248
   41748:	88c0400c 	andi	r3,r17,256
   4174c:	80800a15 	stw	r2,40(r16)
   41750:	00800134 	movhi	r2,4
   41754:	108b1304 	addi	r2,r2,11340
   41758:	80800b15 	stw	r2,44(r16)
   4175c:	18bfffcc 	andi	r2,r3,65535
   41760:	10a0001c 	xori	r2,r2,32768
   41764:	8440030d 	sth	r17,12(r16)
   41768:	84000715 	stw	r16,28(r16)
   4176c:	10a00004 	addi	r2,r2,-32768
   41770:	1000141e 	bne	r2,zero,417c4 <_fopen_r+0xfc>
   41774:	8005883a 	mov	r2,r16
   41778:	dfc00517 	ldw	ra,20(sp)
   4177c:	dcc00417 	ldw	r19,16(sp)
   41780:	dc800317 	ldw	r18,12(sp)
   41784:	dc400217 	ldw	r17,8(sp)
   41788:	dc000117 	ldw	r16,4(sp)
   4178c:	dec00604 	addi	sp,sp,24
   41790:	f800283a 	ret
   41794:	0046b1c0 	call	46b1c <__sfp_lock_acquire>
   41798:	8000030d 	sth	zero,12(r16)
   4179c:	0046b200 	call	46b20 <__sfp_lock_release>
   417a0:	0021883a 	mov	r16,zero
   417a4:	8005883a 	mov	r2,r16
   417a8:	dfc00517 	ldw	ra,20(sp)
   417ac:	dcc00417 	ldw	r19,16(sp)
   417b0:	dc800317 	ldw	r18,12(sp)
   417b4:	dc400217 	ldw	r17,8(sp)
   417b8:	dc000117 	ldw	r16,4(sp)
   417bc:	dec00604 	addi	sp,sp,24
   417c0:	f800283a 	ret
   417c4:	9009883a 	mov	r4,r18
   417c8:	800b883a 	mov	r5,r16
   417cc:	000d883a 	mov	r6,zero
   417d0:	01c00084 	movi	r7,2
   417d4:	00418600 	call	41860 <_fseek_r>
   417d8:	8005883a 	mov	r2,r16
   417dc:	dfc00517 	ldw	ra,20(sp)
   417e0:	dcc00417 	ldw	r19,16(sp)
   417e4:	dc800317 	ldw	r18,12(sp)
   417e8:	dc400217 	ldw	r17,8(sp)
   417ec:	dc000117 	ldw	r16,4(sp)
   417f0:	dec00604 	addi	sp,sp,24
   417f4:	f800283a 	ret

000417f8 <fopen>:
   417f8:	00c00174 	movhi	r3,5
   417fc:	18c0ad04 	addi	r3,r3,692
   41800:	2005883a 	mov	r2,r4
   41804:	19000017 	ldw	r4,0(r3)
   41808:	280d883a 	mov	r6,r5
   4180c:	100b883a 	mov	r5,r2
   41810:	00416c81 	jmpi	416c8 <_fopen_r>

00041814 <_fprintf_r>:
   41814:	defffe04 	addi	sp,sp,-8
   41818:	2809883a 	mov	r4,r5
   4181c:	dfc00015 	stw	ra,0(sp)
   41820:	d9c00115 	stw	r7,4(sp)
   41824:	300b883a 	mov	r5,r6
   41828:	d9800104 	addi	r6,sp,4
   4182c:	0044b980 	call	44b98 <__vfprintf_internal>
   41830:	dfc00017 	ldw	ra,0(sp)
   41834:	dec00204 	addi	sp,sp,8
   41838:	f800283a 	ret

0004183c <fprintf>:
   4183c:	defffd04 	addi	sp,sp,-12
   41840:	dfc00015 	stw	ra,0(sp)
   41844:	d9800115 	stw	r6,4(sp)
   41848:	d9c00215 	stw	r7,8(sp)
   4184c:	d9800104 	addi	r6,sp,4
   41850:	0044b980 	call	44b98 <__vfprintf_internal>
   41854:	dfc00017 	ldw	ra,0(sp)
   41858:	dec00304 	addi	sp,sp,12
   4185c:	f800283a 	ret

00041860 <_fseek_r>:
   41860:	deffe804 	addi	sp,sp,-96
   41864:	dd001315 	stw	r20,76(sp)
   41868:	dc801115 	stw	r18,68(sp)
   4186c:	dc401015 	stw	r17,64(sp)
   41870:	dc000f15 	stw	r16,60(sp)
   41874:	dfc01715 	stw	ra,92(sp)
   41878:	ddc01615 	stw	r23,88(sp)
   4187c:	dd801515 	stw	r22,84(sp)
   41880:	dd401415 	stw	r21,80(sp)
   41884:	dcc01215 	stw	r19,72(sp)
   41888:	2023883a 	mov	r17,r4
   4188c:	2821883a 	mov	r16,r5
   41890:	3029883a 	mov	r20,r6
   41894:	3825883a 	mov	r18,r7
   41898:	20000226 	beq	r4,zero,418a4 <_fseek_r+0x44>
   4189c:	20800e17 	ldw	r2,56(r4)
   418a0:	10006226 	beq	r2,zero,41a2c <_fseek_r+0x1cc>
   418a4:	80c0030b 	ldhu	r3,12(r16)
   418a8:	00804204 	movi	r2,264
   418ac:	18c0420c 	andi	r3,r3,264
   418b0:	18806326 	beq	r3,r2,41a40 <_fseek_r+0x1e0>
   418b4:	84c00a17 	ldw	r19,40(r16)
   418b8:	98010226 	beq	r19,zero,41cc4 <_fseek_r+0x464>
   418bc:	00800044 	movi	r2,1
   418c0:	90803d26 	beq	r18,r2,419b8 <_fseek_r+0x158>
   418c4:	00800084 	movi	r2,2
   418c8:	90800126 	beq	r18,r2,418d0 <_fseek_r+0x70>
   418cc:	90002c1e 	bne	r18,zero,41980 <_fseek_r+0x120>
   418d0:	80800417 	ldw	r2,16(r16)
   418d4:	002d883a 	mov	r22,zero
   418d8:	002b883a 	mov	r21,zero
   418dc:	1000e526 	beq	r2,zero,41c74 <_fseek_r+0x414>
   418e0:	80c0030b 	ldhu	r3,12(r16)
   418e4:	1882068c 	andi	r2,r3,2074
   418e8:	1809883a 	mov	r4,r3
   418ec:	10000a1e 	bne	r2,zero,41918 <_fseek_r+0xb8>
   418f0:	1881000c 	andi	r2,r3,1024
   418f4:	10bfffcc 	andi	r2,r2,65535
   418f8:	10a0001c 	xori	r2,r2,32768
   418fc:	10a00004 	addi	r2,r2,-32768
   41900:	1000631e 	bne	r2,zero,41a90 <_fseek_r+0x230>
   41904:	00800134 	movhi	r2,4
   41908:	108afc04 	addi	r2,r2,11248
   4190c:	98805026 	beq	r19,r2,41a50 <_fseek_r+0x1f0>
   41910:	18c20014 	ori	r3,r3,2048
   41914:	80c0030d 	sth	r3,12(r16)
   41918:	8809883a 	mov	r4,r17
   4191c:	800b883a 	mov	r5,r16
   41920:	00466580 	call	46658 <_fflush_r>
   41924:	1000181e 	bne	r2,zero,41988 <_fseek_r+0x128>
   41928:	81400717 	ldw	r5,28(r16)
   4192c:	8809883a 	mov	r4,r17
   41930:	a00d883a 	mov	r6,r20
   41934:	900f883a 	mov	r7,r18
   41938:	983ee83a 	callr	r19
   4193c:	00ffffc4 	movi	r3,-1
   41940:	10c01126 	beq	r2,r3,41988 <_fseek_r+0x128>
   41944:	81400c17 	ldw	r5,48(r16)
   41948:	28000526 	beq	r5,zero,41960 <_fseek_r+0x100>
   4194c:	80801004 	addi	r2,r16,64
   41950:	28800226 	beq	r5,r2,4195c <_fseek_r+0xfc>
   41954:	8809883a 	mov	r4,r17
   41958:	0046d300 	call	46d30 <_free_r>
   4195c:	80000c15 	stw	zero,48(r16)
   41960:	8080030b 	ldhu	r2,12(r16)
   41964:	80c00417 	ldw	r3,16(r16)
   41968:	80000115 	stw	zero,4(r16)
   4196c:	10bdf7cc 	andi	r2,r2,63455
   41970:	8080030d 	sth	r2,12(r16)
   41974:	80c00015 	stw	r3,0(r16)
   41978:	0005883a 	mov	r2,zero
   4197c:	00000306 	br	4198c <_fseek_r+0x12c>
   41980:	00800584 	movi	r2,22
   41984:	88800015 	stw	r2,0(r17)
   41988:	00bfffc4 	movi	r2,-1
   4198c:	dfc01717 	ldw	ra,92(sp)
   41990:	ddc01617 	ldw	r23,88(sp)
   41994:	dd801517 	ldw	r22,84(sp)
   41998:	dd401417 	ldw	r21,80(sp)
   4199c:	dd001317 	ldw	r20,76(sp)
   419a0:	dcc01217 	ldw	r19,72(sp)
   419a4:	dc801117 	ldw	r18,68(sp)
   419a8:	dc401017 	ldw	r17,64(sp)
   419ac:	dc000f17 	ldw	r16,60(sp)
   419b0:	dec01804 	addi	sp,sp,96
   419b4:	f800283a 	ret
   419b8:	8809883a 	mov	r4,r17
   419bc:	800b883a 	mov	r5,r16
   419c0:	00466580 	call	46658 <_fflush_r>
   419c4:	8080030b 	ldhu	r2,12(r16)
   419c8:	10c4000c 	andi	r3,r2,4096
   419cc:	18ffffcc 	andi	r3,r3,65535
   419d0:	18e0001c 	xori	r3,r3,32768
   419d4:	18e00004 	addi	r3,r3,-32768
   419d8:	18007d26 	beq	r3,zero,41bd0 <_fseek_r+0x370>
   419dc:	85401417 	ldw	r21,80(r16)
   419e0:	10c0010c 	andi	r3,r2,4
   419e4:	18ffffcc 	andi	r3,r3,65535
   419e8:	18e0001c 	xori	r3,r3,32768
   419ec:	18e00004 	addi	r3,r3,-32768
   419f0:	18005f1e 	bne	r3,zero,41b70 <_fseek_r+0x310>
   419f4:	1080020c 	andi	r2,r2,8
   419f8:	10bfffcc 	andi	r2,r2,65535
   419fc:	10a0001c 	xori	r2,r2,32768
   41a00:	10a00004 	addi	r2,r2,-32768
   41a04:	10007026 	beq	r2,zero,41bc8 <_fseek_r+0x368>
   41a08:	80c00017 	ldw	r3,0(r16)
   41a0c:	80800417 	ldw	r2,16(r16)
   41a10:	18000226 	beq	r3,zero,41a1c <_fseek_r+0x1bc>
   41a14:	1887c83a 	sub	r3,r3,r2
   41a18:	a8eb883a 	add	r21,r21,r3
   41a1c:	a569883a 	add	r20,r20,r21
   41a20:	05800044 	movi	r22,1
   41a24:	0025883a 	mov	r18,zero
   41a28:	003fac06 	br	418dc <_fseek_r+0x7c>
   41a2c:	00469140 	call	46914 <__sinit>
   41a30:	80c0030b 	ldhu	r3,12(r16)
   41a34:	00804204 	movi	r2,264
   41a38:	18c0420c 	andi	r3,r3,264
   41a3c:	18bf9d1e 	bne	r3,r2,418b4 <_fseek_r+0x54>
   41a40:	8809883a 	mov	r4,r17
   41a44:	800b883a 	mov	r5,r16
   41a48:	00466580 	call	46658 <_fflush_r>
   41a4c:	003f9906 	br	418b4 <_fseek_r+0x54>
   41a50:	8140038f 	ldh	r5,14(r16)
   41a54:	283fae16 	blt	r5,zero,41910 <_fseek_r+0xb0>
   41a58:	8809883a 	mov	r4,r17
   41a5c:	d80d883a 	mov	r6,sp
   41a60:	0041cf80 	call	41cf8 <_fstat_r>
   41a64:	1000741e 	bne	r2,zero,41c38 <_fseek_r+0x3d8>
   41a68:	d8c00117 	ldw	r3,4(sp)
   41a6c:	00a00014 	movui	r2,32768
   41a70:	18fc000c 	andi	r3,r3,61440
   41a74:	1880701e 	bne	r3,r2,41c38 <_fseek_r+0x3d8>
   41a78:	8100030b 	ldhu	r4,12(r16)
   41a7c:	00810004 	movi	r2,1024
   41a80:	80801315 	stw	r2,76(r16)
   41a84:	2084b03a 	or	r2,r4,r2
   41a88:	1009883a 	mov	r4,r2
   41a8c:	8080030d 	sth	r2,12(r16)
   41a90:	90003f1e 	bne	r18,zero,41b90 <_fseek_r+0x330>
   41a94:	a02f883a 	mov	r23,r20
   41a98:	b000461e 	bne	r22,zero,41bb4 <_fseek_r+0x354>
   41a9c:	2084000c 	andi	r2,r4,4096
   41aa0:	10bfffcc 	andi	r2,r2,65535
   41aa4:	10a0001c 	xori	r2,r2,32768
   41aa8:	10a00004 	addi	r2,r2,-32768
   41aac:	10007526 	beq	r2,zero,41c84 <_fseek_r+0x424>
   41ab0:	80801417 	ldw	r2,80(r16)
   41ab4:	80c00117 	ldw	r3,4(r16)
   41ab8:	81400c17 	ldw	r5,48(r16)
   41abc:	10ebc83a 	sub	r21,r2,r3
   41ac0:	28007926 	beq	r5,zero,41ca8 <_fseek_r+0x448>
   41ac4:	81c00f17 	ldw	r7,60(r16)
   41ac8:	a9ebc83a 	sub	r21,r21,r7
   41acc:	80800e17 	ldw	r2,56(r16)
   41ad0:	81800417 	ldw	r6,16(r16)
   41ad4:	a8eb883a 	add	r21,r21,r3
   41ad8:	1185c83a 	sub	r2,r2,r6
   41adc:	a8abc83a 	sub	r21,r21,r2
   41ae0:	3885883a 	add	r2,r7,r2
   41ae4:	2208000c 	andi	r8,r4,8192
   41ae8:	423fffcc 	andi	r8,r8,65535
   41aec:	4220001c 	xori	r8,r8,32768
   41af0:	42200004 	addi	r8,r8,-32768
   41af4:	4000031e 	bne	r8,zero,41b04 <_fseek_r+0x2a4>
   41af8:	bd400216 	blt	r23,r21,41b04 <_fseek_r+0x2a4>
   41afc:	a887883a 	add	r3,r21,r2
   41b00:	b8c03d36 	bltu	r23,r3,41bf8 <_fseek_r+0x398>
   41b04:	85401317 	ldw	r21,76(r16)
   41b08:	81400717 	ldw	r5,28(r16)
   41b0c:	8809883a 	mov	r4,r17
   41b10:	056bc83a 	sub	r21,zero,r21
   41b14:	bd6a703a 	and	r21,r23,r21
   41b18:	a80d883a 	mov	r6,r21
   41b1c:	000f883a 	mov	r7,zero
   41b20:	983ee83a 	callr	r19
   41b24:	00ffffc4 	movi	r3,-1
   41b28:	10ff7b26 	beq	r2,r3,41918 <_fseek_r+0xb8>
   41b2c:	80800417 	ldw	r2,16(r16)
   41b30:	81400c17 	ldw	r5,48(r16)
   41b34:	80000115 	stw	zero,4(r16)
   41b38:	80800015 	stw	r2,0(r16)
   41b3c:	28000526 	beq	r5,zero,41b54 <_fseek_r+0x2f4>
   41b40:	80801004 	addi	r2,r16,64
   41b44:	28800226 	beq	r5,r2,41b50 <_fseek_r+0x2f0>
   41b48:	8809883a 	mov	r4,r17
   41b4c:	0046d300 	call	46d30 <_free_r>
   41b50:	80000c15 	stw	zero,48(r16)
   41b54:	8080030b 	ldhu	r2,12(r16)
   41b58:	bd6fc83a 	sub	r23,r23,r21
   41b5c:	10bff7cc 	andi	r2,r2,65503
   41b60:	8080030d 	sth	r2,12(r16)
   41b64:	b800361e 	bne	r23,zero,41c40 <_fseek_r+0x3e0>
   41b68:	0005883a 	mov	r2,zero
   41b6c:	003f8706 	br	4198c <_fseek_r+0x12c>
   41b70:	80c00117 	ldw	r3,4(r16)
   41b74:	80800c17 	ldw	r2,48(r16)
   41b78:	a8ebc83a 	sub	r21,r21,r3
   41b7c:	10001226 	beq	r2,zero,41bc8 <_fseek_r+0x368>
   41b80:	80c00f17 	ldw	r3,60(r16)
   41b84:	80800417 	ldw	r2,16(r16)
   41b88:	a8ebc83a 	sub	r21,r21,r3
   41b8c:	003fa306 	br	41a1c <_fseek_r+0x1bc>
   41b90:	8140038f 	ldh	r5,14(r16)
   41b94:	8809883a 	mov	r4,r17
   41b98:	d80d883a 	mov	r6,sp
   41b9c:	0041cf80 	call	41cf8 <_fstat_r>
   41ba0:	103f5d1e 	bne	r2,zero,41918 <_fseek_r+0xb8>
   41ba4:	ddc00417 	ldw	r23,16(sp)
   41ba8:	8100030b 	ldhu	r4,12(r16)
   41bac:	a5ef883a 	add	r23,r20,r23
   41bb0:	b03fba26 	beq	r22,zero,41a9c <_fseek_r+0x23c>
   41bb4:	81400c17 	ldw	r5,48(r16)
   41bb8:	80c00117 	ldw	r3,4(r16)
   41bbc:	28003a26 	beq	r5,zero,41ca8 <_fseek_r+0x448>
   41bc0:	81c00f17 	ldw	r7,60(r16)
   41bc4:	003fc106 	br	41acc <_fseek_r+0x26c>
   41bc8:	80800417 	ldw	r2,16(r16)
   41bcc:	003f9306 	br	41a1c <_fseek_r+0x1bc>
   41bd0:	81400717 	ldw	r5,28(r16)
   41bd4:	8809883a 	mov	r4,r17
   41bd8:	000d883a 	mov	r6,zero
   41bdc:	900f883a 	mov	r7,r18
   41be0:	983ee83a 	callr	r19
   41be4:	102b883a 	mov	r21,r2
   41be8:	00bfffc4 	movi	r2,-1
   41bec:	a8bf6626 	beq	r21,r2,41988 <_fseek_r+0x128>
   41bf0:	8080030b 	ldhu	r2,12(r16)
   41bf4:	003f7a06 	br	419e0 <_fseek_r+0x180>
   41bf8:	bd6bc83a 	sub	r21,r23,r21
   41bfc:	354d883a 	add	r6,r6,r21
   41c00:	1545c83a 	sub	r2,r2,r21
   41c04:	81800015 	stw	r6,0(r16)
   41c08:	80800115 	stw	r2,4(r16)
   41c0c:	28000626 	beq	r5,zero,41c28 <_fseek_r+0x3c8>
   41c10:	80801004 	addi	r2,r16,64
   41c14:	28800326 	beq	r5,r2,41c24 <_fseek_r+0x3c4>
   41c18:	8809883a 	mov	r4,r17
   41c1c:	0046d300 	call	46d30 <_free_r>
   41c20:	8100030b 	ldhu	r4,12(r16)
   41c24:	80000c15 	stw	zero,48(r16)
   41c28:	213ff7cc 	andi	r4,r4,65503
   41c2c:	8100030d 	sth	r4,12(r16)
   41c30:	0005883a 	mov	r2,zero
   41c34:	003f5506 	br	4198c <_fseek_r+0x12c>
   41c38:	80c0030b 	ldhu	r3,12(r16)
   41c3c:	003f3406 	br	41910 <_fseek_r+0xb0>
   41c40:	8809883a 	mov	r4,r17
   41c44:	800b883a 	mov	r5,r16
   41c48:	00428c40 	call	428c4 <__srefill_r>
   41c4c:	103f321e 	bne	r2,zero,41918 <_fseek_r+0xb8>
   41c50:	80800117 	ldw	r2,4(r16)
   41c54:	15ff3036 	bltu	r2,r23,41918 <_fseek_r+0xb8>
   41c58:	80c00017 	ldw	r3,0(r16)
   41c5c:	15c5c83a 	sub	r2,r2,r23
   41c60:	80800115 	stw	r2,4(r16)
   41c64:	1def883a 	add	r23,r3,r23
   41c68:	85c00015 	stw	r23,0(r16)
   41c6c:	0005883a 	mov	r2,zero
   41c70:	003f4606 	br	4198c <_fseek_r+0x12c>
   41c74:	8809883a 	mov	r4,r17
   41c78:	800b883a 	mov	r5,r16
   41c7c:	0041e500 	call	41e50 <__smakebuf_r>
   41c80:	003f1706 	br	418e0 <_fseek_r+0x80>
   41c84:	81400717 	ldw	r5,28(r16)
   41c88:	8809883a 	mov	r4,r17
   41c8c:	000d883a 	mov	r6,zero
   41c90:	01c00044 	movi	r7,1
   41c94:	983ee83a 	callr	r19
   41c98:	00ffffc4 	movi	r3,-1
   41c9c:	10ff1e26 	beq	r2,r3,41918 <_fseek_r+0xb8>
   41ca0:	8100030b 	ldhu	r4,12(r16)
   41ca4:	003f8306 	br	41ab4 <_fseek_r+0x254>
   41ca8:	80800017 	ldw	r2,0(r16)
   41cac:	81800417 	ldw	r6,16(r16)
   41cb0:	000b883a 	mov	r5,zero
   41cb4:	1185c83a 	sub	r2,r2,r6
   41cb8:	a8abc83a 	sub	r21,r21,r2
   41cbc:	1885883a 	add	r2,r3,r2
   41cc0:	003f8806 	br	41ae4 <_fseek_r+0x284>
   41cc4:	00800744 	movi	r2,29
   41cc8:	88800015 	stw	r2,0(r17)
   41ccc:	00bfffc4 	movi	r2,-1
   41cd0:	003f2e06 	br	4198c <_fseek_r+0x12c>

00041cd4 <fseek>:
   41cd4:	00800174 	movhi	r2,5
   41cd8:	1080ad04 	addi	r2,r2,692
   41cdc:	2007883a 	mov	r3,r4
   41ce0:	11000017 	ldw	r4,0(r2)
   41ce4:	2805883a 	mov	r2,r5
   41ce8:	300f883a 	mov	r7,r6
   41cec:	180b883a 	mov	r5,r3
   41cf0:	100d883a 	mov	r6,r2
   41cf4:	00418601 	jmpi	41860 <_fseek_r>

00041cf8 <_fstat_r>:
   41cf8:	defffd04 	addi	sp,sp,-12
   41cfc:	dc400115 	stw	r17,4(sp)
   41d00:	dc000015 	stw	r16,0(sp)
   41d04:	2023883a 	mov	r17,r4
   41d08:	04000174 	movhi	r16,5
   41d0c:	84078604 	addi	r16,r16,7704
   41d10:	2809883a 	mov	r4,r5
   41d14:	300b883a 	mov	r5,r6
   41d18:	dfc00215 	stw	ra,8(sp)
   41d1c:	80000015 	stw	zero,0(r16)
   41d20:	004b1fc0 	call	4b1fc <fstat>
   41d24:	00ffffc4 	movi	r3,-1
   41d28:	10c00526 	beq	r2,r3,41d40 <_fstat_r+0x48>
   41d2c:	dfc00217 	ldw	ra,8(sp)
   41d30:	dc400117 	ldw	r17,4(sp)
   41d34:	dc000017 	ldw	r16,0(sp)
   41d38:	dec00304 	addi	sp,sp,12
   41d3c:	f800283a 	ret
   41d40:	80c00017 	ldw	r3,0(r16)
   41d44:	183ff926 	beq	r3,zero,41d2c <_fstat_r+0x34>
   41d48:	88c00015 	stw	r3,0(r17)
   41d4c:	dfc00217 	ldw	ra,8(sp)
   41d50:	dc400117 	ldw	r17,4(sp)
   41d54:	dc000017 	ldw	r16,0(sp)
   41d58:	dec00304 	addi	sp,sp,12
   41d5c:	f800283a 	ret

00041d60 <_fwrite_r>:
   41d60:	defff604 	addi	sp,sp,-40
   41d64:	dc000515 	stw	r16,20(sp)
   41d68:	d9400315 	stw	r5,12(sp)
   41d6c:	2021883a 	mov	r16,r4
   41d70:	300b883a 	mov	r5,r6
   41d74:	3809883a 	mov	r4,r7
   41d78:	dcc00815 	stw	r19,32(sp)
   41d7c:	dc800715 	stw	r18,28(sp)
   41d80:	dc400615 	stw	r17,24(sp)
   41d84:	dfc00915 	stw	ra,36(sp)
   41d88:	3027883a 	mov	r19,r6
   41d8c:	3823883a 	mov	r17,r7
   41d90:	00411f80 	call	411f8 <__mulsi3>
   41d94:	1025883a 	mov	r18,r2
   41d98:	d8800415 	stw	r2,16(sp)
   41d9c:	d8800215 	stw	r2,8(sp)
   41da0:	d8800304 	addi	r2,sp,12
   41da4:	d8800015 	stw	r2,0(sp)
   41da8:	00800044 	movi	r2,1
   41dac:	d8800115 	stw	r2,4(sp)
   41db0:	80000226 	beq	r16,zero,41dbc <_fwrite_r+0x5c>
   41db4:	80800e17 	ldw	r2,56(r16)
   41db8:	10001226 	beq	r2,zero,41e04 <_fwrite_r+0xa4>
   41dbc:	d9400a17 	ldw	r5,40(sp)
   41dc0:	8009883a 	mov	r4,r16
   41dc4:	d80d883a 	mov	r6,sp
   41dc8:	00470000 	call	47000 <__sfvwrite_r>
   41dcc:	10000526 	beq	r2,zero,41de4 <_fwrite_r+0x84>
   41dd0:	d9000217 	ldw	r4,8(sp)
   41dd4:	980b883a 	mov	r5,r19
   41dd8:	9109c83a 	sub	r4,r18,r4
   41ddc:	004ae740 	call	4ae74 <__udivsi3>
   41de0:	1023883a 	mov	r17,r2
   41de4:	8805883a 	mov	r2,r17
   41de8:	dfc00917 	ldw	ra,36(sp)
   41dec:	dcc00817 	ldw	r19,32(sp)
   41df0:	dc800717 	ldw	r18,28(sp)
   41df4:	dc400617 	ldw	r17,24(sp)
   41df8:	dc000517 	ldw	r16,20(sp)
   41dfc:	dec00a04 	addi	sp,sp,40
   41e00:	f800283a 	ret
   41e04:	8009883a 	mov	r4,r16
   41e08:	00469140 	call	46914 <__sinit>
   41e0c:	003feb06 	br	41dbc <_fwrite_r+0x5c>

00041e10 <fwrite>:
   41e10:	00800174 	movhi	r2,5
   41e14:	1080ad04 	addi	r2,r2,692
   41e18:	2011883a 	mov	r8,r4
   41e1c:	11000017 	ldw	r4,0(r2)
   41e20:	defffe04 	addi	sp,sp,-8
   41e24:	2807883a 	mov	r3,r5
   41e28:	3005883a 	mov	r2,r6
   41e2c:	d9c00015 	stw	r7,0(sp)
   41e30:	400b883a 	mov	r5,r8
   41e34:	180d883a 	mov	r6,r3
   41e38:	100f883a 	mov	r7,r2
   41e3c:	dfc00115 	stw	ra,4(sp)
   41e40:	0041d600 	call	41d60 <_fwrite_r>
   41e44:	dfc00117 	ldw	ra,4(sp)
   41e48:	dec00204 	addi	sp,sp,8
   41e4c:	f800283a 	ret

00041e50 <__smakebuf_r>:
   41e50:	2880030b 	ldhu	r2,12(r5)
   41e54:	deffed04 	addi	sp,sp,-76
   41e58:	dc401015 	stw	r17,64(sp)
   41e5c:	10c0008c 	andi	r3,r2,2
   41e60:	18ffffcc 	andi	r3,r3,65535
   41e64:	18e0001c 	xori	r3,r3,32768
   41e68:	dc000f15 	stw	r16,60(sp)
   41e6c:	dfc01215 	stw	ra,72(sp)
   41e70:	dc801115 	stw	r18,68(sp)
   41e74:	18e00004 	addi	r3,r3,-32768
   41e78:	2821883a 	mov	r16,r5
   41e7c:	2023883a 	mov	r17,r4
   41e80:	1800381e 	bne	r3,zero,41f64 <__smakebuf_r+0x114>
   41e84:	2940038f 	ldh	r5,14(r5)
   41e88:	28002d16 	blt	r5,zero,41f40 <__smakebuf_r+0xf0>
   41e8c:	d80d883a 	mov	r6,sp
   41e90:	0041cf80 	call	41cf8 <_fstat_r>
   41e94:	10002916 	blt	r2,zero,41f3c <__smakebuf_r+0xec>
   41e98:	d8800117 	ldw	r2,4(sp)
   41e9c:	00e00014 	movui	r3,32768
   41ea0:	10bc000c 	andi	r2,r2,61440
   41ea4:	10c03c26 	beq	r2,r3,41f98 <__smakebuf_r+0x148>
   41ea8:	80c0030b 	ldhu	r3,12(r16)
   41eac:	18c20014 	ori	r3,r3,2048
   41eb0:	80c0030d 	sth	r3,12(r16)
   41eb4:	00c80004 	movi	r3,8192
   41eb8:	10c00c1e 	bne	r2,r3,41eec <__smakebuf_r+0x9c>
   41ebc:	8140038f 	ldh	r5,14(r16)
   41ec0:	8809883a 	mov	r4,r17
   41ec4:	00476440 	call	47644 <_isatty_r>
   41ec8:	10000826 	beq	r2,zero,41eec <__smakebuf_r+0x9c>
   41ecc:	80c0030b 	ldhu	r3,12(r16)
   41ed0:	808010c4 	addi	r2,r16,67
   41ed4:	80800015 	stw	r2,0(r16)
   41ed8:	18c00054 	ori	r3,r3,1
   41edc:	80800415 	stw	r2,16(r16)
   41ee0:	00800044 	movi	r2,1
   41ee4:	80c0030d 	sth	r3,12(r16)
   41ee8:	80800515 	stw	r2,20(r16)
   41eec:	04810004 	movi	r18,1024
   41ef0:	8809883a 	mov	r4,r17
   41ef4:	900b883a 	mov	r5,r18
   41ef8:	00420200 	call	42020 <_malloc_r>
   41efc:	10003026 	beq	r2,zero,41fc0 <__smakebuf_r+0x170>
   41f00:	80c0030b 	ldhu	r3,12(r16)
   41f04:	01000134 	movhi	r4,4
   41f08:	211a2004 	addi	r4,r4,26752
   41f0c:	89000f15 	stw	r4,60(r17)
   41f10:	18c02014 	ori	r3,r3,128
   41f14:	80c0030d 	sth	r3,12(r16)
   41f18:	80800015 	stw	r2,0(r16)
   41f1c:	80800415 	stw	r2,16(r16)
   41f20:	84800515 	stw	r18,20(r16)
   41f24:	dfc01217 	ldw	ra,72(sp)
   41f28:	dc801117 	ldw	r18,68(sp)
   41f2c:	dc401017 	ldw	r17,64(sp)
   41f30:	dc000f17 	ldw	r16,60(sp)
   41f34:	dec01304 	addi	sp,sp,76
   41f38:	f800283a 	ret
   41f3c:	8080030b 	ldhu	r2,12(r16)
   41f40:	10c0200c 	andi	r3,r2,128
   41f44:	18ffffcc 	andi	r3,r3,65535
   41f48:	18e0001c 	xori	r3,r3,32768
   41f4c:	18e00004 	addi	r3,r3,-32768
   41f50:	18000f1e 	bne	r3,zero,41f90 <__smakebuf_r+0x140>
   41f54:	04810004 	movi	r18,1024
   41f58:	10820014 	ori	r2,r2,2048
   41f5c:	8080030d 	sth	r2,12(r16)
   41f60:	003fe306 	br	41ef0 <__smakebuf_r+0xa0>
   41f64:	288010c4 	addi	r2,r5,67
   41f68:	28800015 	stw	r2,0(r5)
   41f6c:	28800415 	stw	r2,16(r5)
   41f70:	00800044 	movi	r2,1
   41f74:	28800515 	stw	r2,20(r5)
   41f78:	dfc01217 	ldw	ra,72(sp)
   41f7c:	dc801117 	ldw	r18,68(sp)
   41f80:	dc401017 	ldw	r17,64(sp)
   41f84:	dc000f17 	ldw	r16,60(sp)
   41f88:	dec01304 	addi	sp,sp,76
   41f8c:	f800283a 	ret
   41f90:	04801004 	movi	r18,64
   41f94:	003ff006 	br	41f58 <__smakebuf_r+0x108>
   41f98:	81000a17 	ldw	r4,40(r16)
   41f9c:	00c00134 	movhi	r3,4
   41fa0:	18cafc04 	addi	r3,r3,11248
   41fa4:	20ffc01e 	bne	r4,r3,41ea8 <__smakebuf_r+0x58>
   41fa8:	8080030b 	ldhu	r2,12(r16)
   41fac:	00c10004 	movi	r3,1024
   41fb0:	80c01315 	stw	r3,76(r16)
   41fb4:	10c4b03a 	or	r2,r2,r3
   41fb8:	8080030d 	sth	r2,12(r16)
   41fbc:	003fcb06 	br	41eec <__smakebuf_r+0x9c>
   41fc0:	8080030b 	ldhu	r2,12(r16)
   41fc4:	10c0800c 	andi	r3,r2,512
   41fc8:	18ffffcc 	andi	r3,r3,65535
   41fcc:	18e0001c 	xori	r3,r3,32768
   41fd0:	18e00004 	addi	r3,r3,-32768
   41fd4:	183fd31e 	bne	r3,zero,41f24 <__smakebuf_r+0xd4>
   41fd8:	10800094 	ori	r2,r2,2
   41fdc:	80c010c4 	addi	r3,r16,67
   41fe0:	8080030d 	sth	r2,12(r16)
   41fe4:	00800044 	movi	r2,1
   41fe8:	80c00015 	stw	r3,0(r16)
   41fec:	80c00415 	stw	r3,16(r16)
   41ff0:	80800515 	stw	r2,20(r16)
   41ff4:	003fcb06 	br	41f24 <__smakebuf_r+0xd4>

00041ff8 <malloc>:
   41ff8:	00800174 	movhi	r2,5
   41ffc:	1080ad04 	addi	r2,r2,692
   42000:	200b883a 	mov	r5,r4
   42004:	11000017 	ldw	r4,0(r2)
   42008:	00420201 	jmpi	42020 <_malloc_r>

0004200c <free>:
   4200c:	00800174 	movhi	r2,5
   42010:	1080ad04 	addi	r2,r2,692
   42014:	200b883a 	mov	r5,r4
   42018:	11000017 	ldw	r4,0(r2)
   4201c:	0046d301 	jmpi	46d30 <_free_r>

00042020 <_malloc_r>:
   42020:	defff604 	addi	sp,sp,-40
   42024:	dc800215 	stw	r18,8(sp)
   42028:	dfc00915 	stw	ra,36(sp)
   4202c:	df000815 	stw	fp,32(sp)
   42030:	ddc00715 	stw	r23,28(sp)
   42034:	dd800615 	stw	r22,24(sp)
   42038:	dd400515 	stw	r21,20(sp)
   4203c:	dd000415 	stw	r20,16(sp)
   42040:	dcc00315 	stw	r19,12(sp)
   42044:	dc400115 	stw	r17,4(sp)
   42048:	dc000015 	stw	r16,0(sp)
   4204c:	288002c4 	addi	r2,r5,11
   42050:	00c00584 	movi	r3,22
   42054:	2025883a 	mov	r18,r4
   42058:	18802b2e 	bgeu	r3,r2,42108 <_malloc_r+0xe8>
   4205c:	047ffe04 	movi	r17,-8
   42060:	1462703a 	and	r17,r2,r17
   42064:	88002a16 	blt	r17,zero,42110 <_malloc_r+0xf0>
   42068:	89402936 	bltu	r17,r5,42110 <_malloc_r+0xf0>
   4206c:	9009883a 	mov	r4,r18
   42070:	004b6280 	call	4b628 <__malloc_lock>
   42074:	00807dc4 	movi	r2,503
   42078:	14402936 	bltu	r2,r17,42120 <_malloc_r+0x100>
   4207c:	8808d0fa 	srli	r4,r17,3
   42080:	04c00174 	movhi	r19,5
   42084:	9cfb1604 	addi	r19,r19,-5032
   42088:	2105883a 	add	r2,r4,r4
   4208c:	1085883a 	add	r2,r2,r2
   42090:	1085883a 	add	r2,r2,r2
   42094:	9885883a 	add	r2,r19,r2
   42098:	14000317 	ldw	r16,12(r2)
   4209c:	80815526 	beq	r16,r2,425f4 <_malloc_r+0x5d4>
   420a0:	81000117 	ldw	r4,4(r16)
   420a4:	00bfff04 	movi	r2,-4
   420a8:	80c00317 	ldw	r3,12(r16)
   420ac:	2084703a 	and	r2,r4,r2
   420b0:	8085883a 	add	r2,r16,r2
   420b4:	11800117 	ldw	r6,4(r2)
   420b8:	81400217 	ldw	r5,8(r16)
   420bc:	9009883a 	mov	r4,r18
   420c0:	31800054 	ori	r6,r6,1
   420c4:	11800115 	stw	r6,4(r2)
   420c8:	28c00315 	stw	r3,12(r5)
   420cc:	19400215 	stw	r5,8(r3)
   420d0:	004b6480 	call	4b648 <__malloc_unlock>
   420d4:	80800204 	addi	r2,r16,8
   420d8:	dfc00917 	ldw	ra,36(sp)
   420dc:	df000817 	ldw	fp,32(sp)
   420e0:	ddc00717 	ldw	r23,28(sp)
   420e4:	dd800617 	ldw	r22,24(sp)
   420e8:	dd400517 	ldw	r21,20(sp)
   420ec:	dd000417 	ldw	r20,16(sp)
   420f0:	dcc00317 	ldw	r19,12(sp)
   420f4:	dc800217 	ldw	r18,8(sp)
   420f8:	dc400117 	ldw	r17,4(sp)
   420fc:	dc000017 	ldw	r16,0(sp)
   42100:	dec00a04 	addi	sp,sp,40
   42104:	f800283a 	ret
   42108:	04400404 	movi	r17,16
   4210c:	897fd72e 	bgeu	r17,r5,4206c <_malloc_r+0x4c>
   42110:	00800304 	movi	r2,12
   42114:	90800015 	stw	r2,0(r18)
   42118:	0005883a 	mov	r2,zero
   4211c:	003fee06 	br	420d8 <_malloc_r+0xb8>
   42120:	8808d27a 	srli	r4,r17,9
   42124:	20007126 	beq	r4,zero,422ec <_malloc_r+0x2cc>
   42128:	00800104 	movi	r2,4
   4212c:	1100eb36 	bltu	r2,r4,424dc <_malloc_r+0x4bc>
   42130:	8808d1ba 	srli	r4,r17,6
   42134:	21000e04 	addi	r4,r4,56
   42138:	210b883a 	add	r5,r4,r4
   4213c:	294b883a 	add	r5,r5,r5
   42140:	294b883a 	add	r5,r5,r5
   42144:	04c00174 	movhi	r19,5
   42148:	9cfb1604 	addi	r19,r19,-5032
   4214c:	994b883a 	add	r5,r19,r5
   42150:	2c000317 	ldw	r16,12(r5)
   42154:	2c000e26 	beq	r5,r16,42190 <_malloc_r+0x170>
   42158:	80c00117 	ldw	r3,4(r16)
   4215c:	01ffff04 	movi	r7,-4
   42160:	018003c4 	movi	r6,15
   42164:	19c6703a 	and	r3,r3,r7
   42168:	1c45c83a 	sub	r2,r3,r17
   4216c:	30800716 	blt	r6,r2,4218c <_malloc_r+0x16c>
   42170:	1000610e 	bge	r2,zero,422f8 <_malloc_r+0x2d8>
   42174:	84000317 	ldw	r16,12(r16)
   42178:	2c000526 	beq	r5,r16,42190 <_malloc_r+0x170>
   4217c:	80c00117 	ldw	r3,4(r16)
   42180:	19c6703a 	and	r3,r3,r7
   42184:	1c45c83a 	sub	r2,r3,r17
   42188:	30bff90e 	bge	r6,r2,42170 <_malloc_r+0x150>
   4218c:	213fffc4 	addi	r4,r4,-1
   42190:	21000044 	addi	r4,r4,1
   42194:	9c000417 	ldw	r16,16(r19)
   42198:	00c00174 	movhi	r3,5
   4219c:	18fb1604 	addi	r3,r3,-5032
   421a0:	1a400204 	addi	r9,r3,8
   421a4:	8240ff26 	beq	r16,r9,425a4 <_malloc_r+0x584>
   421a8:	81400117 	ldw	r5,4(r16)
   421ac:	00bfff04 	movi	r2,-4
   421b0:	018003c4 	movi	r6,15
   421b4:	2884703a 	and	r2,r5,r2
   421b8:	144bc83a 	sub	r5,r2,r17
   421bc:	3140ea16 	blt	r6,r5,42568 <_malloc_r+0x548>
   421c0:	1a400515 	stw	r9,20(r3)
   421c4:	1a400415 	stw	r9,16(r3)
   421c8:	2800570e 	bge	r5,zero,42328 <_malloc_r+0x308>
   421cc:	01407fc4 	movi	r5,511
   421d0:	2880ca36 	bltu	r5,r2,424fc <_malloc_r+0x4dc>
   421d4:	1004d0fa 	srli	r2,r2,3
   421d8:	02000044 	movi	r8,1
   421dc:	19c00117 	ldw	r7,4(r3)
   421e0:	108b883a 	add	r5,r2,r2
   421e4:	294b883a 	add	r5,r5,r5
   421e8:	1005d0ba 	srai	r2,r2,2
   421ec:	294b883a 	add	r5,r5,r5
   421f0:	28cb883a 	add	r5,r5,r3
   421f4:	29800217 	ldw	r6,8(r5)
   421f8:	4084983a 	sll	r2,r8,r2
   421fc:	81400315 	stw	r5,12(r16)
   42200:	81800215 	stw	r6,8(r16)
   42204:	11c4b03a 	or	r2,r2,r7
   42208:	18800115 	stw	r2,4(r3)
   4220c:	2c000215 	stw	r16,8(r5)
   42210:	34000315 	stw	r16,12(r6)
   42214:	200bd0ba 	srai	r5,r4,2
   42218:	00c00044 	movi	r3,1
   4221c:	194a983a 	sll	r5,r3,r5
   42220:	11404936 	bltu	r2,r5,42348 <_malloc_r+0x328>
   42224:	1146703a 	and	r3,r2,r5
   42228:	18000a1e 	bne	r3,zero,42254 <_malloc_r+0x234>
   4222c:	00ffff04 	movi	r3,-4
   42230:	294b883a 	add	r5,r5,r5
   42234:	20c8703a 	and	r4,r4,r3
   42238:	1146703a 	and	r3,r2,r5
   4223c:	21000104 	addi	r4,r4,4
   42240:	1800041e 	bne	r3,zero,42254 <_malloc_r+0x234>
   42244:	294b883a 	add	r5,r5,r5
   42248:	1146703a 	and	r3,r2,r5
   4224c:	21000104 	addi	r4,r4,4
   42250:	183ffc26 	beq	r3,zero,42244 <_malloc_r+0x224>
   42254:	023fff04 	movi	r8,-4
   42258:	01c003c4 	movi	r7,15
   4225c:	2105883a 	add	r2,r4,r4
   42260:	1085883a 	add	r2,r2,r2
   42264:	1085883a 	add	r2,r2,r2
   42268:	9899883a 	add	r12,r19,r2
   4226c:	62800304 	addi	r10,r12,12
   42270:	2017883a 	mov	r11,r4
   42274:	54000017 	ldw	r16,0(r10)
   42278:	51bffd04 	addi	r6,r10,-12
   4227c:	8180041e 	bne	r16,r6,42290 <_malloc_r+0x270>
   42280:	0000ca06 	br	425ac <_malloc_r+0x58c>
   42284:	10001c0e 	bge	r2,zero,422f8 <_malloc_r+0x2d8>
   42288:	84000317 	ldw	r16,12(r16)
   4228c:	8180c726 	beq	r16,r6,425ac <_malloc_r+0x58c>
   42290:	80c00117 	ldw	r3,4(r16)
   42294:	1a06703a 	and	r3,r3,r8
   42298:	1c45c83a 	sub	r2,r3,r17
   4229c:	38bff90e 	bge	r7,r2,42284 <_malloc_r+0x264>
   422a0:	81000317 	ldw	r4,12(r16)
   422a4:	81400217 	ldw	r5,8(r16)
   422a8:	8447883a 	add	r3,r16,r17
   422ac:	8c400054 	ori	r17,r17,1
   422b0:	29000315 	stw	r4,12(r5)
   422b4:	21400215 	stw	r5,8(r4)
   422b8:	84400115 	stw	r17,4(r16)
   422bc:	1889883a 	add	r4,r3,r2
   422c0:	11400054 	ori	r5,r2,1
   422c4:	98c00515 	stw	r3,20(r19)
   422c8:	98c00415 	stw	r3,16(r19)
   422cc:	20800015 	stw	r2,0(r4)
   422d0:	1a400315 	stw	r9,12(r3)
   422d4:	1a400215 	stw	r9,8(r3)
   422d8:	19400115 	stw	r5,4(r3)
   422dc:	9009883a 	mov	r4,r18
   422e0:	004b6480 	call	4b648 <__malloc_unlock>
   422e4:	80800204 	addi	r2,r16,8
   422e8:	003f7b06 	br	420d8 <_malloc_r+0xb8>
   422ec:	8808d0fa 	srli	r4,r17,3
   422f0:	210b883a 	add	r5,r4,r4
   422f4:	003f9106 	br	4213c <_malloc_r+0x11c>
   422f8:	80c7883a 	add	r3,r16,r3
   422fc:	19400117 	ldw	r5,4(r3)
   42300:	80800317 	ldw	r2,12(r16)
   42304:	81000217 	ldw	r4,8(r16)
   42308:	29400054 	ori	r5,r5,1
   4230c:	19400115 	stw	r5,4(r3)
   42310:	20800315 	stw	r2,12(r4)
   42314:	11000215 	stw	r4,8(r2)
   42318:	9009883a 	mov	r4,r18
   4231c:	004b6480 	call	4b648 <__malloc_unlock>
   42320:	80800204 	addi	r2,r16,8
   42324:	003f6c06 	br	420d8 <_malloc_r+0xb8>
   42328:	8085883a 	add	r2,r16,r2
   4232c:	10c00117 	ldw	r3,4(r2)
   42330:	9009883a 	mov	r4,r18
   42334:	18c00054 	ori	r3,r3,1
   42338:	10c00115 	stw	r3,4(r2)
   4233c:	004b6480 	call	4b648 <__malloc_unlock>
   42340:	80800204 	addi	r2,r16,8
   42344:	003f6406 	br	420d8 <_malloc_r+0xb8>
   42348:	9c000217 	ldw	r16,8(r19)
   4234c:	00bfff04 	movi	r2,-4
   42350:	85400117 	ldw	r21,4(r16)
   42354:	a8aa703a 	and	r21,r21,r2
   42358:	ac400336 	bltu	r21,r17,42368 <_malloc_r+0x348>
   4235c:	ac45c83a 	sub	r2,r21,r17
   42360:	00c003c4 	movi	r3,15
   42364:	18805316 	blt	r3,r2,424b4 <_malloc_r+0x494>
   42368:	d5e6e217 	ldw	r23,-25720(gp)
   4236c:	d0e00717 	ldw	r3,-32740(gp)
   42370:	00bfffc4 	movi	r2,-1
   42374:	8579883a 	add	fp,r16,r21
   42378:	8def883a 	add	r23,r17,r23
   4237c:	1880d226 	beq	r3,r2,426c8 <_malloc_r+0x6a8>
   42380:	bdc403c4 	addi	r23,r23,4111
   42384:	00bc0004 	movi	r2,-4096
   42388:	b8ae703a 	and	r23,r23,r2
   4238c:	9009883a 	mov	r4,r18
   42390:	b80b883a 	mov	r5,r23
   42394:	0042ab00 	call	42ab0 <_sbrk_r>
   42398:	1029883a 	mov	r20,r2
   4239c:	00bfffc4 	movi	r2,-1
   423a0:	a080d126 	beq	r20,r2,426e8 <_malloc_r+0x6c8>
   423a4:	a7009f36 	bltu	r20,fp,42624 <_malloc_r+0x604>
   423a8:	05800174 	movhi	r22,5
   423ac:	b5879304 	addi	r22,r22,7756
   423b0:	b0800017 	ldw	r2,0(r22)
   423b4:	b885883a 	add	r2,r23,r2
   423b8:	b0800015 	stw	r2,0(r22)
   423bc:	e500cf26 	beq	fp,r20,426fc <_malloc_r+0x6dc>
   423c0:	d1200717 	ldw	r4,-32740(gp)
   423c4:	00ffffc4 	movi	r3,-1
   423c8:	20c0e026 	beq	r4,r3,4274c <_malloc_r+0x72c>
   423cc:	a739c83a 	sub	fp,r20,fp
   423d0:	1705883a 	add	r2,r2,fp
   423d4:	b0800015 	stw	r2,0(r22)
   423d8:	a08001cc 	andi	r2,r20,7
   423dc:	1000a526 	beq	r2,zero,42674 <_malloc_r+0x654>
   423e0:	a0a9c83a 	sub	r20,r20,r2
   423e4:	00c40204 	movi	r3,4104
   423e8:	a5000204 	addi	r20,r20,8
   423ec:	1885c83a 	sub	r2,r3,r2
   423f0:	a5c7883a 	add	r3,r20,r23
   423f4:	18c3ffcc 	andi	r3,r3,4095
   423f8:	10efc83a 	sub	r23,r2,r3
   423fc:	9009883a 	mov	r4,r18
   42400:	b80b883a 	mov	r5,r23
   42404:	0042ab00 	call	42ab0 <_sbrk_r>
   42408:	00ffffc4 	movi	r3,-1
   4240c:	10c0cc26 	beq	r2,r3,42740 <_malloc_r+0x720>
   42410:	1505c83a 	sub	r2,r2,r20
   42414:	b887883a 	add	r3,r23,r2
   42418:	18c00054 	ori	r3,r3,1
   4241c:	b0800017 	ldw	r2,0(r22)
   42420:	9d000215 	stw	r20,8(r19)
   42424:	a0c00115 	stw	r3,4(r20)
   42428:	b885883a 	add	r2,r23,r2
   4242c:	b0800015 	stw	r2,0(r22)
   42430:	84c00e26 	beq	r16,r19,4246c <_malloc_r+0x44c>
   42434:	00c003c4 	movi	r3,15
   42438:	1d40902e 	bgeu	r3,r21,4267c <_malloc_r+0x65c>
   4243c:	ad7ffd04 	addi	r21,r21,-12
   42440:	013ffe04 	movi	r4,-8
   42444:	a908703a 	and	r4,r21,r4
   42448:	810b883a 	add	r5,r16,r4
   4244c:	01800144 	movi	r6,5
   42450:	29800115 	stw	r6,4(r5)
   42454:	29800215 	stw	r6,8(r5)
   42458:	81400117 	ldw	r5,4(r16)
   4245c:	2940004c 	andi	r5,r5,1
   42460:	214ab03a 	or	r5,r4,r5
   42464:	81400115 	stw	r5,4(r16)
   42468:	1900ae36 	bltu	r3,r4,42724 <_malloc_r+0x704>
   4246c:	d0e6e117 	ldw	r3,-25724(gp)
   42470:	1880012e 	bgeu	r3,r2,42478 <_malloc_r+0x458>
   42474:	d0a6e115 	stw	r2,-25724(gp)
   42478:	d0e6e017 	ldw	r3,-25728(gp)
   4247c:	9c000217 	ldw	r16,8(r19)
   42480:	1880012e 	bgeu	r3,r2,42488 <_malloc_r+0x468>
   42484:	d0a6e015 	stw	r2,-25728(gp)
   42488:	80c00117 	ldw	r3,4(r16)
   4248c:	00bfff04 	movi	r2,-4
   42490:	1886703a 	and	r3,r3,r2
   42494:	1c45c83a 	sub	r2,r3,r17
   42498:	1c400236 	bltu	r3,r17,424a4 <_malloc_r+0x484>
   4249c:	00c003c4 	movi	r3,15
   424a0:	18800416 	blt	r3,r2,424b4 <_malloc_r+0x494>
   424a4:	9009883a 	mov	r4,r18
   424a8:	004b6480 	call	4b648 <__malloc_unlock>
   424ac:	0005883a 	mov	r2,zero
   424b0:	003f0906 	br	420d8 <_malloc_r+0xb8>
   424b4:	88c00054 	ori	r3,r17,1
   424b8:	10800054 	ori	r2,r2,1
   424bc:	80c00115 	stw	r3,4(r16)
   424c0:	8463883a 	add	r17,r16,r17
   424c4:	88800115 	stw	r2,4(r17)
   424c8:	9009883a 	mov	r4,r18
   424cc:	9c400215 	stw	r17,8(r19)
   424d0:	004b6480 	call	4b648 <__malloc_unlock>
   424d4:	80800204 	addi	r2,r16,8
   424d8:	003eff06 	br	420d8 <_malloc_r+0xb8>
   424dc:	00800504 	movi	r2,20
   424e0:	1100492e 	bgeu	r2,r4,42608 <_malloc_r+0x5e8>
   424e4:	00801504 	movi	r2,84
   424e8:	11005c36 	bltu	r2,r4,4265c <_malloc_r+0x63c>
   424ec:	8808d33a 	srli	r4,r17,12
   424f0:	21001b84 	addi	r4,r4,110
   424f4:	210b883a 	add	r5,r4,r4
   424f8:	003f1006 	br	4213c <_malloc_r+0x11c>
   424fc:	1006d27a 	srli	r3,r2,9
   42500:	01400104 	movi	r5,4
   42504:	28c0432e 	bgeu	r5,r3,42614 <_malloc_r+0x5f4>
   42508:	01400504 	movi	r5,20
   4250c:	28c07036 	bltu	r5,r3,426d0 <_malloc_r+0x6b0>
   42510:	194016c4 	addi	r5,r3,91
   42514:	294d883a 	add	r6,r5,r5
   42518:	318d883a 	add	r6,r6,r6
   4251c:	318d883a 	add	r6,r6,r6
   42520:	998d883a 	add	r6,r19,r6
   42524:	30c00217 	ldw	r3,8(r6)
   42528:	01c00174 	movhi	r7,5
   4252c:	39fb1604 	addi	r7,r7,-5032
   42530:	19805726 	beq	r3,r6,42690 <_malloc_r+0x670>
   42534:	01ffff04 	movi	r7,-4
   42538:	19400117 	ldw	r5,4(r3)
   4253c:	29ca703a 	and	r5,r5,r7
   42540:	1140022e 	bgeu	r2,r5,4254c <_malloc_r+0x52c>
   42544:	18c00217 	ldw	r3,8(r3)
   42548:	30fffb1e 	bne	r6,r3,42538 <_malloc_r+0x518>
   4254c:	19400317 	ldw	r5,12(r3)
   42550:	98800117 	ldw	r2,4(r19)
   42554:	81400315 	stw	r5,12(r16)
   42558:	80c00215 	stw	r3,8(r16)
   4255c:	2c000215 	stw	r16,8(r5)
   42560:	1c000315 	stw	r16,12(r3)
   42564:	003f2b06 	br	42214 <_malloc_r+0x1f4>
   42568:	8445883a 	add	r2,r16,r17
   4256c:	8c400054 	ori	r17,r17,1
   42570:	18800515 	stw	r2,20(r3)
   42574:	18800415 	stw	r2,16(r3)
   42578:	29000054 	ori	r4,r5,1
   4257c:	1147883a 	add	r3,r2,r5
   42580:	84400115 	stw	r17,4(r16)
   42584:	11000115 	stw	r4,4(r2)
   42588:	12400315 	stw	r9,12(r2)
   4258c:	12400215 	stw	r9,8(r2)
   42590:	19400015 	stw	r5,0(r3)
   42594:	9009883a 	mov	r4,r18
   42598:	004b6480 	call	4b648 <__malloc_unlock>
   4259c:	80800204 	addi	r2,r16,8
   425a0:	003ecd06 	br	420d8 <_malloc_r+0xb8>
   425a4:	18800117 	ldw	r2,4(r3)
   425a8:	003f1a06 	br	42214 <_malloc_r+0x1f4>
   425ac:	5ac00044 	addi	r11,r11,1
   425b0:	588000cc 	andi	r2,r11,3
   425b4:	52800204 	addi	r10,r10,8
   425b8:	103f2e1e 	bne	r2,zero,42274 <_malloc_r+0x254>
   425bc:	20c000cc 	andi	r3,r4,3
   425c0:	60bffe04 	addi	r2,r12,-8
   425c4:	18006f26 	beq	r3,zero,42784 <_malloc_r+0x764>
   425c8:	63000017 	ldw	r12,0(r12)
   425cc:	213fffc4 	addi	r4,r4,-1
   425d0:	60bffa26 	beq	r12,r2,425bc <_malloc_r+0x59c>
   425d4:	98800117 	ldw	r2,4(r19)
   425d8:	294b883a 	add	r5,r5,r5
   425dc:	117f5a36 	bltu	r2,r5,42348 <_malloc_r+0x328>
   425e0:	283f5926 	beq	r5,zero,42348 <_malloc_r+0x328>
   425e4:	1146703a 	and	r3,r2,r5
   425e8:	18001626 	beq	r3,zero,42644 <_malloc_r+0x624>
   425ec:	5809883a 	mov	r4,r11
   425f0:	003f1a06 	br	4225c <_malloc_r+0x23c>
   425f4:	80800204 	addi	r2,r16,8
   425f8:	84000517 	ldw	r16,20(r16)
   425fc:	143ea81e 	bne	r2,r16,420a0 <_malloc_r+0x80>
   42600:	21000084 	addi	r4,r4,2
   42604:	003ee306 	br	42194 <_malloc_r+0x174>
   42608:	210016c4 	addi	r4,r4,91
   4260c:	210b883a 	add	r5,r4,r4
   42610:	003eca06 	br	4213c <_malloc_r+0x11c>
   42614:	100ad1ba 	srli	r5,r2,6
   42618:	29400e04 	addi	r5,r5,56
   4261c:	294d883a 	add	r6,r5,r5
   42620:	003fbd06 	br	42518 <_malloc_r+0x4f8>
   42624:	84ff6026 	beq	r16,r19,423a8 <_malloc_r+0x388>
   42628:	00800174 	movhi	r2,5
   4262c:	10bb1604 	addi	r2,r2,-5032
   42630:	14000217 	ldw	r16,8(r2)
   42634:	00bfff04 	movi	r2,-4
   42638:	80c00117 	ldw	r3,4(r16)
   4263c:	1886703a 	and	r3,r3,r2
   42640:	003f9406 	br	42494 <_malloc_r+0x474>
   42644:	294b883a 	add	r5,r5,r5
   42648:	1146703a 	and	r3,r2,r5
   4264c:	5ac00104 	addi	r11,r11,4
   42650:	183ffc26 	beq	r3,zero,42644 <_malloc_r+0x624>
   42654:	5809883a 	mov	r4,r11
   42658:	003f0006 	br	4225c <_malloc_r+0x23c>
   4265c:	00805504 	movi	r2,340
   42660:	11001336 	bltu	r2,r4,426b0 <_malloc_r+0x690>
   42664:	8808d3fa 	srli	r4,r17,15
   42668:	21001dc4 	addi	r4,r4,119
   4266c:	210b883a 	add	r5,r4,r4
   42670:	003eb206 	br	4213c <_malloc_r+0x11c>
   42674:	00840004 	movi	r2,4096
   42678:	003f5d06 	br	423f0 <_malloc_r+0x3d0>
   4267c:	00800044 	movi	r2,1
   42680:	a0800115 	stw	r2,4(r20)
   42684:	a021883a 	mov	r16,r20
   42688:	0007883a 	mov	r3,zero
   4268c:	003f8106 	br	42494 <_malloc_r+0x474>
   42690:	280bd0ba 	srai	r5,r5,2
   42694:	01800044 	movi	r6,1
   42698:	38800117 	ldw	r2,4(r7)
   4269c:	314c983a 	sll	r6,r6,r5
   426a0:	180b883a 	mov	r5,r3
   426a4:	3084b03a 	or	r2,r6,r2
   426a8:	38800115 	stw	r2,4(r7)
   426ac:	003fa906 	br	42554 <_malloc_r+0x534>
   426b0:	00815504 	movi	r2,1364
   426b4:	11001836 	bltu	r2,r4,42718 <_malloc_r+0x6f8>
   426b8:	8808d4ba 	srli	r4,r17,18
   426bc:	21001f04 	addi	r4,r4,124
   426c0:	210b883a 	add	r5,r4,r4
   426c4:	003e9d06 	br	4213c <_malloc_r+0x11c>
   426c8:	bdc00404 	addi	r23,r23,16
   426cc:	003f2f06 	br	4238c <_malloc_r+0x36c>
   426d0:	01401504 	movi	r5,84
   426d4:	28c01f36 	bltu	r5,r3,42754 <_malloc_r+0x734>
   426d8:	100ad33a 	srli	r5,r2,12
   426dc:	29401b84 	addi	r5,r5,110
   426e0:	294d883a 	add	r6,r5,r5
   426e4:	003f8c06 	br	42518 <_malloc_r+0x4f8>
   426e8:	9c000217 	ldw	r16,8(r19)
   426ec:	00bfff04 	movi	r2,-4
   426f0:	80c00117 	ldw	r3,4(r16)
   426f4:	1886703a 	and	r3,r3,r2
   426f8:	003f6606 	br	42494 <_malloc_r+0x474>
   426fc:	e0c3ffcc 	andi	r3,fp,4095
   42700:	183f2f1e 	bne	r3,zero,423c0 <_malloc_r+0x3a0>
   42704:	98c00217 	ldw	r3,8(r19)
   42708:	bd49883a 	add	r4,r23,r21
   4270c:	21000054 	ori	r4,r4,1
   42710:	19000115 	stw	r4,4(r3)
   42714:	003f5506 	br	4246c <_malloc_r+0x44c>
   42718:	01403f04 	movi	r5,252
   4271c:	01001f84 	movi	r4,126
   42720:	003e8606 	br	4213c <_malloc_r+0x11c>
   42724:	9009883a 	mov	r4,r18
   42728:	81400204 	addi	r5,r16,8
   4272c:	0046d300 	call	46d30 <_free_r>
   42730:	00800174 	movhi	r2,5
   42734:	10879304 	addi	r2,r2,7756
   42738:	10800017 	ldw	r2,0(r2)
   4273c:	003f4b06 	br	4246c <_malloc_r+0x44c>
   42740:	00c00044 	movi	r3,1
   42744:	002f883a 	mov	r23,zero
   42748:	003f3406 	br	4241c <_malloc_r+0x3fc>
   4274c:	d5200715 	stw	r20,-32740(gp)
   42750:	003f2106 	br	423d8 <_malloc_r+0x3b8>
   42754:	01405504 	movi	r5,340
   42758:	28c00436 	bltu	r5,r3,4276c <_malloc_r+0x74c>
   4275c:	100ad3fa 	srli	r5,r2,15
   42760:	29401dc4 	addi	r5,r5,119
   42764:	294d883a 	add	r6,r5,r5
   42768:	003f6b06 	br	42518 <_malloc_r+0x4f8>
   4276c:	01415504 	movi	r5,1364
   42770:	28c00936 	bltu	r5,r3,42798 <_malloc_r+0x778>
   42774:	100ad4ba 	srli	r5,r2,18
   42778:	29401f04 	addi	r5,r5,124
   4277c:	294d883a 	add	r6,r5,r5
   42780:	003f6506 	br	42518 <_malloc_r+0x4f8>
   42784:	98800117 	ldw	r2,4(r19)
   42788:	0146303a 	nor	r3,zero,r5
   4278c:	1884703a 	and	r2,r3,r2
   42790:	98800115 	stw	r2,4(r19)
   42794:	003f9006 	br	425d8 <_malloc_r+0x5b8>
   42798:	01803f04 	movi	r6,252
   4279c:	01401f84 	movi	r5,126
   427a0:	003f5d06 	br	42518 <_malloc_r+0x4f8>

000427a4 <_open_r>:
   427a4:	defffd04 	addi	sp,sp,-12
   427a8:	dc400115 	stw	r17,4(sp)
   427ac:	dc000015 	stw	r16,0(sp)
   427b0:	2023883a 	mov	r17,r4
   427b4:	04000174 	movhi	r16,5
   427b8:	84078604 	addi	r16,r16,7704
   427bc:	2809883a 	mov	r4,r5
   427c0:	300b883a 	mov	r5,r6
   427c4:	380d883a 	mov	r6,r7
   427c8:	dfc00215 	stw	ra,8(sp)
   427cc:	80000015 	stw	zero,0(r16)
   427d0:	004b7a80 	call	4b7a8 <open>
   427d4:	00ffffc4 	movi	r3,-1
   427d8:	10c00526 	beq	r2,r3,427f0 <_open_r+0x4c>
   427dc:	dfc00217 	ldw	ra,8(sp)
   427e0:	dc400117 	ldw	r17,4(sp)
   427e4:	dc000017 	ldw	r16,0(sp)
   427e8:	dec00304 	addi	sp,sp,12
   427ec:	f800283a 	ret
   427f0:	80c00017 	ldw	r3,0(r16)
   427f4:	183ff926 	beq	r3,zero,427dc <_open_r+0x38>
   427f8:	88c00015 	stw	r3,0(r17)
   427fc:	dfc00217 	ldw	ra,8(sp)
   42800:	dc400117 	ldw	r17,4(sp)
   42804:	dc000017 	ldw	r16,0(sp)
   42808:	dec00304 	addi	sp,sp,12
   4280c:	f800283a 	ret

00042810 <_puts_r>:
   42810:	defff604 	addi	sp,sp,-40
   42814:	dc400815 	stw	r17,32(sp)
   42818:	2023883a 	mov	r17,r4
   4281c:	2809883a 	mov	r4,r5
   42820:	dc000715 	stw	r16,28(sp)
   42824:	dfc00915 	stw	ra,36(sp)
   42828:	2821883a 	mov	r16,r5
   4282c:	0042c540 	call	42c54 <strlen>
   42830:	10c00044 	addi	r3,r2,1
   42834:	d8800115 	stw	r2,4(sp)
   42838:	89400217 	ldw	r5,8(r17)
   4283c:	00800174 	movhi	r2,5
   42840:	10b99104 	addi	r2,r2,-6588
   42844:	d8800215 	stw	r2,8(sp)
   42848:	00800044 	movi	r2,1
   4284c:	d8800315 	stw	r2,12(sp)
   42850:	8809883a 	mov	r4,r17
   42854:	00800084 	movi	r2,2
   42858:	d9800404 	addi	r6,sp,16
   4285c:	dc000015 	stw	r16,0(sp)
   42860:	d8c00615 	stw	r3,24(sp)
   42864:	dec00415 	stw	sp,16(sp)
   42868:	d8800515 	stw	r2,20(sp)
   4286c:	00470000 	call	47000 <__sfvwrite_r>
   42870:	1000061e 	bne	r2,zero,4288c <_puts_r+0x7c>
   42874:	00800284 	movi	r2,10
   42878:	dfc00917 	ldw	ra,36(sp)
   4287c:	dc400817 	ldw	r17,32(sp)
   42880:	dc000717 	ldw	r16,28(sp)
   42884:	dec00a04 	addi	sp,sp,40
   42888:	f800283a 	ret
   4288c:	00bfffc4 	movi	r2,-1
   42890:	003ff906 	br	42878 <_puts_r+0x68>

00042894 <puts>:
   42894:	00800174 	movhi	r2,5
   42898:	1080ad04 	addi	r2,r2,692
   4289c:	200b883a 	mov	r5,r4
   428a0:	11000017 	ldw	r4,0(r2)
   428a4:	00428101 	jmpi	42810 <_puts_r>

000428a8 <lflush>:
   428a8:	20c0030b 	ldhu	r3,12(r4)
   428ac:	00800244 	movi	r2,9
   428b0:	18c0024c 	andi	r3,r3,9
   428b4:	18800226 	beq	r3,r2,428c0 <lflush+0x18>
   428b8:	0005883a 	mov	r2,zero
   428bc:	f800283a 	ret
   428c0:	00468401 	jmpi	46840 <fflush>

000428c4 <__srefill_r>:
   428c4:	defffd04 	addi	sp,sp,-12
   428c8:	dc400115 	stw	r17,4(sp)
   428cc:	dc000015 	stw	r16,0(sp)
   428d0:	dfc00215 	stw	ra,8(sp)
   428d4:	2023883a 	mov	r17,r4
   428d8:	2821883a 	mov	r16,r5
   428dc:	20000226 	beq	r4,zero,428e8 <__srefill_r+0x24>
   428e0:	20800e17 	ldw	r2,56(r4)
   428e4:	10004426 	beq	r2,zero,429f8 <__srefill_r+0x134>
   428e8:	8080030b 	ldhu	r2,12(r16)
   428ec:	80000115 	stw	zero,4(r16)
   428f0:	10c0080c 	andi	r3,r2,32
   428f4:	18ffffcc 	andi	r3,r3,65535
   428f8:	18e0001c 	xori	r3,r3,32768
   428fc:	18e00004 	addi	r3,r3,-32768
   42900:	1800371e 	bne	r3,zero,429e0 <__srefill_r+0x11c>
   42904:	10c0010c 	andi	r3,r2,4
   42908:	18ffffcc 	andi	r3,r3,65535
   4290c:	18e0001c 	xori	r3,r3,32768
   42910:	18e00004 	addi	r3,r3,-32768
   42914:	18002226 	beq	r3,zero,429a0 <__srefill_r+0xdc>
   42918:	81400c17 	ldw	r5,48(r16)
   4291c:	28000826 	beq	r5,zero,42940 <__srefill_r+0x7c>
   42920:	80801004 	addi	r2,r16,64
   42924:	28800226 	beq	r5,r2,42930 <__srefill_r+0x6c>
   42928:	8809883a 	mov	r4,r17
   4292c:	0046d300 	call	46d30 <_free_r>
   42930:	80800f17 	ldw	r2,60(r16)
   42934:	80000c15 	stw	zero,48(r16)
   42938:	80800115 	stw	r2,4(r16)
   4293c:	1000401e 	bne	r2,zero,42a40 <__srefill_r+0x17c>
   42940:	80800417 	ldw	r2,16(r16)
   42944:	10005026 	beq	r2,zero,42a88 <__srefill_r+0x1c4>
   42948:	8080030b 	ldhu	r2,12(r16)
   4294c:	108000cc 	andi	r2,r2,3
   42950:	10002b1e 	bne	r2,zero,42a00 <__srefill_r+0x13c>
   42954:	81800417 	ldw	r6,16(r16)
   42958:	80800817 	ldw	r2,32(r16)
   4295c:	81400717 	ldw	r5,28(r16)
   42960:	81c00517 	ldw	r7,20(r16)
   42964:	8809883a 	mov	r4,r17
   42968:	81800015 	stw	r6,0(r16)
   4296c:	103ee83a 	callr	r2
   42970:	8100030b 	ldhu	r4,12(r16)
   42974:	00f7ffc4 	movi	r3,-8193
   42978:	80800115 	stw	r2,4(r16)
   4297c:	20c6703a 	and	r3,r4,r3
   42980:	80c0030d 	sth	r3,12(r16)
   42984:	0080130e 	bge	zero,r2,429d4 <__srefill_r+0x110>
   42988:	0005883a 	mov	r2,zero
   4298c:	dfc00217 	ldw	ra,8(sp)
   42990:	dc400117 	ldw	r17,4(sp)
   42994:	dc000017 	ldw	r16,0(sp)
   42998:	dec00304 	addi	sp,sp,12
   4299c:	f800283a 	ret
   429a0:	10c0040c 	andi	r3,r2,16
   429a4:	18ffffcc 	andi	r3,r3,65535
   429a8:	18e0001c 	xori	r3,r3,32768
   429ac:	18e00004 	addi	r3,r3,-32768
   429b0:	18003926 	beq	r3,zero,42a98 <__srefill_r+0x1d4>
   429b4:	10c0020c 	andi	r3,r2,8
   429b8:	18ffffcc 	andi	r3,r3,65535
   429bc:	18e0001c 	xori	r3,r3,32768
   429c0:	18e00004 	addi	r3,r3,-32768
   429c4:	1800261e 	bne	r3,zero,42a60 <__srefill_r+0x19c>
   429c8:	10800114 	ori	r2,r2,4
   429cc:	8080030d 	sth	r2,12(r16)
   429d0:	003fdb06 	br	42940 <__srefill_r+0x7c>
   429d4:	1000111e 	bne	r2,zero,42a1c <__srefill_r+0x158>
   429d8:	18c00814 	ori	r3,r3,32
   429dc:	80c0030d 	sth	r3,12(r16)
   429e0:	00bfffc4 	movi	r2,-1
   429e4:	dfc00217 	ldw	ra,8(sp)
   429e8:	dc400117 	ldw	r17,4(sp)
   429ec:	dc000017 	ldw	r16,0(sp)
   429f0:	dec00304 	addi	sp,sp,12
   429f4:	f800283a 	ret
   429f8:	00469140 	call	46914 <__sinit>
   429fc:	003fba06 	br	428e8 <__srefill_r+0x24>
   42a00:	00800174 	movhi	r2,5
   42a04:	1080ac04 	addi	r2,r2,688
   42a08:	11000017 	ldw	r4,0(r2)
   42a0c:	01400134 	movhi	r5,4
   42a10:	294a2a04 	addi	r5,r5,10408
   42a14:	00474e40 	call	474e4 <_fwalk>
   42a18:	003fce06 	br	42954 <__srefill_r+0x90>
   42a1c:	18c01014 	ori	r3,r3,64
   42a20:	00bfffc4 	movi	r2,-1
   42a24:	80000115 	stw	zero,4(r16)
   42a28:	80c0030d 	sth	r3,12(r16)
   42a2c:	dfc00217 	ldw	ra,8(sp)
   42a30:	dc400117 	ldw	r17,4(sp)
   42a34:	dc000017 	ldw	r16,0(sp)
   42a38:	dec00304 	addi	sp,sp,12
   42a3c:	f800283a 	ret
   42a40:	80c00e17 	ldw	r3,56(r16)
   42a44:	0005883a 	mov	r2,zero
   42a48:	80c00015 	stw	r3,0(r16)
   42a4c:	dfc00217 	ldw	ra,8(sp)
   42a50:	dc400117 	ldw	r17,4(sp)
   42a54:	dc000017 	ldw	r16,0(sp)
   42a58:	dec00304 	addi	sp,sp,12
   42a5c:	f800283a 	ret
   42a60:	8809883a 	mov	r4,r17
   42a64:	800b883a 	mov	r5,r16
   42a68:	00466580 	call	46658 <_fflush_r>
   42a6c:	103fdc1e 	bne	r2,zero,429e0 <__srefill_r+0x11c>
   42a70:	8080030b 	ldhu	r2,12(r16)
   42a74:	00fffdc4 	movi	r3,-9
   42a78:	80000215 	stw	zero,8(r16)
   42a7c:	1884703a 	and	r2,r3,r2
   42a80:	80000615 	stw	zero,24(r16)
   42a84:	003fd006 	br	429c8 <__srefill_r+0x104>
   42a88:	8809883a 	mov	r4,r17
   42a8c:	800b883a 	mov	r5,r16
   42a90:	0041e500 	call	41e50 <__smakebuf_r>
   42a94:	003fac06 	br	42948 <__srefill_r+0x84>
   42a98:	00c00244 	movi	r3,9
   42a9c:	10801014 	ori	r2,r2,64
   42aa0:	88c00015 	stw	r3,0(r17)
   42aa4:	8080030d 	sth	r2,12(r16)
   42aa8:	00bfffc4 	movi	r2,-1
   42aac:	003fb706 	br	4298c <__srefill_r+0xc8>

00042ab0 <_sbrk_r>:
   42ab0:	defffd04 	addi	sp,sp,-12
   42ab4:	dc400115 	stw	r17,4(sp)
   42ab8:	dc000015 	stw	r16,0(sp)
   42abc:	2023883a 	mov	r17,r4
   42ac0:	04000174 	movhi	r16,5
   42ac4:	84078604 	addi	r16,r16,7704
   42ac8:	2809883a 	mov	r4,r5
   42acc:	dfc00215 	stw	ra,8(sp)
   42ad0:	80000015 	stw	zero,0(r16)
   42ad4:	004bac40 	call	4bac4 <sbrk>
   42ad8:	00ffffc4 	movi	r3,-1
   42adc:	10c00526 	beq	r2,r3,42af4 <_sbrk_r+0x44>
   42ae0:	dfc00217 	ldw	ra,8(sp)
   42ae4:	dc400117 	ldw	r17,4(sp)
   42ae8:	dc000017 	ldw	r16,0(sp)
   42aec:	dec00304 	addi	sp,sp,12
   42af0:	f800283a 	ret
   42af4:	80c00017 	ldw	r3,0(r16)
   42af8:	183ff926 	beq	r3,zero,42ae0 <_sbrk_r+0x30>
   42afc:	88c00015 	stw	r3,0(r17)
   42b00:	dfc00217 	ldw	ra,8(sp)
   42b04:	dc400117 	ldw	r17,4(sp)
   42b08:	dc000017 	ldw	r16,0(sp)
   42b0c:	dec00304 	addi	sp,sp,12
   42b10:	f800283a 	ret

00042b14 <__sread>:
   42b14:	defffe04 	addi	sp,sp,-8
   42b18:	dc000015 	stw	r16,0(sp)
   42b1c:	2821883a 	mov	r16,r5
   42b20:	2940038f 	ldh	r5,14(r5)
   42b24:	dfc00115 	stw	ra,4(sp)
   42b28:	0048ce00 	call	48ce0 <_read_r>
   42b2c:	10000716 	blt	r2,zero,42b4c <__sread+0x38>
   42b30:	80c01417 	ldw	r3,80(r16)
   42b34:	1887883a 	add	r3,r3,r2
   42b38:	80c01415 	stw	r3,80(r16)
   42b3c:	dfc00117 	ldw	ra,4(sp)
   42b40:	dc000017 	ldw	r16,0(sp)
   42b44:	dec00204 	addi	sp,sp,8
   42b48:	f800283a 	ret
   42b4c:	80c0030b 	ldhu	r3,12(r16)
   42b50:	18fbffcc 	andi	r3,r3,61439
   42b54:	80c0030d 	sth	r3,12(r16)
   42b58:	dfc00117 	ldw	ra,4(sp)
   42b5c:	dc000017 	ldw	r16,0(sp)
   42b60:	dec00204 	addi	sp,sp,8
   42b64:	f800283a 	ret

00042b68 <__swrite>:
   42b68:	2880030b 	ldhu	r2,12(r5)
   42b6c:	defffb04 	addi	sp,sp,-20
   42b70:	dcc00315 	stw	r19,12(sp)
   42b74:	10c0400c 	andi	r3,r2,256
   42b78:	18ffffcc 	andi	r3,r3,65535
   42b7c:	18e0001c 	xori	r3,r3,32768
   42b80:	dc800215 	stw	r18,8(sp)
   42b84:	dc400115 	stw	r17,4(sp)
   42b88:	dc000015 	stw	r16,0(sp)
   42b8c:	dfc00415 	stw	ra,16(sp)
   42b90:	18e00004 	addi	r3,r3,-32768
   42b94:	2821883a 	mov	r16,r5
   42b98:	2027883a 	mov	r19,r4
   42b9c:	3025883a 	mov	r18,r6
   42ba0:	3823883a 	mov	r17,r7
   42ba4:	18000526 	beq	r3,zero,42bbc <__swrite+0x54>
   42ba8:	2940038f 	ldh	r5,14(r5)
   42bac:	000d883a 	mov	r6,zero
   42bb0:	01c00084 	movi	r7,2
   42bb4:	00477840 	call	47784 <_lseek_r>
   42bb8:	8080030b 	ldhu	r2,12(r16)
   42bbc:	8140038f 	ldh	r5,14(r16)
   42bc0:	10bbffcc 	andi	r2,r2,61439
   42bc4:	9809883a 	mov	r4,r19
   42bc8:	900d883a 	mov	r6,r18
   42bcc:	880f883a 	mov	r7,r17
   42bd0:	8080030d 	sth	r2,12(r16)
   42bd4:	dfc00417 	ldw	ra,16(sp)
   42bd8:	dcc00317 	ldw	r19,12(sp)
   42bdc:	dc800217 	ldw	r18,8(sp)
   42be0:	dc400117 	ldw	r17,4(sp)
   42be4:	dc000017 	ldw	r16,0(sp)
   42be8:	dec00504 	addi	sp,sp,20
   42bec:	0044bbc1 	jmpi	44bbc <_write_r>

00042bf0 <__sseek>:
   42bf0:	defffe04 	addi	sp,sp,-8
   42bf4:	dc000015 	stw	r16,0(sp)
   42bf8:	2821883a 	mov	r16,r5
   42bfc:	2940038f 	ldh	r5,14(r5)
   42c00:	dfc00115 	stw	ra,4(sp)
   42c04:	00477840 	call	47784 <_lseek_r>
   42c08:	00ffffc4 	movi	r3,-1
   42c0c:	10c00826 	beq	r2,r3,42c30 <__sseek+0x40>
   42c10:	80c0030b 	ldhu	r3,12(r16)
   42c14:	80801415 	stw	r2,80(r16)
   42c18:	18c40014 	ori	r3,r3,4096
   42c1c:	80c0030d 	sth	r3,12(r16)
   42c20:	dfc00117 	ldw	ra,4(sp)
   42c24:	dc000017 	ldw	r16,0(sp)
   42c28:	dec00204 	addi	sp,sp,8
   42c2c:	f800283a 	ret
   42c30:	80c0030b 	ldhu	r3,12(r16)
   42c34:	18fbffcc 	andi	r3,r3,61439
   42c38:	80c0030d 	sth	r3,12(r16)
   42c3c:	dfc00117 	ldw	ra,4(sp)
   42c40:	dc000017 	ldw	r16,0(sp)
   42c44:	dec00204 	addi	sp,sp,8
   42c48:	f800283a 	ret

00042c4c <__sclose>:
   42c4c:	2940038f 	ldh	r5,14(r5)
   42c50:	0044d9c1 	jmpi	44d9c <_close_r>

00042c54 <strlen>:
   42c54:	208000cc 	andi	r2,r4,3
   42c58:	10001f1e 	bne	r2,zero,42cd8 <strlen+0x84>
   42c5c:	20800017 	ldw	r2,0(r4)
   42c60:	01ffbff4 	movhi	r7,65279
   42c64:	39ffbfc4 	addi	r7,r7,-257
   42c68:	01a02074 	movhi	r6,32897
   42c6c:	31a02004 	addi	r6,r6,-32640
   42c70:	11c7883a 	add	r3,r2,r7
   42c74:	0084303a 	nor	r2,zero,r2
   42c78:	1886703a 	and	r3,r3,r2
   42c7c:	1986703a 	and	r3,r3,r6
   42c80:	2005883a 	mov	r2,r4
   42c84:	1800101e 	bne	r3,zero,42cc8 <strlen+0x74>
   42c88:	10800104 	addi	r2,r2,4
   42c8c:	10c00017 	ldw	r3,0(r2)
   42c90:	19cb883a 	add	r5,r3,r7
   42c94:	00c6303a 	nor	r3,zero,r3
   42c98:	28c6703a 	and	r3,r5,r3
   42c9c:	1986703a 	and	r3,r3,r6
   42ca0:	1800091e 	bne	r3,zero,42cc8 <strlen+0x74>
   42ca4:	10800104 	addi	r2,r2,4
   42ca8:	10c00017 	ldw	r3,0(r2)
   42cac:	19cb883a 	add	r5,r3,r7
   42cb0:	00c6303a 	nor	r3,zero,r3
   42cb4:	28c6703a 	and	r3,r5,r3
   42cb8:	1986703a 	and	r3,r3,r6
   42cbc:	183ff226 	beq	r3,zero,42c88 <strlen+0x34>
   42cc0:	00000106 	br	42cc8 <strlen+0x74>
   42cc4:	10800044 	addi	r2,r2,1
   42cc8:	10c00007 	ldb	r3,0(r2)
   42ccc:	183ffd1e 	bne	r3,zero,42cc4 <strlen+0x70>
   42cd0:	1105c83a 	sub	r2,r2,r4
   42cd4:	f800283a 	ret
   42cd8:	2005883a 	mov	r2,r4
   42cdc:	003ffa06 	br	42cc8 <strlen+0x74>

00042ce0 <_times_r>:
   42ce0:	2809883a 	mov	r4,r5
   42ce4:	004bbc41 	jmpi	4bbc4 <times>

00042ce8 <__sprint_r>:
   42ce8:	30800217 	ldw	r2,8(r6)
   42cec:	defffe04 	addi	sp,sp,-8
   42cf0:	dc000015 	stw	r16,0(sp)
   42cf4:	dfc00115 	stw	ra,4(sp)
   42cf8:	3021883a 	mov	r16,r6
   42cfc:	10000226 	beq	r2,zero,42d08 <__sprint_r+0x20>
   42d00:	00470000 	call	47000 <__sfvwrite_r>
   42d04:	80000215 	stw	zero,8(r16)
   42d08:	80000115 	stw	zero,4(r16)
   42d0c:	dfc00117 	ldw	ra,4(sp)
   42d10:	dc000017 	ldw	r16,0(sp)
   42d14:	dec00204 	addi	sp,sp,8
   42d18:	f800283a 	ret

00042d1c <___vfprintf_internal_r>:
   42d1c:	defeb904 	addi	sp,sp,-1308
   42d20:	dc013d15 	stw	r16,1268(sp)
   42d24:	d9013015 	stw	r4,1216(sp)
   42d28:	dfc14615 	stw	ra,1304(sp)
   42d2c:	df014515 	stw	fp,1300(sp)
   42d30:	ddc14415 	stw	r23,1296(sp)
   42d34:	dd814315 	stw	r22,1292(sp)
   42d38:	dd414215 	stw	r21,1288(sp)
   42d3c:	dd014115 	stw	r20,1284(sp)
   42d40:	dcc14015 	stw	r19,1280(sp)
   42d44:	dc813f15 	stw	r18,1276(sp)
   42d48:	dc413e15 	stw	r17,1272(sp)
   42d4c:	d9412915 	stw	r5,1188(sp)
   42d50:	3021883a 	mov	r16,r6
   42d54:	d9c12d15 	stw	r7,1204(sp)
   42d58:	00477500 	call	47750 <_localeconv_r>
   42d5c:	10800017 	ldw	r2,0(r2)
   42d60:	d9013017 	ldw	r4,1216(sp)
   42d64:	d8013315 	stw	zero,1228(sp)
   42d68:	d8813715 	stw	r2,1244(sp)
   42d6c:	d8013415 	stw	zero,1232(sp)
   42d70:	20000226 	beq	r4,zero,42d7c <___vfprintf_internal_r+0x60>
   42d74:	20800e17 	ldw	r2,56(r4)
   42d78:	10014b26 	beq	r2,zero,432a8 <___vfprintf_internal_r+0x58c>
   42d7c:	d8c12917 	ldw	r3,1188(sp)
   42d80:	1880030b 	ldhu	r2,12(r3)
   42d84:	10c0020c 	andi	r3,r2,8
   42d88:	18ffffcc 	andi	r3,r3,65535
   42d8c:	18e0001c 	xori	r3,r3,32768
   42d90:	18e00004 	addi	r3,r3,-32768
   42d94:	1800ed26 	beq	r3,zero,4314c <___vfprintf_internal_r+0x430>
   42d98:	d9012917 	ldw	r4,1188(sp)
   42d9c:	20c00417 	ldw	r3,16(r4)
   42da0:	1800ea26 	beq	r3,zero,4314c <___vfprintf_internal_r+0x430>
   42da4:	1100068c 	andi	r4,r2,26
   42da8:	00c00284 	movi	r3,10
   42dac:	20c0f026 	beq	r4,r3,43170 <___vfprintf_internal_r+0x454>
   42db0:	d9010dc4 	addi	r4,sp,1079
   42db4:	d8810e04 	addi	r2,sp,1080
   42db8:	dc413017 	ldw	r17,1216(sp)
   42dbc:	d8c00404 	addi	r3,sp,16
   42dc0:	d9012615 	stw	r4,1176(sp)
   42dc4:	1109c83a 	sub	r4,r2,r4
   42dc8:	d8812715 	stw	r2,1180(sp)
   42dcc:	d8c11b15 	stw	r3,1132(sp)
   42dd0:	d8011d15 	stw	zero,1140(sp)
   42dd4:	d8011c15 	stw	zero,1136(sp)
   42dd8:	802b883a 	mov	r21,r16
   42ddc:	d8013215 	stw	zero,1224(sp)
   42de0:	d8013615 	stw	zero,1240(sp)
   42de4:	d8013515 	stw	zero,1236(sp)
   42de8:	d8012c15 	stw	zero,1200(sp)
   42dec:	1813883a 	mov	r9,r3
   42df0:	d9013915 	stw	r4,1252(sp)
   42df4:	a8800007 	ldb	r2,0(r21)
   42df8:	1002f326 	beq	r2,zero,439c8 <___vfprintf_internal_r+0xcac>
   42dfc:	00c00944 	movi	r3,37
   42e00:	a825883a 	mov	r18,r21
   42e04:	10c0021e 	bne	r2,r3,42e10 <___vfprintf_internal_r+0xf4>
   42e08:	00001406 	br	42e5c <___vfprintf_internal_r+0x140>
   42e0c:	10c00326 	beq	r2,r3,42e1c <___vfprintf_internal_r+0x100>
   42e10:	94800044 	addi	r18,r18,1
   42e14:	90800007 	ldb	r2,0(r18)
   42e18:	103ffc1e 	bne	r2,zero,42e0c <___vfprintf_internal_r+0xf0>
   42e1c:	9561c83a 	sub	r16,r18,r21
   42e20:	80000e26 	beq	r16,zero,42e5c <___vfprintf_internal_r+0x140>
   42e24:	da011d17 	ldw	r8,1140(sp)
   42e28:	d8c11c17 	ldw	r3,1136(sp)
   42e2c:	4d400015 	stw	r21,0(r9)
   42e30:	4c000115 	stw	r16,4(r9)
   42e34:	4411883a 	add	r8,r8,r16
   42e38:	18c00044 	addi	r3,r3,1
   42e3c:	da011d15 	stw	r8,1140(sp)
   42e40:	d8c11c15 	stw	r3,1136(sp)
   42e44:	008001c4 	movi	r2,7
   42e48:	10c11016 	blt	r2,r3,4328c <___vfprintf_internal_r+0x570>
   42e4c:	4a400204 	addi	r9,r9,8
   42e50:	d8812c17 	ldw	r2,1200(sp)
   42e54:	1405883a 	add	r2,r2,r16
   42e58:	d8812c15 	stw	r2,1200(sp)
   42e5c:	90800007 	ldb	r2,0(r18)
   42e60:	1000ee26 	beq	r2,zero,4321c <___vfprintf_internal_r+0x500>
   42e64:	95400044 	addi	r21,r18,1
   42e68:	94800047 	ldb	r18,1(r18)
   42e6c:	073fffc4 	movi	fp,-1
   42e70:	e007883a 	mov	r3,fp
   42e74:	d8012585 	stb	zero,1174(sp)
   42e78:	d8012e15 	stw	zero,1208(sp)
   42e7c:	0021883a 	mov	r16,zero
   42e80:	05001604 	movi	r20,88
   42e84:	04c00244 	movi	r19,9
   42e88:	4839883a 	mov	fp,r9
   42e8c:	ad400044 	addi	r21,r21,1
   42e90:	90bff804 	addi	r2,r18,-32
   42e94:	a080462e 	bgeu	r20,r2,42fb0 <___vfprintf_internal_r+0x294>
   42e98:	e013883a 	mov	r9,fp
   42e9c:	9000df26 	beq	r18,zero,4321c <___vfprintf_internal_r+0x500>
   42ea0:	00c00044 	movi	r3,1
   42ea4:	d8c12815 	stw	r3,1184(sp)
   42ea8:	dc810405 	stb	r18,1040(sp)
   42eac:	d8012585 	stb	zero,1174(sp)
   42eb0:	d8c12b15 	stw	r3,1196(sp)
   42eb4:	dcc10404 	addi	r19,sp,1040
   42eb8:	d8013115 	stw	zero,1220(sp)
   42ebc:	80c0008c 	andi	r3,r16,2
   42ec0:	d8c12a15 	stw	r3,1192(sp)
   42ec4:	18000326 	beq	r3,zero,42ed4 <___vfprintf_internal_r+0x1b8>
   42ec8:	d8c12817 	ldw	r3,1184(sp)
   42ecc:	18c00084 	addi	r3,r3,2
   42ed0:	d8c12815 	stw	r3,1184(sp)
   42ed4:	80c0210c 	andi	r3,r16,132
   42ed8:	d8c12f15 	stw	r3,1212(sp)
   42edc:	1802251e 	bne	r3,zero,43774 <___vfprintf_internal_r+0xa58>
   42ee0:	d9012e17 	ldw	r4,1208(sp)
   42ee4:	d8c12817 	ldw	r3,1184(sp)
   42ee8:	20edc83a 	sub	r22,r4,r3
   42eec:	0582210e 	bge	zero,r22,43774 <___vfprintf_internal_r+0xa58>
   42ef0:	02800404 	movi	r10,16
   42ef4:	da011d17 	ldw	r8,1140(sp)
   42ef8:	d8c11c17 	ldw	r3,1136(sp)
   42efc:	05c00174 	movhi	r23,5
   42f00:	bdf9a284 	addi	r23,r23,-6518
   42f04:	5580200e 	bge	r10,r22,42f88 <___vfprintf_internal_r+0x26c>
   42f08:	dc813815 	stw	r18,1248(sp)
   42f0c:	5039883a 	mov	fp,r10
   42f10:	b825883a 	mov	r18,r23
   42f14:	050001c4 	movi	r20,7
   42f18:	b02f883a 	mov	r23,r22
   42f1c:	802d883a 	mov	r22,r16
   42f20:	dc012917 	ldw	r16,1188(sp)
   42f24:	00000306 	br	42f34 <___vfprintf_internal_r+0x218>
   42f28:	bdfffc04 	addi	r23,r23,-16
   42f2c:	4a400204 	addi	r9,r9,8
   42f30:	e5c0110e 	bge	fp,r23,42f78 <___vfprintf_internal_r+0x25c>
   42f34:	4c800015 	stw	r18,0(r9)
   42f38:	4f000115 	stw	fp,4(r9)
   42f3c:	42000404 	addi	r8,r8,16
   42f40:	18c00044 	addi	r3,r3,1
   42f44:	da011d15 	stw	r8,1140(sp)
   42f48:	d8c11c15 	stw	r3,1136(sp)
   42f4c:	a0fff60e 	bge	r20,r3,42f28 <___vfprintf_internal_r+0x20c>
   42f50:	8809883a 	mov	r4,r17
   42f54:	800b883a 	mov	r5,r16
   42f58:	d9811b04 	addi	r6,sp,1132
   42f5c:	0042ce80 	call	42ce8 <__sprint_r>
   42f60:	1000b41e 	bne	r2,zero,43234 <___vfprintf_internal_r+0x518>
   42f64:	bdfffc04 	addi	r23,r23,-16
   42f68:	da011d17 	ldw	r8,1140(sp)
   42f6c:	d8c11c17 	ldw	r3,1136(sp)
   42f70:	da400404 	addi	r9,sp,16
   42f74:	e5ffef16 	blt	fp,r23,42f34 <___vfprintf_internal_r+0x218>
   42f78:	b021883a 	mov	r16,r22
   42f7c:	b82d883a 	mov	r22,r23
   42f80:	902f883a 	mov	r23,r18
   42f84:	dc813817 	ldw	r18,1248(sp)
   42f88:	4dc00015 	stw	r23,0(r9)
   42f8c:	4d800115 	stw	r22,4(r9)
   42f90:	4591883a 	add	r8,r8,r22
   42f94:	18c00044 	addi	r3,r3,1
   42f98:	da011d15 	stw	r8,1140(sp)
   42f9c:	d8c11c15 	stw	r3,1136(sp)
   42fa0:	008001c4 	movi	r2,7
   42fa4:	10c3fe16 	blt	r2,r3,43fa0 <___vfprintf_internal_r+0x1284>
   42fa8:	4a400204 	addi	r9,r9,8
   42fac:	0001f306 	br	4377c <___vfprintf_internal_r+0xa60>
   42fb0:	1085883a 	add	r2,r2,r2
   42fb4:	1085883a 	add	r2,r2,r2
   42fb8:	01000134 	movhi	r4,4
   42fbc:	210bf304 	addi	r4,r4,12236
   42fc0:	1105883a 	add	r2,r2,r4
   42fc4:	10800017 	ldw	r2,0(r2)
   42fc8:	1000683a 	jmp	r2
   42fcc:	000436a8 	cmpgeui	zero,zero,4314
   42fd0:	00042e98 	cmpnei	zero,zero,4282
   42fd4:	00042e98 	cmpnei	zero,zero,4282
   42fd8:	000436c0 	call	436c <__alt_mem_mem3-0x3bc94>
   42fdc:	00042e98 	cmpnei	zero,zero,4282
   42fe0:	00042e98 	cmpnei	zero,zero,4282
   42fe4:	00042e98 	cmpnei	zero,zero,4282
   42fe8:	00042e98 	cmpnei	zero,zero,4282
   42fec:	00042e98 	cmpnei	zero,zero,4282
   42ff0:	00042e98 	cmpnei	zero,zero,4282
   42ff4:	00043578 	rdprs	zero,zero,4309
   42ff8:	0004370c 	andi	zero,zero,4316
   42ffc:	00042e98 	cmpnei	zero,zero,4282
   43000:	00043140 	call	4314 <__alt_mem_mem3-0x3bcec>
   43004:	000434e0 	cmpeqi	zero,zero,4307
   43008:	00042e98 	cmpnei	zero,zero,4282
   4300c:	000436cc 	andi	zero,zero,4315
   43010:	000436d8 	cmpnei	zero,zero,4315
   43014:	000436d8 	cmpnei	zero,zero,4315
   43018:	000436d8 	cmpnei	zero,zero,4315
   4301c:	000436d8 	cmpnei	zero,zero,4315
   43020:	000436d8 	cmpnei	zero,zero,4315
   43024:	000436d8 	cmpnei	zero,zero,4315
   43028:	000436d8 	cmpnei	zero,zero,4315
   4302c:	000436d8 	cmpnei	zero,zero,4315
   43030:	000436d8 	cmpnei	zero,zero,4315
   43034:	00042e98 	cmpnei	zero,zero,4282
   43038:	00042e98 	cmpnei	zero,zero,4282
   4303c:	00042e98 	cmpnei	zero,zero,4282
   43040:	00042e98 	cmpnei	zero,zero,4282
   43044:	00042e98 	cmpnei	zero,zero,4282
   43048:	00042e98 	cmpnei	zero,zero,4282
   4304c:	00042e98 	cmpnei	zero,zero,4282
   43050:	00042e98 	cmpnei	zero,zero,4282
   43054:	00042e98 	cmpnei	zero,zero,4282
   43058:	00042e98 	cmpnei	zero,zero,4282
   4305c:	000432b0 	cmpltui	zero,zero,4298
   43060:	00043370 	cmpltui	zero,zero,4301
   43064:	00042e98 	cmpnei	zero,zero,4282
   43068:	00043370 	cmpltui	zero,zero,4301
   4306c:	00042e98 	cmpnei	zero,zero,4282
   43070:	00042e98 	cmpnei	zero,zero,4282
   43074:	00042e98 	cmpnei	zero,zero,4282
   43078:	00042e98 	cmpnei	zero,zero,4282
   4307c:	00043404 	movi	zero,4304
   43080:	00042e98 	cmpnei	zero,zero,4282
   43084:	00042e98 	cmpnei	zero,zero,4282
   43088:	00043410 	cmplti	zero,zero,4304
   4308c:	00042e98 	cmpnei	zero,zero,4282
   43090:	00042e98 	cmpnei	zero,zero,4282
   43094:	00042e98 	cmpnei	zero,zero,4282
   43098:	00042e98 	cmpnei	zero,zero,4282
   4309c:	00042e98 	cmpnei	zero,zero,4282
   430a0:	00043448 	cmpgei	zero,zero,4305
   430a4:	00042e98 	cmpnei	zero,zero,4282
   430a8:	00042e98 	cmpnei	zero,zero,4282
   430ac:	00043484 	movi	zero,4306
   430b0:	00042e98 	cmpnei	zero,zero,4282
   430b4:	00042e98 	cmpnei	zero,zero,4282
   430b8:	00042e98 	cmpnei	zero,zero,4282
   430bc:	00042e98 	cmpnei	zero,zero,4282
   430c0:	00042e98 	cmpnei	zero,zero,4282
   430c4:	00042e98 	cmpnei	zero,zero,4282
   430c8:	00042e98 	cmpnei	zero,zero,4282
   430cc:	00042e98 	cmpnei	zero,zero,4282
   430d0:	00042e98 	cmpnei	zero,zero,4282
   430d4:	00042e98 	cmpnei	zero,zero,4282
   430d8:	0004371c 	xori	zero,zero,4316
   430dc:	00043750 	cmplti	zero,zero,4317
   430e0:	00043370 	cmpltui	zero,zero,4301
   430e4:	00043370 	cmpltui	zero,zero,4301
   430e8:	00043370 	cmpltui	zero,zero,4301
   430ec:	0004369c 	xori	zero,zero,4314
   430f0:	00043750 	cmplti	zero,zero,4317
   430f4:	00042e98 	cmpnei	zero,zero,4282
   430f8:	00042e98 	cmpnei	zero,zero,4282
   430fc:	00043528 	cmpgeui	zero,zero,4308
   43100:	00042e98 	cmpnei	zero,zero,4282
   43104:	00043540 	call	4354 <__alt_mem_mem3-0x3bcac>
   43108:	0004375c 	xori	zero,zero,4317
   4310c:	000435a0 	cmpeqi	zero,zero,4310
   43110:	000435f0 	cmpltui	zero,zero,4311
   43114:	00042e98 	cmpnei	zero,zero,4282
   43118:	000435fc 	xorhi	zero,zero,4311
   4311c:	00042e98 	cmpnei	zero,zero,4282
   43120:	00043768 	cmpgeui	zero,zero,4317
   43124:	00042e98 	cmpnei	zero,zero,4282
   43128:	00042e98 	cmpnei	zero,zero,4282
   4312c:	00043660 	cmpeqi	zero,zero,4313
   43130:	d9012e17 	ldw	r4,1208(sp)
   43134:	d8812d15 	stw	r2,1204(sp)
   43138:	0109c83a 	sub	r4,zero,r4
   4313c:	d9012e15 	stw	r4,1208(sp)
   43140:	84000114 	ori	r16,r16,4
   43144:	ac800007 	ldb	r18,0(r21)
   43148:	003f5006 	br	42e8c <___vfprintf_internal_r+0x170>
   4314c:	d9013017 	ldw	r4,1216(sp)
   43150:	d9412917 	ldw	r5,1188(sp)
   43154:	0044c280 	call	44c28 <__swsetup_r>
   43158:	10003d1e 	bne	r2,zero,43250 <___vfprintf_internal_r+0x534>
   4315c:	d8c12917 	ldw	r3,1188(sp)
   43160:	1880030b 	ldhu	r2,12(r3)
   43164:	00c00284 	movi	r3,10
   43168:	1100068c 	andi	r4,r2,26
   4316c:	20ff101e 	bne	r4,r3,42db0 <___vfprintf_internal_r+0x94>
   43170:	d9012917 	ldw	r4,1188(sp)
   43174:	20c0038b 	ldhu	r3,14(r4)
   43178:	193fffcc 	andi	r4,r3,65535
   4317c:	2120001c 	xori	r4,r4,32768
   43180:	21200004 	addi	r4,r4,-32768
   43184:	203f0a16 	blt	r4,zero,42db0 <___vfprintf_internal_r+0x94>
   43188:	d9012917 	ldw	r4,1188(sp)
   4318c:	d9c12d17 	ldw	r7,1204(sp)
   43190:	10bfff4c 	andi	r2,r2,65533
   43194:	22800717 	ldw	r10,28(r4)
   43198:	22400917 	ldw	r9,36(r4)
   4319c:	d9013017 	ldw	r4,1216(sp)
   431a0:	02010004 	movi	r8,1024
   431a4:	d881070d 	sth	r2,1052(sp)
   431a8:	d9410404 	addi	r5,sp,1040
   431ac:	d8800404 	addi	r2,sp,16
   431b0:	800d883a 	mov	r6,r16
   431b4:	d8c1078d 	sth	r3,1054(sp)
   431b8:	da810b15 	stw	r10,1068(sp)
   431bc:	da410d15 	stw	r9,1076(sp)
   431c0:	d8810415 	stw	r2,1040(sp)
   431c4:	d8810815 	stw	r2,1056(sp)
   431c8:	da010615 	stw	r8,1048(sp)
   431cc:	da010915 	stw	r8,1060(sp)
   431d0:	d8010a15 	stw	zero,1064(sp)
   431d4:	0042d1c0 	call	42d1c <___vfprintf_internal_r>
   431d8:	d8812c15 	stw	r2,1200(sp)
   431dc:	10000416 	blt	r2,zero,431f0 <___vfprintf_internal_r+0x4d4>
   431e0:	d9013017 	ldw	r4,1216(sp)
   431e4:	d9410404 	addi	r5,sp,1040
   431e8:	00466580 	call	46658 <_fflush_r>
   431ec:	1006501e 	bne	r2,zero,44b30 <___vfprintf_internal_r+0x1e14>
   431f0:	d881070b 	ldhu	r2,1052(sp)
   431f4:	1080100c 	andi	r2,r2,64
   431f8:	10bfffcc 	andi	r2,r2,65535
   431fc:	10a0001c 	xori	r2,r2,32768
   43200:	10a00004 	addi	r2,r2,-32768
   43204:	10001426 	beq	r2,zero,43258 <___vfprintf_internal_r+0x53c>
   43208:	d8c12917 	ldw	r3,1188(sp)
   4320c:	1880030b 	ldhu	r2,12(r3)
   43210:	10801014 	ori	r2,r2,64
   43214:	1880030d 	sth	r2,12(r3)
   43218:	00000f06 	br	43258 <___vfprintf_internal_r+0x53c>
   4321c:	d8811d17 	ldw	r2,1140(sp)
   43220:	10000426 	beq	r2,zero,43234 <___vfprintf_internal_r+0x518>
   43224:	d9013017 	ldw	r4,1216(sp)
   43228:	d9412917 	ldw	r5,1188(sp)
   4322c:	d9811b04 	addi	r6,sp,1132
   43230:	0042ce80 	call	42ce8 <__sprint_r>
   43234:	d8c12917 	ldw	r3,1188(sp)
   43238:	1880030b 	ldhu	r2,12(r3)
   4323c:	1080100c 	andi	r2,r2,64
   43240:	10bfffcc 	andi	r2,r2,65535
   43244:	10a0001c 	xori	r2,r2,32768
   43248:	10a00004 	addi	r2,r2,-32768
   4324c:	10000226 	beq	r2,zero,43258 <___vfprintf_internal_r+0x53c>
   43250:	00bfffc4 	movi	r2,-1
   43254:	d8812c15 	stw	r2,1200(sp)
   43258:	d8812c17 	ldw	r2,1200(sp)
   4325c:	dfc14617 	ldw	ra,1304(sp)
   43260:	df014517 	ldw	fp,1300(sp)
   43264:	ddc14417 	ldw	r23,1296(sp)
   43268:	dd814317 	ldw	r22,1292(sp)
   4326c:	dd414217 	ldw	r21,1288(sp)
   43270:	dd014117 	ldw	r20,1284(sp)
   43274:	dcc14017 	ldw	r19,1280(sp)
   43278:	dc813f17 	ldw	r18,1276(sp)
   4327c:	dc413e17 	ldw	r17,1272(sp)
   43280:	dc013d17 	ldw	r16,1268(sp)
   43284:	dec14704 	addi	sp,sp,1308
   43288:	f800283a 	ret
   4328c:	d9412917 	ldw	r5,1188(sp)
   43290:	8809883a 	mov	r4,r17
   43294:	d9811b04 	addi	r6,sp,1132
   43298:	0042ce80 	call	42ce8 <__sprint_r>
   4329c:	103fe51e 	bne	r2,zero,43234 <___vfprintf_internal_r+0x518>
   432a0:	da400404 	addi	r9,sp,16
   432a4:	003eea06 	br	42e50 <___vfprintf_internal_r+0x134>
   432a8:	00469140 	call	46914 <__sinit>
   432ac:	003eb306 	br	42d7c <___vfprintf_internal_r+0x60>
   432b0:	e013883a 	mov	r9,fp
   432b4:	84000414 	ori	r16,r16,16
   432b8:	1839883a 	mov	fp,r3
   432bc:	8080080c 	andi	r2,r16,32
   432c0:	10034426 	beq	r2,zero,43fd4 <___vfprintf_internal_r+0x12b8>
   432c4:	d8c12d17 	ldw	r3,1204(sp)
   432c8:	18800117 	ldw	r2,4(r3)
   432cc:	1dc00017 	ldw	r23,0(r3)
   432d0:	18c00204 	addi	r3,r3,8
   432d4:	d8c12d15 	stw	r3,1204(sp)
   432d8:	102d883a 	mov	r22,r2
   432dc:	1003020e 	bge	r2,zero,43ee8 <___vfprintf_internal_r+0x11cc>
   432e0:	05efc83a 	sub	r23,zero,r23
   432e4:	b804c03a 	cmpne	r2,r23,zero
   432e8:	05adc83a 	sub	r22,zero,r22
   432ec:	b0adc83a 	sub	r22,r22,r2
   432f0:	00800b44 	movi	r2,45
   432f4:	d8812585 	stb	r2,1174(sp)
   432f8:	00c00044 	movi	r3,1
   432fc:	bd84b03a 	or	r2,r23,r22
   43300:	e0000216 	blt	fp,zero,4330c <___vfprintf_internal_r+0x5f0>
   43304:	013fdfc4 	movi	r4,-129
   43308:	8120703a 	and	r16,r16,r4
   4330c:	1001cc1e 	bne	r2,zero,43a40 <___vfprintf_internal_r+0xd24>
   43310:	e001cb1e 	bne	fp,zero,43a40 <___vfprintf_internal_r+0xd24>
   43314:	18c03fcc 	andi	r3,r3,255
   43318:	1802ca1e 	bne	r3,zero,43e44 <___vfprintf_internal_r+0x1128>
   4331c:	8080004c 	andi	r2,r16,1
   43320:	1002c826 	beq	r2,zero,43e44 <___vfprintf_internal_r+0x1128>
   43324:	d8c13917 	ldw	r3,1252(sp)
   43328:	00800c04 	movi	r2,48
   4332c:	d8810dc5 	stb	r2,1079(sp)
   43330:	d8c12b15 	stw	r3,1196(sp)
   43334:	dcc10dc4 	addi	r19,sp,1079
   43338:	d8812b17 	ldw	r2,1196(sp)
   4333c:	d8812815 	stw	r2,1184(sp)
   43340:	1700010e 	bge	r2,fp,43348 <___vfprintf_internal_r+0x62c>
   43344:	df012815 	stw	fp,1184(sp)
   43348:	d8812583 	ldbu	r2,1174(sp)
   4334c:	df013115 	stw	fp,1220(sp)
   43350:	10803fcc 	andi	r2,r2,255
   43354:	1080201c 	xori	r2,r2,128
   43358:	10bfe004 	addi	r2,r2,-128
   4335c:	103ed726 	beq	r2,zero,42ebc <___vfprintf_internal_r+0x1a0>
   43360:	d8c12817 	ldw	r3,1184(sp)
   43364:	18c00044 	addi	r3,r3,1
   43368:	d8c12815 	stw	r3,1184(sp)
   4336c:	003ed306 	br	42ebc <___vfprintf_internal_r+0x1a0>
   43370:	8080020c 	andi	r2,r16,8
   43374:	e013883a 	mov	r9,fp
   43378:	1839883a 	mov	fp,r3
   4337c:	1003a626 	beq	r2,zero,44218 <___vfprintf_internal_r+0x14fc>
   43380:	d9012d17 	ldw	r4,1204(sp)
   43384:	25800017 	ldw	r22,0(r4)
   43388:	25000117 	ldw	r20,4(r4)
   4338c:	21000204 	addi	r4,r4,8
   43390:	d9012d15 	stw	r4,1204(sp)
   43394:	dd813315 	stw	r22,1228(sp)
   43398:	dd013415 	stw	r20,1232(sp)
   4339c:	b009883a 	mov	r4,r22
   433a0:	a00b883a 	mov	r5,r20
   433a4:	da413c15 	stw	r9,1264(sp)
   433a8:	00493480 	call	49348 <__isinfd>
   433ac:	da413c17 	ldw	r9,1264(sp)
   433b0:	b009883a 	mov	r4,r22
   433b4:	a00b883a 	mov	r5,r20
   433b8:	10041d26 	beq	r2,zero,44430 <___vfprintf_internal_r+0x1714>
   433bc:	000d883a 	mov	r6,zero
   433c0:	000f883a 	mov	r7,zero
   433c4:	004ab500 	call	4ab50 <__ltdf2>
   433c8:	da413c17 	ldw	r9,1264(sp)
   433cc:	1004da16 	blt	r2,zero,44738 <___vfprintf_internal_r+0x1a1c>
   433d0:	d8812583 	ldbu	r2,1174(sp)
   433d4:	00c011c4 	movi	r3,71
   433d8:	1c83d116 	blt	r3,r18,44320 <___vfprintf_internal_r+0x1604>
   433dc:	04c00174 	movhi	r19,5
   433e0:	9cf99204 	addi	r19,r19,-6584
   433e4:	00c000c4 	movi	r3,3
   433e8:	d8c12815 	stw	r3,1184(sp)
   433ec:	00ffdfc4 	movi	r3,-129
   433f0:	80e0703a 	and	r16,r16,r3
   433f4:	d8c12817 	ldw	r3,1184(sp)
   433f8:	d8013115 	stw	zero,1220(sp)
   433fc:	d8c12b15 	stw	r3,1196(sp)
   43400:	003fd306 	br	43350 <___vfprintf_internal_r+0x634>
   43404:	84000214 	ori	r16,r16,8
   43408:	ac800007 	ldb	r18,0(r21)
   4340c:	003e9f06 	br	42e8c <___vfprintf_internal_r+0x170>
   43410:	e013883a 	mov	r9,fp
   43414:	84000414 	ori	r16,r16,16
   43418:	1839883a 	mov	fp,r3
   4341c:	8080080c 	andi	r2,r16,32
   43420:	10031d26 	beq	r2,zero,44098 <___vfprintf_internal_r+0x137c>
   43424:	d8812d17 	ldw	r2,1204(sp)
   43428:	0007883a 	mov	r3,zero
   4342c:	15c00017 	ldw	r23,0(r2)
   43430:	15800117 	ldw	r22,4(r2)
   43434:	10800204 	addi	r2,r2,8
   43438:	d8812d15 	stw	r2,1204(sp)
   4343c:	d8012585 	stb	zero,1174(sp)
   43440:	bd84b03a 	or	r2,r23,r22
   43444:	003fae06 	br	43300 <___vfprintf_internal_r+0x5e4>
   43448:	e013883a 	mov	r9,fp
   4344c:	84000414 	ori	r16,r16,16
   43450:	1839883a 	mov	fp,r3
   43454:	8080080c 	andi	r2,r16,32
   43458:	1002e726 	beq	r2,zero,43ff8 <___vfprintf_internal_r+0x12dc>
   4345c:	d8c12d17 	ldw	r3,1204(sp)
   43460:	d9012d17 	ldw	r4,1204(sp)
   43464:	1dc00017 	ldw	r23,0(r3)
   43468:	1d800117 	ldw	r22,4(r3)
   4346c:	21000204 	addi	r4,r4,8
   43470:	00c00044 	movi	r3,1
   43474:	d9012d15 	stw	r4,1204(sp)
   43478:	bd84b03a 	or	r2,r23,r22
   4347c:	d8012585 	stb	zero,1174(sp)
   43480:	003f9f06 	br	43300 <___vfprintf_internal_r+0x5e4>
   43484:	e013883a 	mov	r9,fp
   43488:	1839883a 	mov	fp,r3
   4348c:	00c00174 	movhi	r3,5
   43490:	18f99604 	addi	r3,r3,-6568
   43494:	d8c13615 	stw	r3,1240(sp)
   43498:	8080080c 	andi	r2,r16,32
   4349c:	10007726 	beq	r2,zero,4367c <___vfprintf_internal_r+0x960>
   434a0:	d9012d17 	ldw	r4,1204(sp)
   434a4:	25c00017 	ldw	r23,0(r4)
   434a8:	25800117 	ldw	r22,4(r4)
   434ac:	21000204 	addi	r4,r4,8
   434b0:	d9012d15 	stw	r4,1204(sp)
   434b4:	8080004c 	andi	r2,r16,1
   434b8:	1002c226 	beq	r2,zero,43fc4 <___vfprintf_internal_r+0x12a8>
   434bc:	bd84b03a 	or	r2,r23,r22
   434c0:	10035d26 	beq	r2,zero,44238 <___vfprintf_internal_r+0x151c>
   434c4:	00c00c04 	movi	r3,48
   434c8:	d8c12505 	stb	r3,1172(sp)
   434cc:	dc812545 	stb	r18,1173(sp)
   434d0:	84000094 	ori	r16,r16,2
   434d4:	00c00084 	movi	r3,2
   434d8:	d8012585 	stb	zero,1174(sp)
   434dc:	003f8806 	br	43300 <___vfprintf_internal_r+0x5e4>
   434e0:	ac800007 	ldb	r18,0(r21)
   434e4:	00c00a84 	movi	r3,42
   434e8:	adc00044 	addi	r23,r21,1
   434ec:	90c57526 	beq	r18,r3,44ac4 <___vfprintf_internal_r+0x1da8>
   434f0:	95bff404 	addi	r22,r18,-48
   434f4:	0009883a 	mov	r4,zero
   434f8:	9d84ff36 	bltu	r19,r22,448f8 <___vfprintf_internal_r+0x1bdc>
   434fc:	01400284 	movi	r5,10
   43500:	00411f80 	call	411f8 <__mulsi3>
   43504:	bc800007 	ldb	r18,0(r23)
   43508:	b089883a 	add	r4,r22,r2
   4350c:	bdc00044 	addi	r23,r23,1
   43510:	95bff404 	addi	r22,r18,-48
   43514:	9dbff92e 	bgeu	r19,r22,434fc <___vfprintf_internal_r+0x7e0>
   43518:	2007883a 	mov	r3,r4
   4351c:	20044316 	blt	r4,zero,4462c <___vfprintf_internal_r+0x1910>
   43520:	b82b883a 	mov	r21,r23
   43524:	003e5a06 	br	42e90 <___vfprintf_internal_r+0x174>
   43528:	ac800007 	ldb	r18,0(r21)
   4352c:	01001b04 	movi	r4,108
   43530:	a805883a 	mov	r2,r21
   43534:	91045526 	beq	r18,r4,4468c <___vfprintf_internal_r+0x1970>
   43538:	84000414 	ori	r16,r16,16
   4353c:	003e5306 	br	42e8c <___vfprintf_internal_r+0x170>
   43540:	8080080c 	andi	r2,r16,32
   43544:	e013883a 	mov	r9,fp
   43548:	10034026 	beq	r2,zero,4424c <___vfprintf_internal_r+0x1530>
   4354c:	d9012d17 	ldw	r4,1204(sp)
   43550:	20800017 	ldw	r2,0(r4)
   43554:	d9012c17 	ldw	r4,1200(sp)
   43558:	2007d7fa 	srai	r3,r4,31
   4355c:	d9012d17 	ldw	r4,1204(sp)
   43560:	10c00115 	stw	r3,4(r2)
   43564:	21000104 	addi	r4,r4,4
   43568:	d9012d15 	stw	r4,1204(sp)
   4356c:	d9012c17 	ldw	r4,1200(sp)
   43570:	11000015 	stw	r4,0(r2)
   43574:	003e1f06 	br	42df4 <___vfprintf_internal_r+0xd8>
   43578:	d9012d17 	ldw	r4,1204(sp)
   4357c:	21000017 	ldw	r4,0(r4)
   43580:	d9012e15 	stw	r4,1208(sp)
   43584:	d9012d17 	ldw	r4,1204(sp)
   43588:	20800104 	addi	r2,r4,4
   4358c:	d9012e17 	ldw	r4,1208(sp)
   43590:	203ee716 	blt	r4,zero,43130 <___vfprintf_internal_r+0x414>
   43594:	d8812d15 	stw	r2,1204(sp)
   43598:	ac800007 	ldb	r18,0(r21)
   4359c:	003e3b06 	br	42e8c <___vfprintf_internal_r+0x170>
   435a0:	e013883a 	mov	r9,fp
   435a4:	1839883a 	mov	fp,r3
   435a8:	d8c12d17 	ldw	r3,1204(sp)
   435ac:	00800c04 	movi	r2,48
   435b0:	01000174 	movhi	r4,5
   435b4:	21399b04 	addi	r4,r4,-6548
   435b8:	1dc00017 	ldw	r23,0(r3)
   435bc:	18c00104 	addi	r3,r3,4
   435c0:	d8812505 	stb	r2,1172(sp)
   435c4:	00801e04 	movi	r2,120
   435c8:	d8812545 	stb	r2,1173(sp)
   435cc:	d8c12d15 	stw	r3,1204(sp)
   435d0:	002d883a 	mov	r22,zero
   435d4:	84000094 	ori	r16,r16,2
   435d8:	d9013615 	stw	r4,1240(sp)
   435dc:	00c00084 	movi	r3,2
   435e0:	04801e04 	movi	r18,120
   435e4:	b805883a 	mov	r2,r23
   435e8:	d8012585 	stb	zero,1174(sp)
   435ec:	003f4406 	br	43300 <___vfprintf_internal_r+0x5e4>
   435f0:	84000814 	ori	r16,r16,32
   435f4:	ac800007 	ldb	r18,0(r21)
   435f8:	003e2406 	br	42e8c <___vfprintf_internal_r+0x170>
   435fc:	d8812d17 	ldw	r2,1204(sp)
   43600:	d8012585 	stb	zero,1174(sp)
   43604:	e013883a 	mov	r9,fp
   43608:	14c00017 	ldw	r19,0(r2)
   4360c:	1839883a 	mov	fp,r3
   43610:	15c00104 	addi	r23,r2,4
   43614:	98045526 	beq	r19,zero,4476c <___vfprintf_internal_r+0x1a50>
   43618:	9809883a 	mov	r4,r19
   4361c:	18043116 	blt	r3,zero,446e4 <___vfprintf_internal_r+0x19c8>
   43620:	000b883a 	mov	r5,zero
   43624:	180d883a 	mov	r6,r3
   43628:	da413c15 	stw	r9,1264(sp)
   4362c:	00477f00 	call	477f0 <memchr>
   43630:	da413c17 	ldw	r9,1264(sp)
   43634:	10047a26 	beq	r2,zero,44820 <___vfprintf_internal_r+0x1b04>
   43638:	14c5c83a 	sub	r2,r2,r19
   4363c:	d8812b15 	stw	r2,1196(sp)
   43640:	e083d40e 	bge	fp,r2,44594 <___vfprintf_internal_r+0x1878>
   43644:	df012815 	stw	fp,1184(sp)
   43648:	e004e416 	blt	fp,zero,449dc <___vfprintf_internal_r+0x1cc0>
   4364c:	d8812583 	ldbu	r2,1174(sp)
   43650:	df012b15 	stw	fp,1196(sp)
   43654:	ddc12d15 	stw	r23,1204(sp)
   43658:	d8013115 	stw	zero,1220(sp)
   4365c:	003f3c06 	br	43350 <___vfprintf_internal_r+0x634>
   43660:	00800174 	movhi	r2,5
   43664:	10b99b04 	addi	r2,r2,-6548
   43668:	d8813615 	stw	r2,1240(sp)
   4366c:	8080080c 	andi	r2,r16,32
   43670:	e013883a 	mov	r9,fp
   43674:	1839883a 	mov	fp,r3
   43678:	103f891e 	bne	r2,zero,434a0 <___vfprintf_internal_r+0x784>
   4367c:	8080040c 	andi	r2,r16,16
   43680:	1002c326 	beq	r2,zero,44190 <___vfprintf_internal_r+0x1474>
   43684:	d8812d17 	ldw	r2,1204(sp)
   43688:	002d883a 	mov	r22,zero
   4368c:	15c00017 	ldw	r23,0(r2)
   43690:	10800104 	addi	r2,r2,4
   43694:	d8812d15 	stw	r2,1204(sp)
   43698:	003f8606 	br	434b4 <___vfprintf_internal_r+0x798>
   4369c:	84001014 	ori	r16,r16,64
   436a0:	ac800007 	ldb	r18,0(r21)
   436a4:	003df906 	br	42e8c <___vfprintf_internal_r+0x170>
   436a8:	d8812587 	ldb	r2,1174(sp)
   436ac:	1002e51e 	bne	r2,zero,44244 <___vfprintf_internal_r+0x1528>
   436b0:	00800804 	movi	r2,32
   436b4:	d8812585 	stb	r2,1174(sp)
   436b8:	ac800007 	ldb	r18,0(r21)
   436bc:	003df306 	br	42e8c <___vfprintf_internal_r+0x170>
   436c0:	84000054 	ori	r16,r16,1
   436c4:	ac800007 	ldb	r18,0(r21)
   436c8:	003df006 	br	42e8c <___vfprintf_internal_r+0x170>
   436cc:	84002014 	ori	r16,r16,128
   436d0:	ac800007 	ldb	r18,0(r21)
   436d4:	003ded06 	br	42e8c <___vfprintf_internal_r+0x170>
   436d8:	0009883a 	mov	r4,zero
   436dc:	95bff404 	addi	r22,r18,-48
   436e0:	182f883a 	mov	r23,r3
   436e4:	01400284 	movi	r5,10
   436e8:	00411f80 	call	411f8 <__mulsi3>
   436ec:	ac800007 	ldb	r18,0(r21)
   436f0:	1589883a 	add	r4,r2,r22
   436f4:	ad400044 	addi	r21,r21,1
   436f8:	95bff404 	addi	r22,r18,-48
   436fc:	9dbff92e 	bgeu	r19,r22,436e4 <___vfprintf_internal_r+0x9c8>
   43700:	b807883a 	mov	r3,r23
   43704:	d9012e15 	stw	r4,1208(sp)
   43708:	003de106 	br	42e90 <___vfprintf_internal_r+0x174>
   4370c:	00800ac4 	movi	r2,43
   43710:	d8812585 	stb	r2,1174(sp)
   43714:	ac800007 	ldb	r18,0(r21)
   43718:	003ddc06 	br	42e8c <___vfprintf_internal_r+0x170>
   4371c:	d8c12d17 	ldw	r3,1204(sp)
   43720:	d9012d17 	ldw	r4,1204(sp)
   43724:	e013883a 	mov	r9,fp
   43728:	18800017 	ldw	r2,0(r3)
   4372c:	21000104 	addi	r4,r4,4
   43730:	00c00044 	movi	r3,1
   43734:	d8c12815 	stw	r3,1184(sp)
   43738:	d8012585 	stb	zero,1174(sp)
   4373c:	d8810405 	stb	r2,1040(sp)
   43740:	d9012d15 	stw	r4,1204(sp)
   43744:	d8c12b15 	stw	r3,1196(sp)
   43748:	dcc10404 	addi	r19,sp,1040
   4374c:	003dda06 	br	42eb8 <___vfprintf_internal_r+0x19c>
   43750:	e013883a 	mov	r9,fp
   43754:	1839883a 	mov	fp,r3
   43758:	003ed806 	br	432bc <___vfprintf_internal_r+0x5a0>
   4375c:	e013883a 	mov	r9,fp
   43760:	1839883a 	mov	fp,r3
   43764:	003f2d06 	br	4341c <___vfprintf_internal_r+0x700>
   43768:	e013883a 	mov	r9,fp
   4376c:	1839883a 	mov	fp,r3
   43770:	003f3806 	br	43454 <___vfprintf_internal_r+0x738>
   43774:	da011d17 	ldw	r8,1140(sp)
   43778:	d8c11c17 	ldw	r3,1136(sp)
   4377c:	d8812587 	ldb	r2,1174(sp)
   43780:	10000b26 	beq	r2,zero,437b0 <___vfprintf_internal_r+0xa94>
   43784:	d8812584 	addi	r2,sp,1174
   43788:	48800015 	stw	r2,0(r9)
   4378c:	00800044 	movi	r2,1
   43790:	48800115 	stw	r2,4(r9)
   43794:	4091883a 	add	r8,r8,r2
   43798:	1887883a 	add	r3,r3,r2
   4379c:	da011d15 	stw	r8,1140(sp)
   437a0:	d8c11c15 	stw	r3,1136(sp)
   437a4:	008001c4 	movi	r2,7
   437a8:	10c18e16 	blt	r2,r3,43de4 <___vfprintf_internal_r+0x10c8>
   437ac:	4a400204 	addi	r9,r9,8
   437b0:	d9012a17 	ldw	r4,1192(sp)
   437b4:	20000b26 	beq	r4,zero,437e4 <___vfprintf_internal_r+0xac8>
   437b8:	d8812504 	addi	r2,sp,1172
   437bc:	48800015 	stw	r2,0(r9)
   437c0:	00800084 	movi	r2,2
   437c4:	48800115 	stw	r2,4(r9)
   437c8:	4091883a 	add	r8,r8,r2
   437cc:	18c00044 	addi	r3,r3,1
   437d0:	da011d15 	stw	r8,1140(sp)
   437d4:	d8c11c15 	stw	r3,1136(sp)
   437d8:	008001c4 	movi	r2,7
   437dc:	10c17816 	blt	r2,r3,43dc0 <___vfprintf_internal_r+0x10a4>
   437e0:	4a400204 	addi	r9,r9,8
   437e4:	d9012f17 	ldw	r4,1212(sp)
   437e8:	00802004 	movi	r2,128
   437ec:	2080fc26 	beq	r4,r2,43be0 <___vfprintf_internal_r+0xec4>
   437f0:	d8813117 	ldw	r2,1220(sp)
   437f4:	d9012b17 	ldw	r4,1196(sp)
   437f8:	112fc83a 	sub	r23,r2,r4
   437fc:	05c02a0e 	bge	zero,r23,438a8 <___vfprintf_internal_r+0xb8c>
   43800:	07000404 	movi	fp,16
   43804:	05000174 	movhi	r20,5
   43808:	a539a684 	addi	r20,r20,-6502
   4380c:	e5c01d0e 	bge	fp,r23,43884 <___vfprintf_internal_r+0xb68>
   43810:	dc812a15 	stw	r18,1192(sp)
   43814:	058001c4 	movi	r22,7
   43818:	a025883a 	mov	r18,r20
   4381c:	8029883a 	mov	r20,r16
   43820:	dc012917 	ldw	r16,1188(sp)
   43824:	00000306 	br	43834 <___vfprintf_internal_r+0xb18>
   43828:	bdfffc04 	addi	r23,r23,-16
   4382c:	4a400204 	addi	r9,r9,8
   43830:	e5c0110e 	bge	fp,r23,43878 <___vfprintf_internal_r+0xb5c>
   43834:	4c800015 	stw	r18,0(r9)
   43838:	4f000115 	stw	fp,4(r9)
   4383c:	42000404 	addi	r8,r8,16
   43840:	18c00044 	addi	r3,r3,1
   43844:	da011d15 	stw	r8,1140(sp)
   43848:	d8c11c15 	stw	r3,1136(sp)
   4384c:	b0fff60e 	bge	r22,r3,43828 <___vfprintf_internal_r+0xb0c>
   43850:	8809883a 	mov	r4,r17
   43854:	800b883a 	mov	r5,r16
   43858:	d9811b04 	addi	r6,sp,1132
   4385c:	0042ce80 	call	42ce8 <__sprint_r>
   43860:	103e741e 	bne	r2,zero,43234 <___vfprintf_internal_r+0x518>
   43864:	bdfffc04 	addi	r23,r23,-16
   43868:	da011d17 	ldw	r8,1140(sp)
   4386c:	d8c11c17 	ldw	r3,1136(sp)
   43870:	da400404 	addi	r9,sp,16
   43874:	e5ffef16 	blt	fp,r23,43834 <___vfprintf_internal_r+0xb18>
   43878:	a021883a 	mov	r16,r20
   4387c:	9029883a 	mov	r20,r18
   43880:	dc812a17 	ldw	r18,1192(sp)
   43884:	4d000015 	stw	r20,0(r9)
   43888:	4dc00115 	stw	r23,4(r9)
   4388c:	45d1883a 	add	r8,r8,r23
   43890:	18c00044 	addi	r3,r3,1
   43894:	da011d15 	stw	r8,1140(sp)
   43898:	d8c11c15 	stw	r3,1136(sp)
   4389c:	008001c4 	movi	r2,7
   438a0:	10c13e16 	blt	r2,r3,43d9c <___vfprintf_internal_r+0x1080>
   438a4:	4a400204 	addi	r9,r9,8
   438a8:	8080400c 	andi	r2,r16,256
   438ac:	1000831e 	bne	r2,zero,43abc <___vfprintf_internal_r+0xda0>
   438b0:	d8812b17 	ldw	r2,1196(sp)
   438b4:	4cc00015 	stw	r19,0(r9)
   438b8:	48800115 	stw	r2,4(r9)
   438bc:	4091883a 	add	r8,r8,r2
   438c0:	18c00044 	addi	r3,r3,1
   438c4:	da011d15 	stw	r8,1140(sp)
   438c8:	d8c11c15 	stw	r3,1136(sp)
   438cc:	008001c4 	movi	r2,7
   438d0:	10c05316 	blt	r2,r3,43a20 <___vfprintf_internal_r+0xd04>
   438d4:	4a400204 	addi	r9,r9,8
   438d8:	8400010c 	andi	r16,r16,4
   438dc:	80002e26 	beq	r16,zero,43998 <___vfprintf_internal_r+0xc7c>
   438e0:	d8812e17 	ldw	r2,1208(sp)
   438e4:	d8c12817 	ldw	r3,1184(sp)
   438e8:	10e1c83a 	sub	r16,r2,r3
   438ec:	04002a0e 	bge	zero,r16,43998 <___vfprintf_internal_r+0xc7c>
   438f0:	04800404 	movi	r18,16
   438f4:	d8c11c17 	ldw	r3,1136(sp)
   438f8:	05c00174 	movhi	r23,5
   438fc:	bdf9a284 	addi	r23,r23,-6518
   43900:	9400170e 	bge	r18,r16,43960 <___vfprintf_internal_r+0xc44>
   43904:	04c001c4 	movi	r19,7
   43908:	dd012917 	ldw	r20,1188(sp)
   4390c:	00000306 	br	4391c <___vfprintf_internal_r+0xc00>
   43910:	843ffc04 	addi	r16,r16,-16
   43914:	4a400204 	addi	r9,r9,8
   43918:	9400110e 	bge	r18,r16,43960 <___vfprintf_internal_r+0xc44>
   4391c:	4dc00015 	stw	r23,0(r9)
   43920:	4c800115 	stw	r18,4(r9)
   43924:	42000404 	addi	r8,r8,16
   43928:	18c00044 	addi	r3,r3,1
   4392c:	da011d15 	stw	r8,1140(sp)
   43930:	d8c11c15 	stw	r3,1136(sp)
   43934:	98fff60e 	bge	r19,r3,43910 <___vfprintf_internal_r+0xbf4>
   43938:	8809883a 	mov	r4,r17
   4393c:	a00b883a 	mov	r5,r20
   43940:	d9811b04 	addi	r6,sp,1132
   43944:	0042ce80 	call	42ce8 <__sprint_r>
   43948:	103e3a1e 	bne	r2,zero,43234 <___vfprintf_internal_r+0x518>
   4394c:	843ffc04 	addi	r16,r16,-16
   43950:	da011d17 	ldw	r8,1140(sp)
   43954:	d8c11c17 	ldw	r3,1136(sp)
   43958:	da400404 	addi	r9,sp,16
   4395c:	943fef16 	blt	r18,r16,4391c <___vfprintf_internal_r+0xc00>
   43960:	4dc00015 	stw	r23,0(r9)
   43964:	4c000115 	stw	r16,4(r9)
   43968:	8211883a 	add	r8,r16,r8
   4396c:	18c00044 	addi	r3,r3,1
   43970:	da011d15 	stw	r8,1140(sp)
   43974:	d8c11c15 	stw	r3,1136(sp)
   43978:	008001c4 	movi	r2,7
   4397c:	10c0060e 	bge	r2,r3,43998 <___vfprintf_internal_r+0xc7c>
   43980:	d9412917 	ldw	r5,1188(sp)
   43984:	8809883a 	mov	r4,r17
   43988:	d9811b04 	addi	r6,sp,1132
   4398c:	0042ce80 	call	42ce8 <__sprint_r>
   43990:	103e281e 	bne	r2,zero,43234 <___vfprintf_internal_r+0x518>
   43994:	da011d17 	ldw	r8,1140(sp)
   43998:	dd012817 	ldw	r20,1184(sp)
   4399c:	d9012e17 	ldw	r4,1208(sp)
   439a0:	a100010e 	bge	r20,r4,439a8 <___vfprintf_internal_r+0xc8c>
   439a4:	2029883a 	mov	r20,r4
   439a8:	d8812c17 	ldw	r2,1200(sp)
   439ac:	1505883a 	add	r2,r2,r20
   439b0:	d8812c15 	stw	r2,1200(sp)
   439b4:	4000b91e 	bne	r8,zero,43c9c <___vfprintf_internal_r+0xf80>
   439b8:	d8011c15 	stw	zero,1136(sp)
   439bc:	a8800007 	ldb	r2,0(r21)
   439c0:	da400404 	addi	r9,sp,16
   439c4:	103d0d1e 	bne	r2,zero,42dfc <___vfprintf_internal_r+0xe0>
   439c8:	a825883a 	mov	r18,r21
   439cc:	003d2306 	br	42e5c <___vfprintf_internal_r+0x140>
   439d0:	d9412917 	ldw	r5,1188(sp)
   439d4:	8809883a 	mov	r4,r17
   439d8:	d9811b04 	addi	r6,sp,1132
   439dc:	0042ce80 	call	42ce8 <__sprint_r>
   439e0:	103e141e 	bne	r2,zero,43234 <___vfprintf_internal_r+0x518>
   439e4:	da011d17 	ldw	r8,1140(sp)
   439e8:	da400404 	addi	r9,sp,16
   439ec:	8080004c 	andi	r2,r16,1
   439f0:	103fb926 	beq	r2,zero,438d8 <___vfprintf_internal_r+0xbbc>
   439f4:	d8c11c17 	ldw	r3,1136(sp)
   439f8:	d9013717 	ldw	r4,1244(sp)
   439fc:	00800044 	movi	r2,1
   43a00:	48800115 	stw	r2,4(r9)
   43a04:	49000015 	stw	r4,0(r9)
   43a08:	4091883a 	add	r8,r8,r2
   43a0c:	1887883a 	add	r3,r3,r2
   43a10:	da011d15 	stw	r8,1140(sp)
   43a14:	d8c11c15 	stw	r3,1136(sp)
   43a18:	008001c4 	movi	r2,7
   43a1c:	10ffad0e 	bge	r2,r3,438d4 <___vfprintf_internal_r+0xbb8>
   43a20:	d9412917 	ldw	r5,1188(sp)
   43a24:	8809883a 	mov	r4,r17
   43a28:	d9811b04 	addi	r6,sp,1132
   43a2c:	0042ce80 	call	42ce8 <__sprint_r>
   43a30:	103e001e 	bne	r2,zero,43234 <___vfprintf_internal_r+0x518>
   43a34:	da400404 	addi	r9,sp,16
   43a38:	da011d17 	ldw	r8,1140(sp)
   43a3c:	003fa606 	br	438d8 <___vfprintf_internal_r+0xbbc>
   43a40:	18803fcc 	andi	r2,r3,255
   43a44:	00c00044 	movi	r3,1
   43a48:	10c10126 	beq	r2,r3,43e50 <___vfprintf_internal_r+0x1134>
   43a4c:	00c00084 	movi	r3,2
   43a50:	10c0ed26 	beq	r2,r3,43e08 <___vfprintf_internal_r+0x10ec>
   43a54:	d8c10dc4 	addi	r3,sp,1079
   43a58:	b808d0fa 	srli	r4,r23,3
   43a5c:	b00a977a 	slli	r5,r22,29
   43a60:	b02cd0fa 	srli	r22,r22,3
   43a64:	bdc001cc 	andi	r23,r23,7
   43a68:	b8800c04 	addi	r2,r23,48
   43a6c:	292eb03a 	or	r23,r5,r4
   43a70:	18800005 	stb	r2,0(r3)
   43a74:	bd88b03a 	or	r4,r23,r22
   43a78:	1827883a 	mov	r19,r3
   43a7c:	18ffffc4 	addi	r3,r3,-1
   43a80:	203ff51e 	bne	r4,zero,43a58 <___vfprintf_internal_r+0xd3c>
   43a84:	8100004c 	andi	r4,r16,1
   43a88:	980b883a 	mov	r5,r19
   43a8c:	20000726 	beq	r4,zero,43aac <___vfprintf_internal_r+0xd90>
   43a90:	10803fcc 	andi	r2,r2,255
   43a94:	1080201c 	xori	r2,r2,128
   43a98:	10bfe004 	addi	r2,r2,-128
   43a9c:	01000c04 	movi	r4,48
   43aa0:	11000226 	beq	r2,r4,43aac <___vfprintf_internal_r+0xd90>
   43aa4:	1827883a 	mov	r19,r3
   43aa8:	293fffc5 	stb	r4,-1(r5)
   43aac:	d8812717 	ldw	r2,1180(sp)
   43ab0:	14c5c83a 	sub	r2,r2,r19
   43ab4:	d8812b15 	stw	r2,1196(sp)
   43ab8:	003e1f06 	br	43338 <___vfprintf_internal_r+0x61c>
   43abc:	00801944 	movi	r2,101
   43ac0:	14807c0e 	bge	r2,r18,43cb4 <___vfprintf_internal_r+0xf98>
   43ac4:	d9013317 	ldw	r4,1228(sp)
   43ac8:	d9413417 	ldw	r5,1232(sp)
   43acc:	000d883a 	mov	r6,zero
   43ad0:	000f883a 	mov	r7,zero
   43ad4:	d8c13b15 	stw	r3,1260(sp)
   43ad8:	da013a15 	stw	r8,1256(sp)
   43adc:	da413c15 	stw	r9,1264(sp)
   43ae0:	004a9d00 	call	4a9d0 <__eqdf2>
   43ae4:	d8c13b17 	ldw	r3,1260(sp)
   43ae8:	da013a17 	ldw	r8,1256(sp)
   43aec:	da413c17 	ldw	r9,1264(sp)
   43af0:	1001001e 	bne	r2,zero,43ef4 <___vfprintf_internal_r+0x11d8>
   43af4:	00800174 	movhi	r2,5
   43af8:	10b9a204 	addi	r2,r2,-6520
   43afc:	48800015 	stw	r2,0(r9)
   43b00:	00800044 	movi	r2,1
   43b04:	48800115 	stw	r2,4(r9)
   43b08:	4091883a 	add	r8,r8,r2
   43b0c:	1887883a 	add	r3,r3,r2
   43b10:	da011d15 	stw	r8,1140(sp)
   43b14:	d8c11c15 	stw	r3,1136(sp)
   43b18:	008001c4 	movi	r2,7
   43b1c:	10c20316 	blt	r2,r3,4432c <___vfprintf_internal_r+0x1610>
   43b20:	4a400204 	addi	r9,r9,8
   43b24:	d8812417 	ldw	r2,1168(sp)
   43b28:	d8c13217 	ldw	r3,1224(sp)
   43b2c:	10c00216 	blt	r2,r3,43b38 <___vfprintf_internal_r+0xe1c>
   43b30:	8080004c 	andi	r2,r16,1
   43b34:	103f6826 	beq	r2,zero,438d8 <___vfprintf_internal_r+0xbbc>
   43b38:	d8c11c17 	ldw	r3,1136(sp)
   43b3c:	d9013717 	ldw	r4,1244(sp)
   43b40:	00800044 	movi	r2,1
   43b44:	48800115 	stw	r2,4(r9)
   43b48:	49000015 	stw	r4,0(r9)
   43b4c:	4091883a 	add	r8,r8,r2
   43b50:	1887883a 	add	r3,r3,r2
   43b54:	da011d15 	stw	r8,1140(sp)
   43b58:	d8c11c15 	stw	r3,1136(sp)
   43b5c:	008001c4 	movi	r2,7
   43b60:	10c2ce16 	blt	r2,r3,4469c <___vfprintf_internal_r+0x1980>
   43b64:	4a400204 	addi	r9,r9,8
   43b68:	d8813217 	ldw	r2,1224(sp)
   43b6c:	14bfffc4 	addi	r18,r2,-1
   43b70:	04bf590e 	bge	zero,r18,438d8 <___vfprintf_internal_r+0xbbc>
   43b74:	04c00404 	movi	r19,16
   43b78:	d8c11c17 	ldw	r3,1136(sp)
   43b7c:	05000174 	movhi	r20,5
   43b80:	a539a684 	addi	r20,r20,-6502
   43b84:	9c818a0e 	bge	r19,r18,441b0 <___vfprintf_internal_r+0x1494>
   43b88:	058001c4 	movi	r22,7
   43b8c:	ddc12917 	ldw	r23,1188(sp)
   43b90:	00000306 	br	43ba0 <___vfprintf_internal_r+0xe84>
   43b94:	4a400204 	addi	r9,r9,8
   43b98:	94bffc04 	addi	r18,r18,-16
   43b9c:	9c81840e 	bge	r19,r18,441b0 <___vfprintf_internal_r+0x1494>
   43ba0:	4d000015 	stw	r20,0(r9)
   43ba4:	4cc00115 	stw	r19,4(r9)
   43ba8:	42000404 	addi	r8,r8,16
   43bac:	18c00044 	addi	r3,r3,1
   43bb0:	da011d15 	stw	r8,1140(sp)
   43bb4:	d8c11c15 	stw	r3,1136(sp)
   43bb8:	b0fff60e 	bge	r22,r3,43b94 <___vfprintf_internal_r+0xe78>
   43bbc:	8809883a 	mov	r4,r17
   43bc0:	b80b883a 	mov	r5,r23
   43bc4:	d9811b04 	addi	r6,sp,1132
   43bc8:	0042ce80 	call	42ce8 <__sprint_r>
   43bcc:	103d991e 	bne	r2,zero,43234 <___vfprintf_internal_r+0x518>
   43bd0:	da011d17 	ldw	r8,1140(sp)
   43bd4:	d8c11c17 	ldw	r3,1136(sp)
   43bd8:	da400404 	addi	r9,sp,16
   43bdc:	003fee06 	br	43b98 <___vfprintf_internal_r+0xe7c>
   43be0:	d8812e17 	ldw	r2,1208(sp)
   43be4:	d9012817 	ldw	r4,1184(sp)
   43be8:	112fc83a 	sub	r23,r2,r4
   43bec:	05ff000e 	bge	zero,r23,437f0 <___vfprintf_internal_r+0xad4>
   43bf0:	07000404 	movi	fp,16
   43bf4:	05000174 	movhi	r20,5
   43bf8:	a539a684 	addi	r20,r20,-6502
   43bfc:	e5c01d0e 	bge	fp,r23,43c74 <___vfprintf_internal_r+0xf58>
   43c00:	dc812a15 	stw	r18,1192(sp)
   43c04:	058001c4 	movi	r22,7
   43c08:	a025883a 	mov	r18,r20
   43c0c:	8029883a 	mov	r20,r16
   43c10:	dc012917 	ldw	r16,1188(sp)
   43c14:	00000306 	br	43c24 <___vfprintf_internal_r+0xf08>
   43c18:	bdfffc04 	addi	r23,r23,-16
   43c1c:	4a400204 	addi	r9,r9,8
   43c20:	e5c0110e 	bge	fp,r23,43c68 <___vfprintf_internal_r+0xf4c>
   43c24:	4c800015 	stw	r18,0(r9)
   43c28:	4f000115 	stw	fp,4(r9)
   43c2c:	42000404 	addi	r8,r8,16
   43c30:	18c00044 	addi	r3,r3,1
   43c34:	da011d15 	stw	r8,1140(sp)
   43c38:	d8c11c15 	stw	r3,1136(sp)
   43c3c:	b0fff60e 	bge	r22,r3,43c18 <___vfprintf_internal_r+0xefc>
   43c40:	8809883a 	mov	r4,r17
   43c44:	800b883a 	mov	r5,r16
   43c48:	d9811b04 	addi	r6,sp,1132
   43c4c:	0042ce80 	call	42ce8 <__sprint_r>
   43c50:	103d781e 	bne	r2,zero,43234 <___vfprintf_internal_r+0x518>
   43c54:	bdfffc04 	addi	r23,r23,-16
   43c58:	da011d17 	ldw	r8,1140(sp)
   43c5c:	d8c11c17 	ldw	r3,1136(sp)
   43c60:	da400404 	addi	r9,sp,16
   43c64:	e5ffef16 	blt	fp,r23,43c24 <___vfprintf_internal_r+0xf08>
   43c68:	a021883a 	mov	r16,r20
   43c6c:	9029883a 	mov	r20,r18
   43c70:	dc812a17 	ldw	r18,1192(sp)
   43c74:	4d000015 	stw	r20,0(r9)
   43c78:	4dc00115 	stw	r23,4(r9)
   43c7c:	45d1883a 	add	r8,r8,r23
   43c80:	18c00044 	addi	r3,r3,1
   43c84:	da011d15 	stw	r8,1140(sp)
   43c88:	d8c11c15 	stw	r3,1136(sp)
   43c8c:	008001c4 	movi	r2,7
   43c90:	10c13616 	blt	r2,r3,4416c <___vfprintf_internal_r+0x1450>
   43c94:	4a400204 	addi	r9,r9,8
   43c98:	003ed506 	br	437f0 <___vfprintf_internal_r+0xad4>
   43c9c:	d9412917 	ldw	r5,1188(sp)
   43ca0:	8809883a 	mov	r4,r17
   43ca4:	d9811b04 	addi	r6,sp,1132
   43ca8:	0042ce80 	call	42ce8 <__sprint_r>
   43cac:	103f4226 	beq	r2,zero,439b8 <___vfprintf_internal_r+0xc9c>
   43cb0:	003d6006 	br	43234 <___vfprintf_internal_r+0x518>
   43cb4:	d9013217 	ldw	r4,1224(sp)
   43cb8:	00800044 	movi	r2,1
   43cbc:	4cc00015 	stw	r19,0(r9)
   43cc0:	1101000e 	bge	r2,r4,440c4 <___vfprintf_internal_r+0x13a8>
   43cc4:	00800044 	movi	r2,1
   43cc8:	48800115 	stw	r2,4(r9)
   43ccc:	4091883a 	add	r8,r8,r2
   43cd0:	1887883a 	add	r3,r3,r2
   43cd4:	da011d15 	stw	r8,1140(sp)
   43cd8:	d8c11c15 	stw	r3,1136(sp)
   43cdc:	008001c4 	movi	r2,7
   43ce0:	10c10c16 	blt	r2,r3,44114 <___vfprintf_internal_r+0x13f8>
   43ce4:	4a400204 	addi	r9,r9,8
   43ce8:	d8813717 	ldw	r2,1244(sp)
   43cec:	48800015 	stw	r2,0(r9)
   43cf0:	00800044 	movi	r2,1
   43cf4:	48800115 	stw	r2,4(r9)
   43cf8:	4091883a 	add	r8,r8,r2
   43cfc:	1887883a 	add	r3,r3,r2
   43d00:	da011d15 	stw	r8,1140(sp)
   43d04:	d8c11c15 	stw	r3,1136(sp)
   43d08:	008001c4 	movi	r2,7
   43d0c:	10c10a16 	blt	r2,r3,44138 <___vfprintf_internal_r+0x141c>
   43d10:	4c800204 	addi	r18,r9,8
   43d14:	d9013317 	ldw	r4,1228(sp)
   43d18:	d9413417 	ldw	r5,1232(sp)
   43d1c:	000d883a 	mov	r6,zero
   43d20:	000f883a 	mov	r7,zero
   43d24:	d8c13b15 	stw	r3,1260(sp)
   43d28:	da013a15 	stw	r8,1256(sp)
   43d2c:	004aa2c0 	call	4aa2c <__nedf2>
   43d30:	d8c13b17 	ldw	r3,1260(sp)
   43d34:	da013a17 	ldw	r8,1256(sp)
   43d38:	1000ba26 	beq	r2,zero,44024 <___vfprintf_internal_r+0x1308>
   43d3c:	d9013217 	ldw	r4,1224(sp)
   43d40:	9cc00044 	addi	r19,r19,1
   43d44:	94c00015 	stw	r19,0(r18)
   43d48:	20bfffc4 	addi	r2,r4,-1
   43d4c:	90800115 	stw	r2,4(r18)
   43d50:	4091883a 	add	r8,r8,r2
   43d54:	18c00044 	addi	r3,r3,1
   43d58:	da011d15 	stw	r8,1140(sp)
   43d5c:	d8c11c15 	stw	r3,1136(sp)
   43d60:	008001c4 	movi	r2,7
   43d64:	10c0e216 	blt	r2,r3,440f0 <___vfprintf_internal_r+0x13d4>
   43d68:	94800204 	addi	r18,r18,8
   43d6c:	d9013517 	ldw	r4,1236(sp)
   43d70:	d8811fc4 	addi	r2,sp,1151
   43d74:	90800015 	stw	r2,0(r18)
   43d78:	91000115 	stw	r4,4(r18)
   43d7c:	4111883a 	add	r8,r8,r4
   43d80:	18c00044 	addi	r3,r3,1
   43d84:	da011d15 	stw	r8,1140(sp)
   43d88:	d8c11c15 	stw	r3,1136(sp)
   43d8c:	008001c4 	movi	r2,7
   43d90:	10ff2316 	blt	r2,r3,43a20 <___vfprintf_internal_r+0xd04>
   43d94:	92400204 	addi	r9,r18,8
   43d98:	003ecf06 	br	438d8 <___vfprintf_internal_r+0xbbc>
   43d9c:	d9412917 	ldw	r5,1188(sp)
   43da0:	8809883a 	mov	r4,r17
   43da4:	d9811b04 	addi	r6,sp,1132
   43da8:	0042ce80 	call	42ce8 <__sprint_r>
   43dac:	103d211e 	bne	r2,zero,43234 <___vfprintf_internal_r+0x518>
   43db0:	da011d17 	ldw	r8,1140(sp)
   43db4:	d8c11c17 	ldw	r3,1136(sp)
   43db8:	da400404 	addi	r9,sp,16
   43dbc:	003eba06 	br	438a8 <___vfprintf_internal_r+0xb8c>
   43dc0:	d9412917 	ldw	r5,1188(sp)
   43dc4:	8809883a 	mov	r4,r17
   43dc8:	d9811b04 	addi	r6,sp,1132
   43dcc:	0042ce80 	call	42ce8 <__sprint_r>
   43dd0:	103d181e 	bne	r2,zero,43234 <___vfprintf_internal_r+0x518>
   43dd4:	da011d17 	ldw	r8,1140(sp)
   43dd8:	d8c11c17 	ldw	r3,1136(sp)
   43ddc:	da400404 	addi	r9,sp,16
   43de0:	003e8006 	br	437e4 <___vfprintf_internal_r+0xac8>
   43de4:	d9412917 	ldw	r5,1188(sp)
   43de8:	8809883a 	mov	r4,r17
   43dec:	d9811b04 	addi	r6,sp,1132
   43df0:	0042ce80 	call	42ce8 <__sprint_r>
   43df4:	103d0f1e 	bne	r2,zero,43234 <___vfprintf_internal_r+0x518>
   43df8:	da011d17 	ldw	r8,1140(sp)
   43dfc:	d8c11c17 	ldw	r3,1136(sp)
   43e00:	da400404 	addi	r9,sp,16
   43e04:	003e6a06 	br	437b0 <___vfprintf_internal_r+0xa94>
   43e08:	d9413617 	ldw	r5,1240(sp)
   43e0c:	d8810dc4 	addi	r2,sp,1079
   43e10:	b8c003cc 	andi	r3,r23,15
   43e14:	b008973a 	slli	r4,r22,28
   43e18:	28c7883a 	add	r3,r5,r3
   43e1c:	b82ed13a 	srli	r23,r23,4
   43e20:	18c00003 	ldbu	r3,0(r3)
   43e24:	b02cd13a 	srli	r22,r22,4
   43e28:	25eeb03a 	or	r23,r4,r23
   43e2c:	10c00005 	stb	r3,0(r2)
   43e30:	bd86b03a 	or	r3,r23,r22
   43e34:	1027883a 	mov	r19,r2
   43e38:	10bfffc4 	addi	r2,r2,-1
   43e3c:	183ff41e 	bne	r3,zero,43e10 <___vfprintf_internal_r+0x10f4>
   43e40:	003f1a06 	br	43aac <___vfprintf_internal_r+0xd90>
   43e44:	d8012b15 	stw	zero,1196(sp)
   43e48:	dcc10e04 	addi	r19,sp,1080
   43e4c:	003d3a06 	br	43338 <___vfprintf_internal_r+0x61c>
   43e50:	b0025426 	beq	r22,zero,447a4 <___vfprintf_internal_r+0x1a88>
   43e54:	b807883a 	mov	r3,r23
   43e58:	d8810dc4 	addi	r2,sp,1079
   43e5c:	882f883a 	mov	r23,r17
   43e60:	04c00244 	movi	r19,9
   43e64:	8023883a 	mov	r17,r16
   43e68:	da412815 	stw	r9,1184(sp)
   43e6c:	1821883a 	mov	r16,r3
   43e70:	8009883a 	mov	r4,r16
   43e74:	b00b883a 	mov	r5,r22
   43e78:	01800284 	movi	r6,10
   43e7c:	000f883a 	mov	r7,zero
   43e80:	1029883a 	mov	r20,r2
   43e84:	0049cbc0 	call	49cbc <__umoddi3>
   43e88:	10800c04 	addi	r2,r2,48
   43e8c:	8009883a 	mov	r4,r16
   43e90:	b00b883a 	mov	r5,r22
   43e94:	a0800005 	stb	r2,0(r20)
   43e98:	01800284 	movi	r6,10
   43e9c:	000f883a 	mov	r7,zero
   43ea0:	004966c0 	call	4966c <__udivdi3>
   43ea4:	1021883a 	mov	r16,r2
   43ea8:	182d883a 	mov	r22,r3
   43eac:	a0bfffc4 	addi	r2,r20,-1
   43eb0:	183fef1e 	bne	r3,zero,43e70 <___vfprintf_internal_r+0x1154>
   43eb4:	9c3fee36 	bltu	r19,r16,43e70 <___vfprintf_internal_r+0x1154>
   43eb8:	da412817 	ldw	r9,1184(sp)
   43ebc:	8005883a 	mov	r2,r16
   43ec0:	8821883a 	mov	r16,r17
   43ec4:	b823883a 	mov	r17,r23
   43ec8:	102f883a 	mov	r23,r2
   43ecc:	d8812717 	ldw	r2,1180(sp)
   43ed0:	a4ffffc4 	addi	r19,r20,-1
   43ed4:	bdc00c04 	addi	r23,r23,48
   43ed8:	14c5c83a 	sub	r2,r2,r19
   43edc:	a5ffffc5 	stb	r23,-1(r20)
   43ee0:	d8812b15 	stw	r2,1196(sp)
   43ee4:	003d1406 	br	43338 <___vfprintf_internal_r+0x61c>
   43ee8:	00c00044 	movi	r3,1
   43eec:	bd84b03a 	or	r2,r23,r22
   43ef0:	003d0306 	br	43300 <___vfprintf_internal_r+0x5e4>
   43ef4:	dc812417 	ldw	r18,1168(sp)
   43ef8:	0481140e 	bge	zero,r18,4434c <___vfprintf_internal_r+0x1630>
   43efc:	d9013217 	ldw	r4,1224(sp)
   43f00:	4cc00015 	stw	r19,0(r9)
   43f04:	9100ec16 	blt	r18,r4,442b8 <___vfprintf_internal_r+0x159c>
   43f08:	49000115 	stw	r4,4(r9)
   43f0c:	4111883a 	add	r8,r8,r4
   43f10:	18c00044 	addi	r3,r3,1
   43f14:	da011d15 	stw	r8,1140(sp)
   43f18:	d8c11c15 	stw	r3,1136(sp)
   43f1c:	008001c4 	movi	r2,7
   43f20:	10c23616 	blt	r2,r3,447fc <___vfprintf_internal_r+0x1ae0>
   43f24:	4a400204 	addi	r9,r9,8
   43f28:	d8813217 	ldw	r2,1224(sp)
   43f2c:	90a5c83a 	sub	r18,r18,r2
   43f30:	04beae0e 	bge	zero,r18,439ec <___vfprintf_internal_r+0xcd0>
   43f34:	04c00404 	movi	r19,16
   43f38:	d8c11c17 	ldw	r3,1136(sp)
   43f3c:	05000174 	movhi	r20,5
   43f40:	a539a684 	addi	r20,r20,-6502
   43f44:	9c81dd0e 	bge	r19,r18,446bc <___vfprintf_internal_r+0x19a0>
   43f48:	058001c4 	movi	r22,7
   43f4c:	ddc12917 	ldw	r23,1188(sp)
   43f50:	00000306 	br	43f60 <___vfprintf_internal_r+0x1244>
   43f54:	4a400204 	addi	r9,r9,8
   43f58:	94bffc04 	addi	r18,r18,-16
   43f5c:	9c81d70e 	bge	r19,r18,446bc <___vfprintf_internal_r+0x19a0>
   43f60:	4d000015 	stw	r20,0(r9)
   43f64:	4cc00115 	stw	r19,4(r9)
   43f68:	42000404 	addi	r8,r8,16
   43f6c:	18c00044 	addi	r3,r3,1
   43f70:	da011d15 	stw	r8,1140(sp)
   43f74:	d8c11c15 	stw	r3,1136(sp)
   43f78:	b0fff60e 	bge	r22,r3,43f54 <___vfprintf_internal_r+0x1238>
   43f7c:	8809883a 	mov	r4,r17
   43f80:	b80b883a 	mov	r5,r23
   43f84:	d9811b04 	addi	r6,sp,1132
   43f88:	0042ce80 	call	42ce8 <__sprint_r>
   43f8c:	103ca91e 	bne	r2,zero,43234 <___vfprintf_internal_r+0x518>
   43f90:	da011d17 	ldw	r8,1140(sp)
   43f94:	d8c11c17 	ldw	r3,1136(sp)
   43f98:	da400404 	addi	r9,sp,16
   43f9c:	003fee06 	br	43f58 <___vfprintf_internal_r+0x123c>
   43fa0:	d9412917 	ldw	r5,1188(sp)
   43fa4:	8809883a 	mov	r4,r17
   43fa8:	d9811b04 	addi	r6,sp,1132
   43fac:	0042ce80 	call	42ce8 <__sprint_r>
   43fb0:	103ca01e 	bne	r2,zero,43234 <___vfprintf_internal_r+0x518>
   43fb4:	da011d17 	ldw	r8,1140(sp)
   43fb8:	d8c11c17 	ldw	r3,1136(sp)
   43fbc:	da400404 	addi	r9,sp,16
   43fc0:	003dee06 	br	4377c <___vfprintf_internal_r+0xa60>
   43fc4:	00c00084 	movi	r3,2
   43fc8:	bd84b03a 	or	r2,r23,r22
   43fcc:	d8012585 	stb	zero,1174(sp)
   43fd0:	003ccb06 	br	43300 <___vfprintf_internal_r+0x5e4>
   43fd4:	8080040c 	andi	r2,r16,16
   43fd8:	1000ae26 	beq	r2,zero,44294 <___vfprintf_internal_r+0x1578>
   43fdc:	d9012d17 	ldw	r4,1204(sp)
   43fe0:	25c00017 	ldw	r23,0(r4)
   43fe4:	21000104 	addi	r4,r4,4
   43fe8:	d9012d15 	stw	r4,1204(sp)
   43fec:	b82dd7fa 	srai	r22,r23,31
   43ff0:	b005883a 	mov	r2,r22
   43ff4:	003cb906 	br	432dc <___vfprintf_internal_r+0x5c0>
   43ff8:	8080040c 	andi	r2,r16,16
   43ffc:	10007026 	beq	r2,zero,441c0 <___vfprintf_internal_r+0x14a4>
   44000:	d8812d17 	ldw	r2,1204(sp)
   44004:	002d883a 	mov	r22,zero
   44008:	00c00044 	movi	r3,1
   4400c:	15c00017 	ldw	r23,0(r2)
   44010:	10800104 	addi	r2,r2,4
   44014:	d8812d15 	stw	r2,1204(sp)
   44018:	d8012585 	stb	zero,1174(sp)
   4401c:	b805883a 	mov	r2,r23
   44020:	003cb706 	br	43300 <___vfprintf_internal_r+0x5e4>
   44024:	d8813217 	ldw	r2,1224(sp)
   44028:	14ffffc4 	addi	r19,r2,-1
   4402c:	04ff4f0e 	bge	zero,r19,43d6c <___vfprintf_internal_r+0x1050>
   44030:	05800404 	movi	r22,16
   44034:	05000174 	movhi	r20,5
   44038:	a539a684 	addi	r20,r20,-6502
   4403c:	b4c0470e 	bge	r22,r19,4415c <___vfprintf_internal_r+0x1440>
   44040:	05c001c4 	movi	r23,7
   44044:	df012917 	ldw	fp,1188(sp)
   44048:	00000306 	br	44058 <___vfprintf_internal_r+0x133c>
   4404c:	94800204 	addi	r18,r18,8
   44050:	9cfffc04 	addi	r19,r19,-16
   44054:	b4c0410e 	bge	r22,r19,4415c <___vfprintf_internal_r+0x1440>
   44058:	95000015 	stw	r20,0(r18)
   4405c:	95800115 	stw	r22,4(r18)
   44060:	42000404 	addi	r8,r8,16
   44064:	18c00044 	addi	r3,r3,1
   44068:	da011d15 	stw	r8,1140(sp)
   4406c:	d8c11c15 	stw	r3,1136(sp)
   44070:	b8fff60e 	bge	r23,r3,4404c <___vfprintf_internal_r+0x1330>
   44074:	8809883a 	mov	r4,r17
   44078:	e00b883a 	mov	r5,fp
   4407c:	d9811b04 	addi	r6,sp,1132
   44080:	0042ce80 	call	42ce8 <__sprint_r>
   44084:	103c6b1e 	bne	r2,zero,43234 <___vfprintf_internal_r+0x518>
   44088:	da011d17 	ldw	r8,1140(sp)
   4408c:	d8c11c17 	ldw	r3,1136(sp)
   44090:	dc800404 	addi	r18,sp,16
   44094:	003fee06 	br	44050 <___vfprintf_internal_r+0x1334>
   44098:	8080040c 	andi	r2,r16,16
   4409c:	10005326 	beq	r2,zero,441ec <___vfprintf_internal_r+0x14d0>
   440a0:	d8c12d17 	ldw	r3,1204(sp)
   440a4:	002d883a 	mov	r22,zero
   440a8:	1dc00017 	ldw	r23,0(r3)
   440ac:	18c00104 	addi	r3,r3,4
   440b0:	d8c12d15 	stw	r3,1204(sp)
   440b4:	b805883a 	mov	r2,r23
   440b8:	0007883a 	mov	r3,zero
   440bc:	d8012585 	stb	zero,1174(sp)
   440c0:	003c8f06 	br	43300 <___vfprintf_internal_r+0x5e4>
   440c4:	8088703a 	and	r4,r16,r2
   440c8:	203efe1e 	bne	r4,zero,43cc4 <___vfprintf_internal_r+0xfa8>
   440cc:	48800115 	stw	r2,4(r9)
   440d0:	42000044 	addi	r8,r8,1
   440d4:	18c00044 	addi	r3,r3,1
   440d8:	da011d15 	stw	r8,1140(sp)
   440dc:	d8c11c15 	stw	r3,1136(sp)
   440e0:	008001c4 	movi	r2,7
   440e4:	10c00216 	blt	r2,r3,440f0 <___vfprintf_internal_r+0x13d4>
   440e8:	4c800204 	addi	r18,r9,8
   440ec:	003f1f06 	br	43d6c <___vfprintf_internal_r+0x1050>
   440f0:	d9412917 	ldw	r5,1188(sp)
   440f4:	8809883a 	mov	r4,r17
   440f8:	d9811b04 	addi	r6,sp,1132
   440fc:	0042ce80 	call	42ce8 <__sprint_r>
   44100:	103c4c1e 	bne	r2,zero,43234 <___vfprintf_internal_r+0x518>
   44104:	dc800404 	addi	r18,sp,16
   44108:	da011d17 	ldw	r8,1140(sp)
   4410c:	d8c11c17 	ldw	r3,1136(sp)
   44110:	003f1606 	br	43d6c <___vfprintf_internal_r+0x1050>
   44114:	d9412917 	ldw	r5,1188(sp)
   44118:	8809883a 	mov	r4,r17
   4411c:	d9811b04 	addi	r6,sp,1132
   44120:	0042ce80 	call	42ce8 <__sprint_r>
   44124:	103c431e 	bne	r2,zero,43234 <___vfprintf_internal_r+0x518>
   44128:	da011d17 	ldw	r8,1140(sp)
   4412c:	d8c11c17 	ldw	r3,1136(sp)
   44130:	da400404 	addi	r9,sp,16
   44134:	003eec06 	br	43ce8 <___vfprintf_internal_r+0xfcc>
   44138:	d9412917 	ldw	r5,1188(sp)
   4413c:	8809883a 	mov	r4,r17
   44140:	d9811b04 	addi	r6,sp,1132
   44144:	0042ce80 	call	42ce8 <__sprint_r>
   44148:	103c3a1e 	bne	r2,zero,43234 <___vfprintf_internal_r+0x518>
   4414c:	da011d17 	ldw	r8,1140(sp)
   44150:	d8c11c17 	ldw	r3,1136(sp)
   44154:	dc800404 	addi	r18,sp,16
   44158:	003eee06 	br	43d14 <___vfprintf_internal_r+0xff8>
   4415c:	95000015 	stw	r20,0(r18)
   44160:	94c00115 	stw	r19,4(r18)
   44164:	44d1883a 	add	r8,r8,r19
   44168:	003efa06 	br	43d54 <___vfprintf_internal_r+0x1038>
   4416c:	d9412917 	ldw	r5,1188(sp)
   44170:	8809883a 	mov	r4,r17
   44174:	d9811b04 	addi	r6,sp,1132
   44178:	0042ce80 	call	42ce8 <__sprint_r>
   4417c:	103c2d1e 	bne	r2,zero,43234 <___vfprintf_internal_r+0x518>
   44180:	da011d17 	ldw	r8,1140(sp)
   44184:	d8c11c17 	ldw	r3,1136(sp)
   44188:	da400404 	addi	r9,sp,16
   4418c:	003d9806 	br	437f0 <___vfprintf_internal_r+0xad4>
   44190:	8080100c 	andi	r2,r16,64
   44194:	10011626 	beq	r2,zero,445f0 <___vfprintf_internal_r+0x18d4>
   44198:	d8c12d17 	ldw	r3,1204(sp)
   4419c:	002d883a 	mov	r22,zero
   441a0:	1dc0000b 	ldhu	r23,0(r3)
   441a4:	18c00104 	addi	r3,r3,4
   441a8:	d8c12d15 	stw	r3,1204(sp)
   441ac:	003cc106 	br	434b4 <___vfprintf_internal_r+0x798>
   441b0:	4d000015 	stw	r20,0(r9)
   441b4:	4c800115 	stw	r18,4(r9)
   441b8:	4491883a 	add	r8,r8,r18
   441bc:	003dc006 	br	438c0 <___vfprintf_internal_r+0xba4>
   441c0:	8080100c 	andi	r2,r16,64
   441c4:	10010126 	beq	r2,zero,445cc <___vfprintf_internal_r+0x18b0>
   441c8:	d8c12d17 	ldw	r3,1204(sp)
   441cc:	002d883a 	mov	r22,zero
   441d0:	1dc0000b 	ldhu	r23,0(r3)
   441d4:	18c00104 	addi	r3,r3,4
   441d8:	d8c12d15 	stw	r3,1204(sp)
   441dc:	b805883a 	mov	r2,r23
   441e0:	00c00044 	movi	r3,1
   441e4:	d8012585 	stb	zero,1174(sp)
   441e8:	003c4506 	br	43300 <___vfprintf_internal_r+0x5e4>
   441ec:	8080100c 	andi	r2,r16,64
   441f0:	10010526 	beq	r2,zero,44608 <___vfprintf_internal_r+0x18ec>
   441f4:	d9012d17 	ldw	r4,1204(sp)
   441f8:	002d883a 	mov	r22,zero
   441fc:	0007883a 	mov	r3,zero
   44200:	25c0000b 	ldhu	r23,0(r4)
   44204:	21000104 	addi	r4,r4,4
   44208:	d9012d15 	stw	r4,1204(sp)
   4420c:	b805883a 	mov	r2,r23
   44210:	d8012585 	stb	zero,1174(sp)
   44214:	003c3a06 	br	43300 <___vfprintf_internal_r+0x5e4>
   44218:	d8812d17 	ldw	r2,1204(sp)
   4421c:	15800017 	ldw	r22,0(r2)
   44220:	15000117 	ldw	r20,4(r2)
   44224:	10800204 	addi	r2,r2,8
   44228:	d8812d15 	stw	r2,1204(sp)
   4422c:	dd813315 	stw	r22,1228(sp)
   44230:	dd013415 	stw	r20,1232(sp)
   44234:	003c5906 	br	4339c <___vfprintf_internal_r+0x680>
   44238:	00c00084 	movi	r3,2
   4423c:	d8012585 	stb	zero,1174(sp)
   44240:	003c2f06 	br	43300 <___vfprintf_internal_r+0x5e4>
   44244:	ac800007 	ldb	r18,0(r21)
   44248:	003b1006 	br	42e8c <___vfprintf_internal_r+0x170>
   4424c:	8080040c 	andi	r2,r16,16
   44250:	1000091e 	bne	r2,zero,44278 <___vfprintf_internal_r+0x155c>
   44254:	8400100c 	andi	r16,r16,64
   44258:	80000726 	beq	r16,zero,44278 <___vfprintf_internal_r+0x155c>
   4425c:	d8c12d17 	ldw	r3,1204(sp)
   44260:	d9012c17 	ldw	r4,1200(sp)
   44264:	18800017 	ldw	r2,0(r3)
   44268:	18c00104 	addi	r3,r3,4
   4426c:	d8c12d15 	stw	r3,1204(sp)
   44270:	1100000d 	sth	r4,0(r2)
   44274:	003adf06 	br	42df4 <___vfprintf_internal_r+0xd8>
   44278:	d8c12d17 	ldw	r3,1204(sp)
   4427c:	d9012c17 	ldw	r4,1200(sp)
   44280:	18800017 	ldw	r2,0(r3)
   44284:	18c00104 	addi	r3,r3,4
   44288:	d8c12d15 	stw	r3,1204(sp)
   4428c:	11000015 	stw	r4,0(r2)
   44290:	003ad806 	br	42df4 <___vfprintf_internal_r+0xd8>
   44294:	8080100c 	andi	r2,r16,64
   44298:	1000c526 	beq	r2,zero,445b0 <___vfprintf_internal_r+0x1894>
   4429c:	d8812d17 	ldw	r2,1204(sp)
   442a0:	15c0000f 	ldh	r23,0(r2)
   442a4:	10800104 	addi	r2,r2,4
   442a8:	d8812d15 	stw	r2,1204(sp)
   442ac:	b82dd7fa 	srai	r22,r23,31
   442b0:	b005883a 	mov	r2,r22
   442b4:	003c0906 	br	432dc <___vfprintf_internal_r+0x5c0>
   442b8:	4c800115 	stw	r18,4(r9)
   442bc:	9211883a 	add	r8,r18,r8
   442c0:	18c00044 	addi	r3,r3,1
   442c4:	da011d15 	stw	r8,1140(sp)
   442c8:	d8c11c15 	stw	r3,1136(sp)
   442cc:	008001c4 	movi	r2,7
   442d0:	10c14016 	blt	r2,r3,447d4 <___vfprintf_internal_r+0x1ab8>
   442d4:	4a400204 	addi	r9,r9,8
   442d8:	d8813717 	ldw	r2,1244(sp)
   442dc:	9ca7883a 	add	r19,r19,r18
   442e0:	48800015 	stw	r2,0(r9)
   442e4:	00800044 	movi	r2,1
   442e8:	48800115 	stw	r2,4(r9)
   442ec:	4091883a 	add	r8,r8,r2
   442f0:	1887883a 	add	r3,r3,r2
   442f4:	da011d15 	stw	r8,1140(sp)
   442f8:	d8c11c15 	stw	r3,1136(sp)
   442fc:	008001c4 	movi	r2,7
   44300:	10c12c16 	blt	r2,r3,447b4 <___vfprintf_internal_r+0x1a98>
   44304:	4a400204 	addi	r9,r9,8
   44308:	d9013217 	ldw	r4,1224(sp)
   4430c:	da011d17 	ldw	r8,1140(sp)
   44310:	d8c11c17 	ldw	r3,1136(sp)
   44314:	24a5c83a 	sub	r18,r4,r18
   44318:	4cc00015 	stw	r19,0(r9)
   4431c:	003fa506 	br	441b4 <___vfprintf_internal_r+0x1498>
   44320:	04c00174 	movhi	r19,5
   44324:	9cf99304 	addi	r19,r19,-6580
   44328:	003c2e06 	br	433e4 <___vfprintf_internal_r+0x6c8>
   4432c:	d9412917 	ldw	r5,1188(sp)
   44330:	8809883a 	mov	r4,r17
   44334:	d9811b04 	addi	r6,sp,1132
   44338:	0042ce80 	call	42ce8 <__sprint_r>
   4433c:	103bbd1e 	bne	r2,zero,43234 <___vfprintf_internal_r+0x518>
   44340:	da011d17 	ldw	r8,1140(sp)
   44344:	da400404 	addi	r9,sp,16
   44348:	003df606 	br	43b24 <___vfprintf_internal_r+0xe08>
   4434c:	00800174 	movhi	r2,5
   44350:	10b9a204 	addi	r2,r2,-6520
   44354:	48800015 	stw	r2,0(r9)
   44358:	00800044 	movi	r2,1
   4435c:	48800115 	stw	r2,4(r9)
   44360:	4091883a 	add	r8,r8,r2
   44364:	1887883a 	add	r3,r3,r2
   44368:	da011d15 	stw	r8,1140(sp)
   4436c:	d8c11c15 	stw	r3,1136(sp)
   44370:	008001c4 	movi	r2,7
   44374:	10c0bc16 	blt	r2,r3,44668 <___vfprintf_internal_r+0x194c>
   44378:	4a400204 	addi	r9,r9,8
   4437c:	9000041e 	bne	r18,zero,44390 <___vfprintf_internal_r+0x1674>
   44380:	d8c13217 	ldw	r3,1224(sp)
   44384:	1800021e 	bne	r3,zero,44390 <___vfprintf_internal_r+0x1674>
   44388:	8080004c 	andi	r2,r16,1
   4438c:	103d5226 	beq	r2,zero,438d8 <___vfprintf_internal_r+0xbbc>
   44390:	d8c11c17 	ldw	r3,1136(sp)
   44394:	d9013717 	ldw	r4,1244(sp)
   44398:	00800044 	movi	r2,1
   4439c:	48800115 	stw	r2,4(r9)
   443a0:	49000015 	stw	r4,0(r9)
   443a4:	4091883a 	add	r8,r8,r2
   443a8:	1887883a 	add	r3,r3,r2
   443ac:	da011d15 	stw	r8,1140(sp)
   443b0:	d8c11c15 	stw	r3,1136(sp)
   443b4:	008001c4 	movi	r2,7
   443b8:	10c14516 	blt	r2,r3,448d0 <___vfprintf_internal_r+0x1bb4>
   443bc:	4a400204 	addi	r9,r9,8
   443c0:	04a5c83a 	sub	r18,zero,r18
   443c4:	0480d70e 	bge	zero,r18,44724 <___vfprintf_internal_r+0x1a08>
   443c8:	05800404 	movi	r22,16
   443cc:	05000174 	movhi	r20,5
   443d0:	a539a684 	addi	r20,r20,-6502
   443d4:	b480db0e 	bge	r22,r18,44744 <___vfprintf_internal_r+0x1a28>
   443d8:	05c001c4 	movi	r23,7
   443dc:	df012917 	ldw	fp,1188(sp)
   443e0:	00000306 	br	443f0 <___vfprintf_internal_r+0x16d4>
   443e4:	4a400204 	addi	r9,r9,8
   443e8:	94bffc04 	addi	r18,r18,-16
   443ec:	b480d50e 	bge	r22,r18,44744 <___vfprintf_internal_r+0x1a28>
   443f0:	4d000015 	stw	r20,0(r9)
   443f4:	4d800115 	stw	r22,4(r9)
   443f8:	42000404 	addi	r8,r8,16
   443fc:	18c00044 	addi	r3,r3,1
   44400:	da011d15 	stw	r8,1140(sp)
   44404:	d8c11c15 	stw	r3,1136(sp)
   44408:	b8fff60e 	bge	r23,r3,443e4 <___vfprintf_internal_r+0x16c8>
   4440c:	8809883a 	mov	r4,r17
   44410:	e00b883a 	mov	r5,fp
   44414:	d9811b04 	addi	r6,sp,1132
   44418:	0042ce80 	call	42ce8 <__sprint_r>
   4441c:	103b851e 	bne	r2,zero,43234 <___vfprintf_internal_r+0x518>
   44420:	da011d17 	ldw	r8,1140(sp)
   44424:	d8c11c17 	ldw	r3,1136(sp)
   44428:	da400404 	addi	r9,sp,16
   4442c:	003fee06 	br	443e8 <___vfprintf_internal_r+0x16cc>
   44430:	da413c15 	stw	r9,1264(sp)
   44434:	00493800 	call	49380 <__isnand>
   44438:	da413c17 	ldw	r9,1264(sp)
   4443c:	10007e1e 	bne	r2,zero,44638 <___vfprintf_internal_r+0x191c>
   44440:	00bfffc4 	movi	r2,-1
   44444:	e0816a26 	beq	fp,r2,449f0 <___vfprintf_internal_r+0x1cd4>
   44448:	008019c4 	movi	r2,103
   4444c:	90816526 	beq	r18,r2,449e4 <___vfprintf_internal_r+0x1cc8>
   44450:	008011c4 	movi	r2,71
   44454:	90816326 	beq	r18,r2,449e4 <___vfprintf_internal_r+0x1cc8>
   44458:	80c04014 	ori	r3,r16,256
   4445c:	d8c12a15 	stw	r3,1192(sp)
   44460:	a0016516 	blt	r20,zero,449f8 <___vfprintf_internal_r+0x1cdc>
   44464:	d8012f05 	stb	zero,1212(sp)
   44468:	00801984 	movi	r2,102
   4446c:	9080f226 	beq	r18,r2,44838 <___vfprintf_internal_r+0x1b1c>
   44470:	00801184 	movi	r2,70
   44474:	9080f026 	beq	r18,r2,44838 <___vfprintf_internal_r+0x1b1c>
   44478:	00801944 	movi	r2,101
   4447c:	90818d26 	beq	r18,r2,44ab4 <___vfprintf_internal_r+0x1d98>
   44480:	00801144 	movi	r2,69
   44484:	90818b26 	beq	r18,r2,44ab4 <___vfprintf_internal_r+0x1d98>
   44488:	e02f883a 	mov	r23,fp
   4448c:	d8812404 	addi	r2,sp,1168
   44490:	d8800115 	stw	r2,4(sp)
   44494:	d8812304 	addi	r2,sp,1164
   44498:	d8800215 	stw	r2,8(sp)
   4449c:	d8812204 	addi	r2,sp,1160
   444a0:	ddc00015 	stw	r23,0(sp)
   444a4:	d8800315 	stw	r2,12(sp)
   444a8:	8809883a 	mov	r4,r17
   444ac:	b00b883a 	mov	r5,r22
   444b0:	a00d883a 	mov	r6,r20
   444b4:	01c00084 	movi	r7,2
   444b8:	da413c15 	stw	r9,1264(sp)
   444bc:	004503c0 	call	4503c <_dtoa_r>
   444c0:	1027883a 	mov	r19,r2
   444c4:	008019c4 	movi	r2,103
   444c8:	da413c17 	ldw	r9,1264(sp)
   444cc:	9081951e 	bne	r18,r2,44b24 <___vfprintf_internal_r+0x1e08>
   444d0:	8080004c 	andi	r2,r16,1
   444d4:	10017926 	beq	r2,zero,44abc <___vfprintf_internal_r+0x1da0>
   444d8:	00801184 	movi	r2,70
   444dc:	9dc7883a 	add	r3,r19,r23
   444e0:	9080e626 	beq	r18,r2,4487c <___vfprintf_internal_r+0x1b60>
   444e4:	b009883a 	mov	r4,r22
   444e8:	a00b883a 	mov	r5,r20
   444ec:	000d883a 	mov	r6,zero
   444f0:	000f883a 	mov	r7,zero
   444f4:	d8c13b15 	stw	r3,1260(sp)
   444f8:	da413c15 	stw	r9,1264(sp)
   444fc:	004a9d00 	call	4a9d0 <__eqdf2>
   44500:	d8c13b17 	ldw	r3,1260(sp)
   44504:	da413c17 	ldw	r9,1264(sp)
   44508:	10000726 	beq	r2,zero,44528 <___vfprintf_internal_r+0x180c>
   4450c:	d8812217 	ldw	r2,1160(sp)
   44510:	10c18a2e 	bgeu	r2,r3,44b3c <___vfprintf_internal_r+0x1e20>
   44514:	01000c04 	movi	r4,48
   44518:	11000005 	stb	r4,0(r2)
   4451c:	10800044 	addi	r2,r2,1
   44520:	d8812215 	stw	r2,1160(sp)
   44524:	10fffc1e 	bne	r2,r3,44518 <___vfprintf_internal_r+0x17fc>
   44528:	1cc7c83a 	sub	r3,r3,r19
   4452c:	d8c13215 	stw	r3,1224(sp)
   44530:	008019c4 	movi	r2,103
   44534:	9080fa26 	beq	r18,r2,44920 <___vfprintf_internal_r+0x1c04>
   44538:	008011c4 	movi	r2,71
   4453c:	9080f826 	beq	r18,r2,44920 <___vfprintf_internal_r+0x1c04>
   44540:	00801984 	movi	r2,102
   44544:	90818e1e 	bne	r18,r2,44b80 <___vfprintf_internal_r+0x1e64>
   44548:	d8812417 	ldw	r2,1168(sp)
   4454c:	d8812b15 	stw	r2,1196(sp)
   44550:	00817c0e 	bge	zero,r2,44b44 <___vfprintf_internal_r+0x1e28>
   44554:	e000021e 	bne	fp,zero,44560 <___vfprintf_internal_r+0x1844>
   44558:	8400004c 	andi	r16,r16,1
   4455c:	80000426 	beq	r16,zero,44570 <___vfprintf_internal_r+0x1854>
   44560:	d8812b17 	ldw	r2,1196(sp)
   44564:	e2000044 	addi	r8,fp,1
   44568:	1205883a 	add	r2,r2,r8
   4456c:	d8812b15 	stw	r2,1196(sp)
   44570:	d8812815 	stw	r2,1184(sp)
   44574:	10010b16 	blt	r2,zero,449a4 <___vfprintf_internal_r+0x1c88>
   44578:	ddc12f07 	ldb	r23,1212(sp)
   4457c:	b800e426 	beq	r23,zero,44910 <___vfprintf_internal_r+0x1bf4>
   44580:	00800b44 	movi	r2,45
   44584:	d8812585 	stb	r2,1174(sp)
   44588:	dc012a17 	ldw	r16,1192(sp)
   4458c:	d8013115 	stw	zero,1220(sp)
   44590:	003b7306 	br	43360 <___vfprintf_internal_r+0x644>
   44594:	d8812b17 	ldw	r2,1196(sp)
   44598:	d8812815 	stw	r2,1184(sp)
   4459c:	10005716 	blt	r2,zero,446fc <___vfprintf_internal_r+0x19e0>
   445a0:	d8812583 	ldbu	r2,1174(sp)
   445a4:	ddc12d15 	stw	r23,1204(sp)
   445a8:	d8013115 	stw	zero,1220(sp)
   445ac:	003b6806 	br	43350 <___vfprintf_internal_r+0x634>
   445b0:	d8c12d17 	ldw	r3,1204(sp)
   445b4:	1dc00017 	ldw	r23,0(r3)
   445b8:	18c00104 	addi	r3,r3,4
   445bc:	d8c12d15 	stw	r3,1204(sp)
   445c0:	b82dd7fa 	srai	r22,r23,31
   445c4:	b005883a 	mov	r2,r22
   445c8:	003b4406 	br	432dc <___vfprintf_internal_r+0x5c0>
   445cc:	d9012d17 	ldw	r4,1204(sp)
   445d0:	002d883a 	mov	r22,zero
   445d4:	00c00044 	movi	r3,1
   445d8:	25c00017 	ldw	r23,0(r4)
   445dc:	21000104 	addi	r4,r4,4
   445e0:	d9012d15 	stw	r4,1204(sp)
   445e4:	b805883a 	mov	r2,r23
   445e8:	d8012585 	stb	zero,1174(sp)
   445ec:	003b4406 	br	43300 <___vfprintf_internal_r+0x5e4>
   445f0:	d9012d17 	ldw	r4,1204(sp)
   445f4:	002d883a 	mov	r22,zero
   445f8:	25c00017 	ldw	r23,0(r4)
   445fc:	21000104 	addi	r4,r4,4
   44600:	d9012d15 	stw	r4,1204(sp)
   44604:	003bab06 	br	434b4 <___vfprintf_internal_r+0x798>
   44608:	d8812d17 	ldw	r2,1204(sp)
   4460c:	002d883a 	mov	r22,zero
   44610:	0007883a 	mov	r3,zero
   44614:	15c00017 	ldw	r23,0(r2)
   44618:	10800104 	addi	r2,r2,4
   4461c:	d8812d15 	stw	r2,1204(sp)
   44620:	d8012585 	stb	zero,1174(sp)
   44624:	b805883a 	mov	r2,r23
   44628:	003b3506 	br	43300 <___vfprintf_internal_r+0x5e4>
   4462c:	00ffffc4 	movi	r3,-1
   44630:	b82b883a 	mov	r21,r23
   44634:	003a1606 	br	42e90 <___vfprintf_internal_r+0x174>
   44638:	008011c4 	movi	r2,71
   4463c:	1480b116 	blt	r2,r18,44904 <___vfprintf_internal_r+0x1be8>
   44640:	04c00174 	movhi	r19,5
   44644:	9cf99404 	addi	r19,r19,-6576
   44648:	00c000c4 	movi	r3,3
   4464c:	00bfdfc4 	movi	r2,-129
   44650:	80a0703a 	and	r16,r16,r2
   44654:	d8c12815 	stw	r3,1184(sp)
   44658:	d8812583 	ldbu	r2,1174(sp)
   4465c:	d8c12b15 	stw	r3,1196(sp)
   44660:	d8013115 	stw	zero,1220(sp)
   44664:	003b3a06 	br	43350 <___vfprintf_internal_r+0x634>
   44668:	d9412917 	ldw	r5,1188(sp)
   4466c:	8809883a 	mov	r4,r17
   44670:	d9811b04 	addi	r6,sp,1132
   44674:	0042ce80 	call	42ce8 <__sprint_r>
   44678:	103aee1e 	bne	r2,zero,43234 <___vfprintf_internal_r+0x518>
   4467c:	dc812417 	ldw	r18,1168(sp)
   44680:	da011d17 	ldw	r8,1140(sp)
   44684:	da400404 	addi	r9,sp,16
   44688:	003f3c06 	br	4437c <___vfprintf_internal_r+0x1660>
   4468c:	ad400044 	addi	r21,r21,1
   44690:	84000814 	ori	r16,r16,32
   44694:	14800047 	ldb	r18,1(r2)
   44698:	0039fc06 	br	42e8c <___vfprintf_internal_r+0x170>
   4469c:	d9412917 	ldw	r5,1188(sp)
   446a0:	8809883a 	mov	r4,r17
   446a4:	d9811b04 	addi	r6,sp,1132
   446a8:	0042ce80 	call	42ce8 <__sprint_r>
   446ac:	103ae11e 	bne	r2,zero,43234 <___vfprintf_internal_r+0x518>
   446b0:	da011d17 	ldw	r8,1140(sp)
   446b4:	da400404 	addi	r9,sp,16
   446b8:	003d2b06 	br	43b68 <___vfprintf_internal_r+0xe4c>
   446bc:	4d000015 	stw	r20,0(r9)
   446c0:	4c800115 	stw	r18,4(r9)
   446c4:	4491883a 	add	r8,r8,r18
   446c8:	18c00044 	addi	r3,r3,1
   446cc:	da011d15 	stw	r8,1140(sp)
   446d0:	d8c11c15 	stw	r3,1136(sp)
   446d4:	008001c4 	movi	r2,7
   446d8:	10fcbd16 	blt	r2,r3,439d0 <___vfprintf_internal_r+0xcb4>
   446dc:	4a400204 	addi	r9,r9,8
   446e0:	003cc206 	br	439ec <___vfprintf_internal_r+0xcd0>
   446e4:	da413c15 	stw	r9,1264(sp)
   446e8:	0042c540 	call	42c54 <strlen>
   446ec:	d8812b15 	stw	r2,1196(sp)
   446f0:	d8812815 	stw	r2,1184(sp)
   446f4:	da413c17 	ldw	r9,1264(sp)
   446f8:	103fa90e 	bge	r2,zero,445a0 <___vfprintf_internal_r+0x1884>
   446fc:	d8012815 	stw	zero,1184(sp)
   44700:	003fa706 	br	445a0 <___vfprintf_internal_r+0x1884>
   44704:	d9412917 	ldw	r5,1188(sp)
   44708:	8809883a 	mov	r4,r17
   4470c:	d9811b04 	addi	r6,sp,1132
   44710:	0042ce80 	call	42ce8 <__sprint_r>
   44714:	103ac71e 	bne	r2,zero,43234 <___vfprintf_internal_r+0x518>
   44718:	da011d17 	ldw	r8,1140(sp)
   4471c:	d8c11c17 	ldw	r3,1136(sp)
   44720:	da400404 	addi	r9,sp,16
   44724:	d8813217 	ldw	r2,1224(sp)
   44728:	4cc00015 	stw	r19,0(r9)
   4472c:	48800115 	stw	r2,4(r9)
   44730:	4091883a 	add	r8,r8,r2
   44734:	003c6206 	br	438c0 <___vfprintf_internal_r+0xba4>
   44738:	00800b44 	movi	r2,45
   4473c:	d8812585 	stb	r2,1174(sp)
   44740:	003b2406 	br	433d4 <___vfprintf_internal_r+0x6b8>
   44744:	4d000015 	stw	r20,0(r9)
   44748:	4c800115 	stw	r18,4(r9)
   4474c:	4491883a 	add	r8,r8,r18
   44750:	18c00044 	addi	r3,r3,1
   44754:	da011d15 	stw	r8,1140(sp)
   44758:	d8c11c15 	stw	r3,1136(sp)
   4475c:	008001c4 	movi	r2,7
   44760:	10ffe816 	blt	r2,r3,44704 <___vfprintf_internal_r+0x19e8>
   44764:	4a400204 	addi	r9,r9,8
   44768:	003fee06 	br	44724 <___vfprintf_internal_r+0x1a08>
   4476c:	d8c12b15 	stw	r3,1196(sp)
   44770:	00800184 	movi	r2,6
   44774:	10c0062e 	bgeu	r2,r3,44790 <___vfprintf_internal_r+0x1a74>
   44778:	d8812b15 	stw	r2,1196(sp)
   4477c:	d8812815 	stw	r2,1184(sp)
   44780:	ddc12d15 	stw	r23,1204(sp)
   44784:	04c00174 	movhi	r19,5
   44788:	9cf9a004 	addi	r19,r19,-6528
   4478c:	0039ca06 	br	42eb8 <___vfprintf_internal_r+0x19c>
   44790:	d8812b17 	ldw	r2,1196(sp)
   44794:	d8812815 	stw	r2,1184(sp)
   44798:	103ff90e 	bge	r2,zero,44780 <___vfprintf_internal_r+0x1a64>
   4479c:	d8012815 	stw	zero,1184(sp)
   447a0:	003ff706 	br	44780 <___vfprintf_internal_r+0x1a64>
   447a4:	00800244 	movi	r2,9
   447a8:	15fdaa36 	bltu	r2,r23,43e54 <___vfprintf_internal_r+0x1138>
   447ac:	dd010e04 	addi	r20,sp,1080
   447b0:	003dc606 	br	43ecc <___vfprintf_internal_r+0x11b0>
   447b4:	d9412917 	ldw	r5,1188(sp)
   447b8:	8809883a 	mov	r4,r17
   447bc:	d9811b04 	addi	r6,sp,1132
   447c0:	0042ce80 	call	42ce8 <__sprint_r>
   447c4:	103a9b1e 	bne	r2,zero,43234 <___vfprintf_internal_r+0x518>
   447c8:	dc812417 	ldw	r18,1168(sp)
   447cc:	da400404 	addi	r9,sp,16
   447d0:	003ecd06 	br	44308 <___vfprintf_internal_r+0x15ec>
   447d4:	d9412917 	ldw	r5,1188(sp)
   447d8:	8809883a 	mov	r4,r17
   447dc:	d9811b04 	addi	r6,sp,1132
   447e0:	0042ce80 	call	42ce8 <__sprint_r>
   447e4:	103a931e 	bne	r2,zero,43234 <___vfprintf_internal_r+0x518>
   447e8:	dc812417 	ldw	r18,1168(sp)
   447ec:	da011d17 	ldw	r8,1140(sp)
   447f0:	d8c11c17 	ldw	r3,1136(sp)
   447f4:	da400404 	addi	r9,sp,16
   447f8:	003eb706 	br	442d8 <___vfprintf_internal_r+0x15bc>
   447fc:	d9412917 	ldw	r5,1188(sp)
   44800:	8809883a 	mov	r4,r17
   44804:	d9811b04 	addi	r6,sp,1132
   44808:	0042ce80 	call	42ce8 <__sprint_r>
   4480c:	103a891e 	bne	r2,zero,43234 <___vfprintf_internal_r+0x518>
   44810:	dc812417 	ldw	r18,1168(sp)
   44814:	da011d17 	ldw	r8,1140(sp)
   44818:	da400404 	addi	r9,sp,16
   4481c:	003dc206 	br	43f28 <___vfprintf_internal_r+0x120c>
   44820:	df012815 	stw	fp,1184(sp)
   44824:	d8812583 	ldbu	r2,1174(sp)
   44828:	df012b15 	stw	fp,1196(sp)
   4482c:	ddc12d15 	stw	r23,1204(sp)
   44830:	d8013115 	stw	zero,1220(sp)
   44834:	003ac606 	br	43350 <___vfprintf_internal_r+0x634>
   44838:	d8812404 	addi	r2,sp,1168
   4483c:	d8800115 	stw	r2,4(sp)
   44840:	d8812304 	addi	r2,sp,1164
   44844:	d8800215 	stw	r2,8(sp)
   44848:	d8812204 	addi	r2,sp,1160
   4484c:	df000015 	stw	fp,0(sp)
   44850:	d8800315 	stw	r2,12(sp)
   44854:	8809883a 	mov	r4,r17
   44858:	b00b883a 	mov	r5,r22
   4485c:	a00d883a 	mov	r6,r20
   44860:	01c000c4 	movi	r7,3
   44864:	da413c15 	stw	r9,1264(sp)
   44868:	004503c0 	call	4503c <_dtoa_r>
   4486c:	da413c17 	ldw	r9,1264(sp)
   44870:	1027883a 	mov	r19,r2
   44874:	1707883a 	add	r3,r2,fp
   44878:	e02f883a 	mov	r23,fp
   4487c:	99000007 	ldb	r4,0(r19)
   44880:	00800c04 	movi	r2,48
   44884:	20800326 	beq	r4,r2,44894 <___vfprintf_internal_r+0x1b78>
   44888:	da812417 	ldw	r10,1168(sp)
   4488c:	1a87883a 	add	r3,r3,r10
   44890:	003f1406 	br	444e4 <___vfprintf_internal_r+0x17c8>
   44894:	b009883a 	mov	r4,r22
   44898:	a00b883a 	mov	r5,r20
   4489c:	000d883a 	mov	r6,zero
   448a0:	000f883a 	mov	r7,zero
   448a4:	d8c13b15 	stw	r3,1260(sp)
   448a8:	da413c15 	stw	r9,1264(sp)
   448ac:	004aa2c0 	call	4aa2c <__nedf2>
   448b0:	d8c13b17 	ldw	r3,1260(sp)
   448b4:	da413c17 	ldw	r9,1264(sp)
   448b8:	103ff326 	beq	r2,zero,44888 <___vfprintf_internal_r+0x1b6c>
   448bc:	00800044 	movi	r2,1
   448c0:	15d5c83a 	sub	r10,r2,r23
   448c4:	da812415 	stw	r10,1168(sp)
   448c8:	1a87883a 	add	r3,r3,r10
   448cc:	003f0506 	br	444e4 <___vfprintf_internal_r+0x17c8>
   448d0:	d9412917 	ldw	r5,1188(sp)
   448d4:	8809883a 	mov	r4,r17
   448d8:	d9811b04 	addi	r6,sp,1132
   448dc:	0042ce80 	call	42ce8 <__sprint_r>
   448e0:	103a541e 	bne	r2,zero,43234 <___vfprintf_internal_r+0x518>
   448e4:	dc812417 	ldw	r18,1168(sp)
   448e8:	da011d17 	ldw	r8,1140(sp)
   448ec:	d8c11c17 	ldw	r3,1136(sp)
   448f0:	da400404 	addi	r9,sp,16
   448f4:	003eb206 	br	443c0 <___vfprintf_internal_r+0x16a4>
   448f8:	b82b883a 	mov	r21,r23
   448fc:	0007883a 	mov	r3,zero
   44900:	00396306 	br	42e90 <___vfprintf_internal_r+0x174>
   44904:	04c00174 	movhi	r19,5
   44908:	9cf99504 	addi	r19,r19,-6572
   4490c:	003f4e06 	br	44648 <___vfprintf_internal_r+0x192c>
   44910:	d8812583 	ldbu	r2,1174(sp)
   44914:	dc012a17 	ldw	r16,1192(sp)
   44918:	d8013115 	stw	zero,1220(sp)
   4491c:	003a8c06 	br	43350 <___vfprintf_internal_r+0x634>
   44920:	d8812417 	ldw	r2,1168(sp)
   44924:	d8812b15 	stw	r2,1196(sp)
   44928:	1029883a 	mov	r20,r2
   4492c:	00bfff44 	movi	r2,-3
   44930:	a0800116 	blt	r20,r2,44938 <___vfprintf_internal_r+0x1c1c>
   44934:	e5001d0e 	bge	fp,r20,449ac <___vfprintf_internal_r+0x1c90>
   44938:	94bfff84 	addi	r18,r18,-2
   4493c:	a53fffc4 	addi	r20,r20,-1
   44940:	dd012415 	stw	r20,1168(sp)
   44944:	dc811fc5 	stb	r18,1151(sp)
   44948:	a0007216 	blt	r20,zero,44b14 <___vfprintf_internal_r+0x1df8>
   4494c:	00800ac4 	movi	r2,43
   44950:	d8812005 	stb	r2,1152(sp)
   44954:	00800244 	movi	r2,9
   44958:	15003516 	blt	r2,r20,44a30 <___vfprintf_internal_r+0x1d14>
   4495c:	00800c04 	movi	r2,48
   44960:	a5000c04 	addi	r20,r20,48
   44964:	d8812045 	stb	r2,1153(sp)
   44968:	dd012085 	stb	r20,1154(sp)
   4496c:	d8c120c4 	addi	r3,sp,1155
   44970:	d8811fc4 	addi	r2,sp,1151
   44974:	1885c83a 	sub	r2,r3,r2
   44978:	d8c13217 	ldw	r3,1224(sp)
   4497c:	d8813515 	stw	r2,1236(sp)
   44980:	1885883a 	add	r2,r3,r2
   44984:	d8812b15 	stw	r2,1196(sp)
   44988:	00800044 	movi	r2,1
   4498c:	10c0580e 	bge	r2,r3,44af0 <___vfprintf_internal_r+0x1dd4>
   44990:	d8812b17 	ldw	r2,1196(sp)
   44994:	10800044 	addi	r2,r2,1
   44998:	d8812b15 	stw	r2,1196(sp)
   4499c:	d8812815 	stw	r2,1184(sp)
   449a0:	103ef50e 	bge	r2,zero,44578 <___vfprintf_internal_r+0x185c>
   449a4:	d8012815 	stw	zero,1184(sp)
   449a8:	003ef306 	br	44578 <___vfprintf_internal_r+0x185c>
   449ac:	d8812b17 	ldw	r2,1196(sp)
   449b0:	d8c13217 	ldw	r3,1224(sp)
   449b4:	10c01416 	blt	r2,r3,44a08 <___vfprintf_internal_r+0x1cec>
   449b8:	8400004c 	andi	r16,r16,1
   449bc:	80000326 	beq	r16,zero,449cc <___vfprintf_internal_r+0x1cb0>
   449c0:	d8812b17 	ldw	r2,1196(sp)
   449c4:	10800044 	addi	r2,r2,1
   449c8:	d8812b15 	stw	r2,1196(sp)
   449cc:	d8812815 	stw	r2,1184(sp)
   449d0:	10001416 	blt	r2,zero,44a24 <___vfprintf_internal_r+0x1d08>
   449d4:	048019c4 	movi	r18,103
   449d8:	003ee706 	br	44578 <___vfprintf_internal_r+0x185c>
   449dc:	d8012815 	stw	zero,1184(sp)
   449e0:	003b1a06 	br	4364c <___vfprintf_internal_r+0x930>
   449e4:	e03e9c1e 	bne	fp,zero,44458 <___vfprintf_internal_r+0x173c>
   449e8:	07000044 	movi	fp,1
   449ec:	003e9a06 	br	44458 <___vfprintf_internal_r+0x173c>
   449f0:	07000184 	movi	fp,6
   449f4:	003e9806 	br	44458 <___vfprintf_internal_r+0x173c>
   449f8:	00c00b44 	movi	r3,45
   449fc:	a520003c 	xorhi	r20,r20,32768
   44a00:	d8c12f05 	stb	r3,1212(sp)
   44a04:	003e9806 	br	44468 <___vfprintf_internal_r+0x174c>
   44a08:	05003f0e 	bge	zero,r20,44b08 <___vfprintf_internal_r+0x1dec>
   44a0c:	05000044 	movi	r20,1
   44a10:	d8c13217 	ldw	r3,1224(sp)
   44a14:	a0e9883a 	add	r20,r20,r3
   44a18:	dd012b15 	stw	r20,1196(sp)
   44a1c:	dd012815 	stw	r20,1184(sp)
   44a20:	a03fec0e 	bge	r20,zero,449d4 <___vfprintf_internal_r+0x1cb8>
   44a24:	d8012815 	stw	zero,1184(sp)
   44a28:	048019c4 	movi	r18,103
   44a2c:	003ed206 	br	44578 <___vfprintf_internal_r+0x185c>
   44a30:	d8c11f84 	addi	r3,sp,1150
   44a34:	102f883a 	mov	r23,r2
   44a38:	4839883a 	mov	fp,r9
   44a3c:	a009883a 	mov	r4,r20
   44a40:	01400284 	movi	r5,10
   44a44:	182d883a 	mov	r22,r3
   44a48:	004ae180 	call	4ae18 <__modsi3>
   44a4c:	10800c04 	addi	r2,r2,48
   44a50:	a009883a 	mov	r4,r20
   44a54:	b0800005 	stb	r2,0(r22)
   44a58:	01400284 	movi	r5,10
   44a5c:	004adc80 	call	4adc8 <__divsi3>
   44a60:	1029883a 	mov	r20,r2
   44a64:	b0ffffc4 	addi	r3,r22,-1
   44a68:	b8bff416 	blt	r23,r2,44a3c <___vfprintf_internal_r+0x1d20>
   44a6c:	11400c04 	addi	r5,r2,48
   44a70:	b17fffc5 	stb	r5,-1(r22)
   44a74:	d8811fc4 	addi	r2,sp,1151
   44a78:	e013883a 	mov	r9,fp
   44a7c:	18803e2e 	bgeu	r3,r2,44b78 <___vfprintf_internal_r+0x1e5c>
   44a80:	b007883a 	mov	r3,r22
   44a84:	d9012044 	addi	r4,sp,1153
   44a88:	00000206 	br	44a94 <___vfprintf_internal_r+0x1d78>
   44a8c:	19400003 	ldbu	r5,0(r3)
   44a90:	18c00044 	addi	r3,r3,1
   44a94:	21400005 	stb	r5,0(r4)
   44a98:	21000044 	addi	r4,r4,1
   44a9c:	10fffb1e 	bne	r2,r3,44a8c <___vfprintf_internal_r+0x1d70>
   44aa0:	d8c12004 	addi	r3,sp,1152
   44aa4:	1d87c83a 	sub	r3,r3,r22
   44aa8:	d9012044 	addi	r4,sp,1153
   44aac:	20c7883a 	add	r3,r4,r3
   44ab0:	003fb006 	br	44974 <___vfprintf_internal_r+0x1c58>
   44ab4:	e5c00044 	addi	r23,fp,1
   44ab8:	003e7406 	br	4448c <___vfprintf_internal_r+0x1770>
   44abc:	d8c12217 	ldw	r3,1160(sp)
   44ac0:	003e9906 	br	44528 <___vfprintf_internal_r+0x180c>
   44ac4:	d9012d17 	ldw	r4,1204(sp)
   44ac8:	ac800043 	ldbu	r18,1(r21)
   44acc:	b82b883a 	mov	r21,r23
   44ad0:	20c00017 	ldw	r3,0(r4)
   44ad4:	20800104 	addi	r2,r4,4
   44ad8:	d8812d15 	stw	r2,1204(sp)
   44adc:	18002116 	blt	r3,zero,44b64 <___vfprintf_internal_r+0x1e48>
   44ae0:	94803fcc 	andi	r18,r18,255
   44ae4:	9480201c 	xori	r18,r18,128
   44ae8:	94bfe004 	addi	r18,r18,-128
   44aec:	0038e706 	br	42e8c <___vfprintf_internal_r+0x170>
   44af0:	80a0703a 	and	r16,r16,r2
   44af4:	803fa61e 	bne	r16,zero,44990 <___vfprintf_internal_r+0x1c74>
   44af8:	d8812b17 	ldw	r2,1196(sp)
   44afc:	d8812815 	stw	r2,1184(sp)
   44b00:	103e9d0e 	bge	r2,zero,44578 <___vfprintf_internal_r+0x185c>
   44b04:	003fa706 	br	449a4 <___vfprintf_internal_r+0x1c88>
   44b08:	00800084 	movi	r2,2
   44b0c:	1529c83a 	sub	r20,r2,r20
   44b10:	003fbf06 	br	44a10 <___vfprintf_internal_r+0x1cf4>
   44b14:	00800b44 	movi	r2,45
   44b18:	0529c83a 	sub	r20,zero,r20
   44b1c:	d8812005 	stb	r2,1152(sp)
   44b20:	003f8c06 	br	44954 <___vfprintf_internal_r+0x1c38>
   44b24:	008011c4 	movi	r2,71
   44b28:	90be6926 	beq	r18,r2,444d0 <___vfprintf_internal_r+0x17b4>
   44b2c:	003e6a06 	br	444d8 <___vfprintf_internal_r+0x17bc>
   44b30:	00bfffc4 	movi	r2,-1
   44b34:	d8812c15 	stw	r2,1200(sp)
   44b38:	0039ad06 	br	431f0 <___vfprintf_internal_r+0x4d4>
   44b3c:	1007883a 	mov	r3,r2
   44b40:	003e7906 	br	44528 <___vfprintf_internal_r+0x180c>
   44b44:	e000021e 	bne	fp,zero,44b50 <___vfprintf_internal_r+0x1e34>
   44b48:	8400004c 	andi	r16,r16,1
   44b4c:	80000e26 	beq	r16,zero,44b88 <___vfprintf_internal_r+0x1e6c>
   44b50:	e7000084 	addi	fp,fp,2
   44b54:	df012b15 	stw	fp,1196(sp)
   44b58:	df012815 	stw	fp,1184(sp)
   44b5c:	e03e860e 	bge	fp,zero,44578 <___vfprintf_internal_r+0x185c>
   44b60:	003f9006 	br	449a4 <___vfprintf_internal_r+0x1c88>
   44b64:	94803fcc 	andi	r18,r18,255
   44b68:	9480201c 	xori	r18,r18,128
   44b6c:	00ffffc4 	movi	r3,-1
   44b70:	94bfe004 	addi	r18,r18,-128
   44b74:	0038c506 	br	42e8c <___vfprintf_internal_r+0x170>
   44b78:	d8c12044 	addi	r3,sp,1153
   44b7c:	003f7d06 	br	44974 <___vfprintf_internal_r+0x1c58>
   44b80:	dd012417 	ldw	r20,1168(sp)
   44b84:	003f6d06 	br	4493c <___vfprintf_internal_r+0x1c20>
   44b88:	00c00044 	movi	r3,1
   44b8c:	d8c12815 	stw	r3,1184(sp)
   44b90:	d8c12b15 	stw	r3,1196(sp)
   44b94:	003e7806 	br	44578 <___vfprintf_internal_r+0x185c>

00044b98 <__vfprintf_internal>:
   44b98:	00800174 	movhi	r2,5
   44b9c:	1080ad04 	addi	r2,r2,692
   44ba0:	2007883a 	mov	r3,r4
   44ba4:	11000017 	ldw	r4,0(r2)
   44ba8:	2805883a 	mov	r2,r5
   44bac:	300f883a 	mov	r7,r6
   44bb0:	180b883a 	mov	r5,r3
   44bb4:	100d883a 	mov	r6,r2
   44bb8:	0042d1c1 	jmpi	42d1c <___vfprintf_internal_r>

00044bbc <_write_r>:
   44bbc:	defffd04 	addi	sp,sp,-12
   44bc0:	dc400115 	stw	r17,4(sp)
   44bc4:	dc000015 	stw	r16,0(sp)
   44bc8:	2023883a 	mov	r17,r4
   44bcc:	04000174 	movhi	r16,5
   44bd0:	84078604 	addi	r16,r16,7704
   44bd4:	2809883a 	mov	r4,r5
   44bd8:	300b883a 	mov	r5,r6
   44bdc:	380d883a 	mov	r6,r7
   44be0:	dfc00215 	stw	ra,8(sp)
   44be4:	80000015 	stw	zero,0(r16)
   44be8:	004bc980 	call	4bc98 <write>
   44bec:	00ffffc4 	movi	r3,-1
   44bf0:	10c00526 	beq	r2,r3,44c08 <_write_r+0x4c>
   44bf4:	dfc00217 	ldw	ra,8(sp)
   44bf8:	dc400117 	ldw	r17,4(sp)
   44bfc:	dc000017 	ldw	r16,0(sp)
   44c00:	dec00304 	addi	sp,sp,12
   44c04:	f800283a 	ret
   44c08:	80c00017 	ldw	r3,0(r16)
   44c0c:	183ff926 	beq	r3,zero,44bf4 <_write_r+0x38>
   44c10:	88c00015 	stw	r3,0(r17)
   44c14:	dfc00217 	ldw	ra,8(sp)
   44c18:	dc400117 	ldw	r17,4(sp)
   44c1c:	dc000017 	ldw	r16,0(sp)
   44c20:	dec00304 	addi	sp,sp,12
   44c24:	f800283a 	ret

00044c28 <__swsetup_r>:
   44c28:	00800174 	movhi	r2,5
   44c2c:	1080ad04 	addi	r2,r2,692
   44c30:	10800017 	ldw	r2,0(r2)
   44c34:	defffd04 	addi	sp,sp,-12
   44c38:	dc400115 	stw	r17,4(sp)
   44c3c:	dc000015 	stw	r16,0(sp)
   44c40:	dfc00215 	stw	ra,8(sp)
   44c44:	2023883a 	mov	r17,r4
   44c48:	2821883a 	mov	r16,r5
   44c4c:	10000226 	beq	r2,zero,44c58 <__swsetup_r+0x30>
   44c50:	10c00e17 	ldw	r3,56(r2)
   44c54:	18003d26 	beq	r3,zero,44d4c <__swsetup_r+0x124>
   44c58:	8080030b 	ldhu	r2,12(r16)
   44c5c:	10c0020c 	andi	r3,r2,8
   44c60:	18ffffcc 	andi	r3,r3,65535
   44c64:	18e0001c 	xori	r3,r3,32768
   44c68:	18e00004 	addi	r3,r3,-32768
   44c6c:	18001226 	beq	r3,zero,44cb8 <__swsetup_r+0x90>
   44c70:	80c00417 	ldw	r3,16(r16)
   44c74:	18001f26 	beq	r3,zero,44cf4 <__swsetup_r+0xcc>
   44c78:	1100004c 	andi	r4,r2,1
   44c7c:	2000261e 	bne	r4,zero,44d18 <__swsetup_r+0xf0>
   44c80:	1080008c 	andi	r2,r2,2
   44c84:	10bfffcc 	andi	r2,r2,65535
   44c88:	10a0001c 	xori	r2,r2,32768
   44c8c:	10a00004 	addi	r2,r2,-32768
   44c90:	1000311e 	bne	r2,zero,44d58 <__swsetup_r+0x130>
   44c94:	80800517 	ldw	r2,20(r16)
   44c98:	80800215 	stw	r2,8(r16)
   44c9c:	18002326 	beq	r3,zero,44d2c <__swsetup_r+0x104>
   44ca0:	0005883a 	mov	r2,zero
   44ca4:	dfc00217 	ldw	ra,8(sp)
   44ca8:	dc400117 	ldw	r17,4(sp)
   44cac:	dc000017 	ldw	r16,0(sp)
   44cb0:	dec00304 	addi	sp,sp,12
   44cb4:	f800283a 	ret
   44cb8:	10c0040c 	andi	r3,r2,16
   44cbc:	18ffffcc 	andi	r3,r3,65535
   44cc0:	18e0001c 	xori	r3,r3,32768
   44cc4:	18e00004 	addi	r3,r3,-32768
   44cc8:	18001e26 	beq	r3,zero,44d44 <__swsetup_r+0x11c>
   44ccc:	10c0010c 	andi	r3,r2,4
   44cd0:	18ffffcc 	andi	r3,r3,65535
   44cd4:	18e0001c 	xori	r3,r3,32768
   44cd8:	18e00004 	addi	r3,r3,-32768
   44cdc:	1800211e 	bne	r3,zero,44d64 <__swsetup_r+0x13c>
   44ce0:	80c00417 	ldw	r3,16(r16)
   44ce4:	11400214 	ori	r5,r2,8
   44ce8:	8140030d 	sth	r5,12(r16)
   44cec:	2805883a 	mov	r2,r5
   44cf0:	183fe11e 	bne	r3,zero,44c78 <__swsetup_r+0x50>
   44cf4:	1140a00c 	andi	r5,r2,640
   44cf8:	01008004 	movi	r4,512
   44cfc:	293fde26 	beq	r5,r4,44c78 <__swsetup_r+0x50>
   44d00:	8809883a 	mov	r4,r17
   44d04:	800b883a 	mov	r5,r16
   44d08:	0041e500 	call	41e50 <__smakebuf_r>
   44d0c:	8080030b 	ldhu	r2,12(r16)
   44d10:	80c00417 	ldw	r3,16(r16)
   44d14:	003fd806 	br	44c78 <__swsetup_r+0x50>
   44d18:	80800517 	ldw	r2,20(r16)
   44d1c:	80000215 	stw	zero,8(r16)
   44d20:	0085c83a 	sub	r2,zero,r2
   44d24:	80800615 	stw	r2,24(r16)
   44d28:	183fdd1e 	bne	r3,zero,44ca0 <__swsetup_r+0x78>
   44d2c:	8080030b 	ldhu	r2,12(r16)
   44d30:	1080200c 	andi	r2,r2,128
   44d34:	10bfffcc 	andi	r2,r2,65535
   44d38:	10a0001c 	xori	r2,r2,32768
   44d3c:	10a00004 	addi	r2,r2,-32768
   44d40:	103fd826 	beq	r2,zero,44ca4 <__swsetup_r+0x7c>
   44d44:	00bfffc4 	movi	r2,-1
   44d48:	003fd606 	br	44ca4 <__swsetup_r+0x7c>
   44d4c:	1009883a 	mov	r4,r2
   44d50:	00469140 	call	46914 <__sinit>
   44d54:	003fc006 	br	44c58 <__swsetup_r+0x30>
   44d58:	0005883a 	mov	r2,zero
   44d5c:	80800215 	stw	r2,8(r16)
   44d60:	003fce06 	br	44c9c <__swsetup_r+0x74>
   44d64:	81400c17 	ldw	r5,48(r16)
   44d68:	28000626 	beq	r5,zero,44d84 <__swsetup_r+0x15c>
   44d6c:	80c01004 	addi	r3,r16,64
   44d70:	28c00326 	beq	r5,r3,44d80 <__swsetup_r+0x158>
   44d74:	8809883a 	mov	r4,r17
   44d78:	0046d300 	call	46d30 <_free_r>
   44d7c:	8080030b 	ldhu	r2,12(r16)
   44d80:	80000c15 	stw	zero,48(r16)
   44d84:	80c00417 	ldw	r3,16(r16)
   44d88:	013ff6c4 	movi	r4,-37
   44d8c:	2084703a 	and	r2,r4,r2
   44d90:	80000115 	stw	zero,4(r16)
   44d94:	80c00015 	stw	r3,0(r16)
   44d98:	003fd206 	br	44ce4 <__swsetup_r+0xbc>

00044d9c <_close_r>:
   44d9c:	defffd04 	addi	sp,sp,-12
   44da0:	dc400115 	stw	r17,4(sp)
   44da4:	dc000015 	stw	r16,0(sp)
   44da8:	2023883a 	mov	r17,r4
   44dac:	04000174 	movhi	r16,5
   44db0:	84078604 	addi	r16,r16,7704
   44db4:	2809883a 	mov	r4,r5
   44db8:	dfc00215 	stw	ra,8(sp)
   44dbc:	80000015 	stw	zero,0(r16)
   44dc0:	004b0b40 	call	4b0b4 <close>
   44dc4:	00ffffc4 	movi	r3,-1
   44dc8:	10c00526 	beq	r2,r3,44de0 <_close_r+0x44>
   44dcc:	dfc00217 	ldw	ra,8(sp)
   44dd0:	dc400117 	ldw	r17,4(sp)
   44dd4:	dc000017 	ldw	r16,0(sp)
   44dd8:	dec00304 	addi	sp,sp,12
   44ddc:	f800283a 	ret
   44de0:	80c00017 	ldw	r3,0(r16)
   44de4:	183ff926 	beq	r3,zero,44dcc <_close_r+0x30>
   44de8:	88c00015 	stw	r3,0(r17)
   44dec:	dfc00217 	ldw	ra,8(sp)
   44df0:	dc400117 	ldw	r17,4(sp)
   44df4:	dc000017 	ldw	r16,0(sp)
   44df8:	dec00304 	addi	sp,sp,12
   44dfc:	f800283a 	ret

00044e00 <quorem>:
   44e00:	defff204 	addi	sp,sp,-56
   44e04:	dd000815 	stw	r20,32(sp)
   44e08:	20800417 	ldw	r2,16(r4)
   44e0c:	2d000417 	ldw	r20,16(r5)
   44e10:	dcc00715 	stw	r19,28(sp)
   44e14:	dfc00d15 	stw	ra,52(sp)
   44e18:	df000c15 	stw	fp,48(sp)
   44e1c:	ddc00b15 	stw	r23,44(sp)
   44e20:	dd800a15 	stw	r22,40(sp)
   44e24:	dd400915 	stw	r21,36(sp)
   44e28:	dc800615 	stw	r18,24(sp)
   44e2c:	dc400515 	stw	r17,20(sp)
   44e30:	dc000415 	stw	r16,16(sp)
   44e34:	d9400015 	stw	r5,0(sp)
   44e38:	2027883a 	mov	r19,r4
   44e3c:	15007d16 	blt	r2,r20,45034 <quorem+0x234>
   44e40:	a0800104 	addi	r2,r20,4
   44e44:	1085883a 	add	r2,r2,r2
   44e48:	1085883a 	add	r2,r2,r2
   44e4c:	28ad883a 	add	r22,r5,r2
   44e50:	2085883a 	add	r2,r4,r2
   44e54:	10800017 	ldw	r2,0(r2)
   44e58:	b1400017 	ldw	r5,0(r22)
   44e5c:	a53fffc4 	addi	r20,r20,-1
   44e60:	1009883a 	mov	r4,r2
   44e64:	29400044 	addi	r5,r5,1
   44e68:	d8800115 	stw	r2,4(sp)
   44e6c:	004ae740 	call	4ae74 <__udivsi3>
   44e70:	1025883a 	mov	r18,r2
   44e74:	d8800017 	ldw	r2,0(sp)
   44e78:	9f000504 	addi	fp,r19,20
   44e7c:	14000504 	addi	r16,r2,20
   44e80:	90003626 	beq	r18,zero,44f5c <quorem+0x15c>
   44e84:	802b883a 	mov	r21,r16
   44e88:	e023883a 	mov	r17,fp
   44e8c:	0007883a 	mov	r3,zero
   44e90:	002f883a 	mov	r23,zero
   44e94:	a9800017 	ldw	r6,0(r21)
   44e98:	900b883a 	mov	r5,r18
   44e9c:	d8c00315 	stw	r3,12(sp)
   44ea0:	313fffcc 	andi	r4,r6,65535
   44ea4:	d9800215 	stw	r6,8(sp)
   44ea8:	00411f80 	call	411f8 <__mulsi3>
   44eac:	d9800217 	ldw	r6,8(sp)
   44eb0:	d8c00317 	ldw	r3,12(sp)
   44eb4:	900b883a 	mov	r5,r18
   44eb8:	3008d43a 	srli	r4,r6,16
   44ebc:	1887883a 	add	r3,r3,r2
   44ec0:	d8c00315 	stw	r3,12(sp)
   44ec4:	00411f80 	call	411f8 <__mulsi3>
   44ec8:	89400017 	ldw	r5,0(r17)
   44ecc:	d8c00317 	ldw	r3,12(sp)
   44ed0:	ad400104 	addi	r21,r21,4
   44ed4:	293fffcc 	andi	r4,r5,65535
   44ed8:	1810d43a 	srli	r8,r3,16
   44edc:	25c9883a 	add	r4,r4,r23
   44ee0:	18ffffcc 	andi	r3,r3,65535
   44ee4:	20c9c83a 	sub	r4,r4,r3
   44ee8:	280cd43a 	srli	r6,r5,16
   44eec:	4085883a 	add	r2,r8,r2
   44ef0:	2007d43a 	srai	r3,r4,16
   44ef4:	117fffcc 	andi	r5,r2,65535
   44ef8:	314bc83a 	sub	r5,r6,r5
   44efc:	28cb883a 	add	r5,r5,r3
   44f00:	8940008d 	sth	r5,2(r17)
   44f04:	8900000d 	sth	r4,0(r17)
   44f08:	1006d43a 	srli	r3,r2,16
   44f0c:	282fd43a 	srai	r23,r5,16
   44f10:	8c400104 	addi	r17,r17,4
   44f14:	b57fdf2e 	bgeu	r22,r21,44e94 <quorem+0x94>
   44f18:	d8c00117 	ldw	r3,4(sp)
   44f1c:	18000f1e 	bne	r3,zero,44f5c <quorem+0x15c>
   44f20:	a0800144 	addi	r2,r20,5
   44f24:	1085883a 	add	r2,r2,r2
   44f28:	1085883a 	add	r2,r2,r2
   44f2c:	9887883a 	add	r3,r19,r2
   44f30:	18bfff04 	addi	r2,r3,-4
   44f34:	e080082e 	bgeu	fp,r2,44f58 <quorem+0x158>
   44f38:	18ffff17 	ldw	r3,-4(r3)
   44f3c:	18000326 	beq	r3,zero,44f4c <quorem+0x14c>
   44f40:	00000506 	br	44f58 <quorem+0x158>
   44f44:	10c00017 	ldw	r3,0(r2)
   44f48:	1800031e 	bne	r3,zero,44f58 <quorem+0x158>
   44f4c:	10bfff04 	addi	r2,r2,-4
   44f50:	a53fffc4 	addi	r20,r20,-1
   44f54:	e0bffb36 	bltu	fp,r2,44f44 <quorem+0x144>
   44f58:	9d000415 	stw	r20,16(r19)
   44f5c:	d9400017 	ldw	r5,0(sp)
   44f60:	9809883a 	mov	r4,r19
   44f64:	00485dc0 	call	485dc <__mcmp>
   44f68:	10002516 	blt	r2,zero,45000 <quorem+0x200>
   44f6c:	94800044 	addi	r18,r18,1
   44f70:	e007883a 	mov	r3,fp
   44f74:	000d883a 	mov	r6,zero
   44f78:	18800017 	ldw	r2,0(r3)
   44f7c:	82000017 	ldw	r8,0(r16)
   44f80:	84000104 	addi	r16,r16,4
   44f84:	11ffffcc 	andi	r7,r2,65535
   44f88:	413fffcc 	andi	r4,r8,65535
   44f8c:	398d883a 	add	r6,r7,r6
   44f90:	310fc83a 	sub	r7,r6,r4
   44f94:	4010d43a 	srli	r8,r8,16
   44f98:	100cd43a 	srli	r6,r2,16
   44f9c:	3809d43a 	srai	r4,r7,16
   44fa0:	19c0000d 	sth	r7,0(r3)
   44fa4:	320dc83a 	sub	r6,r6,r8
   44fa8:	310d883a 	add	r6,r6,r4
   44fac:	1980008d 	sth	r6,2(r3)
   44fb0:	300dd43a 	srai	r6,r6,16
   44fb4:	18c00104 	addi	r3,r3,4
   44fb8:	b43fef2e 	bgeu	r22,r16,44f78 <quorem+0x178>
   44fbc:	a0800144 	addi	r2,r20,5
   44fc0:	1085883a 	add	r2,r2,r2
   44fc4:	1085883a 	add	r2,r2,r2
   44fc8:	9885883a 	add	r2,r19,r2
   44fcc:	10c00017 	ldw	r3,0(r2)
   44fd0:	18000b1e 	bne	r3,zero,45000 <quorem+0x200>
   44fd4:	10ffff04 	addi	r3,r2,-4
   44fd8:	e0c0082e 	bgeu	fp,r3,44ffc <quorem+0x1fc>
   44fdc:	10bfff17 	ldw	r2,-4(r2)
   44fe0:	10000326 	beq	r2,zero,44ff0 <quorem+0x1f0>
   44fe4:	00000506 	br	44ffc <quorem+0x1fc>
   44fe8:	18800017 	ldw	r2,0(r3)
   44fec:	1000031e 	bne	r2,zero,44ffc <quorem+0x1fc>
   44ff0:	18ffff04 	addi	r3,r3,-4
   44ff4:	a53fffc4 	addi	r20,r20,-1
   44ff8:	e0fffb36 	bltu	fp,r3,44fe8 <quorem+0x1e8>
   44ffc:	9d000415 	stw	r20,16(r19)
   45000:	9005883a 	mov	r2,r18
   45004:	dfc00d17 	ldw	ra,52(sp)
   45008:	df000c17 	ldw	fp,48(sp)
   4500c:	ddc00b17 	ldw	r23,44(sp)
   45010:	dd800a17 	ldw	r22,40(sp)
   45014:	dd400917 	ldw	r21,36(sp)
   45018:	dd000817 	ldw	r20,32(sp)
   4501c:	dcc00717 	ldw	r19,28(sp)
   45020:	dc800617 	ldw	r18,24(sp)
   45024:	dc400517 	ldw	r17,20(sp)
   45028:	dc000417 	ldw	r16,16(sp)
   4502c:	dec00e04 	addi	sp,sp,56
   45030:	f800283a 	ret
   45034:	0005883a 	mov	r2,zero
   45038:	003ff206 	br	45004 <quorem+0x204>

0004503c <_dtoa_r>:
   4503c:	20801017 	ldw	r2,64(r4)
   45040:	deffdf04 	addi	sp,sp,-132
   45044:	dcc01a15 	stw	r19,104(sp)
   45048:	dc801915 	stw	r18,100(sp)
   4504c:	dc401815 	stw	r17,96(sp)
   45050:	dc001715 	stw	r16,92(sp)
   45054:	dfc02015 	stw	ra,128(sp)
   45058:	df001f15 	stw	fp,124(sp)
   4505c:	ddc01e15 	stw	r23,120(sp)
   45060:	dd801d15 	stw	r22,116(sp)
   45064:	dd401c15 	stw	r21,112(sp)
   45068:	dd001b15 	stw	r20,108(sp)
   4506c:	d9400315 	stw	r5,12(sp)
   45070:	d9c00415 	stw	r7,16(sp)
   45074:	2021883a 	mov	r16,r4
   45078:	3025883a 	mov	r18,r6
   4507c:	dcc02317 	ldw	r19,140(sp)
   45080:	3023883a 	mov	r17,r6
   45084:	10000826 	beq	r2,zero,450a8 <_dtoa_r+0x6c>
   45088:	20c01117 	ldw	r3,68(r4)
   4508c:	01800044 	movi	r6,1
   45090:	100b883a 	mov	r5,r2
   45094:	30cc983a 	sll	r6,r6,r3
   45098:	10c00115 	stw	r3,4(r2)
   4509c:	11800215 	stw	r6,8(r2)
   450a0:	0047d380 	call	47d38 <_Bfree>
   450a4:	80001015 	stw	zero,64(r16)
   450a8:	90002f16 	blt	r18,zero,45168 <_dtoa_r+0x12c>
   450ac:	98000015 	stw	zero,0(r19)
   450b0:	90dffc2c 	andhi	r3,r18,32752
   450b4:	009ffc34 	movhi	r2,32752
   450b8:	18801c26 	beq	r3,r2,4512c <_dtoa_r+0xf0>
   450bc:	d9000317 	ldw	r4,12(sp)
   450c0:	880b883a 	mov	r5,r17
   450c4:	000d883a 	mov	r6,zero
   450c8:	000f883a 	mov	r7,zero
   450cc:	004a9d00 	call	4a9d0 <__eqdf2>
   450d0:	10002c1e 	bne	r2,zero,45184 <_dtoa_r+0x148>
   450d4:	d9002217 	ldw	r4,136(sp)
   450d8:	d9c02417 	ldw	r7,144(sp)
   450dc:	00800044 	movi	r2,1
   450e0:	20800015 	stw	r2,0(r4)
   450e4:	38019426 	beq	r7,zero,45738 <_dtoa_r+0x6fc>
   450e8:	00800174 	movhi	r2,5
   450ec:	10b9a244 	addi	r2,r2,-6519
   450f0:	38800015 	stw	r2,0(r7)
   450f4:	15ffffc4 	addi	r23,r2,-1
   450f8:	b805883a 	mov	r2,r23
   450fc:	dfc02017 	ldw	ra,128(sp)
   45100:	df001f17 	ldw	fp,124(sp)
   45104:	ddc01e17 	ldw	r23,120(sp)
   45108:	dd801d17 	ldw	r22,116(sp)
   4510c:	dd401c17 	ldw	r21,112(sp)
   45110:	dd001b17 	ldw	r20,108(sp)
   45114:	dcc01a17 	ldw	r19,104(sp)
   45118:	dc801917 	ldw	r18,100(sp)
   4511c:	dc401817 	ldw	r17,96(sp)
   45120:	dc001717 	ldw	r16,92(sp)
   45124:	dec02104 	addi	sp,sp,132
   45128:	f800283a 	ret
   4512c:	d8c02217 	ldw	r3,136(sp)
   45130:	d9000317 	ldw	r4,12(sp)
   45134:	0089c3c4 	movi	r2,9999
   45138:	18800015 	stw	r2,0(r3)
   4513c:	20016c26 	beq	r4,zero,456f0 <_dtoa_r+0x6b4>
   45140:	05c00174 	movhi	r23,5
   45144:	bdf9ae04 	addi	r23,r23,-6472
   45148:	d9c02417 	ldw	r7,144(sp)
   4514c:	383fea26 	beq	r7,zero,450f8 <_dtoa_r+0xbc>
   45150:	b88000c7 	ldb	r2,3(r23)
   45154:	10016d1e 	bne	r2,zero,4570c <_dtoa_r+0x6d0>
   45158:	b88000c4 	addi	r2,r23,3
   4515c:	d8c02417 	ldw	r3,144(sp)
   45160:	18800015 	stw	r2,0(r3)
   45164:	003fe406 	br	450f8 <_dtoa_r+0xbc>
   45168:	04600034 	movhi	r17,32768
   4516c:	8c7fffc4 	addi	r17,r17,-1
   45170:	9462703a 	and	r17,r18,r17
   45174:	00800044 	movi	r2,1
   45178:	98800015 	stw	r2,0(r19)
   4517c:	8825883a 	mov	r18,r17
   45180:	003fcb06 	br	450b0 <_dtoa_r+0x74>
   45184:	d9400317 	ldw	r5,12(sp)
   45188:	9028d53a 	srli	r20,r18,20
   4518c:	d8800204 	addi	r2,sp,8
   45190:	d8800015 	stw	r2,0(sp)
   45194:	8009883a 	mov	r4,r16
   45198:	880d883a 	mov	r6,r17
   4519c:	d9c00104 	addi	r7,sp,4
   451a0:	00489840 	call	48984 <__d2b>
   451a4:	a501ffcc 	andi	r20,r20,2047
   451a8:	1039883a 	mov	fp,r2
   451ac:	a001591e 	bne	r20,zero,45714 <_dtoa_r+0x6d8>
   451b0:	dd400217 	ldw	r21,8(sp)
   451b4:	dd000117 	ldw	r20,4(sp)
   451b8:	00befbc4 	movi	r2,-1041
   451bc:	ad29883a 	add	r20,r21,r20
   451c0:	a082d216 	blt	r20,r2,45d0c <_dtoa_r+0xcd0>
   451c4:	d8c00317 	ldw	r3,12(sp)
   451c8:	013f0384 	movi	r4,-1010
   451cc:	2509c83a 	sub	r4,r4,r20
   451d0:	a0810484 	addi	r2,r20,1042
   451d4:	9124983a 	sll	r18,r18,r4
   451d8:	1884d83a 	srl	r2,r3,r2
   451dc:	9088b03a 	or	r4,r18,r2
   451e0:	00410dc0 	call	410dc <__floatunsidf>
   451e4:	1009883a 	mov	r4,r2
   451e8:	017f8434 	movhi	r5,65040
   451ec:	00800044 	movi	r2,1
   451f0:	194b883a 	add	r5,r3,r5
   451f4:	a53fffc4 	addi	r20,r20,-1
   451f8:	d8800f15 	stw	r2,60(sp)
   451fc:	000d883a 	mov	r6,zero
   45200:	01cffe34 	movhi	r7,16376
   45204:	004a68c0 	call	4a68c <__subdf3>
   45208:	1009883a 	mov	r4,r2
   4520c:	180b883a 	mov	r5,r3
   45210:	0198dbf4 	movhi	r6,25455
   45214:	3190d844 	addi	r6,r6,17249
   45218:	01cff4f4 	movhi	r7,16339
   4521c:	39e1e9c4 	addi	r7,r7,-30809
   45220:	004a6ec0 	call	4a6ec <__muldf3>
   45224:	180b883a 	mov	r5,r3
   45228:	01a2d874 	movhi	r6,35681
   4522c:	31b22cc4 	addi	r6,r6,-14157
   45230:	01cff1f4 	movhi	r7,16327
   45234:	39e28a04 	addi	r7,r7,-30168
   45238:	1009883a 	mov	r4,r2
   4523c:	004a6380 	call	4a638 <__adddf3>
   45240:	a009883a 	mov	r4,r20
   45244:	1027883a 	mov	r19,r2
   45248:	1825883a 	mov	r18,r3
   4524c:	004abac0 	call	4abac <__floatsidf>
   45250:	1009883a 	mov	r4,r2
   45254:	180b883a 	mov	r5,r3
   45258:	019427f4 	movhi	r6,20639
   4525c:	319e7ec4 	addi	r6,r6,31227
   45260:	01cff4f4 	movhi	r7,16339
   45264:	39d104c4 	addi	r7,r7,17427
   45268:	004a6ec0 	call	4a6ec <__muldf3>
   4526c:	9809883a 	mov	r4,r19
   45270:	900b883a 	mov	r5,r18
   45274:	100d883a 	mov	r6,r2
   45278:	180f883a 	mov	r7,r3
   4527c:	004a6380 	call	4a638 <__adddf3>
   45280:	1009883a 	mov	r4,r2
   45284:	180b883a 	mov	r5,r3
   45288:	1027883a 	mov	r19,r2
   4528c:	1825883a 	mov	r18,r3
   45290:	004ac800 	call	4ac80 <__fixdfsi>
   45294:	9809883a 	mov	r4,r19
   45298:	900b883a 	mov	r5,r18
   4529c:	000d883a 	mov	r6,zero
   452a0:	000f883a 	mov	r7,zero
   452a4:	d8800615 	stw	r2,24(sp)
   452a8:	004ab500 	call	4ab50 <__ltdf2>
   452ac:	10027e16 	blt	r2,zero,45ca8 <_dtoa_r+0xc6c>
   452b0:	d8c00617 	ldw	r3,24(sp)
   452b4:	00800584 	movi	r2,22
   452b8:	10c26c36 	bltu	r2,r3,45c6c <_dtoa_r+0xc30>
   452bc:	180490fa 	slli	r2,r3,3
   452c0:	00c00174 	movhi	r3,5
   452c4:	18f9d304 	addi	r3,r3,-6324
   452c8:	d9800317 	ldw	r6,12(sp)
   452cc:	1885883a 	add	r2,r3,r2
   452d0:	11000017 	ldw	r4,0(r2)
   452d4:	11400117 	ldw	r5,4(r2)
   452d8:	880f883a 	mov	r7,r17
   452dc:	004aa880 	call	4aa88 <__gtdf2>
   452e0:	00828f0e 	bge	zero,r2,45d20 <_dtoa_r+0xce4>
   452e4:	d8800617 	ldw	r2,24(sp)
   452e8:	d8000d15 	stw	zero,52(sp)
   452ec:	10bfffc4 	addi	r2,r2,-1
   452f0:	d8800615 	stw	r2,24(sp)
   452f4:	ad29c83a 	sub	r20,r21,r20
   452f8:	a53fffc4 	addi	r20,r20,-1
   452fc:	a0026616 	blt	r20,zero,45c98 <_dtoa_r+0xc5c>
   45300:	dd000715 	stw	r20,28(sp)
   45304:	d8000815 	stw	zero,32(sp)
   45308:	d8800617 	ldw	r2,24(sp)
   4530c:	10025a16 	blt	r2,zero,45c78 <_dtoa_r+0xc3c>
   45310:	d8c00717 	ldw	r3,28(sp)
   45314:	d8800b15 	stw	r2,44(sp)
   45318:	d8000a15 	stw	zero,40(sp)
   4531c:	1887883a 	add	r3,r3,r2
   45320:	d8c00715 	stw	r3,28(sp)
   45324:	d9c00417 	ldw	r7,16(sp)
   45328:	00800244 	movi	r2,9
   4532c:	11c10536 	bltu	r2,r7,45744 <_dtoa_r+0x708>
   45330:	00800144 	movi	r2,5
   45334:	11c4c60e 	bge	r2,r7,46650 <_dtoa_r+0x1614>
   45338:	39ffff04 	addi	r7,r7,-4
   4533c:	d9c00415 	stw	r7,16(sp)
   45340:	0027883a 	mov	r19,zero
   45344:	d9c00417 	ldw	r7,16(sp)
   45348:	008000c4 	movi	r2,3
   4534c:	3883a226 	beq	r7,r2,461d8 <_dtoa_r+0x119c>
   45350:	11c2bc16 	blt	r2,r7,45e44 <_dtoa_r+0xe08>
   45354:	00800084 	movi	r2,2
   45358:	3880fb1e 	bne	r7,r2,45748 <_dtoa_r+0x70c>
   4535c:	d8000c15 	stw	zero,48(sp)
   45360:	d9002117 	ldw	r4,132(sp)
   45364:	0103ae0e 	bge	zero,r4,46220 <_dtoa_r+0x11e4>
   45368:	2025883a 	mov	r18,r4
   4536c:	d9000e15 	stw	r4,56(sp)
   45370:	d9000915 	stw	r4,36(sp)
   45374:	80001115 	stw	zero,68(r16)
   45378:	008005c4 	movi	r2,23
   4537c:	1484b22e 	bgeu	r2,r18,46648 <_dtoa_r+0x160c>
   45380:	00c00044 	movi	r3,1
   45384:	00800104 	movi	r2,4
   45388:	1085883a 	add	r2,r2,r2
   4538c:	11000504 	addi	r4,r2,20
   45390:	180b883a 	mov	r5,r3
   45394:	18c00044 	addi	r3,r3,1
   45398:	913ffb2e 	bgeu	r18,r4,45388 <_dtoa_r+0x34c>
   4539c:	81401115 	stw	r5,68(r16)
   453a0:	8009883a 	mov	r4,r16
   453a4:	0047c900 	call	47c90 <_Balloc>
   453a8:	102f883a 	mov	r23,r2
   453ac:	80801015 	stw	r2,64(r16)
   453b0:	00800384 	movi	r2,14
   453b4:	1480f036 	bltu	r2,r18,45778 <_dtoa_r+0x73c>
   453b8:	9800ef26 	beq	r19,zero,45778 <_dtoa_r+0x73c>
   453bc:	d8800617 	ldw	r2,24(sp)
   453c0:	00839c0e 	bge	zero,r2,46234 <_dtoa_r+0x11f8>
   453c4:	d8c00617 	ldw	r3,24(sp)
   453c8:	108003cc 	andi	r2,r2,15
   453cc:	100490fa 	slli	r2,r2,3
   453d0:	182bd13a 	srai	r21,r3,4
   453d4:	00c00174 	movhi	r3,5
   453d8:	18f9d304 	addi	r3,r3,-6324
   453dc:	1885883a 	add	r2,r3,r2
   453e0:	a8c0040c 	andi	r3,r21,16
   453e4:	12800017 	ldw	r10,0(r2)
   453e8:	15800117 	ldw	r22,4(r2)
   453ec:	18038726 	beq	r3,zero,4620c <_dtoa_r+0x11d0>
   453f0:	00800174 	movhi	r2,5
   453f4:	10b9c904 	addi	r2,r2,-6364
   453f8:	11800817 	ldw	r6,32(r2)
   453fc:	11c00917 	ldw	r7,36(r2)
   45400:	d9000317 	ldw	r4,12(sp)
   45404:	880b883a 	mov	r5,r17
   45408:	da801515 	stw	r10,84(sp)
   4540c:	0040f280 	call	40f28 <__divdf3>
   45410:	da801517 	ldw	r10,84(sp)
   45414:	d8801015 	stw	r2,64(sp)
   45418:	1829883a 	mov	r20,r3
   4541c:	ad4003cc 	andi	r21,r21,15
   45420:	048000c4 	movi	r18,3
   45424:	a8001126 	beq	r21,zero,4546c <_dtoa_r+0x430>
   45428:	04c00174 	movhi	r19,5
   4542c:	9cf9c904 	addi	r19,r19,-6364
   45430:	5005883a 	mov	r2,r10
   45434:	b007883a 	mov	r3,r22
   45438:	a980004c 	andi	r6,r21,1
   4543c:	1009883a 	mov	r4,r2
   45440:	a82bd07a 	srai	r21,r21,1
   45444:	180b883a 	mov	r5,r3
   45448:	30000426 	beq	r6,zero,4545c <_dtoa_r+0x420>
   4544c:	99800017 	ldw	r6,0(r19)
   45450:	99c00117 	ldw	r7,4(r19)
   45454:	94800044 	addi	r18,r18,1
   45458:	004a6ec0 	call	4a6ec <__muldf3>
   4545c:	9cc00204 	addi	r19,r19,8
   45460:	a83ff51e 	bne	r21,zero,45438 <_dtoa_r+0x3fc>
   45464:	1015883a 	mov	r10,r2
   45468:	182d883a 	mov	r22,r3
   4546c:	d9001017 	ldw	r4,64(sp)
   45470:	a00b883a 	mov	r5,r20
   45474:	500d883a 	mov	r6,r10
   45478:	b00f883a 	mov	r7,r22
   4547c:	0040f280 	call	40f28 <__divdf3>
   45480:	1027883a 	mov	r19,r2
   45484:	1829883a 	mov	r20,r3
   45488:	d8c00d17 	ldw	r3,52(sp)
   4548c:	18000626 	beq	r3,zero,454a8 <_dtoa_r+0x46c>
   45490:	9809883a 	mov	r4,r19
   45494:	a00b883a 	mov	r5,r20
   45498:	000d883a 	mov	r6,zero
   4549c:	01cffc34 	movhi	r7,16368
   454a0:	004ab500 	call	4ab50 <__ltdf2>
   454a4:	10040e16 	blt	r2,zero,464e0 <_dtoa_r+0x14a4>
   454a8:	9009883a 	mov	r4,r18
   454ac:	004abac0 	call	4abac <__floatsidf>
   454b0:	1009883a 	mov	r4,r2
   454b4:	180b883a 	mov	r5,r3
   454b8:	980d883a 	mov	r6,r19
   454bc:	a00f883a 	mov	r7,r20
   454c0:	004a6ec0 	call	4a6ec <__muldf3>
   454c4:	1009883a 	mov	r4,r2
   454c8:	180b883a 	mov	r5,r3
   454cc:	000d883a 	mov	r6,zero
   454d0:	01d00734 	movhi	r7,16412
   454d4:	004a6380 	call	4a638 <__adddf3>
   454d8:	057f3034 	movhi	r21,64704
   454dc:	1d6b883a 	add	r21,r3,r21
   454e0:	d8c00917 	ldw	r3,36(sp)
   454e4:	1025883a 	mov	r18,r2
   454e8:	18031f26 	beq	r3,zero,46168 <_dtoa_r+0x112c>
   454ec:	d8800617 	ldw	r2,24(sp)
   454f0:	dac00917 	ldw	r11,36(sp)
   454f4:	d8801315 	stw	r2,76(sp)
   454f8:	d8c00c17 	ldw	r3,48(sp)
   454fc:	18039026 	beq	r3,zero,46340 <_dtoa_r+0x1304>
   45500:	58bfffc4 	addi	r2,r11,-1
   45504:	100490fa 	slli	r2,r2,3
   45508:	00c00174 	movhi	r3,5
   4550c:	18f9d304 	addi	r3,r3,-6324
   45510:	0009883a 	mov	r4,zero
   45514:	1885883a 	add	r2,r3,r2
   45518:	11800017 	ldw	r6,0(r2)
   4551c:	11c00117 	ldw	r7,4(r2)
   45520:	014ff834 	movhi	r5,16352
   45524:	dac01615 	stw	r11,88(sp)
   45528:	0040f280 	call	40f28 <__divdf3>
   4552c:	900d883a 	mov	r6,r18
   45530:	a80f883a 	mov	r7,r21
   45534:	1009883a 	mov	r4,r2
   45538:	180b883a 	mov	r5,r3
   4553c:	004a68c0 	call	4a68c <__subdf3>
   45540:	a00b883a 	mov	r5,r20
   45544:	9809883a 	mov	r4,r19
   45548:	182b883a 	mov	r21,r3
   4554c:	d8801015 	stw	r2,64(sp)
   45550:	004ac800 	call	4ac80 <__fixdfsi>
   45554:	1009883a 	mov	r4,r2
   45558:	d8801515 	stw	r2,84(sp)
   4555c:	004abac0 	call	4abac <__floatsidf>
   45560:	9809883a 	mov	r4,r19
   45564:	a00b883a 	mov	r5,r20
   45568:	100d883a 	mov	r6,r2
   4556c:	180f883a 	mov	r7,r3
   45570:	004a68c0 	call	4a68c <__subdf3>
   45574:	da401517 	ldw	r9,84(sp)
   45578:	d9001017 	ldw	r4,64(sp)
   4557c:	a80b883a 	mov	r5,r21
   45580:	4d000c04 	addi	r20,r9,48
   45584:	bd000005 	stb	r20,0(r23)
   45588:	100d883a 	mov	r6,r2
   4558c:	180f883a 	mov	r7,r3
   45590:	bd800044 	addi	r22,r23,1
   45594:	1025883a 	mov	r18,r2
   45598:	1827883a 	mov	r19,r3
   4559c:	004aa880 	call	4aa88 <__gtdf2>
   455a0:	00842216 	blt	zero,r2,4662c <_dtoa_r+0x15f0>
   455a4:	0009883a 	mov	r4,zero
   455a8:	014ffc34 	movhi	r5,16368
   455ac:	900d883a 	mov	r6,r18
   455b0:	980f883a 	mov	r7,r19
   455b4:	004a68c0 	call	4a68c <__subdf3>
   455b8:	d9001017 	ldw	r4,64(sp)
   455bc:	a80b883a 	mov	r5,r21
   455c0:	100d883a 	mov	r6,r2
   455c4:	180f883a 	mov	r7,r3
   455c8:	004aa880 	call	4aa88 <__gtdf2>
   455cc:	dac01617 	ldw	r11,88(sp)
   455d0:	00841316 	blt	zero,r2,46620 <_dtoa_r+0x15e4>
   455d4:	00800044 	movi	r2,1
   455d8:	12c0670e 	bge	r2,r11,45778 <_dtoa_r+0x73c>
   455dc:	bad7883a 	add	r11,r23,r11
   455e0:	df001115 	stw	fp,68(sp)
   455e4:	dc401215 	stw	r17,72(sp)
   455e8:	5839883a 	mov	fp,r11
   455ec:	dc401017 	ldw	r17,64(sp)
   455f0:	00000806 	br	45614 <_dtoa_r+0x5d8>
   455f4:	004a68c0 	call	4a68c <__subdf3>
   455f8:	1009883a 	mov	r4,r2
   455fc:	180b883a 	mov	r5,r3
   45600:	880d883a 	mov	r6,r17
   45604:	a80f883a 	mov	r7,r21
   45608:	004ab500 	call	4ab50 <__ltdf2>
   4560c:	1003ee16 	blt	r2,zero,465c8 <_dtoa_r+0x158c>
   45610:	b703f126 	beq	r22,fp,465d8 <_dtoa_r+0x159c>
   45614:	8809883a 	mov	r4,r17
   45618:	a80b883a 	mov	r5,r21
   4561c:	000d883a 	mov	r6,zero
   45620:	01d00934 	movhi	r7,16420
   45624:	004a6ec0 	call	4a6ec <__muldf3>
   45628:	000d883a 	mov	r6,zero
   4562c:	01d00934 	movhi	r7,16420
   45630:	9009883a 	mov	r4,r18
   45634:	980b883a 	mov	r5,r19
   45638:	1023883a 	mov	r17,r2
   4563c:	182b883a 	mov	r21,r3
   45640:	004a6ec0 	call	4a6ec <__muldf3>
   45644:	180b883a 	mov	r5,r3
   45648:	1009883a 	mov	r4,r2
   4564c:	1825883a 	mov	r18,r3
   45650:	1027883a 	mov	r19,r2
   45654:	004ac800 	call	4ac80 <__fixdfsi>
   45658:	1009883a 	mov	r4,r2
   4565c:	1029883a 	mov	r20,r2
   45660:	004abac0 	call	4abac <__floatsidf>
   45664:	9809883a 	mov	r4,r19
   45668:	900b883a 	mov	r5,r18
   4566c:	100d883a 	mov	r6,r2
   45670:	180f883a 	mov	r7,r3
   45674:	004a68c0 	call	4a68c <__subdf3>
   45678:	a5000c04 	addi	r20,r20,48
   4567c:	b5000005 	stb	r20,0(r22)
   45680:	1009883a 	mov	r4,r2
   45684:	180b883a 	mov	r5,r3
   45688:	880d883a 	mov	r6,r17
   4568c:	a80f883a 	mov	r7,r21
   45690:	1025883a 	mov	r18,r2
   45694:	1827883a 	mov	r19,r3
   45698:	004ab500 	call	4ab50 <__ltdf2>
   4569c:	b5800044 	addi	r22,r22,1
   456a0:	0009883a 	mov	r4,zero
   456a4:	014ffc34 	movhi	r5,16368
   456a8:	900d883a 	mov	r6,r18
   456ac:	980f883a 	mov	r7,r19
   456b0:	103fd00e 	bge	r2,zero,455f4 <_dtoa_r+0x5b8>
   456b4:	d9001317 	ldw	r4,76(sp)
   456b8:	df001117 	ldw	fp,68(sp)
   456bc:	d9000615 	stw	r4,24(sp)
   456c0:	8009883a 	mov	r4,r16
   456c4:	e00b883a 	mov	r5,fp
   456c8:	0047d380 	call	47d38 <_Bfree>
   456cc:	d9c00617 	ldw	r7,24(sp)
   456d0:	d8c02217 	ldw	r3,136(sp)
   456d4:	d9002417 	ldw	r4,144(sp)
   456d8:	b0000005 	stb	zero,0(r22)
   456dc:	38800044 	addi	r2,r7,1
   456e0:	18800015 	stw	r2,0(r3)
   456e4:	203e8426 	beq	r4,zero,450f8 <_dtoa_r+0xbc>
   456e8:	25800015 	stw	r22,0(r4)
   456ec:	003e8206 	br	450f8 <_dtoa_r+0xbc>
   456f0:	00800434 	movhi	r2,16
   456f4:	10bfffc4 	addi	r2,r2,-1
   456f8:	90a4703a 	and	r18,r18,r2
   456fc:	903e901e 	bne	r18,zero,45140 <_dtoa_r+0x104>
   45700:	05c00174 	movhi	r23,5
   45704:	bdf9ab04 	addi	r23,r23,-6484
   45708:	003e8f06 	br	45148 <_dtoa_r+0x10c>
   4570c:	b8800204 	addi	r2,r23,8
   45710:	003e9206 	br	4515c <_dtoa_r+0x120>
   45714:	01400434 	movhi	r5,16
   45718:	297fffc4 	addi	r5,r5,-1
   4571c:	894a703a 	and	r5,r17,r5
   45720:	d9000317 	ldw	r4,12(sp)
   45724:	294ffc34 	orhi	r5,r5,16368
   45728:	a53f0044 	addi	r20,r20,-1023
   4572c:	dd400217 	ldw	r21,8(sp)
   45730:	d8000f15 	stw	zero,60(sp)
   45734:	003eb106 	br	451fc <_dtoa_r+0x1c0>
   45738:	05c00174 	movhi	r23,5
   4573c:	bdf9a204 	addi	r23,r23,-6520
   45740:	003e6d06 	br	450f8 <_dtoa_r+0xbc>
   45744:	d8000415 	stw	zero,16(sp)
   45748:	80001115 	stw	zero,68(r16)
   4574c:	8009883a 	mov	r4,r16
   45750:	000b883a 	mov	r5,zero
   45754:	0047c900 	call	47c90 <_Balloc>
   45758:	01ffffc4 	movi	r7,-1
   4575c:	102f883a 	mov	r23,r2
   45760:	80801015 	stw	r2,64(r16)
   45764:	00800044 	movi	r2,1
   45768:	d9c00915 	stw	r7,36(sp)
   4576c:	d8002115 	stw	zero,132(sp)
   45770:	d9c00e15 	stw	r7,56(sp)
   45774:	d8800c15 	stw	r2,48(sp)
   45778:	d8800117 	ldw	r2,4(sp)
   4577c:	10008b16 	blt	r2,zero,459ac <_dtoa_r+0x970>
   45780:	d9000617 	ldw	r4,24(sp)
   45784:	00c00384 	movi	r3,14
   45788:	19008816 	blt	r3,r4,459ac <_dtoa_r+0x970>
   4578c:	200490fa 	slli	r2,r4,3
   45790:	d9c02117 	ldw	r7,132(sp)
   45794:	00c00174 	movhi	r3,5
   45798:	18f9d304 	addi	r3,r3,-6324
   4579c:	1885883a 	add	r2,r3,r2
   457a0:	14800017 	ldw	r18,0(r2)
   457a4:	14c00117 	ldw	r19,4(r2)
   457a8:	3801c916 	blt	r7,zero,45ed0 <_dtoa_r+0xe94>
   457ac:	d9000317 	ldw	r4,12(sp)
   457b0:	900d883a 	mov	r6,r18
   457b4:	980f883a 	mov	r7,r19
   457b8:	880b883a 	mov	r5,r17
   457bc:	0040f280 	call	40f28 <__divdf3>
   457c0:	180b883a 	mov	r5,r3
   457c4:	1009883a 	mov	r4,r2
   457c8:	004ac800 	call	4ac80 <__fixdfsi>
   457cc:	1009883a 	mov	r4,r2
   457d0:	102b883a 	mov	r21,r2
   457d4:	004abac0 	call	4abac <__floatsidf>
   457d8:	1009883a 	mov	r4,r2
   457dc:	180b883a 	mov	r5,r3
   457e0:	900d883a 	mov	r6,r18
   457e4:	980f883a 	mov	r7,r19
   457e8:	004a6ec0 	call	4a6ec <__muldf3>
   457ec:	d9000317 	ldw	r4,12(sp)
   457f0:	880b883a 	mov	r5,r17
   457f4:	100d883a 	mov	r6,r2
   457f8:	180f883a 	mov	r7,r3
   457fc:	004a68c0 	call	4a68c <__subdf3>
   45800:	d9c00917 	ldw	r7,36(sp)
   45804:	1009883a 	mov	r4,r2
   45808:	a8800c04 	addi	r2,r21,48
   4580c:	b8800005 	stb	r2,0(r23)
   45810:	01800044 	movi	r6,1
   45814:	180b883a 	mov	r5,r3
   45818:	2005883a 	mov	r2,r4
   4581c:	bd800044 	addi	r22,r23,1
   45820:	39803726 	beq	r7,r6,45900 <_dtoa_r+0x8c4>
   45824:	000d883a 	mov	r6,zero
   45828:	01d00934 	movhi	r7,16420
   4582c:	004a6ec0 	call	4a6ec <__muldf3>
   45830:	1009883a 	mov	r4,r2
   45834:	180b883a 	mov	r5,r3
   45838:	000d883a 	mov	r6,zero
   4583c:	000f883a 	mov	r7,zero
   45840:	1029883a 	mov	r20,r2
   45844:	1823883a 	mov	r17,r3
   45848:	004a9d00 	call	4a9d0 <__eqdf2>
   4584c:	103f9c26 	beq	r2,zero,456c0 <_dtoa_r+0x684>
   45850:	dd400917 	ldw	r21,36(sp)
   45854:	dc000415 	stw	r16,16(sp)
   45858:	00000906 	br	45880 <_dtoa_r+0x844>
   4585c:	004a6ec0 	call	4a6ec <__muldf3>
   45860:	1009883a 	mov	r4,r2
   45864:	180b883a 	mov	r5,r3
   45868:	000d883a 	mov	r6,zero
   4586c:	000f883a 	mov	r7,zero
   45870:	1029883a 	mov	r20,r2
   45874:	1823883a 	mov	r17,r3
   45878:	004a9d00 	call	4a9d0 <__eqdf2>
   4587c:	10022926 	beq	r2,zero,46124 <_dtoa_r+0x10e8>
   45880:	900d883a 	mov	r6,r18
   45884:	980f883a 	mov	r7,r19
   45888:	a009883a 	mov	r4,r20
   4588c:	880b883a 	mov	r5,r17
   45890:	0040f280 	call	40f28 <__divdf3>
   45894:	180b883a 	mov	r5,r3
   45898:	1009883a 	mov	r4,r2
   4589c:	004ac800 	call	4ac80 <__fixdfsi>
   458a0:	1009883a 	mov	r4,r2
   458a4:	1021883a 	mov	r16,r2
   458a8:	004abac0 	call	4abac <__floatsidf>
   458ac:	1009883a 	mov	r4,r2
   458b0:	180b883a 	mov	r5,r3
   458b4:	900d883a 	mov	r6,r18
   458b8:	980f883a 	mov	r7,r19
   458bc:	004a6ec0 	call	4a6ec <__muldf3>
   458c0:	a009883a 	mov	r4,r20
   458c4:	880b883a 	mov	r5,r17
   458c8:	100d883a 	mov	r6,r2
   458cc:	180f883a 	mov	r7,r3
   458d0:	004a68c0 	call	4a68c <__subdf3>
   458d4:	82400c04 	addi	r9,r16,48
   458d8:	b2400005 	stb	r9,0(r22)
   458dc:	b5800044 	addi	r22,r22,1
   458e0:	b5d3c83a 	sub	r9,r22,r23
   458e4:	000d883a 	mov	r6,zero
   458e8:	01d00934 	movhi	r7,16420
   458ec:	1009883a 	mov	r4,r2
   458f0:	180b883a 	mov	r5,r3
   458f4:	aa7fd91e 	bne	r21,r9,4585c <_dtoa_r+0x820>
   458f8:	802b883a 	mov	r21,r16
   458fc:	dc000417 	ldw	r16,16(sp)
   45900:	1009883a 	mov	r4,r2
   45904:	180b883a 	mov	r5,r3
   45908:	100d883a 	mov	r6,r2
   4590c:	180f883a 	mov	r7,r3
   45910:	004a6380 	call	4a638 <__adddf3>
   45914:	9009883a 	mov	r4,r18
   45918:	980b883a 	mov	r5,r19
   4591c:	100d883a 	mov	r6,r2
   45920:	180f883a 	mov	r7,r3
   45924:	1023883a 	mov	r17,r2
   45928:	1829883a 	mov	r20,r3
   4592c:	004ab500 	call	4ab50 <__ltdf2>
   45930:	10000816 	blt	r2,zero,45954 <_dtoa_r+0x918>
   45934:	9009883a 	mov	r4,r18
   45938:	980b883a 	mov	r5,r19
   4593c:	880d883a 	mov	r6,r17
   45940:	a00f883a 	mov	r7,r20
   45944:	004a9d00 	call	4a9d0 <__eqdf2>
   45948:	103f5d1e 	bne	r2,zero,456c0 <_dtoa_r+0x684>
   4594c:	ad40004c 	andi	r21,r21,1
   45950:	a83f5b26 	beq	r21,zero,456c0 <_dtoa_r+0x684>
   45954:	b53fffc3 	ldbu	r20,-1(r22)
   45958:	b0ffff84 	addi	r3,r22,-2
   4595c:	01400e44 	movi	r5,57
   45960:	00000306 	br	45970 <_dtoa_r+0x934>
   45964:	1d000003 	ldbu	r20,0(r3)
   45968:	102d883a 	mov	r22,r2
   4596c:	18ffffc4 	addi	r3,r3,-1
   45970:	a1003fcc 	andi	r4,r20,255
   45974:	2100201c 	xori	r4,r4,128
   45978:	213fe004 	addi	r4,r4,-128
   4597c:	b0bfffc4 	addi	r2,r22,-1
   45980:	2142ca1e 	bne	r4,r5,464ac <_dtoa_r+0x1470>
   45984:	b8bff71e 	bne	r23,r2,45964 <_dtoa_r+0x928>
   45988:	d8800617 	ldw	r2,24(sp)
   4598c:	05000c44 	movi	r20,49
   45990:	10800044 	addi	r2,r2,1
   45994:	d8800615 	stw	r2,24(sp)
   45998:	00800c04 	movi	r2,48
   4599c:	b8800005 	stb	r2,0(r23)
   459a0:	b805883a 	mov	r2,r23
   459a4:	15000005 	stb	r20,0(r2)
   459a8:	003f4506 	br	456c0 <_dtoa_r+0x684>
   459ac:	d9c00c17 	ldw	r7,48(sp)
   459b0:	3800c926 	beq	r7,zero,45cd8 <_dtoa_r+0xc9c>
   459b4:	d9c00417 	ldw	r7,16(sp)
   459b8:	00c00044 	movi	r3,1
   459bc:	19c16c0e 	bge	r3,r7,45f70 <_dtoa_r+0xf34>
   459c0:	d9000917 	ldw	r4,36(sp)
   459c4:	d9c00a17 	ldw	r7,40(sp)
   459c8:	24ffffc4 	addi	r19,r4,-1
   459cc:	3cc20716 	blt	r7,r19,461ec <_dtoa_r+0x11b0>
   459d0:	3ce7c83a 	sub	r19,r7,r19
   459d4:	d9c00917 	ldw	r7,36(sp)
   459d8:	3802ae16 	blt	r7,zero,46494 <_dtoa_r+0x1458>
   459dc:	dc800817 	ldw	r18,32(sp)
   459e0:	d8800917 	ldw	r2,36(sp)
   459e4:	d8c00817 	ldw	r3,32(sp)
   459e8:	d9c00717 	ldw	r7,28(sp)
   459ec:	8009883a 	mov	r4,r16
   459f0:	1887883a 	add	r3,r3,r2
   459f4:	388f883a 	add	r7,r7,r2
   459f8:	01400044 	movi	r5,1
   459fc:	d8c00815 	stw	r3,32(sp)
   45a00:	d9c00715 	stw	r7,28(sp)
   45a04:	00480c00 	call	480c0 <__i2b>
   45a08:	102b883a 	mov	r21,r2
   45a0c:	90000a26 	beq	r18,zero,45a38 <_dtoa_r+0x9fc>
   45a10:	d8800717 	ldw	r2,28(sp)
   45a14:	0080080e 	bge	zero,r2,45a38 <_dtoa_r+0x9fc>
   45a18:	90812b16 	blt	r18,r2,45ec8 <_dtoa_r+0xe8c>
   45a1c:	d8c00817 	ldw	r3,32(sp)
   45a20:	d9000717 	ldw	r4,28(sp)
   45a24:	90a5c83a 	sub	r18,r18,r2
   45a28:	1887c83a 	sub	r3,r3,r2
   45a2c:	2089c83a 	sub	r4,r4,r2
   45a30:	d8c00815 	stw	r3,32(sp)
   45a34:	d9000715 	stw	r4,28(sp)
   45a38:	d9c00a17 	ldw	r7,40(sp)
   45a3c:	01c0140e 	bge	zero,r7,45a90 <_dtoa_r+0xa54>
   45a40:	d8800c17 	ldw	r2,48(sp)
   45a44:	1001de26 	beq	r2,zero,461c0 <_dtoa_r+0x1184>
   45a48:	04c00e0e 	bge	zero,r19,45a84 <_dtoa_r+0xa48>
   45a4c:	a80b883a 	mov	r5,r21
   45a50:	8009883a 	mov	r4,r16
   45a54:	980d883a 	mov	r6,r19
   45a58:	00483540 	call	48354 <__pow5mult>
   45a5c:	e00d883a 	mov	r6,fp
   45a60:	8009883a 	mov	r4,r16
   45a64:	100b883a 	mov	r5,r2
   45a68:	102b883a 	mov	r21,r2
   45a6c:	00480fc0 	call	480fc <__multiply>
   45a70:	1029883a 	mov	r20,r2
   45a74:	e00b883a 	mov	r5,fp
   45a78:	8009883a 	mov	r4,r16
   45a7c:	0047d380 	call	47d38 <_Bfree>
   45a80:	a039883a 	mov	fp,r20
   45a84:	d8c00a17 	ldw	r3,40(sp)
   45a88:	1ccdc83a 	sub	r6,r3,r19
   45a8c:	3001291e 	bne	r6,zero,45f34 <_dtoa_r+0xef8>
   45a90:	8009883a 	mov	r4,r16
   45a94:	01400044 	movi	r5,1
   45a98:	00480c00 	call	480c0 <__i2b>
   45a9c:	d9000b17 	ldw	r4,44(sp)
   45aa0:	1029883a 	mov	r20,r2
   45aa4:	0100050e 	bge	zero,r4,45abc <_dtoa_r+0xa80>
   45aa8:	d9800b17 	ldw	r6,44(sp)
   45aac:	8009883a 	mov	r4,r16
   45ab0:	100b883a 	mov	r5,r2
   45ab4:	00483540 	call	48354 <__pow5mult>
   45ab8:	1029883a 	mov	r20,r2
   45abc:	d9c00417 	ldw	r7,16(sp)
   45ac0:	00800044 	movi	r2,1
   45ac4:	11c0f00e 	bge	r2,r7,45e88 <_dtoa_r+0xe4c>
   45ac8:	0023883a 	mov	r17,zero
   45acc:	d8800b17 	ldw	r2,44(sp)
   45ad0:	1001741e 	bne	r2,zero,460a4 <_dtoa_r+0x1068>
   45ad4:	00800044 	movi	r2,1
   45ad8:	d8c00717 	ldw	r3,28(sp)
   45adc:	10c5883a 	add	r2,r2,r3
   45ae0:	108007cc 	andi	r2,r2,31
   45ae4:	10008026 	beq	r2,zero,45ce8 <_dtoa_r+0xcac>
   45ae8:	01000804 	movi	r4,32
   45aec:	2089c83a 	sub	r4,r4,r2
   45af0:	00c00104 	movi	r3,4
   45af4:	1902d00e 	bge	r3,r4,46638 <_dtoa_r+0x15fc>
   45af8:	d9000817 	ldw	r4,32(sp)
   45afc:	d9c00717 	ldw	r7,28(sp)
   45b00:	00c00704 	movi	r3,28
   45b04:	1885c83a 	sub	r2,r3,r2
   45b08:	2089883a 	add	r4,r4,r2
   45b0c:	388f883a 	add	r7,r7,r2
   45b10:	d9000815 	stw	r4,32(sp)
   45b14:	90a5883a 	add	r18,r18,r2
   45b18:	d9c00715 	stw	r7,28(sp)
   45b1c:	d9c00817 	ldw	r7,32(sp)
   45b20:	01c0050e 	bge	zero,r7,45b38 <_dtoa_r+0xafc>
   45b24:	e00b883a 	mov	r5,fp
   45b28:	8009883a 	mov	r4,r16
   45b2c:	380d883a 	mov	r6,r7
   45b30:	00484800 	call	48480 <__lshift>
   45b34:	1039883a 	mov	fp,r2
   45b38:	d8800717 	ldw	r2,28(sp)
   45b3c:	0080050e 	bge	zero,r2,45b54 <_dtoa_r+0xb18>
   45b40:	a00b883a 	mov	r5,r20
   45b44:	8009883a 	mov	r4,r16
   45b48:	100d883a 	mov	r6,r2
   45b4c:	00484800 	call	48480 <__lshift>
   45b50:	1029883a 	mov	r20,r2
   45b54:	d8c00d17 	ldw	r3,52(sp)
   45b58:	1801401e 	bne	r3,zero,4605c <_dtoa_r+0x1020>
   45b5c:	d8800917 	ldw	r2,36(sp)
   45b60:	00815a0e 	bge	zero,r2,460cc <_dtoa_r+0x1090>
   45b64:	d8c00c17 	ldw	r3,48(sp)
   45b68:	18006f1e 	bne	r3,zero,45d28 <_dtoa_r+0xcec>
   45b6c:	b823883a 	mov	r17,r23
   45b70:	dc800917 	ldw	r18,36(sp)
   45b74:	00000206 	br	45b80 <_dtoa_r+0xb44>
   45b78:	0047d600 	call	47d60 <__multadd>
   45b7c:	1039883a 	mov	fp,r2
   45b80:	e009883a 	mov	r4,fp
   45b84:	a00b883a 	mov	r5,r20
   45b88:	0044e000 	call	44e00 <quorem>
   45b8c:	10800c04 	addi	r2,r2,48
   45b90:	88800005 	stb	r2,0(r17)
   45b94:	8c400044 	addi	r17,r17,1
   45b98:	8dc7c83a 	sub	r3,r17,r23
   45b9c:	8009883a 	mov	r4,r16
   45ba0:	e00b883a 	mov	r5,fp
   45ba4:	01800284 	movi	r6,10
   45ba8:	000f883a 	mov	r7,zero
   45bac:	1cbff216 	blt	r3,r18,45b78 <_dtoa_r+0xb3c>
   45bb0:	dd800917 	ldw	r22,36(sp)
   45bb4:	1007883a 	mov	r3,r2
   45bb8:	05823a0e 	bge	zero,r22,464a4 <_dtoa_r+0x1468>
   45bbc:	bdad883a 	add	r22,r23,r22
   45bc0:	0023883a 	mov	r17,zero
   45bc4:	e00b883a 	mov	r5,fp
   45bc8:	01800044 	movi	r6,1
   45bcc:	8009883a 	mov	r4,r16
   45bd0:	d8c01515 	stw	r3,84(sp)
   45bd4:	00484800 	call	48480 <__lshift>
   45bd8:	1009883a 	mov	r4,r2
   45bdc:	a00b883a 	mov	r5,r20
   45be0:	1039883a 	mov	fp,r2
   45be4:	00485dc0 	call	485dc <__mcmp>
   45be8:	d8c01517 	ldw	r3,84(sp)
   45bec:	0080d60e 	bge	zero,r2,45f48 <_dtoa_r+0xf0c>
   45bf0:	b13fffc3 	ldbu	r4,-1(r22)
   45bf4:	b0ffff84 	addi	r3,r22,-2
   45bf8:	01800e44 	movi	r6,57
   45bfc:	00000306 	br	45c0c <_dtoa_r+0xbd0>
   45c00:	19000003 	ldbu	r4,0(r3)
   45c04:	102d883a 	mov	r22,r2
   45c08:	18ffffc4 	addi	r3,r3,-1
   45c0c:	21403fcc 	andi	r5,r4,255
   45c10:	2940201c 	xori	r5,r5,128
   45c14:	297fe004 	addi	r5,r5,-128
   45c18:	b0bfffc4 	addi	r2,r22,-1
   45c1c:	2981a71e 	bne	r5,r6,462bc <_dtoa_r+0x1280>
   45c20:	b8bff71e 	bne	r23,r2,45c00 <_dtoa_r+0xbc4>
   45c24:	d8800617 	ldw	r2,24(sp)
   45c28:	10800044 	addi	r2,r2,1
   45c2c:	d8800615 	stw	r2,24(sp)
   45c30:	00800c44 	movi	r2,49
   45c34:	b8800005 	stb	r2,0(r23)
   45c38:	8009883a 	mov	r4,r16
   45c3c:	a00b883a 	mov	r5,r20
   45c40:	0047d380 	call	47d38 <_Bfree>
   45c44:	a83e9e26 	beq	r21,zero,456c0 <_dtoa_r+0x684>
   45c48:	88000426 	beq	r17,zero,45c5c <_dtoa_r+0xc20>
   45c4c:	8d400326 	beq	r17,r21,45c5c <_dtoa_r+0xc20>
   45c50:	8009883a 	mov	r4,r16
   45c54:	880b883a 	mov	r5,r17
   45c58:	0047d380 	call	47d38 <_Bfree>
   45c5c:	8009883a 	mov	r4,r16
   45c60:	a80b883a 	mov	r5,r21
   45c64:	0047d380 	call	47d38 <_Bfree>
   45c68:	003e9506 	br	456c0 <_dtoa_r+0x684>
   45c6c:	00c00044 	movi	r3,1
   45c70:	d8c00d15 	stw	r3,52(sp)
   45c74:	003d9f06 	br	452f4 <_dtoa_r+0x2b8>
   45c78:	d9000817 	ldw	r4,32(sp)
   45c7c:	d8800617 	ldw	r2,24(sp)
   45c80:	d8000b15 	stw	zero,44(sp)
   45c84:	2089c83a 	sub	r4,r4,r2
   45c88:	0087c83a 	sub	r3,zero,r2
   45c8c:	d9000815 	stw	r4,32(sp)
   45c90:	d8c00a15 	stw	r3,40(sp)
   45c94:	003da306 	br	45324 <_dtoa_r+0x2e8>
   45c98:	0529c83a 	sub	r20,zero,r20
   45c9c:	dd000815 	stw	r20,32(sp)
   45ca0:	d8000715 	stw	zero,28(sp)
   45ca4:	003d9806 	br	45308 <_dtoa_r+0x2cc>
   45ca8:	d9000617 	ldw	r4,24(sp)
   45cac:	004abac0 	call	4abac <__floatsidf>
   45cb0:	1009883a 	mov	r4,r2
   45cb4:	180b883a 	mov	r5,r3
   45cb8:	980d883a 	mov	r6,r19
   45cbc:	900f883a 	mov	r7,r18
   45cc0:	004aa2c0 	call	4aa2c <__nedf2>
   45cc4:	103d7a26 	beq	r2,zero,452b0 <_dtoa_r+0x274>
   45cc8:	d8800617 	ldw	r2,24(sp)
   45ccc:	10bfffc4 	addi	r2,r2,-1
   45cd0:	d8800615 	stw	r2,24(sp)
   45cd4:	003d7606 	br	452b0 <_dtoa_r+0x274>
   45cd8:	dcc00a17 	ldw	r19,40(sp)
   45cdc:	dc800817 	ldw	r18,32(sp)
   45ce0:	002b883a 	mov	r21,zero
   45ce4:	003f4906 	br	45a0c <_dtoa_r+0x9d0>
   45ce8:	00800704 	movi	r2,28
   45cec:	d8c00817 	ldw	r3,32(sp)
   45cf0:	d9000717 	ldw	r4,28(sp)
   45cf4:	90a5883a 	add	r18,r18,r2
   45cf8:	1887883a 	add	r3,r3,r2
   45cfc:	2089883a 	add	r4,r4,r2
   45d00:	d8c00815 	stw	r3,32(sp)
   45d04:	d9000715 	stw	r4,28(sp)
   45d08:	003f8406 	br	45b1c <_dtoa_r+0xae0>
   45d0c:	d9c00317 	ldw	r7,12(sp)
   45d10:	013efb84 	movi	r4,-1042
   45d14:	2509c83a 	sub	r4,r4,r20
   45d18:	3908983a 	sll	r4,r7,r4
   45d1c:	003d3006 	br	451e0 <_dtoa_r+0x1a4>
   45d20:	d8000d15 	stw	zero,52(sp)
   45d24:	003d7306 	br	452f4 <_dtoa_r+0x2b8>
   45d28:	0480050e 	bge	zero,r18,45d40 <_dtoa_r+0xd04>
   45d2c:	a80b883a 	mov	r5,r21
   45d30:	8009883a 	mov	r4,r16
   45d34:	900d883a 	mov	r6,r18
   45d38:	00484800 	call	48480 <__lshift>
   45d3c:	102b883a 	mov	r21,r2
   45d40:	8801611e 	bne	r17,zero,462c8 <_dtoa_r+0x128c>
   45d44:	a827883a 	mov	r19,r21
   45d48:	d8c00317 	ldw	r3,12(sp)
   45d4c:	d9000917 	ldw	r4,36(sp)
   45d50:	b8bfffc4 	addi	r2,r23,-1
   45d54:	18c0004c 	andi	r3,r3,1
   45d58:	1105883a 	add	r2,r2,r4
   45d5c:	b825883a 	mov	r18,r23
   45d60:	d8800515 	stw	r2,20(sp)
   45d64:	a823883a 	mov	r17,r21
   45d68:	d8c00315 	stw	r3,12(sp)
   45d6c:	ddc00715 	stw	r23,28(sp)
   45d70:	e009883a 	mov	r4,fp
   45d74:	a00b883a 	mov	r5,r20
   45d78:	0044e000 	call	44e00 <quorem>
   45d7c:	e009883a 	mov	r4,fp
   45d80:	880b883a 	mov	r5,r17
   45d84:	102d883a 	mov	r22,r2
   45d88:	00485dc0 	call	485dc <__mcmp>
   45d8c:	980d883a 	mov	r6,r19
   45d90:	8009883a 	mov	r4,r16
   45d94:	a00b883a 	mov	r5,r20
   45d98:	102b883a 	mov	r21,r2
   45d9c:	00486340 	call	48634 <__mdiff>
   45da0:	100d883a 	mov	r6,r2
   45da4:	10800317 	ldw	r2,12(r2)
   45da8:	b5c00c04 	addi	r23,r22,48
   45dac:	10008c26 	beq	r2,zero,45fe0 <_dtoa_r+0xfa4>
   45db0:	8009883a 	mov	r4,r16
   45db4:	300b883a 	mov	r5,r6
   45db8:	0047d380 	call	47d38 <_Bfree>
   45dbc:	00800044 	movi	r2,1
   45dc0:	a8007116 	blt	r21,zero,45f88 <_dtoa_r+0xf4c>
   45dc4:	a800041e 	bne	r21,zero,45dd8 <_dtoa_r+0xd9c>
   45dc8:	d9c00417 	ldw	r7,16(sp)
   45dcc:	3800021e 	bne	r7,zero,45dd8 <_dtoa_r+0xd9c>
   45dd0:	d8c00317 	ldw	r3,12(sp)
   45dd4:	18006c26 	beq	r3,zero,45f88 <_dtoa_r+0xf4c>
   45dd8:	00814c16 	blt	zero,r2,4630c <_dtoa_r+0x12d0>
   45ddc:	d8c00517 	ldw	r3,20(sp)
   45de0:	95400044 	addi	r21,r18,1
   45de4:	95c00005 	stb	r23,0(r18)
   45de8:	a82d883a 	mov	r22,r21
   45dec:	90c14d26 	beq	r18,r3,46324 <_dtoa_r+0x12e8>
   45df0:	e00b883a 	mov	r5,fp
   45df4:	8009883a 	mov	r4,r16
   45df8:	01800284 	movi	r6,10
   45dfc:	000f883a 	mov	r7,zero
   45e00:	0047d600 	call	47d60 <__multadd>
   45e04:	1039883a 	mov	fp,r2
   45e08:	8cc08b26 	beq	r17,r19,46038 <_dtoa_r+0xffc>
   45e0c:	880b883a 	mov	r5,r17
   45e10:	01800284 	movi	r6,10
   45e14:	000f883a 	mov	r7,zero
   45e18:	8009883a 	mov	r4,r16
   45e1c:	0047d600 	call	47d60 <__multadd>
   45e20:	980b883a 	mov	r5,r19
   45e24:	8009883a 	mov	r4,r16
   45e28:	01800284 	movi	r6,10
   45e2c:	000f883a 	mov	r7,zero
   45e30:	1023883a 	mov	r17,r2
   45e34:	0047d600 	call	47d60 <__multadd>
   45e38:	1027883a 	mov	r19,r2
   45e3c:	a825883a 	mov	r18,r21
   45e40:	003fcb06 	br	45d70 <_dtoa_r+0xd34>
   45e44:	d9c00417 	ldw	r7,16(sp)
   45e48:	00800104 	movi	r2,4
   45e4c:	3880e426 	beq	r7,r2,461e0 <_dtoa_r+0x11a4>
   45e50:	00800144 	movi	r2,5
   45e54:	38be3c1e 	bne	r7,r2,45748 <_dtoa_r+0x70c>
   45e58:	00c00044 	movi	r3,1
   45e5c:	d8c00c15 	stw	r3,48(sp)
   45e60:	d9c02117 	ldw	r7,132(sp)
   45e64:	d8800617 	ldw	r2,24(sp)
   45e68:	388f883a 	add	r7,r7,r2
   45e6c:	3c800044 	addi	r18,r7,1
   45e70:	d9c00e15 	stw	r7,56(sp)
   45e74:	dc800915 	stw	r18,36(sp)
   45e78:	04bd3e16 	blt	zero,r18,45374 <_dtoa_r+0x338>
   45e7c:	80001115 	stw	zero,68(r16)
   45e80:	000b883a 	mov	r5,zero
   45e84:	003d4606 	br	453a0 <_dtoa_r+0x364>
   45e88:	d8c00317 	ldw	r3,12(sp)
   45e8c:	183f0e1e 	bne	r3,zero,45ac8 <_dtoa_r+0xa8c>
   45e90:	00c00434 	movhi	r3,16
   45e94:	18ffffc4 	addi	r3,r3,-1
   45e98:	88c6703a 	and	r3,r17,r3
   45e9c:	183f0a1e 	bne	r3,zero,45ac8 <_dtoa_r+0xa8c>
   45ea0:	8c5ffc2c 	andhi	r17,r17,32752
   45ea4:	883f0826 	beq	r17,zero,45ac8 <_dtoa_r+0xa8c>
   45ea8:	d9000817 	ldw	r4,32(sp)
   45eac:	d9c00717 	ldw	r7,28(sp)
   45eb0:	1023883a 	mov	r17,r2
   45eb4:	2089883a 	add	r4,r4,r2
   45eb8:	388f883a 	add	r7,r7,r2
   45ebc:	d9000815 	stw	r4,32(sp)
   45ec0:	d9c00715 	stw	r7,28(sp)
   45ec4:	003f0106 	br	45acc <_dtoa_r+0xa90>
   45ec8:	9005883a 	mov	r2,r18
   45ecc:	003ed306 	br	45a1c <_dtoa_r+0x9e0>
   45ed0:	d8800917 	ldw	r2,36(sp)
   45ed4:	00be3516 	blt	zero,r2,457ac <_dtoa_r+0x770>
   45ed8:	1000b61e 	bne	r2,zero,461b4 <_dtoa_r+0x1178>
   45edc:	9009883a 	mov	r4,r18
   45ee0:	980b883a 	mov	r5,r19
   45ee4:	000d883a 	mov	r6,zero
   45ee8:	01d00534 	movhi	r7,16404
   45eec:	004a6ec0 	call	4a6ec <__muldf3>
   45ef0:	d9800317 	ldw	r6,12(sp)
   45ef4:	1009883a 	mov	r4,r2
   45ef8:	180b883a 	mov	r5,r3
   45efc:	880f883a 	mov	r7,r17
   45f00:	004aaec0 	call	4aaec <__gedf2>
   45f04:	0029883a 	mov	r20,zero
   45f08:	002b883a 	mov	r21,zero
   45f0c:	10007e16 	blt	r2,zero,46108 <_dtoa_r+0x10cc>
   45f10:	d8802117 	ldw	r2,132(sp)
   45f14:	b82d883a 	mov	r22,r23
   45f18:	0084303a 	nor	r2,zero,r2
   45f1c:	d8800615 	stw	r2,24(sp)
   45f20:	8009883a 	mov	r4,r16
   45f24:	a00b883a 	mov	r5,r20
   45f28:	0047d380 	call	47d38 <_Bfree>
   45f2c:	a83f4b1e 	bne	r21,zero,45c5c <_dtoa_r+0xc20>
   45f30:	003de306 	br	456c0 <_dtoa_r+0x684>
   45f34:	e00b883a 	mov	r5,fp
   45f38:	8009883a 	mov	r4,r16
   45f3c:	00483540 	call	48354 <__pow5mult>
   45f40:	1039883a 	mov	fp,r2
   45f44:	003ed206 	br	45a90 <_dtoa_r+0xa54>
   45f48:	1000021e 	bne	r2,zero,45f54 <_dtoa_r+0xf18>
   45f4c:	18c0004c 	andi	r3,r3,1
   45f50:	183f271e 	bne	r3,zero,45bf0 <_dtoa_r+0xbb4>
   45f54:	01000c04 	movi	r4,48
   45f58:	00000106 	br	45f60 <_dtoa_r+0xf24>
   45f5c:	102d883a 	mov	r22,r2
   45f60:	b0bfffc4 	addi	r2,r22,-1
   45f64:	10c00007 	ldb	r3,0(r2)
   45f68:	193ffc26 	beq	r3,r4,45f5c <_dtoa_r+0xf20>
   45f6c:	003f3206 	br	45c38 <_dtoa_r+0xbfc>
   45f70:	d8c00f17 	ldw	r3,60(sp)
   45f74:	18015026 	beq	r3,zero,464b8 <_dtoa_r+0x147c>
   45f78:	10810cc4 	addi	r2,r2,1075
   45f7c:	dcc00a17 	ldw	r19,40(sp)
   45f80:	dc800817 	ldw	r18,32(sp)
   45f84:	003e9706 	br	459e4 <_dtoa_r+0x9a8>
   45f88:	b807883a 	mov	r3,r23
   45f8c:	182b883a 	mov	r21,r3
   45f90:	ddc00717 	ldw	r23,28(sp)
   45f94:	00800e0e 	bge	zero,r2,45fd0 <_dtoa_r+0xf94>
   45f98:	e00b883a 	mov	r5,fp
   45f9c:	01800044 	movi	r6,1
   45fa0:	8009883a 	mov	r4,r16
   45fa4:	d8c01515 	stw	r3,84(sp)
   45fa8:	00484800 	call	48480 <__lshift>
   45fac:	1009883a 	mov	r4,r2
   45fb0:	a00b883a 	mov	r5,r20
   45fb4:	1039883a 	mov	fp,r2
   45fb8:	00485dc0 	call	485dc <__mcmp>
   45fbc:	d8c01517 	ldw	r3,84(sp)
   45fc0:	0081880e 	bge	zero,r2,465e4 <_dtoa_r+0x15a8>
   45fc4:	00800e44 	movi	r2,57
   45fc8:	b0c00c44 	addi	r3,r22,49
   45fcc:	a8816326 	beq	r21,r2,4655c <_dtoa_r+0x1520>
   45fd0:	90c00005 	stb	r3,0(r18)
   45fd4:	95800044 	addi	r22,r18,1
   45fd8:	982b883a 	mov	r21,r19
   45fdc:	003f1606 	br	45c38 <_dtoa_r+0xbfc>
   45fe0:	300b883a 	mov	r5,r6
   45fe4:	e009883a 	mov	r4,fp
   45fe8:	d9801515 	stw	r6,84(sp)
   45fec:	00485dc0 	call	485dc <__mcmp>
   45ff0:	d9801517 	ldw	r6,84(sp)
   45ff4:	8009883a 	mov	r4,r16
   45ff8:	d8801515 	stw	r2,84(sp)
   45ffc:	300b883a 	mov	r5,r6
   46000:	0047d380 	call	47d38 <_Bfree>
   46004:	d8801517 	ldw	r2,84(sp)
   46008:	103f6d1e 	bne	r2,zero,45dc0 <_dtoa_r+0xd84>
   4600c:	d9c00417 	ldw	r7,16(sp)
   46010:	383f6b1e 	bne	r7,zero,45dc0 <_dtoa_r+0xd84>
   46014:	d8c00317 	ldw	r3,12(sp)
   46018:	183f691e 	bne	r3,zero,45dc0 <_dtoa_r+0xd84>
   4601c:	b807883a 	mov	r3,r23
   46020:	00800e44 	movi	r2,57
   46024:	ddc00717 	ldw	r23,28(sp)
   46028:	18814c26 	beq	r3,r2,4655c <_dtoa_r+0x1520>
   4602c:	057fe80e 	bge	zero,r21,45fd0 <_dtoa_r+0xf94>
   46030:	b0c00c44 	addi	r3,r22,49
   46034:	003fe606 	br	45fd0 <_dtoa_r+0xf94>
   46038:	880b883a 	mov	r5,r17
   4603c:	8009883a 	mov	r4,r16
   46040:	01800284 	movi	r6,10
   46044:	000f883a 	mov	r7,zero
   46048:	0047d600 	call	47d60 <__multadd>
   4604c:	1023883a 	mov	r17,r2
   46050:	1027883a 	mov	r19,r2
   46054:	a825883a 	mov	r18,r21
   46058:	003f4506 	br	45d70 <_dtoa_r+0xd34>
   4605c:	e009883a 	mov	r4,fp
   46060:	a00b883a 	mov	r5,r20
   46064:	00485dc0 	call	485dc <__mcmp>
   46068:	103ebc0e 	bge	r2,zero,45b5c <_dtoa_r+0xb20>
   4606c:	e00b883a 	mov	r5,fp
   46070:	8009883a 	mov	r4,r16
   46074:	01800284 	movi	r6,10
   46078:	000f883a 	mov	r7,zero
   4607c:	0047d600 	call	47d60 <__multadd>
   46080:	1039883a 	mov	fp,r2
   46084:	d8800617 	ldw	r2,24(sp)
   46088:	d8c00c17 	ldw	r3,48(sp)
   4608c:	10bfffc4 	addi	r2,r2,-1
   46090:	d8800615 	stw	r2,24(sp)
   46094:	1801571e 	bne	r3,zero,465f4 <_dtoa_r+0x15b8>
   46098:	d9c00e17 	ldw	r7,56(sp)
   4609c:	d9c00915 	stw	r7,36(sp)
   460a0:	003eae06 	br	45b5c <_dtoa_r+0xb20>
   460a4:	a0800417 	ldw	r2,16(r20)
   460a8:	10800104 	addi	r2,r2,4
   460ac:	1085883a 	add	r2,r2,r2
   460b0:	1085883a 	add	r2,r2,r2
   460b4:	a085883a 	add	r2,r20,r2
   460b8:	11000017 	ldw	r4,0(r2)
   460bc:	0047fa80 	call	47fa8 <__hi0bits>
   460c0:	00c00804 	movi	r3,32
   460c4:	1885c83a 	sub	r2,r3,r2
   460c8:	003e8306 	br	45ad8 <_dtoa_r+0xa9c>
   460cc:	d9c00417 	ldw	r7,16(sp)
   460d0:	00800084 	movi	r2,2
   460d4:	11fea30e 	bge	r2,r7,45b64 <_dtoa_r+0xb28>
   460d8:	d8800917 	ldw	r2,36(sp)
   460dc:	103f8c1e 	bne	r2,zero,45f10 <_dtoa_r+0xed4>
   460e0:	a00b883a 	mov	r5,r20
   460e4:	8009883a 	mov	r4,r16
   460e8:	01800144 	movi	r6,5
   460ec:	000f883a 	mov	r7,zero
   460f0:	0047d600 	call	47d60 <__multadd>
   460f4:	e009883a 	mov	r4,fp
   460f8:	100b883a 	mov	r5,r2
   460fc:	1029883a 	mov	r20,r2
   46100:	00485dc0 	call	485dc <__mcmp>
   46104:	00bf820e 	bge	zero,r2,45f10 <_dtoa_r+0xed4>
   46108:	00800c44 	movi	r2,49
   4610c:	b8800005 	stb	r2,0(r23)
   46110:	d8800617 	ldw	r2,24(sp)
   46114:	bd800044 	addi	r22,r23,1
   46118:	10800044 	addi	r2,r2,1
   4611c:	d8800615 	stw	r2,24(sp)
   46120:	003f7f06 	br	45f20 <_dtoa_r+0xee4>
   46124:	dc000417 	ldw	r16,16(sp)
   46128:	003d6506 	br	456c0 <_dtoa_r+0x684>
   4612c:	9009883a 	mov	r4,r18
   46130:	004abac0 	call	4abac <__floatsidf>
   46134:	1009883a 	mov	r4,r2
   46138:	180b883a 	mov	r5,r3
   4613c:	980d883a 	mov	r6,r19
   46140:	a00f883a 	mov	r7,r20
   46144:	004a6ec0 	call	4a6ec <__muldf3>
   46148:	1009883a 	mov	r4,r2
   4614c:	180b883a 	mov	r5,r3
   46150:	000d883a 	mov	r6,zero
   46154:	01d00734 	movhi	r7,16412
   46158:	004a6380 	call	4a638 <__adddf3>
   4615c:	057f3034 	movhi	r21,64704
   46160:	1025883a 	mov	r18,r2
   46164:	1d6b883a 	add	r21,r3,r21
   46168:	9809883a 	mov	r4,r19
   4616c:	a00b883a 	mov	r5,r20
   46170:	000d883a 	mov	r6,zero
   46174:	01d00534 	movhi	r7,16404
   46178:	004a68c0 	call	4a68c <__subdf3>
   4617c:	1009883a 	mov	r4,r2
   46180:	180b883a 	mov	r5,r3
   46184:	900d883a 	mov	r6,r18
   46188:	a80f883a 	mov	r7,r21
   4618c:	1027883a 	mov	r19,r2
   46190:	1829883a 	mov	r20,r3
   46194:	004aa880 	call	4aa88 <__gtdf2>
   46198:	00806616 	blt	zero,r2,46334 <_dtoa_r+0x12f8>
   4619c:	a9e0003c 	xorhi	r7,r21,32768
   461a0:	9809883a 	mov	r4,r19
   461a4:	a00b883a 	mov	r5,r20
   461a8:	900d883a 	mov	r6,r18
   461ac:	004ab500 	call	4ab50 <__ltdf2>
   461b0:	103d710e 	bge	r2,zero,45778 <_dtoa_r+0x73c>
   461b4:	0029883a 	mov	r20,zero
   461b8:	002b883a 	mov	r21,zero
   461bc:	003f5406 	br	45f10 <_dtoa_r+0xed4>
   461c0:	d9800a17 	ldw	r6,40(sp)
   461c4:	e00b883a 	mov	r5,fp
   461c8:	8009883a 	mov	r4,r16
   461cc:	00483540 	call	48354 <__pow5mult>
   461d0:	1039883a 	mov	fp,r2
   461d4:	003e2e06 	br	45a90 <_dtoa_r+0xa54>
   461d8:	d8000c15 	stw	zero,48(sp)
   461dc:	003f2006 	br	45e60 <_dtoa_r+0xe24>
   461e0:	00800044 	movi	r2,1
   461e4:	d8800c15 	stw	r2,48(sp)
   461e8:	003c5d06 	br	45360 <_dtoa_r+0x324>
   461ec:	d8c00a17 	ldw	r3,40(sp)
   461f0:	d9000b17 	ldw	r4,44(sp)
   461f4:	dcc00a15 	stw	r19,40(sp)
   461f8:	98c5c83a 	sub	r2,r19,r3
   461fc:	2089883a 	add	r4,r4,r2
   46200:	d9000b15 	stw	r4,44(sp)
   46204:	0027883a 	mov	r19,zero
   46208:	003df206 	br	459d4 <_dtoa_r+0x998>
   4620c:	d9000317 	ldw	r4,12(sp)
   46210:	8829883a 	mov	r20,r17
   46214:	04800084 	movi	r18,2
   46218:	d9001015 	stw	r4,64(sp)
   4621c:	003c8106 	br	45424 <_dtoa_r+0x3e8>
   46220:	04800044 	movi	r18,1
   46224:	dc800e15 	stw	r18,56(sp)
   46228:	dc800915 	stw	r18,36(sp)
   4622c:	dc802115 	stw	r18,132(sp)
   46230:	003f1206 	br	45e7c <_dtoa_r+0xe40>
   46234:	d8800617 	ldw	r2,24(sp)
   46238:	00abc83a 	sub	r21,zero,r2
   4623c:	a800a426 	beq	r21,zero,464d0 <_dtoa_r+0x1494>
   46240:	a88003cc 	andi	r2,r21,15
   46244:	100490fa 	slli	r2,r2,3
   46248:	00c00174 	movhi	r3,5
   4624c:	18f9d304 	addi	r3,r3,-6324
   46250:	d9000317 	ldw	r4,12(sp)
   46254:	1885883a 	add	r2,r3,r2
   46258:	11800017 	ldw	r6,0(r2)
   4625c:	11c00117 	ldw	r7,4(r2)
   46260:	a82bd13a 	srai	r21,r21,4
   46264:	880b883a 	mov	r5,r17
   46268:	004a6ec0 	call	4a6ec <__muldf3>
   4626c:	1027883a 	mov	r19,r2
   46270:	1829883a 	mov	r20,r3
   46274:	a800e826 	beq	r21,zero,46618 <_dtoa_r+0x15dc>
   46278:	05800174 	movhi	r22,5
   4627c:	b5b9c904 	addi	r22,r22,-6364
   46280:	04800084 	movi	r18,2
   46284:	a980004c 	andi	r6,r21,1
   46288:	1009883a 	mov	r4,r2
   4628c:	a82bd07a 	srai	r21,r21,1
   46290:	180b883a 	mov	r5,r3
   46294:	30000426 	beq	r6,zero,462a8 <_dtoa_r+0x126c>
   46298:	b1800017 	ldw	r6,0(r22)
   4629c:	b1c00117 	ldw	r7,4(r22)
   462a0:	94800044 	addi	r18,r18,1
   462a4:	004a6ec0 	call	4a6ec <__muldf3>
   462a8:	b5800204 	addi	r22,r22,8
   462ac:	a83ff51e 	bne	r21,zero,46284 <_dtoa_r+0x1248>
   462b0:	1027883a 	mov	r19,r2
   462b4:	1829883a 	mov	r20,r3
   462b8:	003c7306 	br	45488 <_dtoa_r+0x44c>
   462bc:	21000044 	addi	r4,r4,1
   462c0:	11000005 	stb	r4,0(r2)
   462c4:	003e5c06 	br	45c38 <_dtoa_r+0xbfc>
   462c8:	a9400117 	ldw	r5,4(r21)
   462cc:	8009883a 	mov	r4,r16
   462d0:	0047c900 	call	47c90 <_Balloc>
   462d4:	a9800417 	ldw	r6,16(r21)
   462d8:	11000304 	addi	r4,r2,12
   462dc:	a9400304 	addi	r5,r21,12
   462e0:	31800084 	addi	r6,r6,2
   462e4:	318d883a 	add	r6,r6,r6
   462e8:	318d883a 	add	r6,r6,r6
   462ec:	1023883a 	mov	r17,r2
   462f0:	00478e80 	call	478e8 <memcpy>
   462f4:	8009883a 	mov	r4,r16
   462f8:	880b883a 	mov	r5,r17
   462fc:	01800044 	movi	r6,1
   46300:	00484800 	call	48480 <__lshift>
   46304:	1027883a 	mov	r19,r2
   46308:	003e8f06 	br	45d48 <_dtoa_r+0xd0c>
   4630c:	b807883a 	mov	r3,r23
   46310:	00800e44 	movi	r2,57
   46314:	ddc00717 	ldw	r23,28(sp)
   46318:	18809026 	beq	r3,r2,4655c <_dtoa_r+0x1520>
   4631c:	18c00044 	addi	r3,r3,1
   46320:	003f2b06 	br	45fd0 <_dtoa_r+0xf94>
   46324:	b807883a 	mov	r3,r23
   46328:	982b883a 	mov	r21,r19
   4632c:	ddc00717 	ldw	r23,28(sp)
   46330:	003e2406 	br	45bc4 <_dtoa_r+0xb88>
   46334:	0029883a 	mov	r20,zero
   46338:	002b883a 	mov	r21,zero
   4633c:	003f7206 	br	46108 <_dtoa_r+0x10cc>
   46340:	593fffc4 	addi	r4,r11,-1
   46344:	200490fa 	slli	r2,r4,3
   46348:	00c00174 	movhi	r3,5
   4634c:	18f9d304 	addi	r3,r3,-6324
   46350:	d9001015 	stw	r4,64(sp)
   46354:	1885883a 	add	r2,r3,r2
   46358:	11000017 	ldw	r4,0(r2)
   4635c:	11400117 	ldw	r5,4(r2)
   46360:	900d883a 	mov	r6,r18
   46364:	a80f883a 	mov	r7,r21
   46368:	dac01615 	stw	r11,88(sp)
   4636c:	004a6ec0 	call	4a6ec <__muldf3>
   46370:	a00b883a 	mov	r5,r20
   46374:	9809883a 	mov	r4,r19
   46378:	d8c01215 	stw	r3,72(sp)
   4637c:	d8801115 	stw	r2,68(sp)
   46380:	004ac800 	call	4ac80 <__fixdfsi>
   46384:	1009883a 	mov	r4,r2
   46388:	1025883a 	mov	r18,r2
   4638c:	004abac0 	call	4abac <__floatsidf>
   46390:	9809883a 	mov	r4,r19
   46394:	a00b883a 	mov	r5,r20
   46398:	100d883a 	mov	r6,r2
   4639c:	180f883a 	mov	r7,r3
   463a0:	94800c04 	addi	r18,r18,48
   463a4:	004a68c0 	call	4a68c <__subdf3>
   463a8:	bc800005 	stb	r18,0(r23)
   463ac:	dac01617 	ldw	r11,88(sp)
   463b0:	102b883a 	mov	r21,r2
   463b4:	00800044 	movi	r2,1
   463b8:	bd800044 	addi	r22,r23,1
   463bc:	1815883a 	mov	r10,r3
   463c0:	58802226 	beq	r11,r2,4644c <_dtoa_r+0x1410>
   463c4:	bad7883a 	add	r11,r23,r11
   463c8:	dc001415 	stw	r16,80(sp)
   463cc:	a805883a 	mov	r2,r21
   463d0:	b027883a 	mov	r19,r22
   463d4:	5821883a 	mov	r16,r11
   463d8:	882b883a 	mov	r21,r17
   463dc:	000d883a 	mov	r6,zero
   463e0:	01d00934 	movhi	r7,16420
   463e4:	1009883a 	mov	r4,r2
   463e8:	180b883a 	mov	r5,r3
   463ec:	004a6ec0 	call	4a6ec <__muldf3>
   463f0:	180b883a 	mov	r5,r3
   463f4:	1009883a 	mov	r4,r2
   463f8:	1829883a 	mov	r20,r3
   463fc:	1023883a 	mov	r17,r2
   46400:	004ac800 	call	4ac80 <__fixdfsi>
   46404:	1009883a 	mov	r4,r2
   46408:	1025883a 	mov	r18,r2
   4640c:	004abac0 	call	4abac <__floatsidf>
   46410:	8809883a 	mov	r4,r17
   46414:	a00b883a 	mov	r5,r20
   46418:	100d883a 	mov	r6,r2
   4641c:	180f883a 	mov	r7,r3
   46420:	94800c04 	addi	r18,r18,48
   46424:	004a68c0 	call	4a68c <__subdf3>
   46428:	9cc00044 	addi	r19,r19,1
   4642c:	9cbfffc5 	stb	r18,-1(r19)
   46430:	9c3fea1e 	bne	r19,r16,463dc <_dtoa_r+0x13a0>
   46434:	1815883a 	mov	r10,r3
   46438:	d8c01017 	ldw	r3,64(sp)
   4643c:	dc001417 	ldw	r16,80(sp)
   46440:	a823883a 	mov	r17,r21
   46444:	b0ed883a 	add	r22,r22,r3
   46448:	102b883a 	mov	r21,r2
   4644c:	d9001117 	ldw	r4,68(sp)
   46450:	d9401217 	ldw	r5,72(sp)
   46454:	000d883a 	mov	r6,zero
   46458:	01cff834 	movhi	r7,16352
   4645c:	da801515 	stw	r10,84(sp)
   46460:	004a6380 	call	4a638 <__adddf3>
   46464:	da801517 	ldw	r10,84(sp)
   46468:	1009883a 	mov	r4,r2
   4646c:	180b883a 	mov	r5,r3
   46470:	500f883a 	mov	r7,r10
   46474:	a80d883a 	mov	r6,r21
   46478:	004ab500 	call	4ab50 <__ltdf2>
   4647c:	da801517 	ldw	r10,84(sp)
   46480:	10003b0e 	bge	r2,zero,46570 <_dtoa_r+0x1534>
   46484:	d9c01317 	ldw	r7,76(sp)
   46488:	b53fffc3 	ldbu	r20,-1(r22)
   4648c:	d9c00615 	stw	r7,24(sp)
   46490:	003d3106 	br	45958 <_dtoa_r+0x91c>
   46494:	d8800817 	ldw	r2,32(sp)
   46498:	11e5c83a 	sub	r18,r2,r7
   4649c:	0005883a 	mov	r2,zero
   464a0:	003d5006 	br	459e4 <_dtoa_r+0x9a8>
   464a4:	05800044 	movi	r22,1
   464a8:	003dc406 	br	45bbc <_dtoa_r+0xb80>
   464ac:	a5000044 	addi	r20,r20,1
   464b0:	15000005 	stb	r20,0(r2)
   464b4:	003c8206 	br	456c0 <_dtoa_r+0x684>
   464b8:	d8800217 	ldw	r2,8(sp)
   464bc:	00c00d84 	movi	r3,54
   464c0:	dcc00a17 	ldw	r19,40(sp)
   464c4:	1885c83a 	sub	r2,r3,r2
   464c8:	dc800817 	ldw	r18,32(sp)
   464cc:	003d4506 	br	459e4 <_dtoa_r+0x9a8>
   464d0:	dcc00317 	ldw	r19,12(sp)
   464d4:	8829883a 	mov	r20,r17
   464d8:	04800084 	movi	r18,2
   464dc:	003bea06 	br	45488 <_dtoa_r+0x44c>
   464e0:	d9000917 	ldw	r4,36(sp)
   464e4:	203f1126 	beq	r4,zero,4612c <_dtoa_r+0x10f0>
   464e8:	d9c00e17 	ldw	r7,56(sp)
   464ec:	01fca20e 	bge	zero,r7,45778 <_dtoa_r+0x73c>
   464f0:	a00b883a 	mov	r5,r20
   464f4:	9809883a 	mov	r4,r19
   464f8:	000d883a 	mov	r6,zero
   464fc:	01d00934 	movhi	r7,16420
   46500:	004a6ec0 	call	4a6ec <__muldf3>
   46504:	91000044 	addi	r4,r18,1
   46508:	1027883a 	mov	r19,r2
   4650c:	1829883a 	mov	r20,r3
   46510:	004abac0 	call	4abac <__floatsidf>
   46514:	9809883a 	mov	r4,r19
   46518:	a00b883a 	mov	r5,r20
   4651c:	100d883a 	mov	r6,r2
   46520:	180f883a 	mov	r7,r3
   46524:	004a6ec0 	call	4a6ec <__muldf3>
   46528:	1009883a 	mov	r4,r2
   4652c:	180b883a 	mov	r5,r3
   46530:	000d883a 	mov	r6,zero
   46534:	01d00734 	movhi	r7,16412
   46538:	004a6380 	call	4a638 <__adddf3>
   4653c:	1025883a 	mov	r18,r2
   46540:	d8800617 	ldw	r2,24(sp)
   46544:	057f3034 	movhi	r21,64704
   46548:	1d6b883a 	add	r21,r3,r21
   4654c:	10bfffc4 	addi	r2,r2,-1
   46550:	d8801315 	stw	r2,76(sp)
   46554:	dac00e17 	ldw	r11,56(sp)
   46558:	003be706 	br	454f8 <_dtoa_r+0x4bc>
   4655c:	01000e44 	movi	r4,57
   46560:	91000005 	stb	r4,0(r18)
   46564:	95800044 	addi	r22,r18,1
   46568:	982b883a 	mov	r21,r19
   4656c:	003da106 	br	45bf4 <_dtoa_r+0xbb8>
   46570:	d9801117 	ldw	r6,68(sp)
   46574:	d9c01217 	ldw	r7,72(sp)
   46578:	0009883a 	mov	r4,zero
   4657c:	014ff834 	movhi	r5,16352
   46580:	da801515 	stw	r10,84(sp)
   46584:	004a68c0 	call	4a68c <__subdf3>
   46588:	da801517 	ldw	r10,84(sp)
   4658c:	1009883a 	mov	r4,r2
   46590:	180b883a 	mov	r5,r3
   46594:	a80d883a 	mov	r6,r21
   46598:	500f883a 	mov	r7,r10
   4659c:	004aa880 	call	4aa88 <__gtdf2>
   465a0:	00bc750e 	bge	zero,r2,45778 <_dtoa_r+0x73c>
   465a4:	01000c04 	movi	r4,48
   465a8:	00000106 	br	465b0 <_dtoa_r+0x1574>
   465ac:	102d883a 	mov	r22,r2
   465b0:	b0bfffc4 	addi	r2,r22,-1
   465b4:	10c00007 	ldb	r3,0(r2)
   465b8:	193ffc26 	beq	r3,r4,465ac <_dtoa_r+0x1570>
   465bc:	d8801317 	ldw	r2,76(sp)
   465c0:	d8800615 	stw	r2,24(sp)
   465c4:	003c3e06 	br	456c0 <_dtoa_r+0x684>
   465c8:	d9001317 	ldw	r4,76(sp)
   465cc:	df001117 	ldw	fp,68(sp)
   465d0:	d9000615 	stw	r4,24(sp)
   465d4:	003ce006 	br	45958 <_dtoa_r+0x91c>
   465d8:	df001117 	ldw	fp,68(sp)
   465dc:	dc401217 	ldw	r17,72(sp)
   465e0:	003c6506 	br	45778 <_dtoa_r+0x73c>
   465e4:	103e7a1e 	bne	r2,zero,45fd0 <_dtoa_r+0xf94>
   465e8:	1880004c 	andi	r2,r3,1
   465ec:	103e7826 	beq	r2,zero,45fd0 <_dtoa_r+0xf94>
   465f0:	003e7406 	br	45fc4 <_dtoa_r+0xf88>
   465f4:	8009883a 	mov	r4,r16
   465f8:	a80b883a 	mov	r5,r21
   465fc:	01800284 	movi	r6,10
   46600:	000f883a 	mov	r7,zero
   46604:	0047d600 	call	47d60 <__multadd>
   46608:	d9000e17 	ldw	r4,56(sp)
   4660c:	102b883a 	mov	r21,r2
   46610:	d9000915 	stw	r4,36(sp)
   46614:	003d5106 	br	45b5c <_dtoa_r+0xb20>
   46618:	04800084 	movi	r18,2
   4661c:	003b9a06 	br	45488 <_dtoa_r+0x44c>
   46620:	d8c01317 	ldw	r3,76(sp)
   46624:	d8c00615 	stw	r3,24(sp)
   46628:	003ccb06 	br	45958 <_dtoa_r+0x91c>
   4662c:	d8c01317 	ldw	r3,76(sp)
   46630:	d8c00615 	stw	r3,24(sp)
   46634:	003c2206 	br	456c0 <_dtoa_r+0x684>
   46638:	20fd3826 	beq	r4,r3,45b1c <_dtoa_r+0xae0>
   4663c:	00c00f04 	movi	r3,60
   46640:	1885c83a 	sub	r2,r3,r2
   46644:	003da906 	br	45cec <_dtoa_r+0xcb0>
   46648:	000b883a 	mov	r5,zero
   4664c:	003b5406 	br	453a0 <_dtoa_r+0x364>
   46650:	04c00044 	movi	r19,1
   46654:	003b3b06 	br	45344 <_dtoa_r+0x308>

00046658 <_fflush_r>:
   46658:	defffb04 	addi	sp,sp,-20
   4665c:	dcc00315 	stw	r19,12(sp)
   46660:	dc400115 	stw	r17,4(sp)
   46664:	dfc00415 	stw	ra,16(sp)
   46668:	dc800215 	stw	r18,8(sp)
   4666c:	dc000015 	stw	r16,0(sp)
   46670:	2027883a 	mov	r19,r4
   46674:	2823883a 	mov	r17,r5
   46678:	20000226 	beq	r4,zero,46684 <_fflush_r+0x2c>
   4667c:	20800e17 	ldw	r2,56(r4)
   46680:	10005726 	beq	r2,zero,467e0 <_fflush_r+0x188>
   46684:	8880030b 	ldhu	r2,12(r17)
   46688:	10c0020c 	andi	r3,r2,8
   4668c:	18ffffcc 	andi	r3,r3,65535
   46690:	18e0001c 	xori	r3,r3,32768
   46694:	18e00004 	addi	r3,r3,-32768
   46698:	1800311e 	bne	r3,zero,46760 <_fflush_r+0x108>
   4669c:	89000117 	ldw	r4,4(r17)
   466a0:	10c20014 	ori	r3,r2,2048
   466a4:	88c0030d 	sth	r3,12(r17)
   466a8:	180b883a 	mov	r5,r3
   466ac:	0100520e 	bge	zero,r4,467f8 <_fflush_r+0x1a0>
   466b0:	88c00a17 	ldw	r3,40(r17)
   466b4:	18002226 	beq	r3,zero,46740 <_fflush_r+0xe8>
   466b8:	1084000c 	andi	r2,r2,4096
   466bc:	10bfffcc 	andi	r2,r2,65535
   466c0:	10a0001c 	xori	r2,r2,32768
   466c4:	10a00004 	addi	r2,r2,-32768
   466c8:	10004e26 	beq	r2,zero,46804 <_fflush_r+0x1ac>
   466cc:	8c001417 	ldw	r16,80(r17)
   466d0:	2940010c 	andi	r5,r5,4
   466d4:	297fffcc 	andi	r5,r5,65535
   466d8:	2960001c 	xori	r5,r5,32768
   466dc:	29600004 	addi	r5,r5,-32768
   466e0:	28000626 	beq	r5,zero,466fc <_fflush_r+0xa4>
   466e4:	89000117 	ldw	r4,4(r17)
   466e8:	88800c17 	ldw	r2,48(r17)
   466ec:	8121c83a 	sub	r16,r16,r4
   466f0:	10000226 	beq	r2,zero,466fc <_fflush_r+0xa4>
   466f4:	88800f17 	ldw	r2,60(r17)
   466f8:	80a1c83a 	sub	r16,r16,r2
   466fc:	89400717 	ldw	r5,28(r17)
   46700:	9809883a 	mov	r4,r19
   46704:	800d883a 	mov	r6,r16
   46708:	000f883a 	mov	r7,zero
   4670c:	183ee83a 	callr	r3
   46710:	8080281e 	bne	r16,r2,467b4 <_fflush_r+0x15c>
   46714:	8880030b 	ldhu	r2,12(r17)
   46718:	88c00417 	ldw	r3,16(r17)
   4671c:	88000115 	stw	zero,4(r17)
   46720:	113dffcc 	andi	r4,r2,63487
   46724:	1084000c 	andi	r2,r2,4096
   46728:	10bfffcc 	andi	r2,r2,65535
   4672c:	10a0001c 	xori	r2,r2,32768
   46730:	8900030d 	sth	r4,12(r17)
   46734:	88c00015 	stw	r3,0(r17)
   46738:	10a00004 	addi	r2,r2,-32768
   4673c:	10002c1e 	bne	r2,zero,467f0 <_fflush_r+0x198>
   46740:	0005883a 	mov	r2,zero
   46744:	dfc00417 	ldw	ra,16(sp)
   46748:	dcc00317 	ldw	r19,12(sp)
   4674c:	dc800217 	ldw	r18,8(sp)
   46750:	dc400117 	ldw	r17,4(sp)
   46754:	dc000017 	ldw	r16,0(sp)
   46758:	dec00504 	addi	sp,sp,20
   4675c:	f800283a 	ret
   46760:	8c800417 	ldw	r18,16(r17)
   46764:	903ff626 	beq	r18,zero,46740 <_fflush_r+0xe8>
   46768:	8c000017 	ldw	r16,0(r17)
   4676c:	108000cc 	andi	r2,r2,3
   46770:	8c800015 	stw	r18,0(r17)
   46774:	84a1c83a 	sub	r16,r16,r18
   46778:	10001b1e 	bne	r2,zero,467e8 <_fflush_r+0x190>
   4677c:	88800517 	ldw	r2,20(r17)
   46780:	88800215 	stw	r2,8(r17)
   46784:	04000316 	blt	zero,r16,46794 <_fflush_r+0x13c>
   46788:	003fed06 	br	46740 <_fflush_r+0xe8>
   4678c:	90a5883a 	add	r18,r18,r2
   46790:	043feb0e 	bge	zero,r16,46740 <_fflush_r+0xe8>
   46794:	88800917 	ldw	r2,36(r17)
   46798:	89400717 	ldw	r5,28(r17)
   4679c:	800f883a 	mov	r7,r16
   467a0:	900d883a 	mov	r6,r18
   467a4:	9809883a 	mov	r4,r19
   467a8:	103ee83a 	callr	r2
   467ac:	80a1c83a 	sub	r16,r16,r2
   467b0:	00bff616 	blt	zero,r2,4678c <_fflush_r+0x134>
   467b4:	88c0030b 	ldhu	r3,12(r17)
   467b8:	00bfffc4 	movi	r2,-1
   467bc:	18c01014 	ori	r3,r3,64
   467c0:	88c0030d 	sth	r3,12(r17)
   467c4:	dfc00417 	ldw	ra,16(sp)
   467c8:	dcc00317 	ldw	r19,12(sp)
   467cc:	dc800217 	ldw	r18,8(sp)
   467d0:	dc400117 	ldw	r17,4(sp)
   467d4:	dc000017 	ldw	r16,0(sp)
   467d8:	dec00504 	addi	sp,sp,20
   467dc:	f800283a 	ret
   467e0:	00469140 	call	46914 <__sinit>
   467e4:	003fa706 	br	46684 <_fflush_r+0x2c>
   467e8:	0005883a 	mov	r2,zero
   467ec:	003fe406 	br	46780 <_fflush_r+0x128>
   467f0:	8c001415 	stw	r16,80(r17)
   467f4:	003fd206 	br	46740 <_fflush_r+0xe8>
   467f8:	88c00f17 	ldw	r3,60(r17)
   467fc:	00ffac16 	blt	zero,r3,466b0 <_fflush_r+0x58>
   46800:	003fcf06 	br	46740 <_fflush_r+0xe8>
   46804:	89400717 	ldw	r5,28(r17)
   46808:	9809883a 	mov	r4,r19
   4680c:	000d883a 	mov	r6,zero
   46810:	01c00044 	movi	r7,1
   46814:	183ee83a 	callr	r3
   46818:	1021883a 	mov	r16,r2
   4681c:	00bfffc4 	movi	r2,-1
   46820:	80800326 	beq	r16,r2,46830 <_fflush_r+0x1d8>
   46824:	8940030b 	ldhu	r5,12(r17)
   46828:	88c00a17 	ldw	r3,40(r17)
   4682c:	003fa806 	br	466d0 <_fflush_r+0x78>
   46830:	98c00017 	ldw	r3,0(r19)
   46834:	00800744 	movi	r2,29
   46838:	18bfde1e 	bne	r3,r2,467b4 <_fflush_r+0x15c>
   4683c:	003fc006 	br	46740 <_fflush_r+0xe8>

00046840 <fflush>:
   46840:	200b883a 	mov	r5,r4
   46844:	20000426 	beq	r4,zero,46858 <fflush+0x18>
   46848:	00800174 	movhi	r2,5
   4684c:	1080ad04 	addi	r2,r2,692
   46850:	11000017 	ldw	r4,0(r2)
   46854:	00466581 	jmpi	46658 <_fflush_r>
   46858:	00800174 	movhi	r2,5
   4685c:	1080ac04 	addi	r2,r2,688
   46860:	11000017 	ldw	r4,0(r2)
   46864:	01400134 	movhi	r5,4
   46868:	29599604 	addi	r5,r5,26200
   4686c:	004758c1 	jmpi	4758c <_fwalk_reent>

00046870 <__fp_lock>:
   46870:	0005883a 	mov	r2,zero
   46874:	f800283a 	ret

00046878 <__fp_unlock>:
   46878:	0005883a 	mov	r2,zero
   4687c:	f800283a 	ret

00046880 <_cleanup_r>:
   46880:	01400174 	movhi	r5,5
   46884:	29659604 	addi	r5,r5,-27048
   46888:	00474e41 	jmpi	474e4 <_fwalk>

0004688c <__sfmoreglue>:
   4688c:	defffc04 	addi	sp,sp,-16
   46890:	dc800215 	stw	r18,8(sp)
   46894:	2825883a 	mov	r18,r5
   46898:	dc000015 	stw	r16,0(sp)
   4689c:	01401704 	movi	r5,92
   468a0:	2021883a 	mov	r16,r4
   468a4:	9009883a 	mov	r4,r18
   468a8:	dfc00315 	stw	ra,12(sp)
   468ac:	dc400115 	stw	r17,4(sp)
   468b0:	00411f80 	call	411f8 <__mulsi3>
   468b4:	8009883a 	mov	r4,r16
   468b8:	11400304 	addi	r5,r2,12
   468bc:	1023883a 	mov	r17,r2
   468c0:	00420200 	call	42020 <_malloc_r>
   468c4:	1021883a 	mov	r16,r2
   468c8:	10000726 	beq	r2,zero,468e8 <__sfmoreglue+0x5c>
   468cc:	11000304 	addi	r4,r2,12
   468d0:	10000015 	stw	zero,0(r2)
   468d4:	14800115 	stw	r18,4(r2)
   468d8:	11000215 	stw	r4,8(r2)
   468dc:	000b883a 	mov	r5,zero
   468e0:	880d883a 	mov	r6,r17
   468e4:	0047bb40 	call	47bb4 <memset>
   468e8:	8005883a 	mov	r2,r16
   468ec:	dfc00317 	ldw	ra,12(sp)
   468f0:	dc800217 	ldw	r18,8(sp)
   468f4:	dc400117 	ldw	r17,4(sp)
   468f8:	dc000017 	ldw	r16,0(sp)
   468fc:	dec00404 	addi	sp,sp,16
   46900:	f800283a 	ret

00046904 <_cleanup>:
   46904:	00800174 	movhi	r2,5
   46908:	1080ac04 	addi	r2,r2,688
   4690c:	11000017 	ldw	r4,0(r2)
   46910:	00468801 	jmpi	46880 <_cleanup_r>

00046914 <__sinit>:
   46914:	20800e17 	ldw	r2,56(r4)
   46918:	1000401e 	bne	r2,zero,46a1c <__sinit+0x108>
   4691c:	21400117 	ldw	r5,4(r4)
   46920:	01800134 	movhi	r6,4
   46924:	319a2004 	addi	r6,r6,26752
   46928:	20c00217 	ldw	r3,8(r4)
   4692c:	21800f15 	stw	r6,60(r4)
   46930:	2080bb04 	addi	r2,r4,748
   46934:	02400044 	movi	r9,1
   46938:	018000c4 	movi	r6,3
   4693c:	2180b915 	stw	r6,740(r4)
   46940:	2080ba15 	stw	r2,744(r4)
   46944:	22400e15 	stw	r9,56(r4)
   46948:	20800317 	ldw	r2,12(r4)
   4694c:	2000b815 	stw	zero,736(r4)
   46950:	02000134 	movhi	r8,4
   46954:	420ac504 	addi	r8,r8,11028
   46958:	01c00134 	movhi	r7,4
   4695c:	39cada04 	addi	r7,r7,11112
   46960:	01800134 	movhi	r6,4
   46964:	318afc04 	addi	r6,r6,11248
   46968:	01000134 	movhi	r4,4
   4696c:	210b1304 	addi	r4,r4,11340
   46970:	02800104 	movi	r10,4
   46974:	28000015 	stw	zero,0(r5)
   46978:	28000115 	stw	zero,4(r5)
   4697c:	28000215 	stw	zero,8(r5)
   46980:	2a80030d 	sth	r10,12(r5)
   46984:	2800038d 	sth	zero,14(r5)
   46988:	28000415 	stw	zero,16(r5)
   4698c:	28000515 	stw	zero,20(r5)
   46990:	28000615 	stw	zero,24(r5)
   46994:	29400715 	stw	r5,28(r5)
   46998:	2a000815 	stw	r8,32(r5)
   4699c:	29c00915 	stw	r7,36(r5)
   469a0:	29800a15 	stw	r6,40(r5)
   469a4:	29000b15 	stw	r4,44(r5)
   469a8:	01400284 	movi	r5,10
   469ac:	18000015 	stw	zero,0(r3)
   469b0:	18000115 	stw	zero,4(r3)
   469b4:	18000215 	stw	zero,8(r3)
   469b8:	1940030d 	sth	r5,12(r3)
   469bc:	1a40038d 	sth	r9,14(r3)
   469c0:	18000415 	stw	zero,16(r3)
   469c4:	18000515 	stw	zero,20(r3)
   469c8:	18000615 	stw	zero,24(r3)
   469cc:	18c00715 	stw	r3,28(r3)
   469d0:	1a000815 	stw	r8,32(r3)
   469d4:	19c00915 	stw	r7,36(r3)
   469d8:	19800a15 	stw	r6,40(r3)
   469dc:	19000b15 	stw	r4,44(r3)
   469e0:	00c00484 	movi	r3,18
   469e4:	10c0030d 	sth	r3,12(r2)
   469e8:	00c00084 	movi	r3,2
   469ec:	10000015 	stw	zero,0(r2)
   469f0:	10000115 	stw	zero,4(r2)
   469f4:	10000215 	stw	zero,8(r2)
   469f8:	10c0038d 	sth	r3,14(r2)
   469fc:	10000415 	stw	zero,16(r2)
   46a00:	10000515 	stw	zero,20(r2)
   46a04:	10000615 	stw	zero,24(r2)
   46a08:	10800715 	stw	r2,28(r2)
   46a0c:	12000815 	stw	r8,32(r2)
   46a10:	11c00915 	stw	r7,36(r2)
   46a14:	11800a15 	stw	r6,40(r2)
   46a18:	11000b15 	stw	r4,44(r2)
   46a1c:	f800283a 	ret

00046a20 <__sfp>:
   46a20:	defffc04 	addi	sp,sp,-16
   46a24:	00800174 	movhi	r2,5
   46a28:	1080ac04 	addi	r2,r2,688
   46a2c:	dc400115 	stw	r17,4(sp)
   46a30:	14400017 	ldw	r17,0(r2)
   46a34:	dc800215 	stw	r18,8(sp)
   46a38:	dfc00315 	stw	ra,12(sp)
   46a3c:	88800e17 	ldw	r2,56(r17)
   46a40:	dc000015 	stw	r16,0(sp)
   46a44:	2025883a 	mov	r18,r4
   46a48:	10002826 	beq	r2,zero,46aec <__sfp+0xcc>
   46a4c:	8c40b804 	addi	r17,r17,736
   46a50:	043fffc4 	movi	r16,-1
   46a54:	89400117 	ldw	r5,4(r17)
   46a58:	88800217 	ldw	r2,8(r17)
   46a5c:	297fffc4 	addi	r5,r5,-1
   46a60:	28000a16 	blt	r5,zero,46a8c <__sfp+0x6c>
   46a64:	10c0030f 	ldh	r3,12(r2)
   46a68:	18000c26 	beq	r3,zero,46a9c <__sfp+0x7c>
   46a6c:	10c01a04 	addi	r3,r2,104
   46a70:	00000206 	br	46a7c <__sfp+0x5c>
   46a74:	19bfe90f 	ldh	r6,-92(r3)
   46a78:	30000826 	beq	r6,zero,46a9c <__sfp+0x7c>
   46a7c:	297fffc4 	addi	r5,r5,-1
   46a80:	18bffd04 	addi	r2,r3,-12
   46a84:	18c01704 	addi	r3,r3,92
   46a88:	2c3ffa1e 	bne	r5,r16,46a74 <__sfp+0x54>
   46a8c:	88800017 	ldw	r2,0(r17)
   46a90:	10001926 	beq	r2,zero,46af8 <__sfp+0xd8>
   46a94:	1023883a 	mov	r17,r2
   46a98:	003fee06 	br	46a54 <__sfp+0x34>
   46a9c:	00ffffc4 	movi	r3,-1
   46aa0:	10c0038d 	sth	r3,14(r2)
   46aa4:	00c00044 	movi	r3,1
   46aa8:	10c0030d 	sth	r3,12(r2)
   46aac:	10000015 	stw	zero,0(r2)
   46ab0:	10000215 	stw	zero,8(r2)
   46ab4:	10000115 	stw	zero,4(r2)
   46ab8:	10000415 	stw	zero,16(r2)
   46abc:	10000515 	stw	zero,20(r2)
   46ac0:	10000615 	stw	zero,24(r2)
   46ac4:	10000c15 	stw	zero,48(r2)
   46ac8:	10000d15 	stw	zero,52(r2)
   46acc:	10001115 	stw	zero,68(r2)
   46ad0:	10001215 	stw	zero,72(r2)
   46ad4:	dfc00317 	ldw	ra,12(sp)
   46ad8:	dc800217 	ldw	r18,8(sp)
   46adc:	dc400117 	ldw	r17,4(sp)
   46ae0:	dc000017 	ldw	r16,0(sp)
   46ae4:	dec00404 	addi	sp,sp,16
   46ae8:	f800283a 	ret
   46aec:	8809883a 	mov	r4,r17
   46af0:	00469140 	call	46914 <__sinit>
   46af4:	003fd506 	br	46a4c <__sfp+0x2c>
   46af8:	9009883a 	mov	r4,r18
   46afc:	01400104 	movi	r5,4
   46b00:	004688c0 	call	4688c <__sfmoreglue>
   46b04:	88800015 	stw	r2,0(r17)
   46b08:	103fe21e 	bne	r2,zero,46a94 <__sfp+0x74>
   46b0c:	00800304 	movi	r2,12
   46b10:	90800015 	stw	r2,0(r18)
   46b14:	0005883a 	mov	r2,zero
   46b18:	003fee06 	br	46ad4 <__sfp+0xb4>

00046b1c <__sfp_lock_acquire>:
   46b1c:	f800283a 	ret

00046b20 <__sfp_lock_release>:
   46b20:	f800283a 	ret

00046b24 <__sinit_lock_acquire>:
   46b24:	f800283a 	ret

00046b28 <__sinit_lock_release>:
   46b28:	f800283a 	ret

00046b2c <__fp_lock_all>:
   46b2c:	00800174 	movhi	r2,5
   46b30:	1080ad04 	addi	r2,r2,692
   46b34:	11000017 	ldw	r4,0(r2)
   46b38:	01400134 	movhi	r5,4
   46b3c:	295a1c04 	addi	r5,r5,26736
   46b40:	00474e41 	jmpi	474e4 <_fwalk>

00046b44 <__fp_unlock_all>:
   46b44:	00800174 	movhi	r2,5
   46b48:	1080ad04 	addi	r2,r2,692
   46b4c:	11000017 	ldw	r4,0(r2)
   46b50:	01400134 	movhi	r5,4
   46b54:	295a1e04 	addi	r5,r5,26744
   46b58:	00474e41 	jmpi	474e4 <_fwalk>

00046b5c <__sflags>:
   46b5c:	28800007 	ldb	r2,0(r5)
   46b60:	00c01c84 	movi	r3,114
   46b64:	10c01826 	beq	r2,r3,46bc8 <__sflags+0x6c>
   46b68:	00c01dc4 	movi	r3,119
   46b6c:	10c01226 	beq	r2,r3,46bb8 <__sflags+0x5c>
   46b70:	00c01844 	movi	r3,97
   46b74:	10c00426 	beq	r2,r3,46b88 <__sflags+0x2c>
   46b78:	00800584 	movi	r2,22
   46b7c:	20800015 	stw	r2,0(r4)
   46b80:	0005883a 	mov	r2,zero
   46b84:	f800283a 	ret
   46b88:	01c08204 	movi	r7,520
   46b8c:	01000044 	movi	r4,1
   46b90:	00804204 	movi	r2,264
   46b94:	28c00047 	ldb	r3,1(r5)
   46b98:	18000426 	beq	r3,zero,46bac <__sflags+0x50>
   46b9c:	02000ac4 	movi	r8,43
   46ba0:	1a000d26 	beq	r3,r8,46bd8 <__sflags+0x7c>
   46ba4:	28c00087 	ldb	r3,2(r5)
   46ba8:	1a000b26 	beq	r3,r8,46bd8 <__sflags+0x7c>
   46bac:	21c8b03a 	or	r4,r4,r7
   46bb0:	31000015 	stw	r4,0(r6)
   46bb4:	f800283a 	ret
   46bb8:	01c18004 	movi	r7,1536
   46bbc:	01000044 	movi	r4,1
   46bc0:	00800204 	movi	r2,8
   46bc4:	003ff306 	br	46b94 <__sflags+0x38>
   46bc8:	000f883a 	mov	r7,zero
   46bcc:	0009883a 	mov	r4,zero
   46bd0:	00800104 	movi	r2,4
   46bd4:	003fef06 	br	46b94 <__sflags+0x38>
   46bd8:	00fff8c4 	movi	r3,-29
   46bdc:	01000084 	movi	r4,2
   46be0:	10c4703a 	and	r2,r2,r3
   46be4:	21c8b03a 	or	r4,r4,r7
   46be8:	10800414 	ori	r2,r2,16
   46bec:	31000015 	stw	r4,0(r6)
   46bf0:	f800283a 	ret

00046bf4 <_malloc_trim_r>:
   46bf4:	defffb04 	addi	sp,sp,-20
   46bf8:	dcc00315 	stw	r19,12(sp)
   46bfc:	dc800215 	stw	r18,8(sp)
   46c00:	dc400115 	stw	r17,4(sp)
   46c04:	dc000015 	stw	r16,0(sp)
   46c08:	2827883a 	mov	r19,r5
   46c0c:	dfc00415 	stw	ra,16(sp)
   46c10:	04400174 	movhi	r17,5
   46c14:	8c7b1604 	addi	r17,r17,-5032
   46c18:	2021883a 	mov	r16,r4
   46c1c:	004b6280 	call	4b628 <__malloc_lock>
   46c20:	88800217 	ldw	r2,8(r17)
   46c24:	14800117 	ldw	r18,4(r2)
   46c28:	00bfff04 	movi	r2,-4
   46c2c:	90a4703a 	and	r18,r18,r2
   46c30:	9083fbc4 	addi	r2,r18,4079
   46c34:	14e7c83a 	sub	r19,r2,r19
   46c38:	9826d33a 	srli	r19,r19,12
   46c3c:	0083ffc4 	movi	r2,4095
   46c40:	9cffffc4 	addi	r19,r19,-1
   46c44:	9826933a 	slli	r19,r19,12
   46c48:	14c0060e 	bge	r2,r19,46c64 <_malloc_trim_r+0x70>
   46c4c:	8009883a 	mov	r4,r16
   46c50:	000b883a 	mov	r5,zero
   46c54:	0042ab00 	call	42ab0 <_sbrk_r>
   46c58:	88c00217 	ldw	r3,8(r17)
   46c5c:	1c87883a 	add	r3,r3,r18
   46c60:	10c00a26 	beq	r2,r3,46c8c <_malloc_trim_r+0x98>
   46c64:	8009883a 	mov	r4,r16
   46c68:	004b6480 	call	4b648 <__malloc_unlock>
   46c6c:	0005883a 	mov	r2,zero
   46c70:	dfc00417 	ldw	ra,16(sp)
   46c74:	dcc00317 	ldw	r19,12(sp)
   46c78:	dc800217 	ldw	r18,8(sp)
   46c7c:	dc400117 	ldw	r17,4(sp)
   46c80:	dc000017 	ldw	r16,0(sp)
   46c84:	dec00504 	addi	sp,sp,20
   46c88:	f800283a 	ret
   46c8c:	8009883a 	mov	r4,r16
   46c90:	04cbc83a 	sub	r5,zero,r19
   46c94:	0042ab00 	call	42ab0 <_sbrk_r>
   46c98:	00ffffc4 	movi	r3,-1
   46c9c:	10c01326 	beq	r2,r3,46cec <_malloc_trim_r+0xf8>
   46ca0:	00800174 	movhi	r2,5
   46ca4:	10879304 	addi	r2,r2,7756
   46ca8:	11000017 	ldw	r4,0(r2)
   46cac:	88c00217 	ldw	r3,8(r17)
   46cb0:	94e5c83a 	sub	r18,r18,r19
   46cb4:	94800054 	ori	r18,r18,1
   46cb8:	24e7c83a 	sub	r19,r4,r19
   46cbc:	1c800115 	stw	r18,4(r3)
   46cc0:	8009883a 	mov	r4,r16
   46cc4:	14c00015 	stw	r19,0(r2)
   46cc8:	004b6480 	call	4b648 <__malloc_unlock>
   46ccc:	00800044 	movi	r2,1
   46cd0:	dfc00417 	ldw	ra,16(sp)
   46cd4:	dcc00317 	ldw	r19,12(sp)
   46cd8:	dc800217 	ldw	r18,8(sp)
   46cdc:	dc400117 	ldw	r17,4(sp)
   46ce0:	dc000017 	ldw	r16,0(sp)
   46ce4:	dec00504 	addi	sp,sp,20
   46ce8:	f800283a 	ret
   46cec:	8009883a 	mov	r4,r16
   46cf0:	000b883a 	mov	r5,zero
   46cf4:	0042ab00 	call	42ab0 <_sbrk_r>
   46cf8:	88c00217 	ldw	r3,8(r17)
   46cfc:	014003c4 	movi	r5,15
   46d00:	10c9c83a 	sub	r4,r2,r3
   46d04:	293fd70e 	bge	r5,r4,46c64 <_malloc_trim_r+0x70>
   46d08:	01400174 	movhi	r5,5
   46d0c:	2940ae04 	addi	r5,r5,696
   46d10:	29400017 	ldw	r5,0(r5)
   46d14:	21000054 	ori	r4,r4,1
   46d18:	19000115 	stw	r4,4(r3)
   46d1c:	1145c83a 	sub	r2,r2,r5
   46d20:	01400174 	movhi	r5,5
   46d24:	29479304 	addi	r5,r5,7756
   46d28:	28800015 	stw	r2,0(r5)
   46d2c:	003fcd06 	br	46c64 <_malloc_trim_r+0x70>

00046d30 <_free_r>:
   46d30:	defffd04 	addi	sp,sp,-12
   46d34:	dc400115 	stw	r17,4(sp)
   46d38:	dc000015 	stw	r16,0(sp)
   46d3c:	dfc00215 	stw	ra,8(sp)
   46d40:	2821883a 	mov	r16,r5
   46d44:	2023883a 	mov	r17,r4
   46d48:	28004b26 	beq	r5,zero,46e78 <_free_r+0x148>
   46d4c:	004b6280 	call	4b628 <__malloc_lock>
   46d50:	823fff17 	ldw	r8,-4(r16)
   46d54:	00bfff84 	movi	r2,-2
   46d58:	81bffe04 	addi	r6,r16,-8
   46d5c:	4084703a 	and	r2,r8,r2
   46d60:	3087883a 	add	r3,r6,r2
   46d64:	01400174 	movhi	r5,5
   46d68:	297b1604 	addi	r5,r5,-5032
   46d6c:	1a400117 	ldw	r9,4(r3)
   46d70:	29000217 	ldw	r4,8(r5)
   46d74:	01ffff04 	movi	r7,-4
   46d78:	49ce703a 	and	r7,r9,r7
   46d7c:	20c06526 	beq	r4,r3,46f14 <_free_r+0x1e4>
   46d80:	19c00115 	stw	r7,4(r3)
   46d84:	4200004c 	andi	r8,r8,1
   46d88:	40003026 	beq	r8,zero,46e4c <_free_r+0x11c>
   46d8c:	0009883a 	mov	r4,zero
   46d90:	19d1883a 	add	r8,r3,r7
   46d94:	42000117 	ldw	r8,4(r8)
   46d98:	4200004c 	andi	r8,r8,1
   46d9c:	4000061e 	bne	r8,zero,46db8 <_free_r+0x88>
   46da0:	11c5883a 	add	r2,r2,r7
   46da4:	19c00217 	ldw	r7,8(r3)
   46da8:	20004e26 	beq	r4,zero,46ee4 <_free_r+0x1b4>
   46dac:	18c00317 	ldw	r3,12(r3)
   46db0:	38c00315 	stw	r3,12(r7)
   46db4:	19c00215 	stw	r7,8(r3)
   46db8:	11c00054 	ori	r7,r2,1
   46dbc:	3087883a 	add	r3,r6,r2
   46dc0:	31c00115 	stw	r7,4(r6)
   46dc4:	18800015 	stw	r2,0(r3)
   46dc8:	20001a1e 	bne	r4,zero,46e34 <_free_r+0x104>
   46dcc:	00c07fc4 	movi	r3,511
   46dd0:	18802e2e 	bgeu	r3,r2,46e8c <_free_r+0x15c>
   46dd4:	1006d27a 	srli	r3,r2,9
   46dd8:	01000104 	movi	r4,4
   46ddc:	20c06636 	bltu	r4,r3,46f78 <_free_r+0x248>
   46de0:	1008d1ba 	srli	r4,r2,6
   46de4:	21000e04 	addi	r4,r4,56
   46de8:	210f883a 	add	r7,r4,r4
   46dec:	39cf883a 	add	r7,r7,r7
   46df0:	39cf883a 	add	r7,r7,r7
   46df4:	29cf883a 	add	r7,r5,r7
   46df8:	38c00217 	ldw	r3,8(r7)
   46dfc:	01400174 	movhi	r5,5
   46e00:	297b1604 	addi	r5,r5,-5032
   46e04:	19c06126 	beq	r3,r7,46f8c <_free_r+0x25c>
   46e08:	013fff04 	movi	r4,-4
   46e0c:	19400117 	ldw	r5,4(r3)
   46e10:	290a703a 	and	r5,r5,r4
   46e14:	1140022e 	bgeu	r2,r5,46e20 <_free_r+0xf0>
   46e18:	18c00217 	ldw	r3,8(r3)
   46e1c:	38fffb1e 	bne	r7,r3,46e0c <_free_r+0xdc>
   46e20:	18800317 	ldw	r2,12(r3)
   46e24:	30800315 	stw	r2,12(r6)
   46e28:	30c00215 	stw	r3,8(r6)
   46e2c:	11800215 	stw	r6,8(r2)
   46e30:	19800315 	stw	r6,12(r3)
   46e34:	8809883a 	mov	r4,r17
   46e38:	dfc00217 	ldw	ra,8(sp)
   46e3c:	dc400117 	ldw	r17,4(sp)
   46e40:	dc000017 	ldw	r16,0(sp)
   46e44:	dec00304 	addi	sp,sp,12
   46e48:	004b6481 	jmpi	4b648 <__malloc_unlock>
   46e4c:	813ffe17 	ldw	r4,-8(r16)
   46e50:	2a400204 	addi	r9,r5,8
   46e54:	310dc83a 	sub	r6,r6,r4
   46e58:	32000217 	ldw	r8,8(r6)
   46e5c:	1105883a 	add	r2,r2,r4
   46e60:	42404326 	beq	r8,r9,46f70 <_free_r+0x240>
   46e64:	32400317 	ldw	r9,12(r6)
   46e68:	0009883a 	mov	r4,zero
   46e6c:	42400315 	stw	r9,12(r8)
   46e70:	4a000215 	stw	r8,8(r9)
   46e74:	003fc606 	br	46d90 <_free_r+0x60>
   46e78:	dfc00217 	ldw	ra,8(sp)
   46e7c:	dc400117 	ldw	r17,4(sp)
   46e80:	dc000017 	ldw	r16,0(sp)
   46e84:	dec00304 	addi	sp,sp,12
   46e88:	f800283a 	ret
   46e8c:	1004d0fa 	srli	r2,r2,3
   46e90:	02000044 	movi	r8,1
   46e94:	29c00117 	ldw	r7,4(r5)
   46e98:	1087883a 	add	r3,r2,r2
   46e9c:	18c7883a 	add	r3,r3,r3
   46ea0:	1005d0ba 	srai	r2,r2,2
   46ea4:	18c7883a 	add	r3,r3,r3
   46ea8:	28c7883a 	add	r3,r5,r3
   46eac:	19000217 	ldw	r4,8(r3)
   46eb0:	4084983a 	sll	r2,r8,r2
   46eb4:	30c00315 	stw	r3,12(r6)
   46eb8:	31000215 	stw	r4,8(r6)
   46ebc:	11c4b03a 	or	r2,r2,r7
   46ec0:	21800315 	stw	r6,12(r4)
   46ec4:	8809883a 	mov	r4,r17
   46ec8:	28800115 	stw	r2,4(r5)
   46ecc:	19800215 	stw	r6,8(r3)
   46ed0:	dfc00217 	ldw	ra,8(sp)
   46ed4:	dc400117 	ldw	r17,4(sp)
   46ed8:	dc000017 	ldw	r16,0(sp)
   46edc:	dec00304 	addi	sp,sp,12
   46ee0:	004b6481 	jmpi	4b648 <__malloc_unlock>
   46ee4:	02000174 	movhi	r8,5
   46ee8:	423b1804 	addi	r8,r8,-5024
   46eec:	3a3faf1e 	bne	r7,r8,46dac <_free_r+0x7c>
   46ef0:	29800515 	stw	r6,20(r5)
   46ef4:	29800415 	stw	r6,16(r5)
   46ef8:	11000054 	ori	r4,r2,1
   46efc:	3087883a 	add	r3,r6,r2
   46f00:	31c00315 	stw	r7,12(r6)
   46f04:	31c00215 	stw	r7,8(r6)
   46f08:	31000115 	stw	r4,4(r6)
   46f0c:	18800015 	stw	r2,0(r3)
   46f10:	003fc806 	br	46e34 <_free_r+0x104>
   46f14:	4200004c 	andi	r8,r8,1
   46f18:	3885883a 	add	r2,r7,r2
   46f1c:	4000071e 	bne	r8,zero,46f3c <_free_r+0x20c>
   46f20:	81fffe17 	ldw	r7,-8(r16)
   46f24:	31cdc83a 	sub	r6,r6,r7
   46f28:	30c00317 	ldw	r3,12(r6)
   46f2c:	31000217 	ldw	r4,8(r6)
   46f30:	11c5883a 	add	r2,r2,r7
   46f34:	20c00315 	stw	r3,12(r4)
   46f38:	19000215 	stw	r4,8(r3)
   46f3c:	00c00174 	movhi	r3,5
   46f40:	18c0af04 	addi	r3,r3,700
   46f44:	18c00017 	ldw	r3,0(r3)
   46f48:	11000054 	ori	r4,r2,1
   46f4c:	31000115 	stw	r4,4(r6)
   46f50:	29800215 	stw	r6,8(r5)
   46f54:	10ffb736 	bltu	r2,r3,46e34 <_free_r+0x104>
   46f58:	00800174 	movhi	r2,5
   46f5c:	10878904 	addi	r2,r2,7716
   46f60:	11400017 	ldw	r5,0(r2)
   46f64:	8809883a 	mov	r4,r17
   46f68:	0046bf40 	call	46bf4 <_malloc_trim_r>
   46f6c:	003fb106 	br	46e34 <_free_r+0x104>
   46f70:	01000044 	movi	r4,1
   46f74:	003f8606 	br	46d90 <_free_r+0x60>
   46f78:	01000504 	movi	r4,20
   46f7c:	20c00b36 	bltu	r4,r3,46fac <_free_r+0x27c>
   46f80:	190016c4 	addi	r4,r3,91
   46f84:	210f883a 	add	r7,r4,r4
   46f88:	003f9806 	br	46dec <_free_r+0xbc>
   46f8c:	2009d0ba 	srai	r4,r4,2
   46f90:	00800044 	movi	r2,1
   46f94:	29c00117 	ldw	r7,4(r5)
   46f98:	1108983a 	sll	r4,r2,r4
   46f9c:	1805883a 	mov	r2,r3
   46fa0:	21c8b03a 	or	r4,r4,r7
   46fa4:	29000115 	stw	r4,4(r5)
   46fa8:	003f9e06 	br	46e24 <_free_r+0xf4>
   46fac:	01001504 	movi	r4,84
   46fb0:	20c00436 	bltu	r4,r3,46fc4 <_free_r+0x294>
   46fb4:	1008d33a 	srli	r4,r2,12
   46fb8:	21001b84 	addi	r4,r4,110
   46fbc:	210f883a 	add	r7,r4,r4
   46fc0:	003f8a06 	br	46dec <_free_r+0xbc>
   46fc4:	01005504 	movi	r4,340
   46fc8:	20c00436 	bltu	r4,r3,46fdc <_free_r+0x2ac>
   46fcc:	1008d3fa 	srli	r4,r2,15
   46fd0:	21001dc4 	addi	r4,r4,119
   46fd4:	210f883a 	add	r7,r4,r4
   46fd8:	003f8406 	br	46dec <_free_r+0xbc>
   46fdc:	01015504 	movi	r4,1364
   46fe0:	20c00436 	bltu	r4,r3,46ff4 <_free_r+0x2c4>
   46fe4:	1008d4ba 	srli	r4,r2,18
   46fe8:	21001f04 	addi	r4,r4,124
   46fec:	210f883a 	add	r7,r4,r4
   46ff0:	003f7e06 	br	46dec <_free_r+0xbc>
   46ff4:	01c03f04 	movi	r7,252
   46ff8:	01001f84 	movi	r4,126
   46ffc:	003f7b06 	br	46dec <_free_r+0xbc>

00047000 <__sfvwrite_r>:
   47000:	30800217 	ldw	r2,8(r6)
   47004:	defff504 	addi	sp,sp,-44
   47008:	dd400615 	stw	r21,24(sp)
   4700c:	dd000515 	stw	r20,20(sp)
   47010:	dc000115 	stw	r16,4(sp)
   47014:	dfc00a15 	stw	ra,40(sp)
   47018:	df000915 	stw	fp,36(sp)
   4701c:	ddc00815 	stw	r23,32(sp)
   47020:	dd800715 	stw	r22,28(sp)
   47024:	dcc00415 	stw	r19,16(sp)
   47028:	dc800315 	stw	r18,12(sp)
   4702c:	dc400215 	stw	r17,8(sp)
   47030:	3029883a 	mov	r20,r6
   47034:	202b883a 	mov	r21,r4
   47038:	2821883a 	mov	r16,r5
   4703c:	10002126 	beq	r2,zero,470c4 <__sfvwrite_r+0xc4>
   47040:	2880030b 	ldhu	r2,12(r5)
   47044:	10c0020c 	andi	r3,r2,8
   47048:	18ffffcc 	andi	r3,r3,65535
   4704c:	18e0001c 	xori	r3,r3,32768
   47050:	18e00004 	addi	r3,r3,-32768
   47054:	18002826 	beq	r3,zero,470f8 <__sfvwrite_r+0xf8>
   47058:	28c00417 	ldw	r3,16(r5)
   4705c:	18002626 	beq	r3,zero,470f8 <__sfvwrite_r+0xf8>
   47060:	10c0008c 	andi	r3,r2,2
   47064:	18ffffcc 	andi	r3,r3,65535
   47068:	18e0001c 	xori	r3,r3,32768
   4706c:	18e00004 	addi	r3,r3,-32768
   47070:	a4400017 	ldw	r17,0(r20)
   47074:	18002b26 	beq	r3,zero,47124 <__sfvwrite_r+0x124>
   47078:	0027883a 	mov	r19,zero
   4707c:	0025883a 	mov	r18,zero
   47080:	05810004 	movi	r22,1024
   47084:	980d883a 	mov	r6,r19
   47088:	a809883a 	mov	r4,r21
   4708c:	90004f26 	beq	r18,zero,471cc <__sfvwrite_r+0x1cc>
   47090:	900f883a 	mov	r7,r18
   47094:	81400717 	ldw	r5,28(r16)
   47098:	b480012e 	bgeu	r22,r18,470a0 <__sfvwrite_r+0xa0>
   4709c:	01c10004 	movi	r7,1024
   470a0:	80800917 	ldw	r2,36(r16)
   470a4:	103ee83a 	callr	r2
   470a8:	0080540e 	bge	zero,r2,471fc <__sfvwrite_r+0x1fc>
   470ac:	a0c00217 	ldw	r3,8(r20)
   470b0:	98a7883a 	add	r19,r19,r2
   470b4:	90a5c83a 	sub	r18,r18,r2
   470b8:	1885c83a 	sub	r2,r3,r2
   470bc:	a0800215 	stw	r2,8(r20)
   470c0:	103ff01e 	bne	r2,zero,47084 <__sfvwrite_r+0x84>
   470c4:	0005883a 	mov	r2,zero
   470c8:	dfc00a17 	ldw	ra,40(sp)
   470cc:	df000917 	ldw	fp,36(sp)
   470d0:	ddc00817 	ldw	r23,32(sp)
   470d4:	dd800717 	ldw	r22,28(sp)
   470d8:	dd400617 	ldw	r21,24(sp)
   470dc:	dd000517 	ldw	r20,20(sp)
   470e0:	dcc00417 	ldw	r19,16(sp)
   470e4:	dc800317 	ldw	r18,12(sp)
   470e8:	dc400217 	ldw	r17,8(sp)
   470ec:	dc000117 	ldw	r16,4(sp)
   470f0:	dec00b04 	addi	sp,sp,44
   470f4:	f800283a 	ret
   470f8:	a809883a 	mov	r4,r21
   470fc:	800b883a 	mov	r5,r16
   47100:	0044c280 	call	44c28 <__swsetup_r>
   47104:	1000f01e 	bne	r2,zero,474c8 <__sfvwrite_r+0x4c8>
   47108:	8080030b 	ldhu	r2,12(r16)
   4710c:	a4400017 	ldw	r17,0(r20)
   47110:	10c0008c 	andi	r3,r2,2
   47114:	18ffffcc 	andi	r3,r3,65535
   47118:	18e0001c 	xori	r3,r3,32768
   4711c:	18e00004 	addi	r3,r3,-32768
   47120:	183fd51e 	bne	r3,zero,47078 <__sfvwrite_r+0x78>
   47124:	10c0004c 	andi	r3,r2,1
   47128:	002d883a 	mov	r22,zero
   4712c:	1800381e 	bne	r3,zero,47210 <__sfvwrite_r+0x210>
   47130:	0025883a 	mov	r18,zero
   47134:	90002126 	beq	r18,zero,471bc <__sfvwrite_r+0x1bc>
   47138:	10c0800c 	andi	r3,r2,512
   4713c:	18ffffcc 	andi	r3,r3,65535
   47140:	18e0001c 	xori	r3,r3,32768
   47144:	18e00004 	addi	r3,r3,-32768
   47148:	84c00217 	ldw	r19,8(r16)
   4714c:	18006b26 	beq	r3,zero,472fc <__sfvwrite_r+0x2fc>
   47150:	980f883a 	mov	r7,r19
   47154:	94c08636 	bltu	r18,r19,47370 <__sfvwrite_r+0x370>
   47158:	10c1200c 	andi	r3,r2,1152
   4715c:	18009f1e 	bne	r3,zero,473dc <__sfvwrite_r+0x3dc>
   47160:	81000017 	ldw	r4,0(r16)
   47164:	982f883a 	mov	r23,r19
   47168:	9039883a 	mov	fp,r18
   4716c:	9027883a 	mov	r19,r18
   47170:	380d883a 	mov	r6,r7
   47174:	b00b883a 	mov	r5,r22
   47178:	d9c00015 	stw	r7,0(sp)
   4717c:	0047a280 	call	47a28 <memmove>
   47180:	d9c00017 	ldw	r7,0(sp)
   47184:	81000217 	ldw	r4,8(r16)
   47188:	80800017 	ldw	r2,0(r16)
   4718c:	25efc83a 	sub	r23,r4,r23
   47190:	11cf883a 	add	r7,r2,r7
   47194:	85c00215 	stw	r23,8(r16)
   47198:	81c00015 	stw	r7,0(r16)
   4719c:	a0800217 	ldw	r2,8(r20)
   471a0:	b72d883a 	add	r22,r22,fp
   471a4:	9725c83a 	sub	r18,r18,fp
   471a8:	14e7c83a 	sub	r19,r2,r19
   471ac:	a4c00215 	stw	r19,8(r20)
   471b0:	983fc426 	beq	r19,zero,470c4 <__sfvwrite_r+0xc4>
   471b4:	8080030b 	ldhu	r2,12(r16)
   471b8:	903fdf1e 	bne	r18,zero,47138 <__sfvwrite_r+0x138>
   471bc:	8d800017 	ldw	r22,0(r17)
   471c0:	8c800117 	ldw	r18,4(r17)
   471c4:	8c400204 	addi	r17,r17,8
   471c8:	003fda06 	br	47134 <__sfvwrite_r+0x134>
   471cc:	8cc00017 	ldw	r19,0(r17)
   471d0:	8c800117 	ldw	r18,4(r17)
   471d4:	8c400204 	addi	r17,r17,8
   471d8:	003faa06 	br	47084 <__sfvwrite_r+0x84>
   471dc:	0048d4c0 	call	48d4c <_realloc_r>
   471e0:	102f883a 	mov	r23,r2
   471e4:	10009f1e 	bne	r2,zero,47464 <__sfvwrite_r+0x464>
   471e8:	81400417 	ldw	r5,16(r16)
   471ec:	a809883a 	mov	r4,r21
   471f0:	0046d300 	call	46d30 <_free_r>
   471f4:	00800304 	movi	r2,12
   471f8:	a8800015 	stw	r2,0(r21)
   471fc:	80c0030b 	ldhu	r3,12(r16)
   47200:	00bfffc4 	movi	r2,-1
   47204:	18c01014 	ori	r3,r3,64
   47208:	80c0030d 	sth	r3,12(r16)
   4720c:	003fae06 	br	470c8 <__sfvwrite_r+0xc8>
   47210:	0007883a 	mov	r3,zero
   47214:	0039883a 	mov	fp,zero
   47218:	0025883a 	mov	r18,zero
   4721c:	90001e26 	beq	r18,zero,47298 <__sfvwrite_r+0x298>
   47220:	18006526 	beq	r3,zero,473b8 <__sfvwrite_r+0x3b8>
   47224:	b02f883a 	mov	r23,r22
   47228:	9580012e 	bgeu	r18,r22,47230 <__sfvwrite_r+0x230>
   4722c:	902f883a 	mov	r23,r18
   47230:	81000017 	ldw	r4,0(r16)
   47234:	80800417 	ldw	r2,16(r16)
   47238:	84c00217 	ldw	r19,8(r16)
   4723c:	81c00517 	ldw	r7,20(r16)
   47240:	1100022e 	bgeu	r2,r4,4724c <__sfvwrite_r+0x24c>
   47244:	99e7883a 	add	r19,r19,r7
   47248:	9dc01816 	blt	r19,r23,472ac <__sfvwrite_r+0x2ac>
   4724c:	b9c03b16 	blt	r23,r7,4733c <__sfvwrite_r+0x33c>
   47250:	80800917 	ldw	r2,36(r16)
   47254:	81400717 	ldw	r5,28(r16)
   47258:	a809883a 	mov	r4,r21
   4725c:	d8c00015 	stw	r3,0(sp)
   47260:	e00d883a 	mov	r6,fp
   47264:	103ee83a 	callr	r2
   47268:	1027883a 	mov	r19,r2
   4726c:	d8c00017 	ldw	r3,0(sp)
   47270:	00bfe20e 	bge	zero,r2,471fc <__sfvwrite_r+0x1fc>
   47274:	b4edc83a 	sub	r22,r22,r19
   47278:	b0001a26 	beq	r22,zero,472e4 <__sfvwrite_r+0x2e4>
   4727c:	a0800217 	ldw	r2,8(r20)
   47280:	e4f9883a 	add	fp,fp,r19
   47284:	94e5c83a 	sub	r18,r18,r19
   47288:	14e7c83a 	sub	r19,r2,r19
   4728c:	a4c00215 	stw	r19,8(r20)
   47290:	983f8c26 	beq	r19,zero,470c4 <__sfvwrite_r+0xc4>
   47294:	903fe21e 	bne	r18,zero,47220 <__sfvwrite_r+0x220>
   47298:	8f000017 	ldw	fp,0(r17)
   4729c:	8c800117 	ldw	r18,4(r17)
   472a0:	0007883a 	mov	r3,zero
   472a4:	8c400204 	addi	r17,r17,8
   472a8:	003fdc06 	br	4721c <__sfvwrite_r+0x21c>
   472ac:	e00b883a 	mov	r5,fp
   472b0:	980d883a 	mov	r6,r19
   472b4:	d8c00015 	stw	r3,0(sp)
   472b8:	0047a280 	call	47a28 <memmove>
   472bc:	80800017 	ldw	r2,0(r16)
   472c0:	a809883a 	mov	r4,r21
   472c4:	800b883a 	mov	r5,r16
   472c8:	14c5883a 	add	r2,r2,r19
   472cc:	80800015 	stw	r2,0(r16)
   472d0:	00466580 	call	46658 <_fflush_r>
   472d4:	d8c00017 	ldw	r3,0(sp)
   472d8:	103fc81e 	bne	r2,zero,471fc <__sfvwrite_r+0x1fc>
   472dc:	b4edc83a 	sub	r22,r22,r19
   472e0:	b03fe61e 	bne	r22,zero,4727c <__sfvwrite_r+0x27c>
   472e4:	a809883a 	mov	r4,r21
   472e8:	800b883a 	mov	r5,r16
   472ec:	00466580 	call	46658 <_fflush_r>
   472f0:	103fc21e 	bne	r2,zero,471fc <__sfvwrite_r+0x1fc>
   472f4:	0007883a 	mov	r3,zero
   472f8:	003fe006 	br	4727c <__sfvwrite_r+0x27c>
   472fc:	81000017 	ldw	r4,0(r16)
   47300:	80800417 	ldw	r2,16(r16)
   47304:	1100022e 	bgeu	r2,r4,47310 <__sfvwrite_r+0x310>
   47308:	9839883a 	mov	fp,r19
   4730c:	9c806036 	bltu	r19,r18,47490 <__sfvwrite_r+0x490>
   47310:	81c00517 	ldw	r7,20(r16)
   47314:	91c01c36 	bltu	r18,r7,47388 <__sfvwrite_r+0x388>
   47318:	80800917 	ldw	r2,36(r16)
   4731c:	81400717 	ldw	r5,28(r16)
   47320:	a809883a 	mov	r4,r21
   47324:	b00d883a 	mov	r6,r22
   47328:	103ee83a 	callr	r2
   4732c:	1027883a 	mov	r19,r2
   47330:	00bfb20e 	bge	zero,r2,471fc <__sfvwrite_r+0x1fc>
   47334:	1039883a 	mov	fp,r2
   47338:	003f9806 	br	4719c <__sfvwrite_r+0x19c>
   4733c:	b80d883a 	mov	r6,r23
   47340:	e00b883a 	mov	r5,fp
   47344:	d8c00015 	stw	r3,0(sp)
   47348:	0047a280 	call	47a28 <memmove>
   4734c:	80800217 	ldw	r2,8(r16)
   47350:	81000017 	ldw	r4,0(r16)
   47354:	b827883a 	mov	r19,r23
   47358:	15c5c83a 	sub	r2,r2,r23
   4735c:	25ef883a 	add	r23,r4,r23
   47360:	80800215 	stw	r2,8(r16)
   47364:	85c00015 	stw	r23,0(r16)
   47368:	d8c00017 	ldw	r3,0(sp)
   4736c:	003fc106 	br	47274 <__sfvwrite_r+0x274>
   47370:	81000017 	ldw	r4,0(r16)
   47374:	902f883a 	mov	r23,r18
   47378:	9039883a 	mov	fp,r18
   4737c:	9027883a 	mov	r19,r18
   47380:	900f883a 	mov	r7,r18
   47384:	003f7a06 	br	47170 <__sfvwrite_r+0x170>
   47388:	b00b883a 	mov	r5,r22
   4738c:	900d883a 	mov	r6,r18
   47390:	0047a280 	call	47a28 <memmove>
   47394:	80c00217 	ldw	r3,8(r16)
   47398:	80800017 	ldw	r2,0(r16)
   4739c:	9027883a 	mov	r19,r18
   473a0:	1c87c83a 	sub	r3,r3,r18
   473a4:	1485883a 	add	r2,r2,r18
   473a8:	80c00215 	stw	r3,8(r16)
   473ac:	80800015 	stw	r2,0(r16)
   473b0:	9039883a 	mov	fp,r18
   473b4:	003f7906 	br	4719c <__sfvwrite_r+0x19c>
   473b8:	e009883a 	mov	r4,fp
   473bc:	01400284 	movi	r5,10
   473c0:	900d883a 	mov	r6,r18
   473c4:	00477f00 	call	477f0 <memchr>
   473c8:	10003c26 	beq	r2,zero,474bc <__sfvwrite_r+0x4bc>
   473cc:	15800044 	addi	r22,r2,1
   473d0:	b72dc83a 	sub	r22,r22,fp
   473d4:	00c00044 	movi	r3,1
   473d8:	003f9206 	br	47224 <__sfvwrite_r+0x224>
   473dc:	81000517 	ldw	r4,20(r16)
   473e0:	81400417 	ldw	r5,16(r16)
   473e4:	80c00017 	ldw	r3,0(r16)
   473e8:	210d883a 	add	r6,r4,r4
   473ec:	3109883a 	add	r4,r6,r4
   473f0:	2026d7fa 	srli	r19,r4,31
   473f4:	1979c83a 	sub	fp,r3,r5
   473f8:	e1800044 	addi	r6,fp,1
   473fc:	9909883a 	add	r4,r19,r4
   47400:	2027d07a 	srai	r19,r4,1
   47404:	3489883a 	add	r4,r6,r18
   47408:	980d883a 	mov	r6,r19
   4740c:	9900022e 	bgeu	r19,r4,47418 <__sfvwrite_r+0x418>
   47410:	2027883a 	mov	r19,r4
   47414:	200d883a 	mov	r6,r4
   47418:	1081000c 	andi	r2,r2,1024
   4741c:	10bfffcc 	andi	r2,r2,65535
   47420:	10a0001c 	xori	r2,r2,32768
   47424:	10a00004 	addi	r2,r2,-32768
   47428:	a809883a 	mov	r4,r21
   4742c:	103f6b26 	beq	r2,zero,471dc <__sfvwrite_r+0x1dc>
   47430:	300b883a 	mov	r5,r6
   47434:	00420200 	call	42020 <_malloc_r>
   47438:	102f883a 	mov	r23,r2
   4743c:	103f6d26 	beq	r2,zero,471f4 <__sfvwrite_r+0x1f4>
   47440:	81400417 	ldw	r5,16(r16)
   47444:	1009883a 	mov	r4,r2
   47448:	e00d883a 	mov	r6,fp
   4744c:	00478e80 	call	478e8 <memcpy>
   47450:	8080030b 	ldhu	r2,12(r16)
   47454:	00fedfc4 	movi	r3,-1153
   47458:	10c4703a 	and	r2,r2,r3
   4745c:	10802014 	ori	r2,r2,128
   47460:	8080030d 	sth	r2,12(r16)
   47464:	bf09883a 	add	r4,r23,fp
   47468:	9f07c83a 	sub	r3,r19,fp
   4746c:	85c00415 	stw	r23,16(r16)
   47470:	84c00515 	stw	r19,20(r16)
   47474:	81000015 	stw	r4,0(r16)
   47478:	902f883a 	mov	r23,r18
   4747c:	80c00215 	stw	r3,8(r16)
   47480:	9039883a 	mov	fp,r18
   47484:	9027883a 	mov	r19,r18
   47488:	900f883a 	mov	r7,r18
   4748c:	003f3806 	br	47170 <__sfvwrite_r+0x170>
   47490:	b00b883a 	mov	r5,r22
   47494:	980d883a 	mov	r6,r19
   47498:	0047a280 	call	47a28 <memmove>
   4749c:	80800017 	ldw	r2,0(r16)
   474a0:	a809883a 	mov	r4,r21
   474a4:	800b883a 	mov	r5,r16
   474a8:	14c5883a 	add	r2,r2,r19
   474ac:	80800015 	stw	r2,0(r16)
   474b0:	00466580 	call	46658 <_fflush_r>
   474b4:	103f3926 	beq	r2,zero,4719c <__sfvwrite_r+0x19c>
   474b8:	003f5006 	br	471fc <__sfvwrite_r+0x1fc>
   474bc:	95800044 	addi	r22,r18,1
   474c0:	00c00044 	movi	r3,1
   474c4:	003f5706 	br	47224 <__sfvwrite_r+0x224>
   474c8:	80c0030b 	ldhu	r3,12(r16)
   474cc:	00bfffc4 	movi	r2,-1
   474d0:	18c01014 	ori	r3,r3,64
   474d4:	80c0030d 	sth	r3,12(r16)
   474d8:	00c00244 	movi	r3,9
   474dc:	a8c00015 	stw	r3,0(r21)
   474e0:	003ef906 	br	470c8 <__sfvwrite_r+0xc8>

000474e4 <_fwalk>:
   474e4:	defff904 	addi	sp,sp,-28
   474e8:	dcc00315 	stw	r19,12(sp)
   474ec:	24c0b804 	addi	r19,r4,736
   474f0:	dd400515 	stw	r21,20(sp)
   474f4:	dd000415 	stw	r20,16(sp)
   474f8:	dfc00615 	stw	ra,24(sp)
   474fc:	dc800215 	stw	r18,8(sp)
   47500:	dc400115 	stw	r17,4(sp)
   47504:	dc000015 	stw	r16,0(sp)
   47508:	282b883a 	mov	r21,r5
   4750c:	0029883a 	mov	r20,zero
   47510:	0046b1c0 	call	46b1c <__sfp_lock_acquire>
   47514:	98001226 	beq	r19,zero,47560 <_fwalk+0x7c>
   47518:	04bfffc4 	movi	r18,-1
   4751c:	9c400117 	ldw	r17,4(r19)
   47520:	9c000217 	ldw	r16,8(r19)
   47524:	8c7fffc4 	addi	r17,r17,-1
   47528:	88000b16 	blt	r17,zero,47558 <_fwalk+0x74>
   4752c:	84000304 	addi	r16,r16,12
   47530:	80c0000f 	ldh	r3,0(r16)
   47534:	8c7fffc4 	addi	r17,r17,-1
   47538:	813ffd04 	addi	r4,r16,-12
   4753c:	18000426 	beq	r3,zero,47550 <_fwalk+0x6c>
   47540:	80c0008f 	ldh	r3,2(r16)
   47544:	1c800226 	beq	r3,r18,47550 <_fwalk+0x6c>
   47548:	a83ee83a 	callr	r21
   4754c:	a0a8b03a 	or	r20,r20,r2
   47550:	84001704 	addi	r16,r16,92
   47554:	8cbff61e 	bne	r17,r18,47530 <_fwalk+0x4c>
   47558:	9cc00017 	ldw	r19,0(r19)
   4755c:	983fef1e 	bne	r19,zero,4751c <_fwalk+0x38>
   47560:	0046b200 	call	46b20 <__sfp_lock_release>
   47564:	a005883a 	mov	r2,r20
   47568:	dfc00617 	ldw	ra,24(sp)
   4756c:	dd400517 	ldw	r21,20(sp)
   47570:	dd000417 	ldw	r20,16(sp)
   47574:	dcc00317 	ldw	r19,12(sp)
   47578:	dc800217 	ldw	r18,8(sp)
   4757c:	dc400117 	ldw	r17,4(sp)
   47580:	dc000017 	ldw	r16,0(sp)
   47584:	dec00704 	addi	sp,sp,28
   47588:	f800283a 	ret

0004758c <_fwalk_reent>:
   4758c:	defff804 	addi	sp,sp,-32
   47590:	dcc00315 	stw	r19,12(sp)
   47594:	24c0b804 	addi	r19,r4,736
   47598:	dd800615 	stw	r22,24(sp)
   4759c:	dd400515 	stw	r21,20(sp)
   475a0:	dd000415 	stw	r20,16(sp)
   475a4:	dfc00715 	stw	ra,28(sp)
   475a8:	dc800215 	stw	r18,8(sp)
   475ac:	dc400115 	stw	r17,4(sp)
   475b0:	dc000015 	stw	r16,0(sp)
   475b4:	2029883a 	mov	r20,r4
   475b8:	282b883a 	mov	r21,r5
   475bc:	002d883a 	mov	r22,zero
   475c0:	0046b1c0 	call	46b1c <__sfp_lock_acquire>
   475c4:	98001326 	beq	r19,zero,47614 <_fwalk_reent+0x88>
   475c8:	04bfffc4 	movi	r18,-1
   475cc:	9c400117 	ldw	r17,4(r19)
   475d0:	9c000217 	ldw	r16,8(r19)
   475d4:	8c7fffc4 	addi	r17,r17,-1
   475d8:	88000c16 	blt	r17,zero,4760c <_fwalk_reent+0x80>
   475dc:	84000304 	addi	r16,r16,12
   475e0:	80c0000f 	ldh	r3,0(r16)
   475e4:	8c7fffc4 	addi	r17,r17,-1
   475e8:	817ffd04 	addi	r5,r16,-12
   475ec:	18000526 	beq	r3,zero,47604 <_fwalk_reent+0x78>
   475f0:	80c0008f 	ldh	r3,2(r16)
   475f4:	a009883a 	mov	r4,r20
   475f8:	1c800226 	beq	r3,r18,47604 <_fwalk_reent+0x78>
   475fc:	a83ee83a 	callr	r21
   47600:	b0acb03a 	or	r22,r22,r2
   47604:	84001704 	addi	r16,r16,92
   47608:	8cbff51e 	bne	r17,r18,475e0 <_fwalk_reent+0x54>
   4760c:	9cc00017 	ldw	r19,0(r19)
   47610:	983fee1e 	bne	r19,zero,475cc <_fwalk_reent+0x40>
   47614:	0046b200 	call	46b20 <__sfp_lock_release>
   47618:	b005883a 	mov	r2,r22
   4761c:	dfc00717 	ldw	ra,28(sp)
   47620:	dd800617 	ldw	r22,24(sp)
   47624:	dd400517 	ldw	r21,20(sp)
   47628:	dd000417 	ldw	r20,16(sp)
   4762c:	dcc00317 	ldw	r19,12(sp)
   47630:	dc800217 	ldw	r18,8(sp)
   47634:	dc400117 	ldw	r17,4(sp)
   47638:	dc000017 	ldw	r16,0(sp)
   4763c:	dec00804 	addi	sp,sp,32
   47640:	f800283a 	ret

00047644 <_isatty_r>:
   47644:	defffd04 	addi	sp,sp,-12
   47648:	dc400115 	stw	r17,4(sp)
   4764c:	dc000015 	stw	r16,0(sp)
   47650:	2023883a 	mov	r17,r4
   47654:	04000174 	movhi	r16,5
   47658:	84078604 	addi	r16,r16,7704
   4765c:	2809883a 	mov	r4,r5
   47660:	dfc00215 	stw	ra,8(sp)
   47664:	80000015 	stw	zero,0(r16)
   47668:	004b2fc0 	call	4b2fc <isatty>
   4766c:	00ffffc4 	movi	r3,-1
   47670:	10c00526 	beq	r2,r3,47688 <_isatty_r+0x44>
   47674:	dfc00217 	ldw	ra,8(sp)
   47678:	dc400117 	ldw	r17,4(sp)
   4767c:	dc000017 	ldw	r16,0(sp)
   47680:	dec00304 	addi	sp,sp,12
   47684:	f800283a 	ret
   47688:	80c00017 	ldw	r3,0(r16)
   4768c:	183ff926 	beq	r3,zero,47674 <_isatty_r+0x30>
   47690:	88c00015 	stw	r3,0(r17)
   47694:	dfc00217 	ldw	ra,8(sp)
   47698:	dc400117 	ldw	r17,4(sp)
   4769c:	dc000017 	ldw	r16,0(sp)
   476a0:	dec00304 	addi	sp,sp,12
   476a4:	f800283a 	ret

000476a8 <_setlocale_r>:
   476a8:	defffc04 	addi	sp,sp,-16
   476ac:	dc800215 	stw	r18,8(sp)
   476b0:	dc400115 	stw	r17,4(sp)
   476b4:	dc000015 	stw	r16,0(sp)
   476b8:	dfc00315 	stw	ra,12(sp)
   476bc:	3021883a 	mov	r16,r6
   476c0:	2023883a 	mov	r17,r4
   476c4:	2825883a 	mov	r18,r5
   476c8:	30001626 	beq	r6,zero,47724 <_setlocale_r+0x7c>
   476cc:	3009883a 	mov	r4,r6
   476d0:	01400174 	movhi	r5,5
   476d4:	29799004 	addi	r5,r5,-6592
   476d8:	00493ac0 	call	493ac <strcmp>
   476dc:	10000a1e 	bne	r2,zero,47708 <_setlocale_r+0x60>
   476e0:	8c800c15 	stw	r18,48(r17)
   476e4:	8c000d15 	stw	r16,52(r17)
   476e8:	00800174 	movhi	r2,5
   476ec:	10b99004 	addi	r2,r2,-6592
   476f0:	dfc00317 	ldw	ra,12(sp)
   476f4:	dc800217 	ldw	r18,8(sp)
   476f8:	dc400117 	ldw	r17,4(sp)
   476fc:	dc000017 	ldw	r16,0(sp)
   47700:	dec00404 	addi	sp,sp,16
   47704:	f800283a 	ret
   47708:	8009883a 	mov	r4,r16
   4770c:	01400174 	movhi	r5,5
   47710:	29799a04 	addi	r5,r5,-6552
   47714:	00493ac0 	call	493ac <strcmp>
   47718:	103ff126 	beq	r2,zero,476e0 <_setlocale_r+0x38>
   4771c:	0005883a 	mov	r2,zero
   47720:	003ff306 	br	476f0 <_setlocale_r+0x48>
   47724:	00800174 	movhi	r2,5
   47728:	10b99004 	addi	r2,r2,-6592
   4772c:	dfc00317 	ldw	ra,12(sp)
   47730:	dc800217 	ldw	r18,8(sp)
   47734:	dc400117 	ldw	r17,4(sp)
   47738:	dc000017 	ldw	r16,0(sp)
   4773c:	dec00404 	addi	sp,sp,16
   47740:	f800283a 	ret

00047744 <__locale_charset>:
   47744:	00800174 	movhi	r2,5
   47748:	10b9af04 	addi	r2,r2,-6468
   4774c:	f800283a 	ret

00047750 <_localeconv_r>:
   47750:	00800174 	movhi	r2,5
   47754:	10b9b304 	addi	r2,r2,-6452
   47758:	f800283a 	ret

0004775c <setlocale>:
   4775c:	00c00174 	movhi	r3,5
   47760:	18c0ad04 	addi	r3,r3,692
   47764:	2005883a 	mov	r2,r4
   47768:	19000017 	ldw	r4,0(r3)
   4776c:	280d883a 	mov	r6,r5
   47770:	100b883a 	mov	r5,r2
   47774:	00476a81 	jmpi	476a8 <_setlocale_r>

00047778 <localeconv>:
   47778:	00800174 	movhi	r2,5
   4777c:	10b9b304 	addi	r2,r2,-6452
   47780:	f800283a 	ret

00047784 <_lseek_r>:
   47784:	defffd04 	addi	sp,sp,-12
   47788:	dc400115 	stw	r17,4(sp)
   4778c:	dc000015 	stw	r16,0(sp)
   47790:	2023883a 	mov	r17,r4
   47794:	04000174 	movhi	r16,5
   47798:	84078604 	addi	r16,r16,7704
   4779c:	2809883a 	mov	r4,r5
   477a0:	300b883a 	mov	r5,r6
   477a4:	380d883a 	mov	r6,r7
   477a8:	dfc00215 	stw	ra,8(sp)
   477ac:	80000015 	stw	zero,0(r16)
   477b0:	004b4dc0 	call	4b4dc <lseek>
   477b4:	00ffffc4 	movi	r3,-1
   477b8:	10c00526 	beq	r2,r3,477d0 <_lseek_r+0x4c>
   477bc:	dfc00217 	ldw	ra,8(sp)
   477c0:	dc400117 	ldw	r17,4(sp)
   477c4:	dc000017 	ldw	r16,0(sp)
   477c8:	dec00304 	addi	sp,sp,12
   477cc:	f800283a 	ret
   477d0:	80c00017 	ldw	r3,0(r16)
   477d4:	183ff926 	beq	r3,zero,477bc <_lseek_r+0x38>
   477d8:	88c00015 	stw	r3,0(r17)
   477dc:	dfc00217 	ldw	ra,8(sp)
   477e0:	dc400117 	ldw	r17,4(sp)
   477e4:	dc000017 	ldw	r16,0(sp)
   477e8:	dec00304 	addi	sp,sp,12
   477ec:	f800283a 	ret

000477f0 <memchr>:
   477f0:	008000c4 	movi	r2,3
   477f4:	29403fcc 	andi	r5,r5,255
   477f8:	1180282e 	bgeu	r2,r6,4789c <memchr+0xac>
   477fc:	2086703a 	and	r3,r4,r2
   47800:	1800351e 	bne	r3,zero,478d8 <memchr+0xe8>
   47804:	2816923a 	slli	r11,r5,8
   47808:	2093883a 	add	r9,r4,r2
   4780c:	22000084 	addi	r8,r4,2
   47810:	5957883a 	add	r11,r11,r5
   47814:	5816923a 	slli	r11,r11,8
   47818:	20c00044 	addi	r3,r4,1
   4781c:	037fbff4 	movhi	r13,65279
   47820:	6b7fbfc4 	addi	r13,r13,-257
   47824:	5957883a 	add	r11,r11,r5
   47828:	5816923a 	slli	r11,r11,8
   4782c:	03202074 	movhi	r12,32897
   47830:	63202004 	addi	r12,r12,-32640
   47834:	101d883a 	mov	r14,r2
   47838:	5957883a 	add	r11,r11,r5
   4783c:	21c00017 	ldw	r7,0(r4)
   47840:	31bfff04 	addi	r6,r6,-4
   47844:	1805883a 	mov	r2,r3
   47848:	3acef03a 	xor	r7,r7,r11
   4784c:	3b55883a 	add	r10,r7,r13
   47850:	01ce303a 	nor	r7,zero,r7
   47854:	51ce703a 	and	r7,r10,r7
   47858:	3b0e703a 	and	r7,r7,r12
   4785c:	38000a26 	beq	r7,zero,47888 <memchr+0x98>
   47860:	21c00003 	ldbu	r7,0(r4)
   47864:	39401e26 	beq	r7,r5,478e0 <memchr+0xf0>
   47868:	19c00003 	ldbu	r7,0(r3)
   4786c:	39401926 	beq	r7,r5,478d4 <memchr+0xe4>
   47870:	41c00003 	ldbu	r7,0(r8)
   47874:	4005883a 	mov	r2,r8
   47878:	39401626 	beq	r7,r5,478d4 <memchr+0xe4>
   4787c:	49c00003 	ldbu	r7,0(r9)
   47880:	4805883a 	mov	r2,r9
   47884:	39401326 	beq	r7,r5,478d4 <memchr+0xe4>
   47888:	21000104 	addi	r4,r4,4
   4788c:	4a400104 	addi	r9,r9,4
   47890:	42000104 	addi	r8,r8,4
   47894:	18c00104 	addi	r3,r3,4
   47898:	71bfe836 	bltu	r14,r6,4783c <memchr+0x4c>
   4789c:	2005883a 	mov	r2,r4
   478a0:	30000a26 	beq	r6,zero,478cc <memchr+0xdc>
   478a4:	10c00003 	ldbu	r3,0(r2)
   478a8:	19400a26 	beq	r3,r5,478d4 <memchr+0xe4>
   478ac:	10c00044 	addi	r3,r2,1
   478b0:	118d883a 	add	r6,r2,r6
   478b4:	00000306 	br	478c4 <memchr+0xd4>
   478b8:	11000003 	ldbu	r4,0(r2)
   478bc:	18c00044 	addi	r3,r3,1
   478c0:	21400426 	beq	r4,r5,478d4 <memchr+0xe4>
   478c4:	1805883a 	mov	r2,r3
   478c8:	19bffb1e 	bne	r3,r6,478b8 <memchr+0xc8>
   478cc:	0005883a 	mov	r2,zero
   478d0:	f800283a 	ret
   478d4:	f800283a 	ret
   478d8:	2005883a 	mov	r2,r4
   478dc:	003ff106 	br	478a4 <memchr+0xb4>
   478e0:	2005883a 	mov	r2,r4
   478e4:	f800283a 	ret

000478e8 <memcpy>:
   478e8:	defffb04 	addi	sp,sp,-20
   478ec:	dc000015 	stw	r16,0(sp)
   478f0:	dfc00415 	stw	ra,16(sp)
   478f4:	dcc00315 	stw	r19,12(sp)
   478f8:	dc800215 	stw	r18,8(sp)
   478fc:	dc400115 	stw	r17,4(sp)
   47900:	00c003c4 	movi	r3,15
   47904:	2021883a 	mov	r16,r4
   47908:	3005883a 	mov	r2,r6
   4790c:	1980032e 	bgeu	r3,r6,4791c <memcpy+0x34>
   47910:	2906b03a 	or	r3,r5,r4
   47914:	18c000cc 	andi	r3,r3,3
   47918:	18001026 	beq	r3,zero,4795c <memcpy+0x74>
   4791c:	8007883a 	mov	r3,r16
   47920:	288f883a 	add	r7,r5,r2
   47924:	10000526 	beq	r2,zero,4793c <memcpy+0x54>
   47928:	29800003 	ldbu	r6,0(r5)
   4792c:	18c00044 	addi	r3,r3,1
   47930:	29400044 	addi	r5,r5,1
   47934:	19bfffc5 	stb	r6,-1(r3)
   47938:	29fffb1e 	bne	r5,r7,47928 <memcpy+0x40>
   4793c:	8005883a 	mov	r2,r16
   47940:	dfc00417 	ldw	ra,16(sp)
   47944:	dcc00317 	ldw	r19,12(sp)
   47948:	dc800217 	ldw	r18,8(sp)
   4794c:	dc400117 	ldw	r17,4(sp)
   47950:	dc000017 	ldw	r16,0(sp)
   47954:	dec00504 	addi	sp,sp,20
   47958:	f800283a 	ret
   4795c:	32bffc04 	addi	r10,r6,-16
   47960:	5014d13a 	srli	r10,r10,4
   47964:	20800404 	addi	r2,r4,16
   47968:	2007883a 	mov	r3,r4
   4796c:	5008913a 	slli	r4,r10,4
   47970:	280f883a 	mov	r7,r5
   47974:	1105883a 	add	r2,r2,r4
   47978:	3a000017 	ldw	r8,0(r7)
   4797c:	18c00404 	addi	r3,r3,16
   47980:	39c00404 	addi	r7,r7,16
   47984:	1a3ffc15 	stw	r8,-16(r3)
   47988:	3a3ffd17 	ldw	r8,-12(r7)
   4798c:	1a3ffd15 	stw	r8,-12(r3)
   47990:	3a3ffe17 	ldw	r8,-8(r7)
   47994:	1a3ffe15 	stw	r8,-8(r3)
   47998:	3a3fff17 	ldw	r8,-4(r7)
   4799c:	1a3fff15 	stw	r8,-4(r3)
   479a0:	18bff51e 	bne	r3,r2,47978 <memcpy+0x90>
   479a4:	52800044 	addi	r10,r10,1
   479a8:	5014913a 	slli	r10,r10,4
   479ac:	308003cc 	andi	r2,r6,15
   479b0:	010000c4 	movi	r4,3
   479b4:	8287883a 	add	r3,r16,r10
   479b8:	2a95883a 	add	r10,r5,r10
   479bc:	2080182e 	bgeu	r4,r2,47a20 <memcpy+0x138>
   479c0:	147fff04 	addi	r17,r2,-4
   479c4:	8808d0ba 	srli	r4,r17,2
   479c8:	1a400104 	addi	r9,r3,4
   479cc:	180d883a 	mov	r6,r3
   479d0:	2105883a 	add	r2,r4,r4
   479d4:	1085883a 	add	r2,r2,r2
   479d8:	4893883a 	add	r9,r9,r2
   479dc:	500f883a 	mov	r7,r10
   479e0:	3a000017 	ldw	r8,0(r7)
   479e4:	31800104 	addi	r6,r6,4
   479e8:	39c00104 	addi	r7,r7,4
   479ec:	323fff15 	stw	r8,-4(r6)
   479f0:	327ffb1e 	bne	r6,r9,479e0 <memcpy+0xf8>
   479f4:	20800044 	addi	r2,r4,1
   479f8:	1085883a 	add	r2,r2,r2
   479fc:	1085883a 	add	r2,r2,r2
   47a00:	017fff04 	movi	r5,-4
   47a04:	18a5883a 	add	r18,r3,r2
   47a08:	50a7883a 	add	r19,r10,r2
   47a0c:	00411f80 	call	411f8 <__mulsi3>
   47a10:	1445883a 	add	r2,r2,r17
   47a14:	980b883a 	mov	r5,r19
   47a18:	9007883a 	mov	r3,r18
   47a1c:	003fc006 	br	47920 <memcpy+0x38>
   47a20:	500b883a 	mov	r5,r10
   47a24:	003fbe06 	br	47920 <memcpy+0x38>

00047a28 <memmove>:
   47a28:	defffb04 	addi	sp,sp,-20
   47a2c:	dc000015 	stw	r16,0(sp)
   47a30:	dfc00415 	stw	ra,16(sp)
   47a34:	dcc00315 	stw	r19,12(sp)
   47a38:	dc800215 	stw	r18,8(sp)
   47a3c:	dc400115 	stw	r17,4(sp)
   47a40:	2021883a 	mov	r16,r4
   47a44:	300f883a 	mov	r7,r6
   47a48:	2900122e 	bgeu	r5,r4,47a94 <memmove+0x6c>
   47a4c:	2987883a 	add	r3,r5,r6
   47a50:	20c0102e 	bgeu	r4,r3,47a94 <memmove+0x6c>
   47a54:	218b883a 	add	r5,r4,r6
   47a58:	1989c83a 	sub	r4,r3,r6
   47a5c:	30000526 	beq	r6,zero,47a74 <memmove+0x4c>
   47a60:	18ffffc4 	addi	r3,r3,-1
   47a64:	18800003 	ldbu	r2,0(r3)
   47a68:	297fffc4 	addi	r5,r5,-1
   47a6c:	28800005 	stb	r2,0(r5)
   47a70:	193ffb1e 	bne	r3,r4,47a60 <memmove+0x38>
   47a74:	8005883a 	mov	r2,r16
   47a78:	dfc00417 	ldw	ra,16(sp)
   47a7c:	dcc00317 	ldw	r19,12(sp)
   47a80:	dc800217 	ldw	r18,8(sp)
   47a84:	dc400117 	ldw	r17,4(sp)
   47a88:	dc000017 	ldw	r16,0(sp)
   47a8c:	dec00504 	addi	sp,sp,20
   47a90:	f800283a 	ret
   47a94:	008003c4 	movi	r2,15
   47a98:	1180422e 	bgeu	r2,r6,47ba4 <memmove+0x17c>
   47a9c:	2c04b03a 	or	r2,r5,r16
   47aa0:	108000cc 	andi	r2,r2,3
   47aa4:	10003f1e 	bne	r2,zero,47ba4 <memmove+0x17c>
   47aa8:	32bffc04 	addi	r10,r6,-16
   47aac:	5014d13a 	srli	r10,r10,4
   47ab0:	81000404 	addi	r4,r16,16
   47ab4:	8007883a 	mov	r3,r16
   47ab8:	5004913a 	slli	r2,r10,4
   47abc:	280f883a 	mov	r7,r5
   47ac0:	2089883a 	add	r4,r4,r2
   47ac4:	38800017 	ldw	r2,0(r7)
   47ac8:	18c00404 	addi	r3,r3,16
   47acc:	39c00404 	addi	r7,r7,16
   47ad0:	18bffc15 	stw	r2,-16(r3)
   47ad4:	38bffd17 	ldw	r2,-12(r7)
   47ad8:	18bffd15 	stw	r2,-12(r3)
   47adc:	38bffe17 	ldw	r2,-8(r7)
   47ae0:	18bffe15 	stw	r2,-8(r3)
   47ae4:	38bfff17 	ldw	r2,-4(r7)
   47ae8:	18bfff15 	stw	r2,-4(r3)
   47aec:	193ff51e 	bne	r3,r4,47ac4 <memmove+0x9c>
   47af0:	52800044 	addi	r10,r10,1
   47af4:	5014913a 	slli	r10,r10,4
   47af8:	31c003cc 	andi	r7,r6,15
   47afc:	008000c4 	movi	r2,3
   47b00:	8287883a 	add	r3,r16,r10
   47b04:	2a95883a 	add	r10,r5,r10
   47b08:	11c0282e 	bgeu	r2,r7,47bac <memmove+0x184>
   47b0c:	3c7fff04 	addi	r17,r7,-4
   47b10:	8808d0ba 	srli	r4,r17,2
   47b14:	1a400104 	addi	r9,r3,4
   47b18:	180d883a 	mov	r6,r3
   47b1c:	2105883a 	add	r2,r4,r4
   47b20:	1085883a 	add	r2,r2,r2
   47b24:	4893883a 	add	r9,r9,r2
   47b28:	5005883a 	mov	r2,r10
   47b2c:	12000017 	ldw	r8,0(r2)
   47b30:	31800104 	addi	r6,r6,4
   47b34:	10800104 	addi	r2,r2,4
   47b38:	323fff15 	stw	r8,-4(r6)
   47b3c:	327ffb1e 	bne	r6,r9,47b2c <memmove+0x104>
   47b40:	20800044 	addi	r2,r4,1
   47b44:	1085883a 	add	r2,r2,r2
   47b48:	1085883a 	add	r2,r2,r2
   47b4c:	017fff04 	movi	r5,-4
   47b50:	18a5883a 	add	r18,r3,r2
   47b54:	50a7883a 	add	r19,r10,r2
   47b58:	00411f80 	call	411f8 <__mulsi3>
   47b5c:	144f883a 	add	r7,r2,r17
   47b60:	980b883a 	mov	r5,r19
   47b64:	9007883a 	mov	r3,r18
   47b68:	383fc226 	beq	r7,zero,47a74 <memmove+0x4c>
   47b6c:	19cf883a 	add	r7,r3,r7
   47b70:	29800003 	ldbu	r6,0(r5)
   47b74:	18c00044 	addi	r3,r3,1
   47b78:	29400044 	addi	r5,r5,1
   47b7c:	19bfffc5 	stb	r6,-1(r3)
   47b80:	19fffb1e 	bne	r3,r7,47b70 <memmove+0x148>
   47b84:	8005883a 	mov	r2,r16
   47b88:	dfc00417 	ldw	ra,16(sp)
   47b8c:	dcc00317 	ldw	r19,12(sp)
   47b90:	dc800217 	ldw	r18,8(sp)
   47b94:	dc400117 	ldw	r17,4(sp)
   47b98:	dc000017 	ldw	r16,0(sp)
   47b9c:	dec00504 	addi	sp,sp,20
   47ba0:	f800283a 	ret
   47ba4:	8007883a 	mov	r3,r16
   47ba8:	003fef06 	br	47b68 <memmove+0x140>
   47bac:	500b883a 	mov	r5,r10
   47bb0:	003fed06 	br	47b68 <memmove+0x140>

00047bb4 <memset>:
   47bb4:	00c000c4 	movi	r3,3
   47bb8:	2005883a 	mov	r2,r4
   47bbc:	29403fcc 	andi	r5,r5,255
   47bc0:	19802d2e 	bgeu	r3,r6,47c78 <memset+0xc4>
   47bc4:	20c6703a 	and	r3,r4,r3
   47bc8:	18002e1e 	bne	r3,zero,47c84 <memset+0xd0>
   47bcc:	2806923a 	slli	r3,r5,8
   47bd0:	010003c4 	movi	r4,15
   47bd4:	3011883a 	mov	r8,r6
   47bd8:	1946b03a 	or	r3,r3,r5
   47bdc:	180e943a 	slli	r7,r3,16
   47be0:	38ceb03a 	or	r7,r7,r3
   47be4:	1007883a 	mov	r3,r2
   47be8:	21800f2e 	bgeu	r4,r6,47c28 <memset+0x74>
   47bec:	19c00015 	stw	r7,0(r3)
   47bf0:	19c00115 	stw	r7,4(r3)
   47bf4:	19c00215 	stw	r7,8(r3)
   47bf8:	19c00315 	stw	r7,12(r3)
   47bfc:	423ffc04 	addi	r8,r8,-16
   47c00:	18c00404 	addi	r3,r3,16
   47c04:	223ff936 	bltu	r4,r8,47bec <memset+0x38>
   47c08:	30fffc04 	addi	r3,r6,-16
   47c0c:	1806d13a 	srli	r3,r3,4
   47c10:	318003cc 	andi	r6,r6,15
   47c14:	010000c4 	movi	r4,3
   47c18:	18c00044 	addi	r3,r3,1
   47c1c:	1806913a 	slli	r3,r3,4
   47c20:	10c7883a 	add	r3,r2,r3
   47c24:	21800e2e 	bgeu	r4,r6,47c60 <memset+0xac>
   47c28:	1813883a 	mov	r9,r3
   47c2c:	3011883a 	mov	r8,r6
   47c30:	010000c4 	movi	r4,3
   47c34:	49c00015 	stw	r7,0(r9)
   47c38:	423fff04 	addi	r8,r8,-4
   47c3c:	4a400104 	addi	r9,r9,4
   47c40:	223ffc36 	bltu	r4,r8,47c34 <memset+0x80>
   47c44:	313fff04 	addi	r4,r6,-4
   47c48:	2008d0ba 	srli	r4,r4,2
   47c4c:	318000cc 	andi	r6,r6,3
   47c50:	21000044 	addi	r4,r4,1
   47c54:	2109883a 	add	r4,r4,r4
   47c58:	2109883a 	add	r4,r4,r4
   47c5c:	1907883a 	add	r3,r3,r4
   47c60:	30000a26 	beq	r6,zero,47c8c <memset+0xd8>
   47c64:	198d883a 	add	r6,r3,r6
   47c68:	19400005 	stb	r5,0(r3)
   47c6c:	18c00044 	addi	r3,r3,1
   47c70:	19bffd1e 	bne	r3,r6,47c68 <memset+0xb4>
   47c74:	f800283a 	ret
   47c78:	2007883a 	mov	r3,r4
   47c7c:	303ff91e 	bne	r6,zero,47c64 <memset+0xb0>
   47c80:	00000206 	br	47c8c <memset+0xd8>
   47c84:	2007883a 	mov	r3,r4
   47c88:	003ff606 	br	47c64 <memset+0xb0>
   47c8c:	f800283a 	ret

00047c90 <_Balloc>:
   47c90:	20801317 	ldw	r2,76(r4)
   47c94:	defffc04 	addi	sp,sp,-16
   47c98:	dc400115 	stw	r17,4(sp)
   47c9c:	dc000015 	stw	r16,0(sp)
   47ca0:	dfc00315 	stw	ra,12(sp)
   47ca4:	dc800215 	stw	r18,8(sp)
   47ca8:	2023883a 	mov	r17,r4
   47cac:	2821883a 	mov	r16,r5
   47cb0:	10000f26 	beq	r2,zero,47cf0 <_Balloc+0x60>
   47cb4:	8407883a 	add	r3,r16,r16
   47cb8:	18c7883a 	add	r3,r3,r3
   47cbc:	10c7883a 	add	r3,r2,r3
   47cc0:	18800017 	ldw	r2,0(r3)
   47cc4:	10001126 	beq	r2,zero,47d0c <_Balloc+0x7c>
   47cc8:	11000017 	ldw	r4,0(r2)
   47ccc:	19000015 	stw	r4,0(r3)
   47cd0:	10000415 	stw	zero,16(r2)
   47cd4:	10000315 	stw	zero,12(r2)
   47cd8:	dfc00317 	ldw	ra,12(sp)
   47cdc:	dc800217 	ldw	r18,8(sp)
   47ce0:	dc400117 	ldw	r17,4(sp)
   47ce4:	dc000017 	ldw	r16,0(sp)
   47ce8:	dec00404 	addi	sp,sp,16
   47cec:	f800283a 	ret
   47cf0:	01400104 	movi	r5,4
   47cf4:	01800404 	movi	r6,16
   47cf8:	00494500 	call	49450 <_calloc_r>
   47cfc:	88801315 	stw	r2,76(r17)
   47d00:	103fec1e 	bne	r2,zero,47cb4 <_Balloc+0x24>
   47d04:	0005883a 	mov	r2,zero
   47d08:	003ff306 	br	47cd8 <_Balloc+0x48>
   47d0c:	01400044 	movi	r5,1
   47d10:	2c24983a 	sll	r18,r5,r16
   47d14:	8809883a 	mov	r4,r17
   47d18:	91800144 	addi	r6,r18,5
   47d1c:	318d883a 	add	r6,r6,r6
   47d20:	318d883a 	add	r6,r6,r6
   47d24:	00494500 	call	49450 <_calloc_r>
   47d28:	103ff626 	beq	r2,zero,47d04 <_Balloc+0x74>
   47d2c:	14000115 	stw	r16,4(r2)
   47d30:	14800215 	stw	r18,8(r2)
   47d34:	003fe606 	br	47cd0 <_Balloc+0x40>

00047d38 <_Bfree>:
   47d38:	28000826 	beq	r5,zero,47d5c <_Bfree+0x24>
   47d3c:	28c00117 	ldw	r3,4(r5)
   47d40:	20801317 	ldw	r2,76(r4)
   47d44:	18c7883a 	add	r3,r3,r3
   47d48:	18c7883a 	add	r3,r3,r3
   47d4c:	10c5883a 	add	r2,r2,r3
   47d50:	10c00017 	ldw	r3,0(r2)
   47d54:	28c00015 	stw	r3,0(r5)
   47d58:	11400015 	stw	r5,0(r2)
   47d5c:	f800283a 	ret

00047d60 <__multadd>:
   47d60:	defff604 	addi	sp,sp,-40
   47d64:	dd400515 	stw	r21,20(sp)
   47d68:	2d400417 	ldw	r21,16(r5)
   47d6c:	df000815 	stw	fp,32(sp)
   47d70:	ddc00715 	stw	r23,28(sp)
   47d74:	dd800615 	stw	r22,24(sp)
   47d78:	dd000415 	stw	r20,16(sp)
   47d7c:	dc400115 	stw	r17,4(sp)
   47d80:	dc000015 	stw	r16,0(sp)
   47d84:	dfc00915 	stw	ra,36(sp)
   47d88:	dcc00315 	stw	r19,12(sp)
   47d8c:	dc800215 	stw	r18,8(sp)
   47d90:	282d883a 	mov	r22,r5
   47d94:	202f883a 	mov	r23,r4
   47d98:	3029883a 	mov	r20,r6
   47d9c:	3839883a 	mov	fp,r7
   47da0:	2c000504 	addi	r16,r5,20
   47da4:	0023883a 	mov	r17,zero
   47da8:	84c00017 	ldw	r19,0(r16)
   47dac:	a00b883a 	mov	r5,r20
   47db0:	8c400044 	addi	r17,r17,1
   47db4:	993fffcc 	andi	r4,r19,65535
   47db8:	00411f80 	call	411f8 <__mulsi3>
   47dbc:	1725883a 	add	r18,r2,fp
   47dc0:	9808d43a 	srli	r4,r19,16
   47dc4:	9026d43a 	srli	r19,r18,16
   47dc8:	a00b883a 	mov	r5,r20
   47dcc:	00411f80 	call	411f8 <__mulsi3>
   47dd0:	988f883a 	add	r7,r19,r2
   47dd4:	3804943a 	slli	r2,r7,16
   47dd8:	94bfffcc 	andi	r18,r18,65535
   47ddc:	3838d43a 	srli	fp,r7,16
   47de0:	14a5883a 	add	r18,r2,r18
   47de4:	84800015 	stw	r18,0(r16)
   47de8:	84000104 	addi	r16,r16,4
   47dec:	8d7fee16 	blt	r17,r21,47da8 <__multadd+0x48>
   47df0:	e0000926 	beq	fp,zero,47e18 <__multadd+0xb8>
   47df4:	b0800217 	ldw	r2,8(r22)
   47df8:	a880140e 	bge	r21,r2,47e4c <__multadd+0xec>
   47dfc:	a8800144 	addi	r2,r21,5
   47e00:	1085883a 	add	r2,r2,r2
   47e04:	1085883a 	add	r2,r2,r2
   47e08:	b085883a 	add	r2,r22,r2
   47e0c:	ad400044 	addi	r21,r21,1
   47e10:	17000015 	stw	fp,0(r2)
   47e14:	b5400415 	stw	r21,16(r22)
   47e18:	b005883a 	mov	r2,r22
   47e1c:	dfc00917 	ldw	ra,36(sp)
   47e20:	df000817 	ldw	fp,32(sp)
   47e24:	ddc00717 	ldw	r23,28(sp)
   47e28:	dd800617 	ldw	r22,24(sp)
   47e2c:	dd400517 	ldw	r21,20(sp)
   47e30:	dd000417 	ldw	r20,16(sp)
   47e34:	dcc00317 	ldw	r19,12(sp)
   47e38:	dc800217 	ldw	r18,8(sp)
   47e3c:	dc400117 	ldw	r17,4(sp)
   47e40:	dc000017 	ldw	r16,0(sp)
   47e44:	dec00a04 	addi	sp,sp,40
   47e48:	f800283a 	ret
   47e4c:	b1400117 	ldw	r5,4(r22)
   47e50:	b809883a 	mov	r4,r23
   47e54:	29400044 	addi	r5,r5,1
   47e58:	0047c900 	call	47c90 <_Balloc>
   47e5c:	b1800417 	ldw	r6,16(r22)
   47e60:	b1400304 	addi	r5,r22,12
   47e64:	11000304 	addi	r4,r2,12
   47e68:	31800084 	addi	r6,r6,2
   47e6c:	318d883a 	add	r6,r6,r6
   47e70:	318d883a 	add	r6,r6,r6
   47e74:	1021883a 	mov	r16,r2
   47e78:	00478e80 	call	478e8 <memcpy>
   47e7c:	b0c00117 	ldw	r3,4(r22)
   47e80:	b8801317 	ldw	r2,76(r23)
   47e84:	18c7883a 	add	r3,r3,r3
   47e88:	18c7883a 	add	r3,r3,r3
   47e8c:	10c5883a 	add	r2,r2,r3
   47e90:	10c00017 	ldw	r3,0(r2)
   47e94:	b0c00015 	stw	r3,0(r22)
   47e98:	15800015 	stw	r22,0(r2)
   47e9c:	802d883a 	mov	r22,r16
   47ea0:	003fd606 	br	47dfc <__multadd+0x9c>

00047ea4 <__s2b>:
   47ea4:	defff904 	addi	sp,sp,-28
   47ea8:	dd000415 	stw	r20,16(sp)
   47eac:	dc400115 	stw	r17,4(sp)
   47eb0:	2829883a 	mov	r20,r5
   47eb4:	2023883a 	mov	r17,r4
   47eb8:	01400244 	movi	r5,9
   47ebc:	39000204 	addi	r4,r7,8
   47ec0:	dcc00315 	stw	r19,12(sp)
   47ec4:	dc800215 	stw	r18,8(sp)
   47ec8:	dfc00615 	stw	ra,24(sp)
   47ecc:	dd400515 	stw	r21,20(sp)
   47ed0:	dc000015 	stw	r16,0(sp)
   47ed4:	3825883a 	mov	r18,r7
   47ed8:	3027883a 	mov	r19,r6
   47edc:	004adc80 	call	4adc8 <__divsi3>
   47ee0:	00c00044 	movi	r3,1
   47ee4:	000b883a 	mov	r5,zero
   47ee8:	1880030e 	bge	r3,r2,47ef8 <__s2b+0x54>
   47eec:	18c7883a 	add	r3,r3,r3
   47ef0:	29400044 	addi	r5,r5,1
   47ef4:	18bffd16 	blt	r3,r2,47eec <__s2b+0x48>
   47ef8:	8809883a 	mov	r4,r17
   47efc:	0047c900 	call	47c90 <_Balloc>
   47f00:	d8c00717 	ldw	r3,28(sp)
   47f04:	10c00515 	stw	r3,20(r2)
   47f08:	00c00044 	movi	r3,1
   47f0c:	10c00415 	stw	r3,16(r2)
   47f10:	00c00244 	movi	r3,9
   47f14:	1cc0210e 	bge	r3,r19,47f9c <__s2b+0xf8>
   47f18:	a0eb883a 	add	r21,r20,r3
   47f1c:	a821883a 	mov	r16,r21
   47f20:	a4e9883a 	add	r20,r20,r19
   47f24:	81c00007 	ldb	r7,0(r16)
   47f28:	8809883a 	mov	r4,r17
   47f2c:	84000044 	addi	r16,r16,1
   47f30:	100b883a 	mov	r5,r2
   47f34:	01800284 	movi	r6,10
   47f38:	39fff404 	addi	r7,r7,-48
   47f3c:	0047d600 	call	47d60 <__multadd>
   47f40:	853ff81e 	bne	r16,r20,47f24 <__s2b+0x80>
   47f44:	ace1883a 	add	r16,r21,r19
   47f48:	843ffe04 	addi	r16,r16,-8
   47f4c:	9c800a0e 	bge	r19,r18,47f78 <__s2b+0xd4>
   47f50:	94e5c83a 	sub	r18,r18,r19
   47f54:	84a5883a 	add	r18,r16,r18
   47f58:	81c00007 	ldb	r7,0(r16)
   47f5c:	8809883a 	mov	r4,r17
   47f60:	84000044 	addi	r16,r16,1
   47f64:	100b883a 	mov	r5,r2
   47f68:	01800284 	movi	r6,10
   47f6c:	39fff404 	addi	r7,r7,-48
   47f70:	0047d600 	call	47d60 <__multadd>
   47f74:	84bff81e 	bne	r16,r18,47f58 <__s2b+0xb4>
   47f78:	dfc00617 	ldw	ra,24(sp)
   47f7c:	dd400517 	ldw	r21,20(sp)
   47f80:	dd000417 	ldw	r20,16(sp)
   47f84:	dcc00317 	ldw	r19,12(sp)
   47f88:	dc800217 	ldw	r18,8(sp)
   47f8c:	dc400117 	ldw	r17,4(sp)
   47f90:	dc000017 	ldw	r16,0(sp)
   47f94:	dec00704 	addi	sp,sp,28
   47f98:	f800283a 	ret
   47f9c:	a4000284 	addi	r16,r20,10
   47fa0:	1827883a 	mov	r19,r3
   47fa4:	003fe906 	br	47f4c <__s2b+0xa8>

00047fa8 <__hi0bits>:
   47fa8:	20bfffec 	andhi	r2,r4,65535
   47fac:	1000141e 	bne	r2,zero,48000 <__hi0bits+0x58>
   47fb0:	2008943a 	slli	r4,r4,16
   47fb4:	00800404 	movi	r2,16
   47fb8:	20ffc02c 	andhi	r3,r4,65280
   47fbc:	1800021e 	bne	r3,zero,47fc8 <__hi0bits+0x20>
   47fc0:	2008923a 	slli	r4,r4,8
   47fc4:	10800204 	addi	r2,r2,8
   47fc8:	20fc002c 	andhi	r3,r4,61440
   47fcc:	1800021e 	bne	r3,zero,47fd8 <__hi0bits+0x30>
   47fd0:	2008913a 	slli	r4,r4,4
   47fd4:	10800104 	addi	r2,r2,4
   47fd8:	20f0002c 	andhi	r3,r4,49152
   47fdc:	1800031e 	bne	r3,zero,47fec <__hi0bits+0x44>
   47fe0:	2109883a 	add	r4,r4,r4
   47fe4:	10800084 	addi	r2,r2,2
   47fe8:	2109883a 	add	r4,r4,r4
   47fec:	20000316 	blt	r4,zero,47ffc <__hi0bits+0x54>
   47ff0:	2110002c 	andhi	r4,r4,16384
   47ff4:	2000041e 	bne	r4,zero,48008 <__hi0bits+0x60>
   47ff8:	00800804 	movi	r2,32
   47ffc:	f800283a 	ret
   48000:	0005883a 	mov	r2,zero
   48004:	003fec06 	br	47fb8 <__hi0bits+0x10>
   48008:	10800044 	addi	r2,r2,1
   4800c:	f800283a 	ret

00048010 <__lo0bits>:
   48010:	20c00017 	ldw	r3,0(r4)
   48014:	188001cc 	andi	r2,r3,7
   48018:	10000826 	beq	r2,zero,4803c <__lo0bits+0x2c>
   4801c:	1880004c 	andi	r2,r3,1
   48020:	1000211e 	bne	r2,zero,480a8 <__lo0bits+0x98>
   48024:	1880008c 	andi	r2,r3,2
   48028:	1000211e 	bne	r2,zero,480b0 <__lo0bits+0xa0>
   4802c:	1806d0ba 	srli	r3,r3,2
   48030:	00800084 	movi	r2,2
   48034:	20c00015 	stw	r3,0(r4)
   48038:	f800283a 	ret
   4803c:	18bfffcc 	andi	r2,r3,65535
   48040:	10001326 	beq	r2,zero,48090 <__lo0bits+0x80>
   48044:	0005883a 	mov	r2,zero
   48048:	19403fcc 	andi	r5,r3,255
   4804c:	2800021e 	bne	r5,zero,48058 <__lo0bits+0x48>
   48050:	1806d23a 	srli	r3,r3,8
   48054:	10800204 	addi	r2,r2,8
   48058:	194003cc 	andi	r5,r3,15
   4805c:	2800021e 	bne	r5,zero,48068 <__lo0bits+0x58>
   48060:	1806d13a 	srli	r3,r3,4
   48064:	10800104 	addi	r2,r2,4
   48068:	194000cc 	andi	r5,r3,3
   4806c:	2800021e 	bne	r5,zero,48078 <__lo0bits+0x68>
   48070:	1806d0ba 	srli	r3,r3,2
   48074:	10800084 	addi	r2,r2,2
   48078:	1940004c 	andi	r5,r3,1
   4807c:	2800081e 	bne	r5,zero,480a0 <__lo0bits+0x90>
   48080:	1806d07a 	srli	r3,r3,1
   48084:	1800051e 	bne	r3,zero,4809c <__lo0bits+0x8c>
   48088:	00800804 	movi	r2,32
   4808c:	f800283a 	ret
   48090:	1806d43a 	srli	r3,r3,16
   48094:	00800404 	movi	r2,16
   48098:	003feb06 	br	48048 <__lo0bits+0x38>
   4809c:	10800044 	addi	r2,r2,1
   480a0:	20c00015 	stw	r3,0(r4)
   480a4:	f800283a 	ret
   480a8:	0005883a 	mov	r2,zero
   480ac:	f800283a 	ret
   480b0:	1806d07a 	srli	r3,r3,1
   480b4:	00800044 	movi	r2,1
   480b8:	20c00015 	stw	r3,0(r4)
   480bc:	f800283a 	ret

000480c0 <__i2b>:
   480c0:	defffd04 	addi	sp,sp,-12
   480c4:	dc000015 	stw	r16,0(sp)
   480c8:	04000044 	movi	r16,1
   480cc:	dc400115 	stw	r17,4(sp)
   480d0:	2823883a 	mov	r17,r5
   480d4:	800b883a 	mov	r5,r16
   480d8:	dfc00215 	stw	ra,8(sp)
   480dc:	0047c900 	call	47c90 <_Balloc>
   480e0:	14400515 	stw	r17,20(r2)
   480e4:	14000415 	stw	r16,16(r2)
   480e8:	dfc00217 	ldw	ra,8(sp)
   480ec:	dc400117 	ldw	r17,4(sp)
   480f0:	dc000017 	ldw	r16,0(sp)
   480f4:	dec00304 	addi	sp,sp,12
   480f8:	f800283a 	ret

000480fc <__multiply>:
   480fc:	defff004 	addi	sp,sp,-64
   48100:	dc800815 	stw	r18,32(sp)
   48104:	dc400715 	stw	r17,28(sp)
   48108:	34800417 	ldw	r18,16(r6)
   4810c:	2c400417 	ldw	r17,16(r5)
   48110:	ddc00d15 	stw	r23,52(sp)
   48114:	dc000615 	stw	r16,24(sp)
   48118:	dfc00f15 	stw	ra,60(sp)
   4811c:	df000e15 	stw	fp,56(sp)
   48120:	dd800c15 	stw	r22,48(sp)
   48124:	dd400b15 	stw	r21,44(sp)
   48128:	dd000a15 	stw	r20,40(sp)
   4812c:	dcc00915 	stw	r19,36(sp)
   48130:	2821883a 	mov	r16,r5
   48134:	302f883a 	mov	r23,r6
   48138:	8c80050e 	bge	r17,r18,48150 <__multiply+0x54>
   4813c:	8807883a 	mov	r3,r17
   48140:	3021883a 	mov	r16,r6
   48144:	9023883a 	mov	r17,r18
   48148:	282f883a 	mov	r23,r5
   4814c:	1825883a 	mov	r18,r3
   48150:	80800217 	ldw	r2,8(r16)
   48154:	8c87883a 	add	r3,r17,r18
   48158:	d8c00115 	stw	r3,4(sp)
   4815c:	81400117 	ldw	r5,4(r16)
   48160:	10c0010e 	bge	r2,r3,48168 <__multiply+0x6c>
   48164:	29400044 	addi	r5,r5,1
   48168:	0047c900 	call	47c90 <_Balloc>
   4816c:	d8c00117 	ldw	r3,4(sp)
   48170:	d8800515 	stw	r2,20(sp)
   48174:	14c00504 	addi	r19,r2,20
   48178:	1d400144 	addi	r21,r3,5
   4817c:	ad6b883a 	add	r21,r21,r21
   48180:	ad6b883a 	add	r21,r21,r21
   48184:	156b883a 	add	r21,r2,r21
   48188:	dd400215 	stw	r21,8(sp)
   4818c:	9805883a 	mov	r2,r19
   48190:	9d40042e 	bgeu	r19,r21,481a4 <__multiply+0xa8>
   48194:	d8c00217 	ldw	r3,8(sp)
   48198:	10000015 	stw	zero,0(r2)
   4819c:	10800104 	addi	r2,r2,4
   481a0:	10fffc36 	bltu	r2,r3,48194 <__multiply+0x98>
   481a4:	94800144 	addi	r18,r18,5
   481a8:	94a5883a 	add	r18,r18,r18
   481ac:	94ad883a 	add	r22,r18,r18
   481b0:	8c400144 	addi	r17,r17,5
   481b4:	8c63883a 	add	r17,r17,r17
   481b8:	bdad883a 	add	r22,r23,r22
   481bc:	80c00504 	addi	r3,r16,20
   481c0:	8c63883a 	add	r17,r17,r17
   481c4:	bc800504 	addi	r18,r23,20
   481c8:	dd800315 	stw	r22,12(sp)
   481cc:	d8c00415 	stw	r3,16(sp)
   481d0:	dcc00015 	stw	r19,0(sp)
   481d4:	8463883a 	add	r17,r16,r17
   481d8:	9580412e 	bgeu	r18,r22,482e0 <__multiply+0x1e4>
   481dc:	90800017 	ldw	r2,0(r18)
   481e0:	173fffcc 	andi	fp,r2,65535
   481e4:	e0001a26 	beq	fp,zero,48250 <__multiply+0x154>
   481e8:	dd000017 	ldw	r20,0(sp)
   481ec:	dd800417 	ldw	r22,16(sp)
   481f0:	002b883a 	mov	r21,zero
   481f4:	b4c00017 	ldw	r19,0(r22)
   481f8:	a4000017 	ldw	r16,0(r20)
   481fc:	e00b883a 	mov	r5,fp
   48200:	993fffcc 	andi	r4,r19,65535
   48204:	00411f80 	call	411f8 <__mulsi3>
   48208:	9808d43a 	srli	r4,r19,16
   4820c:	817fffcc 	andi	r5,r16,65535
   48210:	1145883a 	add	r2,r2,r5
   48214:	e00b883a 	mov	r5,fp
   48218:	1567883a 	add	r19,r2,r21
   4821c:	8020d43a 	srli	r16,r16,16
   48220:	00411f80 	call	411f8 <__mulsi3>
   48224:	9808d43a 	srli	r4,r19,16
   48228:	1405883a 	add	r2,r2,r16
   4822c:	a4c0000d 	sth	r19,0(r20)
   48230:	110f883a 	add	r7,r2,r4
   48234:	a1c0008d 	sth	r7,2(r20)
   48238:	b5800104 	addi	r22,r22,4
   4823c:	382ad43a 	srli	r21,r7,16
   48240:	a5000104 	addi	r20,r20,4
   48244:	b47feb36 	bltu	r22,r17,481f4 <__multiply+0xf8>
   48248:	a5400015 	stw	r21,0(r20)
   4824c:	90800017 	ldw	r2,0(r18)
   48250:	1038d43a 	srli	fp,r2,16
   48254:	e0001c26 	beq	fp,zero,482c8 <__multiply+0x1cc>
   48258:	d8c00017 	ldw	r3,0(sp)
   4825c:	dd000417 	ldw	r20,16(sp)
   48260:	002b883a 	mov	r21,zero
   48264:	1d800017 	ldw	r22,0(r3)
   48268:	182f883a 	mov	r23,r3
   4826c:	b021883a 	mov	r16,r22
   48270:	a4c00017 	ldw	r19,0(r20)
   48274:	8020d43a 	srli	r16,r16,16
   48278:	e00b883a 	mov	r5,fp
   4827c:	993fffcc 	andi	r4,r19,65535
   48280:	00411f80 	call	411f8 <__mulsi3>
   48284:	1405883a 	add	r2,r2,r16
   48288:	9808d43a 	srli	r4,r19,16
   4828c:	156b883a 	add	r21,r2,r21
   48290:	bdc00104 	addi	r23,r23,4
   48294:	bdbfff0d 	sth	r22,-4(r23)
   48298:	bd7fff8d 	sth	r21,-2(r23)
   4829c:	bc000017 	ldw	r16,0(r23)
   482a0:	e00b883a 	mov	r5,fp
   482a4:	00411f80 	call	411f8 <__mulsi3>
   482a8:	a80ed43a 	srli	r7,r21,16
   482ac:	813fffcc 	andi	r4,r16,65535
   482b0:	2085883a 	add	r2,r4,r2
   482b4:	11ed883a 	add	r22,r2,r7
   482b8:	a5000104 	addi	r20,r20,4
   482bc:	b02ad43a 	srli	r21,r22,16
   482c0:	a47feb36 	bltu	r20,r17,48270 <__multiply+0x174>
   482c4:	bd800015 	stw	r22,0(r23)
   482c8:	d8c00017 	ldw	r3,0(sp)
   482cc:	94800104 	addi	r18,r18,4
   482d0:	18c00104 	addi	r3,r3,4
   482d4:	d8c00015 	stw	r3,0(sp)
   482d8:	d8c00317 	ldw	r3,12(sp)
   482dc:	90ffbf36 	bltu	r18,r3,481dc <__multiply+0xe0>
   482e0:	d8c00117 	ldw	r3,4(sp)
   482e4:	00c00c0e 	bge	zero,r3,48318 <__multiply+0x21c>
   482e8:	d8c00217 	ldw	r3,8(sp)
   482ec:	18bfff17 	ldw	r2,-4(r3)
   482f0:	1d7fff04 	addi	r21,r3,-4
   482f4:	10000326 	beq	r2,zero,48304 <__multiply+0x208>
   482f8:	00000706 	br	48318 <__multiply+0x21c>
   482fc:	a8800017 	ldw	r2,0(r21)
   48300:	1000051e 	bne	r2,zero,48318 <__multiply+0x21c>
   48304:	d8c00117 	ldw	r3,4(sp)
   48308:	ad7fff04 	addi	r21,r21,-4
   4830c:	18ffffc4 	addi	r3,r3,-1
   48310:	d8c00115 	stw	r3,4(sp)
   48314:	183ff91e 	bne	r3,zero,482fc <__multiply+0x200>
   48318:	d8800517 	ldw	r2,20(sp)
   4831c:	d8c00117 	ldw	r3,4(sp)
   48320:	10c00415 	stw	r3,16(r2)
   48324:	dfc00f17 	ldw	ra,60(sp)
   48328:	df000e17 	ldw	fp,56(sp)
   4832c:	ddc00d17 	ldw	r23,52(sp)
   48330:	dd800c17 	ldw	r22,48(sp)
   48334:	dd400b17 	ldw	r21,44(sp)
   48338:	dd000a17 	ldw	r20,40(sp)
   4833c:	dcc00917 	ldw	r19,36(sp)
   48340:	dc800817 	ldw	r18,32(sp)
   48344:	dc400717 	ldw	r17,28(sp)
   48348:	dc000617 	ldw	r16,24(sp)
   4834c:	dec01004 	addi	sp,sp,64
   48350:	f800283a 	ret

00048354 <__pow5mult>:
   48354:	defffb04 	addi	sp,sp,-20
   48358:	dcc00315 	stw	r19,12(sp)
   4835c:	dc800215 	stw	r18,8(sp)
   48360:	dc000015 	stw	r16,0(sp)
   48364:	dfc00415 	stw	ra,16(sp)
   48368:	dc400115 	stw	r17,4(sp)
   4836c:	308000cc 	andi	r2,r6,3
   48370:	3021883a 	mov	r16,r6
   48374:	2027883a 	mov	r19,r4
   48378:	2825883a 	mov	r18,r5
   4837c:	10002e1e 	bne	r2,zero,48438 <__pow5mult+0xe4>
   48380:	8021d0ba 	srai	r16,r16,2
   48384:	80001a26 	beq	r16,zero,483f0 <__pow5mult+0x9c>
   48388:	9c401217 	ldw	r17,72(r19)
   4838c:	8800061e 	bne	r17,zero,483a8 <__pow5mult+0x54>
   48390:	00003406 	br	48464 <__pow5mult+0x110>
   48394:	8021d07a 	srai	r16,r16,1
   48398:	80001526 	beq	r16,zero,483f0 <__pow5mult+0x9c>
   4839c:	88c00017 	ldw	r3,0(r17)
   483a0:	18001b26 	beq	r3,zero,48410 <__pow5mult+0xbc>
   483a4:	1823883a 	mov	r17,r3
   483a8:	80c0004c 	andi	r3,r16,1
   483ac:	183ff926 	beq	r3,zero,48394 <__pow5mult+0x40>
   483b0:	900b883a 	mov	r5,r18
   483b4:	880d883a 	mov	r6,r17
   483b8:	9809883a 	mov	r4,r19
   483bc:	00480fc0 	call	480fc <__multiply>
   483c0:	90001b26 	beq	r18,zero,48430 <__pow5mult+0xdc>
   483c4:	91000117 	ldw	r4,4(r18)
   483c8:	98c01317 	ldw	r3,76(r19)
   483cc:	8021d07a 	srai	r16,r16,1
   483d0:	2109883a 	add	r4,r4,r4
   483d4:	2109883a 	add	r4,r4,r4
   483d8:	1907883a 	add	r3,r3,r4
   483dc:	19000017 	ldw	r4,0(r3)
   483e0:	91000015 	stw	r4,0(r18)
   483e4:	1c800015 	stw	r18,0(r3)
   483e8:	1025883a 	mov	r18,r2
   483ec:	803feb1e 	bne	r16,zero,4839c <__pow5mult+0x48>
   483f0:	9005883a 	mov	r2,r18
   483f4:	dfc00417 	ldw	ra,16(sp)
   483f8:	dcc00317 	ldw	r19,12(sp)
   483fc:	dc800217 	ldw	r18,8(sp)
   48400:	dc400117 	ldw	r17,4(sp)
   48404:	dc000017 	ldw	r16,0(sp)
   48408:	dec00504 	addi	sp,sp,20
   4840c:	f800283a 	ret
   48410:	880b883a 	mov	r5,r17
   48414:	880d883a 	mov	r6,r17
   48418:	9809883a 	mov	r4,r19
   4841c:	00480fc0 	call	480fc <__multiply>
   48420:	88800015 	stw	r2,0(r17)
   48424:	10000015 	stw	zero,0(r2)
   48428:	1023883a 	mov	r17,r2
   4842c:	003fde06 	br	483a8 <__pow5mult+0x54>
   48430:	1025883a 	mov	r18,r2
   48434:	003fd706 	br	48394 <__pow5mult+0x40>
   48438:	10bfffc4 	addi	r2,r2,-1
   4843c:	1085883a 	add	r2,r2,r2
   48440:	00c00174 	movhi	r3,5
   48444:	18fa0504 	addi	r3,r3,-6124
   48448:	1085883a 	add	r2,r2,r2
   4844c:	1885883a 	add	r2,r3,r2
   48450:	11800017 	ldw	r6,0(r2)
   48454:	000f883a 	mov	r7,zero
   48458:	0047d600 	call	47d60 <__multadd>
   4845c:	1025883a 	mov	r18,r2
   48460:	003fc706 	br	48380 <__pow5mult+0x2c>
   48464:	9809883a 	mov	r4,r19
   48468:	01409c44 	movi	r5,625
   4846c:	00480c00 	call	480c0 <__i2b>
   48470:	98801215 	stw	r2,72(r19)
   48474:	1023883a 	mov	r17,r2
   48478:	10000015 	stw	zero,0(r2)
   4847c:	003fca06 	br	483a8 <__pow5mult+0x54>

00048480 <__lshift>:
   48480:	defff904 	addi	sp,sp,-28
   48484:	dd400515 	stw	r21,20(sp)
   48488:	dc400115 	stw	r17,4(sp)
   4848c:	2d400417 	ldw	r21,16(r5)
   48490:	3023d17a 	srai	r17,r6,5
   48494:	28800217 	ldw	r2,8(r5)
   48498:	dd000415 	stw	r20,16(sp)
   4849c:	8d6b883a 	add	r21,r17,r21
   484a0:	dcc00315 	stw	r19,12(sp)
   484a4:	dc800215 	stw	r18,8(sp)
   484a8:	dc000015 	stw	r16,0(sp)
   484ac:	dfc00615 	stw	ra,24(sp)
   484b0:	ac000044 	addi	r16,r21,1
   484b4:	2825883a 	mov	r18,r5
   484b8:	3029883a 	mov	r20,r6
   484bc:	2027883a 	mov	r19,r4
   484c0:	29400117 	ldw	r5,4(r5)
   484c4:	1400030e 	bge	r2,r16,484d4 <__lshift+0x54>
   484c8:	1085883a 	add	r2,r2,r2
   484cc:	29400044 	addi	r5,r5,1
   484d0:	143ffd16 	blt	r2,r16,484c8 <__lshift+0x48>
   484d4:	9809883a 	mov	r4,r19
   484d8:	0047c900 	call	47c90 <_Balloc>
   484dc:	10c00504 	addi	r3,r2,20
   484e0:	0440090e 	bge	zero,r17,48508 <__lshift+0x88>
   484e4:	000f883a 	mov	r7,zero
   484e8:	18000015 	stw	zero,0(r3)
   484ec:	39c00044 	addi	r7,r7,1
   484f0:	18c00104 	addi	r3,r3,4
   484f4:	3c7ffc1e 	bne	r7,r17,484e8 <__lshift+0x68>
   484f8:	38c00144 	addi	r3,r7,5
   484fc:	18c7883a 	add	r3,r3,r3
   48500:	18c7883a 	add	r3,r3,r3
   48504:	10c7883a 	add	r3,r2,r3
   48508:	92000417 	ldw	r8,16(r18)
   4850c:	a18007cc 	andi	r6,r20,31
   48510:	91c00504 	addi	r7,r18,20
   48514:	42000144 	addi	r8,r8,5
   48518:	4211883a 	add	r8,r8,r8
   4851c:	4211883a 	add	r8,r8,r8
   48520:	9211883a 	add	r8,r18,r8
   48524:	30002226 	beq	r6,zero,485b0 <__lshift+0x130>
   48528:	02800804 	movi	r10,32
   4852c:	5195c83a 	sub	r10,r10,r6
   48530:	000b883a 	mov	r5,zero
   48534:	3a400017 	ldw	r9,0(r7)
   48538:	18c00104 	addi	r3,r3,4
   4853c:	39c00104 	addi	r7,r7,4
   48540:	4992983a 	sll	r9,r9,r6
   48544:	2a4ab03a 	or	r5,r5,r9
   48548:	197fff15 	stw	r5,-4(r3)
   4854c:	397fff17 	ldw	r5,-4(r7)
   48550:	2a8ad83a 	srl	r5,r5,r10
   48554:	3a3ff736 	bltu	r7,r8,48534 <__lshift+0xb4>
   48558:	19400015 	stw	r5,0(r3)
   4855c:	28000126 	beq	r5,zero,48564 <__lshift+0xe4>
   48560:	ac000084 	addi	r16,r21,2
   48564:	91000117 	ldw	r4,4(r18)
   48568:	98c01317 	ldw	r3,76(r19)
   4856c:	843fffc4 	addi	r16,r16,-1
   48570:	2109883a 	add	r4,r4,r4
   48574:	2109883a 	add	r4,r4,r4
   48578:	1907883a 	add	r3,r3,r4
   4857c:	19000017 	ldw	r4,0(r3)
   48580:	14000415 	stw	r16,16(r2)
   48584:	91000015 	stw	r4,0(r18)
   48588:	1c800015 	stw	r18,0(r3)
   4858c:	dfc00617 	ldw	ra,24(sp)
   48590:	dd400517 	ldw	r21,20(sp)
   48594:	dd000417 	ldw	r20,16(sp)
   48598:	dcc00317 	ldw	r19,12(sp)
   4859c:	dc800217 	ldw	r18,8(sp)
   485a0:	dc400117 	ldw	r17,4(sp)
   485a4:	dc000017 	ldw	r16,0(sp)
   485a8:	dec00704 	addi	sp,sp,28
   485ac:	f800283a 	ret
   485b0:	39400017 	ldw	r5,0(r7)
   485b4:	18c00104 	addi	r3,r3,4
   485b8:	39c00104 	addi	r7,r7,4
   485bc:	197fff15 	stw	r5,-4(r3)
   485c0:	3a3fe82e 	bgeu	r7,r8,48564 <__lshift+0xe4>
   485c4:	39400017 	ldw	r5,0(r7)
   485c8:	18c00104 	addi	r3,r3,4
   485cc:	39c00104 	addi	r7,r7,4
   485d0:	197fff15 	stw	r5,-4(r3)
   485d4:	3a3ff636 	bltu	r7,r8,485b0 <__lshift+0x130>
   485d8:	003fe206 	br	48564 <__lshift+0xe4>

000485dc <__mcmp>:
   485dc:	20800417 	ldw	r2,16(r4)
   485e0:	28c00417 	ldw	r3,16(r5)
   485e4:	10c5c83a 	sub	r2,r2,r3
   485e8:	10000f1e 	bne	r2,zero,48628 <__mcmp+0x4c>
   485ec:	18c00144 	addi	r3,r3,5
   485f0:	18c7883a 	add	r3,r3,r3
   485f4:	18c7883a 	add	r3,r3,r3
   485f8:	21c00504 	addi	r7,r4,20
   485fc:	28cb883a 	add	r5,r5,r3
   48600:	20c9883a 	add	r4,r4,r3
   48604:	213fff04 	addi	r4,r4,-4
   48608:	297fff04 	addi	r5,r5,-4
   4860c:	21800017 	ldw	r6,0(r4)
   48610:	28c00017 	ldw	r3,0(r5)
   48614:	30c0021e 	bne	r6,r3,48620 <__mcmp+0x44>
   48618:	393ffa36 	bltu	r7,r4,48604 <__mcmp+0x28>
   4861c:	f800283a 	ret
   48620:	30c00236 	bltu	r6,r3,4862c <__mcmp+0x50>
   48624:	00800044 	movi	r2,1
   48628:	f800283a 	ret
   4862c:	00bfffc4 	movi	r2,-1
   48630:	f800283a 	ret

00048634 <__mdiff>:
   48634:	defffb04 	addi	sp,sp,-20
   48638:	dc000015 	stw	r16,0(sp)
   4863c:	2821883a 	mov	r16,r5
   48640:	dc800215 	stw	r18,8(sp)
   48644:	300b883a 	mov	r5,r6
   48648:	2025883a 	mov	r18,r4
   4864c:	8009883a 	mov	r4,r16
   48650:	dc400115 	stw	r17,4(sp)
   48654:	dfc00415 	stw	ra,16(sp)
   48658:	dcc00315 	stw	r19,12(sp)
   4865c:	3023883a 	mov	r17,r6
   48660:	00485dc0 	call	485dc <__mcmp>
   48664:	10005026 	beq	r2,zero,487a8 <__mdiff+0x174>
   48668:	10004a16 	blt	r2,zero,48794 <__mdiff+0x160>
   4866c:	0027883a 	mov	r19,zero
   48670:	81400117 	ldw	r5,4(r16)
   48674:	9009883a 	mov	r4,r18
   48678:	0047c900 	call	47c90 <_Balloc>
   4867c:	82400417 	ldw	r9,16(r16)
   48680:	89800417 	ldw	r6,16(r17)
   48684:	14c00315 	stw	r19,12(r2)
   48688:	4b800144 	addi	r14,r9,5
   4868c:	31800144 	addi	r6,r6,5
   48690:	739d883a 	add	r14,r14,r14
   48694:	318d883a 	add	r6,r6,r6
   48698:	739d883a 	add	r14,r14,r14
   4869c:	318d883a 	add	r6,r6,r6
   486a0:	81c00504 	addi	r7,r16,20
   486a4:	839d883a 	add	r14,r16,r14
   486a8:	8a000504 	addi	r8,r17,20
   486ac:	898d883a 	add	r6,r17,r6
   486b0:	10c00504 	addi	r3,r2,20
   486b4:	0009883a 	mov	r4,zero
   486b8:	3b000017 	ldw	r12,0(r7)
   486bc:	42c00017 	ldw	r11,0(r8)
   486c0:	42000104 	addi	r8,r8,4
   486c4:	62bfffcc 	andi	r10,r12,65535
   486c8:	5b7fffcc 	andi	r13,r11,65535
   486cc:	5109883a 	add	r4,r10,r4
   486d0:	2355c83a 	sub	r10,r4,r13
   486d4:	5816d43a 	srli	r11,r11,16
   486d8:	6008d43a 	srli	r4,r12,16
   486dc:	501bd43a 	srai	r13,r10,16
   486e0:	1a80000d 	sth	r10,0(r3)
   486e4:	22c9c83a 	sub	r4,r4,r11
   486e8:	2349883a 	add	r4,r4,r13
   486ec:	1900008d 	sth	r4,2(r3)
   486f0:	39c00104 	addi	r7,r7,4
   486f4:	2009d43a 	srai	r4,r4,16
   486f8:	18c00104 	addi	r3,r3,4
   486fc:	41bfee36 	bltu	r8,r6,486b8 <__mdiff+0x84>
   48700:	180b883a 	mov	r5,r3
   48704:	3815883a 	mov	r10,r7
   48708:	3b80132e 	bgeu	r7,r14,48758 <__mdiff+0x124>
   4870c:	3a000017 	ldw	r8,0(r7)
   48710:	18c00104 	addi	r3,r3,4
   48714:	39c00104 	addi	r7,r7,4
   48718:	41bfffcc 	andi	r6,r8,65535
   4871c:	310d883a 	add	r6,r6,r4
   48720:	3009d43a 	srai	r4,r6,16
   48724:	4010d43a 	srli	r8,r8,16
   48728:	19bfff0d 	sth	r6,-4(r3)
   4872c:	2209883a 	add	r4,r4,r8
   48730:	193fff8d 	sth	r4,-2(r3)
   48734:	2009d43a 	srai	r4,r4,16
   48738:	3bbff436 	bltu	r7,r14,4870c <__mdiff+0xd8>
   4873c:	0286303a 	nor	r3,zero,r10
   48740:	1b87883a 	add	r3,r3,r14
   48744:	1806d0ba 	srli	r3,r3,2
   48748:	18c00044 	addi	r3,r3,1
   4874c:	18c7883a 	add	r3,r3,r3
   48750:	18c7883a 	add	r3,r3,r3
   48754:	28c7883a 	add	r3,r5,r3
   48758:	193fff17 	ldw	r4,-4(r3)
   4875c:	18ffff04 	addi	r3,r3,-4
   48760:	2000041e 	bne	r4,zero,48774 <__mdiff+0x140>
   48764:	18ffff04 	addi	r3,r3,-4
   48768:	19000017 	ldw	r4,0(r3)
   4876c:	4a7fffc4 	addi	r9,r9,-1
   48770:	203ffc26 	beq	r4,zero,48764 <__mdiff+0x130>
   48774:	12400415 	stw	r9,16(r2)
   48778:	dfc00417 	ldw	ra,16(sp)
   4877c:	dcc00317 	ldw	r19,12(sp)
   48780:	dc800217 	ldw	r18,8(sp)
   48784:	dc400117 	ldw	r17,4(sp)
   48788:	dc000017 	ldw	r16,0(sp)
   4878c:	dec00504 	addi	sp,sp,20
   48790:	f800283a 	ret
   48794:	8005883a 	mov	r2,r16
   48798:	04c00044 	movi	r19,1
   4879c:	8821883a 	mov	r16,r17
   487a0:	1023883a 	mov	r17,r2
   487a4:	003fb206 	br	48670 <__mdiff+0x3c>
   487a8:	9009883a 	mov	r4,r18
   487ac:	000b883a 	mov	r5,zero
   487b0:	0047c900 	call	47c90 <_Balloc>
   487b4:	00c00044 	movi	r3,1
   487b8:	10c00415 	stw	r3,16(r2)
   487bc:	10000515 	stw	zero,20(r2)
   487c0:	dfc00417 	ldw	ra,16(sp)
   487c4:	dcc00317 	ldw	r19,12(sp)
   487c8:	dc800217 	ldw	r18,8(sp)
   487cc:	dc400117 	ldw	r17,4(sp)
   487d0:	dc000017 	ldw	r16,0(sp)
   487d4:	dec00504 	addi	sp,sp,20
   487d8:	f800283a 	ret

000487dc <__ulp>:
   487dc:	295ffc2c 	andhi	r5,r5,32752
   487e0:	00bf3034 	movhi	r2,64704
   487e4:	2887883a 	add	r3,r5,r2
   487e8:	00c0020e 	bge	zero,r3,487f4 <__ulp+0x18>
   487ec:	0005883a 	mov	r2,zero
   487f0:	f800283a 	ret
   487f4:	00c7c83a 	sub	r3,zero,r3
   487f8:	1805d53a 	srai	r2,r3,20
   487fc:	00c004c4 	movi	r3,19
   48800:	18800a0e 	bge	r3,r2,4882c <__ulp+0x50>
   48804:	01000c84 	movi	r4,50
   48808:	0007883a 	mov	r3,zero
   4880c:	20800516 	blt	r4,r2,48824 <__ulp+0x48>
   48810:	01000cc4 	movi	r4,51
   48814:	2085c83a 	sub	r2,r4,r2
   48818:	01000044 	movi	r4,1
   4881c:	2084983a 	sll	r2,r4,r2
   48820:	f800283a 	ret
   48824:	00800044 	movi	r2,1
   48828:	f800283a 	ret
   4882c:	00c00234 	movhi	r3,8
   48830:	1887d83a 	sra	r3,r3,r2
   48834:	0005883a 	mov	r2,zero
   48838:	f800283a 	ret

0004883c <__b2d>:
   4883c:	defffa04 	addi	sp,sp,-24
   48840:	dc000015 	stw	r16,0(sp)
   48844:	24000417 	ldw	r16,16(r4)
   48848:	dc400115 	stw	r17,4(sp)
   4884c:	dcc00315 	stw	r19,12(sp)
   48850:	84000144 	addi	r16,r16,5
   48854:	8421883a 	add	r16,r16,r16
   48858:	8421883a 	add	r16,r16,r16
   4885c:	2421883a 	add	r16,r4,r16
   48860:	847fff17 	ldw	r17,-4(r16)
   48864:	24c00504 	addi	r19,r4,20
   48868:	dd000415 	stw	r20,16(sp)
   4886c:	8809883a 	mov	r4,r17
   48870:	dc800215 	stw	r18,8(sp)
   48874:	2829883a 	mov	r20,r5
   48878:	dfc00515 	stw	ra,20(sp)
   4887c:	0047fa80 	call	47fa8 <__hi0bits>
   48880:	00c00804 	movi	r3,32
   48884:	1887c83a 	sub	r3,r3,r2
   48888:	a0c00015 	stw	r3,0(r20)
   4888c:	00c00284 	movi	r3,10
   48890:	84bfff04 	addi	r18,r16,-4
   48894:	18801216 	blt	r3,r2,488e0 <__b2d+0xa4>
   48898:	010002c4 	movi	r4,11
   4889c:	2089c83a 	sub	r4,r4,r2
   488a0:	8906d83a 	srl	r3,r17,r4
   488a4:	18cffc34 	orhi	r3,r3,16368
   488a8:	9c80322e 	bgeu	r19,r18,48974 <__b2d+0x138>
   488ac:	817ffe17 	ldw	r5,-8(r16)
   488b0:	2908d83a 	srl	r4,r5,r4
   488b4:	10800544 	addi	r2,r2,21
   488b8:	88a2983a 	sll	r17,r17,r2
   488bc:	2444b03a 	or	r2,r4,r17
   488c0:	dfc00517 	ldw	ra,20(sp)
   488c4:	dd000417 	ldw	r20,16(sp)
   488c8:	dcc00317 	ldw	r19,12(sp)
   488cc:	dc800217 	ldw	r18,8(sp)
   488d0:	dc400117 	ldw	r17,4(sp)
   488d4:	dc000017 	ldw	r16,0(sp)
   488d8:	dec00604 	addi	sp,sp,24
   488dc:	f800283a 	ret
   488e0:	9c801636 	bltu	r19,r18,4893c <__b2d+0x100>
   488e4:	113ffd44 	addi	r4,r2,-11
   488e8:	000b883a 	mov	r5,zero
   488ec:	20001726 	beq	r4,zero,4894c <__b2d+0x110>
   488f0:	00c00ac4 	movi	r3,43
   488f4:	1885c83a 	sub	r2,r3,r2
   488f8:	8906983a 	sll	r3,r17,r4
   488fc:	288cd83a 	srl	r6,r5,r2
   48900:	18cffc34 	orhi	r3,r3,16368
   48904:	1986b03a 	or	r3,r3,r6
   48908:	9c801c2e 	bgeu	r19,r18,4897c <__b2d+0x140>
   4890c:	91bfff17 	ldw	r6,-4(r18)
   48910:	3084d83a 	srl	r2,r6,r2
   48914:	2908983a 	sll	r4,r5,r4
   48918:	1104b03a 	or	r2,r2,r4
   4891c:	dfc00517 	ldw	ra,20(sp)
   48920:	dd000417 	ldw	r20,16(sp)
   48924:	dcc00317 	ldw	r19,12(sp)
   48928:	dc800217 	ldw	r18,8(sp)
   4892c:	dc400117 	ldw	r17,4(sp)
   48930:	dc000017 	ldw	r16,0(sp)
   48934:	dec00604 	addi	sp,sp,24
   48938:	f800283a 	ret
   4893c:	113ffd44 	addi	r4,r2,-11
   48940:	84bffe04 	addi	r18,r16,-8
   48944:	817ffe17 	ldw	r5,-8(r16)
   48948:	203fe91e 	bne	r4,zero,488f0 <__b2d+0xb4>
   4894c:	88cffc34 	orhi	r3,r17,16368
   48950:	2805883a 	mov	r2,r5
   48954:	dfc00517 	ldw	ra,20(sp)
   48958:	dd000417 	ldw	r20,16(sp)
   4895c:	dcc00317 	ldw	r19,12(sp)
   48960:	dc800217 	ldw	r18,8(sp)
   48964:	dc400117 	ldw	r17,4(sp)
   48968:	dc000017 	ldw	r16,0(sp)
   4896c:	dec00604 	addi	sp,sp,24
   48970:	f800283a 	ret
   48974:	0009883a 	mov	r4,zero
   48978:	003fce06 	br	488b4 <__b2d+0x78>
   4897c:	0005883a 	mov	r2,zero
   48980:	003fe406 	br	48914 <__b2d+0xd8>

00048984 <__d2b>:
   48984:	defff804 	addi	sp,sp,-32
   48988:	dc400315 	stw	r17,12(sp)
   4898c:	3023883a 	mov	r17,r6
   48990:	dc800415 	stw	r18,16(sp)
   48994:	8824907a 	slli	r18,r17,1
   48998:	dcc00515 	stw	r19,20(sp)
   4899c:	2827883a 	mov	r19,r5
   489a0:	9024d57a 	srli	r18,r18,21
   489a4:	01400044 	movi	r5,1
   489a8:	dd000615 	stw	r20,24(sp)
   489ac:	dc000215 	stw	r16,8(sp)
   489b0:	dfc00715 	stw	ra,28(sp)
   489b4:	3829883a 	mov	r20,r7
   489b8:	0047c900 	call	47c90 <_Balloc>
   489bc:	1021883a 	mov	r16,r2
   489c0:	00800434 	movhi	r2,16
   489c4:	10bfffc4 	addi	r2,r2,-1
   489c8:	88a2703a 	and	r17,r17,r2
   489cc:	90000126 	beq	r18,zero,489d4 <__d2b+0x50>
   489d0:	8c400434 	orhi	r17,r17,16
   489d4:	dc400015 	stw	r17,0(sp)
   489d8:	98002226 	beq	r19,zero,48a64 <__d2b+0xe0>
   489dc:	d9000104 	addi	r4,sp,4
   489e0:	dcc00115 	stw	r19,4(sp)
   489e4:	00480100 	call	48010 <__lo0bits>
   489e8:	d8c00017 	ldw	r3,0(sp)
   489ec:	10002d1e 	bne	r2,zero,48aa4 <__d2b+0x120>
   489f0:	d9000117 	ldw	r4,4(sp)
   489f4:	81000515 	stw	r4,20(r16)
   489f8:	1823003a 	cmpeq	r17,r3,zero
   489fc:	01000084 	movi	r4,2
   48a00:	2463c83a 	sub	r17,r4,r17
   48a04:	80c00615 	stw	r3,24(r16)
   48a08:	84400415 	stw	r17,16(r16)
   48a0c:	90001d1e 	bne	r18,zero,48a84 <__d2b+0x100>
   48a10:	88c00104 	addi	r3,r17,4
   48a14:	18c7883a 	add	r3,r3,r3
   48a18:	18c7883a 	add	r3,r3,r3
   48a1c:	80c7883a 	add	r3,r16,r3
   48a20:	19000017 	ldw	r4,0(r3)
   48a24:	10bef384 	addi	r2,r2,-1074
   48a28:	a0800015 	stw	r2,0(r20)
   48a2c:	0047fa80 	call	47fa8 <__hi0bits>
   48a30:	8822917a 	slli	r17,r17,5
   48a34:	d8c00817 	ldw	r3,32(sp)
   48a38:	8885c83a 	sub	r2,r17,r2
   48a3c:	18800015 	stw	r2,0(r3)
   48a40:	8005883a 	mov	r2,r16
   48a44:	dfc00717 	ldw	ra,28(sp)
   48a48:	dd000617 	ldw	r20,24(sp)
   48a4c:	dcc00517 	ldw	r19,20(sp)
   48a50:	dc800417 	ldw	r18,16(sp)
   48a54:	dc400317 	ldw	r17,12(sp)
   48a58:	dc000217 	ldw	r16,8(sp)
   48a5c:	dec00804 	addi	sp,sp,32
   48a60:	f800283a 	ret
   48a64:	d809883a 	mov	r4,sp
   48a68:	00480100 	call	48010 <__lo0bits>
   48a6c:	d8c00017 	ldw	r3,0(sp)
   48a70:	04400044 	movi	r17,1
   48a74:	84400415 	stw	r17,16(r16)
   48a78:	80c00515 	stw	r3,20(r16)
   48a7c:	10800804 	addi	r2,r2,32
   48a80:	903fe326 	beq	r18,zero,48a10 <__d2b+0x8c>
   48a84:	00c00d44 	movi	r3,53
   48a88:	94bef344 	addi	r18,r18,-1075
   48a8c:	90a5883a 	add	r18,r18,r2
   48a90:	1885c83a 	sub	r2,r3,r2
   48a94:	d8c00817 	ldw	r3,32(sp)
   48a98:	a4800015 	stw	r18,0(r20)
   48a9c:	18800015 	stw	r2,0(r3)
   48aa0:	003fe706 	br	48a40 <__d2b+0xbc>
   48aa4:	01000804 	movi	r4,32
   48aa8:	2089c83a 	sub	r4,r4,r2
   48aac:	1908983a 	sll	r4,r3,r4
   48ab0:	d9400117 	ldw	r5,4(sp)
   48ab4:	1886d83a 	srl	r3,r3,r2
   48ab8:	2148b03a 	or	r4,r4,r5
   48abc:	81000515 	stw	r4,20(r16)
   48ac0:	d8c00015 	stw	r3,0(sp)
   48ac4:	003fcc06 	br	489f8 <__d2b+0x74>

00048ac8 <__ratio>:
   48ac8:	defff904 	addi	sp,sp,-28
   48acc:	dc400315 	stw	r17,12(sp)
   48ad0:	2823883a 	mov	r17,r5
   48ad4:	d9400104 	addi	r5,sp,4
   48ad8:	dfc00615 	stw	ra,24(sp)
   48adc:	dcc00515 	stw	r19,20(sp)
   48ae0:	dc800415 	stw	r18,16(sp)
   48ae4:	2027883a 	mov	r19,r4
   48ae8:	dc000215 	stw	r16,8(sp)
   48aec:	004883c0 	call	4883c <__b2d>
   48af0:	8809883a 	mov	r4,r17
   48af4:	d80b883a 	mov	r5,sp
   48af8:	1025883a 	mov	r18,r2
   48afc:	1821883a 	mov	r16,r3
   48b00:	004883c0 	call	4883c <__b2d>
   48b04:	99400417 	ldw	r5,16(r19)
   48b08:	89000417 	ldw	r4,16(r17)
   48b0c:	d9800117 	ldw	r6,4(sp)
   48b10:	2909c83a 	sub	r4,r5,r4
   48b14:	d9400017 	ldw	r5,0(sp)
   48b18:	2008917a 	slli	r4,r4,5
   48b1c:	314bc83a 	sub	r5,r6,r5
   48b20:	290b883a 	add	r5,r5,r4
   48b24:	01400e0e 	bge	zero,r5,48b60 <__ratio+0x98>
   48b28:	280a953a 	slli	r5,r5,20
   48b2c:	2c21883a 	add	r16,r5,r16
   48b30:	9009883a 	mov	r4,r18
   48b34:	800b883a 	mov	r5,r16
   48b38:	100d883a 	mov	r6,r2
   48b3c:	180f883a 	mov	r7,r3
   48b40:	0040f280 	call	40f28 <__divdf3>
   48b44:	dfc00617 	ldw	ra,24(sp)
   48b48:	dcc00517 	ldw	r19,20(sp)
   48b4c:	dc800417 	ldw	r18,16(sp)
   48b50:	dc400317 	ldw	r17,12(sp)
   48b54:	dc000217 	ldw	r16,8(sp)
   48b58:	dec00704 	addi	sp,sp,28
   48b5c:	f800283a 	ret
   48b60:	280a953a 	slli	r5,r5,20
   48b64:	1947c83a 	sub	r3,r3,r5
   48b68:	003ff106 	br	48b30 <__ratio+0x68>

00048b6c <_mprec_log10>:
   48b6c:	defffe04 	addi	sp,sp,-8
   48b70:	dc000015 	stw	r16,0(sp)
   48b74:	dfc00115 	stw	ra,4(sp)
   48b78:	008005c4 	movi	r2,23
   48b7c:	2021883a 	mov	r16,r4
   48b80:	11000d0e 	bge	r2,r4,48bb8 <_mprec_log10+0x4c>
   48b84:	0005883a 	mov	r2,zero
   48b88:	00cffc34 	movhi	r3,16368
   48b8c:	843fffc4 	addi	r16,r16,-1
   48b90:	1009883a 	mov	r4,r2
   48b94:	180b883a 	mov	r5,r3
   48b98:	000d883a 	mov	r6,zero
   48b9c:	01d00934 	movhi	r7,16420
   48ba0:	004a6ec0 	call	4a6ec <__muldf3>
   48ba4:	803ff91e 	bne	r16,zero,48b8c <_mprec_log10+0x20>
   48ba8:	dfc00117 	ldw	ra,4(sp)
   48bac:	dc000017 	ldw	r16,0(sp)
   48bb0:	dec00204 	addi	sp,sp,8
   48bb4:	f800283a 	ret
   48bb8:	202090fa 	slli	r16,r4,3
   48bbc:	00800174 	movhi	r2,5
   48bc0:	10b9d304 	addi	r2,r2,-6324
   48bc4:	1421883a 	add	r16,r2,r16
   48bc8:	80800017 	ldw	r2,0(r16)
   48bcc:	80c00117 	ldw	r3,4(r16)
   48bd0:	dfc00117 	ldw	ra,4(sp)
   48bd4:	dc000017 	ldw	r16,0(sp)
   48bd8:	dec00204 	addi	sp,sp,8
   48bdc:	f800283a 	ret

00048be0 <__copybits>:
   48be0:	297fffc4 	addi	r5,r5,-1
   48be4:	31c00417 	ldw	r7,16(r6)
   48be8:	2811d17a 	srai	r8,r5,5
   48bec:	30800504 	addi	r2,r6,20
   48bf0:	39c00144 	addi	r7,r7,5
   48bf4:	42000044 	addi	r8,r8,1
   48bf8:	39cf883a 	add	r7,r7,r7
   48bfc:	4211883a 	add	r8,r8,r8
   48c00:	39cf883a 	add	r7,r7,r7
   48c04:	4211883a 	add	r8,r8,r8
   48c08:	31cf883a 	add	r7,r6,r7
   48c0c:	2211883a 	add	r8,r4,r8
   48c10:	11c00d2e 	bgeu	r2,r7,48c48 <__copybits+0x68>
   48c14:	2007883a 	mov	r3,r4
   48c18:	11400017 	ldw	r5,0(r2)
   48c1c:	18c00104 	addi	r3,r3,4
   48c20:	10800104 	addi	r2,r2,4
   48c24:	197fff15 	stw	r5,-4(r3)
   48c28:	11fffb36 	bltu	r2,r7,48c18 <__copybits+0x38>
   48c2c:	3985c83a 	sub	r2,r7,r6
   48c30:	10bffac4 	addi	r2,r2,-21
   48c34:	1004d0ba 	srli	r2,r2,2
   48c38:	10800044 	addi	r2,r2,1
   48c3c:	1085883a 	add	r2,r2,r2
   48c40:	1085883a 	add	r2,r2,r2
   48c44:	2089883a 	add	r4,r4,r2
   48c48:	2200032e 	bgeu	r4,r8,48c58 <__copybits+0x78>
   48c4c:	20000015 	stw	zero,0(r4)
   48c50:	21000104 	addi	r4,r4,4
   48c54:	223ffd36 	bltu	r4,r8,48c4c <__copybits+0x6c>
   48c58:	f800283a 	ret

00048c5c <__any_on>:
   48c5c:	21800417 	ldw	r6,16(r4)
   48c60:	2805d17a 	srai	r2,r5,5
   48c64:	20c00504 	addi	r3,r4,20
   48c68:	30800f0e 	bge	r6,r2,48ca8 <__any_on+0x4c>
   48c6c:	3005883a 	mov	r2,r6
   48c70:	10800144 	addi	r2,r2,5
   48c74:	1085883a 	add	r2,r2,r2
   48c78:	1085883a 	add	r2,r2,r2
   48c7c:	2089883a 	add	r4,r4,r2
   48c80:	1900152e 	bgeu	r3,r4,48cd8 <__any_on+0x7c>
   48c84:	20bfff17 	ldw	r2,-4(r4)
   48c88:	213fff04 	addi	r4,r4,-4
   48c8c:	1000041e 	bne	r2,zero,48ca0 <__any_on+0x44>
   48c90:	1900112e 	bgeu	r3,r4,48cd8 <__any_on+0x7c>
   48c94:	213fff04 	addi	r4,r4,-4
   48c98:	20800017 	ldw	r2,0(r4)
   48c9c:	103ffc26 	beq	r2,zero,48c90 <__any_on+0x34>
   48ca0:	00800044 	movi	r2,1
   48ca4:	f800283a 	ret
   48ca8:	11bff10e 	bge	r2,r6,48c70 <__any_on+0x14>
   48cac:	294007cc 	andi	r5,r5,31
   48cb0:	283fef26 	beq	r5,zero,48c70 <__any_on+0x14>
   48cb4:	11800144 	addi	r6,r2,5
   48cb8:	318d883a 	add	r6,r6,r6
   48cbc:	318d883a 	add	r6,r6,r6
   48cc0:	218d883a 	add	r6,r4,r6
   48cc4:	31800017 	ldw	r6,0(r6)
   48cc8:	314ed83a 	srl	r7,r6,r5
   48ccc:	394a983a 	sll	r5,r7,r5
   48cd0:	29bff31e 	bne	r5,r6,48ca0 <__any_on+0x44>
   48cd4:	003fe606 	br	48c70 <__any_on+0x14>
   48cd8:	0005883a 	mov	r2,zero
   48cdc:	f800283a 	ret

00048ce0 <_read_r>:
   48ce0:	defffd04 	addi	sp,sp,-12
   48ce4:	dc400115 	stw	r17,4(sp)
   48ce8:	dc000015 	stw	r16,0(sp)
   48cec:	2023883a 	mov	r17,r4
   48cf0:	04000174 	movhi	r16,5
   48cf4:	84078604 	addi	r16,r16,7704
   48cf8:	2809883a 	mov	r4,r5
   48cfc:	300b883a 	mov	r5,r6
   48d00:	380d883a 	mov	r6,r7
   48d04:	dfc00215 	stw	ra,8(sp)
   48d08:	80000015 	stw	zero,0(r16)
   48d0c:	004b9500 	call	4b950 <read>
   48d10:	00ffffc4 	movi	r3,-1
   48d14:	10c00526 	beq	r2,r3,48d2c <_read_r+0x4c>
   48d18:	dfc00217 	ldw	ra,8(sp)
   48d1c:	dc400117 	ldw	r17,4(sp)
   48d20:	dc000017 	ldw	r16,0(sp)
   48d24:	dec00304 	addi	sp,sp,12
   48d28:	f800283a 	ret
   48d2c:	80c00017 	ldw	r3,0(r16)
   48d30:	183ff926 	beq	r3,zero,48d18 <_read_r+0x38>
   48d34:	88c00015 	stw	r3,0(r17)
   48d38:	dfc00217 	ldw	ra,8(sp)
   48d3c:	dc400117 	ldw	r17,4(sp)
   48d40:	dc000017 	ldw	r16,0(sp)
   48d44:	dec00304 	addi	sp,sp,12
   48d48:	f800283a 	ret

00048d4c <_realloc_r>:
   48d4c:	defff504 	addi	sp,sp,-44
   48d50:	dd400615 	stw	r21,24(sp)
   48d54:	dc800315 	stw	r18,12(sp)
   48d58:	dc000115 	stw	r16,4(sp)
   48d5c:	dfc00a15 	stw	ra,40(sp)
   48d60:	df000915 	stw	fp,36(sp)
   48d64:	ddc00815 	stw	r23,32(sp)
   48d68:	dd800715 	stw	r22,28(sp)
   48d6c:	dd000515 	stw	r20,20(sp)
   48d70:	dcc00415 	stw	r19,16(sp)
   48d74:	dc400215 	stw	r17,8(sp)
   48d78:	2821883a 	mov	r16,r5
   48d7c:	202b883a 	mov	r21,r4
   48d80:	3025883a 	mov	r18,r6
   48d84:	28009626 	beq	r5,zero,48fe0 <_realloc_r+0x294>
   48d88:	004b6280 	call	4b628 <__malloc_lock>
   48d8c:	80bfff17 	ldw	r2,-4(r16)
   48d90:	04ffff04 	movi	r19,-4
   48d94:	90c002c4 	addi	r3,r18,11
   48d98:	01000584 	movi	r4,22
   48d9c:	85bffe04 	addi	r22,r16,-8
   48da0:	14e6703a 	and	r19,r2,r19
   48da4:	20c0372e 	bgeu	r4,r3,48e84 <_realloc_r+0x138>
   48da8:	047ffe04 	movi	r17,-8
   48dac:	1c62703a 	and	r17,r3,r17
   48db0:	8807883a 	mov	r3,r17
   48db4:	88005a16 	blt	r17,zero,48f20 <_realloc_r+0x1d4>
   48db8:	8c805936 	bltu	r17,r18,48f20 <_realloc_r+0x1d4>
   48dbc:	98c0340e 	bge	r19,r3,48e90 <_realloc_r+0x144>
   48dc0:	07000174 	movhi	fp,5
   48dc4:	e73b1604 	addi	fp,fp,-5032
   48dc8:	e1400217 	ldw	r5,8(fp)
   48dcc:	b4c9883a 	add	r4,r22,r19
   48dd0:	29009026 	beq	r5,r4,49014 <_realloc_r+0x2c8>
   48dd4:	21800117 	ldw	r6,4(r4)
   48dd8:	01ffff84 	movi	r7,-2
   48ddc:	31ce703a 	and	r7,r6,r7
   48de0:	21cf883a 	add	r7,r4,r7
   48de4:	39c00117 	ldw	r7,4(r7)
   48de8:	39c0004c 	andi	r7,r7,1
   48dec:	38004326 	beq	r7,zero,48efc <_realloc_r+0x1b0>
   48df0:	000d883a 	mov	r6,zero
   48df4:	0009883a 	mov	r4,zero
   48df8:	1080004c 	andi	r2,r2,1
   48dfc:	10005a1e 	bne	r2,zero,48f68 <_realloc_r+0x21c>
   48e00:	85fffe17 	ldw	r23,-8(r16)
   48e04:	00bfff04 	movi	r2,-4
   48e08:	b5efc83a 	sub	r23,r22,r23
   48e0c:	b9c00117 	ldw	r7,4(r23)
   48e10:	388e703a 	and	r7,r7,r2
   48e14:	3ccf883a 	add	r7,r7,r19
   48e18:	20005226 	beq	r4,zero,48f64 <_realloc_r+0x218>
   48e1c:	31e9883a 	add	r20,r6,r7
   48e20:	2140c726 	beq	r4,r5,49140 <_realloc_r+0x3f4>
   48e24:	a0c04f16 	blt	r20,r3,48f64 <_realloc_r+0x218>
   48e28:	20800317 	ldw	r2,12(r4)
   48e2c:	20c00217 	ldw	r3,8(r4)
   48e30:	99bfff04 	addi	r6,r19,-4
   48e34:	01000904 	movi	r4,36
   48e38:	18800315 	stw	r2,12(r3)
   48e3c:	10c00215 	stw	r3,8(r2)
   48e40:	b8c00217 	ldw	r3,8(r23)
   48e44:	b8800317 	ldw	r2,12(r23)
   48e48:	bc800204 	addi	r18,r23,8
   48e4c:	18800315 	stw	r2,12(r3)
   48e50:	10c00215 	stw	r3,8(r2)
   48e54:	2180ed36 	bltu	r4,r6,4920c <_realloc_r+0x4c0>
   48e58:	008004c4 	movi	r2,19
   48e5c:	11809b2e 	bgeu	r2,r6,490cc <_realloc_r+0x380>
   48e60:	80800017 	ldw	r2,0(r16)
   48e64:	b8800215 	stw	r2,8(r23)
   48e68:	80800117 	ldw	r2,4(r16)
   48e6c:	b8800315 	stw	r2,12(r23)
   48e70:	008006c4 	movi	r2,27
   48e74:	1180f936 	bltu	r2,r6,4925c <_realloc_r+0x510>
   48e78:	b8800404 	addi	r2,r23,16
   48e7c:	80c00204 	addi	r3,r16,8
   48e80:	00009406 	br	490d4 <_realloc_r+0x388>
   48e84:	00c00404 	movi	r3,16
   48e88:	1823883a 	mov	r17,r3
   48e8c:	003fca06 	br	48db8 <_realloc_r+0x6c>
   48e90:	9829883a 	mov	r20,r19
   48e94:	a447c83a 	sub	r3,r20,r17
   48e98:	010003c4 	movi	r4,15
   48e9c:	1080004c 	andi	r2,r2,1
   48ea0:	20c02336 	bltu	r4,r3,48f30 <_realloc_r+0x1e4>
   48ea4:	1504b03a 	or	r2,r2,r20
   48ea8:	b0800115 	stw	r2,4(r22)
   48eac:	b52d883a 	add	r22,r22,r20
   48eb0:	b0800117 	ldw	r2,4(r22)
   48eb4:	10800054 	ori	r2,r2,1
   48eb8:	b0800115 	stw	r2,4(r22)
   48ebc:	a809883a 	mov	r4,r21
   48ec0:	004b6480 	call	4b648 <__malloc_unlock>
   48ec4:	8025883a 	mov	r18,r16
   48ec8:	9005883a 	mov	r2,r18
   48ecc:	dfc00a17 	ldw	ra,40(sp)
   48ed0:	df000917 	ldw	fp,36(sp)
   48ed4:	ddc00817 	ldw	r23,32(sp)
   48ed8:	dd800717 	ldw	r22,28(sp)
   48edc:	dd400617 	ldw	r21,24(sp)
   48ee0:	dd000517 	ldw	r20,20(sp)
   48ee4:	dcc00417 	ldw	r19,16(sp)
   48ee8:	dc800317 	ldw	r18,12(sp)
   48eec:	dc400217 	ldw	r17,8(sp)
   48ef0:	dc000117 	ldw	r16,4(sp)
   48ef4:	dec00b04 	addi	sp,sp,44
   48ef8:	f800283a 	ret
   48efc:	01ffff04 	movi	r7,-4
   48f00:	31cc703a 	and	r6,r6,r7
   48f04:	34e9883a 	add	r20,r6,r19
   48f08:	a0ffbb16 	blt	r20,r3,48df8 <_realloc_r+0xac>
   48f0c:	20c00317 	ldw	r3,12(r4)
   48f10:	21000217 	ldw	r4,8(r4)
   48f14:	20c00315 	stw	r3,12(r4)
   48f18:	19000215 	stw	r4,8(r3)
   48f1c:	003fdd06 	br	48e94 <_realloc_r+0x148>
   48f20:	00800304 	movi	r2,12
   48f24:	a8800015 	stw	r2,0(r21)
   48f28:	0025883a 	mov	r18,zero
   48f2c:	003fe606 	br	48ec8 <_realloc_r+0x17c>
   48f30:	1444b03a 	or	r2,r2,r17
   48f34:	b0800115 	stw	r2,4(r22)
   48f38:	b44b883a 	add	r5,r22,r17
   48f3c:	18800054 	ori	r2,r3,1
   48f40:	28800115 	stw	r2,4(r5)
   48f44:	28c7883a 	add	r3,r5,r3
   48f48:	18800117 	ldw	r2,4(r3)
   48f4c:	a809883a 	mov	r4,r21
   48f50:	29400204 	addi	r5,r5,8
   48f54:	10800054 	ori	r2,r2,1
   48f58:	18800115 	stw	r2,4(r3)
   48f5c:	0046d300 	call	46d30 <_free_r>
   48f60:	003fd606 	br	48ebc <_realloc_r+0x170>
   48f64:	38c0330e 	bge	r7,r3,49034 <_realloc_r+0x2e8>
   48f68:	900b883a 	mov	r5,r18
   48f6c:	a809883a 	mov	r4,r21
   48f70:	00420200 	call	42020 <_malloc_r>
   48f74:	1025883a 	mov	r18,r2
   48f78:	10001626 	beq	r2,zero,48fd4 <_realloc_r+0x288>
   48f7c:	80bfff17 	ldw	r2,-4(r16)
   48f80:	00ffff84 	movi	r3,-2
   48f84:	913ffe04 	addi	r4,r18,-8
   48f88:	10c6703a 	and	r3,r2,r3
   48f8c:	b0c7883a 	add	r3,r22,r3
   48f90:	20c09926 	beq	r4,r3,491f8 <_realloc_r+0x4ac>
   48f94:	99bfff04 	addi	r6,r19,-4
   48f98:	00800904 	movi	r2,36
   48f9c:	11806436 	bltu	r2,r6,49130 <_realloc_r+0x3e4>
   48fa0:	00c004c4 	movi	r3,19
   48fa4:	19804036 	bltu	r3,r6,490a8 <_realloc_r+0x35c>
   48fa8:	9005883a 	mov	r2,r18
   48fac:	8007883a 	mov	r3,r16
   48fb0:	19000017 	ldw	r4,0(r3)
   48fb4:	11000015 	stw	r4,0(r2)
   48fb8:	19000117 	ldw	r4,4(r3)
   48fbc:	11000115 	stw	r4,4(r2)
   48fc0:	18c00217 	ldw	r3,8(r3)
   48fc4:	10c00215 	stw	r3,8(r2)
   48fc8:	a809883a 	mov	r4,r21
   48fcc:	800b883a 	mov	r5,r16
   48fd0:	0046d300 	call	46d30 <_free_r>
   48fd4:	a809883a 	mov	r4,r21
   48fd8:	004b6480 	call	4b648 <__malloc_unlock>
   48fdc:	003fba06 	br	48ec8 <_realloc_r+0x17c>
   48fe0:	300b883a 	mov	r5,r6
   48fe4:	dfc00a17 	ldw	ra,40(sp)
   48fe8:	df000917 	ldw	fp,36(sp)
   48fec:	ddc00817 	ldw	r23,32(sp)
   48ff0:	dd800717 	ldw	r22,28(sp)
   48ff4:	dd400617 	ldw	r21,24(sp)
   48ff8:	dd000517 	ldw	r20,20(sp)
   48ffc:	dcc00417 	ldw	r19,16(sp)
   49000:	dc800317 	ldw	r18,12(sp)
   49004:	dc400217 	ldw	r17,8(sp)
   49008:	dc000117 	ldw	r16,4(sp)
   4900c:	dec00b04 	addi	sp,sp,44
   49010:	00420201 	jmpi	42020 <_malloc_r>
   49014:	29800117 	ldw	r6,4(r5)
   49018:	013fff04 	movi	r4,-4
   4901c:	89c00404 	addi	r7,r17,16
   49020:	310c703a 	and	r6,r6,r4
   49024:	34c9883a 	add	r4,r6,r19
   49028:	21c0340e 	bge	r4,r7,490fc <_realloc_r+0x3b0>
   4902c:	2809883a 	mov	r4,r5
   49030:	003f7106 	br	48df8 <_realloc_r+0xac>
   49034:	b8800317 	ldw	r2,12(r23)
   49038:	b8c00217 	ldw	r3,8(r23)
   4903c:	99bfff04 	addi	r6,r19,-4
   49040:	01000904 	movi	r4,36
   49044:	18800315 	stw	r2,12(r3)
   49048:	10c00215 	stw	r3,8(r2)
   4904c:	bc800204 	addi	r18,r23,8
   49050:	21807836 	bltu	r4,r6,49234 <_realloc_r+0x4e8>
   49054:	008004c4 	movi	r2,19
   49058:	1180732e 	bgeu	r2,r6,49228 <_realloc_r+0x4dc>
   4905c:	80800017 	ldw	r2,0(r16)
   49060:	b8800215 	stw	r2,8(r23)
   49064:	80800117 	ldw	r2,4(r16)
   49068:	b8800315 	stw	r2,12(r23)
   4906c:	008006c4 	movi	r2,27
   49070:	11808936 	bltu	r2,r6,49298 <_realloc_r+0x54c>
   49074:	b8800404 	addi	r2,r23,16
   49078:	80c00204 	addi	r3,r16,8
   4907c:	19000017 	ldw	r4,0(r3)
   49080:	9021883a 	mov	r16,r18
   49084:	3829883a 	mov	r20,r7
   49088:	11000015 	stw	r4,0(r2)
   4908c:	19000117 	ldw	r4,4(r3)
   49090:	b82d883a 	mov	r22,r23
   49094:	11000115 	stw	r4,4(r2)
   49098:	18c00217 	ldw	r3,8(r3)
   4909c:	10c00215 	stw	r3,8(r2)
   490a0:	b8800117 	ldw	r2,4(r23)
   490a4:	003f7b06 	br	48e94 <_realloc_r+0x148>
   490a8:	80c00017 	ldw	r3,0(r16)
   490ac:	90c00015 	stw	r3,0(r18)
   490b0:	80c00117 	ldw	r3,4(r16)
   490b4:	90c00115 	stw	r3,4(r18)
   490b8:	00c006c4 	movi	r3,27
   490bc:	19804636 	bltu	r3,r6,491d8 <_realloc_r+0x48c>
   490c0:	90800204 	addi	r2,r18,8
   490c4:	80c00204 	addi	r3,r16,8
   490c8:	003fb906 	br	48fb0 <_realloc_r+0x264>
   490cc:	9005883a 	mov	r2,r18
   490d0:	8007883a 	mov	r3,r16
   490d4:	19000017 	ldw	r4,0(r3)
   490d8:	9021883a 	mov	r16,r18
   490dc:	b82d883a 	mov	r22,r23
   490e0:	11000015 	stw	r4,0(r2)
   490e4:	19000117 	ldw	r4,4(r3)
   490e8:	11000115 	stw	r4,4(r2)
   490ec:	18c00217 	ldw	r3,8(r3)
   490f0:	10c00215 	stw	r3,8(r2)
   490f4:	b8800117 	ldw	r2,4(r23)
   490f8:	003f6606 	br	48e94 <_realloc_r+0x148>
   490fc:	2445c83a 	sub	r2,r4,r17
   49100:	b46d883a 	add	r22,r22,r17
   49104:	10800054 	ori	r2,r2,1
   49108:	b0800115 	stw	r2,4(r22)
   4910c:	80bfff17 	ldw	r2,-4(r16)
   49110:	a809883a 	mov	r4,r21
   49114:	e5800215 	stw	r22,8(fp)
   49118:	1080004c 	andi	r2,r2,1
   4911c:	88a2b03a 	or	r17,r17,r2
   49120:	847fff15 	stw	r17,-4(r16)
   49124:	004b6480 	call	4b648 <__malloc_unlock>
   49128:	8025883a 	mov	r18,r16
   4912c:	003f6606 	br	48ec8 <_realloc_r+0x17c>
   49130:	9009883a 	mov	r4,r18
   49134:	800b883a 	mov	r5,r16
   49138:	0047a280 	call	47a28 <memmove>
   4913c:	003fa206 	br	48fc8 <_realloc_r+0x27c>
   49140:	88800404 	addi	r2,r17,16
   49144:	a0bf8716 	blt	r20,r2,48f64 <_realloc_r+0x218>
   49148:	b8800317 	ldw	r2,12(r23)
   4914c:	b8c00217 	ldw	r3,8(r23)
   49150:	99bfff04 	addi	r6,r19,-4
   49154:	01000904 	movi	r4,36
   49158:	18800315 	stw	r2,12(r3)
   4915c:	10c00215 	stw	r3,8(r2)
   49160:	bc800204 	addi	r18,r23,8
   49164:	21806536 	bltu	r4,r6,492fc <_realloc_r+0x5b0>
   49168:	008004c4 	movi	r2,19
   4916c:	1180592e 	bgeu	r2,r6,492d4 <_realloc_r+0x588>
   49170:	80800017 	ldw	r2,0(r16)
   49174:	b8800215 	stw	r2,8(r23)
   49178:	80800117 	ldw	r2,4(r16)
   4917c:	b8800315 	stw	r2,12(r23)
   49180:	008006c4 	movi	r2,27
   49184:	11806136 	bltu	r2,r6,4930c <_realloc_r+0x5c0>
   49188:	b8800404 	addi	r2,r23,16
   4918c:	80c00204 	addi	r3,r16,8
   49190:	19000017 	ldw	r4,0(r3)
   49194:	11000015 	stw	r4,0(r2)
   49198:	19000117 	ldw	r4,4(r3)
   4919c:	11000115 	stw	r4,4(r2)
   491a0:	18c00217 	ldw	r3,8(r3)
   491a4:	10c00215 	stw	r3,8(r2)
   491a8:	a447c83a 	sub	r3,r20,r17
   491ac:	bc45883a 	add	r2,r23,r17
   491b0:	18c00054 	ori	r3,r3,1
   491b4:	10c00115 	stw	r3,4(r2)
   491b8:	b8c00117 	ldw	r3,4(r23)
   491bc:	e0800215 	stw	r2,8(fp)
   491c0:	a809883a 	mov	r4,r21
   491c4:	1880004c 	andi	r2,r3,1
   491c8:	88a2b03a 	or	r17,r17,r2
   491cc:	bc400115 	stw	r17,4(r23)
   491d0:	004b6480 	call	4b648 <__malloc_unlock>
   491d4:	003f3c06 	br	48ec8 <_realloc_r+0x17c>
   491d8:	80c00217 	ldw	r3,8(r16)
   491dc:	90c00215 	stw	r3,8(r18)
   491e0:	80c00317 	ldw	r3,12(r16)
   491e4:	90c00315 	stw	r3,12(r18)
   491e8:	30802426 	beq	r6,r2,4927c <_realloc_r+0x530>
   491ec:	90800404 	addi	r2,r18,16
   491f0:	80c00404 	addi	r3,r16,16
   491f4:	003f6e06 	br	48fb0 <_realloc_r+0x264>
   491f8:	953fff17 	ldw	r20,-4(r18)
   491fc:	00ffff04 	movi	r3,-4
   49200:	a0e8703a 	and	r20,r20,r3
   49204:	a4e9883a 	add	r20,r20,r19
   49208:	003f2206 	br	48e94 <_realloc_r+0x148>
   4920c:	800b883a 	mov	r5,r16
   49210:	9009883a 	mov	r4,r18
   49214:	0047a280 	call	47a28 <memmove>
   49218:	9021883a 	mov	r16,r18
   4921c:	b8800117 	ldw	r2,4(r23)
   49220:	b82d883a 	mov	r22,r23
   49224:	003f1b06 	br	48e94 <_realloc_r+0x148>
   49228:	9005883a 	mov	r2,r18
   4922c:	8007883a 	mov	r3,r16
   49230:	003f9206 	br	4907c <_realloc_r+0x330>
   49234:	800b883a 	mov	r5,r16
   49238:	9009883a 	mov	r4,r18
   4923c:	d9c00015 	stw	r7,0(sp)
   49240:	0047a280 	call	47a28 <memmove>
   49244:	d9c00017 	ldw	r7,0(sp)
   49248:	9021883a 	mov	r16,r18
   4924c:	b8800117 	ldw	r2,4(r23)
   49250:	3829883a 	mov	r20,r7
   49254:	b82d883a 	mov	r22,r23
   49258:	003f0e06 	br	48e94 <_realloc_r+0x148>
   4925c:	80800217 	ldw	r2,8(r16)
   49260:	b8800415 	stw	r2,16(r23)
   49264:	80800317 	ldw	r2,12(r16)
   49268:	b8800515 	stw	r2,20(r23)
   4926c:	31001226 	beq	r6,r4,492b8 <_realloc_r+0x56c>
   49270:	b8800604 	addi	r2,r23,24
   49274:	80c00404 	addi	r3,r16,16
   49278:	003f9606 	br	490d4 <_realloc_r+0x388>
   4927c:	81000417 	ldw	r4,16(r16)
   49280:	90800604 	addi	r2,r18,24
   49284:	80c00604 	addi	r3,r16,24
   49288:	91000415 	stw	r4,16(r18)
   4928c:	81000517 	ldw	r4,20(r16)
   49290:	91000515 	stw	r4,20(r18)
   49294:	003f4606 	br	48fb0 <_realloc_r+0x264>
   49298:	80800217 	ldw	r2,8(r16)
   4929c:	b8800415 	stw	r2,16(r23)
   492a0:	80800317 	ldw	r2,12(r16)
   492a4:	b8800515 	stw	r2,20(r23)
   492a8:	31000d26 	beq	r6,r4,492e0 <_realloc_r+0x594>
   492ac:	b8800604 	addi	r2,r23,24
   492b0:	80c00404 	addi	r3,r16,16
   492b4:	003f7106 	br	4907c <_realloc_r+0x330>
   492b8:	81000417 	ldw	r4,16(r16)
   492bc:	b8800804 	addi	r2,r23,32
   492c0:	80c00604 	addi	r3,r16,24
   492c4:	b9000615 	stw	r4,24(r23)
   492c8:	81000517 	ldw	r4,20(r16)
   492cc:	b9000715 	stw	r4,28(r23)
   492d0:	003f8006 	br	490d4 <_realloc_r+0x388>
   492d4:	9005883a 	mov	r2,r18
   492d8:	8007883a 	mov	r3,r16
   492dc:	003fac06 	br	49190 <_realloc_r+0x444>
   492e0:	81000417 	ldw	r4,16(r16)
   492e4:	b8800804 	addi	r2,r23,32
   492e8:	80c00604 	addi	r3,r16,24
   492ec:	b9000615 	stw	r4,24(r23)
   492f0:	81000517 	ldw	r4,20(r16)
   492f4:	b9000715 	stw	r4,28(r23)
   492f8:	003f6006 	br	4907c <_realloc_r+0x330>
   492fc:	9009883a 	mov	r4,r18
   49300:	800b883a 	mov	r5,r16
   49304:	0047a280 	call	47a28 <memmove>
   49308:	003fa706 	br	491a8 <_realloc_r+0x45c>
   4930c:	80800217 	ldw	r2,8(r16)
   49310:	b8800415 	stw	r2,16(r23)
   49314:	80800317 	ldw	r2,12(r16)
   49318:	b8800515 	stw	r2,20(r23)
   4931c:	31000326 	beq	r6,r4,4932c <_realloc_r+0x5e0>
   49320:	b8800604 	addi	r2,r23,24
   49324:	80c00404 	addi	r3,r16,16
   49328:	003f9906 	br	49190 <_realloc_r+0x444>
   4932c:	81000417 	ldw	r4,16(r16)
   49330:	b8800804 	addi	r2,r23,32
   49334:	80c00604 	addi	r3,r16,24
   49338:	b9000615 	stw	r4,24(r23)
   4933c:	81000517 	ldw	r4,20(r16)
   49340:	b9000715 	stw	r4,28(r23)
   49344:	003f9206 	br	49190 <_realloc_r+0x444>

00049348 <__isinfd>:
   49348:	0105c83a 	sub	r2,zero,r4
   4934c:	1108b03a 	or	r4,r2,r4
   49350:	2004d7fa 	srli	r2,r4,31
   49354:	00e00034 	movhi	r3,32768
   49358:	18ffffc4 	addi	r3,r3,-1
   4935c:	28ca703a 	and	r5,r5,r3
   49360:	1144b03a 	or	r2,r2,r5
   49364:	00dffc34 	movhi	r3,32752
   49368:	1885c83a 	sub	r2,r3,r2
   4936c:	0087c83a 	sub	r3,zero,r2
   49370:	1884b03a 	or	r2,r3,r2
   49374:	1005d7fa 	srai	r2,r2,31
   49378:	10800044 	addi	r2,r2,1
   4937c:	f800283a 	ret

00049380 <__isnand>:
   49380:	0105c83a 	sub	r2,zero,r4
   49384:	1108b03a 	or	r4,r2,r4
   49388:	2004d7fa 	srli	r2,r4,31
   4938c:	00e00034 	movhi	r3,32768
   49390:	18ffffc4 	addi	r3,r3,-1
   49394:	28ca703a 	and	r5,r5,r3
   49398:	1144b03a 	or	r2,r2,r5
   4939c:	00dffc34 	movhi	r3,32752
   493a0:	1885c83a 	sub	r2,r3,r2
   493a4:	1004d7fa 	srli	r2,r2,31
   493a8:	f800283a 	ret

000493ac <strcmp>:
   493ac:	2904b03a 	or	r2,r5,r4
   493b0:	108000cc 	andi	r2,r2,3
   493b4:	1000171e 	bne	r2,zero,49414 <strcmp+0x68>
   493b8:	20800017 	ldw	r2,0(r4)
   493bc:	28c00017 	ldw	r3,0(r5)
   493c0:	10c0141e 	bne	r2,r3,49414 <strcmp+0x68>
   493c4:	027fbff4 	movhi	r9,65279
   493c8:	4a7fbfc4 	addi	r9,r9,-257
   493cc:	1247883a 	add	r3,r2,r9
   493d0:	0084303a 	nor	r2,zero,r2
   493d4:	1884703a 	and	r2,r3,r2
   493d8:	02202074 	movhi	r8,32897
   493dc:	42202004 	addi	r8,r8,-32640
   493e0:	1204703a 	and	r2,r2,r8
   493e4:	10000226 	beq	r2,zero,493f0 <strcmp+0x44>
   493e8:	00001706 	br	49448 <strcmp+0x9c>
   493ec:	3000161e 	bne	r6,zero,49448 <strcmp+0x9c>
   493f0:	21000104 	addi	r4,r4,4
   493f4:	20800017 	ldw	r2,0(r4)
   493f8:	29400104 	addi	r5,r5,4
   493fc:	28c00017 	ldw	r3,0(r5)
   49400:	124f883a 	add	r7,r2,r9
   49404:	008c303a 	nor	r6,zero,r2
   49408:	398c703a 	and	r6,r7,r6
   4940c:	320c703a 	and	r6,r6,r8
   49410:	10fff626 	beq	r2,r3,493ec <strcmp+0x40>
   49414:	20800007 	ldb	r2,0(r4)
   49418:	1000051e 	bne	r2,zero,49430 <strcmp+0x84>
   4941c:	00000606 	br	49438 <strcmp+0x8c>
   49420:	21000044 	addi	r4,r4,1
   49424:	20800007 	ldb	r2,0(r4)
   49428:	29400044 	addi	r5,r5,1
   4942c:	10000226 	beq	r2,zero,49438 <strcmp+0x8c>
   49430:	28c00007 	ldb	r3,0(r5)
   49434:	10fffa26 	beq	r2,r3,49420 <strcmp+0x74>
   49438:	20c00003 	ldbu	r3,0(r4)
   4943c:	28800003 	ldbu	r2,0(r5)
   49440:	1885c83a 	sub	r2,r3,r2
   49444:	f800283a 	ret
   49448:	0005883a 	mov	r2,zero
   4944c:	f800283a 	ret

00049450 <_calloc_r>:
   49450:	defffe04 	addi	sp,sp,-8
   49454:	dc000015 	stw	r16,0(sp)
   49458:	2021883a 	mov	r16,r4
   4945c:	3009883a 	mov	r4,r6
   49460:	dfc00115 	stw	ra,4(sp)
   49464:	00411f80 	call	411f8 <__mulsi3>
   49468:	8009883a 	mov	r4,r16
   4946c:	100b883a 	mov	r5,r2
   49470:	00420200 	call	42020 <_malloc_r>
   49474:	1021883a 	mov	r16,r2
   49478:	10000c26 	beq	r2,zero,494ac <_calloc_r+0x5c>
   4947c:	11bfff17 	ldw	r6,-4(r2)
   49480:	00ffff04 	movi	r3,-4
   49484:	00800904 	movi	r2,36
   49488:	30cc703a 	and	r6,r6,r3
   4948c:	30cd883a 	add	r6,r6,r3
   49490:	11801436 	bltu	r2,r6,494e4 <_calloc_r+0x94>
   49494:	00c004c4 	movi	r3,19
   49498:	19800936 	bltu	r3,r6,494c0 <_calloc_r+0x70>
   4949c:	8005883a 	mov	r2,r16
   494a0:	10000015 	stw	zero,0(r2)
   494a4:	10000115 	stw	zero,4(r2)
   494a8:	10000215 	stw	zero,8(r2)
   494ac:	8005883a 	mov	r2,r16
   494b0:	dfc00117 	ldw	ra,4(sp)
   494b4:	dc000017 	ldw	r16,0(sp)
   494b8:	dec00204 	addi	sp,sp,8
   494bc:	f800283a 	ret
   494c0:	80000015 	stw	zero,0(r16)
   494c4:	80000115 	stw	zero,4(r16)
   494c8:	00c006c4 	movi	r3,27
   494cc:	19800d2e 	bgeu	r3,r6,49504 <_calloc_r+0xb4>
   494d0:	80000215 	stw	zero,8(r16)
   494d4:	80000315 	stw	zero,12(r16)
   494d8:	30800c26 	beq	r6,r2,4950c <_calloc_r+0xbc>
   494dc:	80800404 	addi	r2,r16,16
   494e0:	003fef06 	br	494a0 <_calloc_r+0x50>
   494e4:	8009883a 	mov	r4,r16
   494e8:	000b883a 	mov	r5,zero
   494ec:	0047bb40 	call	47bb4 <memset>
   494f0:	8005883a 	mov	r2,r16
   494f4:	dfc00117 	ldw	ra,4(sp)
   494f8:	dc000017 	ldw	r16,0(sp)
   494fc:	dec00204 	addi	sp,sp,8
   49500:	f800283a 	ret
   49504:	80800204 	addi	r2,r16,8
   49508:	003fe506 	br	494a0 <_calloc_r+0x50>
   4950c:	80000415 	stw	zero,16(r16)
   49510:	80000515 	stw	zero,20(r16)
   49514:	80800604 	addi	r2,r16,24
   49518:	003fe106 	br	494a0 <_calloc_r+0x50>

0004951c <_fclose_r>:
   4951c:	defffc04 	addi	sp,sp,-16
   49520:	dc400115 	stw	r17,4(sp)
   49524:	dc000015 	stw	r16,0(sp)
   49528:	dfc00315 	stw	ra,12(sp)
   4952c:	dc800215 	stw	r18,8(sp)
   49530:	2821883a 	mov	r16,r5
   49534:	2023883a 	mov	r17,r4
   49538:	28003426 	beq	r5,zero,4960c <_fclose_r+0xf0>
   4953c:	0046b1c0 	call	46b1c <__sfp_lock_acquire>
   49540:	88000226 	beq	r17,zero,4954c <_fclose_r+0x30>
   49544:	88800e17 	ldw	r2,56(r17)
   49548:	10003826 	beq	r2,zero,4962c <_fclose_r+0x110>
   4954c:	8080030f 	ldh	r2,12(r16)
   49550:	10002526 	beq	r2,zero,495e8 <_fclose_r+0xcc>
   49554:	8809883a 	mov	r4,r17
   49558:	800b883a 	mov	r5,r16
   4955c:	00466580 	call	46658 <_fflush_r>
   49560:	1025883a 	mov	r18,r2
   49564:	80800b17 	ldw	r2,44(r16)
   49568:	10000426 	beq	r2,zero,4957c <_fclose_r+0x60>
   4956c:	81400717 	ldw	r5,28(r16)
   49570:	8809883a 	mov	r4,r17
   49574:	103ee83a 	callr	r2
   49578:	10003516 	blt	r2,zero,49650 <_fclose_r+0x134>
   4957c:	8080030b 	ldhu	r2,12(r16)
   49580:	1080200c 	andi	r2,r2,128
   49584:	10bfffcc 	andi	r2,r2,65535
   49588:	10a0001c 	xori	r2,r2,32768
   4958c:	10a00004 	addi	r2,r2,-32768
   49590:	10002b1e 	bne	r2,zero,49640 <_fclose_r+0x124>
   49594:	81400c17 	ldw	r5,48(r16)
   49598:	28000526 	beq	r5,zero,495b0 <_fclose_r+0x94>
   4959c:	80801004 	addi	r2,r16,64
   495a0:	28800226 	beq	r5,r2,495ac <_fclose_r+0x90>
   495a4:	8809883a 	mov	r4,r17
   495a8:	0046d300 	call	46d30 <_free_r>
   495ac:	80000c15 	stw	zero,48(r16)
   495b0:	81401117 	ldw	r5,68(r16)
   495b4:	28000326 	beq	r5,zero,495c4 <_fclose_r+0xa8>
   495b8:	8809883a 	mov	r4,r17
   495bc:	0046d300 	call	46d30 <_free_r>
   495c0:	80001115 	stw	zero,68(r16)
   495c4:	8000030d 	sth	zero,12(r16)
   495c8:	0046b200 	call	46b20 <__sfp_lock_release>
   495cc:	9005883a 	mov	r2,r18
   495d0:	dfc00317 	ldw	ra,12(sp)
   495d4:	dc800217 	ldw	r18,8(sp)
   495d8:	dc400117 	ldw	r17,4(sp)
   495dc:	dc000017 	ldw	r16,0(sp)
   495e0:	dec00404 	addi	sp,sp,16
   495e4:	f800283a 	ret
   495e8:	0046b200 	call	46b20 <__sfp_lock_release>
   495ec:	0025883a 	mov	r18,zero
   495f0:	9005883a 	mov	r2,r18
   495f4:	dfc00317 	ldw	ra,12(sp)
   495f8:	dc800217 	ldw	r18,8(sp)
   495fc:	dc400117 	ldw	r17,4(sp)
   49600:	dc000017 	ldw	r16,0(sp)
   49604:	dec00404 	addi	sp,sp,16
   49608:	f800283a 	ret
   4960c:	0025883a 	mov	r18,zero
   49610:	9005883a 	mov	r2,r18
   49614:	dfc00317 	ldw	ra,12(sp)
   49618:	dc800217 	ldw	r18,8(sp)
   4961c:	dc400117 	ldw	r17,4(sp)
   49620:	dc000017 	ldw	r16,0(sp)
   49624:	dec00404 	addi	sp,sp,16
   49628:	f800283a 	ret
   4962c:	8809883a 	mov	r4,r17
   49630:	00469140 	call	46914 <__sinit>
   49634:	8080030f 	ldh	r2,12(r16)
   49638:	103fc61e 	bne	r2,zero,49554 <_fclose_r+0x38>
   4963c:	003fea06 	br	495e8 <_fclose_r+0xcc>
   49640:	81400417 	ldw	r5,16(r16)
   49644:	8809883a 	mov	r4,r17
   49648:	0046d300 	call	46d30 <_free_r>
   4964c:	003fd106 	br	49594 <_fclose_r+0x78>
   49650:	04bfffc4 	movi	r18,-1
   49654:	003fc906 	br	4957c <_fclose_r+0x60>

00049658 <fclose>:
   49658:	00800174 	movhi	r2,5
   4965c:	1080ad04 	addi	r2,r2,692
   49660:	200b883a 	mov	r5,r4
   49664:	11000017 	ldw	r4,0(r2)
   49668:	004951c1 	jmpi	4951c <_fclose_r>

0004966c <__udivdi3>:
   4966c:	defff504 	addi	sp,sp,-44
   49670:	dd000515 	stw	r20,20(sp)
   49674:	dcc00415 	stw	r19,16(sp)
   49678:	dc800315 	stw	r18,12(sp)
   4967c:	dc400215 	stw	r17,8(sp)
   49680:	dc000115 	stw	r16,4(sp)
   49684:	dfc00a15 	stw	ra,40(sp)
   49688:	df000915 	stw	fp,36(sp)
   4968c:	ddc00815 	stw	r23,32(sp)
   49690:	dd800715 	stw	r22,28(sp)
   49694:	dd400615 	stw	r21,24(sp)
   49698:	2025883a 	mov	r18,r4
   4969c:	2823883a 	mov	r17,r5
   496a0:	3021883a 	mov	r16,r6
   496a4:	2027883a 	mov	r19,r4
   496a8:	2829883a 	mov	r20,r5
   496ac:	3800451e 	bne	r7,zero,497c4 <__udivdi3+0x158>
   496b0:	2980652e 	bgeu	r5,r6,49848 <__udivdi3+0x1dc>
   496b4:	00bfffd4 	movui	r2,65535
   496b8:	1180b436 	bltu	r2,r6,4998c <__udivdi3+0x320>
   496bc:	00803fc4 	movi	r2,255
   496c0:	11816636 	bltu	r2,r6,49c5c <__udivdi3+0x5f0>
   496c4:	0005883a 	mov	r2,zero
   496c8:	0007883a 	mov	r3,zero
   496cc:	3084d83a 	srl	r2,r6,r2
   496d0:	01000174 	movhi	r4,5
   496d4:	21395004 	addi	r4,r4,-6848
   496d8:	2085883a 	add	r2,r4,r2
   496dc:	10800003 	ldbu	r2,0(r2)
   496e0:	10c7883a 	add	r3,r2,r3
   496e4:	00800804 	movi	r2,32
   496e8:	10c5c83a 	sub	r2,r2,r3
   496ec:	10000526 	beq	r2,zero,49704 <__udivdi3+0x98>
   496f0:	88a2983a 	sll	r17,r17,r2
   496f4:	90c6d83a 	srl	r3,r18,r3
   496f8:	30a0983a 	sll	r16,r6,r2
   496fc:	90a6983a 	sll	r19,r18,r2
   49700:	88e8b03a 	or	r20,r17,r3
   49704:	8022d43a 	srli	r17,r16,16
   49708:	a009883a 	mov	r4,r20
   4970c:	857fffcc 	andi	r21,r16,65535
   49710:	880b883a 	mov	r5,r17
   49714:	004ae7c0 	call	4ae7c <__umodsi3>
   49718:	a009883a 	mov	r4,r20
   4971c:	880b883a 	mov	r5,r17
   49720:	102d883a 	mov	r22,r2
   49724:	004ae740 	call	4ae74 <__udivsi3>
   49728:	1009883a 	mov	r4,r2
   4972c:	a80b883a 	mov	r5,r21
   49730:	1025883a 	mov	r18,r2
   49734:	00411f80 	call	411f8 <__mulsi3>
   49738:	1009883a 	mov	r4,r2
   4973c:	b006943a 	slli	r3,r22,16
   49740:	9804d43a 	srli	r2,r19,16
   49744:	1886b03a 	or	r3,r3,r2
   49748:	1900052e 	bgeu	r3,r4,49760 <__udivdi3+0xf4>
   4974c:	1c07883a 	add	r3,r3,r16
   49750:	90bfffc4 	addi	r2,r18,-1
   49754:	1c000136 	bltu	r3,r16,4975c <__udivdi3+0xf0>
   49758:	19015536 	bltu	r3,r4,49cb0 <__udivdi3+0x644>
   4975c:	1025883a 	mov	r18,r2
   49760:	1929c83a 	sub	r20,r3,r4
   49764:	880b883a 	mov	r5,r17
   49768:	a009883a 	mov	r4,r20
   4976c:	004ae7c0 	call	4ae7c <__umodsi3>
   49770:	102d883a 	mov	r22,r2
   49774:	880b883a 	mov	r5,r17
   49778:	a009883a 	mov	r4,r20
   4977c:	b02c943a 	slli	r22,r22,16
   49780:	004ae740 	call	4ae74 <__udivsi3>
   49784:	1009883a 	mov	r4,r2
   49788:	a80b883a 	mov	r5,r21
   4978c:	9cffffcc 	andi	r19,r19,65535
   49790:	1023883a 	mov	r17,r2
   49794:	b4e6b03a 	or	r19,r22,r19
   49798:	00411f80 	call	411f8 <__mulsi3>
   4979c:	9880052e 	bgeu	r19,r2,497b4 <__udivdi3+0x148>
   497a0:	9c27883a 	add	r19,r19,r16
   497a4:	88ffffc4 	addi	r3,r17,-1
   497a8:	9c011436 	bltu	r19,r16,49bfc <__udivdi3+0x590>
   497ac:	9881132e 	bgeu	r19,r2,49bfc <__udivdi3+0x590>
   497b0:	8c7fff84 	addi	r17,r17,-2
   497b4:	9004943a 	slli	r2,r18,16
   497b8:	0007883a 	mov	r3,zero
   497bc:	8884b03a 	or	r2,r17,r2
   497c0:	00001506 	br	49818 <__udivdi3+0x1ac>
   497c4:	29c06a36 	bltu	r5,r7,49970 <__udivdi3+0x304>
   497c8:	00bfffd4 	movui	r2,65535
   497cc:	11c06a2e 	bgeu	r2,r7,49978 <__udivdi3+0x30c>
   497d0:	00804034 	movhi	r2,256
   497d4:	10bfffc4 	addi	r2,r2,-1
   497d8:	11c11436 	bltu	r2,r7,49c2c <__udivdi3+0x5c0>
   497dc:	00c00404 	movi	r3,16
   497e0:	180b883a 	mov	r5,r3
   497e4:	38c6d83a 	srl	r3,r7,r3
   497e8:	01000174 	movhi	r4,5
   497ec:	21395004 	addi	r4,r4,-6848
   497f0:	04000804 	movi	r16,32
   497f4:	20c7883a 	add	r3,r4,r3
   497f8:	18800003 	ldbu	r2,0(r3)
   497fc:	1145883a 	add	r2,r2,r5
   49800:	80a1c83a 	sub	r16,r16,r2
   49804:	80006e1e 	bne	r16,zero,499c0 <__udivdi3+0x354>
   49808:	0007883a 	mov	r3,zero
   4980c:	3c406a36 	bltu	r7,r17,499b8 <__udivdi3+0x34c>
   49810:	9180692e 	bgeu	r18,r6,499b8 <__udivdi3+0x34c>
   49814:	0005883a 	mov	r2,zero
   49818:	dfc00a17 	ldw	ra,40(sp)
   4981c:	df000917 	ldw	fp,36(sp)
   49820:	ddc00817 	ldw	r23,32(sp)
   49824:	dd800717 	ldw	r22,28(sp)
   49828:	dd400617 	ldw	r21,24(sp)
   4982c:	dd000517 	ldw	r20,20(sp)
   49830:	dcc00417 	ldw	r19,16(sp)
   49834:	dc800317 	ldw	r18,12(sp)
   49838:	dc400217 	ldw	r17,8(sp)
   4983c:	dc000117 	ldw	r16,4(sp)
   49840:	dec00b04 	addi	sp,sp,44
   49844:	f800283a 	ret
   49848:	3000041e 	bne	r6,zero,4985c <__udivdi3+0x1f0>
   4984c:	01000044 	movi	r4,1
   49850:	000b883a 	mov	r5,zero
   49854:	004ae740 	call	4ae74 <__udivsi3>
   49858:	1021883a 	mov	r16,r2
   4985c:	00bfffd4 	movui	r2,65535
   49860:	1400502e 	bgeu	r2,r16,499a4 <__udivdi3+0x338>
   49864:	00804034 	movhi	r2,256
   49868:	10bfffc4 	addi	r2,r2,-1
   4986c:	1400f536 	bltu	r2,r16,49c44 <__udivdi3+0x5d8>
   49870:	00800404 	movi	r2,16
   49874:	1007883a 	mov	r3,r2
   49878:	8084d83a 	srl	r2,r16,r2
   4987c:	01000174 	movhi	r4,5
   49880:	21395004 	addi	r4,r4,-6848
   49884:	2085883a 	add	r2,r4,r2
   49888:	10800003 	ldbu	r2,0(r2)
   4988c:	10c7883a 	add	r3,r2,r3
   49890:	00800804 	movi	r2,32
   49894:	10c5c83a 	sub	r2,r2,r3
   49898:	1000a01e 	bne	r2,zero,49b1c <__udivdi3+0x4b0>
   4989c:	8028d43a 	srli	r20,r16,16
   498a0:	8c23c83a 	sub	r17,r17,r16
   498a4:	857fffcc 	andi	r21,r16,65535
   498a8:	00c00044 	movi	r3,1
   498ac:	8809883a 	mov	r4,r17
   498b0:	a00b883a 	mov	r5,r20
   498b4:	d8c00015 	stw	r3,0(sp)
   498b8:	004ae7c0 	call	4ae7c <__umodsi3>
   498bc:	8809883a 	mov	r4,r17
   498c0:	a00b883a 	mov	r5,r20
   498c4:	102d883a 	mov	r22,r2
   498c8:	004ae740 	call	4ae74 <__udivsi3>
   498cc:	1009883a 	mov	r4,r2
   498d0:	a80b883a 	mov	r5,r21
   498d4:	1025883a 	mov	r18,r2
   498d8:	00411f80 	call	411f8 <__mulsi3>
   498dc:	1009883a 	mov	r4,r2
   498e0:	b00c943a 	slli	r6,r22,16
   498e4:	9804d43a 	srli	r2,r19,16
   498e8:	d8c00017 	ldw	r3,0(sp)
   498ec:	308cb03a 	or	r6,r6,r2
   498f0:	3100052e 	bgeu	r6,r4,49908 <__udivdi3+0x29c>
   498f4:	340d883a 	add	r6,r6,r16
   498f8:	90bfffc4 	addi	r2,r18,-1
   498fc:	34000136 	bltu	r6,r16,49904 <__udivdi3+0x298>
   49900:	3100e836 	bltu	r6,r4,49ca4 <__udivdi3+0x638>
   49904:	1025883a 	mov	r18,r2
   49908:	3123c83a 	sub	r17,r6,r4
   4990c:	8809883a 	mov	r4,r17
   49910:	a00b883a 	mov	r5,r20
   49914:	d8c00015 	stw	r3,0(sp)
   49918:	004ae7c0 	call	4ae7c <__umodsi3>
   4991c:	102d883a 	mov	r22,r2
   49920:	8809883a 	mov	r4,r17
   49924:	a00b883a 	mov	r5,r20
   49928:	b02c943a 	slli	r22,r22,16
   4992c:	004ae740 	call	4ae74 <__udivsi3>
   49930:	1009883a 	mov	r4,r2
   49934:	a80b883a 	mov	r5,r21
   49938:	9cffffcc 	andi	r19,r19,65535
   4993c:	1023883a 	mov	r17,r2
   49940:	b4e6b03a 	or	r19,r22,r19
   49944:	00411f80 	call	411f8 <__mulsi3>
   49948:	d8c00017 	ldw	r3,0(sp)
   4994c:	9880052e 	bgeu	r19,r2,49964 <__udivdi3+0x2f8>
   49950:	9c27883a 	add	r19,r19,r16
   49954:	893fffc4 	addi	r4,r17,-1
   49958:	9c00aa36 	bltu	r19,r16,49c04 <__udivdi3+0x598>
   4995c:	9880a92e 	bgeu	r19,r2,49c04 <__udivdi3+0x598>
   49960:	8c7fff84 	addi	r17,r17,-2
   49964:	9004943a 	slli	r2,r18,16
   49968:	8884b03a 	or	r2,r17,r2
   4996c:	003faa06 	br	49818 <__udivdi3+0x1ac>
   49970:	0007883a 	mov	r3,zero
   49974:	003fa706 	br	49814 <__udivdi3+0x1a8>
   49978:	00803fc4 	movi	r2,255
   4997c:	11c0ae36 	bltu	r2,r7,49c38 <__udivdi3+0x5cc>
   49980:	0007883a 	mov	r3,zero
   49984:	000b883a 	mov	r5,zero
   49988:	003f9606 	br	497e4 <__udivdi3+0x178>
   4998c:	00804034 	movhi	r2,256
   49990:	10bfffc4 	addi	r2,r2,-1
   49994:	1180ae36 	bltu	r2,r6,49c50 <__udivdi3+0x5e4>
   49998:	00800404 	movi	r2,16
   4999c:	1007883a 	mov	r3,r2
   499a0:	003f4a06 	br	496cc <__udivdi3+0x60>
   499a4:	00803fc4 	movi	r2,255
   499a8:	1400af36 	bltu	r2,r16,49c68 <__udivdi3+0x5fc>
   499ac:	0005883a 	mov	r2,zero
   499b0:	0007883a 	mov	r3,zero
   499b4:	003fb006 	br	49878 <__udivdi3+0x20c>
   499b8:	00800044 	movi	r2,1
   499bc:	003f9606 	br	49818 <__udivdi3+0x1ac>
   499c0:	3c0e983a 	sll	r7,r7,r16
   499c4:	3086d83a 	srl	r3,r6,r2
   499c8:	88aed83a 	srl	r23,r17,r2
   499cc:	9084d83a 	srl	r2,r18,r2
   499d0:	38e6b03a 	or	r19,r7,r3
   499d4:	9828d43a 	srli	r20,r19,16
   499d8:	8c22983a 	sll	r17,r17,r16
   499dc:	b809883a 	mov	r4,r23
   499e0:	a00b883a 	mov	r5,r20
   499e4:	342a983a 	sll	r21,r6,r16
   499e8:	88a2b03a 	or	r17,r17,r2
   499ec:	004ae7c0 	call	4ae7c <__umodsi3>
   499f0:	b809883a 	mov	r4,r23
   499f4:	a00b883a 	mov	r5,r20
   499f8:	1039883a 	mov	fp,r2
   499fc:	9dbfffcc 	andi	r22,r19,65535
   49a00:	004ae740 	call	4ae74 <__udivsi3>
   49a04:	1009883a 	mov	r4,r2
   49a08:	b00b883a 	mov	r5,r22
   49a0c:	102f883a 	mov	r23,r2
   49a10:	00411f80 	call	411f8 <__mulsi3>
   49a14:	1009883a 	mov	r4,r2
   49a18:	e00e943a 	slli	r7,fp,16
   49a1c:	8804d43a 	srli	r2,r17,16
   49a20:	388eb03a 	or	r7,r7,r2
   49a24:	3900042e 	bgeu	r7,r4,49a38 <__udivdi3+0x3cc>
   49a28:	3ccf883a 	add	r7,r7,r19
   49a2c:	b8bfffc4 	addi	r2,r23,-1
   49a30:	3cc0942e 	bgeu	r7,r19,49c84 <__udivdi3+0x618>
   49a34:	102f883a 	mov	r23,r2
   49a38:	3939c83a 	sub	fp,r7,r4
   49a3c:	a00b883a 	mov	r5,r20
   49a40:	e009883a 	mov	r4,fp
   49a44:	004ae7c0 	call	4ae7c <__umodsi3>
   49a48:	a00b883a 	mov	r5,r20
   49a4c:	e009883a 	mov	r4,fp
   49a50:	d8800015 	stw	r2,0(sp)
   49a54:	004ae740 	call	4ae74 <__udivsi3>
   49a58:	1009883a 	mov	r4,r2
   49a5c:	b00b883a 	mov	r5,r22
   49a60:	1029883a 	mov	r20,r2
   49a64:	00411f80 	call	411f8 <__mulsi3>
   49a68:	d8c00017 	ldw	r3,0(sp)
   49a6c:	8c7fffcc 	andi	r17,r17,65535
   49a70:	1806943a 	slli	r3,r3,16
   49a74:	1c46b03a 	or	r3,r3,r17
   49a78:	1880042e 	bgeu	r3,r2,49a8c <__udivdi3+0x420>
   49a7c:	1cc7883a 	add	r3,r3,r19
   49a80:	a13fffc4 	addi	r4,r20,-1
   49a84:	1cc07b2e 	bgeu	r3,r19,49c74 <__udivdi3+0x608>
   49a88:	2029883a 	mov	r20,r4
   49a8c:	b82e943a 	slli	r23,r23,16
   49a90:	a822d43a 	srli	r17,r21,16
   49a94:	ad7fffcc 	andi	r21,r21,65535
   49a98:	a5e8b03a 	or	r20,r20,r23
   49a9c:	a5bfffcc 	andi	r22,r20,65535
   49aa0:	b009883a 	mov	r4,r22
   49aa4:	a80b883a 	mov	r5,r21
   49aa8:	18afc83a 	sub	r23,r3,r2
   49aac:	a026d43a 	srli	r19,r20,16
   49ab0:	00411f80 	call	411f8 <__mulsi3>
   49ab4:	b009883a 	mov	r4,r22
   49ab8:	880b883a 	mov	r5,r17
   49abc:	1039883a 	mov	fp,r2
   49ac0:	00411f80 	call	411f8 <__mulsi3>
   49ac4:	a80b883a 	mov	r5,r21
   49ac8:	9809883a 	mov	r4,r19
   49acc:	102d883a 	mov	r22,r2
   49ad0:	00411f80 	call	411f8 <__mulsi3>
   49ad4:	9809883a 	mov	r4,r19
   49ad8:	880b883a 	mov	r5,r17
   49adc:	102b883a 	mov	r21,r2
   49ae0:	00411f80 	call	411f8 <__mulsi3>
   49ae4:	100b883a 	mov	r5,r2
   49ae8:	e004d43a 	srli	r2,fp,16
   49aec:	ad89883a 	add	r4,r21,r22
   49af0:	2089883a 	add	r4,r4,r2
   49af4:	2540022e 	bgeu	r4,r21,49b00 <__udivdi3+0x494>
   49af8:	00800074 	movhi	r2,1
   49afc:	288b883a 	add	r5,r5,r2
   49b00:	2004d43a 	srli	r2,r4,16
   49b04:	288b883a 	add	r5,r5,r2
   49b08:	b9404536 	bltu	r23,r5,49c20 <__udivdi3+0x5b4>
   49b0c:	b9403f26 	beq	r23,r5,49c0c <__udivdi3+0x5a0>
   49b10:	a005883a 	mov	r2,r20
   49b14:	0007883a 	mov	r3,zero
   49b18:	003f3f06 	br	49818 <__udivdi3+0x1ac>
   49b1c:	80a0983a 	sll	r16,r16,r2
   49b20:	88eed83a 	srl	r23,r17,r3
   49b24:	90c6d83a 	srl	r3,r18,r3
   49b28:	8028d43a 	srli	r20,r16,16
   49b2c:	88a2983a 	sll	r17,r17,r2
   49b30:	b809883a 	mov	r4,r23
   49b34:	a00b883a 	mov	r5,r20
   49b38:	88ecb03a 	or	r22,r17,r3
   49b3c:	90a6983a 	sll	r19,r18,r2
   49b40:	004ae7c0 	call	4ae7c <__umodsi3>
   49b44:	b809883a 	mov	r4,r23
   49b48:	a00b883a 	mov	r5,r20
   49b4c:	1023883a 	mov	r17,r2
   49b50:	857fffcc 	andi	r21,r16,65535
   49b54:	004ae740 	call	4ae74 <__udivsi3>
   49b58:	1009883a 	mov	r4,r2
   49b5c:	a80b883a 	mov	r5,r21
   49b60:	102f883a 	mov	r23,r2
   49b64:	00411f80 	call	411f8 <__mulsi3>
   49b68:	1009883a 	mov	r4,r2
   49b6c:	880a943a 	slli	r5,r17,16
   49b70:	b004d43a 	srli	r2,r22,16
   49b74:	288ab03a 	or	r5,r5,r2
   49b78:	2900062e 	bgeu	r5,r4,49b94 <__udivdi3+0x528>
   49b7c:	2c0b883a 	add	r5,r5,r16
   49b80:	b8bfffc4 	addi	r2,r23,-1
   49b84:	2c004536 	bltu	r5,r16,49c9c <__udivdi3+0x630>
   49b88:	2900442e 	bgeu	r5,r4,49c9c <__udivdi3+0x630>
   49b8c:	bdffff84 	addi	r23,r23,-2
   49b90:	2c0b883a 	add	r5,r5,r16
   49b94:	2925c83a 	sub	r18,r5,r4
   49b98:	9009883a 	mov	r4,r18
   49b9c:	a00b883a 	mov	r5,r20
   49ba0:	004ae7c0 	call	4ae7c <__umodsi3>
   49ba4:	1023883a 	mov	r17,r2
   49ba8:	9009883a 	mov	r4,r18
   49bac:	a00b883a 	mov	r5,r20
   49bb0:	8822943a 	slli	r17,r17,16
   49bb4:	004ae740 	call	4ae74 <__udivsi3>
   49bb8:	1009883a 	mov	r4,r2
   49bbc:	a80b883a 	mov	r5,r21
   49bc0:	b5bfffcc 	andi	r22,r22,65535
   49bc4:	1025883a 	mov	r18,r2
   49bc8:	8da2b03a 	or	r17,r17,r22
   49bcc:	00411f80 	call	411f8 <__mulsi3>
   49bd0:	8880062e 	bgeu	r17,r2,49bec <__udivdi3+0x580>
   49bd4:	8c23883a 	add	r17,r17,r16
   49bd8:	90ffffc4 	addi	r3,r18,-1
   49bdc:	8c002d36 	bltu	r17,r16,49c94 <__udivdi3+0x628>
   49be0:	88802c2e 	bgeu	r17,r2,49c94 <__udivdi3+0x628>
   49be4:	94bfff84 	addi	r18,r18,-2
   49be8:	8c23883a 	add	r17,r17,r16
   49bec:	b806943a 	slli	r3,r23,16
   49bf0:	88a3c83a 	sub	r17,r17,r2
   49bf4:	90c6b03a 	or	r3,r18,r3
   49bf8:	003f2c06 	br	498ac <__udivdi3+0x240>
   49bfc:	1823883a 	mov	r17,r3
   49c00:	003eec06 	br	497b4 <__udivdi3+0x148>
   49c04:	2023883a 	mov	r17,r4
   49c08:	003f5606 	br	49964 <__udivdi3+0x2f8>
   49c0c:	2008943a 	slli	r4,r4,16
   49c10:	9420983a 	sll	r16,r18,r16
   49c14:	e73fffcc 	andi	fp,fp,65535
   49c18:	2709883a 	add	r4,r4,fp
   49c1c:	813fbc2e 	bgeu	r16,r4,49b10 <__udivdi3+0x4a4>
   49c20:	a0bfffc4 	addi	r2,r20,-1
   49c24:	0007883a 	mov	r3,zero
   49c28:	003efb06 	br	49818 <__udivdi3+0x1ac>
   49c2c:	00c00604 	movi	r3,24
   49c30:	180b883a 	mov	r5,r3
   49c34:	003eeb06 	br	497e4 <__udivdi3+0x178>
   49c38:	00c00204 	movi	r3,8
   49c3c:	180b883a 	mov	r5,r3
   49c40:	003ee806 	br	497e4 <__udivdi3+0x178>
   49c44:	00800604 	movi	r2,24
   49c48:	1007883a 	mov	r3,r2
   49c4c:	003f0a06 	br	49878 <__udivdi3+0x20c>
   49c50:	00800604 	movi	r2,24
   49c54:	1007883a 	mov	r3,r2
   49c58:	003e9c06 	br	496cc <__udivdi3+0x60>
   49c5c:	00800204 	movi	r2,8
   49c60:	1007883a 	mov	r3,r2
   49c64:	003e9906 	br	496cc <__udivdi3+0x60>
   49c68:	00800204 	movi	r2,8
   49c6c:	1007883a 	mov	r3,r2
   49c70:	003f0106 	br	49878 <__udivdi3+0x20c>
   49c74:	18bf842e 	bgeu	r3,r2,49a88 <__udivdi3+0x41c>
   49c78:	a53fff84 	addi	r20,r20,-2
   49c7c:	1cc7883a 	add	r3,r3,r19
   49c80:	003f8206 	br	49a8c <__udivdi3+0x420>
   49c84:	393f6b2e 	bgeu	r7,r4,49a34 <__udivdi3+0x3c8>
   49c88:	bdffff84 	addi	r23,r23,-2
   49c8c:	3ccf883a 	add	r7,r7,r19
   49c90:	003f6906 	br	49a38 <__udivdi3+0x3cc>
   49c94:	1825883a 	mov	r18,r3
   49c98:	003fd406 	br	49bec <__udivdi3+0x580>
   49c9c:	102f883a 	mov	r23,r2
   49ca0:	003fbc06 	br	49b94 <__udivdi3+0x528>
   49ca4:	94bfff84 	addi	r18,r18,-2
   49ca8:	340d883a 	add	r6,r6,r16
   49cac:	003f1606 	br	49908 <__udivdi3+0x29c>
   49cb0:	94bfff84 	addi	r18,r18,-2
   49cb4:	1c07883a 	add	r3,r3,r16
   49cb8:	003ea906 	br	49760 <__udivdi3+0xf4>

00049cbc <__umoddi3>:
   49cbc:	defff304 	addi	sp,sp,-52
   49cc0:	dd000715 	stw	r20,28(sp)
   49cc4:	dcc00615 	stw	r19,24(sp)
   49cc8:	dc800515 	stw	r18,20(sp)
   49ccc:	dc400415 	stw	r17,16(sp)
   49cd0:	dc000315 	stw	r16,12(sp)
   49cd4:	dfc00c15 	stw	ra,48(sp)
   49cd8:	df000b15 	stw	fp,44(sp)
   49cdc:	ddc00a15 	stw	r23,40(sp)
   49ce0:	dd800915 	stw	r22,36(sp)
   49ce4:	dd400815 	stw	r21,32(sp)
   49ce8:	2025883a 	mov	r18,r4
   49cec:	2823883a 	mov	r17,r5
   49cf0:	3021883a 	mov	r16,r6
   49cf4:	2027883a 	mov	r19,r4
   49cf8:	2829883a 	mov	r20,r5
   49cfc:	38003a1e 	bne	r7,zero,49de8 <__umoddi3+0x12c>
   49d00:	2980522e 	bgeu	r5,r6,49e4c <__umoddi3+0x190>
   49d04:	00bfffd4 	movui	r2,65535
   49d08:	1180a436 	bltu	r2,r6,49f9c <__umoddi3+0x2e0>
   49d0c:	00803fc4 	movi	r2,255
   49d10:	11816036 	bltu	r2,r6,4a294 <__umoddi3+0x5d8>
   49d14:	0005883a 	mov	r2,zero
   49d18:	0009883a 	mov	r4,zero
   49d1c:	3084d83a 	srl	r2,r6,r2
   49d20:	00c00174 	movhi	r3,5
   49d24:	18f95004 	addi	r3,r3,-6848
   49d28:	05400804 	movi	r21,32
   49d2c:	1885883a 	add	r2,r3,r2
   49d30:	10800003 	ldbu	r2,0(r2)
   49d34:	1109883a 	add	r4,r2,r4
   49d38:	a92bc83a 	sub	r21,r21,r4
   49d3c:	a8010e26 	beq	r21,zero,4a178 <__umoddi3+0x4bc>
   49d40:	8d62983a 	sll	r17,r17,r21
   49d44:	9108d83a 	srl	r4,r18,r4
   49d48:	3560983a 	sll	r16,r6,r21
   49d4c:	9566983a 	sll	r19,r18,r21
   49d50:	8928b03a 	or	r20,r17,r4
   49d54:	8022d43a 	srli	r17,r16,16
   49d58:	a009883a 	mov	r4,r20
   49d5c:	84bfffcc 	andi	r18,r16,65535
   49d60:	880b883a 	mov	r5,r17
   49d64:	004ae7c0 	call	4ae7c <__umodsi3>
   49d68:	a009883a 	mov	r4,r20
   49d6c:	880b883a 	mov	r5,r17
   49d70:	102d883a 	mov	r22,r2
   49d74:	004ae740 	call	4ae74 <__udivsi3>
   49d78:	1009883a 	mov	r4,r2
   49d7c:	900b883a 	mov	r5,r18
   49d80:	00411f80 	call	411f8 <__mulsi3>
   49d84:	1009883a 	mov	r4,r2
   49d88:	b006943a 	slli	r3,r22,16
   49d8c:	9804d43a 	srli	r2,r19,16
   49d90:	1886b03a 	or	r3,r3,r2
   49d94:	1900042e 	bgeu	r3,r4,49da8 <__umoddi3+0xec>
   49d98:	1c07883a 	add	r3,r3,r16
   49d9c:	1c000236 	bltu	r3,r16,49da8 <__umoddi3+0xec>
   49da0:	1900012e 	bgeu	r3,r4,49da8 <__umoddi3+0xec>
   49da4:	1c07883a 	add	r3,r3,r16
   49da8:	1929c83a 	sub	r20,r3,r4
   49dac:	a009883a 	mov	r4,r20
   49db0:	880b883a 	mov	r5,r17
   49db4:	004ae7c0 	call	4ae7c <__umodsi3>
   49db8:	102d883a 	mov	r22,r2
   49dbc:	a009883a 	mov	r4,r20
   49dc0:	880b883a 	mov	r5,r17
   49dc4:	b02c943a 	slli	r22,r22,16
   49dc8:	004ae740 	call	4ae74 <__udivsi3>
   49dcc:	1009883a 	mov	r4,r2
   49dd0:	900b883a 	mov	r5,r18
   49dd4:	9cffffcc 	andi	r19,r19,65535
   49dd8:	00411f80 	call	411f8 <__mulsi3>
   49ddc:	b4e6b03a 	or	r19,r22,r19
   49de0:	9880572e 	bgeu	r19,r2,49f40 <__umoddi3+0x284>
   49de4:	00005206 	br	49f30 <__umoddi3+0x274>
   49de8:	29c05936 	bltu	r5,r7,49f50 <__umoddi3+0x294>
   49dec:	00bfffd4 	movui	r2,65535
   49df0:	11c0652e 	bgeu	r2,r7,49f88 <__umoddi3+0x2cc>
   49df4:	00804034 	movhi	r2,256
   49df8:	10bfffc4 	addi	r2,r2,-1
   49dfc:	11c11936 	bltu	r2,r7,4a264 <__umoddi3+0x5a8>
   49e00:	00c00404 	movi	r3,16
   49e04:	1827883a 	mov	r19,r3
   49e08:	38c6d83a 	srl	r3,r7,r3
   49e0c:	01000174 	movhi	r4,5
   49e10:	21395004 	addi	r4,r4,-6848
   49e14:	04000804 	movi	r16,32
   49e18:	20c7883a 	add	r3,r4,r3
   49e1c:	18800003 	ldbu	r2,0(r3)
   49e20:	14e7883a 	add	r19,r2,r19
   49e24:	84e1c83a 	sub	r16,r16,r19
   49e28:	8000671e 	bne	r16,zero,49fc8 <__umoddi3+0x30c>
   49e2c:	3c400136 	bltu	r7,r17,49e34 <__umoddi3+0x178>
   49e30:	91812536 	bltu	r18,r6,4a2c8 <__umoddi3+0x60c>
   49e34:	9185c83a 	sub	r2,r18,r6
   49e38:	89e3c83a 	sub	r17,r17,r7
   49e3c:	90a5803a 	cmpltu	r18,r18,r2
   49e40:	8ca9c83a 	sub	r20,r17,r18
   49e44:	a007883a 	mov	r3,r20
   49e48:	00004306 	br	49f58 <__umoddi3+0x29c>
   49e4c:	3000041e 	bne	r6,zero,49e60 <__umoddi3+0x1a4>
   49e50:	01000044 	movi	r4,1
   49e54:	000b883a 	mov	r5,zero
   49e58:	004ae740 	call	4ae74 <__udivsi3>
   49e5c:	1021883a 	mov	r16,r2
   49e60:	00bfffd4 	movui	r2,65535
   49e64:	1400532e 	bgeu	r2,r16,49fb4 <__umoddi3+0x2f8>
   49e68:	00804034 	movhi	r2,256
   49e6c:	10bfffc4 	addi	r2,r2,-1
   49e70:	14010536 	bltu	r2,r16,4a288 <__umoddi3+0x5cc>
   49e74:	00800404 	movi	r2,16
   49e78:	1007883a 	mov	r3,r2
   49e7c:	8084d83a 	srl	r2,r16,r2
   49e80:	01000174 	movhi	r4,5
   49e84:	21395004 	addi	r4,r4,-6848
   49e88:	05400804 	movi	r21,32
   49e8c:	2085883a 	add	r2,r4,r2
   49e90:	10800003 	ldbu	r2,0(r2)
   49e94:	10c7883a 	add	r3,r2,r3
   49e98:	a8ebc83a 	sub	r21,r21,r3
   49e9c:	a800b81e 	bne	r21,zero,4a180 <__umoddi3+0x4c4>
   49ea0:	8028d43a 	srli	r20,r16,16
   49ea4:	8c23c83a 	sub	r17,r17,r16
   49ea8:	85bfffcc 	andi	r22,r16,65535
   49eac:	8809883a 	mov	r4,r17
   49eb0:	a00b883a 	mov	r5,r20
   49eb4:	004ae7c0 	call	4ae7c <__umodsi3>
   49eb8:	8809883a 	mov	r4,r17
   49ebc:	a00b883a 	mov	r5,r20
   49ec0:	1025883a 	mov	r18,r2
   49ec4:	004ae740 	call	4ae74 <__udivsi3>
   49ec8:	1009883a 	mov	r4,r2
   49ecc:	b00b883a 	mov	r5,r22
   49ed0:	00411f80 	call	411f8 <__mulsi3>
   49ed4:	1009883a 	mov	r4,r2
   49ed8:	9006943a 	slli	r3,r18,16
   49edc:	9804d43a 	srli	r2,r19,16
   49ee0:	1886b03a 	or	r3,r3,r2
   49ee4:	1900032e 	bgeu	r3,r4,49ef4 <__umoddi3+0x238>
   49ee8:	1c07883a 	add	r3,r3,r16
   49eec:	1c000136 	bltu	r3,r16,49ef4 <__umoddi3+0x238>
   49ef0:	1900f336 	bltu	r3,r4,4a2c0 <__umoddi3+0x604>
   49ef4:	1923c83a 	sub	r17,r3,r4
   49ef8:	8809883a 	mov	r4,r17
   49efc:	a00b883a 	mov	r5,r20
   49f00:	004ae7c0 	call	4ae7c <__umodsi3>
   49f04:	102f883a 	mov	r23,r2
   49f08:	8809883a 	mov	r4,r17
   49f0c:	a00b883a 	mov	r5,r20
   49f10:	b82e943a 	slli	r23,r23,16
   49f14:	004ae740 	call	4ae74 <__udivsi3>
   49f18:	1009883a 	mov	r4,r2
   49f1c:	b00b883a 	mov	r5,r22
   49f20:	9cffffcc 	andi	r19,r19,65535
   49f24:	00411f80 	call	411f8 <__mulsi3>
   49f28:	bce6b03a 	or	r19,r23,r19
   49f2c:	9880042e 	bgeu	r19,r2,49f40 <__umoddi3+0x284>
   49f30:	9c27883a 	add	r19,r19,r16
   49f34:	9c000236 	bltu	r19,r16,49f40 <__umoddi3+0x284>
   49f38:	9880012e 	bgeu	r19,r2,49f40 <__umoddi3+0x284>
   49f3c:	9c27883a 	add	r19,r19,r16
   49f40:	9885c83a 	sub	r2,r19,r2
   49f44:	1544d83a 	srl	r2,r2,r21
   49f48:	0007883a 	mov	r3,zero
   49f4c:	00000206 	br	49f58 <__umoddi3+0x29c>
   49f50:	2005883a 	mov	r2,r4
   49f54:	2807883a 	mov	r3,r5
   49f58:	dfc00c17 	ldw	ra,48(sp)
   49f5c:	df000b17 	ldw	fp,44(sp)
   49f60:	ddc00a17 	ldw	r23,40(sp)
   49f64:	dd800917 	ldw	r22,36(sp)
   49f68:	dd400817 	ldw	r21,32(sp)
   49f6c:	dd000717 	ldw	r20,28(sp)
   49f70:	dcc00617 	ldw	r19,24(sp)
   49f74:	dc800517 	ldw	r18,20(sp)
   49f78:	dc400417 	ldw	r17,16(sp)
   49f7c:	dc000317 	ldw	r16,12(sp)
   49f80:	dec00d04 	addi	sp,sp,52
   49f84:	f800283a 	ret
   49f88:	00803fc4 	movi	r2,255
   49f8c:	11c0b236 	bltu	r2,r7,4a258 <__umoddi3+0x59c>
   49f90:	0007883a 	mov	r3,zero
   49f94:	0027883a 	mov	r19,zero
   49f98:	003f9b06 	br	49e08 <__umoddi3+0x14c>
   49f9c:	00804034 	movhi	r2,256
   49fa0:	10bfffc4 	addi	r2,r2,-1
   49fa4:	1180b236 	bltu	r2,r6,4a270 <__umoddi3+0x5b4>
   49fa8:	00800404 	movi	r2,16
   49fac:	1009883a 	mov	r4,r2
   49fb0:	003f5a06 	br	49d1c <__umoddi3+0x60>
   49fb4:	00803fc4 	movi	r2,255
   49fb8:	1400b036 	bltu	r2,r16,4a27c <__umoddi3+0x5c0>
   49fbc:	0005883a 	mov	r2,zero
   49fc0:	0007883a 	mov	r3,zero
   49fc4:	003fad06 	br	49e7c <__umoddi3+0x1c0>
   49fc8:	34c4d83a 	srl	r2,r6,r19
   49fcc:	3c0e983a 	sll	r7,r7,r16
   49fd0:	8cf8d83a 	srl	fp,r17,r19
   49fd4:	8c22983a 	sll	r17,r17,r16
   49fd8:	38a8b03a 	or	r20,r7,r2
   49fdc:	a02ad43a 	srli	r21,r20,16
   49fe0:	94c4d83a 	srl	r2,r18,r19
   49fe4:	e009883a 	mov	r4,fp
   49fe8:	a80b883a 	mov	r5,r21
   49fec:	342c983a 	sll	r22,r6,r16
   49ff0:	88a2b03a 	or	r17,r17,r2
   49ff4:	004ae7c0 	call	4ae7c <__umodsi3>
   49ff8:	e009883a 	mov	r4,fp
   49ffc:	a80b883a 	mov	r5,r21
   4a000:	a5ffffcc 	andi	r23,r20,65535
   4a004:	d8800215 	stw	r2,8(sp)
   4a008:	004ae740 	call	4ae74 <__udivsi3>
   4a00c:	1009883a 	mov	r4,r2
   4a010:	b80b883a 	mov	r5,r23
   4a014:	1039883a 	mov	fp,r2
   4a018:	00411f80 	call	411f8 <__mulsi3>
   4a01c:	d8c00217 	ldw	r3,8(sp)
   4a020:	1009883a 	mov	r4,r2
   4a024:	8804d43a 	srli	r2,r17,16
   4a028:	1806943a 	slli	r3,r3,16
   4a02c:	9424983a 	sll	r18,r18,r16
   4a030:	1886b03a 	or	r3,r3,r2
   4a034:	1900042e 	bgeu	r3,r4,4a048 <__umoddi3+0x38c>
   4a038:	1d07883a 	add	r3,r3,r20
   4a03c:	e0bfffc4 	addi	r2,fp,-1
   4a040:	1d009b2e 	bgeu	r3,r20,4a2b0 <__umoddi3+0x5f4>
   4a044:	1039883a 	mov	fp,r2
   4a048:	1907c83a 	sub	r3,r3,r4
   4a04c:	1809883a 	mov	r4,r3
   4a050:	a80b883a 	mov	r5,r21
   4a054:	d8c00215 	stw	r3,8(sp)
   4a058:	004ae7c0 	call	4ae7c <__umodsi3>
   4a05c:	d8c00217 	ldw	r3,8(sp)
   4a060:	a80b883a 	mov	r5,r21
   4a064:	d8800015 	stw	r2,0(sp)
   4a068:	1809883a 	mov	r4,r3
   4a06c:	004ae740 	call	4ae74 <__udivsi3>
   4a070:	1009883a 	mov	r4,r2
   4a074:	b80b883a 	mov	r5,r23
   4a078:	102b883a 	mov	r21,r2
   4a07c:	00411f80 	call	411f8 <__mulsi3>
   4a080:	d9c00017 	ldw	r7,0(sp)
   4a084:	8c7fffcc 	andi	r17,r17,65535
   4a088:	380e943a 	slli	r7,r7,16
   4a08c:	3c4eb03a 	or	r7,r7,r17
   4a090:	3880042e 	bgeu	r7,r2,4a0a4 <__umoddi3+0x3e8>
   4a094:	3d0f883a 	add	r7,r7,r20
   4a098:	a8ffffc4 	addi	r3,r21,-1
   4a09c:	3d00802e 	bgeu	r7,r20,4a2a0 <__umoddi3+0x5e4>
   4a0a0:	182b883a 	mov	r21,r3
   4a0a4:	e038943a 	slli	fp,fp,16
   4a0a8:	b010d43a 	srli	r8,r22,16
   4a0ac:	b1bfffcc 	andi	r6,r22,65535
   4a0b0:	af2ab03a 	or	r21,r21,fp
   4a0b4:	a82ed43a 	srli	r23,r21,16
   4a0b8:	ad7fffcc 	andi	r21,r21,65535
   4a0bc:	300b883a 	mov	r5,r6
   4a0c0:	a809883a 	mov	r4,r21
   4a0c4:	38a3c83a 	sub	r17,r7,r2
   4a0c8:	d9800115 	stw	r6,4(sp)
   4a0cc:	da000015 	stw	r8,0(sp)
   4a0d0:	00411f80 	call	411f8 <__mulsi3>
   4a0d4:	da000017 	ldw	r8,0(sp)
   4a0d8:	a809883a 	mov	r4,r21
   4a0dc:	1039883a 	mov	fp,r2
   4a0e0:	400b883a 	mov	r5,r8
   4a0e4:	da000215 	stw	r8,8(sp)
   4a0e8:	00411f80 	call	411f8 <__mulsi3>
   4a0ec:	d9800117 	ldw	r6,4(sp)
   4a0f0:	b809883a 	mov	r4,r23
   4a0f4:	d8800015 	stw	r2,0(sp)
   4a0f8:	300b883a 	mov	r5,r6
   4a0fc:	00411f80 	call	411f8 <__mulsi3>
   4a100:	d8c00217 	ldw	r3,8(sp)
   4a104:	b809883a 	mov	r4,r23
   4a108:	102b883a 	mov	r21,r2
   4a10c:	180b883a 	mov	r5,r3
   4a110:	00411f80 	call	411f8 <__mulsi3>
   4a114:	d9c00017 	ldw	r7,0(sp)
   4a118:	1007883a 	mov	r3,r2
   4a11c:	e004d43a 	srli	r2,fp,16
   4a120:	a9c9883a 	add	r4,r21,r7
   4a124:	2089883a 	add	r4,r4,r2
   4a128:	2540022e 	bgeu	r4,r21,4a134 <__umoddi3+0x478>
   4a12c:	00800074 	movhi	r2,1
   4a130:	1887883a 	add	r3,r3,r2
   4a134:	2004d43a 	srli	r2,r4,16
   4a138:	2008943a 	slli	r4,r4,16
   4a13c:	e73fffcc 	andi	fp,fp,65535
   4a140:	1887883a 	add	r3,r3,r2
   4a144:	2709883a 	add	r4,r4,fp
   4a148:	88c03d36 	bltu	r17,r3,4a240 <__umoddi3+0x584>
   4a14c:	88c06126 	beq	r17,r3,4a2d4 <__umoddi3+0x618>
   4a150:	88c7c83a 	sub	r3,r17,r3
   4a154:	202d883a 	mov	r22,r4
   4a158:	95adc83a 	sub	r22,r18,r22
   4a15c:	95a5803a 	cmpltu	r18,r18,r22
   4a160:	1c87c83a 	sub	r3,r3,r18
   4a164:	1cc4983a 	sll	r2,r3,r19
   4a168:	b42cd83a 	srl	r22,r22,r16
   4a16c:	1c06d83a 	srl	r3,r3,r16
   4a170:	1584b03a 	or	r2,r2,r22
   4a174:	003f7806 	br	49f58 <__umoddi3+0x29c>
   4a178:	002b883a 	mov	r21,zero
   4a17c:	003ef506 	br	49d54 <__umoddi3+0x98>
   4a180:	8560983a 	sll	r16,r16,r21
   4a184:	88e6d83a 	srl	r19,r17,r3
   4a188:	90c6d83a 	srl	r3,r18,r3
   4a18c:	8028d43a 	srli	r20,r16,16
   4a190:	8d62983a 	sll	r17,r17,r21
   4a194:	9809883a 	mov	r4,r19
   4a198:	a00b883a 	mov	r5,r20
   4a19c:	88eeb03a 	or	r23,r17,r3
   4a1a0:	004ae7c0 	call	4ae7c <__umodsi3>
   4a1a4:	9809883a 	mov	r4,r19
   4a1a8:	a00b883a 	mov	r5,r20
   4a1ac:	1023883a 	mov	r17,r2
   4a1b0:	85bfffcc 	andi	r22,r16,65535
   4a1b4:	004ae740 	call	4ae74 <__udivsi3>
   4a1b8:	1009883a 	mov	r4,r2
   4a1bc:	b00b883a 	mov	r5,r22
   4a1c0:	00411f80 	call	411f8 <__mulsi3>
   4a1c4:	1007883a 	mov	r3,r2
   4a1c8:	8808943a 	slli	r4,r17,16
   4a1cc:	b804d43a 	srli	r2,r23,16
   4a1d0:	9566983a 	sll	r19,r18,r21
   4a1d4:	2088b03a 	or	r4,r4,r2
   4a1d8:	20c0042e 	bgeu	r4,r3,4a1ec <__umoddi3+0x530>
   4a1dc:	2409883a 	add	r4,r4,r16
   4a1e0:	24000236 	bltu	r4,r16,4a1ec <__umoddi3+0x530>
   4a1e4:	20c0012e 	bgeu	r4,r3,4a1ec <__umoddi3+0x530>
   4a1e8:	2409883a 	add	r4,r4,r16
   4a1ec:	20e5c83a 	sub	r18,r4,r3
   4a1f0:	9009883a 	mov	r4,r18
   4a1f4:	a00b883a 	mov	r5,r20
   4a1f8:	004ae7c0 	call	4ae7c <__umodsi3>
   4a1fc:	1023883a 	mov	r17,r2
   4a200:	9009883a 	mov	r4,r18
   4a204:	a00b883a 	mov	r5,r20
   4a208:	8822943a 	slli	r17,r17,16
   4a20c:	004ae740 	call	4ae74 <__udivsi3>
   4a210:	1009883a 	mov	r4,r2
   4a214:	b00b883a 	mov	r5,r22
   4a218:	bdffffcc 	andi	r23,r23,65535
   4a21c:	00411f80 	call	411f8 <__mulsi3>
   4a220:	8de2b03a 	or	r17,r17,r23
   4a224:	8880042e 	bgeu	r17,r2,4a238 <__umoddi3+0x57c>
   4a228:	8c23883a 	add	r17,r17,r16
   4a22c:	8c000236 	bltu	r17,r16,4a238 <__umoddi3+0x57c>
   4a230:	8880012e 	bgeu	r17,r2,4a238 <__umoddi3+0x57c>
   4a234:	8c23883a 	add	r17,r17,r16
   4a238:	88a3c83a 	sub	r17,r17,r2
   4a23c:	003f1b06 	br	49eac <__umoddi3+0x1f0>
   4a240:	25adc83a 	sub	r22,r4,r22
   4a244:	1d07c83a 	sub	r3,r3,r20
   4a248:	2589803a 	cmpltu	r4,r4,r22
   4a24c:	1907c83a 	sub	r3,r3,r4
   4a250:	88c7c83a 	sub	r3,r17,r3
   4a254:	003fc006 	br	4a158 <__umoddi3+0x49c>
   4a258:	00c00204 	movi	r3,8
   4a25c:	1827883a 	mov	r19,r3
   4a260:	003ee906 	br	49e08 <__umoddi3+0x14c>
   4a264:	00c00604 	movi	r3,24
   4a268:	1827883a 	mov	r19,r3
   4a26c:	003ee606 	br	49e08 <__umoddi3+0x14c>
   4a270:	00800604 	movi	r2,24
   4a274:	1009883a 	mov	r4,r2
   4a278:	003ea806 	br	49d1c <__umoddi3+0x60>
   4a27c:	00800204 	movi	r2,8
   4a280:	1007883a 	mov	r3,r2
   4a284:	003efd06 	br	49e7c <__umoddi3+0x1c0>
   4a288:	00800604 	movi	r2,24
   4a28c:	1007883a 	mov	r3,r2
   4a290:	003efa06 	br	49e7c <__umoddi3+0x1c0>
   4a294:	00800204 	movi	r2,8
   4a298:	1009883a 	mov	r4,r2
   4a29c:	003e9f06 	br	49d1c <__umoddi3+0x60>
   4a2a0:	38bf7f2e 	bgeu	r7,r2,4a0a0 <__umoddi3+0x3e4>
   4a2a4:	ad7fff84 	addi	r21,r21,-2
   4a2a8:	3d0f883a 	add	r7,r7,r20
   4a2ac:	003f7d06 	br	4a0a4 <__umoddi3+0x3e8>
   4a2b0:	193f642e 	bgeu	r3,r4,4a044 <__umoddi3+0x388>
   4a2b4:	e73fff84 	addi	fp,fp,-2
   4a2b8:	1d07883a 	add	r3,r3,r20
   4a2bc:	003f6206 	br	4a048 <__umoddi3+0x38c>
   4a2c0:	1c07883a 	add	r3,r3,r16
   4a2c4:	003f0b06 	br	49ef4 <__umoddi3+0x238>
   4a2c8:	9005883a 	mov	r2,r18
   4a2cc:	a007883a 	mov	r3,r20
   4a2d0:	003f2106 	br	49f58 <__umoddi3+0x29c>
   4a2d4:	913fda36 	bltu	r18,r4,4a240 <__umoddi3+0x584>
   4a2d8:	202d883a 	mov	r22,r4
   4a2dc:	0007883a 	mov	r3,zero
   4a2e0:	003f9d06 	br	4a158 <__umoddi3+0x49c>

0004a2e4 <_fpadd_parts>:
   4a2e4:	2005883a 	mov	r2,r4
   4a2e8:	21000017 	ldw	r4,0(r4)
   4a2ec:	01c00044 	movi	r7,1
   4a2f0:	3900622e 	bgeu	r7,r4,4a47c <_fpadd_parts+0x198>
   4a2f4:	28c00017 	ldw	r3,0(r5)
   4a2f8:	38c05f2e 	bgeu	r7,r3,4a478 <_fpadd_parts+0x194>
   4a2fc:	01c00104 	movi	r7,4
   4a300:	21c0c626 	beq	r4,r7,4a61c <_fpadd_parts+0x338>
   4a304:	19c05c26 	beq	r3,r7,4a478 <_fpadd_parts+0x194>
   4a308:	01c00084 	movi	r7,2
   4a30c:	19c06b26 	beq	r3,r7,4a4bc <_fpadd_parts+0x1d8>
   4a310:	21c05926 	beq	r4,r7,4a478 <_fpadd_parts+0x194>
   4a314:	11c00217 	ldw	r7,8(r2)
   4a318:	2ac00217 	ldw	r11,8(r5)
   4a31c:	13000317 	ldw	r12,12(r2)
   4a320:	13400417 	ldw	r13,16(r2)
   4a324:	3ac9c83a 	sub	r4,r7,r11
   4a328:	2a000317 	ldw	r8,12(r5)
   4a32c:	2a400417 	ldw	r9,16(r5)
   4a330:	2015883a 	mov	r10,r4
   4a334:	20007516 	blt	r4,zero,4a50c <_fpadd_parts+0x228>
   4a338:	00c00fc4 	movi	r3,63
   4a33c:	1a805016 	blt	r3,r10,4a480 <_fpadd_parts+0x19c>
   4a340:	0100870e 	bge	zero,r4,4a560 <_fpadd_parts+0x27c>
   4a344:	50fff804 	addi	r3,r10,-32
   4a348:	18009916 	blt	r3,zero,4a5b0 <_fpadd_parts+0x2cc>
   4a34c:	48d6d83a 	srl	r11,r9,r3
   4a350:	001d883a 	mov	r14,zero
   4a354:	18009e16 	blt	r3,zero,4a5d0 <_fpadd_parts+0x2ec>
   4a358:	01000044 	movi	r4,1
   4a35c:	20c6983a 	sll	r3,r4,r3
   4a360:	0015883a 	mov	r10,zero
   4a364:	513fffc4 	addi	r4,r10,-1
   4a368:	2295403a 	cmpgeu	r10,r4,r10
   4a36c:	1a87c83a 	sub	r3,r3,r10
   4a370:	1a52703a 	and	r9,r3,r9
   4a374:	2210703a 	and	r8,r4,r8
   4a378:	4250b03a 	or	r8,r8,r9
   4a37c:	4010c03a 	cmpne	r8,r8,zero
   4a380:	42d0b03a 	or	r8,r8,r11
   4a384:	7013883a 	mov	r9,r14
   4a388:	11000117 	ldw	r4,4(r2)
   4a38c:	28800117 	ldw	r2,4(r5)
   4a390:	20804126 	beq	r4,r2,4a498 <_fpadd_parts+0x1b4>
   4a394:	20006326 	beq	r4,zero,4a524 <_fpadd_parts+0x240>
   4a398:	4305c83a 	sub	r2,r8,r12
   4a39c:	4091803a 	cmpltu	r8,r8,r2
   4a3a0:	4b47c83a 	sub	r3,r9,r13
   4a3a4:	1a07c83a 	sub	r3,r3,r8
   4a3a8:	18006316 	blt	r3,zero,4a538 <_fpadd_parts+0x254>
   4a3ac:	30000115 	stw	zero,4(r6)
   4a3b0:	31c00215 	stw	r7,8(r6)
   4a3b4:	30800315 	stw	r2,12(r6)
   4a3b8:	30c00415 	stw	r3,16(r6)
   4a3bc:	11ffffc4 	addi	r7,r2,-1
   4a3c0:	388b403a 	cmpgeu	r5,r7,r2
   4a3c4:	194bc83a 	sub	r5,r3,r5
   4a3c8:	01040034 	movhi	r4,4096
   4a3cc:	213fffc4 	addi	r4,r4,-1
   4a3d0:	21401736 	bltu	r4,r5,4a430 <_fpadd_parts+0x14c>
   4a3d4:	29008226 	beq	r5,r4,4a5e0 <_fpadd_parts+0x2fc>
   4a3d8:	31400217 	ldw	r5,8(r6)
   4a3dc:	02840034 	movhi	r10,4096
   4a3e0:	52bfffc4 	addi	r10,r10,-1
   4a3e4:	033fff84 	movi	r12,-2
   4a3e8:	297fffc4 	addi	r5,r5,-1
   4a3ec:	00000106 	br	4a3f4 <_fpadd_parts+0x110>
   4a3f0:	3a804a26 	beq	r7,r10,4a51c <_fpadd_parts+0x238>
   4a3f4:	1089883a 	add	r4,r2,r2
   4a3f8:	2091803a 	cmpltu	r8,r4,r2
   4a3fc:	18c7883a 	add	r3,r3,r3
   4a400:	227fffc4 	addi	r9,r4,-1
   4a404:	40d1883a 	add	r8,r8,r3
   4a408:	490f403a 	cmpgeu	r7,r9,r4
   4a40c:	41cfc83a 	sub	r7,r8,r7
   4a410:	2817883a 	mov	r11,r5
   4a414:	2005883a 	mov	r2,r4
   4a418:	4007883a 	mov	r3,r8
   4a41c:	297fffc4 	addi	r5,r5,-1
   4a420:	51fff32e 	bgeu	r10,r7,4a3f0 <_fpadd_parts+0x10c>
   4a424:	31000315 	stw	r4,12(r6)
   4a428:	32000415 	stw	r8,16(r6)
   4a42c:	32c00215 	stw	r11,8(r6)
   4a430:	010000c4 	movi	r4,3
   4a434:	31000015 	stw	r4,0(r6)
   4a438:	01080034 	movhi	r4,8192
   4a43c:	213fffc4 	addi	r4,r4,-1
   4a440:	20c00b2e 	bgeu	r4,r3,4a470 <_fpadd_parts+0x18c>
   4a444:	180e97fa 	slli	r7,r3,31
   4a448:	1008d07a 	srli	r4,r2,1
   4a44c:	31400217 	ldw	r5,8(r6)
   4a450:	1806d07a 	srli	r3,r3,1
   4a454:	1080004c 	andi	r2,r2,1
   4a458:	3908b03a 	or	r4,r7,r4
   4a45c:	1108b03a 	or	r4,r2,r4
   4a460:	29400044 	addi	r5,r5,1
   4a464:	31000315 	stw	r4,12(r6)
   4a468:	30c00415 	stw	r3,16(r6)
   4a46c:	31400215 	stw	r5,8(r6)
   4a470:	3005883a 	mov	r2,r6
   4a474:	f800283a 	ret
   4a478:	2805883a 	mov	r2,r5
   4a47c:	f800283a 	ret
   4a480:	59c01e0e 	bge	r11,r7,4a4fc <_fpadd_parts+0x218>
   4a484:	11000117 	ldw	r4,4(r2)
   4a488:	28800117 	ldw	r2,4(r5)
   4a48c:	0011883a 	mov	r8,zero
   4a490:	0013883a 	mov	r9,zero
   4a494:	20bfbf1e 	bne	r4,r2,4a394 <_fpadd_parts+0xb0>
   4a498:	4305883a 	add	r2,r8,r12
   4a49c:	1207803a 	cmpltu	r3,r2,r8
   4a4a0:	4b53883a 	add	r9,r9,r13
   4a4a4:	1a47883a 	add	r3,r3,r9
   4a4a8:	31000115 	stw	r4,4(r6)
   4a4ac:	31c00215 	stw	r7,8(r6)
   4a4b0:	30800315 	stw	r2,12(r6)
   4a4b4:	30c00415 	stw	r3,16(r6)
   4a4b8:	003fdd06 	br	4a430 <_fpadd_parts+0x14c>
   4a4bc:	20ffef1e 	bne	r4,r3,4a47c <_fpadd_parts+0x198>
   4a4c0:	31000015 	stw	r4,0(r6)
   4a4c4:	10c00117 	ldw	r3,4(r2)
   4a4c8:	30c00115 	stw	r3,4(r6)
   4a4cc:	10c00217 	ldw	r3,8(r2)
   4a4d0:	11000117 	ldw	r4,4(r2)
   4a4d4:	29400117 	ldw	r5,4(r5)
   4a4d8:	30c00215 	stw	r3,8(r6)
   4a4dc:	10c00317 	ldw	r3,12(r2)
   4a4e0:	2908703a 	and	r4,r5,r4
   4a4e4:	30c00315 	stw	r3,12(r6)
   4a4e8:	10c00417 	ldw	r3,16(r2)
   4a4ec:	31000115 	stw	r4,4(r6)
   4a4f0:	3005883a 	mov	r2,r6
   4a4f4:	30c00415 	stw	r3,16(r6)
   4a4f8:	f800283a 	ret
   4a4fc:	580f883a 	mov	r7,r11
   4a500:	0019883a 	mov	r12,zero
   4a504:	001b883a 	mov	r13,zero
   4a508:	003f9f06 	br	4a388 <_fpadd_parts+0xa4>
   4a50c:	0115c83a 	sub	r10,zero,r4
   4a510:	00c00fc4 	movi	r3,63
   4a514:	1abfda16 	blt	r3,r10,4a480 <_fpadd_parts+0x19c>
   4a518:	003f8906 	br	4a340 <_fpadd_parts+0x5c>
   4a51c:	627fb52e 	bgeu	r12,r9,4a3f4 <_fpadd_parts+0x110>
   4a520:	003fc006 	br	4a424 <_fpadd_parts+0x140>
   4a524:	6205c83a 	sub	r2,r12,r8
   4a528:	6099803a 	cmpltu	r12,r12,r2
   4a52c:	6a47c83a 	sub	r3,r13,r9
   4a530:	1b07c83a 	sub	r3,r3,r12
   4a534:	183f9d0e 	bge	r3,zero,4a3ac <_fpadd_parts+0xc8>
   4a538:	0085c83a 	sub	r2,zero,r2
   4a53c:	1008c03a 	cmpne	r4,r2,zero
   4a540:	00c7c83a 	sub	r3,zero,r3
   4a544:	1907c83a 	sub	r3,r3,r4
   4a548:	01000044 	movi	r4,1
   4a54c:	31000115 	stw	r4,4(r6)
   4a550:	31c00215 	stw	r7,8(r6)
   4a554:	30800315 	stw	r2,12(r6)
   4a558:	30c00415 	stw	r3,16(r6)
   4a55c:	003f9706 	br	4a3bc <_fpadd_parts+0xd8>
   4a560:	203f8926 	beq	r4,zero,4a388 <_fpadd_parts+0xa4>
   4a564:	50fff804 	addi	r3,r10,-32
   4a568:	3a8f883a 	add	r7,r7,r10
   4a56c:	18002316 	blt	r3,zero,4a5fc <_fpadd_parts+0x318>
   4a570:	68d6d83a 	srl	r11,r13,r3
   4a574:	001d883a 	mov	r14,zero
   4a578:	18001c16 	blt	r3,zero,4a5ec <_fpadd_parts+0x308>
   4a57c:	01000044 	movi	r4,1
   4a580:	20c6983a 	sll	r3,r4,r3
   4a584:	0015883a 	mov	r10,zero
   4a588:	513fffc4 	addi	r4,r10,-1
   4a58c:	2295403a 	cmpgeu	r10,r4,r10
   4a590:	1a87c83a 	sub	r3,r3,r10
   4a594:	1b5a703a 	and	r13,r3,r13
   4a598:	2318703a 	and	r12,r4,r12
   4a59c:	6358b03a 	or	r12,r12,r13
   4a5a0:	6018c03a 	cmpne	r12,r12,zero
   4a5a4:	62d8b03a 	or	r12,r12,r11
   4a5a8:	701b883a 	mov	r13,r14
   4a5ac:	003f7606 	br	4a388 <_fpadd_parts+0xa4>
   4a5b0:	4808907a 	slli	r4,r9,1
   4a5b4:	02c007c4 	movi	r11,31
   4a5b8:	5a97c83a 	sub	r11,r11,r10
   4a5bc:	22c8983a 	sll	r4,r4,r11
   4a5c0:	4296d83a 	srl	r11,r8,r10
   4a5c4:	4a9cd83a 	srl	r14,r9,r10
   4a5c8:	22d6b03a 	or	r11,r4,r11
   4a5cc:	003f6106 	br	4a354 <_fpadd_parts+0x70>
   4a5d0:	00c00044 	movi	r3,1
   4a5d4:	1a94983a 	sll	r10,r3,r10
   4a5d8:	0007883a 	mov	r3,zero
   4a5dc:	003f6106 	br	4a364 <_fpadd_parts+0x80>
   4a5e0:	013fff84 	movi	r4,-2
   4a5e4:	21ff7c2e 	bgeu	r4,r7,4a3d8 <_fpadd_parts+0xf4>
   4a5e8:	003f9106 	br	4a430 <_fpadd_parts+0x14c>
   4a5ec:	00c00044 	movi	r3,1
   4a5f0:	1a94983a 	sll	r10,r3,r10
   4a5f4:	0007883a 	mov	r3,zero
   4a5f8:	003fe306 	br	4a588 <_fpadd_parts+0x2a4>
   4a5fc:	6816907a 	slli	r11,r13,1
   4a600:	010007c4 	movi	r4,31
   4a604:	2289c83a 	sub	r4,r4,r10
   4a608:	5908983a 	sll	r4,r11,r4
   4a60c:	6296d83a 	srl	r11,r12,r10
   4a610:	6a9cd83a 	srl	r14,r13,r10
   4a614:	22d6b03a 	or	r11,r4,r11
   4a618:	003fd706 	br	4a578 <_fpadd_parts+0x294>
   4a61c:	193f971e 	bne	r3,r4,4a47c <_fpadd_parts+0x198>
   4a620:	11000117 	ldw	r4,4(r2)
   4a624:	28c00117 	ldw	r3,4(r5)
   4a628:	20ff9426 	beq	r4,r3,4a47c <_fpadd_parts+0x198>
   4a62c:	00800174 	movhi	r2,5
   4a630:	10b94b04 	addi	r2,r2,-6868
   4a634:	f800283a 	ret

0004a638 <__adddf3>:
   4a638:	deffec04 	addi	sp,sp,-80
   4a63c:	d9001115 	stw	r4,68(sp)
   4a640:	d9401215 	stw	r5,72(sp)
   4a644:	d9001104 	addi	r4,sp,68
   4a648:	d9400a04 	addi	r5,sp,40
   4a64c:	dfc01315 	stw	ra,76(sp)
   4a650:	d9c01015 	stw	r7,64(sp)
   4a654:	d9800f15 	stw	r6,60(sp)
   4a658:	00414f00 	call	414f0 <__unpack_d>
   4a65c:	d9000f04 	addi	r4,sp,60
   4a660:	d9400504 	addi	r5,sp,20
   4a664:	00414f00 	call	414f0 <__unpack_d>
   4a668:	d9000a04 	addi	r4,sp,40
   4a66c:	d9400504 	addi	r5,sp,20
   4a670:	d80d883a 	mov	r6,sp
   4a674:	004a2e40 	call	4a2e4 <_fpadd_parts>
   4a678:	1009883a 	mov	r4,r2
   4a67c:	00412cc0 	call	412cc <__pack_d>
   4a680:	dfc01317 	ldw	ra,76(sp)
   4a684:	dec01404 	addi	sp,sp,80
   4a688:	f800283a 	ret

0004a68c <__subdf3>:
   4a68c:	deffec04 	addi	sp,sp,-80
   4a690:	d9001115 	stw	r4,68(sp)
   4a694:	d9401215 	stw	r5,72(sp)
   4a698:	d9001104 	addi	r4,sp,68
   4a69c:	d9400a04 	addi	r5,sp,40
   4a6a0:	dfc01315 	stw	ra,76(sp)
   4a6a4:	d9c01015 	stw	r7,64(sp)
   4a6a8:	d9800f15 	stw	r6,60(sp)
   4a6ac:	00414f00 	call	414f0 <__unpack_d>
   4a6b0:	d9000f04 	addi	r4,sp,60
   4a6b4:	d9400504 	addi	r5,sp,20
   4a6b8:	00414f00 	call	414f0 <__unpack_d>
   4a6bc:	d8800617 	ldw	r2,24(sp)
   4a6c0:	d9000a04 	addi	r4,sp,40
   4a6c4:	d9400504 	addi	r5,sp,20
   4a6c8:	d80d883a 	mov	r6,sp
   4a6cc:	1080005c 	xori	r2,r2,1
   4a6d0:	d8800615 	stw	r2,24(sp)
   4a6d4:	004a2e40 	call	4a2e4 <_fpadd_parts>
   4a6d8:	1009883a 	mov	r4,r2
   4a6dc:	00412cc0 	call	412cc <__pack_d>
   4a6e0:	dfc01317 	ldw	ra,76(sp)
   4a6e4:	dec01404 	addi	sp,sp,80
   4a6e8:	f800283a 	ret

0004a6ec <__muldf3>:
   4a6ec:	deffe404 	addi	sp,sp,-112
   4a6f0:	d9001115 	stw	r4,68(sp)
   4a6f4:	d9401215 	stw	r5,72(sp)
   4a6f8:	d9001104 	addi	r4,sp,68
   4a6fc:	d9400a04 	addi	r5,sp,40
   4a700:	dfc01b15 	stw	ra,108(sp)
   4a704:	d9800f15 	stw	r6,60(sp)
   4a708:	d9c01015 	stw	r7,64(sp)
   4a70c:	ddc01a15 	stw	r23,104(sp)
   4a710:	dd801915 	stw	r22,100(sp)
   4a714:	dd401815 	stw	r21,96(sp)
   4a718:	dd001715 	stw	r20,92(sp)
   4a71c:	dcc01615 	stw	r19,88(sp)
   4a720:	dc801515 	stw	r18,84(sp)
   4a724:	dc401415 	stw	r17,80(sp)
   4a728:	dc001315 	stw	r16,76(sp)
   4a72c:	00414f00 	call	414f0 <__unpack_d>
   4a730:	d9000f04 	addi	r4,sp,60
   4a734:	d9400504 	addi	r5,sp,20
   4a738:	00414f00 	call	414f0 <__unpack_d>
   4a73c:	d8c00a17 	ldw	r3,40(sp)
   4a740:	00800044 	movi	r2,1
   4a744:	10c01136 	bltu	r2,r3,4a78c <__muldf3+0xa0>
   4a748:	d8c00b17 	ldw	r3,44(sp)
   4a74c:	d8800617 	ldw	r2,24(sp)
   4a750:	d9000a04 	addi	r4,sp,40
   4a754:	1884c03a 	cmpne	r2,r3,r2
   4a758:	d8800b15 	stw	r2,44(sp)
   4a75c:	00412cc0 	call	412cc <__pack_d>
   4a760:	dfc01b17 	ldw	ra,108(sp)
   4a764:	ddc01a17 	ldw	r23,104(sp)
   4a768:	dd801917 	ldw	r22,100(sp)
   4a76c:	dd401817 	ldw	r21,96(sp)
   4a770:	dd001717 	ldw	r20,92(sp)
   4a774:	dcc01617 	ldw	r19,88(sp)
   4a778:	dc801517 	ldw	r18,84(sp)
   4a77c:	dc401417 	ldw	r17,80(sp)
   4a780:	dc001317 	ldw	r16,76(sp)
   4a784:	dec01c04 	addi	sp,sp,112
   4a788:	f800283a 	ret
   4a78c:	d9000517 	ldw	r4,20(sp)
   4a790:	11000636 	bltu	r2,r4,4a7ac <__muldf3+0xc0>
   4a794:	d8800617 	ldw	r2,24(sp)
   4a798:	d8c00b17 	ldw	r3,44(sp)
   4a79c:	d9000504 	addi	r4,sp,20
   4a7a0:	1884c03a 	cmpne	r2,r3,r2
   4a7a4:	d8800615 	stw	r2,24(sp)
   4a7a8:	003fec06 	br	4a75c <__muldf3+0x70>
   4a7ac:	00800104 	movi	r2,4
   4a7b0:	1880051e 	bne	r3,r2,4a7c8 <__muldf3+0xdc>
   4a7b4:	00800084 	movi	r2,2
   4a7b8:	20bfe31e 	bne	r4,r2,4a748 <__muldf3+0x5c>
   4a7bc:	01000174 	movhi	r4,5
   4a7c0:	21394b04 	addi	r4,r4,-6868
   4a7c4:	003fe506 	br	4a75c <__muldf3+0x70>
   4a7c8:	2080031e 	bne	r4,r2,4a7d8 <__muldf3+0xec>
   4a7cc:	00800084 	movi	r2,2
   4a7d0:	18bffa26 	beq	r3,r2,4a7bc <__muldf3+0xd0>
   4a7d4:	003fef06 	br	4a794 <__muldf3+0xa8>
   4a7d8:	00800084 	movi	r2,2
   4a7dc:	18bfda26 	beq	r3,r2,4a748 <__muldf3+0x5c>
   4a7e0:	20bfec26 	beq	r4,r2,4a794 <__muldf3+0xa8>
   4a7e4:	dc000d17 	ldw	r16,52(sp)
   4a7e8:	dd000817 	ldw	r20,32(sp)
   4a7ec:	dc800917 	ldw	r18,36(sp)
   4a7f0:	8009883a 	mov	r4,r16
   4a7f4:	000b883a 	mov	r5,zero
   4a7f8:	a00d883a 	mov	r6,r20
   4a7fc:	000f883a 	mov	r7,zero
   4a800:	004ae840 	call	4ae84 <__muldi3>
   4a804:	dc400e17 	ldw	r17,56(sp)
   4a808:	9009883a 	mov	r4,r18
   4a80c:	800d883a 	mov	r6,r16
   4a810:	000b883a 	mov	r5,zero
   4a814:	000f883a 	mov	r7,zero
   4a818:	102f883a 	mov	r23,r2
   4a81c:	1827883a 	mov	r19,r3
   4a820:	004ae840 	call	4ae84 <__muldi3>
   4a824:	900d883a 	mov	r6,r18
   4a828:	8809883a 	mov	r4,r17
   4a82c:	000b883a 	mov	r5,zero
   4a830:	000f883a 	mov	r7,zero
   4a834:	102b883a 	mov	r21,r2
   4a838:	1821883a 	mov	r16,r3
   4a83c:	004ae840 	call	4ae84 <__muldi3>
   4a840:	8809883a 	mov	r4,r17
   4a844:	000b883a 	mov	r5,zero
   4a848:	a00d883a 	mov	r6,r20
   4a84c:	000f883a 	mov	r7,zero
   4a850:	102d883a 	mov	r22,r2
   4a854:	1825883a 	mov	r18,r3
   4a858:	004ae840 	call	4ae84 <__muldi3>
   4a85c:	154b883a 	add	r5,r2,r21
   4a860:	2889803a 	cmpltu	r4,r5,r2
   4a864:	1c07883a 	add	r3,r3,r16
   4a868:	20c9883a 	add	r4,r4,r3
   4a86c:	24004b36 	bltu	r4,r16,4a99c <__muldf3+0x2b0>
   4a870:	8100011e 	bne	r16,r4,4a878 <__muldf3+0x18c>
   4a874:	2d404936 	bltu	r5,r21,4a99c <__muldf3+0x2b0>
   4a878:	0011883a 	mov	r8,zero
   4a87c:	0007883a 	mov	r3,zero
   4a880:	2ccb883a 	add	r5,r5,r19
   4a884:	b80d883a 	mov	r6,r23
   4a888:	2cc0012e 	bgeu	r5,r19,4a890 <__muldf3+0x1a4>
   4a88c:	02000044 	movi	r8,1
   4a890:	258f883a 	add	r7,r4,r22
   4a894:	3909803a 	cmpltu	r4,r7,r4
   4a898:	da400c17 	ldw	r9,48(sp)
   4a89c:	2489883a 	add	r4,r4,r18
   4a8a0:	d8800717 	ldw	r2,28(sp)
   4a8a4:	20c9883a 	add	r4,r4,r3
   4a8a8:	da800b17 	ldw	r10,44(sp)
   4a8ac:	d8c00617 	ldw	r3,24(sp)
   4a8b0:	3a11883a 	add	r8,r7,r8
   4a8b4:	4885883a 	add	r2,r9,r2
   4a8b8:	50c6c03a 	cmpne	r3,r10,r3
   4a8bc:	41cf803a 	cmpltu	r7,r8,r7
   4a8c0:	12400104 	addi	r9,r2,4
   4a8c4:	d8c00115 	stw	r3,4(sp)
   4a8c8:	3909883a 	add	r4,r7,r4
   4a8cc:	da400215 	stw	r9,8(sp)
   4a8d0:	03480034 	movhi	r13,8192
   4a8d4:	6b7fffc4 	addi	r13,r13,-1
   4a8d8:	4007883a 	mov	r3,r8
   4a8dc:	6900102e 	bgeu	r13,r4,4a920 <__muldf3+0x234>
   4a8e0:	10800144 	addi	r2,r2,5
   4a8e4:	180ed07a 	srli	r7,r3,1
   4a8e8:	18c0004c 	andi	r3,r3,1
   4a8ec:	201097fa 	slli	r8,r4,31
   4a8f0:	281697fa 	slli	r11,r5,31
   4a8f4:	2008d07a 	srli	r4,r4,1
   4a8f8:	3014d07a 	srli	r10,r6,1
   4a8fc:	2812d07a 	srli	r9,r5,1
   4a900:	1019883a 	mov	r12,r2
   4a904:	18000226 	beq	r3,zero,4a910 <__muldf3+0x224>
   4a908:	5a8cb03a 	or	r6,r11,r10
   4a90c:	49600034 	orhi	r5,r9,32768
   4a910:	41c6b03a 	or	r3,r8,r7
   4a914:	10800044 	addi	r2,r2,1
   4a918:	693ff236 	bltu	r13,r4,4a8e4 <__muldf3+0x1f8>
   4a91c:	db000215 	stw	r12,8(sp)
   4a920:	03440034 	movhi	r13,4096
   4a924:	6b7fffc4 	addi	r13,r13,-1
   4a928:	69001336 	bltu	r13,r4,4a978 <__muldf3+0x28c>
   4a92c:	d8800217 	ldw	r2,8(sp)
   4a930:	10bfffc4 	addi	r2,r2,-1
   4a934:	18d3883a 	add	r9,r3,r3
   4a938:	48c7803a 	cmpltu	r3,r9,r3
   4a93c:	2109883a 	add	r4,r4,r4
   4a940:	190f883a 	add	r7,r3,r4
   4a944:	3191883a 	add	r8,r6,r6
   4a948:	4197803a 	cmpltu	r11,r8,r6
   4a94c:	2955883a 	add	r10,r5,r5
   4a950:	1019883a 	mov	r12,r2
   4a954:	4807883a 	mov	r3,r9
   4a958:	3809883a 	mov	r4,r7
   4a95c:	2800010e 	bge	r5,zero,4a964 <__muldf3+0x278>
   4a960:	48c00054 	ori	r3,r9,1
   4a964:	400d883a 	mov	r6,r8
   4a968:	5a8b883a 	add	r5,r11,r10
   4a96c:	10bfffc4 	addi	r2,r2,-1
   4a970:	69fff02e 	bgeu	r13,r7,4a934 <__muldf3+0x248>
   4a974:	db000215 	stw	r12,8(sp)
   4a978:	18803fcc 	andi	r2,r3,255
   4a97c:	01c02004 	movi	r7,128
   4a980:	11c00926 	beq	r2,r7,4a9a8 <__muldf3+0x2bc>
   4a984:	008000c4 	movi	r2,3
   4a988:	d9000415 	stw	r4,16(sp)
   4a98c:	d8c00315 	stw	r3,12(sp)
   4a990:	d8800015 	stw	r2,0(sp)
   4a994:	d809883a 	mov	r4,sp
   4a998:	003f7006 	br	4a75c <__muldf3+0x70>
   4a99c:	0011883a 	mov	r8,zero
   4a9a0:	00c00044 	movi	r3,1
   4a9a4:	003fb606 	br	4a880 <__muldf3+0x194>
   4a9a8:	19c0400c 	andi	r7,r3,256
   4a9ac:	383ff51e 	bne	r7,zero,4a984 <__muldf3+0x298>
   4a9b0:	314ab03a 	or	r5,r6,r5
   4a9b4:	283ff326 	beq	r5,zero,4a984 <__muldf3+0x298>
   4a9b8:	1885883a 	add	r2,r3,r2
   4a9bc:	10cb803a 	cmpltu	r5,r2,r3
   4a9c0:	00ffc004 	movi	r3,-256
   4a9c4:	10c6703a 	and	r3,r2,r3
   4a9c8:	2909883a 	add	r4,r5,r4
   4a9cc:	003fed06 	br	4a984 <__muldf3+0x298>

0004a9d0 <__eqdf2>:
   4a9d0:	defff104 	addi	sp,sp,-60
   4a9d4:	d9000c15 	stw	r4,48(sp)
   4a9d8:	d9400d15 	stw	r5,52(sp)
   4a9dc:	d9000c04 	addi	r4,sp,48
   4a9e0:	d9400504 	addi	r5,sp,20
   4a9e4:	dfc00e15 	stw	ra,56(sp)
   4a9e8:	d9800a15 	stw	r6,40(sp)
   4a9ec:	d9c00b15 	stw	r7,44(sp)
   4a9f0:	00414f00 	call	414f0 <__unpack_d>
   4a9f4:	d9000a04 	addi	r4,sp,40
   4a9f8:	d80b883a 	mov	r5,sp
   4a9fc:	00414f00 	call	414f0 <__unpack_d>
   4aa00:	d8c00517 	ldw	r3,20(sp)
   4aa04:	00800044 	movi	r2,1
   4aa08:	10c0052e 	bgeu	r2,r3,4aa20 <__eqdf2+0x50>
   4aa0c:	d8c00017 	ldw	r3,0(sp)
   4aa10:	10c0032e 	bgeu	r2,r3,4aa20 <__eqdf2+0x50>
   4aa14:	d9000504 	addi	r4,sp,20
   4aa18:	d80b883a 	mov	r5,sp
   4aa1c:	004af940 	call	4af94 <__fpcmp_parts_d>
   4aa20:	dfc00e17 	ldw	ra,56(sp)
   4aa24:	dec00f04 	addi	sp,sp,60
   4aa28:	f800283a 	ret

0004aa2c <__nedf2>:
   4aa2c:	defff104 	addi	sp,sp,-60
   4aa30:	d9000c15 	stw	r4,48(sp)
   4aa34:	d9400d15 	stw	r5,52(sp)
   4aa38:	d9000c04 	addi	r4,sp,48
   4aa3c:	d9400504 	addi	r5,sp,20
   4aa40:	dfc00e15 	stw	ra,56(sp)
   4aa44:	d9800a15 	stw	r6,40(sp)
   4aa48:	d9c00b15 	stw	r7,44(sp)
   4aa4c:	00414f00 	call	414f0 <__unpack_d>
   4aa50:	d9000a04 	addi	r4,sp,40
   4aa54:	d80b883a 	mov	r5,sp
   4aa58:	00414f00 	call	414f0 <__unpack_d>
   4aa5c:	d8c00517 	ldw	r3,20(sp)
   4aa60:	00800044 	movi	r2,1
   4aa64:	10c0052e 	bgeu	r2,r3,4aa7c <__nedf2+0x50>
   4aa68:	d8c00017 	ldw	r3,0(sp)
   4aa6c:	10c0032e 	bgeu	r2,r3,4aa7c <__nedf2+0x50>
   4aa70:	d9000504 	addi	r4,sp,20
   4aa74:	d80b883a 	mov	r5,sp
   4aa78:	004af940 	call	4af94 <__fpcmp_parts_d>
   4aa7c:	dfc00e17 	ldw	ra,56(sp)
   4aa80:	dec00f04 	addi	sp,sp,60
   4aa84:	f800283a 	ret

0004aa88 <__gtdf2>:
   4aa88:	defff104 	addi	sp,sp,-60
   4aa8c:	d9000c15 	stw	r4,48(sp)
   4aa90:	d9400d15 	stw	r5,52(sp)
   4aa94:	d9000c04 	addi	r4,sp,48
   4aa98:	d9400504 	addi	r5,sp,20
   4aa9c:	dfc00e15 	stw	ra,56(sp)
   4aaa0:	d9800a15 	stw	r6,40(sp)
   4aaa4:	d9c00b15 	stw	r7,44(sp)
   4aaa8:	00414f00 	call	414f0 <__unpack_d>
   4aaac:	d9000a04 	addi	r4,sp,40
   4aab0:	d80b883a 	mov	r5,sp
   4aab4:	00414f00 	call	414f0 <__unpack_d>
   4aab8:	d8c00517 	ldw	r3,20(sp)
   4aabc:	00800044 	movi	r2,1
   4aac0:	10c0082e 	bgeu	r2,r3,4aae4 <__gtdf2+0x5c>
   4aac4:	d8c00017 	ldw	r3,0(sp)
   4aac8:	10c0062e 	bgeu	r2,r3,4aae4 <__gtdf2+0x5c>
   4aacc:	d9000504 	addi	r4,sp,20
   4aad0:	d80b883a 	mov	r5,sp
   4aad4:	004af940 	call	4af94 <__fpcmp_parts_d>
   4aad8:	dfc00e17 	ldw	ra,56(sp)
   4aadc:	dec00f04 	addi	sp,sp,60
   4aae0:	f800283a 	ret
   4aae4:	00bfffc4 	movi	r2,-1
   4aae8:	003ffb06 	br	4aad8 <__gtdf2+0x50>

0004aaec <__gedf2>:
   4aaec:	defff104 	addi	sp,sp,-60
   4aaf0:	d9000c15 	stw	r4,48(sp)
   4aaf4:	d9400d15 	stw	r5,52(sp)
   4aaf8:	d9000c04 	addi	r4,sp,48
   4aafc:	d9400504 	addi	r5,sp,20
   4ab00:	dfc00e15 	stw	ra,56(sp)
   4ab04:	d9800a15 	stw	r6,40(sp)
   4ab08:	d9c00b15 	stw	r7,44(sp)
   4ab0c:	00414f00 	call	414f0 <__unpack_d>
   4ab10:	d9000a04 	addi	r4,sp,40
   4ab14:	d80b883a 	mov	r5,sp
   4ab18:	00414f00 	call	414f0 <__unpack_d>
   4ab1c:	d8c00517 	ldw	r3,20(sp)
   4ab20:	00800044 	movi	r2,1
   4ab24:	10c0082e 	bgeu	r2,r3,4ab48 <__gedf2+0x5c>
   4ab28:	d8c00017 	ldw	r3,0(sp)
   4ab2c:	10c0062e 	bgeu	r2,r3,4ab48 <__gedf2+0x5c>
   4ab30:	d9000504 	addi	r4,sp,20
   4ab34:	d80b883a 	mov	r5,sp
   4ab38:	004af940 	call	4af94 <__fpcmp_parts_d>
   4ab3c:	dfc00e17 	ldw	ra,56(sp)
   4ab40:	dec00f04 	addi	sp,sp,60
   4ab44:	f800283a 	ret
   4ab48:	00bfffc4 	movi	r2,-1
   4ab4c:	003ffb06 	br	4ab3c <__gedf2+0x50>

0004ab50 <__ltdf2>:
   4ab50:	defff104 	addi	sp,sp,-60
   4ab54:	d9000c15 	stw	r4,48(sp)
   4ab58:	d9400d15 	stw	r5,52(sp)
   4ab5c:	d9000c04 	addi	r4,sp,48
   4ab60:	d9400504 	addi	r5,sp,20
   4ab64:	dfc00e15 	stw	ra,56(sp)
   4ab68:	d9800a15 	stw	r6,40(sp)
   4ab6c:	d9c00b15 	stw	r7,44(sp)
   4ab70:	00414f00 	call	414f0 <__unpack_d>
   4ab74:	d9000a04 	addi	r4,sp,40
   4ab78:	d80b883a 	mov	r5,sp
   4ab7c:	00414f00 	call	414f0 <__unpack_d>
   4ab80:	d8c00517 	ldw	r3,20(sp)
   4ab84:	00800044 	movi	r2,1
   4ab88:	10c0052e 	bgeu	r2,r3,4aba0 <__ltdf2+0x50>
   4ab8c:	d8c00017 	ldw	r3,0(sp)
   4ab90:	10c0032e 	bgeu	r2,r3,4aba0 <__ltdf2+0x50>
   4ab94:	d9000504 	addi	r4,sp,20
   4ab98:	d80b883a 	mov	r5,sp
   4ab9c:	004af940 	call	4af94 <__fpcmp_parts_d>
   4aba0:	dfc00e17 	ldw	ra,56(sp)
   4aba4:	dec00f04 	addi	sp,sp,60
   4aba8:	f800283a 	ret

0004abac <__floatsidf>:
   4abac:	2004d7fa 	srli	r2,r4,31
   4abb0:	defff904 	addi	sp,sp,-28
   4abb4:	00c000c4 	movi	r3,3
   4abb8:	dfc00615 	stw	ra,24(sp)
   4abbc:	dc000515 	stw	r16,20(sp)
   4abc0:	d8c00015 	stw	r3,0(sp)
   4abc4:	d8800115 	stw	r2,4(sp)
   4abc8:	2000081e 	bne	r4,zero,4abec <__floatsidf+0x40>
   4abcc:	00800084 	movi	r2,2
   4abd0:	d8800015 	stw	r2,0(sp)
   4abd4:	d809883a 	mov	r4,sp
   4abd8:	00412cc0 	call	412cc <__pack_d>
   4abdc:	dfc00617 	ldw	ra,24(sp)
   4abe0:	dc000517 	ldw	r16,20(sp)
   4abe4:	dec00704 	addi	sp,sp,28
   4abe8:	f800283a 	ret
   4abec:	00c00f04 	movi	r3,60
   4abf0:	d8c00215 	stw	r3,8(sp)
   4abf4:	10000f1e 	bne	r2,zero,4ac34 <__floatsidf+0x88>
   4abf8:	2021883a 	mov	r16,r4
   4abfc:	8009883a 	mov	r4,r16
   4ac00:	00412200 	call	41220 <__clzsi2>
   4ac04:	11000744 	addi	r4,r2,29
   4ac08:	0100110e 	bge	zero,r4,4ac50 <__floatsidf+0xa4>
   4ac0c:	10ffff44 	addi	r3,r2,-3
   4ac10:	18001216 	blt	r3,zero,4ac5c <__floatsidf+0xb0>
   4ac14:	80c6983a 	sll	r3,r16,r3
   4ac18:	0009883a 	mov	r4,zero
   4ac1c:	014007c4 	movi	r5,31
   4ac20:	2885c83a 	sub	r2,r5,r2
   4ac24:	d9000315 	stw	r4,12(sp)
   4ac28:	d8c00415 	stw	r3,16(sp)
   4ac2c:	d8800215 	stw	r2,8(sp)
   4ac30:	003fe806 	br	4abd4 <__floatsidf+0x28>
   4ac34:	00a00034 	movhi	r2,32768
   4ac38:	20800e26 	beq	r4,r2,4ac74 <__floatsidf+0xc8>
   4ac3c:	0121c83a 	sub	r16,zero,r4
   4ac40:	8009883a 	mov	r4,r16
   4ac44:	00412200 	call	41220 <__clzsi2>
   4ac48:	11000744 	addi	r4,r2,29
   4ac4c:	013fef16 	blt	zero,r4,4ac0c <__floatsidf+0x60>
   4ac50:	dc000315 	stw	r16,12(sp)
   4ac54:	d8000415 	stw	zero,16(sp)
   4ac58:	003fde06 	br	4abd4 <__floatsidf+0x28>
   4ac5c:	800ad07a 	srli	r5,r16,1
   4ac60:	00c007c4 	movi	r3,31
   4ac64:	1907c83a 	sub	r3,r3,r4
   4ac68:	28c6d83a 	srl	r3,r5,r3
   4ac6c:	8108983a 	sll	r4,r16,r4
   4ac70:	003fea06 	br	4ac1c <__floatsidf+0x70>
   4ac74:	0005883a 	mov	r2,zero
   4ac78:	00f07834 	movhi	r3,49632
   4ac7c:	003fd706 	br	4abdc <__floatsidf+0x30>

0004ac80 <__fixdfsi>:
   4ac80:	defff804 	addi	sp,sp,-32
   4ac84:	d9000515 	stw	r4,20(sp)
   4ac88:	d9400615 	stw	r5,24(sp)
   4ac8c:	d9000504 	addi	r4,sp,20
   4ac90:	d80b883a 	mov	r5,sp
   4ac94:	dfc00715 	stw	ra,28(sp)
   4ac98:	00414f00 	call	414f0 <__unpack_d>
   4ac9c:	d8800017 	ldw	r2,0(sp)
   4aca0:	00c00084 	movi	r3,2
   4aca4:	10c01c26 	beq	r2,r3,4ad18 <__fixdfsi+0x98>
   4aca8:	00c00044 	movi	r3,1
   4acac:	18801a2e 	bgeu	r3,r2,4ad18 <__fixdfsi+0x98>
   4acb0:	00c00104 	movi	r3,4
   4acb4:	10c01126 	beq	r2,r3,4acfc <__fixdfsi+0x7c>
   4acb8:	d8800217 	ldw	r2,8(sp)
   4acbc:	10001616 	blt	r2,zero,4ad18 <__fixdfsi+0x98>
   4acc0:	00c00784 	movi	r3,30
   4acc4:	18800d16 	blt	r3,r2,4acfc <__fixdfsi+0x7c>
   4acc8:	00c00f04 	movi	r3,60
   4accc:	1885c83a 	sub	r2,r3,r2
   4acd0:	10fff804 	addi	r3,r2,-32
   4acd4:	d9400317 	ldw	r5,12(sp)
   4acd8:	d9000417 	ldw	r4,16(sp)
   4acdc:	18001616 	blt	r3,zero,4ad38 <__fixdfsi+0xb8>
   4ace0:	20c4d83a 	srl	r2,r4,r3
   4ace4:	d8c00117 	ldw	r3,4(sp)
   4ace8:	18000126 	beq	r3,zero,4acf0 <__fixdfsi+0x70>
   4acec:	0085c83a 	sub	r2,zero,r2
   4acf0:	dfc00717 	ldw	ra,28(sp)
   4acf4:	dec00804 	addi	sp,sp,32
   4acf8:	f800283a 	ret
   4acfc:	d8800117 	ldw	r2,4(sp)
   4ad00:	1000091e 	bne	r2,zero,4ad28 <__fixdfsi+0xa8>
   4ad04:	00a00034 	movhi	r2,32768
   4ad08:	10bfffc4 	addi	r2,r2,-1
   4ad0c:	dfc00717 	ldw	ra,28(sp)
   4ad10:	dec00804 	addi	sp,sp,32
   4ad14:	f800283a 	ret
   4ad18:	0005883a 	mov	r2,zero
   4ad1c:	dfc00717 	ldw	ra,28(sp)
   4ad20:	dec00804 	addi	sp,sp,32
   4ad24:	f800283a 	ret
   4ad28:	00a00034 	movhi	r2,32768
   4ad2c:	dfc00717 	ldw	ra,28(sp)
   4ad30:	dec00804 	addi	sp,sp,32
   4ad34:	f800283a 	ret
   4ad38:	2008907a 	slli	r4,r4,1
   4ad3c:	018007c4 	movi	r6,31
   4ad40:	308dc83a 	sub	r6,r6,r2
   4ad44:	2188983a 	sll	r4,r4,r6
   4ad48:	2884d83a 	srl	r2,r5,r2
   4ad4c:	2084b03a 	or	r2,r4,r2
   4ad50:	003fe406 	br	4ace4 <__fixdfsi+0x64>

0004ad54 <udivmodsi4>:
   4ad54:	2005883a 	mov	r2,r4
   4ad58:	2900182e 	bgeu	r5,r4,4adbc <udivmodsi4+0x68>
   4ad5c:	28001716 	blt	r5,zero,4adbc <udivmodsi4+0x68>
   4ad60:	01000804 	movi	r4,32
   4ad64:	00c00044 	movi	r3,1
   4ad68:	00000206 	br	4ad74 <udivmodsi4+0x20>
   4ad6c:	20001126 	beq	r4,zero,4adb4 <udivmodsi4+0x60>
   4ad70:	28000516 	blt	r5,zero,4ad88 <udivmodsi4+0x34>
   4ad74:	294b883a 	add	r5,r5,r5
   4ad78:	213fffc4 	addi	r4,r4,-1
   4ad7c:	18c7883a 	add	r3,r3,r3
   4ad80:	28bffa36 	bltu	r5,r2,4ad6c <udivmodsi4+0x18>
   4ad84:	18000b26 	beq	r3,zero,4adb4 <udivmodsi4+0x60>
   4ad88:	0009883a 	mov	r4,zero
   4ad8c:	11400236 	bltu	r2,r5,4ad98 <udivmodsi4+0x44>
   4ad90:	1145c83a 	sub	r2,r2,r5
   4ad94:	20c8b03a 	or	r4,r4,r3
   4ad98:	1806d07a 	srli	r3,r3,1
   4ad9c:	280ad07a 	srli	r5,r5,1
   4ada0:	183ffa1e 	bne	r3,zero,4ad8c <udivmodsi4+0x38>
   4ada4:	3000021e 	bne	r6,zero,4adb0 <udivmodsi4+0x5c>
   4ada8:	2005883a 	mov	r2,r4
   4adac:	f800283a 	ret
   4adb0:	f800283a 	ret
   4adb4:	0009883a 	mov	r4,zero
   4adb8:	003ffa06 	br	4ada4 <udivmodsi4+0x50>
   4adbc:	00c00044 	movi	r3,1
   4adc0:	0009883a 	mov	r4,zero
   4adc4:	003ff106 	br	4ad8c <udivmodsi4+0x38>

0004adc8 <__divsi3>:
   4adc8:	defffe04 	addi	sp,sp,-8
   4adcc:	dfc00115 	stw	ra,4(sp)
   4add0:	dc000015 	stw	r16,0(sp)
   4add4:	20000a16 	blt	r4,zero,4ae00 <__divsi3+0x38>
   4add8:	0021883a 	mov	r16,zero
   4addc:	28000b16 	blt	r5,zero,4ae0c <__divsi3+0x44>
   4ade0:	000d883a 	mov	r6,zero
   4ade4:	004ad540 	call	4ad54 <udivmodsi4>
   4ade8:	80000126 	beq	r16,zero,4adf0 <__divsi3+0x28>
   4adec:	0085c83a 	sub	r2,zero,r2
   4adf0:	dfc00117 	ldw	ra,4(sp)
   4adf4:	dc000017 	ldw	r16,0(sp)
   4adf8:	dec00204 	addi	sp,sp,8
   4adfc:	f800283a 	ret
   4ae00:	0109c83a 	sub	r4,zero,r4
   4ae04:	04000044 	movi	r16,1
   4ae08:	283ff50e 	bge	r5,zero,4ade0 <__divsi3+0x18>
   4ae0c:	014bc83a 	sub	r5,zero,r5
   4ae10:	8400005c 	xori	r16,r16,1
   4ae14:	003ff206 	br	4ade0 <__divsi3+0x18>

0004ae18 <__modsi3>:
   4ae18:	deffff04 	addi	sp,sp,-4
   4ae1c:	dfc00015 	stw	ra,0(sp)
   4ae20:	20000516 	blt	r4,zero,4ae38 <__modsi3+0x20>
   4ae24:	28000c16 	blt	r5,zero,4ae58 <__modsi3+0x40>
   4ae28:	01800044 	movi	r6,1
   4ae2c:	dfc00017 	ldw	ra,0(sp)
   4ae30:	dec00104 	addi	sp,sp,4
   4ae34:	004ad541 	jmpi	4ad54 <udivmodsi4>
   4ae38:	0109c83a 	sub	r4,zero,r4
   4ae3c:	28000b16 	blt	r5,zero,4ae6c <__modsi3+0x54>
   4ae40:	01800044 	movi	r6,1
   4ae44:	004ad540 	call	4ad54 <udivmodsi4>
   4ae48:	0085c83a 	sub	r2,zero,r2
   4ae4c:	dfc00017 	ldw	ra,0(sp)
   4ae50:	dec00104 	addi	sp,sp,4
   4ae54:	f800283a 	ret
   4ae58:	014bc83a 	sub	r5,zero,r5
   4ae5c:	01800044 	movi	r6,1
   4ae60:	dfc00017 	ldw	ra,0(sp)
   4ae64:	dec00104 	addi	sp,sp,4
   4ae68:	004ad541 	jmpi	4ad54 <udivmodsi4>
   4ae6c:	014bc83a 	sub	r5,zero,r5
   4ae70:	003ff306 	br	4ae40 <__modsi3+0x28>

0004ae74 <__udivsi3>:
   4ae74:	000d883a 	mov	r6,zero
   4ae78:	004ad541 	jmpi	4ad54 <udivmodsi4>

0004ae7c <__umodsi3>:
   4ae7c:	01800044 	movi	r6,1
   4ae80:	004ad541 	jmpi	4ad54 <udivmodsi4>

0004ae84 <__muldi3>:
   4ae84:	defff604 	addi	sp,sp,-40
   4ae88:	dd400515 	stw	r21,20(sp)
   4ae8c:	dd000415 	stw	r20,16(sp)
   4ae90:	257fffcc 	andi	r21,r4,65535
   4ae94:	353fffcc 	andi	r20,r6,65535
   4ae98:	dcc00315 	stw	r19,12(sp)
   4ae9c:	3026d43a 	srli	r19,r6,16
   4aea0:	dd800615 	stw	r22,24(sp)
   4aea4:	dc800215 	stw	r18,8(sp)
   4aea8:	dc400115 	stw	r17,4(sp)
   4aeac:	2024d43a 	srli	r18,r4,16
   4aeb0:	2023883a 	mov	r17,r4
   4aeb4:	282d883a 	mov	r22,r5
   4aeb8:	a009883a 	mov	r4,r20
   4aebc:	a80b883a 	mov	r5,r21
   4aec0:	dfc00915 	stw	ra,36(sp)
   4aec4:	df000815 	stw	fp,32(sp)
   4aec8:	ddc00715 	stw	r23,28(sp)
   4aecc:	3839883a 	mov	fp,r7
   4aed0:	dc000015 	stw	r16,0(sp)
   4aed4:	3021883a 	mov	r16,r6
   4aed8:	00411f80 	call	411f8 <__mulsi3>
   4aedc:	a80b883a 	mov	r5,r21
   4aee0:	9809883a 	mov	r4,r19
   4aee4:	102f883a 	mov	r23,r2
   4aee8:	00411f80 	call	411f8 <__mulsi3>
   4aeec:	a009883a 	mov	r4,r20
   4aef0:	900b883a 	mov	r5,r18
   4aef4:	102b883a 	mov	r21,r2
   4aef8:	00411f80 	call	411f8 <__mulsi3>
   4aefc:	9809883a 	mov	r4,r19
   4af00:	900b883a 	mov	r5,r18
   4af04:	1029883a 	mov	r20,r2
   4af08:	00411f80 	call	411f8 <__mulsi3>
   4af0c:	1007883a 	mov	r3,r2
   4af10:	b804d43a 	srli	r2,r23,16
   4af14:	a549883a 	add	r4,r20,r21
   4af18:	2089883a 	add	r4,r4,r2
   4af1c:	2500022e 	bgeu	r4,r20,4af28 <__muldi3+0xa4>
   4af20:	00800074 	movhi	r2,1
   4af24:	1887883a 	add	r3,r3,r2
   4af28:	200cd43a 	srli	r6,r4,16
   4af2c:	2004943a 	slli	r2,r4,16
   4af30:	e00b883a 	mov	r5,fp
   4af34:	8809883a 	mov	r4,r17
   4af38:	bdffffcc 	andi	r23,r23,65535
   4af3c:	19a3883a 	add	r17,r3,r6
   4af40:	15ef883a 	add	r23,r2,r23
   4af44:	00411f80 	call	411f8 <__mulsi3>
   4af48:	8009883a 	mov	r4,r16
   4af4c:	b00b883a 	mov	r5,r22
   4af50:	1025883a 	mov	r18,r2
   4af54:	00411f80 	call	411f8 <__mulsi3>
   4af58:	9085883a 	add	r2,r18,r2
   4af5c:	1447883a 	add	r3,r2,r17
   4af60:	b805883a 	mov	r2,r23
   4af64:	dfc00917 	ldw	ra,36(sp)
   4af68:	df000817 	ldw	fp,32(sp)
   4af6c:	ddc00717 	ldw	r23,28(sp)
   4af70:	dd800617 	ldw	r22,24(sp)
   4af74:	dd400517 	ldw	r21,20(sp)
   4af78:	dd000417 	ldw	r20,16(sp)
   4af7c:	dcc00317 	ldw	r19,12(sp)
   4af80:	dc800217 	ldw	r18,8(sp)
   4af84:	dc400117 	ldw	r17,4(sp)
   4af88:	dc000017 	ldw	r16,0(sp)
   4af8c:	dec00a04 	addi	sp,sp,40
   4af90:	f800283a 	ret

0004af94 <__fpcmp_parts_d>:
   4af94:	20c00017 	ldw	r3,0(r4)
   4af98:	00800044 	movi	r2,1
   4af9c:	10c0142e 	bgeu	r2,r3,4aff0 <__fpcmp_parts_d+0x5c>
   4afa0:	29800017 	ldw	r6,0(r5)
   4afa4:	1180122e 	bgeu	r2,r6,4aff0 <__fpcmp_parts_d+0x5c>
   4afa8:	01c00104 	movi	r7,4
   4afac:	19c02826 	beq	r3,r7,4b050 <__fpcmp_parts_d+0xbc>
   4afb0:	31c00926 	beq	r6,r7,4afd8 <__fpcmp_parts_d+0x44>
   4afb4:	01c00084 	movi	r7,2
   4afb8:	19c00626 	beq	r3,r7,4afd4 <__fpcmp_parts_d+0x40>
   4afbc:	31c00a26 	beq	r6,r7,4afe8 <__fpcmp_parts_d+0x54>
   4afc0:	20c00117 	ldw	r3,4(r4)
   4afc4:	29800117 	ldw	r6,4(r5)
   4afc8:	19800b26 	beq	r3,r6,4aff8 <__fpcmp_parts_d+0x64>
   4afcc:	1800041e 	bne	r3,zero,4afe0 <__fpcmp_parts_d+0x4c>
   4afd0:	f800283a 	ret
   4afd4:	30c01a26 	beq	r6,r3,4b040 <__fpcmp_parts_d+0xac>
   4afd8:	28800117 	ldw	r2,4(r5)
   4afdc:	1000041e 	bne	r2,zero,4aff0 <__fpcmp_parts_d+0x5c>
   4afe0:	00bfffc4 	movi	r2,-1
   4afe4:	f800283a 	ret
   4afe8:	20800117 	ldw	r2,4(r4)
   4afec:	103ffc1e 	bne	r2,zero,4afe0 <__fpcmp_parts_d+0x4c>
   4aff0:	00800044 	movi	r2,1
   4aff4:	f800283a 	ret
   4aff8:	21c00217 	ldw	r7,8(r4)
   4affc:	29800217 	ldw	r6,8(r5)
   4b000:	31c0020e 	bge	r6,r7,4b00c <__fpcmp_parts_d+0x78>
   4b004:	183ff61e 	bne	r3,zero,4afe0 <__fpcmp_parts_d+0x4c>
   4b008:	f800283a 	ret
   4b00c:	39800a16 	blt	r7,r6,4b038 <__fpcmp_parts_d+0xa4>
   4b010:	20800417 	ldw	r2,16(r4)
   4b014:	29800417 	ldw	r6,16(r5)
   4b018:	21c00317 	ldw	r7,12(r4)
   4b01c:	29000317 	ldw	r4,12(r5)
   4b020:	30800936 	bltu	r6,r2,4b048 <__fpcmp_parts_d+0xb4>
   4b024:	1180011e 	bne	r2,r6,4b02c <__fpcmp_parts_d+0x98>
   4b028:	21c00736 	bltu	r4,r7,4b048 <__fpcmp_parts_d+0xb4>
   4b02c:	11800236 	bltu	r2,r6,4b038 <__fpcmp_parts_d+0xa4>
   4b030:	3080031e 	bne	r6,r2,4b040 <__fpcmp_parts_d+0xac>
   4b034:	3900022e 	bgeu	r7,r4,4b040 <__fpcmp_parts_d+0xac>
   4b038:	183fe926 	beq	r3,zero,4afe0 <__fpcmp_parts_d+0x4c>
   4b03c:	003fec06 	br	4aff0 <__fpcmp_parts_d+0x5c>
   4b040:	0005883a 	mov	r2,zero
   4b044:	f800283a 	ret
   4b048:	183fe926 	beq	r3,zero,4aff0 <__fpcmp_parts_d+0x5c>
   4b04c:	003fe406 	br	4afe0 <__fpcmp_parts_d+0x4c>
   4b050:	30ffe51e 	bne	r6,r3,4afe8 <__fpcmp_parts_d+0x54>
   4b054:	28c00117 	ldw	r3,4(r5)
   4b058:	20800117 	ldw	r2,4(r4)
   4b05c:	1885c83a 	sub	r2,r3,r2
   4b060:	f800283a 	ret

0004b064 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4b064:	defffe04 	addi	sp,sp,-8
   4b068:	dfc00115 	stw	ra,4(sp)
   4b06c:	df000015 	stw	fp,0(sp)
   4b070:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4b074:	00800174 	movhi	r2,5
   4b078:	1080b604 	addi	r2,r2,728
   4b07c:	10800017 	ldw	r2,0(r2)
   4b080:	10000526 	beq	r2,zero,4b098 <alt_get_errno+0x34>
   4b084:	00800174 	movhi	r2,5
   4b088:	1080b604 	addi	r2,r2,728
   4b08c:	10800017 	ldw	r2,0(r2)
   4b090:	103ee83a 	callr	r2
   4b094:	00000206 	br	4b0a0 <alt_get_errno+0x3c>
   4b098:	00800174 	movhi	r2,5
   4b09c:	10878604 	addi	r2,r2,7704
}
   4b0a0:	e037883a 	mov	sp,fp
   4b0a4:	dfc00117 	ldw	ra,4(sp)
   4b0a8:	df000017 	ldw	fp,0(sp)
   4b0ac:	dec00204 	addi	sp,sp,8
   4b0b0:	f800283a 	ret

0004b0b4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   4b0b4:	defffb04 	addi	sp,sp,-20
   4b0b8:	dfc00415 	stw	ra,16(sp)
   4b0bc:	df000315 	stw	fp,12(sp)
   4b0c0:	df000304 	addi	fp,sp,12
   4b0c4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   4b0c8:	e0bfff17 	ldw	r2,-4(fp)
   4b0cc:	10000716 	blt	r2,zero,4b0ec <close+0x38>
   4b0d0:	e13fff17 	ldw	r4,-4(fp)
   4b0d4:	01400304 	movi	r5,12
   4b0d8:	00411f80 	call	411f8 <__mulsi3>
   4b0dc:	00c00174 	movhi	r3,5
   4b0e0:	18fc2504 	addi	r3,r3,-3948
   4b0e4:	10c5883a 	add	r2,r2,r3
   4b0e8:	00000106 	br	4b0f0 <close+0x3c>
   4b0ec:	0005883a 	mov	r2,zero
   4b0f0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   4b0f4:	e0bffd17 	ldw	r2,-12(fp)
   4b0f8:	10001826 	beq	r2,zero,4b15c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   4b0fc:	e0bffd17 	ldw	r2,-12(fp)
   4b100:	10800017 	ldw	r2,0(r2)
   4b104:	10800417 	ldw	r2,16(r2)
   4b108:	10000626 	beq	r2,zero,4b124 <close+0x70>
   4b10c:	e0bffd17 	ldw	r2,-12(fp)
   4b110:	10800017 	ldw	r2,0(r2)
   4b114:	10800417 	ldw	r2,16(r2)
   4b118:	e13ffd17 	ldw	r4,-12(fp)
   4b11c:	103ee83a 	callr	r2
   4b120:	00000106 	br	4b128 <close+0x74>
   4b124:	0005883a 	mov	r2,zero
   4b128:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   4b12c:	e13fff17 	ldw	r4,-4(fp)
   4b130:	004ba440 	call	4ba44 <alt_release_fd>
    if (rval < 0)
   4b134:	e0bffe17 	ldw	r2,-8(fp)
   4b138:	1000060e 	bge	r2,zero,4b154 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   4b13c:	004b0640 	call	4b064 <alt_get_errno>
   4b140:	e0fffe17 	ldw	r3,-8(fp)
   4b144:	00c7c83a 	sub	r3,zero,r3
   4b148:	10c00015 	stw	r3,0(r2)
      return -1;
   4b14c:	00bfffc4 	movi	r2,-1
   4b150:	00000606 	br	4b16c <close+0xb8>
    }
    return 0;
   4b154:	0005883a 	mov	r2,zero
   4b158:	00000406 	br	4b16c <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4b15c:	004b0640 	call	4b064 <alt_get_errno>
   4b160:	00c01444 	movi	r3,81
   4b164:	10c00015 	stw	r3,0(r2)
    return -1;
   4b168:	00bfffc4 	movi	r2,-1
  }
}
   4b16c:	e037883a 	mov	sp,fp
   4b170:	dfc00117 	ldw	ra,4(sp)
   4b174:	df000017 	ldw	fp,0(sp)
   4b178:	dec00204 	addi	sp,sp,8
   4b17c:	f800283a 	ret

0004b180 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   4b180:	defffc04 	addi	sp,sp,-16
   4b184:	df000315 	stw	fp,12(sp)
   4b188:	df000304 	addi	fp,sp,12
   4b18c:	e13ffd15 	stw	r4,-12(fp)
   4b190:	e17ffe15 	stw	r5,-8(fp)
   4b194:	e1bfff15 	stw	r6,-4(fp)
  return len;
   4b198:	e0bfff17 	ldw	r2,-4(fp)
}
   4b19c:	e037883a 	mov	sp,fp
   4b1a0:	df000017 	ldw	fp,0(sp)
   4b1a4:	dec00104 	addi	sp,sp,4
   4b1a8:	f800283a 	ret

0004b1ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4b1ac:	defffe04 	addi	sp,sp,-8
   4b1b0:	dfc00115 	stw	ra,4(sp)
   4b1b4:	df000015 	stw	fp,0(sp)
   4b1b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4b1bc:	00800174 	movhi	r2,5
   4b1c0:	1080b604 	addi	r2,r2,728
   4b1c4:	10800017 	ldw	r2,0(r2)
   4b1c8:	10000526 	beq	r2,zero,4b1e0 <alt_get_errno+0x34>
   4b1cc:	00800174 	movhi	r2,5
   4b1d0:	1080b604 	addi	r2,r2,728
   4b1d4:	10800017 	ldw	r2,0(r2)
   4b1d8:	103ee83a 	callr	r2
   4b1dc:	00000206 	br	4b1e8 <alt_get_errno+0x3c>
   4b1e0:	00800174 	movhi	r2,5
   4b1e4:	10878604 	addi	r2,r2,7704
}
   4b1e8:	e037883a 	mov	sp,fp
   4b1ec:	dfc00117 	ldw	ra,4(sp)
   4b1f0:	df000017 	ldw	fp,0(sp)
   4b1f4:	dec00204 	addi	sp,sp,8
   4b1f8:	f800283a 	ret

0004b1fc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   4b1fc:	defffb04 	addi	sp,sp,-20
   4b200:	dfc00415 	stw	ra,16(sp)
   4b204:	df000315 	stw	fp,12(sp)
   4b208:	df000304 	addi	fp,sp,12
   4b20c:	e13ffe15 	stw	r4,-8(fp)
   4b210:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4b214:	e0bffe17 	ldw	r2,-8(fp)
   4b218:	10000716 	blt	r2,zero,4b238 <fstat+0x3c>
   4b21c:	e13ffe17 	ldw	r4,-8(fp)
   4b220:	01400304 	movi	r5,12
   4b224:	00411f80 	call	411f8 <__mulsi3>
   4b228:	00c00174 	movhi	r3,5
   4b22c:	18fc2504 	addi	r3,r3,-3948
   4b230:	10c5883a 	add	r2,r2,r3
   4b234:	00000106 	br	4b23c <fstat+0x40>
   4b238:	0005883a 	mov	r2,zero
   4b23c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   4b240:	e0bffd17 	ldw	r2,-12(fp)
   4b244:	10001026 	beq	r2,zero,4b288 <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   4b248:	e0bffd17 	ldw	r2,-12(fp)
   4b24c:	10800017 	ldw	r2,0(r2)
   4b250:	10800817 	ldw	r2,32(r2)
   4b254:	10000726 	beq	r2,zero,4b274 <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
   4b258:	e0bffd17 	ldw	r2,-12(fp)
   4b25c:	10800017 	ldw	r2,0(r2)
   4b260:	10800817 	ldw	r2,32(r2)
   4b264:	e13ffd17 	ldw	r4,-12(fp)
   4b268:	e17fff17 	ldw	r5,-4(fp)
   4b26c:	103ee83a 	callr	r2
   4b270:	00000906 	br	4b298 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   4b274:	e0bfff17 	ldw	r2,-4(fp)
   4b278:	00c80004 	movi	r3,8192
   4b27c:	10c00115 	stw	r3,4(r2)
      return 0;
   4b280:	0005883a 	mov	r2,zero
   4b284:	00000406 	br	4b298 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4b288:	004b1ac0 	call	4b1ac <alt_get_errno>
   4b28c:	00c01444 	movi	r3,81
   4b290:	10c00015 	stw	r3,0(r2)
    return -1;
   4b294:	00bfffc4 	movi	r2,-1
  }
}
   4b298:	e037883a 	mov	sp,fp
   4b29c:	dfc00117 	ldw	ra,4(sp)
   4b2a0:	df000017 	ldw	fp,0(sp)
   4b2a4:	dec00204 	addi	sp,sp,8
   4b2a8:	f800283a 	ret

0004b2ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4b2ac:	defffe04 	addi	sp,sp,-8
   4b2b0:	dfc00115 	stw	ra,4(sp)
   4b2b4:	df000015 	stw	fp,0(sp)
   4b2b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4b2bc:	00800174 	movhi	r2,5
   4b2c0:	1080b604 	addi	r2,r2,728
   4b2c4:	10800017 	ldw	r2,0(r2)
   4b2c8:	10000526 	beq	r2,zero,4b2e0 <alt_get_errno+0x34>
   4b2cc:	00800174 	movhi	r2,5
   4b2d0:	1080b604 	addi	r2,r2,728
   4b2d4:	10800017 	ldw	r2,0(r2)
   4b2d8:	103ee83a 	callr	r2
   4b2dc:	00000206 	br	4b2e8 <alt_get_errno+0x3c>
   4b2e0:	00800174 	movhi	r2,5
   4b2e4:	10878604 	addi	r2,r2,7704
}
   4b2e8:	e037883a 	mov	sp,fp
   4b2ec:	dfc00117 	ldw	ra,4(sp)
   4b2f0:	df000017 	ldw	fp,0(sp)
   4b2f4:	dec00204 	addi	sp,sp,8
   4b2f8:	f800283a 	ret

0004b2fc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   4b2fc:	deffed04 	addi	sp,sp,-76
   4b300:	dfc01215 	stw	ra,72(sp)
   4b304:	df001115 	stw	fp,68(sp)
   4b308:	df001104 	addi	fp,sp,68
   4b30c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4b310:	e0bfff17 	ldw	r2,-4(fp)
   4b314:	10000716 	blt	r2,zero,4b334 <isatty+0x38>
   4b318:	e13fff17 	ldw	r4,-4(fp)
   4b31c:	01400304 	movi	r5,12
   4b320:	00411f80 	call	411f8 <__mulsi3>
   4b324:	00c00174 	movhi	r3,5
   4b328:	18fc2504 	addi	r3,r3,-3948
   4b32c:	10c5883a 	add	r2,r2,r3
   4b330:	00000106 	br	4b338 <isatty+0x3c>
   4b334:	0005883a 	mov	r2,zero
   4b338:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   4b33c:	e0bfef17 	ldw	r2,-68(fp)
   4b340:	10000e26 	beq	r2,zero,4b37c <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   4b344:	e0bfef17 	ldw	r2,-68(fp)
   4b348:	10800017 	ldw	r2,0(r2)
   4b34c:	10800817 	ldw	r2,32(r2)
   4b350:	1000021e 	bne	r2,zero,4b35c <isatty+0x60>
    {
      return 1;
   4b354:	00800044 	movi	r2,1
   4b358:	00000c06 	br	4b38c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   4b35c:	e0bff004 	addi	r2,fp,-64
   4b360:	e13fff17 	ldw	r4,-4(fp)
   4b364:	100b883a 	mov	r5,r2
   4b368:	004b1fc0 	call	4b1fc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   4b36c:	e0bff117 	ldw	r2,-60(fp)
   4b370:	10880020 	cmpeqi	r2,r2,8192
   4b374:	10803fcc 	andi	r2,r2,255
   4b378:	00000406 	br	4b38c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4b37c:	004b2ac0 	call	4b2ac <alt_get_errno>
   4b380:	00c01444 	movi	r3,81
   4b384:	10c00015 	stw	r3,0(r2)
    return 0;
   4b388:	0005883a 	mov	r2,zero
  }
}
   4b38c:	e037883a 	mov	sp,fp
   4b390:	dfc00117 	ldw	ra,4(sp)
   4b394:	df000017 	ldw	fp,0(sp)
   4b398:	dec00204 	addi	sp,sp,8
   4b39c:	f800283a 	ret

0004b3a0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   4b3a0:	defffc04 	addi	sp,sp,-16
   4b3a4:	df000315 	stw	fp,12(sp)
   4b3a8:	df000304 	addi	fp,sp,12
   4b3ac:	e13ffd15 	stw	r4,-12(fp)
   4b3b0:	e17ffe15 	stw	r5,-8(fp)
   4b3b4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   4b3b8:	e0fffe17 	ldw	r3,-8(fp)
   4b3bc:	e0bffd17 	ldw	r2,-12(fp)
   4b3c0:	18800e26 	beq	r3,r2,4b3fc <alt_load_section+0x5c>
  {
    while( to != end )
   4b3c4:	00000a06 	br	4b3f0 <alt_load_section+0x50>
    {
      *to++ = *from++;
   4b3c8:	e0bffd17 	ldw	r2,-12(fp)
   4b3cc:	10c00017 	ldw	r3,0(r2)
   4b3d0:	e0bffe17 	ldw	r2,-8(fp)
   4b3d4:	10c00015 	stw	r3,0(r2)
   4b3d8:	e0bffe17 	ldw	r2,-8(fp)
   4b3dc:	10800104 	addi	r2,r2,4
   4b3e0:	e0bffe15 	stw	r2,-8(fp)
   4b3e4:	e0bffd17 	ldw	r2,-12(fp)
   4b3e8:	10800104 	addi	r2,r2,4
   4b3ec:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   4b3f0:	e0fffe17 	ldw	r3,-8(fp)
   4b3f4:	e0bfff17 	ldw	r2,-4(fp)
   4b3f8:	18bff31e 	bne	r3,r2,4b3c8 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   4b3fc:	e037883a 	mov	sp,fp
   4b400:	df000017 	ldw	fp,0(sp)
   4b404:	dec00104 	addi	sp,sp,4
   4b408:	f800283a 	ret

0004b40c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   4b40c:	defffe04 	addi	sp,sp,-8
   4b410:	dfc00115 	stw	ra,4(sp)
   4b414:	df000015 	stw	fp,0(sp)
   4b418:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   4b41c:	01000174 	movhi	r4,5
   4b420:	2100cd04 	addi	r4,r4,820
   4b424:	01400174 	movhi	r5,5
   4b428:	297a1604 	addi	r5,r5,-6056
   4b42c:	01800174 	movhi	r6,5
   4b430:	3180cd04 	addi	r6,r6,820
   4b434:	004b3a00 	call	4b3a0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   4b438:	01000134 	movhi	r4,4
   4b43c:	21000804 	addi	r4,r4,32
   4b440:	01400134 	movhi	r5,4
   4b444:	29400804 	addi	r5,r5,32
   4b448:	01800134 	movhi	r6,4
   4b44c:	31806e04 	addi	r6,r6,440
   4b450:	004b3a00 	call	4b3a0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   4b454:	01000174 	movhi	r4,5
   4b458:	21392b04 	addi	r4,r4,-6996
   4b45c:	01400174 	movhi	r5,5
   4b460:	29792b04 	addi	r5,r5,-6996
   4b464:	01800174 	movhi	r6,5
   4b468:	31ba1604 	addi	r6,r6,-6056
   4b46c:	004b3a00 	call	4b3a0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   4b470:	004d6200 	call	4d620 <alt_dcache_flush_all>
  alt_icache_flush_all();
   4b474:	004dae00 	call	4dae0 <alt_icache_flush_all>
}
   4b478:	e037883a 	mov	sp,fp
   4b47c:	dfc00117 	ldw	ra,4(sp)
   4b480:	df000017 	ldw	fp,0(sp)
   4b484:	dec00204 	addi	sp,sp,8
   4b488:	f800283a 	ret

0004b48c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4b48c:	defffe04 	addi	sp,sp,-8
   4b490:	dfc00115 	stw	ra,4(sp)
   4b494:	df000015 	stw	fp,0(sp)
   4b498:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4b49c:	00800174 	movhi	r2,5
   4b4a0:	1080b604 	addi	r2,r2,728
   4b4a4:	10800017 	ldw	r2,0(r2)
   4b4a8:	10000526 	beq	r2,zero,4b4c0 <alt_get_errno+0x34>
   4b4ac:	00800174 	movhi	r2,5
   4b4b0:	1080b604 	addi	r2,r2,728
   4b4b4:	10800017 	ldw	r2,0(r2)
   4b4b8:	103ee83a 	callr	r2
   4b4bc:	00000206 	br	4b4c8 <alt_get_errno+0x3c>
   4b4c0:	00800174 	movhi	r2,5
   4b4c4:	10878604 	addi	r2,r2,7704
}
   4b4c8:	e037883a 	mov	sp,fp
   4b4cc:	dfc00117 	ldw	ra,4(sp)
   4b4d0:	df000017 	ldw	fp,0(sp)
   4b4d4:	dec00204 	addi	sp,sp,8
   4b4d8:	f800283a 	ret

0004b4dc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   4b4dc:	defff904 	addi	sp,sp,-28
   4b4e0:	dfc00615 	stw	ra,24(sp)
   4b4e4:	df000515 	stw	fp,20(sp)
   4b4e8:	df000504 	addi	fp,sp,20
   4b4ec:	e13ffd15 	stw	r4,-12(fp)
   4b4f0:	e17ffe15 	stw	r5,-8(fp)
   4b4f4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   4b4f8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4b4fc:	e0bffd17 	ldw	r2,-12(fp)
   4b500:	10000716 	blt	r2,zero,4b520 <lseek+0x44>
   4b504:	e13ffd17 	ldw	r4,-12(fp)
   4b508:	01400304 	movi	r5,12
   4b50c:	00411f80 	call	411f8 <__mulsi3>
   4b510:	00c00174 	movhi	r3,5
   4b514:	18fc2504 	addi	r3,r3,-3948
   4b518:	10c5883a 	add	r2,r2,r3
   4b51c:	00000106 	br	4b524 <lseek+0x48>
   4b520:	0005883a 	mov	r2,zero
   4b524:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   4b528:	e0bffc17 	ldw	r2,-16(fp)
   4b52c:	10001026 	beq	r2,zero,4b570 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   4b530:	e0bffc17 	ldw	r2,-16(fp)
   4b534:	10800017 	ldw	r2,0(r2)
   4b538:	10800717 	ldw	r2,28(r2)
   4b53c:	10000926 	beq	r2,zero,4b564 <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   4b540:	e0bffc17 	ldw	r2,-16(fp)
   4b544:	10800017 	ldw	r2,0(r2)
   4b548:	10800717 	ldw	r2,28(r2)
   4b54c:	e13ffc17 	ldw	r4,-16(fp)
   4b550:	e17ffe17 	ldw	r5,-8(fp)
   4b554:	e1bfff17 	ldw	r6,-4(fp)
   4b558:	103ee83a 	callr	r2
   4b55c:	e0bffb15 	stw	r2,-20(fp)
   4b560:	00000506 	br	4b578 <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   4b564:	00bfde84 	movi	r2,-134
   4b568:	e0bffb15 	stw	r2,-20(fp)
   4b56c:	00000206 	br	4b578 <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
   4b570:	00bfebc4 	movi	r2,-81
   4b574:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   4b578:	e0bffb17 	ldw	r2,-20(fp)
   4b57c:	1000060e 	bge	r2,zero,4b598 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   4b580:	004b48c0 	call	4b48c <alt_get_errno>
   4b584:	e0fffb17 	ldw	r3,-20(fp)
   4b588:	00c7c83a 	sub	r3,zero,r3
   4b58c:	10c00015 	stw	r3,0(r2)
    rc = -1;
   4b590:	00bfffc4 	movi	r2,-1
   4b594:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   4b598:	e0bffb17 	ldw	r2,-20(fp)
}
   4b59c:	e037883a 	mov	sp,fp
   4b5a0:	dfc00117 	ldw	ra,4(sp)
   4b5a4:	df000017 	ldw	fp,0(sp)
   4b5a8:	dec00204 	addi	sp,sp,8
   4b5ac:	f800283a 	ret

0004b5b0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   4b5b0:	defffd04 	addi	sp,sp,-12
   4b5b4:	dfc00215 	stw	ra,8(sp)
   4b5b8:	df000115 	stw	fp,4(sp)
   4b5bc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   4b5c0:	0009883a 	mov	r4,zero
   4b5c4:	004bdc00 	call	4bdc0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   4b5c8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   4b5cc:	004bdf40 	call	4bdf4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   4b5d0:	01000174 	movhi	r4,5
   4b5d4:	213a0b04 	addi	r4,r4,-6100
   4b5d8:	01400174 	movhi	r5,5
   4b5dc:	297a0b04 	addi	r5,r5,-6100
   4b5e0:	01800174 	movhi	r6,5
   4b5e4:	31ba0b04 	addi	r6,r6,-6100
   4b5e8:	004dea40 	call	4dea4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   4b5ec:	004d72c0 	call	4d72c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   4b5f0:	01000174 	movhi	r4,5
   4b5f4:	2135e204 	addi	r4,r4,-10360
   4b5f8:	004e0d80 	call	4e0d8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   4b5fc:	d126e617 	ldw	r4,-25704(gp)
   4b600:	d0e6e717 	ldw	r3,-25700(gp)
   4b604:	d0a6e817 	ldw	r2,-25696(gp)
   4b608:	180b883a 	mov	r5,r3
   4b60c:	100d883a 	mov	r6,r2
   4b610:	0040e500 	call	40e50 <main>
   4b614:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   4b618:	01000044 	movi	r4,1
   4b61c:	004b0b40 	call	4b0b4 <close>
  exit (result);
   4b620:	e13fff17 	ldw	r4,-4(fp)
   4b624:	004e0ec0 	call	4e0ec <exit>

0004b628 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   4b628:	defffe04 	addi	sp,sp,-8
   4b62c:	df000115 	stw	fp,4(sp)
   4b630:	df000104 	addi	fp,sp,4
   4b634:	e13fff15 	stw	r4,-4(fp)
}
   4b638:	e037883a 	mov	sp,fp
   4b63c:	df000017 	ldw	fp,0(sp)
   4b640:	dec00104 	addi	sp,sp,4
   4b644:	f800283a 	ret

0004b648 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   4b648:	defffe04 	addi	sp,sp,-8
   4b64c:	df000115 	stw	fp,4(sp)
   4b650:	df000104 	addi	fp,sp,4
   4b654:	e13fff15 	stw	r4,-4(fp)
}
   4b658:	e037883a 	mov	sp,fp
   4b65c:	df000017 	ldw	fp,0(sp)
   4b660:	dec00104 	addi	sp,sp,4
   4b664:	f800283a 	ret

0004b668 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4b668:	defffe04 	addi	sp,sp,-8
   4b66c:	dfc00115 	stw	ra,4(sp)
   4b670:	df000015 	stw	fp,0(sp)
   4b674:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4b678:	00800174 	movhi	r2,5
   4b67c:	1080b604 	addi	r2,r2,728
   4b680:	10800017 	ldw	r2,0(r2)
   4b684:	10000526 	beq	r2,zero,4b69c <alt_get_errno+0x34>
   4b688:	00800174 	movhi	r2,5
   4b68c:	1080b604 	addi	r2,r2,728
   4b690:	10800017 	ldw	r2,0(r2)
   4b694:	103ee83a 	callr	r2
   4b698:	00000206 	br	4b6a4 <alt_get_errno+0x3c>
   4b69c:	00800174 	movhi	r2,5
   4b6a0:	10878604 	addi	r2,r2,7704
}
   4b6a4:	e037883a 	mov	sp,fp
   4b6a8:	dfc00117 	ldw	ra,4(sp)
   4b6ac:	df000017 	ldw	fp,0(sp)
   4b6b0:	dec00204 	addi	sp,sp,8
   4b6b4:	f800283a 	ret

0004b6b8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   4b6b8:	defffb04 	addi	sp,sp,-20
   4b6bc:	dfc00415 	stw	ra,16(sp)
   4b6c0:	df000315 	stw	fp,12(sp)
   4b6c4:	dc000215 	stw	r16,8(sp)
   4b6c8:	df000204 	addi	fp,sp,8
   4b6cc:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   4b6d0:	e0bfff17 	ldw	r2,-4(fp)
   4b6d4:	10800217 	ldw	r2,8(r2)
   4b6d8:	10d00034 	orhi	r3,r2,16384
   4b6dc:	e0bfff17 	ldw	r2,-4(fp)
   4b6e0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4b6e4:	e03ffe15 	stw	zero,-8(fp)
   4b6e8:	00002206 	br	4b774 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4b6ec:	04000174 	movhi	r16,5
   4b6f0:	843c2504 	addi	r16,r16,-3948
   4b6f4:	e0bffe17 	ldw	r2,-8(fp)
   4b6f8:	1009883a 	mov	r4,r2
   4b6fc:	01400304 	movi	r5,12
   4b700:	00411f80 	call	411f8 <__mulsi3>
   4b704:	8085883a 	add	r2,r16,r2
   4b708:	10c00017 	ldw	r3,0(r2)
   4b70c:	e0bfff17 	ldw	r2,-4(fp)
   4b710:	10800017 	ldw	r2,0(r2)
   4b714:	1880141e 	bne	r3,r2,4b768 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   4b718:	04000174 	movhi	r16,5
   4b71c:	843c2504 	addi	r16,r16,-3948
   4b720:	e0bffe17 	ldw	r2,-8(fp)
   4b724:	1009883a 	mov	r4,r2
   4b728:	01400304 	movi	r5,12
   4b72c:	00411f80 	call	411f8 <__mulsi3>
   4b730:	8085883a 	add	r2,r16,r2
   4b734:	10800204 	addi	r2,r2,8
   4b738:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4b73c:	10000a0e 	bge	r2,zero,4b768 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   4b740:	e13ffe17 	ldw	r4,-8(fp)
   4b744:	01400304 	movi	r5,12
   4b748:	00411f80 	call	411f8 <__mulsi3>
   4b74c:	00c00174 	movhi	r3,5
   4b750:	18fc2504 	addi	r3,r3,-3948
   4b754:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   4b758:	e0bfff17 	ldw	r2,-4(fp)
   4b75c:	18800226 	beq	r3,r2,4b768 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   4b760:	00bffcc4 	movi	r2,-13
   4b764:	00000a06 	br	4b790 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4b768:	e0bffe17 	ldw	r2,-8(fp)
   4b76c:	10800044 	addi	r2,r2,1
   4b770:	e0bffe15 	stw	r2,-8(fp)
   4b774:	00800174 	movhi	r2,5
   4b778:	1080b504 	addi	r2,r2,724
   4b77c:	10800017 	ldw	r2,0(r2)
   4b780:	1007883a 	mov	r3,r2
   4b784:	e0bffe17 	ldw	r2,-8(fp)
   4b788:	18bfd82e 	bgeu	r3,r2,4b6ec <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   4b78c:	0005883a 	mov	r2,zero
}
   4b790:	e037883a 	mov	sp,fp
   4b794:	dfc00217 	ldw	ra,8(sp)
   4b798:	df000117 	ldw	fp,4(sp)
   4b79c:	dc000017 	ldw	r16,0(sp)
   4b7a0:	dec00304 	addi	sp,sp,12
   4b7a4:	f800283a 	ret

0004b7a8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   4b7a8:	defff604 	addi	sp,sp,-40
   4b7ac:	dfc00915 	stw	ra,36(sp)
   4b7b0:	df000815 	stw	fp,32(sp)
   4b7b4:	df000804 	addi	fp,sp,32
   4b7b8:	e13ffd15 	stw	r4,-12(fp)
   4b7bc:	e17ffe15 	stw	r5,-8(fp)
   4b7c0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   4b7c4:	00bfffc4 	movi	r2,-1
   4b7c8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   4b7cc:	00bffb44 	movi	r2,-19
   4b7d0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   4b7d4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   4b7d8:	e13ffd17 	ldw	r4,-12(fp)
   4b7dc:	01400174 	movhi	r5,5
   4b7e0:	2940b304 	addi	r5,r5,716
   4b7e4:	004d7e40 	call	4d7e4 <alt_find_dev>
   4b7e8:	e0bff815 	stw	r2,-32(fp)
   4b7ec:	e0bff817 	ldw	r2,-32(fp)
   4b7f0:	1000051e 	bne	r2,zero,4b808 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   4b7f4:	e13ffd17 	ldw	r4,-12(fp)
   4b7f8:	004d8740 	call	4d874 <alt_find_file>
   4b7fc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   4b800:	00800044 	movi	r2,1
   4b804:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   4b808:	e0bff817 	ldw	r2,-32(fp)
   4b80c:	10002a26 	beq	r2,zero,4b8b8 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   4b810:	e13ff817 	ldw	r4,-32(fp)
   4b814:	004da0c0 	call	4da0c <alt_get_fd>
   4b818:	e0bff915 	stw	r2,-28(fp)
   4b81c:	e0bff917 	ldw	r2,-28(fp)
   4b820:	1000030e 	bge	r2,zero,4b830 <open+0x88>
    {
      status = index;
   4b824:	e0bff917 	ldw	r2,-28(fp)
   4b828:	e0bffa15 	stw	r2,-24(fp)
   4b82c:	00002406 	br	4b8c0 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   4b830:	e13ff917 	ldw	r4,-28(fp)
   4b834:	01400304 	movi	r5,12
   4b838:	00411f80 	call	411f8 <__mulsi3>
   4b83c:	00c00174 	movhi	r3,5
   4b840:	18fc2504 	addi	r3,r3,-3948
   4b844:	10c5883a 	add	r2,r2,r3
   4b848:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   4b84c:	e0fffe17 	ldw	r3,-8(fp)
   4b850:	00900034 	movhi	r2,16384
   4b854:	10bfffc4 	addi	r2,r2,-1
   4b858:	1886703a 	and	r3,r3,r2
   4b85c:	e0bffc17 	ldw	r2,-16(fp)
   4b860:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   4b864:	e0bffb17 	ldw	r2,-20(fp)
   4b868:	1000051e 	bne	r2,zero,4b880 <open+0xd8>
   4b86c:	e13ffc17 	ldw	r4,-16(fp)
   4b870:	004b6b80 	call	4b6b8 <alt_file_locked>
   4b874:	e0bffa15 	stw	r2,-24(fp)
   4b878:	e0bffa17 	ldw	r2,-24(fp)
   4b87c:	10001016 	blt	r2,zero,4b8c0 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   4b880:	e0bff817 	ldw	r2,-32(fp)
   4b884:	10800317 	ldw	r2,12(r2)
   4b888:	10000826 	beq	r2,zero,4b8ac <open+0x104>
   4b88c:	e0bff817 	ldw	r2,-32(fp)
   4b890:	10800317 	ldw	r2,12(r2)
   4b894:	e13ffc17 	ldw	r4,-16(fp)
   4b898:	e17ffd17 	ldw	r5,-12(fp)
   4b89c:	e1bffe17 	ldw	r6,-8(fp)
   4b8a0:	e1ffff17 	ldw	r7,-4(fp)
   4b8a4:	103ee83a 	callr	r2
   4b8a8:	00000106 	br	4b8b0 <open+0x108>
   4b8ac:	0005883a 	mov	r2,zero
   4b8b0:	e0bffa15 	stw	r2,-24(fp)
   4b8b4:	00000206 	br	4b8c0 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   4b8b8:	00bffb44 	movi	r2,-19
   4b8bc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   4b8c0:	e0bffa17 	ldw	r2,-24(fp)
   4b8c4:	1000080e 	bge	r2,zero,4b8e8 <open+0x140>
  {
    alt_release_fd (index);  
   4b8c8:	e13ff917 	ldw	r4,-28(fp)
   4b8cc:	004ba440 	call	4ba44 <alt_release_fd>
    ALT_ERRNO = -status;
   4b8d0:	004b6680 	call	4b668 <alt_get_errno>
   4b8d4:	e0fffa17 	ldw	r3,-24(fp)
   4b8d8:	00c7c83a 	sub	r3,zero,r3
   4b8dc:	10c00015 	stw	r3,0(r2)
    return -1;
   4b8e0:	00bfffc4 	movi	r2,-1
   4b8e4:	00000106 	br	4b8ec <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   4b8e8:	e0bff917 	ldw	r2,-28(fp)
}
   4b8ec:	e037883a 	mov	sp,fp
   4b8f0:	dfc00117 	ldw	ra,4(sp)
   4b8f4:	df000017 	ldw	fp,0(sp)
   4b8f8:	dec00204 	addi	sp,sp,8
   4b8fc:	f800283a 	ret

0004b900 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4b900:	defffe04 	addi	sp,sp,-8
   4b904:	dfc00115 	stw	ra,4(sp)
   4b908:	df000015 	stw	fp,0(sp)
   4b90c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4b910:	00800174 	movhi	r2,5
   4b914:	1080b604 	addi	r2,r2,728
   4b918:	10800017 	ldw	r2,0(r2)
   4b91c:	10000526 	beq	r2,zero,4b934 <alt_get_errno+0x34>
   4b920:	00800174 	movhi	r2,5
   4b924:	1080b604 	addi	r2,r2,728
   4b928:	10800017 	ldw	r2,0(r2)
   4b92c:	103ee83a 	callr	r2
   4b930:	00000206 	br	4b93c <alt_get_errno+0x3c>
   4b934:	00800174 	movhi	r2,5
   4b938:	10878604 	addi	r2,r2,7704
}
   4b93c:	e037883a 	mov	sp,fp
   4b940:	dfc00117 	ldw	ra,4(sp)
   4b944:	df000017 	ldw	fp,0(sp)
   4b948:	dec00204 	addi	sp,sp,8
   4b94c:	f800283a 	ret

0004b950 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   4b950:	defff904 	addi	sp,sp,-28
   4b954:	dfc00615 	stw	ra,24(sp)
   4b958:	df000515 	stw	fp,20(sp)
   4b95c:	df000504 	addi	fp,sp,20
   4b960:	e13ffd15 	stw	r4,-12(fp)
   4b964:	e17ffe15 	stw	r5,-8(fp)
   4b968:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4b96c:	e0bffd17 	ldw	r2,-12(fp)
   4b970:	10000716 	blt	r2,zero,4b990 <read+0x40>
   4b974:	e13ffd17 	ldw	r4,-12(fp)
   4b978:	01400304 	movi	r5,12
   4b97c:	00411f80 	call	411f8 <__mulsi3>
   4b980:	00c00174 	movhi	r3,5
   4b984:	18fc2504 	addi	r3,r3,-3948
   4b988:	10c5883a 	add	r2,r2,r3
   4b98c:	00000106 	br	4b994 <read+0x44>
   4b990:	0005883a 	mov	r2,zero
   4b994:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   4b998:	e0bffb17 	ldw	r2,-20(fp)
   4b99c:	10002026 	beq	r2,zero,4ba20 <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   4b9a0:	e0bffb17 	ldw	r2,-20(fp)
   4b9a4:	10800217 	ldw	r2,8(r2)
   4b9a8:	108000cc 	andi	r2,r2,3
   4b9ac:	10800060 	cmpeqi	r2,r2,1
   4b9b0:	1000171e 	bne	r2,zero,4ba10 <read+0xc0>
        (fd->dev->read))
   4b9b4:	e0bffb17 	ldw	r2,-20(fp)
   4b9b8:	10800017 	ldw	r2,0(r2)
   4b9bc:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   4b9c0:	10001326 	beq	r2,zero,4ba10 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   4b9c4:	e0bffb17 	ldw	r2,-20(fp)
   4b9c8:	10800017 	ldw	r2,0(r2)
   4b9cc:	10c00517 	ldw	r3,20(r2)
   4b9d0:	e0bfff17 	ldw	r2,-4(fp)
   4b9d4:	e13ffb17 	ldw	r4,-20(fp)
   4b9d8:	e17ffe17 	ldw	r5,-8(fp)
   4b9dc:	100d883a 	mov	r6,r2
   4b9e0:	183ee83a 	callr	r3
   4b9e4:	e0bffc15 	stw	r2,-16(fp)
   4b9e8:	e0bffc17 	ldw	r2,-16(fp)
   4b9ec:	1000060e 	bge	r2,zero,4ba08 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   4b9f0:	004b9000 	call	4b900 <alt_get_errno>
   4b9f4:	e0fffc17 	ldw	r3,-16(fp)
   4b9f8:	00c7c83a 	sub	r3,zero,r3
   4b9fc:	10c00015 	stw	r3,0(r2)
          return -1;
   4ba00:	00bfffc4 	movi	r2,-1
   4ba04:	00000a06 	br	4ba30 <read+0xe0>
        }
        return rval;
   4ba08:	e0bffc17 	ldw	r2,-16(fp)
   4ba0c:	00000806 	br	4ba30 <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   4ba10:	004b9000 	call	4b900 <alt_get_errno>
   4ba14:	00c00344 	movi	r3,13
   4ba18:	10c00015 	stw	r3,0(r2)
   4ba1c:	00000306 	br	4ba2c <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   4ba20:	004b9000 	call	4b900 <alt_get_errno>
   4ba24:	00c01444 	movi	r3,81
   4ba28:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   4ba2c:	00bfffc4 	movi	r2,-1
}
   4ba30:	e037883a 	mov	sp,fp
   4ba34:	dfc00117 	ldw	ra,4(sp)
   4ba38:	df000017 	ldw	fp,0(sp)
   4ba3c:	dec00204 	addi	sp,sp,8
   4ba40:	f800283a 	ret

0004ba44 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   4ba44:	defffc04 	addi	sp,sp,-16
   4ba48:	dfc00315 	stw	ra,12(sp)
   4ba4c:	df000215 	stw	fp,8(sp)
   4ba50:	dc000115 	stw	r16,4(sp)
   4ba54:	df000104 	addi	fp,sp,4
   4ba58:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   4ba5c:	e0bfff17 	ldw	r2,-4(fp)
   4ba60:	108000d0 	cmplti	r2,r2,3
   4ba64:	1000111e 	bne	r2,zero,4baac <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   4ba68:	04000174 	movhi	r16,5
   4ba6c:	843c2504 	addi	r16,r16,-3948
   4ba70:	e0bfff17 	ldw	r2,-4(fp)
   4ba74:	1009883a 	mov	r4,r2
   4ba78:	01400304 	movi	r5,12
   4ba7c:	00411f80 	call	411f8 <__mulsi3>
   4ba80:	8085883a 	add	r2,r16,r2
   4ba84:	10800204 	addi	r2,r2,8
   4ba88:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   4ba8c:	04000174 	movhi	r16,5
   4ba90:	843c2504 	addi	r16,r16,-3948
   4ba94:	e0bfff17 	ldw	r2,-4(fp)
   4ba98:	1009883a 	mov	r4,r2
   4ba9c:	01400304 	movi	r5,12
   4baa0:	00411f80 	call	411f8 <__mulsi3>
   4baa4:	8085883a 	add	r2,r16,r2
   4baa8:	10000015 	stw	zero,0(r2)
  }
}
   4baac:	e037883a 	mov	sp,fp
   4bab0:	dfc00217 	ldw	ra,8(sp)
   4bab4:	df000117 	ldw	fp,4(sp)
   4bab8:	dc000017 	ldw	r16,0(sp)
   4babc:	dec00304 	addi	sp,sp,12
   4bac0:	f800283a 	ret

0004bac4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   4bac4:	defff904 	addi	sp,sp,-28
   4bac8:	df000615 	stw	fp,24(sp)
   4bacc:	df000604 	addi	fp,sp,24
   4bad0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4bad4:	0005303a 	rdctl	r2,status
   4bad8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4badc:	e0fffc17 	ldw	r3,-16(fp)
   4bae0:	00bfff84 	movi	r2,-2
   4bae4:	1884703a 	and	r2,r3,r2
   4bae8:	1001703a 	wrctl	status,r2
  
  return context;
   4baec:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   4baf0:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   4baf4:	d0a01017 	ldw	r2,-32704(gp)
   4baf8:	10c000c4 	addi	r3,r2,3
   4bafc:	00bfff04 	movi	r2,-4
   4bb00:	1884703a 	and	r2,r3,r2
   4bb04:	d0a01015 	stw	r2,-32704(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   4bb08:	d0e01017 	ldw	r3,-32704(gp)
   4bb0c:	e0bfff17 	ldw	r2,-4(fp)
   4bb10:	1885883a 	add	r2,r3,r2
   4bb14:	00c00174 	movhi	r3,5
   4bb18:	18dc0004 	addi	r3,r3,28672
   4bb1c:	1880062e 	bgeu	r3,r2,4bb38 <sbrk+0x74>
   4bb20:	e0bffa17 	ldw	r2,-24(fp)
   4bb24:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4bb28:	e0bffd17 	ldw	r2,-12(fp)
   4bb2c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   4bb30:	00bfffc4 	movi	r2,-1
   4bb34:	00000b06 	br	4bb64 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   4bb38:	d0a01017 	ldw	r2,-32704(gp)
   4bb3c:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   4bb40:	d0e01017 	ldw	r3,-32704(gp)
   4bb44:	e0bfff17 	ldw	r2,-4(fp)
   4bb48:	1885883a 	add	r2,r3,r2
   4bb4c:	d0a01015 	stw	r2,-32704(gp)
   4bb50:	e0bffa17 	ldw	r2,-24(fp)
   4bb54:	e0bffe15 	stw	r2,-8(fp)
   4bb58:	e0bffe17 	ldw	r2,-8(fp)
   4bb5c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   4bb60:	e0bffb17 	ldw	r2,-20(fp)
} 
   4bb64:	e037883a 	mov	sp,fp
   4bb68:	df000017 	ldw	fp,0(sp)
   4bb6c:	dec00104 	addi	sp,sp,4
   4bb70:	f800283a 	ret

0004bb74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4bb74:	defffe04 	addi	sp,sp,-8
   4bb78:	dfc00115 	stw	ra,4(sp)
   4bb7c:	df000015 	stw	fp,0(sp)
   4bb80:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4bb84:	00800174 	movhi	r2,5
   4bb88:	1080b604 	addi	r2,r2,728
   4bb8c:	10800017 	ldw	r2,0(r2)
   4bb90:	10000526 	beq	r2,zero,4bba8 <alt_get_errno+0x34>
   4bb94:	00800174 	movhi	r2,5
   4bb98:	1080b604 	addi	r2,r2,728
   4bb9c:	10800017 	ldw	r2,0(r2)
   4bba0:	103ee83a 	callr	r2
   4bba4:	00000206 	br	4bbb0 <alt_get_errno+0x3c>
   4bba8:	00800174 	movhi	r2,5
   4bbac:	10878604 	addi	r2,r2,7704
}
   4bbb0:	e037883a 	mov	sp,fp
   4bbb4:	dfc00117 	ldw	ra,4(sp)
   4bbb8:	df000017 	ldw	fp,0(sp)
   4bbbc:	dec00204 	addi	sp,sp,8
   4bbc0:	f800283a 	ret

0004bbc4 <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
   4bbc4:	defffc04 	addi	sp,sp,-16
   4bbc8:	dfc00315 	stw	ra,12(sp)
   4bbcc:	df000215 	stw	fp,8(sp)
   4bbd0:	df000204 	addi	fp,sp,8
   4bbd4:	e13fff15 	stw	r4,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   4bbd8:	00800174 	movhi	r2,5
   4bbdc:	10879204 	addi	r2,r2,7752
   4bbe0:	10800017 	ldw	r2,0(r2)
  clock_t ticks = alt_nticks(); 
   4bbe4:	e0bffe15 	stw	r2,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   4bbe8:	00800174 	movhi	r2,5
   4bbec:	10879104 	addi	r2,r2,7748
   4bbf0:	10800017 	ldw	r2,0(r2)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
   4bbf4:	1000051e 	bne	r2,zero,4bc0c <times+0x48>
  {
    ALT_ERRNO = ENOSYS;
   4bbf8:	004bb740 	call	4bb74 <alt_get_errno>
   4bbfc:	00c01604 	movi	r3,88
   4bc00:	10c00015 	stw	r3,0(r2)
    return 0;
   4bc04:	0005883a 	mov	r2,zero
   4bc08:	00000a06 	br	4bc34 <times+0x70>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
   4bc0c:	e0bfff17 	ldw	r2,-4(fp)
   4bc10:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
   4bc14:	e0bfff17 	ldw	r2,-4(fp)
   4bc18:	e0fffe17 	ldw	r3,-8(fp)
   4bc1c:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
   4bc20:	e0bfff17 	ldw	r2,-4(fp)
   4bc24:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
   4bc28:	e0bfff17 	ldw	r2,-4(fp)
   4bc2c:	10000315 	stw	zero,12(r2)

  return ticks;
   4bc30:	e0bffe17 	ldw	r2,-8(fp)
}
   4bc34:	e037883a 	mov	sp,fp
   4bc38:	dfc00117 	ldw	ra,4(sp)
   4bc3c:	df000017 	ldw	fp,0(sp)
   4bc40:	dec00204 	addi	sp,sp,8
   4bc44:	f800283a 	ret

0004bc48 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4bc48:	defffe04 	addi	sp,sp,-8
   4bc4c:	dfc00115 	stw	ra,4(sp)
   4bc50:	df000015 	stw	fp,0(sp)
   4bc54:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4bc58:	00800174 	movhi	r2,5
   4bc5c:	1080b604 	addi	r2,r2,728
   4bc60:	10800017 	ldw	r2,0(r2)
   4bc64:	10000526 	beq	r2,zero,4bc7c <alt_get_errno+0x34>
   4bc68:	00800174 	movhi	r2,5
   4bc6c:	1080b604 	addi	r2,r2,728
   4bc70:	10800017 	ldw	r2,0(r2)
   4bc74:	103ee83a 	callr	r2
   4bc78:	00000206 	br	4bc84 <alt_get_errno+0x3c>
   4bc7c:	00800174 	movhi	r2,5
   4bc80:	10878604 	addi	r2,r2,7704
}
   4bc84:	e037883a 	mov	sp,fp
   4bc88:	dfc00117 	ldw	ra,4(sp)
   4bc8c:	df000017 	ldw	fp,0(sp)
   4bc90:	dec00204 	addi	sp,sp,8
   4bc94:	f800283a 	ret

0004bc98 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   4bc98:	defff904 	addi	sp,sp,-28
   4bc9c:	dfc00615 	stw	ra,24(sp)
   4bca0:	df000515 	stw	fp,20(sp)
   4bca4:	df000504 	addi	fp,sp,20
   4bca8:	e13ffd15 	stw	r4,-12(fp)
   4bcac:	e17ffe15 	stw	r5,-8(fp)
   4bcb0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4bcb4:	e0bffd17 	ldw	r2,-12(fp)
   4bcb8:	10000716 	blt	r2,zero,4bcd8 <write+0x40>
   4bcbc:	e13ffd17 	ldw	r4,-12(fp)
   4bcc0:	01400304 	movi	r5,12
   4bcc4:	00411f80 	call	411f8 <__mulsi3>
   4bcc8:	00c00174 	movhi	r3,5
   4bccc:	18fc2504 	addi	r3,r3,-3948
   4bcd0:	10c5883a 	add	r2,r2,r3
   4bcd4:	00000106 	br	4bcdc <write+0x44>
   4bcd8:	0005883a 	mov	r2,zero
   4bcdc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   4bce0:	e0bffb17 	ldw	r2,-20(fp)
   4bce4:	10001f26 	beq	r2,zero,4bd64 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   4bce8:	e0bffb17 	ldw	r2,-20(fp)
   4bcec:	10800217 	ldw	r2,8(r2)
   4bcf0:	108000cc 	andi	r2,r2,3
   4bcf4:	10001726 	beq	r2,zero,4bd54 <write+0xbc>
   4bcf8:	e0bffb17 	ldw	r2,-20(fp)
   4bcfc:	10800017 	ldw	r2,0(r2)
   4bd00:	10800617 	ldw	r2,24(r2)
   4bd04:	10001326 	beq	r2,zero,4bd54 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   4bd08:	e0bffb17 	ldw	r2,-20(fp)
   4bd0c:	10800017 	ldw	r2,0(r2)
   4bd10:	10c00617 	ldw	r3,24(r2)
   4bd14:	e0bfff17 	ldw	r2,-4(fp)
   4bd18:	e13ffb17 	ldw	r4,-20(fp)
   4bd1c:	e17ffe17 	ldw	r5,-8(fp)
   4bd20:	100d883a 	mov	r6,r2
   4bd24:	183ee83a 	callr	r3
   4bd28:	e0bffc15 	stw	r2,-16(fp)
   4bd2c:	e0bffc17 	ldw	r2,-16(fp)
   4bd30:	1000060e 	bge	r2,zero,4bd4c <write+0xb4>
      {
        ALT_ERRNO = -rval;
   4bd34:	004bc480 	call	4bc48 <alt_get_errno>
   4bd38:	e0fffc17 	ldw	r3,-16(fp)
   4bd3c:	00c7c83a 	sub	r3,zero,r3
   4bd40:	10c00015 	stw	r3,0(r2)
        return -1;
   4bd44:	00bfffc4 	movi	r2,-1
   4bd48:	00000a06 	br	4bd74 <write+0xdc>
      }
      return rval;
   4bd4c:	e0bffc17 	ldw	r2,-16(fp)
   4bd50:	00000806 	br	4bd74 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
   4bd54:	004bc480 	call	4bc48 <alt_get_errno>
   4bd58:	00c00344 	movi	r3,13
   4bd5c:	10c00015 	stw	r3,0(r2)
   4bd60:	00000306 	br	4bd70 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   4bd64:	004bc480 	call	4bc48 <alt_get_errno>
   4bd68:	00c01444 	movi	r3,81
   4bd6c:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   4bd70:	00bfffc4 	movi	r2,-1
}
   4bd74:	e037883a 	mov	sp,fp
   4bd78:	dfc00117 	ldw	ra,4(sp)
   4bd7c:	df000017 	ldw	fp,0(sp)
   4bd80:	dec00204 	addi	sp,sp,8
   4bd84:	f800283a 	ret

0004bd88 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   4bd88:	defffd04 	addi	sp,sp,-12
   4bd8c:	dfc00215 	stw	ra,8(sp)
   4bd90:	df000115 	stw	fp,4(sp)
   4bd94:	df000104 	addi	fp,sp,4
   4bd98:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   4bd9c:	e13fff17 	ldw	r4,-4(fp)
   4bda0:	01400174 	movhi	r5,5
   4bda4:	2940b304 	addi	r5,r5,716
   4bda8:	004d68c0 	call	4d68c <alt_dev_llist_insert>
}
   4bdac:	e037883a 	mov	sp,fp
   4bdb0:	dfc00117 	ldw	ra,4(sp)
   4bdb4:	df000017 	ldw	fp,0(sp)
   4bdb8:	dec00204 	addi	sp,sp,8
   4bdbc:	f800283a 	ret

0004bdc0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   4bdc0:	defffd04 	addi	sp,sp,-12
   4bdc4:	dfc00215 	stw	ra,8(sp)
   4bdc8:	df000115 	stw	fp,4(sp)
   4bdcc:	df000104 	addi	fp,sp,4
   4bdd0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU3, cpu3);
   4bdd4:	004e0b80 	call	4e0b8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   4bdd8:	00800044 	movi	r2,1
   4bddc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   4bde0:	e037883a 	mov	sp,fp
   4bde4:	dfc00117 	ldw	ra,4(sp)
   4bde8:	df000017 	ldw	fp,0(sp)
   4bdec:	dec00204 	addi	sp,sp,8
   4bdf0:	f800283a 	ret

0004bdf4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   4bdf4:	defffe04 	addi	sp,sp,-8
   4bdf8:	dfc00115 	stw	ra,4(sp)
   4bdfc:	df000015 	stw	fp,0(sp)
   4be00:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER3, timer3);
   4be04:	010000b4 	movhi	r4,2
   4be08:	21041004 	addi	r4,r4,4160
   4be0c:	000b883a 	mov	r5,zero
   4be10:	01800044 	movi	r6,1
   4be14:	01c0fa04 	movi	r7,1000
   4be18:	004ce300 	call	4ce30 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_FIFO_INIT ( FIFO2TO3, fifo2to3);
   4be1c:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO3TO4, fifo3to4);
   4be20:	0001883a 	nop
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART3, jtag_uart3);
   4be24:	01000174 	movhi	r4,5
   4be28:	213c8f04 	addi	r4,r4,-3524
   4be2c:	000b883a 	mov	r5,zero
   4be30:	01800404 	movi	r6,16
   4be34:	004c4bc0 	call	4c4bc <altera_avalon_jtag_uart_init>
   4be38:	01000174 	movhi	r4,5
   4be3c:	213c8504 	addi	r4,r4,-3564
   4be40:	004bd880 	call	4bd88 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   4be44:	0001883a 	nop
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
   4be48:	01000174 	movhi	r4,5
   4be4c:	21009d04 	addi	r4,r4,628
   4be50:	004d9880 	call	4d988 <alt_fs_reg>
}
   4be54:	e037883a 	mov	sp,fp
   4be58:	dfc00117 	ldw	ra,4(sp)
   4be5c:	df000017 	ldw	fp,0(sp)
   4be60:	dec00204 	addi	sp,sp,8
   4be64:	f800283a 	ret

0004be68 <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
   4be68:	defffa04 	addi	sp,sp,-24
   4be6c:	dfc00515 	stw	ra,20(sp)
   4be70:	df000415 	stw	fp,16(sp)
   4be74:	df000404 	addi	fp,sp,16
   4be78:	e13ffc15 	stw	r4,-16(fp)
   4be7c:	e17ffd15 	stw	r5,-12(fp)
   4be80:	e1bffe15 	stw	r6,-8(fp)
   4be84:	e1ffff15 	stw	r7,-4(fp)
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
   4be88:	e13ffc17 	ldw	r4,-16(fp)
   4be8c:	01400fc4 	movi	r5,63
   4be90:	004c0340 	call	4c034 <altera_avalon_fifo_clear_event>
   4be94:	10000226 	beq	r2,zero,4bea0 <altera_avalon_fifo_init+0x38>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   4be98:	00bfffc4 	movi	r2,-1
   4be9c:	00001306 	br	4beec <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
   4bea0:	e13ffc17 	ldw	r4,-16(fp)
   4bea4:	e17ffd17 	ldw	r5,-12(fp)
   4bea8:	004c0900 	call	4c090 <altera_avalon_fifo_write_ienable>
   4beac:	10000226 	beq	r2,zero,4beb8 <altera_avalon_fifo_init+0x50>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   4beb0:	00bfff84 	movi	r2,-2
   4beb4:	00000d06 	br	4beec <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
   4beb8:	e13ffc17 	ldw	r4,-16(fp)
   4bebc:	e17fff17 	ldw	r5,-4(fp)
   4bec0:	004c0e80 	call	4c0e8 <altera_avalon_fifo_write_almostfull>
   4bec4:	10000226 	beq	r2,zero,4bed0 <altera_avalon_fifo_init+0x68>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   4bec8:	00bfff44 	movi	r2,-3
   4becc:	00000706 	br	4beec <altera_avalon_fifo_init+0x84>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
   4bed0:	e13ffc17 	ldw	r4,-16(fp)
   4bed4:	e17ffe17 	ldw	r5,-8(fp)
   4bed8:	004c1400 	call	4c140 <altera_avalon_fifo_write_almostempty>
   4bedc:	10000226 	beq	r2,zero,4bee8 <altera_avalon_fifo_init+0x80>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   4bee0:	00bfff44 	movi	r2,-3
   4bee4:	00000106 	br	4beec <altera_avalon_fifo_init+0x84>
    }

    return ALTERA_AVALON_FIFO_OK;
   4bee8:	0005883a 	mov	r2,zero
}
   4beec:	e037883a 	mov	sp,fp
   4bef0:	dfc00117 	ldw	ra,4(sp)
   4bef4:	df000017 	ldw	fp,0(sp)
   4bef8:	dec00204 	addi	sp,sp,8
   4befc:	f800283a 	ret

0004bf00 <altera_avalon_fifo_read_status>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
   4bf00:	defffd04 	addi	sp,sp,-12
   4bf04:	df000215 	stw	fp,8(sp)
   4bf08:	df000204 	addi	fp,sp,8
   4bf0c:	e13ffe15 	stw	r4,-8(fp)
   4bf10:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   4bf14:	e0bffe17 	ldw	r2,-8(fp)
   4bf18:	10800104 	addi	r2,r2,4
   4bf1c:	10800037 	ldwio	r2,0(r2)
   4bf20:	1007883a 	mov	r3,r2
   4bf24:	e0bfff17 	ldw	r2,-4(fp)
   4bf28:	1884703a 	and	r2,r3,r2
}
   4bf2c:	e037883a 	mov	sp,fp
   4bf30:	df000017 	ldw	fp,0(sp)
   4bf34:	dec00104 	addi	sp,sp,4
   4bf38:	f800283a 	ret

0004bf3c <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
   4bf3c:	defffd04 	addi	sp,sp,-12
   4bf40:	df000215 	stw	fp,8(sp)
   4bf44:	df000204 	addi	fp,sp,8
   4bf48:	e13ffe15 	stw	r4,-8(fp)
   4bf4c:	e17fff15 	stw	r5,-4(fp)
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
   4bf50:	e0bffe17 	ldw	r2,-8(fp)
   4bf54:	10800304 	addi	r2,r2,12
   4bf58:	10800037 	ldwio	r2,0(r2)
   4bf5c:	1007883a 	mov	r3,r2
   4bf60:	e0bfff17 	ldw	r2,-4(fp)
   4bf64:	1884703a 	and	r2,r3,r2
}
   4bf68:	e037883a 	mov	sp,fp
   4bf6c:	df000017 	ldw	fp,0(sp)
   4bf70:	dec00104 	addi	sp,sp,4
   4bf74:	f800283a 	ret

0004bf78 <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
   4bf78:	defffe04 	addi	sp,sp,-8
   4bf7c:	df000115 	stw	fp,4(sp)
   4bf80:	df000104 	addi	fp,sp,4
   4bf84:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
   4bf88:	e0bfff17 	ldw	r2,-4(fp)
   4bf8c:	10800404 	addi	r2,r2,16
   4bf90:	10800037 	ldwio	r2,0(r2)
}
   4bf94:	e037883a 	mov	sp,fp
   4bf98:	df000017 	ldw	fp,0(sp)
   4bf9c:	dec00104 	addi	sp,sp,4
   4bfa0:	f800283a 	ret

0004bfa4 <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
   4bfa4:	defffe04 	addi	sp,sp,-8
   4bfa8:	df000115 	stw	fp,4(sp)
   4bfac:	df000104 	addi	fp,sp,4
   4bfb0:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
   4bfb4:	e0bfff17 	ldw	r2,-4(fp)
   4bfb8:	10800504 	addi	r2,r2,20
   4bfbc:	10800037 	ldwio	r2,0(r2)
}
   4bfc0:	e037883a 	mov	sp,fp
   4bfc4:	df000017 	ldw	fp,0(sp)
   4bfc8:	dec00104 	addi	sp,sp,4
   4bfcc:	f800283a 	ret

0004bfd0 <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
   4bfd0:	defffd04 	addi	sp,sp,-12
   4bfd4:	df000215 	stw	fp,8(sp)
   4bfd8:	df000204 	addi	fp,sp,8
   4bfdc:	e13ffe15 	stw	r4,-8(fp)
   4bfe0:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
   4bfe4:	e0bffe17 	ldw	r2,-8(fp)
   4bfe8:	10800204 	addi	r2,r2,8
   4bfec:	10800037 	ldwio	r2,0(r2)
   4bff0:	1007883a 	mov	r3,r2
   4bff4:	e0bfff17 	ldw	r2,-4(fp)
   4bff8:	1884703a 	and	r2,r3,r2
}
   4bffc:	e037883a 	mov	sp,fp
   4c000:	df000017 	ldw	fp,0(sp)
   4c004:	dec00104 	addi	sp,sp,4
   4c008:	f800283a 	ret

0004c00c <altera_avalon_fifo_read_level>:

int altera_avalon_fifo_read_level(alt_u32 address)
{
   4c00c:	defffe04 	addi	sp,sp,-8
   4c010:	df000115 	stw	fp,4(sp)
   4c014:	df000104 	addi	fp,sp,4
   4c018:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
   4c01c:	e0bfff17 	ldw	r2,-4(fp)
   4c020:	10800037 	ldwio	r2,0(r2)
}
   4c024:	e037883a 	mov	sp,fp
   4c028:	df000017 	ldw	fp,0(sp)
   4c02c:	dec00104 	addi	sp,sp,4
   4c030:	f800283a 	ret

0004c034 <altera_avalon_fifo_clear_event>:

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
   4c034:	defffd04 	addi	sp,sp,-12
   4c038:	df000215 	stw	fp,8(sp)
   4c03c:	df000204 	addi	fp,sp,8
   4c040:	e13ffe15 	stw	r4,-8(fp)
   4c044:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
   4c048:	e0bffe17 	ldw	r2,-8(fp)
   4c04c:	10800204 	addi	r2,r2,8
   4c050:	e0ffff17 	ldw	r3,-4(fp)
   4c054:	10c00035 	stwio	r3,0(r2)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
   4c058:	e0bffe17 	ldw	r2,-8(fp)
   4c05c:	10800204 	addi	r2,r2,8
   4c060:	10800037 	ldwio	r2,0(r2)
   4c064:	1007883a 	mov	r3,r2
   4c068:	e0bfff17 	ldw	r2,-4(fp)
   4c06c:	1884703a 	and	r2,r3,r2
   4c070:	1000021e 	bne	r2,zero,4c07c <altera_avalon_fifo_clear_event+0x48>
        return ALTERA_AVALON_FIFO_OK;
   4c074:	0005883a 	mov	r2,zero
   4c078:	00000106 	br	4c080 <altera_avalon_fifo_clear_event+0x4c>
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   4c07c:	00bfffc4 	movi	r2,-1
}
   4c080:	e037883a 	mov	sp,fp
   4c084:	df000017 	ldw	fp,0(sp)
   4c088:	dec00104 	addi	sp,sp,4
   4c08c:	f800283a 	ret

0004c090 <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
   4c090:	defffd04 	addi	sp,sp,-12
   4c094:	df000215 	stw	fp,8(sp)
   4c098:	df000204 	addi	fp,sp,8
   4c09c:	e13ffe15 	stw	r4,-8(fp)
   4c0a0:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
   4c0a4:	e0bffe17 	ldw	r2,-8(fp)
   4c0a8:	10800304 	addi	r2,r2,12
   4c0ac:	e0ffff17 	ldw	r3,-4(fp)
   4c0b0:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
   4c0b4:	e0bffe17 	ldw	r2,-8(fp)
   4c0b8:	10800304 	addi	r2,r2,12
   4c0bc:	10800037 	ldwio	r2,0(r2)
   4c0c0:	1007883a 	mov	r3,r2
   4c0c4:	e0bfff17 	ldw	r2,-4(fp)
   4c0c8:	1880021e 	bne	r3,r2,4c0d4 <altera_avalon_fifo_write_ienable+0x44>
        return ALTERA_AVALON_FIFO_OK;
   4c0cc:	0005883a 	mov	r2,zero
   4c0d0:	00000106 	br	4c0d8 <altera_avalon_fifo_write_ienable+0x48>
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   4c0d4:	00bfff84 	movi	r2,-2
}
   4c0d8:	e037883a 	mov	sp,fp
   4c0dc:	df000017 	ldw	fp,0(sp)
   4c0e0:	dec00104 	addi	sp,sp,4
   4c0e4:	f800283a 	ret

0004c0e8 <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
   4c0e8:	defffd04 	addi	sp,sp,-12
   4c0ec:	df000215 	stw	fp,8(sp)
   4c0f0:	df000204 	addi	fp,sp,8
   4c0f4:	e13ffe15 	stw	r4,-8(fp)
   4c0f8:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
   4c0fc:	e0bffe17 	ldw	r2,-8(fp)
   4c100:	10800404 	addi	r2,r2,16
   4c104:	e0ffff17 	ldw	r3,-4(fp)
   4c108:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
   4c10c:	e0bffe17 	ldw	r2,-8(fp)
   4c110:	10800404 	addi	r2,r2,16
   4c114:	10800037 	ldwio	r2,0(r2)
   4c118:	1007883a 	mov	r3,r2
   4c11c:	e0bfff17 	ldw	r2,-4(fp)
   4c120:	1880021e 	bne	r3,r2,4c12c <altera_avalon_fifo_write_almostfull+0x44>
        return ALTERA_AVALON_FIFO_OK;
   4c124:	0005883a 	mov	r2,zero
   4c128:	00000106 	br	4c130 <altera_avalon_fifo_write_almostfull+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   4c12c:	00bfff44 	movi	r2,-3
}
   4c130:	e037883a 	mov	sp,fp
   4c134:	df000017 	ldw	fp,0(sp)
   4c138:	dec00104 	addi	sp,sp,4
   4c13c:	f800283a 	ret

0004c140 <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
   4c140:	defffd04 	addi	sp,sp,-12
   4c144:	df000215 	stw	fp,8(sp)
   4c148:	df000204 	addi	fp,sp,8
   4c14c:	e13ffe15 	stw	r4,-8(fp)
   4c150:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
   4c154:	e0bffe17 	ldw	r2,-8(fp)
   4c158:	10800504 	addi	r2,r2,20
   4c15c:	e0ffff17 	ldw	r3,-4(fp)
   4c160:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
   4c164:	e0bffe17 	ldw	r2,-8(fp)
   4c168:	10800504 	addi	r2,r2,20
   4c16c:	10800037 	ldwio	r2,0(r2)
   4c170:	1007883a 	mov	r3,r2
   4c174:	e0bfff17 	ldw	r2,-4(fp)
   4c178:	1880021e 	bne	r3,r2,4c184 <altera_avalon_fifo_write_almostempty+0x44>
        return ALTERA_AVALON_FIFO_OK;
   4c17c:	0005883a 	mov	r2,zero
   4c180:	00000106 	br	4c188 <altera_avalon_fifo_write_almostempty+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   4c184:	00bfff44 	movi	r2,-3
}
   4c188:	e037883a 	mov	sp,fp
   4c18c:	df000017 	ldw	fp,0(sp)
   4c190:	dec00104 	addi	sp,sp,4
   4c194:	f800283a 	ret

0004c198 <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
   4c198:	defffb04 	addi	sp,sp,-20
   4c19c:	dfc00415 	stw	ra,16(sp)
   4c1a0:	df000315 	stw	fp,12(sp)
   4c1a4:	df000304 	addi	fp,sp,12
   4c1a8:	e13ffd15 	stw	r4,-12(fp)
   4c1ac:	e17ffe15 	stw	r5,-8(fp)
   4c1b0:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   4c1b4:	e13ffe17 	ldw	r4,-8(fp)
   4c1b8:	01400044 	movi	r5,1
   4c1bc:	004bf000 	call	4bf00 <altera_avalon_fifo_read_status>
   4c1c0:	1000051e 	bne	r2,zero,4c1d8 <altera_avalon_fifo_write_fifo+0x40>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
   4c1c4:	e0bffd17 	ldw	r2,-12(fp)
   4c1c8:	e0ffff17 	ldw	r3,-4(fp)
   4c1cc:	10c00035 	stwio	r3,0(r2)
        return ALTERA_AVALON_FIFO_OK;
   4c1d0:	0005883a 	mov	r2,zero
   4c1d4:	00000106 	br	4c1dc <altera_avalon_fifo_write_fifo+0x44>
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
   4c1d8:	00bfff04 	movi	r2,-4
    }
}
   4c1dc:	e037883a 	mov	sp,fp
   4c1e0:	dfc00117 	ldw	ra,4(sp)
   4c1e4:	df000017 	ldw	fp,0(sp)
   4c1e8:	dec00204 	addi	sp,sp,8
   4c1ec:	f800283a 	ret

0004c1f0 <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
   4c1f0:	defffa04 	addi	sp,sp,-24
   4c1f4:	dfc00515 	stw	ra,20(sp)
   4c1f8:	df000415 	stw	fp,16(sp)
   4c1fc:	df000404 	addi	fp,sp,16
   4c200:	e13ffd15 	stw	r4,-12(fp)
   4c204:	e17ffe15 	stw	r5,-8(fp)
   4c208:	e1bfff15 	stw	r6,-4(fp)
    int return_val = 0;
   4c20c:	e03ffc15 	stw	zero,-16(fp)
    *data = 0;
   4c210:	e0bfff17 	ldw	r2,-4(fp)
   4c214:	10000015 	stw	zero,0(r2)
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   4c218:	e13ffe17 	ldw	r4,-8(fp)
   4c21c:	01400084 	movi	r5,2
   4c220:	004bf000 	call	4bf00 <altera_avalon_fifo_read_status>
   4c224:	1000071e 	bne	r2,zero,4c244 <altera_avalon_read_fifo+0x54>
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
   4c228:	e13ffe17 	ldw	r4,-8(fp)
   4c22c:	004c00c0 	call	4c00c <altera_avalon_fifo_read_level>
   4c230:	e0bffc15 	stw	r2,-16(fp)
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   4c234:	e0bffd17 	ldw	r2,-12(fp)
   4c238:	10c00037 	ldwio	r3,0(r2)
   4c23c:	e0bfff17 	ldw	r2,-4(fp)
   4c240:	10c00015 	stw	r3,0(r2)
    
    }
    return return_val;
   4c244:	e0bffc17 	ldw	r2,-16(fp)
}
   4c248:	e037883a 	mov	sp,fp
   4c24c:	dfc00117 	ldw	ra,4(sp)
   4c250:	df000017 	ldw	fp,0(sp)
   4c254:	dec00204 	addi	sp,sp,8
   4c258:	f800283a 	ret

0004c25c <altera_avalon_fifo_read_fifo>:

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
   4c25c:	defffc04 	addi	sp,sp,-16
   4c260:	dfc00315 	stw	ra,12(sp)
   4c264:	df000215 	stw	fp,8(sp)
   4c268:	df000204 	addi	fp,sp,8
   4c26c:	e13ffe15 	stw	r4,-8(fp)
   4c270:	e17fff15 	stw	r5,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   4c274:	e13fff17 	ldw	r4,-4(fp)
   4c278:	01400084 	movi	r5,2
   4c27c:	004bf000 	call	4bf00 <altera_avalon_fifo_read_status>
   4c280:	1000031e 	bne	r2,zero,4c290 <altera_avalon_fifo_read_fifo+0x34>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   4c284:	e0bffe17 	ldw	r2,-8(fp)
   4c288:	10800037 	ldwio	r2,0(r2)
   4c28c:	00000106 	br	4c294 <altera_avalon_fifo_read_fifo+0x38>
    }
    return 0;
   4c290:	0005883a 	mov	r2,zero
}
   4c294:	e037883a 	mov	sp,fp
   4c298:	dfc00117 	ldw	ra,4(sp)
   4c29c:	df000017 	ldw	fp,0(sp)
   4c2a0:	dec00204 	addi	sp,sp,8
   4c2a4:	f800283a 	ret

0004c2a8 <altera_avalon_fifo_write_other_info>:

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
   4c2a8:	defffb04 	addi	sp,sp,-20
   4c2ac:	dfc00415 	stw	ra,16(sp)
   4c2b0:	df000315 	stw	fp,12(sp)
   4c2b4:	df000304 	addi	fp,sp,12
   4c2b8:	e13ffd15 	stw	r4,-12(fp)
   4c2bc:	e17ffe15 	stw	r5,-8(fp)
   4c2c0:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   4c2c4:	e13ffe17 	ldw	r4,-8(fp)
   4c2c8:	01400044 	movi	r5,1
   4c2cc:	004bf000 	call	4bf00 <altera_avalon_fifo_read_status>
   4c2d0:	1000061e 	bne	r2,zero,4c2ec <altera_avalon_fifo_write_other_info+0x44>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
   4c2d4:	e0bffd17 	ldw	r2,-12(fp)
   4c2d8:	10800104 	addi	r2,r2,4
   4c2dc:	e0ffff17 	ldw	r3,-4(fp)
   4c2e0:	10c00035 	stwio	r3,0(r2)
	return ALTERA_AVALON_FIFO_OK;
   4c2e4:	0005883a 	mov	r2,zero
   4c2e8:	00000106 	br	4c2f0 <altera_avalon_fifo_write_other_info+0x48>
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
   4c2ec:	00bfff04 	movi	r2,-4
    }
}
   4c2f0:	e037883a 	mov	sp,fp
   4c2f4:	dfc00117 	ldw	ra,4(sp)
   4c2f8:	df000017 	ldw	fp,0(sp)
   4c2fc:	dec00204 	addi	sp,sp,8
   4c300:	f800283a 	ret

0004c304 <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
   4c304:	defffe04 	addi	sp,sp,-8
   4c308:	df000115 	stw	fp,4(sp)
   4c30c:	df000104 	addi	fp,sp,4
   4c310:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
   4c314:	e0bfff17 	ldw	r2,-4(fp)
   4c318:	10800104 	addi	r2,r2,4
   4c31c:	10800037 	ldwio	r2,0(r2)
}
   4c320:	e037883a 	mov	sp,fp
   4c324:	df000017 	ldw	fp,0(sp)
   4c328:	dec00104 	addi	sp,sp,4
   4c32c:	f800283a 	ret

0004c330 <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
   4c330:	defffe04 	addi	sp,sp,-8
   4c334:	df000115 	stw	fp,4(sp)
   4c338:	df000104 	addi	fp,sp,4
   4c33c:	e13fff15 	stw	r4,-4(fp)
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
   4c340:	e0bfff17 	ldw	r2,-4(fp)
   4c344:	10800037 	ldwio	r2,0(r2)
}
   4c348:	e037883a 	mov	sp,fp
   4c34c:	df000017 	ldw	fp,0(sp)
   4c350:	dec00104 	addi	sp,sp,4
   4c354:	f800283a 	ret

0004c358 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   4c358:	defffa04 	addi	sp,sp,-24
   4c35c:	dfc00515 	stw	ra,20(sp)
   4c360:	df000415 	stw	fp,16(sp)
   4c364:	df000404 	addi	fp,sp,16
   4c368:	e13ffd15 	stw	r4,-12(fp)
   4c36c:	e17ffe15 	stw	r5,-8(fp)
   4c370:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4c374:	e0bffd17 	ldw	r2,-12(fp)
   4c378:	10800017 	ldw	r2,0(r2)
   4c37c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   4c380:	e0bffc17 	ldw	r2,-16(fp)
   4c384:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   4c388:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   4c38c:	10800217 	ldw	r2,8(r2)
   4c390:	1809883a 	mov	r4,r3
   4c394:	e17ffe17 	ldw	r5,-8(fp)
   4c398:	e1bfff17 	ldw	r6,-4(fp)
   4c39c:	100f883a 	mov	r7,r2
   4c3a0:	004c9800 	call	4c980 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   4c3a4:	e037883a 	mov	sp,fp
   4c3a8:	dfc00117 	ldw	ra,4(sp)
   4c3ac:	df000017 	ldw	fp,0(sp)
   4c3b0:	dec00204 	addi	sp,sp,8
   4c3b4:	f800283a 	ret

0004c3b8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   4c3b8:	defffa04 	addi	sp,sp,-24
   4c3bc:	dfc00515 	stw	ra,20(sp)
   4c3c0:	df000415 	stw	fp,16(sp)
   4c3c4:	df000404 	addi	fp,sp,16
   4c3c8:	e13ffd15 	stw	r4,-12(fp)
   4c3cc:	e17ffe15 	stw	r5,-8(fp)
   4c3d0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4c3d4:	e0bffd17 	ldw	r2,-12(fp)
   4c3d8:	10800017 	ldw	r2,0(r2)
   4c3dc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   4c3e0:	e0bffc17 	ldw	r2,-16(fp)
   4c3e4:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   4c3e8:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   4c3ec:	10800217 	ldw	r2,8(r2)
   4c3f0:	1809883a 	mov	r4,r3
   4c3f4:	e17ffe17 	ldw	r5,-8(fp)
   4c3f8:	e1bfff17 	ldw	r6,-4(fp)
   4c3fc:	100f883a 	mov	r7,r2
   4c400:	004cb980 	call	4cb98 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   4c404:	e037883a 	mov	sp,fp
   4c408:	dfc00117 	ldw	ra,4(sp)
   4c40c:	df000017 	ldw	fp,0(sp)
   4c410:	dec00204 	addi	sp,sp,8
   4c414:	f800283a 	ret

0004c418 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   4c418:	defffc04 	addi	sp,sp,-16
   4c41c:	dfc00315 	stw	ra,12(sp)
   4c420:	df000215 	stw	fp,8(sp)
   4c424:	df000204 	addi	fp,sp,8
   4c428:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4c42c:	e0bfff17 	ldw	r2,-4(fp)
   4c430:	10800017 	ldw	r2,0(r2)
   4c434:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   4c438:	e0bffe17 	ldw	r2,-8(fp)
   4c43c:	10c00a04 	addi	r3,r2,40
   4c440:	e0bfff17 	ldw	r2,-4(fp)
   4c444:	10800217 	ldw	r2,8(r2)
   4c448:	1809883a 	mov	r4,r3
   4c44c:	100b883a 	mov	r5,r2
   4c450:	004c8240 	call	4c824 <altera_avalon_jtag_uart_close>
}
   4c454:	e037883a 	mov	sp,fp
   4c458:	dfc00117 	ldw	ra,4(sp)
   4c45c:	df000017 	ldw	fp,0(sp)
   4c460:	dec00204 	addi	sp,sp,8
   4c464:	f800283a 	ret

0004c468 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   4c468:	defffa04 	addi	sp,sp,-24
   4c46c:	dfc00515 	stw	ra,20(sp)
   4c470:	df000415 	stw	fp,16(sp)
   4c474:	df000404 	addi	fp,sp,16
   4c478:	e13ffd15 	stw	r4,-12(fp)
   4c47c:	e17ffe15 	stw	r5,-8(fp)
   4c480:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   4c484:	e0bffd17 	ldw	r2,-12(fp)
   4c488:	10800017 	ldw	r2,0(r2)
   4c48c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   4c490:	e0bffc17 	ldw	r2,-16(fp)
   4c494:	10800a04 	addi	r2,r2,40
   4c498:	1009883a 	mov	r4,r2
   4c49c:	e17ffe17 	ldw	r5,-8(fp)
   4c4a0:	e1bfff17 	ldw	r6,-4(fp)
   4c4a4:	004c88c0 	call	4c88c <altera_avalon_jtag_uart_ioctl>
}
   4c4a8:	e037883a 	mov	sp,fp
   4c4ac:	dfc00117 	ldw	ra,4(sp)
   4c4b0:	df000017 	ldw	fp,0(sp)
   4c4b4:	dec00204 	addi	sp,sp,8
   4c4b8:	f800283a 	ret

0004c4bc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   4c4bc:	defffa04 	addi	sp,sp,-24
   4c4c0:	dfc00515 	stw	ra,20(sp)
   4c4c4:	df000415 	stw	fp,16(sp)
   4c4c8:	df000404 	addi	fp,sp,16
   4c4cc:	e13ffd15 	stw	r4,-12(fp)
   4c4d0:	e17ffe15 	stw	r5,-8(fp)
   4c4d4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4c4d8:	e0bffd17 	ldw	r2,-12(fp)
   4c4dc:	00c00044 	movi	r3,1
   4c4e0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   4c4e4:	e0bffd17 	ldw	r2,-12(fp)
   4c4e8:	10800017 	ldw	r2,0(r2)
   4c4ec:	10800104 	addi	r2,r2,4
   4c4f0:	e0fffd17 	ldw	r3,-12(fp)
   4c4f4:	18c00817 	ldw	r3,32(r3)
   4c4f8:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   4c4fc:	e0fffe17 	ldw	r3,-8(fp)
   4c500:	e0bfff17 	ldw	r2,-4(fp)
   4c504:	d8000015 	stw	zero,0(sp)
   4c508:	1809883a 	mov	r4,r3
   4c50c:	100b883a 	mov	r5,r2
   4c510:	01800174 	movhi	r6,5
   4c514:	31b15f04 	addi	r6,r6,-14980
   4c518:	e1fffd17 	ldw	r7,-12(fp)
   4c51c:	004dafc0 	call	4dafc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   4c520:	e0bffd17 	ldw	r2,-12(fp)
   4c524:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   4c528:	e0bffd17 	ldw	r2,-12(fp)
   4c52c:	10c00204 	addi	r3,r2,8
   4c530:	00800174 	movhi	r2,5
   4c534:	10879104 	addi	r2,r2,7748
   4c538:	10800017 	ldw	r2,0(r2)
   4c53c:	1809883a 	mov	r4,r3
   4c540:	100b883a 	mov	r5,r2
   4c544:	01800174 	movhi	r6,5
   4c548:	31b1e004 	addi	r6,r6,-14464
   4c54c:	e1fffd17 	ldw	r7,-12(fp)
   4c550:	004d4e00 	call	4d4e0 <alt_alarm_start>
   4c554:	1000040e 	bge	r2,zero,4c568 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   4c558:	e0bffd17 	ldw	r2,-12(fp)
   4c55c:	00e00034 	movhi	r3,32768
   4c560:	18ffffc4 	addi	r3,r3,-1
   4c564:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   4c568:	e037883a 	mov	sp,fp
   4c56c:	dfc00117 	ldw	ra,4(sp)
   4c570:	df000017 	ldw	fp,0(sp)
   4c574:	dec00204 	addi	sp,sp,8
   4c578:	f800283a 	ret

0004c57c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   4c57c:	defff804 	addi	sp,sp,-32
   4c580:	df000715 	stw	fp,28(sp)
   4c584:	df000704 	addi	fp,sp,28
   4c588:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   4c58c:	e0bfff17 	ldw	r2,-4(fp)
   4c590:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   4c594:	e0bffb17 	ldw	r2,-20(fp)
   4c598:	10800017 	ldw	r2,0(r2)
   4c59c:	e0bffc15 	stw	r2,-16(fp)
   4c5a0:	00000106 	br	4c5a8 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
   4c5a4:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4c5a8:	e0bffc17 	ldw	r2,-16(fp)
   4c5ac:	10800104 	addi	r2,r2,4
   4c5b0:	10800037 	ldwio	r2,0(r2)
   4c5b4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   4c5b8:	e0bffd17 	ldw	r2,-12(fp)
   4c5bc:	1080c00c 	andi	r2,r2,768
   4c5c0:	10006a26 	beq	r2,zero,4c76c <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   4c5c4:	e0bffd17 	ldw	r2,-12(fp)
   4c5c8:	1080400c 	andi	r2,r2,256
   4c5cc:	10003326 	beq	r2,zero,4c69c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   4c5d0:	00800074 	movhi	r2,1
   4c5d4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4c5d8:	e0bffb17 	ldw	r2,-20(fp)
   4c5dc:	10800a17 	ldw	r2,40(r2)
   4c5e0:	10800044 	addi	r2,r2,1
   4c5e4:	1081ffcc 	andi	r2,r2,2047
   4c5e8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   4c5ec:	e0bffb17 	ldw	r2,-20(fp)
   4c5f0:	10c00b17 	ldw	r3,44(r2)
   4c5f4:	e0bffe17 	ldw	r2,-8(fp)
   4c5f8:	18801426 	beq	r3,r2,4c64c <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   4c5fc:	e0bffc17 	ldw	r2,-16(fp)
   4c600:	10800037 	ldwio	r2,0(r2)
   4c604:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   4c608:	e0bff917 	ldw	r2,-28(fp)
   4c60c:	10a0000c 	andi	r2,r2,32768
   4c610:	10001026 	beq	r2,zero,4c654 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   4c614:	e0bffb17 	ldw	r2,-20(fp)
   4c618:	10800a17 	ldw	r2,40(r2)
   4c61c:	e0fff917 	ldw	r3,-28(fp)
   4c620:	e13ffb17 	ldw	r4,-20(fp)
   4c624:	2085883a 	add	r2,r4,r2
   4c628:	10800e04 	addi	r2,r2,56
   4c62c:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4c630:	e0bffb17 	ldw	r2,-20(fp)
   4c634:	10800a17 	ldw	r2,40(r2)
   4c638:	10800044 	addi	r2,r2,1
   4c63c:	10c1ffcc 	andi	r3,r2,2047
   4c640:	e0bffb17 	ldw	r2,-20(fp)
   4c644:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   4c648:	003fe306 	br	4c5d8 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   4c64c:	0001883a 	nop
   4c650:	00000106 	br	4c658 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   4c654:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   4c658:	e0bff917 	ldw	r2,-28(fp)
   4c65c:	10bfffec 	andhi	r2,r2,65535
   4c660:	10000e26 	beq	r2,zero,4c69c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4c664:	e0bffb17 	ldw	r2,-20(fp)
   4c668:	10c00817 	ldw	r3,32(r2)
   4c66c:	00bfff84 	movi	r2,-2
   4c670:	1886703a 	and	r3,r3,r2
   4c674:	e0bffb17 	ldw	r2,-20(fp)
   4c678:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   4c67c:	e0bffc17 	ldw	r2,-16(fp)
   4c680:	10800104 	addi	r2,r2,4
   4c684:	e0fffb17 	ldw	r3,-20(fp)
   4c688:	18c00817 	ldw	r3,32(r3)
   4c68c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4c690:	e0bffc17 	ldw	r2,-16(fp)
   4c694:	10800104 	addi	r2,r2,4
   4c698:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   4c69c:	e0bffd17 	ldw	r2,-12(fp)
   4c6a0:	1080800c 	andi	r2,r2,512
   4c6a4:	103fbf26 	beq	r2,zero,4c5a4 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   4c6a8:	e0bffd17 	ldw	r2,-12(fp)
   4c6ac:	1004d43a 	srli	r2,r2,16
   4c6b0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   4c6b4:	00001406 	br	4c708 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   4c6b8:	e0bffc17 	ldw	r2,-16(fp)
   4c6bc:	e0fffb17 	ldw	r3,-20(fp)
   4c6c0:	18c00d17 	ldw	r3,52(r3)
   4c6c4:	e13ffb17 	ldw	r4,-20(fp)
   4c6c8:	20c7883a 	add	r3,r4,r3
   4c6cc:	18c20e04 	addi	r3,r3,2104
   4c6d0:	18c00003 	ldbu	r3,0(r3)
   4c6d4:	18c03fcc 	andi	r3,r3,255
   4c6d8:	18c0201c 	xori	r3,r3,128
   4c6dc:	18ffe004 	addi	r3,r3,-128
   4c6e0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4c6e4:	e0bffb17 	ldw	r2,-20(fp)
   4c6e8:	10800d17 	ldw	r2,52(r2)
   4c6ec:	10800044 	addi	r2,r2,1
   4c6f0:	10c1ffcc 	andi	r3,r2,2047
   4c6f4:	e0bffb17 	ldw	r2,-20(fp)
   4c6f8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   4c6fc:	e0bffa17 	ldw	r2,-24(fp)
   4c700:	10bfffc4 	addi	r2,r2,-1
   4c704:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   4c708:	e0bffa17 	ldw	r2,-24(fp)
   4c70c:	10000526 	beq	r2,zero,4c724 <altera_avalon_jtag_uart_irq+0x1a8>
   4c710:	e0bffb17 	ldw	r2,-20(fp)
   4c714:	10c00d17 	ldw	r3,52(r2)
   4c718:	e0bffb17 	ldw	r2,-20(fp)
   4c71c:	10800c17 	ldw	r2,48(r2)
   4c720:	18bfe51e 	bne	r3,r2,4c6b8 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   4c724:	e0bffa17 	ldw	r2,-24(fp)
   4c728:	103f9e26 	beq	r2,zero,4c5a4 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4c72c:	e0bffb17 	ldw	r2,-20(fp)
   4c730:	10c00817 	ldw	r3,32(r2)
   4c734:	00bfff44 	movi	r2,-3
   4c738:	1886703a 	and	r3,r3,r2
   4c73c:	e0bffb17 	ldw	r2,-20(fp)
   4c740:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4c744:	e0bffb17 	ldw	r2,-20(fp)
   4c748:	10800017 	ldw	r2,0(r2)
   4c74c:	10800104 	addi	r2,r2,4
   4c750:	e0fffb17 	ldw	r3,-20(fp)
   4c754:	18c00817 	ldw	r3,32(r3)
   4c758:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4c75c:	e0bffc17 	ldw	r2,-16(fp)
   4c760:	10800104 	addi	r2,r2,4
   4c764:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   4c768:	003f8e06 	br	4c5a4 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   4c76c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   4c770:	e037883a 	mov	sp,fp
   4c774:	df000017 	ldw	fp,0(sp)
   4c778:	dec00104 	addi	sp,sp,4
   4c77c:	f800283a 	ret

0004c780 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   4c780:	defffc04 	addi	sp,sp,-16
   4c784:	df000315 	stw	fp,12(sp)
   4c788:	df000304 	addi	fp,sp,12
   4c78c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   4c790:	e0bfff17 	ldw	r2,-4(fp)
   4c794:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   4c798:	e0bffd17 	ldw	r2,-12(fp)
   4c79c:	10800017 	ldw	r2,0(r2)
   4c7a0:	10800104 	addi	r2,r2,4
   4c7a4:	10800037 	ldwio	r2,0(r2)
   4c7a8:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   4c7ac:	e0bffe17 	ldw	r2,-8(fp)
   4c7b0:	1081000c 	andi	r2,r2,1024
   4c7b4:	10000a26 	beq	r2,zero,4c7e0 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   4c7b8:	e0bffd17 	ldw	r2,-12(fp)
   4c7bc:	10800017 	ldw	r2,0(r2)
   4c7c0:	10800104 	addi	r2,r2,4
   4c7c4:	e0fffd17 	ldw	r3,-12(fp)
   4c7c8:	18c00817 	ldw	r3,32(r3)
   4c7cc:	18c10014 	ori	r3,r3,1024
   4c7d0:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   4c7d4:	e0bffd17 	ldw	r2,-12(fp)
   4c7d8:	10000915 	stw	zero,36(r2)
   4c7dc:	00000a06 	br	4c808 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   4c7e0:	e0bffd17 	ldw	r2,-12(fp)
   4c7e4:	10800917 	ldw	r2,36(r2)
   4c7e8:	00e00034 	movhi	r3,32768
   4c7ec:	18ffff04 	addi	r3,r3,-4
   4c7f0:	18800536 	bltu	r3,r2,4c808 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
   4c7f4:	e0bffd17 	ldw	r2,-12(fp)
   4c7f8:	10800917 	ldw	r2,36(r2)
   4c7fc:	10c00044 	addi	r3,r2,1
   4c800:	e0bffd17 	ldw	r2,-12(fp)
   4c804:	10c00915 	stw	r3,36(r2)
   4c808:	00800174 	movhi	r2,5
   4c80c:	10879104 	addi	r2,r2,7748
   4c810:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   4c814:	e037883a 	mov	sp,fp
   4c818:	df000017 	ldw	fp,0(sp)
   4c81c:	dec00104 	addi	sp,sp,4
   4c820:	f800283a 	ret

0004c824 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   4c824:	defffd04 	addi	sp,sp,-12
   4c828:	df000215 	stw	fp,8(sp)
   4c82c:	df000204 	addi	fp,sp,8
   4c830:	e13ffe15 	stw	r4,-8(fp)
   4c834:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4c838:	00000506 	br	4c850 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   4c83c:	e0bfff17 	ldw	r2,-4(fp)
   4c840:	1090000c 	andi	r2,r2,16384
   4c844:	10000226 	beq	r2,zero,4c850 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   4c848:	00bffd44 	movi	r2,-11
   4c84c:	00000b06 	br	4c87c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4c850:	e0bffe17 	ldw	r2,-8(fp)
   4c854:	10c00d17 	ldw	r3,52(r2)
   4c858:	e0bffe17 	ldw	r2,-8(fp)
   4c85c:	10800c17 	ldw	r2,48(r2)
   4c860:	18800526 	beq	r3,r2,4c878 <altera_avalon_jtag_uart_close+0x54>
   4c864:	e0bffe17 	ldw	r2,-8(fp)
   4c868:	10c00917 	ldw	r3,36(r2)
   4c86c:	e0bffe17 	ldw	r2,-8(fp)
   4c870:	10800117 	ldw	r2,4(r2)
   4c874:	18bff136 	bltu	r3,r2,4c83c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   4c878:	0005883a 	mov	r2,zero
}
   4c87c:	e037883a 	mov	sp,fp
   4c880:	df000017 	ldw	fp,0(sp)
   4c884:	dec00104 	addi	sp,sp,4
   4c888:	f800283a 	ret

0004c88c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   4c88c:	defffa04 	addi	sp,sp,-24
   4c890:	df000515 	stw	fp,20(sp)
   4c894:	df000504 	addi	fp,sp,20
   4c898:	e13ffd15 	stw	r4,-12(fp)
   4c89c:	e17ffe15 	stw	r5,-8(fp)
   4c8a0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   4c8a4:	00bff9c4 	movi	r2,-25
   4c8a8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   4c8ac:	e0bffe17 	ldw	r2,-8(fp)
   4c8b0:	10da8060 	cmpeqi	r3,r2,27137
   4c8b4:	1800031e 	bne	r3,zero,4c8c4 <altera_avalon_jtag_uart_ioctl+0x38>
   4c8b8:	109a80a0 	cmpeqi	r2,r2,27138
   4c8bc:	1000181e 	bne	r2,zero,4c920 <altera_avalon_jtag_uart_ioctl+0x94>
   4c8c0:	00002606 	br	4c95c <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   4c8c4:	e0bffd17 	ldw	r2,-12(fp)
   4c8c8:	10c00117 	ldw	r3,4(r2)
   4c8cc:	00a00034 	movhi	r2,32768
   4c8d0:	10bfffc4 	addi	r2,r2,-1
   4c8d4:	18802226 	beq	r3,r2,4c960 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
   4c8d8:	e0bfff17 	ldw	r2,-4(fp)
   4c8dc:	10800017 	ldw	r2,0(r2)
   4c8e0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   4c8e4:	e0bffc17 	ldw	r2,-16(fp)
   4c8e8:	10800090 	cmplti	r2,r2,2
   4c8ec:	1000061e 	bne	r2,zero,4c908 <altera_avalon_jtag_uart_ioctl+0x7c>
   4c8f0:	e0fffc17 	ldw	r3,-16(fp)
   4c8f4:	00a00034 	movhi	r2,32768
   4c8f8:	10bfffc4 	addi	r2,r2,-1
   4c8fc:	18800226 	beq	r3,r2,4c908 <altera_avalon_jtag_uart_ioctl+0x7c>
   4c900:	e0bffc17 	ldw	r2,-16(fp)
   4c904:	00000206 	br	4c910 <altera_avalon_jtag_uart_ioctl+0x84>
   4c908:	00a00034 	movhi	r2,32768
   4c90c:	10bfff84 	addi	r2,r2,-2
   4c910:	e0fffd17 	ldw	r3,-12(fp)
   4c914:	18800115 	stw	r2,4(r3)
      rc = 0;
   4c918:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   4c91c:	00001006 	br	4c960 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   4c920:	e0bffd17 	ldw	r2,-12(fp)
   4c924:	10c00117 	ldw	r3,4(r2)
   4c928:	00a00034 	movhi	r2,32768
   4c92c:	10bfffc4 	addi	r2,r2,-1
   4c930:	18800d26 	beq	r3,r2,4c968 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   4c934:	e0bffd17 	ldw	r2,-12(fp)
   4c938:	10c00917 	ldw	r3,36(r2)
   4c93c:	e0bffd17 	ldw	r2,-12(fp)
   4c940:	10800117 	ldw	r2,4(r2)
   4c944:	1885803a 	cmpltu	r2,r3,r2
   4c948:	10c03fcc 	andi	r3,r2,255
   4c94c:	e0bfff17 	ldw	r2,-4(fp)
   4c950:	10c00015 	stw	r3,0(r2)
      rc = 0;
   4c954:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   4c958:	00000306 	br	4c968 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
   4c95c:	00000306 	br	4c96c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   4c960:	0001883a 	nop
   4c964:	00000106 	br	4c96c <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   4c968:	0001883a 	nop

  default:
    break;
  }

  return rc;
   4c96c:	e0bffb17 	ldw	r2,-20(fp)
}
   4c970:	e037883a 	mov	sp,fp
   4c974:	df000017 	ldw	fp,0(sp)
   4c978:	dec00104 	addi	sp,sp,4
   4c97c:	f800283a 	ret

0004c980 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   4c980:	defff304 	addi	sp,sp,-52
   4c984:	dfc00c15 	stw	ra,48(sp)
   4c988:	df000b15 	stw	fp,44(sp)
   4c98c:	df000b04 	addi	fp,sp,44
   4c990:	e13ffc15 	stw	r4,-16(fp)
   4c994:	e17ffd15 	stw	r5,-12(fp)
   4c998:	e1bffe15 	stw	r6,-8(fp)
   4c99c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   4c9a0:	e0bffd17 	ldw	r2,-12(fp)
   4c9a4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   4c9a8:	00004706 	br	4cac8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   4c9ac:	e0bffc17 	ldw	r2,-16(fp)
   4c9b0:	10800a17 	ldw	r2,40(r2)
   4c9b4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   4c9b8:	e0bffc17 	ldw	r2,-16(fp)
   4c9bc:	10800b17 	ldw	r2,44(r2)
   4c9c0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   4c9c4:	e0fff717 	ldw	r3,-36(fp)
   4c9c8:	e0bff817 	ldw	r2,-32(fp)
   4c9cc:	18800536 	bltu	r3,r2,4c9e4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   4c9d0:	e0fff717 	ldw	r3,-36(fp)
   4c9d4:	e0bff817 	ldw	r2,-32(fp)
   4c9d8:	1885c83a 	sub	r2,r3,r2
   4c9dc:	e0bff615 	stw	r2,-40(fp)
   4c9e0:	00000406 	br	4c9f4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   4c9e4:	00c20004 	movi	r3,2048
   4c9e8:	e0bff817 	ldw	r2,-32(fp)
   4c9ec:	1885c83a 	sub	r2,r3,r2
   4c9f0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   4c9f4:	e0bff617 	ldw	r2,-40(fp)
   4c9f8:	10001e26 	beq	r2,zero,4ca74 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   4c9fc:	e0fffe17 	ldw	r3,-8(fp)
   4ca00:	e0bff617 	ldw	r2,-40(fp)
   4ca04:	1880022e 	bgeu	r3,r2,4ca10 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   4ca08:	e0bffe17 	ldw	r2,-8(fp)
   4ca0c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   4ca10:	e0bff817 	ldw	r2,-32(fp)
   4ca14:	10800e04 	addi	r2,r2,56
   4ca18:	e0fffc17 	ldw	r3,-16(fp)
   4ca1c:	1885883a 	add	r2,r3,r2
   4ca20:	e13ff517 	ldw	r4,-44(fp)
   4ca24:	100b883a 	mov	r5,r2
   4ca28:	e1bff617 	ldw	r6,-40(fp)
   4ca2c:	00478e80 	call	478e8 <memcpy>
      ptr   += n;
   4ca30:	e0fff517 	ldw	r3,-44(fp)
   4ca34:	e0bff617 	ldw	r2,-40(fp)
   4ca38:	1885883a 	add	r2,r3,r2
   4ca3c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   4ca40:	e0fffe17 	ldw	r3,-8(fp)
   4ca44:	e0bff617 	ldw	r2,-40(fp)
   4ca48:	1885c83a 	sub	r2,r3,r2
   4ca4c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4ca50:	e0fff817 	ldw	r3,-32(fp)
   4ca54:	e0bff617 	ldw	r2,-40(fp)
   4ca58:	1885883a 	add	r2,r3,r2
   4ca5c:	10c1ffcc 	andi	r3,r2,2047
   4ca60:	e0bffc17 	ldw	r2,-16(fp)
   4ca64:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   4ca68:	e0bffe17 	ldw	r2,-8(fp)
   4ca6c:	00bfcf16 	blt	zero,r2,4c9ac <altera_avalon_jtag_uart_read+0x2c>
   4ca70:	00000106 	br	4ca78 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   4ca74:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   4ca78:	e0fff517 	ldw	r3,-44(fp)
   4ca7c:	e0bffd17 	ldw	r2,-12(fp)
   4ca80:	1880141e 	bne	r3,r2,4cad4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   4ca84:	e0bfff17 	ldw	r2,-4(fp)
   4ca88:	1090000c 	andi	r2,r2,16384
   4ca8c:	1000131e 	bne	r2,zero,4cadc <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   4ca90:	0001883a 	nop
   4ca94:	e0bffc17 	ldw	r2,-16(fp)
   4ca98:	10c00a17 	ldw	r3,40(r2)
   4ca9c:	e0bff717 	ldw	r2,-36(fp)
   4caa0:	1880051e 	bne	r3,r2,4cab8 <altera_avalon_jtag_uart_read+0x138>
   4caa4:	e0bffc17 	ldw	r2,-16(fp)
   4caa8:	10c00917 	ldw	r3,36(r2)
   4caac:	e0bffc17 	ldw	r2,-16(fp)
   4cab0:	10800117 	ldw	r2,4(r2)
   4cab4:	18bff736 	bltu	r3,r2,4ca94 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   4cab8:	e0bffc17 	ldw	r2,-16(fp)
   4cabc:	10c00a17 	ldw	r3,40(r2)
   4cac0:	e0bff717 	ldw	r2,-36(fp)
   4cac4:	18800726 	beq	r3,r2,4cae4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   4cac8:	e0bffe17 	ldw	r2,-8(fp)
   4cacc:	00bfb716 	blt	zero,r2,4c9ac <altera_avalon_jtag_uart_read+0x2c>
   4cad0:	00000506 	br	4cae8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   4cad4:	0001883a 	nop
   4cad8:	00000306 	br	4cae8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   4cadc:	0001883a 	nop
   4cae0:	00000106 	br	4cae8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   4cae4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   4cae8:	e0fff517 	ldw	r3,-44(fp)
   4caec:	e0bffd17 	ldw	r2,-12(fp)
   4caf0:	18801726 	beq	r3,r2,4cb50 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4caf4:	0005303a 	rdctl	r2,status
   4caf8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4cafc:	e0fffa17 	ldw	r3,-24(fp)
   4cb00:	00bfff84 	movi	r2,-2
   4cb04:	1884703a 	and	r2,r3,r2
   4cb08:	1001703a 	wrctl	status,r2
  
  return context;
   4cb0c:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   4cb10:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4cb14:	e0bffc17 	ldw	r2,-16(fp)
   4cb18:	10800817 	ldw	r2,32(r2)
   4cb1c:	10c00054 	ori	r3,r2,1
   4cb20:	e0bffc17 	ldw	r2,-16(fp)
   4cb24:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4cb28:	e0bffc17 	ldw	r2,-16(fp)
   4cb2c:	10800017 	ldw	r2,0(r2)
   4cb30:	10800104 	addi	r2,r2,4
   4cb34:	e0fffc17 	ldw	r3,-16(fp)
   4cb38:	18c00817 	ldw	r3,32(r3)
   4cb3c:	10c00035 	stwio	r3,0(r2)
   4cb40:	e0bff917 	ldw	r2,-28(fp)
   4cb44:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4cb48:	e0bffb17 	ldw	r2,-20(fp)
   4cb4c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   4cb50:	e0fff517 	ldw	r3,-44(fp)
   4cb54:	e0bffd17 	ldw	r2,-12(fp)
   4cb58:	18800426 	beq	r3,r2,4cb6c <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
   4cb5c:	e0fff517 	ldw	r3,-44(fp)
   4cb60:	e0bffd17 	ldw	r2,-12(fp)
   4cb64:	1885c83a 	sub	r2,r3,r2
   4cb68:	00000606 	br	4cb84 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
   4cb6c:	e0bfff17 	ldw	r2,-4(fp)
   4cb70:	1090000c 	andi	r2,r2,16384
   4cb74:	10000226 	beq	r2,zero,4cb80 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
   4cb78:	00bffd44 	movi	r2,-11
   4cb7c:	00000106 	br	4cb84 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
   4cb80:	00bffec4 	movi	r2,-5
}
   4cb84:	e037883a 	mov	sp,fp
   4cb88:	dfc00117 	ldw	ra,4(sp)
   4cb8c:	df000017 	ldw	fp,0(sp)
   4cb90:	dec00204 	addi	sp,sp,8
   4cb94:	f800283a 	ret

0004cb98 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   4cb98:	defff304 	addi	sp,sp,-52
   4cb9c:	dfc00c15 	stw	ra,48(sp)
   4cba0:	df000b15 	stw	fp,44(sp)
   4cba4:	df000b04 	addi	fp,sp,44
   4cba8:	e13ffc15 	stw	r4,-16(fp)
   4cbac:	e17ffd15 	stw	r5,-12(fp)
   4cbb0:	e1bffe15 	stw	r6,-8(fp)
   4cbb4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   4cbb8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   4cbbc:	e0bffd17 	ldw	r2,-12(fp)
   4cbc0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4cbc4:	00003706 	br	4cca4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   4cbc8:	e0bffc17 	ldw	r2,-16(fp)
   4cbcc:	10800c17 	ldw	r2,48(r2)
   4cbd0:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   4cbd4:	e0bffc17 	ldw	r2,-16(fp)
   4cbd8:	10800d17 	ldw	r2,52(r2)
   4cbdc:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   4cbe0:	e0fff817 	ldw	r3,-32(fp)
   4cbe4:	e0bff517 	ldw	r2,-44(fp)
   4cbe8:	1880062e 	bgeu	r3,r2,4cc04 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   4cbec:	e0fff517 	ldw	r3,-44(fp)
   4cbf0:	e0bff817 	ldw	r2,-32(fp)
   4cbf4:	1885c83a 	sub	r2,r3,r2
   4cbf8:	10bfffc4 	addi	r2,r2,-1
   4cbfc:	e0bff615 	stw	r2,-40(fp)
   4cc00:	00000b06 	br	4cc30 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   4cc04:	e0bff517 	ldw	r2,-44(fp)
   4cc08:	10000526 	beq	r2,zero,4cc20 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   4cc0c:	00c20004 	movi	r3,2048
   4cc10:	e0bff817 	ldw	r2,-32(fp)
   4cc14:	1885c83a 	sub	r2,r3,r2
   4cc18:	e0bff615 	stw	r2,-40(fp)
   4cc1c:	00000406 	br	4cc30 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   4cc20:	00c1ffc4 	movi	r3,2047
   4cc24:	e0bff817 	ldw	r2,-32(fp)
   4cc28:	1885c83a 	sub	r2,r3,r2
   4cc2c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   4cc30:	e0bff617 	ldw	r2,-40(fp)
   4cc34:	10001e26 	beq	r2,zero,4ccb0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   4cc38:	e0fffe17 	ldw	r3,-8(fp)
   4cc3c:	e0bff617 	ldw	r2,-40(fp)
   4cc40:	1880022e 	bgeu	r3,r2,4cc4c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   4cc44:	e0bffe17 	ldw	r2,-8(fp)
   4cc48:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   4cc4c:	e0bff817 	ldw	r2,-32(fp)
   4cc50:	10820e04 	addi	r2,r2,2104
   4cc54:	e0fffc17 	ldw	r3,-16(fp)
   4cc58:	1885883a 	add	r2,r3,r2
   4cc5c:	1009883a 	mov	r4,r2
   4cc60:	e17ffd17 	ldw	r5,-12(fp)
   4cc64:	e1bff617 	ldw	r6,-40(fp)
   4cc68:	00478e80 	call	478e8 <memcpy>
      ptr   += n;
   4cc6c:	e0fffd17 	ldw	r3,-12(fp)
   4cc70:	e0bff617 	ldw	r2,-40(fp)
   4cc74:	1885883a 	add	r2,r3,r2
   4cc78:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   4cc7c:	e0fffe17 	ldw	r3,-8(fp)
   4cc80:	e0bff617 	ldw	r2,-40(fp)
   4cc84:	1885c83a 	sub	r2,r3,r2
   4cc88:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4cc8c:	e0fff817 	ldw	r3,-32(fp)
   4cc90:	e0bff617 	ldw	r2,-40(fp)
   4cc94:	1885883a 	add	r2,r3,r2
   4cc98:	10c1ffcc 	andi	r3,r2,2047
   4cc9c:	e0bffc17 	ldw	r2,-16(fp)
   4cca0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4cca4:	e0bffe17 	ldw	r2,-8(fp)
   4cca8:	00bfc716 	blt	zero,r2,4cbc8 <altera_avalon_jtag_uart_write+0x30>
   4ccac:	00000106 	br	4ccb4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   4ccb0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4ccb4:	0005303a 	rdctl	r2,status
   4ccb8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4ccbc:	e0fffa17 	ldw	r3,-24(fp)
   4ccc0:	00bfff84 	movi	r2,-2
   4ccc4:	1884703a 	and	r2,r3,r2
   4ccc8:	1001703a 	wrctl	status,r2
  
  return context;
   4cccc:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   4ccd0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4ccd4:	e0bffc17 	ldw	r2,-16(fp)
   4ccd8:	10800817 	ldw	r2,32(r2)
   4ccdc:	10c00094 	ori	r3,r2,2
   4cce0:	e0bffc17 	ldw	r2,-16(fp)
   4cce4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4cce8:	e0bffc17 	ldw	r2,-16(fp)
   4ccec:	10800017 	ldw	r2,0(r2)
   4ccf0:	10800104 	addi	r2,r2,4
   4ccf4:	e0fffc17 	ldw	r3,-16(fp)
   4ccf8:	18c00817 	ldw	r3,32(r3)
   4ccfc:	10c00035 	stwio	r3,0(r2)
   4cd00:	e0bff917 	ldw	r2,-28(fp)
   4cd04:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4cd08:	e0bffb17 	ldw	r2,-20(fp)
   4cd0c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   4cd10:	e0bffe17 	ldw	r2,-8(fp)
   4cd14:	0080110e 	bge	zero,r2,4cd5c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   4cd18:	e0bfff17 	ldw	r2,-4(fp)
   4cd1c:	1090000c 	andi	r2,r2,16384
   4cd20:	1000111e 	bne	r2,zero,4cd68 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   4cd24:	0001883a 	nop
   4cd28:	e0bffc17 	ldw	r2,-16(fp)
   4cd2c:	10c00d17 	ldw	r3,52(r2)
   4cd30:	e0bff517 	ldw	r2,-44(fp)
   4cd34:	1880051e 	bne	r3,r2,4cd4c <altera_avalon_jtag_uart_write+0x1b4>
   4cd38:	e0bffc17 	ldw	r2,-16(fp)
   4cd3c:	10c00917 	ldw	r3,36(r2)
   4cd40:	e0bffc17 	ldw	r2,-16(fp)
   4cd44:	10800117 	ldw	r2,4(r2)
   4cd48:	18bff736 	bltu	r3,r2,4cd28 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   4cd4c:	e0bffc17 	ldw	r2,-16(fp)
   4cd50:	10c00d17 	ldw	r3,52(r2)
   4cd54:	e0bff517 	ldw	r2,-44(fp)
   4cd58:	18800526 	beq	r3,r2,4cd70 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   4cd5c:	e0bffe17 	ldw	r2,-8(fp)
   4cd60:	00bfd016 	blt	zero,r2,4cca4 <altera_avalon_jtag_uart_write+0x10c>
   4cd64:	00000306 	br	4cd74 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   4cd68:	0001883a 	nop
   4cd6c:	00000106 	br	4cd74 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
   4cd70:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   4cd74:	e0fffd17 	ldw	r3,-12(fp)
   4cd78:	e0bff717 	ldw	r2,-36(fp)
   4cd7c:	18800426 	beq	r3,r2,4cd90 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   4cd80:	e0fffd17 	ldw	r3,-12(fp)
   4cd84:	e0bff717 	ldw	r2,-36(fp)
   4cd88:	1885c83a 	sub	r2,r3,r2
   4cd8c:	00000606 	br	4cda8 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   4cd90:	e0bfff17 	ldw	r2,-4(fp)
   4cd94:	1090000c 	andi	r2,r2,16384
   4cd98:	10000226 	beq	r2,zero,4cda4 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   4cd9c:	00bffd44 	movi	r2,-11
   4cda0:	00000106 	br	4cda8 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   4cda4:	00bffec4 	movi	r2,-5
}
   4cda8:	e037883a 	mov	sp,fp
   4cdac:	dfc00117 	ldw	ra,4(sp)
   4cdb0:	df000017 	ldw	fp,0(sp)
   4cdb4:	dec00204 	addi	sp,sp,8
   4cdb8:	f800283a 	ret

0004cdbc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   4cdbc:	defffa04 	addi	sp,sp,-24
   4cdc0:	dfc00515 	stw	ra,20(sp)
   4cdc4:	df000415 	stw	fp,16(sp)
   4cdc8:	df000404 	addi	fp,sp,16
   4cdcc:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   4cdd0:	0007883a 	mov	r3,zero
   4cdd4:	e0bfff17 	ldw	r2,-4(fp)
   4cdd8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   4cddc:	e0bfff17 	ldw	r2,-4(fp)
   4cde0:	10800104 	addi	r2,r2,4
   4cde4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4cde8:	0005303a 	rdctl	r2,status
   4cdec:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4cdf0:	e0fffd17 	ldw	r3,-12(fp)
   4cdf4:	00bfff84 	movi	r2,-2
   4cdf8:	1884703a 	and	r2,r3,r2
   4cdfc:	1001703a 	wrctl	status,r2
  
  return context;
   4ce00:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   4ce04:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   4ce08:	004dfb40 	call	4dfb4 <alt_tick>
   4ce0c:	e0bffc17 	ldw	r2,-16(fp)
   4ce10:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4ce14:	e0bffe17 	ldw	r2,-8(fp)
   4ce18:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   4ce1c:	e037883a 	mov	sp,fp
   4ce20:	dfc00117 	ldw	ra,4(sp)
   4ce24:	df000017 	ldw	fp,0(sp)
   4ce28:	dec00204 	addi	sp,sp,8
   4ce2c:	f800283a 	ret

0004ce30 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   4ce30:	defff804 	addi	sp,sp,-32
   4ce34:	dfc00715 	stw	ra,28(sp)
   4ce38:	df000615 	stw	fp,24(sp)
   4ce3c:	df000604 	addi	fp,sp,24
   4ce40:	e13ffc15 	stw	r4,-16(fp)
   4ce44:	e17ffd15 	stw	r5,-12(fp)
   4ce48:	e1bffe15 	stw	r6,-8(fp)
   4ce4c:	e1ffff15 	stw	r7,-4(fp)
   4ce50:	e0bfff17 	ldw	r2,-4(fp)
   4ce54:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   4ce58:	00800174 	movhi	r2,5
   4ce5c:	10879104 	addi	r2,r2,7748
   4ce60:	10800017 	ldw	r2,0(r2)
   4ce64:	1000041e 	bne	r2,zero,4ce78 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   4ce68:	00800174 	movhi	r2,5
   4ce6c:	10879104 	addi	r2,r2,7748
   4ce70:	e0fffb17 	ldw	r3,-20(fp)
   4ce74:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   4ce78:	e0bffc17 	ldw	r2,-16(fp)
   4ce7c:	10800104 	addi	r2,r2,4
   4ce80:	00c001c4 	movi	r3,7
   4ce84:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   4ce88:	d8000015 	stw	zero,0(sp)
   4ce8c:	e13ffd17 	ldw	r4,-12(fp)
   4ce90:	e17ffe17 	ldw	r5,-8(fp)
   4ce94:	01800174 	movhi	r6,5
   4ce98:	31b36f04 	addi	r6,r6,-12868
   4ce9c:	e1fffc17 	ldw	r7,-16(fp)
   4cea0:	004dafc0 	call	4dafc <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   4cea4:	e037883a 	mov	sp,fp
   4cea8:	dfc00117 	ldw	ra,4(sp)
   4ceac:	df000017 	ldw	fp,0(sp)
   4ceb0:	dec00204 	addi	sp,sp,8
   4ceb4:	f800283a 	ret

0004ceb8 <alt_hostfs_open>:
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
   4ceb8:	deffeb04 	addi	sp,sp,-84
   4cebc:	df001415 	stw	fp,80(sp)
   4cec0:	dc401315 	stw	r17,76(sp)
   4cec4:	dc001215 	stw	r16,72(sp)
   4cec8:	df001204 	addi	fp,sp,72
   4cecc:	e13ffb15 	stw	r4,-20(fp)
   4ced0:	e17ffc15 	stw	r5,-16(fp)
   4ced4:	e1bffd15 	stw	r6,-12(fp)
   4ced8:	e1fffe15 	stw	r7,-8(fp)
  static const struct HOSTCALL_INFO hcinfo = { 0x0103, "open" };

  alt_hostfs_dev* dev= (alt_hostfs_dev*)fd->dev;
   4cedc:	e0bffb17 	ldw	r2,-20(fp)
   4cee0:	10800017 	ldw	r2,0(r2)
   4cee4:	e0bfee15 	stw	r2,-72(fp)
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
   4cee8:	e0bfee17 	ldw	r2,-72(fp)
   4ceec:	10800217 	ldw	r2,8(r2)
   4cef0:	e0bff715 	stw	r2,-36(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
   4cef4:	e0bff717 	ldw	r2,-36(fp)
   4cef8:	10bfffc4 	addi	r2,r2,-1
   4cefc:	e0bff815 	stw	r2,-32(fp)

  while (*++ptr != 0)
   4cf00:	e0bff817 	ldw	r2,-32(fp)
   4cf04:	10800044 	addi	r2,r2,1
   4cf08:	e0bff815 	stw	r2,-32(fp)
   4cf0c:	e0bff817 	ldw	r2,-32(fp)
   4cf10:	10800003 	ldbu	r2,0(r2)
   4cf14:	10803fcc 	andi	r2,r2,255
   4cf18:	1080201c 	xori	r2,r2,128
   4cf1c:	10bfe004 	addi	r2,r2,-128
   4cf20:	103ff71e 	bne	r2,zero,4cf00 <alt_hostfs_open+0x48>
    ;

  return ptr - string;
   4cf24:	e0fff817 	ldw	r3,-32(fp)
   4cf28:	e0bff717 	ldw	r2,-36(fp)
   4cf2c:	1885c83a 	sub	r2,r3,r2
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
   4cf30:	10800044 	addi	r2,r2,1
   4cf34:	e0fffc17 	ldw	r3,-16(fp)
   4cf38:	1885883a 	add	r2,r3,r2
   4cf3c:	e0bffc15 	stw	r2,-16(fp)

  r3 = (int)&hcinfo;
   4cf40:	d0a02004 	addi	r2,gp,-32640
   4cf44:	e0bfef15 	stw	r2,-68(fp)
  r4 = (int)name;
   4cf48:	e0bffc17 	ldw	r2,-16(fp)
   4cf4c:	e0bff015 	stw	r2,-64(fp)
  r5 = flags;
   4cf50:	e0bffd17 	ldw	r2,-12(fp)
   4cf54:	e0bff115 	stw	r2,-60(fp)
  r6 = mode;
   4cf58:	e0bffe17 	ldw	r2,-8(fp)
   4cf5c:	e0bff215 	stw	r2,-56(fp)
   4cf60:	e0bffc17 	ldw	r2,-16(fp)
   4cf64:	e0bff915 	stw	r2,-28(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
   4cf68:	e0bff917 	ldw	r2,-28(fp)
   4cf6c:	10bfffc4 	addi	r2,r2,-1
   4cf70:	e0bffa15 	stw	r2,-24(fp)

  while (*++ptr != 0)
   4cf74:	e0bffa17 	ldw	r2,-24(fp)
   4cf78:	10800044 	addi	r2,r2,1
   4cf7c:	e0bffa15 	stw	r2,-24(fp)
   4cf80:	e0bffa17 	ldw	r2,-24(fp)
   4cf84:	10800003 	ldbu	r2,0(r2)
   4cf88:	10803fcc 	andi	r2,r2,255
   4cf8c:	1080201c 	xori	r2,r2,128
   4cf90:	10bfe004 	addi	r2,r2,-128
   4cf94:	103ff71e 	bne	r2,zero,4cf74 <alt_hostfs_open+0xbc>
    ;

  return ptr - string;
   4cf98:	e0fffa17 	ldw	r3,-24(fp)
   4cf9c:	e0bff917 	ldw	r2,-28(fp)
   4cfa0:	1885c83a 	sub	r2,r3,r2

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
   4cfa4:	e0bff315 	stw	r2,-52(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6), "D07" (r7) : "memory" );
   4cfa8:	e13ff017 	ldw	r4,-64(fp)
   4cfac:	e13fff15 	stw	r4,-4(fp)
   4cfb0:	e17ff117 	ldw	r5,-60(fp)
   4cfb4:	e1bff217 	ldw	r6,-56(fp)
   4cfb8:	e1fff317 	ldw	r7,-52(fp)
   4cfbc:	e0ffef17 	ldw	r3,-68(fp)
   4cfc0:	1821883a 	mov	r16,r3
   4cfc4:	8007883a 	mov	r3,r16
   4cfc8:	e13fff17 	ldw	r4,-4(fp)
   4cfcc:	003da07a 	break	1
   4cfd0:	1821883a 	mov	r16,r3
   4cfd4:	1023883a 	mov	r17,r2
   4cfd8:	e47ff415 	stw	r17,-48(fp)
   4cfdc:	e43fef15 	stw	r16,-68(fp)

  handle = (void *)r2;
   4cfe0:	e0bff417 	ldw	r2,-48(fp)
   4cfe4:	e0bff515 	stw	r2,-44(fp)
  error = r3;
   4cfe8:	e0bfef17 	ldw	r2,-68(fp)
   4cfec:	e0bff615 	stw	r2,-40(fp)

  if (error == 0)
   4cff0:	e0bff617 	ldw	r2,-40(fp)
   4cff4:	1000031e 	bne	r2,zero,4d004 <alt_hostfs_open+0x14c>
    fd->priv = handle;
   4cff8:	e0bffb17 	ldw	r2,-20(fp)
   4cffc:	e0fff517 	ldw	r3,-44(fp)
   4d000:	10c00115 	stw	r3,4(r2)

  return -error;
   4d004:	e0bff617 	ldw	r2,-40(fp)
   4d008:	0085c83a 	sub	r2,zero,r2
}
   4d00c:	e037883a 	mov	sp,fp
   4d010:	df000217 	ldw	fp,8(sp)
   4d014:	dc400117 	ldw	r17,4(sp)
   4d018:	dc000017 	ldw	r16,0(sp)
   4d01c:	dec00304 	addi	sp,sp,12
   4d020:	f800283a 	ret

0004d024 <alt_hostfs_close>:
* alt_hostfs_close
*
* Read the file
*/
int alt_hostfs_close(alt_fd* fd)
{
   4d024:	defffa04 	addi	sp,sp,-24
   4d028:	df000515 	stw	fp,20(sp)
   4d02c:	dc000415 	stw	r16,16(sp)
   4d030:	df000404 	addi	fp,sp,16
   4d034:	e13fff15 	stw	r4,-4(fp)
  int error;

  /* Input and output parameters for the hostcall */
  int r3, r4;

  r3 = (int)&hcinfo;
   4d038:	d0a01d04 	addi	r2,gp,-32652
   4d03c:	e0bffc15 	stw	r2,-16(fp)
  r4 = (int)fd->priv;
   4d040:	e0bfff17 	ldw	r2,-4(fp)
   4d044:	10800117 	ldw	r2,4(r2)
   4d048:	e0bffd15 	stw	r2,-12(fp)

  __asm__ volatile("break 1" : "+D03" (r3) : "D04" (r4) );
   4d04c:	e0bffd17 	ldw	r2,-12(fp)
   4d050:	e0fffc17 	ldw	r3,-16(fp)
   4d054:	1821883a 	mov	r16,r3
   4d058:	8007883a 	mov	r3,r16
   4d05c:	1009883a 	mov	r4,r2
   4d060:	003da07a 	break	1
   4d064:	1821883a 	mov	r16,r3
   4d068:	e43ffc15 	stw	r16,-16(fp)

  error = r3;
   4d06c:	e0bffc17 	ldw	r2,-16(fp)
   4d070:	e0bffe15 	stw	r2,-8(fp)

  return -error;
   4d074:	e0bffe17 	ldw	r2,-8(fp)
   4d078:	0085c83a 	sub	r2,zero,r2
}
   4d07c:	e037883a 	mov	sp,fp
   4d080:	df000117 	ldw	fp,4(sp)
   4d084:	dc000017 	ldw	r16,0(sp)
   4d088:	dec00204 	addi	sp,sp,8
   4d08c:	f800283a 	ret

0004d090 <alt_hostfs_read>:
* alt_hostfs_read
*
* Read the file
*/
int alt_hostfs_read(alt_fd* fd, char * ptr, int len)
{
   4d090:	defff204 	addi	sp,sp,-56
   4d094:	df000d15 	stw	fp,52(sp)
   4d098:	dc400c15 	stw	r17,48(sp)
   4d09c:	dc000b15 	stw	r16,44(sp)
   4d0a0:	df000b04 	addi	fp,sp,44
   4d0a4:	e13ffc15 	stw	r4,-16(fp)
   4d0a8:	e17ffd15 	stw	r5,-12(fp)
   4d0ac:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
   4d0b0:	d0a01a04 	addi	r2,gp,-32664
   4d0b4:	e0bff515 	stw	r2,-44(fp)
  r4 = (int)fd->priv;
   4d0b8:	e0bffc17 	ldw	r2,-16(fp)
   4d0bc:	10800117 	ldw	r2,4(r2)
   4d0c0:	e0bff615 	stw	r2,-40(fp)
  r5 = (int)ptr;
   4d0c4:	e0bffd17 	ldw	r2,-12(fp)
   4d0c8:	e0bff715 	stw	r2,-36(fp)
  r6 = len;
   4d0cc:	e0bffe17 	ldw	r2,-8(fp)
   4d0d0:	e0bff815 	stw	r2,-32(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
   4d0d4:	e13ff617 	ldw	r4,-40(fp)
   4d0d8:	e13fff15 	stw	r4,-4(fp)
   4d0dc:	e17ff717 	ldw	r5,-36(fp)
   4d0e0:	e1bff817 	ldw	r6,-32(fp)
   4d0e4:	e0fff517 	ldw	r3,-44(fp)
   4d0e8:	1821883a 	mov	r16,r3
   4d0ec:	8007883a 	mov	r3,r16
   4d0f0:	e13fff17 	ldw	r4,-4(fp)
   4d0f4:	003da07a 	break	1
   4d0f8:	1821883a 	mov	r16,r3
   4d0fc:	1023883a 	mov	r17,r2
   4d100:	e47ff915 	stw	r17,-28(fp)
   4d104:	e43ff515 	stw	r16,-44(fp)

  rc = r2;
   4d108:	e0bff917 	ldw	r2,-28(fp)
   4d10c:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
   4d110:	e0bff517 	ldw	r2,-44(fp)
   4d114:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
   4d118:	e0bffb17 	ldw	r2,-20(fp)
   4d11c:	10000326 	beq	r2,zero,4d12c <alt_hostfs_read+0x9c>
   4d120:	e0bffb17 	ldw	r2,-20(fp)
   4d124:	0085c83a 	sub	r2,zero,r2
   4d128:	00000106 	br	4d130 <alt_hostfs_read+0xa0>
   4d12c:	e0bffa17 	ldw	r2,-24(fp)
}
   4d130:	e037883a 	mov	sp,fp
   4d134:	df000217 	ldw	fp,8(sp)
   4d138:	dc400117 	ldw	r17,4(sp)
   4d13c:	dc000017 	ldw	r16,0(sp)
   4d140:	dec00304 	addi	sp,sp,12
   4d144:	f800283a 	ret

0004d148 <alt_hostfs_write>:
* alt_hostfs_write
*
* Read the file
*/
int alt_hostfs_write(alt_fd* fd, const char * ptr, int len)
{
   4d148:	defff204 	addi	sp,sp,-56
   4d14c:	df000d15 	stw	fp,52(sp)
   4d150:	dc400c15 	stw	r17,48(sp)
   4d154:	dc000b15 	stw	r16,44(sp)
   4d158:	df000b04 	addi	fp,sp,44
   4d15c:	e13ffc15 	stw	r4,-16(fp)
   4d160:	e17ffd15 	stw	r5,-12(fp)
   4d164:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
   4d168:	d0a01704 	addi	r2,gp,-32676
   4d16c:	e0bff515 	stw	r2,-44(fp)
  r4 = (int)fd->priv;
   4d170:	e0bffc17 	ldw	r2,-16(fp)
   4d174:	10800117 	ldw	r2,4(r2)
   4d178:	e0bff615 	stw	r2,-40(fp)
  r5 = (int)ptr;
   4d17c:	e0bffd17 	ldw	r2,-12(fp)
   4d180:	e0bff715 	stw	r2,-36(fp)
  r6 = len;
   4d184:	e0bffe17 	ldw	r2,-8(fp)
   4d188:	e0bff815 	stw	r2,-32(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
   4d18c:	e13ff617 	ldw	r4,-40(fp)
   4d190:	e13fff15 	stw	r4,-4(fp)
   4d194:	e17ff717 	ldw	r5,-36(fp)
   4d198:	e1bff817 	ldw	r6,-32(fp)
   4d19c:	e0fff517 	ldw	r3,-44(fp)
   4d1a0:	1821883a 	mov	r16,r3
   4d1a4:	8007883a 	mov	r3,r16
   4d1a8:	e13fff17 	ldw	r4,-4(fp)
   4d1ac:	003da07a 	break	1
   4d1b0:	1821883a 	mov	r16,r3
   4d1b4:	1023883a 	mov	r17,r2
   4d1b8:	e47ff915 	stw	r17,-28(fp)
   4d1bc:	e43ff515 	stw	r16,-44(fp)

  rc = r2;
   4d1c0:	e0bff917 	ldw	r2,-28(fp)
   4d1c4:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
   4d1c8:	e0bff517 	ldw	r2,-44(fp)
   4d1cc:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
   4d1d0:	e0bffb17 	ldw	r2,-20(fp)
   4d1d4:	10000326 	beq	r2,zero,4d1e4 <alt_hostfs_write+0x9c>
   4d1d8:	e0bffb17 	ldw	r2,-20(fp)
   4d1dc:	0085c83a 	sub	r2,zero,r2
   4d1e0:	00000106 	br	4d1e8 <alt_hostfs_write+0xa0>
   4d1e4:	e0bffa17 	ldw	r2,-24(fp)
}
   4d1e8:	e037883a 	mov	sp,fp
   4d1ec:	df000217 	ldw	fp,8(sp)
   4d1f0:	dc400117 	ldw	r17,4(sp)
   4d1f4:	dc000017 	ldw	r16,0(sp)
   4d1f8:	dec00304 	addi	sp,sp,12
   4d1fc:	f800283a 	ret

0004d200 <alt_hostfs_seek>:
* Move around within a file
*
* returns -errno for an error or the offset within the file
*/
int alt_hostfs_seek(alt_fd* fd, int ptr, int dir)
{
   4d200:	defff204 	addi	sp,sp,-56
   4d204:	df000d15 	stw	fp,52(sp)
   4d208:	dc400c15 	stw	r17,48(sp)
   4d20c:	dc000b15 	stw	r16,44(sp)
   4d210:	df000b04 	addi	fp,sp,44
   4d214:	e13ffc15 	stw	r4,-16(fp)
   4d218:	e17ffd15 	stw	r5,-12(fp)
   4d21c:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
   4d220:	d0a01404 	addi	r2,gp,-32688
   4d224:	e0bff515 	stw	r2,-44(fp)
  r4 = (int)fd->priv;
   4d228:	e0bffc17 	ldw	r2,-16(fp)
   4d22c:	10800117 	ldw	r2,4(r2)
   4d230:	e0bff615 	stw	r2,-40(fp)
  r5 = ptr;
   4d234:	e0bffd17 	ldw	r2,-12(fp)
   4d238:	e0bff715 	stw	r2,-36(fp)
  r6 = dir;
   4d23c:	e0bffe17 	ldw	r2,-8(fp)
   4d240:	e0bff815 	stw	r2,-32(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
   4d244:	e13ff617 	ldw	r4,-40(fp)
   4d248:	e13fff15 	stw	r4,-4(fp)
   4d24c:	e17ff717 	ldw	r5,-36(fp)
   4d250:	e1bff817 	ldw	r6,-32(fp)
   4d254:	e0fff517 	ldw	r3,-44(fp)
   4d258:	1821883a 	mov	r16,r3
   4d25c:	8007883a 	mov	r3,r16
   4d260:	e13fff17 	ldw	r4,-4(fp)
   4d264:	003da07a 	break	1
   4d268:	1821883a 	mov	r16,r3
   4d26c:	1023883a 	mov	r17,r2
   4d270:	e47ff915 	stw	r17,-28(fp)
   4d274:	e43ff515 	stw	r16,-44(fp)

  rc = r2;
   4d278:	e0bff917 	ldw	r2,-28(fp)
   4d27c:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
   4d280:	e0bff517 	ldw	r2,-44(fp)
   4d284:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
   4d288:	e0bffb17 	ldw	r2,-20(fp)
   4d28c:	10000326 	beq	r2,zero,4d29c <alt_hostfs_seek+0x9c>
   4d290:	e0bffb17 	ldw	r2,-20(fp)
   4d294:	0085c83a 	sub	r2,zero,r2
   4d298:	00000106 	br	4d2a0 <alt_hostfs_seek+0xa0>
   4d29c:	e0bffa17 	ldw	r2,-24(fp)
}
   4d2a0:	e037883a 	mov	sp,fp
   4d2a4:	df000217 	ldw	fp,8(sp)
   4d2a8:	dc400117 	ldw	r17,4(sp)
   4d2ac:	dc000017 	ldw	r16,0(sp)
   4d2b0:	dec00304 	addi	sp,sp,12
   4d2b4:	f800283a 	ret

0004d2b8 <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
   4d2b8:	deffe204 	addi	sp,sp,-120
   4d2bc:	df001d15 	stw	fp,116(sp)
   4d2c0:	dc401c15 	stw	r17,112(sp)
   4d2c4:	dc001b15 	stw	r16,108(sp)
   4d2c8:	df001b04 	addi	fp,sp,108
   4d2cc:	e13ffd15 	stw	r4,-12(fp)
   4d2d0:	e17ffe15 	stw	r5,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5;

  r3 = (int)&hcinfo;
   4d2d4:	d0a01104 	addi	r2,gp,-32700
   4d2d8:	e0bfe615 	stw	r2,-104(fp)
  r4 = (int)fd->priv;
   4d2dc:	e0bffd17 	ldw	r2,-12(fp)
   4d2e0:	10800117 	ldw	r2,4(r2)
   4d2e4:	e0bfe715 	stw	r2,-100(fp)
  r5 = (int)&hoststat;
   4d2e8:	e0bfed04 	addi	r2,fp,-76
   4d2ec:	e0bfe815 	stw	r2,-96(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5) : "memory" );
   4d2f0:	e13fe717 	ldw	r4,-100(fp)
   4d2f4:	e13fff15 	stw	r4,-4(fp)
   4d2f8:	e17fe817 	ldw	r5,-96(fp)
   4d2fc:	e0ffe617 	ldw	r3,-104(fp)
   4d300:	1821883a 	mov	r16,r3
   4d304:	8007883a 	mov	r3,r16
   4d308:	e13fff17 	ldw	r4,-4(fp)
   4d30c:	003da07a 	break	1
   4d310:	1821883a 	mov	r16,r3
   4d314:	1023883a 	mov	r17,r2
   4d318:	e47fe915 	stw	r17,-92(fp)
   4d31c:	e43fe615 	stw	r16,-104(fp)

  rc = r2;
   4d320:	e0bfe917 	ldw	r2,-92(fp)
   4d324:	e0bfea15 	stw	r2,-88(fp)
  error = r3;
   4d328:	e0bfe617 	ldw	r2,-104(fp)
   4d32c:	e0bfeb15 	stw	r2,-84(fp)

  if (error == 0)
   4d330:	e0bfeb17 	ldw	r2,-84(fp)
   4d334:	1000621e 	bne	r2,zero,4d4c0 <alt_hostfs_fstat+0x208>
     * no change is required.  On a little-endian processor we need to swap
     * the bytes in each word.
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
   4d338:	e0bfed04 	addi	r2,fp,-76
   4d33c:	e0bfe515 	stw	r2,-108(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
   4d340:	e0bfe517 	ldw	r2,-108(fp)
   4d344:	10801004 	addi	r2,r2,64
   4d348:	e0bfec15 	stw	r2,-80(fp)
    for ( ; ptr < end ; ptr++)
   4d34c:	00001606 	br	4d3a8 <alt_hostfs_fstat+0xf0>
      *ptr = ((*ptr & 0xFF000000) >> 24) |
   4d350:	e0bfe517 	ldw	r2,-108(fp)
   4d354:	10800017 	ldw	r2,0(r2)
   4d358:	1006d63a 	srli	r3,r2,24
             ((*ptr & 0x00FF0000) >> 8)  |
   4d35c:	e0bfe517 	ldw	r2,-108(fp)
   4d360:	10800017 	ldw	r2,0(r2)
   4d364:	10803fec 	andhi	r2,r2,255
   4d368:	1004d23a 	srli	r2,r2,8

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
   4d36c:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
   4d370:	e0bfe517 	ldw	r2,-108(fp)
   4d374:	10800017 	ldw	r2,0(r2)
   4d378:	10bfc00c 	andi	r2,r2,65280
   4d37c:	1004923a 	slli	r2,r2,8
#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
   4d380:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
   4d384:	e0bfe517 	ldw	r2,-108(fp)
   4d388:	10800017 	ldw	r2,0(r2)
   4d38c:	1004963a 	slli	r2,r2,24
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
   4d390:	1886b03a 	or	r3,r3,r2

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
   4d394:	e0bfe517 	ldw	r2,-108(fp)
   4d398:	10c00015 	stw	r3,0(r2)
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
   4d39c:	e0bfe517 	ldw	r2,-108(fp)
   4d3a0:	10800104 	addi	r2,r2,4
   4d3a4:	e0bfe515 	stw	r2,-108(fp)
   4d3a8:	e0ffe517 	ldw	r3,-108(fp)
   4d3ac:	e0bfec17 	ldw	r2,-80(fp)
   4d3b0:	18bfe736 	bltu	r3,r2,4d350 <alt_hostfs_fstat+0x98>
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
   4d3b4:	e0bffe17 	ldw	r2,-8(fp)
   4d3b8:	e0bfe515 	stw	r2,-108(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
   4d3bc:	e0bfe517 	ldw	r2,-108(fp)
   4d3c0:	10800f04 	addi	r2,r2,60
   4d3c4:	e0bfec15 	stw	r2,-80(fp)
    for ( ; ptr < end ; ptr++)
   4d3c8:	00000506 	br	4d3e0 <alt_hostfs_fstat+0x128>
      *ptr = 0;
   4d3cc:	e0bfe517 	ldw	r2,-108(fp)
   4d3d0:	10000015 	stw	zero,0(r2)
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
    for ( ; ptr < end ; ptr++)
   4d3d4:	e0bfe517 	ldw	r2,-108(fp)
   4d3d8:	10800104 	addi	r2,r2,4
   4d3dc:	e0bfe515 	stw	r2,-108(fp)
   4d3e0:	e0ffe517 	ldw	r3,-108(fp)
   4d3e4:	e0bfec17 	ldw	r2,-80(fp)
   4d3e8:	18bff836 	bltu	r3,r2,4d3cc <alt_hostfs_fstat+0x114>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
   4d3ec:	e0bfed17 	ldw	r2,-76(fp)
   4d3f0:	1007883a 	mov	r3,r2
   4d3f4:	e0bffe17 	ldw	r2,-8(fp)
   4d3f8:	10c0000d 	sth	r3,0(r2)
    st->st_ino     = hoststat.fst_ino;
   4d3fc:	e0bfee17 	ldw	r2,-72(fp)
   4d400:	1007883a 	mov	r3,r2
   4d404:	e0bffe17 	ldw	r2,-8(fp)
   4d408:	10c0008d 	sth	r3,2(r2)
    st->st_mode    = hoststat.fst_mode;
   4d40c:	e0ffef17 	ldw	r3,-68(fp)
   4d410:	e0bffe17 	ldw	r2,-8(fp)
   4d414:	10c00115 	stw	r3,4(r2)
    st->st_nlink   = hoststat.fst_nlink;
   4d418:	e0bff017 	ldw	r2,-64(fp)
   4d41c:	1007883a 	mov	r3,r2
   4d420:	e0bffe17 	ldw	r2,-8(fp)
   4d424:	10c0020d 	sth	r3,8(r2)
    st->st_uid     = hoststat.fst_uid;
   4d428:	e0bff117 	ldw	r2,-60(fp)
   4d42c:	1007883a 	mov	r3,r2
   4d430:	e0bffe17 	ldw	r2,-8(fp)
   4d434:	10c0028d 	sth	r3,10(r2)
    st->st_gid     = hoststat.fst_gid;
   4d438:	e0bff217 	ldw	r2,-56(fp)
   4d43c:	1007883a 	mov	r3,r2
   4d440:	e0bffe17 	ldw	r2,-8(fp)
   4d444:	10c0030d 	sth	r3,12(r2)
    st->st_rdev    = hoststat.fst_rdev;
   4d448:	e0bff317 	ldw	r2,-52(fp)
   4d44c:	1007883a 	mov	r3,r2
   4d450:	e0bffe17 	ldw	r2,-8(fp)
   4d454:	10c0038d 	sth	r3,14(r2)
    st->st_size    = hoststat.fst_size[1];
   4d458:	e0bff517 	ldw	r2,-44(fp)
   4d45c:	1007883a 	mov	r3,r2
   4d460:	e0bffe17 	ldw	r2,-8(fp)
   4d464:	10c00415 	stw	r3,16(r2)

    st->st_atime   = hoststat.fst_atime;
   4d468:	e0bffa17 	ldw	r2,-24(fp)
   4d46c:	1007883a 	mov	r3,r2
   4d470:	e0bffe17 	ldw	r2,-8(fp)
   4d474:	10c00515 	stw	r3,20(r2)
    st->st_mtime   = hoststat.fst_mtime;
   4d478:	e0bffb17 	ldw	r2,-20(fp)
   4d47c:	1007883a 	mov	r3,r2
   4d480:	e0bffe17 	ldw	r2,-8(fp)
   4d484:	10c00715 	stw	r3,28(r2)
    st->st_ctime   = hoststat.fst_ctime;
   4d488:	e0bffc17 	ldw	r2,-16(fp)
   4d48c:	1007883a 	mov	r3,r2
   4d490:	e0bffe17 	ldw	r2,-8(fp)
   4d494:	10c00915 	stw	r3,36(r2)

    st->st_blksize = hoststat.fst_blksize[1];
   4d498:	e0bff717 	ldw	r2,-36(fp)
   4d49c:	1007883a 	mov	r3,r2
   4d4a0:	e0bffe17 	ldw	r2,-8(fp)
   4d4a4:	10c00b15 	stw	r3,44(r2)
    st->st_blocks  = hoststat.fst_blocks[1];
   4d4a8:	e0bff917 	ldw	r2,-28(fp)
   4d4ac:	1007883a 	mov	r3,r2
   4d4b0:	e0bffe17 	ldw	r2,-8(fp)
   4d4b4:	10c00c15 	stw	r3,48(r2)

    return rc;
   4d4b8:	e0bfea17 	ldw	r2,-88(fp)
   4d4bc:	00000206 	br	4d4c8 <alt_hostfs_fstat+0x210>
  }
  else
    return -error;
   4d4c0:	e0bfeb17 	ldw	r2,-84(fp)
   4d4c4:	0085c83a 	sub	r2,zero,r2
}
   4d4c8:	e037883a 	mov	sp,fp
   4d4cc:	df000217 	ldw	fp,8(sp)
   4d4d0:	dc400117 	ldw	r17,4(sp)
   4d4d4:	dc000017 	ldw	r16,0(sp)
   4d4d8:	dec00304 	addi	sp,sp,12
   4d4dc:	f800283a 	ret

0004d4e0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   4d4e0:	defff504 	addi	sp,sp,-44
   4d4e4:	df000a15 	stw	fp,40(sp)
   4d4e8:	df000a04 	addi	fp,sp,40
   4d4ec:	e13ffc15 	stw	r4,-16(fp)
   4d4f0:	e17ffd15 	stw	r5,-12(fp)
   4d4f4:	e1bffe15 	stw	r6,-8(fp)
   4d4f8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   4d4fc:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   4d500:	00800174 	movhi	r2,5
   4d504:	10879104 	addi	r2,r2,7748
   4d508:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   4d50c:	10003f26 	beq	r2,zero,4d60c <alt_alarm_start+0x12c>
  {
    if (alarm)
   4d510:	e0bffc17 	ldw	r2,-16(fp)
   4d514:	10003b26 	beq	r2,zero,4d604 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   4d518:	e0bffc17 	ldw	r2,-16(fp)
   4d51c:	e0fffe17 	ldw	r3,-8(fp)
   4d520:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   4d524:	e0bffc17 	ldw	r2,-16(fp)
   4d528:	e0ffff17 	ldw	r3,-4(fp)
   4d52c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4d530:	0005303a 	rdctl	r2,status
   4d534:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4d538:	e0fff817 	ldw	r3,-32(fp)
   4d53c:	00bfff84 	movi	r2,-2
   4d540:	1884703a 	and	r2,r3,r2
   4d544:	1001703a 	wrctl	status,r2
  
  return context;
   4d548:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   4d54c:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   4d550:	00800174 	movhi	r2,5
   4d554:	10879204 	addi	r2,r2,7752
   4d558:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   4d55c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   4d560:	e0fffd17 	ldw	r3,-12(fp)
   4d564:	e0bff617 	ldw	r2,-40(fp)
   4d568:	1885883a 	add	r2,r3,r2
   4d56c:	10c00044 	addi	r3,r2,1
   4d570:	e0bffc17 	ldw	r2,-16(fp)
   4d574:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   4d578:	e0bffc17 	ldw	r2,-16(fp)
   4d57c:	10c00217 	ldw	r3,8(r2)
   4d580:	e0bff617 	ldw	r2,-40(fp)
   4d584:	1880042e 	bgeu	r3,r2,4d598 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   4d588:	e0bffc17 	ldw	r2,-16(fp)
   4d58c:	00c00044 	movi	r3,1
   4d590:	10c00405 	stb	r3,16(r2)
   4d594:	00000206 	br	4d5a0 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   4d598:	e0bffc17 	ldw	r2,-16(fp)
   4d59c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   4d5a0:	e0bffc17 	ldw	r2,-16(fp)
   4d5a4:	00c00174 	movhi	r3,5
   4d5a8:	18c0cb04 	addi	r3,r3,812
   4d5ac:	e0fff915 	stw	r3,-28(fp)
   4d5b0:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4d5b4:	e0bffa17 	ldw	r2,-24(fp)
   4d5b8:	e0fff917 	ldw	r3,-28(fp)
   4d5bc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   4d5c0:	e0bff917 	ldw	r2,-28(fp)
   4d5c4:	10c00017 	ldw	r3,0(r2)
   4d5c8:	e0bffa17 	ldw	r2,-24(fp)
   4d5cc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   4d5d0:	e0bff917 	ldw	r2,-28(fp)
   4d5d4:	10800017 	ldw	r2,0(r2)
   4d5d8:	e0fffa17 	ldw	r3,-24(fp)
   4d5dc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   4d5e0:	e0bff917 	ldw	r2,-28(fp)
   4d5e4:	e0fffa17 	ldw	r3,-24(fp)
   4d5e8:	10c00015 	stw	r3,0(r2)
   4d5ec:	e0bff717 	ldw	r2,-36(fp)
   4d5f0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4d5f4:	e0bffb17 	ldw	r2,-20(fp)
   4d5f8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   4d5fc:	0005883a 	mov	r2,zero
   4d600:	00000306 	br	4d610 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   4d604:	00bffa84 	movi	r2,-22
   4d608:	00000106 	br	4d610 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   4d60c:	00bfde84 	movi	r2,-134
  }
}
   4d610:	e037883a 	mov	sp,fp
   4d614:	df000017 	ldw	fp,0(sp)
   4d618:	dec00104 	addi	sp,sp,4
   4d61c:	f800283a 	ret

0004d620 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   4d620:	deffff04 	addi	sp,sp,-4
   4d624:	df000015 	stw	fp,0(sp)
   4d628:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   4d62c:	e037883a 	mov	sp,fp
   4d630:	df000017 	ldw	fp,0(sp)
   4d634:	dec00104 	addi	sp,sp,4
   4d638:	f800283a 	ret

0004d63c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4d63c:	defffe04 	addi	sp,sp,-8
   4d640:	dfc00115 	stw	ra,4(sp)
   4d644:	df000015 	stw	fp,0(sp)
   4d648:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4d64c:	00800174 	movhi	r2,5
   4d650:	1080b604 	addi	r2,r2,728
   4d654:	10800017 	ldw	r2,0(r2)
   4d658:	10000526 	beq	r2,zero,4d670 <alt_get_errno+0x34>
   4d65c:	00800174 	movhi	r2,5
   4d660:	1080b604 	addi	r2,r2,728
   4d664:	10800017 	ldw	r2,0(r2)
   4d668:	103ee83a 	callr	r2
   4d66c:	00000206 	br	4d678 <alt_get_errno+0x3c>
   4d670:	00800174 	movhi	r2,5
   4d674:	10878604 	addi	r2,r2,7704
}
   4d678:	e037883a 	mov	sp,fp
   4d67c:	dfc00117 	ldw	ra,4(sp)
   4d680:	df000017 	ldw	fp,0(sp)
   4d684:	dec00204 	addi	sp,sp,8
   4d688:	f800283a 	ret

0004d68c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   4d68c:	defffa04 	addi	sp,sp,-24
   4d690:	dfc00515 	stw	ra,20(sp)
   4d694:	df000415 	stw	fp,16(sp)
   4d698:	df000404 	addi	fp,sp,16
   4d69c:	e13ffe15 	stw	r4,-8(fp)
   4d6a0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   4d6a4:	e0bffe17 	ldw	r2,-8(fp)
   4d6a8:	10000326 	beq	r2,zero,4d6b8 <alt_dev_llist_insert+0x2c>
   4d6ac:	e0bffe17 	ldw	r2,-8(fp)
   4d6b0:	10800217 	ldw	r2,8(r2)
   4d6b4:	1000051e 	bne	r2,zero,4d6cc <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   4d6b8:	004d63c0 	call	4d63c <alt_get_errno>
   4d6bc:	00c00584 	movi	r3,22
   4d6c0:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   4d6c4:	00bffa84 	movi	r2,-22
   4d6c8:	00001306 	br	4d718 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   4d6cc:	e0bffe17 	ldw	r2,-8(fp)
   4d6d0:	e0ffff17 	ldw	r3,-4(fp)
   4d6d4:	e0fffc15 	stw	r3,-16(fp)
   4d6d8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4d6dc:	e0bffd17 	ldw	r2,-12(fp)
   4d6e0:	e0fffc17 	ldw	r3,-16(fp)
   4d6e4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   4d6e8:	e0bffc17 	ldw	r2,-16(fp)
   4d6ec:	10c00017 	ldw	r3,0(r2)
   4d6f0:	e0bffd17 	ldw	r2,-12(fp)
   4d6f4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   4d6f8:	e0bffc17 	ldw	r2,-16(fp)
   4d6fc:	10800017 	ldw	r2,0(r2)
   4d700:	e0fffd17 	ldw	r3,-12(fp)
   4d704:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   4d708:	e0bffc17 	ldw	r2,-16(fp)
   4d70c:	e0fffd17 	ldw	r3,-12(fp)
   4d710:	10c00015 	stw	r3,0(r2)

  return 0;  
   4d714:	0005883a 	mov	r2,zero
}
   4d718:	e037883a 	mov	sp,fp
   4d71c:	dfc00117 	ldw	ra,4(sp)
   4d720:	df000017 	ldw	fp,0(sp)
   4d724:	dec00204 	addi	sp,sp,8
   4d728:	f800283a 	ret

0004d72c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   4d72c:	defffd04 	addi	sp,sp,-12
   4d730:	dfc00215 	stw	ra,8(sp)
   4d734:	df000115 	stw	fp,4(sp)
   4d738:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   4d73c:	00800174 	movhi	r2,5
   4d740:	10b92a04 	addi	r2,r2,-7000
   4d744:	e0bfff15 	stw	r2,-4(fp)
   4d748:	00000606 	br	4d764 <_do_ctors+0x38>
        (*ctor) (); 
   4d74c:	e0bfff17 	ldw	r2,-4(fp)
   4d750:	10800017 	ldw	r2,0(r2)
   4d754:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   4d758:	e0bfff17 	ldw	r2,-4(fp)
   4d75c:	10bfff04 	addi	r2,r2,-4
   4d760:	e0bfff15 	stw	r2,-4(fp)
   4d764:	e0ffff17 	ldw	r3,-4(fp)
   4d768:	00800174 	movhi	r2,5
   4d76c:	10b92b04 	addi	r2,r2,-6996
   4d770:	18bff62e 	bgeu	r3,r2,4d74c <_do_ctors+0x20>
        (*ctor) (); 
}
   4d774:	e037883a 	mov	sp,fp
   4d778:	dfc00117 	ldw	ra,4(sp)
   4d77c:	df000017 	ldw	fp,0(sp)
   4d780:	dec00204 	addi	sp,sp,8
   4d784:	f800283a 	ret

0004d788 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   4d788:	defffd04 	addi	sp,sp,-12
   4d78c:	dfc00215 	stw	ra,8(sp)
   4d790:	df000115 	stw	fp,4(sp)
   4d794:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   4d798:	00800174 	movhi	r2,5
   4d79c:	10b92a04 	addi	r2,r2,-7000
   4d7a0:	e0bfff15 	stw	r2,-4(fp)
   4d7a4:	00000606 	br	4d7c0 <_do_dtors+0x38>
        (*dtor) (); 
   4d7a8:	e0bfff17 	ldw	r2,-4(fp)
   4d7ac:	10800017 	ldw	r2,0(r2)
   4d7b0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   4d7b4:	e0bfff17 	ldw	r2,-4(fp)
   4d7b8:	10bfff04 	addi	r2,r2,-4
   4d7bc:	e0bfff15 	stw	r2,-4(fp)
   4d7c0:	e0ffff17 	ldw	r3,-4(fp)
   4d7c4:	00800174 	movhi	r2,5
   4d7c8:	10b92b04 	addi	r2,r2,-6996
   4d7cc:	18bff62e 	bgeu	r3,r2,4d7a8 <_do_dtors+0x20>
        (*dtor) (); 
}
   4d7d0:	e037883a 	mov	sp,fp
   4d7d4:	dfc00117 	ldw	ra,4(sp)
   4d7d8:	df000017 	ldw	fp,0(sp)
   4d7dc:	dec00204 	addi	sp,sp,8
   4d7e0:	f800283a 	ret

0004d7e4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   4d7e4:	defffa04 	addi	sp,sp,-24
   4d7e8:	dfc00515 	stw	ra,20(sp)
   4d7ec:	df000415 	stw	fp,16(sp)
   4d7f0:	df000404 	addi	fp,sp,16
   4d7f4:	e13ffe15 	stw	r4,-8(fp)
   4d7f8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   4d7fc:	e0bfff17 	ldw	r2,-4(fp)
   4d800:	10800017 	ldw	r2,0(r2)
   4d804:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   4d808:	e13ffe17 	ldw	r4,-8(fp)
   4d80c:	0042c540 	call	42c54 <strlen>
   4d810:	10800044 	addi	r2,r2,1
   4d814:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4d818:	00000d06 	br	4d850 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   4d81c:	e0bffc17 	ldw	r2,-16(fp)
   4d820:	10c00217 	ldw	r3,8(r2)
   4d824:	e0bffd17 	ldw	r2,-12(fp)
   4d828:	1809883a 	mov	r4,r3
   4d82c:	e17ffe17 	ldw	r5,-8(fp)
   4d830:	100d883a 	mov	r6,r2
   4d834:	004e1240 	call	4e124 <memcmp>
   4d838:	1000021e 	bne	r2,zero,4d844 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   4d83c:	e0bffc17 	ldw	r2,-16(fp)
   4d840:	00000706 	br	4d860 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   4d844:	e0bffc17 	ldw	r2,-16(fp)
   4d848:	10800017 	ldw	r2,0(r2)
   4d84c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4d850:	e0fffc17 	ldw	r3,-16(fp)
   4d854:	e0bfff17 	ldw	r2,-4(fp)
   4d858:	18bff01e 	bne	r3,r2,4d81c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   4d85c:	0005883a 	mov	r2,zero
}
   4d860:	e037883a 	mov	sp,fp
   4d864:	dfc00117 	ldw	ra,4(sp)
   4d868:	df000017 	ldw	fp,0(sp)
   4d86c:	dec00204 	addi	sp,sp,8
   4d870:	f800283a 	ret

0004d874 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   4d874:	defffb04 	addi	sp,sp,-20
   4d878:	dfc00415 	stw	ra,16(sp)
   4d87c:	df000315 	stw	fp,12(sp)
   4d880:	df000304 	addi	fp,sp,12
   4d884:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   4d888:	00800174 	movhi	r2,5
   4d88c:	1080b104 	addi	r2,r2,708
   4d890:	10800017 	ldw	r2,0(r2)
   4d894:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   4d898:	00003106 	br	4d960 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   4d89c:	e0bffd17 	ldw	r2,-12(fp)
   4d8a0:	10800217 	ldw	r2,8(r2)
   4d8a4:	1009883a 	mov	r4,r2
   4d8a8:	0042c540 	call	42c54 <strlen>
   4d8ac:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   4d8b0:	e0bffd17 	ldw	r2,-12(fp)
   4d8b4:	10c00217 	ldw	r3,8(r2)
   4d8b8:	e0bffe17 	ldw	r2,-8(fp)
   4d8bc:	10bfffc4 	addi	r2,r2,-1
   4d8c0:	1885883a 	add	r2,r3,r2
   4d8c4:	10800003 	ldbu	r2,0(r2)
   4d8c8:	10803fcc 	andi	r2,r2,255
   4d8cc:	1080201c 	xori	r2,r2,128
   4d8d0:	10bfe004 	addi	r2,r2,-128
   4d8d4:	10800bd8 	cmpnei	r2,r2,47
   4d8d8:	1000031e 	bne	r2,zero,4d8e8 <alt_find_file+0x74>
    {
      len -= 1;
   4d8dc:	e0bffe17 	ldw	r2,-8(fp)
   4d8e0:	10bfffc4 	addi	r2,r2,-1
   4d8e4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   4d8e8:	e0bffe17 	ldw	r2,-8(fp)
   4d8ec:	e0ffff17 	ldw	r3,-4(fp)
   4d8f0:	1885883a 	add	r2,r3,r2
   4d8f4:	10800003 	ldbu	r2,0(r2)
   4d8f8:	10803fcc 	andi	r2,r2,255
   4d8fc:	1080201c 	xori	r2,r2,128
   4d900:	10bfe004 	addi	r2,r2,-128
   4d904:	10800be0 	cmpeqi	r2,r2,47
   4d908:	1000081e 	bne	r2,zero,4d92c <alt_find_file+0xb8>
   4d90c:	e0bffe17 	ldw	r2,-8(fp)
   4d910:	e0ffff17 	ldw	r3,-4(fp)
   4d914:	1885883a 	add	r2,r3,r2
   4d918:	10800003 	ldbu	r2,0(r2)
   4d91c:	10803fcc 	andi	r2,r2,255
   4d920:	1080201c 	xori	r2,r2,128
   4d924:	10bfe004 	addi	r2,r2,-128
   4d928:	10000a1e 	bne	r2,zero,4d954 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   4d92c:	e0bffd17 	ldw	r2,-12(fp)
   4d930:	10c00217 	ldw	r3,8(r2)
   4d934:	e0bffe17 	ldw	r2,-8(fp)
   4d938:	1809883a 	mov	r4,r3
   4d93c:	e17fff17 	ldw	r5,-4(fp)
   4d940:	100d883a 	mov	r6,r2
   4d944:	004e1240 	call	4e124 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   4d948:	1000021e 	bne	r2,zero,4d954 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   4d94c:	e0bffd17 	ldw	r2,-12(fp)
   4d950:	00000806 	br	4d974 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   4d954:	e0bffd17 	ldw	r2,-12(fp)
   4d958:	10800017 	ldw	r2,0(r2)
   4d95c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   4d960:	e0fffd17 	ldw	r3,-12(fp)
   4d964:	00800174 	movhi	r2,5
   4d968:	1080b104 	addi	r2,r2,708
   4d96c:	18bfcb1e 	bne	r3,r2,4d89c <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   4d970:	0005883a 	mov	r2,zero
}
   4d974:	e037883a 	mov	sp,fp
   4d978:	dfc00117 	ldw	ra,4(sp)
   4d97c:	df000017 	ldw	fp,0(sp)
   4d980:	dec00204 	addi	sp,sp,8
   4d984:	f800283a 	ret

0004d988 <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
   4d988:	defffc04 	addi	sp,sp,-16
   4d98c:	df000315 	stw	fp,12(sp)
   4d990:	df000304 	addi	fp,sp,12
   4d994:	e13fff15 	stw	r4,-4(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
   4d998:	e0bfff17 	ldw	r2,-4(fp)
   4d99c:	10800217 	ldw	r2,8(r2)
   4d9a0:	1000021e 	bne	r2,zero,4d9ac <alt_fs_reg+0x24>
  {
    return -ENODEV;
   4d9a4:	00bffb44 	movi	r2,-19
   4d9a8:	00001406 	br	4d9fc <alt_fs_reg+0x74>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
   4d9ac:	e0bfff17 	ldw	r2,-4(fp)
   4d9b0:	00c00174 	movhi	r3,5
   4d9b4:	18c0b104 	addi	r3,r3,708
   4d9b8:	e0fffd15 	stw	r3,-12(fp)
   4d9bc:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4d9c0:	e0bffe17 	ldw	r2,-8(fp)
   4d9c4:	e0fffd17 	ldw	r3,-12(fp)
   4d9c8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   4d9cc:	e0bffd17 	ldw	r2,-12(fp)
   4d9d0:	10c00017 	ldw	r3,0(r2)
   4d9d4:	e0bffe17 	ldw	r2,-8(fp)
   4d9d8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   4d9dc:	e0bffd17 	ldw	r2,-12(fp)
   4d9e0:	10800017 	ldw	r2,0(r2)
   4d9e4:	e0fffe17 	ldw	r3,-8(fp)
   4d9e8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   4d9ec:	e0bffd17 	ldw	r2,-12(fp)
   4d9f0:	e0fffe17 	ldw	r3,-8(fp)
   4d9f4:	10c00015 	stw	r3,0(r2)

  return 0;
   4d9f8:	0005883a 	mov	r2,zero
} 
   4d9fc:	e037883a 	mov	sp,fp
   4da00:	df000017 	ldw	fp,0(sp)
   4da04:	dec00104 	addi	sp,sp,4
   4da08:	f800283a 	ret

0004da0c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   4da0c:	defffa04 	addi	sp,sp,-24
   4da10:	dfc00515 	stw	ra,20(sp)
   4da14:	df000415 	stw	fp,16(sp)
   4da18:	dc000315 	stw	r16,12(sp)
   4da1c:	df000304 	addi	fp,sp,12
   4da20:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   4da24:	00bffa04 	movi	r2,-24
   4da28:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4da2c:	e03ffd15 	stw	zero,-12(fp)
   4da30:	00002106 	br	4dab8 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   4da34:	04000174 	movhi	r16,5
   4da38:	843c2504 	addi	r16,r16,-3948
   4da3c:	e0bffd17 	ldw	r2,-12(fp)
   4da40:	1009883a 	mov	r4,r2
   4da44:	01400304 	movi	r5,12
   4da48:	00411f80 	call	411f8 <__mulsi3>
   4da4c:	8085883a 	add	r2,r16,r2
   4da50:	10800017 	ldw	r2,0(r2)
   4da54:	1000151e 	bne	r2,zero,4daac <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   4da58:	04000174 	movhi	r16,5
   4da5c:	843c2504 	addi	r16,r16,-3948
   4da60:	e0bffd17 	ldw	r2,-12(fp)
   4da64:	1009883a 	mov	r4,r2
   4da68:	01400304 	movi	r5,12
   4da6c:	00411f80 	call	411f8 <__mulsi3>
   4da70:	8085883a 	add	r2,r16,r2
   4da74:	e0ffff17 	ldw	r3,-4(fp)
   4da78:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   4da7c:	00800174 	movhi	r2,5
   4da80:	1080b504 	addi	r2,r2,724
   4da84:	10c00017 	ldw	r3,0(r2)
   4da88:	e0bffd17 	ldw	r2,-12(fp)
   4da8c:	1880040e 	bge	r3,r2,4daa0 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   4da90:	00800174 	movhi	r2,5
   4da94:	1080b504 	addi	r2,r2,724
   4da98:	e0fffd17 	ldw	r3,-12(fp)
   4da9c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   4daa0:	e0bffd17 	ldw	r2,-12(fp)
   4daa4:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   4daa8:	00000606 	br	4dac4 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4daac:	e0bffd17 	ldw	r2,-12(fp)
   4dab0:	10800044 	addi	r2,r2,1
   4dab4:	e0bffd15 	stw	r2,-12(fp)
   4dab8:	e0bffd17 	ldw	r2,-12(fp)
   4dabc:	10800810 	cmplti	r2,r2,32
   4dac0:	103fdc1e 	bne	r2,zero,4da34 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   4dac4:	e0bffe17 	ldw	r2,-8(fp)
}
   4dac8:	e037883a 	mov	sp,fp
   4dacc:	dfc00217 	ldw	ra,8(sp)
   4dad0:	df000117 	ldw	fp,4(sp)
   4dad4:	dc000017 	ldw	r16,0(sp)
   4dad8:	dec00304 	addi	sp,sp,12
   4dadc:	f800283a 	ret

0004dae0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   4dae0:	deffff04 	addi	sp,sp,-4
   4dae4:	df000015 	stw	fp,0(sp)
   4dae8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   4daec:	e037883a 	mov	sp,fp
   4daf0:	df000017 	ldw	fp,0(sp)
   4daf4:	dec00104 	addi	sp,sp,4
   4daf8:	f800283a 	ret

0004dafc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4dafc:	defff904 	addi	sp,sp,-28
   4db00:	dfc00615 	stw	ra,24(sp)
   4db04:	df000515 	stw	fp,20(sp)
   4db08:	df000504 	addi	fp,sp,20
   4db0c:	e13ffc15 	stw	r4,-16(fp)
   4db10:	e17ffd15 	stw	r5,-12(fp)
   4db14:	e1bffe15 	stw	r6,-8(fp)
   4db18:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   4db1c:	e0800217 	ldw	r2,8(fp)
   4db20:	d8800015 	stw	r2,0(sp)
   4db24:	e13ffc17 	ldw	r4,-16(fp)
   4db28:	e17ffd17 	ldw	r5,-12(fp)
   4db2c:	e1bffe17 	ldw	r6,-8(fp)
   4db30:	e1ffff17 	ldw	r7,-4(fp)
   4db34:	004dcd40 	call	4dcd4 <alt_iic_isr_register>
}  
   4db38:	e037883a 	mov	sp,fp
   4db3c:	dfc00117 	ldw	ra,4(sp)
   4db40:	df000017 	ldw	fp,0(sp)
   4db44:	dec00204 	addi	sp,sp,8
   4db48:	f800283a 	ret

0004db4c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   4db4c:	defff904 	addi	sp,sp,-28
   4db50:	df000615 	stw	fp,24(sp)
   4db54:	df000604 	addi	fp,sp,24
   4db58:	e13ffe15 	stw	r4,-8(fp)
   4db5c:	e17fff15 	stw	r5,-4(fp)
   4db60:	e0bfff17 	ldw	r2,-4(fp)
   4db64:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4db68:	0005303a 	rdctl	r2,status
   4db6c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4db70:	e0fffb17 	ldw	r3,-20(fp)
   4db74:	00bfff84 	movi	r2,-2
   4db78:	1884703a 	and	r2,r3,r2
   4db7c:	1001703a 	wrctl	status,r2
  
  return context;
   4db80:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4db84:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   4db88:	e0bffa17 	ldw	r2,-24(fp)
   4db8c:	00c00044 	movi	r3,1
   4db90:	1884983a 	sll	r2,r3,r2
   4db94:	1007883a 	mov	r3,r2
   4db98:	00800174 	movhi	r2,5
   4db9c:	10879004 	addi	r2,r2,7744
   4dba0:	10800017 	ldw	r2,0(r2)
   4dba4:	1886b03a 	or	r3,r3,r2
   4dba8:	00800174 	movhi	r2,5
   4dbac:	10879004 	addi	r2,r2,7744
   4dbb0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4dbb4:	00800174 	movhi	r2,5
   4dbb8:	10879004 	addi	r2,r2,7744
   4dbbc:	10800017 	ldw	r2,0(r2)
   4dbc0:	100170fa 	wrctl	ienable,r2
   4dbc4:	e0bffc17 	ldw	r2,-16(fp)
   4dbc8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4dbcc:	e0bffd17 	ldw	r2,-12(fp)
   4dbd0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4dbd4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   4dbd8:	e037883a 	mov	sp,fp
   4dbdc:	df000017 	ldw	fp,0(sp)
   4dbe0:	dec00104 	addi	sp,sp,4
   4dbe4:	f800283a 	ret

0004dbe8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   4dbe8:	defff904 	addi	sp,sp,-28
   4dbec:	df000615 	stw	fp,24(sp)
   4dbf0:	df000604 	addi	fp,sp,24
   4dbf4:	e13ffe15 	stw	r4,-8(fp)
   4dbf8:	e17fff15 	stw	r5,-4(fp)
   4dbfc:	e0bfff17 	ldw	r2,-4(fp)
   4dc00:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4dc04:	0005303a 	rdctl	r2,status
   4dc08:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4dc0c:	e0fffb17 	ldw	r3,-20(fp)
   4dc10:	00bfff84 	movi	r2,-2
   4dc14:	1884703a 	and	r2,r3,r2
   4dc18:	1001703a 	wrctl	status,r2
  
  return context;
   4dc1c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4dc20:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   4dc24:	e0bffa17 	ldw	r2,-24(fp)
   4dc28:	00c00044 	movi	r3,1
   4dc2c:	1884983a 	sll	r2,r3,r2
   4dc30:	0084303a 	nor	r2,zero,r2
   4dc34:	1007883a 	mov	r3,r2
   4dc38:	00800174 	movhi	r2,5
   4dc3c:	10879004 	addi	r2,r2,7744
   4dc40:	10800017 	ldw	r2,0(r2)
   4dc44:	1886703a 	and	r3,r3,r2
   4dc48:	00800174 	movhi	r2,5
   4dc4c:	10879004 	addi	r2,r2,7744
   4dc50:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4dc54:	00800174 	movhi	r2,5
   4dc58:	10879004 	addi	r2,r2,7744
   4dc5c:	10800017 	ldw	r2,0(r2)
   4dc60:	100170fa 	wrctl	ienable,r2
   4dc64:	e0bffc17 	ldw	r2,-16(fp)
   4dc68:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4dc6c:	e0bffd17 	ldw	r2,-12(fp)
   4dc70:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4dc74:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   4dc78:	e037883a 	mov	sp,fp
   4dc7c:	df000017 	ldw	fp,0(sp)
   4dc80:	dec00104 	addi	sp,sp,4
   4dc84:	f800283a 	ret

0004dc88 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   4dc88:	defffc04 	addi	sp,sp,-16
   4dc8c:	df000315 	stw	fp,12(sp)
   4dc90:	df000304 	addi	fp,sp,12
   4dc94:	e13ffe15 	stw	r4,-8(fp)
   4dc98:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   4dc9c:	000530fa 	rdctl	r2,ienable
   4dca0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   4dca4:	e0bfff17 	ldw	r2,-4(fp)
   4dca8:	00c00044 	movi	r3,1
   4dcac:	1884983a 	sll	r2,r3,r2
   4dcb0:	1007883a 	mov	r3,r2
   4dcb4:	e0bffd17 	ldw	r2,-12(fp)
   4dcb8:	1884703a 	and	r2,r3,r2
   4dcbc:	1004c03a 	cmpne	r2,r2,zero
   4dcc0:	10803fcc 	andi	r2,r2,255
}
   4dcc4:	e037883a 	mov	sp,fp
   4dcc8:	df000017 	ldw	fp,0(sp)
   4dccc:	dec00104 	addi	sp,sp,4
   4dcd0:	f800283a 	ret

0004dcd4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4dcd4:	defff504 	addi	sp,sp,-44
   4dcd8:	dfc00a15 	stw	ra,40(sp)
   4dcdc:	df000915 	stw	fp,36(sp)
   4dce0:	df000904 	addi	fp,sp,36
   4dce4:	e13ffc15 	stw	r4,-16(fp)
   4dce8:	e17ffd15 	stw	r5,-12(fp)
   4dcec:	e1bffe15 	stw	r6,-8(fp)
   4dcf0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   4dcf4:	00bffa84 	movi	r2,-22
   4dcf8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   4dcfc:	e0bffd17 	ldw	r2,-12(fp)
   4dd00:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   4dd04:	e0bff817 	ldw	r2,-32(fp)
   4dd08:	10800808 	cmpgei	r2,r2,32
   4dd0c:	1000271e 	bne	r2,zero,4ddac <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4dd10:	0005303a 	rdctl	r2,status
   4dd14:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4dd18:	e0fffa17 	ldw	r3,-24(fp)
   4dd1c:	00bfff84 	movi	r2,-2
   4dd20:	1884703a 	and	r2,r3,r2
   4dd24:	1001703a 	wrctl	status,r2
  
  return context;
   4dd28:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   4dd2c:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   4dd30:	00c00174 	movhi	r3,5
   4dd34:	18c79d04 	addi	r3,r3,7796
   4dd38:	e0bff817 	ldw	r2,-32(fp)
   4dd3c:	100490fa 	slli	r2,r2,3
   4dd40:	1885883a 	add	r2,r3,r2
   4dd44:	e0fffe17 	ldw	r3,-8(fp)
   4dd48:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   4dd4c:	00c00174 	movhi	r3,5
   4dd50:	18c79d04 	addi	r3,r3,7796
   4dd54:	e0bff817 	ldw	r2,-32(fp)
   4dd58:	100490fa 	slli	r2,r2,3
   4dd5c:	1885883a 	add	r2,r3,r2
   4dd60:	10800104 	addi	r2,r2,4
   4dd64:	e0ffff17 	ldw	r3,-4(fp)
   4dd68:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   4dd6c:	e0bffe17 	ldw	r2,-8(fp)
   4dd70:	10000526 	beq	r2,zero,4dd88 <alt_iic_isr_register+0xb4>
   4dd74:	e0bff817 	ldw	r2,-32(fp)
   4dd78:	e13ffc17 	ldw	r4,-16(fp)
   4dd7c:	100b883a 	mov	r5,r2
   4dd80:	004db4c0 	call	4db4c <alt_ic_irq_enable>
   4dd84:	00000406 	br	4dd98 <alt_iic_isr_register+0xc4>
   4dd88:	e0bff817 	ldw	r2,-32(fp)
   4dd8c:	e13ffc17 	ldw	r4,-16(fp)
   4dd90:	100b883a 	mov	r5,r2
   4dd94:	004dbe80 	call	4dbe8 <alt_ic_irq_disable>
   4dd98:	e0bff715 	stw	r2,-36(fp)
   4dd9c:	e0bff917 	ldw	r2,-28(fp)
   4dda0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4dda4:	e0bffb17 	ldw	r2,-20(fp)
   4dda8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   4ddac:	e0bff717 	ldw	r2,-36(fp)
}
   4ddb0:	e037883a 	mov	sp,fp
   4ddb4:	dfc00117 	ldw	ra,4(sp)
   4ddb8:	df000017 	ldw	fp,0(sp)
   4ddbc:	dec00204 	addi	sp,sp,8
   4ddc0:	f800283a 	ret

0004ddc4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   4ddc4:	defff804 	addi	sp,sp,-32
   4ddc8:	dfc00715 	stw	ra,28(sp)
   4ddcc:	df000615 	stw	fp,24(sp)
   4ddd0:	dc000515 	stw	r16,20(sp)
   4ddd4:	df000504 	addi	fp,sp,20
   4ddd8:	e13ffc15 	stw	r4,-16(fp)
   4dddc:	e17ffd15 	stw	r5,-12(fp)
   4dde0:	e1bffe15 	stw	r6,-8(fp)
   4dde4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   4dde8:	e13ffd17 	ldw	r4,-12(fp)
   4ddec:	e17ffe17 	ldw	r5,-8(fp)
   4ddf0:	e1bfff17 	ldw	r6,-4(fp)
   4ddf4:	004b7a80 	call	4b7a8 <open>
   4ddf8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   4ddfc:	e0bffb17 	ldw	r2,-20(fp)
   4de00:	10002216 	blt	r2,zero,4de8c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   4de04:	04000174 	movhi	r16,5
   4de08:	843c2504 	addi	r16,r16,-3948
   4de0c:	e0bffb17 	ldw	r2,-20(fp)
   4de10:	1009883a 	mov	r4,r2
   4de14:	01400304 	movi	r5,12
   4de18:	00411f80 	call	411f8 <__mulsi3>
   4de1c:	8085883a 	add	r2,r16,r2
   4de20:	10c00017 	ldw	r3,0(r2)
   4de24:	e0bffc17 	ldw	r2,-16(fp)
   4de28:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   4de2c:	04000174 	movhi	r16,5
   4de30:	843c2504 	addi	r16,r16,-3948
   4de34:	e0bffb17 	ldw	r2,-20(fp)
   4de38:	1009883a 	mov	r4,r2
   4de3c:	01400304 	movi	r5,12
   4de40:	00411f80 	call	411f8 <__mulsi3>
   4de44:	8085883a 	add	r2,r16,r2
   4de48:	10800104 	addi	r2,r2,4
   4de4c:	10c00017 	ldw	r3,0(r2)
   4de50:	e0bffc17 	ldw	r2,-16(fp)
   4de54:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   4de58:	04000174 	movhi	r16,5
   4de5c:	843c2504 	addi	r16,r16,-3948
   4de60:	e0bffb17 	ldw	r2,-20(fp)
   4de64:	1009883a 	mov	r4,r2
   4de68:	01400304 	movi	r5,12
   4de6c:	00411f80 	call	411f8 <__mulsi3>
   4de70:	8085883a 	add	r2,r16,r2
   4de74:	10800204 	addi	r2,r2,8
   4de78:	10c00017 	ldw	r3,0(r2)
   4de7c:	e0bffc17 	ldw	r2,-16(fp)
   4de80:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   4de84:	e13ffb17 	ldw	r4,-20(fp)
   4de88:	004ba440 	call	4ba44 <alt_release_fd>
  }
} 
   4de8c:	e037883a 	mov	sp,fp
   4de90:	dfc00217 	ldw	ra,8(sp)
   4de94:	df000117 	ldw	fp,4(sp)
   4de98:	dc000017 	ldw	r16,0(sp)
   4de9c:	dec00304 	addi	sp,sp,12
   4dea0:	f800283a 	ret

0004dea4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   4dea4:	defffb04 	addi	sp,sp,-20
   4dea8:	dfc00415 	stw	ra,16(sp)
   4deac:	df000315 	stw	fp,12(sp)
   4deb0:	df000304 	addi	fp,sp,12
   4deb4:	e13ffd15 	stw	r4,-12(fp)
   4deb8:	e17ffe15 	stw	r5,-8(fp)
   4debc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   4dec0:	01000174 	movhi	r4,5
   4dec4:	213c2804 	addi	r4,r4,-3936
   4dec8:	e17ffd17 	ldw	r5,-12(fp)
   4decc:	01800044 	movi	r6,1
   4ded0:	01c07fc4 	movi	r7,511
   4ded4:	004ddc40 	call	4ddc4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   4ded8:	01000174 	movhi	r4,5
   4dedc:	213c2504 	addi	r4,r4,-3948
   4dee0:	e17ffe17 	ldw	r5,-8(fp)
   4dee4:	000d883a 	mov	r6,zero
   4dee8:	01c07fc4 	movi	r7,511
   4deec:	004ddc40 	call	4ddc4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   4def0:	01000174 	movhi	r4,5
   4def4:	213c2b04 	addi	r4,r4,-3924
   4def8:	e17fff17 	ldw	r5,-4(fp)
   4defc:	01800044 	movi	r6,1
   4df00:	01c07fc4 	movi	r7,511
   4df04:	004ddc40 	call	4ddc4 <alt_open_fd>
}  
   4df08:	e037883a 	mov	sp,fp
   4df0c:	dfc00117 	ldw	ra,4(sp)
   4df10:	df000017 	ldw	fp,0(sp)
   4df14:	dec00204 	addi	sp,sp,8
   4df18:	f800283a 	ret

0004df1c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   4df1c:	defffa04 	addi	sp,sp,-24
   4df20:	df000515 	stw	fp,20(sp)
   4df24:	df000504 	addi	fp,sp,20
   4df28:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4df2c:	0005303a 	rdctl	r2,status
   4df30:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4df34:	e0fffc17 	ldw	r3,-16(fp)
   4df38:	00bfff84 	movi	r2,-2
   4df3c:	1884703a 	and	r2,r3,r2
   4df40:	1001703a 	wrctl	status,r2
  
  return context;
   4df44:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   4df48:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   4df4c:	e0bfff17 	ldw	r2,-4(fp)
   4df50:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   4df54:	e0bffd17 	ldw	r2,-12(fp)
   4df58:	10800017 	ldw	r2,0(r2)
   4df5c:	e0fffd17 	ldw	r3,-12(fp)
   4df60:	18c00117 	ldw	r3,4(r3)
   4df64:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   4df68:	e0bffd17 	ldw	r2,-12(fp)
   4df6c:	10800117 	ldw	r2,4(r2)
   4df70:	e0fffd17 	ldw	r3,-12(fp)
   4df74:	18c00017 	ldw	r3,0(r3)
   4df78:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   4df7c:	e0bffd17 	ldw	r2,-12(fp)
   4df80:	e0fffd17 	ldw	r3,-12(fp)
   4df84:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   4df88:	e0bffd17 	ldw	r2,-12(fp)
   4df8c:	e0fffd17 	ldw	r3,-12(fp)
   4df90:	10c00015 	stw	r3,0(r2)
   4df94:	e0bffb17 	ldw	r2,-20(fp)
   4df98:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4df9c:	e0bffe17 	ldw	r2,-8(fp)
   4dfa0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   4dfa4:	e037883a 	mov	sp,fp
   4dfa8:	df000017 	ldw	fp,0(sp)
   4dfac:	dec00104 	addi	sp,sp,4
   4dfb0:	f800283a 	ret

0004dfb4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   4dfb4:	defffb04 	addi	sp,sp,-20
   4dfb8:	dfc00415 	stw	ra,16(sp)
   4dfbc:	df000315 	stw	fp,12(sp)
   4dfc0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   4dfc4:	d0a02417 	ldw	r2,-32624(gp)
   4dfc8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   4dfcc:	d0a6eb17 	ldw	r2,-25684(gp)
   4dfd0:	10800044 	addi	r2,r2,1
   4dfd4:	d0a6eb15 	stw	r2,-25684(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   4dfd8:	00002e06 	br	4e094 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   4dfdc:	e0bffd17 	ldw	r2,-12(fp)
   4dfe0:	10800017 	ldw	r2,0(r2)
   4dfe4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   4dfe8:	e0bffd17 	ldw	r2,-12(fp)
   4dfec:	10800403 	ldbu	r2,16(r2)
   4dff0:	10803fcc 	andi	r2,r2,255
   4dff4:	10000426 	beq	r2,zero,4e008 <alt_tick+0x54>
   4dff8:	d0a6eb17 	ldw	r2,-25684(gp)
   4dffc:	1000021e 	bne	r2,zero,4e008 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   4e000:	e0bffd17 	ldw	r2,-12(fp)
   4e004:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   4e008:	e0bffd17 	ldw	r2,-12(fp)
   4e00c:	10800217 	ldw	r2,8(r2)
   4e010:	d0e6eb17 	ldw	r3,-25684(gp)
   4e014:	18801d36 	bltu	r3,r2,4e08c <alt_tick+0xd8>
   4e018:	e0bffd17 	ldw	r2,-12(fp)
   4e01c:	10800403 	ldbu	r2,16(r2)
   4e020:	10803fcc 	andi	r2,r2,255
   4e024:	1000191e 	bne	r2,zero,4e08c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   4e028:	e0bffd17 	ldw	r2,-12(fp)
   4e02c:	10c00317 	ldw	r3,12(r2)
   4e030:	e0bffd17 	ldw	r2,-12(fp)
   4e034:	10800517 	ldw	r2,20(r2)
   4e038:	1009883a 	mov	r4,r2
   4e03c:	183ee83a 	callr	r3
   4e040:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   4e044:	e0bfff17 	ldw	r2,-4(fp)
   4e048:	1000031e 	bne	r2,zero,4e058 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   4e04c:	e13ffd17 	ldw	r4,-12(fp)
   4e050:	004df1c0 	call	4df1c <alt_alarm_stop>
   4e054:	00000d06 	br	4e08c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   4e058:	e0bffd17 	ldw	r2,-12(fp)
   4e05c:	10c00217 	ldw	r3,8(r2)
   4e060:	e0bfff17 	ldw	r2,-4(fp)
   4e064:	1887883a 	add	r3,r3,r2
   4e068:	e0bffd17 	ldw	r2,-12(fp)
   4e06c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   4e070:	e0bffd17 	ldw	r2,-12(fp)
   4e074:	10c00217 	ldw	r3,8(r2)
   4e078:	d0a6eb17 	ldw	r2,-25684(gp)
   4e07c:	1880032e 	bgeu	r3,r2,4e08c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   4e080:	e0bffd17 	ldw	r2,-12(fp)
   4e084:	00c00044 	movi	r3,1
   4e088:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   4e08c:	e0bffe17 	ldw	r2,-8(fp)
   4e090:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   4e094:	e0fffd17 	ldw	r3,-12(fp)
   4e098:	d0a02404 	addi	r2,gp,-32624
   4e09c:	18bfcf1e 	bne	r3,r2,4dfdc <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   4e0a0:	0001883a 	nop
}
   4e0a4:	e037883a 	mov	sp,fp
   4e0a8:	dfc00117 	ldw	ra,4(sp)
   4e0ac:	df000017 	ldw	fp,0(sp)
   4e0b0:	dec00204 	addi	sp,sp,8
   4e0b4:	f800283a 	ret

0004e0b8 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   4e0b8:	deffff04 	addi	sp,sp,-4
   4e0bc:	df000015 	stw	fp,0(sp)
   4e0c0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   4e0c4:	000170fa 	wrctl	ienable,zero
}
   4e0c8:	e037883a 	mov	sp,fp
   4e0cc:	df000017 	ldw	fp,0(sp)
   4e0d0:	dec00104 	addi	sp,sp,4
   4e0d4:	f800283a 	ret

0004e0d8 <atexit>:
   4e0d8:	200b883a 	mov	r5,r4
   4e0dc:	000d883a 	mov	r6,zero
   4e0e0:	0009883a 	mov	r4,zero
   4e0e4:	000f883a 	mov	r7,zero
   4e0e8:	004e1a01 	jmpi	4e1a0 <__register_exitproc>

0004e0ec <exit>:
   4e0ec:	defffe04 	addi	sp,sp,-8
   4e0f0:	000b883a 	mov	r5,zero
   4e0f4:	dc000015 	stw	r16,0(sp)
   4e0f8:	dfc00115 	stw	ra,4(sp)
   4e0fc:	2021883a 	mov	r16,r4
   4e100:	004e2d00 	call	4e2d0 <__call_exitprocs>
   4e104:	00800174 	movhi	r2,5
   4e108:	1080ac04 	addi	r2,r2,688
   4e10c:	11000017 	ldw	r4,0(r2)
   4e110:	20800f17 	ldw	r2,60(r4)
   4e114:	10000126 	beq	r2,zero,4e11c <exit+0x30>
   4e118:	103ee83a 	callr	r2
   4e11c:	8009883a 	mov	r4,r16
   4e120:	004e4700 	call	4e470 <_exit>

0004e124 <memcmp>:
   4e124:	01c000c4 	movi	r7,3
   4e128:	3980192e 	bgeu	r7,r6,4e190 <memcmp+0x6c>
   4e12c:	2904b03a 	or	r2,r5,r4
   4e130:	11c4703a 	and	r2,r2,r7
   4e134:	10000f26 	beq	r2,zero,4e174 <memcmp+0x50>
   4e138:	20c00003 	ldbu	r3,0(r4)
   4e13c:	28800003 	ldbu	r2,0(r5)
   4e140:	1880151e 	bne	r3,r2,4e198 <memcmp+0x74>
   4e144:	31bfff84 	addi	r6,r6,-2
   4e148:	01ffffc4 	movi	r7,-1
   4e14c:	00000406 	br	4e160 <memcmp+0x3c>
   4e150:	20c00003 	ldbu	r3,0(r4)
   4e154:	28800003 	ldbu	r2,0(r5)
   4e158:	31bfffc4 	addi	r6,r6,-1
   4e15c:	18800e1e 	bne	r3,r2,4e198 <memcmp+0x74>
   4e160:	21000044 	addi	r4,r4,1
   4e164:	29400044 	addi	r5,r5,1
   4e168:	31fff91e 	bne	r6,r7,4e150 <memcmp+0x2c>
   4e16c:	0005883a 	mov	r2,zero
   4e170:	f800283a 	ret
   4e174:	20c00017 	ldw	r3,0(r4)
   4e178:	28800017 	ldw	r2,0(r5)
   4e17c:	1880041e 	bne	r3,r2,4e190 <memcmp+0x6c>
   4e180:	31bfff04 	addi	r6,r6,-4
   4e184:	21000104 	addi	r4,r4,4
   4e188:	29400104 	addi	r5,r5,4
   4e18c:	39bff936 	bltu	r7,r6,4e174 <memcmp+0x50>
   4e190:	303fe91e 	bne	r6,zero,4e138 <memcmp+0x14>
   4e194:	003ff506 	br	4e16c <memcmp+0x48>
   4e198:	1885c83a 	sub	r2,r3,r2
   4e19c:	f800283a 	ret

0004e1a0 <__register_exitproc>:
   4e1a0:	defffa04 	addi	sp,sp,-24
   4e1a4:	00800174 	movhi	r2,5
   4e1a8:	1080ac04 	addi	r2,r2,688
   4e1ac:	dc000315 	stw	r16,12(sp)
   4e1b0:	14000017 	ldw	r16,0(r2)
   4e1b4:	dc400415 	stw	r17,16(sp)
   4e1b8:	dfc00515 	stw	ra,20(sp)
   4e1bc:	80805217 	ldw	r2,328(r16)
   4e1c0:	2023883a 	mov	r17,r4
   4e1c4:	10003e26 	beq	r2,zero,4e2c0 <__register_exitproc+0x120>
   4e1c8:	10c00117 	ldw	r3,4(r2)
   4e1cc:	020007c4 	movi	r8,31
   4e1d0:	40c0180e 	bge	r8,r3,4e234 <__register_exitproc+0x94>
   4e1d4:	00800134 	movhi	r2,4
   4e1d8:	1087fe04 	addi	r2,r2,8184
   4e1dc:	1000061e 	bne	r2,zero,4e1f8 <__register_exitproc+0x58>
   4e1e0:	00bfffc4 	movi	r2,-1
   4e1e4:	dfc00517 	ldw	ra,20(sp)
   4e1e8:	dc400417 	ldw	r17,16(sp)
   4e1ec:	dc000317 	ldw	r16,12(sp)
   4e1f0:	dec00604 	addi	sp,sp,24
   4e1f4:	f800283a 	ret
   4e1f8:	01006404 	movi	r4,400
   4e1fc:	d9400015 	stw	r5,0(sp)
   4e200:	d9800115 	stw	r6,4(sp)
   4e204:	d9c00215 	stw	r7,8(sp)
   4e208:	0041ff80 	call	41ff8 <malloc>
   4e20c:	d9400017 	ldw	r5,0(sp)
   4e210:	d9800117 	ldw	r6,4(sp)
   4e214:	d9c00217 	ldw	r7,8(sp)
   4e218:	103ff126 	beq	r2,zero,4e1e0 <__register_exitproc+0x40>
   4e21c:	80c05217 	ldw	r3,328(r16)
   4e220:	10000115 	stw	zero,4(r2)
   4e224:	10c00015 	stw	r3,0(r2)
   4e228:	80805215 	stw	r2,328(r16)
   4e22c:	10006215 	stw	zero,392(r2)
   4e230:	10006315 	stw	zero,396(r2)
   4e234:	10c00117 	ldw	r3,4(r2)
   4e238:	88000d1e 	bne	r17,zero,4e270 <__register_exitproc+0xd0>
   4e23c:	19000084 	addi	r4,r3,2
   4e240:	2109883a 	add	r4,r4,r4
   4e244:	18c00044 	addi	r3,r3,1
   4e248:	2109883a 	add	r4,r4,r4
   4e24c:	1109883a 	add	r4,r2,r4
   4e250:	10c00115 	stw	r3,4(r2)
   4e254:	0005883a 	mov	r2,zero
   4e258:	21400015 	stw	r5,0(r4)
   4e25c:	dfc00517 	ldw	ra,20(sp)
   4e260:	dc400417 	ldw	r17,16(sp)
   4e264:	dc000317 	ldw	r16,12(sp)
   4e268:	dec00604 	addi	sp,sp,24
   4e26c:	f800283a 	ret
   4e270:	02400044 	movi	r9,1
   4e274:	12806217 	ldw	r10,392(r2)
   4e278:	48d2983a 	sll	r9,r9,r3
   4e27c:	19000804 	addi	r4,r3,32
   4e280:	18d1883a 	add	r8,r3,r3
   4e284:	2109883a 	add	r4,r4,r4
   4e288:	4211883a 	add	r8,r8,r8
   4e28c:	2109883a 	add	r4,r4,r4
   4e290:	1109883a 	add	r4,r2,r4
   4e294:	1211883a 	add	r8,r2,r8
   4e298:	5254b03a 	or	r10,r10,r9
   4e29c:	21c02215 	stw	r7,136(r4)
   4e2a0:	41802215 	stw	r6,136(r8)
   4e2a4:	12806215 	stw	r10,392(r2)
   4e2a8:	01000084 	movi	r4,2
   4e2ac:	893fe31e 	bne	r17,r4,4e23c <__register_exitproc+0x9c>
   4e2b0:	11006317 	ldw	r4,396(r2)
   4e2b4:	2252b03a 	or	r9,r4,r9
   4e2b8:	12406315 	stw	r9,396(r2)
   4e2bc:	003fdf06 	br	4e23c <__register_exitproc+0x9c>
   4e2c0:	00800174 	movhi	r2,5
   4e2c4:	1087dd04 	addi	r2,r2,8052
   4e2c8:	80805215 	stw	r2,328(r16)
   4e2cc:	003fbe06 	br	4e1c8 <__register_exitproc+0x28>

0004e2d0 <__call_exitprocs>:
   4e2d0:	00800174 	movhi	r2,5
   4e2d4:	1080ac04 	addi	r2,r2,688
   4e2d8:	10800017 	ldw	r2,0(r2)
   4e2dc:	defff304 	addi	sp,sp,-52
   4e2e0:	df000b15 	stw	fp,44(sp)
   4e2e4:	d8800015 	stw	r2,0(sp)
   4e2e8:	10805204 	addi	r2,r2,328
   4e2ec:	dd400815 	stw	r21,32(sp)
   4e2f0:	dfc00c15 	stw	ra,48(sp)
   4e2f4:	ddc00a15 	stw	r23,40(sp)
   4e2f8:	dd800915 	stw	r22,36(sp)
   4e2fc:	dd000715 	stw	r20,28(sp)
   4e300:	dcc00615 	stw	r19,24(sp)
   4e304:	dc800515 	stw	r18,20(sp)
   4e308:	dc400415 	stw	r17,16(sp)
   4e30c:	dc000315 	stw	r16,12(sp)
   4e310:	d9000115 	stw	r4,4(sp)
   4e314:	2839883a 	mov	fp,r5
   4e318:	d8800215 	stw	r2,8(sp)
   4e31c:	057fffc4 	movi	r21,-1
   4e320:	d8800017 	ldw	r2,0(sp)
   4e324:	ddc00217 	ldw	r23,8(sp)
   4e328:	14805217 	ldw	r18,328(r2)
   4e32c:	90001726 	beq	r18,zero,4e38c <__call_exitprocs+0xbc>
   4e330:	94400117 	ldw	r17,4(r18)
   4e334:	8c3fffc4 	addi	r16,r17,-1
   4e338:	80001116 	blt	r16,zero,4e380 <__call_exitprocs+0xb0>
   4e33c:	8c400044 	addi	r17,r17,1
   4e340:	8427883a 	add	r19,r16,r16
   4e344:	8c63883a 	add	r17,r17,r17
   4e348:	95802204 	addi	r22,r18,136
   4e34c:	9ce7883a 	add	r19,r19,r19
   4e350:	8c63883a 	add	r17,r17,r17
   4e354:	b4e7883a 	add	r19,r22,r19
   4e358:	9463883a 	add	r17,r18,r17
   4e35c:	e0001726 	beq	fp,zero,4e3bc <__call_exitprocs+0xec>
   4e360:	8c87c83a 	sub	r3,r17,r18
   4e364:	b0c7883a 	add	r3,r22,r3
   4e368:	18c01e17 	ldw	r3,120(r3)
   4e36c:	1f001326 	beq	r3,fp,4e3bc <__call_exitprocs+0xec>
   4e370:	843fffc4 	addi	r16,r16,-1
   4e374:	9cffff04 	addi	r19,r19,-4
   4e378:	8c7fff04 	addi	r17,r17,-4
   4e37c:	857ff71e 	bne	r16,r21,4e35c <__call_exitprocs+0x8c>
   4e380:	00800134 	movhi	r2,4
   4e384:	10880304 	addi	r2,r2,8204
   4e388:	10002a1e 	bne	r2,zero,4e434 <__call_exitprocs+0x164>
   4e38c:	dfc00c17 	ldw	ra,48(sp)
   4e390:	df000b17 	ldw	fp,44(sp)
   4e394:	ddc00a17 	ldw	r23,40(sp)
   4e398:	dd800917 	ldw	r22,36(sp)
   4e39c:	dd400817 	ldw	r21,32(sp)
   4e3a0:	dd000717 	ldw	r20,28(sp)
   4e3a4:	dcc00617 	ldw	r19,24(sp)
   4e3a8:	dc800517 	ldw	r18,20(sp)
   4e3ac:	dc400417 	ldw	r17,16(sp)
   4e3b0:	dc000317 	ldw	r16,12(sp)
   4e3b4:	dec00d04 	addi	sp,sp,52
   4e3b8:	f800283a 	ret
   4e3bc:	91000117 	ldw	r4,4(r18)
   4e3c0:	88c00017 	ldw	r3,0(r17)
   4e3c4:	213fffc4 	addi	r4,r4,-1
   4e3c8:	24001526 	beq	r4,r16,4e420 <__call_exitprocs+0x150>
   4e3cc:	88000015 	stw	zero,0(r17)
   4e3d0:	183fe726 	beq	r3,zero,4e370 <__call_exitprocs+0xa0>
   4e3d4:	00800044 	movi	r2,1
   4e3d8:	1408983a 	sll	r4,r2,r16
   4e3dc:	91406217 	ldw	r5,392(r18)
   4e3e0:	95000117 	ldw	r20,4(r18)
   4e3e4:	214a703a 	and	r5,r4,r5
   4e3e8:	28000b26 	beq	r5,zero,4e418 <__call_exitprocs+0x148>
   4e3ec:	91406317 	ldw	r5,396(r18)
   4e3f0:	2148703a 	and	r4,r4,r5
   4e3f4:	20000c1e 	bne	r4,zero,4e428 <__call_exitprocs+0x158>
   4e3f8:	99400017 	ldw	r5,0(r19)
   4e3fc:	d9000117 	ldw	r4,4(sp)
   4e400:	183ee83a 	callr	r3
   4e404:	90c00117 	ldw	r3,4(r18)
   4e408:	1d3fc51e 	bne	r3,r20,4e320 <__call_exitprocs+0x50>
   4e40c:	b8c00017 	ldw	r3,0(r23)
   4e410:	1cbfd726 	beq	r3,r18,4e370 <__call_exitprocs+0xa0>
   4e414:	003fc206 	br	4e320 <__call_exitprocs+0x50>
   4e418:	183ee83a 	callr	r3
   4e41c:	003ff906 	br	4e404 <__call_exitprocs+0x134>
   4e420:	94000115 	stw	r16,4(r18)
   4e424:	003fea06 	br	4e3d0 <__call_exitprocs+0x100>
   4e428:	99000017 	ldw	r4,0(r19)
   4e42c:	183ee83a 	callr	r3
   4e430:	003ff406 	br	4e404 <__call_exitprocs+0x134>
   4e434:	90c00117 	ldw	r3,4(r18)
   4e438:	1800071e 	bne	r3,zero,4e458 <__call_exitprocs+0x188>
   4e43c:	90c00017 	ldw	r3,0(r18)
   4e440:	18000926 	beq	r3,zero,4e468 <__call_exitprocs+0x198>
   4e444:	9009883a 	mov	r4,r18
   4e448:	b8c00015 	stw	r3,0(r23)
   4e44c:	004200c0 	call	4200c <free>
   4e450:	bc800017 	ldw	r18,0(r23)
   4e454:	003fb506 	br	4e32c <__call_exitprocs+0x5c>
   4e458:	90c00017 	ldw	r3,0(r18)
   4e45c:	902f883a 	mov	r23,r18
   4e460:	1825883a 	mov	r18,r3
   4e464:	003fb106 	br	4e32c <__call_exitprocs+0x5c>
   4e468:	0007883a 	mov	r3,zero
   4e46c:	003ffb06 	br	4e45c <__call_exitprocs+0x18c>

0004e470 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   4e470:	defffc04 	addi	sp,sp,-16
   4e474:	df000315 	stw	fp,12(sp)
   4e478:	df000304 	addi	fp,sp,12
   4e47c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   4e480:	0001883a 	nop
   4e484:	e0bfff17 	ldw	r2,-4(fp)
   4e488:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
   4e48c:	e0bffd17 	ldw	r2,-12(fp)
   4e490:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   4e494:	e0bffe17 	ldw	r2,-8(fp)
   4e498:	10000226 	beq	r2,zero,4e4a4 <_exit+0x34>
    ALT_SIM_FAIL();
   4e49c:	002af070 	cmpltui	zero,zero,43969
   4e4a0:	00000106 	br	4e4a8 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   4e4a4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   4e4a8:	003fff06 	br	4e4a8 <_exit+0x38>


cpu6.elf:     file format elf32-littlenios2
cpu6.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000101b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00007274 memsz 0x00007274 flags r-x
    LOAD off    0x00008294 vaddr 0x00017294 paddr 0x00018d4c align 2**12
         filesz 0x00001ab8 memsz 0x00001ab8 flags rw-
    LOAD off    0x0000a804 vaddr 0x0001a804 paddr 0x0001a804 align 2**12
         filesz 0x00000000 memsz 0x000002e0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000705c  000101b8  000101b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000080  00017214  00017214  00008214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ab8  00017294  00018d4c  00008294  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e0  0001a804  0001a804  0000a804  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00009d4c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000b10  00000000  00000000  00009d70  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0001ed0d  00000000  00000000  0000a880  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00007213  00000000  00000000  0002958d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000875a  00000000  00000000  000307a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001548  00000000  00000000  00038efc  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000028ab  00000000  00000000  0003a444  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00006aea  00000000  00000000  0003ccef  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  000437dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000398  00000000  00000000  000437f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  000467f0  2**0
                  CONTENTS, READONLY
 17 .cpu          00000004  00000000  00000000  000467f3  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  000467f7  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  000467f8  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  000467f9  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  000467fd  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  00046801  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000a  00000000  00000000  00046805  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000a  00000000  00000000  0004680f  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000a  00000000  00000000  00046819  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000004  00000000  00000000  00046823  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000052  00000000  00000000  00046827  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00192ad8  00000000  00000000  00046879  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
000101b8 l    d  .text	00000000 .text
00017214 l    d  .rodata	00000000 .rodata
00017294 l    d  .rwdata	00000000 .rwdata
0001a804 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../cpu6_bsp//obj/HAL/src/crt0.o
000101f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00010094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 FIFO.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00010938 l     F .text	00000008 __fp_lock
00010940 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fputc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00017294 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
00012538 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
00014078 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00014194 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000141fc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000142fc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000143f0 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000144dc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
000146b8 l     F .text	00000050 alt_get_errno
00014708 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
00014950 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00018cf4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00014bc4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00014d04 l     F .text	00000038 alt_dev_reg
00017c44 l     O .rwdata	00001060 jtag_uart6
00018ca4 l     O .rwdata	00000028 altera_hostfs
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000154f8 l     F .text	00000204 altera_avalon_jtag_uart_irq
000156fc l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00015d38 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_hostfs.c
00018d34 l     O .rwdata	00000004 hcinfo.2311
00018d28 l     O .rwdata	00000004 hcinfo.2324
00018d1c l     O .rwdata	00000004 hcinfo.2333
00018d10 l     O .rwdata	00000004 hcinfo.2346
00018d04 l     O .rwdata	00000004 hcinfo.2359
00018cf8 l     O .rwdata	00000004 hcinfo.2385
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000165b8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00016d40 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 
00013554 g     F .text	00000064 _isatty_r
00014600 g     F .text	00000078 alt_main
0001297c g     F .text	00000094 strcpy
000124a0 g     F .text	00000084 _puts_r
0001a854 g     O .bss	00000100 alt_irq
000135b8 g     F .text	0000006c _lseek_r
00015064 g     F .text	00000058 altera_avalon_fifo_write_almostfull
00018d4c g       *ABS*	00000000 __flash_rwdata_start
00012fd8 g     F .text	00000098 __sflags
0001aae4 g       *ABS*	00000000 __alt_heap_start
00012880 g     F .text	0000005c __sseek
000109dc g     F .text	0000010c __sinit
00012a9c g     F .text	0000013c __swbuf_r
00010954 g     F .text	00000078 __sfmoreglue
00014698 g     F .text	00000020 __malloc_unlock
00015e34 g     F .text	0000016c alt_hostfs_open
0001385c g     F .text	0000018c memmove
00014de4 g     F .text	00000098 altera_avalon_fifo_init
000109cc g     F .text	00000010 _cleanup
00015114 g     F .text	00000058 altera_avalon_fifo_write_fifo
00000000  w      *UND*	00000000 __errno
00010000 g     F .entry	0000000c __reset
000152ac g     F .text	00000028 altera_avalon_fifo_read_backpressure
00010020 g       *ABS*	00000000 __flash_exceptions_start
000116b8 g     F .text	00000068 _fstat_r
0001a804 g     O .bss	00000004 errno
0001a818 g     O .bss	00000004 alt_argv
00020ccc g       *ABS*	00000000 _gp
00014fb0 g     F .text	0000005c altera_avalon_fifo_clear_event
00017ac4 g     O .rwdata	00000180 alt_fd_list
0001617c g     F .text	000000b8 alt_hostfs_seek
00016760 g     F .text	00000090 alt_find_dev
0001371c g     F .text	00000140 memcpy
00010948 g     F .text	0000000c _cleanup_r
00016904 g     F .text	00000084 alt_fs_reg
00016e20 g     F .text	00000078 alt_io_redirect
00017214 g       *ABS*	00000000 __DTOR_END__
00012524 g     F .text	00000014 puts
000158fc g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
0001434c g     F .text	000000a4 isatty
0001a810 g     O .bss	00000004 __malloc_top_pad
00010000 g       *ABS*	00000000 __alt_mem_mem6
00013070 g     F .text	000004e4 __sfvwrite_r
00012740 g     F .text	00000064 _sbrk_r
0001600c g     F .text	000000b8 alt_hostfs_read
000139e8 g     F .text	0000006c _read_r
00018cec g     O .rwdata	00000004 alt_max_fd
000105d0 g     F .text	0000013c _fclose_r
00010908 g     F .text	00000030 fflush
0001a80c g     O .bss	00000004 __malloc_max_sbrked_mem
0001452c g     F .text	000000d4 lseek
00018ccc g     O .rwdata	00000004 _global_impure_ptr
00013a54 g     F .text	000005fc _realloc_r
0001aae4 g       *ABS*	00000000 __bss_end
00016c50 g     F .text	000000f0 alt_iic_isr_register
00016f30 g     F .text	00000104 alt_tick
00010bf4 g     F .text	00000018 __fp_lock_all
00016c04 g     F .text	0000004c alt_ic_irq_enabled
000102c0 g     F .text	00000040 FIFO_INIT
00016e98 g     F .text	00000098 alt_alarm_stop
0001a820 g     O .bss	00000004 alt_irq_active
00015fa0 g     F .text	0000006c alt_hostfs_close
000100ec g     F .exceptions	000000cc alt_irq_handler
00017a9c g     O .rwdata	00000028 alt_dev_null
0001659c g     F .text	0000001c alt_dcache_flush_all
0001500c g     F .text	00000058 altera_avalon_fifo_write_ienable
00018d4c g       *ABS*	00000000 __ram_rwdata_end
00014f20 g     F .text	0000002c altera_avalon_fifo_read_almostempty
00018ce4 g     O .rwdata	00000008 alt_dev_list
00010d70 g     F .text	00000044 _fputc_r
00014c14 g     F .text	000000f0 write
000122f4 g     F .text	000000bc _putc_r
00017294 g       *ABS*	00000000 __ram_rodata_end
0001424c g     F .text	000000b0 fstat
000128e4 g     F .text	00000098 strcat
0001aae4 g       *ABS*	00000000 end
00011694 g     F .text	00000024 fseek
00015438 g     F .text	000000c0 altera_avalon_jtag_uart_init
00014f4c g     F .text	0000003c altera_avalon_fifo_read_event
00017214 g       *ABS*	00000000 __CTOR_LIST__
00020000 g       *ABS*	00000000 __alt_stack_pointer
00015dac g     F .text	00000088 alt_avalon_timer_sc_init
00015b14 g     F .text	00000224 altera_avalon_jtag_uart_write
00010be4 g     F .text	00000004 __sfp_lock_acquire
000151d8 g     F .text	0000004c altera_avalon_fifo_read_fifo
00013624 g     F .text	000000f8 memchr
00010f50 g     F .text	000002d0 _free_r
00012dd4 g     F .text	000001a0 __call_exitprocs
00018cd4 g     O .rwdata	00000004 __malloc_sbrk_base
000101b8 g     F .text	0000003c _start
0001a824 g     O .bss	00000004 _alt_tick_rate
0001a828 g     O .bss	00000004 _alt_nticks
000149a0 g     F .text	000000f4 read
00014d70 g     F .text	00000074 alt_sys_init
00012288 g     F .text	0000006c _open_r
000170e4 g     F .text	00000130 __register_exitproc
000157a0 g     F .text	00000068 altera_avalon_jtag_uart_close
00014050 g     F .text	00000028 __mulsi3
00017294 g       *ABS*	00000000 __ram_rwdata_start
00017214 g       *ABS*	00000000 __ram_rodata_start
0001a82c g     O .bss	00000028 __malloc_current_mallinfo
000152d4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00016988 g     F .text	000000d4 alt_get_fd
00012f74 g     F .text	00000064 _close_r
00017068 g     F .text	0000007c memcmp
00015394 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0001aae4 g       *ABS*	00000000 __alt_stack_base
000153e4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00012c60 g     F .text	00000174 __swsetup_r
00014e7c g     F .text	0000003c altera_avalon_fifo_read_status
00010ae8 g     F .text	000000fc __sfp
00017694 g     O .rwdata	00000408 __malloc_av_
00010bf0 g     F .text	00000004 __sinit_lock_release
000127a4 g     F .text	00000054 __sread
00015280 g     F .text	0000002c altera_avalon_fifo_read_other_info
000167f0 g     F .text	00000114 alt_find_file
00016608 g     F .text	000000a0 alt_dev_llist_insert
00014678 g     F .text	00000020 __malloc_lock
00014b14 g     F .text	000000b0 sbrk
00010720 g     F .text	000001e8 _fflush_r
00010d54 g     F .text	0000001c fopen
0001a804 g       *ABS*	00000000 __bss_start
000121ac g     F .text	000000dc memset
00010300 g     F .text	00000298 main
0001a81c g     O .bss	00000004 alt_envp
0001a808 g     O .bss	00000004 __malloc_max_total_mem
00015334 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00014f88 g     F .text	00000028 altera_avalon_fifo_read_level
00012bd8 g     F .text	0000001c __swbuf
000128dc g     F .text	00000008 __sclose
00020000 g       *ABS*	00000000 __alt_heap_limit
0001070c g     F .text	00000014 fclose
0001a954 g     O .bss	00000190 _atexit0
00011a28 g     F .text	00000784 _malloc_r
00018cf0 g     O .rwdata	00000004 alt_errno
00011720 g     F .text	000000a8 _fwalk
000123b0 g     F .text	000000f0 putc
00010e14 g     F .text	0000013c _malloc_trim_r
00017214 g       *ABS*	00000000 __CTOR_END__
00017214 g       *ABS*	00000000 __flash_rodata_start
00017214 g       *ABS*	00000000 __DTOR_LIST__
00014d3c g     F .text	00000034 alt_irq_init
00014a94 g     F .text	00000080 alt_release_fd
00017054 g     F .text	00000014 atexit
00012bf4 g     F .text	0000006c _write_r
00018cd0 g     O .rwdata	00000004 _impure_ptr
0001a814 g     O .bss	00000004 alt_argc
00016704 g     F .text	0000005c _do_dtors
00011220 g     F .text	00000474 _fseek_r
00010258 g     F .text	00000068 READ_FIFO
00012554 g     F .text	000001ec __srefill_r
00010020 g       .exceptions	00000000 alt_irq_entry
00010c0c g     F .text	00000018 __fp_unlock_all
00010db4 g     F .text	00000060 fputc
00018cdc g     O .rwdata	00000008 alt_fs_list
000160c4 g     F .text	000000b8 alt_hostfs_write
00010020 g       *ABS*	00000000 __ram_exceptions_start
00015224 g     F .text	0000005c altera_avalon_fifo_write_other_info
00016a78 g     F .text	00000050 alt_ic_isr_register
00018d4c g       *ABS*	00000000 _edata
0001aae4 g       *ABS*	00000000 _end
000101b8 g       *ABS*	00000000 __ram_exceptions_end
00015808 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00016b64 g     F .text	000000a0 alt_ic_irq_disable
000127f8 g     F .text	00000088 __swrite
00018cd8 g     O .rwdata	00000004 __malloc_trim_threshold
00017034 g     F .text	00000020 altera_nios2_qsys_irq_init
00010598 g     F .text	00000038 exit
000117c8 g     F .text	000000b8 _fwalk_reent
00014eb8 g     F .text	0000003c altera_avalon_fifo_read_ienable
00020000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00010be8 g     F .text	00000004 __sfp_lock_release
00010c24 g     F .text	00000130 _fopen_r
000141c0 g     F .text	0000003c _exit
0001645c g     F .text	00000140 alt_alarm_start
00014ef4 g     F .text	0000002c altera_avalon_fifo_read_almostfull
00011880 g     F .text	000001a8 __smakebuf_r
00012a10 g     F .text	0000008c strlen
000147f8 g     F .text	00000158 open
0001516c g     F .text	0000006c altera_avalon_read_fifo
00016a5c g     F .text	0000001c alt_icache_flush_all
000101f4 g     F .text	00000064 WRITE_FIFO
00018d40 g     O .rwdata	00000004 alt_priority_mask
00016ac8 g     F .text	0000009c alt_ic_irq_enable
000150bc g     F .text	00000058 altera_avalon_fifo_write_almostempty
00018d44 g     O .rwdata	00000008 alt_alarm_list
000166a8 g     F .text	0000005c _do_ctors
000140c8 g     F .text	000000cc close
0001445c g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
00010bec g     F .text	00000004 __sinit_lock_acquire
00016234 g     F .text	00000228 alt_hostfs_fstat



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08406e14 	ori	at,at,440
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100ec0 	call	100ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000306 	br	10098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   1008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)

00010094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   10094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   10098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   1009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100e8:	ef80083a 	eret

000100ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100ec:	defff904 	addi	sp,sp,-28
   100f0:	dfc00615 	stw	ra,24(sp)
   100f4:	df000515 	stw	fp,20(sp)
   100f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   100fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10100:	0005313a 	rdctl	r2,ipending
   10104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   10108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   10110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10114:	00800044 	movi	r2,1
   10118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1011c:	e0fffb17 	ldw	r3,-20(fp)
   10120:	e0bffc17 	ldw	r2,-16(fp)
   10124:	1884703a 	and	r2,r3,r2
   10128:	10001726 	beq	r2,zero,10188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1012c:	00c000b4 	movhi	r3,2
   10130:	18ea1504 	addi	r3,r3,-22444
   10134:	e0bffd17 	ldw	r2,-12(fp)
   10138:	100490fa 	slli	r2,r2,3
   1013c:	1885883a 	add	r2,r3,r2
   10140:	10c00017 	ldw	r3,0(r2)
   10144:	010000b4 	movhi	r4,2
   10148:	212a1504 	addi	r4,r4,-22444
   1014c:	e0bffd17 	ldw	r2,-12(fp)
   10150:	100490fa 	slli	r2,r2,3
   10154:	2085883a 	add	r2,r4,r2
   10158:	10800104 	addi	r2,r2,4
   1015c:	10800017 	ldw	r2,0(r2)
   10160:	1009883a 	mov	r4,r2
   10164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   10168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   1016c:	0005313a 	rdctl	r2,ipending
   10170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   10174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   10178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   1017c:	e0bffb17 	ldw	r2,-20(fp)
   10180:	103fe31e 	bne	r2,zero,10110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   10184:	00000706 	br	101a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10188:	e0bffc17 	ldw	r2,-16(fp)
   1018c:	1085883a 	add	r2,r2,r2
   10190:	e0bffc15 	stw	r2,-16(fp)
      i++;
   10194:	e0bffd17 	ldw	r2,-12(fp)
   10198:	10800044 	addi	r2,r2,1
   1019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   101a0:	003fde06 	br	1011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   101a4:	e037883a 	mov	sp,fp
   101a8:	dfc00117 	ldw	ra,4(sp)
   101ac:	df000017 	ldw	fp,0(sp)
   101b0:	dec00204 	addi	sp,sp,8
   101b4:	f800283a 	ret

Disassembly of section .text:

000101b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   101b8:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   101bc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   101c0:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   101c4:	d6833314 	ori	gp,gp,3276
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   101c8:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   101cc:	10aa0114 	ori	r2,r2,43012

    movhi r3, %hi(__bss_end)
   101d0:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   101d4:	18eab914 	ori	r3,r3,43748

    beq r2, r3, 1f
   101d8:	10c00326 	beq	r2,r3,101e8 <_start+0x30>

0:
    stw zero, (r2)
   101dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101e4:	10fffd36 	bltu	r2,r3,101dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101e8:	001445c0 	call	1445c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101ec:	00146000 	call	14600 <alt_main>

000101f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101f0:	003fff06 	br	101f0 <alt_after_alt_main>

000101f4 <WRITE_FIFO>:
 */

#include "FIFO.h"

void WRITE_FIFO(int *buffer, int inBase, int controllBase)
{
   101f4:	defffb04 	addi	sp,sp,-20
   101f8:	dfc00415 	stw	ra,16(sp)
   101fc:	df000315 	stw	fp,12(sp)
   10200:	df000304 	addi	fp,sp,12
   10204:	e13ffd15 	stw	r4,-12(fp)
   10208:	e17ffe15 	stw	r5,-8(fp)
   1020c:	e1bfff15 	stw	r6,-4(fp)

	// Check if FIFO is full before writing
	while (altera_avalon_fifo_read_level(controllBase) == ALMOST_FULL)
   10210:	0001883a 	nop
   10214:	e0bfff17 	ldw	r2,-4(fp)
   10218:	1009883a 	mov	r4,r2
   1021c:	0014f880 	call	14f88 <altera_avalon_fifo_read_level>
   10220:	10800220 	cmpeqi	r2,r2,8
   10224:	103ffb1e 	bne	r2,zero,10214 <WRITE_FIFO+0x20>
	{
	}

	// Write data to FIFO
	altera_avalon_fifo_write_fifo(inBase, controllBase, *buffer);
   10228:	e13ffe17 	ldw	r4,-8(fp)
   1022c:	e0ffff17 	ldw	r3,-4(fp)
   10230:	e0bffd17 	ldw	r2,-12(fp)
   10234:	10800017 	ldw	r2,0(r2)
   10238:	180b883a 	mov	r5,r3
   1023c:	100d883a 	mov	r6,r2
   10240:	00151140 	call	15114 <altera_avalon_fifo_write_fifo>
}
   10244:	e037883a 	mov	sp,fp
   10248:	dfc00117 	ldw	ra,4(sp)
   1024c:	df000017 	ldw	fp,0(sp)
   10250:	dec00204 	addi	sp,sp,8
   10254:	f800283a 	ret

00010258 <READ_FIFO>:

int READ_FIFO(int *buffer, int outBase, int controllBase)
{
   10258:	defffb04 	addi	sp,sp,-20
   1025c:	dfc00415 	stw	ra,16(sp)
   10260:	df000315 	stw	fp,12(sp)
   10264:	df000304 	addi	fp,sp,12
   10268:	e13ffd15 	stw	r4,-12(fp)
   1026c:	e17ffe15 	stw	r5,-8(fp)
   10270:	e1bfff15 	stw	r6,-4(fp)
	// Wait if the FIFO is empty
	// while (altera_avalon_fifo_read_status(FIFO_MEM_IN_CSR_BASE, ALTERA_AVALON_FIFO_STATUS_EMPTY))
	// 	;

	while (altera_avalon_fifo_read_level(controllBase) == ALMOST_EMTY)
   10274:	0001883a 	nop
   10278:	e0bfff17 	ldw	r2,-4(fp)
   1027c:	1009883a 	mov	r4,r2
   10280:	0014f880 	call	14f88 <altera_avalon_fifo_read_level>
   10284:	103ffc26 	beq	r2,zero,10278 <READ_FIFO+0x20>
	{
	}

	// Read the data
	*buffer = altera_avalon_fifo_read_fifo(outBase, controllBase);
   10288:	e0fffe17 	ldw	r3,-8(fp)
   1028c:	e0bfff17 	ldw	r2,-4(fp)
   10290:	1809883a 	mov	r4,r3
   10294:	100b883a 	mov	r5,r2
   10298:	00151d80 	call	151d8 <altera_avalon_fifo_read_fifo>
   1029c:	e0fffd17 	ldw	r3,-12(fp)
   102a0:	18800015 	stw	r2,0(r3)

	return *buffer;
   102a4:	e0bffd17 	ldw	r2,-12(fp)
   102a8:	10800017 	ldw	r2,0(r2)
}
   102ac:	e037883a 	mov	sp,fp
   102b0:	dfc00117 	ldw	ra,4(sp)
   102b4:	df000017 	ldw	fp,0(sp)
   102b8:	dec00204 	addi	sp,sp,8
   102bc:	f800283a 	ret

000102c0 <FIFO_INIT>:

// Initialization
void FIFO_INIT(int controllBase)
{
   102c0:	defffd04 	addi	sp,sp,-12
   102c4:	dfc00215 	stw	ra,8(sp)
   102c8:	df000115 	stw	fp,4(sp)
   102cc:	df000104 	addi	fp,sp,4
   102d0:	e13fff15 	stw	r4,-4(fp)
	altera_avalon_fifo_init(controllBase,
   102d4:	e0bfff17 	ldw	r2,-4(fp)
   102d8:	1009883a 	mov	r4,r2
   102dc:	000b883a 	mov	r5,zero
   102e0:	000d883a 	mov	r6,zero
   102e4:	01c00204 	movi	r7,8
   102e8:	0014de40 	call	14de4 <altera_avalon_fifo_init>
							0,
							ALMOST_EMTY,  // Almost empty threshold
							ALMOST_FULL); // Almost full threshold
   102ec:	e037883a 	mov	sp,fp
   102f0:	dfc00117 	ldw	ra,4(sp)
   102f4:	df000017 	ldw	fp,0(sp)
   102f8:	dec00204 	addi	sp,sp,8
   102fc:	f800283a 	ret

00010300 <main>:

typedef char INT8;
typedef unsigned char UINT8;

int main(void)
{
   10300:	deffe104 	addi	sp,sp,-124
   10304:	dfc01e15 	stw	ra,120(sp)
   10308:	df001d15 	stw	fp,116(sp)
   1030c:	df001d04 	addi	fp,sp,116
	FILE *fptr, *fptr2;
	UINT8 out;
	INT8 filename[50];
	int temp;
	// clock_t start_time, end_time;
	int count = 1;
   10310:	00800044 	movi	r2,1
   10314:	e0bfe315 	stw	r2,-116(fp)

	printf("Starting CPU6 ....\n");
   10318:	01000074 	movhi	r4,1
   1031c:	211c8504 	addi	r4,r4,29204
   10320:	00125240 	call	12524 <puts>

	while (1)
	{
		printf("\nFinal...\n");
   10324:	01000074 	movhi	r4,1
   10328:	211c8a04 	addi	r4,r4,29224
   1032c:	00125240 	call	12524 <puts>

		out = 0;
   10330:	e03fe505 	stb	zero,-108(fp)
		READ_FIFO(&temp, OUT_BASE_1to6, CONTROL_BASE_1to6);
   10334:	e0bff204 	addi	r2,fp,-56
   10338:	1009883a 	mov	r4,r2
   1033c:	014000b4 	movhi	r5,2
   10340:	29441204 	addi	r5,r5,4168
   10344:	01840034 	movhi	r6,4096
   10348:	31840004 	addi	r6,r6,4096
   1034c:	00102580 	call	10258 <READ_FIFO>
		filename[out] = temp;
   10350:	e0bfe503 	ldbu	r2,-108(fp)
   10354:	10803fcc 	andi	r2,r2,255
   10358:	e0fff217 	ldw	r3,-56(fp)
   1035c:	e13fe544 	addi	r4,fp,-107
   10360:	2085883a 	add	r2,r4,r2
   10364:	10c00005 	stb	r3,0(r2)

		if (filename[out] == '\0')
   10368:	e0bfe503 	ldbu	r2,-108(fp)
   1036c:	10803fcc 	andi	r2,r2,255
   10370:	e0ffe544 	addi	r3,fp,-107
   10374:	1885883a 	add	r2,r3,r2
   10378:	10800003 	ldbu	r2,0(r2)
   1037c:	10803fcc 	andi	r2,r2,255
   10380:	1080201c 	xori	r2,r2,128
   10384:	10bfe004 	addi	r2,r2,-128
   10388:	1000131e 	bne	r2,zero,103d8 <main+0xd8>
			exit(0);
   1038c:	0009883a 	mov	r4,zero
   10390:	00105980 	call	10598 <exit>

		while (filename[out] != '\0')
		{
			out++;
   10394:	e0bfe503 	ldbu	r2,-108(fp)
   10398:	10800044 	addi	r2,r2,1
   1039c:	e0bfe505 	stb	r2,-108(fp)
			READ_FIFO(&temp, OUT_BASE_1to6, CONTROL_BASE_1to6);
   103a0:	e0bff204 	addi	r2,fp,-56
   103a4:	1009883a 	mov	r4,r2
   103a8:	014000b4 	movhi	r5,2
   103ac:	29441204 	addi	r5,r5,4168
   103b0:	01840034 	movhi	r6,4096
   103b4:	31840004 	addi	r6,r6,4096
   103b8:	00102580 	call	10258 <READ_FIFO>
			filename[out] = temp;
   103bc:	e0bfe503 	ldbu	r2,-108(fp)
   103c0:	10803fcc 	andi	r2,r2,255
   103c4:	e0fff217 	ldw	r3,-56(fp)
   103c8:	e13fe544 	addi	r4,fp,-107
   103cc:	2085883a 	add	r2,r4,r2
   103d0:	10c00005 	stb	r3,0(r2)
   103d4:	00000106 	br	103dc <main+0xdc>
		filename[out] = temp;

		if (filename[out] == '\0')
			exit(0);

		while (filename[out] != '\0')
   103d8:	0001883a 	nop
   103dc:	e0bfe503 	ldbu	r2,-108(fp)
   103e0:	10803fcc 	andi	r2,r2,255
   103e4:	e0ffe544 	addi	r3,fp,-107
   103e8:	1885883a 	add	r2,r3,r2
   103ec:	10800003 	ldbu	r2,0(r2)
   103f0:	10803fcc 	andi	r2,r2,255
   103f4:	1080201c 	xori	r2,r2,128
   103f8:	10bfe004 	addi	r2,r2,-128
   103fc:	103fe51e 	bne	r2,zero,10394 <main+0x94>
			out++;
			READ_FIFO(&temp, OUT_BASE_1to6, CONTROL_BASE_1to6);
			filename[out] = temp;
		}

		printf("Name Received\n");
   10400:	01000074 	movhi	r4,1
   10404:	211c8d04 	addi	r4,r4,29236
   10408:	00125240 	call	12524 <puts>

		filename[out - 3] = 'j';
   1040c:	e0bfe503 	ldbu	r2,-108(fp)
   10410:	10803fcc 	andi	r2,r2,255
   10414:	10bfff44 	addi	r2,r2,-3
   10418:	e0ffe544 	addi	r3,fp,-107
   1041c:	1885883a 	add	r2,r3,r2
   10420:	00c01a84 	movi	r3,106
   10424:	10c00005 	stb	r3,0(r2)
		filename[out - 2] = 'p';
   10428:	e0bfe503 	ldbu	r2,-108(fp)
   1042c:	10803fcc 	andi	r2,r2,255
   10430:	10bfff84 	addi	r2,r2,-2
   10434:	e0ffe544 	addi	r3,fp,-107
   10438:	1885883a 	add	r2,r3,r2
   1043c:	00c01c04 	movi	r3,112
   10440:	10c00005 	stb	r3,0(r2)
		filename[out - 1] = 'g';
   10444:	e0bfe503 	ldbu	r2,-108(fp)
   10448:	10803fcc 	andi	r2,r2,255
   1044c:	10bfffc4 	addi	r2,r2,-1
   10450:	e0ffe544 	addi	r3,fp,-107
   10454:	1885883a 	add	r2,r3,r2
   10458:	00c019c4 	movi	r3,103
   1045c:	10c00005 	stb	r3,0(r2)
		filename[out] = '\0';
   10460:	e0bfe503 	ldbu	r2,-108(fp)
   10464:	10803fcc 	andi	r2,r2,255
   10468:	e0ffe544 	addi	r3,fp,-107
   1046c:	1885883a 	add	r2,r3,r2
   10470:	10000005 	stb	zero,0(r2)

		char path[50] = "/mnt/host/files/";
   10474:	009d1bb4 	movhi	r2,29806
   10478:	109b4bc4 	addi	r2,r2,27951
   1047c:	e0bff315 	stw	r2,-52(fp)
   10480:	009cdbf4 	movhi	r2,29551
   10484:	109a0bc4 	addi	r2,r2,26671
   10488:	e0bff415 	stw	r2,-48(fp)
   1048c:	009a59b4 	movhi	r2,26982
   10490:	108bdd04 	addi	r2,r2,12148
   10494:	e0bff515 	stw	r2,-44(fp)
   10498:	008bdcf4 	movhi	r2,12147
   1049c:	10995b04 	addi	r2,r2,25964
   104a0:	e0bff615 	stw	r2,-40(fp)
   104a4:	e03ff715 	stw	zero,-36(fp)
   104a8:	e03ff815 	stw	zero,-32(fp)
   104ac:	e03ff915 	stw	zero,-28(fp)
   104b0:	e03ffa15 	stw	zero,-24(fp)
   104b4:	e03ffb15 	stw	zero,-20(fp)
   104b8:	e03ffc15 	stw	zero,-16(fp)
   104bc:	e03ffd15 	stw	zero,-12(fp)
   104c0:	e03ffe15 	stw	zero,-8(fp)
   104c4:	e03fff0d 	sth	zero,-4(fp)
		strcat(path, filename);
   104c8:	e0fff304 	addi	r3,fp,-52
   104cc:	e0bfe544 	addi	r2,fp,-107
   104d0:	1809883a 	mov	r4,r3
   104d4:	100b883a 	mov	r5,r2
   104d8:	00128e40 	call	128e4 <strcat>

		fptr = fopen(path, "wb");
   104dc:	e0bff304 	addi	r2,fp,-52
   104e0:	1009883a 	mov	r4,r2
   104e4:	01400074 	movhi	r5,1
   104e8:	295c9104 	addi	r5,r5,29252
   104ec:	0010d540 	call	10d54 <fopen>
   104f0:	e0bfe415 	stw	r2,-112(fp)
   104f4:	00000106 	br	104fc <main+0x1fc>
				// fprintf(fptr2, "%02X\n", out); // Write byte in hexadecimal format followed by a space

				if (out == 0xD9)
					break;
			}
		}
   104f8:	0001883a 	nop

		// start_time = clock(); // Measure start time

		while (1)
		{
			READ_FIFO(&out, OUT_BASE_5to6, CONTROL_BASE_5to6);
   104fc:	e0bfe504 	addi	r2,fp,-108
   10500:	1009883a 	mov	r4,r2
   10504:	014000b4 	movhi	r5,2
   10508:	29441304 	addi	r5,r5,4172
   1050c:	018000b4 	movhi	r6,2
   10510:	31840804 	addi	r6,r6,4128
   10514:	00102580 	call	10258 <READ_FIFO>

			fputc(out, fptr);
   10518:	e0bfe503 	ldbu	r2,-108(fp)
   1051c:	10803fcc 	andi	r2,r2,255
   10520:	1009883a 	mov	r4,r2
   10524:	e17fe417 	ldw	r5,-112(fp)
   10528:	0010db40 	call	10db4 <fputc>
			// fprintf(fptr2, "%02X\n", out); // Write byte in hexadecimal format followed by a space

			if (out == 0xFF)
   1052c:	e0bfe503 	ldbu	r2,-108(fp)
   10530:	10803fcc 	andi	r2,r2,255
   10534:	10803fd8 	cmpnei	r2,r2,255
   10538:	103fef1e 	bne	r2,zero,104f8 <main+0x1f8>
			{
				READ_FIFO(&out, OUT_BASE_5to6, CONTROL_BASE_5to6);
   1053c:	e0bfe504 	addi	r2,fp,-108
   10540:	1009883a 	mov	r4,r2
   10544:	014000b4 	movhi	r5,2
   10548:	29441304 	addi	r5,r5,4172
   1054c:	018000b4 	movhi	r6,2
   10550:	31840804 	addi	r6,r6,4128
   10554:	00102580 	call	10258 <READ_FIFO>

				fputc(out, fptr);
   10558:	e0bfe503 	ldbu	r2,-108(fp)
   1055c:	10803fcc 	andi	r2,r2,255
   10560:	1009883a 	mov	r4,r2
   10564:	e17fe417 	ldw	r5,-112(fp)
   10568:	0010db40 	call	10db4 <fputc>
				// fprintf(fptr2, "%02X\n", out); // Write byte in hexadecimal format followed by a space

				if (out == 0xD9)
   1056c:	e0bfe503 	ldbu	r2,-108(fp)
   10570:	10803fcc 	andi	r2,r2,255
   10574:	10803658 	cmpnei	r2,r2,217
   10578:	103fdf1e 	bne	r2,zero,104f8 <main+0x1f8>
					break;
   1057c:	0001883a 	nop
		// double throughput = (double)file_size / elapsed_time; // Calculate throughput (bytes per second)

		// printf("Time taken for encoding: %f seconds\n", elapsed_time);
		// printf("Throughput for writing the image data: %.2f bytes per second\n", throughput);

		fclose(fptr);
   10580:	e13fe417 	ldw	r4,-112(fp)
   10584:	001070c0 	call	1070c <fclose>
		printf("Image Done!\n");
   10588:	01000074 	movhi	r4,1
   1058c:	211c9204 	addi	r4,r4,29256
   10590:	00125240 	call	12524 <puts>
	}
   10594:	003f6306 	br	10324 <main+0x24>

00010598 <exit>:
   10598:	defffe04 	addi	sp,sp,-8
   1059c:	000b883a 	mov	r5,zero
   105a0:	dc000015 	stw	r16,0(sp)
   105a4:	dfc00115 	stw	ra,4(sp)
   105a8:	2021883a 	mov	r16,r4
   105ac:	0012dd40 	call	12dd4 <__call_exitprocs>
   105b0:	008000b4 	movhi	r2,2
   105b4:	10a33304 	addi	r2,r2,-29492
   105b8:	11000017 	ldw	r4,0(r2)
   105bc:	20800f17 	ldw	r2,60(r4)
   105c0:	10000126 	beq	r2,zero,105c8 <exit+0x30>
   105c4:	103ee83a 	callr	r2
   105c8:	8009883a 	mov	r4,r16
   105cc:	00141c00 	call	141c0 <_exit>

000105d0 <_fclose_r>:
   105d0:	defffc04 	addi	sp,sp,-16
   105d4:	dc400115 	stw	r17,4(sp)
   105d8:	dc000015 	stw	r16,0(sp)
   105dc:	dfc00315 	stw	ra,12(sp)
   105e0:	dc800215 	stw	r18,8(sp)
   105e4:	2821883a 	mov	r16,r5
   105e8:	2023883a 	mov	r17,r4
   105ec:	28003426 	beq	r5,zero,106c0 <_fclose_r+0xf0>
   105f0:	0010be40 	call	10be4 <__sfp_lock_acquire>
   105f4:	88000226 	beq	r17,zero,10600 <_fclose_r+0x30>
   105f8:	88800e17 	ldw	r2,56(r17)
   105fc:	10003826 	beq	r2,zero,106e0 <_fclose_r+0x110>
   10600:	8080030f 	ldh	r2,12(r16)
   10604:	10002526 	beq	r2,zero,1069c <_fclose_r+0xcc>
   10608:	8809883a 	mov	r4,r17
   1060c:	800b883a 	mov	r5,r16
   10610:	00107200 	call	10720 <_fflush_r>
   10614:	1025883a 	mov	r18,r2
   10618:	80800b17 	ldw	r2,44(r16)
   1061c:	10000426 	beq	r2,zero,10630 <_fclose_r+0x60>
   10620:	81400717 	ldw	r5,28(r16)
   10624:	8809883a 	mov	r4,r17
   10628:	103ee83a 	callr	r2
   1062c:	10003516 	blt	r2,zero,10704 <_fclose_r+0x134>
   10630:	8080030b 	ldhu	r2,12(r16)
   10634:	1080200c 	andi	r2,r2,128
   10638:	10bfffcc 	andi	r2,r2,65535
   1063c:	10a0001c 	xori	r2,r2,32768
   10640:	10a00004 	addi	r2,r2,-32768
   10644:	10002b1e 	bne	r2,zero,106f4 <_fclose_r+0x124>
   10648:	81400c17 	ldw	r5,48(r16)
   1064c:	28000526 	beq	r5,zero,10664 <_fclose_r+0x94>
   10650:	80801004 	addi	r2,r16,64
   10654:	28800226 	beq	r5,r2,10660 <_fclose_r+0x90>
   10658:	8809883a 	mov	r4,r17
   1065c:	0010f500 	call	10f50 <_free_r>
   10660:	80000c15 	stw	zero,48(r16)
   10664:	81401117 	ldw	r5,68(r16)
   10668:	28000326 	beq	r5,zero,10678 <_fclose_r+0xa8>
   1066c:	8809883a 	mov	r4,r17
   10670:	0010f500 	call	10f50 <_free_r>
   10674:	80001115 	stw	zero,68(r16)
   10678:	8000030d 	sth	zero,12(r16)
   1067c:	0010be80 	call	10be8 <__sfp_lock_release>
   10680:	9005883a 	mov	r2,r18
   10684:	dfc00317 	ldw	ra,12(sp)
   10688:	dc800217 	ldw	r18,8(sp)
   1068c:	dc400117 	ldw	r17,4(sp)
   10690:	dc000017 	ldw	r16,0(sp)
   10694:	dec00404 	addi	sp,sp,16
   10698:	f800283a 	ret
   1069c:	0010be80 	call	10be8 <__sfp_lock_release>
   106a0:	0025883a 	mov	r18,zero
   106a4:	9005883a 	mov	r2,r18
   106a8:	dfc00317 	ldw	ra,12(sp)
   106ac:	dc800217 	ldw	r18,8(sp)
   106b0:	dc400117 	ldw	r17,4(sp)
   106b4:	dc000017 	ldw	r16,0(sp)
   106b8:	dec00404 	addi	sp,sp,16
   106bc:	f800283a 	ret
   106c0:	0025883a 	mov	r18,zero
   106c4:	9005883a 	mov	r2,r18
   106c8:	dfc00317 	ldw	ra,12(sp)
   106cc:	dc800217 	ldw	r18,8(sp)
   106d0:	dc400117 	ldw	r17,4(sp)
   106d4:	dc000017 	ldw	r16,0(sp)
   106d8:	dec00404 	addi	sp,sp,16
   106dc:	f800283a 	ret
   106e0:	8809883a 	mov	r4,r17
   106e4:	00109dc0 	call	109dc <__sinit>
   106e8:	8080030f 	ldh	r2,12(r16)
   106ec:	103fc61e 	bne	r2,zero,10608 <_fclose_r+0x38>
   106f0:	003fea06 	br	1069c <_fclose_r+0xcc>
   106f4:	81400417 	ldw	r5,16(r16)
   106f8:	8809883a 	mov	r4,r17
   106fc:	0010f500 	call	10f50 <_free_r>
   10700:	003fd106 	br	10648 <_fclose_r+0x78>
   10704:	04bfffc4 	movi	r18,-1
   10708:	003fc906 	br	10630 <_fclose_r+0x60>

0001070c <fclose>:
   1070c:	008000b4 	movhi	r2,2
   10710:	10a33404 	addi	r2,r2,-29488
   10714:	200b883a 	mov	r5,r4
   10718:	11000017 	ldw	r4,0(r2)
   1071c:	00105d01 	jmpi	105d0 <_fclose_r>

00010720 <_fflush_r>:
   10720:	defffb04 	addi	sp,sp,-20
   10724:	dcc00315 	stw	r19,12(sp)
   10728:	dc400115 	stw	r17,4(sp)
   1072c:	dfc00415 	stw	ra,16(sp)
   10730:	dc800215 	stw	r18,8(sp)
   10734:	dc000015 	stw	r16,0(sp)
   10738:	2027883a 	mov	r19,r4
   1073c:	2823883a 	mov	r17,r5
   10740:	20000226 	beq	r4,zero,1074c <_fflush_r+0x2c>
   10744:	20800e17 	ldw	r2,56(r4)
   10748:	10005726 	beq	r2,zero,108a8 <_fflush_r+0x188>
   1074c:	8880030b 	ldhu	r2,12(r17)
   10750:	10c0020c 	andi	r3,r2,8
   10754:	18ffffcc 	andi	r3,r3,65535
   10758:	18e0001c 	xori	r3,r3,32768
   1075c:	18e00004 	addi	r3,r3,-32768
   10760:	1800311e 	bne	r3,zero,10828 <_fflush_r+0x108>
   10764:	89000117 	ldw	r4,4(r17)
   10768:	10c20014 	ori	r3,r2,2048
   1076c:	88c0030d 	sth	r3,12(r17)
   10770:	180b883a 	mov	r5,r3
   10774:	0100520e 	bge	zero,r4,108c0 <_fflush_r+0x1a0>
   10778:	88c00a17 	ldw	r3,40(r17)
   1077c:	18002226 	beq	r3,zero,10808 <_fflush_r+0xe8>
   10780:	1084000c 	andi	r2,r2,4096
   10784:	10bfffcc 	andi	r2,r2,65535
   10788:	10a0001c 	xori	r2,r2,32768
   1078c:	10a00004 	addi	r2,r2,-32768
   10790:	10004e26 	beq	r2,zero,108cc <_fflush_r+0x1ac>
   10794:	8c001417 	ldw	r16,80(r17)
   10798:	2940010c 	andi	r5,r5,4
   1079c:	297fffcc 	andi	r5,r5,65535
   107a0:	2960001c 	xori	r5,r5,32768
   107a4:	29600004 	addi	r5,r5,-32768
   107a8:	28000626 	beq	r5,zero,107c4 <_fflush_r+0xa4>
   107ac:	89000117 	ldw	r4,4(r17)
   107b0:	88800c17 	ldw	r2,48(r17)
   107b4:	8121c83a 	sub	r16,r16,r4
   107b8:	10000226 	beq	r2,zero,107c4 <_fflush_r+0xa4>
   107bc:	88800f17 	ldw	r2,60(r17)
   107c0:	80a1c83a 	sub	r16,r16,r2
   107c4:	89400717 	ldw	r5,28(r17)
   107c8:	9809883a 	mov	r4,r19
   107cc:	800d883a 	mov	r6,r16
   107d0:	000f883a 	mov	r7,zero
   107d4:	183ee83a 	callr	r3
   107d8:	8080281e 	bne	r16,r2,1087c <_fflush_r+0x15c>
   107dc:	8880030b 	ldhu	r2,12(r17)
   107e0:	88c00417 	ldw	r3,16(r17)
   107e4:	88000115 	stw	zero,4(r17)
   107e8:	113dffcc 	andi	r4,r2,63487
   107ec:	1084000c 	andi	r2,r2,4096
   107f0:	10bfffcc 	andi	r2,r2,65535
   107f4:	10a0001c 	xori	r2,r2,32768
   107f8:	8900030d 	sth	r4,12(r17)
   107fc:	88c00015 	stw	r3,0(r17)
   10800:	10a00004 	addi	r2,r2,-32768
   10804:	10002c1e 	bne	r2,zero,108b8 <_fflush_r+0x198>
   10808:	0005883a 	mov	r2,zero
   1080c:	dfc00417 	ldw	ra,16(sp)
   10810:	dcc00317 	ldw	r19,12(sp)
   10814:	dc800217 	ldw	r18,8(sp)
   10818:	dc400117 	ldw	r17,4(sp)
   1081c:	dc000017 	ldw	r16,0(sp)
   10820:	dec00504 	addi	sp,sp,20
   10824:	f800283a 	ret
   10828:	8c800417 	ldw	r18,16(r17)
   1082c:	903ff626 	beq	r18,zero,10808 <_fflush_r+0xe8>
   10830:	8c000017 	ldw	r16,0(r17)
   10834:	108000cc 	andi	r2,r2,3
   10838:	8c800015 	stw	r18,0(r17)
   1083c:	84a1c83a 	sub	r16,r16,r18
   10840:	10001b1e 	bne	r2,zero,108b0 <_fflush_r+0x190>
   10844:	88800517 	ldw	r2,20(r17)
   10848:	88800215 	stw	r2,8(r17)
   1084c:	04000316 	blt	zero,r16,1085c <_fflush_r+0x13c>
   10850:	003fed06 	br	10808 <_fflush_r+0xe8>
   10854:	90a5883a 	add	r18,r18,r2
   10858:	043feb0e 	bge	zero,r16,10808 <_fflush_r+0xe8>
   1085c:	88800917 	ldw	r2,36(r17)
   10860:	89400717 	ldw	r5,28(r17)
   10864:	800f883a 	mov	r7,r16
   10868:	900d883a 	mov	r6,r18
   1086c:	9809883a 	mov	r4,r19
   10870:	103ee83a 	callr	r2
   10874:	80a1c83a 	sub	r16,r16,r2
   10878:	00bff616 	blt	zero,r2,10854 <_fflush_r+0x134>
   1087c:	88c0030b 	ldhu	r3,12(r17)
   10880:	00bfffc4 	movi	r2,-1
   10884:	18c01014 	ori	r3,r3,64
   10888:	88c0030d 	sth	r3,12(r17)
   1088c:	dfc00417 	ldw	ra,16(sp)
   10890:	dcc00317 	ldw	r19,12(sp)
   10894:	dc800217 	ldw	r18,8(sp)
   10898:	dc400117 	ldw	r17,4(sp)
   1089c:	dc000017 	ldw	r16,0(sp)
   108a0:	dec00504 	addi	sp,sp,20
   108a4:	f800283a 	ret
   108a8:	00109dc0 	call	109dc <__sinit>
   108ac:	003fa706 	br	1074c <_fflush_r+0x2c>
   108b0:	0005883a 	mov	r2,zero
   108b4:	003fe406 	br	10848 <_fflush_r+0x128>
   108b8:	8c001415 	stw	r16,80(r17)
   108bc:	003fd206 	br	10808 <_fflush_r+0xe8>
   108c0:	88c00f17 	ldw	r3,60(r17)
   108c4:	00ffac16 	blt	zero,r3,10778 <_fflush_r+0x58>
   108c8:	003fcf06 	br	10808 <_fflush_r+0xe8>
   108cc:	89400717 	ldw	r5,28(r17)
   108d0:	9809883a 	mov	r4,r19
   108d4:	000d883a 	mov	r6,zero
   108d8:	01c00044 	movi	r7,1
   108dc:	183ee83a 	callr	r3
   108e0:	1021883a 	mov	r16,r2
   108e4:	00bfffc4 	movi	r2,-1
   108e8:	80800326 	beq	r16,r2,108f8 <_fflush_r+0x1d8>
   108ec:	8940030b 	ldhu	r5,12(r17)
   108f0:	88c00a17 	ldw	r3,40(r17)
   108f4:	003fa806 	br	10798 <_fflush_r+0x78>
   108f8:	98c00017 	ldw	r3,0(r19)
   108fc:	00800744 	movi	r2,29
   10900:	18bfde1e 	bne	r3,r2,1087c <_fflush_r+0x15c>
   10904:	003fc006 	br	10808 <_fflush_r+0xe8>

00010908 <fflush>:
   10908:	200b883a 	mov	r5,r4
   1090c:	20000426 	beq	r4,zero,10920 <fflush+0x18>
   10910:	008000b4 	movhi	r2,2
   10914:	10a33404 	addi	r2,r2,-29488
   10918:	11000017 	ldw	r4,0(r2)
   1091c:	00107201 	jmpi	10720 <_fflush_r>
   10920:	008000b4 	movhi	r2,2
   10924:	10a33304 	addi	r2,r2,-29492
   10928:	11000017 	ldw	r4,0(r2)
   1092c:	01400074 	movhi	r5,1
   10930:	2941c804 	addi	r5,r5,1824
   10934:	00117c81 	jmpi	117c8 <_fwalk_reent>

00010938 <__fp_lock>:
   10938:	0005883a 	mov	r2,zero
   1093c:	f800283a 	ret

00010940 <__fp_unlock>:
   10940:	0005883a 	mov	r2,zero
   10944:	f800283a 	ret

00010948 <_cleanup_r>:
   10948:	01400074 	movhi	r5,1
   1094c:	2941c304 	addi	r5,r5,1804
   10950:	00117201 	jmpi	11720 <_fwalk>

00010954 <__sfmoreglue>:
   10954:	defffc04 	addi	sp,sp,-16
   10958:	dc800215 	stw	r18,8(sp)
   1095c:	2825883a 	mov	r18,r5
   10960:	dc000015 	stw	r16,0(sp)
   10964:	01401704 	movi	r5,92
   10968:	2021883a 	mov	r16,r4
   1096c:	9009883a 	mov	r4,r18
   10970:	dfc00315 	stw	ra,12(sp)
   10974:	dc400115 	stw	r17,4(sp)
   10978:	00140500 	call	14050 <__mulsi3>
   1097c:	8009883a 	mov	r4,r16
   10980:	11400304 	addi	r5,r2,12
   10984:	1023883a 	mov	r17,r2
   10988:	0011a280 	call	11a28 <_malloc_r>
   1098c:	1021883a 	mov	r16,r2
   10990:	10000726 	beq	r2,zero,109b0 <__sfmoreglue+0x5c>
   10994:	11000304 	addi	r4,r2,12
   10998:	10000015 	stw	zero,0(r2)
   1099c:	14800115 	stw	r18,4(r2)
   109a0:	11000215 	stw	r4,8(r2)
   109a4:	000b883a 	mov	r5,zero
   109a8:	880d883a 	mov	r6,r17
   109ac:	00121ac0 	call	121ac <memset>
   109b0:	8005883a 	mov	r2,r16
   109b4:	dfc00317 	ldw	ra,12(sp)
   109b8:	dc800217 	ldw	r18,8(sp)
   109bc:	dc400117 	ldw	r17,4(sp)
   109c0:	dc000017 	ldw	r16,0(sp)
   109c4:	dec00404 	addi	sp,sp,16
   109c8:	f800283a 	ret

000109cc <_cleanup>:
   109cc:	008000b4 	movhi	r2,2
   109d0:	10a33304 	addi	r2,r2,-29492
   109d4:	11000017 	ldw	r4,0(r2)
   109d8:	00109481 	jmpi	10948 <_cleanup_r>

000109dc <__sinit>:
   109dc:	20800e17 	ldw	r2,56(r4)
   109e0:	1000401e 	bne	r2,zero,10ae4 <__sinit+0x108>
   109e4:	21400117 	ldw	r5,4(r4)
   109e8:	01800074 	movhi	r6,1
   109ec:	31825204 	addi	r6,r6,2376
   109f0:	20c00217 	ldw	r3,8(r4)
   109f4:	21800f15 	stw	r6,60(r4)
   109f8:	2080bb04 	addi	r2,r4,748
   109fc:	02400044 	movi	r9,1
   10a00:	018000c4 	movi	r6,3
   10a04:	2180b915 	stw	r6,740(r4)
   10a08:	2080ba15 	stw	r2,744(r4)
   10a0c:	22400e15 	stw	r9,56(r4)
   10a10:	20800317 	ldw	r2,12(r4)
   10a14:	2000b815 	stw	zero,736(r4)
   10a18:	02000074 	movhi	r8,1
   10a1c:	4209e904 	addi	r8,r8,10148
   10a20:	01c00074 	movhi	r7,1
   10a24:	39c9fe04 	addi	r7,r7,10232
   10a28:	01800074 	movhi	r6,1
   10a2c:	318a2004 	addi	r6,r6,10368
   10a30:	01000074 	movhi	r4,1
   10a34:	210a3704 	addi	r4,r4,10460
   10a38:	02800104 	movi	r10,4
   10a3c:	28000015 	stw	zero,0(r5)
   10a40:	28000115 	stw	zero,4(r5)
   10a44:	28000215 	stw	zero,8(r5)
   10a48:	2a80030d 	sth	r10,12(r5)
   10a4c:	2800038d 	sth	zero,14(r5)
   10a50:	28000415 	stw	zero,16(r5)
   10a54:	28000515 	stw	zero,20(r5)
   10a58:	28000615 	stw	zero,24(r5)
   10a5c:	29400715 	stw	r5,28(r5)
   10a60:	2a000815 	stw	r8,32(r5)
   10a64:	29c00915 	stw	r7,36(r5)
   10a68:	29800a15 	stw	r6,40(r5)
   10a6c:	29000b15 	stw	r4,44(r5)
   10a70:	01400284 	movi	r5,10
   10a74:	18000015 	stw	zero,0(r3)
   10a78:	18000115 	stw	zero,4(r3)
   10a7c:	18000215 	stw	zero,8(r3)
   10a80:	1940030d 	sth	r5,12(r3)
   10a84:	1a40038d 	sth	r9,14(r3)
   10a88:	18000415 	stw	zero,16(r3)
   10a8c:	18000515 	stw	zero,20(r3)
   10a90:	18000615 	stw	zero,24(r3)
   10a94:	18c00715 	stw	r3,28(r3)
   10a98:	1a000815 	stw	r8,32(r3)
   10a9c:	19c00915 	stw	r7,36(r3)
   10aa0:	19800a15 	stw	r6,40(r3)
   10aa4:	19000b15 	stw	r4,44(r3)
   10aa8:	00c00484 	movi	r3,18
   10aac:	10c0030d 	sth	r3,12(r2)
   10ab0:	00c00084 	movi	r3,2
   10ab4:	10000015 	stw	zero,0(r2)
   10ab8:	10000115 	stw	zero,4(r2)
   10abc:	10000215 	stw	zero,8(r2)
   10ac0:	10c0038d 	sth	r3,14(r2)
   10ac4:	10000415 	stw	zero,16(r2)
   10ac8:	10000515 	stw	zero,20(r2)
   10acc:	10000615 	stw	zero,24(r2)
   10ad0:	10800715 	stw	r2,28(r2)
   10ad4:	12000815 	stw	r8,32(r2)
   10ad8:	11c00915 	stw	r7,36(r2)
   10adc:	11800a15 	stw	r6,40(r2)
   10ae0:	11000b15 	stw	r4,44(r2)
   10ae4:	f800283a 	ret

00010ae8 <__sfp>:
   10ae8:	defffc04 	addi	sp,sp,-16
   10aec:	008000b4 	movhi	r2,2
   10af0:	10a33304 	addi	r2,r2,-29492
   10af4:	dc400115 	stw	r17,4(sp)
   10af8:	14400017 	ldw	r17,0(r2)
   10afc:	dc800215 	stw	r18,8(sp)
   10b00:	dfc00315 	stw	ra,12(sp)
   10b04:	88800e17 	ldw	r2,56(r17)
   10b08:	dc000015 	stw	r16,0(sp)
   10b0c:	2025883a 	mov	r18,r4
   10b10:	10002826 	beq	r2,zero,10bb4 <__sfp+0xcc>
   10b14:	8c40b804 	addi	r17,r17,736
   10b18:	043fffc4 	movi	r16,-1
   10b1c:	89400117 	ldw	r5,4(r17)
   10b20:	88800217 	ldw	r2,8(r17)
   10b24:	297fffc4 	addi	r5,r5,-1
   10b28:	28000a16 	blt	r5,zero,10b54 <__sfp+0x6c>
   10b2c:	10c0030f 	ldh	r3,12(r2)
   10b30:	18000c26 	beq	r3,zero,10b64 <__sfp+0x7c>
   10b34:	10c01a04 	addi	r3,r2,104
   10b38:	00000206 	br	10b44 <__sfp+0x5c>
   10b3c:	19bfe90f 	ldh	r6,-92(r3)
   10b40:	30000826 	beq	r6,zero,10b64 <__sfp+0x7c>
   10b44:	297fffc4 	addi	r5,r5,-1
   10b48:	18bffd04 	addi	r2,r3,-12
   10b4c:	18c01704 	addi	r3,r3,92
   10b50:	2c3ffa1e 	bne	r5,r16,10b3c <__sfp+0x54>
   10b54:	88800017 	ldw	r2,0(r17)
   10b58:	10001926 	beq	r2,zero,10bc0 <__sfp+0xd8>
   10b5c:	1023883a 	mov	r17,r2
   10b60:	003fee06 	br	10b1c <__sfp+0x34>
   10b64:	00ffffc4 	movi	r3,-1
   10b68:	10c0038d 	sth	r3,14(r2)
   10b6c:	00c00044 	movi	r3,1
   10b70:	10c0030d 	sth	r3,12(r2)
   10b74:	10000015 	stw	zero,0(r2)
   10b78:	10000215 	stw	zero,8(r2)
   10b7c:	10000115 	stw	zero,4(r2)
   10b80:	10000415 	stw	zero,16(r2)
   10b84:	10000515 	stw	zero,20(r2)
   10b88:	10000615 	stw	zero,24(r2)
   10b8c:	10000c15 	stw	zero,48(r2)
   10b90:	10000d15 	stw	zero,52(r2)
   10b94:	10001115 	stw	zero,68(r2)
   10b98:	10001215 	stw	zero,72(r2)
   10b9c:	dfc00317 	ldw	ra,12(sp)
   10ba0:	dc800217 	ldw	r18,8(sp)
   10ba4:	dc400117 	ldw	r17,4(sp)
   10ba8:	dc000017 	ldw	r16,0(sp)
   10bac:	dec00404 	addi	sp,sp,16
   10bb0:	f800283a 	ret
   10bb4:	8809883a 	mov	r4,r17
   10bb8:	00109dc0 	call	109dc <__sinit>
   10bbc:	003fd506 	br	10b14 <__sfp+0x2c>
   10bc0:	9009883a 	mov	r4,r18
   10bc4:	01400104 	movi	r5,4
   10bc8:	00109540 	call	10954 <__sfmoreglue>
   10bcc:	88800015 	stw	r2,0(r17)
   10bd0:	103fe21e 	bne	r2,zero,10b5c <__sfp+0x74>
   10bd4:	00800304 	movi	r2,12
   10bd8:	90800015 	stw	r2,0(r18)
   10bdc:	0005883a 	mov	r2,zero
   10be0:	003fee06 	br	10b9c <__sfp+0xb4>

00010be4 <__sfp_lock_acquire>:
   10be4:	f800283a 	ret

00010be8 <__sfp_lock_release>:
   10be8:	f800283a 	ret

00010bec <__sinit_lock_acquire>:
   10bec:	f800283a 	ret

00010bf0 <__sinit_lock_release>:
   10bf0:	f800283a 	ret

00010bf4 <__fp_lock_all>:
   10bf4:	008000b4 	movhi	r2,2
   10bf8:	10a33404 	addi	r2,r2,-29488
   10bfc:	11000017 	ldw	r4,0(r2)
   10c00:	01400074 	movhi	r5,1
   10c04:	29424e04 	addi	r5,r5,2360
   10c08:	00117201 	jmpi	11720 <_fwalk>

00010c0c <__fp_unlock_all>:
   10c0c:	008000b4 	movhi	r2,2
   10c10:	10a33404 	addi	r2,r2,-29488
   10c14:	11000017 	ldw	r4,0(r2)
   10c18:	01400074 	movhi	r5,1
   10c1c:	29425004 	addi	r5,r5,2368
   10c20:	00117201 	jmpi	11720 <_fwalk>

00010c24 <_fopen_r>:
   10c24:	defffa04 	addi	sp,sp,-24
   10c28:	dcc00415 	stw	r19,16(sp)
   10c2c:	2827883a 	mov	r19,r5
   10c30:	300b883a 	mov	r5,r6
   10c34:	d80d883a 	mov	r6,sp
   10c38:	dc800315 	stw	r18,12(sp)
   10c3c:	dc400215 	stw	r17,8(sp)
   10c40:	dfc00515 	stw	ra,20(sp)
   10c44:	dc000115 	stw	r16,4(sp)
   10c48:	2025883a 	mov	r18,r4
   10c4c:	0012fd80 	call	12fd8 <__sflags>
   10c50:	1023883a 	mov	r17,r2
   10c54:	10002926 	beq	r2,zero,10cfc <_fopen_r+0xd8>
   10c58:	9009883a 	mov	r4,r18
   10c5c:	0010ae80 	call	10ae8 <__sfp>
   10c60:	1021883a 	mov	r16,r2
   10c64:	10002526 	beq	r2,zero,10cfc <_fopen_r+0xd8>
   10c68:	d9800017 	ldw	r6,0(sp)
   10c6c:	9009883a 	mov	r4,r18
   10c70:	980b883a 	mov	r5,r19
   10c74:	01c06d84 	movi	r7,438
   10c78:	00122880 	call	12288 <_open_r>
   10c7c:	10001c16 	blt	r2,zero,10cf0 <_fopen_r+0xcc>
   10c80:	8080038d 	sth	r2,14(r16)
   10c84:	00800074 	movhi	r2,1
   10c88:	1089e904 	addi	r2,r2,10148
   10c8c:	80800815 	stw	r2,32(r16)
   10c90:	00800074 	movhi	r2,1
   10c94:	1089fe04 	addi	r2,r2,10232
   10c98:	80800915 	stw	r2,36(r16)
   10c9c:	00800074 	movhi	r2,1
   10ca0:	108a2004 	addi	r2,r2,10368
   10ca4:	88c0400c 	andi	r3,r17,256
   10ca8:	80800a15 	stw	r2,40(r16)
   10cac:	00800074 	movhi	r2,1
   10cb0:	108a3704 	addi	r2,r2,10460
   10cb4:	80800b15 	stw	r2,44(r16)
   10cb8:	18bfffcc 	andi	r2,r3,65535
   10cbc:	10a0001c 	xori	r2,r2,32768
   10cc0:	8440030d 	sth	r17,12(r16)
   10cc4:	84000715 	stw	r16,28(r16)
   10cc8:	10a00004 	addi	r2,r2,-32768
   10ccc:	1000141e 	bne	r2,zero,10d20 <_fopen_r+0xfc>
   10cd0:	8005883a 	mov	r2,r16
   10cd4:	dfc00517 	ldw	ra,20(sp)
   10cd8:	dcc00417 	ldw	r19,16(sp)
   10cdc:	dc800317 	ldw	r18,12(sp)
   10ce0:	dc400217 	ldw	r17,8(sp)
   10ce4:	dc000117 	ldw	r16,4(sp)
   10ce8:	dec00604 	addi	sp,sp,24
   10cec:	f800283a 	ret
   10cf0:	0010be40 	call	10be4 <__sfp_lock_acquire>
   10cf4:	8000030d 	sth	zero,12(r16)
   10cf8:	0010be80 	call	10be8 <__sfp_lock_release>
   10cfc:	0021883a 	mov	r16,zero
   10d00:	8005883a 	mov	r2,r16
   10d04:	dfc00517 	ldw	ra,20(sp)
   10d08:	dcc00417 	ldw	r19,16(sp)
   10d0c:	dc800317 	ldw	r18,12(sp)
   10d10:	dc400217 	ldw	r17,8(sp)
   10d14:	dc000117 	ldw	r16,4(sp)
   10d18:	dec00604 	addi	sp,sp,24
   10d1c:	f800283a 	ret
   10d20:	9009883a 	mov	r4,r18
   10d24:	800b883a 	mov	r5,r16
   10d28:	000d883a 	mov	r6,zero
   10d2c:	01c00084 	movi	r7,2
   10d30:	00112200 	call	11220 <_fseek_r>
   10d34:	8005883a 	mov	r2,r16
   10d38:	dfc00517 	ldw	ra,20(sp)
   10d3c:	dcc00417 	ldw	r19,16(sp)
   10d40:	dc800317 	ldw	r18,12(sp)
   10d44:	dc400217 	ldw	r17,8(sp)
   10d48:	dc000117 	ldw	r16,4(sp)
   10d4c:	dec00604 	addi	sp,sp,24
   10d50:	f800283a 	ret

00010d54 <fopen>:
   10d54:	00c000b4 	movhi	r3,2
   10d58:	18e33404 	addi	r3,r3,-29488
   10d5c:	2005883a 	mov	r2,r4
   10d60:	19000017 	ldw	r4,0(r3)
   10d64:	280d883a 	mov	r6,r5
   10d68:	100b883a 	mov	r5,r2
   10d6c:	0010c241 	jmpi	10c24 <_fopen_r>

00010d70 <_fputc_r>:
   10d70:	defffc04 	addi	sp,sp,-16
   10d74:	dc000215 	stw	r16,8(sp)
   10d78:	dfc00315 	stw	ra,12(sp)
   10d7c:	2021883a 	mov	r16,r4
   10d80:	20000726 	beq	r4,zero,10da0 <_fputc_r+0x30>
   10d84:	20800e17 	ldw	r2,56(r4)
   10d88:	1000051e 	bne	r2,zero,10da0 <_fputc_r+0x30>
   10d8c:	d9400015 	stw	r5,0(sp)
   10d90:	d9800115 	stw	r6,4(sp)
   10d94:	00109dc0 	call	109dc <__sinit>
   10d98:	d9800117 	ldw	r6,4(sp)
   10d9c:	d9400017 	ldw	r5,0(sp)
   10da0:	8009883a 	mov	r4,r16
   10da4:	dfc00317 	ldw	ra,12(sp)
   10da8:	dc000217 	ldw	r16,8(sp)
   10dac:	dec00404 	addi	sp,sp,16
   10db0:	00122f41 	jmpi	122f4 <_putc_r>

00010db4 <fputc>:
   10db4:	defffc04 	addi	sp,sp,-16
   10db8:	dc000115 	stw	r16,4(sp)
   10dbc:	040000b4 	movhi	r16,2
   10dc0:	84233404 	addi	r16,r16,-29488
   10dc4:	80800017 	ldw	r2,0(r16)
   10dc8:	dc400215 	stw	r17,8(sp)
   10dcc:	dfc00315 	stw	ra,12(sp)
   10dd0:	2023883a 	mov	r17,r4
   10dd4:	280d883a 	mov	r6,r5
   10dd8:	10000726 	beq	r2,zero,10df8 <fputc+0x44>
   10ddc:	10c00e17 	ldw	r3,56(r2)
   10de0:	1800051e 	bne	r3,zero,10df8 <fputc+0x44>
   10de4:	1009883a 	mov	r4,r2
   10de8:	d9400015 	stw	r5,0(sp)
   10dec:	00109dc0 	call	109dc <__sinit>
   10df0:	80800017 	ldw	r2,0(r16)
   10df4:	d9800017 	ldw	r6,0(sp)
   10df8:	1009883a 	mov	r4,r2
   10dfc:	880b883a 	mov	r5,r17
   10e00:	dfc00317 	ldw	ra,12(sp)
   10e04:	dc400217 	ldw	r17,8(sp)
   10e08:	dc000117 	ldw	r16,4(sp)
   10e0c:	dec00404 	addi	sp,sp,16
   10e10:	00122f41 	jmpi	122f4 <_putc_r>

00010e14 <_malloc_trim_r>:
   10e14:	defffb04 	addi	sp,sp,-20
   10e18:	dcc00315 	stw	r19,12(sp)
   10e1c:	dc800215 	stw	r18,8(sp)
   10e20:	dc400115 	stw	r17,4(sp)
   10e24:	dc000015 	stw	r16,0(sp)
   10e28:	2827883a 	mov	r19,r5
   10e2c:	dfc00415 	stw	ra,16(sp)
   10e30:	04400074 	movhi	r17,1
   10e34:	8c5da504 	addi	r17,r17,30356
   10e38:	2021883a 	mov	r16,r4
   10e3c:	00146780 	call	14678 <__malloc_lock>
   10e40:	88800217 	ldw	r2,8(r17)
   10e44:	14800117 	ldw	r18,4(r2)
   10e48:	00bfff04 	movi	r2,-4
   10e4c:	90a4703a 	and	r18,r18,r2
   10e50:	9083fbc4 	addi	r2,r18,4079
   10e54:	14e7c83a 	sub	r19,r2,r19
   10e58:	9826d33a 	srli	r19,r19,12
   10e5c:	0083ffc4 	movi	r2,4095
   10e60:	9cffffc4 	addi	r19,r19,-1
   10e64:	9826933a 	slli	r19,r19,12
   10e68:	14c0060e 	bge	r2,r19,10e84 <_malloc_trim_r+0x70>
   10e6c:	8009883a 	mov	r4,r16
   10e70:	000b883a 	mov	r5,zero
   10e74:	00127400 	call	12740 <_sbrk_r>
   10e78:	88c00217 	ldw	r3,8(r17)
   10e7c:	1c87883a 	add	r3,r3,r18
   10e80:	10c00a26 	beq	r2,r3,10eac <_malloc_trim_r+0x98>
   10e84:	8009883a 	mov	r4,r16
   10e88:	00146980 	call	14698 <__malloc_unlock>
   10e8c:	0005883a 	mov	r2,zero
   10e90:	dfc00417 	ldw	ra,16(sp)
   10e94:	dcc00317 	ldw	r19,12(sp)
   10e98:	dc800217 	ldw	r18,8(sp)
   10e9c:	dc400117 	ldw	r17,4(sp)
   10ea0:	dc000017 	ldw	r16,0(sp)
   10ea4:	dec00504 	addi	sp,sp,20
   10ea8:	f800283a 	ret
   10eac:	8009883a 	mov	r4,r16
   10eb0:	04cbc83a 	sub	r5,zero,r19
   10eb4:	00127400 	call	12740 <_sbrk_r>
   10eb8:	00ffffc4 	movi	r3,-1
   10ebc:	10c01326 	beq	r2,r3,10f0c <_malloc_trim_r+0xf8>
   10ec0:	008000b4 	movhi	r2,2
   10ec4:	10aa0b04 	addi	r2,r2,-22484
   10ec8:	11000017 	ldw	r4,0(r2)
   10ecc:	88c00217 	ldw	r3,8(r17)
   10ed0:	94e5c83a 	sub	r18,r18,r19
   10ed4:	94800054 	ori	r18,r18,1
   10ed8:	24e7c83a 	sub	r19,r4,r19
   10edc:	1c800115 	stw	r18,4(r3)
   10ee0:	8009883a 	mov	r4,r16
   10ee4:	14c00015 	stw	r19,0(r2)
   10ee8:	00146980 	call	14698 <__malloc_unlock>
   10eec:	00800044 	movi	r2,1
   10ef0:	dfc00417 	ldw	ra,16(sp)
   10ef4:	dcc00317 	ldw	r19,12(sp)
   10ef8:	dc800217 	ldw	r18,8(sp)
   10efc:	dc400117 	ldw	r17,4(sp)
   10f00:	dc000017 	ldw	r16,0(sp)
   10f04:	dec00504 	addi	sp,sp,20
   10f08:	f800283a 	ret
   10f0c:	8009883a 	mov	r4,r16
   10f10:	000b883a 	mov	r5,zero
   10f14:	00127400 	call	12740 <_sbrk_r>
   10f18:	88c00217 	ldw	r3,8(r17)
   10f1c:	014003c4 	movi	r5,15
   10f20:	10c9c83a 	sub	r4,r2,r3
   10f24:	293fd70e 	bge	r5,r4,10e84 <_malloc_trim_r+0x70>
   10f28:	014000b4 	movhi	r5,2
   10f2c:	29633504 	addi	r5,r5,-29484
   10f30:	29400017 	ldw	r5,0(r5)
   10f34:	21000054 	ori	r4,r4,1
   10f38:	19000115 	stw	r4,4(r3)
   10f3c:	1145c83a 	sub	r2,r2,r5
   10f40:	014000b4 	movhi	r5,2
   10f44:	296a0b04 	addi	r5,r5,-22484
   10f48:	28800015 	stw	r2,0(r5)
   10f4c:	003fcd06 	br	10e84 <_malloc_trim_r+0x70>

00010f50 <_free_r>:
   10f50:	defffd04 	addi	sp,sp,-12
   10f54:	dc400115 	stw	r17,4(sp)
   10f58:	dc000015 	stw	r16,0(sp)
   10f5c:	dfc00215 	stw	ra,8(sp)
   10f60:	2821883a 	mov	r16,r5
   10f64:	2023883a 	mov	r17,r4
   10f68:	28004b26 	beq	r5,zero,11098 <_free_r+0x148>
   10f6c:	00146780 	call	14678 <__malloc_lock>
   10f70:	823fff17 	ldw	r8,-4(r16)
   10f74:	00bfff84 	movi	r2,-2
   10f78:	81bffe04 	addi	r6,r16,-8
   10f7c:	4084703a 	and	r2,r8,r2
   10f80:	3087883a 	add	r3,r6,r2
   10f84:	01400074 	movhi	r5,1
   10f88:	295da504 	addi	r5,r5,30356
   10f8c:	1a400117 	ldw	r9,4(r3)
   10f90:	29000217 	ldw	r4,8(r5)
   10f94:	01ffff04 	movi	r7,-4
   10f98:	49ce703a 	and	r7,r9,r7
   10f9c:	20c06526 	beq	r4,r3,11134 <_free_r+0x1e4>
   10fa0:	19c00115 	stw	r7,4(r3)
   10fa4:	4200004c 	andi	r8,r8,1
   10fa8:	40003026 	beq	r8,zero,1106c <_free_r+0x11c>
   10fac:	0009883a 	mov	r4,zero
   10fb0:	19d1883a 	add	r8,r3,r7
   10fb4:	42000117 	ldw	r8,4(r8)
   10fb8:	4200004c 	andi	r8,r8,1
   10fbc:	4000061e 	bne	r8,zero,10fd8 <_free_r+0x88>
   10fc0:	11c5883a 	add	r2,r2,r7
   10fc4:	19c00217 	ldw	r7,8(r3)
   10fc8:	20004e26 	beq	r4,zero,11104 <_free_r+0x1b4>
   10fcc:	18c00317 	ldw	r3,12(r3)
   10fd0:	38c00315 	stw	r3,12(r7)
   10fd4:	19c00215 	stw	r7,8(r3)
   10fd8:	11c00054 	ori	r7,r2,1
   10fdc:	3087883a 	add	r3,r6,r2
   10fe0:	31c00115 	stw	r7,4(r6)
   10fe4:	18800015 	stw	r2,0(r3)
   10fe8:	20001a1e 	bne	r4,zero,11054 <_free_r+0x104>
   10fec:	00c07fc4 	movi	r3,511
   10ff0:	18802e2e 	bgeu	r3,r2,110ac <_free_r+0x15c>
   10ff4:	1006d27a 	srli	r3,r2,9
   10ff8:	01000104 	movi	r4,4
   10ffc:	20c06636 	bltu	r4,r3,11198 <_free_r+0x248>
   11000:	1008d1ba 	srli	r4,r2,6
   11004:	21000e04 	addi	r4,r4,56
   11008:	210f883a 	add	r7,r4,r4
   1100c:	39cf883a 	add	r7,r7,r7
   11010:	39cf883a 	add	r7,r7,r7
   11014:	29cf883a 	add	r7,r5,r7
   11018:	38c00217 	ldw	r3,8(r7)
   1101c:	01400074 	movhi	r5,1
   11020:	295da504 	addi	r5,r5,30356
   11024:	19c06126 	beq	r3,r7,111ac <_free_r+0x25c>
   11028:	013fff04 	movi	r4,-4
   1102c:	19400117 	ldw	r5,4(r3)
   11030:	290a703a 	and	r5,r5,r4
   11034:	1140022e 	bgeu	r2,r5,11040 <_free_r+0xf0>
   11038:	18c00217 	ldw	r3,8(r3)
   1103c:	38fffb1e 	bne	r7,r3,1102c <_free_r+0xdc>
   11040:	18800317 	ldw	r2,12(r3)
   11044:	30800315 	stw	r2,12(r6)
   11048:	30c00215 	stw	r3,8(r6)
   1104c:	11800215 	stw	r6,8(r2)
   11050:	19800315 	stw	r6,12(r3)
   11054:	8809883a 	mov	r4,r17
   11058:	dfc00217 	ldw	ra,8(sp)
   1105c:	dc400117 	ldw	r17,4(sp)
   11060:	dc000017 	ldw	r16,0(sp)
   11064:	dec00304 	addi	sp,sp,12
   11068:	00146981 	jmpi	14698 <__malloc_unlock>
   1106c:	813ffe17 	ldw	r4,-8(r16)
   11070:	2a400204 	addi	r9,r5,8
   11074:	310dc83a 	sub	r6,r6,r4
   11078:	32000217 	ldw	r8,8(r6)
   1107c:	1105883a 	add	r2,r2,r4
   11080:	42404326 	beq	r8,r9,11190 <_free_r+0x240>
   11084:	32400317 	ldw	r9,12(r6)
   11088:	0009883a 	mov	r4,zero
   1108c:	42400315 	stw	r9,12(r8)
   11090:	4a000215 	stw	r8,8(r9)
   11094:	003fc606 	br	10fb0 <_free_r+0x60>
   11098:	dfc00217 	ldw	ra,8(sp)
   1109c:	dc400117 	ldw	r17,4(sp)
   110a0:	dc000017 	ldw	r16,0(sp)
   110a4:	dec00304 	addi	sp,sp,12
   110a8:	f800283a 	ret
   110ac:	1004d0fa 	srli	r2,r2,3
   110b0:	02000044 	movi	r8,1
   110b4:	29c00117 	ldw	r7,4(r5)
   110b8:	1087883a 	add	r3,r2,r2
   110bc:	18c7883a 	add	r3,r3,r3
   110c0:	1005d0ba 	srai	r2,r2,2
   110c4:	18c7883a 	add	r3,r3,r3
   110c8:	28c7883a 	add	r3,r5,r3
   110cc:	19000217 	ldw	r4,8(r3)
   110d0:	4084983a 	sll	r2,r8,r2
   110d4:	30c00315 	stw	r3,12(r6)
   110d8:	31000215 	stw	r4,8(r6)
   110dc:	11c4b03a 	or	r2,r2,r7
   110e0:	21800315 	stw	r6,12(r4)
   110e4:	8809883a 	mov	r4,r17
   110e8:	28800115 	stw	r2,4(r5)
   110ec:	19800215 	stw	r6,8(r3)
   110f0:	dfc00217 	ldw	ra,8(sp)
   110f4:	dc400117 	ldw	r17,4(sp)
   110f8:	dc000017 	ldw	r16,0(sp)
   110fc:	dec00304 	addi	sp,sp,12
   11100:	00146981 	jmpi	14698 <__malloc_unlock>
   11104:	02000074 	movhi	r8,1
   11108:	421da704 	addi	r8,r8,30364
   1110c:	3a3faf1e 	bne	r7,r8,10fcc <_free_r+0x7c>
   11110:	29800515 	stw	r6,20(r5)
   11114:	29800415 	stw	r6,16(r5)
   11118:	11000054 	ori	r4,r2,1
   1111c:	3087883a 	add	r3,r6,r2
   11120:	31c00315 	stw	r7,12(r6)
   11124:	31c00215 	stw	r7,8(r6)
   11128:	31000115 	stw	r4,4(r6)
   1112c:	18800015 	stw	r2,0(r3)
   11130:	003fc806 	br	11054 <_free_r+0x104>
   11134:	4200004c 	andi	r8,r8,1
   11138:	3885883a 	add	r2,r7,r2
   1113c:	4000071e 	bne	r8,zero,1115c <_free_r+0x20c>
   11140:	81fffe17 	ldw	r7,-8(r16)
   11144:	31cdc83a 	sub	r6,r6,r7
   11148:	30c00317 	ldw	r3,12(r6)
   1114c:	31000217 	ldw	r4,8(r6)
   11150:	11c5883a 	add	r2,r2,r7
   11154:	20c00315 	stw	r3,12(r4)
   11158:	19000215 	stw	r4,8(r3)
   1115c:	00c000b4 	movhi	r3,2
   11160:	18e33604 	addi	r3,r3,-29480
   11164:	18c00017 	ldw	r3,0(r3)
   11168:	11000054 	ori	r4,r2,1
   1116c:	31000115 	stw	r4,4(r6)
   11170:	29800215 	stw	r6,8(r5)
   11174:	10ffb736 	bltu	r2,r3,11054 <_free_r+0x104>
   11178:	008000b4 	movhi	r2,2
   1117c:	10aa0404 	addi	r2,r2,-22512
   11180:	11400017 	ldw	r5,0(r2)
   11184:	8809883a 	mov	r4,r17
   11188:	0010e140 	call	10e14 <_malloc_trim_r>
   1118c:	003fb106 	br	11054 <_free_r+0x104>
   11190:	01000044 	movi	r4,1
   11194:	003f8606 	br	10fb0 <_free_r+0x60>
   11198:	01000504 	movi	r4,20
   1119c:	20c00b36 	bltu	r4,r3,111cc <_free_r+0x27c>
   111a0:	190016c4 	addi	r4,r3,91
   111a4:	210f883a 	add	r7,r4,r4
   111a8:	003f9806 	br	1100c <_free_r+0xbc>
   111ac:	2009d0ba 	srai	r4,r4,2
   111b0:	00800044 	movi	r2,1
   111b4:	29c00117 	ldw	r7,4(r5)
   111b8:	1108983a 	sll	r4,r2,r4
   111bc:	1805883a 	mov	r2,r3
   111c0:	21c8b03a 	or	r4,r4,r7
   111c4:	29000115 	stw	r4,4(r5)
   111c8:	003f9e06 	br	11044 <_free_r+0xf4>
   111cc:	01001504 	movi	r4,84
   111d0:	20c00436 	bltu	r4,r3,111e4 <_free_r+0x294>
   111d4:	1008d33a 	srli	r4,r2,12
   111d8:	21001b84 	addi	r4,r4,110
   111dc:	210f883a 	add	r7,r4,r4
   111e0:	003f8a06 	br	1100c <_free_r+0xbc>
   111e4:	01005504 	movi	r4,340
   111e8:	20c00436 	bltu	r4,r3,111fc <_free_r+0x2ac>
   111ec:	1008d3fa 	srli	r4,r2,15
   111f0:	21001dc4 	addi	r4,r4,119
   111f4:	210f883a 	add	r7,r4,r4
   111f8:	003f8406 	br	1100c <_free_r+0xbc>
   111fc:	01015504 	movi	r4,1364
   11200:	20c00436 	bltu	r4,r3,11214 <_free_r+0x2c4>
   11204:	1008d4ba 	srli	r4,r2,18
   11208:	21001f04 	addi	r4,r4,124
   1120c:	210f883a 	add	r7,r4,r4
   11210:	003f7e06 	br	1100c <_free_r+0xbc>
   11214:	01c03f04 	movi	r7,252
   11218:	01001f84 	movi	r4,126
   1121c:	003f7b06 	br	1100c <_free_r+0xbc>

00011220 <_fseek_r>:
   11220:	deffe804 	addi	sp,sp,-96
   11224:	dd001315 	stw	r20,76(sp)
   11228:	dc801115 	stw	r18,68(sp)
   1122c:	dc401015 	stw	r17,64(sp)
   11230:	dc000f15 	stw	r16,60(sp)
   11234:	dfc01715 	stw	ra,92(sp)
   11238:	ddc01615 	stw	r23,88(sp)
   1123c:	dd801515 	stw	r22,84(sp)
   11240:	dd401415 	stw	r21,80(sp)
   11244:	dcc01215 	stw	r19,72(sp)
   11248:	2023883a 	mov	r17,r4
   1124c:	2821883a 	mov	r16,r5
   11250:	3029883a 	mov	r20,r6
   11254:	3825883a 	mov	r18,r7
   11258:	20000226 	beq	r4,zero,11264 <_fseek_r+0x44>
   1125c:	20800e17 	ldw	r2,56(r4)
   11260:	10006226 	beq	r2,zero,113ec <_fseek_r+0x1cc>
   11264:	80c0030b 	ldhu	r3,12(r16)
   11268:	00804204 	movi	r2,264
   1126c:	18c0420c 	andi	r3,r3,264
   11270:	18806326 	beq	r3,r2,11400 <_fseek_r+0x1e0>
   11274:	84c00a17 	ldw	r19,40(r16)
   11278:	98010226 	beq	r19,zero,11684 <_fseek_r+0x464>
   1127c:	00800044 	movi	r2,1
   11280:	90803d26 	beq	r18,r2,11378 <_fseek_r+0x158>
   11284:	00800084 	movi	r2,2
   11288:	90800126 	beq	r18,r2,11290 <_fseek_r+0x70>
   1128c:	90002c1e 	bne	r18,zero,11340 <_fseek_r+0x120>
   11290:	80800417 	ldw	r2,16(r16)
   11294:	002d883a 	mov	r22,zero
   11298:	002b883a 	mov	r21,zero
   1129c:	1000e526 	beq	r2,zero,11634 <_fseek_r+0x414>
   112a0:	80c0030b 	ldhu	r3,12(r16)
   112a4:	1882068c 	andi	r2,r3,2074
   112a8:	1809883a 	mov	r4,r3
   112ac:	10000a1e 	bne	r2,zero,112d8 <_fseek_r+0xb8>
   112b0:	1881000c 	andi	r2,r3,1024
   112b4:	10bfffcc 	andi	r2,r2,65535
   112b8:	10a0001c 	xori	r2,r2,32768
   112bc:	10a00004 	addi	r2,r2,-32768
   112c0:	1000631e 	bne	r2,zero,11450 <_fseek_r+0x230>
   112c4:	00800074 	movhi	r2,1
   112c8:	108a2004 	addi	r2,r2,10368
   112cc:	98805026 	beq	r19,r2,11410 <_fseek_r+0x1f0>
   112d0:	18c20014 	ori	r3,r3,2048
   112d4:	80c0030d 	sth	r3,12(r16)
   112d8:	8809883a 	mov	r4,r17
   112dc:	800b883a 	mov	r5,r16
   112e0:	00107200 	call	10720 <_fflush_r>
   112e4:	1000181e 	bne	r2,zero,11348 <_fseek_r+0x128>
   112e8:	81400717 	ldw	r5,28(r16)
   112ec:	8809883a 	mov	r4,r17
   112f0:	a00d883a 	mov	r6,r20
   112f4:	900f883a 	mov	r7,r18
   112f8:	983ee83a 	callr	r19
   112fc:	00ffffc4 	movi	r3,-1
   11300:	10c01126 	beq	r2,r3,11348 <_fseek_r+0x128>
   11304:	81400c17 	ldw	r5,48(r16)
   11308:	28000526 	beq	r5,zero,11320 <_fseek_r+0x100>
   1130c:	80801004 	addi	r2,r16,64
   11310:	28800226 	beq	r5,r2,1131c <_fseek_r+0xfc>
   11314:	8809883a 	mov	r4,r17
   11318:	0010f500 	call	10f50 <_free_r>
   1131c:	80000c15 	stw	zero,48(r16)
   11320:	8080030b 	ldhu	r2,12(r16)
   11324:	80c00417 	ldw	r3,16(r16)
   11328:	80000115 	stw	zero,4(r16)
   1132c:	10bdf7cc 	andi	r2,r2,63455
   11330:	8080030d 	sth	r2,12(r16)
   11334:	80c00015 	stw	r3,0(r16)
   11338:	0005883a 	mov	r2,zero
   1133c:	00000306 	br	1134c <_fseek_r+0x12c>
   11340:	00800584 	movi	r2,22
   11344:	88800015 	stw	r2,0(r17)
   11348:	00bfffc4 	movi	r2,-1
   1134c:	dfc01717 	ldw	ra,92(sp)
   11350:	ddc01617 	ldw	r23,88(sp)
   11354:	dd801517 	ldw	r22,84(sp)
   11358:	dd401417 	ldw	r21,80(sp)
   1135c:	dd001317 	ldw	r20,76(sp)
   11360:	dcc01217 	ldw	r19,72(sp)
   11364:	dc801117 	ldw	r18,68(sp)
   11368:	dc401017 	ldw	r17,64(sp)
   1136c:	dc000f17 	ldw	r16,60(sp)
   11370:	dec01804 	addi	sp,sp,96
   11374:	f800283a 	ret
   11378:	8809883a 	mov	r4,r17
   1137c:	800b883a 	mov	r5,r16
   11380:	00107200 	call	10720 <_fflush_r>
   11384:	8080030b 	ldhu	r2,12(r16)
   11388:	10c4000c 	andi	r3,r2,4096
   1138c:	18ffffcc 	andi	r3,r3,65535
   11390:	18e0001c 	xori	r3,r3,32768
   11394:	18e00004 	addi	r3,r3,-32768
   11398:	18007d26 	beq	r3,zero,11590 <_fseek_r+0x370>
   1139c:	85401417 	ldw	r21,80(r16)
   113a0:	10c0010c 	andi	r3,r2,4
   113a4:	18ffffcc 	andi	r3,r3,65535
   113a8:	18e0001c 	xori	r3,r3,32768
   113ac:	18e00004 	addi	r3,r3,-32768
   113b0:	18005f1e 	bne	r3,zero,11530 <_fseek_r+0x310>
   113b4:	1080020c 	andi	r2,r2,8
   113b8:	10bfffcc 	andi	r2,r2,65535
   113bc:	10a0001c 	xori	r2,r2,32768
   113c0:	10a00004 	addi	r2,r2,-32768
   113c4:	10007026 	beq	r2,zero,11588 <_fseek_r+0x368>
   113c8:	80c00017 	ldw	r3,0(r16)
   113cc:	80800417 	ldw	r2,16(r16)
   113d0:	18000226 	beq	r3,zero,113dc <_fseek_r+0x1bc>
   113d4:	1887c83a 	sub	r3,r3,r2
   113d8:	a8eb883a 	add	r21,r21,r3
   113dc:	a569883a 	add	r20,r20,r21
   113e0:	05800044 	movi	r22,1
   113e4:	0025883a 	mov	r18,zero
   113e8:	003fac06 	br	1129c <_fseek_r+0x7c>
   113ec:	00109dc0 	call	109dc <__sinit>
   113f0:	80c0030b 	ldhu	r3,12(r16)
   113f4:	00804204 	movi	r2,264
   113f8:	18c0420c 	andi	r3,r3,264
   113fc:	18bf9d1e 	bne	r3,r2,11274 <_fseek_r+0x54>
   11400:	8809883a 	mov	r4,r17
   11404:	800b883a 	mov	r5,r16
   11408:	00107200 	call	10720 <_fflush_r>
   1140c:	003f9906 	br	11274 <_fseek_r+0x54>
   11410:	8140038f 	ldh	r5,14(r16)
   11414:	283fae16 	blt	r5,zero,112d0 <_fseek_r+0xb0>
   11418:	8809883a 	mov	r4,r17
   1141c:	d80d883a 	mov	r6,sp
   11420:	00116b80 	call	116b8 <_fstat_r>
   11424:	1000741e 	bne	r2,zero,115f8 <_fseek_r+0x3d8>
   11428:	d8c00117 	ldw	r3,4(sp)
   1142c:	00a00014 	movui	r2,32768
   11430:	18fc000c 	andi	r3,r3,61440
   11434:	1880701e 	bne	r3,r2,115f8 <_fseek_r+0x3d8>
   11438:	8100030b 	ldhu	r4,12(r16)
   1143c:	00810004 	movi	r2,1024
   11440:	80801315 	stw	r2,76(r16)
   11444:	2084b03a 	or	r2,r4,r2
   11448:	1009883a 	mov	r4,r2
   1144c:	8080030d 	sth	r2,12(r16)
   11450:	90003f1e 	bne	r18,zero,11550 <_fseek_r+0x330>
   11454:	a02f883a 	mov	r23,r20
   11458:	b000461e 	bne	r22,zero,11574 <_fseek_r+0x354>
   1145c:	2084000c 	andi	r2,r4,4096
   11460:	10bfffcc 	andi	r2,r2,65535
   11464:	10a0001c 	xori	r2,r2,32768
   11468:	10a00004 	addi	r2,r2,-32768
   1146c:	10007526 	beq	r2,zero,11644 <_fseek_r+0x424>
   11470:	80801417 	ldw	r2,80(r16)
   11474:	80c00117 	ldw	r3,4(r16)
   11478:	81400c17 	ldw	r5,48(r16)
   1147c:	10ebc83a 	sub	r21,r2,r3
   11480:	28007926 	beq	r5,zero,11668 <_fseek_r+0x448>
   11484:	81c00f17 	ldw	r7,60(r16)
   11488:	a9ebc83a 	sub	r21,r21,r7
   1148c:	80800e17 	ldw	r2,56(r16)
   11490:	81800417 	ldw	r6,16(r16)
   11494:	a8eb883a 	add	r21,r21,r3
   11498:	1185c83a 	sub	r2,r2,r6
   1149c:	a8abc83a 	sub	r21,r21,r2
   114a0:	3885883a 	add	r2,r7,r2
   114a4:	2208000c 	andi	r8,r4,8192
   114a8:	423fffcc 	andi	r8,r8,65535
   114ac:	4220001c 	xori	r8,r8,32768
   114b0:	42200004 	addi	r8,r8,-32768
   114b4:	4000031e 	bne	r8,zero,114c4 <_fseek_r+0x2a4>
   114b8:	bd400216 	blt	r23,r21,114c4 <_fseek_r+0x2a4>
   114bc:	a887883a 	add	r3,r21,r2
   114c0:	b8c03d36 	bltu	r23,r3,115b8 <_fseek_r+0x398>
   114c4:	85401317 	ldw	r21,76(r16)
   114c8:	81400717 	ldw	r5,28(r16)
   114cc:	8809883a 	mov	r4,r17
   114d0:	056bc83a 	sub	r21,zero,r21
   114d4:	bd6a703a 	and	r21,r23,r21
   114d8:	a80d883a 	mov	r6,r21
   114dc:	000f883a 	mov	r7,zero
   114e0:	983ee83a 	callr	r19
   114e4:	00ffffc4 	movi	r3,-1
   114e8:	10ff7b26 	beq	r2,r3,112d8 <_fseek_r+0xb8>
   114ec:	80800417 	ldw	r2,16(r16)
   114f0:	81400c17 	ldw	r5,48(r16)
   114f4:	80000115 	stw	zero,4(r16)
   114f8:	80800015 	stw	r2,0(r16)
   114fc:	28000526 	beq	r5,zero,11514 <_fseek_r+0x2f4>
   11500:	80801004 	addi	r2,r16,64
   11504:	28800226 	beq	r5,r2,11510 <_fseek_r+0x2f0>
   11508:	8809883a 	mov	r4,r17
   1150c:	0010f500 	call	10f50 <_free_r>
   11510:	80000c15 	stw	zero,48(r16)
   11514:	8080030b 	ldhu	r2,12(r16)
   11518:	bd6fc83a 	sub	r23,r23,r21
   1151c:	10bff7cc 	andi	r2,r2,65503
   11520:	8080030d 	sth	r2,12(r16)
   11524:	b800361e 	bne	r23,zero,11600 <_fseek_r+0x3e0>
   11528:	0005883a 	mov	r2,zero
   1152c:	003f8706 	br	1134c <_fseek_r+0x12c>
   11530:	80c00117 	ldw	r3,4(r16)
   11534:	80800c17 	ldw	r2,48(r16)
   11538:	a8ebc83a 	sub	r21,r21,r3
   1153c:	10001226 	beq	r2,zero,11588 <_fseek_r+0x368>
   11540:	80c00f17 	ldw	r3,60(r16)
   11544:	80800417 	ldw	r2,16(r16)
   11548:	a8ebc83a 	sub	r21,r21,r3
   1154c:	003fa306 	br	113dc <_fseek_r+0x1bc>
   11550:	8140038f 	ldh	r5,14(r16)
   11554:	8809883a 	mov	r4,r17
   11558:	d80d883a 	mov	r6,sp
   1155c:	00116b80 	call	116b8 <_fstat_r>
   11560:	103f5d1e 	bne	r2,zero,112d8 <_fseek_r+0xb8>
   11564:	ddc00417 	ldw	r23,16(sp)
   11568:	8100030b 	ldhu	r4,12(r16)
   1156c:	a5ef883a 	add	r23,r20,r23
   11570:	b03fba26 	beq	r22,zero,1145c <_fseek_r+0x23c>
   11574:	81400c17 	ldw	r5,48(r16)
   11578:	80c00117 	ldw	r3,4(r16)
   1157c:	28003a26 	beq	r5,zero,11668 <_fseek_r+0x448>
   11580:	81c00f17 	ldw	r7,60(r16)
   11584:	003fc106 	br	1148c <_fseek_r+0x26c>
   11588:	80800417 	ldw	r2,16(r16)
   1158c:	003f9306 	br	113dc <_fseek_r+0x1bc>
   11590:	81400717 	ldw	r5,28(r16)
   11594:	8809883a 	mov	r4,r17
   11598:	000d883a 	mov	r6,zero
   1159c:	900f883a 	mov	r7,r18
   115a0:	983ee83a 	callr	r19
   115a4:	102b883a 	mov	r21,r2
   115a8:	00bfffc4 	movi	r2,-1
   115ac:	a8bf6626 	beq	r21,r2,11348 <_fseek_r+0x128>
   115b0:	8080030b 	ldhu	r2,12(r16)
   115b4:	003f7a06 	br	113a0 <_fseek_r+0x180>
   115b8:	bd6bc83a 	sub	r21,r23,r21
   115bc:	354d883a 	add	r6,r6,r21
   115c0:	1545c83a 	sub	r2,r2,r21
   115c4:	81800015 	stw	r6,0(r16)
   115c8:	80800115 	stw	r2,4(r16)
   115cc:	28000626 	beq	r5,zero,115e8 <_fseek_r+0x3c8>
   115d0:	80801004 	addi	r2,r16,64
   115d4:	28800326 	beq	r5,r2,115e4 <_fseek_r+0x3c4>
   115d8:	8809883a 	mov	r4,r17
   115dc:	0010f500 	call	10f50 <_free_r>
   115e0:	8100030b 	ldhu	r4,12(r16)
   115e4:	80000c15 	stw	zero,48(r16)
   115e8:	213ff7cc 	andi	r4,r4,65503
   115ec:	8100030d 	sth	r4,12(r16)
   115f0:	0005883a 	mov	r2,zero
   115f4:	003f5506 	br	1134c <_fseek_r+0x12c>
   115f8:	80c0030b 	ldhu	r3,12(r16)
   115fc:	003f3406 	br	112d0 <_fseek_r+0xb0>
   11600:	8809883a 	mov	r4,r17
   11604:	800b883a 	mov	r5,r16
   11608:	00125540 	call	12554 <__srefill_r>
   1160c:	103f321e 	bne	r2,zero,112d8 <_fseek_r+0xb8>
   11610:	80800117 	ldw	r2,4(r16)
   11614:	15ff3036 	bltu	r2,r23,112d8 <_fseek_r+0xb8>
   11618:	80c00017 	ldw	r3,0(r16)
   1161c:	15c5c83a 	sub	r2,r2,r23
   11620:	80800115 	stw	r2,4(r16)
   11624:	1def883a 	add	r23,r3,r23
   11628:	85c00015 	stw	r23,0(r16)
   1162c:	0005883a 	mov	r2,zero
   11630:	003f4606 	br	1134c <_fseek_r+0x12c>
   11634:	8809883a 	mov	r4,r17
   11638:	800b883a 	mov	r5,r16
   1163c:	00118800 	call	11880 <__smakebuf_r>
   11640:	003f1706 	br	112a0 <_fseek_r+0x80>
   11644:	81400717 	ldw	r5,28(r16)
   11648:	8809883a 	mov	r4,r17
   1164c:	000d883a 	mov	r6,zero
   11650:	01c00044 	movi	r7,1
   11654:	983ee83a 	callr	r19
   11658:	00ffffc4 	movi	r3,-1
   1165c:	10ff1e26 	beq	r2,r3,112d8 <_fseek_r+0xb8>
   11660:	8100030b 	ldhu	r4,12(r16)
   11664:	003f8306 	br	11474 <_fseek_r+0x254>
   11668:	80800017 	ldw	r2,0(r16)
   1166c:	81800417 	ldw	r6,16(r16)
   11670:	000b883a 	mov	r5,zero
   11674:	1185c83a 	sub	r2,r2,r6
   11678:	a8abc83a 	sub	r21,r21,r2
   1167c:	1885883a 	add	r2,r3,r2
   11680:	003f8806 	br	114a4 <_fseek_r+0x284>
   11684:	00800744 	movi	r2,29
   11688:	88800015 	stw	r2,0(r17)
   1168c:	00bfffc4 	movi	r2,-1
   11690:	003f2e06 	br	1134c <_fseek_r+0x12c>

00011694 <fseek>:
   11694:	008000b4 	movhi	r2,2
   11698:	10a33404 	addi	r2,r2,-29488
   1169c:	2007883a 	mov	r3,r4
   116a0:	11000017 	ldw	r4,0(r2)
   116a4:	2805883a 	mov	r2,r5
   116a8:	300f883a 	mov	r7,r6
   116ac:	180b883a 	mov	r5,r3
   116b0:	100d883a 	mov	r6,r2
   116b4:	00112201 	jmpi	11220 <_fseek_r>

000116b8 <_fstat_r>:
   116b8:	defffd04 	addi	sp,sp,-12
   116bc:	dc400115 	stw	r17,4(sp)
   116c0:	dc000015 	stw	r16,0(sp)
   116c4:	2023883a 	mov	r17,r4
   116c8:	040000b4 	movhi	r16,2
   116cc:	842a0104 	addi	r16,r16,-22524
   116d0:	2809883a 	mov	r4,r5
   116d4:	300b883a 	mov	r5,r6
   116d8:	dfc00215 	stw	ra,8(sp)
   116dc:	80000015 	stw	zero,0(r16)
   116e0:	001424c0 	call	1424c <fstat>
   116e4:	00ffffc4 	movi	r3,-1
   116e8:	10c00526 	beq	r2,r3,11700 <_fstat_r+0x48>
   116ec:	dfc00217 	ldw	ra,8(sp)
   116f0:	dc400117 	ldw	r17,4(sp)
   116f4:	dc000017 	ldw	r16,0(sp)
   116f8:	dec00304 	addi	sp,sp,12
   116fc:	f800283a 	ret
   11700:	80c00017 	ldw	r3,0(r16)
   11704:	183ff926 	beq	r3,zero,116ec <_fstat_r+0x34>
   11708:	88c00015 	stw	r3,0(r17)
   1170c:	dfc00217 	ldw	ra,8(sp)
   11710:	dc400117 	ldw	r17,4(sp)
   11714:	dc000017 	ldw	r16,0(sp)
   11718:	dec00304 	addi	sp,sp,12
   1171c:	f800283a 	ret

00011720 <_fwalk>:
   11720:	defff904 	addi	sp,sp,-28
   11724:	dcc00315 	stw	r19,12(sp)
   11728:	24c0b804 	addi	r19,r4,736
   1172c:	dd400515 	stw	r21,20(sp)
   11730:	dd000415 	stw	r20,16(sp)
   11734:	dfc00615 	stw	ra,24(sp)
   11738:	dc800215 	stw	r18,8(sp)
   1173c:	dc400115 	stw	r17,4(sp)
   11740:	dc000015 	stw	r16,0(sp)
   11744:	282b883a 	mov	r21,r5
   11748:	0029883a 	mov	r20,zero
   1174c:	0010be40 	call	10be4 <__sfp_lock_acquire>
   11750:	98001226 	beq	r19,zero,1179c <_fwalk+0x7c>
   11754:	04bfffc4 	movi	r18,-1
   11758:	9c400117 	ldw	r17,4(r19)
   1175c:	9c000217 	ldw	r16,8(r19)
   11760:	8c7fffc4 	addi	r17,r17,-1
   11764:	88000b16 	blt	r17,zero,11794 <_fwalk+0x74>
   11768:	84000304 	addi	r16,r16,12
   1176c:	80c0000f 	ldh	r3,0(r16)
   11770:	8c7fffc4 	addi	r17,r17,-1
   11774:	813ffd04 	addi	r4,r16,-12
   11778:	18000426 	beq	r3,zero,1178c <_fwalk+0x6c>
   1177c:	80c0008f 	ldh	r3,2(r16)
   11780:	1c800226 	beq	r3,r18,1178c <_fwalk+0x6c>
   11784:	a83ee83a 	callr	r21
   11788:	a0a8b03a 	or	r20,r20,r2
   1178c:	84001704 	addi	r16,r16,92
   11790:	8cbff61e 	bne	r17,r18,1176c <_fwalk+0x4c>
   11794:	9cc00017 	ldw	r19,0(r19)
   11798:	983fef1e 	bne	r19,zero,11758 <_fwalk+0x38>
   1179c:	0010be80 	call	10be8 <__sfp_lock_release>
   117a0:	a005883a 	mov	r2,r20
   117a4:	dfc00617 	ldw	ra,24(sp)
   117a8:	dd400517 	ldw	r21,20(sp)
   117ac:	dd000417 	ldw	r20,16(sp)
   117b0:	dcc00317 	ldw	r19,12(sp)
   117b4:	dc800217 	ldw	r18,8(sp)
   117b8:	dc400117 	ldw	r17,4(sp)
   117bc:	dc000017 	ldw	r16,0(sp)
   117c0:	dec00704 	addi	sp,sp,28
   117c4:	f800283a 	ret

000117c8 <_fwalk_reent>:
   117c8:	defff804 	addi	sp,sp,-32
   117cc:	dcc00315 	stw	r19,12(sp)
   117d0:	24c0b804 	addi	r19,r4,736
   117d4:	dd800615 	stw	r22,24(sp)
   117d8:	dd400515 	stw	r21,20(sp)
   117dc:	dd000415 	stw	r20,16(sp)
   117e0:	dfc00715 	stw	ra,28(sp)
   117e4:	dc800215 	stw	r18,8(sp)
   117e8:	dc400115 	stw	r17,4(sp)
   117ec:	dc000015 	stw	r16,0(sp)
   117f0:	2029883a 	mov	r20,r4
   117f4:	282b883a 	mov	r21,r5
   117f8:	002d883a 	mov	r22,zero
   117fc:	0010be40 	call	10be4 <__sfp_lock_acquire>
   11800:	98001326 	beq	r19,zero,11850 <_fwalk_reent+0x88>
   11804:	04bfffc4 	movi	r18,-1
   11808:	9c400117 	ldw	r17,4(r19)
   1180c:	9c000217 	ldw	r16,8(r19)
   11810:	8c7fffc4 	addi	r17,r17,-1
   11814:	88000c16 	blt	r17,zero,11848 <_fwalk_reent+0x80>
   11818:	84000304 	addi	r16,r16,12
   1181c:	80c0000f 	ldh	r3,0(r16)
   11820:	8c7fffc4 	addi	r17,r17,-1
   11824:	817ffd04 	addi	r5,r16,-12
   11828:	18000526 	beq	r3,zero,11840 <_fwalk_reent+0x78>
   1182c:	80c0008f 	ldh	r3,2(r16)
   11830:	a009883a 	mov	r4,r20
   11834:	1c800226 	beq	r3,r18,11840 <_fwalk_reent+0x78>
   11838:	a83ee83a 	callr	r21
   1183c:	b0acb03a 	or	r22,r22,r2
   11840:	84001704 	addi	r16,r16,92
   11844:	8cbff51e 	bne	r17,r18,1181c <_fwalk_reent+0x54>
   11848:	9cc00017 	ldw	r19,0(r19)
   1184c:	983fee1e 	bne	r19,zero,11808 <_fwalk_reent+0x40>
   11850:	0010be80 	call	10be8 <__sfp_lock_release>
   11854:	b005883a 	mov	r2,r22
   11858:	dfc00717 	ldw	ra,28(sp)
   1185c:	dd800617 	ldw	r22,24(sp)
   11860:	dd400517 	ldw	r21,20(sp)
   11864:	dd000417 	ldw	r20,16(sp)
   11868:	dcc00317 	ldw	r19,12(sp)
   1186c:	dc800217 	ldw	r18,8(sp)
   11870:	dc400117 	ldw	r17,4(sp)
   11874:	dc000017 	ldw	r16,0(sp)
   11878:	dec00804 	addi	sp,sp,32
   1187c:	f800283a 	ret

00011880 <__smakebuf_r>:
   11880:	2880030b 	ldhu	r2,12(r5)
   11884:	deffed04 	addi	sp,sp,-76
   11888:	dc401015 	stw	r17,64(sp)
   1188c:	10c0008c 	andi	r3,r2,2
   11890:	18ffffcc 	andi	r3,r3,65535
   11894:	18e0001c 	xori	r3,r3,32768
   11898:	dc000f15 	stw	r16,60(sp)
   1189c:	dfc01215 	stw	ra,72(sp)
   118a0:	dc801115 	stw	r18,68(sp)
   118a4:	18e00004 	addi	r3,r3,-32768
   118a8:	2821883a 	mov	r16,r5
   118ac:	2023883a 	mov	r17,r4
   118b0:	1800381e 	bne	r3,zero,11994 <__smakebuf_r+0x114>
   118b4:	2940038f 	ldh	r5,14(r5)
   118b8:	28002d16 	blt	r5,zero,11970 <__smakebuf_r+0xf0>
   118bc:	d80d883a 	mov	r6,sp
   118c0:	00116b80 	call	116b8 <_fstat_r>
   118c4:	10002916 	blt	r2,zero,1196c <__smakebuf_r+0xec>
   118c8:	d8800117 	ldw	r2,4(sp)
   118cc:	00e00014 	movui	r3,32768
   118d0:	10bc000c 	andi	r2,r2,61440
   118d4:	10c03c26 	beq	r2,r3,119c8 <__smakebuf_r+0x148>
   118d8:	80c0030b 	ldhu	r3,12(r16)
   118dc:	18c20014 	ori	r3,r3,2048
   118e0:	80c0030d 	sth	r3,12(r16)
   118e4:	00c80004 	movi	r3,8192
   118e8:	10c00c1e 	bne	r2,r3,1191c <__smakebuf_r+0x9c>
   118ec:	8140038f 	ldh	r5,14(r16)
   118f0:	8809883a 	mov	r4,r17
   118f4:	00135540 	call	13554 <_isatty_r>
   118f8:	10000826 	beq	r2,zero,1191c <__smakebuf_r+0x9c>
   118fc:	80c0030b 	ldhu	r3,12(r16)
   11900:	808010c4 	addi	r2,r16,67
   11904:	80800015 	stw	r2,0(r16)
   11908:	18c00054 	ori	r3,r3,1
   1190c:	80800415 	stw	r2,16(r16)
   11910:	00800044 	movi	r2,1
   11914:	80c0030d 	sth	r3,12(r16)
   11918:	80800515 	stw	r2,20(r16)
   1191c:	04810004 	movi	r18,1024
   11920:	8809883a 	mov	r4,r17
   11924:	900b883a 	mov	r5,r18
   11928:	0011a280 	call	11a28 <_malloc_r>
   1192c:	10003026 	beq	r2,zero,119f0 <__smakebuf_r+0x170>
   11930:	80c0030b 	ldhu	r3,12(r16)
   11934:	01000074 	movhi	r4,1
   11938:	21025204 	addi	r4,r4,2376
   1193c:	89000f15 	stw	r4,60(r17)
   11940:	18c02014 	ori	r3,r3,128
   11944:	80c0030d 	sth	r3,12(r16)
   11948:	80800015 	stw	r2,0(r16)
   1194c:	80800415 	stw	r2,16(r16)
   11950:	84800515 	stw	r18,20(r16)
   11954:	dfc01217 	ldw	ra,72(sp)
   11958:	dc801117 	ldw	r18,68(sp)
   1195c:	dc401017 	ldw	r17,64(sp)
   11960:	dc000f17 	ldw	r16,60(sp)
   11964:	dec01304 	addi	sp,sp,76
   11968:	f800283a 	ret
   1196c:	8080030b 	ldhu	r2,12(r16)
   11970:	10c0200c 	andi	r3,r2,128
   11974:	18ffffcc 	andi	r3,r3,65535
   11978:	18e0001c 	xori	r3,r3,32768
   1197c:	18e00004 	addi	r3,r3,-32768
   11980:	18000f1e 	bne	r3,zero,119c0 <__smakebuf_r+0x140>
   11984:	04810004 	movi	r18,1024
   11988:	10820014 	ori	r2,r2,2048
   1198c:	8080030d 	sth	r2,12(r16)
   11990:	003fe306 	br	11920 <__smakebuf_r+0xa0>
   11994:	288010c4 	addi	r2,r5,67
   11998:	28800015 	stw	r2,0(r5)
   1199c:	28800415 	stw	r2,16(r5)
   119a0:	00800044 	movi	r2,1
   119a4:	28800515 	stw	r2,20(r5)
   119a8:	dfc01217 	ldw	ra,72(sp)
   119ac:	dc801117 	ldw	r18,68(sp)
   119b0:	dc401017 	ldw	r17,64(sp)
   119b4:	dc000f17 	ldw	r16,60(sp)
   119b8:	dec01304 	addi	sp,sp,76
   119bc:	f800283a 	ret
   119c0:	04801004 	movi	r18,64
   119c4:	003ff006 	br	11988 <__smakebuf_r+0x108>
   119c8:	81000a17 	ldw	r4,40(r16)
   119cc:	00c00074 	movhi	r3,1
   119d0:	18ca2004 	addi	r3,r3,10368
   119d4:	20ffc01e 	bne	r4,r3,118d8 <__smakebuf_r+0x58>
   119d8:	8080030b 	ldhu	r2,12(r16)
   119dc:	00c10004 	movi	r3,1024
   119e0:	80c01315 	stw	r3,76(r16)
   119e4:	10c4b03a 	or	r2,r2,r3
   119e8:	8080030d 	sth	r2,12(r16)
   119ec:	003fcb06 	br	1191c <__smakebuf_r+0x9c>
   119f0:	8080030b 	ldhu	r2,12(r16)
   119f4:	10c0800c 	andi	r3,r2,512
   119f8:	18ffffcc 	andi	r3,r3,65535
   119fc:	18e0001c 	xori	r3,r3,32768
   11a00:	18e00004 	addi	r3,r3,-32768
   11a04:	183fd31e 	bne	r3,zero,11954 <__smakebuf_r+0xd4>
   11a08:	10800094 	ori	r2,r2,2
   11a0c:	80c010c4 	addi	r3,r16,67
   11a10:	8080030d 	sth	r2,12(r16)
   11a14:	00800044 	movi	r2,1
   11a18:	80c00015 	stw	r3,0(r16)
   11a1c:	80c00415 	stw	r3,16(r16)
   11a20:	80800515 	stw	r2,20(r16)
   11a24:	003fcb06 	br	11954 <__smakebuf_r+0xd4>

00011a28 <_malloc_r>:
   11a28:	defff604 	addi	sp,sp,-40
   11a2c:	dc800215 	stw	r18,8(sp)
   11a30:	dfc00915 	stw	ra,36(sp)
   11a34:	df000815 	stw	fp,32(sp)
   11a38:	ddc00715 	stw	r23,28(sp)
   11a3c:	dd800615 	stw	r22,24(sp)
   11a40:	dd400515 	stw	r21,20(sp)
   11a44:	dd000415 	stw	r20,16(sp)
   11a48:	dcc00315 	stw	r19,12(sp)
   11a4c:	dc400115 	stw	r17,4(sp)
   11a50:	dc000015 	stw	r16,0(sp)
   11a54:	288002c4 	addi	r2,r5,11
   11a58:	00c00584 	movi	r3,22
   11a5c:	2025883a 	mov	r18,r4
   11a60:	18802b2e 	bgeu	r3,r2,11b10 <_malloc_r+0xe8>
   11a64:	047ffe04 	movi	r17,-8
   11a68:	1462703a 	and	r17,r2,r17
   11a6c:	88002a16 	blt	r17,zero,11b18 <_malloc_r+0xf0>
   11a70:	89402936 	bltu	r17,r5,11b18 <_malloc_r+0xf0>
   11a74:	9009883a 	mov	r4,r18
   11a78:	00146780 	call	14678 <__malloc_lock>
   11a7c:	00807dc4 	movi	r2,503
   11a80:	14402936 	bltu	r2,r17,11b28 <_malloc_r+0x100>
   11a84:	8808d0fa 	srli	r4,r17,3
   11a88:	04c00074 	movhi	r19,1
   11a8c:	9cdda504 	addi	r19,r19,30356
   11a90:	2105883a 	add	r2,r4,r4
   11a94:	1085883a 	add	r2,r2,r2
   11a98:	1085883a 	add	r2,r2,r2
   11a9c:	9885883a 	add	r2,r19,r2
   11aa0:	14000317 	ldw	r16,12(r2)
   11aa4:	80815526 	beq	r16,r2,11ffc <_malloc_r+0x5d4>
   11aa8:	81000117 	ldw	r4,4(r16)
   11aac:	00bfff04 	movi	r2,-4
   11ab0:	80c00317 	ldw	r3,12(r16)
   11ab4:	2084703a 	and	r2,r4,r2
   11ab8:	8085883a 	add	r2,r16,r2
   11abc:	11800117 	ldw	r6,4(r2)
   11ac0:	81400217 	ldw	r5,8(r16)
   11ac4:	9009883a 	mov	r4,r18
   11ac8:	31800054 	ori	r6,r6,1
   11acc:	11800115 	stw	r6,4(r2)
   11ad0:	28c00315 	stw	r3,12(r5)
   11ad4:	19400215 	stw	r5,8(r3)
   11ad8:	00146980 	call	14698 <__malloc_unlock>
   11adc:	80800204 	addi	r2,r16,8
   11ae0:	dfc00917 	ldw	ra,36(sp)
   11ae4:	df000817 	ldw	fp,32(sp)
   11ae8:	ddc00717 	ldw	r23,28(sp)
   11aec:	dd800617 	ldw	r22,24(sp)
   11af0:	dd400517 	ldw	r21,20(sp)
   11af4:	dd000417 	ldw	r20,16(sp)
   11af8:	dcc00317 	ldw	r19,12(sp)
   11afc:	dc800217 	ldw	r18,8(sp)
   11b00:	dc400117 	ldw	r17,4(sp)
   11b04:	dc000017 	ldw	r16,0(sp)
   11b08:	dec00a04 	addi	sp,sp,40
   11b0c:	f800283a 	ret
   11b10:	04400404 	movi	r17,16
   11b14:	897fd72e 	bgeu	r17,r5,11a74 <_malloc_r+0x4c>
   11b18:	00800304 	movi	r2,12
   11b1c:	90800015 	stw	r2,0(r18)
   11b20:	0005883a 	mov	r2,zero
   11b24:	003fee06 	br	11ae0 <_malloc_r+0xb8>
   11b28:	8808d27a 	srli	r4,r17,9
   11b2c:	20007126 	beq	r4,zero,11cf4 <_malloc_r+0x2cc>
   11b30:	00800104 	movi	r2,4
   11b34:	1100eb36 	bltu	r2,r4,11ee4 <_malloc_r+0x4bc>
   11b38:	8808d1ba 	srli	r4,r17,6
   11b3c:	21000e04 	addi	r4,r4,56
   11b40:	210b883a 	add	r5,r4,r4
   11b44:	294b883a 	add	r5,r5,r5
   11b48:	294b883a 	add	r5,r5,r5
   11b4c:	04c00074 	movhi	r19,1
   11b50:	9cdda504 	addi	r19,r19,30356
   11b54:	994b883a 	add	r5,r19,r5
   11b58:	2c000317 	ldw	r16,12(r5)
   11b5c:	2c000e26 	beq	r5,r16,11b98 <_malloc_r+0x170>
   11b60:	80c00117 	ldw	r3,4(r16)
   11b64:	01ffff04 	movi	r7,-4
   11b68:	018003c4 	movi	r6,15
   11b6c:	19c6703a 	and	r3,r3,r7
   11b70:	1c45c83a 	sub	r2,r3,r17
   11b74:	30800716 	blt	r6,r2,11b94 <_malloc_r+0x16c>
   11b78:	1000610e 	bge	r2,zero,11d00 <_malloc_r+0x2d8>
   11b7c:	84000317 	ldw	r16,12(r16)
   11b80:	2c000526 	beq	r5,r16,11b98 <_malloc_r+0x170>
   11b84:	80c00117 	ldw	r3,4(r16)
   11b88:	19c6703a 	and	r3,r3,r7
   11b8c:	1c45c83a 	sub	r2,r3,r17
   11b90:	30bff90e 	bge	r6,r2,11b78 <_malloc_r+0x150>
   11b94:	213fffc4 	addi	r4,r4,-1
   11b98:	21000044 	addi	r4,r4,1
   11b9c:	9c000417 	ldw	r16,16(r19)
   11ba0:	00c00074 	movhi	r3,1
   11ba4:	18dda504 	addi	r3,r3,30356
   11ba8:	1a400204 	addi	r9,r3,8
   11bac:	8240ff26 	beq	r16,r9,11fac <_malloc_r+0x584>
   11bb0:	81400117 	ldw	r5,4(r16)
   11bb4:	00bfff04 	movi	r2,-4
   11bb8:	018003c4 	movi	r6,15
   11bbc:	2884703a 	and	r2,r5,r2
   11bc0:	144bc83a 	sub	r5,r2,r17
   11bc4:	3140ea16 	blt	r6,r5,11f70 <_malloc_r+0x548>
   11bc8:	1a400515 	stw	r9,20(r3)
   11bcc:	1a400415 	stw	r9,16(r3)
   11bd0:	2800570e 	bge	r5,zero,11d30 <_malloc_r+0x308>
   11bd4:	01407fc4 	movi	r5,511
   11bd8:	2880ca36 	bltu	r5,r2,11f04 <_malloc_r+0x4dc>
   11bdc:	1004d0fa 	srli	r2,r2,3
   11be0:	02000044 	movi	r8,1
   11be4:	19c00117 	ldw	r7,4(r3)
   11be8:	108b883a 	add	r5,r2,r2
   11bec:	294b883a 	add	r5,r5,r5
   11bf0:	1005d0ba 	srai	r2,r2,2
   11bf4:	294b883a 	add	r5,r5,r5
   11bf8:	28cb883a 	add	r5,r5,r3
   11bfc:	29800217 	ldw	r6,8(r5)
   11c00:	4084983a 	sll	r2,r8,r2
   11c04:	81400315 	stw	r5,12(r16)
   11c08:	81800215 	stw	r6,8(r16)
   11c0c:	11c4b03a 	or	r2,r2,r7
   11c10:	18800115 	stw	r2,4(r3)
   11c14:	2c000215 	stw	r16,8(r5)
   11c18:	34000315 	stw	r16,12(r6)
   11c1c:	200bd0ba 	srai	r5,r4,2
   11c20:	00c00044 	movi	r3,1
   11c24:	194a983a 	sll	r5,r3,r5
   11c28:	11404936 	bltu	r2,r5,11d50 <_malloc_r+0x328>
   11c2c:	1146703a 	and	r3,r2,r5
   11c30:	18000a1e 	bne	r3,zero,11c5c <_malloc_r+0x234>
   11c34:	00ffff04 	movi	r3,-4
   11c38:	294b883a 	add	r5,r5,r5
   11c3c:	20c8703a 	and	r4,r4,r3
   11c40:	1146703a 	and	r3,r2,r5
   11c44:	21000104 	addi	r4,r4,4
   11c48:	1800041e 	bne	r3,zero,11c5c <_malloc_r+0x234>
   11c4c:	294b883a 	add	r5,r5,r5
   11c50:	1146703a 	and	r3,r2,r5
   11c54:	21000104 	addi	r4,r4,4
   11c58:	183ffc26 	beq	r3,zero,11c4c <_malloc_r+0x224>
   11c5c:	023fff04 	movi	r8,-4
   11c60:	01c003c4 	movi	r7,15
   11c64:	2105883a 	add	r2,r4,r4
   11c68:	1085883a 	add	r2,r2,r2
   11c6c:	1085883a 	add	r2,r2,r2
   11c70:	9899883a 	add	r12,r19,r2
   11c74:	62800304 	addi	r10,r12,12
   11c78:	2017883a 	mov	r11,r4
   11c7c:	54000017 	ldw	r16,0(r10)
   11c80:	51bffd04 	addi	r6,r10,-12
   11c84:	8180041e 	bne	r16,r6,11c98 <_malloc_r+0x270>
   11c88:	0000ca06 	br	11fb4 <_malloc_r+0x58c>
   11c8c:	10001c0e 	bge	r2,zero,11d00 <_malloc_r+0x2d8>
   11c90:	84000317 	ldw	r16,12(r16)
   11c94:	8180c726 	beq	r16,r6,11fb4 <_malloc_r+0x58c>
   11c98:	80c00117 	ldw	r3,4(r16)
   11c9c:	1a06703a 	and	r3,r3,r8
   11ca0:	1c45c83a 	sub	r2,r3,r17
   11ca4:	38bff90e 	bge	r7,r2,11c8c <_malloc_r+0x264>
   11ca8:	81000317 	ldw	r4,12(r16)
   11cac:	81400217 	ldw	r5,8(r16)
   11cb0:	8447883a 	add	r3,r16,r17
   11cb4:	8c400054 	ori	r17,r17,1
   11cb8:	29000315 	stw	r4,12(r5)
   11cbc:	21400215 	stw	r5,8(r4)
   11cc0:	84400115 	stw	r17,4(r16)
   11cc4:	1889883a 	add	r4,r3,r2
   11cc8:	11400054 	ori	r5,r2,1
   11ccc:	98c00515 	stw	r3,20(r19)
   11cd0:	98c00415 	stw	r3,16(r19)
   11cd4:	20800015 	stw	r2,0(r4)
   11cd8:	1a400315 	stw	r9,12(r3)
   11cdc:	1a400215 	stw	r9,8(r3)
   11ce0:	19400115 	stw	r5,4(r3)
   11ce4:	9009883a 	mov	r4,r18
   11ce8:	00146980 	call	14698 <__malloc_unlock>
   11cec:	80800204 	addi	r2,r16,8
   11cf0:	003f7b06 	br	11ae0 <_malloc_r+0xb8>
   11cf4:	8808d0fa 	srli	r4,r17,3
   11cf8:	210b883a 	add	r5,r4,r4
   11cfc:	003f9106 	br	11b44 <_malloc_r+0x11c>
   11d00:	80c7883a 	add	r3,r16,r3
   11d04:	19400117 	ldw	r5,4(r3)
   11d08:	80800317 	ldw	r2,12(r16)
   11d0c:	81000217 	ldw	r4,8(r16)
   11d10:	29400054 	ori	r5,r5,1
   11d14:	19400115 	stw	r5,4(r3)
   11d18:	20800315 	stw	r2,12(r4)
   11d1c:	11000215 	stw	r4,8(r2)
   11d20:	9009883a 	mov	r4,r18
   11d24:	00146980 	call	14698 <__malloc_unlock>
   11d28:	80800204 	addi	r2,r16,8
   11d2c:	003f6c06 	br	11ae0 <_malloc_r+0xb8>
   11d30:	8085883a 	add	r2,r16,r2
   11d34:	10c00117 	ldw	r3,4(r2)
   11d38:	9009883a 	mov	r4,r18
   11d3c:	18c00054 	ori	r3,r3,1
   11d40:	10c00115 	stw	r3,4(r2)
   11d44:	00146980 	call	14698 <__malloc_unlock>
   11d48:	80800204 	addi	r2,r16,8
   11d4c:	003f6406 	br	11ae0 <_malloc_r+0xb8>
   11d50:	9c000217 	ldw	r16,8(r19)
   11d54:	00bfff04 	movi	r2,-4
   11d58:	85400117 	ldw	r21,4(r16)
   11d5c:	a8aa703a 	and	r21,r21,r2
   11d60:	ac400336 	bltu	r21,r17,11d70 <_malloc_r+0x348>
   11d64:	ac45c83a 	sub	r2,r21,r17
   11d68:	00c003c4 	movi	r3,15
   11d6c:	18805316 	blt	r3,r2,11ebc <_malloc_r+0x494>
   11d70:	d5e6d117 	ldw	r23,-25788(gp)
   11d74:	d0e00217 	ldw	r3,-32760(gp)
   11d78:	00bfffc4 	movi	r2,-1
   11d7c:	8579883a 	add	fp,r16,r21
   11d80:	8def883a 	add	r23,r17,r23
   11d84:	1880d226 	beq	r3,r2,120d0 <_malloc_r+0x6a8>
   11d88:	bdc403c4 	addi	r23,r23,4111
   11d8c:	00bc0004 	movi	r2,-4096
   11d90:	b8ae703a 	and	r23,r23,r2
   11d94:	9009883a 	mov	r4,r18
   11d98:	b80b883a 	mov	r5,r23
   11d9c:	00127400 	call	12740 <_sbrk_r>
   11da0:	1029883a 	mov	r20,r2
   11da4:	00bfffc4 	movi	r2,-1
   11da8:	a080d126 	beq	r20,r2,120f0 <_malloc_r+0x6c8>
   11dac:	a7009f36 	bltu	r20,fp,1202c <_malloc_r+0x604>
   11db0:	058000b4 	movhi	r22,2
   11db4:	b5aa0b04 	addi	r22,r22,-22484
   11db8:	b0800017 	ldw	r2,0(r22)
   11dbc:	b885883a 	add	r2,r23,r2
   11dc0:	b0800015 	stw	r2,0(r22)
   11dc4:	e500cf26 	beq	fp,r20,12104 <_malloc_r+0x6dc>
   11dc8:	d1200217 	ldw	r4,-32760(gp)
   11dcc:	00ffffc4 	movi	r3,-1
   11dd0:	20c0e026 	beq	r4,r3,12154 <_malloc_r+0x72c>
   11dd4:	a739c83a 	sub	fp,r20,fp
   11dd8:	1705883a 	add	r2,r2,fp
   11ddc:	b0800015 	stw	r2,0(r22)
   11de0:	a08001cc 	andi	r2,r20,7
   11de4:	1000a526 	beq	r2,zero,1207c <_malloc_r+0x654>
   11de8:	a0a9c83a 	sub	r20,r20,r2
   11dec:	00c40204 	movi	r3,4104
   11df0:	a5000204 	addi	r20,r20,8
   11df4:	1885c83a 	sub	r2,r3,r2
   11df8:	a5c7883a 	add	r3,r20,r23
   11dfc:	18c3ffcc 	andi	r3,r3,4095
   11e00:	10efc83a 	sub	r23,r2,r3
   11e04:	9009883a 	mov	r4,r18
   11e08:	b80b883a 	mov	r5,r23
   11e0c:	00127400 	call	12740 <_sbrk_r>
   11e10:	00ffffc4 	movi	r3,-1
   11e14:	10c0cc26 	beq	r2,r3,12148 <_malloc_r+0x720>
   11e18:	1505c83a 	sub	r2,r2,r20
   11e1c:	b887883a 	add	r3,r23,r2
   11e20:	18c00054 	ori	r3,r3,1
   11e24:	b0800017 	ldw	r2,0(r22)
   11e28:	9d000215 	stw	r20,8(r19)
   11e2c:	a0c00115 	stw	r3,4(r20)
   11e30:	b885883a 	add	r2,r23,r2
   11e34:	b0800015 	stw	r2,0(r22)
   11e38:	84c00e26 	beq	r16,r19,11e74 <_malloc_r+0x44c>
   11e3c:	00c003c4 	movi	r3,15
   11e40:	1d40902e 	bgeu	r3,r21,12084 <_malloc_r+0x65c>
   11e44:	ad7ffd04 	addi	r21,r21,-12
   11e48:	013ffe04 	movi	r4,-8
   11e4c:	a908703a 	and	r4,r21,r4
   11e50:	810b883a 	add	r5,r16,r4
   11e54:	01800144 	movi	r6,5
   11e58:	29800115 	stw	r6,4(r5)
   11e5c:	29800215 	stw	r6,8(r5)
   11e60:	81400117 	ldw	r5,4(r16)
   11e64:	2940004c 	andi	r5,r5,1
   11e68:	214ab03a 	or	r5,r4,r5
   11e6c:	81400115 	stw	r5,4(r16)
   11e70:	1900ae36 	bltu	r3,r4,1212c <_malloc_r+0x704>
   11e74:	d0e6d017 	ldw	r3,-25792(gp)
   11e78:	1880012e 	bgeu	r3,r2,11e80 <_malloc_r+0x458>
   11e7c:	d0a6d015 	stw	r2,-25792(gp)
   11e80:	d0e6cf17 	ldw	r3,-25796(gp)
   11e84:	9c000217 	ldw	r16,8(r19)
   11e88:	1880012e 	bgeu	r3,r2,11e90 <_malloc_r+0x468>
   11e8c:	d0a6cf15 	stw	r2,-25796(gp)
   11e90:	80c00117 	ldw	r3,4(r16)
   11e94:	00bfff04 	movi	r2,-4
   11e98:	1886703a 	and	r3,r3,r2
   11e9c:	1c45c83a 	sub	r2,r3,r17
   11ea0:	1c400236 	bltu	r3,r17,11eac <_malloc_r+0x484>
   11ea4:	00c003c4 	movi	r3,15
   11ea8:	18800416 	blt	r3,r2,11ebc <_malloc_r+0x494>
   11eac:	9009883a 	mov	r4,r18
   11eb0:	00146980 	call	14698 <__malloc_unlock>
   11eb4:	0005883a 	mov	r2,zero
   11eb8:	003f0906 	br	11ae0 <_malloc_r+0xb8>
   11ebc:	88c00054 	ori	r3,r17,1
   11ec0:	10800054 	ori	r2,r2,1
   11ec4:	80c00115 	stw	r3,4(r16)
   11ec8:	8463883a 	add	r17,r16,r17
   11ecc:	88800115 	stw	r2,4(r17)
   11ed0:	9009883a 	mov	r4,r18
   11ed4:	9c400215 	stw	r17,8(r19)
   11ed8:	00146980 	call	14698 <__malloc_unlock>
   11edc:	80800204 	addi	r2,r16,8
   11ee0:	003eff06 	br	11ae0 <_malloc_r+0xb8>
   11ee4:	00800504 	movi	r2,20
   11ee8:	1100492e 	bgeu	r2,r4,12010 <_malloc_r+0x5e8>
   11eec:	00801504 	movi	r2,84
   11ef0:	11005c36 	bltu	r2,r4,12064 <_malloc_r+0x63c>
   11ef4:	8808d33a 	srli	r4,r17,12
   11ef8:	21001b84 	addi	r4,r4,110
   11efc:	210b883a 	add	r5,r4,r4
   11f00:	003f1006 	br	11b44 <_malloc_r+0x11c>
   11f04:	1006d27a 	srli	r3,r2,9
   11f08:	01400104 	movi	r5,4
   11f0c:	28c0432e 	bgeu	r5,r3,1201c <_malloc_r+0x5f4>
   11f10:	01400504 	movi	r5,20
   11f14:	28c07036 	bltu	r5,r3,120d8 <_malloc_r+0x6b0>
   11f18:	194016c4 	addi	r5,r3,91
   11f1c:	294d883a 	add	r6,r5,r5
   11f20:	318d883a 	add	r6,r6,r6
   11f24:	318d883a 	add	r6,r6,r6
   11f28:	998d883a 	add	r6,r19,r6
   11f2c:	30c00217 	ldw	r3,8(r6)
   11f30:	01c00074 	movhi	r7,1
   11f34:	39dda504 	addi	r7,r7,30356
   11f38:	19805726 	beq	r3,r6,12098 <_malloc_r+0x670>
   11f3c:	01ffff04 	movi	r7,-4
   11f40:	19400117 	ldw	r5,4(r3)
   11f44:	29ca703a 	and	r5,r5,r7
   11f48:	1140022e 	bgeu	r2,r5,11f54 <_malloc_r+0x52c>
   11f4c:	18c00217 	ldw	r3,8(r3)
   11f50:	30fffb1e 	bne	r6,r3,11f40 <_malloc_r+0x518>
   11f54:	19400317 	ldw	r5,12(r3)
   11f58:	98800117 	ldw	r2,4(r19)
   11f5c:	81400315 	stw	r5,12(r16)
   11f60:	80c00215 	stw	r3,8(r16)
   11f64:	2c000215 	stw	r16,8(r5)
   11f68:	1c000315 	stw	r16,12(r3)
   11f6c:	003f2b06 	br	11c1c <_malloc_r+0x1f4>
   11f70:	8445883a 	add	r2,r16,r17
   11f74:	8c400054 	ori	r17,r17,1
   11f78:	18800515 	stw	r2,20(r3)
   11f7c:	18800415 	stw	r2,16(r3)
   11f80:	29000054 	ori	r4,r5,1
   11f84:	1147883a 	add	r3,r2,r5
   11f88:	84400115 	stw	r17,4(r16)
   11f8c:	11000115 	stw	r4,4(r2)
   11f90:	12400315 	stw	r9,12(r2)
   11f94:	12400215 	stw	r9,8(r2)
   11f98:	19400015 	stw	r5,0(r3)
   11f9c:	9009883a 	mov	r4,r18
   11fa0:	00146980 	call	14698 <__malloc_unlock>
   11fa4:	80800204 	addi	r2,r16,8
   11fa8:	003ecd06 	br	11ae0 <_malloc_r+0xb8>
   11fac:	18800117 	ldw	r2,4(r3)
   11fb0:	003f1a06 	br	11c1c <_malloc_r+0x1f4>
   11fb4:	5ac00044 	addi	r11,r11,1
   11fb8:	588000cc 	andi	r2,r11,3
   11fbc:	52800204 	addi	r10,r10,8
   11fc0:	103f2e1e 	bne	r2,zero,11c7c <_malloc_r+0x254>
   11fc4:	20c000cc 	andi	r3,r4,3
   11fc8:	60bffe04 	addi	r2,r12,-8
   11fcc:	18006f26 	beq	r3,zero,1218c <_malloc_r+0x764>
   11fd0:	63000017 	ldw	r12,0(r12)
   11fd4:	213fffc4 	addi	r4,r4,-1
   11fd8:	60bffa26 	beq	r12,r2,11fc4 <_malloc_r+0x59c>
   11fdc:	98800117 	ldw	r2,4(r19)
   11fe0:	294b883a 	add	r5,r5,r5
   11fe4:	117f5a36 	bltu	r2,r5,11d50 <_malloc_r+0x328>
   11fe8:	283f5926 	beq	r5,zero,11d50 <_malloc_r+0x328>
   11fec:	1146703a 	and	r3,r2,r5
   11ff0:	18001626 	beq	r3,zero,1204c <_malloc_r+0x624>
   11ff4:	5809883a 	mov	r4,r11
   11ff8:	003f1a06 	br	11c64 <_malloc_r+0x23c>
   11ffc:	80800204 	addi	r2,r16,8
   12000:	84000517 	ldw	r16,20(r16)
   12004:	143ea81e 	bne	r2,r16,11aa8 <_malloc_r+0x80>
   12008:	21000084 	addi	r4,r4,2
   1200c:	003ee306 	br	11b9c <_malloc_r+0x174>
   12010:	210016c4 	addi	r4,r4,91
   12014:	210b883a 	add	r5,r4,r4
   12018:	003eca06 	br	11b44 <_malloc_r+0x11c>
   1201c:	100ad1ba 	srli	r5,r2,6
   12020:	29400e04 	addi	r5,r5,56
   12024:	294d883a 	add	r6,r5,r5
   12028:	003fbd06 	br	11f20 <_malloc_r+0x4f8>
   1202c:	84ff6026 	beq	r16,r19,11db0 <_malloc_r+0x388>
   12030:	00800074 	movhi	r2,1
   12034:	109da504 	addi	r2,r2,30356
   12038:	14000217 	ldw	r16,8(r2)
   1203c:	00bfff04 	movi	r2,-4
   12040:	80c00117 	ldw	r3,4(r16)
   12044:	1886703a 	and	r3,r3,r2
   12048:	003f9406 	br	11e9c <_malloc_r+0x474>
   1204c:	294b883a 	add	r5,r5,r5
   12050:	1146703a 	and	r3,r2,r5
   12054:	5ac00104 	addi	r11,r11,4
   12058:	183ffc26 	beq	r3,zero,1204c <_malloc_r+0x624>
   1205c:	5809883a 	mov	r4,r11
   12060:	003f0006 	br	11c64 <_malloc_r+0x23c>
   12064:	00805504 	movi	r2,340
   12068:	11001336 	bltu	r2,r4,120b8 <_malloc_r+0x690>
   1206c:	8808d3fa 	srli	r4,r17,15
   12070:	21001dc4 	addi	r4,r4,119
   12074:	210b883a 	add	r5,r4,r4
   12078:	003eb206 	br	11b44 <_malloc_r+0x11c>
   1207c:	00840004 	movi	r2,4096
   12080:	003f5d06 	br	11df8 <_malloc_r+0x3d0>
   12084:	00800044 	movi	r2,1
   12088:	a0800115 	stw	r2,4(r20)
   1208c:	a021883a 	mov	r16,r20
   12090:	0007883a 	mov	r3,zero
   12094:	003f8106 	br	11e9c <_malloc_r+0x474>
   12098:	280bd0ba 	srai	r5,r5,2
   1209c:	01800044 	movi	r6,1
   120a0:	38800117 	ldw	r2,4(r7)
   120a4:	314c983a 	sll	r6,r6,r5
   120a8:	180b883a 	mov	r5,r3
   120ac:	3084b03a 	or	r2,r6,r2
   120b0:	38800115 	stw	r2,4(r7)
   120b4:	003fa906 	br	11f5c <_malloc_r+0x534>
   120b8:	00815504 	movi	r2,1364
   120bc:	11001836 	bltu	r2,r4,12120 <_malloc_r+0x6f8>
   120c0:	8808d4ba 	srli	r4,r17,18
   120c4:	21001f04 	addi	r4,r4,124
   120c8:	210b883a 	add	r5,r4,r4
   120cc:	003e9d06 	br	11b44 <_malloc_r+0x11c>
   120d0:	bdc00404 	addi	r23,r23,16
   120d4:	003f2f06 	br	11d94 <_malloc_r+0x36c>
   120d8:	01401504 	movi	r5,84
   120dc:	28c01f36 	bltu	r5,r3,1215c <_malloc_r+0x734>
   120e0:	100ad33a 	srli	r5,r2,12
   120e4:	29401b84 	addi	r5,r5,110
   120e8:	294d883a 	add	r6,r5,r5
   120ec:	003f8c06 	br	11f20 <_malloc_r+0x4f8>
   120f0:	9c000217 	ldw	r16,8(r19)
   120f4:	00bfff04 	movi	r2,-4
   120f8:	80c00117 	ldw	r3,4(r16)
   120fc:	1886703a 	and	r3,r3,r2
   12100:	003f6606 	br	11e9c <_malloc_r+0x474>
   12104:	e0c3ffcc 	andi	r3,fp,4095
   12108:	183f2f1e 	bne	r3,zero,11dc8 <_malloc_r+0x3a0>
   1210c:	98c00217 	ldw	r3,8(r19)
   12110:	bd49883a 	add	r4,r23,r21
   12114:	21000054 	ori	r4,r4,1
   12118:	19000115 	stw	r4,4(r3)
   1211c:	003f5506 	br	11e74 <_malloc_r+0x44c>
   12120:	01403f04 	movi	r5,252
   12124:	01001f84 	movi	r4,126
   12128:	003e8606 	br	11b44 <_malloc_r+0x11c>
   1212c:	9009883a 	mov	r4,r18
   12130:	81400204 	addi	r5,r16,8
   12134:	0010f500 	call	10f50 <_free_r>
   12138:	008000b4 	movhi	r2,2
   1213c:	10aa0b04 	addi	r2,r2,-22484
   12140:	10800017 	ldw	r2,0(r2)
   12144:	003f4b06 	br	11e74 <_malloc_r+0x44c>
   12148:	00c00044 	movi	r3,1
   1214c:	002f883a 	mov	r23,zero
   12150:	003f3406 	br	11e24 <_malloc_r+0x3fc>
   12154:	d5200215 	stw	r20,-32760(gp)
   12158:	003f2106 	br	11de0 <_malloc_r+0x3b8>
   1215c:	01405504 	movi	r5,340
   12160:	28c00436 	bltu	r5,r3,12174 <_malloc_r+0x74c>
   12164:	100ad3fa 	srli	r5,r2,15
   12168:	29401dc4 	addi	r5,r5,119
   1216c:	294d883a 	add	r6,r5,r5
   12170:	003f6b06 	br	11f20 <_malloc_r+0x4f8>
   12174:	01415504 	movi	r5,1364
   12178:	28c00936 	bltu	r5,r3,121a0 <_malloc_r+0x778>
   1217c:	100ad4ba 	srli	r5,r2,18
   12180:	29401f04 	addi	r5,r5,124
   12184:	294d883a 	add	r6,r5,r5
   12188:	003f6506 	br	11f20 <_malloc_r+0x4f8>
   1218c:	98800117 	ldw	r2,4(r19)
   12190:	0146303a 	nor	r3,zero,r5
   12194:	1884703a 	and	r2,r3,r2
   12198:	98800115 	stw	r2,4(r19)
   1219c:	003f9006 	br	11fe0 <_malloc_r+0x5b8>
   121a0:	01803f04 	movi	r6,252
   121a4:	01401f84 	movi	r5,126
   121a8:	003f5d06 	br	11f20 <_malloc_r+0x4f8>

000121ac <memset>:
   121ac:	00c000c4 	movi	r3,3
   121b0:	2005883a 	mov	r2,r4
   121b4:	29403fcc 	andi	r5,r5,255
   121b8:	19802d2e 	bgeu	r3,r6,12270 <memset+0xc4>
   121bc:	20c6703a 	and	r3,r4,r3
   121c0:	18002e1e 	bne	r3,zero,1227c <memset+0xd0>
   121c4:	2806923a 	slli	r3,r5,8
   121c8:	010003c4 	movi	r4,15
   121cc:	3011883a 	mov	r8,r6
   121d0:	1946b03a 	or	r3,r3,r5
   121d4:	180e943a 	slli	r7,r3,16
   121d8:	38ceb03a 	or	r7,r7,r3
   121dc:	1007883a 	mov	r3,r2
   121e0:	21800f2e 	bgeu	r4,r6,12220 <memset+0x74>
   121e4:	19c00015 	stw	r7,0(r3)
   121e8:	19c00115 	stw	r7,4(r3)
   121ec:	19c00215 	stw	r7,8(r3)
   121f0:	19c00315 	stw	r7,12(r3)
   121f4:	423ffc04 	addi	r8,r8,-16
   121f8:	18c00404 	addi	r3,r3,16
   121fc:	223ff936 	bltu	r4,r8,121e4 <memset+0x38>
   12200:	30fffc04 	addi	r3,r6,-16
   12204:	1806d13a 	srli	r3,r3,4
   12208:	318003cc 	andi	r6,r6,15
   1220c:	010000c4 	movi	r4,3
   12210:	18c00044 	addi	r3,r3,1
   12214:	1806913a 	slli	r3,r3,4
   12218:	10c7883a 	add	r3,r2,r3
   1221c:	21800e2e 	bgeu	r4,r6,12258 <memset+0xac>
   12220:	1813883a 	mov	r9,r3
   12224:	3011883a 	mov	r8,r6
   12228:	010000c4 	movi	r4,3
   1222c:	49c00015 	stw	r7,0(r9)
   12230:	423fff04 	addi	r8,r8,-4
   12234:	4a400104 	addi	r9,r9,4
   12238:	223ffc36 	bltu	r4,r8,1222c <memset+0x80>
   1223c:	313fff04 	addi	r4,r6,-4
   12240:	2008d0ba 	srli	r4,r4,2
   12244:	318000cc 	andi	r6,r6,3
   12248:	21000044 	addi	r4,r4,1
   1224c:	2109883a 	add	r4,r4,r4
   12250:	2109883a 	add	r4,r4,r4
   12254:	1907883a 	add	r3,r3,r4
   12258:	30000a26 	beq	r6,zero,12284 <memset+0xd8>
   1225c:	198d883a 	add	r6,r3,r6
   12260:	19400005 	stb	r5,0(r3)
   12264:	18c00044 	addi	r3,r3,1
   12268:	19bffd1e 	bne	r3,r6,12260 <memset+0xb4>
   1226c:	f800283a 	ret
   12270:	2007883a 	mov	r3,r4
   12274:	303ff91e 	bne	r6,zero,1225c <memset+0xb0>
   12278:	00000206 	br	12284 <memset+0xd8>
   1227c:	2007883a 	mov	r3,r4
   12280:	003ff606 	br	1225c <memset+0xb0>
   12284:	f800283a 	ret

00012288 <_open_r>:
   12288:	defffd04 	addi	sp,sp,-12
   1228c:	dc400115 	stw	r17,4(sp)
   12290:	dc000015 	stw	r16,0(sp)
   12294:	2023883a 	mov	r17,r4
   12298:	040000b4 	movhi	r16,2
   1229c:	842a0104 	addi	r16,r16,-22524
   122a0:	2809883a 	mov	r4,r5
   122a4:	300b883a 	mov	r5,r6
   122a8:	380d883a 	mov	r6,r7
   122ac:	dfc00215 	stw	ra,8(sp)
   122b0:	80000015 	stw	zero,0(r16)
   122b4:	00147f80 	call	147f8 <open>
   122b8:	00ffffc4 	movi	r3,-1
   122bc:	10c00526 	beq	r2,r3,122d4 <_open_r+0x4c>
   122c0:	dfc00217 	ldw	ra,8(sp)
   122c4:	dc400117 	ldw	r17,4(sp)
   122c8:	dc000017 	ldw	r16,0(sp)
   122cc:	dec00304 	addi	sp,sp,12
   122d0:	f800283a 	ret
   122d4:	80c00017 	ldw	r3,0(r16)
   122d8:	183ff926 	beq	r3,zero,122c0 <_open_r+0x38>
   122dc:	88c00015 	stw	r3,0(r17)
   122e0:	dfc00217 	ldw	ra,8(sp)
   122e4:	dc400117 	ldw	r17,4(sp)
   122e8:	dc000017 	ldw	r16,0(sp)
   122ec:	dec00304 	addi	sp,sp,12
   122f0:	f800283a 	ret

000122f4 <_putc_r>:
   122f4:	defffc04 	addi	sp,sp,-16
   122f8:	dc000215 	stw	r16,8(sp)
   122fc:	dfc00315 	stw	ra,12(sp)
   12300:	2021883a 	mov	r16,r4
   12304:	20000226 	beq	r4,zero,12310 <_putc_r+0x1c>
   12308:	20800e17 	ldw	r2,56(r4)
   1230c:	10001d26 	beq	r2,zero,12384 <_putc_r+0x90>
   12310:	30800217 	ldw	r2,8(r6)
   12314:	10bfffc4 	addi	r2,r2,-1
   12318:	30800215 	stw	r2,8(r6)
   1231c:	10000a16 	blt	r2,zero,12348 <_putc_r+0x54>
   12320:	30800017 	ldw	r2,0(r6)
   12324:	11400005 	stb	r5,0(r2)
   12328:	30800017 	ldw	r2,0(r6)
   1232c:	10c00044 	addi	r3,r2,1
   12330:	10800003 	ldbu	r2,0(r2)
   12334:	30c00015 	stw	r3,0(r6)
   12338:	dfc00317 	ldw	ra,12(sp)
   1233c:	dc000217 	ldw	r16,8(sp)
   12340:	dec00404 	addi	sp,sp,16
   12344:	f800283a 	ret
   12348:	30c00617 	ldw	r3,24(r6)
   1234c:	10c01316 	blt	r2,r3,1239c <_putc_r+0xa8>
   12350:	30800017 	ldw	r2,0(r6)
   12354:	01000284 	movi	r4,10
   12358:	11400005 	stb	r5,0(r2)
   1235c:	30c00017 	ldw	r3,0(r6)
   12360:	19400003 	ldbu	r5,0(r3)
   12364:	29000d26 	beq	r5,r4,1239c <_putc_r+0xa8>
   12368:	18c00044 	addi	r3,r3,1
   1236c:	2805883a 	mov	r2,r5
   12370:	30c00015 	stw	r3,0(r6)
   12374:	dfc00317 	ldw	ra,12(sp)
   12378:	dc000217 	ldw	r16,8(sp)
   1237c:	dec00404 	addi	sp,sp,16
   12380:	f800283a 	ret
   12384:	d9400015 	stw	r5,0(sp)
   12388:	d9800115 	stw	r6,4(sp)
   1238c:	00109dc0 	call	109dc <__sinit>
   12390:	d9800117 	ldw	r6,4(sp)
   12394:	d9400017 	ldw	r5,0(sp)
   12398:	003fdd06 	br	12310 <_putc_r+0x1c>
   1239c:	8009883a 	mov	r4,r16
   123a0:	dfc00317 	ldw	ra,12(sp)
   123a4:	dc000217 	ldw	r16,8(sp)
   123a8:	dec00404 	addi	sp,sp,16
   123ac:	0012a9c1 	jmpi	12a9c <__swbuf_r>

000123b0 <putc>:
   123b0:	defffc04 	addi	sp,sp,-16
   123b4:	dc400115 	stw	r17,4(sp)
   123b8:	044000b4 	movhi	r17,2
   123bc:	8c633404 	addi	r17,r17,-29488
   123c0:	88800017 	ldw	r2,0(r17)
   123c4:	dc800215 	stw	r18,8(sp)
   123c8:	dc000015 	stw	r16,0(sp)
   123cc:	dfc00315 	stw	ra,12(sp)
   123d0:	2025883a 	mov	r18,r4
   123d4:	2821883a 	mov	r16,r5
   123d8:	10000226 	beq	r2,zero,123e4 <putc+0x34>
   123dc:	10c00e17 	ldw	r3,56(r2)
   123e0:	18002126 	beq	r3,zero,12468 <putc+0xb8>
   123e4:	80800217 	ldw	r2,8(r16)
   123e8:	10bfffc4 	addi	r2,r2,-1
   123ec:	80800215 	stw	r2,8(r16)
   123f0:	10000c16 	blt	r2,zero,12424 <putc+0x74>
   123f4:	80800017 	ldw	r2,0(r16)
   123f8:	14800005 	stb	r18,0(r2)
   123fc:	80800017 	ldw	r2,0(r16)
   12400:	10c00044 	addi	r3,r2,1
   12404:	10800003 	ldbu	r2,0(r2)
   12408:	80c00015 	stw	r3,0(r16)
   1240c:	dfc00317 	ldw	ra,12(sp)
   12410:	dc800217 	ldw	r18,8(sp)
   12414:	dc400117 	ldw	r17,4(sp)
   12418:	dc000017 	ldw	r16,0(sp)
   1241c:	dec00404 	addi	sp,sp,16
   12420:	f800283a 	ret
   12424:	80c00617 	ldw	r3,24(r16)
   12428:	10c01216 	blt	r2,r3,12474 <putc+0xc4>
   1242c:	80800017 	ldw	r2,0(r16)
   12430:	01000284 	movi	r4,10
   12434:	14800005 	stb	r18,0(r2)
   12438:	80c00017 	ldw	r3,0(r16)
   1243c:	19400003 	ldbu	r5,0(r3)
   12440:	29001526 	beq	r5,r4,12498 <putc+0xe8>
   12444:	18c00044 	addi	r3,r3,1
   12448:	2805883a 	mov	r2,r5
   1244c:	80c00015 	stw	r3,0(r16)
   12450:	dfc00317 	ldw	ra,12(sp)
   12454:	dc800217 	ldw	r18,8(sp)
   12458:	dc400117 	ldw	r17,4(sp)
   1245c:	dc000017 	ldw	r16,0(sp)
   12460:	dec00404 	addi	sp,sp,16
   12464:	f800283a 	ret
   12468:	1009883a 	mov	r4,r2
   1246c:	00109dc0 	call	109dc <__sinit>
   12470:	003fdc06 	br	123e4 <putc+0x34>
   12474:	89000017 	ldw	r4,0(r17)
   12478:	900b883a 	mov	r5,r18
   1247c:	800d883a 	mov	r6,r16
   12480:	dfc00317 	ldw	ra,12(sp)
   12484:	dc800217 	ldw	r18,8(sp)
   12488:	dc400117 	ldw	r17,4(sp)
   1248c:	dc000017 	ldw	r16,0(sp)
   12490:	dec00404 	addi	sp,sp,16
   12494:	0012a9c1 	jmpi	12a9c <__swbuf_r>
   12498:	89000017 	ldw	r4,0(r17)
   1249c:	003ff706 	br	1247c <putc+0xcc>

000124a0 <_puts_r>:
   124a0:	defff604 	addi	sp,sp,-40
   124a4:	dc400815 	stw	r17,32(sp)
   124a8:	2023883a 	mov	r17,r4
   124ac:	2809883a 	mov	r4,r5
   124b0:	dc000715 	stw	r16,28(sp)
   124b4:	dfc00915 	stw	ra,36(sp)
   124b8:	2821883a 	mov	r16,r5
   124bc:	0012a100 	call	12a10 <strlen>
   124c0:	10c00044 	addi	r3,r2,1
   124c4:	d8800115 	stw	r2,4(sp)
   124c8:	89400217 	ldw	r5,8(r17)
   124cc:	00800074 	movhi	r2,1
   124d0:	109c9604 	addi	r2,r2,29272
   124d4:	d8800215 	stw	r2,8(sp)
   124d8:	00800044 	movi	r2,1
   124dc:	d8800315 	stw	r2,12(sp)
   124e0:	8809883a 	mov	r4,r17
   124e4:	00800084 	movi	r2,2
   124e8:	d9800404 	addi	r6,sp,16
   124ec:	dc000015 	stw	r16,0(sp)
   124f0:	d8c00615 	stw	r3,24(sp)
   124f4:	dec00415 	stw	sp,16(sp)
   124f8:	d8800515 	stw	r2,20(sp)
   124fc:	00130700 	call	13070 <__sfvwrite_r>
   12500:	1000061e 	bne	r2,zero,1251c <_puts_r+0x7c>
   12504:	00800284 	movi	r2,10
   12508:	dfc00917 	ldw	ra,36(sp)
   1250c:	dc400817 	ldw	r17,32(sp)
   12510:	dc000717 	ldw	r16,28(sp)
   12514:	dec00a04 	addi	sp,sp,40
   12518:	f800283a 	ret
   1251c:	00bfffc4 	movi	r2,-1
   12520:	003ff906 	br	12508 <_puts_r+0x68>

00012524 <puts>:
   12524:	008000b4 	movhi	r2,2
   12528:	10a33404 	addi	r2,r2,-29488
   1252c:	200b883a 	mov	r5,r4
   12530:	11000017 	ldw	r4,0(r2)
   12534:	00124a01 	jmpi	124a0 <_puts_r>

00012538 <lflush>:
   12538:	20c0030b 	ldhu	r3,12(r4)
   1253c:	00800244 	movi	r2,9
   12540:	18c0024c 	andi	r3,r3,9
   12544:	18800226 	beq	r3,r2,12550 <lflush+0x18>
   12548:	0005883a 	mov	r2,zero
   1254c:	f800283a 	ret
   12550:	00109081 	jmpi	10908 <fflush>

00012554 <__srefill_r>:
   12554:	defffd04 	addi	sp,sp,-12
   12558:	dc400115 	stw	r17,4(sp)
   1255c:	dc000015 	stw	r16,0(sp)
   12560:	dfc00215 	stw	ra,8(sp)
   12564:	2023883a 	mov	r17,r4
   12568:	2821883a 	mov	r16,r5
   1256c:	20000226 	beq	r4,zero,12578 <__srefill_r+0x24>
   12570:	20800e17 	ldw	r2,56(r4)
   12574:	10004426 	beq	r2,zero,12688 <__srefill_r+0x134>
   12578:	8080030b 	ldhu	r2,12(r16)
   1257c:	80000115 	stw	zero,4(r16)
   12580:	10c0080c 	andi	r3,r2,32
   12584:	18ffffcc 	andi	r3,r3,65535
   12588:	18e0001c 	xori	r3,r3,32768
   1258c:	18e00004 	addi	r3,r3,-32768
   12590:	1800371e 	bne	r3,zero,12670 <__srefill_r+0x11c>
   12594:	10c0010c 	andi	r3,r2,4
   12598:	18ffffcc 	andi	r3,r3,65535
   1259c:	18e0001c 	xori	r3,r3,32768
   125a0:	18e00004 	addi	r3,r3,-32768
   125a4:	18002226 	beq	r3,zero,12630 <__srefill_r+0xdc>
   125a8:	81400c17 	ldw	r5,48(r16)
   125ac:	28000826 	beq	r5,zero,125d0 <__srefill_r+0x7c>
   125b0:	80801004 	addi	r2,r16,64
   125b4:	28800226 	beq	r5,r2,125c0 <__srefill_r+0x6c>
   125b8:	8809883a 	mov	r4,r17
   125bc:	0010f500 	call	10f50 <_free_r>
   125c0:	80800f17 	ldw	r2,60(r16)
   125c4:	80000c15 	stw	zero,48(r16)
   125c8:	80800115 	stw	r2,4(r16)
   125cc:	1000401e 	bne	r2,zero,126d0 <__srefill_r+0x17c>
   125d0:	80800417 	ldw	r2,16(r16)
   125d4:	10005026 	beq	r2,zero,12718 <__srefill_r+0x1c4>
   125d8:	8080030b 	ldhu	r2,12(r16)
   125dc:	108000cc 	andi	r2,r2,3
   125e0:	10002b1e 	bne	r2,zero,12690 <__srefill_r+0x13c>
   125e4:	81800417 	ldw	r6,16(r16)
   125e8:	80800817 	ldw	r2,32(r16)
   125ec:	81400717 	ldw	r5,28(r16)
   125f0:	81c00517 	ldw	r7,20(r16)
   125f4:	8809883a 	mov	r4,r17
   125f8:	81800015 	stw	r6,0(r16)
   125fc:	103ee83a 	callr	r2
   12600:	8100030b 	ldhu	r4,12(r16)
   12604:	00f7ffc4 	movi	r3,-8193
   12608:	80800115 	stw	r2,4(r16)
   1260c:	20c6703a 	and	r3,r4,r3
   12610:	80c0030d 	sth	r3,12(r16)
   12614:	0080130e 	bge	zero,r2,12664 <__srefill_r+0x110>
   12618:	0005883a 	mov	r2,zero
   1261c:	dfc00217 	ldw	ra,8(sp)
   12620:	dc400117 	ldw	r17,4(sp)
   12624:	dc000017 	ldw	r16,0(sp)
   12628:	dec00304 	addi	sp,sp,12
   1262c:	f800283a 	ret
   12630:	10c0040c 	andi	r3,r2,16
   12634:	18ffffcc 	andi	r3,r3,65535
   12638:	18e0001c 	xori	r3,r3,32768
   1263c:	18e00004 	addi	r3,r3,-32768
   12640:	18003926 	beq	r3,zero,12728 <__srefill_r+0x1d4>
   12644:	10c0020c 	andi	r3,r2,8
   12648:	18ffffcc 	andi	r3,r3,65535
   1264c:	18e0001c 	xori	r3,r3,32768
   12650:	18e00004 	addi	r3,r3,-32768
   12654:	1800261e 	bne	r3,zero,126f0 <__srefill_r+0x19c>
   12658:	10800114 	ori	r2,r2,4
   1265c:	8080030d 	sth	r2,12(r16)
   12660:	003fdb06 	br	125d0 <__srefill_r+0x7c>
   12664:	1000111e 	bne	r2,zero,126ac <__srefill_r+0x158>
   12668:	18c00814 	ori	r3,r3,32
   1266c:	80c0030d 	sth	r3,12(r16)
   12670:	00bfffc4 	movi	r2,-1
   12674:	dfc00217 	ldw	ra,8(sp)
   12678:	dc400117 	ldw	r17,4(sp)
   1267c:	dc000017 	ldw	r16,0(sp)
   12680:	dec00304 	addi	sp,sp,12
   12684:	f800283a 	ret
   12688:	00109dc0 	call	109dc <__sinit>
   1268c:	003fba06 	br	12578 <__srefill_r+0x24>
   12690:	008000b4 	movhi	r2,2
   12694:	10a33304 	addi	r2,r2,-29492
   12698:	11000017 	ldw	r4,0(r2)
   1269c:	01400074 	movhi	r5,1
   126a0:	29494e04 	addi	r5,r5,9528
   126a4:	00117200 	call	11720 <_fwalk>
   126a8:	003fce06 	br	125e4 <__srefill_r+0x90>
   126ac:	18c01014 	ori	r3,r3,64
   126b0:	00bfffc4 	movi	r2,-1
   126b4:	80000115 	stw	zero,4(r16)
   126b8:	80c0030d 	sth	r3,12(r16)
   126bc:	dfc00217 	ldw	ra,8(sp)
   126c0:	dc400117 	ldw	r17,4(sp)
   126c4:	dc000017 	ldw	r16,0(sp)
   126c8:	dec00304 	addi	sp,sp,12
   126cc:	f800283a 	ret
   126d0:	80c00e17 	ldw	r3,56(r16)
   126d4:	0005883a 	mov	r2,zero
   126d8:	80c00015 	stw	r3,0(r16)
   126dc:	dfc00217 	ldw	ra,8(sp)
   126e0:	dc400117 	ldw	r17,4(sp)
   126e4:	dc000017 	ldw	r16,0(sp)
   126e8:	dec00304 	addi	sp,sp,12
   126ec:	f800283a 	ret
   126f0:	8809883a 	mov	r4,r17
   126f4:	800b883a 	mov	r5,r16
   126f8:	00107200 	call	10720 <_fflush_r>
   126fc:	103fdc1e 	bne	r2,zero,12670 <__srefill_r+0x11c>
   12700:	8080030b 	ldhu	r2,12(r16)
   12704:	00fffdc4 	movi	r3,-9
   12708:	80000215 	stw	zero,8(r16)
   1270c:	1884703a 	and	r2,r3,r2
   12710:	80000615 	stw	zero,24(r16)
   12714:	003fd006 	br	12658 <__srefill_r+0x104>
   12718:	8809883a 	mov	r4,r17
   1271c:	800b883a 	mov	r5,r16
   12720:	00118800 	call	11880 <__smakebuf_r>
   12724:	003fac06 	br	125d8 <__srefill_r+0x84>
   12728:	00c00244 	movi	r3,9
   1272c:	10801014 	ori	r2,r2,64
   12730:	88c00015 	stw	r3,0(r17)
   12734:	8080030d 	sth	r2,12(r16)
   12738:	00bfffc4 	movi	r2,-1
   1273c:	003fb706 	br	1261c <__srefill_r+0xc8>

00012740 <_sbrk_r>:
   12740:	defffd04 	addi	sp,sp,-12
   12744:	dc400115 	stw	r17,4(sp)
   12748:	dc000015 	stw	r16,0(sp)
   1274c:	2023883a 	mov	r17,r4
   12750:	040000b4 	movhi	r16,2
   12754:	842a0104 	addi	r16,r16,-22524
   12758:	2809883a 	mov	r4,r5
   1275c:	dfc00215 	stw	ra,8(sp)
   12760:	80000015 	stw	zero,0(r16)
   12764:	0014b140 	call	14b14 <sbrk>
   12768:	00ffffc4 	movi	r3,-1
   1276c:	10c00526 	beq	r2,r3,12784 <_sbrk_r+0x44>
   12770:	dfc00217 	ldw	ra,8(sp)
   12774:	dc400117 	ldw	r17,4(sp)
   12778:	dc000017 	ldw	r16,0(sp)
   1277c:	dec00304 	addi	sp,sp,12
   12780:	f800283a 	ret
   12784:	80c00017 	ldw	r3,0(r16)
   12788:	183ff926 	beq	r3,zero,12770 <_sbrk_r+0x30>
   1278c:	88c00015 	stw	r3,0(r17)
   12790:	dfc00217 	ldw	ra,8(sp)
   12794:	dc400117 	ldw	r17,4(sp)
   12798:	dc000017 	ldw	r16,0(sp)
   1279c:	dec00304 	addi	sp,sp,12
   127a0:	f800283a 	ret

000127a4 <__sread>:
   127a4:	defffe04 	addi	sp,sp,-8
   127a8:	dc000015 	stw	r16,0(sp)
   127ac:	2821883a 	mov	r16,r5
   127b0:	2940038f 	ldh	r5,14(r5)
   127b4:	dfc00115 	stw	ra,4(sp)
   127b8:	00139e80 	call	139e8 <_read_r>
   127bc:	10000716 	blt	r2,zero,127dc <__sread+0x38>
   127c0:	80c01417 	ldw	r3,80(r16)
   127c4:	1887883a 	add	r3,r3,r2
   127c8:	80c01415 	stw	r3,80(r16)
   127cc:	dfc00117 	ldw	ra,4(sp)
   127d0:	dc000017 	ldw	r16,0(sp)
   127d4:	dec00204 	addi	sp,sp,8
   127d8:	f800283a 	ret
   127dc:	80c0030b 	ldhu	r3,12(r16)
   127e0:	18fbffcc 	andi	r3,r3,61439
   127e4:	80c0030d 	sth	r3,12(r16)
   127e8:	dfc00117 	ldw	ra,4(sp)
   127ec:	dc000017 	ldw	r16,0(sp)
   127f0:	dec00204 	addi	sp,sp,8
   127f4:	f800283a 	ret

000127f8 <__swrite>:
   127f8:	2880030b 	ldhu	r2,12(r5)
   127fc:	defffb04 	addi	sp,sp,-20
   12800:	dcc00315 	stw	r19,12(sp)
   12804:	10c0400c 	andi	r3,r2,256
   12808:	18ffffcc 	andi	r3,r3,65535
   1280c:	18e0001c 	xori	r3,r3,32768
   12810:	dc800215 	stw	r18,8(sp)
   12814:	dc400115 	stw	r17,4(sp)
   12818:	dc000015 	stw	r16,0(sp)
   1281c:	dfc00415 	stw	ra,16(sp)
   12820:	18e00004 	addi	r3,r3,-32768
   12824:	2821883a 	mov	r16,r5
   12828:	2027883a 	mov	r19,r4
   1282c:	3025883a 	mov	r18,r6
   12830:	3823883a 	mov	r17,r7
   12834:	18000526 	beq	r3,zero,1284c <__swrite+0x54>
   12838:	2940038f 	ldh	r5,14(r5)
   1283c:	000d883a 	mov	r6,zero
   12840:	01c00084 	movi	r7,2
   12844:	00135b80 	call	135b8 <_lseek_r>
   12848:	8080030b 	ldhu	r2,12(r16)
   1284c:	8140038f 	ldh	r5,14(r16)
   12850:	10bbffcc 	andi	r2,r2,61439
   12854:	9809883a 	mov	r4,r19
   12858:	900d883a 	mov	r6,r18
   1285c:	880f883a 	mov	r7,r17
   12860:	8080030d 	sth	r2,12(r16)
   12864:	dfc00417 	ldw	ra,16(sp)
   12868:	dcc00317 	ldw	r19,12(sp)
   1286c:	dc800217 	ldw	r18,8(sp)
   12870:	dc400117 	ldw	r17,4(sp)
   12874:	dc000017 	ldw	r16,0(sp)
   12878:	dec00504 	addi	sp,sp,20
   1287c:	0012bf41 	jmpi	12bf4 <_write_r>

00012880 <__sseek>:
   12880:	defffe04 	addi	sp,sp,-8
   12884:	dc000015 	stw	r16,0(sp)
   12888:	2821883a 	mov	r16,r5
   1288c:	2940038f 	ldh	r5,14(r5)
   12890:	dfc00115 	stw	ra,4(sp)
   12894:	00135b80 	call	135b8 <_lseek_r>
   12898:	00ffffc4 	movi	r3,-1
   1289c:	10c00826 	beq	r2,r3,128c0 <__sseek+0x40>
   128a0:	80c0030b 	ldhu	r3,12(r16)
   128a4:	80801415 	stw	r2,80(r16)
   128a8:	18c40014 	ori	r3,r3,4096
   128ac:	80c0030d 	sth	r3,12(r16)
   128b0:	dfc00117 	ldw	ra,4(sp)
   128b4:	dc000017 	ldw	r16,0(sp)
   128b8:	dec00204 	addi	sp,sp,8
   128bc:	f800283a 	ret
   128c0:	80c0030b 	ldhu	r3,12(r16)
   128c4:	18fbffcc 	andi	r3,r3,61439
   128c8:	80c0030d 	sth	r3,12(r16)
   128cc:	dfc00117 	ldw	ra,4(sp)
   128d0:	dc000017 	ldw	r16,0(sp)
   128d4:	dec00204 	addi	sp,sp,8
   128d8:	f800283a 	ret

000128dc <__sclose>:
   128dc:	2940038f 	ldh	r5,14(r5)
   128e0:	0012f741 	jmpi	12f74 <_close_r>

000128e4 <strcat>:
   128e4:	defffe04 	addi	sp,sp,-8
   128e8:	dc000015 	stw	r16,0(sp)
   128ec:	dfc00115 	stw	ra,4(sp)
   128f0:	208000cc 	andi	r2,r4,3
   128f4:	2021883a 	mov	r16,r4
   128f8:	1000141e 	bne	r2,zero,1294c <strcat+0x68>
   128fc:	20800017 	ldw	r2,0(r4)
   12900:	027fbff4 	movhi	r9,65279
   12904:	4a7fbfc4 	addi	r9,r9,-257
   12908:	02202074 	movhi	r8,32897
   1290c:	42202004 	addi	r8,r8,-32640
   12910:	1247883a 	add	r3,r2,r9
   12914:	0084303a 	nor	r2,zero,r2
   12918:	1884703a 	and	r2,r3,r2
   1291c:	1204703a 	and	r2,r2,r8
   12920:	2007883a 	mov	r3,r4
   12924:	1000091e 	bne	r2,zero,1294c <strcat+0x68>
   12928:	18c00104 	addi	r3,r3,4
   1292c:	19800017 	ldw	r6,0(r3)
   12930:	324f883a 	add	r7,r6,r9
   12934:	018c303a 	nor	r6,zero,r6
   12938:	398c703a 	and	r6,r7,r6
   1293c:	320c703a 	and	r6,r6,r8
   12940:	303ff926 	beq	r6,zero,12928 <strcat+0x44>
   12944:	1809883a 	mov	r4,r3
   12948:	00000106 	br	12950 <strcat+0x6c>
   1294c:	8009883a 	mov	r4,r16
   12950:	20800007 	ldb	r2,0(r4)
   12954:	10000326 	beq	r2,zero,12964 <strcat+0x80>
   12958:	21000044 	addi	r4,r4,1
   1295c:	20c00007 	ldb	r3,0(r4)
   12960:	183ffd1e 	bne	r3,zero,12958 <strcat+0x74>
   12964:	001297c0 	call	1297c <strcpy>
   12968:	8005883a 	mov	r2,r16
   1296c:	dfc00117 	ldw	ra,4(sp)
   12970:	dc000017 	ldw	r16,0(sp)
   12974:	dec00204 	addi	sp,sp,8
   12978:	f800283a 	ret

0001297c <strcpy>:
   1297c:	2906b03a 	or	r3,r5,r4
   12980:	18c000cc 	andi	r3,r3,3
   12984:	2005883a 	mov	r2,r4
   12988:	18001a1e 	bne	r3,zero,129f4 <strcpy+0x78>
   1298c:	29800017 	ldw	r6,0(r5)
   12990:	02bfbff4 	movhi	r10,65279
   12994:	52bfbfc4 	addi	r10,r10,-257
   12998:	02602074 	movhi	r9,32897
   1299c:	4a602004 	addi	r9,r9,-32640
   129a0:	0188303a 	nor	r4,zero,r6
   129a4:	3287883a 	add	r3,r6,r10
   129a8:	20c6703a 	and	r3,r4,r3
   129ac:	1a46703a 	and	r3,r3,r9
   129b0:	1800101e 	bne	r3,zero,129f4 <strcpy+0x78>
   129b4:	1007883a 	mov	r3,r2
   129b8:	19800015 	stw	r6,0(r3)
   129bc:	29400104 	addi	r5,r5,4
   129c0:	29800017 	ldw	r6,0(r5)
   129c4:	18c00104 	addi	r3,r3,4
   129c8:	0190303a 	nor	r8,zero,r6
   129cc:	328f883a 	add	r7,r6,r10
   129d0:	41ce703a 	and	r7,r8,r7
   129d4:	3a4e703a 	and	r7,r7,r9
   129d8:	383ff726 	beq	r7,zero,129b8 <strcpy+0x3c>
   129dc:	29800007 	ldb	r6,0(r5)
   129e0:	18c00044 	addi	r3,r3,1
   129e4:	29400044 	addi	r5,r5,1
   129e8:	19bfffc5 	stb	r6,-1(r3)
   129ec:	3000021e 	bne	r6,zero,129f8 <strcpy+0x7c>
   129f0:	f800283a 	ret
   129f4:	1007883a 	mov	r3,r2
   129f8:	29800007 	ldb	r6,0(r5)
   129fc:	18c00044 	addi	r3,r3,1
   12a00:	29400044 	addi	r5,r5,1
   12a04:	19bfffc5 	stb	r6,-1(r3)
   12a08:	303ffb1e 	bne	r6,zero,129f8 <strcpy+0x7c>
   12a0c:	f800283a 	ret

00012a10 <strlen>:
   12a10:	208000cc 	andi	r2,r4,3
   12a14:	10001f1e 	bne	r2,zero,12a94 <strlen+0x84>
   12a18:	20800017 	ldw	r2,0(r4)
   12a1c:	01ffbff4 	movhi	r7,65279
   12a20:	39ffbfc4 	addi	r7,r7,-257
   12a24:	01a02074 	movhi	r6,32897
   12a28:	31a02004 	addi	r6,r6,-32640
   12a2c:	11c7883a 	add	r3,r2,r7
   12a30:	0084303a 	nor	r2,zero,r2
   12a34:	1886703a 	and	r3,r3,r2
   12a38:	1986703a 	and	r3,r3,r6
   12a3c:	2005883a 	mov	r2,r4
   12a40:	1800101e 	bne	r3,zero,12a84 <strlen+0x74>
   12a44:	10800104 	addi	r2,r2,4
   12a48:	10c00017 	ldw	r3,0(r2)
   12a4c:	19cb883a 	add	r5,r3,r7
   12a50:	00c6303a 	nor	r3,zero,r3
   12a54:	28c6703a 	and	r3,r5,r3
   12a58:	1986703a 	and	r3,r3,r6
   12a5c:	1800091e 	bne	r3,zero,12a84 <strlen+0x74>
   12a60:	10800104 	addi	r2,r2,4
   12a64:	10c00017 	ldw	r3,0(r2)
   12a68:	19cb883a 	add	r5,r3,r7
   12a6c:	00c6303a 	nor	r3,zero,r3
   12a70:	28c6703a 	and	r3,r5,r3
   12a74:	1986703a 	and	r3,r3,r6
   12a78:	183ff226 	beq	r3,zero,12a44 <strlen+0x34>
   12a7c:	00000106 	br	12a84 <strlen+0x74>
   12a80:	10800044 	addi	r2,r2,1
   12a84:	10c00007 	ldb	r3,0(r2)
   12a88:	183ffd1e 	bne	r3,zero,12a80 <strlen+0x70>
   12a8c:	1105c83a 	sub	r2,r2,r4
   12a90:	f800283a 	ret
   12a94:	2005883a 	mov	r2,r4
   12a98:	003ffa06 	br	12a84 <strlen+0x74>

00012a9c <__swbuf_r>:
   12a9c:	defffc04 	addi	sp,sp,-16
   12aa0:	dc800215 	stw	r18,8(sp)
   12aa4:	dc400115 	stw	r17,4(sp)
   12aa8:	dc000015 	stw	r16,0(sp)
   12aac:	dfc00315 	stw	ra,12(sp)
   12ab0:	2023883a 	mov	r17,r4
   12ab4:	2825883a 	mov	r18,r5
   12ab8:	3021883a 	mov	r16,r6
   12abc:	20000226 	beq	r4,zero,12ac8 <__swbuf_r+0x2c>
   12ac0:	20800e17 	ldw	r2,56(r4)
   12ac4:	10003b26 	beq	r2,zero,12bb4 <__swbuf_r+0x118>
   12ac8:	8080030b 	ldhu	r2,12(r16)
   12acc:	80c00617 	ldw	r3,24(r16)
   12ad0:	1080020c 	andi	r2,r2,8
   12ad4:	10bfffcc 	andi	r2,r2,65535
   12ad8:	10a0001c 	xori	r2,r2,32768
   12adc:	80c00215 	stw	r3,8(r16)
   12ae0:	10a00004 	addi	r2,r2,-32768
   12ae4:	10002226 	beq	r2,zero,12b70 <__swbuf_r+0xd4>
   12ae8:	80800417 	ldw	r2,16(r16)
   12aec:	10002026 	beq	r2,zero,12b70 <__swbuf_r+0xd4>
   12af0:	80c00017 	ldw	r3,0(r16)
   12af4:	81000517 	ldw	r4,20(r16)
   12af8:	94803fcc 	andi	r18,r18,255
   12afc:	1885c83a 	sub	r2,r3,r2
   12b00:	1100250e 	bge	r2,r4,12b98 <__swbuf_r+0xfc>
   12b04:	10800044 	addi	r2,r2,1
   12b08:	81400217 	ldw	r5,8(r16)
   12b0c:	19000044 	addi	r4,r3,1
   12b10:	297fffc4 	addi	r5,r5,-1
   12b14:	81400215 	stw	r5,8(r16)
   12b18:	1c800005 	stb	r18,0(r3)
   12b1c:	80c00517 	ldw	r3,20(r16)
   12b20:	81000015 	stw	r4,0(r16)
   12b24:	18800c26 	beq	r3,r2,12b58 <__swbuf_r+0xbc>
   12b28:	8080030b 	ldhu	r2,12(r16)
   12b2c:	1080004c 	andi	r2,r2,1
   12b30:	10000226 	beq	r2,zero,12b3c <__swbuf_r+0xa0>
   12b34:	00800284 	movi	r2,10
   12b38:	90800726 	beq	r18,r2,12b58 <__swbuf_r+0xbc>
   12b3c:	9005883a 	mov	r2,r18
   12b40:	dfc00317 	ldw	ra,12(sp)
   12b44:	dc800217 	ldw	r18,8(sp)
   12b48:	dc400117 	ldw	r17,4(sp)
   12b4c:	dc000017 	ldw	r16,0(sp)
   12b50:	dec00404 	addi	sp,sp,16
   12b54:	f800283a 	ret
   12b58:	8809883a 	mov	r4,r17
   12b5c:	800b883a 	mov	r5,r16
   12b60:	00107200 	call	10720 <_fflush_r>
   12b64:	103ff526 	beq	r2,zero,12b3c <__swbuf_r+0xa0>
   12b68:	04bfffc4 	movi	r18,-1
   12b6c:	003ff306 	br	12b3c <__swbuf_r+0xa0>
   12b70:	8809883a 	mov	r4,r17
   12b74:	800b883a 	mov	r5,r16
   12b78:	0012c600 	call	12c60 <__swsetup_r>
   12b7c:	10000f1e 	bne	r2,zero,12bbc <__swbuf_r+0x120>
   12b80:	80800417 	ldw	r2,16(r16)
   12b84:	80c00017 	ldw	r3,0(r16)
   12b88:	81000517 	ldw	r4,20(r16)
   12b8c:	94803fcc 	andi	r18,r18,255
   12b90:	1885c83a 	sub	r2,r3,r2
   12b94:	113fdb16 	blt	r2,r4,12b04 <__swbuf_r+0x68>
   12b98:	8809883a 	mov	r4,r17
   12b9c:	800b883a 	mov	r5,r16
   12ba0:	00107200 	call	10720 <_fflush_r>
   12ba4:	103ff01e 	bne	r2,zero,12b68 <__swbuf_r+0xcc>
   12ba8:	80c00017 	ldw	r3,0(r16)
   12bac:	00800044 	movi	r2,1
   12bb0:	003fd506 	br	12b08 <__swbuf_r+0x6c>
   12bb4:	00109dc0 	call	109dc <__sinit>
   12bb8:	003fc306 	br	12ac8 <__swbuf_r+0x2c>
   12bbc:	8080030b 	ldhu	r2,12(r16)
   12bc0:	04bfffc4 	movi	r18,-1
   12bc4:	10801014 	ori	r2,r2,64
   12bc8:	8080030d 	sth	r2,12(r16)
   12bcc:	00800244 	movi	r2,9
   12bd0:	88800015 	stw	r2,0(r17)
   12bd4:	003fd906 	br	12b3c <__swbuf_r+0xa0>

00012bd8 <__swbuf>:
   12bd8:	00c000b4 	movhi	r3,2
   12bdc:	18e33404 	addi	r3,r3,-29488
   12be0:	2005883a 	mov	r2,r4
   12be4:	19000017 	ldw	r4,0(r3)
   12be8:	280d883a 	mov	r6,r5
   12bec:	100b883a 	mov	r5,r2
   12bf0:	0012a9c1 	jmpi	12a9c <__swbuf_r>

00012bf4 <_write_r>:
   12bf4:	defffd04 	addi	sp,sp,-12
   12bf8:	dc400115 	stw	r17,4(sp)
   12bfc:	dc000015 	stw	r16,0(sp)
   12c00:	2023883a 	mov	r17,r4
   12c04:	040000b4 	movhi	r16,2
   12c08:	842a0104 	addi	r16,r16,-22524
   12c0c:	2809883a 	mov	r4,r5
   12c10:	300b883a 	mov	r5,r6
   12c14:	380d883a 	mov	r6,r7
   12c18:	dfc00215 	stw	ra,8(sp)
   12c1c:	80000015 	stw	zero,0(r16)
   12c20:	0014c140 	call	14c14 <write>
   12c24:	00ffffc4 	movi	r3,-1
   12c28:	10c00526 	beq	r2,r3,12c40 <_write_r+0x4c>
   12c2c:	dfc00217 	ldw	ra,8(sp)
   12c30:	dc400117 	ldw	r17,4(sp)
   12c34:	dc000017 	ldw	r16,0(sp)
   12c38:	dec00304 	addi	sp,sp,12
   12c3c:	f800283a 	ret
   12c40:	80c00017 	ldw	r3,0(r16)
   12c44:	183ff926 	beq	r3,zero,12c2c <_write_r+0x38>
   12c48:	88c00015 	stw	r3,0(r17)
   12c4c:	dfc00217 	ldw	ra,8(sp)
   12c50:	dc400117 	ldw	r17,4(sp)
   12c54:	dc000017 	ldw	r16,0(sp)
   12c58:	dec00304 	addi	sp,sp,12
   12c5c:	f800283a 	ret

00012c60 <__swsetup_r>:
   12c60:	008000b4 	movhi	r2,2
   12c64:	10a33404 	addi	r2,r2,-29488
   12c68:	10800017 	ldw	r2,0(r2)
   12c6c:	defffd04 	addi	sp,sp,-12
   12c70:	dc400115 	stw	r17,4(sp)
   12c74:	dc000015 	stw	r16,0(sp)
   12c78:	dfc00215 	stw	ra,8(sp)
   12c7c:	2023883a 	mov	r17,r4
   12c80:	2821883a 	mov	r16,r5
   12c84:	10000226 	beq	r2,zero,12c90 <__swsetup_r+0x30>
   12c88:	10c00e17 	ldw	r3,56(r2)
   12c8c:	18003d26 	beq	r3,zero,12d84 <__swsetup_r+0x124>
   12c90:	8080030b 	ldhu	r2,12(r16)
   12c94:	10c0020c 	andi	r3,r2,8
   12c98:	18ffffcc 	andi	r3,r3,65535
   12c9c:	18e0001c 	xori	r3,r3,32768
   12ca0:	18e00004 	addi	r3,r3,-32768
   12ca4:	18001226 	beq	r3,zero,12cf0 <__swsetup_r+0x90>
   12ca8:	80c00417 	ldw	r3,16(r16)
   12cac:	18001f26 	beq	r3,zero,12d2c <__swsetup_r+0xcc>
   12cb0:	1100004c 	andi	r4,r2,1
   12cb4:	2000261e 	bne	r4,zero,12d50 <__swsetup_r+0xf0>
   12cb8:	1080008c 	andi	r2,r2,2
   12cbc:	10bfffcc 	andi	r2,r2,65535
   12cc0:	10a0001c 	xori	r2,r2,32768
   12cc4:	10a00004 	addi	r2,r2,-32768
   12cc8:	1000311e 	bne	r2,zero,12d90 <__swsetup_r+0x130>
   12ccc:	80800517 	ldw	r2,20(r16)
   12cd0:	80800215 	stw	r2,8(r16)
   12cd4:	18002326 	beq	r3,zero,12d64 <__swsetup_r+0x104>
   12cd8:	0005883a 	mov	r2,zero
   12cdc:	dfc00217 	ldw	ra,8(sp)
   12ce0:	dc400117 	ldw	r17,4(sp)
   12ce4:	dc000017 	ldw	r16,0(sp)
   12ce8:	dec00304 	addi	sp,sp,12
   12cec:	f800283a 	ret
   12cf0:	10c0040c 	andi	r3,r2,16
   12cf4:	18ffffcc 	andi	r3,r3,65535
   12cf8:	18e0001c 	xori	r3,r3,32768
   12cfc:	18e00004 	addi	r3,r3,-32768
   12d00:	18001e26 	beq	r3,zero,12d7c <__swsetup_r+0x11c>
   12d04:	10c0010c 	andi	r3,r2,4
   12d08:	18ffffcc 	andi	r3,r3,65535
   12d0c:	18e0001c 	xori	r3,r3,32768
   12d10:	18e00004 	addi	r3,r3,-32768
   12d14:	1800211e 	bne	r3,zero,12d9c <__swsetup_r+0x13c>
   12d18:	80c00417 	ldw	r3,16(r16)
   12d1c:	11400214 	ori	r5,r2,8
   12d20:	8140030d 	sth	r5,12(r16)
   12d24:	2805883a 	mov	r2,r5
   12d28:	183fe11e 	bne	r3,zero,12cb0 <__swsetup_r+0x50>
   12d2c:	1140a00c 	andi	r5,r2,640
   12d30:	01008004 	movi	r4,512
   12d34:	293fde26 	beq	r5,r4,12cb0 <__swsetup_r+0x50>
   12d38:	8809883a 	mov	r4,r17
   12d3c:	800b883a 	mov	r5,r16
   12d40:	00118800 	call	11880 <__smakebuf_r>
   12d44:	8080030b 	ldhu	r2,12(r16)
   12d48:	80c00417 	ldw	r3,16(r16)
   12d4c:	003fd806 	br	12cb0 <__swsetup_r+0x50>
   12d50:	80800517 	ldw	r2,20(r16)
   12d54:	80000215 	stw	zero,8(r16)
   12d58:	0085c83a 	sub	r2,zero,r2
   12d5c:	80800615 	stw	r2,24(r16)
   12d60:	183fdd1e 	bne	r3,zero,12cd8 <__swsetup_r+0x78>
   12d64:	8080030b 	ldhu	r2,12(r16)
   12d68:	1080200c 	andi	r2,r2,128
   12d6c:	10bfffcc 	andi	r2,r2,65535
   12d70:	10a0001c 	xori	r2,r2,32768
   12d74:	10a00004 	addi	r2,r2,-32768
   12d78:	103fd826 	beq	r2,zero,12cdc <__swsetup_r+0x7c>
   12d7c:	00bfffc4 	movi	r2,-1
   12d80:	003fd606 	br	12cdc <__swsetup_r+0x7c>
   12d84:	1009883a 	mov	r4,r2
   12d88:	00109dc0 	call	109dc <__sinit>
   12d8c:	003fc006 	br	12c90 <__swsetup_r+0x30>
   12d90:	0005883a 	mov	r2,zero
   12d94:	80800215 	stw	r2,8(r16)
   12d98:	003fce06 	br	12cd4 <__swsetup_r+0x74>
   12d9c:	81400c17 	ldw	r5,48(r16)
   12da0:	28000626 	beq	r5,zero,12dbc <__swsetup_r+0x15c>
   12da4:	80c01004 	addi	r3,r16,64
   12da8:	28c00326 	beq	r5,r3,12db8 <__swsetup_r+0x158>
   12dac:	8809883a 	mov	r4,r17
   12db0:	0010f500 	call	10f50 <_free_r>
   12db4:	8080030b 	ldhu	r2,12(r16)
   12db8:	80000c15 	stw	zero,48(r16)
   12dbc:	80c00417 	ldw	r3,16(r16)
   12dc0:	013ff6c4 	movi	r4,-37
   12dc4:	2084703a 	and	r2,r4,r2
   12dc8:	80000115 	stw	zero,4(r16)
   12dcc:	80c00015 	stw	r3,0(r16)
   12dd0:	003fd206 	br	12d1c <__swsetup_r+0xbc>

00012dd4 <__call_exitprocs>:
   12dd4:	008000b4 	movhi	r2,2
   12dd8:	10a33304 	addi	r2,r2,-29492
   12ddc:	10800017 	ldw	r2,0(r2)
   12de0:	defff304 	addi	sp,sp,-52
   12de4:	df000b15 	stw	fp,44(sp)
   12de8:	d8800015 	stw	r2,0(sp)
   12dec:	10805204 	addi	r2,r2,328
   12df0:	dd400815 	stw	r21,32(sp)
   12df4:	dfc00c15 	stw	ra,48(sp)
   12df8:	ddc00a15 	stw	r23,40(sp)
   12dfc:	dd800915 	stw	r22,36(sp)
   12e00:	dd000715 	stw	r20,28(sp)
   12e04:	dcc00615 	stw	r19,24(sp)
   12e08:	dc800515 	stw	r18,20(sp)
   12e0c:	dc400415 	stw	r17,16(sp)
   12e10:	dc000315 	stw	r16,12(sp)
   12e14:	d9000115 	stw	r4,4(sp)
   12e18:	2839883a 	mov	fp,r5
   12e1c:	d8800215 	stw	r2,8(sp)
   12e20:	057fffc4 	movi	r21,-1
   12e24:	d8800017 	ldw	r2,0(sp)
   12e28:	ddc00217 	ldw	r23,8(sp)
   12e2c:	14805217 	ldw	r18,328(r2)
   12e30:	90001726 	beq	r18,zero,12e90 <__call_exitprocs+0xbc>
   12e34:	94400117 	ldw	r17,4(r18)
   12e38:	8c3fffc4 	addi	r16,r17,-1
   12e3c:	80001116 	blt	r16,zero,12e84 <__call_exitprocs+0xb0>
   12e40:	8c400044 	addi	r17,r17,1
   12e44:	8427883a 	add	r19,r16,r16
   12e48:	8c63883a 	add	r17,r17,r17
   12e4c:	95802204 	addi	r22,r18,136
   12e50:	9ce7883a 	add	r19,r19,r19
   12e54:	8c63883a 	add	r17,r17,r17
   12e58:	b4e7883a 	add	r19,r22,r19
   12e5c:	9463883a 	add	r17,r18,r17
   12e60:	e0001726 	beq	fp,zero,12ec0 <__call_exitprocs+0xec>
   12e64:	8c87c83a 	sub	r3,r17,r18
   12e68:	b0c7883a 	add	r3,r22,r3
   12e6c:	18c01e17 	ldw	r3,120(r3)
   12e70:	1f001326 	beq	r3,fp,12ec0 <__call_exitprocs+0xec>
   12e74:	843fffc4 	addi	r16,r16,-1
   12e78:	9cffff04 	addi	r19,r19,-4
   12e7c:	8c7fff04 	addi	r17,r17,-4
   12e80:	857ff71e 	bne	r16,r21,12e60 <__call_exitprocs+0x8c>
   12e84:	00800034 	movhi	r2,0
   12e88:	10800004 	addi	r2,r2,0
   12e8c:	10002a1e 	bne	r2,zero,12f38 <__call_exitprocs+0x164>
   12e90:	dfc00c17 	ldw	ra,48(sp)
   12e94:	df000b17 	ldw	fp,44(sp)
   12e98:	ddc00a17 	ldw	r23,40(sp)
   12e9c:	dd800917 	ldw	r22,36(sp)
   12ea0:	dd400817 	ldw	r21,32(sp)
   12ea4:	dd000717 	ldw	r20,28(sp)
   12ea8:	dcc00617 	ldw	r19,24(sp)
   12eac:	dc800517 	ldw	r18,20(sp)
   12eb0:	dc400417 	ldw	r17,16(sp)
   12eb4:	dc000317 	ldw	r16,12(sp)
   12eb8:	dec00d04 	addi	sp,sp,52
   12ebc:	f800283a 	ret
   12ec0:	91000117 	ldw	r4,4(r18)
   12ec4:	88c00017 	ldw	r3,0(r17)
   12ec8:	213fffc4 	addi	r4,r4,-1
   12ecc:	24001526 	beq	r4,r16,12f24 <__call_exitprocs+0x150>
   12ed0:	88000015 	stw	zero,0(r17)
   12ed4:	183fe726 	beq	r3,zero,12e74 <__call_exitprocs+0xa0>
   12ed8:	00800044 	movi	r2,1
   12edc:	1408983a 	sll	r4,r2,r16
   12ee0:	91406217 	ldw	r5,392(r18)
   12ee4:	95000117 	ldw	r20,4(r18)
   12ee8:	214a703a 	and	r5,r4,r5
   12eec:	28000b26 	beq	r5,zero,12f1c <__call_exitprocs+0x148>
   12ef0:	91406317 	ldw	r5,396(r18)
   12ef4:	2148703a 	and	r4,r4,r5
   12ef8:	20000c1e 	bne	r4,zero,12f2c <__call_exitprocs+0x158>
   12efc:	99400017 	ldw	r5,0(r19)
   12f00:	d9000117 	ldw	r4,4(sp)
   12f04:	183ee83a 	callr	r3
   12f08:	90c00117 	ldw	r3,4(r18)
   12f0c:	1d3fc51e 	bne	r3,r20,12e24 <__call_exitprocs+0x50>
   12f10:	b8c00017 	ldw	r3,0(r23)
   12f14:	1cbfd726 	beq	r3,r18,12e74 <__call_exitprocs+0xa0>
   12f18:	003fc206 	br	12e24 <__call_exitprocs+0x50>
   12f1c:	183ee83a 	callr	r3
   12f20:	003ff906 	br	12f08 <__call_exitprocs+0x134>
   12f24:	94000115 	stw	r16,4(r18)
   12f28:	003fea06 	br	12ed4 <__call_exitprocs+0x100>
   12f2c:	99000017 	ldw	r4,0(r19)
   12f30:	183ee83a 	callr	r3
   12f34:	003ff406 	br	12f08 <__call_exitprocs+0x134>
   12f38:	90c00117 	ldw	r3,4(r18)
   12f3c:	1800071e 	bne	r3,zero,12f5c <__call_exitprocs+0x188>
   12f40:	90c00017 	ldw	r3,0(r18)
   12f44:	18000926 	beq	r3,zero,12f6c <__call_exitprocs+0x198>
   12f48:	9009883a 	mov	r4,r18
   12f4c:	b8c00015 	stw	r3,0(r23)
   12f50:	00000000 	call	0 <__alt_mem_mem6-0x10000>
   12f54:	bc800017 	ldw	r18,0(r23)
   12f58:	003fb506 	br	12e30 <__call_exitprocs+0x5c>
   12f5c:	90c00017 	ldw	r3,0(r18)
   12f60:	902f883a 	mov	r23,r18
   12f64:	1825883a 	mov	r18,r3
   12f68:	003fb106 	br	12e30 <__call_exitprocs+0x5c>
   12f6c:	0007883a 	mov	r3,zero
   12f70:	003ffb06 	br	12f60 <__call_exitprocs+0x18c>

00012f74 <_close_r>:
   12f74:	defffd04 	addi	sp,sp,-12
   12f78:	dc400115 	stw	r17,4(sp)
   12f7c:	dc000015 	stw	r16,0(sp)
   12f80:	2023883a 	mov	r17,r4
   12f84:	040000b4 	movhi	r16,2
   12f88:	842a0104 	addi	r16,r16,-22524
   12f8c:	2809883a 	mov	r4,r5
   12f90:	dfc00215 	stw	ra,8(sp)
   12f94:	80000015 	stw	zero,0(r16)
   12f98:	00140c80 	call	140c8 <close>
   12f9c:	00ffffc4 	movi	r3,-1
   12fa0:	10c00526 	beq	r2,r3,12fb8 <_close_r+0x44>
   12fa4:	dfc00217 	ldw	ra,8(sp)
   12fa8:	dc400117 	ldw	r17,4(sp)
   12fac:	dc000017 	ldw	r16,0(sp)
   12fb0:	dec00304 	addi	sp,sp,12
   12fb4:	f800283a 	ret
   12fb8:	80c00017 	ldw	r3,0(r16)
   12fbc:	183ff926 	beq	r3,zero,12fa4 <_close_r+0x30>
   12fc0:	88c00015 	stw	r3,0(r17)
   12fc4:	dfc00217 	ldw	ra,8(sp)
   12fc8:	dc400117 	ldw	r17,4(sp)
   12fcc:	dc000017 	ldw	r16,0(sp)
   12fd0:	dec00304 	addi	sp,sp,12
   12fd4:	f800283a 	ret

00012fd8 <__sflags>:
   12fd8:	28800007 	ldb	r2,0(r5)
   12fdc:	00c01c84 	movi	r3,114
   12fe0:	10c01826 	beq	r2,r3,13044 <__sflags+0x6c>
   12fe4:	00c01dc4 	movi	r3,119
   12fe8:	10c01226 	beq	r2,r3,13034 <__sflags+0x5c>
   12fec:	00c01844 	movi	r3,97
   12ff0:	10c00426 	beq	r2,r3,13004 <__sflags+0x2c>
   12ff4:	00800584 	movi	r2,22
   12ff8:	20800015 	stw	r2,0(r4)
   12ffc:	0005883a 	mov	r2,zero
   13000:	f800283a 	ret
   13004:	01c08204 	movi	r7,520
   13008:	01000044 	movi	r4,1
   1300c:	00804204 	movi	r2,264
   13010:	28c00047 	ldb	r3,1(r5)
   13014:	18000426 	beq	r3,zero,13028 <__sflags+0x50>
   13018:	02000ac4 	movi	r8,43
   1301c:	1a000d26 	beq	r3,r8,13054 <__sflags+0x7c>
   13020:	28c00087 	ldb	r3,2(r5)
   13024:	1a000b26 	beq	r3,r8,13054 <__sflags+0x7c>
   13028:	21c8b03a 	or	r4,r4,r7
   1302c:	31000015 	stw	r4,0(r6)
   13030:	f800283a 	ret
   13034:	01c18004 	movi	r7,1536
   13038:	01000044 	movi	r4,1
   1303c:	00800204 	movi	r2,8
   13040:	003ff306 	br	13010 <__sflags+0x38>
   13044:	000f883a 	mov	r7,zero
   13048:	0009883a 	mov	r4,zero
   1304c:	00800104 	movi	r2,4
   13050:	003fef06 	br	13010 <__sflags+0x38>
   13054:	00fff8c4 	movi	r3,-29
   13058:	01000084 	movi	r4,2
   1305c:	10c4703a 	and	r2,r2,r3
   13060:	21c8b03a 	or	r4,r4,r7
   13064:	10800414 	ori	r2,r2,16
   13068:	31000015 	stw	r4,0(r6)
   1306c:	f800283a 	ret

00013070 <__sfvwrite_r>:
   13070:	30800217 	ldw	r2,8(r6)
   13074:	defff504 	addi	sp,sp,-44
   13078:	dd400615 	stw	r21,24(sp)
   1307c:	dd000515 	stw	r20,20(sp)
   13080:	dc000115 	stw	r16,4(sp)
   13084:	dfc00a15 	stw	ra,40(sp)
   13088:	df000915 	stw	fp,36(sp)
   1308c:	ddc00815 	stw	r23,32(sp)
   13090:	dd800715 	stw	r22,28(sp)
   13094:	dcc00415 	stw	r19,16(sp)
   13098:	dc800315 	stw	r18,12(sp)
   1309c:	dc400215 	stw	r17,8(sp)
   130a0:	3029883a 	mov	r20,r6
   130a4:	202b883a 	mov	r21,r4
   130a8:	2821883a 	mov	r16,r5
   130ac:	10002126 	beq	r2,zero,13134 <__sfvwrite_r+0xc4>
   130b0:	2880030b 	ldhu	r2,12(r5)
   130b4:	10c0020c 	andi	r3,r2,8
   130b8:	18ffffcc 	andi	r3,r3,65535
   130bc:	18e0001c 	xori	r3,r3,32768
   130c0:	18e00004 	addi	r3,r3,-32768
   130c4:	18002826 	beq	r3,zero,13168 <__sfvwrite_r+0xf8>
   130c8:	28c00417 	ldw	r3,16(r5)
   130cc:	18002626 	beq	r3,zero,13168 <__sfvwrite_r+0xf8>
   130d0:	10c0008c 	andi	r3,r2,2
   130d4:	18ffffcc 	andi	r3,r3,65535
   130d8:	18e0001c 	xori	r3,r3,32768
   130dc:	18e00004 	addi	r3,r3,-32768
   130e0:	a4400017 	ldw	r17,0(r20)
   130e4:	18002b26 	beq	r3,zero,13194 <__sfvwrite_r+0x124>
   130e8:	0027883a 	mov	r19,zero
   130ec:	0025883a 	mov	r18,zero
   130f0:	05810004 	movi	r22,1024
   130f4:	980d883a 	mov	r6,r19
   130f8:	a809883a 	mov	r4,r21
   130fc:	90004f26 	beq	r18,zero,1323c <__sfvwrite_r+0x1cc>
   13100:	900f883a 	mov	r7,r18
   13104:	81400717 	ldw	r5,28(r16)
   13108:	b480012e 	bgeu	r22,r18,13110 <__sfvwrite_r+0xa0>
   1310c:	01c10004 	movi	r7,1024
   13110:	80800917 	ldw	r2,36(r16)
   13114:	103ee83a 	callr	r2
   13118:	0080540e 	bge	zero,r2,1326c <__sfvwrite_r+0x1fc>
   1311c:	a0c00217 	ldw	r3,8(r20)
   13120:	98a7883a 	add	r19,r19,r2
   13124:	90a5c83a 	sub	r18,r18,r2
   13128:	1885c83a 	sub	r2,r3,r2
   1312c:	a0800215 	stw	r2,8(r20)
   13130:	103ff01e 	bne	r2,zero,130f4 <__sfvwrite_r+0x84>
   13134:	0005883a 	mov	r2,zero
   13138:	dfc00a17 	ldw	ra,40(sp)
   1313c:	df000917 	ldw	fp,36(sp)
   13140:	ddc00817 	ldw	r23,32(sp)
   13144:	dd800717 	ldw	r22,28(sp)
   13148:	dd400617 	ldw	r21,24(sp)
   1314c:	dd000517 	ldw	r20,20(sp)
   13150:	dcc00417 	ldw	r19,16(sp)
   13154:	dc800317 	ldw	r18,12(sp)
   13158:	dc400217 	ldw	r17,8(sp)
   1315c:	dc000117 	ldw	r16,4(sp)
   13160:	dec00b04 	addi	sp,sp,44
   13164:	f800283a 	ret
   13168:	a809883a 	mov	r4,r21
   1316c:	800b883a 	mov	r5,r16
   13170:	0012c600 	call	12c60 <__swsetup_r>
   13174:	1000f01e 	bne	r2,zero,13538 <__sfvwrite_r+0x4c8>
   13178:	8080030b 	ldhu	r2,12(r16)
   1317c:	a4400017 	ldw	r17,0(r20)
   13180:	10c0008c 	andi	r3,r2,2
   13184:	18ffffcc 	andi	r3,r3,65535
   13188:	18e0001c 	xori	r3,r3,32768
   1318c:	18e00004 	addi	r3,r3,-32768
   13190:	183fd51e 	bne	r3,zero,130e8 <__sfvwrite_r+0x78>
   13194:	10c0004c 	andi	r3,r2,1
   13198:	002d883a 	mov	r22,zero
   1319c:	1800381e 	bne	r3,zero,13280 <__sfvwrite_r+0x210>
   131a0:	0025883a 	mov	r18,zero
   131a4:	90002126 	beq	r18,zero,1322c <__sfvwrite_r+0x1bc>
   131a8:	10c0800c 	andi	r3,r2,512
   131ac:	18ffffcc 	andi	r3,r3,65535
   131b0:	18e0001c 	xori	r3,r3,32768
   131b4:	18e00004 	addi	r3,r3,-32768
   131b8:	84c00217 	ldw	r19,8(r16)
   131bc:	18006b26 	beq	r3,zero,1336c <__sfvwrite_r+0x2fc>
   131c0:	980f883a 	mov	r7,r19
   131c4:	94c08636 	bltu	r18,r19,133e0 <__sfvwrite_r+0x370>
   131c8:	10c1200c 	andi	r3,r2,1152
   131cc:	18009f1e 	bne	r3,zero,1344c <__sfvwrite_r+0x3dc>
   131d0:	81000017 	ldw	r4,0(r16)
   131d4:	982f883a 	mov	r23,r19
   131d8:	9039883a 	mov	fp,r18
   131dc:	9027883a 	mov	r19,r18
   131e0:	380d883a 	mov	r6,r7
   131e4:	b00b883a 	mov	r5,r22
   131e8:	d9c00015 	stw	r7,0(sp)
   131ec:	001385c0 	call	1385c <memmove>
   131f0:	d9c00017 	ldw	r7,0(sp)
   131f4:	81000217 	ldw	r4,8(r16)
   131f8:	80800017 	ldw	r2,0(r16)
   131fc:	25efc83a 	sub	r23,r4,r23
   13200:	11cf883a 	add	r7,r2,r7
   13204:	85c00215 	stw	r23,8(r16)
   13208:	81c00015 	stw	r7,0(r16)
   1320c:	a0800217 	ldw	r2,8(r20)
   13210:	b72d883a 	add	r22,r22,fp
   13214:	9725c83a 	sub	r18,r18,fp
   13218:	14e7c83a 	sub	r19,r2,r19
   1321c:	a4c00215 	stw	r19,8(r20)
   13220:	983fc426 	beq	r19,zero,13134 <__sfvwrite_r+0xc4>
   13224:	8080030b 	ldhu	r2,12(r16)
   13228:	903fdf1e 	bne	r18,zero,131a8 <__sfvwrite_r+0x138>
   1322c:	8d800017 	ldw	r22,0(r17)
   13230:	8c800117 	ldw	r18,4(r17)
   13234:	8c400204 	addi	r17,r17,8
   13238:	003fda06 	br	131a4 <__sfvwrite_r+0x134>
   1323c:	8cc00017 	ldw	r19,0(r17)
   13240:	8c800117 	ldw	r18,4(r17)
   13244:	8c400204 	addi	r17,r17,8
   13248:	003faa06 	br	130f4 <__sfvwrite_r+0x84>
   1324c:	0013a540 	call	13a54 <_realloc_r>
   13250:	102f883a 	mov	r23,r2
   13254:	10009f1e 	bne	r2,zero,134d4 <__sfvwrite_r+0x464>
   13258:	81400417 	ldw	r5,16(r16)
   1325c:	a809883a 	mov	r4,r21
   13260:	0010f500 	call	10f50 <_free_r>
   13264:	00800304 	movi	r2,12
   13268:	a8800015 	stw	r2,0(r21)
   1326c:	80c0030b 	ldhu	r3,12(r16)
   13270:	00bfffc4 	movi	r2,-1
   13274:	18c01014 	ori	r3,r3,64
   13278:	80c0030d 	sth	r3,12(r16)
   1327c:	003fae06 	br	13138 <__sfvwrite_r+0xc8>
   13280:	0007883a 	mov	r3,zero
   13284:	0039883a 	mov	fp,zero
   13288:	0025883a 	mov	r18,zero
   1328c:	90001e26 	beq	r18,zero,13308 <__sfvwrite_r+0x298>
   13290:	18006526 	beq	r3,zero,13428 <__sfvwrite_r+0x3b8>
   13294:	b02f883a 	mov	r23,r22
   13298:	9580012e 	bgeu	r18,r22,132a0 <__sfvwrite_r+0x230>
   1329c:	902f883a 	mov	r23,r18
   132a0:	81000017 	ldw	r4,0(r16)
   132a4:	80800417 	ldw	r2,16(r16)
   132a8:	84c00217 	ldw	r19,8(r16)
   132ac:	81c00517 	ldw	r7,20(r16)
   132b0:	1100022e 	bgeu	r2,r4,132bc <__sfvwrite_r+0x24c>
   132b4:	99e7883a 	add	r19,r19,r7
   132b8:	9dc01816 	blt	r19,r23,1331c <__sfvwrite_r+0x2ac>
   132bc:	b9c03b16 	blt	r23,r7,133ac <__sfvwrite_r+0x33c>
   132c0:	80800917 	ldw	r2,36(r16)
   132c4:	81400717 	ldw	r5,28(r16)
   132c8:	a809883a 	mov	r4,r21
   132cc:	d8c00015 	stw	r3,0(sp)
   132d0:	e00d883a 	mov	r6,fp
   132d4:	103ee83a 	callr	r2
   132d8:	1027883a 	mov	r19,r2
   132dc:	d8c00017 	ldw	r3,0(sp)
   132e0:	00bfe20e 	bge	zero,r2,1326c <__sfvwrite_r+0x1fc>
   132e4:	b4edc83a 	sub	r22,r22,r19
   132e8:	b0001a26 	beq	r22,zero,13354 <__sfvwrite_r+0x2e4>
   132ec:	a0800217 	ldw	r2,8(r20)
   132f0:	e4f9883a 	add	fp,fp,r19
   132f4:	94e5c83a 	sub	r18,r18,r19
   132f8:	14e7c83a 	sub	r19,r2,r19
   132fc:	a4c00215 	stw	r19,8(r20)
   13300:	983f8c26 	beq	r19,zero,13134 <__sfvwrite_r+0xc4>
   13304:	903fe21e 	bne	r18,zero,13290 <__sfvwrite_r+0x220>
   13308:	8f000017 	ldw	fp,0(r17)
   1330c:	8c800117 	ldw	r18,4(r17)
   13310:	0007883a 	mov	r3,zero
   13314:	8c400204 	addi	r17,r17,8
   13318:	003fdc06 	br	1328c <__sfvwrite_r+0x21c>
   1331c:	e00b883a 	mov	r5,fp
   13320:	980d883a 	mov	r6,r19
   13324:	d8c00015 	stw	r3,0(sp)
   13328:	001385c0 	call	1385c <memmove>
   1332c:	80800017 	ldw	r2,0(r16)
   13330:	a809883a 	mov	r4,r21
   13334:	800b883a 	mov	r5,r16
   13338:	14c5883a 	add	r2,r2,r19
   1333c:	80800015 	stw	r2,0(r16)
   13340:	00107200 	call	10720 <_fflush_r>
   13344:	d8c00017 	ldw	r3,0(sp)
   13348:	103fc81e 	bne	r2,zero,1326c <__sfvwrite_r+0x1fc>
   1334c:	b4edc83a 	sub	r22,r22,r19
   13350:	b03fe61e 	bne	r22,zero,132ec <__sfvwrite_r+0x27c>
   13354:	a809883a 	mov	r4,r21
   13358:	800b883a 	mov	r5,r16
   1335c:	00107200 	call	10720 <_fflush_r>
   13360:	103fc21e 	bne	r2,zero,1326c <__sfvwrite_r+0x1fc>
   13364:	0007883a 	mov	r3,zero
   13368:	003fe006 	br	132ec <__sfvwrite_r+0x27c>
   1336c:	81000017 	ldw	r4,0(r16)
   13370:	80800417 	ldw	r2,16(r16)
   13374:	1100022e 	bgeu	r2,r4,13380 <__sfvwrite_r+0x310>
   13378:	9839883a 	mov	fp,r19
   1337c:	9c806036 	bltu	r19,r18,13500 <__sfvwrite_r+0x490>
   13380:	81c00517 	ldw	r7,20(r16)
   13384:	91c01c36 	bltu	r18,r7,133f8 <__sfvwrite_r+0x388>
   13388:	80800917 	ldw	r2,36(r16)
   1338c:	81400717 	ldw	r5,28(r16)
   13390:	a809883a 	mov	r4,r21
   13394:	b00d883a 	mov	r6,r22
   13398:	103ee83a 	callr	r2
   1339c:	1027883a 	mov	r19,r2
   133a0:	00bfb20e 	bge	zero,r2,1326c <__sfvwrite_r+0x1fc>
   133a4:	1039883a 	mov	fp,r2
   133a8:	003f9806 	br	1320c <__sfvwrite_r+0x19c>
   133ac:	b80d883a 	mov	r6,r23
   133b0:	e00b883a 	mov	r5,fp
   133b4:	d8c00015 	stw	r3,0(sp)
   133b8:	001385c0 	call	1385c <memmove>
   133bc:	80800217 	ldw	r2,8(r16)
   133c0:	81000017 	ldw	r4,0(r16)
   133c4:	b827883a 	mov	r19,r23
   133c8:	15c5c83a 	sub	r2,r2,r23
   133cc:	25ef883a 	add	r23,r4,r23
   133d0:	80800215 	stw	r2,8(r16)
   133d4:	85c00015 	stw	r23,0(r16)
   133d8:	d8c00017 	ldw	r3,0(sp)
   133dc:	003fc106 	br	132e4 <__sfvwrite_r+0x274>
   133e0:	81000017 	ldw	r4,0(r16)
   133e4:	902f883a 	mov	r23,r18
   133e8:	9039883a 	mov	fp,r18
   133ec:	9027883a 	mov	r19,r18
   133f0:	900f883a 	mov	r7,r18
   133f4:	003f7a06 	br	131e0 <__sfvwrite_r+0x170>
   133f8:	b00b883a 	mov	r5,r22
   133fc:	900d883a 	mov	r6,r18
   13400:	001385c0 	call	1385c <memmove>
   13404:	80c00217 	ldw	r3,8(r16)
   13408:	80800017 	ldw	r2,0(r16)
   1340c:	9027883a 	mov	r19,r18
   13410:	1c87c83a 	sub	r3,r3,r18
   13414:	1485883a 	add	r2,r2,r18
   13418:	80c00215 	stw	r3,8(r16)
   1341c:	80800015 	stw	r2,0(r16)
   13420:	9039883a 	mov	fp,r18
   13424:	003f7906 	br	1320c <__sfvwrite_r+0x19c>
   13428:	e009883a 	mov	r4,fp
   1342c:	01400284 	movi	r5,10
   13430:	900d883a 	mov	r6,r18
   13434:	00136240 	call	13624 <memchr>
   13438:	10003c26 	beq	r2,zero,1352c <__sfvwrite_r+0x4bc>
   1343c:	15800044 	addi	r22,r2,1
   13440:	b72dc83a 	sub	r22,r22,fp
   13444:	00c00044 	movi	r3,1
   13448:	003f9206 	br	13294 <__sfvwrite_r+0x224>
   1344c:	81000517 	ldw	r4,20(r16)
   13450:	81400417 	ldw	r5,16(r16)
   13454:	80c00017 	ldw	r3,0(r16)
   13458:	210d883a 	add	r6,r4,r4
   1345c:	3109883a 	add	r4,r6,r4
   13460:	2026d7fa 	srli	r19,r4,31
   13464:	1979c83a 	sub	fp,r3,r5
   13468:	e1800044 	addi	r6,fp,1
   1346c:	9909883a 	add	r4,r19,r4
   13470:	2027d07a 	srai	r19,r4,1
   13474:	3489883a 	add	r4,r6,r18
   13478:	980d883a 	mov	r6,r19
   1347c:	9900022e 	bgeu	r19,r4,13488 <__sfvwrite_r+0x418>
   13480:	2027883a 	mov	r19,r4
   13484:	200d883a 	mov	r6,r4
   13488:	1081000c 	andi	r2,r2,1024
   1348c:	10bfffcc 	andi	r2,r2,65535
   13490:	10a0001c 	xori	r2,r2,32768
   13494:	10a00004 	addi	r2,r2,-32768
   13498:	a809883a 	mov	r4,r21
   1349c:	103f6b26 	beq	r2,zero,1324c <__sfvwrite_r+0x1dc>
   134a0:	300b883a 	mov	r5,r6
   134a4:	0011a280 	call	11a28 <_malloc_r>
   134a8:	102f883a 	mov	r23,r2
   134ac:	103f6d26 	beq	r2,zero,13264 <__sfvwrite_r+0x1f4>
   134b0:	81400417 	ldw	r5,16(r16)
   134b4:	1009883a 	mov	r4,r2
   134b8:	e00d883a 	mov	r6,fp
   134bc:	001371c0 	call	1371c <memcpy>
   134c0:	8080030b 	ldhu	r2,12(r16)
   134c4:	00fedfc4 	movi	r3,-1153
   134c8:	10c4703a 	and	r2,r2,r3
   134cc:	10802014 	ori	r2,r2,128
   134d0:	8080030d 	sth	r2,12(r16)
   134d4:	bf09883a 	add	r4,r23,fp
   134d8:	9f07c83a 	sub	r3,r19,fp
   134dc:	85c00415 	stw	r23,16(r16)
   134e0:	84c00515 	stw	r19,20(r16)
   134e4:	81000015 	stw	r4,0(r16)
   134e8:	902f883a 	mov	r23,r18
   134ec:	80c00215 	stw	r3,8(r16)
   134f0:	9039883a 	mov	fp,r18
   134f4:	9027883a 	mov	r19,r18
   134f8:	900f883a 	mov	r7,r18
   134fc:	003f3806 	br	131e0 <__sfvwrite_r+0x170>
   13500:	b00b883a 	mov	r5,r22
   13504:	980d883a 	mov	r6,r19
   13508:	001385c0 	call	1385c <memmove>
   1350c:	80800017 	ldw	r2,0(r16)
   13510:	a809883a 	mov	r4,r21
   13514:	800b883a 	mov	r5,r16
   13518:	14c5883a 	add	r2,r2,r19
   1351c:	80800015 	stw	r2,0(r16)
   13520:	00107200 	call	10720 <_fflush_r>
   13524:	103f3926 	beq	r2,zero,1320c <__sfvwrite_r+0x19c>
   13528:	003f5006 	br	1326c <__sfvwrite_r+0x1fc>
   1352c:	95800044 	addi	r22,r18,1
   13530:	00c00044 	movi	r3,1
   13534:	003f5706 	br	13294 <__sfvwrite_r+0x224>
   13538:	80c0030b 	ldhu	r3,12(r16)
   1353c:	00bfffc4 	movi	r2,-1
   13540:	18c01014 	ori	r3,r3,64
   13544:	80c0030d 	sth	r3,12(r16)
   13548:	00c00244 	movi	r3,9
   1354c:	a8c00015 	stw	r3,0(r21)
   13550:	003ef906 	br	13138 <__sfvwrite_r+0xc8>

00013554 <_isatty_r>:
   13554:	defffd04 	addi	sp,sp,-12
   13558:	dc400115 	stw	r17,4(sp)
   1355c:	dc000015 	stw	r16,0(sp)
   13560:	2023883a 	mov	r17,r4
   13564:	040000b4 	movhi	r16,2
   13568:	842a0104 	addi	r16,r16,-22524
   1356c:	2809883a 	mov	r4,r5
   13570:	dfc00215 	stw	ra,8(sp)
   13574:	80000015 	stw	zero,0(r16)
   13578:	001434c0 	call	1434c <isatty>
   1357c:	00ffffc4 	movi	r3,-1
   13580:	10c00526 	beq	r2,r3,13598 <_isatty_r+0x44>
   13584:	dfc00217 	ldw	ra,8(sp)
   13588:	dc400117 	ldw	r17,4(sp)
   1358c:	dc000017 	ldw	r16,0(sp)
   13590:	dec00304 	addi	sp,sp,12
   13594:	f800283a 	ret
   13598:	80c00017 	ldw	r3,0(r16)
   1359c:	183ff926 	beq	r3,zero,13584 <_isatty_r+0x30>
   135a0:	88c00015 	stw	r3,0(r17)
   135a4:	dfc00217 	ldw	ra,8(sp)
   135a8:	dc400117 	ldw	r17,4(sp)
   135ac:	dc000017 	ldw	r16,0(sp)
   135b0:	dec00304 	addi	sp,sp,12
   135b4:	f800283a 	ret

000135b8 <_lseek_r>:
   135b8:	defffd04 	addi	sp,sp,-12
   135bc:	dc400115 	stw	r17,4(sp)
   135c0:	dc000015 	stw	r16,0(sp)
   135c4:	2023883a 	mov	r17,r4
   135c8:	040000b4 	movhi	r16,2
   135cc:	842a0104 	addi	r16,r16,-22524
   135d0:	2809883a 	mov	r4,r5
   135d4:	300b883a 	mov	r5,r6
   135d8:	380d883a 	mov	r6,r7
   135dc:	dfc00215 	stw	ra,8(sp)
   135e0:	80000015 	stw	zero,0(r16)
   135e4:	001452c0 	call	1452c <lseek>
   135e8:	00ffffc4 	movi	r3,-1
   135ec:	10c00526 	beq	r2,r3,13604 <_lseek_r+0x4c>
   135f0:	dfc00217 	ldw	ra,8(sp)
   135f4:	dc400117 	ldw	r17,4(sp)
   135f8:	dc000017 	ldw	r16,0(sp)
   135fc:	dec00304 	addi	sp,sp,12
   13600:	f800283a 	ret
   13604:	80c00017 	ldw	r3,0(r16)
   13608:	183ff926 	beq	r3,zero,135f0 <_lseek_r+0x38>
   1360c:	88c00015 	stw	r3,0(r17)
   13610:	dfc00217 	ldw	ra,8(sp)
   13614:	dc400117 	ldw	r17,4(sp)
   13618:	dc000017 	ldw	r16,0(sp)
   1361c:	dec00304 	addi	sp,sp,12
   13620:	f800283a 	ret

00013624 <memchr>:
   13624:	008000c4 	movi	r2,3
   13628:	29403fcc 	andi	r5,r5,255
   1362c:	1180282e 	bgeu	r2,r6,136d0 <memchr+0xac>
   13630:	2086703a 	and	r3,r4,r2
   13634:	1800351e 	bne	r3,zero,1370c <memchr+0xe8>
   13638:	2816923a 	slli	r11,r5,8
   1363c:	2093883a 	add	r9,r4,r2
   13640:	22000084 	addi	r8,r4,2
   13644:	5957883a 	add	r11,r11,r5
   13648:	5816923a 	slli	r11,r11,8
   1364c:	20c00044 	addi	r3,r4,1
   13650:	037fbff4 	movhi	r13,65279
   13654:	6b7fbfc4 	addi	r13,r13,-257
   13658:	5957883a 	add	r11,r11,r5
   1365c:	5816923a 	slli	r11,r11,8
   13660:	03202074 	movhi	r12,32897
   13664:	63202004 	addi	r12,r12,-32640
   13668:	101d883a 	mov	r14,r2
   1366c:	5957883a 	add	r11,r11,r5
   13670:	21c00017 	ldw	r7,0(r4)
   13674:	31bfff04 	addi	r6,r6,-4
   13678:	1805883a 	mov	r2,r3
   1367c:	3acef03a 	xor	r7,r7,r11
   13680:	3b55883a 	add	r10,r7,r13
   13684:	01ce303a 	nor	r7,zero,r7
   13688:	51ce703a 	and	r7,r10,r7
   1368c:	3b0e703a 	and	r7,r7,r12
   13690:	38000a26 	beq	r7,zero,136bc <memchr+0x98>
   13694:	21c00003 	ldbu	r7,0(r4)
   13698:	39401e26 	beq	r7,r5,13714 <memchr+0xf0>
   1369c:	19c00003 	ldbu	r7,0(r3)
   136a0:	39401926 	beq	r7,r5,13708 <memchr+0xe4>
   136a4:	41c00003 	ldbu	r7,0(r8)
   136a8:	4005883a 	mov	r2,r8
   136ac:	39401626 	beq	r7,r5,13708 <memchr+0xe4>
   136b0:	49c00003 	ldbu	r7,0(r9)
   136b4:	4805883a 	mov	r2,r9
   136b8:	39401326 	beq	r7,r5,13708 <memchr+0xe4>
   136bc:	21000104 	addi	r4,r4,4
   136c0:	4a400104 	addi	r9,r9,4
   136c4:	42000104 	addi	r8,r8,4
   136c8:	18c00104 	addi	r3,r3,4
   136cc:	71bfe836 	bltu	r14,r6,13670 <memchr+0x4c>
   136d0:	2005883a 	mov	r2,r4
   136d4:	30000a26 	beq	r6,zero,13700 <memchr+0xdc>
   136d8:	10c00003 	ldbu	r3,0(r2)
   136dc:	19400a26 	beq	r3,r5,13708 <memchr+0xe4>
   136e0:	10c00044 	addi	r3,r2,1
   136e4:	118d883a 	add	r6,r2,r6
   136e8:	00000306 	br	136f8 <memchr+0xd4>
   136ec:	11000003 	ldbu	r4,0(r2)
   136f0:	18c00044 	addi	r3,r3,1
   136f4:	21400426 	beq	r4,r5,13708 <memchr+0xe4>
   136f8:	1805883a 	mov	r2,r3
   136fc:	19bffb1e 	bne	r3,r6,136ec <memchr+0xc8>
   13700:	0005883a 	mov	r2,zero
   13704:	f800283a 	ret
   13708:	f800283a 	ret
   1370c:	2005883a 	mov	r2,r4
   13710:	003ff106 	br	136d8 <memchr+0xb4>
   13714:	2005883a 	mov	r2,r4
   13718:	f800283a 	ret

0001371c <memcpy>:
   1371c:	defffb04 	addi	sp,sp,-20
   13720:	dc000015 	stw	r16,0(sp)
   13724:	dfc00415 	stw	ra,16(sp)
   13728:	dcc00315 	stw	r19,12(sp)
   1372c:	dc800215 	stw	r18,8(sp)
   13730:	dc400115 	stw	r17,4(sp)
   13734:	00c003c4 	movi	r3,15
   13738:	2021883a 	mov	r16,r4
   1373c:	3005883a 	mov	r2,r6
   13740:	1980032e 	bgeu	r3,r6,13750 <memcpy+0x34>
   13744:	2906b03a 	or	r3,r5,r4
   13748:	18c000cc 	andi	r3,r3,3
   1374c:	18001026 	beq	r3,zero,13790 <memcpy+0x74>
   13750:	8007883a 	mov	r3,r16
   13754:	288f883a 	add	r7,r5,r2
   13758:	10000526 	beq	r2,zero,13770 <memcpy+0x54>
   1375c:	29800003 	ldbu	r6,0(r5)
   13760:	18c00044 	addi	r3,r3,1
   13764:	29400044 	addi	r5,r5,1
   13768:	19bfffc5 	stb	r6,-1(r3)
   1376c:	29fffb1e 	bne	r5,r7,1375c <memcpy+0x40>
   13770:	8005883a 	mov	r2,r16
   13774:	dfc00417 	ldw	ra,16(sp)
   13778:	dcc00317 	ldw	r19,12(sp)
   1377c:	dc800217 	ldw	r18,8(sp)
   13780:	dc400117 	ldw	r17,4(sp)
   13784:	dc000017 	ldw	r16,0(sp)
   13788:	dec00504 	addi	sp,sp,20
   1378c:	f800283a 	ret
   13790:	32bffc04 	addi	r10,r6,-16
   13794:	5014d13a 	srli	r10,r10,4
   13798:	20800404 	addi	r2,r4,16
   1379c:	2007883a 	mov	r3,r4
   137a0:	5008913a 	slli	r4,r10,4
   137a4:	280f883a 	mov	r7,r5
   137a8:	1105883a 	add	r2,r2,r4
   137ac:	3a000017 	ldw	r8,0(r7)
   137b0:	18c00404 	addi	r3,r3,16
   137b4:	39c00404 	addi	r7,r7,16
   137b8:	1a3ffc15 	stw	r8,-16(r3)
   137bc:	3a3ffd17 	ldw	r8,-12(r7)
   137c0:	1a3ffd15 	stw	r8,-12(r3)
   137c4:	3a3ffe17 	ldw	r8,-8(r7)
   137c8:	1a3ffe15 	stw	r8,-8(r3)
   137cc:	3a3fff17 	ldw	r8,-4(r7)
   137d0:	1a3fff15 	stw	r8,-4(r3)
   137d4:	18bff51e 	bne	r3,r2,137ac <memcpy+0x90>
   137d8:	52800044 	addi	r10,r10,1
   137dc:	5014913a 	slli	r10,r10,4
   137e0:	308003cc 	andi	r2,r6,15
   137e4:	010000c4 	movi	r4,3
   137e8:	8287883a 	add	r3,r16,r10
   137ec:	2a95883a 	add	r10,r5,r10
   137f0:	2080182e 	bgeu	r4,r2,13854 <memcpy+0x138>
   137f4:	147fff04 	addi	r17,r2,-4
   137f8:	8808d0ba 	srli	r4,r17,2
   137fc:	1a400104 	addi	r9,r3,4
   13800:	180d883a 	mov	r6,r3
   13804:	2105883a 	add	r2,r4,r4
   13808:	1085883a 	add	r2,r2,r2
   1380c:	4893883a 	add	r9,r9,r2
   13810:	500f883a 	mov	r7,r10
   13814:	3a000017 	ldw	r8,0(r7)
   13818:	31800104 	addi	r6,r6,4
   1381c:	39c00104 	addi	r7,r7,4
   13820:	323fff15 	stw	r8,-4(r6)
   13824:	327ffb1e 	bne	r6,r9,13814 <memcpy+0xf8>
   13828:	20800044 	addi	r2,r4,1
   1382c:	1085883a 	add	r2,r2,r2
   13830:	1085883a 	add	r2,r2,r2
   13834:	017fff04 	movi	r5,-4
   13838:	18a5883a 	add	r18,r3,r2
   1383c:	50a7883a 	add	r19,r10,r2
   13840:	00140500 	call	14050 <__mulsi3>
   13844:	1445883a 	add	r2,r2,r17
   13848:	980b883a 	mov	r5,r19
   1384c:	9007883a 	mov	r3,r18
   13850:	003fc006 	br	13754 <memcpy+0x38>
   13854:	500b883a 	mov	r5,r10
   13858:	003fbe06 	br	13754 <memcpy+0x38>

0001385c <memmove>:
   1385c:	defffb04 	addi	sp,sp,-20
   13860:	dc000015 	stw	r16,0(sp)
   13864:	dfc00415 	stw	ra,16(sp)
   13868:	dcc00315 	stw	r19,12(sp)
   1386c:	dc800215 	stw	r18,8(sp)
   13870:	dc400115 	stw	r17,4(sp)
   13874:	2021883a 	mov	r16,r4
   13878:	300f883a 	mov	r7,r6
   1387c:	2900122e 	bgeu	r5,r4,138c8 <memmove+0x6c>
   13880:	2987883a 	add	r3,r5,r6
   13884:	20c0102e 	bgeu	r4,r3,138c8 <memmove+0x6c>
   13888:	218b883a 	add	r5,r4,r6
   1388c:	1989c83a 	sub	r4,r3,r6
   13890:	30000526 	beq	r6,zero,138a8 <memmove+0x4c>
   13894:	18ffffc4 	addi	r3,r3,-1
   13898:	18800003 	ldbu	r2,0(r3)
   1389c:	297fffc4 	addi	r5,r5,-1
   138a0:	28800005 	stb	r2,0(r5)
   138a4:	193ffb1e 	bne	r3,r4,13894 <memmove+0x38>
   138a8:	8005883a 	mov	r2,r16
   138ac:	dfc00417 	ldw	ra,16(sp)
   138b0:	dcc00317 	ldw	r19,12(sp)
   138b4:	dc800217 	ldw	r18,8(sp)
   138b8:	dc400117 	ldw	r17,4(sp)
   138bc:	dc000017 	ldw	r16,0(sp)
   138c0:	dec00504 	addi	sp,sp,20
   138c4:	f800283a 	ret
   138c8:	008003c4 	movi	r2,15
   138cc:	1180422e 	bgeu	r2,r6,139d8 <memmove+0x17c>
   138d0:	2c04b03a 	or	r2,r5,r16
   138d4:	108000cc 	andi	r2,r2,3
   138d8:	10003f1e 	bne	r2,zero,139d8 <memmove+0x17c>
   138dc:	32bffc04 	addi	r10,r6,-16
   138e0:	5014d13a 	srli	r10,r10,4
   138e4:	81000404 	addi	r4,r16,16
   138e8:	8007883a 	mov	r3,r16
   138ec:	5004913a 	slli	r2,r10,4
   138f0:	280f883a 	mov	r7,r5
   138f4:	2089883a 	add	r4,r4,r2
   138f8:	38800017 	ldw	r2,0(r7)
   138fc:	18c00404 	addi	r3,r3,16
   13900:	39c00404 	addi	r7,r7,16
   13904:	18bffc15 	stw	r2,-16(r3)
   13908:	38bffd17 	ldw	r2,-12(r7)
   1390c:	18bffd15 	stw	r2,-12(r3)
   13910:	38bffe17 	ldw	r2,-8(r7)
   13914:	18bffe15 	stw	r2,-8(r3)
   13918:	38bfff17 	ldw	r2,-4(r7)
   1391c:	18bfff15 	stw	r2,-4(r3)
   13920:	193ff51e 	bne	r3,r4,138f8 <memmove+0x9c>
   13924:	52800044 	addi	r10,r10,1
   13928:	5014913a 	slli	r10,r10,4
   1392c:	31c003cc 	andi	r7,r6,15
   13930:	008000c4 	movi	r2,3
   13934:	8287883a 	add	r3,r16,r10
   13938:	2a95883a 	add	r10,r5,r10
   1393c:	11c0282e 	bgeu	r2,r7,139e0 <memmove+0x184>
   13940:	3c7fff04 	addi	r17,r7,-4
   13944:	8808d0ba 	srli	r4,r17,2
   13948:	1a400104 	addi	r9,r3,4
   1394c:	180d883a 	mov	r6,r3
   13950:	2105883a 	add	r2,r4,r4
   13954:	1085883a 	add	r2,r2,r2
   13958:	4893883a 	add	r9,r9,r2
   1395c:	5005883a 	mov	r2,r10
   13960:	12000017 	ldw	r8,0(r2)
   13964:	31800104 	addi	r6,r6,4
   13968:	10800104 	addi	r2,r2,4
   1396c:	323fff15 	stw	r8,-4(r6)
   13970:	327ffb1e 	bne	r6,r9,13960 <memmove+0x104>
   13974:	20800044 	addi	r2,r4,1
   13978:	1085883a 	add	r2,r2,r2
   1397c:	1085883a 	add	r2,r2,r2
   13980:	017fff04 	movi	r5,-4
   13984:	18a5883a 	add	r18,r3,r2
   13988:	50a7883a 	add	r19,r10,r2
   1398c:	00140500 	call	14050 <__mulsi3>
   13990:	144f883a 	add	r7,r2,r17
   13994:	980b883a 	mov	r5,r19
   13998:	9007883a 	mov	r3,r18
   1399c:	383fc226 	beq	r7,zero,138a8 <memmove+0x4c>
   139a0:	19cf883a 	add	r7,r3,r7
   139a4:	29800003 	ldbu	r6,0(r5)
   139a8:	18c00044 	addi	r3,r3,1
   139ac:	29400044 	addi	r5,r5,1
   139b0:	19bfffc5 	stb	r6,-1(r3)
   139b4:	19fffb1e 	bne	r3,r7,139a4 <memmove+0x148>
   139b8:	8005883a 	mov	r2,r16
   139bc:	dfc00417 	ldw	ra,16(sp)
   139c0:	dcc00317 	ldw	r19,12(sp)
   139c4:	dc800217 	ldw	r18,8(sp)
   139c8:	dc400117 	ldw	r17,4(sp)
   139cc:	dc000017 	ldw	r16,0(sp)
   139d0:	dec00504 	addi	sp,sp,20
   139d4:	f800283a 	ret
   139d8:	8007883a 	mov	r3,r16
   139dc:	003fef06 	br	1399c <memmove+0x140>
   139e0:	500b883a 	mov	r5,r10
   139e4:	003fed06 	br	1399c <memmove+0x140>

000139e8 <_read_r>:
   139e8:	defffd04 	addi	sp,sp,-12
   139ec:	dc400115 	stw	r17,4(sp)
   139f0:	dc000015 	stw	r16,0(sp)
   139f4:	2023883a 	mov	r17,r4
   139f8:	040000b4 	movhi	r16,2
   139fc:	842a0104 	addi	r16,r16,-22524
   13a00:	2809883a 	mov	r4,r5
   13a04:	300b883a 	mov	r5,r6
   13a08:	380d883a 	mov	r6,r7
   13a0c:	dfc00215 	stw	ra,8(sp)
   13a10:	80000015 	stw	zero,0(r16)
   13a14:	00149a00 	call	149a0 <read>
   13a18:	00ffffc4 	movi	r3,-1
   13a1c:	10c00526 	beq	r2,r3,13a34 <_read_r+0x4c>
   13a20:	dfc00217 	ldw	ra,8(sp)
   13a24:	dc400117 	ldw	r17,4(sp)
   13a28:	dc000017 	ldw	r16,0(sp)
   13a2c:	dec00304 	addi	sp,sp,12
   13a30:	f800283a 	ret
   13a34:	80c00017 	ldw	r3,0(r16)
   13a38:	183ff926 	beq	r3,zero,13a20 <_read_r+0x38>
   13a3c:	88c00015 	stw	r3,0(r17)
   13a40:	dfc00217 	ldw	ra,8(sp)
   13a44:	dc400117 	ldw	r17,4(sp)
   13a48:	dc000017 	ldw	r16,0(sp)
   13a4c:	dec00304 	addi	sp,sp,12
   13a50:	f800283a 	ret

00013a54 <_realloc_r>:
   13a54:	defff504 	addi	sp,sp,-44
   13a58:	dd400615 	stw	r21,24(sp)
   13a5c:	dc800315 	stw	r18,12(sp)
   13a60:	dc000115 	stw	r16,4(sp)
   13a64:	dfc00a15 	stw	ra,40(sp)
   13a68:	df000915 	stw	fp,36(sp)
   13a6c:	ddc00815 	stw	r23,32(sp)
   13a70:	dd800715 	stw	r22,28(sp)
   13a74:	dd000515 	stw	r20,20(sp)
   13a78:	dcc00415 	stw	r19,16(sp)
   13a7c:	dc400215 	stw	r17,8(sp)
   13a80:	2821883a 	mov	r16,r5
   13a84:	202b883a 	mov	r21,r4
   13a88:	3025883a 	mov	r18,r6
   13a8c:	28009626 	beq	r5,zero,13ce8 <_realloc_r+0x294>
   13a90:	00146780 	call	14678 <__malloc_lock>
   13a94:	80bfff17 	ldw	r2,-4(r16)
   13a98:	04ffff04 	movi	r19,-4
   13a9c:	90c002c4 	addi	r3,r18,11
   13aa0:	01000584 	movi	r4,22
   13aa4:	85bffe04 	addi	r22,r16,-8
   13aa8:	14e6703a 	and	r19,r2,r19
   13aac:	20c0372e 	bgeu	r4,r3,13b8c <_realloc_r+0x138>
   13ab0:	047ffe04 	movi	r17,-8
   13ab4:	1c62703a 	and	r17,r3,r17
   13ab8:	8807883a 	mov	r3,r17
   13abc:	88005a16 	blt	r17,zero,13c28 <_realloc_r+0x1d4>
   13ac0:	8c805936 	bltu	r17,r18,13c28 <_realloc_r+0x1d4>
   13ac4:	98c0340e 	bge	r19,r3,13b98 <_realloc_r+0x144>
   13ac8:	07000074 	movhi	fp,1
   13acc:	e71da504 	addi	fp,fp,30356
   13ad0:	e1400217 	ldw	r5,8(fp)
   13ad4:	b4c9883a 	add	r4,r22,r19
   13ad8:	29009026 	beq	r5,r4,13d1c <_realloc_r+0x2c8>
   13adc:	21800117 	ldw	r6,4(r4)
   13ae0:	01ffff84 	movi	r7,-2
   13ae4:	31ce703a 	and	r7,r6,r7
   13ae8:	21cf883a 	add	r7,r4,r7
   13aec:	39c00117 	ldw	r7,4(r7)
   13af0:	39c0004c 	andi	r7,r7,1
   13af4:	38004326 	beq	r7,zero,13c04 <_realloc_r+0x1b0>
   13af8:	000d883a 	mov	r6,zero
   13afc:	0009883a 	mov	r4,zero
   13b00:	1080004c 	andi	r2,r2,1
   13b04:	10005a1e 	bne	r2,zero,13c70 <_realloc_r+0x21c>
   13b08:	85fffe17 	ldw	r23,-8(r16)
   13b0c:	00bfff04 	movi	r2,-4
   13b10:	b5efc83a 	sub	r23,r22,r23
   13b14:	b9c00117 	ldw	r7,4(r23)
   13b18:	388e703a 	and	r7,r7,r2
   13b1c:	3ccf883a 	add	r7,r7,r19
   13b20:	20005226 	beq	r4,zero,13c6c <_realloc_r+0x218>
   13b24:	31e9883a 	add	r20,r6,r7
   13b28:	2140c726 	beq	r4,r5,13e48 <_realloc_r+0x3f4>
   13b2c:	a0c04f16 	blt	r20,r3,13c6c <_realloc_r+0x218>
   13b30:	20800317 	ldw	r2,12(r4)
   13b34:	20c00217 	ldw	r3,8(r4)
   13b38:	99bfff04 	addi	r6,r19,-4
   13b3c:	01000904 	movi	r4,36
   13b40:	18800315 	stw	r2,12(r3)
   13b44:	10c00215 	stw	r3,8(r2)
   13b48:	b8c00217 	ldw	r3,8(r23)
   13b4c:	b8800317 	ldw	r2,12(r23)
   13b50:	bc800204 	addi	r18,r23,8
   13b54:	18800315 	stw	r2,12(r3)
   13b58:	10c00215 	stw	r3,8(r2)
   13b5c:	2180ed36 	bltu	r4,r6,13f14 <_realloc_r+0x4c0>
   13b60:	008004c4 	movi	r2,19
   13b64:	11809b2e 	bgeu	r2,r6,13dd4 <_realloc_r+0x380>
   13b68:	80800017 	ldw	r2,0(r16)
   13b6c:	b8800215 	stw	r2,8(r23)
   13b70:	80800117 	ldw	r2,4(r16)
   13b74:	b8800315 	stw	r2,12(r23)
   13b78:	008006c4 	movi	r2,27
   13b7c:	1180f936 	bltu	r2,r6,13f64 <_realloc_r+0x510>
   13b80:	b8800404 	addi	r2,r23,16
   13b84:	80c00204 	addi	r3,r16,8
   13b88:	00009406 	br	13ddc <_realloc_r+0x388>
   13b8c:	00c00404 	movi	r3,16
   13b90:	1823883a 	mov	r17,r3
   13b94:	003fca06 	br	13ac0 <_realloc_r+0x6c>
   13b98:	9829883a 	mov	r20,r19
   13b9c:	a447c83a 	sub	r3,r20,r17
   13ba0:	010003c4 	movi	r4,15
   13ba4:	1080004c 	andi	r2,r2,1
   13ba8:	20c02336 	bltu	r4,r3,13c38 <_realloc_r+0x1e4>
   13bac:	1504b03a 	or	r2,r2,r20
   13bb0:	b0800115 	stw	r2,4(r22)
   13bb4:	b52d883a 	add	r22,r22,r20
   13bb8:	b0800117 	ldw	r2,4(r22)
   13bbc:	10800054 	ori	r2,r2,1
   13bc0:	b0800115 	stw	r2,4(r22)
   13bc4:	a809883a 	mov	r4,r21
   13bc8:	00146980 	call	14698 <__malloc_unlock>
   13bcc:	8025883a 	mov	r18,r16
   13bd0:	9005883a 	mov	r2,r18
   13bd4:	dfc00a17 	ldw	ra,40(sp)
   13bd8:	df000917 	ldw	fp,36(sp)
   13bdc:	ddc00817 	ldw	r23,32(sp)
   13be0:	dd800717 	ldw	r22,28(sp)
   13be4:	dd400617 	ldw	r21,24(sp)
   13be8:	dd000517 	ldw	r20,20(sp)
   13bec:	dcc00417 	ldw	r19,16(sp)
   13bf0:	dc800317 	ldw	r18,12(sp)
   13bf4:	dc400217 	ldw	r17,8(sp)
   13bf8:	dc000117 	ldw	r16,4(sp)
   13bfc:	dec00b04 	addi	sp,sp,44
   13c00:	f800283a 	ret
   13c04:	01ffff04 	movi	r7,-4
   13c08:	31cc703a 	and	r6,r6,r7
   13c0c:	34e9883a 	add	r20,r6,r19
   13c10:	a0ffbb16 	blt	r20,r3,13b00 <_realloc_r+0xac>
   13c14:	20c00317 	ldw	r3,12(r4)
   13c18:	21000217 	ldw	r4,8(r4)
   13c1c:	20c00315 	stw	r3,12(r4)
   13c20:	19000215 	stw	r4,8(r3)
   13c24:	003fdd06 	br	13b9c <_realloc_r+0x148>
   13c28:	00800304 	movi	r2,12
   13c2c:	a8800015 	stw	r2,0(r21)
   13c30:	0025883a 	mov	r18,zero
   13c34:	003fe606 	br	13bd0 <_realloc_r+0x17c>
   13c38:	1444b03a 	or	r2,r2,r17
   13c3c:	b0800115 	stw	r2,4(r22)
   13c40:	b44b883a 	add	r5,r22,r17
   13c44:	18800054 	ori	r2,r3,1
   13c48:	28800115 	stw	r2,4(r5)
   13c4c:	28c7883a 	add	r3,r5,r3
   13c50:	18800117 	ldw	r2,4(r3)
   13c54:	a809883a 	mov	r4,r21
   13c58:	29400204 	addi	r5,r5,8
   13c5c:	10800054 	ori	r2,r2,1
   13c60:	18800115 	stw	r2,4(r3)
   13c64:	0010f500 	call	10f50 <_free_r>
   13c68:	003fd606 	br	13bc4 <_realloc_r+0x170>
   13c6c:	38c0330e 	bge	r7,r3,13d3c <_realloc_r+0x2e8>
   13c70:	900b883a 	mov	r5,r18
   13c74:	a809883a 	mov	r4,r21
   13c78:	0011a280 	call	11a28 <_malloc_r>
   13c7c:	1025883a 	mov	r18,r2
   13c80:	10001626 	beq	r2,zero,13cdc <_realloc_r+0x288>
   13c84:	80bfff17 	ldw	r2,-4(r16)
   13c88:	00ffff84 	movi	r3,-2
   13c8c:	913ffe04 	addi	r4,r18,-8
   13c90:	10c6703a 	and	r3,r2,r3
   13c94:	b0c7883a 	add	r3,r22,r3
   13c98:	20c09926 	beq	r4,r3,13f00 <_realloc_r+0x4ac>
   13c9c:	99bfff04 	addi	r6,r19,-4
   13ca0:	00800904 	movi	r2,36
   13ca4:	11806436 	bltu	r2,r6,13e38 <_realloc_r+0x3e4>
   13ca8:	00c004c4 	movi	r3,19
   13cac:	19804036 	bltu	r3,r6,13db0 <_realloc_r+0x35c>
   13cb0:	9005883a 	mov	r2,r18
   13cb4:	8007883a 	mov	r3,r16
   13cb8:	19000017 	ldw	r4,0(r3)
   13cbc:	11000015 	stw	r4,0(r2)
   13cc0:	19000117 	ldw	r4,4(r3)
   13cc4:	11000115 	stw	r4,4(r2)
   13cc8:	18c00217 	ldw	r3,8(r3)
   13ccc:	10c00215 	stw	r3,8(r2)
   13cd0:	a809883a 	mov	r4,r21
   13cd4:	800b883a 	mov	r5,r16
   13cd8:	0010f500 	call	10f50 <_free_r>
   13cdc:	a809883a 	mov	r4,r21
   13ce0:	00146980 	call	14698 <__malloc_unlock>
   13ce4:	003fba06 	br	13bd0 <_realloc_r+0x17c>
   13ce8:	300b883a 	mov	r5,r6
   13cec:	dfc00a17 	ldw	ra,40(sp)
   13cf0:	df000917 	ldw	fp,36(sp)
   13cf4:	ddc00817 	ldw	r23,32(sp)
   13cf8:	dd800717 	ldw	r22,28(sp)
   13cfc:	dd400617 	ldw	r21,24(sp)
   13d00:	dd000517 	ldw	r20,20(sp)
   13d04:	dcc00417 	ldw	r19,16(sp)
   13d08:	dc800317 	ldw	r18,12(sp)
   13d0c:	dc400217 	ldw	r17,8(sp)
   13d10:	dc000117 	ldw	r16,4(sp)
   13d14:	dec00b04 	addi	sp,sp,44
   13d18:	0011a281 	jmpi	11a28 <_malloc_r>
   13d1c:	29800117 	ldw	r6,4(r5)
   13d20:	013fff04 	movi	r4,-4
   13d24:	89c00404 	addi	r7,r17,16
   13d28:	310c703a 	and	r6,r6,r4
   13d2c:	34c9883a 	add	r4,r6,r19
   13d30:	21c0340e 	bge	r4,r7,13e04 <_realloc_r+0x3b0>
   13d34:	2809883a 	mov	r4,r5
   13d38:	003f7106 	br	13b00 <_realloc_r+0xac>
   13d3c:	b8800317 	ldw	r2,12(r23)
   13d40:	b8c00217 	ldw	r3,8(r23)
   13d44:	99bfff04 	addi	r6,r19,-4
   13d48:	01000904 	movi	r4,36
   13d4c:	18800315 	stw	r2,12(r3)
   13d50:	10c00215 	stw	r3,8(r2)
   13d54:	bc800204 	addi	r18,r23,8
   13d58:	21807836 	bltu	r4,r6,13f3c <_realloc_r+0x4e8>
   13d5c:	008004c4 	movi	r2,19
   13d60:	1180732e 	bgeu	r2,r6,13f30 <_realloc_r+0x4dc>
   13d64:	80800017 	ldw	r2,0(r16)
   13d68:	b8800215 	stw	r2,8(r23)
   13d6c:	80800117 	ldw	r2,4(r16)
   13d70:	b8800315 	stw	r2,12(r23)
   13d74:	008006c4 	movi	r2,27
   13d78:	11808936 	bltu	r2,r6,13fa0 <_realloc_r+0x54c>
   13d7c:	b8800404 	addi	r2,r23,16
   13d80:	80c00204 	addi	r3,r16,8
   13d84:	19000017 	ldw	r4,0(r3)
   13d88:	9021883a 	mov	r16,r18
   13d8c:	3829883a 	mov	r20,r7
   13d90:	11000015 	stw	r4,0(r2)
   13d94:	19000117 	ldw	r4,4(r3)
   13d98:	b82d883a 	mov	r22,r23
   13d9c:	11000115 	stw	r4,4(r2)
   13da0:	18c00217 	ldw	r3,8(r3)
   13da4:	10c00215 	stw	r3,8(r2)
   13da8:	b8800117 	ldw	r2,4(r23)
   13dac:	003f7b06 	br	13b9c <_realloc_r+0x148>
   13db0:	80c00017 	ldw	r3,0(r16)
   13db4:	90c00015 	stw	r3,0(r18)
   13db8:	80c00117 	ldw	r3,4(r16)
   13dbc:	90c00115 	stw	r3,4(r18)
   13dc0:	00c006c4 	movi	r3,27
   13dc4:	19804636 	bltu	r3,r6,13ee0 <_realloc_r+0x48c>
   13dc8:	90800204 	addi	r2,r18,8
   13dcc:	80c00204 	addi	r3,r16,8
   13dd0:	003fb906 	br	13cb8 <_realloc_r+0x264>
   13dd4:	9005883a 	mov	r2,r18
   13dd8:	8007883a 	mov	r3,r16
   13ddc:	19000017 	ldw	r4,0(r3)
   13de0:	9021883a 	mov	r16,r18
   13de4:	b82d883a 	mov	r22,r23
   13de8:	11000015 	stw	r4,0(r2)
   13dec:	19000117 	ldw	r4,4(r3)
   13df0:	11000115 	stw	r4,4(r2)
   13df4:	18c00217 	ldw	r3,8(r3)
   13df8:	10c00215 	stw	r3,8(r2)
   13dfc:	b8800117 	ldw	r2,4(r23)
   13e00:	003f6606 	br	13b9c <_realloc_r+0x148>
   13e04:	2445c83a 	sub	r2,r4,r17
   13e08:	b46d883a 	add	r22,r22,r17
   13e0c:	10800054 	ori	r2,r2,1
   13e10:	b0800115 	stw	r2,4(r22)
   13e14:	80bfff17 	ldw	r2,-4(r16)
   13e18:	a809883a 	mov	r4,r21
   13e1c:	e5800215 	stw	r22,8(fp)
   13e20:	1080004c 	andi	r2,r2,1
   13e24:	88a2b03a 	or	r17,r17,r2
   13e28:	847fff15 	stw	r17,-4(r16)
   13e2c:	00146980 	call	14698 <__malloc_unlock>
   13e30:	8025883a 	mov	r18,r16
   13e34:	003f6606 	br	13bd0 <_realloc_r+0x17c>
   13e38:	9009883a 	mov	r4,r18
   13e3c:	800b883a 	mov	r5,r16
   13e40:	001385c0 	call	1385c <memmove>
   13e44:	003fa206 	br	13cd0 <_realloc_r+0x27c>
   13e48:	88800404 	addi	r2,r17,16
   13e4c:	a0bf8716 	blt	r20,r2,13c6c <_realloc_r+0x218>
   13e50:	b8800317 	ldw	r2,12(r23)
   13e54:	b8c00217 	ldw	r3,8(r23)
   13e58:	99bfff04 	addi	r6,r19,-4
   13e5c:	01000904 	movi	r4,36
   13e60:	18800315 	stw	r2,12(r3)
   13e64:	10c00215 	stw	r3,8(r2)
   13e68:	bc800204 	addi	r18,r23,8
   13e6c:	21806536 	bltu	r4,r6,14004 <_realloc_r+0x5b0>
   13e70:	008004c4 	movi	r2,19
   13e74:	1180592e 	bgeu	r2,r6,13fdc <_realloc_r+0x588>
   13e78:	80800017 	ldw	r2,0(r16)
   13e7c:	b8800215 	stw	r2,8(r23)
   13e80:	80800117 	ldw	r2,4(r16)
   13e84:	b8800315 	stw	r2,12(r23)
   13e88:	008006c4 	movi	r2,27
   13e8c:	11806136 	bltu	r2,r6,14014 <_realloc_r+0x5c0>
   13e90:	b8800404 	addi	r2,r23,16
   13e94:	80c00204 	addi	r3,r16,8
   13e98:	19000017 	ldw	r4,0(r3)
   13e9c:	11000015 	stw	r4,0(r2)
   13ea0:	19000117 	ldw	r4,4(r3)
   13ea4:	11000115 	stw	r4,4(r2)
   13ea8:	18c00217 	ldw	r3,8(r3)
   13eac:	10c00215 	stw	r3,8(r2)
   13eb0:	a447c83a 	sub	r3,r20,r17
   13eb4:	bc45883a 	add	r2,r23,r17
   13eb8:	18c00054 	ori	r3,r3,1
   13ebc:	10c00115 	stw	r3,4(r2)
   13ec0:	b8c00117 	ldw	r3,4(r23)
   13ec4:	e0800215 	stw	r2,8(fp)
   13ec8:	a809883a 	mov	r4,r21
   13ecc:	1880004c 	andi	r2,r3,1
   13ed0:	88a2b03a 	or	r17,r17,r2
   13ed4:	bc400115 	stw	r17,4(r23)
   13ed8:	00146980 	call	14698 <__malloc_unlock>
   13edc:	003f3c06 	br	13bd0 <_realloc_r+0x17c>
   13ee0:	80c00217 	ldw	r3,8(r16)
   13ee4:	90c00215 	stw	r3,8(r18)
   13ee8:	80c00317 	ldw	r3,12(r16)
   13eec:	90c00315 	stw	r3,12(r18)
   13ef0:	30802426 	beq	r6,r2,13f84 <_realloc_r+0x530>
   13ef4:	90800404 	addi	r2,r18,16
   13ef8:	80c00404 	addi	r3,r16,16
   13efc:	003f6e06 	br	13cb8 <_realloc_r+0x264>
   13f00:	953fff17 	ldw	r20,-4(r18)
   13f04:	00ffff04 	movi	r3,-4
   13f08:	a0e8703a 	and	r20,r20,r3
   13f0c:	a4e9883a 	add	r20,r20,r19
   13f10:	003f2206 	br	13b9c <_realloc_r+0x148>
   13f14:	800b883a 	mov	r5,r16
   13f18:	9009883a 	mov	r4,r18
   13f1c:	001385c0 	call	1385c <memmove>
   13f20:	9021883a 	mov	r16,r18
   13f24:	b8800117 	ldw	r2,4(r23)
   13f28:	b82d883a 	mov	r22,r23
   13f2c:	003f1b06 	br	13b9c <_realloc_r+0x148>
   13f30:	9005883a 	mov	r2,r18
   13f34:	8007883a 	mov	r3,r16
   13f38:	003f9206 	br	13d84 <_realloc_r+0x330>
   13f3c:	800b883a 	mov	r5,r16
   13f40:	9009883a 	mov	r4,r18
   13f44:	d9c00015 	stw	r7,0(sp)
   13f48:	001385c0 	call	1385c <memmove>
   13f4c:	d9c00017 	ldw	r7,0(sp)
   13f50:	9021883a 	mov	r16,r18
   13f54:	b8800117 	ldw	r2,4(r23)
   13f58:	3829883a 	mov	r20,r7
   13f5c:	b82d883a 	mov	r22,r23
   13f60:	003f0e06 	br	13b9c <_realloc_r+0x148>
   13f64:	80800217 	ldw	r2,8(r16)
   13f68:	b8800415 	stw	r2,16(r23)
   13f6c:	80800317 	ldw	r2,12(r16)
   13f70:	b8800515 	stw	r2,20(r23)
   13f74:	31001226 	beq	r6,r4,13fc0 <_realloc_r+0x56c>
   13f78:	b8800604 	addi	r2,r23,24
   13f7c:	80c00404 	addi	r3,r16,16
   13f80:	003f9606 	br	13ddc <_realloc_r+0x388>
   13f84:	81000417 	ldw	r4,16(r16)
   13f88:	90800604 	addi	r2,r18,24
   13f8c:	80c00604 	addi	r3,r16,24
   13f90:	91000415 	stw	r4,16(r18)
   13f94:	81000517 	ldw	r4,20(r16)
   13f98:	91000515 	stw	r4,20(r18)
   13f9c:	003f4606 	br	13cb8 <_realloc_r+0x264>
   13fa0:	80800217 	ldw	r2,8(r16)
   13fa4:	b8800415 	stw	r2,16(r23)
   13fa8:	80800317 	ldw	r2,12(r16)
   13fac:	b8800515 	stw	r2,20(r23)
   13fb0:	31000d26 	beq	r6,r4,13fe8 <_realloc_r+0x594>
   13fb4:	b8800604 	addi	r2,r23,24
   13fb8:	80c00404 	addi	r3,r16,16
   13fbc:	003f7106 	br	13d84 <_realloc_r+0x330>
   13fc0:	81000417 	ldw	r4,16(r16)
   13fc4:	b8800804 	addi	r2,r23,32
   13fc8:	80c00604 	addi	r3,r16,24
   13fcc:	b9000615 	stw	r4,24(r23)
   13fd0:	81000517 	ldw	r4,20(r16)
   13fd4:	b9000715 	stw	r4,28(r23)
   13fd8:	003f8006 	br	13ddc <_realloc_r+0x388>
   13fdc:	9005883a 	mov	r2,r18
   13fe0:	8007883a 	mov	r3,r16
   13fe4:	003fac06 	br	13e98 <_realloc_r+0x444>
   13fe8:	81000417 	ldw	r4,16(r16)
   13fec:	b8800804 	addi	r2,r23,32
   13ff0:	80c00604 	addi	r3,r16,24
   13ff4:	b9000615 	stw	r4,24(r23)
   13ff8:	81000517 	ldw	r4,20(r16)
   13ffc:	b9000715 	stw	r4,28(r23)
   14000:	003f6006 	br	13d84 <_realloc_r+0x330>
   14004:	9009883a 	mov	r4,r18
   14008:	800b883a 	mov	r5,r16
   1400c:	001385c0 	call	1385c <memmove>
   14010:	003fa706 	br	13eb0 <_realloc_r+0x45c>
   14014:	80800217 	ldw	r2,8(r16)
   14018:	b8800415 	stw	r2,16(r23)
   1401c:	80800317 	ldw	r2,12(r16)
   14020:	b8800515 	stw	r2,20(r23)
   14024:	31000326 	beq	r6,r4,14034 <_realloc_r+0x5e0>
   14028:	b8800604 	addi	r2,r23,24
   1402c:	80c00404 	addi	r3,r16,16
   14030:	003f9906 	br	13e98 <_realloc_r+0x444>
   14034:	81000417 	ldw	r4,16(r16)
   14038:	b8800804 	addi	r2,r23,32
   1403c:	80c00604 	addi	r3,r16,24
   14040:	b9000615 	stw	r4,24(r23)
   14044:	81000517 	ldw	r4,20(r16)
   14048:	b9000715 	stw	r4,28(r23)
   1404c:	003f9206 	br	13e98 <_realloc_r+0x444>

00014050 <__mulsi3>:
   14050:	0005883a 	mov	r2,zero
   14054:	20000726 	beq	r4,zero,14074 <__mulsi3+0x24>
   14058:	20c0004c 	andi	r3,r4,1
   1405c:	2008d07a 	srli	r4,r4,1
   14060:	18000126 	beq	r3,zero,14068 <__mulsi3+0x18>
   14064:	1145883a 	add	r2,r2,r5
   14068:	294b883a 	add	r5,r5,r5
   1406c:	203ffa1e 	bne	r4,zero,14058 <__mulsi3+0x8>
   14070:	f800283a 	ret
   14074:	f800283a 	ret

00014078 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14078:	defffe04 	addi	sp,sp,-8
   1407c:	dfc00115 	stw	ra,4(sp)
   14080:	df000015 	stw	fp,0(sp)
   14084:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14088:	008000b4 	movhi	r2,2
   1408c:	10a33c04 	addi	r2,r2,-29456
   14090:	10800017 	ldw	r2,0(r2)
   14094:	10000526 	beq	r2,zero,140ac <alt_get_errno+0x34>
   14098:	008000b4 	movhi	r2,2
   1409c:	10a33c04 	addi	r2,r2,-29456
   140a0:	10800017 	ldw	r2,0(r2)
   140a4:	103ee83a 	callr	r2
   140a8:	00000206 	br	140b4 <alt_get_errno+0x3c>
   140ac:	008000b4 	movhi	r2,2
   140b0:	10aa0104 	addi	r2,r2,-22524
}
   140b4:	e037883a 	mov	sp,fp
   140b8:	dfc00117 	ldw	ra,4(sp)
   140bc:	df000017 	ldw	fp,0(sp)
   140c0:	dec00204 	addi	sp,sp,8
   140c4:	f800283a 	ret

000140c8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   140c8:	defffb04 	addi	sp,sp,-20
   140cc:	dfc00415 	stw	ra,16(sp)
   140d0:	df000315 	stw	fp,12(sp)
   140d4:	df000304 	addi	fp,sp,12
   140d8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   140dc:	e0bfff17 	ldw	r2,-4(fp)
   140e0:	10000716 	blt	r2,zero,14100 <close+0x38>
   140e4:	e13fff17 	ldw	r4,-4(fp)
   140e8:	01400304 	movi	r5,12
   140ec:	00140500 	call	14050 <__mulsi3>
   140f0:	00c00074 	movhi	r3,1
   140f4:	18deb104 	addi	r3,r3,31428
   140f8:	10c5883a 	add	r2,r2,r3
   140fc:	00000106 	br	14104 <close+0x3c>
   14100:	0005883a 	mov	r2,zero
   14104:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   14108:	e0bffd17 	ldw	r2,-12(fp)
   1410c:	10001826 	beq	r2,zero,14170 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   14110:	e0bffd17 	ldw	r2,-12(fp)
   14114:	10800017 	ldw	r2,0(r2)
   14118:	10800417 	ldw	r2,16(r2)
   1411c:	10000626 	beq	r2,zero,14138 <close+0x70>
   14120:	e0bffd17 	ldw	r2,-12(fp)
   14124:	10800017 	ldw	r2,0(r2)
   14128:	10800417 	ldw	r2,16(r2)
   1412c:	e13ffd17 	ldw	r4,-12(fp)
   14130:	103ee83a 	callr	r2
   14134:	00000106 	br	1413c <close+0x74>
   14138:	0005883a 	mov	r2,zero
   1413c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   14140:	e13fff17 	ldw	r4,-4(fp)
   14144:	0014a940 	call	14a94 <alt_release_fd>
    if (rval < 0)
   14148:	e0bffe17 	ldw	r2,-8(fp)
   1414c:	1000060e 	bge	r2,zero,14168 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   14150:	00140780 	call	14078 <alt_get_errno>
   14154:	e0fffe17 	ldw	r3,-8(fp)
   14158:	00c7c83a 	sub	r3,zero,r3
   1415c:	10c00015 	stw	r3,0(r2)
      return -1;
   14160:	00bfffc4 	movi	r2,-1
   14164:	00000606 	br	14180 <close+0xb8>
    }
    return 0;
   14168:	0005883a 	mov	r2,zero
   1416c:	00000406 	br	14180 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   14170:	00140780 	call	14078 <alt_get_errno>
   14174:	00c01444 	movi	r3,81
   14178:	10c00015 	stw	r3,0(r2)
    return -1;
   1417c:	00bfffc4 	movi	r2,-1
  }
}
   14180:	e037883a 	mov	sp,fp
   14184:	dfc00117 	ldw	ra,4(sp)
   14188:	df000017 	ldw	fp,0(sp)
   1418c:	dec00204 	addi	sp,sp,8
   14190:	f800283a 	ret

00014194 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   14194:	defffc04 	addi	sp,sp,-16
   14198:	df000315 	stw	fp,12(sp)
   1419c:	df000304 	addi	fp,sp,12
   141a0:	e13ffd15 	stw	r4,-12(fp)
   141a4:	e17ffe15 	stw	r5,-8(fp)
   141a8:	e1bfff15 	stw	r6,-4(fp)
  return len;
   141ac:	e0bfff17 	ldw	r2,-4(fp)
}
   141b0:	e037883a 	mov	sp,fp
   141b4:	df000017 	ldw	fp,0(sp)
   141b8:	dec00104 	addi	sp,sp,4
   141bc:	f800283a 	ret

000141c0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   141c0:	defffc04 	addi	sp,sp,-16
   141c4:	df000315 	stw	fp,12(sp)
   141c8:	df000304 	addi	fp,sp,12
   141cc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   141d0:	0001883a 	nop
   141d4:	e0bfff17 	ldw	r2,-4(fp)
   141d8:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
   141dc:	e0bffd17 	ldw	r2,-12(fp)
   141e0:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   141e4:	e0bffe17 	ldw	r2,-8(fp)
   141e8:	10000226 	beq	r2,zero,141f4 <_exit+0x34>
    ALT_SIM_FAIL();
   141ec:	002af070 	cmpltui	zero,zero,43969
   141f0:	00000106 	br	141f8 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   141f4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   141f8:	003fff06 	br	141f8 <_exit+0x38>

000141fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   141fc:	defffe04 	addi	sp,sp,-8
   14200:	dfc00115 	stw	ra,4(sp)
   14204:	df000015 	stw	fp,0(sp)
   14208:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1420c:	008000b4 	movhi	r2,2
   14210:	10a33c04 	addi	r2,r2,-29456
   14214:	10800017 	ldw	r2,0(r2)
   14218:	10000526 	beq	r2,zero,14230 <alt_get_errno+0x34>
   1421c:	008000b4 	movhi	r2,2
   14220:	10a33c04 	addi	r2,r2,-29456
   14224:	10800017 	ldw	r2,0(r2)
   14228:	103ee83a 	callr	r2
   1422c:	00000206 	br	14238 <alt_get_errno+0x3c>
   14230:	008000b4 	movhi	r2,2
   14234:	10aa0104 	addi	r2,r2,-22524
}
   14238:	e037883a 	mov	sp,fp
   1423c:	dfc00117 	ldw	ra,4(sp)
   14240:	df000017 	ldw	fp,0(sp)
   14244:	dec00204 	addi	sp,sp,8
   14248:	f800283a 	ret

0001424c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   1424c:	defffb04 	addi	sp,sp,-20
   14250:	dfc00415 	stw	ra,16(sp)
   14254:	df000315 	stw	fp,12(sp)
   14258:	df000304 	addi	fp,sp,12
   1425c:	e13ffe15 	stw	r4,-8(fp)
   14260:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   14264:	e0bffe17 	ldw	r2,-8(fp)
   14268:	10000716 	blt	r2,zero,14288 <fstat+0x3c>
   1426c:	e13ffe17 	ldw	r4,-8(fp)
   14270:	01400304 	movi	r5,12
   14274:	00140500 	call	14050 <__mulsi3>
   14278:	00c00074 	movhi	r3,1
   1427c:	18deb104 	addi	r3,r3,31428
   14280:	10c5883a 	add	r2,r2,r3
   14284:	00000106 	br	1428c <fstat+0x40>
   14288:	0005883a 	mov	r2,zero
   1428c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   14290:	e0bffd17 	ldw	r2,-12(fp)
   14294:	10001026 	beq	r2,zero,142d8 <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   14298:	e0bffd17 	ldw	r2,-12(fp)
   1429c:	10800017 	ldw	r2,0(r2)
   142a0:	10800817 	ldw	r2,32(r2)
   142a4:	10000726 	beq	r2,zero,142c4 <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
   142a8:	e0bffd17 	ldw	r2,-12(fp)
   142ac:	10800017 	ldw	r2,0(r2)
   142b0:	10800817 	ldw	r2,32(r2)
   142b4:	e13ffd17 	ldw	r4,-12(fp)
   142b8:	e17fff17 	ldw	r5,-4(fp)
   142bc:	103ee83a 	callr	r2
   142c0:	00000906 	br	142e8 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   142c4:	e0bfff17 	ldw	r2,-4(fp)
   142c8:	00c80004 	movi	r3,8192
   142cc:	10c00115 	stw	r3,4(r2)
      return 0;
   142d0:	0005883a 	mov	r2,zero
   142d4:	00000406 	br	142e8 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   142d8:	00141fc0 	call	141fc <alt_get_errno>
   142dc:	00c01444 	movi	r3,81
   142e0:	10c00015 	stw	r3,0(r2)
    return -1;
   142e4:	00bfffc4 	movi	r2,-1
  }
}
   142e8:	e037883a 	mov	sp,fp
   142ec:	dfc00117 	ldw	ra,4(sp)
   142f0:	df000017 	ldw	fp,0(sp)
   142f4:	dec00204 	addi	sp,sp,8
   142f8:	f800283a 	ret

000142fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   142fc:	defffe04 	addi	sp,sp,-8
   14300:	dfc00115 	stw	ra,4(sp)
   14304:	df000015 	stw	fp,0(sp)
   14308:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1430c:	008000b4 	movhi	r2,2
   14310:	10a33c04 	addi	r2,r2,-29456
   14314:	10800017 	ldw	r2,0(r2)
   14318:	10000526 	beq	r2,zero,14330 <alt_get_errno+0x34>
   1431c:	008000b4 	movhi	r2,2
   14320:	10a33c04 	addi	r2,r2,-29456
   14324:	10800017 	ldw	r2,0(r2)
   14328:	103ee83a 	callr	r2
   1432c:	00000206 	br	14338 <alt_get_errno+0x3c>
   14330:	008000b4 	movhi	r2,2
   14334:	10aa0104 	addi	r2,r2,-22524
}
   14338:	e037883a 	mov	sp,fp
   1433c:	dfc00117 	ldw	ra,4(sp)
   14340:	df000017 	ldw	fp,0(sp)
   14344:	dec00204 	addi	sp,sp,8
   14348:	f800283a 	ret

0001434c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   1434c:	deffed04 	addi	sp,sp,-76
   14350:	dfc01215 	stw	ra,72(sp)
   14354:	df001115 	stw	fp,68(sp)
   14358:	df001104 	addi	fp,sp,68
   1435c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   14360:	e0bfff17 	ldw	r2,-4(fp)
   14364:	10000716 	blt	r2,zero,14384 <isatty+0x38>
   14368:	e13fff17 	ldw	r4,-4(fp)
   1436c:	01400304 	movi	r5,12
   14370:	00140500 	call	14050 <__mulsi3>
   14374:	00c00074 	movhi	r3,1
   14378:	18deb104 	addi	r3,r3,31428
   1437c:	10c5883a 	add	r2,r2,r3
   14380:	00000106 	br	14388 <isatty+0x3c>
   14384:	0005883a 	mov	r2,zero
   14388:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   1438c:	e0bfef17 	ldw	r2,-68(fp)
   14390:	10000e26 	beq	r2,zero,143cc <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   14394:	e0bfef17 	ldw	r2,-68(fp)
   14398:	10800017 	ldw	r2,0(r2)
   1439c:	10800817 	ldw	r2,32(r2)
   143a0:	1000021e 	bne	r2,zero,143ac <isatty+0x60>
    {
      return 1;
   143a4:	00800044 	movi	r2,1
   143a8:	00000c06 	br	143dc <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   143ac:	e0bff004 	addi	r2,fp,-64
   143b0:	e13fff17 	ldw	r4,-4(fp)
   143b4:	100b883a 	mov	r5,r2
   143b8:	001424c0 	call	1424c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   143bc:	e0bff117 	ldw	r2,-60(fp)
   143c0:	10880020 	cmpeqi	r2,r2,8192
   143c4:	10803fcc 	andi	r2,r2,255
   143c8:	00000406 	br	143dc <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   143cc:	00142fc0 	call	142fc <alt_get_errno>
   143d0:	00c01444 	movi	r3,81
   143d4:	10c00015 	stw	r3,0(r2)
    return 0;
   143d8:	0005883a 	mov	r2,zero
  }
}
   143dc:	e037883a 	mov	sp,fp
   143e0:	dfc00117 	ldw	ra,4(sp)
   143e4:	df000017 	ldw	fp,0(sp)
   143e8:	dec00204 	addi	sp,sp,8
   143ec:	f800283a 	ret

000143f0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   143f0:	defffc04 	addi	sp,sp,-16
   143f4:	df000315 	stw	fp,12(sp)
   143f8:	df000304 	addi	fp,sp,12
   143fc:	e13ffd15 	stw	r4,-12(fp)
   14400:	e17ffe15 	stw	r5,-8(fp)
   14404:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   14408:	e0fffe17 	ldw	r3,-8(fp)
   1440c:	e0bffd17 	ldw	r2,-12(fp)
   14410:	18800e26 	beq	r3,r2,1444c <alt_load_section+0x5c>
  {
    while( to != end )
   14414:	00000a06 	br	14440 <alt_load_section+0x50>
    {
      *to++ = *from++;
   14418:	e0bffd17 	ldw	r2,-12(fp)
   1441c:	10c00017 	ldw	r3,0(r2)
   14420:	e0bffe17 	ldw	r2,-8(fp)
   14424:	10c00015 	stw	r3,0(r2)
   14428:	e0bffe17 	ldw	r2,-8(fp)
   1442c:	10800104 	addi	r2,r2,4
   14430:	e0bffe15 	stw	r2,-8(fp)
   14434:	e0bffd17 	ldw	r2,-12(fp)
   14438:	10800104 	addi	r2,r2,4
   1443c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   14440:	e0fffe17 	ldw	r3,-8(fp)
   14444:	e0bfff17 	ldw	r2,-4(fp)
   14448:	18bff31e 	bne	r3,r2,14418 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   1444c:	e037883a 	mov	sp,fp
   14450:	df000017 	ldw	fp,0(sp)
   14454:	dec00104 	addi	sp,sp,4
   14458:	f800283a 	ret

0001445c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   1445c:	defffe04 	addi	sp,sp,-8
   14460:	dfc00115 	stw	ra,4(sp)
   14464:	df000015 	stw	fp,0(sp)
   14468:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   1446c:	010000b4 	movhi	r4,2
   14470:	21235304 	addi	r4,r4,-29364
   14474:	01400074 	movhi	r5,1
   14478:	295ca504 	addi	r5,r5,29332
   1447c:	018000b4 	movhi	r6,2
   14480:	31a35304 	addi	r6,r6,-29364
   14484:	00143f00 	call	143f0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   14488:	01000074 	movhi	r4,1
   1448c:	21000804 	addi	r4,r4,32
   14490:	01400074 	movhi	r5,1
   14494:	29400804 	addi	r5,r5,32
   14498:	01800074 	movhi	r6,1
   1449c:	31806e04 	addi	r6,r6,440
   144a0:	00143f00 	call	143f0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   144a4:	01000074 	movhi	r4,1
   144a8:	211c8504 	addi	r4,r4,29204
   144ac:	01400074 	movhi	r5,1
   144b0:	295c8504 	addi	r5,r5,29204
   144b4:	01800074 	movhi	r6,1
   144b8:	319ca504 	addi	r6,r6,29332
   144bc:	00143f00 	call	143f0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   144c0:	001659c0 	call	1659c <alt_dcache_flush_all>
  alt_icache_flush_all();
   144c4:	0016a5c0 	call	16a5c <alt_icache_flush_all>
}
   144c8:	e037883a 	mov	sp,fp
   144cc:	dfc00117 	ldw	ra,4(sp)
   144d0:	df000017 	ldw	fp,0(sp)
   144d4:	dec00204 	addi	sp,sp,8
   144d8:	f800283a 	ret

000144dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   144dc:	defffe04 	addi	sp,sp,-8
   144e0:	dfc00115 	stw	ra,4(sp)
   144e4:	df000015 	stw	fp,0(sp)
   144e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   144ec:	008000b4 	movhi	r2,2
   144f0:	10a33c04 	addi	r2,r2,-29456
   144f4:	10800017 	ldw	r2,0(r2)
   144f8:	10000526 	beq	r2,zero,14510 <alt_get_errno+0x34>
   144fc:	008000b4 	movhi	r2,2
   14500:	10a33c04 	addi	r2,r2,-29456
   14504:	10800017 	ldw	r2,0(r2)
   14508:	103ee83a 	callr	r2
   1450c:	00000206 	br	14518 <alt_get_errno+0x3c>
   14510:	008000b4 	movhi	r2,2
   14514:	10aa0104 	addi	r2,r2,-22524
}
   14518:	e037883a 	mov	sp,fp
   1451c:	dfc00117 	ldw	ra,4(sp)
   14520:	df000017 	ldw	fp,0(sp)
   14524:	dec00204 	addi	sp,sp,8
   14528:	f800283a 	ret

0001452c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   1452c:	defff904 	addi	sp,sp,-28
   14530:	dfc00615 	stw	ra,24(sp)
   14534:	df000515 	stw	fp,20(sp)
   14538:	df000504 	addi	fp,sp,20
   1453c:	e13ffd15 	stw	r4,-12(fp)
   14540:	e17ffe15 	stw	r5,-8(fp)
   14544:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   14548:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1454c:	e0bffd17 	ldw	r2,-12(fp)
   14550:	10000716 	blt	r2,zero,14570 <lseek+0x44>
   14554:	e13ffd17 	ldw	r4,-12(fp)
   14558:	01400304 	movi	r5,12
   1455c:	00140500 	call	14050 <__mulsi3>
   14560:	00c00074 	movhi	r3,1
   14564:	18deb104 	addi	r3,r3,31428
   14568:	10c5883a 	add	r2,r2,r3
   1456c:	00000106 	br	14574 <lseek+0x48>
   14570:	0005883a 	mov	r2,zero
   14574:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   14578:	e0bffc17 	ldw	r2,-16(fp)
   1457c:	10001026 	beq	r2,zero,145c0 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   14580:	e0bffc17 	ldw	r2,-16(fp)
   14584:	10800017 	ldw	r2,0(r2)
   14588:	10800717 	ldw	r2,28(r2)
   1458c:	10000926 	beq	r2,zero,145b4 <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   14590:	e0bffc17 	ldw	r2,-16(fp)
   14594:	10800017 	ldw	r2,0(r2)
   14598:	10800717 	ldw	r2,28(r2)
   1459c:	e13ffc17 	ldw	r4,-16(fp)
   145a0:	e17ffe17 	ldw	r5,-8(fp)
   145a4:	e1bfff17 	ldw	r6,-4(fp)
   145a8:	103ee83a 	callr	r2
   145ac:	e0bffb15 	stw	r2,-20(fp)
   145b0:	00000506 	br	145c8 <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   145b4:	00bfde84 	movi	r2,-134
   145b8:	e0bffb15 	stw	r2,-20(fp)
   145bc:	00000206 	br	145c8 <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
   145c0:	00bfebc4 	movi	r2,-81
   145c4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   145c8:	e0bffb17 	ldw	r2,-20(fp)
   145cc:	1000060e 	bge	r2,zero,145e8 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   145d0:	00144dc0 	call	144dc <alt_get_errno>
   145d4:	e0fffb17 	ldw	r3,-20(fp)
   145d8:	00c7c83a 	sub	r3,zero,r3
   145dc:	10c00015 	stw	r3,0(r2)
    rc = -1;
   145e0:	00bfffc4 	movi	r2,-1
   145e4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   145e8:	e0bffb17 	ldw	r2,-20(fp)
}
   145ec:	e037883a 	mov	sp,fp
   145f0:	dfc00117 	ldw	ra,4(sp)
   145f4:	df000017 	ldw	fp,0(sp)
   145f8:	dec00204 	addi	sp,sp,8
   145fc:	f800283a 	ret

00014600 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   14600:	defffd04 	addi	sp,sp,-12
   14604:	dfc00215 	stw	ra,8(sp)
   14608:	df000115 	stw	fp,4(sp)
   1460c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   14610:	0009883a 	mov	r4,zero
   14614:	0014d3c0 	call	14d3c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   14618:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   1461c:	0014d700 	call	14d70 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   14620:	01000074 	movhi	r4,1
   14624:	211c9a04 	addi	r4,r4,29288
   14628:	01400074 	movhi	r5,1
   1462c:	295c9a04 	addi	r5,r5,29288
   14630:	01800074 	movhi	r6,1
   14634:	319c9a04 	addi	r6,r6,29288
   14638:	0016e200 	call	16e20 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   1463c:	00166a80 	call	166a8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   14640:	01000074 	movhi	r4,1
   14644:	2119c104 	addi	r4,r4,26372
   14648:	00170540 	call	17054 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   1464c:	d126d217 	ldw	r4,-25784(gp)
   14650:	d0e6d317 	ldw	r3,-25780(gp)
   14654:	d0a6d417 	ldw	r2,-25776(gp)
   14658:	180b883a 	mov	r5,r3
   1465c:	100d883a 	mov	r6,r2
   14660:	00103000 	call	10300 <main>
   14664:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   14668:	01000044 	movi	r4,1
   1466c:	00140c80 	call	140c8 <close>
  exit (result);
   14670:	e13fff17 	ldw	r4,-4(fp)
   14674:	00105980 	call	10598 <exit>

00014678 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   14678:	defffe04 	addi	sp,sp,-8
   1467c:	df000115 	stw	fp,4(sp)
   14680:	df000104 	addi	fp,sp,4
   14684:	e13fff15 	stw	r4,-4(fp)
}
   14688:	e037883a 	mov	sp,fp
   1468c:	df000017 	ldw	fp,0(sp)
   14690:	dec00104 	addi	sp,sp,4
   14694:	f800283a 	ret

00014698 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   14698:	defffe04 	addi	sp,sp,-8
   1469c:	df000115 	stw	fp,4(sp)
   146a0:	df000104 	addi	fp,sp,4
   146a4:	e13fff15 	stw	r4,-4(fp)
}
   146a8:	e037883a 	mov	sp,fp
   146ac:	df000017 	ldw	fp,0(sp)
   146b0:	dec00104 	addi	sp,sp,4
   146b4:	f800283a 	ret

000146b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   146b8:	defffe04 	addi	sp,sp,-8
   146bc:	dfc00115 	stw	ra,4(sp)
   146c0:	df000015 	stw	fp,0(sp)
   146c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   146c8:	008000b4 	movhi	r2,2
   146cc:	10a33c04 	addi	r2,r2,-29456
   146d0:	10800017 	ldw	r2,0(r2)
   146d4:	10000526 	beq	r2,zero,146ec <alt_get_errno+0x34>
   146d8:	008000b4 	movhi	r2,2
   146dc:	10a33c04 	addi	r2,r2,-29456
   146e0:	10800017 	ldw	r2,0(r2)
   146e4:	103ee83a 	callr	r2
   146e8:	00000206 	br	146f4 <alt_get_errno+0x3c>
   146ec:	008000b4 	movhi	r2,2
   146f0:	10aa0104 	addi	r2,r2,-22524
}
   146f4:	e037883a 	mov	sp,fp
   146f8:	dfc00117 	ldw	ra,4(sp)
   146fc:	df000017 	ldw	fp,0(sp)
   14700:	dec00204 	addi	sp,sp,8
   14704:	f800283a 	ret

00014708 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   14708:	defffb04 	addi	sp,sp,-20
   1470c:	dfc00415 	stw	ra,16(sp)
   14710:	df000315 	stw	fp,12(sp)
   14714:	dc000215 	stw	r16,8(sp)
   14718:	df000204 	addi	fp,sp,8
   1471c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   14720:	e0bfff17 	ldw	r2,-4(fp)
   14724:	10800217 	ldw	r2,8(r2)
   14728:	10d00034 	orhi	r3,r2,16384
   1472c:	e0bfff17 	ldw	r2,-4(fp)
   14730:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   14734:	e03ffe15 	stw	zero,-8(fp)
   14738:	00002206 	br	147c4 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1473c:	04000074 	movhi	r16,1
   14740:	841eb104 	addi	r16,r16,31428
   14744:	e0bffe17 	ldw	r2,-8(fp)
   14748:	1009883a 	mov	r4,r2
   1474c:	01400304 	movi	r5,12
   14750:	00140500 	call	14050 <__mulsi3>
   14754:	8085883a 	add	r2,r16,r2
   14758:	10c00017 	ldw	r3,0(r2)
   1475c:	e0bfff17 	ldw	r2,-4(fp)
   14760:	10800017 	ldw	r2,0(r2)
   14764:	1880141e 	bne	r3,r2,147b8 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   14768:	04000074 	movhi	r16,1
   1476c:	841eb104 	addi	r16,r16,31428
   14770:	e0bffe17 	ldw	r2,-8(fp)
   14774:	1009883a 	mov	r4,r2
   14778:	01400304 	movi	r5,12
   1477c:	00140500 	call	14050 <__mulsi3>
   14780:	8085883a 	add	r2,r16,r2
   14784:	10800204 	addi	r2,r2,8
   14788:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1478c:	10000a0e 	bge	r2,zero,147b8 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   14790:	e13ffe17 	ldw	r4,-8(fp)
   14794:	01400304 	movi	r5,12
   14798:	00140500 	call	14050 <__mulsi3>
   1479c:	00c00074 	movhi	r3,1
   147a0:	18deb104 	addi	r3,r3,31428
   147a4:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   147a8:	e0bfff17 	ldw	r2,-4(fp)
   147ac:	18800226 	beq	r3,r2,147b8 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   147b0:	00bffcc4 	movi	r2,-13
   147b4:	00000a06 	br	147e0 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   147b8:	e0bffe17 	ldw	r2,-8(fp)
   147bc:	10800044 	addi	r2,r2,1
   147c0:	e0bffe15 	stw	r2,-8(fp)
   147c4:	008000b4 	movhi	r2,2
   147c8:	10a33b04 	addi	r2,r2,-29460
   147cc:	10800017 	ldw	r2,0(r2)
   147d0:	1007883a 	mov	r3,r2
   147d4:	e0bffe17 	ldw	r2,-8(fp)
   147d8:	18bfd82e 	bgeu	r3,r2,1473c <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   147dc:	0005883a 	mov	r2,zero
}
   147e0:	e037883a 	mov	sp,fp
   147e4:	dfc00217 	ldw	ra,8(sp)
   147e8:	df000117 	ldw	fp,4(sp)
   147ec:	dc000017 	ldw	r16,0(sp)
   147f0:	dec00304 	addi	sp,sp,12
   147f4:	f800283a 	ret

000147f8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   147f8:	defff604 	addi	sp,sp,-40
   147fc:	dfc00915 	stw	ra,36(sp)
   14800:	df000815 	stw	fp,32(sp)
   14804:	df000804 	addi	fp,sp,32
   14808:	e13ffd15 	stw	r4,-12(fp)
   1480c:	e17ffe15 	stw	r5,-8(fp)
   14810:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   14814:	00bfffc4 	movi	r2,-1
   14818:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   1481c:	00bffb44 	movi	r2,-19
   14820:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   14824:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   14828:	e13ffd17 	ldw	r4,-12(fp)
   1482c:	014000b4 	movhi	r5,2
   14830:	29633904 	addi	r5,r5,-29468
   14834:	00167600 	call	16760 <alt_find_dev>
   14838:	e0bff815 	stw	r2,-32(fp)
   1483c:	e0bff817 	ldw	r2,-32(fp)
   14840:	1000051e 	bne	r2,zero,14858 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   14844:	e13ffd17 	ldw	r4,-12(fp)
   14848:	00167f00 	call	167f0 <alt_find_file>
   1484c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   14850:	00800044 	movi	r2,1
   14854:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   14858:	e0bff817 	ldw	r2,-32(fp)
   1485c:	10002a26 	beq	r2,zero,14908 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   14860:	e13ff817 	ldw	r4,-32(fp)
   14864:	00169880 	call	16988 <alt_get_fd>
   14868:	e0bff915 	stw	r2,-28(fp)
   1486c:	e0bff917 	ldw	r2,-28(fp)
   14870:	1000030e 	bge	r2,zero,14880 <open+0x88>
    {
      status = index;
   14874:	e0bff917 	ldw	r2,-28(fp)
   14878:	e0bffa15 	stw	r2,-24(fp)
   1487c:	00002406 	br	14910 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   14880:	e13ff917 	ldw	r4,-28(fp)
   14884:	01400304 	movi	r5,12
   14888:	00140500 	call	14050 <__mulsi3>
   1488c:	00c00074 	movhi	r3,1
   14890:	18deb104 	addi	r3,r3,31428
   14894:	10c5883a 	add	r2,r2,r3
   14898:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   1489c:	e0fffe17 	ldw	r3,-8(fp)
   148a0:	00900034 	movhi	r2,16384
   148a4:	10bfffc4 	addi	r2,r2,-1
   148a8:	1886703a 	and	r3,r3,r2
   148ac:	e0bffc17 	ldw	r2,-16(fp)
   148b0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   148b4:	e0bffb17 	ldw	r2,-20(fp)
   148b8:	1000051e 	bne	r2,zero,148d0 <open+0xd8>
   148bc:	e13ffc17 	ldw	r4,-16(fp)
   148c0:	00147080 	call	14708 <alt_file_locked>
   148c4:	e0bffa15 	stw	r2,-24(fp)
   148c8:	e0bffa17 	ldw	r2,-24(fp)
   148cc:	10001016 	blt	r2,zero,14910 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   148d0:	e0bff817 	ldw	r2,-32(fp)
   148d4:	10800317 	ldw	r2,12(r2)
   148d8:	10000826 	beq	r2,zero,148fc <open+0x104>
   148dc:	e0bff817 	ldw	r2,-32(fp)
   148e0:	10800317 	ldw	r2,12(r2)
   148e4:	e13ffc17 	ldw	r4,-16(fp)
   148e8:	e17ffd17 	ldw	r5,-12(fp)
   148ec:	e1bffe17 	ldw	r6,-8(fp)
   148f0:	e1ffff17 	ldw	r7,-4(fp)
   148f4:	103ee83a 	callr	r2
   148f8:	00000106 	br	14900 <open+0x108>
   148fc:	0005883a 	mov	r2,zero
   14900:	e0bffa15 	stw	r2,-24(fp)
   14904:	00000206 	br	14910 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   14908:	00bffb44 	movi	r2,-19
   1490c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   14910:	e0bffa17 	ldw	r2,-24(fp)
   14914:	1000080e 	bge	r2,zero,14938 <open+0x140>
  {
    alt_release_fd (index);  
   14918:	e13ff917 	ldw	r4,-28(fp)
   1491c:	0014a940 	call	14a94 <alt_release_fd>
    ALT_ERRNO = -status;
   14920:	00146b80 	call	146b8 <alt_get_errno>
   14924:	e0fffa17 	ldw	r3,-24(fp)
   14928:	00c7c83a 	sub	r3,zero,r3
   1492c:	10c00015 	stw	r3,0(r2)
    return -1;
   14930:	00bfffc4 	movi	r2,-1
   14934:	00000106 	br	1493c <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   14938:	e0bff917 	ldw	r2,-28(fp)
}
   1493c:	e037883a 	mov	sp,fp
   14940:	dfc00117 	ldw	ra,4(sp)
   14944:	df000017 	ldw	fp,0(sp)
   14948:	dec00204 	addi	sp,sp,8
   1494c:	f800283a 	ret

00014950 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14950:	defffe04 	addi	sp,sp,-8
   14954:	dfc00115 	stw	ra,4(sp)
   14958:	df000015 	stw	fp,0(sp)
   1495c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14960:	008000b4 	movhi	r2,2
   14964:	10a33c04 	addi	r2,r2,-29456
   14968:	10800017 	ldw	r2,0(r2)
   1496c:	10000526 	beq	r2,zero,14984 <alt_get_errno+0x34>
   14970:	008000b4 	movhi	r2,2
   14974:	10a33c04 	addi	r2,r2,-29456
   14978:	10800017 	ldw	r2,0(r2)
   1497c:	103ee83a 	callr	r2
   14980:	00000206 	br	1498c <alt_get_errno+0x3c>
   14984:	008000b4 	movhi	r2,2
   14988:	10aa0104 	addi	r2,r2,-22524
}
   1498c:	e037883a 	mov	sp,fp
   14990:	dfc00117 	ldw	ra,4(sp)
   14994:	df000017 	ldw	fp,0(sp)
   14998:	dec00204 	addi	sp,sp,8
   1499c:	f800283a 	ret

000149a0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   149a0:	defff904 	addi	sp,sp,-28
   149a4:	dfc00615 	stw	ra,24(sp)
   149a8:	df000515 	stw	fp,20(sp)
   149ac:	df000504 	addi	fp,sp,20
   149b0:	e13ffd15 	stw	r4,-12(fp)
   149b4:	e17ffe15 	stw	r5,-8(fp)
   149b8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   149bc:	e0bffd17 	ldw	r2,-12(fp)
   149c0:	10000716 	blt	r2,zero,149e0 <read+0x40>
   149c4:	e13ffd17 	ldw	r4,-12(fp)
   149c8:	01400304 	movi	r5,12
   149cc:	00140500 	call	14050 <__mulsi3>
   149d0:	00c00074 	movhi	r3,1
   149d4:	18deb104 	addi	r3,r3,31428
   149d8:	10c5883a 	add	r2,r2,r3
   149dc:	00000106 	br	149e4 <read+0x44>
   149e0:	0005883a 	mov	r2,zero
   149e4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   149e8:	e0bffb17 	ldw	r2,-20(fp)
   149ec:	10002026 	beq	r2,zero,14a70 <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   149f0:	e0bffb17 	ldw	r2,-20(fp)
   149f4:	10800217 	ldw	r2,8(r2)
   149f8:	108000cc 	andi	r2,r2,3
   149fc:	10800060 	cmpeqi	r2,r2,1
   14a00:	1000171e 	bne	r2,zero,14a60 <read+0xc0>
        (fd->dev->read))
   14a04:	e0bffb17 	ldw	r2,-20(fp)
   14a08:	10800017 	ldw	r2,0(r2)
   14a0c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   14a10:	10001326 	beq	r2,zero,14a60 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   14a14:	e0bffb17 	ldw	r2,-20(fp)
   14a18:	10800017 	ldw	r2,0(r2)
   14a1c:	10c00517 	ldw	r3,20(r2)
   14a20:	e0bfff17 	ldw	r2,-4(fp)
   14a24:	e13ffb17 	ldw	r4,-20(fp)
   14a28:	e17ffe17 	ldw	r5,-8(fp)
   14a2c:	100d883a 	mov	r6,r2
   14a30:	183ee83a 	callr	r3
   14a34:	e0bffc15 	stw	r2,-16(fp)
   14a38:	e0bffc17 	ldw	r2,-16(fp)
   14a3c:	1000060e 	bge	r2,zero,14a58 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   14a40:	00149500 	call	14950 <alt_get_errno>
   14a44:	e0fffc17 	ldw	r3,-16(fp)
   14a48:	00c7c83a 	sub	r3,zero,r3
   14a4c:	10c00015 	stw	r3,0(r2)
          return -1;
   14a50:	00bfffc4 	movi	r2,-1
   14a54:	00000a06 	br	14a80 <read+0xe0>
        }
        return rval;
   14a58:	e0bffc17 	ldw	r2,-16(fp)
   14a5c:	00000806 	br	14a80 <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   14a60:	00149500 	call	14950 <alt_get_errno>
   14a64:	00c00344 	movi	r3,13
   14a68:	10c00015 	stw	r3,0(r2)
   14a6c:	00000306 	br	14a7c <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   14a70:	00149500 	call	14950 <alt_get_errno>
   14a74:	00c01444 	movi	r3,81
   14a78:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   14a7c:	00bfffc4 	movi	r2,-1
}
   14a80:	e037883a 	mov	sp,fp
   14a84:	dfc00117 	ldw	ra,4(sp)
   14a88:	df000017 	ldw	fp,0(sp)
   14a8c:	dec00204 	addi	sp,sp,8
   14a90:	f800283a 	ret

00014a94 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   14a94:	defffc04 	addi	sp,sp,-16
   14a98:	dfc00315 	stw	ra,12(sp)
   14a9c:	df000215 	stw	fp,8(sp)
   14aa0:	dc000115 	stw	r16,4(sp)
   14aa4:	df000104 	addi	fp,sp,4
   14aa8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   14aac:	e0bfff17 	ldw	r2,-4(fp)
   14ab0:	108000d0 	cmplti	r2,r2,3
   14ab4:	1000111e 	bne	r2,zero,14afc <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   14ab8:	04000074 	movhi	r16,1
   14abc:	841eb104 	addi	r16,r16,31428
   14ac0:	e0bfff17 	ldw	r2,-4(fp)
   14ac4:	1009883a 	mov	r4,r2
   14ac8:	01400304 	movi	r5,12
   14acc:	00140500 	call	14050 <__mulsi3>
   14ad0:	8085883a 	add	r2,r16,r2
   14ad4:	10800204 	addi	r2,r2,8
   14ad8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   14adc:	04000074 	movhi	r16,1
   14ae0:	841eb104 	addi	r16,r16,31428
   14ae4:	e0bfff17 	ldw	r2,-4(fp)
   14ae8:	1009883a 	mov	r4,r2
   14aec:	01400304 	movi	r5,12
   14af0:	00140500 	call	14050 <__mulsi3>
   14af4:	8085883a 	add	r2,r16,r2
   14af8:	10000015 	stw	zero,0(r2)
  }
}
   14afc:	e037883a 	mov	sp,fp
   14b00:	dfc00217 	ldw	ra,8(sp)
   14b04:	df000117 	ldw	fp,4(sp)
   14b08:	dc000017 	ldw	r16,0(sp)
   14b0c:	dec00304 	addi	sp,sp,12
   14b10:	f800283a 	ret

00014b14 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   14b14:	defff904 	addi	sp,sp,-28
   14b18:	df000615 	stw	fp,24(sp)
   14b1c:	df000604 	addi	fp,sp,24
   14b20:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14b24:	0005303a 	rdctl	r2,status
   14b28:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14b2c:	e0fffc17 	ldw	r3,-16(fp)
   14b30:	00bfff84 	movi	r2,-2
   14b34:	1884703a 	and	r2,r3,r2
   14b38:	1001703a 	wrctl	status,r2
  
  return context;
   14b3c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   14b40:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   14b44:	d0a00a17 	ldw	r2,-32728(gp)
   14b48:	10c000c4 	addi	r3,r2,3
   14b4c:	00bfff04 	movi	r2,-4
   14b50:	1884703a 	and	r2,r3,r2
   14b54:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   14b58:	d0e00a17 	ldw	r3,-32728(gp)
   14b5c:	e0bfff17 	ldw	r2,-4(fp)
   14b60:	1885883a 	add	r2,r3,r2
   14b64:	00c000b4 	movhi	r3,2
   14b68:	18c00004 	addi	r3,r3,0
   14b6c:	1880062e 	bgeu	r3,r2,14b88 <sbrk+0x74>
   14b70:	e0bffa17 	ldw	r2,-24(fp)
   14b74:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14b78:	e0bffd17 	ldw	r2,-12(fp)
   14b7c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   14b80:	00bfffc4 	movi	r2,-1
   14b84:	00000b06 	br	14bb4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   14b88:	d0a00a17 	ldw	r2,-32728(gp)
   14b8c:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   14b90:	d0e00a17 	ldw	r3,-32728(gp)
   14b94:	e0bfff17 	ldw	r2,-4(fp)
   14b98:	1885883a 	add	r2,r3,r2
   14b9c:	d0a00a15 	stw	r2,-32728(gp)
   14ba0:	e0bffa17 	ldw	r2,-24(fp)
   14ba4:	e0bffe15 	stw	r2,-8(fp)
   14ba8:	e0bffe17 	ldw	r2,-8(fp)
   14bac:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   14bb0:	e0bffb17 	ldw	r2,-20(fp)
} 
   14bb4:	e037883a 	mov	sp,fp
   14bb8:	df000017 	ldw	fp,0(sp)
   14bbc:	dec00104 	addi	sp,sp,4
   14bc0:	f800283a 	ret

00014bc4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14bc4:	defffe04 	addi	sp,sp,-8
   14bc8:	dfc00115 	stw	ra,4(sp)
   14bcc:	df000015 	stw	fp,0(sp)
   14bd0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14bd4:	008000b4 	movhi	r2,2
   14bd8:	10a33c04 	addi	r2,r2,-29456
   14bdc:	10800017 	ldw	r2,0(r2)
   14be0:	10000526 	beq	r2,zero,14bf8 <alt_get_errno+0x34>
   14be4:	008000b4 	movhi	r2,2
   14be8:	10a33c04 	addi	r2,r2,-29456
   14bec:	10800017 	ldw	r2,0(r2)
   14bf0:	103ee83a 	callr	r2
   14bf4:	00000206 	br	14c00 <alt_get_errno+0x3c>
   14bf8:	008000b4 	movhi	r2,2
   14bfc:	10aa0104 	addi	r2,r2,-22524
}
   14c00:	e037883a 	mov	sp,fp
   14c04:	dfc00117 	ldw	ra,4(sp)
   14c08:	df000017 	ldw	fp,0(sp)
   14c0c:	dec00204 	addi	sp,sp,8
   14c10:	f800283a 	ret

00014c14 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   14c14:	defff904 	addi	sp,sp,-28
   14c18:	dfc00615 	stw	ra,24(sp)
   14c1c:	df000515 	stw	fp,20(sp)
   14c20:	df000504 	addi	fp,sp,20
   14c24:	e13ffd15 	stw	r4,-12(fp)
   14c28:	e17ffe15 	stw	r5,-8(fp)
   14c2c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   14c30:	e0bffd17 	ldw	r2,-12(fp)
   14c34:	10000716 	blt	r2,zero,14c54 <write+0x40>
   14c38:	e13ffd17 	ldw	r4,-12(fp)
   14c3c:	01400304 	movi	r5,12
   14c40:	00140500 	call	14050 <__mulsi3>
   14c44:	00c00074 	movhi	r3,1
   14c48:	18deb104 	addi	r3,r3,31428
   14c4c:	10c5883a 	add	r2,r2,r3
   14c50:	00000106 	br	14c58 <write+0x44>
   14c54:	0005883a 	mov	r2,zero
   14c58:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   14c5c:	e0bffb17 	ldw	r2,-20(fp)
   14c60:	10001f26 	beq	r2,zero,14ce0 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   14c64:	e0bffb17 	ldw	r2,-20(fp)
   14c68:	10800217 	ldw	r2,8(r2)
   14c6c:	108000cc 	andi	r2,r2,3
   14c70:	10001726 	beq	r2,zero,14cd0 <write+0xbc>
   14c74:	e0bffb17 	ldw	r2,-20(fp)
   14c78:	10800017 	ldw	r2,0(r2)
   14c7c:	10800617 	ldw	r2,24(r2)
   14c80:	10001326 	beq	r2,zero,14cd0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   14c84:	e0bffb17 	ldw	r2,-20(fp)
   14c88:	10800017 	ldw	r2,0(r2)
   14c8c:	10c00617 	ldw	r3,24(r2)
   14c90:	e0bfff17 	ldw	r2,-4(fp)
   14c94:	e13ffb17 	ldw	r4,-20(fp)
   14c98:	e17ffe17 	ldw	r5,-8(fp)
   14c9c:	100d883a 	mov	r6,r2
   14ca0:	183ee83a 	callr	r3
   14ca4:	e0bffc15 	stw	r2,-16(fp)
   14ca8:	e0bffc17 	ldw	r2,-16(fp)
   14cac:	1000060e 	bge	r2,zero,14cc8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   14cb0:	0014bc40 	call	14bc4 <alt_get_errno>
   14cb4:	e0fffc17 	ldw	r3,-16(fp)
   14cb8:	00c7c83a 	sub	r3,zero,r3
   14cbc:	10c00015 	stw	r3,0(r2)
        return -1;
   14cc0:	00bfffc4 	movi	r2,-1
   14cc4:	00000a06 	br	14cf0 <write+0xdc>
      }
      return rval;
   14cc8:	e0bffc17 	ldw	r2,-16(fp)
   14ccc:	00000806 	br	14cf0 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
   14cd0:	0014bc40 	call	14bc4 <alt_get_errno>
   14cd4:	00c00344 	movi	r3,13
   14cd8:	10c00015 	stw	r3,0(r2)
   14cdc:	00000306 	br	14cec <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   14ce0:	0014bc40 	call	14bc4 <alt_get_errno>
   14ce4:	00c01444 	movi	r3,81
   14ce8:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   14cec:	00bfffc4 	movi	r2,-1
}
   14cf0:	e037883a 	mov	sp,fp
   14cf4:	dfc00117 	ldw	ra,4(sp)
   14cf8:	df000017 	ldw	fp,0(sp)
   14cfc:	dec00204 	addi	sp,sp,8
   14d00:	f800283a 	ret

00014d04 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   14d04:	defffd04 	addi	sp,sp,-12
   14d08:	dfc00215 	stw	ra,8(sp)
   14d0c:	df000115 	stw	fp,4(sp)
   14d10:	df000104 	addi	fp,sp,4
   14d14:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   14d18:	e13fff17 	ldw	r4,-4(fp)
   14d1c:	014000b4 	movhi	r5,2
   14d20:	29633904 	addi	r5,r5,-29468
   14d24:	00166080 	call	16608 <alt_dev_llist_insert>
}
   14d28:	e037883a 	mov	sp,fp
   14d2c:	dfc00117 	ldw	ra,4(sp)
   14d30:	df000017 	ldw	fp,0(sp)
   14d34:	dec00204 	addi	sp,sp,8
   14d38:	f800283a 	ret

00014d3c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   14d3c:	defffd04 	addi	sp,sp,-12
   14d40:	dfc00215 	stw	ra,8(sp)
   14d44:	df000115 	stw	fp,4(sp)
   14d48:	df000104 	addi	fp,sp,4
   14d4c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU6, cpu6);
   14d50:	00170340 	call	17034 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   14d54:	00800044 	movi	r2,1
   14d58:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   14d5c:	e037883a 	mov	sp,fp
   14d60:	dfc00117 	ldw	ra,4(sp)
   14d64:	df000017 	ldw	fp,0(sp)
   14d68:	dec00204 	addi	sp,sp,8
   14d6c:	f800283a 	ret

00014d70 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   14d70:	defffe04 	addi	sp,sp,-8
   14d74:	dfc00115 	stw	ra,4(sp)
   14d78:	df000015 	stw	fp,0(sp)
   14d7c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER6, timer6);
   14d80:	010000b4 	movhi	r4,2
   14d84:	21040004 	addi	r4,r4,4096
   14d88:	000b883a 	mov	r5,zero
   14d8c:	01800044 	movi	r6,1
   14d90:	01c0fa04 	movi	r7,1000
   14d94:	0015dac0 	call	15dac <alt_avalon_timer_sc_init>
    ALTERA_AVALON_FIFO_INIT ( FIFO1TO6, fifo1to6);
   14d98:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO5TO6, fifo5to6);
   14d9c:	0001883a 	nop
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART6, jtag_uart6);
   14da0:	01000074 	movhi	r4,1
   14da4:	211f1b04 	addi	r4,r4,31852
   14da8:	000b883a 	mov	r5,zero
   14dac:	01800404 	movi	r6,16
   14db0:	00154380 	call	15438 <altera_avalon_jtag_uart_init>
   14db4:	01000074 	movhi	r4,1
   14db8:	211f1104 	addi	r4,r4,31812
   14dbc:	0014d040 	call	14d04 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   14dc0:	0001883a 	nop
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
   14dc4:	010000b4 	movhi	r4,2
   14dc8:	21232904 	addi	r4,r4,-29532
   14dcc:	00169040 	call	16904 <alt_fs_reg>
}
   14dd0:	e037883a 	mov	sp,fp
   14dd4:	dfc00117 	ldw	ra,4(sp)
   14dd8:	df000017 	ldw	fp,0(sp)
   14ddc:	dec00204 	addi	sp,sp,8
   14de0:	f800283a 	ret

00014de4 <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
   14de4:	defffa04 	addi	sp,sp,-24
   14de8:	dfc00515 	stw	ra,20(sp)
   14dec:	df000415 	stw	fp,16(sp)
   14df0:	df000404 	addi	fp,sp,16
   14df4:	e13ffc15 	stw	r4,-16(fp)
   14df8:	e17ffd15 	stw	r5,-12(fp)
   14dfc:	e1bffe15 	stw	r6,-8(fp)
   14e00:	e1ffff15 	stw	r7,-4(fp)
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
   14e04:	e13ffc17 	ldw	r4,-16(fp)
   14e08:	01400fc4 	movi	r5,63
   14e0c:	0014fb00 	call	14fb0 <altera_avalon_fifo_clear_event>
   14e10:	10000226 	beq	r2,zero,14e1c <altera_avalon_fifo_init+0x38>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   14e14:	00bfffc4 	movi	r2,-1
   14e18:	00001306 	br	14e68 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
   14e1c:	e13ffc17 	ldw	r4,-16(fp)
   14e20:	e17ffd17 	ldw	r5,-12(fp)
   14e24:	001500c0 	call	1500c <altera_avalon_fifo_write_ienable>
   14e28:	10000226 	beq	r2,zero,14e34 <altera_avalon_fifo_init+0x50>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   14e2c:	00bfff84 	movi	r2,-2
   14e30:	00000d06 	br	14e68 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
   14e34:	e13ffc17 	ldw	r4,-16(fp)
   14e38:	e17fff17 	ldw	r5,-4(fp)
   14e3c:	00150640 	call	15064 <altera_avalon_fifo_write_almostfull>
   14e40:	10000226 	beq	r2,zero,14e4c <altera_avalon_fifo_init+0x68>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   14e44:	00bfff44 	movi	r2,-3
   14e48:	00000706 	br	14e68 <altera_avalon_fifo_init+0x84>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
   14e4c:	e13ffc17 	ldw	r4,-16(fp)
   14e50:	e17ffe17 	ldw	r5,-8(fp)
   14e54:	00150bc0 	call	150bc <altera_avalon_fifo_write_almostempty>
   14e58:	10000226 	beq	r2,zero,14e64 <altera_avalon_fifo_init+0x80>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   14e5c:	00bfff44 	movi	r2,-3
   14e60:	00000106 	br	14e68 <altera_avalon_fifo_init+0x84>
    }

    return ALTERA_AVALON_FIFO_OK;
   14e64:	0005883a 	mov	r2,zero
}
   14e68:	e037883a 	mov	sp,fp
   14e6c:	dfc00117 	ldw	ra,4(sp)
   14e70:	df000017 	ldw	fp,0(sp)
   14e74:	dec00204 	addi	sp,sp,8
   14e78:	f800283a 	ret

00014e7c <altera_avalon_fifo_read_status>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
   14e7c:	defffd04 	addi	sp,sp,-12
   14e80:	df000215 	stw	fp,8(sp)
   14e84:	df000204 	addi	fp,sp,8
   14e88:	e13ffe15 	stw	r4,-8(fp)
   14e8c:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   14e90:	e0bffe17 	ldw	r2,-8(fp)
   14e94:	10800104 	addi	r2,r2,4
   14e98:	10800037 	ldwio	r2,0(r2)
   14e9c:	1007883a 	mov	r3,r2
   14ea0:	e0bfff17 	ldw	r2,-4(fp)
   14ea4:	1884703a 	and	r2,r3,r2
}
   14ea8:	e037883a 	mov	sp,fp
   14eac:	df000017 	ldw	fp,0(sp)
   14eb0:	dec00104 	addi	sp,sp,4
   14eb4:	f800283a 	ret

00014eb8 <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
   14eb8:	defffd04 	addi	sp,sp,-12
   14ebc:	df000215 	stw	fp,8(sp)
   14ec0:	df000204 	addi	fp,sp,8
   14ec4:	e13ffe15 	stw	r4,-8(fp)
   14ec8:	e17fff15 	stw	r5,-4(fp)
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
   14ecc:	e0bffe17 	ldw	r2,-8(fp)
   14ed0:	10800304 	addi	r2,r2,12
   14ed4:	10800037 	ldwio	r2,0(r2)
   14ed8:	1007883a 	mov	r3,r2
   14edc:	e0bfff17 	ldw	r2,-4(fp)
   14ee0:	1884703a 	and	r2,r3,r2
}
   14ee4:	e037883a 	mov	sp,fp
   14ee8:	df000017 	ldw	fp,0(sp)
   14eec:	dec00104 	addi	sp,sp,4
   14ef0:	f800283a 	ret

00014ef4 <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
   14ef4:	defffe04 	addi	sp,sp,-8
   14ef8:	df000115 	stw	fp,4(sp)
   14efc:	df000104 	addi	fp,sp,4
   14f00:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
   14f04:	e0bfff17 	ldw	r2,-4(fp)
   14f08:	10800404 	addi	r2,r2,16
   14f0c:	10800037 	ldwio	r2,0(r2)
}
   14f10:	e037883a 	mov	sp,fp
   14f14:	df000017 	ldw	fp,0(sp)
   14f18:	dec00104 	addi	sp,sp,4
   14f1c:	f800283a 	ret

00014f20 <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
   14f20:	defffe04 	addi	sp,sp,-8
   14f24:	df000115 	stw	fp,4(sp)
   14f28:	df000104 	addi	fp,sp,4
   14f2c:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
   14f30:	e0bfff17 	ldw	r2,-4(fp)
   14f34:	10800504 	addi	r2,r2,20
   14f38:	10800037 	ldwio	r2,0(r2)
}
   14f3c:	e037883a 	mov	sp,fp
   14f40:	df000017 	ldw	fp,0(sp)
   14f44:	dec00104 	addi	sp,sp,4
   14f48:	f800283a 	ret

00014f4c <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
   14f4c:	defffd04 	addi	sp,sp,-12
   14f50:	df000215 	stw	fp,8(sp)
   14f54:	df000204 	addi	fp,sp,8
   14f58:	e13ffe15 	stw	r4,-8(fp)
   14f5c:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
   14f60:	e0bffe17 	ldw	r2,-8(fp)
   14f64:	10800204 	addi	r2,r2,8
   14f68:	10800037 	ldwio	r2,0(r2)
   14f6c:	1007883a 	mov	r3,r2
   14f70:	e0bfff17 	ldw	r2,-4(fp)
   14f74:	1884703a 	and	r2,r3,r2
}
   14f78:	e037883a 	mov	sp,fp
   14f7c:	df000017 	ldw	fp,0(sp)
   14f80:	dec00104 	addi	sp,sp,4
   14f84:	f800283a 	ret

00014f88 <altera_avalon_fifo_read_level>:

int altera_avalon_fifo_read_level(alt_u32 address)
{
   14f88:	defffe04 	addi	sp,sp,-8
   14f8c:	df000115 	stw	fp,4(sp)
   14f90:	df000104 	addi	fp,sp,4
   14f94:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
   14f98:	e0bfff17 	ldw	r2,-4(fp)
   14f9c:	10800037 	ldwio	r2,0(r2)
}
   14fa0:	e037883a 	mov	sp,fp
   14fa4:	df000017 	ldw	fp,0(sp)
   14fa8:	dec00104 	addi	sp,sp,4
   14fac:	f800283a 	ret

00014fb0 <altera_avalon_fifo_clear_event>:

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
   14fb0:	defffd04 	addi	sp,sp,-12
   14fb4:	df000215 	stw	fp,8(sp)
   14fb8:	df000204 	addi	fp,sp,8
   14fbc:	e13ffe15 	stw	r4,-8(fp)
   14fc0:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
   14fc4:	e0bffe17 	ldw	r2,-8(fp)
   14fc8:	10800204 	addi	r2,r2,8
   14fcc:	e0ffff17 	ldw	r3,-4(fp)
   14fd0:	10c00035 	stwio	r3,0(r2)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
   14fd4:	e0bffe17 	ldw	r2,-8(fp)
   14fd8:	10800204 	addi	r2,r2,8
   14fdc:	10800037 	ldwio	r2,0(r2)
   14fe0:	1007883a 	mov	r3,r2
   14fe4:	e0bfff17 	ldw	r2,-4(fp)
   14fe8:	1884703a 	and	r2,r3,r2
   14fec:	1000021e 	bne	r2,zero,14ff8 <altera_avalon_fifo_clear_event+0x48>
        return ALTERA_AVALON_FIFO_OK;
   14ff0:	0005883a 	mov	r2,zero
   14ff4:	00000106 	br	14ffc <altera_avalon_fifo_clear_event+0x4c>
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   14ff8:	00bfffc4 	movi	r2,-1
}
   14ffc:	e037883a 	mov	sp,fp
   15000:	df000017 	ldw	fp,0(sp)
   15004:	dec00104 	addi	sp,sp,4
   15008:	f800283a 	ret

0001500c <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
   1500c:	defffd04 	addi	sp,sp,-12
   15010:	df000215 	stw	fp,8(sp)
   15014:	df000204 	addi	fp,sp,8
   15018:	e13ffe15 	stw	r4,-8(fp)
   1501c:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
   15020:	e0bffe17 	ldw	r2,-8(fp)
   15024:	10800304 	addi	r2,r2,12
   15028:	e0ffff17 	ldw	r3,-4(fp)
   1502c:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
   15030:	e0bffe17 	ldw	r2,-8(fp)
   15034:	10800304 	addi	r2,r2,12
   15038:	10800037 	ldwio	r2,0(r2)
   1503c:	1007883a 	mov	r3,r2
   15040:	e0bfff17 	ldw	r2,-4(fp)
   15044:	1880021e 	bne	r3,r2,15050 <altera_avalon_fifo_write_ienable+0x44>
        return ALTERA_AVALON_FIFO_OK;
   15048:	0005883a 	mov	r2,zero
   1504c:	00000106 	br	15054 <altera_avalon_fifo_write_ienable+0x48>
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   15050:	00bfff84 	movi	r2,-2
}
   15054:	e037883a 	mov	sp,fp
   15058:	df000017 	ldw	fp,0(sp)
   1505c:	dec00104 	addi	sp,sp,4
   15060:	f800283a 	ret

00015064 <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
   15064:	defffd04 	addi	sp,sp,-12
   15068:	df000215 	stw	fp,8(sp)
   1506c:	df000204 	addi	fp,sp,8
   15070:	e13ffe15 	stw	r4,-8(fp)
   15074:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
   15078:	e0bffe17 	ldw	r2,-8(fp)
   1507c:	10800404 	addi	r2,r2,16
   15080:	e0ffff17 	ldw	r3,-4(fp)
   15084:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
   15088:	e0bffe17 	ldw	r2,-8(fp)
   1508c:	10800404 	addi	r2,r2,16
   15090:	10800037 	ldwio	r2,0(r2)
   15094:	1007883a 	mov	r3,r2
   15098:	e0bfff17 	ldw	r2,-4(fp)
   1509c:	1880021e 	bne	r3,r2,150a8 <altera_avalon_fifo_write_almostfull+0x44>
        return ALTERA_AVALON_FIFO_OK;
   150a0:	0005883a 	mov	r2,zero
   150a4:	00000106 	br	150ac <altera_avalon_fifo_write_almostfull+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   150a8:	00bfff44 	movi	r2,-3
}
   150ac:	e037883a 	mov	sp,fp
   150b0:	df000017 	ldw	fp,0(sp)
   150b4:	dec00104 	addi	sp,sp,4
   150b8:	f800283a 	ret

000150bc <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
   150bc:	defffd04 	addi	sp,sp,-12
   150c0:	df000215 	stw	fp,8(sp)
   150c4:	df000204 	addi	fp,sp,8
   150c8:	e13ffe15 	stw	r4,-8(fp)
   150cc:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
   150d0:	e0bffe17 	ldw	r2,-8(fp)
   150d4:	10800504 	addi	r2,r2,20
   150d8:	e0ffff17 	ldw	r3,-4(fp)
   150dc:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
   150e0:	e0bffe17 	ldw	r2,-8(fp)
   150e4:	10800504 	addi	r2,r2,20
   150e8:	10800037 	ldwio	r2,0(r2)
   150ec:	1007883a 	mov	r3,r2
   150f0:	e0bfff17 	ldw	r2,-4(fp)
   150f4:	1880021e 	bne	r3,r2,15100 <altera_avalon_fifo_write_almostempty+0x44>
        return ALTERA_AVALON_FIFO_OK;
   150f8:	0005883a 	mov	r2,zero
   150fc:	00000106 	br	15104 <altera_avalon_fifo_write_almostempty+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   15100:	00bfff44 	movi	r2,-3
}
   15104:	e037883a 	mov	sp,fp
   15108:	df000017 	ldw	fp,0(sp)
   1510c:	dec00104 	addi	sp,sp,4
   15110:	f800283a 	ret

00015114 <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
   15114:	defffb04 	addi	sp,sp,-20
   15118:	dfc00415 	stw	ra,16(sp)
   1511c:	df000315 	stw	fp,12(sp)
   15120:	df000304 	addi	fp,sp,12
   15124:	e13ffd15 	stw	r4,-12(fp)
   15128:	e17ffe15 	stw	r5,-8(fp)
   1512c:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   15130:	e13ffe17 	ldw	r4,-8(fp)
   15134:	01400044 	movi	r5,1
   15138:	0014e7c0 	call	14e7c <altera_avalon_fifo_read_status>
   1513c:	1000051e 	bne	r2,zero,15154 <altera_avalon_fifo_write_fifo+0x40>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
   15140:	e0bffd17 	ldw	r2,-12(fp)
   15144:	e0ffff17 	ldw	r3,-4(fp)
   15148:	10c00035 	stwio	r3,0(r2)
        return ALTERA_AVALON_FIFO_OK;
   1514c:	0005883a 	mov	r2,zero
   15150:	00000106 	br	15158 <altera_avalon_fifo_write_fifo+0x44>
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
   15154:	00bfff04 	movi	r2,-4
    }
}
   15158:	e037883a 	mov	sp,fp
   1515c:	dfc00117 	ldw	ra,4(sp)
   15160:	df000017 	ldw	fp,0(sp)
   15164:	dec00204 	addi	sp,sp,8
   15168:	f800283a 	ret

0001516c <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
   1516c:	defffa04 	addi	sp,sp,-24
   15170:	dfc00515 	stw	ra,20(sp)
   15174:	df000415 	stw	fp,16(sp)
   15178:	df000404 	addi	fp,sp,16
   1517c:	e13ffd15 	stw	r4,-12(fp)
   15180:	e17ffe15 	stw	r5,-8(fp)
   15184:	e1bfff15 	stw	r6,-4(fp)
    int return_val = 0;
   15188:	e03ffc15 	stw	zero,-16(fp)
    *data = 0;
   1518c:	e0bfff17 	ldw	r2,-4(fp)
   15190:	10000015 	stw	zero,0(r2)
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   15194:	e13ffe17 	ldw	r4,-8(fp)
   15198:	01400084 	movi	r5,2
   1519c:	0014e7c0 	call	14e7c <altera_avalon_fifo_read_status>
   151a0:	1000071e 	bne	r2,zero,151c0 <altera_avalon_read_fifo+0x54>
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
   151a4:	e13ffe17 	ldw	r4,-8(fp)
   151a8:	0014f880 	call	14f88 <altera_avalon_fifo_read_level>
   151ac:	e0bffc15 	stw	r2,-16(fp)
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   151b0:	e0bffd17 	ldw	r2,-12(fp)
   151b4:	10c00037 	ldwio	r3,0(r2)
   151b8:	e0bfff17 	ldw	r2,-4(fp)
   151bc:	10c00015 	stw	r3,0(r2)
    
    }
    return return_val;
   151c0:	e0bffc17 	ldw	r2,-16(fp)
}
   151c4:	e037883a 	mov	sp,fp
   151c8:	dfc00117 	ldw	ra,4(sp)
   151cc:	df000017 	ldw	fp,0(sp)
   151d0:	dec00204 	addi	sp,sp,8
   151d4:	f800283a 	ret

000151d8 <altera_avalon_fifo_read_fifo>:

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
   151d8:	defffc04 	addi	sp,sp,-16
   151dc:	dfc00315 	stw	ra,12(sp)
   151e0:	df000215 	stw	fp,8(sp)
   151e4:	df000204 	addi	fp,sp,8
   151e8:	e13ffe15 	stw	r4,-8(fp)
   151ec:	e17fff15 	stw	r5,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   151f0:	e13fff17 	ldw	r4,-4(fp)
   151f4:	01400084 	movi	r5,2
   151f8:	0014e7c0 	call	14e7c <altera_avalon_fifo_read_status>
   151fc:	1000031e 	bne	r2,zero,1520c <altera_avalon_fifo_read_fifo+0x34>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   15200:	e0bffe17 	ldw	r2,-8(fp)
   15204:	10800037 	ldwio	r2,0(r2)
   15208:	00000106 	br	15210 <altera_avalon_fifo_read_fifo+0x38>
    }
    return 0;
   1520c:	0005883a 	mov	r2,zero
}
   15210:	e037883a 	mov	sp,fp
   15214:	dfc00117 	ldw	ra,4(sp)
   15218:	df000017 	ldw	fp,0(sp)
   1521c:	dec00204 	addi	sp,sp,8
   15220:	f800283a 	ret

00015224 <altera_avalon_fifo_write_other_info>:

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
   15224:	defffb04 	addi	sp,sp,-20
   15228:	dfc00415 	stw	ra,16(sp)
   1522c:	df000315 	stw	fp,12(sp)
   15230:	df000304 	addi	fp,sp,12
   15234:	e13ffd15 	stw	r4,-12(fp)
   15238:	e17ffe15 	stw	r5,-8(fp)
   1523c:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   15240:	e13ffe17 	ldw	r4,-8(fp)
   15244:	01400044 	movi	r5,1
   15248:	0014e7c0 	call	14e7c <altera_avalon_fifo_read_status>
   1524c:	1000061e 	bne	r2,zero,15268 <altera_avalon_fifo_write_other_info+0x44>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
   15250:	e0bffd17 	ldw	r2,-12(fp)
   15254:	10800104 	addi	r2,r2,4
   15258:	e0ffff17 	ldw	r3,-4(fp)
   1525c:	10c00035 	stwio	r3,0(r2)
	return ALTERA_AVALON_FIFO_OK;
   15260:	0005883a 	mov	r2,zero
   15264:	00000106 	br	1526c <altera_avalon_fifo_write_other_info+0x48>
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
   15268:	00bfff04 	movi	r2,-4
    }
}
   1526c:	e037883a 	mov	sp,fp
   15270:	dfc00117 	ldw	ra,4(sp)
   15274:	df000017 	ldw	fp,0(sp)
   15278:	dec00204 	addi	sp,sp,8
   1527c:	f800283a 	ret

00015280 <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
   15280:	defffe04 	addi	sp,sp,-8
   15284:	df000115 	stw	fp,4(sp)
   15288:	df000104 	addi	fp,sp,4
   1528c:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
   15290:	e0bfff17 	ldw	r2,-4(fp)
   15294:	10800104 	addi	r2,r2,4
   15298:	10800037 	ldwio	r2,0(r2)
}
   1529c:	e037883a 	mov	sp,fp
   152a0:	df000017 	ldw	fp,0(sp)
   152a4:	dec00104 	addi	sp,sp,4
   152a8:	f800283a 	ret

000152ac <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
   152ac:	defffe04 	addi	sp,sp,-8
   152b0:	df000115 	stw	fp,4(sp)
   152b4:	df000104 	addi	fp,sp,4
   152b8:	e13fff15 	stw	r4,-4(fp)
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
   152bc:	e0bfff17 	ldw	r2,-4(fp)
   152c0:	10800037 	ldwio	r2,0(r2)
}
   152c4:	e037883a 	mov	sp,fp
   152c8:	df000017 	ldw	fp,0(sp)
   152cc:	dec00104 	addi	sp,sp,4
   152d0:	f800283a 	ret

000152d4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   152d4:	defffa04 	addi	sp,sp,-24
   152d8:	dfc00515 	stw	ra,20(sp)
   152dc:	df000415 	stw	fp,16(sp)
   152e0:	df000404 	addi	fp,sp,16
   152e4:	e13ffd15 	stw	r4,-12(fp)
   152e8:	e17ffe15 	stw	r5,-8(fp)
   152ec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   152f0:	e0bffd17 	ldw	r2,-12(fp)
   152f4:	10800017 	ldw	r2,0(r2)
   152f8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   152fc:	e0bffc17 	ldw	r2,-16(fp)
   15300:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   15304:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   15308:	10800217 	ldw	r2,8(r2)
   1530c:	1809883a 	mov	r4,r3
   15310:	e17ffe17 	ldw	r5,-8(fp)
   15314:	e1bfff17 	ldw	r6,-4(fp)
   15318:	100f883a 	mov	r7,r2
   1531c:	00158fc0 	call	158fc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   15320:	e037883a 	mov	sp,fp
   15324:	dfc00117 	ldw	ra,4(sp)
   15328:	df000017 	ldw	fp,0(sp)
   1532c:	dec00204 	addi	sp,sp,8
   15330:	f800283a 	ret

00015334 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   15334:	defffa04 	addi	sp,sp,-24
   15338:	dfc00515 	stw	ra,20(sp)
   1533c:	df000415 	stw	fp,16(sp)
   15340:	df000404 	addi	fp,sp,16
   15344:	e13ffd15 	stw	r4,-12(fp)
   15348:	e17ffe15 	stw	r5,-8(fp)
   1534c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   15350:	e0bffd17 	ldw	r2,-12(fp)
   15354:	10800017 	ldw	r2,0(r2)
   15358:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   1535c:	e0bffc17 	ldw	r2,-16(fp)
   15360:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   15364:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   15368:	10800217 	ldw	r2,8(r2)
   1536c:	1809883a 	mov	r4,r3
   15370:	e17ffe17 	ldw	r5,-8(fp)
   15374:	e1bfff17 	ldw	r6,-4(fp)
   15378:	100f883a 	mov	r7,r2
   1537c:	0015b140 	call	15b14 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   15380:	e037883a 	mov	sp,fp
   15384:	dfc00117 	ldw	ra,4(sp)
   15388:	df000017 	ldw	fp,0(sp)
   1538c:	dec00204 	addi	sp,sp,8
   15390:	f800283a 	ret

00015394 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   15394:	defffc04 	addi	sp,sp,-16
   15398:	dfc00315 	stw	ra,12(sp)
   1539c:	df000215 	stw	fp,8(sp)
   153a0:	df000204 	addi	fp,sp,8
   153a4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   153a8:	e0bfff17 	ldw	r2,-4(fp)
   153ac:	10800017 	ldw	r2,0(r2)
   153b0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   153b4:	e0bffe17 	ldw	r2,-8(fp)
   153b8:	10c00a04 	addi	r3,r2,40
   153bc:	e0bfff17 	ldw	r2,-4(fp)
   153c0:	10800217 	ldw	r2,8(r2)
   153c4:	1809883a 	mov	r4,r3
   153c8:	100b883a 	mov	r5,r2
   153cc:	00157a00 	call	157a0 <altera_avalon_jtag_uart_close>
}
   153d0:	e037883a 	mov	sp,fp
   153d4:	dfc00117 	ldw	ra,4(sp)
   153d8:	df000017 	ldw	fp,0(sp)
   153dc:	dec00204 	addi	sp,sp,8
   153e0:	f800283a 	ret

000153e4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   153e4:	defffa04 	addi	sp,sp,-24
   153e8:	dfc00515 	stw	ra,20(sp)
   153ec:	df000415 	stw	fp,16(sp)
   153f0:	df000404 	addi	fp,sp,16
   153f4:	e13ffd15 	stw	r4,-12(fp)
   153f8:	e17ffe15 	stw	r5,-8(fp)
   153fc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   15400:	e0bffd17 	ldw	r2,-12(fp)
   15404:	10800017 	ldw	r2,0(r2)
   15408:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   1540c:	e0bffc17 	ldw	r2,-16(fp)
   15410:	10800a04 	addi	r2,r2,40
   15414:	1009883a 	mov	r4,r2
   15418:	e17ffe17 	ldw	r5,-8(fp)
   1541c:	e1bfff17 	ldw	r6,-4(fp)
   15420:	00158080 	call	15808 <altera_avalon_jtag_uart_ioctl>
}
   15424:	e037883a 	mov	sp,fp
   15428:	dfc00117 	ldw	ra,4(sp)
   1542c:	df000017 	ldw	fp,0(sp)
   15430:	dec00204 	addi	sp,sp,8
   15434:	f800283a 	ret

00015438 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   15438:	defffa04 	addi	sp,sp,-24
   1543c:	dfc00515 	stw	ra,20(sp)
   15440:	df000415 	stw	fp,16(sp)
   15444:	df000404 	addi	fp,sp,16
   15448:	e13ffd15 	stw	r4,-12(fp)
   1544c:	e17ffe15 	stw	r5,-8(fp)
   15450:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   15454:	e0bffd17 	ldw	r2,-12(fp)
   15458:	00c00044 	movi	r3,1
   1545c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   15460:	e0bffd17 	ldw	r2,-12(fp)
   15464:	10800017 	ldw	r2,0(r2)
   15468:	10800104 	addi	r2,r2,4
   1546c:	e0fffd17 	ldw	r3,-12(fp)
   15470:	18c00817 	ldw	r3,32(r3)
   15474:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   15478:	e0fffe17 	ldw	r3,-8(fp)
   1547c:	e0bfff17 	ldw	r2,-4(fp)
   15480:	d8000015 	stw	zero,0(sp)
   15484:	1809883a 	mov	r4,r3
   15488:	100b883a 	mov	r5,r2
   1548c:	01800074 	movhi	r6,1
   15490:	31953e04 	addi	r6,r6,21752
   15494:	e1fffd17 	ldw	r7,-12(fp)
   15498:	0016a780 	call	16a78 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   1549c:	e0bffd17 	ldw	r2,-12(fp)
   154a0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   154a4:	e0bffd17 	ldw	r2,-12(fp)
   154a8:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   154ac:	008000b4 	movhi	r2,2
   154b0:	10aa0904 	addi	r2,r2,-22492
   154b4:	10800017 	ldw	r2,0(r2)
   154b8:	1809883a 	mov	r4,r3
   154bc:	100b883a 	mov	r5,r2
   154c0:	01800074 	movhi	r6,1
   154c4:	3195bf04 	addi	r6,r6,22268
   154c8:	e1fffd17 	ldw	r7,-12(fp)
   154cc:	001645c0 	call	1645c <alt_alarm_start>
   154d0:	1000040e 	bge	r2,zero,154e4 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   154d4:	e0bffd17 	ldw	r2,-12(fp)
   154d8:	00e00034 	movhi	r3,32768
   154dc:	18ffffc4 	addi	r3,r3,-1
   154e0:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   154e4:	e037883a 	mov	sp,fp
   154e8:	dfc00117 	ldw	ra,4(sp)
   154ec:	df000017 	ldw	fp,0(sp)
   154f0:	dec00204 	addi	sp,sp,8
   154f4:	f800283a 	ret

000154f8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   154f8:	defff804 	addi	sp,sp,-32
   154fc:	df000715 	stw	fp,28(sp)
   15500:	df000704 	addi	fp,sp,28
   15504:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   15508:	e0bfff17 	ldw	r2,-4(fp)
   1550c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   15510:	e0bffb17 	ldw	r2,-20(fp)
   15514:	10800017 	ldw	r2,0(r2)
   15518:	e0bffc15 	stw	r2,-16(fp)
   1551c:	00000106 	br	15524 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
   15520:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   15524:	e0bffc17 	ldw	r2,-16(fp)
   15528:	10800104 	addi	r2,r2,4
   1552c:	10800037 	ldwio	r2,0(r2)
   15530:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   15534:	e0bffd17 	ldw	r2,-12(fp)
   15538:	1080c00c 	andi	r2,r2,768
   1553c:	10006a26 	beq	r2,zero,156e8 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   15540:	e0bffd17 	ldw	r2,-12(fp)
   15544:	1080400c 	andi	r2,r2,256
   15548:	10003326 	beq	r2,zero,15618 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   1554c:	00800074 	movhi	r2,1
   15550:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   15554:	e0bffb17 	ldw	r2,-20(fp)
   15558:	10800a17 	ldw	r2,40(r2)
   1555c:	10800044 	addi	r2,r2,1
   15560:	1081ffcc 	andi	r2,r2,2047
   15564:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   15568:	e0bffb17 	ldw	r2,-20(fp)
   1556c:	10c00b17 	ldw	r3,44(r2)
   15570:	e0bffe17 	ldw	r2,-8(fp)
   15574:	18801426 	beq	r3,r2,155c8 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   15578:	e0bffc17 	ldw	r2,-16(fp)
   1557c:	10800037 	ldwio	r2,0(r2)
   15580:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   15584:	e0bff917 	ldw	r2,-28(fp)
   15588:	10a0000c 	andi	r2,r2,32768
   1558c:	10001026 	beq	r2,zero,155d0 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   15590:	e0bffb17 	ldw	r2,-20(fp)
   15594:	10800a17 	ldw	r2,40(r2)
   15598:	e0fff917 	ldw	r3,-28(fp)
   1559c:	e13ffb17 	ldw	r4,-20(fp)
   155a0:	2085883a 	add	r2,r4,r2
   155a4:	10800e04 	addi	r2,r2,56
   155a8:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   155ac:	e0bffb17 	ldw	r2,-20(fp)
   155b0:	10800a17 	ldw	r2,40(r2)
   155b4:	10800044 	addi	r2,r2,1
   155b8:	10c1ffcc 	andi	r3,r2,2047
   155bc:	e0bffb17 	ldw	r2,-20(fp)
   155c0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   155c4:	003fe306 	br	15554 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   155c8:	0001883a 	nop
   155cc:	00000106 	br	155d4 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   155d0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   155d4:	e0bff917 	ldw	r2,-28(fp)
   155d8:	10bfffec 	andhi	r2,r2,65535
   155dc:	10000e26 	beq	r2,zero,15618 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   155e0:	e0bffb17 	ldw	r2,-20(fp)
   155e4:	10c00817 	ldw	r3,32(r2)
   155e8:	00bfff84 	movi	r2,-2
   155ec:	1886703a 	and	r3,r3,r2
   155f0:	e0bffb17 	ldw	r2,-20(fp)
   155f4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   155f8:	e0bffc17 	ldw	r2,-16(fp)
   155fc:	10800104 	addi	r2,r2,4
   15600:	e0fffb17 	ldw	r3,-20(fp)
   15604:	18c00817 	ldw	r3,32(r3)
   15608:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1560c:	e0bffc17 	ldw	r2,-16(fp)
   15610:	10800104 	addi	r2,r2,4
   15614:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   15618:	e0bffd17 	ldw	r2,-12(fp)
   1561c:	1080800c 	andi	r2,r2,512
   15620:	103fbf26 	beq	r2,zero,15520 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   15624:	e0bffd17 	ldw	r2,-12(fp)
   15628:	1004d43a 	srli	r2,r2,16
   1562c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   15630:	00001406 	br	15684 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   15634:	e0bffc17 	ldw	r2,-16(fp)
   15638:	e0fffb17 	ldw	r3,-20(fp)
   1563c:	18c00d17 	ldw	r3,52(r3)
   15640:	e13ffb17 	ldw	r4,-20(fp)
   15644:	20c7883a 	add	r3,r4,r3
   15648:	18c20e04 	addi	r3,r3,2104
   1564c:	18c00003 	ldbu	r3,0(r3)
   15650:	18c03fcc 	andi	r3,r3,255
   15654:	18c0201c 	xori	r3,r3,128
   15658:	18ffe004 	addi	r3,r3,-128
   1565c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   15660:	e0bffb17 	ldw	r2,-20(fp)
   15664:	10800d17 	ldw	r2,52(r2)
   15668:	10800044 	addi	r2,r2,1
   1566c:	10c1ffcc 	andi	r3,r2,2047
   15670:	e0bffb17 	ldw	r2,-20(fp)
   15674:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   15678:	e0bffa17 	ldw	r2,-24(fp)
   1567c:	10bfffc4 	addi	r2,r2,-1
   15680:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   15684:	e0bffa17 	ldw	r2,-24(fp)
   15688:	10000526 	beq	r2,zero,156a0 <altera_avalon_jtag_uart_irq+0x1a8>
   1568c:	e0bffb17 	ldw	r2,-20(fp)
   15690:	10c00d17 	ldw	r3,52(r2)
   15694:	e0bffb17 	ldw	r2,-20(fp)
   15698:	10800c17 	ldw	r2,48(r2)
   1569c:	18bfe51e 	bne	r3,r2,15634 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   156a0:	e0bffa17 	ldw	r2,-24(fp)
   156a4:	103f9e26 	beq	r2,zero,15520 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   156a8:	e0bffb17 	ldw	r2,-20(fp)
   156ac:	10c00817 	ldw	r3,32(r2)
   156b0:	00bfff44 	movi	r2,-3
   156b4:	1886703a 	and	r3,r3,r2
   156b8:	e0bffb17 	ldw	r2,-20(fp)
   156bc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   156c0:	e0bffb17 	ldw	r2,-20(fp)
   156c4:	10800017 	ldw	r2,0(r2)
   156c8:	10800104 	addi	r2,r2,4
   156cc:	e0fffb17 	ldw	r3,-20(fp)
   156d0:	18c00817 	ldw	r3,32(r3)
   156d4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   156d8:	e0bffc17 	ldw	r2,-16(fp)
   156dc:	10800104 	addi	r2,r2,4
   156e0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   156e4:	003f8e06 	br	15520 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   156e8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   156ec:	e037883a 	mov	sp,fp
   156f0:	df000017 	ldw	fp,0(sp)
   156f4:	dec00104 	addi	sp,sp,4
   156f8:	f800283a 	ret

000156fc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   156fc:	defffc04 	addi	sp,sp,-16
   15700:	df000315 	stw	fp,12(sp)
   15704:	df000304 	addi	fp,sp,12
   15708:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   1570c:	e0bfff17 	ldw	r2,-4(fp)
   15710:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   15714:	e0bffd17 	ldw	r2,-12(fp)
   15718:	10800017 	ldw	r2,0(r2)
   1571c:	10800104 	addi	r2,r2,4
   15720:	10800037 	ldwio	r2,0(r2)
   15724:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   15728:	e0bffe17 	ldw	r2,-8(fp)
   1572c:	1081000c 	andi	r2,r2,1024
   15730:	10000a26 	beq	r2,zero,1575c <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   15734:	e0bffd17 	ldw	r2,-12(fp)
   15738:	10800017 	ldw	r2,0(r2)
   1573c:	10800104 	addi	r2,r2,4
   15740:	e0fffd17 	ldw	r3,-12(fp)
   15744:	18c00817 	ldw	r3,32(r3)
   15748:	18c10014 	ori	r3,r3,1024
   1574c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   15750:	e0bffd17 	ldw	r2,-12(fp)
   15754:	10000915 	stw	zero,36(r2)
   15758:	00000a06 	br	15784 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   1575c:	e0bffd17 	ldw	r2,-12(fp)
   15760:	10800917 	ldw	r2,36(r2)
   15764:	00e00034 	movhi	r3,32768
   15768:	18ffff04 	addi	r3,r3,-4
   1576c:	18800536 	bltu	r3,r2,15784 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
   15770:	e0bffd17 	ldw	r2,-12(fp)
   15774:	10800917 	ldw	r2,36(r2)
   15778:	10c00044 	addi	r3,r2,1
   1577c:	e0bffd17 	ldw	r2,-12(fp)
   15780:	10c00915 	stw	r3,36(r2)
   15784:	008000b4 	movhi	r2,2
   15788:	10aa0904 	addi	r2,r2,-22492
   1578c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   15790:	e037883a 	mov	sp,fp
   15794:	df000017 	ldw	fp,0(sp)
   15798:	dec00104 	addi	sp,sp,4
   1579c:	f800283a 	ret

000157a0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   157a0:	defffd04 	addi	sp,sp,-12
   157a4:	df000215 	stw	fp,8(sp)
   157a8:	df000204 	addi	fp,sp,8
   157ac:	e13ffe15 	stw	r4,-8(fp)
   157b0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   157b4:	00000506 	br	157cc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   157b8:	e0bfff17 	ldw	r2,-4(fp)
   157bc:	1090000c 	andi	r2,r2,16384
   157c0:	10000226 	beq	r2,zero,157cc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   157c4:	00bffd44 	movi	r2,-11
   157c8:	00000b06 	br	157f8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   157cc:	e0bffe17 	ldw	r2,-8(fp)
   157d0:	10c00d17 	ldw	r3,52(r2)
   157d4:	e0bffe17 	ldw	r2,-8(fp)
   157d8:	10800c17 	ldw	r2,48(r2)
   157dc:	18800526 	beq	r3,r2,157f4 <altera_avalon_jtag_uart_close+0x54>
   157e0:	e0bffe17 	ldw	r2,-8(fp)
   157e4:	10c00917 	ldw	r3,36(r2)
   157e8:	e0bffe17 	ldw	r2,-8(fp)
   157ec:	10800117 	ldw	r2,4(r2)
   157f0:	18bff136 	bltu	r3,r2,157b8 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   157f4:	0005883a 	mov	r2,zero
}
   157f8:	e037883a 	mov	sp,fp
   157fc:	df000017 	ldw	fp,0(sp)
   15800:	dec00104 	addi	sp,sp,4
   15804:	f800283a 	ret

00015808 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   15808:	defffa04 	addi	sp,sp,-24
   1580c:	df000515 	stw	fp,20(sp)
   15810:	df000504 	addi	fp,sp,20
   15814:	e13ffd15 	stw	r4,-12(fp)
   15818:	e17ffe15 	stw	r5,-8(fp)
   1581c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   15820:	00bff9c4 	movi	r2,-25
   15824:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   15828:	e0bffe17 	ldw	r2,-8(fp)
   1582c:	10da8060 	cmpeqi	r3,r2,27137
   15830:	1800031e 	bne	r3,zero,15840 <altera_avalon_jtag_uart_ioctl+0x38>
   15834:	109a80a0 	cmpeqi	r2,r2,27138
   15838:	1000181e 	bne	r2,zero,1589c <altera_avalon_jtag_uart_ioctl+0x94>
   1583c:	00002606 	br	158d8 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   15840:	e0bffd17 	ldw	r2,-12(fp)
   15844:	10c00117 	ldw	r3,4(r2)
   15848:	00a00034 	movhi	r2,32768
   1584c:	10bfffc4 	addi	r2,r2,-1
   15850:	18802226 	beq	r3,r2,158dc <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
   15854:	e0bfff17 	ldw	r2,-4(fp)
   15858:	10800017 	ldw	r2,0(r2)
   1585c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   15860:	e0bffc17 	ldw	r2,-16(fp)
   15864:	10800090 	cmplti	r2,r2,2
   15868:	1000061e 	bne	r2,zero,15884 <altera_avalon_jtag_uart_ioctl+0x7c>
   1586c:	e0fffc17 	ldw	r3,-16(fp)
   15870:	00a00034 	movhi	r2,32768
   15874:	10bfffc4 	addi	r2,r2,-1
   15878:	18800226 	beq	r3,r2,15884 <altera_avalon_jtag_uart_ioctl+0x7c>
   1587c:	e0bffc17 	ldw	r2,-16(fp)
   15880:	00000206 	br	1588c <altera_avalon_jtag_uart_ioctl+0x84>
   15884:	00a00034 	movhi	r2,32768
   15888:	10bfff84 	addi	r2,r2,-2
   1588c:	e0fffd17 	ldw	r3,-12(fp)
   15890:	18800115 	stw	r2,4(r3)
      rc = 0;
   15894:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   15898:	00001006 	br	158dc <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   1589c:	e0bffd17 	ldw	r2,-12(fp)
   158a0:	10c00117 	ldw	r3,4(r2)
   158a4:	00a00034 	movhi	r2,32768
   158a8:	10bfffc4 	addi	r2,r2,-1
   158ac:	18800d26 	beq	r3,r2,158e4 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   158b0:	e0bffd17 	ldw	r2,-12(fp)
   158b4:	10c00917 	ldw	r3,36(r2)
   158b8:	e0bffd17 	ldw	r2,-12(fp)
   158bc:	10800117 	ldw	r2,4(r2)
   158c0:	1885803a 	cmpltu	r2,r3,r2
   158c4:	10c03fcc 	andi	r3,r2,255
   158c8:	e0bfff17 	ldw	r2,-4(fp)
   158cc:	10c00015 	stw	r3,0(r2)
      rc = 0;
   158d0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   158d4:	00000306 	br	158e4 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
   158d8:	00000306 	br	158e8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   158dc:	0001883a 	nop
   158e0:	00000106 	br	158e8 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   158e4:	0001883a 	nop

  default:
    break;
  }

  return rc;
   158e8:	e0bffb17 	ldw	r2,-20(fp)
}
   158ec:	e037883a 	mov	sp,fp
   158f0:	df000017 	ldw	fp,0(sp)
   158f4:	dec00104 	addi	sp,sp,4
   158f8:	f800283a 	ret

000158fc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   158fc:	defff304 	addi	sp,sp,-52
   15900:	dfc00c15 	stw	ra,48(sp)
   15904:	df000b15 	stw	fp,44(sp)
   15908:	df000b04 	addi	fp,sp,44
   1590c:	e13ffc15 	stw	r4,-16(fp)
   15910:	e17ffd15 	stw	r5,-12(fp)
   15914:	e1bffe15 	stw	r6,-8(fp)
   15918:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   1591c:	e0bffd17 	ldw	r2,-12(fp)
   15920:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   15924:	00004706 	br	15a44 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   15928:	e0bffc17 	ldw	r2,-16(fp)
   1592c:	10800a17 	ldw	r2,40(r2)
   15930:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   15934:	e0bffc17 	ldw	r2,-16(fp)
   15938:	10800b17 	ldw	r2,44(r2)
   1593c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   15940:	e0fff717 	ldw	r3,-36(fp)
   15944:	e0bff817 	ldw	r2,-32(fp)
   15948:	18800536 	bltu	r3,r2,15960 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   1594c:	e0fff717 	ldw	r3,-36(fp)
   15950:	e0bff817 	ldw	r2,-32(fp)
   15954:	1885c83a 	sub	r2,r3,r2
   15958:	e0bff615 	stw	r2,-40(fp)
   1595c:	00000406 	br	15970 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   15960:	00c20004 	movi	r3,2048
   15964:	e0bff817 	ldw	r2,-32(fp)
   15968:	1885c83a 	sub	r2,r3,r2
   1596c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   15970:	e0bff617 	ldw	r2,-40(fp)
   15974:	10001e26 	beq	r2,zero,159f0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   15978:	e0fffe17 	ldw	r3,-8(fp)
   1597c:	e0bff617 	ldw	r2,-40(fp)
   15980:	1880022e 	bgeu	r3,r2,1598c <altera_avalon_jtag_uart_read+0x90>
        n = space;
   15984:	e0bffe17 	ldw	r2,-8(fp)
   15988:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   1598c:	e0bff817 	ldw	r2,-32(fp)
   15990:	10800e04 	addi	r2,r2,56
   15994:	e0fffc17 	ldw	r3,-16(fp)
   15998:	1885883a 	add	r2,r3,r2
   1599c:	e13ff517 	ldw	r4,-44(fp)
   159a0:	100b883a 	mov	r5,r2
   159a4:	e1bff617 	ldw	r6,-40(fp)
   159a8:	001371c0 	call	1371c <memcpy>
      ptr   += n;
   159ac:	e0fff517 	ldw	r3,-44(fp)
   159b0:	e0bff617 	ldw	r2,-40(fp)
   159b4:	1885883a 	add	r2,r3,r2
   159b8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   159bc:	e0fffe17 	ldw	r3,-8(fp)
   159c0:	e0bff617 	ldw	r2,-40(fp)
   159c4:	1885c83a 	sub	r2,r3,r2
   159c8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   159cc:	e0fff817 	ldw	r3,-32(fp)
   159d0:	e0bff617 	ldw	r2,-40(fp)
   159d4:	1885883a 	add	r2,r3,r2
   159d8:	10c1ffcc 	andi	r3,r2,2047
   159dc:	e0bffc17 	ldw	r2,-16(fp)
   159e0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   159e4:	e0bffe17 	ldw	r2,-8(fp)
   159e8:	00bfcf16 	blt	zero,r2,15928 <altera_avalon_jtag_uart_read+0x2c>
   159ec:	00000106 	br	159f4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   159f0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   159f4:	e0fff517 	ldw	r3,-44(fp)
   159f8:	e0bffd17 	ldw	r2,-12(fp)
   159fc:	1880141e 	bne	r3,r2,15a50 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   15a00:	e0bfff17 	ldw	r2,-4(fp)
   15a04:	1090000c 	andi	r2,r2,16384
   15a08:	1000131e 	bne	r2,zero,15a58 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   15a0c:	0001883a 	nop
   15a10:	e0bffc17 	ldw	r2,-16(fp)
   15a14:	10c00a17 	ldw	r3,40(r2)
   15a18:	e0bff717 	ldw	r2,-36(fp)
   15a1c:	1880051e 	bne	r3,r2,15a34 <altera_avalon_jtag_uart_read+0x138>
   15a20:	e0bffc17 	ldw	r2,-16(fp)
   15a24:	10c00917 	ldw	r3,36(r2)
   15a28:	e0bffc17 	ldw	r2,-16(fp)
   15a2c:	10800117 	ldw	r2,4(r2)
   15a30:	18bff736 	bltu	r3,r2,15a10 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   15a34:	e0bffc17 	ldw	r2,-16(fp)
   15a38:	10c00a17 	ldw	r3,40(r2)
   15a3c:	e0bff717 	ldw	r2,-36(fp)
   15a40:	18800726 	beq	r3,r2,15a60 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   15a44:	e0bffe17 	ldw	r2,-8(fp)
   15a48:	00bfb716 	blt	zero,r2,15928 <altera_avalon_jtag_uart_read+0x2c>
   15a4c:	00000506 	br	15a64 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   15a50:	0001883a 	nop
   15a54:	00000306 	br	15a64 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   15a58:	0001883a 	nop
   15a5c:	00000106 	br	15a64 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   15a60:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   15a64:	e0fff517 	ldw	r3,-44(fp)
   15a68:	e0bffd17 	ldw	r2,-12(fp)
   15a6c:	18801726 	beq	r3,r2,15acc <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15a70:	0005303a 	rdctl	r2,status
   15a74:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15a78:	e0fffa17 	ldw	r3,-24(fp)
   15a7c:	00bfff84 	movi	r2,-2
   15a80:	1884703a 	and	r2,r3,r2
   15a84:	1001703a 	wrctl	status,r2
  
  return context;
   15a88:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   15a8c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   15a90:	e0bffc17 	ldw	r2,-16(fp)
   15a94:	10800817 	ldw	r2,32(r2)
   15a98:	10c00054 	ori	r3,r2,1
   15a9c:	e0bffc17 	ldw	r2,-16(fp)
   15aa0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   15aa4:	e0bffc17 	ldw	r2,-16(fp)
   15aa8:	10800017 	ldw	r2,0(r2)
   15aac:	10800104 	addi	r2,r2,4
   15ab0:	e0fffc17 	ldw	r3,-16(fp)
   15ab4:	18c00817 	ldw	r3,32(r3)
   15ab8:	10c00035 	stwio	r3,0(r2)
   15abc:	e0bff917 	ldw	r2,-28(fp)
   15ac0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15ac4:	e0bffb17 	ldw	r2,-20(fp)
   15ac8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   15acc:	e0fff517 	ldw	r3,-44(fp)
   15ad0:	e0bffd17 	ldw	r2,-12(fp)
   15ad4:	18800426 	beq	r3,r2,15ae8 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
   15ad8:	e0fff517 	ldw	r3,-44(fp)
   15adc:	e0bffd17 	ldw	r2,-12(fp)
   15ae0:	1885c83a 	sub	r2,r3,r2
   15ae4:	00000606 	br	15b00 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
   15ae8:	e0bfff17 	ldw	r2,-4(fp)
   15aec:	1090000c 	andi	r2,r2,16384
   15af0:	10000226 	beq	r2,zero,15afc <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
   15af4:	00bffd44 	movi	r2,-11
   15af8:	00000106 	br	15b00 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
   15afc:	00bffec4 	movi	r2,-5
}
   15b00:	e037883a 	mov	sp,fp
   15b04:	dfc00117 	ldw	ra,4(sp)
   15b08:	df000017 	ldw	fp,0(sp)
   15b0c:	dec00204 	addi	sp,sp,8
   15b10:	f800283a 	ret

00015b14 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   15b14:	defff304 	addi	sp,sp,-52
   15b18:	dfc00c15 	stw	ra,48(sp)
   15b1c:	df000b15 	stw	fp,44(sp)
   15b20:	df000b04 	addi	fp,sp,44
   15b24:	e13ffc15 	stw	r4,-16(fp)
   15b28:	e17ffd15 	stw	r5,-12(fp)
   15b2c:	e1bffe15 	stw	r6,-8(fp)
   15b30:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   15b34:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   15b38:	e0bffd17 	ldw	r2,-12(fp)
   15b3c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   15b40:	00003706 	br	15c20 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   15b44:	e0bffc17 	ldw	r2,-16(fp)
   15b48:	10800c17 	ldw	r2,48(r2)
   15b4c:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   15b50:	e0bffc17 	ldw	r2,-16(fp)
   15b54:	10800d17 	ldw	r2,52(r2)
   15b58:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   15b5c:	e0fff817 	ldw	r3,-32(fp)
   15b60:	e0bff517 	ldw	r2,-44(fp)
   15b64:	1880062e 	bgeu	r3,r2,15b80 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   15b68:	e0fff517 	ldw	r3,-44(fp)
   15b6c:	e0bff817 	ldw	r2,-32(fp)
   15b70:	1885c83a 	sub	r2,r3,r2
   15b74:	10bfffc4 	addi	r2,r2,-1
   15b78:	e0bff615 	stw	r2,-40(fp)
   15b7c:	00000b06 	br	15bac <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   15b80:	e0bff517 	ldw	r2,-44(fp)
   15b84:	10000526 	beq	r2,zero,15b9c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   15b88:	00c20004 	movi	r3,2048
   15b8c:	e0bff817 	ldw	r2,-32(fp)
   15b90:	1885c83a 	sub	r2,r3,r2
   15b94:	e0bff615 	stw	r2,-40(fp)
   15b98:	00000406 	br	15bac <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   15b9c:	00c1ffc4 	movi	r3,2047
   15ba0:	e0bff817 	ldw	r2,-32(fp)
   15ba4:	1885c83a 	sub	r2,r3,r2
   15ba8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   15bac:	e0bff617 	ldw	r2,-40(fp)
   15bb0:	10001e26 	beq	r2,zero,15c2c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   15bb4:	e0fffe17 	ldw	r3,-8(fp)
   15bb8:	e0bff617 	ldw	r2,-40(fp)
   15bbc:	1880022e 	bgeu	r3,r2,15bc8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   15bc0:	e0bffe17 	ldw	r2,-8(fp)
   15bc4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   15bc8:	e0bff817 	ldw	r2,-32(fp)
   15bcc:	10820e04 	addi	r2,r2,2104
   15bd0:	e0fffc17 	ldw	r3,-16(fp)
   15bd4:	1885883a 	add	r2,r3,r2
   15bd8:	1009883a 	mov	r4,r2
   15bdc:	e17ffd17 	ldw	r5,-12(fp)
   15be0:	e1bff617 	ldw	r6,-40(fp)
   15be4:	001371c0 	call	1371c <memcpy>
      ptr   += n;
   15be8:	e0fffd17 	ldw	r3,-12(fp)
   15bec:	e0bff617 	ldw	r2,-40(fp)
   15bf0:	1885883a 	add	r2,r3,r2
   15bf4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   15bf8:	e0fffe17 	ldw	r3,-8(fp)
   15bfc:	e0bff617 	ldw	r2,-40(fp)
   15c00:	1885c83a 	sub	r2,r3,r2
   15c04:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   15c08:	e0fff817 	ldw	r3,-32(fp)
   15c0c:	e0bff617 	ldw	r2,-40(fp)
   15c10:	1885883a 	add	r2,r3,r2
   15c14:	10c1ffcc 	andi	r3,r2,2047
   15c18:	e0bffc17 	ldw	r2,-16(fp)
   15c1c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   15c20:	e0bffe17 	ldw	r2,-8(fp)
   15c24:	00bfc716 	blt	zero,r2,15b44 <altera_avalon_jtag_uart_write+0x30>
   15c28:	00000106 	br	15c30 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   15c2c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15c30:	0005303a 	rdctl	r2,status
   15c34:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15c38:	e0fffa17 	ldw	r3,-24(fp)
   15c3c:	00bfff84 	movi	r2,-2
   15c40:	1884703a 	and	r2,r3,r2
   15c44:	1001703a 	wrctl	status,r2
  
  return context;
   15c48:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   15c4c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   15c50:	e0bffc17 	ldw	r2,-16(fp)
   15c54:	10800817 	ldw	r2,32(r2)
   15c58:	10c00094 	ori	r3,r2,2
   15c5c:	e0bffc17 	ldw	r2,-16(fp)
   15c60:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   15c64:	e0bffc17 	ldw	r2,-16(fp)
   15c68:	10800017 	ldw	r2,0(r2)
   15c6c:	10800104 	addi	r2,r2,4
   15c70:	e0fffc17 	ldw	r3,-16(fp)
   15c74:	18c00817 	ldw	r3,32(r3)
   15c78:	10c00035 	stwio	r3,0(r2)
   15c7c:	e0bff917 	ldw	r2,-28(fp)
   15c80:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15c84:	e0bffb17 	ldw	r2,-20(fp)
   15c88:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   15c8c:	e0bffe17 	ldw	r2,-8(fp)
   15c90:	0080110e 	bge	zero,r2,15cd8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   15c94:	e0bfff17 	ldw	r2,-4(fp)
   15c98:	1090000c 	andi	r2,r2,16384
   15c9c:	1000111e 	bne	r2,zero,15ce4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   15ca0:	0001883a 	nop
   15ca4:	e0bffc17 	ldw	r2,-16(fp)
   15ca8:	10c00d17 	ldw	r3,52(r2)
   15cac:	e0bff517 	ldw	r2,-44(fp)
   15cb0:	1880051e 	bne	r3,r2,15cc8 <altera_avalon_jtag_uart_write+0x1b4>
   15cb4:	e0bffc17 	ldw	r2,-16(fp)
   15cb8:	10c00917 	ldw	r3,36(r2)
   15cbc:	e0bffc17 	ldw	r2,-16(fp)
   15cc0:	10800117 	ldw	r2,4(r2)
   15cc4:	18bff736 	bltu	r3,r2,15ca4 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   15cc8:	e0bffc17 	ldw	r2,-16(fp)
   15ccc:	10c00d17 	ldw	r3,52(r2)
   15cd0:	e0bff517 	ldw	r2,-44(fp)
   15cd4:	18800526 	beq	r3,r2,15cec <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   15cd8:	e0bffe17 	ldw	r2,-8(fp)
   15cdc:	00bfd016 	blt	zero,r2,15c20 <altera_avalon_jtag_uart_write+0x10c>
   15ce0:	00000306 	br	15cf0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   15ce4:	0001883a 	nop
   15ce8:	00000106 	br	15cf0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
   15cec:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   15cf0:	e0fffd17 	ldw	r3,-12(fp)
   15cf4:	e0bff717 	ldw	r2,-36(fp)
   15cf8:	18800426 	beq	r3,r2,15d0c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   15cfc:	e0fffd17 	ldw	r3,-12(fp)
   15d00:	e0bff717 	ldw	r2,-36(fp)
   15d04:	1885c83a 	sub	r2,r3,r2
   15d08:	00000606 	br	15d24 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   15d0c:	e0bfff17 	ldw	r2,-4(fp)
   15d10:	1090000c 	andi	r2,r2,16384
   15d14:	10000226 	beq	r2,zero,15d20 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   15d18:	00bffd44 	movi	r2,-11
   15d1c:	00000106 	br	15d24 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   15d20:	00bffec4 	movi	r2,-5
}
   15d24:	e037883a 	mov	sp,fp
   15d28:	dfc00117 	ldw	ra,4(sp)
   15d2c:	df000017 	ldw	fp,0(sp)
   15d30:	dec00204 	addi	sp,sp,8
   15d34:	f800283a 	ret

00015d38 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   15d38:	defffa04 	addi	sp,sp,-24
   15d3c:	dfc00515 	stw	ra,20(sp)
   15d40:	df000415 	stw	fp,16(sp)
   15d44:	df000404 	addi	fp,sp,16
   15d48:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   15d4c:	0007883a 	mov	r3,zero
   15d50:	e0bfff17 	ldw	r2,-4(fp)
   15d54:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   15d58:	e0bfff17 	ldw	r2,-4(fp)
   15d5c:	10800104 	addi	r2,r2,4
   15d60:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15d64:	0005303a 	rdctl	r2,status
   15d68:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15d6c:	e0fffd17 	ldw	r3,-12(fp)
   15d70:	00bfff84 	movi	r2,-2
   15d74:	1884703a 	and	r2,r3,r2
   15d78:	1001703a 	wrctl	status,r2
  
  return context;
   15d7c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   15d80:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   15d84:	0016f300 	call	16f30 <alt_tick>
   15d88:	e0bffc17 	ldw	r2,-16(fp)
   15d8c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15d90:	e0bffe17 	ldw	r2,-8(fp)
   15d94:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   15d98:	e037883a 	mov	sp,fp
   15d9c:	dfc00117 	ldw	ra,4(sp)
   15da0:	df000017 	ldw	fp,0(sp)
   15da4:	dec00204 	addi	sp,sp,8
   15da8:	f800283a 	ret

00015dac <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   15dac:	defff804 	addi	sp,sp,-32
   15db0:	dfc00715 	stw	ra,28(sp)
   15db4:	df000615 	stw	fp,24(sp)
   15db8:	df000604 	addi	fp,sp,24
   15dbc:	e13ffc15 	stw	r4,-16(fp)
   15dc0:	e17ffd15 	stw	r5,-12(fp)
   15dc4:	e1bffe15 	stw	r6,-8(fp)
   15dc8:	e1ffff15 	stw	r7,-4(fp)
   15dcc:	e0bfff17 	ldw	r2,-4(fp)
   15dd0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   15dd4:	008000b4 	movhi	r2,2
   15dd8:	10aa0904 	addi	r2,r2,-22492
   15ddc:	10800017 	ldw	r2,0(r2)
   15de0:	1000041e 	bne	r2,zero,15df4 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   15de4:	008000b4 	movhi	r2,2
   15de8:	10aa0904 	addi	r2,r2,-22492
   15dec:	e0fffb17 	ldw	r3,-20(fp)
   15df0:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   15df4:	e0bffc17 	ldw	r2,-16(fp)
   15df8:	10800104 	addi	r2,r2,4
   15dfc:	00c001c4 	movi	r3,7
   15e00:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   15e04:	d8000015 	stw	zero,0(sp)
   15e08:	e13ffd17 	ldw	r4,-12(fp)
   15e0c:	e17ffe17 	ldw	r5,-8(fp)
   15e10:	01800074 	movhi	r6,1
   15e14:	31974e04 	addi	r6,r6,23864
   15e18:	e1fffc17 	ldw	r7,-16(fp)
   15e1c:	0016a780 	call	16a78 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   15e20:	e037883a 	mov	sp,fp
   15e24:	dfc00117 	ldw	ra,4(sp)
   15e28:	df000017 	ldw	fp,0(sp)
   15e2c:	dec00204 	addi	sp,sp,8
   15e30:	f800283a 	ret

00015e34 <alt_hostfs_open>:
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
   15e34:	deffeb04 	addi	sp,sp,-84
   15e38:	df001415 	stw	fp,80(sp)
   15e3c:	dc401315 	stw	r17,76(sp)
   15e40:	dc001215 	stw	r16,72(sp)
   15e44:	df001204 	addi	fp,sp,72
   15e48:	e13ffb15 	stw	r4,-20(fp)
   15e4c:	e17ffc15 	stw	r5,-16(fp)
   15e50:	e1bffd15 	stw	r6,-12(fp)
   15e54:	e1fffe15 	stw	r7,-8(fp)
  static const struct HOSTCALL_INFO hcinfo = { 0x0103, "open" };

  alt_hostfs_dev* dev= (alt_hostfs_dev*)fd->dev;
   15e58:	e0bffb17 	ldw	r2,-20(fp)
   15e5c:	10800017 	ldw	r2,0(r2)
   15e60:	e0bfee15 	stw	r2,-72(fp)
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
   15e64:	e0bfee17 	ldw	r2,-72(fp)
   15e68:	10800217 	ldw	r2,8(r2)
   15e6c:	e0bff715 	stw	r2,-36(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
   15e70:	e0bff717 	ldw	r2,-36(fp)
   15e74:	10bfffc4 	addi	r2,r2,-1
   15e78:	e0bff815 	stw	r2,-32(fp)

  while (*++ptr != 0)
   15e7c:	e0bff817 	ldw	r2,-32(fp)
   15e80:	10800044 	addi	r2,r2,1
   15e84:	e0bff815 	stw	r2,-32(fp)
   15e88:	e0bff817 	ldw	r2,-32(fp)
   15e8c:	10800003 	ldbu	r2,0(r2)
   15e90:	10803fcc 	andi	r2,r2,255
   15e94:	1080201c 	xori	r2,r2,128
   15e98:	10bfe004 	addi	r2,r2,-128
   15e9c:	103ff71e 	bne	r2,zero,15e7c <alt_hostfs_open+0x48>
    ;

  return ptr - string;
   15ea0:	e0fff817 	ldw	r3,-32(fp)
   15ea4:	e0bff717 	ldw	r2,-36(fp)
   15ea8:	1885c83a 	sub	r2,r3,r2
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
   15eac:	10800044 	addi	r2,r2,1
   15eb0:	e0fffc17 	ldw	r3,-16(fp)
   15eb4:	1885883a 	add	r2,r3,r2
   15eb8:	e0bffc15 	stw	r2,-16(fp)

  r3 = (int)&hcinfo;
   15ebc:	d0a01a04 	addi	r2,gp,-32664
   15ec0:	e0bfef15 	stw	r2,-68(fp)
  r4 = (int)name;
   15ec4:	e0bffc17 	ldw	r2,-16(fp)
   15ec8:	e0bff015 	stw	r2,-64(fp)
  r5 = flags;
   15ecc:	e0bffd17 	ldw	r2,-12(fp)
   15ed0:	e0bff115 	stw	r2,-60(fp)
  r6 = mode;
   15ed4:	e0bffe17 	ldw	r2,-8(fp)
   15ed8:	e0bff215 	stw	r2,-56(fp)
   15edc:	e0bffc17 	ldw	r2,-16(fp)
   15ee0:	e0bff915 	stw	r2,-28(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
   15ee4:	e0bff917 	ldw	r2,-28(fp)
   15ee8:	10bfffc4 	addi	r2,r2,-1
   15eec:	e0bffa15 	stw	r2,-24(fp)

  while (*++ptr != 0)
   15ef0:	e0bffa17 	ldw	r2,-24(fp)
   15ef4:	10800044 	addi	r2,r2,1
   15ef8:	e0bffa15 	stw	r2,-24(fp)
   15efc:	e0bffa17 	ldw	r2,-24(fp)
   15f00:	10800003 	ldbu	r2,0(r2)
   15f04:	10803fcc 	andi	r2,r2,255
   15f08:	1080201c 	xori	r2,r2,128
   15f0c:	10bfe004 	addi	r2,r2,-128
   15f10:	103ff71e 	bne	r2,zero,15ef0 <alt_hostfs_open+0xbc>
    ;

  return ptr - string;
   15f14:	e0fffa17 	ldw	r3,-24(fp)
   15f18:	e0bff917 	ldw	r2,-28(fp)
   15f1c:	1885c83a 	sub	r2,r3,r2

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
   15f20:	e0bff315 	stw	r2,-52(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6), "D07" (r7) : "memory" );
   15f24:	e13ff017 	ldw	r4,-64(fp)
   15f28:	e13fff15 	stw	r4,-4(fp)
   15f2c:	e17ff117 	ldw	r5,-60(fp)
   15f30:	e1bff217 	ldw	r6,-56(fp)
   15f34:	e1fff317 	ldw	r7,-52(fp)
   15f38:	e0ffef17 	ldw	r3,-68(fp)
   15f3c:	1821883a 	mov	r16,r3
   15f40:	8007883a 	mov	r3,r16
   15f44:	e13fff17 	ldw	r4,-4(fp)
   15f48:	003da07a 	break	1
   15f4c:	1821883a 	mov	r16,r3
   15f50:	1023883a 	mov	r17,r2
   15f54:	e47ff415 	stw	r17,-48(fp)
   15f58:	e43fef15 	stw	r16,-68(fp)

  handle = (void *)r2;
   15f5c:	e0bff417 	ldw	r2,-48(fp)
   15f60:	e0bff515 	stw	r2,-44(fp)
  error = r3;
   15f64:	e0bfef17 	ldw	r2,-68(fp)
   15f68:	e0bff615 	stw	r2,-40(fp)

  if (error == 0)
   15f6c:	e0bff617 	ldw	r2,-40(fp)
   15f70:	1000031e 	bne	r2,zero,15f80 <alt_hostfs_open+0x14c>
    fd->priv = handle;
   15f74:	e0bffb17 	ldw	r2,-20(fp)
   15f78:	e0fff517 	ldw	r3,-44(fp)
   15f7c:	10c00115 	stw	r3,4(r2)

  return -error;
   15f80:	e0bff617 	ldw	r2,-40(fp)
   15f84:	0085c83a 	sub	r2,zero,r2
}
   15f88:	e037883a 	mov	sp,fp
   15f8c:	df000217 	ldw	fp,8(sp)
   15f90:	dc400117 	ldw	r17,4(sp)
   15f94:	dc000017 	ldw	r16,0(sp)
   15f98:	dec00304 	addi	sp,sp,12
   15f9c:	f800283a 	ret

00015fa0 <alt_hostfs_close>:
* alt_hostfs_close
*
* Read the file
*/
int alt_hostfs_close(alt_fd* fd)
{
   15fa0:	defffa04 	addi	sp,sp,-24
   15fa4:	df000515 	stw	fp,20(sp)
   15fa8:	dc000415 	stw	r16,16(sp)
   15fac:	df000404 	addi	fp,sp,16
   15fb0:	e13fff15 	stw	r4,-4(fp)
  int error;

  /* Input and output parameters for the hostcall */
  int r3, r4;

  r3 = (int)&hcinfo;
   15fb4:	d0a01704 	addi	r2,gp,-32676
   15fb8:	e0bffc15 	stw	r2,-16(fp)
  r4 = (int)fd->priv;
   15fbc:	e0bfff17 	ldw	r2,-4(fp)
   15fc0:	10800117 	ldw	r2,4(r2)
   15fc4:	e0bffd15 	stw	r2,-12(fp)

  __asm__ volatile("break 1" : "+D03" (r3) : "D04" (r4) );
   15fc8:	e0bffd17 	ldw	r2,-12(fp)
   15fcc:	e0fffc17 	ldw	r3,-16(fp)
   15fd0:	1821883a 	mov	r16,r3
   15fd4:	8007883a 	mov	r3,r16
   15fd8:	1009883a 	mov	r4,r2
   15fdc:	003da07a 	break	1
   15fe0:	1821883a 	mov	r16,r3
   15fe4:	e43ffc15 	stw	r16,-16(fp)

  error = r3;
   15fe8:	e0bffc17 	ldw	r2,-16(fp)
   15fec:	e0bffe15 	stw	r2,-8(fp)

  return -error;
   15ff0:	e0bffe17 	ldw	r2,-8(fp)
   15ff4:	0085c83a 	sub	r2,zero,r2
}
   15ff8:	e037883a 	mov	sp,fp
   15ffc:	df000117 	ldw	fp,4(sp)
   16000:	dc000017 	ldw	r16,0(sp)
   16004:	dec00204 	addi	sp,sp,8
   16008:	f800283a 	ret

0001600c <alt_hostfs_read>:
* alt_hostfs_read
*
* Read the file
*/
int alt_hostfs_read(alt_fd* fd, char * ptr, int len)
{
   1600c:	defff204 	addi	sp,sp,-56
   16010:	df000d15 	stw	fp,52(sp)
   16014:	dc400c15 	stw	r17,48(sp)
   16018:	dc000b15 	stw	r16,44(sp)
   1601c:	df000b04 	addi	fp,sp,44
   16020:	e13ffc15 	stw	r4,-16(fp)
   16024:	e17ffd15 	stw	r5,-12(fp)
   16028:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
   1602c:	d0a01404 	addi	r2,gp,-32688
   16030:	e0bff515 	stw	r2,-44(fp)
  r4 = (int)fd->priv;
   16034:	e0bffc17 	ldw	r2,-16(fp)
   16038:	10800117 	ldw	r2,4(r2)
   1603c:	e0bff615 	stw	r2,-40(fp)
  r5 = (int)ptr;
   16040:	e0bffd17 	ldw	r2,-12(fp)
   16044:	e0bff715 	stw	r2,-36(fp)
  r6 = len;
   16048:	e0bffe17 	ldw	r2,-8(fp)
   1604c:	e0bff815 	stw	r2,-32(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
   16050:	e13ff617 	ldw	r4,-40(fp)
   16054:	e13fff15 	stw	r4,-4(fp)
   16058:	e17ff717 	ldw	r5,-36(fp)
   1605c:	e1bff817 	ldw	r6,-32(fp)
   16060:	e0fff517 	ldw	r3,-44(fp)
   16064:	1821883a 	mov	r16,r3
   16068:	8007883a 	mov	r3,r16
   1606c:	e13fff17 	ldw	r4,-4(fp)
   16070:	003da07a 	break	1
   16074:	1821883a 	mov	r16,r3
   16078:	1023883a 	mov	r17,r2
   1607c:	e47ff915 	stw	r17,-28(fp)
   16080:	e43ff515 	stw	r16,-44(fp)

  rc = r2;
   16084:	e0bff917 	ldw	r2,-28(fp)
   16088:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
   1608c:	e0bff517 	ldw	r2,-44(fp)
   16090:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
   16094:	e0bffb17 	ldw	r2,-20(fp)
   16098:	10000326 	beq	r2,zero,160a8 <alt_hostfs_read+0x9c>
   1609c:	e0bffb17 	ldw	r2,-20(fp)
   160a0:	0085c83a 	sub	r2,zero,r2
   160a4:	00000106 	br	160ac <alt_hostfs_read+0xa0>
   160a8:	e0bffa17 	ldw	r2,-24(fp)
}
   160ac:	e037883a 	mov	sp,fp
   160b0:	df000217 	ldw	fp,8(sp)
   160b4:	dc400117 	ldw	r17,4(sp)
   160b8:	dc000017 	ldw	r16,0(sp)
   160bc:	dec00304 	addi	sp,sp,12
   160c0:	f800283a 	ret

000160c4 <alt_hostfs_write>:
* alt_hostfs_write
*
* Read the file
*/
int alt_hostfs_write(alt_fd* fd, const char * ptr, int len)
{
   160c4:	defff204 	addi	sp,sp,-56
   160c8:	df000d15 	stw	fp,52(sp)
   160cc:	dc400c15 	stw	r17,48(sp)
   160d0:	dc000b15 	stw	r16,44(sp)
   160d4:	df000b04 	addi	fp,sp,44
   160d8:	e13ffc15 	stw	r4,-16(fp)
   160dc:	e17ffd15 	stw	r5,-12(fp)
   160e0:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
   160e4:	d0a01104 	addi	r2,gp,-32700
   160e8:	e0bff515 	stw	r2,-44(fp)
  r4 = (int)fd->priv;
   160ec:	e0bffc17 	ldw	r2,-16(fp)
   160f0:	10800117 	ldw	r2,4(r2)
   160f4:	e0bff615 	stw	r2,-40(fp)
  r5 = (int)ptr;
   160f8:	e0bffd17 	ldw	r2,-12(fp)
   160fc:	e0bff715 	stw	r2,-36(fp)
  r6 = len;
   16100:	e0bffe17 	ldw	r2,-8(fp)
   16104:	e0bff815 	stw	r2,-32(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
   16108:	e13ff617 	ldw	r4,-40(fp)
   1610c:	e13fff15 	stw	r4,-4(fp)
   16110:	e17ff717 	ldw	r5,-36(fp)
   16114:	e1bff817 	ldw	r6,-32(fp)
   16118:	e0fff517 	ldw	r3,-44(fp)
   1611c:	1821883a 	mov	r16,r3
   16120:	8007883a 	mov	r3,r16
   16124:	e13fff17 	ldw	r4,-4(fp)
   16128:	003da07a 	break	1
   1612c:	1821883a 	mov	r16,r3
   16130:	1023883a 	mov	r17,r2
   16134:	e47ff915 	stw	r17,-28(fp)
   16138:	e43ff515 	stw	r16,-44(fp)

  rc = r2;
   1613c:	e0bff917 	ldw	r2,-28(fp)
   16140:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
   16144:	e0bff517 	ldw	r2,-44(fp)
   16148:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
   1614c:	e0bffb17 	ldw	r2,-20(fp)
   16150:	10000326 	beq	r2,zero,16160 <alt_hostfs_write+0x9c>
   16154:	e0bffb17 	ldw	r2,-20(fp)
   16158:	0085c83a 	sub	r2,zero,r2
   1615c:	00000106 	br	16164 <alt_hostfs_write+0xa0>
   16160:	e0bffa17 	ldw	r2,-24(fp)
}
   16164:	e037883a 	mov	sp,fp
   16168:	df000217 	ldw	fp,8(sp)
   1616c:	dc400117 	ldw	r17,4(sp)
   16170:	dc000017 	ldw	r16,0(sp)
   16174:	dec00304 	addi	sp,sp,12
   16178:	f800283a 	ret

0001617c <alt_hostfs_seek>:
* Move around within a file
*
* returns -errno for an error or the offset within the file
*/
int alt_hostfs_seek(alt_fd* fd, int ptr, int dir)
{
   1617c:	defff204 	addi	sp,sp,-56
   16180:	df000d15 	stw	fp,52(sp)
   16184:	dc400c15 	stw	r17,48(sp)
   16188:	dc000b15 	stw	r16,44(sp)
   1618c:	df000b04 	addi	fp,sp,44
   16190:	e13ffc15 	stw	r4,-16(fp)
   16194:	e17ffd15 	stw	r5,-12(fp)
   16198:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
   1619c:	d0a00e04 	addi	r2,gp,-32712
   161a0:	e0bff515 	stw	r2,-44(fp)
  r4 = (int)fd->priv;
   161a4:	e0bffc17 	ldw	r2,-16(fp)
   161a8:	10800117 	ldw	r2,4(r2)
   161ac:	e0bff615 	stw	r2,-40(fp)
  r5 = ptr;
   161b0:	e0bffd17 	ldw	r2,-12(fp)
   161b4:	e0bff715 	stw	r2,-36(fp)
  r6 = dir;
   161b8:	e0bffe17 	ldw	r2,-8(fp)
   161bc:	e0bff815 	stw	r2,-32(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
   161c0:	e13ff617 	ldw	r4,-40(fp)
   161c4:	e13fff15 	stw	r4,-4(fp)
   161c8:	e17ff717 	ldw	r5,-36(fp)
   161cc:	e1bff817 	ldw	r6,-32(fp)
   161d0:	e0fff517 	ldw	r3,-44(fp)
   161d4:	1821883a 	mov	r16,r3
   161d8:	8007883a 	mov	r3,r16
   161dc:	e13fff17 	ldw	r4,-4(fp)
   161e0:	003da07a 	break	1
   161e4:	1821883a 	mov	r16,r3
   161e8:	1023883a 	mov	r17,r2
   161ec:	e47ff915 	stw	r17,-28(fp)
   161f0:	e43ff515 	stw	r16,-44(fp)

  rc = r2;
   161f4:	e0bff917 	ldw	r2,-28(fp)
   161f8:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
   161fc:	e0bff517 	ldw	r2,-44(fp)
   16200:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
   16204:	e0bffb17 	ldw	r2,-20(fp)
   16208:	10000326 	beq	r2,zero,16218 <alt_hostfs_seek+0x9c>
   1620c:	e0bffb17 	ldw	r2,-20(fp)
   16210:	0085c83a 	sub	r2,zero,r2
   16214:	00000106 	br	1621c <alt_hostfs_seek+0xa0>
   16218:	e0bffa17 	ldw	r2,-24(fp)
}
   1621c:	e037883a 	mov	sp,fp
   16220:	df000217 	ldw	fp,8(sp)
   16224:	dc400117 	ldw	r17,4(sp)
   16228:	dc000017 	ldw	r16,0(sp)
   1622c:	dec00304 	addi	sp,sp,12
   16230:	f800283a 	ret

00016234 <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
   16234:	deffe204 	addi	sp,sp,-120
   16238:	df001d15 	stw	fp,116(sp)
   1623c:	dc401c15 	stw	r17,112(sp)
   16240:	dc001b15 	stw	r16,108(sp)
   16244:	df001b04 	addi	fp,sp,108
   16248:	e13ffd15 	stw	r4,-12(fp)
   1624c:	e17ffe15 	stw	r5,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5;

  r3 = (int)&hcinfo;
   16250:	d0a00b04 	addi	r2,gp,-32724
   16254:	e0bfe615 	stw	r2,-104(fp)
  r4 = (int)fd->priv;
   16258:	e0bffd17 	ldw	r2,-12(fp)
   1625c:	10800117 	ldw	r2,4(r2)
   16260:	e0bfe715 	stw	r2,-100(fp)
  r5 = (int)&hoststat;
   16264:	e0bfed04 	addi	r2,fp,-76
   16268:	e0bfe815 	stw	r2,-96(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5) : "memory" );
   1626c:	e13fe717 	ldw	r4,-100(fp)
   16270:	e13fff15 	stw	r4,-4(fp)
   16274:	e17fe817 	ldw	r5,-96(fp)
   16278:	e0ffe617 	ldw	r3,-104(fp)
   1627c:	1821883a 	mov	r16,r3
   16280:	8007883a 	mov	r3,r16
   16284:	e13fff17 	ldw	r4,-4(fp)
   16288:	003da07a 	break	1
   1628c:	1821883a 	mov	r16,r3
   16290:	1023883a 	mov	r17,r2
   16294:	e47fe915 	stw	r17,-92(fp)
   16298:	e43fe615 	stw	r16,-104(fp)

  rc = r2;
   1629c:	e0bfe917 	ldw	r2,-92(fp)
   162a0:	e0bfea15 	stw	r2,-88(fp)
  error = r3;
   162a4:	e0bfe617 	ldw	r2,-104(fp)
   162a8:	e0bfeb15 	stw	r2,-84(fp)

  if (error == 0)
   162ac:	e0bfeb17 	ldw	r2,-84(fp)
   162b0:	1000621e 	bne	r2,zero,1643c <alt_hostfs_fstat+0x208>
     * no change is required.  On a little-endian processor we need to swap
     * the bytes in each word.
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
   162b4:	e0bfed04 	addi	r2,fp,-76
   162b8:	e0bfe515 	stw	r2,-108(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
   162bc:	e0bfe517 	ldw	r2,-108(fp)
   162c0:	10801004 	addi	r2,r2,64
   162c4:	e0bfec15 	stw	r2,-80(fp)
    for ( ; ptr < end ; ptr++)
   162c8:	00001606 	br	16324 <alt_hostfs_fstat+0xf0>
      *ptr = ((*ptr & 0xFF000000) >> 24) |
   162cc:	e0bfe517 	ldw	r2,-108(fp)
   162d0:	10800017 	ldw	r2,0(r2)
   162d4:	1006d63a 	srli	r3,r2,24
             ((*ptr & 0x00FF0000) >> 8)  |
   162d8:	e0bfe517 	ldw	r2,-108(fp)
   162dc:	10800017 	ldw	r2,0(r2)
   162e0:	10803fec 	andhi	r2,r2,255
   162e4:	1004d23a 	srli	r2,r2,8

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
   162e8:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
   162ec:	e0bfe517 	ldw	r2,-108(fp)
   162f0:	10800017 	ldw	r2,0(r2)
   162f4:	10bfc00c 	andi	r2,r2,65280
   162f8:	1004923a 	slli	r2,r2,8
#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
   162fc:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
   16300:	e0bfe517 	ldw	r2,-108(fp)
   16304:	10800017 	ldw	r2,0(r2)
   16308:	1004963a 	slli	r2,r2,24
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
   1630c:	1886b03a 	or	r3,r3,r2

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
   16310:	e0bfe517 	ldw	r2,-108(fp)
   16314:	10c00015 	stw	r3,0(r2)
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
   16318:	e0bfe517 	ldw	r2,-108(fp)
   1631c:	10800104 	addi	r2,r2,4
   16320:	e0bfe515 	stw	r2,-108(fp)
   16324:	e0ffe517 	ldw	r3,-108(fp)
   16328:	e0bfec17 	ldw	r2,-80(fp)
   1632c:	18bfe736 	bltu	r3,r2,162cc <alt_hostfs_fstat+0x98>
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
   16330:	e0bffe17 	ldw	r2,-8(fp)
   16334:	e0bfe515 	stw	r2,-108(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
   16338:	e0bfe517 	ldw	r2,-108(fp)
   1633c:	10800f04 	addi	r2,r2,60
   16340:	e0bfec15 	stw	r2,-80(fp)
    for ( ; ptr < end ; ptr++)
   16344:	00000506 	br	1635c <alt_hostfs_fstat+0x128>
      *ptr = 0;
   16348:	e0bfe517 	ldw	r2,-108(fp)
   1634c:	10000015 	stw	zero,0(r2)
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
    for ( ; ptr < end ; ptr++)
   16350:	e0bfe517 	ldw	r2,-108(fp)
   16354:	10800104 	addi	r2,r2,4
   16358:	e0bfe515 	stw	r2,-108(fp)
   1635c:	e0ffe517 	ldw	r3,-108(fp)
   16360:	e0bfec17 	ldw	r2,-80(fp)
   16364:	18bff836 	bltu	r3,r2,16348 <alt_hostfs_fstat+0x114>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
   16368:	e0bfed17 	ldw	r2,-76(fp)
   1636c:	1007883a 	mov	r3,r2
   16370:	e0bffe17 	ldw	r2,-8(fp)
   16374:	10c0000d 	sth	r3,0(r2)
    st->st_ino     = hoststat.fst_ino;
   16378:	e0bfee17 	ldw	r2,-72(fp)
   1637c:	1007883a 	mov	r3,r2
   16380:	e0bffe17 	ldw	r2,-8(fp)
   16384:	10c0008d 	sth	r3,2(r2)
    st->st_mode    = hoststat.fst_mode;
   16388:	e0ffef17 	ldw	r3,-68(fp)
   1638c:	e0bffe17 	ldw	r2,-8(fp)
   16390:	10c00115 	stw	r3,4(r2)
    st->st_nlink   = hoststat.fst_nlink;
   16394:	e0bff017 	ldw	r2,-64(fp)
   16398:	1007883a 	mov	r3,r2
   1639c:	e0bffe17 	ldw	r2,-8(fp)
   163a0:	10c0020d 	sth	r3,8(r2)
    st->st_uid     = hoststat.fst_uid;
   163a4:	e0bff117 	ldw	r2,-60(fp)
   163a8:	1007883a 	mov	r3,r2
   163ac:	e0bffe17 	ldw	r2,-8(fp)
   163b0:	10c0028d 	sth	r3,10(r2)
    st->st_gid     = hoststat.fst_gid;
   163b4:	e0bff217 	ldw	r2,-56(fp)
   163b8:	1007883a 	mov	r3,r2
   163bc:	e0bffe17 	ldw	r2,-8(fp)
   163c0:	10c0030d 	sth	r3,12(r2)
    st->st_rdev    = hoststat.fst_rdev;
   163c4:	e0bff317 	ldw	r2,-52(fp)
   163c8:	1007883a 	mov	r3,r2
   163cc:	e0bffe17 	ldw	r2,-8(fp)
   163d0:	10c0038d 	sth	r3,14(r2)
    st->st_size    = hoststat.fst_size[1];
   163d4:	e0bff517 	ldw	r2,-44(fp)
   163d8:	1007883a 	mov	r3,r2
   163dc:	e0bffe17 	ldw	r2,-8(fp)
   163e0:	10c00415 	stw	r3,16(r2)

    st->st_atime   = hoststat.fst_atime;
   163e4:	e0bffa17 	ldw	r2,-24(fp)
   163e8:	1007883a 	mov	r3,r2
   163ec:	e0bffe17 	ldw	r2,-8(fp)
   163f0:	10c00515 	stw	r3,20(r2)
    st->st_mtime   = hoststat.fst_mtime;
   163f4:	e0bffb17 	ldw	r2,-20(fp)
   163f8:	1007883a 	mov	r3,r2
   163fc:	e0bffe17 	ldw	r2,-8(fp)
   16400:	10c00715 	stw	r3,28(r2)
    st->st_ctime   = hoststat.fst_ctime;
   16404:	e0bffc17 	ldw	r2,-16(fp)
   16408:	1007883a 	mov	r3,r2
   1640c:	e0bffe17 	ldw	r2,-8(fp)
   16410:	10c00915 	stw	r3,36(r2)

    st->st_blksize = hoststat.fst_blksize[1];
   16414:	e0bff717 	ldw	r2,-36(fp)
   16418:	1007883a 	mov	r3,r2
   1641c:	e0bffe17 	ldw	r2,-8(fp)
   16420:	10c00b15 	stw	r3,44(r2)
    st->st_blocks  = hoststat.fst_blocks[1];
   16424:	e0bff917 	ldw	r2,-28(fp)
   16428:	1007883a 	mov	r3,r2
   1642c:	e0bffe17 	ldw	r2,-8(fp)
   16430:	10c00c15 	stw	r3,48(r2)

    return rc;
   16434:	e0bfea17 	ldw	r2,-88(fp)
   16438:	00000206 	br	16444 <alt_hostfs_fstat+0x210>
  }
  else
    return -error;
   1643c:	e0bfeb17 	ldw	r2,-84(fp)
   16440:	0085c83a 	sub	r2,zero,r2
}
   16444:	e037883a 	mov	sp,fp
   16448:	df000217 	ldw	fp,8(sp)
   1644c:	dc400117 	ldw	r17,4(sp)
   16450:	dc000017 	ldw	r16,0(sp)
   16454:	dec00304 	addi	sp,sp,12
   16458:	f800283a 	ret

0001645c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   1645c:	defff504 	addi	sp,sp,-44
   16460:	df000a15 	stw	fp,40(sp)
   16464:	df000a04 	addi	fp,sp,40
   16468:	e13ffc15 	stw	r4,-16(fp)
   1646c:	e17ffd15 	stw	r5,-12(fp)
   16470:	e1bffe15 	stw	r6,-8(fp)
   16474:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   16478:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1647c:	008000b4 	movhi	r2,2
   16480:	10aa0904 	addi	r2,r2,-22492
   16484:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   16488:	10003f26 	beq	r2,zero,16588 <alt_alarm_start+0x12c>
  {
    if (alarm)
   1648c:	e0bffc17 	ldw	r2,-16(fp)
   16490:	10003b26 	beq	r2,zero,16580 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   16494:	e0bffc17 	ldw	r2,-16(fp)
   16498:	e0fffe17 	ldw	r3,-8(fp)
   1649c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   164a0:	e0bffc17 	ldw	r2,-16(fp)
   164a4:	e0ffff17 	ldw	r3,-4(fp)
   164a8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   164ac:	0005303a 	rdctl	r2,status
   164b0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   164b4:	e0fff817 	ldw	r3,-32(fp)
   164b8:	00bfff84 	movi	r2,-2
   164bc:	1884703a 	and	r2,r3,r2
   164c0:	1001703a 	wrctl	status,r2
  
  return context;
   164c4:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   164c8:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   164cc:	008000b4 	movhi	r2,2
   164d0:	10aa0a04 	addi	r2,r2,-22488
   164d4:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   164d8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   164dc:	e0fffd17 	ldw	r3,-12(fp)
   164e0:	e0bff617 	ldw	r2,-40(fp)
   164e4:	1885883a 	add	r2,r3,r2
   164e8:	10c00044 	addi	r3,r2,1
   164ec:	e0bffc17 	ldw	r2,-16(fp)
   164f0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   164f4:	e0bffc17 	ldw	r2,-16(fp)
   164f8:	10c00217 	ldw	r3,8(r2)
   164fc:	e0bff617 	ldw	r2,-40(fp)
   16500:	1880042e 	bgeu	r3,r2,16514 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   16504:	e0bffc17 	ldw	r2,-16(fp)
   16508:	00c00044 	movi	r3,1
   1650c:	10c00405 	stb	r3,16(r2)
   16510:	00000206 	br	1651c <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   16514:	e0bffc17 	ldw	r2,-16(fp)
   16518:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   1651c:	e0bffc17 	ldw	r2,-16(fp)
   16520:	00c000b4 	movhi	r3,2
   16524:	18e35104 	addi	r3,r3,-29372
   16528:	e0fff915 	stw	r3,-28(fp)
   1652c:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   16530:	e0bffa17 	ldw	r2,-24(fp)
   16534:	e0fff917 	ldw	r3,-28(fp)
   16538:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1653c:	e0bff917 	ldw	r2,-28(fp)
   16540:	10c00017 	ldw	r3,0(r2)
   16544:	e0bffa17 	ldw	r2,-24(fp)
   16548:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1654c:	e0bff917 	ldw	r2,-28(fp)
   16550:	10800017 	ldw	r2,0(r2)
   16554:	e0fffa17 	ldw	r3,-24(fp)
   16558:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1655c:	e0bff917 	ldw	r2,-28(fp)
   16560:	e0fffa17 	ldw	r3,-24(fp)
   16564:	10c00015 	stw	r3,0(r2)
   16568:	e0bff717 	ldw	r2,-36(fp)
   1656c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16570:	e0bffb17 	ldw	r2,-20(fp)
   16574:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   16578:	0005883a 	mov	r2,zero
   1657c:	00000306 	br	1658c <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   16580:	00bffa84 	movi	r2,-22
   16584:	00000106 	br	1658c <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   16588:	00bfde84 	movi	r2,-134
  }
}
   1658c:	e037883a 	mov	sp,fp
   16590:	df000017 	ldw	fp,0(sp)
   16594:	dec00104 	addi	sp,sp,4
   16598:	f800283a 	ret

0001659c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1659c:	deffff04 	addi	sp,sp,-4
   165a0:	df000015 	stw	fp,0(sp)
   165a4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   165a8:	e037883a 	mov	sp,fp
   165ac:	df000017 	ldw	fp,0(sp)
   165b0:	dec00104 	addi	sp,sp,4
   165b4:	f800283a 	ret

000165b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   165b8:	defffe04 	addi	sp,sp,-8
   165bc:	dfc00115 	stw	ra,4(sp)
   165c0:	df000015 	stw	fp,0(sp)
   165c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   165c8:	008000b4 	movhi	r2,2
   165cc:	10a33c04 	addi	r2,r2,-29456
   165d0:	10800017 	ldw	r2,0(r2)
   165d4:	10000526 	beq	r2,zero,165ec <alt_get_errno+0x34>
   165d8:	008000b4 	movhi	r2,2
   165dc:	10a33c04 	addi	r2,r2,-29456
   165e0:	10800017 	ldw	r2,0(r2)
   165e4:	103ee83a 	callr	r2
   165e8:	00000206 	br	165f4 <alt_get_errno+0x3c>
   165ec:	008000b4 	movhi	r2,2
   165f0:	10aa0104 	addi	r2,r2,-22524
}
   165f4:	e037883a 	mov	sp,fp
   165f8:	dfc00117 	ldw	ra,4(sp)
   165fc:	df000017 	ldw	fp,0(sp)
   16600:	dec00204 	addi	sp,sp,8
   16604:	f800283a 	ret

00016608 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   16608:	defffa04 	addi	sp,sp,-24
   1660c:	dfc00515 	stw	ra,20(sp)
   16610:	df000415 	stw	fp,16(sp)
   16614:	df000404 	addi	fp,sp,16
   16618:	e13ffe15 	stw	r4,-8(fp)
   1661c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   16620:	e0bffe17 	ldw	r2,-8(fp)
   16624:	10000326 	beq	r2,zero,16634 <alt_dev_llist_insert+0x2c>
   16628:	e0bffe17 	ldw	r2,-8(fp)
   1662c:	10800217 	ldw	r2,8(r2)
   16630:	1000051e 	bne	r2,zero,16648 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   16634:	00165b80 	call	165b8 <alt_get_errno>
   16638:	00c00584 	movi	r3,22
   1663c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   16640:	00bffa84 	movi	r2,-22
   16644:	00001306 	br	16694 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   16648:	e0bffe17 	ldw	r2,-8(fp)
   1664c:	e0ffff17 	ldw	r3,-4(fp)
   16650:	e0fffc15 	stw	r3,-16(fp)
   16654:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   16658:	e0bffd17 	ldw	r2,-12(fp)
   1665c:	e0fffc17 	ldw	r3,-16(fp)
   16660:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   16664:	e0bffc17 	ldw	r2,-16(fp)
   16668:	10c00017 	ldw	r3,0(r2)
   1666c:	e0bffd17 	ldw	r2,-12(fp)
   16670:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   16674:	e0bffc17 	ldw	r2,-16(fp)
   16678:	10800017 	ldw	r2,0(r2)
   1667c:	e0fffd17 	ldw	r3,-12(fp)
   16680:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   16684:	e0bffc17 	ldw	r2,-16(fp)
   16688:	e0fffd17 	ldw	r3,-12(fp)
   1668c:	10c00015 	stw	r3,0(r2)

  return 0;  
   16690:	0005883a 	mov	r2,zero
}
   16694:	e037883a 	mov	sp,fp
   16698:	dfc00117 	ldw	ra,4(sp)
   1669c:	df000017 	ldw	fp,0(sp)
   166a0:	dec00204 	addi	sp,sp,8
   166a4:	f800283a 	ret

000166a8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   166a8:	defffd04 	addi	sp,sp,-12
   166ac:	dfc00215 	stw	ra,8(sp)
   166b0:	df000115 	stw	fp,4(sp)
   166b4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   166b8:	00800074 	movhi	r2,1
   166bc:	109c8404 	addi	r2,r2,29200
   166c0:	e0bfff15 	stw	r2,-4(fp)
   166c4:	00000606 	br	166e0 <_do_ctors+0x38>
        (*ctor) (); 
   166c8:	e0bfff17 	ldw	r2,-4(fp)
   166cc:	10800017 	ldw	r2,0(r2)
   166d0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   166d4:	e0bfff17 	ldw	r2,-4(fp)
   166d8:	10bfff04 	addi	r2,r2,-4
   166dc:	e0bfff15 	stw	r2,-4(fp)
   166e0:	e0ffff17 	ldw	r3,-4(fp)
   166e4:	00800074 	movhi	r2,1
   166e8:	109c8504 	addi	r2,r2,29204
   166ec:	18bff62e 	bgeu	r3,r2,166c8 <_do_ctors+0x20>
        (*ctor) (); 
}
   166f0:	e037883a 	mov	sp,fp
   166f4:	dfc00117 	ldw	ra,4(sp)
   166f8:	df000017 	ldw	fp,0(sp)
   166fc:	dec00204 	addi	sp,sp,8
   16700:	f800283a 	ret

00016704 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   16704:	defffd04 	addi	sp,sp,-12
   16708:	dfc00215 	stw	ra,8(sp)
   1670c:	df000115 	stw	fp,4(sp)
   16710:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   16714:	00800074 	movhi	r2,1
   16718:	109c8404 	addi	r2,r2,29200
   1671c:	e0bfff15 	stw	r2,-4(fp)
   16720:	00000606 	br	1673c <_do_dtors+0x38>
        (*dtor) (); 
   16724:	e0bfff17 	ldw	r2,-4(fp)
   16728:	10800017 	ldw	r2,0(r2)
   1672c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   16730:	e0bfff17 	ldw	r2,-4(fp)
   16734:	10bfff04 	addi	r2,r2,-4
   16738:	e0bfff15 	stw	r2,-4(fp)
   1673c:	e0ffff17 	ldw	r3,-4(fp)
   16740:	00800074 	movhi	r2,1
   16744:	109c8504 	addi	r2,r2,29204
   16748:	18bff62e 	bgeu	r3,r2,16724 <_do_dtors+0x20>
        (*dtor) (); 
}
   1674c:	e037883a 	mov	sp,fp
   16750:	dfc00117 	ldw	ra,4(sp)
   16754:	df000017 	ldw	fp,0(sp)
   16758:	dec00204 	addi	sp,sp,8
   1675c:	f800283a 	ret

00016760 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   16760:	defffa04 	addi	sp,sp,-24
   16764:	dfc00515 	stw	ra,20(sp)
   16768:	df000415 	stw	fp,16(sp)
   1676c:	df000404 	addi	fp,sp,16
   16770:	e13ffe15 	stw	r4,-8(fp)
   16774:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   16778:	e0bfff17 	ldw	r2,-4(fp)
   1677c:	10800017 	ldw	r2,0(r2)
   16780:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   16784:	e13ffe17 	ldw	r4,-8(fp)
   16788:	0012a100 	call	12a10 <strlen>
   1678c:	10800044 	addi	r2,r2,1
   16790:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   16794:	00000d06 	br	167cc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   16798:	e0bffc17 	ldw	r2,-16(fp)
   1679c:	10c00217 	ldw	r3,8(r2)
   167a0:	e0bffd17 	ldw	r2,-12(fp)
   167a4:	1809883a 	mov	r4,r3
   167a8:	e17ffe17 	ldw	r5,-8(fp)
   167ac:	100d883a 	mov	r6,r2
   167b0:	00170680 	call	17068 <memcmp>
   167b4:	1000021e 	bne	r2,zero,167c0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   167b8:	e0bffc17 	ldw	r2,-16(fp)
   167bc:	00000706 	br	167dc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   167c0:	e0bffc17 	ldw	r2,-16(fp)
   167c4:	10800017 	ldw	r2,0(r2)
   167c8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   167cc:	e0fffc17 	ldw	r3,-16(fp)
   167d0:	e0bfff17 	ldw	r2,-4(fp)
   167d4:	18bff01e 	bne	r3,r2,16798 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   167d8:	0005883a 	mov	r2,zero
}
   167dc:	e037883a 	mov	sp,fp
   167e0:	dfc00117 	ldw	ra,4(sp)
   167e4:	df000017 	ldw	fp,0(sp)
   167e8:	dec00204 	addi	sp,sp,8
   167ec:	f800283a 	ret

000167f0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   167f0:	defffb04 	addi	sp,sp,-20
   167f4:	dfc00415 	stw	ra,16(sp)
   167f8:	df000315 	stw	fp,12(sp)
   167fc:	df000304 	addi	fp,sp,12
   16800:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   16804:	008000b4 	movhi	r2,2
   16808:	10a33704 	addi	r2,r2,-29476
   1680c:	10800017 	ldw	r2,0(r2)
   16810:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   16814:	00003106 	br	168dc <alt_find_file+0xec>
  {
    len = strlen(next->name);
   16818:	e0bffd17 	ldw	r2,-12(fp)
   1681c:	10800217 	ldw	r2,8(r2)
   16820:	1009883a 	mov	r4,r2
   16824:	0012a100 	call	12a10 <strlen>
   16828:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   1682c:	e0bffd17 	ldw	r2,-12(fp)
   16830:	10c00217 	ldw	r3,8(r2)
   16834:	e0bffe17 	ldw	r2,-8(fp)
   16838:	10bfffc4 	addi	r2,r2,-1
   1683c:	1885883a 	add	r2,r3,r2
   16840:	10800003 	ldbu	r2,0(r2)
   16844:	10803fcc 	andi	r2,r2,255
   16848:	1080201c 	xori	r2,r2,128
   1684c:	10bfe004 	addi	r2,r2,-128
   16850:	10800bd8 	cmpnei	r2,r2,47
   16854:	1000031e 	bne	r2,zero,16864 <alt_find_file+0x74>
    {
      len -= 1;
   16858:	e0bffe17 	ldw	r2,-8(fp)
   1685c:	10bfffc4 	addi	r2,r2,-1
   16860:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   16864:	e0bffe17 	ldw	r2,-8(fp)
   16868:	e0ffff17 	ldw	r3,-4(fp)
   1686c:	1885883a 	add	r2,r3,r2
   16870:	10800003 	ldbu	r2,0(r2)
   16874:	10803fcc 	andi	r2,r2,255
   16878:	1080201c 	xori	r2,r2,128
   1687c:	10bfe004 	addi	r2,r2,-128
   16880:	10800be0 	cmpeqi	r2,r2,47
   16884:	1000081e 	bne	r2,zero,168a8 <alt_find_file+0xb8>
   16888:	e0bffe17 	ldw	r2,-8(fp)
   1688c:	e0ffff17 	ldw	r3,-4(fp)
   16890:	1885883a 	add	r2,r3,r2
   16894:	10800003 	ldbu	r2,0(r2)
   16898:	10803fcc 	andi	r2,r2,255
   1689c:	1080201c 	xori	r2,r2,128
   168a0:	10bfe004 	addi	r2,r2,-128
   168a4:	10000a1e 	bne	r2,zero,168d0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   168a8:	e0bffd17 	ldw	r2,-12(fp)
   168ac:	10c00217 	ldw	r3,8(r2)
   168b0:	e0bffe17 	ldw	r2,-8(fp)
   168b4:	1809883a 	mov	r4,r3
   168b8:	e17fff17 	ldw	r5,-4(fp)
   168bc:	100d883a 	mov	r6,r2
   168c0:	00170680 	call	17068 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   168c4:	1000021e 	bne	r2,zero,168d0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   168c8:	e0bffd17 	ldw	r2,-12(fp)
   168cc:	00000806 	br	168f0 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   168d0:	e0bffd17 	ldw	r2,-12(fp)
   168d4:	10800017 	ldw	r2,0(r2)
   168d8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   168dc:	e0fffd17 	ldw	r3,-12(fp)
   168e0:	008000b4 	movhi	r2,2
   168e4:	10a33704 	addi	r2,r2,-29476
   168e8:	18bfcb1e 	bne	r3,r2,16818 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   168ec:	0005883a 	mov	r2,zero
}
   168f0:	e037883a 	mov	sp,fp
   168f4:	dfc00117 	ldw	ra,4(sp)
   168f8:	df000017 	ldw	fp,0(sp)
   168fc:	dec00204 	addi	sp,sp,8
   16900:	f800283a 	ret

00016904 <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
   16904:	defffc04 	addi	sp,sp,-16
   16908:	df000315 	stw	fp,12(sp)
   1690c:	df000304 	addi	fp,sp,12
   16910:	e13fff15 	stw	r4,-4(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
   16914:	e0bfff17 	ldw	r2,-4(fp)
   16918:	10800217 	ldw	r2,8(r2)
   1691c:	1000021e 	bne	r2,zero,16928 <alt_fs_reg+0x24>
  {
    return -ENODEV;
   16920:	00bffb44 	movi	r2,-19
   16924:	00001406 	br	16978 <alt_fs_reg+0x74>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
   16928:	e0bfff17 	ldw	r2,-4(fp)
   1692c:	00c000b4 	movhi	r3,2
   16930:	18e33704 	addi	r3,r3,-29476
   16934:	e0fffd15 	stw	r3,-12(fp)
   16938:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1693c:	e0bffe17 	ldw	r2,-8(fp)
   16940:	e0fffd17 	ldw	r3,-12(fp)
   16944:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   16948:	e0bffd17 	ldw	r2,-12(fp)
   1694c:	10c00017 	ldw	r3,0(r2)
   16950:	e0bffe17 	ldw	r2,-8(fp)
   16954:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   16958:	e0bffd17 	ldw	r2,-12(fp)
   1695c:	10800017 	ldw	r2,0(r2)
   16960:	e0fffe17 	ldw	r3,-8(fp)
   16964:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   16968:	e0bffd17 	ldw	r2,-12(fp)
   1696c:	e0fffe17 	ldw	r3,-8(fp)
   16970:	10c00015 	stw	r3,0(r2)

  return 0;
   16974:	0005883a 	mov	r2,zero
} 
   16978:	e037883a 	mov	sp,fp
   1697c:	df000017 	ldw	fp,0(sp)
   16980:	dec00104 	addi	sp,sp,4
   16984:	f800283a 	ret

00016988 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   16988:	defffa04 	addi	sp,sp,-24
   1698c:	dfc00515 	stw	ra,20(sp)
   16990:	df000415 	stw	fp,16(sp)
   16994:	dc000315 	stw	r16,12(sp)
   16998:	df000304 	addi	fp,sp,12
   1699c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   169a0:	00bffa04 	movi	r2,-24
   169a4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   169a8:	e03ffd15 	stw	zero,-12(fp)
   169ac:	00002106 	br	16a34 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   169b0:	04000074 	movhi	r16,1
   169b4:	841eb104 	addi	r16,r16,31428
   169b8:	e0bffd17 	ldw	r2,-12(fp)
   169bc:	1009883a 	mov	r4,r2
   169c0:	01400304 	movi	r5,12
   169c4:	00140500 	call	14050 <__mulsi3>
   169c8:	8085883a 	add	r2,r16,r2
   169cc:	10800017 	ldw	r2,0(r2)
   169d0:	1000151e 	bne	r2,zero,16a28 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   169d4:	04000074 	movhi	r16,1
   169d8:	841eb104 	addi	r16,r16,31428
   169dc:	e0bffd17 	ldw	r2,-12(fp)
   169e0:	1009883a 	mov	r4,r2
   169e4:	01400304 	movi	r5,12
   169e8:	00140500 	call	14050 <__mulsi3>
   169ec:	8085883a 	add	r2,r16,r2
   169f0:	e0ffff17 	ldw	r3,-4(fp)
   169f4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   169f8:	008000b4 	movhi	r2,2
   169fc:	10a33b04 	addi	r2,r2,-29460
   16a00:	10c00017 	ldw	r3,0(r2)
   16a04:	e0bffd17 	ldw	r2,-12(fp)
   16a08:	1880040e 	bge	r3,r2,16a1c <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   16a0c:	008000b4 	movhi	r2,2
   16a10:	10a33b04 	addi	r2,r2,-29460
   16a14:	e0fffd17 	ldw	r3,-12(fp)
   16a18:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   16a1c:	e0bffd17 	ldw	r2,-12(fp)
   16a20:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   16a24:	00000606 	br	16a40 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   16a28:	e0bffd17 	ldw	r2,-12(fp)
   16a2c:	10800044 	addi	r2,r2,1
   16a30:	e0bffd15 	stw	r2,-12(fp)
   16a34:	e0bffd17 	ldw	r2,-12(fp)
   16a38:	10800810 	cmplti	r2,r2,32
   16a3c:	103fdc1e 	bne	r2,zero,169b0 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   16a40:	e0bffe17 	ldw	r2,-8(fp)
}
   16a44:	e037883a 	mov	sp,fp
   16a48:	dfc00217 	ldw	ra,8(sp)
   16a4c:	df000117 	ldw	fp,4(sp)
   16a50:	dc000017 	ldw	r16,0(sp)
   16a54:	dec00304 	addi	sp,sp,12
   16a58:	f800283a 	ret

00016a5c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   16a5c:	deffff04 	addi	sp,sp,-4
   16a60:	df000015 	stw	fp,0(sp)
   16a64:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   16a68:	e037883a 	mov	sp,fp
   16a6c:	df000017 	ldw	fp,0(sp)
   16a70:	dec00104 	addi	sp,sp,4
   16a74:	f800283a 	ret

00016a78 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   16a78:	defff904 	addi	sp,sp,-28
   16a7c:	dfc00615 	stw	ra,24(sp)
   16a80:	df000515 	stw	fp,20(sp)
   16a84:	df000504 	addi	fp,sp,20
   16a88:	e13ffc15 	stw	r4,-16(fp)
   16a8c:	e17ffd15 	stw	r5,-12(fp)
   16a90:	e1bffe15 	stw	r6,-8(fp)
   16a94:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   16a98:	e0800217 	ldw	r2,8(fp)
   16a9c:	d8800015 	stw	r2,0(sp)
   16aa0:	e13ffc17 	ldw	r4,-16(fp)
   16aa4:	e17ffd17 	ldw	r5,-12(fp)
   16aa8:	e1bffe17 	ldw	r6,-8(fp)
   16aac:	e1ffff17 	ldw	r7,-4(fp)
   16ab0:	0016c500 	call	16c50 <alt_iic_isr_register>
}  
   16ab4:	e037883a 	mov	sp,fp
   16ab8:	dfc00117 	ldw	ra,4(sp)
   16abc:	df000017 	ldw	fp,0(sp)
   16ac0:	dec00204 	addi	sp,sp,8
   16ac4:	f800283a 	ret

00016ac8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   16ac8:	defff904 	addi	sp,sp,-28
   16acc:	df000615 	stw	fp,24(sp)
   16ad0:	df000604 	addi	fp,sp,24
   16ad4:	e13ffe15 	stw	r4,-8(fp)
   16ad8:	e17fff15 	stw	r5,-4(fp)
   16adc:	e0bfff17 	ldw	r2,-4(fp)
   16ae0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16ae4:	0005303a 	rdctl	r2,status
   16ae8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16aec:	e0fffb17 	ldw	r3,-20(fp)
   16af0:	00bfff84 	movi	r2,-2
   16af4:	1884703a 	and	r2,r3,r2
   16af8:	1001703a 	wrctl	status,r2
  
  return context;
   16afc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   16b00:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   16b04:	e0bffa17 	ldw	r2,-24(fp)
   16b08:	00c00044 	movi	r3,1
   16b0c:	1884983a 	sll	r2,r3,r2
   16b10:	1007883a 	mov	r3,r2
   16b14:	008000b4 	movhi	r2,2
   16b18:	10aa0804 	addi	r2,r2,-22496
   16b1c:	10800017 	ldw	r2,0(r2)
   16b20:	1886b03a 	or	r3,r3,r2
   16b24:	008000b4 	movhi	r2,2
   16b28:	10aa0804 	addi	r2,r2,-22496
   16b2c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   16b30:	008000b4 	movhi	r2,2
   16b34:	10aa0804 	addi	r2,r2,-22496
   16b38:	10800017 	ldw	r2,0(r2)
   16b3c:	100170fa 	wrctl	ienable,r2
   16b40:	e0bffc17 	ldw	r2,-16(fp)
   16b44:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16b48:	e0bffd17 	ldw	r2,-12(fp)
   16b4c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   16b50:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   16b54:	e037883a 	mov	sp,fp
   16b58:	df000017 	ldw	fp,0(sp)
   16b5c:	dec00104 	addi	sp,sp,4
   16b60:	f800283a 	ret

00016b64 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   16b64:	defff904 	addi	sp,sp,-28
   16b68:	df000615 	stw	fp,24(sp)
   16b6c:	df000604 	addi	fp,sp,24
   16b70:	e13ffe15 	stw	r4,-8(fp)
   16b74:	e17fff15 	stw	r5,-4(fp)
   16b78:	e0bfff17 	ldw	r2,-4(fp)
   16b7c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16b80:	0005303a 	rdctl	r2,status
   16b84:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16b88:	e0fffb17 	ldw	r3,-20(fp)
   16b8c:	00bfff84 	movi	r2,-2
   16b90:	1884703a 	and	r2,r3,r2
   16b94:	1001703a 	wrctl	status,r2
  
  return context;
   16b98:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   16b9c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   16ba0:	e0bffa17 	ldw	r2,-24(fp)
   16ba4:	00c00044 	movi	r3,1
   16ba8:	1884983a 	sll	r2,r3,r2
   16bac:	0084303a 	nor	r2,zero,r2
   16bb0:	1007883a 	mov	r3,r2
   16bb4:	008000b4 	movhi	r2,2
   16bb8:	10aa0804 	addi	r2,r2,-22496
   16bbc:	10800017 	ldw	r2,0(r2)
   16bc0:	1886703a 	and	r3,r3,r2
   16bc4:	008000b4 	movhi	r2,2
   16bc8:	10aa0804 	addi	r2,r2,-22496
   16bcc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   16bd0:	008000b4 	movhi	r2,2
   16bd4:	10aa0804 	addi	r2,r2,-22496
   16bd8:	10800017 	ldw	r2,0(r2)
   16bdc:	100170fa 	wrctl	ienable,r2
   16be0:	e0bffc17 	ldw	r2,-16(fp)
   16be4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16be8:	e0bffd17 	ldw	r2,-12(fp)
   16bec:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   16bf0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   16bf4:	e037883a 	mov	sp,fp
   16bf8:	df000017 	ldw	fp,0(sp)
   16bfc:	dec00104 	addi	sp,sp,4
   16c00:	f800283a 	ret

00016c04 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   16c04:	defffc04 	addi	sp,sp,-16
   16c08:	df000315 	stw	fp,12(sp)
   16c0c:	df000304 	addi	fp,sp,12
   16c10:	e13ffe15 	stw	r4,-8(fp)
   16c14:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   16c18:	000530fa 	rdctl	r2,ienable
   16c1c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   16c20:	e0bfff17 	ldw	r2,-4(fp)
   16c24:	00c00044 	movi	r3,1
   16c28:	1884983a 	sll	r2,r3,r2
   16c2c:	1007883a 	mov	r3,r2
   16c30:	e0bffd17 	ldw	r2,-12(fp)
   16c34:	1884703a 	and	r2,r3,r2
   16c38:	1004c03a 	cmpne	r2,r2,zero
   16c3c:	10803fcc 	andi	r2,r2,255
}
   16c40:	e037883a 	mov	sp,fp
   16c44:	df000017 	ldw	fp,0(sp)
   16c48:	dec00104 	addi	sp,sp,4
   16c4c:	f800283a 	ret

00016c50 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   16c50:	defff504 	addi	sp,sp,-44
   16c54:	dfc00a15 	stw	ra,40(sp)
   16c58:	df000915 	stw	fp,36(sp)
   16c5c:	df000904 	addi	fp,sp,36
   16c60:	e13ffc15 	stw	r4,-16(fp)
   16c64:	e17ffd15 	stw	r5,-12(fp)
   16c68:	e1bffe15 	stw	r6,-8(fp)
   16c6c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   16c70:	00bffa84 	movi	r2,-22
   16c74:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   16c78:	e0bffd17 	ldw	r2,-12(fp)
   16c7c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   16c80:	e0bff817 	ldw	r2,-32(fp)
   16c84:	10800808 	cmpgei	r2,r2,32
   16c88:	1000271e 	bne	r2,zero,16d28 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16c8c:	0005303a 	rdctl	r2,status
   16c90:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16c94:	e0fffa17 	ldw	r3,-24(fp)
   16c98:	00bfff84 	movi	r2,-2
   16c9c:	1884703a 	and	r2,r3,r2
   16ca0:	1001703a 	wrctl	status,r2
  
  return context;
   16ca4:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   16ca8:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   16cac:	00c000b4 	movhi	r3,2
   16cb0:	18ea1504 	addi	r3,r3,-22444
   16cb4:	e0bff817 	ldw	r2,-32(fp)
   16cb8:	100490fa 	slli	r2,r2,3
   16cbc:	1885883a 	add	r2,r3,r2
   16cc0:	e0fffe17 	ldw	r3,-8(fp)
   16cc4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   16cc8:	00c000b4 	movhi	r3,2
   16ccc:	18ea1504 	addi	r3,r3,-22444
   16cd0:	e0bff817 	ldw	r2,-32(fp)
   16cd4:	100490fa 	slli	r2,r2,3
   16cd8:	1885883a 	add	r2,r3,r2
   16cdc:	10800104 	addi	r2,r2,4
   16ce0:	e0ffff17 	ldw	r3,-4(fp)
   16ce4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   16ce8:	e0bffe17 	ldw	r2,-8(fp)
   16cec:	10000526 	beq	r2,zero,16d04 <alt_iic_isr_register+0xb4>
   16cf0:	e0bff817 	ldw	r2,-32(fp)
   16cf4:	e13ffc17 	ldw	r4,-16(fp)
   16cf8:	100b883a 	mov	r5,r2
   16cfc:	0016ac80 	call	16ac8 <alt_ic_irq_enable>
   16d00:	00000406 	br	16d14 <alt_iic_isr_register+0xc4>
   16d04:	e0bff817 	ldw	r2,-32(fp)
   16d08:	e13ffc17 	ldw	r4,-16(fp)
   16d0c:	100b883a 	mov	r5,r2
   16d10:	0016b640 	call	16b64 <alt_ic_irq_disable>
   16d14:	e0bff715 	stw	r2,-36(fp)
   16d18:	e0bff917 	ldw	r2,-28(fp)
   16d1c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16d20:	e0bffb17 	ldw	r2,-20(fp)
   16d24:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   16d28:	e0bff717 	ldw	r2,-36(fp)
}
   16d2c:	e037883a 	mov	sp,fp
   16d30:	dfc00117 	ldw	ra,4(sp)
   16d34:	df000017 	ldw	fp,0(sp)
   16d38:	dec00204 	addi	sp,sp,8
   16d3c:	f800283a 	ret

00016d40 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   16d40:	defff804 	addi	sp,sp,-32
   16d44:	dfc00715 	stw	ra,28(sp)
   16d48:	df000615 	stw	fp,24(sp)
   16d4c:	dc000515 	stw	r16,20(sp)
   16d50:	df000504 	addi	fp,sp,20
   16d54:	e13ffc15 	stw	r4,-16(fp)
   16d58:	e17ffd15 	stw	r5,-12(fp)
   16d5c:	e1bffe15 	stw	r6,-8(fp)
   16d60:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   16d64:	e13ffd17 	ldw	r4,-12(fp)
   16d68:	e17ffe17 	ldw	r5,-8(fp)
   16d6c:	e1bfff17 	ldw	r6,-4(fp)
   16d70:	00147f80 	call	147f8 <open>
   16d74:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   16d78:	e0bffb17 	ldw	r2,-20(fp)
   16d7c:	10002216 	blt	r2,zero,16e08 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   16d80:	04000074 	movhi	r16,1
   16d84:	841eb104 	addi	r16,r16,31428
   16d88:	e0bffb17 	ldw	r2,-20(fp)
   16d8c:	1009883a 	mov	r4,r2
   16d90:	01400304 	movi	r5,12
   16d94:	00140500 	call	14050 <__mulsi3>
   16d98:	8085883a 	add	r2,r16,r2
   16d9c:	10c00017 	ldw	r3,0(r2)
   16da0:	e0bffc17 	ldw	r2,-16(fp)
   16da4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   16da8:	04000074 	movhi	r16,1
   16dac:	841eb104 	addi	r16,r16,31428
   16db0:	e0bffb17 	ldw	r2,-20(fp)
   16db4:	1009883a 	mov	r4,r2
   16db8:	01400304 	movi	r5,12
   16dbc:	00140500 	call	14050 <__mulsi3>
   16dc0:	8085883a 	add	r2,r16,r2
   16dc4:	10800104 	addi	r2,r2,4
   16dc8:	10c00017 	ldw	r3,0(r2)
   16dcc:	e0bffc17 	ldw	r2,-16(fp)
   16dd0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   16dd4:	04000074 	movhi	r16,1
   16dd8:	841eb104 	addi	r16,r16,31428
   16ddc:	e0bffb17 	ldw	r2,-20(fp)
   16de0:	1009883a 	mov	r4,r2
   16de4:	01400304 	movi	r5,12
   16de8:	00140500 	call	14050 <__mulsi3>
   16dec:	8085883a 	add	r2,r16,r2
   16df0:	10800204 	addi	r2,r2,8
   16df4:	10c00017 	ldw	r3,0(r2)
   16df8:	e0bffc17 	ldw	r2,-16(fp)
   16dfc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   16e00:	e13ffb17 	ldw	r4,-20(fp)
   16e04:	0014a940 	call	14a94 <alt_release_fd>
  }
} 
   16e08:	e037883a 	mov	sp,fp
   16e0c:	dfc00217 	ldw	ra,8(sp)
   16e10:	df000117 	ldw	fp,4(sp)
   16e14:	dc000017 	ldw	r16,0(sp)
   16e18:	dec00304 	addi	sp,sp,12
   16e1c:	f800283a 	ret

00016e20 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   16e20:	defffb04 	addi	sp,sp,-20
   16e24:	dfc00415 	stw	ra,16(sp)
   16e28:	df000315 	stw	fp,12(sp)
   16e2c:	df000304 	addi	fp,sp,12
   16e30:	e13ffd15 	stw	r4,-12(fp)
   16e34:	e17ffe15 	stw	r5,-8(fp)
   16e38:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   16e3c:	01000074 	movhi	r4,1
   16e40:	211eb404 	addi	r4,r4,31440
   16e44:	e17ffd17 	ldw	r5,-12(fp)
   16e48:	01800044 	movi	r6,1
   16e4c:	01c07fc4 	movi	r7,511
   16e50:	0016d400 	call	16d40 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   16e54:	01000074 	movhi	r4,1
   16e58:	211eb104 	addi	r4,r4,31428
   16e5c:	e17ffe17 	ldw	r5,-8(fp)
   16e60:	000d883a 	mov	r6,zero
   16e64:	01c07fc4 	movi	r7,511
   16e68:	0016d400 	call	16d40 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   16e6c:	01000074 	movhi	r4,1
   16e70:	211eb704 	addi	r4,r4,31452
   16e74:	e17fff17 	ldw	r5,-4(fp)
   16e78:	01800044 	movi	r6,1
   16e7c:	01c07fc4 	movi	r7,511
   16e80:	0016d400 	call	16d40 <alt_open_fd>
}  
   16e84:	e037883a 	mov	sp,fp
   16e88:	dfc00117 	ldw	ra,4(sp)
   16e8c:	df000017 	ldw	fp,0(sp)
   16e90:	dec00204 	addi	sp,sp,8
   16e94:	f800283a 	ret

00016e98 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   16e98:	defffa04 	addi	sp,sp,-24
   16e9c:	df000515 	stw	fp,20(sp)
   16ea0:	df000504 	addi	fp,sp,20
   16ea4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16ea8:	0005303a 	rdctl	r2,status
   16eac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16eb0:	e0fffc17 	ldw	r3,-16(fp)
   16eb4:	00bfff84 	movi	r2,-2
   16eb8:	1884703a 	and	r2,r3,r2
   16ebc:	1001703a 	wrctl	status,r2
  
  return context;
   16ec0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   16ec4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   16ec8:	e0bfff17 	ldw	r2,-4(fp)
   16ecc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   16ed0:	e0bffd17 	ldw	r2,-12(fp)
   16ed4:	10800017 	ldw	r2,0(r2)
   16ed8:	e0fffd17 	ldw	r3,-12(fp)
   16edc:	18c00117 	ldw	r3,4(r3)
   16ee0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   16ee4:	e0bffd17 	ldw	r2,-12(fp)
   16ee8:	10800117 	ldw	r2,4(r2)
   16eec:	e0fffd17 	ldw	r3,-12(fp)
   16ef0:	18c00017 	ldw	r3,0(r3)
   16ef4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   16ef8:	e0bffd17 	ldw	r2,-12(fp)
   16efc:	e0fffd17 	ldw	r3,-12(fp)
   16f00:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   16f04:	e0bffd17 	ldw	r2,-12(fp)
   16f08:	e0fffd17 	ldw	r3,-12(fp)
   16f0c:	10c00015 	stw	r3,0(r2)
   16f10:	e0bffb17 	ldw	r2,-20(fp)
   16f14:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16f18:	e0bffe17 	ldw	r2,-8(fp)
   16f1c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   16f20:	e037883a 	mov	sp,fp
   16f24:	df000017 	ldw	fp,0(sp)
   16f28:	dec00104 	addi	sp,sp,4
   16f2c:	f800283a 	ret

00016f30 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   16f30:	defffb04 	addi	sp,sp,-20
   16f34:	dfc00415 	stw	ra,16(sp)
   16f38:	df000315 	stw	fp,12(sp)
   16f3c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   16f40:	d0a01e17 	ldw	r2,-32648(gp)
   16f44:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   16f48:	d0a6d717 	ldw	r2,-25764(gp)
   16f4c:	10800044 	addi	r2,r2,1
   16f50:	d0a6d715 	stw	r2,-25764(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   16f54:	00002e06 	br	17010 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   16f58:	e0bffd17 	ldw	r2,-12(fp)
   16f5c:	10800017 	ldw	r2,0(r2)
   16f60:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   16f64:	e0bffd17 	ldw	r2,-12(fp)
   16f68:	10800403 	ldbu	r2,16(r2)
   16f6c:	10803fcc 	andi	r2,r2,255
   16f70:	10000426 	beq	r2,zero,16f84 <alt_tick+0x54>
   16f74:	d0a6d717 	ldw	r2,-25764(gp)
   16f78:	1000021e 	bne	r2,zero,16f84 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   16f7c:	e0bffd17 	ldw	r2,-12(fp)
   16f80:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   16f84:	e0bffd17 	ldw	r2,-12(fp)
   16f88:	10800217 	ldw	r2,8(r2)
   16f8c:	d0e6d717 	ldw	r3,-25764(gp)
   16f90:	18801d36 	bltu	r3,r2,17008 <alt_tick+0xd8>
   16f94:	e0bffd17 	ldw	r2,-12(fp)
   16f98:	10800403 	ldbu	r2,16(r2)
   16f9c:	10803fcc 	andi	r2,r2,255
   16fa0:	1000191e 	bne	r2,zero,17008 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   16fa4:	e0bffd17 	ldw	r2,-12(fp)
   16fa8:	10c00317 	ldw	r3,12(r2)
   16fac:	e0bffd17 	ldw	r2,-12(fp)
   16fb0:	10800517 	ldw	r2,20(r2)
   16fb4:	1009883a 	mov	r4,r2
   16fb8:	183ee83a 	callr	r3
   16fbc:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   16fc0:	e0bfff17 	ldw	r2,-4(fp)
   16fc4:	1000031e 	bne	r2,zero,16fd4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   16fc8:	e13ffd17 	ldw	r4,-12(fp)
   16fcc:	0016e980 	call	16e98 <alt_alarm_stop>
   16fd0:	00000d06 	br	17008 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   16fd4:	e0bffd17 	ldw	r2,-12(fp)
   16fd8:	10c00217 	ldw	r3,8(r2)
   16fdc:	e0bfff17 	ldw	r2,-4(fp)
   16fe0:	1887883a 	add	r3,r3,r2
   16fe4:	e0bffd17 	ldw	r2,-12(fp)
   16fe8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   16fec:	e0bffd17 	ldw	r2,-12(fp)
   16ff0:	10c00217 	ldw	r3,8(r2)
   16ff4:	d0a6d717 	ldw	r2,-25764(gp)
   16ff8:	1880032e 	bgeu	r3,r2,17008 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   16ffc:	e0bffd17 	ldw	r2,-12(fp)
   17000:	00c00044 	movi	r3,1
   17004:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   17008:	e0bffe17 	ldw	r2,-8(fp)
   1700c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   17010:	e0fffd17 	ldw	r3,-12(fp)
   17014:	d0a01e04 	addi	r2,gp,-32648
   17018:	18bfcf1e 	bne	r3,r2,16f58 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   1701c:	0001883a 	nop
}
   17020:	e037883a 	mov	sp,fp
   17024:	dfc00117 	ldw	ra,4(sp)
   17028:	df000017 	ldw	fp,0(sp)
   1702c:	dec00204 	addi	sp,sp,8
   17030:	f800283a 	ret

00017034 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   17034:	deffff04 	addi	sp,sp,-4
   17038:	df000015 	stw	fp,0(sp)
   1703c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   17040:	000170fa 	wrctl	ienable,zero
}
   17044:	e037883a 	mov	sp,fp
   17048:	df000017 	ldw	fp,0(sp)
   1704c:	dec00104 	addi	sp,sp,4
   17050:	f800283a 	ret

00017054 <atexit>:
   17054:	200b883a 	mov	r5,r4
   17058:	000d883a 	mov	r6,zero
   1705c:	0009883a 	mov	r4,zero
   17060:	000f883a 	mov	r7,zero
   17064:	00170e41 	jmpi	170e4 <__register_exitproc>

00017068 <memcmp>:
   17068:	01c000c4 	movi	r7,3
   1706c:	3980192e 	bgeu	r7,r6,170d4 <memcmp+0x6c>
   17070:	2904b03a 	or	r2,r5,r4
   17074:	11c4703a 	and	r2,r2,r7
   17078:	10000f26 	beq	r2,zero,170b8 <memcmp+0x50>
   1707c:	20c00003 	ldbu	r3,0(r4)
   17080:	28800003 	ldbu	r2,0(r5)
   17084:	1880151e 	bne	r3,r2,170dc <memcmp+0x74>
   17088:	31bfff84 	addi	r6,r6,-2
   1708c:	01ffffc4 	movi	r7,-1
   17090:	00000406 	br	170a4 <memcmp+0x3c>
   17094:	20c00003 	ldbu	r3,0(r4)
   17098:	28800003 	ldbu	r2,0(r5)
   1709c:	31bfffc4 	addi	r6,r6,-1
   170a0:	18800e1e 	bne	r3,r2,170dc <memcmp+0x74>
   170a4:	21000044 	addi	r4,r4,1
   170a8:	29400044 	addi	r5,r5,1
   170ac:	31fff91e 	bne	r6,r7,17094 <memcmp+0x2c>
   170b0:	0005883a 	mov	r2,zero
   170b4:	f800283a 	ret
   170b8:	20c00017 	ldw	r3,0(r4)
   170bc:	28800017 	ldw	r2,0(r5)
   170c0:	1880041e 	bne	r3,r2,170d4 <memcmp+0x6c>
   170c4:	31bfff04 	addi	r6,r6,-4
   170c8:	21000104 	addi	r4,r4,4
   170cc:	29400104 	addi	r5,r5,4
   170d0:	39bff936 	bltu	r7,r6,170b8 <memcmp+0x50>
   170d4:	303fe91e 	bne	r6,zero,1707c <memcmp+0x14>
   170d8:	003ff506 	br	170b0 <memcmp+0x48>
   170dc:	1885c83a 	sub	r2,r3,r2
   170e0:	f800283a 	ret

000170e4 <__register_exitproc>:
   170e4:	defffa04 	addi	sp,sp,-24
   170e8:	008000b4 	movhi	r2,2
   170ec:	10a33304 	addi	r2,r2,-29492
   170f0:	dc000315 	stw	r16,12(sp)
   170f4:	14000017 	ldw	r16,0(r2)
   170f8:	dc400415 	stw	r17,16(sp)
   170fc:	dfc00515 	stw	ra,20(sp)
   17100:	80805217 	ldw	r2,328(r16)
   17104:	2023883a 	mov	r17,r4
   17108:	10003e26 	beq	r2,zero,17204 <__register_exitproc+0x120>
   1710c:	10c00117 	ldw	r3,4(r2)
   17110:	020007c4 	movi	r8,31
   17114:	40c0180e 	bge	r8,r3,17178 <__register_exitproc+0x94>
   17118:	00800034 	movhi	r2,0
   1711c:	10800004 	addi	r2,r2,0
   17120:	1000061e 	bne	r2,zero,1713c <__register_exitproc+0x58>
   17124:	00bfffc4 	movi	r2,-1
   17128:	dfc00517 	ldw	ra,20(sp)
   1712c:	dc400417 	ldw	r17,16(sp)
   17130:	dc000317 	ldw	r16,12(sp)
   17134:	dec00604 	addi	sp,sp,24
   17138:	f800283a 	ret
   1713c:	01006404 	movi	r4,400
   17140:	d9400015 	stw	r5,0(sp)
   17144:	d9800115 	stw	r6,4(sp)
   17148:	d9c00215 	stw	r7,8(sp)
   1714c:	00000000 	call	0 <__alt_mem_mem6-0x10000>
   17150:	d9400017 	ldw	r5,0(sp)
   17154:	d9800117 	ldw	r6,4(sp)
   17158:	d9c00217 	ldw	r7,8(sp)
   1715c:	103ff126 	beq	r2,zero,17124 <__register_exitproc+0x40>
   17160:	80c05217 	ldw	r3,328(r16)
   17164:	10000115 	stw	zero,4(r2)
   17168:	10c00015 	stw	r3,0(r2)
   1716c:	80805215 	stw	r2,328(r16)
   17170:	10006215 	stw	zero,392(r2)
   17174:	10006315 	stw	zero,396(r2)
   17178:	10c00117 	ldw	r3,4(r2)
   1717c:	88000d1e 	bne	r17,zero,171b4 <__register_exitproc+0xd0>
   17180:	19000084 	addi	r4,r3,2
   17184:	2109883a 	add	r4,r4,r4
   17188:	18c00044 	addi	r3,r3,1
   1718c:	2109883a 	add	r4,r4,r4
   17190:	1109883a 	add	r4,r2,r4
   17194:	10c00115 	stw	r3,4(r2)
   17198:	0005883a 	mov	r2,zero
   1719c:	21400015 	stw	r5,0(r4)
   171a0:	dfc00517 	ldw	ra,20(sp)
   171a4:	dc400417 	ldw	r17,16(sp)
   171a8:	dc000317 	ldw	r16,12(sp)
   171ac:	dec00604 	addi	sp,sp,24
   171b0:	f800283a 	ret
   171b4:	02400044 	movi	r9,1
   171b8:	12806217 	ldw	r10,392(r2)
   171bc:	48d2983a 	sll	r9,r9,r3
   171c0:	19000804 	addi	r4,r3,32
   171c4:	18d1883a 	add	r8,r3,r3
   171c8:	2109883a 	add	r4,r4,r4
   171cc:	4211883a 	add	r8,r8,r8
   171d0:	2109883a 	add	r4,r4,r4
   171d4:	1109883a 	add	r4,r2,r4
   171d8:	1211883a 	add	r8,r2,r8
   171dc:	5254b03a 	or	r10,r10,r9
   171e0:	21c02215 	stw	r7,136(r4)
   171e4:	41802215 	stw	r6,136(r8)
   171e8:	12806215 	stw	r10,392(r2)
   171ec:	01000084 	movi	r4,2
   171f0:	893fe31e 	bne	r17,r4,17180 <__register_exitproc+0x9c>
   171f4:	11006317 	ldw	r4,396(r2)
   171f8:	2252b03a 	or	r9,r4,r9
   171fc:	12406315 	stw	r9,396(r2)
   17200:	003fdf06 	br	17180 <__register_exitproc+0x9c>
   17204:	008000b4 	movhi	r2,2
   17208:	10aa5504 	addi	r2,r2,-22188
   1720c:	80805215 	stw	r2,328(r16)
   17210:	003fbe06 	br	1710c <__register_exitproc+0x28>


full_cpu4_test.elf:     file format elf32-littlenios2
full_cpu4_test.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000101b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00005560 memsz 0x00005560 flags r-x
    LOAD off    0x00006580 vaddr 0x00015580 paddr 0x00016fc8 align 2**12
         filesz 0x00001a48 memsz 0x00001a48 flags rw-
    LOAD off    0x00008a10 vaddr 0x00018a10 paddr 0x00018a10 align 2**12
         filesz 0x00000000 memsz 0x000002e0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005380  000101b8  000101b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000048  00015538  00015538  00006538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a48  00015580  00016fc8  00006580  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e0  00018a10  00018a10  00008a10  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00007fc8  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000950  00000000  00000000  00007ff0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00017819  00000000  00000000  00008940  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00005ad8  00000000  00000000  00020159  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00006bed  00000000  00000000  00025c31  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000fe0  00000000  00000000  0002c820  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000021ee  00000000  00000000  0002d800  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000562f  00000000  00000000  0002f9ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  00035020  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000398  00000000  00000000  00035030  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00037793  2**0
                  CONTENTS, READONLY
 17 .cpu          00000004  00000000  00000000  00037796  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0003779a  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0003779b  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   0000000a  00000000  00000000  0003779c  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    0000000a  00000000  00000000  000377a6  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   0000000a  00000000  00000000  000377b0  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 00000004  00000000  00000000  000377ba  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 00000052  00000000  00000000  000377be  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     0017992b  00000000  00000000  00037810  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
000101b8 l    d  .text	00000000 .text
00015538 l    d  .rodata	00000000 .rodata
00015580 l    d  .rwdata	00000000 .rwdata
00018a10 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../full_cpu4_test_bsp//obj/HAL/src/crt0.o
000101f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00010094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
00015580 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00011d64 l     F .text	00000008 __fp_lock
00011d6c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
00012d6c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00012e88 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00012eb4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00012fb4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000130a8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00013194 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00013370 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00016fb8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
000135e4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00013724 l     F .text	00000038 alt_dev_reg
00015f30 l     O .rwdata	00001060 jtag_uart4
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00013a1c l     F .text	00000204 altera_avalon_jtag_uart_irq
00013c20 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0001425c l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000144b4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00014940 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00014a98 l     F .text	00000050 alt_get_errno
00014ae8 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00012c08 g     F .text	00000064 _isatty_r
000132b8 g     F .text	00000078 alt_main
00010228 g     F .text	00000084 _puts_r
00018a60 g     O .bss	00000100 alt_irq
00012c6c g     F .text	0000006c _lseek_r
00016fc8 g       *ABS*	00000000 __flash_rwdata_start
00018cf0 g       *ABS*	00000000 __alt_heap_start
0001291c g     F .text	0000005c __sseek
00011e08 g     F .text	0000010c __sinit
00011d80 g     F .text	00000078 __sfmoreglue
00013350 g     F .text	00000020 __malloc_unlock
000111ec g     F .text	0000018c memmove
00011df8 g     F .text	00000010 _cleanup
00000000  w      *UND*	00000000 __errno
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00012ba0 g     F .text	00000068 _fstat_r
00018a1c g     O .bss	00000004 errno
00018a24 g     O .bss	00000004 alt_argv
0001ef90 g       *ABS*	00000000 _gp
00010000 g       *ABS*	00000000 __alt_mem_mem4
00015db0 g     O .rwdata	00000180 alt_fd_list
00014eec g     F .text	00000090 alt_find_dev
000110ac g     F .text	00000140 memcpy
00011d74 g     F .text	0000000c _cleanup_r
00014a20 g     F .text	00000078 alt_io_redirect
00015538 g       *ABS*	00000000 __DTOR_END__
000102ac g     F .text	00000014 puts
00013e20 g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00013004 g     F .text	000000a4 isatty
00018a18 g     O .bss	00000004 __malloc_top_pad
0001034c g     F .text	000004e4 __sfvwrite_r
00011974 g     F .text	00000064 _sbrk_r
00012cd8 g     F .text	0000006c _read_r
00016fb0 g     O .rwdata	00000004 alt_max_fd
00012a50 g     F .text	0000013c _fclose_r
00011d34 g     F .text	00000030 fflush
00018a14 g     O .bss	00000004 __malloc_max_sbrked_mem
000131e4 g     F .text	000000d4 lseek
00016f90 g     O .rwdata	00000004 _global_impure_ptr
00011378 g     F .text	000005fc _realloc_r
00018cf0 g       *ABS*	00000000 __bss_end
00014850 g     F .text	000000f0 alt_iic_isr_register
00014dc8 g     F .text	00000104 alt_tick
00012020 g     F .text	00000018 __fp_lock_all
00014804 g     F .text	0000004c alt_ic_irq_enabled
00014d30 g     F .text	00000098 alt_alarm_stop
00018a2c g     O .bss	00000004 alt_irq_active
000100ec g     F .exceptions	000000cc alt_irq_handler
00015d88 g     O .rwdata	00000028 alt_dev_null
00014498 g     F .text	0000001c alt_dcache_flush_all
00016fc8 g       *ABS*	00000000 __ram_rwdata_end
00016fa8 g     O .rwdata	00000008 alt_dev_list
00013634 g     F .text	000000f0 write
00015580 g       *ABS*	00000000 __ram_rodata_end
00012f04 g     F .text	000000b0 fstat
00018cf0 g       *ABS*	00000000 end
0001395c g     F .text	000000c0 altera_avalon_jtag_uart_init
00015538 g       *ABS*	00000000 __CTOR_LIST__
00020000 g       *ABS*	00000000 __alt_stack_pointer
000142d0 g     F .text	00000088 alt_avalon_timer_sc_init
00014038 g     F .text	00000224 altera_avalon_jtag_uart_write
00012010 g     F .text	00000004 __sfp_lock_acquire
00010fb4 g     F .text	000000f8 memchr
0001218c g     F .text	000002d0 _free_r
0001535c g     F .text	000001a0 __call_exitprocs
00016f98 g     O .rwdata	00000004 __malloc_sbrk_base
000101b8 g     F .text	0000003c _start
00018a30 g     O .bss	00000004 _alt_tick_rate
00018a34 g     O .bss	00000004 _alt_nticks
000133c0 g     F .text	000000f4 read
00013790 g     F .text	00000068 alt_sys_init
0001522c g     F .text	00000130 __register_exitproc
00013cc4 g     F .text	00000068 altera_avalon_jtag_uart_close
00012d44 g     F .text	00000028 __mulsi3
00015580 g       *ABS*	00000000 __ram_rwdata_start
00015538 g       *ABS*	00000000 __ram_rodata_start
00018a38 g     O .bss	00000028 __malloc_current_mallinfo
000137f8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00015090 g     F .text	000000d4 alt_get_fd
000129ec g     F .text	00000064 _close_r
000151b0 g     F .text	0000007c memcmp
000138b8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00018cf0 g       *ABS*	00000000 __alt_stack_base
00013908 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000119d8 g     F .text	00000174 __swsetup_r
00011f14 g     F .text	000000fc __sfp
00015980 g     O .rwdata	00000408 __malloc_av_
0001201c g     F .text	00000004 __sinit_lock_release
00012840 g     F .text	00000054 __sread
00014f7c g     F .text	00000114 alt_find_file
00014504 g     F .text	000000a0 alt_dev_llist_insert
00013330 g     F .text	00000020 __malloc_lock
00013534 g     F .text	000000b0 sbrk
00011b4c g     F .text	000001e8 _fflush_r
00018a10 g       *ABS*	00000000 __bss_start
00012764 g     F .text	000000dc memset
000101f4 g     F .text	00000034 main
00018a28 g     O .bss	00000004 alt_envp
00018a10 g     O .bss	00000004 __malloc_max_total_mem
00013858 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00012978 g     F .text	00000008 __sclose
00020000 g       *ABS*	00000000 __alt_heap_limit
00012b8c g     F .text	00000014 fclose
00018b60 g     O .bss	00000190 _atexit0
00010830 g     F .text	00000784 _malloc_r
00016fb4 g     O .rwdata	00000004 alt_errno
0001245c g     F .text	000000a8 _fwalk
00012050 g     F .text	0000013c _malloc_trim_r
00015538 g       *ABS*	00000000 __CTOR_END__
00015538 g       *ABS*	00000000 __flash_rodata_start
00015538 g       *ABS*	00000000 __DTOR_LIST__
0001375c g     F .text	00000034 alt_irq_init
000134b4 g     F .text	00000080 alt_release_fd
00015164 g     F .text	00000014 atexit
00012980 g     F .text	0000006c _write_r
00016f94 g     O .rwdata	00000004 _impure_ptr
00018a20 g     O .bss	00000004 alt_argc
00014600 g     F .text	0000005c _do_dtors
00010020 g       .exceptions	00000000 alt_irq_entry
00012038 g     F .text	00000018 __fp_unlock_all
00016fa0 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00014678 g     F .text	00000050 alt_ic_isr_register
00016fc8 g       *ABS*	00000000 _edata
00018cf0 g       *ABS*	00000000 _end
000101b8 g       *ABS*	00000000 __ram_exceptions_end
00013d2c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00014764 g     F .text	000000a0 alt_ic_irq_disable
00012894 g     F .text	00000088 __swrite
00016f9c g     O .rwdata	00000004 __malloc_trim_threshold
00014ecc g     F .text	00000020 altera_nios2_qsys_irq_init
00015178 g     F .text	00000038 exit
00012504 g     F .text	000000b8 _fwalk_reent
00020000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00012014 g     F .text	00000004 __sfp_lock_release
000154fc g     F .text	0000003c _exit
00014358 g     F .text	00000140 alt_alarm_start
000125bc g     F .text	000001a8 __smakebuf_r
000102c0 g     F .text	0000008c strlen
00014bd8 g     F .text	00000158 open
0001465c g     F .text	0000001c alt_icache_flush_all
00016fbc g     O .rwdata	00000004 alt_priority_mask
000146c8 g     F .text	0000009c alt_ic_irq_enable
00016fc0 g     O .rwdata	00000008 alt_alarm_list
000145a4 g     F .text	0000005c _do_ctors
00012dbc g     F .text	000000cc close
00013114 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
00012018 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08406e14 	ori	at,at,440
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100ec0 	call	100ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000306 	br	10098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   1008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)

00010094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   10094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   10098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   1009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100e8:	ef80083a 	eret

000100ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100ec:	defff904 	addi	sp,sp,-28
   100f0:	dfc00615 	stw	ra,24(sp)
   100f4:	df000515 	stw	fp,20(sp)
   100f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   100fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10100:	0005313a 	rdctl	r2,ipending
   10104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   10108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   10110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10114:	00800044 	movi	r2,1
   10118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1011c:	e0fffb17 	ldw	r3,-20(fp)
   10120:	e0bffc17 	ldw	r2,-16(fp)
   10124:	1884703a 	and	r2,r3,r2
   10128:	10001726 	beq	r2,zero,10188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1012c:	00c000b4 	movhi	r3,2
   10130:	18e29804 	addi	r3,r3,-30112
   10134:	e0bffd17 	ldw	r2,-12(fp)
   10138:	100490fa 	slli	r2,r2,3
   1013c:	1885883a 	add	r2,r3,r2
   10140:	10c00017 	ldw	r3,0(r2)
   10144:	010000b4 	movhi	r4,2
   10148:	21229804 	addi	r4,r4,-30112
   1014c:	e0bffd17 	ldw	r2,-12(fp)
   10150:	100490fa 	slli	r2,r2,3
   10154:	2085883a 	add	r2,r4,r2
   10158:	10800104 	addi	r2,r2,4
   1015c:	10800017 	ldw	r2,0(r2)
   10160:	1009883a 	mov	r4,r2
   10164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   10168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   1016c:	0005313a 	rdctl	r2,ipending
   10170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   10174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   10178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   1017c:	e0bffb17 	ldw	r2,-20(fp)
   10180:	103fe31e 	bne	r2,zero,10110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   10184:	00000706 	br	101a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10188:	e0bffc17 	ldw	r2,-16(fp)
   1018c:	1085883a 	add	r2,r2,r2
   10190:	e0bffc15 	stw	r2,-16(fp)
      i++;
   10194:	e0bffd17 	ldw	r2,-12(fp)
   10198:	10800044 	addi	r2,r2,1
   1019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   101a0:	003fde06 	br	1011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   101a4:	e037883a 	mov	sp,fp
   101a8:	dfc00117 	ldw	ra,4(sp)
   101ac:	df000017 	ldw	fp,0(sp)
   101b0:	dec00204 	addi	sp,sp,8
   101b4:	f800283a 	ret

Disassembly of section .text:

000101b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   101b8:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   101bc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   101c0:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   101c4:	d6bbe414 	ori	gp,gp,61328
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   101c8:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   101cc:	10a28414 	ori	r2,r2,35344

    movhi r3, %hi(__bss_end)
   101d0:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   101d4:	18e33c14 	ori	r3,r3,36080

    beq r2, r3, 1f
   101d8:	10c00326 	beq	r2,r3,101e8 <_start+0x30>

0:
    stw zero, (r2)
   101dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101e4:	10fffd36 	bltu	r2,r3,101dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101e8:	00131140 	call	13114 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101ec:	00132b80 	call	132b8 <alt_main>

000101f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101f0:	003fff06 	br	101f0 <alt_after_alt_main>

000101f4 <main>:
 */

#include <stdio.h>

int main()
{
   101f4:	defffe04 	addi	sp,sp,-8
   101f8:	dfc00115 	stw	ra,4(sp)
   101fc:	df000015 	stw	fp,0(sp)
   10200:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
   10204:	01000074 	movhi	r4,1
   10208:	21154e04 	addi	r4,r4,21816
   1020c:	00102ac0 	call	102ac <puts>

  return 0;
   10210:	0005883a 	mov	r2,zero
}
   10214:	e037883a 	mov	sp,fp
   10218:	dfc00117 	ldw	ra,4(sp)
   1021c:	df000017 	ldw	fp,0(sp)
   10220:	dec00204 	addi	sp,sp,8
   10224:	f800283a 	ret

00010228 <_puts_r>:
   10228:	defff604 	addi	sp,sp,-40
   1022c:	dc400815 	stw	r17,32(sp)
   10230:	2023883a 	mov	r17,r4
   10234:	2809883a 	mov	r4,r5
   10238:	dc000715 	stw	r16,28(sp)
   1023c:	dfc00915 	stw	ra,36(sp)
   10240:	2821883a 	mov	r16,r5
   10244:	00102c00 	call	102c0 <strlen>
   10248:	10c00044 	addi	r3,r2,1
   1024c:	d8800115 	stw	r2,4(sp)
   10250:	89400217 	ldw	r5,8(r17)
   10254:	00800074 	movhi	r2,1
   10258:	10955304 	addi	r2,r2,21836
   1025c:	d8800215 	stw	r2,8(sp)
   10260:	00800044 	movi	r2,1
   10264:	d8800315 	stw	r2,12(sp)
   10268:	8809883a 	mov	r4,r17
   1026c:	00800084 	movi	r2,2
   10270:	d9800404 	addi	r6,sp,16
   10274:	dc000015 	stw	r16,0(sp)
   10278:	d8c00615 	stw	r3,24(sp)
   1027c:	dec00415 	stw	sp,16(sp)
   10280:	d8800515 	stw	r2,20(sp)
   10284:	001034c0 	call	1034c <__sfvwrite_r>
   10288:	1000061e 	bne	r2,zero,102a4 <_puts_r+0x7c>
   1028c:	00800284 	movi	r2,10
   10290:	dfc00917 	ldw	ra,36(sp)
   10294:	dc400817 	ldw	r17,32(sp)
   10298:	dc000717 	ldw	r16,28(sp)
   1029c:	dec00a04 	addi	sp,sp,40
   102a0:	f800283a 	ret
   102a4:	00bfffc4 	movi	r2,-1
   102a8:	003ff906 	br	10290 <_puts_r+0x68>

000102ac <puts>:
   102ac:	00800074 	movhi	r2,1
   102b0:	109be504 	addi	r2,r2,28564
   102b4:	200b883a 	mov	r5,r4
   102b8:	11000017 	ldw	r4,0(r2)
   102bc:	00102281 	jmpi	10228 <_puts_r>

000102c0 <strlen>:
   102c0:	208000cc 	andi	r2,r4,3
   102c4:	10001f1e 	bne	r2,zero,10344 <strlen+0x84>
   102c8:	20800017 	ldw	r2,0(r4)
   102cc:	01ffbff4 	movhi	r7,65279
   102d0:	39ffbfc4 	addi	r7,r7,-257
   102d4:	01a02074 	movhi	r6,32897
   102d8:	31a02004 	addi	r6,r6,-32640
   102dc:	11c7883a 	add	r3,r2,r7
   102e0:	0084303a 	nor	r2,zero,r2
   102e4:	1886703a 	and	r3,r3,r2
   102e8:	1986703a 	and	r3,r3,r6
   102ec:	2005883a 	mov	r2,r4
   102f0:	1800101e 	bne	r3,zero,10334 <strlen+0x74>
   102f4:	10800104 	addi	r2,r2,4
   102f8:	10c00017 	ldw	r3,0(r2)
   102fc:	19cb883a 	add	r5,r3,r7
   10300:	00c6303a 	nor	r3,zero,r3
   10304:	28c6703a 	and	r3,r5,r3
   10308:	1986703a 	and	r3,r3,r6
   1030c:	1800091e 	bne	r3,zero,10334 <strlen+0x74>
   10310:	10800104 	addi	r2,r2,4
   10314:	10c00017 	ldw	r3,0(r2)
   10318:	19cb883a 	add	r5,r3,r7
   1031c:	00c6303a 	nor	r3,zero,r3
   10320:	28c6703a 	and	r3,r5,r3
   10324:	1986703a 	and	r3,r3,r6
   10328:	183ff226 	beq	r3,zero,102f4 <strlen+0x34>
   1032c:	00000106 	br	10334 <strlen+0x74>
   10330:	10800044 	addi	r2,r2,1
   10334:	10c00007 	ldb	r3,0(r2)
   10338:	183ffd1e 	bne	r3,zero,10330 <strlen+0x70>
   1033c:	1105c83a 	sub	r2,r2,r4
   10340:	f800283a 	ret
   10344:	2005883a 	mov	r2,r4
   10348:	003ffa06 	br	10334 <strlen+0x74>

0001034c <__sfvwrite_r>:
   1034c:	30800217 	ldw	r2,8(r6)
   10350:	defff504 	addi	sp,sp,-44
   10354:	dd400615 	stw	r21,24(sp)
   10358:	dd000515 	stw	r20,20(sp)
   1035c:	dc000115 	stw	r16,4(sp)
   10360:	dfc00a15 	stw	ra,40(sp)
   10364:	df000915 	stw	fp,36(sp)
   10368:	ddc00815 	stw	r23,32(sp)
   1036c:	dd800715 	stw	r22,28(sp)
   10370:	dcc00415 	stw	r19,16(sp)
   10374:	dc800315 	stw	r18,12(sp)
   10378:	dc400215 	stw	r17,8(sp)
   1037c:	3029883a 	mov	r20,r6
   10380:	202b883a 	mov	r21,r4
   10384:	2821883a 	mov	r16,r5
   10388:	10002126 	beq	r2,zero,10410 <__sfvwrite_r+0xc4>
   1038c:	2880030b 	ldhu	r2,12(r5)
   10390:	10c0020c 	andi	r3,r2,8
   10394:	18ffffcc 	andi	r3,r3,65535
   10398:	18e0001c 	xori	r3,r3,32768
   1039c:	18e00004 	addi	r3,r3,-32768
   103a0:	18002826 	beq	r3,zero,10444 <__sfvwrite_r+0xf8>
   103a4:	28c00417 	ldw	r3,16(r5)
   103a8:	18002626 	beq	r3,zero,10444 <__sfvwrite_r+0xf8>
   103ac:	10c0008c 	andi	r3,r2,2
   103b0:	18ffffcc 	andi	r3,r3,65535
   103b4:	18e0001c 	xori	r3,r3,32768
   103b8:	18e00004 	addi	r3,r3,-32768
   103bc:	a4400017 	ldw	r17,0(r20)
   103c0:	18002b26 	beq	r3,zero,10470 <__sfvwrite_r+0x124>
   103c4:	0027883a 	mov	r19,zero
   103c8:	0025883a 	mov	r18,zero
   103cc:	05810004 	movi	r22,1024
   103d0:	980d883a 	mov	r6,r19
   103d4:	a809883a 	mov	r4,r21
   103d8:	90004f26 	beq	r18,zero,10518 <__sfvwrite_r+0x1cc>
   103dc:	900f883a 	mov	r7,r18
   103e0:	81400717 	ldw	r5,28(r16)
   103e4:	b480012e 	bgeu	r22,r18,103ec <__sfvwrite_r+0xa0>
   103e8:	01c10004 	movi	r7,1024
   103ec:	80800917 	ldw	r2,36(r16)
   103f0:	103ee83a 	callr	r2
   103f4:	0080540e 	bge	zero,r2,10548 <__sfvwrite_r+0x1fc>
   103f8:	a0c00217 	ldw	r3,8(r20)
   103fc:	98a7883a 	add	r19,r19,r2
   10400:	90a5c83a 	sub	r18,r18,r2
   10404:	1885c83a 	sub	r2,r3,r2
   10408:	a0800215 	stw	r2,8(r20)
   1040c:	103ff01e 	bne	r2,zero,103d0 <__sfvwrite_r+0x84>
   10410:	0005883a 	mov	r2,zero
   10414:	dfc00a17 	ldw	ra,40(sp)
   10418:	df000917 	ldw	fp,36(sp)
   1041c:	ddc00817 	ldw	r23,32(sp)
   10420:	dd800717 	ldw	r22,28(sp)
   10424:	dd400617 	ldw	r21,24(sp)
   10428:	dd000517 	ldw	r20,20(sp)
   1042c:	dcc00417 	ldw	r19,16(sp)
   10430:	dc800317 	ldw	r18,12(sp)
   10434:	dc400217 	ldw	r17,8(sp)
   10438:	dc000117 	ldw	r16,4(sp)
   1043c:	dec00b04 	addi	sp,sp,44
   10440:	f800283a 	ret
   10444:	a809883a 	mov	r4,r21
   10448:	800b883a 	mov	r5,r16
   1044c:	00119d80 	call	119d8 <__swsetup_r>
   10450:	1000f01e 	bne	r2,zero,10814 <__sfvwrite_r+0x4c8>
   10454:	8080030b 	ldhu	r2,12(r16)
   10458:	a4400017 	ldw	r17,0(r20)
   1045c:	10c0008c 	andi	r3,r2,2
   10460:	18ffffcc 	andi	r3,r3,65535
   10464:	18e0001c 	xori	r3,r3,32768
   10468:	18e00004 	addi	r3,r3,-32768
   1046c:	183fd51e 	bne	r3,zero,103c4 <__sfvwrite_r+0x78>
   10470:	10c0004c 	andi	r3,r2,1
   10474:	002d883a 	mov	r22,zero
   10478:	1800381e 	bne	r3,zero,1055c <__sfvwrite_r+0x210>
   1047c:	0025883a 	mov	r18,zero
   10480:	90002126 	beq	r18,zero,10508 <__sfvwrite_r+0x1bc>
   10484:	10c0800c 	andi	r3,r2,512
   10488:	18ffffcc 	andi	r3,r3,65535
   1048c:	18e0001c 	xori	r3,r3,32768
   10490:	18e00004 	addi	r3,r3,-32768
   10494:	84c00217 	ldw	r19,8(r16)
   10498:	18006b26 	beq	r3,zero,10648 <__sfvwrite_r+0x2fc>
   1049c:	980f883a 	mov	r7,r19
   104a0:	94c08636 	bltu	r18,r19,106bc <__sfvwrite_r+0x370>
   104a4:	10c1200c 	andi	r3,r2,1152
   104a8:	18009f1e 	bne	r3,zero,10728 <__sfvwrite_r+0x3dc>
   104ac:	81000017 	ldw	r4,0(r16)
   104b0:	982f883a 	mov	r23,r19
   104b4:	9039883a 	mov	fp,r18
   104b8:	9027883a 	mov	r19,r18
   104bc:	380d883a 	mov	r6,r7
   104c0:	b00b883a 	mov	r5,r22
   104c4:	d9c00015 	stw	r7,0(sp)
   104c8:	00111ec0 	call	111ec <memmove>
   104cc:	d9c00017 	ldw	r7,0(sp)
   104d0:	81000217 	ldw	r4,8(r16)
   104d4:	80800017 	ldw	r2,0(r16)
   104d8:	25efc83a 	sub	r23,r4,r23
   104dc:	11cf883a 	add	r7,r2,r7
   104e0:	85c00215 	stw	r23,8(r16)
   104e4:	81c00015 	stw	r7,0(r16)
   104e8:	a0800217 	ldw	r2,8(r20)
   104ec:	b72d883a 	add	r22,r22,fp
   104f0:	9725c83a 	sub	r18,r18,fp
   104f4:	14e7c83a 	sub	r19,r2,r19
   104f8:	a4c00215 	stw	r19,8(r20)
   104fc:	983fc426 	beq	r19,zero,10410 <__sfvwrite_r+0xc4>
   10500:	8080030b 	ldhu	r2,12(r16)
   10504:	903fdf1e 	bne	r18,zero,10484 <__sfvwrite_r+0x138>
   10508:	8d800017 	ldw	r22,0(r17)
   1050c:	8c800117 	ldw	r18,4(r17)
   10510:	8c400204 	addi	r17,r17,8
   10514:	003fda06 	br	10480 <__sfvwrite_r+0x134>
   10518:	8cc00017 	ldw	r19,0(r17)
   1051c:	8c800117 	ldw	r18,4(r17)
   10520:	8c400204 	addi	r17,r17,8
   10524:	003faa06 	br	103d0 <__sfvwrite_r+0x84>
   10528:	00113780 	call	11378 <_realloc_r>
   1052c:	102f883a 	mov	r23,r2
   10530:	10009f1e 	bne	r2,zero,107b0 <__sfvwrite_r+0x464>
   10534:	81400417 	ldw	r5,16(r16)
   10538:	a809883a 	mov	r4,r21
   1053c:	001218c0 	call	1218c <_free_r>
   10540:	00800304 	movi	r2,12
   10544:	a8800015 	stw	r2,0(r21)
   10548:	80c0030b 	ldhu	r3,12(r16)
   1054c:	00bfffc4 	movi	r2,-1
   10550:	18c01014 	ori	r3,r3,64
   10554:	80c0030d 	sth	r3,12(r16)
   10558:	003fae06 	br	10414 <__sfvwrite_r+0xc8>
   1055c:	0007883a 	mov	r3,zero
   10560:	0039883a 	mov	fp,zero
   10564:	0025883a 	mov	r18,zero
   10568:	90001e26 	beq	r18,zero,105e4 <__sfvwrite_r+0x298>
   1056c:	18006526 	beq	r3,zero,10704 <__sfvwrite_r+0x3b8>
   10570:	b02f883a 	mov	r23,r22
   10574:	9580012e 	bgeu	r18,r22,1057c <__sfvwrite_r+0x230>
   10578:	902f883a 	mov	r23,r18
   1057c:	81000017 	ldw	r4,0(r16)
   10580:	80800417 	ldw	r2,16(r16)
   10584:	84c00217 	ldw	r19,8(r16)
   10588:	81c00517 	ldw	r7,20(r16)
   1058c:	1100022e 	bgeu	r2,r4,10598 <__sfvwrite_r+0x24c>
   10590:	99e7883a 	add	r19,r19,r7
   10594:	9dc01816 	blt	r19,r23,105f8 <__sfvwrite_r+0x2ac>
   10598:	b9c03b16 	blt	r23,r7,10688 <__sfvwrite_r+0x33c>
   1059c:	80800917 	ldw	r2,36(r16)
   105a0:	81400717 	ldw	r5,28(r16)
   105a4:	a809883a 	mov	r4,r21
   105a8:	d8c00015 	stw	r3,0(sp)
   105ac:	e00d883a 	mov	r6,fp
   105b0:	103ee83a 	callr	r2
   105b4:	1027883a 	mov	r19,r2
   105b8:	d8c00017 	ldw	r3,0(sp)
   105bc:	00bfe20e 	bge	zero,r2,10548 <__sfvwrite_r+0x1fc>
   105c0:	b4edc83a 	sub	r22,r22,r19
   105c4:	b0001a26 	beq	r22,zero,10630 <__sfvwrite_r+0x2e4>
   105c8:	a0800217 	ldw	r2,8(r20)
   105cc:	e4f9883a 	add	fp,fp,r19
   105d0:	94e5c83a 	sub	r18,r18,r19
   105d4:	14e7c83a 	sub	r19,r2,r19
   105d8:	a4c00215 	stw	r19,8(r20)
   105dc:	983f8c26 	beq	r19,zero,10410 <__sfvwrite_r+0xc4>
   105e0:	903fe21e 	bne	r18,zero,1056c <__sfvwrite_r+0x220>
   105e4:	8f000017 	ldw	fp,0(r17)
   105e8:	8c800117 	ldw	r18,4(r17)
   105ec:	0007883a 	mov	r3,zero
   105f0:	8c400204 	addi	r17,r17,8
   105f4:	003fdc06 	br	10568 <__sfvwrite_r+0x21c>
   105f8:	e00b883a 	mov	r5,fp
   105fc:	980d883a 	mov	r6,r19
   10600:	d8c00015 	stw	r3,0(sp)
   10604:	00111ec0 	call	111ec <memmove>
   10608:	80800017 	ldw	r2,0(r16)
   1060c:	a809883a 	mov	r4,r21
   10610:	800b883a 	mov	r5,r16
   10614:	14c5883a 	add	r2,r2,r19
   10618:	80800015 	stw	r2,0(r16)
   1061c:	0011b4c0 	call	11b4c <_fflush_r>
   10620:	d8c00017 	ldw	r3,0(sp)
   10624:	103fc81e 	bne	r2,zero,10548 <__sfvwrite_r+0x1fc>
   10628:	b4edc83a 	sub	r22,r22,r19
   1062c:	b03fe61e 	bne	r22,zero,105c8 <__sfvwrite_r+0x27c>
   10630:	a809883a 	mov	r4,r21
   10634:	800b883a 	mov	r5,r16
   10638:	0011b4c0 	call	11b4c <_fflush_r>
   1063c:	103fc21e 	bne	r2,zero,10548 <__sfvwrite_r+0x1fc>
   10640:	0007883a 	mov	r3,zero
   10644:	003fe006 	br	105c8 <__sfvwrite_r+0x27c>
   10648:	81000017 	ldw	r4,0(r16)
   1064c:	80800417 	ldw	r2,16(r16)
   10650:	1100022e 	bgeu	r2,r4,1065c <__sfvwrite_r+0x310>
   10654:	9839883a 	mov	fp,r19
   10658:	9c806036 	bltu	r19,r18,107dc <__sfvwrite_r+0x490>
   1065c:	81c00517 	ldw	r7,20(r16)
   10660:	91c01c36 	bltu	r18,r7,106d4 <__sfvwrite_r+0x388>
   10664:	80800917 	ldw	r2,36(r16)
   10668:	81400717 	ldw	r5,28(r16)
   1066c:	a809883a 	mov	r4,r21
   10670:	b00d883a 	mov	r6,r22
   10674:	103ee83a 	callr	r2
   10678:	1027883a 	mov	r19,r2
   1067c:	00bfb20e 	bge	zero,r2,10548 <__sfvwrite_r+0x1fc>
   10680:	1039883a 	mov	fp,r2
   10684:	003f9806 	br	104e8 <__sfvwrite_r+0x19c>
   10688:	b80d883a 	mov	r6,r23
   1068c:	e00b883a 	mov	r5,fp
   10690:	d8c00015 	stw	r3,0(sp)
   10694:	00111ec0 	call	111ec <memmove>
   10698:	80800217 	ldw	r2,8(r16)
   1069c:	81000017 	ldw	r4,0(r16)
   106a0:	b827883a 	mov	r19,r23
   106a4:	15c5c83a 	sub	r2,r2,r23
   106a8:	25ef883a 	add	r23,r4,r23
   106ac:	80800215 	stw	r2,8(r16)
   106b0:	85c00015 	stw	r23,0(r16)
   106b4:	d8c00017 	ldw	r3,0(sp)
   106b8:	003fc106 	br	105c0 <__sfvwrite_r+0x274>
   106bc:	81000017 	ldw	r4,0(r16)
   106c0:	902f883a 	mov	r23,r18
   106c4:	9039883a 	mov	fp,r18
   106c8:	9027883a 	mov	r19,r18
   106cc:	900f883a 	mov	r7,r18
   106d0:	003f7a06 	br	104bc <__sfvwrite_r+0x170>
   106d4:	b00b883a 	mov	r5,r22
   106d8:	900d883a 	mov	r6,r18
   106dc:	00111ec0 	call	111ec <memmove>
   106e0:	80c00217 	ldw	r3,8(r16)
   106e4:	80800017 	ldw	r2,0(r16)
   106e8:	9027883a 	mov	r19,r18
   106ec:	1c87c83a 	sub	r3,r3,r18
   106f0:	1485883a 	add	r2,r2,r18
   106f4:	80c00215 	stw	r3,8(r16)
   106f8:	80800015 	stw	r2,0(r16)
   106fc:	9039883a 	mov	fp,r18
   10700:	003f7906 	br	104e8 <__sfvwrite_r+0x19c>
   10704:	e009883a 	mov	r4,fp
   10708:	01400284 	movi	r5,10
   1070c:	900d883a 	mov	r6,r18
   10710:	0010fb40 	call	10fb4 <memchr>
   10714:	10003c26 	beq	r2,zero,10808 <__sfvwrite_r+0x4bc>
   10718:	15800044 	addi	r22,r2,1
   1071c:	b72dc83a 	sub	r22,r22,fp
   10720:	00c00044 	movi	r3,1
   10724:	003f9206 	br	10570 <__sfvwrite_r+0x224>
   10728:	81000517 	ldw	r4,20(r16)
   1072c:	81400417 	ldw	r5,16(r16)
   10730:	80c00017 	ldw	r3,0(r16)
   10734:	210d883a 	add	r6,r4,r4
   10738:	3109883a 	add	r4,r6,r4
   1073c:	2026d7fa 	srli	r19,r4,31
   10740:	1979c83a 	sub	fp,r3,r5
   10744:	e1800044 	addi	r6,fp,1
   10748:	9909883a 	add	r4,r19,r4
   1074c:	2027d07a 	srai	r19,r4,1
   10750:	3489883a 	add	r4,r6,r18
   10754:	980d883a 	mov	r6,r19
   10758:	9900022e 	bgeu	r19,r4,10764 <__sfvwrite_r+0x418>
   1075c:	2027883a 	mov	r19,r4
   10760:	200d883a 	mov	r6,r4
   10764:	1081000c 	andi	r2,r2,1024
   10768:	10bfffcc 	andi	r2,r2,65535
   1076c:	10a0001c 	xori	r2,r2,32768
   10770:	10a00004 	addi	r2,r2,-32768
   10774:	a809883a 	mov	r4,r21
   10778:	103f6b26 	beq	r2,zero,10528 <__sfvwrite_r+0x1dc>
   1077c:	300b883a 	mov	r5,r6
   10780:	00108300 	call	10830 <_malloc_r>
   10784:	102f883a 	mov	r23,r2
   10788:	103f6d26 	beq	r2,zero,10540 <__sfvwrite_r+0x1f4>
   1078c:	81400417 	ldw	r5,16(r16)
   10790:	1009883a 	mov	r4,r2
   10794:	e00d883a 	mov	r6,fp
   10798:	00110ac0 	call	110ac <memcpy>
   1079c:	8080030b 	ldhu	r2,12(r16)
   107a0:	00fedfc4 	movi	r3,-1153
   107a4:	10c4703a 	and	r2,r2,r3
   107a8:	10802014 	ori	r2,r2,128
   107ac:	8080030d 	sth	r2,12(r16)
   107b0:	bf09883a 	add	r4,r23,fp
   107b4:	9f07c83a 	sub	r3,r19,fp
   107b8:	85c00415 	stw	r23,16(r16)
   107bc:	84c00515 	stw	r19,20(r16)
   107c0:	81000015 	stw	r4,0(r16)
   107c4:	902f883a 	mov	r23,r18
   107c8:	80c00215 	stw	r3,8(r16)
   107cc:	9039883a 	mov	fp,r18
   107d0:	9027883a 	mov	r19,r18
   107d4:	900f883a 	mov	r7,r18
   107d8:	003f3806 	br	104bc <__sfvwrite_r+0x170>
   107dc:	b00b883a 	mov	r5,r22
   107e0:	980d883a 	mov	r6,r19
   107e4:	00111ec0 	call	111ec <memmove>
   107e8:	80800017 	ldw	r2,0(r16)
   107ec:	a809883a 	mov	r4,r21
   107f0:	800b883a 	mov	r5,r16
   107f4:	14c5883a 	add	r2,r2,r19
   107f8:	80800015 	stw	r2,0(r16)
   107fc:	0011b4c0 	call	11b4c <_fflush_r>
   10800:	103f3926 	beq	r2,zero,104e8 <__sfvwrite_r+0x19c>
   10804:	003f5006 	br	10548 <__sfvwrite_r+0x1fc>
   10808:	95800044 	addi	r22,r18,1
   1080c:	00c00044 	movi	r3,1
   10810:	003f5706 	br	10570 <__sfvwrite_r+0x224>
   10814:	80c0030b 	ldhu	r3,12(r16)
   10818:	00bfffc4 	movi	r2,-1
   1081c:	18c01014 	ori	r3,r3,64
   10820:	80c0030d 	sth	r3,12(r16)
   10824:	00c00244 	movi	r3,9
   10828:	a8c00015 	stw	r3,0(r21)
   1082c:	003ef906 	br	10414 <__sfvwrite_r+0xc8>

00010830 <_malloc_r>:
   10830:	defff604 	addi	sp,sp,-40
   10834:	dc800215 	stw	r18,8(sp)
   10838:	dfc00915 	stw	ra,36(sp)
   1083c:	df000815 	stw	fp,32(sp)
   10840:	ddc00715 	stw	r23,28(sp)
   10844:	dd800615 	stw	r22,24(sp)
   10848:	dd400515 	stw	r21,20(sp)
   1084c:	dd000415 	stw	r20,16(sp)
   10850:	dcc00315 	stw	r19,12(sp)
   10854:	dc400115 	stw	r17,4(sp)
   10858:	dc000015 	stw	r16,0(sp)
   1085c:	288002c4 	addi	r2,r5,11
   10860:	00c00584 	movi	r3,22
   10864:	2025883a 	mov	r18,r4
   10868:	18802b2e 	bgeu	r3,r2,10918 <_malloc_r+0xe8>
   1086c:	047ffe04 	movi	r17,-8
   10870:	1462703a 	and	r17,r2,r17
   10874:	88002a16 	blt	r17,zero,10920 <_malloc_r+0xf0>
   10878:	89402936 	bltu	r17,r5,10920 <_malloc_r+0xf0>
   1087c:	9009883a 	mov	r4,r18
   10880:	00133300 	call	13330 <__malloc_lock>
   10884:	00807dc4 	movi	r2,503
   10888:	14402936 	bltu	r2,r17,10930 <_malloc_r+0x100>
   1088c:	8808d0fa 	srli	r4,r17,3
   10890:	04c00074 	movhi	r19,1
   10894:	9cd66004 	addi	r19,r19,22912
   10898:	2105883a 	add	r2,r4,r4
   1089c:	1085883a 	add	r2,r2,r2
   108a0:	1085883a 	add	r2,r2,r2
   108a4:	9885883a 	add	r2,r19,r2
   108a8:	14000317 	ldw	r16,12(r2)
   108ac:	80815526 	beq	r16,r2,10e04 <_malloc_r+0x5d4>
   108b0:	81000117 	ldw	r4,4(r16)
   108b4:	00bfff04 	movi	r2,-4
   108b8:	80c00317 	ldw	r3,12(r16)
   108bc:	2084703a 	and	r2,r4,r2
   108c0:	8085883a 	add	r2,r16,r2
   108c4:	11800117 	ldw	r6,4(r2)
   108c8:	81400217 	ldw	r5,8(r16)
   108cc:	9009883a 	mov	r4,r18
   108d0:	31800054 	ori	r6,r6,1
   108d4:	11800115 	stw	r6,4(r2)
   108d8:	28c00315 	stw	r3,12(r5)
   108dc:	19400215 	stw	r5,8(r3)
   108e0:	00133500 	call	13350 <__malloc_unlock>
   108e4:	80800204 	addi	r2,r16,8
   108e8:	dfc00917 	ldw	ra,36(sp)
   108ec:	df000817 	ldw	fp,32(sp)
   108f0:	ddc00717 	ldw	r23,28(sp)
   108f4:	dd800617 	ldw	r22,24(sp)
   108f8:	dd400517 	ldw	r21,20(sp)
   108fc:	dd000417 	ldw	r20,16(sp)
   10900:	dcc00317 	ldw	r19,12(sp)
   10904:	dc800217 	ldw	r18,8(sp)
   10908:	dc400117 	ldw	r17,4(sp)
   1090c:	dc000017 	ldw	r16,0(sp)
   10910:	dec00a04 	addi	sp,sp,40
   10914:	f800283a 	ret
   10918:	04400404 	movi	r17,16
   1091c:	897fd72e 	bgeu	r17,r5,1087c <_malloc_r+0x4c>
   10920:	00800304 	movi	r2,12
   10924:	90800015 	stw	r2,0(r18)
   10928:	0005883a 	mov	r2,zero
   1092c:	003fee06 	br	108e8 <_malloc_r+0xb8>
   10930:	8808d27a 	srli	r4,r17,9
   10934:	20007126 	beq	r4,zero,10afc <_malloc_r+0x2cc>
   10938:	00800104 	movi	r2,4
   1093c:	1100eb36 	bltu	r2,r4,10cec <_malloc_r+0x4bc>
   10940:	8808d1ba 	srli	r4,r17,6
   10944:	21000e04 	addi	r4,r4,56
   10948:	210b883a 	add	r5,r4,r4
   1094c:	294b883a 	add	r5,r5,r5
   10950:	294b883a 	add	r5,r5,r5
   10954:	04c00074 	movhi	r19,1
   10958:	9cd66004 	addi	r19,r19,22912
   1095c:	994b883a 	add	r5,r19,r5
   10960:	2c000317 	ldw	r16,12(r5)
   10964:	2c000e26 	beq	r5,r16,109a0 <_malloc_r+0x170>
   10968:	80c00117 	ldw	r3,4(r16)
   1096c:	01ffff04 	movi	r7,-4
   10970:	018003c4 	movi	r6,15
   10974:	19c6703a 	and	r3,r3,r7
   10978:	1c45c83a 	sub	r2,r3,r17
   1097c:	30800716 	blt	r6,r2,1099c <_malloc_r+0x16c>
   10980:	1000610e 	bge	r2,zero,10b08 <_malloc_r+0x2d8>
   10984:	84000317 	ldw	r16,12(r16)
   10988:	2c000526 	beq	r5,r16,109a0 <_malloc_r+0x170>
   1098c:	80c00117 	ldw	r3,4(r16)
   10990:	19c6703a 	and	r3,r3,r7
   10994:	1c45c83a 	sub	r2,r3,r17
   10998:	30bff90e 	bge	r6,r2,10980 <_malloc_r+0x150>
   1099c:	213fffc4 	addi	r4,r4,-1
   109a0:	21000044 	addi	r4,r4,1
   109a4:	9c000417 	ldw	r16,16(r19)
   109a8:	00c00074 	movhi	r3,1
   109ac:	18d66004 	addi	r3,r3,22912
   109b0:	1a400204 	addi	r9,r3,8
   109b4:	8240ff26 	beq	r16,r9,10db4 <_malloc_r+0x584>
   109b8:	81400117 	ldw	r5,4(r16)
   109bc:	00bfff04 	movi	r2,-4
   109c0:	018003c4 	movi	r6,15
   109c4:	2884703a 	and	r2,r5,r2
   109c8:	144bc83a 	sub	r5,r2,r17
   109cc:	3140ea16 	blt	r6,r5,10d78 <_malloc_r+0x548>
   109d0:	1a400515 	stw	r9,20(r3)
   109d4:	1a400415 	stw	r9,16(r3)
   109d8:	2800570e 	bge	r5,zero,10b38 <_malloc_r+0x308>
   109dc:	01407fc4 	movi	r5,511
   109e0:	2880ca36 	bltu	r5,r2,10d0c <_malloc_r+0x4dc>
   109e4:	1004d0fa 	srli	r2,r2,3
   109e8:	02000044 	movi	r8,1
   109ec:	19c00117 	ldw	r7,4(r3)
   109f0:	108b883a 	add	r5,r2,r2
   109f4:	294b883a 	add	r5,r5,r5
   109f8:	1005d0ba 	srai	r2,r2,2
   109fc:	294b883a 	add	r5,r5,r5
   10a00:	28cb883a 	add	r5,r5,r3
   10a04:	29800217 	ldw	r6,8(r5)
   10a08:	4084983a 	sll	r2,r8,r2
   10a0c:	81400315 	stw	r5,12(r16)
   10a10:	81800215 	stw	r6,8(r16)
   10a14:	11c4b03a 	or	r2,r2,r7
   10a18:	18800115 	stw	r2,4(r3)
   10a1c:	2c000215 	stw	r16,8(r5)
   10a20:	34000315 	stw	r16,12(r6)
   10a24:	200bd0ba 	srai	r5,r4,2
   10a28:	00c00044 	movi	r3,1
   10a2c:	194a983a 	sll	r5,r3,r5
   10a30:	11404936 	bltu	r2,r5,10b58 <_malloc_r+0x328>
   10a34:	1146703a 	and	r3,r2,r5
   10a38:	18000a1e 	bne	r3,zero,10a64 <_malloc_r+0x234>
   10a3c:	00ffff04 	movi	r3,-4
   10a40:	294b883a 	add	r5,r5,r5
   10a44:	20c8703a 	and	r4,r4,r3
   10a48:	1146703a 	and	r3,r2,r5
   10a4c:	21000104 	addi	r4,r4,4
   10a50:	1800041e 	bne	r3,zero,10a64 <_malloc_r+0x234>
   10a54:	294b883a 	add	r5,r5,r5
   10a58:	1146703a 	and	r3,r2,r5
   10a5c:	21000104 	addi	r4,r4,4
   10a60:	183ffc26 	beq	r3,zero,10a54 <_malloc_r+0x224>
   10a64:	023fff04 	movi	r8,-4
   10a68:	01c003c4 	movi	r7,15
   10a6c:	2105883a 	add	r2,r4,r4
   10a70:	1085883a 	add	r2,r2,r2
   10a74:	1085883a 	add	r2,r2,r2
   10a78:	9899883a 	add	r12,r19,r2
   10a7c:	62800304 	addi	r10,r12,12
   10a80:	2017883a 	mov	r11,r4
   10a84:	54000017 	ldw	r16,0(r10)
   10a88:	51bffd04 	addi	r6,r10,-12
   10a8c:	8180041e 	bne	r16,r6,10aa0 <_malloc_r+0x270>
   10a90:	0000ca06 	br	10dbc <_malloc_r+0x58c>
   10a94:	10001c0e 	bge	r2,zero,10b08 <_malloc_r+0x2d8>
   10a98:	84000317 	ldw	r16,12(r16)
   10a9c:	8180c726 	beq	r16,r6,10dbc <_malloc_r+0x58c>
   10aa0:	80c00117 	ldw	r3,4(r16)
   10aa4:	1a06703a 	and	r3,r3,r8
   10aa8:	1c45c83a 	sub	r2,r3,r17
   10aac:	38bff90e 	bge	r7,r2,10a94 <_malloc_r+0x264>
   10ab0:	81000317 	ldw	r4,12(r16)
   10ab4:	81400217 	ldw	r5,8(r16)
   10ab8:	8447883a 	add	r3,r16,r17
   10abc:	8c400054 	ori	r17,r17,1
   10ac0:	29000315 	stw	r4,12(r5)
   10ac4:	21400215 	stw	r5,8(r4)
   10ac8:	84400115 	stw	r17,4(r16)
   10acc:	1889883a 	add	r4,r3,r2
   10ad0:	11400054 	ori	r5,r2,1
   10ad4:	98c00515 	stw	r3,20(r19)
   10ad8:	98c00415 	stw	r3,16(r19)
   10adc:	20800015 	stw	r2,0(r4)
   10ae0:	1a400315 	stw	r9,12(r3)
   10ae4:	1a400215 	stw	r9,8(r3)
   10ae8:	19400115 	stw	r5,4(r3)
   10aec:	9009883a 	mov	r4,r18
   10af0:	00133500 	call	13350 <__malloc_unlock>
   10af4:	80800204 	addi	r2,r16,8
   10af8:	003f7b06 	br	108e8 <_malloc_r+0xb8>
   10afc:	8808d0fa 	srli	r4,r17,3
   10b00:	210b883a 	add	r5,r4,r4
   10b04:	003f9106 	br	1094c <_malloc_r+0x11c>
   10b08:	80c7883a 	add	r3,r16,r3
   10b0c:	19400117 	ldw	r5,4(r3)
   10b10:	80800317 	ldw	r2,12(r16)
   10b14:	81000217 	ldw	r4,8(r16)
   10b18:	29400054 	ori	r5,r5,1
   10b1c:	19400115 	stw	r5,4(r3)
   10b20:	20800315 	stw	r2,12(r4)
   10b24:	11000215 	stw	r4,8(r2)
   10b28:	9009883a 	mov	r4,r18
   10b2c:	00133500 	call	13350 <__malloc_unlock>
   10b30:	80800204 	addi	r2,r16,8
   10b34:	003f6c06 	br	108e8 <_malloc_r+0xb8>
   10b38:	8085883a 	add	r2,r16,r2
   10b3c:	10c00117 	ldw	r3,4(r2)
   10b40:	9009883a 	mov	r4,r18
   10b44:	18c00054 	ori	r3,r3,1
   10b48:	10c00115 	stw	r3,4(r2)
   10b4c:	00133500 	call	13350 <__malloc_unlock>
   10b50:	80800204 	addi	r2,r16,8
   10b54:	003f6406 	br	108e8 <_malloc_r+0xb8>
   10b58:	9c000217 	ldw	r16,8(r19)
   10b5c:	00bfff04 	movi	r2,-4
   10b60:	85400117 	ldw	r21,4(r16)
   10b64:	a8aa703a 	and	r21,r21,r2
   10b68:	ac400336 	bltu	r21,r17,10b78 <_malloc_r+0x348>
   10b6c:	ac45c83a 	sub	r2,r21,r17
   10b70:	00c003c4 	movi	r3,15
   10b74:	18805316 	blt	r3,r2,10cc4 <_malloc_r+0x494>
   10b78:	d5e6a217 	ldw	r23,-25976(gp)
   10b7c:	d0e00217 	ldw	r3,-32760(gp)
   10b80:	00bfffc4 	movi	r2,-1
   10b84:	8579883a 	add	fp,r16,r21
   10b88:	8def883a 	add	r23,r17,r23
   10b8c:	1880d226 	beq	r3,r2,10ed8 <_malloc_r+0x6a8>
   10b90:	bdc403c4 	addi	r23,r23,4111
   10b94:	00bc0004 	movi	r2,-4096
   10b98:	b8ae703a 	and	r23,r23,r2
   10b9c:	9009883a 	mov	r4,r18
   10ba0:	b80b883a 	mov	r5,r23
   10ba4:	00119740 	call	11974 <_sbrk_r>
   10ba8:	1029883a 	mov	r20,r2
   10bac:	00bfffc4 	movi	r2,-1
   10bb0:	a080d126 	beq	r20,r2,10ef8 <_malloc_r+0x6c8>
   10bb4:	a7009f36 	bltu	r20,fp,10e34 <_malloc_r+0x604>
   10bb8:	058000b4 	movhi	r22,2
   10bbc:	b5a28e04 	addi	r22,r22,-30152
   10bc0:	b0800017 	ldw	r2,0(r22)
   10bc4:	b885883a 	add	r2,r23,r2
   10bc8:	b0800015 	stw	r2,0(r22)
   10bcc:	e500cf26 	beq	fp,r20,10f0c <_malloc_r+0x6dc>
   10bd0:	d1200217 	ldw	r4,-32760(gp)
   10bd4:	00ffffc4 	movi	r3,-1
   10bd8:	20c0e026 	beq	r4,r3,10f5c <_malloc_r+0x72c>
   10bdc:	a739c83a 	sub	fp,r20,fp
   10be0:	1705883a 	add	r2,r2,fp
   10be4:	b0800015 	stw	r2,0(r22)
   10be8:	a08001cc 	andi	r2,r20,7
   10bec:	1000a526 	beq	r2,zero,10e84 <_malloc_r+0x654>
   10bf0:	a0a9c83a 	sub	r20,r20,r2
   10bf4:	00c40204 	movi	r3,4104
   10bf8:	a5000204 	addi	r20,r20,8
   10bfc:	1885c83a 	sub	r2,r3,r2
   10c00:	a5c7883a 	add	r3,r20,r23
   10c04:	18c3ffcc 	andi	r3,r3,4095
   10c08:	10efc83a 	sub	r23,r2,r3
   10c0c:	9009883a 	mov	r4,r18
   10c10:	b80b883a 	mov	r5,r23
   10c14:	00119740 	call	11974 <_sbrk_r>
   10c18:	00ffffc4 	movi	r3,-1
   10c1c:	10c0cc26 	beq	r2,r3,10f50 <_malloc_r+0x720>
   10c20:	1505c83a 	sub	r2,r2,r20
   10c24:	b887883a 	add	r3,r23,r2
   10c28:	18c00054 	ori	r3,r3,1
   10c2c:	b0800017 	ldw	r2,0(r22)
   10c30:	9d000215 	stw	r20,8(r19)
   10c34:	a0c00115 	stw	r3,4(r20)
   10c38:	b885883a 	add	r2,r23,r2
   10c3c:	b0800015 	stw	r2,0(r22)
   10c40:	84c00e26 	beq	r16,r19,10c7c <_malloc_r+0x44c>
   10c44:	00c003c4 	movi	r3,15
   10c48:	1d40902e 	bgeu	r3,r21,10e8c <_malloc_r+0x65c>
   10c4c:	ad7ffd04 	addi	r21,r21,-12
   10c50:	013ffe04 	movi	r4,-8
   10c54:	a908703a 	and	r4,r21,r4
   10c58:	810b883a 	add	r5,r16,r4
   10c5c:	01800144 	movi	r6,5
   10c60:	29800115 	stw	r6,4(r5)
   10c64:	29800215 	stw	r6,8(r5)
   10c68:	81400117 	ldw	r5,4(r16)
   10c6c:	2940004c 	andi	r5,r5,1
   10c70:	214ab03a 	or	r5,r4,r5
   10c74:	81400115 	stw	r5,4(r16)
   10c78:	1900ae36 	bltu	r3,r4,10f34 <_malloc_r+0x704>
   10c7c:	d0e6a117 	ldw	r3,-25980(gp)
   10c80:	1880012e 	bgeu	r3,r2,10c88 <_malloc_r+0x458>
   10c84:	d0a6a115 	stw	r2,-25980(gp)
   10c88:	d0e6a017 	ldw	r3,-25984(gp)
   10c8c:	9c000217 	ldw	r16,8(r19)
   10c90:	1880012e 	bgeu	r3,r2,10c98 <_malloc_r+0x468>
   10c94:	d0a6a015 	stw	r2,-25984(gp)
   10c98:	80c00117 	ldw	r3,4(r16)
   10c9c:	00bfff04 	movi	r2,-4
   10ca0:	1886703a 	and	r3,r3,r2
   10ca4:	1c45c83a 	sub	r2,r3,r17
   10ca8:	1c400236 	bltu	r3,r17,10cb4 <_malloc_r+0x484>
   10cac:	00c003c4 	movi	r3,15
   10cb0:	18800416 	blt	r3,r2,10cc4 <_malloc_r+0x494>
   10cb4:	9009883a 	mov	r4,r18
   10cb8:	00133500 	call	13350 <__malloc_unlock>
   10cbc:	0005883a 	mov	r2,zero
   10cc0:	003f0906 	br	108e8 <_malloc_r+0xb8>
   10cc4:	88c00054 	ori	r3,r17,1
   10cc8:	10800054 	ori	r2,r2,1
   10ccc:	80c00115 	stw	r3,4(r16)
   10cd0:	8463883a 	add	r17,r16,r17
   10cd4:	88800115 	stw	r2,4(r17)
   10cd8:	9009883a 	mov	r4,r18
   10cdc:	9c400215 	stw	r17,8(r19)
   10ce0:	00133500 	call	13350 <__malloc_unlock>
   10ce4:	80800204 	addi	r2,r16,8
   10ce8:	003eff06 	br	108e8 <_malloc_r+0xb8>
   10cec:	00800504 	movi	r2,20
   10cf0:	1100492e 	bgeu	r2,r4,10e18 <_malloc_r+0x5e8>
   10cf4:	00801504 	movi	r2,84
   10cf8:	11005c36 	bltu	r2,r4,10e6c <_malloc_r+0x63c>
   10cfc:	8808d33a 	srli	r4,r17,12
   10d00:	21001b84 	addi	r4,r4,110
   10d04:	210b883a 	add	r5,r4,r4
   10d08:	003f1006 	br	1094c <_malloc_r+0x11c>
   10d0c:	1006d27a 	srli	r3,r2,9
   10d10:	01400104 	movi	r5,4
   10d14:	28c0432e 	bgeu	r5,r3,10e24 <_malloc_r+0x5f4>
   10d18:	01400504 	movi	r5,20
   10d1c:	28c07036 	bltu	r5,r3,10ee0 <_malloc_r+0x6b0>
   10d20:	194016c4 	addi	r5,r3,91
   10d24:	294d883a 	add	r6,r5,r5
   10d28:	318d883a 	add	r6,r6,r6
   10d2c:	318d883a 	add	r6,r6,r6
   10d30:	998d883a 	add	r6,r19,r6
   10d34:	30c00217 	ldw	r3,8(r6)
   10d38:	01c00074 	movhi	r7,1
   10d3c:	39d66004 	addi	r7,r7,22912
   10d40:	19805726 	beq	r3,r6,10ea0 <_malloc_r+0x670>
   10d44:	01ffff04 	movi	r7,-4
   10d48:	19400117 	ldw	r5,4(r3)
   10d4c:	29ca703a 	and	r5,r5,r7
   10d50:	1140022e 	bgeu	r2,r5,10d5c <_malloc_r+0x52c>
   10d54:	18c00217 	ldw	r3,8(r3)
   10d58:	30fffb1e 	bne	r6,r3,10d48 <_malloc_r+0x518>
   10d5c:	19400317 	ldw	r5,12(r3)
   10d60:	98800117 	ldw	r2,4(r19)
   10d64:	81400315 	stw	r5,12(r16)
   10d68:	80c00215 	stw	r3,8(r16)
   10d6c:	2c000215 	stw	r16,8(r5)
   10d70:	1c000315 	stw	r16,12(r3)
   10d74:	003f2b06 	br	10a24 <_malloc_r+0x1f4>
   10d78:	8445883a 	add	r2,r16,r17
   10d7c:	8c400054 	ori	r17,r17,1
   10d80:	18800515 	stw	r2,20(r3)
   10d84:	18800415 	stw	r2,16(r3)
   10d88:	29000054 	ori	r4,r5,1
   10d8c:	1147883a 	add	r3,r2,r5
   10d90:	84400115 	stw	r17,4(r16)
   10d94:	11000115 	stw	r4,4(r2)
   10d98:	12400315 	stw	r9,12(r2)
   10d9c:	12400215 	stw	r9,8(r2)
   10da0:	19400015 	stw	r5,0(r3)
   10da4:	9009883a 	mov	r4,r18
   10da8:	00133500 	call	13350 <__malloc_unlock>
   10dac:	80800204 	addi	r2,r16,8
   10db0:	003ecd06 	br	108e8 <_malloc_r+0xb8>
   10db4:	18800117 	ldw	r2,4(r3)
   10db8:	003f1a06 	br	10a24 <_malloc_r+0x1f4>
   10dbc:	5ac00044 	addi	r11,r11,1
   10dc0:	588000cc 	andi	r2,r11,3
   10dc4:	52800204 	addi	r10,r10,8
   10dc8:	103f2e1e 	bne	r2,zero,10a84 <_malloc_r+0x254>
   10dcc:	20c000cc 	andi	r3,r4,3
   10dd0:	60bffe04 	addi	r2,r12,-8
   10dd4:	18006f26 	beq	r3,zero,10f94 <_malloc_r+0x764>
   10dd8:	63000017 	ldw	r12,0(r12)
   10ddc:	213fffc4 	addi	r4,r4,-1
   10de0:	60bffa26 	beq	r12,r2,10dcc <_malloc_r+0x59c>
   10de4:	98800117 	ldw	r2,4(r19)
   10de8:	294b883a 	add	r5,r5,r5
   10dec:	117f5a36 	bltu	r2,r5,10b58 <_malloc_r+0x328>
   10df0:	283f5926 	beq	r5,zero,10b58 <_malloc_r+0x328>
   10df4:	1146703a 	and	r3,r2,r5
   10df8:	18001626 	beq	r3,zero,10e54 <_malloc_r+0x624>
   10dfc:	5809883a 	mov	r4,r11
   10e00:	003f1a06 	br	10a6c <_malloc_r+0x23c>
   10e04:	80800204 	addi	r2,r16,8
   10e08:	84000517 	ldw	r16,20(r16)
   10e0c:	143ea81e 	bne	r2,r16,108b0 <_malloc_r+0x80>
   10e10:	21000084 	addi	r4,r4,2
   10e14:	003ee306 	br	109a4 <_malloc_r+0x174>
   10e18:	210016c4 	addi	r4,r4,91
   10e1c:	210b883a 	add	r5,r4,r4
   10e20:	003eca06 	br	1094c <_malloc_r+0x11c>
   10e24:	100ad1ba 	srli	r5,r2,6
   10e28:	29400e04 	addi	r5,r5,56
   10e2c:	294d883a 	add	r6,r5,r5
   10e30:	003fbd06 	br	10d28 <_malloc_r+0x4f8>
   10e34:	84ff6026 	beq	r16,r19,10bb8 <_malloc_r+0x388>
   10e38:	00800074 	movhi	r2,1
   10e3c:	10966004 	addi	r2,r2,22912
   10e40:	14000217 	ldw	r16,8(r2)
   10e44:	00bfff04 	movi	r2,-4
   10e48:	80c00117 	ldw	r3,4(r16)
   10e4c:	1886703a 	and	r3,r3,r2
   10e50:	003f9406 	br	10ca4 <_malloc_r+0x474>
   10e54:	294b883a 	add	r5,r5,r5
   10e58:	1146703a 	and	r3,r2,r5
   10e5c:	5ac00104 	addi	r11,r11,4
   10e60:	183ffc26 	beq	r3,zero,10e54 <_malloc_r+0x624>
   10e64:	5809883a 	mov	r4,r11
   10e68:	003f0006 	br	10a6c <_malloc_r+0x23c>
   10e6c:	00805504 	movi	r2,340
   10e70:	11001336 	bltu	r2,r4,10ec0 <_malloc_r+0x690>
   10e74:	8808d3fa 	srli	r4,r17,15
   10e78:	21001dc4 	addi	r4,r4,119
   10e7c:	210b883a 	add	r5,r4,r4
   10e80:	003eb206 	br	1094c <_malloc_r+0x11c>
   10e84:	00840004 	movi	r2,4096
   10e88:	003f5d06 	br	10c00 <_malloc_r+0x3d0>
   10e8c:	00800044 	movi	r2,1
   10e90:	a0800115 	stw	r2,4(r20)
   10e94:	a021883a 	mov	r16,r20
   10e98:	0007883a 	mov	r3,zero
   10e9c:	003f8106 	br	10ca4 <_malloc_r+0x474>
   10ea0:	280bd0ba 	srai	r5,r5,2
   10ea4:	01800044 	movi	r6,1
   10ea8:	38800117 	ldw	r2,4(r7)
   10eac:	314c983a 	sll	r6,r6,r5
   10eb0:	180b883a 	mov	r5,r3
   10eb4:	3084b03a 	or	r2,r6,r2
   10eb8:	38800115 	stw	r2,4(r7)
   10ebc:	003fa906 	br	10d64 <_malloc_r+0x534>
   10ec0:	00815504 	movi	r2,1364
   10ec4:	11001836 	bltu	r2,r4,10f28 <_malloc_r+0x6f8>
   10ec8:	8808d4ba 	srli	r4,r17,18
   10ecc:	21001f04 	addi	r4,r4,124
   10ed0:	210b883a 	add	r5,r4,r4
   10ed4:	003e9d06 	br	1094c <_malloc_r+0x11c>
   10ed8:	bdc00404 	addi	r23,r23,16
   10edc:	003f2f06 	br	10b9c <_malloc_r+0x36c>
   10ee0:	01401504 	movi	r5,84
   10ee4:	28c01f36 	bltu	r5,r3,10f64 <_malloc_r+0x734>
   10ee8:	100ad33a 	srli	r5,r2,12
   10eec:	29401b84 	addi	r5,r5,110
   10ef0:	294d883a 	add	r6,r5,r5
   10ef4:	003f8c06 	br	10d28 <_malloc_r+0x4f8>
   10ef8:	9c000217 	ldw	r16,8(r19)
   10efc:	00bfff04 	movi	r2,-4
   10f00:	80c00117 	ldw	r3,4(r16)
   10f04:	1886703a 	and	r3,r3,r2
   10f08:	003f6606 	br	10ca4 <_malloc_r+0x474>
   10f0c:	e0c3ffcc 	andi	r3,fp,4095
   10f10:	183f2f1e 	bne	r3,zero,10bd0 <_malloc_r+0x3a0>
   10f14:	98c00217 	ldw	r3,8(r19)
   10f18:	bd49883a 	add	r4,r23,r21
   10f1c:	21000054 	ori	r4,r4,1
   10f20:	19000115 	stw	r4,4(r3)
   10f24:	003f5506 	br	10c7c <_malloc_r+0x44c>
   10f28:	01403f04 	movi	r5,252
   10f2c:	01001f84 	movi	r4,126
   10f30:	003e8606 	br	1094c <_malloc_r+0x11c>
   10f34:	9009883a 	mov	r4,r18
   10f38:	81400204 	addi	r5,r16,8
   10f3c:	001218c0 	call	1218c <_free_r>
   10f40:	008000b4 	movhi	r2,2
   10f44:	10a28e04 	addi	r2,r2,-30152
   10f48:	10800017 	ldw	r2,0(r2)
   10f4c:	003f4b06 	br	10c7c <_malloc_r+0x44c>
   10f50:	00c00044 	movi	r3,1
   10f54:	002f883a 	mov	r23,zero
   10f58:	003f3406 	br	10c2c <_malloc_r+0x3fc>
   10f5c:	d5200215 	stw	r20,-32760(gp)
   10f60:	003f2106 	br	10be8 <_malloc_r+0x3b8>
   10f64:	01405504 	movi	r5,340
   10f68:	28c00436 	bltu	r5,r3,10f7c <_malloc_r+0x74c>
   10f6c:	100ad3fa 	srli	r5,r2,15
   10f70:	29401dc4 	addi	r5,r5,119
   10f74:	294d883a 	add	r6,r5,r5
   10f78:	003f6b06 	br	10d28 <_malloc_r+0x4f8>
   10f7c:	01415504 	movi	r5,1364
   10f80:	28c00936 	bltu	r5,r3,10fa8 <_malloc_r+0x778>
   10f84:	100ad4ba 	srli	r5,r2,18
   10f88:	29401f04 	addi	r5,r5,124
   10f8c:	294d883a 	add	r6,r5,r5
   10f90:	003f6506 	br	10d28 <_malloc_r+0x4f8>
   10f94:	98800117 	ldw	r2,4(r19)
   10f98:	0146303a 	nor	r3,zero,r5
   10f9c:	1884703a 	and	r2,r3,r2
   10fa0:	98800115 	stw	r2,4(r19)
   10fa4:	003f9006 	br	10de8 <_malloc_r+0x5b8>
   10fa8:	01803f04 	movi	r6,252
   10fac:	01401f84 	movi	r5,126
   10fb0:	003f5d06 	br	10d28 <_malloc_r+0x4f8>

00010fb4 <memchr>:
   10fb4:	008000c4 	movi	r2,3
   10fb8:	29403fcc 	andi	r5,r5,255
   10fbc:	1180282e 	bgeu	r2,r6,11060 <memchr+0xac>
   10fc0:	2086703a 	and	r3,r4,r2
   10fc4:	1800351e 	bne	r3,zero,1109c <memchr+0xe8>
   10fc8:	2816923a 	slli	r11,r5,8
   10fcc:	2093883a 	add	r9,r4,r2
   10fd0:	22000084 	addi	r8,r4,2
   10fd4:	5957883a 	add	r11,r11,r5
   10fd8:	5816923a 	slli	r11,r11,8
   10fdc:	20c00044 	addi	r3,r4,1
   10fe0:	037fbff4 	movhi	r13,65279
   10fe4:	6b7fbfc4 	addi	r13,r13,-257
   10fe8:	5957883a 	add	r11,r11,r5
   10fec:	5816923a 	slli	r11,r11,8
   10ff0:	03202074 	movhi	r12,32897
   10ff4:	63202004 	addi	r12,r12,-32640
   10ff8:	101d883a 	mov	r14,r2
   10ffc:	5957883a 	add	r11,r11,r5
   11000:	21c00017 	ldw	r7,0(r4)
   11004:	31bfff04 	addi	r6,r6,-4
   11008:	1805883a 	mov	r2,r3
   1100c:	3acef03a 	xor	r7,r7,r11
   11010:	3b55883a 	add	r10,r7,r13
   11014:	01ce303a 	nor	r7,zero,r7
   11018:	51ce703a 	and	r7,r10,r7
   1101c:	3b0e703a 	and	r7,r7,r12
   11020:	38000a26 	beq	r7,zero,1104c <memchr+0x98>
   11024:	21c00003 	ldbu	r7,0(r4)
   11028:	39401e26 	beq	r7,r5,110a4 <memchr+0xf0>
   1102c:	19c00003 	ldbu	r7,0(r3)
   11030:	39401926 	beq	r7,r5,11098 <memchr+0xe4>
   11034:	41c00003 	ldbu	r7,0(r8)
   11038:	4005883a 	mov	r2,r8
   1103c:	39401626 	beq	r7,r5,11098 <memchr+0xe4>
   11040:	49c00003 	ldbu	r7,0(r9)
   11044:	4805883a 	mov	r2,r9
   11048:	39401326 	beq	r7,r5,11098 <memchr+0xe4>
   1104c:	21000104 	addi	r4,r4,4
   11050:	4a400104 	addi	r9,r9,4
   11054:	42000104 	addi	r8,r8,4
   11058:	18c00104 	addi	r3,r3,4
   1105c:	71bfe836 	bltu	r14,r6,11000 <memchr+0x4c>
   11060:	2005883a 	mov	r2,r4
   11064:	30000a26 	beq	r6,zero,11090 <memchr+0xdc>
   11068:	10c00003 	ldbu	r3,0(r2)
   1106c:	19400a26 	beq	r3,r5,11098 <memchr+0xe4>
   11070:	10c00044 	addi	r3,r2,1
   11074:	118d883a 	add	r6,r2,r6
   11078:	00000306 	br	11088 <memchr+0xd4>
   1107c:	11000003 	ldbu	r4,0(r2)
   11080:	18c00044 	addi	r3,r3,1
   11084:	21400426 	beq	r4,r5,11098 <memchr+0xe4>
   11088:	1805883a 	mov	r2,r3
   1108c:	19bffb1e 	bne	r3,r6,1107c <memchr+0xc8>
   11090:	0005883a 	mov	r2,zero
   11094:	f800283a 	ret
   11098:	f800283a 	ret
   1109c:	2005883a 	mov	r2,r4
   110a0:	003ff106 	br	11068 <memchr+0xb4>
   110a4:	2005883a 	mov	r2,r4
   110a8:	f800283a 	ret

000110ac <memcpy>:
   110ac:	defffb04 	addi	sp,sp,-20
   110b0:	dc000015 	stw	r16,0(sp)
   110b4:	dfc00415 	stw	ra,16(sp)
   110b8:	dcc00315 	stw	r19,12(sp)
   110bc:	dc800215 	stw	r18,8(sp)
   110c0:	dc400115 	stw	r17,4(sp)
   110c4:	00c003c4 	movi	r3,15
   110c8:	2021883a 	mov	r16,r4
   110cc:	3005883a 	mov	r2,r6
   110d0:	1980032e 	bgeu	r3,r6,110e0 <memcpy+0x34>
   110d4:	2906b03a 	or	r3,r5,r4
   110d8:	18c000cc 	andi	r3,r3,3
   110dc:	18001026 	beq	r3,zero,11120 <memcpy+0x74>
   110e0:	8007883a 	mov	r3,r16
   110e4:	288f883a 	add	r7,r5,r2
   110e8:	10000526 	beq	r2,zero,11100 <memcpy+0x54>
   110ec:	29800003 	ldbu	r6,0(r5)
   110f0:	18c00044 	addi	r3,r3,1
   110f4:	29400044 	addi	r5,r5,1
   110f8:	19bfffc5 	stb	r6,-1(r3)
   110fc:	29fffb1e 	bne	r5,r7,110ec <memcpy+0x40>
   11100:	8005883a 	mov	r2,r16
   11104:	dfc00417 	ldw	ra,16(sp)
   11108:	dcc00317 	ldw	r19,12(sp)
   1110c:	dc800217 	ldw	r18,8(sp)
   11110:	dc400117 	ldw	r17,4(sp)
   11114:	dc000017 	ldw	r16,0(sp)
   11118:	dec00504 	addi	sp,sp,20
   1111c:	f800283a 	ret
   11120:	32bffc04 	addi	r10,r6,-16
   11124:	5014d13a 	srli	r10,r10,4
   11128:	20800404 	addi	r2,r4,16
   1112c:	2007883a 	mov	r3,r4
   11130:	5008913a 	slli	r4,r10,4
   11134:	280f883a 	mov	r7,r5
   11138:	1105883a 	add	r2,r2,r4
   1113c:	3a000017 	ldw	r8,0(r7)
   11140:	18c00404 	addi	r3,r3,16
   11144:	39c00404 	addi	r7,r7,16
   11148:	1a3ffc15 	stw	r8,-16(r3)
   1114c:	3a3ffd17 	ldw	r8,-12(r7)
   11150:	1a3ffd15 	stw	r8,-12(r3)
   11154:	3a3ffe17 	ldw	r8,-8(r7)
   11158:	1a3ffe15 	stw	r8,-8(r3)
   1115c:	3a3fff17 	ldw	r8,-4(r7)
   11160:	1a3fff15 	stw	r8,-4(r3)
   11164:	18bff51e 	bne	r3,r2,1113c <memcpy+0x90>
   11168:	52800044 	addi	r10,r10,1
   1116c:	5014913a 	slli	r10,r10,4
   11170:	308003cc 	andi	r2,r6,15
   11174:	010000c4 	movi	r4,3
   11178:	8287883a 	add	r3,r16,r10
   1117c:	2a95883a 	add	r10,r5,r10
   11180:	2080182e 	bgeu	r4,r2,111e4 <memcpy+0x138>
   11184:	147fff04 	addi	r17,r2,-4
   11188:	8808d0ba 	srli	r4,r17,2
   1118c:	1a400104 	addi	r9,r3,4
   11190:	180d883a 	mov	r6,r3
   11194:	2105883a 	add	r2,r4,r4
   11198:	1085883a 	add	r2,r2,r2
   1119c:	4893883a 	add	r9,r9,r2
   111a0:	500f883a 	mov	r7,r10
   111a4:	3a000017 	ldw	r8,0(r7)
   111a8:	31800104 	addi	r6,r6,4
   111ac:	39c00104 	addi	r7,r7,4
   111b0:	323fff15 	stw	r8,-4(r6)
   111b4:	327ffb1e 	bne	r6,r9,111a4 <memcpy+0xf8>
   111b8:	20800044 	addi	r2,r4,1
   111bc:	1085883a 	add	r2,r2,r2
   111c0:	1085883a 	add	r2,r2,r2
   111c4:	017fff04 	movi	r5,-4
   111c8:	18a5883a 	add	r18,r3,r2
   111cc:	50a7883a 	add	r19,r10,r2
   111d0:	0012d440 	call	12d44 <__mulsi3>
   111d4:	1445883a 	add	r2,r2,r17
   111d8:	980b883a 	mov	r5,r19
   111dc:	9007883a 	mov	r3,r18
   111e0:	003fc006 	br	110e4 <memcpy+0x38>
   111e4:	500b883a 	mov	r5,r10
   111e8:	003fbe06 	br	110e4 <memcpy+0x38>

000111ec <memmove>:
   111ec:	defffb04 	addi	sp,sp,-20
   111f0:	dc000015 	stw	r16,0(sp)
   111f4:	dfc00415 	stw	ra,16(sp)
   111f8:	dcc00315 	stw	r19,12(sp)
   111fc:	dc800215 	stw	r18,8(sp)
   11200:	dc400115 	stw	r17,4(sp)
   11204:	2021883a 	mov	r16,r4
   11208:	300f883a 	mov	r7,r6
   1120c:	2900122e 	bgeu	r5,r4,11258 <memmove+0x6c>
   11210:	2987883a 	add	r3,r5,r6
   11214:	20c0102e 	bgeu	r4,r3,11258 <memmove+0x6c>
   11218:	218b883a 	add	r5,r4,r6
   1121c:	1989c83a 	sub	r4,r3,r6
   11220:	30000526 	beq	r6,zero,11238 <memmove+0x4c>
   11224:	18ffffc4 	addi	r3,r3,-1
   11228:	18800003 	ldbu	r2,0(r3)
   1122c:	297fffc4 	addi	r5,r5,-1
   11230:	28800005 	stb	r2,0(r5)
   11234:	193ffb1e 	bne	r3,r4,11224 <memmove+0x38>
   11238:	8005883a 	mov	r2,r16
   1123c:	dfc00417 	ldw	ra,16(sp)
   11240:	dcc00317 	ldw	r19,12(sp)
   11244:	dc800217 	ldw	r18,8(sp)
   11248:	dc400117 	ldw	r17,4(sp)
   1124c:	dc000017 	ldw	r16,0(sp)
   11250:	dec00504 	addi	sp,sp,20
   11254:	f800283a 	ret
   11258:	008003c4 	movi	r2,15
   1125c:	1180422e 	bgeu	r2,r6,11368 <memmove+0x17c>
   11260:	2c04b03a 	or	r2,r5,r16
   11264:	108000cc 	andi	r2,r2,3
   11268:	10003f1e 	bne	r2,zero,11368 <memmove+0x17c>
   1126c:	32bffc04 	addi	r10,r6,-16
   11270:	5014d13a 	srli	r10,r10,4
   11274:	81000404 	addi	r4,r16,16
   11278:	8007883a 	mov	r3,r16
   1127c:	5004913a 	slli	r2,r10,4
   11280:	280f883a 	mov	r7,r5
   11284:	2089883a 	add	r4,r4,r2
   11288:	38800017 	ldw	r2,0(r7)
   1128c:	18c00404 	addi	r3,r3,16
   11290:	39c00404 	addi	r7,r7,16
   11294:	18bffc15 	stw	r2,-16(r3)
   11298:	38bffd17 	ldw	r2,-12(r7)
   1129c:	18bffd15 	stw	r2,-12(r3)
   112a0:	38bffe17 	ldw	r2,-8(r7)
   112a4:	18bffe15 	stw	r2,-8(r3)
   112a8:	38bfff17 	ldw	r2,-4(r7)
   112ac:	18bfff15 	stw	r2,-4(r3)
   112b0:	193ff51e 	bne	r3,r4,11288 <memmove+0x9c>
   112b4:	52800044 	addi	r10,r10,1
   112b8:	5014913a 	slli	r10,r10,4
   112bc:	31c003cc 	andi	r7,r6,15
   112c0:	008000c4 	movi	r2,3
   112c4:	8287883a 	add	r3,r16,r10
   112c8:	2a95883a 	add	r10,r5,r10
   112cc:	11c0282e 	bgeu	r2,r7,11370 <memmove+0x184>
   112d0:	3c7fff04 	addi	r17,r7,-4
   112d4:	8808d0ba 	srli	r4,r17,2
   112d8:	1a400104 	addi	r9,r3,4
   112dc:	180d883a 	mov	r6,r3
   112e0:	2105883a 	add	r2,r4,r4
   112e4:	1085883a 	add	r2,r2,r2
   112e8:	4893883a 	add	r9,r9,r2
   112ec:	5005883a 	mov	r2,r10
   112f0:	12000017 	ldw	r8,0(r2)
   112f4:	31800104 	addi	r6,r6,4
   112f8:	10800104 	addi	r2,r2,4
   112fc:	323fff15 	stw	r8,-4(r6)
   11300:	327ffb1e 	bne	r6,r9,112f0 <memmove+0x104>
   11304:	20800044 	addi	r2,r4,1
   11308:	1085883a 	add	r2,r2,r2
   1130c:	1085883a 	add	r2,r2,r2
   11310:	017fff04 	movi	r5,-4
   11314:	18a5883a 	add	r18,r3,r2
   11318:	50a7883a 	add	r19,r10,r2
   1131c:	0012d440 	call	12d44 <__mulsi3>
   11320:	144f883a 	add	r7,r2,r17
   11324:	980b883a 	mov	r5,r19
   11328:	9007883a 	mov	r3,r18
   1132c:	383fc226 	beq	r7,zero,11238 <memmove+0x4c>
   11330:	19cf883a 	add	r7,r3,r7
   11334:	29800003 	ldbu	r6,0(r5)
   11338:	18c00044 	addi	r3,r3,1
   1133c:	29400044 	addi	r5,r5,1
   11340:	19bfffc5 	stb	r6,-1(r3)
   11344:	19fffb1e 	bne	r3,r7,11334 <memmove+0x148>
   11348:	8005883a 	mov	r2,r16
   1134c:	dfc00417 	ldw	ra,16(sp)
   11350:	dcc00317 	ldw	r19,12(sp)
   11354:	dc800217 	ldw	r18,8(sp)
   11358:	dc400117 	ldw	r17,4(sp)
   1135c:	dc000017 	ldw	r16,0(sp)
   11360:	dec00504 	addi	sp,sp,20
   11364:	f800283a 	ret
   11368:	8007883a 	mov	r3,r16
   1136c:	003fef06 	br	1132c <memmove+0x140>
   11370:	500b883a 	mov	r5,r10
   11374:	003fed06 	br	1132c <memmove+0x140>

00011378 <_realloc_r>:
   11378:	defff504 	addi	sp,sp,-44
   1137c:	dd400615 	stw	r21,24(sp)
   11380:	dc800315 	stw	r18,12(sp)
   11384:	dc000115 	stw	r16,4(sp)
   11388:	dfc00a15 	stw	ra,40(sp)
   1138c:	df000915 	stw	fp,36(sp)
   11390:	ddc00815 	stw	r23,32(sp)
   11394:	dd800715 	stw	r22,28(sp)
   11398:	dd000515 	stw	r20,20(sp)
   1139c:	dcc00415 	stw	r19,16(sp)
   113a0:	dc400215 	stw	r17,8(sp)
   113a4:	2821883a 	mov	r16,r5
   113a8:	202b883a 	mov	r21,r4
   113ac:	3025883a 	mov	r18,r6
   113b0:	28009626 	beq	r5,zero,1160c <_realloc_r+0x294>
   113b4:	00133300 	call	13330 <__malloc_lock>
   113b8:	80bfff17 	ldw	r2,-4(r16)
   113bc:	04ffff04 	movi	r19,-4
   113c0:	90c002c4 	addi	r3,r18,11
   113c4:	01000584 	movi	r4,22
   113c8:	85bffe04 	addi	r22,r16,-8
   113cc:	14e6703a 	and	r19,r2,r19
   113d0:	20c0372e 	bgeu	r4,r3,114b0 <_realloc_r+0x138>
   113d4:	047ffe04 	movi	r17,-8
   113d8:	1c62703a 	and	r17,r3,r17
   113dc:	8807883a 	mov	r3,r17
   113e0:	88005a16 	blt	r17,zero,1154c <_realloc_r+0x1d4>
   113e4:	8c805936 	bltu	r17,r18,1154c <_realloc_r+0x1d4>
   113e8:	98c0340e 	bge	r19,r3,114bc <_realloc_r+0x144>
   113ec:	07000074 	movhi	fp,1
   113f0:	e7166004 	addi	fp,fp,22912
   113f4:	e1400217 	ldw	r5,8(fp)
   113f8:	b4c9883a 	add	r4,r22,r19
   113fc:	29009026 	beq	r5,r4,11640 <_realloc_r+0x2c8>
   11400:	21800117 	ldw	r6,4(r4)
   11404:	01ffff84 	movi	r7,-2
   11408:	31ce703a 	and	r7,r6,r7
   1140c:	21cf883a 	add	r7,r4,r7
   11410:	39c00117 	ldw	r7,4(r7)
   11414:	39c0004c 	andi	r7,r7,1
   11418:	38004326 	beq	r7,zero,11528 <_realloc_r+0x1b0>
   1141c:	000d883a 	mov	r6,zero
   11420:	0009883a 	mov	r4,zero
   11424:	1080004c 	andi	r2,r2,1
   11428:	10005a1e 	bne	r2,zero,11594 <_realloc_r+0x21c>
   1142c:	85fffe17 	ldw	r23,-8(r16)
   11430:	00bfff04 	movi	r2,-4
   11434:	b5efc83a 	sub	r23,r22,r23
   11438:	b9c00117 	ldw	r7,4(r23)
   1143c:	388e703a 	and	r7,r7,r2
   11440:	3ccf883a 	add	r7,r7,r19
   11444:	20005226 	beq	r4,zero,11590 <_realloc_r+0x218>
   11448:	31e9883a 	add	r20,r6,r7
   1144c:	2140c726 	beq	r4,r5,1176c <_realloc_r+0x3f4>
   11450:	a0c04f16 	blt	r20,r3,11590 <_realloc_r+0x218>
   11454:	20800317 	ldw	r2,12(r4)
   11458:	20c00217 	ldw	r3,8(r4)
   1145c:	99bfff04 	addi	r6,r19,-4
   11460:	01000904 	movi	r4,36
   11464:	18800315 	stw	r2,12(r3)
   11468:	10c00215 	stw	r3,8(r2)
   1146c:	b8c00217 	ldw	r3,8(r23)
   11470:	b8800317 	ldw	r2,12(r23)
   11474:	bc800204 	addi	r18,r23,8
   11478:	18800315 	stw	r2,12(r3)
   1147c:	10c00215 	stw	r3,8(r2)
   11480:	2180ed36 	bltu	r4,r6,11838 <_realloc_r+0x4c0>
   11484:	008004c4 	movi	r2,19
   11488:	11809b2e 	bgeu	r2,r6,116f8 <_realloc_r+0x380>
   1148c:	80800017 	ldw	r2,0(r16)
   11490:	b8800215 	stw	r2,8(r23)
   11494:	80800117 	ldw	r2,4(r16)
   11498:	b8800315 	stw	r2,12(r23)
   1149c:	008006c4 	movi	r2,27
   114a0:	1180f936 	bltu	r2,r6,11888 <_realloc_r+0x510>
   114a4:	b8800404 	addi	r2,r23,16
   114a8:	80c00204 	addi	r3,r16,8
   114ac:	00009406 	br	11700 <_realloc_r+0x388>
   114b0:	00c00404 	movi	r3,16
   114b4:	1823883a 	mov	r17,r3
   114b8:	003fca06 	br	113e4 <_realloc_r+0x6c>
   114bc:	9829883a 	mov	r20,r19
   114c0:	a447c83a 	sub	r3,r20,r17
   114c4:	010003c4 	movi	r4,15
   114c8:	1080004c 	andi	r2,r2,1
   114cc:	20c02336 	bltu	r4,r3,1155c <_realloc_r+0x1e4>
   114d0:	1504b03a 	or	r2,r2,r20
   114d4:	b0800115 	stw	r2,4(r22)
   114d8:	b52d883a 	add	r22,r22,r20
   114dc:	b0800117 	ldw	r2,4(r22)
   114e0:	10800054 	ori	r2,r2,1
   114e4:	b0800115 	stw	r2,4(r22)
   114e8:	a809883a 	mov	r4,r21
   114ec:	00133500 	call	13350 <__malloc_unlock>
   114f0:	8025883a 	mov	r18,r16
   114f4:	9005883a 	mov	r2,r18
   114f8:	dfc00a17 	ldw	ra,40(sp)
   114fc:	df000917 	ldw	fp,36(sp)
   11500:	ddc00817 	ldw	r23,32(sp)
   11504:	dd800717 	ldw	r22,28(sp)
   11508:	dd400617 	ldw	r21,24(sp)
   1150c:	dd000517 	ldw	r20,20(sp)
   11510:	dcc00417 	ldw	r19,16(sp)
   11514:	dc800317 	ldw	r18,12(sp)
   11518:	dc400217 	ldw	r17,8(sp)
   1151c:	dc000117 	ldw	r16,4(sp)
   11520:	dec00b04 	addi	sp,sp,44
   11524:	f800283a 	ret
   11528:	01ffff04 	movi	r7,-4
   1152c:	31cc703a 	and	r6,r6,r7
   11530:	34e9883a 	add	r20,r6,r19
   11534:	a0ffbb16 	blt	r20,r3,11424 <_realloc_r+0xac>
   11538:	20c00317 	ldw	r3,12(r4)
   1153c:	21000217 	ldw	r4,8(r4)
   11540:	20c00315 	stw	r3,12(r4)
   11544:	19000215 	stw	r4,8(r3)
   11548:	003fdd06 	br	114c0 <_realloc_r+0x148>
   1154c:	00800304 	movi	r2,12
   11550:	a8800015 	stw	r2,0(r21)
   11554:	0025883a 	mov	r18,zero
   11558:	003fe606 	br	114f4 <_realloc_r+0x17c>
   1155c:	1444b03a 	or	r2,r2,r17
   11560:	b0800115 	stw	r2,4(r22)
   11564:	b44b883a 	add	r5,r22,r17
   11568:	18800054 	ori	r2,r3,1
   1156c:	28800115 	stw	r2,4(r5)
   11570:	28c7883a 	add	r3,r5,r3
   11574:	18800117 	ldw	r2,4(r3)
   11578:	a809883a 	mov	r4,r21
   1157c:	29400204 	addi	r5,r5,8
   11580:	10800054 	ori	r2,r2,1
   11584:	18800115 	stw	r2,4(r3)
   11588:	001218c0 	call	1218c <_free_r>
   1158c:	003fd606 	br	114e8 <_realloc_r+0x170>
   11590:	38c0330e 	bge	r7,r3,11660 <_realloc_r+0x2e8>
   11594:	900b883a 	mov	r5,r18
   11598:	a809883a 	mov	r4,r21
   1159c:	00108300 	call	10830 <_malloc_r>
   115a0:	1025883a 	mov	r18,r2
   115a4:	10001626 	beq	r2,zero,11600 <_realloc_r+0x288>
   115a8:	80bfff17 	ldw	r2,-4(r16)
   115ac:	00ffff84 	movi	r3,-2
   115b0:	913ffe04 	addi	r4,r18,-8
   115b4:	10c6703a 	and	r3,r2,r3
   115b8:	b0c7883a 	add	r3,r22,r3
   115bc:	20c09926 	beq	r4,r3,11824 <_realloc_r+0x4ac>
   115c0:	99bfff04 	addi	r6,r19,-4
   115c4:	00800904 	movi	r2,36
   115c8:	11806436 	bltu	r2,r6,1175c <_realloc_r+0x3e4>
   115cc:	00c004c4 	movi	r3,19
   115d0:	19804036 	bltu	r3,r6,116d4 <_realloc_r+0x35c>
   115d4:	9005883a 	mov	r2,r18
   115d8:	8007883a 	mov	r3,r16
   115dc:	19000017 	ldw	r4,0(r3)
   115e0:	11000015 	stw	r4,0(r2)
   115e4:	19000117 	ldw	r4,4(r3)
   115e8:	11000115 	stw	r4,4(r2)
   115ec:	18c00217 	ldw	r3,8(r3)
   115f0:	10c00215 	stw	r3,8(r2)
   115f4:	a809883a 	mov	r4,r21
   115f8:	800b883a 	mov	r5,r16
   115fc:	001218c0 	call	1218c <_free_r>
   11600:	a809883a 	mov	r4,r21
   11604:	00133500 	call	13350 <__malloc_unlock>
   11608:	003fba06 	br	114f4 <_realloc_r+0x17c>
   1160c:	300b883a 	mov	r5,r6
   11610:	dfc00a17 	ldw	ra,40(sp)
   11614:	df000917 	ldw	fp,36(sp)
   11618:	ddc00817 	ldw	r23,32(sp)
   1161c:	dd800717 	ldw	r22,28(sp)
   11620:	dd400617 	ldw	r21,24(sp)
   11624:	dd000517 	ldw	r20,20(sp)
   11628:	dcc00417 	ldw	r19,16(sp)
   1162c:	dc800317 	ldw	r18,12(sp)
   11630:	dc400217 	ldw	r17,8(sp)
   11634:	dc000117 	ldw	r16,4(sp)
   11638:	dec00b04 	addi	sp,sp,44
   1163c:	00108301 	jmpi	10830 <_malloc_r>
   11640:	29800117 	ldw	r6,4(r5)
   11644:	013fff04 	movi	r4,-4
   11648:	89c00404 	addi	r7,r17,16
   1164c:	310c703a 	and	r6,r6,r4
   11650:	34c9883a 	add	r4,r6,r19
   11654:	21c0340e 	bge	r4,r7,11728 <_realloc_r+0x3b0>
   11658:	2809883a 	mov	r4,r5
   1165c:	003f7106 	br	11424 <_realloc_r+0xac>
   11660:	b8800317 	ldw	r2,12(r23)
   11664:	b8c00217 	ldw	r3,8(r23)
   11668:	99bfff04 	addi	r6,r19,-4
   1166c:	01000904 	movi	r4,36
   11670:	18800315 	stw	r2,12(r3)
   11674:	10c00215 	stw	r3,8(r2)
   11678:	bc800204 	addi	r18,r23,8
   1167c:	21807836 	bltu	r4,r6,11860 <_realloc_r+0x4e8>
   11680:	008004c4 	movi	r2,19
   11684:	1180732e 	bgeu	r2,r6,11854 <_realloc_r+0x4dc>
   11688:	80800017 	ldw	r2,0(r16)
   1168c:	b8800215 	stw	r2,8(r23)
   11690:	80800117 	ldw	r2,4(r16)
   11694:	b8800315 	stw	r2,12(r23)
   11698:	008006c4 	movi	r2,27
   1169c:	11808936 	bltu	r2,r6,118c4 <_realloc_r+0x54c>
   116a0:	b8800404 	addi	r2,r23,16
   116a4:	80c00204 	addi	r3,r16,8
   116a8:	19000017 	ldw	r4,0(r3)
   116ac:	9021883a 	mov	r16,r18
   116b0:	3829883a 	mov	r20,r7
   116b4:	11000015 	stw	r4,0(r2)
   116b8:	19000117 	ldw	r4,4(r3)
   116bc:	b82d883a 	mov	r22,r23
   116c0:	11000115 	stw	r4,4(r2)
   116c4:	18c00217 	ldw	r3,8(r3)
   116c8:	10c00215 	stw	r3,8(r2)
   116cc:	b8800117 	ldw	r2,4(r23)
   116d0:	003f7b06 	br	114c0 <_realloc_r+0x148>
   116d4:	80c00017 	ldw	r3,0(r16)
   116d8:	90c00015 	stw	r3,0(r18)
   116dc:	80c00117 	ldw	r3,4(r16)
   116e0:	90c00115 	stw	r3,4(r18)
   116e4:	00c006c4 	movi	r3,27
   116e8:	19804636 	bltu	r3,r6,11804 <_realloc_r+0x48c>
   116ec:	90800204 	addi	r2,r18,8
   116f0:	80c00204 	addi	r3,r16,8
   116f4:	003fb906 	br	115dc <_realloc_r+0x264>
   116f8:	9005883a 	mov	r2,r18
   116fc:	8007883a 	mov	r3,r16
   11700:	19000017 	ldw	r4,0(r3)
   11704:	9021883a 	mov	r16,r18
   11708:	b82d883a 	mov	r22,r23
   1170c:	11000015 	stw	r4,0(r2)
   11710:	19000117 	ldw	r4,4(r3)
   11714:	11000115 	stw	r4,4(r2)
   11718:	18c00217 	ldw	r3,8(r3)
   1171c:	10c00215 	stw	r3,8(r2)
   11720:	b8800117 	ldw	r2,4(r23)
   11724:	003f6606 	br	114c0 <_realloc_r+0x148>
   11728:	2445c83a 	sub	r2,r4,r17
   1172c:	b46d883a 	add	r22,r22,r17
   11730:	10800054 	ori	r2,r2,1
   11734:	b0800115 	stw	r2,4(r22)
   11738:	80bfff17 	ldw	r2,-4(r16)
   1173c:	a809883a 	mov	r4,r21
   11740:	e5800215 	stw	r22,8(fp)
   11744:	1080004c 	andi	r2,r2,1
   11748:	88a2b03a 	or	r17,r17,r2
   1174c:	847fff15 	stw	r17,-4(r16)
   11750:	00133500 	call	13350 <__malloc_unlock>
   11754:	8025883a 	mov	r18,r16
   11758:	003f6606 	br	114f4 <_realloc_r+0x17c>
   1175c:	9009883a 	mov	r4,r18
   11760:	800b883a 	mov	r5,r16
   11764:	00111ec0 	call	111ec <memmove>
   11768:	003fa206 	br	115f4 <_realloc_r+0x27c>
   1176c:	88800404 	addi	r2,r17,16
   11770:	a0bf8716 	blt	r20,r2,11590 <_realloc_r+0x218>
   11774:	b8800317 	ldw	r2,12(r23)
   11778:	b8c00217 	ldw	r3,8(r23)
   1177c:	99bfff04 	addi	r6,r19,-4
   11780:	01000904 	movi	r4,36
   11784:	18800315 	stw	r2,12(r3)
   11788:	10c00215 	stw	r3,8(r2)
   1178c:	bc800204 	addi	r18,r23,8
   11790:	21806536 	bltu	r4,r6,11928 <_realloc_r+0x5b0>
   11794:	008004c4 	movi	r2,19
   11798:	1180592e 	bgeu	r2,r6,11900 <_realloc_r+0x588>
   1179c:	80800017 	ldw	r2,0(r16)
   117a0:	b8800215 	stw	r2,8(r23)
   117a4:	80800117 	ldw	r2,4(r16)
   117a8:	b8800315 	stw	r2,12(r23)
   117ac:	008006c4 	movi	r2,27
   117b0:	11806136 	bltu	r2,r6,11938 <_realloc_r+0x5c0>
   117b4:	b8800404 	addi	r2,r23,16
   117b8:	80c00204 	addi	r3,r16,8
   117bc:	19000017 	ldw	r4,0(r3)
   117c0:	11000015 	stw	r4,0(r2)
   117c4:	19000117 	ldw	r4,4(r3)
   117c8:	11000115 	stw	r4,4(r2)
   117cc:	18c00217 	ldw	r3,8(r3)
   117d0:	10c00215 	stw	r3,8(r2)
   117d4:	a447c83a 	sub	r3,r20,r17
   117d8:	bc45883a 	add	r2,r23,r17
   117dc:	18c00054 	ori	r3,r3,1
   117e0:	10c00115 	stw	r3,4(r2)
   117e4:	b8c00117 	ldw	r3,4(r23)
   117e8:	e0800215 	stw	r2,8(fp)
   117ec:	a809883a 	mov	r4,r21
   117f0:	1880004c 	andi	r2,r3,1
   117f4:	88a2b03a 	or	r17,r17,r2
   117f8:	bc400115 	stw	r17,4(r23)
   117fc:	00133500 	call	13350 <__malloc_unlock>
   11800:	003f3c06 	br	114f4 <_realloc_r+0x17c>
   11804:	80c00217 	ldw	r3,8(r16)
   11808:	90c00215 	stw	r3,8(r18)
   1180c:	80c00317 	ldw	r3,12(r16)
   11810:	90c00315 	stw	r3,12(r18)
   11814:	30802426 	beq	r6,r2,118a8 <_realloc_r+0x530>
   11818:	90800404 	addi	r2,r18,16
   1181c:	80c00404 	addi	r3,r16,16
   11820:	003f6e06 	br	115dc <_realloc_r+0x264>
   11824:	953fff17 	ldw	r20,-4(r18)
   11828:	00ffff04 	movi	r3,-4
   1182c:	a0e8703a 	and	r20,r20,r3
   11830:	a4e9883a 	add	r20,r20,r19
   11834:	003f2206 	br	114c0 <_realloc_r+0x148>
   11838:	800b883a 	mov	r5,r16
   1183c:	9009883a 	mov	r4,r18
   11840:	00111ec0 	call	111ec <memmove>
   11844:	9021883a 	mov	r16,r18
   11848:	b8800117 	ldw	r2,4(r23)
   1184c:	b82d883a 	mov	r22,r23
   11850:	003f1b06 	br	114c0 <_realloc_r+0x148>
   11854:	9005883a 	mov	r2,r18
   11858:	8007883a 	mov	r3,r16
   1185c:	003f9206 	br	116a8 <_realloc_r+0x330>
   11860:	800b883a 	mov	r5,r16
   11864:	9009883a 	mov	r4,r18
   11868:	d9c00015 	stw	r7,0(sp)
   1186c:	00111ec0 	call	111ec <memmove>
   11870:	d9c00017 	ldw	r7,0(sp)
   11874:	9021883a 	mov	r16,r18
   11878:	b8800117 	ldw	r2,4(r23)
   1187c:	3829883a 	mov	r20,r7
   11880:	b82d883a 	mov	r22,r23
   11884:	003f0e06 	br	114c0 <_realloc_r+0x148>
   11888:	80800217 	ldw	r2,8(r16)
   1188c:	b8800415 	stw	r2,16(r23)
   11890:	80800317 	ldw	r2,12(r16)
   11894:	b8800515 	stw	r2,20(r23)
   11898:	31001226 	beq	r6,r4,118e4 <_realloc_r+0x56c>
   1189c:	b8800604 	addi	r2,r23,24
   118a0:	80c00404 	addi	r3,r16,16
   118a4:	003f9606 	br	11700 <_realloc_r+0x388>
   118a8:	81000417 	ldw	r4,16(r16)
   118ac:	90800604 	addi	r2,r18,24
   118b0:	80c00604 	addi	r3,r16,24
   118b4:	91000415 	stw	r4,16(r18)
   118b8:	81000517 	ldw	r4,20(r16)
   118bc:	91000515 	stw	r4,20(r18)
   118c0:	003f4606 	br	115dc <_realloc_r+0x264>
   118c4:	80800217 	ldw	r2,8(r16)
   118c8:	b8800415 	stw	r2,16(r23)
   118cc:	80800317 	ldw	r2,12(r16)
   118d0:	b8800515 	stw	r2,20(r23)
   118d4:	31000d26 	beq	r6,r4,1190c <_realloc_r+0x594>
   118d8:	b8800604 	addi	r2,r23,24
   118dc:	80c00404 	addi	r3,r16,16
   118e0:	003f7106 	br	116a8 <_realloc_r+0x330>
   118e4:	81000417 	ldw	r4,16(r16)
   118e8:	b8800804 	addi	r2,r23,32
   118ec:	80c00604 	addi	r3,r16,24
   118f0:	b9000615 	stw	r4,24(r23)
   118f4:	81000517 	ldw	r4,20(r16)
   118f8:	b9000715 	stw	r4,28(r23)
   118fc:	003f8006 	br	11700 <_realloc_r+0x388>
   11900:	9005883a 	mov	r2,r18
   11904:	8007883a 	mov	r3,r16
   11908:	003fac06 	br	117bc <_realloc_r+0x444>
   1190c:	81000417 	ldw	r4,16(r16)
   11910:	b8800804 	addi	r2,r23,32
   11914:	80c00604 	addi	r3,r16,24
   11918:	b9000615 	stw	r4,24(r23)
   1191c:	81000517 	ldw	r4,20(r16)
   11920:	b9000715 	stw	r4,28(r23)
   11924:	003f6006 	br	116a8 <_realloc_r+0x330>
   11928:	9009883a 	mov	r4,r18
   1192c:	800b883a 	mov	r5,r16
   11930:	00111ec0 	call	111ec <memmove>
   11934:	003fa706 	br	117d4 <_realloc_r+0x45c>
   11938:	80800217 	ldw	r2,8(r16)
   1193c:	b8800415 	stw	r2,16(r23)
   11940:	80800317 	ldw	r2,12(r16)
   11944:	b8800515 	stw	r2,20(r23)
   11948:	31000326 	beq	r6,r4,11958 <_realloc_r+0x5e0>
   1194c:	b8800604 	addi	r2,r23,24
   11950:	80c00404 	addi	r3,r16,16
   11954:	003f9906 	br	117bc <_realloc_r+0x444>
   11958:	81000417 	ldw	r4,16(r16)
   1195c:	b8800804 	addi	r2,r23,32
   11960:	80c00604 	addi	r3,r16,24
   11964:	b9000615 	stw	r4,24(r23)
   11968:	81000517 	ldw	r4,20(r16)
   1196c:	b9000715 	stw	r4,28(r23)
   11970:	003f9206 	br	117bc <_realloc_r+0x444>

00011974 <_sbrk_r>:
   11974:	defffd04 	addi	sp,sp,-12
   11978:	dc400115 	stw	r17,4(sp)
   1197c:	dc000015 	stw	r16,0(sp)
   11980:	2023883a 	mov	r17,r4
   11984:	040000b4 	movhi	r16,2
   11988:	84228704 	addi	r16,r16,-30180
   1198c:	2809883a 	mov	r4,r5
   11990:	dfc00215 	stw	ra,8(sp)
   11994:	80000015 	stw	zero,0(r16)
   11998:	00135340 	call	13534 <sbrk>
   1199c:	00ffffc4 	movi	r3,-1
   119a0:	10c00526 	beq	r2,r3,119b8 <_sbrk_r+0x44>
   119a4:	dfc00217 	ldw	ra,8(sp)
   119a8:	dc400117 	ldw	r17,4(sp)
   119ac:	dc000017 	ldw	r16,0(sp)
   119b0:	dec00304 	addi	sp,sp,12
   119b4:	f800283a 	ret
   119b8:	80c00017 	ldw	r3,0(r16)
   119bc:	183ff926 	beq	r3,zero,119a4 <_sbrk_r+0x30>
   119c0:	88c00015 	stw	r3,0(r17)
   119c4:	dfc00217 	ldw	ra,8(sp)
   119c8:	dc400117 	ldw	r17,4(sp)
   119cc:	dc000017 	ldw	r16,0(sp)
   119d0:	dec00304 	addi	sp,sp,12
   119d4:	f800283a 	ret

000119d8 <__swsetup_r>:
   119d8:	00800074 	movhi	r2,1
   119dc:	109be504 	addi	r2,r2,28564
   119e0:	10800017 	ldw	r2,0(r2)
   119e4:	defffd04 	addi	sp,sp,-12
   119e8:	dc400115 	stw	r17,4(sp)
   119ec:	dc000015 	stw	r16,0(sp)
   119f0:	dfc00215 	stw	ra,8(sp)
   119f4:	2023883a 	mov	r17,r4
   119f8:	2821883a 	mov	r16,r5
   119fc:	10000226 	beq	r2,zero,11a08 <__swsetup_r+0x30>
   11a00:	10c00e17 	ldw	r3,56(r2)
   11a04:	18003d26 	beq	r3,zero,11afc <__swsetup_r+0x124>
   11a08:	8080030b 	ldhu	r2,12(r16)
   11a0c:	10c0020c 	andi	r3,r2,8
   11a10:	18ffffcc 	andi	r3,r3,65535
   11a14:	18e0001c 	xori	r3,r3,32768
   11a18:	18e00004 	addi	r3,r3,-32768
   11a1c:	18001226 	beq	r3,zero,11a68 <__swsetup_r+0x90>
   11a20:	80c00417 	ldw	r3,16(r16)
   11a24:	18001f26 	beq	r3,zero,11aa4 <__swsetup_r+0xcc>
   11a28:	1100004c 	andi	r4,r2,1
   11a2c:	2000261e 	bne	r4,zero,11ac8 <__swsetup_r+0xf0>
   11a30:	1080008c 	andi	r2,r2,2
   11a34:	10bfffcc 	andi	r2,r2,65535
   11a38:	10a0001c 	xori	r2,r2,32768
   11a3c:	10a00004 	addi	r2,r2,-32768
   11a40:	1000311e 	bne	r2,zero,11b08 <__swsetup_r+0x130>
   11a44:	80800517 	ldw	r2,20(r16)
   11a48:	80800215 	stw	r2,8(r16)
   11a4c:	18002326 	beq	r3,zero,11adc <__swsetup_r+0x104>
   11a50:	0005883a 	mov	r2,zero
   11a54:	dfc00217 	ldw	ra,8(sp)
   11a58:	dc400117 	ldw	r17,4(sp)
   11a5c:	dc000017 	ldw	r16,0(sp)
   11a60:	dec00304 	addi	sp,sp,12
   11a64:	f800283a 	ret
   11a68:	10c0040c 	andi	r3,r2,16
   11a6c:	18ffffcc 	andi	r3,r3,65535
   11a70:	18e0001c 	xori	r3,r3,32768
   11a74:	18e00004 	addi	r3,r3,-32768
   11a78:	18001e26 	beq	r3,zero,11af4 <__swsetup_r+0x11c>
   11a7c:	10c0010c 	andi	r3,r2,4
   11a80:	18ffffcc 	andi	r3,r3,65535
   11a84:	18e0001c 	xori	r3,r3,32768
   11a88:	18e00004 	addi	r3,r3,-32768
   11a8c:	1800211e 	bne	r3,zero,11b14 <__swsetup_r+0x13c>
   11a90:	80c00417 	ldw	r3,16(r16)
   11a94:	11400214 	ori	r5,r2,8
   11a98:	8140030d 	sth	r5,12(r16)
   11a9c:	2805883a 	mov	r2,r5
   11aa0:	183fe11e 	bne	r3,zero,11a28 <__swsetup_r+0x50>
   11aa4:	1140a00c 	andi	r5,r2,640
   11aa8:	01008004 	movi	r4,512
   11aac:	293fde26 	beq	r5,r4,11a28 <__swsetup_r+0x50>
   11ab0:	8809883a 	mov	r4,r17
   11ab4:	800b883a 	mov	r5,r16
   11ab8:	00125bc0 	call	125bc <__smakebuf_r>
   11abc:	8080030b 	ldhu	r2,12(r16)
   11ac0:	80c00417 	ldw	r3,16(r16)
   11ac4:	003fd806 	br	11a28 <__swsetup_r+0x50>
   11ac8:	80800517 	ldw	r2,20(r16)
   11acc:	80000215 	stw	zero,8(r16)
   11ad0:	0085c83a 	sub	r2,zero,r2
   11ad4:	80800615 	stw	r2,24(r16)
   11ad8:	183fdd1e 	bne	r3,zero,11a50 <__swsetup_r+0x78>
   11adc:	8080030b 	ldhu	r2,12(r16)
   11ae0:	1080200c 	andi	r2,r2,128
   11ae4:	10bfffcc 	andi	r2,r2,65535
   11ae8:	10a0001c 	xori	r2,r2,32768
   11aec:	10a00004 	addi	r2,r2,-32768
   11af0:	103fd826 	beq	r2,zero,11a54 <__swsetup_r+0x7c>
   11af4:	00bfffc4 	movi	r2,-1
   11af8:	003fd606 	br	11a54 <__swsetup_r+0x7c>
   11afc:	1009883a 	mov	r4,r2
   11b00:	0011e080 	call	11e08 <__sinit>
   11b04:	003fc006 	br	11a08 <__swsetup_r+0x30>
   11b08:	0005883a 	mov	r2,zero
   11b0c:	80800215 	stw	r2,8(r16)
   11b10:	003fce06 	br	11a4c <__swsetup_r+0x74>
   11b14:	81400c17 	ldw	r5,48(r16)
   11b18:	28000626 	beq	r5,zero,11b34 <__swsetup_r+0x15c>
   11b1c:	80c01004 	addi	r3,r16,64
   11b20:	28c00326 	beq	r5,r3,11b30 <__swsetup_r+0x158>
   11b24:	8809883a 	mov	r4,r17
   11b28:	001218c0 	call	1218c <_free_r>
   11b2c:	8080030b 	ldhu	r2,12(r16)
   11b30:	80000c15 	stw	zero,48(r16)
   11b34:	80c00417 	ldw	r3,16(r16)
   11b38:	013ff6c4 	movi	r4,-37
   11b3c:	2084703a 	and	r2,r4,r2
   11b40:	80000115 	stw	zero,4(r16)
   11b44:	80c00015 	stw	r3,0(r16)
   11b48:	003fd206 	br	11a94 <__swsetup_r+0xbc>

00011b4c <_fflush_r>:
   11b4c:	defffb04 	addi	sp,sp,-20
   11b50:	dcc00315 	stw	r19,12(sp)
   11b54:	dc400115 	stw	r17,4(sp)
   11b58:	dfc00415 	stw	ra,16(sp)
   11b5c:	dc800215 	stw	r18,8(sp)
   11b60:	dc000015 	stw	r16,0(sp)
   11b64:	2027883a 	mov	r19,r4
   11b68:	2823883a 	mov	r17,r5
   11b6c:	20000226 	beq	r4,zero,11b78 <_fflush_r+0x2c>
   11b70:	20800e17 	ldw	r2,56(r4)
   11b74:	10005726 	beq	r2,zero,11cd4 <_fflush_r+0x188>
   11b78:	8880030b 	ldhu	r2,12(r17)
   11b7c:	10c0020c 	andi	r3,r2,8
   11b80:	18ffffcc 	andi	r3,r3,65535
   11b84:	18e0001c 	xori	r3,r3,32768
   11b88:	18e00004 	addi	r3,r3,-32768
   11b8c:	1800311e 	bne	r3,zero,11c54 <_fflush_r+0x108>
   11b90:	89000117 	ldw	r4,4(r17)
   11b94:	10c20014 	ori	r3,r2,2048
   11b98:	88c0030d 	sth	r3,12(r17)
   11b9c:	180b883a 	mov	r5,r3
   11ba0:	0100520e 	bge	zero,r4,11cec <_fflush_r+0x1a0>
   11ba4:	88c00a17 	ldw	r3,40(r17)
   11ba8:	18002226 	beq	r3,zero,11c34 <_fflush_r+0xe8>
   11bac:	1084000c 	andi	r2,r2,4096
   11bb0:	10bfffcc 	andi	r2,r2,65535
   11bb4:	10a0001c 	xori	r2,r2,32768
   11bb8:	10a00004 	addi	r2,r2,-32768
   11bbc:	10004e26 	beq	r2,zero,11cf8 <_fflush_r+0x1ac>
   11bc0:	8c001417 	ldw	r16,80(r17)
   11bc4:	2940010c 	andi	r5,r5,4
   11bc8:	297fffcc 	andi	r5,r5,65535
   11bcc:	2960001c 	xori	r5,r5,32768
   11bd0:	29600004 	addi	r5,r5,-32768
   11bd4:	28000626 	beq	r5,zero,11bf0 <_fflush_r+0xa4>
   11bd8:	89000117 	ldw	r4,4(r17)
   11bdc:	88800c17 	ldw	r2,48(r17)
   11be0:	8121c83a 	sub	r16,r16,r4
   11be4:	10000226 	beq	r2,zero,11bf0 <_fflush_r+0xa4>
   11be8:	88800f17 	ldw	r2,60(r17)
   11bec:	80a1c83a 	sub	r16,r16,r2
   11bf0:	89400717 	ldw	r5,28(r17)
   11bf4:	9809883a 	mov	r4,r19
   11bf8:	800d883a 	mov	r6,r16
   11bfc:	000f883a 	mov	r7,zero
   11c00:	183ee83a 	callr	r3
   11c04:	8080281e 	bne	r16,r2,11ca8 <_fflush_r+0x15c>
   11c08:	8880030b 	ldhu	r2,12(r17)
   11c0c:	88c00417 	ldw	r3,16(r17)
   11c10:	88000115 	stw	zero,4(r17)
   11c14:	113dffcc 	andi	r4,r2,63487
   11c18:	1084000c 	andi	r2,r2,4096
   11c1c:	10bfffcc 	andi	r2,r2,65535
   11c20:	10a0001c 	xori	r2,r2,32768
   11c24:	8900030d 	sth	r4,12(r17)
   11c28:	88c00015 	stw	r3,0(r17)
   11c2c:	10a00004 	addi	r2,r2,-32768
   11c30:	10002c1e 	bne	r2,zero,11ce4 <_fflush_r+0x198>
   11c34:	0005883a 	mov	r2,zero
   11c38:	dfc00417 	ldw	ra,16(sp)
   11c3c:	dcc00317 	ldw	r19,12(sp)
   11c40:	dc800217 	ldw	r18,8(sp)
   11c44:	dc400117 	ldw	r17,4(sp)
   11c48:	dc000017 	ldw	r16,0(sp)
   11c4c:	dec00504 	addi	sp,sp,20
   11c50:	f800283a 	ret
   11c54:	8c800417 	ldw	r18,16(r17)
   11c58:	903ff626 	beq	r18,zero,11c34 <_fflush_r+0xe8>
   11c5c:	8c000017 	ldw	r16,0(r17)
   11c60:	108000cc 	andi	r2,r2,3
   11c64:	8c800015 	stw	r18,0(r17)
   11c68:	84a1c83a 	sub	r16,r16,r18
   11c6c:	10001b1e 	bne	r2,zero,11cdc <_fflush_r+0x190>
   11c70:	88800517 	ldw	r2,20(r17)
   11c74:	88800215 	stw	r2,8(r17)
   11c78:	04000316 	blt	zero,r16,11c88 <_fflush_r+0x13c>
   11c7c:	003fed06 	br	11c34 <_fflush_r+0xe8>
   11c80:	90a5883a 	add	r18,r18,r2
   11c84:	043feb0e 	bge	zero,r16,11c34 <_fflush_r+0xe8>
   11c88:	88800917 	ldw	r2,36(r17)
   11c8c:	89400717 	ldw	r5,28(r17)
   11c90:	800f883a 	mov	r7,r16
   11c94:	900d883a 	mov	r6,r18
   11c98:	9809883a 	mov	r4,r19
   11c9c:	103ee83a 	callr	r2
   11ca0:	80a1c83a 	sub	r16,r16,r2
   11ca4:	00bff616 	blt	zero,r2,11c80 <_fflush_r+0x134>
   11ca8:	88c0030b 	ldhu	r3,12(r17)
   11cac:	00bfffc4 	movi	r2,-1
   11cb0:	18c01014 	ori	r3,r3,64
   11cb4:	88c0030d 	sth	r3,12(r17)
   11cb8:	dfc00417 	ldw	ra,16(sp)
   11cbc:	dcc00317 	ldw	r19,12(sp)
   11cc0:	dc800217 	ldw	r18,8(sp)
   11cc4:	dc400117 	ldw	r17,4(sp)
   11cc8:	dc000017 	ldw	r16,0(sp)
   11ccc:	dec00504 	addi	sp,sp,20
   11cd0:	f800283a 	ret
   11cd4:	0011e080 	call	11e08 <__sinit>
   11cd8:	003fa706 	br	11b78 <_fflush_r+0x2c>
   11cdc:	0005883a 	mov	r2,zero
   11ce0:	003fe406 	br	11c74 <_fflush_r+0x128>
   11ce4:	8c001415 	stw	r16,80(r17)
   11ce8:	003fd206 	br	11c34 <_fflush_r+0xe8>
   11cec:	88c00f17 	ldw	r3,60(r17)
   11cf0:	00ffac16 	blt	zero,r3,11ba4 <_fflush_r+0x58>
   11cf4:	003fcf06 	br	11c34 <_fflush_r+0xe8>
   11cf8:	89400717 	ldw	r5,28(r17)
   11cfc:	9809883a 	mov	r4,r19
   11d00:	000d883a 	mov	r6,zero
   11d04:	01c00044 	movi	r7,1
   11d08:	183ee83a 	callr	r3
   11d0c:	1021883a 	mov	r16,r2
   11d10:	00bfffc4 	movi	r2,-1
   11d14:	80800326 	beq	r16,r2,11d24 <_fflush_r+0x1d8>
   11d18:	8940030b 	ldhu	r5,12(r17)
   11d1c:	88c00a17 	ldw	r3,40(r17)
   11d20:	003fa806 	br	11bc4 <_fflush_r+0x78>
   11d24:	98c00017 	ldw	r3,0(r19)
   11d28:	00800744 	movi	r2,29
   11d2c:	18bfde1e 	bne	r3,r2,11ca8 <_fflush_r+0x15c>
   11d30:	003fc006 	br	11c34 <_fflush_r+0xe8>

00011d34 <fflush>:
   11d34:	200b883a 	mov	r5,r4
   11d38:	20000426 	beq	r4,zero,11d4c <fflush+0x18>
   11d3c:	00800074 	movhi	r2,1
   11d40:	109be504 	addi	r2,r2,28564
   11d44:	11000017 	ldw	r4,0(r2)
   11d48:	0011b4c1 	jmpi	11b4c <_fflush_r>
   11d4c:	00800074 	movhi	r2,1
   11d50:	109be404 	addi	r2,r2,28560
   11d54:	11000017 	ldw	r4,0(r2)
   11d58:	01400074 	movhi	r5,1
   11d5c:	2946d304 	addi	r5,r5,6988
   11d60:	00125041 	jmpi	12504 <_fwalk_reent>

00011d64 <__fp_lock>:
   11d64:	0005883a 	mov	r2,zero
   11d68:	f800283a 	ret

00011d6c <__fp_unlock>:
   11d6c:	0005883a 	mov	r2,zero
   11d70:	f800283a 	ret

00011d74 <_cleanup_r>:
   11d74:	01400074 	movhi	r5,1
   11d78:	294ae304 	addi	r5,r5,11148
   11d7c:	001245c1 	jmpi	1245c <_fwalk>

00011d80 <__sfmoreglue>:
   11d80:	defffc04 	addi	sp,sp,-16
   11d84:	dc800215 	stw	r18,8(sp)
   11d88:	2825883a 	mov	r18,r5
   11d8c:	dc000015 	stw	r16,0(sp)
   11d90:	01401704 	movi	r5,92
   11d94:	2021883a 	mov	r16,r4
   11d98:	9009883a 	mov	r4,r18
   11d9c:	dfc00315 	stw	ra,12(sp)
   11da0:	dc400115 	stw	r17,4(sp)
   11da4:	0012d440 	call	12d44 <__mulsi3>
   11da8:	8009883a 	mov	r4,r16
   11dac:	11400304 	addi	r5,r2,12
   11db0:	1023883a 	mov	r17,r2
   11db4:	00108300 	call	10830 <_malloc_r>
   11db8:	1021883a 	mov	r16,r2
   11dbc:	10000726 	beq	r2,zero,11ddc <__sfmoreglue+0x5c>
   11dc0:	11000304 	addi	r4,r2,12
   11dc4:	10000015 	stw	zero,0(r2)
   11dc8:	14800115 	stw	r18,4(r2)
   11dcc:	11000215 	stw	r4,8(r2)
   11dd0:	000b883a 	mov	r5,zero
   11dd4:	880d883a 	mov	r6,r17
   11dd8:	00127640 	call	12764 <memset>
   11ddc:	8005883a 	mov	r2,r16
   11de0:	dfc00317 	ldw	ra,12(sp)
   11de4:	dc800217 	ldw	r18,8(sp)
   11de8:	dc400117 	ldw	r17,4(sp)
   11dec:	dc000017 	ldw	r16,0(sp)
   11df0:	dec00404 	addi	sp,sp,16
   11df4:	f800283a 	ret

00011df8 <_cleanup>:
   11df8:	00800074 	movhi	r2,1
   11dfc:	109be404 	addi	r2,r2,28560
   11e00:	11000017 	ldw	r4,0(r2)
   11e04:	0011d741 	jmpi	11d74 <_cleanup_r>

00011e08 <__sinit>:
   11e08:	20800e17 	ldw	r2,56(r4)
   11e0c:	1000401e 	bne	r2,zero,11f10 <__sinit+0x108>
   11e10:	21400117 	ldw	r5,4(r4)
   11e14:	01800074 	movhi	r6,1
   11e18:	31875d04 	addi	r6,r6,7540
   11e1c:	20c00217 	ldw	r3,8(r4)
   11e20:	21800f15 	stw	r6,60(r4)
   11e24:	2080bb04 	addi	r2,r4,748
   11e28:	02400044 	movi	r9,1
   11e2c:	018000c4 	movi	r6,3
   11e30:	2180b915 	stw	r6,740(r4)
   11e34:	2080ba15 	stw	r2,744(r4)
   11e38:	22400e15 	stw	r9,56(r4)
   11e3c:	20800317 	ldw	r2,12(r4)
   11e40:	2000b815 	stw	zero,736(r4)
   11e44:	02000074 	movhi	r8,1
   11e48:	420a1004 	addi	r8,r8,10304
   11e4c:	01c00074 	movhi	r7,1
   11e50:	39ca2504 	addi	r7,r7,10388
   11e54:	01800074 	movhi	r6,1
   11e58:	318a4704 	addi	r6,r6,10524
   11e5c:	01000074 	movhi	r4,1
   11e60:	210a5e04 	addi	r4,r4,10616
   11e64:	02800104 	movi	r10,4
   11e68:	28000015 	stw	zero,0(r5)
   11e6c:	28000115 	stw	zero,4(r5)
   11e70:	28000215 	stw	zero,8(r5)
   11e74:	2a80030d 	sth	r10,12(r5)
   11e78:	2800038d 	sth	zero,14(r5)
   11e7c:	28000415 	stw	zero,16(r5)
   11e80:	28000515 	stw	zero,20(r5)
   11e84:	28000615 	stw	zero,24(r5)
   11e88:	29400715 	stw	r5,28(r5)
   11e8c:	2a000815 	stw	r8,32(r5)
   11e90:	29c00915 	stw	r7,36(r5)
   11e94:	29800a15 	stw	r6,40(r5)
   11e98:	29000b15 	stw	r4,44(r5)
   11e9c:	01400284 	movi	r5,10
   11ea0:	18000015 	stw	zero,0(r3)
   11ea4:	18000115 	stw	zero,4(r3)
   11ea8:	18000215 	stw	zero,8(r3)
   11eac:	1940030d 	sth	r5,12(r3)
   11eb0:	1a40038d 	sth	r9,14(r3)
   11eb4:	18000415 	stw	zero,16(r3)
   11eb8:	18000515 	stw	zero,20(r3)
   11ebc:	18000615 	stw	zero,24(r3)
   11ec0:	18c00715 	stw	r3,28(r3)
   11ec4:	1a000815 	stw	r8,32(r3)
   11ec8:	19c00915 	stw	r7,36(r3)
   11ecc:	19800a15 	stw	r6,40(r3)
   11ed0:	19000b15 	stw	r4,44(r3)
   11ed4:	00c00484 	movi	r3,18
   11ed8:	10c0030d 	sth	r3,12(r2)
   11edc:	00c00084 	movi	r3,2
   11ee0:	10000015 	stw	zero,0(r2)
   11ee4:	10000115 	stw	zero,4(r2)
   11ee8:	10000215 	stw	zero,8(r2)
   11eec:	10c0038d 	sth	r3,14(r2)
   11ef0:	10000415 	stw	zero,16(r2)
   11ef4:	10000515 	stw	zero,20(r2)
   11ef8:	10000615 	stw	zero,24(r2)
   11efc:	10800715 	stw	r2,28(r2)
   11f00:	12000815 	stw	r8,32(r2)
   11f04:	11c00915 	stw	r7,36(r2)
   11f08:	11800a15 	stw	r6,40(r2)
   11f0c:	11000b15 	stw	r4,44(r2)
   11f10:	f800283a 	ret

00011f14 <__sfp>:
   11f14:	defffc04 	addi	sp,sp,-16
   11f18:	00800074 	movhi	r2,1
   11f1c:	109be404 	addi	r2,r2,28560
   11f20:	dc400115 	stw	r17,4(sp)
   11f24:	14400017 	ldw	r17,0(r2)
   11f28:	dc800215 	stw	r18,8(sp)
   11f2c:	dfc00315 	stw	ra,12(sp)
   11f30:	88800e17 	ldw	r2,56(r17)
   11f34:	dc000015 	stw	r16,0(sp)
   11f38:	2025883a 	mov	r18,r4
   11f3c:	10002826 	beq	r2,zero,11fe0 <__sfp+0xcc>
   11f40:	8c40b804 	addi	r17,r17,736
   11f44:	043fffc4 	movi	r16,-1
   11f48:	89400117 	ldw	r5,4(r17)
   11f4c:	88800217 	ldw	r2,8(r17)
   11f50:	297fffc4 	addi	r5,r5,-1
   11f54:	28000a16 	blt	r5,zero,11f80 <__sfp+0x6c>
   11f58:	10c0030f 	ldh	r3,12(r2)
   11f5c:	18000c26 	beq	r3,zero,11f90 <__sfp+0x7c>
   11f60:	10c01a04 	addi	r3,r2,104
   11f64:	00000206 	br	11f70 <__sfp+0x5c>
   11f68:	19bfe90f 	ldh	r6,-92(r3)
   11f6c:	30000826 	beq	r6,zero,11f90 <__sfp+0x7c>
   11f70:	297fffc4 	addi	r5,r5,-1
   11f74:	18bffd04 	addi	r2,r3,-12
   11f78:	18c01704 	addi	r3,r3,92
   11f7c:	2c3ffa1e 	bne	r5,r16,11f68 <__sfp+0x54>
   11f80:	88800017 	ldw	r2,0(r17)
   11f84:	10001926 	beq	r2,zero,11fec <__sfp+0xd8>
   11f88:	1023883a 	mov	r17,r2
   11f8c:	003fee06 	br	11f48 <__sfp+0x34>
   11f90:	00ffffc4 	movi	r3,-1
   11f94:	10c0038d 	sth	r3,14(r2)
   11f98:	00c00044 	movi	r3,1
   11f9c:	10c0030d 	sth	r3,12(r2)
   11fa0:	10000015 	stw	zero,0(r2)
   11fa4:	10000215 	stw	zero,8(r2)
   11fa8:	10000115 	stw	zero,4(r2)
   11fac:	10000415 	stw	zero,16(r2)
   11fb0:	10000515 	stw	zero,20(r2)
   11fb4:	10000615 	stw	zero,24(r2)
   11fb8:	10000c15 	stw	zero,48(r2)
   11fbc:	10000d15 	stw	zero,52(r2)
   11fc0:	10001115 	stw	zero,68(r2)
   11fc4:	10001215 	stw	zero,72(r2)
   11fc8:	dfc00317 	ldw	ra,12(sp)
   11fcc:	dc800217 	ldw	r18,8(sp)
   11fd0:	dc400117 	ldw	r17,4(sp)
   11fd4:	dc000017 	ldw	r16,0(sp)
   11fd8:	dec00404 	addi	sp,sp,16
   11fdc:	f800283a 	ret
   11fe0:	8809883a 	mov	r4,r17
   11fe4:	0011e080 	call	11e08 <__sinit>
   11fe8:	003fd506 	br	11f40 <__sfp+0x2c>
   11fec:	9009883a 	mov	r4,r18
   11ff0:	01400104 	movi	r5,4
   11ff4:	0011d800 	call	11d80 <__sfmoreglue>
   11ff8:	88800015 	stw	r2,0(r17)
   11ffc:	103fe21e 	bne	r2,zero,11f88 <__sfp+0x74>
   12000:	00800304 	movi	r2,12
   12004:	90800015 	stw	r2,0(r18)
   12008:	0005883a 	mov	r2,zero
   1200c:	003fee06 	br	11fc8 <__sfp+0xb4>

00012010 <__sfp_lock_acquire>:
   12010:	f800283a 	ret

00012014 <__sfp_lock_release>:
   12014:	f800283a 	ret

00012018 <__sinit_lock_acquire>:
   12018:	f800283a 	ret

0001201c <__sinit_lock_release>:
   1201c:	f800283a 	ret

00012020 <__fp_lock_all>:
   12020:	00800074 	movhi	r2,1
   12024:	109be504 	addi	r2,r2,28564
   12028:	11000017 	ldw	r4,0(r2)
   1202c:	01400074 	movhi	r5,1
   12030:	29475904 	addi	r5,r5,7524
   12034:	001245c1 	jmpi	1245c <_fwalk>

00012038 <__fp_unlock_all>:
   12038:	00800074 	movhi	r2,1
   1203c:	109be504 	addi	r2,r2,28564
   12040:	11000017 	ldw	r4,0(r2)
   12044:	01400074 	movhi	r5,1
   12048:	29475b04 	addi	r5,r5,7532
   1204c:	001245c1 	jmpi	1245c <_fwalk>

00012050 <_malloc_trim_r>:
   12050:	defffb04 	addi	sp,sp,-20
   12054:	dcc00315 	stw	r19,12(sp)
   12058:	dc800215 	stw	r18,8(sp)
   1205c:	dc400115 	stw	r17,4(sp)
   12060:	dc000015 	stw	r16,0(sp)
   12064:	2827883a 	mov	r19,r5
   12068:	dfc00415 	stw	ra,16(sp)
   1206c:	04400074 	movhi	r17,1
   12070:	8c566004 	addi	r17,r17,22912
   12074:	2021883a 	mov	r16,r4
   12078:	00133300 	call	13330 <__malloc_lock>
   1207c:	88800217 	ldw	r2,8(r17)
   12080:	14800117 	ldw	r18,4(r2)
   12084:	00bfff04 	movi	r2,-4
   12088:	90a4703a 	and	r18,r18,r2
   1208c:	9083fbc4 	addi	r2,r18,4079
   12090:	14e7c83a 	sub	r19,r2,r19
   12094:	9826d33a 	srli	r19,r19,12
   12098:	0083ffc4 	movi	r2,4095
   1209c:	9cffffc4 	addi	r19,r19,-1
   120a0:	9826933a 	slli	r19,r19,12
   120a4:	14c0060e 	bge	r2,r19,120c0 <_malloc_trim_r+0x70>
   120a8:	8009883a 	mov	r4,r16
   120ac:	000b883a 	mov	r5,zero
   120b0:	00119740 	call	11974 <_sbrk_r>
   120b4:	88c00217 	ldw	r3,8(r17)
   120b8:	1c87883a 	add	r3,r3,r18
   120bc:	10c00a26 	beq	r2,r3,120e8 <_malloc_trim_r+0x98>
   120c0:	8009883a 	mov	r4,r16
   120c4:	00133500 	call	13350 <__malloc_unlock>
   120c8:	0005883a 	mov	r2,zero
   120cc:	dfc00417 	ldw	ra,16(sp)
   120d0:	dcc00317 	ldw	r19,12(sp)
   120d4:	dc800217 	ldw	r18,8(sp)
   120d8:	dc400117 	ldw	r17,4(sp)
   120dc:	dc000017 	ldw	r16,0(sp)
   120e0:	dec00504 	addi	sp,sp,20
   120e4:	f800283a 	ret
   120e8:	8009883a 	mov	r4,r16
   120ec:	04cbc83a 	sub	r5,zero,r19
   120f0:	00119740 	call	11974 <_sbrk_r>
   120f4:	00ffffc4 	movi	r3,-1
   120f8:	10c01326 	beq	r2,r3,12148 <_malloc_trim_r+0xf8>
   120fc:	008000b4 	movhi	r2,2
   12100:	10a28e04 	addi	r2,r2,-30152
   12104:	11000017 	ldw	r4,0(r2)
   12108:	88c00217 	ldw	r3,8(r17)
   1210c:	94e5c83a 	sub	r18,r18,r19
   12110:	94800054 	ori	r18,r18,1
   12114:	24e7c83a 	sub	r19,r4,r19
   12118:	1c800115 	stw	r18,4(r3)
   1211c:	8009883a 	mov	r4,r16
   12120:	14c00015 	stw	r19,0(r2)
   12124:	00133500 	call	13350 <__malloc_unlock>
   12128:	00800044 	movi	r2,1
   1212c:	dfc00417 	ldw	ra,16(sp)
   12130:	dcc00317 	ldw	r19,12(sp)
   12134:	dc800217 	ldw	r18,8(sp)
   12138:	dc400117 	ldw	r17,4(sp)
   1213c:	dc000017 	ldw	r16,0(sp)
   12140:	dec00504 	addi	sp,sp,20
   12144:	f800283a 	ret
   12148:	8009883a 	mov	r4,r16
   1214c:	000b883a 	mov	r5,zero
   12150:	00119740 	call	11974 <_sbrk_r>
   12154:	88c00217 	ldw	r3,8(r17)
   12158:	014003c4 	movi	r5,15
   1215c:	10c9c83a 	sub	r4,r2,r3
   12160:	293fd70e 	bge	r5,r4,120c0 <_malloc_trim_r+0x70>
   12164:	01400074 	movhi	r5,1
   12168:	295be604 	addi	r5,r5,28568
   1216c:	29400017 	ldw	r5,0(r5)
   12170:	21000054 	ori	r4,r4,1
   12174:	19000115 	stw	r4,4(r3)
   12178:	1145c83a 	sub	r2,r2,r5
   1217c:	014000b4 	movhi	r5,2
   12180:	29628e04 	addi	r5,r5,-30152
   12184:	28800015 	stw	r2,0(r5)
   12188:	003fcd06 	br	120c0 <_malloc_trim_r+0x70>

0001218c <_free_r>:
   1218c:	defffd04 	addi	sp,sp,-12
   12190:	dc400115 	stw	r17,4(sp)
   12194:	dc000015 	stw	r16,0(sp)
   12198:	dfc00215 	stw	ra,8(sp)
   1219c:	2821883a 	mov	r16,r5
   121a0:	2023883a 	mov	r17,r4
   121a4:	28004b26 	beq	r5,zero,122d4 <_free_r+0x148>
   121a8:	00133300 	call	13330 <__malloc_lock>
   121ac:	823fff17 	ldw	r8,-4(r16)
   121b0:	00bfff84 	movi	r2,-2
   121b4:	81bffe04 	addi	r6,r16,-8
   121b8:	4084703a 	and	r2,r8,r2
   121bc:	3087883a 	add	r3,r6,r2
   121c0:	01400074 	movhi	r5,1
   121c4:	29566004 	addi	r5,r5,22912
   121c8:	1a400117 	ldw	r9,4(r3)
   121cc:	29000217 	ldw	r4,8(r5)
   121d0:	01ffff04 	movi	r7,-4
   121d4:	49ce703a 	and	r7,r9,r7
   121d8:	20c06526 	beq	r4,r3,12370 <_free_r+0x1e4>
   121dc:	19c00115 	stw	r7,4(r3)
   121e0:	4200004c 	andi	r8,r8,1
   121e4:	40003026 	beq	r8,zero,122a8 <_free_r+0x11c>
   121e8:	0009883a 	mov	r4,zero
   121ec:	19d1883a 	add	r8,r3,r7
   121f0:	42000117 	ldw	r8,4(r8)
   121f4:	4200004c 	andi	r8,r8,1
   121f8:	4000061e 	bne	r8,zero,12214 <_free_r+0x88>
   121fc:	11c5883a 	add	r2,r2,r7
   12200:	19c00217 	ldw	r7,8(r3)
   12204:	20004e26 	beq	r4,zero,12340 <_free_r+0x1b4>
   12208:	18c00317 	ldw	r3,12(r3)
   1220c:	38c00315 	stw	r3,12(r7)
   12210:	19c00215 	stw	r7,8(r3)
   12214:	11c00054 	ori	r7,r2,1
   12218:	3087883a 	add	r3,r6,r2
   1221c:	31c00115 	stw	r7,4(r6)
   12220:	18800015 	stw	r2,0(r3)
   12224:	20001a1e 	bne	r4,zero,12290 <_free_r+0x104>
   12228:	00c07fc4 	movi	r3,511
   1222c:	18802e2e 	bgeu	r3,r2,122e8 <_free_r+0x15c>
   12230:	1006d27a 	srli	r3,r2,9
   12234:	01000104 	movi	r4,4
   12238:	20c06636 	bltu	r4,r3,123d4 <_free_r+0x248>
   1223c:	1008d1ba 	srli	r4,r2,6
   12240:	21000e04 	addi	r4,r4,56
   12244:	210f883a 	add	r7,r4,r4
   12248:	39cf883a 	add	r7,r7,r7
   1224c:	39cf883a 	add	r7,r7,r7
   12250:	29cf883a 	add	r7,r5,r7
   12254:	38c00217 	ldw	r3,8(r7)
   12258:	01400074 	movhi	r5,1
   1225c:	29566004 	addi	r5,r5,22912
   12260:	19c06126 	beq	r3,r7,123e8 <_free_r+0x25c>
   12264:	013fff04 	movi	r4,-4
   12268:	19400117 	ldw	r5,4(r3)
   1226c:	290a703a 	and	r5,r5,r4
   12270:	1140022e 	bgeu	r2,r5,1227c <_free_r+0xf0>
   12274:	18c00217 	ldw	r3,8(r3)
   12278:	38fffb1e 	bne	r7,r3,12268 <_free_r+0xdc>
   1227c:	18800317 	ldw	r2,12(r3)
   12280:	30800315 	stw	r2,12(r6)
   12284:	30c00215 	stw	r3,8(r6)
   12288:	11800215 	stw	r6,8(r2)
   1228c:	19800315 	stw	r6,12(r3)
   12290:	8809883a 	mov	r4,r17
   12294:	dfc00217 	ldw	ra,8(sp)
   12298:	dc400117 	ldw	r17,4(sp)
   1229c:	dc000017 	ldw	r16,0(sp)
   122a0:	dec00304 	addi	sp,sp,12
   122a4:	00133501 	jmpi	13350 <__malloc_unlock>
   122a8:	813ffe17 	ldw	r4,-8(r16)
   122ac:	2a400204 	addi	r9,r5,8
   122b0:	310dc83a 	sub	r6,r6,r4
   122b4:	32000217 	ldw	r8,8(r6)
   122b8:	1105883a 	add	r2,r2,r4
   122bc:	42404326 	beq	r8,r9,123cc <_free_r+0x240>
   122c0:	32400317 	ldw	r9,12(r6)
   122c4:	0009883a 	mov	r4,zero
   122c8:	42400315 	stw	r9,12(r8)
   122cc:	4a000215 	stw	r8,8(r9)
   122d0:	003fc606 	br	121ec <_free_r+0x60>
   122d4:	dfc00217 	ldw	ra,8(sp)
   122d8:	dc400117 	ldw	r17,4(sp)
   122dc:	dc000017 	ldw	r16,0(sp)
   122e0:	dec00304 	addi	sp,sp,12
   122e4:	f800283a 	ret
   122e8:	1004d0fa 	srli	r2,r2,3
   122ec:	02000044 	movi	r8,1
   122f0:	29c00117 	ldw	r7,4(r5)
   122f4:	1087883a 	add	r3,r2,r2
   122f8:	18c7883a 	add	r3,r3,r3
   122fc:	1005d0ba 	srai	r2,r2,2
   12300:	18c7883a 	add	r3,r3,r3
   12304:	28c7883a 	add	r3,r5,r3
   12308:	19000217 	ldw	r4,8(r3)
   1230c:	4084983a 	sll	r2,r8,r2
   12310:	30c00315 	stw	r3,12(r6)
   12314:	31000215 	stw	r4,8(r6)
   12318:	11c4b03a 	or	r2,r2,r7
   1231c:	21800315 	stw	r6,12(r4)
   12320:	8809883a 	mov	r4,r17
   12324:	28800115 	stw	r2,4(r5)
   12328:	19800215 	stw	r6,8(r3)
   1232c:	dfc00217 	ldw	ra,8(sp)
   12330:	dc400117 	ldw	r17,4(sp)
   12334:	dc000017 	ldw	r16,0(sp)
   12338:	dec00304 	addi	sp,sp,12
   1233c:	00133501 	jmpi	13350 <__malloc_unlock>
   12340:	02000074 	movhi	r8,1
   12344:	42166204 	addi	r8,r8,22920
   12348:	3a3faf1e 	bne	r7,r8,12208 <_free_r+0x7c>
   1234c:	29800515 	stw	r6,20(r5)
   12350:	29800415 	stw	r6,16(r5)
   12354:	11000054 	ori	r4,r2,1
   12358:	3087883a 	add	r3,r6,r2
   1235c:	31c00315 	stw	r7,12(r6)
   12360:	31c00215 	stw	r7,8(r6)
   12364:	31000115 	stw	r4,4(r6)
   12368:	18800015 	stw	r2,0(r3)
   1236c:	003fc806 	br	12290 <_free_r+0x104>
   12370:	4200004c 	andi	r8,r8,1
   12374:	3885883a 	add	r2,r7,r2
   12378:	4000071e 	bne	r8,zero,12398 <_free_r+0x20c>
   1237c:	81fffe17 	ldw	r7,-8(r16)
   12380:	31cdc83a 	sub	r6,r6,r7
   12384:	30c00317 	ldw	r3,12(r6)
   12388:	31000217 	ldw	r4,8(r6)
   1238c:	11c5883a 	add	r2,r2,r7
   12390:	20c00315 	stw	r3,12(r4)
   12394:	19000215 	stw	r4,8(r3)
   12398:	00c00074 	movhi	r3,1
   1239c:	18dbe704 	addi	r3,r3,28572
   123a0:	18c00017 	ldw	r3,0(r3)
   123a4:	11000054 	ori	r4,r2,1
   123a8:	31000115 	stw	r4,4(r6)
   123ac:	29800215 	stw	r6,8(r5)
   123b0:	10ffb736 	bltu	r2,r3,12290 <_free_r+0x104>
   123b4:	008000b4 	movhi	r2,2
   123b8:	10a28604 	addi	r2,r2,-30184
   123bc:	11400017 	ldw	r5,0(r2)
   123c0:	8809883a 	mov	r4,r17
   123c4:	00120500 	call	12050 <_malloc_trim_r>
   123c8:	003fb106 	br	12290 <_free_r+0x104>
   123cc:	01000044 	movi	r4,1
   123d0:	003f8606 	br	121ec <_free_r+0x60>
   123d4:	01000504 	movi	r4,20
   123d8:	20c00b36 	bltu	r4,r3,12408 <_free_r+0x27c>
   123dc:	190016c4 	addi	r4,r3,91
   123e0:	210f883a 	add	r7,r4,r4
   123e4:	003f9806 	br	12248 <_free_r+0xbc>
   123e8:	2009d0ba 	srai	r4,r4,2
   123ec:	00800044 	movi	r2,1
   123f0:	29c00117 	ldw	r7,4(r5)
   123f4:	1108983a 	sll	r4,r2,r4
   123f8:	1805883a 	mov	r2,r3
   123fc:	21c8b03a 	or	r4,r4,r7
   12400:	29000115 	stw	r4,4(r5)
   12404:	003f9e06 	br	12280 <_free_r+0xf4>
   12408:	01001504 	movi	r4,84
   1240c:	20c00436 	bltu	r4,r3,12420 <_free_r+0x294>
   12410:	1008d33a 	srli	r4,r2,12
   12414:	21001b84 	addi	r4,r4,110
   12418:	210f883a 	add	r7,r4,r4
   1241c:	003f8a06 	br	12248 <_free_r+0xbc>
   12420:	01005504 	movi	r4,340
   12424:	20c00436 	bltu	r4,r3,12438 <_free_r+0x2ac>
   12428:	1008d3fa 	srli	r4,r2,15
   1242c:	21001dc4 	addi	r4,r4,119
   12430:	210f883a 	add	r7,r4,r4
   12434:	003f8406 	br	12248 <_free_r+0xbc>
   12438:	01015504 	movi	r4,1364
   1243c:	20c00436 	bltu	r4,r3,12450 <_free_r+0x2c4>
   12440:	1008d4ba 	srli	r4,r2,18
   12444:	21001f04 	addi	r4,r4,124
   12448:	210f883a 	add	r7,r4,r4
   1244c:	003f7e06 	br	12248 <_free_r+0xbc>
   12450:	01c03f04 	movi	r7,252
   12454:	01001f84 	movi	r4,126
   12458:	003f7b06 	br	12248 <_free_r+0xbc>

0001245c <_fwalk>:
   1245c:	defff904 	addi	sp,sp,-28
   12460:	dcc00315 	stw	r19,12(sp)
   12464:	24c0b804 	addi	r19,r4,736
   12468:	dd400515 	stw	r21,20(sp)
   1246c:	dd000415 	stw	r20,16(sp)
   12470:	dfc00615 	stw	ra,24(sp)
   12474:	dc800215 	stw	r18,8(sp)
   12478:	dc400115 	stw	r17,4(sp)
   1247c:	dc000015 	stw	r16,0(sp)
   12480:	282b883a 	mov	r21,r5
   12484:	0029883a 	mov	r20,zero
   12488:	00120100 	call	12010 <__sfp_lock_acquire>
   1248c:	98001226 	beq	r19,zero,124d8 <_fwalk+0x7c>
   12490:	04bfffc4 	movi	r18,-1
   12494:	9c400117 	ldw	r17,4(r19)
   12498:	9c000217 	ldw	r16,8(r19)
   1249c:	8c7fffc4 	addi	r17,r17,-1
   124a0:	88000b16 	blt	r17,zero,124d0 <_fwalk+0x74>
   124a4:	84000304 	addi	r16,r16,12
   124a8:	80c0000f 	ldh	r3,0(r16)
   124ac:	8c7fffc4 	addi	r17,r17,-1
   124b0:	813ffd04 	addi	r4,r16,-12
   124b4:	18000426 	beq	r3,zero,124c8 <_fwalk+0x6c>
   124b8:	80c0008f 	ldh	r3,2(r16)
   124bc:	1c800226 	beq	r3,r18,124c8 <_fwalk+0x6c>
   124c0:	a83ee83a 	callr	r21
   124c4:	a0a8b03a 	or	r20,r20,r2
   124c8:	84001704 	addi	r16,r16,92
   124cc:	8cbff61e 	bne	r17,r18,124a8 <_fwalk+0x4c>
   124d0:	9cc00017 	ldw	r19,0(r19)
   124d4:	983fef1e 	bne	r19,zero,12494 <_fwalk+0x38>
   124d8:	00120140 	call	12014 <__sfp_lock_release>
   124dc:	a005883a 	mov	r2,r20
   124e0:	dfc00617 	ldw	ra,24(sp)
   124e4:	dd400517 	ldw	r21,20(sp)
   124e8:	dd000417 	ldw	r20,16(sp)
   124ec:	dcc00317 	ldw	r19,12(sp)
   124f0:	dc800217 	ldw	r18,8(sp)
   124f4:	dc400117 	ldw	r17,4(sp)
   124f8:	dc000017 	ldw	r16,0(sp)
   124fc:	dec00704 	addi	sp,sp,28
   12500:	f800283a 	ret

00012504 <_fwalk_reent>:
   12504:	defff804 	addi	sp,sp,-32
   12508:	dcc00315 	stw	r19,12(sp)
   1250c:	24c0b804 	addi	r19,r4,736
   12510:	dd800615 	stw	r22,24(sp)
   12514:	dd400515 	stw	r21,20(sp)
   12518:	dd000415 	stw	r20,16(sp)
   1251c:	dfc00715 	stw	ra,28(sp)
   12520:	dc800215 	stw	r18,8(sp)
   12524:	dc400115 	stw	r17,4(sp)
   12528:	dc000015 	stw	r16,0(sp)
   1252c:	2029883a 	mov	r20,r4
   12530:	282b883a 	mov	r21,r5
   12534:	002d883a 	mov	r22,zero
   12538:	00120100 	call	12010 <__sfp_lock_acquire>
   1253c:	98001326 	beq	r19,zero,1258c <_fwalk_reent+0x88>
   12540:	04bfffc4 	movi	r18,-1
   12544:	9c400117 	ldw	r17,4(r19)
   12548:	9c000217 	ldw	r16,8(r19)
   1254c:	8c7fffc4 	addi	r17,r17,-1
   12550:	88000c16 	blt	r17,zero,12584 <_fwalk_reent+0x80>
   12554:	84000304 	addi	r16,r16,12
   12558:	80c0000f 	ldh	r3,0(r16)
   1255c:	8c7fffc4 	addi	r17,r17,-1
   12560:	817ffd04 	addi	r5,r16,-12
   12564:	18000526 	beq	r3,zero,1257c <_fwalk_reent+0x78>
   12568:	80c0008f 	ldh	r3,2(r16)
   1256c:	a009883a 	mov	r4,r20
   12570:	1c800226 	beq	r3,r18,1257c <_fwalk_reent+0x78>
   12574:	a83ee83a 	callr	r21
   12578:	b0acb03a 	or	r22,r22,r2
   1257c:	84001704 	addi	r16,r16,92
   12580:	8cbff51e 	bne	r17,r18,12558 <_fwalk_reent+0x54>
   12584:	9cc00017 	ldw	r19,0(r19)
   12588:	983fee1e 	bne	r19,zero,12544 <_fwalk_reent+0x40>
   1258c:	00120140 	call	12014 <__sfp_lock_release>
   12590:	b005883a 	mov	r2,r22
   12594:	dfc00717 	ldw	ra,28(sp)
   12598:	dd800617 	ldw	r22,24(sp)
   1259c:	dd400517 	ldw	r21,20(sp)
   125a0:	dd000417 	ldw	r20,16(sp)
   125a4:	dcc00317 	ldw	r19,12(sp)
   125a8:	dc800217 	ldw	r18,8(sp)
   125ac:	dc400117 	ldw	r17,4(sp)
   125b0:	dc000017 	ldw	r16,0(sp)
   125b4:	dec00804 	addi	sp,sp,32
   125b8:	f800283a 	ret

000125bc <__smakebuf_r>:
   125bc:	2880030b 	ldhu	r2,12(r5)
   125c0:	deffed04 	addi	sp,sp,-76
   125c4:	dc401015 	stw	r17,64(sp)
   125c8:	10c0008c 	andi	r3,r2,2
   125cc:	18ffffcc 	andi	r3,r3,65535
   125d0:	18e0001c 	xori	r3,r3,32768
   125d4:	dc000f15 	stw	r16,60(sp)
   125d8:	dfc01215 	stw	ra,72(sp)
   125dc:	dc801115 	stw	r18,68(sp)
   125e0:	18e00004 	addi	r3,r3,-32768
   125e4:	2821883a 	mov	r16,r5
   125e8:	2023883a 	mov	r17,r4
   125ec:	1800381e 	bne	r3,zero,126d0 <__smakebuf_r+0x114>
   125f0:	2940038f 	ldh	r5,14(r5)
   125f4:	28002d16 	blt	r5,zero,126ac <__smakebuf_r+0xf0>
   125f8:	d80d883a 	mov	r6,sp
   125fc:	0012ba00 	call	12ba0 <_fstat_r>
   12600:	10002916 	blt	r2,zero,126a8 <__smakebuf_r+0xec>
   12604:	d8800117 	ldw	r2,4(sp)
   12608:	00e00014 	movui	r3,32768
   1260c:	10bc000c 	andi	r2,r2,61440
   12610:	10c03c26 	beq	r2,r3,12704 <__smakebuf_r+0x148>
   12614:	80c0030b 	ldhu	r3,12(r16)
   12618:	18c20014 	ori	r3,r3,2048
   1261c:	80c0030d 	sth	r3,12(r16)
   12620:	00c80004 	movi	r3,8192
   12624:	10c00c1e 	bne	r2,r3,12658 <__smakebuf_r+0x9c>
   12628:	8140038f 	ldh	r5,14(r16)
   1262c:	8809883a 	mov	r4,r17
   12630:	0012c080 	call	12c08 <_isatty_r>
   12634:	10000826 	beq	r2,zero,12658 <__smakebuf_r+0x9c>
   12638:	80c0030b 	ldhu	r3,12(r16)
   1263c:	808010c4 	addi	r2,r16,67
   12640:	80800015 	stw	r2,0(r16)
   12644:	18c00054 	ori	r3,r3,1
   12648:	80800415 	stw	r2,16(r16)
   1264c:	00800044 	movi	r2,1
   12650:	80c0030d 	sth	r3,12(r16)
   12654:	80800515 	stw	r2,20(r16)
   12658:	04810004 	movi	r18,1024
   1265c:	8809883a 	mov	r4,r17
   12660:	900b883a 	mov	r5,r18
   12664:	00108300 	call	10830 <_malloc_r>
   12668:	10003026 	beq	r2,zero,1272c <__smakebuf_r+0x170>
   1266c:	80c0030b 	ldhu	r3,12(r16)
   12670:	01000074 	movhi	r4,1
   12674:	21075d04 	addi	r4,r4,7540
   12678:	89000f15 	stw	r4,60(r17)
   1267c:	18c02014 	ori	r3,r3,128
   12680:	80c0030d 	sth	r3,12(r16)
   12684:	80800015 	stw	r2,0(r16)
   12688:	80800415 	stw	r2,16(r16)
   1268c:	84800515 	stw	r18,20(r16)
   12690:	dfc01217 	ldw	ra,72(sp)
   12694:	dc801117 	ldw	r18,68(sp)
   12698:	dc401017 	ldw	r17,64(sp)
   1269c:	dc000f17 	ldw	r16,60(sp)
   126a0:	dec01304 	addi	sp,sp,76
   126a4:	f800283a 	ret
   126a8:	8080030b 	ldhu	r2,12(r16)
   126ac:	10c0200c 	andi	r3,r2,128
   126b0:	18ffffcc 	andi	r3,r3,65535
   126b4:	18e0001c 	xori	r3,r3,32768
   126b8:	18e00004 	addi	r3,r3,-32768
   126bc:	18000f1e 	bne	r3,zero,126fc <__smakebuf_r+0x140>
   126c0:	04810004 	movi	r18,1024
   126c4:	10820014 	ori	r2,r2,2048
   126c8:	8080030d 	sth	r2,12(r16)
   126cc:	003fe306 	br	1265c <__smakebuf_r+0xa0>
   126d0:	288010c4 	addi	r2,r5,67
   126d4:	28800015 	stw	r2,0(r5)
   126d8:	28800415 	stw	r2,16(r5)
   126dc:	00800044 	movi	r2,1
   126e0:	28800515 	stw	r2,20(r5)
   126e4:	dfc01217 	ldw	ra,72(sp)
   126e8:	dc801117 	ldw	r18,68(sp)
   126ec:	dc401017 	ldw	r17,64(sp)
   126f0:	dc000f17 	ldw	r16,60(sp)
   126f4:	dec01304 	addi	sp,sp,76
   126f8:	f800283a 	ret
   126fc:	04801004 	movi	r18,64
   12700:	003ff006 	br	126c4 <__smakebuf_r+0x108>
   12704:	81000a17 	ldw	r4,40(r16)
   12708:	00c00074 	movhi	r3,1
   1270c:	18ca4704 	addi	r3,r3,10524
   12710:	20ffc01e 	bne	r4,r3,12614 <__smakebuf_r+0x58>
   12714:	8080030b 	ldhu	r2,12(r16)
   12718:	00c10004 	movi	r3,1024
   1271c:	80c01315 	stw	r3,76(r16)
   12720:	10c4b03a 	or	r2,r2,r3
   12724:	8080030d 	sth	r2,12(r16)
   12728:	003fcb06 	br	12658 <__smakebuf_r+0x9c>
   1272c:	8080030b 	ldhu	r2,12(r16)
   12730:	10c0800c 	andi	r3,r2,512
   12734:	18ffffcc 	andi	r3,r3,65535
   12738:	18e0001c 	xori	r3,r3,32768
   1273c:	18e00004 	addi	r3,r3,-32768
   12740:	183fd31e 	bne	r3,zero,12690 <__smakebuf_r+0xd4>
   12744:	10800094 	ori	r2,r2,2
   12748:	80c010c4 	addi	r3,r16,67
   1274c:	8080030d 	sth	r2,12(r16)
   12750:	00800044 	movi	r2,1
   12754:	80c00015 	stw	r3,0(r16)
   12758:	80c00415 	stw	r3,16(r16)
   1275c:	80800515 	stw	r2,20(r16)
   12760:	003fcb06 	br	12690 <__smakebuf_r+0xd4>

00012764 <memset>:
   12764:	00c000c4 	movi	r3,3
   12768:	2005883a 	mov	r2,r4
   1276c:	29403fcc 	andi	r5,r5,255
   12770:	19802d2e 	bgeu	r3,r6,12828 <memset+0xc4>
   12774:	20c6703a 	and	r3,r4,r3
   12778:	18002e1e 	bne	r3,zero,12834 <memset+0xd0>
   1277c:	2806923a 	slli	r3,r5,8
   12780:	010003c4 	movi	r4,15
   12784:	3011883a 	mov	r8,r6
   12788:	1946b03a 	or	r3,r3,r5
   1278c:	180e943a 	slli	r7,r3,16
   12790:	38ceb03a 	or	r7,r7,r3
   12794:	1007883a 	mov	r3,r2
   12798:	21800f2e 	bgeu	r4,r6,127d8 <memset+0x74>
   1279c:	19c00015 	stw	r7,0(r3)
   127a0:	19c00115 	stw	r7,4(r3)
   127a4:	19c00215 	stw	r7,8(r3)
   127a8:	19c00315 	stw	r7,12(r3)
   127ac:	423ffc04 	addi	r8,r8,-16
   127b0:	18c00404 	addi	r3,r3,16
   127b4:	223ff936 	bltu	r4,r8,1279c <memset+0x38>
   127b8:	30fffc04 	addi	r3,r6,-16
   127bc:	1806d13a 	srli	r3,r3,4
   127c0:	318003cc 	andi	r6,r6,15
   127c4:	010000c4 	movi	r4,3
   127c8:	18c00044 	addi	r3,r3,1
   127cc:	1806913a 	slli	r3,r3,4
   127d0:	10c7883a 	add	r3,r2,r3
   127d4:	21800e2e 	bgeu	r4,r6,12810 <memset+0xac>
   127d8:	1813883a 	mov	r9,r3
   127dc:	3011883a 	mov	r8,r6
   127e0:	010000c4 	movi	r4,3
   127e4:	49c00015 	stw	r7,0(r9)
   127e8:	423fff04 	addi	r8,r8,-4
   127ec:	4a400104 	addi	r9,r9,4
   127f0:	223ffc36 	bltu	r4,r8,127e4 <memset+0x80>
   127f4:	313fff04 	addi	r4,r6,-4
   127f8:	2008d0ba 	srli	r4,r4,2
   127fc:	318000cc 	andi	r6,r6,3
   12800:	21000044 	addi	r4,r4,1
   12804:	2109883a 	add	r4,r4,r4
   12808:	2109883a 	add	r4,r4,r4
   1280c:	1907883a 	add	r3,r3,r4
   12810:	30000a26 	beq	r6,zero,1283c <memset+0xd8>
   12814:	198d883a 	add	r6,r3,r6
   12818:	19400005 	stb	r5,0(r3)
   1281c:	18c00044 	addi	r3,r3,1
   12820:	19bffd1e 	bne	r3,r6,12818 <memset+0xb4>
   12824:	f800283a 	ret
   12828:	2007883a 	mov	r3,r4
   1282c:	303ff91e 	bne	r6,zero,12814 <memset+0xb0>
   12830:	00000206 	br	1283c <memset+0xd8>
   12834:	2007883a 	mov	r3,r4
   12838:	003ff606 	br	12814 <memset+0xb0>
   1283c:	f800283a 	ret

00012840 <__sread>:
   12840:	defffe04 	addi	sp,sp,-8
   12844:	dc000015 	stw	r16,0(sp)
   12848:	2821883a 	mov	r16,r5
   1284c:	2940038f 	ldh	r5,14(r5)
   12850:	dfc00115 	stw	ra,4(sp)
   12854:	0012cd80 	call	12cd8 <_read_r>
   12858:	10000716 	blt	r2,zero,12878 <__sread+0x38>
   1285c:	80c01417 	ldw	r3,80(r16)
   12860:	1887883a 	add	r3,r3,r2
   12864:	80c01415 	stw	r3,80(r16)
   12868:	dfc00117 	ldw	ra,4(sp)
   1286c:	dc000017 	ldw	r16,0(sp)
   12870:	dec00204 	addi	sp,sp,8
   12874:	f800283a 	ret
   12878:	80c0030b 	ldhu	r3,12(r16)
   1287c:	18fbffcc 	andi	r3,r3,61439
   12880:	80c0030d 	sth	r3,12(r16)
   12884:	dfc00117 	ldw	ra,4(sp)
   12888:	dc000017 	ldw	r16,0(sp)
   1288c:	dec00204 	addi	sp,sp,8
   12890:	f800283a 	ret

00012894 <__swrite>:
   12894:	2880030b 	ldhu	r2,12(r5)
   12898:	defffb04 	addi	sp,sp,-20
   1289c:	dcc00315 	stw	r19,12(sp)
   128a0:	10c0400c 	andi	r3,r2,256
   128a4:	18ffffcc 	andi	r3,r3,65535
   128a8:	18e0001c 	xori	r3,r3,32768
   128ac:	dc800215 	stw	r18,8(sp)
   128b0:	dc400115 	stw	r17,4(sp)
   128b4:	dc000015 	stw	r16,0(sp)
   128b8:	dfc00415 	stw	ra,16(sp)
   128bc:	18e00004 	addi	r3,r3,-32768
   128c0:	2821883a 	mov	r16,r5
   128c4:	2027883a 	mov	r19,r4
   128c8:	3025883a 	mov	r18,r6
   128cc:	3823883a 	mov	r17,r7
   128d0:	18000526 	beq	r3,zero,128e8 <__swrite+0x54>
   128d4:	2940038f 	ldh	r5,14(r5)
   128d8:	000d883a 	mov	r6,zero
   128dc:	01c00084 	movi	r7,2
   128e0:	0012c6c0 	call	12c6c <_lseek_r>
   128e4:	8080030b 	ldhu	r2,12(r16)
   128e8:	8140038f 	ldh	r5,14(r16)
   128ec:	10bbffcc 	andi	r2,r2,61439
   128f0:	9809883a 	mov	r4,r19
   128f4:	900d883a 	mov	r6,r18
   128f8:	880f883a 	mov	r7,r17
   128fc:	8080030d 	sth	r2,12(r16)
   12900:	dfc00417 	ldw	ra,16(sp)
   12904:	dcc00317 	ldw	r19,12(sp)
   12908:	dc800217 	ldw	r18,8(sp)
   1290c:	dc400117 	ldw	r17,4(sp)
   12910:	dc000017 	ldw	r16,0(sp)
   12914:	dec00504 	addi	sp,sp,20
   12918:	00129801 	jmpi	12980 <_write_r>

0001291c <__sseek>:
   1291c:	defffe04 	addi	sp,sp,-8
   12920:	dc000015 	stw	r16,0(sp)
   12924:	2821883a 	mov	r16,r5
   12928:	2940038f 	ldh	r5,14(r5)
   1292c:	dfc00115 	stw	ra,4(sp)
   12930:	0012c6c0 	call	12c6c <_lseek_r>
   12934:	00ffffc4 	movi	r3,-1
   12938:	10c00826 	beq	r2,r3,1295c <__sseek+0x40>
   1293c:	80c0030b 	ldhu	r3,12(r16)
   12940:	80801415 	stw	r2,80(r16)
   12944:	18c40014 	ori	r3,r3,4096
   12948:	80c0030d 	sth	r3,12(r16)
   1294c:	dfc00117 	ldw	ra,4(sp)
   12950:	dc000017 	ldw	r16,0(sp)
   12954:	dec00204 	addi	sp,sp,8
   12958:	f800283a 	ret
   1295c:	80c0030b 	ldhu	r3,12(r16)
   12960:	18fbffcc 	andi	r3,r3,61439
   12964:	80c0030d 	sth	r3,12(r16)
   12968:	dfc00117 	ldw	ra,4(sp)
   1296c:	dc000017 	ldw	r16,0(sp)
   12970:	dec00204 	addi	sp,sp,8
   12974:	f800283a 	ret

00012978 <__sclose>:
   12978:	2940038f 	ldh	r5,14(r5)
   1297c:	00129ec1 	jmpi	129ec <_close_r>

00012980 <_write_r>:
   12980:	defffd04 	addi	sp,sp,-12
   12984:	dc400115 	stw	r17,4(sp)
   12988:	dc000015 	stw	r16,0(sp)
   1298c:	2023883a 	mov	r17,r4
   12990:	040000b4 	movhi	r16,2
   12994:	84228704 	addi	r16,r16,-30180
   12998:	2809883a 	mov	r4,r5
   1299c:	300b883a 	mov	r5,r6
   129a0:	380d883a 	mov	r6,r7
   129a4:	dfc00215 	stw	ra,8(sp)
   129a8:	80000015 	stw	zero,0(r16)
   129ac:	00136340 	call	13634 <write>
   129b0:	00ffffc4 	movi	r3,-1
   129b4:	10c00526 	beq	r2,r3,129cc <_write_r+0x4c>
   129b8:	dfc00217 	ldw	ra,8(sp)
   129bc:	dc400117 	ldw	r17,4(sp)
   129c0:	dc000017 	ldw	r16,0(sp)
   129c4:	dec00304 	addi	sp,sp,12
   129c8:	f800283a 	ret
   129cc:	80c00017 	ldw	r3,0(r16)
   129d0:	183ff926 	beq	r3,zero,129b8 <_write_r+0x38>
   129d4:	88c00015 	stw	r3,0(r17)
   129d8:	dfc00217 	ldw	ra,8(sp)
   129dc:	dc400117 	ldw	r17,4(sp)
   129e0:	dc000017 	ldw	r16,0(sp)
   129e4:	dec00304 	addi	sp,sp,12
   129e8:	f800283a 	ret

000129ec <_close_r>:
   129ec:	defffd04 	addi	sp,sp,-12
   129f0:	dc400115 	stw	r17,4(sp)
   129f4:	dc000015 	stw	r16,0(sp)
   129f8:	2023883a 	mov	r17,r4
   129fc:	040000b4 	movhi	r16,2
   12a00:	84228704 	addi	r16,r16,-30180
   12a04:	2809883a 	mov	r4,r5
   12a08:	dfc00215 	stw	ra,8(sp)
   12a0c:	80000015 	stw	zero,0(r16)
   12a10:	0012dbc0 	call	12dbc <close>
   12a14:	00ffffc4 	movi	r3,-1
   12a18:	10c00526 	beq	r2,r3,12a30 <_close_r+0x44>
   12a1c:	dfc00217 	ldw	ra,8(sp)
   12a20:	dc400117 	ldw	r17,4(sp)
   12a24:	dc000017 	ldw	r16,0(sp)
   12a28:	dec00304 	addi	sp,sp,12
   12a2c:	f800283a 	ret
   12a30:	80c00017 	ldw	r3,0(r16)
   12a34:	183ff926 	beq	r3,zero,12a1c <_close_r+0x30>
   12a38:	88c00015 	stw	r3,0(r17)
   12a3c:	dfc00217 	ldw	ra,8(sp)
   12a40:	dc400117 	ldw	r17,4(sp)
   12a44:	dc000017 	ldw	r16,0(sp)
   12a48:	dec00304 	addi	sp,sp,12
   12a4c:	f800283a 	ret

00012a50 <_fclose_r>:
   12a50:	defffc04 	addi	sp,sp,-16
   12a54:	dc400115 	stw	r17,4(sp)
   12a58:	dc000015 	stw	r16,0(sp)
   12a5c:	dfc00315 	stw	ra,12(sp)
   12a60:	dc800215 	stw	r18,8(sp)
   12a64:	2821883a 	mov	r16,r5
   12a68:	2023883a 	mov	r17,r4
   12a6c:	28003426 	beq	r5,zero,12b40 <_fclose_r+0xf0>
   12a70:	00120100 	call	12010 <__sfp_lock_acquire>
   12a74:	88000226 	beq	r17,zero,12a80 <_fclose_r+0x30>
   12a78:	88800e17 	ldw	r2,56(r17)
   12a7c:	10003826 	beq	r2,zero,12b60 <_fclose_r+0x110>
   12a80:	8080030f 	ldh	r2,12(r16)
   12a84:	10002526 	beq	r2,zero,12b1c <_fclose_r+0xcc>
   12a88:	8809883a 	mov	r4,r17
   12a8c:	800b883a 	mov	r5,r16
   12a90:	0011b4c0 	call	11b4c <_fflush_r>
   12a94:	1025883a 	mov	r18,r2
   12a98:	80800b17 	ldw	r2,44(r16)
   12a9c:	10000426 	beq	r2,zero,12ab0 <_fclose_r+0x60>
   12aa0:	81400717 	ldw	r5,28(r16)
   12aa4:	8809883a 	mov	r4,r17
   12aa8:	103ee83a 	callr	r2
   12aac:	10003516 	blt	r2,zero,12b84 <_fclose_r+0x134>
   12ab0:	8080030b 	ldhu	r2,12(r16)
   12ab4:	1080200c 	andi	r2,r2,128
   12ab8:	10bfffcc 	andi	r2,r2,65535
   12abc:	10a0001c 	xori	r2,r2,32768
   12ac0:	10a00004 	addi	r2,r2,-32768
   12ac4:	10002b1e 	bne	r2,zero,12b74 <_fclose_r+0x124>
   12ac8:	81400c17 	ldw	r5,48(r16)
   12acc:	28000526 	beq	r5,zero,12ae4 <_fclose_r+0x94>
   12ad0:	80801004 	addi	r2,r16,64
   12ad4:	28800226 	beq	r5,r2,12ae0 <_fclose_r+0x90>
   12ad8:	8809883a 	mov	r4,r17
   12adc:	001218c0 	call	1218c <_free_r>
   12ae0:	80000c15 	stw	zero,48(r16)
   12ae4:	81401117 	ldw	r5,68(r16)
   12ae8:	28000326 	beq	r5,zero,12af8 <_fclose_r+0xa8>
   12aec:	8809883a 	mov	r4,r17
   12af0:	001218c0 	call	1218c <_free_r>
   12af4:	80001115 	stw	zero,68(r16)
   12af8:	8000030d 	sth	zero,12(r16)
   12afc:	00120140 	call	12014 <__sfp_lock_release>
   12b00:	9005883a 	mov	r2,r18
   12b04:	dfc00317 	ldw	ra,12(sp)
   12b08:	dc800217 	ldw	r18,8(sp)
   12b0c:	dc400117 	ldw	r17,4(sp)
   12b10:	dc000017 	ldw	r16,0(sp)
   12b14:	dec00404 	addi	sp,sp,16
   12b18:	f800283a 	ret
   12b1c:	00120140 	call	12014 <__sfp_lock_release>
   12b20:	0025883a 	mov	r18,zero
   12b24:	9005883a 	mov	r2,r18
   12b28:	dfc00317 	ldw	ra,12(sp)
   12b2c:	dc800217 	ldw	r18,8(sp)
   12b30:	dc400117 	ldw	r17,4(sp)
   12b34:	dc000017 	ldw	r16,0(sp)
   12b38:	dec00404 	addi	sp,sp,16
   12b3c:	f800283a 	ret
   12b40:	0025883a 	mov	r18,zero
   12b44:	9005883a 	mov	r2,r18
   12b48:	dfc00317 	ldw	ra,12(sp)
   12b4c:	dc800217 	ldw	r18,8(sp)
   12b50:	dc400117 	ldw	r17,4(sp)
   12b54:	dc000017 	ldw	r16,0(sp)
   12b58:	dec00404 	addi	sp,sp,16
   12b5c:	f800283a 	ret
   12b60:	8809883a 	mov	r4,r17
   12b64:	0011e080 	call	11e08 <__sinit>
   12b68:	8080030f 	ldh	r2,12(r16)
   12b6c:	103fc61e 	bne	r2,zero,12a88 <_fclose_r+0x38>
   12b70:	003fea06 	br	12b1c <_fclose_r+0xcc>
   12b74:	81400417 	ldw	r5,16(r16)
   12b78:	8809883a 	mov	r4,r17
   12b7c:	001218c0 	call	1218c <_free_r>
   12b80:	003fd106 	br	12ac8 <_fclose_r+0x78>
   12b84:	04bfffc4 	movi	r18,-1
   12b88:	003fc906 	br	12ab0 <_fclose_r+0x60>

00012b8c <fclose>:
   12b8c:	00800074 	movhi	r2,1
   12b90:	109be504 	addi	r2,r2,28564
   12b94:	200b883a 	mov	r5,r4
   12b98:	11000017 	ldw	r4,0(r2)
   12b9c:	0012a501 	jmpi	12a50 <_fclose_r>

00012ba0 <_fstat_r>:
   12ba0:	defffd04 	addi	sp,sp,-12
   12ba4:	dc400115 	stw	r17,4(sp)
   12ba8:	dc000015 	stw	r16,0(sp)
   12bac:	2023883a 	mov	r17,r4
   12bb0:	040000b4 	movhi	r16,2
   12bb4:	84228704 	addi	r16,r16,-30180
   12bb8:	2809883a 	mov	r4,r5
   12bbc:	300b883a 	mov	r5,r6
   12bc0:	dfc00215 	stw	ra,8(sp)
   12bc4:	80000015 	stw	zero,0(r16)
   12bc8:	0012f040 	call	12f04 <fstat>
   12bcc:	00ffffc4 	movi	r3,-1
   12bd0:	10c00526 	beq	r2,r3,12be8 <_fstat_r+0x48>
   12bd4:	dfc00217 	ldw	ra,8(sp)
   12bd8:	dc400117 	ldw	r17,4(sp)
   12bdc:	dc000017 	ldw	r16,0(sp)
   12be0:	dec00304 	addi	sp,sp,12
   12be4:	f800283a 	ret
   12be8:	80c00017 	ldw	r3,0(r16)
   12bec:	183ff926 	beq	r3,zero,12bd4 <_fstat_r+0x34>
   12bf0:	88c00015 	stw	r3,0(r17)
   12bf4:	dfc00217 	ldw	ra,8(sp)
   12bf8:	dc400117 	ldw	r17,4(sp)
   12bfc:	dc000017 	ldw	r16,0(sp)
   12c00:	dec00304 	addi	sp,sp,12
   12c04:	f800283a 	ret

00012c08 <_isatty_r>:
   12c08:	defffd04 	addi	sp,sp,-12
   12c0c:	dc400115 	stw	r17,4(sp)
   12c10:	dc000015 	stw	r16,0(sp)
   12c14:	2023883a 	mov	r17,r4
   12c18:	040000b4 	movhi	r16,2
   12c1c:	84228704 	addi	r16,r16,-30180
   12c20:	2809883a 	mov	r4,r5
   12c24:	dfc00215 	stw	ra,8(sp)
   12c28:	80000015 	stw	zero,0(r16)
   12c2c:	00130040 	call	13004 <isatty>
   12c30:	00ffffc4 	movi	r3,-1
   12c34:	10c00526 	beq	r2,r3,12c4c <_isatty_r+0x44>
   12c38:	dfc00217 	ldw	ra,8(sp)
   12c3c:	dc400117 	ldw	r17,4(sp)
   12c40:	dc000017 	ldw	r16,0(sp)
   12c44:	dec00304 	addi	sp,sp,12
   12c48:	f800283a 	ret
   12c4c:	80c00017 	ldw	r3,0(r16)
   12c50:	183ff926 	beq	r3,zero,12c38 <_isatty_r+0x30>
   12c54:	88c00015 	stw	r3,0(r17)
   12c58:	dfc00217 	ldw	ra,8(sp)
   12c5c:	dc400117 	ldw	r17,4(sp)
   12c60:	dc000017 	ldw	r16,0(sp)
   12c64:	dec00304 	addi	sp,sp,12
   12c68:	f800283a 	ret

00012c6c <_lseek_r>:
   12c6c:	defffd04 	addi	sp,sp,-12
   12c70:	dc400115 	stw	r17,4(sp)
   12c74:	dc000015 	stw	r16,0(sp)
   12c78:	2023883a 	mov	r17,r4
   12c7c:	040000b4 	movhi	r16,2
   12c80:	84228704 	addi	r16,r16,-30180
   12c84:	2809883a 	mov	r4,r5
   12c88:	300b883a 	mov	r5,r6
   12c8c:	380d883a 	mov	r6,r7
   12c90:	dfc00215 	stw	ra,8(sp)
   12c94:	80000015 	stw	zero,0(r16)
   12c98:	00131e40 	call	131e4 <lseek>
   12c9c:	00ffffc4 	movi	r3,-1
   12ca0:	10c00526 	beq	r2,r3,12cb8 <_lseek_r+0x4c>
   12ca4:	dfc00217 	ldw	ra,8(sp)
   12ca8:	dc400117 	ldw	r17,4(sp)
   12cac:	dc000017 	ldw	r16,0(sp)
   12cb0:	dec00304 	addi	sp,sp,12
   12cb4:	f800283a 	ret
   12cb8:	80c00017 	ldw	r3,0(r16)
   12cbc:	183ff926 	beq	r3,zero,12ca4 <_lseek_r+0x38>
   12cc0:	88c00015 	stw	r3,0(r17)
   12cc4:	dfc00217 	ldw	ra,8(sp)
   12cc8:	dc400117 	ldw	r17,4(sp)
   12ccc:	dc000017 	ldw	r16,0(sp)
   12cd0:	dec00304 	addi	sp,sp,12
   12cd4:	f800283a 	ret

00012cd8 <_read_r>:
   12cd8:	defffd04 	addi	sp,sp,-12
   12cdc:	dc400115 	stw	r17,4(sp)
   12ce0:	dc000015 	stw	r16,0(sp)
   12ce4:	2023883a 	mov	r17,r4
   12ce8:	040000b4 	movhi	r16,2
   12cec:	84228704 	addi	r16,r16,-30180
   12cf0:	2809883a 	mov	r4,r5
   12cf4:	300b883a 	mov	r5,r6
   12cf8:	380d883a 	mov	r6,r7
   12cfc:	dfc00215 	stw	ra,8(sp)
   12d00:	80000015 	stw	zero,0(r16)
   12d04:	00133c00 	call	133c0 <read>
   12d08:	00ffffc4 	movi	r3,-1
   12d0c:	10c00526 	beq	r2,r3,12d24 <_read_r+0x4c>
   12d10:	dfc00217 	ldw	ra,8(sp)
   12d14:	dc400117 	ldw	r17,4(sp)
   12d18:	dc000017 	ldw	r16,0(sp)
   12d1c:	dec00304 	addi	sp,sp,12
   12d20:	f800283a 	ret
   12d24:	80c00017 	ldw	r3,0(r16)
   12d28:	183ff926 	beq	r3,zero,12d10 <_read_r+0x38>
   12d2c:	88c00015 	stw	r3,0(r17)
   12d30:	dfc00217 	ldw	ra,8(sp)
   12d34:	dc400117 	ldw	r17,4(sp)
   12d38:	dc000017 	ldw	r16,0(sp)
   12d3c:	dec00304 	addi	sp,sp,12
   12d40:	f800283a 	ret

00012d44 <__mulsi3>:
   12d44:	0005883a 	mov	r2,zero
   12d48:	20000726 	beq	r4,zero,12d68 <__mulsi3+0x24>
   12d4c:	20c0004c 	andi	r3,r4,1
   12d50:	2008d07a 	srli	r4,r4,1
   12d54:	18000126 	beq	r3,zero,12d5c <__mulsi3+0x18>
   12d58:	1145883a 	add	r2,r2,r5
   12d5c:	294b883a 	add	r5,r5,r5
   12d60:	203ffa1e 	bne	r4,zero,12d4c <__mulsi3+0x8>
   12d64:	f800283a 	ret
   12d68:	f800283a 	ret

00012d6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12d6c:	defffe04 	addi	sp,sp,-8
   12d70:	dfc00115 	stw	ra,4(sp)
   12d74:	df000015 	stw	fp,0(sp)
   12d78:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12d7c:	00800074 	movhi	r2,1
   12d80:	109bed04 	addi	r2,r2,28596
   12d84:	10800017 	ldw	r2,0(r2)
   12d88:	10000526 	beq	r2,zero,12da0 <alt_get_errno+0x34>
   12d8c:	00800074 	movhi	r2,1
   12d90:	109bed04 	addi	r2,r2,28596
   12d94:	10800017 	ldw	r2,0(r2)
   12d98:	103ee83a 	callr	r2
   12d9c:	00000206 	br	12da8 <alt_get_errno+0x3c>
   12da0:	008000b4 	movhi	r2,2
   12da4:	10a28704 	addi	r2,r2,-30180
}
   12da8:	e037883a 	mov	sp,fp
   12dac:	dfc00117 	ldw	ra,4(sp)
   12db0:	df000017 	ldw	fp,0(sp)
   12db4:	dec00204 	addi	sp,sp,8
   12db8:	f800283a 	ret

00012dbc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   12dbc:	defffb04 	addi	sp,sp,-20
   12dc0:	dfc00415 	stw	ra,16(sp)
   12dc4:	df000315 	stw	fp,12(sp)
   12dc8:	df000304 	addi	fp,sp,12
   12dcc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   12dd0:	e0bfff17 	ldw	r2,-4(fp)
   12dd4:	10000716 	blt	r2,zero,12df4 <close+0x38>
   12dd8:	e13fff17 	ldw	r4,-4(fp)
   12ddc:	01400304 	movi	r5,12
   12de0:	0012d440 	call	12d44 <__mulsi3>
   12de4:	00c00074 	movhi	r3,1
   12de8:	18d76c04 	addi	r3,r3,23984
   12dec:	10c5883a 	add	r2,r2,r3
   12df0:	00000106 	br	12df8 <close+0x3c>
   12df4:	0005883a 	mov	r2,zero
   12df8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   12dfc:	e0bffd17 	ldw	r2,-12(fp)
   12e00:	10001826 	beq	r2,zero,12e64 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   12e04:	e0bffd17 	ldw	r2,-12(fp)
   12e08:	10800017 	ldw	r2,0(r2)
   12e0c:	10800417 	ldw	r2,16(r2)
   12e10:	10000626 	beq	r2,zero,12e2c <close+0x70>
   12e14:	e0bffd17 	ldw	r2,-12(fp)
   12e18:	10800017 	ldw	r2,0(r2)
   12e1c:	10800417 	ldw	r2,16(r2)
   12e20:	e13ffd17 	ldw	r4,-12(fp)
   12e24:	103ee83a 	callr	r2
   12e28:	00000106 	br	12e30 <close+0x74>
   12e2c:	0005883a 	mov	r2,zero
   12e30:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   12e34:	e13fff17 	ldw	r4,-4(fp)
   12e38:	00134b40 	call	134b4 <alt_release_fd>
    if (rval < 0)
   12e3c:	e0bffe17 	ldw	r2,-8(fp)
   12e40:	1000060e 	bge	r2,zero,12e5c <close+0xa0>
    {
      ALT_ERRNO = -rval;
   12e44:	0012d6c0 	call	12d6c <alt_get_errno>
   12e48:	e0fffe17 	ldw	r3,-8(fp)
   12e4c:	00c7c83a 	sub	r3,zero,r3
   12e50:	10c00015 	stw	r3,0(r2)
      return -1;
   12e54:	00bfffc4 	movi	r2,-1
   12e58:	00000606 	br	12e74 <close+0xb8>
    }
    return 0;
   12e5c:	0005883a 	mov	r2,zero
   12e60:	00000406 	br	12e74 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   12e64:	0012d6c0 	call	12d6c <alt_get_errno>
   12e68:	00c01444 	movi	r3,81
   12e6c:	10c00015 	stw	r3,0(r2)
    return -1;
   12e70:	00bfffc4 	movi	r2,-1
  }
}
   12e74:	e037883a 	mov	sp,fp
   12e78:	dfc00117 	ldw	ra,4(sp)
   12e7c:	df000017 	ldw	fp,0(sp)
   12e80:	dec00204 	addi	sp,sp,8
   12e84:	f800283a 	ret

00012e88 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   12e88:	defffc04 	addi	sp,sp,-16
   12e8c:	df000315 	stw	fp,12(sp)
   12e90:	df000304 	addi	fp,sp,12
   12e94:	e13ffd15 	stw	r4,-12(fp)
   12e98:	e17ffe15 	stw	r5,-8(fp)
   12e9c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   12ea0:	e0bfff17 	ldw	r2,-4(fp)
}
   12ea4:	e037883a 	mov	sp,fp
   12ea8:	df000017 	ldw	fp,0(sp)
   12eac:	dec00104 	addi	sp,sp,4
   12eb0:	f800283a 	ret

00012eb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12eb4:	defffe04 	addi	sp,sp,-8
   12eb8:	dfc00115 	stw	ra,4(sp)
   12ebc:	df000015 	stw	fp,0(sp)
   12ec0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12ec4:	00800074 	movhi	r2,1
   12ec8:	109bed04 	addi	r2,r2,28596
   12ecc:	10800017 	ldw	r2,0(r2)
   12ed0:	10000526 	beq	r2,zero,12ee8 <alt_get_errno+0x34>
   12ed4:	00800074 	movhi	r2,1
   12ed8:	109bed04 	addi	r2,r2,28596
   12edc:	10800017 	ldw	r2,0(r2)
   12ee0:	103ee83a 	callr	r2
   12ee4:	00000206 	br	12ef0 <alt_get_errno+0x3c>
   12ee8:	008000b4 	movhi	r2,2
   12eec:	10a28704 	addi	r2,r2,-30180
}
   12ef0:	e037883a 	mov	sp,fp
   12ef4:	dfc00117 	ldw	ra,4(sp)
   12ef8:	df000017 	ldw	fp,0(sp)
   12efc:	dec00204 	addi	sp,sp,8
   12f00:	f800283a 	ret

00012f04 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   12f04:	defffb04 	addi	sp,sp,-20
   12f08:	dfc00415 	stw	ra,16(sp)
   12f0c:	df000315 	stw	fp,12(sp)
   12f10:	df000304 	addi	fp,sp,12
   12f14:	e13ffe15 	stw	r4,-8(fp)
   12f18:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   12f1c:	e0bffe17 	ldw	r2,-8(fp)
   12f20:	10000716 	blt	r2,zero,12f40 <fstat+0x3c>
   12f24:	e13ffe17 	ldw	r4,-8(fp)
   12f28:	01400304 	movi	r5,12
   12f2c:	0012d440 	call	12d44 <__mulsi3>
   12f30:	00c00074 	movhi	r3,1
   12f34:	18d76c04 	addi	r3,r3,23984
   12f38:	10c5883a 	add	r2,r2,r3
   12f3c:	00000106 	br	12f44 <fstat+0x40>
   12f40:	0005883a 	mov	r2,zero
   12f44:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   12f48:	e0bffd17 	ldw	r2,-12(fp)
   12f4c:	10001026 	beq	r2,zero,12f90 <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   12f50:	e0bffd17 	ldw	r2,-12(fp)
   12f54:	10800017 	ldw	r2,0(r2)
   12f58:	10800817 	ldw	r2,32(r2)
   12f5c:	10000726 	beq	r2,zero,12f7c <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
   12f60:	e0bffd17 	ldw	r2,-12(fp)
   12f64:	10800017 	ldw	r2,0(r2)
   12f68:	10800817 	ldw	r2,32(r2)
   12f6c:	e13ffd17 	ldw	r4,-12(fp)
   12f70:	e17fff17 	ldw	r5,-4(fp)
   12f74:	103ee83a 	callr	r2
   12f78:	00000906 	br	12fa0 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   12f7c:	e0bfff17 	ldw	r2,-4(fp)
   12f80:	00c80004 	movi	r3,8192
   12f84:	10c00115 	stw	r3,4(r2)
      return 0;
   12f88:	0005883a 	mov	r2,zero
   12f8c:	00000406 	br	12fa0 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   12f90:	0012eb40 	call	12eb4 <alt_get_errno>
   12f94:	00c01444 	movi	r3,81
   12f98:	10c00015 	stw	r3,0(r2)
    return -1;
   12f9c:	00bfffc4 	movi	r2,-1
  }
}
   12fa0:	e037883a 	mov	sp,fp
   12fa4:	dfc00117 	ldw	ra,4(sp)
   12fa8:	df000017 	ldw	fp,0(sp)
   12fac:	dec00204 	addi	sp,sp,8
   12fb0:	f800283a 	ret

00012fb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12fb4:	defffe04 	addi	sp,sp,-8
   12fb8:	dfc00115 	stw	ra,4(sp)
   12fbc:	df000015 	stw	fp,0(sp)
   12fc0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12fc4:	00800074 	movhi	r2,1
   12fc8:	109bed04 	addi	r2,r2,28596
   12fcc:	10800017 	ldw	r2,0(r2)
   12fd0:	10000526 	beq	r2,zero,12fe8 <alt_get_errno+0x34>
   12fd4:	00800074 	movhi	r2,1
   12fd8:	109bed04 	addi	r2,r2,28596
   12fdc:	10800017 	ldw	r2,0(r2)
   12fe0:	103ee83a 	callr	r2
   12fe4:	00000206 	br	12ff0 <alt_get_errno+0x3c>
   12fe8:	008000b4 	movhi	r2,2
   12fec:	10a28704 	addi	r2,r2,-30180
}
   12ff0:	e037883a 	mov	sp,fp
   12ff4:	dfc00117 	ldw	ra,4(sp)
   12ff8:	df000017 	ldw	fp,0(sp)
   12ffc:	dec00204 	addi	sp,sp,8
   13000:	f800283a 	ret

00013004 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   13004:	deffed04 	addi	sp,sp,-76
   13008:	dfc01215 	stw	ra,72(sp)
   1300c:	df001115 	stw	fp,68(sp)
   13010:	df001104 	addi	fp,sp,68
   13014:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13018:	e0bfff17 	ldw	r2,-4(fp)
   1301c:	10000716 	blt	r2,zero,1303c <isatty+0x38>
   13020:	e13fff17 	ldw	r4,-4(fp)
   13024:	01400304 	movi	r5,12
   13028:	0012d440 	call	12d44 <__mulsi3>
   1302c:	00c00074 	movhi	r3,1
   13030:	18d76c04 	addi	r3,r3,23984
   13034:	10c5883a 	add	r2,r2,r3
   13038:	00000106 	br	13040 <isatty+0x3c>
   1303c:	0005883a 	mov	r2,zero
   13040:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   13044:	e0bfef17 	ldw	r2,-68(fp)
   13048:	10000e26 	beq	r2,zero,13084 <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   1304c:	e0bfef17 	ldw	r2,-68(fp)
   13050:	10800017 	ldw	r2,0(r2)
   13054:	10800817 	ldw	r2,32(r2)
   13058:	1000021e 	bne	r2,zero,13064 <isatty+0x60>
    {
      return 1;
   1305c:	00800044 	movi	r2,1
   13060:	00000c06 	br	13094 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   13064:	e0bff004 	addi	r2,fp,-64
   13068:	e13fff17 	ldw	r4,-4(fp)
   1306c:	100b883a 	mov	r5,r2
   13070:	0012f040 	call	12f04 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   13074:	e0bff117 	ldw	r2,-60(fp)
   13078:	10880020 	cmpeqi	r2,r2,8192
   1307c:	10803fcc 	andi	r2,r2,255
   13080:	00000406 	br	13094 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13084:	0012fb40 	call	12fb4 <alt_get_errno>
   13088:	00c01444 	movi	r3,81
   1308c:	10c00015 	stw	r3,0(r2)
    return 0;
   13090:	0005883a 	mov	r2,zero
  }
}
   13094:	e037883a 	mov	sp,fp
   13098:	dfc00117 	ldw	ra,4(sp)
   1309c:	df000017 	ldw	fp,0(sp)
   130a0:	dec00204 	addi	sp,sp,8
   130a4:	f800283a 	ret

000130a8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   130a8:	defffc04 	addi	sp,sp,-16
   130ac:	df000315 	stw	fp,12(sp)
   130b0:	df000304 	addi	fp,sp,12
   130b4:	e13ffd15 	stw	r4,-12(fp)
   130b8:	e17ffe15 	stw	r5,-8(fp)
   130bc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   130c0:	e0fffe17 	ldw	r3,-8(fp)
   130c4:	e0bffd17 	ldw	r2,-12(fp)
   130c8:	18800e26 	beq	r3,r2,13104 <alt_load_section+0x5c>
  {
    while( to != end )
   130cc:	00000a06 	br	130f8 <alt_load_section+0x50>
    {
      *to++ = *from++;
   130d0:	e0bffd17 	ldw	r2,-12(fp)
   130d4:	10c00017 	ldw	r3,0(r2)
   130d8:	e0bffe17 	ldw	r2,-8(fp)
   130dc:	10c00015 	stw	r3,0(r2)
   130e0:	e0bffe17 	ldw	r2,-8(fp)
   130e4:	10800104 	addi	r2,r2,4
   130e8:	e0bffe15 	stw	r2,-8(fp)
   130ec:	e0bffd17 	ldw	r2,-12(fp)
   130f0:	10800104 	addi	r2,r2,4
   130f4:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   130f8:	e0fffe17 	ldw	r3,-8(fp)
   130fc:	e0bfff17 	ldw	r2,-4(fp)
   13100:	18bff31e 	bne	r3,r2,130d0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   13104:	e037883a 	mov	sp,fp
   13108:	df000017 	ldw	fp,0(sp)
   1310c:	dec00104 	addi	sp,sp,4
   13110:	f800283a 	ret

00013114 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   13114:	defffe04 	addi	sp,sp,-8
   13118:	dfc00115 	stw	ra,4(sp)
   1311c:	df000015 	stw	fp,0(sp)
   13120:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   13124:	01000074 	movhi	r4,1
   13128:	211bf204 	addi	r4,r4,28616
   1312c:	01400074 	movhi	r5,1
   13130:	29556004 	addi	r5,r5,21888
   13134:	01800074 	movhi	r6,1
   13138:	319bf204 	addi	r6,r6,28616
   1313c:	00130a80 	call	130a8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   13140:	01000074 	movhi	r4,1
   13144:	21000804 	addi	r4,r4,32
   13148:	01400074 	movhi	r5,1
   1314c:	29400804 	addi	r5,r5,32
   13150:	01800074 	movhi	r6,1
   13154:	31806e04 	addi	r6,r6,440
   13158:	00130a80 	call	130a8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   1315c:	01000074 	movhi	r4,1
   13160:	21154e04 	addi	r4,r4,21816
   13164:	01400074 	movhi	r5,1
   13168:	29554e04 	addi	r5,r5,21816
   1316c:	01800074 	movhi	r6,1
   13170:	31956004 	addi	r6,r6,21888
   13174:	00130a80 	call	130a8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   13178:	00144980 	call	14498 <alt_dcache_flush_all>
  alt_icache_flush_all();
   1317c:	001465c0 	call	1465c <alt_icache_flush_all>
}
   13180:	e037883a 	mov	sp,fp
   13184:	dfc00117 	ldw	ra,4(sp)
   13188:	df000017 	ldw	fp,0(sp)
   1318c:	dec00204 	addi	sp,sp,8
   13190:	f800283a 	ret

00013194 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13194:	defffe04 	addi	sp,sp,-8
   13198:	dfc00115 	stw	ra,4(sp)
   1319c:	df000015 	stw	fp,0(sp)
   131a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   131a4:	00800074 	movhi	r2,1
   131a8:	109bed04 	addi	r2,r2,28596
   131ac:	10800017 	ldw	r2,0(r2)
   131b0:	10000526 	beq	r2,zero,131c8 <alt_get_errno+0x34>
   131b4:	00800074 	movhi	r2,1
   131b8:	109bed04 	addi	r2,r2,28596
   131bc:	10800017 	ldw	r2,0(r2)
   131c0:	103ee83a 	callr	r2
   131c4:	00000206 	br	131d0 <alt_get_errno+0x3c>
   131c8:	008000b4 	movhi	r2,2
   131cc:	10a28704 	addi	r2,r2,-30180
}
   131d0:	e037883a 	mov	sp,fp
   131d4:	dfc00117 	ldw	ra,4(sp)
   131d8:	df000017 	ldw	fp,0(sp)
   131dc:	dec00204 	addi	sp,sp,8
   131e0:	f800283a 	ret

000131e4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   131e4:	defff904 	addi	sp,sp,-28
   131e8:	dfc00615 	stw	ra,24(sp)
   131ec:	df000515 	stw	fp,20(sp)
   131f0:	df000504 	addi	fp,sp,20
   131f4:	e13ffd15 	stw	r4,-12(fp)
   131f8:	e17ffe15 	stw	r5,-8(fp)
   131fc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   13200:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13204:	e0bffd17 	ldw	r2,-12(fp)
   13208:	10000716 	blt	r2,zero,13228 <lseek+0x44>
   1320c:	e13ffd17 	ldw	r4,-12(fp)
   13210:	01400304 	movi	r5,12
   13214:	0012d440 	call	12d44 <__mulsi3>
   13218:	00c00074 	movhi	r3,1
   1321c:	18d76c04 	addi	r3,r3,23984
   13220:	10c5883a 	add	r2,r2,r3
   13224:	00000106 	br	1322c <lseek+0x48>
   13228:	0005883a 	mov	r2,zero
   1322c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   13230:	e0bffc17 	ldw	r2,-16(fp)
   13234:	10001026 	beq	r2,zero,13278 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   13238:	e0bffc17 	ldw	r2,-16(fp)
   1323c:	10800017 	ldw	r2,0(r2)
   13240:	10800717 	ldw	r2,28(r2)
   13244:	10000926 	beq	r2,zero,1326c <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   13248:	e0bffc17 	ldw	r2,-16(fp)
   1324c:	10800017 	ldw	r2,0(r2)
   13250:	10800717 	ldw	r2,28(r2)
   13254:	e13ffc17 	ldw	r4,-16(fp)
   13258:	e17ffe17 	ldw	r5,-8(fp)
   1325c:	e1bfff17 	ldw	r6,-4(fp)
   13260:	103ee83a 	callr	r2
   13264:	e0bffb15 	stw	r2,-20(fp)
   13268:	00000506 	br	13280 <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   1326c:	00bfde84 	movi	r2,-134
   13270:	e0bffb15 	stw	r2,-20(fp)
   13274:	00000206 	br	13280 <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
   13278:	00bfebc4 	movi	r2,-81
   1327c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   13280:	e0bffb17 	ldw	r2,-20(fp)
   13284:	1000060e 	bge	r2,zero,132a0 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   13288:	00131940 	call	13194 <alt_get_errno>
   1328c:	e0fffb17 	ldw	r3,-20(fp)
   13290:	00c7c83a 	sub	r3,zero,r3
   13294:	10c00015 	stw	r3,0(r2)
    rc = -1;
   13298:	00bfffc4 	movi	r2,-1
   1329c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   132a0:	e0bffb17 	ldw	r2,-20(fp)
}
   132a4:	e037883a 	mov	sp,fp
   132a8:	dfc00117 	ldw	ra,4(sp)
   132ac:	df000017 	ldw	fp,0(sp)
   132b0:	dec00204 	addi	sp,sp,8
   132b4:	f800283a 	ret

000132b8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   132b8:	defffd04 	addi	sp,sp,-12
   132bc:	dfc00215 	stw	ra,8(sp)
   132c0:	df000115 	stw	fp,4(sp)
   132c4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   132c8:	0009883a 	mov	r4,zero
   132cc:	001375c0 	call	1375c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   132d0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   132d4:	00137900 	call	13790 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   132d8:	01000074 	movhi	r4,1
   132dc:	21155804 	addi	r4,r4,21856
   132e0:	01400074 	movhi	r5,1
   132e4:	29555804 	addi	r5,r5,21856
   132e8:	01800074 	movhi	r6,1
   132ec:	31955804 	addi	r6,r6,21856
   132f0:	0014a200 	call	14a20 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   132f4:	00145a40 	call	145a4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   132f8:	01000074 	movhi	r4,1
   132fc:	21118004 	addi	r4,r4,17920
   13300:	00151640 	call	15164 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   13304:	d126a417 	ldw	r4,-25968(gp)
   13308:	d0e6a517 	ldw	r3,-25964(gp)
   1330c:	d0a6a617 	ldw	r2,-25960(gp)
   13310:	180b883a 	mov	r5,r3
   13314:	100d883a 	mov	r6,r2
   13318:	00101f40 	call	101f4 <main>
   1331c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   13320:	01000044 	movi	r4,1
   13324:	0012dbc0 	call	12dbc <close>
  exit (result);
   13328:	e13fff17 	ldw	r4,-4(fp)
   1332c:	00151780 	call	15178 <exit>

00013330 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   13330:	defffe04 	addi	sp,sp,-8
   13334:	df000115 	stw	fp,4(sp)
   13338:	df000104 	addi	fp,sp,4
   1333c:	e13fff15 	stw	r4,-4(fp)
}
   13340:	e037883a 	mov	sp,fp
   13344:	df000017 	ldw	fp,0(sp)
   13348:	dec00104 	addi	sp,sp,4
   1334c:	f800283a 	ret

00013350 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   13350:	defffe04 	addi	sp,sp,-8
   13354:	df000115 	stw	fp,4(sp)
   13358:	df000104 	addi	fp,sp,4
   1335c:	e13fff15 	stw	r4,-4(fp)
}
   13360:	e037883a 	mov	sp,fp
   13364:	df000017 	ldw	fp,0(sp)
   13368:	dec00104 	addi	sp,sp,4
   1336c:	f800283a 	ret

00013370 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13370:	defffe04 	addi	sp,sp,-8
   13374:	dfc00115 	stw	ra,4(sp)
   13378:	df000015 	stw	fp,0(sp)
   1337c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13380:	00800074 	movhi	r2,1
   13384:	109bed04 	addi	r2,r2,28596
   13388:	10800017 	ldw	r2,0(r2)
   1338c:	10000526 	beq	r2,zero,133a4 <alt_get_errno+0x34>
   13390:	00800074 	movhi	r2,1
   13394:	109bed04 	addi	r2,r2,28596
   13398:	10800017 	ldw	r2,0(r2)
   1339c:	103ee83a 	callr	r2
   133a0:	00000206 	br	133ac <alt_get_errno+0x3c>
   133a4:	008000b4 	movhi	r2,2
   133a8:	10a28704 	addi	r2,r2,-30180
}
   133ac:	e037883a 	mov	sp,fp
   133b0:	dfc00117 	ldw	ra,4(sp)
   133b4:	df000017 	ldw	fp,0(sp)
   133b8:	dec00204 	addi	sp,sp,8
   133bc:	f800283a 	ret

000133c0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   133c0:	defff904 	addi	sp,sp,-28
   133c4:	dfc00615 	stw	ra,24(sp)
   133c8:	df000515 	stw	fp,20(sp)
   133cc:	df000504 	addi	fp,sp,20
   133d0:	e13ffd15 	stw	r4,-12(fp)
   133d4:	e17ffe15 	stw	r5,-8(fp)
   133d8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   133dc:	e0bffd17 	ldw	r2,-12(fp)
   133e0:	10000716 	blt	r2,zero,13400 <read+0x40>
   133e4:	e13ffd17 	ldw	r4,-12(fp)
   133e8:	01400304 	movi	r5,12
   133ec:	0012d440 	call	12d44 <__mulsi3>
   133f0:	00c00074 	movhi	r3,1
   133f4:	18d76c04 	addi	r3,r3,23984
   133f8:	10c5883a 	add	r2,r2,r3
   133fc:	00000106 	br	13404 <read+0x44>
   13400:	0005883a 	mov	r2,zero
   13404:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   13408:	e0bffb17 	ldw	r2,-20(fp)
   1340c:	10002026 	beq	r2,zero,13490 <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   13410:	e0bffb17 	ldw	r2,-20(fp)
   13414:	10800217 	ldw	r2,8(r2)
   13418:	108000cc 	andi	r2,r2,3
   1341c:	10800060 	cmpeqi	r2,r2,1
   13420:	1000171e 	bne	r2,zero,13480 <read+0xc0>
        (fd->dev->read))
   13424:	e0bffb17 	ldw	r2,-20(fp)
   13428:	10800017 	ldw	r2,0(r2)
   1342c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   13430:	10001326 	beq	r2,zero,13480 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   13434:	e0bffb17 	ldw	r2,-20(fp)
   13438:	10800017 	ldw	r2,0(r2)
   1343c:	10c00517 	ldw	r3,20(r2)
   13440:	e0bfff17 	ldw	r2,-4(fp)
   13444:	e13ffb17 	ldw	r4,-20(fp)
   13448:	e17ffe17 	ldw	r5,-8(fp)
   1344c:	100d883a 	mov	r6,r2
   13450:	183ee83a 	callr	r3
   13454:	e0bffc15 	stw	r2,-16(fp)
   13458:	e0bffc17 	ldw	r2,-16(fp)
   1345c:	1000060e 	bge	r2,zero,13478 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   13460:	00133700 	call	13370 <alt_get_errno>
   13464:	e0fffc17 	ldw	r3,-16(fp)
   13468:	00c7c83a 	sub	r3,zero,r3
   1346c:	10c00015 	stw	r3,0(r2)
          return -1;
   13470:	00bfffc4 	movi	r2,-1
   13474:	00000a06 	br	134a0 <read+0xe0>
        }
        return rval;
   13478:	e0bffc17 	ldw	r2,-16(fp)
   1347c:	00000806 	br	134a0 <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   13480:	00133700 	call	13370 <alt_get_errno>
   13484:	00c00344 	movi	r3,13
   13488:	10c00015 	stw	r3,0(r2)
   1348c:	00000306 	br	1349c <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   13490:	00133700 	call	13370 <alt_get_errno>
   13494:	00c01444 	movi	r3,81
   13498:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   1349c:	00bfffc4 	movi	r2,-1
}
   134a0:	e037883a 	mov	sp,fp
   134a4:	dfc00117 	ldw	ra,4(sp)
   134a8:	df000017 	ldw	fp,0(sp)
   134ac:	dec00204 	addi	sp,sp,8
   134b0:	f800283a 	ret

000134b4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   134b4:	defffc04 	addi	sp,sp,-16
   134b8:	dfc00315 	stw	ra,12(sp)
   134bc:	df000215 	stw	fp,8(sp)
   134c0:	dc000115 	stw	r16,4(sp)
   134c4:	df000104 	addi	fp,sp,4
   134c8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   134cc:	e0bfff17 	ldw	r2,-4(fp)
   134d0:	108000d0 	cmplti	r2,r2,3
   134d4:	1000111e 	bne	r2,zero,1351c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   134d8:	04000074 	movhi	r16,1
   134dc:	84176c04 	addi	r16,r16,23984
   134e0:	e0bfff17 	ldw	r2,-4(fp)
   134e4:	1009883a 	mov	r4,r2
   134e8:	01400304 	movi	r5,12
   134ec:	0012d440 	call	12d44 <__mulsi3>
   134f0:	8085883a 	add	r2,r16,r2
   134f4:	10800204 	addi	r2,r2,8
   134f8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   134fc:	04000074 	movhi	r16,1
   13500:	84176c04 	addi	r16,r16,23984
   13504:	e0bfff17 	ldw	r2,-4(fp)
   13508:	1009883a 	mov	r4,r2
   1350c:	01400304 	movi	r5,12
   13510:	0012d440 	call	12d44 <__mulsi3>
   13514:	8085883a 	add	r2,r16,r2
   13518:	10000015 	stw	zero,0(r2)
  }
}
   1351c:	e037883a 	mov	sp,fp
   13520:	dfc00217 	ldw	ra,8(sp)
   13524:	df000117 	ldw	fp,4(sp)
   13528:	dc000017 	ldw	r16,0(sp)
   1352c:	dec00304 	addi	sp,sp,12
   13530:	f800283a 	ret

00013534 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   13534:	defff904 	addi	sp,sp,-28
   13538:	df000615 	stw	fp,24(sp)
   1353c:	df000604 	addi	fp,sp,24
   13540:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13544:	0005303a 	rdctl	r2,status
   13548:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1354c:	e0fffc17 	ldw	r3,-16(fp)
   13550:	00bfff84 	movi	r2,-2
   13554:	1884703a 	and	r2,r3,r2
   13558:	1001703a 	wrctl	status,r2
  
  return context;
   1355c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   13560:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   13564:	d0a00a17 	ldw	r2,-32728(gp)
   13568:	10c000c4 	addi	r3,r2,3
   1356c:	00bfff04 	movi	r2,-4
   13570:	1884703a 	and	r2,r3,r2
   13574:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   13578:	d0e00a17 	ldw	r3,-32728(gp)
   1357c:	e0bfff17 	ldw	r2,-4(fp)
   13580:	1885883a 	add	r2,r3,r2
   13584:	00c000b4 	movhi	r3,2
   13588:	18c00004 	addi	r3,r3,0
   1358c:	1880062e 	bgeu	r3,r2,135a8 <sbrk+0x74>
   13590:	e0bffa17 	ldw	r2,-24(fp)
   13594:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13598:	e0bffd17 	ldw	r2,-12(fp)
   1359c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   135a0:	00bfffc4 	movi	r2,-1
   135a4:	00000b06 	br	135d4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   135a8:	d0a00a17 	ldw	r2,-32728(gp)
   135ac:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   135b0:	d0e00a17 	ldw	r3,-32728(gp)
   135b4:	e0bfff17 	ldw	r2,-4(fp)
   135b8:	1885883a 	add	r2,r3,r2
   135bc:	d0a00a15 	stw	r2,-32728(gp)
   135c0:	e0bffa17 	ldw	r2,-24(fp)
   135c4:	e0bffe15 	stw	r2,-8(fp)
   135c8:	e0bffe17 	ldw	r2,-8(fp)
   135cc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   135d0:	e0bffb17 	ldw	r2,-20(fp)
} 
   135d4:	e037883a 	mov	sp,fp
   135d8:	df000017 	ldw	fp,0(sp)
   135dc:	dec00104 	addi	sp,sp,4
   135e0:	f800283a 	ret

000135e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   135e4:	defffe04 	addi	sp,sp,-8
   135e8:	dfc00115 	stw	ra,4(sp)
   135ec:	df000015 	stw	fp,0(sp)
   135f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   135f4:	00800074 	movhi	r2,1
   135f8:	109bed04 	addi	r2,r2,28596
   135fc:	10800017 	ldw	r2,0(r2)
   13600:	10000526 	beq	r2,zero,13618 <alt_get_errno+0x34>
   13604:	00800074 	movhi	r2,1
   13608:	109bed04 	addi	r2,r2,28596
   1360c:	10800017 	ldw	r2,0(r2)
   13610:	103ee83a 	callr	r2
   13614:	00000206 	br	13620 <alt_get_errno+0x3c>
   13618:	008000b4 	movhi	r2,2
   1361c:	10a28704 	addi	r2,r2,-30180
}
   13620:	e037883a 	mov	sp,fp
   13624:	dfc00117 	ldw	ra,4(sp)
   13628:	df000017 	ldw	fp,0(sp)
   1362c:	dec00204 	addi	sp,sp,8
   13630:	f800283a 	ret

00013634 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   13634:	defff904 	addi	sp,sp,-28
   13638:	dfc00615 	stw	ra,24(sp)
   1363c:	df000515 	stw	fp,20(sp)
   13640:	df000504 	addi	fp,sp,20
   13644:	e13ffd15 	stw	r4,-12(fp)
   13648:	e17ffe15 	stw	r5,-8(fp)
   1364c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13650:	e0bffd17 	ldw	r2,-12(fp)
   13654:	10000716 	blt	r2,zero,13674 <write+0x40>
   13658:	e13ffd17 	ldw	r4,-12(fp)
   1365c:	01400304 	movi	r5,12
   13660:	0012d440 	call	12d44 <__mulsi3>
   13664:	00c00074 	movhi	r3,1
   13668:	18d76c04 	addi	r3,r3,23984
   1366c:	10c5883a 	add	r2,r2,r3
   13670:	00000106 	br	13678 <write+0x44>
   13674:	0005883a 	mov	r2,zero
   13678:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1367c:	e0bffb17 	ldw	r2,-20(fp)
   13680:	10001f26 	beq	r2,zero,13700 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   13684:	e0bffb17 	ldw	r2,-20(fp)
   13688:	10800217 	ldw	r2,8(r2)
   1368c:	108000cc 	andi	r2,r2,3
   13690:	10001726 	beq	r2,zero,136f0 <write+0xbc>
   13694:	e0bffb17 	ldw	r2,-20(fp)
   13698:	10800017 	ldw	r2,0(r2)
   1369c:	10800617 	ldw	r2,24(r2)
   136a0:	10001326 	beq	r2,zero,136f0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   136a4:	e0bffb17 	ldw	r2,-20(fp)
   136a8:	10800017 	ldw	r2,0(r2)
   136ac:	10c00617 	ldw	r3,24(r2)
   136b0:	e0bfff17 	ldw	r2,-4(fp)
   136b4:	e13ffb17 	ldw	r4,-20(fp)
   136b8:	e17ffe17 	ldw	r5,-8(fp)
   136bc:	100d883a 	mov	r6,r2
   136c0:	183ee83a 	callr	r3
   136c4:	e0bffc15 	stw	r2,-16(fp)
   136c8:	e0bffc17 	ldw	r2,-16(fp)
   136cc:	1000060e 	bge	r2,zero,136e8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   136d0:	00135e40 	call	135e4 <alt_get_errno>
   136d4:	e0fffc17 	ldw	r3,-16(fp)
   136d8:	00c7c83a 	sub	r3,zero,r3
   136dc:	10c00015 	stw	r3,0(r2)
        return -1;
   136e0:	00bfffc4 	movi	r2,-1
   136e4:	00000a06 	br	13710 <write+0xdc>
      }
      return rval;
   136e8:	e0bffc17 	ldw	r2,-16(fp)
   136ec:	00000806 	br	13710 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
   136f0:	00135e40 	call	135e4 <alt_get_errno>
   136f4:	00c00344 	movi	r3,13
   136f8:	10c00015 	stw	r3,0(r2)
   136fc:	00000306 	br	1370c <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   13700:	00135e40 	call	135e4 <alt_get_errno>
   13704:	00c01444 	movi	r3,81
   13708:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   1370c:	00bfffc4 	movi	r2,-1
}
   13710:	e037883a 	mov	sp,fp
   13714:	dfc00117 	ldw	ra,4(sp)
   13718:	df000017 	ldw	fp,0(sp)
   1371c:	dec00204 	addi	sp,sp,8
   13720:	f800283a 	ret

00013724 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   13724:	defffd04 	addi	sp,sp,-12
   13728:	dfc00215 	stw	ra,8(sp)
   1372c:	df000115 	stw	fp,4(sp)
   13730:	df000104 	addi	fp,sp,4
   13734:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   13738:	e13fff17 	ldw	r4,-4(fp)
   1373c:	01400074 	movhi	r5,1
   13740:	295bea04 	addi	r5,r5,28584
   13744:	00145040 	call	14504 <alt_dev_llist_insert>
}
   13748:	e037883a 	mov	sp,fp
   1374c:	dfc00117 	ldw	ra,4(sp)
   13750:	df000017 	ldw	fp,0(sp)
   13754:	dec00204 	addi	sp,sp,8
   13758:	f800283a 	ret

0001375c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1375c:	defffd04 	addi	sp,sp,-12
   13760:	dfc00215 	stw	ra,8(sp)
   13764:	df000115 	stw	fp,4(sp)
   13768:	df000104 	addi	fp,sp,4
   1376c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU4, cpu4);
   13770:	0014ecc0 	call	14ecc <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   13774:	00800044 	movi	r2,1
   13778:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1377c:	e037883a 	mov	sp,fp
   13780:	dfc00117 	ldw	ra,4(sp)
   13784:	df000017 	ldw	fp,0(sp)
   13788:	dec00204 	addi	sp,sp,8
   1378c:	f800283a 	ret

00013790 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   13790:	defffe04 	addi	sp,sp,-8
   13794:	dfc00115 	stw	ra,4(sp)
   13798:	df000015 	stw	fp,0(sp)
   1379c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER4, timer4);
   137a0:	010000b4 	movhi	r4,2
   137a4:	21041804 	addi	r4,r4,4192
   137a8:	000b883a 	mov	r5,zero
   137ac:	01800044 	movi	r6,1
   137b0:	01c0fa04 	movi	r7,1000
   137b4:	00142d00 	call	142d0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_FIFO_INIT ( FIFO1TO4, fifo1to4);
   137b8:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO3TO4, fifo3to4);
   137bc:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO4TO5, fifo4to5);
   137c0:	0001883a 	nop
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART4, jtag_uart4);
   137c4:	01000074 	movhi	r4,1
   137c8:	2117d604 	addi	r4,r4,24408
   137cc:	000b883a 	mov	r5,zero
   137d0:	01800404 	movi	r6,16
   137d4:	001395c0 	call	1395c <altera_avalon_jtag_uart_init>
   137d8:	01000074 	movhi	r4,1
   137dc:	2117cc04 	addi	r4,r4,24368
   137e0:	00137240 	call	13724 <alt_dev_reg>
}
   137e4:	e037883a 	mov	sp,fp
   137e8:	dfc00117 	ldw	ra,4(sp)
   137ec:	df000017 	ldw	fp,0(sp)
   137f0:	dec00204 	addi	sp,sp,8
   137f4:	f800283a 	ret

000137f8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   137f8:	defffa04 	addi	sp,sp,-24
   137fc:	dfc00515 	stw	ra,20(sp)
   13800:	df000415 	stw	fp,16(sp)
   13804:	df000404 	addi	fp,sp,16
   13808:	e13ffd15 	stw	r4,-12(fp)
   1380c:	e17ffe15 	stw	r5,-8(fp)
   13810:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   13814:	e0bffd17 	ldw	r2,-12(fp)
   13818:	10800017 	ldw	r2,0(r2)
   1381c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   13820:	e0bffc17 	ldw	r2,-16(fp)
   13824:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   13828:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   1382c:	10800217 	ldw	r2,8(r2)
   13830:	1809883a 	mov	r4,r3
   13834:	e17ffe17 	ldw	r5,-8(fp)
   13838:	e1bfff17 	ldw	r6,-4(fp)
   1383c:	100f883a 	mov	r7,r2
   13840:	0013e200 	call	13e20 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   13844:	e037883a 	mov	sp,fp
   13848:	dfc00117 	ldw	ra,4(sp)
   1384c:	df000017 	ldw	fp,0(sp)
   13850:	dec00204 	addi	sp,sp,8
   13854:	f800283a 	ret

00013858 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   13858:	defffa04 	addi	sp,sp,-24
   1385c:	dfc00515 	stw	ra,20(sp)
   13860:	df000415 	stw	fp,16(sp)
   13864:	df000404 	addi	fp,sp,16
   13868:	e13ffd15 	stw	r4,-12(fp)
   1386c:	e17ffe15 	stw	r5,-8(fp)
   13870:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   13874:	e0bffd17 	ldw	r2,-12(fp)
   13878:	10800017 	ldw	r2,0(r2)
   1387c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   13880:	e0bffc17 	ldw	r2,-16(fp)
   13884:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   13888:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   1388c:	10800217 	ldw	r2,8(r2)
   13890:	1809883a 	mov	r4,r3
   13894:	e17ffe17 	ldw	r5,-8(fp)
   13898:	e1bfff17 	ldw	r6,-4(fp)
   1389c:	100f883a 	mov	r7,r2
   138a0:	00140380 	call	14038 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   138a4:	e037883a 	mov	sp,fp
   138a8:	dfc00117 	ldw	ra,4(sp)
   138ac:	df000017 	ldw	fp,0(sp)
   138b0:	dec00204 	addi	sp,sp,8
   138b4:	f800283a 	ret

000138b8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   138b8:	defffc04 	addi	sp,sp,-16
   138bc:	dfc00315 	stw	ra,12(sp)
   138c0:	df000215 	stw	fp,8(sp)
   138c4:	df000204 	addi	fp,sp,8
   138c8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   138cc:	e0bfff17 	ldw	r2,-4(fp)
   138d0:	10800017 	ldw	r2,0(r2)
   138d4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   138d8:	e0bffe17 	ldw	r2,-8(fp)
   138dc:	10c00a04 	addi	r3,r2,40
   138e0:	e0bfff17 	ldw	r2,-4(fp)
   138e4:	10800217 	ldw	r2,8(r2)
   138e8:	1809883a 	mov	r4,r3
   138ec:	100b883a 	mov	r5,r2
   138f0:	0013cc40 	call	13cc4 <altera_avalon_jtag_uart_close>
}
   138f4:	e037883a 	mov	sp,fp
   138f8:	dfc00117 	ldw	ra,4(sp)
   138fc:	df000017 	ldw	fp,0(sp)
   13900:	dec00204 	addi	sp,sp,8
   13904:	f800283a 	ret

00013908 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   13908:	defffa04 	addi	sp,sp,-24
   1390c:	dfc00515 	stw	ra,20(sp)
   13910:	df000415 	stw	fp,16(sp)
   13914:	df000404 	addi	fp,sp,16
   13918:	e13ffd15 	stw	r4,-12(fp)
   1391c:	e17ffe15 	stw	r5,-8(fp)
   13920:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   13924:	e0bffd17 	ldw	r2,-12(fp)
   13928:	10800017 	ldw	r2,0(r2)
   1392c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   13930:	e0bffc17 	ldw	r2,-16(fp)
   13934:	10800a04 	addi	r2,r2,40
   13938:	1009883a 	mov	r4,r2
   1393c:	e17ffe17 	ldw	r5,-8(fp)
   13940:	e1bfff17 	ldw	r6,-4(fp)
   13944:	0013d2c0 	call	13d2c <altera_avalon_jtag_uart_ioctl>
}
   13948:	e037883a 	mov	sp,fp
   1394c:	dfc00117 	ldw	ra,4(sp)
   13950:	df000017 	ldw	fp,0(sp)
   13954:	dec00204 	addi	sp,sp,8
   13958:	f800283a 	ret

0001395c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   1395c:	defffa04 	addi	sp,sp,-24
   13960:	dfc00515 	stw	ra,20(sp)
   13964:	df000415 	stw	fp,16(sp)
   13968:	df000404 	addi	fp,sp,16
   1396c:	e13ffd15 	stw	r4,-12(fp)
   13970:	e17ffe15 	stw	r5,-8(fp)
   13974:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   13978:	e0bffd17 	ldw	r2,-12(fp)
   1397c:	00c00044 	movi	r3,1
   13980:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   13984:	e0bffd17 	ldw	r2,-12(fp)
   13988:	10800017 	ldw	r2,0(r2)
   1398c:	10800104 	addi	r2,r2,4
   13990:	e0fffd17 	ldw	r3,-12(fp)
   13994:	18c00817 	ldw	r3,32(r3)
   13998:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   1399c:	e0fffe17 	ldw	r3,-8(fp)
   139a0:	e0bfff17 	ldw	r2,-4(fp)
   139a4:	d8000015 	stw	zero,0(sp)
   139a8:	1809883a 	mov	r4,r3
   139ac:	100b883a 	mov	r5,r2
   139b0:	01800074 	movhi	r6,1
   139b4:	318e8704 	addi	r6,r6,14876
   139b8:	e1fffd17 	ldw	r7,-12(fp)
   139bc:	00146780 	call	14678 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   139c0:	e0bffd17 	ldw	r2,-12(fp)
   139c4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   139c8:	e0bffd17 	ldw	r2,-12(fp)
   139cc:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   139d0:	008000b4 	movhi	r2,2
   139d4:	10a28c04 	addi	r2,r2,-30160
   139d8:	10800017 	ldw	r2,0(r2)
   139dc:	1809883a 	mov	r4,r3
   139e0:	100b883a 	mov	r5,r2
   139e4:	01800074 	movhi	r6,1
   139e8:	318f0804 	addi	r6,r6,15392
   139ec:	e1fffd17 	ldw	r7,-12(fp)
   139f0:	00143580 	call	14358 <alt_alarm_start>
   139f4:	1000040e 	bge	r2,zero,13a08 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   139f8:	e0bffd17 	ldw	r2,-12(fp)
   139fc:	00e00034 	movhi	r3,32768
   13a00:	18ffffc4 	addi	r3,r3,-1
   13a04:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   13a08:	e037883a 	mov	sp,fp
   13a0c:	dfc00117 	ldw	ra,4(sp)
   13a10:	df000017 	ldw	fp,0(sp)
   13a14:	dec00204 	addi	sp,sp,8
   13a18:	f800283a 	ret

00013a1c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   13a1c:	defff804 	addi	sp,sp,-32
   13a20:	df000715 	stw	fp,28(sp)
   13a24:	df000704 	addi	fp,sp,28
   13a28:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   13a2c:	e0bfff17 	ldw	r2,-4(fp)
   13a30:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   13a34:	e0bffb17 	ldw	r2,-20(fp)
   13a38:	10800017 	ldw	r2,0(r2)
   13a3c:	e0bffc15 	stw	r2,-16(fp)
   13a40:	00000106 	br	13a48 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
   13a44:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   13a48:	e0bffc17 	ldw	r2,-16(fp)
   13a4c:	10800104 	addi	r2,r2,4
   13a50:	10800037 	ldwio	r2,0(r2)
   13a54:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   13a58:	e0bffd17 	ldw	r2,-12(fp)
   13a5c:	1080c00c 	andi	r2,r2,768
   13a60:	10006a26 	beq	r2,zero,13c0c <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   13a64:	e0bffd17 	ldw	r2,-12(fp)
   13a68:	1080400c 	andi	r2,r2,256
   13a6c:	10003326 	beq	r2,zero,13b3c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   13a70:	00800074 	movhi	r2,1
   13a74:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   13a78:	e0bffb17 	ldw	r2,-20(fp)
   13a7c:	10800a17 	ldw	r2,40(r2)
   13a80:	10800044 	addi	r2,r2,1
   13a84:	1081ffcc 	andi	r2,r2,2047
   13a88:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   13a8c:	e0bffb17 	ldw	r2,-20(fp)
   13a90:	10c00b17 	ldw	r3,44(r2)
   13a94:	e0bffe17 	ldw	r2,-8(fp)
   13a98:	18801426 	beq	r3,r2,13aec <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   13a9c:	e0bffc17 	ldw	r2,-16(fp)
   13aa0:	10800037 	ldwio	r2,0(r2)
   13aa4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   13aa8:	e0bff917 	ldw	r2,-28(fp)
   13aac:	10a0000c 	andi	r2,r2,32768
   13ab0:	10001026 	beq	r2,zero,13af4 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   13ab4:	e0bffb17 	ldw	r2,-20(fp)
   13ab8:	10800a17 	ldw	r2,40(r2)
   13abc:	e0fff917 	ldw	r3,-28(fp)
   13ac0:	e13ffb17 	ldw	r4,-20(fp)
   13ac4:	2085883a 	add	r2,r4,r2
   13ac8:	10800e04 	addi	r2,r2,56
   13acc:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   13ad0:	e0bffb17 	ldw	r2,-20(fp)
   13ad4:	10800a17 	ldw	r2,40(r2)
   13ad8:	10800044 	addi	r2,r2,1
   13adc:	10c1ffcc 	andi	r3,r2,2047
   13ae0:	e0bffb17 	ldw	r2,-20(fp)
   13ae4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   13ae8:	003fe306 	br	13a78 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   13aec:	0001883a 	nop
   13af0:	00000106 	br	13af8 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   13af4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   13af8:	e0bff917 	ldw	r2,-28(fp)
   13afc:	10bfffec 	andhi	r2,r2,65535
   13b00:	10000e26 	beq	r2,zero,13b3c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   13b04:	e0bffb17 	ldw	r2,-20(fp)
   13b08:	10c00817 	ldw	r3,32(r2)
   13b0c:	00bfff84 	movi	r2,-2
   13b10:	1886703a 	and	r3,r3,r2
   13b14:	e0bffb17 	ldw	r2,-20(fp)
   13b18:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   13b1c:	e0bffc17 	ldw	r2,-16(fp)
   13b20:	10800104 	addi	r2,r2,4
   13b24:	e0fffb17 	ldw	r3,-20(fp)
   13b28:	18c00817 	ldw	r3,32(r3)
   13b2c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   13b30:	e0bffc17 	ldw	r2,-16(fp)
   13b34:	10800104 	addi	r2,r2,4
   13b38:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   13b3c:	e0bffd17 	ldw	r2,-12(fp)
   13b40:	1080800c 	andi	r2,r2,512
   13b44:	103fbf26 	beq	r2,zero,13a44 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   13b48:	e0bffd17 	ldw	r2,-12(fp)
   13b4c:	1004d43a 	srli	r2,r2,16
   13b50:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   13b54:	00001406 	br	13ba8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   13b58:	e0bffc17 	ldw	r2,-16(fp)
   13b5c:	e0fffb17 	ldw	r3,-20(fp)
   13b60:	18c00d17 	ldw	r3,52(r3)
   13b64:	e13ffb17 	ldw	r4,-20(fp)
   13b68:	20c7883a 	add	r3,r4,r3
   13b6c:	18c20e04 	addi	r3,r3,2104
   13b70:	18c00003 	ldbu	r3,0(r3)
   13b74:	18c03fcc 	andi	r3,r3,255
   13b78:	18c0201c 	xori	r3,r3,128
   13b7c:	18ffe004 	addi	r3,r3,-128
   13b80:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   13b84:	e0bffb17 	ldw	r2,-20(fp)
   13b88:	10800d17 	ldw	r2,52(r2)
   13b8c:	10800044 	addi	r2,r2,1
   13b90:	10c1ffcc 	andi	r3,r2,2047
   13b94:	e0bffb17 	ldw	r2,-20(fp)
   13b98:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   13b9c:	e0bffa17 	ldw	r2,-24(fp)
   13ba0:	10bfffc4 	addi	r2,r2,-1
   13ba4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   13ba8:	e0bffa17 	ldw	r2,-24(fp)
   13bac:	10000526 	beq	r2,zero,13bc4 <altera_avalon_jtag_uart_irq+0x1a8>
   13bb0:	e0bffb17 	ldw	r2,-20(fp)
   13bb4:	10c00d17 	ldw	r3,52(r2)
   13bb8:	e0bffb17 	ldw	r2,-20(fp)
   13bbc:	10800c17 	ldw	r2,48(r2)
   13bc0:	18bfe51e 	bne	r3,r2,13b58 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   13bc4:	e0bffa17 	ldw	r2,-24(fp)
   13bc8:	103f9e26 	beq	r2,zero,13a44 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   13bcc:	e0bffb17 	ldw	r2,-20(fp)
   13bd0:	10c00817 	ldw	r3,32(r2)
   13bd4:	00bfff44 	movi	r2,-3
   13bd8:	1886703a 	and	r3,r3,r2
   13bdc:	e0bffb17 	ldw	r2,-20(fp)
   13be0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   13be4:	e0bffb17 	ldw	r2,-20(fp)
   13be8:	10800017 	ldw	r2,0(r2)
   13bec:	10800104 	addi	r2,r2,4
   13bf0:	e0fffb17 	ldw	r3,-20(fp)
   13bf4:	18c00817 	ldw	r3,32(r3)
   13bf8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   13bfc:	e0bffc17 	ldw	r2,-16(fp)
   13c00:	10800104 	addi	r2,r2,4
   13c04:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   13c08:	003f8e06 	br	13a44 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   13c0c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   13c10:	e037883a 	mov	sp,fp
   13c14:	df000017 	ldw	fp,0(sp)
   13c18:	dec00104 	addi	sp,sp,4
   13c1c:	f800283a 	ret

00013c20 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   13c20:	defffc04 	addi	sp,sp,-16
   13c24:	df000315 	stw	fp,12(sp)
   13c28:	df000304 	addi	fp,sp,12
   13c2c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   13c30:	e0bfff17 	ldw	r2,-4(fp)
   13c34:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   13c38:	e0bffd17 	ldw	r2,-12(fp)
   13c3c:	10800017 	ldw	r2,0(r2)
   13c40:	10800104 	addi	r2,r2,4
   13c44:	10800037 	ldwio	r2,0(r2)
   13c48:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   13c4c:	e0bffe17 	ldw	r2,-8(fp)
   13c50:	1081000c 	andi	r2,r2,1024
   13c54:	10000a26 	beq	r2,zero,13c80 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   13c58:	e0bffd17 	ldw	r2,-12(fp)
   13c5c:	10800017 	ldw	r2,0(r2)
   13c60:	10800104 	addi	r2,r2,4
   13c64:	e0fffd17 	ldw	r3,-12(fp)
   13c68:	18c00817 	ldw	r3,32(r3)
   13c6c:	18c10014 	ori	r3,r3,1024
   13c70:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   13c74:	e0bffd17 	ldw	r2,-12(fp)
   13c78:	10000915 	stw	zero,36(r2)
   13c7c:	00000a06 	br	13ca8 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   13c80:	e0bffd17 	ldw	r2,-12(fp)
   13c84:	10800917 	ldw	r2,36(r2)
   13c88:	00e00034 	movhi	r3,32768
   13c8c:	18ffff04 	addi	r3,r3,-4
   13c90:	18800536 	bltu	r3,r2,13ca8 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
   13c94:	e0bffd17 	ldw	r2,-12(fp)
   13c98:	10800917 	ldw	r2,36(r2)
   13c9c:	10c00044 	addi	r3,r2,1
   13ca0:	e0bffd17 	ldw	r2,-12(fp)
   13ca4:	10c00915 	stw	r3,36(r2)
   13ca8:	008000b4 	movhi	r2,2
   13cac:	10a28c04 	addi	r2,r2,-30160
   13cb0:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   13cb4:	e037883a 	mov	sp,fp
   13cb8:	df000017 	ldw	fp,0(sp)
   13cbc:	dec00104 	addi	sp,sp,4
   13cc0:	f800283a 	ret

00013cc4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   13cc4:	defffd04 	addi	sp,sp,-12
   13cc8:	df000215 	stw	fp,8(sp)
   13ccc:	df000204 	addi	fp,sp,8
   13cd0:	e13ffe15 	stw	r4,-8(fp)
   13cd4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   13cd8:	00000506 	br	13cf0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   13cdc:	e0bfff17 	ldw	r2,-4(fp)
   13ce0:	1090000c 	andi	r2,r2,16384
   13ce4:	10000226 	beq	r2,zero,13cf0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   13ce8:	00bffd44 	movi	r2,-11
   13cec:	00000b06 	br	13d1c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   13cf0:	e0bffe17 	ldw	r2,-8(fp)
   13cf4:	10c00d17 	ldw	r3,52(r2)
   13cf8:	e0bffe17 	ldw	r2,-8(fp)
   13cfc:	10800c17 	ldw	r2,48(r2)
   13d00:	18800526 	beq	r3,r2,13d18 <altera_avalon_jtag_uart_close+0x54>
   13d04:	e0bffe17 	ldw	r2,-8(fp)
   13d08:	10c00917 	ldw	r3,36(r2)
   13d0c:	e0bffe17 	ldw	r2,-8(fp)
   13d10:	10800117 	ldw	r2,4(r2)
   13d14:	18bff136 	bltu	r3,r2,13cdc <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   13d18:	0005883a 	mov	r2,zero
}
   13d1c:	e037883a 	mov	sp,fp
   13d20:	df000017 	ldw	fp,0(sp)
   13d24:	dec00104 	addi	sp,sp,4
   13d28:	f800283a 	ret

00013d2c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   13d2c:	defffa04 	addi	sp,sp,-24
   13d30:	df000515 	stw	fp,20(sp)
   13d34:	df000504 	addi	fp,sp,20
   13d38:	e13ffd15 	stw	r4,-12(fp)
   13d3c:	e17ffe15 	stw	r5,-8(fp)
   13d40:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   13d44:	00bff9c4 	movi	r2,-25
   13d48:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   13d4c:	e0bffe17 	ldw	r2,-8(fp)
   13d50:	10da8060 	cmpeqi	r3,r2,27137
   13d54:	1800031e 	bne	r3,zero,13d64 <altera_avalon_jtag_uart_ioctl+0x38>
   13d58:	109a80a0 	cmpeqi	r2,r2,27138
   13d5c:	1000181e 	bne	r2,zero,13dc0 <altera_avalon_jtag_uart_ioctl+0x94>
   13d60:	00002606 	br	13dfc <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   13d64:	e0bffd17 	ldw	r2,-12(fp)
   13d68:	10c00117 	ldw	r3,4(r2)
   13d6c:	00a00034 	movhi	r2,32768
   13d70:	10bfffc4 	addi	r2,r2,-1
   13d74:	18802226 	beq	r3,r2,13e00 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
   13d78:	e0bfff17 	ldw	r2,-4(fp)
   13d7c:	10800017 	ldw	r2,0(r2)
   13d80:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   13d84:	e0bffc17 	ldw	r2,-16(fp)
   13d88:	10800090 	cmplti	r2,r2,2
   13d8c:	1000061e 	bne	r2,zero,13da8 <altera_avalon_jtag_uart_ioctl+0x7c>
   13d90:	e0fffc17 	ldw	r3,-16(fp)
   13d94:	00a00034 	movhi	r2,32768
   13d98:	10bfffc4 	addi	r2,r2,-1
   13d9c:	18800226 	beq	r3,r2,13da8 <altera_avalon_jtag_uart_ioctl+0x7c>
   13da0:	e0bffc17 	ldw	r2,-16(fp)
   13da4:	00000206 	br	13db0 <altera_avalon_jtag_uart_ioctl+0x84>
   13da8:	00a00034 	movhi	r2,32768
   13dac:	10bfff84 	addi	r2,r2,-2
   13db0:	e0fffd17 	ldw	r3,-12(fp)
   13db4:	18800115 	stw	r2,4(r3)
      rc = 0;
   13db8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   13dbc:	00001006 	br	13e00 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   13dc0:	e0bffd17 	ldw	r2,-12(fp)
   13dc4:	10c00117 	ldw	r3,4(r2)
   13dc8:	00a00034 	movhi	r2,32768
   13dcc:	10bfffc4 	addi	r2,r2,-1
   13dd0:	18800d26 	beq	r3,r2,13e08 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   13dd4:	e0bffd17 	ldw	r2,-12(fp)
   13dd8:	10c00917 	ldw	r3,36(r2)
   13ddc:	e0bffd17 	ldw	r2,-12(fp)
   13de0:	10800117 	ldw	r2,4(r2)
   13de4:	1885803a 	cmpltu	r2,r3,r2
   13de8:	10c03fcc 	andi	r3,r2,255
   13dec:	e0bfff17 	ldw	r2,-4(fp)
   13df0:	10c00015 	stw	r3,0(r2)
      rc = 0;
   13df4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   13df8:	00000306 	br	13e08 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
   13dfc:	00000306 	br	13e0c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   13e00:	0001883a 	nop
   13e04:	00000106 	br	13e0c <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   13e08:	0001883a 	nop

  default:
    break;
  }

  return rc;
   13e0c:	e0bffb17 	ldw	r2,-20(fp)
}
   13e10:	e037883a 	mov	sp,fp
   13e14:	df000017 	ldw	fp,0(sp)
   13e18:	dec00104 	addi	sp,sp,4
   13e1c:	f800283a 	ret

00013e20 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   13e20:	defff304 	addi	sp,sp,-52
   13e24:	dfc00c15 	stw	ra,48(sp)
   13e28:	df000b15 	stw	fp,44(sp)
   13e2c:	df000b04 	addi	fp,sp,44
   13e30:	e13ffc15 	stw	r4,-16(fp)
   13e34:	e17ffd15 	stw	r5,-12(fp)
   13e38:	e1bffe15 	stw	r6,-8(fp)
   13e3c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   13e40:	e0bffd17 	ldw	r2,-12(fp)
   13e44:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   13e48:	00004706 	br	13f68 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   13e4c:	e0bffc17 	ldw	r2,-16(fp)
   13e50:	10800a17 	ldw	r2,40(r2)
   13e54:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   13e58:	e0bffc17 	ldw	r2,-16(fp)
   13e5c:	10800b17 	ldw	r2,44(r2)
   13e60:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   13e64:	e0fff717 	ldw	r3,-36(fp)
   13e68:	e0bff817 	ldw	r2,-32(fp)
   13e6c:	18800536 	bltu	r3,r2,13e84 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   13e70:	e0fff717 	ldw	r3,-36(fp)
   13e74:	e0bff817 	ldw	r2,-32(fp)
   13e78:	1885c83a 	sub	r2,r3,r2
   13e7c:	e0bff615 	stw	r2,-40(fp)
   13e80:	00000406 	br	13e94 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   13e84:	00c20004 	movi	r3,2048
   13e88:	e0bff817 	ldw	r2,-32(fp)
   13e8c:	1885c83a 	sub	r2,r3,r2
   13e90:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   13e94:	e0bff617 	ldw	r2,-40(fp)
   13e98:	10001e26 	beq	r2,zero,13f14 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   13e9c:	e0fffe17 	ldw	r3,-8(fp)
   13ea0:	e0bff617 	ldw	r2,-40(fp)
   13ea4:	1880022e 	bgeu	r3,r2,13eb0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   13ea8:	e0bffe17 	ldw	r2,-8(fp)
   13eac:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   13eb0:	e0bff817 	ldw	r2,-32(fp)
   13eb4:	10800e04 	addi	r2,r2,56
   13eb8:	e0fffc17 	ldw	r3,-16(fp)
   13ebc:	1885883a 	add	r2,r3,r2
   13ec0:	e13ff517 	ldw	r4,-44(fp)
   13ec4:	100b883a 	mov	r5,r2
   13ec8:	e1bff617 	ldw	r6,-40(fp)
   13ecc:	00110ac0 	call	110ac <memcpy>
      ptr   += n;
   13ed0:	e0fff517 	ldw	r3,-44(fp)
   13ed4:	e0bff617 	ldw	r2,-40(fp)
   13ed8:	1885883a 	add	r2,r3,r2
   13edc:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   13ee0:	e0fffe17 	ldw	r3,-8(fp)
   13ee4:	e0bff617 	ldw	r2,-40(fp)
   13ee8:	1885c83a 	sub	r2,r3,r2
   13eec:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   13ef0:	e0fff817 	ldw	r3,-32(fp)
   13ef4:	e0bff617 	ldw	r2,-40(fp)
   13ef8:	1885883a 	add	r2,r3,r2
   13efc:	10c1ffcc 	andi	r3,r2,2047
   13f00:	e0bffc17 	ldw	r2,-16(fp)
   13f04:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   13f08:	e0bffe17 	ldw	r2,-8(fp)
   13f0c:	00bfcf16 	blt	zero,r2,13e4c <altera_avalon_jtag_uart_read+0x2c>
   13f10:	00000106 	br	13f18 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   13f14:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   13f18:	e0fff517 	ldw	r3,-44(fp)
   13f1c:	e0bffd17 	ldw	r2,-12(fp)
   13f20:	1880141e 	bne	r3,r2,13f74 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   13f24:	e0bfff17 	ldw	r2,-4(fp)
   13f28:	1090000c 	andi	r2,r2,16384
   13f2c:	1000131e 	bne	r2,zero,13f7c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   13f30:	0001883a 	nop
   13f34:	e0bffc17 	ldw	r2,-16(fp)
   13f38:	10c00a17 	ldw	r3,40(r2)
   13f3c:	e0bff717 	ldw	r2,-36(fp)
   13f40:	1880051e 	bne	r3,r2,13f58 <altera_avalon_jtag_uart_read+0x138>
   13f44:	e0bffc17 	ldw	r2,-16(fp)
   13f48:	10c00917 	ldw	r3,36(r2)
   13f4c:	e0bffc17 	ldw	r2,-16(fp)
   13f50:	10800117 	ldw	r2,4(r2)
   13f54:	18bff736 	bltu	r3,r2,13f34 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   13f58:	e0bffc17 	ldw	r2,-16(fp)
   13f5c:	10c00a17 	ldw	r3,40(r2)
   13f60:	e0bff717 	ldw	r2,-36(fp)
   13f64:	18800726 	beq	r3,r2,13f84 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   13f68:	e0bffe17 	ldw	r2,-8(fp)
   13f6c:	00bfb716 	blt	zero,r2,13e4c <altera_avalon_jtag_uart_read+0x2c>
   13f70:	00000506 	br	13f88 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   13f74:	0001883a 	nop
   13f78:	00000306 	br	13f88 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   13f7c:	0001883a 	nop
   13f80:	00000106 	br	13f88 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   13f84:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   13f88:	e0fff517 	ldw	r3,-44(fp)
   13f8c:	e0bffd17 	ldw	r2,-12(fp)
   13f90:	18801726 	beq	r3,r2,13ff0 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13f94:	0005303a 	rdctl	r2,status
   13f98:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13f9c:	e0fffa17 	ldw	r3,-24(fp)
   13fa0:	00bfff84 	movi	r2,-2
   13fa4:	1884703a 	and	r2,r3,r2
   13fa8:	1001703a 	wrctl	status,r2
  
  return context;
   13fac:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   13fb0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   13fb4:	e0bffc17 	ldw	r2,-16(fp)
   13fb8:	10800817 	ldw	r2,32(r2)
   13fbc:	10c00054 	ori	r3,r2,1
   13fc0:	e0bffc17 	ldw	r2,-16(fp)
   13fc4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   13fc8:	e0bffc17 	ldw	r2,-16(fp)
   13fcc:	10800017 	ldw	r2,0(r2)
   13fd0:	10800104 	addi	r2,r2,4
   13fd4:	e0fffc17 	ldw	r3,-16(fp)
   13fd8:	18c00817 	ldw	r3,32(r3)
   13fdc:	10c00035 	stwio	r3,0(r2)
   13fe0:	e0bff917 	ldw	r2,-28(fp)
   13fe4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13fe8:	e0bffb17 	ldw	r2,-20(fp)
   13fec:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   13ff0:	e0fff517 	ldw	r3,-44(fp)
   13ff4:	e0bffd17 	ldw	r2,-12(fp)
   13ff8:	18800426 	beq	r3,r2,1400c <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
   13ffc:	e0fff517 	ldw	r3,-44(fp)
   14000:	e0bffd17 	ldw	r2,-12(fp)
   14004:	1885c83a 	sub	r2,r3,r2
   14008:	00000606 	br	14024 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
   1400c:	e0bfff17 	ldw	r2,-4(fp)
   14010:	1090000c 	andi	r2,r2,16384
   14014:	10000226 	beq	r2,zero,14020 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
   14018:	00bffd44 	movi	r2,-11
   1401c:	00000106 	br	14024 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
   14020:	00bffec4 	movi	r2,-5
}
   14024:	e037883a 	mov	sp,fp
   14028:	dfc00117 	ldw	ra,4(sp)
   1402c:	df000017 	ldw	fp,0(sp)
   14030:	dec00204 	addi	sp,sp,8
   14034:	f800283a 	ret

00014038 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   14038:	defff304 	addi	sp,sp,-52
   1403c:	dfc00c15 	stw	ra,48(sp)
   14040:	df000b15 	stw	fp,44(sp)
   14044:	df000b04 	addi	fp,sp,44
   14048:	e13ffc15 	stw	r4,-16(fp)
   1404c:	e17ffd15 	stw	r5,-12(fp)
   14050:	e1bffe15 	stw	r6,-8(fp)
   14054:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   14058:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   1405c:	e0bffd17 	ldw	r2,-12(fp)
   14060:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   14064:	00003706 	br	14144 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   14068:	e0bffc17 	ldw	r2,-16(fp)
   1406c:	10800c17 	ldw	r2,48(r2)
   14070:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   14074:	e0bffc17 	ldw	r2,-16(fp)
   14078:	10800d17 	ldw	r2,52(r2)
   1407c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   14080:	e0fff817 	ldw	r3,-32(fp)
   14084:	e0bff517 	ldw	r2,-44(fp)
   14088:	1880062e 	bgeu	r3,r2,140a4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   1408c:	e0fff517 	ldw	r3,-44(fp)
   14090:	e0bff817 	ldw	r2,-32(fp)
   14094:	1885c83a 	sub	r2,r3,r2
   14098:	10bfffc4 	addi	r2,r2,-1
   1409c:	e0bff615 	stw	r2,-40(fp)
   140a0:	00000b06 	br	140d0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   140a4:	e0bff517 	ldw	r2,-44(fp)
   140a8:	10000526 	beq	r2,zero,140c0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   140ac:	00c20004 	movi	r3,2048
   140b0:	e0bff817 	ldw	r2,-32(fp)
   140b4:	1885c83a 	sub	r2,r3,r2
   140b8:	e0bff615 	stw	r2,-40(fp)
   140bc:	00000406 	br	140d0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   140c0:	00c1ffc4 	movi	r3,2047
   140c4:	e0bff817 	ldw	r2,-32(fp)
   140c8:	1885c83a 	sub	r2,r3,r2
   140cc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   140d0:	e0bff617 	ldw	r2,-40(fp)
   140d4:	10001e26 	beq	r2,zero,14150 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   140d8:	e0fffe17 	ldw	r3,-8(fp)
   140dc:	e0bff617 	ldw	r2,-40(fp)
   140e0:	1880022e 	bgeu	r3,r2,140ec <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   140e4:	e0bffe17 	ldw	r2,-8(fp)
   140e8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   140ec:	e0bff817 	ldw	r2,-32(fp)
   140f0:	10820e04 	addi	r2,r2,2104
   140f4:	e0fffc17 	ldw	r3,-16(fp)
   140f8:	1885883a 	add	r2,r3,r2
   140fc:	1009883a 	mov	r4,r2
   14100:	e17ffd17 	ldw	r5,-12(fp)
   14104:	e1bff617 	ldw	r6,-40(fp)
   14108:	00110ac0 	call	110ac <memcpy>
      ptr   += n;
   1410c:	e0fffd17 	ldw	r3,-12(fp)
   14110:	e0bff617 	ldw	r2,-40(fp)
   14114:	1885883a 	add	r2,r3,r2
   14118:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   1411c:	e0fffe17 	ldw	r3,-8(fp)
   14120:	e0bff617 	ldw	r2,-40(fp)
   14124:	1885c83a 	sub	r2,r3,r2
   14128:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1412c:	e0fff817 	ldw	r3,-32(fp)
   14130:	e0bff617 	ldw	r2,-40(fp)
   14134:	1885883a 	add	r2,r3,r2
   14138:	10c1ffcc 	andi	r3,r2,2047
   1413c:	e0bffc17 	ldw	r2,-16(fp)
   14140:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   14144:	e0bffe17 	ldw	r2,-8(fp)
   14148:	00bfc716 	blt	zero,r2,14068 <altera_avalon_jtag_uart_write+0x30>
   1414c:	00000106 	br	14154 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   14150:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14154:	0005303a 	rdctl	r2,status
   14158:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1415c:	e0fffa17 	ldw	r3,-24(fp)
   14160:	00bfff84 	movi	r2,-2
   14164:	1884703a 	and	r2,r3,r2
   14168:	1001703a 	wrctl	status,r2
  
  return context;
   1416c:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   14170:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   14174:	e0bffc17 	ldw	r2,-16(fp)
   14178:	10800817 	ldw	r2,32(r2)
   1417c:	10c00094 	ori	r3,r2,2
   14180:	e0bffc17 	ldw	r2,-16(fp)
   14184:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   14188:	e0bffc17 	ldw	r2,-16(fp)
   1418c:	10800017 	ldw	r2,0(r2)
   14190:	10800104 	addi	r2,r2,4
   14194:	e0fffc17 	ldw	r3,-16(fp)
   14198:	18c00817 	ldw	r3,32(r3)
   1419c:	10c00035 	stwio	r3,0(r2)
   141a0:	e0bff917 	ldw	r2,-28(fp)
   141a4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   141a8:	e0bffb17 	ldw	r2,-20(fp)
   141ac:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   141b0:	e0bffe17 	ldw	r2,-8(fp)
   141b4:	0080110e 	bge	zero,r2,141fc <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   141b8:	e0bfff17 	ldw	r2,-4(fp)
   141bc:	1090000c 	andi	r2,r2,16384
   141c0:	1000111e 	bne	r2,zero,14208 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   141c4:	0001883a 	nop
   141c8:	e0bffc17 	ldw	r2,-16(fp)
   141cc:	10c00d17 	ldw	r3,52(r2)
   141d0:	e0bff517 	ldw	r2,-44(fp)
   141d4:	1880051e 	bne	r3,r2,141ec <altera_avalon_jtag_uart_write+0x1b4>
   141d8:	e0bffc17 	ldw	r2,-16(fp)
   141dc:	10c00917 	ldw	r3,36(r2)
   141e0:	e0bffc17 	ldw	r2,-16(fp)
   141e4:	10800117 	ldw	r2,4(r2)
   141e8:	18bff736 	bltu	r3,r2,141c8 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   141ec:	e0bffc17 	ldw	r2,-16(fp)
   141f0:	10c00d17 	ldw	r3,52(r2)
   141f4:	e0bff517 	ldw	r2,-44(fp)
   141f8:	18800526 	beq	r3,r2,14210 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   141fc:	e0bffe17 	ldw	r2,-8(fp)
   14200:	00bfd016 	blt	zero,r2,14144 <altera_avalon_jtag_uart_write+0x10c>
   14204:	00000306 	br	14214 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   14208:	0001883a 	nop
   1420c:	00000106 	br	14214 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
   14210:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   14214:	e0fffd17 	ldw	r3,-12(fp)
   14218:	e0bff717 	ldw	r2,-36(fp)
   1421c:	18800426 	beq	r3,r2,14230 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   14220:	e0fffd17 	ldw	r3,-12(fp)
   14224:	e0bff717 	ldw	r2,-36(fp)
   14228:	1885c83a 	sub	r2,r3,r2
   1422c:	00000606 	br	14248 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   14230:	e0bfff17 	ldw	r2,-4(fp)
   14234:	1090000c 	andi	r2,r2,16384
   14238:	10000226 	beq	r2,zero,14244 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   1423c:	00bffd44 	movi	r2,-11
   14240:	00000106 	br	14248 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   14244:	00bffec4 	movi	r2,-5
}
   14248:	e037883a 	mov	sp,fp
   1424c:	dfc00117 	ldw	ra,4(sp)
   14250:	df000017 	ldw	fp,0(sp)
   14254:	dec00204 	addi	sp,sp,8
   14258:	f800283a 	ret

0001425c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   1425c:	defffa04 	addi	sp,sp,-24
   14260:	dfc00515 	stw	ra,20(sp)
   14264:	df000415 	stw	fp,16(sp)
   14268:	df000404 	addi	fp,sp,16
   1426c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   14270:	0007883a 	mov	r3,zero
   14274:	e0bfff17 	ldw	r2,-4(fp)
   14278:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   1427c:	e0bfff17 	ldw	r2,-4(fp)
   14280:	10800104 	addi	r2,r2,4
   14284:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14288:	0005303a 	rdctl	r2,status
   1428c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14290:	e0fffd17 	ldw	r3,-12(fp)
   14294:	00bfff84 	movi	r2,-2
   14298:	1884703a 	and	r2,r3,r2
   1429c:	1001703a 	wrctl	status,r2
  
  return context;
   142a0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   142a4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   142a8:	0014dc80 	call	14dc8 <alt_tick>
   142ac:	e0bffc17 	ldw	r2,-16(fp)
   142b0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   142b4:	e0bffe17 	ldw	r2,-8(fp)
   142b8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   142bc:	e037883a 	mov	sp,fp
   142c0:	dfc00117 	ldw	ra,4(sp)
   142c4:	df000017 	ldw	fp,0(sp)
   142c8:	dec00204 	addi	sp,sp,8
   142cc:	f800283a 	ret

000142d0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   142d0:	defff804 	addi	sp,sp,-32
   142d4:	dfc00715 	stw	ra,28(sp)
   142d8:	df000615 	stw	fp,24(sp)
   142dc:	df000604 	addi	fp,sp,24
   142e0:	e13ffc15 	stw	r4,-16(fp)
   142e4:	e17ffd15 	stw	r5,-12(fp)
   142e8:	e1bffe15 	stw	r6,-8(fp)
   142ec:	e1ffff15 	stw	r7,-4(fp)
   142f0:	e0bfff17 	ldw	r2,-4(fp)
   142f4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   142f8:	008000b4 	movhi	r2,2
   142fc:	10a28c04 	addi	r2,r2,-30160
   14300:	10800017 	ldw	r2,0(r2)
   14304:	1000041e 	bne	r2,zero,14318 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   14308:	008000b4 	movhi	r2,2
   1430c:	10a28c04 	addi	r2,r2,-30160
   14310:	e0fffb17 	ldw	r3,-20(fp)
   14314:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   14318:	e0bffc17 	ldw	r2,-16(fp)
   1431c:	10800104 	addi	r2,r2,4
   14320:	00c001c4 	movi	r3,7
   14324:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   14328:	d8000015 	stw	zero,0(sp)
   1432c:	e13ffd17 	ldw	r4,-12(fp)
   14330:	e17ffe17 	ldw	r5,-8(fp)
   14334:	01800074 	movhi	r6,1
   14338:	31909704 	addi	r6,r6,16988
   1433c:	e1fffc17 	ldw	r7,-16(fp)
   14340:	00146780 	call	14678 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   14344:	e037883a 	mov	sp,fp
   14348:	dfc00117 	ldw	ra,4(sp)
   1434c:	df000017 	ldw	fp,0(sp)
   14350:	dec00204 	addi	sp,sp,8
   14354:	f800283a 	ret

00014358 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   14358:	defff504 	addi	sp,sp,-44
   1435c:	df000a15 	stw	fp,40(sp)
   14360:	df000a04 	addi	fp,sp,40
   14364:	e13ffc15 	stw	r4,-16(fp)
   14368:	e17ffd15 	stw	r5,-12(fp)
   1436c:	e1bffe15 	stw	r6,-8(fp)
   14370:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   14374:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   14378:	008000b4 	movhi	r2,2
   1437c:	10a28c04 	addi	r2,r2,-30160
   14380:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   14384:	10003f26 	beq	r2,zero,14484 <alt_alarm_start+0x12c>
  {
    if (alarm)
   14388:	e0bffc17 	ldw	r2,-16(fp)
   1438c:	10003b26 	beq	r2,zero,1447c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   14390:	e0bffc17 	ldw	r2,-16(fp)
   14394:	e0fffe17 	ldw	r3,-8(fp)
   14398:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   1439c:	e0bffc17 	ldw	r2,-16(fp)
   143a0:	e0ffff17 	ldw	r3,-4(fp)
   143a4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   143a8:	0005303a 	rdctl	r2,status
   143ac:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   143b0:	e0fff817 	ldw	r3,-32(fp)
   143b4:	00bfff84 	movi	r2,-2
   143b8:	1884703a 	and	r2,r3,r2
   143bc:	1001703a 	wrctl	status,r2
  
  return context;
   143c0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   143c4:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   143c8:	008000b4 	movhi	r2,2
   143cc:	10a28d04 	addi	r2,r2,-30156
   143d0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   143d4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   143d8:	e0fffd17 	ldw	r3,-12(fp)
   143dc:	e0bff617 	ldw	r2,-40(fp)
   143e0:	1885883a 	add	r2,r3,r2
   143e4:	10c00044 	addi	r3,r2,1
   143e8:	e0bffc17 	ldw	r2,-16(fp)
   143ec:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   143f0:	e0bffc17 	ldw	r2,-16(fp)
   143f4:	10c00217 	ldw	r3,8(r2)
   143f8:	e0bff617 	ldw	r2,-40(fp)
   143fc:	1880042e 	bgeu	r3,r2,14410 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   14400:	e0bffc17 	ldw	r2,-16(fp)
   14404:	00c00044 	movi	r3,1
   14408:	10c00405 	stb	r3,16(r2)
   1440c:	00000206 	br	14418 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   14410:	e0bffc17 	ldw	r2,-16(fp)
   14414:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   14418:	e0bffc17 	ldw	r2,-16(fp)
   1441c:	00c00074 	movhi	r3,1
   14420:	18dbf004 	addi	r3,r3,28608
   14424:	e0fff915 	stw	r3,-28(fp)
   14428:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1442c:	e0bffa17 	ldw	r2,-24(fp)
   14430:	e0fff917 	ldw	r3,-28(fp)
   14434:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   14438:	e0bff917 	ldw	r2,-28(fp)
   1443c:	10c00017 	ldw	r3,0(r2)
   14440:	e0bffa17 	ldw	r2,-24(fp)
   14444:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   14448:	e0bff917 	ldw	r2,-28(fp)
   1444c:	10800017 	ldw	r2,0(r2)
   14450:	e0fffa17 	ldw	r3,-24(fp)
   14454:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   14458:	e0bff917 	ldw	r2,-28(fp)
   1445c:	e0fffa17 	ldw	r3,-24(fp)
   14460:	10c00015 	stw	r3,0(r2)
   14464:	e0bff717 	ldw	r2,-36(fp)
   14468:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1446c:	e0bffb17 	ldw	r2,-20(fp)
   14470:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   14474:	0005883a 	mov	r2,zero
   14478:	00000306 	br	14488 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   1447c:	00bffa84 	movi	r2,-22
   14480:	00000106 	br	14488 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   14484:	00bfde84 	movi	r2,-134
  }
}
   14488:	e037883a 	mov	sp,fp
   1448c:	df000017 	ldw	fp,0(sp)
   14490:	dec00104 	addi	sp,sp,4
   14494:	f800283a 	ret

00014498 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   14498:	deffff04 	addi	sp,sp,-4
   1449c:	df000015 	stw	fp,0(sp)
   144a0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   144a4:	e037883a 	mov	sp,fp
   144a8:	df000017 	ldw	fp,0(sp)
   144ac:	dec00104 	addi	sp,sp,4
   144b0:	f800283a 	ret

000144b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   144b4:	defffe04 	addi	sp,sp,-8
   144b8:	dfc00115 	stw	ra,4(sp)
   144bc:	df000015 	stw	fp,0(sp)
   144c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   144c4:	00800074 	movhi	r2,1
   144c8:	109bed04 	addi	r2,r2,28596
   144cc:	10800017 	ldw	r2,0(r2)
   144d0:	10000526 	beq	r2,zero,144e8 <alt_get_errno+0x34>
   144d4:	00800074 	movhi	r2,1
   144d8:	109bed04 	addi	r2,r2,28596
   144dc:	10800017 	ldw	r2,0(r2)
   144e0:	103ee83a 	callr	r2
   144e4:	00000206 	br	144f0 <alt_get_errno+0x3c>
   144e8:	008000b4 	movhi	r2,2
   144ec:	10a28704 	addi	r2,r2,-30180
}
   144f0:	e037883a 	mov	sp,fp
   144f4:	dfc00117 	ldw	ra,4(sp)
   144f8:	df000017 	ldw	fp,0(sp)
   144fc:	dec00204 	addi	sp,sp,8
   14500:	f800283a 	ret

00014504 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   14504:	defffa04 	addi	sp,sp,-24
   14508:	dfc00515 	stw	ra,20(sp)
   1450c:	df000415 	stw	fp,16(sp)
   14510:	df000404 	addi	fp,sp,16
   14514:	e13ffe15 	stw	r4,-8(fp)
   14518:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1451c:	e0bffe17 	ldw	r2,-8(fp)
   14520:	10000326 	beq	r2,zero,14530 <alt_dev_llist_insert+0x2c>
   14524:	e0bffe17 	ldw	r2,-8(fp)
   14528:	10800217 	ldw	r2,8(r2)
   1452c:	1000051e 	bne	r2,zero,14544 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   14530:	00144b40 	call	144b4 <alt_get_errno>
   14534:	00c00584 	movi	r3,22
   14538:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   1453c:	00bffa84 	movi	r2,-22
   14540:	00001306 	br	14590 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   14544:	e0bffe17 	ldw	r2,-8(fp)
   14548:	e0ffff17 	ldw	r3,-4(fp)
   1454c:	e0fffc15 	stw	r3,-16(fp)
   14550:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   14554:	e0bffd17 	ldw	r2,-12(fp)
   14558:	e0fffc17 	ldw	r3,-16(fp)
   1455c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   14560:	e0bffc17 	ldw	r2,-16(fp)
   14564:	10c00017 	ldw	r3,0(r2)
   14568:	e0bffd17 	ldw	r2,-12(fp)
   1456c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   14570:	e0bffc17 	ldw	r2,-16(fp)
   14574:	10800017 	ldw	r2,0(r2)
   14578:	e0fffd17 	ldw	r3,-12(fp)
   1457c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   14580:	e0bffc17 	ldw	r2,-16(fp)
   14584:	e0fffd17 	ldw	r3,-12(fp)
   14588:	10c00015 	stw	r3,0(r2)

  return 0;  
   1458c:	0005883a 	mov	r2,zero
}
   14590:	e037883a 	mov	sp,fp
   14594:	dfc00117 	ldw	ra,4(sp)
   14598:	df000017 	ldw	fp,0(sp)
   1459c:	dec00204 	addi	sp,sp,8
   145a0:	f800283a 	ret

000145a4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   145a4:	defffd04 	addi	sp,sp,-12
   145a8:	dfc00215 	stw	ra,8(sp)
   145ac:	df000115 	stw	fp,4(sp)
   145b0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   145b4:	00800074 	movhi	r2,1
   145b8:	10954d04 	addi	r2,r2,21812
   145bc:	e0bfff15 	stw	r2,-4(fp)
   145c0:	00000606 	br	145dc <_do_ctors+0x38>
        (*ctor) (); 
   145c4:	e0bfff17 	ldw	r2,-4(fp)
   145c8:	10800017 	ldw	r2,0(r2)
   145cc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   145d0:	e0bfff17 	ldw	r2,-4(fp)
   145d4:	10bfff04 	addi	r2,r2,-4
   145d8:	e0bfff15 	stw	r2,-4(fp)
   145dc:	e0ffff17 	ldw	r3,-4(fp)
   145e0:	00800074 	movhi	r2,1
   145e4:	10954e04 	addi	r2,r2,21816
   145e8:	18bff62e 	bgeu	r3,r2,145c4 <_do_ctors+0x20>
        (*ctor) (); 
}
   145ec:	e037883a 	mov	sp,fp
   145f0:	dfc00117 	ldw	ra,4(sp)
   145f4:	df000017 	ldw	fp,0(sp)
   145f8:	dec00204 	addi	sp,sp,8
   145fc:	f800283a 	ret

00014600 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   14600:	defffd04 	addi	sp,sp,-12
   14604:	dfc00215 	stw	ra,8(sp)
   14608:	df000115 	stw	fp,4(sp)
   1460c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   14610:	00800074 	movhi	r2,1
   14614:	10954d04 	addi	r2,r2,21812
   14618:	e0bfff15 	stw	r2,-4(fp)
   1461c:	00000606 	br	14638 <_do_dtors+0x38>
        (*dtor) (); 
   14620:	e0bfff17 	ldw	r2,-4(fp)
   14624:	10800017 	ldw	r2,0(r2)
   14628:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1462c:	e0bfff17 	ldw	r2,-4(fp)
   14630:	10bfff04 	addi	r2,r2,-4
   14634:	e0bfff15 	stw	r2,-4(fp)
   14638:	e0ffff17 	ldw	r3,-4(fp)
   1463c:	00800074 	movhi	r2,1
   14640:	10954e04 	addi	r2,r2,21816
   14644:	18bff62e 	bgeu	r3,r2,14620 <_do_dtors+0x20>
        (*dtor) (); 
}
   14648:	e037883a 	mov	sp,fp
   1464c:	dfc00117 	ldw	ra,4(sp)
   14650:	df000017 	ldw	fp,0(sp)
   14654:	dec00204 	addi	sp,sp,8
   14658:	f800283a 	ret

0001465c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1465c:	deffff04 	addi	sp,sp,-4
   14660:	df000015 	stw	fp,0(sp)
   14664:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   14668:	e037883a 	mov	sp,fp
   1466c:	df000017 	ldw	fp,0(sp)
   14670:	dec00104 	addi	sp,sp,4
   14674:	f800283a 	ret

00014678 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   14678:	defff904 	addi	sp,sp,-28
   1467c:	dfc00615 	stw	ra,24(sp)
   14680:	df000515 	stw	fp,20(sp)
   14684:	df000504 	addi	fp,sp,20
   14688:	e13ffc15 	stw	r4,-16(fp)
   1468c:	e17ffd15 	stw	r5,-12(fp)
   14690:	e1bffe15 	stw	r6,-8(fp)
   14694:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   14698:	e0800217 	ldw	r2,8(fp)
   1469c:	d8800015 	stw	r2,0(sp)
   146a0:	e13ffc17 	ldw	r4,-16(fp)
   146a4:	e17ffd17 	ldw	r5,-12(fp)
   146a8:	e1bffe17 	ldw	r6,-8(fp)
   146ac:	e1ffff17 	ldw	r7,-4(fp)
   146b0:	00148500 	call	14850 <alt_iic_isr_register>
}  
   146b4:	e037883a 	mov	sp,fp
   146b8:	dfc00117 	ldw	ra,4(sp)
   146bc:	df000017 	ldw	fp,0(sp)
   146c0:	dec00204 	addi	sp,sp,8
   146c4:	f800283a 	ret

000146c8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   146c8:	defff904 	addi	sp,sp,-28
   146cc:	df000615 	stw	fp,24(sp)
   146d0:	df000604 	addi	fp,sp,24
   146d4:	e13ffe15 	stw	r4,-8(fp)
   146d8:	e17fff15 	stw	r5,-4(fp)
   146dc:	e0bfff17 	ldw	r2,-4(fp)
   146e0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   146e4:	0005303a 	rdctl	r2,status
   146e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   146ec:	e0fffb17 	ldw	r3,-20(fp)
   146f0:	00bfff84 	movi	r2,-2
   146f4:	1884703a 	and	r2,r3,r2
   146f8:	1001703a 	wrctl	status,r2
  
  return context;
   146fc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   14700:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   14704:	e0bffa17 	ldw	r2,-24(fp)
   14708:	00c00044 	movi	r3,1
   1470c:	1884983a 	sll	r2,r3,r2
   14710:	1007883a 	mov	r3,r2
   14714:	008000b4 	movhi	r2,2
   14718:	10a28b04 	addi	r2,r2,-30164
   1471c:	10800017 	ldw	r2,0(r2)
   14720:	1886b03a 	or	r3,r3,r2
   14724:	008000b4 	movhi	r2,2
   14728:	10a28b04 	addi	r2,r2,-30164
   1472c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   14730:	008000b4 	movhi	r2,2
   14734:	10a28b04 	addi	r2,r2,-30164
   14738:	10800017 	ldw	r2,0(r2)
   1473c:	100170fa 	wrctl	ienable,r2
   14740:	e0bffc17 	ldw	r2,-16(fp)
   14744:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14748:	e0bffd17 	ldw	r2,-12(fp)
   1474c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   14750:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   14754:	e037883a 	mov	sp,fp
   14758:	df000017 	ldw	fp,0(sp)
   1475c:	dec00104 	addi	sp,sp,4
   14760:	f800283a 	ret

00014764 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   14764:	defff904 	addi	sp,sp,-28
   14768:	df000615 	stw	fp,24(sp)
   1476c:	df000604 	addi	fp,sp,24
   14770:	e13ffe15 	stw	r4,-8(fp)
   14774:	e17fff15 	stw	r5,-4(fp)
   14778:	e0bfff17 	ldw	r2,-4(fp)
   1477c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14780:	0005303a 	rdctl	r2,status
   14784:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14788:	e0fffb17 	ldw	r3,-20(fp)
   1478c:	00bfff84 	movi	r2,-2
   14790:	1884703a 	and	r2,r3,r2
   14794:	1001703a 	wrctl	status,r2
  
  return context;
   14798:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1479c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   147a0:	e0bffa17 	ldw	r2,-24(fp)
   147a4:	00c00044 	movi	r3,1
   147a8:	1884983a 	sll	r2,r3,r2
   147ac:	0084303a 	nor	r2,zero,r2
   147b0:	1007883a 	mov	r3,r2
   147b4:	008000b4 	movhi	r2,2
   147b8:	10a28b04 	addi	r2,r2,-30164
   147bc:	10800017 	ldw	r2,0(r2)
   147c0:	1886703a 	and	r3,r3,r2
   147c4:	008000b4 	movhi	r2,2
   147c8:	10a28b04 	addi	r2,r2,-30164
   147cc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   147d0:	008000b4 	movhi	r2,2
   147d4:	10a28b04 	addi	r2,r2,-30164
   147d8:	10800017 	ldw	r2,0(r2)
   147dc:	100170fa 	wrctl	ienable,r2
   147e0:	e0bffc17 	ldw	r2,-16(fp)
   147e4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   147e8:	e0bffd17 	ldw	r2,-12(fp)
   147ec:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   147f0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   147f4:	e037883a 	mov	sp,fp
   147f8:	df000017 	ldw	fp,0(sp)
   147fc:	dec00104 	addi	sp,sp,4
   14800:	f800283a 	ret

00014804 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   14804:	defffc04 	addi	sp,sp,-16
   14808:	df000315 	stw	fp,12(sp)
   1480c:	df000304 	addi	fp,sp,12
   14810:	e13ffe15 	stw	r4,-8(fp)
   14814:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   14818:	000530fa 	rdctl	r2,ienable
   1481c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   14820:	e0bfff17 	ldw	r2,-4(fp)
   14824:	00c00044 	movi	r3,1
   14828:	1884983a 	sll	r2,r3,r2
   1482c:	1007883a 	mov	r3,r2
   14830:	e0bffd17 	ldw	r2,-12(fp)
   14834:	1884703a 	and	r2,r3,r2
   14838:	1004c03a 	cmpne	r2,r2,zero
   1483c:	10803fcc 	andi	r2,r2,255
}
   14840:	e037883a 	mov	sp,fp
   14844:	df000017 	ldw	fp,0(sp)
   14848:	dec00104 	addi	sp,sp,4
   1484c:	f800283a 	ret

00014850 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   14850:	defff504 	addi	sp,sp,-44
   14854:	dfc00a15 	stw	ra,40(sp)
   14858:	df000915 	stw	fp,36(sp)
   1485c:	df000904 	addi	fp,sp,36
   14860:	e13ffc15 	stw	r4,-16(fp)
   14864:	e17ffd15 	stw	r5,-12(fp)
   14868:	e1bffe15 	stw	r6,-8(fp)
   1486c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   14870:	00bffa84 	movi	r2,-22
   14874:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   14878:	e0bffd17 	ldw	r2,-12(fp)
   1487c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   14880:	e0bff817 	ldw	r2,-32(fp)
   14884:	10800808 	cmpgei	r2,r2,32
   14888:	1000271e 	bne	r2,zero,14928 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1488c:	0005303a 	rdctl	r2,status
   14890:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14894:	e0fffa17 	ldw	r3,-24(fp)
   14898:	00bfff84 	movi	r2,-2
   1489c:	1884703a 	and	r2,r3,r2
   148a0:	1001703a 	wrctl	status,r2
  
  return context;
   148a4:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   148a8:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   148ac:	00c000b4 	movhi	r3,2
   148b0:	18e29804 	addi	r3,r3,-30112
   148b4:	e0bff817 	ldw	r2,-32(fp)
   148b8:	100490fa 	slli	r2,r2,3
   148bc:	1885883a 	add	r2,r3,r2
   148c0:	e0fffe17 	ldw	r3,-8(fp)
   148c4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   148c8:	00c000b4 	movhi	r3,2
   148cc:	18e29804 	addi	r3,r3,-30112
   148d0:	e0bff817 	ldw	r2,-32(fp)
   148d4:	100490fa 	slli	r2,r2,3
   148d8:	1885883a 	add	r2,r3,r2
   148dc:	10800104 	addi	r2,r2,4
   148e0:	e0ffff17 	ldw	r3,-4(fp)
   148e4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   148e8:	e0bffe17 	ldw	r2,-8(fp)
   148ec:	10000526 	beq	r2,zero,14904 <alt_iic_isr_register+0xb4>
   148f0:	e0bff817 	ldw	r2,-32(fp)
   148f4:	e13ffc17 	ldw	r4,-16(fp)
   148f8:	100b883a 	mov	r5,r2
   148fc:	00146c80 	call	146c8 <alt_ic_irq_enable>
   14900:	00000406 	br	14914 <alt_iic_isr_register+0xc4>
   14904:	e0bff817 	ldw	r2,-32(fp)
   14908:	e13ffc17 	ldw	r4,-16(fp)
   1490c:	100b883a 	mov	r5,r2
   14910:	00147640 	call	14764 <alt_ic_irq_disable>
   14914:	e0bff715 	stw	r2,-36(fp)
   14918:	e0bff917 	ldw	r2,-28(fp)
   1491c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14920:	e0bffb17 	ldw	r2,-20(fp)
   14924:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   14928:	e0bff717 	ldw	r2,-36(fp)
}
   1492c:	e037883a 	mov	sp,fp
   14930:	dfc00117 	ldw	ra,4(sp)
   14934:	df000017 	ldw	fp,0(sp)
   14938:	dec00204 	addi	sp,sp,8
   1493c:	f800283a 	ret

00014940 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   14940:	defff804 	addi	sp,sp,-32
   14944:	dfc00715 	stw	ra,28(sp)
   14948:	df000615 	stw	fp,24(sp)
   1494c:	dc000515 	stw	r16,20(sp)
   14950:	df000504 	addi	fp,sp,20
   14954:	e13ffc15 	stw	r4,-16(fp)
   14958:	e17ffd15 	stw	r5,-12(fp)
   1495c:	e1bffe15 	stw	r6,-8(fp)
   14960:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   14964:	e13ffd17 	ldw	r4,-12(fp)
   14968:	e17ffe17 	ldw	r5,-8(fp)
   1496c:	e1bfff17 	ldw	r6,-4(fp)
   14970:	0014bd80 	call	14bd8 <open>
   14974:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   14978:	e0bffb17 	ldw	r2,-20(fp)
   1497c:	10002216 	blt	r2,zero,14a08 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   14980:	04000074 	movhi	r16,1
   14984:	84176c04 	addi	r16,r16,23984
   14988:	e0bffb17 	ldw	r2,-20(fp)
   1498c:	1009883a 	mov	r4,r2
   14990:	01400304 	movi	r5,12
   14994:	0012d440 	call	12d44 <__mulsi3>
   14998:	8085883a 	add	r2,r16,r2
   1499c:	10c00017 	ldw	r3,0(r2)
   149a0:	e0bffc17 	ldw	r2,-16(fp)
   149a4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   149a8:	04000074 	movhi	r16,1
   149ac:	84176c04 	addi	r16,r16,23984
   149b0:	e0bffb17 	ldw	r2,-20(fp)
   149b4:	1009883a 	mov	r4,r2
   149b8:	01400304 	movi	r5,12
   149bc:	0012d440 	call	12d44 <__mulsi3>
   149c0:	8085883a 	add	r2,r16,r2
   149c4:	10800104 	addi	r2,r2,4
   149c8:	10c00017 	ldw	r3,0(r2)
   149cc:	e0bffc17 	ldw	r2,-16(fp)
   149d0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   149d4:	04000074 	movhi	r16,1
   149d8:	84176c04 	addi	r16,r16,23984
   149dc:	e0bffb17 	ldw	r2,-20(fp)
   149e0:	1009883a 	mov	r4,r2
   149e4:	01400304 	movi	r5,12
   149e8:	0012d440 	call	12d44 <__mulsi3>
   149ec:	8085883a 	add	r2,r16,r2
   149f0:	10800204 	addi	r2,r2,8
   149f4:	10c00017 	ldw	r3,0(r2)
   149f8:	e0bffc17 	ldw	r2,-16(fp)
   149fc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   14a00:	e13ffb17 	ldw	r4,-20(fp)
   14a04:	00134b40 	call	134b4 <alt_release_fd>
  }
} 
   14a08:	e037883a 	mov	sp,fp
   14a0c:	dfc00217 	ldw	ra,8(sp)
   14a10:	df000117 	ldw	fp,4(sp)
   14a14:	dc000017 	ldw	r16,0(sp)
   14a18:	dec00304 	addi	sp,sp,12
   14a1c:	f800283a 	ret

00014a20 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   14a20:	defffb04 	addi	sp,sp,-20
   14a24:	dfc00415 	stw	ra,16(sp)
   14a28:	df000315 	stw	fp,12(sp)
   14a2c:	df000304 	addi	fp,sp,12
   14a30:	e13ffd15 	stw	r4,-12(fp)
   14a34:	e17ffe15 	stw	r5,-8(fp)
   14a38:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   14a3c:	01000074 	movhi	r4,1
   14a40:	21176f04 	addi	r4,r4,23996
   14a44:	e17ffd17 	ldw	r5,-12(fp)
   14a48:	01800044 	movi	r6,1
   14a4c:	01c07fc4 	movi	r7,511
   14a50:	00149400 	call	14940 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   14a54:	01000074 	movhi	r4,1
   14a58:	21176c04 	addi	r4,r4,23984
   14a5c:	e17ffe17 	ldw	r5,-8(fp)
   14a60:	000d883a 	mov	r6,zero
   14a64:	01c07fc4 	movi	r7,511
   14a68:	00149400 	call	14940 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   14a6c:	01000074 	movhi	r4,1
   14a70:	21177204 	addi	r4,r4,24008
   14a74:	e17fff17 	ldw	r5,-4(fp)
   14a78:	01800044 	movi	r6,1
   14a7c:	01c07fc4 	movi	r7,511
   14a80:	00149400 	call	14940 <alt_open_fd>
}  
   14a84:	e037883a 	mov	sp,fp
   14a88:	dfc00117 	ldw	ra,4(sp)
   14a8c:	df000017 	ldw	fp,0(sp)
   14a90:	dec00204 	addi	sp,sp,8
   14a94:	f800283a 	ret

00014a98 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14a98:	defffe04 	addi	sp,sp,-8
   14a9c:	dfc00115 	stw	ra,4(sp)
   14aa0:	df000015 	stw	fp,0(sp)
   14aa4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14aa8:	00800074 	movhi	r2,1
   14aac:	109bed04 	addi	r2,r2,28596
   14ab0:	10800017 	ldw	r2,0(r2)
   14ab4:	10000526 	beq	r2,zero,14acc <alt_get_errno+0x34>
   14ab8:	00800074 	movhi	r2,1
   14abc:	109bed04 	addi	r2,r2,28596
   14ac0:	10800017 	ldw	r2,0(r2)
   14ac4:	103ee83a 	callr	r2
   14ac8:	00000206 	br	14ad4 <alt_get_errno+0x3c>
   14acc:	008000b4 	movhi	r2,2
   14ad0:	10a28704 	addi	r2,r2,-30180
}
   14ad4:	e037883a 	mov	sp,fp
   14ad8:	dfc00117 	ldw	ra,4(sp)
   14adc:	df000017 	ldw	fp,0(sp)
   14ae0:	dec00204 	addi	sp,sp,8
   14ae4:	f800283a 	ret

00014ae8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   14ae8:	defffb04 	addi	sp,sp,-20
   14aec:	dfc00415 	stw	ra,16(sp)
   14af0:	df000315 	stw	fp,12(sp)
   14af4:	dc000215 	stw	r16,8(sp)
   14af8:	df000204 	addi	fp,sp,8
   14afc:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   14b00:	e0bfff17 	ldw	r2,-4(fp)
   14b04:	10800217 	ldw	r2,8(r2)
   14b08:	10d00034 	orhi	r3,r2,16384
   14b0c:	e0bfff17 	ldw	r2,-4(fp)
   14b10:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   14b14:	e03ffe15 	stw	zero,-8(fp)
   14b18:	00002206 	br	14ba4 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   14b1c:	04000074 	movhi	r16,1
   14b20:	84176c04 	addi	r16,r16,23984
   14b24:	e0bffe17 	ldw	r2,-8(fp)
   14b28:	1009883a 	mov	r4,r2
   14b2c:	01400304 	movi	r5,12
   14b30:	0012d440 	call	12d44 <__mulsi3>
   14b34:	8085883a 	add	r2,r16,r2
   14b38:	10c00017 	ldw	r3,0(r2)
   14b3c:	e0bfff17 	ldw	r2,-4(fp)
   14b40:	10800017 	ldw	r2,0(r2)
   14b44:	1880141e 	bne	r3,r2,14b98 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   14b48:	04000074 	movhi	r16,1
   14b4c:	84176c04 	addi	r16,r16,23984
   14b50:	e0bffe17 	ldw	r2,-8(fp)
   14b54:	1009883a 	mov	r4,r2
   14b58:	01400304 	movi	r5,12
   14b5c:	0012d440 	call	12d44 <__mulsi3>
   14b60:	8085883a 	add	r2,r16,r2
   14b64:	10800204 	addi	r2,r2,8
   14b68:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   14b6c:	10000a0e 	bge	r2,zero,14b98 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   14b70:	e13ffe17 	ldw	r4,-8(fp)
   14b74:	01400304 	movi	r5,12
   14b78:	0012d440 	call	12d44 <__mulsi3>
   14b7c:	00c00074 	movhi	r3,1
   14b80:	18d76c04 	addi	r3,r3,23984
   14b84:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   14b88:	e0bfff17 	ldw	r2,-4(fp)
   14b8c:	18800226 	beq	r3,r2,14b98 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   14b90:	00bffcc4 	movi	r2,-13
   14b94:	00000a06 	br	14bc0 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   14b98:	e0bffe17 	ldw	r2,-8(fp)
   14b9c:	10800044 	addi	r2,r2,1
   14ba0:	e0bffe15 	stw	r2,-8(fp)
   14ba4:	00800074 	movhi	r2,1
   14ba8:	109bec04 	addi	r2,r2,28592
   14bac:	10800017 	ldw	r2,0(r2)
   14bb0:	1007883a 	mov	r3,r2
   14bb4:	e0bffe17 	ldw	r2,-8(fp)
   14bb8:	18bfd82e 	bgeu	r3,r2,14b1c <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   14bbc:	0005883a 	mov	r2,zero
}
   14bc0:	e037883a 	mov	sp,fp
   14bc4:	dfc00217 	ldw	ra,8(sp)
   14bc8:	df000117 	ldw	fp,4(sp)
   14bcc:	dc000017 	ldw	r16,0(sp)
   14bd0:	dec00304 	addi	sp,sp,12
   14bd4:	f800283a 	ret

00014bd8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   14bd8:	defff604 	addi	sp,sp,-40
   14bdc:	dfc00915 	stw	ra,36(sp)
   14be0:	df000815 	stw	fp,32(sp)
   14be4:	df000804 	addi	fp,sp,32
   14be8:	e13ffd15 	stw	r4,-12(fp)
   14bec:	e17ffe15 	stw	r5,-8(fp)
   14bf0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   14bf4:	00bfffc4 	movi	r2,-1
   14bf8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   14bfc:	00bffb44 	movi	r2,-19
   14c00:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   14c04:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   14c08:	e13ffd17 	ldw	r4,-12(fp)
   14c0c:	01400074 	movhi	r5,1
   14c10:	295bea04 	addi	r5,r5,28584
   14c14:	0014eec0 	call	14eec <alt_find_dev>
   14c18:	e0bff815 	stw	r2,-32(fp)
   14c1c:	e0bff817 	ldw	r2,-32(fp)
   14c20:	1000051e 	bne	r2,zero,14c38 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   14c24:	e13ffd17 	ldw	r4,-12(fp)
   14c28:	0014f7c0 	call	14f7c <alt_find_file>
   14c2c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   14c30:	00800044 	movi	r2,1
   14c34:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   14c38:	e0bff817 	ldw	r2,-32(fp)
   14c3c:	10002a26 	beq	r2,zero,14ce8 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   14c40:	e13ff817 	ldw	r4,-32(fp)
   14c44:	00150900 	call	15090 <alt_get_fd>
   14c48:	e0bff915 	stw	r2,-28(fp)
   14c4c:	e0bff917 	ldw	r2,-28(fp)
   14c50:	1000030e 	bge	r2,zero,14c60 <open+0x88>
    {
      status = index;
   14c54:	e0bff917 	ldw	r2,-28(fp)
   14c58:	e0bffa15 	stw	r2,-24(fp)
   14c5c:	00002406 	br	14cf0 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   14c60:	e13ff917 	ldw	r4,-28(fp)
   14c64:	01400304 	movi	r5,12
   14c68:	0012d440 	call	12d44 <__mulsi3>
   14c6c:	00c00074 	movhi	r3,1
   14c70:	18d76c04 	addi	r3,r3,23984
   14c74:	10c5883a 	add	r2,r2,r3
   14c78:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   14c7c:	e0fffe17 	ldw	r3,-8(fp)
   14c80:	00900034 	movhi	r2,16384
   14c84:	10bfffc4 	addi	r2,r2,-1
   14c88:	1886703a 	and	r3,r3,r2
   14c8c:	e0bffc17 	ldw	r2,-16(fp)
   14c90:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   14c94:	e0bffb17 	ldw	r2,-20(fp)
   14c98:	1000051e 	bne	r2,zero,14cb0 <open+0xd8>
   14c9c:	e13ffc17 	ldw	r4,-16(fp)
   14ca0:	0014ae80 	call	14ae8 <alt_file_locked>
   14ca4:	e0bffa15 	stw	r2,-24(fp)
   14ca8:	e0bffa17 	ldw	r2,-24(fp)
   14cac:	10001016 	blt	r2,zero,14cf0 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   14cb0:	e0bff817 	ldw	r2,-32(fp)
   14cb4:	10800317 	ldw	r2,12(r2)
   14cb8:	10000826 	beq	r2,zero,14cdc <open+0x104>
   14cbc:	e0bff817 	ldw	r2,-32(fp)
   14cc0:	10800317 	ldw	r2,12(r2)
   14cc4:	e13ffc17 	ldw	r4,-16(fp)
   14cc8:	e17ffd17 	ldw	r5,-12(fp)
   14ccc:	e1bffe17 	ldw	r6,-8(fp)
   14cd0:	e1ffff17 	ldw	r7,-4(fp)
   14cd4:	103ee83a 	callr	r2
   14cd8:	00000106 	br	14ce0 <open+0x108>
   14cdc:	0005883a 	mov	r2,zero
   14ce0:	e0bffa15 	stw	r2,-24(fp)
   14ce4:	00000206 	br	14cf0 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   14ce8:	00bffb44 	movi	r2,-19
   14cec:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   14cf0:	e0bffa17 	ldw	r2,-24(fp)
   14cf4:	1000080e 	bge	r2,zero,14d18 <open+0x140>
  {
    alt_release_fd (index);  
   14cf8:	e13ff917 	ldw	r4,-28(fp)
   14cfc:	00134b40 	call	134b4 <alt_release_fd>
    ALT_ERRNO = -status;
   14d00:	0014a980 	call	14a98 <alt_get_errno>
   14d04:	e0fffa17 	ldw	r3,-24(fp)
   14d08:	00c7c83a 	sub	r3,zero,r3
   14d0c:	10c00015 	stw	r3,0(r2)
    return -1;
   14d10:	00bfffc4 	movi	r2,-1
   14d14:	00000106 	br	14d1c <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   14d18:	e0bff917 	ldw	r2,-28(fp)
}
   14d1c:	e037883a 	mov	sp,fp
   14d20:	dfc00117 	ldw	ra,4(sp)
   14d24:	df000017 	ldw	fp,0(sp)
   14d28:	dec00204 	addi	sp,sp,8
   14d2c:	f800283a 	ret

00014d30 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   14d30:	defffa04 	addi	sp,sp,-24
   14d34:	df000515 	stw	fp,20(sp)
   14d38:	df000504 	addi	fp,sp,20
   14d3c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14d40:	0005303a 	rdctl	r2,status
   14d44:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14d48:	e0fffc17 	ldw	r3,-16(fp)
   14d4c:	00bfff84 	movi	r2,-2
   14d50:	1884703a 	and	r2,r3,r2
   14d54:	1001703a 	wrctl	status,r2
  
  return context;
   14d58:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   14d5c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   14d60:	e0bfff17 	ldw	r2,-4(fp)
   14d64:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   14d68:	e0bffd17 	ldw	r2,-12(fp)
   14d6c:	10800017 	ldw	r2,0(r2)
   14d70:	e0fffd17 	ldw	r3,-12(fp)
   14d74:	18c00117 	ldw	r3,4(r3)
   14d78:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   14d7c:	e0bffd17 	ldw	r2,-12(fp)
   14d80:	10800117 	ldw	r2,4(r2)
   14d84:	e0fffd17 	ldw	r3,-12(fp)
   14d88:	18c00017 	ldw	r3,0(r3)
   14d8c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   14d90:	e0bffd17 	ldw	r2,-12(fp)
   14d94:	e0fffd17 	ldw	r3,-12(fp)
   14d98:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   14d9c:	e0bffd17 	ldw	r2,-12(fp)
   14da0:	e0fffd17 	ldw	r3,-12(fp)
   14da4:	10c00015 	stw	r3,0(r2)
   14da8:	e0bffb17 	ldw	r2,-20(fp)
   14dac:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14db0:	e0bffe17 	ldw	r2,-8(fp)
   14db4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   14db8:	e037883a 	mov	sp,fp
   14dbc:	df000017 	ldw	fp,0(sp)
   14dc0:	dec00104 	addi	sp,sp,4
   14dc4:	f800283a 	ret

00014dc8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   14dc8:	defffb04 	addi	sp,sp,-20
   14dcc:	dfc00415 	stw	ra,16(sp)
   14dd0:	df000315 	stw	fp,12(sp)
   14dd4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   14dd8:	d0a00c17 	ldw	r2,-32720(gp)
   14ddc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   14de0:	d0a6a917 	ldw	r2,-25948(gp)
   14de4:	10800044 	addi	r2,r2,1
   14de8:	d0a6a915 	stw	r2,-25948(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   14dec:	00002e06 	br	14ea8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   14df0:	e0bffd17 	ldw	r2,-12(fp)
   14df4:	10800017 	ldw	r2,0(r2)
   14df8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   14dfc:	e0bffd17 	ldw	r2,-12(fp)
   14e00:	10800403 	ldbu	r2,16(r2)
   14e04:	10803fcc 	andi	r2,r2,255
   14e08:	10000426 	beq	r2,zero,14e1c <alt_tick+0x54>
   14e0c:	d0a6a917 	ldw	r2,-25948(gp)
   14e10:	1000021e 	bne	r2,zero,14e1c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   14e14:	e0bffd17 	ldw	r2,-12(fp)
   14e18:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   14e1c:	e0bffd17 	ldw	r2,-12(fp)
   14e20:	10800217 	ldw	r2,8(r2)
   14e24:	d0e6a917 	ldw	r3,-25948(gp)
   14e28:	18801d36 	bltu	r3,r2,14ea0 <alt_tick+0xd8>
   14e2c:	e0bffd17 	ldw	r2,-12(fp)
   14e30:	10800403 	ldbu	r2,16(r2)
   14e34:	10803fcc 	andi	r2,r2,255
   14e38:	1000191e 	bne	r2,zero,14ea0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   14e3c:	e0bffd17 	ldw	r2,-12(fp)
   14e40:	10c00317 	ldw	r3,12(r2)
   14e44:	e0bffd17 	ldw	r2,-12(fp)
   14e48:	10800517 	ldw	r2,20(r2)
   14e4c:	1009883a 	mov	r4,r2
   14e50:	183ee83a 	callr	r3
   14e54:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   14e58:	e0bfff17 	ldw	r2,-4(fp)
   14e5c:	1000031e 	bne	r2,zero,14e6c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   14e60:	e13ffd17 	ldw	r4,-12(fp)
   14e64:	0014d300 	call	14d30 <alt_alarm_stop>
   14e68:	00000d06 	br	14ea0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   14e6c:	e0bffd17 	ldw	r2,-12(fp)
   14e70:	10c00217 	ldw	r3,8(r2)
   14e74:	e0bfff17 	ldw	r2,-4(fp)
   14e78:	1887883a 	add	r3,r3,r2
   14e7c:	e0bffd17 	ldw	r2,-12(fp)
   14e80:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   14e84:	e0bffd17 	ldw	r2,-12(fp)
   14e88:	10c00217 	ldw	r3,8(r2)
   14e8c:	d0a6a917 	ldw	r2,-25948(gp)
   14e90:	1880032e 	bgeu	r3,r2,14ea0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   14e94:	e0bffd17 	ldw	r2,-12(fp)
   14e98:	00c00044 	movi	r3,1
   14e9c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   14ea0:	e0bffe17 	ldw	r2,-8(fp)
   14ea4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   14ea8:	e0fffd17 	ldw	r3,-12(fp)
   14eac:	d0a00c04 	addi	r2,gp,-32720
   14eb0:	18bfcf1e 	bne	r3,r2,14df0 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   14eb4:	0001883a 	nop
}
   14eb8:	e037883a 	mov	sp,fp
   14ebc:	dfc00117 	ldw	ra,4(sp)
   14ec0:	df000017 	ldw	fp,0(sp)
   14ec4:	dec00204 	addi	sp,sp,8
   14ec8:	f800283a 	ret

00014ecc <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   14ecc:	deffff04 	addi	sp,sp,-4
   14ed0:	df000015 	stw	fp,0(sp)
   14ed4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   14ed8:	000170fa 	wrctl	ienable,zero
}
   14edc:	e037883a 	mov	sp,fp
   14ee0:	df000017 	ldw	fp,0(sp)
   14ee4:	dec00104 	addi	sp,sp,4
   14ee8:	f800283a 	ret

00014eec <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   14eec:	defffa04 	addi	sp,sp,-24
   14ef0:	dfc00515 	stw	ra,20(sp)
   14ef4:	df000415 	stw	fp,16(sp)
   14ef8:	df000404 	addi	fp,sp,16
   14efc:	e13ffe15 	stw	r4,-8(fp)
   14f00:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   14f04:	e0bfff17 	ldw	r2,-4(fp)
   14f08:	10800017 	ldw	r2,0(r2)
   14f0c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   14f10:	e13ffe17 	ldw	r4,-8(fp)
   14f14:	00102c00 	call	102c0 <strlen>
   14f18:	10800044 	addi	r2,r2,1
   14f1c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   14f20:	00000d06 	br	14f58 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   14f24:	e0bffc17 	ldw	r2,-16(fp)
   14f28:	10c00217 	ldw	r3,8(r2)
   14f2c:	e0bffd17 	ldw	r2,-12(fp)
   14f30:	1809883a 	mov	r4,r3
   14f34:	e17ffe17 	ldw	r5,-8(fp)
   14f38:	100d883a 	mov	r6,r2
   14f3c:	00151b00 	call	151b0 <memcmp>
   14f40:	1000021e 	bne	r2,zero,14f4c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   14f44:	e0bffc17 	ldw	r2,-16(fp)
   14f48:	00000706 	br	14f68 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   14f4c:	e0bffc17 	ldw	r2,-16(fp)
   14f50:	10800017 	ldw	r2,0(r2)
   14f54:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   14f58:	e0fffc17 	ldw	r3,-16(fp)
   14f5c:	e0bfff17 	ldw	r2,-4(fp)
   14f60:	18bff01e 	bne	r3,r2,14f24 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   14f64:	0005883a 	mov	r2,zero
}
   14f68:	e037883a 	mov	sp,fp
   14f6c:	dfc00117 	ldw	ra,4(sp)
   14f70:	df000017 	ldw	fp,0(sp)
   14f74:	dec00204 	addi	sp,sp,8
   14f78:	f800283a 	ret

00014f7c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   14f7c:	defffb04 	addi	sp,sp,-20
   14f80:	dfc00415 	stw	ra,16(sp)
   14f84:	df000315 	stw	fp,12(sp)
   14f88:	df000304 	addi	fp,sp,12
   14f8c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   14f90:	00800074 	movhi	r2,1
   14f94:	109be804 	addi	r2,r2,28576
   14f98:	10800017 	ldw	r2,0(r2)
   14f9c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   14fa0:	00003106 	br	15068 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   14fa4:	e0bffd17 	ldw	r2,-12(fp)
   14fa8:	10800217 	ldw	r2,8(r2)
   14fac:	1009883a 	mov	r4,r2
   14fb0:	00102c00 	call	102c0 <strlen>
   14fb4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   14fb8:	e0bffd17 	ldw	r2,-12(fp)
   14fbc:	10c00217 	ldw	r3,8(r2)
   14fc0:	e0bffe17 	ldw	r2,-8(fp)
   14fc4:	10bfffc4 	addi	r2,r2,-1
   14fc8:	1885883a 	add	r2,r3,r2
   14fcc:	10800003 	ldbu	r2,0(r2)
   14fd0:	10803fcc 	andi	r2,r2,255
   14fd4:	1080201c 	xori	r2,r2,128
   14fd8:	10bfe004 	addi	r2,r2,-128
   14fdc:	10800bd8 	cmpnei	r2,r2,47
   14fe0:	1000031e 	bne	r2,zero,14ff0 <alt_find_file+0x74>
    {
      len -= 1;
   14fe4:	e0bffe17 	ldw	r2,-8(fp)
   14fe8:	10bfffc4 	addi	r2,r2,-1
   14fec:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   14ff0:	e0bffe17 	ldw	r2,-8(fp)
   14ff4:	e0ffff17 	ldw	r3,-4(fp)
   14ff8:	1885883a 	add	r2,r3,r2
   14ffc:	10800003 	ldbu	r2,0(r2)
   15000:	10803fcc 	andi	r2,r2,255
   15004:	1080201c 	xori	r2,r2,128
   15008:	10bfe004 	addi	r2,r2,-128
   1500c:	10800be0 	cmpeqi	r2,r2,47
   15010:	1000081e 	bne	r2,zero,15034 <alt_find_file+0xb8>
   15014:	e0bffe17 	ldw	r2,-8(fp)
   15018:	e0ffff17 	ldw	r3,-4(fp)
   1501c:	1885883a 	add	r2,r3,r2
   15020:	10800003 	ldbu	r2,0(r2)
   15024:	10803fcc 	andi	r2,r2,255
   15028:	1080201c 	xori	r2,r2,128
   1502c:	10bfe004 	addi	r2,r2,-128
   15030:	10000a1e 	bne	r2,zero,1505c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   15034:	e0bffd17 	ldw	r2,-12(fp)
   15038:	10c00217 	ldw	r3,8(r2)
   1503c:	e0bffe17 	ldw	r2,-8(fp)
   15040:	1809883a 	mov	r4,r3
   15044:	e17fff17 	ldw	r5,-4(fp)
   15048:	100d883a 	mov	r6,r2
   1504c:	00151b00 	call	151b0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   15050:	1000021e 	bne	r2,zero,1505c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   15054:	e0bffd17 	ldw	r2,-12(fp)
   15058:	00000806 	br	1507c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   1505c:	e0bffd17 	ldw	r2,-12(fp)
   15060:	10800017 	ldw	r2,0(r2)
   15064:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   15068:	e0fffd17 	ldw	r3,-12(fp)
   1506c:	00800074 	movhi	r2,1
   15070:	109be804 	addi	r2,r2,28576
   15074:	18bfcb1e 	bne	r3,r2,14fa4 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   15078:	0005883a 	mov	r2,zero
}
   1507c:	e037883a 	mov	sp,fp
   15080:	dfc00117 	ldw	ra,4(sp)
   15084:	df000017 	ldw	fp,0(sp)
   15088:	dec00204 	addi	sp,sp,8
   1508c:	f800283a 	ret

00015090 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   15090:	defffa04 	addi	sp,sp,-24
   15094:	dfc00515 	stw	ra,20(sp)
   15098:	df000415 	stw	fp,16(sp)
   1509c:	dc000315 	stw	r16,12(sp)
   150a0:	df000304 	addi	fp,sp,12
   150a4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   150a8:	00bffa04 	movi	r2,-24
   150ac:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   150b0:	e03ffd15 	stw	zero,-12(fp)
   150b4:	00002106 	br	1513c <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   150b8:	04000074 	movhi	r16,1
   150bc:	84176c04 	addi	r16,r16,23984
   150c0:	e0bffd17 	ldw	r2,-12(fp)
   150c4:	1009883a 	mov	r4,r2
   150c8:	01400304 	movi	r5,12
   150cc:	0012d440 	call	12d44 <__mulsi3>
   150d0:	8085883a 	add	r2,r16,r2
   150d4:	10800017 	ldw	r2,0(r2)
   150d8:	1000151e 	bne	r2,zero,15130 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   150dc:	04000074 	movhi	r16,1
   150e0:	84176c04 	addi	r16,r16,23984
   150e4:	e0bffd17 	ldw	r2,-12(fp)
   150e8:	1009883a 	mov	r4,r2
   150ec:	01400304 	movi	r5,12
   150f0:	0012d440 	call	12d44 <__mulsi3>
   150f4:	8085883a 	add	r2,r16,r2
   150f8:	e0ffff17 	ldw	r3,-4(fp)
   150fc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   15100:	00800074 	movhi	r2,1
   15104:	109bec04 	addi	r2,r2,28592
   15108:	10c00017 	ldw	r3,0(r2)
   1510c:	e0bffd17 	ldw	r2,-12(fp)
   15110:	1880040e 	bge	r3,r2,15124 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   15114:	00800074 	movhi	r2,1
   15118:	109bec04 	addi	r2,r2,28592
   1511c:	e0fffd17 	ldw	r3,-12(fp)
   15120:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   15124:	e0bffd17 	ldw	r2,-12(fp)
   15128:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   1512c:	00000606 	br	15148 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   15130:	e0bffd17 	ldw	r2,-12(fp)
   15134:	10800044 	addi	r2,r2,1
   15138:	e0bffd15 	stw	r2,-12(fp)
   1513c:	e0bffd17 	ldw	r2,-12(fp)
   15140:	10800810 	cmplti	r2,r2,32
   15144:	103fdc1e 	bne	r2,zero,150b8 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   15148:	e0bffe17 	ldw	r2,-8(fp)
}
   1514c:	e037883a 	mov	sp,fp
   15150:	dfc00217 	ldw	ra,8(sp)
   15154:	df000117 	ldw	fp,4(sp)
   15158:	dc000017 	ldw	r16,0(sp)
   1515c:	dec00304 	addi	sp,sp,12
   15160:	f800283a 	ret

00015164 <atexit>:
   15164:	200b883a 	mov	r5,r4
   15168:	000d883a 	mov	r6,zero
   1516c:	0009883a 	mov	r4,zero
   15170:	000f883a 	mov	r7,zero
   15174:	001522c1 	jmpi	1522c <__register_exitproc>

00015178 <exit>:
   15178:	defffe04 	addi	sp,sp,-8
   1517c:	000b883a 	mov	r5,zero
   15180:	dc000015 	stw	r16,0(sp)
   15184:	dfc00115 	stw	ra,4(sp)
   15188:	2021883a 	mov	r16,r4
   1518c:	001535c0 	call	1535c <__call_exitprocs>
   15190:	00800074 	movhi	r2,1
   15194:	109be404 	addi	r2,r2,28560
   15198:	11000017 	ldw	r4,0(r2)
   1519c:	20800f17 	ldw	r2,60(r4)
   151a0:	10000126 	beq	r2,zero,151a8 <exit+0x30>
   151a4:	103ee83a 	callr	r2
   151a8:	8009883a 	mov	r4,r16
   151ac:	00154fc0 	call	154fc <_exit>

000151b0 <memcmp>:
   151b0:	01c000c4 	movi	r7,3
   151b4:	3980192e 	bgeu	r7,r6,1521c <memcmp+0x6c>
   151b8:	2904b03a 	or	r2,r5,r4
   151bc:	11c4703a 	and	r2,r2,r7
   151c0:	10000f26 	beq	r2,zero,15200 <memcmp+0x50>
   151c4:	20c00003 	ldbu	r3,0(r4)
   151c8:	28800003 	ldbu	r2,0(r5)
   151cc:	1880151e 	bne	r3,r2,15224 <memcmp+0x74>
   151d0:	31bfff84 	addi	r6,r6,-2
   151d4:	01ffffc4 	movi	r7,-1
   151d8:	00000406 	br	151ec <memcmp+0x3c>
   151dc:	20c00003 	ldbu	r3,0(r4)
   151e0:	28800003 	ldbu	r2,0(r5)
   151e4:	31bfffc4 	addi	r6,r6,-1
   151e8:	18800e1e 	bne	r3,r2,15224 <memcmp+0x74>
   151ec:	21000044 	addi	r4,r4,1
   151f0:	29400044 	addi	r5,r5,1
   151f4:	31fff91e 	bne	r6,r7,151dc <memcmp+0x2c>
   151f8:	0005883a 	mov	r2,zero
   151fc:	f800283a 	ret
   15200:	20c00017 	ldw	r3,0(r4)
   15204:	28800017 	ldw	r2,0(r5)
   15208:	1880041e 	bne	r3,r2,1521c <memcmp+0x6c>
   1520c:	31bfff04 	addi	r6,r6,-4
   15210:	21000104 	addi	r4,r4,4
   15214:	29400104 	addi	r5,r5,4
   15218:	39bff936 	bltu	r7,r6,15200 <memcmp+0x50>
   1521c:	303fe91e 	bne	r6,zero,151c4 <memcmp+0x14>
   15220:	003ff506 	br	151f8 <memcmp+0x48>
   15224:	1885c83a 	sub	r2,r3,r2
   15228:	f800283a 	ret

0001522c <__register_exitproc>:
   1522c:	defffa04 	addi	sp,sp,-24
   15230:	00800074 	movhi	r2,1
   15234:	109be404 	addi	r2,r2,28560
   15238:	dc000315 	stw	r16,12(sp)
   1523c:	14000017 	ldw	r16,0(r2)
   15240:	dc400415 	stw	r17,16(sp)
   15244:	dfc00515 	stw	ra,20(sp)
   15248:	80805217 	ldw	r2,328(r16)
   1524c:	2023883a 	mov	r17,r4
   15250:	10003e26 	beq	r2,zero,1534c <__register_exitproc+0x120>
   15254:	10c00117 	ldw	r3,4(r2)
   15258:	020007c4 	movi	r8,31
   1525c:	40c0180e 	bge	r8,r3,152c0 <__register_exitproc+0x94>
   15260:	00800034 	movhi	r2,0
   15264:	10800004 	addi	r2,r2,0
   15268:	1000061e 	bne	r2,zero,15284 <__register_exitproc+0x58>
   1526c:	00bfffc4 	movi	r2,-1
   15270:	dfc00517 	ldw	ra,20(sp)
   15274:	dc400417 	ldw	r17,16(sp)
   15278:	dc000317 	ldw	r16,12(sp)
   1527c:	dec00604 	addi	sp,sp,24
   15280:	f800283a 	ret
   15284:	01006404 	movi	r4,400
   15288:	d9400015 	stw	r5,0(sp)
   1528c:	d9800115 	stw	r6,4(sp)
   15290:	d9c00215 	stw	r7,8(sp)
   15294:	00000000 	call	0 <__alt_mem_mem4-0x10000>
   15298:	d9400017 	ldw	r5,0(sp)
   1529c:	d9800117 	ldw	r6,4(sp)
   152a0:	d9c00217 	ldw	r7,8(sp)
   152a4:	103ff126 	beq	r2,zero,1526c <__register_exitproc+0x40>
   152a8:	80c05217 	ldw	r3,328(r16)
   152ac:	10000115 	stw	zero,4(r2)
   152b0:	10c00015 	stw	r3,0(r2)
   152b4:	80805215 	stw	r2,328(r16)
   152b8:	10006215 	stw	zero,392(r2)
   152bc:	10006315 	stw	zero,396(r2)
   152c0:	10c00117 	ldw	r3,4(r2)
   152c4:	88000d1e 	bne	r17,zero,152fc <__register_exitproc+0xd0>
   152c8:	19000084 	addi	r4,r3,2
   152cc:	2109883a 	add	r4,r4,r4
   152d0:	18c00044 	addi	r3,r3,1
   152d4:	2109883a 	add	r4,r4,r4
   152d8:	1109883a 	add	r4,r2,r4
   152dc:	10c00115 	stw	r3,4(r2)
   152e0:	0005883a 	mov	r2,zero
   152e4:	21400015 	stw	r5,0(r4)
   152e8:	dfc00517 	ldw	ra,20(sp)
   152ec:	dc400417 	ldw	r17,16(sp)
   152f0:	dc000317 	ldw	r16,12(sp)
   152f4:	dec00604 	addi	sp,sp,24
   152f8:	f800283a 	ret
   152fc:	02400044 	movi	r9,1
   15300:	12806217 	ldw	r10,392(r2)
   15304:	48d2983a 	sll	r9,r9,r3
   15308:	19000804 	addi	r4,r3,32
   1530c:	18d1883a 	add	r8,r3,r3
   15310:	2109883a 	add	r4,r4,r4
   15314:	4211883a 	add	r8,r8,r8
   15318:	2109883a 	add	r4,r4,r4
   1531c:	1109883a 	add	r4,r2,r4
   15320:	1211883a 	add	r8,r2,r8
   15324:	5254b03a 	or	r10,r10,r9
   15328:	21c02215 	stw	r7,136(r4)
   1532c:	41802215 	stw	r6,136(r8)
   15330:	12806215 	stw	r10,392(r2)
   15334:	01000084 	movi	r4,2
   15338:	893fe31e 	bne	r17,r4,152c8 <__register_exitproc+0x9c>
   1533c:	11006317 	ldw	r4,396(r2)
   15340:	2252b03a 	or	r9,r4,r9
   15344:	12406315 	stw	r9,396(r2)
   15348:	003fdf06 	br	152c8 <__register_exitproc+0x9c>
   1534c:	008000b4 	movhi	r2,2
   15350:	10a2d804 	addi	r2,r2,-29856
   15354:	80805215 	stw	r2,328(r16)
   15358:	003fbe06 	br	15254 <__register_exitproc+0x28>

0001535c <__call_exitprocs>:
   1535c:	00800074 	movhi	r2,1
   15360:	109be404 	addi	r2,r2,28560
   15364:	10800017 	ldw	r2,0(r2)
   15368:	defff304 	addi	sp,sp,-52
   1536c:	df000b15 	stw	fp,44(sp)
   15370:	d8800015 	stw	r2,0(sp)
   15374:	10805204 	addi	r2,r2,328
   15378:	dd400815 	stw	r21,32(sp)
   1537c:	dfc00c15 	stw	ra,48(sp)
   15380:	ddc00a15 	stw	r23,40(sp)
   15384:	dd800915 	stw	r22,36(sp)
   15388:	dd000715 	stw	r20,28(sp)
   1538c:	dcc00615 	stw	r19,24(sp)
   15390:	dc800515 	stw	r18,20(sp)
   15394:	dc400415 	stw	r17,16(sp)
   15398:	dc000315 	stw	r16,12(sp)
   1539c:	d9000115 	stw	r4,4(sp)
   153a0:	2839883a 	mov	fp,r5
   153a4:	d8800215 	stw	r2,8(sp)
   153a8:	057fffc4 	movi	r21,-1
   153ac:	d8800017 	ldw	r2,0(sp)
   153b0:	ddc00217 	ldw	r23,8(sp)
   153b4:	14805217 	ldw	r18,328(r2)
   153b8:	90001726 	beq	r18,zero,15418 <__call_exitprocs+0xbc>
   153bc:	94400117 	ldw	r17,4(r18)
   153c0:	8c3fffc4 	addi	r16,r17,-1
   153c4:	80001116 	blt	r16,zero,1540c <__call_exitprocs+0xb0>
   153c8:	8c400044 	addi	r17,r17,1
   153cc:	8427883a 	add	r19,r16,r16
   153d0:	8c63883a 	add	r17,r17,r17
   153d4:	95802204 	addi	r22,r18,136
   153d8:	9ce7883a 	add	r19,r19,r19
   153dc:	8c63883a 	add	r17,r17,r17
   153e0:	b4e7883a 	add	r19,r22,r19
   153e4:	9463883a 	add	r17,r18,r17
   153e8:	e0001726 	beq	fp,zero,15448 <__call_exitprocs+0xec>
   153ec:	8c87c83a 	sub	r3,r17,r18
   153f0:	b0c7883a 	add	r3,r22,r3
   153f4:	18c01e17 	ldw	r3,120(r3)
   153f8:	1f001326 	beq	r3,fp,15448 <__call_exitprocs+0xec>
   153fc:	843fffc4 	addi	r16,r16,-1
   15400:	9cffff04 	addi	r19,r19,-4
   15404:	8c7fff04 	addi	r17,r17,-4
   15408:	857ff71e 	bne	r16,r21,153e8 <__call_exitprocs+0x8c>
   1540c:	00800034 	movhi	r2,0
   15410:	10800004 	addi	r2,r2,0
   15414:	10002a1e 	bne	r2,zero,154c0 <__call_exitprocs+0x164>
   15418:	dfc00c17 	ldw	ra,48(sp)
   1541c:	df000b17 	ldw	fp,44(sp)
   15420:	ddc00a17 	ldw	r23,40(sp)
   15424:	dd800917 	ldw	r22,36(sp)
   15428:	dd400817 	ldw	r21,32(sp)
   1542c:	dd000717 	ldw	r20,28(sp)
   15430:	dcc00617 	ldw	r19,24(sp)
   15434:	dc800517 	ldw	r18,20(sp)
   15438:	dc400417 	ldw	r17,16(sp)
   1543c:	dc000317 	ldw	r16,12(sp)
   15440:	dec00d04 	addi	sp,sp,52
   15444:	f800283a 	ret
   15448:	91000117 	ldw	r4,4(r18)
   1544c:	88c00017 	ldw	r3,0(r17)
   15450:	213fffc4 	addi	r4,r4,-1
   15454:	24001526 	beq	r4,r16,154ac <__call_exitprocs+0x150>
   15458:	88000015 	stw	zero,0(r17)
   1545c:	183fe726 	beq	r3,zero,153fc <__call_exitprocs+0xa0>
   15460:	00800044 	movi	r2,1
   15464:	1408983a 	sll	r4,r2,r16
   15468:	91406217 	ldw	r5,392(r18)
   1546c:	95000117 	ldw	r20,4(r18)
   15470:	214a703a 	and	r5,r4,r5
   15474:	28000b26 	beq	r5,zero,154a4 <__call_exitprocs+0x148>
   15478:	91406317 	ldw	r5,396(r18)
   1547c:	2148703a 	and	r4,r4,r5
   15480:	20000c1e 	bne	r4,zero,154b4 <__call_exitprocs+0x158>
   15484:	99400017 	ldw	r5,0(r19)
   15488:	d9000117 	ldw	r4,4(sp)
   1548c:	183ee83a 	callr	r3
   15490:	90c00117 	ldw	r3,4(r18)
   15494:	1d3fc51e 	bne	r3,r20,153ac <__call_exitprocs+0x50>
   15498:	b8c00017 	ldw	r3,0(r23)
   1549c:	1cbfd726 	beq	r3,r18,153fc <__call_exitprocs+0xa0>
   154a0:	003fc206 	br	153ac <__call_exitprocs+0x50>
   154a4:	183ee83a 	callr	r3
   154a8:	003ff906 	br	15490 <__call_exitprocs+0x134>
   154ac:	94000115 	stw	r16,4(r18)
   154b0:	003fea06 	br	1545c <__call_exitprocs+0x100>
   154b4:	99000017 	ldw	r4,0(r19)
   154b8:	183ee83a 	callr	r3
   154bc:	003ff406 	br	15490 <__call_exitprocs+0x134>
   154c0:	90c00117 	ldw	r3,4(r18)
   154c4:	1800071e 	bne	r3,zero,154e4 <__call_exitprocs+0x188>
   154c8:	90c00017 	ldw	r3,0(r18)
   154cc:	18000926 	beq	r3,zero,154f4 <__call_exitprocs+0x198>
   154d0:	9009883a 	mov	r4,r18
   154d4:	b8c00015 	stw	r3,0(r23)
   154d8:	00000000 	call	0 <__alt_mem_mem4-0x10000>
   154dc:	bc800017 	ldw	r18,0(r23)
   154e0:	003fb506 	br	153b8 <__call_exitprocs+0x5c>
   154e4:	90c00017 	ldw	r3,0(r18)
   154e8:	902f883a 	mov	r23,r18
   154ec:	1825883a 	mov	r18,r3
   154f0:	003fb106 	br	153b8 <__call_exitprocs+0x5c>
   154f4:	0007883a 	mov	r3,zero
   154f8:	003ffb06 	br	154e8 <__call_exitprocs+0x18c>

000154fc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   154fc:	defffc04 	addi	sp,sp,-16
   15500:	df000315 	stw	fp,12(sp)
   15504:	df000304 	addi	fp,sp,12
   15508:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   1550c:	0001883a 	nop
   15510:	e0bfff17 	ldw	r2,-4(fp)
   15514:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
   15518:	e0bffd17 	ldw	r2,-12(fp)
   1551c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   15520:	e0bffe17 	ldw	r2,-8(fp)
   15524:	10000226 	beq	r2,zero,15530 <_exit+0x34>
    ALT_SIM_FAIL();
   15528:	002af070 	cmpltui	zero,zero,43969
   1552c:	00000106 	br	15534 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   15530:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   15534:	003fff06 	br	15534 <_exit+0x38>

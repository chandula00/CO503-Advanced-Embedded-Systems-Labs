
cpu4.elf:     file format elf32-littlenios2
cpu4.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000101b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x000061a0 memsz 0x000061a0 flags r-x
    LOAD off    0x000071c0 vaddr 0x000161c0 paddr 0x00017c48 align 2**12
         filesz 0x00001a88 memsz 0x00001a88 flags rw-
    LOAD off    0x000096d0 vaddr 0x000196d0 paddr 0x000196d0 align 2**12
         filesz 0x00000000 memsz 0x000004e0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005ef0  000101b8  000101b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000118  000160a8  000160a8  000070a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a88  000161c0  00017c48  000071c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000004e0  000196d0  000196d0  000096d0  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00008c48  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000990  00000000  00000000  00008c70  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0001802c  00000000  00000000  00009600  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00005d02  00000000  00000000  0002162c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00006e46  00000000  00000000  0002732e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000012a4  00000000  00000000  0002e174  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000256a  00000000  00000000  0002f418  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00005a50  00000000  00000000  00031982  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  000373d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000398  00000000  00000000  000373e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0003a09c  2**0
                  CONTENTS, READONLY
 17 .cpu          00000004  00000000  00000000  0003a09f  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0003a0a3  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0003a0a4  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0003a0a5  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0003a0a9  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0003a0ad  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000a  00000000  00000000  0003a0b1  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000a  00000000  00000000  0003a0bb  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000a  00000000  00000000  0003a0c5  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000004  00000000  00000000  0003a0cf  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000052  00000000  00000000  0003a0d3  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00190008  00000000  00000000  0003a125  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
000101b8 l    d  .text	00000000 .text
000160a8 l    d  .rodata	00000000 .rodata
000161c0 l    d  .rwdata	00000000 .rwdata
000196d0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../cpu4_bsp//obj/HAL/src/crt0.o
000101f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00010094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 FIFO.c
00000000 l    df *ABS*	00000000 quant.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
00016200 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00012408 l     F .text	00000008 __fp_lock
00012410 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_close.c
000133e8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00013504 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00013530 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00013630 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00013724 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00013810 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
000139ec l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00017c38 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00013c60 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00013da0 l     F .text	00000038 alt_dev_reg
00016bb0 l     O .rwdata	00001060 jtag_uart4
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0001458c l     F .text	00000204 altera_avalon_jtag_uart_irq
00014790 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00014dcc l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00015024 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000154b0 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00015608 l     F .text	00000050 alt_get_errno
00015658 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
000132ac g     F .text	00000064 _isatty_r
00013934 g     F .text	00000078 alt_main
00010a0c g     F .text	00000084 _puts_r
00019920 g     O .bss	00000100 alt_irq
00013310 g     F .text	0000006c _lseek_r
00010698 g     F .text	00000140 quantization
000140f8 g     F .text	00000058 altera_avalon_fifo_write_almostfull
00017c48 g       *ABS*	00000000 __flash_rwdata_start
00019bb0 g       *ABS*	00000000 __alt_heap_start
00012fc0 g     F .text	0000005c __sseek
000124ac g     F .text	0000010c __sinit
00012424 g     F .text	00000078 __sfmoreglue
000139cc g     F .text	00000020 __malloc_unlock
00011890 g     F .text	0000018c memmove
00013e78 g     F .text	00000098 altera_avalon_fifo_init
0001249c g     F .text	00000010 _cleanup
000141a8 g     F .text	00000058 altera_avalon_fifo_write_fifo
00000000  w      *UND*	00000000 __errno
00010000 g     F .entry	0000000c __reset
00014340 g     F .text	00000028 altera_avalon_fifo_read_backpressure
00010020 g       *ABS*	00000000 __flash_exceptions_start
00013244 g     F .text	00000068 _fstat_r
000196dc g     O .bss	00000004 errno
000196e4 g     O .bss	00000004 alt_argv
0001fc10 g       *ABS*	00000000 _gp
00014044 g     F .text	0000005c altera_avalon_fifo_clear_event
00010000 g       *ABS*	00000000 __alt_mem_mem4
00016a30 g     O .rwdata	00000180 alt_fd_list
00015a5c g     F .text	00000090 alt_find_dev
000108cc g     F .text	00000140 memcpy
00012418 g     F .text	0000000c _cleanup_r
00015590 g     F .text	00000078 alt_io_redirect
000160a8 g       *ABS*	00000000 __DTOR_END__
00010a90 g     F .text	00000014 puts
00014990 g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00013680 g     F .text	000000a4 isatty
000196d8 g     O .bss	00000004 __malloc_top_pad
000103d8 g     F .text	000002c0 initialize_quantization_tables
00010b30 g     F .text	000004e4 __sfvwrite_r
00012018 g     F .text	00000064 _sbrk_r
00019720 g     O .bss	00000080 Temp
0001337c g     F .text	0000006c _read_r
00017c30 g     O .rwdata	00000004 alt_max_fd
000130f4 g     F .text	0000013c _fclose_r
000123d8 g     F .text	00000030 fflush
000196d4 g     O .bss	00000004 __malloc_max_sbrked_mem
00013860 g     F .text	000000d4 lseek
00017c10 g     O .rwdata	00000004 _global_impure_ptr
00011a1c g     F .text	000005fc _realloc_r
00019bb0 g       *ABS*	00000000 __bss_end
000153c0 g     F .text	000000f0 alt_iic_isr_register
00015938 g     F .text	00000104 alt_tick
000126c4 g     F .text	00000018 __fp_lock_all
00015374 g     F .text	0000004c alt_ic_irq_enabled
000102c0 g     F .text	00000040 FIFO_INIT
000158a0 g     F .text	00000098 alt_alarm_stop
000196ec g     O .bss	00000004 alt_irq_active
000100ec g     F .exceptions	000000cc alt_irq_handler
00016a08 g     O .rwdata	00000028 alt_dev_null
00015008 g     F .text	0000001c alt_dcache_flush_all
000197a0 g     O .bss	00000040 Lqt
000140a0 g     F .text	00000058 altera_avalon_fifo_write_ienable
00017c48 g       *ABS*	00000000 __ram_rwdata_end
00013fb4 g     F .text	0000002c altera_avalon_fifo_read_almostempty
00017c28 g     O .rwdata	00000008 alt_dev_list
00013cb0 g     F .text	000000f0 write
000161c0 g       *ABS*	00000000 __ram_rodata_end
00013580 g     F .text	000000b0 fstat
00019bb0 g       *ABS*	00000000 end
000144cc g     F .text	000000c0 altera_avalon_jtag_uart_init
00013fe0 g     F .text	0000003c altera_avalon_fifo_read_event
000160a8 g       *ABS*	00000000 __CTOR_LIST__
00020000 g       *ABS*	00000000 __alt_stack_pointer
00014e40 g     F .text	00000088 alt_avalon_timer_sc_init
00014ba8 g     F .text	00000224 altera_avalon_jtag_uart_write
000126b4 g     F .text	00000004 __sfp_lock_acquire
0001426c g     F .text	0000004c altera_avalon_fifo_read_fifo
00011798 g     F .text	000000f8 memchr
00012830 g     F .text	000002d0 _free_r
00015ecc g     F .text	000001a0 __call_exitprocs
00010340 g     F .text	00000098 DSP_Division
00017c18 g     O .rwdata	00000004 __malloc_sbrk_base
000101b8 g     F .text	0000003c _start
000196f0 g     O .bss	00000004 _alt_tick_rate
000196f4 g     O .bss	00000004 _alt_nticks
00013a3c g     F .text	000000f4 read
00013e0c g     F .text	0000006c alt_sys_init
00015d9c g     F .text	00000130 __register_exitproc
00014834 g     F .text	00000068 altera_avalon_jtag_uart_close
000108a4 g     F .text	00000028 __mulsi3
000161c0 g       *ABS*	00000000 __ram_rwdata_start
000160a8 g       *ABS*	00000000 __ram_rodata_start
000196f8 g     O .bss	00000028 __malloc_current_mallinfo
00014368 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00015c00 g     F .text	000000d4 alt_get_fd
00013090 g     F .text	00000064 _close_r
00015d20 g     F .text	0000007c memcmp
00014428 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00019bb0 g       *ABS*	00000000 __alt_stack_base
00014478 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0001207c g     F .text	00000174 __swsetup_r
00013f10 g     F .text	0000003c altera_avalon_fifo_read_status
000125b8 g     F .text	000000fc __sfp
00016600 g     O .rwdata	00000408 __malloc_av_
000126c0 g     F .text	00000004 __sinit_lock_release
00012ee4 g     F .text	00000054 __sread
00014314 g     F .text	0000002c altera_avalon_fifo_read_other_info
00015aec g     F .text	00000114 alt_find_file
00015074 g     F .text	000000a0 alt_dev_llist_insert
000139ac g     F .text	00000020 __malloc_lock
00013bb0 g     F .text	000000b0 sbrk
000121f0 g     F .text	000001e8 _fflush_r
000196d0 g       *ABS*	00000000 __bss_start
00012e08 g     F .text	000000dc memset
000107d8 g     F .text	000000cc main
000197e0 g     O .bss	00000080 ILqt
000196e8 g     O .bss	00000004 alt_envp
000196d0 g     O .bss	00000004 __malloc_max_total_mem
000143c8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0001401c g     F .text	00000028 altera_avalon_fifo_read_level
0001301c g     F .text	00000008 __sclose
00020000 g       *ABS*	00000000 __alt_heap_limit
00013230 g     F .text	00000014 fclose
00019a20 g     O .bss	00000190 _atexit0
00011014 g     F .text	00000784 _malloc_r
00017c34 g     O .rwdata	00000004 alt_errno
00012b00 g     F .text	000000a8 _fwalk
000126f4 g     F .text	0000013c _malloc_trim_r
000160a8 g       *ABS*	00000000 __CTOR_END__
000160a8 g       *ABS*	00000000 __flash_rodata_start
000160a8 g       *ABS*	00000000 __DTOR_LIST__
00010300 g     F .text	00000040 delay
00013dd8 g     F .text	00000034 alt_irq_init
00013b30 g     F .text	00000080 alt_release_fd
00015cd4 g     F .text	00000014 atexit
00013024 g     F .text	0000006c _write_r
00017c14 g     O .rwdata	00000004 _impure_ptr
000196e0 g     O .bss	00000004 alt_argc
00015170 g     F .text	0000005c _do_dtors
00019860 g     O .bss	00000040 Cqt
00010258 g     F .text	00000068 READ_FIFO
000161c0 g     O .rwdata	00000040 zigzag_table
00010020 g       .exceptions	00000000 alt_irq_entry
000126dc g     F .text	00000018 __fp_unlock_all
00017c20 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
000142b8 g     F .text	0000005c altera_avalon_fifo_write_other_info
000151e8 g     F .text	00000050 alt_ic_isr_register
00017c48 g       *ABS*	00000000 _edata
00019bb0 g       *ABS*	00000000 _end
000101b8 g       *ABS*	00000000 __ram_exceptions_end
0001489c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
000152d4 g     F .text	000000a0 alt_ic_irq_disable
00012f38 g     F .text	00000088 __swrite
00017c1c g     O .rwdata	00000004 __malloc_trim_threshold
00015a3c g     F .text	00000020 altera_nios2_qsys_irq_init
00015ce8 g     F .text	00000038 exit
00012ba8 g     F .text	000000b8 _fwalk_reent
00013f4c g     F .text	0000003c altera_avalon_fifo_read_ienable
00020000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
000126b8 g     F .text	00000004 __sfp_lock_release
000198a0 g     O .bss	00000080 ICqt
0001606c g     F .text	0000003c _exit
00014ec8 g     F .text	00000140 alt_alarm_start
00013f88 g     F .text	0000002c altera_avalon_fifo_read_almostfull
00012c60 g     F .text	000001a8 __smakebuf_r
00010aa4 g     F .text	0000008c strlen
00015748 g     F .text	00000158 open
00014200 g     F .text	0000006c altera_avalon_read_fifo
000151cc g     F .text	0000001c alt_icache_flush_all
000101f4 g     F .text	00000064 WRITE_FIFO
00017c3c g     O .rwdata	00000004 alt_priority_mask
00015238 g     F .text	0000009c alt_ic_irq_enable
00014150 g     F .text	00000058 altera_avalon_fifo_write_almostempty
00017c40 g     O .rwdata	00000008 alt_alarm_list
00015114 g     F .text	0000005c _do_ctors
00013438 g     F .text	000000cc close
00013790 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
000126bc g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08406e14 	ori	at,at,440
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100ec0 	call	100ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000306 	br	10098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   1008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)

00010094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   10094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   10098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   1009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100e8:	ef80083a 	eret

000100ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100ec:	defff904 	addi	sp,sp,-28
   100f0:	dfc00615 	stw	ra,24(sp)
   100f4:	df000515 	stw	fp,20(sp)
   100f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   100fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10100:	0005313a 	rdctl	r2,ipending
   10104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   10108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   10110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10114:	00800044 	movi	r2,1
   10118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1011c:	e0fffb17 	ldw	r3,-20(fp)
   10120:	e0bffc17 	ldw	r2,-16(fp)
   10124:	1884703a 	and	r2,r3,r2
   10128:	10001726 	beq	r2,zero,10188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1012c:	00c000b4 	movhi	r3,2
   10130:	18e64804 	addi	r3,r3,-26336
   10134:	e0bffd17 	ldw	r2,-12(fp)
   10138:	100490fa 	slli	r2,r2,3
   1013c:	1885883a 	add	r2,r3,r2
   10140:	10c00017 	ldw	r3,0(r2)
   10144:	010000b4 	movhi	r4,2
   10148:	21264804 	addi	r4,r4,-26336
   1014c:	e0bffd17 	ldw	r2,-12(fp)
   10150:	100490fa 	slli	r2,r2,3
   10154:	2085883a 	add	r2,r4,r2
   10158:	10800104 	addi	r2,r2,4
   1015c:	10800017 	ldw	r2,0(r2)
   10160:	1009883a 	mov	r4,r2
   10164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   10168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   1016c:	0005313a 	rdctl	r2,ipending
   10170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   10174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   10178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   1017c:	e0bffb17 	ldw	r2,-20(fp)
   10180:	103fe31e 	bne	r2,zero,10110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   10184:	00000706 	br	101a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10188:	e0bffc17 	ldw	r2,-16(fp)
   1018c:	1085883a 	add	r2,r2,r2
   10190:	e0bffc15 	stw	r2,-16(fp)
      i++;
   10194:	e0bffd17 	ldw	r2,-12(fp)
   10198:	10800044 	addi	r2,r2,1
   1019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   101a0:	003fde06 	br	1011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   101a4:	e037883a 	mov	sp,fp
   101a8:	dfc00117 	ldw	ra,4(sp)
   101ac:	df000017 	ldw	fp,0(sp)
   101b0:	dec00204 	addi	sp,sp,8
   101b4:	f800283a 	ret

Disassembly of section .text:

000101b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   101b8:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   101bc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   101c0:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   101c4:	d6bf0414 	ori	gp,gp,64528
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   101c8:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   101cc:	10a5b414 	ori	r2,r2,38608

    movhi r3, %hi(__bss_end)
   101d0:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   101d4:	18e6ec14 	ori	r3,r3,39856

    beq r2, r3, 1f
   101d8:	10c00326 	beq	r2,r3,101e8 <_start+0x30>

0:
    stw zero, (r2)
   101dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101e4:	10fffd36 	bltu	r2,r3,101dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101e8:	00137900 	call	13790 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101ec:	00139340 	call	13934 <alt_main>

000101f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101f0:	003fff06 	br	101f0 <alt_after_alt_main>

000101f4 <WRITE_FIFO>:
 */

#include "FIFO.h"

void WRITE_FIFO(int *buffer, int inBase, int controllBase)
{
   101f4:	defffb04 	addi	sp,sp,-20
   101f8:	dfc00415 	stw	ra,16(sp)
   101fc:	df000315 	stw	fp,12(sp)
   10200:	df000304 	addi	fp,sp,12
   10204:	e13ffd15 	stw	r4,-12(fp)
   10208:	e17ffe15 	stw	r5,-8(fp)
   1020c:	e1bfff15 	stw	r6,-4(fp)

	// Check if FIFO is full before writing
	while (altera_avalon_fifo_read_level(controllBase) == ALMOST_FULL)
   10210:	0001883a 	nop
   10214:	e0bfff17 	ldw	r2,-4(fp)
   10218:	1009883a 	mov	r4,r2
   1021c:	001401c0 	call	1401c <altera_avalon_fifo_read_level>
   10220:	10800220 	cmpeqi	r2,r2,8
   10224:	103ffb1e 	bne	r2,zero,10214 <WRITE_FIFO+0x20>
	{
	}

	// Write data to FIFO
	altera_avalon_fifo_write_fifo(inBase, controllBase, *buffer);
   10228:	e13ffe17 	ldw	r4,-8(fp)
   1022c:	e0ffff17 	ldw	r3,-4(fp)
   10230:	e0bffd17 	ldw	r2,-12(fp)
   10234:	10800017 	ldw	r2,0(r2)
   10238:	180b883a 	mov	r5,r3
   1023c:	100d883a 	mov	r6,r2
   10240:	00141a80 	call	141a8 <altera_avalon_fifo_write_fifo>
}
   10244:	e037883a 	mov	sp,fp
   10248:	dfc00117 	ldw	ra,4(sp)
   1024c:	df000017 	ldw	fp,0(sp)
   10250:	dec00204 	addi	sp,sp,8
   10254:	f800283a 	ret

00010258 <READ_FIFO>:

int READ_FIFO(int *buffer, int outBase, int controllBase)
{
   10258:	defffb04 	addi	sp,sp,-20
   1025c:	dfc00415 	stw	ra,16(sp)
   10260:	df000315 	stw	fp,12(sp)
   10264:	df000304 	addi	fp,sp,12
   10268:	e13ffd15 	stw	r4,-12(fp)
   1026c:	e17ffe15 	stw	r5,-8(fp)
   10270:	e1bfff15 	stw	r6,-4(fp)
	// Wait if the FIFO is empty
	// while (altera_avalon_fifo_read_status(FIFO_MEM_IN_CSR_BASE, ALTERA_AVALON_FIFO_STATUS_EMPTY))
	// 	;

	while (altera_avalon_fifo_read_level(controllBase) == ALMOST_EMTY)
   10274:	0001883a 	nop
   10278:	e0bfff17 	ldw	r2,-4(fp)
   1027c:	1009883a 	mov	r4,r2
   10280:	001401c0 	call	1401c <altera_avalon_fifo_read_level>
   10284:	103ffc26 	beq	r2,zero,10278 <READ_FIFO+0x20>
	{
	}

	// Read the data
	*buffer = altera_avalon_fifo_read_fifo(outBase, controllBase);
   10288:	e0fffe17 	ldw	r3,-8(fp)
   1028c:	e0bfff17 	ldw	r2,-4(fp)
   10290:	1809883a 	mov	r4,r3
   10294:	100b883a 	mov	r5,r2
   10298:	001426c0 	call	1426c <altera_avalon_fifo_read_fifo>
   1029c:	e0fffd17 	ldw	r3,-12(fp)
   102a0:	18800015 	stw	r2,0(r3)

	return *buffer;
   102a4:	e0bffd17 	ldw	r2,-12(fp)
   102a8:	10800017 	ldw	r2,0(r2)
}
   102ac:	e037883a 	mov	sp,fp
   102b0:	dfc00117 	ldw	ra,4(sp)
   102b4:	df000017 	ldw	fp,0(sp)
   102b8:	dec00204 	addi	sp,sp,8
   102bc:	f800283a 	ret

000102c0 <FIFO_INIT>:

// Initialization
void FIFO_INIT(int controllBase)
{
   102c0:	defffd04 	addi	sp,sp,-12
   102c4:	dfc00215 	stw	ra,8(sp)
   102c8:	df000115 	stw	fp,4(sp)
   102cc:	df000104 	addi	fp,sp,4
   102d0:	e13fff15 	stw	r4,-4(fp)
	altera_avalon_fifo_init(controllBase,
   102d4:	e0bfff17 	ldw	r2,-4(fp)
   102d8:	1009883a 	mov	r4,r2
   102dc:	000b883a 	mov	r5,zero
   102e0:	000d883a 	mov	r6,zero
   102e4:	01c00204 	movi	r7,8
   102e8:	0013e780 	call	13e78 <altera_avalon_fifo_init>
							0,
							ALMOST_EMTY,  // Almost empty threshold
							ALMOST_FULL); // Almost full threshold
   102ec:	e037883a 	mov	sp,fp
   102f0:	dfc00117 	ldw	ra,4(sp)
   102f4:	df000017 	ldw	fp,0(sp)
   102f8:	dec00204 	addi	sp,sp,8
   102fc:	f800283a 	ret

00010300 <delay>:
		20, 22, 33, 38, 46, 51, 55, 60,
		21, 34, 37, 47, 50, 56, 59, 61,
		35, 36, 48, 49, 57, 58, 62, 63};

void delay(int n)
{
   10300:	defffd04 	addi	sp,sp,-12
   10304:	df000215 	stw	fp,8(sp)
   10308:	df000204 	addi	fp,sp,8
   1030c:	e13fff15 	stw	r4,-4(fp)
	int i;
	for (i = n; i > 0; i--)
   10310:	e0bfff17 	ldw	r2,-4(fp)
   10314:	e0bffe15 	stw	r2,-8(fp)
   10318:	00000306 	br	10328 <delay+0x28>
   1031c:	e0bffe17 	ldw	r2,-8(fp)
   10320:	10bfffc4 	addi	r2,r2,-1
   10324:	e0bffe15 	stw	r2,-8(fp)
   10328:	e0bffe17 	ldw	r2,-8(fp)
   1032c:	00bffb16 	blt	zero,r2,1031c <delay+0x1c>
	{
		continue;
	}
}
   10330:	e037883a 	mov	sp,fp
   10334:	df000017 	ldw	fp,0(sp)
   10338:	dec00104 	addi	sp,sp,4
   1033c:	f800283a 	ret

00010340 <DSP_Division>:

/*	This function implements 16 Step division for Q.15 format data */
UINT16 DSP_Division(UINT32 numer, UINT32 denom)
{
   10340:	defffc04 	addi	sp,sp,-16
   10344:	df000315 	stw	fp,12(sp)
   10348:	df000304 	addi	fp,sp,12
   1034c:	e13ffe15 	stw	r4,-8(fp)
   10350:	e17fff15 	stw	r5,-4(fp)
	UINT16 i;

	denom <<= 15;
   10354:	e0bfff17 	ldw	r2,-4(fp)
   10358:	100493fa 	slli	r2,r2,15
   1035c:	e0bfff15 	stw	r2,-4(fp)

	for (i = 16; i > 0; i--)
   10360:	00800404 	movi	r2,16
   10364:	e0bffd0d 	sth	r2,-12(fp)
   10368:	00001406 	br	103bc <DSP_Division+0x7c>
	{
		if (numer > denom)
   1036c:	e0bffe17 	ldw	r2,-8(fp)
   10370:	e0ffff17 	ldw	r3,-4(fp)
   10374:	18800b2e 	bgeu	r3,r2,103a4 <DSP_Division+0x64>
		{
			numer -= denom;
   10378:	e0fffe17 	ldw	r3,-8(fp)
   1037c:	e0bfff17 	ldw	r2,-4(fp)
   10380:	1885c83a 	sub	r2,r3,r2
   10384:	e0bffe15 	stw	r2,-8(fp)
			numer <<= 1;
   10388:	e0bffe17 	ldw	r2,-8(fp)
   1038c:	1085883a 	add	r2,r2,r2
   10390:	e0bffe15 	stw	r2,-8(fp)
			numer++;
   10394:	e0bffe17 	ldw	r2,-8(fp)
   10398:	10800044 	addi	r2,r2,1
   1039c:	e0bffe15 	stw	r2,-8(fp)
   103a0:	00000306 	br	103b0 <DSP_Division+0x70>
		}
		else
			numer <<= 1;
   103a4:	e0bffe17 	ldw	r2,-8(fp)
   103a8:	1085883a 	add	r2,r2,r2
   103ac:	e0bffe15 	stw	r2,-8(fp)
{
	UINT16 i;

	denom <<= 15;

	for (i = 16; i > 0; i--)
   103b0:	e0bffd0b 	ldhu	r2,-12(fp)
   103b4:	10bfffc4 	addi	r2,r2,-1
   103b8:	e0bffd0d 	sth	r2,-12(fp)
   103bc:	e0bffd0b 	ldhu	r2,-12(fp)
   103c0:	103fea1e 	bne	r2,zero,1036c <DSP_Division+0x2c>
		}
		else
			numer <<= 1;
	}

	return (UINT16)numer;
   103c4:	e0bffe17 	ldw	r2,-8(fp)
}
   103c8:	e037883a 	mov	sp,fp
   103cc:	df000017 	ldw	fp,0(sp)
   103d0:	dec00104 	addi	sp,sp,4
   103d4:	f800283a 	ret

000103d8 <initialize_quantization_tables>:

/* Multiply Quantization table with quality factor to get LQT and CQT */
void initialize_quantization_tables(void)
{
   103d8:	deffd804 	addi	sp,sp,-160
   103dc:	dfc02715 	stw	ra,156(sp)
   103e0:	df002615 	stw	fp,152(sp)
   103e4:	dc002515 	stw	r16,148(sp)
   103e8:	df002504 	addi	fp,sp,148
	UINT16 i, index;
	UINT32 value;
	int temp;

	UINT8 luminance_quant_table[] =
   103ec:	00800074 	movhi	r2,1
   103f0:	10982d44 	addi	r2,r2,24757
   103f4:	e13fe004 	addi	r4,fp,-128
   103f8:	1007883a 	mov	r3,r2
   103fc:	00801004 	movi	r2,64
   10400:	180b883a 	mov	r5,r3
   10404:	100d883a 	mov	r6,r2
   10408:	00108cc0 	call	108cc <memcpy>
			18, 22, 37, 56, 68, 109, 103, 77,
			24, 35, 55, 64, 81, 104, 113, 92,
			49, 64, 78, 87, 103, 121, 120, 101,
			72, 92, 95, 98, 112, 100, 103, 99};

	UINT8 chrominance_quant_table[] =
   1040c:	00800074 	movhi	r2,1
   10410:	10983d44 	addi	r2,r2,24821
   10414:	e13ff004 	addi	r4,fp,-64
   10418:	1007883a 	mov	r3,r2
   1041c:	00801004 	movi	r2,64
   10420:	180b883a 	mov	r5,r3
   10424:	100d883a 	mov	r6,r2
   10428:	00108cc0 	call	108cc <memcpy>
			99, 99, 99, 99, 99, 99, 99, 99,
			99, 99, 99, 99, 99, 99, 99, 99,
			99, 99, 99, 99, 99, 99, 99, 99,
			99, 99, 99, 99, 99, 99, 99, 99};

	READ_FIFO(&temp, OUT_BASE_1to4, CONTROL_BASE_1to4);
   1042c:	e0bfdf04 	addi	r2,fp,-132
   10430:	1009883a 	mov	r4,r2
   10434:	014000b4 	movhi	r5,2
   10438:	29441204 	addi	r5,r5,4168
   1043c:	01840034 	movhi	r6,4096
   10440:	31841004 	addi	r6,r6,4160
   10444:	00102580 	call	10258 <READ_FIFO>
	UINT32 quality_factor = temp;
   10448:	e0bfdf17 	ldw	r2,-132(fp)
   1044c:	e0bfdd15 	stw	r2,-140(fp)

	printf("Quality Done\n");
   10450:	01000074 	movhi	r4,1
   10454:	21182a04 	addi	r4,r4,24744
   10458:	0010a900 	call	10a90 <puts>

	for (i = 0; i < 64; i++)
   1045c:	e03fdb0d 	sth	zero,-148(fp)
   10460:	00005606 	br	105bc <initialize_quantization_tables+0x1e4>
	{
		index = zigzag_table[i];
   10464:	e0bfdb0b 	ldhu	r2,-148(fp)
   10468:	00c00074 	movhi	r3,1
   1046c:	18d87004 	addi	r3,r3,25024
   10470:	1885883a 	add	r2,r3,r2
   10474:	10800003 	ldbu	r2,0(r2)
   10478:	10803fcc 	andi	r2,r2,255
   1047c:	e0bfde0d 	sth	r2,-136(fp)

		/* luminance quantization table * quality factor */
		value = luminance_quant_table[i] * quality_factor;
   10480:	e0bfdb0b 	ldhu	r2,-148(fp)
   10484:	e0ffe004 	addi	r3,fp,-128
   10488:	1885883a 	add	r2,r3,r2
   1048c:	10800003 	ldbu	r2,0(r2)
   10490:	10803fcc 	andi	r2,r2,255
   10494:	1009883a 	mov	r4,r2
   10498:	e17fdd17 	ldw	r5,-140(fp)
   1049c:	00108a40 	call	108a4 <__mulsi3>
   104a0:	e0bfdc15 	stw	r2,-144(fp)
		value = (value + 0x200) >> 10;
   104a4:	e0bfdc17 	ldw	r2,-144(fp)
   104a8:	10808004 	addi	r2,r2,512
   104ac:	1004d2ba 	srli	r2,r2,10
   104b0:	e0bfdc15 	stw	r2,-144(fp)

		if (value == 0)
   104b4:	e0bfdc17 	ldw	r2,-144(fp)
   104b8:	1000031e 	bne	r2,zero,104c8 <initialize_quantization_tables+0xf0>
			value = 1;
   104bc:	00800044 	movi	r2,1
   104c0:	e0bfdc15 	stw	r2,-144(fp)
   104c4:	00000506 	br	104dc <initialize_quantization_tables+0x104>
		else if (value > 255)
   104c8:	e0bfdc17 	ldw	r2,-144(fp)
   104cc:	10804030 	cmpltui	r2,r2,256
   104d0:	1000021e 	bne	r2,zero,104dc <initialize_quantization_tables+0x104>
			value = 255;
   104d4:	00803fc4 	movi	r2,255
   104d8:	e0bfdc15 	stw	r2,-144(fp)

		Lqt[index] = (UINT8)value;
   104dc:	e0bfde0b 	ldhu	r2,-136(fp)
   104e0:	e0ffdc17 	ldw	r3,-144(fp)
   104e4:	010000b4 	movhi	r4,2
   104e8:	2125e804 	addi	r4,r4,-26720
   104ec:	2085883a 	add	r2,r4,r2
   104f0:	10c00005 	stb	r3,0(r2)
		ILqt[i] = DSP_Division(0x8000, value);
   104f4:	e43fdb0b 	ldhu	r16,-148(fp)
   104f8:	01200014 	movui	r4,32768
   104fc:	e17fdc17 	ldw	r5,-144(fp)
   10500:	00103400 	call	10340 <DSP_Division>
   10504:	010000b4 	movhi	r4,2
   10508:	2125f804 	addi	r4,r4,-26656
   1050c:	8407883a 	add	r3,r16,r16
   10510:	20c7883a 	add	r3,r4,r3
   10514:	1880000d 	sth	r2,0(r3)

		/* chrominance quantization table * quality factor */
		value = chrominance_quant_table[i] * quality_factor;
   10518:	e0bfdb0b 	ldhu	r2,-148(fp)
   1051c:	e0fff004 	addi	r3,fp,-64
   10520:	1885883a 	add	r2,r3,r2
   10524:	10800003 	ldbu	r2,0(r2)
   10528:	10803fcc 	andi	r2,r2,255
   1052c:	1009883a 	mov	r4,r2
   10530:	e17fdd17 	ldw	r5,-140(fp)
   10534:	00108a40 	call	108a4 <__mulsi3>
   10538:	e0bfdc15 	stw	r2,-144(fp)
		value = (value + 0x200) >> 10;
   1053c:	e0bfdc17 	ldw	r2,-144(fp)
   10540:	10808004 	addi	r2,r2,512
   10544:	1004d2ba 	srli	r2,r2,10
   10548:	e0bfdc15 	stw	r2,-144(fp)

		if (value == 0)
   1054c:	e0bfdc17 	ldw	r2,-144(fp)
   10550:	1000031e 	bne	r2,zero,10560 <initialize_quantization_tables+0x188>
			value = 1;
   10554:	00800044 	movi	r2,1
   10558:	e0bfdc15 	stw	r2,-144(fp)
   1055c:	00000506 	br	10574 <initialize_quantization_tables+0x19c>
		else if (value > 255)
   10560:	e0bfdc17 	ldw	r2,-144(fp)
   10564:	10804030 	cmpltui	r2,r2,256
   10568:	1000021e 	bne	r2,zero,10574 <initialize_quantization_tables+0x19c>
			value = 255;
   1056c:	00803fc4 	movi	r2,255
   10570:	e0bfdc15 	stw	r2,-144(fp)

		Cqt[index] = (UINT8)value;
   10574:	e0bfde0b 	ldhu	r2,-136(fp)
   10578:	e0ffdc17 	ldw	r3,-144(fp)
   1057c:	010000b4 	movhi	r4,2
   10580:	21261804 	addi	r4,r4,-26528
   10584:	2085883a 	add	r2,r4,r2
   10588:	10c00005 	stb	r3,0(r2)
		ICqt[i] = DSP_Division(0x8000, value);
   1058c:	e43fdb0b 	ldhu	r16,-148(fp)
   10590:	01200014 	movui	r4,32768
   10594:	e17fdc17 	ldw	r5,-144(fp)
   10598:	00103400 	call	10340 <DSP_Division>
   1059c:	010000b4 	movhi	r4,2
   105a0:	21262804 	addi	r4,r4,-26464
   105a4:	8407883a 	add	r3,r16,r16
   105a8:	20c7883a 	add	r3,r4,r3
   105ac:	1880000d 	sth	r2,0(r3)
	READ_FIFO(&temp, OUT_BASE_1to4, CONTROL_BASE_1to4);
	UINT32 quality_factor = temp;

	printf("Quality Done\n");

	for (i = 0; i < 64; i++)
   105b0:	e0bfdb0b 	ldhu	r2,-148(fp)
   105b4:	10800044 	addi	r2,r2,1
   105b8:	e0bfdb0d 	sth	r2,-148(fp)
   105bc:	e0bfdb0b 	ldhu	r2,-148(fp)
   105c0:	10801030 	cmpltui	r2,r2,64
   105c4:	103fa71e 	bne	r2,zero,10464 <initialize_quantization_tables+0x8c>

		Cqt[index] = (UINT8)value;
		ICqt[i] = DSP_Division(0x8000, value);
	}

	for (i = 0; i < 64; i++)
   105c8:	e03fdb0d 	sth	zero,-148(fp)
   105cc:	00001206 	br	10618 <initialize_quantization_tables+0x240>
	{
		temp = ILqt[i];
   105d0:	e0bfdb0b 	ldhu	r2,-148(fp)
   105d4:	00c000b4 	movhi	r3,2
   105d8:	18e5f804 	addi	r3,r3,-26656
   105dc:	1085883a 	add	r2,r2,r2
   105e0:	1885883a 	add	r2,r3,r2
   105e4:	1080000b 	ldhu	r2,0(r2)
   105e8:	10bfffcc 	andi	r2,r2,65535
   105ec:	e0bfdf15 	stw	r2,-132(fp)
		WRITE_FIFO(&temp, IN_BASE_4to5, CONTROL_BASE_4to5);
   105f0:	e0bfdf04 	addi	r2,fp,-132
   105f4:	1009883a 	mov	r4,r2
   105f8:	014000b4 	movhi	r5,2
   105fc:	29441304 	addi	r5,r5,4172
   10600:	018000b4 	movhi	r6,2
   10604:	31840004 	addi	r6,r6,4096
   10608:	00101f40 	call	101f4 <WRITE_FIFO>

		Cqt[index] = (UINT8)value;
		ICqt[i] = DSP_Division(0x8000, value);
	}

	for (i = 0; i < 64; i++)
   1060c:	e0bfdb0b 	ldhu	r2,-148(fp)
   10610:	10800044 	addi	r2,r2,1
   10614:	e0bfdb0d 	sth	r2,-148(fp)
   10618:	e0bfdb0b 	ldhu	r2,-148(fp)
   1061c:	10801030 	cmpltui	r2,r2,64
   10620:	103feb1e 	bne	r2,zero,105d0 <initialize_quantization_tables+0x1f8>
	{
		temp = ILqt[i];
		WRITE_FIFO(&temp, IN_BASE_4to5, CONTROL_BASE_4to5);
	}

	for (i = 0; i < 64; i++)
   10624:	e03fdb0d 	sth	zero,-148(fp)
   10628:	00001206 	br	10674 <initialize_quantization_tables+0x29c>
	{
		temp = ICqt[i];
   1062c:	e0bfdb0b 	ldhu	r2,-148(fp)
   10630:	00c000b4 	movhi	r3,2
   10634:	18e62804 	addi	r3,r3,-26464
   10638:	1085883a 	add	r2,r2,r2
   1063c:	1885883a 	add	r2,r3,r2
   10640:	1080000b 	ldhu	r2,0(r2)
   10644:	10bfffcc 	andi	r2,r2,65535
   10648:	e0bfdf15 	stw	r2,-132(fp)
		WRITE_FIFO(&temp, IN_BASE_4to5, CONTROL_BASE_4to5);
   1064c:	e0bfdf04 	addi	r2,fp,-132
   10650:	1009883a 	mov	r4,r2
   10654:	014000b4 	movhi	r5,2
   10658:	29441304 	addi	r5,r5,4172
   1065c:	018000b4 	movhi	r6,2
   10660:	31840004 	addi	r6,r6,4096
   10664:	00101f40 	call	101f4 <WRITE_FIFO>
	{
		temp = ILqt[i];
		WRITE_FIFO(&temp, IN_BASE_4to5, CONTROL_BASE_4to5);
	}

	for (i = 0; i < 64; i++)
   10668:	e0bfdb0b 	ldhu	r2,-148(fp)
   1066c:	10800044 	addi	r2,r2,1
   10670:	e0bfdb0d 	sth	r2,-148(fp)
   10674:	e0bfdb0b 	ldhu	r2,-148(fp)
   10678:	10801030 	cmpltui	r2,r2,64
   1067c:	103feb1e 	bne	r2,zero,1062c <initialize_quantization_tables+0x254>
	{
		temp = ICqt[i];
		WRITE_FIFO(&temp, IN_BASE_4to5, CONTROL_BASE_4to5);
	}
}
   10680:	e037883a 	mov	sp,fp
   10684:	dfc00217 	ldw	ra,8(sp)
   10688:	df000117 	ldw	fp,4(sp)
   1068c:	dc000017 	ldw	r16,0(sp)
   10690:	dec00304 	addi	sp,sp,12
   10694:	f800283a 	ret

00010698 <quantization>:

/* multiply DCT Coefficients with Quantization table and store in ZigZag location */
void quantization(UINT16 *const quant_table_ptr)
{
   10698:	defffa04 	addi	sp,sp,-24
   1069c:	dfc00515 	stw	ra,20(sp)
   106a0:	df000415 	stw	fp,16(sp)
   106a4:	df000404 	addi	fp,sp,16
   106a8:	e13fff15 	stw	r4,-4(fp)
	INT16 i;
	INT32 value;
	int temp;

	for (i = 0; i <= 63; i++)
   106ac:	e03ffc0d 	sth	zero,-16(fp)
   106b0:	00002806 	br	10754 <quantization+0xbc>
	{

		READ_FIFO(&temp, OUT_BASE_3to4, CONTROL_BASE_3to4);
   106b4:	e0bffe04 	addi	r2,fp,-8
   106b8:	1009883a 	mov	r4,r2
   106bc:	014000b4 	movhi	r5,2
   106c0:	29441404 	addi	r5,r5,4176
   106c4:	01800134 	movhi	r6,4
   106c8:	31840804 	addi	r6,r6,4128
   106cc:	00102580 	call	10258 <READ_FIFO>
		value = (INT16)temp * quant_table_ptr[i];
   106d0:	e0bffe17 	ldw	r2,-8(fp)
   106d4:	10ffffcc 	andi	r3,r2,65535
   106d8:	18e0001c 	xori	r3,r3,32768
   106dc:	18e00004 	addi	r3,r3,-32768
   106e0:	e0bffc0f 	ldh	r2,-16(fp)
   106e4:	1085883a 	add	r2,r2,r2
   106e8:	e13fff17 	ldw	r4,-4(fp)
   106ec:	2085883a 	add	r2,r4,r2
   106f0:	1080000b 	ldhu	r2,0(r2)
   106f4:	10bfffcc 	andi	r2,r2,65535
   106f8:	1809883a 	mov	r4,r3
   106fc:	100b883a 	mov	r5,r2
   10700:	00108a40 	call	108a4 <__mulsi3>
   10704:	e0bffd15 	stw	r2,-12(fp)

		value = (value + 0x4000) >> 15;
   10708:	e0bffd17 	ldw	r2,-12(fp)
   1070c:	10900004 	addi	r2,r2,16384
   10710:	1005d3fa 	srai	r2,r2,15
   10714:	e0bffd15 	stw	r2,-12(fp)

		Temp[zigzag_table[i]] = (INT16)value;
   10718:	e0bffc0f 	ldh	r2,-16(fp)
   1071c:	00c00074 	movhi	r3,1
   10720:	18d87004 	addi	r3,r3,25024
   10724:	1885883a 	add	r2,r3,r2
   10728:	10800003 	ldbu	r2,0(r2)
   1072c:	10803fcc 	andi	r2,r2,255
   10730:	e0fffd17 	ldw	r3,-12(fp)
   10734:	010000b4 	movhi	r4,2
   10738:	2125c804 	addi	r4,r4,-26848
   1073c:	1085883a 	add	r2,r2,r2
   10740:	2085883a 	add	r2,r4,r2
   10744:	10c0000d 	sth	r3,0(r2)
{
	INT16 i;
	INT32 value;
	int temp;

	for (i = 0; i <= 63; i++)
   10748:	e0bffc0b 	ldhu	r2,-16(fp)
   1074c:	10800044 	addi	r2,r2,1
   10750:	e0bffc0d 	sth	r2,-16(fp)
   10754:	e0bffc0f 	ldh	r2,-16(fp)
   10758:	10801010 	cmplti	r2,r2,64
   1075c:	103fd51e 	bne	r2,zero,106b4 <quantization+0x1c>
		value = (value + 0x4000) >> 15;

		Temp[zigzag_table[i]] = (INT16)value;
	}

	for (i = 0; i <= 63; i++)
   10760:	e03ffc0d 	sth	zero,-16(fp)
   10764:	00001406 	br	107b8 <quantization+0x120>
	{
		temp = Temp[i];
   10768:	e0bffc0f 	ldh	r2,-16(fp)
   1076c:	00c000b4 	movhi	r3,2
   10770:	18e5c804 	addi	r3,r3,-26848
   10774:	1085883a 	add	r2,r2,r2
   10778:	1885883a 	add	r2,r3,r2
   1077c:	1080000b 	ldhu	r2,0(r2)
   10780:	10bfffcc 	andi	r2,r2,65535
   10784:	10a0001c 	xori	r2,r2,32768
   10788:	10a00004 	addi	r2,r2,-32768
   1078c:	e0bffe15 	stw	r2,-8(fp)
		WRITE_FIFO(&temp, IN_BASE_4to5, CONTROL_BASE_4to5);
   10790:	e0bffe04 	addi	r2,fp,-8
   10794:	1009883a 	mov	r4,r2
   10798:	014000b4 	movhi	r5,2
   1079c:	29441304 	addi	r5,r5,4172
   107a0:	018000b4 	movhi	r6,2
   107a4:	31840004 	addi	r6,r6,4096
   107a8:	00101f40 	call	101f4 <WRITE_FIFO>
		value = (value + 0x4000) >> 15;

		Temp[zigzag_table[i]] = (INT16)value;
	}

	for (i = 0; i <= 63; i++)
   107ac:	e0bffc0b 	ldhu	r2,-16(fp)
   107b0:	10800044 	addi	r2,r2,1
   107b4:	e0bffc0d 	sth	r2,-16(fp)
   107b8:	e0bffc0f 	ldh	r2,-16(fp)
   107bc:	10801010 	cmplti	r2,r2,64
   107c0:	103fe91e 	bne	r2,zero,10768 <quantization+0xd0>
	{
		temp = Temp[i];
		WRITE_FIFO(&temp, IN_BASE_4to5, CONTROL_BASE_4to5);
	}
}
   107c4:	e037883a 	mov	sp,fp
   107c8:	dfc00117 	ldw	ra,4(sp)
   107cc:	df000017 	ldw	fp,0(sp)
   107d0:	dec00204 	addi	sp,sp,8
   107d4:	f800283a 	ret

000107d8 <main>:

int main(void)
{
   107d8:	defffd04 	addi	sp,sp,-12
   107dc:	dfc00215 	stw	ra,8(sp)
   107e0:	df000115 	stw	fp,4(sp)
   107e4:	df000104 	addi	fp,sp,4
	printf("Starting CPU4\n");
   107e8:	01000074 	movhi	r4,1
   107ec:	21184e04 	addi	r4,r4,24888
   107f0:	0010a900 	call	10a90 <puts>

	delay(1000000);
   107f4:	010003f4 	movhi	r4,15
   107f8:	21109004 	addi	r4,r4,16960
   107fc:	00103000 	call	10300 <delay>
	FIFO_INIT(CONTROL_BASE_4to5);
   10800:	010000b4 	movhi	r4,2
   10804:	21040004 	addi	r4,r4,4096
   10808:	00102c00 	call	102c0 <FIFO_INIT>
	delay(1000000);
   1080c:	010003f4 	movhi	r4,15
   10810:	21109004 	addi	r4,r4,16960
   10814:	00103000 	call	10300 <delay>

	while (1)
	{
		printf("Quantization Started\n");
   10818:	01000074 	movhi	r4,1
   1081c:	21185204 	addi	r4,r4,24904
   10820:	0010a900 	call	10a90 <puts>

		UINT32 count;
		READ_FIFO(&count, OUT_BASE_1to4, CONTROL_BASE_1to4);
   10824:	e13fff04 	addi	r4,fp,-4
   10828:	014000b4 	movhi	r5,2
   1082c:	29441204 	addi	r5,r5,4168
   10830:	01840034 	movhi	r6,4096
   10834:	31841004 	addi	r6,r6,4160
   10838:	00102580 	call	10258 <READ_FIFO>

		printf("Count Done\n");
   1083c:	01000074 	movhi	r4,1
   10840:	21185804 	addi	r4,r4,24928
   10844:	0010a900 	call	10a90 <puts>

		initialize_quantization_tables();
   10848:	00103d80 	call	103d8 <initialize_quantization_tables>

		for (; count > 0; count--)
   1084c:	00000f06 	br	1088c <main+0xb4>
		{
			quantization(ILqt);
   10850:	010000b4 	movhi	r4,2
   10854:	2125f804 	addi	r4,r4,-26656
   10858:	00106980 	call	10698 <quantization>
			quantization(ICqt);
   1085c:	010000b4 	movhi	r4,2
   10860:	21262804 	addi	r4,r4,-26464
   10864:	00106980 	call	10698 <quantization>
			quantization(ICqt);
   10868:	010000b4 	movhi	r4,2
   1086c:	21262804 	addi	r4,r4,-26464
   10870:	00106980 	call	10698 <quantization>

			printf("Quantization Done\n");
   10874:	01000074 	movhi	r4,1
   10878:	21185b04 	addi	r4,r4,24940
   1087c:	0010a900 	call	10a90 <puts>

		printf("Count Done\n");

		initialize_quantization_tables();

		for (; count > 0; count--)
   10880:	e0bfff17 	ldw	r2,-4(fp)
   10884:	10bfffc4 	addi	r2,r2,-1
   10888:	e0bfff15 	stw	r2,-4(fp)
   1088c:	e0bfff17 	ldw	r2,-4(fp)
   10890:	103fef1e 	bne	r2,zero,10850 <main+0x78>
			quantization(ICqt);

			printf("Quantization Done\n");
		}

		printf("\n Done ! \n");
   10894:	01000074 	movhi	r4,1
   10898:	21186004 	addi	r4,r4,24960
   1089c:	0010a900 	call	10a90 <puts>
		// break;
	}
   108a0:	003fdd06 	br	10818 <main+0x40>

000108a4 <__mulsi3>:
   108a4:	0005883a 	mov	r2,zero
   108a8:	20000726 	beq	r4,zero,108c8 <__mulsi3+0x24>
   108ac:	20c0004c 	andi	r3,r4,1
   108b0:	2008d07a 	srli	r4,r4,1
   108b4:	18000126 	beq	r3,zero,108bc <__mulsi3+0x18>
   108b8:	1145883a 	add	r2,r2,r5
   108bc:	294b883a 	add	r5,r5,r5
   108c0:	203ffa1e 	bne	r4,zero,108ac <__mulsi3+0x8>
   108c4:	f800283a 	ret
   108c8:	f800283a 	ret

000108cc <memcpy>:
   108cc:	defffb04 	addi	sp,sp,-20
   108d0:	dc000015 	stw	r16,0(sp)
   108d4:	dfc00415 	stw	ra,16(sp)
   108d8:	dcc00315 	stw	r19,12(sp)
   108dc:	dc800215 	stw	r18,8(sp)
   108e0:	dc400115 	stw	r17,4(sp)
   108e4:	00c003c4 	movi	r3,15
   108e8:	2021883a 	mov	r16,r4
   108ec:	3005883a 	mov	r2,r6
   108f0:	1980032e 	bgeu	r3,r6,10900 <memcpy+0x34>
   108f4:	2906b03a 	or	r3,r5,r4
   108f8:	18c000cc 	andi	r3,r3,3
   108fc:	18001026 	beq	r3,zero,10940 <memcpy+0x74>
   10900:	8007883a 	mov	r3,r16
   10904:	288f883a 	add	r7,r5,r2
   10908:	10000526 	beq	r2,zero,10920 <memcpy+0x54>
   1090c:	29800003 	ldbu	r6,0(r5)
   10910:	18c00044 	addi	r3,r3,1
   10914:	29400044 	addi	r5,r5,1
   10918:	19bfffc5 	stb	r6,-1(r3)
   1091c:	29fffb1e 	bne	r5,r7,1090c <memcpy+0x40>
   10920:	8005883a 	mov	r2,r16
   10924:	dfc00417 	ldw	ra,16(sp)
   10928:	dcc00317 	ldw	r19,12(sp)
   1092c:	dc800217 	ldw	r18,8(sp)
   10930:	dc400117 	ldw	r17,4(sp)
   10934:	dc000017 	ldw	r16,0(sp)
   10938:	dec00504 	addi	sp,sp,20
   1093c:	f800283a 	ret
   10940:	32bffc04 	addi	r10,r6,-16
   10944:	5014d13a 	srli	r10,r10,4
   10948:	20800404 	addi	r2,r4,16
   1094c:	2007883a 	mov	r3,r4
   10950:	5008913a 	slli	r4,r10,4
   10954:	280f883a 	mov	r7,r5
   10958:	1105883a 	add	r2,r2,r4
   1095c:	3a000017 	ldw	r8,0(r7)
   10960:	18c00404 	addi	r3,r3,16
   10964:	39c00404 	addi	r7,r7,16
   10968:	1a3ffc15 	stw	r8,-16(r3)
   1096c:	3a3ffd17 	ldw	r8,-12(r7)
   10970:	1a3ffd15 	stw	r8,-12(r3)
   10974:	3a3ffe17 	ldw	r8,-8(r7)
   10978:	1a3ffe15 	stw	r8,-8(r3)
   1097c:	3a3fff17 	ldw	r8,-4(r7)
   10980:	1a3fff15 	stw	r8,-4(r3)
   10984:	18bff51e 	bne	r3,r2,1095c <memcpy+0x90>
   10988:	52800044 	addi	r10,r10,1
   1098c:	5014913a 	slli	r10,r10,4
   10990:	308003cc 	andi	r2,r6,15
   10994:	010000c4 	movi	r4,3
   10998:	8287883a 	add	r3,r16,r10
   1099c:	2a95883a 	add	r10,r5,r10
   109a0:	2080182e 	bgeu	r4,r2,10a04 <memcpy+0x138>
   109a4:	147fff04 	addi	r17,r2,-4
   109a8:	8808d0ba 	srli	r4,r17,2
   109ac:	1a400104 	addi	r9,r3,4
   109b0:	180d883a 	mov	r6,r3
   109b4:	2105883a 	add	r2,r4,r4
   109b8:	1085883a 	add	r2,r2,r2
   109bc:	4893883a 	add	r9,r9,r2
   109c0:	500f883a 	mov	r7,r10
   109c4:	3a000017 	ldw	r8,0(r7)
   109c8:	31800104 	addi	r6,r6,4
   109cc:	39c00104 	addi	r7,r7,4
   109d0:	323fff15 	stw	r8,-4(r6)
   109d4:	327ffb1e 	bne	r6,r9,109c4 <memcpy+0xf8>
   109d8:	20800044 	addi	r2,r4,1
   109dc:	1085883a 	add	r2,r2,r2
   109e0:	1085883a 	add	r2,r2,r2
   109e4:	017fff04 	movi	r5,-4
   109e8:	18a5883a 	add	r18,r3,r2
   109ec:	50a7883a 	add	r19,r10,r2
   109f0:	00108a40 	call	108a4 <__mulsi3>
   109f4:	1445883a 	add	r2,r2,r17
   109f8:	980b883a 	mov	r5,r19
   109fc:	9007883a 	mov	r3,r18
   10a00:	003fc006 	br	10904 <memcpy+0x38>
   10a04:	500b883a 	mov	r5,r10
   10a08:	003fbe06 	br	10904 <memcpy+0x38>

00010a0c <_puts_r>:
   10a0c:	defff604 	addi	sp,sp,-40
   10a10:	dc400815 	stw	r17,32(sp)
   10a14:	2023883a 	mov	r17,r4
   10a18:	2809883a 	mov	r4,r5
   10a1c:	dc000715 	stw	r16,28(sp)
   10a20:	dfc00915 	stw	ra,36(sp)
   10a24:	2821883a 	mov	r16,r5
   10a28:	0010aa40 	call	10aa4 <strlen>
   10a2c:	10c00044 	addi	r3,r2,1
   10a30:	d8800115 	stw	r2,4(sp)
   10a34:	89400217 	ldw	r5,8(r17)
   10a38:	00800074 	movhi	r2,1
   10a3c:	10986304 	addi	r2,r2,24972
   10a40:	d8800215 	stw	r2,8(sp)
   10a44:	00800044 	movi	r2,1
   10a48:	d8800315 	stw	r2,12(sp)
   10a4c:	8809883a 	mov	r4,r17
   10a50:	00800084 	movi	r2,2
   10a54:	d9800404 	addi	r6,sp,16
   10a58:	dc000015 	stw	r16,0(sp)
   10a5c:	d8c00615 	stw	r3,24(sp)
   10a60:	dec00415 	stw	sp,16(sp)
   10a64:	d8800515 	stw	r2,20(sp)
   10a68:	0010b300 	call	10b30 <__sfvwrite_r>
   10a6c:	1000061e 	bne	r2,zero,10a88 <_puts_r+0x7c>
   10a70:	00800284 	movi	r2,10
   10a74:	dfc00917 	ldw	ra,36(sp)
   10a78:	dc400817 	ldw	r17,32(sp)
   10a7c:	dc000717 	ldw	r16,28(sp)
   10a80:	dec00a04 	addi	sp,sp,40
   10a84:	f800283a 	ret
   10a88:	00bfffc4 	movi	r2,-1
   10a8c:	003ff906 	br	10a74 <_puts_r+0x68>

00010a90 <puts>:
   10a90:	00800074 	movhi	r2,1
   10a94:	109f0504 	addi	r2,r2,31764
   10a98:	200b883a 	mov	r5,r4
   10a9c:	11000017 	ldw	r4,0(r2)
   10aa0:	0010a0c1 	jmpi	10a0c <_puts_r>

00010aa4 <strlen>:
   10aa4:	208000cc 	andi	r2,r4,3
   10aa8:	10001f1e 	bne	r2,zero,10b28 <strlen+0x84>
   10aac:	20800017 	ldw	r2,0(r4)
   10ab0:	01ffbff4 	movhi	r7,65279
   10ab4:	39ffbfc4 	addi	r7,r7,-257
   10ab8:	01a02074 	movhi	r6,32897
   10abc:	31a02004 	addi	r6,r6,-32640
   10ac0:	11c7883a 	add	r3,r2,r7
   10ac4:	0084303a 	nor	r2,zero,r2
   10ac8:	1886703a 	and	r3,r3,r2
   10acc:	1986703a 	and	r3,r3,r6
   10ad0:	2005883a 	mov	r2,r4
   10ad4:	1800101e 	bne	r3,zero,10b18 <strlen+0x74>
   10ad8:	10800104 	addi	r2,r2,4
   10adc:	10c00017 	ldw	r3,0(r2)
   10ae0:	19cb883a 	add	r5,r3,r7
   10ae4:	00c6303a 	nor	r3,zero,r3
   10ae8:	28c6703a 	and	r3,r5,r3
   10aec:	1986703a 	and	r3,r3,r6
   10af0:	1800091e 	bne	r3,zero,10b18 <strlen+0x74>
   10af4:	10800104 	addi	r2,r2,4
   10af8:	10c00017 	ldw	r3,0(r2)
   10afc:	19cb883a 	add	r5,r3,r7
   10b00:	00c6303a 	nor	r3,zero,r3
   10b04:	28c6703a 	and	r3,r5,r3
   10b08:	1986703a 	and	r3,r3,r6
   10b0c:	183ff226 	beq	r3,zero,10ad8 <strlen+0x34>
   10b10:	00000106 	br	10b18 <strlen+0x74>
   10b14:	10800044 	addi	r2,r2,1
   10b18:	10c00007 	ldb	r3,0(r2)
   10b1c:	183ffd1e 	bne	r3,zero,10b14 <strlen+0x70>
   10b20:	1105c83a 	sub	r2,r2,r4
   10b24:	f800283a 	ret
   10b28:	2005883a 	mov	r2,r4
   10b2c:	003ffa06 	br	10b18 <strlen+0x74>

00010b30 <__sfvwrite_r>:
   10b30:	30800217 	ldw	r2,8(r6)
   10b34:	defff504 	addi	sp,sp,-44
   10b38:	dd400615 	stw	r21,24(sp)
   10b3c:	dd000515 	stw	r20,20(sp)
   10b40:	dc000115 	stw	r16,4(sp)
   10b44:	dfc00a15 	stw	ra,40(sp)
   10b48:	df000915 	stw	fp,36(sp)
   10b4c:	ddc00815 	stw	r23,32(sp)
   10b50:	dd800715 	stw	r22,28(sp)
   10b54:	dcc00415 	stw	r19,16(sp)
   10b58:	dc800315 	stw	r18,12(sp)
   10b5c:	dc400215 	stw	r17,8(sp)
   10b60:	3029883a 	mov	r20,r6
   10b64:	202b883a 	mov	r21,r4
   10b68:	2821883a 	mov	r16,r5
   10b6c:	10002126 	beq	r2,zero,10bf4 <__sfvwrite_r+0xc4>
   10b70:	2880030b 	ldhu	r2,12(r5)
   10b74:	10c0020c 	andi	r3,r2,8
   10b78:	18ffffcc 	andi	r3,r3,65535
   10b7c:	18e0001c 	xori	r3,r3,32768
   10b80:	18e00004 	addi	r3,r3,-32768
   10b84:	18002826 	beq	r3,zero,10c28 <__sfvwrite_r+0xf8>
   10b88:	28c00417 	ldw	r3,16(r5)
   10b8c:	18002626 	beq	r3,zero,10c28 <__sfvwrite_r+0xf8>
   10b90:	10c0008c 	andi	r3,r2,2
   10b94:	18ffffcc 	andi	r3,r3,65535
   10b98:	18e0001c 	xori	r3,r3,32768
   10b9c:	18e00004 	addi	r3,r3,-32768
   10ba0:	a4400017 	ldw	r17,0(r20)
   10ba4:	18002b26 	beq	r3,zero,10c54 <__sfvwrite_r+0x124>
   10ba8:	0027883a 	mov	r19,zero
   10bac:	0025883a 	mov	r18,zero
   10bb0:	05810004 	movi	r22,1024
   10bb4:	980d883a 	mov	r6,r19
   10bb8:	a809883a 	mov	r4,r21
   10bbc:	90004f26 	beq	r18,zero,10cfc <__sfvwrite_r+0x1cc>
   10bc0:	900f883a 	mov	r7,r18
   10bc4:	81400717 	ldw	r5,28(r16)
   10bc8:	b480012e 	bgeu	r22,r18,10bd0 <__sfvwrite_r+0xa0>
   10bcc:	01c10004 	movi	r7,1024
   10bd0:	80800917 	ldw	r2,36(r16)
   10bd4:	103ee83a 	callr	r2
   10bd8:	0080540e 	bge	zero,r2,10d2c <__sfvwrite_r+0x1fc>
   10bdc:	a0c00217 	ldw	r3,8(r20)
   10be0:	98a7883a 	add	r19,r19,r2
   10be4:	90a5c83a 	sub	r18,r18,r2
   10be8:	1885c83a 	sub	r2,r3,r2
   10bec:	a0800215 	stw	r2,8(r20)
   10bf0:	103ff01e 	bne	r2,zero,10bb4 <__sfvwrite_r+0x84>
   10bf4:	0005883a 	mov	r2,zero
   10bf8:	dfc00a17 	ldw	ra,40(sp)
   10bfc:	df000917 	ldw	fp,36(sp)
   10c00:	ddc00817 	ldw	r23,32(sp)
   10c04:	dd800717 	ldw	r22,28(sp)
   10c08:	dd400617 	ldw	r21,24(sp)
   10c0c:	dd000517 	ldw	r20,20(sp)
   10c10:	dcc00417 	ldw	r19,16(sp)
   10c14:	dc800317 	ldw	r18,12(sp)
   10c18:	dc400217 	ldw	r17,8(sp)
   10c1c:	dc000117 	ldw	r16,4(sp)
   10c20:	dec00b04 	addi	sp,sp,44
   10c24:	f800283a 	ret
   10c28:	a809883a 	mov	r4,r21
   10c2c:	800b883a 	mov	r5,r16
   10c30:	001207c0 	call	1207c <__swsetup_r>
   10c34:	1000f01e 	bne	r2,zero,10ff8 <__sfvwrite_r+0x4c8>
   10c38:	8080030b 	ldhu	r2,12(r16)
   10c3c:	a4400017 	ldw	r17,0(r20)
   10c40:	10c0008c 	andi	r3,r2,2
   10c44:	18ffffcc 	andi	r3,r3,65535
   10c48:	18e0001c 	xori	r3,r3,32768
   10c4c:	18e00004 	addi	r3,r3,-32768
   10c50:	183fd51e 	bne	r3,zero,10ba8 <__sfvwrite_r+0x78>
   10c54:	10c0004c 	andi	r3,r2,1
   10c58:	002d883a 	mov	r22,zero
   10c5c:	1800381e 	bne	r3,zero,10d40 <__sfvwrite_r+0x210>
   10c60:	0025883a 	mov	r18,zero
   10c64:	90002126 	beq	r18,zero,10cec <__sfvwrite_r+0x1bc>
   10c68:	10c0800c 	andi	r3,r2,512
   10c6c:	18ffffcc 	andi	r3,r3,65535
   10c70:	18e0001c 	xori	r3,r3,32768
   10c74:	18e00004 	addi	r3,r3,-32768
   10c78:	84c00217 	ldw	r19,8(r16)
   10c7c:	18006b26 	beq	r3,zero,10e2c <__sfvwrite_r+0x2fc>
   10c80:	980f883a 	mov	r7,r19
   10c84:	94c08636 	bltu	r18,r19,10ea0 <__sfvwrite_r+0x370>
   10c88:	10c1200c 	andi	r3,r2,1152
   10c8c:	18009f1e 	bne	r3,zero,10f0c <__sfvwrite_r+0x3dc>
   10c90:	81000017 	ldw	r4,0(r16)
   10c94:	982f883a 	mov	r23,r19
   10c98:	9039883a 	mov	fp,r18
   10c9c:	9027883a 	mov	r19,r18
   10ca0:	380d883a 	mov	r6,r7
   10ca4:	b00b883a 	mov	r5,r22
   10ca8:	d9c00015 	stw	r7,0(sp)
   10cac:	00118900 	call	11890 <memmove>
   10cb0:	d9c00017 	ldw	r7,0(sp)
   10cb4:	81000217 	ldw	r4,8(r16)
   10cb8:	80800017 	ldw	r2,0(r16)
   10cbc:	25efc83a 	sub	r23,r4,r23
   10cc0:	11cf883a 	add	r7,r2,r7
   10cc4:	85c00215 	stw	r23,8(r16)
   10cc8:	81c00015 	stw	r7,0(r16)
   10ccc:	a0800217 	ldw	r2,8(r20)
   10cd0:	b72d883a 	add	r22,r22,fp
   10cd4:	9725c83a 	sub	r18,r18,fp
   10cd8:	14e7c83a 	sub	r19,r2,r19
   10cdc:	a4c00215 	stw	r19,8(r20)
   10ce0:	983fc426 	beq	r19,zero,10bf4 <__sfvwrite_r+0xc4>
   10ce4:	8080030b 	ldhu	r2,12(r16)
   10ce8:	903fdf1e 	bne	r18,zero,10c68 <__sfvwrite_r+0x138>
   10cec:	8d800017 	ldw	r22,0(r17)
   10cf0:	8c800117 	ldw	r18,4(r17)
   10cf4:	8c400204 	addi	r17,r17,8
   10cf8:	003fda06 	br	10c64 <__sfvwrite_r+0x134>
   10cfc:	8cc00017 	ldw	r19,0(r17)
   10d00:	8c800117 	ldw	r18,4(r17)
   10d04:	8c400204 	addi	r17,r17,8
   10d08:	003faa06 	br	10bb4 <__sfvwrite_r+0x84>
   10d0c:	0011a1c0 	call	11a1c <_realloc_r>
   10d10:	102f883a 	mov	r23,r2
   10d14:	10009f1e 	bne	r2,zero,10f94 <__sfvwrite_r+0x464>
   10d18:	81400417 	ldw	r5,16(r16)
   10d1c:	a809883a 	mov	r4,r21
   10d20:	00128300 	call	12830 <_free_r>
   10d24:	00800304 	movi	r2,12
   10d28:	a8800015 	stw	r2,0(r21)
   10d2c:	80c0030b 	ldhu	r3,12(r16)
   10d30:	00bfffc4 	movi	r2,-1
   10d34:	18c01014 	ori	r3,r3,64
   10d38:	80c0030d 	sth	r3,12(r16)
   10d3c:	003fae06 	br	10bf8 <__sfvwrite_r+0xc8>
   10d40:	0007883a 	mov	r3,zero
   10d44:	0039883a 	mov	fp,zero
   10d48:	0025883a 	mov	r18,zero
   10d4c:	90001e26 	beq	r18,zero,10dc8 <__sfvwrite_r+0x298>
   10d50:	18006526 	beq	r3,zero,10ee8 <__sfvwrite_r+0x3b8>
   10d54:	b02f883a 	mov	r23,r22
   10d58:	9580012e 	bgeu	r18,r22,10d60 <__sfvwrite_r+0x230>
   10d5c:	902f883a 	mov	r23,r18
   10d60:	81000017 	ldw	r4,0(r16)
   10d64:	80800417 	ldw	r2,16(r16)
   10d68:	84c00217 	ldw	r19,8(r16)
   10d6c:	81c00517 	ldw	r7,20(r16)
   10d70:	1100022e 	bgeu	r2,r4,10d7c <__sfvwrite_r+0x24c>
   10d74:	99e7883a 	add	r19,r19,r7
   10d78:	9dc01816 	blt	r19,r23,10ddc <__sfvwrite_r+0x2ac>
   10d7c:	b9c03b16 	blt	r23,r7,10e6c <__sfvwrite_r+0x33c>
   10d80:	80800917 	ldw	r2,36(r16)
   10d84:	81400717 	ldw	r5,28(r16)
   10d88:	a809883a 	mov	r4,r21
   10d8c:	d8c00015 	stw	r3,0(sp)
   10d90:	e00d883a 	mov	r6,fp
   10d94:	103ee83a 	callr	r2
   10d98:	1027883a 	mov	r19,r2
   10d9c:	d8c00017 	ldw	r3,0(sp)
   10da0:	00bfe20e 	bge	zero,r2,10d2c <__sfvwrite_r+0x1fc>
   10da4:	b4edc83a 	sub	r22,r22,r19
   10da8:	b0001a26 	beq	r22,zero,10e14 <__sfvwrite_r+0x2e4>
   10dac:	a0800217 	ldw	r2,8(r20)
   10db0:	e4f9883a 	add	fp,fp,r19
   10db4:	94e5c83a 	sub	r18,r18,r19
   10db8:	14e7c83a 	sub	r19,r2,r19
   10dbc:	a4c00215 	stw	r19,8(r20)
   10dc0:	983f8c26 	beq	r19,zero,10bf4 <__sfvwrite_r+0xc4>
   10dc4:	903fe21e 	bne	r18,zero,10d50 <__sfvwrite_r+0x220>
   10dc8:	8f000017 	ldw	fp,0(r17)
   10dcc:	8c800117 	ldw	r18,4(r17)
   10dd0:	0007883a 	mov	r3,zero
   10dd4:	8c400204 	addi	r17,r17,8
   10dd8:	003fdc06 	br	10d4c <__sfvwrite_r+0x21c>
   10ddc:	e00b883a 	mov	r5,fp
   10de0:	980d883a 	mov	r6,r19
   10de4:	d8c00015 	stw	r3,0(sp)
   10de8:	00118900 	call	11890 <memmove>
   10dec:	80800017 	ldw	r2,0(r16)
   10df0:	a809883a 	mov	r4,r21
   10df4:	800b883a 	mov	r5,r16
   10df8:	14c5883a 	add	r2,r2,r19
   10dfc:	80800015 	stw	r2,0(r16)
   10e00:	00121f00 	call	121f0 <_fflush_r>
   10e04:	d8c00017 	ldw	r3,0(sp)
   10e08:	103fc81e 	bne	r2,zero,10d2c <__sfvwrite_r+0x1fc>
   10e0c:	b4edc83a 	sub	r22,r22,r19
   10e10:	b03fe61e 	bne	r22,zero,10dac <__sfvwrite_r+0x27c>
   10e14:	a809883a 	mov	r4,r21
   10e18:	800b883a 	mov	r5,r16
   10e1c:	00121f00 	call	121f0 <_fflush_r>
   10e20:	103fc21e 	bne	r2,zero,10d2c <__sfvwrite_r+0x1fc>
   10e24:	0007883a 	mov	r3,zero
   10e28:	003fe006 	br	10dac <__sfvwrite_r+0x27c>
   10e2c:	81000017 	ldw	r4,0(r16)
   10e30:	80800417 	ldw	r2,16(r16)
   10e34:	1100022e 	bgeu	r2,r4,10e40 <__sfvwrite_r+0x310>
   10e38:	9839883a 	mov	fp,r19
   10e3c:	9c806036 	bltu	r19,r18,10fc0 <__sfvwrite_r+0x490>
   10e40:	81c00517 	ldw	r7,20(r16)
   10e44:	91c01c36 	bltu	r18,r7,10eb8 <__sfvwrite_r+0x388>
   10e48:	80800917 	ldw	r2,36(r16)
   10e4c:	81400717 	ldw	r5,28(r16)
   10e50:	a809883a 	mov	r4,r21
   10e54:	b00d883a 	mov	r6,r22
   10e58:	103ee83a 	callr	r2
   10e5c:	1027883a 	mov	r19,r2
   10e60:	00bfb20e 	bge	zero,r2,10d2c <__sfvwrite_r+0x1fc>
   10e64:	1039883a 	mov	fp,r2
   10e68:	003f9806 	br	10ccc <__sfvwrite_r+0x19c>
   10e6c:	b80d883a 	mov	r6,r23
   10e70:	e00b883a 	mov	r5,fp
   10e74:	d8c00015 	stw	r3,0(sp)
   10e78:	00118900 	call	11890 <memmove>
   10e7c:	80800217 	ldw	r2,8(r16)
   10e80:	81000017 	ldw	r4,0(r16)
   10e84:	b827883a 	mov	r19,r23
   10e88:	15c5c83a 	sub	r2,r2,r23
   10e8c:	25ef883a 	add	r23,r4,r23
   10e90:	80800215 	stw	r2,8(r16)
   10e94:	85c00015 	stw	r23,0(r16)
   10e98:	d8c00017 	ldw	r3,0(sp)
   10e9c:	003fc106 	br	10da4 <__sfvwrite_r+0x274>
   10ea0:	81000017 	ldw	r4,0(r16)
   10ea4:	902f883a 	mov	r23,r18
   10ea8:	9039883a 	mov	fp,r18
   10eac:	9027883a 	mov	r19,r18
   10eb0:	900f883a 	mov	r7,r18
   10eb4:	003f7a06 	br	10ca0 <__sfvwrite_r+0x170>
   10eb8:	b00b883a 	mov	r5,r22
   10ebc:	900d883a 	mov	r6,r18
   10ec0:	00118900 	call	11890 <memmove>
   10ec4:	80c00217 	ldw	r3,8(r16)
   10ec8:	80800017 	ldw	r2,0(r16)
   10ecc:	9027883a 	mov	r19,r18
   10ed0:	1c87c83a 	sub	r3,r3,r18
   10ed4:	1485883a 	add	r2,r2,r18
   10ed8:	80c00215 	stw	r3,8(r16)
   10edc:	80800015 	stw	r2,0(r16)
   10ee0:	9039883a 	mov	fp,r18
   10ee4:	003f7906 	br	10ccc <__sfvwrite_r+0x19c>
   10ee8:	e009883a 	mov	r4,fp
   10eec:	01400284 	movi	r5,10
   10ef0:	900d883a 	mov	r6,r18
   10ef4:	00117980 	call	11798 <memchr>
   10ef8:	10003c26 	beq	r2,zero,10fec <__sfvwrite_r+0x4bc>
   10efc:	15800044 	addi	r22,r2,1
   10f00:	b72dc83a 	sub	r22,r22,fp
   10f04:	00c00044 	movi	r3,1
   10f08:	003f9206 	br	10d54 <__sfvwrite_r+0x224>
   10f0c:	81000517 	ldw	r4,20(r16)
   10f10:	81400417 	ldw	r5,16(r16)
   10f14:	80c00017 	ldw	r3,0(r16)
   10f18:	210d883a 	add	r6,r4,r4
   10f1c:	3109883a 	add	r4,r6,r4
   10f20:	2026d7fa 	srli	r19,r4,31
   10f24:	1979c83a 	sub	fp,r3,r5
   10f28:	e1800044 	addi	r6,fp,1
   10f2c:	9909883a 	add	r4,r19,r4
   10f30:	2027d07a 	srai	r19,r4,1
   10f34:	3489883a 	add	r4,r6,r18
   10f38:	980d883a 	mov	r6,r19
   10f3c:	9900022e 	bgeu	r19,r4,10f48 <__sfvwrite_r+0x418>
   10f40:	2027883a 	mov	r19,r4
   10f44:	200d883a 	mov	r6,r4
   10f48:	1081000c 	andi	r2,r2,1024
   10f4c:	10bfffcc 	andi	r2,r2,65535
   10f50:	10a0001c 	xori	r2,r2,32768
   10f54:	10a00004 	addi	r2,r2,-32768
   10f58:	a809883a 	mov	r4,r21
   10f5c:	103f6b26 	beq	r2,zero,10d0c <__sfvwrite_r+0x1dc>
   10f60:	300b883a 	mov	r5,r6
   10f64:	00110140 	call	11014 <_malloc_r>
   10f68:	102f883a 	mov	r23,r2
   10f6c:	103f6d26 	beq	r2,zero,10d24 <__sfvwrite_r+0x1f4>
   10f70:	81400417 	ldw	r5,16(r16)
   10f74:	1009883a 	mov	r4,r2
   10f78:	e00d883a 	mov	r6,fp
   10f7c:	00108cc0 	call	108cc <memcpy>
   10f80:	8080030b 	ldhu	r2,12(r16)
   10f84:	00fedfc4 	movi	r3,-1153
   10f88:	10c4703a 	and	r2,r2,r3
   10f8c:	10802014 	ori	r2,r2,128
   10f90:	8080030d 	sth	r2,12(r16)
   10f94:	bf09883a 	add	r4,r23,fp
   10f98:	9f07c83a 	sub	r3,r19,fp
   10f9c:	85c00415 	stw	r23,16(r16)
   10fa0:	84c00515 	stw	r19,20(r16)
   10fa4:	81000015 	stw	r4,0(r16)
   10fa8:	902f883a 	mov	r23,r18
   10fac:	80c00215 	stw	r3,8(r16)
   10fb0:	9039883a 	mov	fp,r18
   10fb4:	9027883a 	mov	r19,r18
   10fb8:	900f883a 	mov	r7,r18
   10fbc:	003f3806 	br	10ca0 <__sfvwrite_r+0x170>
   10fc0:	b00b883a 	mov	r5,r22
   10fc4:	980d883a 	mov	r6,r19
   10fc8:	00118900 	call	11890 <memmove>
   10fcc:	80800017 	ldw	r2,0(r16)
   10fd0:	a809883a 	mov	r4,r21
   10fd4:	800b883a 	mov	r5,r16
   10fd8:	14c5883a 	add	r2,r2,r19
   10fdc:	80800015 	stw	r2,0(r16)
   10fe0:	00121f00 	call	121f0 <_fflush_r>
   10fe4:	103f3926 	beq	r2,zero,10ccc <__sfvwrite_r+0x19c>
   10fe8:	003f5006 	br	10d2c <__sfvwrite_r+0x1fc>
   10fec:	95800044 	addi	r22,r18,1
   10ff0:	00c00044 	movi	r3,1
   10ff4:	003f5706 	br	10d54 <__sfvwrite_r+0x224>
   10ff8:	80c0030b 	ldhu	r3,12(r16)
   10ffc:	00bfffc4 	movi	r2,-1
   11000:	18c01014 	ori	r3,r3,64
   11004:	80c0030d 	sth	r3,12(r16)
   11008:	00c00244 	movi	r3,9
   1100c:	a8c00015 	stw	r3,0(r21)
   11010:	003ef906 	br	10bf8 <__sfvwrite_r+0xc8>

00011014 <_malloc_r>:
   11014:	defff604 	addi	sp,sp,-40
   11018:	dc800215 	stw	r18,8(sp)
   1101c:	dfc00915 	stw	ra,36(sp)
   11020:	df000815 	stw	fp,32(sp)
   11024:	ddc00715 	stw	r23,28(sp)
   11028:	dd800615 	stw	r22,24(sp)
   1102c:	dd400515 	stw	r21,20(sp)
   11030:	dd000415 	stw	r20,16(sp)
   11034:	dcc00315 	stw	r19,12(sp)
   11038:	dc400115 	stw	r17,4(sp)
   1103c:	dc000015 	stw	r16,0(sp)
   11040:	288002c4 	addi	r2,r5,11
   11044:	00c00584 	movi	r3,22
   11048:	2025883a 	mov	r18,r4
   1104c:	18802b2e 	bgeu	r3,r2,110fc <_malloc_r+0xe8>
   11050:	047ffe04 	movi	r17,-8
   11054:	1462703a 	and	r17,r2,r17
   11058:	88002a16 	blt	r17,zero,11104 <_malloc_r+0xf0>
   1105c:	89402936 	bltu	r17,r5,11104 <_malloc_r+0xf0>
   11060:	9009883a 	mov	r4,r18
   11064:	00139ac0 	call	139ac <__malloc_lock>
   11068:	00807dc4 	movi	r2,503
   1106c:	14402936 	bltu	r2,r17,11114 <_malloc_r+0x100>
   11070:	8808d0fa 	srli	r4,r17,3
   11074:	04c00074 	movhi	r19,1
   11078:	9cd98004 	addi	r19,r19,26112
   1107c:	2105883a 	add	r2,r4,r4
   11080:	1085883a 	add	r2,r2,r2
   11084:	1085883a 	add	r2,r2,r2
   11088:	9885883a 	add	r2,r19,r2
   1108c:	14000317 	ldw	r16,12(r2)
   11090:	80815526 	beq	r16,r2,115e8 <_malloc_r+0x5d4>
   11094:	81000117 	ldw	r4,4(r16)
   11098:	00bfff04 	movi	r2,-4
   1109c:	80c00317 	ldw	r3,12(r16)
   110a0:	2084703a 	and	r2,r4,r2
   110a4:	8085883a 	add	r2,r16,r2
   110a8:	11800117 	ldw	r6,4(r2)
   110ac:	81400217 	ldw	r5,8(r16)
   110b0:	9009883a 	mov	r4,r18
   110b4:	31800054 	ori	r6,r6,1
   110b8:	11800115 	stw	r6,4(r2)
   110bc:	28c00315 	stw	r3,12(r5)
   110c0:	19400215 	stw	r5,8(r3)
   110c4:	00139cc0 	call	139cc <__malloc_unlock>
   110c8:	80800204 	addi	r2,r16,8
   110cc:	dfc00917 	ldw	ra,36(sp)
   110d0:	df000817 	ldw	fp,32(sp)
   110d4:	ddc00717 	ldw	r23,28(sp)
   110d8:	dd800617 	ldw	r22,24(sp)
   110dc:	dd400517 	ldw	r21,20(sp)
   110e0:	dd000417 	ldw	r20,16(sp)
   110e4:	dcc00317 	ldw	r19,12(sp)
   110e8:	dc800217 	ldw	r18,8(sp)
   110ec:	dc400117 	ldw	r17,4(sp)
   110f0:	dc000017 	ldw	r16,0(sp)
   110f4:	dec00a04 	addi	sp,sp,40
   110f8:	f800283a 	ret
   110fc:	04400404 	movi	r17,16
   11100:	897fd72e 	bgeu	r17,r5,11060 <_malloc_r+0x4c>
   11104:	00800304 	movi	r2,12
   11108:	90800015 	stw	r2,0(r18)
   1110c:	0005883a 	mov	r2,zero
   11110:	003fee06 	br	110cc <_malloc_r+0xb8>
   11114:	8808d27a 	srli	r4,r17,9
   11118:	20007126 	beq	r4,zero,112e0 <_malloc_r+0x2cc>
   1111c:	00800104 	movi	r2,4
   11120:	1100eb36 	bltu	r2,r4,114d0 <_malloc_r+0x4bc>
   11124:	8808d1ba 	srli	r4,r17,6
   11128:	21000e04 	addi	r4,r4,56
   1112c:	210b883a 	add	r5,r4,r4
   11130:	294b883a 	add	r5,r5,r5
   11134:	294b883a 	add	r5,r5,r5
   11138:	04c00074 	movhi	r19,1
   1113c:	9cd98004 	addi	r19,r19,26112
   11140:	994b883a 	add	r5,r19,r5
   11144:	2c000317 	ldw	r16,12(r5)
   11148:	2c000e26 	beq	r5,r16,11184 <_malloc_r+0x170>
   1114c:	80c00117 	ldw	r3,4(r16)
   11150:	01ffff04 	movi	r7,-4
   11154:	018003c4 	movi	r6,15
   11158:	19c6703a 	and	r3,r3,r7
   1115c:	1c45c83a 	sub	r2,r3,r17
   11160:	30800716 	blt	r6,r2,11180 <_malloc_r+0x16c>
   11164:	1000610e 	bge	r2,zero,112ec <_malloc_r+0x2d8>
   11168:	84000317 	ldw	r16,12(r16)
   1116c:	2c000526 	beq	r5,r16,11184 <_malloc_r+0x170>
   11170:	80c00117 	ldw	r3,4(r16)
   11174:	19c6703a 	and	r3,r3,r7
   11178:	1c45c83a 	sub	r2,r3,r17
   1117c:	30bff90e 	bge	r6,r2,11164 <_malloc_r+0x150>
   11180:	213fffc4 	addi	r4,r4,-1
   11184:	21000044 	addi	r4,r4,1
   11188:	9c000417 	ldw	r16,16(r19)
   1118c:	00c00074 	movhi	r3,1
   11190:	18d98004 	addi	r3,r3,26112
   11194:	1a400204 	addi	r9,r3,8
   11198:	8240ff26 	beq	r16,r9,11598 <_malloc_r+0x584>
   1119c:	81400117 	ldw	r5,4(r16)
   111a0:	00bfff04 	movi	r2,-4
   111a4:	018003c4 	movi	r6,15
   111a8:	2884703a 	and	r2,r5,r2
   111ac:	144bc83a 	sub	r5,r2,r17
   111b0:	3140ea16 	blt	r6,r5,1155c <_malloc_r+0x548>
   111b4:	1a400515 	stw	r9,20(r3)
   111b8:	1a400415 	stw	r9,16(r3)
   111bc:	2800570e 	bge	r5,zero,1131c <_malloc_r+0x308>
   111c0:	01407fc4 	movi	r5,511
   111c4:	2880ca36 	bltu	r5,r2,114f0 <_malloc_r+0x4dc>
   111c8:	1004d0fa 	srli	r2,r2,3
   111cc:	02000044 	movi	r8,1
   111d0:	19c00117 	ldw	r7,4(r3)
   111d4:	108b883a 	add	r5,r2,r2
   111d8:	294b883a 	add	r5,r5,r5
   111dc:	1005d0ba 	srai	r2,r2,2
   111e0:	294b883a 	add	r5,r5,r5
   111e4:	28cb883a 	add	r5,r5,r3
   111e8:	29800217 	ldw	r6,8(r5)
   111ec:	4084983a 	sll	r2,r8,r2
   111f0:	81400315 	stw	r5,12(r16)
   111f4:	81800215 	stw	r6,8(r16)
   111f8:	11c4b03a 	or	r2,r2,r7
   111fc:	18800115 	stw	r2,4(r3)
   11200:	2c000215 	stw	r16,8(r5)
   11204:	34000315 	stw	r16,12(r6)
   11208:	200bd0ba 	srai	r5,r4,2
   1120c:	00c00044 	movi	r3,1
   11210:	194a983a 	sll	r5,r3,r5
   11214:	11404936 	bltu	r2,r5,1133c <_malloc_r+0x328>
   11218:	1146703a 	and	r3,r2,r5
   1121c:	18000a1e 	bne	r3,zero,11248 <_malloc_r+0x234>
   11220:	00ffff04 	movi	r3,-4
   11224:	294b883a 	add	r5,r5,r5
   11228:	20c8703a 	and	r4,r4,r3
   1122c:	1146703a 	and	r3,r2,r5
   11230:	21000104 	addi	r4,r4,4
   11234:	1800041e 	bne	r3,zero,11248 <_malloc_r+0x234>
   11238:	294b883a 	add	r5,r5,r5
   1123c:	1146703a 	and	r3,r2,r5
   11240:	21000104 	addi	r4,r4,4
   11244:	183ffc26 	beq	r3,zero,11238 <_malloc_r+0x224>
   11248:	023fff04 	movi	r8,-4
   1124c:	01c003c4 	movi	r7,15
   11250:	2105883a 	add	r2,r4,r4
   11254:	1085883a 	add	r2,r2,r2
   11258:	1085883a 	add	r2,r2,r2
   1125c:	9899883a 	add	r12,r19,r2
   11260:	62800304 	addi	r10,r12,12
   11264:	2017883a 	mov	r11,r4
   11268:	54000017 	ldw	r16,0(r10)
   1126c:	51bffd04 	addi	r6,r10,-12
   11270:	8180041e 	bne	r16,r6,11284 <_malloc_r+0x270>
   11274:	0000ca06 	br	115a0 <_malloc_r+0x58c>
   11278:	10001c0e 	bge	r2,zero,112ec <_malloc_r+0x2d8>
   1127c:	84000317 	ldw	r16,12(r16)
   11280:	8180c726 	beq	r16,r6,115a0 <_malloc_r+0x58c>
   11284:	80c00117 	ldw	r3,4(r16)
   11288:	1a06703a 	and	r3,r3,r8
   1128c:	1c45c83a 	sub	r2,r3,r17
   11290:	38bff90e 	bge	r7,r2,11278 <_malloc_r+0x264>
   11294:	81000317 	ldw	r4,12(r16)
   11298:	81400217 	ldw	r5,8(r16)
   1129c:	8447883a 	add	r3,r16,r17
   112a0:	8c400054 	ori	r17,r17,1
   112a4:	29000315 	stw	r4,12(r5)
   112a8:	21400215 	stw	r5,8(r4)
   112ac:	84400115 	stw	r17,4(r16)
   112b0:	1889883a 	add	r4,r3,r2
   112b4:	11400054 	ori	r5,r2,1
   112b8:	98c00515 	stw	r3,20(r19)
   112bc:	98c00415 	stw	r3,16(r19)
   112c0:	20800015 	stw	r2,0(r4)
   112c4:	1a400315 	stw	r9,12(r3)
   112c8:	1a400215 	stw	r9,8(r3)
   112cc:	19400115 	stw	r5,4(r3)
   112d0:	9009883a 	mov	r4,r18
   112d4:	00139cc0 	call	139cc <__malloc_unlock>
   112d8:	80800204 	addi	r2,r16,8
   112dc:	003f7b06 	br	110cc <_malloc_r+0xb8>
   112e0:	8808d0fa 	srli	r4,r17,3
   112e4:	210b883a 	add	r5,r4,r4
   112e8:	003f9106 	br	11130 <_malloc_r+0x11c>
   112ec:	80c7883a 	add	r3,r16,r3
   112f0:	19400117 	ldw	r5,4(r3)
   112f4:	80800317 	ldw	r2,12(r16)
   112f8:	81000217 	ldw	r4,8(r16)
   112fc:	29400054 	ori	r5,r5,1
   11300:	19400115 	stw	r5,4(r3)
   11304:	20800315 	stw	r2,12(r4)
   11308:	11000215 	stw	r4,8(r2)
   1130c:	9009883a 	mov	r4,r18
   11310:	00139cc0 	call	139cc <__malloc_unlock>
   11314:	80800204 	addi	r2,r16,8
   11318:	003f6c06 	br	110cc <_malloc_r+0xb8>
   1131c:	8085883a 	add	r2,r16,r2
   11320:	10c00117 	ldw	r3,4(r2)
   11324:	9009883a 	mov	r4,r18
   11328:	18c00054 	ori	r3,r3,1
   1132c:	10c00115 	stw	r3,4(r2)
   11330:	00139cc0 	call	139cc <__malloc_unlock>
   11334:	80800204 	addi	r2,r16,8
   11338:	003f6406 	br	110cc <_malloc_r+0xb8>
   1133c:	9c000217 	ldw	r16,8(r19)
   11340:	00bfff04 	movi	r2,-4
   11344:	85400117 	ldw	r21,4(r16)
   11348:	a8aa703a 	and	r21,r21,r2
   1134c:	ac400336 	bltu	r21,r17,1135c <_malloc_r+0x348>
   11350:	ac45c83a 	sub	r2,r21,r17
   11354:	00c003c4 	movi	r3,15
   11358:	18805316 	blt	r3,r2,114a8 <_malloc_r+0x494>
   1135c:	d5e6b217 	ldw	r23,-25912(gp)
   11360:	d0e00217 	ldw	r3,-32760(gp)
   11364:	00bfffc4 	movi	r2,-1
   11368:	8579883a 	add	fp,r16,r21
   1136c:	8def883a 	add	r23,r17,r23
   11370:	1880d226 	beq	r3,r2,116bc <_malloc_r+0x6a8>
   11374:	bdc403c4 	addi	r23,r23,4111
   11378:	00bc0004 	movi	r2,-4096
   1137c:	b8ae703a 	and	r23,r23,r2
   11380:	9009883a 	mov	r4,r18
   11384:	b80b883a 	mov	r5,r23
   11388:	00120180 	call	12018 <_sbrk_r>
   1138c:	1029883a 	mov	r20,r2
   11390:	00bfffc4 	movi	r2,-1
   11394:	a080d126 	beq	r20,r2,116dc <_malloc_r+0x6c8>
   11398:	a7009f36 	bltu	r20,fp,11618 <_malloc_r+0x604>
   1139c:	058000b4 	movhi	r22,2
   113a0:	b5a5be04 	addi	r22,r22,-26888
   113a4:	b0800017 	ldw	r2,0(r22)
   113a8:	b885883a 	add	r2,r23,r2
   113ac:	b0800015 	stw	r2,0(r22)
   113b0:	e500cf26 	beq	fp,r20,116f0 <_malloc_r+0x6dc>
   113b4:	d1200217 	ldw	r4,-32760(gp)
   113b8:	00ffffc4 	movi	r3,-1
   113bc:	20c0e026 	beq	r4,r3,11740 <_malloc_r+0x72c>
   113c0:	a739c83a 	sub	fp,r20,fp
   113c4:	1705883a 	add	r2,r2,fp
   113c8:	b0800015 	stw	r2,0(r22)
   113cc:	a08001cc 	andi	r2,r20,7
   113d0:	1000a526 	beq	r2,zero,11668 <_malloc_r+0x654>
   113d4:	a0a9c83a 	sub	r20,r20,r2
   113d8:	00c40204 	movi	r3,4104
   113dc:	a5000204 	addi	r20,r20,8
   113e0:	1885c83a 	sub	r2,r3,r2
   113e4:	a5c7883a 	add	r3,r20,r23
   113e8:	18c3ffcc 	andi	r3,r3,4095
   113ec:	10efc83a 	sub	r23,r2,r3
   113f0:	9009883a 	mov	r4,r18
   113f4:	b80b883a 	mov	r5,r23
   113f8:	00120180 	call	12018 <_sbrk_r>
   113fc:	00ffffc4 	movi	r3,-1
   11400:	10c0cc26 	beq	r2,r3,11734 <_malloc_r+0x720>
   11404:	1505c83a 	sub	r2,r2,r20
   11408:	b887883a 	add	r3,r23,r2
   1140c:	18c00054 	ori	r3,r3,1
   11410:	b0800017 	ldw	r2,0(r22)
   11414:	9d000215 	stw	r20,8(r19)
   11418:	a0c00115 	stw	r3,4(r20)
   1141c:	b885883a 	add	r2,r23,r2
   11420:	b0800015 	stw	r2,0(r22)
   11424:	84c00e26 	beq	r16,r19,11460 <_malloc_r+0x44c>
   11428:	00c003c4 	movi	r3,15
   1142c:	1d40902e 	bgeu	r3,r21,11670 <_malloc_r+0x65c>
   11430:	ad7ffd04 	addi	r21,r21,-12
   11434:	013ffe04 	movi	r4,-8
   11438:	a908703a 	and	r4,r21,r4
   1143c:	810b883a 	add	r5,r16,r4
   11440:	01800144 	movi	r6,5
   11444:	29800115 	stw	r6,4(r5)
   11448:	29800215 	stw	r6,8(r5)
   1144c:	81400117 	ldw	r5,4(r16)
   11450:	2940004c 	andi	r5,r5,1
   11454:	214ab03a 	or	r5,r4,r5
   11458:	81400115 	stw	r5,4(r16)
   1145c:	1900ae36 	bltu	r3,r4,11718 <_malloc_r+0x704>
   11460:	d0e6b117 	ldw	r3,-25916(gp)
   11464:	1880012e 	bgeu	r3,r2,1146c <_malloc_r+0x458>
   11468:	d0a6b115 	stw	r2,-25916(gp)
   1146c:	d0e6b017 	ldw	r3,-25920(gp)
   11470:	9c000217 	ldw	r16,8(r19)
   11474:	1880012e 	bgeu	r3,r2,1147c <_malloc_r+0x468>
   11478:	d0a6b015 	stw	r2,-25920(gp)
   1147c:	80c00117 	ldw	r3,4(r16)
   11480:	00bfff04 	movi	r2,-4
   11484:	1886703a 	and	r3,r3,r2
   11488:	1c45c83a 	sub	r2,r3,r17
   1148c:	1c400236 	bltu	r3,r17,11498 <_malloc_r+0x484>
   11490:	00c003c4 	movi	r3,15
   11494:	18800416 	blt	r3,r2,114a8 <_malloc_r+0x494>
   11498:	9009883a 	mov	r4,r18
   1149c:	00139cc0 	call	139cc <__malloc_unlock>
   114a0:	0005883a 	mov	r2,zero
   114a4:	003f0906 	br	110cc <_malloc_r+0xb8>
   114a8:	88c00054 	ori	r3,r17,1
   114ac:	10800054 	ori	r2,r2,1
   114b0:	80c00115 	stw	r3,4(r16)
   114b4:	8463883a 	add	r17,r16,r17
   114b8:	88800115 	stw	r2,4(r17)
   114bc:	9009883a 	mov	r4,r18
   114c0:	9c400215 	stw	r17,8(r19)
   114c4:	00139cc0 	call	139cc <__malloc_unlock>
   114c8:	80800204 	addi	r2,r16,8
   114cc:	003eff06 	br	110cc <_malloc_r+0xb8>
   114d0:	00800504 	movi	r2,20
   114d4:	1100492e 	bgeu	r2,r4,115fc <_malloc_r+0x5e8>
   114d8:	00801504 	movi	r2,84
   114dc:	11005c36 	bltu	r2,r4,11650 <_malloc_r+0x63c>
   114e0:	8808d33a 	srli	r4,r17,12
   114e4:	21001b84 	addi	r4,r4,110
   114e8:	210b883a 	add	r5,r4,r4
   114ec:	003f1006 	br	11130 <_malloc_r+0x11c>
   114f0:	1006d27a 	srli	r3,r2,9
   114f4:	01400104 	movi	r5,4
   114f8:	28c0432e 	bgeu	r5,r3,11608 <_malloc_r+0x5f4>
   114fc:	01400504 	movi	r5,20
   11500:	28c07036 	bltu	r5,r3,116c4 <_malloc_r+0x6b0>
   11504:	194016c4 	addi	r5,r3,91
   11508:	294d883a 	add	r6,r5,r5
   1150c:	318d883a 	add	r6,r6,r6
   11510:	318d883a 	add	r6,r6,r6
   11514:	998d883a 	add	r6,r19,r6
   11518:	30c00217 	ldw	r3,8(r6)
   1151c:	01c00074 	movhi	r7,1
   11520:	39d98004 	addi	r7,r7,26112
   11524:	19805726 	beq	r3,r6,11684 <_malloc_r+0x670>
   11528:	01ffff04 	movi	r7,-4
   1152c:	19400117 	ldw	r5,4(r3)
   11530:	29ca703a 	and	r5,r5,r7
   11534:	1140022e 	bgeu	r2,r5,11540 <_malloc_r+0x52c>
   11538:	18c00217 	ldw	r3,8(r3)
   1153c:	30fffb1e 	bne	r6,r3,1152c <_malloc_r+0x518>
   11540:	19400317 	ldw	r5,12(r3)
   11544:	98800117 	ldw	r2,4(r19)
   11548:	81400315 	stw	r5,12(r16)
   1154c:	80c00215 	stw	r3,8(r16)
   11550:	2c000215 	stw	r16,8(r5)
   11554:	1c000315 	stw	r16,12(r3)
   11558:	003f2b06 	br	11208 <_malloc_r+0x1f4>
   1155c:	8445883a 	add	r2,r16,r17
   11560:	8c400054 	ori	r17,r17,1
   11564:	18800515 	stw	r2,20(r3)
   11568:	18800415 	stw	r2,16(r3)
   1156c:	29000054 	ori	r4,r5,1
   11570:	1147883a 	add	r3,r2,r5
   11574:	84400115 	stw	r17,4(r16)
   11578:	11000115 	stw	r4,4(r2)
   1157c:	12400315 	stw	r9,12(r2)
   11580:	12400215 	stw	r9,8(r2)
   11584:	19400015 	stw	r5,0(r3)
   11588:	9009883a 	mov	r4,r18
   1158c:	00139cc0 	call	139cc <__malloc_unlock>
   11590:	80800204 	addi	r2,r16,8
   11594:	003ecd06 	br	110cc <_malloc_r+0xb8>
   11598:	18800117 	ldw	r2,4(r3)
   1159c:	003f1a06 	br	11208 <_malloc_r+0x1f4>
   115a0:	5ac00044 	addi	r11,r11,1
   115a4:	588000cc 	andi	r2,r11,3
   115a8:	52800204 	addi	r10,r10,8
   115ac:	103f2e1e 	bne	r2,zero,11268 <_malloc_r+0x254>
   115b0:	20c000cc 	andi	r3,r4,3
   115b4:	60bffe04 	addi	r2,r12,-8
   115b8:	18006f26 	beq	r3,zero,11778 <_malloc_r+0x764>
   115bc:	63000017 	ldw	r12,0(r12)
   115c0:	213fffc4 	addi	r4,r4,-1
   115c4:	60bffa26 	beq	r12,r2,115b0 <_malloc_r+0x59c>
   115c8:	98800117 	ldw	r2,4(r19)
   115cc:	294b883a 	add	r5,r5,r5
   115d0:	117f5a36 	bltu	r2,r5,1133c <_malloc_r+0x328>
   115d4:	283f5926 	beq	r5,zero,1133c <_malloc_r+0x328>
   115d8:	1146703a 	and	r3,r2,r5
   115dc:	18001626 	beq	r3,zero,11638 <_malloc_r+0x624>
   115e0:	5809883a 	mov	r4,r11
   115e4:	003f1a06 	br	11250 <_malloc_r+0x23c>
   115e8:	80800204 	addi	r2,r16,8
   115ec:	84000517 	ldw	r16,20(r16)
   115f0:	143ea81e 	bne	r2,r16,11094 <_malloc_r+0x80>
   115f4:	21000084 	addi	r4,r4,2
   115f8:	003ee306 	br	11188 <_malloc_r+0x174>
   115fc:	210016c4 	addi	r4,r4,91
   11600:	210b883a 	add	r5,r4,r4
   11604:	003eca06 	br	11130 <_malloc_r+0x11c>
   11608:	100ad1ba 	srli	r5,r2,6
   1160c:	29400e04 	addi	r5,r5,56
   11610:	294d883a 	add	r6,r5,r5
   11614:	003fbd06 	br	1150c <_malloc_r+0x4f8>
   11618:	84ff6026 	beq	r16,r19,1139c <_malloc_r+0x388>
   1161c:	00800074 	movhi	r2,1
   11620:	10998004 	addi	r2,r2,26112
   11624:	14000217 	ldw	r16,8(r2)
   11628:	00bfff04 	movi	r2,-4
   1162c:	80c00117 	ldw	r3,4(r16)
   11630:	1886703a 	and	r3,r3,r2
   11634:	003f9406 	br	11488 <_malloc_r+0x474>
   11638:	294b883a 	add	r5,r5,r5
   1163c:	1146703a 	and	r3,r2,r5
   11640:	5ac00104 	addi	r11,r11,4
   11644:	183ffc26 	beq	r3,zero,11638 <_malloc_r+0x624>
   11648:	5809883a 	mov	r4,r11
   1164c:	003f0006 	br	11250 <_malloc_r+0x23c>
   11650:	00805504 	movi	r2,340
   11654:	11001336 	bltu	r2,r4,116a4 <_malloc_r+0x690>
   11658:	8808d3fa 	srli	r4,r17,15
   1165c:	21001dc4 	addi	r4,r4,119
   11660:	210b883a 	add	r5,r4,r4
   11664:	003eb206 	br	11130 <_malloc_r+0x11c>
   11668:	00840004 	movi	r2,4096
   1166c:	003f5d06 	br	113e4 <_malloc_r+0x3d0>
   11670:	00800044 	movi	r2,1
   11674:	a0800115 	stw	r2,4(r20)
   11678:	a021883a 	mov	r16,r20
   1167c:	0007883a 	mov	r3,zero
   11680:	003f8106 	br	11488 <_malloc_r+0x474>
   11684:	280bd0ba 	srai	r5,r5,2
   11688:	01800044 	movi	r6,1
   1168c:	38800117 	ldw	r2,4(r7)
   11690:	314c983a 	sll	r6,r6,r5
   11694:	180b883a 	mov	r5,r3
   11698:	3084b03a 	or	r2,r6,r2
   1169c:	38800115 	stw	r2,4(r7)
   116a0:	003fa906 	br	11548 <_malloc_r+0x534>
   116a4:	00815504 	movi	r2,1364
   116a8:	11001836 	bltu	r2,r4,1170c <_malloc_r+0x6f8>
   116ac:	8808d4ba 	srli	r4,r17,18
   116b0:	21001f04 	addi	r4,r4,124
   116b4:	210b883a 	add	r5,r4,r4
   116b8:	003e9d06 	br	11130 <_malloc_r+0x11c>
   116bc:	bdc00404 	addi	r23,r23,16
   116c0:	003f2f06 	br	11380 <_malloc_r+0x36c>
   116c4:	01401504 	movi	r5,84
   116c8:	28c01f36 	bltu	r5,r3,11748 <_malloc_r+0x734>
   116cc:	100ad33a 	srli	r5,r2,12
   116d0:	29401b84 	addi	r5,r5,110
   116d4:	294d883a 	add	r6,r5,r5
   116d8:	003f8c06 	br	1150c <_malloc_r+0x4f8>
   116dc:	9c000217 	ldw	r16,8(r19)
   116e0:	00bfff04 	movi	r2,-4
   116e4:	80c00117 	ldw	r3,4(r16)
   116e8:	1886703a 	and	r3,r3,r2
   116ec:	003f6606 	br	11488 <_malloc_r+0x474>
   116f0:	e0c3ffcc 	andi	r3,fp,4095
   116f4:	183f2f1e 	bne	r3,zero,113b4 <_malloc_r+0x3a0>
   116f8:	98c00217 	ldw	r3,8(r19)
   116fc:	bd49883a 	add	r4,r23,r21
   11700:	21000054 	ori	r4,r4,1
   11704:	19000115 	stw	r4,4(r3)
   11708:	003f5506 	br	11460 <_malloc_r+0x44c>
   1170c:	01403f04 	movi	r5,252
   11710:	01001f84 	movi	r4,126
   11714:	003e8606 	br	11130 <_malloc_r+0x11c>
   11718:	9009883a 	mov	r4,r18
   1171c:	81400204 	addi	r5,r16,8
   11720:	00128300 	call	12830 <_free_r>
   11724:	008000b4 	movhi	r2,2
   11728:	10a5be04 	addi	r2,r2,-26888
   1172c:	10800017 	ldw	r2,0(r2)
   11730:	003f4b06 	br	11460 <_malloc_r+0x44c>
   11734:	00c00044 	movi	r3,1
   11738:	002f883a 	mov	r23,zero
   1173c:	003f3406 	br	11410 <_malloc_r+0x3fc>
   11740:	d5200215 	stw	r20,-32760(gp)
   11744:	003f2106 	br	113cc <_malloc_r+0x3b8>
   11748:	01405504 	movi	r5,340
   1174c:	28c00436 	bltu	r5,r3,11760 <_malloc_r+0x74c>
   11750:	100ad3fa 	srli	r5,r2,15
   11754:	29401dc4 	addi	r5,r5,119
   11758:	294d883a 	add	r6,r5,r5
   1175c:	003f6b06 	br	1150c <_malloc_r+0x4f8>
   11760:	01415504 	movi	r5,1364
   11764:	28c00936 	bltu	r5,r3,1178c <_malloc_r+0x778>
   11768:	100ad4ba 	srli	r5,r2,18
   1176c:	29401f04 	addi	r5,r5,124
   11770:	294d883a 	add	r6,r5,r5
   11774:	003f6506 	br	1150c <_malloc_r+0x4f8>
   11778:	98800117 	ldw	r2,4(r19)
   1177c:	0146303a 	nor	r3,zero,r5
   11780:	1884703a 	and	r2,r3,r2
   11784:	98800115 	stw	r2,4(r19)
   11788:	003f9006 	br	115cc <_malloc_r+0x5b8>
   1178c:	01803f04 	movi	r6,252
   11790:	01401f84 	movi	r5,126
   11794:	003f5d06 	br	1150c <_malloc_r+0x4f8>

00011798 <memchr>:
   11798:	008000c4 	movi	r2,3
   1179c:	29403fcc 	andi	r5,r5,255
   117a0:	1180282e 	bgeu	r2,r6,11844 <memchr+0xac>
   117a4:	2086703a 	and	r3,r4,r2
   117a8:	1800351e 	bne	r3,zero,11880 <memchr+0xe8>
   117ac:	2816923a 	slli	r11,r5,8
   117b0:	2093883a 	add	r9,r4,r2
   117b4:	22000084 	addi	r8,r4,2
   117b8:	5957883a 	add	r11,r11,r5
   117bc:	5816923a 	slli	r11,r11,8
   117c0:	20c00044 	addi	r3,r4,1
   117c4:	037fbff4 	movhi	r13,65279
   117c8:	6b7fbfc4 	addi	r13,r13,-257
   117cc:	5957883a 	add	r11,r11,r5
   117d0:	5816923a 	slli	r11,r11,8
   117d4:	03202074 	movhi	r12,32897
   117d8:	63202004 	addi	r12,r12,-32640
   117dc:	101d883a 	mov	r14,r2
   117e0:	5957883a 	add	r11,r11,r5
   117e4:	21c00017 	ldw	r7,0(r4)
   117e8:	31bfff04 	addi	r6,r6,-4
   117ec:	1805883a 	mov	r2,r3
   117f0:	3acef03a 	xor	r7,r7,r11
   117f4:	3b55883a 	add	r10,r7,r13
   117f8:	01ce303a 	nor	r7,zero,r7
   117fc:	51ce703a 	and	r7,r10,r7
   11800:	3b0e703a 	and	r7,r7,r12
   11804:	38000a26 	beq	r7,zero,11830 <memchr+0x98>
   11808:	21c00003 	ldbu	r7,0(r4)
   1180c:	39401e26 	beq	r7,r5,11888 <memchr+0xf0>
   11810:	19c00003 	ldbu	r7,0(r3)
   11814:	39401926 	beq	r7,r5,1187c <memchr+0xe4>
   11818:	41c00003 	ldbu	r7,0(r8)
   1181c:	4005883a 	mov	r2,r8
   11820:	39401626 	beq	r7,r5,1187c <memchr+0xe4>
   11824:	49c00003 	ldbu	r7,0(r9)
   11828:	4805883a 	mov	r2,r9
   1182c:	39401326 	beq	r7,r5,1187c <memchr+0xe4>
   11830:	21000104 	addi	r4,r4,4
   11834:	4a400104 	addi	r9,r9,4
   11838:	42000104 	addi	r8,r8,4
   1183c:	18c00104 	addi	r3,r3,4
   11840:	71bfe836 	bltu	r14,r6,117e4 <memchr+0x4c>
   11844:	2005883a 	mov	r2,r4
   11848:	30000a26 	beq	r6,zero,11874 <memchr+0xdc>
   1184c:	10c00003 	ldbu	r3,0(r2)
   11850:	19400a26 	beq	r3,r5,1187c <memchr+0xe4>
   11854:	10c00044 	addi	r3,r2,1
   11858:	118d883a 	add	r6,r2,r6
   1185c:	00000306 	br	1186c <memchr+0xd4>
   11860:	11000003 	ldbu	r4,0(r2)
   11864:	18c00044 	addi	r3,r3,1
   11868:	21400426 	beq	r4,r5,1187c <memchr+0xe4>
   1186c:	1805883a 	mov	r2,r3
   11870:	19bffb1e 	bne	r3,r6,11860 <memchr+0xc8>
   11874:	0005883a 	mov	r2,zero
   11878:	f800283a 	ret
   1187c:	f800283a 	ret
   11880:	2005883a 	mov	r2,r4
   11884:	003ff106 	br	1184c <memchr+0xb4>
   11888:	2005883a 	mov	r2,r4
   1188c:	f800283a 	ret

00011890 <memmove>:
   11890:	defffb04 	addi	sp,sp,-20
   11894:	dc000015 	stw	r16,0(sp)
   11898:	dfc00415 	stw	ra,16(sp)
   1189c:	dcc00315 	stw	r19,12(sp)
   118a0:	dc800215 	stw	r18,8(sp)
   118a4:	dc400115 	stw	r17,4(sp)
   118a8:	2021883a 	mov	r16,r4
   118ac:	300f883a 	mov	r7,r6
   118b0:	2900122e 	bgeu	r5,r4,118fc <memmove+0x6c>
   118b4:	2987883a 	add	r3,r5,r6
   118b8:	20c0102e 	bgeu	r4,r3,118fc <memmove+0x6c>
   118bc:	218b883a 	add	r5,r4,r6
   118c0:	1989c83a 	sub	r4,r3,r6
   118c4:	30000526 	beq	r6,zero,118dc <memmove+0x4c>
   118c8:	18ffffc4 	addi	r3,r3,-1
   118cc:	18800003 	ldbu	r2,0(r3)
   118d0:	297fffc4 	addi	r5,r5,-1
   118d4:	28800005 	stb	r2,0(r5)
   118d8:	193ffb1e 	bne	r3,r4,118c8 <memmove+0x38>
   118dc:	8005883a 	mov	r2,r16
   118e0:	dfc00417 	ldw	ra,16(sp)
   118e4:	dcc00317 	ldw	r19,12(sp)
   118e8:	dc800217 	ldw	r18,8(sp)
   118ec:	dc400117 	ldw	r17,4(sp)
   118f0:	dc000017 	ldw	r16,0(sp)
   118f4:	dec00504 	addi	sp,sp,20
   118f8:	f800283a 	ret
   118fc:	008003c4 	movi	r2,15
   11900:	1180422e 	bgeu	r2,r6,11a0c <memmove+0x17c>
   11904:	2c04b03a 	or	r2,r5,r16
   11908:	108000cc 	andi	r2,r2,3
   1190c:	10003f1e 	bne	r2,zero,11a0c <memmove+0x17c>
   11910:	32bffc04 	addi	r10,r6,-16
   11914:	5014d13a 	srli	r10,r10,4
   11918:	81000404 	addi	r4,r16,16
   1191c:	8007883a 	mov	r3,r16
   11920:	5004913a 	slli	r2,r10,4
   11924:	280f883a 	mov	r7,r5
   11928:	2089883a 	add	r4,r4,r2
   1192c:	38800017 	ldw	r2,0(r7)
   11930:	18c00404 	addi	r3,r3,16
   11934:	39c00404 	addi	r7,r7,16
   11938:	18bffc15 	stw	r2,-16(r3)
   1193c:	38bffd17 	ldw	r2,-12(r7)
   11940:	18bffd15 	stw	r2,-12(r3)
   11944:	38bffe17 	ldw	r2,-8(r7)
   11948:	18bffe15 	stw	r2,-8(r3)
   1194c:	38bfff17 	ldw	r2,-4(r7)
   11950:	18bfff15 	stw	r2,-4(r3)
   11954:	193ff51e 	bne	r3,r4,1192c <memmove+0x9c>
   11958:	52800044 	addi	r10,r10,1
   1195c:	5014913a 	slli	r10,r10,4
   11960:	31c003cc 	andi	r7,r6,15
   11964:	008000c4 	movi	r2,3
   11968:	8287883a 	add	r3,r16,r10
   1196c:	2a95883a 	add	r10,r5,r10
   11970:	11c0282e 	bgeu	r2,r7,11a14 <memmove+0x184>
   11974:	3c7fff04 	addi	r17,r7,-4
   11978:	8808d0ba 	srli	r4,r17,2
   1197c:	1a400104 	addi	r9,r3,4
   11980:	180d883a 	mov	r6,r3
   11984:	2105883a 	add	r2,r4,r4
   11988:	1085883a 	add	r2,r2,r2
   1198c:	4893883a 	add	r9,r9,r2
   11990:	5005883a 	mov	r2,r10
   11994:	12000017 	ldw	r8,0(r2)
   11998:	31800104 	addi	r6,r6,4
   1199c:	10800104 	addi	r2,r2,4
   119a0:	323fff15 	stw	r8,-4(r6)
   119a4:	327ffb1e 	bne	r6,r9,11994 <memmove+0x104>
   119a8:	20800044 	addi	r2,r4,1
   119ac:	1085883a 	add	r2,r2,r2
   119b0:	1085883a 	add	r2,r2,r2
   119b4:	017fff04 	movi	r5,-4
   119b8:	18a5883a 	add	r18,r3,r2
   119bc:	50a7883a 	add	r19,r10,r2
   119c0:	00108a40 	call	108a4 <__mulsi3>
   119c4:	144f883a 	add	r7,r2,r17
   119c8:	980b883a 	mov	r5,r19
   119cc:	9007883a 	mov	r3,r18
   119d0:	383fc226 	beq	r7,zero,118dc <memmove+0x4c>
   119d4:	19cf883a 	add	r7,r3,r7
   119d8:	29800003 	ldbu	r6,0(r5)
   119dc:	18c00044 	addi	r3,r3,1
   119e0:	29400044 	addi	r5,r5,1
   119e4:	19bfffc5 	stb	r6,-1(r3)
   119e8:	19fffb1e 	bne	r3,r7,119d8 <memmove+0x148>
   119ec:	8005883a 	mov	r2,r16
   119f0:	dfc00417 	ldw	ra,16(sp)
   119f4:	dcc00317 	ldw	r19,12(sp)
   119f8:	dc800217 	ldw	r18,8(sp)
   119fc:	dc400117 	ldw	r17,4(sp)
   11a00:	dc000017 	ldw	r16,0(sp)
   11a04:	dec00504 	addi	sp,sp,20
   11a08:	f800283a 	ret
   11a0c:	8007883a 	mov	r3,r16
   11a10:	003fef06 	br	119d0 <memmove+0x140>
   11a14:	500b883a 	mov	r5,r10
   11a18:	003fed06 	br	119d0 <memmove+0x140>

00011a1c <_realloc_r>:
   11a1c:	defff504 	addi	sp,sp,-44
   11a20:	dd400615 	stw	r21,24(sp)
   11a24:	dc800315 	stw	r18,12(sp)
   11a28:	dc000115 	stw	r16,4(sp)
   11a2c:	dfc00a15 	stw	ra,40(sp)
   11a30:	df000915 	stw	fp,36(sp)
   11a34:	ddc00815 	stw	r23,32(sp)
   11a38:	dd800715 	stw	r22,28(sp)
   11a3c:	dd000515 	stw	r20,20(sp)
   11a40:	dcc00415 	stw	r19,16(sp)
   11a44:	dc400215 	stw	r17,8(sp)
   11a48:	2821883a 	mov	r16,r5
   11a4c:	202b883a 	mov	r21,r4
   11a50:	3025883a 	mov	r18,r6
   11a54:	28009626 	beq	r5,zero,11cb0 <_realloc_r+0x294>
   11a58:	00139ac0 	call	139ac <__malloc_lock>
   11a5c:	80bfff17 	ldw	r2,-4(r16)
   11a60:	04ffff04 	movi	r19,-4
   11a64:	90c002c4 	addi	r3,r18,11
   11a68:	01000584 	movi	r4,22
   11a6c:	85bffe04 	addi	r22,r16,-8
   11a70:	14e6703a 	and	r19,r2,r19
   11a74:	20c0372e 	bgeu	r4,r3,11b54 <_realloc_r+0x138>
   11a78:	047ffe04 	movi	r17,-8
   11a7c:	1c62703a 	and	r17,r3,r17
   11a80:	8807883a 	mov	r3,r17
   11a84:	88005a16 	blt	r17,zero,11bf0 <_realloc_r+0x1d4>
   11a88:	8c805936 	bltu	r17,r18,11bf0 <_realloc_r+0x1d4>
   11a8c:	98c0340e 	bge	r19,r3,11b60 <_realloc_r+0x144>
   11a90:	07000074 	movhi	fp,1
   11a94:	e7198004 	addi	fp,fp,26112
   11a98:	e1400217 	ldw	r5,8(fp)
   11a9c:	b4c9883a 	add	r4,r22,r19
   11aa0:	29009026 	beq	r5,r4,11ce4 <_realloc_r+0x2c8>
   11aa4:	21800117 	ldw	r6,4(r4)
   11aa8:	01ffff84 	movi	r7,-2
   11aac:	31ce703a 	and	r7,r6,r7
   11ab0:	21cf883a 	add	r7,r4,r7
   11ab4:	39c00117 	ldw	r7,4(r7)
   11ab8:	39c0004c 	andi	r7,r7,1
   11abc:	38004326 	beq	r7,zero,11bcc <_realloc_r+0x1b0>
   11ac0:	000d883a 	mov	r6,zero
   11ac4:	0009883a 	mov	r4,zero
   11ac8:	1080004c 	andi	r2,r2,1
   11acc:	10005a1e 	bne	r2,zero,11c38 <_realloc_r+0x21c>
   11ad0:	85fffe17 	ldw	r23,-8(r16)
   11ad4:	00bfff04 	movi	r2,-4
   11ad8:	b5efc83a 	sub	r23,r22,r23
   11adc:	b9c00117 	ldw	r7,4(r23)
   11ae0:	388e703a 	and	r7,r7,r2
   11ae4:	3ccf883a 	add	r7,r7,r19
   11ae8:	20005226 	beq	r4,zero,11c34 <_realloc_r+0x218>
   11aec:	31e9883a 	add	r20,r6,r7
   11af0:	2140c726 	beq	r4,r5,11e10 <_realloc_r+0x3f4>
   11af4:	a0c04f16 	blt	r20,r3,11c34 <_realloc_r+0x218>
   11af8:	20800317 	ldw	r2,12(r4)
   11afc:	20c00217 	ldw	r3,8(r4)
   11b00:	99bfff04 	addi	r6,r19,-4
   11b04:	01000904 	movi	r4,36
   11b08:	18800315 	stw	r2,12(r3)
   11b0c:	10c00215 	stw	r3,8(r2)
   11b10:	b8c00217 	ldw	r3,8(r23)
   11b14:	b8800317 	ldw	r2,12(r23)
   11b18:	bc800204 	addi	r18,r23,8
   11b1c:	18800315 	stw	r2,12(r3)
   11b20:	10c00215 	stw	r3,8(r2)
   11b24:	2180ed36 	bltu	r4,r6,11edc <_realloc_r+0x4c0>
   11b28:	008004c4 	movi	r2,19
   11b2c:	11809b2e 	bgeu	r2,r6,11d9c <_realloc_r+0x380>
   11b30:	80800017 	ldw	r2,0(r16)
   11b34:	b8800215 	stw	r2,8(r23)
   11b38:	80800117 	ldw	r2,4(r16)
   11b3c:	b8800315 	stw	r2,12(r23)
   11b40:	008006c4 	movi	r2,27
   11b44:	1180f936 	bltu	r2,r6,11f2c <_realloc_r+0x510>
   11b48:	b8800404 	addi	r2,r23,16
   11b4c:	80c00204 	addi	r3,r16,8
   11b50:	00009406 	br	11da4 <_realloc_r+0x388>
   11b54:	00c00404 	movi	r3,16
   11b58:	1823883a 	mov	r17,r3
   11b5c:	003fca06 	br	11a88 <_realloc_r+0x6c>
   11b60:	9829883a 	mov	r20,r19
   11b64:	a447c83a 	sub	r3,r20,r17
   11b68:	010003c4 	movi	r4,15
   11b6c:	1080004c 	andi	r2,r2,1
   11b70:	20c02336 	bltu	r4,r3,11c00 <_realloc_r+0x1e4>
   11b74:	1504b03a 	or	r2,r2,r20
   11b78:	b0800115 	stw	r2,4(r22)
   11b7c:	b52d883a 	add	r22,r22,r20
   11b80:	b0800117 	ldw	r2,4(r22)
   11b84:	10800054 	ori	r2,r2,1
   11b88:	b0800115 	stw	r2,4(r22)
   11b8c:	a809883a 	mov	r4,r21
   11b90:	00139cc0 	call	139cc <__malloc_unlock>
   11b94:	8025883a 	mov	r18,r16
   11b98:	9005883a 	mov	r2,r18
   11b9c:	dfc00a17 	ldw	ra,40(sp)
   11ba0:	df000917 	ldw	fp,36(sp)
   11ba4:	ddc00817 	ldw	r23,32(sp)
   11ba8:	dd800717 	ldw	r22,28(sp)
   11bac:	dd400617 	ldw	r21,24(sp)
   11bb0:	dd000517 	ldw	r20,20(sp)
   11bb4:	dcc00417 	ldw	r19,16(sp)
   11bb8:	dc800317 	ldw	r18,12(sp)
   11bbc:	dc400217 	ldw	r17,8(sp)
   11bc0:	dc000117 	ldw	r16,4(sp)
   11bc4:	dec00b04 	addi	sp,sp,44
   11bc8:	f800283a 	ret
   11bcc:	01ffff04 	movi	r7,-4
   11bd0:	31cc703a 	and	r6,r6,r7
   11bd4:	34e9883a 	add	r20,r6,r19
   11bd8:	a0ffbb16 	blt	r20,r3,11ac8 <_realloc_r+0xac>
   11bdc:	20c00317 	ldw	r3,12(r4)
   11be0:	21000217 	ldw	r4,8(r4)
   11be4:	20c00315 	stw	r3,12(r4)
   11be8:	19000215 	stw	r4,8(r3)
   11bec:	003fdd06 	br	11b64 <_realloc_r+0x148>
   11bf0:	00800304 	movi	r2,12
   11bf4:	a8800015 	stw	r2,0(r21)
   11bf8:	0025883a 	mov	r18,zero
   11bfc:	003fe606 	br	11b98 <_realloc_r+0x17c>
   11c00:	1444b03a 	or	r2,r2,r17
   11c04:	b0800115 	stw	r2,4(r22)
   11c08:	b44b883a 	add	r5,r22,r17
   11c0c:	18800054 	ori	r2,r3,1
   11c10:	28800115 	stw	r2,4(r5)
   11c14:	28c7883a 	add	r3,r5,r3
   11c18:	18800117 	ldw	r2,4(r3)
   11c1c:	a809883a 	mov	r4,r21
   11c20:	29400204 	addi	r5,r5,8
   11c24:	10800054 	ori	r2,r2,1
   11c28:	18800115 	stw	r2,4(r3)
   11c2c:	00128300 	call	12830 <_free_r>
   11c30:	003fd606 	br	11b8c <_realloc_r+0x170>
   11c34:	38c0330e 	bge	r7,r3,11d04 <_realloc_r+0x2e8>
   11c38:	900b883a 	mov	r5,r18
   11c3c:	a809883a 	mov	r4,r21
   11c40:	00110140 	call	11014 <_malloc_r>
   11c44:	1025883a 	mov	r18,r2
   11c48:	10001626 	beq	r2,zero,11ca4 <_realloc_r+0x288>
   11c4c:	80bfff17 	ldw	r2,-4(r16)
   11c50:	00ffff84 	movi	r3,-2
   11c54:	913ffe04 	addi	r4,r18,-8
   11c58:	10c6703a 	and	r3,r2,r3
   11c5c:	b0c7883a 	add	r3,r22,r3
   11c60:	20c09926 	beq	r4,r3,11ec8 <_realloc_r+0x4ac>
   11c64:	99bfff04 	addi	r6,r19,-4
   11c68:	00800904 	movi	r2,36
   11c6c:	11806436 	bltu	r2,r6,11e00 <_realloc_r+0x3e4>
   11c70:	00c004c4 	movi	r3,19
   11c74:	19804036 	bltu	r3,r6,11d78 <_realloc_r+0x35c>
   11c78:	9005883a 	mov	r2,r18
   11c7c:	8007883a 	mov	r3,r16
   11c80:	19000017 	ldw	r4,0(r3)
   11c84:	11000015 	stw	r4,0(r2)
   11c88:	19000117 	ldw	r4,4(r3)
   11c8c:	11000115 	stw	r4,4(r2)
   11c90:	18c00217 	ldw	r3,8(r3)
   11c94:	10c00215 	stw	r3,8(r2)
   11c98:	a809883a 	mov	r4,r21
   11c9c:	800b883a 	mov	r5,r16
   11ca0:	00128300 	call	12830 <_free_r>
   11ca4:	a809883a 	mov	r4,r21
   11ca8:	00139cc0 	call	139cc <__malloc_unlock>
   11cac:	003fba06 	br	11b98 <_realloc_r+0x17c>
   11cb0:	300b883a 	mov	r5,r6
   11cb4:	dfc00a17 	ldw	ra,40(sp)
   11cb8:	df000917 	ldw	fp,36(sp)
   11cbc:	ddc00817 	ldw	r23,32(sp)
   11cc0:	dd800717 	ldw	r22,28(sp)
   11cc4:	dd400617 	ldw	r21,24(sp)
   11cc8:	dd000517 	ldw	r20,20(sp)
   11ccc:	dcc00417 	ldw	r19,16(sp)
   11cd0:	dc800317 	ldw	r18,12(sp)
   11cd4:	dc400217 	ldw	r17,8(sp)
   11cd8:	dc000117 	ldw	r16,4(sp)
   11cdc:	dec00b04 	addi	sp,sp,44
   11ce0:	00110141 	jmpi	11014 <_malloc_r>
   11ce4:	29800117 	ldw	r6,4(r5)
   11ce8:	013fff04 	movi	r4,-4
   11cec:	89c00404 	addi	r7,r17,16
   11cf0:	310c703a 	and	r6,r6,r4
   11cf4:	34c9883a 	add	r4,r6,r19
   11cf8:	21c0340e 	bge	r4,r7,11dcc <_realloc_r+0x3b0>
   11cfc:	2809883a 	mov	r4,r5
   11d00:	003f7106 	br	11ac8 <_realloc_r+0xac>
   11d04:	b8800317 	ldw	r2,12(r23)
   11d08:	b8c00217 	ldw	r3,8(r23)
   11d0c:	99bfff04 	addi	r6,r19,-4
   11d10:	01000904 	movi	r4,36
   11d14:	18800315 	stw	r2,12(r3)
   11d18:	10c00215 	stw	r3,8(r2)
   11d1c:	bc800204 	addi	r18,r23,8
   11d20:	21807836 	bltu	r4,r6,11f04 <_realloc_r+0x4e8>
   11d24:	008004c4 	movi	r2,19
   11d28:	1180732e 	bgeu	r2,r6,11ef8 <_realloc_r+0x4dc>
   11d2c:	80800017 	ldw	r2,0(r16)
   11d30:	b8800215 	stw	r2,8(r23)
   11d34:	80800117 	ldw	r2,4(r16)
   11d38:	b8800315 	stw	r2,12(r23)
   11d3c:	008006c4 	movi	r2,27
   11d40:	11808936 	bltu	r2,r6,11f68 <_realloc_r+0x54c>
   11d44:	b8800404 	addi	r2,r23,16
   11d48:	80c00204 	addi	r3,r16,8
   11d4c:	19000017 	ldw	r4,0(r3)
   11d50:	9021883a 	mov	r16,r18
   11d54:	3829883a 	mov	r20,r7
   11d58:	11000015 	stw	r4,0(r2)
   11d5c:	19000117 	ldw	r4,4(r3)
   11d60:	b82d883a 	mov	r22,r23
   11d64:	11000115 	stw	r4,4(r2)
   11d68:	18c00217 	ldw	r3,8(r3)
   11d6c:	10c00215 	stw	r3,8(r2)
   11d70:	b8800117 	ldw	r2,4(r23)
   11d74:	003f7b06 	br	11b64 <_realloc_r+0x148>
   11d78:	80c00017 	ldw	r3,0(r16)
   11d7c:	90c00015 	stw	r3,0(r18)
   11d80:	80c00117 	ldw	r3,4(r16)
   11d84:	90c00115 	stw	r3,4(r18)
   11d88:	00c006c4 	movi	r3,27
   11d8c:	19804636 	bltu	r3,r6,11ea8 <_realloc_r+0x48c>
   11d90:	90800204 	addi	r2,r18,8
   11d94:	80c00204 	addi	r3,r16,8
   11d98:	003fb906 	br	11c80 <_realloc_r+0x264>
   11d9c:	9005883a 	mov	r2,r18
   11da0:	8007883a 	mov	r3,r16
   11da4:	19000017 	ldw	r4,0(r3)
   11da8:	9021883a 	mov	r16,r18
   11dac:	b82d883a 	mov	r22,r23
   11db0:	11000015 	stw	r4,0(r2)
   11db4:	19000117 	ldw	r4,4(r3)
   11db8:	11000115 	stw	r4,4(r2)
   11dbc:	18c00217 	ldw	r3,8(r3)
   11dc0:	10c00215 	stw	r3,8(r2)
   11dc4:	b8800117 	ldw	r2,4(r23)
   11dc8:	003f6606 	br	11b64 <_realloc_r+0x148>
   11dcc:	2445c83a 	sub	r2,r4,r17
   11dd0:	b46d883a 	add	r22,r22,r17
   11dd4:	10800054 	ori	r2,r2,1
   11dd8:	b0800115 	stw	r2,4(r22)
   11ddc:	80bfff17 	ldw	r2,-4(r16)
   11de0:	a809883a 	mov	r4,r21
   11de4:	e5800215 	stw	r22,8(fp)
   11de8:	1080004c 	andi	r2,r2,1
   11dec:	88a2b03a 	or	r17,r17,r2
   11df0:	847fff15 	stw	r17,-4(r16)
   11df4:	00139cc0 	call	139cc <__malloc_unlock>
   11df8:	8025883a 	mov	r18,r16
   11dfc:	003f6606 	br	11b98 <_realloc_r+0x17c>
   11e00:	9009883a 	mov	r4,r18
   11e04:	800b883a 	mov	r5,r16
   11e08:	00118900 	call	11890 <memmove>
   11e0c:	003fa206 	br	11c98 <_realloc_r+0x27c>
   11e10:	88800404 	addi	r2,r17,16
   11e14:	a0bf8716 	blt	r20,r2,11c34 <_realloc_r+0x218>
   11e18:	b8800317 	ldw	r2,12(r23)
   11e1c:	b8c00217 	ldw	r3,8(r23)
   11e20:	99bfff04 	addi	r6,r19,-4
   11e24:	01000904 	movi	r4,36
   11e28:	18800315 	stw	r2,12(r3)
   11e2c:	10c00215 	stw	r3,8(r2)
   11e30:	bc800204 	addi	r18,r23,8
   11e34:	21806536 	bltu	r4,r6,11fcc <_realloc_r+0x5b0>
   11e38:	008004c4 	movi	r2,19
   11e3c:	1180592e 	bgeu	r2,r6,11fa4 <_realloc_r+0x588>
   11e40:	80800017 	ldw	r2,0(r16)
   11e44:	b8800215 	stw	r2,8(r23)
   11e48:	80800117 	ldw	r2,4(r16)
   11e4c:	b8800315 	stw	r2,12(r23)
   11e50:	008006c4 	movi	r2,27
   11e54:	11806136 	bltu	r2,r6,11fdc <_realloc_r+0x5c0>
   11e58:	b8800404 	addi	r2,r23,16
   11e5c:	80c00204 	addi	r3,r16,8
   11e60:	19000017 	ldw	r4,0(r3)
   11e64:	11000015 	stw	r4,0(r2)
   11e68:	19000117 	ldw	r4,4(r3)
   11e6c:	11000115 	stw	r4,4(r2)
   11e70:	18c00217 	ldw	r3,8(r3)
   11e74:	10c00215 	stw	r3,8(r2)
   11e78:	a447c83a 	sub	r3,r20,r17
   11e7c:	bc45883a 	add	r2,r23,r17
   11e80:	18c00054 	ori	r3,r3,1
   11e84:	10c00115 	stw	r3,4(r2)
   11e88:	b8c00117 	ldw	r3,4(r23)
   11e8c:	e0800215 	stw	r2,8(fp)
   11e90:	a809883a 	mov	r4,r21
   11e94:	1880004c 	andi	r2,r3,1
   11e98:	88a2b03a 	or	r17,r17,r2
   11e9c:	bc400115 	stw	r17,4(r23)
   11ea0:	00139cc0 	call	139cc <__malloc_unlock>
   11ea4:	003f3c06 	br	11b98 <_realloc_r+0x17c>
   11ea8:	80c00217 	ldw	r3,8(r16)
   11eac:	90c00215 	stw	r3,8(r18)
   11eb0:	80c00317 	ldw	r3,12(r16)
   11eb4:	90c00315 	stw	r3,12(r18)
   11eb8:	30802426 	beq	r6,r2,11f4c <_realloc_r+0x530>
   11ebc:	90800404 	addi	r2,r18,16
   11ec0:	80c00404 	addi	r3,r16,16
   11ec4:	003f6e06 	br	11c80 <_realloc_r+0x264>
   11ec8:	953fff17 	ldw	r20,-4(r18)
   11ecc:	00ffff04 	movi	r3,-4
   11ed0:	a0e8703a 	and	r20,r20,r3
   11ed4:	a4e9883a 	add	r20,r20,r19
   11ed8:	003f2206 	br	11b64 <_realloc_r+0x148>
   11edc:	800b883a 	mov	r5,r16
   11ee0:	9009883a 	mov	r4,r18
   11ee4:	00118900 	call	11890 <memmove>
   11ee8:	9021883a 	mov	r16,r18
   11eec:	b8800117 	ldw	r2,4(r23)
   11ef0:	b82d883a 	mov	r22,r23
   11ef4:	003f1b06 	br	11b64 <_realloc_r+0x148>
   11ef8:	9005883a 	mov	r2,r18
   11efc:	8007883a 	mov	r3,r16
   11f00:	003f9206 	br	11d4c <_realloc_r+0x330>
   11f04:	800b883a 	mov	r5,r16
   11f08:	9009883a 	mov	r4,r18
   11f0c:	d9c00015 	stw	r7,0(sp)
   11f10:	00118900 	call	11890 <memmove>
   11f14:	d9c00017 	ldw	r7,0(sp)
   11f18:	9021883a 	mov	r16,r18
   11f1c:	b8800117 	ldw	r2,4(r23)
   11f20:	3829883a 	mov	r20,r7
   11f24:	b82d883a 	mov	r22,r23
   11f28:	003f0e06 	br	11b64 <_realloc_r+0x148>
   11f2c:	80800217 	ldw	r2,8(r16)
   11f30:	b8800415 	stw	r2,16(r23)
   11f34:	80800317 	ldw	r2,12(r16)
   11f38:	b8800515 	stw	r2,20(r23)
   11f3c:	31001226 	beq	r6,r4,11f88 <_realloc_r+0x56c>
   11f40:	b8800604 	addi	r2,r23,24
   11f44:	80c00404 	addi	r3,r16,16
   11f48:	003f9606 	br	11da4 <_realloc_r+0x388>
   11f4c:	81000417 	ldw	r4,16(r16)
   11f50:	90800604 	addi	r2,r18,24
   11f54:	80c00604 	addi	r3,r16,24
   11f58:	91000415 	stw	r4,16(r18)
   11f5c:	81000517 	ldw	r4,20(r16)
   11f60:	91000515 	stw	r4,20(r18)
   11f64:	003f4606 	br	11c80 <_realloc_r+0x264>
   11f68:	80800217 	ldw	r2,8(r16)
   11f6c:	b8800415 	stw	r2,16(r23)
   11f70:	80800317 	ldw	r2,12(r16)
   11f74:	b8800515 	stw	r2,20(r23)
   11f78:	31000d26 	beq	r6,r4,11fb0 <_realloc_r+0x594>
   11f7c:	b8800604 	addi	r2,r23,24
   11f80:	80c00404 	addi	r3,r16,16
   11f84:	003f7106 	br	11d4c <_realloc_r+0x330>
   11f88:	81000417 	ldw	r4,16(r16)
   11f8c:	b8800804 	addi	r2,r23,32
   11f90:	80c00604 	addi	r3,r16,24
   11f94:	b9000615 	stw	r4,24(r23)
   11f98:	81000517 	ldw	r4,20(r16)
   11f9c:	b9000715 	stw	r4,28(r23)
   11fa0:	003f8006 	br	11da4 <_realloc_r+0x388>
   11fa4:	9005883a 	mov	r2,r18
   11fa8:	8007883a 	mov	r3,r16
   11fac:	003fac06 	br	11e60 <_realloc_r+0x444>
   11fb0:	81000417 	ldw	r4,16(r16)
   11fb4:	b8800804 	addi	r2,r23,32
   11fb8:	80c00604 	addi	r3,r16,24
   11fbc:	b9000615 	stw	r4,24(r23)
   11fc0:	81000517 	ldw	r4,20(r16)
   11fc4:	b9000715 	stw	r4,28(r23)
   11fc8:	003f6006 	br	11d4c <_realloc_r+0x330>
   11fcc:	9009883a 	mov	r4,r18
   11fd0:	800b883a 	mov	r5,r16
   11fd4:	00118900 	call	11890 <memmove>
   11fd8:	003fa706 	br	11e78 <_realloc_r+0x45c>
   11fdc:	80800217 	ldw	r2,8(r16)
   11fe0:	b8800415 	stw	r2,16(r23)
   11fe4:	80800317 	ldw	r2,12(r16)
   11fe8:	b8800515 	stw	r2,20(r23)
   11fec:	31000326 	beq	r6,r4,11ffc <_realloc_r+0x5e0>
   11ff0:	b8800604 	addi	r2,r23,24
   11ff4:	80c00404 	addi	r3,r16,16
   11ff8:	003f9906 	br	11e60 <_realloc_r+0x444>
   11ffc:	81000417 	ldw	r4,16(r16)
   12000:	b8800804 	addi	r2,r23,32
   12004:	80c00604 	addi	r3,r16,24
   12008:	b9000615 	stw	r4,24(r23)
   1200c:	81000517 	ldw	r4,20(r16)
   12010:	b9000715 	stw	r4,28(r23)
   12014:	003f9206 	br	11e60 <_realloc_r+0x444>

00012018 <_sbrk_r>:
   12018:	defffd04 	addi	sp,sp,-12
   1201c:	dc400115 	stw	r17,4(sp)
   12020:	dc000015 	stw	r16,0(sp)
   12024:	2023883a 	mov	r17,r4
   12028:	040000b4 	movhi	r16,2
   1202c:	8425b704 	addi	r16,r16,-26916
   12030:	2809883a 	mov	r4,r5
   12034:	dfc00215 	stw	ra,8(sp)
   12038:	80000015 	stw	zero,0(r16)
   1203c:	0013bb00 	call	13bb0 <sbrk>
   12040:	00ffffc4 	movi	r3,-1
   12044:	10c00526 	beq	r2,r3,1205c <_sbrk_r+0x44>
   12048:	dfc00217 	ldw	ra,8(sp)
   1204c:	dc400117 	ldw	r17,4(sp)
   12050:	dc000017 	ldw	r16,0(sp)
   12054:	dec00304 	addi	sp,sp,12
   12058:	f800283a 	ret
   1205c:	80c00017 	ldw	r3,0(r16)
   12060:	183ff926 	beq	r3,zero,12048 <_sbrk_r+0x30>
   12064:	88c00015 	stw	r3,0(r17)
   12068:	dfc00217 	ldw	ra,8(sp)
   1206c:	dc400117 	ldw	r17,4(sp)
   12070:	dc000017 	ldw	r16,0(sp)
   12074:	dec00304 	addi	sp,sp,12
   12078:	f800283a 	ret

0001207c <__swsetup_r>:
   1207c:	00800074 	movhi	r2,1
   12080:	109f0504 	addi	r2,r2,31764
   12084:	10800017 	ldw	r2,0(r2)
   12088:	defffd04 	addi	sp,sp,-12
   1208c:	dc400115 	stw	r17,4(sp)
   12090:	dc000015 	stw	r16,0(sp)
   12094:	dfc00215 	stw	ra,8(sp)
   12098:	2023883a 	mov	r17,r4
   1209c:	2821883a 	mov	r16,r5
   120a0:	10000226 	beq	r2,zero,120ac <__swsetup_r+0x30>
   120a4:	10c00e17 	ldw	r3,56(r2)
   120a8:	18003d26 	beq	r3,zero,121a0 <__swsetup_r+0x124>
   120ac:	8080030b 	ldhu	r2,12(r16)
   120b0:	10c0020c 	andi	r3,r2,8
   120b4:	18ffffcc 	andi	r3,r3,65535
   120b8:	18e0001c 	xori	r3,r3,32768
   120bc:	18e00004 	addi	r3,r3,-32768
   120c0:	18001226 	beq	r3,zero,1210c <__swsetup_r+0x90>
   120c4:	80c00417 	ldw	r3,16(r16)
   120c8:	18001f26 	beq	r3,zero,12148 <__swsetup_r+0xcc>
   120cc:	1100004c 	andi	r4,r2,1
   120d0:	2000261e 	bne	r4,zero,1216c <__swsetup_r+0xf0>
   120d4:	1080008c 	andi	r2,r2,2
   120d8:	10bfffcc 	andi	r2,r2,65535
   120dc:	10a0001c 	xori	r2,r2,32768
   120e0:	10a00004 	addi	r2,r2,-32768
   120e4:	1000311e 	bne	r2,zero,121ac <__swsetup_r+0x130>
   120e8:	80800517 	ldw	r2,20(r16)
   120ec:	80800215 	stw	r2,8(r16)
   120f0:	18002326 	beq	r3,zero,12180 <__swsetup_r+0x104>
   120f4:	0005883a 	mov	r2,zero
   120f8:	dfc00217 	ldw	ra,8(sp)
   120fc:	dc400117 	ldw	r17,4(sp)
   12100:	dc000017 	ldw	r16,0(sp)
   12104:	dec00304 	addi	sp,sp,12
   12108:	f800283a 	ret
   1210c:	10c0040c 	andi	r3,r2,16
   12110:	18ffffcc 	andi	r3,r3,65535
   12114:	18e0001c 	xori	r3,r3,32768
   12118:	18e00004 	addi	r3,r3,-32768
   1211c:	18001e26 	beq	r3,zero,12198 <__swsetup_r+0x11c>
   12120:	10c0010c 	andi	r3,r2,4
   12124:	18ffffcc 	andi	r3,r3,65535
   12128:	18e0001c 	xori	r3,r3,32768
   1212c:	18e00004 	addi	r3,r3,-32768
   12130:	1800211e 	bne	r3,zero,121b8 <__swsetup_r+0x13c>
   12134:	80c00417 	ldw	r3,16(r16)
   12138:	11400214 	ori	r5,r2,8
   1213c:	8140030d 	sth	r5,12(r16)
   12140:	2805883a 	mov	r2,r5
   12144:	183fe11e 	bne	r3,zero,120cc <__swsetup_r+0x50>
   12148:	1140a00c 	andi	r5,r2,640
   1214c:	01008004 	movi	r4,512
   12150:	293fde26 	beq	r5,r4,120cc <__swsetup_r+0x50>
   12154:	8809883a 	mov	r4,r17
   12158:	800b883a 	mov	r5,r16
   1215c:	0012c600 	call	12c60 <__smakebuf_r>
   12160:	8080030b 	ldhu	r2,12(r16)
   12164:	80c00417 	ldw	r3,16(r16)
   12168:	003fd806 	br	120cc <__swsetup_r+0x50>
   1216c:	80800517 	ldw	r2,20(r16)
   12170:	80000215 	stw	zero,8(r16)
   12174:	0085c83a 	sub	r2,zero,r2
   12178:	80800615 	stw	r2,24(r16)
   1217c:	183fdd1e 	bne	r3,zero,120f4 <__swsetup_r+0x78>
   12180:	8080030b 	ldhu	r2,12(r16)
   12184:	1080200c 	andi	r2,r2,128
   12188:	10bfffcc 	andi	r2,r2,65535
   1218c:	10a0001c 	xori	r2,r2,32768
   12190:	10a00004 	addi	r2,r2,-32768
   12194:	103fd826 	beq	r2,zero,120f8 <__swsetup_r+0x7c>
   12198:	00bfffc4 	movi	r2,-1
   1219c:	003fd606 	br	120f8 <__swsetup_r+0x7c>
   121a0:	1009883a 	mov	r4,r2
   121a4:	00124ac0 	call	124ac <__sinit>
   121a8:	003fc006 	br	120ac <__swsetup_r+0x30>
   121ac:	0005883a 	mov	r2,zero
   121b0:	80800215 	stw	r2,8(r16)
   121b4:	003fce06 	br	120f0 <__swsetup_r+0x74>
   121b8:	81400c17 	ldw	r5,48(r16)
   121bc:	28000626 	beq	r5,zero,121d8 <__swsetup_r+0x15c>
   121c0:	80c01004 	addi	r3,r16,64
   121c4:	28c00326 	beq	r5,r3,121d4 <__swsetup_r+0x158>
   121c8:	8809883a 	mov	r4,r17
   121cc:	00128300 	call	12830 <_free_r>
   121d0:	8080030b 	ldhu	r2,12(r16)
   121d4:	80000c15 	stw	zero,48(r16)
   121d8:	80c00417 	ldw	r3,16(r16)
   121dc:	013ff6c4 	movi	r4,-37
   121e0:	2084703a 	and	r2,r4,r2
   121e4:	80000115 	stw	zero,4(r16)
   121e8:	80c00015 	stw	r3,0(r16)
   121ec:	003fd206 	br	12138 <__swsetup_r+0xbc>

000121f0 <_fflush_r>:
   121f0:	defffb04 	addi	sp,sp,-20
   121f4:	dcc00315 	stw	r19,12(sp)
   121f8:	dc400115 	stw	r17,4(sp)
   121fc:	dfc00415 	stw	ra,16(sp)
   12200:	dc800215 	stw	r18,8(sp)
   12204:	dc000015 	stw	r16,0(sp)
   12208:	2027883a 	mov	r19,r4
   1220c:	2823883a 	mov	r17,r5
   12210:	20000226 	beq	r4,zero,1221c <_fflush_r+0x2c>
   12214:	20800e17 	ldw	r2,56(r4)
   12218:	10005726 	beq	r2,zero,12378 <_fflush_r+0x188>
   1221c:	8880030b 	ldhu	r2,12(r17)
   12220:	10c0020c 	andi	r3,r2,8
   12224:	18ffffcc 	andi	r3,r3,65535
   12228:	18e0001c 	xori	r3,r3,32768
   1222c:	18e00004 	addi	r3,r3,-32768
   12230:	1800311e 	bne	r3,zero,122f8 <_fflush_r+0x108>
   12234:	89000117 	ldw	r4,4(r17)
   12238:	10c20014 	ori	r3,r2,2048
   1223c:	88c0030d 	sth	r3,12(r17)
   12240:	180b883a 	mov	r5,r3
   12244:	0100520e 	bge	zero,r4,12390 <_fflush_r+0x1a0>
   12248:	88c00a17 	ldw	r3,40(r17)
   1224c:	18002226 	beq	r3,zero,122d8 <_fflush_r+0xe8>
   12250:	1084000c 	andi	r2,r2,4096
   12254:	10bfffcc 	andi	r2,r2,65535
   12258:	10a0001c 	xori	r2,r2,32768
   1225c:	10a00004 	addi	r2,r2,-32768
   12260:	10004e26 	beq	r2,zero,1239c <_fflush_r+0x1ac>
   12264:	8c001417 	ldw	r16,80(r17)
   12268:	2940010c 	andi	r5,r5,4
   1226c:	297fffcc 	andi	r5,r5,65535
   12270:	2960001c 	xori	r5,r5,32768
   12274:	29600004 	addi	r5,r5,-32768
   12278:	28000626 	beq	r5,zero,12294 <_fflush_r+0xa4>
   1227c:	89000117 	ldw	r4,4(r17)
   12280:	88800c17 	ldw	r2,48(r17)
   12284:	8121c83a 	sub	r16,r16,r4
   12288:	10000226 	beq	r2,zero,12294 <_fflush_r+0xa4>
   1228c:	88800f17 	ldw	r2,60(r17)
   12290:	80a1c83a 	sub	r16,r16,r2
   12294:	89400717 	ldw	r5,28(r17)
   12298:	9809883a 	mov	r4,r19
   1229c:	800d883a 	mov	r6,r16
   122a0:	000f883a 	mov	r7,zero
   122a4:	183ee83a 	callr	r3
   122a8:	8080281e 	bne	r16,r2,1234c <_fflush_r+0x15c>
   122ac:	8880030b 	ldhu	r2,12(r17)
   122b0:	88c00417 	ldw	r3,16(r17)
   122b4:	88000115 	stw	zero,4(r17)
   122b8:	113dffcc 	andi	r4,r2,63487
   122bc:	1084000c 	andi	r2,r2,4096
   122c0:	10bfffcc 	andi	r2,r2,65535
   122c4:	10a0001c 	xori	r2,r2,32768
   122c8:	8900030d 	sth	r4,12(r17)
   122cc:	88c00015 	stw	r3,0(r17)
   122d0:	10a00004 	addi	r2,r2,-32768
   122d4:	10002c1e 	bne	r2,zero,12388 <_fflush_r+0x198>
   122d8:	0005883a 	mov	r2,zero
   122dc:	dfc00417 	ldw	ra,16(sp)
   122e0:	dcc00317 	ldw	r19,12(sp)
   122e4:	dc800217 	ldw	r18,8(sp)
   122e8:	dc400117 	ldw	r17,4(sp)
   122ec:	dc000017 	ldw	r16,0(sp)
   122f0:	dec00504 	addi	sp,sp,20
   122f4:	f800283a 	ret
   122f8:	8c800417 	ldw	r18,16(r17)
   122fc:	903ff626 	beq	r18,zero,122d8 <_fflush_r+0xe8>
   12300:	8c000017 	ldw	r16,0(r17)
   12304:	108000cc 	andi	r2,r2,3
   12308:	8c800015 	stw	r18,0(r17)
   1230c:	84a1c83a 	sub	r16,r16,r18
   12310:	10001b1e 	bne	r2,zero,12380 <_fflush_r+0x190>
   12314:	88800517 	ldw	r2,20(r17)
   12318:	88800215 	stw	r2,8(r17)
   1231c:	04000316 	blt	zero,r16,1232c <_fflush_r+0x13c>
   12320:	003fed06 	br	122d8 <_fflush_r+0xe8>
   12324:	90a5883a 	add	r18,r18,r2
   12328:	043feb0e 	bge	zero,r16,122d8 <_fflush_r+0xe8>
   1232c:	88800917 	ldw	r2,36(r17)
   12330:	89400717 	ldw	r5,28(r17)
   12334:	800f883a 	mov	r7,r16
   12338:	900d883a 	mov	r6,r18
   1233c:	9809883a 	mov	r4,r19
   12340:	103ee83a 	callr	r2
   12344:	80a1c83a 	sub	r16,r16,r2
   12348:	00bff616 	blt	zero,r2,12324 <_fflush_r+0x134>
   1234c:	88c0030b 	ldhu	r3,12(r17)
   12350:	00bfffc4 	movi	r2,-1
   12354:	18c01014 	ori	r3,r3,64
   12358:	88c0030d 	sth	r3,12(r17)
   1235c:	dfc00417 	ldw	ra,16(sp)
   12360:	dcc00317 	ldw	r19,12(sp)
   12364:	dc800217 	ldw	r18,8(sp)
   12368:	dc400117 	ldw	r17,4(sp)
   1236c:	dc000017 	ldw	r16,0(sp)
   12370:	dec00504 	addi	sp,sp,20
   12374:	f800283a 	ret
   12378:	00124ac0 	call	124ac <__sinit>
   1237c:	003fa706 	br	1221c <_fflush_r+0x2c>
   12380:	0005883a 	mov	r2,zero
   12384:	003fe406 	br	12318 <_fflush_r+0x128>
   12388:	8c001415 	stw	r16,80(r17)
   1238c:	003fd206 	br	122d8 <_fflush_r+0xe8>
   12390:	88c00f17 	ldw	r3,60(r17)
   12394:	00ffac16 	blt	zero,r3,12248 <_fflush_r+0x58>
   12398:	003fcf06 	br	122d8 <_fflush_r+0xe8>
   1239c:	89400717 	ldw	r5,28(r17)
   123a0:	9809883a 	mov	r4,r19
   123a4:	000d883a 	mov	r6,zero
   123a8:	01c00044 	movi	r7,1
   123ac:	183ee83a 	callr	r3
   123b0:	1021883a 	mov	r16,r2
   123b4:	00bfffc4 	movi	r2,-1
   123b8:	80800326 	beq	r16,r2,123c8 <_fflush_r+0x1d8>
   123bc:	8940030b 	ldhu	r5,12(r17)
   123c0:	88c00a17 	ldw	r3,40(r17)
   123c4:	003fa806 	br	12268 <_fflush_r+0x78>
   123c8:	98c00017 	ldw	r3,0(r19)
   123cc:	00800744 	movi	r2,29
   123d0:	18bfde1e 	bne	r3,r2,1234c <_fflush_r+0x15c>
   123d4:	003fc006 	br	122d8 <_fflush_r+0xe8>

000123d8 <fflush>:
   123d8:	200b883a 	mov	r5,r4
   123dc:	20000426 	beq	r4,zero,123f0 <fflush+0x18>
   123e0:	00800074 	movhi	r2,1
   123e4:	109f0504 	addi	r2,r2,31764
   123e8:	11000017 	ldw	r4,0(r2)
   123ec:	00121f01 	jmpi	121f0 <_fflush_r>
   123f0:	00800074 	movhi	r2,1
   123f4:	109f0404 	addi	r2,r2,31760
   123f8:	11000017 	ldw	r4,0(r2)
   123fc:	01400074 	movhi	r5,1
   12400:	29487c04 	addi	r5,r5,8688
   12404:	0012ba81 	jmpi	12ba8 <_fwalk_reent>

00012408 <__fp_lock>:
   12408:	0005883a 	mov	r2,zero
   1240c:	f800283a 	ret

00012410 <__fp_unlock>:
   12410:	0005883a 	mov	r2,zero
   12414:	f800283a 	ret

00012418 <_cleanup_r>:
   12418:	01400074 	movhi	r5,1
   1241c:	294c8c04 	addi	r5,r5,12848
   12420:	0012b001 	jmpi	12b00 <_fwalk>

00012424 <__sfmoreglue>:
   12424:	defffc04 	addi	sp,sp,-16
   12428:	dc800215 	stw	r18,8(sp)
   1242c:	2825883a 	mov	r18,r5
   12430:	dc000015 	stw	r16,0(sp)
   12434:	01401704 	movi	r5,92
   12438:	2021883a 	mov	r16,r4
   1243c:	9009883a 	mov	r4,r18
   12440:	dfc00315 	stw	ra,12(sp)
   12444:	dc400115 	stw	r17,4(sp)
   12448:	00108a40 	call	108a4 <__mulsi3>
   1244c:	8009883a 	mov	r4,r16
   12450:	11400304 	addi	r5,r2,12
   12454:	1023883a 	mov	r17,r2
   12458:	00110140 	call	11014 <_malloc_r>
   1245c:	1021883a 	mov	r16,r2
   12460:	10000726 	beq	r2,zero,12480 <__sfmoreglue+0x5c>
   12464:	11000304 	addi	r4,r2,12
   12468:	10000015 	stw	zero,0(r2)
   1246c:	14800115 	stw	r18,4(r2)
   12470:	11000215 	stw	r4,8(r2)
   12474:	000b883a 	mov	r5,zero
   12478:	880d883a 	mov	r6,r17
   1247c:	0012e080 	call	12e08 <memset>
   12480:	8005883a 	mov	r2,r16
   12484:	dfc00317 	ldw	ra,12(sp)
   12488:	dc800217 	ldw	r18,8(sp)
   1248c:	dc400117 	ldw	r17,4(sp)
   12490:	dc000017 	ldw	r16,0(sp)
   12494:	dec00404 	addi	sp,sp,16
   12498:	f800283a 	ret

0001249c <_cleanup>:
   1249c:	00800074 	movhi	r2,1
   124a0:	109f0404 	addi	r2,r2,31760
   124a4:	11000017 	ldw	r4,0(r2)
   124a8:	00124181 	jmpi	12418 <_cleanup_r>

000124ac <__sinit>:
   124ac:	20800e17 	ldw	r2,56(r4)
   124b0:	1000401e 	bne	r2,zero,125b4 <__sinit+0x108>
   124b4:	21400117 	ldw	r5,4(r4)
   124b8:	01800074 	movhi	r6,1
   124bc:	31890604 	addi	r6,r6,9240
   124c0:	20c00217 	ldw	r3,8(r4)
   124c4:	21800f15 	stw	r6,60(r4)
   124c8:	2080bb04 	addi	r2,r4,748
   124cc:	02400044 	movi	r9,1
   124d0:	018000c4 	movi	r6,3
   124d4:	2180b915 	stw	r6,740(r4)
   124d8:	2080ba15 	stw	r2,744(r4)
   124dc:	22400e15 	stw	r9,56(r4)
   124e0:	20800317 	ldw	r2,12(r4)
   124e4:	2000b815 	stw	zero,736(r4)
   124e8:	02000074 	movhi	r8,1
   124ec:	420bb904 	addi	r8,r8,12004
   124f0:	01c00074 	movhi	r7,1
   124f4:	39cbce04 	addi	r7,r7,12088
   124f8:	01800074 	movhi	r6,1
   124fc:	318bf004 	addi	r6,r6,12224
   12500:	01000074 	movhi	r4,1
   12504:	210c0704 	addi	r4,r4,12316
   12508:	02800104 	movi	r10,4
   1250c:	28000015 	stw	zero,0(r5)
   12510:	28000115 	stw	zero,4(r5)
   12514:	28000215 	stw	zero,8(r5)
   12518:	2a80030d 	sth	r10,12(r5)
   1251c:	2800038d 	sth	zero,14(r5)
   12520:	28000415 	stw	zero,16(r5)
   12524:	28000515 	stw	zero,20(r5)
   12528:	28000615 	stw	zero,24(r5)
   1252c:	29400715 	stw	r5,28(r5)
   12530:	2a000815 	stw	r8,32(r5)
   12534:	29c00915 	stw	r7,36(r5)
   12538:	29800a15 	stw	r6,40(r5)
   1253c:	29000b15 	stw	r4,44(r5)
   12540:	01400284 	movi	r5,10
   12544:	18000015 	stw	zero,0(r3)
   12548:	18000115 	stw	zero,4(r3)
   1254c:	18000215 	stw	zero,8(r3)
   12550:	1940030d 	sth	r5,12(r3)
   12554:	1a40038d 	sth	r9,14(r3)
   12558:	18000415 	stw	zero,16(r3)
   1255c:	18000515 	stw	zero,20(r3)
   12560:	18000615 	stw	zero,24(r3)
   12564:	18c00715 	stw	r3,28(r3)
   12568:	1a000815 	stw	r8,32(r3)
   1256c:	19c00915 	stw	r7,36(r3)
   12570:	19800a15 	stw	r6,40(r3)
   12574:	19000b15 	stw	r4,44(r3)
   12578:	00c00484 	movi	r3,18
   1257c:	10c0030d 	sth	r3,12(r2)
   12580:	00c00084 	movi	r3,2
   12584:	10000015 	stw	zero,0(r2)
   12588:	10000115 	stw	zero,4(r2)
   1258c:	10000215 	stw	zero,8(r2)
   12590:	10c0038d 	sth	r3,14(r2)
   12594:	10000415 	stw	zero,16(r2)
   12598:	10000515 	stw	zero,20(r2)
   1259c:	10000615 	stw	zero,24(r2)
   125a0:	10800715 	stw	r2,28(r2)
   125a4:	12000815 	stw	r8,32(r2)
   125a8:	11c00915 	stw	r7,36(r2)
   125ac:	11800a15 	stw	r6,40(r2)
   125b0:	11000b15 	stw	r4,44(r2)
   125b4:	f800283a 	ret

000125b8 <__sfp>:
   125b8:	defffc04 	addi	sp,sp,-16
   125bc:	00800074 	movhi	r2,1
   125c0:	109f0404 	addi	r2,r2,31760
   125c4:	dc400115 	stw	r17,4(sp)
   125c8:	14400017 	ldw	r17,0(r2)
   125cc:	dc800215 	stw	r18,8(sp)
   125d0:	dfc00315 	stw	ra,12(sp)
   125d4:	88800e17 	ldw	r2,56(r17)
   125d8:	dc000015 	stw	r16,0(sp)
   125dc:	2025883a 	mov	r18,r4
   125e0:	10002826 	beq	r2,zero,12684 <__sfp+0xcc>
   125e4:	8c40b804 	addi	r17,r17,736
   125e8:	043fffc4 	movi	r16,-1
   125ec:	89400117 	ldw	r5,4(r17)
   125f0:	88800217 	ldw	r2,8(r17)
   125f4:	297fffc4 	addi	r5,r5,-1
   125f8:	28000a16 	blt	r5,zero,12624 <__sfp+0x6c>
   125fc:	10c0030f 	ldh	r3,12(r2)
   12600:	18000c26 	beq	r3,zero,12634 <__sfp+0x7c>
   12604:	10c01a04 	addi	r3,r2,104
   12608:	00000206 	br	12614 <__sfp+0x5c>
   1260c:	19bfe90f 	ldh	r6,-92(r3)
   12610:	30000826 	beq	r6,zero,12634 <__sfp+0x7c>
   12614:	297fffc4 	addi	r5,r5,-1
   12618:	18bffd04 	addi	r2,r3,-12
   1261c:	18c01704 	addi	r3,r3,92
   12620:	2c3ffa1e 	bne	r5,r16,1260c <__sfp+0x54>
   12624:	88800017 	ldw	r2,0(r17)
   12628:	10001926 	beq	r2,zero,12690 <__sfp+0xd8>
   1262c:	1023883a 	mov	r17,r2
   12630:	003fee06 	br	125ec <__sfp+0x34>
   12634:	00ffffc4 	movi	r3,-1
   12638:	10c0038d 	sth	r3,14(r2)
   1263c:	00c00044 	movi	r3,1
   12640:	10c0030d 	sth	r3,12(r2)
   12644:	10000015 	stw	zero,0(r2)
   12648:	10000215 	stw	zero,8(r2)
   1264c:	10000115 	stw	zero,4(r2)
   12650:	10000415 	stw	zero,16(r2)
   12654:	10000515 	stw	zero,20(r2)
   12658:	10000615 	stw	zero,24(r2)
   1265c:	10000c15 	stw	zero,48(r2)
   12660:	10000d15 	stw	zero,52(r2)
   12664:	10001115 	stw	zero,68(r2)
   12668:	10001215 	stw	zero,72(r2)
   1266c:	dfc00317 	ldw	ra,12(sp)
   12670:	dc800217 	ldw	r18,8(sp)
   12674:	dc400117 	ldw	r17,4(sp)
   12678:	dc000017 	ldw	r16,0(sp)
   1267c:	dec00404 	addi	sp,sp,16
   12680:	f800283a 	ret
   12684:	8809883a 	mov	r4,r17
   12688:	00124ac0 	call	124ac <__sinit>
   1268c:	003fd506 	br	125e4 <__sfp+0x2c>
   12690:	9009883a 	mov	r4,r18
   12694:	01400104 	movi	r5,4
   12698:	00124240 	call	12424 <__sfmoreglue>
   1269c:	88800015 	stw	r2,0(r17)
   126a0:	103fe21e 	bne	r2,zero,1262c <__sfp+0x74>
   126a4:	00800304 	movi	r2,12
   126a8:	90800015 	stw	r2,0(r18)
   126ac:	0005883a 	mov	r2,zero
   126b0:	003fee06 	br	1266c <__sfp+0xb4>

000126b4 <__sfp_lock_acquire>:
   126b4:	f800283a 	ret

000126b8 <__sfp_lock_release>:
   126b8:	f800283a 	ret

000126bc <__sinit_lock_acquire>:
   126bc:	f800283a 	ret

000126c0 <__sinit_lock_release>:
   126c0:	f800283a 	ret

000126c4 <__fp_lock_all>:
   126c4:	00800074 	movhi	r2,1
   126c8:	109f0504 	addi	r2,r2,31764
   126cc:	11000017 	ldw	r4,0(r2)
   126d0:	01400074 	movhi	r5,1
   126d4:	29490204 	addi	r5,r5,9224
   126d8:	0012b001 	jmpi	12b00 <_fwalk>

000126dc <__fp_unlock_all>:
   126dc:	00800074 	movhi	r2,1
   126e0:	109f0504 	addi	r2,r2,31764
   126e4:	11000017 	ldw	r4,0(r2)
   126e8:	01400074 	movhi	r5,1
   126ec:	29490404 	addi	r5,r5,9232
   126f0:	0012b001 	jmpi	12b00 <_fwalk>

000126f4 <_malloc_trim_r>:
   126f4:	defffb04 	addi	sp,sp,-20
   126f8:	dcc00315 	stw	r19,12(sp)
   126fc:	dc800215 	stw	r18,8(sp)
   12700:	dc400115 	stw	r17,4(sp)
   12704:	dc000015 	stw	r16,0(sp)
   12708:	2827883a 	mov	r19,r5
   1270c:	dfc00415 	stw	ra,16(sp)
   12710:	04400074 	movhi	r17,1
   12714:	8c598004 	addi	r17,r17,26112
   12718:	2021883a 	mov	r16,r4
   1271c:	00139ac0 	call	139ac <__malloc_lock>
   12720:	88800217 	ldw	r2,8(r17)
   12724:	14800117 	ldw	r18,4(r2)
   12728:	00bfff04 	movi	r2,-4
   1272c:	90a4703a 	and	r18,r18,r2
   12730:	9083fbc4 	addi	r2,r18,4079
   12734:	14e7c83a 	sub	r19,r2,r19
   12738:	9826d33a 	srli	r19,r19,12
   1273c:	0083ffc4 	movi	r2,4095
   12740:	9cffffc4 	addi	r19,r19,-1
   12744:	9826933a 	slli	r19,r19,12
   12748:	14c0060e 	bge	r2,r19,12764 <_malloc_trim_r+0x70>
   1274c:	8009883a 	mov	r4,r16
   12750:	000b883a 	mov	r5,zero
   12754:	00120180 	call	12018 <_sbrk_r>
   12758:	88c00217 	ldw	r3,8(r17)
   1275c:	1c87883a 	add	r3,r3,r18
   12760:	10c00a26 	beq	r2,r3,1278c <_malloc_trim_r+0x98>
   12764:	8009883a 	mov	r4,r16
   12768:	00139cc0 	call	139cc <__malloc_unlock>
   1276c:	0005883a 	mov	r2,zero
   12770:	dfc00417 	ldw	ra,16(sp)
   12774:	dcc00317 	ldw	r19,12(sp)
   12778:	dc800217 	ldw	r18,8(sp)
   1277c:	dc400117 	ldw	r17,4(sp)
   12780:	dc000017 	ldw	r16,0(sp)
   12784:	dec00504 	addi	sp,sp,20
   12788:	f800283a 	ret
   1278c:	8009883a 	mov	r4,r16
   12790:	04cbc83a 	sub	r5,zero,r19
   12794:	00120180 	call	12018 <_sbrk_r>
   12798:	00ffffc4 	movi	r3,-1
   1279c:	10c01326 	beq	r2,r3,127ec <_malloc_trim_r+0xf8>
   127a0:	008000b4 	movhi	r2,2
   127a4:	10a5be04 	addi	r2,r2,-26888
   127a8:	11000017 	ldw	r4,0(r2)
   127ac:	88c00217 	ldw	r3,8(r17)
   127b0:	94e5c83a 	sub	r18,r18,r19
   127b4:	94800054 	ori	r18,r18,1
   127b8:	24e7c83a 	sub	r19,r4,r19
   127bc:	1c800115 	stw	r18,4(r3)
   127c0:	8009883a 	mov	r4,r16
   127c4:	14c00015 	stw	r19,0(r2)
   127c8:	00139cc0 	call	139cc <__malloc_unlock>
   127cc:	00800044 	movi	r2,1
   127d0:	dfc00417 	ldw	ra,16(sp)
   127d4:	dcc00317 	ldw	r19,12(sp)
   127d8:	dc800217 	ldw	r18,8(sp)
   127dc:	dc400117 	ldw	r17,4(sp)
   127e0:	dc000017 	ldw	r16,0(sp)
   127e4:	dec00504 	addi	sp,sp,20
   127e8:	f800283a 	ret
   127ec:	8009883a 	mov	r4,r16
   127f0:	000b883a 	mov	r5,zero
   127f4:	00120180 	call	12018 <_sbrk_r>
   127f8:	88c00217 	ldw	r3,8(r17)
   127fc:	014003c4 	movi	r5,15
   12800:	10c9c83a 	sub	r4,r2,r3
   12804:	293fd70e 	bge	r5,r4,12764 <_malloc_trim_r+0x70>
   12808:	01400074 	movhi	r5,1
   1280c:	295f0604 	addi	r5,r5,31768
   12810:	29400017 	ldw	r5,0(r5)
   12814:	21000054 	ori	r4,r4,1
   12818:	19000115 	stw	r4,4(r3)
   1281c:	1145c83a 	sub	r2,r2,r5
   12820:	014000b4 	movhi	r5,2
   12824:	2965be04 	addi	r5,r5,-26888
   12828:	28800015 	stw	r2,0(r5)
   1282c:	003fcd06 	br	12764 <_malloc_trim_r+0x70>

00012830 <_free_r>:
   12830:	defffd04 	addi	sp,sp,-12
   12834:	dc400115 	stw	r17,4(sp)
   12838:	dc000015 	stw	r16,0(sp)
   1283c:	dfc00215 	stw	ra,8(sp)
   12840:	2821883a 	mov	r16,r5
   12844:	2023883a 	mov	r17,r4
   12848:	28004b26 	beq	r5,zero,12978 <_free_r+0x148>
   1284c:	00139ac0 	call	139ac <__malloc_lock>
   12850:	823fff17 	ldw	r8,-4(r16)
   12854:	00bfff84 	movi	r2,-2
   12858:	81bffe04 	addi	r6,r16,-8
   1285c:	4084703a 	and	r2,r8,r2
   12860:	3087883a 	add	r3,r6,r2
   12864:	01400074 	movhi	r5,1
   12868:	29598004 	addi	r5,r5,26112
   1286c:	1a400117 	ldw	r9,4(r3)
   12870:	29000217 	ldw	r4,8(r5)
   12874:	01ffff04 	movi	r7,-4
   12878:	49ce703a 	and	r7,r9,r7
   1287c:	20c06526 	beq	r4,r3,12a14 <_free_r+0x1e4>
   12880:	19c00115 	stw	r7,4(r3)
   12884:	4200004c 	andi	r8,r8,1
   12888:	40003026 	beq	r8,zero,1294c <_free_r+0x11c>
   1288c:	0009883a 	mov	r4,zero
   12890:	19d1883a 	add	r8,r3,r7
   12894:	42000117 	ldw	r8,4(r8)
   12898:	4200004c 	andi	r8,r8,1
   1289c:	4000061e 	bne	r8,zero,128b8 <_free_r+0x88>
   128a0:	11c5883a 	add	r2,r2,r7
   128a4:	19c00217 	ldw	r7,8(r3)
   128a8:	20004e26 	beq	r4,zero,129e4 <_free_r+0x1b4>
   128ac:	18c00317 	ldw	r3,12(r3)
   128b0:	38c00315 	stw	r3,12(r7)
   128b4:	19c00215 	stw	r7,8(r3)
   128b8:	11c00054 	ori	r7,r2,1
   128bc:	3087883a 	add	r3,r6,r2
   128c0:	31c00115 	stw	r7,4(r6)
   128c4:	18800015 	stw	r2,0(r3)
   128c8:	20001a1e 	bne	r4,zero,12934 <_free_r+0x104>
   128cc:	00c07fc4 	movi	r3,511
   128d0:	18802e2e 	bgeu	r3,r2,1298c <_free_r+0x15c>
   128d4:	1006d27a 	srli	r3,r2,9
   128d8:	01000104 	movi	r4,4
   128dc:	20c06636 	bltu	r4,r3,12a78 <_free_r+0x248>
   128e0:	1008d1ba 	srli	r4,r2,6
   128e4:	21000e04 	addi	r4,r4,56
   128e8:	210f883a 	add	r7,r4,r4
   128ec:	39cf883a 	add	r7,r7,r7
   128f0:	39cf883a 	add	r7,r7,r7
   128f4:	29cf883a 	add	r7,r5,r7
   128f8:	38c00217 	ldw	r3,8(r7)
   128fc:	01400074 	movhi	r5,1
   12900:	29598004 	addi	r5,r5,26112
   12904:	19c06126 	beq	r3,r7,12a8c <_free_r+0x25c>
   12908:	013fff04 	movi	r4,-4
   1290c:	19400117 	ldw	r5,4(r3)
   12910:	290a703a 	and	r5,r5,r4
   12914:	1140022e 	bgeu	r2,r5,12920 <_free_r+0xf0>
   12918:	18c00217 	ldw	r3,8(r3)
   1291c:	38fffb1e 	bne	r7,r3,1290c <_free_r+0xdc>
   12920:	18800317 	ldw	r2,12(r3)
   12924:	30800315 	stw	r2,12(r6)
   12928:	30c00215 	stw	r3,8(r6)
   1292c:	11800215 	stw	r6,8(r2)
   12930:	19800315 	stw	r6,12(r3)
   12934:	8809883a 	mov	r4,r17
   12938:	dfc00217 	ldw	ra,8(sp)
   1293c:	dc400117 	ldw	r17,4(sp)
   12940:	dc000017 	ldw	r16,0(sp)
   12944:	dec00304 	addi	sp,sp,12
   12948:	00139cc1 	jmpi	139cc <__malloc_unlock>
   1294c:	813ffe17 	ldw	r4,-8(r16)
   12950:	2a400204 	addi	r9,r5,8
   12954:	310dc83a 	sub	r6,r6,r4
   12958:	32000217 	ldw	r8,8(r6)
   1295c:	1105883a 	add	r2,r2,r4
   12960:	42404326 	beq	r8,r9,12a70 <_free_r+0x240>
   12964:	32400317 	ldw	r9,12(r6)
   12968:	0009883a 	mov	r4,zero
   1296c:	42400315 	stw	r9,12(r8)
   12970:	4a000215 	stw	r8,8(r9)
   12974:	003fc606 	br	12890 <_free_r+0x60>
   12978:	dfc00217 	ldw	ra,8(sp)
   1297c:	dc400117 	ldw	r17,4(sp)
   12980:	dc000017 	ldw	r16,0(sp)
   12984:	dec00304 	addi	sp,sp,12
   12988:	f800283a 	ret
   1298c:	1004d0fa 	srli	r2,r2,3
   12990:	02000044 	movi	r8,1
   12994:	29c00117 	ldw	r7,4(r5)
   12998:	1087883a 	add	r3,r2,r2
   1299c:	18c7883a 	add	r3,r3,r3
   129a0:	1005d0ba 	srai	r2,r2,2
   129a4:	18c7883a 	add	r3,r3,r3
   129a8:	28c7883a 	add	r3,r5,r3
   129ac:	19000217 	ldw	r4,8(r3)
   129b0:	4084983a 	sll	r2,r8,r2
   129b4:	30c00315 	stw	r3,12(r6)
   129b8:	31000215 	stw	r4,8(r6)
   129bc:	11c4b03a 	or	r2,r2,r7
   129c0:	21800315 	stw	r6,12(r4)
   129c4:	8809883a 	mov	r4,r17
   129c8:	28800115 	stw	r2,4(r5)
   129cc:	19800215 	stw	r6,8(r3)
   129d0:	dfc00217 	ldw	ra,8(sp)
   129d4:	dc400117 	ldw	r17,4(sp)
   129d8:	dc000017 	ldw	r16,0(sp)
   129dc:	dec00304 	addi	sp,sp,12
   129e0:	00139cc1 	jmpi	139cc <__malloc_unlock>
   129e4:	02000074 	movhi	r8,1
   129e8:	42198204 	addi	r8,r8,26120
   129ec:	3a3faf1e 	bne	r7,r8,128ac <_free_r+0x7c>
   129f0:	29800515 	stw	r6,20(r5)
   129f4:	29800415 	stw	r6,16(r5)
   129f8:	11000054 	ori	r4,r2,1
   129fc:	3087883a 	add	r3,r6,r2
   12a00:	31c00315 	stw	r7,12(r6)
   12a04:	31c00215 	stw	r7,8(r6)
   12a08:	31000115 	stw	r4,4(r6)
   12a0c:	18800015 	stw	r2,0(r3)
   12a10:	003fc806 	br	12934 <_free_r+0x104>
   12a14:	4200004c 	andi	r8,r8,1
   12a18:	3885883a 	add	r2,r7,r2
   12a1c:	4000071e 	bne	r8,zero,12a3c <_free_r+0x20c>
   12a20:	81fffe17 	ldw	r7,-8(r16)
   12a24:	31cdc83a 	sub	r6,r6,r7
   12a28:	30c00317 	ldw	r3,12(r6)
   12a2c:	31000217 	ldw	r4,8(r6)
   12a30:	11c5883a 	add	r2,r2,r7
   12a34:	20c00315 	stw	r3,12(r4)
   12a38:	19000215 	stw	r4,8(r3)
   12a3c:	00c00074 	movhi	r3,1
   12a40:	18df0704 	addi	r3,r3,31772
   12a44:	18c00017 	ldw	r3,0(r3)
   12a48:	11000054 	ori	r4,r2,1
   12a4c:	31000115 	stw	r4,4(r6)
   12a50:	29800215 	stw	r6,8(r5)
   12a54:	10ffb736 	bltu	r2,r3,12934 <_free_r+0x104>
   12a58:	008000b4 	movhi	r2,2
   12a5c:	10a5b604 	addi	r2,r2,-26920
   12a60:	11400017 	ldw	r5,0(r2)
   12a64:	8809883a 	mov	r4,r17
   12a68:	00126f40 	call	126f4 <_malloc_trim_r>
   12a6c:	003fb106 	br	12934 <_free_r+0x104>
   12a70:	01000044 	movi	r4,1
   12a74:	003f8606 	br	12890 <_free_r+0x60>
   12a78:	01000504 	movi	r4,20
   12a7c:	20c00b36 	bltu	r4,r3,12aac <_free_r+0x27c>
   12a80:	190016c4 	addi	r4,r3,91
   12a84:	210f883a 	add	r7,r4,r4
   12a88:	003f9806 	br	128ec <_free_r+0xbc>
   12a8c:	2009d0ba 	srai	r4,r4,2
   12a90:	00800044 	movi	r2,1
   12a94:	29c00117 	ldw	r7,4(r5)
   12a98:	1108983a 	sll	r4,r2,r4
   12a9c:	1805883a 	mov	r2,r3
   12aa0:	21c8b03a 	or	r4,r4,r7
   12aa4:	29000115 	stw	r4,4(r5)
   12aa8:	003f9e06 	br	12924 <_free_r+0xf4>
   12aac:	01001504 	movi	r4,84
   12ab0:	20c00436 	bltu	r4,r3,12ac4 <_free_r+0x294>
   12ab4:	1008d33a 	srli	r4,r2,12
   12ab8:	21001b84 	addi	r4,r4,110
   12abc:	210f883a 	add	r7,r4,r4
   12ac0:	003f8a06 	br	128ec <_free_r+0xbc>
   12ac4:	01005504 	movi	r4,340
   12ac8:	20c00436 	bltu	r4,r3,12adc <_free_r+0x2ac>
   12acc:	1008d3fa 	srli	r4,r2,15
   12ad0:	21001dc4 	addi	r4,r4,119
   12ad4:	210f883a 	add	r7,r4,r4
   12ad8:	003f8406 	br	128ec <_free_r+0xbc>
   12adc:	01015504 	movi	r4,1364
   12ae0:	20c00436 	bltu	r4,r3,12af4 <_free_r+0x2c4>
   12ae4:	1008d4ba 	srli	r4,r2,18
   12ae8:	21001f04 	addi	r4,r4,124
   12aec:	210f883a 	add	r7,r4,r4
   12af0:	003f7e06 	br	128ec <_free_r+0xbc>
   12af4:	01c03f04 	movi	r7,252
   12af8:	01001f84 	movi	r4,126
   12afc:	003f7b06 	br	128ec <_free_r+0xbc>

00012b00 <_fwalk>:
   12b00:	defff904 	addi	sp,sp,-28
   12b04:	dcc00315 	stw	r19,12(sp)
   12b08:	24c0b804 	addi	r19,r4,736
   12b0c:	dd400515 	stw	r21,20(sp)
   12b10:	dd000415 	stw	r20,16(sp)
   12b14:	dfc00615 	stw	ra,24(sp)
   12b18:	dc800215 	stw	r18,8(sp)
   12b1c:	dc400115 	stw	r17,4(sp)
   12b20:	dc000015 	stw	r16,0(sp)
   12b24:	282b883a 	mov	r21,r5
   12b28:	0029883a 	mov	r20,zero
   12b2c:	00126b40 	call	126b4 <__sfp_lock_acquire>
   12b30:	98001226 	beq	r19,zero,12b7c <_fwalk+0x7c>
   12b34:	04bfffc4 	movi	r18,-1
   12b38:	9c400117 	ldw	r17,4(r19)
   12b3c:	9c000217 	ldw	r16,8(r19)
   12b40:	8c7fffc4 	addi	r17,r17,-1
   12b44:	88000b16 	blt	r17,zero,12b74 <_fwalk+0x74>
   12b48:	84000304 	addi	r16,r16,12
   12b4c:	80c0000f 	ldh	r3,0(r16)
   12b50:	8c7fffc4 	addi	r17,r17,-1
   12b54:	813ffd04 	addi	r4,r16,-12
   12b58:	18000426 	beq	r3,zero,12b6c <_fwalk+0x6c>
   12b5c:	80c0008f 	ldh	r3,2(r16)
   12b60:	1c800226 	beq	r3,r18,12b6c <_fwalk+0x6c>
   12b64:	a83ee83a 	callr	r21
   12b68:	a0a8b03a 	or	r20,r20,r2
   12b6c:	84001704 	addi	r16,r16,92
   12b70:	8cbff61e 	bne	r17,r18,12b4c <_fwalk+0x4c>
   12b74:	9cc00017 	ldw	r19,0(r19)
   12b78:	983fef1e 	bne	r19,zero,12b38 <_fwalk+0x38>
   12b7c:	00126b80 	call	126b8 <__sfp_lock_release>
   12b80:	a005883a 	mov	r2,r20
   12b84:	dfc00617 	ldw	ra,24(sp)
   12b88:	dd400517 	ldw	r21,20(sp)
   12b8c:	dd000417 	ldw	r20,16(sp)
   12b90:	dcc00317 	ldw	r19,12(sp)
   12b94:	dc800217 	ldw	r18,8(sp)
   12b98:	dc400117 	ldw	r17,4(sp)
   12b9c:	dc000017 	ldw	r16,0(sp)
   12ba0:	dec00704 	addi	sp,sp,28
   12ba4:	f800283a 	ret

00012ba8 <_fwalk_reent>:
   12ba8:	defff804 	addi	sp,sp,-32
   12bac:	dcc00315 	stw	r19,12(sp)
   12bb0:	24c0b804 	addi	r19,r4,736
   12bb4:	dd800615 	stw	r22,24(sp)
   12bb8:	dd400515 	stw	r21,20(sp)
   12bbc:	dd000415 	stw	r20,16(sp)
   12bc0:	dfc00715 	stw	ra,28(sp)
   12bc4:	dc800215 	stw	r18,8(sp)
   12bc8:	dc400115 	stw	r17,4(sp)
   12bcc:	dc000015 	stw	r16,0(sp)
   12bd0:	2029883a 	mov	r20,r4
   12bd4:	282b883a 	mov	r21,r5
   12bd8:	002d883a 	mov	r22,zero
   12bdc:	00126b40 	call	126b4 <__sfp_lock_acquire>
   12be0:	98001326 	beq	r19,zero,12c30 <_fwalk_reent+0x88>
   12be4:	04bfffc4 	movi	r18,-1
   12be8:	9c400117 	ldw	r17,4(r19)
   12bec:	9c000217 	ldw	r16,8(r19)
   12bf0:	8c7fffc4 	addi	r17,r17,-1
   12bf4:	88000c16 	blt	r17,zero,12c28 <_fwalk_reent+0x80>
   12bf8:	84000304 	addi	r16,r16,12
   12bfc:	80c0000f 	ldh	r3,0(r16)
   12c00:	8c7fffc4 	addi	r17,r17,-1
   12c04:	817ffd04 	addi	r5,r16,-12
   12c08:	18000526 	beq	r3,zero,12c20 <_fwalk_reent+0x78>
   12c0c:	80c0008f 	ldh	r3,2(r16)
   12c10:	a009883a 	mov	r4,r20
   12c14:	1c800226 	beq	r3,r18,12c20 <_fwalk_reent+0x78>
   12c18:	a83ee83a 	callr	r21
   12c1c:	b0acb03a 	or	r22,r22,r2
   12c20:	84001704 	addi	r16,r16,92
   12c24:	8cbff51e 	bne	r17,r18,12bfc <_fwalk_reent+0x54>
   12c28:	9cc00017 	ldw	r19,0(r19)
   12c2c:	983fee1e 	bne	r19,zero,12be8 <_fwalk_reent+0x40>
   12c30:	00126b80 	call	126b8 <__sfp_lock_release>
   12c34:	b005883a 	mov	r2,r22
   12c38:	dfc00717 	ldw	ra,28(sp)
   12c3c:	dd800617 	ldw	r22,24(sp)
   12c40:	dd400517 	ldw	r21,20(sp)
   12c44:	dd000417 	ldw	r20,16(sp)
   12c48:	dcc00317 	ldw	r19,12(sp)
   12c4c:	dc800217 	ldw	r18,8(sp)
   12c50:	dc400117 	ldw	r17,4(sp)
   12c54:	dc000017 	ldw	r16,0(sp)
   12c58:	dec00804 	addi	sp,sp,32
   12c5c:	f800283a 	ret

00012c60 <__smakebuf_r>:
   12c60:	2880030b 	ldhu	r2,12(r5)
   12c64:	deffed04 	addi	sp,sp,-76
   12c68:	dc401015 	stw	r17,64(sp)
   12c6c:	10c0008c 	andi	r3,r2,2
   12c70:	18ffffcc 	andi	r3,r3,65535
   12c74:	18e0001c 	xori	r3,r3,32768
   12c78:	dc000f15 	stw	r16,60(sp)
   12c7c:	dfc01215 	stw	ra,72(sp)
   12c80:	dc801115 	stw	r18,68(sp)
   12c84:	18e00004 	addi	r3,r3,-32768
   12c88:	2821883a 	mov	r16,r5
   12c8c:	2023883a 	mov	r17,r4
   12c90:	1800381e 	bne	r3,zero,12d74 <__smakebuf_r+0x114>
   12c94:	2940038f 	ldh	r5,14(r5)
   12c98:	28002d16 	blt	r5,zero,12d50 <__smakebuf_r+0xf0>
   12c9c:	d80d883a 	mov	r6,sp
   12ca0:	00132440 	call	13244 <_fstat_r>
   12ca4:	10002916 	blt	r2,zero,12d4c <__smakebuf_r+0xec>
   12ca8:	d8800117 	ldw	r2,4(sp)
   12cac:	00e00014 	movui	r3,32768
   12cb0:	10bc000c 	andi	r2,r2,61440
   12cb4:	10c03c26 	beq	r2,r3,12da8 <__smakebuf_r+0x148>
   12cb8:	80c0030b 	ldhu	r3,12(r16)
   12cbc:	18c20014 	ori	r3,r3,2048
   12cc0:	80c0030d 	sth	r3,12(r16)
   12cc4:	00c80004 	movi	r3,8192
   12cc8:	10c00c1e 	bne	r2,r3,12cfc <__smakebuf_r+0x9c>
   12ccc:	8140038f 	ldh	r5,14(r16)
   12cd0:	8809883a 	mov	r4,r17
   12cd4:	00132ac0 	call	132ac <_isatty_r>
   12cd8:	10000826 	beq	r2,zero,12cfc <__smakebuf_r+0x9c>
   12cdc:	80c0030b 	ldhu	r3,12(r16)
   12ce0:	808010c4 	addi	r2,r16,67
   12ce4:	80800015 	stw	r2,0(r16)
   12ce8:	18c00054 	ori	r3,r3,1
   12cec:	80800415 	stw	r2,16(r16)
   12cf0:	00800044 	movi	r2,1
   12cf4:	80c0030d 	sth	r3,12(r16)
   12cf8:	80800515 	stw	r2,20(r16)
   12cfc:	04810004 	movi	r18,1024
   12d00:	8809883a 	mov	r4,r17
   12d04:	900b883a 	mov	r5,r18
   12d08:	00110140 	call	11014 <_malloc_r>
   12d0c:	10003026 	beq	r2,zero,12dd0 <__smakebuf_r+0x170>
   12d10:	80c0030b 	ldhu	r3,12(r16)
   12d14:	01000074 	movhi	r4,1
   12d18:	21090604 	addi	r4,r4,9240
   12d1c:	89000f15 	stw	r4,60(r17)
   12d20:	18c02014 	ori	r3,r3,128
   12d24:	80c0030d 	sth	r3,12(r16)
   12d28:	80800015 	stw	r2,0(r16)
   12d2c:	80800415 	stw	r2,16(r16)
   12d30:	84800515 	stw	r18,20(r16)
   12d34:	dfc01217 	ldw	ra,72(sp)
   12d38:	dc801117 	ldw	r18,68(sp)
   12d3c:	dc401017 	ldw	r17,64(sp)
   12d40:	dc000f17 	ldw	r16,60(sp)
   12d44:	dec01304 	addi	sp,sp,76
   12d48:	f800283a 	ret
   12d4c:	8080030b 	ldhu	r2,12(r16)
   12d50:	10c0200c 	andi	r3,r2,128
   12d54:	18ffffcc 	andi	r3,r3,65535
   12d58:	18e0001c 	xori	r3,r3,32768
   12d5c:	18e00004 	addi	r3,r3,-32768
   12d60:	18000f1e 	bne	r3,zero,12da0 <__smakebuf_r+0x140>
   12d64:	04810004 	movi	r18,1024
   12d68:	10820014 	ori	r2,r2,2048
   12d6c:	8080030d 	sth	r2,12(r16)
   12d70:	003fe306 	br	12d00 <__smakebuf_r+0xa0>
   12d74:	288010c4 	addi	r2,r5,67
   12d78:	28800015 	stw	r2,0(r5)
   12d7c:	28800415 	stw	r2,16(r5)
   12d80:	00800044 	movi	r2,1
   12d84:	28800515 	stw	r2,20(r5)
   12d88:	dfc01217 	ldw	ra,72(sp)
   12d8c:	dc801117 	ldw	r18,68(sp)
   12d90:	dc401017 	ldw	r17,64(sp)
   12d94:	dc000f17 	ldw	r16,60(sp)
   12d98:	dec01304 	addi	sp,sp,76
   12d9c:	f800283a 	ret
   12da0:	04801004 	movi	r18,64
   12da4:	003ff006 	br	12d68 <__smakebuf_r+0x108>
   12da8:	81000a17 	ldw	r4,40(r16)
   12dac:	00c00074 	movhi	r3,1
   12db0:	18cbf004 	addi	r3,r3,12224
   12db4:	20ffc01e 	bne	r4,r3,12cb8 <__smakebuf_r+0x58>
   12db8:	8080030b 	ldhu	r2,12(r16)
   12dbc:	00c10004 	movi	r3,1024
   12dc0:	80c01315 	stw	r3,76(r16)
   12dc4:	10c4b03a 	or	r2,r2,r3
   12dc8:	8080030d 	sth	r2,12(r16)
   12dcc:	003fcb06 	br	12cfc <__smakebuf_r+0x9c>
   12dd0:	8080030b 	ldhu	r2,12(r16)
   12dd4:	10c0800c 	andi	r3,r2,512
   12dd8:	18ffffcc 	andi	r3,r3,65535
   12ddc:	18e0001c 	xori	r3,r3,32768
   12de0:	18e00004 	addi	r3,r3,-32768
   12de4:	183fd31e 	bne	r3,zero,12d34 <__smakebuf_r+0xd4>
   12de8:	10800094 	ori	r2,r2,2
   12dec:	80c010c4 	addi	r3,r16,67
   12df0:	8080030d 	sth	r2,12(r16)
   12df4:	00800044 	movi	r2,1
   12df8:	80c00015 	stw	r3,0(r16)
   12dfc:	80c00415 	stw	r3,16(r16)
   12e00:	80800515 	stw	r2,20(r16)
   12e04:	003fcb06 	br	12d34 <__smakebuf_r+0xd4>

00012e08 <memset>:
   12e08:	00c000c4 	movi	r3,3
   12e0c:	2005883a 	mov	r2,r4
   12e10:	29403fcc 	andi	r5,r5,255
   12e14:	19802d2e 	bgeu	r3,r6,12ecc <memset+0xc4>
   12e18:	20c6703a 	and	r3,r4,r3
   12e1c:	18002e1e 	bne	r3,zero,12ed8 <memset+0xd0>
   12e20:	2806923a 	slli	r3,r5,8
   12e24:	010003c4 	movi	r4,15
   12e28:	3011883a 	mov	r8,r6
   12e2c:	1946b03a 	or	r3,r3,r5
   12e30:	180e943a 	slli	r7,r3,16
   12e34:	38ceb03a 	or	r7,r7,r3
   12e38:	1007883a 	mov	r3,r2
   12e3c:	21800f2e 	bgeu	r4,r6,12e7c <memset+0x74>
   12e40:	19c00015 	stw	r7,0(r3)
   12e44:	19c00115 	stw	r7,4(r3)
   12e48:	19c00215 	stw	r7,8(r3)
   12e4c:	19c00315 	stw	r7,12(r3)
   12e50:	423ffc04 	addi	r8,r8,-16
   12e54:	18c00404 	addi	r3,r3,16
   12e58:	223ff936 	bltu	r4,r8,12e40 <memset+0x38>
   12e5c:	30fffc04 	addi	r3,r6,-16
   12e60:	1806d13a 	srli	r3,r3,4
   12e64:	318003cc 	andi	r6,r6,15
   12e68:	010000c4 	movi	r4,3
   12e6c:	18c00044 	addi	r3,r3,1
   12e70:	1806913a 	slli	r3,r3,4
   12e74:	10c7883a 	add	r3,r2,r3
   12e78:	21800e2e 	bgeu	r4,r6,12eb4 <memset+0xac>
   12e7c:	1813883a 	mov	r9,r3
   12e80:	3011883a 	mov	r8,r6
   12e84:	010000c4 	movi	r4,3
   12e88:	49c00015 	stw	r7,0(r9)
   12e8c:	423fff04 	addi	r8,r8,-4
   12e90:	4a400104 	addi	r9,r9,4
   12e94:	223ffc36 	bltu	r4,r8,12e88 <memset+0x80>
   12e98:	313fff04 	addi	r4,r6,-4
   12e9c:	2008d0ba 	srli	r4,r4,2
   12ea0:	318000cc 	andi	r6,r6,3
   12ea4:	21000044 	addi	r4,r4,1
   12ea8:	2109883a 	add	r4,r4,r4
   12eac:	2109883a 	add	r4,r4,r4
   12eb0:	1907883a 	add	r3,r3,r4
   12eb4:	30000a26 	beq	r6,zero,12ee0 <memset+0xd8>
   12eb8:	198d883a 	add	r6,r3,r6
   12ebc:	19400005 	stb	r5,0(r3)
   12ec0:	18c00044 	addi	r3,r3,1
   12ec4:	19bffd1e 	bne	r3,r6,12ebc <memset+0xb4>
   12ec8:	f800283a 	ret
   12ecc:	2007883a 	mov	r3,r4
   12ed0:	303ff91e 	bne	r6,zero,12eb8 <memset+0xb0>
   12ed4:	00000206 	br	12ee0 <memset+0xd8>
   12ed8:	2007883a 	mov	r3,r4
   12edc:	003ff606 	br	12eb8 <memset+0xb0>
   12ee0:	f800283a 	ret

00012ee4 <__sread>:
   12ee4:	defffe04 	addi	sp,sp,-8
   12ee8:	dc000015 	stw	r16,0(sp)
   12eec:	2821883a 	mov	r16,r5
   12ef0:	2940038f 	ldh	r5,14(r5)
   12ef4:	dfc00115 	stw	ra,4(sp)
   12ef8:	001337c0 	call	1337c <_read_r>
   12efc:	10000716 	blt	r2,zero,12f1c <__sread+0x38>
   12f00:	80c01417 	ldw	r3,80(r16)
   12f04:	1887883a 	add	r3,r3,r2
   12f08:	80c01415 	stw	r3,80(r16)
   12f0c:	dfc00117 	ldw	ra,4(sp)
   12f10:	dc000017 	ldw	r16,0(sp)
   12f14:	dec00204 	addi	sp,sp,8
   12f18:	f800283a 	ret
   12f1c:	80c0030b 	ldhu	r3,12(r16)
   12f20:	18fbffcc 	andi	r3,r3,61439
   12f24:	80c0030d 	sth	r3,12(r16)
   12f28:	dfc00117 	ldw	ra,4(sp)
   12f2c:	dc000017 	ldw	r16,0(sp)
   12f30:	dec00204 	addi	sp,sp,8
   12f34:	f800283a 	ret

00012f38 <__swrite>:
   12f38:	2880030b 	ldhu	r2,12(r5)
   12f3c:	defffb04 	addi	sp,sp,-20
   12f40:	dcc00315 	stw	r19,12(sp)
   12f44:	10c0400c 	andi	r3,r2,256
   12f48:	18ffffcc 	andi	r3,r3,65535
   12f4c:	18e0001c 	xori	r3,r3,32768
   12f50:	dc800215 	stw	r18,8(sp)
   12f54:	dc400115 	stw	r17,4(sp)
   12f58:	dc000015 	stw	r16,0(sp)
   12f5c:	dfc00415 	stw	ra,16(sp)
   12f60:	18e00004 	addi	r3,r3,-32768
   12f64:	2821883a 	mov	r16,r5
   12f68:	2027883a 	mov	r19,r4
   12f6c:	3025883a 	mov	r18,r6
   12f70:	3823883a 	mov	r17,r7
   12f74:	18000526 	beq	r3,zero,12f8c <__swrite+0x54>
   12f78:	2940038f 	ldh	r5,14(r5)
   12f7c:	000d883a 	mov	r6,zero
   12f80:	01c00084 	movi	r7,2
   12f84:	00133100 	call	13310 <_lseek_r>
   12f88:	8080030b 	ldhu	r2,12(r16)
   12f8c:	8140038f 	ldh	r5,14(r16)
   12f90:	10bbffcc 	andi	r2,r2,61439
   12f94:	9809883a 	mov	r4,r19
   12f98:	900d883a 	mov	r6,r18
   12f9c:	880f883a 	mov	r7,r17
   12fa0:	8080030d 	sth	r2,12(r16)
   12fa4:	dfc00417 	ldw	ra,16(sp)
   12fa8:	dcc00317 	ldw	r19,12(sp)
   12fac:	dc800217 	ldw	r18,8(sp)
   12fb0:	dc400117 	ldw	r17,4(sp)
   12fb4:	dc000017 	ldw	r16,0(sp)
   12fb8:	dec00504 	addi	sp,sp,20
   12fbc:	00130241 	jmpi	13024 <_write_r>

00012fc0 <__sseek>:
   12fc0:	defffe04 	addi	sp,sp,-8
   12fc4:	dc000015 	stw	r16,0(sp)
   12fc8:	2821883a 	mov	r16,r5
   12fcc:	2940038f 	ldh	r5,14(r5)
   12fd0:	dfc00115 	stw	ra,4(sp)
   12fd4:	00133100 	call	13310 <_lseek_r>
   12fd8:	00ffffc4 	movi	r3,-1
   12fdc:	10c00826 	beq	r2,r3,13000 <__sseek+0x40>
   12fe0:	80c0030b 	ldhu	r3,12(r16)
   12fe4:	80801415 	stw	r2,80(r16)
   12fe8:	18c40014 	ori	r3,r3,4096
   12fec:	80c0030d 	sth	r3,12(r16)
   12ff0:	dfc00117 	ldw	ra,4(sp)
   12ff4:	dc000017 	ldw	r16,0(sp)
   12ff8:	dec00204 	addi	sp,sp,8
   12ffc:	f800283a 	ret
   13000:	80c0030b 	ldhu	r3,12(r16)
   13004:	18fbffcc 	andi	r3,r3,61439
   13008:	80c0030d 	sth	r3,12(r16)
   1300c:	dfc00117 	ldw	ra,4(sp)
   13010:	dc000017 	ldw	r16,0(sp)
   13014:	dec00204 	addi	sp,sp,8
   13018:	f800283a 	ret

0001301c <__sclose>:
   1301c:	2940038f 	ldh	r5,14(r5)
   13020:	00130901 	jmpi	13090 <_close_r>

00013024 <_write_r>:
   13024:	defffd04 	addi	sp,sp,-12
   13028:	dc400115 	stw	r17,4(sp)
   1302c:	dc000015 	stw	r16,0(sp)
   13030:	2023883a 	mov	r17,r4
   13034:	040000b4 	movhi	r16,2
   13038:	8425b704 	addi	r16,r16,-26916
   1303c:	2809883a 	mov	r4,r5
   13040:	300b883a 	mov	r5,r6
   13044:	380d883a 	mov	r6,r7
   13048:	dfc00215 	stw	ra,8(sp)
   1304c:	80000015 	stw	zero,0(r16)
   13050:	0013cb00 	call	13cb0 <write>
   13054:	00ffffc4 	movi	r3,-1
   13058:	10c00526 	beq	r2,r3,13070 <_write_r+0x4c>
   1305c:	dfc00217 	ldw	ra,8(sp)
   13060:	dc400117 	ldw	r17,4(sp)
   13064:	dc000017 	ldw	r16,0(sp)
   13068:	dec00304 	addi	sp,sp,12
   1306c:	f800283a 	ret
   13070:	80c00017 	ldw	r3,0(r16)
   13074:	183ff926 	beq	r3,zero,1305c <_write_r+0x38>
   13078:	88c00015 	stw	r3,0(r17)
   1307c:	dfc00217 	ldw	ra,8(sp)
   13080:	dc400117 	ldw	r17,4(sp)
   13084:	dc000017 	ldw	r16,0(sp)
   13088:	dec00304 	addi	sp,sp,12
   1308c:	f800283a 	ret

00013090 <_close_r>:
   13090:	defffd04 	addi	sp,sp,-12
   13094:	dc400115 	stw	r17,4(sp)
   13098:	dc000015 	stw	r16,0(sp)
   1309c:	2023883a 	mov	r17,r4
   130a0:	040000b4 	movhi	r16,2
   130a4:	8425b704 	addi	r16,r16,-26916
   130a8:	2809883a 	mov	r4,r5
   130ac:	dfc00215 	stw	ra,8(sp)
   130b0:	80000015 	stw	zero,0(r16)
   130b4:	00134380 	call	13438 <close>
   130b8:	00ffffc4 	movi	r3,-1
   130bc:	10c00526 	beq	r2,r3,130d4 <_close_r+0x44>
   130c0:	dfc00217 	ldw	ra,8(sp)
   130c4:	dc400117 	ldw	r17,4(sp)
   130c8:	dc000017 	ldw	r16,0(sp)
   130cc:	dec00304 	addi	sp,sp,12
   130d0:	f800283a 	ret
   130d4:	80c00017 	ldw	r3,0(r16)
   130d8:	183ff926 	beq	r3,zero,130c0 <_close_r+0x30>
   130dc:	88c00015 	stw	r3,0(r17)
   130e0:	dfc00217 	ldw	ra,8(sp)
   130e4:	dc400117 	ldw	r17,4(sp)
   130e8:	dc000017 	ldw	r16,0(sp)
   130ec:	dec00304 	addi	sp,sp,12
   130f0:	f800283a 	ret

000130f4 <_fclose_r>:
   130f4:	defffc04 	addi	sp,sp,-16
   130f8:	dc400115 	stw	r17,4(sp)
   130fc:	dc000015 	stw	r16,0(sp)
   13100:	dfc00315 	stw	ra,12(sp)
   13104:	dc800215 	stw	r18,8(sp)
   13108:	2821883a 	mov	r16,r5
   1310c:	2023883a 	mov	r17,r4
   13110:	28003426 	beq	r5,zero,131e4 <_fclose_r+0xf0>
   13114:	00126b40 	call	126b4 <__sfp_lock_acquire>
   13118:	88000226 	beq	r17,zero,13124 <_fclose_r+0x30>
   1311c:	88800e17 	ldw	r2,56(r17)
   13120:	10003826 	beq	r2,zero,13204 <_fclose_r+0x110>
   13124:	8080030f 	ldh	r2,12(r16)
   13128:	10002526 	beq	r2,zero,131c0 <_fclose_r+0xcc>
   1312c:	8809883a 	mov	r4,r17
   13130:	800b883a 	mov	r5,r16
   13134:	00121f00 	call	121f0 <_fflush_r>
   13138:	1025883a 	mov	r18,r2
   1313c:	80800b17 	ldw	r2,44(r16)
   13140:	10000426 	beq	r2,zero,13154 <_fclose_r+0x60>
   13144:	81400717 	ldw	r5,28(r16)
   13148:	8809883a 	mov	r4,r17
   1314c:	103ee83a 	callr	r2
   13150:	10003516 	blt	r2,zero,13228 <_fclose_r+0x134>
   13154:	8080030b 	ldhu	r2,12(r16)
   13158:	1080200c 	andi	r2,r2,128
   1315c:	10bfffcc 	andi	r2,r2,65535
   13160:	10a0001c 	xori	r2,r2,32768
   13164:	10a00004 	addi	r2,r2,-32768
   13168:	10002b1e 	bne	r2,zero,13218 <_fclose_r+0x124>
   1316c:	81400c17 	ldw	r5,48(r16)
   13170:	28000526 	beq	r5,zero,13188 <_fclose_r+0x94>
   13174:	80801004 	addi	r2,r16,64
   13178:	28800226 	beq	r5,r2,13184 <_fclose_r+0x90>
   1317c:	8809883a 	mov	r4,r17
   13180:	00128300 	call	12830 <_free_r>
   13184:	80000c15 	stw	zero,48(r16)
   13188:	81401117 	ldw	r5,68(r16)
   1318c:	28000326 	beq	r5,zero,1319c <_fclose_r+0xa8>
   13190:	8809883a 	mov	r4,r17
   13194:	00128300 	call	12830 <_free_r>
   13198:	80001115 	stw	zero,68(r16)
   1319c:	8000030d 	sth	zero,12(r16)
   131a0:	00126b80 	call	126b8 <__sfp_lock_release>
   131a4:	9005883a 	mov	r2,r18
   131a8:	dfc00317 	ldw	ra,12(sp)
   131ac:	dc800217 	ldw	r18,8(sp)
   131b0:	dc400117 	ldw	r17,4(sp)
   131b4:	dc000017 	ldw	r16,0(sp)
   131b8:	dec00404 	addi	sp,sp,16
   131bc:	f800283a 	ret
   131c0:	00126b80 	call	126b8 <__sfp_lock_release>
   131c4:	0025883a 	mov	r18,zero
   131c8:	9005883a 	mov	r2,r18
   131cc:	dfc00317 	ldw	ra,12(sp)
   131d0:	dc800217 	ldw	r18,8(sp)
   131d4:	dc400117 	ldw	r17,4(sp)
   131d8:	dc000017 	ldw	r16,0(sp)
   131dc:	dec00404 	addi	sp,sp,16
   131e0:	f800283a 	ret
   131e4:	0025883a 	mov	r18,zero
   131e8:	9005883a 	mov	r2,r18
   131ec:	dfc00317 	ldw	ra,12(sp)
   131f0:	dc800217 	ldw	r18,8(sp)
   131f4:	dc400117 	ldw	r17,4(sp)
   131f8:	dc000017 	ldw	r16,0(sp)
   131fc:	dec00404 	addi	sp,sp,16
   13200:	f800283a 	ret
   13204:	8809883a 	mov	r4,r17
   13208:	00124ac0 	call	124ac <__sinit>
   1320c:	8080030f 	ldh	r2,12(r16)
   13210:	103fc61e 	bne	r2,zero,1312c <_fclose_r+0x38>
   13214:	003fea06 	br	131c0 <_fclose_r+0xcc>
   13218:	81400417 	ldw	r5,16(r16)
   1321c:	8809883a 	mov	r4,r17
   13220:	00128300 	call	12830 <_free_r>
   13224:	003fd106 	br	1316c <_fclose_r+0x78>
   13228:	04bfffc4 	movi	r18,-1
   1322c:	003fc906 	br	13154 <_fclose_r+0x60>

00013230 <fclose>:
   13230:	00800074 	movhi	r2,1
   13234:	109f0504 	addi	r2,r2,31764
   13238:	200b883a 	mov	r5,r4
   1323c:	11000017 	ldw	r4,0(r2)
   13240:	00130f41 	jmpi	130f4 <_fclose_r>

00013244 <_fstat_r>:
   13244:	defffd04 	addi	sp,sp,-12
   13248:	dc400115 	stw	r17,4(sp)
   1324c:	dc000015 	stw	r16,0(sp)
   13250:	2023883a 	mov	r17,r4
   13254:	040000b4 	movhi	r16,2
   13258:	8425b704 	addi	r16,r16,-26916
   1325c:	2809883a 	mov	r4,r5
   13260:	300b883a 	mov	r5,r6
   13264:	dfc00215 	stw	ra,8(sp)
   13268:	80000015 	stw	zero,0(r16)
   1326c:	00135800 	call	13580 <fstat>
   13270:	00ffffc4 	movi	r3,-1
   13274:	10c00526 	beq	r2,r3,1328c <_fstat_r+0x48>
   13278:	dfc00217 	ldw	ra,8(sp)
   1327c:	dc400117 	ldw	r17,4(sp)
   13280:	dc000017 	ldw	r16,0(sp)
   13284:	dec00304 	addi	sp,sp,12
   13288:	f800283a 	ret
   1328c:	80c00017 	ldw	r3,0(r16)
   13290:	183ff926 	beq	r3,zero,13278 <_fstat_r+0x34>
   13294:	88c00015 	stw	r3,0(r17)
   13298:	dfc00217 	ldw	ra,8(sp)
   1329c:	dc400117 	ldw	r17,4(sp)
   132a0:	dc000017 	ldw	r16,0(sp)
   132a4:	dec00304 	addi	sp,sp,12
   132a8:	f800283a 	ret

000132ac <_isatty_r>:
   132ac:	defffd04 	addi	sp,sp,-12
   132b0:	dc400115 	stw	r17,4(sp)
   132b4:	dc000015 	stw	r16,0(sp)
   132b8:	2023883a 	mov	r17,r4
   132bc:	040000b4 	movhi	r16,2
   132c0:	8425b704 	addi	r16,r16,-26916
   132c4:	2809883a 	mov	r4,r5
   132c8:	dfc00215 	stw	ra,8(sp)
   132cc:	80000015 	stw	zero,0(r16)
   132d0:	00136800 	call	13680 <isatty>
   132d4:	00ffffc4 	movi	r3,-1
   132d8:	10c00526 	beq	r2,r3,132f0 <_isatty_r+0x44>
   132dc:	dfc00217 	ldw	ra,8(sp)
   132e0:	dc400117 	ldw	r17,4(sp)
   132e4:	dc000017 	ldw	r16,0(sp)
   132e8:	dec00304 	addi	sp,sp,12
   132ec:	f800283a 	ret
   132f0:	80c00017 	ldw	r3,0(r16)
   132f4:	183ff926 	beq	r3,zero,132dc <_isatty_r+0x30>
   132f8:	88c00015 	stw	r3,0(r17)
   132fc:	dfc00217 	ldw	ra,8(sp)
   13300:	dc400117 	ldw	r17,4(sp)
   13304:	dc000017 	ldw	r16,0(sp)
   13308:	dec00304 	addi	sp,sp,12
   1330c:	f800283a 	ret

00013310 <_lseek_r>:
   13310:	defffd04 	addi	sp,sp,-12
   13314:	dc400115 	stw	r17,4(sp)
   13318:	dc000015 	stw	r16,0(sp)
   1331c:	2023883a 	mov	r17,r4
   13320:	040000b4 	movhi	r16,2
   13324:	8425b704 	addi	r16,r16,-26916
   13328:	2809883a 	mov	r4,r5
   1332c:	300b883a 	mov	r5,r6
   13330:	380d883a 	mov	r6,r7
   13334:	dfc00215 	stw	ra,8(sp)
   13338:	80000015 	stw	zero,0(r16)
   1333c:	00138600 	call	13860 <lseek>
   13340:	00ffffc4 	movi	r3,-1
   13344:	10c00526 	beq	r2,r3,1335c <_lseek_r+0x4c>
   13348:	dfc00217 	ldw	ra,8(sp)
   1334c:	dc400117 	ldw	r17,4(sp)
   13350:	dc000017 	ldw	r16,0(sp)
   13354:	dec00304 	addi	sp,sp,12
   13358:	f800283a 	ret
   1335c:	80c00017 	ldw	r3,0(r16)
   13360:	183ff926 	beq	r3,zero,13348 <_lseek_r+0x38>
   13364:	88c00015 	stw	r3,0(r17)
   13368:	dfc00217 	ldw	ra,8(sp)
   1336c:	dc400117 	ldw	r17,4(sp)
   13370:	dc000017 	ldw	r16,0(sp)
   13374:	dec00304 	addi	sp,sp,12
   13378:	f800283a 	ret

0001337c <_read_r>:
   1337c:	defffd04 	addi	sp,sp,-12
   13380:	dc400115 	stw	r17,4(sp)
   13384:	dc000015 	stw	r16,0(sp)
   13388:	2023883a 	mov	r17,r4
   1338c:	040000b4 	movhi	r16,2
   13390:	8425b704 	addi	r16,r16,-26916
   13394:	2809883a 	mov	r4,r5
   13398:	300b883a 	mov	r5,r6
   1339c:	380d883a 	mov	r6,r7
   133a0:	dfc00215 	stw	ra,8(sp)
   133a4:	80000015 	stw	zero,0(r16)
   133a8:	0013a3c0 	call	13a3c <read>
   133ac:	00ffffc4 	movi	r3,-1
   133b0:	10c00526 	beq	r2,r3,133c8 <_read_r+0x4c>
   133b4:	dfc00217 	ldw	ra,8(sp)
   133b8:	dc400117 	ldw	r17,4(sp)
   133bc:	dc000017 	ldw	r16,0(sp)
   133c0:	dec00304 	addi	sp,sp,12
   133c4:	f800283a 	ret
   133c8:	80c00017 	ldw	r3,0(r16)
   133cc:	183ff926 	beq	r3,zero,133b4 <_read_r+0x38>
   133d0:	88c00015 	stw	r3,0(r17)
   133d4:	dfc00217 	ldw	ra,8(sp)
   133d8:	dc400117 	ldw	r17,4(sp)
   133dc:	dc000017 	ldw	r16,0(sp)
   133e0:	dec00304 	addi	sp,sp,12
   133e4:	f800283a 	ret

000133e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   133e8:	defffe04 	addi	sp,sp,-8
   133ec:	dfc00115 	stw	ra,4(sp)
   133f0:	df000015 	stw	fp,0(sp)
   133f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   133f8:	00800074 	movhi	r2,1
   133fc:	109f0d04 	addi	r2,r2,31796
   13400:	10800017 	ldw	r2,0(r2)
   13404:	10000526 	beq	r2,zero,1341c <alt_get_errno+0x34>
   13408:	00800074 	movhi	r2,1
   1340c:	109f0d04 	addi	r2,r2,31796
   13410:	10800017 	ldw	r2,0(r2)
   13414:	103ee83a 	callr	r2
   13418:	00000206 	br	13424 <alt_get_errno+0x3c>
   1341c:	008000b4 	movhi	r2,2
   13420:	10a5b704 	addi	r2,r2,-26916
}
   13424:	e037883a 	mov	sp,fp
   13428:	dfc00117 	ldw	ra,4(sp)
   1342c:	df000017 	ldw	fp,0(sp)
   13430:	dec00204 	addi	sp,sp,8
   13434:	f800283a 	ret

00013438 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   13438:	defffb04 	addi	sp,sp,-20
   1343c:	dfc00415 	stw	ra,16(sp)
   13440:	df000315 	stw	fp,12(sp)
   13444:	df000304 	addi	fp,sp,12
   13448:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   1344c:	e0bfff17 	ldw	r2,-4(fp)
   13450:	10000716 	blt	r2,zero,13470 <close+0x38>
   13454:	e13fff17 	ldw	r4,-4(fp)
   13458:	01400304 	movi	r5,12
   1345c:	00108a40 	call	108a4 <__mulsi3>
   13460:	00c00074 	movhi	r3,1
   13464:	18da8c04 	addi	r3,r3,27184
   13468:	10c5883a 	add	r2,r2,r3
   1346c:	00000106 	br	13474 <close+0x3c>
   13470:	0005883a 	mov	r2,zero
   13474:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   13478:	e0bffd17 	ldw	r2,-12(fp)
   1347c:	10001826 	beq	r2,zero,134e0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   13480:	e0bffd17 	ldw	r2,-12(fp)
   13484:	10800017 	ldw	r2,0(r2)
   13488:	10800417 	ldw	r2,16(r2)
   1348c:	10000626 	beq	r2,zero,134a8 <close+0x70>
   13490:	e0bffd17 	ldw	r2,-12(fp)
   13494:	10800017 	ldw	r2,0(r2)
   13498:	10800417 	ldw	r2,16(r2)
   1349c:	e13ffd17 	ldw	r4,-12(fp)
   134a0:	103ee83a 	callr	r2
   134a4:	00000106 	br	134ac <close+0x74>
   134a8:	0005883a 	mov	r2,zero
   134ac:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   134b0:	e13fff17 	ldw	r4,-4(fp)
   134b4:	0013b300 	call	13b30 <alt_release_fd>
    if (rval < 0)
   134b8:	e0bffe17 	ldw	r2,-8(fp)
   134bc:	1000060e 	bge	r2,zero,134d8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   134c0:	00133e80 	call	133e8 <alt_get_errno>
   134c4:	e0fffe17 	ldw	r3,-8(fp)
   134c8:	00c7c83a 	sub	r3,zero,r3
   134cc:	10c00015 	stw	r3,0(r2)
      return -1;
   134d0:	00bfffc4 	movi	r2,-1
   134d4:	00000606 	br	134f0 <close+0xb8>
    }
    return 0;
   134d8:	0005883a 	mov	r2,zero
   134dc:	00000406 	br	134f0 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   134e0:	00133e80 	call	133e8 <alt_get_errno>
   134e4:	00c01444 	movi	r3,81
   134e8:	10c00015 	stw	r3,0(r2)
    return -1;
   134ec:	00bfffc4 	movi	r2,-1
  }
}
   134f0:	e037883a 	mov	sp,fp
   134f4:	dfc00117 	ldw	ra,4(sp)
   134f8:	df000017 	ldw	fp,0(sp)
   134fc:	dec00204 	addi	sp,sp,8
   13500:	f800283a 	ret

00013504 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   13504:	defffc04 	addi	sp,sp,-16
   13508:	df000315 	stw	fp,12(sp)
   1350c:	df000304 	addi	fp,sp,12
   13510:	e13ffd15 	stw	r4,-12(fp)
   13514:	e17ffe15 	stw	r5,-8(fp)
   13518:	e1bfff15 	stw	r6,-4(fp)
  return len;
   1351c:	e0bfff17 	ldw	r2,-4(fp)
}
   13520:	e037883a 	mov	sp,fp
   13524:	df000017 	ldw	fp,0(sp)
   13528:	dec00104 	addi	sp,sp,4
   1352c:	f800283a 	ret

00013530 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13530:	defffe04 	addi	sp,sp,-8
   13534:	dfc00115 	stw	ra,4(sp)
   13538:	df000015 	stw	fp,0(sp)
   1353c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13540:	00800074 	movhi	r2,1
   13544:	109f0d04 	addi	r2,r2,31796
   13548:	10800017 	ldw	r2,0(r2)
   1354c:	10000526 	beq	r2,zero,13564 <alt_get_errno+0x34>
   13550:	00800074 	movhi	r2,1
   13554:	109f0d04 	addi	r2,r2,31796
   13558:	10800017 	ldw	r2,0(r2)
   1355c:	103ee83a 	callr	r2
   13560:	00000206 	br	1356c <alt_get_errno+0x3c>
   13564:	008000b4 	movhi	r2,2
   13568:	10a5b704 	addi	r2,r2,-26916
}
   1356c:	e037883a 	mov	sp,fp
   13570:	dfc00117 	ldw	ra,4(sp)
   13574:	df000017 	ldw	fp,0(sp)
   13578:	dec00204 	addi	sp,sp,8
   1357c:	f800283a 	ret

00013580 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   13580:	defffb04 	addi	sp,sp,-20
   13584:	dfc00415 	stw	ra,16(sp)
   13588:	df000315 	stw	fp,12(sp)
   1358c:	df000304 	addi	fp,sp,12
   13590:	e13ffe15 	stw	r4,-8(fp)
   13594:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13598:	e0bffe17 	ldw	r2,-8(fp)
   1359c:	10000716 	blt	r2,zero,135bc <fstat+0x3c>
   135a0:	e13ffe17 	ldw	r4,-8(fp)
   135a4:	01400304 	movi	r5,12
   135a8:	00108a40 	call	108a4 <__mulsi3>
   135ac:	00c00074 	movhi	r3,1
   135b0:	18da8c04 	addi	r3,r3,27184
   135b4:	10c5883a 	add	r2,r2,r3
   135b8:	00000106 	br	135c0 <fstat+0x40>
   135bc:	0005883a 	mov	r2,zero
   135c0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   135c4:	e0bffd17 	ldw	r2,-12(fp)
   135c8:	10001026 	beq	r2,zero,1360c <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   135cc:	e0bffd17 	ldw	r2,-12(fp)
   135d0:	10800017 	ldw	r2,0(r2)
   135d4:	10800817 	ldw	r2,32(r2)
   135d8:	10000726 	beq	r2,zero,135f8 <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
   135dc:	e0bffd17 	ldw	r2,-12(fp)
   135e0:	10800017 	ldw	r2,0(r2)
   135e4:	10800817 	ldw	r2,32(r2)
   135e8:	e13ffd17 	ldw	r4,-12(fp)
   135ec:	e17fff17 	ldw	r5,-4(fp)
   135f0:	103ee83a 	callr	r2
   135f4:	00000906 	br	1361c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   135f8:	e0bfff17 	ldw	r2,-4(fp)
   135fc:	00c80004 	movi	r3,8192
   13600:	10c00115 	stw	r3,4(r2)
      return 0;
   13604:	0005883a 	mov	r2,zero
   13608:	00000406 	br	1361c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1360c:	00135300 	call	13530 <alt_get_errno>
   13610:	00c01444 	movi	r3,81
   13614:	10c00015 	stw	r3,0(r2)
    return -1;
   13618:	00bfffc4 	movi	r2,-1
  }
}
   1361c:	e037883a 	mov	sp,fp
   13620:	dfc00117 	ldw	ra,4(sp)
   13624:	df000017 	ldw	fp,0(sp)
   13628:	dec00204 	addi	sp,sp,8
   1362c:	f800283a 	ret

00013630 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13630:	defffe04 	addi	sp,sp,-8
   13634:	dfc00115 	stw	ra,4(sp)
   13638:	df000015 	stw	fp,0(sp)
   1363c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13640:	00800074 	movhi	r2,1
   13644:	109f0d04 	addi	r2,r2,31796
   13648:	10800017 	ldw	r2,0(r2)
   1364c:	10000526 	beq	r2,zero,13664 <alt_get_errno+0x34>
   13650:	00800074 	movhi	r2,1
   13654:	109f0d04 	addi	r2,r2,31796
   13658:	10800017 	ldw	r2,0(r2)
   1365c:	103ee83a 	callr	r2
   13660:	00000206 	br	1366c <alt_get_errno+0x3c>
   13664:	008000b4 	movhi	r2,2
   13668:	10a5b704 	addi	r2,r2,-26916
}
   1366c:	e037883a 	mov	sp,fp
   13670:	dfc00117 	ldw	ra,4(sp)
   13674:	df000017 	ldw	fp,0(sp)
   13678:	dec00204 	addi	sp,sp,8
   1367c:	f800283a 	ret

00013680 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   13680:	deffed04 	addi	sp,sp,-76
   13684:	dfc01215 	stw	ra,72(sp)
   13688:	df001115 	stw	fp,68(sp)
   1368c:	df001104 	addi	fp,sp,68
   13690:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13694:	e0bfff17 	ldw	r2,-4(fp)
   13698:	10000716 	blt	r2,zero,136b8 <isatty+0x38>
   1369c:	e13fff17 	ldw	r4,-4(fp)
   136a0:	01400304 	movi	r5,12
   136a4:	00108a40 	call	108a4 <__mulsi3>
   136a8:	00c00074 	movhi	r3,1
   136ac:	18da8c04 	addi	r3,r3,27184
   136b0:	10c5883a 	add	r2,r2,r3
   136b4:	00000106 	br	136bc <isatty+0x3c>
   136b8:	0005883a 	mov	r2,zero
   136bc:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   136c0:	e0bfef17 	ldw	r2,-68(fp)
   136c4:	10000e26 	beq	r2,zero,13700 <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   136c8:	e0bfef17 	ldw	r2,-68(fp)
   136cc:	10800017 	ldw	r2,0(r2)
   136d0:	10800817 	ldw	r2,32(r2)
   136d4:	1000021e 	bne	r2,zero,136e0 <isatty+0x60>
    {
      return 1;
   136d8:	00800044 	movi	r2,1
   136dc:	00000c06 	br	13710 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   136e0:	e0bff004 	addi	r2,fp,-64
   136e4:	e13fff17 	ldw	r4,-4(fp)
   136e8:	100b883a 	mov	r5,r2
   136ec:	00135800 	call	13580 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   136f0:	e0bff117 	ldw	r2,-60(fp)
   136f4:	10880020 	cmpeqi	r2,r2,8192
   136f8:	10803fcc 	andi	r2,r2,255
   136fc:	00000406 	br	13710 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13700:	00136300 	call	13630 <alt_get_errno>
   13704:	00c01444 	movi	r3,81
   13708:	10c00015 	stw	r3,0(r2)
    return 0;
   1370c:	0005883a 	mov	r2,zero
  }
}
   13710:	e037883a 	mov	sp,fp
   13714:	dfc00117 	ldw	ra,4(sp)
   13718:	df000017 	ldw	fp,0(sp)
   1371c:	dec00204 	addi	sp,sp,8
   13720:	f800283a 	ret

00013724 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   13724:	defffc04 	addi	sp,sp,-16
   13728:	df000315 	stw	fp,12(sp)
   1372c:	df000304 	addi	fp,sp,12
   13730:	e13ffd15 	stw	r4,-12(fp)
   13734:	e17ffe15 	stw	r5,-8(fp)
   13738:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   1373c:	e0fffe17 	ldw	r3,-8(fp)
   13740:	e0bffd17 	ldw	r2,-12(fp)
   13744:	18800e26 	beq	r3,r2,13780 <alt_load_section+0x5c>
  {
    while( to != end )
   13748:	00000a06 	br	13774 <alt_load_section+0x50>
    {
      *to++ = *from++;
   1374c:	e0bffd17 	ldw	r2,-12(fp)
   13750:	10c00017 	ldw	r3,0(r2)
   13754:	e0bffe17 	ldw	r2,-8(fp)
   13758:	10c00015 	stw	r3,0(r2)
   1375c:	e0bffe17 	ldw	r2,-8(fp)
   13760:	10800104 	addi	r2,r2,4
   13764:	e0bffe15 	stw	r2,-8(fp)
   13768:	e0bffd17 	ldw	r2,-12(fp)
   1376c:	10800104 	addi	r2,r2,4
   13770:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   13774:	e0fffe17 	ldw	r3,-8(fp)
   13778:	e0bfff17 	ldw	r2,-4(fp)
   1377c:	18bff31e 	bne	r3,r2,1374c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   13780:	e037883a 	mov	sp,fp
   13784:	df000017 	ldw	fp,0(sp)
   13788:	dec00104 	addi	sp,sp,4
   1378c:	f800283a 	ret

00013790 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   13790:	defffe04 	addi	sp,sp,-8
   13794:	dfc00115 	stw	ra,4(sp)
   13798:	df000015 	stw	fp,0(sp)
   1379c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   137a0:	01000074 	movhi	r4,1
   137a4:	211f1204 	addi	r4,r4,31816
   137a8:	01400074 	movhi	r5,1
   137ac:	29587004 	addi	r5,r5,25024
   137b0:	01800074 	movhi	r6,1
   137b4:	319f1204 	addi	r6,r6,31816
   137b8:	00137240 	call	13724 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   137bc:	01000074 	movhi	r4,1
   137c0:	21000804 	addi	r4,r4,32
   137c4:	01400074 	movhi	r5,1
   137c8:	29400804 	addi	r5,r5,32
   137cc:	01800074 	movhi	r6,1
   137d0:	31806e04 	addi	r6,r6,440
   137d4:	00137240 	call	13724 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   137d8:	01000074 	movhi	r4,1
   137dc:	21182a04 	addi	r4,r4,24744
   137e0:	01400074 	movhi	r5,1
   137e4:	29582a04 	addi	r5,r5,24744
   137e8:	01800074 	movhi	r6,1
   137ec:	31987004 	addi	r6,r6,25024
   137f0:	00137240 	call	13724 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   137f4:	00150080 	call	15008 <alt_dcache_flush_all>
  alt_icache_flush_all();
   137f8:	00151cc0 	call	151cc <alt_icache_flush_all>
}
   137fc:	e037883a 	mov	sp,fp
   13800:	dfc00117 	ldw	ra,4(sp)
   13804:	df000017 	ldw	fp,0(sp)
   13808:	dec00204 	addi	sp,sp,8
   1380c:	f800283a 	ret

00013810 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13810:	defffe04 	addi	sp,sp,-8
   13814:	dfc00115 	stw	ra,4(sp)
   13818:	df000015 	stw	fp,0(sp)
   1381c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13820:	00800074 	movhi	r2,1
   13824:	109f0d04 	addi	r2,r2,31796
   13828:	10800017 	ldw	r2,0(r2)
   1382c:	10000526 	beq	r2,zero,13844 <alt_get_errno+0x34>
   13830:	00800074 	movhi	r2,1
   13834:	109f0d04 	addi	r2,r2,31796
   13838:	10800017 	ldw	r2,0(r2)
   1383c:	103ee83a 	callr	r2
   13840:	00000206 	br	1384c <alt_get_errno+0x3c>
   13844:	008000b4 	movhi	r2,2
   13848:	10a5b704 	addi	r2,r2,-26916
}
   1384c:	e037883a 	mov	sp,fp
   13850:	dfc00117 	ldw	ra,4(sp)
   13854:	df000017 	ldw	fp,0(sp)
   13858:	dec00204 	addi	sp,sp,8
   1385c:	f800283a 	ret

00013860 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   13860:	defff904 	addi	sp,sp,-28
   13864:	dfc00615 	stw	ra,24(sp)
   13868:	df000515 	stw	fp,20(sp)
   1386c:	df000504 	addi	fp,sp,20
   13870:	e13ffd15 	stw	r4,-12(fp)
   13874:	e17ffe15 	stw	r5,-8(fp)
   13878:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   1387c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13880:	e0bffd17 	ldw	r2,-12(fp)
   13884:	10000716 	blt	r2,zero,138a4 <lseek+0x44>
   13888:	e13ffd17 	ldw	r4,-12(fp)
   1388c:	01400304 	movi	r5,12
   13890:	00108a40 	call	108a4 <__mulsi3>
   13894:	00c00074 	movhi	r3,1
   13898:	18da8c04 	addi	r3,r3,27184
   1389c:	10c5883a 	add	r2,r2,r3
   138a0:	00000106 	br	138a8 <lseek+0x48>
   138a4:	0005883a 	mov	r2,zero
   138a8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   138ac:	e0bffc17 	ldw	r2,-16(fp)
   138b0:	10001026 	beq	r2,zero,138f4 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   138b4:	e0bffc17 	ldw	r2,-16(fp)
   138b8:	10800017 	ldw	r2,0(r2)
   138bc:	10800717 	ldw	r2,28(r2)
   138c0:	10000926 	beq	r2,zero,138e8 <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   138c4:	e0bffc17 	ldw	r2,-16(fp)
   138c8:	10800017 	ldw	r2,0(r2)
   138cc:	10800717 	ldw	r2,28(r2)
   138d0:	e13ffc17 	ldw	r4,-16(fp)
   138d4:	e17ffe17 	ldw	r5,-8(fp)
   138d8:	e1bfff17 	ldw	r6,-4(fp)
   138dc:	103ee83a 	callr	r2
   138e0:	e0bffb15 	stw	r2,-20(fp)
   138e4:	00000506 	br	138fc <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   138e8:	00bfde84 	movi	r2,-134
   138ec:	e0bffb15 	stw	r2,-20(fp)
   138f0:	00000206 	br	138fc <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
   138f4:	00bfebc4 	movi	r2,-81
   138f8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   138fc:	e0bffb17 	ldw	r2,-20(fp)
   13900:	1000060e 	bge	r2,zero,1391c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   13904:	00138100 	call	13810 <alt_get_errno>
   13908:	e0fffb17 	ldw	r3,-20(fp)
   1390c:	00c7c83a 	sub	r3,zero,r3
   13910:	10c00015 	stw	r3,0(r2)
    rc = -1;
   13914:	00bfffc4 	movi	r2,-1
   13918:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   1391c:	e0bffb17 	ldw	r2,-20(fp)
}
   13920:	e037883a 	mov	sp,fp
   13924:	dfc00117 	ldw	ra,4(sp)
   13928:	df000017 	ldw	fp,0(sp)
   1392c:	dec00204 	addi	sp,sp,8
   13930:	f800283a 	ret

00013934 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   13934:	defffd04 	addi	sp,sp,-12
   13938:	dfc00215 	stw	ra,8(sp)
   1393c:	df000115 	stw	fp,4(sp)
   13940:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   13944:	0009883a 	mov	r4,zero
   13948:	0013dd80 	call	13dd8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   1394c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   13950:	0013e0c0 	call	13e0c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   13954:	01000074 	movhi	r4,1
   13958:	21186804 	addi	r4,r4,24992
   1395c:	01400074 	movhi	r5,1
   13960:	29586804 	addi	r5,r5,24992
   13964:	01800074 	movhi	r6,1
   13968:	31986804 	addi	r6,r6,24992
   1396c:	00155900 	call	15590 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   13970:	00151140 	call	15114 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   13974:	01000074 	movhi	r4,1
   13978:	21145c04 	addi	r4,r4,20848
   1397c:	0015cd40 	call	15cd4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   13980:	d126b417 	ldw	r4,-25904(gp)
   13984:	d0e6b517 	ldw	r3,-25900(gp)
   13988:	d0a6b617 	ldw	r2,-25896(gp)
   1398c:	180b883a 	mov	r5,r3
   13990:	100d883a 	mov	r6,r2
   13994:	00107d80 	call	107d8 <main>
   13998:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   1399c:	01000044 	movi	r4,1
   139a0:	00134380 	call	13438 <close>
  exit (result);
   139a4:	e13fff17 	ldw	r4,-4(fp)
   139a8:	0015ce80 	call	15ce8 <exit>

000139ac <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   139ac:	defffe04 	addi	sp,sp,-8
   139b0:	df000115 	stw	fp,4(sp)
   139b4:	df000104 	addi	fp,sp,4
   139b8:	e13fff15 	stw	r4,-4(fp)
}
   139bc:	e037883a 	mov	sp,fp
   139c0:	df000017 	ldw	fp,0(sp)
   139c4:	dec00104 	addi	sp,sp,4
   139c8:	f800283a 	ret

000139cc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   139cc:	defffe04 	addi	sp,sp,-8
   139d0:	df000115 	stw	fp,4(sp)
   139d4:	df000104 	addi	fp,sp,4
   139d8:	e13fff15 	stw	r4,-4(fp)
}
   139dc:	e037883a 	mov	sp,fp
   139e0:	df000017 	ldw	fp,0(sp)
   139e4:	dec00104 	addi	sp,sp,4
   139e8:	f800283a 	ret

000139ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   139ec:	defffe04 	addi	sp,sp,-8
   139f0:	dfc00115 	stw	ra,4(sp)
   139f4:	df000015 	stw	fp,0(sp)
   139f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   139fc:	00800074 	movhi	r2,1
   13a00:	109f0d04 	addi	r2,r2,31796
   13a04:	10800017 	ldw	r2,0(r2)
   13a08:	10000526 	beq	r2,zero,13a20 <alt_get_errno+0x34>
   13a0c:	00800074 	movhi	r2,1
   13a10:	109f0d04 	addi	r2,r2,31796
   13a14:	10800017 	ldw	r2,0(r2)
   13a18:	103ee83a 	callr	r2
   13a1c:	00000206 	br	13a28 <alt_get_errno+0x3c>
   13a20:	008000b4 	movhi	r2,2
   13a24:	10a5b704 	addi	r2,r2,-26916
}
   13a28:	e037883a 	mov	sp,fp
   13a2c:	dfc00117 	ldw	ra,4(sp)
   13a30:	df000017 	ldw	fp,0(sp)
   13a34:	dec00204 	addi	sp,sp,8
   13a38:	f800283a 	ret

00013a3c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   13a3c:	defff904 	addi	sp,sp,-28
   13a40:	dfc00615 	stw	ra,24(sp)
   13a44:	df000515 	stw	fp,20(sp)
   13a48:	df000504 	addi	fp,sp,20
   13a4c:	e13ffd15 	stw	r4,-12(fp)
   13a50:	e17ffe15 	stw	r5,-8(fp)
   13a54:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13a58:	e0bffd17 	ldw	r2,-12(fp)
   13a5c:	10000716 	blt	r2,zero,13a7c <read+0x40>
   13a60:	e13ffd17 	ldw	r4,-12(fp)
   13a64:	01400304 	movi	r5,12
   13a68:	00108a40 	call	108a4 <__mulsi3>
   13a6c:	00c00074 	movhi	r3,1
   13a70:	18da8c04 	addi	r3,r3,27184
   13a74:	10c5883a 	add	r2,r2,r3
   13a78:	00000106 	br	13a80 <read+0x44>
   13a7c:	0005883a 	mov	r2,zero
   13a80:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   13a84:	e0bffb17 	ldw	r2,-20(fp)
   13a88:	10002026 	beq	r2,zero,13b0c <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   13a8c:	e0bffb17 	ldw	r2,-20(fp)
   13a90:	10800217 	ldw	r2,8(r2)
   13a94:	108000cc 	andi	r2,r2,3
   13a98:	10800060 	cmpeqi	r2,r2,1
   13a9c:	1000171e 	bne	r2,zero,13afc <read+0xc0>
        (fd->dev->read))
   13aa0:	e0bffb17 	ldw	r2,-20(fp)
   13aa4:	10800017 	ldw	r2,0(r2)
   13aa8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   13aac:	10001326 	beq	r2,zero,13afc <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   13ab0:	e0bffb17 	ldw	r2,-20(fp)
   13ab4:	10800017 	ldw	r2,0(r2)
   13ab8:	10c00517 	ldw	r3,20(r2)
   13abc:	e0bfff17 	ldw	r2,-4(fp)
   13ac0:	e13ffb17 	ldw	r4,-20(fp)
   13ac4:	e17ffe17 	ldw	r5,-8(fp)
   13ac8:	100d883a 	mov	r6,r2
   13acc:	183ee83a 	callr	r3
   13ad0:	e0bffc15 	stw	r2,-16(fp)
   13ad4:	e0bffc17 	ldw	r2,-16(fp)
   13ad8:	1000060e 	bge	r2,zero,13af4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   13adc:	00139ec0 	call	139ec <alt_get_errno>
   13ae0:	e0fffc17 	ldw	r3,-16(fp)
   13ae4:	00c7c83a 	sub	r3,zero,r3
   13ae8:	10c00015 	stw	r3,0(r2)
          return -1;
   13aec:	00bfffc4 	movi	r2,-1
   13af0:	00000a06 	br	13b1c <read+0xe0>
        }
        return rval;
   13af4:	e0bffc17 	ldw	r2,-16(fp)
   13af8:	00000806 	br	13b1c <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   13afc:	00139ec0 	call	139ec <alt_get_errno>
   13b00:	00c00344 	movi	r3,13
   13b04:	10c00015 	stw	r3,0(r2)
   13b08:	00000306 	br	13b18 <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   13b0c:	00139ec0 	call	139ec <alt_get_errno>
   13b10:	00c01444 	movi	r3,81
   13b14:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   13b18:	00bfffc4 	movi	r2,-1
}
   13b1c:	e037883a 	mov	sp,fp
   13b20:	dfc00117 	ldw	ra,4(sp)
   13b24:	df000017 	ldw	fp,0(sp)
   13b28:	dec00204 	addi	sp,sp,8
   13b2c:	f800283a 	ret

00013b30 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   13b30:	defffc04 	addi	sp,sp,-16
   13b34:	dfc00315 	stw	ra,12(sp)
   13b38:	df000215 	stw	fp,8(sp)
   13b3c:	dc000115 	stw	r16,4(sp)
   13b40:	df000104 	addi	fp,sp,4
   13b44:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   13b48:	e0bfff17 	ldw	r2,-4(fp)
   13b4c:	108000d0 	cmplti	r2,r2,3
   13b50:	1000111e 	bne	r2,zero,13b98 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   13b54:	04000074 	movhi	r16,1
   13b58:	841a8c04 	addi	r16,r16,27184
   13b5c:	e0bfff17 	ldw	r2,-4(fp)
   13b60:	1009883a 	mov	r4,r2
   13b64:	01400304 	movi	r5,12
   13b68:	00108a40 	call	108a4 <__mulsi3>
   13b6c:	8085883a 	add	r2,r16,r2
   13b70:	10800204 	addi	r2,r2,8
   13b74:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   13b78:	04000074 	movhi	r16,1
   13b7c:	841a8c04 	addi	r16,r16,27184
   13b80:	e0bfff17 	ldw	r2,-4(fp)
   13b84:	1009883a 	mov	r4,r2
   13b88:	01400304 	movi	r5,12
   13b8c:	00108a40 	call	108a4 <__mulsi3>
   13b90:	8085883a 	add	r2,r16,r2
   13b94:	10000015 	stw	zero,0(r2)
  }
}
   13b98:	e037883a 	mov	sp,fp
   13b9c:	dfc00217 	ldw	ra,8(sp)
   13ba0:	df000117 	ldw	fp,4(sp)
   13ba4:	dc000017 	ldw	r16,0(sp)
   13ba8:	dec00304 	addi	sp,sp,12
   13bac:	f800283a 	ret

00013bb0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   13bb0:	defff904 	addi	sp,sp,-28
   13bb4:	df000615 	stw	fp,24(sp)
   13bb8:	df000604 	addi	fp,sp,24
   13bbc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13bc0:	0005303a 	rdctl	r2,status
   13bc4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13bc8:	e0fffc17 	ldw	r3,-16(fp)
   13bcc:	00bfff84 	movi	r2,-2
   13bd0:	1884703a 	and	r2,r3,r2
   13bd4:	1001703a 	wrctl	status,r2
  
  return context;
   13bd8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   13bdc:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   13be0:	d0a00a17 	ldw	r2,-32728(gp)
   13be4:	10c000c4 	addi	r3,r2,3
   13be8:	00bfff04 	movi	r2,-4
   13bec:	1884703a 	and	r2,r3,r2
   13bf0:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   13bf4:	d0e00a17 	ldw	r3,-32728(gp)
   13bf8:	e0bfff17 	ldw	r2,-4(fp)
   13bfc:	1885883a 	add	r2,r3,r2
   13c00:	00c000b4 	movhi	r3,2
   13c04:	18c00004 	addi	r3,r3,0
   13c08:	1880062e 	bgeu	r3,r2,13c24 <sbrk+0x74>
   13c0c:	e0bffa17 	ldw	r2,-24(fp)
   13c10:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13c14:	e0bffd17 	ldw	r2,-12(fp)
   13c18:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   13c1c:	00bfffc4 	movi	r2,-1
   13c20:	00000b06 	br	13c50 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   13c24:	d0a00a17 	ldw	r2,-32728(gp)
   13c28:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   13c2c:	d0e00a17 	ldw	r3,-32728(gp)
   13c30:	e0bfff17 	ldw	r2,-4(fp)
   13c34:	1885883a 	add	r2,r3,r2
   13c38:	d0a00a15 	stw	r2,-32728(gp)
   13c3c:	e0bffa17 	ldw	r2,-24(fp)
   13c40:	e0bffe15 	stw	r2,-8(fp)
   13c44:	e0bffe17 	ldw	r2,-8(fp)
   13c48:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   13c4c:	e0bffb17 	ldw	r2,-20(fp)
} 
   13c50:	e037883a 	mov	sp,fp
   13c54:	df000017 	ldw	fp,0(sp)
   13c58:	dec00104 	addi	sp,sp,4
   13c5c:	f800283a 	ret

00013c60 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13c60:	defffe04 	addi	sp,sp,-8
   13c64:	dfc00115 	stw	ra,4(sp)
   13c68:	df000015 	stw	fp,0(sp)
   13c6c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13c70:	00800074 	movhi	r2,1
   13c74:	109f0d04 	addi	r2,r2,31796
   13c78:	10800017 	ldw	r2,0(r2)
   13c7c:	10000526 	beq	r2,zero,13c94 <alt_get_errno+0x34>
   13c80:	00800074 	movhi	r2,1
   13c84:	109f0d04 	addi	r2,r2,31796
   13c88:	10800017 	ldw	r2,0(r2)
   13c8c:	103ee83a 	callr	r2
   13c90:	00000206 	br	13c9c <alt_get_errno+0x3c>
   13c94:	008000b4 	movhi	r2,2
   13c98:	10a5b704 	addi	r2,r2,-26916
}
   13c9c:	e037883a 	mov	sp,fp
   13ca0:	dfc00117 	ldw	ra,4(sp)
   13ca4:	df000017 	ldw	fp,0(sp)
   13ca8:	dec00204 	addi	sp,sp,8
   13cac:	f800283a 	ret

00013cb0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   13cb0:	defff904 	addi	sp,sp,-28
   13cb4:	dfc00615 	stw	ra,24(sp)
   13cb8:	df000515 	stw	fp,20(sp)
   13cbc:	df000504 	addi	fp,sp,20
   13cc0:	e13ffd15 	stw	r4,-12(fp)
   13cc4:	e17ffe15 	stw	r5,-8(fp)
   13cc8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13ccc:	e0bffd17 	ldw	r2,-12(fp)
   13cd0:	10000716 	blt	r2,zero,13cf0 <write+0x40>
   13cd4:	e13ffd17 	ldw	r4,-12(fp)
   13cd8:	01400304 	movi	r5,12
   13cdc:	00108a40 	call	108a4 <__mulsi3>
   13ce0:	00c00074 	movhi	r3,1
   13ce4:	18da8c04 	addi	r3,r3,27184
   13ce8:	10c5883a 	add	r2,r2,r3
   13cec:	00000106 	br	13cf4 <write+0x44>
   13cf0:	0005883a 	mov	r2,zero
   13cf4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   13cf8:	e0bffb17 	ldw	r2,-20(fp)
   13cfc:	10001f26 	beq	r2,zero,13d7c <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   13d00:	e0bffb17 	ldw	r2,-20(fp)
   13d04:	10800217 	ldw	r2,8(r2)
   13d08:	108000cc 	andi	r2,r2,3
   13d0c:	10001726 	beq	r2,zero,13d6c <write+0xbc>
   13d10:	e0bffb17 	ldw	r2,-20(fp)
   13d14:	10800017 	ldw	r2,0(r2)
   13d18:	10800617 	ldw	r2,24(r2)
   13d1c:	10001326 	beq	r2,zero,13d6c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   13d20:	e0bffb17 	ldw	r2,-20(fp)
   13d24:	10800017 	ldw	r2,0(r2)
   13d28:	10c00617 	ldw	r3,24(r2)
   13d2c:	e0bfff17 	ldw	r2,-4(fp)
   13d30:	e13ffb17 	ldw	r4,-20(fp)
   13d34:	e17ffe17 	ldw	r5,-8(fp)
   13d38:	100d883a 	mov	r6,r2
   13d3c:	183ee83a 	callr	r3
   13d40:	e0bffc15 	stw	r2,-16(fp)
   13d44:	e0bffc17 	ldw	r2,-16(fp)
   13d48:	1000060e 	bge	r2,zero,13d64 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   13d4c:	0013c600 	call	13c60 <alt_get_errno>
   13d50:	e0fffc17 	ldw	r3,-16(fp)
   13d54:	00c7c83a 	sub	r3,zero,r3
   13d58:	10c00015 	stw	r3,0(r2)
        return -1;
   13d5c:	00bfffc4 	movi	r2,-1
   13d60:	00000a06 	br	13d8c <write+0xdc>
      }
      return rval;
   13d64:	e0bffc17 	ldw	r2,-16(fp)
   13d68:	00000806 	br	13d8c <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
   13d6c:	0013c600 	call	13c60 <alt_get_errno>
   13d70:	00c00344 	movi	r3,13
   13d74:	10c00015 	stw	r3,0(r2)
   13d78:	00000306 	br	13d88 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   13d7c:	0013c600 	call	13c60 <alt_get_errno>
   13d80:	00c01444 	movi	r3,81
   13d84:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   13d88:	00bfffc4 	movi	r2,-1
}
   13d8c:	e037883a 	mov	sp,fp
   13d90:	dfc00117 	ldw	ra,4(sp)
   13d94:	df000017 	ldw	fp,0(sp)
   13d98:	dec00204 	addi	sp,sp,8
   13d9c:	f800283a 	ret

00013da0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   13da0:	defffd04 	addi	sp,sp,-12
   13da4:	dfc00215 	stw	ra,8(sp)
   13da8:	df000115 	stw	fp,4(sp)
   13dac:	df000104 	addi	fp,sp,4
   13db0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   13db4:	e13fff17 	ldw	r4,-4(fp)
   13db8:	01400074 	movhi	r5,1
   13dbc:	295f0a04 	addi	r5,r5,31784
   13dc0:	00150740 	call	15074 <alt_dev_llist_insert>
}
   13dc4:	e037883a 	mov	sp,fp
   13dc8:	dfc00117 	ldw	ra,4(sp)
   13dcc:	df000017 	ldw	fp,0(sp)
   13dd0:	dec00204 	addi	sp,sp,8
   13dd4:	f800283a 	ret

00013dd8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   13dd8:	defffd04 	addi	sp,sp,-12
   13ddc:	dfc00215 	stw	ra,8(sp)
   13de0:	df000115 	stw	fp,4(sp)
   13de4:	df000104 	addi	fp,sp,4
   13de8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU4, cpu4);
   13dec:	0015a3c0 	call	15a3c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   13df0:	00800044 	movi	r2,1
   13df4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   13df8:	e037883a 	mov	sp,fp
   13dfc:	dfc00117 	ldw	ra,4(sp)
   13e00:	df000017 	ldw	fp,0(sp)
   13e04:	dec00204 	addi	sp,sp,8
   13e08:	f800283a 	ret

00013e0c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   13e0c:	defffe04 	addi	sp,sp,-8
   13e10:	dfc00115 	stw	ra,4(sp)
   13e14:	df000015 	stw	fp,0(sp)
   13e18:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER4, timer4);
   13e1c:	010000b4 	movhi	r4,2
   13e20:	21040804 	addi	r4,r4,4128
   13e24:	000b883a 	mov	r5,zero
   13e28:	01800044 	movi	r6,1
   13e2c:	01c0fa04 	movi	r7,1000
   13e30:	0014e400 	call	14e40 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_FIFO_INIT ( FIFO1TO4, fifo1to4);
   13e34:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO3TO4, fifo3to4);
   13e38:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO4TO5, fifo4to5);
   13e3c:	0001883a 	nop
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART4, jtag_uart4);
   13e40:	01000074 	movhi	r4,1
   13e44:	211af604 	addi	r4,r4,27608
   13e48:	000b883a 	mov	r5,zero
   13e4c:	01800404 	movi	r6,16
   13e50:	00144cc0 	call	144cc <altera_avalon_jtag_uart_init>
   13e54:	01000074 	movhi	r4,1
   13e58:	211aec04 	addi	r4,r4,27568
   13e5c:	0013da00 	call	13da0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   13e60:	0001883a 	nop
}
   13e64:	e037883a 	mov	sp,fp
   13e68:	dfc00117 	ldw	ra,4(sp)
   13e6c:	df000017 	ldw	fp,0(sp)
   13e70:	dec00204 	addi	sp,sp,8
   13e74:	f800283a 	ret

00013e78 <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
   13e78:	defffa04 	addi	sp,sp,-24
   13e7c:	dfc00515 	stw	ra,20(sp)
   13e80:	df000415 	stw	fp,16(sp)
   13e84:	df000404 	addi	fp,sp,16
   13e88:	e13ffc15 	stw	r4,-16(fp)
   13e8c:	e17ffd15 	stw	r5,-12(fp)
   13e90:	e1bffe15 	stw	r6,-8(fp)
   13e94:	e1ffff15 	stw	r7,-4(fp)
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
   13e98:	e13ffc17 	ldw	r4,-16(fp)
   13e9c:	01400fc4 	movi	r5,63
   13ea0:	00140440 	call	14044 <altera_avalon_fifo_clear_event>
   13ea4:	10000226 	beq	r2,zero,13eb0 <altera_avalon_fifo_init+0x38>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   13ea8:	00bfffc4 	movi	r2,-1
   13eac:	00001306 	br	13efc <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
   13eb0:	e13ffc17 	ldw	r4,-16(fp)
   13eb4:	e17ffd17 	ldw	r5,-12(fp)
   13eb8:	00140a00 	call	140a0 <altera_avalon_fifo_write_ienable>
   13ebc:	10000226 	beq	r2,zero,13ec8 <altera_avalon_fifo_init+0x50>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   13ec0:	00bfff84 	movi	r2,-2
   13ec4:	00000d06 	br	13efc <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
   13ec8:	e13ffc17 	ldw	r4,-16(fp)
   13ecc:	e17fff17 	ldw	r5,-4(fp)
   13ed0:	00140f80 	call	140f8 <altera_avalon_fifo_write_almostfull>
   13ed4:	10000226 	beq	r2,zero,13ee0 <altera_avalon_fifo_init+0x68>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   13ed8:	00bfff44 	movi	r2,-3
   13edc:	00000706 	br	13efc <altera_avalon_fifo_init+0x84>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
   13ee0:	e13ffc17 	ldw	r4,-16(fp)
   13ee4:	e17ffe17 	ldw	r5,-8(fp)
   13ee8:	00141500 	call	14150 <altera_avalon_fifo_write_almostempty>
   13eec:	10000226 	beq	r2,zero,13ef8 <altera_avalon_fifo_init+0x80>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   13ef0:	00bfff44 	movi	r2,-3
   13ef4:	00000106 	br	13efc <altera_avalon_fifo_init+0x84>
    }

    return ALTERA_AVALON_FIFO_OK;
   13ef8:	0005883a 	mov	r2,zero
}
   13efc:	e037883a 	mov	sp,fp
   13f00:	dfc00117 	ldw	ra,4(sp)
   13f04:	df000017 	ldw	fp,0(sp)
   13f08:	dec00204 	addi	sp,sp,8
   13f0c:	f800283a 	ret

00013f10 <altera_avalon_fifo_read_status>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
   13f10:	defffd04 	addi	sp,sp,-12
   13f14:	df000215 	stw	fp,8(sp)
   13f18:	df000204 	addi	fp,sp,8
   13f1c:	e13ffe15 	stw	r4,-8(fp)
   13f20:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   13f24:	e0bffe17 	ldw	r2,-8(fp)
   13f28:	10800104 	addi	r2,r2,4
   13f2c:	10800037 	ldwio	r2,0(r2)
   13f30:	1007883a 	mov	r3,r2
   13f34:	e0bfff17 	ldw	r2,-4(fp)
   13f38:	1884703a 	and	r2,r3,r2
}
   13f3c:	e037883a 	mov	sp,fp
   13f40:	df000017 	ldw	fp,0(sp)
   13f44:	dec00104 	addi	sp,sp,4
   13f48:	f800283a 	ret

00013f4c <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
   13f4c:	defffd04 	addi	sp,sp,-12
   13f50:	df000215 	stw	fp,8(sp)
   13f54:	df000204 	addi	fp,sp,8
   13f58:	e13ffe15 	stw	r4,-8(fp)
   13f5c:	e17fff15 	stw	r5,-4(fp)
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
   13f60:	e0bffe17 	ldw	r2,-8(fp)
   13f64:	10800304 	addi	r2,r2,12
   13f68:	10800037 	ldwio	r2,0(r2)
   13f6c:	1007883a 	mov	r3,r2
   13f70:	e0bfff17 	ldw	r2,-4(fp)
   13f74:	1884703a 	and	r2,r3,r2
}
   13f78:	e037883a 	mov	sp,fp
   13f7c:	df000017 	ldw	fp,0(sp)
   13f80:	dec00104 	addi	sp,sp,4
   13f84:	f800283a 	ret

00013f88 <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
   13f88:	defffe04 	addi	sp,sp,-8
   13f8c:	df000115 	stw	fp,4(sp)
   13f90:	df000104 	addi	fp,sp,4
   13f94:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
   13f98:	e0bfff17 	ldw	r2,-4(fp)
   13f9c:	10800404 	addi	r2,r2,16
   13fa0:	10800037 	ldwio	r2,0(r2)
}
   13fa4:	e037883a 	mov	sp,fp
   13fa8:	df000017 	ldw	fp,0(sp)
   13fac:	dec00104 	addi	sp,sp,4
   13fb0:	f800283a 	ret

00013fb4 <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
   13fb4:	defffe04 	addi	sp,sp,-8
   13fb8:	df000115 	stw	fp,4(sp)
   13fbc:	df000104 	addi	fp,sp,4
   13fc0:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
   13fc4:	e0bfff17 	ldw	r2,-4(fp)
   13fc8:	10800504 	addi	r2,r2,20
   13fcc:	10800037 	ldwio	r2,0(r2)
}
   13fd0:	e037883a 	mov	sp,fp
   13fd4:	df000017 	ldw	fp,0(sp)
   13fd8:	dec00104 	addi	sp,sp,4
   13fdc:	f800283a 	ret

00013fe0 <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
   13fe0:	defffd04 	addi	sp,sp,-12
   13fe4:	df000215 	stw	fp,8(sp)
   13fe8:	df000204 	addi	fp,sp,8
   13fec:	e13ffe15 	stw	r4,-8(fp)
   13ff0:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
   13ff4:	e0bffe17 	ldw	r2,-8(fp)
   13ff8:	10800204 	addi	r2,r2,8
   13ffc:	10800037 	ldwio	r2,0(r2)
   14000:	1007883a 	mov	r3,r2
   14004:	e0bfff17 	ldw	r2,-4(fp)
   14008:	1884703a 	and	r2,r3,r2
}
   1400c:	e037883a 	mov	sp,fp
   14010:	df000017 	ldw	fp,0(sp)
   14014:	dec00104 	addi	sp,sp,4
   14018:	f800283a 	ret

0001401c <altera_avalon_fifo_read_level>:

int altera_avalon_fifo_read_level(alt_u32 address)
{
   1401c:	defffe04 	addi	sp,sp,-8
   14020:	df000115 	stw	fp,4(sp)
   14024:	df000104 	addi	fp,sp,4
   14028:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
   1402c:	e0bfff17 	ldw	r2,-4(fp)
   14030:	10800037 	ldwio	r2,0(r2)
}
   14034:	e037883a 	mov	sp,fp
   14038:	df000017 	ldw	fp,0(sp)
   1403c:	dec00104 	addi	sp,sp,4
   14040:	f800283a 	ret

00014044 <altera_avalon_fifo_clear_event>:

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
   14044:	defffd04 	addi	sp,sp,-12
   14048:	df000215 	stw	fp,8(sp)
   1404c:	df000204 	addi	fp,sp,8
   14050:	e13ffe15 	stw	r4,-8(fp)
   14054:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
   14058:	e0bffe17 	ldw	r2,-8(fp)
   1405c:	10800204 	addi	r2,r2,8
   14060:	e0ffff17 	ldw	r3,-4(fp)
   14064:	10c00035 	stwio	r3,0(r2)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
   14068:	e0bffe17 	ldw	r2,-8(fp)
   1406c:	10800204 	addi	r2,r2,8
   14070:	10800037 	ldwio	r2,0(r2)
   14074:	1007883a 	mov	r3,r2
   14078:	e0bfff17 	ldw	r2,-4(fp)
   1407c:	1884703a 	and	r2,r3,r2
   14080:	1000021e 	bne	r2,zero,1408c <altera_avalon_fifo_clear_event+0x48>
        return ALTERA_AVALON_FIFO_OK;
   14084:	0005883a 	mov	r2,zero
   14088:	00000106 	br	14090 <altera_avalon_fifo_clear_event+0x4c>
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   1408c:	00bfffc4 	movi	r2,-1
}
   14090:	e037883a 	mov	sp,fp
   14094:	df000017 	ldw	fp,0(sp)
   14098:	dec00104 	addi	sp,sp,4
   1409c:	f800283a 	ret

000140a0 <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
   140a0:	defffd04 	addi	sp,sp,-12
   140a4:	df000215 	stw	fp,8(sp)
   140a8:	df000204 	addi	fp,sp,8
   140ac:	e13ffe15 	stw	r4,-8(fp)
   140b0:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
   140b4:	e0bffe17 	ldw	r2,-8(fp)
   140b8:	10800304 	addi	r2,r2,12
   140bc:	e0ffff17 	ldw	r3,-4(fp)
   140c0:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
   140c4:	e0bffe17 	ldw	r2,-8(fp)
   140c8:	10800304 	addi	r2,r2,12
   140cc:	10800037 	ldwio	r2,0(r2)
   140d0:	1007883a 	mov	r3,r2
   140d4:	e0bfff17 	ldw	r2,-4(fp)
   140d8:	1880021e 	bne	r3,r2,140e4 <altera_avalon_fifo_write_ienable+0x44>
        return ALTERA_AVALON_FIFO_OK;
   140dc:	0005883a 	mov	r2,zero
   140e0:	00000106 	br	140e8 <altera_avalon_fifo_write_ienable+0x48>
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   140e4:	00bfff84 	movi	r2,-2
}
   140e8:	e037883a 	mov	sp,fp
   140ec:	df000017 	ldw	fp,0(sp)
   140f0:	dec00104 	addi	sp,sp,4
   140f4:	f800283a 	ret

000140f8 <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
   140f8:	defffd04 	addi	sp,sp,-12
   140fc:	df000215 	stw	fp,8(sp)
   14100:	df000204 	addi	fp,sp,8
   14104:	e13ffe15 	stw	r4,-8(fp)
   14108:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
   1410c:	e0bffe17 	ldw	r2,-8(fp)
   14110:	10800404 	addi	r2,r2,16
   14114:	e0ffff17 	ldw	r3,-4(fp)
   14118:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
   1411c:	e0bffe17 	ldw	r2,-8(fp)
   14120:	10800404 	addi	r2,r2,16
   14124:	10800037 	ldwio	r2,0(r2)
   14128:	1007883a 	mov	r3,r2
   1412c:	e0bfff17 	ldw	r2,-4(fp)
   14130:	1880021e 	bne	r3,r2,1413c <altera_avalon_fifo_write_almostfull+0x44>
        return ALTERA_AVALON_FIFO_OK;
   14134:	0005883a 	mov	r2,zero
   14138:	00000106 	br	14140 <altera_avalon_fifo_write_almostfull+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   1413c:	00bfff44 	movi	r2,-3
}
   14140:	e037883a 	mov	sp,fp
   14144:	df000017 	ldw	fp,0(sp)
   14148:	dec00104 	addi	sp,sp,4
   1414c:	f800283a 	ret

00014150 <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
   14150:	defffd04 	addi	sp,sp,-12
   14154:	df000215 	stw	fp,8(sp)
   14158:	df000204 	addi	fp,sp,8
   1415c:	e13ffe15 	stw	r4,-8(fp)
   14160:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
   14164:	e0bffe17 	ldw	r2,-8(fp)
   14168:	10800504 	addi	r2,r2,20
   1416c:	e0ffff17 	ldw	r3,-4(fp)
   14170:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
   14174:	e0bffe17 	ldw	r2,-8(fp)
   14178:	10800504 	addi	r2,r2,20
   1417c:	10800037 	ldwio	r2,0(r2)
   14180:	1007883a 	mov	r3,r2
   14184:	e0bfff17 	ldw	r2,-4(fp)
   14188:	1880021e 	bne	r3,r2,14194 <altera_avalon_fifo_write_almostempty+0x44>
        return ALTERA_AVALON_FIFO_OK;
   1418c:	0005883a 	mov	r2,zero
   14190:	00000106 	br	14198 <altera_avalon_fifo_write_almostempty+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   14194:	00bfff44 	movi	r2,-3
}
   14198:	e037883a 	mov	sp,fp
   1419c:	df000017 	ldw	fp,0(sp)
   141a0:	dec00104 	addi	sp,sp,4
   141a4:	f800283a 	ret

000141a8 <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
   141a8:	defffb04 	addi	sp,sp,-20
   141ac:	dfc00415 	stw	ra,16(sp)
   141b0:	df000315 	stw	fp,12(sp)
   141b4:	df000304 	addi	fp,sp,12
   141b8:	e13ffd15 	stw	r4,-12(fp)
   141bc:	e17ffe15 	stw	r5,-8(fp)
   141c0:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   141c4:	e13ffe17 	ldw	r4,-8(fp)
   141c8:	01400044 	movi	r5,1
   141cc:	0013f100 	call	13f10 <altera_avalon_fifo_read_status>
   141d0:	1000051e 	bne	r2,zero,141e8 <altera_avalon_fifo_write_fifo+0x40>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
   141d4:	e0bffd17 	ldw	r2,-12(fp)
   141d8:	e0ffff17 	ldw	r3,-4(fp)
   141dc:	10c00035 	stwio	r3,0(r2)
        return ALTERA_AVALON_FIFO_OK;
   141e0:	0005883a 	mov	r2,zero
   141e4:	00000106 	br	141ec <altera_avalon_fifo_write_fifo+0x44>
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
   141e8:	00bfff04 	movi	r2,-4
    }
}
   141ec:	e037883a 	mov	sp,fp
   141f0:	dfc00117 	ldw	ra,4(sp)
   141f4:	df000017 	ldw	fp,0(sp)
   141f8:	dec00204 	addi	sp,sp,8
   141fc:	f800283a 	ret

00014200 <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
   14200:	defffa04 	addi	sp,sp,-24
   14204:	dfc00515 	stw	ra,20(sp)
   14208:	df000415 	stw	fp,16(sp)
   1420c:	df000404 	addi	fp,sp,16
   14210:	e13ffd15 	stw	r4,-12(fp)
   14214:	e17ffe15 	stw	r5,-8(fp)
   14218:	e1bfff15 	stw	r6,-4(fp)
    int return_val = 0;
   1421c:	e03ffc15 	stw	zero,-16(fp)
    *data = 0;
   14220:	e0bfff17 	ldw	r2,-4(fp)
   14224:	10000015 	stw	zero,0(r2)
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   14228:	e13ffe17 	ldw	r4,-8(fp)
   1422c:	01400084 	movi	r5,2
   14230:	0013f100 	call	13f10 <altera_avalon_fifo_read_status>
   14234:	1000071e 	bne	r2,zero,14254 <altera_avalon_read_fifo+0x54>
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
   14238:	e13ffe17 	ldw	r4,-8(fp)
   1423c:	001401c0 	call	1401c <altera_avalon_fifo_read_level>
   14240:	e0bffc15 	stw	r2,-16(fp)
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   14244:	e0bffd17 	ldw	r2,-12(fp)
   14248:	10c00037 	ldwio	r3,0(r2)
   1424c:	e0bfff17 	ldw	r2,-4(fp)
   14250:	10c00015 	stw	r3,0(r2)
    
    }
    return return_val;
   14254:	e0bffc17 	ldw	r2,-16(fp)
}
   14258:	e037883a 	mov	sp,fp
   1425c:	dfc00117 	ldw	ra,4(sp)
   14260:	df000017 	ldw	fp,0(sp)
   14264:	dec00204 	addi	sp,sp,8
   14268:	f800283a 	ret

0001426c <altera_avalon_fifo_read_fifo>:

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
   1426c:	defffc04 	addi	sp,sp,-16
   14270:	dfc00315 	stw	ra,12(sp)
   14274:	df000215 	stw	fp,8(sp)
   14278:	df000204 	addi	fp,sp,8
   1427c:	e13ffe15 	stw	r4,-8(fp)
   14280:	e17fff15 	stw	r5,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   14284:	e13fff17 	ldw	r4,-4(fp)
   14288:	01400084 	movi	r5,2
   1428c:	0013f100 	call	13f10 <altera_avalon_fifo_read_status>
   14290:	1000031e 	bne	r2,zero,142a0 <altera_avalon_fifo_read_fifo+0x34>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   14294:	e0bffe17 	ldw	r2,-8(fp)
   14298:	10800037 	ldwio	r2,0(r2)
   1429c:	00000106 	br	142a4 <altera_avalon_fifo_read_fifo+0x38>
    }
    return 0;
   142a0:	0005883a 	mov	r2,zero
}
   142a4:	e037883a 	mov	sp,fp
   142a8:	dfc00117 	ldw	ra,4(sp)
   142ac:	df000017 	ldw	fp,0(sp)
   142b0:	dec00204 	addi	sp,sp,8
   142b4:	f800283a 	ret

000142b8 <altera_avalon_fifo_write_other_info>:

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
   142b8:	defffb04 	addi	sp,sp,-20
   142bc:	dfc00415 	stw	ra,16(sp)
   142c0:	df000315 	stw	fp,12(sp)
   142c4:	df000304 	addi	fp,sp,12
   142c8:	e13ffd15 	stw	r4,-12(fp)
   142cc:	e17ffe15 	stw	r5,-8(fp)
   142d0:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   142d4:	e13ffe17 	ldw	r4,-8(fp)
   142d8:	01400044 	movi	r5,1
   142dc:	0013f100 	call	13f10 <altera_avalon_fifo_read_status>
   142e0:	1000061e 	bne	r2,zero,142fc <altera_avalon_fifo_write_other_info+0x44>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
   142e4:	e0bffd17 	ldw	r2,-12(fp)
   142e8:	10800104 	addi	r2,r2,4
   142ec:	e0ffff17 	ldw	r3,-4(fp)
   142f0:	10c00035 	stwio	r3,0(r2)
	return ALTERA_AVALON_FIFO_OK;
   142f4:	0005883a 	mov	r2,zero
   142f8:	00000106 	br	14300 <altera_avalon_fifo_write_other_info+0x48>
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
   142fc:	00bfff04 	movi	r2,-4
    }
}
   14300:	e037883a 	mov	sp,fp
   14304:	dfc00117 	ldw	ra,4(sp)
   14308:	df000017 	ldw	fp,0(sp)
   1430c:	dec00204 	addi	sp,sp,8
   14310:	f800283a 	ret

00014314 <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
   14314:	defffe04 	addi	sp,sp,-8
   14318:	df000115 	stw	fp,4(sp)
   1431c:	df000104 	addi	fp,sp,4
   14320:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
   14324:	e0bfff17 	ldw	r2,-4(fp)
   14328:	10800104 	addi	r2,r2,4
   1432c:	10800037 	ldwio	r2,0(r2)
}
   14330:	e037883a 	mov	sp,fp
   14334:	df000017 	ldw	fp,0(sp)
   14338:	dec00104 	addi	sp,sp,4
   1433c:	f800283a 	ret

00014340 <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
   14340:	defffe04 	addi	sp,sp,-8
   14344:	df000115 	stw	fp,4(sp)
   14348:	df000104 	addi	fp,sp,4
   1434c:	e13fff15 	stw	r4,-4(fp)
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
   14350:	e0bfff17 	ldw	r2,-4(fp)
   14354:	10800037 	ldwio	r2,0(r2)
}
   14358:	e037883a 	mov	sp,fp
   1435c:	df000017 	ldw	fp,0(sp)
   14360:	dec00104 	addi	sp,sp,4
   14364:	f800283a 	ret

00014368 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   14368:	defffa04 	addi	sp,sp,-24
   1436c:	dfc00515 	stw	ra,20(sp)
   14370:	df000415 	stw	fp,16(sp)
   14374:	df000404 	addi	fp,sp,16
   14378:	e13ffd15 	stw	r4,-12(fp)
   1437c:	e17ffe15 	stw	r5,-8(fp)
   14380:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   14384:	e0bffd17 	ldw	r2,-12(fp)
   14388:	10800017 	ldw	r2,0(r2)
   1438c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   14390:	e0bffc17 	ldw	r2,-16(fp)
   14394:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   14398:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   1439c:	10800217 	ldw	r2,8(r2)
   143a0:	1809883a 	mov	r4,r3
   143a4:	e17ffe17 	ldw	r5,-8(fp)
   143a8:	e1bfff17 	ldw	r6,-4(fp)
   143ac:	100f883a 	mov	r7,r2
   143b0:	00149900 	call	14990 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   143b4:	e037883a 	mov	sp,fp
   143b8:	dfc00117 	ldw	ra,4(sp)
   143bc:	df000017 	ldw	fp,0(sp)
   143c0:	dec00204 	addi	sp,sp,8
   143c4:	f800283a 	ret

000143c8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   143c8:	defffa04 	addi	sp,sp,-24
   143cc:	dfc00515 	stw	ra,20(sp)
   143d0:	df000415 	stw	fp,16(sp)
   143d4:	df000404 	addi	fp,sp,16
   143d8:	e13ffd15 	stw	r4,-12(fp)
   143dc:	e17ffe15 	stw	r5,-8(fp)
   143e0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   143e4:	e0bffd17 	ldw	r2,-12(fp)
   143e8:	10800017 	ldw	r2,0(r2)
   143ec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   143f0:	e0bffc17 	ldw	r2,-16(fp)
   143f4:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   143f8:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   143fc:	10800217 	ldw	r2,8(r2)
   14400:	1809883a 	mov	r4,r3
   14404:	e17ffe17 	ldw	r5,-8(fp)
   14408:	e1bfff17 	ldw	r6,-4(fp)
   1440c:	100f883a 	mov	r7,r2
   14410:	0014ba80 	call	14ba8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   14414:	e037883a 	mov	sp,fp
   14418:	dfc00117 	ldw	ra,4(sp)
   1441c:	df000017 	ldw	fp,0(sp)
   14420:	dec00204 	addi	sp,sp,8
   14424:	f800283a 	ret

00014428 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   14428:	defffc04 	addi	sp,sp,-16
   1442c:	dfc00315 	stw	ra,12(sp)
   14430:	df000215 	stw	fp,8(sp)
   14434:	df000204 	addi	fp,sp,8
   14438:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1443c:	e0bfff17 	ldw	r2,-4(fp)
   14440:	10800017 	ldw	r2,0(r2)
   14444:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   14448:	e0bffe17 	ldw	r2,-8(fp)
   1444c:	10c00a04 	addi	r3,r2,40
   14450:	e0bfff17 	ldw	r2,-4(fp)
   14454:	10800217 	ldw	r2,8(r2)
   14458:	1809883a 	mov	r4,r3
   1445c:	100b883a 	mov	r5,r2
   14460:	00148340 	call	14834 <altera_avalon_jtag_uart_close>
}
   14464:	e037883a 	mov	sp,fp
   14468:	dfc00117 	ldw	ra,4(sp)
   1446c:	df000017 	ldw	fp,0(sp)
   14470:	dec00204 	addi	sp,sp,8
   14474:	f800283a 	ret

00014478 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   14478:	defffa04 	addi	sp,sp,-24
   1447c:	dfc00515 	stw	ra,20(sp)
   14480:	df000415 	stw	fp,16(sp)
   14484:	df000404 	addi	fp,sp,16
   14488:	e13ffd15 	stw	r4,-12(fp)
   1448c:	e17ffe15 	stw	r5,-8(fp)
   14490:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   14494:	e0bffd17 	ldw	r2,-12(fp)
   14498:	10800017 	ldw	r2,0(r2)
   1449c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   144a0:	e0bffc17 	ldw	r2,-16(fp)
   144a4:	10800a04 	addi	r2,r2,40
   144a8:	1009883a 	mov	r4,r2
   144ac:	e17ffe17 	ldw	r5,-8(fp)
   144b0:	e1bfff17 	ldw	r6,-4(fp)
   144b4:	001489c0 	call	1489c <altera_avalon_jtag_uart_ioctl>
}
   144b8:	e037883a 	mov	sp,fp
   144bc:	dfc00117 	ldw	ra,4(sp)
   144c0:	df000017 	ldw	fp,0(sp)
   144c4:	dec00204 	addi	sp,sp,8
   144c8:	f800283a 	ret

000144cc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   144cc:	defffa04 	addi	sp,sp,-24
   144d0:	dfc00515 	stw	ra,20(sp)
   144d4:	df000415 	stw	fp,16(sp)
   144d8:	df000404 	addi	fp,sp,16
   144dc:	e13ffd15 	stw	r4,-12(fp)
   144e0:	e17ffe15 	stw	r5,-8(fp)
   144e4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   144e8:	e0bffd17 	ldw	r2,-12(fp)
   144ec:	00c00044 	movi	r3,1
   144f0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   144f4:	e0bffd17 	ldw	r2,-12(fp)
   144f8:	10800017 	ldw	r2,0(r2)
   144fc:	10800104 	addi	r2,r2,4
   14500:	e0fffd17 	ldw	r3,-12(fp)
   14504:	18c00817 	ldw	r3,32(r3)
   14508:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   1450c:	e0fffe17 	ldw	r3,-8(fp)
   14510:	e0bfff17 	ldw	r2,-4(fp)
   14514:	d8000015 	stw	zero,0(sp)
   14518:	1809883a 	mov	r4,r3
   1451c:	100b883a 	mov	r5,r2
   14520:	01800074 	movhi	r6,1
   14524:	31916304 	addi	r6,r6,17804
   14528:	e1fffd17 	ldw	r7,-12(fp)
   1452c:	00151e80 	call	151e8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   14530:	e0bffd17 	ldw	r2,-12(fp)
   14534:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   14538:	e0bffd17 	ldw	r2,-12(fp)
   1453c:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   14540:	008000b4 	movhi	r2,2
   14544:	10a5bc04 	addi	r2,r2,-26896
   14548:	10800017 	ldw	r2,0(r2)
   1454c:	1809883a 	mov	r4,r3
   14550:	100b883a 	mov	r5,r2
   14554:	01800074 	movhi	r6,1
   14558:	3191e404 	addi	r6,r6,18320
   1455c:	e1fffd17 	ldw	r7,-12(fp)
   14560:	0014ec80 	call	14ec8 <alt_alarm_start>
   14564:	1000040e 	bge	r2,zero,14578 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   14568:	e0bffd17 	ldw	r2,-12(fp)
   1456c:	00e00034 	movhi	r3,32768
   14570:	18ffffc4 	addi	r3,r3,-1
   14574:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   14578:	e037883a 	mov	sp,fp
   1457c:	dfc00117 	ldw	ra,4(sp)
   14580:	df000017 	ldw	fp,0(sp)
   14584:	dec00204 	addi	sp,sp,8
   14588:	f800283a 	ret

0001458c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   1458c:	defff804 	addi	sp,sp,-32
   14590:	df000715 	stw	fp,28(sp)
   14594:	df000704 	addi	fp,sp,28
   14598:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   1459c:	e0bfff17 	ldw	r2,-4(fp)
   145a0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   145a4:	e0bffb17 	ldw	r2,-20(fp)
   145a8:	10800017 	ldw	r2,0(r2)
   145ac:	e0bffc15 	stw	r2,-16(fp)
   145b0:	00000106 	br	145b8 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
   145b4:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   145b8:	e0bffc17 	ldw	r2,-16(fp)
   145bc:	10800104 	addi	r2,r2,4
   145c0:	10800037 	ldwio	r2,0(r2)
   145c4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   145c8:	e0bffd17 	ldw	r2,-12(fp)
   145cc:	1080c00c 	andi	r2,r2,768
   145d0:	10006a26 	beq	r2,zero,1477c <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   145d4:	e0bffd17 	ldw	r2,-12(fp)
   145d8:	1080400c 	andi	r2,r2,256
   145dc:	10003326 	beq	r2,zero,146ac <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   145e0:	00800074 	movhi	r2,1
   145e4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   145e8:	e0bffb17 	ldw	r2,-20(fp)
   145ec:	10800a17 	ldw	r2,40(r2)
   145f0:	10800044 	addi	r2,r2,1
   145f4:	1081ffcc 	andi	r2,r2,2047
   145f8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   145fc:	e0bffb17 	ldw	r2,-20(fp)
   14600:	10c00b17 	ldw	r3,44(r2)
   14604:	e0bffe17 	ldw	r2,-8(fp)
   14608:	18801426 	beq	r3,r2,1465c <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   1460c:	e0bffc17 	ldw	r2,-16(fp)
   14610:	10800037 	ldwio	r2,0(r2)
   14614:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   14618:	e0bff917 	ldw	r2,-28(fp)
   1461c:	10a0000c 	andi	r2,r2,32768
   14620:	10001026 	beq	r2,zero,14664 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   14624:	e0bffb17 	ldw	r2,-20(fp)
   14628:	10800a17 	ldw	r2,40(r2)
   1462c:	e0fff917 	ldw	r3,-28(fp)
   14630:	e13ffb17 	ldw	r4,-20(fp)
   14634:	2085883a 	add	r2,r4,r2
   14638:	10800e04 	addi	r2,r2,56
   1463c:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14640:	e0bffb17 	ldw	r2,-20(fp)
   14644:	10800a17 	ldw	r2,40(r2)
   14648:	10800044 	addi	r2,r2,1
   1464c:	10c1ffcc 	andi	r3,r2,2047
   14650:	e0bffb17 	ldw	r2,-20(fp)
   14654:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   14658:	003fe306 	br	145e8 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   1465c:	0001883a 	nop
   14660:	00000106 	br	14668 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   14664:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   14668:	e0bff917 	ldw	r2,-28(fp)
   1466c:	10bfffec 	andhi	r2,r2,65535
   14670:	10000e26 	beq	r2,zero,146ac <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   14674:	e0bffb17 	ldw	r2,-20(fp)
   14678:	10c00817 	ldw	r3,32(r2)
   1467c:	00bfff84 	movi	r2,-2
   14680:	1886703a 	and	r3,r3,r2
   14684:	e0bffb17 	ldw	r2,-20(fp)
   14688:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   1468c:	e0bffc17 	ldw	r2,-16(fp)
   14690:	10800104 	addi	r2,r2,4
   14694:	e0fffb17 	ldw	r3,-20(fp)
   14698:	18c00817 	ldw	r3,32(r3)
   1469c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   146a0:	e0bffc17 	ldw	r2,-16(fp)
   146a4:	10800104 	addi	r2,r2,4
   146a8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   146ac:	e0bffd17 	ldw	r2,-12(fp)
   146b0:	1080800c 	andi	r2,r2,512
   146b4:	103fbf26 	beq	r2,zero,145b4 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   146b8:	e0bffd17 	ldw	r2,-12(fp)
   146bc:	1004d43a 	srli	r2,r2,16
   146c0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   146c4:	00001406 	br	14718 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   146c8:	e0bffc17 	ldw	r2,-16(fp)
   146cc:	e0fffb17 	ldw	r3,-20(fp)
   146d0:	18c00d17 	ldw	r3,52(r3)
   146d4:	e13ffb17 	ldw	r4,-20(fp)
   146d8:	20c7883a 	add	r3,r4,r3
   146dc:	18c20e04 	addi	r3,r3,2104
   146e0:	18c00003 	ldbu	r3,0(r3)
   146e4:	18c03fcc 	andi	r3,r3,255
   146e8:	18c0201c 	xori	r3,r3,128
   146ec:	18ffe004 	addi	r3,r3,-128
   146f0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   146f4:	e0bffb17 	ldw	r2,-20(fp)
   146f8:	10800d17 	ldw	r2,52(r2)
   146fc:	10800044 	addi	r2,r2,1
   14700:	10c1ffcc 	andi	r3,r2,2047
   14704:	e0bffb17 	ldw	r2,-20(fp)
   14708:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   1470c:	e0bffa17 	ldw	r2,-24(fp)
   14710:	10bfffc4 	addi	r2,r2,-1
   14714:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   14718:	e0bffa17 	ldw	r2,-24(fp)
   1471c:	10000526 	beq	r2,zero,14734 <altera_avalon_jtag_uart_irq+0x1a8>
   14720:	e0bffb17 	ldw	r2,-20(fp)
   14724:	10c00d17 	ldw	r3,52(r2)
   14728:	e0bffb17 	ldw	r2,-20(fp)
   1472c:	10800c17 	ldw	r2,48(r2)
   14730:	18bfe51e 	bne	r3,r2,146c8 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   14734:	e0bffa17 	ldw	r2,-24(fp)
   14738:	103f9e26 	beq	r2,zero,145b4 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1473c:	e0bffb17 	ldw	r2,-20(fp)
   14740:	10c00817 	ldw	r3,32(r2)
   14744:	00bfff44 	movi	r2,-3
   14748:	1886703a 	and	r3,r3,r2
   1474c:	e0bffb17 	ldw	r2,-20(fp)
   14750:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   14754:	e0bffb17 	ldw	r2,-20(fp)
   14758:	10800017 	ldw	r2,0(r2)
   1475c:	10800104 	addi	r2,r2,4
   14760:	e0fffb17 	ldw	r3,-20(fp)
   14764:	18c00817 	ldw	r3,32(r3)
   14768:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1476c:	e0bffc17 	ldw	r2,-16(fp)
   14770:	10800104 	addi	r2,r2,4
   14774:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   14778:	003f8e06 	br	145b4 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   1477c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   14780:	e037883a 	mov	sp,fp
   14784:	df000017 	ldw	fp,0(sp)
   14788:	dec00104 	addi	sp,sp,4
   1478c:	f800283a 	ret

00014790 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   14790:	defffc04 	addi	sp,sp,-16
   14794:	df000315 	stw	fp,12(sp)
   14798:	df000304 	addi	fp,sp,12
   1479c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   147a0:	e0bfff17 	ldw	r2,-4(fp)
   147a4:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   147a8:	e0bffd17 	ldw	r2,-12(fp)
   147ac:	10800017 	ldw	r2,0(r2)
   147b0:	10800104 	addi	r2,r2,4
   147b4:	10800037 	ldwio	r2,0(r2)
   147b8:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   147bc:	e0bffe17 	ldw	r2,-8(fp)
   147c0:	1081000c 	andi	r2,r2,1024
   147c4:	10000a26 	beq	r2,zero,147f0 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   147c8:	e0bffd17 	ldw	r2,-12(fp)
   147cc:	10800017 	ldw	r2,0(r2)
   147d0:	10800104 	addi	r2,r2,4
   147d4:	e0fffd17 	ldw	r3,-12(fp)
   147d8:	18c00817 	ldw	r3,32(r3)
   147dc:	18c10014 	ori	r3,r3,1024
   147e0:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   147e4:	e0bffd17 	ldw	r2,-12(fp)
   147e8:	10000915 	stw	zero,36(r2)
   147ec:	00000a06 	br	14818 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   147f0:	e0bffd17 	ldw	r2,-12(fp)
   147f4:	10800917 	ldw	r2,36(r2)
   147f8:	00e00034 	movhi	r3,32768
   147fc:	18ffff04 	addi	r3,r3,-4
   14800:	18800536 	bltu	r3,r2,14818 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
   14804:	e0bffd17 	ldw	r2,-12(fp)
   14808:	10800917 	ldw	r2,36(r2)
   1480c:	10c00044 	addi	r3,r2,1
   14810:	e0bffd17 	ldw	r2,-12(fp)
   14814:	10c00915 	stw	r3,36(r2)
   14818:	008000b4 	movhi	r2,2
   1481c:	10a5bc04 	addi	r2,r2,-26896
   14820:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   14824:	e037883a 	mov	sp,fp
   14828:	df000017 	ldw	fp,0(sp)
   1482c:	dec00104 	addi	sp,sp,4
   14830:	f800283a 	ret

00014834 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   14834:	defffd04 	addi	sp,sp,-12
   14838:	df000215 	stw	fp,8(sp)
   1483c:	df000204 	addi	fp,sp,8
   14840:	e13ffe15 	stw	r4,-8(fp)
   14844:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   14848:	00000506 	br	14860 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   1484c:	e0bfff17 	ldw	r2,-4(fp)
   14850:	1090000c 	andi	r2,r2,16384
   14854:	10000226 	beq	r2,zero,14860 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   14858:	00bffd44 	movi	r2,-11
   1485c:	00000b06 	br	1488c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   14860:	e0bffe17 	ldw	r2,-8(fp)
   14864:	10c00d17 	ldw	r3,52(r2)
   14868:	e0bffe17 	ldw	r2,-8(fp)
   1486c:	10800c17 	ldw	r2,48(r2)
   14870:	18800526 	beq	r3,r2,14888 <altera_avalon_jtag_uart_close+0x54>
   14874:	e0bffe17 	ldw	r2,-8(fp)
   14878:	10c00917 	ldw	r3,36(r2)
   1487c:	e0bffe17 	ldw	r2,-8(fp)
   14880:	10800117 	ldw	r2,4(r2)
   14884:	18bff136 	bltu	r3,r2,1484c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   14888:	0005883a 	mov	r2,zero
}
   1488c:	e037883a 	mov	sp,fp
   14890:	df000017 	ldw	fp,0(sp)
   14894:	dec00104 	addi	sp,sp,4
   14898:	f800283a 	ret

0001489c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   1489c:	defffa04 	addi	sp,sp,-24
   148a0:	df000515 	stw	fp,20(sp)
   148a4:	df000504 	addi	fp,sp,20
   148a8:	e13ffd15 	stw	r4,-12(fp)
   148ac:	e17ffe15 	stw	r5,-8(fp)
   148b0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   148b4:	00bff9c4 	movi	r2,-25
   148b8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   148bc:	e0bffe17 	ldw	r2,-8(fp)
   148c0:	10da8060 	cmpeqi	r3,r2,27137
   148c4:	1800031e 	bne	r3,zero,148d4 <altera_avalon_jtag_uart_ioctl+0x38>
   148c8:	109a80a0 	cmpeqi	r2,r2,27138
   148cc:	1000181e 	bne	r2,zero,14930 <altera_avalon_jtag_uart_ioctl+0x94>
   148d0:	00002606 	br	1496c <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   148d4:	e0bffd17 	ldw	r2,-12(fp)
   148d8:	10c00117 	ldw	r3,4(r2)
   148dc:	00a00034 	movhi	r2,32768
   148e0:	10bfffc4 	addi	r2,r2,-1
   148e4:	18802226 	beq	r3,r2,14970 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
   148e8:	e0bfff17 	ldw	r2,-4(fp)
   148ec:	10800017 	ldw	r2,0(r2)
   148f0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   148f4:	e0bffc17 	ldw	r2,-16(fp)
   148f8:	10800090 	cmplti	r2,r2,2
   148fc:	1000061e 	bne	r2,zero,14918 <altera_avalon_jtag_uart_ioctl+0x7c>
   14900:	e0fffc17 	ldw	r3,-16(fp)
   14904:	00a00034 	movhi	r2,32768
   14908:	10bfffc4 	addi	r2,r2,-1
   1490c:	18800226 	beq	r3,r2,14918 <altera_avalon_jtag_uart_ioctl+0x7c>
   14910:	e0bffc17 	ldw	r2,-16(fp)
   14914:	00000206 	br	14920 <altera_avalon_jtag_uart_ioctl+0x84>
   14918:	00a00034 	movhi	r2,32768
   1491c:	10bfff84 	addi	r2,r2,-2
   14920:	e0fffd17 	ldw	r3,-12(fp)
   14924:	18800115 	stw	r2,4(r3)
      rc = 0;
   14928:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1492c:	00001006 	br	14970 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   14930:	e0bffd17 	ldw	r2,-12(fp)
   14934:	10c00117 	ldw	r3,4(r2)
   14938:	00a00034 	movhi	r2,32768
   1493c:	10bfffc4 	addi	r2,r2,-1
   14940:	18800d26 	beq	r3,r2,14978 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   14944:	e0bffd17 	ldw	r2,-12(fp)
   14948:	10c00917 	ldw	r3,36(r2)
   1494c:	e0bffd17 	ldw	r2,-12(fp)
   14950:	10800117 	ldw	r2,4(r2)
   14954:	1885803a 	cmpltu	r2,r3,r2
   14958:	10c03fcc 	andi	r3,r2,255
   1495c:	e0bfff17 	ldw	r2,-4(fp)
   14960:	10c00015 	stw	r3,0(r2)
      rc = 0;
   14964:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   14968:	00000306 	br	14978 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
   1496c:	00000306 	br	1497c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   14970:	0001883a 	nop
   14974:	00000106 	br	1497c <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   14978:	0001883a 	nop

  default:
    break;
  }

  return rc;
   1497c:	e0bffb17 	ldw	r2,-20(fp)
}
   14980:	e037883a 	mov	sp,fp
   14984:	df000017 	ldw	fp,0(sp)
   14988:	dec00104 	addi	sp,sp,4
   1498c:	f800283a 	ret

00014990 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   14990:	defff304 	addi	sp,sp,-52
   14994:	dfc00c15 	stw	ra,48(sp)
   14998:	df000b15 	stw	fp,44(sp)
   1499c:	df000b04 	addi	fp,sp,44
   149a0:	e13ffc15 	stw	r4,-16(fp)
   149a4:	e17ffd15 	stw	r5,-12(fp)
   149a8:	e1bffe15 	stw	r6,-8(fp)
   149ac:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   149b0:	e0bffd17 	ldw	r2,-12(fp)
   149b4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   149b8:	00004706 	br	14ad8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   149bc:	e0bffc17 	ldw	r2,-16(fp)
   149c0:	10800a17 	ldw	r2,40(r2)
   149c4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   149c8:	e0bffc17 	ldw	r2,-16(fp)
   149cc:	10800b17 	ldw	r2,44(r2)
   149d0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   149d4:	e0fff717 	ldw	r3,-36(fp)
   149d8:	e0bff817 	ldw	r2,-32(fp)
   149dc:	18800536 	bltu	r3,r2,149f4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   149e0:	e0fff717 	ldw	r3,-36(fp)
   149e4:	e0bff817 	ldw	r2,-32(fp)
   149e8:	1885c83a 	sub	r2,r3,r2
   149ec:	e0bff615 	stw	r2,-40(fp)
   149f0:	00000406 	br	14a04 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   149f4:	00c20004 	movi	r3,2048
   149f8:	e0bff817 	ldw	r2,-32(fp)
   149fc:	1885c83a 	sub	r2,r3,r2
   14a00:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   14a04:	e0bff617 	ldw	r2,-40(fp)
   14a08:	10001e26 	beq	r2,zero,14a84 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   14a0c:	e0fffe17 	ldw	r3,-8(fp)
   14a10:	e0bff617 	ldw	r2,-40(fp)
   14a14:	1880022e 	bgeu	r3,r2,14a20 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   14a18:	e0bffe17 	ldw	r2,-8(fp)
   14a1c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   14a20:	e0bff817 	ldw	r2,-32(fp)
   14a24:	10800e04 	addi	r2,r2,56
   14a28:	e0fffc17 	ldw	r3,-16(fp)
   14a2c:	1885883a 	add	r2,r3,r2
   14a30:	e13ff517 	ldw	r4,-44(fp)
   14a34:	100b883a 	mov	r5,r2
   14a38:	e1bff617 	ldw	r6,-40(fp)
   14a3c:	00108cc0 	call	108cc <memcpy>
      ptr   += n;
   14a40:	e0fff517 	ldw	r3,-44(fp)
   14a44:	e0bff617 	ldw	r2,-40(fp)
   14a48:	1885883a 	add	r2,r3,r2
   14a4c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   14a50:	e0fffe17 	ldw	r3,-8(fp)
   14a54:	e0bff617 	ldw	r2,-40(fp)
   14a58:	1885c83a 	sub	r2,r3,r2
   14a5c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14a60:	e0fff817 	ldw	r3,-32(fp)
   14a64:	e0bff617 	ldw	r2,-40(fp)
   14a68:	1885883a 	add	r2,r3,r2
   14a6c:	10c1ffcc 	andi	r3,r2,2047
   14a70:	e0bffc17 	ldw	r2,-16(fp)
   14a74:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   14a78:	e0bffe17 	ldw	r2,-8(fp)
   14a7c:	00bfcf16 	blt	zero,r2,149bc <altera_avalon_jtag_uart_read+0x2c>
   14a80:	00000106 	br	14a88 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   14a84:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   14a88:	e0fff517 	ldw	r3,-44(fp)
   14a8c:	e0bffd17 	ldw	r2,-12(fp)
   14a90:	1880141e 	bne	r3,r2,14ae4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   14a94:	e0bfff17 	ldw	r2,-4(fp)
   14a98:	1090000c 	andi	r2,r2,16384
   14a9c:	1000131e 	bne	r2,zero,14aec <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   14aa0:	0001883a 	nop
   14aa4:	e0bffc17 	ldw	r2,-16(fp)
   14aa8:	10c00a17 	ldw	r3,40(r2)
   14aac:	e0bff717 	ldw	r2,-36(fp)
   14ab0:	1880051e 	bne	r3,r2,14ac8 <altera_avalon_jtag_uart_read+0x138>
   14ab4:	e0bffc17 	ldw	r2,-16(fp)
   14ab8:	10c00917 	ldw	r3,36(r2)
   14abc:	e0bffc17 	ldw	r2,-16(fp)
   14ac0:	10800117 	ldw	r2,4(r2)
   14ac4:	18bff736 	bltu	r3,r2,14aa4 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   14ac8:	e0bffc17 	ldw	r2,-16(fp)
   14acc:	10c00a17 	ldw	r3,40(r2)
   14ad0:	e0bff717 	ldw	r2,-36(fp)
   14ad4:	18800726 	beq	r3,r2,14af4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   14ad8:	e0bffe17 	ldw	r2,-8(fp)
   14adc:	00bfb716 	blt	zero,r2,149bc <altera_avalon_jtag_uart_read+0x2c>
   14ae0:	00000506 	br	14af8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   14ae4:	0001883a 	nop
   14ae8:	00000306 	br	14af8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   14aec:	0001883a 	nop
   14af0:	00000106 	br	14af8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   14af4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   14af8:	e0fff517 	ldw	r3,-44(fp)
   14afc:	e0bffd17 	ldw	r2,-12(fp)
   14b00:	18801726 	beq	r3,r2,14b60 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14b04:	0005303a 	rdctl	r2,status
   14b08:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14b0c:	e0fffa17 	ldw	r3,-24(fp)
   14b10:	00bfff84 	movi	r2,-2
   14b14:	1884703a 	and	r2,r3,r2
   14b18:	1001703a 	wrctl	status,r2
  
  return context;
   14b1c:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   14b20:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   14b24:	e0bffc17 	ldw	r2,-16(fp)
   14b28:	10800817 	ldw	r2,32(r2)
   14b2c:	10c00054 	ori	r3,r2,1
   14b30:	e0bffc17 	ldw	r2,-16(fp)
   14b34:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   14b38:	e0bffc17 	ldw	r2,-16(fp)
   14b3c:	10800017 	ldw	r2,0(r2)
   14b40:	10800104 	addi	r2,r2,4
   14b44:	e0fffc17 	ldw	r3,-16(fp)
   14b48:	18c00817 	ldw	r3,32(r3)
   14b4c:	10c00035 	stwio	r3,0(r2)
   14b50:	e0bff917 	ldw	r2,-28(fp)
   14b54:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14b58:	e0bffb17 	ldw	r2,-20(fp)
   14b5c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   14b60:	e0fff517 	ldw	r3,-44(fp)
   14b64:	e0bffd17 	ldw	r2,-12(fp)
   14b68:	18800426 	beq	r3,r2,14b7c <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
   14b6c:	e0fff517 	ldw	r3,-44(fp)
   14b70:	e0bffd17 	ldw	r2,-12(fp)
   14b74:	1885c83a 	sub	r2,r3,r2
   14b78:	00000606 	br	14b94 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
   14b7c:	e0bfff17 	ldw	r2,-4(fp)
   14b80:	1090000c 	andi	r2,r2,16384
   14b84:	10000226 	beq	r2,zero,14b90 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
   14b88:	00bffd44 	movi	r2,-11
   14b8c:	00000106 	br	14b94 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
   14b90:	00bffec4 	movi	r2,-5
}
   14b94:	e037883a 	mov	sp,fp
   14b98:	dfc00117 	ldw	ra,4(sp)
   14b9c:	df000017 	ldw	fp,0(sp)
   14ba0:	dec00204 	addi	sp,sp,8
   14ba4:	f800283a 	ret

00014ba8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   14ba8:	defff304 	addi	sp,sp,-52
   14bac:	dfc00c15 	stw	ra,48(sp)
   14bb0:	df000b15 	stw	fp,44(sp)
   14bb4:	df000b04 	addi	fp,sp,44
   14bb8:	e13ffc15 	stw	r4,-16(fp)
   14bbc:	e17ffd15 	stw	r5,-12(fp)
   14bc0:	e1bffe15 	stw	r6,-8(fp)
   14bc4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   14bc8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   14bcc:	e0bffd17 	ldw	r2,-12(fp)
   14bd0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   14bd4:	00003706 	br	14cb4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   14bd8:	e0bffc17 	ldw	r2,-16(fp)
   14bdc:	10800c17 	ldw	r2,48(r2)
   14be0:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   14be4:	e0bffc17 	ldw	r2,-16(fp)
   14be8:	10800d17 	ldw	r2,52(r2)
   14bec:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   14bf0:	e0fff817 	ldw	r3,-32(fp)
   14bf4:	e0bff517 	ldw	r2,-44(fp)
   14bf8:	1880062e 	bgeu	r3,r2,14c14 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   14bfc:	e0fff517 	ldw	r3,-44(fp)
   14c00:	e0bff817 	ldw	r2,-32(fp)
   14c04:	1885c83a 	sub	r2,r3,r2
   14c08:	10bfffc4 	addi	r2,r2,-1
   14c0c:	e0bff615 	stw	r2,-40(fp)
   14c10:	00000b06 	br	14c40 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   14c14:	e0bff517 	ldw	r2,-44(fp)
   14c18:	10000526 	beq	r2,zero,14c30 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   14c1c:	00c20004 	movi	r3,2048
   14c20:	e0bff817 	ldw	r2,-32(fp)
   14c24:	1885c83a 	sub	r2,r3,r2
   14c28:	e0bff615 	stw	r2,-40(fp)
   14c2c:	00000406 	br	14c40 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   14c30:	00c1ffc4 	movi	r3,2047
   14c34:	e0bff817 	ldw	r2,-32(fp)
   14c38:	1885c83a 	sub	r2,r3,r2
   14c3c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   14c40:	e0bff617 	ldw	r2,-40(fp)
   14c44:	10001e26 	beq	r2,zero,14cc0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   14c48:	e0fffe17 	ldw	r3,-8(fp)
   14c4c:	e0bff617 	ldw	r2,-40(fp)
   14c50:	1880022e 	bgeu	r3,r2,14c5c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   14c54:	e0bffe17 	ldw	r2,-8(fp)
   14c58:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   14c5c:	e0bff817 	ldw	r2,-32(fp)
   14c60:	10820e04 	addi	r2,r2,2104
   14c64:	e0fffc17 	ldw	r3,-16(fp)
   14c68:	1885883a 	add	r2,r3,r2
   14c6c:	1009883a 	mov	r4,r2
   14c70:	e17ffd17 	ldw	r5,-12(fp)
   14c74:	e1bff617 	ldw	r6,-40(fp)
   14c78:	00108cc0 	call	108cc <memcpy>
      ptr   += n;
   14c7c:	e0fffd17 	ldw	r3,-12(fp)
   14c80:	e0bff617 	ldw	r2,-40(fp)
   14c84:	1885883a 	add	r2,r3,r2
   14c88:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   14c8c:	e0fffe17 	ldw	r3,-8(fp)
   14c90:	e0bff617 	ldw	r2,-40(fp)
   14c94:	1885c83a 	sub	r2,r3,r2
   14c98:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14c9c:	e0fff817 	ldw	r3,-32(fp)
   14ca0:	e0bff617 	ldw	r2,-40(fp)
   14ca4:	1885883a 	add	r2,r3,r2
   14ca8:	10c1ffcc 	andi	r3,r2,2047
   14cac:	e0bffc17 	ldw	r2,-16(fp)
   14cb0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   14cb4:	e0bffe17 	ldw	r2,-8(fp)
   14cb8:	00bfc716 	blt	zero,r2,14bd8 <altera_avalon_jtag_uart_write+0x30>
   14cbc:	00000106 	br	14cc4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   14cc0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14cc4:	0005303a 	rdctl	r2,status
   14cc8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14ccc:	e0fffa17 	ldw	r3,-24(fp)
   14cd0:	00bfff84 	movi	r2,-2
   14cd4:	1884703a 	and	r2,r3,r2
   14cd8:	1001703a 	wrctl	status,r2
  
  return context;
   14cdc:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   14ce0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   14ce4:	e0bffc17 	ldw	r2,-16(fp)
   14ce8:	10800817 	ldw	r2,32(r2)
   14cec:	10c00094 	ori	r3,r2,2
   14cf0:	e0bffc17 	ldw	r2,-16(fp)
   14cf4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   14cf8:	e0bffc17 	ldw	r2,-16(fp)
   14cfc:	10800017 	ldw	r2,0(r2)
   14d00:	10800104 	addi	r2,r2,4
   14d04:	e0fffc17 	ldw	r3,-16(fp)
   14d08:	18c00817 	ldw	r3,32(r3)
   14d0c:	10c00035 	stwio	r3,0(r2)
   14d10:	e0bff917 	ldw	r2,-28(fp)
   14d14:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14d18:	e0bffb17 	ldw	r2,-20(fp)
   14d1c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   14d20:	e0bffe17 	ldw	r2,-8(fp)
   14d24:	0080110e 	bge	zero,r2,14d6c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   14d28:	e0bfff17 	ldw	r2,-4(fp)
   14d2c:	1090000c 	andi	r2,r2,16384
   14d30:	1000111e 	bne	r2,zero,14d78 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   14d34:	0001883a 	nop
   14d38:	e0bffc17 	ldw	r2,-16(fp)
   14d3c:	10c00d17 	ldw	r3,52(r2)
   14d40:	e0bff517 	ldw	r2,-44(fp)
   14d44:	1880051e 	bne	r3,r2,14d5c <altera_avalon_jtag_uart_write+0x1b4>
   14d48:	e0bffc17 	ldw	r2,-16(fp)
   14d4c:	10c00917 	ldw	r3,36(r2)
   14d50:	e0bffc17 	ldw	r2,-16(fp)
   14d54:	10800117 	ldw	r2,4(r2)
   14d58:	18bff736 	bltu	r3,r2,14d38 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   14d5c:	e0bffc17 	ldw	r2,-16(fp)
   14d60:	10c00d17 	ldw	r3,52(r2)
   14d64:	e0bff517 	ldw	r2,-44(fp)
   14d68:	18800526 	beq	r3,r2,14d80 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   14d6c:	e0bffe17 	ldw	r2,-8(fp)
   14d70:	00bfd016 	blt	zero,r2,14cb4 <altera_avalon_jtag_uart_write+0x10c>
   14d74:	00000306 	br	14d84 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   14d78:	0001883a 	nop
   14d7c:	00000106 	br	14d84 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
   14d80:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   14d84:	e0fffd17 	ldw	r3,-12(fp)
   14d88:	e0bff717 	ldw	r2,-36(fp)
   14d8c:	18800426 	beq	r3,r2,14da0 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   14d90:	e0fffd17 	ldw	r3,-12(fp)
   14d94:	e0bff717 	ldw	r2,-36(fp)
   14d98:	1885c83a 	sub	r2,r3,r2
   14d9c:	00000606 	br	14db8 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   14da0:	e0bfff17 	ldw	r2,-4(fp)
   14da4:	1090000c 	andi	r2,r2,16384
   14da8:	10000226 	beq	r2,zero,14db4 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   14dac:	00bffd44 	movi	r2,-11
   14db0:	00000106 	br	14db8 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   14db4:	00bffec4 	movi	r2,-5
}
   14db8:	e037883a 	mov	sp,fp
   14dbc:	dfc00117 	ldw	ra,4(sp)
   14dc0:	df000017 	ldw	fp,0(sp)
   14dc4:	dec00204 	addi	sp,sp,8
   14dc8:	f800283a 	ret

00014dcc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   14dcc:	defffa04 	addi	sp,sp,-24
   14dd0:	dfc00515 	stw	ra,20(sp)
   14dd4:	df000415 	stw	fp,16(sp)
   14dd8:	df000404 	addi	fp,sp,16
   14ddc:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   14de0:	0007883a 	mov	r3,zero
   14de4:	e0bfff17 	ldw	r2,-4(fp)
   14de8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   14dec:	e0bfff17 	ldw	r2,-4(fp)
   14df0:	10800104 	addi	r2,r2,4
   14df4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14df8:	0005303a 	rdctl	r2,status
   14dfc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14e00:	e0fffd17 	ldw	r3,-12(fp)
   14e04:	00bfff84 	movi	r2,-2
   14e08:	1884703a 	and	r2,r3,r2
   14e0c:	1001703a 	wrctl	status,r2
  
  return context;
   14e10:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   14e14:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   14e18:	00159380 	call	15938 <alt_tick>
   14e1c:	e0bffc17 	ldw	r2,-16(fp)
   14e20:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14e24:	e0bffe17 	ldw	r2,-8(fp)
   14e28:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   14e2c:	e037883a 	mov	sp,fp
   14e30:	dfc00117 	ldw	ra,4(sp)
   14e34:	df000017 	ldw	fp,0(sp)
   14e38:	dec00204 	addi	sp,sp,8
   14e3c:	f800283a 	ret

00014e40 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   14e40:	defff804 	addi	sp,sp,-32
   14e44:	dfc00715 	stw	ra,28(sp)
   14e48:	df000615 	stw	fp,24(sp)
   14e4c:	df000604 	addi	fp,sp,24
   14e50:	e13ffc15 	stw	r4,-16(fp)
   14e54:	e17ffd15 	stw	r5,-12(fp)
   14e58:	e1bffe15 	stw	r6,-8(fp)
   14e5c:	e1ffff15 	stw	r7,-4(fp)
   14e60:	e0bfff17 	ldw	r2,-4(fp)
   14e64:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   14e68:	008000b4 	movhi	r2,2
   14e6c:	10a5bc04 	addi	r2,r2,-26896
   14e70:	10800017 	ldw	r2,0(r2)
   14e74:	1000041e 	bne	r2,zero,14e88 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   14e78:	008000b4 	movhi	r2,2
   14e7c:	10a5bc04 	addi	r2,r2,-26896
   14e80:	e0fffb17 	ldw	r3,-20(fp)
   14e84:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   14e88:	e0bffc17 	ldw	r2,-16(fp)
   14e8c:	10800104 	addi	r2,r2,4
   14e90:	00c001c4 	movi	r3,7
   14e94:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   14e98:	d8000015 	stw	zero,0(sp)
   14e9c:	e13ffd17 	ldw	r4,-12(fp)
   14ea0:	e17ffe17 	ldw	r5,-8(fp)
   14ea4:	01800074 	movhi	r6,1
   14ea8:	31937304 	addi	r6,r6,19916
   14eac:	e1fffc17 	ldw	r7,-16(fp)
   14eb0:	00151e80 	call	151e8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   14eb4:	e037883a 	mov	sp,fp
   14eb8:	dfc00117 	ldw	ra,4(sp)
   14ebc:	df000017 	ldw	fp,0(sp)
   14ec0:	dec00204 	addi	sp,sp,8
   14ec4:	f800283a 	ret

00014ec8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   14ec8:	defff504 	addi	sp,sp,-44
   14ecc:	df000a15 	stw	fp,40(sp)
   14ed0:	df000a04 	addi	fp,sp,40
   14ed4:	e13ffc15 	stw	r4,-16(fp)
   14ed8:	e17ffd15 	stw	r5,-12(fp)
   14edc:	e1bffe15 	stw	r6,-8(fp)
   14ee0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   14ee4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   14ee8:	008000b4 	movhi	r2,2
   14eec:	10a5bc04 	addi	r2,r2,-26896
   14ef0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   14ef4:	10003f26 	beq	r2,zero,14ff4 <alt_alarm_start+0x12c>
  {
    if (alarm)
   14ef8:	e0bffc17 	ldw	r2,-16(fp)
   14efc:	10003b26 	beq	r2,zero,14fec <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   14f00:	e0bffc17 	ldw	r2,-16(fp)
   14f04:	e0fffe17 	ldw	r3,-8(fp)
   14f08:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   14f0c:	e0bffc17 	ldw	r2,-16(fp)
   14f10:	e0ffff17 	ldw	r3,-4(fp)
   14f14:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14f18:	0005303a 	rdctl	r2,status
   14f1c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14f20:	e0fff817 	ldw	r3,-32(fp)
   14f24:	00bfff84 	movi	r2,-2
   14f28:	1884703a 	and	r2,r3,r2
   14f2c:	1001703a 	wrctl	status,r2
  
  return context;
   14f30:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   14f34:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   14f38:	008000b4 	movhi	r2,2
   14f3c:	10a5bd04 	addi	r2,r2,-26892
   14f40:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   14f44:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   14f48:	e0fffd17 	ldw	r3,-12(fp)
   14f4c:	e0bff617 	ldw	r2,-40(fp)
   14f50:	1885883a 	add	r2,r3,r2
   14f54:	10c00044 	addi	r3,r2,1
   14f58:	e0bffc17 	ldw	r2,-16(fp)
   14f5c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   14f60:	e0bffc17 	ldw	r2,-16(fp)
   14f64:	10c00217 	ldw	r3,8(r2)
   14f68:	e0bff617 	ldw	r2,-40(fp)
   14f6c:	1880042e 	bgeu	r3,r2,14f80 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   14f70:	e0bffc17 	ldw	r2,-16(fp)
   14f74:	00c00044 	movi	r3,1
   14f78:	10c00405 	stb	r3,16(r2)
   14f7c:	00000206 	br	14f88 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   14f80:	e0bffc17 	ldw	r2,-16(fp)
   14f84:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   14f88:	e0bffc17 	ldw	r2,-16(fp)
   14f8c:	00c00074 	movhi	r3,1
   14f90:	18df1004 	addi	r3,r3,31808
   14f94:	e0fff915 	stw	r3,-28(fp)
   14f98:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   14f9c:	e0bffa17 	ldw	r2,-24(fp)
   14fa0:	e0fff917 	ldw	r3,-28(fp)
   14fa4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   14fa8:	e0bff917 	ldw	r2,-28(fp)
   14fac:	10c00017 	ldw	r3,0(r2)
   14fb0:	e0bffa17 	ldw	r2,-24(fp)
   14fb4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   14fb8:	e0bff917 	ldw	r2,-28(fp)
   14fbc:	10800017 	ldw	r2,0(r2)
   14fc0:	e0fffa17 	ldw	r3,-24(fp)
   14fc4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   14fc8:	e0bff917 	ldw	r2,-28(fp)
   14fcc:	e0fffa17 	ldw	r3,-24(fp)
   14fd0:	10c00015 	stw	r3,0(r2)
   14fd4:	e0bff717 	ldw	r2,-36(fp)
   14fd8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14fdc:	e0bffb17 	ldw	r2,-20(fp)
   14fe0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   14fe4:	0005883a 	mov	r2,zero
   14fe8:	00000306 	br	14ff8 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   14fec:	00bffa84 	movi	r2,-22
   14ff0:	00000106 	br	14ff8 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   14ff4:	00bfde84 	movi	r2,-134
  }
}
   14ff8:	e037883a 	mov	sp,fp
   14ffc:	df000017 	ldw	fp,0(sp)
   15000:	dec00104 	addi	sp,sp,4
   15004:	f800283a 	ret

00015008 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   15008:	deffff04 	addi	sp,sp,-4
   1500c:	df000015 	stw	fp,0(sp)
   15010:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   15014:	e037883a 	mov	sp,fp
   15018:	df000017 	ldw	fp,0(sp)
   1501c:	dec00104 	addi	sp,sp,4
   15020:	f800283a 	ret

00015024 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   15024:	defffe04 	addi	sp,sp,-8
   15028:	dfc00115 	stw	ra,4(sp)
   1502c:	df000015 	stw	fp,0(sp)
   15030:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   15034:	00800074 	movhi	r2,1
   15038:	109f0d04 	addi	r2,r2,31796
   1503c:	10800017 	ldw	r2,0(r2)
   15040:	10000526 	beq	r2,zero,15058 <alt_get_errno+0x34>
   15044:	00800074 	movhi	r2,1
   15048:	109f0d04 	addi	r2,r2,31796
   1504c:	10800017 	ldw	r2,0(r2)
   15050:	103ee83a 	callr	r2
   15054:	00000206 	br	15060 <alt_get_errno+0x3c>
   15058:	008000b4 	movhi	r2,2
   1505c:	10a5b704 	addi	r2,r2,-26916
}
   15060:	e037883a 	mov	sp,fp
   15064:	dfc00117 	ldw	ra,4(sp)
   15068:	df000017 	ldw	fp,0(sp)
   1506c:	dec00204 	addi	sp,sp,8
   15070:	f800283a 	ret

00015074 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   15074:	defffa04 	addi	sp,sp,-24
   15078:	dfc00515 	stw	ra,20(sp)
   1507c:	df000415 	stw	fp,16(sp)
   15080:	df000404 	addi	fp,sp,16
   15084:	e13ffe15 	stw	r4,-8(fp)
   15088:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1508c:	e0bffe17 	ldw	r2,-8(fp)
   15090:	10000326 	beq	r2,zero,150a0 <alt_dev_llist_insert+0x2c>
   15094:	e0bffe17 	ldw	r2,-8(fp)
   15098:	10800217 	ldw	r2,8(r2)
   1509c:	1000051e 	bne	r2,zero,150b4 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   150a0:	00150240 	call	15024 <alt_get_errno>
   150a4:	00c00584 	movi	r3,22
   150a8:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   150ac:	00bffa84 	movi	r2,-22
   150b0:	00001306 	br	15100 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   150b4:	e0bffe17 	ldw	r2,-8(fp)
   150b8:	e0ffff17 	ldw	r3,-4(fp)
   150bc:	e0fffc15 	stw	r3,-16(fp)
   150c0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   150c4:	e0bffd17 	ldw	r2,-12(fp)
   150c8:	e0fffc17 	ldw	r3,-16(fp)
   150cc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   150d0:	e0bffc17 	ldw	r2,-16(fp)
   150d4:	10c00017 	ldw	r3,0(r2)
   150d8:	e0bffd17 	ldw	r2,-12(fp)
   150dc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   150e0:	e0bffc17 	ldw	r2,-16(fp)
   150e4:	10800017 	ldw	r2,0(r2)
   150e8:	e0fffd17 	ldw	r3,-12(fp)
   150ec:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   150f0:	e0bffc17 	ldw	r2,-16(fp)
   150f4:	e0fffd17 	ldw	r3,-12(fp)
   150f8:	10c00015 	stw	r3,0(r2)

  return 0;  
   150fc:	0005883a 	mov	r2,zero
}
   15100:	e037883a 	mov	sp,fp
   15104:	dfc00117 	ldw	ra,4(sp)
   15108:	df000017 	ldw	fp,0(sp)
   1510c:	dec00204 	addi	sp,sp,8
   15110:	f800283a 	ret

00015114 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   15114:	defffd04 	addi	sp,sp,-12
   15118:	dfc00215 	stw	ra,8(sp)
   1511c:	df000115 	stw	fp,4(sp)
   15120:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   15124:	00800074 	movhi	r2,1
   15128:	10982904 	addi	r2,r2,24740
   1512c:	e0bfff15 	stw	r2,-4(fp)
   15130:	00000606 	br	1514c <_do_ctors+0x38>
        (*ctor) (); 
   15134:	e0bfff17 	ldw	r2,-4(fp)
   15138:	10800017 	ldw	r2,0(r2)
   1513c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   15140:	e0bfff17 	ldw	r2,-4(fp)
   15144:	10bfff04 	addi	r2,r2,-4
   15148:	e0bfff15 	stw	r2,-4(fp)
   1514c:	e0ffff17 	ldw	r3,-4(fp)
   15150:	00800074 	movhi	r2,1
   15154:	10982a04 	addi	r2,r2,24744
   15158:	18bff62e 	bgeu	r3,r2,15134 <_do_ctors+0x20>
        (*ctor) (); 
}
   1515c:	e037883a 	mov	sp,fp
   15160:	dfc00117 	ldw	ra,4(sp)
   15164:	df000017 	ldw	fp,0(sp)
   15168:	dec00204 	addi	sp,sp,8
   1516c:	f800283a 	ret

00015170 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   15170:	defffd04 	addi	sp,sp,-12
   15174:	dfc00215 	stw	ra,8(sp)
   15178:	df000115 	stw	fp,4(sp)
   1517c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   15180:	00800074 	movhi	r2,1
   15184:	10982904 	addi	r2,r2,24740
   15188:	e0bfff15 	stw	r2,-4(fp)
   1518c:	00000606 	br	151a8 <_do_dtors+0x38>
        (*dtor) (); 
   15190:	e0bfff17 	ldw	r2,-4(fp)
   15194:	10800017 	ldw	r2,0(r2)
   15198:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1519c:	e0bfff17 	ldw	r2,-4(fp)
   151a0:	10bfff04 	addi	r2,r2,-4
   151a4:	e0bfff15 	stw	r2,-4(fp)
   151a8:	e0ffff17 	ldw	r3,-4(fp)
   151ac:	00800074 	movhi	r2,1
   151b0:	10982a04 	addi	r2,r2,24744
   151b4:	18bff62e 	bgeu	r3,r2,15190 <_do_dtors+0x20>
        (*dtor) (); 
}
   151b8:	e037883a 	mov	sp,fp
   151bc:	dfc00117 	ldw	ra,4(sp)
   151c0:	df000017 	ldw	fp,0(sp)
   151c4:	dec00204 	addi	sp,sp,8
   151c8:	f800283a 	ret

000151cc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   151cc:	deffff04 	addi	sp,sp,-4
   151d0:	df000015 	stw	fp,0(sp)
   151d4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   151d8:	e037883a 	mov	sp,fp
   151dc:	df000017 	ldw	fp,0(sp)
   151e0:	dec00104 	addi	sp,sp,4
   151e4:	f800283a 	ret

000151e8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   151e8:	defff904 	addi	sp,sp,-28
   151ec:	dfc00615 	stw	ra,24(sp)
   151f0:	df000515 	stw	fp,20(sp)
   151f4:	df000504 	addi	fp,sp,20
   151f8:	e13ffc15 	stw	r4,-16(fp)
   151fc:	e17ffd15 	stw	r5,-12(fp)
   15200:	e1bffe15 	stw	r6,-8(fp)
   15204:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   15208:	e0800217 	ldw	r2,8(fp)
   1520c:	d8800015 	stw	r2,0(sp)
   15210:	e13ffc17 	ldw	r4,-16(fp)
   15214:	e17ffd17 	ldw	r5,-12(fp)
   15218:	e1bffe17 	ldw	r6,-8(fp)
   1521c:	e1ffff17 	ldw	r7,-4(fp)
   15220:	00153c00 	call	153c0 <alt_iic_isr_register>
}  
   15224:	e037883a 	mov	sp,fp
   15228:	dfc00117 	ldw	ra,4(sp)
   1522c:	df000017 	ldw	fp,0(sp)
   15230:	dec00204 	addi	sp,sp,8
   15234:	f800283a 	ret

00015238 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   15238:	defff904 	addi	sp,sp,-28
   1523c:	df000615 	stw	fp,24(sp)
   15240:	df000604 	addi	fp,sp,24
   15244:	e13ffe15 	stw	r4,-8(fp)
   15248:	e17fff15 	stw	r5,-4(fp)
   1524c:	e0bfff17 	ldw	r2,-4(fp)
   15250:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15254:	0005303a 	rdctl	r2,status
   15258:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1525c:	e0fffb17 	ldw	r3,-20(fp)
   15260:	00bfff84 	movi	r2,-2
   15264:	1884703a 	and	r2,r3,r2
   15268:	1001703a 	wrctl	status,r2
  
  return context;
   1526c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   15270:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   15274:	e0bffa17 	ldw	r2,-24(fp)
   15278:	00c00044 	movi	r3,1
   1527c:	1884983a 	sll	r2,r3,r2
   15280:	1007883a 	mov	r3,r2
   15284:	008000b4 	movhi	r2,2
   15288:	10a5bb04 	addi	r2,r2,-26900
   1528c:	10800017 	ldw	r2,0(r2)
   15290:	1886b03a 	or	r3,r3,r2
   15294:	008000b4 	movhi	r2,2
   15298:	10a5bb04 	addi	r2,r2,-26900
   1529c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   152a0:	008000b4 	movhi	r2,2
   152a4:	10a5bb04 	addi	r2,r2,-26900
   152a8:	10800017 	ldw	r2,0(r2)
   152ac:	100170fa 	wrctl	ienable,r2
   152b0:	e0bffc17 	ldw	r2,-16(fp)
   152b4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   152b8:	e0bffd17 	ldw	r2,-12(fp)
   152bc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   152c0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   152c4:	e037883a 	mov	sp,fp
   152c8:	df000017 	ldw	fp,0(sp)
   152cc:	dec00104 	addi	sp,sp,4
   152d0:	f800283a 	ret

000152d4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   152d4:	defff904 	addi	sp,sp,-28
   152d8:	df000615 	stw	fp,24(sp)
   152dc:	df000604 	addi	fp,sp,24
   152e0:	e13ffe15 	stw	r4,-8(fp)
   152e4:	e17fff15 	stw	r5,-4(fp)
   152e8:	e0bfff17 	ldw	r2,-4(fp)
   152ec:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   152f0:	0005303a 	rdctl	r2,status
   152f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   152f8:	e0fffb17 	ldw	r3,-20(fp)
   152fc:	00bfff84 	movi	r2,-2
   15300:	1884703a 	and	r2,r3,r2
   15304:	1001703a 	wrctl	status,r2
  
  return context;
   15308:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1530c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   15310:	e0bffa17 	ldw	r2,-24(fp)
   15314:	00c00044 	movi	r3,1
   15318:	1884983a 	sll	r2,r3,r2
   1531c:	0084303a 	nor	r2,zero,r2
   15320:	1007883a 	mov	r3,r2
   15324:	008000b4 	movhi	r2,2
   15328:	10a5bb04 	addi	r2,r2,-26900
   1532c:	10800017 	ldw	r2,0(r2)
   15330:	1886703a 	and	r3,r3,r2
   15334:	008000b4 	movhi	r2,2
   15338:	10a5bb04 	addi	r2,r2,-26900
   1533c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   15340:	008000b4 	movhi	r2,2
   15344:	10a5bb04 	addi	r2,r2,-26900
   15348:	10800017 	ldw	r2,0(r2)
   1534c:	100170fa 	wrctl	ienable,r2
   15350:	e0bffc17 	ldw	r2,-16(fp)
   15354:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15358:	e0bffd17 	ldw	r2,-12(fp)
   1535c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   15360:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   15364:	e037883a 	mov	sp,fp
   15368:	df000017 	ldw	fp,0(sp)
   1536c:	dec00104 	addi	sp,sp,4
   15370:	f800283a 	ret

00015374 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   15374:	defffc04 	addi	sp,sp,-16
   15378:	df000315 	stw	fp,12(sp)
   1537c:	df000304 	addi	fp,sp,12
   15380:	e13ffe15 	stw	r4,-8(fp)
   15384:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   15388:	000530fa 	rdctl	r2,ienable
   1538c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   15390:	e0bfff17 	ldw	r2,-4(fp)
   15394:	00c00044 	movi	r3,1
   15398:	1884983a 	sll	r2,r3,r2
   1539c:	1007883a 	mov	r3,r2
   153a0:	e0bffd17 	ldw	r2,-12(fp)
   153a4:	1884703a 	and	r2,r3,r2
   153a8:	1004c03a 	cmpne	r2,r2,zero
   153ac:	10803fcc 	andi	r2,r2,255
}
   153b0:	e037883a 	mov	sp,fp
   153b4:	df000017 	ldw	fp,0(sp)
   153b8:	dec00104 	addi	sp,sp,4
   153bc:	f800283a 	ret

000153c0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   153c0:	defff504 	addi	sp,sp,-44
   153c4:	dfc00a15 	stw	ra,40(sp)
   153c8:	df000915 	stw	fp,36(sp)
   153cc:	df000904 	addi	fp,sp,36
   153d0:	e13ffc15 	stw	r4,-16(fp)
   153d4:	e17ffd15 	stw	r5,-12(fp)
   153d8:	e1bffe15 	stw	r6,-8(fp)
   153dc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   153e0:	00bffa84 	movi	r2,-22
   153e4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   153e8:	e0bffd17 	ldw	r2,-12(fp)
   153ec:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   153f0:	e0bff817 	ldw	r2,-32(fp)
   153f4:	10800808 	cmpgei	r2,r2,32
   153f8:	1000271e 	bne	r2,zero,15498 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   153fc:	0005303a 	rdctl	r2,status
   15400:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15404:	e0fffa17 	ldw	r3,-24(fp)
   15408:	00bfff84 	movi	r2,-2
   1540c:	1884703a 	and	r2,r3,r2
   15410:	1001703a 	wrctl	status,r2
  
  return context;
   15414:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   15418:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   1541c:	00c000b4 	movhi	r3,2
   15420:	18e64804 	addi	r3,r3,-26336
   15424:	e0bff817 	ldw	r2,-32(fp)
   15428:	100490fa 	slli	r2,r2,3
   1542c:	1885883a 	add	r2,r3,r2
   15430:	e0fffe17 	ldw	r3,-8(fp)
   15434:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   15438:	00c000b4 	movhi	r3,2
   1543c:	18e64804 	addi	r3,r3,-26336
   15440:	e0bff817 	ldw	r2,-32(fp)
   15444:	100490fa 	slli	r2,r2,3
   15448:	1885883a 	add	r2,r3,r2
   1544c:	10800104 	addi	r2,r2,4
   15450:	e0ffff17 	ldw	r3,-4(fp)
   15454:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   15458:	e0bffe17 	ldw	r2,-8(fp)
   1545c:	10000526 	beq	r2,zero,15474 <alt_iic_isr_register+0xb4>
   15460:	e0bff817 	ldw	r2,-32(fp)
   15464:	e13ffc17 	ldw	r4,-16(fp)
   15468:	100b883a 	mov	r5,r2
   1546c:	00152380 	call	15238 <alt_ic_irq_enable>
   15470:	00000406 	br	15484 <alt_iic_isr_register+0xc4>
   15474:	e0bff817 	ldw	r2,-32(fp)
   15478:	e13ffc17 	ldw	r4,-16(fp)
   1547c:	100b883a 	mov	r5,r2
   15480:	00152d40 	call	152d4 <alt_ic_irq_disable>
   15484:	e0bff715 	stw	r2,-36(fp)
   15488:	e0bff917 	ldw	r2,-28(fp)
   1548c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15490:	e0bffb17 	ldw	r2,-20(fp)
   15494:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   15498:	e0bff717 	ldw	r2,-36(fp)
}
   1549c:	e037883a 	mov	sp,fp
   154a0:	dfc00117 	ldw	ra,4(sp)
   154a4:	df000017 	ldw	fp,0(sp)
   154a8:	dec00204 	addi	sp,sp,8
   154ac:	f800283a 	ret

000154b0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   154b0:	defff804 	addi	sp,sp,-32
   154b4:	dfc00715 	stw	ra,28(sp)
   154b8:	df000615 	stw	fp,24(sp)
   154bc:	dc000515 	stw	r16,20(sp)
   154c0:	df000504 	addi	fp,sp,20
   154c4:	e13ffc15 	stw	r4,-16(fp)
   154c8:	e17ffd15 	stw	r5,-12(fp)
   154cc:	e1bffe15 	stw	r6,-8(fp)
   154d0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   154d4:	e13ffd17 	ldw	r4,-12(fp)
   154d8:	e17ffe17 	ldw	r5,-8(fp)
   154dc:	e1bfff17 	ldw	r6,-4(fp)
   154e0:	00157480 	call	15748 <open>
   154e4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   154e8:	e0bffb17 	ldw	r2,-20(fp)
   154ec:	10002216 	blt	r2,zero,15578 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   154f0:	04000074 	movhi	r16,1
   154f4:	841a8c04 	addi	r16,r16,27184
   154f8:	e0bffb17 	ldw	r2,-20(fp)
   154fc:	1009883a 	mov	r4,r2
   15500:	01400304 	movi	r5,12
   15504:	00108a40 	call	108a4 <__mulsi3>
   15508:	8085883a 	add	r2,r16,r2
   1550c:	10c00017 	ldw	r3,0(r2)
   15510:	e0bffc17 	ldw	r2,-16(fp)
   15514:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   15518:	04000074 	movhi	r16,1
   1551c:	841a8c04 	addi	r16,r16,27184
   15520:	e0bffb17 	ldw	r2,-20(fp)
   15524:	1009883a 	mov	r4,r2
   15528:	01400304 	movi	r5,12
   1552c:	00108a40 	call	108a4 <__mulsi3>
   15530:	8085883a 	add	r2,r16,r2
   15534:	10800104 	addi	r2,r2,4
   15538:	10c00017 	ldw	r3,0(r2)
   1553c:	e0bffc17 	ldw	r2,-16(fp)
   15540:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   15544:	04000074 	movhi	r16,1
   15548:	841a8c04 	addi	r16,r16,27184
   1554c:	e0bffb17 	ldw	r2,-20(fp)
   15550:	1009883a 	mov	r4,r2
   15554:	01400304 	movi	r5,12
   15558:	00108a40 	call	108a4 <__mulsi3>
   1555c:	8085883a 	add	r2,r16,r2
   15560:	10800204 	addi	r2,r2,8
   15564:	10c00017 	ldw	r3,0(r2)
   15568:	e0bffc17 	ldw	r2,-16(fp)
   1556c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   15570:	e13ffb17 	ldw	r4,-20(fp)
   15574:	0013b300 	call	13b30 <alt_release_fd>
  }
} 
   15578:	e037883a 	mov	sp,fp
   1557c:	dfc00217 	ldw	ra,8(sp)
   15580:	df000117 	ldw	fp,4(sp)
   15584:	dc000017 	ldw	r16,0(sp)
   15588:	dec00304 	addi	sp,sp,12
   1558c:	f800283a 	ret

00015590 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   15590:	defffb04 	addi	sp,sp,-20
   15594:	dfc00415 	stw	ra,16(sp)
   15598:	df000315 	stw	fp,12(sp)
   1559c:	df000304 	addi	fp,sp,12
   155a0:	e13ffd15 	stw	r4,-12(fp)
   155a4:	e17ffe15 	stw	r5,-8(fp)
   155a8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   155ac:	01000074 	movhi	r4,1
   155b0:	211a8f04 	addi	r4,r4,27196
   155b4:	e17ffd17 	ldw	r5,-12(fp)
   155b8:	01800044 	movi	r6,1
   155bc:	01c07fc4 	movi	r7,511
   155c0:	00154b00 	call	154b0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   155c4:	01000074 	movhi	r4,1
   155c8:	211a8c04 	addi	r4,r4,27184
   155cc:	e17ffe17 	ldw	r5,-8(fp)
   155d0:	000d883a 	mov	r6,zero
   155d4:	01c07fc4 	movi	r7,511
   155d8:	00154b00 	call	154b0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   155dc:	01000074 	movhi	r4,1
   155e0:	211a9204 	addi	r4,r4,27208
   155e4:	e17fff17 	ldw	r5,-4(fp)
   155e8:	01800044 	movi	r6,1
   155ec:	01c07fc4 	movi	r7,511
   155f0:	00154b00 	call	154b0 <alt_open_fd>
}  
   155f4:	e037883a 	mov	sp,fp
   155f8:	dfc00117 	ldw	ra,4(sp)
   155fc:	df000017 	ldw	fp,0(sp)
   15600:	dec00204 	addi	sp,sp,8
   15604:	f800283a 	ret

00015608 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   15608:	defffe04 	addi	sp,sp,-8
   1560c:	dfc00115 	stw	ra,4(sp)
   15610:	df000015 	stw	fp,0(sp)
   15614:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   15618:	00800074 	movhi	r2,1
   1561c:	109f0d04 	addi	r2,r2,31796
   15620:	10800017 	ldw	r2,0(r2)
   15624:	10000526 	beq	r2,zero,1563c <alt_get_errno+0x34>
   15628:	00800074 	movhi	r2,1
   1562c:	109f0d04 	addi	r2,r2,31796
   15630:	10800017 	ldw	r2,0(r2)
   15634:	103ee83a 	callr	r2
   15638:	00000206 	br	15644 <alt_get_errno+0x3c>
   1563c:	008000b4 	movhi	r2,2
   15640:	10a5b704 	addi	r2,r2,-26916
}
   15644:	e037883a 	mov	sp,fp
   15648:	dfc00117 	ldw	ra,4(sp)
   1564c:	df000017 	ldw	fp,0(sp)
   15650:	dec00204 	addi	sp,sp,8
   15654:	f800283a 	ret

00015658 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   15658:	defffb04 	addi	sp,sp,-20
   1565c:	dfc00415 	stw	ra,16(sp)
   15660:	df000315 	stw	fp,12(sp)
   15664:	dc000215 	stw	r16,8(sp)
   15668:	df000204 	addi	fp,sp,8
   1566c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   15670:	e0bfff17 	ldw	r2,-4(fp)
   15674:	10800217 	ldw	r2,8(r2)
   15678:	10d00034 	orhi	r3,r2,16384
   1567c:	e0bfff17 	ldw	r2,-4(fp)
   15680:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   15684:	e03ffe15 	stw	zero,-8(fp)
   15688:	00002206 	br	15714 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1568c:	04000074 	movhi	r16,1
   15690:	841a8c04 	addi	r16,r16,27184
   15694:	e0bffe17 	ldw	r2,-8(fp)
   15698:	1009883a 	mov	r4,r2
   1569c:	01400304 	movi	r5,12
   156a0:	00108a40 	call	108a4 <__mulsi3>
   156a4:	8085883a 	add	r2,r16,r2
   156a8:	10c00017 	ldw	r3,0(r2)
   156ac:	e0bfff17 	ldw	r2,-4(fp)
   156b0:	10800017 	ldw	r2,0(r2)
   156b4:	1880141e 	bne	r3,r2,15708 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   156b8:	04000074 	movhi	r16,1
   156bc:	841a8c04 	addi	r16,r16,27184
   156c0:	e0bffe17 	ldw	r2,-8(fp)
   156c4:	1009883a 	mov	r4,r2
   156c8:	01400304 	movi	r5,12
   156cc:	00108a40 	call	108a4 <__mulsi3>
   156d0:	8085883a 	add	r2,r16,r2
   156d4:	10800204 	addi	r2,r2,8
   156d8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   156dc:	10000a0e 	bge	r2,zero,15708 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   156e0:	e13ffe17 	ldw	r4,-8(fp)
   156e4:	01400304 	movi	r5,12
   156e8:	00108a40 	call	108a4 <__mulsi3>
   156ec:	00c00074 	movhi	r3,1
   156f0:	18da8c04 	addi	r3,r3,27184
   156f4:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   156f8:	e0bfff17 	ldw	r2,-4(fp)
   156fc:	18800226 	beq	r3,r2,15708 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   15700:	00bffcc4 	movi	r2,-13
   15704:	00000a06 	br	15730 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   15708:	e0bffe17 	ldw	r2,-8(fp)
   1570c:	10800044 	addi	r2,r2,1
   15710:	e0bffe15 	stw	r2,-8(fp)
   15714:	00800074 	movhi	r2,1
   15718:	109f0c04 	addi	r2,r2,31792
   1571c:	10800017 	ldw	r2,0(r2)
   15720:	1007883a 	mov	r3,r2
   15724:	e0bffe17 	ldw	r2,-8(fp)
   15728:	18bfd82e 	bgeu	r3,r2,1568c <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   1572c:	0005883a 	mov	r2,zero
}
   15730:	e037883a 	mov	sp,fp
   15734:	dfc00217 	ldw	ra,8(sp)
   15738:	df000117 	ldw	fp,4(sp)
   1573c:	dc000017 	ldw	r16,0(sp)
   15740:	dec00304 	addi	sp,sp,12
   15744:	f800283a 	ret

00015748 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   15748:	defff604 	addi	sp,sp,-40
   1574c:	dfc00915 	stw	ra,36(sp)
   15750:	df000815 	stw	fp,32(sp)
   15754:	df000804 	addi	fp,sp,32
   15758:	e13ffd15 	stw	r4,-12(fp)
   1575c:	e17ffe15 	stw	r5,-8(fp)
   15760:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   15764:	00bfffc4 	movi	r2,-1
   15768:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   1576c:	00bffb44 	movi	r2,-19
   15770:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   15774:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   15778:	e13ffd17 	ldw	r4,-12(fp)
   1577c:	01400074 	movhi	r5,1
   15780:	295f0a04 	addi	r5,r5,31784
   15784:	0015a5c0 	call	15a5c <alt_find_dev>
   15788:	e0bff815 	stw	r2,-32(fp)
   1578c:	e0bff817 	ldw	r2,-32(fp)
   15790:	1000051e 	bne	r2,zero,157a8 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   15794:	e13ffd17 	ldw	r4,-12(fp)
   15798:	0015aec0 	call	15aec <alt_find_file>
   1579c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   157a0:	00800044 	movi	r2,1
   157a4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   157a8:	e0bff817 	ldw	r2,-32(fp)
   157ac:	10002a26 	beq	r2,zero,15858 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   157b0:	e13ff817 	ldw	r4,-32(fp)
   157b4:	0015c000 	call	15c00 <alt_get_fd>
   157b8:	e0bff915 	stw	r2,-28(fp)
   157bc:	e0bff917 	ldw	r2,-28(fp)
   157c0:	1000030e 	bge	r2,zero,157d0 <open+0x88>
    {
      status = index;
   157c4:	e0bff917 	ldw	r2,-28(fp)
   157c8:	e0bffa15 	stw	r2,-24(fp)
   157cc:	00002406 	br	15860 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   157d0:	e13ff917 	ldw	r4,-28(fp)
   157d4:	01400304 	movi	r5,12
   157d8:	00108a40 	call	108a4 <__mulsi3>
   157dc:	00c00074 	movhi	r3,1
   157e0:	18da8c04 	addi	r3,r3,27184
   157e4:	10c5883a 	add	r2,r2,r3
   157e8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   157ec:	e0fffe17 	ldw	r3,-8(fp)
   157f0:	00900034 	movhi	r2,16384
   157f4:	10bfffc4 	addi	r2,r2,-1
   157f8:	1886703a 	and	r3,r3,r2
   157fc:	e0bffc17 	ldw	r2,-16(fp)
   15800:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   15804:	e0bffb17 	ldw	r2,-20(fp)
   15808:	1000051e 	bne	r2,zero,15820 <open+0xd8>
   1580c:	e13ffc17 	ldw	r4,-16(fp)
   15810:	00156580 	call	15658 <alt_file_locked>
   15814:	e0bffa15 	stw	r2,-24(fp)
   15818:	e0bffa17 	ldw	r2,-24(fp)
   1581c:	10001016 	blt	r2,zero,15860 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   15820:	e0bff817 	ldw	r2,-32(fp)
   15824:	10800317 	ldw	r2,12(r2)
   15828:	10000826 	beq	r2,zero,1584c <open+0x104>
   1582c:	e0bff817 	ldw	r2,-32(fp)
   15830:	10800317 	ldw	r2,12(r2)
   15834:	e13ffc17 	ldw	r4,-16(fp)
   15838:	e17ffd17 	ldw	r5,-12(fp)
   1583c:	e1bffe17 	ldw	r6,-8(fp)
   15840:	e1ffff17 	ldw	r7,-4(fp)
   15844:	103ee83a 	callr	r2
   15848:	00000106 	br	15850 <open+0x108>
   1584c:	0005883a 	mov	r2,zero
   15850:	e0bffa15 	stw	r2,-24(fp)
   15854:	00000206 	br	15860 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   15858:	00bffb44 	movi	r2,-19
   1585c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   15860:	e0bffa17 	ldw	r2,-24(fp)
   15864:	1000080e 	bge	r2,zero,15888 <open+0x140>
  {
    alt_release_fd (index);  
   15868:	e13ff917 	ldw	r4,-28(fp)
   1586c:	0013b300 	call	13b30 <alt_release_fd>
    ALT_ERRNO = -status;
   15870:	00156080 	call	15608 <alt_get_errno>
   15874:	e0fffa17 	ldw	r3,-24(fp)
   15878:	00c7c83a 	sub	r3,zero,r3
   1587c:	10c00015 	stw	r3,0(r2)
    return -1;
   15880:	00bfffc4 	movi	r2,-1
   15884:	00000106 	br	1588c <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   15888:	e0bff917 	ldw	r2,-28(fp)
}
   1588c:	e037883a 	mov	sp,fp
   15890:	dfc00117 	ldw	ra,4(sp)
   15894:	df000017 	ldw	fp,0(sp)
   15898:	dec00204 	addi	sp,sp,8
   1589c:	f800283a 	ret

000158a0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   158a0:	defffa04 	addi	sp,sp,-24
   158a4:	df000515 	stw	fp,20(sp)
   158a8:	df000504 	addi	fp,sp,20
   158ac:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   158b0:	0005303a 	rdctl	r2,status
   158b4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   158b8:	e0fffc17 	ldw	r3,-16(fp)
   158bc:	00bfff84 	movi	r2,-2
   158c0:	1884703a 	and	r2,r3,r2
   158c4:	1001703a 	wrctl	status,r2
  
  return context;
   158c8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   158cc:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   158d0:	e0bfff17 	ldw	r2,-4(fp)
   158d4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   158d8:	e0bffd17 	ldw	r2,-12(fp)
   158dc:	10800017 	ldw	r2,0(r2)
   158e0:	e0fffd17 	ldw	r3,-12(fp)
   158e4:	18c00117 	ldw	r3,4(r3)
   158e8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   158ec:	e0bffd17 	ldw	r2,-12(fp)
   158f0:	10800117 	ldw	r2,4(r2)
   158f4:	e0fffd17 	ldw	r3,-12(fp)
   158f8:	18c00017 	ldw	r3,0(r3)
   158fc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   15900:	e0bffd17 	ldw	r2,-12(fp)
   15904:	e0fffd17 	ldw	r3,-12(fp)
   15908:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   1590c:	e0bffd17 	ldw	r2,-12(fp)
   15910:	e0fffd17 	ldw	r3,-12(fp)
   15914:	10c00015 	stw	r3,0(r2)
   15918:	e0bffb17 	ldw	r2,-20(fp)
   1591c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15920:	e0bffe17 	ldw	r2,-8(fp)
   15924:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   15928:	e037883a 	mov	sp,fp
   1592c:	df000017 	ldw	fp,0(sp)
   15930:	dec00104 	addi	sp,sp,4
   15934:	f800283a 	ret

00015938 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   15938:	defffb04 	addi	sp,sp,-20
   1593c:	dfc00415 	stw	ra,16(sp)
   15940:	df000315 	stw	fp,12(sp)
   15944:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   15948:	d0a00c17 	ldw	r2,-32720(gp)
   1594c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   15950:	d0a6b917 	ldw	r2,-25884(gp)
   15954:	10800044 	addi	r2,r2,1
   15958:	d0a6b915 	stw	r2,-25884(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1595c:	00002e06 	br	15a18 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   15960:	e0bffd17 	ldw	r2,-12(fp)
   15964:	10800017 	ldw	r2,0(r2)
   15968:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1596c:	e0bffd17 	ldw	r2,-12(fp)
   15970:	10800403 	ldbu	r2,16(r2)
   15974:	10803fcc 	andi	r2,r2,255
   15978:	10000426 	beq	r2,zero,1598c <alt_tick+0x54>
   1597c:	d0a6b917 	ldw	r2,-25884(gp)
   15980:	1000021e 	bne	r2,zero,1598c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   15984:	e0bffd17 	ldw	r2,-12(fp)
   15988:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   1598c:	e0bffd17 	ldw	r2,-12(fp)
   15990:	10800217 	ldw	r2,8(r2)
   15994:	d0e6b917 	ldw	r3,-25884(gp)
   15998:	18801d36 	bltu	r3,r2,15a10 <alt_tick+0xd8>
   1599c:	e0bffd17 	ldw	r2,-12(fp)
   159a0:	10800403 	ldbu	r2,16(r2)
   159a4:	10803fcc 	andi	r2,r2,255
   159a8:	1000191e 	bne	r2,zero,15a10 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   159ac:	e0bffd17 	ldw	r2,-12(fp)
   159b0:	10c00317 	ldw	r3,12(r2)
   159b4:	e0bffd17 	ldw	r2,-12(fp)
   159b8:	10800517 	ldw	r2,20(r2)
   159bc:	1009883a 	mov	r4,r2
   159c0:	183ee83a 	callr	r3
   159c4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   159c8:	e0bfff17 	ldw	r2,-4(fp)
   159cc:	1000031e 	bne	r2,zero,159dc <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   159d0:	e13ffd17 	ldw	r4,-12(fp)
   159d4:	00158a00 	call	158a0 <alt_alarm_stop>
   159d8:	00000d06 	br	15a10 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   159dc:	e0bffd17 	ldw	r2,-12(fp)
   159e0:	10c00217 	ldw	r3,8(r2)
   159e4:	e0bfff17 	ldw	r2,-4(fp)
   159e8:	1887883a 	add	r3,r3,r2
   159ec:	e0bffd17 	ldw	r2,-12(fp)
   159f0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   159f4:	e0bffd17 	ldw	r2,-12(fp)
   159f8:	10c00217 	ldw	r3,8(r2)
   159fc:	d0a6b917 	ldw	r2,-25884(gp)
   15a00:	1880032e 	bgeu	r3,r2,15a10 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   15a04:	e0bffd17 	ldw	r2,-12(fp)
   15a08:	00c00044 	movi	r3,1
   15a0c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   15a10:	e0bffe17 	ldw	r2,-8(fp)
   15a14:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   15a18:	e0fffd17 	ldw	r3,-12(fp)
   15a1c:	d0a00c04 	addi	r2,gp,-32720
   15a20:	18bfcf1e 	bne	r3,r2,15960 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   15a24:	0001883a 	nop
}
   15a28:	e037883a 	mov	sp,fp
   15a2c:	dfc00117 	ldw	ra,4(sp)
   15a30:	df000017 	ldw	fp,0(sp)
   15a34:	dec00204 	addi	sp,sp,8
   15a38:	f800283a 	ret

00015a3c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   15a3c:	deffff04 	addi	sp,sp,-4
   15a40:	df000015 	stw	fp,0(sp)
   15a44:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   15a48:	000170fa 	wrctl	ienable,zero
}
   15a4c:	e037883a 	mov	sp,fp
   15a50:	df000017 	ldw	fp,0(sp)
   15a54:	dec00104 	addi	sp,sp,4
   15a58:	f800283a 	ret

00015a5c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   15a5c:	defffa04 	addi	sp,sp,-24
   15a60:	dfc00515 	stw	ra,20(sp)
   15a64:	df000415 	stw	fp,16(sp)
   15a68:	df000404 	addi	fp,sp,16
   15a6c:	e13ffe15 	stw	r4,-8(fp)
   15a70:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   15a74:	e0bfff17 	ldw	r2,-4(fp)
   15a78:	10800017 	ldw	r2,0(r2)
   15a7c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   15a80:	e13ffe17 	ldw	r4,-8(fp)
   15a84:	0010aa40 	call	10aa4 <strlen>
   15a88:	10800044 	addi	r2,r2,1
   15a8c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   15a90:	00000d06 	br	15ac8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   15a94:	e0bffc17 	ldw	r2,-16(fp)
   15a98:	10c00217 	ldw	r3,8(r2)
   15a9c:	e0bffd17 	ldw	r2,-12(fp)
   15aa0:	1809883a 	mov	r4,r3
   15aa4:	e17ffe17 	ldw	r5,-8(fp)
   15aa8:	100d883a 	mov	r6,r2
   15aac:	0015d200 	call	15d20 <memcmp>
   15ab0:	1000021e 	bne	r2,zero,15abc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   15ab4:	e0bffc17 	ldw	r2,-16(fp)
   15ab8:	00000706 	br	15ad8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   15abc:	e0bffc17 	ldw	r2,-16(fp)
   15ac0:	10800017 	ldw	r2,0(r2)
   15ac4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   15ac8:	e0fffc17 	ldw	r3,-16(fp)
   15acc:	e0bfff17 	ldw	r2,-4(fp)
   15ad0:	18bff01e 	bne	r3,r2,15a94 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   15ad4:	0005883a 	mov	r2,zero
}
   15ad8:	e037883a 	mov	sp,fp
   15adc:	dfc00117 	ldw	ra,4(sp)
   15ae0:	df000017 	ldw	fp,0(sp)
   15ae4:	dec00204 	addi	sp,sp,8
   15ae8:	f800283a 	ret

00015aec <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   15aec:	defffb04 	addi	sp,sp,-20
   15af0:	dfc00415 	stw	ra,16(sp)
   15af4:	df000315 	stw	fp,12(sp)
   15af8:	df000304 	addi	fp,sp,12
   15afc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   15b00:	00800074 	movhi	r2,1
   15b04:	109f0804 	addi	r2,r2,31776
   15b08:	10800017 	ldw	r2,0(r2)
   15b0c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   15b10:	00003106 	br	15bd8 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   15b14:	e0bffd17 	ldw	r2,-12(fp)
   15b18:	10800217 	ldw	r2,8(r2)
   15b1c:	1009883a 	mov	r4,r2
   15b20:	0010aa40 	call	10aa4 <strlen>
   15b24:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   15b28:	e0bffd17 	ldw	r2,-12(fp)
   15b2c:	10c00217 	ldw	r3,8(r2)
   15b30:	e0bffe17 	ldw	r2,-8(fp)
   15b34:	10bfffc4 	addi	r2,r2,-1
   15b38:	1885883a 	add	r2,r3,r2
   15b3c:	10800003 	ldbu	r2,0(r2)
   15b40:	10803fcc 	andi	r2,r2,255
   15b44:	1080201c 	xori	r2,r2,128
   15b48:	10bfe004 	addi	r2,r2,-128
   15b4c:	10800bd8 	cmpnei	r2,r2,47
   15b50:	1000031e 	bne	r2,zero,15b60 <alt_find_file+0x74>
    {
      len -= 1;
   15b54:	e0bffe17 	ldw	r2,-8(fp)
   15b58:	10bfffc4 	addi	r2,r2,-1
   15b5c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   15b60:	e0bffe17 	ldw	r2,-8(fp)
   15b64:	e0ffff17 	ldw	r3,-4(fp)
   15b68:	1885883a 	add	r2,r3,r2
   15b6c:	10800003 	ldbu	r2,0(r2)
   15b70:	10803fcc 	andi	r2,r2,255
   15b74:	1080201c 	xori	r2,r2,128
   15b78:	10bfe004 	addi	r2,r2,-128
   15b7c:	10800be0 	cmpeqi	r2,r2,47
   15b80:	1000081e 	bne	r2,zero,15ba4 <alt_find_file+0xb8>
   15b84:	e0bffe17 	ldw	r2,-8(fp)
   15b88:	e0ffff17 	ldw	r3,-4(fp)
   15b8c:	1885883a 	add	r2,r3,r2
   15b90:	10800003 	ldbu	r2,0(r2)
   15b94:	10803fcc 	andi	r2,r2,255
   15b98:	1080201c 	xori	r2,r2,128
   15b9c:	10bfe004 	addi	r2,r2,-128
   15ba0:	10000a1e 	bne	r2,zero,15bcc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   15ba4:	e0bffd17 	ldw	r2,-12(fp)
   15ba8:	10c00217 	ldw	r3,8(r2)
   15bac:	e0bffe17 	ldw	r2,-8(fp)
   15bb0:	1809883a 	mov	r4,r3
   15bb4:	e17fff17 	ldw	r5,-4(fp)
   15bb8:	100d883a 	mov	r6,r2
   15bbc:	0015d200 	call	15d20 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   15bc0:	1000021e 	bne	r2,zero,15bcc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   15bc4:	e0bffd17 	ldw	r2,-12(fp)
   15bc8:	00000806 	br	15bec <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   15bcc:	e0bffd17 	ldw	r2,-12(fp)
   15bd0:	10800017 	ldw	r2,0(r2)
   15bd4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   15bd8:	e0fffd17 	ldw	r3,-12(fp)
   15bdc:	00800074 	movhi	r2,1
   15be0:	109f0804 	addi	r2,r2,31776
   15be4:	18bfcb1e 	bne	r3,r2,15b14 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   15be8:	0005883a 	mov	r2,zero
}
   15bec:	e037883a 	mov	sp,fp
   15bf0:	dfc00117 	ldw	ra,4(sp)
   15bf4:	df000017 	ldw	fp,0(sp)
   15bf8:	dec00204 	addi	sp,sp,8
   15bfc:	f800283a 	ret

00015c00 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   15c00:	defffa04 	addi	sp,sp,-24
   15c04:	dfc00515 	stw	ra,20(sp)
   15c08:	df000415 	stw	fp,16(sp)
   15c0c:	dc000315 	stw	r16,12(sp)
   15c10:	df000304 	addi	fp,sp,12
   15c14:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   15c18:	00bffa04 	movi	r2,-24
   15c1c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   15c20:	e03ffd15 	stw	zero,-12(fp)
   15c24:	00002106 	br	15cac <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   15c28:	04000074 	movhi	r16,1
   15c2c:	841a8c04 	addi	r16,r16,27184
   15c30:	e0bffd17 	ldw	r2,-12(fp)
   15c34:	1009883a 	mov	r4,r2
   15c38:	01400304 	movi	r5,12
   15c3c:	00108a40 	call	108a4 <__mulsi3>
   15c40:	8085883a 	add	r2,r16,r2
   15c44:	10800017 	ldw	r2,0(r2)
   15c48:	1000151e 	bne	r2,zero,15ca0 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   15c4c:	04000074 	movhi	r16,1
   15c50:	841a8c04 	addi	r16,r16,27184
   15c54:	e0bffd17 	ldw	r2,-12(fp)
   15c58:	1009883a 	mov	r4,r2
   15c5c:	01400304 	movi	r5,12
   15c60:	00108a40 	call	108a4 <__mulsi3>
   15c64:	8085883a 	add	r2,r16,r2
   15c68:	e0ffff17 	ldw	r3,-4(fp)
   15c6c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   15c70:	00800074 	movhi	r2,1
   15c74:	109f0c04 	addi	r2,r2,31792
   15c78:	10c00017 	ldw	r3,0(r2)
   15c7c:	e0bffd17 	ldw	r2,-12(fp)
   15c80:	1880040e 	bge	r3,r2,15c94 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   15c84:	00800074 	movhi	r2,1
   15c88:	109f0c04 	addi	r2,r2,31792
   15c8c:	e0fffd17 	ldw	r3,-12(fp)
   15c90:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   15c94:	e0bffd17 	ldw	r2,-12(fp)
   15c98:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   15c9c:	00000606 	br	15cb8 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   15ca0:	e0bffd17 	ldw	r2,-12(fp)
   15ca4:	10800044 	addi	r2,r2,1
   15ca8:	e0bffd15 	stw	r2,-12(fp)
   15cac:	e0bffd17 	ldw	r2,-12(fp)
   15cb0:	10800810 	cmplti	r2,r2,32
   15cb4:	103fdc1e 	bne	r2,zero,15c28 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   15cb8:	e0bffe17 	ldw	r2,-8(fp)
}
   15cbc:	e037883a 	mov	sp,fp
   15cc0:	dfc00217 	ldw	ra,8(sp)
   15cc4:	df000117 	ldw	fp,4(sp)
   15cc8:	dc000017 	ldw	r16,0(sp)
   15ccc:	dec00304 	addi	sp,sp,12
   15cd0:	f800283a 	ret

00015cd4 <atexit>:
   15cd4:	200b883a 	mov	r5,r4
   15cd8:	000d883a 	mov	r6,zero
   15cdc:	0009883a 	mov	r4,zero
   15ce0:	000f883a 	mov	r7,zero
   15ce4:	0015d9c1 	jmpi	15d9c <__register_exitproc>

00015ce8 <exit>:
   15ce8:	defffe04 	addi	sp,sp,-8
   15cec:	000b883a 	mov	r5,zero
   15cf0:	dc000015 	stw	r16,0(sp)
   15cf4:	dfc00115 	stw	ra,4(sp)
   15cf8:	2021883a 	mov	r16,r4
   15cfc:	0015ecc0 	call	15ecc <__call_exitprocs>
   15d00:	00800074 	movhi	r2,1
   15d04:	109f0404 	addi	r2,r2,31760
   15d08:	11000017 	ldw	r4,0(r2)
   15d0c:	20800f17 	ldw	r2,60(r4)
   15d10:	10000126 	beq	r2,zero,15d18 <exit+0x30>
   15d14:	103ee83a 	callr	r2
   15d18:	8009883a 	mov	r4,r16
   15d1c:	001606c0 	call	1606c <_exit>

00015d20 <memcmp>:
   15d20:	01c000c4 	movi	r7,3
   15d24:	3980192e 	bgeu	r7,r6,15d8c <memcmp+0x6c>
   15d28:	2904b03a 	or	r2,r5,r4
   15d2c:	11c4703a 	and	r2,r2,r7
   15d30:	10000f26 	beq	r2,zero,15d70 <memcmp+0x50>
   15d34:	20c00003 	ldbu	r3,0(r4)
   15d38:	28800003 	ldbu	r2,0(r5)
   15d3c:	1880151e 	bne	r3,r2,15d94 <memcmp+0x74>
   15d40:	31bfff84 	addi	r6,r6,-2
   15d44:	01ffffc4 	movi	r7,-1
   15d48:	00000406 	br	15d5c <memcmp+0x3c>
   15d4c:	20c00003 	ldbu	r3,0(r4)
   15d50:	28800003 	ldbu	r2,0(r5)
   15d54:	31bfffc4 	addi	r6,r6,-1
   15d58:	18800e1e 	bne	r3,r2,15d94 <memcmp+0x74>
   15d5c:	21000044 	addi	r4,r4,1
   15d60:	29400044 	addi	r5,r5,1
   15d64:	31fff91e 	bne	r6,r7,15d4c <memcmp+0x2c>
   15d68:	0005883a 	mov	r2,zero
   15d6c:	f800283a 	ret
   15d70:	20c00017 	ldw	r3,0(r4)
   15d74:	28800017 	ldw	r2,0(r5)
   15d78:	1880041e 	bne	r3,r2,15d8c <memcmp+0x6c>
   15d7c:	31bfff04 	addi	r6,r6,-4
   15d80:	21000104 	addi	r4,r4,4
   15d84:	29400104 	addi	r5,r5,4
   15d88:	39bff936 	bltu	r7,r6,15d70 <memcmp+0x50>
   15d8c:	303fe91e 	bne	r6,zero,15d34 <memcmp+0x14>
   15d90:	003ff506 	br	15d68 <memcmp+0x48>
   15d94:	1885c83a 	sub	r2,r3,r2
   15d98:	f800283a 	ret

00015d9c <__register_exitproc>:
   15d9c:	defffa04 	addi	sp,sp,-24
   15da0:	00800074 	movhi	r2,1
   15da4:	109f0404 	addi	r2,r2,31760
   15da8:	dc000315 	stw	r16,12(sp)
   15dac:	14000017 	ldw	r16,0(r2)
   15db0:	dc400415 	stw	r17,16(sp)
   15db4:	dfc00515 	stw	ra,20(sp)
   15db8:	80805217 	ldw	r2,328(r16)
   15dbc:	2023883a 	mov	r17,r4
   15dc0:	10003e26 	beq	r2,zero,15ebc <__register_exitproc+0x120>
   15dc4:	10c00117 	ldw	r3,4(r2)
   15dc8:	020007c4 	movi	r8,31
   15dcc:	40c0180e 	bge	r8,r3,15e30 <__register_exitproc+0x94>
   15dd0:	00800034 	movhi	r2,0
   15dd4:	10800004 	addi	r2,r2,0
   15dd8:	1000061e 	bne	r2,zero,15df4 <__register_exitproc+0x58>
   15ddc:	00bfffc4 	movi	r2,-1
   15de0:	dfc00517 	ldw	ra,20(sp)
   15de4:	dc400417 	ldw	r17,16(sp)
   15de8:	dc000317 	ldw	r16,12(sp)
   15dec:	dec00604 	addi	sp,sp,24
   15df0:	f800283a 	ret
   15df4:	01006404 	movi	r4,400
   15df8:	d9400015 	stw	r5,0(sp)
   15dfc:	d9800115 	stw	r6,4(sp)
   15e00:	d9c00215 	stw	r7,8(sp)
   15e04:	00000000 	call	0 <__reset-0x10000>
   15e08:	d9400017 	ldw	r5,0(sp)
   15e0c:	d9800117 	ldw	r6,4(sp)
   15e10:	d9c00217 	ldw	r7,8(sp)
   15e14:	103ff126 	beq	r2,zero,15ddc <__register_exitproc+0x40>
   15e18:	80c05217 	ldw	r3,328(r16)
   15e1c:	10000115 	stw	zero,4(r2)
   15e20:	10c00015 	stw	r3,0(r2)
   15e24:	80805215 	stw	r2,328(r16)
   15e28:	10006215 	stw	zero,392(r2)
   15e2c:	10006315 	stw	zero,396(r2)
   15e30:	10c00117 	ldw	r3,4(r2)
   15e34:	88000d1e 	bne	r17,zero,15e6c <__register_exitproc+0xd0>
   15e38:	19000084 	addi	r4,r3,2
   15e3c:	2109883a 	add	r4,r4,r4
   15e40:	18c00044 	addi	r3,r3,1
   15e44:	2109883a 	add	r4,r4,r4
   15e48:	1109883a 	add	r4,r2,r4
   15e4c:	10c00115 	stw	r3,4(r2)
   15e50:	0005883a 	mov	r2,zero
   15e54:	21400015 	stw	r5,0(r4)
   15e58:	dfc00517 	ldw	ra,20(sp)
   15e5c:	dc400417 	ldw	r17,16(sp)
   15e60:	dc000317 	ldw	r16,12(sp)
   15e64:	dec00604 	addi	sp,sp,24
   15e68:	f800283a 	ret
   15e6c:	02400044 	movi	r9,1
   15e70:	12806217 	ldw	r10,392(r2)
   15e74:	48d2983a 	sll	r9,r9,r3
   15e78:	19000804 	addi	r4,r3,32
   15e7c:	18d1883a 	add	r8,r3,r3
   15e80:	2109883a 	add	r4,r4,r4
   15e84:	4211883a 	add	r8,r8,r8
   15e88:	2109883a 	add	r4,r4,r4
   15e8c:	1109883a 	add	r4,r2,r4
   15e90:	1211883a 	add	r8,r2,r8
   15e94:	5254b03a 	or	r10,r10,r9
   15e98:	21c02215 	stw	r7,136(r4)
   15e9c:	41802215 	stw	r6,136(r8)
   15ea0:	12806215 	stw	r10,392(r2)
   15ea4:	01000084 	movi	r4,2
   15ea8:	893fe31e 	bne	r17,r4,15e38 <__register_exitproc+0x9c>
   15eac:	11006317 	ldw	r4,396(r2)
   15eb0:	2252b03a 	or	r9,r4,r9
   15eb4:	12406315 	stw	r9,396(r2)
   15eb8:	003fdf06 	br	15e38 <__register_exitproc+0x9c>
   15ebc:	008000b4 	movhi	r2,2
   15ec0:	10a68804 	addi	r2,r2,-26080
   15ec4:	80805215 	stw	r2,328(r16)
   15ec8:	003fbe06 	br	15dc4 <__register_exitproc+0x28>

00015ecc <__call_exitprocs>:
   15ecc:	00800074 	movhi	r2,1
   15ed0:	109f0404 	addi	r2,r2,31760
   15ed4:	10800017 	ldw	r2,0(r2)
   15ed8:	defff304 	addi	sp,sp,-52
   15edc:	df000b15 	stw	fp,44(sp)
   15ee0:	d8800015 	stw	r2,0(sp)
   15ee4:	10805204 	addi	r2,r2,328
   15ee8:	dd400815 	stw	r21,32(sp)
   15eec:	dfc00c15 	stw	ra,48(sp)
   15ef0:	ddc00a15 	stw	r23,40(sp)
   15ef4:	dd800915 	stw	r22,36(sp)
   15ef8:	dd000715 	stw	r20,28(sp)
   15efc:	dcc00615 	stw	r19,24(sp)
   15f00:	dc800515 	stw	r18,20(sp)
   15f04:	dc400415 	stw	r17,16(sp)
   15f08:	dc000315 	stw	r16,12(sp)
   15f0c:	d9000115 	stw	r4,4(sp)
   15f10:	2839883a 	mov	fp,r5
   15f14:	d8800215 	stw	r2,8(sp)
   15f18:	057fffc4 	movi	r21,-1
   15f1c:	d8800017 	ldw	r2,0(sp)
   15f20:	ddc00217 	ldw	r23,8(sp)
   15f24:	14805217 	ldw	r18,328(r2)
   15f28:	90001726 	beq	r18,zero,15f88 <__call_exitprocs+0xbc>
   15f2c:	94400117 	ldw	r17,4(r18)
   15f30:	8c3fffc4 	addi	r16,r17,-1
   15f34:	80001116 	blt	r16,zero,15f7c <__call_exitprocs+0xb0>
   15f38:	8c400044 	addi	r17,r17,1
   15f3c:	8427883a 	add	r19,r16,r16
   15f40:	8c63883a 	add	r17,r17,r17
   15f44:	95802204 	addi	r22,r18,136
   15f48:	9ce7883a 	add	r19,r19,r19
   15f4c:	8c63883a 	add	r17,r17,r17
   15f50:	b4e7883a 	add	r19,r22,r19
   15f54:	9463883a 	add	r17,r18,r17
   15f58:	e0001726 	beq	fp,zero,15fb8 <__call_exitprocs+0xec>
   15f5c:	8c87c83a 	sub	r3,r17,r18
   15f60:	b0c7883a 	add	r3,r22,r3
   15f64:	18c01e17 	ldw	r3,120(r3)
   15f68:	1f001326 	beq	r3,fp,15fb8 <__call_exitprocs+0xec>
   15f6c:	843fffc4 	addi	r16,r16,-1
   15f70:	9cffff04 	addi	r19,r19,-4
   15f74:	8c7fff04 	addi	r17,r17,-4
   15f78:	857ff71e 	bne	r16,r21,15f58 <__call_exitprocs+0x8c>
   15f7c:	00800034 	movhi	r2,0
   15f80:	10800004 	addi	r2,r2,0
   15f84:	10002a1e 	bne	r2,zero,16030 <__call_exitprocs+0x164>
   15f88:	dfc00c17 	ldw	ra,48(sp)
   15f8c:	df000b17 	ldw	fp,44(sp)
   15f90:	ddc00a17 	ldw	r23,40(sp)
   15f94:	dd800917 	ldw	r22,36(sp)
   15f98:	dd400817 	ldw	r21,32(sp)
   15f9c:	dd000717 	ldw	r20,28(sp)
   15fa0:	dcc00617 	ldw	r19,24(sp)
   15fa4:	dc800517 	ldw	r18,20(sp)
   15fa8:	dc400417 	ldw	r17,16(sp)
   15fac:	dc000317 	ldw	r16,12(sp)
   15fb0:	dec00d04 	addi	sp,sp,52
   15fb4:	f800283a 	ret
   15fb8:	91000117 	ldw	r4,4(r18)
   15fbc:	88c00017 	ldw	r3,0(r17)
   15fc0:	213fffc4 	addi	r4,r4,-1
   15fc4:	24001526 	beq	r4,r16,1601c <__call_exitprocs+0x150>
   15fc8:	88000015 	stw	zero,0(r17)
   15fcc:	183fe726 	beq	r3,zero,15f6c <__call_exitprocs+0xa0>
   15fd0:	00800044 	movi	r2,1
   15fd4:	1408983a 	sll	r4,r2,r16
   15fd8:	91406217 	ldw	r5,392(r18)
   15fdc:	95000117 	ldw	r20,4(r18)
   15fe0:	214a703a 	and	r5,r4,r5
   15fe4:	28000b26 	beq	r5,zero,16014 <__call_exitprocs+0x148>
   15fe8:	91406317 	ldw	r5,396(r18)
   15fec:	2148703a 	and	r4,r4,r5
   15ff0:	20000c1e 	bne	r4,zero,16024 <__call_exitprocs+0x158>
   15ff4:	99400017 	ldw	r5,0(r19)
   15ff8:	d9000117 	ldw	r4,4(sp)
   15ffc:	183ee83a 	callr	r3
   16000:	90c00117 	ldw	r3,4(r18)
   16004:	1d3fc51e 	bne	r3,r20,15f1c <__call_exitprocs+0x50>
   16008:	b8c00017 	ldw	r3,0(r23)
   1600c:	1cbfd726 	beq	r3,r18,15f6c <__call_exitprocs+0xa0>
   16010:	003fc206 	br	15f1c <__call_exitprocs+0x50>
   16014:	183ee83a 	callr	r3
   16018:	003ff906 	br	16000 <__call_exitprocs+0x134>
   1601c:	94000115 	stw	r16,4(r18)
   16020:	003fea06 	br	15fcc <__call_exitprocs+0x100>
   16024:	99000017 	ldw	r4,0(r19)
   16028:	183ee83a 	callr	r3
   1602c:	003ff406 	br	16000 <__call_exitprocs+0x134>
   16030:	90c00117 	ldw	r3,4(r18)
   16034:	1800071e 	bne	r3,zero,16054 <__call_exitprocs+0x188>
   16038:	90c00017 	ldw	r3,0(r18)
   1603c:	18000926 	beq	r3,zero,16064 <__call_exitprocs+0x198>
   16040:	9009883a 	mov	r4,r18
   16044:	b8c00015 	stw	r3,0(r23)
   16048:	00000000 	call	0 <__reset-0x10000>
   1604c:	bc800017 	ldw	r18,0(r23)
   16050:	003fb506 	br	15f28 <__call_exitprocs+0x5c>
   16054:	90c00017 	ldw	r3,0(r18)
   16058:	902f883a 	mov	r23,r18
   1605c:	1825883a 	mov	r18,r3
   16060:	003fb106 	br	15f28 <__call_exitprocs+0x5c>
   16064:	0007883a 	mov	r3,zero
   16068:	003ffb06 	br	16058 <__call_exitprocs+0x18c>

0001606c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1606c:	defffc04 	addi	sp,sp,-16
   16070:	df000315 	stw	fp,12(sp)
   16074:	df000304 	addi	fp,sp,12
   16078:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   1607c:	0001883a 	nop
   16080:	e0bfff17 	ldw	r2,-4(fp)
   16084:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
   16088:	e0bffd17 	ldw	r2,-12(fp)
   1608c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   16090:	e0bffe17 	ldw	r2,-8(fp)
   16094:	10000226 	beq	r2,zero,160a0 <_exit+0x34>
    ALT_SIM_FAIL();
   16098:	002af070 	cmpltui	zero,zero,43969
   1609c:	00000106 	br	160a4 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   160a0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   160a4:	003fff06 	br	160a4 <_exit+0x38>

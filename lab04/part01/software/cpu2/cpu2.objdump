
cpu2.elf:     file format elf32-littlenios2
cpu2.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000081b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00002c3c memsz 0x00002c3c flags r-x
    LOAD off    0x00003c5c vaddr 0x0000ac5c paddr 0x0000c290 align 2**12
         filesz 0x00001634 memsz 0x00001634 flags rw-
    LOAD off    0x000058c4 vaddr 0x0000d8c4 paddr 0x0000d8c4 align 2**12
         filesz 0x00000000 memsz 0x000002ac flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002a74  000081b8  000081b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000030  0000ac2c  0000ac2c  00003c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001634  0000ac5c  0000c290  00003c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ac  0000d8c4  0000d8c4  000058c4  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00005290  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000005f0  00000000  00000000  000052b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000082a1  00000000  00000000  000058a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002a39  00000000  00000000  0000db49  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00002cc3  00000000  00000000  00010582  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000af4  00000000  00000000  00013248  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000197e  00000000  00000000  00013d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000146b  00000000  00000000  000156ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  00016b28  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000118  00000000  00000000  00016b38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00018a3f  2**0
                  CONTENTS, READONLY
 17 .cpu          00000004  00000000  00000000  00018a42  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00018a46  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00018a47  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   0000000a  00000000  00000000  00018a48  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    0000000a  00000000  00000000  00018a52  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   0000000a  00000000  00000000  00018a5c  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 00000004  00000000  00000000  00018a66  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 00000052  00000000  00000000  00018a6a  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     001798fe  00000000  00000000  00018abc  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
000081b8 l    d  .text	00000000 .text
0000ac2c l    d  .rodata	00000000 .rodata
0000ac5c l    d  .rwdata	00000000 .rwdata
0000d8c4 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../cpu2_bsp//obj/HAL/src/crt0.o
000081f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00008094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 FIFO.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 alt_load.c
00008404 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00008568 l     F .text	00000038 alt_dev_reg
0000ac5c l     O .rwdata	00001060 jtag_uart2
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00008d54 l     F .text	00000204 altera_avalon_jtag_uart_irq
00008f58 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00009594 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
000097d0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00009908 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00009934 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00009dc0 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00009f18 l     F .text	00000050 alt_get_errno
00009f68 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
0000be64 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
000084f0 g     F .text	00000078 alt_main
0000d8e0 g     O .bss	00000100 alt_irq
000088c0 g     F .text	00000058 altera_avalon_fifo_write_almostfull
0000c290 g       *ABS*	00000000 __flash_rwdata_start
00008640 g     F .text	00000098 altera_avalon_fifo_init
00008970 g     F .text	00000058 altera_avalon_fifo_write_fifo
00000000  w      *UND*	00000000 __errno
00008000 g     F .entry	0000000c __reset
00008b08 g     F .text	00000028 altera_avalon_fifo_read_backpressure
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000d8dc g     O .bss	00000004 errno
00008000 g       *ABS*	00000000 __alt_mem_mem2
0000d8c8 g     O .bss	00000004 alt_argv
00014264 g       *ABS*	00000000 _gp
0000880c g     F .text	0000005c altera_avalon_fifo_clear_event
0000bce4 g     O .rwdata	00000180 alt_fd_list
0000a3ec g     F .text	00000090 alt_find_dev
0000a72c g     F .text	00000140 memcpy
00009ea0 g     F .text	00000078 alt_io_redirect
0000ac2c g       *ABS*	00000000 __DTOR_END__
00009158 g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
0000c274 g     O .rwdata	00000004 alt_max_fd
0000c288 g     O .rwdata	00000004 _global_impure_ptr
0000db70 g       *ABS*	00000000 __bss_end
00009cd0 g     F .text	000000f0 alt_iic_isr_register
0000a2c8 g     F .text	00000104 alt_tick
00009c84 g     F .text	0000004c alt_ic_irq_enabled
000082b8 g     F .text	00000040 FIFO_INIT
0000a230 g     F .text	00000098 alt_alarm_stop
0000d8d0 g     O .bss	00000004 alt_irq_active
000080ec g     F .exceptions	000000cc alt_irq_handler
0000bcbc g     O .rwdata	00000028 alt_dev_null
000098ec g     F .text	0000001c alt_dcache_flush_all
00008868 g     F .text	00000058 altera_avalon_fifo_write_ienable
0000c290 g       *ABS*	00000000 __ram_rwdata_end
0000877c g     F .text	0000002c altera_avalon_fifo_read_almostempty
0000c26c g     O .rwdata	00000008 alt_dev_list
0000ac5c g       *ABS*	00000000 __ram_rodata_end
0000db70 g       *ABS*	00000000 end
00008c94 g     F .text	000000c0 altera_avalon_jtag_uart_init
000087a8 g     F .text	0000003c altera_avalon_fifo_read_event
0000ac2c g       *ABS*	00000000 __CTOR_LIST__
00010000 g       *ABS*	00000000 __alt_stack_pointer
00009608 g     F .text	00000088 alt_avalon_timer_sc_init
00009370 g     F .text	00000224 altera_avalon_jtag_uart_write
00008a34 g     F .text	0000004c altera_avalon_fifo_read_fifo
0000aa28 g     F .text	000001a0 __call_exitprocs
000081b8 g     F .text	0000003c _start
0000d8d4 g     O .bss	00000004 _alt_tick_rate
0000d8d8 g     O .bss	00000004 _alt_nticks
000085d4 g     F .text	0000006c alt_sys_init
0000a8f8 g     F .text	00000130 __register_exitproc
00008ffc g     F .text	00000068 altera_avalon_jtag_uart_close
0000abc8 g     F .text	00000028 __mulsi3
0000ac5c g       *ABS*	00000000 __ram_rwdata_start
0000ac2c g       *ABS*	00000000 __ram_rodata_start
00008b30 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000a590 g     F .text	000000d4 alt_get_fd
0000a6b0 g     F .text	0000007c memcmp
00008bf0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0000db70 g       *ABS*	00000000 __alt_stack_base
00008c40 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000086d8 g     F .text	0000003c altera_avalon_fifo_read_status
00008adc g     F .text	0000002c altera_avalon_fifo_read_other_info
0000a47c g     F .text	00000114 alt_find_file
00009984 g     F .text	000000a0 alt_dev_llist_insert
0000d8c4 g       *ABS*	00000000 __bss_start
000083e4 g     F .text	00000020 main
0000d8cc g     O .bss	00000004 alt_envp
00008b90 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000087e4 g     F .text	00000028 altera_avalon_fifo_read_level
000082f8 g     F .text	000000ec levelshift
0000d9e0 g     O .bss	00000190 _atexit0
0000c278 g     O .rwdata	00000004 alt_errno
0000ac2c g       *ABS*	00000000 __CTOR_END__
0000ac2c g       *ABS*	00000000 __flash_rodata_start
0000ac2c g       *ABS*	00000000 __DTOR_LIST__
000085a0 g     F .text	00000034 alt_irq_init
0000a1b0 g     F .text	00000080 alt_release_fd
0000a664 g     F .text	00000014 atexit
0000c28c g     O .rwdata	00000004 _impure_ptr
0000d8c4 g     O .bss	00000004 alt_argc
00009a80 g     F .text	0000005c _do_dtors
00008258 g     F .text	00000060 READ_FIFO
00008020 g       .exceptions	00000000 alt_irq_entry
0000c264 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
00008a80 g     F .text	0000005c altera_avalon_fifo_write_other_info
00009af8 g     F .text	00000050 alt_ic_isr_register
0000c290 g       *ABS*	00000000 _edata
0000db70 g       *ABS*	00000000 _end
000081b8 g       *ABS*	00000000 __ram_exceptions_end
00009064 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00009be4 g     F .text	000000a0 alt_ic_irq_disable
0000a3cc g     F .text	00000020 altera_nios2_qsys_irq_init
0000a678 g     F .text	00000038 exit
00008714 g     F .text	0000003c altera_avalon_fifo_read_ienable
00010000 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
0000abf0 g     F .text	0000003c _exit
00009690 g     F .text	00000140 alt_alarm_start
00008750 g     F .text	0000002c altera_avalon_fifo_read_almostfull
0000a86c g     F .text	0000008c strlen
0000a058 g     F .text	00000158 open
000089c8 g     F .text	0000006c altera_avalon_read_fifo
00009adc g     F .text	0000001c alt_icache_flush_all
000081f4 g     F .text	00000064 WRITE_FIFO
0000c27c g     O .rwdata	00000004 alt_priority_mask
00009b48 g     F .text	0000009c alt_ic_irq_enable
00008918 g     F .text	00000058 altera_avalon_fifo_write_almostempty
0000c280 g     O .rwdata	00000008 alt_alarm_list
00009a24 g     F .text	0000005c _do_ctors
00009820 g     F .text	000000cc close
00008470 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08606e14 	ori	at,at,33208
    jmp r1
    8008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00008020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    8044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080ec0 	call	80ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000306 	br	8098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
    808c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)

00008094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
    8094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    8098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    809c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    80c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    80e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    80e8:	ef80083a 	eret

000080ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80ec:	defff904 	addi	sp,sp,-28
    80f0:	dfc00615 	stw	ra,24(sp)
    80f4:	df000515 	stw	fp,20(sp)
    80f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
    80fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8100:	0005313a 	rdctl	r2,ipending
    8104:	e0bffe15 	stw	r2,-8(fp)

  return active;
    8108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    810c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
    8110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    8114:	00800044 	movi	r2,1
    8118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    811c:	e0fffb17 	ldw	r3,-20(fp)
    8120:	e0bffc17 	ldw	r2,-16(fp)
    8124:	1884703a 	and	r2,r3,r2
    8128:	10001726 	beq	r2,zero,8188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    812c:	00c00074 	movhi	r3,1
    8130:	18f63804 	addi	r3,r3,-10016
    8134:	e0bffd17 	ldw	r2,-12(fp)
    8138:	100490fa 	slli	r2,r2,3
    813c:	1885883a 	add	r2,r3,r2
    8140:	10c00017 	ldw	r3,0(r2)
    8144:	01000074 	movhi	r4,1
    8148:	21363804 	addi	r4,r4,-10016
    814c:	e0bffd17 	ldw	r2,-12(fp)
    8150:	100490fa 	slli	r2,r2,3
    8154:	2085883a 	add	r2,r4,r2
    8158:	10800104 	addi	r2,r2,4
    815c:	10800017 	ldw	r2,0(r2)
    8160:	1009883a 	mov	r4,r2
    8164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
    8168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    816c:	0005313a 	rdctl	r2,ipending
    8170:	e0bfff15 	stw	r2,-4(fp)

  return active;
    8174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
    8178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
    817c:	e0bffb17 	ldw	r2,-20(fp)
    8180:	103fe31e 	bne	r2,zero,8110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
    8184:	00000706 	br	81a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
    8188:	e0bffc17 	ldw	r2,-16(fp)
    818c:	1085883a 	add	r2,r2,r2
    8190:	e0bffc15 	stw	r2,-16(fp)
      i++;
    8194:	e0bffd17 	ldw	r2,-12(fp)
    8198:	10800044 	addi	r2,r2,1
    819c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
    81a0:	003fde06 	br	811c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    81a4:	e037883a 	mov	sp,fp
    81a8:	dfc00117 	ldw	ra,4(sp)
    81ac:	df000017 	ldw	fp,0(sp)
    81b0:	dec00204 	addi	sp,sp,8
    81b4:	f800283a 	ret

Disassembly of section .text:

000081b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    81b8:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    81bc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
    81c0:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    81c4:	d6909914 	ori	gp,gp,16996
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    81c8:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    81cc:	10b63114 	ori	r2,r2,55492

    movhi r3, %hi(__bss_end)
    81d0:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    81d4:	18f6dc14 	ori	r3,r3,56176

    beq r2, r3, 1f
    81d8:	10c00326 	beq	r2,r3,81e8 <_start+0x30>

0:
    stw zero, (r2)
    81dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    81e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    81e4:	10fffd36 	bltu	r2,r3,81dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    81e8:	00084700 	call	8470 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    81ec:	00084f00 	call	84f0 <alt_main>

000081f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    81f0:	003fff06 	br	81f0 <alt_after_alt_main>

000081f4 <WRITE_FIFO>:
 */

#include "FIFO.h"

void WRITE_FIFO(int *buffer, int inBase, int controllBase)
{
    81f4:	defffb04 	addi	sp,sp,-20
    81f8:	dfc00415 	stw	ra,16(sp)
    81fc:	df000315 	stw	fp,12(sp)
    8200:	df000304 	addi	fp,sp,12
    8204:	e13ffd15 	stw	r4,-12(fp)
    8208:	e17ffe15 	stw	r5,-8(fp)
    820c:	e1bfff15 	stw	r6,-4(fp)

	// Check if FIFO is full before writing
	while (altera_avalon_fifo_read_level(controllBase) == ALMOST_FULL)
    8210:	0001883a 	nop
    8214:	e0bfff17 	ldw	r2,-4(fp)
    8218:	1009883a 	mov	r4,r2
    821c:	00087e40 	call	87e4 <altera_avalon_fifo_read_level>
    8220:	10800220 	cmpeqi	r2,r2,8
    8224:	103ffb1e 	bne	r2,zero,8214 <WRITE_FIFO+0x20>
	{
	}

	// Write data to FIFO
	altera_avalon_fifo_write_fifo(inBase, controllBase, *buffer);
    8228:	e13ffe17 	ldw	r4,-8(fp)
    822c:	e0ffff17 	ldw	r3,-4(fp)
    8230:	e0bffd17 	ldw	r2,-12(fp)
    8234:	10800017 	ldw	r2,0(r2)
    8238:	180b883a 	mov	r5,r3
    823c:	100d883a 	mov	r6,r2
    8240:	00089700 	call	8970 <altera_avalon_fifo_write_fifo>
}
    8244:	e037883a 	mov	sp,fp
    8248:	dfc00117 	ldw	ra,4(sp)
    824c:	df000017 	ldw	fp,0(sp)
    8250:	dec00204 	addi	sp,sp,8
    8254:	f800283a 	ret

00008258 <READ_FIFO>:

void READ_FIFO(int *buffer, int outBase, int controllBase)
{
    8258:	defffb04 	addi	sp,sp,-20
    825c:	dfc00415 	stw	ra,16(sp)
    8260:	df000315 	stw	fp,12(sp)
    8264:	df000304 	addi	fp,sp,12
    8268:	e13ffd15 	stw	r4,-12(fp)
    826c:	e17ffe15 	stw	r5,-8(fp)
    8270:	e1bfff15 	stw	r6,-4(fp)
	// Wait if the FIFO is empty
	// while (altera_avalon_fifo_read_status(FIFO_MEM_IN_CSR_BASE, ALTERA_AVALON_FIFO_STATUS_EMPTY))
	// 	;

	while (altera_avalon_fifo_read_level(controllBase) == ALMOST_EMTY)
    8274:	0001883a 	nop
    8278:	e0bfff17 	ldw	r2,-4(fp)
    827c:	1009883a 	mov	r4,r2
    8280:	00087e40 	call	87e4 <altera_avalon_fifo_read_level>
    8284:	103ffc26 	beq	r2,zero,8278 <READ_FIFO+0x20>
	{
	}

	// Read the data
	*buffer = altera_avalon_fifo_read_fifo(outBase, controllBase);
    8288:	e0fffe17 	ldw	r3,-8(fp)
    828c:	e0bfff17 	ldw	r2,-4(fp)
    8290:	1809883a 	mov	r4,r3
    8294:	100b883a 	mov	r5,r2
    8298:	0008a340 	call	8a34 <altera_avalon_fifo_read_fifo>
    829c:	e0fffd17 	ldw	r3,-12(fp)
    82a0:	18800015 	stw	r2,0(r3)
}
    82a4:	e037883a 	mov	sp,fp
    82a8:	dfc00117 	ldw	ra,4(sp)
    82ac:	df000017 	ldw	fp,0(sp)
    82b0:	dec00204 	addi	sp,sp,8
    82b4:	f800283a 	ret

000082b8 <FIFO_INIT>:

// Initialization
void FIFO_INIT(int controllBase)
{
    82b8:	defffd04 	addi	sp,sp,-12
    82bc:	dfc00215 	stw	ra,8(sp)
    82c0:	df000115 	stw	fp,4(sp)
    82c4:	df000104 	addi	fp,sp,4
    82c8:	e13fff15 	stw	r4,-4(fp)
	altera_avalon_fifo_init(controllBase,
    82cc:	e0bfff17 	ldw	r2,-4(fp)
    82d0:	1009883a 	mov	r4,r2
    82d4:	000b883a 	mov	r5,zero
    82d8:	000d883a 	mov	r6,zero
    82dc:	01c00204 	movi	r7,8
    82e0:	00086400 	call	8640 <altera_avalon_fifo_init>
							0,
							ALMOST_EMTY,  // Almost empty threshold
							ALMOST_FULL); // Almost full threshold
    82e4:	e037883a 	mov	sp,fp
    82e8:	dfc00117 	ldw	ra,4(sp)
    82ec:	df000017 	ldw	fp,0(sp)
    82f0:	dec00204 	addi	sp,sp,8
    82f4:	f800283a 	ret

000082f8 <levelshift>:
#include "datatype.h"
#include "FIFO.h"

/* Level shifting to get 8 bit SIGNED values for the data  */
void levelshift(void)
{
    82f8:	defffc04 	addi	sp,sp,-16
    82fc:	dfc00315 	stw	ra,12(sp)
    8300:	df000215 	stw	fp,8(sp)
    8304:	df000204 	addi	fp,sp,8
	int i, j;
	// asm("dummy");
	while (1)
	{
		for (j = 0; j < 64; j++)
    8308:	e03ffe15 	stw	zero,-8(fp)
    830c:	00000d06 	br	8344 <levelshift+0x4c>
		{
			// xt_iss_profile_disable();
			// i = (INT16)RECV1();
			READ_FIFO(&i, OUT_BASE_1to2A, CONTROL_BASE_1to2A);
    8310:	e0bfff04 	addi	r2,fp,-4
    8314:	1009883a 	mov	r4,r2
    8318:	01400074 	movhi	r5,1
    831c:	294415c4 	addi	r5,r5,4183
    8320:	01800134 	movhi	r6,4
    8324:	31806804 	addi	r6,r6,416
    8328:	00082580 	call	8258 <READ_FIFO>

			// xt_iss_profile_enable();
			// printf(stderr,"Received from FIFO1 %d\n",j);
			i -= 128;
    832c:	e0bfff17 	ldw	r2,-4(fp)
    8330:	10bfe004 	addi	r2,r2,-128
    8334:	e0bfff15 	stw	r2,-4(fp)
{
	int i, j;
	// asm("dummy");
	while (1)
	{
		for (j = 0; j < 64; j++)
    8338:	e0bffe17 	ldw	r2,-8(fp)
    833c:	10800044 	addi	r2,r2,1
    8340:	e0bffe15 	stw	r2,-8(fp)
    8344:	e0bffe17 	ldw	r2,-8(fp)
    8348:	10801010 	cmplti	r2,r2,64
    834c:	103ff01e 	bne	r2,zero,8310 <levelshift+0x18>
			// printf(stderr,"Received from FIFO1 %d\n",j);
			i -= 128;
			// SEND(i);
		}

		for (j = 0; j < 64; j++)
    8350:	e03ffe15 	stw	zero,-8(fp)
    8354:	00000d06 	br	838c <levelshift+0x94>
		{
			// xt_iss_profile_disable();
			// i = (INT16)RECV2();
			READ_FIFO(&i, OUT_BASE_1to2B, CONTROL_BASE_1to2B);
    8358:	e0bfff04 	addi	r2,fp,-4
    835c:	1009883a 	mov	r4,r2
    8360:	01400074 	movhi	r5,1
    8364:	29441404 	addi	r5,r5,4176
    8368:	01800134 	movhi	r6,4
    836c:	31842004 	addi	r6,r6,4224
    8370:	00082580 	call	8258 <READ_FIFO>

			// xt_iss_profile_enable();
			// fprintf(stderr,"Received from FIFO2 %d\n",j);
			i -= 128;
    8374:	e0bfff17 	ldw	r2,-4(fp)
    8378:	10bfe004 	addi	r2,r2,-128
    837c:	e0bfff15 	stw	r2,-4(fp)
			// printf(stderr,"Received from FIFO1 %d\n",j);
			i -= 128;
			// SEND(i);
		}

		for (j = 0; j < 64; j++)
    8380:	e0bffe17 	ldw	r2,-8(fp)
    8384:	10800044 	addi	r2,r2,1
    8388:	e0bffe15 	stw	r2,-8(fp)
    838c:	e0bffe17 	ldw	r2,-8(fp)
    8390:	10801010 	cmplti	r2,r2,64
    8394:	103ff01e 	bne	r2,zero,8358 <levelshift+0x60>
			// fprintf(stderr,"Received from FIFO2 %d\n",j);
			i -= 128;
			// SEND(i);
		}

		for (j = 0; j < 64; j++)
    8398:	e03ffe15 	stw	zero,-8(fp)
    839c:	00000d06 	br	83d4 <levelshift+0xdc>
		{
			// xt_iss_profile_disable();
			// i = (INT16)RECV3();
			READ_FIFO(&i, OUT_BASE_1to2C, CONTROL_BASE_1to2C);
    83a0:	e0bfff04 	addi	r2,fp,-4
    83a4:	1009883a 	mov	r4,r2
    83a8:	01400074 	movhi	r5,1
    83ac:	29441304 	addi	r5,r5,4172
    83b0:	01800134 	movhi	r6,4
    83b4:	31841804 	addi	r6,r6,4192
    83b8:	00082580 	call	8258 <READ_FIFO>

			// xt_iss_profile_enable();
			// fprintf(stderr,"Received from FIFO3 %d\n",j);
			i -= 128;
    83bc:	e0bfff17 	ldw	r2,-4(fp)
    83c0:	10bfe004 	addi	r2,r2,-128
    83c4:	e0bfff15 	stw	r2,-4(fp)
			// fprintf(stderr,"Received from FIFO2 %d\n",j);
			i -= 128;
			// SEND(i);
		}

		for (j = 0; j < 64; j++)
    83c8:	e0bffe17 	ldw	r2,-8(fp)
    83cc:	10800044 	addi	r2,r2,1
    83d0:	e0bffe15 	stw	r2,-8(fp)
    83d4:	e0bffe17 	ldw	r2,-8(fp)
    83d8:	10801010 	cmplti	r2,r2,64
    83dc:	103ff01e 	bne	r2,zero,83a0 <levelshift+0xa8>

		// #pragma flush // changed by haris - moved it up the dummy instruction
		// 			  // resulted in correct number of iterations for this pipeline stage
		// 		asm("dummy");
		// break;
	}
    83e0:	003fc906 	br	8308 <levelshift+0x10>

000083e4 <main>:
}

int main(void)
{
    83e4:	deffff04 	addi	sp,sp,-4
    83e8:	df000015 	stw	fp,0(sp)
    83ec:	d839883a 	mov	fp,sp
	// levelshift();

	// printf("Hello from cpu2\n");

	return 0;
    83f0:	0005883a 	mov	r2,zero
}
    83f4:	e037883a 	mov	sp,fp
    83f8:	df000017 	ldw	fp,0(sp)
    83fc:	dec00104 	addi	sp,sp,4
    8400:	f800283a 	ret

00008404 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    8404:	defffc04 	addi	sp,sp,-16
    8408:	df000315 	stw	fp,12(sp)
    840c:	df000304 	addi	fp,sp,12
    8410:	e13ffd15 	stw	r4,-12(fp)
    8414:	e17ffe15 	stw	r5,-8(fp)
    8418:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    841c:	e0fffe17 	ldw	r3,-8(fp)
    8420:	e0bffd17 	ldw	r2,-12(fp)
    8424:	18800e26 	beq	r3,r2,8460 <alt_load_section+0x5c>
  {
    while( to != end )
    8428:	00000a06 	br	8454 <alt_load_section+0x50>
    {
      *to++ = *from++;
    842c:	e0bffd17 	ldw	r2,-12(fp)
    8430:	10c00017 	ldw	r3,0(r2)
    8434:	e0bffe17 	ldw	r2,-8(fp)
    8438:	10c00015 	stw	r3,0(r2)
    843c:	e0bffe17 	ldw	r2,-8(fp)
    8440:	10800104 	addi	r2,r2,4
    8444:	e0bffe15 	stw	r2,-8(fp)
    8448:	e0bffd17 	ldw	r2,-12(fp)
    844c:	10800104 	addi	r2,r2,4
    8450:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    8454:	e0fffe17 	ldw	r3,-8(fp)
    8458:	e0bfff17 	ldw	r2,-4(fp)
    845c:	18bff31e 	bne	r3,r2,842c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    8460:	e037883a 	mov	sp,fp
    8464:	df000017 	ldw	fp,0(sp)
    8468:	dec00104 	addi	sp,sp,4
    846c:	f800283a 	ret

00008470 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8470:	defffe04 	addi	sp,sp,-8
    8474:	dfc00115 	stw	ra,4(sp)
    8478:	df000015 	stw	fp,0(sp)
    847c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    8480:	01000074 	movhi	r4,1
    8484:	2130a404 	addi	r4,r4,-15728
    8488:	01400074 	movhi	r5,1
    848c:	296b1704 	addi	r5,r5,-21412
    8490:	01800074 	movhi	r6,1
    8494:	31b0a404 	addi	r6,r6,-15728
    8498:	00084040 	call	8404 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    849c:	01000074 	movhi	r4,1
    84a0:	21200804 	addi	r4,r4,-32736
    84a4:	01400074 	movhi	r5,1
    84a8:	29600804 	addi	r5,r5,-32736
    84ac:	01800074 	movhi	r6,1
    84b0:	31a06e04 	addi	r6,r6,-32328
    84b4:	00084040 	call	8404 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    84b8:	01000074 	movhi	r4,1
    84bc:	212b0b04 	addi	r4,r4,-21460
    84c0:	01400074 	movhi	r5,1
    84c4:	296b0b04 	addi	r5,r5,-21460
    84c8:	01800074 	movhi	r6,1
    84cc:	31ab1704 	addi	r6,r6,-21412
    84d0:	00084040 	call	8404 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    84d4:	00098ec0 	call	98ec <alt_dcache_flush_all>
  alt_icache_flush_all();
    84d8:	0009adc0 	call	9adc <alt_icache_flush_all>
}
    84dc:	e037883a 	mov	sp,fp
    84e0:	dfc00117 	ldw	ra,4(sp)
    84e4:	df000017 	ldw	fp,0(sp)
    84e8:	dec00204 	addi	sp,sp,8
    84ec:	f800283a 	ret

000084f0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    84f0:	defffd04 	addi	sp,sp,-12
    84f4:	dfc00215 	stw	ra,8(sp)
    84f8:	df000115 	stw	fp,4(sp)
    84fc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8500:	0009883a 	mov	r4,zero
    8504:	00085a00 	call	85a0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    8508:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    850c:	00085d40 	call	85d4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    8510:	01000074 	movhi	r4,1
    8514:	212b0b04 	addi	r4,r4,-21460
    8518:	01400074 	movhi	r5,1
    851c:	296b0b04 	addi	r5,r5,-21460
    8520:	01800074 	movhi	r6,1
    8524:	31ab0b04 	addi	r6,r6,-21460
    8528:	0009ea00 	call	9ea0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    852c:	0009a240 	call	9a24 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    8530:	01000074 	movhi	r4,1
    8534:	2126a004 	addi	r4,r4,-25984
    8538:	000a6640 	call	a664 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    853c:	d1259817 	ldw	r4,-27040(gp)
    8540:	d0e59917 	ldw	r3,-27036(gp)
    8544:	d0a59a17 	ldw	r2,-27032(gp)
    8548:	180b883a 	mov	r5,r3
    854c:	100d883a 	mov	r6,r2
    8550:	00083e40 	call	83e4 <main>
    8554:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    8558:	01000044 	movi	r4,1
    855c:	00098200 	call	9820 <close>
  exit (result);
    8560:	e13fff17 	ldw	r4,-4(fp)
    8564:	000a6780 	call	a678 <exit>

00008568 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    8568:	defffd04 	addi	sp,sp,-12
    856c:	dfc00215 	stw	ra,8(sp)
    8570:	df000115 	stw	fp,4(sp)
    8574:	df000104 	addi	fp,sp,4
    8578:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    857c:	e13fff17 	ldw	r4,-4(fp)
    8580:	01400074 	movhi	r5,1
    8584:	29709b04 	addi	r5,r5,-15764
    8588:	00099840 	call	9984 <alt_dev_llist_insert>
}
    858c:	e037883a 	mov	sp,fp
    8590:	dfc00117 	ldw	ra,4(sp)
    8594:	df000017 	ldw	fp,0(sp)
    8598:	dec00204 	addi	sp,sp,8
    859c:	f800283a 	ret

000085a0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    85a0:	defffd04 	addi	sp,sp,-12
    85a4:	dfc00215 	stw	ra,8(sp)
    85a8:	df000115 	stw	fp,4(sp)
    85ac:	df000104 	addi	fp,sp,4
    85b0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU2, cpu2);
    85b4:	000a3cc0 	call	a3cc <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    85b8:	00800044 	movi	r2,1
    85bc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    85c0:	e037883a 	mov	sp,fp
    85c4:	dfc00117 	ldw	ra,4(sp)
    85c8:	df000017 	ldw	fp,0(sp)
    85cc:	dec00204 	addi	sp,sp,8
    85d0:	f800283a 	ret

000085d4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    85d4:	defffe04 	addi	sp,sp,-8
    85d8:	dfc00115 	stw	ra,4(sp)
    85dc:	df000015 	stw	fp,0(sp)
    85e0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER2, timer2);
    85e4:	01000074 	movhi	r4,1
    85e8:	21040804 	addi	r4,r4,4128
    85ec:	000b883a 	mov	r5,zero
    85f0:	01800044 	movi	r6,1
    85f4:	01c0fa04 	movi	r7,1000
    85f8:	00096080 	call	9608 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_FIFO_INIT ( FIFO1TO2A, fifo1to2A);
    85fc:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO1TO2B, fifo1to2B);
    8600:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO1TO2C, fifo1to2C);
    8604:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO2TO3, fifo2to3);
    8608:	0001883a 	nop
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART2, jtag_uart2);
    860c:	01000074 	movhi	r4,1
    8610:	212b2104 	addi	r4,r4,-21372
    8614:	000b883a 	mov	r5,zero
    8618:	01800404 	movi	r6,16
    861c:	0008c940 	call	8c94 <altera_avalon_jtag_uart_init>
    8620:	01000074 	movhi	r4,1
    8624:	212b1704 	addi	r4,r4,-21412
    8628:	00085680 	call	8568 <alt_dev_reg>
}
    862c:	e037883a 	mov	sp,fp
    8630:	dfc00117 	ldw	ra,4(sp)
    8634:	df000017 	ldw	fp,0(sp)
    8638:	dec00204 	addi	sp,sp,8
    863c:	f800283a 	ret

00008640 <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
    8640:	defffa04 	addi	sp,sp,-24
    8644:	dfc00515 	stw	ra,20(sp)
    8648:	df000415 	stw	fp,16(sp)
    864c:	df000404 	addi	fp,sp,16
    8650:	e13ffc15 	stw	r4,-16(fp)
    8654:	e17ffd15 	stw	r5,-12(fp)
    8658:	e1bffe15 	stw	r6,-8(fp)
    865c:	e1ffff15 	stw	r7,-4(fp)
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
    8660:	e13ffc17 	ldw	r4,-16(fp)
    8664:	01400fc4 	movi	r5,63
    8668:	000880c0 	call	880c <altera_avalon_fifo_clear_event>
    866c:	10000226 	beq	r2,zero,8678 <altera_avalon_fifo_init+0x38>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
    8670:	00bfffc4 	movi	r2,-1
    8674:	00001306 	br	86c4 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
    8678:	e13ffc17 	ldw	r4,-16(fp)
    867c:	e17ffd17 	ldw	r5,-12(fp)
    8680:	00088680 	call	8868 <altera_avalon_fifo_write_ienable>
    8684:	10000226 	beq	r2,zero,8690 <altera_avalon_fifo_init+0x50>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
    8688:	00bfff84 	movi	r2,-2
    868c:	00000d06 	br	86c4 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
    8690:	e13ffc17 	ldw	r4,-16(fp)
    8694:	e17fff17 	ldw	r5,-4(fp)
    8698:	00088c00 	call	88c0 <altera_avalon_fifo_write_almostfull>
    869c:	10000226 	beq	r2,zero,86a8 <altera_avalon_fifo_init+0x68>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
    86a0:	00bfff44 	movi	r2,-3
    86a4:	00000706 	br	86c4 <altera_avalon_fifo_init+0x84>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
    86a8:	e13ffc17 	ldw	r4,-16(fp)
    86ac:	e17ffe17 	ldw	r5,-8(fp)
    86b0:	00089180 	call	8918 <altera_avalon_fifo_write_almostempty>
    86b4:	10000226 	beq	r2,zero,86c0 <altera_avalon_fifo_init+0x80>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
    86b8:	00bfff44 	movi	r2,-3
    86bc:	00000106 	br	86c4 <altera_avalon_fifo_init+0x84>
    }

    return ALTERA_AVALON_FIFO_OK;
    86c0:	0005883a 	mov	r2,zero
}
    86c4:	e037883a 	mov	sp,fp
    86c8:	dfc00117 	ldw	ra,4(sp)
    86cc:	df000017 	ldw	fp,0(sp)
    86d0:	dec00204 	addi	sp,sp,8
    86d4:	f800283a 	ret

000086d8 <altera_avalon_fifo_read_status>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    86d8:	defffd04 	addi	sp,sp,-12
    86dc:	df000215 	stw	fp,8(sp)
    86e0:	df000204 	addi	fp,sp,8
    86e4:	e13ffe15 	stw	r4,-8(fp)
    86e8:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
    86ec:	e0bffe17 	ldw	r2,-8(fp)
    86f0:	10800104 	addi	r2,r2,4
    86f4:	10800037 	ldwio	r2,0(r2)
    86f8:	1007883a 	mov	r3,r2
    86fc:	e0bfff17 	ldw	r2,-4(fp)
    8700:	1884703a 	and	r2,r3,r2
}
    8704:	e037883a 	mov	sp,fp
    8708:	df000017 	ldw	fp,0(sp)
    870c:	dec00104 	addi	sp,sp,4
    8710:	f800283a 	ret

00008714 <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
    8714:	defffd04 	addi	sp,sp,-12
    8718:	df000215 	stw	fp,8(sp)
    871c:	df000204 	addi	fp,sp,8
    8720:	e13ffe15 	stw	r4,-8(fp)
    8724:	e17fff15 	stw	r5,-4(fp)
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
    8728:	e0bffe17 	ldw	r2,-8(fp)
    872c:	10800304 	addi	r2,r2,12
    8730:	10800037 	ldwio	r2,0(r2)
    8734:	1007883a 	mov	r3,r2
    8738:	e0bfff17 	ldw	r2,-4(fp)
    873c:	1884703a 	and	r2,r3,r2
}
    8740:	e037883a 	mov	sp,fp
    8744:	df000017 	ldw	fp,0(sp)
    8748:	dec00104 	addi	sp,sp,4
    874c:	f800283a 	ret

00008750 <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
    8750:	defffe04 	addi	sp,sp,-8
    8754:	df000115 	stw	fp,4(sp)
    8758:	df000104 	addi	fp,sp,4
    875c:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
    8760:	e0bfff17 	ldw	r2,-4(fp)
    8764:	10800404 	addi	r2,r2,16
    8768:	10800037 	ldwio	r2,0(r2)
}
    876c:	e037883a 	mov	sp,fp
    8770:	df000017 	ldw	fp,0(sp)
    8774:	dec00104 	addi	sp,sp,4
    8778:	f800283a 	ret

0000877c <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
    877c:	defffe04 	addi	sp,sp,-8
    8780:	df000115 	stw	fp,4(sp)
    8784:	df000104 	addi	fp,sp,4
    8788:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
    878c:	e0bfff17 	ldw	r2,-4(fp)
    8790:	10800504 	addi	r2,r2,20
    8794:	10800037 	ldwio	r2,0(r2)
}
    8798:	e037883a 	mov	sp,fp
    879c:	df000017 	ldw	fp,0(sp)
    87a0:	dec00104 	addi	sp,sp,4
    87a4:	f800283a 	ret

000087a8 <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
    87a8:	defffd04 	addi	sp,sp,-12
    87ac:	df000215 	stw	fp,8(sp)
    87b0:	df000204 	addi	fp,sp,8
    87b4:	e13ffe15 	stw	r4,-8(fp)
    87b8:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
    87bc:	e0bffe17 	ldw	r2,-8(fp)
    87c0:	10800204 	addi	r2,r2,8
    87c4:	10800037 	ldwio	r2,0(r2)
    87c8:	1007883a 	mov	r3,r2
    87cc:	e0bfff17 	ldw	r2,-4(fp)
    87d0:	1884703a 	and	r2,r3,r2
}
    87d4:	e037883a 	mov	sp,fp
    87d8:	df000017 	ldw	fp,0(sp)
    87dc:	dec00104 	addi	sp,sp,4
    87e0:	f800283a 	ret

000087e4 <altera_avalon_fifo_read_level>:

int altera_avalon_fifo_read_level(alt_u32 address)
{
    87e4:	defffe04 	addi	sp,sp,-8
    87e8:	df000115 	stw	fp,4(sp)
    87ec:	df000104 	addi	fp,sp,4
    87f0:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
    87f4:	e0bfff17 	ldw	r2,-4(fp)
    87f8:	10800037 	ldwio	r2,0(r2)
}
    87fc:	e037883a 	mov	sp,fp
    8800:	df000017 	ldw	fp,0(sp)
    8804:	dec00104 	addi	sp,sp,4
    8808:	f800283a 	ret

0000880c <altera_avalon_fifo_clear_event>:

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
    880c:	defffd04 	addi	sp,sp,-12
    8810:	df000215 	stw	fp,8(sp)
    8814:	df000204 	addi	fp,sp,8
    8818:	e13ffe15 	stw	r4,-8(fp)
    881c:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
    8820:	e0bffe17 	ldw	r2,-8(fp)
    8824:	10800204 	addi	r2,r2,8
    8828:	e0ffff17 	ldw	r3,-4(fp)
    882c:	10c00035 	stwio	r3,0(r2)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
    8830:	e0bffe17 	ldw	r2,-8(fp)
    8834:	10800204 	addi	r2,r2,8
    8838:	10800037 	ldwio	r2,0(r2)
    883c:	1007883a 	mov	r3,r2
    8840:	e0bfff17 	ldw	r2,-4(fp)
    8844:	1884703a 	and	r2,r3,r2
    8848:	1000021e 	bne	r2,zero,8854 <altera_avalon_fifo_clear_event+0x48>
        return ALTERA_AVALON_FIFO_OK;
    884c:	0005883a 	mov	r2,zero
    8850:	00000106 	br	8858 <altera_avalon_fifo_clear_event+0x4c>
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
    8854:	00bfffc4 	movi	r2,-1
}
    8858:	e037883a 	mov	sp,fp
    885c:	df000017 	ldw	fp,0(sp)
    8860:	dec00104 	addi	sp,sp,4
    8864:	f800283a 	ret

00008868 <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
    8868:	defffd04 	addi	sp,sp,-12
    886c:	df000215 	stw	fp,8(sp)
    8870:	df000204 	addi	fp,sp,8
    8874:	e13ffe15 	stw	r4,-8(fp)
    8878:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
    887c:	e0bffe17 	ldw	r2,-8(fp)
    8880:	10800304 	addi	r2,r2,12
    8884:	e0ffff17 	ldw	r3,-4(fp)
    8888:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
    888c:	e0bffe17 	ldw	r2,-8(fp)
    8890:	10800304 	addi	r2,r2,12
    8894:	10800037 	ldwio	r2,0(r2)
    8898:	1007883a 	mov	r3,r2
    889c:	e0bfff17 	ldw	r2,-4(fp)
    88a0:	1880021e 	bne	r3,r2,88ac <altera_avalon_fifo_write_ienable+0x44>
        return ALTERA_AVALON_FIFO_OK;
    88a4:	0005883a 	mov	r2,zero
    88a8:	00000106 	br	88b0 <altera_avalon_fifo_write_ienable+0x48>
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
    88ac:	00bfff84 	movi	r2,-2
}
    88b0:	e037883a 	mov	sp,fp
    88b4:	df000017 	ldw	fp,0(sp)
    88b8:	dec00104 	addi	sp,sp,4
    88bc:	f800283a 	ret

000088c0 <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
    88c0:	defffd04 	addi	sp,sp,-12
    88c4:	df000215 	stw	fp,8(sp)
    88c8:	df000204 	addi	fp,sp,8
    88cc:	e13ffe15 	stw	r4,-8(fp)
    88d0:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
    88d4:	e0bffe17 	ldw	r2,-8(fp)
    88d8:	10800404 	addi	r2,r2,16
    88dc:	e0ffff17 	ldw	r3,-4(fp)
    88e0:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
    88e4:	e0bffe17 	ldw	r2,-8(fp)
    88e8:	10800404 	addi	r2,r2,16
    88ec:	10800037 	ldwio	r2,0(r2)
    88f0:	1007883a 	mov	r3,r2
    88f4:	e0bfff17 	ldw	r2,-4(fp)
    88f8:	1880021e 	bne	r3,r2,8904 <altera_avalon_fifo_write_almostfull+0x44>
        return ALTERA_AVALON_FIFO_OK;
    88fc:	0005883a 	mov	r2,zero
    8900:	00000106 	br	8908 <altera_avalon_fifo_write_almostfull+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
    8904:	00bfff44 	movi	r2,-3
}
    8908:	e037883a 	mov	sp,fp
    890c:	df000017 	ldw	fp,0(sp)
    8910:	dec00104 	addi	sp,sp,4
    8914:	f800283a 	ret

00008918 <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
    8918:	defffd04 	addi	sp,sp,-12
    891c:	df000215 	stw	fp,8(sp)
    8920:	df000204 	addi	fp,sp,8
    8924:	e13ffe15 	stw	r4,-8(fp)
    8928:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
    892c:	e0bffe17 	ldw	r2,-8(fp)
    8930:	10800504 	addi	r2,r2,20
    8934:	e0ffff17 	ldw	r3,-4(fp)
    8938:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
    893c:	e0bffe17 	ldw	r2,-8(fp)
    8940:	10800504 	addi	r2,r2,20
    8944:	10800037 	ldwio	r2,0(r2)
    8948:	1007883a 	mov	r3,r2
    894c:	e0bfff17 	ldw	r2,-4(fp)
    8950:	1880021e 	bne	r3,r2,895c <altera_avalon_fifo_write_almostempty+0x44>
        return ALTERA_AVALON_FIFO_OK;
    8954:	0005883a 	mov	r2,zero
    8958:	00000106 	br	8960 <altera_avalon_fifo_write_almostempty+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
    895c:	00bfff44 	movi	r2,-3
}
    8960:	e037883a 	mov	sp,fp
    8964:	df000017 	ldw	fp,0(sp)
    8968:	dec00104 	addi	sp,sp,4
    896c:	f800283a 	ret

00008970 <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
    8970:	defffb04 	addi	sp,sp,-20
    8974:	dfc00415 	stw	ra,16(sp)
    8978:	df000315 	stw	fp,12(sp)
    897c:	df000304 	addi	fp,sp,12
    8980:	e13ffd15 	stw	r4,-12(fp)
    8984:	e17ffe15 	stw	r5,-8(fp)
    8988:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
    898c:	e13ffe17 	ldw	r4,-8(fp)
    8990:	01400044 	movi	r5,1
    8994:	00086d80 	call	86d8 <altera_avalon_fifo_read_status>
    8998:	1000051e 	bne	r2,zero,89b0 <altera_avalon_fifo_write_fifo+0x40>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
    899c:	e0bffd17 	ldw	r2,-12(fp)
    89a0:	e0ffff17 	ldw	r3,-4(fp)
    89a4:	10c00035 	stwio	r3,0(r2)
        return ALTERA_AVALON_FIFO_OK;
    89a8:	0005883a 	mov	r2,zero
    89ac:	00000106 	br	89b4 <altera_avalon_fifo_write_fifo+0x44>
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
    89b0:	00bfff04 	movi	r2,-4
    }
}
    89b4:	e037883a 	mov	sp,fp
    89b8:	dfc00117 	ldw	ra,4(sp)
    89bc:	df000017 	ldw	fp,0(sp)
    89c0:	dec00204 	addi	sp,sp,8
    89c4:	f800283a 	ret

000089c8 <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
    89c8:	defffa04 	addi	sp,sp,-24
    89cc:	dfc00515 	stw	ra,20(sp)
    89d0:	df000415 	stw	fp,16(sp)
    89d4:	df000404 	addi	fp,sp,16
    89d8:	e13ffd15 	stw	r4,-12(fp)
    89dc:	e17ffe15 	stw	r5,-8(fp)
    89e0:	e1bfff15 	stw	r6,-4(fp)
    int return_val = 0;
    89e4:	e03ffc15 	stw	zero,-16(fp)
    *data = 0;
    89e8:	e0bfff17 	ldw	r2,-4(fp)
    89ec:	10000015 	stw	zero,0(r2)
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
    89f0:	e13ffe17 	ldw	r4,-8(fp)
    89f4:	01400084 	movi	r5,2
    89f8:	00086d80 	call	86d8 <altera_avalon_fifo_read_status>
    89fc:	1000071e 	bne	r2,zero,8a1c <altera_avalon_read_fifo+0x54>
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
    8a00:	e13ffe17 	ldw	r4,-8(fp)
    8a04:	00087e40 	call	87e4 <altera_avalon_fifo_read_level>
    8a08:	e0bffc15 	stw	r2,-16(fp)
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
    8a0c:	e0bffd17 	ldw	r2,-12(fp)
    8a10:	10c00037 	ldwio	r3,0(r2)
    8a14:	e0bfff17 	ldw	r2,-4(fp)
    8a18:	10c00015 	stw	r3,0(r2)
    
    }
    return return_val;
    8a1c:	e0bffc17 	ldw	r2,-16(fp)
}
    8a20:	e037883a 	mov	sp,fp
    8a24:	dfc00117 	ldw	ra,4(sp)
    8a28:	df000017 	ldw	fp,0(sp)
    8a2c:	dec00204 	addi	sp,sp,8
    8a30:	f800283a 	ret

00008a34 <altera_avalon_fifo_read_fifo>:

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
    8a34:	defffc04 	addi	sp,sp,-16
    8a38:	dfc00315 	stw	ra,12(sp)
    8a3c:	df000215 	stw	fp,8(sp)
    8a40:	df000204 	addi	fp,sp,8
    8a44:	e13ffe15 	stw	r4,-8(fp)
    8a48:	e17fff15 	stw	r5,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
    8a4c:	e13fff17 	ldw	r4,-4(fp)
    8a50:	01400084 	movi	r5,2
    8a54:	00086d80 	call	86d8 <altera_avalon_fifo_read_status>
    8a58:	1000031e 	bne	r2,zero,8a68 <altera_avalon_fifo_read_fifo+0x34>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
    8a5c:	e0bffe17 	ldw	r2,-8(fp)
    8a60:	10800037 	ldwio	r2,0(r2)
    8a64:	00000106 	br	8a6c <altera_avalon_fifo_read_fifo+0x38>
    }
    return 0;
    8a68:	0005883a 	mov	r2,zero
}
    8a6c:	e037883a 	mov	sp,fp
    8a70:	dfc00117 	ldw	ra,4(sp)
    8a74:	df000017 	ldw	fp,0(sp)
    8a78:	dec00204 	addi	sp,sp,8
    8a7c:	f800283a 	ret

00008a80 <altera_avalon_fifo_write_other_info>:

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
    8a80:	defffb04 	addi	sp,sp,-20
    8a84:	dfc00415 	stw	ra,16(sp)
    8a88:	df000315 	stw	fp,12(sp)
    8a8c:	df000304 	addi	fp,sp,12
    8a90:	e13ffd15 	stw	r4,-12(fp)
    8a94:	e17ffe15 	stw	r5,-8(fp)
    8a98:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
    8a9c:	e13ffe17 	ldw	r4,-8(fp)
    8aa0:	01400044 	movi	r5,1
    8aa4:	00086d80 	call	86d8 <altera_avalon_fifo_read_status>
    8aa8:	1000061e 	bne	r2,zero,8ac4 <altera_avalon_fifo_write_other_info+0x44>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
    8aac:	e0bffd17 	ldw	r2,-12(fp)
    8ab0:	10800104 	addi	r2,r2,4
    8ab4:	e0ffff17 	ldw	r3,-4(fp)
    8ab8:	10c00035 	stwio	r3,0(r2)
	return ALTERA_AVALON_FIFO_OK;
    8abc:	0005883a 	mov	r2,zero
    8ac0:	00000106 	br	8ac8 <altera_avalon_fifo_write_other_info+0x48>
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
    8ac4:	00bfff04 	movi	r2,-4
    }
}
    8ac8:	e037883a 	mov	sp,fp
    8acc:	dfc00117 	ldw	ra,4(sp)
    8ad0:	df000017 	ldw	fp,0(sp)
    8ad4:	dec00204 	addi	sp,sp,8
    8ad8:	f800283a 	ret

00008adc <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
    8adc:	defffe04 	addi	sp,sp,-8
    8ae0:	df000115 	stw	fp,4(sp)
    8ae4:	df000104 	addi	fp,sp,4
    8ae8:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
    8aec:	e0bfff17 	ldw	r2,-4(fp)
    8af0:	10800104 	addi	r2,r2,4
    8af4:	10800037 	ldwio	r2,0(r2)
}
    8af8:	e037883a 	mov	sp,fp
    8afc:	df000017 	ldw	fp,0(sp)
    8b00:	dec00104 	addi	sp,sp,4
    8b04:	f800283a 	ret

00008b08 <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
    8b08:	defffe04 	addi	sp,sp,-8
    8b0c:	df000115 	stw	fp,4(sp)
    8b10:	df000104 	addi	fp,sp,4
    8b14:	e13fff15 	stw	r4,-4(fp)
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
    8b18:	e0bfff17 	ldw	r2,-4(fp)
    8b1c:	10800037 	ldwio	r2,0(r2)
}
    8b20:	e037883a 	mov	sp,fp
    8b24:	df000017 	ldw	fp,0(sp)
    8b28:	dec00104 	addi	sp,sp,4
    8b2c:	f800283a 	ret

00008b30 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    8b30:	defffa04 	addi	sp,sp,-24
    8b34:	dfc00515 	stw	ra,20(sp)
    8b38:	df000415 	stw	fp,16(sp)
    8b3c:	df000404 	addi	fp,sp,16
    8b40:	e13ffd15 	stw	r4,-12(fp)
    8b44:	e17ffe15 	stw	r5,-8(fp)
    8b48:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    8b4c:	e0bffd17 	ldw	r2,-12(fp)
    8b50:	10800017 	ldw	r2,0(r2)
    8b54:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    8b58:	e0bffc17 	ldw	r2,-16(fp)
    8b5c:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    8b60:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    8b64:	10800217 	ldw	r2,8(r2)
    8b68:	1809883a 	mov	r4,r3
    8b6c:	e17ffe17 	ldw	r5,-8(fp)
    8b70:	e1bfff17 	ldw	r6,-4(fp)
    8b74:	100f883a 	mov	r7,r2
    8b78:	00091580 	call	9158 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    8b7c:	e037883a 	mov	sp,fp
    8b80:	dfc00117 	ldw	ra,4(sp)
    8b84:	df000017 	ldw	fp,0(sp)
    8b88:	dec00204 	addi	sp,sp,8
    8b8c:	f800283a 	ret

00008b90 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    8b90:	defffa04 	addi	sp,sp,-24
    8b94:	dfc00515 	stw	ra,20(sp)
    8b98:	df000415 	stw	fp,16(sp)
    8b9c:	df000404 	addi	fp,sp,16
    8ba0:	e13ffd15 	stw	r4,-12(fp)
    8ba4:	e17ffe15 	stw	r5,-8(fp)
    8ba8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    8bac:	e0bffd17 	ldw	r2,-12(fp)
    8bb0:	10800017 	ldw	r2,0(r2)
    8bb4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    8bb8:	e0bffc17 	ldw	r2,-16(fp)
    8bbc:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    8bc0:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    8bc4:	10800217 	ldw	r2,8(r2)
    8bc8:	1809883a 	mov	r4,r3
    8bcc:	e17ffe17 	ldw	r5,-8(fp)
    8bd0:	e1bfff17 	ldw	r6,-4(fp)
    8bd4:	100f883a 	mov	r7,r2
    8bd8:	00093700 	call	9370 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    8bdc:	e037883a 	mov	sp,fp
    8be0:	dfc00117 	ldw	ra,4(sp)
    8be4:	df000017 	ldw	fp,0(sp)
    8be8:	dec00204 	addi	sp,sp,8
    8bec:	f800283a 	ret

00008bf0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    8bf0:	defffc04 	addi	sp,sp,-16
    8bf4:	dfc00315 	stw	ra,12(sp)
    8bf8:	df000215 	stw	fp,8(sp)
    8bfc:	df000204 	addi	fp,sp,8
    8c00:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    8c04:	e0bfff17 	ldw	r2,-4(fp)
    8c08:	10800017 	ldw	r2,0(r2)
    8c0c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    8c10:	e0bffe17 	ldw	r2,-8(fp)
    8c14:	10c00a04 	addi	r3,r2,40
    8c18:	e0bfff17 	ldw	r2,-4(fp)
    8c1c:	10800217 	ldw	r2,8(r2)
    8c20:	1809883a 	mov	r4,r3
    8c24:	100b883a 	mov	r5,r2
    8c28:	0008ffc0 	call	8ffc <altera_avalon_jtag_uart_close>
}
    8c2c:	e037883a 	mov	sp,fp
    8c30:	dfc00117 	ldw	ra,4(sp)
    8c34:	df000017 	ldw	fp,0(sp)
    8c38:	dec00204 	addi	sp,sp,8
    8c3c:	f800283a 	ret

00008c40 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    8c40:	defffa04 	addi	sp,sp,-24
    8c44:	dfc00515 	stw	ra,20(sp)
    8c48:	df000415 	stw	fp,16(sp)
    8c4c:	df000404 	addi	fp,sp,16
    8c50:	e13ffd15 	stw	r4,-12(fp)
    8c54:	e17ffe15 	stw	r5,-8(fp)
    8c58:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    8c5c:	e0bffd17 	ldw	r2,-12(fp)
    8c60:	10800017 	ldw	r2,0(r2)
    8c64:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    8c68:	e0bffc17 	ldw	r2,-16(fp)
    8c6c:	10800a04 	addi	r2,r2,40
    8c70:	1009883a 	mov	r4,r2
    8c74:	e17ffe17 	ldw	r5,-8(fp)
    8c78:	e1bfff17 	ldw	r6,-4(fp)
    8c7c:	00090640 	call	9064 <altera_avalon_jtag_uart_ioctl>
}
    8c80:	e037883a 	mov	sp,fp
    8c84:	dfc00117 	ldw	ra,4(sp)
    8c88:	df000017 	ldw	fp,0(sp)
    8c8c:	dec00204 	addi	sp,sp,8
    8c90:	f800283a 	ret

00008c94 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    8c94:	defffa04 	addi	sp,sp,-24
    8c98:	dfc00515 	stw	ra,20(sp)
    8c9c:	df000415 	stw	fp,16(sp)
    8ca0:	df000404 	addi	fp,sp,16
    8ca4:	e13ffd15 	stw	r4,-12(fp)
    8ca8:	e17ffe15 	stw	r5,-8(fp)
    8cac:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    8cb0:	e0bffd17 	ldw	r2,-12(fp)
    8cb4:	00c00044 	movi	r3,1
    8cb8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    8cbc:	e0bffd17 	ldw	r2,-12(fp)
    8cc0:	10800017 	ldw	r2,0(r2)
    8cc4:	10800104 	addi	r2,r2,4
    8cc8:	e0fffd17 	ldw	r3,-12(fp)
    8ccc:	18c00817 	ldw	r3,32(r3)
    8cd0:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    8cd4:	e0fffe17 	ldw	r3,-8(fp)
    8cd8:	e0bfff17 	ldw	r2,-4(fp)
    8cdc:	d8000015 	stw	zero,0(sp)
    8ce0:	1809883a 	mov	r4,r3
    8ce4:	100b883a 	mov	r5,r2
    8ce8:	01800074 	movhi	r6,1
    8cec:	31a35504 	addi	r6,r6,-29356
    8cf0:	e1fffd17 	ldw	r7,-12(fp)
    8cf4:	0009af80 	call	9af8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    8cf8:	e0bffd17 	ldw	r2,-12(fp)
    8cfc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    8d00:	e0bffd17 	ldw	r2,-12(fp)
    8d04:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    8d08:	00800074 	movhi	r2,1
    8d0c:	10b63504 	addi	r2,r2,-10028
    8d10:	10800017 	ldw	r2,0(r2)
    8d14:	1809883a 	mov	r4,r3
    8d18:	100b883a 	mov	r5,r2
    8d1c:	01800074 	movhi	r6,1
    8d20:	31a3d604 	addi	r6,r6,-28840
    8d24:	e1fffd17 	ldw	r7,-12(fp)
    8d28:	00096900 	call	9690 <alt_alarm_start>
    8d2c:	1000040e 	bge	r2,zero,8d40 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    8d30:	e0bffd17 	ldw	r2,-12(fp)
    8d34:	00e00034 	movhi	r3,32768
    8d38:	18ffffc4 	addi	r3,r3,-1
    8d3c:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    8d40:	e037883a 	mov	sp,fp
    8d44:	dfc00117 	ldw	ra,4(sp)
    8d48:	df000017 	ldw	fp,0(sp)
    8d4c:	dec00204 	addi	sp,sp,8
    8d50:	f800283a 	ret

00008d54 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    8d54:	defff804 	addi	sp,sp,-32
    8d58:	df000715 	stw	fp,28(sp)
    8d5c:	df000704 	addi	fp,sp,28
    8d60:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    8d64:	e0bfff17 	ldw	r2,-4(fp)
    8d68:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    8d6c:	e0bffb17 	ldw	r2,-20(fp)
    8d70:	10800017 	ldw	r2,0(r2)
    8d74:	e0bffc15 	stw	r2,-16(fp)
    8d78:	00000106 	br	8d80 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
    8d7c:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    8d80:	e0bffc17 	ldw	r2,-16(fp)
    8d84:	10800104 	addi	r2,r2,4
    8d88:	10800037 	ldwio	r2,0(r2)
    8d8c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    8d90:	e0bffd17 	ldw	r2,-12(fp)
    8d94:	1080c00c 	andi	r2,r2,768
    8d98:	10006a26 	beq	r2,zero,8f44 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    8d9c:	e0bffd17 	ldw	r2,-12(fp)
    8da0:	1080400c 	andi	r2,r2,256
    8da4:	10003326 	beq	r2,zero,8e74 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    8da8:	00800074 	movhi	r2,1
    8dac:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    8db0:	e0bffb17 	ldw	r2,-20(fp)
    8db4:	10800a17 	ldw	r2,40(r2)
    8db8:	10800044 	addi	r2,r2,1
    8dbc:	1081ffcc 	andi	r2,r2,2047
    8dc0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    8dc4:	e0bffb17 	ldw	r2,-20(fp)
    8dc8:	10c00b17 	ldw	r3,44(r2)
    8dcc:	e0bffe17 	ldw	r2,-8(fp)
    8dd0:	18801426 	beq	r3,r2,8e24 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    8dd4:	e0bffc17 	ldw	r2,-16(fp)
    8dd8:	10800037 	ldwio	r2,0(r2)
    8ddc:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    8de0:	e0bff917 	ldw	r2,-28(fp)
    8de4:	10a0000c 	andi	r2,r2,32768
    8de8:	10001026 	beq	r2,zero,8e2c <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    8dec:	e0bffb17 	ldw	r2,-20(fp)
    8df0:	10800a17 	ldw	r2,40(r2)
    8df4:	e0fff917 	ldw	r3,-28(fp)
    8df8:	e13ffb17 	ldw	r4,-20(fp)
    8dfc:	2085883a 	add	r2,r4,r2
    8e00:	10800e04 	addi	r2,r2,56
    8e04:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    8e08:	e0bffb17 	ldw	r2,-20(fp)
    8e0c:	10800a17 	ldw	r2,40(r2)
    8e10:	10800044 	addi	r2,r2,1
    8e14:	10c1ffcc 	andi	r3,r2,2047
    8e18:	e0bffb17 	ldw	r2,-20(fp)
    8e1c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    8e20:	003fe306 	br	8db0 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    8e24:	0001883a 	nop
    8e28:	00000106 	br	8e30 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    8e2c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    8e30:	e0bff917 	ldw	r2,-28(fp)
    8e34:	10bfffec 	andhi	r2,r2,65535
    8e38:	10000e26 	beq	r2,zero,8e74 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    8e3c:	e0bffb17 	ldw	r2,-20(fp)
    8e40:	10c00817 	ldw	r3,32(r2)
    8e44:	00bfff84 	movi	r2,-2
    8e48:	1886703a 	and	r3,r3,r2
    8e4c:	e0bffb17 	ldw	r2,-20(fp)
    8e50:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    8e54:	e0bffc17 	ldw	r2,-16(fp)
    8e58:	10800104 	addi	r2,r2,4
    8e5c:	e0fffb17 	ldw	r3,-20(fp)
    8e60:	18c00817 	ldw	r3,32(r3)
    8e64:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    8e68:	e0bffc17 	ldw	r2,-16(fp)
    8e6c:	10800104 	addi	r2,r2,4
    8e70:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    8e74:	e0bffd17 	ldw	r2,-12(fp)
    8e78:	1080800c 	andi	r2,r2,512
    8e7c:	103fbf26 	beq	r2,zero,8d7c <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    8e80:	e0bffd17 	ldw	r2,-12(fp)
    8e84:	1004d43a 	srli	r2,r2,16
    8e88:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    8e8c:	00001406 	br	8ee0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    8e90:	e0bffc17 	ldw	r2,-16(fp)
    8e94:	e0fffb17 	ldw	r3,-20(fp)
    8e98:	18c00d17 	ldw	r3,52(r3)
    8e9c:	e13ffb17 	ldw	r4,-20(fp)
    8ea0:	20c7883a 	add	r3,r4,r3
    8ea4:	18c20e04 	addi	r3,r3,2104
    8ea8:	18c00003 	ldbu	r3,0(r3)
    8eac:	18c03fcc 	andi	r3,r3,255
    8eb0:	18c0201c 	xori	r3,r3,128
    8eb4:	18ffe004 	addi	r3,r3,-128
    8eb8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    8ebc:	e0bffb17 	ldw	r2,-20(fp)
    8ec0:	10800d17 	ldw	r2,52(r2)
    8ec4:	10800044 	addi	r2,r2,1
    8ec8:	10c1ffcc 	andi	r3,r2,2047
    8ecc:	e0bffb17 	ldw	r2,-20(fp)
    8ed0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    8ed4:	e0bffa17 	ldw	r2,-24(fp)
    8ed8:	10bfffc4 	addi	r2,r2,-1
    8edc:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    8ee0:	e0bffa17 	ldw	r2,-24(fp)
    8ee4:	10000526 	beq	r2,zero,8efc <altera_avalon_jtag_uart_irq+0x1a8>
    8ee8:	e0bffb17 	ldw	r2,-20(fp)
    8eec:	10c00d17 	ldw	r3,52(r2)
    8ef0:	e0bffb17 	ldw	r2,-20(fp)
    8ef4:	10800c17 	ldw	r2,48(r2)
    8ef8:	18bfe51e 	bne	r3,r2,8e90 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    8efc:	e0bffa17 	ldw	r2,-24(fp)
    8f00:	103f9e26 	beq	r2,zero,8d7c <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    8f04:	e0bffb17 	ldw	r2,-20(fp)
    8f08:	10c00817 	ldw	r3,32(r2)
    8f0c:	00bfff44 	movi	r2,-3
    8f10:	1886703a 	and	r3,r3,r2
    8f14:	e0bffb17 	ldw	r2,-20(fp)
    8f18:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    8f1c:	e0bffb17 	ldw	r2,-20(fp)
    8f20:	10800017 	ldw	r2,0(r2)
    8f24:	10800104 	addi	r2,r2,4
    8f28:	e0fffb17 	ldw	r3,-20(fp)
    8f2c:	18c00817 	ldw	r3,32(r3)
    8f30:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    8f34:	e0bffc17 	ldw	r2,-16(fp)
    8f38:	10800104 	addi	r2,r2,4
    8f3c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    8f40:	003f8e06 	br	8d7c <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    8f44:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    8f48:	e037883a 	mov	sp,fp
    8f4c:	df000017 	ldw	fp,0(sp)
    8f50:	dec00104 	addi	sp,sp,4
    8f54:	f800283a 	ret

00008f58 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    8f58:	defffc04 	addi	sp,sp,-16
    8f5c:	df000315 	stw	fp,12(sp)
    8f60:	df000304 	addi	fp,sp,12
    8f64:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    8f68:	e0bfff17 	ldw	r2,-4(fp)
    8f6c:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    8f70:	e0bffd17 	ldw	r2,-12(fp)
    8f74:	10800017 	ldw	r2,0(r2)
    8f78:	10800104 	addi	r2,r2,4
    8f7c:	10800037 	ldwio	r2,0(r2)
    8f80:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    8f84:	e0bffe17 	ldw	r2,-8(fp)
    8f88:	1081000c 	andi	r2,r2,1024
    8f8c:	10000a26 	beq	r2,zero,8fb8 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    8f90:	e0bffd17 	ldw	r2,-12(fp)
    8f94:	10800017 	ldw	r2,0(r2)
    8f98:	10800104 	addi	r2,r2,4
    8f9c:	e0fffd17 	ldw	r3,-12(fp)
    8fa0:	18c00817 	ldw	r3,32(r3)
    8fa4:	18c10014 	ori	r3,r3,1024
    8fa8:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    8fac:	e0bffd17 	ldw	r2,-12(fp)
    8fb0:	10000915 	stw	zero,36(r2)
    8fb4:	00000a06 	br	8fe0 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    8fb8:	e0bffd17 	ldw	r2,-12(fp)
    8fbc:	10800917 	ldw	r2,36(r2)
    8fc0:	00e00034 	movhi	r3,32768
    8fc4:	18ffff04 	addi	r3,r3,-4
    8fc8:	18800536 	bltu	r3,r2,8fe0 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
    8fcc:	e0bffd17 	ldw	r2,-12(fp)
    8fd0:	10800917 	ldw	r2,36(r2)
    8fd4:	10c00044 	addi	r3,r2,1
    8fd8:	e0bffd17 	ldw	r2,-12(fp)
    8fdc:	10c00915 	stw	r3,36(r2)
    8fe0:	00800074 	movhi	r2,1
    8fe4:	10b63504 	addi	r2,r2,-10028
    8fe8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    8fec:	e037883a 	mov	sp,fp
    8ff0:	df000017 	ldw	fp,0(sp)
    8ff4:	dec00104 	addi	sp,sp,4
    8ff8:	f800283a 	ret

00008ffc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    8ffc:	defffd04 	addi	sp,sp,-12
    9000:	df000215 	stw	fp,8(sp)
    9004:	df000204 	addi	fp,sp,8
    9008:	e13ffe15 	stw	r4,-8(fp)
    900c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    9010:	00000506 	br	9028 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    9014:	e0bfff17 	ldw	r2,-4(fp)
    9018:	1090000c 	andi	r2,r2,16384
    901c:	10000226 	beq	r2,zero,9028 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    9020:	00bffd44 	movi	r2,-11
    9024:	00000b06 	br	9054 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    9028:	e0bffe17 	ldw	r2,-8(fp)
    902c:	10c00d17 	ldw	r3,52(r2)
    9030:	e0bffe17 	ldw	r2,-8(fp)
    9034:	10800c17 	ldw	r2,48(r2)
    9038:	18800526 	beq	r3,r2,9050 <altera_avalon_jtag_uart_close+0x54>
    903c:	e0bffe17 	ldw	r2,-8(fp)
    9040:	10c00917 	ldw	r3,36(r2)
    9044:	e0bffe17 	ldw	r2,-8(fp)
    9048:	10800117 	ldw	r2,4(r2)
    904c:	18bff136 	bltu	r3,r2,9014 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    9050:	0005883a 	mov	r2,zero
}
    9054:	e037883a 	mov	sp,fp
    9058:	df000017 	ldw	fp,0(sp)
    905c:	dec00104 	addi	sp,sp,4
    9060:	f800283a 	ret

00009064 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    9064:	defffa04 	addi	sp,sp,-24
    9068:	df000515 	stw	fp,20(sp)
    906c:	df000504 	addi	fp,sp,20
    9070:	e13ffd15 	stw	r4,-12(fp)
    9074:	e17ffe15 	stw	r5,-8(fp)
    9078:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    907c:	00bff9c4 	movi	r2,-25
    9080:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    9084:	e0bffe17 	ldw	r2,-8(fp)
    9088:	10da8060 	cmpeqi	r3,r2,27137
    908c:	1800031e 	bne	r3,zero,909c <altera_avalon_jtag_uart_ioctl+0x38>
    9090:	109a80a0 	cmpeqi	r2,r2,27138
    9094:	1000181e 	bne	r2,zero,90f8 <altera_avalon_jtag_uart_ioctl+0x94>
    9098:	00002606 	br	9134 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    909c:	e0bffd17 	ldw	r2,-12(fp)
    90a0:	10c00117 	ldw	r3,4(r2)
    90a4:	00a00034 	movhi	r2,32768
    90a8:	10bfffc4 	addi	r2,r2,-1
    90ac:	18802226 	beq	r3,r2,9138 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
    90b0:	e0bfff17 	ldw	r2,-4(fp)
    90b4:	10800017 	ldw	r2,0(r2)
    90b8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    90bc:	e0bffc17 	ldw	r2,-16(fp)
    90c0:	10800090 	cmplti	r2,r2,2
    90c4:	1000061e 	bne	r2,zero,90e0 <altera_avalon_jtag_uart_ioctl+0x7c>
    90c8:	e0fffc17 	ldw	r3,-16(fp)
    90cc:	00a00034 	movhi	r2,32768
    90d0:	10bfffc4 	addi	r2,r2,-1
    90d4:	18800226 	beq	r3,r2,90e0 <altera_avalon_jtag_uart_ioctl+0x7c>
    90d8:	e0bffc17 	ldw	r2,-16(fp)
    90dc:	00000206 	br	90e8 <altera_avalon_jtag_uart_ioctl+0x84>
    90e0:	00a00034 	movhi	r2,32768
    90e4:	10bfff84 	addi	r2,r2,-2
    90e8:	e0fffd17 	ldw	r3,-12(fp)
    90ec:	18800115 	stw	r2,4(r3)
      rc = 0;
    90f0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    90f4:	00001006 	br	9138 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    90f8:	e0bffd17 	ldw	r2,-12(fp)
    90fc:	10c00117 	ldw	r3,4(r2)
    9100:	00a00034 	movhi	r2,32768
    9104:	10bfffc4 	addi	r2,r2,-1
    9108:	18800d26 	beq	r3,r2,9140 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    910c:	e0bffd17 	ldw	r2,-12(fp)
    9110:	10c00917 	ldw	r3,36(r2)
    9114:	e0bffd17 	ldw	r2,-12(fp)
    9118:	10800117 	ldw	r2,4(r2)
    911c:	1885803a 	cmpltu	r2,r3,r2
    9120:	10c03fcc 	andi	r3,r2,255
    9124:	e0bfff17 	ldw	r2,-4(fp)
    9128:	10c00015 	stw	r3,0(r2)
      rc = 0;
    912c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    9130:	00000306 	br	9140 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
    9134:	00000306 	br	9144 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    9138:	0001883a 	nop
    913c:	00000106 	br	9144 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    9140:	0001883a 	nop

  default:
    break;
  }

  return rc;
    9144:	e0bffb17 	ldw	r2,-20(fp)
}
    9148:	e037883a 	mov	sp,fp
    914c:	df000017 	ldw	fp,0(sp)
    9150:	dec00104 	addi	sp,sp,4
    9154:	f800283a 	ret

00009158 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    9158:	defff304 	addi	sp,sp,-52
    915c:	dfc00c15 	stw	ra,48(sp)
    9160:	df000b15 	stw	fp,44(sp)
    9164:	df000b04 	addi	fp,sp,44
    9168:	e13ffc15 	stw	r4,-16(fp)
    916c:	e17ffd15 	stw	r5,-12(fp)
    9170:	e1bffe15 	stw	r6,-8(fp)
    9174:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    9178:	e0bffd17 	ldw	r2,-12(fp)
    917c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    9180:	00004706 	br	92a0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    9184:	e0bffc17 	ldw	r2,-16(fp)
    9188:	10800a17 	ldw	r2,40(r2)
    918c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    9190:	e0bffc17 	ldw	r2,-16(fp)
    9194:	10800b17 	ldw	r2,44(r2)
    9198:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    919c:	e0fff717 	ldw	r3,-36(fp)
    91a0:	e0bff817 	ldw	r2,-32(fp)
    91a4:	18800536 	bltu	r3,r2,91bc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    91a8:	e0fff717 	ldw	r3,-36(fp)
    91ac:	e0bff817 	ldw	r2,-32(fp)
    91b0:	1885c83a 	sub	r2,r3,r2
    91b4:	e0bff615 	stw	r2,-40(fp)
    91b8:	00000406 	br	91cc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    91bc:	00c20004 	movi	r3,2048
    91c0:	e0bff817 	ldw	r2,-32(fp)
    91c4:	1885c83a 	sub	r2,r3,r2
    91c8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    91cc:	e0bff617 	ldw	r2,-40(fp)
    91d0:	10001e26 	beq	r2,zero,924c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    91d4:	e0fffe17 	ldw	r3,-8(fp)
    91d8:	e0bff617 	ldw	r2,-40(fp)
    91dc:	1880022e 	bgeu	r3,r2,91e8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    91e0:	e0bffe17 	ldw	r2,-8(fp)
    91e4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    91e8:	e0bff817 	ldw	r2,-32(fp)
    91ec:	10800e04 	addi	r2,r2,56
    91f0:	e0fffc17 	ldw	r3,-16(fp)
    91f4:	1885883a 	add	r2,r3,r2
    91f8:	e13ff517 	ldw	r4,-44(fp)
    91fc:	100b883a 	mov	r5,r2
    9200:	e1bff617 	ldw	r6,-40(fp)
    9204:	000a72c0 	call	a72c <memcpy>
      ptr   += n;
    9208:	e0fff517 	ldw	r3,-44(fp)
    920c:	e0bff617 	ldw	r2,-40(fp)
    9210:	1885883a 	add	r2,r3,r2
    9214:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    9218:	e0fffe17 	ldw	r3,-8(fp)
    921c:	e0bff617 	ldw	r2,-40(fp)
    9220:	1885c83a 	sub	r2,r3,r2
    9224:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    9228:	e0fff817 	ldw	r3,-32(fp)
    922c:	e0bff617 	ldw	r2,-40(fp)
    9230:	1885883a 	add	r2,r3,r2
    9234:	10c1ffcc 	andi	r3,r2,2047
    9238:	e0bffc17 	ldw	r2,-16(fp)
    923c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    9240:	e0bffe17 	ldw	r2,-8(fp)
    9244:	00bfcf16 	blt	zero,r2,9184 <altera_avalon_jtag_uart_read+0x2c>
    9248:	00000106 	br	9250 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    924c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    9250:	e0fff517 	ldw	r3,-44(fp)
    9254:	e0bffd17 	ldw	r2,-12(fp)
    9258:	1880141e 	bne	r3,r2,92ac <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    925c:	e0bfff17 	ldw	r2,-4(fp)
    9260:	1090000c 	andi	r2,r2,16384
    9264:	1000131e 	bne	r2,zero,92b4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    9268:	0001883a 	nop
    926c:	e0bffc17 	ldw	r2,-16(fp)
    9270:	10c00a17 	ldw	r3,40(r2)
    9274:	e0bff717 	ldw	r2,-36(fp)
    9278:	1880051e 	bne	r3,r2,9290 <altera_avalon_jtag_uart_read+0x138>
    927c:	e0bffc17 	ldw	r2,-16(fp)
    9280:	10c00917 	ldw	r3,36(r2)
    9284:	e0bffc17 	ldw	r2,-16(fp)
    9288:	10800117 	ldw	r2,4(r2)
    928c:	18bff736 	bltu	r3,r2,926c <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    9290:	e0bffc17 	ldw	r2,-16(fp)
    9294:	10c00a17 	ldw	r3,40(r2)
    9298:	e0bff717 	ldw	r2,-36(fp)
    929c:	18800726 	beq	r3,r2,92bc <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    92a0:	e0bffe17 	ldw	r2,-8(fp)
    92a4:	00bfb716 	blt	zero,r2,9184 <altera_avalon_jtag_uart_read+0x2c>
    92a8:	00000506 	br	92c0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    92ac:	0001883a 	nop
    92b0:	00000306 	br	92c0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    92b4:	0001883a 	nop
    92b8:	00000106 	br	92c0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    92bc:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    92c0:	e0fff517 	ldw	r3,-44(fp)
    92c4:	e0bffd17 	ldw	r2,-12(fp)
    92c8:	18801726 	beq	r3,r2,9328 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    92cc:	0005303a 	rdctl	r2,status
    92d0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    92d4:	e0fffa17 	ldw	r3,-24(fp)
    92d8:	00bfff84 	movi	r2,-2
    92dc:	1884703a 	and	r2,r3,r2
    92e0:	1001703a 	wrctl	status,r2
  
  return context;
    92e4:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    92e8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    92ec:	e0bffc17 	ldw	r2,-16(fp)
    92f0:	10800817 	ldw	r2,32(r2)
    92f4:	10c00054 	ori	r3,r2,1
    92f8:	e0bffc17 	ldw	r2,-16(fp)
    92fc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    9300:	e0bffc17 	ldw	r2,-16(fp)
    9304:	10800017 	ldw	r2,0(r2)
    9308:	10800104 	addi	r2,r2,4
    930c:	e0fffc17 	ldw	r3,-16(fp)
    9310:	18c00817 	ldw	r3,32(r3)
    9314:	10c00035 	stwio	r3,0(r2)
    9318:	e0bff917 	ldw	r2,-28(fp)
    931c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9320:	e0bffb17 	ldw	r2,-20(fp)
    9324:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    9328:	e0fff517 	ldw	r3,-44(fp)
    932c:	e0bffd17 	ldw	r2,-12(fp)
    9330:	18800426 	beq	r3,r2,9344 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
    9334:	e0fff517 	ldw	r3,-44(fp)
    9338:	e0bffd17 	ldw	r2,-12(fp)
    933c:	1885c83a 	sub	r2,r3,r2
    9340:	00000606 	br	935c <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
    9344:	e0bfff17 	ldw	r2,-4(fp)
    9348:	1090000c 	andi	r2,r2,16384
    934c:	10000226 	beq	r2,zero,9358 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
    9350:	00bffd44 	movi	r2,-11
    9354:	00000106 	br	935c <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
    9358:	00bffec4 	movi	r2,-5
}
    935c:	e037883a 	mov	sp,fp
    9360:	dfc00117 	ldw	ra,4(sp)
    9364:	df000017 	ldw	fp,0(sp)
    9368:	dec00204 	addi	sp,sp,8
    936c:	f800283a 	ret

00009370 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    9370:	defff304 	addi	sp,sp,-52
    9374:	dfc00c15 	stw	ra,48(sp)
    9378:	df000b15 	stw	fp,44(sp)
    937c:	df000b04 	addi	fp,sp,44
    9380:	e13ffc15 	stw	r4,-16(fp)
    9384:	e17ffd15 	stw	r5,-12(fp)
    9388:	e1bffe15 	stw	r6,-8(fp)
    938c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    9390:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    9394:	e0bffd17 	ldw	r2,-12(fp)
    9398:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    939c:	00003706 	br	947c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    93a0:	e0bffc17 	ldw	r2,-16(fp)
    93a4:	10800c17 	ldw	r2,48(r2)
    93a8:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
    93ac:	e0bffc17 	ldw	r2,-16(fp)
    93b0:	10800d17 	ldw	r2,52(r2)
    93b4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    93b8:	e0fff817 	ldw	r3,-32(fp)
    93bc:	e0bff517 	ldw	r2,-44(fp)
    93c0:	1880062e 	bgeu	r3,r2,93dc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    93c4:	e0fff517 	ldw	r3,-44(fp)
    93c8:	e0bff817 	ldw	r2,-32(fp)
    93cc:	1885c83a 	sub	r2,r3,r2
    93d0:	10bfffc4 	addi	r2,r2,-1
    93d4:	e0bff615 	stw	r2,-40(fp)
    93d8:	00000b06 	br	9408 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    93dc:	e0bff517 	ldw	r2,-44(fp)
    93e0:	10000526 	beq	r2,zero,93f8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    93e4:	00c20004 	movi	r3,2048
    93e8:	e0bff817 	ldw	r2,-32(fp)
    93ec:	1885c83a 	sub	r2,r3,r2
    93f0:	e0bff615 	stw	r2,-40(fp)
    93f4:	00000406 	br	9408 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    93f8:	00c1ffc4 	movi	r3,2047
    93fc:	e0bff817 	ldw	r2,-32(fp)
    9400:	1885c83a 	sub	r2,r3,r2
    9404:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    9408:	e0bff617 	ldw	r2,-40(fp)
    940c:	10001e26 	beq	r2,zero,9488 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    9410:	e0fffe17 	ldw	r3,-8(fp)
    9414:	e0bff617 	ldw	r2,-40(fp)
    9418:	1880022e 	bgeu	r3,r2,9424 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    941c:	e0bffe17 	ldw	r2,-8(fp)
    9420:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    9424:	e0bff817 	ldw	r2,-32(fp)
    9428:	10820e04 	addi	r2,r2,2104
    942c:	e0fffc17 	ldw	r3,-16(fp)
    9430:	1885883a 	add	r2,r3,r2
    9434:	1009883a 	mov	r4,r2
    9438:	e17ffd17 	ldw	r5,-12(fp)
    943c:	e1bff617 	ldw	r6,-40(fp)
    9440:	000a72c0 	call	a72c <memcpy>
      ptr   += n;
    9444:	e0fffd17 	ldw	r3,-12(fp)
    9448:	e0bff617 	ldw	r2,-40(fp)
    944c:	1885883a 	add	r2,r3,r2
    9450:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    9454:	e0fffe17 	ldw	r3,-8(fp)
    9458:	e0bff617 	ldw	r2,-40(fp)
    945c:	1885c83a 	sub	r2,r3,r2
    9460:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    9464:	e0fff817 	ldw	r3,-32(fp)
    9468:	e0bff617 	ldw	r2,-40(fp)
    946c:	1885883a 	add	r2,r3,r2
    9470:	10c1ffcc 	andi	r3,r2,2047
    9474:	e0bffc17 	ldw	r2,-16(fp)
    9478:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    947c:	e0bffe17 	ldw	r2,-8(fp)
    9480:	00bfc716 	blt	zero,r2,93a0 <altera_avalon_jtag_uart_write+0x30>
    9484:	00000106 	br	948c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    9488:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    948c:	0005303a 	rdctl	r2,status
    9490:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9494:	e0fffa17 	ldw	r3,-24(fp)
    9498:	00bfff84 	movi	r2,-2
    949c:	1884703a 	and	r2,r3,r2
    94a0:	1001703a 	wrctl	status,r2
  
  return context;
    94a4:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    94a8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    94ac:	e0bffc17 	ldw	r2,-16(fp)
    94b0:	10800817 	ldw	r2,32(r2)
    94b4:	10c00094 	ori	r3,r2,2
    94b8:	e0bffc17 	ldw	r2,-16(fp)
    94bc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    94c0:	e0bffc17 	ldw	r2,-16(fp)
    94c4:	10800017 	ldw	r2,0(r2)
    94c8:	10800104 	addi	r2,r2,4
    94cc:	e0fffc17 	ldw	r3,-16(fp)
    94d0:	18c00817 	ldw	r3,32(r3)
    94d4:	10c00035 	stwio	r3,0(r2)
    94d8:	e0bff917 	ldw	r2,-28(fp)
    94dc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    94e0:	e0bffb17 	ldw	r2,-20(fp)
    94e4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    94e8:	e0bffe17 	ldw	r2,-8(fp)
    94ec:	0080110e 	bge	zero,r2,9534 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    94f0:	e0bfff17 	ldw	r2,-4(fp)
    94f4:	1090000c 	andi	r2,r2,16384
    94f8:	1000111e 	bne	r2,zero,9540 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    94fc:	0001883a 	nop
    9500:	e0bffc17 	ldw	r2,-16(fp)
    9504:	10c00d17 	ldw	r3,52(r2)
    9508:	e0bff517 	ldw	r2,-44(fp)
    950c:	1880051e 	bne	r3,r2,9524 <altera_avalon_jtag_uart_write+0x1b4>
    9510:	e0bffc17 	ldw	r2,-16(fp)
    9514:	10c00917 	ldw	r3,36(r2)
    9518:	e0bffc17 	ldw	r2,-16(fp)
    951c:	10800117 	ldw	r2,4(r2)
    9520:	18bff736 	bltu	r3,r2,9500 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    9524:	e0bffc17 	ldw	r2,-16(fp)
    9528:	10c00d17 	ldw	r3,52(r2)
    952c:	e0bff517 	ldw	r2,-44(fp)
    9530:	18800526 	beq	r3,r2,9548 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    9534:	e0bffe17 	ldw	r2,-8(fp)
    9538:	00bfd016 	blt	zero,r2,947c <altera_avalon_jtag_uart_write+0x10c>
    953c:	00000306 	br	954c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    9540:	0001883a 	nop
    9544:	00000106 	br	954c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
    9548:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    954c:	e0fffd17 	ldw	r3,-12(fp)
    9550:	e0bff717 	ldw	r2,-36(fp)
    9554:	18800426 	beq	r3,r2,9568 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    9558:	e0fffd17 	ldw	r3,-12(fp)
    955c:	e0bff717 	ldw	r2,-36(fp)
    9560:	1885c83a 	sub	r2,r3,r2
    9564:	00000606 	br	9580 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    9568:	e0bfff17 	ldw	r2,-4(fp)
    956c:	1090000c 	andi	r2,r2,16384
    9570:	10000226 	beq	r2,zero,957c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    9574:	00bffd44 	movi	r2,-11
    9578:	00000106 	br	9580 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    957c:	00bffec4 	movi	r2,-5
}
    9580:	e037883a 	mov	sp,fp
    9584:	dfc00117 	ldw	ra,4(sp)
    9588:	df000017 	ldw	fp,0(sp)
    958c:	dec00204 	addi	sp,sp,8
    9590:	f800283a 	ret

00009594 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    9594:	defffa04 	addi	sp,sp,-24
    9598:	dfc00515 	stw	ra,20(sp)
    959c:	df000415 	stw	fp,16(sp)
    95a0:	df000404 	addi	fp,sp,16
    95a4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    95a8:	0007883a 	mov	r3,zero
    95ac:	e0bfff17 	ldw	r2,-4(fp)
    95b0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    95b4:	e0bfff17 	ldw	r2,-4(fp)
    95b8:	10800104 	addi	r2,r2,4
    95bc:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    95c0:	0005303a 	rdctl	r2,status
    95c4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    95c8:	e0fffd17 	ldw	r3,-12(fp)
    95cc:	00bfff84 	movi	r2,-2
    95d0:	1884703a 	and	r2,r3,r2
    95d4:	1001703a 	wrctl	status,r2
  
  return context;
    95d8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    95dc:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    95e0:	000a2c80 	call	a2c8 <alt_tick>
    95e4:	e0bffc17 	ldw	r2,-16(fp)
    95e8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    95ec:	e0bffe17 	ldw	r2,-8(fp)
    95f0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    95f4:	e037883a 	mov	sp,fp
    95f8:	dfc00117 	ldw	ra,4(sp)
    95fc:	df000017 	ldw	fp,0(sp)
    9600:	dec00204 	addi	sp,sp,8
    9604:	f800283a 	ret

00009608 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    9608:	defff804 	addi	sp,sp,-32
    960c:	dfc00715 	stw	ra,28(sp)
    9610:	df000615 	stw	fp,24(sp)
    9614:	df000604 	addi	fp,sp,24
    9618:	e13ffc15 	stw	r4,-16(fp)
    961c:	e17ffd15 	stw	r5,-12(fp)
    9620:	e1bffe15 	stw	r6,-8(fp)
    9624:	e1ffff15 	stw	r7,-4(fp)
    9628:	e0bfff17 	ldw	r2,-4(fp)
    962c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    9630:	00800074 	movhi	r2,1
    9634:	10b63504 	addi	r2,r2,-10028
    9638:	10800017 	ldw	r2,0(r2)
    963c:	1000041e 	bne	r2,zero,9650 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
    9640:	00800074 	movhi	r2,1
    9644:	10b63504 	addi	r2,r2,-10028
    9648:	e0fffb17 	ldw	r3,-20(fp)
    964c:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    9650:	e0bffc17 	ldw	r2,-16(fp)
    9654:	10800104 	addi	r2,r2,4
    9658:	00c001c4 	movi	r3,7
    965c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    9660:	d8000015 	stw	zero,0(sp)
    9664:	e13ffd17 	ldw	r4,-12(fp)
    9668:	e17ffe17 	ldw	r5,-8(fp)
    966c:	01800074 	movhi	r6,1
    9670:	31a56504 	addi	r6,r6,-27244
    9674:	e1fffc17 	ldw	r7,-16(fp)
    9678:	0009af80 	call	9af8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    967c:	e037883a 	mov	sp,fp
    9680:	dfc00117 	ldw	ra,4(sp)
    9684:	df000017 	ldw	fp,0(sp)
    9688:	dec00204 	addi	sp,sp,8
    968c:	f800283a 	ret

00009690 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    9690:	defff504 	addi	sp,sp,-44
    9694:	df000a15 	stw	fp,40(sp)
    9698:	df000a04 	addi	fp,sp,40
    969c:	e13ffc15 	stw	r4,-16(fp)
    96a0:	e17ffd15 	stw	r5,-12(fp)
    96a4:	e1bffe15 	stw	r6,-8(fp)
    96a8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    96ac:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    96b0:	00800074 	movhi	r2,1
    96b4:	10b63504 	addi	r2,r2,-10028
    96b8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    96bc:	10003f26 	beq	r2,zero,97bc <alt_alarm_start+0x12c>
  {
    if (alarm)
    96c0:	e0bffc17 	ldw	r2,-16(fp)
    96c4:	10003b26 	beq	r2,zero,97b4 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
    96c8:	e0bffc17 	ldw	r2,-16(fp)
    96cc:	e0fffe17 	ldw	r3,-8(fp)
    96d0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    96d4:	e0bffc17 	ldw	r2,-16(fp)
    96d8:	e0ffff17 	ldw	r3,-4(fp)
    96dc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    96e0:	0005303a 	rdctl	r2,status
    96e4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    96e8:	e0fff817 	ldw	r3,-32(fp)
    96ec:	00bfff84 	movi	r2,-2
    96f0:	1884703a 	and	r2,r3,r2
    96f4:	1001703a 	wrctl	status,r2
  
  return context;
    96f8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    96fc:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    9700:	00800074 	movhi	r2,1
    9704:	10b63604 	addi	r2,r2,-10024
    9708:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    970c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    9710:	e0fffd17 	ldw	r3,-12(fp)
    9714:	e0bff617 	ldw	r2,-40(fp)
    9718:	1885883a 	add	r2,r3,r2
    971c:	10c00044 	addi	r3,r2,1
    9720:	e0bffc17 	ldw	r2,-16(fp)
    9724:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    9728:	e0bffc17 	ldw	r2,-16(fp)
    972c:	10c00217 	ldw	r3,8(r2)
    9730:	e0bff617 	ldw	r2,-40(fp)
    9734:	1880042e 	bgeu	r3,r2,9748 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
    9738:	e0bffc17 	ldw	r2,-16(fp)
    973c:	00c00044 	movi	r3,1
    9740:	10c00405 	stb	r3,16(r2)
    9744:	00000206 	br	9750 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
    9748:	e0bffc17 	ldw	r2,-16(fp)
    974c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    9750:	e0bffc17 	ldw	r2,-16(fp)
    9754:	00c00074 	movhi	r3,1
    9758:	18f0a004 	addi	r3,r3,-15744
    975c:	e0fff915 	stw	r3,-28(fp)
    9760:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    9764:	e0bffa17 	ldw	r2,-24(fp)
    9768:	e0fff917 	ldw	r3,-28(fp)
    976c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    9770:	e0bff917 	ldw	r2,-28(fp)
    9774:	10c00017 	ldw	r3,0(r2)
    9778:	e0bffa17 	ldw	r2,-24(fp)
    977c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    9780:	e0bff917 	ldw	r2,-28(fp)
    9784:	10800017 	ldw	r2,0(r2)
    9788:	e0fffa17 	ldw	r3,-24(fp)
    978c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    9790:	e0bff917 	ldw	r2,-28(fp)
    9794:	e0fffa17 	ldw	r3,-24(fp)
    9798:	10c00015 	stw	r3,0(r2)
    979c:	e0bff717 	ldw	r2,-36(fp)
    97a0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    97a4:	e0bffb17 	ldw	r2,-20(fp)
    97a8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    97ac:	0005883a 	mov	r2,zero
    97b0:	00000306 	br	97c0 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
    97b4:	00bffa84 	movi	r2,-22
    97b8:	00000106 	br	97c0 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
    97bc:	00bfde84 	movi	r2,-134
  }
}
    97c0:	e037883a 	mov	sp,fp
    97c4:	df000017 	ldw	fp,0(sp)
    97c8:	dec00104 	addi	sp,sp,4
    97cc:	f800283a 	ret

000097d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    97d0:	defffe04 	addi	sp,sp,-8
    97d4:	dfc00115 	stw	ra,4(sp)
    97d8:	df000015 	stw	fp,0(sp)
    97dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    97e0:	00800074 	movhi	r2,1
    97e4:	10b09e04 	addi	r2,r2,-15752
    97e8:	10800017 	ldw	r2,0(r2)
    97ec:	10000526 	beq	r2,zero,9804 <alt_get_errno+0x34>
    97f0:	00800074 	movhi	r2,1
    97f4:	10b09e04 	addi	r2,r2,-15752
    97f8:	10800017 	ldw	r2,0(r2)
    97fc:	103ee83a 	callr	r2
    9800:	00000206 	br	980c <alt_get_errno+0x3c>
    9804:	00800074 	movhi	r2,1
    9808:	10b63704 	addi	r2,r2,-10020
}
    980c:	e037883a 	mov	sp,fp
    9810:	dfc00117 	ldw	ra,4(sp)
    9814:	df000017 	ldw	fp,0(sp)
    9818:	dec00204 	addi	sp,sp,8
    981c:	f800283a 	ret

00009820 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    9820:	defffb04 	addi	sp,sp,-20
    9824:	dfc00415 	stw	ra,16(sp)
    9828:	df000315 	stw	fp,12(sp)
    982c:	df000304 	addi	fp,sp,12
    9830:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    9834:	e0bfff17 	ldw	r2,-4(fp)
    9838:	10000716 	blt	r2,zero,9858 <close+0x38>
    983c:	e13fff17 	ldw	r4,-4(fp)
    9840:	01400304 	movi	r5,12
    9844:	000abc80 	call	abc8 <__mulsi3>
    9848:	00c00074 	movhi	r3,1
    984c:	18ef3904 	addi	r3,r3,-17180
    9850:	10c5883a 	add	r2,r2,r3
    9854:	00000106 	br	985c <close+0x3c>
    9858:	0005883a 	mov	r2,zero
    985c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    9860:	e0bffd17 	ldw	r2,-12(fp)
    9864:	10001826 	beq	r2,zero,98c8 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    9868:	e0bffd17 	ldw	r2,-12(fp)
    986c:	10800017 	ldw	r2,0(r2)
    9870:	10800417 	ldw	r2,16(r2)
    9874:	10000626 	beq	r2,zero,9890 <close+0x70>
    9878:	e0bffd17 	ldw	r2,-12(fp)
    987c:	10800017 	ldw	r2,0(r2)
    9880:	10800417 	ldw	r2,16(r2)
    9884:	e13ffd17 	ldw	r4,-12(fp)
    9888:	103ee83a 	callr	r2
    988c:	00000106 	br	9894 <close+0x74>
    9890:	0005883a 	mov	r2,zero
    9894:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    9898:	e13fff17 	ldw	r4,-4(fp)
    989c:	000a1b00 	call	a1b0 <alt_release_fd>
    if (rval < 0)
    98a0:	e0bffe17 	ldw	r2,-8(fp)
    98a4:	1000060e 	bge	r2,zero,98c0 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    98a8:	00097d00 	call	97d0 <alt_get_errno>
    98ac:	e0fffe17 	ldw	r3,-8(fp)
    98b0:	00c7c83a 	sub	r3,zero,r3
    98b4:	10c00015 	stw	r3,0(r2)
      return -1;
    98b8:	00bfffc4 	movi	r2,-1
    98bc:	00000606 	br	98d8 <close+0xb8>
    }
    return 0;
    98c0:	0005883a 	mov	r2,zero
    98c4:	00000406 	br	98d8 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    98c8:	00097d00 	call	97d0 <alt_get_errno>
    98cc:	00c01444 	movi	r3,81
    98d0:	10c00015 	stw	r3,0(r2)
    return -1;
    98d4:	00bfffc4 	movi	r2,-1
  }
}
    98d8:	e037883a 	mov	sp,fp
    98dc:	dfc00117 	ldw	ra,4(sp)
    98e0:	df000017 	ldw	fp,0(sp)
    98e4:	dec00204 	addi	sp,sp,8
    98e8:	f800283a 	ret

000098ec <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    98ec:	deffff04 	addi	sp,sp,-4
    98f0:	df000015 	stw	fp,0(sp)
    98f4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    98f8:	e037883a 	mov	sp,fp
    98fc:	df000017 	ldw	fp,0(sp)
    9900:	dec00104 	addi	sp,sp,4
    9904:	f800283a 	ret

00009908 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    9908:	defffc04 	addi	sp,sp,-16
    990c:	df000315 	stw	fp,12(sp)
    9910:	df000304 	addi	fp,sp,12
    9914:	e13ffd15 	stw	r4,-12(fp)
    9918:	e17ffe15 	stw	r5,-8(fp)
    991c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    9920:	e0bfff17 	ldw	r2,-4(fp)
}
    9924:	e037883a 	mov	sp,fp
    9928:	df000017 	ldw	fp,0(sp)
    992c:	dec00104 	addi	sp,sp,4
    9930:	f800283a 	ret

00009934 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9934:	defffe04 	addi	sp,sp,-8
    9938:	dfc00115 	stw	ra,4(sp)
    993c:	df000015 	stw	fp,0(sp)
    9940:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9944:	00800074 	movhi	r2,1
    9948:	10b09e04 	addi	r2,r2,-15752
    994c:	10800017 	ldw	r2,0(r2)
    9950:	10000526 	beq	r2,zero,9968 <alt_get_errno+0x34>
    9954:	00800074 	movhi	r2,1
    9958:	10b09e04 	addi	r2,r2,-15752
    995c:	10800017 	ldw	r2,0(r2)
    9960:	103ee83a 	callr	r2
    9964:	00000206 	br	9970 <alt_get_errno+0x3c>
    9968:	00800074 	movhi	r2,1
    996c:	10b63704 	addi	r2,r2,-10020
}
    9970:	e037883a 	mov	sp,fp
    9974:	dfc00117 	ldw	ra,4(sp)
    9978:	df000017 	ldw	fp,0(sp)
    997c:	dec00204 	addi	sp,sp,8
    9980:	f800283a 	ret

00009984 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    9984:	defffa04 	addi	sp,sp,-24
    9988:	dfc00515 	stw	ra,20(sp)
    998c:	df000415 	stw	fp,16(sp)
    9990:	df000404 	addi	fp,sp,16
    9994:	e13ffe15 	stw	r4,-8(fp)
    9998:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    999c:	e0bffe17 	ldw	r2,-8(fp)
    99a0:	10000326 	beq	r2,zero,99b0 <alt_dev_llist_insert+0x2c>
    99a4:	e0bffe17 	ldw	r2,-8(fp)
    99a8:	10800217 	ldw	r2,8(r2)
    99ac:	1000051e 	bne	r2,zero,99c4 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
    99b0:	00099340 	call	9934 <alt_get_errno>
    99b4:	00c00584 	movi	r3,22
    99b8:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    99bc:	00bffa84 	movi	r2,-22
    99c0:	00001306 	br	9a10 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    99c4:	e0bffe17 	ldw	r2,-8(fp)
    99c8:	e0ffff17 	ldw	r3,-4(fp)
    99cc:	e0fffc15 	stw	r3,-16(fp)
    99d0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    99d4:	e0bffd17 	ldw	r2,-12(fp)
    99d8:	e0fffc17 	ldw	r3,-16(fp)
    99dc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    99e0:	e0bffc17 	ldw	r2,-16(fp)
    99e4:	10c00017 	ldw	r3,0(r2)
    99e8:	e0bffd17 	ldw	r2,-12(fp)
    99ec:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    99f0:	e0bffc17 	ldw	r2,-16(fp)
    99f4:	10800017 	ldw	r2,0(r2)
    99f8:	e0fffd17 	ldw	r3,-12(fp)
    99fc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    9a00:	e0bffc17 	ldw	r2,-16(fp)
    9a04:	e0fffd17 	ldw	r3,-12(fp)
    9a08:	10c00015 	stw	r3,0(r2)

  return 0;  
    9a0c:	0005883a 	mov	r2,zero
}
    9a10:	e037883a 	mov	sp,fp
    9a14:	dfc00117 	ldw	ra,4(sp)
    9a18:	df000017 	ldw	fp,0(sp)
    9a1c:	dec00204 	addi	sp,sp,8
    9a20:	f800283a 	ret

00009a24 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    9a24:	defffd04 	addi	sp,sp,-12
    9a28:	dfc00215 	stw	ra,8(sp)
    9a2c:	df000115 	stw	fp,4(sp)
    9a30:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    9a34:	00800074 	movhi	r2,1
    9a38:	10ab0a04 	addi	r2,r2,-21464
    9a3c:	e0bfff15 	stw	r2,-4(fp)
    9a40:	00000606 	br	9a5c <_do_ctors+0x38>
        (*ctor) (); 
    9a44:	e0bfff17 	ldw	r2,-4(fp)
    9a48:	10800017 	ldw	r2,0(r2)
    9a4c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    9a50:	e0bfff17 	ldw	r2,-4(fp)
    9a54:	10bfff04 	addi	r2,r2,-4
    9a58:	e0bfff15 	stw	r2,-4(fp)
    9a5c:	e0ffff17 	ldw	r3,-4(fp)
    9a60:	00800074 	movhi	r2,1
    9a64:	10ab0b04 	addi	r2,r2,-21460
    9a68:	18bff62e 	bgeu	r3,r2,9a44 <_do_ctors+0x20>
        (*ctor) (); 
}
    9a6c:	e037883a 	mov	sp,fp
    9a70:	dfc00117 	ldw	ra,4(sp)
    9a74:	df000017 	ldw	fp,0(sp)
    9a78:	dec00204 	addi	sp,sp,8
    9a7c:	f800283a 	ret

00009a80 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    9a80:	defffd04 	addi	sp,sp,-12
    9a84:	dfc00215 	stw	ra,8(sp)
    9a88:	df000115 	stw	fp,4(sp)
    9a8c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    9a90:	00800074 	movhi	r2,1
    9a94:	10ab0a04 	addi	r2,r2,-21464
    9a98:	e0bfff15 	stw	r2,-4(fp)
    9a9c:	00000606 	br	9ab8 <_do_dtors+0x38>
        (*dtor) (); 
    9aa0:	e0bfff17 	ldw	r2,-4(fp)
    9aa4:	10800017 	ldw	r2,0(r2)
    9aa8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    9aac:	e0bfff17 	ldw	r2,-4(fp)
    9ab0:	10bfff04 	addi	r2,r2,-4
    9ab4:	e0bfff15 	stw	r2,-4(fp)
    9ab8:	e0ffff17 	ldw	r3,-4(fp)
    9abc:	00800074 	movhi	r2,1
    9ac0:	10ab0b04 	addi	r2,r2,-21460
    9ac4:	18bff62e 	bgeu	r3,r2,9aa0 <_do_dtors+0x20>
        (*dtor) (); 
}
    9ac8:	e037883a 	mov	sp,fp
    9acc:	dfc00117 	ldw	ra,4(sp)
    9ad0:	df000017 	ldw	fp,0(sp)
    9ad4:	dec00204 	addi	sp,sp,8
    9ad8:	f800283a 	ret

00009adc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    9adc:	deffff04 	addi	sp,sp,-4
    9ae0:	df000015 	stw	fp,0(sp)
    9ae4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    9ae8:	e037883a 	mov	sp,fp
    9aec:	df000017 	ldw	fp,0(sp)
    9af0:	dec00104 	addi	sp,sp,4
    9af4:	f800283a 	ret

00009af8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    9af8:	defff904 	addi	sp,sp,-28
    9afc:	dfc00615 	stw	ra,24(sp)
    9b00:	df000515 	stw	fp,20(sp)
    9b04:	df000504 	addi	fp,sp,20
    9b08:	e13ffc15 	stw	r4,-16(fp)
    9b0c:	e17ffd15 	stw	r5,-12(fp)
    9b10:	e1bffe15 	stw	r6,-8(fp)
    9b14:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    9b18:	e0800217 	ldw	r2,8(fp)
    9b1c:	d8800015 	stw	r2,0(sp)
    9b20:	e13ffc17 	ldw	r4,-16(fp)
    9b24:	e17ffd17 	ldw	r5,-12(fp)
    9b28:	e1bffe17 	ldw	r6,-8(fp)
    9b2c:	e1ffff17 	ldw	r7,-4(fp)
    9b30:	0009cd00 	call	9cd0 <alt_iic_isr_register>
}  
    9b34:	e037883a 	mov	sp,fp
    9b38:	dfc00117 	ldw	ra,4(sp)
    9b3c:	df000017 	ldw	fp,0(sp)
    9b40:	dec00204 	addi	sp,sp,8
    9b44:	f800283a 	ret

00009b48 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    9b48:	defff904 	addi	sp,sp,-28
    9b4c:	df000615 	stw	fp,24(sp)
    9b50:	df000604 	addi	fp,sp,24
    9b54:	e13ffe15 	stw	r4,-8(fp)
    9b58:	e17fff15 	stw	r5,-4(fp)
    9b5c:	e0bfff17 	ldw	r2,-4(fp)
    9b60:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9b64:	0005303a 	rdctl	r2,status
    9b68:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9b6c:	e0fffb17 	ldw	r3,-20(fp)
    9b70:	00bfff84 	movi	r2,-2
    9b74:	1884703a 	and	r2,r3,r2
    9b78:	1001703a 	wrctl	status,r2
  
  return context;
    9b7c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    9b80:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    9b84:	e0bffa17 	ldw	r2,-24(fp)
    9b88:	00c00044 	movi	r3,1
    9b8c:	1884983a 	sll	r2,r3,r2
    9b90:	1007883a 	mov	r3,r2
    9b94:	00800074 	movhi	r2,1
    9b98:	10b63404 	addi	r2,r2,-10032
    9b9c:	10800017 	ldw	r2,0(r2)
    9ba0:	1886b03a 	or	r3,r3,r2
    9ba4:	00800074 	movhi	r2,1
    9ba8:	10b63404 	addi	r2,r2,-10032
    9bac:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    9bb0:	00800074 	movhi	r2,1
    9bb4:	10b63404 	addi	r2,r2,-10032
    9bb8:	10800017 	ldw	r2,0(r2)
    9bbc:	100170fa 	wrctl	ienable,r2
    9bc0:	e0bffc17 	ldw	r2,-16(fp)
    9bc4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9bc8:	e0bffd17 	ldw	r2,-12(fp)
    9bcc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    9bd0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    9bd4:	e037883a 	mov	sp,fp
    9bd8:	df000017 	ldw	fp,0(sp)
    9bdc:	dec00104 	addi	sp,sp,4
    9be0:	f800283a 	ret

00009be4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    9be4:	defff904 	addi	sp,sp,-28
    9be8:	df000615 	stw	fp,24(sp)
    9bec:	df000604 	addi	fp,sp,24
    9bf0:	e13ffe15 	stw	r4,-8(fp)
    9bf4:	e17fff15 	stw	r5,-4(fp)
    9bf8:	e0bfff17 	ldw	r2,-4(fp)
    9bfc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9c00:	0005303a 	rdctl	r2,status
    9c04:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9c08:	e0fffb17 	ldw	r3,-20(fp)
    9c0c:	00bfff84 	movi	r2,-2
    9c10:	1884703a 	and	r2,r3,r2
    9c14:	1001703a 	wrctl	status,r2
  
  return context;
    9c18:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    9c1c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    9c20:	e0bffa17 	ldw	r2,-24(fp)
    9c24:	00c00044 	movi	r3,1
    9c28:	1884983a 	sll	r2,r3,r2
    9c2c:	0084303a 	nor	r2,zero,r2
    9c30:	1007883a 	mov	r3,r2
    9c34:	00800074 	movhi	r2,1
    9c38:	10b63404 	addi	r2,r2,-10032
    9c3c:	10800017 	ldw	r2,0(r2)
    9c40:	1886703a 	and	r3,r3,r2
    9c44:	00800074 	movhi	r2,1
    9c48:	10b63404 	addi	r2,r2,-10032
    9c4c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    9c50:	00800074 	movhi	r2,1
    9c54:	10b63404 	addi	r2,r2,-10032
    9c58:	10800017 	ldw	r2,0(r2)
    9c5c:	100170fa 	wrctl	ienable,r2
    9c60:	e0bffc17 	ldw	r2,-16(fp)
    9c64:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9c68:	e0bffd17 	ldw	r2,-12(fp)
    9c6c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    9c70:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    9c74:	e037883a 	mov	sp,fp
    9c78:	df000017 	ldw	fp,0(sp)
    9c7c:	dec00104 	addi	sp,sp,4
    9c80:	f800283a 	ret

00009c84 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    9c84:	defffc04 	addi	sp,sp,-16
    9c88:	df000315 	stw	fp,12(sp)
    9c8c:	df000304 	addi	fp,sp,12
    9c90:	e13ffe15 	stw	r4,-8(fp)
    9c94:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    9c98:	000530fa 	rdctl	r2,ienable
    9c9c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    9ca0:	e0bfff17 	ldw	r2,-4(fp)
    9ca4:	00c00044 	movi	r3,1
    9ca8:	1884983a 	sll	r2,r3,r2
    9cac:	1007883a 	mov	r3,r2
    9cb0:	e0bffd17 	ldw	r2,-12(fp)
    9cb4:	1884703a 	and	r2,r3,r2
    9cb8:	1004c03a 	cmpne	r2,r2,zero
    9cbc:	10803fcc 	andi	r2,r2,255
}
    9cc0:	e037883a 	mov	sp,fp
    9cc4:	df000017 	ldw	fp,0(sp)
    9cc8:	dec00104 	addi	sp,sp,4
    9ccc:	f800283a 	ret

00009cd0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    9cd0:	defff504 	addi	sp,sp,-44
    9cd4:	dfc00a15 	stw	ra,40(sp)
    9cd8:	df000915 	stw	fp,36(sp)
    9cdc:	df000904 	addi	fp,sp,36
    9ce0:	e13ffc15 	stw	r4,-16(fp)
    9ce4:	e17ffd15 	stw	r5,-12(fp)
    9ce8:	e1bffe15 	stw	r6,-8(fp)
    9cec:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    9cf0:	00bffa84 	movi	r2,-22
    9cf4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    9cf8:	e0bffd17 	ldw	r2,-12(fp)
    9cfc:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    9d00:	e0bff817 	ldw	r2,-32(fp)
    9d04:	10800808 	cmpgei	r2,r2,32
    9d08:	1000271e 	bne	r2,zero,9da8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9d0c:	0005303a 	rdctl	r2,status
    9d10:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9d14:	e0fffa17 	ldw	r3,-24(fp)
    9d18:	00bfff84 	movi	r2,-2
    9d1c:	1884703a 	and	r2,r3,r2
    9d20:	1001703a 	wrctl	status,r2
  
  return context;
    9d24:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    9d28:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
    9d2c:	00c00074 	movhi	r3,1
    9d30:	18f63804 	addi	r3,r3,-10016
    9d34:	e0bff817 	ldw	r2,-32(fp)
    9d38:	100490fa 	slli	r2,r2,3
    9d3c:	1885883a 	add	r2,r3,r2
    9d40:	e0fffe17 	ldw	r3,-8(fp)
    9d44:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    9d48:	00c00074 	movhi	r3,1
    9d4c:	18f63804 	addi	r3,r3,-10016
    9d50:	e0bff817 	ldw	r2,-32(fp)
    9d54:	100490fa 	slli	r2,r2,3
    9d58:	1885883a 	add	r2,r3,r2
    9d5c:	10800104 	addi	r2,r2,4
    9d60:	e0ffff17 	ldw	r3,-4(fp)
    9d64:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    9d68:	e0bffe17 	ldw	r2,-8(fp)
    9d6c:	10000526 	beq	r2,zero,9d84 <alt_iic_isr_register+0xb4>
    9d70:	e0bff817 	ldw	r2,-32(fp)
    9d74:	e13ffc17 	ldw	r4,-16(fp)
    9d78:	100b883a 	mov	r5,r2
    9d7c:	0009b480 	call	9b48 <alt_ic_irq_enable>
    9d80:	00000406 	br	9d94 <alt_iic_isr_register+0xc4>
    9d84:	e0bff817 	ldw	r2,-32(fp)
    9d88:	e13ffc17 	ldw	r4,-16(fp)
    9d8c:	100b883a 	mov	r5,r2
    9d90:	0009be40 	call	9be4 <alt_ic_irq_disable>
    9d94:	e0bff715 	stw	r2,-36(fp)
    9d98:	e0bff917 	ldw	r2,-28(fp)
    9d9c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9da0:	e0bffb17 	ldw	r2,-20(fp)
    9da4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    9da8:	e0bff717 	ldw	r2,-36(fp)
}
    9dac:	e037883a 	mov	sp,fp
    9db0:	dfc00117 	ldw	ra,4(sp)
    9db4:	df000017 	ldw	fp,0(sp)
    9db8:	dec00204 	addi	sp,sp,8
    9dbc:	f800283a 	ret

00009dc0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    9dc0:	defff804 	addi	sp,sp,-32
    9dc4:	dfc00715 	stw	ra,28(sp)
    9dc8:	df000615 	stw	fp,24(sp)
    9dcc:	dc000515 	stw	r16,20(sp)
    9dd0:	df000504 	addi	fp,sp,20
    9dd4:	e13ffc15 	stw	r4,-16(fp)
    9dd8:	e17ffd15 	stw	r5,-12(fp)
    9ddc:	e1bffe15 	stw	r6,-8(fp)
    9de0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    9de4:	e13ffd17 	ldw	r4,-12(fp)
    9de8:	e17ffe17 	ldw	r5,-8(fp)
    9dec:	e1bfff17 	ldw	r6,-4(fp)
    9df0:	000a0580 	call	a058 <open>
    9df4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    9df8:	e0bffb17 	ldw	r2,-20(fp)
    9dfc:	10002216 	blt	r2,zero,9e88 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    9e00:	04000074 	movhi	r16,1
    9e04:	842f3904 	addi	r16,r16,-17180
    9e08:	e0bffb17 	ldw	r2,-20(fp)
    9e0c:	1009883a 	mov	r4,r2
    9e10:	01400304 	movi	r5,12
    9e14:	000abc80 	call	abc8 <__mulsi3>
    9e18:	8085883a 	add	r2,r16,r2
    9e1c:	10c00017 	ldw	r3,0(r2)
    9e20:	e0bffc17 	ldw	r2,-16(fp)
    9e24:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    9e28:	04000074 	movhi	r16,1
    9e2c:	842f3904 	addi	r16,r16,-17180
    9e30:	e0bffb17 	ldw	r2,-20(fp)
    9e34:	1009883a 	mov	r4,r2
    9e38:	01400304 	movi	r5,12
    9e3c:	000abc80 	call	abc8 <__mulsi3>
    9e40:	8085883a 	add	r2,r16,r2
    9e44:	10800104 	addi	r2,r2,4
    9e48:	10c00017 	ldw	r3,0(r2)
    9e4c:	e0bffc17 	ldw	r2,-16(fp)
    9e50:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    9e54:	04000074 	movhi	r16,1
    9e58:	842f3904 	addi	r16,r16,-17180
    9e5c:	e0bffb17 	ldw	r2,-20(fp)
    9e60:	1009883a 	mov	r4,r2
    9e64:	01400304 	movi	r5,12
    9e68:	000abc80 	call	abc8 <__mulsi3>
    9e6c:	8085883a 	add	r2,r16,r2
    9e70:	10800204 	addi	r2,r2,8
    9e74:	10c00017 	ldw	r3,0(r2)
    9e78:	e0bffc17 	ldw	r2,-16(fp)
    9e7c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    9e80:	e13ffb17 	ldw	r4,-20(fp)
    9e84:	000a1b00 	call	a1b0 <alt_release_fd>
  }
} 
    9e88:	e037883a 	mov	sp,fp
    9e8c:	dfc00217 	ldw	ra,8(sp)
    9e90:	df000117 	ldw	fp,4(sp)
    9e94:	dc000017 	ldw	r16,0(sp)
    9e98:	dec00304 	addi	sp,sp,12
    9e9c:	f800283a 	ret

00009ea0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    9ea0:	defffb04 	addi	sp,sp,-20
    9ea4:	dfc00415 	stw	ra,16(sp)
    9ea8:	df000315 	stw	fp,12(sp)
    9eac:	df000304 	addi	fp,sp,12
    9eb0:	e13ffd15 	stw	r4,-12(fp)
    9eb4:	e17ffe15 	stw	r5,-8(fp)
    9eb8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    9ebc:	01000074 	movhi	r4,1
    9ec0:	212f3c04 	addi	r4,r4,-17168
    9ec4:	e17ffd17 	ldw	r5,-12(fp)
    9ec8:	01800044 	movi	r6,1
    9ecc:	01c07fc4 	movi	r7,511
    9ed0:	0009dc00 	call	9dc0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    9ed4:	01000074 	movhi	r4,1
    9ed8:	212f3904 	addi	r4,r4,-17180
    9edc:	e17ffe17 	ldw	r5,-8(fp)
    9ee0:	000d883a 	mov	r6,zero
    9ee4:	01c07fc4 	movi	r7,511
    9ee8:	0009dc00 	call	9dc0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    9eec:	01000074 	movhi	r4,1
    9ef0:	212f3f04 	addi	r4,r4,-17156
    9ef4:	e17fff17 	ldw	r5,-4(fp)
    9ef8:	01800044 	movi	r6,1
    9efc:	01c07fc4 	movi	r7,511
    9f00:	0009dc00 	call	9dc0 <alt_open_fd>
}  
    9f04:	e037883a 	mov	sp,fp
    9f08:	dfc00117 	ldw	ra,4(sp)
    9f0c:	df000017 	ldw	fp,0(sp)
    9f10:	dec00204 	addi	sp,sp,8
    9f14:	f800283a 	ret

00009f18 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9f18:	defffe04 	addi	sp,sp,-8
    9f1c:	dfc00115 	stw	ra,4(sp)
    9f20:	df000015 	stw	fp,0(sp)
    9f24:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9f28:	00800074 	movhi	r2,1
    9f2c:	10b09e04 	addi	r2,r2,-15752
    9f30:	10800017 	ldw	r2,0(r2)
    9f34:	10000526 	beq	r2,zero,9f4c <alt_get_errno+0x34>
    9f38:	00800074 	movhi	r2,1
    9f3c:	10b09e04 	addi	r2,r2,-15752
    9f40:	10800017 	ldw	r2,0(r2)
    9f44:	103ee83a 	callr	r2
    9f48:	00000206 	br	9f54 <alt_get_errno+0x3c>
    9f4c:	00800074 	movhi	r2,1
    9f50:	10b63704 	addi	r2,r2,-10020
}
    9f54:	e037883a 	mov	sp,fp
    9f58:	dfc00117 	ldw	ra,4(sp)
    9f5c:	df000017 	ldw	fp,0(sp)
    9f60:	dec00204 	addi	sp,sp,8
    9f64:	f800283a 	ret

00009f68 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    9f68:	defffb04 	addi	sp,sp,-20
    9f6c:	dfc00415 	stw	ra,16(sp)
    9f70:	df000315 	stw	fp,12(sp)
    9f74:	dc000215 	stw	r16,8(sp)
    9f78:	df000204 	addi	fp,sp,8
    9f7c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    9f80:	e0bfff17 	ldw	r2,-4(fp)
    9f84:	10800217 	ldw	r2,8(r2)
    9f88:	10d00034 	orhi	r3,r2,16384
    9f8c:	e0bfff17 	ldw	r2,-4(fp)
    9f90:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    9f94:	e03ffe15 	stw	zero,-8(fp)
    9f98:	00002206 	br	a024 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    9f9c:	04000074 	movhi	r16,1
    9fa0:	842f3904 	addi	r16,r16,-17180
    9fa4:	e0bffe17 	ldw	r2,-8(fp)
    9fa8:	1009883a 	mov	r4,r2
    9fac:	01400304 	movi	r5,12
    9fb0:	000abc80 	call	abc8 <__mulsi3>
    9fb4:	8085883a 	add	r2,r16,r2
    9fb8:	10c00017 	ldw	r3,0(r2)
    9fbc:	e0bfff17 	ldw	r2,-4(fp)
    9fc0:	10800017 	ldw	r2,0(r2)
    9fc4:	1880141e 	bne	r3,r2,a018 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    9fc8:	04000074 	movhi	r16,1
    9fcc:	842f3904 	addi	r16,r16,-17180
    9fd0:	e0bffe17 	ldw	r2,-8(fp)
    9fd4:	1009883a 	mov	r4,r2
    9fd8:	01400304 	movi	r5,12
    9fdc:	000abc80 	call	abc8 <__mulsi3>
    9fe0:	8085883a 	add	r2,r16,r2
    9fe4:	10800204 	addi	r2,r2,8
    9fe8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    9fec:	10000a0e 	bge	r2,zero,a018 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    9ff0:	e13ffe17 	ldw	r4,-8(fp)
    9ff4:	01400304 	movi	r5,12
    9ff8:	000abc80 	call	abc8 <__mulsi3>
    9ffc:	00c00074 	movhi	r3,1
    a000:	18ef3904 	addi	r3,r3,-17180
    a004:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    a008:	e0bfff17 	ldw	r2,-4(fp)
    a00c:	18800226 	beq	r3,r2,a018 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    a010:	00bffcc4 	movi	r2,-13
    a014:	00000a06 	br	a040 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    a018:	e0bffe17 	ldw	r2,-8(fp)
    a01c:	10800044 	addi	r2,r2,1
    a020:	e0bffe15 	stw	r2,-8(fp)
    a024:	00800074 	movhi	r2,1
    a028:	10b09d04 	addi	r2,r2,-15756
    a02c:	10800017 	ldw	r2,0(r2)
    a030:	1007883a 	mov	r3,r2
    a034:	e0bffe17 	ldw	r2,-8(fp)
    a038:	18bfd82e 	bgeu	r3,r2,9f9c <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    a03c:	0005883a 	mov	r2,zero
}
    a040:	e037883a 	mov	sp,fp
    a044:	dfc00217 	ldw	ra,8(sp)
    a048:	df000117 	ldw	fp,4(sp)
    a04c:	dc000017 	ldw	r16,0(sp)
    a050:	dec00304 	addi	sp,sp,12
    a054:	f800283a 	ret

0000a058 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    a058:	defff604 	addi	sp,sp,-40
    a05c:	dfc00915 	stw	ra,36(sp)
    a060:	df000815 	stw	fp,32(sp)
    a064:	df000804 	addi	fp,sp,32
    a068:	e13ffd15 	stw	r4,-12(fp)
    a06c:	e17ffe15 	stw	r5,-8(fp)
    a070:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    a074:	00bfffc4 	movi	r2,-1
    a078:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    a07c:	00bffb44 	movi	r2,-19
    a080:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    a084:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    a088:	e13ffd17 	ldw	r4,-12(fp)
    a08c:	01400074 	movhi	r5,1
    a090:	29709b04 	addi	r5,r5,-15764
    a094:	000a3ec0 	call	a3ec <alt_find_dev>
    a098:	e0bff815 	stw	r2,-32(fp)
    a09c:	e0bff817 	ldw	r2,-32(fp)
    a0a0:	1000051e 	bne	r2,zero,a0b8 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    a0a4:	e13ffd17 	ldw	r4,-12(fp)
    a0a8:	000a47c0 	call	a47c <alt_find_file>
    a0ac:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    a0b0:	00800044 	movi	r2,1
    a0b4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    a0b8:	e0bff817 	ldw	r2,-32(fp)
    a0bc:	10002a26 	beq	r2,zero,a168 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    a0c0:	e13ff817 	ldw	r4,-32(fp)
    a0c4:	000a5900 	call	a590 <alt_get_fd>
    a0c8:	e0bff915 	stw	r2,-28(fp)
    a0cc:	e0bff917 	ldw	r2,-28(fp)
    a0d0:	1000030e 	bge	r2,zero,a0e0 <open+0x88>
    {
      status = index;
    a0d4:	e0bff917 	ldw	r2,-28(fp)
    a0d8:	e0bffa15 	stw	r2,-24(fp)
    a0dc:	00002406 	br	a170 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    a0e0:	e13ff917 	ldw	r4,-28(fp)
    a0e4:	01400304 	movi	r5,12
    a0e8:	000abc80 	call	abc8 <__mulsi3>
    a0ec:	00c00074 	movhi	r3,1
    a0f0:	18ef3904 	addi	r3,r3,-17180
    a0f4:	10c5883a 	add	r2,r2,r3
    a0f8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    a0fc:	e0fffe17 	ldw	r3,-8(fp)
    a100:	00900034 	movhi	r2,16384
    a104:	10bfffc4 	addi	r2,r2,-1
    a108:	1886703a 	and	r3,r3,r2
    a10c:	e0bffc17 	ldw	r2,-16(fp)
    a110:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    a114:	e0bffb17 	ldw	r2,-20(fp)
    a118:	1000051e 	bne	r2,zero,a130 <open+0xd8>
    a11c:	e13ffc17 	ldw	r4,-16(fp)
    a120:	0009f680 	call	9f68 <alt_file_locked>
    a124:	e0bffa15 	stw	r2,-24(fp)
    a128:	e0bffa17 	ldw	r2,-24(fp)
    a12c:	10001016 	blt	r2,zero,a170 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    a130:	e0bff817 	ldw	r2,-32(fp)
    a134:	10800317 	ldw	r2,12(r2)
    a138:	10000826 	beq	r2,zero,a15c <open+0x104>
    a13c:	e0bff817 	ldw	r2,-32(fp)
    a140:	10800317 	ldw	r2,12(r2)
    a144:	e13ffc17 	ldw	r4,-16(fp)
    a148:	e17ffd17 	ldw	r5,-12(fp)
    a14c:	e1bffe17 	ldw	r6,-8(fp)
    a150:	e1ffff17 	ldw	r7,-4(fp)
    a154:	103ee83a 	callr	r2
    a158:	00000106 	br	a160 <open+0x108>
    a15c:	0005883a 	mov	r2,zero
    a160:	e0bffa15 	stw	r2,-24(fp)
    a164:	00000206 	br	a170 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    a168:	00bffb44 	movi	r2,-19
    a16c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    a170:	e0bffa17 	ldw	r2,-24(fp)
    a174:	1000080e 	bge	r2,zero,a198 <open+0x140>
  {
    alt_release_fd (index);  
    a178:	e13ff917 	ldw	r4,-28(fp)
    a17c:	000a1b00 	call	a1b0 <alt_release_fd>
    ALT_ERRNO = -status;
    a180:	0009f180 	call	9f18 <alt_get_errno>
    a184:	e0fffa17 	ldw	r3,-24(fp)
    a188:	00c7c83a 	sub	r3,zero,r3
    a18c:	10c00015 	stw	r3,0(r2)
    return -1;
    a190:	00bfffc4 	movi	r2,-1
    a194:	00000106 	br	a19c <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
    a198:	e0bff917 	ldw	r2,-28(fp)
}
    a19c:	e037883a 	mov	sp,fp
    a1a0:	dfc00117 	ldw	ra,4(sp)
    a1a4:	df000017 	ldw	fp,0(sp)
    a1a8:	dec00204 	addi	sp,sp,8
    a1ac:	f800283a 	ret

0000a1b0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    a1b0:	defffc04 	addi	sp,sp,-16
    a1b4:	dfc00315 	stw	ra,12(sp)
    a1b8:	df000215 	stw	fp,8(sp)
    a1bc:	dc000115 	stw	r16,4(sp)
    a1c0:	df000104 	addi	fp,sp,4
    a1c4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    a1c8:	e0bfff17 	ldw	r2,-4(fp)
    a1cc:	108000d0 	cmplti	r2,r2,3
    a1d0:	1000111e 	bne	r2,zero,a218 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    a1d4:	04000074 	movhi	r16,1
    a1d8:	842f3904 	addi	r16,r16,-17180
    a1dc:	e0bfff17 	ldw	r2,-4(fp)
    a1e0:	1009883a 	mov	r4,r2
    a1e4:	01400304 	movi	r5,12
    a1e8:	000abc80 	call	abc8 <__mulsi3>
    a1ec:	8085883a 	add	r2,r16,r2
    a1f0:	10800204 	addi	r2,r2,8
    a1f4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    a1f8:	04000074 	movhi	r16,1
    a1fc:	842f3904 	addi	r16,r16,-17180
    a200:	e0bfff17 	ldw	r2,-4(fp)
    a204:	1009883a 	mov	r4,r2
    a208:	01400304 	movi	r5,12
    a20c:	000abc80 	call	abc8 <__mulsi3>
    a210:	8085883a 	add	r2,r16,r2
    a214:	10000015 	stw	zero,0(r2)
  }
}
    a218:	e037883a 	mov	sp,fp
    a21c:	dfc00217 	ldw	ra,8(sp)
    a220:	df000117 	ldw	fp,4(sp)
    a224:	dc000017 	ldw	r16,0(sp)
    a228:	dec00304 	addi	sp,sp,12
    a22c:	f800283a 	ret

0000a230 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    a230:	defffa04 	addi	sp,sp,-24
    a234:	df000515 	stw	fp,20(sp)
    a238:	df000504 	addi	fp,sp,20
    a23c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a240:	0005303a 	rdctl	r2,status
    a244:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a248:	e0fffc17 	ldw	r3,-16(fp)
    a24c:	00bfff84 	movi	r2,-2
    a250:	1884703a 	and	r2,r3,r2
    a254:	1001703a 	wrctl	status,r2
  
  return context;
    a258:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    a25c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    a260:	e0bfff17 	ldw	r2,-4(fp)
    a264:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    a268:	e0bffd17 	ldw	r2,-12(fp)
    a26c:	10800017 	ldw	r2,0(r2)
    a270:	e0fffd17 	ldw	r3,-12(fp)
    a274:	18c00117 	ldw	r3,4(r3)
    a278:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    a27c:	e0bffd17 	ldw	r2,-12(fp)
    a280:	10800117 	ldw	r2,4(r2)
    a284:	e0fffd17 	ldw	r3,-12(fp)
    a288:	18c00017 	ldw	r3,0(r3)
    a28c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    a290:	e0bffd17 	ldw	r2,-12(fp)
    a294:	e0fffd17 	ldw	r3,-12(fp)
    a298:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    a29c:	e0bffd17 	ldw	r2,-12(fp)
    a2a0:	e0fffd17 	ldw	r3,-12(fp)
    a2a4:	10c00015 	stw	r3,0(r2)
    a2a8:	e0bffb17 	ldw	r2,-20(fp)
    a2ac:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a2b0:	e0bffe17 	ldw	r2,-8(fp)
    a2b4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    a2b8:	e037883a 	mov	sp,fp
    a2bc:	df000017 	ldw	fp,0(sp)
    a2c0:	dec00104 	addi	sp,sp,4
    a2c4:	f800283a 	ret

0000a2c8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    a2c8:	defffb04 	addi	sp,sp,-20
    a2cc:	dfc00415 	stw	ra,16(sp)
    a2d0:	df000315 	stw	fp,12(sp)
    a2d4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    a2d8:	d0a00717 	ldw	r2,-32740(gp)
    a2dc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    a2e0:	d0a59d17 	ldw	r2,-27020(gp)
    a2e4:	10800044 	addi	r2,r2,1
    a2e8:	d0a59d15 	stw	r2,-27020(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    a2ec:	00002e06 	br	a3a8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    a2f0:	e0bffd17 	ldw	r2,-12(fp)
    a2f4:	10800017 	ldw	r2,0(r2)
    a2f8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    a2fc:	e0bffd17 	ldw	r2,-12(fp)
    a300:	10800403 	ldbu	r2,16(r2)
    a304:	10803fcc 	andi	r2,r2,255
    a308:	10000426 	beq	r2,zero,a31c <alt_tick+0x54>
    a30c:	d0a59d17 	ldw	r2,-27020(gp)
    a310:	1000021e 	bne	r2,zero,a31c <alt_tick+0x54>
    {
      alarm->rollover = 0;
    a314:	e0bffd17 	ldw	r2,-12(fp)
    a318:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    a31c:	e0bffd17 	ldw	r2,-12(fp)
    a320:	10800217 	ldw	r2,8(r2)
    a324:	d0e59d17 	ldw	r3,-27020(gp)
    a328:	18801d36 	bltu	r3,r2,a3a0 <alt_tick+0xd8>
    a32c:	e0bffd17 	ldw	r2,-12(fp)
    a330:	10800403 	ldbu	r2,16(r2)
    a334:	10803fcc 	andi	r2,r2,255
    a338:	1000191e 	bne	r2,zero,a3a0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    a33c:	e0bffd17 	ldw	r2,-12(fp)
    a340:	10c00317 	ldw	r3,12(r2)
    a344:	e0bffd17 	ldw	r2,-12(fp)
    a348:	10800517 	ldw	r2,20(r2)
    a34c:	1009883a 	mov	r4,r2
    a350:	183ee83a 	callr	r3
    a354:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    a358:	e0bfff17 	ldw	r2,-4(fp)
    a35c:	1000031e 	bne	r2,zero,a36c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    a360:	e13ffd17 	ldw	r4,-12(fp)
    a364:	000a2300 	call	a230 <alt_alarm_stop>
    a368:	00000d06 	br	a3a0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    a36c:	e0bffd17 	ldw	r2,-12(fp)
    a370:	10c00217 	ldw	r3,8(r2)
    a374:	e0bfff17 	ldw	r2,-4(fp)
    a378:	1887883a 	add	r3,r3,r2
    a37c:	e0bffd17 	ldw	r2,-12(fp)
    a380:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    a384:	e0bffd17 	ldw	r2,-12(fp)
    a388:	10c00217 	ldw	r3,8(r2)
    a38c:	d0a59d17 	ldw	r2,-27020(gp)
    a390:	1880032e 	bgeu	r3,r2,a3a0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    a394:	e0bffd17 	ldw	r2,-12(fp)
    a398:	00c00044 	movi	r3,1
    a39c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    a3a0:	e0bffe17 	ldw	r2,-8(fp)
    a3a4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    a3a8:	e0fffd17 	ldw	r3,-12(fp)
    a3ac:	d0a00704 	addi	r2,gp,-32740
    a3b0:	18bfcf1e 	bne	r3,r2,a2f0 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    a3b4:	0001883a 	nop
}
    a3b8:	e037883a 	mov	sp,fp
    a3bc:	dfc00117 	ldw	ra,4(sp)
    a3c0:	df000017 	ldw	fp,0(sp)
    a3c4:	dec00204 	addi	sp,sp,8
    a3c8:	f800283a 	ret

0000a3cc <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    a3cc:	deffff04 	addi	sp,sp,-4
    a3d0:	df000015 	stw	fp,0(sp)
    a3d4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    a3d8:	000170fa 	wrctl	ienable,zero
}
    a3dc:	e037883a 	mov	sp,fp
    a3e0:	df000017 	ldw	fp,0(sp)
    a3e4:	dec00104 	addi	sp,sp,4
    a3e8:	f800283a 	ret

0000a3ec <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    a3ec:	defffa04 	addi	sp,sp,-24
    a3f0:	dfc00515 	stw	ra,20(sp)
    a3f4:	df000415 	stw	fp,16(sp)
    a3f8:	df000404 	addi	fp,sp,16
    a3fc:	e13ffe15 	stw	r4,-8(fp)
    a400:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    a404:	e0bfff17 	ldw	r2,-4(fp)
    a408:	10800017 	ldw	r2,0(r2)
    a40c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    a410:	e13ffe17 	ldw	r4,-8(fp)
    a414:	000a86c0 	call	a86c <strlen>
    a418:	10800044 	addi	r2,r2,1
    a41c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    a420:	00000d06 	br	a458 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    a424:	e0bffc17 	ldw	r2,-16(fp)
    a428:	10c00217 	ldw	r3,8(r2)
    a42c:	e0bffd17 	ldw	r2,-12(fp)
    a430:	1809883a 	mov	r4,r3
    a434:	e17ffe17 	ldw	r5,-8(fp)
    a438:	100d883a 	mov	r6,r2
    a43c:	000a6b00 	call	a6b0 <memcmp>
    a440:	1000021e 	bne	r2,zero,a44c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    a444:	e0bffc17 	ldw	r2,-16(fp)
    a448:	00000706 	br	a468 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    a44c:	e0bffc17 	ldw	r2,-16(fp)
    a450:	10800017 	ldw	r2,0(r2)
    a454:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    a458:	e0fffc17 	ldw	r3,-16(fp)
    a45c:	e0bfff17 	ldw	r2,-4(fp)
    a460:	18bff01e 	bne	r3,r2,a424 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    a464:	0005883a 	mov	r2,zero
}
    a468:	e037883a 	mov	sp,fp
    a46c:	dfc00117 	ldw	ra,4(sp)
    a470:	df000017 	ldw	fp,0(sp)
    a474:	dec00204 	addi	sp,sp,8
    a478:	f800283a 	ret

0000a47c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    a47c:	defffb04 	addi	sp,sp,-20
    a480:	dfc00415 	stw	ra,16(sp)
    a484:	df000315 	stw	fp,12(sp)
    a488:	df000304 	addi	fp,sp,12
    a48c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    a490:	00800074 	movhi	r2,1
    a494:	10b09904 	addi	r2,r2,-15772
    a498:	10800017 	ldw	r2,0(r2)
    a49c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    a4a0:	00003106 	br	a568 <alt_find_file+0xec>
  {
    len = strlen(next->name);
    a4a4:	e0bffd17 	ldw	r2,-12(fp)
    a4a8:	10800217 	ldw	r2,8(r2)
    a4ac:	1009883a 	mov	r4,r2
    a4b0:	000a86c0 	call	a86c <strlen>
    a4b4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    a4b8:	e0bffd17 	ldw	r2,-12(fp)
    a4bc:	10c00217 	ldw	r3,8(r2)
    a4c0:	e0bffe17 	ldw	r2,-8(fp)
    a4c4:	10bfffc4 	addi	r2,r2,-1
    a4c8:	1885883a 	add	r2,r3,r2
    a4cc:	10800003 	ldbu	r2,0(r2)
    a4d0:	10803fcc 	andi	r2,r2,255
    a4d4:	1080201c 	xori	r2,r2,128
    a4d8:	10bfe004 	addi	r2,r2,-128
    a4dc:	10800bd8 	cmpnei	r2,r2,47
    a4e0:	1000031e 	bne	r2,zero,a4f0 <alt_find_file+0x74>
    {
      len -= 1;
    a4e4:	e0bffe17 	ldw	r2,-8(fp)
    a4e8:	10bfffc4 	addi	r2,r2,-1
    a4ec:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    a4f0:	e0bffe17 	ldw	r2,-8(fp)
    a4f4:	e0ffff17 	ldw	r3,-4(fp)
    a4f8:	1885883a 	add	r2,r3,r2
    a4fc:	10800003 	ldbu	r2,0(r2)
    a500:	10803fcc 	andi	r2,r2,255
    a504:	1080201c 	xori	r2,r2,128
    a508:	10bfe004 	addi	r2,r2,-128
    a50c:	10800be0 	cmpeqi	r2,r2,47
    a510:	1000081e 	bne	r2,zero,a534 <alt_find_file+0xb8>
    a514:	e0bffe17 	ldw	r2,-8(fp)
    a518:	e0ffff17 	ldw	r3,-4(fp)
    a51c:	1885883a 	add	r2,r3,r2
    a520:	10800003 	ldbu	r2,0(r2)
    a524:	10803fcc 	andi	r2,r2,255
    a528:	1080201c 	xori	r2,r2,128
    a52c:	10bfe004 	addi	r2,r2,-128
    a530:	10000a1e 	bne	r2,zero,a55c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    a534:	e0bffd17 	ldw	r2,-12(fp)
    a538:	10c00217 	ldw	r3,8(r2)
    a53c:	e0bffe17 	ldw	r2,-8(fp)
    a540:	1809883a 	mov	r4,r3
    a544:	e17fff17 	ldw	r5,-4(fp)
    a548:	100d883a 	mov	r6,r2
    a54c:	000a6b00 	call	a6b0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    a550:	1000021e 	bne	r2,zero,a55c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    a554:	e0bffd17 	ldw	r2,-12(fp)
    a558:	00000806 	br	a57c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    a55c:	e0bffd17 	ldw	r2,-12(fp)
    a560:	10800017 	ldw	r2,0(r2)
    a564:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    a568:	e0fffd17 	ldw	r3,-12(fp)
    a56c:	00800074 	movhi	r2,1
    a570:	10b09904 	addi	r2,r2,-15772
    a574:	18bfcb1e 	bne	r3,r2,a4a4 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    a578:	0005883a 	mov	r2,zero
}
    a57c:	e037883a 	mov	sp,fp
    a580:	dfc00117 	ldw	ra,4(sp)
    a584:	df000017 	ldw	fp,0(sp)
    a588:	dec00204 	addi	sp,sp,8
    a58c:	f800283a 	ret

0000a590 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    a590:	defffa04 	addi	sp,sp,-24
    a594:	dfc00515 	stw	ra,20(sp)
    a598:	df000415 	stw	fp,16(sp)
    a59c:	dc000315 	stw	r16,12(sp)
    a5a0:	df000304 	addi	fp,sp,12
    a5a4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    a5a8:	00bffa04 	movi	r2,-24
    a5ac:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    a5b0:	e03ffd15 	stw	zero,-12(fp)
    a5b4:	00002106 	br	a63c <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
    a5b8:	04000074 	movhi	r16,1
    a5bc:	842f3904 	addi	r16,r16,-17180
    a5c0:	e0bffd17 	ldw	r2,-12(fp)
    a5c4:	1009883a 	mov	r4,r2
    a5c8:	01400304 	movi	r5,12
    a5cc:	000abc80 	call	abc8 <__mulsi3>
    a5d0:	8085883a 	add	r2,r16,r2
    a5d4:	10800017 	ldw	r2,0(r2)
    a5d8:	1000151e 	bne	r2,zero,a630 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
    a5dc:	04000074 	movhi	r16,1
    a5e0:	842f3904 	addi	r16,r16,-17180
    a5e4:	e0bffd17 	ldw	r2,-12(fp)
    a5e8:	1009883a 	mov	r4,r2
    a5ec:	01400304 	movi	r5,12
    a5f0:	000abc80 	call	abc8 <__mulsi3>
    a5f4:	8085883a 	add	r2,r16,r2
    a5f8:	e0ffff17 	ldw	r3,-4(fp)
    a5fc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    a600:	00800074 	movhi	r2,1
    a604:	10b09d04 	addi	r2,r2,-15756
    a608:	10c00017 	ldw	r3,0(r2)
    a60c:	e0bffd17 	ldw	r2,-12(fp)
    a610:	1880040e 	bge	r3,r2,a624 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
    a614:	00800074 	movhi	r2,1
    a618:	10b09d04 	addi	r2,r2,-15756
    a61c:	e0fffd17 	ldw	r3,-12(fp)
    a620:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    a624:	e0bffd17 	ldw	r2,-12(fp)
    a628:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    a62c:	00000606 	br	a648 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    a630:	e0bffd17 	ldw	r2,-12(fp)
    a634:	10800044 	addi	r2,r2,1
    a638:	e0bffd15 	stw	r2,-12(fp)
    a63c:	e0bffd17 	ldw	r2,-12(fp)
    a640:	10800810 	cmplti	r2,r2,32
    a644:	103fdc1e 	bne	r2,zero,a5b8 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    a648:	e0bffe17 	ldw	r2,-8(fp)
}
    a64c:	e037883a 	mov	sp,fp
    a650:	dfc00217 	ldw	ra,8(sp)
    a654:	df000117 	ldw	fp,4(sp)
    a658:	dc000017 	ldw	r16,0(sp)
    a65c:	dec00304 	addi	sp,sp,12
    a660:	f800283a 	ret

0000a664 <atexit>:
    a664:	200b883a 	mov	r5,r4
    a668:	000d883a 	mov	r6,zero
    a66c:	0009883a 	mov	r4,zero
    a670:	000f883a 	mov	r7,zero
    a674:	000a8f81 	jmpi	a8f8 <__register_exitproc>

0000a678 <exit>:
    a678:	defffe04 	addi	sp,sp,-8
    a67c:	000b883a 	mov	r5,zero
    a680:	dc000015 	stw	r16,0(sp)
    a684:	dfc00115 	stw	ra,4(sp)
    a688:	2021883a 	mov	r16,r4
    a68c:	000aa280 	call	aa28 <__call_exitprocs>
    a690:	00800074 	movhi	r2,1
    a694:	10b0a204 	addi	r2,r2,-15736
    a698:	11000017 	ldw	r4,0(r2)
    a69c:	20800f17 	ldw	r2,60(r4)
    a6a0:	10000126 	beq	r2,zero,a6a8 <exit+0x30>
    a6a4:	103ee83a 	callr	r2
    a6a8:	8009883a 	mov	r4,r16
    a6ac:	000abf00 	call	abf0 <_exit>

0000a6b0 <memcmp>:
    a6b0:	01c000c4 	movi	r7,3
    a6b4:	3980192e 	bgeu	r7,r6,a71c <memcmp+0x6c>
    a6b8:	2904b03a 	or	r2,r5,r4
    a6bc:	11c4703a 	and	r2,r2,r7
    a6c0:	10000f26 	beq	r2,zero,a700 <memcmp+0x50>
    a6c4:	20c00003 	ldbu	r3,0(r4)
    a6c8:	28800003 	ldbu	r2,0(r5)
    a6cc:	1880151e 	bne	r3,r2,a724 <memcmp+0x74>
    a6d0:	31bfff84 	addi	r6,r6,-2
    a6d4:	01ffffc4 	movi	r7,-1
    a6d8:	00000406 	br	a6ec <memcmp+0x3c>
    a6dc:	20c00003 	ldbu	r3,0(r4)
    a6e0:	28800003 	ldbu	r2,0(r5)
    a6e4:	31bfffc4 	addi	r6,r6,-1
    a6e8:	18800e1e 	bne	r3,r2,a724 <memcmp+0x74>
    a6ec:	21000044 	addi	r4,r4,1
    a6f0:	29400044 	addi	r5,r5,1
    a6f4:	31fff91e 	bne	r6,r7,a6dc <memcmp+0x2c>
    a6f8:	0005883a 	mov	r2,zero
    a6fc:	f800283a 	ret
    a700:	20c00017 	ldw	r3,0(r4)
    a704:	28800017 	ldw	r2,0(r5)
    a708:	1880041e 	bne	r3,r2,a71c <memcmp+0x6c>
    a70c:	31bfff04 	addi	r6,r6,-4
    a710:	21000104 	addi	r4,r4,4
    a714:	29400104 	addi	r5,r5,4
    a718:	39bff936 	bltu	r7,r6,a700 <memcmp+0x50>
    a71c:	303fe91e 	bne	r6,zero,a6c4 <memcmp+0x14>
    a720:	003ff506 	br	a6f8 <memcmp+0x48>
    a724:	1885c83a 	sub	r2,r3,r2
    a728:	f800283a 	ret

0000a72c <memcpy>:
    a72c:	defffb04 	addi	sp,sp,-20
    a730:	dc000015 	stw	r16,0(sp)
    a734:	dfc00415 	stw	ra,16(sp)
    a738:	dcc00315 	stw	r19,12(sp)
    a73c:	dc800215 	stw	r18,8(sp)
    a740:	dc400115 	stw	r17,4(sp)
    a744:	00c003c4 	movi	r3,15
    a748:	2021883a 	mov	r16,r4
    a74c:	3005883a 	mov	r2,r6
    a750:	1980032e 	bgeu	r3,r6,a760 <memcpy+0x34>
    a754:	2906b03a 	or	r3,r5,r4
    a758:	18c000cc 	andi	r3,r3,3
    a75c:	18001026 	beq	r3,zero,a7a0 <memcpy+0x74>
    a760:	8007883a 	mov	r3,r16
    a764:	288f883a 	add	r7,r5,r2
    a768:	10000526 	beq	r2,zero,a780 <memcpy+0x54>
    a76c:	29800003 	ldbu	r6,0(r5)
    a770:	18c00044 	addi	r3,r3,1
    a774:	29400044 	addi	r5,r5,1
    a778:	19bfffc5 	stb	r6,-1(r3)
    a77c:	29fffb1e 	bne	r5,r7,a76c <memcpy+0x40>
    a780:	8005883a 	mov	r2,r16
    a784:	dfc00417 	ldw	ra,16(sp)
    a788:	dcc00317 	ldw	r19,12(sp)
    a78c:	dc800217 	ldw	r18,8(sp)
    a790:	dc400117 	ldw	r17,4(sp)
    a794:	dc000017 	ldw	r16,0(sp)
    a798:	dec00504 	addi	sp,sp,20
    a79c:	f800283a 	ret
    a7a0:	32bffc04 	addi	r10,r6,-16
    a7a4:	5014d13a 	srli	r10,r10,4
    a7a8:	20800404 	addi	r2,r4,16
    a7ac:	2007883a 	mov	r3,r4
    a7b0:	5008913a 	slli	r4,r10,4
    a7b4:	280f883a 	mov	r7,r5
    a7b8:	1105883a 	add	r2,r2,r4
    a7bc:	3a000017 	ldw	r8,0(r7)
    a7c0:	18c00404 	addi	r3,r3,16
    a7c4:	39c00404 	addi	r7,r7,16
    a7c8:	1a3ffc15 	stw	r8,-16(r3)
    a7cc:	3a3ffd17 	ldw	r8,-12(r7)
    a7d0:	1a3ffd15 	stw	r8,-12(r3)
    a7d4:	3a3ffe17 	ldw	r8,-8(r7)
    a7d8:	1a3ffe15 	stw	r8,-8(r3)
    a7dc:	3a3fff17 	ldw	r8,-4(r7)
    a7e0:	1a3fff15 	stw	r8,-4(r3)
    a7e4:	18bff51e 	bne	r3,r2,a7bc <memcpy+0x90>
    a7e8:	52800044 	addi	r10,r10,1
    a7ec:	5014913a 	slli	r10,r10,4
    a7f0:	308003cc 	andi	r2,r6,15
    a7f4:	010000c4 	movi	r4,3
    a7f8:	8287883a 	add	r3,r16,r10
    a7fc:	2a95883a 	add	r10,r5,r10
    a800:	2080182e 	bgeu	r4,r2,a864 <memcpy+0x138>
    a804:	147fff04 	addi	r17,r2,-4
    a808:	8808d0ba 	srli	r4,r17,2
    a80c:	1a400104 	addi	r9,r3,4
    a810:	180d883a 	mov	r6,r3
    a814:	2105883a 	add	r2,r4,r4
    a818:	1085883a 	add	r2,r2,r2
    a81c:	4893883a 	add	r9,r9,r2
    a820:	500f883a 	mov	r7,r10
    a824:	3a000017 	ldw	r8,0(r7)
    a828:	31800104 	addi	r6,r6,4
    a82c:	39c00104 	addi	r7,r7,4
    a830:	323fff15 	stw	r8,-4(r6)
    a834:	327ffb1e 	bne	r6,r9,a824 <memcpy+0xf8>
    a838:	20800044 	addi	r2,r4,1
    a83c:	1085883a 	add	r2,r2,r2
    a840:	1085883a 	add	r2,r2,r2
    a844:	017fff04 	movi	r5,-4
    a848:	18a5883a 	add	r18,r3,r2
    a84c:	50a7883a 	add	r19,r10,r2
    a850:	000abc80 	call	abc8 <__mulsi3>
    a854:	1445883a 	add	r2,r2,r17
    a858:	980b883a 	mov	r5,r19
    a85c:	9007883a 	mov	r3,r18
    a860:	003fc006 	br	a764 <memcpy+0x38>
    a864:	500b883a 	mov	r5,r10
    a868:	003fbe06 	br	a764 <memcpy+0x38>

0000a86c <strlen>:
    a86c:	208000cc 	andi	r2,r4,3
    a870:	10001f1e 	bne	r2,zero,a8f0 <strlen+0x84>
    a874:	20800017 	ldw	r2,0(r4)
    a878:	01ffbff4 	movhi	r7,65279
    a87c:	39ffbfc4 	addi	r7,r7,-257
    a880:	01a02074 	movhi	r6,32897
    a884:	31a02004 	addi	r6,r6,-32640
    a888:	11c7883a 	add	r3,r2,r7
    a88c:	0084303a 	nor	r2,zero,r2
    a890:	1886703a 	and	r3,r3,r2
    a894:	1986703a 	and	r3,r3,r6
    a898:	2005883a 	mov	r2,r4
    a89c:	1800101e 	bne	r3,zero,a8e0 <strlen+0x74>
    a8a0:	10800104 	addi	r2,r2,4
    a8a4:	10c00017 	ldw	r3,0(r2)
    a8a8:	19cb883a 	add	r5,r3,r7
    a8ac:	00c6303a 	nor	r3,zero,r3
    a8b0:	28c6703a 	and	r3,r5,r3
    a8b4:	1986703a 	and	r3,r3,r6
    a8b8:	1800091e 	bne	r3,zero,a8e0 <strlen+0x74>
    a8bc:	10800104 	addi	r2,r2,4
    a8c0:	10c00017 	ldw	r3,0(r2)
    a8c4:	19cb883a 	add	r5,r3,r7
    a8c8:	00c6303a 	nor	r3,zero,r3
    a8cc:	28c6703a 	and	r3,r5,r3
    a8d0:	1986703a 	and	r3,r3,r6
    a8d4:	183ff226 	beq	r3,zero,a8a0 <strlen+0x34>
    a8d8:	00000106 	br	a8e0 <strlen+0x74>
    a8dc:	10800044 	addi	r2,r2,1
    a8e0:	10c00007 	ldb	r3,0(r2)
    a8e4:	183ffd1e 	bne	r3,zero,a8dc <strlen+0x70>
    a8e8:	1105c83a 	sub	r2,r2,r4
    a8ec:	f800283a 	ret
    a8f0:	2005883a 	mov	r2,r4
    a8f4:	003ffa06 	br	a8e0 <strlen+0x74>

0000a8f8 <__register_exitproc>:
    a8f8:	defffa04 	addi	sp,sp,-24
    a8fc:	00800074 	movhi	r2,1
    a900:	10b0a204 	addi	r2,r2,-15736
    a904:	dc000315 	stw	r16,12(sp)
    a908:	14000017 	ldw	r16,0(r2)
    a90c:	dc400415 	stw	r17,16(sp)
    a910:	dfc00515 	stw	ra,20(sp)
    a914:	80805217 	ldw	r2,328(r16)
    a918:	2023883a 	mov	r17,r4
    a91c:	10003e26 	beq	r2,zero,aa18 <__register_exitproc+0x120>
    a920:	10c00117 	ldw	r3,4(r2)
    a924:	020007c4 	movi	r8,31
    a928:	40c0180e 	bge	r8,r3,a98c <__register_exitproc+0x94>
    a92c:	00800034 	movhi	r2,0
    a930:	10800004 	addi	r2,r2,0
    a934:	1000061e 	bne	r2,zero,a950 <__register_exitproc+0x58>
    a938:	00bfffc4 	movi	r2,-1
    a93c:	dfc00517 	ldw	ra,20(sp)
    a940:	dc400417 	ldw	r17,16(sp)
    a944:	dc000317 	ldw	r16,12(sp)
    a948:	dec00604 	addi	sp,sp,24
    a94c:	f800283a 	ret
    a950:	01006404 	movi	r4,400
    a954:	d9400015 	stw	r5,0(sp)
    a958:	d9800115 	stw	r6,4(sp)
    a95c:	d9c00215 	stw	r7,8(sp)
    a960:	00000000 	call	0 <__alt_mem_mem2-0x8000>
    a964:	d9400017 	ldw	r5,0(sp)
    a968:	d9800117 	ldw	r6,4(sp)
    a96c:	d9c00217 	ldw	r7,8(sp)
    a970:	103ff126 	beq	r2,zero,a938 <__register_exitproc+0x40>
    a974:	80c05217 	ldw	r3,328(r16)
    a978:	10000115 	stw	zero,4(r2)
    a97c:	10c00015 	stw	r3,0(r2)
    a980:	80805215 	stw	r2,328(r16)
    a984:	10006215 	stw	zero,392(r2)
    a988:	10006315 	stw	zero,396(r2)
    a98c:	10c00117 	ldw	r3,4(r2)
    a990:	88000d1e 	bne	r17,zero,a9c8 <__register_exitproc+0xd0>
    a994:	19000084 	addi	r4,r3,2
    a998:	2109883a 	add	r4,r4,r4
    a99c:	18c00044 	addi	r3,r3,1
    a9a0:	2109883a 	add	r4,r4,r4
    a9a4:	1109883a 	add	r4,r2,r4
    a9a8:	10c00115 	stw	r3,4(r2)
    a9ac:	0005883a 	mov	r2,zero
    a9b0:	21400015 	stw	r5,0(r4)
    a9b4:	dfc00517 	ldw	ra,20(sp)
    a9b8:	dc400417 	ldw	r17,16(sp)
    a9bc:	dc000317 	ldw	r16,12(sp)
    a9c0:	dec00604 	addi	sp,sp,24
    a9c4:	f800283a 	ret
    a9c8:	02400044 	movi	r9,1
    a9cc:	12806217 	ldw	r10,392(r2)
    a9d0:	48d2983a 	sll	r9,r9,r3
    a9d4:	19000804 	addi	r4,r3,32
    a9d8:	18d1883a 	add	r8,r3,r3
    a9dc:	2109883a 	add	r4,r4,r4
    a9e0:	4211883a 	add	r8,r8,r8
    a9e4:	2109883a 	add	r4,r4,r4
    a9e8:	1109883a 	add	r4,r2,r4
    a9ec:	1211883a 	add	r8,r2,r8
    a9f0:	5254b03a 	or	r10,r10,r9
    a9f4:	21c02215 	stw	r7,136(r4)
    a9f8:	41802215 	stw	r6,136(r8)
    a9fc:	12806215 	stw	r10,392(r2)
    aa00:	01000084 	movi	r4,2
    aa04:	893fe31e 	bne	r17,r4,a994 <__register_exitproc+0x9c>
    aa08:	11006317 	ldw	r4,396(r2)
    aa0c:	2252b03a 	or	r9,r4,r9
    aa10:	12406315 	stw	r9,396(r2)
    aa14:	003fdf06 	br	a994 <__register_exitproc+0x9c>
    aa18:	00800074 	movhi	r2,1
    aa1c:	10b67804 	addi	r2,r2,-9760
    aa20:	80805215 	stw	r2,328(r16)
    aa24:	003fbe06 	br	a920 <__register_exitproc+0x28>

0000aa28 <__call_exitprocs>:
    aa28:	00800074 	movhi	r2,1
    aa2c:	10b0a204 	addi	r2,r2,-15736
    aa30:	10800017 	ldw	r2,0(r2)
    aa34:	defff304 	addi	sp,sp,-52
    aa38:	df000b15 	stw	fp,44(sp)
    aa3c:	d8800015 	stw	r2,0(sp)
    aa40:	10805204 	addi	r2,r2,328
    aa44:	dd400815 	stw	r21,32(sp)
    aa48:	dfc00c15 	stw	ra,48(sp)
    aa4c:	ddc00a15 	stw	r23,40(sp)
    aa50:	dd800915 	stw	r22,36(sp)
    aa54:	dd000715 	stw	r20,28(sp)
    aa58:	dcc00615 	stw	r19,24(sp)
    aa5c:	dc800515 	stw	r18,20(sp)
    aa60:	dc400415 	stw	r17,16(sp)
    aa64:	dc000315 	stw	r16,12(sp)
    aa68:	d9000115 	stw	r4,4(sp)
    aa6c:	2839883a 	mov	fp,r5
    aa70:	d8800215 	stw	r2,8(sp)
    aa74:	057fffc4 	movi	r21,-1
    aa78:	d8800017 	ldw	r2,0(sp)
    aa7c:	ddc00217 	ldw	r23,8(sp)
    aa80:	14805217 	ldw	r18,328(r2)
    aa84:	90001726 	beq	r18,zero,aae4 <__call_exitprocs+0xbc>
    aa88:	94400117 	ldw	r17,4(r18)
    aa8c:	8c3fffc4 	addi	r16,r17,-1
    aa90:	80001116 	blt	r16,zero,aad8 <__call_exitprocs+0xb0>
    aa94:	8c400044 	addi	r17,r17,1
    aa98:	8427883a 	add	r19,r16,r16
    aa9c:	8c63883a 	add	r17,r17,r17
    aaa0:	95802204 	addi	r22,r18,136
    aaa4:	9ce7883a 	add	r19,r19,r19
    aaa8:	8c63883a 	add	r17,r17,r17
    aaac:	b4e7883a 	add	r19,r22,r19
    aab0:	9463883a 	add	r17,r18,r17
    aab4:	e0001726 	beq	fp,zero,ab14 <__call_exitprocs+0xec>
    aab8:	8c87c83a 	sub	r3,r17,r18
    aabc:	b0c7883a 	add	r3,r22,r3
    aac0:	18c01e17 	ldw	r3,120(r3)
    aac4:	1f001326 	beq	r3,fp,ab14 <__call_exitprocs+0xec>
    aac8:	843fffc4 	addi	r16,r16,-1
    aacc:	9cffff04 	addi	r19,r19,-4
    aad0:	8c7fff04 	addi	r17,r17,-4
    aad4:	857ff71e 	bne	r16,r21,aab4 <__call_exitprocs+0x8c>
    aad8:	00800034 	movhi	r2,0
    aadc:	10800004 	addi	r2,r2,0
    aae0:	10002a1e 	bne	r2,zero,ab8c <__call_exitprocs+0x164>
    aae4:	dfc00c17 	ldw	ra,48(sp)
    aae8:	df000b17 	ldw	fp,44(sp)
    aaec:	ddc00a17 	ldw	r23,40(sp)
    aaf0:	dd800917 	ldw	r22,36(sp)
    aaf4:	dd400817 	ldw	r21,32(sp)
    aaf8:	dd000717 	ldw	r20,28(sp)
    aafc:	dcc00617 	ldw	r19,24(sp)
    ab00:	dc800517 	ldw	r18,20(sp)
    ab04:	dc400417 	ldw	r17,16(sp)
    ab08:	dc000317 	ldw	r16,12(sp)
    ab0c:	dec00d04 	addi	sp,sp,52
    ab10:	f800283a 	ret
    ab14:	91000117 	ldw	r4,4(r18)
    ab18:	88c00017 	ldw	r3,0(r17)
    ab1c:	213fffc4 	addi	r4,r4,-1
    ab20:	24001526 	beq	r4,r16,ab78 <__call_exitprocs+0x150>
    ab24:	88000015 	stw	zero,0(r17)
    ab28:	183fe726 	beq	r3,zero,aac8 <__call_exitprocs+0xa0>
    ab2c:	00800044 	movi	r2,1
    ab30:	1408983a 	sll	r4,r2,r16
    ab34:	91406217 	ldw	r5,392(r18)
    ab38:	95000117 	ldw	r20,4(r18)
    ab3c:	214a703a 	and	r5,r4,r5
    ab40:	28000b26 	beq	r5,zero,ab70 <__call_exitprocs+0x148>
    ab44:	91406317 	ldw	r5,396(r18)
    ab48:	2148703a 	and	r4,r4,r5
    ab4c:	20000c1e 	bne	r4,zero,ab80 <__call_exitprocs+0x158>
    ab50:	99400017 	ldw	r5,0(r19)
    ab54:	d9000117 	ldw	r4,4(sp)
    ab58:	183ee83a 	callr	r3
    ab5c:	90c00117 	ldw	r3,4(r18)
    ab60:	1d3fc51e 	bne	r3,r20,aa78 <__call_exitprocs+0x50>
    ab64:	b8c00017 	ldw	r3,0(r23)
    ab68:	1cbfd726 	beq	r3,r18,aac8 <__call_exitprocs+0xa0>
    ab6c:	003fc206 	br	aa78 <__call_exitprocs+0x50>
    ab70:	183ee83a 	callr	r3
    ab74:	003ff906 	br	ab5c <__call_exitprocs+0x134>
    ab78:	94000115 	stw	r16,4(r18)
    ab7c:	003fea06 	br	ab28 <__call_exitprocs+0x100>
    ab80:	99000017 	ldw	r4,0(r19)
    ab84:	183ee83a 	callr	r3
    ab88:	003ff406 	br	ab5c <__call_exitprocs+0x134>
    ab8c:	90c00117 	ldw	r3,4(r18)
    ab90:	1800071e 	bne	r3,zero,abb0 <__call_exitprocs+0x188>
    ab94:	90c00017 	ldw	r3,0(r18)
    ab98:	18000926 	beq	r3,zero,abc0 <__call_exitprocs+0x198>
    ab9c:	9009883a 	mov	r4,r18
    aba0:	b8c00015 	stw	r3,0(r23)
    aba4:	00000000 	call	0 <__alt_mem_mem2-0x8000>
    aba8:	bc800017 	ldw	r18,0(r23)
    abac:	003fb506 	br	aa84 <__call_exitprocs+0x5c>
    abb0:	90c00017 	ldw	r3,0(r18)
    abb4:	902f883a 	mov	r23,r18
    abb8:	1825883a 	mov	r18,r3
    abbc:	003fb106 	br	aa84 <__call_exitprocs+0x5c>
    abc0:	0007883a 	mov	r3,zero
    abc4:	003ffb06 	br	abb4 <__call_exitprocs+0x18c>

0000abc8 <__mulsi3>:
    abc8:	0005883a 	mov	r2,zero
    abcc:	20000726 	beq	r4,zero,abec <__mulsi3+0x24>
    abd0:	20c0004c 	andi	r3,r4,1
    abd4:	2008d07a 	srli	r4,r4,1
    abd8:	18000126 	beq	r3,zero,abe0 <__mulsi3+0x18>
    abdc:	1145883a 	add	r2,r2,r5
    abe0:	294b883a 	add	r5,r5,r5
    abe4:	203ffa1e 	bne	r4,zero,abd0 <__mulsi3+0x8>
    abe8:	f800283a 	ret
    abec:	f800283a 	ret

0000abf0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    abf0:	defffc04 	addi	sp,sp,-16
    abf4:	df000315 	stw	fp,12(sp)
    abf8:	df000304 	addi	fp,sp,12
    abfc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    ac00:	0001883a 	nop
    ac04:	e0bfff17 	ldw	r2,-4(fp)
    ac08:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
    ac0c:	e0bffd17 	ldw	r2,-12(fp)
    ac10:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    ac14:	e0bffe17 	ldw	r2,-8(fp)
    ac18:	10000226 	beq	r2,zero,ac24 <_exit+0x34>
    ALT_SIM_FAIL();
    ac1c:	002af070 	cmpltui	zero,zero,43969
    ac20:	00000106 	br	ac28 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
    ac24:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    ac28:	003fff06 	br	ac28 <_exit+0x38>

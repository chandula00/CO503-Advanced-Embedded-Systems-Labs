
cpu2.elf:     file format elf32-littlenios2
cpu2.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000201b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00005e60 memsz 0x00005e60 flags r-x
    LOAD off    0x00006e80 vaddr 0x00025e80 paddr 0x000278c8 align 2**12
         filesz 0x00001a48 memsz 0x00001a48 flags rw-
    LOAD off    0x00009310 vaddr 0x00029310 paddr 0x00029310 align 2**12
         filesz 0x00000000 memsz 0x000002e0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005c68  000201b8  000201b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000060  00025e20  00025e20  00006e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a48  00025e80  000278c8  00006e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e0  00029310  00029310  00009310  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  000088c8  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000990  00000000  00000000  000088f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00017ecb  00000000  00000000  00009280  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00005c87  00000000  00000000  0002114b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00006def  00000000  00000000  00026dd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  0000126c  00000000  00000000  0002dbc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000024bc  00000000  00000000  0002ee30  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000059f8  00000000  00000000  000312ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  00036ce4  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000398  00000000  00000000  00036cf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  000398d9  2**0
                  CONTENTS, READONLY
 17 .cpu          00000004  00000000  00000000  000398dc  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  000398e0  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  000398e1  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  000398e2  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  000398e6  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  000398ea  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000a  00000000  00000000  000398ee  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000a  00000000  00000000  000398f8  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000a  00000000  00000000  00039902  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000004  00000000  00000000  0003990c  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000052  00000000  00000000  00039910  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00190008  00000000  00000000  00039962  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
000201b8 l    d  .text	00000000 .text
00025e20 l    d  .rodata	00000000 .rodata
00025e80 l    d  .rwdata	00000000 .rwdata
00029310 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../cpu2_bsp//obj/HAL/src/crt0.o
000201f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00020094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 FIFO.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
00025e80 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00022154 l     F .text	00000008 __fp_lock
0002215c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
0002315c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00023278 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000232a4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000233a4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00023498 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00023584 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00023760 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000278b8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
000239d4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00023b14 l     F .text	00000038 alt_dev_reg
00026830 l     O .rwdata	00001060 jtag_uart2
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00024304 l     F .text	00000204 altera_avalon_jtag_uart_irq
00024508 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00024b44 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00024d9c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00025228 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00025380 l     F .text	00000050 alt_get_errno
000253d0 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00022ff8 g     F .text	00000064 _isatty_r
000236a8 g     F .text	00000078 alt_main
00020618 g     F .text	00000084 _puts_r
00029360 g     O .bss	00000100 alt_irq
0002305c g     F .text	0000006c _lseek_r
00023e70 g     F .text	00000058 altera_avalon_fifo_write_almostfull
000278c8 g       *ABS*	00000000 __flash_rwdata_start
000295f0 g       *ABS*	00000000 __alt_heap_start
00022d0c g     F .text	0000005c __sseek
000221f8 g     F .text	0000010c __sinit
00022170 g     F .text	00000078 __sfmoreglue
00023740 g     F .text	00000020 __malloc_unlock
000215dc g     F .text	0000018c memmove
00023bf0 g     F .text	00000098 altera_avalon_fifo_init
000221e8 g     F .text	00000010 _cleanup
00023f20 g     F .text	00000058 altera_avalon_fifo_write_fifo
00000000  w      *UND*	00000000 __errno
00020000 g     F .entry	0000000c __reset
000240b8 g     F .text	00000028 altera_avalon_fifo_read_backpressure
00020020 g       *ABS*	00000000 __flash_exceptions_start
00022f90 g     F .text	00000068 _fstat_r
0002931c g     O .bss	00000004 errno
00020000 g       *ABS*	00000000 __alt_mem_mem2
00029324 g     O .bss	00000004 alt_argv
0002f890 g       *ABS*	00000000 _gp
00023dbc g     F .text	0000005c altera_avalon_fifo_clear_event
000266b0 g     O .rwdata	00000180 alt_fd_list
000257d4 g     F .text	00000090 alt_find_dev
0002149c g     F .text	00000140 memcpy
00022164 g     F .text	0000000c _cleanup_r
00025308 g     F .text	00000078 alt_io_redirect
00025e20 g       *ABS*	00000000 __DTOR_END__
0002069c g     F .text	00000014 puts
00024708 g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000233f4 g     F .text	000000a4 isatty
00029318 g     O .bss	00000004 __malloc_top_pad
0002073c g     F .text	000004e4 __sfvwrite_r
00021d64 g     F .text	00000064 _sbrk_r
000230c8 g     F .text	0000006c _read_r
000278b0 g     O .rwdata	00000004 alt_max_fd
00022e40 g     F .text	0000013c _fclose_r
00022124 g     F .text	00000030 fflush
00029314 g     O .bss	00000004 __malloc_max_sbrked_mem
000235d4 g     F .text	000000d4 lseek
00027890 g     O .rwdata	00000004 _global_impure_ptr
00021768 g     F .text	000005fc _realloc_r
000295f0 g       *ABS*	00000000 __bss_end
00025138 g     F .text	000000f0 alt_iic_isr_register
000256b0 g     F .text	00000104 alt_tick
00022410 g     F .text	00000018 __fp_lock_all
000250ec g     F .text	0000004c alt_ic_irq_enabled
000202b8 g     F .text	00000040 FIFO_INIT
00025618 g     F .text	00000098 alt_alarm_stop
0002932c g     O .bss	00000004 alt_irq_active
000200ec g     F .exceptions	000000cc alt_irq_handler
00026688 g     O .rwdata	00000028 alt_dev_null
00024d80 g     F .text	0000001c alt_dcache_flush_all
00023e18 g     F .text	00000058 altera_avalon_fifo_write_ienable
000278c8 g       *ABS*	00000000 __ram_rwdata_end
00023d2c g     F .text	0000002c altera_avalon_fifo_read_almostempty
000278a8 g     O .rwdata	00000008 alt_dev_list
00023a24 g     F .text	000000f0 write
00025e80 g       *ABS*	00000000 __ram_rodata_end
000232f4 g     F .text	000000b0 fstat
000295f0 g       *ABS*	00000000 end
00024244 g     F .text	000000c0 altera_avalon_jtag_uart_init
00023d58 g     F .text	0000003c altera_avalon_fifo_read_event
00025e20 g       *ABS*	00000000 __CTOR_LIST__
00037000 g       *ABS*	00000000 __alt_stack_pointer
00024bb8 g     F .text	00000088 alt_avalon_timer_sc_init
00024920 g     F .text	00000224 altera_avalon_jtag_uart_write
00022400 g     F .text	00000004 __sfp_lock_acquire
00023fe4 g     F .text	0000004c altera_avalon_fifo_read_fifo
000213a4 g     F .text	000000f8 memchr
0002257c g     F .text	000002d0 _free_r
00025c44 g     F .text	000001a0 __call_exitprocs
00027898 g     O .rwdata	00000004 __malloc_sbrk_base
000201b8 g     F .text	0000003c _start
00029330 g     O .bss	00000004 _alt_tick_rate
00029334 g     O .bss	00000004 _alt_nticks
000237b0 g     F .text	000000f4 read
00023b80 g     F .text	00000070 alt_sys_init
00025b14 g     F .text	00000130 __register_exitproc
000245ac g     F .text	00000068 altera_avalon_jtag_uart_close
00023134 g     F .text	00000028 __mulsi3
00025e80 g       *ABS*	00000000 __ram_rwdata_start
00025e20 g       *ABS*	00000000 __ram_rodata_start
00029338 g     O .bss	00000028 __malloc_current_mallinfo
000240e0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00025978 g     F .text	000000d4 alt_get_fd
00022ddc g     F .text	00000064 _close_r
00025a98 g     F .text	0000007c memcmp
000241a0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000295f0 g       *ABS*	00000000 __alt_stack_base
000241f0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00021dc8 g     F .text	00000174 __swsetup_r
00023c88 g     F .text	0000003c altera_avalon_fifo_read_status
00022304 g     F .text	000000fc __sfp
00026280 g     O .rwdata	00000408 __malloc_av_
0002240c g     F .text	00000004 __sinit_lock_release
00022c30 g     F .text	00000054 __sread
0002408c g     F .text	0000002c altera_avalon_fifo_read_other_info
00025864 g     F .text	00000114 alt_find_file
00024dec g     F .text	000000a0 alt_dev_llist_insert
00023720 g     F .text	00000020 __malloc_lock
00023924 g     F .text	000000b0 sbrk
00021f3c g     F .text	000001e8 _fflush_r
00029310 g       *ABS*	00000000 __bss_start
00022b54 g     F .text	000000dc memset
000205bc g     F .text	0000005c main
00029328 g     O .bss	00000004 alt_envp
00029310 g     O .bss	00000004 __malloc_max_total_mem
00024140 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00023d94 g     F .text	00000028 altera_avalon_fifo_read_level
00022d68 g     F .text	00000008 __sclose
00037000 g       *ABS*	00000000 __alt_heap_limit
00020338 g     F .text	00000284 levelshift
00022f7c g     F .text	00000014 fclose
00029460 g     O .bss	00000190 _atexit0
00020c20 g     F .text	00000784 _malloc_r
000278b4 g     O .rwdata	00000004 alt_errno
0002284c g     F .text	000000a8 _fwalk
00022440 g     F .text	0000013c _malloc_trim_r
00025e20 g       *ABS*	00000000 __CTOR_END__
00025e20 g       *ABS*	00000000 __flash_rodata_start
00025e20 g       *ABS*	00000000 __DTOR_LIST__
000202f8 g     F .text	00000040 delay
00023b4c g     F .text	00000034 alt_irq_init
000238a4 g     F .text	00000080 alt_release_fd
00025a4c g     F .text	00000014 atexit
00022d70 g     F .text	0000006c _write_r
00027894 g     O .rwdata	00000004 _impure_ptr
00029320 g     O .bss	00000004 alt_argc
00024ee8 g     F .text	0000005c _do_dtors
00020258 g     F .text	00000060 READ_FIFO
00020020 g       .exceptions	00000000 alt_irq_entry
00022428 g     F .text	00000018 __fp_unlock_all
000278a0 g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
00024030 g     F .text	0000005c altera_avalon_fifo_write_other_info
00024f60 g     F .text	00000050 alt_ic_isr_register
000278c8 g       *ABS*	00000000 _edata
000295f0 g       *ABS*	00000000 _end
000201b8 g       *ABS*	00000000 __ram_exceptions_end
00024614 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0002504c g     F .text	000000a0 alt_ic_irq_disable
00022c84 g     F .text	00000088 __swrite
0002789c g     O .rwdata	00000004 __malloc_trim_threshold
000257b4 g     F .text	00000020 altera_nios2_qsys_irq_init
00025a60 g     F .text	00000038 exit
000228f4 g     F .text	000000b8 _fwalk_reent
00023cc4 g     F .text	0000003c altera_avalon_fifo_read_ienable
00037000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
00022404 g     F .text	00000004 __sfp_lock_release
00025de4 g     F .text	0000003c _exit
00024c40 g     F .text	00000140 alt_alarm_start
00023d00 g     F .text	0000002c altera_avalon_fifo_read_almostfull
000229ac g     F .text	000001a8 __smakebuf_r
000206b0 g     F .text	0000008c strlen
000254c0 g     F .text	00000158 open
00023f78 g     F .text	0000006c altera_avalon_read_fifo
00024f44 g     F .text	0000001c alt_icache_flush_all
000201f4 g     F .text	00000064 WRITE_FIFO
000278bc g     O .rwdata	00000004 alt_priority_mask
00024fb0 g     F .text	0000009c alt_ic_irq_enable
00023ec8 g     F .text	00000058 altera_avalon_fifo_write_almostempty
000278c0 g     O .rwdata	00000008 alt_alarm_list
00024e8c g     F .text	0000005c _do_ctors
000231ac g     F .text	000000cc close
00023504 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
00022408 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08406e14 	ori	at,at,440
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200ec0 	call	200ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000306 	br	20098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   2008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)

00020094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   20094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   20098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   2009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200e8:	ef80083a 	eret

000200ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200ec:	defff904 	addi	sp,sp,-28
   200f0:	dfc00615 	stw	ra,24(sp)
   200f4:	df000515 	stw	fp,20(sp)
   200f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   200fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20100:	0005313a 	rdctl	r2,ipending
   20104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20114:	00800044 	movi	r2,1
   20118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2011c:	e0fffb17 	ldw	r3,-20(fp)
   20120:	e0bffc17 	ldw	r2,-16(fp)
   20124:	1884703a 	and	r2,r3,r2
   20128:	10001726 	beq	r2,zero,20188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2012c:	00c000f4 	movhi	r3,3
   20130:	18e4d804 	addi	r3,r3,-27808
   20134:	e0bffd17 	ldw	r2,-12(fp)
   20138:	100490fa 	slli	r2,r2,3
   2013c:	1885883a 	add	r2,r3,r2
   20140:	10c00017 	ldw	r3,0(r2)
   20144:	010000f4 	movhi	r4,3
   20148:	2124d804 	addi	r4,r4,-27808
   2014c:	e0bffd17 	ldw	r2,-12(fp)
   20150:	100490fa 	slli	r2,r2,3
   20154:	2085883a 	add	r2,r4,r2
   20158:	10800104 	addi	r2,r2,4
   2015c:	10800017 	ldw	r2,0(r2)
   20160:	1009883a 	mov	r4,r2
   20164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2016c:	0005313a 	rdctl	r2,ipending
   20170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   20178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   2017c:	e0bffb17 	ldw	r2,-20(fp)
   20180:	103fe31e 	bne	r2,zero,20110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   20184:	00000706 	br	201a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   20188:	e0bffc17 	ldw	r2,-16(fp)
   2018c:	1085883a 	add	r2,r2,r2
   20190:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20194:	e0bffd17 	ldw	r2,-12(fp)
   20198:	10800044 	addi	r2,r2,1
   2019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a0:	003fde06 	br	2011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   201a4:	e037883a 	mov	sp,fp
   201a8:	dfc00117 	ldw	ra,4(sp)
   201ac:	df000017 	ldw	fp,0(sp)
   201b0:	dec00204 	addi	sp,sp,8
   201b4:	f800283a 	ret

Disassembly of section .text:

000201b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   201b8:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   201bc:	dedc0014 	ori	sp,sp,28672
    movhi gp, %hi(_gp)
   201c0:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   201c4:	d6be2414 	ori	gp,gp,63632
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   201c8:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   201cc:	10a4c414 	ori	r2,r2,37648

    movhi r3, %hi(__bss_end)
   201d0:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   201d4:	18e57c14 	ori	r3,r3,38384

    beq r2, r3, 1f
   201d8:	10c00326 	beq	r2,r3,201e8 <_start+0x30>

0:
    stw zero, (r2)
   201dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   201e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   201e4:	10fffd36 	bltu	r2,r3,201dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   201e8:	00235040 	call	23504 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   201ec:	00236a80 	call	236a8 <alt_main>

000201f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   201f0:	003fff06 	br	201f0 <alt_after_alt_main>

000201f4 <WRITE_FIFO>:
 */

#include "FIFO.h"

void WRITE_FIFO(int *buffer, int inBase, int controllBase)
{
   201f4:	defffb04 	addi	sp,sp,-20
   201f8:	dfc00415 	stw	ra,16(sp)
   201fc:	df000315 	stw	fp,12(sp)
   20200:	df000304 	addi	fp,sp,12
   20204:	e13ffd15 	stw	r4,-12(fp)
   20208:	e17ffe15 	stw	r5,-8(fp)
   2020c:	e1bfff15 	stw	r6,-4(fp)

	// printf("Sending\n");
	// printf("Count - %d, ", altera_avalon_fifo_read_level(controllBase));

	// Check if FIFO is full before writing
	while (altera_avalon_fifo_read_level(controllBase) == ALMOST_FULL)
   20210:	0001883a 	nop
   20214:	e0bfff17 	ldw	r2,-4(fp)
   20218:	1009883a 	mov	r4,r2
   2021c:	0023d940 	call	23d94 <altera_avalon_fifo_read_level>
   20220:	10800220 	cmpeqi	r2,r2,8
   20224:	103ffb1e 	bne	r2,zero,20214 <WRITE_FIFO+0x20>
	{
	}

	// Write data to FIFO
	altera_avalon_fifo_write_fifo(inBase, controllBase, *buffer);
   20228:	e13ffe17 	ldw	r4,-8(fp)
   2022c:	e0ffff17 	ldw	r3,-4(fp)
   20230:	e0bffd17 	ldw	r2,-12(fp)
   20234:	10800017 	ldw	r2,0(r2)
   20238:	180b883a 	mov	r5,r3
   2023c:	100d883a 	mov	r6,r2
   20240:	0023f200 	call	23f20 <altera_avalon_fifo_write_fifo>
}
   20244:	e037883a 	mov	sp,fp
   20248:	dfc00117 	ldw	ra,4(sp)
   2024c:	df000017 	ldw	fp,0(sp)
   20250:	dec00204 	addi	sp,sp,8
   20254:	f800283a 	ret

00020258 <READ_FIFO>:

void READ_FIFO(int *buffer, int outBase, int controllBase)
{
   20258:	defffb04 	addi	sp,sp,-20
   2025c:	dfc00415 	stw	ra,16(sp)
   20260:	df000315 	stw	fp,12(sp)
   20264:	df000304 	addi	fp,sp,12
   20268:	e13ffd15 	stw	r4,-12(fp)
   2026c:	e17ffe15 	stw	r5,-8(fp)
   20270:	e1bfff15 	stw	r6,-4(fp)
	// Wait if the FIFO is empty
	// while (altera_avalon_fifo_read_status(FIFO_MEM_IN_CSR_BASE, ALTERA_AVALON_FIFO_STATUS_EMPTY))
	// 	;

	while (altera_avalon_fifo_read_level(controllBase) == ALMOST_EMTY)
   20274:	0001883a 	nop
   20278:	e0bfff17 	ldw	r2,-4(fp)
   2027c:	1009883a 	mov	r4,r2
   20280:	0023d940 	call	23d94 <altera_avalon_fifo_read_level>
   20284:	103ffc26 	beq	r2,zero,20278 <READ_FIFO+0x20>
	{
	}

	// Read the data
	*buffer = altera_avalon_fifo_read_fifo(outBase, controllBase);
   20288:	e0fffe17 	ldw	r3,-8(fp)
   2028c:	e0bfff17 	ldw	r2,-4(fp)
   20290:	1809883a 	mov	r4,r3
   20294:	100b883a 	mov	r5,r2
   20298:	0023fe40 	call	23fe4 <altera_avalon_fifo_read_fifo>
   2029c:	e0fffd17 	ldw	r3,-12(fp)
   202a0:	18800015 	stw	r2,0(r3)
}
   202a4:	e037883a 	mov	sp,fp
   202a8:	dfc00117 	ldw	ra,4(sp)
   202ac:	df000017 	ldw	fp,0(sp)
   202b0:	dec00204 	addi	sp,sp,8
   202b4:	f800283a 	ret

000202b8 <FIFO_INIT>:

// Initialization
void FIFO_INIT(int controllBase)
{
   202b8:	defffd04 	addi	sp,sp,-12
   202bc:	dfc00215 	stw	ra,8(sp)
   202c0:	df000115 	stw	fp,4(sp)
   202c4:	df000104 	addi	fp,sp,4
   202c8:	e13fff15 	stw	r4,-4(fp)
	altera_avalon_fifo_init(controllBase,
   202cc:	e0bfff17 	ldw	r2,-4(fp)
   202d0:	1009883a 	mov	r4,r2
   202d4:	000b883a 	mov	r5,zero
   202d8:	000d883a 	mov	r6,zero
   202dc:	01c00204 	movi	r7,8
   202e0:	0023bf00 	call	23bf0 <altera_avalon_fifo_init>
							0,
							ALMOST_EMTY,  // Almost empty threshold
							ALMOST_FULL); // Almost full threshold
   202e4:	e037883a 	mov	sp,fp
   202e8:	dfc00117 	ldw	ra,4(sp)
   202ec:	df000017 	ldw	fp,0(sp)
   202f0:	dec00204 	addi	sp,sp,8
   202f4:	f800283a 	ret

000202f8 <delay>:
#include <stdio.h>
#include "datatype.h"
#include "FIFO.h"

void delay(int n)
{
   202f8:	defffd04 	addi	sp,sp,-12
   202fc:	df000215 	stw	fp,8(sp)
   20300:	df000204 	addi	fp,sp,8
   20304:	e13fff15 	stw	r4,-4(fp)
	int i;
	for (i = n; i > 0; i--)
   20308:	e0bfff17 	ldw	r2,-4(fp)
   2030c:	e0bffe15 	stw	r2,-8(fp)
   20310:	00000306 	br	20320 <delay+0x28>
   20314:	e0bffe17 	ldw	r2,-8(fp)
   20318:	10bfffc4 	addi	r2,r2,-1
   2031c:	e0bffe15 	stw	r2,-8(fp)
   20320:	e0bffe17 	ldw	r2,-8(fp)
   20324:	00bffb16 	blt	zero,r2,20314 <delay+0x1c>
	{
		continue;
	}
}
   20328:	e037883a 	mov	sp,fp
   2032c:	df000017 	ldw	fp,0(sp)
   20330:	dec00104 	addi	sp,sp,4
   20334:	f800283a 	ret

00020338 <levelshift>:

/* Level shifting to get 8-bit SIGNED values for the data */
void levelshift(void)
{
   20338:	deffd804 	addi	sp,sp,-160
   2033c:	dfc02715 	stw	ra,156(sp)
   20340:	df002615 	stw	fp,152(sp)
   20344:	df002604 	addi	fp,sp,152
	printf("Level shifting\n");
   20348:	010000b4 	movhi	r4,2
   2034c:	21178804 	addi	r4,r4,24096
   20350:	002069c0 	call	2069c <puts>
	INT8 temp1[8][8], temp2[8][8]; // Temporary storage array
	int row, col, value;

	while (1)
	{
		printf("Running...\n");
   20354:	010000b4 	movhi	r4,2
   20358:	21178c04 	addi	r4,r4,24112
   2035c:	002069c0 	call	2069c <puts>

		// Read and level shift data
		// printf("First 8x8 Grid:\n");
		for (j = 0; j < 64; j++)
   20360:	e03fdb15 	stw	zero,-148(fp)
   20364:	00004b06 	br	20494 <levelshift+0x15c>
		{
			row = j / 8;
   20368:	e0bfdb17 	ldw	r2,-148(fp)
   2036c:	1000010e 	bge	r2,zero,20374 <levelshift+0x3c>
   20370:	108001c4 	addi	r2,r2,7
   20374:	1005d0fa 	srai	r2,r2,3
   20378:	e0bfdc15 	stw	r2,-144(fp)
			col = j % 8;
   2037c:	e0ffdb17 	ldw	r3,-148(fp)
   20380:	00a00034 	movhi	r2,32768
   20384:	108001c4 	addi	r2,r2,7
   20388:	1884703a 	and	r2,r3,r2
   2038c:	1000040e 	bge	r2,zero,203a0 <levelshift+0x68>
   20390:	10bfffc4 	addi	r2,r2,-1
   20394:	00fffe04 	movi	r3,-8
   20398:	10c4b03a 	or	r2,r2,r3
   2039c:	10800044 	addi	r2,r2,1
   203a0:	e0bfdd15 	stw	r2,-140(fp)

			// Read from the first FIFO
			READ_FIFO(&value, OUT_BASE_1to2A, CONTROL_BASE_1to2A);
   203a4:	e0bffe04 	addi	r2,fp,-8
   203a8:	1009883a 	mov	r4,r2
   203ac:	01400134 	movhi	r5,4
   203b0:	29441504 	addi	r5,r5,4180
   203b4:	01840034 	movhi	r6,4096
   203b8:	31842804 	addi	r6,r6,4256
   203bc:	00202580 	call	20258 <READ_FIFO>

			value -= 128;
   203c0:	e0bffe17 	ldw	r2,-8(fp)
   203c4:	10bfe004 	addi	r2,r2,-128
   203c8:	e0bffe15 	stw	r2,-8(fp)
			WRITE_FIFO(&value, IN_BASE_2to3, CONTROL_BASE_2to3);
   203cc:	e0bffe04 	addi	r2,fp,-8
   203d0:	1009883a 	mov	r4,r2
   203d4:	01400134 	movhi	r5,4
   203d8:	29441204 	addi	r5,r5,4168
   203dc:	01800134 	movhi	r6,4
   203e0:	31840004 	addi	r6,r6,4096
   203e4:	00201f40 	call	201f4 <WRITE_FIFO>

			// if (col == 7)
			// 	printf("\n");

			// Read from the second FIFO
			READ_FIFO(&value, OUT_BASE_1to2B, CONTROL_BASE_1to2B);
   203e8:	e0bffe04 	addi	r2,fp,-8
   203ec:	1009883a 	mov	r4,r2
   203f0:	01400134 	movhi	r5,4
   203f4:	29441404 	addi	r5,r5,4176
   203f8:	01840034 	movhi	r6,4096
   203fc:	31842004 	addi	r6,r6,4224
   20400:	00202580 	call	20258 <READ_FIFO>
			value -= 128;
   20404:	e0bffe17 	ldw	r2,-8(fp)
   20408:	10bfe004 	addi	r2,r2,-128
   2040c:	e0bffe15 	stw	r2,-8(fp)
			temp1[row][col] = value; // Store into temp array
   20410:	e0bffe17 	ldw	r2,-8(fp)
   20414:	1007883a 	mov	r3,r2
   20418:	e0bfdc17 	ldw	r2,-144(fp)
   2041c:	100490fa 	slli	r2,r2,3
   20420:	e17fda04 	addi	r5,fp,-152
   20424:	2889883a 	add	r4,r5,r2
   20428:	e0bfdd17 	ldw	r2,-140(fp)
   2042c:	2085883a 	add	r2,r4,r2
   20430:	10800404 	addi	r2,r2,16
   20434:	10c00005 	stb	r3,0(r2)

			// Read from the third FIFO
			READ_FIFO(&value, OUT_BASE_1to2C, CONTROL_BASE_1to2C);
   20438:	e0bffe04 	addi	r2,fp,-8
   2043c:	1009883a 	mov	r4,r2
   20440:	01400134 	movhi	r5,4
   20444:	29441304 	addi	r5,r5,4172
   20448:	01840034 	movhi	r6,4096
   2044c:	31841804 	addi	r6,r6,4192
   20450:	00202580 	call	20258 <READ_FIFO>
			value -= 128;
   20454:	e0bffe17 	ldw	r2,-8(fp)
   20458:	10bfe004 	addi	r2,r2,-128
   2045c:	e0bffe15 	stw	r2,-8(fp)
			temp2[row][col] = value; // Store into temp array
   20460:	e0bffe17 	ldw	r2,-8(fp)
   20464:	1007883a 	mov	r3,r2
   20468:	e0bfdc17 	ldw	r2,-144(fp)
   2046c:	100490fa 	slli	r2,r2,3
   20470:	e17fda04 	addi	r5,fp,-152
   20474:	2889883a 	add	r4,r5,r2
   20478:	e0bfdd17 	ldw	r2,-140(fp)
   2047c:	2085883a 	add	r2,r4,r2
   20480:	10801404 	addi	r2,r2,80
   20484:	10c00005 	stb	r3,0(r2)
	{
		printf("Running...\n");

		// Read and level shift data
		// printf("First 8x8 Grid:\n");
		for (j = 0; j < 64; j++)
   20488:	e0bfdb17 	ldw	r2,-148(fp)
   2048c:	10800044 	addi	r2,r2,1
   20490:	e0bfdb15 	stw	r2,-148(fp)
   20494:	e0bfdb17 	ldw	r2,-148(fp)
   20498:	10801010 	cmplti	r2,r2,64
   2049c:	103fb21e 	bne	r2,zero,20368 <levelshift+0x30>
		// 	printf("\n");
		// }

		int temp;
		// Write the values from temp arrays to the FIFO
		for (i = 0; i < 8; i++)
   204a0:	e03fda15 	stw	zero,-152(fp)
   204a4:	00001e06 	br	20520 <levelshift+0x1e8>
		{
			for (j = 0; j < 8; j++)
   204a8:	e03fdb15 	stw	zero,-148(fp)
   204ac:	00001606 	br	20508 <levelshift+0x1d0>
			{
				temp = temp1[i][j];
   204b0:	e0bfda17 	ldw	r2,-152(fp)
   204b4:	100490fa 	slli	r2,r2,3
   204b8:	e13fda04 	addi	r4,fp,-152
   204bc:	2087883a 	add	r3,r4,r2
   204c0:	e0bfdb17 	ldw	r2,-148(fp)
   204c4:	1885883a 	add	r2,r3,r2
   204c8:	10800404 	addi	r2,r2,16
   204cc:	10800003 	ldbu	r2,0(r2)
   204d0:	10803fcc 	andi	r2,r2,255
   204d4:	1080201c 	xori	r2,r2,128
   204d8:	10bfe004 	addi	r2,r2,-128
   204dc:	e0bfff15 	stw	r2,-4(fp)
				WRITE_FIFO(&temp, IN_BASE_2to3, CONTROL_BASE_2to3);
   204e0:	e0bfff04 	addi	r2,fp,-4
   204e4:	1009883a 	mov	r4,r2
   204e8:	01400134 	movhi	r5,4
   204ec:	29441204 	addi	r5,r5,4168
   204f0:	01800134 	movhi	r6,4
   204f4:	31840004 	addi	r6,r6,4096
   204f8:	00201f40 	call	201f4 <WRITE_FIFO>

		int temp;
		// Write the values from temp arrays to the FIFO
		for (i = 0; i < 8; i++)
		{
			for (j = 0; j < 8; j++)
   204fc:	e0bfdb17 	ldw	r2,-148(fp)
   20500:	10800044 	addi	r2,r2,1
   20504:	e0bfdb15 	stw	r2,-148(fp)
   20508:	e0bfdb17 	ldw	r2,-148(fp)
   2050c:	10800210 	cmplti	r2,r2,8
   20510:	103fe71e 	bne	r2,zero,204b0 <levelshift+0x178>
		// 	printf("\n");
		// }

		int temp;
		// Write the values from temp arrays to the FIFO
		for (i = 0; i < 8; i++)
   20514:	e0bfda17 	ldw	r2,-152(fp)
   20518:	10800044 	addi	r2,r2,1
   2051c:	e0bfda15 	stw	r2,-152(fp)
   20520:	e0bfda17 	ldw	r2,-152(fp)
   20524:	10800210 	cmplti	r2,r2,8
   20528:	103fdf1e 	bne	r2,zero,204a8 <levelshift+0x170>
				temp = temp1[i][j];
				WRITE_FIFO(&temp, IN_BASE_2to3, CONTROL_BASE_2to3);
			}
		}

		for (i = 0; i < 8; i++)
   2052c:	e03fda15 	stw	zero,-152(fp)
   20530:	00001e06 	br	205ac <levelshift+0x274>
		{
			for (j = 0; j < 8; j++)
   20534:	e03fdb15 	stw	zero,-148(fp)
   20538:	00001606 	br	20594 <levelshift+0x25c>
			{
				temp = temp2[i][j];
   2053c:	e0bfda17 	ldw	r2,-152(fp)
   20540:	100490fa 	slli	r2,r2,3
   20544:	e17fda04 	addi	r5,fp,-152
   20548:	2887883a 	add	r3,r5,r2
   2054c:	e0bfdb17 	ldw	r2,-148(fp)
   20550:	1885883a 	add	r2,r3,r2
   20554:	10801404 	addi	r2,r2,80
   20558:	10800003 	ldbu	r2,0(r2)
   2055c:	10803fcc 	andi	r2,r2,255
   20560:	1080201c 	xori	r2,r2,128
   20564:	10bfe004 	addi	r2,r2,-128
   20568:	e0bfff15 	stw	r2,-4(fp)
				WRITE_FIFO(&temp, IN_BASE_2to3, CONTROL_BASE_2to3);
   2056c:	e0bfff04 	addi	r2,fp,-4
   20570:	1009883a 	mov	r4,r2
   20574:	01400134 	movhi	r5,4
   20578:	29441204 	addi	r5,r5,4168
   2057c:	01800134 	movhi	r6,4
   20580:	31840004 	addi	r6,r6,4096
   20584:	00201f40 	call	201f4 <WRITE_FIFO>
			}
		}

		for (i = 0; i < 8; i++)
		{
			for (j = 0; j < 8; j++)
   20588:	e0bfdb17 	ldw	r2,-148(fp)
   2058c:	10800044 	addi	r2,r2,1
   20590:	e0bfdb15 	stw	r2,-148(fp)
   20594:	e0bfdb17 	ldw	r2,-148(fp)
   20598:	10800210 	cmplti	r2,r2,8
   2059c:	103fe71e 	bne	r2,zero,2053c <levelshift+0x204>
				temp = temp1[i][j];
				WRITE_FIFO(&temp, IN_BASE_2to3, CONTROL_BASE_2to3);
			}
		}

		for (i = 0; i < 8; i++)
   205a0:	e0bfda17 	ldw	r2,-152(fp)
   205a4:	10800044 	addi	r2,r2,1
   205a8:	e0bfda15 	stw	r2,-152(fp)
   205ac:	e0bfda17 	ldw	r2,-152(fp)
   205b0:	10800210 	cmplti	r2,r2,8
   205b4:	103fdf1e 	bne	r2,zero,20534 <levelshift+0x1fc>
			{
				temp = temp2[i][j];
				WRITE_FIFO(&temp, IN_BASE_2to3, CONTROL_BASE_2to3);
			}
		}
	}
   205b8:	003f6606 	br	20354 <levelshift+0x1c>

000205bc <main>:
}

int main(void)
{
   205bc:	defffe04 	addi	sp,sp,-8
   205c0:	dfc00115 	stw	ra,4(sp)
   205c4:	df000015 	stw	fp,0(sp)
   205c8:	d839883a 	mov	fp,sp
	printf("Starting CPU2\n");
   205cc:	010000b4 	movhi	r4,2
   205d0:	21178f04 	addi	r4,r4,24124
   205d4:	002069c0 	call	2069c <puts>

	delay(100000);
   205d8:	010000b4 	movhi	r4,2
   205dc:	2121a804 	addi	r4,r4,-31072
   205e0:	00202f80 	call	202f8 <delay>
	FIFO_INIT(CONTROL_BASE_2to3);
   205e4:	01000134 	movhi	r4,4
   205e8:	21040004 	addi	r4,r4,4096
   205ec:	00202b80 	call	202b8 <FIFO_INIT>
	delay(100000);
   205f0:	010000b4 	movhi	r4,2
   205f4:	2121a804 	addi	r4,r4,-31072
   205f8:	00202f80 	call	202f8 <delay>

	levelshift();
   205fc:	00203380 	call	20338 <levelshift>

	return 0;
   20600:	0005883a 	mov	r2,zero
}
   20604:	e037883a 	mov	sp,fp
   20608:	dfc00117 	ldw	ra,4(sp)
   2060c:	df000017 	ldw	fp,0(sp)
   20610:	dec00204 	addi	sp,sp,8
   20614:	f800283a 	ret

00020618 <_puts_r>:
   20618:	defff604 	addi	sp,sp,-40
   2061c:	dc400815 	stw	r17,32(sp)
   20620:	2023883a 	mov	r17,r4
   20624:	2809883a 	mov	r4,r5
   20628:	dc000715 	stw	r16,28(sp)
   2062c:	dfc00915 	stw	ra,36(sp)
   20630:	2821883a 	mov	r16,r5
   20634:	00206b00 	call	206b0 <strlen>
   20638:	10c00044 	addi	r3,r2,1
   2063c:	d8800115 	stw	r2,4(sp)
   20640:	89400217 	ldw	r5,8(r17)
   20644:	008000b4 	movhi	r2,2
   20648:	10979304 	addi	r2,r2,24140
   2064c:	d8800215 	stw	r2,8(sp)
   20650:	00800044 	movi	r2,1
   20654:	d8800315 	stw	r2,12(sp)
   20658:	8809883a 	mov	r4,r17
   2065c:	00800084 	movi	r2,2
   20660:	d9800404 	addi	r6,sp,16
   20664:	dc000015 	stw	r16,0(sp)
   20668:	d8c00615 	stw	r3,24(sp)
   2066c:	dec00415 	stw	sp,16(sp)
   20670:	d8800515 	stw	r2,20(sp)
   20674:	002073c0 	call	2073c <__sfvwrite_r>
   20678:	1000061e 	bne	r2,zero,20694 <_puts_r+0x7c>
   2067c:	00800284 	movi	r2,10
   20680:	dfc00917 	ldw	ra,36(sp)
   20684:	dc400817 	ldw	r17,32(sp)
   20688:	dc000717 	ldw	r16,28(sp)
   2068c:	dec00a04 	addi	sp,sp,40
   20690:	f800283a 	ret
   20694:	00bfffc4 	movi	r2,-1
   20698:	003ff906 	br	20680 <_puts_r+0x68>

0002069c <puts>:
   2069c:	008000b4 	movhi	r2,2
   206a0:	109e2504 	addi	r2,r2,30868
   206a4:	200b883a 	mov	r5,r4
   206a8:	11000017 	ldw	r4,0(r2)
   206ac:	00206181 	jmpi	20618 <_puts_r>

000206b0 <strlen>:
   206b0:	208000cc 	andi	r2,r4,3
   206b4:	10001f1e 	bne	r2,zero,20734 <strlen+0x84>
   206b8:	20800017 	ldw	r2,0(r4)
   206bc:	01ffbff4 	movhi	r7,65279
   206c0:	39ffbfc4 	addi	r7,r7,-257
   206c4:	01a02074 	movhi	r6,32897
   206c8:	31a02004 	addi	r6,r6,-32640
   206cc:	11c7883a 	add	r3,r2,r7
   206d0:	0084303a 	nor	r2,zero,r2
   206d4:	1886703a 	and	r3,r3,r2
   206d8:	1986703a 	and	r3,r3,r6
   206dc:	2005883a 	mov	r2,r4
   206e0:	1800101e 	bne	r3,zero,20724 <strlen+0x74>
   206e4:	10800104 	addi	r2,r2,4
   206e8:	10c00017 	ldw	r3,0(r2)
   206ec:	19cb883a 	add	r5,r3,r7
   206f0:	00c6303a 	nor	r3,zero,r3
   206f4:	28c6703a 	and	r3,r5,r3
   206f8:	1986703a 	and	r3,r3,r6
   206fc:	1800091e 	bne	r3,zero,20724 <strlen+0x74>
   20700:	10800104 	addi	r2,r2,4
   20704:	10c00017 	ldw	r3,0(r2)
   20708:	19cb883a 	add	r5,r3,r7
   2070c:	00c6303a 	nor	r3,zero,r3
   20710:	28c6703a 	and	r3,r5,r3
   20714:	1986703a 	and	r3,r3,r6
   20718:	183ff226 	beq	r3,zero,206e4 <strlen+0x34>
   2071c:	00000106 	br	20724 <strlen+0x74>
   20720:	10800044 	addi	r2,r2,1
   20724:	10c00007 	ldb	r3,0(r2)
   20728:	183ffd1e 	bne	r3,zero,20720 <strlen+0x70>
   2072c:	1105c83a 	sub	r2,r2,r4
   20730:	f800283a 	ret
   20734:	2005883a 	mov	r2,r4
   20738:	003ffa06 	br	20724 <strlen+0x74>

0002073c <__sfvwrite_r>:
   2073c:	30800217 	ldw	r2,8(r6)
   20740:	defff504 	addi	sp,sp,-44
   20744:	dd400615 	stw	r21,24(sp)
   20748:	dd000515 	stw	r20,20(sp)
   2074c:	dc000115 	stw	r16,4(sp)
   20750:	dfc00a15 	stw	ra,40(sp)
   20754:	df000915 	stw	fp,36(sp)
   20758:	ddc00815 	stw	r23,32(sp)
   2075c:	dd800715 	stw	r22,28(sp)
   20760:	dcc00415 	stw	r19,16(sp)
   20764:	dc800315 	stw	r18,12(sp)
   20768:	dc400215 	stw	r17,8(sp)
   2076c:	3029883a 	mov	r20,r6
   20770:	202b883a 	mov	r21,r4
   20774:	2821883a 	mov	r16,r5
   20778:	10002126 	beq	r2,zero,20800 <__sfvwrite_r+0xc4>
   2077c:	2880030b 	ldhu	r2,12(r5)
   20780:	10c0020c 	andi	r3,r2,8
   20784:	18ffffcc 	andi	r3,r3,65535
   20788:	18e0001c 	xori	r3,r3,32768
   2078c:	18e00004 	addi	r3,r3,-32768
   20790:	18002826 	beq	r3,zero,20834 <__sfvwrite_r+0xf8>
   20794:	28c00417 	ldw	r3,16(r5)
   20798:	18002626 	beq	r3,zero,20834 <__sfvwrite_r+0xf8>
   2079c:	10c0008c 	andi	r3,r2,2
   207a0:	18ffffcc 	andi	r3,r3,65535
   207a4:	18e0001c 	xori	r3,r3,32768
   207a8:	18e00004 	addi	r3,r3,-32768
   207ac:	a4400017 	ldw	r17,0(r20)
   207b0:	18002b26 	beq	r3,zero,20860 <__sfvwrite_r+0x124>
   207b4:	0027883a 	mov	r19,zero
   207b8:	0025883a 	mov	r18,zero
   207bc:	05810004 	movi	r22,1024
   207c0:	980d883a 	mov	r6,r19
   207c4:	a809883a 	mov	r4,r21
   207c8:	90004f26 	beq	r18,zero,20908 <__sfvwrite_r+0x1cc>
   207cc:	900f883a 	mov	r7,r18
   207d0:	81400717 	ldw	r5,28(r16)
   207d4:	b480012e 	bgeu	r22,r18,207dc <__sfvwrite_r+0xa0>
   207d8:	01c10004 	movi	r7,1024
   207dc:	80800917 	ldw	r2,36(r16)
   207e0:	103ee83a 	callr	r2
   207e4:	0080540e 	bge	zero,r2,20938 <__sfvwrite_r+0x1fc>
   207e8:	a0c00217 	ldw	r3,8(r20)
   207ec:	98a7883a 	add	r19,r19,r2
   207f0:	90a5c83a 	sub	r18,r18,r2
   207f4:	1885c83a 	sub	r2,r3,r2
   207f8:	a0800215 	stw	r2,8(r20)
   207fc:	103ff01e 	bne	r2,zero,207c0 <__sfvwrite_r+0x84>
   20800:	0005883a 	mov	r2,zero
   20804:	dfc00a17 	ldw	ra,40(sp)
   20808:	df000917 	ldw	fp,36(sp)
   2080c:	ddc00817 	ldw	r23,32(sp)
   20810:	dd800717 	ldw	r22,28(sp)
   20814:	dd400617 	ldw	r21,24(sp)
   20818:	dd000517 	ldw	r20,20(sp)
   2081c:	dcc00417 	ldw	r19,16(sp)
   20820:	dc800317 	ldw	r18,12(sp)
   20824:	dc400217 	ldw	r17,8(sp)
   20828:	dc000117 	ldw	r16,4(sp)
   2082c:	dec00b04 	addi	sp,sp,44
   20830:	f800283a 	ret
   20834:	a809883a 	mov	r4,r21
   20838:	800b883a 	mov	r5,r16
   2083c:	0021dc80 	call	21dc8 <__swsetup_r>
   20840:	1000f01e 	bne	r2,zero,20c04 <__sfvwrite_r+0x4c8>
   20844:	8080030b 	ldhu	r2,12(r16)
   20848:	a4400017 	ldw	r17,0(r20)
   2084c:	10c0008c 	andi	r3,r2,2
   20850:	18ffffcc 	andi	r3,r3,65535
   20854:	18e0001c 	xori	r3,r3,32768
   20858:	18e00004 	addi	r3,r3,-32768
   2085c:	183fd51e 	bne	r3,zero,207b4 <__sfvwrite_r+0x78>
   20860:	10c0004c 	andi	r3,r2,1
   20864:	002d883a 	mov	r22,zero
   20868:	1800381e 	bne	r3,zero,2094c <__sfvwrite_r+0x210>
   2086c:	0025883a 	mov	r18,zero
   20870:	90002126 	beq	r18,zero,208f8 <__sfvwrite_r+0x1bc>
   20874:	10c0800c 	andi	r3,r2,512
   20878:	18ffffcc 	andi	r3,r3,65535
   2087c:	18e0001c 	xori	r3,r3,32768
   20880:	18e00004 	addi	r3,r3,-32768
   20884:	84c00217 	ldw	r19,8(r16)
   20888:	18006b26 	beq	r3,zero,20a38 <__sfvwrite_r+0x2fc>
   2088c:	980f883a 	mov	r7,r19
   20890:	94c08636 	bltu	r18,r19,20aac <__sfvwrite_r+0x370>
   20894:	10c1200c 	andi	r3,r2,1152
   20898:	18009f1e 	bne	r3,zero,20b18 <__sfvwrite_r+0x3dc>
   2089c:	81000017 	ldw	r4,0(r16)
   208a0:	982f883a 	mov	r23,r19
   208a4:	9039883a 	mov	fp,r18
   208a8:	9027883a 	mov	r19,r18
   208ac:	380d883a 	mov	r6,r7
   208b0:	b00b883a 	mov	r5,r22
   208b4:	d9c00015 	stw	r7,0(sp)
   208b8:	00215dc0 	call	215dc <memmove>
   208bc:	d9c00017 	ldw	r7,0(sp)
   208c0:	81000217 	ldw	r4,8(r16)
   208c4:	80800017 	ldw	r2,0(r16)
   208c8:	25efc83a 	sub	r23,r4,r23
   208cc:	11cf883a 	add	r7,r2,r7
   208d0:	85c00215 	stw	r23,8(r16)
   208d4:	81c00015 	stw	r7,0(r16)
   208d8:	a0800217 	ldw	r2,8(r20)
   208dc:	b72d883a 	add	r22,r22,fp
   208e0:	9725c83a 	sub	r18,r18,fp
   208e4:	14e7c83a 	sub	r19,r2,r19
   208e8:	a4c00215 	stw	r19,8(r20)
   208ec:	983fc426 	beq	r19,zero,20800 <__sfvwrite_r+0xc4>
   208f0:	8080030b 	ldhu	r2,12(r16)
   208f4:	903fdf1e 	bne	r18,zero,20874 <__sfvwrite_r+0x138>
   208f8:	8d800017 	ldw	r22,0(r17)
   208fc:	8c800117 	ldw	r18,4(r17)
   20900:	8c400204 	addi	r17,r17,8
   20904:	003fda06 	br	20870 <__sfvwrite_r+0x134>
   20908:	8cc00017 	ldw	r19,0(r17)
   2090c:	8c800117 	ldw	r18,4(r17)
   20910:	8c400204 	addi	r17,r17,8
   20914:	003faa06 	br	207c0 <__sfvwrite_r+0x84>
   20918:	00217680 	call	21768 <_realloc_r>
   2091c:	102f883a 	mov	r23,r2
   20920:	10009f1e 	bne	r2,zero,20ba0 <__sfvwrite_r+0x464>
   20924:	81400417 	ldw	r5,16(r16)
   20928:	a809883a 	mov	r4,r21
   2092c:	002257c0 	call	2257c <_free_r>
   20930:	00800304 	movi	r2,12
   20934:	a8800015 	stw	r2,0(r21)
   20938:	80c0030b 	ldhu	r3,12(r16)
   2093c:	00bfffc4 	movi	r2,-1
   20940:	18c01014 	ori	r3,r3,64
   20944:	80c0030d 	sth	r3,12(r16)
   20948:	003fae06 	br	20804 <__sfvwrite_r+0xc8>
   2094c:	0007883a 	mov	r3,zero
   20950:	0039883a 	mov	fp,zero
   20954:	0025883a 	mov	r18,zero
   20958:	90001e26 	beq	r18,zero,209d4 <__sfvwrite_r+0x298>
   2095c:	18006526 	beq	r3,zero,20af4 <__sfvwrite_r+0x3b8>
   20960:	b02f883a 	mov	r23,r22
   20964:	9580012e 	bgeu	r18,r22,2096c <__sfvwrite_r+0x230>
   20968:	902f883a 	mov	r23,r18
   2096c:	81000017 	ldw	r4,0(r16)
   20970:	80800417 	ldw	r2,16(r16)
   20974:	84c00217 	ldw	r19,8(r16)
   20978:	81c00517 	ldw	r7,20(r16)
   2097c:	1100022e 	bgeu	r2,r4,20988 <__sfvwrite_r+0x24c>
   20980:	99e7883a 	add	r19,r19,r7
   20984:	9dc01816 	blt	r19,r23,209e8 <__sfvwrite_r+0x2ac>
   20988:	b9c03b16 	blt	r23,r7,20a78 <__sfvwrite_r+0x33c>
   2098c:	80800917 	ldw	r2,36(r16)
   20990:	81400717 	ldw	r5,28(r16)
   20994:	a809883a 	mov	r4,r21
   20998:	d8c00015 	stw	r3,0(sp)
   2099c:	e00d883a 	mov	r6,fp
   209a0:	103ee83a 	callr	r2
   209a4:	1027883a 	mov	r19,r2
   209a8:	d8c00017 	ldw	r3,0(sp)
   209ac:	00bfe20e 	bge	zero,r2,20938 <__sfvwrite_r+0x1fc>
   209b0:	b4edc83a 	sub	r22,r22,r19
   209b4:	b0001a26 	beq	r22,zero,20a20 <__sfvwrite_r+0x2e4>
   209b8:	a0800217 	ldw	r2,8(r20)
   209bc:	e4f9883a 	add	fp,fp,r19
   209c0:	94e5c83a 	sub	r18,r18,r19
   209c4:	14e7c83a 	sub	r19,r2,r19
   209c8:	a4c00215 	stw	r19,8(r20)
   209cc:	983f8c26 	beq	r19,zero,20800 <__sfvwrite_r+0xc4>
   209d0:	903fe21e 	bne	r18,zero,2095c <__sfvwrite_r+0x220>
   209d4:	8f000017 	ldw	fp,0(r17)
   209d8:	8c800117 	ldw	r18,4(r17)
   209dc:	0007883a 	mov	r3,zero
   209e0:	8c400204 	addi	r17,r17,8
   209e4:	003fdc06 	br	20958 <__sfvwrite_r+0x21c>
   209e8:	e00b883a 	mov	r5,fp
   209ec:	980d883a 	mov	r6,r19
   209f0:	d8c00015 	stw	r3,0(sp)
   209f4:	00215dc0 	call	215dc <memmove>
   209f8:	80800017 	ldw	r2,0(r16)
   209fc:	a809883a 	mov	r4,r21
   20a00:	800b883a 	mov	r5,r16
   20a04:	14c5883a 	add	r2,r2,r19
   20a08:	80800015 	stw	r2,0(r16)
   20a0c:	0021f3c0 	call	21f3c <_fflush_r>
   20a10:	d8c00017 	ldw	r3,0(sp)
   20a14:	103fc81e 	bne	r2,zero,20938 <__sfvwrite_r+0x1fc>
   20a18:	b4edc83a 	sub	r22,r22,r19
   20a1c:	b03fe61e 	bne	r22,zero,209b8 <__sfvwrite_r+0x27c>
   20a20:	a809883a 	mov	r4,r21
   20a24:	800b883a 	mov	r5,r16
   20a28:	0021f3c0 	call	21f3c <_fflush_r>
   20a2c:	103fc21e 	bne	r2,zero,20938 <__sfvwrite_r+0x1fc>
   20a30:	0007883a 	mov	r3,zero
   20a34:	003fe006 	br	209b8 <__sfvwrite_r+0x27c>
   20a38:	81000017 	ldw	r4,0(r16)
   20a3c:	80800417 	ldw	r2,16(r16)
   20a40:	1100022e 	bgeu	r2,r4,20a4c <__sfvwrite_r+0x310>
   20a44:	9839883a 	mov	fp,r19
   20a48:	9c806036 	bltu	r19,r18,20bcc <__sfvwrite_r+0x490>
   20a4c:	81c00517 	ldw	r7,20(r16)
   20a50:	91c01c36 	bltu	r18,r7,20ac4 <__sfvwrite_r+0x388>
   20a54:	80800917 	ldw	r2,36(r16)
   20a58:	81400717 	ldw	r5,28(r16)
   20a5c:	a809883a 	mov	r4,r21
   20a60:	b00d883a 	mov	r6,r22
   20a64:	103ee83a 	callr	r2
   20a68:	1027883a 	mov	r19,r2
   20a6c:	00bfb20e 	bge	zero,r2,20938 <__sfvwrite_r+0x1fc>
   20a70:	1039883a 	mov	fp,r2
   20a74:	003f9806 	br	208d8 <__sfvwrite_r+0x19c>
   20a78:	b80d883a 	mov	r6,r23
   20a7c:	e00b883a 	mov	r5,fp
   20a80:	d8c00015 	stw	r3,0(sp)
   20a84:	00215dc0 	call	215dc <memmove>
   20a88:	80800217 	ldw	r2,8(r16)
   20a8c:	81000017 	ldw	r4,0(r16)
   20a90:	b827883a 	mov	r19,r23
   20a94:	15c5c83a 	sub	r2,r2,r23
   20a98:	25ef883a 	add	r23,r4,r23
   20a9c:	80800215 	stw	r2,8(r16)
   20aa0:	85c00015 	stw	r23,0(r16)
   20aa4:	d8c00017 	ldw	r3,0(sp)
   20aa8:	003fc106 	br	209b0 <__sfvwrite_r+0x274>
   20aac:	81000017 	ldw	r4,0(r16)
   20ab0:	902f883a 	mov	r23,r18
   20ab4:	9039883a 	mov	fp,r18
   20ab8:	9027883a 	mov	r19,r18
   20abc:	900f883a 	mov	r7,r18
   20ac0:	003f7a06 	br	208ac <__sfvwrite_r+0x170>
   20ac4:	b00b883a 	mov	r5,r22
   20ac8:	900d883a 	mov	r6,r18
   20acc:	00215dc0 	call	215dc <memmove>
   20ad0:	80c00217 	ldw	r3,8(r16)
   20ad4:	80800017 	ldw	r2,0(r16)
   20ad8:	9027883a 	mov	r19,r18
   20adc:	1c87c83a 	sub	r3,r3,r18
   20ae0:	1485883a 	add	r2,r2,r18
   20ae4:	80c00215 	stw	r3,8(r16)
   20ae8:	80800015 	stw	r2,0(r16)
   20aec:	9039883a 	mov	fp,r18
   20af0:	003f7906 	br	208d8 <__sfvwrite_r+0x19c>
   20af4:	e009883a 	mov	r4,fp
   20af8:	01400284 	movi	r5,10
   20afc:	900d883a 	mov	r6,r18
   20b00:	00213a40 	call	213a4 <memchr>
   20b04:	10003c26 	beq	r2,zero,20bf8 <__sfvwrite_r+0x4bc>
   20b08:	15800044 	addi	r22,r2,1
   20b0c:	b72dc83a 	sub	r22,r22,fp
   20b10:	00c00044 	movi	r3,1
   20b14:	003f9206 	br	20960 <__sfvwrite_r+0x224>
   20b18:	81000517 	ldw	r4,20(r16)
   20b1c:	81400417 	ldw	r5,16(r16)
   20b20:	80c00017 	ldw	r3,0(r16)
   20b24:	210d883a 	add	r6,r4,r4
   20b28:	3109883a 	add	r4,r6,r4
   20b2c:	2026d7fa 	srli	r19,r4,31
   20b30:	1979c83a 	sub	fp,r3,r5
   20b34:	e1800044 	addi	r6,fp,1
   20b38:	9909883a 	add	r4,r19,r4
   20b3c:	2027d07a 	srai	r19,r4,1
   20b40:	3489883a 	add	r4,r6,r18
   20b44:	980d883a 	mov	r6,r19
   20b48:	9900022e 	bgeu	r19,r4,20b54 <__sfvwrite_r+0x418>
   20b4c:	2027883a 	mov	r19,r4
   20b50:	200d883a 	mov	r6,r4
   20b54:	1081000c 	andi	r2,r2,1024
   20b58:	10bfffcc 	andi	r2,r2,65535
   20b5c:	10a0001c 	xori	r2,r2,32768
   20b60:	10a00004 	addi	r2,r2,-32768
   20b64:	a809883a 	mov	r4,r21
   20b68:	103f6b26 	beq	r2,zero,20918 <__sfvwrite_r+0x1dc>
   20b6c:	300b883a 	mov	r5,r6
   20b70:	0020c200 	call	20c20 <_malloc_r>
   20b74:	102f883a 	mov	r23,r2
   20b78:	103f6d26 	beq	r2,zero,20930 <__sfvwrite_r+0x1f4>
   20b7c:	81400417 	ldw	r5,16(r16)
   20b80:	1009883a 	mov	r4,r2
   20b84:	e00d883a 	mov	r6,fp
   20b88:	002149c0 	call	2149c <memcpy>
   20b8c:	8080030b 	ldhu	r2,12(r16)
   20b90:	00fedfc4 	movi	r3,-1153
   20b94:	10c4703a 	and	r2,r2,r3
   20b98:	10802014 	ori	r2,r2,128
   20b9c:	8080030d 	sth	r2,12(r16)
   20ba0:	bf09883a 	add	r4,r23,fp
   20ba4:	9f07c83a 	sub	r3,r19,fp
   20ba8:	85c00415 	stw	r23,16(r16)
   20bac:	84c00515 	stw	r19,20(r16)
   20bb0:	81000015 	stw	r4,0(r16)
   20bb4:	902f883a 	mov	r23,r18
   20bb8:	80c00215 	stw	r3,8(r16)
   20bbc:	9039883a 	mov	fp,r18
   20bc0:	9027883a 	mov	r19,r18
   20bc4:	900f883a 	mov	r7,r18
   20bc8:	003f3806 	br	208ac <__sfvwrite_r+0x170>
   20bcc:	b00b883a 	mov	r5,r22
   20bd0:	980d883a 	mov	r6,r19
   20bd4:	00215dc0 	call	215dc <memmove>
   20bd8:	80800017 	ldw	r2,0(r16)
   20bdc:	a809883a 	mov	r4,r21
   20be0:	800b883a 	mov	r5,r16
   20be4:	14c5883a 	add	r2,r2,r19
   20be8:	80800015 	stw	r2,0(r16)
   20bec:	0021f3c0 	call	21f3c <_fflush_r>
   20bf0:	103f3926 	beq	r2,zero,208d8 <__sfvwrite_r+0x19c>
   20bf4:	003f5006 	br	20938 <__sfvwrite_r+0x1fc>
   20bf8:	95800044 	addi	r22,r18,1
   20bfc:	00c00044 	movi	r3,1
   20c00:	003f5706 	br	20960 <__sfvwrite_r+0x224>
   20c04:	80c0030b 	ldhu	r3,12(r16)
   20c08:	00bfffc4 	movi	r2,-1
   20c0c:	18c01014 	ori	r3,r3,64
   20c10:	80c0030d 	sth	r3,12(r16)
   20c14:	00c00244 	movi	r3,9
   20c18:	a8c00015 	stw	r3,0(r21)
   20c1c:	003ef906 	br	20804 <__sfvwrite_r+0xc8>

00020c20 <_malloc_r>:
   20c20:	defff604 	addi	sp,sp,-40
   20c24:	dc800215 	stw	r18,8(sp)
   20c28:	dfc00915 	stw	ra,36(sp)
   20c2c:	df000815 	stw	fp,32(sp)
   20c30:	ddc00715 	stw	r23,28(sp)
   20c34:	dd800615 	stw	r22,24(sp)
   20c38:	dd400515 	stw	r21,20(sp)
   20c3c:	dd000415 	stw	r20,16(sp)
   20c40:	dcc00315 	stw	r19,12(sp)
   20c44:	dc400115 	stw	r17,4(sp)
   20c48:	dc000015 	stw	r16,0(sp)
   20c4c:	288002c4 	addi	r2,r5,11
   20c50:	00c00584 	movi	r3,22
   20c54:	2025883a 	mov	r18,r4
   20c58:	18802b2e 	bgeu	r3,r2,20d08 <_malloc_r+0xe8>
   20c5c:	047ffe04 	movi	r17,-8
   20c60:	1462703a 	and	r17,r2,r17
   20c64:	88002a16 	blt	r17,zero,20d10 <_malloc_r+0xf0>
   20c68:	89402936 	bltu	r17,r5,20d10 <_malloc_r+0xf0>
   20c6c:	9009883a 	mov	r4,r18
   20c70:	00237200 	call	23720 <__malloc_lock>
   20c74:	00807dc4 	movi	r2,503
   20c78:	14402936 	bltu	r2,r17,20d20 <_malloc_r+0x100>
   20c7c:	8808d0fa 	srli	r4,r17,3
   20c80:	04c000b4 	movhi	r19,2
   20c84:	9cd8a004 	addi	r19,r19,25216
   20c88:	2105883a 	add	r2,r4,r4
   20c8c:	1085883a 	add	r2,r2,r2
   20c90:	1085883a 	add	r2,r2,r2
   20c94:	9885883a 	add	r2,r19,r2
   20c98:	14000317 	ldw	r16,12(r2)
   20c9c:	80815526 	beq	r16,r2,211f4 <_malloc_r+0x5d4>
   20ca0:	81000117 	ldw	r4,4(r16)
   20ca4:	00bfff04 	movi	r2,-4
   20ca8:	80c00317 	ldw	r3,12(r16)
   20cac:	2084703a 	and	r2,r4,r2
   20cb0:	8085883a 	add	r2,r16,r2
   20cb4:	11800117 	ldw	r6,4(r2)
   20cb8:	81400217 	ldw	r5,8(r16)
   20cbc:	9009883a 	mov	r4,r18
   20cc0:	31800054 	ori	r6,r6,1
   20cc4:	11800115 	stw	r6,4(r2)
   20cc8:	28c00315 	stw	r3,12(r5)
   20ccc:	19400215 	stw	r5,8(r3)
   20cd0:	00237400 	call	23740 <__malloc_unlock>
   20cd4:	80800204 	addi	r2,r16,8
   20cd8:	dfc00917 	ldw	ra,36(sp)
   20cdc:	df000817 	ldw	fp,32(sp)
   20ce0:	ddc00717 	ldw	r23,28(sp)
   20ce4:	dd800617 	ldw	r22,24(sp)
   20ce8:	dd400517 	ldw	r21,20(sp)
   20cec:	dd000417 	ldw	r20,16(sp)
   20cf0:	dcc00317 	ldw	r19,12(sp)
   20cf4:	dc800217 	ldw	r18,8(sp)
   20cf8:	dc400117 	ldw	r17,4(sp)
   20cfc:	dc000017 	ldw	r16,0(sp)
   20d00:	dec00a04 	addi	sp,sp,40
   20d04:	f800283a 	ret
   20d08:	04400404 	movi	r17,16
   20d0c:	897fd72e 	bgeu	r17,r5,20c6c <_malloc_r+0x4c>
   20d10:	00800304 	movi	r2,12
   20d14:	90800015 	stw	r2,0(r18)
   20d18:	0005883a 	mov	r2,zero
   20d1c:	003fee06 	br	20cd8 <_malloc_r+0xb8>
   20d20:	8808d27a 	srli	r4,r17,9
   20d24:	20007126 	beq	r4,zero,20eec <_malloc_r+0x2cc>
   20d28:	00800104 	movi	r2,4
   20d2c:	1100eb36 	bltu	r2,r4,210dc <_malloc_r+0x4bc>
   20d30:	8808d1ba 	srli	r4,r17,6
   20d34:	21000e04 	addi	r4,r4,56
   20d38:	210b883a 	add	r5,r4,r4
   20d3c:	294b883a 	add	r5,r5,r5
   20d40:	294b883a 	add	r5,r5,r5
   20d44:	04c000b4 	movhi	r19,2
   20d48:	9cd8a004 	addi	r19,r19,25216
   20d4c:	994b883a 	add	r5,r19,r5
   20d50:	2c000317 	ldw	r16,12(r5)
   20d54:	2c000e26 	beq	r5,r16,20d90 <_malloc_r+0x170>
   20d58:	80c00117 	ldw	r3,4(r16)
   20d5c:	01ffff04 	movi	r7,-4
   20d60:	018003c4 	movi	r6,15
   20d64:	19c6703a 	and	r3,r3,r7
   20d68:	1c45c83a 	sub	r2,r3,r17
   20d6c:	30800716 	blt	r6,r2,20d8c <_malloc_r+0x16c>
   20d70:	1000610e 	bge	r2,zero,20ef8 <_malloc_r+0x2d8>
   20d74:	84000317 	ldw	r16,12(r16)
   20d78:	2c000526 	beq	r5,r16,20d90 <_malloc_r+0x170>
   20d7c:	80c00117 	ldw	r3,4(r16)
   20d80:	19c6703a 	and	r3,r3,r7
   20d84:	1c45c83a 	sub	r2,r3,r17
   20d88:	30bff90e 	bge	r6,r2,20d70 <_malloc_r+0x150>
   20d8c:	213fffc4 	addi	r4,r4,-1
   20d90:	21000044 	addi	r4,r4,1
   20d94:	9c000417 	ldw	r16,16(r19)
   20d98:	00c000b4 	movhi	r3,2
   20d9c:	18d8a004 	addi	r3,r3,25216
   20da0:	1a400204 	addi	r9,r3,8
   20da4:	8240ff26 	beq	r16,r9,211a4 <_malloc_r+0x584>
   20da8:	81400117 	ldw	r5,4(r16)
   20dac:	00bfff04 	movi	r2,-4
   20db0:	018003c4 	movi	r6,15
   20db4:	2884703a 	and	r2,r5,r2
   20db8:	144bc83a 	sub	r5,r2,r17
   20dbc:	3140ea16 	blt	r6,r5,21168 <_malloc_r+0x548>
   20dc0:	1a400515 	stw	r9,20(r3)
   20dc4:	1a400415 	stw	r9,16(r3)
   20dc8:	2800570e 	bge	r5,zero,20f28 <_malloc_r+0x308>
   20dcc:	01407fc4 	movi	r5,511
   20dd0:	2880ca36 	bltu	r5,r2,210fc <_malloc_r+0x4dc>
   20dd4:	1004d0fa 	srli	r2,r2,3
   20dd8:	02000044 	movi	r8,1
   20ddc:	19c00117 	ldw	r7,4(r3)
   20de0:	108b883a 	add	r5,r2,r2
   20de4:	294b883a 	add	r5,r5,r5
   20de8:	1005d0ba 	srai	r2,r2,2
   20dec:	294b883a 	add	r5,r5,r5
   20df0:	28cb883a 	add	r5,r5,r3
   20df4:	29800217 	ldw	r6,8(r5)
   20df8:	4084983a 	sll	r2,r8,r2
   20dfc:	81400315 	stw	r5,12(r16)
   20e00:	81800215 	stw	r6,8(r16)
   20e04:	11c4b03a 	or	r2,r2,r7
   20e08:	18800115 	stw	r2,4(r3)
   20e0c:	2c000215 	stw	r16,8(r5)
   20e10:	34000315 	stw	r16,12(r6)
   20e14:	200bd0ba 	srai	r5,r4,2
   20e18:	00c00044 	movi	r3,1
   20e1c:	194a983a 	sll	r5,r3,r5
   20e20:	11404936 	bltu	r2,r5,20f48 <_malloc_r+0x328>
   20e24:	1146703a 	and	r3,r2,r5
   20e28:	18000a1e 	bne	r3,zero,20e54 <_malloc_r+0x234>
   20e2c:	00ffff04 	movi	r3,-4
   20e30:	294b883a 	add	r5,r5,r5
   20e34:	20c8703a 	and	r4,r4,r3
   20e38:	1146703a 	and	r3,r2,r5
   20e3c:	21000104 	addi	r4,r4,4
   20e40:	1800041e 	bne	r3,zero,20e54 <_malloc_r+0x234>
   20e44:	294b883a 	add	r5,r5,r5
   20e48:	1146703a 	and	r3,r2,r5
   20e4c:	21000104 	addi	r4,r4,4
   20e50:	183ffc26 	beq	r3,zero,20e44 <_malloc_r+0x224>
   20e54:	023fff04 	movi	r8,-4
   20e58:	01c003c4 	movi	r7,15
   20e5c:	2105883a 	add	r2,r4,r4
   20e60:	1085883a 	add	r2,r2,r2
   20e64:	1085883a 	add	r2,r2,r2
   20e68:	9899883a 	add	r12,r19,r2
   20e6c:	62800304 	addi	r10,r12,12
   20e70:	2017883a 	mov	r11,r4
   20e74:	54000017 	ldw	r16,0(r10)
   20e78:	51bffd04 	addi	r6,r10,-12
   20e7c:	8180041e 	bne	r16,r6,20e90 <_malloc_r+0x270>
   20e80:	0000ca06 	br	211ac <_malloc_r+0x58c>
   20e84:	10001c0e 	bge	r2,zero,20ef8 <_malloc_r+0x2d8>
   20e88:	84000317 	ldw	r16,12(r16)
   20e8c:	8180c726 	beq	r16,r6,211ac <_malloc_r+0x58c>
   20e90:	80c00117 	ldw	r3,4(r16)
   20e94:	1a06703a 	and	r3,r3,r8
   20e98:	1c45c83a 	sub	r2,r3,r17
   20e9c:	38bff90e 	bge	r7,r2,20e84 <_malloc_r+0x264>
   20ea0:	81000317 	ldw	r4,12(r16)
   20ea4:	81400217 	ldw	r5,8(r16)
   20ea8:	8447883a 	add	r3,r16,r17
   20eac:	8c400054 	ori	r17,r17,1
   20eb0:	29000315 	stw	r4,12(r5)
   20eb4:	21400215 	stw	r5,8(r4)
   20eb8:	84400115 	stw	r17,4(r16)
   20ebc:	1889883a 	add	r4,r3,r2
   20ec0:	11400054 	ori	r5,r2,1
   20ec4:	98c00515 	stw	r3,20(r19)
   20ec8:	98c00415 	stw	r3,16(r19)
   20ecc:	20800015 	stw	r2,0(r4)
   20ed0:	1a400315 	stw	r9,12(r3)
   20ed4:	1a400215 	stw	r9,8(r3)
   20ed8:	19400115 	stw	r5,4(r3)
   20edc:	9009883a 	mov	r4,r18
   20ee0:	00237400 	call	23740 <__malloc_unlock>
   20ee4:	80800204 	addi	r2,r16,8
   20ee8:	003f7b06 	br	20cd8 <_malloc_r+0xb8>
   20eec:	8808d0fa 	srli	r4,r17,3
   20ef0:	210b883a 	add	r5,r4,r4
   20ef4:	003f9106 	br	20d3c <_malloc_r+0x11c>
   20ef8:	80c7883a 	add	r3,r16,r3
   20efc:	19400117 	ldw	r5,4(r3)
   20f00:	80800317 	ldw	r2,12(r16)
   20f04:	81000217 	ldw	r4,8(r16)
   20f08:	29400054 	ori	r5,r5,1
   20f0c:	19400115 	stw	r5,4(r3)
   20f10:	20800315 	stw	r2,12(r4)
   20f14:	11000215 	stw	r4,8(r2)
   20f18:	9009883a 	mov	r4,r18
   20f1c:	00237400 	call	23740 <__malloc_unlock>
   20f20:	80800204 	addi	r2,r16,8
   20f24:	003f6c06 	br	20cd8 <_malloc_r+0xb8>
   20f28:	8085883a 	add	r2,r16,r2
   20f2c:	10c00117 	ldw	r3,4(r2)
   20f30:	9009883a 	mov	r4,r18
   20f34:	18c00054 	ori	r3,r3,1
   20f38:	10c00115 	stw	r3,4(r2)
   20f3c:	00237400 	call	23740 <__malloc_unlock>
   20f40:	80800204 	addi	r2,r16,8
   20f44:	003f6406 	br	20cd8 <_malloc_r+0xb8>
   20f48:	9c000217 	ldw	r16,8(r19)
   20f4c:	00bfff04 	movi	r2,-4
   20f50:	85400117 	ldw	r21,4(r16)
   20f54:	a8aa703a 	and	r21,r21,r2
   20f58:	ac400336 	bltu	r21,r17,20f68 <_malloc_r+0x348>
   20f5c:	ac45c83a 	sub	r2,r21,r17
   20f60:	00c003c4 	movi	r3,15
   20f64:	18805316 	blt	r3,r2,210b4 <_malloc_r+0x494>
   20f68:	d5e6a217 	ldw	r23,-25976(gp)
   20f6c:	d0e00217 	ldw	r3,-32760(gp)
   20f70:	00bfffc4 	movi	r2,-1
   20f74:	8579883a 	add	fp,r16,r21
   20f78:	8def883a 	add	r23,r17,r23
   20f7c:	1880d226 	beq	r3,r2,212c8 <_malloc_r+0x6a8>
   20f80:	bdc403c4 	addi	r23,r23,4111
   20f84:	00bc0004 	movi	r2,-4096
   20f88:	b8ae703a 	and	r23,r23,r2
   20f8c:	9009883a 	mov	r4,r18
   20f90:	b80b883a 	mov	r5,r23
   20f94:	0021d640 	call	21d64 <_sbrk_r>
   20f98:	1029883a 	mov	r20,r2
   20f9c:	00bfffc4 	movi	r2,-1
   20fa0:	a080d126 	beq	r20,r2,212e8 <_malloc_r+0x6c8>
   20fa4:	a7009f36 	bltu	r20,fp,21224 <_malloc_r+0x604>
   20fa8:	058000f4 	movhi	r22,3
   20fac:	b5a4ce04 	addi	r22,r22,-27848
   20fb0:	b0800017 	ldw	r2,0(r22)
   20fb4:	b885883a 	add	r2,r23,r2
   20fb8:	b0800015 	stw	r2,0(r22)
   20fbc:	e500cf26 	beq	fp,r20,212fc <_malloc_r+0x6dc>
   20fc0:	d1200217 	ldw	r4,-32760(gp)
   20fc4:	00ffffc4 	movi	r3,-1
   20fc8:	20c0e026 	beq	r4,r3,2134c <_malloc_r+0x72c>
   20fcc:	a739c83a 	sub	fp,r20,fp
   20fd0:	1705883a 	add	r2,r2,fp
   20fd4:	b0800015 	stw	r2,0(r22)
   20fd8:	a08001cc 	andi	r2,r20,7
   20fdc:	1000a526 	beq	r2,zero,21274 <_malloc_r+0x654>
   20fe0:	a0a9c83a 	sub	r20,r20,r2
   20fe4:	00c40204 	movi	r3,4104
   20fe8:	a5000204 	addi	r20,r20,8
   20fec:	1885c83a 	sub	r2,r3,r2
   20ff0:	a5c7883a 	add	r3,r20,r23
   20ff4:	18c3ffcc 	andi	r3,r3,4095
   20ff8:	10efc83a 	sub	r23,r2,r3
   20ffc:	9009883a 	mov	r4,r18
   21000:	b80b883a 	mov	r5,r23
   21004:	0021d640 	call	21d64 <_sbrk_r>
   21008:	00ffffc4 	movi	r3,-1
   2100c:	10c0cc26 	beq	r2,r3,21340 <_malloc_r+0x720>
   21010:	1505c83a 	sub	r2,r2,r20
   21014:	b887883a 	add	r3,r23,r2
   21018:	18c00054 	ori	r3,r3,1
   2101c:	b0800017 	ldw	r2,0(r22)
   21020:	9d000215 	stw	r20,8(r19)
   21024:	a0c00115 	stw	r3,4(r20)
   21028:	b885883a 	add	r2,r23,r2
   2102c:	b0800015 	stw	r2,0(r22)
   21030:	84c00e26 	beq	r16,r19,2106c <_malloc_r+0x44c>
   21034:	00c003c4 	movi	r3,15
   21038:	1d40902e 	bgeu	r3,r21,2127c <_malloc_r+0x65c>
   2103c:	ad7ffd04 	addi	r21,r21,-12
   21040:	013ffe04 	movi	r4,-8
   21044:	a908703a 	and	r4,r21,r4
   21048:	810b883a 	add	r5,r16,r4
   2104c:	01800144 	movi	r6,5
   21050:	29800115 	stw	r6,4(r5)
   21054:	29800215 	stw	r6,8(r5)
   21058:	81400117 	ldw	r5,4(r16)
   2105c:	2940004c 	andi	r5,r5,1
   21060:	214ab03a 	or	r5,r4,r5
   21064:	81400115 	stw	r5,4(r16)
   21068:	1900ae36 	bltu	r3,r4,21324 <_malloc_r+0x704>
   2106c:	d0e6a117 	ldw	r3,-25980(gp)
   21070:	1880012e 	bgeu	r3,r2,21078 <_malloc_r+0x458>
   21074:	d0a6a115 	stw	r2,-25980(gp)
   21078:	d0e6a017 	ldw	r3,-25984(gp)
   2107c:	9c000217 	ldw	r16,8(r19)
   21080:	1880012e 	bgeu	r3,r2,21088 <_malloc_r+0x468>
   21084:	d0a6a015 	stw	r2,-25984(gp)
   21088:	80c00117 	ldw	r3,4(r16)
   2108c:	00bfff04 	movi	r2,-4
   21090:	1886703a 	and	r3,r3,r2
   21094:	1c45c83a 	sub	r2,r3,r17
   21098:	1c400236 	bltu	r3,r17,210a4 <_malloc_r+0x484>
   2109c:	00c003c4 	movi	r3,15
   210a0:	18800416 	blt	r3,r2,210b4 <_malloc_r+0x494>
   210a4:	9009883a 	mov	r4,r18
   210a8:	00237400 	call	23740 <__malloc_unlock>
   210ac:	0005883a 	mov	r2,zero
   210b0:	003f0906 	br	20cd8 <_malloc_r+0xb8>
   210b4:	88c00054 	ori	r3,r17,1
   210b8:	10800054 	ori	r2,r2,1
   210bc:	80c00115 	stw	r3,4(r16)
   210c0:	8463883a 	add	r17,r16,r17
   210c4:	88800115 	stw	r2,4(r17)
   210c8:	9009883a 	mov	r4,r18
   210cc:	9c400215 	stw	r17,8(r19)
   210d0:	00237400 	call	23740 <__malloc_unlock>
   210d4:	80800204 	addi	r2,r16,8
   210d8:	003eff06 	br	20cd8 <_malloc_r+0xb8>
   210dc:	00800504 	movi	r2,20
   210e0:	1100492e 	bgeu	r2,r4,21208 <_malloc_r+0x5e8>
   210e4:	00801504 	movi	r2,84
   210e8:	11005c36 	bltu	r2,r4,2125c <_malloc_r+0x63c>
   210ec:	8808d33a 	srli	r4,r17,12
   210f0:	21001b84 	addi	r4,r4,110
   210f4:	210b883a 	add	r5,r4,r4
   210f8:	003f1006 	br	20d3c <_malloc_r+0x11c>
   210fc:	1006d27a 	srli	r3,r2,9
   21100:	01400104 	movi	r5,4
   21104:	28c0432e 	bgeu	r5,r3,21214 <_malloc_r+0x5f4>
   21108:	01400504 	movi	r5,20
   2110c:	28c07036 	bltu	r5,r3,212d0 <_malloc_r+0x6b0>
   21110:	194016c4 	addi	r5,r3,91
   21114:	294d883a 	add	r6,r5,r5
   21118:	318d883a 	add	r6,r6,r6
   2111c:	318d883a 	add	r6,r6,r6
   21120:	998d883a 	add	r6,r19,r6
   21124:	30c00217 	ldw	r3,8(r6)
   21128:	01c000b4 	movhi	r7,2
   2112c:	39d8a004 	addi	r7,r7,25216
   21130:	19805726 	beq	r3,r6,21290 <_malloc_r+0x670>
   21134:	01ffff04 	movi	r7,-4
   21138:	19400117 	ldw	r5,4(r3)
   2113c:	29ca703a 	and	r5,r5,r7
   21140:	1140022e 	bgeu	r2,r5,2114c <_malloc_r+0x52c>
   21144:	18c00217 	ldw	r3,8(r3)
   21148:	30fffb1e 	bne	r6,r3,21138 <_malloc_r+0x518>
   2114c:	19400317 	ldw	r5,12(r3)
   21150:	98800117 	ldw	r2,4(r19)
   21154:	81400315 	stw	r5,12(r16)
   21158:	80c00215 	stw	r3,8(r16)
   2115c:	2c000215 	stw	r16,8(r5)
   21160:	1c000315 	stw	r16,12(r3)
   21164:	003f2b06 	br	20e14 <_malloc_r+0x1f4>
   21168:	8445883a 	add	r2,r16,r17
   2116c:	8c400054 	ori	r17,r17,1
   21170:	18800515 	stw	r2,20(r3)
   21174:	18800415 	stw	r2,16(r3)
   21178:	29000054 	ori	r4,r5,1
   2117c:	1147883a 	add	r3,r2,r5
   21180:	84400115 	stw	r17,4(r16)
   21184:	11000115 	stw	r4,4(r2)
   21188:	12400315 	stw	r9,12(r2)
   2118c:	12400215 	stw	r9,8(r2)
   21190:	19400015 	stw	r5,0(r3)
   21194:	9009883a 	mov	r4,r18
   21198:	00237400 	call	23740 <__malloc_unlock>
   2119c:	80800204 	addi	r2,r16,8
   211a0:	003ecd06 	br	20cd8 <_malloc_r+0xb8>
   211a4:	18800117 	ldw	r2,4(r3)
   211a8:	003f1a06 	br	20e14 <_malloc_r+0x1f4>
   211ac:	5ac00044 	addi	r11,r11,1
   211b0:	588000cc 	andi	r2,r11,3
   211b4:	52800204 	addi	r10,r10,8
   211b8:	103f2e1e 	bne	r2,zero,20e74 <_malloc_r+0x254>
   211bc:	20c000cc 	andi	r3,r4,3
   211c0:	60bffe04 	addi	r2,r12,-8
   211c4:	18006f26 	beq	r3,zero,21384 <_malloc_r+0x764>
   211c8:	63000017 	ldw	r12,0(r12)
   211cc:	213fffc4 	addi	r4,r4,-1
   211d0:	60bffa26 	beq	r12,r2,211bc <_malloc_r+0x59c>
   211d4:	98800117 	ldw	r2,4(r19)
   211d8:	294b883a 	add	r5,r5,r5
   211dc:	117f5a36 	bltu	r2,r5,20f48 <_malloc_r+0x328>
   211e0:	283f5926 	beq	r5,zero,20f48 <_malloc_r+0x328>
   211e4:	1146703a 	and	r3,r2,r5
   211e8:	18001626 	beq	r3,zero,21244 <_malloc_r+0x624>
   211ec:	5809883a 	mov	r4,r11
   211f0:	003f1a06 	br	20e5c <_malloc_r+0x23c>
   211f4:	80800204 	addi	r2,r16,8
   211f8:	84000517 	ldw	r16,20(r16)
   211fc:	143ea81e 	bne	r2,r16,20ca0 <_malloc_r+0x80>
   21200:	21000084 	addi	r4,r4,2
   21204:	003ee306 	br	20d94 <_malloc_r+0x174>
   21208:	210016c4 	addi	r4,r4,91
   2120c:	210b883a 	add	r5,r4,r4
   21210:	003eca06 	br	20d3c <_malloc_r+0x11c>
   21214:	100ad1ba 	srli	r5,r2,6
   21218:	29400e04 	addi	r5,r5,56
   2121c:	294d883a 	add	r6,r5,r5
   21220:	003fbd06 	br	21118 <_malloc_r+0x4f8>
   21224:	84ff6026 	beq	r16,r19,20fa8 <_malloc_r+0x388>
   21228:	008000b4 	movhi	r2,2
   2122c:	1098a004 	addi	r2,r2,25216
   21230:	14000217 	ldw	r16,8(r2)
   21234:	00bfff04 	movi	r2,-4
   21238:	80c00117 	ldw	r3,4(r16)
   2123c:	1886703a 	and	r3,r3,r2
   21240:	003f9406 	br	21094 <_malloc_r+0x474>
   21244:	294b883a 	add	r5,r5,r5
   21248:	1146703a 	and	r3,r2,r5
   2124c:	5ac00104 	addi	r11,r11,4
   21250:	183ffc26 	beq	r3,zero,21244 <_malloc_r+0x624>
   21254:	5809883a 	mov	r4,r11
   21258:	003f0006 	br	20e5c <_malloc_r+0x23c>
   2125c:	00805504 	movi	r2,340
   21260:	11001336 	bltu	r2,r4,212b0 <_malloc_r+0x690>
   21264:	8808d3fa 	srli	r4,r17,15
   21268:	21001dc4 	addi	r4,r4,119
   2126c:	210b883a 	add	r5,r4,r4
   21270:	003eb206 	br	20d3c <_malloc_r+0x11c>
   21274:	00840004 	movi	r2,4096
   21278:	003f5d06 	br	20ff0 <_malloc_r+0x3d0>
   2127c:	00800044 	movi	r2,1
   21280:	a0800115 	stw	r2,4(r20)
   21284:	a021883a 	mov	r16,r20
   21288:	0007883a 	mov	r3,zero
   2128c:	003f8106 	br	21094 <_malloc_r+0x474>
   21290:	280bd0ba 	srai	r5,r5,2
   21294:	01800044 	movi	r6,1
   21298:	38800117 	ldw	r2,4(r7)
   2129c:	314c983a 	sll	r6,r6,r5
   212a0:	180b883a 	mov	r5,r3
   212a4:	3084b03a 	or	r2,r6,r2
   212a8:	38800115 	stw	r2,4(r7)
   212ac:	003fa906 	br	21154 <_malloc_r+0x534>
   212b0:	00815504 	movi	r2,1364
   212b4:	11001836 	bltu	r2,r4,21318 <_malloc_r+0x6f8>
   212b8:	8808d4ba 	srli	r4,r17,18
   212bc:	21001f04 	addi	r4,r4,124
   212c0:	210b883a 	add	r5,r4,r4
   212c4:	003e9d06 	br	20d3c <_malloc_r+0x11c>
   212c8:	bdc00404 	addi	r23,r23,16
   212cc:	003f2f06 	br	20f8c <_malloc_r+0x36c>
   212d0:	01401504 	movi	r5,84
   212d4:	28c01f36 	bltu	r5,r3,21354 <_malloc_r+0x734>
   212d8:	100ad33a 	srli	r5,r2,12
   212dc:	29401b84 	addi	r5,r5,110
   212e0:	294d883a 	add	r6,r5,r5
   212e4:	003f8c06 	br	21118 <_malloc_r+0x4f8>
   212e8:	9c000217 	ldw	r16,8(r19)
   212ec:	00bfff04 	movi	r2,-4
   212f0:	80c00117 	ldw	r3,4(r16)
   212f4:	1886703a 	and	r3,r3,r2
   212f8:	003f6606 	br	21094 <_malloc_r+0x474>
   212fc:	e0c3ffcc 	andi	r3,fp,4095
   21300:	183f2f1e 	bne	r3,zero,20fc0 <_malloc_r+0x3a0>
   21304:	98c00217 	ldw	r3,8(r19)
   21308:	bd49883a 	add	r4,r23,r21
   2130c:	21000054 	ori	r4,r4,1
   21310:	19000115 	stw	r4,4(r3)
   21314:	003f5506 	br	2106c <_malloc_r+0x44c>
   21318:	01403f04 	movi	r5,252
   2131c:	01001f84 	movi	r4,126
   21320:	003e8606 	br	20d3c <_malloc_r+0x11c>
   21324:	9009883a 	mov	r4,r18
   21328:	81400204 	addi	r5,r16,8
   2132c:	002257c0 	call	2257c <_free_r>
   21330:	008000f4 	movhi	r2,3
   21334:	10a4ce04 	addi	r2,r2,-27848
   21338:	10800017 	ldw	r2,0(r2)
   2133c:	003f4b06 	br	2106c <_malloc_r+0x44c>
   21340:	00c00044 	movi	r3,1
   21344:	002f883a 	mov	r23,zero
   21348:	003f3406 	br	2101c <_malloc_r+0x3fc>
   2134c:	d5200215 	stw	r20,-32760(gp)
   21350:	003f2106 	br	20fd8 <_malloc_r+0x3b8>
   21354:	01405504 	movi	r5,340
   21358:	28c00436 	bltu	r5,r3,2136c <_malloc_r+0x74c>
   2135c:	100ad3fa 	srli	r5,r2,15
   21360:	29401dc4 	addi	r5,r5,119
   21364:	294d883a 	add	r6,r5,r5
   21368:	003f6b06 	br	21118 <_malloc_r+0x4f8>
   2136c:	01415504 	movi	r5,1364
   21370:	28c00936 	bltu	r5,r3,21398 <_malloc_r+0x778>
   21374:	100ad4ba 	srli	r5,r2,18
   21378:	29401f04 	addi	r5,r5,124
   2137c:	294d883a 	add	r6,r5,r5
   21380:	003f6506 	br	21118 <_malloc_r+0x4f8>
   21384:	98800117 	ldw	r2,4(r19)
   21388:	0146303a 	nor	r3,zero,r5
   2138c:	1884703a 	and	r2,r3,r2
   21390:	98800115 	stw	r2,4(r19)
   21394:	003f9006 	br	211d8 <_malloc_r+0x5b8>
   21398:	01803f04 	movi	r6,252
   2139c:	01401f84 	movi	r5,126
   213a0:	003f5d06 	br	21118 <_malloc_r+0x4f8>

000213a4 <memchr>:
   213a4:	008000c4 	movi	r2,3
   213a8:	29403fcc 	andi	r5,r5,255
   213ac:	1180282e 	bgeu	r2,r6,21450 <memchr+0xac>
   213b0:	2086703a 	and	r3,r4,r2
   213b4:	1800351e 	bne	r3,zero,2148c <memchr+0xe8>
   213b8:	2816923a 	slli	r11,r5,8
   213bc:	2093883a 	add	r9,r4,r2
   213c0:	22000084 	addi	r8,r4,2
   213c4:	5957883a 	add	r11,r11,r5
   213c8:	5816923a 	slli	r11,r11,8
   213cc:	20c00044 	addi	r3,r4,1
   213d0:	037fbff4 	movhi	r13,65279
   213d4:	6b7fbfc4 	addi	r13,r13,-257
   213d8:	5957883a 	add	r11,r11,r5
   213dc:	5816923a 	slli	r11,r11,8
   213e0:	03202074 	movhi	r12,32897
   213e4:	63202004 	addi	r12,r12,-32640
   213e8:	101d883a 	mov	r14,r2
   213ec:	5957883a 	add	r11,r11,r5
   213f0:	21c00017 	ldw	r7,0(r4)
   213f4:	31bfff04 	addi	r6,r6,-4
   213f8:	1805883a 	mov	r2,r3
   213fc:	3acef03a 	xor	r7,r7,r11
   21400:	3b55883a 	add	r10,r7,r13
   21404:	01ce303a 	nor	r7,zero,r7
   21408:	51ce703a 	and	r7,r10,r7
   2140c:	3b0e703a 	and	r7,r7,r12
   21410:	38000a26 	beq	r7,zero,2143c <memchr+0x98>
   21414:	21c00003 	ldbu	r7,0(r4)
   21418:	39401e26 	beq	r7,r5,21494 <memchr+0xf0>
   2141c:	19c00003 	ldbu	r7,0(r3)
   21420:	39401926 	beq	r7,r5,21488 <memchr+0xe4>
   21424:	41c00003 	ldbu	r7,0(r8)
   21428:	4005883a 	mov	r2,r8
   2142c:	39401626 	beq	r7,r5,21488 <memchr+0xe4>
   21430:	49c00003 	ldbu	r7,0(r9)
   21434:	4805883a 	mov	r2,r9
   21438:	39401326 	beq	r7,r5,21488 <memchr+0xe4>
   2143c:	21000104 	addi	r4,r4,4
   21440:	4a400104 	addi	r9,r9,4
   21444:	42000104 	addi	r8,r8,4
   21448:	18c00104 	addi	r3,r3,4
   2144c:	71bfe836 	bltu	r14,r6,213f0 <memchr+0x4c>
   21450:	2005883a 	mov	r2,r4
   21454:	30000a26 	beq	r6,zero,21480 <memchr+0xdc>
   21458:	10c00003 	ldbu	r3,0(r2)
   2145c:	19400a26 	beq	r3,r5,21488 <memchr+0xe4>
   21460:	10c00044 	addi	r3,r2,1
   21464:	118d883a 	add	r6,r2,r6
   21468:	00000306 	br	21478 <memchr+0xd4>
   2146c:	11000003 	ldbu	r4,0(r2)
   21470:	18c00044 	addi	r3,r3,1
   21474:	21400426 	beq	r4,r5,21488 <memchr+0xe4>
   21478:	1805883a 	mov	r2,r3
   2147c:	19bffb1e 	bne	r3,r6,2146c <memchr+0xc8>
   21480:	0005883a 	mov	r2,zero
   21484:	f800283a 	ret
   21488:	f800283a 	ret
   2148c:	2005883a 	mov	r2,r4
   21490:	003ff106 	br	21458 <memchr+0xb4>
   21494:	2005883a 	mov	r2,r4
   21498:	f800283a 	ret

0002149c <memcpy>:
   2149c:	defffb04 	addi	sp,sp,-20
   214a0:	dc000015 	stw	r16,0(sp)
   214a4:	dfc00415 	stw	ra,16(sp)
   214a8:	dcc00315 	stw	r19,12(sp)
   214ac:	dc800215 	stw	r18,8(sp)
   214b0:	dc400115 	stw	r17,4(sp)
   214b4:	00c003c4 	movi	r3,15
   214b8:	2021883a 	mov	r16,r4
   214bc:	3005883a 	mov	r2,r6
   214c0:	1980032e 	bgeu	r3,r6,214d0 <memcpy+0x34>
   214c4:	2906b03a 	or	r3,r5,r4
   214c8:	18c000cc 	andi	r3,r3,3
   214cc:	18001026 	beq	r3,zero,21510 <memcpy+0x74>
   214d0:	8007883a 	mov	r3,r16
   214d4:	288f883a 	add	r7,r5,r2
   214d8:	10000526 	beq	r2,zero,214f0 <memcpy+0x54>
   214dc:	29800003 	ldbu	r6,0(r5)
   214e0:	18c00044 	addi	r3,r3,1
   214e4:	29400044 	addi	r5,r5,1
   214e8:	19bfffc5 	stb	r6,-1(r3)
   214ec:	29fffb1e 	bne	r5,r7,214dc <memcpy+0x40>
   214f0:	8005883a 	mov	r2,r16
   214f4:	dfc00417 	ldw	ra,16(sp)
   214f8:	dcc00317 	ldw	r19,12(sp)
   214fc:	dc800217 	ldw	r18,8(sp)
   21500:	dc400117 	ldw	r17,4(sp)
   21504:	dc000017 	ldw	r16,0(sp)
   21508:	dec00504 	addi	sp,sp,20
   2150c:	f800283a 	ret
   21510:	32bffc04 	addi	r10,r6,-16
   21514:	5014d13a 	srli	r10,r10,4
   21518:	20800404 	addi	r2,r4,16
   2151c:	2007883a 	mov	r3,r4
   21520:	5008913a 	slli	r4,r10,4
   21524:	280f883a 	mov	r7,r5
   21528:	1105883a 	add	r2,r2,r4
   2152c:	3a000017 	ldw	r8,0(r7)
   21530:	18c00404 	addi	r3,r3,16
   21534:	39c00404 	addi	r7,r7,16
   21538:	1a3ffc15 	stw	r8,-16(r3)
   2153c:	3a3ffd17 	ldw	r8,-12(r7)
   21540:	1a3ffd15 	stw	r8,-12(r3)
   21544:	3a3ffe17 	ldw	r8,-8(r7)
   21548:	1a3ffe15 	stw	r8,-8(r3)
   2154c:	3a3fff17 	ldw	r8,-4(r7)
   21550:	1a3fff15 	stw	r8,-4(r3)
   21554:	18bff51e 	bne	r3,r2,2152c <memcpy+0x90>
   21558:	52800044 	addi	r10,r10,1
   2155c:	5014913a 	slli	r10,r10,4
   21560:	308003cc 	andi	r2,r6,15
   21564:	010000c4 	movi	r4,3
   21568:	8287883a 	add	r3,r16,r10
   2156c:	2a95883a 	add	r10,r5,r10
   21570:	2080182e 	bgeu	r4,r2,215d4 <memcpy+0x138>
   21574:	147fff04 	addi	r17,r2,-4
   21578:	8808d0ba 	srli	r4,r17,2
   2157c:	1a400104 	addi	r9,r3,4
   21580:	180d883a 	mov	r6,r3
   21584:	2105883a 	add	r2,r4,r4
   21588:	1085883a 	add	r2,r2,r2
   2158c:	4893883a 	add	r9,r9,r2
   21590:	500f883a 	mov	r7,r10
   21594:	3a000017 	ldw	r8,0(r7)
   21598:	31800104 	addi	r6,r6,4
   2159c:	39c00104 	addi	r7,r7,4
   215a0:	323fff15 	stw	r8,-4(r6)
   215a4:	327ffb1e 	bne	r6,r9,21594 <memcpy+0xf8>
   215a8:	20800044 	addi	r2,r4,1
   215ac:	1085883a 	add	r2,r2,r2
   215b0:	1085883a 	add	r2,r2,r2
   215b4:	017fff04 	movi	r5,-4
   215b8:	18a5883a 	add	r18,r3,r2
   215bc:	50a7883a 	add	r19,r10,r2
   215c0:	00231340 	call	23134 <__mulsi3>
   215c4:	1445883a 	add	r2,r2,r17
   215c8:	980b883a 	mov	r5,r19
   215cc:	9007883a 	mov	r3,r18
   215d0:	003fc006 	br	214d4 <memcpy+0x38>
   215d4:	500b883a 	mov	r5,r10
   215d8:	003fbe06 	br	214d4 <memcpy+0x38>

000215dc <memmove>:
   215dc:	defffb04 	addi	sp,sp,-20
   215e0:	dc000015 	stw	r16,0(sp)
   215e4:	dfc00415 	stw	ra,16(sp)
   215e8:	dcc00315 	stw	r19,12(sp)
   215ec:	dc800215 	stw	r18,8(sp)
   215f0:	dc400115 	stw	r17,4(sp)
   215f4:	2021883a 	mov	r16,r4
   215f8:	300f883a 	mov	r7,r6
   215fc:	2900122e 	bgeu	r5,r4,21648 <memmove+0x6c>
   21600:	2987883a 	add	r3,r5,r6
   21604:	20c0102e 	bgeu	r4,r3,21648 <memmove+0x6c>
   21608:	218b883a 	add	r5,r4,r6
   2160c:	1989c83a 	sub	r4,r3,r6
   21610:	30000526 	beq	r6,zero,21628 <memmove+0x4c>
   21614:	18ffffc4 	addi	r3,r3,-1
   21618:	18800003 	ldbu	r2,0(r3)
   2161c:	297fffc4 	addi	r5,r5,-1
   21620:	28800005 	stb	r2,0(r5)
   21624:	193ffb1e 	bne	r3,r4,21614 <memmove+0x38>
   21628:	8005883a 	mov	r2,r16
   2162c:	dfc00417 	ldw	ra,16(sp)
   21630:	dcc00317 	ldw	r19,12(sp)
   21634:	dc800217 	ldw	r18,8(sp)
   21638:	dc400117 	ldw	r17,4(sp)
   2163c:	dc000017 	ldw	r16,0(sp)
   21640:	dec00504 	addi	sp,sp,20
   21644:	f800283a 	ret
   21648:	008003c4 	movi	r2,15
   2164c:	1180422e 	bgeu	r2,r6,21758 <memmove+0x17c>
   21650:	2c04b03a 	or	r2,r5,r16
   21654:	108000cc 	andi	r2,r2,3
   21658:	10003f1e 	bne	r2,zero,21758 <memmove+0x17c>
   2165c:	32bffc04 	addi	r10,r6,-16
   21660:	5014d13a 	srli	r10,r10,4
   21664:	81000404 	addi	r4,r16,16
   21668:	8007883a 	mov	r3,r16
   2166c:	5004913a 	slli	r2,r10,4
   21670:	280f883a 	mov	r7,r5
   21674:	2089883a 	add	r4,r4,r2
   21678:	38800017 	ldw	r2,0(r7)
   2167c:	18c00404 	addi	r3,r3,16
   21680:	39c00404 	addi	r7,r7,16
   21684:	18bffc15 	stw	r2,-16(r3)
   21688:	38bffd17 	ldw	r2,-12(r7)
   2168c:	18bffd15 	stw	r2,-12(r3)
   21690:	38bffe17 	ldw	r2,-8(r7)
   21694:	18bffe15 	stw	r2,-8(r3)
   21698:	38bfff17 	ldw	r2,-4(r7)
   2169c:	18bfff15 	stw	r2,-4(r3)
   216a0:	193ff51e 	bne	r3,r4,21678 <memmove+0x9c>
   216a4:	52800044 	addi	r10,r10,1
   216a8:	5014913a 	slli	r10,r10,4
   216ac:	31c003cc 	andi	r7,r6,15
   216b0:	008000c4 	movi	r2,3
   216b4:	8287883a 	add	r3,r16,r10
   216b8:	2a95883a 	add	r10,r5,r10
   216bc:	11c0282e 	bgeu	r2,r7,21760 <memmove+0x184>
   216c0:	3c7fff04 	addi	r17,r7,-4
   216c4:	8808d0ba 	srli	r4,r17,2
   216c8:	1a400104 	addi	r9,r3,4
   216cc:	180d883a 	mov	r6,r3
   216d0:	2105883a 	add	r2,r4,r4
   216d4:	1085883a 	add	r2,r2,r2
   216d8:	4893883a 	add	r9,r9,r2
   216dc:	5005883a 	mov	r2,r10
   216e0:	12000017 	ldw	r8,0(r2)
   216e4:	31800104 	addi	r6,r6,4
   216e8:	10800104 	addi	r2,r2,4
   216ec:	323fff15 	stw	r8,-4(r6)
   216f0:	327ffb1e 	bne	r6,r9,216e0 <memmove+0x104>
   216f4:	20800044 	addi	r2,r4,1
   216f8:	1085883a 	add	r2,r2,r2
   216fc:	1085883a 	add	r2,r2,r2
   21700:	017fff04 	movi	r5,-4
   21704:	18a5883a 	add	r18,r3,r2
   21708:	50a7883a 	add	r19,r10,r2
   2170c:	00231340 	call	23134 <__mulsi3>
   21710:	144f883a 	add	r7,r2,r17
   21714:	980b883a 	mov	r5,r19
   21718:	9007883a 	mov	r3,r18
   2171c:	383fc226 	beq	r7,zero,21628 <memmove+0x4c>
   21720:	19cf883a 	add	r7,r3,r7
   21724:	29800003 	ldbu	r6,0(r5)
   21728:	18c00044 	addi	r3,r3,1
   2172c:	29400044 	addi	r5,r5,1
   21730:	19bfffc5 	stb	r6,-1(r3)
   21734:	19fffb1e 	bne	r3,r7,21724 <memmove+0x148>
   21738:	8005883a 	mov	r2,r16
   2173c:	dfc00417 	ldw	ra,16(sp)
   21740:	dcc00317 	ldw	r19,12(sp)
   21744:	dc800217 	ldw	r18,8(sp)
   21748:	dc400117 	ldw	r17,4(sp)
   2174c:	dc000017 	ldw	r16,0(sp)
   21750:	dec00504 	addi	sp,sp,20
   21754:	f800283a 	ret
   21758:	8007883a 	mov	r3,r16
   2175c:	003fef06 	br	2171c <memmove+0x140>
   21760:	500b883a 	mov	r5,r10
   21764:	003fed06 	br	2171c <memmove+0x140>

00021768 <_realloc_r>:
   21768:	defff504 	addi	sp,sp,-44
   2176c:	dd400615 	stw	r21,24(sp)
   21770:	dc800315 	stw	r18,12(sp)
   21774:	dc000115 	stw	r16,4(sp)
   21778:	dfc00a15 	stw	ra,40(sp)
   2177c:	df000915 	stw	fp,36(sp)
   21780:	ddc00815 	stw	r23,32(sp)
   21784:	dd800715 	stw	r22,28(sp)
   21788:	dd000515 	stw	r20,20(sp)
   2178c:	dcc00415 	stw	r19,16(sp)
   21790:	dc400215 	stw	r17,8(sp)
   21794:	2821883a 	mov	r16,r5
   21798:	202b883a 	mov	r21,r4
   2179c:	3025883a 	mov	r18,r6
   217a0:	28009626 	beq	r5,zero,219fc <_realloc_r+0x294>
   217a4:	00237200 	call	23720 <__malloc_lock>
   217a8:	80bfff17 	ldw	r2,-4(r16)
   217ac:	04ffff04 	movi	r19,-4
   217b0:	90c002c4 	addi	r3,r18,11
   217b4:	01000584 	movi	r4,22
   217b8:	85bffe04 	addi	r22,r16,-8
   217bc:	14e6703a 	and	r19,r2,r19
   217c0:	20c0372e 	bgeu	r4,r3,218a0 <_realloc_r+0x138>
   217c4:	047ffe04 	movi	r17,-8
   217c8:	1c62703a 	and	r17,r3,r17
   217cc:	8807883a 	mov	r3,r17
   217d0:	88005a16 	blt	r17,zero,2193c <_realloc_r+0x1d4>
   217d4:	8c805936 	bltu	r17,r18,2193c <_realloc_r+0x1d4>
   217d8:	98c0340e 	bge	r19,r3,218ac <_realloc_r+0x144>
   217dc:	070000b4 	movhi	fp,2
   217e0:	e718a004 	addi	fp,fp,25216
   217e4:	e1400217 	ldw	r5,8(fp)
   217e8:	b4c9883a 	add	r4,r22,r19
   217ec:	29009026 	beq	r5,r4,21a30 <_realloc_r+0x2c8>
   217f0:	21800117 	ldw	r6,4(r4)
   217f4:	01ffff84 	movi	r7,-2
   217f8:	31ce703a 	and	r7,r6,r7
   217fc:	21cf883a 	add	r7,r4,r7
   21800:	39c00117 	ldw	r7,4(r7)
   21804:	39c0004c 	andi	r7,r7,1
   21808:	38004326 	beq	r7,zero,21918 <_realloc_r+0x1b0>
   2180c:	000d883a 	mov	r6,zero
   21810:	0009883a 	mov	r4,zero
   21814:	1080004c 	andi	r2,r2,1
   21818:	10005a1e 	bne	r2,zero,21984 <_realloc_r+0x21c>
   2181c:	85fffe17 	ldw	r23,-8(r16)
   21820:	00bfff04 	movi	r2,-4
   21824:	b5efc83a 	sub	r23,r22,r23
   21828:	b9c00117 	ldw	r7,4(r23)
   2182c:	388e703a 	and	r7,r7,r2
   21830:	3ccf883a 	add	r7,r7,r19
   21834:	20005226 	beq	r4,zero,21980 <_realloc_r+0x218>
   21838:	31e9883a 	add	r20,r6,r7
   2183c:	2140c726 	beq	r4,r5,21b5c <_realloc_r+0x3f4>
   21840:	a0c04f16 	blt	r20,r3,21980 <_realloc_r+0x218>
   21844:	20800317 	ldw	r2,12(r4)
   21848:	20c00217 	ldw	r3,8(r4)
   2184c:	99bfff04 	addi	r6,r19,-4
   21850:	01000904 	movi	r4,36
   21854:	18800315 	stw	r2,12(r3)
   21858:	10c00215 	stw	r3,8(r2)
   2185c:	b8c00217 	ldw	r3,8(r23)
   21860:	b8800317 	ldw	r2,12(r23)
   21864:	bc800204 	addi	r18,r23,8
   21868:	18800315 	stw	r2,12(r3)
   2186c:	10c00215 	stw	r3,8(r2)
   21870:	2180ed36 	bltu	r4,r6,21c28 <_realloc_r+0x4c0>
   21874:	008004c4 	movi	r2,19
   21878:	11809b2e 	bgeu	r2,r6,21ae8 <_realloc_r+0x380>
   2187c:	80800017 	ldw	r2,0(r16)
   21880:	b8800215 	stw	r2,8(r23)
   21884:	80800117 	ldw	r2,4(r16)
   21888:	b8800315 	stw	r2,12(r23)
   2188c:	008006c4 	movi	r2,27
   21890:	1180f936 	bltu	r2,r6,21c78 <_realloc_r+0x510>
   21894:	b8800404 	addi	r2,r23,16
   21898:	80c00204 	addi	r3,r16,8
   2189c:	00009406 	br	21af0 <_realloc_r+0x388>
   218a0:	00c00404 	movi	r3,16
   218a4:	1823883a 	mov	r17,r3
   218a8:	003fca06 	br	217d4 <_realloc_r+0x6c>
   218ac:	9829883a 	mov	r20,r19
   218b0:	a447c83a 	sub	r3,r20,r17
   218b4:	010003c4 	movi	r4,15
   218b8:	1080004c 	andi	r2,r2,1
   218bc:	20c02336 	bltu	r4,r3,2194c <_realloc_r+0x1e4>
   218c0:	1504b03a 	or	r2,r2,r20
   218c4:	b0800115 	stw	r2,4(r22)
   218c8:	b52d883a 	add	r22,r22,r20
   218cc:	b0800117 	ldw	r2,4(r22)
   218d0:	10800054 	ori	r2,r2,1
   218d4:	b0800115 	stw	r2,4(r22)
   218d8:	a809883a 	mov	r4,r21
   218dc:	00237400 	call	23740 <__malloc_unlock>
   218e0:	8025883a 	mov	r18,r16
   218e4:	9005883a 	mov	r2,r18
   218e8:	dfc00a17 	ldw	ra,40(sp)
   218ec:	df000917 	ldw	fp,36(sp)
   218f0:	ddc00817 	ldw	r23,32(sp)
   218f4:	dd800717 	ldw	r22,28(sp)
   218f8:	dd400617 	ldw	r21,24(sp)
   218fc:	dd000517 	ldw	r20,20(sp)
   21900:	dcc00417 	ldw	r19,16(sp)
   21904:	dc800317 	ldw	r18,12(sp)
   21908:	dc400217 	ldw	r17,8(sp)
   2190c:	dc000117 	ldw	r16,4(sp)
   21910:	dec00b04 	addi	sp,sp,44
   21914:	f800283a 	ret
   21918:	01ffff04 	movi	r7,-4
   2191c:	31cc703a 	and	r6,r6,r7
   21920:	34e9883a 	add	r20,r6,r19
   21924:	a0ffbb16 	blt	r20,r3,21814 <_realloc_r+0xac>
   21928:	20c00317 	ldw	r3,12(r4)
   2192c:	21000217 	ldw	r4,8(r4)
   21930:	20c00315 	stw	r3,12(r4)
   21934:	19000215 	stw	r4,8(r3)
   21938:	003fdd06 	br	218b0 <_realloc_r+0x148>
   2193c:	00800304 	movi	r2,12
   21940:	a8800015 	stw	r2,0(r21)
   21944:	0025883a 	mov	r18,zero
   21948:	003fe606 	br	218e4 <_realloc_r+0x17c>
   2194c:	1444b03a 	or	r2,r2,r17
   21950:	b0800115 	stw	r2,4(r22)
   21954:	b44b883a 	add	r5,r22,r17
   21958:	18800054 	ori	r2,r3,1
   2195c:	28800115 	stw	r2,4(r5)
   21960:	28c7883a 	add	r3,r5,r3
   21964:	18800117 	ldw	r2,4(r3)
   21968:	a809883a 	mov	r4,r21
   2196c:	29400204 	addi	r5,r5,8
   21970:	10800054 	ori	r2,r2,1
   21974:	18800115 	stw	r2,4(r3)
   21978:	002257c0 	call	2257c <_free_r>
   2197c:	003fd606 	br	218d8 <_realloc_r+0x170>
   21980:	38c0330e 	bge	r7,r3,21a50 <_realloc_r+0x2e8>
   21984:	900b883a 	mov	r5,r18
   21988:	a809883a 	mov	r4,r21
   2198c:	0020c200 	call	20c20 <_malloc_r>
   21990:	1025883a 	mov	r18,r2
   21994:	10001626 	beq	r2,zero,219f0 <_realloc_r+0x288>
   21998:	80bfff17 	ldw	r2,-4(r16)
   2199c:	00ffff84 	movi	r3,-2
   219a0:	913ffe04 	addi	r4,r18,-8
   219a4:	10c6703a 	and	r3,r2,r3
   219a8:	b0c7883a 	add	r3,r22,r3
   219ac:	20c09926 	beq	r4,r3,21c14 <_realloc_r+0x4ac>
   219b0:	99bfff04 	addi	r6,r19,-4
   219b4:	00800904 	movi	r2,36
   219b8:	11806436 	bltu	r2,r6,21b4c <_realloc_r+0x3e4>
   219bc:	00c004c4 	movi	r3,19
   219c0:	19804036 	bltu	r3,r6,21ac4 <_realloc_r+0x35c>
   219c4:	9005883a 	mov	r2,r18
   219c8:	8007883a 	mov	r3,r16
   219cc:	19000017 	ldw	r4,0(r3)
   219d0:	11000015 	stw	r4,0(r2)
   219d4:	19000117 	ldw	r4,4(r3)
   219d8:	11000115 	stw	r4,4(r2)
   219dc:	18c00217 	ldw	r3,8(r3)
   219e0:	10c00215 	stw	r3,8(r2)
   219e4:	a809883a 	mov	r4,r21
   219e8:	800b883a 	mov	r5,r16
   219ec:	002257c0 	call	2257c <_free_r>
   219f0:	a809883a 	mov	r4,r21
   219f4:	00237400 	call	23740 <__malloc_unlock>
   219f8:	003fba06 	br	218e4 <_realloc_r+0x17c>
   219fc:	300b883a 	mov	r5,r6
   21a00:	dfc00a17 	ldw	ra,40(sp)
   21a04:	df000917 	ldw	fp,36(sp)
   21a08:	ddc00817 	ldw	r23,32(sp)
   21a0c:	dd800717 	ldw	r22,28(sp)
   21a10:	dd400617 	ldw	r21,24(sp)
   21a14:	dd000517 	ldw	r20,20(sp)
   21a18:	dcc00417 	ldw	r19,16(sp)
   21a1c:	dc800317 	ldw	r18,12(sp)
   21a20:	dc400217 	ldw	r17,8(sp)
   21a24:	dc000117 	ldw	r16,4(sp)
   21a28:	dec00b04 	addi	sp,sp,44
   21a2c:	0020c201 	jmpi	20c20 <_malloc_r>
   21a30:	29800117 	ldw	r6,4(r5)
   21a34:	013fff04 	movi	r4,-4
   21a38:	89c00404 	addi	r7,r17,16
   21a3c:	310c703a 	and	r6,r6,r4
   21a40:	34c9883a 	add	r4,r6,r19
   21a44:	21c0340e 	bge	r4,r7,21b18 <_realloc_r+0x3b0>
   21a48:	2809883a 	mov	r4,r5
   21a4c:	003f7106 	br	21814 <_realloc_r+0xac>
   21a50:	b8800317 	ldw	r2,12(r23)
   21a54:	b8c00217 	ldw	r3,8(r23)
   21a58:	99bfff04 	addi	r6,r19,-4
   21a5c:	01000904 	movi	r4,36
   21a60:	18800315 	stw	r2,12(r3)
   21a64:	10c00215 	stw	r3,8(r2)
   21a68:	bc800204 	addi	r18,r23,8
   21a6c:	21807836 	bltu	r4,r6,21c50 <_realloc_r+0x4e8>
   21a70:	008004c4 	movi	r2,19
   21a74:	1180732e 	bgeu	r2,r6,21c44 <_realloc_r+0x4dc>
   21a78:	80800017 	ldw	r2,0(r16)
   21a7c:	b8800215 	stw	r2,8(r23)
   21a80:	80800117 	ldw	r2,4(r16)
   21a84:	b8800315 	stw	r2,12(r23)
   21a88:	008006c4 	movi	r2,27
   21a8c:	11808936 	bltu	r2,r6,21cb4 <_realloc_r+0x54c>
   21a90:	b8800404 	addi	r2,r23,16
   21a94:	80c00204 	addi	r3,r16,8
   21a98:	19000017 	ldw	r4,0(r3)
   21a9c:	9021883a 	mov	r16,r18
   21aa0:	3829883a 	mov	r20,r7
   21aa4:	11000015 	stw	r4,0(r2)
   21aa8:	19000117 	ldw	r4,4(r3)
   21aac:	b82d883a 	mov	r22,r23
   21ab0:	11000115 	stw	r4,4(r2)
   21ab4:	18c00217 	ldw	r3,8(r3)
   21ab8:	10c00215 	stw	r3,8(r2)
   21abc:	b8800117 	ldw	r2,4(r23)
   21ac0:	003f7b06 	br	218b0 <_realloc_r+0x148>
   21ac4:	80c00017 	ldw	r3,0(r16)
   21ac8:	90c00015 	stw	r3,0(r18)
   21acc:	80c00117 	ldw	r3,4(r16)
   21ad0:	90c00115 	stw	r3,4(r18)
   21ad4:	00c006c4 	movi	r3,27
   21ad8:	19804636 	bltu	r3,r6,21bf4 <_realloc_r+0x48c>
   21adc:	90800204 	addi	r2,r18,8
   21ae0:	80c00204 	addi	r3,r16,8
   21ae4:	003fb906 	br	219cc <_realloc_r+0x264>
   21ae8:	9005883a 	mov	r2,r18
   21aec:	8007883a 	mov	r3,r16
   21af0:	19000017 	ldw	r4,0(r3)
   21af4:	9021883a 	mov	r16,r18
   21af8:	b82d883a 	mov	r22,r23
   21afc:	11000015 	stw	r4,0(r2)
   21b00:	19000117 	ldw	r4,4(r3)
   21b04:	11000115 	stw	r4,4(r2)
   21b08:	18c00217 	ldw	r3,8(r3)
   21b0c:	10c00215 	stw	r3,8(r2)
   21b10:	b8800117 	ldw	r2,4(r23)
   21b14:	003f6606 	br	218b0 <_realloc_r+0x148>
   21b18:	2445c83a 	sub	r2,r4,r17
   21b1c:	b46d883a 	add	r22,r22,r17
   21b20:	10800054 	ori	r2,r2,1
   21b24:	b0800115 	stw	r2,4(r22)
   21b28:	80bfff17 	ldw	r2,-4(r16)
   21b2c:	a809883a 	mov	r4,r21
   21b30:	e5800215 	stw	r22,8(fp)
   21b34:	1080004c 	andi	r2,r2,1
   21b38:	88a2b03a 	or	r17,r17,r2
   21b3c:	847fff15 	stw	r17,-4(r16)
   21b40:	00237400 	call	23740 <__malloc_unlock>
   21b44:	8025883a 	mov	r18,r16
   21b48:	003f6606 	br	218e4 <_realloc_r+0x17c>
   21b4c:	9009883a 	mov	r4,r18
   21b50:	800b883a 	mov	r5,r16
   21b54:	00215dc0 	call	215dc <memmove>
   21b58:	003fa206 	br	219e4 <_realloc_r+0x27c>
   21b5c:	88800404 	addi	r2,r17,16
   21b60:	a0bf8716 	blt	r20,r2,21980 <_realloc_r+0x218>
   21b64:	b8800317 	ldw	r2,12(r23)
   21b68:	b8c00217 	ldw	r3,8(r23)
   21b6c:	99bfff04 	addi	r6,r19,-4
   21b70:	01000904 	movi	r4,36
   21b74:	18800315 	stw	r2,12(r3)
   21b78:	10c00215 	stw	r3,8(r2)
   21b7c:	bc800204 	addi	r18,r23,8
   21b80:	21806536 	bltu	r4,r6,21d18 <_realloc_r+0x5b0>
   21b84:	008004c4 	movi	r2,19
   21b88:	1180592e 	bgeu	r2,r6,21cf0 <_realloc_r+0x588>
   21b8c:	80800017 	ldw	r2,0(r16)
   21b90:	b8800215 	stw	r2,8(r23)
   21b94:	80800117 	ldw	r2,4(r16)
   21b98:	b8800315 	stw	r2,12(r23)
   21b9c:	008006c4 	movi	r2,27
   21ba0:	11806136 	bltu	r2,r6,21d28 <_realloc_r+0x5c0>
   21ba4:	b8800404 	addi	r2,r23,16
   21ba8:	80c00204 	addi	r3,r16,8
   21bac:	19000017 	ldw	r4,0(r3)
   21bb0:	11000015 	stw	r4,0(r2)
   21bb4:	19000117 	ldw	r4,4(r3)
   21bb8:	11000115 	stw	r4,4(r2)
   21bbc:	18c00217 	ldw	r3,8(r3)
   21bc0:	10c00215 	stw	r3,8(r2)
   21bc4:	a447c83a 	sub	r3,r20,r17
   21bc8:	bc45883a 	add	r2,r23,r17
   21bcc:	18c00054 	ori	r3,r3,1
   21bd0:	10c00115 	stw	r3,4(r2)
   21bd4:	b8c00117 	ldw	r3,4(r23)
   21bd8:	e0800215 	stw	r2,8(fp)
   21bdc:	a809883a 	mov	r4,r21
   21be0:	1880004c 	andi	r2,r3,1
   21be4:	88a2b03a 	or	r17,r17,r2
   21be8:	bc400115 	stw	r17,4(r23)
   21bec:	00237400 	call	23740 <__malloc_unlock>
   21bf0:	003f3c06 	br	218e4 <_realloc_r+0x17c>
   21bf4:	80c00217 	ldw	r3,8(r16)
   21bf8:	90c00215 	stw	r3,8(r18)
   21bfc:	80c00317 	ldw	r3,12(r16)
   21c00:	90c00315 	stw	r3,12(r18)
   21c04:	30802426 	beq	r6,r2,21c98 <_realloc_r+0x530>
   21c08:	90800404 	addi	r2,r18,16
   21c0c:	80c00404 	addi	r3,r16,16
   21c10:	003f6e06 	br	219cc <_realloc_r+0x264>
   21c14:	953fff17 	ldw	r20,-4(r18)
   21c18:	00ffff04 	movi	r3,-4
   21c1c:	a0e8703a 	and	r20,r20,r3
   21c20:	a4e9883a 	add	r20,r20,r19
   21c24:	003f2206 	br	218b0 <_realloc_r+0x148>
   21c28:	800b883a 	mov	r5,r16
   21c2c:	9009883a 	mov	r4,r18
   21c30:	00215dc0 	call	215dc <memmove>
   21c34:	9021883a 	mov	r16,r18
   21c38:	b8800117 	ldw	r2,4(r23)
   21c3c:	b82d883a 	mov	r22,r23
   21c40:	003f1b06 	br	218b0 <_realloc_r+0x148>
   21c44:	9005883a 	mov	r2,r18
   21c48:	8007883a 	mov	r3,r16
   21c4c:	003f9206 	br	21a98 <_realloc_r+0x330>
   21c50:	800b883a 	mov	r5,r16
   21c54:	9009883a 	mov	r4,r18
   21c58:	d9c00015 	stw	r7,0(sp)
   21c5c:	00215dc0 	call	215dc <memmove>
   21c60:	d9c00017 	ldw	r7,0(sp)
   21c64:	9021883a 	mov	r16,r18
   21c68:	b8800117 	ldw	r2,4(r23)
   21c6c:	3829883a 	mov	r20,r7
   21c70:	b82d883a 	mov	r22,r23
   21c74:	003f0e06 	br	218b0 <_realloc_r+0x148>
   21c78:	80800217 	ldw	r2,8(r16)
   21c7c:	b8800415 	stw	r2,16(r23)
   21c80:	80800317 	ldw	r2,12(r16)
   21c84:	b8800515 	stw	r2,20(r23)
   21c88:	31001226 	beq	r6,r4,21cd4 <_realloc_r+0x56c>
   21c8c:	b8800604 	addi	r2,r23,24
   21c90:	80c00404 	addi	r3,r16,16
   21c94:	003f9606 	br	21af0 <_realloc_r+0x388>
   21c98:	81000417 	ldw	r4,16(r16)
   21c9c:	90800604 	addi	r2,r18,24
   21ca0:	80c00604 	addi	r3,r16,24
   21ca4:	91000415 	stw	r4,16(r18)
   21ca8:	81000517 	ldw	r4,20(r16)
   21cac:	91000515 	stw	r4,20(r18)
   21cb0:	003f4606 	br	219cc <_realloc_r+0x264>
   21cb4:	80800217 	ldw	r2,8(r16)
   21cb8:	b8800415 	stw	r2,16(r23)
   21cbc:	80800317 	ldw	r2,12(r16)
   21cc0:	b8800515 	stw	r2,20(r23)
   21cc4:	31000d26 	beq	r6,r4,21cfc <_realloc_r+0x594>
   21cc8:	b8800604 	addi	r2,r23,24
   21ccc:	80c00404 	addi	r3,r16,16
   21cd0:	003f7106 	br	21a98 <_realloc_r+0x330>
   21cd4:	81000417 	ldw	r4,16(r16)
   21cd8:	b8800804 	addi	r2,r23,32
   21cdc:	80c00604 	addi	r3,r16,24
   21ce0:	b9000615 	stw	r4,24(r23)
   21ce4:	81000517 	ldw	r4,20(r16)
   21ce8:	b9000715 	stw	r4,28(r23)
   21cec:	003f8006 	br	21af0 <_realloc_r+0x388>
   21cf0:	9005883a 	mov	r2,r18
   21cf4:	8007883a 	mov	r3,r16
   21cf8:	003fac06 	br	21bac <_realloc_r+0x444>
   21cfc:	81000417 	ldw	r4,16(r16)
   21d00:	b8800804 	addi	r2,r23,32
   21d04:	80c00604 	addi	r3,r16,24
   21d08:	b9000615 	stw	r4,24(r23)
   21d0c:	81000517 	ldw	r4,20(r16)
   21d10:	b9000715 	stw	r4,28(r23)
   21d14:	003f6006 	br	21a98 <_realloc_r+0x330>
   21d18:	9009883a 	mov	r4,r18
   21d1c:	800b883a 	mov	r5,r16
   21d20:	00215dc0 	call	215dc <memmove>
   21d24:	003fa706 	br	21bc4 <_realloc_r+0x45c>
   21d28:	80800217 	ldw	r2,8(r16)
   21d2c:	b8800415 	stw	r2,16(r23)
   21d30:	80800317 	ldw	r2,12(r16)
   21d34:	b8800515 	stw	r2,20(r23)
   21d38:	31000326 	beq	r6,r4,21d48 <_realloc_r+0x5e0>
   21d3c:	b8800604 	addi	r2,r23,24
   21d40:	80c00404 	addi	r3,r16,16
   21d44:	003f9906 	br	21bac <_realloc_r+0x444>
   21d48:	81000417 	ldw	r4,16(r16)
   21d4c:	b8800804 	addi	r2,r23,32
   21d50:	80c00604 	addi	r3,r16,24
   21d54:	b9000615 	stw	r4,24(r23)
   21d58:	81000517 	ldw	r4,20(r16)
   21d5c:	b9000715 	stw	r4,28(r23)
   21d60:	003f9206 	br	21bac <_realloc_r+0x444>

00021d64 <_sbrk_r>:
   21d64:	defffd04 	addi	sp,sp,-12
   21d68:	dc400115 	stw	r17,4(sp)
   21d6c:	dc000015 	stw	r16,0(sp)
   21d70:	2023883a 	mov	r17,r4
   21d74:	040000f4 	movhi	r16,3
   21d78:	8424c704 	addi	r16,r16,-27876
   21d7c:	2809883a 	mov	r4,r5
   21d80:	dfc00215 	stw	ra,8(sp)
   21d84:	80000015 	stw	zero,0(r16)
   21d88:	00239240 	call	23924 <sbrk>
   21d8c:	00ffffc4 	movi	r3,-1
   21d90:	10c00526 	beq	r2,r3,21da8 <_sbrk_r+0x44>
   21d94:	dfc00217 	ldw	ra,8(sp)
   21d98:	dc400117 	ldw	r17,4(sp)
   21d9c:	dc000017 	ldw	r16,0(sp)
   21da0:	dec00304 	addi	sp,sp,12
   21da4:	f800283a 	ret
   21da8:	80c00017 	ldw	r3,0(r16)
   21dac:	183ff926 	beq	r3,zero,21d94 <_sbrk_r+0x30>
   21db0:	88c00015 	stw	r3,0(r17)
   21db4:	dfc00217 	ldw	ra,8(sp)
   21db8:	dc400117 	ldw	r17,4(sp)
   21dbc:	dc000017 	ldw	r16,0(sp)
   21dc0:	dec00304 	addi	sp,sp,12
   21dc4:	f800283a 	ret

00021dc8 <__swsetup_r>:
   21dc8:	008000b4 	movhi	r2,2
   21dcc:	109e2504 	addi	r2,r2,30868
   21dd0:	10800017 	ldw	r2,0(r2)
   21dd4:	defffd04 	addi	sp,sp,-12
   21dd8:	dc400115 	stw	r17,4(sp)
   21ddc:	dc000015 	stw	r16,0(sp)
   21de0:	dfc00215 	stw	ra,8(sp)
   21de4:	2023883a 	mov	r17,r4
   21de8:	2821883a 	mov	r16,r5
   21dec:	10000226 	beq	r2,zero,21df8 <__swsetup_r+0x30>
   21df0:	10c00e17 	ldw	r3,56(r2)
   21df4:	18003d26 	beq	r3,zero,21eec <__swsetup_r+0x124>
   21df8:	8080030b 	ldhu	r2,12(r16)
   21dfc:	10c0020c 	andi	r3,r2,8
   21e00:	18ffffcc 	andi	r3,r3,65535
   21e04:	18e0001c 	xori	r3,r3,32768
   21e08:	18e00004 	addi	r3,r3,-32768
   21e0c:	18001226 	beq	r3,zero,21e58 <__swsetup_r+0x90>
   21e10:	80c00417 	ldw	r3,16(r16)
   21e14:	18001f26 	beq	r3,zero,21e94 <__swsetup_r+0xcc>
   21e18:	1100004c 	andi	r4,r2,1
   21e1c:	2000261e 	bne	r4,zero,21eb8 <__swsetup_r+0xf0>
   21e20:	1080008c 	andi	r2,r2,2
   21e24:	10bfffcc 	andi	r2,r2,65535
   21e28:	10a0001c 	xori	r2,r2,32768
   21e2c:	10a00004 	addi	r2,r2,-32768
   21e30:	1000311e 	bne	r2,zero,21ef8 <__swsetup_r+0x130>
   21e34:	80800517 	ldw	r2,20(r16)
   21e38:	80800215 	stw	r2,8(r16)
   21e3c:	18002326 	beq	r3,zero,21ecc <__swsetup_r+0x104>
   21e40:	0005883a 	mov	r2,zero
   21e44:	dfc00217 	ldw	ra,8(sp)
   21e48:	dc400117 	ldw	r17,4(sp)
   21e4c:	dc000017 	ldw	r16,0(sp)
   21e50:	dec00304 	addi	sp,sp,12
   21e54:	f800283a 	ret
   21e58:	10c0040c 	andi	r3,r2,16
   21e5c:	18ffffcc 	andi	r3,r3,65535
   21e60:	18e0001c 	xori	r3,r3,32768
   21e64:	18e00004 	addi	r3,r3,-32768
   21e68:	18001e26 	beq	r3,zero,21ee4 <__swsetup_r+0x11c>
   21e6c:	10c0010c 	andi	r3,r2,4
   21e70:	18ffffcc 	andi	r3,r3,65535
   21e74:	18e0001c 	xori	r3,r3,32768
   21e78:	18e00004 	addi	r3,r3,-32768
   21e7c:	1800211e 	bne	r3,zero,21f04 <__swsetup_r+0x13c>
   21e80:	80c00417 	ldw	r3,16(r16)
   21e84:	11400214 	ori	r5,r2,8
   21e88:	8140030d 	sth	r5,12(r16)
   21e8c:	2805883a 	mov	r2,r5
   21e90:	183fe11e 	bne	r3,zero,21e18 <__swsetup_r+0x50>
   21e94:	1140a00c 	andi	r5,r2,640
   21e98:	01008004 	movi	r4,512
   21e9c:	293fde26 	beq	r5,r4,21e18 <__swsetup_r+0x50>
   21ea0:	8809883a 	mov	r4,r17
   21ea4:	800b883a 	mov	r5,r16
   21ea8:	00229ac0 	call	229ac <__smakebuf_r>
   21eac:	8080030b 	ldhu	r2,12(r16)
   21eb0:	80c00417 	ldw	r3,16(r16)
   21eb4:	003fd806 	br	21e18 <__swsetup_r+0x50>
   21eb8:	80800517 	ldw	r2,20(r16)
   21ebc:	80000215 	stw	zero,8(r16)
   21ec0:	0085c83a 	sub	r2,zero,r2
   21ec4:	80800615 	stw	r2,24(r16)
   21ec8:	183fdd1e 	bne	r3,zero,21e40 <__swsetup_r+0x78>
   21ecc:	8080030b 	ldhu	r2,12(r16)
   21ed0:	1080200c 	andi	r2,r2,128
   21ed4:	10bfffcc 	andi	r2,r2,65535
   21ed8:	10a0001c 	xori	r2,r2,32768
   21edc:	10a00004 	addi	r2,r2,-32768
   21ee0:	103fd826 	beq	r2,zero,21e44 <__swsetup_r+0x7c>
   21ee4:	00bfffc4 	movi	r2,-1
   21ee8:	003fd606 	br	21e44 <__swsetup_r+0x7c>
   21eec:	1009883a 	mov	r4,r2
   21ef0:	00221f80 	call	221f8 <__sinit>
   21ef4:	003fc006 	br	21df8 <__swsetup_r+0x30>
   21ef8:	0005883a 	mov	r2,zero
   21efc:	80800215 	stw	r2,8(r16)
   21f00:	003fce06 	br	21e3c <__swsetup_r+0x74>
   21f04:	81400c17 	ldw	r5,48(r16)
   21f08:	28000626 	beq	r5,zero,21f24 <__swsetup_r+0x15c>
   21f0c:	80c01004 	addi	r3,r16,64
   21f10:	28c00326 	beq	r5,r3,21f20 <__swsetup_r+0x158>
   21f14:	8809883a 	mov	r4,r17
   21f18:	002257c0 	call	2257c <_free_r>
   21f1c:	8080030b 	ldhu	r2,12(r16)
   21f20:	80000c15 	stw	zero,48(r16)
   21f24:	80c00417 	ldw	r3,16(r16)
   21f28:	013ff6c4 	movi	r4,-37
   21f2c:	2084703a 	and	r2,r4,r2
   21f30:	80000115 	stw	zero,4(r16)
   21f34:	80c00015 	stw	r3,0(r16)
   21f38:	003fd206 	br	21e84 <__swsetup_r+0xbc>

00021f3c <_fflush_r>:
   21f3c:	defffb04 	addi	sp,sp,-20
   21f40:	dcc00315 	stw	r19,12(sp)
   21f44:	dc400115 	stw	r17,4(sp)
   21f48:	dfc00415 	stw	ra,16(sp)
   21f4c:	dc800215 	stw	r18,8(sp)
   21f50:	dc000015 	stw	r16,0(sp)
   21f54:	2027883a 	mov	r19,r4
   21f58:	2823883a 	mov	r17,r5
   21f5c:	20000226 	beq	r4,zero,21f68 <_fflush_r+0x2c>
   21f60:	20800e17 	ldw	r2,56(r4)
   21f64:	10005726 	beq	r2,zero,220c4 <_fflush_r+0x188>
   21f68:	8880030b 	ldhu	r2,12(r17)
   21f6c:	10c0020c 	andi	r3,r2,8
   21f70:	18ffffcc 	andi	r3,r3,65535
   21f74:	18e0001c 	xori	r3,r3,32768
   21f78:	18e00004 	addi	r3,r3,-32768
   21f7c:	1800311e 	bne	r3,zero,22044 <_fflush_r+0x108>
   21f80:	89000117 	ldw	r4,4(r17)
   21f84:	10c20014 	ori	r3,r2,2048
   21f88:	88c0030d 	sth	r3,12(r17)
   21f8c:	180b883a 	mov	r5,r3
   21f90:	0100520e 	bge	zero,r4,220dc <_fflush_r+0x1a0>
   21f94:	88c00a17 	ldw	r3,40(r17)
   21f98:	18002226 	beq	r3,zero,22024 <_fflush_r+0xe8>
   21f9c:	1084000c 	andi	r2,r2,4096
   21fa0:	10bfffcc 	andi	r2,r2,65535
   21fa4:	10a0001c 	xori	r2,r2,32768
   21fa8:	10a00004 	addi	r2,r2,-32768
   21fac:	10004e26 	beq	r2,zero,220e8 <_fflush_r+0x1ac>
   21fb0:	8c001417 	ldw	r16,80(r17)
   21fb4:	2940010c 	andi	r5,r5,4
   21fb8:	297fffcc 	andi	r5,r5,65535
   21fbc:	2960001c 	xori	r5,r5,32768
   21fc0:	29600004 	addi	r5,r5,-32768
   21fc4:	28000626 	beq	r5,zero,21fe0 <_fflush_r+0xa4>
   21fc8:	89000117 	ldw	r4,4(r17)
   21fcc:	88800c17 	ldw	r2,48(r17)
   21fd0:	8121c83a 	sub	r16,r16,r4
   21fd4:	10000226 	beq	r2,zero,21fe0 <_fflush_r+0xa4>
   21fd8:	88800f17 	ldw	r2,60(r17)
   21fdc:	80a1c83a 	sub	r16,r16,r2
   21fe0:	89400717 	ldw	r5,28(r17)
   21fe4:	9809883a 	mov	r4,r19
   21fe8:	800d883a 	mov	r6,r16
   21fec:	000f883a 	mov	r7,zero
   21ff0:	183ee83a 	callr	r3
   21ff4:	8080281e 	bne	r16,r2,22098 <_fflush_r+0x15c>
   21ff8:	8880030b 	ldhu	r2,12(r17)
   21ffc:	88c00417 	ldw	r3,16(r17)
   22000:	88000115 	stw	zero,4(r17)
   22004:	113dffcc 	andi	r4,r2,63487
   22008:	1084000c 	andi	r2,r2,4096
   2200c:	10bfffcc 	andi	r2,r2,65535
   22010:	10a0001c 	xori	r2,r2,32768
   22014:	8900030d 	sth	r4,12(r17)
   22018:	88c00015 	stw	r3,0(r17)
   2201c:	10a00004 	addi	r2,r2,-32768
   22020:	10002c1e 	bne	r2,zero,220d4 <_fflush_r+0x198>
   22024:	0005883a 	mov	r2,zero
   22028:	dfc00417 	ldw	ra,16(sp)
   2202c:	dcc00317 	ldw	r19,12(sp)
   22030:	dc800217 	ldw	r18,8(sp)
   22034:	dc400117 	ldw	r17,4(sp)
   22038:	dc000017 	ldw	r16,0(sp)
   2203c:	dec00504 	addi	sp,sp,20
   22040:	f800283a 	ret
   22044:	8c800417 	ldw	r18,16(r17)
   22048:	903ff626 	beq	r18,zero,22024 <_fflush_r+0xe8>
   2204c:	8c000017 	ldw	r16,0(r17)
   22050:	108000cc 	andi	r2,r2,3
   22054:	8c800015 	stw	r18,0(r17)
   22058:	84a1c83a 	sub	r16,r16,r18
   2205c:	10001b1e 	bne	r2,zero,220cc <_fflush_r+0x190>
   22060:	88800517 	ldw	r2,20(r17)
   22064:	88800215 	stw	r2,8(r17)
   22068:	04000316 	blt	zero,r16,22078 <_fflush_r+0x13c>
   2206c:	003fed06 	br	22024 <_fflush_r+0xe8>
   22070:	90a5883a 	add	r18,r18,r2
   22074:	043feb0e 	bge	zero,r16,22024 <_fflush_r+0xe8>
   22078:	88800917 	ldw	r2,36(r17)
   2207c:	89400717 	ldw	r5,28(r17)
   22080:	800f883a 	mov	r7,r16
   22084:	900d883a 	mov	r6,r18
   22088:	9809883a 	mov	r4,r19
   2208c:	103ee83a 	callr	r2
   22090:	80a1c83a 	sub	r16,r16,r2
   22094:	00bff616 	blt	zero,r2,22070 <_fflush_r+0x134>
   22098:	88c0030b 	ldhu	r3,12(r17)
   2209c:	00bfffc4 	movi	r2,-1
   220a0:	18c01014 	ori	r3,r3,64
   220a4:	88c0030d 	sth	r3,12(r17)
   220a8:	dfc00417 	ldw	ra,16(sp)
   220ac:	dcc00317 	ldw	r19,12(sp)
   220b0:	dc800217 	ldw	r18,8(sp)
   220b4:	dc400117 	ldw	r17,4(sp)
   220b8:	dc000017 	ldw	r16,0(sp)
   220bc:	dec00504 	addi	sp,sp,20
   220c0:	f800283a 	ret
   220c4:	00221f80 	call	221f8 <__sinit>
   220c8:	003fa706 	br	21f68 <_fflush_r+0x2c>
   220cc:	0005883a 	mov	r2,zero
   220d0:	003fe406 	br	22064 <_fflush_r+0x128>
   220d4:	8c001415 	stw	r16,80(r17)
   220d8:	003fd206 	br	22024 <_fflush_r+0xe8>
   220dc:	88c00f17 	ldw	r3,60(r17)
   220e0:	00ffac16 	blt	zero,r3,21f94 <_fflush_r+0x58>
   220e4:	003fcf06 	br	22024 <_fflush_r+0xe8>
   220e8:	89400717 	ldw	r5,28(r17)
   220ec:	9809883a 	mov	r4,r19
   220f0:	000d883a 	mov	r6,zero
   220f4:	01c00044 	movi	r7,1
   220f8:	183ee83a 	callr	r3
   220fc:	1021883a 	mov	r16,r2
   22100:	00bfffc4 	movi	r2,-1
   22104:	80800326 	beq	r16,r2,22114 <_fflush_r+0x1d8>
   22108:	8940030b 	ldhu	r5,12(r17)
   2210c:	88c00a17 	ldw	r3,40(r17)
   22110:	003fa806 	br	21fb4 <_fflush_r+0x78>
   22114:	98c00017 	ldw	r3,0(r19)
   22118:	00800744 	movi	r2,29
   2211c:	18bfde1e 	bne	r3,r2,22098 <_fflush_r+0x15c>
   22120:	003fc006 	br	22024 <_fflush_r+0xe8>

00022124 <fflush>:
   22124:	200b883a 	mov	r5,r4
   22128:	20000426 	beq	r4,zero,2213c <fflush+0x18>
   2212c:	008000b4 	movhi	r2,2
   22130:	109e2504 	addi	r2,r2,30868
   22134:	11000017 	ldw	r4,0(r2)
   22138:	0021f3c1 	jmpi	21f3c <_fflush_r>
   2213c:	008000b4 	movhi	r2,2
   22140:	109e2404 	addi	r2,r2,30864
   22144:	11000017 	ldw	r4,0(r2)
   22148:	014000b4 	movhi	r5,2
   2214c:	2947cf04 	addi	r5,r5,7996
   22150:	00228f41 	jmpi	228f4 <_fwalk_reent>

00022154 <__fp_lock>:
   22154:	0005883a 	mov	r2,zero
   22158:	f800283a 	ret

0002215c <__fp_unlock>:
   2215c:	0005883a 	mov	r2,zero
   22160:	f800283a 	ret

00022164 <_cleanup_r>:
   22164:	014000b4 	movhi	r5,2
   22168:	294bdf04 	addi	r5,r5,12156
   2216c:	002284c1 	jmpi	2284c <_fwalk>

00022170 <__sfmoreglue>:
   22170:	defffc04 	addi	sp,sp,-16
   22174:	dc800215 	stw	r18,8(sp)
   22178:	2825883a 	mov	r18,r5
   2217c:	dc000015 	stw	r16,0(sp)
   22180:	01401704 	movi	r5,92
   22184:	2021883a 	mov	r16,r4
   22188:	9009883a 	mov	r4,r18
   2218c:	dfc00315 	stw	ra,12(sp)
   22190:	dc400115 	stw	r17,4(sp)
   22194:	00231340 	call	23134 <__mulsi3>
   22198:	8009883a 	mov	r4,r16
   2219c:	11400304 	addi	r5,r2,12
   221a0:	1023883a 	mov	r17,r2
   221a4:	0020c200 	call	20c20 <_malloc_r>
   221a8:	1021883a 	mov	r16,r2
   221ac:	10000726 	beq	r2,zero,221cc <__sfmoreglue+0x5c>
   221b0:	11000304 	addi	r4,r2,12
   221b4:	10000015 	stw	zero,0(r2)
   221b8:	14800115 	stw	r18,4(r2)
   221bc:	11000215 	stw	r4,8(r2)
   221c0:	000b883a 	mov	r5,zero
   221c4:	880d883a 	mov	r6,r17
   221c8:	0022b540 	call	22b54 <memset>
   221cc:	8005883a 	mov	r2,r16
   221d0:	dfc00317 	ldw	ra,12(sp)
   221d4:	dc800217 	ldw	r18,8(sp)
   221d8:	dc400117 	ldw	r17,4(sp)
   221dc:	dc000017 	ldw	r16,0(sp)
   221e0:	dec00404 	addi	sp,sp,16
   221e4:	f800283a 	ret

000221e8 <_cleanup>:
   221e8:	008000b4 	movhi	r2,2
   221ec:	109e2404 	addi	r2,r2,30864
   221f0:	11000017 	ldw	r4,0(r2)
   221f4:	00221641 	jmpi	22164 <_cleanup_r>

000221f8 <__sinit>:
   221f8:	20800e17 	ldw	r2,56(r4)
   221fc:	1000401e 	bne	r2,zero,22300 <__sinit+0x108>
   22200:	21400117 	ldw	r5,4(r4)
   22204:	018000b4 	movhi	r6,2
   22208:	31885904 	addi	r6,r6,8548
   2220c:	20c00217 	ldw	r3,8(r4)
   22210:	21800f15 	stw	r6,60(r4)
   22214:	2080bb04 	addi	r2,r4,748
   22218:	02400044 	movi	r9,1
   2221c:	018000c4 	movi	r6,3
   22220:	2180b915 	stw	r6,740(r4)
   22224:	2080ba15 	stw	r2,744(r4)
   22228:	22400e15 	stw	r9,56(r4)
   2222c:	20800317 	ldw	r2,12(r4)
   22230:	2000b815 	stw	zero,736(r4)
   22234:	020000b4 	movhi	r8,2
   22238:	420b0c04 	addi	r8,r8,11312
   2223c:	01c000b4 	movhi	r7,2
   22240:	39cb2104 	addi	r7,r7,11396
   22244:	018000b4 	movhi	r6,2
   22248:	318b4304 	addi	r6,r6,11532
   2224c:	010000b4 	movhi	r4,2
   22250:	210b5a04 	addi	r4,r4,11624
   22254:	02800104 	movi	r10,4
   22258:	28000015 	stw	zero,0(r5)
   2225c:	28000115 	stw	zero,4(r5)
   22260:	28000215 	stw	zero,8(r5)
   22264:	2a80030d 	sth	r10,12(r5)
   22268:	2800038d 	sth	zero,14(r5)
   2226c:	28000415 	stw	zero,16(r5)
   22270:	28000515 	stw	zero,20(r5)
   22274:	28000615 	stw	zero,24(r5)
   22278:	29400715 	stw	r5,28(r5)
   2227c:	2a000815 	stw	r8,32(r5)
   22280:	29c00915 	stw	r7,36(r5)
   22284:	29800a15 	stw	r6,40(r5)
   22288:	29000b15 	stw	r4,44(r5)
   2228c:	01400284 	movi	r5,10
   22290:	18000015 	stw	zero,0(r3)
   22294:	18000115 	stw	zero,4(r3)
   22298:	18000215 	stw	zero,8(r3)
   2229c:	1940030d 	sth	r5,12(r3)
   222a0:	1a40038d 	sth	r9,14(r3)
   222a4:	18000415 	stw	zero,16(r3)
   222a8:	18000515 	stw	zero,20(r3)
   222ac:	18000615 	stw	zero,24(r3)
   222b0:	18c00715 	stw	r3,28(r3)
   222b4:	1a000815 	stw	r8,32(r3)
   222b8:	19c00915 	stw	r7,36(r3)
   222bc:	19800a15 	stw	r6,40(r3)
   222c0:	19000b15 	stw	r4,44(r3)
   222c4:	00c00484 	movi	r3,18
   222c8:	10c0030d 	sth	r3,12(r2)
   222cc:	00c00084 	movi	r3,2
   222d0:	10000015 	stw	zero,0(r2)
   222d4:	10000115 	stw	zero,4(r2)
   222d8:	10000215 	stw	zero,8(r2)
   222dc:	10c0038d 	sth	r3,14(r2)
   222e0:	10000415 	stw	zero,16(r2)
   222e4:	10000515 	stw	zero,20(r2)
   222e8:	10000615 	stw	zero,24(r2)
   222ec:	10800715 	stw	r2,28(r2)
   222f0:	12000815 	stw	r8,32(r2)
   222f4:	11c00915 	stw	r7,36(r2)
   222f8:	11800a15 	stw	r6,40(r2)
   222fc:	11000b15 	stw	r4,44(r2)
   22300:	f800283a 	ret

00022304 <__sfp>:
   22304:	defffc04 	addi	sp,sp,-16
   22308:	008000b4 	movhi	r2,2
   2230c:	109e2404 	addi	r2,r2,30864
   22310:	dc400115 	stw	r17,4(sp)
   22314:	14400017 	ldw	r17,0(r2)
   22318:	dc800215 	stw	r18,8(sp)
   2231c:	dfc00315 	stw	ra,12(sp)
   22320:	88800e17 	ldw	r2,56(r17)
   22324:	dc000015 	stw	r16,0(sp)
   22328:	2025883a 	mov	r18,r4
   2232c:	10002826 	beq	r2,zero,223d0 <__sfp+0xcc>
   22330:	8c40b804 	addi	r17,r17,736
   22334:	043fffc4 	movi	r16,-1
   22338:	89400117 	ldw	r5,4(r17)
   2233c:	88800217 	ldw	r2,8(r17)
   22340:	297fffc4 	addi	r5,r5,-1
   22344:	28000a16 	blt	r5,zero,22370 <__sfp+0x6c>
   22348:	10c0030f 	ldh	r3,12(r2)
   2234c:	18000c26 	beq	r3,zero,22380 <__sfp+0x7c>
   22350:	10c01a04 	addi	r3,r2,104
   22354:	00000206 	br	22360 <__sfp+0x5c>
   22358:	19bfe90f 	ldh	r6,-92(r3)
   2235c:	30000826 	beq	r6,zero,22380 <__sfp+0x7c>
   22360:	297fffc4 	addi	r5,r5,-1
   22364:	18bffd04 	addi	r2,r3,-12
   22368:	18c01704 	addi	r3,r3,92
   2236c:	2c3ffa1e 	bne	r5,r16,22358 <__sfp+0x54>
   22370:	88800017 	ldw	r2,0(r17)
   22374:	10001926 	beq	r2,zero,223dc <__sfp+0xd8>
   22378:	1023883a 	mov	r17,r2
   2237c:	003fee06 	br	22338 <__sfp+0x34>
   22380:	00ffffc4 	movi	r3,-1
   22384:	10c0038d 	sth	r3,14(r2)
   22388:	00c00044 	movi	r3,1
   2238c:	10c0030d 	sth	r3,12(r2)
   22390:	10000015 	stw	zero,0(r2)
   22394:	10000215 	stw	zero,8(r2)
   22398:	10000115 	stw	zero,4(r2)
   2239c:	10000415 	stw	zero,16(r2)
   223a0:	10000515 	stw	zero,20(r2)
   223a4:	10000615 	stw	zero,24(r2)
   223a8:	10000c15 	stw	zero,48(r2)
   223ac:	10000d15 	stw	zero,52(r2)
   223b0:	10001115 	stw	zero,68(r2)
   223b4:	10001215 	stw	zero,72(r2)
   223b8:	dfc00317 	ldw	ra,12(sp)
   223bc:	dc800217 	ldw	r18,8(sp)
   223c0:	dc400117 	ldw	r17,4(sp)
   223c4:	dc000017 	ldw	r16,0(sp)
   223c8:	dec00404 	addi	sp,sp,16
   223cc:	f800283a 	ret
   223d0:	8809883a 	mov	r4,r17
   223d4:	00221f80 	call	221f8 <__sinit>
   223d8:	003fd506 	br	22330 <__sfp+0x2c>
   223dc:	9009883a 	mov	r4,r18
   223e0:	01400104 	movi	r5,4
   223e4:	00221700 	call	22170 <__sfmoreglue>
   223e8:	88800015 	stw	r2,0(r17)
   223ec:	103fe21e 	bne	r2,zero,22378 <__sfp+0x74>
   223f0:	00800304 	movi	r2,12
   223f4:	90800015 	stw	r2,0(r18)
   223f8:	0005883a 	mov	r2,zero
   223fc:	003fee06 	br	223b8 <__sfp+0xb4>

00022400 <__sfp_lock_acquire>:
   22400:	f800283a 	ret

00022404 <__sfp_lock_release>:
   22404:	f800283a 	ret

00022408 <__sinit_lock_acquire>:
   22408:	f800283a 	ret

0002240c <__sinit_lock_release>:
   2240c:	f800283a 	ret

00022410 <__fp_lock_all>:
   22410:	008000b4 	movhi	r2,2
   22414:	109e2504 	addi	r2,r2,30868
   22418:	11000017 	ldw	r4,0(r2)
   2241c:	014000b4 	movhi	r5,2
   22420:	29485504 	addi	r5,r5,8532
   22424:	002284c1 	jmpi	2284c <_fwalk>

00022428 <__fp_unlock_all>:
   22428:	008000b4 	movhi	r2,2
   2242c:	109e2504 	addi	r2,r2,30868
   22430:	11000017 	ldw	r4,0(r2)
   22434:	014000b4 	movhi	r5,2
   22438:	29485704 	addi	r5,r5,8540
   2243c:	002284c1 	jmpi	2284c <_fwalk>

00022440 <_malloc_trim_r>:
   22440:	defffb04 	addi	sp,sp,-20
   22444:	dcc00315 	stw	r19,12(sp)
   22448:	dc800215 	stw	r18,8(sp)
   2244c:	dc400115 	stw	r17,4(sp)
   22450:	dc000015 	stw	r16,0(sp)
   22454:	2827883a 	mov	r19,r5
   22458:	dfc00415 	stw	ra,16(sp)
   2245c:	044000b4 	movhi	r17,2
   22460:	8c58a004 	addi	r17,r17,25216
   22464:	2021883a 	mov	r16,r4
   22468:	00237200 	call	23720 <__malloc_lock>
   2246c:	88800217 	ldw	r2,8(r17)
   22470:	14800117 	ldw	r18,4(r2)
   22474:	00bfff04 	movi	r2,-4
   22478:	90a4703a 	and	r18,r18,r2
   2247c:	9083fbc4 	addi	r2,r18,4079
   22480:	14e7c83a 	sub	r19,r2,r19
   22484:	9826d33a 	srli	r19,r19,12
   22488:	0083ffc4 	movi	r2,4095
   2248c:	9cffffc4 	addi	r19,r19,-1
   22490:	9826933a 	slli	r19,r19,12
   22494:	14c0060e 	bge	r2,r19,224b0 <_malloc_trim_r+0x70>
   22498:	8009883a 	mov	r4,r16
   2249c:	000b883a 	mov	r5,zero
   224a0:	0021d640 	call	21d64 <_sbrk_r>
   224a4:	88c00217 	ldw	r3,8(r17)
   224a8:	1c87883a 	add	r3,r3,r18
   224ac:	10c00a26 	beq	r2,r3,224d8 <_malloc_trim_r+0x98>
   224b0:	8009883a 	mov	r4,r16
   224b4:	00237400 	call	23740 <__malloc_unlock>
   224b8:	0005883a 	mov	r2,zero
   224bc:	dfc00417 	ldw	ra,16(sp)
   224c0:	dcc00317 	ldw	r19,12(sp)
   224c4:	dc800217 	ldw	r18,8(sp)
   224c8:	dc400117 	ldw	r17,4(sp)
   224cc:	dc000017 	ldw	r16,0(sp)
   224d0:	dec00504 	addi	sp,sp,20
   224d4:	f800283a 	ret
   224d8:	8009883a 	mov	r4,r16
   224dc:	04cbc83a 	sub	r5,zero,r19
   224e0:	0021d640 	call	21d64 <_sbrk_r>
   224e4:	00ffffc4 	movi	r3,-1
   224e8:	10c01326 	beq	r2,r3,22538 <_malloc_trim_r+0xf8>
   224ec:	008000f4 	movhi	r2,3
   224f0:	10a4ce04 	addi	r2,r2,-27848
   224f4:	11000017 	ldw	r4,0(r2)
   224f8:	88c00217 	ldw	r3,8(r17)
   224fc:	94e5c83a 	sub	r18,r18,r19
   22500:	94800054 	ori	r18,r18,1
   22504:	24e7c83a 	sub	r19,r4,r19
   22508:	1c800115 	stw	r18,4(r3)
   2250c:	8009883a 	mov	r4,r16
   22510:	14c00015 	stw	r19,0(r2)
   22514:	00237400 	call	23740 <__malloc_unlock>
   22518:	00800044 	movi	r2,1
   2251c:	dfc00417 	ldw	ra,16(sp)
   22520:	dcc00317 	ldw	r19,12(sp)
   22524:	dc800217 	ldw	r18,8(sp)
   22528:	dc400117 	ldw	r17,4(sp)
   2252c:	dc000017 	ldw	r16,0(sp)
   22530:	dec00504 	addi	sp,sp,20
   22534:	f800283a 	ret
   22538:	8009883a 	mov	r4,r16
   2253c:	000b883a 	mov	r5,zero
   22540:	0021d640 	call	21d64 <_sbrk_r>
   22544:	88c00217 	ldw	r3,8(r17)
   22548:	014003c4 	movi	r5,15
   2254c:	10c9c83a 	sub	r4,r2,r3
   22550:	293fd70e 	bge	r5,r4,224b0 <_malloc_trim_r+0x70>
   22554:	014000b4 	movhi	r5,2
   22558:	295e2604 	addi	r5,r5,30872
   2255c:	29400017 	ldw	r5,0(r5)
   22560:	21000054 	ori	r4,r4,1
   22564:	19000115 	stw	r4,4(r3)
   22568:	1145c83a 	sub	r2,r2,r5
   2256c:	014000f4 	movhi	r5,3
   22570:	2964ce04 	addi	r5,r5,-27848
   22574:	28800015 	stw	r2,0(r5)
   22578:	003fcd06 	br	224b0 <_malloc_trim_r+0x70>

0002257c <_free_r>:
   2257c:	defffd04 	addi	sp,sp,-12
   22580:	dc400115 	stw	r17,4(sp)
   22584:	dc000015 	stw	r16,0(sp)
   22588:	dfc00215 	stw	ra,8(sp)
   2258c:	2821883a 	mov	r16,r5
   22590:	2023883a 	mov	r17,r4
   22594:	28004b26 	beq	r5,zero,226c4 <_free_r+0x148>
   22598:	00237200 	call	23720 <__malloc_lock>
   2259c:	823fff17 	ldw	r8,-4(r16)
   225a0:	00bfff84 	movi	r2,-2
   225a4:	81bffe04 	addi	r6,r16,-8
   225a8:	4084703a 	and	r2,r8,r2
   225ac:	3087883a 	add	r3,r6,r2
   225b0:	014000b4 	movhi	r5,2
   225b4:	2958a004 	addi	r5,r5,25216
   225b8:	1a400117 	ldw	r9,4(r3)
   225bc:	29000217 	ldw	r4,8(r5)
   225c0:	01ffff04 	movi	r7,-4
   225c4:	49ce703a 	and	r7,r9,r7
   225c8:	20c06526 	beq	r4,r3,22760 <_free_r+0x1e4>
   225cc:	19c00115 	stw	r7,4(r3)
   225d0:	4200004c 	andi	r8,r8,1
   225d4:	40003026 	beq	r8,zero,22698 <_free_r+0x11c>
   225d8:	0009883a 	mov	r4,zero
   225dc:	19d1883a 	add	r8,r3,r7
   225e0:	42000117 	ldw	r8,4(r8)
   225e4:	4200004c 	andi	r8,r8,1
   225e8:	4000061e 	bne	r8,zero,22604 <_free_r+0x88>
   225ec:	11c5883a 	add	r2,r2,r7
   225f0:	19c00217 	ldw	r7,8(r3)
   225f4:	20004e26 	beq	r4,zero,22730 <_free_r+0x1b4>
   225f8:	18c00317 	ldw	r3,12(r3)
   225fc:	38c00315 	stw	r3,12(r7)
   22600:	19c00215 	stw	r7,8(r3)
   22604:	11c00054 	ori	r7,r2,1
   22608:	3087883a 	add	r3,r6,r2
   2260c:	31c00115 	stw	r7,4(r6)
   22610:	18800015 	stw	r2,0(r3)
   22614:	20001a1e 	bne	r4,zero,22680 <_free_r+0x104>
   22618:	00c07fc4 	movi	r3,511
   2261c:	18802e2e 	bgeu	r3,r2,226d8 <_free_r+0x15c>
   22620:	1006d27a 	srli	r3,r2,9
   22624:	01000104 	movi	r4,4
   22628:	20c06636 	bltu	r4,r3,227c4 <_free_r+0x248>
   2262c:	1008d1ba 	srli	r4,r2,6
   22630:	21000e04 	addi	r4,r4,56
   22634:	210f883a 	add	r7,r4,r4
   22638:	39cf883a 	add	r7,r7,r7
   2263c:	39cf883a 	add	r7,r7,r7
   22640:	29cf883a 	add	r7,r5,r7
   22644:	38c00217 	ldw	r3,8(r7)
   22648:	014000b4 	movhi	r5,2
   2264c:	2958a004 	addi	r5,r5,25216
   22650:	19c06126 	beq	r3,r7,227d8 <_free_r+0x25c>
   22654:	013fff04 	movi	r4,-4
   22658:	19400117 	ldw	r5,4(r3)
   2265c:	290a703a 	and	r5,r5,r4
   22660:	1140022e 	bgeu	r2,r5,2266c <_free_r+0xf0>
   22664:	18c00217 	ldw	r3,8(r3)
   22668:	38fffb1e 	bne	r7,r3,22658 <_free_r+0xdc>
   2266c:	18800317 	ldw	r2,12(r3)
   22670:	30800315 	stw	r2,12(r6)
   22674:	30c00215 	stw	r3,8(r6)
   22678:	11800215 	stw	r6,8(r2)
   2267c:	19800315 	stw	r6,12(r3)
   22680:	8809883a 	mov	r4,r17
   22684:	dfc00217 	ldw	ra,8(sp)
   22688:	dc400117 	ldw	r17,4(sp)
   2268c:	dc000017 	ldw	r16,0(sp)
   22690:	dec00304 	addi	sp,sp,12
   22694:	00237401 	jmpi	23740 <__malloc_unlock>
   22698:	813ffe17 	ldw	r4,-8(r16)
   2269c:	2a400204 	addi	r9,r5,8
   226a0:	310dc83a 	sub	r6,r6,r4
   226a4:	32000217 	ldw	r8,8(r6)
   226a8:	1105883a 	add	r2,r2,r4
   226ac:	42404326 	beq	r8,r9,227bc <_free_r+0x240>
   226b0:	32400317 	ldw	r9,12(r6)
   226b4:	0009883a 	mov	r4,zero
   226b8:	42400315 	stw	r9,12(r8)
   226bc:	4a000215 	stw	r8,8(r9)
   226c0:	003fc606 	br	225dc <_free_r+0x60>
   226c4:	dfc00217 	ldw	ra,8(sp)
   226c8:	dc400117 	ldw	r17,4(sp)
   226cc:	dc000017 	ldw	r16,0(sp)
   226d0:	dec00304 	addi	sp,sp,12
   226d4:	f800283a 	ret
   226d8:	1004d0fa 	srli	r2,r2,3
   226dc:	02000044 	movi	r8,1
   226e0:	29c00117 	ldw	r7,4(r5)
   226e4:	1087883a 	add	r3,r2,r2
   226e8:	18c7883a 	add	r3,r3,r3
   226ec:	1005d0ba 	srai	r2,r2,2
   226f0:	18c7883a 	add	r3,r3,r3
   226f4:	28c7883a 	add	r3,r5,r3
   226f8:	19000217 	ldw	r4,8(r3)
   226fc:	4084983a 	sll	r2,r8,r2
   22700:	30c00315 	stw	r3,12(r6)
   22704:	31000215 	stw	r4,8(r6)
   22708:	11c4b03a 	or	r2,r2,r7
   2270c:	21800315 	stw	r6,12(r4)
   22710:	8809883a 	mov	r4,r17
   22714:	28800115 	stw	r2,4(r5)
   22718:	19800215 	stw	r6,8(r3)
   2271c:	dfc00217 	ldw	ra,8(sp)
   22720:	dc400117 	ldw	r17,4(sp)
   22724:	dc000017 	ldw	r16,0(sp)
   22728:	dec00304 	addi	sp,sp,12
   2272c:	00237401 	jmpi	23740 <__malloc_unlock>
   22730:	020000b4 	movhi	r8,2
   22734:	4218a204 	addi	r8,r8,25224
   22738:	3a3faf1e 	bne	r7,r8,225f8 <_free_r+0x7c>
   2273c:	29800515 	stw	r6,20(r5)
   22740:	29800415 	stw	r6,16(r5)
   22744:	11000054 	ori	r4,r2,1
   22748:	3087883a 	add	r3,r6,r2
   2274c:	31c00315 	stw	r7,12(r6)
   22750:	31c00215 	stw	r7,8(r6)
   22754:	31000115 	stw	r4,4(r6)
   22758:	18800015 	stw	r2,0(r3)
   2275c:	003fc806 	br	22680 <_free_r+0x104>
   22760:	4200004c 	andi	r8,r8,1
   22764:	3885883a 	add	r2,r7,r2
   22768:	4000071e 	bne	r8,zero,22788 <_free_r+0x20c>
   2276c:	81fffe17 	ldw	r7,-8(r16)
   22770:	31cdc83a 	sub	r6,r6,r7
   22774:	30c00317 	ldw	r3,12(r6)
   22778:	31000217 	ldw	r4,8(r6)
   2277c:	11c5883a 	add	r2,r2,r7
   22780:	20c00315 	stw	r3,12(r4)
   22784:	19000215 	stw	r4,8(r3)
   22788:	00c000b4 	movhi	r3,2
   2278c:	18de2704 	addi	r3,r3,30876
   22790:	18c00017 	ldw	r3,0(r3)
   22794:	11000054 	ori	r4,r2,1
   22798:	31000115 	stw	r4,4(r6)
   2279c:	29800215 	stw	r6,8(r5)
   227a0:	10ffb736 	bltu	r2,r3,22680 <_free_r+0x104>
   227a4:	008000f4 	movhi	r2,3
   227a8:	10a4c604 	addi	r2,r2,-27880
   227ac:	11400017 	ldw	r5,0(r2)
   227b0:	8809883a 	mov	r4,r17
   227b4:	00224400 	call	22440 <_malloc_trim_r>
   227b8:	003fb106 	br	22680 <_free_r+0x104>
   227bc:	01000044 	movi	r4,1
   227c0:	003f8606 	br	225dc <_free_r+0x60>
   227c4:	01000504 	movi	r4,20
   227c8:	20c00b36 	bltu	r4,r3,227f8 <_free_r+0x27c>
   227cc:	190016c4 	addi	r4,r3,91
   227d0:	210f883a 	add	r7,r4,r4
   227d4:	003f9806 	br	22638 <_free_r+0xbc>
   227d8:	2009d0ba 	srai	r4,r4,2
   227dc:	00800044 	movi	r2,1
   227e0:	29c00117 	ldw	r7,4(r5)
   227e4:	1108983a 	sll	r4,r2,r4
   227e8:	1805883a 	mov	r2,r3
   227ec:	21c8b03a 	or	r4,r4,r7
   227f0:	29000115 	stw	r4,4(r5)
   227f4:	003f9e06 	br	22670 <_free_r+0xf4>
   227f8:	01001504 	movi	r4,84
   227fc:	20c00436 	bltu	r4,r3,22810 <_free_r+0x294>
   22800:	1008d33a 	srli	r4,r2,12
   22804:	21001b84 	addi	r4,r4,110
   22808:	210f883a 	add	r7,r4,r4
   2280c:	003f8a06 	br	22638 <_free_r+0xbc>
   22810:	01005504 	movi	r4,340
   22814:	20c00436 	bltu	r4,r3,22828 <_free_r+0x2ac>
   22818:	1008d3fa 	srli	r4,r2,15
   2281c:	21001dc4 	addi	r4,r4,119
   22820:	210f883a 	add	r7,r4,r4
   22824:	003f8406 	br	22638 <_free_r+0xbc>
   22828:	01015504 	movi	r4,1364
   2282c:	20c00436 	bltu	r4,r3,22840 <_free_r+0x2c4>
   22830:	1008d4ba 	srli	r4,r2,18
   22834:	21001f04 	addi	r4,r4,124
   22838:	210f883a 	add	r7,r4,r4
   2283c:	003f7e06 	br	22638 <_free_r+0xbc>
   22840:	01c03f04 	movi	r7,252
   22844:	01001f84 	movi	r4,126
   22848:	003f7b06 	br	22638 <_free_r+0xbc>

0002284c <_fwalk>:
   2284c:	defff904 	addi	sp,sp,-28
   22850:	dcc00315 	stw	r19,12(sp)
   22854:	24c0b804 	addi	r19,r4,736
   22858:	dd400515 	stw	r21,20(sp)
   2285c:	dd000415 	stw	r20,16(sp)
   22860:	dfc00615 	stw	ra,24(sp)
   22864:	dc800215 	stw	r18,8(sp)
   22868:	dc400115 	stw	r17,4(sp)
   2286c:	dc000015 	stw	r16,0(sp)
   22870:	282b883a 	mov	r21,r5
   22874:	0029883a 	mov	r20,zero
   22878:	00224000 	call	22400 <__sfp_lock_acquire>
   2287c:	98001226 	beq	r19,zero,228c8 <_fwalk+0x7c>
   22880:	04bfffc4 	movi	r18,-1
   22884:	9c400117 	ldw	r17,4(r19)
   22888:	9c000217 	ldw	r16,8(r19)
   2288c:	8c7fffc4 	addi	r17,r17,-1
   22890:	88000b16 	blt	r17,zero,228c0 <_fwalk+0x74>
   22894:	84000304 	addi	r16,r16,12
   22898:	80c0000f 	ldh	r3,0(r16)
   2289c:	8c7fffc4 	addi	r17,r17,-1
   228a0:	813ffd04 	addi	r4,r16,-12
   228a4:	18000426 	beq	r3,zero,228b8 <_fwalk+0x6c>
   228a8:	80c0008f 	ldh	r3,2(r16)
   228ac:	1c800226 	beq	r3,r18,228b8 <_fwalk+0x6c>
   228b0:	a83ee83a 	callr	r21
   228b4:	a0a8b03a 	or	r20,r20,r2
   228b8:	84001704 	addi	r16,r16,92
   228bc:	8cbff61e 	bne	r17,r18,22898 <_fwalk+0x4c>
   228c0:	9cc00017 	ldw	r19,0(r19)
   228c4:	983fef1e 	bne	r19,zero,22884 <_fwalk+0x38>
   228c8:	00224040 	call	22404 <__sfp_lock_release>
   228cc:	a005883a 	mov	r2,r20
   228d0:	dfc00617 	ldw	ra,24(sp)
   228d4:	dd400517 	ldw	r21,20(sp)
   228d8:	dd000417 	ldw	r20,16(sp)
   228dc:	dcc00317 	ldw	r19,12(sp)
   228e0:	dc800217 	ldw	r18,8(sp)
   228e4:	dc400117 	ldw	r17,4(sp)
   228e8:	dc000017 	ldw	r16,0(sp)
   228ec:	dec00704 	addi	sp,sp,28
   228f0:	f800283a 	ret

000228f4 <_fwalk_reent>:
   228f4:	defff804 	addi	sp,sp,-32
   228f8:	dcc00315 	stw	r19,12(sp)
   228fc:	24c0b804 	addi	r19,r4,736
   22900:	dd800615 	stw	r22,24(sp)
   22904:	dd400515 	stw	r21,20(sp)
   22908:	dd000415 	stw	r20,16(sp)
   2290c:	dfc00715 	stw	ra,28(sp)
   22910:	dc800215 	stw	r18,8(sp)
   22914:	dc400115 	stw	r17,4(sp)
   22918:	dc000015 	stw	r16,0(sp)
   2291c:	2029883a 	mov	r20,r4
   22920:	282b883a 	mov	r21,r5
   22924:	002d883a 	mov	r22,zero
   22928:	00224000 	call	22400 <__sfp_lock_acquire>
   2292c:	98001326 	beq	r19,zero,2297c <_fwalk_reent+0x88>
   22930:	04bfffc4 	movi	r18,-1
   22934:	9c400117 	ldw	r17,4(r19)
   22938:	9c000217 	ldw	r16,8(r19)
   2293c:	8c7fffc4 	addi	r17,r17,-1
   22940:	88000c16 	blt	r17,zero,22974 <_fwalk_reent+0x80>
   22944:	84000304 	addi	r16,r16,12
   22948:	80c0000f 	ldh	r3,0(r16)
   2294c:	8c7fffc4 	addi	r17,r17,-1
   22950:	817ffd04 	addi	r5,r16,-12
   22954:	18000526 	beq	r3,zero,2296c <_fwalk_reent+0x78>
   22958:	80c0008f 	ldh	r3,2(r16)
   2295c:	a009883a 	mov	r4,r20
   22960:	1c800226 	beq	r3,r18,2296c <_fwalk_reent+0x78>
   22964:	a83ee83a 	callr	r21
   22968:	b0acb03a 	or	r22,r22,r2
   2296c:	84001704 	addi	r16,r16,92
   22970:	8cbff51e 	bne	r17,r18,22948 <_fwalk_reent+0x54>
   22974:	9cc00017 	ldw	r19,0(r19)
   22978:	983fee1e 	bne	r19,zero,22934 <_fwalk_reent+0x40>
   2297c:	00224040 	call	22404 <__sfp_lock_release>
   22980:	b005883a 	mov	r2,r22
   22984:	dfc00717 	ldw	ra,28(sp)
   22988:	dd800617 	ldw	r22,24(sp)
   2298c:	dd400517 	ldw	r21,20(sp)
   22990:	dd000417 	ldw	r20,16(sp)
   22994:	dcc00317 	ldw	r19,12(sp)
   22998:	dc800217 	ldw	r18,8(sp)
   2299c:	dc400117 	ldw	r17,4(sp)
   229a0:	dc000017 	ldw	r16,0(sp)
   229a4:	dec00804 	addi	sp,sp,32
   229a8:	f800283a 	ret

000229ac <__smakebuf_r>:
   229ac:	2880030b 	ldhu	r2,12(r5)
   229b0:	deffed04 	addi	sp,sp,-76
   229b4:	dc401015 	stw	r17,64(sp)
   229b8:	10c0008c 	andi	r3,r2,2
   229bc:	18ffffcc 	andi	r3,r3,65535
   229c0:	18e0001c 	xori	r3,r3,32768
   229c4:	dc000f15 	stw	r16,60(sp)
   229c8:	dfc01215 	stw	ra,72(sp)
   229cc:	dc801115 	stw	r18,68(sp)
   229d0:	18e00004 	addi	r3,r3,-32768
   229d4:	2821883a 	mov	r16,r5
   229d8:	2023883a 	mov	r17,r4
   229dc:	1800381e 	bne	r3,zero,22ac0 <__smakebuf_r+0x114>
   229e0:	2940038f 	ldh	r5,14(r5)
   229e4:	28002d16 	blt	r5,zero,22a9c <__smakebuf_r+0xf0>
   229e8:	d80d883a 	mov	r6,sp
   229ec:	0022f900 	call	22f90 <_fstat_r>
   229f0:	10002916 	blt	r2,zero,22a98 <__smakebuf_r+0xec>
   229f4:	d8800117 	ldw	r2,4(sp)
   229f8:	00e00014 	movui	r3,32768
   229fc:	10bc000c 	andi	r2,r2,61440
   22a00:	10c03c26 	beq	r2,r3,22af4 <__smakebuf_r+0x148>
   22a04:	80c0030b 	ldhu	r3,12(r16)
   22a08:	18c20014 	ori	r3,r3,2048
   22a0c:	80c0030d 	sth	r3,12(r16)
   22a10:	00c80004 	movi	r3,8192
   22a14:	10c00c1e 	bne	r2,r3,22a48 <__smakebuf_r+0x9c>
   22a18:	8140038f 	ldh	r5,14(r16)
   22a1c:	8809883a 	mov	r4,r17
   22a20:	0022ff80 	call	22ff8 <_isatty_r>
   22a24:	10000826 	beq	r2,zero,22a48 <__smakebuf_r+0x9c>
   22a28:	80c0030b 	ldhu	r3,12(r16)
   22a2c:	808010c4 	addi	r2,r16,67
   22a30:	80800015 	stw	r2,0(r16)
   22a34:	18c00054 	ori	r3,r3,1
   22a38:	80800415 	stw	r2,16(r16)
   22a3c:	00800044 	movi	r2,1
   22a40:	80c0030d 	sth	r3,12(r16)
   22a44:	80800515 	stw	r2,20(r16)
   22a48:	04810004 	movi	r18,1024
   22a4c:	8809883a 	mov	r4,r17
   22a50:	900b883a 	mov	r5,r18
   22a54:	0020c200 	call	20c20 <_malloc_r>
   22a58:	10003026 	beq	r2,zero,22b1c <__smakebuf_r+0x170>
   22a5c:	80c0030b 	ldhu	r3,12(r16)
   22a60:	010000b4 	movhi	r4,2
   22a64:	21085904 	addi	r4,r4,8548
   22a68:	89000f15 	stw	r4,60(r17)
   22a6c:	18c02014 	ori	r3,r3,128
   22a70:	80c0030d 	sth	r3,12(r16)
   22a74:	80800015 	stw	r2,0(r16)
   22a78:	80800415 	stw	r2,16(r16)
   22a7c:	84800515 	stw	r18,20(r16)
   22a80:	dfc01217 	ldw	ra,72(sp)
   22a84:	dc801117 	ldw	r18,68(sp)
   22a88:	dc401017 	ldw	r17,64(sp)
   22a8c:	dc000f17 	ldw	r16,60(sp)
   22a90:	dec01304 	addi	sp,sp,76
   22a94:	f800283a 	ret
   22a98:	8080030b 	ldhu	r2,12(r16)
   22a9c:	10c0200c 	andi	r3,r2,128
   22aa0:	18ffffcc 	andi	r3,r3,65535
   22aa4:	18e0001c 	xori	r3,r3,32768
   22aa8:	18e00004 	addi	r3,r3,-32768
   22aac:	18000f1e 	bne	r3,zero,22aec <__smakebuf_r+0x140>
   22ab0:	04810004 	movi	r18,1024
   22ab4:	10820014 	ori	r2,r2,2048
   22ab8:	8080030d 	sth	r2,12(r16)
   22abc:	003fe306 	br	22a4c <__smakebuf_r+0xa0>
   22ac0:	288010c4 	addi	r2,r5,67
   22ac4:	28800015 	stw	r2,0(r5)
   22ac8:	28800415 	stw	r2,16(r5)
   22acc:	00800044 	movi	r2,1
   22ad0:	28800515 	stw	r2,20(r5)
   22ad4:	dfc01217 	ldw	ra,72(sp)
   22ad8:	dc801117 	ldw	r18,68(sp)
   22adc:	dc401017 	ldw	r17,64(sp)
   22ae0:	dc000f17 	ldw	r16,60(sp)
   22ae4:	dec01304 	addi	sp,sp,76
   22ae8:	f800283a 	ret
   22aec:	04801004 	movi	r18,64
   22af0:	003ff006 	br	22ab4 <__smakebuf_r+0x108>
   22af4:	81000a17 	ldw	r4,40(r16)
   22af8:	00c000b4 	movhi	r3,2
   22afc:	18cb4304 	addi	r3,r3,11532
   22b00:	20ffc01e 	bne	r4,r3,22a04 <__smakebuf_r+0x58>
   22b04:	8080030b 	ldhu	r2,12(r16)
   22b08:	00c10004 	movi	r3,1024
   22b0c:	80c01315 	stw	r3,76(r16)
   22b10:	10c4b03a 	or	r2,r2,r3
   22b14:	8080030d 	sth	r2,12(r16)
   22b18:	003fcb06 	br	22a48 <__smakebuf_r+0x9c>
   22b1c:	8080030b 	ldhu	r2,12(r16)
   22b20:	10c0800c 	andi	r3,r2,512
   22b24:	18ffffcc 	andi	r3,r3,65535
   22b28:	18e0001c 	xori	r3,r3,32768
   22b2c:	18e00004 	addi	r3,r3,-32768
   22b30:	183fd31e 	bne	r3,zero,22a80 <__smakebuf_r+0xd4>
   22b34:	10800094 	ori	r2,r2,2
   22b38:	80c010c4 	addi	r3,r16,67
   22b3c:	8080030d 	sth	r2,12(r16)
   22b40:	00800044 	movi	r2,1
   22b44:	80c00015 	stw	r3,0(r16)
   22b48:	80c00415 	stw	r3,16(r16)
   22b4c:	80800515 	stw	r2,20(r16)
   22b50:	003fcb06 	br	22a80 <__smakebuf_r+0xd4>

00022b54 <memset>:
   22b54:	00c000c4 	movi	r3,3
   22b58:	2005883a 	mov	r2,r4
   22b5c:	29403fcc 	andi	r5,r5,255
   22b60:	19802d2e 	bgeu	r3,r6,22c18 <memset+0xc4>
   22b64:	20c6703a 	and	r3,r4,r3
   22b68:	18002e1e 	bne	r3,zero,22c24 <memset+0xd0>
   22b6c:	2806923a 	slli	r3,r5,8
   22b70:	010003c4 	movi	r4,15
   22b74:	3011883a 	mov	r8,r6
   22b78:	1946b03a 	or	r3,r3,r5
   22b7c:	180e943a 	slli	r7,r3,16
   22b80:	38ceb03a 	or	r7,r7,r3
   22b84:	1007883a 	mov	r3,r2
   22b88:	21800f2e 	bgeu	r4,r6,22bc8 <memset+0x74>
   22b8c:	19c00015 	stw	r7,0(r3)
   22b90:	19c00115 	stw	r7,4(r3)
   22b94:	19c00215 	stw	r7,8(r3)
   22b98:	19c00315 	stw	r7,12(r3)
   22b9c:	423ffc04 	addi	r8,r8,-16
   22ba0:	18c00404 	addi	r3,r3,16
   22ba4:	223ff936 	bltu	r4,r8,22b8c <memset+0x38>
   22ba8:	30fffc04 	addi	r3,r6,-16
   22bac:	1806d13a 	srli	r3,r3,4
   22bb0:	318003cc 	andi	r6,r6,15
   22bb4:	010000c4 	movi	r4,3
   22bb8:	18c00044 	addi	r3,r3,1
   22bbc:	1806913a 	slli	r3,r3,4
   22bc0:	10c7883a 	add	r3,r2,r3
   22bc4:	21800e2e 	bgeu	r4,r6,22c00 <memset+0xac>
   22bc8:	1813883a 	mov	r9,r3
   22bcc:	3011883a 	mov	r8,r6
   22bd0:	010000c4 	movi	r4,3
   22bd4:	49c00015 	stw	r7,0(r9)
   22bd8:	423fff04 	addi	r8,r8,-4
   22bdc:	4a400104 	addi	r9,r9,4
   22be0:	223ffc36 	bltu	r4,r8,22bd4 <memset+0x80>
   22be4:	313fff04 	addi	r4,r6,-4
   22be8:	2008d0ba 	srli	r4,r4,2
   22bec:	318000cc 	andi	r6,r6,3
   22bf0:	21000044 	addi	r4,r4,1
   22bf4:	2109883a 	add	r4,r4,r4
   22bf8:	2109883a 	add	r4,r4,r4
   22bfc:	1907883a 	add	r3,r3,r4
   22c00:	30000a26 	beq	r6,zero,22c2c <memset+0xd8>
   22c04:	198d883a 	add	r6,r3,r6
   22c08:	19400005 	stb	r5,0(r3)
   22c0c:	18c00044 	addi	r3,r3,1
   22c10:	19bffd1e 	bne	r3,r6,22c08 <memset+0xb4>
   22c14:	f800283a 	ret
   22c18:	2007883a 	mov	r3,r4
   22c1c:	303ff91e 	bne	r6,zero,22c04 <memset+0xb0>
   22c20:	00000206 	br	22c2c <memset+0xd8>
   22c24:	2007883a 	mov	r3,r4
   22c28:	003ff606 	br	22c04 <memset+0xb0>
   22c2c:	f800283a 	ret

00022c30 <__sread>:
   22c30:	defffe04 	addi	sp,sp,-8
   22c34:	dc000015 	stw	r16,0(sp)
   22c38:	2821883a 	mov	r16,r5
   22c3c:	2940038f 	ldh	r5,14(r5)
   22c40:	dfc00115 	stw	ra,4(sp)
   22c44:	00230c80 	call	230c8 <_read_r>
   22c48:	10000716 	blt	r2,zero,22c68 <__sread+0x38>
   22c4c:	80c01417 	ldw	r3,80(r16)
   22c50:	1887883a 	add	r3,r3,r2
   22c54:	80c01415 	stw	r3,80(r16)
   22c58:	dfc00117 	ldw	ra,4(sp)
   22c5c:	dc000017 	ldw	r16,0(sp)
   22c60:	dec00204 	addi	sp,sp,8
   22c64:	f800283a 	ret
   22c68:	80c0030b 	ldhu	r3,12(r16)
   22c6c:	18fbffcc 	andi	r3,r3,61439
   22c70:	80c0030d 	sth	r3,12(r16)
   22c74:	dfc00117 	ldw	ra,4(sp)
   22c78:	dc000017 	ldw	r16,0(sp)
   22c7c:	dec00204 	addi	sp,sp,8
   22c80:	f800283a 	ret

00022c84 <__swrite>:
   22c84:	2880030b 	ldhu	r2,12(r5)
   22c88:	defffb04 	addi	sp,sp,-20
   22c8c:	dcc00315 	stw	r19,12(sp)
   22c90:	10c0400c 	andi	r3,r2,256
   22c94:	18ffffcc 	andi	r3,r3,65535
   22c98:	18e0001c 	xori	r3,r3,32768
   22c9c:	dc800215 	stw	r18,8(sp)
   22ca0:	dc400115 	stw	r17,4(sp)
   22ca4:	dc000015 	stw	r16,0(sp)
   22ca8:	dfc00415 	stw	ra,16(sp)
   22cac:	18e00004 	addi	r3,r3,-32768
   22cb0:	2821883a 	mov	r16,r5
   22cb4:	2027883a 	mov	r19,r4
   22cb8:	3025883a 	mov	r18,r6
   22cbc:	3823883a 	mov	r17,r7
   22cc0:	18000526 	beq	r3,zero,22cd8 <__swrite+0x54>
   22cc4:	2940038f 	ldh	r5,14(r5)
   22cc8:	000d883a 	mov	r6,zero
   22ccc:	01c00084 	movi	r7,2
   22cd0:	002305c0 	call	2305c <_lseek_r>
   22cd4:	8080030b 	ldhu	r2,12(r16)
   22cd8:	8140038f 	ldh	r5,14(r16)
   22cdc:	10bbffcc 	andi	r2,r2,61439
   22ce0:	9809883a 	mov	r4,r19
   22ce4:	900d883a 	mov	r6,r18
   22ce8:	880f883a 	mov	r7,r17
   22cec:	8080030d 	sth	r2,12(r16)
   22cf0:	dfc00417 	ldw	ra,16(sp)
   22cf4:	dcc00317 	ldw	r19,12(sp)
   22cf8:	dc800217 	ldw	r18,8(sp)
   22cfc:	dc400117 	ldw	r17,4(sp)
   22d00:	dc000017 	ldw	r16,0(sp)
   22d04:	dec00504 	addi	sp,sp,20
   22d08:	0022d701 	jmpi	22d70 <_write_r>

00022d0c <__sseek>:
   22d0c:	defffe04 	addi	sp,sp,-8
   22d10:	dc000015 	stw	r16,0(sp)
   22d14:	2821883a 	mov	r16,r5
   22d18:	2940038f 	ldh	r5,14(r5)
   22d1c:	dfc00115 	stw	ra,4(sp)
   22d20:	002305c0 	call	2305c <_lseek_r>
   22d24:	00ffffc4 	movi	r3,-1
   22d28:	10c00826 	beq	r2,r3,22d4c <__sseek+0x40>
   22d2c:	80c0030b 	ldhu	r3,12(r16)
   22d30:	80801415 	stw	r2,80(r16)
   22d34:	18c40014 	ori	r3,r3,4096
   22d38:	80c0030d 	sth	r3,12(r16)
   22d3c:	dfc00117 	ldw	ra,4(sp)
   22d40:	dc000017 	ldw	r16,0(sp)
   22d44:	dec00204 	addi	sp,sp,8
   22d48:	f800283a 	ret
   22d4c:	80c0030b 	ldhu	r3,12(r16)
   22d50:	18fbffcc 	andi	r3,r3,61439
   22d54:	80c0030d 	sth	r3,12(r16)
   22d58:	dfc00117 	ldw	ra,4(sp)
   22d5c:	dc000017 	ldw	r16,0(sp)
   22d60:	dec00204 	addi	sp,sp,8
   22d64:	f800283a 	ret

00022d68 <__sclose>:
   22d68:	2940038f 	ldh	r5,14(r5)
   22d6c:	0022ddc1 	jmpi	22ddc <_close_r>

00022d70 <_write_r>:
   22d70:	defffd04 	addi	sp,sp,-12
   22d74:	dc400115 	stw	r17,4(sp)
   22d78:	dc000015 	stw	r16,0(sp)
   22d7c:	2023883a 	mov	r17,r4
   22d80:	040000f4 	movhi	r16,3
   22d84:	8424c704 	addi	r16,r16,-27876
   22d88:	2809883a 	mov	r4,r5
   22d8c:	300b883a 	mov	r5,r6
   22d90:	380d883a 	mov	r6,r7
   22d94:	dfc00215 	stw	ra,8(sp)
   22d98:	80000015 	stw	zero,0(r16)
   22d9c:	0023a240 	call	23a24 <write>
   22da0:	00ffffc4 	movi	r3,-1
   22da4:	10c00526 	beq	r2,r3,22dbc <_write_r+0x4c>
   22da8:	dfc00217 	ldw	ra,8(sp)
   22dac:	dc400117 	ldw	r17,4(sp)
   22db0:	dc000017 	ldw	r16,0(sp)
   22db4:	dec00304 	addi	sp,sp,12
   22db8:	f800283a 	ret
   22dbc:	80c00017 	ldw	r3,0(r16)
   22dc0:	183ff926 	beq	r3,zero,22da8 <_write_r+0x38>
   22dc4:	88c00015 	stw	r3,0(r17)
   22dc8:	dfc00217 	ldw	ra,8(sp)
   22dcc:	dc400117 	ldw	r17,4(sp)
   22dd0:	dc000017 	ldw	r16,0(sp)
   22dd4:	dec00304 	addi	sp,sp,12
   22dd8:	f800283a 	ret

00022ddc <_close_r>:
   22ddc:	defffd04 	addi	sp,sp,-12
   22de0:	dc400115 	stw	r17,4(sp)
   22de4:	dc000015 	stw	r16,0(sp)
   22de8:	2023883a 	mov	r17,r4
   22dec:	040000f4 	movhi	r16,3
   22df0:	8424c704 	addi	r16,r16,-27876
   22df4:	2809883a 	mov	r4,r5
   22df8:	dfc00215 	stw	ra,8(sp)
   22dfc:	80000015 	stw	zero,0(r16)
   22e00:	00231ac0 	call	231ac <close>
   22e04:	00ffffc4 	movi	r3,-1
   22e08:	10c00526 	beq	r2,r3,22e20 <_close_r+0x44>
   22e0c:	dfc00217 	ldw	ra,8(sp)
   22e10:	dc400117 	ldw	r17,4(sp)
   22e14:	dc000017 	ldw	r16,0(sp)
   22e18:	dec00304 	addi	sp,sp,12
   22e1c:	f800283a 	ret
   22e20:	80c00017 	ldw	r3,0(r16)
   22e24:	183ff926 	beq	r3,zero,22e0c <_close_r+0x30>
   22e28:	88c00015 	stw	r3,0(r17)
   22e2c:	dfc00217 	ldw	ra,8(sp)
   22e30:	dc400117 	ldw	r17,4(sp)
   22e34:	dc000017 	ldw	r16,0(sp)
   22e38:	dec00304 	addi	sp,sp,12
   22e3c:	f800283a 	ret

00022e40 <_fclose_r>:
   22e40:	defffc04 	addi	sp,sp,-16
   22e44:	dc400115 	stw	r17,4(sp)
   22e48:	dc000015 	stw	r16,0(sp)
   22e4c:	dfc00315 	stw	ra,12(sp)
   22e50:	dc800215 	stw	r18,8(sp)
   22e54:	2821883a 	mov	r16,r5
   22e58:	2023883a 	mov	r17,r4
   22e5c:	28003426 	beq	r5,zero,22f30 <_fclose_r+0xf0>
   22e60:	00224000 	call	22400 <__sfp_lock_acquire>
   22e64:	88000226 	beq	r17,zero,22e70 <_fclose_r+0x30>
   22e68:	88800e17 	ldw	r2,56(r17)
   22e6c:	10003826 	beq	r2,zero,22f50 <_fclose_r+0x110>
   22e70:	8080030f 	ldh	r2,12(r16)
   22e74:	10002526 	beq	r2,zero,22f0c <_fclose_r+0xcc>
   22e78:	8809883a 	mov	r4,r17
   22e7c:	800b883a 	mov	r5,r16
   22e80:	0021f3c0 	call	21f3c <_fflush_r>
   22e84:	1025883a 	mov	r18,r2
   22e88:	80800b17 	ldw	r2,44(r16)
   22e8c:	10000426 	beq	r2,zero,22ea0 <_fclose_r+0x60>
   22e90:	81400717 	ldw	r5,28(r16)
   22e94:	8809883a 	mov	r4,r17
   22e98:	103ee83a 	callr	r2
   22e9c:	10003516 	blt	r2,zero,22f74 <_fclose_r+0x134>
   22ea0:	8080030b 	ldhu	r2,12(r16)
   22ea4:	1080200c 	andi	r2,r2,128
   22ea8:	10bfffcc 	andi	r2,r2,65535
   22eac:	10a0001c 	xori	r2,r2,32768
   22eb0:	10a00004 	addi	r2,r2,-32768
   22eb4:	10002b1e 	bne	r2,zero,22f64 <_fclose_r+0x124>
   22eb8:	81400c17 	ldw	r5,48(r16)
   22ebc:	28000526 	beq	r5,zero,22ed4 <_fclose_r+0x94>
   22ec0:	80801004 	addi	r2,r16,64
   22ec4:	28800226 	beq	r5,r2,22ed0 <_fclose_r+0x90>
   22ec8:	8809883a 	mov	r4,r17
   22ecc:	002257c0 	call	2257c <_free_r>
   22ed0:	80000c15 	stw	zero,48(r16)
   22ed4:	81401117 	ldw	r5,68(r16)
   22ed8:	28000326 	beq	r5,zero,22ee8 <_fclose_r+0xa8>
   22edc:	8809883a 	mov	r4,r17
   22ee0:	002257c0 	call	2257c <_free_r>
   22ee4:	80001115 	stw	zero,68(r16)
   22ee8:	8000030d 	sth	zero,12(r16)
   22eec:	00224040 	call	22404 <__sfp_lock_release>
   22ef0:	9005883a 	mov	r2,r18
   22ef4:	dfc00317 	ldw	ra,12(sp)
   22ef8:	dc800217 	ldw	r18,8(sp)
   22efc:	dc400117 	ldw	r17,4(sp)
   22f00:	dc000017 	ldw	r16,0(sp)
   22f04:	dec00404 	addi	sp,sp,16
   22f08:	f800283a 	ret
   22f0c:	00224040 	call	22404 <__sfp_lock_release>
   22f10:	0025883a 	mov	r18,zero
   22f14:	9005883a 	mov	r2,r18
   22f18:	dfc00317 	ldw	ra,12(sp)
   22f1c:	dc800217 	ldw	r18,8(sp)
   22f20:	dc400117 	ldw	r17,4(sp)
   22f24:	dc000017 	ldw	r16,0(sp)
   22f28:	dec00404 	addi	sp,sp,16
   22f2c:	f800283a 	ret
   22f30:	0025883a 	mov	r18,zero
   22f34:	9005883a 	mov	r2,r18
   22f38:	dfc00317 	ldw	ra,12(sp)
   22f3c:	dc800217 	ldw	r18,8(sp)
   22f40:	dc400117 	ldw	r17,4(sp)
   22f44:	dc000017 	ldw	r16,0(sp)
   22f48:	dec00404 	addi	sp,sp,16
   22f4c:	f800283a 	ret
   22f50:	8809883a 	mov	r4,r17
   22f54:	00221f80 	call	221f8 <__sinit>
   22f58:	8080030f 	ldh	r2,12(r16)
   22f5c:	103fc61e 	bne	r2,zero,22e78 <_fclose_r+0x38>
   22f60:	003fea06 	br	22f0c <_fclose_r+0xcc>
   22f64:	81400417 	ldw	r5,16(r16)
   22f68:	8809883a 	mov	r4,r17
   22f6c:	002257c0 	call	2257c <_free_r>
   22f70:	003fd106 	br	22eb8 <_fclose_r+0x78>
   22f74:	04bfffc4 	movi	r18,-1
   22f78:	003fc906 	br	22ea0 <_fclose_r+0x60>

00022f7c <fclose>:
   22f7c:	008000b4 	movhi	r2,2
   22f80:	109e2504 	addi	r2,r2,30868
   22f84:	200b883a 	mov	r5,r4
   22f88:	11000017 	ldw	r4,0(r2)
   22f8c:	0022e401 	jmpi	22e40 <_fclose_r>

00022f90 <_fstat_r>:
   22f90:	defffd04 	addi	sp,sp,-12
   22f94:	dc400115 	stw	r17,4(sp)
   22f98:	dc000015 	stw	r16,0(sp)
   22f9c:	2023883a 	mov	r17,r4
   22fa0:	040000f4 	movhi	r16,3
   22fa4:	8424c704 	addi	r16,r16,-27876
   22fa8:	2809883a 	mov	r4,r5
   22fac:	300b883a 	mov	r5,r6
   22fb0:	dfc00215 	stw	ra,8(sp)
   22fb4:	80000015 	stw	zero,0(r16)
   22fb8:	00232f40 	call	232f4 <fstat>
   22fbc:	00ffffc4 	movi	r3,-1
   22fc0:	10c00526 	beq	r2,r3,22fd8 <_fstat_r+0x48>
   22fc4:	dfc00217 	ldw	ra,8(sp)
   22fc8:	dc400117 	ldw	r17,4(sp)
   22fcc:	dc000017 	ldw	r16,0(sp)
   22fd0:	dec00304 	addi	sp,sp,12
   22fd4:	f800283a 	ret
   22fd8:	80c00017 	ldw	r3,0(r16)
   22fdc:	183ff926 	beq	r3,zero,22fc4 <_fstat_r+0x34>
   22fe0:	88c00015 	stw	r3,0(r17)
   22fe4:	dfc00217 	ldw	ra,8(sp)
   22fe8:	dc400117 	ldw	r17,4(sp)
   22fec:	dc000017 	ldw	r16,0(sp)
   22ff0:	dec00304 	addi	sp,sp,12
   22ff4:	f800283a 	ret

00022ff8 <_isatty_r>:
   22ff8:	defffd04 	addi	sp,sp,-12
   22ffc:	dc400115 	stw	r17,4(sp)
   23000:	dc000015 	stw	r16,0(sp)
   23004:	2023883a 	mov	r17,r4
   23008:	040000f4 	movhi	r16,3
   2300c:	8424c704 	addi	r16,r16,-27876
   23010:	2809883a 	mov	r4,r5
   23014:	dfc00215 	stw	ra,8(sp)
   23018:	80000015 	stw	zero,0(r16)
   2301c:	00233f40 	call	233f4 <isatty>
   23020:	00ffffc4 	movi	r3,-1
   23024:	10c00526 	beq	r2,r3,2303c <_isatty_r+0x44>
   23028:	dfc00217 	ldw	ra,8(sp)
   2302c:	dc400117 	ldw	r17,4(sp)
   23030:	dc000017 	ldw	r16,0(sp)
   23034:	dec00304 	addi	sp,sp,12
   23038:	f800283a 	ret
   2303c:	80c00017 	ldw	r3,0(r16)
   23040:	183ff926 	beq	r3,zero,23028 <_isatty_r+0x30>
   23044:	88c00015 	stw	r3,0(r17)
   23048:	dfc00217 	ldw	ra,8(sp)
   2304c:	dc400117 	ldw	r17,4(sp)
   23050:	dc000017 	ldw	r16,0(sp)
   23054:	dec00304 	addi	sp,sp,12
   23058:	f800283a 	ret

0002305c <_lseek_r>:
   2305c:	defffd04 	addi	sp,sp,-12
   23060:	dc400115 	stw	r17,4(sp)
   23064:	dc000015 	stw	r16,0(sp)
   23068:	2023883a 	mov	r17,r4
   2306c:	040000f4 	movhi	r16,3
   23070:	8424c704 	addi	r16,r16,-27876
   23074:	2809883a 	mov	r4,r5
   23078:	300b883a 	mov	r5,r6
   2307c:	380d883a 	mov	r6,r7
   23080:	dfc00215 	stw	ra,8(sp)
   23084:	80000015 	stw	zero,0(r16)
   23088:	00235d40 	call	235d4 <lseek>
   2308c:	00ffffc4 	movi	r3,-1
   23090:	10c00526 	beq	r2,r3,230a8 <_lseek_r+0x4c>
   23094:	dfc00217 	ldw	ra,8(sp)
   23098:	dc400117 	ldw	r17,4(sp)
   2309c:	dc000017 	ldw	r16,0(sp)
   230a0:	dec00304 	addi	sp,sp,12
   230a4:	f800283a 	ret
   230a8:	80c00017 	ldw	r3,0(r16)
   230ac:	183ff926 	beq	r3,zero,23094 <_lseek_r+0x38>
   230b0:	88c00015 	stw	r3,0(r17)
   230b4:	dfc00217 	ldw	ra,8(sp)
   230b8:	dc400117 	ldw	r17,4(sp)
   230bc:	dc000017 	ldw	r16,0(sp)
   230c0:	dec00304 	addi	sp,sp,12
   230c4:	f800283a 	ret

000230c8 <_read_r>:
   230c8:	defffd04 	addi	sp,sp,-12
   230cc:	dc400115 	stw	r17,4(sp)
   230d0:	dc000015 	stw	r16,0(sp)
   230d4:	2023883a 	mov	r17,r4
   230d8:	040000f4 	movhi	r16,3
   230dc:	8424c704 	addi	r16,r16,-27876
   230e0:	2809883a 	mov	r4,r5
   230e4:	300b883a 	mov	r5,r6
   230e8:	380d883a 	mov	r6,r7
   230ec:	dfc00215 	stw	ra,8(sp)
   230f0:	80000015 	stw	zero,0(r16)
   230f4:	00237b00 	call	237b0 <read>
   230f8:	00ffffc4 	movi	r3,-1
   230fc:	10c00526 	beq	r2,r3,23114 <_read_r+0x4c>
   23100:	dfc00217 	ldw	ra,8(sp)
   23104:	dc400117 	ldw	r17,4(sp)
   23108:	dc000017 	ldw	r16,0(sp)
   2310c:	dec00304 	addi	sp,sp,12
   23110:	f800283a 	ret
   23114:	80c00017 	ldw	r3,0(r16)
   23118:	183ff926 	beq	r3,zero,23100 <_read_r+0x38>
   2311c:	88c00015 	stw	r3,0(r17)
   23120:	dfc00217 	ldw	ra,8(sp)
   23124:	dc400117 	ldw	r17,4(sp)
   23128:	dc000017 	ldw	r16,0(sp)
   2312c:	dec00304 	addi	sp,sp,12
   23130:	f800283a 	ret

00023134 <__mulsi3>:
   23134:	0005883a 	mov	r2,zero
   23138:	20000726 	beq	r4,zero,23158 <__mulsi3+0x24>
   2313c:	20c0004c 	andi	r3,r4,1
   23140:	2008d07a 	srli	r4,r4,1
   23144:	18000126 	beq	r3,zero,2314c <__mulsi3+0x18>
   23148:	1145883a 	add	r2,r2,r5
   2314c:	294b883a 	add	r5,r5,r5
   23150:	203ffa1e 	bne	r4,zero,2313c <__mulsi3+0x8>
   23154:	f800283a 	ret
   23158:	f800283a 	ret

0002315c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2315c:	defffe04 	addi	sp,sp,-8
   23160:	dfc00115 	stw	ra,4(sp)
   23164:	df000015 	stw	fp,0(sp)
   23168:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2316c:	008000b4 	movhi	r2,2
   23170:	109e2d04 	addi	r2,r2,30900
   23174:	10800017 	ldw	r2,0(r2)
   23178:	10000526 	beq	r2,zero,23190 <alt_get_errno+0x34>
   2317c:	008000b4 	movhi	r2,2
   23180:	109e2d04 	addi	r2,r2,30900
   23184:	10800017 	ldw	r2,0(r2)
   23188:	103ee83a 	callr	r2
   2318c:	00000206 	br	23198 <alt_get_errno+0x3c>
   23190:	008000f4 	movhi	r2,3
   23194:	10a4c704 	addi	r2,r2,-27876
}
   23198:	e037883a 	mov	sp,fp
   2319c:	dfc00117 	ldw	ra,4(sp)
   231a0:	df000017 	ldw	fp,0(sp)
   231a4:	dec00204 	addi	sp,sp,8
   231a8:	f800283a 	ret

000231ac <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   231ac:	defffb04 	addi	sp,sp,-20
   231b0:	dfc00415 	stw	ra,16(sp)
   231b4:	df000315 	stw	fp,12(sp)
   231b8:	df000304 	addi	fp,sp,12
   231bc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   231c0:	e0bfff17 	ldw	r2,-4(fp)
   231c4:	10000716 	blt	r2,zero,231e4 <close+0x38>
   231c8:	e13fff17 	ldw	r4,-4(fp)
   231cc:	01400304 	movi	r5,12
   231d0:	00231340 	call	23134 <__mulsi3>
   231d4:	00c000b4 	movhi	r3,2
   231d8:	18d9ac04 	addi	r3,r3,26288
   231dc:	10c5883a 	add	r2,r2,r3
   231e0:	00000106 	br	231e8 <close+0x3c>
   231e4:	0005883a 	mov	r2,zero
   231e8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   231ec:	e0bffd17 	ldw	r2,-12(fp)
   231f0:	10001826 	beq	r2,zero,23254 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   231f4:	e0bffd17 	ldw	r2,-12(fp)
   231f8:	10800017 	ldw	r2,0(r2)
   231fc:	10800417 	ldw	r2,16(r2)
   23200:	10000626 	beq	r2,zero,2321c <close+0x70>
   23204:	e0bffd17 	ldw	r2,-12(fp)
   23208:	10800017 	ldw	r2,0(r2)
   2320c:	10800417 	ldw	r2,16(r2)
   23210:	e13ffd17 	ldw	r4,-12(fp)
   23214:	103ee83a 	callr	r2
   23218:	00000106 	br	23220 <close+0x74>
   2321c:	0005883a 	mov	r2,zero
   23220:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   23224:	e13fff17 	ldw	r4,-4(fp)
   23228:	00238a40 	call	238a4 <alt_release_fd>
    if (rval < 0)
   2322c:	e0bffe17 	ldw	r2,-8(fp)
   23230:	1000060e 	bge	r2,zero,2324c <close+0xa0>
    {
      ALT_ERRNO = -rval;
   23234:	002315c0 	call	2315c <alt_get_errno>
   23238:	e0fffe17 	ldw	r3,-8(fp)
   2323c:	00c7c83a 	sub	r3,zero,r3
   23240:	10c00015 	stw	r3,0(r2)
      return -1;
   23244:	00bfffc4 	movi	r2,-1
   23248:	00000606 	br	23264 <close+0xb8>
    }
    return 0;
   2324c:	0005883a 	mov	r2,zero
   23250:	00000406 	br	23264 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   23254:	002315c0 	call	2315c <alt_get_errno>
   23258:	00c01444 	movi	r3,81
   2325c:	10c00015 	stw	r3,0(r2)
    return -1;
   23260:	00bfffc4 	movi	r2,-1
  }
}
   23264:	e037883a 	mov	sp,fp
   23268:	dfc00117 	ldw	ra,4(sp)
   2326c:	df000017 	ldw	fp,0(sp)
   23270:	dec00204 	addi	sp,sp,8
   23274:	f800283a 	ret

00023278 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   23278:	defffc04 	addi	sp,sp,-16
   2327c:	df000315 	stw	fp,12(sp)
   23280:	df000304 	addi	fp,sp,12
   23284:	e13ffd15 	stw	r4,-12(fp)
   23288:	e17ffe15 	stw	r5,-8(fp)
   2328c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   23290:	e0bfff17 	ldw	r2,-4(fp)
}
   23294:	e037883a 	mov	sp,fp
   23298:	df000017 	ldw	fp,0(sp)
   2329c:	dec00104 	addi	sp,sp,4
   232a0:	f800283a 	ret

000232a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   232a4:	defffe04 	addi	sp,sp,-8
   232a8:	dfc00115 	stw	ra,4(sp)
   232ac:	df000015 	stw	fp,0(sp)
   232b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   232b4:	008000b4 	movhi	r2,2
   232b8:	109e2d04 	addi	r2,r2,30900
   232bc:	10800017 	ldw	r2,0(r2)
   232c0:	10000526 	beq	r2,zero,232d8 <alt_get_errno+0x34>
   232c4:	008000b4 	movhi	r2,2
   232c8:	109e2d04 	addi	r2,r2,30900
   232cc:	10800017 	ldw	r2,0(r2)
   232d0:	103ee83a 	callr	r2
   232d4:	00000206 	br	232e0 <alt_get_errno+0x3c>
   232d8:	008000f4 	movhi	r2,3
   232dc:	10a4c704 	addi	r2,r2,-27876
}
   232e0:	e037883a 	mov	sp,fp
   232e4:	dfc00117 	ldw	ra,4(sp)
   232e8:	df000017 	ldw	fp,0(sp)
   232ec:	dec00204 	addi	sp,sp,8
   232f0:	f800283a 	ret

000232f4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   232f4:	defffb04 	addi	sp,sp,-20
   232f8:	dfc00415 	stw	ra,16(sp)
   232fc:	df000315 	stw	fp,12(sp)
   23300:	df000304 	addi	fp,sp,12
   23304:	e13ffe15 	stw	r4,-8(fp)
   23308:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2330c:	e0bffe17 	ldw	r2,-8(fp)
   23310:	10000716 	blt	r2,zero,23330 <fstat+0x3c>
   23314:	e13ffe17 	ldw	r4,-8(fp)
   23318:	01400304 	movi	r5,12
   2331c:	00231340 	call	23134 <__mulsi3>
   23320:	00c000b4 	movhi	r3,2
   23324:	18d9ac04 	addi	r3,r3,26288
   23328:	10c5883a 	add	r2,r2,r3
   2332c:	00000106 	br	23334 <fstat+0x40>
   23330:	0005883a 	mov	r2,zero
   23334:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   23338:	e0bffd17 	ldw	r2,-12(fp)
   2333c:	10001026 	beq	r2,zero,23380 <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   23340:	e0bffd17 	ldw	r2,-12(fp)
   23344:	10800017 	ldw	r2,0(r2)
   23348:	10800817 	ldw	r2,32(r2)
   2334c:	10000726 	beq	r2,zero,2336c <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
   23350:	e0bffd17 	ldw	r2,-12(fp)
   23354:	10800017 	ldw	r2,0(r2)
   23358:	10800817 	ldw	r2,32(r2)
   2335c:	e13ffd17 	ldw	r4,-12(fp)
   23360:	e17fff17 	ldw	r5,-4(fp)
   23364:	103ee83a 	callr	r2
   23368:	00000906 	br	23390 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   2336c:	e0bfff17 	ldw	r2,-4(fp)
   23370:	00c80004 	movi	r3,8192
   23374:	10c00115 	stw	r3,4(r2)
      return 0;
   23378:	0005883a 	mov	r2,zero
   2337c:	00000406 	br	23390 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   23380:	00232a40 	call	232a4 <alt_get_errno>
   23384:	00c01444 	movi	r3,81
   23388:	10c00015 	stw	r3,0(r2)
    return -1;
   2338c:	00bfffc4 	movi	r2,-1
  }
}
   23390:	e037883a 	mov	sp,fp
   23394:	dfc00117 	ldw	ra,4(sp)
   23398:	df000017 	ldw	fp,0(sp)
   2339c:	dec00204 	addi	sp,sp,8
   233a0:	f800283a 	ret

000233a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   233a4:	defffe04 	addi	sp,sp,-8
   233a8:	dfc00115 	stw	ra,4(sp)
   233ac:	df000015 	stw	fp,0(sp)
   233b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   233b4:	008000b4 	movhi	r2,2
   233b8:	109e2d04 	addi	r2,r2,30900
   233bc:	10800017 	ldw	r2,0(r2)
   233c0:	10000526 	beq	r2,zero,233d8 <alt_get_errno+0x34>
   233c4:	008000b4 	movhi	r2,2
   233c8:	109e2d04 	addi	r2,r2,30900
   233cc:	10800017 	ldw	r2,0(r2)
   233d0:	103ee83a 	callr	r2
   233d4:	00000206 	br	233e0 <alt_get_errno+0x3c>
   233d8:	008000f4 	movhi	r2,3
   233dc:	10a4c704 	addi	r2,r2,-27876
}
   233e0:	e037883a 	mov	sp,fp
   233e4:	dfc00117 	ldw	ra,4(sp)
   233e8:	df000017 	ldw	fp,0(sp)
   233ec:	dec00204 	addi	sp,sp,8
   233f0:	f800283a 	ret

000233f4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   233f4:	deffed04 	addi	sp,sp,-76
   233f8:	dfc01215 	stw	ra,72(sp)
   233fc:	df001115 	stw	fp,68(sp)
   23400:	df001104 	addi	fp,sp,68
   23404:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23408:	e0bfff17 	ldw	r2,-4(fp)
   2340c:	10000716 	blt	r2,zero,2342c <isatty+0x38>
   23410:	e13fff17 	ldw	r4,-4(fp)
   23414:	01400304 	movi	r5,12
   23418:	00231340 	call	23134 <__mulsi3>
   2341c:	00c000b4 	movhi	r3,2
   23420:	18d9ac04 	addi	r3,r3,26288
   23424:	10c5883a 	add	r2,r2,r3
   23428:	00000106 	br	23430 <isatty+0x3c>
   2342c:	0005883a 	mov	r2,zero
   23430:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   23434:	e0bfef17 	ldw	r2,-68(fp)
   23438:	10000e26 	beq	r2,zero,23474 <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   2343c:	e0bfef17 	ldw	r2,-68(fp)
   23440:	10800017 	ldw	r2,0(r2)
   23444:	10800817 	ldw	r2,32(r2)
   23448:	1000021e 	bne	r2,zero,23454 <isatty+0x60>
    {
      return 1;
   2344c:	00800044 	movi	r2,1
   23450:	00000c06 	br	23484 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   23454:	e0bff004 	addi	r2,fp,-64
   23458:	e13fff17 	ldw	r4,-4(fp)
   2345c:	100b883a 	mov	r5,r2
   23460:	00232f40 	call	232f4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   23464:	e0bff117 	ldw	r2,-60(fp)
   23468:	10880020 	cmpeqi	r2,r2,8192
   2346c:	10803fcc 	andi	r2,r2,255
   23470:	00000406 	br	23484 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   23474:	00233a40 	call	233a4 <alt_get_errno>
   23478:	00c01444 	movi	r3,81
   2347c:	10c00015 	stw	r3,0(r2)
    return 0;
   23480:	0005883a 	mov	r2,zero
  }
}
   23484:	e037883a 	mov	sp,fp
   23488:	dfc00117 	ldw	ra,4(sp)
   2348c:	df000017 	ldw	fp,0(sp)
   23490:	dec00204 	addi	sp,sp,8
   23494:	f800283a 	ret

00023498 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   23498:	defffc04 	addi	sp,sp,-16
   2349c:	df000315 	stw	fp,12(sp)
   234a0:	df000304 	addi	fp,sp,12
   234a4:	e13ffd15 	stw	r4,-12(fp)
   234a8:	e17ffe15 	stw	r5,-8(fp)
   234ac:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   234b0:	e0fffe17 	ldw	r3,-8(fp)
   234b4:	e0bffd17 	ldw	r2,-12(fp)
   234b8:	18800e26 	beq	r3,r2,234f4 <alt_load_section+0x5c>
  {
    while( to != end )
   234bc:	00000a06 	br	234e8 <alt_load_section+0x50>
    {
      *to++ = *from++;
   234c0:	e0bffd17 	ldw	r2,-12(fp)
   234c4:	10c00017 	ldw	r3,0(r2)
   234c8:	e0bffe17 	ldw	r2,-8(fp)
   234cc:	10c00015 	stw	r3,0(r2)
   234d0:	e0bffe17 	ldw	r2,-8(fp)
   234d4:	10800104 	addi	r2,r2,4
   234d8:	e0bffe15 	stw	r2,-8(fp)
   234dc:	e0bffd17 	ldw	r2,-12(fp)
   234e0:	10800104 	addi	r2,r2,4
   234e4:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   234e8:	e0fffe17 	ldw	r3,-8(fp)
   234ec:	e0bfff17 	ldw	r2,-4(fp)
   234f0:	18bff31e 	bne	r3,r2,234c0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   234f4:	e037883a 	mov	sp,fp
   234f8:	df000017 	ldw	fp,0(sp)
   234fc:	dec00104 	addi	sp,sp,4
   23500:	f800283a 	ret

00023504 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   23504:	defffe04 	addi	sp,sp,-8
   23508:	dfc00115 	stw	ra,4(sp)
   2350c:	df000015 	stw	fp,0(sp)
   23510:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   23514:	010000b4 	movhi	r4,2
   23518:	211e3204 	addi	r4,r4,30920
   2351c:	014000b4 	movhi	r5,2
   23520:	2957a004 	addi	r5,r5,24192
   23524:	018000b4 	movhi	r6,2
   23528:	319e3204 	addi	r6,r6,30920
   2352c:	00234980 	call	23498 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   23530:	010000b4 	movhi	r4,2
   23534:	21000804 	addi	r4,r4,32
   23538:	014000b4 	movhi	r5,2
   2353c:	29400804 	addi	r5,r5,32
   23540:	018000b4 	movhi	r6,2
   23544:	31806e04 	addi	r6,r6,440
   23548:	00234980 	call	23498 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   2354c:	010000b4 	movhi	r4,2
   23550:	21178804 	addi	r4,r4,24096
   23554:	014000b4 	movhi	r5,2
   23558:	29578804 	addi	r5,r5,24096
   2355c:	018000b4 	movhi	r6,2
   23560:	3197a004 	addi	r6,r6,24192
   23564:	00234980 	call	23498 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   23568:	0024d800 	call	24d80 <alt_dcache_flush_all>
  alt_icache_flush_all();
   2356c:	0024f440 	call	24f44 <alt_icache_flush_all>
}
   23570:	e037883a 	mov	sp,fp
   23574:	dfc00117 	ldw	ra,4(sp)
   23578:	df000017 	ldw	fp,0(sp)
   2357c:	dec00204 	addi	sp,sp,8
   23580:	f800283a 	ret

00023584 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23584:	defffe04 	addi	sp,sp,-8
   23588:	dfc00115 	stw	ra,4(sp)
   2358c:	df000015 	stw	fp,0(sp)
   23590:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23594:	008000b4 	movhi	r2,2
   23598:	109e2d04 	addi	r2,r2,30900
   2359c:	10800017 	ldw	r2,0(r2)
   235a0:	10000526 	beq	r2,zero,235b8 <alt_get_errno+0x34>
   235a4:	008000b4 	movhi	r2,2
   235a8:	109e2d04 	addi	r2,r2,30900
   235ac:	10800017 	ldw	r2,0(r2)
   235b0:	103ee83a 	callr	r2
   235b4:	00000206 	br	235c0 <alt_get_errno+0x3c>
   235b8:	008000f4 	movhi	r2,3
   235bc:	10a4c704 	addi	r2,r2,-27876
}
   235c0:	e037883a 	mov	sp,fp
   235c4:	dfc00117 	ldw	ra,4(sp)
   235c8:	df000017 	ldw	fp,0(sp)
   235cc:	dec00204 	addi	sp,sp,8
   235d0:	f800283a 	ret

000235d4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   235d4:	defff904 	addi	sp,sp,-28
   235d8:	dfc00615 	stw	ra,24(sp)
   235dc:	df000515 	stw	fp,20(sp)
   235e0:	df000504 	addi	fp,sp,20
   235e4:	e13ffd15 	stw	r4,-12(fp)
   235e8:	e17ffe15 	stw	r5,-8(fp)
   235ec:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   235f0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   235f4:	e0bffd17 	ldw	r2,-12(fp)
   235f8:	10000716 	blt	r2,zero,23618 <lseek+0x44>
   235fc:	e13ffd17 	ldw	r4,-12(fp)
   23600:	01400304 	movi	r5,12
   23604:	00231340 	call	23134 <__mulsi3>
   23608:	00c000b4 	movhi	r3,2
   2360c:	18d9ac04 	addi	r3,r3,26288
   23610:	10c5883a 	add	r2,r2,r3
   23614:	00000106 	br	2361c <lseek+0x48>
   23618:	0005883a 	mov	r2,zero
   2361c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   23620:	e0bffc17 	ldw	r2,-16(fp)
   23624:	10001026 	beq	r2,zero,23668 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   23628:	e0bffc17 	ldw	r2,-16(fp)
   2362c:	10800017 	ldw	r2,0(r2)
   23630:	10800717 	ldw	r2,28(r2)
   23634:	10000926 	beq	r2,zero,2365c <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   23638:	e0bffc17 	ldw	r2,-16(fp)
   2363c:	10800017 	ldw	r2,0(r2)
   23640:	10800717 	ldw	r2,28(r2)
   23644:	e13ffc17 	ldw	r4,-16(fp)
   23648:	e17ffe17 	ldw	r5,-8(fp)
   2364c:	e1bfff17 	ldw	r6,-4(fp)
   23650:	103ee83a 	callr	r2
   23654:	e0bffb15 	stw	r2,-20(fp)
   23658:	00000506 	br	23670 <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   2365c:	00bfde84 	movi	r2,-134
   23660:	e0bffb15 	stw	r2,-20(fp)
   23664:	00000206 	br	23670 <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
   23668:	00bfebc4 	movi	r2,-81
   2366c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   23670:	e0bffb17 	ldw	r2,-20(fp)
   23674:	1000060e 	bge	r2,zero,23690 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   23678:	00235840 	call	23584 <alt_get_errno>
   2367c:	e0fffb17 	ldw	r3,-20(fp)
   23680:	00c7c83a 	sub	r3,zero,r3
   23684:	10c00015 	stw	r3,0(r2)
    rc = -1;
   23688:	00bfffc4 	movi	r2,-1
   2368c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   23690:	e0bffb17 	ldw	r2,-20(fp)
}
   23694:	e037883a 	mov	sp,fp
   23698:	dfc00117 	ldw	ra,4(sp)
   2369c:	df000017 	ldw	fp,0(sp)
   236a0:	dec00204 	addi	sp,sp,8
   236a4:	f800283a 	ret

000236a8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   236a8:	defffd04 	addi	sp,sp,-12
   236ac:	dfc00215 	stw	ra,8(sp)
   236b0:	df000115 	stw	fp,4(sp)
   236b4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   236b8:	0009883a 	mov	r4,zero
   236bc:	0023b4c0 	call	23b4c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   236c0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   236c4:	0023b800 	call	23b80 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   236c8:	010000b4 	movhi	r4,2
   236cc:	21179804 	addi	r4,r4,24160
   236d0:	014000b4 	movhi	r5,2
   236d4:	29579804 	addi	r5,r5,24160
   236d8:	018000b4 	movhi	r6,2
   236dc:	31979804 	addi	r6,r6,24160
   236e0:	00253080 	call	25308 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   236e4:	0024e8c0 	call	24e8c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   236e8:	010000b4 	movhi	r4,2
   236ec:	2113ba04 	addi	r4,r4,20200
   236f0:	0025a4c0 	call	25a4c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   236f4:	d126a417 	ldw	r4,-25968(gp)
   236f8:	d0e6a517 	ldw	r3,-25964(gp)
   236fc:	d0a6a617 	ldw	r2,-25960(gp)
   23700:	180b883a 	mov	r5,r3
   23704:	100d883a 	mov	r6,r2
   23708:	00205bc0 	call	205bc <main>
   2370c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   23710:	01000044 	movi	r4,1
   23714:	00231ac0 	call	231ac <close>
  exit (result);
   23718:	e13fff17 	ldw	r4,-4(fp)
   2371c:	0025a600 	call	25a60 <exit>

00023720 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   23720:	defffe04 	addi	sp,sp,-8
   23724:	df000115 	stw	fp,4(sp)
   23728:	df000104 	addi	fp,sp,4
   2372c:	e13fff15 	stw	r4,-4(fp)
}
   23730:	e037883a 	mov	sp,fp
   23734:	df000017 	ldw	fp,0(sp)
   23738:	dec00104 	addi	sp,sp,4
   2373c:	f800283a 	ret

00023740 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   23740:	defffe04 	addi	sp,sp,-8
   23744:	df000115 	stw	fp,4(sp)
   23748:	df000104 	addi	fp,sp,4
   2374c:	e13fff15 	stw	r4,-4(fp)
}
   23750:	e037883a 	mov	sp,fp
   23754:	df000017 	ldw	fp,0(sp)
   23758:	dec00104 	addi	sp,sp,4
   2375c:	f800283a 	ret

00023760 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23760:	defffe04 	addi	sp,sp,-8
   23764:	dfc00115 	stw	ra,4(sp)
   23768:	df000015 	stw	fp,0(sp)
   2376c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23770:	008000b4 	movhi	r2,2
   23774:	109e2d04 	addi	r2,r2,30900
   23778:	10800017 	ldw	r2,0(r2)
   2377c:	10000526 	beq	r2,zero,23794 <alt_get_errno+0x34>
   23780:	008000b4 	movhi	r2,2
   23784:	109e2d04 	addi	r2,r2,30900
   23788:	10800017 	ldw	r2,0(r2)
   2378c:	103ee83a 	callr	r2
   23790:	00000206 	br	2379c <alt_get_errno+0x3c>
   23794:	008000f4 	movhi	r2,3
   23798:	10a4c704 	addi	r2,r2,-27876
}
   2379c:	e037883a 	mov	sp,fp
   237a0:	dfc00117 	ldw	ra,4(sp)
   237a4:	df000017 	ldw	fp,0(sp)
   237a8:	dec00204 	addi	sp,sp,8
   237ac:	f800283a 	ret

000237b0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   237b0:	defff904 	addi	sp,sp,-28
   237b4:	dfc00615 	stw	ra,24(sp)
   237b8:	df000515 	stw	fp,20(sp)
   237bc:	df000504 	addi	fp,sp,20
   237c0:	e13ffd15 	stw	r4,-12(fp)
   237c4:	e17ffe15 	stw	r5,-8(fp)
   237c8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   237cc:	e0bffd17 	ldw	r2,-12(fp)
   237d0:	10000716 	blt	r2,zero,237f0 <read+0x40>
   237d4:	e13ffd17 	ldw	r4,-12(fp)
   237d8:	01400304 	movi	r5,12
   237dc:	00231340 	call	23134 <__mulsi3>
   237e0:	00c000b4 	movhi	r3,2
   237e4:	18d9ac04 	addi	r3,r3,26288
   237e8:	10c5883a 	add	r2,r2,r3
   237ec:	00000106 	br	237f4 <read+0x44>
   237f0:	0005883a 	mov	r2,zero
   237f4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   237f8:	e0bffb17 	ldw	r2,-20(fp)
   237fc:	10002026 	beq	r2,zero,23880 <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   23800:	e0bffb17 	ldw	r2,-20(fp)
   23804:	10800217 	ldw	r2,8(r2)
   23808:	108000cc 	andi	r2,r2,3
   2380c:	10800060 	cmpeqi	r2,r2,1
   23810:	1000171e 	bne	r2,zero,23870 <read+0xc0>
        (fd->dev->read))
   23814:	e0bffb17 	ldw	r2,-20(fp)
   23818:	10800017 	ldw	r2,0(r2)
   2381c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   23820:	10001326 	beq	r2,zero,23870 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   23824:	e0bffb17 	ldw	r2,-20(fp)
   23828:	10800017 	ldw	r2,0(r2)
   2382c:	10c00517 	ldw	r3,20(r2)
   23830:	e0bfff17 	ldw	r2,-4(fp)
   23834:	e13ffb17 	ldw	r4,-20(fp)
   23838:	e17ffe17 	ldw	r5,-8(fp)
   2383c:	100d883a 	mov	r6,r2
   23840:	183ee83a 	callr	r3
   23844:	e0bffc15 	stw	r2,-16(fp)
   23848:	e0bffc17 	ldw	r2,-16(fp)
   2384c:	1000060e 	bge	r2,zero,23868 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   23850:	00237600 	call	23760 <alt_get_errno>
   23854:	e0fffc17 	ldw	r3,-16(fp)
   23858:	00c7c83a 	sub	r3,zero,r3
   2385c:	10c00015 	stw	r3,0(r2)
          return -1;
   23860:	00bfffc4 	movi	r2,-1
   23864:	00000a06 	br	23890 <read+0xe0>
        }
        return rval;
   23868:	e0bffc17 	ldw	r2,-16(fp)
   2386c:	00000806 	br	23890 <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   23870:	00237600 	call	23760 <alt_get_errno>
   23874:	00c00344 	movi	r3,13
   23878:	10c00015 	stw	r3,0(r2)
   2387c:	00000306 	br	2388c <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   23880:	00237600 	call	23760 <alt_get_errno>
   23884:	00c01444 	movi	r3,81
   23888:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   2388c:	00bfffc4 	movi	r2,-1
}
   23890:	e037883a 	mov	sp,fp
   23894:	dfc00117 	ldw	ra,4(sp)
   23898:	df000017 	ldw	fp,0(sp)
   2389c:	dec00204 	addi	sp,sp,8
   238a0:	f800283a 	ret

000238a4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   238a4:	defffc04 	addi	sp,sp,-16
   238a8:	dfc00315 	stw	ra,12(sp)
   238ac:	df000215 	stw	fp,8(sp)
   238b0:	dc000115 	stw	r16,4(sp)
   238b4:	df000104 	addi	fp,sp,4
   238b8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   238bc:	e0bfff17 	ldw	r2,-4(fp)
   238c0:	108000d0 	cmplti	r2,r2,3
   238c4:	1000111e 	bne	r2,zero,2390c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   238c8:	040000b4 	movhi	r16,2
   238cc:	8419ac04 	addi	r16,r16,26288
   238d0:	e0bfff17 	ldw	r2,-4(fp)
   238d4:	1009883a 	mov	r4,r2
   238d8:	01400304 	movi	r5,12
   238dc:	00231340 	call	23134 <__mulsi3>
   238e0:	8085883a 	add	r2,r16,r2
   238e4:	10800204 	addi	r2,r2,8
   238e8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   238ec:	040000b4 	movhi	r16,2
   238f0:	8419ac04 	addi	r16,r16,26288
   238f4:	e0bfff17 	ldw	r2,-4(fp)
   238f8:	1009883a 	mov	r4,r2
   238fc:	01400304 	movi	r5,12
   23900:	00231340 	call	23134 <__mulsi3>
   23904:	8085883a 	add	r2,r16,r2
   23908:	10000015 	stw	zero,0(r2)
  }
}
   2390c:	e037883a 	mov	sp,fp
   23910:	dfc00217 	ldw	ra,8(sp)
   23914:	df000117 	ldw	fp,4(sp)
   23918:	dc000017 	ldw	r16,0(sp)
   2391c:	dec00304 	addi	sp,sp,12
   23920:	f800283a 	ret

00023924 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   23924:	defff904 	addi	sp,sp,-28
   23928:	df000615 	stw	fp,24(sp)
   2392c:	df000604 	addi	fp,sp,24
   23930:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23934:	0005303a 	rdctl	r2,status
   23938:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2393c:	e0fffc17 	ldw	r3,-16(fp)
   23940:	00bfff84 	movi	r2,-2
   23944:	1884703a 	and	r2,r3,r2
   23948:	1001703a 	wrctl	status,r2
  
  return context;
   2394c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   23950:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   23954:	d0a00a17 	ldw	r2,-32728(gp)
   23958:	10c000c4 	addi	r3,r2,3
   2395c:	00bfff04 	movi	r2,-4
   23960:	1884703a 	and	r2,r3,r2
   23964:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   23968:	d0e00a17 	ldw	r3,-32728(gp)
   2396c:	e0bfff17 	ldw	r2,-4(fp)
   23970:	1885883a 	add	r2,r3,r2
   23974:	00c000f4 	movhi	r3,3
   23978:	18dc0004 	addi	r3,r3,28672
   2397c:	1880062e 	bgeu	r3,r2,23998 <sbrk+0x74>
   23980:	e0bffa17 	ldw	r2,-24(fp)
   23984:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23988:	e0bffd17 	ldw	r2,-12(fp)
   2398c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   23990:	00bfffc4 	movi	r2,-1
   23994:	00000b06 	br	239c4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   23998:	d0a00a17 	ldw	r2,-32728(gp)
   2399c:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   239a0:	d0e00a17 	ldw	r3,-32728(gp)
   239a4:	e0bfff17 	ldw	r2,-4(fp)
   239a8:	1885883a 	add	r2,r3,r2
   239ac:	d0a00a15 	stw	r2,-32728(gp)
   239b0:	e0bffa17 	ldw	r2,-24(fp)
   239b4:	e0bffe15 	stw	r2,-8(fp)
   239b8:	e0bffe17 	ldw	r2,-8(fp)
   239bc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   239c0:	e0bffb17 	ldw	r2,-20(fp)
} 
   239c4:	e037883a 	mov	sp,fp
   239c8:	df000017 	ldw	fp,0(sp)
   239cc:	dec00104 	addi	sp,sp,4
   239d0:	f800283a 	ret

000239d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   239d4:	defffe04 	addi	sp,sp,-8
   239d8:	dfc00115 	stw	ra,4(sp)
   239dc:	df000015 	stw	fp,0(sp)
   239e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   239e4:	008000b4 	movhi	r2,2
   239e8:	109e2d04 	addi	r2,r2,30900
   239ec:	10800017 	ldw	r2,0(r2)
   239f0:	10000526 	beq	r2,zero,23a08 <alt_get_errno+0x34>
   239f4:	008000b4 	movhi	r2,2
   239f8:	109e2d04 	addi	r2,r2,30900
   239fc:	10800017 	ldw	r2,0(r2)
   23a00:	103ee83a 	callr	r2
   23a04:	00000206 	br	23a10 <alt_get_errno+0x3c>
   23a08:	008000f4 	movhi	r2,3
   23a0c:	10a4c704 	addi	r2,r2,-27876
}
   23a10:	e037883a 	mov	sp,fp
   23a14:	dfc00117 	ldw	ra,4(sp)
   23a18:	df000017 	ldw	fp,0(sp)
   23a1c:	dec00204 	addi	sp,sp,8
   23a20:	f800283a 	ret

00023a24 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   23a24:	defff904 	addi	sp,sp,-28
   23a28:	dfc00615 	stw	ra,24(sp)
   23a2c:	df000515 	stw	fp,20(sp)
   23a30:	df000504 	addi	fp,sp,20
   23a34:	e13ffd15 	stw	r4,-12(fp)
   23a38:	e17ffe15 	stw	r5,-8(fp)
   23a3c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23a40:	e0bffd17 	ldw	r2,-12(fp)
   23a44:	10000716 	blt	r2,zero,23a64 <write+0x40>
   23a48:	e13ffd17 	ldw	r4,-12(fp)
   23a4c:	01400304 	movi	r5,12
   23a50:	00231340 	call	23134 <__mulsi3>
   23a54:	00c000b4 	movhi	r3,2
   23a58:	18d9ac04 	addi	r3,r3,26288
   23a5c:	10c5883a 	add	r2,r2,r3
   23a60:	00000106 	br	23a68 <write+0x44>
   23a64:	0005883a 	mov	r2,zero
   23a68:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   23a6c:	e0bffb17 	ldw	r2,-20(fp)
   23a70:	10001f26 	beq	r2,zero,23af0 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   23a74:	e0bffb17 	ldw	r2,-20(fp)
   23a78:	10800217 	ldw	r2,8(r2)
   23a7c:	108000cc 	andi	r2,r2,3
   23a80:	10001726 	beq	r2,zero,23ae0 <write+0xbc>
   23a84:	e0bffb17 	ldw	r2,-20(fp)
   23a88:	10800017 	ldw	r2,0(r2)
   23a8c:	10800617 	ldw	r2,24(r2)
   23a90:	10001326 	beq	r2,zero,23ae0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   23a94:	e0bffb17 	ldw	r2,-20(fp)
   23a98:	10800017 	ldw	r2,0(r2)
   23a9c:	10c00617 	ldw	r3,24(r2)
   23aa0:	e0bfff17 	ldw	r2,-4(fp)
   23aa4:	e13ffb17 	ldw	r4,-20(fp)
   23aa8:	e17ffe17 	ldw	r5,-8(fp)
   23aac:	100d883a 	mov	r6,r2
   23ab0:	183ee83a 	callr	r3
   23ab4:	e0bffc15 	stw	r2,-16(fp)
   23ab8:	e0bffc17 	ldw	r2,-16(fp)
   23abc:	1000060e 	bge	r2,zero,23ad8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   23ac0:	00239d40 	call	239d4 <alt_get_errno>
   23ac4:	e0fffc17 	ldw	r3,-16(fp)
   23ac8:	00c7c83a 	sub	r3,zero,r3
   23acc:	10c00015 	stw	r3,0(r2)
        return -1;
   23ad0:	00bfffc4 	movi	r2,-1
   23ad4:	00000a06 	br	23b00 <write+0xdc>
      }
      return rval;
   23ad8:	e0bffc17 	ldw	r2,-16(fp)
   23adc:	00000806 	br	23b00 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
   23ae0:	00239d40 	call	239d4 <alt_get_errno>
   23ae4:	00c00344 	movi	r3,13
   23ae8:	10c00015 	stw	r3,0(r2)
   23aec:	00000306 	br	23afc <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   23af0:	00239d40 	call	239d4 <alt_get_errno>
   23af4:	00c01444 	movi	r3,81
   23af8:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   23afc:	00bfffc4 	movi	r2,-1
}
   23b00:	e037883a 	mov	sp,fp
   23b04:	dfc00117 	ldw	ra,4(sp)
   23b08:	df000017 	ldw	fp,0(sp)
   23b0c:	dec00204 	addi	sp,sp,8
   23b10:	f800283a 	ret

00023b14 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   23b14:	defffd04 	addi	sp,sp,-12
   23b18:	dfc00215 	stw	ra,8(sp)
   23b1c:	df000115 	stw	fp,4(sp)
   23b20:	df000104 	addi	fp,sp,4
   23b24:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   23b28:	e13fff17 	ldw	r4,-4(fp)
   23b2c:	014000b4 	movhi	r5,2
   23b30:	295e2a04 	addi	r5,r5,30888
   23b34:	0024dec0 	call	24dec <alt_dev_llist_insert>
}
   23b38:	e037883a 	mov	sp,fp
   23b3c:	dfc00117 	ldw	ra,4(sp)
   23b40:	df000017 	ldw	fp,0(sp)
   23b44:	dec00204 	addi	sp,sp,8
   23b48:	f800283a 	ret

00023b4c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   23b4c:	defffd04 	addi	sp,sp,-12
   23b50:	dfc00215 	stw	ra,8(sp)
   23b54:	df000115 	stw	fp,4(sp)
   23b58:	df000104 	addi	fp,sp,4
   23b5c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU2, cpu2);
   23b60:	00257b40 	call	257b4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   23b64:	00800044 	movi	r2,1
   23b68:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   23b6c:	e037883a 	mov	sp,fp
   23b70:	dfc00117 	ldw	ra,4(sp)
   23b74:	df000017 	ldw	fp,0(sp)
   23b78:	dec00204 	addi	sp,sp,8
   23b7c:	f800283a 	ret

00023b80 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   23b80:	defffe04 	addi	sp,sp,-8
   23b84:	dfc00115 	stw	ra,4(sp)
   23b88:	df000015 	stw	fp,0(sp)
   23b8c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER2, timer2);
   23b90:	01000134 	movhi	r4,4
   23b94:	21040804 	addi	r4,r4,4128
   23b98:	000b883a 	mov	r5,zero
   23b9c:	01800044 	movi	r6,1
   23ba0:	01c0fa04 	movi	r7,1000
   23ba4:	0024bb80 	call	24bb8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_FIFO_INIT ( FIFO1TO2A, fifo1to2A);
   23ba8:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO1TO2B, fifo1to2B);
   23bac:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO1TO2C, fifo1to2C);
   23bb0:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO2TO3, fifo2to3);
   23bb4:	0001883a 	nop
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART2, jtag_uart2);
   23bb8:	010000b4 	movhi	r4,2
   23bbc:	211a1604 	addi	r4,r4,26712
   23bc0:	000b883a 	mov	r5,zero
   23bc4:	01800404 	movi	r6,16
   23bc8:	00242440 	call	24244 <altera_avalon_jtag_uart_init>
   23bcc:	010000b4 	movhi	r4,2
   23bd0:	211a0c04 	addi	r4,r4,26672
   23bd4:	0023b140 	call	23b14 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   23bd8:	0001883a 	nop
}
   23bdc:	e037883a 	mov	sp,fp
   23be0:	dfc00117 	ldw	ra,4(sp)
   23be4:	df000017 	ldw	fp,0(sp)
   23be8:	dec00204 	addi	sp,sp,8
   23bec:	f800283a 	ret

00023bf0 <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
   23bf0:	defffa04 	addi	sp,sp,-24
   23bf4:	dfc00515 	stw	ra,20(sp)
   23bf8:	df000415 	stw	fp,16(sp)
   23bfc:	df000404 	addi	fp,sp,16
   23c00:	e13ffc15 	stw	r4,-16(fp)
   23c04:	e17ffd15 	stw	r5,-12(fp)
   23c08:	e1bffe15 	stw	r6,-8(fp)
   23c0c:	e1ffff15 	stw	r7,-4(fp)
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
   23c10:	e13ffc17 	ldw	r4,-16(fp)
   23c14:	01400fc4 	movi	r5,63
   23c18:	0023dbc0 	call	23dbc <altera_avalon_fifo_clear_event>
   23c1c:	10000226 	beq	r2,zero,23c28 <altera_avalon_fifo_init+0x38>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   23c20:	00bfffc4 	movi	r2,-1
   23c24:	00001306 	br	23c74 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
   23c28:	e13ffc17 	ldw	r4,-16(fp)
   23c2c:	e17ffd17 	ldw	r5,-12(fp)
   23c30:	0023e180 	call	23e18 <altera_avalon_fifo_write_ienable>
   23c34:	10000226 	beq	r2,zero,23c40 <altera_avalon_fifo_init+0x50>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   23c38:	00bfff84 	movi	r2,-2
   23c3c:	00000d06 	br	23c74 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
   23c40:	e13ffc17 	ldw	r4,-16(fp)
   23c44:	e17fff17 	ldw	r5,-4(fp)
   23c48:	0023e700 	call	23e70 <altera_avalon_fifo_write_almostfull>
   23c4c:	10000226 	beq	r2,zero,23c58 <altera_avalon_fifo_init+0x68>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   23c50:	00bfff44 	movi	r2,-3
   23c54:	00000706 	br	23c74 <altera_avalon_fifo_init+0x84>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
   23c58:	e13ffc17 	ldw	r4,-16(fp)
   23c5c:	e17ffe17 	ldw	r5,-8(fp)
   23c60:	0023ec80 	call	23ec8 <altera_avalon_fifo_write_almostempty>
   23c64:	10000226 	beq	r2,zero,23c70 <altera_avalon_fifo_init+0x80>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   23c68:	00bfff44 	movi	r2,-3
   23c6c:	00000106 	br	23c74 <altera_avalon_fifo_init+0x84>
    }

    return ALTERA_AVALON_FIFO_OK;
   23c70:	0005883a 	mov	r2,zero
}
   23c74:	e037883a 	mov	sp,fp
   23c78:	dfc00117 	ldw	ra,4(sp)
   23c7c:	df000017 	ldw	fp,0(sp)
   23c80:	dec00204 	addi	sp,sp,8
   23c84:	f800283a 	ret

00023c88 <altera_avalon_fifo_read_status>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
   23c88:	defffd04 	addi	sp,sp,-12
   23c8c:	df000215 	stw	fp,8(sp)
   23c90:	df000204 	addi	fp,sp,8
   23c94:	e13ffe15 	stw	r4,-8(fp)
   23c98:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   23c9c:	e0bffe17 	ldw	r2,-8(fp)
   23ca0:	10800104 	addi	r2,r2,4
   23ca4:	10800037 	ldwio	r2,0(r2)
   23ca8:	1007883a 	mov	r3,r2
   23cac:	e0bfff17 	ldw	r2,-4(fp)
   23cb0:	1884703a 	and	r2,r3,r2
}
   23cb4:	e037883a 	mov	sp,fp
   23cb8:	df000017 	ldw	fp,0(sp)
   23cbc:	dec00104 	addi	sp,sp,4
   23cc0:	f800283a 	ret

00023cc4 <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
   23cc4:	defffd04 	addi	sp,sp,-12
   23cc8:	df000215 	stw	fp,8(sp)
   23ccc:	df000204 	addi	fp,sp,8
   23cd0:	e13ffe15 	stw	r4,-8(fp)
   23cd4:	e17fff15 	stw	r5,-4(fp)
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
   23cd8:	e0bffe17 	ldw	r2,-8(fp)
   23cdc:	10800304 	addi	r2,r2,12
   23ce0:	10800037 	ldwio	r2,0(r2)
   23ce4:	1007883a 	mov	r3,r2
   23ce8:	e0bfff17 	ldw	r2,-4(fp)
   23cec:	1884703a 	and	r2,r3,r2
}
   23cf0:	e037883a 	mov	sp,fp
   23cf4:	df000017 	ldw	fp,0(sp)
   23cf8:	dec00104 	addi	sp,sp,4
   23cfc:	f800283a 	ret

00023d00 <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
   23d00:	defffe04 	addi	sp,sp,-8
   23d04:	df000115 	stw	fp,4(sp)
   23d08:	df000104 	addi	fp,sp,4
   23d0c:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
   23d10:	e0bfff17 	ldw	r2,-4(fp)
   23d14:	10800404 	addi	r2,r2,16
   23d18:	10800037 	ldwio	r2,0(r2)
}
   23d1c:	e037883a 	mov	sp,fp
   23d20:	df000017 	ldw	fp,0(sp)
   23d24:	dec00104 	addi	sp,sp,4
   23d28:	f800283a 	ret

00023d2c <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
   23d2c:	defffe04 	addi	sp,sp,-8
   23d30:	df000115 	stw	fp,4(sp)
   23d34:	df000104 	addi	fp,sp,4
   23d38:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
   23d3c:	e0bfff17 	ldw	r2,-4(fp)
   23d40:	10800504 	addi	r2,r2,20
   23d44:	10800037 	ldwio	r2,0(r2)
}
   23d48:	e037883a 	mov	sp,fp
   23d4c:	df000017 	ldw	fp,0(sp)
   23d50:	dec00104 	addi	sp,sp,4
   23d54:	f800283a 	ret

00023d58 <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
   23d58:	defffd04 	addi	sp,sp,-12
   23d5c:	df000215 	stw	fp,8(sp)
   23d60:	df000204 	addi	fp,sp,8
   23d64:	e13ffe15 	stw	r4,-8(fp)
   23d68:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
   23d6c:	e0bffe17 	ldw	r2,-8(fp)
   23d70:	10800204 	addi	r2,r2,8
   23d74:	10800037 	ldwio	r2,0(r2)
   23d78:	1007883a 	mov	r3,r2
   23d7c:	e0bfff17 	ldw	r2,-4(fp)
   23d80:	1884703a 	and	r2,r3,r2
}
   23d84:	e037883a 	mov	sp,fp
   23d88:	df000017 	ldw	fp,0(sp)
   23d8c:	dec00104 	addi	sp,sp,4
   23d90:	f800283a 	ret

00023d94 <altera_avalon_fifo_read_level>:

int altera_avalon_fifo_read_level(alt_u32 address)
{
   23d94:	defffe04 	addi	sp,sp,-8
   23d98:	df000115 	stw	fp,4(sp)
   23d9c:	df000104 	addi	fp,sp,4
   23da0:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
   23da4:	e0bfff17 	ldw	r2,-4(fp)
   23da8:	10800037 	ldwio	r2,0(r2)
}
   23dac:	e037883a 	mov	sp,fp
   23db0:	df000017 	ldw	fp,0(sp)
   23db4:	dec00104 	addi	sp,sp,4
   23db8:	f800283a 	ret

00023dbc <altera_avalon_fifo_clear_event>:

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
   23dbc:	defffd04 	addi	sp,sp,-12
   23dc0:	df000215 	stw	fp,8(sp)
   23dc4:	df000204 	addi	fp,sp,8
   23dc8:	e13ffe15 	stw	r4,-8(fp)
   23dcc:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
   23dd0:	e0bffe17 	ldw	r2,-8(fp)
   23dd4:	10800204 	addi	r2,r2,8
   23dd8:	e0ffff17 	ldw	r3,-4(fp)
   23ddc:	10c00035 	stwio	r3,0(r2)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
   23de0:	e0bffe17 	ldw	r2,-8(fp)
   23de4:	10800204 	addi	r2,r2,8
   23de8:	10800037 	ldwio	r2,0(r2)
   23dec:	1007883a 	mov	r3,r2
   23df0:	e0bfff17 	ldw	r2,-4(fp)
   23df4:	1884703a 	and	r2,r3,r2
   23df8:	1000021e 	bne	r2,zero,23e04 <altera_avalon_fifo_clear_event+0x48>
        return ALTERA_AVALON_FIFO_OK;
   23dfc:	0005883a 	mov	r2,zero
   23e00:	00000106 	br	23e08 <altera_avalon_fifo_clear_event+0x4c>
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   23e04:	00bfffc4 	movi	r2,-1
}
   23e08:	e037883a 	mov	sp,fp
   23e0c:	df000017 	ldw	fp,0(sp)
   23e10:	dec00104 	addi	sp,sp,4
   23e14:	f800283a 	ret

00023e18 <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
   23e18:	defffd04 	addi	sp,sp,-12
   23e1c:	df000215 	stw	fp,8(sp)
   23e20:	df000204 	addi	fp,sp,8
   23e24:	e13ffe15 	stw	r4,-8(fp)
   23e28:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
   23e2c:	e0bffe17 	ldw	r2,-8(fp)
   23e30:	10800304 	addi	r2,r2,12
   23e34:	e0ffff17 	ldw	r3,-4(fp)
   23e38:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
   23e3c:	e0bffe17 	ldw	r2,-8(fp)
   23e40:	10800304 	addi	r2,r2,12
   23e44:	10800037 	ldwio	r2,0(r2)
   23e48:	1007883a 	mov	r3,r2
   23e4c:	e0bfff17 	ldw	r2,-4(fp)
   23e50:	1880021e 	bne	r3,r2,23e5c <altera_avalon_fifo_write_ienable+0x44>
        return ALTERA_AVALON_FIFO_OK;
   23e54:	0005883a 	mov	r2,zero
   23e58:	00000106 	br	23e60 <altera_avalon_fifo_write_ienable+0x48>
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   23e5c:	00bfff84 	movi	r2,-2
}
   23e60:	e037883a 	mov	sp,fp
   23e64:	df000017 	ldw	fp,0(sp)
   23e68:	dec00104 	addi	sp,sp,4
   23e6c:	f800283a 	ret

00023e70 <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
   23e70:	defffd04 	addi	sp,sp,-12
   23e74:	df000215 	stw	fp,8(sp)
   23e78:	df000204 	addi	fp,sp,8
   23e7c:	e13ffe15 	stw	r4,-8(fp)
   23e80:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
   23e84:	e0bffe17 	ldw	r2,-8(fp)
   23e88:	10800404 	addi	r2,r2,16
   23e8c:	e0ffff17 	ldw	r3,-4(fp)
   23e90:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
   23e94:	e0bffe17 	ldw	r2,-8(fp)
   23e98:	10800404 	addi	r2,r2,16
   23e9c:	10800037 	ldwio	r2,0(r2)
   23ea0:	1007883a 	mov	r3,r2
   23ea4:	e0bfff17 	ldw	r2,-4(fp)
   23ea8:	1880021e 	bne	r3,r2,23eb4 <altera_avalon_fifo_write_almostfull+0x44>
        return ALTERA_AVALON_FIFO_OK;
   23eac:	0005883a 	mov	r2,zero
   23eb0:	00000106 	br	23eb8 <altera_avalon_fifo_write_almostfull+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   23eb4:	00bfff44 	movi	r2,-3
}
   23eb8:	e037883a 	mov	sp,fp
   23ebc:	df000017 	ldw	fp,0(sp)
   23ec0:	dec00104 	addi	sp,sp,4
   23ec4:	f800283a 	ret

00023ec8 <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
   23ec8:	defffd04 	addi	sp,sp,-12
   23ecc:	df000215 	stw	fp,8(sp)
   23ed0:	df000204 	addi	fp,sp,8
   23ed4:	e13ffe15 	stw	r4,-8(fp)
   23ed8:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
   23edc:	e0bffe17 	ldw	r2,-8(fp)
   23ee0:	10800504 	addi	r2,r2,20
   23ee4:	e0ffff17 	ldw	r3,-4(fp)
   23ee8:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
   23eec:	e0bffe17 	ldw	r2,-8(fp)
   23ef0:	10800504 	addi	r2,r2,20
   23ef4:	10800037 	ldwio	r2,0(r2)
   23ef8:	1007883a 	mov	r3,r2
   23efc:	e0bfff17 	ldw	r2,-4(fp)
   23f00:	1880021e 	bne	r3,r2,23f0c <altera_avalon_fifo_write_almostempty+0x44>
        return ALTERA_AVALON_FIFO_OK;
   23f04:	0005883a 	mov	r2,zero
   23f08:	00000106 	br	23f10 <altera_avalon_fifo_write_almostempty+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   23f0c:	00bfff44 	movi	r2,-3
}
   23f10:	e037883a 	mov	sp,fp
   23f14:	df000017 	ldw	fp,0(sp)
   23f18:	dec00104 	addi	sp,sp,4
   23f1c:	f800283a 	ret

00023f20 <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
   23f20:	defffb04 	addi	sp,sp,-20
   23f24:	dfc00415 	stw	ra,16(sp)
   23f28:	df000315 	stw	fp,12(sp)
   23f2c:	df000304 	addi	fp,sp,12
   23f30:	e13ffd15 	stw	r4,-12(fp)
   23f34:	e17ffe15 	stw	r5,-8(fp)
   23f38:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   23f3c:	e13ffe17 	ldw	r4,-8(fp)
   23f40:	01400044 	movi	r5,1
   23f44:	0023c880 	call	23c88 <altera_avalon_fifo_read_status>
   23f48:	1000051e 	bne	r2,zero,23f60 <altera_avalon_fifo_write_fifo+0x40>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
   23f4c:	e0bffd17 	ldw	r2,-12(fp)
   23f50:	e0ffff17 	ldw	r3,-4(fp)
   23f54:	10c00035 	stwio	r3,0(r2)
        return ALTERA_AVALON_FIFO_OK;
   23f58:	0005883a 	mov	r2,zero
   23f5c:	00000106 	br	23f64 <altera_avalon_fifo_write_fifo+0x44>
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
   23f60:	00bfff04 	movi	r2,-4
    }
}
   23f64:	e037883a 	mov	sp,fp
   23f68:	dfc00117 	ldw	ra,4(sp)
   23f6c:	df000017 	ldw	fp,0(sp)
   23f70:	dec00204 	addi	sp,sp,8
   23f74:	f800283a 	ret

00023f78 <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
   23f78:	defffa04 	addi	sp,sp,-24
   23f7c:	dfc00515 	stw	ra,20(sp)
   23f80:	df000415 	stw	fp,16(sp)
   23f84:	df000404 	addi	fp,sp,16
   23f88:	e13ffd15 	stw	r4,-12(fp)
   23f8c:	e17ffe15 	stw	r5,-8(fp)
   23f90:	e1bfff15 	stw	r6,-4(fp)
    int return_val = 0;
   23f94:	e03ffc15 	stw	zero,-16(fp)
    *data = 0;
   23f98:	e0bfff17 	ldw	r2,-4(fp)
   23f9c:	10000015 	stw	zero,0(r2)
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   23fa0:	e13ffe17 	ldw	r4,-8(fp)
   23fa4:	01400084 	movi	r5,2
   23fa8:	0023c880 	call	23c88 <altera_avalon_fifo_read_status>
   23fac:	1000071e 	bne	r2,zero,23fcc <altera_avalon_read_fifo+0x54>
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
   23fb0:	e13ffe17 	ldw	r4,-8(fp)
   23fb4:	0023d940 	call	23d94 <altera_avalon_fifo_read_level>
   23fb8:	e0bffc15 	stw	r2,-16(fp)
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   23fbc:	e0bffd17 	ldw	r2,-12(fp)
   23fc0:	10c00037 	ldwio	r3,0(r2)
   23fc4:	e0bfff17 	ldw	r2,-4(fp)
   23fc8:	10c00015 	stw	r3,0(r2)
    
    }
    return return_val;
   23fcc:	e0bffc17 	ldw	r2,-16(fp)
}
   23fd0:	e037883a 	mov	sp,fp
   23fd4:	dfc00117 	ldw	ra,4(sp)
   23fd8:	df000017 	ldw	fp,0(sp)
   23fdc:	dec00204 	addi	sp,sp,8
   23fe0:	f800283a 	ret

00023fe4 <altera_avalon_fifo_read_fifo>:

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
   23fe4:	defffc04 	addi	sp,sp,-16
   23fe8:	dfc00315 	stw	ra,12(sp)
   23fec:	df000215 	stw	fp,8(sp)
   23ff0:	df000204 	addi	fp,sp,8
   23ff4:	e13ffe15 	stw	r4,-8(fp)
   23ff8:	e17fff15 	stw	r5,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   23ffc:	e13fff17 	ldw	r4,-4(fp)
   24000:	01400084 	movi	r5,2
   24004:	0023c880 	call	23c88 <altera_avalon_fifo_read_status>
   24008:	1000031e 	bne	r2,zero,24018 <altera_avalon_fifo_read_fifo+0x34>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   2400c:	e0bffe17 	ldw	r2,-8(fp)
   24010:	10800037 	ldwio	r2,0(r2)
   24014:	00000106 	br	2401c <altera_avalon_fifo_read_fifo+0x38>
    }
    return 0;
   24018:	0005883a 	mov	r2,zero
}
   2401c:	e037883a 	mov	sp,fp
   24020:	dfc00117 	ldw	ra,4(sp)
   24024:	df000017 	ldw	fp,0(sp)
   24028:	dec00204 	addi	sp,sp,8
   2402c:	f800283a 	ret

00024030 <altera_avalon_fifo_write_other_info>:

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
   24030:	defffb04 	addi	sp,sp,-20
   24034:	dfc00415 	stw	ra,16(sp)
   24038:	df000315 	stw	fp,12(sp)
   2403c:	df000304 	addi	fp,sp,12
   24040:	e13ffd15 	stw	r4,-12(fp)
   24044:	e17ffe15 	stw	r5,-8(fp)
   24048:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   2404c:	e13ffe17 	ldw	r4,-8(fp)
   24050:	01400044 	movi	r5,1
   24054:	0023c880 	call	23c88 <altera_avalon_fifo_read_status>
   24058:	1000061e 	bne	r2,zero,24074 <altera_avalon_fifo_write_other_info+0x44>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
   2405c:	e0bffd17 	ldw	r2,-12(fp)
   24060:	10800104 	addi	r2,r2,4
   24064:	e0ffff17 	ldw	r3,-4(fp)
   24068:	10c00035 	stwio	r3,0(r2)
	return ALTERA_AVALON_FIFO_OK;
   2406c:	0005883a 	mov	r2,zero
   24070:	00000106 	br	24078 <altera_avalon_fifo_write_other_info+0x48>
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
   24074:	00bfff04 	movi	r2,-4
    }
}
   24078:	e037883a 	mov	sp,fp
   2407c:	dfc00117 	ldw	ra,4(sp)
   24080:	df000017 	ldw	fp,0(sp)
   24084:	dec00204 	addi	sp,sp,8
   24088:	f800283a 	ret

0002408c <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
   2408c:	defffe04 	addi	sp,sp,-8
   24090:	df000115 	stw	fp,4(sp)
   24094:	df000104 	addi	fp,sp,4
   24098:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
   2409c:	e0bfff17 	ldw	r2,-4(fp)
   240a0:	10800104 	addi	r2,r2,4
   240a4:	10800037 	ldwio	r2,0(r2)
}
   240a8:	e037883a 	mov	sp,fp
   240ac:	df000017 	ldw	fp,0(sp)
   240b0:	dec00104 	addi	sp,sp,4
   240b4:	f800283a 	ret

000240b8 <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
   240b8:	defffe04 	addi	sp,sp,-8
   240bc:	df000115 	stw	fp,4(sp)
   240c0:	df000104 	addi	fp,sp,4
   240c4:	e13fff15 	stw	r4,-4(fp)
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
   240c8:	e0bfff17 	ldw	r2,-4(fp)
   240cc:	10800037 	ldwio	r2,0(r2)
}
   240d0:	e037883a 	mov	sp,fp
   240d4:	df000017 	ldw	fp,0(sp)
   240d8:	dec00104 	addi	sp,sp,4
   240dc:	f800283a 	ret

000240e0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   240e0:	defffa04 	addi	sp,sp,-24
   240e4:	dfc00515 	stw	ra,20(sp)
   240e8:	df000415 	stw	fp,16(sp)
   240ec:	df000404 	addi	fp,sp,16
   240f0:	e13ffd15 	stw	r4,-12(fp)
   240f4:	e17ffe15 	stw	r5,-8(fp)
   240f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   240fc:	e0bffd17 	ldw	r2,-12(fp)
   24100:	10800017 	ldw	r2,0(r2)
   24104:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   24108:	e0bffc17 	ldw	r2,-16(fp)
   2410c:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   24110:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   24114:	10800217 	ldw	r2,8(r2)
   24118:	1809883a 	mov	r4,r3
   2411c:	e17ffe17 	ldw	r5,-8(fp)
   24120:	e1bfff17 	ldw	r6,-4(fp)
   24124:	100f883a 	mov	r7,r2
   24128:	00247080 	call	24708 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   2412c:	e037883a 	mov	sp,fp
   24130:	dfc00117 	ldw	ra,4(sp)
   24134:	df000017 	ldw	fp,0(sp)
   24138:	dec00204 	addi	sp,sp,8
   2413c:	f800283a 	ret

00024140 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   24140:	defffa04 	addi	sp,sp,-24
   24144:	dfc00515 	stw	ra,20(sp)
   24148:	df000415 	stw	fp,16(sp)
   2414c:	df000404 	addi	fp,sp,16
   24150:	e13ffd15 	stw	r4,-12(fp)
   24154:	e17ffe15 	stw	r5,-8(fp)
   24158:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2415c:	e0bffd17 	ldw	r2,-12(fp)
   24160:	10800017 	ldw	r2,0(r2)
   24164:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   24168:	e0bffc17 	ldw	r2,-16(fp)
   2416c:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   24170:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   24174:	10800217 	ldw	r2,8(r2)
   24178:	1809883a 	mov	r4,r3
   2417c:	e17ffe17 	ldw	r5,-8(fp)
   24180:	e1bfff17 	ldw	r6,-4(fp)
   24184:	100f883a 	mov	r7,r2
   24188:	00249200 	call	24920 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   2418c:	e037883a 	mov	sp,fp
   24190:	dfc00117 	ldw	ra,4(sp)
   24194:	df000017 	ldw	fp,0(sp)
   24198:	dec00204 	addi	sp,sp,8
   2419c:	f800283a 	ret

000241a0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   241a0:	defffc04 	addi	sp,sp,-16
   241a4:	dfc00315 	stw	ra,12(sp)
   241a8:	df000215 	stw	fp,8(sp)
   241ac:	df000204 	addi	fp,sp,8
   241b0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   241b4:	e0bfff17 	ldw	r2,-4(fp)
   241b8:	10800017 	ldw	r2,0(r2)
   241bc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   241c0:	e0bffe17 	ldw	r2,-8(fp)
   241c4:	10c00a04 	addi	r3,r2,40
   241c8:	e0bfff17 	ldw	r2,-4(fp)
   241cc:	10800217 	ldw	r2,8(r2)
   241d0:	1809883a 	mov	r4,r3
   241d4:	100b883a 	mov	r5,r2
   241d8:	00245ac0 	call	245ac <altera_avalon_jtag_uart_close>
}
   241dc:	e037883a 	mov	sp,fp
   241e0:	dfc00117 	ldw	ra,4(sp)
   241e4:	df000017 	ldw	fp,0(sp)
   241e8:	dec00204 	addi	sp,sp,8
   241ec:	f800283a 	ret

000241f0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   241f0:	defffa04 	addi	sp,sp,-24
   241f4:	dfc00515 	stw	ra,20(sp)
   241f8:	df000415 	stw	fp,16(sp)
   241fc:	df000404 	addi	fp,sp,16
   24200:	e13ffd15 	stw	r4,-12(fp)
   24204:	e17ffe15 	stw	r5,-8(fp)
   24208:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   2420c:	e0bffd17 	ldw	r2,-12(fp)
   24210:	10800017 	ldw	r2,0(r2)
   24214:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   24218:	e0bffc17 	ldw	r2,-16(fp)
   2421c:	10800a04 	addi	r2,r2,40
   24220:	1009883a 	mov	r4,r2
   24224:	e17ffe17 	ldw	r5,-8(fp)
   24228:	e1bfff17 	ldw	r6,-4(fp)
   2422c:	00246140 	call	24614 <altera_avalon_jtag_uart_ioctl>
}
   24230:	e037883a 	mov	sp,fp
   24234:	dfc00117 	ldw	ra,4(sp)
   24238:	df000017 	ldw	fp,0(sp)
   2423c:	dec00204 	addi	sp,sp,8
   24240:	f800283a 	ret

00024244 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   24244:	defffa04 	addi	sp,sp,-24
   24248:	dfc00515 	stw	ra,20(sp)
   2424c:	df000415 	stw	fp,16(sp)
   24250:	df000404 	addi	fp,sp,16
   24254:	e13ffd15 	stw	r4,-12(fp)
   24258:	e17ffe15 	stw	r5,-8(fp)
   2425c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   24260:	e0bffd17 	ldw	r2,-12(fp)
   24264:	00c00044 	movi	r3,1
   24268:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   2426c:	e0bffd17 	ldw	r2,-12(fp)
   24270:	10800017 	ldw	r2,0(r2)
   24274:	10800104 	addi	r2,r2,4
   24278:	e0fffd17 	ldw	r3,-12(fp)
   2427c:	18c00817 	ldw	r3,32(r3)
   24280:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   24284:	e0fffe17 	ldw	r3,-8(fp)
   24288:	e0bfff17 	ldw	r2,-4(fp)
   2428c:	d8000015 	stw	zero,0(sp)
   24290:	1809883a 	mov	r4,r3
   24294:	100b883a 	mov	r5,r2
   24298:	018000b4 	movhi	r6,2
   2429c:	3190c104 	addi	r6,r6,17156
   242a0:	e1fffd17 	ldw	r7,-12(fp)
   242a4:	0024f600 	call	24f60 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   242a8:	e0bffd17 	ldw	r2,-12(fp)
   242ac:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   242b0:	e0bffd17 	ldw	r2,-12(fp)
   242b4:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   242b8:	008000f4 	movhi	r2,3
   242bc:	10a4cc04 	addi	r2,r2,-27856
   242c0:	10800017 	ldw	r2,0(r2)
   242c4:	1809883a 	mov	r4,r3
   242c8:	100b883a 	mov	r5,r2
   242cc:	018000b4 	movhi	r6,2
   242d0:	31914204 	addi	r6,r6,17672
   242d4:	e1fffd17 	ldw	r7,-12(fp)
   242d8:	0024c400 	call	24c40 <alt_alarm_start>
   242dc:	1000040e 	bge	r2,zero,242f0 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   242e0:	e0bffd17 	ldw	r2,-12(fp)
   242e4:	00e00034 	movhi	r3,32768
   242e8:	18ffffc4 	addi	r3,r3,-1
   242ec:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   242f0:	e037883a 	mov	sp,fp
   242f4:	dfc00117 	ldw	ra,4(sp)
   242f8:	df000017 	ldw	fp,0(sp)
   242fc:	dec00204 	addi	sp,sp,8
   24300:	f800283a 	ret

00024304 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   24304:	defff804 	addi	sp,sp,-32
   24308:	df000715 	stw	fp,28(sp)
   2430c:	df000704 	addi	fp,sp,28
   24310:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   24314:	e0bfff17 	ldw	r2,-4(fp)
   24318:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   2431c:	e0bffb17 	ldw	r2,-20(fp)
   24320:	10800017 	ldw	r2,0(r2)
   24324:	e0bffc15 	stw	r2,-16(fp)
   24328:	00000106 	br	24330 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
   2432c:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   24330:	e0bffc17 	ldw	r2,-16(fp)
   24334:	10800104 	addi	r2,r2,4
   24338:	10800037 	ldwio	r2,0(r2)
   2433c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   24340:	e0bffd17 	ldw	r2,-12(fp)
   24344:	1080c00c 	andi	r2,r2,768
   24348:	10006a26 	beq	r2,zero,244f4 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   2434c:	e0bffd17 	ldw	r2,-12(fp)
   24350:	1080400c 	andi	r2,r2,256
   24354:	10003326 	beq	r2,zero,24424 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   24358:	00800074 	movhi	r2,1
   2435c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   24360:	e0bffb17 	ldw	r2,-20(fp)
   24364:	10800a17 	ldw	r2,40(r2)
   24368:	10800044 	addi	r2,r2,1
   2436c:	1081ffcc 	andi	r2,r2,2047
   24370:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   24374:	e0bffb17 	ldw	r2,-20(fp)
   24378:	10c00b17 	ldw	r3,44(r2)
   2437c:	e0bffe17 	ldw	r2,-8(fp)
   24380:	18801426 	beq	r3,r2,243d4 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   24384:	e0bffc17 	ldw	r2,-16(fp)
   24388:	10800037 	ldwio	r2,0(r2)
   2438c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   24390:	e0bff917 	ldw	r2,-28(fp)
   24394:	10a0000c 	andi	r2,r2,32768
   24398:	10001026 	beq	r2,zero,243dc <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   2439c:	e0bffb17 	ldw	r2,-20(fp)
   243a0:	10800a17 	ldw	r2,40(r2)
   243a4:	e0fff917 	ldw	r3,-28(fp)
   243a8:	e13ffb17 	ldw	r4,-20(fp)
   243ac:	2085883a 	add	r2,r4,r2
   243b0:	10800e04 	addi	r2,r2,56
   243b4:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   243b8:	e0bffb17 	ldw	r2,-20(fp)
   243bc:	10800a17 	ldw	r2,40(r2)
   243c0:	10800044 	addi	r2,r2,1
   243c4:	10c1ffcc 	andi	r3,r2,2047
   243c8:	e0bffb17 	ldw	r2,-20(fp)
   243cc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   243d0:	003fe306 	br	24360 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   243d4:	0001883a 	nop
   243d8:	00000106 	br	243e0 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   243dc:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   243e0:	e0bff917 	ldw	r2,-28(fp)
   243e4:	10bfffec 	andhi	r2,r2,65535
   243e8:	10000e26 	beq	r2,zero,24424 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   243ec:	e0bffb17 	ldw	r2,-20(fp)
   243f0:	10c00817 	ldw	r3,32(r2)
   243f4:	00bfff84 	movi	r2,-2
   243f8:	1886703a 	and	r3,r3,r2
   243fc:	e0bffb17 	ldw	r2,-20(fp)
   24400:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   24404:	e0bffc17 	ldw	r2,-16(fp)
   24408:	10800104 	addi	r2,r2,4
   2440c:	e0fffb17 	ldw	r3,-20(fp)
   24410:	18c00817 	ldw	r3,32(r3)
   24414:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   24418:	e0bffc17 	ldw	r2,-16(fp)
   2441c:	10800104 	addi	r2,r2,4
   24420:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   24424:	e0bffd17 	ldw	r2,-12(fp)
   24428:	1080800c 	andi	r2,r2,512
   2442c:	103fbf26 	beq	r2,zero,2432c <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   24430:	e0bffd17 	ldw	r2,-12(fp)
   24434:	1004d43a 	srli	r2,r2,16
   24438:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   2443c:	00001406 	br	24490 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   24440:	e0bffc17 	ldw	r2,-16(fp)
   24444:	e0fffb17 	ldw	r3,-20(fp)
   24448:	18c00d17 	ldw	r3,52(r3)
   2444c:	e13ffb17 	ldw	r4,-20(fp)
   24450:	20c7883a 	add	r3,r4,r3
   24454:	18c20e04 	addi	r3,r3,2104
   24458:	18c00003 	ldbu	r3,0(r3)
   2445c:	18c03fcc 	andi	r3,r3,255
   24460:	18c0201c 	xori	r3,r3,128
   24464:	18ffe004 	addi	r3,r3,-128
   24468:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2446c:	e0bffb17 	ldw	r2,-20(fp)
   24470:	10800d17 	ldw	r2,52(r2)
   24474:	10800044 	addi	r2,r2,1
   24478:	10c1ffcc 	andi	r3,r2,2047
   2447c:	e0bffb17 	ldw	r2,-20(fp)
   24480:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   24484:	e0bffa17 	ldw	r2,-24(fp)
   24488:	10bfffc4 	addi	r2,r2,-1
   2448c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   24490:	e0bffa17 	ldw	r2,-24(fp)
   24494:	10000526 	beq	r2,zero,244ac <altera_avalon_jtag_uart_irq+0x1a8>
   24498:	e0bffb17 	ldw	r2,-20(fp)
   2449c:	10c00d17 	ldw	r3,52(r2)
   244a0:	e0bffb17 	ldw	r2,-20(fp)
   244a4:	10800c17 	ldw	r2,48(r2)
   244a8:	18bfe51e 	bne	r3,r2,24440 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   244ac:	e0bffa17 	ldw	r2,-24(fp)
   244b0:	103f9e26 	beq	r2,zero,2432c <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   244b4:	e0bffb17 	ldw	r2,-20(fp)
   244b8:	10c00817 	ldw	r3,32(r2)
   244bc:	00bfff44 	movi	r2,-3
   244c0:	1886703a 	and	r3,r3,r2
   244c4:	e0bffb17 	ldw	r2,-20(fp)
   244c8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   244cc:	e0bffb17 	ldw	r2,-20(fp)
   244d0:	10800017 	ldw	r2,0(r2)
   244d4:	10800104 	addi	r2,r2,4
   244d8:	e0fffb17 	ldw	r3,-20(fp)
   244dc:	18c00817 	ldw	r3,32(r3)
   244e0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   244e4:	e0bffc17 	ldw	r2,-16(fp)
   244e8:	10800104 	addi	r2,r2,4
   244ec:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   244f0:	003f8e06 	br	2432c <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   244f4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   244f8:	e037883a 	mov	sp,fp
   244fc:	df000017 	ldw	fp,0(sp)
   24500:	dec00104 	addi	sp,sp,4
   24504:	f800283a 	ret

00024508 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   24508:	defffc04 	addi	sp,sp,-16
   2450c:	df000315 	stw	fp,12(sp)
   24510:	df000304 	addi	fp,sp,12
   24514:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   24518:	e0bfff17 	ldw	r2,-4(fp)
   2451c:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   24520:	e0bffd17 	ldw	r2,-12(fp)
   24524:	10800017 	ldw	r2,0(r2)
   24528:	10800104 	addi	r2,r2,4
   2452c:	10800037 	ldwio	r2,0(r2)
   24530:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   24534:	e0bffe17 	ldw	r2,-8(fp)
   24538:	1081000c 	andi	r2,r2,1024
   2453c:	10000a26 	beq	r2,zero,24568 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   24540:	e0bffd17 	ldw	r2,-12(fp)
   24544:	10800017 	ldw	r2,0(r2)
   24548:	10800104 	addi	r2,r2,4
   2454c:	e0fffd17 	ldw	r3,-12(fp)
   24550:	18c00817 	ldw	r3,32(r3)
   24554:	18c10014 	ori	r3,r3,1024
   24558:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   2455c:	e0bffd17 	ldw	r2,-12(fp)
   24560:	10000915 	stw	zero,36(r2)
   24564:	00000a06 	br	24590 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   24568:	e0bffd17 	ldw	r2,-12(fp)
   2456c:	10800917 	ldw	r2,36(r2)
   24570:	00e00034 	movhi	r3,32768
   24574:	18ffff04 	addi	r3,r3,-4
   24578:	18800536 	bltu	r3,r2,24590 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
   2457c:	e0bffd17 	ldw	r2,-12(fp)
   24580:	10800917 	ldw	r2,36(r2)
   24584:	10c00044 	addi	r3,r2,1
   24588:	e0bffd17 	ldw	r2,-12(fp)
   2458c:	10c00915 	stw	r3,36(r2)
   24590:	008000f4 	movhi	r2,3
   24594:	10a4cc04 	addi	r2,r2,-27856
   24598:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   2459c:	e037883a 	mov	sp,fp
   245a0:	df000017 	ldw	fp,0(sp)
   245a4:	dec00104 	addi	sp,sp,4
   245a8:	f800283a 	ret

000245ac <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   245ac:	defffd04 	addi	sp,sp,-12
   245b0:	df000215 	stw	fp,8(sp)
   245b4:	df000204 	addi	fp,sp,8
   245b8:	e13ffe15 	stw	r4,-8(fp)
   245bc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   245c0:	00000506 	br	245d8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   245c4:	e0bfff17 	ldw	r2,-4(fp)
   245c8:	1090000c 	andi	r2,r2,16384
   245cc:	10000226 	beq	r2,zero,245d8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   245d0:	00bffd44 	movi	r2,-11
   245d4:	00000b06 	br	24604 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   245d8:	e0bffe17 	ldw	r2,-8(fp)
   245dc:	10c00d17 	ldw	r3,52(r2)
   245e0:	e0bffe17 	ldw	r2,-8(fp)
   245e4:	10800c17 	ldw	r2,48(r2)
   245e8:	18800526 	beq	r3,r2,24600 <altera_avalon_jtag_uart_close+0x54>
   245ec:	e0bffe17 	ldw	r2,-8(fp)
   245f0:	10c00917 	ldw	r3,36(r2)
   245f4:	e0bffe17 	ldw	r2,-8(fp)
   245f8:	10800117 	ldw	r2,4(r2)
   245fc:	18bff136 	bltu	r3,r2,245c4 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   24600:	0005883a 	mov	r2,zero
}
   24604:	e037883a 	mov	sp,fp
   24608:	df000017 	ldw	fp,0(sp)
   2460c:	dec00104 	addi	sp,sp,4
   24610:	f800283a 	ret

00024614 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   24614:	defffa04 	addi	sp,sp,-24
   24618:	df000515 	stw	fp,20(sp)
   2461c:	df000504 	addi	fp,sp,20
   24620:	e13ffd15 	stw	r4,-12(fp)
   24624:	e17ffe15 	stw	r5,-8(fp)
   24628:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   2462c:	00bff9c4 	movi	r2,-25
   24630:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   24634:	e0bffe17 	ldw	r2,-8(fp)
   24638:	10da8060 	cmpeqi	r3,r2,27137
   2463c:	1800031e 	bne	r3,zero,2464c <altera_avalon_jtag_uart_ioctl+0x38>
   24640:	109a80a0 	cmpeqi	r2,r2,27138
   24644:	1000181e 	bne	r2,zero,246a8 <altera_avalon_jtag_uart_ioctl+0x94>
   24648:	00002606 	br	246e4 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   2464c:	e0bffd17 	ldw	r2,-12(fp)
   24650:	10c00117 	ldw	r3,4(r2)
   24654:	00a00034 	movhi	r2,32768
   24658:	10bfffc4 	addi	r2,r2,-1
   2465c:	18802226 	beq	r3,r2,246e8 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
   24660:	e0bfff17 	ldw	r2,-4(fp)
   24664:	10800017 	ldw	r2,0(r2)
   24668:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   2466c:	e0bffc17 	ldw	r2,-16(fp)
   24670:	10800090 	cmplti	r2,r2,2
   24674:	1000061e 	bne	r2,zero,24690 <altera_avalon_jtag_uart_ioctl+0x7c>
   24678:	e0fffc17 	ldw	r3,-16(fp)
   2467c:	00a00034 	movhi	r2,32768
   24680:	10bfffc4 	addi	r2,r2,-1
   24684:	18800226 	beq	r3,r2,24690 <altera_avalon_jtag_uart_ioctl+0x7c>
   24688:	e0bffc17 	ldw	r2,-16(fp)
   2468c:	00000206 	br	24698 <altera_avalon_jtag_uart_ioctl+0x84>
   24690:	00a00034 	movhi	r2,32768
   24694:	10bfff84 	addi	r2,r2,-2
   24698:	e0fffd17 	ldw	r3,-12(fp)
   2469c:	18800115 	stw	r2,4(r3)
      rc = 0;
   246a0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   246a4:	00001006 	br	246e8 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   246a8:	e0bffd17 	ldw	r2,-12(fp)
   246ac:	10c00117 	ldw	r3,4(r2)
   246b0:	00a00034 	movhi	r2,32768
   246b4:	10bfffc4 	addi	r2,r2,-1
   246b8:	18800d26 	beq	r3,r2,246f0 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   246bc:	e0bffd17 	ldw	r2,-12(fp)
   246c0:	10c00917 	ldw	r3,36(r2)
   246c4:	e0bffd17 	ldw	r2,-12(fp)
   246c8:	10800117 	ldw	r2,4(r2)
   246cc:	1885803a 	cmpltu	r2,r3,r2
   246d0:	10c03fcc 	andi	r3,r2,255
   246d4:	e0bfff17 	ldw	r2,-4(fp)
   246d8:	10c00015 	stw	r3,0(r2)
      rc = 0;
   246dc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   246e0:	00000306 	br	246f0 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
   246e4:	00000306 	br	246f4 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   246e8:	0001883a 	nop
   246ec:	00000106 	br	246f4 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   246f0:	0001883a 	nop

  default:
    break;
  }

  return rc;
   246f4:	e0bffb17 	ldw	r2,-20(fp)
}
   246f8:	e037883a 	mov	sp,fp
   246fc:	df000017 	ldw	fp,0(sp)
   24700:	dec00104 	addi	sp,sp,4
   24704:	f800283a 	ret

00024708 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   24708:	defff304 	addi	sp,sp,-52
   2470c:	dfc00c15 	stw	ra,48(sp)
   24710:	df000b15 	stw	fp,44(sp)
   24714:	df000b04 	addi	fp,sp,44
   24718:	e13ffc15 	stw	r4,-16(fp)
   2471c:	e17ffd15 	stw	r5,-12(fp)
   24720:	e1bffe15 	stw	r6,-8(fp)
   24724:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   24728:	e0bffd17 	ldw	r2,-12(fp)
   2472c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   24730:	00004706 	br	24850 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   24734:	e0bffc17 	ldw	r2,-16(fp)
   24738:	10800a17 	ldw	r2,40(r2)
   2473c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   24740:	e0bffc17 	ldw	r2,-16(fp)
   24744:	10800b17 	ldw	r2,44(r2)
   24748:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   2474c:	e0fff717 	ldw	r3,-36(fp)
   24750:	e0bff817 	ldw	r2,-32(fp)
   24754:	18800536 	bltu	r3,r2,2476c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   24758:	e0fff717 	ldw	r3,-36(fp)
   2475c:	e0bff817 	ldw	r2,-32(fp)
   24760:	1885c83a 	sub	r2,r3,r2
   24764:	e0bff615 	stw	r2,-40(fp)
   24768:	00000406 	br	2477c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   2476c:	00c20004 	movi	r3,2048
   24770:	e0bff817 	ldw	r2,-32(fp)
   24774:	1885c83a 	sub	r2,r3,r2
   24778:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   2477c:	e0bff617 	ldw	r2,-40(fp)
   24780:	10001e26 	beq	r2,zero,247fc <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   24784:	e0fffe17 	ldw	r3,-8(fp)
   24788:	e0bff617 	ldw	r2,-40(fp)
   2478c:	1880022e 	bgeu	r3,r2,24798 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   24790:	e0bffe17 	ldw	r2,-8(fp)
   24794:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   24798:	e0bff817 	ldw	r2,-32(fp)
   2479c:	10800e04 	addi	r2,r2,56
   247a0:	e0fffc17 	ldw	r3,-16(fp)
   247a4:	1885883a 	add	r2,r3,r2
   247a8:	e13ff517 	ldw	r4,-44(fp)
   247ac:	100b883a 	mov	r5,r2
   247b0:	e1bff617 	ldw	r6,-40(fp)
   247b4:	002149c0 	call	2149c <memcpy>
      ptr   += n;
   247b8:	e0fff517 	ldw	r3,-44(fp)
   247bc:	e0bff617 	ldw	r2,-40(fp)
   247c0:	1885883a 	add	r2,r3,r2
   247c4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   247c8:	e0fffe17 	ldw	r3,-8(fp)
   247cc:	e0bff617 	ldw	r2,-40(fp)
   247d0:	1885c83a 	sub	r2,r3,r2
   247d4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   247d8:	e0fff817 	ldw	r3,-32(fp)
   247dc:	e0bff617 	ldw	r2,-40(fp)
   247e0:	1885883a 	add	r2,r3,r2
   247e4:	10c1ffcc 	andi	r3,r2,2047
   247e8:	e0bffc17 	ldw	r2,-16(fp)
   247ec:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   247f0:	e0bffe17 	ldw	r2,-8(fp)
   247f4:	00bfcf16 	blt	zero,r2,24734 <altera_avalon_jtag_uart_read+0x2c>
   247f8:	00000106 	br	24800 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   247fc:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   24800:	e0fff517 	ldw	r3,-44(fp)
   24804:	e0bffd17 	ldw	r2,-12(fp)
   24808:	1880141e 	bne	r3,r2,2485c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   2480c:	e0bfff17 	ldw	r2,-4(fp)
   24810:	1090000c 	andi	r2,r2,16384
   24814:	1000131e 	bne	r2,zero,24864 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   24818:	0001883a 	nop
   2481c:	e0bffc17 	ldw	r2,-16(fp)
   24820:	10c00a17 	ldw	r3,40(r2)
   24824:	e0bff717 	ldw	r2,-36(fp)
   24828:	1880051e 	bne	r3,r2,24840 <altera_avalon_jtag_uart_read+0x138>
   2482c:	e0bffc17 	ldw	r2,-16(fp)
   24830:	10c00917 	ldw	r3,36(r2)
   24834:	e0bffc17 	ldw	r2,-16(fp)
   24838:	10800117 	ldw	r2,4(r2)
   2483c:	18bff736 	bltu	r3,r2,2481c <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   24840:	e0bffc17 	ldw	r2,-16(fp)
   24844:	10c00a17 	ldw	r3,40(r2)
   24848:	e0bff717 	ldw	r2,-36(fp)
   2484c:	18800726 	beq	r3,r2,2486c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   24850:	e0bffe17 	ldw	r2,-8(fp)
   24854:	00bfb716 	blt	zero,r2,24734 <altera_avalon_jtag_uart_read+0x2c>
   24858:	00000506 	br	24870 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   2485c:	0001883a 	nop
   24860:	00000306 	br	24870 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   24864:	0001883a 	nop
   24868:	00000106 	br	24870 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   2486c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   24870:	e0fff517 	ldw	r3,-44(fp)
   24874:	e0bffd17 	ldw	r2,-12(fp)
   24878:	18801726 	beq	r3,r2,248d8 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2487c:	0005303a 	rdctl	r2,status
   24880:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24884:	e0fffa17 	ldw	r3,-24(fp)
   24888:	00bfff84 	movi	r2,-2
   2488c:	1884703a 	and	r2,r3,r2
   24890:	1001703a 	wrctl	status,r2
  
  return context;
   24894:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   24898:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2489c:	e0bffc17 	ldw	r2,-16(fp)
   248a0:	10800817 	ldw	r2,32(r2)
   248a4:	10c00054 	ori	r3,r2,1
   248a8:	e0bffc17 	ldw	r2,-16(fp)
   248ac:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   248b0:	e0bffc17 	ldw	r2,-16(fp)
   248b4:	10800017 	ldw	r2,0(r2)
   248b8:	10800104 	addi	r2,r2,4
   248bc:	e0fffc17 	ldw	r3,-16(fp)
   248c0:	18c00817 	ldw	r3,32(r3)
   248c4:	10c00035 	stwio	r3,0(r2)
   248c8:	e0bff917 	ldw	r2,-28(fp)
   248cc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   248d0:	e0bffb17 	ldw	r2,-20(fp)
   248d4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   248d8:	e0fff517 	ldw	r3,-44(fp)
   248dc:	e0bffd17 	ldw	r2,-12(fp)
   248e0:	18800426 	beq	r3,r2,248f4 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
   248e4:	e0fff517 	ldw	r3,-44(fp)
   248e8:	e0bffd17 	ldw	r2,-12(fp)
   248ec:	1885c83a 	sub	r2,r3,r2
   248f0:	00000606 	br	2490c <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
   248f4:	e0bfff17 	ldw	r2,-4(fp)
   248f8:	1090000c 	andi	r2,r2,16384
   248fc:	10000226 	beq	r2,zero,24908 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
   24900:	00bffd44 	movi	r2,-11
   24904:	00000106 	br	2490c <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
   24908:	00bffec4 	movi	r2,-5
}
   2490c:	e037883a 	mov	sp,fp
   24910:	dfc00117 	ldw	ra,4(sp)
   24914:	df000017 	ldw	fp,0(sp)
   24918:	dec00204 	addi	sp,sp,8
   2491c:	f800283a 	ret

00024920 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   24920:	defff304 	addi	sp,sp,-52
   24924:	dfc00c15 	stw	ra,48(sp)
   24928:	df000b15 	stw	fp,44(sp)
   2492c:	df000b04 	addi	fp,sp,44
   24930:	e13ffc15 	stw	r4,-16(fp)
   24934:	e17ffd15 	stw	r5,-12(fp)
   24938:	e1bffe15 	stw	r6,-8(fp)
   2493c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   24940:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   24944:	e0bffd17 	ldw	r2,-12(fp)
   24948:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   2494c:	00003706 	br	24a2c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   24950:	e0bffc17 	ldw	r2,-16(fp)
   24954:	10800c17 	ldw	r2,48(r2)
   24958:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   2495c:	e0bffc17 	ldw	r2,-16(fp)
   24960:	10800d17 	ldw	r2,52(r2)
   24964:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   24968:	e0fff817 	ldw	r3,-32(fp)
   2496c:	e0bff517 	ldw	r2,-44(fp)
   24970:	1880062e 	bgeu	r3,r2,2498c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   24974:	e0fff517 	ldw	r3,-44(fp)
   24978:	e0bff817 	ldw	r2,-32(fp)
   2497c:	1885c83a 	sub	r2,r3,r2
   24980:	10bfffc4 	addi	r2,r2,-1
   24984:	e0bff615 	stw	r2,-40(fp)
   24988:	00000b06 	br	249b8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   2498c:	e0bff517 	ldw	r2,-44(fp)
   24990:	10000526 	beq	r2,zero,249a8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   24994:	00c20004 	movi	r3,2048
   24998:	e0bff817 	ldw	r2,-32(fp)
   2499c:	1885c83a 	sub	r2,r3,r2
   249a0:	e0bff615 	stw	r2,-40(fp)
   249a4:	00000406 	br	249b8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   249a8:	00c1ffc4 	movi	r3,2047
   249ac:	e0bff817 	ldw	r2,-32(fp)
   249b0:	1885c83a 	sub	r2,r3,r2
   249b4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   249b8:	e0bff617 	ldw	r2,-40(fp)
   249bc:	10001e26 	beq	r2,zero,24a38 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   249c0:	e0fffe17 	ldw	r3,-8(fp)
   249c4:	e0bff617 	ldw	r2,-40(fp)
   249c8:	1880022e 	bgeu	r3,r2,249d4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   249cc:	e0bffe17 	ldw	r2,-8(fp)
   249d0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   249d4:	e0bff817 	ldw	r2,-32(fp)
   249d8:	10820e04 	addi	r2,r2,2104
   249dc:	e0fffc17 	ldw	r3,-16(fp)
   249e0:	1885883a 	add	r2,r3,r2
   249e4:	1009883a 	mov	r4,r2
   249e8:	e17ffd17 	ldw	r5,-12(fp)
   249ec:	e1bff617 	ldw	r6,-40(fp)
   249f0:	002149c0 	call	2149c <memcpy>
      ptr   += n;
   249f4:	e0fffd17 	ldw	r3,-12(fp)
   249f8:	e0bff617 	ldw	r2,-40(fp)
   249fc:	1885883a 	add	r2,r3,r2
   24a00:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   24a04:	e0fffe17 	ldw	r3,-8(fp)
   24a08:	e0bff617 	ldw	r2,-40(fp)
   24a0c:	1885c83a 	sub	r2,r3,r2
   24a10:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   24a14:	e0fff817 	ldw	r3,-32(fp)
   24a18:	e0bff617 	ldw	r2,-40(fp)
   24a1c:	1885883a 	add	r2,r3,r2
   24a20:	10c1ffcc 	andi	r3,r2,2047
   24a24:	e0bffc17 	ldw	r2,-16(fp)
   24a28:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   24a2c:	e0bffe17 	ldw	r2,-8(fp)
   24a30:	00bfc716 	blt	zero,r2,24950 <altera_avalon_jtag_uart_write+0x30>
   24a34:	00000106 	br	24a3c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   24a38:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24a3c:	0005303a 	rdctl	r2,status
   24a40:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24a44:	e0fffa17 	ldw	r3,-24(fp)
   24a48:	00bfff84 	movi	r2,-2
   24a4c:	1884703a 	and	r2,r3,r2
   24a50:	1001703a 	wrctl	status,r2
  
  return context;
   24a54:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   24a58:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   24a5c:	e0bffc17 	ldw	r2,-16(fp)
   24a60:	10800817 	ldw	r2,32(r2)
   24a64:	10c00094 	ori	r3,r2,2
   24a68:	e0bffc17 	ldw	r2,-16(fp)
   24a6c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   24a70:	e0bffc17 	ldw	r2,-16(fp)
   24a74:	10800017 	ldw	r2,0(r2)
   24a78:	10800104 	addi	r2,r2,4
   24a7c:	e0fffc17 	ldw	r3,-16(fp)
   24a80:	18c00817 	ldw	r3,32(r3)
   24a84:	10c00035 	stwio	r3,0(r2)
   24a88:	e0bff917 	ldw	r2,-28(fp)
   24a8c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24a90:	e0bffb17 	ldw	r2,-20(fp)
   24a94:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   24a98:	e0bffe17 	ldw	r2,-8(fp)
   24a9c:	0080110e 	bge	zero,r2,24ae4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   24aa0:	e0bfff17 	ldw	r2,-4(fp)
   24aa4:	1090000c 	andi	r2,r2,16384
   24aa8:	1000111e 	bne	r2,zero,24af0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   24aac:	0001883a 	nop
   24ab0:	e0bffc17 	ldw	r2,-16(fp)
   24ab4:	10c00d17 	ldw	r3,52(r2)
   24ab8:	e0bff517 	ldw	r2,-44(fp)
   24abc:	1880051e 	bne	r3,r2,24ad4 <altera_avalon_jtag_uart_write+0x1b4>
   24ac0:	e0bffc17 	ldw	r2,-16(fp)
   24ac4:	10c00917 	ldw	r3,36(r2)
   24ac8:	e0bffc17 	ldw	r2,-16(fp)
   24acc:	10800117 	ldw	r2,4(r2)
   24ad0:	18bff736 	bltu	r3,r2,24ab0 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   24ad4:	e0bffc17 	ldw	r2,-16(fp)
   24ad8:	10c00d17 	ldw	r3,52(r2)
   24adc:	e0bff517 	ldw	r2,-44(fp)
   24ae0:	18800526 	beq	r3,r2,24af8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   24ae4:	e0bffe17 	ldw	r2,-8(fp)
   24ae8:	00bfd016 	blt	zero,r2,24a2c <altera_avalon_jtag_uart_write+0x10c>
   24aec:	00000306 	br	24afc <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   24af0:	0001883a 	nop
   24af4:	00000106 	br	24afc <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
   24af8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   24afc:	e0fffd17 	ldw	r3,-12(fp)
   24b00:	e0bff717 	ldw	r2,-36(fp)
   24b04:	18800426 	beq	r3,r2,24b18 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   24b08:	e0fffd17 	ldw	r3,-12(fp)
   24b0c:	e0bff717 	ldw	r2,-36(fp)
   24b10:	1885c83a 	sub	r2,r3,r2
   24b14:	00000606 	br	24b30 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   24b18:	e0bfff17 	ldw	r2,-4(fp)
   24b1c:	1090000c 	andi	r2,r2,16384
   24b20:	10000226 	beq	r2,zero,24b2c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   24b24:	00bffd44 	movi	r2,-11
   24b28:	00000106 	br	24b30 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   24b2c:	00bffec4 	movi	r2,-5
}
   24b30:	e037883a 	mov	sp,fp
   24b34:	dfc00117 	ldw	ra,4(sp)
   24b38:	df000017 	ldw	fp,0(sp)
   24b3c:	dec00204 	addi	sp,sp,8
   24b40:	f800283a 	ret

00024b44 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   24b44:	defffa04 	addi	sp,sp,-24
   24b48:	dfc00515 	stw	ra,20(sp)
   24b4c:	df000415 	stw	fp,16(sp)
   24b50:	df000404 	addi	fp,sp,16
   24b54:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   24b58:	0007883a 	mov	r3,zero
   24b5c:	e0bfff17 	ldw	r2,-4(fp)
   24b60:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   24b64:	e0bfff17 	ldw	r2,-4(fp)
   24b68:	10800104 	addi	r2,r2,4
   24b6c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24b70:	0005303a 	rdctl	r2,status
   24b74:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24b78:	e0fffd17 	ldw	r3,-12(fp)
   24b7c:	00bfff84 	movi	r2,-2
   24b80:	1884703a 	and	r2,r3,r2
   24b84:	1001703a 	wrctl	status,r2
  
  return context;
   24b88:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   24b8c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   24b90:	00256b00 	call	256b0 <alt_tick>
   24b94:	e0bffc17 	ldw	r2,-16(fp)
   24b98:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24b9c:	e0bffe17 	ldw	r2,-8(fp)
   24ba0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   24ba4:	e037883a 	mov	sp,fp
   24ba8:	dfc00117 	ldw	ra,4(sp)
   24bac:	df000017 	ldw	fp,0(sp)
   24bb0:	dec00204 	addi	sp,sp,8
   24bb4:	f800283a 	ret

00024bb8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   24bb8:	defff804 	addi	sp,sp,-32
   24bbc:	dfc00715 	stw	ra,28(sp)
   24bc0:	df000615 	stw	fp,24(sp)
   24bc4:	df000604 	addi	fp,sp,24
   24bc8:	e13ffc15 	stw	r4,-16(fp)
   24bcc:	e17ffd15 	stw	r5,-12(fp)
   24bd0:	e1bffe15 	stw	r6,-8(fp)
   24bd4:	e1ffff15 	stw	r7,-4(fp)
   24bd8:	e0bfff17 	ldw	r2,-4(fp)
   24bdc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   24be0:	008000f4 	movhi	r2,3
   24be4:	10a4cc04 	addi	r2,r2,-27856
   24be8:	10800017 	ldw	r2,0(r2)
   24bec:	1000041e 	bne	r2,zero,24c00 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   24bf0:	008000f4 	movhi	r2,3
   24bf4:	10a4cc04 	addi	r2,r2,-27856
   24bf8:	e0fffb17 	ldw	r3,-20(fp)
   24bfc:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   24c00:	e0bffc17 	ldw	r2,-16(fp)
   24c04:	10800104 	addi	r2,r2,4
   24c08:	00c001c4 	movi	r3,7
   24c0c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   24c10:	d8000015 	stw	zero,0(sp)
   24c14:	e13ffd17 	ldw	r4,-12(fp)
   24c18:	e17ffe17 	ldw	r5,-8(fp)
   24c1c:	018000b4 	movhi	r6,2
   24c20:	3192d104 	addi	r6,r6,19268
   24c24:	e1fffc17 	ldw	r7,-16(fp)
   24c28:	0024f600 	call	24f60 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   24c2c:	e037883a 	mov	sp,fp
   24c30:	dfc00117 	ldw	ra,4(sp)
   24c34:	df000017 	ldw	fp,0(sp)
   24c38:	dec00204 	addi	sp,sp,8
   24c3c:	f800283a 	ret

00024c40 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   24c40:	defff504 	addi	sp,sp,-44
   24c44:	df000a15 	stw	fp,40(sp)
   24c48:	df000a04 	addi	fp,sp,40
   24c4c:	e13ffc15 	stw	r4,-16(fp)
   24c50:	e17ffd15 	stw	r5,-12(fp)
   24c54:	e1bffe15 	stw	r6,-8(fp)
   24c58:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   24c5c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   24c60:	008000f4 	movhi	r2,3
   24c64:	10a4cc04 	addi	r2,r2,-27856
   24c68:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   24c6c:	10003f26 	beq	r2,zero,24d6c <alt_alarm_start+0x12c>
  {
    if (alarm)
   24c70:	e0bffc17 	ldw	r2,-16(fp)
   24c74:	10003b26 	beq	r2,zero,24d64 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   24c78:	e0bffc17 	ldw	r2,-16(fp)
   24c7c:	e0fffe17 	ldw	r3,-8(fp)
   24c80:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   24c84:	e0bffc17 	ldw	r2,-16(fp)
   24c88:	e0ffff17 	ldw	r3,-4(fp)
   24c8c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24c90:	0005303a 	rdctl	r2,status
   24c94:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24c98:	e0fff817 	ldw	r3,-32(fp)
   24c9c:	00bfff84 	movi	r2,-2
   24ca0:	1884703a 	and	r2,r3,r2
   24ca4:	1001703a 	wrctl	status,r2
  
  return context;
   24ca8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   24cac:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   24cb0:	008000f4 	movhi	r2,3
   24cb4:	10a4cd04 	addi	r2,r2,-27852
   24cb8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   24cbc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   24cc0:	e0fffd17 	ldw	r3,-12(fp)
   24cc4:	e0bff617 	ldw	r2,-40(fp)
   24cc8:	1885883a 	add	r2,r3,r2
   24ccc:	10c00044 	addi	r3,r2,1
   24cd0:	e0bffc17 	ldw	r2,-16(fp)
   24cd4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   24cd8:	e0bffc17 	ldw	r2,-16(fp)
   24cdc:	10c00217 	ldw	r3,8(r2)
   24ce0:	e0bff617 	ldw	r2,-40(fp)
   24ce4:	1880042e 	bgeu	r3,r2,24cf8 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   24ce8:	e0bffc17 	ldw	r2,-16(fp)
   24cec:	00c00044 	movi	r3,1
   24cf0:	10c00405 	stb	r3,16(r2)
   24cf4:	00000206 	br	24d00 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   24cf8:	e0bffc17 	ldw	r2,-16(fp)
   24cfc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   24d00:	e0bffc17 	ldw	r2,-16(fp)
   24d04:	00c000b4 	movhi	r3,2
   24d08:	18de3004 	addi	r3,r3,30912
   24d0c:	e0fff915 	stw	r3,-28(fp)
   24d10:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   24d14:	e0bffa17 	ldw	r2,-24(fp)
   24d18:	e0fff917 	ldw	r3,-28(fp)
   24d1c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   24d20:	e0bff917 	ldw	r2,-28(fp)
   24d24:	10c00017 	ldw	r3,0(r2)
   24d28:	e0bffa17 	ldw	r2,-24(fp)
   24d2c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   24d30:	e0bff917 	ldw	r2,-28(fp)
   24d34:	10800017 	ldw	r2,0(r2)
   24d38:	e0fffa17 	ldw	r3,-24(fp)
   24d3c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   24d40:	e0bff917 	ldw	r2,-28(fp)
   24d44:	e0fffa17 	ldw	r3,-24(fp)
   24d48:	10c00015 	stw	r3,0(r2)
   24d4c:	e0bff717 	ldw	r2,-36(fp)
   24d50:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24d54:	e0bffb17 	ldw	r2,-20(fp)
   24d58:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   24d5c:	0005883a 	mov	r2,zero
   24d60:	00000306 	br	24d70 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   24d64:	00bffa84 	movi	r2,-22
   24d68:	00000106 	br	24d70 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   24d6c:	00bfde84 	movi	r2,-134
  }
}
   24d70:	e037883a 	mov	sp,fp
   24d74:	df000017 	ldw	fp,0(sp)
   24d78:	dec00104 	addi	sp,sp,4
   24d7c:	f800283a 	ret

00024d80 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   24d80:	deffff04 	addi	sp,sp,-4
   24d84:	df000015 	stw	fp,0(sp)
   24d88:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   24d8c:	e037883a 	mov	sp,fp
   24d90:	df000017 	ldw	fp,0(sp)
   24d94:	dec00104 	addi	sp,sp,4
   24d98:	f800283a 	ret

00024d9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   24d9c:	defffe04 	addi	sp,sp,-8
   24da0:	dfc00115 	stw	ra,4(sp)
   24da4:	df000015 	stw	fp,0(sp)
   24da8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   24dac:	008000b4 	movhi	r2,2
   24db0:	109e2d04 	addi	r2,r2,30900
   24db4:	10800017 	ldw	r2,0(r2)
   24db8:	10000526 	beq	r2,zero,24dd0 <alt_get_errno+0x34>
   24dbc:	008000b4 	movhi	r2,2
   24dc0:	109e2d04 	addi	r2,r2,30900
   24dc4:	10800017 	ldw	r2,0(r2)
   24dc8:	103ee83a 	callr	r2
   24dcc:	00000206 	br	24dd8 <alt_get_errno+0x3c>
   24dd0:	008000f4 	movhi	r2,3
   24dd4:	10a4c704 	addi	r2,r2,-27876
}
   24dd8:	e037883a 	mov	sp,fp
   24ddc:	dfc00117 	ldw	ra,4(sp)
   24de0:	df000017 	ldw	fp,0(sp)
   24de4:	dec00204 	addi	sp,sp,8
   24de8:	f800283a 	ret

00024dec <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   24dec:	defffa04 	addi	sp,sp,-24
   24df0:	dfc00515 	stw	ra,20(sp)
   24df4:	df000415 	stw	fp,16(sp)
   24df8:	df000404 	addi	fp,sp,16
   24dfc:	e13ffe15 	stw	r4,-8(fp)
   24e00:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   24e04:	e0bffe17 	ldw	r2,-8(fp)
   24e08:	10000326 	beq	r2,zero,24e18 <alt_dev_llist_insert+0x2c>
   24e0c:	e0bffe17 	ldw	r2,-8(fp)
   24e10:	10800217 	ldw	r2,8(r2)
   24e14:	1000051e 	bne	r2,zero,24e2c <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   24e18:	0024d9c0 	call	24d9c <alt_get_errno>
   24e1c:	00c00584 	movi	r3,22
   24e20:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   24e24:	00bffa84 	movi	r2,-22
   24e28:	00001306 	br	24e78 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   24e2c:	e0bffe17 	ldw	r2,-8(fp)
   24e30:	e0ffff17 	ldw	r3,-4(fp)
   24e34:	e0fffc15 	stw	r3,-16(fp)
   24e38:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   24e3c:	e0bffd17 	ldw	r2,-12(fp)
   24e40:	e0fffc17 	ldw	r3,-16(fp)
   24e44:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   24e48:	e0bffc17 	ldw	r2,-16(fp)
   24e4c:	10c00017 	ldw	r3,0(r2)
   24e50:	e0bffd17 	ldw	r2,-12(fp)
   24e54:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   24e58:	e0bffc17 	ldw	r2,-16(fp)
   24e5c:	10800017 	ldw	r2,0(r2)
   24e60:	e0fffd17 	ldw	r3,-12(fp)
   24e64:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   24e68:	e0bffc17 	ldw	r2,-16(fp)
   24e6c:	e0fffd17 	ldw	r3,-12(fp)
   24e70:	10c00015 	stw	r3,0(r2)

  return 0;  
   24e74:	0005883a 	mov	r2,zero
}
   24e78:	e037883a 	mov	sp,fp
   24e7c:	dfc00117 	ldw	ra,4(sp)
   24e80:	df000017 	ldw	fp,0(sp)
   24e84:	dec00204 	addi	sp,sp,8
   24e88:	f800283a 	ret

00024e8c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   24e8c:	defffd04 	addi	sp,sp,-12
   24e90:	dfc00215 	stw	ra,8(sp)
   24e94:	df000115 	stw	fp,4(sp)
   24e98:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   24e9c:	008000b4 	movhi	r2,2
   24ea0:	10978704 	addi	r2,r2,24092
   24ea4:	e0bfff15 	stw	r2,-4(fp)
   24ea8:	00000606 	br	24ec4 <_do_ctors+0x38>
        (*ctor) (); 
   24eac:	e0bfff17 	ldw	r2,-4(fp)
   24eb0:	10800017 	ldw	r2,0(r2)
   24eb4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   24eb8:	e0bfff17 	ldw	r2,-4(fp)
   24ebc:	10bfff04 	addi	r2,r2,-4
   24ec0:	e0bfff15 	stw	r2,-4(fp)
   24ec4:	e0ffff17 	ldw	r3,-4(fp)
   24ec8:	008000b4 	movhi	r2,2
   24ecc:	10978804 	addi	r2,r2,24096
   24ed0:	18bff62e 	bgeu	r3,r2,24eac <_do_ctors+0x20>
        (*ctor) (); 
}
   24ed4:	e037883a 	mov	sp,fp
   24ed8:	dfc00117 	ldw	ra,4(sp)
   24edc:	df000017 	ldw	fp,0(sp)
   24ee0:	dec00204 	addi	sp,sp,8
   24ee4:	f800283a 	ret

00024ee8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   24ee8:	defffd04 	addi	sp,sp,-12
   24eec:	dfc00215 	stw	ra,8(sp)
   24ef0:	df000115 	stw	fp,4(sp)
   24ef4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   24ef8:	008000b4 	movhi	r2,2
   24efc:	10978704 	addi	r2,r2,24092
   24f00:	e0bfff15 	stw	r2,-4(fp)
   24f04:	00000606 	br	24f20 <_do_dtors+0x38>
        (*dtor) (); 
   24f08:	e0bfff17 	ldw	r2,-4(fp)
   24f0c:	10800017 	ldw	r2,0(r2)
   24f10:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   24f14:	e0bfff17 	ldw	r2,-4(fp)
   24f18:	10bfff04 	addi	r2,r2,-4
   24f1c:	e0bfff15 	stw	r2,-4(fp)
   24f20:	e0ffff17 	ldw	r3,-4(fp)
   24f24:	008000b4 	movhi	r2,2
   24f28:	10978804 	addi	r2,r2,24096
   24f2c:	18bff62e 	bgeu	r3,r2,24f08 <_do_dtors+0x20>
        (*dtor) (); 
}
   24f30:	e037883a 	mov	sp,fp
   24f34:	dfc00117 	ldw	ra,4(sp)
   24f38:	df000017 	ldw	fp,0(sp)
   24f3c:	dec00204 	addi	sp,sp,8
   24f40:	f800283a 	ret

00024f44 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   24f44:	deffff04 	addi	sp,sp,-4
   24f48:	df000015 	stw	fp,0(sp)
   24f4c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   24f50:	e037883a 	mov	sp,fp
   24f54:	df000017 	ldw	fp,0(sp)
   24f58:	dec00104 	addi	sp,sp,4
   24f5c:	f800283a 	ret

00024f60 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   24f60:	defff904 	addi	sp,sp,-28
   24f64:	dfc00615 	stw	ra,24(sp)
   24f68:	df000515 	stw	fp,20(sp)
   24f6c:	df000504 	addi	fp,sp,20
   24f70:	e13ffc15 	stw	r4,-16(fp)
   24f74:	e17ffd15 	stw	r5,-12(fp)
   24f78:	e1bffe15 	stw	r6,-8(fp)
   24f7c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   24f80:	e0800217 	ldw	r2,8(fp)
   24f84:	d8800015 	stw	r2,0(sp)
   24f88:	e13ffc17 	ldw	r4,-16(fp)
   24f8c:	e17ffd17 	ldw	r5,-12(fp)
   24f90:	e1bffe17 	ldw	r6,-8(fp)
   24f94:	e1ffff17 	ldw	r7,-4(fp)
   24f98:	00251380 	call	25138 <alt_iic_isr_register>
}  
   24f9c:	e037883a 	mov	sp,fp
   24fa0:	dfc00117 	ldw	ra,4(sp)
   24fa4:	df000017 	ldw	fp,0(sp)
   24fa8:	dec00204 	addi	sp,sp,8
   24fac:	f800283a 	ret

00024fb0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   24fb0:	defff904 	addi	sp,sp,-28
   24fb4:	df000615 	stw	fp,24(sp)
   24fb8:	df000604 	addi	fp,sp,24
   24fbc:	e13ffe15 	stw	r4,-8(fp)
   24fc0:	e17fff15 	stw	r5,-4(fp)
   24fc4:	e0bfff17 	ldw	r2,-4(fp)
   24fc8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24fcc:	0005303a 	rdctl	r2,status
   24fd0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24fd4:	e0fffb17 	ldw	r3,-20(fp)
   24fd8:	00bfff84 	movi	r2,-2
   24fdc:	1884703a 	and	r2,r3,r2
   24fe0:	1001703a 	wrctl	status,r2
  
  return context;
   24fe4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   24fe8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   24fec:	e0bffa17 	ldw	r2,-24(fp)
   24ff0:	00c00044 	movi	r3,1
   24ff4:	1884983a 	sll	r2,r3,r2
   24ff8:	1007883a 	mov	r3,r2
   24ffc:	008000f4 	movhi	r2,3
   25000:	10a4cb04 	addi	r2,r2,-27860
   25004:	10800017 	ldw	r2,0(r2)
   25008:	1886b03a 	or	r3,r3,r2
   2500c:	008000f4 	movhi	r2,3
   25010:	10a4cb04 	addi	r2,r2,-27860
   25014:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   25018:	008000f4 	movhi	r2,3
   2501c:	10a4cb04 	addi	r2,r2,-27860
   25020:	10800017 	ldw	r2,0(r2)
   25024:	100170fa 	wrctl	ienable,r2
   25028:	e0bffc17 	ldw	r2,-16(fp)
   2502c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   25030:	e0bffd17 	ldw	r2,-12(fp)
   25034:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   25038:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   2503c:	e037883a 	mov	sp,fp
   25040:	df000017 	ldw	fp,0(sp)
   25044:	dec00104 	addi	sp,sp,4
   25048:	f800283a 	ret

0002504c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   2504c:	defff904 	addi	sp,sp,-28
   25050:	df000615 	stw	fp,24(sp)
   25054:	df000604 	addi	fp,sp,24
   25058:	e13ffe15 	stw	r4,-8(fp)
   2505c:	e17fff15 	stw	r5,-4(fp)
   25060:	e0bfff17 	ldw	r2,-4(fp)
   25064:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   25068:	0005303a 	rdctl	r2,status
   2506c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   25070:	e0fffb17 	ldw	r3,-20(fp)
   25074:	00bfff84 	movi	r2,-2
   25078:	1884703a 	and	r2,r3,r2
   2507c:	1001703a 	wrctl	status,r2
  
  return context;
   25080:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   25084:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   25088:	e0bffa17 	ldw	r2,-24(fp)
   2508c:	00c00044 	movi	r3,1
   25090:	1884983a 	sll	r2,r3,r2
   25094:	0084303a 	nor	r2,zero,r2
   25098:	1007883a 	mov	r3,r2
   2509c:	008000f4 	movhi	r2,3
   250a0:	10a4cb04 	addi	r2,r2,-27860
   250a4:	10800017 	ldw	r2,0(r2)
   250a8:	1886703a 	and	r3,r3,r2
   250ac:	008000f4 	movhi	r2,3
   250b0:	10a4cb04 	addi	r2,r2,-27860
   250b4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   250b8:	008000f4 	movhi	r2,3
   250bc:	10a4cb04 	addi	r2,r2,-27860
   250c0:	10800017 	ldw	r2,0(r2)
   250c4:	100170fa 	wrctl	ienable,r2
   250c8:	e0bffc17 	ldw	r2,-16(fp)
   250cc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   250d0:	e0bffd17 	ldw	r2,-12(fp)
   250d4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   250d8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   250dc:	e037883a 	mov	sp,fp
   250e0:	df000017 	ldw	fp,0(sp)
   250e4:	dec00104 	addi	sp,sp,4
   250e8:	f800283a 	ret

000250ec <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   250ec:	defffc04 	addi	sp,sp,-16
   250f0:	df000315 	stw	fp,12(sp)
   250f4:	df000304 	addi	fp,sp,12
   250f8:	e13ffe15 	stw	r4,-8(fp)
   250fc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   25100:	000530fa 	rdctl	r2,ienable
   25104:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   25108:	e0bfff17 	ldw	r2,-4(fp)
   2510c:	00c00044 	movi	r3,1
   25110:	1884983a 	sll	r2,r3,r2
   25114:	1007883a 	mov	r3,r2
   25118:	e0bffd17 	ldw	r2,-12(fp)
   2511c:	1884703a 	and	r2,r3,r2
   25120:	1004c03a 	cmpne	r2,r2,zero
   25124:	10803fcc 	andi	r2,r2,255
}
   25128:	e037883a 	mov	sp,fp
   2512c:	df000017 	ldw	fp,0(sp)
   25130:	dec00104 	addi	sp,sp,4
   25134:	f800283a 	ret

00025138 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   25138:	defff504 	addi	sp,sp,-44
   2513c:	dfc00a15 	stw	ra,40(sp)
   25140:	df000915 	stw	fp,36(sp)
   25144:	df000904 	addi	fp,sp,36
   25148:	e13ffc15 	stw	r4,-16(fp)
   2514c:	e17ffd15 	stw	r5,-12(fp)
   25150:	e1bffe15 	stw	r6,-8(fp)
   25154:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   25158:	00bffa84 	movi	r2,-22
   2515c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   25160:	e0bffd17 	ldw	r2,-12(fp)
   25164:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   25168:	e0bff817 	ldw	r2,-32(fp)
   2516c:	10800808 	cmpgei	r2,r2,32
   25170:	1000271e 	bne	r2,zero,25210 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   25174:	0005303a 	rdctl	r2,status
   25178:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2517c:	e0fffa17 	ldw	r3,-24(fp)
   25180:	00bfff84 	movi	r2,-2
   25184:	1884703a 	and	r2,r3,r2
   25188:	1001703a 	wrctl	status,r2
  
  return context;
   2518c:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   25190:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   25194:	00c000f4 	movhi	r3,3
   25198:	18e4d804 	addi	r3,r3,-27808
   2519c:	e0bff817 	ldw	r2,-32(fp)
   251a0:	100490fa 	slli	r2,r2,3
   251a4:	1885883a 	add	r2,r3,r2
   251a8:	e0fffe17 	ldw	r3,-8(fp)
   251ac:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   251b0:	00c000f4 	movhi	r3,3
   251b4:	18e4d804 	addi	r3,r3,-27808
   251b8:	e0bff817 	ldw	r2,-32(fp)
   251bc:	100490fa 	slli	r2,r2,3
   251c0:	1885883a 	add	r2,r3,r2
   251c4:	10800104 	addi	r2,r2,4
   251c8:	e0ffff17 	ldw	r3,-4(fp)
   251cc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   251d0:	e0bffe17 	ldw	r2,-8(fp)
   251d4:	10000526 	beq	r2,zero,251ec <alt_iic_isr_register+0xb4>
   251d8:	e0bff817 	ldw	r2,-32(fp)
   251dc:	e13ffc17 	ldw	r4,-16(fp)
   251e0:	100b883a 	mov	r5,r2
   251e4:	0024fb00 	call	24fb0 <alt_ic_irq_enable>
   251e8:	00000406 	br	251fc <alt_iic_isr_register+0xc4>
   251ec:	e0bff817 	ldw	r2,-32(fp)
   251f0:	e13ffc17 	ldw	r4,-16(fp)
   251f4:	100b883a 	mov	r5,r2
   251f8:	002504c0 	call	2504c <alt_ic_irq_disable>
   251fc:	e0bff715 	stw	r2,-36(fp)
   25200:	e0bff917 	ldw	r2,-28(fp)
   25204:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   25208:	e0bffb17 	ldw	r2,-20(fp)
   2520c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   25210:	e0bff717 	ldw	r2,-36(fp)
}
   25214:	e037883a 	mov	sp,fp
   25218:	dfc00117 	ldw	ra,4(sp)
   2521c:	df000017 	ldw	fp,0(sp)
   25220:	dec00204 	addi	sp,sp,8
   25224:	f800283a 	ret

00025228 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   25228:	defff804 	addi	sp,sp,-32
   2522c:	dfc00715 	stw	ra,28(sp)
   25230:	df000615 	stw	fp,24(sp)
   25234:	dc000515 	stw	r16,20(sp)
   25238:	df000504 	addi	fp,sp,20
   2523c:	e13ffc15 	stw	r4,-16(fp)
   25240:	e17ffd15 	stw	r5,-12(fp)
   25244:	e1bffe15 	stw	r6,-8(fp)
   25248:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   2524c:	e13ffd17 	ldw	r4,-12(fp)
   25250:	e17ffe17 	ldw	r5,-8(fp)
   25254:	e1bfff17 	ldw	r6,-4(fp)
   25258:	00254c00 	call	254c0 <open>
   2525c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   25260:	e0bffb17 	ldw	r2,-20(fp)
   25264:	10002216 	blt	r2,zero,252f0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   25268:	040000b4 	movhi	r16,2
   2526c:	8419ac04 	addi	r16,r16,26288
   25270:	e0bffb17 	ldw	r2,-20(fp)
   25274:	1009883a 	mov	r4,r2
   25278:	01400304 	movi	r5,12
   2527c:	00231340 	call	23134 <__mulsi3>
   25280:	8085883a 	add	r2,r16,r2
   25284:	10c00017 	ldw	r3,0(r2)
   25288:	e0bffc17 	ldw	r2,-16(fp)
   2528c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   25290:	040000b4 	movhi	r16,2
   25294:	8419ac04 	addi	r16,r16,26288
   25298:	e0bffb17 	ldw	r2,-20(fp)
   2529c:	1009883a 	mov	r4,r2
   252a0:	01400304 	movi	r5,12
   252a4:	00231340 	call	23134 <__mulsi3>
   252a8:	8085883a 	add	r2,r16,r2
   252ac:	10800104 	addi	r2,r2,4
   252b0:	10c00017 	ldw	r3,0(r2)
   252b4:	e0bffc17 	ldw	r2,-16(fp)
   252b8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   252bc:	040000b4 	movhi	r16,2
   252c0:	8419ac04 	addi	r16,r16,26288
   252c4:	e0bffb17 	ldw	r2,-20(fp)
   252c8:	1009883a 	mov	r4,r2
   252cc:	01400304 	movi	r5,12
   252d0:	00231340 	call	23134 <__mulsi3>
   252d4:	8085883a 	add	r2,r16,r2
   252d8:	10800204 	addi	r2,r2,8
   252dc:	10c00017 	ldw	r3,0(r2)
   252e0:	e0bffc17 	ldw	r2,-16(fp)
   252e4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   252e8:	e13ffb17 	ldw	r4,-20(fp)
   252ec:	00238a40 	call	238a4 <alt_release_fd>
  }
} 
   252f0:	e037883a 	mov	sp,fp
   252f4:	dfc00217 	ldw	ra,8(sp)
   252f8:	df000117 	ldw	fp,4(sp)
   252fc:	dc000017 	ldw	r16,0(sp)
   25300:	dec00304 	addi	sp,sp,12
   25304:	f800283a 	ret

00025308 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   25308:	defffb04 	addi	sp,sp,-20
   2530c:	dfc00415 	stw	ra,16(sp)
   25310:	df000315 	stw	fp,12(sp)
   25314:	df000304 	addi	fp,sp,12
   25318:	e13ffd15 	stw	r4,-12(fp)
   2531c:	e17ffe15 	stw	r5,-8(fp)
   25320:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   25324:	010000b4 	movhi	r4,2
   25328:	2119af04 	addi	r4,r4,26300
   2532c:	e17ffd17 	ldw	r5,-12(fp)
   25330:	01800044 	movi	r6,1
   25334:	01c07fc4 	movi	r7,511
   25338:	00252280 	call	25228 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   2533c:	010000b4 	movhi	r4,2
   25340:	2119ac04 	addi	r4,r4,26288
   25344:	e17ffe17 	ldw	r5,-8(fp)
   25348:	000d883a 	mov	r6,zero
   2534c:	01c07fc4 	movi	r7,511
   25350:	00252280 	call	25228 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   25354:	010000b4 	movhi	r4,2
   25358:	2119b204 	addi	r4,r4,26312
   2535c:	e17fff17 	ldw	r5,-4(fp)
   25360:	01800044 	movi	r6,1
   25364:	01c07fc4 	movi	r7,511
   25368:	00252280 	call	25228 <alt_open_fd>
}  
   2536c:	e037883a 	mov	sp,fp
   25370:	dfc00117 	ldw	ra,4(sp)
   25374:	df000017 	ldw	fp,0(sp)
   25378:	dec00204 	addi	sp,sp,8
   2537c:	f800283a 	ret

00025380 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   25380:	defffe04 	addi	sp,sp,-8
   25384:	dfc00115 	stw	ra,4(sp)
   25388:	df000015 	stw	fp,0(sp)
   2538c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   25390:	008000b4 	movhi	r2,2
   25394:	109e2d04 	addi	r2,r2,30900
   25398:	10800017 	ldw	r2,0(r2)
   2539c:	10000526 	beq	r2,zero,253b4 <alt_get_errno+0x34>
   253a0:	008000b4 	movhi	r2,2
   253a4:	109e2d04 	addi	r2,r2,30900
   253a8:	10800017 	ldw	r2,0(r2)
   253ac:	103ee83a 	callr	r2
   253b0:	00000206 	br	253bc <alt_get_errno+0x3c>
   253b4:	008000f4 	movhi	r2,3
   253b8:	10a4c704 	addi	r2,r2,-27876
}
   253bc:	e037883a 	mov	sp,fp
   253c0:	dfc00117 	ldw	ra,4(sp)
   253c4:	df000017 	ldw	fp,0(sp)
   253c8:	dec00204 	addi	sp,sp,8
   253cc:	f800283a 	ret

000253d0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   253d0:	defffb04 	addi	sp,sp,-20
   253d4:	dfc00415 	stw	ra,16(sp)
   253d8:	df000315 	stw	fp,12(sp)
   253dc:	dc000215 	stw	r16,8(sp)
   253e0:	df000204 	addi	fp,sp,8
   253e4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   253e8:	e0bfff17 	ldw	r2,-4(fp)
   253ec:	10800217 	ldw	r2,8(r2)
   253f0:	10d00034 	orhi	r3,r2,16384
   253f4:	e0bfff17 	ldw	r2,-4(fp)
   253f8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   253fc:	e03ffe15 	stw	zero,-8(fp)
   25400:	00002206 	br	2548c <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   25404:	040000b4 	movhi	r16,2
   25408:	8419ac04 	addi	r16,r16,26288
   2540c:	e0bffe17 	ldw	r2,-8(fp)
   25410:	1009883a 	mov	r4,r2
   25414:	01400304 	movi	r5,12
   25418:	00231340 	call	23134 <__mulsi3>
   2541c:	8085883a 	add	r2,r16,r2
   25420:	10c00017 	ldw	r3,0(r2)
   25424:	e0bfff17 	ldw	r2,-4(fp)
   25428:	10800017 	ldw	r2,0(r2)
   2542c:	1880141e 	bne	r3,r2,25480 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   25430:	040000b4 	movhi	r16,2
   25434:	8419ac04 	addi	r16,r16,26288
   25438:	e0bffe17 	ldw	r2,-8(fp)
   2543c:	1009883a 	mov	r4,r2
   25440:	01400304 	movi	r5,12
   25444:	00231340 	call	23134 <__mulsi3>
   25448:	8085883a 	add	r2,r16,r2
   2544c:	10800204 	addi	r2,r2,8
   25450:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   25454:	10000a0e 	bge	r2,zero,25480 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   25458:	e13ffe17 	ldw	r4,-8(fp)
   2545c:	01400304 	movi	r5,12
   25460:	00231340 	call	23134 <__mulsi3>
   25464:	00c000b4 	movhi	r3,2
   25468:	18d9ac04 	addi	r3,r3,26288
   2546c:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   25470:	e0bfff17 	ldw	r2,-4(fp)
   25474:	18800226 	beq	r3,r2,25480 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   25478:	00bffcc4 	movi	r2,-13
   2547c:	00000a06 	br	254a8 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   25480:	e0bffe17 	ldw	r2,-8(fp)
   25484:	10800044 	addi	r2,r2,1
   25488:	e0bffe15 	stw	r2,-8(fp)
   2548c:	008000b4 	movhi	r2,2
   25490:	109e2c04 	addi	r2,r2,30896
   25494:	10800017 	ldw	r2,0(r2)
   25498:	1007883a 	mov	r3,r2
   2549c:	e0bffe17 	ldw	r2,-8(fp)
   254a0:	18bfd82e 	bgeu	r3,r2,25404 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   254a4:	0005883a 	mov	r2,zero
}
   254a8:	e037883a 	mov	sp,fp
   254ac:	dfc00217 	ldw	ra,8(sp)
   254b0:	df000117 	ldw	fp,4(sp)
   254b4:	dc000017 	ldw	r16,0(sp)
   254b8:	dec00304 	addi	sp,sp,12
   254bc:	f800283a 	ret

000254c0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   254c0:	defff604 	addi	sp,sp,-40
   254c4:	dfc00915 	stw	ra,36(sp)
   254c8:	df000815 	stw	fp,32(sp)
   254cc:	df000804 	addi	fp,sp,32
   254d0:	e13ffd15 	stw	r4,-12(fp)
   254d4:	e17ffe15 	stw	r5,-8(fp)
   254d8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   254dc:	00bfffc4 	movi	r2,-1
   254e0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   254e4:	00bffb44 	movi	r2,-19
   254e8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   254ec:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   254f0:	e13ffd17 	ldw	r4,-12(fp)
   254f4:	014000b4 	movhi	r5,2
   254f8:	295e2a04 	addi	r5,r5,30888
   254fc:	00257d40 	call	257d4 <alt_find_dev>
   25500:	e0bff815 	stw	r2,-32(fp)
   25504:	e0bff817 	ldw	r2,-32(fp)
   25508:	1000051e 	bne	r2,zero,25520 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   2550c:	e13ffd17 	ldw	r4,-12(fp)
   25510:	00258640 	call	25864 <alt_find_file>
   25514:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   25518:	00800044 	movi	r2,1
   2551c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   25520:	e0bff817 	ldw	r2,-32(fp)
   25524:	10002a26 	beq	r2,zero,255d0 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   25528:	e13ff817 	ldw	r4,-32(fp)
   2552c:	00259780 	call	25978 <alt_get_fd>
   25530:	e0bff915 	stw	r2,-28(fp)
   25534:	e0bff917 	ldw	r2,-28(fp)
   25538:	1000030e 	bge	r2,zero,25548 <open+0x88>
    {
      status = index;
   2553c:	e0bff917 	ldw	r2,-28(fp)
   25540:	e0bffa15 	stw	r2,-24(fp)
   25544:	00002406 	br	255d8 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   25548:	e13ff917 	ldw	r4,-28(fp)
   2554c:	01400304 	movi	r5,12
   25550:	00231340 	call	23134 <__mulsi3>
   25554:	00c000b4 	movhi	r3,2
   25558:	18d9ac04 	addi	r3,r3,26288
   2555c:	10c5883a 	add	r2,r2,r3
   25560:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   25564:	e0fffe17 	ldw	r3,-8(fp)
   25568:	00900034 	movhi	r2,16384
   2556c:	10bfffc4 	addi	r2,r2,-1
   25570:	1886703a 	and	r3,r3,r2
   25574:	e0bffc17 	ldw	r2,-16(fp)
   25578:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   2557c:	e0bffb17 	ldw	r2,-20(fp)
   25580:	1000051e 	bne	r2,zero,25598 <open+0xd8>
   25584:	e13ffc17 	ldw	r4,-16(fp)
   25588:	00253d00 	call	253d0 <alt_file_locked>
   2558c:	e0bffa15 	stw	r2,-24(fp)
   25590:	e0bffa17 	ldw	r2,-24(fp)
   25594:	10001016 	blt	r2,zero,255d8 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   25598:	e0bff817 	ldw	r2,-32(fp)
   2559c:	10800317 	ldw	r2,12(r2)
   255a0:	10000826 	beq	r2,zero,255c4 <open+0x104>
   255a4:	e0bff817 	ldw	r2,-32(fp)
   255a8:	10800317 	ldw	r2,12(r2)
   255ac:	e13ffc17 	ldw	r4,-16(fp)
   255b0:	e17ffd17 	ldw	r5,-12(fp)
   255b4:	e1bffe17 	ldw	r6,-8(fp)
   255b8:	e1ffff17 	ldw	r7,-4(fp)
   255bc:	103ee83a 	callr	r2
   255c0:	00000106 	br	255c8 <open+0x108>
   255c4:	0005883a 	mov	r2,zero
   255c8:	e0bffa15 	stw	r2,-24(fp)
   255cc:	00000206 	br	255d8 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   255d0:	00bffb44 	movi	r2,-19
   255d4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   255d8:	e0bffa17 	ldw	r2,-24(fp)
   255dc:	1000080e 	bge	r2,zero,25600 <open+0x140>
  {
    alt_release_fd (index);  
   255e0:	e13ff917 	ldw	r4,-28(fp)
   255e4:	00238a40 	call	238a4 <alt_release_fd>
    ALT_ERRNO = -status;
   255e8:	00253800 	call	25380 <alt_get_errno>
   255ec:	e0fffa17 	ldw	r3,-24(fp)
   255f0:	00c7c83a 	sub	r3,zero,r3
   255f4:	10c00015 	stw	r3,0(r2)
    return -1;
   255f8:	00bfffc4 	movi	r2,-1
   255fc:	00000106 	br	25604 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   25600:	e0bff917 	ldw	r2,-28(fp)
}
   25604:	e037883a 	mov	sp,fp
   25608:	dfc00117 	ldw	ra,4(sp)
   2560c:	df000017 	ldw	fp,0(sp)
   25610:	dec00204 	addi	sp,sp,8
   25614:	f800283a 	ret

00025618 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   25618:	defffa04 	addi	sp,sp,-24
   2561c:	df000515 	stw	fp,20(sp)
   25620:	df000504 	addi	fp,sp,20
   25624:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   25628:	0005303a 	rdctl	r2,status
   2562c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   25630:	e0fffc17 	ldw	r3,-16(fp)
   25634:	00bfff84 	movi	r2,-2
   25638:	1884703a 	and	r2,r3,r2
   2563c:	1001703a 	wrctl	status,r2
  
  return context;
   25640:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   25644:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   25648:	e0bfff17 	ldw	r2,-4(fp)
   2564c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   25650:	e0bffd17 	ldw	r2,-12(fp)
   25654:	10800017 	ldw	r2,0(r2)
   25658:	e0fffd17 	ldw	r3,-12(fp)
   2565c:	18c00117 	ldw	r3,4(r3)
   25660:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   25664:	e0bffd17 	ldw	r2,-12(fp)
   25668:	10800117 	ldw	r2,4(r2)
   2566c:	e0fffd17 	ldw	r3,-12(fp)
   25670:	18c00017 	ldw	r3,0(r3)
   25674:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   25678:	e0bffd17 	ldw	r2,-12(fp)
   2567c:	e0fffd17 	ldw	r3,-12(fp)
   25680:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   25684:	e0bffd17 	ldw	r2,-12(fp)
   25688:	e0fffd17 	ldw	r3,-12(fp)
   2568c:	10c00015 	stw	r3,0(r2)
   25690:	e0bffb17 	ldw	r2,-20(fp)
   25694:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   25698:	e0bffe17 	ldw	r2,-8(fp)
   2569c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   256a0:	e037883a 	mov	sp,fp
   256a4:	df000017 	ldw	fp,0(sp)
   256a8:	dec00104 	addi	sp,sp,4
   256ac:	f800283a 	ret

000256b0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   256b0:	defffb04 	addi	sp,sp,-20
   256b4:	dfc00415 	stw	ra,16(sp)
   256b8:	df000315 	stw	fp,12(sp)
   256bc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   256c0:	d0a00c17 	ldw	r2,-32720(gp)
   256c4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   256c8:	d0a6a917 	ldw	r2,-25948(gp)
   256cc:	10800044 	addi	r2,r2,1
   256d0:	d0a6a915 	stw	r2,-25948(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   256d4:	00002e06 	br	25790 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   256d8:	e0bffd17 	ldw	r2,-12(fp)
   256dc:	10800017 	ldw	r2,0(r2)
   256e0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   256e4:	e0bffd17 	ldw	r2,-12(fp)
   256e8:	10800403 	ldbu	r2,16(r2)
   256ec:	10803fcc 	andi	r2,r2,255
   256f0:	10000426 	beq	r2,zero,25704 <alt_tick+0x54>
   256f4:	d0a6a917 	ldw	r2,-25948(gp)
   256f8:	1000021e 	bne	r2,zero,25704 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   256fc:	e0bffd17 	ldw	r2,-12(fp)
   25700:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   25704:	e0bffd17 	ldw	r2,-12(fp)
   25708:	10800217 	ldw	r2,8(r2)
   2570c:	d0e6a917 	ldw	r3,-25948(gp)
   25710:	18801d36 	bltu	r3,r2,25788 <alt_tick+0xd8>
   25714:	e0bffd17 	ldw	r2,-12(fp)
   25718:	10800403 	ldbu	r2,16(r2)
   2571c:	10803fcc 	andi	r2,r2,255
   25720:	1000191e 	bne	r2,zero,25788 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   25724:	e0bffd17 	ldw	r2,-12(fp)
   25728:	10c00317 	ldw	r3,12(r2)
   2572c:	e0bffd17 	ldw	r2,-12(fp)
   25730:	10800517 	ldw	r2,20(r2)
   25734:	1009883a 	mov	r4,r2
   25738:	183ee83a 	callr	r3
   2573c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   25740:	e0bfff17 	ldw	r2,-4(fp)
   25744:	1000031e 	bne	r2,zero,25754 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   25748:	e13ffd17 	ldw	r4,-12(fp)
   2574c:	00256180 	call	25618 <alt_alarm_stop>
   25750:	00000d06 	br	25788 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   25754:	e0bffd17 	ldw	r2,-12(fp)
   25758:	10c00217 	ldw	r3,8(r2)
   2575c:	e0bfff17 	ldw	r2,-4(fp)
   25760:	1887883a 	add	r3,r3,r2
   25764:	e0bffd17 	ldw	r2,-12(fp)
   25768:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   2576c:	e0bffd17 	ldw	r2,-12(fp)
   25770:	10c00217 	ldw	r3,8(r2)
   25774:	d0a6a917 	ldw	r2,-25948(gp)
   25778:	1880032e 	bgeu	r3,r2,25788 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   2577c:	e0bffd17 	ldw	r2,-12(fp)
   25780:	00c00044 	movi	r3,1
   25784:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   25788:	e0bffe17 	ldw	r2,-8(fp)
   2578c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   25790:	e0fffd17 	ldw	r3,-12(fp)
   25794:	d0a00c04 	addi	r2,gp,-32720
   25798:	18bfcf1e 	bne	r3,r2,256d8 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   2579c:	0001883a 	nop
}
   257a0:	e037883a 	mov	sp,fp
   257a4:	dfc00117 	ldw	ra,4(sp)
   257a8:	df000017 	ldw	fp,0(sp)
   257ac:	dec00204 	addi	sp,sp,8
   257b0:	f800283a 	ret

000257b4 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   257b4:	deffff04 	addi	sp,sp,-4
   257b8:	df000015 	stw	fp,0(sp)
   257bc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   257c0:	000170fa 	wrctl	ienable,zero
}
   257c4:	e037883a 	mov	sp,fp
   257c8:	df000017 	ldw	fp,0(sp)
   257cc:	dec00104 	addi	sp,sp,4
   257d0:	f800283a 	ret

000257d4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   257d4:	defffa04 	addi	sp,sp,-24
   257d8:	dfc00515 	stw	ra,20(sp)
   257dc:	df000415 	stw	fp,16(sp)
   257e0:	df000404 	addi	fp,sp,16
   257e4:	e13ffe15 	stw	r4,-8(fp)
   257e8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   257ec:	e0bfff17 	ldw	r2,-4(fp)
   257f0:	10800017 	ldw	r2,0(r2)
   257f4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   257f8:	e13ffe17 	ldw	r4,-8(fp)
   257fc:	00206b00 	call	206b0 <strlen>
   25800:	10800044 	addi	r2,r2,1
   25804:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   25808:	00000d06 	br	25840 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   2580c:	e0bffc17 	ldw	r2,-16(fp)
   25810:	10c00217 	ldw	r3,8(r2)
   25814:	e0bffd17 	ldw	r2,-12(fp)
   25818:	1809883a 	mov	r4,r3
   2581c:	e17ffe17 	ldw	r5,-8(fp)
   25820:	100d883a 	mov	r6,r2
   25824:	0025a980 	call	25a98 <memcmp>
   25828:	1000021e 	bne	r2,zero,25834 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   2582c:	e0bffc17 	ldw	r2,-16(fp)
   25830:	00000706 	br	25850 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   25834:	e0bffc17 	ldw	r2,-16(fp)
   25838:	10800017 	ldw	r2,0(r2)
   2583c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   25840:	e0fffc17 	ldw	r3,-16(fp)
   25844:	e0bfff17 	ldw	r2,-4(fp)
   25848:	18bff01e 	bne	r3,r2,2580c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   2584c:	0005883a 	mov	r2,zero
}
   25850:	e037883a 	mov	sp,fp
   25854:	dfc00117 	ldw	ra,4(sp)
   25858:	df000017 	ldw	fp,0(sp)
   2585c:	dec00204 	addi	sp,sp,8
   25860:	f800283a 	ret

00025864 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   25864:	defffb04 	addi	sp,sp,-20
   25868:	dfc00415 	stw	ra,16(sp)
   2586c:	df000315 	stw	fp,12(sp)
   25870:	df000304 	addi	fp,sp,12
   25874:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   25878:	008000b4 	movhi	r2,2
   2587c:	109e2804 	addi	r2,r2,30880
   25880:	10800017 	ldw	r2,0(r2)
   25884:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   25888:	00003106 	br	25950 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   2588c:	e0bffd17 	ldw	r2,-12(fp)
   25890:	10800217 	ldw	r2,8(r2)
   25894:	1009883a 	mov	r4,r2
   25898:	00206b00 	call	206b0 <strlen>
   2589c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   258a0:	e0bffd17 	ldw	r2,-12(fp)
   258a4:	10c00217 	ldw	r3,8(r2)
   258a8:	e0bffe17 	ldw	r2,-8(fp)
   258ac:	10bfffc4 	addi	r2,r2,-1
   258b0:	1885883a 	add	r2,r3,r2
   258b4:	10800003 	ldbu	r2,0(r2)
   258b8:	10803fcc 	andi	r2,r2,255
   258bc:	1080201c 	xori	r2,r2,128
   258c0:	10bfe004 	addi	r2,r2,-128
   258c4:	10800bd8 	cmpnei	r2,r2,47
   258c8:	1000031e 	bne	r2,zero,258d8 <alt_find_file+0x74>
    {
      len -= 1;
   258cc:	e0bffe17 	ldw	r2,-8(fp)
   258d0:	10bfffc4 	addi	r2,r2,-1
   258d4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   258d8:	e0bffe17 	ldw	r2,-8(fp)
   258dc:	e0ffff17 	ldw	r3,-4(fp)
   258e0:	1885883a 	add	r2,r3,r2
   258e4:	10800003 	ldbu	r2,0(r2)
   258e8:	10803fcc 	andi	r2,r2,255
   258ec:	1080201c 	xori	r2,r2,128
   258f0:	10bfe004 	addi	r2,r2,-128
   258f4:	10800be0 	cmpeqi	r2,r2,47
   258f8:	1000081e 	bne	r2,zero,2591c <alt_find_file+0xb8>
   258fc:	e0bffe17 	ldw	r2,-8(fp)
   25900:	e0ffff17 	ldw	r3,-4(fp)
   25904:	1885883a 	add	r2,r3,r2
   25908:	10800003 	ldbu	r2,0(r2)
   2590c:	10803fcc 	andi	r2,r2,255
   25910:	1080201c 	xori	r2,r2,128
   25914:	10bfe004 	addi	r2,r2,-128
   25918:	10000a1e 	bne	r2,zero,25944 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   2591c:	e0bffd17 	ldw	r2,-12(fp)
   25920:	10c00217 	ldw	r3,8(r2)
   25924:	e0bffe17 	ldw	r2,-8(fp)
   25928:	1809883a 	mov	r4,r3
   2592c:	e17fff17 	ldw	r5,-4(fp)
   25930:	100d883a 	mov	r6,r2
   25934:	0025a980 	call	25a98 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   25938:	1000021e 	bne	r2,zero,25944 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   2593c:	e0bffd17 	ldw	r2,-12(fp)
   25940:	00000806 	br	25964 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   25944:	e0bffd17 	ldw	r2,-12(fp)
   25948:	10800017 	ldw	r2,0(r2)
   2594c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   25950:	e0fffd17 	ldw	r3,-12(fp)
   25954:	008000b4 	movhi	r2,2
   25958:	109e2804 	addi	r2,r2,30880
   2595c:	18bfcb1e 	bne	r3,r2,2588c <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   25960:	0005883a 	mov	r2,zero
}
   25964:	e037883a 	mov	sp,fp
   25968:	dfc00117 	ldw	ra,4(sp)
   2596c:	df000017 	ldw	fp,0(sp)
   25970:	dec00204 	addi	sp,sp,8
   25974:	f800283a 	ret

00025978 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   25978:	defffa04 	addi	sp,sp,-24
   2597c:	dfc00515 	stw	ra,20(sp)
   25980:	df000415 	stw	fp,16(sp)
   25984:	dc000315 	stw	r16,12(sp)
   25988:	df000304 	addi	fp,sp,12
   2598c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   25990:	00bffa04 	movi	r2,-24
   25994:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   25998:	e03ffd15 	stw	zero,-12(fp)
   2599c:	00002106 	br	25a24 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   259a0:	040000b4 	movhi	r16,2
   259a4:	8419ac04 	addi	r16,r16,26288
   259a8:	e0bffd17 	ldw	r2,-12(fp)
   259ac:	1009883a 	mov	r4,r2
   259b0:	01400304 	movi	r5,12
   259b4:	00231340 	call	23134 <__mulsi3>
   259b8:	8085883a 	add	r2,r16,r2
   259bc:	10800017 	ldw	r2,0(r2)
   259c0:	1000151e 	bne	r2,zero,25a18 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   259c4:	040000b4 	movhi	r16,2
   259c8:	8419ac04 	addi	r16,r16,26288
   259cc:	e0bffd17 	ldw	r2,-12(fp)
   259d0:	1009883a 	mov	r4,r2
   259d4:	01400304 	movi	r5,12
   259d8:	00231340 	call	23134 <__mulsi3>
   259dc:	8085883a 	add	r2,r16,r2
   259e0:	e0ffff17 	ldw	r3,-4(fp)
   259e4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   259e8:	008000b4 	movhi	r2,2
   259ec:	109e2c04 	addi	r2,r2,30896
   259f0:	10c00017 	ldw	r3,0(r2)
   259f4:	e0bffd17 	ldw	r2,-12(fp)
   259f8:	1880040e 	bge	r3,r2,25a0c <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   259fc:	008000b4 	movhi	r2,2
   25a00:	109e2c04 	addi	r2,r2,30896
   25a04:	e0fffd17 	ldw	r3,-12(fp)
   25a08:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   25a0c:	e0bffd17 	ldw	r2,-12(fp)
   25a10:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   25a14:	00000606 	br	25a30 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   25a18:	e0bffd17 	ldw	r2,-12(fp)
   25a1c:	10800044 	addi	r2,r2,1
   25a20:	e0bffd15 	stw	r2,-12(fp)
   25a24:	e0bffd17 	ldw	r2,-12(fp)
   25a28:	10800810 	cmplti	r2,r2,32
   25a2c:	103fdc1e 	bne	r2,zero,259a0 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   25a30:	e0bffe17 	ldw	r2,-8(fp)
}
   25a34:	e037883a 	mov	sp,fp
   25a38:	dfc00217 	ldw	ra,8(sp)
   25a3c:	df000117 	ldw	fp,4(sp)
   25a40:	dc000017 	ldw	r16,0(sp)
   25a44:	dec00304 	addi	sp,sp,12
   25a48:	f800283a 	ret

00025a4c <atexit>:
   25a4c:	200b883a 	mov	r5,r4
   25a50:	000d883a 	mov	r6,zero
   25a54:	0009883a 	mov	r4,zero
   25a58:	000f883a 	mov	r7,zero
   25a5c:	0025b141 	jmpi	25b14 <__register_exitproc>

00025a60 <exit>:
   25a60:	defffe04 	addi	sp,sp,-8
   25a64:	000b883a 	mov	r5,zero
   25a68:	dc000015 	stw	r16,0(sp)
   25a6c:	dfc00115 	stw	ra,4(sp)
   25a70:	2021883a 	mov	r16,r4
   25a74:	0025c440 	call	25c44 <__call_exitprocs>
   25a78:	008000b4 	movhi	r2,2
   25a7c:	109e2404 	addi	r2,r2,30864
   25a80:	11000017 	ldw	r4,0(r2)
   25a84:	20800f17 	ldw	r2,60(r4)
   25a88:	10000126 	beq	r2,zero,25a90 <exit+0x30>
   25a8c:	103ee83a 	callr	r2
   25a90:	8009883a 	mov	r4,r16
   25a94:	0025de40 	call	25de4 <_exit>

00025a98 <memcmp>:
   25a98:	01c000c4 	movi	r7,3
   25a9c:	3980192e 	bgeu	r7,r6,25b04 <memcmp+0x6c>
   25aa0:	2904b03a 	or	r2,r5,r4
   25aa4:	11c4703a 	and	r2,r2,r7
   25aa8:	10000f26 	beq	r2,zero,25ae8 <memcmp+0x50>
   25aac:	20c00003 	ldbu	r3,0(r4)
   25ab0:	28800003 	ldbu	r2,0(r5)
   25ab4:	1880151e 	bne	r3,r2,25b0c <memcmp+0x74>
   25ab8:	31bfff84 	addi	r6,r6,-2
   25abc:	01ffffc4 	movi	r7,-1
   25ac0:	00000406 	br	25ad4 <memcmp+0x3c>
   25ac4:	20c00003 	ldbu	r3,0(r4)
   25ac8:	28800003 	ldbu	r2,0(r5)
   25acc:	31bfffc4 	addi	r6,r6,-1
   25ad0:	18800e1e 	bne	r3,r2,25b0c <memcmp+0x74>
   25ad4:	21000044 	addi	r4,r4,1
   25ad8:	29400044 	addi	r5,r5,1
   25adc:	31fff91e 	bne	r6,r7,25ac4 <memcmp+0x2c>
   25ae0:	0005883a 	mov	r2,zero
   25ae4:	f800283a 	ret
   25ae8:	20c00017 	ldw	r3,0(r4)
   25aec:	28800017 	ldw	r2,0(r5)
   25af0:	1880041e 	bne	r3,r2,25b04 <memcmp+0x6c>
   25af4:	31bfff04 	addi	r6,r6,-4
   25af8:	21000104 	addi	r4,r4,4
   25afc:	29400104 	addi	r5,r5,4
   25b00:	39bff936 	bltu	r7,r6,25ae8 <memcmp+0x50>
   25b04:	303fe91e 	bne	r6,zero,25aac <memcmp+0x14>
   25b08:	003ff506 	br	25ae0 <memcmp+0x48>
   25b0c:	1885c83a 	sub	r2,r3,r2
   25b10:	f800283a 	ret

00025b14 <__register_exitproc>:
   25b14:	defffa04 	addi	sp,sp,-24
   25b18:	008000b4 	movhi	r2,2
   25b1c:	109e2404 	addi	r2,r2,30864
   25b20:	dc000315 	stw	r16,12(sp)
   25b24:	14000017 	ldw	r16,0(r2)
   25b28:	dc400415 	stw	r17,16(sp)
   25b2c:	dfc00515 	stw	ra,20(sp)
   25b30:	80805217 	ldw	r2,328(r16)
   25b34:	2023883a 	mov	r17,r4
   25b38:	10003e26 	beq	r2,zero,25c34 <__register_exitproc+0x120>
   25b3c:	10c00117 	ldw	r3,4(r2)
   25b40:	020007c4 	movi	r8,31
   25b44:	40c0180e 	bge	r8,r3,25ba8 <__register_exitproc+0x94>
   25b48:	00800034 	movhi	r2,0
   25b4c:	10800004 	addi	r2,r2,0
   25b50:	1000061e 	bne	r2,zero,25b6c <__register_exitproc+0x58>
   25b54:	00bfffc4 	movi	r2,-1
   25b58:	dfc00517 	ldw	ra,20(sp)
   25b5c:	dc400417 	ldw	r17,16(sp)
   25b60:	dc000317 	ldw	r16,12(sp)
   25b64:	dec00604 	addi	sp,sp,24
   25b68:	f800283a 	ret
   25b6c:	01006404 	movi	r4,400
   25b70:	d9400015 	stw	r5,0(sp)
   25b74:	d9800115 	stw	r6,4(sp)
   25b78:	d9c00215 	stw	r7,8(sp)
   25b7c:	00000000 	call	0 <__alt_mem_mem2-0x20000>
   25b80:	d9400017 	ldw	r5,0(sp)
   25b84:	d9800117 	ldw	r6,4(sp)
   25b88:	d9c00217 	ldw	r7,8(sp)
   25b8c:	103ff126 	beq	r2,zero,25b54 <__register_exitproc+0x40>
   25b90:	80c05217 	ldw	r3,328(r16)
   25b94:	10000115 	stw	zero,4(r2)
   25b98:	10c00015 	stw	r3,0(r2)
   25b9c:	80805215 	stw	r2,328(r16)
   25ba0:	10006215 	stw	zero,392(r2)
   25ba4:	10006315 	stw	zero,396(r2)
   25ba8:	10c00117 	ldw	r3,4(r2)
   25bac:	88000d1e 	bne	r17,zero,25be4 <__register_exitproc+0xd0>
   25bb0:	19000084 	addi	r4,r3,2
   25bb4:	2109883a 	add	r4,r4,r4
   25bb8:	18c00044 	addi	r3,r3,1
   25bbc:	2109883a 	add	r4,r4,r4
   25bc0:	1109883a 	add	r4,r2,r4
   25bc4:	10c00115 	stw	r3,4(r2)
   25bc8:	0005883a 	mov	r2,zero
   25bcc:	21400015 	stw	r5,0(r4)
   25bd0:	dfc00517 	ldw	ra,20(sp)
   25bd4:	dc400417 	ldw	r17,16(sp)
   25bd8:	dc000317 	ldw	r16,12(sp)
   25bdc:	dec00604 	addi	sp,sp,24
   25be0:	f800283a 	ret
   25be4:	02400044 	movi	r9,1
   25be8:	12806217 	ldw	r10,392(r2)
   25bec:	48d2983a 	sll	r9,r9,r3
   25bf0:	19000804 	addi	r4,r3,32
   25bf4:	18d1883a 	add	r8,r3,r3
   25bf8:	2109883a 	add	r4,r4,r4
   25bfc:	4211883a 	add	r8,r8,r8
   25c00:	2109883a 	add	r4,r4,r4
   25c04:	1109883a 	add	r4,r2,r4
   25c08:	1211883a 	add	r8,r2,r8
   25c0c:	5254b03a 	or	r10,r10,r9
   25c10:	21c02215 	stw	r7,136(r4)
   25c14:	41802215 	stw	r6,136(r8)
   25c18:	12806215 	stw	r10,392(r2)
   25c1c:	01000084 	movi	r4,2
   25c20:	893fe31e 	bne	r17,r4,25bb0 <__register_exitproc+0x9c>
   25c24:	11006317 	ldw	r4,396(r2)
   25c28:	2252b03a 	or	r9,r4,r9
   25c2c:	12406315 	stw	r9,396(r2)
   25c30:	003fdf06 	br	25bb0 <__register_exitproc+0x9c>
   25c34:	008000f4 	movhi	r2,3
   25c38:	10a51804 	addi	r2,r2,-27552
   25c3c:	80805215 	stw	r2,328(r16)
   25c40:	003fbe06 	br	25b3c <__register_exitproc+0x28>

00025c44 <__call_exitprocs>:
   25c44:	008000b4 	movhi	r2,2
   25c48:	109e2404 	addi	r2,r2,30864
   25c4c:	10800017 	ldw	r2,0(r2)
   25c50:	defff304 	addi	sp,sp,-52
   25c54:	df000b15 	stw	fp,44(sp)
   25c58:	d8800015 	stw	r2,0(sp)
   25c5c:	10805204 	addi	r2,r2,328
   25c60:	dd400815 	stw	r21,32(sp)
   25c64:	dfc00c15 	stw	ra,48(sp)
   25c68:	ddc00a15 	stw	r23,40(sp)
   25c6c:	dd800915 	stw	r22,36(sp)
   25c70:	dd000715 	stw	r20,28(sp)
   25c74:	dcc00615 	stw	r19,24(sp)
   25c78:	dc800515 	stw	r18,20(sp)
   25c7c:	dc400415 	stw	r17,16(sp)
   25c80:	dc000315 	stw	r16,12(sp)
   25c84:	d9000115 	stw	r4,4(sp)
   25c88:	2839883a 	mov	fp,r5
   25c8c:	d8800215 	stw	r2,8(sp)
   25c90:	057fffc4 	movi	r21,-1
   25c94:	d8800017 	ldw	r2,0(sp)
   25c98:	ddc00217 	ldw	r23,8(sp)
   25c9c:	14805217 	ldw	r18,328(r2)
   25ca0:	90001726 	beq	r18,zero,25d00 <__call_exitprocs+0xbc>
   25ca4:	94400117 	ldw	r17,4(r18)
   25ca8:	8c3fffc4 	addi	r16,r17,-1
   25cac:	80001116 	blt	r16,zero,25cf4 <__call_exitprocs+0xb0>
   25cb0:	8c400044 	addi	r17,r17,1
   25cb4:	8427883a 	add	r19,r16,r16
   25cb8:	8c63883a 	add	r17,r17,r17
   25cbc:	95802204 	addi	r22,r18,136
   25cc0:	9ce7883a 	add	r19,r19,r19
   25cc4:	8c63883a 	add	r17,r17,r17
   25cc8:	b4e7883a 	add	r19,r22,r19
   25ccc:	9463883a 	add	r17,r18,r17
   25cd0:	e0001726 	beq	fp,zero,25d30 <__call_exitprocs+0xec>
   25cd4:	8c87c83a 	sub	r3,r17,r18
   25cd8:	b0c7883a 	add	r3,r22,r3
   25cdc:	18c01e17 	ldw	r3,120(r3)
   25ce0:	1f001326 	beq	r3,fp,25d30 <__call_exitprocs+0xec>
   25ce4:	843fffc4 	addi	r16,r16,-1
   25ce8:	9cffff04 	addi	r19,r19,-4
   25cec:	8c7fff04 	addi	r17,r17,-4
   25cf0:	857ff71e 	bne	r16,r21,25cd0 <__call_exitprocs+0x8c>
   25cf4:	00800034 	movhi	r2,0
   25cf8:	10800004 	addi	r2,r2,0
   25cfc:	10002a1e 	bne	r2,zero,25da8 <__call_exitprocs+0x164>
   25d00:	dfc00c17 	ldw	ra,48(sp)
   25d04:	df000b17 	ldw	fp,44(sp)
   25d08:	ddc00a17 	ldw	r23,40(sp)
   25d0c:	dd800917 	ldw	r22,36(sp)
   25d10:	dd400817 	ldw	r21,32(sp)
   25d14:	dd000717 	ldw	r20,28(sp)
   25d18:	dcc00617 	ldw	r19,24(sp)
   25d1c:	dc800517 	ldw	r18,20(sp)
   25d20:	dc400417 	ldw	r17,16(sp)
   25d24:	dc000317 	ldw	r16,12(sp)
   25d28:	dec00d04 	addi	sp,sp,52
   25d2c:	f800283a 	ret
   25d30:	91000117 	ldw	r4,4(r18)
   25d34:	88c00017 	ldw	r3,0(r17)
   25d38:	213fffc4 	addi	r4,r4,-1
   25d3c:	24001526 	beq	r4,r16,25d94 <__call_exitprocs+0x150>
   25d40:	88000015 	stw	zero,0(r17)
   25d44:	183fe726 	beq	r3,zero,25ce4 <__call_exitprocs+0xa0>
   25d48:	00800044 	movi	r2,1
   25d4c:	1408983a 	sll	r4,r2,r16
   25d50:	91406217 	ldw	r5,392(r18)
   25d54:	95000117 	ldw	r20,4(r18)
   25d58:	214a703a 	and	r5,r4,r5
   25d5c:	28000b26 	beq	r5,zero,25d8c <__call_exitprocs+0x148>
   25d60:	91406317 	ldw	r5,396(r18)
   25d64:	2148703a 	and	r4,r4,r5
   25d68:	20000c1e 	bne	r4,zero,25d9c <__call_exitprocs+0x158>
   25d6c:	99400017 	ldw	r5,0(r19)
   25d70:	d9000117 	ldw	r4,4(sp)
   25d74:	183ee83a 	callr	r3
   25d78:	90c00117 	ldw	r3,4(r18)
   25d7c:	1d3fc51e 	bne	r3,r20,25c94 <__call_exitprocs+0x50>
   25d80:	b8c00017 	ldw	r3,0(r23)
   25d84:	1cbfd726 	beq	r3,r18,25ce4 <__call_exitprocs+0xa0>
   25d88:	003fc206 	br	25c94 <__call_exitprocs+0x50>
   25d8c:	183ee83a 	callr	r3
   25d90:	003ff906 	br	25d78 <__call_exitprocs+0x134>
   25d94:	94000115 	stw	r16,4(r18)
   25d98:	003fea06 	br	25d44 <__call_exitprocs+0x100>
   25d9c:	99000017 	ldw	r4,0(r19)
   25da0:	183ee83a 	callr	r3
   25da4:	003ff406 	br	25d78 <__call_exitprocs+0x134>
   25da8:	90c00117 	ldw	r3,4(r18)
   25dac:	1800071e 	bne	r3,zero,25dcc <__call_exitprocs+0x188>
   25db0:	90c00017 	ldw	r3,0(r18)
   25db4:	18000926 	beq	r3,zero,25ddc <__call_exitprocs+0x198>
   25db8:	9009883a 	mov	r4,r18
   25dbc:	b8c00015 	stw	r3,0(r23)
   25dc0:	00000000 	call	0 <__alt_mem_mem2-0x20000>
   25dc4:	bc800017 	ldw	r18,0(r23)
   25dc8:	003fb506 	br	25ca0 <__call_exitprocs+0x5c>
   25dcc:	90c00017 	ldw	r3,0(r18)
   25dd0:	902f883a 	mov	r23,r18
   25dd4:	1825883a 	mov	r18,r3
   25dd8:	003fb106 	br	25ca0 <__call_exitprocs+0x5c>
   25ddc:	0007883a 	mov	r3,zero
   25de0:	003ffb06 	br	25dd0 <__call_exitprocs+0x18c>

00025de4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   25de4:	defffc04 	addi	sp,sp,-16
   25de8:	df000315 	stw	fp,12(sp)
   25dec:	df000304 	addi	fp,sp,12
   25df0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   25df4:	0001883a 	nop
   25df8:	e0bfff17 	ldw	r2,-4(fp)
   25dfc:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
   25e00:	e0bffd17 	ldw	r2,-12(fp)
   25e04:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   25e08:	e0bffe17 	ldw	r2,-8(fp)
   25e0c:	10000226 	beq	r2,zero,25e18 <_exit+0x34>
    ALT_SIM_FAIL();
   25e10:	002af070 	cmpltui	zero,zero,43969
   25e14:	00000106 	br	25e1c <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   25e18:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   25e1c:	003fff06 	br	25e1c <_exit+0x38>


cpu1.elf:     file format elf32-littlenios2
cpu1.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000201b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x0000eae0 memsz 0x0000eae0 flags r-x
    LOAD off    0x0000fb00 vaddr 0x0002eb00 paddr 0x000305c8 align 2**12
         filesz 0x00001ac8 memsz 0x00001ac8 flags rw-
    LOAD off    0x00012090 vaddr 0x00032090 paddr 0x00032090 align 2**12
         filesz 0x00000000 memsz 0x000002ec flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000e5a8  000201b8  000201b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003a0  0002e760  0002e760  0000f760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ac8  0002eb00  000305c8  0000fb00  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ec  00032090  00032090  00012090  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  000115c8  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000ee0  00000000  00000000  000115f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0002a918  00000000  00000000  000124d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000a629  00000000  00000000  0003cde8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000bc47  00000000  00000000  00047411  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001da0  00000000  00000000  00053058  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00003584  00000000  00000000  00054df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00012164  00000000  00000000  0005837c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  0006a4e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ab0  00000000  00000000  0006a4f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0006e5d2  2**0
                  CONTENTS, READONLY
 17 .cpu          00000004  00000000  00000000  0006e5d5  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0006e5d9  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0006e5da  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   0000000a  00000000  00000000  0006e5db  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    0000000a  00000000  00000000  0006e5e5  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   0000000a  00000000  00000000  0006e5ef  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 00000004  00000000  00000000  0006e5f9  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 00000052  00000000  00000000  0006e5fd  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     001798fe  00000000  00000000  0006e64f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
000201b8 l    d  .text	00000000 .text
0002e760 l    d  .rodata	00000000 .rodata
0002eb00 l    d  .rwdata	00000000 .rwdata
00032090 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../cpu1_bsp//obj/HAL/src/crt0.o
000201f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00020094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 FIFO.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000213a4 l     F .text	00000008 __fp_lock
000213ac l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
0002eb00 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
000232dc l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00023714 l     F .text	00000034 __sprint_r
0002e81e l     O .rodata	00000010 blanks.3515
0002e82e l     O .rodata	00000010 zeroes.3516
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
0002582c l     F .text	0000023c quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
0002e860 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0002e9a8 l     O .rodata	0000000c p05.2435
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00029f34 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0002ac74 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0002b3e0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0002b4fc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0002b528 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0002b628 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0002b71c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0002b808 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0002b9e4 l     F .text	00000050 alt_get_errno
0002ba34 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
0002bc7c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00030570 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0002bef0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0002c030 l     F .text	00000038 alt_dev_reg
0002f4bc l     O .rwdata	00001060 jtag_uart1
0003051c l     O .rwdata	00000028 altera_hostfs
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0002c830 l     F .text	00000204 altera_avalon_jtag_uart_irq
0002ca34 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0002d070 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_hostfs.c
000305b0 l     O .rwdata	00000004 hcinfo.2311
000305a4 l     O .rwdata	00000004 hcinfo.2324
00030598 l     O .rwdata	00000004 hcinfo.2333
0003058c l     O .rwdata	00000004 hcinfo.2346
00030580 l     O .rwdata	00000004 hcinfo.2359
00030574 l     O .rwdata	00000004 hcinfo.2385
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0002d8f0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0002e078 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
0002890c g     F .text	00000074 _mprec_log10
000289fc g     F .text	00000084 __any_on
00027600 g     F .text	00000064 _isatty_r
0002e890 g     O .rodata	00000028 __mprec_tinytens
0002b92c g     F .text	00000078 alt_main
0002b39c g     F .text	00000044 __ashldi3
00023244 g     F .text	00000084 _puts_r
000320ec g     O .bss	00000100 alt_irq
00027740 g     F .text	0000006c _lseek_r
0002c39c g     F .text	00000058 altera_avalon_fifo_write_almostfull
000305c8 g       *ABS*	00000000 __flash_rwdata_start
00027084 g     F .text	00000098 __sflags
0002a7d4 g     F .text	0000005c __eqdf2
0003237c g       *ABS*	00000000 __alt_heap_start
00023208 g     F .text	0000003c printf
00023624 g     F .text	0000005c __sseek
00021448 g     F .text	0000010c __sinit
00027664 g     F .text	0000009c _setlocale_r
000213c0 g     F .text	00000078 __sfmoreglue
0002b9c4 g     F .text	00000020 __malloc_unlock
0002d16c g     F .text	0000016c alt_hostfs_open
000278a4 g     F .text	0000018c memmove
0002c11c g     F .text	00000098 altera_avalon_fifo_init
00021438 g     F .text	00000010 _cleanup
0002c44c g     F .text	00000058 altera_avalon_fifo_write_fifo
00027a30 g     F .text	000000a8 _Balloc
0002a88c g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
00020000 g     F .entry	0000000c __reset
0002c5e4 g     F .text	00000028 altera_avalon_fifo_read_backpressure
00020020 g       *ABS*	00000000 __flash_exceptions_start
00022348 g     F .text	00000068 _fstat_r
00032090 g     O .bss	00000004 errno
000320b0 g     O .bss	00000004 alt_argv
00038544 g       *ABS*	00000000 _gp
0002c2e8 g     F .text	0000005c altera_avalon_fifo_clear_event
0002f33c g     O .rwdata	00000180 alt_fd_list
0002d4b4 g     F .text	000000b8 alt_hostfs_seek
0002da98 g     F .text	00000090 alt_find_dev
00022f54 g     F .text	00000140 memcpy
000213b4 g     F .text	0000000c _cleanup_r
0002a9b0 g     F .text	000000d4 __floatsidf
0002dc3c g     F .text	00000084 alt_fs_reg
0002e158 g     F .text	00000078 alt_io_redirect
0002a954 g     F .text	0000005c __ltdf2
0002e760 g       *ABS*	00000000 __DTOR_END__
000232c8 g     F .text	00000014 puts
00028868 g     F .text	000000a4 __ratio
0002cc34 g     F .text	00000218 altera_avalon_jtag_uart_read
000227a8 g     F .text	00000014 malloc
000231dc g     F .text	0000002c _printf_r
0002ad94 g     F .text	00000008 __udivsi3
0002b678 g     F .text	000000a4 isatty
0002e8e0 g     O .rodata	000000c8 __mprec_tens
00027700 g     F .text	0000000c __locale_charset
0003209c g     O .bss	00000004 __malloc_top_pad
00030554 g     O .rwdata	00000004 __mb_cur_max
0002770c g     F .text	0000000c _localeconv_r
00027e60 g     F .text	0000003c __i2b
0002711c g     F .text	000004e4 __sfvwrite_r
000234e4 g     F .text	00000064 _sbrk_r
000202f8 g     F .text	00000860 read_444_format
0002d344 g     F .text	000000b8 alt_hostfs_read
00028a80 g     F .text	0000006c _read_r
0002f308 g     O .rwdata	0000000c __lc_ctype
00030568 g     O .rwdata	00000004 alt_max_fd
0002b184 g     F .text	00000104 __unpack_d
0002103c g     F .text	0000013c _fclose_r
00021374 g     F .text	00000030 fflush
00032098 g     O .bss	00000004 __malloc_max_sbrked_mem
0002a288 g     F .text	00000054 __adddf3
000285dc g     F .text	00000148 __b2d
0002990c g     F .text	00000628 __umoddi3
0002b858 g     F .text	000000d4 lseek
00030544 g     O .rwdata	00000004 _global_impure_ptr
00028aec g     F .text	000005fc _realloc_r
0003237c g       *ABS*	00000000 __bss_end
0002df88 g     F .text	000000f0 alt_iic_isr_register
0002e268 g     F .text	00000104 alt_tick
000292bc g     F .text	00000650 __udivdi3
0002e8b8 g     O .rodata	00000028 __mprec_bigtens
00027c44 g     F .text	00000104 __s2b
0002ab58 g     F .text	0000011c __floatunsidf
0002837c g     F .text	00000058 __mcmp
00021660 g     F .text	00000018 __fp_lock_all
0002df3c g     F .text	0000004c alt_ic_irq_enabled
000202b8 g     F .text	00000040 FIFO_INIT
0002e1d0 g     F .text	00000098 alt_alarm_stop
000320b8 g     O .bss	00000004 alt_irq_active
0002d2d8 g     F .text	0000006c alt_hostfs_close
000200ec g     F .exceptions	000000cc alt_irq_handler
0002f314 g     O .rwdata	00000028 alt_dev_null
0002d8d4 g     F .text	0000001c alt_dcache_flush_all
00027d48 g     F .text	00000068 __hi0bits
0002aa84 g     F .text	000000d4 __fixdfsi
0002c344 g     F .text	00000058 altera_avalon_fifo_write_ienable
000305c8 g       *ABS*	00000000 __ram_rwdata_end
0002c258 g     F .text	0000002c altera_avalon_fifo_read_almostempty
00030560 g     O .rwdata	00000008 alt_dev_list
0002bf40 g     F .text	000000f0 write
0002eb00 g       *ABS*	00000000 __ram_rodata_end
0002b578 g     F .text	000000b0 fstat
00021804 g     F .text	00000024 fprintf
0002b358 g     F .text	00000044 __lshrdi3
000280f4 g     F .text	0000012c __pow5mult
000320a8 g     O .bss	00000004 __nlocale_changed
0002ad9c g     F .text	00000008 __umodsi3
0003237c g       *ABS*	00000000 end
00022324 g     F .text	00000024 fseek
0002c770 g     F .text	000000c0 altera_avalon_jtag_uart_init
0002c284 g     F .text	0000003c altera_avalon_fifo_read_event
0002e760 g       *ABS*	00000000 __CTOR_LIST__
00040000 g       *ABS*	00000000 __alt_stack_pointer
0002d0e4 g     F .text	00000088 alt_avalon_timer_sc_init
0002aeb4 g     F .text	000000ac __clzsi2
0002ce4c g     F .text	00000224 altera_avalon_jtag_uart_write
00021650 g     F .text	00000004 __sfp_lock_acquire
0002c510 g     F .text	0000004c altera_avalon_fifo_read_fifo
000277ac g     F .text	000000f8 memchr
00023748 g     F .text	00001e7c ___vfprintf_internal_r
00020000 g       *ABS*	00000000 __alt_mem_mem1
00021be0 g     F .text	000002d0 _free_r
0002e584 g     F .text	000001a0 __call_exitprocs
000320a4 g     O .bss	00000004 __mlocale_changed
0003054c g     O .rwdata	00000004 __malloc_sbrk_base
000201b8 g     F .text	0000003c _start
000320bc g     O .bss	00000004 _alt_tick_rate
00020d50 g     F .text	0000028c encode_image
00028220 g     F .text	0000015c __lshift
000320c0 g     O .bss	00000004 _alt_nticks
0002bccc g     F .text	000000f4 read
0002c09c g     F .text	00000080 alt_sys_init
00023170 g     F .text	0000006c _open_r
0002e454 g     F .text	00000130 __register_exitproc
00027e9c g     F .text	00000258 __multiply
0002cad8 g     F .text	00000068 altera_avalon_jtag_uart_close
00021014 g     F .text	00000028 __mulsi3
0002eb00 g       *ABS*	00000000 __ram_rwdata_start
0002e760 g       *ABS*	00000000 __ram_rodata_start
000320c4 g     O .bss	00000028 __malloc_current_mallinfo
00028724 g     F .text	00000144 __d2b
0002c60c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0002dcc0 g     F .text	000000d4 alt_get_fd
0002b288 g     F .text	000000d0 __fpcmp_parts_d
000257c8 g     F .text	00000064 _close_r
0002e3d8 g     F .text	0000007c memcmp
0002c6cc g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0003237c g       *ABS*	00000000 __alt_stack_base
0002c71c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00022510 g     F .text	000000b0 _fwrite_r
00025654 g     F .text	00000174 __swsetup_r
0002c1b4 g     F .text	0000003c altera_avalon_fifo_read_status
0002a620 g     F .text	000001b4 __divdf3
00021554 g     F .text	000000fc __sfp
00028980 g     F .text	0000007c __copybits
0002ef00 g     O .rwdata	00000408 __malloc_av_
0002165c g     F .text	00000004 __sinit_lock_release
0002a33c g     F .text	000002e4 __muldf3
00023548 g     F .text	00000054 __sread
00021a64 g     F .text	00000040 fread
0002c5b8 g     F .text	0000002c altera_avalon_fifo_read_other_info
0002db28 g     F .text	00000114 alt_find_file
0002d940 g     F .text	000000a0 alt_dev_llist_insert
0002b9a4 g     F .text	00000020 __malloc_lock
000217dc g     F .text	00000028 _fprintf_r
0002be40 g     F .text	000000b0 sbrk
0002118c g     F .text	000001e8 _fflush_r
000291f0 g     F .text	000000cc _calloc_r
000217c0 g     F .text	0000001c fopen
00032090 g       *ABS*	00000000 __bss_start
00023094 g     F .text	000000dc memset
00020fdc g     F .text	00000038 main
000320b4 g     O .bss	00000004 alt_envp
00032094 g     O .bss	00000004 __malloc_max_total_mem
0002c66c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0002c2c0 g     F .text	00000028 altera_avalon_fifo_read_level
00021828 g     F .text	0000023c _fread_r
00023680 g     F .text	00000008 __sclose
00040000 g       *ABS*	00000000 __alt_heap_limit
00021178 g     F .text	00000014 fclose
000321ec g     O .bss	00000190 _atexit0
00025a68 g     F .text	0000161c _dtoa_r
000227d0 g     F .text	00000784 _malloc_r
0003056c g     O .rwdata	00000004 alt_errno
000223b0 g     F .text	000000a8 _fwalk
0002ace8 g     F .text	00000050 __divsi3
0002e9b4 g     O .rodata	00000014 __thenan_df
00021aa4 g     F .text	0000013c _malloc_trim_r
0002e760 g       *ABS*	00000000 __CTOR_END__
0002914c g     F .text	000000a4 strcmp
0002e760 g       *ABS*	00000000 __flash_rodata_start
0002e760 g       *ABS*	00000000 __DTOR_LIST__
0002a830 g     F .text	0000005c __nedf2
0002c068 g     F .text	00000034 alt_irq_init
0002bdc0 g     F .text	00000080 alt_release_fd
0002e9c8 g     O .rodata	00000100 __clz_tab
000320a0 g     O .bss	00000004 _PathLocale
0002e38c g     F .text	00000014 atexit
000255e8 g     F .text	0000006c _write_r
00027718 g     F .text	0000001c setlocale
00030548 g     O .rwdata	00000004 _impure_ptr
000320ac g     O .bss	00000004 alt_argc
0002da3c g     F .text	0000005c _do_dtors
00021eb0 g     F .text	00000474 _fseek_r
00020258 g     F .text	00000060 READ_FIFO
000232f8 g     F .text	000001ec __srefill_r
00020020 g       .exceptions	00000000 alt_irq_entry
0002857c g     F .text	00000060 __ulp
000290e8 g     F .text	00000038 __isinfd
00021678 g     F .text	00000018 __fp_unlock_all
00030558 g     O .rwdata	00000008 alt_fs_list
0002d3fc g     F .text	000000b8 alt_hostfs_write
00020020 g       *ABS*	00000000 __ram_exceptions_start
00027734 g     F .text	0000000c localeconv
0002c55c g     F .text	0000005c altera_avalon_fifo_write_other_info
0002ddb0 g     F .text	00000050 alt_ic_isr_register
000225c0 g     F .text	00000040 fwrite
000305c8 g       *ABS*	00000000 _edata
0003237c g       *ABS*	00000000 _end
000201b8 g       *ABS*	00000000 __ram_exceptions_end
0002cb40 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0002de9c g     F .text	000000a0 alt_ic_irq_disable
0002359c g     F .text	00000088 __swrite
00030550 g     O .rwdata	00000004 __malloc_trim_threshold
0002e36c g     F .text	00000020 altera_nios2_qsys_irq_init
0002e3a0 g     F .text	00000038 exit
00022458 g     F .text	000000b8 _fwalk_reent
000283d4 g     F .text	000001a8 __mdiff
0002ad38 g     F .text	0000005c __modsi3
0002c1f0 g     F .text	0000003c altera_avalon_fifo_read_ienable
00040000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
00021654 g     F .text	00000004 __sfp_lock_release
00021690 g     F .text	00000130 _fopen_r
0002e724 g     F .text	0000003c _exit
00029120 g     F .text	0000002c __isnand
0002d794 g     F .text	00000140 alt_alarm_start
0002ada4 g     F .text	00000110 __muldi3
0002c22c g     F .text	0000002c altera_avalon_fifo_read_almostfull
00022600 g     F .text	000001a8 __smakebuf_r
00023688 g     F .text	0000008c strlen
0002bb24 g     F .text	00000158 open
0002c4a4 g     F .text	0000006c altera_avalon_read_fifo
0002a8f0 g     F .text	00000064 __gedf2
00020b58 g     F .text	000001f8 initialization
0002dd94 g     F .text	0000001c alt_icache_flush_all
000201f4 g     F .text	00000064 WRITE_FIFO
000305bc g     O .rwdata	00000004 alt_priority_mask
0002de00 g     F .text	0000009c alt_ic_irq_enable
000255c4 g     F .text	00000024 __vfprintf_internal
0002a2dc g     F .text	00000060 __subdf3
00027db0 g     F .text	000000b0 __lo0bits
0002c3f4 g     F .text	00000058 altera_avalon_fifo_write_almostempty
000305c0 g     O .rwdata	00000008 alt_alarm_list
0002d9e0 g     F .text	0000005c _do_ctors
0002b430 g     F .text	000000cc close
0002b788 g     F .text	00000080 alt_load
0002af60 g     F .text	00000224 __pack_d
000227bc g     F .text	00000014 free
00021658 g     F .text	00000004 __sinit_lock_acquire
00027b00 g     F .text	00000144 __multadd
00027ad8 g     F .text	00000028 _Bfree
0002d56c g     F .text	00000228 alt_hostfs_fstat



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08406e14 	ori	at,at,440
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200ec0 	call	200ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000306 	br	20098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   2008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)

00020094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   20094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   20098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   2009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200e8:	ef80083a 	eret

000200ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200ec:	defff904 	addi	sp,sp,-28
   200f0:	dfc00615 	stw	ra,24(sp)
   200f4:	df000515 	stw	fp,20(sp)
   200f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   200fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20100:	0005313a 	rdctl	r2,ipending
   20104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20114:	00800044 	movi	r2,1
   20118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2011c:	e0fffb17 	ldw	r3,-20(fp)
   20120:	e0bffc17 	ldw	r2,-16(fp)
   20124:	1884703a 	and	r2,r3,r2
   20128:	10001726 	beq	r2,zero,20188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2012c:	00c000f4 	movhi	r3,3
   20130:	18c83b04 	addi	r3,r3,8428
   20134:	e0bffd17 	ldw	r2,-12(fp)
   20138:	100490fa 	slli	r2,r2,3
   2013c:	1885883a 	add	r2,r3,r2
   20140:	10c00017 	ldw	r3,0(r2)
   20144:	010000f4 	movhi	r4,3
   20148:	21083b04 	addi	r4,r4,8428
   2014c:	e0bffd17 	ldw	r2,-12(fp)
   20150:	100490fa 	slli	r2,r2,3
   20154:	2085883a 	add	r2,r4,r2
   20158:	10800104 	addi	r2,r2,4
   2015c:	10800017 	ldw	r2,0(r2)
   20160:	1009883a 	mov	r4,r2
   20164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2016c:	0005313a 	rdctl	r2,ipending
   20170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   20178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   2017c:	e0bffb17 	ldw	r2,-20(fp)
   20180:	103fe31e 	bne	r2,zero,20110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   20184:	00000706 	br	201a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   20188:	e0bffc17 	ldw	r2,-16(fp)
   2018c:	1085883a 	add	r2,r2,r2
   20190:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20194:	e0bffd17 	ldw	r2,-12(fp)
   20198:	10800044 	addi	r2,r2,1
   2019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a0:	003fde06 	br	2011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   201a4:	e037883a 	mov	sp,fp
   201a8:	dfc00117 	ldw	ra,4(sp)
   201ac:	df000017 	ldw	fp,0(sp)
   201b0:	dec00204 	addi	sp,sp,8
   201b4:	f800283a 	ret

Disassembly of section .text:

000201b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   201b8:	06c00134 	movhi	sp,4
    ori sp, sp, %lo(__alt_stack_pointer)
   201bc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   201c0:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
   201c4:	d6a15114 	ori	gp,gp,34116
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   201c8:	008000f4 	movhi	r2,3
    ori r2, r2, %lo(__bss_start)
   201cc:	10882414 	ori	r2,r2,8336

    movhi r3, %hi(__bss_end)
   201d0:	00c000f4 	movhi	r3,3
    ori r3, r3, %lo(__bss_end)
   201d4:	18c8df14 	ori	r3,r3,9084

    beq r2, r3, 1f
   201d8:	10c00326 	beq	r2,r3,201e8 <_start+0x30>

0:
    stw zero, (r2)
   201dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   201e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   201e4:	10fffd36 	bltu	r2,r3,201dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   201e8:	002b7880 	call	2b788 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   201ec:	002b92c0 	call	2b92c <alt_main>

000201f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   201f0:	003fff06 	br	201f0 <alt_after_alt_main>

000201f4 <WRITE_FIFO>:
 */

#include "FIFO.h"

void WRITE_FIFO(int *buffer, int inBase, int controllBase)
{
   201f4:	defffb04 	addi	sp,sp,-20
   201f8:	dfc00415 	stw	ra,16(sp)
   201fc:	df000315 	stw	fp,12(sp)
   20200:	df000304 	addi	fp,sp,12
   20204:	e13ffd15 	stw	r4,-12(fp)
   20208:	e17ffe15 	stw	r5,-8(fp)
   2020c:	e1bfff15 	stw	r6,-4(fp)

	// Check if FIFO is full before writing
	while (altera_avalon_fifo_read_level(controllBase) == ALMOST_FULL)
   20210:	0001883a 	nop
   20214:	e0bfff17 	ldw	r2,-4(fp)
   20218:	1009883a 	mov	r4,r2
   2021c:	002c2c00 	call	2c2c0 <altera_avalon_fifo_read_level>
   20220:	10800220 	cmpeqi	r2,r2,8
   20224:	103ffb1e 	bne	r2,zero,20214 <WRITE_FIFO+0x20>
	{
	}

	// Write data to FIFO
	altera_avalon_fifo_write_fifo(inBase, controllBase, *buffer);
   20228:	e13ffe17 	ldw	r4,-8(fp)
   2022c:	e0ffff17 	ldw	r3,-4(fp)
   20230:	e0bffd17 	ldw	r2,-12(fp)
   20234:	10800017 	ldw	r2,0(r2)
   20238:	180b883a 	mov	r5,r3
   2023c:	100d883a 	mov	r6,r2
   20240:	002c44c0 	call	2c44c <altera_avalon_fifo_write_fifo>
}
   20244:	e037883a 	mov	sp,fp
   20248:	dfc00117 	ldw	ra,4(sp)
   2024c:	df000017 	ldw	fp,0(sp)
   20250:	dec00204 	addi	sp,sp,8
   20254:	f800283a 	ret

00020258 <READ_FIFO>:

void READ_FIFO(int *buffer, int outBase, int controllBase)
{
   20258:	defffb04 	addi	sp,sp,-20
   2025c:	dfc00415 	stw	ra,16(sp)
   20260:	df000315 	stw	fp,12(sp)
   20264:	df000304 	addi	fp,sp,12
   20268:	e13ffd15 	stw	r4,-12(fp)
   2026c:	e17ffe15 	stw	r5,-8(fp)
   20270:	e1bfff15 	stw	r6,-4(fp)
	// Wait if the FIFO is empty
	// while (altera_avalon_fifo_read_status(FIFO_MEM_IN_CSR_BASE, ALTERA_AVALON_FIFO_STATUS_EMPTY))
	// 	;

	while (altera_avalon_fifo_read_level(controllBase) == ALMOST_EMTY)
   20274:	0001883a 	nop
   20278:	e0bfff17 	ldw	r2,-4(fp)
   2027c:	1009883a 	mov	r4,r2
   20280:	002c2c00 	call	2c2c0 <altera_avalon_fifo_read_level>
   20284:	103ffc26 	beq	r2,zero,20278 <READ_FIFO+0x20>
	{
	}

	// Read the data
	*buffer = altera_avalon_fifo_read_fifo(outBase, controllBase);
   20288:	e0fffe17 	ldw	r3,-8(fp)
   2028c:	e0bfff17 	ldw	r2,-4(fp)
   20290:	1809883a 	mov	r4,r3
   20294:	100b883a 	mov	r5,r2
   20298:	002c5100 	call	2c510 <altera_avalon_fifo_read_fifo>
   2029c:	e0fffd17 	ldw	r3,-12(fp)
   202a0:	18800015 	stw	r2,0(r3)
}
   202a4:	e037883a 	mov	sp,fp
   202a8:	dfc00117 	ldw	ra,4(sp)
   202ac:	df000017 	ldw	fp,0(sp)
   202b0:	dec00204 	addi	sp,sp,8
   202b4:	f800283a 	ret

000202b8 <FIFO_INIT>:

// Initialization
void FIFO_INIT(int controllBase)
{
   202b8:	defffd04 	addi	sp,sp,-12
   202bc:	dfc00215 	stw	ra,8(sp)
   202c0:	df000115 	stw	fp,4(sp)
   202c4:	df000104 	addi	fp,sp,4
   202c8:	e13fff15 	stw	r4,-4(fp)
	altera_avalon_fifo_init(controllBase,
   202cc:	e0bfff17 	ldw	r2,-4(fp)
   202d0:	1009883a 	mov	r4,r2
   202d4:	000b883a 	mov	r5,zero
   202d8:	000d883a 	mov	r6,zero
   202dc:	01c00204 	movi	r7,8
   202e0:	002c11c0 	call	2c11c <altera_avalon_fifo_init>
							0,
							ALMOST_EMTY,  // Almost empty threshold
							ALMOST_FULL); // Almost full threshold
   202e4:	e037883a 	mov	sp,fp
   202e8:	dfc00117 	ldw	ra,4(sp)
   202ec:	df000017 	ldw	fp,0(sp)
   202f0:	dec00204 	addi	sp,sp,8
   202f4:	f800283a 	ret

000202f8 <read_444_format>:

#ifndef READYUV_H
#define READYUV_H

void read_444_format(JPEG_ENCODER_STRUCTURE *jpeg_encoder_structure, UINT8 *input_ptr)
{
   202f8:	defff304 	addi	sp,sp,-52
   202fc:	dfc00c15 	stw	ra,48(sp)
   20300:	df000b15 	stw	fp,44(sp)
   20304:	dc000a15 	stw	r16,40(sp)
   20308:	df000a04 	addi	fp,sp,40
   2030c:	e13ffe15 	stw	r4,-8(fp)
   20310:	e17fff15 	stw	r5,-4(fp)
	INT32 i, j;

	UINT8 R, G, B;
	INT32 Y, Cb, Cr;

	UINT16 rows = jpeg_encoder_structure->rows;
   20314:	e0bffe17 	ldw	r2,-8(fp)
   20318:	1080030b 	ldhu	r2,12(r2)
   2031c:	e0bff80d 	sth	r2,-32(fp)
	UINT16 cols = jpeg_encoder_structure->cols;
   20320:	e0bffe17 	ldw	r2,-8(fp)
   20324:	1080038b 	ldhu	r2,14(r2)
   20328:	e0bff88d 	sth	r2,-30(fp)
	UINT16 incr = jpeg_encoder_structure->incr;
   2032c:	e0bffe17 	ldw	r2,-8(fp)
   20330:	1080050b 	ldhu	r2,20(r2)
   20334:	e0bff90d 	sth	r2,-28(fp)

	for (i = rows; i > 0; i--)
   20338:	e0bff80b 	ldhu	r2,-32(fp)
   2033c:	e0bff615 	stw	r2,-40(fp)
   20340:	0000f606 	br	2071c <read_444_format+0x424>
	{
		for (j = cols; j > 0; j--)
   20344:	e0bff88b 	ldhu	r2,-30(fp)
   20348:	e0bff715 	stw	r2,-36(fp)
   2034c:	00007506 	br	20524 <read_444_format+0x22c>
		{
			R = *input_ptr++;
   20350:	e0bfff17 	ldw	r2,-4(fp)
   20354:	10800003 	ldbu	r2,0(r2)
   20358:	e0bff985 	stb	r2,-26(fp)
   2035c:	e0bfff17 	ldw	r2,-4(fp)
   20360:	10800044 	addi	r2,r2,1
   20364:	e0bfff15 	stw	r2,-4(fp)
			G = *input_ptr++;
   20368:	e0bfff17 	ldw	r2,-4(fp)
   2036c:	10800003 	ldbu	r2,0(r2)
   20370:	e0bff9c5 	stb	r2,-25(fp)
   20374:	e0bfff17 	ldw	r2,-4(fp)
   20378:	10800044 	addi	r2,r2,1
   2037c:	e0bfff15 	stw	r2,-4(fp)
			B = *input_ptr++;
   20380:	e0bfff17 	ldw	r2,-4(fp)
   20384:	10800003 	ldbu	r2,0(r2)
   20388:	e0bffa05 	stb	r2,-24(fp)
   2038c:	e0bfff17 	ldw	r2,-4(fp)
   20390:	10800044 	addi	r2,r2,1
   20394:	e0bfff15 	stw	r2,-4(fp)

			Y = ((77 * R + 150 * G + 29 * B) >> 8);
   20398:	e0bff983 	ldbu	r2,-26(fp)
   2039c:	1009883a 	mov	r4,r2
   203a0:	01401344 	movi	r5,77
   203a4:	00210140 	call	21014 <__mulsi3>
   203a8:	1021883a 	mov	r16,r2
   203ac:	e0bff9c3 	ldbu	r2,-25(fp)
   203b0:	1009883a 	mov	r4,r2
   203b4:	01402584 	movi	r5,150
   203b8:	00210140 	call	21014 <__mulsi3>
   203bc:	80a1883a 	add	r16,r16,r2
   203c0:	e0bffa03 	ldbu	r2,-24(fp)
   203c4:	1009883a 	mov	r4,r2
   203c8:	01400744 	movi	r5,29
   203cc:	00210140 	call	21014 <__mulsi3>
   203d0:	8085883a 	add	r2,r16,r2
   203d4:	1005d23a 	srai	r2,r2,8
   203d8:	e0bffb15 	stw	r2,-20(fp)
			Cb = ((-43 * R - 85 * G + 128 * B) >> 8) + 128;
   203dc:	e0bff983 	ldbu	r2,-26(fp)
   203e0:	1009883a 	mov	r4,r2
   203e4:	017ff544 	movi	r5,-43
   203e8:	00210140 	call	21014 <__mulsi3>
   203ec:	1021883a 	mov	r16,r2
   203f0:	e0bff9c3 	ldbu	r2,-25(fp)
   203f4:	1009883a 	mov	r4,r2
   203f8:	017feac4 	movi	r5,-85
   203fc:	00210140 	call	21014 <__mulsi3>
   20400:	8087883a 	add	r3,r16,r2
   20404:	e0bffa03 	ldbu	r2,-24(fp)
   20408:	100491fa 	slli	r2,r2,7
   2040c:	1885883a 	add	r2,r3,r2
   20410:	1005d23a 	srai	r2,r2,8
   20414:	10802004 	addi	r2,r2,128
   20418:	e0bffc15 	stw	r2,-16(fp)
			Cr = ((128 * R - 107 * G - 21 * B) >> 8) + 128;
   2041c:	e0bff983 	ldbu	r2,-26(fp)
   20420:	102091fa 	slli	r16,r2,7
   20424:	e0bff9c3 	ldbu	r2,-25(fp)
   20428:	1009883a 	mov	r4,r2
   2042c:	017fe544 	movi	r5,-107
   20430:	00210140 	call	21014 <__mulsi3>
   20434:	80a1883a 	add	r16,r16,r2
   20438:	e0bffa03 	ldbu	r2,-24(fp)
   2043c:	1009883a 	mov	r4,r2
   20440:	017ffac4 	movi	r5,-21
   20444:	00210140 	call	21014 <__mulsi3>
   20448:	8085883a 	add	r2,r16,r2
   2044c:	1005d23a 	srai	r2,r2,8
   20450:	10802004 	addi	r2,r2,128
   20454:	e0bffd15 	stw	r2,-12(fp)

			if (Y < 0)
   20458:	e0bffb17 	ldw	r2,-20(fp)
   2045c:	1000020e 	bge	r2,zero,20468 <read_444_format+0x170>
				Y = 0;
   20460:	e03ffb15 	stw	zero,-20(fp)
   20464:	00000506 	br	2047c <read_444_format+0x184>
			else if (Y > 255)
   20468:	e0bffb17 	ldw	r2,-20(fp)
   2046c:	10804010 	cmplti	r2,r2,256
   20470:	1000021e 	bne	r2,zero,2047c <read_444_format+0x184>
				Y = 255;
   20474:	00803fc4 	movi	r2,255
   20478:	e0bffb15 	stw	r2,-20(fp)

			if (Cb < 0)
   2047c:	e0bffc17 	ldw	r2,-16(fp)
   20480:	1000020e 	bge	r2,zero,2048c <read_444_format+0x194>
				Cb = 0;
   20484:	e03ffc15 	stw	zero,-16(fp)
   20488:	00000506 	br	204a0 <read_444_format+0x1a8>
			else if (Cb > 255)
   2048c:	e0bffc17 	ldw	r2,-16(fp)
   20490:	10804010 	cmplti	r2,r2,256
   20494:	1000021e 	bne	r2,zero,204a0 <read_444_format+0x1a8>
				Cb = 255;
   20498:	00803fc4 	movi	r2,255
   2049c:	e0bffc15 	stw	r2,-16(fp)

			if (Cr < 0)
   204a0:	e0bffd17 	ldw	r2,-12(fp)
   204a4:	1000020e 	bge	r2,zero,204b0 <read_444_format+0x1b8>
				Cr = 0;
   204a8:	e03ffd15 	stw	zero,-12(fp)
   204ac:	00000506 	br	204c4 <read_444_format+0x1cc>
			else if (Cr > 255)
   204b0:	e0bffd17 	ldw	r2,-12(fp)
   204b4:	10804010 	cmplti	r2,r2,256
   204b8:	1000021e 	bne	r2,zero,204c4 <read_444_format+0x1cc>
				Cr = 255;
   204bc:	00803fc4 	movi	r2,255
   204c0:	e0bffd15 	stw	r2,-12(fp)

			// send into fifo
			WRITE_FIFO(&Y, IN_BASE_1to2A, CONTROL_BASE_1to2A);
   204c4:	e0bffb04 	addi	r2,fp,-20
   204c8:	1009883a 	mov	r4,r2
   204cc:	01400134 	movhi	r5,4
   204d0:	29443fc4 	addi	r5,r5,4351
   204d4:	01800134 	movhi	r6,4
   204d8:	31806804 	addi	r6,r6,416
   204dc:	00201f40 	call	201f4 <WRITE_FIFO>
			WRITE_FIFO(&Cb, IN_BASE_1to2B, CONTROL_BASE_1to2B);
   204e0:	e0bffc04 	addi	r2,fp,-16
   204e4:	1009883a 	mov	r4,r2
   204e8:	01400134 	movhi	r5,4
   204ec:	29443e04 	addi	r5,r5,4344
   204f0:	01800134 	movhi	r6,4
   204f4:	31842004 	addi	r6,r6,4224
   204f8:	00201f40 	call	201f4 <WRITE_FIFO>
			WRITE_FIFO(&Cr, IN_BASE_1to2C, CONTROL_BASE_1to2C);
   204fc:	e0bffd04 	addi	r2,fp,-12
   20500:	1009883a 	mov	r4,r2
   20504:	01400134 	movhi	r5,4
   20508:	29443d04 	addi	r5,r5,4340
   2050c:	01800134 	movhi	r6,4
   20510:	31841804 	addi	r6,r6,4192
   20514:	00201f40 	call	201f4 <WRITE_FIFO>
	UINT16 cols = jpeg_encoder_structure->cols;
	UINT16 incr = jpeg_encoder_structure->incr;

	for (i = rows; i > 0; i--)
	{
		for (j = cols; j > 0; j--)
   20518:	e0bff717 	ldw	r2,-36(fp)
   2051c:	10bfffc4 	addi	r2,r2,-1
   20520:	e0bff715 	stw	r2,-36(fp)
   20524:	e0bff717 	ldw	r2,-36(fp)
   20528:	00bf8916 	blt	zero,r2,20350 <read_444_format+0x58>
			WRITE_FIFO(&Y, IN_BASE_1to2A, CONTROL_BASE_1to2A);
			WRITE_FIFO(&Cb, IN_BASE_1to2B, CONTROL_BASE_1to2B);
			WRITE_FIFO(&Cr, IN_BASE_1to2C, CONTROL_BASE_1to2C);
		}

		if ((j = (8 - cols)) > 0)
   2052c:	e0bff88b 	ldhu	r2,-30(fp)
   20530:	00c00204 	movi	r3,8
   20534:	1885c83a 	sub	r2,r3,r2
   20538:	e0bff715 	stw	r2,-36(fp)
   2053c:	e0bff717 	ldw	r2,-36(fp)
   20540:	00806f0e 	bge	zero,r2,20700 <read_444_format+0x408>
		{
			R = *(input_ptr - 3);
   20544:	e0bfff17 	ldw	r2,-4(fp)
   20548:	10bfff43 	ldbu	r2,-3(r2)
   2054c:	e0bff985 	stb	r2,-26(fp)
			G = *(input_ptr - 2);
   20550:	e0bfff17 	ldw	r2,-4(fp)
   20554:	10bfff83 	ldbu	r2,-2(r2)
   20558:	e0bff9c5 	stb	r2,-25(fp)
			B = *(input_ptr - 1);
   2055c:	e0bfff17 	ldw	r2,-4(fp)
   20560:	10bfffc3 	ldbu	r2,-1(r2)
   20564:	e0bffa05 	stb	r2,-24(fp)

			Y = ((77 * R + 150 * G + 29 * B) >> 8);
   20568:	e0bff983 	ldbu	r2,-26(fp)
   2056c:	1009883a 	mov	r4,r2
   20570:	01401344 	movi	r5,77
   20574:	00210140 	call	21014 <__mulsi3>
   20578:	1021883a 	mov	r16,r2
   2057c:	e0bff9c3 	ldbu	r2,-25(fp)
   20580:	1009883a 	mov	r4,r2
   20584:	01402584 	movi	r5,150
   20588:	00210140 	call	21014 <__mulsi3>
   2058c:	80a1883a 	add	r16,r16,r2
   20590:	e0bffa03 	ldbu	r2,-24(fp)
   20594:	1009883a 	mov	r4,r2
   20598:	01400744 	movi	r5,29
   2059c:	00210140 	call	21014 <__mulsi3>
   205a0:	8085883a 	add	r2,r16,r2
   205a4:	1005d23a 	srai	r2,r2,8
   205a8:	e0bffb15 	stw	r2,-20(fp)
			Cb = ((-43 * R - 85 * G + 128 * B) >> 8) + 128;
   205ac:	e0bff983 	ldbu	r2,-26(fp)
   205b0:	1009883a 	mov	r4,r2
   205b4:	017ff544 	movi	r5,-43
   205b8:	00210140 	call	21014 <__mulsi3>
   205bc:	1021883a 	mov	r16,r2
   205c0:	e0bff9c3 	ldbu	r2,-25(fp)
   205c4:	1009883a 	mov	r4,r2
   205c8:	017feac4 	movi	r5,-85
   205cc:	00210140 	call	21014 <__mulsi3>
   205d0:	8087883a 	add	r3,r16,r2
   205d4:	e0bffa03 	ldbu	r2,-24(fp)
   205d8:	100491fa 	slli	r2,r2,7
   205dc:	1885883a 	add	r2,r3,r2
   205e0:	1005d23a 	srai	r2,r2,8
   205e4:	10802004 	addi	r2,r2,128
   205e8:	e0bffc15 	stw	r2,-16(fp)
			Cr = ((128 * R - 107 * G - 21 * B) >> 8) + 128;
   205ec:	e0bff983 	ldbu	r2,-26(fp)
   205f0:	102091fa 	slli	r16,r2,7
   205f4:	e0bff9c3 	ldbu	r2,-25(fp)
   205f8:	1009883a 	mov	r4,r2
   205fc:	017fe544 	movi	r5,-107
   20600:	00210140 	call	21014 <__mulsi3>
   20604:	80a1883a 	add	r16,r16,r2
   20608:	e0bffa03 	ldbu	r2,-24(fp)
   2060c:	1009883a 	mov	r4,r2
   20610:	017ffac4 	movi	r5,-21
   20614:	00210140 	call	21014 <__mulsi3>
   20618:	8085883a 	add	r2,r16,r2
   2061c:	1005d23a 	srai	r2,r2,8
   20620:	10802004 	addi	r2,r2,128
   20624:	e0bffd15 	stw	r2,-12(fp)

			if (Y < 0)
   20628:	e0bffb17 	ldw	r2,-20(fp)
   2062c:	1000020e 	bge	r2,zero,20638 <read_444_format+0x340>
				Y = 0;
   20630:	e03ffb15 	stw	zero,-20(fp)
   20634:	00000506 	br	2064c <read_444_format+0x354>
			else if (Y > 255)
   20638:	e0bffb17 	ldw	r2,-20(fp)
   2063c:	10804010 	cmplti	r2,r2,256
   20640:	1000021e 	bne	r2,zero,2064c <read_444_format+0x354>
				Y = 255;
   20644:	00803fc4 	movi	r2,255
   20648:	e0bffb15 	stw	r2,-20(fp)

			if (Cb < 0)
   2064c:	e0bffc17 	ldw	r2,-16(fp)
   20650:	1000020e 	bge	r2,zero,2065c <read_444_format+0x364>
				Cb = 0;
   20654:	e03ffc15 	stw	zero,-16(fp)
   20658:	00000506 	br	20670 <read_444_format+0x378>
			else if (Cb > 255)
   2065c:	e0bffc17 	ldw	r2,-16(fp)
   20660:	10804010 	cmplti	r2,r2,256
   20664:	1000021e 	bne	r2,zero,20670 <read_444_format+0x378>
				Cb = 255;
   20668:	00803fc4 	movi	r2,255
   2066c:	e0bffc15 	stw	r2,-16(fp)

			if (Cr < 0)
   20670:	e0bffd17 	ldw	r2,-12(fp)
   20674:	1000020e 	bge	r2,zero,20680 <read_444_format+0x388>
				Cr = 0;
   20678:	e03ffd15 	stw	zero,-12(fp)
			else if (Cr > 255)
				Cr = 255;

			for (; j > 0; j--)
   2067c:	00001e06 	br	206f8 <read_444_format+0x400>
			else if (Cb > 255)
				Cb = 255;

			if (Cr < 0)
				Cr = 0;
			else if (Cr > 255)
   20680:	e0bffd17 	ldw	r2,-12(fp)
   20684:	10804010 	cmplti	r2,r2,256
   20688:	10001b1e 	bne	r2,zero,206f8 <read_444_format+0x400>
				Cr = 255;
   2068c:	00803fc4 	movi	r2,255
   20690:	e0bffd15 	stw	r2,-12(fp)

			for (; j > 0; j--)
   20694:	00001806 	br	206f8 <read_444_format+0x400>
			{

				WRITE_FIFO(&Y, IN_BASE_1to2A, CONTROL_BASE_1to2A);
   20698:	e0bffb04 	addi	r2,fp,-20
   2069c:	1009883a 	mov	r4,r2
   206a0:	01400134 	movhi	r5,4
   206a4:	29443fc4 	addi	r5,r5,4351
   206a8:	01800134 	movhi	r6,4
   206ac:	31806804 	addi	r6,r6,416
   206b0:	00201f40 	call	201f4 <WRITE_FIFO>
				WRITE_FIFO(&Cb, IN_BASE_1to2B, CONTROL_BASE_1to2B);
   206b4:	e0bffc04 	addi	r2,fp,-16
   206b8:	1009883a 	mov	r4,r2
   206bc:	01400134 	movhi	r5,4
   206c0:	29443e04 	addi	r5,r5,4344
   206c4:	01800134 	movhi	r6,4
   206c8:	31842004 	addi	r6,r6,4224
   206cc:	00201f40 	call	201f4 <WRITE_FIFO>
				WRITE_FIFO(&Cr, IN_BASE_1to2C, CONTROL_BASE_1to2C);
   206d0:	e0bffd04 	addi	r2,fp,-12
   206d4:	1009883a 	mov	r4,r2
   206d8:	01400134 	movhi	r5,4
   206dc:	29443d04 	addi	r5,r5,4340
   206e0:	01800134 	movhi	r6,4
   206e4:	31841804 	addi	r6,r6,4192
   206e8:	00201f40 	call	201f4 <WRITE_FIFO>
			if (Cr < 0)
				Cr = 0;
			else if (Cr > 255)
				Cr = 255;

			for (; j > 0; j--)
   206ec:	e0bff717 	ldw	r2,-36(fp)
   206f0:	10bfffc4 	addi	r2,r2,-1
   206f4:	e0bff715 	stw	r2,-36(fp)
   206f8:	e0bff717 	ldw	r2,-36(fp)
   206fc:	00bfe616 	blt	zero,r2,20698 <read_444_format+0x3a0>
				WRITE_FIFO(&Cb, IN_BASE_1to2B, CONTROL_BASE_1to2B);
				WRITE_FIFO(&Cr, IN_BASE_1to2C, CONTROL_BASE_1to2C);
			}
		}

		input_ptr += incr;
   20700:	e0bff90b 	ldhu	r2,-28(fp)
   20704:	e0ffff17 	ldw	r3,-4(fp)
   20708:	1885883a 	add	r2,r3,r2
   2070c:	e0bfff15 	stw	r2,-4(fp)

	UINT16 rows = jpeg_encoder_structure->rows;
	UINT16 cols = jpeg_encoder_structure->cols;
	UINT16 incr = jpeg_encoder_structure->incr;

	for (i = rows; i > 0; i--)
   20710:	e0bff617 	ldw	r2,-40(fp)
   20714:	10bfffc4 	addi	r2,r2,-1
   20718:	e0bff615 	stw	r2,-40(fp)
   2071c:	e0bff617 	ldw	r2,-40(fp)
   20720:	00bf0816 	blt	zero,r2,20344 <read_444_format+0x4c>
		}

		input_ptr += incr;
	}

	input_ptr -= incr;
   20724:	e0bff90b 	ldhu	r2,-28(fp)
   20728:	0085c83a 	sub	r2,zero,r2
   2072c:	e0ffff17 	ldw	r3,-4(fp)
   20730:	1885883a 	add	r2,r3,r2
   20734:	e0bfff15 	stw	r2,-4(fp)

	for (i = 8 - rows; i > 0; i--)
   20738:	e0bff80b 	ldhu	r2,-32(fp)
   2073c:	00c00204 	movi	r3,8
   20740:	1885c83a 	sub	r2,r3,r2
   20744:	e0bff615 	stw	r2,-40(fp)
   20748:	0000fb06 	br	20b38 <read_444_format+0x840>
	{
		for (j = cols * 3; j > 0;)
   2074c:	e0fff88b 	ldhu	r3,-30(fp)
   20750:	1805883a 	mov	r2,r3
   20754:	1085883a 	add	r2,r2,r2
   20758:	10c5883a 	add	r2,r2,r3
   2075c:	e0bff715 	stw	r2,-36(fp)
   20760:	00007b06 	br	20950 <read_444_format+0x658>
		{
			R = *(input_ptr - (j--));
   20764:	e0bff717 	ldw	r2,-36(fp)
   20768:	0085c83a 	sub	r2,zero,r2
   2076c:	e0ffff17 	ldw	r3,-4(fp)
   20770:	1885883a 	add	r2,r3,r2
   20774:	10800003 	ldbu	r2,0(r2)
   20778:	e0bff985 	stb	r2,-26(fp)
   2077c:	e0bff717 	ldw	r2,-36(fp)
   20780:	10bfffc4 	addi	r2,r2,-1
   20784:	e0bff715 	stw	r2,-36(fp)
			G = *(input_ptr - (j--));
   20788:	e0bff717 	ldw	r2,-36(fp)
   2078c:	0085c83a 	sub	r2,zero,r2
   20790:	e0ffff17 	ldw	r3,-4(fp)
   20794:	1885883a 	add	r2,r3,r2
   20798:	10800003 	ldbu	r2,0(r2)
   2079c:	e0bff9c5 	stb	r2,-25(fp)
   207a0:	e0bff717 	ldw	r2,-36(fp)
   207a4:	10bfffc4 	addi	r2,r2,-1
   207a8:	e0bff715 	stw	r2,-36(fp)
			B = *(input_ptr - (j--));
   207ac:	e0bff717 	ldw	r2,-36(fp)
   207b0:	0085c83a 	sub	r2,zero,r2
   207b4:	e0ffff17 	ldw	r3,-4(fp)
   207b8:	1885883a 	add	r2,r3,r2
   207bc:	10800003 	ldbu	r2,0(r2)
   207c0:	e0bffa05 	stb	r2,-24(fp)
   207c4:	e0bff717 	ldw	r2,-36(fp)
   207c8:	10bfffc4 	addi	r2,r2,-1
   207cc:	e0bff715 	stw	r2,-36(fp)

			Y = ((77 * R + 150 * G + 29 * B) >> 8);
   207d0:	e0bff983 	ldbu	r2,-26(fp)
   207d4:	1009883a 	mov	r4,r2
   207d8:	01401344 	movi	r5,77
   207dc:	00210140 	call	21014 <__mulsi3>
   207e0:	1021883a 	mov	r16,r2
   207e4:	e0bff9c3 	ldbu	r2,-25(fp)
   207e8:	1009883a 	mov	r4,r2
   207ec:	01402584 	movi	r5,150
   207f0:	00210140 	call	21014 <__mulsi3>
   207f4:	80a1883a 	add	r16,r16,r2
   207f8:	e0bffa03 	ldbu	r2,-24(fp)
   207fc:	1009883a 	mov	r4,r2
   20800:	01400744 	movi	r5,29
   20804:	00210140 	call	21014 <__mulsi3>
   20808:	8085883a 	add	r2,r16,r2
   2080c:	1005d23a 	srai	r2,r2,8
   20810:	e0bffb15 	stw	r2,-20(fp)
			Cb = ((-43 * R - 85 * G + 128 * B) >> 8) + 128;
   20814:	e0bff983 	ldbu	r2,-26(fp)
   20818:	1009883a 	mov	r4,r2
   2081c:	017ff544 	movi	r5,-43
   20820:	00210140 	call	21014 <__mulsi3>
   20824:	1021883a 	mov	r16,r2
   20828:	e0bff9c3 	ldbu	r2,-25(fp)
   2082c:	1009883a 	mov	r4,r2
   20830:	017feac4 	movi	r5,-85
   20834:	00210140 	call	21014 <__mulsi3>
   20838:	8087883a 	add	r3,r16,r2
   2083c:	e0bffa03 	ldbu	r2,-24(fp)
   20840:	100491fa 	slli	r2,r2,7
   20844:	1885883a 	add	r2,r3,r2
   20848:	1005d23a 	srai	r2,r2,8
   2084c:	10802004 	addi	r2,r2,128
   20850:	e0bffc15 	stw	r2,-16(fp)
			Cr = ((128 * R - 107 * G - 21 * B) >> 8) + 128;
   20854:	e0bff983 	ldbu	r2,-26(fp)
   20858:	102091fa 	slli	r16,r2,7
   2085c:	e0bff9c3 	ldbu	r2,-25(fp)
   20860:	1009883a 	mov	r4,r2
   20864:	017fe544 	movi	r5,-107
   20868:	00210140 	call	21014 <__mulsi3>
   2086c:	80a1883a 	add	r16,r16,r2
   20870:	e0bffa03 	ldbu	r2,-24(fp)
   20874:	1009883a 	mov	r4,r2
   20878:	017ffac4 	movi	r5,-21
   2087c:	00210140 	call	21014 <__mulsi3>
   20880:	8085883a 	add	r2,r16,r2
   20884:	1005d23a 	srai	r2,r2,8
   20888:	10802004 	addi	r2,r2,128
   2088c:	e0bffd15 	stw	r2,-12(fp)

			if (Y < 0)
   20890:	e0bffb17 	ldw	r2,-20(fp)
   20894:	1000020e 	bge	r2,zero,208a0 <read_444_format+0x5a8>
				Y = 0;
   20898:	e03ffb15 	stw	zero,-20(fp)
   2089c:	00000506 	br	208b4 <read_444_format+0x5bc>
			else if (Y > 255)
   208a0:	e0bffb17 	ldw	r2,-20(fp)
   208a4:	10804010 	cmplti	r2,r2,256
   208a8:	1000021e 	bne	r2,zero,208b4 <read_444_format+0x5bc>
				Y = 255;
   208ac:	00803fc4 	movi	r2,255
   208b0:	e0bffb15 	stw	r2,-20(fp)

			if (Cb < 0)
   208b4:	e0bffc17 	ldw	r2,-16(fp)
   208b8:	1000020e 	bge	r2,zero,208c4 <read_444_format+0x5cc>
				Cb = 0;
   208bc:	e03ffc15 	stw	zero,-16(fp)
   208c0:	00000506 	br	208d8 <read_444_format+0x5e0>
			else if (Cb > 255)
   208c4:	e0bffc17 	ldw	r2,-16(fp)
   208c8:	10804010 	cmplti	r2,r2,256
   208cc:	1000021e 	bne	r2,zero,208d8 <read_444_format+0x5e0>
				Cb = 255;
   208d0:	00803fc4 	movi	r2,255
   208d4:	e0bffc15 	stw	r2,-16(fp)

			if (Cr < 0)
   208d8:	e0bffd17 	ldw	r2,-12(fp)
   208dc:	1000020e 	bge	r2,zero,208e8 <read_444_format+0x5f0>
				Cr = 0;
   208e0:	e03ffd15 	stw	zero,-12(fp)
   208e4:	00000506 	br	208fc <read_444_format+0x604>
			else if (Cr > 255)
   208e8:	e0bffd17 	ldw	r2,-12(fp)
   208ec:	10804010 	cmplti	r2,r2,256
   208f0:	1000021e 	bne	r2,zero,208fc <read_444_format+0x604>
				Cr = 255;
   208f4:	00803fc4 	movi	r2,255
   208f8:	e0bffd15 	stw	r2,-12(fp)

			WRITE_FIFO(&Y, IN_BASE_1to2A, CONTROL_BASE_1to2A);
   208fc:	e0bffb04 	addi	r2,fp,-20
   20900:	1009883a 	mov	r4,r2
   20904:	01400134 	movhi	r5,4
   20908:	29443fc4 	addi	r5,r5,4351
   2090c:	01800134 	movhi	r6,4
   20910:	31806804 	addi	r6,r6,416
   20914:	00201f40 	call	201f4 <WRITE_FIFO>
			WRITE_FIFO(&Cb, IN_BASE_1to2B, CONTROL_BASE_1to2B);
   20918:	e0bffc04 	addi	r2,fp,-16
   2091c:	1009883a 	mov	r4,r2
   20920:	01400134 	movhi	r5,4
   20924:	29443e04 	addi	r5,r5,4344
   20928:	01800134 	movhi	r6,4
   2092c:	31842004 	addi	r6,r6,4224
   20930:	00201f40 	call	201f4 <WRITE_FIFO>
			WRITE_FIFO(&Cr, IN_BASE_1to2C, CONTROL_BASE_1to2C);
   20934:	e0bffd04 	addi	r2,fp,-12
   20938:	1009883a 	mov	r4,r2
   2093c:	01400134 	movhi	r5,4
   20940:	29443d04 	addi	r5,r5,4340
   20944:	01800134 	movhi	r6,4
   20948:	31841804 	addi	r6,r6,4192
   2094c:	00201f40 	call	201f4 <WRITE_FIFO>

	input_ptr -= incr;

	for (i = 8 - rows; i > 0; i--)
	{
		for (j = cols * 3; j > 0;)
   20950:	e0bff717 	ldw	r2,-36(fp)
   20954:	00bf8316 	blt	zero,r2,20764 <read_444_format+0x46c>
			WRITE_FIFO(&Y, IN_BASE_1to2A, CONTROL_BASE_1to2A);
			WRITE_FIFO(&Cb, IN_BASE_1to2B, CONTROL_BASE_1to2B);
			WRITE_FIFO(&Cr, IN_BASE_1to2C, CONTROL_BASE_1to2C);
		}

		if ((j = (8 - cols)) > 0)
   20958:	e0bff88b 	ldhu	r2,-30(fp)
   2095c:	00c00204 	movi	r3,8
   20960:	1885c83a 	sub	r2,r3,r2
   20964:	e0bff715 	stw	r2,-36(fp)
   20968:	e0bff717 	ldw	r2,-36(fp)
   2096c:	00806f0e 	bge	zero,r2,20b2c <read_444_format+0x834>
		{
			R = *(input_ptr - 3);
   20970:	e0bfff17 	ldw	r2,-4(fp)
   20974:	10bfff43 	ldbu	r2,-3(r2)
   20978:	e0bff985 	stb	r2,-26(fp)
			G = *(input_ptr - 2);
   2097c:	e0bfff17 	ldw	r2,-4(fp)
   20980:	10bfff83 	ldbu	r2,-2(r2)
   20984:	e0bff9c5 	stb	r2,-25(fp)
			B = *(input_ptr - 1);
   20988:	e0bfff17 	ldw	r2,-4(fp)
   2098c:	10bfffc3 	ldbu	r2,-1(r2)
   20990:	e0bffa05 	stb	r2,-24(fp)

			Y = ((77 * R + 150 * G + 29 * B) >> 8);
   20994:	e0bff983 	ldbu	r2,-26(fp)
   20998:	1009883a 	mov	r4,r2
   2099c:	01401344 	movi	r5,77
   209a0:	00210140 	call	21014 <__mulsi3>
   209a4:	1021883a 	mov	r16,r2
   209a8:	e0bff9c3 	ldbu	r2,-25(fp)
   209ac:	1009883a 	mov	r4,r2
   209b0:	01402584 	movi	r5,150
   209b4:	00210140 	call	21014 <__mulsi3>
   209b8:	80a1883a 	add	r16,r16,r2
   209bc:	e0bffa03 	ldbu	r2,-24(fp)
   209c0:	1009883a 	mov	r4,r2
   209c4:	01400744 	movi	r5,29
   209c8:	00210140 	call	21014 <__mulsi3>
   209cc:	8085883a 	add	r2,r16,r2
   209d0:	1005d23a 	srai	r2,r2,8
   209d4:	e0bffb15 	stw	r2,-20(fp)
			Cb = ((-43 * R - 85 * G + 128 * B) >> 8) + 128;
   209d8:	e0bff983 	ldbu	r2,-26(fp)
   209dc:	1009883a 	mov	r4,r2
   209e0:	017ff544 	movi	r5,-43
   209e4:	00210140 	call	21014 <__mulsi3>
   209e8:	1021883a 	mov	r16,r2
   209ec:	e0bff9c3 	ldbu	r2,-25(fp)
   209f0:	1009883a 	mov	r4,r2
   209f4:	017feac4 	movi	r5,-85
   209f8:	00210140 	call	21014 <__mulsi3>
   209fc:	8087883a 	add	r3,r16,r2
   20a00:	e0bffa03 	ldbu	r2,-24(fp)
   20a04:	100491fa 	slli	r2,r2,7
   20a08:	1885883a 	add	r2,r3,r2
   20a0c:	1005d23a 	srai	r2,r2,8
   20a10:	10802004 	addi	r2,r2,128
   20a14:	e0bffc15 	stw	r2,-16(fp)
			Cr = ((128 * R - 107 * G - 21 * B) >> 8) + 128;
   20a18:	e0bff983 	ldbu	r2,-26(fp)
   20a1c:	102091fa 	slli	r16,r2,7
   20a20:	e0bff9c3 	ldbu	r2,-25(fp)
   20a24:	1009883a 	mov	r4,r2
   20a28:	017fe544 	movi	r5,-107
   20a2c:	00210140 	call	21014 <__mulsi3>
   20a30:	80a1883a 	add	r16,r16,r2
   20a34:	e0bffa03 	ldbu	r2,-24(fp)
   20a38:	1009883a 	mov	r4,r2
   20a3c:	017ffac4 	movi	r5,-21
   20a40:	00210140 	call	21014 <__mulsi3>
   20a44:	8085883a 	add	r2,r16,r2
   20a48:	1005d23a 	srai	r2,r2,8
   20a4c:	10802004 	addi	r2,r2,128
   20a50:	e0bffd15 	stw	r2,-12(fp)

			if (Y < 0)
   20a54:	e0bffb17 	ldw	r2,-20(fp)
   20a58:	1000020e 	bge	r2,zero,20a64 <read_444_format+0x76c>
				Y = 0;
   20a5c:	e03ffb15 	stw	zero,-20(fp)
   20a60:	00000506 	br	20a78 <read_444_format+0x780>
			else if (Y > 255)
   20a64:	e0bffb17 	ldw	r2,-20(fp)
   20a68:	10804010 	cmplti	r2,r2,256
   20a6c:	1000021e 	bne	r2,zero,20a78 <read_444_format+0x780>
				Y = 255;
   20a70:	00803fc4 	movi	r2,255
   20a74:	e0bffb15 	stw	r2,-20(fp)

			if (Cb < 0)
   20a78:	e0bffc17 	ldw	r2,-16(fp)
   20a7c:	1000020e 	bge	r2,zero,20a88 <read_444_format+0x790>
				Cb = 0;
   20a80:	e03ffc15 	stw	zero,-16(fp)
   20a84:	00000506 	br	20a9c <read_444_format+0x7a4>
			else if (Cb > 255)
   20a88:	e0bffc17 	ldw	r2,-16(fp)
   20a8c:	10804010 	cmplti	r2,r2,256
   20a90:	1000021e 	bne	r2,zero,20a9c <read_444_format+0x7a4>
				Cb = 255;
   20a94:	00803fc4 	movi	r2,255
   20a98:	e0bffc15 	stw	r2,-16(fp)

			if (Cr < 0)
   20a9c:	e0bffd17 	ldw	r2,-12(fp)
   20aa0:	1000020e 	bge	r2,zero,20aac <read_444_format+0x7b4>
				Cr = 0;
   20aa4:	e03ffd15 	stw	zero,-12(fp)
			else if (Cr > 255)
				Cr = 255;

			for (; j > 0; j--)
   20aa8:	00001e06 	br	20b24 <read_444_format+0x82c>
			else if (Cb > 255)
				Cb = 255;

			if (Cr < 0)
				Cr = 0;
			else if (Cr > 255)
   20aac:	e0bffd17 	ldw	r2,-12(fp)
   20ab0:	10804010 	cmplti	r2,r2,256
   20ab4:	10001b1e 	bne	r2,zero,20b24 <read_444_format+0x82c>
				Cr = 255;
   20ab8:	00803fc4 	movi	r2,255
   20abc:	e0bffd15 	stw	r2,-12(fp)

			for (; j > 0; j--)
   20ac0:	00001806 	br	20b24 <read_444_format+0x82c>
			{
				WRITE_FIFO(&Y, IN_BASE_1to2A, CONTROL_BASE_1to2A);
   20ac4:	e0bffb04 	addi	r2,fp,-20
   20ac8:	1009883a 	mov	r4,r2
   20acc:	01400134 	movhi	r5,4
   20ad0:	29443fc4 	addi	r5,r5,4351
   20ad4:	01800134 	movhi	r6,4
   20ad8:	31806804 	addi	r6,r6,416
   20adc:	00201f40 	call	201f4 <WRITE_FIFO>
				WRITE_FIFO(&Cb, IN_BASE_1to2B, CONTROL_BASE_1to2B);
   20ae0:	e0bffc04 	addi	r2,fp,-16
   20ae4:	1009883a 	mov	r4,r2
   20ae8:	01400134 	movhi	r5,4
   20aec:	29443e04 	addi	r5,r5,4344
   20af0:	01800134 	movhi	r6,4
   20af4:	31842004 	addi	r6,r6,4224
   20af8:	00201f40 	call	201f4 <WRITE_FIFO>
				WRITE_FIFO(&Cr, IN_BASE_1to2C, CONTROL_BASE_1to2C);
   20afc:	e0bffd04 	addi	r2,fp,-12
   20b00:	1009883a 	mov	r4,r2
   20b04:	01400134 	movhi	r5,4
   20b08:	29443d04 	addi	r5,r5,4340
   20b0c:	01800134 	movhi	r6,4
   20b10:	31841804 	addi	r6,r6,4192
   20b14:	00201f40 	call	201f4 <WRITE_FIFO>
			if (Cr < 0)
				Cr = 0;
			else if (Cr > 255)
				Cr = 255;

			for (; j > 0; j--)
   20b18:	e0bff717 	ldw	r2,-36(fp)
   20b1c:	10bfffc4 	addi	r2,r2,-1
   20b20:	e0bff715 	stw	r2,-36(fp)
   20b24:	e0bff717 	ldw	r2,-36(fp)
   20b28:	00bfe616 	blt	zero,r2,20ac4 <read_444_format+0x7cc>
		input_ptr += incr;
	}

	input_ptr -= incr;

	for (i = 8 - rows; i > 0; i--)
   20b2c:	e0bff617 	ldw	r2,-40(fp)
   20b30:	10bfffc4 	addi	r2,r2,-1
   20b34:	e0bff615 	stw	r2,-40(fp)
   20b38:	e0bff617 	ldw	r2,-40(fp)
   20b3c:	00bf0316 	blt	zero,r2,2074c <read_444_format+0x454>
				WRITE_FIFO(&Cb, IN_BASE_1to2B, CONTROL_BASE_1to2B);
				WRITE_FIFO(&Cr, IN_BASE_1to2C, CONTROL_BASE_1to2C);
			}
		}
	}
}
   20b40:	e037883a 	mov	sp,fp
   20b44:	dfc00217 	ldw	ra,8(sp)
   20b48:	df000117 	ldw	fp,4(sp)
   20b4c:	dc000017 	ldw	r16,0(sp)
   20b50:	dec00304 	addi	sp,sp,12
   20b54:	f800283a 	ret

00020b58 <initialization>:

#ifndef ENCODER_H
#define ENCODER_H

void initialization(JPEG_ENCODER_STRUCTURE *jpeg, UINT32 image_width, UINT32 image_height)
{
   20b58:	defff804 	addi	sp,sp,-32
   20b5c:	dfc00715 	stw	ra,28(sp)
   20b60:	df000615 	stw	fp,24(sp)
   20b64:	dc000515 	stw	r16,20(sp)
   20b68:	df000504 	addi	fp,sp,20
   20b6c:	e13ffd15 	stw	r4,-12(fp)
   20b70:	e17ffe15 	stw	r5,-8(fp)
   20b74:	e1bfff15 	stw	r6,-4(fp)
	UINT16 mcu_width, mcu_height, bytes_per_pixel;

	jpeg->mcu_width = mcu_width = 8;
   20b78:	00800204 	movi	r2,8
   20b7c:	e0bffb0d 	sth	r2,-20(fp)
   20b80:	e0bffd17 	ldw	r2,-12(fp)
   20b84:	e0fffb0b 	ldhu	r3,-20(fp)
   20b88:	10c0000d 	sth	r3,0(r2)
	jpeg->mcu_height = mcu_height = 8;
   20b8c:	00800204 	movi	r2,8
   20b90:	e0bffb8d 	sth	r2,-18(fp)
   20b94:	e0bffd17 	ldw	r2,-12(fp)
   20b98:	e0fffb8b 	ldhu	r3,-18(fp)
   20b9c:	10c0008d 	sth	r3,2(r2)

	jpeg->horizontal_mcus = (UINT16)((image_width + mcu_width - 1) >> 3);
   20ba0:	e0fffb0b 	ldhu	r3,-20(fp)
   20ba4:	e0bffe17 	ldw	r2,-8(fp)
   20ba8:	1885883a 	add	r2,r3,r2
   20bac:	10bfffc4 	addi	r2,r2,-1
   20bb0:	1004d0fa 	srli	r2,r2,3
   20bb4:	1007883a 	mov	r3,r2
   20bb8:	e0bffd17 	ldw	r2,-12(fp)
   20bbc:	10c0010d 	sth	r3,4(r2)
	jpeg->vertical_mcus = (UINT16)((image_height + mcu_height - 1) >> 3);
   20bc0:	e0fffb8b 	ldhu	r3,-18(fp)
   20bc4:	e0bfff17 	ldw	r2,-4(fp)
   20bc8:	1885883a 	add	r2,r3,r2
   20bcc:	10bfffc4 	addi	r2,r2,-1
   20bd0:	1004d0fa 	srli	r2,r2,3
   20bd4:	1007883a 	mov	r3,r2
   20bd8:	e0bffd17 	ldw	r2,-12(fp)
   20bdc:	10c0018d 	sth	r3,6(r2)

	bytes_per_pixel = 3;
   20be0:	008000c4 	movi	r2,3
   20be4:	e0bffc0d 	sth	r2,-16(fp)

	jpeg->rows_in_bottom_mcus = (UINT16)(image_height - (jpeg->vertical_mcus - 1) * mcu_height);
   20be8:	e0bfff17 	ldw	r2,-4(fp)
   20bec:	1021883a 	mov	r16,r2
   20bf0:	e0bffd17 	ldw	r2,-12(fp)
   20bf4:	1080018b 	ldhu	r2,6(r2)
   20bf8:	10bfffcc 	andi	r2,r2,65535
   20bfc:	10bfffc4 	addi	r2,r2,-1
   20c00:	1007883a 	mov	r3,r2
   20c04:	e0bffb8b 	ldhu	r2,-18(fp)
   20c08:	1809883a 	mov	r4,r3
   20c0c:	100b883a 	mov	r5,r2
   20c10:	00210140 	call	21014 <__mulsi3>
   20c14:	8085c83a 	sub	r2,r16,r2
   20c18:	1007883a 	mov	r3,r2
   20c1c:	e0bffd17 	ldw	r2,-12(fp)
   20c20:	10c0028d 	sth	r3,10(r2)
	jpeg->cols_in_right_mcus = (UINT16)(image_width - (jpeg->horizontal_mcus - 1) * mcu_width);
   20c24:	e0bffe17 	ldw	r2,-8(fp)
   20c28:	1021883a 	mov	r16,r2
   20c2c:	e0bffd17 	ldw	r2,-12(fp)
   20c30:	1080010b 	ldhu	r2,4(r2)
   20c34:	10bfffcc 	andi	r2,r2,65535
   20c38:	10bfffc4 	addi	r2,r2,-1
   20c3c:	1007883a 	mov	r3,r2
   20c40:	e0bffb0b 	ldhu	r2,-20(fp)
   20c44:	1809883a 	mov	r4,r3
   20c48:	100b883a 	mov	r5,r2
   20c4c:	00210140 	call	21014 <__mulsi3>
   20c50:	8085c83a 	sub	r2,r16,r2
   20c54:	1007883a 	mov	r3,r2
   20c58:	e0bffd17 	ldw	r2,-12(fp)
   20c5c:	10c0020d 	sth	r3,8(r2)

	jpeg->length_minus_mcu_width = (UINT16)((image_width - mcu_width) * bytes_per_pixel);
   20c60:	e0bffb0b 	ldhu	r2,-20(fp)
   20c64:	e0fffe17 	ldw	r3,-8(fp)
   20c68:	1885c83a 	sub	r2,r3,r2
   20c6c:	1007883a 	mov	r3,r2
   20c70:	e0bffc0b 	ldhu	r2,-16(fp)
   20c74:	1809883a 	mov	r4,r3
   20c78:	100b883a 	mov	r5,r2
   20c7c:	00210140 	call	21014 <__mulsi3>
   20c80:	1007883a 	mov	r3,r2
   20c84:	e0bffd17 	ldw	r2,-12(fp)
   20c88:	10c0040d 	sth	r3,16(r2)
	jpeg->length_minus_width = (UINT16)((image_width - jpeg->cols_in_right_mcus) * bytes_per_pixel);
   20c8c:	e0bffd17 	ldw	r2,-12(fp)
   20c90:	1080020b 	ldhu	r2,8(r2)
   20c94:	10bfffcc 	andi	r2,r2,65535
   20c98:	e0fffe17 	ldw	r3,-8(fp)
   20c9c:	1885c83a 	sub	r2,r3,r2
   20ca0:	1007883a 	mov	r3,r2
   20ca4:	e0bffc0b 	ldhu	r2,-16(fp)
   20ca8:	1809883a 	mov	r4,r3
   20cac:	100b883a 	mov	r5,r2
   20cb0:	00210140 	call	21014 <__mulsi3>
   20cb4:	1007883a 	mov	r3,r2
   20cb8:	e0bffd17 	ldw	r2,-12(fp)
   20cbc:	10c0048d 	sth	r3,18(r2)

	jpeg->mcu_width_size = (UINT16)(mcu_width * bytes_per_pixel);
   20cc0:	e0fffb0b 	ldhu	r3,-20(fp)
   20cc4:	e0bffc0b 	ldhu	r2,-16(fp)
   20cc8:	1809883a 	mov	r4,r3
   20ccc:	100b883a 	mov	r5,r2
   20cd0:	00210140 	call	21014 <__mulsi3>
   20cd4:	1007883a 	mov	r3,r2
   20cd8:	e0bffd17 	ldw	r2,-12(fp)
   20cdc:	10c0058d 	sth	r3,22(r2)

	jpeg->offset = (UINT16)((image_width * ((mcu_height >> 1) - 1) - (mcu_width - jpeg->cols_in_right_mcus)) * bytes_per_pixel);
   20ce0:	e0bffb8b 	ldhu	r2,-18(fp)
   20ce4:	1004d07a 	srli	r2,r2,1
   20ce8:	10bfffcc 	andi	r2,r2,65535
   20cec:	10bfffc4 	addi	r2,r2,-1
   20cf0:	1009883a 	mov	r4,r2
   20cf4:	e17ffe17 	ldw	r5,-8(fp)
   20cf8:	00210140 	call	21014 <__mulsi3>
   20cfc:	1007883a 	mov	r3,r2
   20d00:	e0bffd17 	ldw	r2,-12(fp)
   20d04:	1080020b 	ldhu	r2,8(r2)
   20d08:	113fffcc 	andi	r4,r2,65535
   20d0c:	e0bffb0b 	ldhu	r2,-20(fp)
   20d10:	2085c83a 	sub	r2,r4,r2
   20d14:	1885883a 	add	r2,r3,r2
   20d18:	1007883a 	mov	r3,r2
   20d1c:	e0bffc0b 	ldhu	r2,-16(fp)
   20d20:	1809883a 	mov	r4,r3
   20d24:	100b883a 	mov	r5,r2
   20d28:	00210140 	call	21014 <__mulsi3>
   20d2c:	1007883a 	mov	r3,r2
   20d30:	e0bffd17 	ldw	r2,-12(fp)
   20d34:	10c0060d 	sth	r3,24(r2)
}
   20d38:	e037883a 	mov	sp,fp
   20d3c:	dfc00217 	ldw	ra,8(sp)
   20d40:	df000117 	ldw	fp,4(sp)
   20d44:	dc000017 	ldw	r16,0(sp)
   20d48:	dec00304 	addi	sp,sp,12
   20d4c:	f800283a 	ret

00020d50 <encode_image>:

UINT8 encode_image(char *input_file_name, UINT32 quality_factor, UINT32 image_width, UINT32 image_height)
{
   20d50:	deffef04 	addi	sp,sp,-68
   20d54:	dfc01015 	stw	ra,64(sp)
   20d58:	df000f15 	stw	fp,60(sp)
   20d5c:	df000f04 	addi	fp,sp,60
   20d60:	e13ffc15 	stw	r4,-16(fp)
   20d64:	e17ffd15 	stw	r5,-12(fp)
   20d68:	e1bffe15 	stw	r6,-8(fp)
   20d6c:	e1ffff15 	stw	r7,-4(fp)
	UINT16 i, j;

	JPEG_ENCODER_STRUCTURE JpegStruct;
	JPEG_ENCODER_STRUCTURE *jpeg_encoder_structure = &JpegStruct;
   20d70:	e0bff504 	addi	r2,fp,-44
   20d74:	e0bff315 	stw	r2,-52(fp)

	FILE *fpt;

	/* Initialization of JPEG control structure */
	initialization(jpeg_encoder_structure, image_width, image_height);
   20d78:	e13ff317 	ldw	r4,-52(fp)
   20d7c:	e17ffe17 	ldw	r5,-8(fp)
   20d80:	e1bfff17 	ldw	r6,-4(fp)
   20d84:	0020b580 	call	20b58 <initialization>
	// SEND5(image_height);
	// SEND5((jpeg_encoder_structure->vertical_mcus) * (jpeg_encoder_structure->horizontal_mcus));

	// asm("dummy");

	fpt = fopen(input_file_name, "rb");
   20d88:	e13ffc17 	ldw	r4,-16(fp)
   20d8c:	014000f4 	movhi	r5,3
   20d90:	2979d804 	addi	r5,r5,-6304
   20d94:	00217c00 	call	217c0 <fopen>
   20d98:	e0bff415 	stw	r2,-48(fp)
	if (fpt == NULL)
   20d9c:	e0bff417 	ldw	r2,-48(fp)
   20da0:	10000d1e 	bne	r2,zero,20dd8 <encode_image+0x88>
	{
		fprintf(stderr, "Error opening input file: %s\n", input_file_name);
   20da4:	008000f4 	movhi	r2,3
   20da8:	10815204 	addi	r2,r2,1352
   20dac:	10800017 	ldw	r2,0(r2)
   20db0:	10800317 	ldw	r2,12(r2)
   20db4:	1009883a 	mov	r4,r2
   20db8:	014000f4 	movhi	r5,3
   20dbc:	2979d904 	addi	r5,r5,-6300
   20dc0:	e1bffc17 	ldw	r6,-16(fp)
   20dc4:	00218040 	call	21804 <fprintf>
		fclose(fpt);
   20dc8:	e13ff417 	ldw	r4,-48(fp)
   20dcc:	00211780 	call	21178 <fclose>

		return 1;
   20dd0:	00800044 	movi	r2,1
   20dd4:	00007c06 	br	20fc8 <encode_image+0x278>
	}

	UINT8 *input = (UINT8 *)malloc(((jpeg_encoder_structure->mcu_height * image_width * 3) + 1) * sizeof(UINT8));
   20dd8:	e0bff317 	ldw	r2,-52(fp)
   20ddc:	1080008b 	ldhu	r2,2(r2)
   20de0:	10bfffcc 	andi	r2,r2,65535
   20de4:	1009883a 	mov	r4,r2
   20de8:	e17ffe17 	ldw	r5,-8(fp)
   20dec:	00210140 	call	21014 <__mulsi3>
   20df0:	1007883a 	mov	r3,r2
   20df4:	1805883a 	mov	r2,r3
   20df8:	1085883a 	add	r2,r2,r2
   20dfc:	10c5883a 	add	r2,r2,r3
   20e00:	10800044 	addi	r2,r2,1
   20e04:	1009883a 	mov	r4,r2
   20e08:	00227a80 	call	227a8 <malloc>
   20e0c:	e0bff215 	stw	r2,-56(fp)
	if (input == NULL)
   20e10:	e0bff217 	ldw	r2,-56(fp)
   20e14:	1000101e 	bne	r2,zero,20e58 <encode_image+0x108>
	{
		fprintf(stderr, "Memory allocation failed\n");
   20e18:	008000f4 	movhi	r2,3
   20e1c:	10815204 	addi	r2,r2,1352
   20e20:	10800017 	ldw	r2,0(r2)
   20e24:	10800317 	ldw	r2,12(r2)
   20e28:	010000f4 	movhi	r4,3
   20e2c:	2139e104 	addi	r4,r4,-6268
   20e30:	01400044 	movi	r5,1
   20e34:	01800644 	movi	r6,25
   20e38:	100f883a 	mov	r7,r2
   20e3c:	00225c00 	call	225c0 <fwrite>
		fclose(fpt);
   20e40:	e13ff417 	ldw	r4,-48(fp)
   20e44:	00211780 	call	21178 <fclose>
		free(input);
   20e48:	e13ff217 	ldw	r4,-56(fp)
   20e4c:	00227bc0 	call	227bc <free>

		return 1;
   20e50:	00800044 	movi	r2,1
   20e54:	00005c06 	br	20fc8 <encode_image+0x278>
	}

	for (i = 1; i <= jpeg_encoder_structure->vertical_mcus; i++)
   20e58:	00800044 	movi	r2,1
   20e5c:	e0bff10d 	sth	r2,-60(fp)
   20e60:	00004f06 	br	20fa0 <encode_image+0x250>
	{
		printf("Input image data (hex): %d\n", i);
   20e64:	e0bff10b 	ldhu	r2,-60(fp)
   20e68:	010000f4 	movhi	r4,3
   20e6c:	2139e804 	addi	r4,r4,-6240
   20e70:	100b883a 	mov	r5,r2
   20e74:	00232080 	call	23208 <printf>

		if (i < jpeg_encoder_structure->vertical_mcus)
   20e78:	e0bff317 	ldw	r2,-52(fp)
   20e7c:	1080018b 	ldhu	r2,6(r2)
   20e80:	10bfffcc 	andi	r2,r2,65535
   20e84:	e0fff10b 	ldhu	r3,-60(fp)
   20e88:	1880052e 	bgeu	r3,r2,20ea0 <encode_image+0x150>
			jpeg_encoder_structure->rows = jpeg_encoder_structure->mcu_height;
   20e8c:	e0bff317 	ldw	r2,-52(fp)
   20e90:	10c0008b 	ldhu	r3,2(r2)
   20e94:	e0bff317 	ldw	r2,-52(fp)
   20e98:	10c0030d 	sth	r3,12(r2)
   20e9c:	00000406 	br	20eb0 <encode_image+0x160>
		else
			jpeg_encoder_structure->rows = jpeg_encoder_structure->rows_in_bottom_mcus;
   20ea0:	e0bff317 	ldw	r2,-52(fp)
   20ea4:	10c0028b 	ldhu	r3,10(r2)
   20ea8:	e0bff317 	ldw	r2,-52(fp)
   20eac:	10c0030d 	sth	r3,12(r2)

		fread(input, 1, (jpeg_encoder_structure->rows * image_width * 3), fpt);
   20eb0:	e0bff317 	ldw	r2,-52(fp)
   20eb4:	1080030b 	ldhu	r2,12(r2)
   20eb8:	10bfffcc 	andi	r2,r2,65535
   20ebc:	1009883a 	mov	r4,r2
   20ec0:	e17ffe17 	ldw	r5,-8(fp)
   20ec4:	00210140 	call	21014 <__mulsi3>
   20ec8:	1007883a 	mov	r3,r2
   20ecc:	1805883a 	mov	r2,r3
   20ed0:	1085883a 	add	r2,r2,r2
   20ed4:	10c5883a 	add	r2,r2,r3
   20ed8:	e13ff217 	ldw	r4,-56(fp)
   20edc:	01400044 	movi	r5,1
   20ee0:	100d883a 	mov	r6,r2
   20ee4:	e1fff417 	ldw	r7,-48(fp)
   20ee8:	0021a640 	call	21a64 <fread>

		for (j = 1; j <= jpeg_encoder_structure->horizontal_mcus; j++)
   20eec:	00800044 	movi	r2,1
   20ef0:	e0bff18d 	sth	r2,-58(fp)
   20ef4:	00002206 	br	20f80 <encode_image+0x230>
		{
			if (j < jpeg_encoder_structure->horizontal_mcus)
   20ef8:	e0bff317 	ldw	r2,-52(fp)
   20efc:	1080010b 	ldhu	r2,4(r2)
   20f00:	10bfffcc 	andi	r2,r2,65535
   20f04:	e0fff18b 	ldhu	r3,-58(fp)
   20f08:	1880092e 	bgeu	r3,r2,20f30 <encode_image+0x1e0>
			{
				jpeg_encoder_structure->cols = jpeg_encoder_structure->mcu_width;
   20f0c:	e0bff317 	ldw	r2,-52(fp)
   20f10:	10c0000b 	ldhu	r3,0(r2)
   20f14:	e0bff317 	ldw	r2,-52(fp)
   20f18:	10c0038d 	sth	r3,14(r2)
				jpeg_encoder_structure->incr = jpeg_encoder_structure->length_minus_mcu_width;
   20f1c:	e0bff317 	ldw	r2,-52(fp)
   20f20:	10c0040b 	ldhu	r3,16(r2)
   20f24:	e0bff317 	ldw	r2,-52(fp)
   20f28:	10c0050d 	sth	r3,20(r2)
   20f2c:	00000806 	br	20f50 <encode_image+0x200>
			}
			else
			{
				jpeg_encoder_structure->cols = jpeg_encoder_structure->cols_in_right_mcus;
   20f30:	e0bff317 	ldw	r2,-52(fp)
   20f34:	10c0020b 	ldhu	r3,8(r2)
   20f38:	e0bff317 	ldw	r2,-52(fp)
   20f3c:	10c0038d 	sth	r3,14(r2)
				jpeg_encoder_structure->incr = jpeg_encoder_structure->length_minus_width;
   20f40:	e0bff317 	ldw	r2,-52(fp)
   20f44:	10c0048b 	ldhu	r3,18(r2)
   20f48:	e0bff317 	ldw	r2,-52(fp)
   20f4c:	10c0050d 	sth	r3,20(r2)
			}

			read_444_format(jpeg_encoder_structure, input);
   20f50:	e13ff317 	ldw	r4,-52(fp)
   20f54:	e17ff217 	ldw	r5,-56(fp)
   20f58:	00202f80 	call	202f8 <read_444_format>

			input += jpeg_encoder_structure->mcu_width_size;
   20f5c:	e0bff317 	ldw	r2,-52(fp)
   20f60:	1080058b 	ldhu	r2,22(r2)
   20f64:	10bfffcc 	andi	r2,r2,65535
   20f68:	e0fff217 	ldw	r3,-56(fp)
   20f6c:	1885883a 	add	r2,r3,r2
   20f70:	e0bff215 	stw	r2,-56(fp)
		else
			jpeg_encoder_structure->rows = jpeg_encoder_structure->rows_in_bottom_mcus;

		fread(input, 1, (jpeg_encoder_structure->rows * image_width * 3), fpt);

		for (j = 1; j <= jpeg_encoder_structure->horizontal_mcus; j++)
   20f74:	e0bff18b 	ldhu	r2,-58(fp)
   20f78:	10800044 	addi	r2,r2,1
   20f7c:	e0bff18d 	sth	r2,-58(fp)
   20f80:	e0bff317 	ldw	r2,-52(fp)
   20f84:	1080010b 	ldhu	r2,4(r2)
   20f88:	10ffffcc 	andi	r3,r2,65535
   20f8c:	e0bff18b 	ldhu	r2,-58(fp)
   20f90:	18bfd92e 	bgeu	r3,r2,20ef8 <encode_image+0x1a8>
		free(input);

		return 1;
	}

	for (i = 1; i <= jpeg_encoder_structure->vertical_mcus; i++)
   20f94:	e0bff10b 	ldhu	r2,-60(fp)
   20f98:	10800044 	addi	r2,r2,1
   20f9c:	e0bff10d 	sth	r2,-60(fp)
   20fa0:	e0bff317 	ldw	r2,-52(fp)
   20fa4:	1080018b 	ldhu	r2,6(r2)
   20fa8:	10ffffcc 	andi	r3,r2,65535
   20fac:	e0bff10b 	ldhu	r2,-60(fp)
   20fb0:	18bfac2e 	bgeu	r3,r2,20e64 <encode_image+0x114>

			input += jpeg_encoder_structure->mcu_width_size;
		}
	}

	fclose(fpt);
   20fb4:	e13ff417 	ldw	r4,-48(fp)
   20fb8:	00211780 	call	21178 <fclose>
	free(input);
   20fbc:	e13ff217 	ldw	r4,-56(fp)
   20fc0:	00227bc0 	call	227bc <free>

	return 0;
   20fc4:	0005883a 	mov	r2,zero
}
   20fc8:	e037883a 	mov	sp,fp
   20fcc:	dfc00117 	ldw	ra,4(sp)
   20fd0:	df000017 	ldw	fp,0(sp)
   20fd4:	dec00204 	addi	sp,sp,8
   20fd8:	f800283a 	ret

00020fdc <main>:
#include "FIFO.h"

// void delay(int n);

int main(int argc, char *argv[])
{
   20fdc:	deffd604 	addi	sp,sp,-168
   20fe0:	dfc02915 	stw	ra,164(sp)
   20fe4:	df002815 	stw	fp,160(sp)
   20fe8:	df002804 	addi	fp,sp,160
   20fec:	e13ffe15 	stw	r4,-8(fp)
   20ff0:	e17fff15 	stw	r5,-4(fp)
	// FIFO_INIT(CONTROL_BASE_1to2B);
	// delay(100000);
	// FIFO_INIT(CONTROL_BASE_1to2C);
	// delay(100000);

	printf("Starting the program\n");
   20ff4:	010000f4 	movhi	r4,3
   20ff8:	2139ef04 	addi	r4,r4,-6212
   20ffc:	00232c80 	call	232c8 <puts>

	// fclose(fp);
	// printf("\nDone!\n");

	// return 0;
}
   21000:	e037883a 	mov	sp,fp
   21004:	dfc00117 	ldw	ra,4(sp)
   21008:	df000017 	ldw	fp,0(sp)
   2100c:	dec00204 	addi	sp,sp,8
   21010:	f800283a 	ret

00021014 <__mulsi3>:
   21014:	0005883a 	mov	r2,zero
   21018:	20000726 	beq	r4,zero,21038 <__mulsi3+0x24>
   2101c:	20c0004c 	andi	r3,r4,1
   21020:	2008d07a 	srli	r4,r4,1
   21024:	18000126 	beq	r3,zero,2102c <__mulsi3+0x18>
   21028:	1145883a 	add	r2,r2,r5
   2102c:	294b883a 	add	r5,r5,r5
   21030:	203ffa1e 	bne	r4,zero,2101c <__mulsi3+0x8>
   21034:	f800283a 	ret
   21038:	f800283a 	ret

0002103c <_fclose_r>:
   2103c:	defffc04 	addi	sp,sp,-16
   21040:	dc400115 	stw	r17,4(sp)
   21044:	dc000015 	stw	r16,0(sp)
   21048:	dfc00315 	stw	ra,12(sp)
   2104c:	dc800215 	stw	r18,8(sp)
   21050:	2821883a 	mov	r16,r5
   21054:	2023883a 	mov	r17,r4
   21058:	28003426 	beq	r5,zero,2112c <_fclose_r+0xf0>
   2105c:	00216500 	call	21650 <__sfp_lock_acquire>
   21060:	88000226 	beq	r17,zero,2106c <_fclose_r+0x30>
   21064:	88800e17 	ldw	r2,56(r17)
   21068:	10003826 	beq	r2,zero,2114c <_fclose_r+0x110>
   2106c:	8080030f 	ldh	r2,12(r16)
   21070:	10002526 	beq	r2,zero,21108 <_fclose_r+0xcc>
   21074:	8809883a 	mov	r4,r17
   21078:	800b883a 	mov	r5,r16
   2107c:	002118c0 	call	2118c <_fflush_r>
   21080:	1025883a 	mov	r18,r2
   21084:	80800b17 	ldw	r2,44(r16)
   21088:	10000426 	beq	r2,zero,2109c <_fclose_r+0x60>
   2108c:	81400717 	ldw	r5,28(r16)
   21090:	8809883a 	mov	r4,r17
   21094:	103ee83a 	callr	r2
   21098:	10003516 	blt	r2,zero,21170 <_fclose_r+0x134>
   2109c:	8080030b 	ldhu	r2,12(r16)
   210a0:	1080200c 	andi	r2,r2,128
   210a4:	10bfffcc 	andi	r2,r2,65535
   210a8:	10a0001c 	xori	r2,r2,32768
   210ac:	10a00004 	addi	r2,r2,-32768
   210b0:	10002b1e 	bne	r2,zero,21160 <_fclose_r+0x124>
   210b4:	81400c17 	ldw	r5,48(r16)
   210b8:	28000526 	beq	r5,zero,210d0 <_fclose_r+0x94>
   210bc:	80801004 	addi	r2,r16,64
   210c0:	28800226 	beq	r5,r2,210cc <_fclose_r+0x90>
   210c4:	8809883a 	mov	r4,r17
   210c8:	0021be00 	call	21be0 <_free_r>
   210cc:	80000c15 	stw	zero,48(r16)
   210d0:	81401117 	ldw	r5,68(r16)
   210d4:	28000326 	beq	r5,zero,210e4 <_fclose_r+0xa8>
   210d8:	8809883a 	mov	r4,r17
   210dc:	0021be00 	call	21be0 <_free_r>
   210e0:	80001115 	stw	zero,68(r16)
   210e4:	8000030d 	sth	zero,12(r16)
   210e8:	00216540 	call	21654 <__sfp_lock_release>
   210ec:	9005883a 	mov	r2,r18
   210f0:	dfc00317 	ldw	ra,12(sp)
   210f4:	dc800217 	ldw	r18,8(sp)
   210f8:	dc400117 	ldw	r17,4(sp)
   210fc:	dc000017 	ldw	r16,0(sp)
   21100:	dec00404 	addi	sp,sp,16
   21104:	f800283a 	ret
   21108:	00216540 	call	21654 <__sfp_lock_release>
   2110c:	0025883a 	mov	r18,zero
   21110:	9005883a 	mov	r2,r18
   21114:	dfc00317 	ldw	ra,12(sp)
   21118:	dc800217 	ldw	r18,8(sp)
   2111c:	dc400117 	ldw	r17,4(sp)
   21120:	dc000017 	ldw	r16,0(sp)
   21124:	dec00404 	addi	sp,sp,16
   21128:	f800283a 	ret
   2112c:	0025883a 	mov	r18,zero
   21130:	9005883a 	mov	r2,r18
   21134:	dfc00317 	ldw	ra,12(sp)
   21138:	dc800217 	ldw	r18,8(sp)
   2113c:	dc400117 	ldw	r17,4(sp)
   21140:	dc000017 	ldw	r16,0(sp)
   21144:	dec00404 	addi	sp,sp,16
   21148:	f800283a 	ret
   2114c:	8809883a 	mov	r4,r17
   21150:	00214480 	call	21448 <__sinit>
   21154:	8080030f 	ldh	r2,12(r16)
   21158:	103fc61e 	bne	r2,zero,21074 <_fclose_r+0x38>
   2115c:	003fea06 	br	21108 <_fclose_r+0xcc>
   21160:	81400417 	ldw	r5,16(r16)
   21164:	8809883a 	mov	r4,r17
   21168:	0021be00 	call	21be0 <_free_r>
   2116c:	003fd106 	br	210b4 <_fclose_r+0x78>
   21170:	04bfffc4 	movi	r18,-1
   21174:	003fc906 	br	2109c <_fclose_r+0x60>

00021178 <fclose>:
   21178:	008000f4 	movhi	r2,3
   2117c:	10815204 	addi	r2,r2,1352
   21180:	200b883a 	mov	r5,r4
   21184:	11000017 	ldw	r4,0(r2)
   21188:	002103c1 	jmpi	2103c <_fclose_r>

0002118c <_fflush_r>:
   2118c:	defffb04 	addi	sp,sp,-20
   21190:	dcc00315 	stw	r19,12(sp)
   21194:	dc400115 	stw	r17,4(sp)
   21198:	dfc00415 	stw	ra,16(sp)
   2119c:	dc800215 	stw	r18,8(sp)
   211a0:	dc000015 	stw	r16,0(sp)
   211a4:	2027883a 	mov	r19,r4
   211a8:	2823883a 	mov	r17,r5
   211ac:	20000226 	beq	r4,zero,211b8 <_fflush_r+0x2c>
   211b0:	20800e17 	ldw	r2,56(r4)
   211b4:	10005726 	beq	r2,zero,21314 <_fflush_r+0x188>
   211b8:	8880030b 	ldhu	r2,12(r17)
   211bc:	10c0020c 	andi	r3,r2,8
   211c0:	18ffffcc 	andi	r3,r3,65535
   211c4:	18e0001c 	xori	r3,r3,32768
   211c8:	18e00004 	addi	r3,r3,-32768
   211cc:	1800311e 	bne	r3,zero,21294 <_fflush_r+0x108>
   211d0:	89000117 	ldw	r4,4(r17)
   211d4:	10c20014 	ori	r3,r2,2048
   211d8:	88c0030d 	sth	r3,12(r17)
   211dc:	180b883a 	mov	r5,r3
   211e0:	0100520e 	bge	zero,r4,2132c <_fflush_r+0x1a0>
   211e4:	88c00a17 	ldw	r3,40(r17)
   211e8:	18002226 	beq	r3,zero,21274 <_fflush_r+0xe8>
   211ec:	1084000c 	andi	r2,r2,4096
   211f0:	10bfffcc 	andi	r2,r2,65535
   211f4:	10a0001c 	xori	r2,r2,32768
   211f8:	10a00004 	addi	r2,r2,-32768
   211fc:	10004e26 	beq	r2,zero,21338 <_fflush_r+0x1ac>
   21200:	8c001417 	ldw	r16,80(r17)
   21204:	2940010c 	andi	r5,r5,4
   21208:	297fffcc 	andi	r5,r5,65535
   2120c:	2960001c 	xori	r5,r5,32768
   21210:	29600004 	addi	r5,r5,-32768
   21214:	28000626 	beq	r5,zero,21230 <_fflush_r+0xa4>
   21218:	89000117 	ldw	r4,4(r17)
   2121c:	88800c17 	ldw	r2,48(r17)
   21220:	8121c83a 	sub	r16,r16,r4
   21224:	10000226 	beq	r2,zero,21230 <_fflush_r+0xa4>
   21228:	88800f17 	ldw	r2,60(r17)
   2122c:	80a1c83a 	sub	r16,r16,r2
   21230:	89400717 	ldw	r5,28(r17)
   21234:	9809883a 	mov	r4,r19
   21238:	800d883a 	mov	r6,r16
   2123c:	000f883a 	mov	r7,zero
   21240:	183ee83a 	callr	r3
   21244:	8080281e 	bne	r16,r2,212e8 <_fflush_r+0x15c>
   21248:	8880030b 	ldhu	r2,12(r17)
   2124c:	88c00417 	ldw	r3,16(r17)
   21250:	88000115 	stw	zero,4(r17)
   21254:	113dffcc 	andi	r4,r2,63487
   21258:	1084000c 	andi	r2,r2,4096
   2125c:	10bfffcc 	andi	r2,r2,65535
   21260:	10a0001c 	xori	r2,r2,32768
   21264:	8900030d 	sth	r4,12(r17)
   21268:	88c00015 	stw	r3,0(r17)
   2126c:	10a00004 	addi	r2,r2,-32768
   21270:	10002c1e 	bne	r2,zero,21324 <_fflush_r+0x198>
   21274:	0005883a 	mov	r2,zero
   21278:	dfc00417 	ldw	ra,16(sp)
   2127c:	dcc00317 	ldw	r19,12(sp)
   21280:	dc800217 	ldw	r18,8(sp)
   21284:	dc400117 	ldw	r17,4(sp)
   21288:	dc000017 	ldw	r16,0(sp)
   2128c:	dec00504 	addi	sp,sp,20
   21290:	f800283a 	ret
   21294:	8c800417 	ldw	r18,16(r17)
   21298:	903ff626 	beq	r18,zero,21274 <_fflush_r+0xe8>
   2129c:	8c000017 	ldw	r16,0(r17)
   212a0:	108000cc 	andi	r2,r2,3
   212a4:	8c800015 	stw	r18,0(r17)
   212a8:	84a1c83a 	sub	r16,r16,r18
   212ac:	10001b1e 	bne	r2,zero,2131c <_fflush_r+0x190>
   212b0:	88800517 	ldw	r2,20(r17)
   212b4:	88800215 	stw	r2,8(r17)
   212b8:	04000316 	blt	zero,r16,212c8 <_fflush_r+0x13c>
   212bc:	003fed06 	br	21274 <_fflush_r+0xe8>
   212c0:	90a5883a 	add	r18,r18,r2
   212c4:	043feb0e 	bge	zero,r16,21274 <_fflush_r+0xe8>
   212c8:	88800917 	ldw	r2,36(r17)
   212cc:	89400717 	ldw	r5,28(r17)
   212d0:	800f883a 	mov	r7,r16
   212d4:	900d883a 	mov	r6,r18
   212d8:	9809883a 	mov	r4,r19
   212dc:	103ee83a 	callr	r2
   212e0:	80a1c83a 	sub	r16,r16,r2
   212e4:	00bff616 	blt	zero,r2,212c0 <_fflush_r+0x134>
   212e8:	88c0030b 	ldhu	r3,12(r17)
   212ec:	00bfffc4 	movi	r2,-1
   212f0:	18c01014 	ori	r3,r3,64
   212f4:	88c0030d 	sth	r3,12(r17)
   212f8:	dfc00417 	ldw	ra,16(sp)
   212fc:	dcc00317 	ldw	r19,12(sp)
   21300:	dc800217 	ldw	r18,8(sp)
   21304:	dc400117 	ldw	r17,4(sp)
   21308:	dc000017 	ldw	r16,0(sp)
   2130c:	dec00504 	addi	sp,sp,20
   21310:	f800283a 	ret
   21314:	00214480 	call	21448 <__sinit>
   21318:	003fa706 	br	211b8 <_fflush_r+0x2c>
   2131c:	0005883a 	mov	r2,zero
   21320:	003fe406 	br	212b4 <_fflush_r+0x128>
   21324:	8c001415 	stw	r16,80(r17)
   21328:	003fd206 	br	21274 <_fflush_r+0xe8>
   2132c:	88c00f17 	ldw	r3,60(r17)
   21330:	00ffac16 	blt	zero,r3,211e4 <_fflush_r+0x58>
   21334:	003fcf06 	br	21274 <_fflush_r+0xe8>
   21338:	89400717 	ldw	r5,28(r17)
   2133c:	9809883a 	mov	r4,r19
   21340:	000d883a 	mov	r6,zero
   21344:	01c00044 	movi	r7,1
   21348:	183ee83a 	callr	r3
   2134c:	1021883a 	mov	r16,r2
   21350:	00bfffc4 	movi	r2,-1
   21354:	80800326 	beq	r16,r2,21364 <_fflush_r+0x1d8>
   21358:	8940030b 	ldhu	r5,12(r17)
   2135c:	88c00a17 	ldw	r3,40(r17)
   21360:	003fa806 	br	21204 <_fflush_r+0x78>
   21364:	98c00017 	ldw	r3,0(r19)
   21368:	00800744 	movi	r2,29
   2136c:	18bfde1e 	bne	r3,r2,212e8 <_fflush_r+0x15c>
   21370:	003fc006 	br	21274 <_fflush_r+0xe8>

00021374 <fflush>:
   21374:	200b883a 	mov	r5,r4
   21378:	20000426 	beq	r4,zero,2138c <fflush+0x18>
   2137c:	008000f4 	movhi	r2,3
   21380:	10815204 	addi	r2,r2,1352
   21384:	11000017 	ldw	r4,0(r2)
   21388:	002118c1 	jmpi	2118c <_fflush_r>
   2138c:	008000f4 	movhi	r2,3
   21390:	10815104 	addi	r2,r2,1348
   21394:	11000017 	ldw	r4,0(r2)
   21398:	014000b4 	movhi	r5,2
   2139c:	29446304 	addi	r5,r5,4492
   213a0:	00224581 	jmpi	22458 <_fwalk_reent>

000213a4 <__fp_lock>:
   213a4:	0005883a 	mov	r2,zero
   213a8:	f800283a 	ret

000213ac <__fp_unlock>:
   213ac:	0005883a 	mov	r2,zero
   213b0:	f800283a 	ret

000213b4 <_cleanup_r>:
   213b4:	014000b4 	movhi	r5,2
   213b8:	29445e04 	addi	r5,r5,4472
   213bc:	00223b01 	jmpi	223b0 <_fwalk>

000213c0 <__sfmoreglue>:
   213c0:	defffc04 	addi	sp,sp,-16
   213c4:	dc800215 	stw	r18,8(sp)
   213c8:	2825883a 	mov	r18,r5
   213cc:	dc000015 	stw	r16,0(sp)
   213d0:	01401704 	movi	r5,92
   213d4:	2021883a 	mov	r16,r4
   213d8:	9009883a 	mov	r4,r18
   213dc:	dfc00315 	stw	ra,12(sp)
   213e0:	dc400115 	stw	r17,4(sp)
   213e4:	00210140 	call	21014 <__mulsi3>
   213e8:	8009883a 	mov	r4,r16
   213ec:	11400304 	addi	r5,r2,12
   213f0:	1023883a 	mov	r17,r2
   213f4:	00227d00 	call	227d0 <_malloc_r>
   213f8:	1021883a 	mov	r16,r2
   213fc:	10000726 	beq	r2,zero,2141c <__sfmoreglue+0x5c>
   21400:	11000304 	addi	r4,r2,12
   21404:	10000015 	stw	zero,0(r2)
   21408:	14800115 	stw	r18,4(r2)
   2140c:	11000215 	stw	r4,8(r2)
   21410:	000b883a 	mov	r5,zero
   21414:	880d883a 	mov	r6,r17
   21418:	00230940 	call	23094 <memset>
   2141c:	8005883a 	mov	r2,r16
   21420:	dfc00317 	ldw	ra,12(sp)
   21424:	dc800217 	ldw	r18,8(sp)
   21428:	dc400117 	ldw	r17,4(sp)
   2142c:	dc000017 	ldw	r16,0(sp)
   21430:	dec00404 	addi	sp,sp,16
   21434:	f800283a 	ret

00021438 <_cleanup>:
   21438:	008000f4 	movhi	r2,3
   2143c:	10815104 	addi	r2,r2,1348
   21440:	11000017 	ldw	r4,0(r2)
   21444:	00213b41 	jmpi	213b4 <_cleanup_r>

00021448 <__sinit>:
   21448:	20800e17 	ldw	r2,56(r4)
   2144c:	1000401e 	bne	r2,zero,21550 <__sinit+0x108>
   21450:	21400117 	ldw	r5,4(r4)
   21454:	018000b4 	movhi	r6,2
   21458:	3184ed04 	addi	r6,r6,5044
   2145c:	20c00217 	ldw	r3,8(r4)
   21460:	21800f15 	stw	r6,60(r4)
   21464:	2080bb04 	addi	r2,r4,748
   21468:	02400044 	movi	r9,1
   2146c:	018000c4 	movi	r6,3
   21470:	2180b915 	stw	r6,740(r4)
   21474:	2080ba15 	stw	r2,744(r4)
   21478:	22400e15 	stw	r9,56(r4)
   2147c:	20800317 	ldw	r2,12(r4)
   21480:	2000b815 	stw	zero,736(r4)
   21484:	020000b4 	movhi	r8,2
   21488:	420d5204 	addi	r8,r8,13640
   2148c:	01c000b4 	movhi	r7,2
   21490:	39cd6704 	addi	r7,r7,13724
   21494:	018000b4 	movhi	r6,2
   21498:	318d8904 	addi	r6,r6,13860
   2149c:	010000b4 	movhi	r4,2
   214a0:	210da004 	addi	r4,r4,13952
   214a4:	02800104 	movi	r10,4
   214a8:	28000015 	stw	zero,0(r5)
   214ac:	28000115 	stw	zero,4(r5)
   214b0:	28000215 	stw	zero,8(r5)
   214b4:	2a80030d 	sth	r10,12(r5)
   214b8:	2800038d 	sth	zero,14(r5)
   214bc:	28000415 	stw	zero,16(r5)
   214c0:	28000515 	stw	zero,20(r5)
   214c4:	28000615 	stw	zero,24(r5)
   214c8:	29400715 	stw	r5,28(r5)
   214cc:	2a000815 	stw	r8,32(r5)
   214d0:	29c00915 	stw	r7,36(r5)
   214d4:	29800a15 	stw	r6,40(r5)
   214d8:	29000b15 	stw	r4,44(r5)
   214dc:	01400284 	movi	r5,10
   214e0:	18000015 	stw	zero,0(r3)
   214e4:	18000115 	stw	zero,4(r3)
   214e8:	18000215 	stw	zero,8(r3)
   214ec:	1940030d 	sth	r5,12(r3)
   214f0:	1a40038d 	sth	r9,14(r3)
   214f4:	18000415 	stw	zero,16(r3)
   214f8:	18000515 	stw	zero,20(r3)
   214fc:	18000615 	stw	zero,24(r3)
   21500:	18c00715 	stw	r3,28(r3)
   21504:	1a000815 	stw	r8,32(r3)
   21508:	19c00915 	stw	r7,36(r3)
   2150c:	19800a15 	stw	r6,40(r3)
   21510:	19000b15 	stw	r4,44(r3)
   21514:	00c00484 	movi	r3,18
   21518:	10c0030d 	sth	r3,12(r2)
   2151c:	00c00084 	movi	r3,2
   21520:	10000015 	stw	zero,0(r2)
   21524:	10000115 	stw	zero,4(r2)
   21528:	10000215 	stw	zero,8(r2)
   2152c:	10c0038d 	sth	r3,14(r2)
   21530:	10000415 	stw	zero,16(r2)
   21534:	10000515 	stw	zero,20(r2)
   21538:	10000615 	stw	zero,24(r2)
   2153c:	10800715 	stw	r2,28(r2)
   21540:	12000815 	stw	r8,32(r2)
   21544:	11c00915 	stw	r7,36(r2)
   21548:	11800a15 	stw	r6,40(r2)
   2154c:	11000b15 	stw	r4,44(r2)
   21550:	f800283a 	ret

00021554 <__sfp>:
   21554:	defffc04 	addi	sp,sp,-16
   21558:	008000f4 	movhi	r2,3
   2155c:	10815104 	addi	r2,r2,1348
   21560:	dc400115 	stw	r17,4(sp)
   21564:	14400017 	ldw	r17,0(r2)
   21568:	dc800215 	stw	r18,8(sp)
   2156c:	dfc00315 	stw	ra,12(sp)
   21570:	88800e17 	ldw	r2,56(r17)
   21574:	dc000015 	stw	r16,0(sp)
   21578:	2025883a 	mov	r18,r4
   2157c:	10002826 	beq	r2,zero,21620 <__sfp+0xcc>
   21580:	8c40b804 	addi	r17,r17,736
   21584:	043fffc4 	movi	r16,-1
   21588:	89400117 	ldw	r5,4(r17)
   2158c:	88800217 	ldw	r2,8(r17)
   21590:	297fffc4 	addi	r5,r5,-1
   21594:	28000a16 	blt	r5,zero,215c0 <__sfp+0x6c>
   21598:	10c0030f 	ldh	r3,12(r2)
   2159c:	18000c26 	beq	r3,zero,215d0 <__sfp+0x7c>
   215a0:	10c01a04 	addi	r3,r2,104
   215a4:	00000206 	br	215b0 <__sfp+0x5c>
   215a8:	19bfe90f 	ldh	r6,-92(r3)
   215ac:	30000826 	beq	r6,zero,215d0 <__sfp+0x7c>
   215b0:	297fffc4 	addi	r5,r5,-1
   215b4:	18bffd04 	addi	r2,r3,-12
   215b8:	18c01704 	addi	r3,r3,92
   215bc:	2c3ffa1e 	bne	r5,r16,215a8 <__sfp+0x54>
   215c0:	88800017 	ldw	r2,0(r17)
   215c4:	10001926 	beq	r2,zero,2162c <__sfp+0xd8>
   215c8:	1023883a 	mov	r17,r2
   215cc:	003fee06 	br	21588 <__sfp+0x34>
   215d0:	00ffffc4 	movi	r3,-1
   215d4:	10c0038d 	sth	r3,14(r2)
   215d8:	00c00044 	movi	r3,1
   215dc:	10c0030d 	sth	r3,12(r2)
   215e0:	10000015 	stw	zero,0(r2)
   215e4:	10000215 	stw	zero,8(r2)
   215e8:	10000115 	stw	zero,4(r2)
   215ec:	10000415 	stw	zero,16(r2)
   215f0:	10000515 	stw	zero,20(r2)
   215f4:	10000615 	stw	zero,24(r2)
   215f8:	10000c15 	stw	zero,48(r2)
   215fc:	10000d15 	stw	zero,52(r2)
   21600:	10001115 	stw	zero,68(r2)
   21604:	10001215 	stw	zero,72(r2)
   21608:	dfc00317 	ldw	ra,12(sp)
   2160c:	dc800217 	ldw	r18,8(sp)
   21610:	dc400117 	ldw	r17,4(sp)
   21614:	dc000017 	ldw	r16,0(sp)
   21618:	dec00404 	addi	sp,sp,16
   2161c:	f800283a 	ret
   21620:	8809883a 	mov	r4,r17
   21624:	00214480 	call	21448 <__sinit>
   21628:	003fd506 	br	21580 <__sfp+0x2c>
   2162c:	9009883a 	mov	r4,r18
   21630:	01400104 	movi	r5,4
   21634:	00213c00 	call	213c0 <__sfmoreglue>
   21638:	88800015 	stw	r2,0(r17)
   2163c:	103fe21e 	bne	r2,zero,215c8 <__sfp+0x74>
   21640:	00800304 	movi	r2,12
   21644:	90800015 	stw	r2,0(r18)
   21648:	0005883a 	mov	r2,zero
   2164c:	003fee06 	br	21608 <__sfp+0xb4>

00021650 <__sfp_lock_acquire>:
   21650:	f800283a 	ret

00021654 <__sfp_lock_release>:
   21654:	f800283a 	ret

00021658 <__sinit_lock_acquire>:
   21658:	f800283a 	ret

0002165c <__sinit_lock_release>:
   2165c:	f800283a 	ret

00021660 <__fp_lock_all>:
   21660:	008000f4 	movhi	r2,3
   21664:	10815204 	addi	r2,r2,1352
   21668:	11000017 	ldw	r4,0(r2)
   2166c:	014000b4 	movhi	r5,2
   21670:	2944e904 	addi	r5,r5,5028
   21674:	00223b01 	jmpi	223b0 <_fwalk>

00021678 <__fp_unlock_all>:
   21678:	008000f4 	movhi	r2,3
   2167c:	10815204 	addi	r2,r2,1352
   21680:	11000017 	ldw	r4,0(r2)
   21684:	014000b4 	movhi	r5,2
   21688:	2944eb04 	addi	r5,r5,5036
   2168c:	00223b01 	jmpi	223b0 <_fwalk>

00021690 <_fopen_r>:
   21690:	defffa04 	addi	sp,sp,-24
   21694:	dcc00415 	stw	r19,16(sp)
   21698:	2827883a 	mov	r19,r5
   2169c:	300b883a 	mov	r5,r6
   216a0:	d80d883a 	mov	r6,sp
   216a4:	dc800315 	stw	r18,12(sp)
   216a8:	dc400215 	stw	r17,8(sp)
   216ac:	dfc00515 	stw	ra,20(sp)
   216b0:	dc000115 	stw	r16,4(sp)
   216b4:	2025883a 	mov	r18,r4
   216b8:	00270840 	call	27084 <__sflags>
   216bc:	1023883a 	mov	r17,r2
   216c0:	10002926 	beq	r2,zero,21768 <_fopen_r+0xd8>
   216c4:	9009883a 	mov	r4,r18
   216c8:	00215540 	call	21554 <__sfp>
   216cc:	1021883a 	mov	r16,r2
   216d0:	10002526 	beq	r2,zero,21768 <_fopen_r+0xd8>
   216d4:	d9800017 	ldw	r6,0(sp)
   216d8:	9009883a 	mov	r4,r18
   216dc:	980b883a 	mov	r5,r19
   216e0:	01c06d84 	movi	r7,438
   216e4:	00231700 	call	23170 <_open_r>
   216e8:	10001c16 	blt	r2,zero,2175c <_fopen_r+0xcc>
   216ec:	8080038d 	sth	r2,14(r16)
   216f0:	008000b4 	movhi	r2,2
   216f4:	108d5204 	addi	r2,r2,13640
   216f8:	80800815 	stw	r2,32(r16)
   216fc:	008000b4 	movhi	r2,2
   21700:	108d6704 	addi	r2,r2,13724
   21704:	80800915 	stw	r2,36(r16)
   21708:	008000b4 	movhi	r2,2
   2170c:	108d8904 	addi	r2,r2,13860
   21710:	88c0400c 	andi	r3,r17,256
   21714:	80800a15 	stw	r2,40(r16)
   21718:	008000b4 	movhi	r2,2
   2171c:	108da004 	addi	r2,r2,13952
   21720:	80800b15 	stw	r2,44(r16)
   21724:	18bfffcc 	andi	r2,r3,65535
   21728:	10a0001c 	xori	r2,r2,32768
   2172c:	8440030d 	sth	r17,12(r16)
   21730:	84000715 	stw	r16,28(r16)
   21734:	10a00004 	addi	r2,r2,-32768
   21738:	1000141e 	bne	r2,zero,2178c <_fopen_r+0xfc>
   2173c:	8005883a 	mov	r2,r16
   21740:	dfc00517 	ldw	ra,20(sp)
   21744:	dcc00417 	ldw	r19,16(sp)
   21748:	dc800317 	ldw	r18,12(sp)
   2174c:	dc400217 	ldw	r17,8(sp)
   21750:	dc000117 	ldw	r16,4(sp)
   21754:	dec00604 	addi	sp,sp,24
   21758:	f800283a 	ret
   2175c:	00216500 	call	21650 <__sfp_lock_acquire>
   21760:	8000030d 	sth	zero,12(r16)
   21764:	00216540 	call	21654 <__sfp_lock_release>
   21768:	0021883a 	mov	r16,zero
   2176c:	8005883a 	mov	r2,r16
   21770:	dfc00517 	ldw	ra,20(sp)
   21774:	dcc00417 	ldw	r19,16(sp)
   21778:	dc800317 	ldw	r18,12(sp)
   2177c:	dc400217 	ldw	r17,8(sp)
   21780:	dc000117 	ldw	r16,4(sp)
   21784:	dec00604 	addi	sp,sp,24
   21788:	f800283a 	ret
   2178c:	9009883a 	mov	r4,r18
   21790:	800b883a 	mov	r5,r16
   21794:	000d883a 	mov	r6,zero
   21798:	01c00084 	movi	r7,2
   2179c:	0021eb00 	call	21eb0 <_fseek_r>
   217a0:	8005883a 	mov	r2,r16
   217a4:	dfc00517 	ldw	ra,20(sp)
   217a8:	dcc00417 	ldw	r19,16(sp)
   217ac:	dc800317 	ldw	r18,12(sp)
   217b0:	dc400217 	ldw	r17,8(sp)
   217b4:	dc000117 	ldw	r16,4(sp)
   217b8:	dec00604 	addi	sp,sp,24
   217bc:	f800283a 	ret

000217c0 <fopen>:
   217c0:	00c000f4 	movhi	r3,3
   217c4:	18c15204 	addi	r3,r3,1352
   217c8:	2005883a 	mov	r2,r4
   217cc:	19000017 	ldw	r4,0(r3)
   217d0:	280d883a 	mov	r6,r5
   217d4:	100b883a 	mov	r5,r2
   217d8:	00216901 	jmpi	21690 <_fopen_r>

000217dc <_fprintf_r>:
   217dc:	defffe04 	addi	sp,sp,-8
   217e0:	2809883a 	mov	r4,r5
   217e4:	dfc00015 	stw	ra,0(sp)
   217e8:	d9c00115 	stw	r7,4(sp)
   217ec:	300b883a 	mov	r5,r6
   217f0:	d9800104 	addi	r6,sp,4
   217f4:	00255c40 	call	255c4 <__vfprintf_internal>
   217f8:	dfc00017 	ldw	ra,0(sp)
   217fc:	dec00204 	addi	sp,sp,8
   21800:	f800283a 	ret

00021804 <fprintf>:
   21804:	defffd04 	addi	sp,sp,-12
   21808:	dfc00015 	stw	ra,0(sp)
   2180c:	d9800115 	stw	r6,4(sp)
   21810:	d9c00215 	stw	r7,8(sp)
   21814:	d9800104 	addi	r6,sp,4
   21818:	00255c40 	call	255c4 <__vfprintf_internal>
   2181c:	dfc00017 	ldw	ra,0(sp)
   21820:	dec00304 	addi	sp,sp,12
   21824:	f800283a 	ret

00021828 <_fread_r>:
   21828:	defff504 	addi	sp,sp,-44
   2182c:	dd000515 	stw	r20,20(sp)
   21830:	dcc00415 	stw	r19,16(sp)
   21834:	2029883a 	mov	r20,r4
   21838:	2827883a 	mov	r19,r5
   2183c:	3809883a 	mov	r4,r7
   21840:	300b883a 	mov	r5,r6
   21844:	ddc00815 	stw	r23,32(sp)
   21848:	dd800715 	stw	r22,28(sp)
   2184c:	dd400615 	stw	r21,24(sp)
   21850:	dc000115 	stw	r16,4(sp)
   21854:	dfc00a15 	stw	ra,40(sp)
   21858:	df000915 	stw	fp,36(sp)
   2185c:	dc800315 	stw	r18,12(sp)
   21860:	dc400215 	stw	r17,8(sp)
   21864:	302f883a 	mov	r23,r6
   21868:	382b883a 	mov	r21,r7
   2186c:	00210140 	call	21014 <__mulsi3>
   21870:	102d883a 	mov	r22,r2
   21874:	dc000b17 	ldw	r16,44(sp)
   21878:	10002e26 	beq	r2,zero,21934 <_fread_r+0x10c>
   2187c:	a0000226 	beq	r20,zero,21888 <_fread_r+0x60>
   21880:	a0800e17 	ldw	r2,56(r20)
   21884:	10006726 	beq	r2,zero,21a24 <_fread_r+0x1fc>
   21888:	84400117 	ldw	r17,4(r16)
   2188c:	88002b16 	blt	r17,zero,2193c <_fread_r+0x114>
   21890:	8080030b 	ldhu	r2,12(r16)
   21894:	8807883a 	mov	r3,r17
   21898:	1080008c 	andi	r2,r2,2
   2189c:	10bfffcc 	andi	r2,r2,65535
   218a0:	10a0001c 	xori	r2,r2,32768
   218a4:	10a00004 	addi	r2,r2,-32768
   218a8:	10002d1e 	bne	r2,zero,21960 <_fread_r+0x138>
   218ac:	b025883a 	mov	r18,r22
   218b0:	00000106 	br	218b8 <_fread_r+0x90>
   218b4:	84400117 	ldw	r17,4(r16)
   218b8:	9809883a 	mov	r4,r19
   218bc:	880d883a 	mov	r6,r17
   218c0:	81400017 	ldw	r5,0(r16)
   218c4:	8c805c2e 	bgeu	r17,r18,21a38 <_fread_r+0x210>
   218c8:	0022f540 	call	22f54 <memcpy>
   218cc:	80800017 	ldw	r2,0(r16)
   218d0:	9c67883a 	add	r19,r19,r17
   218d4:	9465c83a 	sub	r18,r18,r17
   218d8:	1463883a 	add	r17,r2,r17
   218dc:	a009883a 	mov	r4,r20
   218e0:	800b883a 	mov	r5,r16
   218e4:	84400015 	stw	r17,0(r16)
   218e8:	00232f80 	call	232f8 <__srefill_r>
   218ec:	103ff126 	beq	r2,zero,218b4 <_fread_r+0x8c>
   218f0:	b489c83a 	sub	r4,r22,r18
   218f4:	b80b883a 	mov	r5,r23
   218f8:	002ad940 	call	2ad94 <__udivsi3>
   218fc:	102b883a 	mov	r21,r2
   21900:	a805883a 	mov	r2,r21
   21904:	dfc00a17 	ldw	ra,40(sp)
   21908:	df000917 	ldw	fp,36(sp)
   2190c:	ddc00817 	ldw	r23,32(sp)
   21910:	dd800717 	ldw	r22,28(sp)
   21914:	dd400617 	ldw	r21,24(sp)
   21918:	dd000517 	ldw	r20,20(sp)
   2191c:	dcc00417 	ldw	r19,16(sp)
   21920:	dc800317 	ldw	r18,12(sp)
   21924:	dc400217 	ldw	r17,8(sp)
   21928:	dc000117 	ldw	r16,4(sp)
   2192c:	dec00b04 	addi	sp,sp,44
   21930:	f800283a 	ret
   21934:	002b883a 	mov	r21,zero
   21938:	003ff106 	br	21900 <_fread_r+0xd8>
   2193c:	8080030b 	ldhu	r2,12(r16)
   21940:	80000115 	stw	zero,4(r16)
   21944:	0007883a 	mov	r3,zero
   21948:	1080008c 	andi	r2,r2,2
   2194c:	10bfffcc 	andi	r2,r2,65535
   21950:	10a0001c 	xori	r2,r2,32768
   21954:	10a00004 	addi	r2,r2,-32768
   21958:	0023883a 	mov	r17,zero
   2195c:	103fd326 	beq	r2,zero,218ac <_fread_r+0x84>
   21960:	1823883a 	mov	r17,r3
   21964:	b0c0012e 	bgeu	r22,r3,2196c <_fread_r+0x144>
   21968:	b023883a 	mov	r17,r22
   2196c:	81400017 	ldw	r5,0(r16)
   21970:	9809883a 	mov	r4,r19
   21974:	880d883a 	mov	r6,r17
   21978:	0022f540 	call	22f54 <memcpy>
   2197c:	80800117 	ldw	r2,4(r16)
   21980:	84800017 	ldw	r18,0(r16)
   21984:	81400c17 	ldw	r5,48(r16)
   21988:	1445c83a 	sub	r2,r2,r17
   2198c:	9465883a 	add	r18,r18,r17
   21990:	84800015 	stw	r18,0(r16)
   21994:	80800115 	stw	r2,4(r16)
   21998:	9c67883a 	add	r19,r19,r17
   2199c:	b463c83a 	sub	r17,r22,r17
   219a0:	28002e26 	beq	r5,zero,21a5c <_fread_r+0x234>
   219a4:	883fd626 	beq	r17,zero,21900 <_fread_r+0xd8>
   219a8:	80801004 	addi	r2,r16,64
   219ac:	28800326 	beq	r5,r2,219bc <_fread_r+0x194>
   219b0:	a009883a 	mov	r4,r20
   219b4:	0021be00 	call	21be0 <_free_r>
   219b8:	84800017 	ldw	r18,0(r16)
   219bc:	80000c15 	stw	zero,48(r16)
   219c0:	80c00517 	ldw	r3,20(r16)
   219c4:	87000417 	ldw	fp,16(r16)
   219c8:	d8c00015 	stw	r3,0(sp)
   219cc:	00000106 	br	219d4 <_fread_r+0x1ac>
   219d0:	883fcb26 	beq	r17,zero,21900 <_fread_r+0xd8>
   219d4:	84c00415 	stw	r19,16(r16)
   219d8:	84400515 	stw	r17,20(r16)
   219dc:	84c00015 	stw	r19,0(r16)
   219e0:	a009883a 	mov	r4,r20
   219e4:	800b883a 	mov	r5,r16
   219e8:	00232f80 	call	232f8 <__srefill_r>
   219ec:	d8c00017 	ldw	r3,0(sp)
   219f0:	81000117 	ldw	r4,4(r16)
   219f4:	87000415 	stw	fp,16(r16)
   219f8:	80c00515 	stw	r3,20(r16)
   219fc:	84800015 	stw	r18,0(r16)
   21a00:	80000115 	stw	zero,4(r16)
   21a04:	8923c83a 	sub	r17,r17,r4
   21a08:	9927883a 	add	r19,r19,r4
   21a0c:	103ff026 	beq	r2,zero,219d0 <_fread_r+0x1a8>
   21a10:	b449c83a 	sub	r4,r22,r17
   21a14:	b80b883a 	mov	r5,r23
   21a18:	002ad940 	call	2ad94 <__udivsi3>
   21a1c:	102b883a 	mov	r21,r2
   21a20:	003fb706 	br	21900 <_fread_r+0xd8>
   21a24:	a009883a 	mov	r4,r20
   21a28:	00214480 	call	21448 <__sinit>
   21a2c:	84400117 	ldw	r17,4(r16)
   21a30:	883f970e 	bge	r17,zero,21890 <_fread_r+0x68>
   21a34:	003fc106 	br	2193c <_fread_r+0x114>
   21a38:	900d883a 	mov	r6,r18
   21a3c:	0022f540 	call	22f54 <memcpy>
   21a40:	80800117 	ldw	r2,4(r16)
   21a44:	80c00017 	ldw	r3,0(r16)
   21a48:	1485c83a 	sub	r2,r2,r18
   21a4c:	1ca5883a 	add	r18,r3,r18
   21a50:	80800115 	stw	r2,4(r16)
   21a54:	84800015 	stw	r18,0(r16)
   21a58:	003fa906 	br	21900 <_fread_r+0xd8>
   21a5c:	883fd81e 	bne	r17,zero,219c0 <_fread_r+0x198>
   21a60:	003fa706 	br	21900 <_fread_r+0xd8>

00021a64 <fread>:
   21a64:	008000f4 	movhi	r2,3
   21a68:	10815204 	addi	r2,r2,1352
   21a6c:	2011883a 	mov	r8,r4
   21a70:	11000017 	ldw	r4,0(r2)
   21a74:	defffe04 	addi	sp,sp,-8
   21a78:	2807883a 	mov	r3,r5
   21a7c:	3005883a 	mov	r2,r6
   21a80:	d9c00015 	stw	r7,0(sp)
   21a84:	400b883a 	mov	r5,r8
   21a88:	180d883a 	mov	r6,r3
   21a8c:	100f883a 	mov	r7,r2
   21a90:	dfc00115 	stw	ra,4(sp)
   21a94:	00218280 	call	21828 <_fread_r>
   21a98:	dfc00117 	ldw	ra,4(sp)
   21a9c:	dec00204 	addi	sp,sp,8
   21aa0:	f800283a 	ret

00021aa4 <_malloc_trim_r>:
   21aa4:	defffb04 	addi	sp,sp,-20
   21aa8:	dcc00315 	stw	r19,12(sp)
   21aac:	dc800215 	stw	r18,8(sp)
   21ab0:	dc400115 	stw	r17,4(sp)
   21ab4:	dc000015 	stw	r16,0(sp)
   21ab8:	2827883a 	mov	r19,r5
   21abc:	dfc00415 	stw	ra,16(sp)
   21ac0:	044000f4 	movhi	r17,3
   21ac4:	8c7bc004 	addi	r17,r17,-4352
   21ac8:	2021883a 	mov	r16,r4
   21acc:	002b9a40 	call	2b9a4 <__malloc_lock>
   21ad0:	88800217 	ldw	r2,8(r17)
   21ad4:	14800117 	ldw	r18,4(r2)
   21ad8:	00bfff04 	movi	r2,-4
   21adc:	90a4703a 	and	r18,r18,r2
   21ae0:	9083fbc4 	addi	r2,r18,4079
   21ae4:	14e7c83a 	sub	r19,r2,r19
   21ae8:	9826d33a 	srli	r19,r19,12
   21aec:	0083ffc4 	movi	r2,4095
   21af0:	9cffffc4 	addi	r19,r19,-1
   21af4:	9826933a 	slli	r19,r19,12
   21af8:	14c0060e 	bge	r2,r19,21b14 <_malloc_trim_r+0x70>
   21afc:	8009883a 	mov	r4,r16
   21b00:	000b883a 	mov	r5,zero
   21b04:	00234e40 	call	234e4 <_sbrk_r>
   21b08:	88c00217 	ldw	r3,8(r17)
   21b0c:	1c87883a 	add	r3,r3,r18
   21b10:	10c00a26 	beq	r2,r3,21b3c <_malloc_trim_r+0x98>
   21b14:	8009883a 	mov	r4,r16
   21b18:	002b9c40 	call	2b9c4 <__malloc_unlock>
   21b1c:	0005883a 	mov	r2,zero
   21b20:	dfc00417 	ldw	ra,16(sp)
   21b24:	dcc00317 	ldw	r19,12(sp)
   21b28:	dc800217 	ldw	r18,8(sp)
   21b2c:	dc400117 	ldw	r17,4(sp)
   21b30:	dc000017 	ldw	r16,0(sp)
   21b34:	dec00504 	addi	sp,sp,20
   21b38:	f800283a 	ret
   21b3c:	8009883a 	mov	r4,r16
   21b40:	04cbc83a 	sub	r5,zero,r19
   21b44:	00234e40 	call	234e4 <_sbrk_r>
   21b48:	00ffffc4 	movi	r3,-1
   21b4c:	10c01326 	beq	r2,r3,21b9c <_malloc_trim_r+0xf8>
   21b50:	008000f4 	movhi	r2,3
   21b54:	10883104 	addi	r2,r2,8388
   21b58:	11000017 	ldw	r4,0(r2)
   21b5c:	88c00217 	ldw	r3,8(r17)
   21b60:	94e5c83a 	sub	r18,r18,r19
   21b64:	94800054 	ori	r18,r18,1
   21b68:	24e7c83a 	sub	r19,r4,r19
   21b6c:	1c800115 	stw	r18,4(r3)
   21b70:	8009883a 	mov	r4,r16
   21b74:	14c00015 	stw	r19,0(r2)
   21b78:	002b9c40 	call	2b9c4 <__malloc_unlock>
   21b7c:	00800044 	movi	r2,1
   21b80:	dfc00417 	ldw	ra,16(sp)
   21b84:	dcc00317 	ldw	r19,12(sp)
   21b88:	dc800217 	ldw	r18,8(sp)
   21b8c:	dc400117 	ldw	r17,4(sp)
   21b90:	dc000017 	ldw	r16,0(sp)
   21b94:	dec00504 	addi	sp,sp,20
   21b98:	f800283a 	ret
   21b9c:	8009883a 	mov	r4,r16
   21ba0:	000b883a 	mov	r5,zero
   21ba4:	00234e40 	call	234e4 <_sbrk_r>
   21ba8:	88c00217 	ldw	r3,8(r17)
   21bac:	014003c4 	movi	r5,15
   21bb0:	10c9c83a 	sub	r4,r2,r3
   21bb4:	293fd70e 	bge	r5,r4,21b14 <_malloc_trim_r+0x70>
   21bb8:	014000f4 	movhi	r5,3
   21bbc:	29415304 	addi	r5,r5,1356
   21bc0:	29400017 	ldw	r5,0(r5)
   21bc4:	21000054 	ori	r4,r4,1
   21bc8:	19000115 	stw	r4,4(r3)
   21bcc:	1145c83a 	sub	r2,r2,r5
   21bd0:	014000f4 	movhi	r5,3
   21bd4:	29483104 	addi	r5,r5,8388
   21bd8:	28800015 	stw	r2,0(r5)
   21bdc:	003fcd06 	br	21b14 <_malloc_trim_r+0x70>

00021be0 <_free_r>:
   21be0:	defffd04 	addi	sp,sp,-12
   21be4:	dc400115 	stw	r17,4(sp)
   21be8:	dc000015 	stw	r16,0(sp)
   21bec:	dfc00215 	stw	ra,8(sp)
   21bf0:	2821883a 	mov	r16,r5
   21bf4:	2023883a 	mov	r17,r4
   21bf8:	28004b26 	beq	r5,zero,21d28 <_free_r+0x148>
   21bfc:	002b9a40 	call	2b9a4 <__malloc_lock>
   21c00:	823fff17 	ldw	r8,-4(r16)
   21c04:	00bfff84 	movi	r2,-2
   21c08:	81bffe04 	addi	r6,r16,-8
   21c0c:	4084703a 	and	r2,r8,r2
   21c10:	3087883a 	add	r3,r6,r2
   21c14:	014000f4 	movhi	r5,3
   21c18:	297bc004 	addi	r5,r5,-4352
   21c1c:	1a400117 	ldw	r9,4(r3)
   21c20:	29000217 	ldw	r4,8(r5)
   21c24:	01ffff04 	movi	r7,-4
   21c28:	49ce703a 	and	r7,r9,r7
   21c2c:	20c06526 	beq	r4,r3,21dc4 <_free_r+0x1e4>
   21c30:	19c00115 	stw	r7,4(r3)
   21c34:	4200004c 	andi	r8,r8,1
   21c38:	40003026 	beq	r8,zero,21cfc <_free_r+0x11c>
   21c3c:	0009883a 	mov	r4,zero
   21c40:	19d1883a 	add	r8,r3,r7
   21c44:	42000117 	ldw	r8,4(r8)
   21c48:	4200004c 	andi	r8,r8,1
   21c4c:	4000061e 	bne	r8,zero,21c68 <_free_r+0x88>
   21c50:	11c5883a 	add	r2,r2,r7
   21c54:	19c00217 	ldw	r7,8(r3)
   21c58:	20004e26 	beq	r4,zero,21d94 <_free_r+0x1b4>
   21c5c:	18c00317 	ldw	r3,12(r3)
   21c60:	38c00315 	stw	r3,12(r7)
   21c64:	19c00215 	stw	r7,8(r3)
   21c68:	11c00054 	ori	r7,r2,1
   21c6c:	3087883a 	add	r3,r6,r2
   21c70:	31c00115 	stw	r7,4(r6)
   21c74:	18800015 	stw	r2,0(r3)
   21c78:	20001a1e 	bne	r4,zero,21ce4 <_free_r+0x104>
   21c7c:	00c07fc4 	movi	r3,511
   21c80:	18802e2e 	bgeu	r3,r2,21d3c <_free_r+0x15c>
   21c84:	1006d27a 	srli	r3,r2,9
   21c88:	01000104 	movi	r4,4
   21c8c:	20c06636 	bltu	r4,r3,21e28 <_free_r+0x248>
   21c90:	1008d1ba 	srli	r4,r2,6
   21c94:	21000e04 	addi	r4,r4,56
   21c98:	210f883a 	add	r7,r4,r4
   21c9c:	39cf883a 	add	r7,r7,r7
   21ca0:	39cf883a 	add	r7,r7,r7
   21ca4:	29cf883a 	add	r7,r5,r7
   21ca8:	38c00217 	ldw	r3,8(r7)
   21cac:	014000f4 	movhi	r5,3
   21cb0:	297bc004 	addi	r5,r5,-4352
   21cb4:	19c06126 	beq	r3,r7,21e3c <_free_r+0x25c>
   21cb8:	013fff04 	movi	r4,-4
   21cbc:	19400117 	ldw	r5,4(r3)
   21cc0:	290a703a 	and	r5,r5,r4
   21cc4:	1140022e 	bgeu	r2,r5,21cd0 <_free_r+0xf0>
   21cc8:	18c00217 	ldw	r3,8(r3)
   21ccc:	38fffb1e 	bne	r7,r3,21cbc <_free_r+0xdc>
   21cd0:	18800317 	ldw	r2,12(r3)
   21cd4:	30800315 	stw	r2,12(r6)
   21cd8:	30c00215 	stw	r3,8(r6)
   21cdc:	11800215 	stw	r6,8(r2)
   21ce0:	19800315 	stw	r6,12(r3)
   21ce4:	8809883a 	mov	r4,r17
   21ce8:	dfc00217 	ldw	ra,8(sp)
   21cec:	dc400117 	ldw	r17,4(sp)
   21cf0:	dc000017 	ldw	r16,0(sp)
   21cf4:	dec00304 	addi	sp,sp,12
   21cf8:	002b9c41 	jmpi	2b9c4 <__malloc_unlock>
   21cfc:	813ffe17 	ldw	r4,-8(r16)
   21d00:	2a400204 	addi	r9,r5,8
   21d04:	310dc83a 	sub	r6,r6,r4
   21d08:	32000217 	ldw	r8,8(r6)
   21d0c:	1105883a 	add	r2,r2,r4
   21d10:	42404326 	beq	r8,r9,21e20 <_free_r+0x240>
   21d14:	32400317 	ldw	r9,12(r6)
   21d18:	0009883a 	mov	r4,zero
   21d1c:	42400315 	stw	r9,12(r8)
   21d20:	4a000215 	stw	r8,8(r9)
   21d24:	003fc606 	br	21c40 <_free_r+0x60>
   21d28:	dfc00217 	ldw	ra,8(sp)
   21d2c:	dc400117 	ldw	r17,4(sp)
   21d30:	dc000017 	ldw	r16,0(sp)
   21d34:	dec00304 	addi	sp,sp,12
   21d38:	f800283a 	ret
   21d3c:	1004d0fa 	srli	r2,r2,3
   21d40:	02000044 	movi	r8,1
   21d44:	29c00117 	ldw	r7,4(r5)
   21d48:	1087883a 	add	r3,r2,r2
   21d4c:	18c7883a 	add	r3,r3,r3
   21d50:	1005d0ba 	srai	r2,r2,2
   21d54:	18c7883a 	add	r3,r3,r3
   21d58:	28c7883a 	add	r3,r5,r3
   21d5c:	19000217 	ldw	r4,8(r3)
   21d60:	4084983a 	sll	r2,r8,r2
   21d64:	30c00315 	stw	r3,12(r6)
   21d68:	31000215 	stw	r4,8(r6)
   21d6c:	11c4b03a 	or	r2,r2,r7
   21d70:	21800315 	stw	r6,12(r4)
   21d74:	8809883a 	mov	r4,r17
   21d78:	28800115 	stw	r2,4(r5)
   21d7c:	19800215 	stw	r6,8(r3)
   21d80:	dfc00217 	ldw	ra,8(sp)
   21d84:	dc400117 	ldw	r17,4(sp)
   21d88:	dc000017 	ldw	r16,0(sp)
   21d8c:	dec00304 	addi	sp,sp,12
   21d90:	002b9c41 	jmpi	2b9c4 <__malloc_unlock>
   21d94:	020000f4 	movhi	r8,3
   21d98:	423bc204 	addi	r8,r8,-4344
   21d9c:	3a3faf1e 	bne	r7,r8,21c5c <_free_r+0x7c>
   21da0:	29800515 	stw	r6,20(r5)
   21da4:	29800415 	stw	r6,16(r5)
   21da8:	11000054 	ori	r4,r2,1
   21dac:	3087883a 	add	r3,r6,r2
   21db0:	31c00315 	stw	r7,12(r6)
   21db4:	31c00215 	stw	r7,8(r6)
   21db8:	31000115 	stw	r4,4(r6)
   21dbc:	18800015 	stw	r2,0(r3)
   21dc0:	003fc806 	br	21ce4 <_free_r+0x104>
   21dc4:	4200004c 	andi	r8,r8,1
   21dc8:	3885883a 	add	r2,r7,r2
   21dcc:	4000071e 	bne	r8,zero,21dec <_free_r+0x20c>
   21dd0:	81fffe17 	ldw	r7,-8(r16)
   21dd4:	31cdc83a 	sub	r6,r6,r7
   21dd8:	30c00317 	ldw	r3,12(r6)
   21ddc:	31000217 	ldw	r4,8(r6)
   21de0:	11c5883a 	add	r2,r2,r7
   21de4:	20c00315 	stw	r3,12(r4)
   21de8:	19000215 	stw	r4,8(r3)
   21dec:	00c000f4 	movhi	r3,3
   21df0:	18c15404 	addi	r3,r3,1360
   21df4:	18c00017 	ldw	r3,0(r3)
   21df8:	11000054 	ori	r4,r2,1
   21dfc:	31000115 	stw	r4,4(r6)
   21e00:	29800215 	stw	r6,8(r5)
   21e04:	10ffb736 	bltu	r2,r3,21ce4 <_free_r+0x104>
   21e08:	008000f4 	movhi	r2,3
   21e0c:	10882704 	addi	r2,r2,8348
   21e10:	11400017 	ldw	r5,0(r2)
   21e14:	8809883a 	mov	r4,r17
   21e18:	0021aa40 	call	21aa4 <_malloc_trim_r>
   21e1c:	003fb106 	br	21ce4 <_free_r+0x104>
   21e20:	01000044 	movi	r4,1
   21e24:	003f8606 	br	21c40 <_free_r+0x60>
   21e28:	01000504 	movi	r4,20
   21e2c:	20c00b36 	bltu	r4,r3,21e5c <_free_r+0x27c>
   21e30:	190016c4 	addi	r4,r3,91
   21e34:	210f883a 	add	r7,r4,r4
   21e38:	003f9806 	br	21c9c <_free_r+0xbc>
   21e3c:	2009d0ba 	srai	r4,r4,2
   21e40:	00800044 	movi	r2,1
   21e44:	29c00117 	ldw	r7,4(r5)
   21e48:	1108983a 	sll	r4,r2,r4
   21e4c:	1805883a 	mov	r2,r3
   21e50:	21c8b03a 	or	r4,r4,r7
   21e54:	29000115 	stw	r4,4(r5)
   21e58:	003f9e06 	br	21cd4 <_free_r+0xf4>
   21e5c:	01001504 	movi	r4,84
   21e60:	20c00436 	bltu	r4,r3,21e74 <_free_r+0x294>
   21e64:	1008d33a 	srli	r4,r2,12
   21e68:	21001b84 	addi	r4,r4,110
   21e6c:	210f883a 	add	r7,r4,r4
   21e70:	003f8a06 	br	21c9c <_free_r+0xbc>
   21e74:	01005504 	movi	r4,340
   21e78:	20c00436 	bltu	r4,r3,21e8c <_free_r+0x2ac>
   21e7c:	1008d3fa 	srli	r4,r2,15
   21e80:	21001dc4 	addi	r4,r4,119
   21e84:	210f883a 	add	r7,r4,r4
   21e88:	003f8406 	br	21c9c <_free_r+0xbc>
   21e8c:	01015504 	movi	r4,1364
   21e90:	20c00436 	bltu	r4,r3,21ea4 <_free_r+0x2c4>
   21e94:	1008d4ba 	srli	r4,r2,18
   21e98:	21001f04 	addi	r4,r4,124
   21e9c:	210f883a 	add	r7,r4,r4
   21ea0:	003f7e06 	br	21c9c <_free_r+0xbc>
   21ea4:	01c03f04 	movi	r7,252
   21ea8:	01001f84 	movi	r4,126
   21eac:	003f7b06 	br	21c9c <_free_r+0xbc>

00021eb0 <_fseek_r>:
   21eb0:	deffe804 	addi	sp,sp,-96
   21eb4:	dd001315 	stw	r20,76(sp)
   21eb8:	dc801115 	stw	r18,68(sp)
   21ebc:	dc401015 	stw	r17,64(sp)
   21ec0:	dc000f15 	stw	r16,60(sp)
   21ec4:	dfc01715 	stw	ra,92(sp)
   21ec8:	ddc01615 	stw	r23,88(sp)
   21ecc:	dd801515 	stw	r22,84(sp)
   21ed0:	dd401415 	stw	r21,80(sp)
   21ed4:	dcc01215 	stw	r19,72(sp)
   21ed8:	2023883a 	mov	r17,r4
   21edc:	2821883a 	mov	r16,r5
   21ee0:	3029883a 	mov	r20,r6
   21ee4:	3825883a 	mov	r18,r7
   21ee8:	20000226 	beq	r4,zero,21ef4 <_fseek_r+0x44>
   21eec:	20800e17 	ldw	r2,56(r4)
   21ef0:	10006226 	beq	r2,zero,2207c <_fseek_r+0x1cc>
   21ef4:	80c0030b 	ldhu	r3,12(r16)
   21ef8:	00804204 	movi	r2,264
   21efc:	18c0420c 	andi	r3,r3,264
   21f00:	18806326 	beq	r3,r2,22090 <_fseek_r+0x1e0>
   21f04:	84c00a17 	ldw	r19,40(r16)
   21f08:	98010226 	beq	r19,zero,22314 <_fseek_r+0x464>
   21f0c:	00800044 	movi	r2,1
   21f10:	90803d26 	beq	r18,r2,22008 <_fseek_r+0x158>
   21f14:	00800084 	movi	r2,2
   21f18:	90800126 	beq	r18,r2,21f20 <_fseek_r+0x70>
   21f1c:	90002c1e 	bne	r18,zero,21fd0 <_fseek_r+0x120>
   21f20:	80800417 	ldw	r2,16(r16)
   21f24:	002d883a 	mov	r22,zero
   21f28:	002b883a 	mov	r21,zero
   21f2c:	1000e526 	beq	r2,zero,222c4 <_fseek_r+0x414>
   21f30:	80c0030b 	ldhu	r3,12(r16)
   21f34:	1882068c 	andi	r2,r3,2074
   21f38:	1809883a 	mov	r4,r3
   21f3c:	10000a1e 	bne	r2,zero,21f68 <_fseek_r+0xb8>
   21f40:	1881000c 	andi	r2,r3,1024
   21f44:	10bfffcc 	andi	r2,r2,65535
   21f48:	10a0001c 	xori	r2,r2,32768
   21f4c:	10a00004 	addi	r2,r2,-32768
   21f50:	1000631e 	bne	r2,zero,220e0 <_fseek_r+0x230>
   21f54:	008000b4 	movhi	r2,2
   21f58:	108d8904 	addi	r2,r2,13860
   21f5c:	98805026 	beq	r19,r2,220a0 <_fseek_r+0x1f0>
   21f60:	18c20014 	ori	r3,r3,2048
   21f64:	80c0030d 	sth	r3,12(r16)
   21f68:	8809883a 	mov	r4,r17
   21f6c:	800b883a 	mov	r5,r16
   21f70:	002118c0 	call	2118c <_fflush_r>
   21f74:	1000181e 	bne	r2,zero,21fd8 <_fseek_r+0x128>
   21f78:	81400717 	ldw	r5,28(r16)
   21f7c:	8809883a 	mov	r4,r17
   21f80:	a00d883a 	mov	r6,r20
   21f84:	900f883a 	mov	r7,r18
   21f88:	983ee83a 	callr	r19
   21f8c:	00ffffc4 	movi	r3,-1
   21f90:	10c01126 	beq	r2,r3,21fd8 <_fseek_r+0x128>
   21f94:	81400c17 	ldw	r5,48(r16)
   21f98:	28000526 	beq	r5,zero,21fb0 <_fseek_r+0x100>
   21f9c:	80801004 	addi	r2,r16,64
   21fa0:	28800226 	beq	r5,r2,21fac <_fseek_r+0xfc>
   21fa4:	8809883a 	mov	r4,r17
   21fa8:	0021be00 	call	21be0 <_free_r>
   21fac:	80000c15 	stw	zero,48(r16)
   21fb0:	8080030b 	ldhu	r2,12(r16)
   21fb4:	80c00417 	ldw	r3,16(r16)
   21fb8:	80000115 	stw	zero,4(r16)
   21fbc:	10bdf7cc 	andi	r2,r2,63455
   21fc0:	8080030d 	sth	r2,12(r16)
   21fc4:	80c00015 	stw	r3,0(r16)
   21fc8:	0005883a 	mov	r2,zero
   21fcc:	00000306 	br	21fdc <_fseek_r+0x12c>
   21fd0:	00800584 	movi	r2,22
   21fd4:	88800015 	stw	r2,0(r17)
   21fd8:	00bfffc4 	movi	r2,-1
   21fdc:	dfc01717 	ldw	ra,92(sp)
   21fe0:	ddc01617 	ldw	r23,88(sp)
   21fe4:	dd801517 	ldw	r22,84(sp)
   21fe8:	dd401417 	ldw	r21,80(sp)
   21fec:	dd001317 	ldw	r20,76(sp)
   21ff0:	dcc01217 	ldw	r19,72(sp)
   21ff4:	dc801117 	ldw	r18,68(sp)
   21ff8:	dc401017 	ldw	r17,64(sp)
   21ffc:	dc000f17 	ldw	r16,60(sp)
   22000:	dec01804 	addi	sp,sp,96
   22004:	f800283a 	ret
   22008:	8809883a 	mov	r4,r17
   2200c:	800b883a 	mov	r5,r16
   22010:	002118c0 	call	2118c <_fflush_r>
   22014:	8080030b 	ldhu	r2,12(r16)
   22018:	10c4000c 	andi	r3,r2,4096
   2201c:	18ffffcc 	andi	r3,r3,65535
   22020:	18e0001c 	xori	r3,r3,32768
   22024:	18e00004 	addi	r3,r3,-32768
   22028:	18007d26 	beq	r3,zero,22220 <_fseek_r+0x370>
   2202c:	85401417 	ldw	r21,80(r16)
   22030:	10c0010c 	andi	r3,r2,4
   22034:	18ffffcc 	andi	r3,r3,65535
   22038:	18e0001c 	xori	r3,r3,32768
   2203c:	18e00004 	addi	r3,r3,-32768
   22040:	18005f1e 	bne	r3,zero,221c0 <_fseek_r+0x310>
   22044:	1080020c 	andi	r2,r2,8
   22048:	10bfffcc 	andi	r2,r2,65535
   2204c:	10a0001c 	xori	r2,r2,32768
   22050:	10a00004 	addi	r2,r2,-32768
   22054:	10007026 	beq	r2,zero,22218 <_fseek_r+0x368>
   22058:	80c00017 	ldw	r3,0(r16)
   2205c:	80800417 	ldw	r2,16(r16)
   22060:	18000226 	beq	r3,zero,2206c <_fseek_r+0x1bc>
   22064:	1887c83a 	sub	r3,r3,r2
   22068:	a8eb883a 	add	r21,r21,r3
   2206c:	a569883a 	add	r20,r20,r21
   22070:	05800044 	movi	r22,1
   22074:	0025883a 	mov	r18,zero
   22078:	003fac06 	br	21f2c <_fseek_r+0x7c>
   2207c:	00214480 	call	21448 <__sinit>
   22080:	80c0030b 	ldhu	r3,12(r16)
   22084:	00804204 	movi	r2,264
   22088:	18c0420c 	andi	r3,r3,264
   2208c:	18bf9d1e 	bne	r3,r2,21f04 <_fseek_r+0x54>
   22090:	8809883a 	mov	r4,r17
   22094:	800b883a 	mov	r5,r16
   22098:	002118c0 	call	2118c <_fflush_r>
   2209c:	003f9906 	br	21f04 <_fseek_r+0x54>
   220a0:	8140038f 	ldh	r5,14(r16)
   220a4:	283fae16 	blt	r5,zero,21f60 <_fseek_r+0xb0>
   220a8:	8809883a 	mov	r4,r17
   220ac:	d80d883a 	mov	r6,sp
   220b0:	00223480 	call	22348 <_fstat_r>
   220b4:	1000741e 	bne	r2,zero,22288 <_fseek_r+0x3d8>
   220b8:	d8c00117 	ldw	r3,4(sp)
   220bc:	00a00014 	movui	r2,32768
   220c0:	18fc000c 	andi	r3,r3,61440
   220c4:	1880701e 	bne	r3,r2,22288 <_fseek_r+0x3d8>
   220c8:	8100030b 	ldhu	r4,12(r16)
   220cc:	00810004 	movi	r2,1024
   220d0:	80801315 	stw	r2,76(r16)
   220d4:	2084b03a 	or	r2,r4,r2
   220d8:	1009883a 	mov	r4,r2
   220dc:	8080030d 	sth	r2,12(r16)
   220e0:	90003f1e 	bne	r18,zero,221e0 <_fseek_r+0x330>
   220e4:	a02f883a 	mov	r23,r20
   220e8:	b000461e 	bne	r22,zero,22204 <_fseek_r+0x354>
   220ec:	2084000c 	andi	r2,r4,4096
   220f0:	10bfffcc 	andi	r2,r2,65535
   220f4:	10a0001c 	xori	r2,r2,32768
   220f8:	10a00004 	addi	r2,r2,-32768
   220fc:	10007526 	beq	r2,zero,222d4 <_fseek_r+0x424>
   22100:	80801417 	ldw	r2,80(r16)
   22104:	80c00117 	ldw	r3,4(r16)
   22108:	81400c17 	ldw	r5,48(r16)
   2210c:	10ebc83a 	sub	r21,r2,r3
   22110:	28007926 	beq	r5,zero,222f8 <_fseek_r+0x448>
   22114:	81c00f17 	ldw	r7,60(r16)
   22118:	a9ebc83a 	sub	r21,r21,r7
   2211c:	80800e17 	ldw	r2,56(r16)
   22120:	81800417 	ldw	r6,16(r16)
   22124:	a8eb883a 	add	r21,r21,r3
   22128:	1185c83a 	sub	r2,r2,r6
   2212c:	a8abc83a 	sub	r21,r21,r2
   22130:	3885883a 	add	r2,r7,r2
   22134:	2208000c 	andi	r8,r4,8192
   22138:	423fffcc 	andi	r8,r8,65535
   2213c:	4220001c 	xori	r8,r8,32768
   22140:	42200004 	addi	r8,r8,-32768
   22144:	4000031e 	bne	r8,zero,22154 <_fseek_r+0x2a4>
   22148:	bd400216 	blt	r23,r21,22154 <_fseek_r+0x2a4>
   2214c:	a887883a 	add	r3,r21,r2
   22150:	b8c03d36 	bltu	r23,r3,22248 <_fseek_r+0x398>
   22154:	85401317 	ldw	r21,76(r16)
   22158:	81400717 	ldw	r5,28(r16)
   2215c:	8809883a 	mov	r4,r17
   22160:	056bc83a 	sub	r21,zero,r21
   22164:	bd6a703a 	and	r21,r23,r21
   22168:	a80d883a 	mov	r6,r21
   2216c:	000f883a 	mov	r7,zero
   22170:	983ee83a 	callr	r19
   22174:	00ffffc4 	movi	r3,-1
   22178:	10ff7b26 	beq	r2,r3,21f68 <_fseek_r+0xb8>
   2217c:	80800417 	ldw	r2,16(r16)
   22180:	81400c17 	ldw	r5,48(r16)
   22184:	80000115 	stw	zero,4(r16)
   22188:	80800015 	stw	r2,0(r16)
   2218c:	28000526 	beq	r5,zero,221a4 <_fseek_r+0x2f4>
   22190:	80801004 	addi	r2,r16,64
   22194:	28800226 	beq	r5,r2,221a0 <_fseek_r+0x2f0>
   22198:	8809883a 	mov	r4,r17
   2219c:	0021be00 	call	21be0 <_free_r>
   221a0:	80000c15 	stw	zero,48(r16)
   221a4:	8080030b 	ldhu	r2,12(r16)
   221a8:	bd6fc83a 	sub	r23,r23,r21
   221ac:	10bff7cc 	andi	r2,r2,65503
   221b0:	8080030d 	sth	r2,12(r16)
   221b4:	b800361e 	bne	r23,zero,22290 <_fseek_r+0x3e0>
   221b8:	0005883a 	mov	r2,zero
   221bc:	003f8706 	br	21fdc <_fseek_r+0x12c>
   221c0:	80c00117 	ldw	r3,4(r16)
   221c4:	80800c17 	ldw	r2,48(r16)
   221c8:	a8ebc83a 	sub	r21,r21,r3
   221cc:	10001226 	beq	r2,zero,22218 <_fseek_r+0x368>
   221d0:	80c00f17 	ldw	r3,60(r16)
   221d4:	80800417 	ldw	r2,16(r16)
   221d8:	a8ebc83a 	sub	r21,r21,r3
   221dc:	003fa306 	br	2206c <_fseek_r+0x1bc>
   221e0:	8140038f 	ldh	r5,14(r16)
   221e4:	8809883a 	mov	r4,r17
   221e8:	d80d883a 	mov	r6,sp
   221ec:	00223480 	call	22348 <_fstat_r>
   221f0:	103f5d1e 	bne	r2,zero,21f68 <_fseek_r+0xb8>
   221f4:	ddc00417 	ldw	r23,16(sp)
   221f8:	8100030b 	ldhu	r4,12(r16)
   221fc:	a5ef883a 	add	r23,r20,r23
   22200:	b03fba26 	beq	r22,zero,220ec <_fseek_r+0x23c>
   22204:	81400c17 	ldw	r5,48(r16)
   22208:	80c00117 	ldw	r3,4(r16)
   2220c:	28003a26 	beq	r5,zero,222f8 <_fseek_r+0x448>
   22210:	81c00f17 	ldw	r7,60(r16)
   22214:	003fc106 	br	2211c <_fseek_r+0x26c>
   22218:	80800417 	ldw	r2,16(r16)
   2221c:	003f9306 	br	2206c <_fseek_r+0x1bc>
   22220:	81400717 	ldw	r5,28(r16)
   22224:	8809883a 	mov	r4,r17
   22228:	000d883a 	mov	r6,zero
   2222c:	900f883a 	mov	r7,r18
   22230:	983ee83a 	callr	r19
   22234:	102b883a 	mov	r21,r2
   22238:	00bfffc4 	movi	r2,-1
   2223c:	a8bf6626 	beq	r21,r2,21fd8 <_fseek_r+0x128>
   22240:	8080030b 	ldhu	r2,12(r16)
   22244:	003f7a06 	br	22030 <_fseek_r+0x180>
   22248:	bd6bc83a 	sub	r21,r23,r21
   2224c:	354d883a 	add	r6,r6,r21
   22250:	1545c83a 	sub	r2,r2,r21
   22254:	81800015 	stw	r6,0(r16)
   22258:	80800115 	stw	r2,4(r16)
   2225c:	28000626 	beq	r5,zero,22278 <_fseek_r+0x3c8>
   22260:	80801004 	addi	r2,r16,64
   22264:	28800326 	beq	r5,r2,22274 <_fseek_r+0x3c4>
   22268:	8809883a 	mov	r4,r17
   2226c:	0021be00 	call	21be0 <_free_r>
   22270:	8100030b 	ldhu	r4,12(r16)
   22274:	80000c15 	stw	zero,48(r16)
   22278:	213ff7cc 	andi	r4,r4,65503
   2227c:	8100030d 	sth	r4,12(r16)
   22280:	0005883a 	mov	r2,zero
   22284:	003f5506 	br	21fdc <_fseek_r+0x12c>
   22288:	80c0030b 	ldhu	r3,12(r16)
   2228c:	003f3406 	br	21f60 <_fseek_r+0xb0>
   22290:	8809883a 	mov	r4,r17
   22294:	800b883a 	mov	r5,r16
   22298:	00232f80 	call	232f8 <__srefill_r>
   2229c:	103f321e 	bne	r2,zero,21f68 <_fseek_r+0xb8>
   222a0:	80800117 	ldw	r2,4(r16)
   222a4:	15ff3036 	bltu	r2,r23,21f68 <_fseek_r+0xb8>
   222a8:	80c00017 	ldw	r3,0(r16)
   222ac:	15c5c83a 	sub	r2,r2,r23
   222b0:	80800115 	stw	r2,4(r16)
   222b4:	1def883a 	add	r23,r3,r23
   222b8:	85c00015 	stw	r23,0(r16)
   222bc:	0005883a 	mov	r2,zero
   222c0:	003f4606 	br	21fdc <_fseek_r+0x12c>
   222c4:	8809883a 	mov	r4,r17
   222c8:	800b883a 	mov	r5,r16
   222cc:	00226000 	call	22600 <__smakebuf_r>
   222d0:	003f1706 	br	21f30 <_fseek_r+0x80>
   222d4:	81400717 	ldw	r5,28(r16)
   222d8:	8809883a 	mov	r4,r17
   222dc:	000d883a 	mov	r6,zero
   222e0:	01c00044 	movi	r7,1
   222e4:	983ee83a 	callr	r19
   222e8:	00ffffc4 	movi	r3,-1
   222ec:	10ff1e26 	beq	r2,r3,21f68 <_fseek_r+0xb8>
   222f0:	8100030b 	ldhu	r4,12(r16)
   222f4:	003f8306 	br	22104 <_fseek_r+0x254>
   222f8:	80800017 	ldw	r2,0(r16)
   222fc:	81800417 	ldw	r6,16(r16)
   22300:	000b883a 	mov	r5,zero
   22304:	1185c83a 	sub	r2,r2,r6
   22308:	a8abc83a 	sub	r21,r21,r2
   2230c:	1885883a 	add	r2,r3,r2
   22310:	003f8806 	br	22134 <_fseek_r+0x284>
   22314:	00800744 	movi	r2,29
   22318:	88800015 	stw	r2,0(r17)
   2231c:	00bfffc4 	movi	r2,-1
   22320:	003f2e06 	br	21fdc <_fseek_r+0x12c>

00022324 <fseek>:
   22324:	008000f4 	movhi	r2,3
   22328:	10815204 	addi	r2,r2,1352
   2232c:	2007883a 	mov	r3,r4
   22330:	11000017 	ldw	r4,0(r2)
   22334:	2805883a 	mov	r2,r5
   22338:	300f883a 	mov	r7,r6
   2233c:	180b883a 	mov	r5,r3
   22340:	100d883a 	mov	r6,r2
   22344:	0021eb01 	jmpi	21eb0 <_fseek_r>

00022348 <_fstat_r>:
   22348:	defffd04 	addi	sp,sp,-12
   2234c:	dc400115 	stw	r17,4(sp)
   22350:	dc000015 	stw	r16,0(sp)
   22354:	2023883a 	mov	r17,r4
   22358:	040000f4 	movhi	r16,3
   2235c:	84082404 	addi	r16,r16,8336
   22360:	2809883a 	mov	r4,r5
   22364:	300b883a 	mov	r5,r6
   22368:	dfc00215 	stw	ra,8(sp)
   2236c:	80000015 	stw	zero,0(r16)
   22370:	002b5780 	call	2b578 <fstat>
   22374:	00ffffc4 	movi	r3,-1
   22378:	10c00526 	beq	r2,r3,22390 <_fstat_r+0x48>
   2237c:	dfc00217 	ldw	ra,8(sp)
   22380:	dc400117 	ldw	r17,4(sp)
   22384:	dc000017 	ldw	r16,0(sp)
   22388:	dec00304 	addi	sp,sp,12
   2238c:	f800283a 	ret
   22390:	80c00017 	ldw	r3,0(r16)
   22394:	183ff926 	beq	r3,zero,2237c <_fstat_r+0x34>
   22398:	88c00015 	stw	r3,0(r17)
   2239c:	dfc00217 	ldw	ra,8(sp)
   223a0:	dc400117 	ldw	r17,4(sp)
   223a4:	dc000017 	ldw	r16,0(sp)
   223a8:	dec00304 	addi	sp,sp,12
   223ac:	f800283a 	ret

000223b0 <_fwalk>:
   223b0:	defff904 	addi	sp,sp,-28
   223b4:	dcc00315 	stw	r19,12(sp)
   223b8:	24c0b804 	addi	r19,r4,736
   223bc:	dd400515 	stw	r21,20(sp)
   223c0:	dd000415 	stw	r20,16(sp)
   223c4:	dfc00615 	stw	ra,24(sp)
   223c8:	dc800215 	stw	r18,8(sp)
   223cc:	dc400115 	stw	r17,4(sp)
   223d0:	dc000015 	stw	r16,0(sp)
   223d4:	282b883a 	mov	r21,r5
   223d8:	0029883a 	mov	r20,zero
   223dc:	00216500 	call	21650 <__sfp_lock_acquire>
   223e0:	98001226 	beq	r19,zero,2242c <_fwalk+0x7c>
   223e4:	04bfffc4 	movi	r18,-1
   223e8:	9c400117 	ldw	r17,4(r19)
   223ec:	9c000217 	ldw	r16,8(r19)
   223f0:	8c7fffc4 	addi	r17,r17,-1
   223f4:	88000b16 	blt	r17,zero,22424 <_fwalk+0x74>
   223f8:	84000304 	addi	r16,r16,12
   223fc:	80c0000f 	ldh	r3,0(r16)
   22400:	8c7fffc4 	addi	r17,r17,-1
   22404:	813ffd04 	addi	r4,r16,-12
   22408:	18000426 	beq	r3,zero,2241c <_fwalk+0x6c>
   2240c:	80c0008f 	ldh	r3,2(r16)
   22410:	1c800226 	beq	r3,r18,2241c <_fwalk+0x6c>
   22414:	a83ee83a 	callr	r21
   22418:	a0a8b03a 	or	r20,r20,r2
   2241c:	84001704 	addi	r16,r16,92
   22420:	8cbff61e 	bne	r17,r18,223fc <_fwalk+0x4c>
   22424:	9cc00017 	ldw	r19,0(r19)
   22428:	983fef1e 	bne	r19,zero,223e8 <_fwalk+0x38>
   2242c:	00216540 	call	21654 <__sfp_lock_release>
   22430:	a005883a 	mov	r2,r20
   22434:	dfc00617 	ldw	ra,24(sp)
   22438:	dd400517 	ldw	r21,20(sp)
   2243c:	dd000417 	ldw	r20,16(sp)
   22440:	dcc00317 	ldw	r19,12(sp)
   22444:	dc800217 	ldw	r18,8(sp)
   22448:	dc400117 	ldw	r17,4(sp)
   2244c:	dc000017 	ldw	r16,0(sp)
   22450:	dec00704 	addi	sp,sp,28
   22454:	f800283a 	ret

00022458 <_fwalk_reent>:
   22458:	defff804 	addi	sp,sp,-32
   2245c:	dcc00315 	stw	r19,12(sp)
   22460:	24c0b804 	addi	r19,r4,736
   22464:	dd800615 	stw	r22,24(sp)
   22468:	dd400515 	stw	r21,20(sp)
   2246c:	dd000415 	stw	r20,16(sp)
   22470:	dfc00715 	stw	ra,28(sp)
   22474:	dc800215 	stw	r18,8(sp)
   22478:	dc400115 	stw	r17,4(sp)
   2247c:	dc000015 	stw	r16,0(sp)
   22480:	2029883a 	mov	r20,r4
   22484:	282b883a 	mov	r21,r5
   22488:	002d883a 	mov	r22,zero
   2248c:	00216500 	call	21650 <__sfp_lock_acquire>
   22490:	98001326 	beq	r19,zero,224e0 <_fwalk_reent+0x88>
   22494:	04bfffc4 	movi	r18,-1
   22498:	9c400117 	ldw	r17,4(r19)
   2249c:	9c000217 	ldw	r16,8(r19)
   224a0:	8c7fffc4 	addi	r17,r17,-1
   224a4:	88000c16 	blt	r17,zero,224d8 <_fwalk_reent+0x80>
   224a8:	84000304 	addi	r16,r16,12
   224ac:	80c0000f 	ldh	r3,0(r16)
   224b0:	8c7fffc4 	addi	r17,r17,-1
   224b4:	817ffd04 	addi	r5,r16,-12
   224b8:	18000526 	beq	r3,zero,224d0 <_fwalk_reent+0x78>
   224bc:	80c0008f 	ldh	r3,2(r16)
   224c0:	a009883a 	mov	r4,r20
   224c4:	1c800226 	beq	r3,r18,224d0 <_fwalk_reent+0x78>
   224c8:	a83ee83a 	callr	r21
   224cc:	b0acb03a 	or	r22,r22,r2
   224d0:	84001704 	addi	r16,r16,92
   224d4:	8cbff51e 	bne	r17,r18,224ac <_fwalk_reent+0x54>
   224d8:	9cc00017 	ldw	r19,0(r19)
   224dc:	983fee1e 	bne	r19,zero,22498 <_fwalk_reent+0x40>
   224e0:	00216540 	call	21654 <__sfp_lock_release>
   224e4:	b005883a 	mov	r2,r22
   224e8:	dfc00717 	ldw	ra,28(sp)
   224ec:	dd800617 	ldw	r22,24(sp)
   224f0:	dd400517 	ldw	r21,20(sp)
   224f4:	dd000417 	ldw	r20,16(sp)
   224f8:	dcc00317 	ldw	r19,12(sp)
   224fc:	dc800217 	ldw	r18,8(sp)
   22500:	dc400117 	ldw	r17,4(sp)
   22504:	dc000017 	ldw	r16,0(sp)
   22508:	dec00804 	addi	sp,sp,32
   2250c:	f800283a 	ret

00022510 <_fwrite_r>:
   22510:	defff604 	addi	sp,sp,-40
   22514:	dc000515 	stw	r16,20(sp)
   22518:	d9400315 	stw	r5,12(sp)
   2251c:	2021883a 	mov	r16,r4
   22520:	300b883a 	mov	r5,r6
   22524:	3809883a 	mov	r4,r7
   22528:	dcc00815 	stw	r19,32(sp)
   2252c:	dc800715 	stw	r18,28(sp)
   22530:	dc400615 	stw	r17,24(sp)
   22534:	dfc00915 	stw	ra,36(sp)
   22538:	3027883a 	mov	r19,r6
   2253c:	3823883a 	mov	r17,r7
   22540:	00210140 	call	21014 <__mulsi3>
   22544:	1025883a 	mov	r18,r2
   22548:	d8800415 	stw	r2,16(sp)
   2254c:	d8800215 	stw	r2,8(sp)
   22550:	d8800304 	addi	r2,sp,12
   22554:	d8800015 	stw	r2,0(sp)
   22558:	00800044 	movi	r2,1
   2255c:	d8800115 	stw	r2,4(sp)
   22560:	80000226 	beq	r16,zero,2256c <_fwrite_r+0x5c>
   22564:	80800e17 	ldw	r2,56(r16)
   22568:	10001226 	beq	r2,zero,225b4 <_fwrite_r+0xa4>
   2256c:	d9400a17 	ldw	r5,40(sp)
   22570:	8009883a 	mov	r4,r16
   22574:	d80d883a 	mov	r6,sp
   22578:	002711c0 	call	2711c <__sfvwrite_r>
   2257c:	10000526 	beq	r2,zero,22594 <_fwrite_r+0x84>
   22580:	d9000217 	ldw	r4,8(sp)
   22584:	980b883a 	mov	r5,r19
   22588:	9109c83a 	sub	r4,r18,r4
   2258c:	002ad940 	call	2ad94 <__udivsi3>
   22590:	1023883a 	mov	r17,r2
   22594:	8805883a 	mov	r2,r17
   22598:	dfc00917 	ldw	ra,36(sp)
   2259c:	dcc00817 	ldw	r19,32(sp)
   225a0:	dc800717 	ldw	r18,28(sp)
   225a4:	dc400617 	ldw	r17,24(sp)
   225a8:	dc000517 	ldw	r16,20(sp)
   225ac:	dec00a04 	addi	sp,sp,40
   225b0:	f800283a 	ret
   225b4:	8009883a 	mov	r4,r16
   225b8:	00214480 	call	21448 <__sinit>
   225bc:	003feb06 	br	2256c <_fwrite_r+0x5c>

000225c0 <fwrite>:
   225c0:	008000f4 	movhi	r2,3
   225c4:	10815204 	addi	r2,r2,1352
   225c8:	2011883a 	mov	r8,r4
   225cc:	11000017 	ldw	r4,0(r2)
   225d0:	defffe04 	addi	sp,sp,-8
   225d4:	2807883a 	mov	r3,r5
   225d8:	3005883a 	mov	r2,r6
   225dc:	d9c00015 	stw	r7,0(sp)
   225e0:	400b883a 	mov	r5,r8
   225e4:	180d883a 	mov	r6,r3
   225e8:	100f883a 	mov	r7,r2
   225ec:	dfc00115 	stw	ra,4(sp)
   225f0:	00225100 	call	22510 <_fwrite_r>
   225f4:	dfc00117 	ldw	ra,4(sp)
   225f8:	dec00204 	addi	sp,sp,8
   225fc:	f800283a 	ret

00022600 <__smakebuf_r>:
   22600:	2880030b 	ldhu	r2,12(r5)
   22604:	deffed04 	addi	sp,sp,-76
   22608:	dc401015 	stw	r17,64(sp)
   2260c:	10c0008c 	andi	r3,r2,2
   22610:	18ffffcc 	andi	r3,r3,65535
   22614:	18e0001c 	xori	r3,r3,32768
   22618:	dc000f15 	stw	r16,60(sp)
   2261c:	dfc01215 	stw	ra,72(sp)
   22620:	dc801115 	stw	r18,68(sp)
   22624:	18e00004 	addi	r3,r3,-32768
   22628:	2821883a 	mov	r16,r5
   2262c:	2023883a 	mov	r17,r4
   22630:	1800381e 	bne	r3,zero,22714 <__smakebuf_r+0x114>
   22634:	2940038f 	ldh	r5,14(r5)
   22638:	28002d16 	blt	r5,zero,226f0 <__smakebuf_r+0xf0>
   2263c:	d80d883a 	mov	r6,sp
   22640:	00223480 	call	22348 <_fstat_r>
   22644:	10002916 	blt	r2,zero,226ec <__smakebuf_r+0xec>
   22648:	d8800117 	ldw	r2,4(sp)
   2264c:	00e00014 	movui	r3,32768
   22650:	10bc000c 	andi	r2,r2,61440
   22654:	10c03c26 	beq	r2,r3,22748 <__smakebuf_r+0x148>
   22658:	80c0030b 	ldhu	r3,12(r16)
   2265c:	18c20014 	ori	r3,r3,2048
   22660:	80c0030d 	sth	r3,12(r16)
   22664:	00c80004 	movi	r3,8192
   22668:	10c00c1e 	bne	r2,r3,2269c <__smakebuf_r+0x9c>
   2266c:	8140038f 	ldh	r5,14(r16)
   22670:	8809883a 	mov	r4,r17
   22674:	00276000 	call	27600 <_isatty_r>
   22678:	10000826 	beq	r2,zero,2269c <__smakebuf_r+0x9c>
   2267c:	80c0030b 	ldhu	r3,12(r16)
   22680:	808010c4 	addi	r2,r16,67
   22684:	80800015 	stw	r2,0(r16)
   22688:	18c00054 	ori	r3,r3,1
   2268c:	80800415 	stw	r2,16(r16)
   22690:	00800044 	movi	r2,1
   22694:	80c0030d 	sth	r3,12(r16)
   22698:	80800515 	stw	r2,20(r16)
   2269c:	04810004 	movi	r18,1024
   226a0:	8809883a 	mov	r4,r17
   226a4:	900b883a 	mov	r5,r18
   226a8:	00227d00 	call	227d0 <_malloc_r>
   226ac:	10003026 	beq	r2,zero,22770 <__smakebuf_r+0x170>
   226b0:	80c0030b 	ldhu	r3,12(r16)
   226b4:	010000b4 	movhi	r4,2
   226b8:	2104ed04 	addi	r4,r4,5044
   226bc:	89000f15 	stw	r4,60(r17)
   226c0:	18c02014 	ori	r3,r3,128
   226c4:	80c0030d 	sth	r3,12(r16)
   226c8:	80800015 	stw	r2,0(r16)
   226cc:	80800415 	stw	r2,16(r16)
   226d0:	84800515 	stw	r18,20(r16)
   226d4:	dfc01217 	ldw	ra,72(sp)
   226d8:	dc801117 	ldw	r18,68(sp)
   226dc:	dc401017 	ldw	r17,64(sp)
   226e0:	dc000f17 	ldw	r16,60(sp)
   226e4:	dec01304 	addi	sp,sp,76
   226e8:	f800283a 	ret
   226ec:	8080030b 	ldhu	r2,12(r16)
   226f0:	10c0200c 	andi	r3,r2,128
   226f4:	18ffffcc 	andi	r3,r3,65535
   226f8:	18e0001c 	xori	r3,r3,32768
   226fc:	18e00004 	addi	r3,r3,-32768
   22700:	18000f1e 	bne	r3,zero,22740 <__smakebuf_r+0x140>
   22704:	04810004 	movi	r18,1024
   22708:	10820014 	ori	r2,r2,2048
   2270c:	8080030d 	sth	r2,12(r16)
   22710:	003fe306 	br	226a0 <__smakebuf_r+0xa0>
   22714:	288010c4 	addi	r2,r5,67
   22718:	28800015 	stw	r2,0(r5)
   2271c:	28800415 	stw	r2,16(r5)
   22720:	00800044 	movi	r2,1
   22724:	28800515 	stw	r2,20(r5)
   22728:	dfc01217 	ldw	ra,72(sp)
   2272c:	dc801117 	ldw	r18,68(sp)
   22730:	dc401017 	ldw	r17,64(sp)
   22734:	dc000f17 	ldw	r16,60(sp)
   22738:	dec01304 	addi	sp,sp,76
   2273c:	f800283a 	ret
   22740:	04801004 	movi	r18,64
   22744:	003ff006 	br	22708 <__smakebuf_r+0x108>
   22748:	81000a17 	ldw	r4,40(r16)
   2274c:	00c000b4 	movhi	r3,2
   22750:	18cd8904 	addi	r3,r3,13860
   22754:	20ffc01e 	bne	r4,r3,22658 <__smakebuf_r+0x58>
   22758:	8080030b 	ldhu	r2,12(r16)
   2275c:	00c10004 	movi	r3,1024
   22760:	80c01315 	stw	r3,76(r16)
   22764:	10c4b03a 	or	r2,r2,r3
   22768:	8080030d 	sth	r2,12(r16)
   2276c:	003fcb06 	br	2269c <__smakebuf_r+0x9c>
   22770:	8080030b 	ldhu	r2,12(r16)
   22774:	10c0800c 	andi	r3,r2,512
   22778:	18ffffcc 	andi	r3,r3,65535
   2277c:	18e0001c 	xori	r3,r3,32768
   22780:	18e00004 	addi	r3,r3,-32768
   22784:	183fd31e 	bne	r3,zero,226d4 <__smakebuf_r+0xd4>
   22788:	10800094 	ori	r2,r2,2
   2278c:	80c010c4 	addi	r3,r16,67
   22790:	8080030d 	sth	r2,12(r16)
   22794:	00800044 	movi	r2,1
   22798:	80c00015 	stw	r3,0(r16)
   2279c:	80c00415 	stw	r3,16(r16)
   227a0:	80800515 	stw	r2,20(r16)
   227a4:	003fcb06 	br	226d4 <__smakebuf_r+0xd4>

000227a8 <malloc>:
   227a8:	008000f4 	movhi	r2,3
   227ac:	10815204 	addi	r2,r2,1352
   227b0:	200b883a 	mov	r5,r4
   227b4:	11000017 	ldw	r4,0(r2)
   227b8:	00227d01 	jmpi	227d0 <_malloc_r>

000227bc <free>:
   227bc:	008000f4 	movhi	r2,3
   227c0:	10815204 	addi	r2,r2,1352
   227c4:	200b883a 	mov	r5,r4
   227c8:	11000017 	ldw	r4,0(r2)
   227cc:	0021be01 	jmpi	21be0 <_free_r>

000227d0 <_malloc_r>:
   227d0:	defff604 	addi	sp,sp,-40
   227d4:	dc800215 	stw	r18,8(sp)
   227d8:	dfc00915 	stw	ra,36(sp)
   227dc:	df000815 	stw	fp,32(sp)
   227e0:	ddc00715 	stw	r23,28(sp)
   227e4:	dd800615 	stw	r22,24(sp)
   227e8:	dd400515 	stw	r21,20(sp)
   227ec:	dd000415 	stw	r20,16(sp)
   227f0:	dcc00315 	stw	r19,12(sp)
   227f4:	dc400115 	stw	r17,4(sp)
   227f8:	dc000015 	stw	r16,0(sp)
   227fc:	288002c4 	addi	r2,r5,11
   22800:	00c00584 	movi	r3,22
   22804:	2025883a 	mov	r18,r4
   22808:	18802b2e 	bgeu	r3,r2,228b8 <_malloc_r+0xe8>
   2280c:	047ffe04 	movi	r17,-8
   22810:	1462703a 	and	r17,r2,r17
   22814:	88002a16 	blt	r17,zero,228c0 <_malloc_r+0xf0>
   22818:	89402936 	bltu	r17,r5,228c0 <_malloc_r+0xf0>
   2281c:	9009883a 	mov	r4,r18
   22820:	002b9a40 	call	2b9a4 <__malloc_lock>
   22824:	00807dc4 	movi	r2,503
   22828:	14402936 	bltu	r2,r17,228d0 <_malloc_r+0x100>
   2282c:	8808d0fa 	srli	r4,r17,3
   22830:	04c000f4 	movhi	r19,3
   22834:	9cfbc004 	addi	r19,r19,-4352
   22838:	2105883a 	add	r2,r4,r4
   2283c:	1085883a 	add	r2,r2,r2
   22840:	1085883a 	add	r2,r2,r2
   22844:	9885883a 	add	r2,r19,r2
   22848:	14000317 	ldw	r16,12(r2)
   2284c:	80815526 	beq	r16,r2,22da4 <_malloc_r+0x5d4>
   22850:	81000117 	ldw	r4,4(r16)
   22854:	00bfff04 	movi	r2,-4
   22858:	80c00317 	ldw	r3,12(r16)
   2285c:	2084703a 	and	r2,r4,r2
   22860:	8085883a 	add	r2,r16,r2
   22864:	11800117 	ldw	r6,4(r2)
   22868:	81400217 	ldw	r5,8(r16)
   2286c:	9009883a 	mov	r4,r18
   22870:	31800054 	ori	r6,r6,1
   22874:	11800115 	stw	r6,4(r2)
   22878:	28c00315 	stw	r3,12(r5)
   2287c:	19400215 	stw	r5,8(r3)
   22880:	002b9c40 	call	2b9c4 <__malloc_unlock>
   22884:	80800204 	addi	r2,r16,8
   22888:	dfc00917 	ldw	ra,36(sp)
   2288c:	df000817 	ldw	fp,32(sp)
   22890:	ddc00717 	ldw	r23,28(sp)
   22894:	dd800617 	ldw	r22,24(sp)
   22898:	dd400517 	ldw	r21,20(sp)
   2289c:	dd000417 	ldw	r20,16(sp)
   228a0:	dcc00317 	ldw	r19,12(sp)
   228a4:	dc800217 	ldw	r18,8(sp)
   228a8:	dc400117 	ldw	r17,4(sp)
   228ac:	dc000017 	ldw	r16,0(sp)
   228b0:	dec00a04 	addi	sp,sp,40
   228b4:	f800283a 	ret
   228b8:	04400404 	movi	r17,16
   228bc:	897fd72e 	bgeu	r17,r5,2281c <_malloc_r+0x4c>
   228c0:	00800304 	movi	r2,12
   228c4:	90800015 	stw	r2,0(r18)
   228c8:	0005883a 	mov	r2,zero
   228cc:	003fee06 	br	22888 <_malloc_r+0xb8>
   228d0:	8808d27a 	srli	r4,r17,9
   228d4:	20007126 	beq	r4,zero,22a9c <_malloc_r+0x2cc>
   228d8:	00800104 	movi	r2,4
   228dc:	1100eb36 	bltu	r2,r4,22c8c <_malloc_r+0x4bc>
   228e0:	8808d1ba 	srli	r4,r17,6
   228e4:	21000e04 	addi	r4,r4,56
   228e8:	210b883a 	add	r5,r4,r4
   228ec:	294b883a 	add	r5,r5,r5
   228f0:	294b883a 	add	r5,r5,r5
   228f4:	04c000f4 	movhi	r19,3
   228f8:	9cfbc004 	addi	r19,r19,-4352
   228fc:	994b883a 	add	r5,r19,r5
   22900:	2c000317 	ldw	r16,12(r5)
   22904:	2c000e26 	beq	r5,r16,22940 <_malloc_r+0x170>
   22908:	80c00117 	ldw	r3,4(r16)
   2290c:	01ffff04 	movi	r7,-4
   22910:	018003c4 	movi	r6,15
   22914:	19c6703a 	and	r3,r3,r7
   22918:	1c45c83a 	sub	r2,r3,r17
   2291c:	30800716 	blt	r6,r2,2293c <_malloc_r+0x16c>
   22920:	1000610e 	bge	r2,zero,22aa8 <_malloc_r+0x2d8>
   22924:	84000317 	ldw	r16,12(r16)
   22928:	2c000526 	beq	r5,r16,22940 <_malloc_r+0x170>
   2292c:	80c00117 	ldw	r3,4(r16)
   22930:	19c6703a 	and	r3,r3,r7
   22934:	1c45c83a 	sub	r2,r3,r17
   22938:	30bff90e 	bge	r6,r2,22920 <_malloc_r+0x150>
   2293c:	213fffc4 	addi	r4,r4,-1
   22940:	21000044 	addi	r4,r4,1
   22944:	9c000417 	ldw	r16,16(r19)
   22948:	00c000f4 	movhi	r3,3
   2294c:	18fbc004 	addi	r3,r3,-4352
   22950:	1a400204 	addi	r9,r3,8
   22954:	8240ff26 	beq	r16,r9,22d54 <_malloc_r+0x584>
   22958:	81400117 	ldw	r5,4(r16)
   2295c:	00bfff04 	movi	r2,-4
   22960:	018003c4 	movi	r6,15
   22964:	2884703a 	and	r2,r5,r2
   22968:	144bc83a 	sub	r5,r2,r17
   2296c:	3140ea16 	blt	r6,r5,22d18 <_malloc_r+0x548>
   22970:	1a400515 	stw	r9,20(r3)
   22974:	1a400415 	stw	r9,16(r3)
   22978:	2800570e 	bge	r5,zero,22ad8 <_malloc_r+0x308>
   2297c:	01407fc4 	movi	r5,511
   22980:	2880ca36 	bltu	r5,r2,22cac <_malloc_r+0x4dc>
   22984:	1004d0fa 	srli	r2,r2,3
   22988:	02000044 	movi	r8,1
   2298c:	19c00117 	ldw	r7,4(r3)
   22990:	108b883a 	add	r5,r2,r2
   22994:	294b883a 	add	r5,r5,r5
   22998:	1005d0ba 	srai	r2,r2,2
   2299c:	294b883a 	add	r5,r5,r5
   229a0:	28cb883a 	add	r5,r5,r3
   229a4:	29800217 	ldw	r6,8(r5)
   229a8:	4084983a 	sll	r2,r8,r2
   229ac:	81400315 	stw	r5,12(r16)
   229b0:	81800215 	stw	r6,8(r16)
   229b4:	11c4b03a 	or	r2,r2,r7
   229b8:	18800115 	stw	r2,4(r3)
   229bc:	2c000215 	stw	r16,8(r5)
   229c0:	34000315 	stw	r16,12(r6)
   229c4:	200bd0ba 	srai	r5,r4,2
   229c8:	00c00044 	movi	r3,1
   229cc:	194a983a 	sll	r5,r3,r5
   229d0:	11404936 	bltu	r2,r5,22af8 <_malloc_r+0x328>
   229d4:	1146703a 	and	r3,r2,r5
   229d8:	18000a1e 	bne	r3,zero,22a04 <_malloc_r+0x234>
   229dc:	00ffff04 	movi	r3,-4
   229e0:	294b883a 	add	r5,r5,r5
   229e4:	20c8703a 	and	r4,r4,r3
   229e8:	1146703a 	and	r3,r2,r5
   229ec:	21000104 	addi	r4,r4,4
   229f0:	1800041e 	bne	r3,zero,22a04 <_malloc_r+0x234>
   229f4:	294b883a 	add	r5,r5,r5
   229f8:	1146703a 	and	r3,r2,r5
   229fc:	21000104 	addi	r4,r4,4
   22a00:	183ffc26 	beq	r3,zero,229f4 <_malloc_r+0x224>
   22a04:	023fff04 	movi	r8,-4
   22a08:	01c003c4 	movi	r7,15
   22a0c:	2105883a 	add	r2,r4,r4
   22a10:	1085883a 	add	r2,r2,r2
   22a14:	1085883a 	add	r2,r2,r2
   22a18:	9899883a 	add	r12,r19,r2
   22a1c:	62800304 	addi	r10,r12,12
   22a20:	2017883a 	mov	r11,r4
   22a24:	54000017 	ldw	r16,0(r10)
   22a28:	51bffd04 	addi	r6,r10,-12
   22a2c:	8180041e 	bne	r16,r6,22a40 <_malloc_r+0x270>
   22a30:	0000ca06 	br	22d5c <_malloc_r+0x58c>
   22a34:	10001c0e 	bge	r2,zero,22aa8 <_malloc_r+0x2d8>
   22a38:	84000317 	ldw	r16,12(r16)
   22a3c:	8180c726 	beq	r16,r6,22d5c <_malloc_r+0x58c>
   22a40:	80c00117 	ldw	r3,4(r16)
   22a44:	1a06703a 	and	r3,r3,r8
   22a48:	1c45c83a 	sub	r2,r3,r17
   22a4c:	38bff90e 	bge	r7,r2,22a34 <_malloc_r+0x264>
   22a50:	81000317 	ldw	r4,12(r16)
   22a54:	81400217 	ldw	r5,8(r16)
   22a58:	8447883a 	add	r3,r16,r17
   22a5c:	8c400054 	ori	r17,r17,1
   22a60:	29000315 	stw	r4,12(r5)
   22a64:	21400215 	stw	r5,8(r4)
   22a68:	84400115 	stw	r17,4(r16)
   22a6c:	1889883a 	add	r4,r3,r2
   22a70:	11400054 	ori	r5,r2,1
   22a74:	98c00515 	stw	r3,20(r19)
   22a78:	98c00415 	stw	r3,16(r19)
   22a7c:	20800015 	stw	r2,0(r4)
   22a80:	1a400315 	stw	r9,12(r3)
   22a84:	1a400215 	stw	r9,8(r3)
   22a88:	19400115 	stw	r5,4(r3)
   22a8c:	9009883a 	mov	r4,r18
   22a90:	002b9c40 	call	2b9c4 <__malloc_unlock>
   22a94:	80800204 	addi	r2,r16,8
   22a98:	003f7b06 	br	22888 <_malloc_r+0xb8>
   22a9c:	8808d0fa 	srli	r4,r17,3
   22aa0:	210b883a 	add	r5,r4,r4
   22aa4:	003f9106 	br	228ec <_malloc_r+0x11c>
   22aa8:	80c7883a 	add	r3,r16,r3
   22aac:	19400117 	ldw	r5,4(r3)
   22ab0:	80800317 	ldw	r2,12(r16)
   22ab4:	81000217 	ldw	r4,8(r16)
   22ab8:	29400054 	ori	r5,r5,1
   22abc:	19400115 	stw	r5,4(r3)
   22ac0:	20800315 	stw	r2,12(r4)
   22ac4:	11000215 	stw	r4,8(r2)
   22ac8:	9009883a 	mov	r4,r18
   22acc:	002b9c40 	call	2b9c4 <__malloc_unlock>
   22ad0:	80800204 	addi	r2,r16,8
   22ad4:	003f6c06 	br	22888 <_malloc_r+0xb8>
   22ad8:	8085883a 	add	r2,r16,r2
   22adc:	10c00117 	ldw	r3,4(r2)
   22ae0:	9009883a 	mov	r4,r18
   22ae4:	18c00054 	ori	r3,r3,1
   22ae8:	10c00115 	stw	r3,4(r2)
   22aec:	002b9c40 	call	2b9c4 <__malloc_unlock>
   22af0:	80800204 	addi	r2,r16,8
   22af4:	003f6406 	br	22888 <_malloc_r+0xb8>
   22af8:	9c000217 	ldw	r16,8(r19)
   22afc:	00bfff04 	movi	r2,-4
   22b00:	85400117 	ldw	r21,4(r16)
   22b04:	a8aa703a 	and	r21,r21,r2
   22b08:	ac400336 	bltu	r21,r17,22b18 <_malloc_r+0x348>
   22b0c:	ac45c83a 	sub	r2,r21,r17
   22b10:	00c003c4 	movi	r3,15
   22b14:	18805316 	blt	r3,r2,22c64 <_malloc_r+0x494>
   22b18:	d5e6d617 	ldw	r23,-25768(gp)
   22b1c:	d0e00217 	ldw	r3,-32760(gp)
   22b20:	00bfffc4 	movi	r2,-1
   22b24:	8579883a 	add	fp,r16,r21
   22b28:	8def883a 	add	r23,r17,r23
   22b2c:	1880d226 	beq	r3,r2,22e78 <_malloc_r+0x6a8>
   22b30:	bdc403c4 	addi	r23,r23,4111
   22b34:	00bc0004 	movi	r2,-4096
   22b38:	b8ae703a 	and	r23,r23,r2
   22b3c:	9009883a 	mov	r4,r18
   22b40:	b80b883a 	mov	r5,r23
   22b44:	00234e40 	call	234e4 <_sbrk_r>
   22b48:	1029883a 	mov	r20,r2
   22b4c:	00bfffc4 	movi	r2,-1
   22b50:	a080d126 	beq	r20,r2,22e98 <_malloc_r+0x6c8>
   22b54:	a7009f36 	bltu	r20,fp,22dd4 <_malloc_r+0x604>
   22b58:	058000f4 	movhi	r22,3
   22b5c:	b5883104 	addi	r22,r22,8388
   22b60:	b0800017 	ldw	r2,0(r22)
   22b64:	b885883a 	add	r2,r23,r2
   22b68:	b0800015 	stw	r2,0(r22)
   22b6c:	e500cf26 	beq	fp,r20,22eac <_malloc_r+0x6dc>
   22b70:	d1200217 	ldw	r4,-32760(gp)
   22b74:	00ffffc4 	movi	r3,-1
   22b78:	20c0e026 	beq	r4,r3,22efc <_malloc_r+0x72c>
   22b7c:	a739c83a 	sub	fp,r20,fp
   22b80:	1705883a 	add	r2,r2,fp
   22b84:	b0800015 	stw	r2,0(r22)
   22b88:	a08001cc 	andi	r2,r20,7
   22b8c:	1000a526 	beq	r2,zero,22e24 <_malloc_r+0x654>
   22b90:	a0a9c83a 	sub	r20,r20,r2
   22b94:	00c40204 	movi	r3,4104
   22b98:	a5000204 	addi	r20,r20,8
   22b9c:	1885c83a 	sub	r2,r3,r2
   22ba0:	a5c7883a 	add	r3,r20,r23
   22ba4:	18c3ffcc 	andi	r3,r3,4095
   22ba8:	10efc83a 	sub	r23,r2,r3
   22bac:	9009883a 	mov	r4,r18
   22bb0:	b80b883a 	mov	r5,r23
   22bb4:	00234e40 	call	234e4 <_sbrk_r>
   22bb8:	00ffffc4 	movi	r3,-1
   22bbc:	10c0cc26 	beq	r2,r3,22ef0 <_malloc_r+0x720>
   22bc0:	1505c83a 	sub	r2,r2,r20
   22bc4:	b887883a 	add	r3,r23,r2
   22bc8:	18c00054 	ori	r3,r3,1
   22bcc:	b0800017 	ldw	r2,0(r22)
   22bd0:	9d000215 	stw	r20,8(r19)
   22bd4:	a0c00115 	stw	r3,4(r20)
   22bd8:	b885883a 	add	r2,r23,r2
   22bdc:	b0800015 	stw	r2,0(r22)
   22be0:	84c00e26 	beq	r16,r19,22c1c <_malloc_r+0x44c>
   22be4:	00c003c4 	movi	r3,15
   22be8:	1d40902e 	bgeu	r3,r21,22e2c <_malloc_r+0x65c>
   22bec:	ad7ffd04 	addi	r21,r21,-12
   22bf0:	013ffe04 	movi	r4,-8
   22bf4:	a908703a 	and	r4,r21,r4
   22bf8:	810b883a 	add	r5,r16,r4
   22bfc:	01800144 	movi	r6,5
   22c00:	29800115 	stw	r6,4(r5)
   22c04:	29800215 	stw	r6,8(r5)
   22c08:	81400117 	ldw	r5,4(r16)
   22c0c:	2940004c 	andi	r5,r5,1
   22c10:	214ab03a 	or	r5,r4,r5
   22c14:	81400115 	stw	r5,4(r16)
   22c18:	1900ae36 	bltu	r3,r4,22ed4 <_malloc_r+0x704>
   22c1c:	d0e6d517 	ldw	r3,-25772(gp)
   22c20:	1880012e 	bgeu	r3,r2,22c28 <_malloc_r+0x458>
   22c24:	d0a6d515 	stw	r2,-25772(gp)
   22c28:	d0e6d417 	ldw	r3,-25776(gp)
   22c2c:	9c000217 	ldw	r16,8(r19)
   22c30:	1880012e 	bgeu	r3,r2,22c38 <_malloc_r+0x468>
   22c34:	d0a6d415 	stw	r2,-25776(gp)
   22c38:	80c00117 	ldw	r3,4(r16)
   22c3c:	00bfff04 	movi	r2,-4
   22c40:	1886703a 	and	r3,r3,r2
   22c44:	1c45c83a 	sub	r2,r3,r17
   22c48:	1c400236 	bltu	r3,r17,22c54 <_malloc_r+0x484>
   22c4c:	00c003c4 	movi	r3,15
   22c50:	18800416 	blt	r3,r2,22c64 <_malloc_r+0x494>
   22c54:	9009883a 	mov	r4,r18
   22c58:	002b9c40 	call	2b9c4 <__malloc_unlock>
   22c5c:	0005883a 	mov	r2,zero
   22c60:	003f0906 	br	22888 <_malloc_r+0xb8>
   22c64:	88c00054 	ori	r3,r17,1
   22c68:	10800054 	ori	r2,r2,1
   22c6c:	80c00115 	stw	r3,4(r16)
   22c70:	8463883a 	add	r17,r16,r17
   22c74:	88800115 	stw	r2,4(r17)
   22c78:	9009883a 	mov	r4,r18
   22c7c:	9c400215 	stw	r17,8(r19)
   22c80:	002b9c40 	call	2b9c4 <__malloc_unlock>
   22c84:	80800204 	addi	r2,r16,8
   22c88:	003eff06 	br	22888 <_malloc_r+0xb8>
   22c8c:	00800504 	movi	r2,20
   22c90:	1100492e 	bgeu	r2,r4,22db8 <_malloc_r+0x5e8>
   22c94:	00801504 	movi	r2,84
   22c98:	11005c36 	bltu	r2,r4,22e0c <_malloc_r+0x63c>
   22c9c:	8808d33a 	srli	r4,r17,12
   22ca0:	21001b84 	addi	r4,r4,110
   22ca4:	210b883a 	add	r5,r4,r4
   22ca8:	003f1006 	br	228ec <_malloc_r+0x11c>
   22cac:	1006d27a 	srli	r3,r2,9
   22cb0:	01400104 	movi	r5,4
   22cb4:	28c0432e 	bgeu	r5,r3,22dc4 <_malloc_r+0x5f4>
   22cb8:	01400504 	movi	r5,20
   22cbc:	28c07036 	bltu	r5,r3,22e80 <_malloc_r+0x6b0>
   22cc0:	194016c4 	addi	r5,r3,91
   22cc4:	294d883a 	add	r6,r5,r5
   22cc8:	318d883a 	add	r6,r6,r6
   22ccc:	318d883a 	add	r6,r6,r6
   22cd0:	998d883a 	add	r6,r19,r6
   22cd4:	30c00217 	ldw	r3,8(r6)
   22cd8:	01c000f4 	movhi	r7,3
   22cdc:	39fbc004 	addi	r7,r7,-4352
   22ce0:	19805726 	beq	r3,r6,22e40 <_malloc_r+0x670>
   22ce4:	01ffff04 	movi	r7,-4
   22ce8:	19400117 	ldw	r5,4(r3)
   22cec:	29ca703a 	and	r5,r5,r7
   22cf0:	1140022e 	bgeu	r2,r5,22cfc <_malloc_r+0x52c>
   22cf4:	18c00217 	ldw	r3,8(r3)
   22cf8:	30fffb1e 	bne	r6,r3,22ce8 <_malloc_r+0x518>
   22cfc:	19400317 	ldw	r5,12(r3)
   22d00:	98800117 	ldw	r2,4(r19)
   22d04:	81400315 	stw	r5,12(r16)
   22d08:	80c00215 	stw	r3,8(r16)
   22d0c:	2c000215 	stw	r16,8(r5)
   22d10:	1c000315 	stw	r16,12(r3)
   22d14:	003f2b06 	br	229c4 <_malloc_r+0x1f4>
   22d18:	8445883a 	add	r2,r16,r17
   22d1c:	8c400054 	ori	r17,r17,1
   22d20:	18800515 	stw	r2,20(r3)
   22d24:	18800415 	stw	r2,16(r3)
   22d28:	29000054 	ori	r4,r5,1
   22d2c:	1147883a 	add	r3,r2,r5
   22d30:	84400115 	stw	r17,4(r16)
   22d34:	11000115 	stw	r4,4(r2)
   22d38:	12400315 	stw	r9,12(r2)
   22d3c:	12400215 	stw	r9,8(r2)
   22d40:	19400015 	stw	r5,0(r3)
   22d44:	9009883a 	mov	r4,r18
   22d48:	002b9c40 	call	2b9c4 <__malloc_unlock>
   22d4c:	80800204 	addi	r2,r16,8
   22d50:	003ecd06 	br	22888 <_malloc_r+0xb8>
   22d54:	18800117 	ldw	r2,4(r3)
   22d58:	003f1a06 	br	229c4 <_malloc_r+0x1f4>
   22d5c:	5ac00044 	addi	r11,r11,1
   22d60:	588000cc 	andi	r2,r11,3
   22d64:	52800204 	addi	r10,r10,8
   22d68:	103f2e1e 	bne	r2,zero,22a24 <_malloc_r+0x254>
   22d6c:	20c000cc 	andi	r3,r4,3
   22d70:	60bffe04 	addi	r2,r12,-8
   22d74:	18006f26 	beq	r3,zero,22f34 <_malloc_r+0x764>
   22d78:	63000017 	ldw	r12,0(r12)
   22d7c:	213fffc4 	addi	r4,r4,-1
   22d80:	60bffa26 	beq	r12,r2,22d6c <_malloc_r+0x59c>
   22d84:	98800117 	ldw	r2,4(r19)
   22d88:	294b883a 	add	r5,r5,r5
   22d8c:	117f5a36 	bltu	r2,r5,22af8 <_malloc_r+0x328>
   22d90:	283f5926 	beq	r5,zero,22af8 <_malloc_r+0x328>
   22d94:	1146703a 	and	r3,r2,r5
   22d98:	18001626 	beq	r3,zero,22df4 <_malloc_r+0x624>
   22d9c:	5809883a 	mov	r4,r11
   22da0:	003f1a06 	br	22a0c <_malloc_r+0x23c>
   22da4:	80800204 	addi	r2,r16,8
   22da8:	84000517 	ldw	r16,20(r16)
   22dac:	143ea81e 	bne	r2,r16,22850 <_malloc_r+0x80>
   22db0:	21000084 	addi	r4,r4,2
   22db4:	003ee306 	br	22944 <_malloc_r+0x174>
   22db8:	210016c4 	addi	r4,r4,91
   22dbc:	210b883a 	add	r5,r4,r4
   22dc0:	003eca06 	br	228ec <_malloc_r+0x11c>
   22dc4:	100ad1ba 	srli	r5,r2,6
   22dc8:	29400e04 	addi	r5,r5,56
   22dcc:	294d883a 	add	r6,r5,r5
   22dd0:	003fbd06 	br	22cc8 <_malloc_r+0x4f8>
   22dd4:	84ff6026 	beq	r16,r19,22b58 <_malloc_r+0x388>
   22dd8:	008000f4 	movhi	r2,3
   22ddc:	10bbc004 	addi	r2,r2,-4352
   22de0:	14000217 	ldw	r16,8(r2)
   22de4:	00bfff04 	movi	r2,-4
   22de8:	80c00117 	ldw	r3,4(r16)
   22dec:	1886703a 	and	r3,r3,r2
   22df0:	003f9406 	br	22c44 <_malloc_r+0x474>
   22df4:	294b883a 	add	r5,r5,r5
   22df8:	1146703a 	and	r3,r2,r5
   22dfc:	5ac00104 	addi	r11,r11,4
   22e00:	183ffc26 	beq	r3,zero,22df4 <_malloc_r+0x624>
   22e04:	5809883a 	mov	r4,r11
   22e08:	003f0006 	br	22a0c <_malloc_r+0x23c>
   22e0c:	00805504 	movi	r2,340
   22e10:	11001336 	bltu	r2,r4,22e60 <_malloc_r+0x690>
   22e14:	8808d3fa 	srli	r4,r17,15
   22e18:	21001dc4 	addi	r4,r4,119
   22e1c:	210b883a 	add	r5,r4,r4
   22e20:	003eb206 	br	228ec <_malloc_r+0x11c>
   22e24:	00840004 	movi	r2,4096
   22e28:	003f5d06 	br	22ba0 <_malloc_r+0x3d0>
   22e2c:	00800044 	movi	r2,1
   22e30:	a0800115 	stw	r2,4(r20)
   22e34:	a021883a 	mov	r16,r20
   22e38:	0007883a 	mov	r3,zero
   22e3c:	003f8106 	br	22c44 <_malloc_r+0x474>
   22e40:	280bd0ba 	srai	r5,r5,2
   22e44:	01800044 	movi	r6,1
   22e48:	38800117 	ldw	r2,4(r7)
   22e4c:	314c983a 	sll	r6,r6,r5
   22e50:	180b883a 	mov	r5,r3
   22e54:	3084b03a 	or	r2,r6,r2
   22e58:	38800115 	stw	r2,4(r7)
   22e5c:	003fa906 	br	22d04 <_malloc_r+0x534>
   22e60:	00815504 	movi	r2,1364
   22e64:	11001836 	bltu	r2,r4,22ec8 <_malloc_r+0x6f8>
   22e68:	8808d4ba 	srli	r4,r17,18
   22e6c:	21001f04 	addi	r4,r4,124
   22e70:	210b883a 	add	r5,r4,r4
   22e74:	003e9d06 	br	228ec <_malloc_r+0x11c>
   22e78:	bdc00404 	addi	r23,r23,16
   22e7c:	003f2f06 	br	22b3c <_malloc_r+0x36c>
   22e80:	01401504 	movi	r5,84
   22e84:	28c01f36 	bltu	r5,r3,22f04 <_malloc_r+0x734>
   22e88:	100ad33a 	srli	r5,r2,12
   22e8c:	29401b84 	addi	r5,r5,110
   22e90:	294d883a 	add	r6,r5,r5
   22e94:	003f8c06 	br	22cc8 <_malloc_r+0x4f8>
   22e98:	9c000217 	ldw	r16,8(r19)
   22e9c:	00bfff04 	movi	r2,-4
   22ea0:	80c00117 	ldw	r3,4(r16)
   22ea4:	1886703a 	and	r3,r3,r2
   22ea8:	003f6606 	br	22c44 <_malloc_r+0x474>
   22eac:	e0c3ffcc 	andi	r3,fp,4095
   22eb0:	183f2f1e 	bne	r3,zero,22b70 <_malloc_r+0x3a0>
   22eb4:	98c00217 	ldw	r3,8(r19)
   22eb8:	bd49883a 	add	r4,r23,r21
   22ebc:	21000054 	ori	r4,r4,1
   22ec0:	19000115 	stw	r4,4(r3)
   22ec4:	003f5506 	br	22c1c <_malloc_r+0x44c>
   22ec8:	01403f04 	movi	r5,252
   22ecc:	01001f84 	movi	r4,126
   22ed0:	003e8606 	br	228ec <_malloc_r+0x11c>
   22ed4:	9009883a 	mov	r4,r18
   22ed8:	81400204 	addi	r5,r16,8
   22edc:	0021be00 	call	21be0 <_free_r>
   22ee0:	008000f4 	movhi	r2,3
   22ee4:	10883104 	addi	r2,r2,8388
   22ee8:	10800017 	ldw	r2,0(r2)
   22eec:	003f4b06 	br	22c1c <_malloc_r+0x44c>
   22ef0:	00c00044 	movi	r3,1
   22ef4:	002f883a 	mov	r23,zero
   22ef8:	003f3406 	br	22bcc <_malloc_r+0x3fc>
   22efc:	d5200215 	stw	r20,-32760(gp)
   22f00:	003f2106 	br	22b88 <_malloc_r+0x3b8>
   22f04:	01405504 	movi	r5,340
   22f08:	28c00436 	bltu	r5,r3,22f1c <_malloc_r+0x74c>
   22f0c:	100ad3fa 	srli	r5,r2,15
   22f10:	29401dc4 	addi	r5,r5,119
   22f14:	294d883a 	add	r6,r5,r5
   22f18:	003f6b06 	br	22cc8 <_malloc_r+0x4f8>
   22f1c:	01415504 	movi	r5,1364
   22f20:	28c00936 	bltu	r5,r3,22f48 <_malloc_r+0x778>
   22f24:	100ad4ba 	srli	r5,r2,18
   22f28:	29401f04 	addi	r5,r5,124
   22f2c:	294d883a 	add	r6,r5,r5
   22f30:	003f6506 	br	22cc8 <_malloc_r+0x4f8>
   22f34:	98800117 	ldw	r2,4(r19)
   22f38:	0146303a 	nor	r3,zero,r5
   22f3c:	1884703a 	and	r2,r3,r2
   22f40:	98800115 	stw	r2,4(r19)
   22f44:	003f9006 	br	22d88 <_malloc_r+0x5b8>
   22f48:	01803f04 	movi	r6,252
   22f4c:	01401f84 	movi	r5,126
   22f50:	003f5d06 	br	22cc8 <_malloc_r+0x4f8>

00022f54 <memcpy>:
   22f54:	defffb04 	addi	sp,sp,-20
   22f58:	dc000015 	stw	r16,0(sp)
   22f5c:	dfc00415 	stw	ra,16(sp)
   22f60:	dcc00315 	stw	r19,12(sp)
   22f64:	dc800215 	stw	r18,8(sp)
   22f68:	dc400115 	stw	r17,4(sp)
   22f6c:	00c003c4 	movi	r3,15
   22f70:	2021883a 	mov	r16,r4
   22f74:	3005883a 	mov	r2,r6
   22f78:	1980032e 	bgeu	r3,r6,22f88 <memcpy+0x34>
   22f7c:	2906b03a 	or	r3,r5,r4
   22f80:	18c000cc 	andi	r3,r3,3
   22f84:	18001026 	beq	r3,zero,22fc8 <memcpy+0x74>
   22f88:	8007883a 	mov	r3,r16
   22f8c:	288f883a 	add	r7,r5,r2
   22f90:	10000526 	beq	r2,zero,22fa8 <memcpy+0x54>
   22f94:	29800003 	ldbu	r6,0(r5)
   22f98:	18c00044 	addi	r3,r3,1
   22f9c:	29400044 	addi	r5,r5,1
   22fa0:	19bfffc5 	stb	r6,-1(r3)
   22fa4:	29fffb1e 	bne	r5,r7,22f94 <memcpy+0x40>
   22fa8:	8005883a 	mov	r2,r16
   22fac:	dfc00417 	ldw	ra,16(sp)
   22fb0:	dcc00317 	ldw	r19,12(sp)
   22fb4:	dc800217 	ldw	r18,8(sp)
   22fb8:	dc400117 	ldw	r17,4(sp)
   22fbc:	dc000017 	ldw	r16,0(sp)
   22fc0:	dec00504 	addi	sp,sp,20
   22fc4:	f800283a 	ret
   22fc8:	32bffc04 	addi	r10,r6,-16
   22fcc:	5014d13a 	srli	r10,r10,4
   22fd0:	20800404 	addi	r2,r4,16
   22fd4:	2007883a 	mov	r3,r4
   22fd8:	5008913a 	slli	r4,r10,4
   22fdc:	280f883a 	mov	r7,r5
   22fe0:	1105883a 	add	r2,r2,r4
   22fe4:	3a000017 	ldw	r8,0(r7)
   22fe8:	18c00404 	addi	r3,r3,16
   22fec:	39c00404 	addi	r7,r7,16
   22ff0:	1a3ffc15 	stw	r8,-16(r3)
   22ff4:	3a3ffd17 	ldw	r8,-12(r7)
   22ff8:	1a3ffd15 	stw	r8,-12(r3)
   22ffc:	3a3ffe17 	ldw	r8,-8(r7)
   23000:	1a3ffe15 	stw	r8,-8(r3)
   23004:	3a3fff17 	ldw	r8,-4(r7)
   23008:	1a3fff15 	stw	r8,-4(r3)
   2300c:	18bff51e 	bne	r3,r2,22fe4 <memcpy+0x90>
   23010:	52800044 	addi	r10,r10,1
   23014:	5014913a 	slli	r10,r10,4
   23018:	308003cc 	andi	r2,r6,15
   2301c:	010000c4 	movi	r4,3
   23020:	8287883a 	add	r3,r16,r10
   23024:	2a95883a 	add	r10,r5,r10
   23028:	2080182e 	bgeu	r4,r2,2308c <memcpy+0x138>
   2302c:	147fff04 	addi	r17,r2,-4
   23030:	8808d0ba 	srli	r4,r17,2
   23034:	1a400104 	addi	r9,r3,4
   23038:	180d883a 	mov	r6,r3
   2303c:	2105883a 	add	r2,r4,r4
   23040:	1085883a 	add	r2,r2,r2
   23044:	4893883a 	add	r9,r9,r2
   23048:	500f883a 	mov	r7,r10
   2304c:	3a000017 	ldw	r8,0(r7)
   23050:	31800104 	addi	r6,r6,4
   23054:	39c00104 	addi	r7,r7,4
   23058:	323fff15 	stw	r8,-4(r6)
   2305c:	327ffb1e 	bne	r6,r9,2304c <memcpy+0xf8>
   23060:	20800044 	addi	r2,r4,1
   23064:	1085883a 	add	r2,r2,r2
   23068:	1085883a 	add	r2,r2,r2
   2306c:	017fff04 	movi	r5,-4
   23070:	18a5883a 	add	r18,r3,r2
   23074:	50a7883a 	add	r19,r10,r2
   23078:	00210140 	call	21014 <__mulsi3>
   2307c:	1445883a 	add	r2,r2,r17
   23080:	980b883a 	mov	r5,r19
   23084:	9007883a 	mov	r3,r18
   23088:	003fc006 	br	22f8c <memcpy+0x38>
   2308c:	500b883a 	mov	r5,r10
   23090:	003fbe06 	br	22f8c <memcpy+0x38>

00023094 <memset>:
   23094:	00c000c4 	movi	r3,3
   23098:	2005883a 	mov	r2,r4
   2309c:	29403fcc 	andi	r5,r5,255
   230a0:	19802d2e 	bgeu	r3,r6,23158 <memset+0xc4>
   230a4:	20c6703a 	and	r3,r4,r3
   230a8:	18002e1e 	bne	r3,zero,23164 <memset+0xd0>
   230ac:	2806923a 	slli	r3,r5,8
   230b0:	010003c4 	movi	r4,15
   230b4:	3011883a 	mov	r8,r6
   230b8:	1946b03a 	or	r3,r3,r5
   230bc:	180e943a 	slli	r7,r3,16
   230c0:	38ceb03a 	or	r7,r7,r3
   230c4:	1007883a 	mov	r3,r2
   230c8:	21800f2e 	bgeu	r4,r6,23108 <memset+0x74>
   230cc:	19c00015 	stw	r7,0(r3)
   230d0:	19c00115 	stw	r7,4(r3)
   230d4:	19c00215 	stw	r7,8(r3)
   230d8:	19c00315 	stw	r7,12(r3)
   230dc:	423ffc04 	addi	r8,r8,-16
   230e0:	18c00404 	addi	r3,r3,16
   230e4:	223ff936 	bltu	r4,r8,230cc <memset+0x38>
   230e8:	30fffc04 	addi	r3,r6,-16
   230ec:	1806d13a 	srli	r3,r3,4
   230f0:	318003cc 	andi	r6,r6,15
   230f4:	010000c4 	movi	r4,3
   230f8:	18c00044 	addi	r3,r3,1
   230fc:	1806913a 	slli	r3,r3,4
   23100:	10c7883a 	add	r3,r2,r3
   23104:	21800e2e 	bgeu	r4,r6,23140 <memset+0xac>
   23108:	1813883a 	mov	r9,r3
   2310c:	3011883a 	mov	r8,r6
   23110:	010000c4 	movi	r4,3
   23114:	49c00015 	stw	r7,0(r9)
   23118:	423fff04 	addi	r8,r8,-4
   2311c:	4a400104 	addi	r9,r9,4
   23120:	223ffc36 	bltu	r4,r8,23114 <memset+0x80>
   23124:	313fff04 	addi	r4,r6,-4
   23128:	2008d0ba 	srli	r4,r4,2
   2312c:	318000cc 	andi	r6,r6,3
   23130:	21000044 	addi	r4,r4,1
   23134:	2109883a 	add	r4,r4,r4
   23138:	2109883a 	add	r4,r4,r4
   2313c:	1907883a 	add	r3,r3,r4
   23140:	30000a26 	beq	r6,zero,2316c <memset+0xd8>
   23144:	198d883a 	add	r6,r3,r6
   23148:	19400005 	stb	r5,0(r3)
   2314c:	18c00044 	addi	r3,r3,1
   23150:	19bffd1e 	bne	r3,r6,23148 <memset+0xb4>
   23154:	f800283a 	ret
   23158:	2007883a 	mov	r3,r4
   2315c:	303ff91e 	bne	r6,zero,23144 <memset+0xb0>
   23160:	00000206 	br	2316c <memset+0xd8>
   23164:	2007883a 	mov	r3,r4
   23168:	003ff606 	br	23144 <memset+0xb0>
   2316c:	f800283a 	ret

00023170 <_open_r>:
   23170:	defffd04 	addi	sp,sp,-12
   23174:	dc400115 	stw	r17,4(sp)
   23178:	dc000015 	stw	r16,0(sp)
   2317c:	2023883a 	mov	r17,r4
   23180:	040000f4 	movhi	r16,3
   23184:	84082404 	addi	r16,r16,8336
   23188:	2809883a 	mov	r4,r5
   2318c:	300b883a 	mov	r5,r6
   23190:	380d883a 	mov	r6,r7
   23194:	dfc00215 	stw	ra,8(sp)
   23198:	80000015 	stw	zero,0(r16)
   2319c:	002bb240 	call	2bb24 <open>
   231a0:	00ffffc4 	movi	r3,-1
   231a4:	10c00526 	beq	r2,r3,231bc <_open_r+0x4c>
   231a8:	dfc00217 	ldw	ra,8(sp)
   231ac:	dc400117 	ldw	r17,4(sp)
   231b0:	dc000017 	ldw	r16,0(sp)
   231b4:	dec00304 	addi	sp,sp,12
   231b8:	f800283a 	ret
   231bc:	80c00017 	ldw	r3,0(r16)
   231c0:	183ff926 	beq	r3,zero,231a8 <_open_r+0x38>
   231c4:	88c00015 	stw	r3,0(r17)
   231c8:	dfc00217 	ldw	ra,8(sp)
   231cc:	dc400117 	ldw	r17,4(sp)
   231d0:	dc000017 	ldw	r16,0(sp)
   231d4:	dec00304 	addi	sp,sp,12
   231d8:	f800283a 	ret

000231dc <_printf_r>:
   231dc:	defffd04 	addi	sp,sp,-12
   231e0:	dfc00015 	stw	ra,0(sp)
   231e4:	d9800115 	stw	r6,4(sp)
   231e8:	d9c00215 	stw	r7,8(sp)
   231ec:	280d883a 	mov	r6,r5
   231f0:	21400217 	ldw	r5,8(r4)
   231f4:	d9c00104 	addi	r7,sp,4
   231f8:	00237480 	call	23748 <___vfprintf_internal_r>
   231fc:	dfc00017 	ldw	ra,0(sp)
   23200:	dec00304 	addi	sp,sp,12
   23204:	f800283a 	ret

00023208 <printf>:
   23208:	defffc04 	addi	sp,sp,-16
   2320c:	dfc00015 	stw	ra,0(sp)
   23210:	d9400115 	stw	r5,4(sp)
   23214:	d9800215 	stw	r6,8(sp)
   23218:	d9c00315 	stw	r7,12(sp)
   2321c:	008000f4 	movhi	r2,3
   23220:	10815204 	addi	r2,r2,1352
   23224:	10800017 	ldw	r2,0(r2)
   23228:	200b883a 	mov	r5,r4
   2322c:	d9800104 	addi	r6,sp,4
   23230:	11000217 	ldw	r4,8(r2)
   23234:	00255c40 	call	255c4 <__vfprintf_internal>
   23238:	dfc00017 	ldw	ra,0(sp)
   2323c:	dec00404 	addi	sp,sp,16
   23240:	f800283a 	ret

00023244 <_puts_r>:
   23244:	defff604 	addi	sp,sp,-40
   23248:	dc400815 	stw	r17,32(sp)
   2324c:	2023883a 	mov	r17,r4
   23250:	2809883a 	mov	r4,r5
   23254:	dc000715 	stw	r16,28(sp)
   23258:	dfc00915 	stw	ra,36(sp)
   2325c:	2821883a 	mov	r16,r5
   23260:	00236880 	call	23688 <strlen>
   23264:	10c00044 	addi	r3,r2,1
   23268:	d8800115 	stw	r2,4(sp)
   2326c:	89400217 	ldw	r5,8(r17)
   23270:	008000f4 	movhi	r2,3
   23274:	10b9f604 	addi	r2,r2,-6184
   23278:	d8800215 	stw	r2,8(sp)
   2327c:	00800044 	movi	r2,1
   23280:	d8800315 	stw	r2,12(sp)
   23284:	8809883a 	mov	r4,r17
   23288:	00800084 	movi	r2,2
   2328c:	d9800404 	addi	r6,sp,16
   23290:	dc000015 	stw	r16,0(sp)
   23294:	d8c00615 	stw	r3,24(sp)
   23298:	dec00415 	stw	sp,16(sp)
   2329c:	d8800515 	stw	r2,20(sp)
   232a0:	002711c0 	call	2711c <__sfvwrite_r>
   232a4:	1000061e 	bne	r2,zero,232c0 <_puts_r+0x7c>
   232a8:	00800284 	movi	r2,10
   232ac:	dfc00917 	ldw	ra,36(sp)
   232b0:	dc400817 	ldw	r17,32(sp)
   232b4:	dc000717 	ldw	r16,28(sp)
   232b8:	dec00a04 	addi	sp,sp,40
   232bc:	f800283a 	ret
   232c0:	00bfffc4 	movi	r2,-1
   232c4:	003ff906 	br	232ac <_puts_r+0x68>

000232c8 <puts>:
   232c8:	008000f4 	movhi	r2,3
   232cc:	10815204 	addi	r2,r2,1352
   232d0:	200b883a 	mov	r5,r4
   232d4:	11000017 	ldw	r4,0(r2)
   232d8:	00232441 	jmpi	23244 <_puts_r>

000232dc <lflush>:
   232dc:	20c0030b 	ldhu	r3,12(r4)
   232e0:	00800244 	movi	r2,9
   232e4:	18c0024c 	andi	r3,r3,9
   232e8:	18800226 	beq	r3,r2,232f4 <lflush+0x18>
   232ec:	0005883a 	mov	r2,zero
   232f0:	f800283a 	ret
   232f4:	00213741 	jmpi	21374 <fflush>

000232f8 <__srefill_r>:
   232f8:	defffd04 	addi	sp,sp,-12
   232fc:	dc400115 	stw	r17,4(sp)
   23300:	dc000015 	stw	r16,0(sp)
   23304:	dfc00215 	stw	ra,8(sp)
   23308:	2023883a 	mov	r17,r4
   2330c:	2821883a 	mov	r16,r5
   23310:	20000226 	beq	r4,zero,2331c <__srefill_r+0x24>
   23314:	20800e17 	ldw	r2,56(r4)
   23318:	10004426 	beq	r2,zero,2342c <__srefill_r+0x134>
   2331c:	8080030b 	ldhu	r2,12(r16)
   23320:	80000115 	stw	zero,4(r16)
   23324:	10c0080c 	andi	r3,r2,32
   23328:	18ffffcc 	andi	r3,r3,65535
   2332c:	18e0001c 	xori	r3,r3,32768
   23330:	18e00004 	addi	r3,r3,-32768
   23334:	1800371e 	bne	r3,zero,23414 <__srefill_r+0x11c>
   23338:	10c0010c 	andi	r3,r2,4
   2333c:	18ffffcc 	andi	r3,r3,65535
   23340:	18e0001c 	xori	r3,r3,32768
   23344:	18e00004 	addi	r3,r3,-32768
   23348:	18002226 	beq	r3,zero,233d4 <__srefill_r+0xdc>
   2334c:	81400c17 	ldw	r5,48(r16)
   23350:	28000826 	beq	r5,zero,23374 <__srefill_r+0x7c>
   23354:	80801004 	addi	r2,r16,64
   23358:	28800226 	beq	r5,r2,23364 <__srefill_r+0x6c>
   2335c:	8809883a 	mov	r4,r17
   23360:	0021be00 	call	21be0 <_free_r>
   23364:	80800f17 	ldw	r2,60(r16)
   23368:	80000c15 	stw	zero,48(r16)
   2336c:	80800115 	stw	r2,4(r16)
   23370:	1000401e 	bne	r2,zero,23474 <__srefill_r+0x17c>
   23374:	80800417 	ldw	r2,16(r16)
   23378:	10005026 	beq	r2,zero,234bc <__srefill_r+0x1c4>
   2337c:	8080030b 	ldhu	r2,12(r16)
   23380:	108000cc 	andi	r2,r2,3
   23384:	10002b1e 	bne	r2,zero,23434 <__srefill_r+0x13c>
   23388:	81800417 	ldw	r6,16(r16)
   2338c:	80800817 	ldw	r2,32(r16)
   23390:	81400717 	ldw	r5,28(r16)
   23394:	81c00517 	ldw	r7,20(r16)
   23398:	8809883a 	mov	r4,r17
   2339c:	81800015 	stw	r6,0(r16)
   233a0:	103ee83a 	callr	r2
   233a4:	8100030b 	ldhu	r4,12(r16)
   233a8:	00f7ffc4 	movi	r3,-8193
   233ac:	80800115 	stw	r2,4(r16)
   233b0:	20c6703a 	and	r3,r4,r3
   233b4:	80c0030d 	sth	r3,12(r16)
   233b8:	0080130e 	bge	zero,r2,23408 <__srefill_r+0x110>
   233bc:	0005883a 	mov	r2,zero
   233c0:	dfc00217 	ldw	ra,8(sp)
   233c4:	dc400117 	ldw	r17,4(sp)
   233c8:	dc000017 	ldw	r16,0(sp)
   233cc:	dec00304 	addi	sp,sp,12
   233d0:	f800283a 	ret
   233d4:	10c0040c 	andi	r3,r2,16
   233d8:	18ffffcc 	andi	r3,r3,65535
   233dc:	18e0001c 	xori	r3,r3,32768
   233e0:	18e00004 	addi	r3,r3,-32768
   233e4:	18003926 	beq	r3,zero,234cc <__srefill_r+0x1d4>
   233e8:	10c0020c 	andi	r3,r2,8
   233ec:	18ffffcc 	andi	r3,r3,65535
   233f0:	18e0001c 	xori	r3,r3,32768
   233f4:	18e00004 	addi	r3,r3,-32768
   233f8:	1800261e 	bne	r3,zero,23494 <__srefill_r+0x19c>
   233fc:	10800114 	ori	r2,r2,4
   23400:	8080030d 	sth	r2,12(r16)
   23404:	003fdb06 	br	23374 <__srefill_r+0x7c>
   23408:	1000111e 	bne	r2,zero,23450 <__srefill_r+0x158>
   2340c:	18c00814 	ori	r3,r3,32
   23410:	80c0030d 	sth	r3,12(r16)
   23414:	00bfffc4 	movi	r2,-1
   23418:	dfc00217 	ldw	ra,8(sp)
   2341c:	dc400117 	ldw	r17,4(sp)
   23420:	dc000017 	ldw	r16,0(sp)
   23424:	dec00304 	addi	sp,sp,12
   23428:	f800283a 	ret
   2342c:	00214480 	call	21448 <__sinit>
   23430:	003fba06 	br	2331c <__srefill_r+0x24>
   23434:	008000f4 	movhi	r2,3
   23438:	10815104 	addi	r2,r2,1348
   2343c:	11000017 	ldw	r4,0(r2)
   23440:	014000b4 	movhi	r5,2
   23444:	294cb704 	addi	r5,r5,13020
   23448:	00223b00 	call	223b0 <_fwalk>
   2344c:	003fce06 	br	23388 <__srefill_r+0x90>
   23450:	18c01014 	ori	r3,r3,64
   23454:	00bfffc4 	movi	r2,-1
   23458:	80000115 	stw	zero,4(r16)
   2345c:	80c0030d 	sth	r3,12(r16)
   23460:	dfc00217 	ldw	ra,8(sp)
   23464:	dc400117 	ldw	r17,4(sp)
   23468:	dc000017 	ldw	r16,0(sp)
   2346c:	dec00304 	addi	sp,sp,12
   23470:	f800283a 	ret
   23474:	80c00e17 	ldw	r3,56(r16)
   23478:	0005883a 	mov	r2,zero
   2347c:	80c00015 	stw	r3,0(r16)
   23480:	dfc00217 	ldw	ra,8(sp)
   23484:	dc400117 	ldw	r17,4(sp)
   23488:	dc000017 	ldw	r16,0(sp)
   2348c:	dec00304 	addi	sp,sp,12
   23490:	f800283a 	ret
   23494:	8809883a 	mov	r4,r17
   23498:	800b883a 	mov	r5,r16
   2349c:	002118c0 	call	2118c <_fflush_r>
   234a0:	103fdc1e 	bne	r2,zero,23414 <__srefill_r+0x11c>
   234a4:	8080030b 	ldhu	r2,12(r16)
   234a8:	00fffdc4 	movi	r3,-9
   234ac:	80000215 	stw	zero,8(r16)
   234b0:	1884703a 	and	r2,r3,r2
   234b4:	80000615 	stw	zero,24(r16)
   234b8:	003fd006 	br	233fc <__srefill_r+0x104>
   234bc:	8809883a 	mov	r4,r17
   234c0:	800b883a 	mov	r5,r16
   234c4:	00226000 	call	22600 <__smakebuf_r>
   234c8:	003fac06 	br	2337c <__srefill_r+0x84>
   234cc:	00c00244 	movi	r3,9
   234d0:	10801014 	ori	r2,r2,64
   234d4:	88c00015 	stw	r3,0(r17)
   234d8:	8080030d 	sth	r2,12(r16)
   234dc:	00bfffc4 	movi	r2,-1
   234e0:	003fb706 	br	233c0 <__srefill_r+0xc8>

000234e4 <_sbrk_r>:
   234e4:	defffd04 	addi	sp,sp,-12
   234e8:	dc400115 	stw	r17,4(sp)
   234ec:	dc000015 	stw	r16,0(sp)
   234f0:	2023883a 	mov	r17,r4
   234f4:	040000f4 	movhi	r16,3
   234f8:	84082404 	addi	r16,r16,8336
   234fc:	2809883a 	mov	r4,r5
   23500:	dfc00215 	stw	ra,8(sp)
   23504:	80000015 	stw	zero,0(r16)
   23508:	002be400 	call	2be40 <sbrk>
   2350c:	00ffffc4 	movi	r3,-1
   23510:	10c00526 	beq	r2,r3,23528 <_sbrk_r+0x44>
   23514:	dfc00217 	ldw	ra,8(sp)
   23518:	dc400117 	ldw	r17,4(sp)
   2351c:	dc000017 	ldw	r16,0(sp)
   23520:	dec00304 	addi	sp,sp,12
   23524:	f800283a 	ret
   23528:	80c00017 	ldw	r3,0(r16)
   2352c:	183ff926 	beq	r3,zero,23514 <_sbrk_r+0x30>
   23530:	88c00015 	stw	r3,0(r17)
   23534:	dfc00217 	ldw	ra,8(sp)
   23538:	dc400117 	ldw	r17,4(sp)
   2353c:	dc000017 	ldw	r16,0(sp)
   23540:	dec00304 	addi	sp,sp,12
   23544:	f800283a 	ret

00023548 <__sread>:
   23548:	defffe04 	addi	sp,sp,-8
   2354c:	dc000015 	stw	r16,0(sp)
   23550:	2821883a 	mov	r16,r5
   23554:	2940038f 	ldh	r5,14(r5)
   23558:	dfc00115 	stw	ra,4(sp)
   2355c:	0028a800 	call	28a80 <_read_r>
   23560:	10000716 	blt	r2,zero,23580 <__sread+0x38>
   23564:	80c01417 	ldw	r3,80(r16)
   23568:	1887883a 	add	r3,r3,r2
   2356c:	80c01415 	stw	r3,80(r16)
   23570:	dfc00117 	ldw	ra,4(sp)
   23574:	dc000017 	ldw	r16,0(sp)
   23578:	dec00204 	addi	sp,sp,8
   2357c:	f800283a 	ret
   23580:	80c0030b 	ldhu	r3,12(r16)
   23584:	18fbffcc 	andi	r3,r3,61439
   23588:	80c0030d 	sth	r3,12(r16)
   2358c:	dfc00117 	ldw	ra,4(sp)
   23590:	dc000017 	ldw	r16,0(sp)
   23594:	dec00204 	addi	sp,sp,8
   23598:	f800283a 	ret

0002359c <__swrite>:
   2359c:	2880030b 	ldhu	r2,12(r5)
   235a0:	defffb04 	addi	sp,sp,-20
   235a4:	dcc00315 	stw	r19,12(sp)
   235a8:	10c0400c 	andi	r3,r2,256
   235ac:	18ffffcc 	andi	r3,r3,65535
   235b0:	18e0001c 	xori	r3,r3,32768
   235b4:	dc800215 	stw	r18,8(sp)
   235b8:	dc400115 	stw	r17,4(sp)
   235bc:	dc000015 	stw	r16,0(sp)
   235c0:	dfc00415 	stw	ra,16(sp)
   235c4:	18e00004 	addi	r3,r3,-32768
   235c8:	2821883a 	mov	r16,r5
   235cc:	2027883a 	mov	r19,r4
   235d0:	3025883a 	mov	r18,r6
   235d4:	3823883a 	mov	r17,r7
   235d8:	18000526 	beq	r3,zero,235f0 <__swrite+0x54>
   235dc:	2940038f 	ldh	r5,14(r5)
   235e0:	000d883a 	mov	r6,zero
   235e4:	01c00084 	movi	r7,2
   235e8:	00277400 	call	27740 <_lseek_r>
   235ec:	8080030b 	ldhu	r2,12(r16)
   235f0:	8140038f 	ldh	r5,14(r16)
   235f4:	10bbffcc 	andi	r2,r2,61439
   235f8:	9809883a 	mov	r4,r19
   235fc:	900d883a 	mov	r6,r18
   23600:	880f883a 	mov	r7,r17
   23604:	8080030d 	sth	r2,12(r16)
   23608:	dfc00417 	ldw	ra,16(sp)
   2360c:	dcc00317 	ldw	r19,12(sp)
   23610:	dc800217 	ldw	r18,8(sp)
   23614:	dc400117 	ldw	r17,4(sp)
   23618:	dc000017 	ldw	r16,0(sp)
   2361c:	dec00504 	addi	sp,sp,20
   23620:	00255e81 	jmpi	255e8 <_write_r>

00023624 <__sseek>:
   23624:	defffe04 	addi	sp,sp,-8
   23628:	dc000015 	stw	r16,0(sp)
   2362c:	2821883a 	mov	r16,r5
   23630:	2940038f 	ldh	r5,14(r5)
   23634:	dfc00115 	stw	ra,4(sp)
   23638:	00277400 	call	27740 <_lseek_r>
   2363c:	00ffffc4 	movi	r3,-1
   23640:	10c00826 	beq	r2,r3,23664 <__sseek+0x40>
   23644:	80c0030b 	ldhu	r3,12(r16)
   23648:	80801415 	stw	r2,80(r16)
   2364c:	18c40014 	ori	r3,r3,4096
   23650:	80c0030d 	sth	r3,12(r16)
   23654:	dfc00117 	ldw	ra,4(sp)
   23658:	dc000017 	ldw	r16,0(sp)
   2365c:	dec00204 	addi	sp,sp,8
   23660:	f800283a 	ret
   23664:	80c0030b 	ldhu	r3,12(r16)
   23668:	18fbffcc 	andi	r3,r3,61439
   2366c:	80c0030d 	sth	r3,12(r16)
   23670:	dfc00117 	ldw	ra,4(sp)
   23674:	dc000017 	ldw	r16,0(sp)
   23678:	dec00204 	addi	sp,sp,8
   2367c:	f800283a 	ret

00023680 <__sclose>:
   23680:	2940038f 	ldh	r5,14(r5)
   23684:	00257c81 	jmpi	257c8 <_close_r>

00023688 <strlen>:
   23688:	208000cc 	andi	r2,r4,3
   2368c:	10001f1e 	bne	r2,zero,2370c <strlen+0x84>
   23690:	20800017 	ldw	r2,0(r4)
   23694:	01ffbff4 	movhi	r7,65279
   23698:	39ffbfc4 	addi	r7,r7,-257
   2369c:	01a02074 	movhi	r6,32897
   236a0:	31a02004 	addi	r6,r6,-32640
   236a4:	11c7883a 	add	r3,r2,r7
   236a8:	0084303a 	nor	r2,zero,r2
   236ac:	1886703a 	and	r3,r3,r2
   236b0:	1986703a 	and	r3,r3,r6
   236b4:	2005883a 	mov	r2,r4
   236b8:	1800101e 	bne	r3,zero,236fc <strlen+0x74>
   236bc:	10800104 	addi	r2,r2,4
   236c0:	10c00017 	ldw	r3,0(r2)
   236c4:	19cb883a 	add	r5,r3,r7
   236c8:	00c6303a 	nor	r3,zero,r3
   236cc:	28c6703a 	and	r3,r5,r3
   236d0:	1986703a 	and	r3,r3,r6
   236d4:	1800091e 	bne	r3,zero,236fc <strlen+0x74>
   236d8:	10800104 	addi	r2,r2,4
   236dc:	10c00017 	ldw	r3,0(r2)
   236e0:	19cb883a 	add	r5,r3,r7
   236e4:	00c6303a 	nor	r3,zero,r3
   236e8:	28c6703a 	and	r3,r5,r3
   236ec:	1986703a 	and	r3,r3,r6
   236f0:	183ff226 	beq	r3,zero,236bc <strlen+0x34>
   236f4:	00000106 	br	236fc <strlen+0x74>
   236f8:	10800044 	addi	r2,r2,1
   236fc:	10c00007 	ldb	r3,0(r2)
   23700:	183ffd1e 	bne	r3,zero,236f8 <strlen+0x70>
   23704:	1105c83a 	sub	r2,r2,r4
   23708:	f800283a 	ret
   2370c:	2005883a 	mov	r2,r4
   23710:	003ffa06 	br	236fc <strlen+0x74>

00023714 <__sprint_r>:
   23714:	30800217 	ldw	r2,8(r6)
   23718:	defffe04 	addi	sp,sp,-8
   2371c:	dc000015 	stw	r16,0(sp)
   23720:	dfc00115 	stw	ra,4(sp)
   23724:	3021883a 	mov	r16,r6
   23728:	10000226 	beq	r2,zero,23734 <__sprint_r+0x20>
   2372c:	002711c0 	call	2711c <__sfvwrite_r>
   23730:	80000215 	stw	zero,8(r16)
   23734:	80000115 	stw	zero,4(r16)
   23738:	dfc00117 	ldw	ra,4(sp)
   2373c:	dc000017 	ldw	r16,0(sp)
   23740:	dec00204 	addi	sp,sp,8
   23744:	f800283a 	ret

00023748 <___vfprintf_internal_r>:
   23748:	defeb904 	addi	sp,sp,-1308
   2374c:	dc013d15 	stw	r16,1268(sp)
   23750:	d9013015 	stw	r4,1216(sp)
   23754:	dfc14615 	stw	ra,1304(sp)
   23758:	df014515 	stw	fp,1300(sp)
   2375c:	ddc14415 	stw	r23,1296(sp)
   23760:	dd814315 	stw	r22,1292(sp)
   23764:	dd414215 	stw	r21,1288(sp)
   23768:	dd014115 	stw	r20,1284(sp)
   2376c:	dcc14015 	stw	r19,1280(sp)
   23770:	dc813f15 	stw	r18,1276(sp)
   23774:	dc413e15 	stw	r17,1272(sp)
   23778:	d9412915 	stw	r5,1188(sp)
   2377c:	3021883a 	mov	r16,r6
   23780:	d9c12d15 	stw	r7,1204(sp)
   23784:	002770c0 	call	2770c <_localeconv_r>
   23788:	10800017 	ldw	r2,0(r2)
   2378c:	d9013017 	ldw	r4,1216(sp)
   23790:	d8013315 	stw	zero,1228(sp)
   23794:	d8813715 	stw	r2,1244(sp)
   23798:	d8013415 	stw	zero,1232(sp)
   2379c:	20000226 	beq	r4,zero,237a8 <___vfprintf_internal_r+0x60>
   237a0:	20800e17 	ldw	r2,56(r4)
   237a4:	10014b26 	beq	r2,zero,23cd4 <___vfprintf_internal_r+0x58c>
   237a8:	d8c12917 	ldw	r3,1188(sp)
   237ac:	1880030b 	ldhu	r2,12(r3)
   237b0:	10c0020c 	andi	r3,r2,8
   237b4:	18ffffcc 	andi	r3,r3,65535
   237b8:	18e0001c 	xori	r3,r3,32768
   237bc:	18e00004 	addi	r3,r3,-32768
   237c0:	1800ed26 	beq	r3,zero,23b78 <___vfprintf_internal_r+0x430>
   237c4:	d9012917 	ldw	r4,1188(sp)
   237c8:	20c00417 	ldw	r3,16(r4)
   237cc:	1800ea26 	beq	r3,zero,23b78 <___vfprintf_internal_r+0x430>
   237d0:	1100068c 	andi	r4,r2,26
   237d4:	00c00284 	movi	r3,10
   237d8:	20c0f026 	beq	r4,r3,23b9c <___vfprintf_internal_r+0x454>
   237dc:	d9010dc4 	addi	r4,sp,1079
   237e0:	d8810e04 	addi	r2,sp,1080
   237e4:	dc413017 	ldw	r17,1216(sp)
   237e8:	d8c00404 	addi	r3,sp,16
   237ec:	d9012615 	stw	r4,1176(sp)
   237f0:	1109c83a 	sub	r4,r2,r4
   237f4:	d8812715 	stw	r2,1180(sp)
   237f8:	d8c11b15 	stw	r3,1132(sp)
   237fc:	d8011d15 	stw	zero,1140(sp)
   23800:	d8011c15 	stw	zero,1136(sp)
   23804:	802b883a 	mov	r21,r16
   23808:	d8013215 	stw	zero,1224(sp)
   2380c:	d8013615 	stw	zero,1240(sp)
   23810:	d8013515 	stw	zero,1236(sp)
   23814:	d8012c15 	stw	zero,1200(sp)
   23818:	1813883a 	mov	r9,r3
   2381c:	d9013915 	stw	r4,1252(sp)
   23820:	a8800007 	ldb	r2,0(r21)
   23824:	1002f326 	beq	r2,zero,243f4 <___vfprintf_internal_r+0xcac>
   23828:	00c00944 	movi	r3,37
   2382c:	a825883a 	mov	r18,r21
   23830:	10c0021e 	bne	r2,r3,2383c <___vfprintf_internal_r+0xf4>
   23834:	00001406 	br	23888 <___vfprintf_internal_r+0x140>
   23838:	10c00326 	beq	r2,r3,23848 <___vfprintf_internal_r+0x100>
   2383c:	94800044 	addi	r18,r18,1
   23840:	90800007 	ldb	r2,0(r18)
   23844:	103ffc1e 	bne	r2,zero,23838 <___vfprintf_internal_r+0xf0>
   23848:	9561c83a 	sub	r16,r18,r21
   2384c:	80000e26 	beq	r16,zero,23888 <___vfprintf_internal_r+0x140>
   23850:	da011d17 	ldw	r8,1140(sp)
   23854:	d8c11c17 	ldw	r3,1136(sp)
   23858:	4d400015 	stw	r21,0(r9)
   2385c:	4c000115 	stw	r16,4(r9)
   23860:	4411883a 	add	r8,r8,r16
   23864:	18c00044 	addi	r3,r3,1
   23868:	da011d15 	stw	r8,1140(sp)
   2386c:	d8c11c15 	stw	r3,1136(sp)
   23870:	008001c4 	movi	r2,7
   23874:	10c11016 	blt	r2,r3,23cb8 <___vfprintf_internal_r+0x570>
   23878:	4a400204 	addi	r9,r9,8
   2387c:	d8812c17 	ldw	r2,1200(sp)
   23880:	1405883a 	add	r2,r2,r16
   23884:	d8812c15 	stw	r2,1200(sp)
   23888:	90800007 	ldb	r2,0(r18)
   2388c:	1000ee26 	beq	r2,zero,23c48 <___vfprintf_internal_r+0x500>
   23890:	95400044 	addi	r21,r18,1
   23894:	94800047 	ldb	r18,1(r18)
   23898:	073fffc4 	movi	fp,-1
   2389c:	e007883a 	mov	r3,fp
   238a0:	d8012585 	stb	zero,1174(sp)
   238a4:	d8012e15 	stw	zero,1208(sp)
   238a8:	0021883a 	mov	r16,zero
   238ac:	05001604 	movi	r20,88
   238b0:	04c00244 	movi	r19,9
   238b4:	4839883a 	mov	fp,r9
   238b8:	ad400044 	addi	r21,r21,1
   238bc:	90bff804 	addi	r2,r18,-32
   238c0:	a080462e 	bgeu	r20,r2,239dc <___vfprintf_internal_r+0x294>
   238c4:	e013883a 	mov	r9,fp
   238c8:	9000df26 	beq	r18,zero,23c48 <___vfprintf_internal_r+0x500>
   238cc:	00c00044 	movi	r3,1
   238d0:	d8c12815 	stw	r3,1184(sp)
   238d4:	dc810405 	stb	r18,1040(sp)
   238d8:	d8012585 	stb	zero,1174(sp)
   238dc:	d8c12b15 	stw	r3,1196(sp)
   238e0:	dcc10404 	addi	r19,sp,1040
   238e4:	d8013115 	stw	zero,1220(sp)
   238e8:	80c0008c 	andi	r3,r16,2
   238ec:	d8c12a15 	stw	r3,1192(sp)
   238f0:	18000326 	beq	r3,zero,23900 <___vfprintf_internal_r+0x1b8>
   238f4:	d8c12817 	ldw	r3,1184(sp)
   238f8:	18c00084 	addi	r3,r3,2
   238fc:	d8c12815 	stw	r3,1184(sp)
   23900:	80c0210c 	andi	r3,r16,132
   23904:	d8c12f15 	stw	r3,1212(sp)
   23908:	1802251e 	bne	r3,zero,241a0 <___vfprintf_internal_r+0xa58>
   2390c:	d9012e17 	ldw	r4,1208(sp)
   23910:	d8c12817 	ldw	r3,1184(sp)
   23914:	20edc83a 	sub	r22,r4,r3
   23918:	0582210e 	bge	zero,r22,241a0 <___vfprintf_internal_r+0xa58>
   2391c:	02800404 	movi	r10,16
   23920:	da011d17 	ldw	r8,1140(sp)
   23924:	d8c11c17 	ldw	r3,1136(sp)
   23928:	05c000f4 	movhi	r23,3
   2392c:	bdfa0784 	addi	r23,r23,-6114
   23930:	5580200e 	bge	r10,r22,239b4 <___vfprintf_internal_r+0x26c>
   23934:	dc813815 	stw	r18,1248(sp)
   23938:	5039883a 	mov	fp,r10
   2393c:	b825883a 	mov	r18,r23
   23940:	050001c4 	movi	r20,7
   23944:	b02f883a 	mov	r23,r22
   23948:	802d883a 	mov	r22,r16
   2394c:	dc012917 	ldw	r16,1188(sp)
   23950:	00000306 	br	23960 <___vfprintf_internal_r+0x218>
   23954:	bdfffc04 	addi	r23,r23,-16
   23958:	4a400204 	addi	r9,r9,8
   2395c:	e5c0110e 	bge	fp,r23,239a4 <___vfprintf_internal_r+0x25c>
   23960:	4c800015 	stw	r18,0(r9)
   23964:	4f000115 	stw	fp,4(r9)
   23968:	42000404 	addi	r8,r8,16
   2396c:	18c00044 	addi	r3,r3,1
   23970:	da011d15 	stw	r8,1140(sp)
   23974:	d8c11c15 	stw	r3,1136(sp)
   23978:	a0fff60e 	bge	r20,r3,23954 <___vfprintf_internal_r+0x20c>
   2397c:	8809883a 	mov	r4,r17
   23980:	800b883a 	mov	r5,r16
   23984:	d9811b04 	addi	r6,sp,1132
   23988:	00237140 	call	23714 <__sprint_r>
   2398c:	1000b41e 	bne	r2,zero,23c60 <___vfprintf_internal_r+0x518>
   23990:	bdfffc04 	addi	r23,r23,-16
   23994:	da011d17 	ldw	r8,1140(sp)
   23998:	d8c11c17 	ldw	r3,1136(sp)
   2399c:	da400404 	addi	r9,sp,16
   239a0:	e5ffef16 	blt	fp,r23,23960 <___vfprintf_internal_r+0x218>
   239a4:	b021883a 	mov	r16,r22
   239a8:	b82d883a 	mov	r22,r23
   239ac:	902f883a 	mov	r23,r18
   239b0:	dc813817 	ldw	r18,1248(sp)
   239b4:	4dc00015 	stw	r23,0(r9)
   239b8:	4d800115 	stw	r22,4(r9)
   239bc:	4591883a 	add	r8,r8,r22
   239c0:	18c00044 	addi	r3,r3,1
   239c4:	da011d15 	stw	r8,1140(sp)
   239c8:	d8c11c15 	stw	r3,1136(sp)
   239cc:	008001c4 	movi	r2,7
   239d0:	10c3fe16 	blt	r2,r3,249cc <___vfprintf_internal_r+0x1284>
   239d4:	4a400204 	addi	r9,r9,8
   239d8:	0001f306 	br	241a8 <___vfprintf_internal_r+0xa60>
   239dc:	1085883a 	add	r2,r2,r2
   239e0:	1085883a 	add	r2,r2,r2
   239e4:	010000b4 	movhi	r4,2
   239e8:	210e7e04 	addi	r4,r4,14840
   239ec:	1105883a 	add	r2,r2,r4
   239f0:	10800017 	ldw	r2,0(r2)
   239f4:	1000683a 	jmp	r2
   239f8:	000240d4 	movui	zero,2307
   239fc:	000238c4 	movi	zero,2275
   23a00:	000238c4 	movi	zero,2275
   23a04:	000240ec 	andhi	zero,zero,2307
   23a08:	000238c4 	movi	zero,2275
   23a0c:	000238c4 	movi	zero,2275
   23a10:	000238c4 	movi	zero,2275
   23a14:	000238c4 	movi	zero,2275
   23a18:	000238c4 	movi	zero,2275
   23a1c:	000238c4 	movi	zero,2275
   23a20:	00023fa4 	muli	zero,zero,2302
   23a24:	00024138 	rdprs	zero,zero,2308
   23a28:	000238c4 	movi	zero,2275
   23a2c:	00023b6c 	andhi	zero,zero,2285
   23a30:	00023f0c 	andi	zero,zero,2300
   23a34:	000238c4 	movi	zero,2275
   23a38:	000240f8 	rdprs	zero,zero,2307
   23a3c:	00024104 	movi	zero,2308
   23a40:	00024104 	movi	zero,2308
   23a44:	00024104 	movi	zero,2308
   23a48:	00024104 	movi	zero,2308
   23a4c:	00024104 	movi	zero,2308
   23a50:	00024104 	movi	zero,2308
   23a54:	00024104 	movi	zero,2308
   23a58:	00024104 	movi	zero,2308
   23a5c:	00024104 	movi	zero,2308
   23a60:	000238c4 	movi	zero,2275
   23a64:	000238c4 	movi	zero,2275
   23a68:	000238c4 	movi	zero,2275
   23a6c:	000238c4 	movi	zero,2275
   23a70:	000238c4 	movi	zero,2275
   23a74:	000238c4 	movi	zero,2275
   23a78:	000238c4 	movi	zero,2275
   23a7c:	000238c4 	movi	zero,2275
   23a80:	000238c4 	movi	zero,2275
   23a84:	000238c4 	movi	zero,2275
   23a88:	00023cdc 	xori	zero,zero,2291
   23a8c:	00023d9c 	xori	zero,zero,2294
   23a90:	000238c4 	movi	zero,2275
   23a94:	00023d9c 	xori	zero,zero,2294
   23a98:	000238c4 	movi	zero,2275
   23a9c:	000238c4 	movi	zero,2275
   23aa0:	000238c4 	movi	zero,2275
   23aa4:	000238c4 	movi	zero,2275
   23aa8:	00023e30 	cmpltui	zero,zero,2296
   23aac:	000238c4 	movi	zero,2275
   23ab0:	000238c4 	movi	zero,2275
   23ab4:	00023e3c 	xorhi	zero,zero,2296
   23ab8:	000238c4 	movi	zero,2275
   23abc:	000238c4 	movi	zero,2275
   23ac0:	000238c4 	movi	zero,2275
   23ac4:	000238c4 	movi	zero,2275
   23ac8:	000238c4 	movi	zero,2275
   23acc:	00023e74 	movhi	zero,2297
   23ad0:	000238c4 	movi	zero,2275
   23ad4:	000238c4 	movi	zero,2275
   23ad8:	00023eb0 	cmpltui	zero,zero,2298
   23adc:	000238c4 	movi	zero,2275
   23ae0:	000238c4 	movi	zero,2275
   23ae4:	000238c4 	movi	zero,2275
   23ae8:	000238c4 	movi	zero,2275
   23aec:	000238c4 	movi	zero,2275
   23af0:	000238c4 	movi	zero,2275
   23af4:	000238c4 	movi	zero,2275
   23af8:	000238c4 	movi	zero,2275
   23afc:	000238c4 	movi	zero,2275
   23b00:	000238c4 	movi	zero,2275
   23b04:	00024148 	cmpgei	zero,zero,2309
   23b08:	0002417c 	xorhi	zero,zero,2309
   23b0c:	00023d9c 	xori	zero,zero,2294
   23b10:	00023d9c 	xori	zero,zero,2294
   23b14:	00023d9c 	xori	zero,zero,2294
   23b18:	000240c8 	cmpgei	zero,zero,2307
   23b1c:	0002417c 	xorhi	zero,zero,2309
   23b20:	000238c4 	movi	zero,2275
   23b24:	000238c4 	movi	zero,2275
   23b28:	00023f54 	movui	zero,2301
   23b2c:	000238c4 	movi	zero,2275
   23b30:	00023f6c 	andhi	zero,zero,2301
   23b34:	00024188 	cmpgei	zero,zero,2310
   23b38:	00023fcc 	andi	zero,zero,2303
   23b3c:	0002401c 	xori	zero,zero,2304
   23b40:	000238c4 	movi	zero,2275
   23b44:	00024028 	cmpgeui	zero,zero,2304
   23b48:	000238c4 	movi	zero,2275
   23b4c:	00024194 	movui	zero,2310
   23b50:	000238c4 	movi	zero,2275
   23b54:	000238c4 	movi	zero,2275
   23b58:	0002408c 	andi	zero,zero,2306
   23b5c:	d9012e17 	ldw	r4,1208(sp)
   23b60:	d8812d15 	stw	r2,1204(sp)
   23b64:	0109c83a 	sub	r4,zero,r4
   23b68:	d9012e15 	stw	r4,1208(sp)
   23b6c:	84000114 	ori	r16,r16,4
   23b70:	ac800007 	ldb	r18,0(r21)
   23b74:	003f5006 	br	238b8 <___vfprintf_internal_r+0x170>
   23b78:	d9013017 	ldw	r4,1216(sp)
   23b7c:	d9412917 	ldw	r5,1188(sp)
   23b80:	00256540 	call	25654 <__swsetup_r>
   23b84:	10003d1e 	bne	r2,zero,23c7c <___vfprintf_internal_r+0x534>
   23b88:	d8c12917 	ldw	r3,1188(sp)
   23b8c:	1880030b 	ldhu	r2,12(r3)
   23b90:	00c00284 	movi	r3,10
   23b94:	1100068c 	andi	r4,r2,26
   23b98:	20ff101e 	bne	r4,r3,237dc <___vfprintf_internal_r+0x94>
   23b9c:	d9012917 	ldw	r4,1188(sp)
   23ba0:	20c0038b 	ldhu	r3,14(r4)
   23ba4:	193fffcc 	andi	r4,r3,65535
   23ba8:	2120001c 	xori	r4,r4,32768
   23bac:	21200004 	addi	r4,r4,-32768
   23bb0:	203f0a16 	blt	r4,zero,237dc <___vfprintf_internal_r+0x94>
   23bb4:	d9012917 	ldw	r4,1188(sp)
   23bb8:	d9c12d17 	ldw	r7,1204(sp)
   23bbc:	10bfff4c 	andi	r2,r2,65533
   23bc0:	22800717 	ldw	r10,28(r4)
   23bc4:	22400917 	ldw	r9,36(r4)
   23bc8:	d9013017 	ldw	r4,1216(sp)
   23bcc:	02010004 	movi	r8,1024
   23bd0:	d881070d 	sth	r2,1052(sp)
   23bd4:	d9410404 	addi	r5,sp,1040
   23bd8:	d8800404 	addi	r2,sp,16
   23bdc:	800d883a 	mov	r6,r16
   23be0:	d8c1078d 	sth	r3,1054(sp)
   23be4:	da810b15 	stw	r10,1068(sp)
   23be8:	da410d15 	stw	r9,1076(sp)
   23bec:	d8810415 	stw	r2,1040(sp)
   23bf0:	d8810815 	stw	r2,1056(sp)
   23bf4:	da010615 	stw	r8,1048(sp)
   23bf8:	da010915 	stw	r8,1060(sp)
   23bfc:	d8010a15 	stw	zero,1064(sp)
   23c00:	00237480 	call	23748 <___vfprintf_internal_r>
   23c04:	d8812c15 	stw	r2,1200(sp)
   23c08:	10000416 	blt	r2,zero,23c1c <___vfprintf_internal_r+0x4d4>
   23c0c:	d9013017 	ldw	r4,1216(sp)
   23c10:	d9410404 	addi	r5,sp,1040
   23c14:	002118c0 	call	2118c <_fflush_r>
   23c18:	1006501e 	bne	r2,zero,2555c <___vfprintf_internal_r+0x1e14>
   23c1c:	d881070b 	ldhu	r2,1052(sp)
   23c20:	1080100c 	andi	r2,r2,64
   23c24:	10bfffcc 	andi	r2,r2,65535
   23c28:	10a0001c 	xori	r2,r2,32768
   23c2c:	10a00004 	addi	r2,r2,-32768
   23c30:	10001426 	beq	r2,zero,23c84 <___vfprintf_internal_r+0x53c>
   23c34:	d8c12917 	ldw	r3,1188(sp)
   23c38:	1880030b 	ldhu	r2,12(r3)
   23c3c:	10801014 	ori	r2,r2,64
   23c40:	1880030d 	sth	r2,12(r3)
   23c44:	00000f06 	br	23c84 <___vfprintf_internal_r+0x53c>
   23c48:	d8811d17 	ldw	r2,1140(sp)
   23c4c:	10000426 	beq	r2,zero,23c60 <___vfprintf_internal_r+0x518>
   23c50:	d9013017 	ldw	r4,1216(sp)
   23c54:	d9412917 	ldw	r5,1188(sp)
   23c58:	d9811b04 	addi	r6,sp,1132
   23c5c:	00237140 	call	23714 <__sprint_r>
   23c60:	d8c12917 	ldw	r3,1188(sp)
   23c64:	1880030b 	ldhu	r2,12(r3)
   23c68:	1080100c 	andi	r2,r2,64
   23c6c:	10bfffcc 	andi	r2,r2,65535
   23c70:	10a0001c 	xori	r2,r2,32768
   23c74:	10a00004 	addi	r2,r2,-32768
   23c78:	10000226 	beq	r2,zero,23c84 <___vfprintf_internal_r+0x53c>
   23c7c:	00bfffc4 	movi	r2,-1
   23c80:	d8812c15 	stw	r2,1200(sp)
   23c84:	d8812c17 	ldw	r2,1200(sp)
   23c88:	dfc14617 	ldw	ra,1304(sp)
   23c8c:	df014517 	ldw	fp,1300(sp)
   23c90:	ddc14417 	ldw	r23,1296(sp)
   23c94:	dd814317 	ldw	r22,1292(sp)
   23c98:	dd414217 	ldw	r21,1288(sp)
   23c9c:	dd014117 	ldw	r20,1284(sp)
   23ca0:	dcc14017 	ldw	r19,1280(sp)
   23ca4:	dc813f17 	ldw	r18,1276(sp)
   23ca8:	dc413e17 	ldw	r17,1272(sp)
   23cac:	dc013d17 	ldw	r16,1268(sp)
   23cb0:	dec14704 	addi	sp,sp,1308
   23cb4:	f800283a 	ret
   23cb8:	d9412917 	ldw	r5,1188(sp)
   23cbc:	8809883a 	mov	r4,r17
   23cc0:	d9811b04 	addi	r6,sp,1132
   23cc4:	00237140 	call	23714 <__sprint_r>
   23cc8:	103fe51e 	bne	r2,zero,23c60 <___vfprintf_internal_r+0x518>
   23ccc:	da400404 	addi	r9,sp,16
   23cd0:	003eea06 	br	2387c <___vfprintf_internal_r+0x134>
   23cd4:	00214480 	call	21448 <__sinit>
   23cd8:	003eb306 	br	237a8 <___vfprintf_internal_r+0x60>
   23cdc:	e013883a 	mov	r9,fp
   23ce0:	84000414 	ori	r16,r16,16
   23ce4:	1839883a 	mov	fp,r3
   23ce8:	8080080c 	andi	r2,r16,32
   23cec:	10034426 	beq	r2,zero,24a00 <___vfprintf_internal_r+0x12b8>
   23cf0:	d8c12d17 	ldw	r3,1204(sp)
   23cf4:	18800117 	ldw	r2,4(r3)
   23cf8:	1dc00017 	ldw	r23,0(r3)
   23cfc:	18c00204 	addi	r3,r3,8
   23d00:	d8c12d15 	stw	r3,1204(sp)
   23d04:	102d883a 	mov	r22,r2
   23d08:	1003020e 	bge	r2,zero,24914 <___vfprintf_internal_r+0x11cc>
   23d0c:	05efc83a 	sub	r23,zero,r23
   23d10:	b804c03a 	cmpne	r2,r23,zero
   23d14:	05adc83a 	sub	r22,zero,r22
   23d18:	b0adc83a 	sub	r22,r22,r2
   23d1c:	00800b44 	movi	r2,45
   23d20:	d8812585 	stb	r2,1174(sp)
   23d24:	00c00044 	movi	r3,1
   23d28:	bd84b03a 	or	r2,r23,r22
   23d2c:	e0000216 	blt	fp,zero,23d38 <___vfprintf_internal_r+0x5f0>
   23d30:	013fdfc4 	movi	r4,-129
   23d34:	8120703a 	and	r16,r16,r4
   23d38:	1001cc1e 	bne	r2,zero,2446c <___vfprintf_internal_r+0xd24>
   23d3c:	e001cb1e 	bne	fp,zero,2446c <___vfprintf_internal_r+0xd24>
   23d40:	18c03fcc 	andi	r3,r3,255
   23d44:	1802ca1e 	bne	r3,zero,24870 <___vfprintf_internal_r+0x1128>
   23d48:	8080004c 	andi	r2,r16,1
   23d4c:	1002c826 	beq	r2,zero,24870 <___vfprintf_internal_r+0x1128>
   23d50:	d8c13917 	ldw	r3,1252(sp)
   23d54:	00800c04 	movi	r2,48
   23d58:	d8810dc5 	stb	r2,1079(sp)
   23d5c:	d8c12b15 	stw	r3,1196(sp)
   23d60:	dcc10dc4 	addi	r19,sp,1079
   23d64:	d8812b17 	ldw	r2,1196(sp)
   23d68:	d8812815 	stw	r2,1184(sp)
   23d6c:	1700010e 	bge	r2,fp,23d74 <___vfprintf_internal_r+0x62c>
   23d70:	df012815 	stw	fp,1184(sp)
   23d74:	d8812583 	ldbu	r2,1174(sp)
   23d78:	df013115 	stw	fp,1220(sp)
   23d7c:	10803fcc 	andi	r2,r2,255
   23d80:	1080201c 	xori	r2,r2,128
   23d84:	10bfe004 	addi	r2,r2,-128
   23d88:	103ed726 	beq	r2,zero,238e8 <___vfprintf_internal_r+0x1a0>
   23d8c:	d8c12817 	ldw	r3,1184(sp)
   23d90:	18c00044 	addi	r3,r3,1
   23d94:	d8c12815 	stw	r3,1184(sp)
   23d98:	003ed306 	br	238e8 <___vfprintf_internal_r+0x1a0>
   23d9c:	8080020c 	andi	r2,r16,8
   23da0:	e013883a 	mov	r9,fp
   23da4:	1839883a 	mov	fp,r3
   23da8:	1003a626 	beq	r2,zero,24c44 <___vfprintf_internal_r+0x14fc>
   23dac:	d9012d17 	ldw	r4,1204(sp)
   23db0:	25800017 	ldw	r22,0(r4)
   23db4:	25000117 	ldw	r20,4(r4)
   23db8:	21000204 	addi	r4,r4,8
   23dbc:	d9012d15 	stw	r4,1204(sp)
   23dc0:	dd813315 	stw	r22,1228(sp)
   23dc4:	dd013415 	stw	r20,1232(sp)
   23dc8:	b009883a 	mov	r4,r22
   23dcc:	a00b883a 	mov	r5,r20
   23dd0:	da413c15 	stw	r9,1264(sp)
   23dd4:	00290e80 	call	290e8 <__isinfd>
   23dd8:	da413c17 	ldw	r9,1264(sp)
   23ddc:	b009883a 	mov	r4,r22
   23de0:	a00b883a 	mov	r5,r20
   23de4:	10041d26 	beq	r2,zero,24e5c <___vfprintf_internal_r+0x1714>
   23de8:	000d883a 	mov	r6,zero
   23dec:	000f883a 	mov	r7,zero
   23df0:	002a9540 	call	2a954 <__ltdf2>
   23df4:	da413c17 	ldw	r9,1264(sp)
   23df8:	1004da16 	blt	r2,zero,25164 <___vfprintf_internal_r+0x1a1c>
   23dfc:	d8812583 	ldbu	r2,1174(sp)
   23e00:	00c011c4 	movi	r3,71
   23e04:	1c83d116 	blt	r3,r18,24d4c <___vfprintf_internal_r+0x1604>
   23e08:	04c000f4 	movhi	r19,3
   23e0c:	9cf9f704 	addi	r19,r19,-6180
   23e10:	00c000c4 	movi	r3,3
   23e14:	d8c12815 	stw	r3,1184(sp)
   23e18:	00ffdfc4 	movi	r3,-129
   23e1c:	80e0703a 	and	r16,r16,r3
   23e20:	d8c12817 	ldw	r3,1184(sp)
   23e24:	d8013115 	stw	zero,1220(sp)
   23e28:	d8c12b15 	stw	r3,1196(sp)
   23e2c:	003fd306 	br	23d7c <___vfprintf_internal_r+0x634>
   23e30:	84000214 	ori	r16,r16,8
   23e34:	ac800007 	ldb	r18,0(r21)
   23e38:	003e9f06 	br	238b8 <___vfprintf_internal_r+0x170>
   23e3c:	e013883a 	mov	r9,fp
   23e40:	84000414 	ori	r16,r16,16
   23e44:	1839883a 	mov	fp,r3
   23e48:	8080080c 	andi	r2,r16,32
   23e4c:	10031d26 	beq	r2,zero,24ac4 <___vfprintf_internal_r+0x137c>
   23e50:	d8812d17 	ldw	r2,1204(sp)
   23e54:	0007883a 	mov	r3,zero
   23e58:	15c00017 	ldw	r23,0(r2)
   23e5c:	15800117 	ldw	r22,4(r2)
   23e60:	10800204 	addi	r2,r2,8
   23e64:	d8812d15 	stw	r2,1204(sp)
   23e68:	d8012585 	stb	zero,1174(sp)
   23e6c:	bd84b03a 	or	r2,r23,r22
   23e70:	003fae06 	br	23d2c <___vfprintf_internal_r+0x5e4>
   23e74:	e013883a 	mov	r9,fp
   23e78:	84000414 	ori	r16,r16,16
   23e7c:	1839883a 	mov	fp,r3
   23e80:	8080080c 	andi	r2,r16,32
   23e84:	1002e726 	beq	r2,zero,24a24 <___vfprintf_internal_r+0x12dc>
   23e88:	d8c12d17 	ldw	r3,1204(sp)
   23e8c:	d9012d17 	ldw	r4,1204(sp)
   23e90:	1dc00017 	ldw	r23,0(r3)
   23e94:	1d800117 	ldw	r22,4(r3)
   23e98:	21000204 	addi	r4,r4,8
   23e9c:	00c00044 	movi	r3,1
   23ea0:	d9012d15 	stw	r4,1204(sp)
   23ea4:	bd84b03a 	or	r2,r23,r22
   23ea8:	d8012585 	stb	zero,1174(sp)
   23eac:	003f9f06 	br	23d2c <___vfprintf_internal_r+0x5e4>
   23eb0:	e013883a 	mov	r9,fp
   23eb4:	1839883a 	mov	fp,r3
   23eb8:	00c000f4 	movhi	r3,3
   23ebc:	18f9fb04 	addi	r3,r3,-6164
   23ec0:	d8c13615 	stw	r3,1240(sp)
   23ec4:	8080080c 	andi	r2,r16,32
   23ec8:	10007726 	beq	r2,zero,240a8 <___vfprintf_internal_r+0x960>
   23ecc:	d9012d17 	ldw	r4,1204(sp)
   23ed0:	25c00017 	ldw	r23,0(r4)
   23ed4:	25800117 	ldw	r22,4(r4)
   23ed8:	21000204 	addi	r4,r4,8
   23edc:	d9012d15 	stw	r4,1204(sp)
   23ee0:	8080004c 	andi	r2,r16,1
   23ee4:	1002c226 	beq	r2,zero,249f0 <___vfprintf_internal_r+0x12a8>
   23ee8:	bd84b03a 	or	r2,r23,r22
   23eec:	10035d26 	beq	r2,zero,24c64 <___vfprintf_internal_r+0x151c>
   23ef0:	00c00c04 	movi	r3,48
   23ef4:	d8c12505 	stb	r3,1172(sp)
   23ef8:	dc812545 	stb	r18,1173(sp)
   23efc:	84000094 	ori	r16,r16,2
   23f00:	00c00084 	movi	r3,2
   23f04:	d8012585 	stb	zero,1174(sp)
   23f08:	003f8806 	br	23d2c <___vfprintf_internal_r+0x5e4>
   23f0c:	ac800007 	ldb	r18,0(r21)
   23f10:	00c00a84 	movi	r3,42
   23f14:	adc00044 	addi	r23,r21,1
   23f18:	90c57526 	beq	r18,r3,254f0 <___vfprintf_internal_r+0x1da8>
   23f1c:	95bff404 	addi	r22,r18,-48
   23f20:	0009883a 	mov	r4,zero
   23f24:	9d84ff36 	bltu	r19,r22,25324 <___vfprintf_internal_r+0x1bdc>
   23f28:	01400284 	movi	r5,10
   23f2c:	00210140 	call	21014 <__mulsi3>
   23f30:	bc800007 	ldb	r18,0(r23)
   23f34:	b089883a 	add	r4,r22,r2
   23f38:	bdc00044 	addi	r23,r23,1
   23f3c:	95bff404 	addi	r22,r18,-48
   23f40:	9dbff92e 	bgeu	r19,r22,23f28 <___vfprintf_internal_r+0x7e0>
   23f44:	2007883a 	mov	r3,r4
   23f48:	20044316 	blt	r4,zero,25058 <___vfprintf_internal_r+0x1910>
   23f4c:	b82b883a 	mov	r21,r23
   23f50:	003e5a06 	br	238bc <___vfprintf_internal_r+0x174>
   23f54:	ac800007 	ldb	r18,0(r21)
   23f58:	01001b04 	movi	r4,108
   23f5c:	a805883a 	mov	r2,r21
   23f60:	91045526 	beq	r18,r4,250b8 <___vfprintf_internal_r+0x1970>
   23f64:	84000414 	ori	r16,r16,16
   23f68:	003e5306 	br	238b8 <___vfprintf_internal_r+0x170>
   23f6c:	8080080c 	andi	r2,r16,32
   23f70:	e013883a 	mov	r9,fp
   23f74:	10034026 	beq	r2,zero,24c78 <___vfprintf_internal_r+0x1530>
   23f78:	d9012d17 	ldw	r4,1204(sp)
   23f7c:	20800017 	ldw	r2,0(r4)
   23f80:	d9012c17 	ldw	r4,1200(sp)
   23f84:	2007d7fa 	srai	r3,r4,31
   23f88:	d9012d17 	ldw	r4,1204(sp)
   23f8c:	10c00115 	stw	r3,4(r2)
   23f90:	21000104 	addi	r4,r4,4
   23f94:	d9012d15 	stw	r4,1204(sp)
   23f98:	d9012c17 	ldw	r4,1200(sp)
   23f9c:	11000015 	stw	r4,0(r2)
   23fa0:	003e1f06 	br	23820 <___vfprintf_internal_r+0xd8>
   23fa4:	d9012d17 	ldw	r4,1204(sp)
   23fa8:	21000017 	ldw	r4,0(r4)
   23fac:	d9012e15 	stw	r4,1208(sp)
   23fb0:	d9012d17 	ldw	r4,1204(sp)
   23fb4:	20800104 	addi	r2,r4,4
   23fb8:	d9012e17 	ldw	r4,1208(sp)
   23fbc:	203ee716 	blt	r4,zero,23b5c <___vfprintf_internal_r+0x414>
   23fc0:	d8812d15 	stw	r2,1204(sp)
   23fc4:	ac800007 	ldb	r18,0(r21)
   23fc8:	003e3b06 	br	238b8 <___vfprintf_internal_r+0x170>
   23fcc:	e013883a 	mov	r9,fp
   23fd0:	1839883a 	mov	fp,r3
   23fd4:	d8c12d17 	ldw	r3,1204(sp)
   23fd8:	00800c04 	movi	r2,48
   23fdc:	010000f4 	movhi	r4,3
   23fe0:	213a0004 	addi	r4,r4,-6144
   23fe4:	1dc00017 	ldw	r23,0(r3)
   23fe8:	18c00104 	addi	r3,r3,4
   23fec:	d8812505 	stb	r2,1172(sp)
   23ff0:	00801e04 	movi	r2,120
   23ff4:	d8812545 	stb	r2,1173(sp)
   23ff8:	d8c12d15 	stw	r3,1204(sp)
   23ffc:	002d883a 	mov	r22,zero
   24000:	84000094 	ori	r16,r16,2
   24004:	d9013615 	stw	r4,1240(sp)
   24008:	00c00084 	movi	r3,2
   2400c:	04801e04 	movi	r18,120
   24010:	b805883a 	mov	r2,r23
   24014:	d8012585 	stb	zero,1174(sp)
   24018:	003f4406 	br	23d2c <___vfprintf_internal_r+0x5e4>
   2401c:	84000814 	ori	r16,r16,32
   24020:	ac800007 	ldb	r18,0(r21)
   24024:	003e2406 	br	238b8 <___vfprintf_internal_r+0x170>
   24028:	d8812d17 	ldw	r2,1204(sp)
   2402c:	d8012585 	stb	zero,1174(sp)
   24030:	e013883a 	mov	r9,fp
   24034:	14c00017 	ldw	r19,0(r2)
   24038:	1839883a 	mov	fp,r3
   2403c:	15c00104 	addi	r23,r2,4
   24040:	98045526 	beq	r19,zero,25198 <___vfprintf_internal_r+0x1a50>
   24044:	9809883a 	mov	r4,r19
   24048:	18043116 	blt	r3,zero,25110 <___vfprintf_internal_r+0x19c8>
   2404c:	000b883a 	mov	r5,zero
   24050:	180d883a 	mov	r6,r3
   24054:	da413c15 	stw	r9,1264(sp)
   24058:	00277ac0 	call	277ac <memchr>
   2405c:	da413c17 	ldw	r9,1264(sp)
   24060:	10047a26 	beq	r2,zero,2524c <___vfprintf_internal_r+0x1b04>
   24064:	14c5c83a 	sub	r2,r2,r19
   24068:	d8812b15 	stw	r2,1196(sp)
   2406c:	e083d40e 	bge	fp,r2,24fc0 <___vfprintf_internal_r+0x1878>
   24070:	df012815 	stw	fp,1184(sp)
   24074:	e004e416 	blt	fp,zero,25408 <___vfprintf_internal_r+0x1cc0>
   24078:	d8812583 	ldbu	r2,1174(sp)
   2407c:	df012b15 	stw	fp,1196(sp)
   24080:	ddc12d15 	stw	r23,1204(sp)
   24084:	d8013115 	stw	zero,1220(sp)
   24088:	003f3c06 	br	23d7c <___vfprintf_internal_r+0x634>
   2408c:	008000f4 	movhi	r2,3
   24090:	10ba0004 	addi	r2,r2,-6144
   24094:	d8813615 	stw	r2,1240(sp)
   24098:	8080080c 	andi	r2,r16,32
   2409c:	e013883a 	mov	r9,fp
   240a0:	1839883a 	mov	fp,r3
   240a4:	103f891e 	bne	r2,zero,23ecc <___vfprintf_internal_r+0x784>
   240a8:	8080040c 	andi	r2,r16,16
   240ac:	1002c326 	beq	r2,zero,24bbc <___vfprintf_internal_r+0x1474>
   240b0:	d8812d17 	ldw	r2,1204(sp)
   240b4:	002d883a 	mov	r22,zero
   240b8:	15c00017 	ldw	r23,0(r2)
   240bc:	10800104 	addi	r2,r2,4
   240c0:	d8812d15 	stw	r2,1204(sp)
   240c4:	003f8606 	br	23ee0 <___vfprintf_internal_r+0x798>
   240c8:	84001014 	ori	r16,r16,64
   240cc:	ac800007 	ldb	r18,0(r21)
   240d0:	003df906 	br	238b8 <___vfprintf_internal_r+0x170>
   240d4:	d8812587 	ldb	r2,1174(sp)
   240d8:	1002e51e 	bne	r2,zero,24c70 <___vfprintf_internal_r+0x1528>
   240dc:	00800804 	movi	r2,32
   240e0:	d8812585 	stb	r2,1174(sp)
   240e4:	ac800007 	ldb	r18,0(r21)
   240e8:	003df306 	br	238b8 <___vfprintf_internal_r+0x170>
   240ec:	84000054 	ori	r16,r16,1
   240f0:	ac800007 	ldb	r18,0(r21)
   240f4:	003df006 	br	238b8 <___vfprintf_internal_r+0x170>
   240f8:	84002014 	ori	r16,r16,128
   240fc:	ac800007 	ldb	r18,0(r21)
   24100:	003ded06 	br	238b8 <___vfprintf_internal_r+0x170>
   24104:	0009883a 	mov	r4,zero
   24108:	95bff404 	addi	r22,r18,-48
   2410c:	182f883a 	mov	r23,r3
   24110:	01400284 	movi	r5,10
   24114:	00210140 	call	21014 <__mulsi3>
   24118:	ac800007 	ldb	r18,0(r21)
   2411c:	1589883a 	add	r4,r2,r22
   24120:	ad400044 	addi	r21,r21,1
   24124:	95bff404 	addi	r22,r18,-48
   24128:	9dbff92e 	bgeu	r19,r22,24110 <___vfprintf_internal_r+0x9c8>
   2412c:	b807883a 	mov	r3,r23
   24130:	d9012e15 	stw	r4,1208(sp)
   24134:	003de106 	br	238bc <___vfprintf_internal_r+0x174>
   24138:	00800ac4 	movi	r2,43
   2413c:	d8812585 	stb	r2,1174(sp)
   24140:	ac800007 	ldb	r18,0(r21)
   24144:	003ddc06 	br	238b8 <___vfprintf_internal_r+0x170>
   24148:	d8c12d17 	ldw	r3,1204(sp)
   2414c:	d9012d17 	ldw	r4,1204(sp)
   24150:	e013883a 	mov	r9,fp
   24154:	18800017 	ldw	r2,0(r3)
   24158:	21000104 	addi	r4,r4,4
   2415c:	00c00044 	movi	r3,1
   24160:	d8c12815 	stw	r3,1184(sp)
   24164:	d8012585 	stb	zero,1174(sp)
   24168:	d8810405 	stb	r2,1040(sp)
   2416c:	d9012d15 	stw	r4,1204(sp)
   24170:	d8c12b15 	stw	r3,1196(sp)
   24174:	dcc10404 	addi	r19,sp,1040
   24178:	003dda06 	br	238e4 <___vfprintf_internal_r+0x19c>
   2417c:	e013883a 	mov	r9,fp
   24180:	1839883a 	mov	fp,r3
   24184:	003ed806 	br	23ce8 <___vfprintf_internal_r+0x5a0>
   24188:	e013883a 	mov	r9,fp
   2418c:	1839883a 	mov	fp,r3
   24190:	003f2d06 	br	23e48 <___vfprintf_internal_r+0x700>
   24194:	e013883a 	mov	r9,fp
   24198:	1839883a 	mov	fp,r3
   2419c:	003f3806 	br	23e80 <___vfprintf_internal_r+0x738>
   241a0:	da011d17 	ldw	r8,1140(sp)
   241a4:	d8c11c17 	ldw	r3,1136(sp)
   241a8:	d8812587 	ldb	r2,1174(sp)
   241ac:	10000b26 	beq	r2,zero,241dc <___vfprintf_internal_r+0xa94>
   241b0:	d8812584 	addi	r2,sp,1174
   241b4:	48800015 	stw	r2,0(r9)
   241b8:	00800044 	movi	r2,1
   241bc:	48800115 	stw	r2,4(r9)
   241c0:	4091883a 	add	r8,r8,r2
   241c4:	1887883a 	add	r3,r3,r2
   241c8:	da011d15 	stw	r8,1140(sp)
   241cc:	d8c11c15 	stw	r3,1136(sp)
   241d0:	008001c4 	movi	r2,7
   241d4:	10c18e16 	blt	r2,r3,24810 <___vfprintf_internal_r+0x10c8>
   241d8:	4a400204 	addi	r9,r9,8
   241dc:	d9012a17 	ldw	r4,1192(sp)
   241e0:	20000b26 	beq	r4,zero,24210 <___vfprintf_internal_r+0xac8>
   241e4:	d8812504 	addi	r2,sp,1172
   241e8:	48800015 	stw	r2,0(r9)
   241ec:	00800084 	movi	r2,2
   241f0:	48800115 	stw	r2,4(r9)
   241f4:	4091883a 	add	r8,r8,r2
   241f8:	18c00044 	addi	r3,r3,1
   241fc:	da011d15 	stw	r8,1140(sp)
   24200:	d8c11c15 	stw	r3,1136(sp)
   24204:	008001c4 	movi	r2,7
   24208:	10c17816 	blt	r2,r3,247ec <___vfprintf_internal_r+0x10a4>
   2420c:	4a400204 	addi	r9,r9,8
   24210:	d9012f17 	ldw	r4,1212(sp)
   24214:	00802004 	movi	r2,128
   24218:	2080fc26 	beq	r4,r2,2460c <___vfprintf_internal_r+0xec4>
   2421c:	d8813117 	ldw	r2,1220(sp)
   24220:	d9012b17 	ldw	r4,1196(sp)
   24224:	112fc83a 	sub	r23,r2,r4
   24228:	05c02a0e 	bge	zero,r23,242d4 <___vfprintf_internal_r+0xb8c>
   2422c:	07000404 	movi	fp,16
   24230:	050000f4 	movhi	r20,3
   24234:	a53a0b84 	addi	r20,r20,-6098
   24238:	e5c01d0e 	bge	fp,r23,242b0 <___vfprintf_internal_r+0xb68>
   2423c:	dc812a15 	stw	r18,1192(sp)
   24240:	058001c4 	movi	r22,7
   24244:	a025883a 	mov	r18,r20
   24248:	8029883a 	mov	r20,r16
   2424c:	dc012917 	ldw	r16,1188(sp)
   24250:	00000306 	br	24260 <___vfprintf_internal_r+0xb18>
   24254:	bdfffc04 	addi	r23,r23,-16
   24258:	4a400204 	addi	r9,r9,8
   2425c:	e5c0110e 	bge	fp,r23,242a4 <___vfprintf_internal_r+0xb5c>
   24260:	4c800015 	stw	r18,0(r9)
   24264:	4f000115 	stw	fp,4(r9)
   24268:	42000404 	addi	r8,r8,16
   2426c:	18c00044 	addi	r3,r3,1
   24270:	da011d15 	stw	r8,1140(sp)
   24274:	d8c11c15 	stw	r3,1136(sp)
   24278:	b0fff60e 	bge	r22,r3,24254 <___vfprintf_internal_r+0xb0c>
   2427c:	8809883a 	mov	r4,r17
   24280:	800b883a 	mov	r5,r16
   24284:	d9811b04 	addi	r6,sp,1132
   24288:	00237140 	call	23714 <__sprint_r>
   2428c:	103e741e 	bne	r2,zero,23c60 <___vfprintf_internal_r+0x518>
   24290:	bdfffc04 	addi	r23,r23,-16
   24294:	da011d17 	ldw	r8,1140(sp)
   24298:	d8c11c17 	ldw	r3,1136(sp)
   2429c:	da400404 	addi	r9,sp,16
   242a0:	e5ffef16 	blt	fp,r23,24260 <___vfprintf_internal_r+0xb18>
   242a4:	a021883a 	mov	r16,r20
   242a8:	9029883a 	mov	r20,r18
   242ac:	dc812a17 	ldw	r18,1192(sp)
   242b0:	4d000015 	stw	r20,0(r9)
   242b4:	4dc00115 	stw	r23,4(r9)
   242b8:	45d1883a 	add	r8,r8,r23
   242bc:	18c00044 	addi	r3,r3,1
   242c0:	da011d15 	stw	r8,1140(sp)
   242c4:	d8c11c15 	stw	r3,1136(sp)
   242c8:	008001c4 	movi	r2,7
   242cc:	10c13e16 	blt	r2,r3,247c8 <___vfprintf_internal_r+0x1080>
   242d0:	4a400204 	addi	r9,r9,8
   242d4:	8080400c 	andi	r2,r16,256
   242d8:	1000831e 	bne	r2,zero,244e8 <___vfprintf_internal_r+0xda0>
   242dc:	d8812b17 	ldw	r2,1196(sp)
   242e0:	4cc00015 	stw	r19,0(r9)
   242e4:	48800115 	stw	r2,4(r9)
   242e8:	4091883a 	add	r8,r8,r2
   242ec:	18c00044 	addi	r3,r3,1
   242f0:	da011d15 	stw	r8,1140(sp)
   242f4:	d8c11c15 	stw	r3,1136(sp)
   242f8:	008001c4 	movi	r2,7
   242fc:	10c05316 	blt	r2,r3,2444c <___vfprintf_internal_r+0xd04>
   24300:	4a400204 	addi	r9,r9,8
   24304:	8400010c 	andi	r16,r16,4
   24308:	80002e26 	beq	r16,zero,243c4 <___vfprintf_internal_r+0xc7c>
   2430c:	d8812e17 	ldw	r2,1208(sp)
   24310:	d8c12817 	ldw	r3,1184(sp)
   24314:	10e1c83a 	sub	r16,r2,r3
   24318:	04002a0e 	bge	zero,r16,243c4 <___vfprintf_internal_r+0xc7c>
   2431c:	04800404 	movi	r18,16
   24320:	d8c11c17 	ldw	r3,1136(sp)
   24324:	05c000f4 	movhi	r23,3
   24328:	bdfa0784 	addi	r23,r23,-6114
   2432c:	9400170e 	bge	r18,r16,2438c <___vfprintf_internal_r+0xc44>
   24330:	04c001c4 	movi	r19,7
   24334:	dd012917 	ldw	r20,1188(sp)
   24338:	00000306 	br	24348 <___vfprintf_internal_r+0xc00>
   2433c:	843ffc04 	addi	r16,r16,-16
   24340:	4a400204 	addi	r9,r9,8
   24344:	9400110e 	bge	r18,r16,2438c <___vfprintf_internal_r+0xc44>
   24348:	4dc00015 	stw	r23,0(r9)
   2434c:	4c800115 	stw	r18,4(r9)
   24350:	42000404 	addi	r8,r8,16
   24354:	18c00044 	addi	r3,r3,1
   24358:	da011d15 	stw	r8,1140(sp)
   2435c:	d8c11c15 	stw	r3,1136(sp)
   24360:	98fff60e 	bge	r19,r3,2433c <___vfprintf_internal_r+0xbf4>
   24364:	8809883a 	mov	r4,r17
   24368:	a00b883a 	mov	r5,r20
   2436c:	d9811b04 	addi	r6,sp,1132
   24370:	00237140 	call	23714 <__sprint_r>
   24374:	103e3a1e 	bne	r2,zero,23c60 <___vfprintf_internal_r+0x518>
   24378:	843ffc04 	addi	r16,r16,-16
   2437c:	da011d17 	ldw	r8,1140(sp)
   24380:	d8c11c17 	ldw	r3,1136(sp)
   24384:	da400404 	addi	r9,sp,16
   24388:	943fef16 	blt	r18,r16,24348 <___vfprintf_internal_r+0xc00>
   2438c:	4dc00015 	stw	r23,0(r9)
   24390:	4c000115 	stw	r16,4(r9)
   24394:	8211883a 	add	r8,r16,r8
   24398:	18c00044 	addi	r3,r3,1
   2439c:	da011d15 	stw	r8,1140(sp)
   243a0:	d8c11c15 	stw	r3,1136(sp)
   243a4:	008001c4 	movi	r2,7
   243a8:	10c0060e 	bge	r2,r3,243c4 <___vfprintf_internal_r+0xc7c>
   243ac:	d9412917 	ldw	r5,1188(sp)
   243b0:	8809883a 	mov	r4,r17
   243b4:	d9811b04 	addi	r6,sp,1132
   243b8:	00237140 	call	23714 <__sprint_r>
   243bc:	103e281e 	bne	r2,zero,23c60 <___vfprintf_internal_r+0x518>
   243c0:	da011d17 	ldw	r8,1140(sp)
   243c4:	dd012817 	ldw	r20,1184(sp)
   243c8:	d9012e17 	ldw	r4,1208(sp)
   243cc:	a100010e 	bge	r20,r4,243d4 <___vfprintf_internal_r+0xc8c>
   243d0:	2029883a 	mov	r20,r4
   243d4:	d8812c17 	ldw	r2,1200(sp)
   243d8:	1505883a 	add	r2,r2,r20
   243dc:	d8812c15 	stw	r2,1200(sp)
   243e0:	4000b91e 	bne	r8,zero,246c8 <___vfprintf_internal_r+0xf80>
   243e4:	d8011c15 	stw	zero,1136(sp)
   243e8:	a8800007 	ldb	r2,0(r21)
   243ec:	da400404 	addi	r9,sp,16
   243f0:	103d0d1e 	bne	r2,zero,23828 <___vfprintf_internal_r+0xe0>
   243f4:	a825883a 	mov	r18,r21
   243f8:	003d2306 	br	23888 <___vfprintf_internal_r+0x140>
   243fc:	d9412917 	ldw	r5,1188(sp)
   24400:	8809883a 	mov	r4,r17
   24404:	d9811b04 	addi	r6,sp,1132
   24408:	00237140 	call	23714 <__sprint_r>
   2440c:	103e141e 	bne	r2,zero,23c60 <___vfprintf_internal_r+0x518>
   24410:	da011d17 	ldw	r8,1140(sp)
   24414:	da400404 	addi	r9,sp,16
   24418:	8080004c 	andi	r2,r16,1
   2441c:	103fb926 	beq	r2,zero,24304 <___vfprintf_internal_r+0xbbc>
   24420:	d8c11c17 	ldw	r3,1136(sp)
   24424:	d9013717 	ldw	r4,1244(sp)
   24428:	00800044 	movi	r2,1
   2442c:	48800115 	stw	r2,4(r9)
   24430:	49000015 	stw	r4,0(r9)
   24434:	4091883a 	add	r8,r8,r2
   24438:	1887883a 	add	r3,r3,r2
   2443c:	da011d15 	stw	r8,1140(sp)
   24440:	d8c11c15 	stw	r3,1136(sp)
   24444:	008001c4 	movi	r2,7
   24448:	10ffad0e 	bge	r2,r3,24300 <___vfprintf_internal_r+0xbb8>
   2444c:	d9412917 	ldw	r5,1188(sp)
   24450:	8809883a 	mov	r4,r17
   24454:	d9811b04 	addi	r6,sp,1132
   24458:	00237140 	call	23714 <__sprint_r>
   2445c:	103e001e 	bne	r2,zero,23c60 <___vfprintf_internal_r+0x518>
   24460:	da400404 	addi	r9,sp,16
   24464:	da011d17 	ldw	r8,1140(sp)
   24468:	003fa606 	br	24304 <___vfprintf_internal_r+0xbbc>
   2446c:	18803fcc 	andi	r2,r3,255
   24470:	00c00044 	movi	r3,1
   24474:	10c10126 	beq	r2,r3,2487c <___vfprintf_internal_r+0x1134>
   24478:	00c00084 	movi	r3,2
   2447c:	10c0ed26 	beq	r2,r3,24834 <___vfprintf_internal_r+0x10ec>
   24480:	d8c10dc4 	addi	r3,sp,1079
   24484:	b808d0fa 	srli	r4,r23,3
   24488:	b00a977a 	slli	r5,r22,29
   2448c:	b02cd0fa 	srli	r22,r22,3
   24490:	bdc001cc 	andi	r23,r23,7
   24494:	b8800c04 	addi	r2,r23,48
   24498:	292eb03a 	or	r23,r5,r4
   2449c:	18800005 	stb	r2,0(r3)
   244a0:	bd88b03a 	or	r4,r23,r22
   244a4:	1827883a 	mov	r19,r3
   244a8:	18ffffc4 	addi	r3,r3,-1
   244ac:	203ff51e 	bne	r4,zero,24484 <___vfprintf_internal_r+0xd3c>
   244b0:	8100004c 	andi	r4,r16,1
   244b4:	980b883a 	mov	r5,r19
   244b8:	20000726 	beq	r4,zero,244d8 <___vfprintf_internal_r+0xd90>
   244bc:	10803fcc 	andi	r2,r2,255
   244c0:	1080201c 	xori	r2,r2,128
   244c4:	10bfe004 	addi	r2,r2,-128
   244c8:	01000c04 	movi	r4,48
   244cc:	11000226 	beq	r2,r4,244d8 <___vfprintf_internal_r+0xd90>
   244d0:	1827883a 	mov	r19,r3
   244d4:	293fffc5 	stb	r4,-1(r5)
   244d8:	d8812717 	ldw	r2,1180(sp)
   244dc:	14c5c83a 	sub	r2,r2,r19
   244e0:	d8812b15 	stw	r2,1196(sp)
   244e4:	003e1f06 	br	23d64 <___vfprintf_internal_r+0x61c>
   244e8:	00801944 	movi	r2,101
   244ec:	14807c0e 	bge	r2,r18,246e0 <___vfprintf_internal_r+0xf98>
   244f0:	d9013317 	ldw	r4,1228(sp)
   244f4:	d9413417 	ldw	r5,1232(sp)
   244f8:	000d883a 	mov	r6,zero
   244fc:	000f883a 	mov	r7,zero
   24500:	d8c13b15 	stw	r3,1260(sp)
   24504:	da013a15 	stw	r8,1256(sp)
   24508:	da413c15 	stw	r9,1264(sp)
   2450c:	002a7d40 	call	2a7d4 <__eqdf2>
   24510:	d8c13b17 	ldw	r3,1260(sp)
   24514:	da013a17 	ldw	r8,1256(sp)
   24518:	da413c17 	ldw	r9,1264(sp)
   2451c:	1001001e 	bne	r2,zero,24920 <___vfprintf_internal_r+0x11d8>
   24520:	008000f4 	movhi	r2,3
   24524:	10ba0704 	addi	r2,r2,-6116
   24528:	48800015 	stw	r2,0(r9)
   2452c:	00800044 	movi	r2,1
   24530:	48800115 	stw	r2,4(r9)
   24534:	4091883a 	add	r8,r8,r2
   24538:	1887883a 	add	r3,r3,r2
   2453c:	da011d15 	stw	r8,1140(sp)
   24540:	d8c11c15 	stw	r3,1136(sp)
   24544:	008001c4 	movi	r2,7
   24548:	10c20316 	blt	r2,r3,24d58 <___vfprintf_internal_r+0x1610>
   2454c:	4a400204 	addi	r9,r9,8
   24550:	d8812417 	ldw	r2,1168(sp)
   24554:	d8c13217 	ldw	r3,1224(sp)
   24558:	10c00216 	blt	r2,r3,24564 <___vfprintf_internal_r+0xe1c>
   2455c:	8080004c 	andi	r2,r16,1
   24560:	103f6826 	beq	r2,zero,24304 <___vfprintf_internal_r+0xbbc>
   24564:	d8c11c17 	ldw	r3,1136(sp)
   24568:	d9013717 	ldw	r4,1244(sp)
   2456c:	00800044 	movi	r2,1
   24570:	48800115 	stw	r2,4(r9)
   24574:	49000015 	stw	r4,0(r9)
   24578:	4091883a 	add	r8,r8,r2
   2457c:	1887883a 	add	r3,r3,r2
   24580:	da011d15 	stw	r8,1140(sp)
   24584:	d8c11c15 	stw	r3,1136(sp)
   24588:	008001c4 	movi	r2,7
   2458c:	10c2ce16 	blt	r2,r3,250c8 <___vfprintf_internal_r+0x1980>
   24590:	4a400204 	addi	r9,r9,8
   24594:	d8813217 	ldw	r2,1224(sp)
   24598:	14bfffc4 	addi	r18,r2,-1
   2459c:	04bf590e 	bge	zero,r18,24304 <___vfprintf_internal_r+0xbbc>
   245a0:	04c00404 	movi	r19,16
   245a4:	d8c11c17 	ldw	r3,1136(sp)
   245a8:	050000f4 	movhi	r20,3
   245ac:	a53a0b84 	addi	r20,r20,-6098
   245b0:	9c818a0e 	bge	r19,r18,24bdc <___vfprintf_internal_r+0x1494>
   245b4:	058001c4 	movi	r22,7
   245b8:	ddc12917 	ldw	r23,1188(sp)
   245bc:	00000306 	br	245cc <___vfprintf_internal_r+0xe84>
   245c0:	4a400204 	addi	r9,r9,8
   245c4:	94bffc04 	addi	r18,r18,-16
   245c8:	9c81840e 	bge	r19,r18,24bdc <___vfprintf_internal_r+0x1494>
   245cc:	4d000015 	stw	r20,0(r9)
   245d0:	4cc00115 	stw	r19,4(r9)
   245d4:	42000404 	addi	r8,r8,16
   245d8:	18c00044 	addi	r3,r3,1
   245dc:	da011d15 	stw	r8,1140(sp)
   245e0:	d8c11c15 	stw	r3,1136(sp)
   245e4:	b0fff60e 	bge	r22,r3,245c0 <___vfprintf_internal_r+0xe78>
   245e8:	8809883a 	mov	r4,r17
   245ec:	b80b883a 	mov	r5,r23
   245f0:	d9811b04 	addi	r6,sp,1132
   245f4:	00237140 	call	23714 <__sprint_r>
   245f8:	103d991e 	bne	r2,zero,23c60 <___vfprintf_internal_r+0x518>
   245fc:	da011d17 	ldw	r8,1140(sp)
   24600:	d8c11c17 	ldw	r3,1136(sp)
   24604:	da400404 	addi	r9,sp,16
   24608:	003fee06 	br	245c4 <___vfprintf_internal_r+0xe7c>
   2460c:	d8812e17 	ldw	r2,1208(sp)
   24610:	d9012817 	ldw	r4,1184(sp)
   24614:	112fc83a 	sub	r23,r2,r4
   24618:	05ff000e 	bge	zero,r23,2421c <___vfprintf_internal_r+0xad4>
   2461c:	07000404 	movi	fp,16
   24620:	050000f4 	movhi	r20,3
   24624:	a53a0b84 	addi	r20,r20,-6098
   24628:	e5c01d0e 	bge	fp,r23,246a0 <___vfprintf_internal_r+0xf58>
   2462c:	dc812a15 	stw	r18,1192(sp)
   24630:	058001c4 	movi	r22,7
   24634:	a025883a 	mov	r18,r20
   24638:	8029883a 	mov	r20,r16
   2463c:	dc012917 	ldw	r16,1188(sp)
   24640:	00000306 	br	24650 <___vfprintf_internal_r+0xf08>
   24644:	bdfffc04 	addi	r23,r23,-16
   24648:	4a400204 	addi	r9,r9,8
   2464c:	e5c0110e 	bge	fp,r23,24694 <___vfprintf_internal_r+0xf4c>
   24650:	4c800015 	stw	r18,0(r9)
   24654:	4f000115 	stw	fp,4(r9)
   24658:	42000404 	addi	r8,r8,16
   2465c:	18c00044 	addi	r3,r3,1
   24660:	da011d15 	stw	r8,1140(sp)
   24664:	d8c11c15 	stw	r3,1136(sp)
   24668:	b0fff60e 	bge	r22,r3,24644 <___vfprintf_internal_r+0xefc>
   2466c:	8809883a 	mov	r4,r17
   24670:	800b883a 	mov	r5,r16
   24674:	d9811b04 	addi	r6,sp,1132
   24678:	00237140 	call	23714 <__sprint_r>
   2467c:	103d781e 	bne	r2,zero,23c60 <___vfprintf_internal_r+0x518>
   24680:	bdfffc04 	addi	r23,r23,-16
   24684:	da011d17 	ldw	r8,1140(sp)
   24688:	d8c11c17 	ldw	r3,1136(sp)
   2468c:	da400404 	addi	r9,sp,16
   24690:	e5ffef16 	blt	fp,r23,24650 <___vfprintf_internal_r+0xf08>
   24694:	a021883a 	mov	r16,r20
   24698:	9029883a 	mov	r20,r18
   2469c:	dc812a17 	ldw	r18,1192(sp)
   246a0:	4d000015 	stw	r20,0(r9)
   246a4:	4dc00115 	stw	r23,4(r9)
   246a8:	45d1883a 	add	r8,r8,r23
   246ac:	18c00044 	addi	r3,r3,1
   246b0:	da011d15 	stw	r8,1140(sp)
   246b4:	d8c11c15 	stw	r3,1136(sp)
   246b8:	008001c4 	movi	r2,7
   246bc:	10c13616 	blt	r2,r3,24b98 <___vfprintf_internal_r+0x1450>
   246c0:	4a400204 	addi	r9,r9,8
   246c4:	003ed506 	br	2421c <___vfprintf_internal_r+0xad4>
   246c8:	d9412917 	ldw	r5,1188(sp)
   246cc:	8809883a 	mov	r4,r17
   246d0:	d9811b04 	addi	r6,sp,1132
   246d4:	00237140 	call	23714 <__sprint_r>
   246d8:	103f4226 	beq	r2,zero,243e4 <___vfprintf_internal_r+0xc9c>
   246dc:	003d6006 	br	23c60 <___vfprintf_internal_r+0x518>
   246e0:	d9013217 	ldw	r4,1224(sp)
   246e4:	00800044 	movi	r2,1
   246e8:	4cc00015 	stw	r19,0(r9)
   246ec:	1101000e 	bge	r2,r4,24af0 <___vfprintf_internal_r+0x13a8>
   246f0:	00800044 	movi	r2,1
   246f4:	48800115 	stw	r2,4(r9)
   246f8:	4091883a 	add	r8,r8,r2
   246fc:	1887883a 	add	r3,r3,r2
   24700:	da011d15 	stw	r8,1140(sp)
   24704:	d8c11c15 	stw	r3,1136(sp)
   24708:	008001c4 	movi	r2,7
   2470c:	10c10c16 	blt	r2,r3,24b40 <___vfprintf_internal_r+0x13f8>
   24710:	4a400204 	addi	r9,r9,8
   24714:	d8813717 	ldw	r2,1244(sp)
   24718:	48800015 	stw	r2,0(r9)
   2471c:	00800044 	movi	r2,1
   24720:	48800115 	stw	r2,4(r9)
   24724:	4091883a 	add	r8,r8,r2
   24728:	1887883a 	add	r3,r3,r2
   2472c:	da011d15 	stw	r8,1140(sp)
   24730:	d8c11c15 	stw	r3,1136(sp)
   24734:	008001c4 	movi	r2,7
   24738:	10c10a16 	blt	r2,r3,24b64 <___vfprintf_internal_r+0x141c>
   2473c:	4c800204 	addi	r18,r9,8
   24740:	d9013317 	ldw	r4,1228(sp)
   24744:	d9413417 	ldw	r5,1232(sp)
   24748:	000d883a 	mov	r6,zero
   2474c:	000f883a 	mov	r7,zero
   24750:	d8c13b15 	stw	r3,1260(sp)
   24754:	da013a15 	stw	r8,1256(sp)
   24758:	002a8300 	call	2a830 <__nedf2>
   2475c:	d8c13b17 	ldw	r3,1260(sp)
   24760:	da013a17 	ldw	r8,1256(sp)
   24764:	1000ba26 	beq	r2,zero,24a50 <___vfprintf_internal_r+0x1308>
   24768:	d9013217 	ldw	r4,1224(sp)
   2476c:	9cc00044 	addi	r19,r19,1
   24770:	94c00015 	stw	r19,0(r18)
   24774:	20bfffc4 	addi	r2,r4,-1
   24778:	90800115 	stw	r2,4(r18)
   2477c:	4091883a 	add	r8,r8,r2
   24780:	18c00044 	addi	r3,r3,1
   24784:	da011d15 	stw	r8,1140(sp)
   24788:	d8c11c15 	stw	r3,1136(sp)
   2478c:	008001c4 	movi	r2,7
   24790:	10c0e216 	blt	r2,r3,24b1c <___vfprintf_internal_r+0x13d4>
   24794:	94800204 	addi	r18,r18,8
   24798:	d9013517 	ldw	r4,1236(sp)
   2479c:	d8811fc4 	addi	r2,sp,1151
   247a0:	90800015 	stw	r2,0(r18)
   247a4:	91000115 	stw	r4,4(r18)
   247a8:	4111883a 	add	r8,r8,r4
   247ac:	18c00044 	addi	r3,r3,1
   247b0:	da011d15 	stw	r8,1140(sp)
   247b4:	d8c11c15 	stw	r3,1136(sp)
   247b8:	008001c4 	movi	r2,7
   247bc:	10ff2316 	blt	r2,r3,2444c <___vfprintf_internal_r+0xd04>
   247c0:	92400204 	addi	r9,r18,8
   247c4:	003ecf06 	br	24304 <___vfprintf_internal_r+0xbbc>
   247c8:	d9412917 	ldw	r5,1188(sp)
   247cc:	8809883a 	mov	r4,r17
   247d0:	d9811b04 	addi	r6,sp,1132
   247d4:	00237140 	call	23714 <__sprint_r>
   247d8:	103d211e 	bne	r2,zero,23c60 <___vfprintf_internal_r+0x518>
   247dc:	da011d17 	ldw	r8,1140(sp)
   247e0:	d8c11c17 	ldw	r3,1136(sp)
   247e4:	da400404 	addi	r9,sp,16
   247e8:	003eba06 	br	242d4 <___vfprintf_internal_r+0xb8c>
   247ec:	d9412917 	ldw	r5,1188(sp)
   247f0:	8809883a 	mov	r4,r17
   247f4:	d9811b04 	addi	r6,sp,1132
   247f8:	00237140 	call	23714 <__sprint_r>
   247fc:	103d181e 	bne	r2,zero,23c60 <___vfprintf_internal_r+0x518>
   24800:	da011d17 	ldw	r8,1140(sp)
   24804:	d8c11c17 	ldw	r3,1136(sp)
   24808:	da400404 	addi	r9,sp,16
   2480c:	003e8006 	br	24210 <___vfprintf_internal_r+0xac8>
   24810:	d9412917 	ldw	r5,1188(sp)
   24814:	8809883a 	mov	r4,r17
   24818:	d9811b04 	addi	r6,sp,1132
   2481c:	00237140 	call	23714 <__sprint_r>
   24820:	103d0f1e 	bne	r2,zero,23c60 <___vfprintf_internal_r+0x518>
   24824:	da011d17 	ldw	r8,1140(sp)
   24828:	d8c11c17 	ldw	r3,1136(sp)
   2482c:	da400404 	addi	r9,sp,16
   24830:	003e6a06 	br	241dc <___vfprintf_internal_r+0xa94>
   24834:	d9413617 	ldw	r5,1240(sp)
   24838:	d8810dc4 	addi	r2,sp,1079
   2483c:	b8c003cc 	andi	r3,r23,15
   24840:	b008973a 	slli	r4,r22,28
   24844:	28c7883a 	add	r3,r5,r3
   24848:	b82ed13a 	srli	r23,r23,4
   2484c:	18c00003 	ldbu	r3,0(r3)
   24850:	b02cd13a 	srli	r22,r22,4
   24854:	25eeb03a 	or	r23,r4,r23
   24858:	10c00005 	stb	r3,0(r2)
   2485c:	bd86b03a 	or	r3,r23,r22
   24860:	1027883a 	mov	r19,r2
   24864:	10bfffc4 	addi	r2,r2,-1
   24868:	183ff41e 	bne	r3,zero,2483c <___vfprintf_internal_r+0x10f4>
   2486c:	003f1a06 	br	244d8 <___vfprintf_internal_r+0xd90>
   24870:	d8012b15 	stw	zero,1196(sp)
   24874:	dcc10e04 	addi	r19,sp,1080
   24878:	003d3a06 	br	23d64 <___vfprintf_internal_r+0x61c>
   2487c:	b0025426 	beq	r22,zero,251d0 <___vfprintf_internal_r+0x1a88>
   24880:	b807883a 	mov	r3,r23
   24884:	d8810dc4 	addi	r2,sp,1079
   24888:	882f883a 	mov	r23,r17
   2488c:	04c00244 	movi	r19,9
   24890:	8023883a 	mov	r17,r16
   24894:	da412815 	stw	r9,1184(sp)
   24898:	1821883a 	mov	r16,r3
   2489c:	8009883a 	mov	r4,r16
   248a0:	b00b883a 	mov	r5,r22
   248a4:	01800284 	movi	r6,10
   248a8:	000f883a 	mov	r7,zero
   248ac:	1029883a 	mov	r20,r2
   248b0:	002990c0 	call	2990c <__umoddi3>
   248b4:	10800c04 	addi	r2,r2,48
   248b8:	8009883a 	mov	r4,r16
   248bc:	b00b883a 	mov	r5,r22
   248c0:	a0800005 	stb	r2,0(r20)
   248c4:	01800284 	movi	r6,10
   248c8:	000f883a 	mov	r7,zero
   248cc:	00292bc0 	call	292bc <__udivdi3>
   248d0:	1021883a 	mov	r16,r2
   248d4:	182d883a 	mov	r22,r3
   248d8:	a0bfffc4 	addi	r2,r20,-1
   248dc:	183fef1e 	bne	r3,zero,2489c <___vfprintf_internal_r+0x1154>
   248e0:	9c3fee36 	bltu	r19,r16,2489c <___vfprintf_internal_r+0x1154>
   248e4:	da412817 	ldw	r9,1184(sp)
   248e8:	8005883a 	mov	r2,r16
   248ec:	8821883a 	mov	r16,r17
   248f0:	b823883a 	mov	r17,r23
   248f4:	102f883a 	mov	r23,r2
   248f8:	d8812717 	ldw	r2,1180(sp)
   248fc:	a4ffffc4 	addi	r19,r20,-1
   24900:	bdc00c04 	addi	r23,r23,48
   24904:	14c5c83a 	sub	r2,r2,r19
   24908:	a5ffffc5 	stb	r23,-1(r20)
   2490c:	d8812b15 	stw	r2,1196(sp)
   24910:	003d1406 	br	23d64 <___vfprintf_internal_r+0x61c>
   24914:	00c00044 	movi	r3,1
   24918:	bd84b03a 	or	r2,r23,r22
   2491c:	003d0306 	br	23d2c <___vfprintf_internal_r+0x5e4>
   24920:	dc812417 	ldw	r18,1168(sp)
   24924:	0481140e 	bge	zero,r18,24d78 <___vfprintf_internal_r+0x1630>
   24928:	d9013217 	ldw	r4,1224(sp)
   2492c:	4cc00015 	stw	r19,0(r9)
   24930:	9100ec16 	blt	r18,r4,24ce4 <___vfprintf_internal_r+0x159c>
   24934:	49000115 	stw	r4,4(r9)
   24938:	4111883a 	add	r8,r8,r4
   2493c:	18c00044 	addi	r3,r3,1
   24940:	da011d15 	stw	r8,1140(sp)
   24944:	d8c11c15 	stw	r3,1136(sp)
   24948:	008001c4 	movi	r2,7
   2494c:	10c23616 	blt	r2,r3,25228 <___vfprintf_internal_r+0x1ae0>
   24950:	4a400204 	addi	r9,r9,8
   24954:	d8813217 	ldw	r2,1224(sp)
   24958:	90a5c83a 	sub	r18,r18,r2
   2495c:	04beae0e 	bge	zero,r18,24418 <___vfprintf_internal_r+0xcd0>
   24960:	04c00404 	movi	r19,16
   24964:	d8c11c17 	ldw	r3,1136(sp)
   24968:	050000f4 	movhi	r20,3
   2496c:	a53a0b84 	addi	r20,r20,-6098
   24970:	9c81dd0e 	bge	r19,r18,250e8 <___vfprintf_internal_r+0x19a0>
   24974:	058001c4 	movi	r22,7
   24978:	ddc12917 	ldw	r23,1188(sp)
   2497c:	00000306 	br	2498c <___vfprintf_internal_r+0x1244>
   24980:	4a400204 	addi	r9,r9,8
   24984:	94bffc04 	addi	r18,r18,-16
   24988:	9c81d70e 	bge	r19,r18,250e8 <___vfprintf_internal_r+0x19a0>
   2498c:	4d000015 	stw	r20,0(r9)
   24990:	4cc00115 	stw	r19,4(r9)
   24994:	42000404 	addi	r8,r8,16
   24998:	18c00044 	addi	r3,r3,1
   2499c:	da011d15 	stw	r8,1140(sp)
   249a0:	d8c11c15 	stw	r3,1136(sp)
   249a4:	b0fff60e 	bge	r22,r3,24980 <___vfprintf_internal_r+0x1238>
   249a8:	8809883a 	mov	r4,r17
   249ac:	b80b883a 	mov	r5,r23
   249b0:	d9811b04 	addi	r6,sp,1132
   249b4:	00237140 	call	23714 <__sprint_r>
   249b8:	103ca91e 	bne	r2,zero,23c60 <___vfprintf_internal_r+0x518>
   249bc:	da011d17 	ldw	r8,1140(sp)
   249c0:	d8c11c17 	ldw	r3,1136(sp)
   249c4:	da400404 	addi	r9,sp,16
   249c8:	003fee06 	br	24984 <___vfprintf_internal_r+0x123c>
   249cc:	d9412917 	ldw	r5,1188(sp)
   249d0:	8809883a 	mov	r4,r17
   249d4:	d9811b04 	addi	r6,sp,1132
   249d8:	00237140 	call	23714 <__sprint_r>
   249dc:	103ca01e 	bne	r2,zero,23c60 <___vfprintf_internal_r+0x518>
   249e0:	da011d17 	ldw	r8,1140(sp)
   249e4:	d8c11c17 	ldw	r3,1136(sp)
   249e8:	da400404 	addi	r9,sp,16
   249ec:	003dee06 	br	241a8 <___vfprintf_internal_r+0xa60>
   249f0:	00c00084 	movi	r3,2
   249f4:	bd84b03a 	or	r2,r23,r22
   249f8:	d8012585 	stb	zero,1174(sp)
   249fc:	003ccb06 	br	23d2c <___vfprintf_internal_r+0x5e4>
   24a00:	8080040c 	andi	r2,r16,16
   24a04:	1000ae26 	beq	r2,zero,24cc0 <___vfprintf_internal_r+0x1578>
   24a08:	d9012d17 	ldw	r4,1204(sp)
   24a0c:	25c00017 	ldw	r23,0(r4)
   24a10:	21000104 	addi	r4,r4,4
   24a14:	d9012d15 	stw	r4,1204(sp)
   24a18:	b82dd7fa 	srai	r22,r23,31
   24a1c:	b005883a 	mov	r2,r22
   24a20:	003cb906 	br	23d08 <___vfprintf_internal_r+0x5c0>
   24a24:	8080040c 	andi	r2,r16,16
   24a28:	10007026 	beq	r2,zero,24bec <___vfprintf_internal_r+0x14a4>
   24a2c:	d8812d17 	ldw	r2,1204(sp)
   24a30:	002d883a 	mov	r22,zero
   24a34:	00c00044 	movi	r3,1
   24a38:	15c00017 	ldw	r23,0(r2)
   24a3c:	10800104 	addi	r2,r2,4
   24a40:	d8812d15 	stw	r2,1204(sp)
   24a44:	d8012585 	stb	zero,1174(sp)
   24a48:	b805883a 	mov	r2,r23
   24a4c:	003cb706 	br	23d2c <___vfprintf_internal_r+0x5e4>
   24a50:	d8813217 	ldw	r2,1224(sp)
   24a54:	14ffffc4 	addi	r19,r2,-1
   24a58:	04ff4f0e 	bge	zero,r19,24798 <___vfprintf_internal_r+0x1050>
   24a5c:	05800404 	movi	r22,16
   24a60:	050000f4 	movhi	r20,3
   24a64:	a53a0b84 	addi	r20,r20,-6098
   24a68:	b4c0470e 	bge	r22,r19,24b88 <___vfprintf_internal_r+0x1440>
   24a6c:	05c001c4 	movi	r23,7
   24a70:	df012917 	ldw	fp,1188(sp)
   24a74:	00000306 	br	24a84 <___vfprintf_internal_r+0x133c>
   24a78:	94800204 	addi	r18,r18,8
   24a7c:	9cfffc04 	addi	r19,r19,-16
   24a80:	b4c0410e 	bge	r22,r19,24b88 <___vfprintf_internal_r+0x1440>
   24a84:	95000015 	stw	r20,0(r18)
   24a88:	95800115 	stw	r22,4(r18)
   24a8c:	42000404 	addi	r8,r8,16
   24a90:	18c00044 	addi	r3,r3,1
   24a94:	da011d15 	stw	r8,1140(sp)
   24a98:	d8c11c15 	stw	r3,1136(sp)
   24a9c:	b8fff60e 	bge	r23,r3,24a78 <___vfprintf_internal_r+0x1330>
   24aa0:	8809883a 	mov	r4,r17
   24aa4:	e00b883a 	mov	r5,fp
   24aa8:	d9811b04 	addi	r6,sp,1132
   24aac:	00237140 	call	23714 <__sprint_r>
   24ab0:	103c6b1e 	bne	r2,zero,23c60 <___vfprintf_internal_r+0x518>
   24ab4:	da011d17 	ldw	r8,1140(sp)
   24ab8:	d8c11c17 	ldw	r3,1136(sp)
   24abc:	dc800404 	addi	r18,sp,16
   24ac0:	003fee06 	br	24a7c <___vfprintf_internal_r+0x1334>
   24ac4:	8080040c 	andi	r2,r16,16
   24ac8:	10005326 	beq	r2,zero,24c18 <___vfprintf_internal_r+0x14d0>
   24acc:	d8c12d17 	ldw	r3,1204(sp)
   24ad0:	002d883a 	mov	r22,zero
   24ad4:	1dc00017 	ldw	r23,0(r3)
   24ad8:	18c00104 	addi	r3,r3,4
   24adc:	d8c12d15 	stw	r3,1204(sp)
   24ae0:	b805883a 	mov	r2,r23
   24ae4:	0007883a 	mov	r3,zero
   24ae8:	d8012585 	stb	zero,1174(sp)
   24aec:	003c8f06 	br	23d2c <___vfprintf_internal_r+0x5e4>
   24af0:	8088703a 	and	r4,r16,r2
   24af4:	203efe1e 	bne	r4,zero,246f0 <___vfprintf_internal_r+0xfa8>
   24af8:	48800115 	stw	r2,4(r9)
   24afc:	42000044 	addi	r8,r8,1
   24b00:	18c00044 	addi	r3,r3,1
   24b04:	da011d15 	stw	r8,1140(sp)
   24b08:	d8c11c15 	stw	r3,1136(sp)
   24b0c:	008001c4 	movi	r2,7
   24b10:	10c00216 	blt	r2,r3,24b1c <___vfprintf_internal_r+0x13d4>
   24b14:	4c800204 	addi	r18,r9,8
   24b18:	003f1f06 	br	24798 <___vfprintf_internal_r+0x1050>
   24b1c:	d9412917 	ldw	r5,1188(sp)
   24b20:	8809883a 	mov	r4,r17
   24b24:	d9811b04 	addi	r6,sp,1132
   24b28:	00237140 	call	23714 <__sprint_r>
   24b2c:	103c4c1e 	bne	r2,zero,23c60 <___vfprintf_internal_r+0x518>
   24b30:	dc800404 	addi	r18,sp,16
   24b34:	da011d17 	ldw	r8,1140(sp)
   24b38:	d8c11c17 	ldw	r3,1136(sp)
   24b3c:	003f1606 	br	24798 <___vfprintf_internal_r+0x1050>
   24b40:	d9412917 	ldw	r5,1188(sp)
   24b44:	8809883a 	mov	r4,r17
   24b48:	d9811b04 	addi	r6,sp,1132
   24b4c:	00237140 	call	23714 <__sprint_r>
   24b50:	103c431e 	bne	r2,zero,23c60 <___vfprintf_internal_r+0x518>
   24b54:	da011d17 	ldw	r8,1140(sp)
   24b58:	d8c11c17 	ldw	r3,1136(sp)
   24b5c:	da400404 	addi	r9,sp,16
   24b60:	003eec06 	br	24714 <___vfprintf_internal_r+0xfcc>
   24b64:	d9412917 	ldw	r5,1188(sp)
   24b68:	8809883a 	mov	r4,r17
   24b6c:	d9811b04 	addi	r6,sp,1132
   24b70:	00237140 	call	23714 <__sprint_r>
   24b74:	103c3a1e 	bne	r2,zero,23c60 <___vfprintf_internal_r+0x518>
   24b78:	da011d17 	ldw	r8,1140(sp)
   24b7c:	d8c11c17 	ldw	r3,1136(sp)
   24b80:	dc800404 	addi	r18,sp,16
   24b84:	003eee06 	br	24740 <___vfprintf_internal_r+0xff8>
   24b88:	95000015 	stw	r20,0(r18)
   24b8c:	94c00115 	stw	r19,4(r18)
   24b90:	44d1883a 	add	r8,r8,r19
   24b94:	003efa06 	br	24780 <___vfprintf_internal_r+0x1038>
   24b98:	d9412917 	ldw	r5,1188(sp)
   24b9c:	8809883a 	mov	r4,r17
   24ba0:	d9811b04 	addi	r6,sp,1132
   24ba4:	00237140 	call	23714 <__sprint_r>
   24ba8:	103c2d1e 	bne	r2,zero,23c60 <___vfprintf_internal_r+0x518>
   24bac:	da011d17 	ldw	r8,1140(sp)
   24bb0:	d8c11c17 	ldw	r3,1136(sp)
   24bb4:	da400404 	addi	r9,sp,16
   24bb8:	003d9806 	br	2421c <___vfprintf_internal_r+0xad4>
   24bbc:	8080100c 	andi	r2,r16,64
   24bc0:	10011626 	beq	r2,zero,2501c <___vfprintf_internal_r+0x18d4>
   24bc4:	d8c12d17 	ldw	r3,1204(sp)
   24bc8:	002d883a 	mov	r22,zero
   24bcc:	1dc0000b 	ldhu	r23,0(r3)
   24bd0:	18c00104 	addi	r3,r3,4
   24bd4:	d8c12d15 	stw	r3,1204(sp)
   24bd8:	003cc106 	br	23ee0 <___vfprintf_internal_r+0x798>
   24bdc:	4d000015 	stw	r20,0(r9)
   24be0:	4c800115 	stw	r18,4(r9)
   24be4:	4491883a 	add	r8,r8,r18
   24be8:	003dc006 	br	242ec <___vfprintf_internal_r+0xba4>
   24bec:	8080100c 	andi	r2,r16,64
   24bf0:	10010126 	beq	r2,zero,24ff8 <___vfprintf_internal_r+0x18b0>
   24bf4:	d8c12d17 	ldw	r3,1204(sp)
   24bf8:	002d883a 	mov	r22,zero
   24bfc:	1dc0000b 	ldhu	r23,0(r3)
   24c00:	18c00104 	addi	r3,r3,4
   24c04:	d8c12d15 	stw	r3,1204(sp)
   24c08:	b805883a 	mov	r2,r23
   24c0c:	00c00044 	movi	r3,1
   24c10:	d8012585 	stb	zero,1174(sp)
   24c14:	003c4506 	br	23d2c <___vfprintf_internal_r+0x5e4>
   24c18:	8080100c 	andi	r2,r16,64
   24c1c:	10010526 	beq	r2,zero,25034 <___vfprintf_internal_r+0x18ec>
   24c20:	d9012d17 	ldw	r4,1204(sp)
   24c24:	002d883a 	mov	r22,zero
   24c28:	0007883a 	mov	r3,zero
   24c2c:	25c0000b 	ldhu	r23,0(r4)
   24c30:	21000104 	addi	r4,r4,4
   24c34:	d9012d15 	stw	r4,1204(sp)
   24c38:	b805883a 	mov	r2,r23
   24c3c:	d8012585 	stb	zero,1174(sp)
   24c40:	003c3a06 	br	23d2c <___vfprintf_internal_r+0x5e4>
   24c44:	d8812d17 	ldw	r2,1204(sp)
   24c48:	15800017 	ldw	r22,0(r2)
   24c4c:	15000117 	ldw	r20,4(r2)
   24c50:	10800204 	addi	r2,r2,8
   24c54:	d8812d15 	stw	r2,1204(sp)
   24c58:	dd813315 	stw	r22,1228(sp)
   24c5c:	dd013415 	stw	r20,1232(sp)
   24c60:	003c5906 	br	23dc8 <___vfprintf_internal_r+0x680>
   24c64:	00c00084 	movi	r3,2
   24c68:	d8012585 	stb	zero,1174(sp)
   24c6c:	003c2f06 	br	23d2c <___vfprintf_internal_r+0x5e4>
   24c70:	ac800007 	ldb	r18,0(r21)
   24c74:	003b1006 	br	238b8 <___vfprintf_internal_r+0x170>
   24c78:	8080040c 	andi	r2,r16,16
   24c7c:	1000091e 	bne	r2,zero,24ca4 <___vfprintf_internal_r+0x155c>
   24c80:	8400100c 	andi	r16,r16,64
   24c84:	80000726 	beq	r16,zero,24ca4 <___vfprintf_internal_r+0x155c>
   24c88:	d8c12d17 	ldw	r3,1204(sp)
   24c8c:	d9012c17 	ldw	r4,1200(sp)
   24c90:	18800017 	ldw	r2,0(r3)
   24c94:	18c00104 	addi	r3,r3,4
   24c98:	d8c12d15 	stw	r3,1204(sp)
   24c9c:	1100000d 	sth	r4,0(r2)
   24ca0:	003adf06 	br	23820 <___vfprintf_internal_r+0xd8>
   24ca4:	d8c12d17 	ldw	r3,1204(sp)
   24ca8:	d9012c17 	ldw	r4,1200(sp)
   24cac:	18800017 	ldw	r2,0(r3)
   24cb0:	18c00104 	addi	r3,r3,4
   24cb4:	d8c12d15 	stw	r3,1204(sp)
   24cb8:	11000015 	stw	r4,0(r2)
   24cbc:	003ad806 	br	23820 <___vfprintf_internal_r+0xd8>
   24cc0:	8080100c 	andi	r2,r16,64
   24cc4:	1000c526 	beq	r2,zero,24fdc <___vfprintf_internal_r+0x1894>
   24cc8:	d8812d17 	ldw	r2,1204(sp)
   24ccc:	15c0000f 	ldh	r23,0(r2)
   24cd0:	10800104 	addi	r2,r2,4
   24cd4:	d8812d15 	stw	r2,1204(sp)
   24cd8:	b82dd7fa 	srai	r22,r23,31
   24cdc:	b005883a 	mov	r2,r22
   24ce0:	003c0906 	br	23d08 <___vfprintf_internal_r+0x5c0>
   24ce4:	4c800115 	stw	r18,4(r9)
   24ce8:	9211883a 	add	r8,r18,r8
   24cec:	18c00044 	addi	r3,r3,1
   24cf0:	da011d15 	stw	r8,1140(sp)
   24cf4:	d8c11c15 	stw	r3,1136(sp)
   24cf8:	008001c4 	movi	r2,7
   24cfc:	10c14016 	blt	r2,r3,25200 <___vfprintf_internal_r+0x1ab8>
   24d00:	4a400204 	addi	r9,r9,8
   24d04:	d8813717 	ldw	r2,1244(sp)
   24d08:	9ca7883a 	add	r19,r19,r18
   24d0c:	48800015 	stw	r2,0(r9)
   24d10:	00800044 	movi	r2,1
   24d14:	48800115 	stw	r2,4(r9)
   24d18:	4091883a 	add	r8,r8,r2
   24d1c:	1887883a 	add	r3,r3,r2
   24d20:	da011d15 	stw	r8,1140(sp)
   24d24:	d8c11c15 	stw	r3,1136(sp)
   24d28:	008001c4 	movi	r2,7
   24d2c:	10c12c16 	blt	r2,r3,251e0 <___vfprintf_internal_r+0x1a98>
   24d30:	4a400204 	addi	r9,r9,8
   24d34:	d9013217 	ldw	r4,1224(sp)
   24d38:	da011d17 	ldw	r8,1140(sp)
   24d3c:	d8c11c17 	ldw	r3,1136(sp)
   24d40:	24a5c83a 	sub	r18,r4,r18
   24d44:	4cc00015 	stw	r19,0(r9)
   24d48:	003fa506 	br	24be0 <___vfprintf_internal_r+0x1498>
   24d4c:	04c000f4 	movhi	r19,3
   24d50:	9cf9f804 	addi	r19,r19,-6176
   24d54:	003c2e06 	br	23e10 <___vfprintf_internal_r+0x6c8>
   24d58:	d9412917 	ldw	r5,1188(sp)
   24d5c:	8809883a 	mov	r4,r17
   24d60:	d9811b04 	addi	r6,sp,1132
   24d64:	00237140 	call	23714 <__sprint_r>
   24d68:	103bbd1e 	bne	r2,zero,23c60 <___vfprintf_internal_r+0x518>
   24d6c:	da011d17 	ldw	r8,1140(sp)
   24d70:	da400404 	addi	r9,sp,16
   24d74:	003df606 	br	24550 <___vfprintf_internal_r+0xe08>
   24d78:	008000f4 	movhi	r2,3
   24d7c:	10ba0704 	addi	r2,r2,-6116
   24d80:	48800015 	stw	r2,0(r9)
   24d84:	00800044 	movi	r2,1
   24d88:	48800115 	stw	r2,4(r9)
   24d8c:	4091883a 	add	r8,r8,r2
   24d90:	1887883a 	add	r3,r3,r2
   24d94:	da011d15 	stw	r8,1140(sp)
   24d98:	d8c11c15 	stw	r3,1136(sp)
   24d9c:	008001c4 	movi	r2,7
   24da0:	10c0bc16 	blt	r2,r3,25094 <___vfprintf_internal_r+0x194c>
   24da4:	4a400204 	addi	r9,r9,8
   24da8:	9000041e 	bne	r18,zero,24dbc <___vfprintf_internal_r+0x1674>
   24dac:	d8c13217 	ldw	r3,1224(sp)
   24db0:	1800021e 	bne	r3,zero,24dbc <___vfprintf_internal_r+0x1674>
   24db4:	8080004c 	andi	r2,r16,1
   24db8:	103d5226 	beq	r2,zero,24304 <___vfprintf_internal_r+0xbbc>
   24dbc:	d8c11c17 	ldw	r3,1136(sp)
   24dc0:	d9013717 	ldw	r4,1244(sp)
   24dc4:	00800044 	movi	r2,1
   24dc8:	48800115 	stw	r2,4(r9)
   24dcc:	49000015 	stw	r4,0(r9)
   24dd0:	4091883a 	add	r8,r8,r2
   24dd4:	1887883a 	add	r3,r3,r2
   24dd8:	da011d15 	stw	r8,1140(sp)
   24ddc:	d8c11c15 	stw	r3,1136(sp)
   24de0:	008001c4 	movi	r2,7
   24de4:	10c14516 	blt	r2,r3,252fc <___vfprintf_internal_r+0x1bb4>
   24de8:	4a400204 	addi	r9,r9,8
   24dec:	04a5c83a 	sub	r18,zero,r18
   24df0:	0480d70e 	bge	zero,r18,25150 <___vfprintf_internal_r+0x1a08>
   24df4:	05800404 	movi	r22,16
   24df8:	050000f4 	movhi	r20,3
   24dfc:	a53a0b84 	addi	r20,r20,-6098
   24e00:	b480db0e 	bge	r22,r18,25170 <___vfprintf_internal_r+0x1a28>
   24e04:	05c001c4 	movi	r23,7
   24e08:	df012917 	ldw	fp,1188(sp)
   24e0c:	00000306 	br	24e1c <___vfprintf_internal_r+0x16d4>
   24e10:	4a400204 	addi	r9,r9,8
   24e14:	94bffc04 	addi	r18,r18,-16
   24e18:	b480d50e 	bge	r22,r18,25170 <___vfprintf_internal_r+0x1a28>
   24e1c:	4d000015 	stw	r20,0(r9)
   24e20:	4d800115 	stw	r22,4(r9)
   24e24:	42000404 	addi	r8,r8,16
   24e28:	18c00044 	addi	r3,r3,1
   24e2c:	da011d15 	stw	r8,1140(sp)
   24e30:	d8c11c15 	stw	r3,1136(sp)
   24e34:	b8fff60e 	bge	r23,r3,24e10 <___vfprintf_internal_r+0x16c8>
   24e38:	8809883a 	mov	r4,r17
   24e3c:	e00b883a 	mov	r5,fp
   24e40:	d9811b04 	addi	r6,sp,1132
   24e44:	00237140 	call	23714 <__sprint_r>
   24e48:	103b851e 	bne	r2,zero,23c60 <___vfprintf_internal_r+0x518>
   24e4c:	da011d17 	ldw	r8,1140(sp)
   24e50:	d8c11c17 	ldw	r3,1136(sp)
   24e54:	da400404 	addi	r9,sp,16
   24e58:	003fee06 	br	24e14 <___vfprintf_internal_r+0x16cc>
   24e5c:	da413c15 	stw	r9,1264(sp)
   24e60:	00291200 	call	29120 <__isnand>
   24e64:	da413c17 	ldw	r9,1264(sp)
   24e68:	10007e1e 	bne	r2,zero,25064 <___vfprintf_internal_r+0x191c>
   24e6c:	00bfffc4 	movi	r2,-1
   24e70:	e0816a26 	beq	fp,r2,2541c <___vfprintf_internal_r+0x1cd4>
   24e74:	008019c4 	movi	r2,103
   24e78:	90816526 	beq	r18,r2,25410 <___vfprintf_internal_r+0x1cc8>
   24e7c:	008011c4 	movi	r2,71
   24e80:	90816326 	beq	r18,r2,25410 <___vfprintf_internal_r+0x1cc8>
   24e84:	80c04014 	ori	r3,r16,256
   24e88:	d8c12a15 	stw	r3,1192(sp)
   24e8c:	a0016516 	blt	r20,zero,25424 <___vfprintf_internal_r+0x1cdc>
   24e90:	d8012f05 	stb	zero,1212(sp)
   24e94:	00801984 	movi	r2,102
   24e98:	9080f226 	beq	r18,r2,25264 <___vfprintf_internal_r+0x1b1c>
   24e9c:	00801184 	movi	r2,70
   24ea0:	9080f026 	beq	r18,r2,25264 <___vfprintf_internal_r+0x1b1c>
   24ea4:	00801944 	movi	r2,101
   24ea8:	90818d26 	beq	r18,r2,254e0 <___vfprintf_internal_r+0x1d98>
   24eac:	00801144 	movi	r2,69
   24eb0:	90818b26 	beq	r18,r2,254e0 <___vfprintf_internal_r+0x1d98>
   24eb4:	e02f883a 	mov	r23,fp
   24eb8:	d8812404 	addi	r2,sp,1168
   24ebc:	d8800115 	stw	r2,4(sp)
   24ec0:	d8812304 	addi	r2,sp,1164
   24ec4:	d8800215 	stw	r2,8(sp)
   24ec8:	d8812204 	addi	r2,sp,1160
   24ecc:	ddc00015 	stw	r23,0(sp)
   24ed0:	d8800315 	stw	r2,12(sp)
   24ed4:	8809883a 	mov	r4,r17
   24ed8:	b00b883a 	mov	r5,r22
   24edc:	a00d883a 	mov	r6,r20
   24ee0:	01c00084 	movi	r7,2
   24ee4:	da413c15 	stw	r9,1264(sp)
   24ee8:	0025a680 	call	25a68 <_dtoa_r>
   24eec:	1027883a 	mov	r19,r2
   24ef0:	008019c4 	movi	r2,103
   24ef4:	da413c17 	ldw	r9,1264(sp)
   24ef8:	9081951e 	bne	r18,r2,25550 <___vfprintf_internal_r+0x1e08>
   24efc:	8080004c 	andi	r2,r16,1
   24f00:	10017926 	beq	r2,zero,254e8 <___vfprintf_internal_r+0x1da0>
   24f04:	00801184 	movi	r2,70
   24f08:	9dc7883a 	add	r3,r19,r23
   24f0c:	9080e626 	beq	r18,r2,252a8 <___vfprintf_internal_r+0x1b60>
   24f10:	b009883a 	mov	r4,r22
   24f14:	a00b883a 	mov	r5,r20
   24f18:	000d883a 	mov	r6,zero
   24f1c:	000f883a 	mov	r7,zero
   24f20:	d8c13b15 	stw	r3,1260(sp)
   24f24:	da413c15 	stw	r9,1264(sp)
   24f28:	002a7d40 	call	2a7d4 <__eqdf2>
   24f2c:	d8c13b17 	ldw	r3,1260(sp)
   24f30:	da413c17 	ldw	r9,1264(sp)
   24f34:	10000726 	beq	r2,zero,24f54 <___vfprintf_internal_r+0x180c>
   24f38:	d8812217 	ldw	r2,1160(sp)
   24f3c:	10c18a2e 	bgeu	r2,r3,25568 <___vfprintf_internal_r+0x1e20>
   24f40:	01000c04 	movi	r4,48
   24f44:	11000005 	stb	r4,0(r2)
   24f48:	10800044 	addi	r2,r2,1
   24f4c:	d8812215 	stw	r2,1160(sp)
   24f50:	10fffc1e 	bne	r2,r3,24f44 <___vfprintf_internal_r+0x17fc>
   24f54:	1cc7c83a 	sub	r3,r3,r19
   24f58:	d8c13215 	stw	r3,1224(sp)
   24f5c:	008019c4 	movi	r2,103
   24f60:	9080fa26 	beq	r18,r2,2534c <___vfprintf_internal_r+0x1c04>
   24f64:	008011c4 	movi	r2,71
   24f68:	9080f826 	beq	r18,r2,2534c <___vfprintf_internal_r+0x1c04>
   24f6c:	00801984 	movi	r2,102
   24f70:	90818e1e 	bne	r18,r2,255ac <___vfprintf_internal_r+0x1e64>
   24f74:	d8812417 	ldw	r2,1168(sp)
   24f78:	d8812b15 	stw	r2,1196(sp)
   24f7c:	00817c0e 	bge	zero,r2,25570 <___vfprintf_internal_r+0x1e28>
   24f80:	e000021e 	bne	fp,zero,24f8c <___vfprintf_internal_r+0x1844>
   24f84:	8400004c 	andi	r16,r16,1
   24f88:	80000426 	beq	r16,zero,24f9c <___vfprintf_internal_r+0x1854>
   24f8c:	d8812b17 	ldw	r2,1196(sp)
   24f90:	e2000044 	addi	r8,fp,1
   24f94:	1205883a 	add	r2,r2,r8
   24f98:	d8812b15 	stw	r2,1196(sp)
   24f9c:	d8812815 	stw	r2,1184(sp)
   24fa0:	10010b16 	blt	r2,zero,253d0 <___vfprintf_internal_r+0x1c88>
   24fa4:	ddc12f07 	ldb	r23,1212(sp)
   24fa8:	b800e426 	beq	r23,zero,2533c <___vfprintf_internal_r+0x1bf4>
   24fac:	00800b44 	movi	r2,45
   24fb0:	d8812585 	stb	r2,1174(sp)
   24fb4:	dc012a17 	ldw	r16,1192(sp)
   24fb8:	d8013115 	stw	zero,1220(sp)
   24fbc:	003b7306 	br	23d8c <___vfprintf_internal_r+0x644>
   24fc0:	d8812b17 	ldw	r2,1196(sp)
   24fc4:	d8812815 	stw	r2,1184(sp)
   24fc8:	10005716 	blt	r2,zero,25128 <___vfprintf_internal_r+0x19e0>
   24fcc:	d8812583 	ldbu	r2,1174(sp)
   24fd0:	ddc12d15 	stw	r23,1204(sp)
   24fd4:	d8013115 	stw	zero,1220(sp)
   24fd8:	003b6806 	br	23d7c <___vfprintf_internal_r+0x634>
   24fdc:	d8c12d17 	ldw	r3,1204(sp)
   24fe0:	1dc00017 	ldw	r23,0(r3)
   24fe4:	18c00104 	addi	r3,r3,4
   24fe8:	d8c12d15 	stw	r3,1204(sp)
   24fec:	b82dd7fa 	srai	r22,r23,31
   24ff0:	b005883a 	mov	r2,r22
   24ff4:	003b4406 	br	23d08 <___vfprintf_internal_r+0x5c0>
   24ff8:	d9012d17 	ldw	r4,1204(sp)
   24ffc:	002d883a 	mov	r22,zero
   25000:	00c00044 	movi	r3,1
   25004:	25c00017 	ldw	r23,0(r4)
   25008:	21000104 	addi	r4,r4,4
   2500c:	d9012d15 	stw	r4,1204(sp)
   25010:	b805883a 	mov	r2,r23
   25014:	d8012585 	stb	zero,1174(sp)
   25018:	003b4406 	br	23d2c <___vfprintf_internal_r+0x5e4>
   2501c:	d9012d17 	ldw	r4,1204(sp)
   25020:	002d883a 	mov	r22,zero
   25024:	25c00017 	ldw	r23,0(r4)
   25028:	21000104 	addi	r4,r4,4
   2502c:	d9012d15 	stw	r4,1204(sp)
   25030:	003bab06 	br	23ee0 <___vfprintf_internal_r+0x798>
   25034:	d8812d17 	ldw	r2,1204(sp)
   25038:	002d883a 	mov	r22,zero
   2503c:	0007883a 	mov	r3,zero
   25040:	15c00017 	ldw	r23,0(r2)
   25044:	10800104 	addi	r2,r2,4
   25048:	d8812d15 	stw	r2,1204(sp)
   2504c:	d8012585 	stb	zero,1174(sp)
   25050:	b805883a 	mov	r2,r23
   25054:	003b3506 	br	23d2c <___vfprintf_internal_r+0x5e4>
   25058:	00ffffc4 	movi	r3,-1
   2505c:	b82b883a 	mov	r21,r23
   25060:	003a1606 	br	238bc <___vfprintf_internal_r+0x174>
   25064:	008011c4 	movi	r2,71
   25068:	1480b116 	blt	r2,r18,25330 <___vfprintf_internal_r+0x1be8>
   2506c:	04c000f4 	movhi	r19,3
   25070:	9cf9f904 	addi	r19,r19,-6172
   25074:	00c000c4 	movi	r3,3
   25078:	00bfdfc4 	movi	r2,-129
   2507c:	80a0703a 	and	r16,r16,r2
   25080:	d8c12815 	stw	r3,1184(sp)
   25084:	d8812583 	ldbu	r2,1174(sp)
   25088:	d8c12b15 	stw	r3,1196(sp)
   2508c:	d8013115 	stw	zero,1220(sp)
   25090:	003b3a06 	br	23d7c <___vfprintf_internal_r+0x634>
   25094:	d9412917 	ldw	r5,1188(sp)
   25098:	8809883a 	mov	r4,r17
   2509c:	d9811b04 	addi	r6,sp,1132
   250a0:	00237140 	call	23714 <__sprint_r>
   250a4:	103aee1e 	bne	r2,zero,23c60 <___vfprintf_internal_r+0x518>
   250a8:	dc812417 	ldw	r18,1168(sp)
   250ac:	da011d17 	ldw	r8,1140(sp)
   250b0:	da400404 	addi	r9,sp,16
   250b4:	003f3c06 	br	24da8 <___vfprintf_internal_r+0x1660>
   250b8:	ad400044 	addi	r21,r21,1
   250bc:	84000814 	ori	r16,r16,32
   250c0:	14800047 	ldb	r18,1(r2)
   250c4:	0039fc06 	br	238b8 <___vfprintf_internal_r+0x170>
   250c8:	d9412917 	ldw	r5,1188(sp)
   250cc:	8809883a 	mov	r4,r17
   250d0:	d9811b04 	addi	r6,sp,1132
   250d4:	00237140 	call	23714 <__sprint_r>
   250d8:	103ae11e 	bne	r2,zero,23c60 <___vfprintf_internal_r+0x518>
   250dc:	da011d17 	ldw	r8,1140(sp)
   250e0:	da400404 	addi	r9,sp,16
   250e4:	003d2b06 	br	24594 <___vfprintf_internal_r+0xe4c>
   250e8:	4d000015 	stw	r20,0(r9)
   250ec:	4c800115 	stw	r18,4(r9)
   250f0:	4491883a 	add	r8,r8,r18
   250f4:	18c00044 	addi	r3,r3,1
   250f8:	da011d15 	stw	r8,1140(sp)
   250fc:	d8c11c15 	stw	r3,1136(sp)
   25100:	008001c4 	movi	r2,7
   25104:	10fcbd16 	blt	r2,r3,243fc <___vfprintf_internal_r+0xcb4>
   25108:	4a400204 	addi	r9,r9,8
   2510c:	003cc206 	br	24418 <___vfprintf_internal_r+0xcd0>
   25110:	da413c15 	stw	r9,1264(sp)
   25114:	00236880 	call	23688 <strlen>
   25118:	d8812b15 	stw	r2,1196(sp)
   2511c:	d8812815 	stw	r2,1184(sp)
   25120:	da413c17 	ldw	r9,1264(sp)
   25124:	103fa90e 	bge	r2,zero,24fcc <___vfprintf_internal_r+0x1884>
   25128:	d8012815 	stw	zero,1184(sp)
   2512c:	003fa706 	br	24fcc <___vfprintf_internal_r+0x1884>
   25130:	d9412917 	ldw	r5,1188(sp)
   25134:	8809883a 	mov	r4,r17
   25138:	d9811b04 	addi	r6,sp,1132
   2513c:	00237140 	call	23714 <__sprint_r>
   25140:	103ac71e 	bne	r2,zero,23c60 <___vfprintf_internal_r+0x518>
   25144:	da011d17 	ldw	r8,1140(sp)
   25148:	d8c11c17 	ldw	r3,1136(sp)
   2514c:	da400404 	addi	r9,sp,16
   25150:	d8813217 	ldw	r2,1224(sp)
   25154:	4cc00015 	stw	r19,0(r9)
   25158:	48800115 	stw	r2,4(r9)
   2515c:	4091883a 	add	r8,r8,r2
   25160:	003c6206 	br	242ec <___vfprintf_internal_r+0xba4>
   25164:	00800b44 	movi	r2,45
   25168:	d8812585 	stb	r2,1174(sp)
   2516c:	003b2406 	br	23e00 <___vfprintf_internal_r+0x6b8>
   25170:	4d000015 	stw	r20,0(r9)
   25174:	4c800115 	stw	r18,4(r9)
   25178:	4491883a 	add	r8,r8,r18
   2517c:	18c00044 	addi	r3,r3,1
   25180:	da011d15 	stw	r8,1140(sp)
   25184:	d8c11c15 	stw	r3,1136(sp)
   25188:	008001c4 	movi	r2,7
   2518c:	10ffe816 	blt	r2,r3,25130 <___vfprintf_internal_r+0x19e8>
   25190:	4a400204 	addi	r9,r9,8
   25194:	003fee06 	br	25150 <___vfprintf_internal_r+0x1a08>
   25198:	d8c12b15 	stw	r3,1196(sp)
   2519c:	00800184 	movi	r2,6
   251a0:	10c0062e 	bgeu	r2,r3,251bc <___vfprintf_internal_r+0x1a74>
   251a4:	d8812b15 	stw	r2,1196(sp)
   251a8:	d8812815 	stw	r2,1184(sp)
   251ac:	ddc12d15 	stw	r23,1204(sp)
   251b0:	04c000f4 	movhi	r19,3
   251b4:	9cfa0504 	addi	r19,r19,-6124
   251b8:	0039ca06 	br	238e4 <___vfprintf_internal_r+0x19c>
   251bc:	d8812b17 	ldw	r2,1196(sp)
   251c0:	d8812815 	stw	r2,1184(sp)
   251c4:	103ff90e 	bge	r2,zero,251ac <___vfprintf_internal_r+0x1a64>
   251c8:	d8012815 	stw	zero,1184(sp)
   251cc:	003ff706 	br	251ac <___vfprintf_internal_r+0x1a64>
   251d0:	00800244 	movi	r2,9
   251d4:	15fdaa36 	bltu	r2,r23,24880 <___vfprintf_internal_r+0x1138>
   251d8:	dd010e04 	addi	r20,sp,1080
   251dc:	003dc606 	br	248f8 <___vfprintf_internal_r+0x11b0>
   251e0:	d9412917 	ldw	r5,1188(sp)
   251e4:	8809883a 	mov	r4,r17
   251e8:	d9811b04 	addi	r6,sp,1132
   251ec:	00237140 	call	23714 <__sprint_r>
   251f0:	103a9b1e 	bne	r2,zero,23c60 <___vfprintf_internal_r+0x518>
   251f4:	dc812417 	ldw	r18,1168(sp)
   251f8:	da400404 	addi	r9,sp,16
   251fc:	003ecd06 	br	24d34 <___vfprintf_internal_r+0x15ec>
   25200:	d9412917 	ldw	r5,1188(sp)
   25204:	8809883a 	mov	r4,r17
   25208:	d9811b04 	addi	r6,sp,1132
   2520c:	00237140 	call	23714 <__sprint_r>
   25210:	103a931e 	bne	r2,zero,23c60 <___vfprintf_internal_r+0x518>
   25214:	dc812417 	ldw	r18,1168(sp)
   25218:	da011d17 	ldw	r8,1140(sp)
   2521c:	d8c11c17 	ldw	r3,1136(sp)
   25220:	da400404 	addi	r9,sp,16
   25224:	003eb706 	br	24d04 <___vfprintf_internal_r+0x15bc>
   25228:	d9412917 	ldw	r5,1188(sp)
   2522c:	8809883a 	mov	r4,r17
   25230:	d9811b04 	addi	r6,sp,1132
   25234:	00237140 	call	23714 <__sprint_r>
   25238:	103a891e 	bne	r2,zero,23c60 <___vfprintf_internal_r+0x518>
   2523c:	dc812417 	ldw	r18,1168(sp)
   25240:	da011d17 	ldw	r8,1140(sp)
   25244:	da400404 	addi	r9,sp,16
   25248:	003dc206 	br	24954 <___vfprintf_internal_r+0x120c>
   2524c:	df012815 	stw	fp,1184(sp)
   25250:	d8812583 	ldbu	r2,1174(sp)
   25254:	df012b15 	stw	fp,1196(sp)
   25258:	ddc12d15 	stw	r23,1204(sp)
   2525c:	d8013115 	stw	zero,1220(sp)
   25260:	003ac606 	br	23d7c <___vfprintf_internal_r+0x634>
   25264:	d8812404 	addi	r2,sp,1168
   25268:	d8800115 	stw	r2,4(sp)
   2526c:	d8812304 	addi	r2,sp,1164
   25270:	d8800215 	stw	r2,8(sp)
   25274:	d8812204 	addi	r2,sp,1160
   25278:	df000015 	stw	fp,0(sp)
   2527c:	d8800315 	stw	r2,12(sp)
   25280:	8809883a 	mov	r4,r17
   25284:	b00b883a 	mov	r5,r22
   25288:	a00d883a 	mov	r6,r20
   2528c:	01c000c4 	movi	r7,3
   25290:	da413c15 	stw	r9,1264(sp)
   25294:	0025a680 	call	25a68 <_dtoa_r>
   25298:	da413c17 	ldw	r9,1264(sp)
   2529c:	1027883a 	mov	r19,r2
   252a0:	1707883a 	add	r3,r2,fp
   252a4:	e02f883a 	mov	r23,fp
   252a8:	99000007 	ldb	r4,0(r19)
   252ac:	00800c04 	movi	r2,48
   252b0:	20800326 	beq	r4,r2,252c0 <___vfprintf_internal_r+0x1b78>
   252b4:	da812417 	ldw	r10,1168(sp)
   252b8:	1a87883a 	add	r3,r3,r10
   252bc:	003f1406 	br	24f10 <___vfprintf_internal_r+0x17c8>
   252c0:	b009883a 	mov	r4,r22
   252c4:	a00b883a 	mov	r5,r20
   252c8:	000d883a 	mov	r6,zero
   252cc:	000f883a 	mov	r7,zero
   252d0:	d8c13b15 	stw	r3,1260(sp)
   252d4:	da413c15 	stw	r9,1264(sp)
   252d8:	002a8300 	call	2a830 <__nedf2>
   252dc:	d8c13b17 	ldw	r3,1260(sp)
   252e0:	da413c17 	ldw	r9,1264(sp)
   252e4:	103ff326 	beq	r2,zero,252b4 <___vfprintf_internal_r+0x1b6c>
   252e8:	00800044 	movi	r2,1
   252ec:	15d5c83a 	sub	r10,r2,r23
   252f0:	da812415 	stw	r10,1168(sp)
   252f4:	1a87883a 	add	r3,r3,r10
   252f8:	003f0506 	br	24f10 <___vfprintf_internal_r+0x17c8>
   252fc:	d9412917 	ldw	r5,1188(sp)
   25300:	8809883a 	mov	r4,r17
   25304:	d9811b04 	addi	r6,sp,1132
   25308:	00237140 	call	23714 <__sprint_r>
   2530c:	103a541e 	bne	r2,zero,23c60 <___vfprintf_internal_r+0x518>
   25310:	dc812417 	ldw	r18,1168(sp)
   25314:	da011d17 	ldw	r8,1140(sp)
   25318:	d8c11c17 	ldw	r3,1136(sp)
   2531c:	da400404 	addi	r9,sp,16
   25320:	003eb206 	br	24dec <___vfprintf_internal_r+0x16a4>
   25324:	b82b883a 	mov	r21,r23
   25328:	0007883a 	mov	r3,zero
   2532c:	00396306 	br	238bc <___vfprintf_internal_r+0x174>
   25330:	04c000f4 	movhi	r19,3
   25334:	9cf9fa04 	addi	r19,r19,-6168
   25338:	003f4e06 	br	25074 <___vfprintf_internal_r+0x192c>
   2533c:	d8812583 	ldbu	r2,1174(sp)
   25340:	dc012a17 	ldw	r16,1192(sp)
   25344:	d8013115 	stw	zero,1220(sp)
   25348:	003a8c06 	br	23d7c <___vfprintf_internal_r+0x634>
   2534c:	d8812417 	ldw	r2,1168(sp)
   25350:	d8812b15 	stw	r2,1196(sp)
   25354:	1029883a 	mov	r20,r2
   25358:	00bfff44 	movi	r2,-3
   2535c:	a0800116 	blt	r20,r2,25364 <___vfprintf_internal_r+0x1c1c>
   25360:	e5001d0e 	bge	fp,r20,253d8 <___vfprintf_internal_r+0x1c90>
   25364:	94bfff84 	addi	r18,r18,-2
   25368:	a53fffc4 	addi	r20,r20,-1
   2536c:	dd012415 	stw	r20,1168(sp)
   25370:	dc811fc5 	stb	r18,1151(sp)
   25374:	a0007216 	blt	r20,zero,25540 <___vfprintf_internal_r+0x1df8>
   25378:	00800ac4 	movi	r2,43
   2537c:	d8812005 	stb	r2,1152(sp)
   25380:	00800244 	movi	r2,9
   25384:	15003516 	blt	r2,r20,2545c <___vfprintf_internal_r+0x1d14>
   25388:	00800c04 	movi	r2,48
   2538c:	a5000c04 	addi	r20,r20,48
   25390:	d8812045 	stb	r2,1153(sp)
   25394:	dd012085 	stb	r20,1154(sp)
   25398:	d8c120c4 	addi	r3,sp,1155
   2539c:	d8811fc4 	addi	r2,sp,1151
   253a0:	1885c83a 	sub	r2,r3,r2
   253a4:	d8c13217 	ldw	r3,1224(sp)
   253a8:	d8813515 	stw	r2,1236(sp)
   253ac:	1885883a 	add	r2,r3,r2
   253b0:	d8812b15 	stw	r2,1196(sp)
   253b4:	00800044 	movi	r2,1
   253b8:	10c0580e 	bge	r2,r3,2551c <___vfprintf_internal_r+0x1dd4>
   253bc:	d8812b17 	ldw	r2,1196(sp)
   253c0:	10800044 	addi	r2,r2,1
   253c4:	d8812b15 	stw	r2,1196(sp)
   253c8:	d8812815 	stw	r2,1184(sp)
   253cc:	103ef50e 	bge	r2,zero,24fa4 <___vfprintf_internal_r+0x185c>
   253d0:	d8012815 	stw	zero,1184(sp)
   253d4:	003ef306 	br	24fa4 <___vfprintf_internal_r+0x185c>
   253d8:	d8812b17 	ldw	r2,1196(sp)
   253dc:	d8c13217 	ldw	r3,1224(sp)
   253e0:	10c01416 	blt	r2,r3,25434 <___vfprintf_internal_r+0x1cec>
   253e4:	8400004c 	andi	r16,r16,1
   253e8:	80000326 	beq	r16,zero,253f8 <___vfprintf_internal_r+0x1cb0>
   253ec:	d8812b17 	ldw	r2,1196(sp)
   253f0:	10800044 	addi	r2,r2,1
   253f4:	d8812b15 	stw	r2,1196(sp)
   253f8:	d8812815 	stw	r2,1184(sp)
   253fc:	10001416 	blt	r2,zero,25450 <___vfprintf_internal_r+0x1d08>
   25400:	048019c4 	movi	r18,103
   25404:	003ee706 	br	24fa4 <___vfprintf_internal_r+0x185c>
   25408:	d8012815 	stw	zero,1184(sp)
   2540c:	003b1a06 	br	24078 <___vfprintf_internal_r+0x930>
   25410:	e03e9c1e 	bne	fp,zero,24e84 <___vfprintf_internal_r+0x173c>
   25414:	07000044 	movi	fp,1
   25418:	003e9a06 	br	24e84 <___vfprintf_internal_r+0x173c>
   2541c:	07000184 	movi	fp,6
   25420:	003e9806 	br	24e84 <___vfprintf_internal_r+0x173c>
   25424:	00c00b44 	movi	r3,45
   25428:	a520003c 	xorhi	r20,r20,32768
   2542c:	d8c12f05 	stb	r3,1212(sp)
   25430:	003e9806 	br	24e94 <___vfprintf_internal_r+0x174c>
   25434:	05003f0e 	bge	zero,r20,25534 <___vfprintf_internal_r+0x1dec>
   25438:	05000044 	movi	r20,1
   2543c:	d8c13217 	ldw	r3,1224(sp)
   25440:	a0e9883a 	add	r20,r20,r3
   25444:	dd012b15 	stw	r20,1196(sp)
   25448:	dd012815 	stw	r20,1184(sp)
   2544c:	a03fec0e 	bge	r20,zero,25400 <___vfprintf_internal_r+0x1cb8>
   25450:	d8012815 	stw	zero,1184(sp)
   25454:	048019c4 	movi	r18,103
   25458:	003ed206 	br	24fa4 <___vfprintf_internal_r+0x185c>
   2545c:	d8c11f84 	addi	r3,sp,1150
   25460:	102f883a 	mov	r23,r2
   25464:	4839883a 	mov	fp,r9
   25468:	a009883a 	mov	r4,r20
   2546c:	01400284 	movi	r5,10
   25470:	182d883a 	mov	r22,r3
   25474:	002ad380 	call	2ad38 <__modsi3>
   25478:	10800c04 	addi	r2,r2,48
   2547c:	a009883a 	mov	r4,r20
   25480:	b0800005 	stb	r2,0(r22)
   25484:	01400284 	movi	r5,10
   25488:	002ace80 	call	2ace8 <__divsi3>
   2548c:	1029883a 	mov	r20,r2
   25490:	b0ffffc4 	addi	r3,r22,-1
   25494:	b8bff416 	blt	r23,r2,25468 <___vfprintf_internal_r+0x1d20>
   25498:	11400c04 	addi	r5,r2,48
   2549c:	b17fffc5 	stb	r5,-1(r22)
   254a0:	d8811fc4 	addi	r2,sp,1151
   254a4:	e013883a 	mov	r9,fp
   254a8:	18803e2e 	bgeu	r3,r2,255a4 <___vfprintf_internal_r+0x1e5c>
   254ac:	b007883a 	mov	r3,r22
   254b0:	d9012044 	addi	r4,sp,1153
   254b4:	00000206 	br	254c0 <___vfprintf_internal_r+0x1d78>
   254b8:	19400003 	ldbu	r5,0(r3)
   254bc:	18c00044 	addi	r3,r3,1
   254c0:	21400005 	stb	r5,0(r4)
   254c4:	21000044 	addi	r4,r4,1
   254c8:	10fffb1e 	bne	r2,r3,254b8 <___vfprintf_internal_r+0x1d70>
   254cc:	d8c12004 	addi	r3,sp,1152
   254d0:	1d87c83a 	sub	r3,r3,r22
   254d4:	d9012044 	addi	r4,sp,1153
   254d8:	20c7883a 	add	r3,r4,r3
   254dc:	003fb006 	br	253a0 <___vfprintf_internal_r+0x1c58>
   254e0:	e5c00044 	addi	r23,fp,1
   254e4:	003e7406 	br	24eb8 <___vfprintf_internal_r+0x1770>
   254e8:	d8c12217 	ldw	r3,1160(sp)
   254ec:	003e9906 	br	24f54 <___vfprintf_internal_r+0x180c>
   254f0:	d9012d17 	ldw	r4,1204(sp)
   254f4:	ac800043 	ldbu	r18,1(r21)
   254f8:	b82b883a 	mov	r21,r23
   254fc:	20c00017 	ldw	r3,0(r4)
   25500:	20800104 	addi	r2,r4,4
   25504:	d8812d15 	stw	r2,1204(sp)
   25508:	18002116 	blt	r3,zero,25590 <___vfprintf_internal_r+0x1e48>
   2550c:	94803fcc 	andi	r18,r18,255
   25510:	9480201c 	xori	r18,r18,128
   25514:	94bfe004 	addi	r18,r18,-128
   25518:	0038e706 	br	238b8 <___vfprintf_internal_r+0x170>
   2551c:	80a0703a 	and	r16,r16,r2
   25520:	803fa61e 	bne	r16,zero,253bc <___vfprintf_internal_r+0x1c74>
   25524:	d8812b17 	ldw	r2,1196(sp)
   25528:	d8812815 	stw	r2,1184(sp)
   2552c:	103e9d0e 	bge	r2,zero,24fa4 <___vfprintf_internal_r+0x185c>
   25530:	003fa706 	br	253d0 <___vfprintf_internal_r+0x1c88>
   25534:	00800084 	movi	r2,2
   25538:	1529c83a 	sub	r20,r2,r20
   2553c:	003fbf06 	br	2543c <___vfprintf_internal_r+0x1cf4>
   25540:	00800b44 	movi	r2,45
   25544:	0529c83a 	sub	r20,zero,r20
   25548:	d8812005 	stb	r2,1152(sp)
   2554c:	003f8c06 	br	25380 <___vfprintf_internal_r+0x1c38>
   25550:	008011c4 	movi	r2,71
   25554:	90be6926 	beq	r18,r2,24efc <___vfprintf_internal_r+0x17b4>
   25558:	003e6a06 	br	24f04 <___vfprintf_internal_r+0x17bc>
   2555c:	00bfffc4 	movi	r2,-1
   25560:	d8812c15 	stw	r2,1200(sp)
   25564:	0039ad06 	br	23c1c <___vfprintf_internal_r+0x4d4>
   25568:	1007883a 	mov	r3,r2
   2556c:	003e7906 	br	24f54 <___vfprintf_internal_r+0x180c>
   25570:	e000021e 	bne	fp,zero,2557c <___vfprintf_internal_r+0x1e34>
   25574:	8400004c 	andi	r16,r16,1
   25578:	80000e26 	beq	r16,zero,255b4 <___vfprintf_internal_r+0x1e6c>
   2557c:	e7000084 	addi	fp,fp,2
   25580:	df012b15 	stw	fp,1196(sp)
   25584:	df012815 	stw	fp,1184(sp)
   25588:	e03e860e 	bge	fp,zero,24fa4 <___vfprintf_internal_r+0x185c>
   2558c:	003f9006 	br	253d0 <___vfprintf_internal_r+0x1c88>
   25590:	94803fcc 	andi	r18,r18,255
   25594:	9480201c 	xori	r18,r18,128
   25598:	00ffffc4 	movi	r3,-1
   2559c:	94bfe004 	addi	r18,r18,-128
   255a0:	0038c506 	br	238b8 <___vfprintf_internal_r+0x170>
   255a4:	d8c12044 	addi	r3,sp,1153
   255a8:	003f7d06 	br	253a0 <___vfprintf_internal_r+0x1c58>
   255ac:	dd012417 	ldw	r20,1168(sp)
   255b0:	003f6d06 	br	25368 <___vfprintf_internal_r+0x1c20>
   255b4:	00c00044 	movi	r3,1
   255b8:	d8c12815 	stw	r3,1184(sp)
   255bc:	d8c12b15 	stw	r3,1196(sp)
   255c0:	003e7806 	br	24fa4 <___vfprintf_internal_r+0x185c>

000255c4 <__vfprintf_internal>:
   255c4:	008000f4 	movhi	r2,3
   255c8:	10815204 	addi	r2,r2,1352
   255cc:	2007883a 	mov	r3,r4
   255d0:	11000017 	ldw	r4,0(r2)
   255d4:	2805883a 	mov	r2,r5
   255d8:	300f883a 	mov	r7,r6
   255dc:	180b883a 	mov	r5,r3
   255e0:	100d883a 	mov	r6,r2
   255e4:	00237481 	jmpi	23748 <___vfprintf_internal_r>

000255e8 <_write_r>:
   255e8:	defffd04 	addi	sp,sp,-12
   255ec:	dc400115 	stw	r17,4(sp)
   255f0:	dc000015 	stw	r16,0(sp)
   255f4:	2023883a 	mov	r17,r4
   255f8:	040000f4 	movhi	r16,3
   255fc:	84082404 	addi	r16,r16,8336
   25600:	2809883a 	mov	r4,r5
   25604:	300b883a 	mov	r5,r6
   25608:	380d883a 	mov	r6,r7
   2560c:	dfc00215 	stw	ra,8(sp)
   25610:	80000015 	stw	zero,0(r16)
   25614:	002bf400 	call	2bf40 <write>
   25618:	00ffffc4 	movi	r3,-1
   2561c:	10c00526 	beq	r2,r3,25634 <_write_r+0x4c>
   25620:	dfc00217 	ldw	ra,8(sp)
   25624:	dc400117 	ldw	r17,4(sp)
   25628:	dc000017 	ldw	r16,0(sp)
   2562c:	dec00304 	addi	sp,sp,12
   25630:	f800283a 	ret
   25634:	80c00017 	ldw	r3,0(r16)
   25638:	183ff926 	beq	r3,zero,25620 <_write_r+0x38>
   2563c:	88c00015 	stw	r3,0(r17)
   25640:	dfc00217 	ldw	ra,8(sp)
   25644:	dc400117 	ldw	r17,4(sp)
   25648:	dc000017 	ldw	r16,0(sp)
   2564c:	dec00304 	addi	sp,sp,12
   25650:	f800283a 	ret

00025654 <__swsetup_r>:
   25654:	008000f4 	movhi	r2,3
   25658:	10815204 	addi	r2,r2,1352
   2565c:	10800017 	ldw	r2,0(r2)
   25660:	defffd04 	addi	sp,sp,-12
   25664:	dc400115 	stw	r17,4(sp)
   25668:	dc000015 	stw	r16,0(sp)
   2566c:	dfc00215 	stw	ra,8(sp)
   25670:	2023883a 	mov	r17,r4
   25674:	2821883a 	mov	r16,r5
   25678:	10000226 	beq	r2,zero,25684 <__swsetup_r+0x30>
   2567c:	10c00e17 	ldw	r3,56(r2)
   25680:	18003d26 	beq	r3,zero,25778 <__swsetup_r+0x124>
   25684:	8080030b 	ldhu	r2,12(r16)
   25688:	10c0020c 	andi	r3,r2,8
   2568c:	18ffffcc 	andi	r3,r3,65535
   25690:	18e0001c 	xori	r3,r3,32768
   25694:	18e00004 	addi	r3,r3,-32768
   25698:	18001226 	beq	r3,zero,256e4 <__swsetup_r+0x90>
   2569c:	80c00417 	ldw	r3,16(r16)
   256a0:	18001f26 	beq	r3,zero,25720 <__swsetup_r+0xcc>
   256a4:	1100004c 	andi	r4,r2,1
   256a8:	2000261e 	bne	r4,zero,25744 <__swsetup_r+0xf0>
   256ac:	1080008c 	andi	r2,r2,2
   256b0:	10bfffcc 	andi	r2,r2,65535
   256b4:	10a0001c 	xori	r2,r2,32768
   256b8:	10a00004 	addi	r2,r2,-32768
   256bc:	1000311e 	bne	r2,zero,25784 <__swsetup_r+0x130>
   256c0:	80800517 	ldw	r2,20(r16)
   256c4:	80800215 	stw	r2,8(r16)
   256c8:	18002326 	beq	r3,zero,25758 <__swsetup_r+0x104>
   256cc:	0005883a 	mov	r2,zero
   256d0:	dfc00217 	ldw	ra,8(sp)
   256d4:	dc400117 	ldw	r17,4(sp)
   256d8:	dc000017 	ldw	r16,0(sp)
   256dc:	dec00304 	addi	sp,sp,12
   256e0:	f800283a 	ret
   256e4:	10c0040c 	andi	r3,r2,16
   256e8:	18ffffcc 	andi	r3,r3,65535
   256ec:	18e0001c 	xori	r3,r3,32768
   256f0:	18e00004 	addi	r3,r3,-32768
   256f4:	18001e26 	beq	r3,zero,25770 <__swsetup_r+0x11c>
   256f8:	10c0010c 	andi	r3,r2,4
   256fc:	18ffffcc 	andi	r3,r3,65535
   25700:	18e0001c 	xori	r3,r3,32768
   25704:	18e00004 	addi	r3,r3,-32768
   25708:	1800211e 	bne	r3,zero,25790 <__swsetup_r+0x13c>
   2570c:	80c00417 	ldw	r3,16(r16)
   25710:	11400214 	ori	r5,r2,8
   25714:	8140030d 	sth	r5,12(r16)
   25718:	2805883a 	mov	r2,r5
   2571c:	183fe11e 	bne	r3,zero,256a4 <__swsetup_r+0x50>
   25720:	1140a00c 	andi	r5,r2,640
   25724:	01008004 	movi	r4,512
   25728:	293fde26 	beq	r5,r4,256a4 <__swsetup_r+0x50>
   2572c:	8809883a 	mov	r4,r17
   25730:	800b883a 	mov	r5,r16
   25734:	00226000 	call	22600 <__smakebuf_r>
   25738:	8080030b 	ldhu	r2,12(r16)
   2573c:	80c00417 	ldw	r3,16(r16)
   25740:	003fd806 	br	256a4 <__swsetup_r+0x50>
   25744:	80800517 	ldw	r2,20(r16)
   25748:	80000215 	stw	zero,8(r16)
   2574c:	0085c83a 	sub	r2,zero,r2
   25750:	80800615 	stw	r2,24(r16)
   25754:	183fdd1e 	bne	r3,zero,256cc <__swsetup_r+0x78>
   25758:	8080030b 	ldhu	r2,12(r16)
   2575c:	1080200c 	andi	r2,r2,128
   25760:	10bfffcc 	andi	r2,r2,65535
   25764:	10a0001c 	xori	r2,r2,32768
   25768:	10a00004 	addi	r2,r2,-32768
   2576c:	103fd826 	beq	r2,zero,256d0 <__swsetup_r+0x7c>
   25770:	00bfffc4 	movi	r2,-1
   25774:	003fd606 	br	256d0 <__swsetup_r+0x7c>
   25778:	1009883a 	mov	r4,r2
   2577c:	00214480 	call	21448 <__sinit>
   25780:	003fc006 	br	25684 <__swsetup_r+0x30>
   25784:	0005883a 	mov	r2,zero
   25788:	80800215 	stw	r2,8(r16)
   2578c:	003fce06 	br	256c8 <__swsetup_r+0x74>
   25790:	81400c17 	ldw	r5,48(r16)
   25794:	28000626 	beq	r5,zero,257b0 <__swsetup_r+0x15c>
   25798:	80c01004 	addi	r3,r16,64
   2579c:	28c00326 	beq	r5,r3,257ac <__swsetup_r+0x158>
   257a0:	8809883a 	mov	r4,r17
   257a4:	0021be00 	call	21be0 <_free_r>
   257a8:	8080030b 	ldhu	r2,12(r16)
   257ac:	80000c15 	stw	zero,48(r16)
   257b0:	80c00417 	ldw	r3,16(r16)
   257b4:	013ff6c4 	movi	r4,-37
   257b8:	2084703a 	and	r2,r4,r2
   257bc:	80000115 	stw	zero,4(r16)
   257c0:	80c00015 	stw	r3,0(r16)
   257c4:	003fd206 	br	25710 <__swsetup_r+0xbc>

000257c8 <_close_r>:
   257c8:	defffd04 	addi	sp,sp,-12
   257cc:	dc400115 	stw	r17,4(sp)
   257d0:	dc000015 	stw	r16,0(sp)
   257d4:	2023883a 	mov	r17,r4
   257d8:	040000f4 	movhi	r16,3
   257dc:	84082404 	addi	r16,r16,8336
   257e0:	2809883a 	mov	r4,r5
   257e4:	dfc00215 	stw	ra,8(sp)
   257e8:	80000015 	stw	zero,0(r16)
   257ec:	002b4300 	call	2b430 <close>
   257f0:	00ffffc4 	movi	r3,-1
   257f4:	10c00526 	beq	r2,r3,2580c <_close_r+0x44>
   257f8:	dfc00217 	ldw	ra,8(sp)
   257fc:	dc400117 	ldw	r17,4(sp)
   25800:	dc000017 	ldw	r16,0(sp)
   25804:	dec00304 	addi	sp,sp,12
   25808:	f800283a 	ret
   2580c:	80c00017 	ldw	r3,0(r16)
   25810:	183ff926 	beq	r3,zero,257f8 <_close_r+0x30>
   25814:	88c00015 	stw	r3,0(r17)
   25818:	dfc00217 	ldw	ra,8(sp)
   2581c:	dc400117 	ldw	r17,4(sp)
   25820:	dc000017 	ldw	r16,0(sp)
   25824:	dec00304 	addi	sp,sp,12
   25828:	f800283a 	ret

0002582c <quorem>:
   2582c:	defff204 	addi	sp,sp,-56
   25830:	dd000815 	stw	r20,32(sp)
   25834:	20800417 	ldw	r2,16(r4)
   25838:	2d000417 	ldw	r20,16(r5)
   2583c:	dcc00715 	stw	r19,28(sp)
   25840:	dfc00d15 	stw	ra,52(sp)
   25844:	df000c15 	stw	fp,48(sp)
   25848:	ddc00b15 	stw	r23,44(sp)
   2584c:	dd800a15 	stw	r22,40(sp)
   25850:	dd400915 	stw	r21,36(sp)
   25854:	dc800615 	stw	r18,24(sp)
   25858:	dc400515 	stw	r17,20(sp)
   2585c:	dc000415 	stw	r16,16(sp)
   25860:	d9400015 	stw	r5,0(sp)
   25864:	2027883a 	mov	r19,r4
   25868:	15007d16 	blt	r2,r20,25a60 <quorem+0x234>
   2586c:	a0800104 	addi	r2,r20,4
   25870:	1085883a 	add	r2,r2,r2
   25874:	1085883a 	add	r2,r2,r2
   25878:	28ad883a 	add	r22,r5,r2
   2587c:	2085883a 	add	r2,r4,r2
   25880:	10800017 	ldw	r2,0(r2)
   25884:	b1400017 	ldw	r5,0(r22)
   25888:	a53fffc4 	addi	r20,r20,-1
   2588c:	1009883a 	mov	r4,r2
   25890:	29400044 	addi	r5,r5,1
   25894:	d8800115 	stw	r2,4(sp)
   25898:	002ad940 	call	2ad94 <__udivsi3>
   2589c:	1025883a 	mov	r18,r2
   258a0:	d8800017 	ldw	r2,0(sp)
   258a4:	9f000504 	addi	fp,r19,20
   258a8:	14000504 	addi	r16,r2,20
   258ac:	90003626 	beq	r18,zero,25988 <quorem+0x15c>
   258b0:	802b883a 	mov	r21,r16
   258b4:	e023883a 	mov	r17,fp
   258b8:	0007883a 	mov	r3,zero
   258bc:	002f883a 	mov	r23,zero
   258c0:	a9800017 	ldw	r6,0(r21)
   258c4:	900b883a 	mov	r5,r18
   258c8:	d8c00315 	stw	r3,12(sp)
   258cc:	313fffcc 	andi	r4,r6,65535
   258d0:	d9800215 	stw	r6,8(sp)
   258d4:	00210140 	call	21014 <__mulsi3>
   258d8:	d9800217 	ldw	r6,8(sp)
   258dc:	d8c00317 	ldw	r3,12(sp)
   258e0:	900b883a 	mov	r5,r18
   258e4:	3008d43a 	srli	r4,r6,16
   258e8:	1887883a 	add	r3,r3,r2
   258ec:	d8c00315 	stw	r3,12(sp)
   258f0:	00210140 	call	21014 <__mulsi3>
   258f4:	89400017 	ldw	r5,0(r17)
   258f8:	d8c00317 	ldw	r3,12(sp)
   258fc:	ad400104 	addi	r21,r21,4
   25900:	293fffcc 	andi	r4,r5,65535
   25904:	1810d43a 	srli	r8,r3,16
   25908:	25c9883a 	add	r4,r4,r23
   2590c:	18ffffcc 	andi	r3,r3,65535
   25910:	20c9c83a 	sub	r4,r4,r3
   25914:	280cd43a 	srli	r6,r5,16
   25918:	4085883a 	add	r2,r8,r2
   2591c:	2007d43a 	srai	r3,r4,16
   25920:	117fffcc 	andi	r5,r2,65535
   25924:	314bc83a 	sub	r5,r6,r5
   25928:	28cb883a 	add	r5,r5,r3
   2592c:	8940008d 	sth	r5,2(r17)
   25930:	8900000d 	sth	r4,0(r17)
   25934:	1006d43a 	srli	r3,r2,16
   25938:	282fd43a 	srai	r23,r5,16
   2593c:	8c400104 	addi	r17,r17,4
   25940:	b57fdf2e 	bgeu	r22,r21,258c0 <quorem+0x94>
   25944:	d8c00117 	ldw	r3,4(sp)
   25948:	18000f1e 	bne	r3,zero,25988 <quorem+0x15c>
   2594c:	a0800144 	addi	r2,r20,5
   25950:	1085883a 	add	r2,r2,r2
   25954:	1085883a 	add	r2,r2,r2
   25958:	9887883a 	add	r3,r19,r2
   2595c:	18bfff04 	addi	r2,r3,-4
   25960:	e080082e 	bgeu	fp,r2,25984 <quorem+0x158>
   25964:	18ffff17 	ldw	r3,-4(r3)
   25968:	18000326 	beq	r3,zero,25978 <quorem+0x14c>
   2596c:	00000506 	br	25984 <quorem+0x158>
   25970:	10c00017 	ldw	r3,0(r2)
   25974:	1800031e 	bne	r3,zero,25984 <quorem+0x158>
   25978:	10bfff04 	addi	r2,r2,-4
   2597c:	a53fffc4 	addi	r20,r20,-1
   25980:	e0bffb36 	bltu	fp,r2,25970 <quorem+0x144>
   25984:	9d000415 	stw	r20,16(r19)
   25988:	d9400017 	ldw	r5,0(sp)
   2598c:	9809883a 	mov	r4,r19
   25990:	002837c0 	call	2837c <__mcmp>
   25994:	10002516 	blt	r2,zero,25a2c <quorem+0x200>
   25998:	94800044 	addi	r18,r18,1
   2599c:	e007883a 	mov	r3,fp
   259a0:	000d883a 	mov	r6,zero
   259a4:	18800017 	ldw	r2,0(r3)
   259a8:	82000017 	ldw	r8,0(r16)
   259ac:	84000104 	addi	r16,r16,4
   259b0:	11ffffcc 	andi	r7,r2,65535
   259b4:	413fffcc 	andi	r4,r8,65535
   259b8:	398d883a 	add	r6,r7,r6
   259bc:	310fc83a 	sub	r7,r6,r4
   259c0:	4010d43a 	srli	r8,r8,16
   259c4:	100cd43a 	srli	r6,r2,16
   259c8:	3809d43a 	srai	r4,r7,16
   259cc:	19c0000d 	sth	r7,0(r3)
   259d0:	320dc83a 	sub	r6,r6,r8
   259d4:	310d883a 	add	r6,r6,r4
   259d8:	1980008d 	sth	r6,2(r3)
   259dc:	300dd43a 	srai	r6,r6,16
   259e0:	18c00104 	addi	r3,r3,4
   259e4:	b43fef2e 	bgeu	r22,r16,259a4 <quorem+0x178>
   259e8:	a0800144 	addi	r2,r20,5
   259ec:	1085883a 	add	r2,r2,r2
   259f0:	1085883a 	add	r2,r2,r2
   259f4:	9885883a 	add	r2,r19,r2
   259f8:	10c00017 	ldw	r3,0(r2)
   259fc:	18000b1e 	bne	r3,zero,25a2c <quorem+0x200>
   25a00:	10ffff04 	addi	r3,r2,-4
   25a04:	e0c0082e 	bgeu	fp,r3,25a28 <quorem+0x1fc>
   25a08:	10bfff17 	ldw	r2,-4(r2)
   25a0c:	10000326 	beq	r2,zero,25a1c <quorem+0x1f0>
   25a10:	00000506 	br	25a28 <quorem+0x1fc>
   25a14:	18800017 	ldw	r2,0(r3)
   25a18:	1000031e 	bne	r2,zero,25a28 <quorem+0x1fc>
   25a1c:	18ffff04 	addi	r3,r3,-4
   25a20:	a53fffc4 	addi	r20,r20,-1
   25a24:	e0fffb36 	bltu	fp,r3,25a14 <quorem+0x1e8>
   25a28:	9d000415 	stw	r20,16(r19)
   25a2c:	9005883a 	mov	r2,r18
   25a30:	dfc00d17 	ldw	ra,52(sp)
   25a34:	df000c17 	ldw	fp,48(sp)
   25a38:	ddc00b17 	ldw	r23,44(sp)
   25a3c:	dd800a17 	ldw	r22,40(sp)
   25a40:	dd400917 	ldw	r21,36(sp)
   25a44:	dd000817 	ldw	r20,32(sp)
   25a48:	dcc00717 	ldw	r19,28(sp)
   25a4c:	dc800617 	ldw	r18,24(sp)
   25a50:	dc400517 	ldw	r17,20(sp)
   25a54:	dc000417 	ldw	r16,16(sp)
   25a58:	dec00e04 	addi	sp,sp,56
   25a5c:	f800283a 	ret
   25a60:	0005883a 	mov	r2,zero
   25a64:	003ff206 	br	25a30 <quorem+0x204>

00025a68 <_dtoa_r>:
   25a68:	20801017 	ldw	r2,64(r4)
   25a6c:	deffdf04 	addi	sp,sp,-132
   25a70:	dcc01a15 	stw	r19,104(sp)
   25a74:	dc801915 	stw	r18,100(sp)
   25a78:	dc401815 	stw	r17,96(sp)
   25a7c:	dc001715 	stw	r16,92(sp)
   25a80:	dfc02015 	stw	ra,128(sp)
   25a84:	df001f15 	stw	fp,124(sp)
   25a88:	ddc01e15 	stw	r23,120(sp)
   25a8c:	dd801d15 	stw	r22,116(sp)
   25a90:	dd401c15 	stw	r21,112(sp)
   25a94:	dd001b15 	stw	r20,108(sp)
   25a98:	d9400315 	stw	r5,12(sp)
   25a9c:	d9c00415 	stw	r7,16(sp)
   25aa0:	2021883a 	mov	r16,r4
   25aa4:	3025883a 	mov	r18,r6
   25aa8:	dcc02317 	ldw	r19,140(sp)
   25aac:	3023883a 	mov	r17,r6
   25ab0:	10000826 	beq	r2,zero,25ad4 <_dtoa_r+0x6c>
   25ab4:	20c01117 	ldw	r3,68(r4)
   25ab8:	01800044 	movi	r6,1
   25abc:	100b883a 	mov	r5,r2
   25ac0:	30cc983a 	sll	r6,r6,r3
   25ac4:	10c00115 	stw	r3,4(r2)
   25ac8:	11800215 	stw	r6,8(r2)
   25acc:	0027ad80 	call	27ad8 <_Bfree>
   25ad0:	80001015 	stw	zero,64(r16)
   25ad4:	90002f16 	blt	r18,zero,25b94 <_dtoa_r+0x12c>
   25ad8:	98000015 	stw	zero,0(r19)
   25adc:	90dffc2c 	andhi	r3,r18,32752
   25ae0:	009ffc34 	movhi	r2,32752
   25ae4:	18801c26 	beq	r3,r2,25b58 <_dtoa_r+0xf0>
   25ae8:	d9000317 	ldw	r4,12(sp)
   25aec:	880b883a 	mov	r5,r17
   25af0:	000d883a 	mov	r6,zero
   25af4:	000f883a 	mov	r7,zero
   25af8:	002a7d40 	call	2a7d4 <__eqdf2>
   25afc:	10002c1e 	bne	r2,zero,25bb0 <_dtoa_r+0x148>
   25b00:	d9002217 	ldw	r4,136(sp)
   25b04:	d9c02417 	ldw	r7,144(sp)
   25b08:	00800044 	movi	r2,1
   25b0c:	20800015 	stw	r2,0(r4)
   25b10:	38019426 	beq	r7,zero,26164 <_dtoa_r+0x6fc>
   25b14:	008000f4 	movhi	r2,3
   25b18:	10ba0744 	addi	r2,r2,-6115
   25b1c:	38800015 	stw	r2,0(r7)
   25b20:	15ffffc4 	addi	r23,r2,-1
   25b24:	b805883a 	mov	r2,r23
   25b28:	dfc02017 	ldw	ra,128(sp)
   25b2c:	df001f17 	ldw	fp,124(sp)
   25b30:	ddc01e17 	ldw	r23,120(sp)
   25b34:	dd801d17 	ldw	r22,116(sp)
   25b38:	dd401c17 	ldw	r21,112(sp)
   25b3c:	dd001b17 	ldw	r20,108(sp)
   25b40:	dcc01a17 	ldw	r19,104(sp)
   25b44:	dc801917 	ldw	r18,100(sp)
   25b48:	dc401817 	ldw	r17,96(sp)
   25b4c:	dc001717 	ldw	r16,92(sp)
   25b50:	dec02104 	addi	sp,sp,132
   25b54:	f800283a 	ret
   25b58:	d8c02217 	ldw	r3,136(sp)
   25b5c:	d9000317 	ldw	r4,12(sp)
   25b60:	0089c3c4 	movi	r2,9999
   25b64:	18800015 	stw	r2,0(r3)
   25b68:	20016c26 	beq	r4,zero,2611c <_dtoa_r+0x6b4>
   25b6c:	05c000f4 	movhi	r23,3
   25b70:	bdfa1304 	addi	r23,r23,-6068
   25b74:	d9c02417 	ldw	r7,144(sp)
   25b78:	383fea26 	beq	r7,zero,25b24 <_dtoa_r+0xbc>
   25b7c:	b88000c7 	ldb	r2,3(r23)
   25b80:	10016d1e 	bne	r2,zero,26138 <_dtoa_r+0x6d0>
   25b84:	b88000c4 	addi	r2,r23,3
   25b88:	d8c02417 	ldw	r3,144(sp)
   25b8c:	18800015 	stw	r2,0(r3)
   25b90:	003fe406 	br	25b24 <_dtoa_r+0xbc>
   25b94:	04600034 	movhi	r17,32768
   25b98:	8c7fffc4 	addi	r17,r17,-1
   25b9c:	9462703a 	and	r17,r18,r17
   25ba0:	00800044 	movi	r2,1
   25ba4:	98800015 	stw	r2,0(r19)
   25ba8:	8825883a 	mov	r18,r17
   25bac:	003fcb06 	br	25adc <_dtoa_r+0x74>
   25bb0:	d9400317 	ldw	r5,12(sp)
   25bb4:	9028d53a 	srli	r20,r18,20
   25bb8:	d8800204 	addi	r2,sp,8
   25bbc:	d8800015 	stw	r2,0(sp)
   25bc0:	8009883a 	mov	r4,r16
   25bc4:	880d883a 	mov	r6,r17
   25bc8:	d9c00104 	addi	r7,sp,4
   25bcc:	00287240 	call	28724 <__d2b>
   25bd0:	a501ffcc 	andi	r20,r20,2047
   25bd4:	1039883a 	mov	fp,r2
   25bd8:	a001591e 	bne	r20,zero,26140 <_dtoa_r+0x6d8>
   25bdc:	dd400217 	ldw	r21,8(sp)
   25be0:	dd000117 	ldw	r20,4(sp)
   25be4:	00befbc4 	movi	r2,-1041
   25be8:	ad29883a 	add	r20,r21,r20
   25bec:	a082d216 	blt	r20,r2,26738 <_dtoa_r+0xcd0>
   25bf0:	d8c00317 	ldw	r3,12(sp)
   25bf4:	013f0384 	movi	r4,-1010
   25bf8:	2509c83a 	sub	r4,r4,r20
   25bfc:	a0810484 	addi	r2,r20,1042
   25c00:	9124983a 	sll	r18,r18,r4
   25c04:	1884d83a 	srl	r2,r3,r2
   25c08:	9088b03a 	or	r4,r18,r2
   25c0c:	002ab580 	call	2ab58 <__floatunsidf>
   25c10:	1009883a 	mov	r4,r2
   25c14:	017f8434 	movhi	r5,65040
   25c18:	00800044 	movi	r2,1
   25c1c:	194b883a 	add	r5,r3,r5
   25c20:	a53fffc4 	addi	r20,r20,-1
   25c24:	d8800f15 	stw	r2,60(sp)
   25c28:	000d883a 	mov	r6,zero
   25c2c:	01cffe34 	movhi	r7,16376
   25c30:	002a2dc0 	call	2a2dc <__subdf3>
   25c34:	1009883a 	mov	r4,r2
   25c38:	180b883a 	mov	r5,r3
   25c3c:	0198dbf4 	movhi	r6,25455
   25c40:	3190d844 	addi	r6,r6,17249
   25c44:	01cff4f4 	movhi	r7,16339
   25c48:	39e1e9c4 	addi	r7,r7,-30809
   25c4c:	002a33c0 	call	2a33c <__muldf3>
   25c50:	180b883a 	mov	r5,r3
   25c54:	01a2d874 	movhi	r6,35681
   25c58:	31b22cc4 	addi	r6,r6,-14157
   25c5c:	01cff1f4 	movhi	r7,16327
   25c60:	39e28a04 	addi	r7,r7,-30168
   25c64:	1009883a 	mov	r4,r2
   25c68:	002a2880 	call	2a288 <__adddf3>
   25c6c:	a009883a 	mov	r4,r20
   25c70:	1027883a 	mov	r19,r2
   25c74:	1825883a 	mov	r18,r3
   25c78:	002a9b00 	call	2a9b0 <__floatsidf>
   25c7c:	1009883a 	mov	r4,r2
   25c80:	180b883a 	mov	r5,r3
   25c84:	019427f4 	movhi	r6,20639
   25c88:	319e7ec4 	addi	r6,r6,31227
   25c8c:	01cff4f4 	movhi	r7,16339
   25c90:	39d104c4 	addi	r7,r7,17427
   25c94:	002a33c0 	call	2a33c <__muldf3>
   25c98:	9809883a 	mov	r4,r19
   25c9c:	900b883a 	mov	r5,r18
   25ca0:	100d883a 	mov	r6,r2
   25ca4:	180f883a 	mov	r7,r3
   25ca8:	002a2880 	call	2a288 <__adddf3>
   25cac:	1009883a 	mov	r4,r2
   25cb0:	180b883a 	mov	r5,r3
   25cb4:	1027883a 	mov	r19,r2
   25cb8:	1825883a 	mov	r18,r3
   25cbc:	002aa840 	call	2aa84 <__fixdfsi>
   25cc0:	9809883a 	mov	r4,r19
   25cc4:	900b883a 	mov	r5,r18
   25cc8:	000d883a 	mov	r6,zero
   25ccc:	000f883a 	mov	r7,zero
   25cd0:	d8800615 	stw	r2,24(sp)
   25cd4:	002a9540 	call	2a954 <__ltdf2>
   25cd8:	10027e16 	blt	r2,zero,266d4 <_dtoa_r+0xc6c>
   25cdc:	d8c00617 	ldw	r3,24(sp)
   25ce0:	00800584 	movi	r2,22
   25ce4:	10c26c36 	bltu	r2,r3,26698 <_dtoa_r+0xc30>
   25ce8:	180490fa 	slli	r2,r3,3
   25cec:	00c000f4 	movhi	r3,3
   25cf0:	18fa3804 	addi	r3,r3,-5920
   25cf4:	d9800317 	ldw	r6,12(sp)
   25cf8:	1885883a 	add	r2,r3,r2
   25cfc:	11000017 	ldw	r4,0(r2)
   25d00:	11400117 	ldw	r5,4(r2)
   25d04:	880f883a 	mov	r7,r17
   25d08:	002a88c0 	call	2a88c <__gtdf2>
   25d0c:	00828f0e 	bge	zero,r2,2674c <_dtoa_r+0xce4>
   25d10:	d8800617 	ldw	r2,24(sp)
   25d14:	d8000d15 	stw	zero,52(sp)
   25d18:	10bfffc4 	addi	r2,r2,-1
   25d1c:	d8800615 	stw	r2,24(sp)
   25d20:	ad29c83a 	sub	r20,r21,r20
   25d24:	a53fffc4 	addi	r20,r20,-1
   25d28:	a0026616 	blt	r20,zero,266c4 <_dtoa_r+0xc5c>
   25d2c:	dd000715 	stw	r20,28(sp)
   25d30:	d8000815 	stw	zero,32(sp)
   25d34:	d8800617 	ldw	r2,24(sp)
   25d38:	10025a16 	blt	r2,zero,266a4 <_dtoa_r+0xc3c>
   25d3c:	d8c00717 	ldw	r3,28(sp)
   25d40:	d8800b15 	stw	r2,44(sp)
   25d44:	d8000a15 	stw	zero,40(sp)
   25d48:	1887883a 	add	r3,r3,r2
   25d4c:	d8c00715 	stw	r3,28(sp)
   25d50:	d9c00417 	ldw	r7,16(sp)
   25d54:	00800244 	movi	r2,9
   25d58:	11c10536 	bltu	r2,r7,26170 <_dtoa_r+0x708>
   25d5c:	00800144 	movi	r2,5
   25d60:	11c4c60e 	bge	r2,r7,2707c <_dtoa_r+0x1614>
   25d64:	39ffff04 	addi	r7,r7,-4
   25d68:	d9c00415 	stw	r7,16(sp)
   25d6c:	0027883a 	mov	r19,zero
   25d70:	d9c00417 	ldw	r7,16(sp)
   25d74:	008000c4 	movi	r2,3
   25d78:	3883a226 	beq	r7,r2,26c04 <_dtoa_r+0x119c>
   25d7c:	11c2bc16 	blt	r2,r7,26870 <_dtoa_r+0xe08>
   25d80:	00800084 	movi	r2,2
   25d84:	3880fb1e 	bne	r7,r2,26174 <_dtoa_r+0x70c>
   25d88:	d8000c15 	stw	zero,48(sp)
   25d8c:	d9002117 	ldw	r4,132(sp)
   25d90:	0103ae0e 	bge	zero,r4,26c4c <_dtoa_r+0x11e4>
   25d94:	2025883a 	mov	r18,r4
   25d98:	d9000e15 	stw	r4,56(sp)
   25d9c:	d9000915 	stw	r4,36(sp)
   25da0:	80001115 	stw	zero,68(r16)
   25da4:	008005c4 	movi	r2,23
   25da8:	1484b22e 	bgeu	r2,r18,27074 <_dtoa_r+0x160c>
   25dac:	00c00044 	movi	r3,1
   25db0:	00800104 	movi	r2,4
   25db4:	1085883a 	add	r2,r2,r2
   25db8:	11000504 	addi	r4,r2,20
   25dbc:	180b883a 	mov	r5,r3
   25dc0:	18c00044 	addi	r3,r3,1
   25dc4:	913ffb2e 	bgeu	r18,r4,25db4 <_dtoa_r+0x34c>
   25dc8:	81401115 	stw	r5,68(r16)
   25dcc:	8009883a 	mov	r4,r16
   25dd0:	0027a300 	call	27a30 <_Balloc>
   25dd4:	102f883a 	mov	r23,r2
   25dd8:	80801015 	stw	r2,64(r16)
   25ddc:	00800384 	movi	r2,14
   25de0:	1480f036 	bltu	r2,r18,261a4 <_dtoa_r+0x73c>
   25de4:	9800ef26 	beq	r19,zero,261a4 <_dtoa_r+0x73c>
   25de8:	d8800617 	ldw	r2,24(sp)
   25dec:	00839c0e 	bge	zero,r2,26c60 <_dtoa_r+0x11f8>
   25df0:	d8c00617 	ldw	r3,24(sp)
   25df4:	108003cc 	andi	r2,r2,15
   25df8:	100490fa 	slli	r2,r2,3
   25dfc:	182bd13a 	srai	r21,r3,4
   25e00:	00c000f4 	movhi	r3,3
   25e04:	18fa3804 	addi	r3,r3,-5920
   25e08:	1885883a 	add	r2,r3,r2
   25e0c:	a8c0040c 	andi	r3,r21,16
   25e10:	12800017 	ldw	r10,0(r2)
   25e14:	15800117 	ldw	r22,4(r2)
   25e18:	18038726 	beq	r3,zero,26c38 <_dtoa_r+0x11d0>
   25e1c:	008000f4 	movhi	r2,3
   25e20:	10ba2e04 	addi	r2,r2,-5960
   25e24:	11800817 	ldw	r6,32(r2)
   25e28:	11c00917 	ldw	r7,36(r2)
   25e2c:	d9000317 	ldw	r4,12(sp)
   25e30:	880b883a 	mov	r5,r17
   25e34:	da801515 	stw	r10,84(sp)
   25e38:	002a6200 	call	2a620 <__divdf3>
   25e3c:	da801517 	ldw	r10,84(sp)
   25e40:	d8801015 	stw	r2,64(sp)
   25e44:	1829883a 	mov	r20,r3
   25e48:	ad4003cc 	andi	r21,r21,15
   25e4c:	048000c4 	movi	r18,3
   25e50:	a8001126 	beq	r21,zero,25e98 <_dtoa_r+0x430>
   25e54:	04c000f4 	movhi	r19,3
   25e58:	9cfa2e04 	addi	r19,r19,-5960
   25e5c:	5005883a 	mov	r2,r10
   25e60:	b007883a 	mov	r3,r22
   25e64:	a980004c 	andi	r6,r21,1
   25e68:	1009883a 	mov	r4,r2
   25e6c:	a82bd07a 	srai	r21,r21,1
   25e70:	180b883a 	mov	r5,r3
   25e74:	30000426 	beq	r6,zero,25e88 <_dtoa_r+0x420>
   25e78:	99800017 	ldw	r6,0(r19)
   25e7c:	99c00117 	ldw	r7,4(r19)
   25e80:	94800044 	addi	r18,r18,1
   25e84:	002a33c0 	call	2a33c <__muldf3>
   25e88:	9cc00204 	addi	r19,r19,8
   25e8c:	a83ff51e 	bne	r21,zero,25e64 <_dtoa_r+0x3fc>
   25e90:	1015883a 	mov	r10,r2
   25e94:	182d883a 	mov	r22,r3
   25e98:	d9001017 	ldw	r4,64(sp)
   25e9c:	a00b883a 	mov	r5,r20
   25ea0:	500d883a 	mov	r6,r10
   25ea4:	b00f883a 	mov	r7,r22
   25ea8:	002a6200 	call	2a620 <__divdf3>
   25eac:	1027883a 	mov	r19,r2
   25eb0:	1829883a 	mov	r20,r3
   25eb4:	d8c00d17 	ldw	r3,52(sp)
   25eb8:	18000626 	beq	r3,zero,25ed4 <_dtoa_r+0x46c>
   25ebc:	9809883a 	mov	r4,r19
   25ec0:	a00b883a 	mov	r5,r20
   25ec4:	000d883a 	mov	r6,zero
   25ec8:	01cffc34 	movhi	r7,16368
   25ecc:	002a9540 	call	2a954 <__ltdf2>
   25ed0:	10040e16 	blt	r2,zero,26f0c <_dtoa_r+0x14a4>
   25ed4:	9009883a 	mov	r4,r18
   25ed8:	002a9b00 	call	2a9b0 <__floatsidf>
   25edc:	1009883a 	mov	r4,r2
   25ee0:	180b883a 	mov	r5,r3
   25ee4:	980d883a 	mov	r6,r19
   25ee8:	a00f883a 	mov	r7,r20
   25eec:	002a33c0 	call	2a33c <__muldf3>
   25ef0:	1009883a 	mov	r4,r2
   25ef4:	180b883a 	mov	r5,r3
   25ef8:	000d883a 	mov	r6,zero
   25efc:	01d00734 	movhi	r7,16412
   25f00:	002a2880 	call	2a288 <__adddf3>
   25f04:	057f3034 	movhi	r21,64704
   25f08:	1d6b883a 	add	r21,r3,r21
   25f0c:	d8c00917 	ldw	r3,36(sp)
   25f10:	1025883a 	mov	r18,r2
   25f14:	18031f26 	beq	r3,zero,26b94 <_dtoa_r+0x112c>
   25f18:	d8800617 	ldw	r2,24(sp)
   25f1c:	dac00917 	ldw	r11,36(sp)
   25f20:	d8801315 	stw	r2,76(sp)
   25f24:	d8c00c17 	ldw	r3,48(sp)
   25f28:	18039026 	beq	r3,zero,26d6c <_dtoa_r+0x1304>
   25f2c:	58bfffc4 	addi	r2,r11,-1
   25f30:	100490fa 	slli	r2,r2,3
   25f34:	00c000f4 	movhi	r3,3
   25f38:	18fa3804 	addi	r3,r3,-5920
   25f3c:	0009883a 	mov	r4,zero
   25f40:	1885883a 	add	r2,r3,r2
   25f44:	11800017 	ldw	r6,0(r2)
   25f48:	11c00117 	ldw	r7,4(r2)
   25f4c:	014ff834 	movhi	r5,16352
   25f50:	dac01615 	stw	r11,88(sp)
   25f54:	002a6200 	call	2a620 <__divdf3>
   25f58:	900d883a 	mov	r6,r18
   25f5c:	a80f883a 	mov	r7,r21
   25f60:	1009883a 	mov	r4,r2
   25f64:	180b883a 	mov	r5,r3
   25f68:	002a2dc0 	call	2a2dc <__subdf3>
   25f6c:	a00b883a 	mov	r5,r20
   25f70:	9809883a 	mov	r4,r19
   25f74:	182b883a 	mov	r21,r3
   25f78:	d8801015 	stw	r2,64(sp)
   25f7c:	002aa840 	call	2aa84 <__fixdfsi>
   25f80:	1009883a 	mov	r4,r2
   25f84:	d8801515 	stw	r2,84(sp)
   25f88:	002a9b00 	call	2a9b0 <__floatsidf>
   25f8c:	9809883a 	mov	r4,r19
   25f90:	a00b883a 	mov	r5,r20
   25f94:	100d883a 	mov	r6,r2
   25f98:	180f883a 	mov	r7,r3
   25f9c:	002a2dc0 	call	2a2dc <__subdf3>
   25fa0:	da401517 	ldw	r9,84(sp)
   25fa4:	d9001017 	ldw	r4,64(sp)
   25fa8:	a80b883a 	mov	r5,r21
   25fac:	4d000c04 	addi	r20,r9,48
   25fb0:	bd000005 	stb	r20,0(r23)
   25fb4:	100d883a 	mov	r6,r2
   25fb8:	180f883a 	mov	r7,r3
   25fbc:	bd800044 	addi	r22,r23,1
   25fc0:	1025883a 	mov	r18,r2
   25fc4:	1827883a 	mov	r19,r3
   25fc8:	002a88c0 	call	2a88c <__gtdf2>
   25fcc:	00842216 	blt	zero,r2,27058 <_dtoa_r+0x15f0>
   25fd0:	0009883a 	mov	r4,zero
   25fd4:	014ffc34 	movhi	r5,16368
   25fd8:	900d883a 	mov	r6,r18
   25fdc:	980f883a 	mov	r7,r19
   25fe0:	002a2dc0 	call	2a2dc <__subdf3>
   25fe4:	d9001017 	ldw	r4,64(sp)
   25fe8:	a80b883a 	mov	r5,r21
   25fec:	100d883a 	mov	r6,r2
   25ff0:	180f883a 	mov	r7,r3
   25ff4:	002a88c0 	call	2a88c <__gtdf2>
   25ff8:	dac01617 	ldw	r11,88(sp)
   25ffc:	00841316 	blt	zero,r2,2704c <_dtoa_r+0x15e4>
   26000:	00800044 	movi	r2,1
   26004:	12c0670e 	bge	r2,r11,261a4 <_dtoa_r+0x73c>
   26008:	bad7883a 	add	r11,r23,r11
   2600c:	df001115 	stw	fp,68(sp)
   26010:	dc401215 	stw	r17,72(sp)
   26014:	5839883a 	mov	fp,r11
   26018:	dc401017 	ldw	r17,64(sp)
   2601c:	00000806 	br	26040 <_dtoa_r+0x5d8>
   26020:	002a2dc0 	call	2a2dc <__subdf3>
   26024:	1009883a 	mov	r4,r2
   26028:	180b883a 	mov	r5,r3
   2602c:	880d883a 	mov	r6,r17
   26030:	a80f883a 	mov	r7,r21
   26034:	002a9540 	call	2a954 <__ltdf2>
   26038:	1003ee16 	blt	r2,zero,26ff4 <_dtoa_r+0x158c>
   2603c:	b703f126 	beq	r22,fp,27004 <_dtoa_r+0x159c>
   26040:	8809883a 	mov	r4,r17
   26044:	a80b883a 	mov	r5,r21
   26048:	000d883a 	mov	r6,zero
   2604c:	01d00934 	movhi	r7,16420
   26050:	002a33c0 	call	2a33c <__muldf3>
   26054:	000d883a 	mov	r6,zero
   26058:	01d00934 	movhi	r7,16420
   2605c:	9009883a 	mov	r4,r18
   26060:	980b883a 	mov	r5,r19
   26064:	1023883a 	mov	r17,r2
   26068:	182b883a 	mov	r21,r3
   2606c:	002a33c0 	call	2a33c <__muldf3>
   26070:	180b883a 	mov	r5,r3
   26074:	1009883a 	mov	r4,r2
   26078:	1825883a 	mov	r18,r3
   2607c:	1027883a 	mov	r19,r2
   26080:	002aa840 	call	2aa84 <__fixdfsi>
   26084:	1009883a 	mov	r4,r2
   26088:	1029883a 	mov	r20,r2
   2608c:	002a9b00 	call	2a9b0 <__floatsidf>
   26090:	9809883a 	mov	r4,r19
   26094:	900b883a 	mov	r5,r18
   26098:	100d883a 	mov	r6,r2
   2609c:	180f883a 	mov	r7,r3
   260a0:	002a2dc0 	call	2a2dc <__subdf3>
   260a4:	a5000c04 	addi	r20,r20,48
   260a8:	b5000005 	stb	r20,0(r22)
   260ac:	1009883a 	mov	r4,r2
   260b0:	180b883a 	mov	r5,r3
   260b4:	880d883a 	mov	r6,r17
   260b8:	a80f883a 	mov	r7,r21
   260bc:	1025883a 	mov	r18,r2
   260c0:	1827883a 	mov	r19,r3
   260c4:	002a9540 	call	2a954 <__ltdf2>
   260c8:	b5800044 	addi	r22,r22,1
   260cc:	0009883a 	mov	r4,zero
   260d0:	014ffc34 	movhi	r5,16368
   260d4:	900d883a 	mov	r6,r18
   260d8:	980f883a 	mov	r7,r19
   260dc:	103fd00e 	bge	r2,zero,26020 <_dtoa_r+0x5b8>
   260e0:	d9001317 	ldw	r4,76(sp)
   260e4:	df001117 	ldw	fp,68(sp)
   260e8:	d9000615 	stw	r4,24(sp)
   260ec:	8009883a 	mov	r4,r16
   260f0:	e00b883a 	mov	r5,fp
   260f4:	0027ad80 	call	27ad8 <_Bfree>
   260f8:	d9c00617 	ldw	r7,24(sp)
   260fc:	d8c02217 	ldw	r3,136(sp)
   26100:	d9002417 	ldw	r4,144(sp)
   26104:	b0000005 	stb	zero,0(r22)
   26108:	38800044 	addi	r2,r7,1
   2610c:	18800015 	stw	r2,0(r3)
   26110:	203e8426 	beq	r4,zero,25b24 <_dtoa_r+0xbc>
   26114:	25800015 	stw	r22,0(r4)
   26118:	003e8206 	br	25b24 <_dtoa_r+0xbc>
   2611c:	00800434 	movhi	r2,16
   26120:	10bfffc4 	addi	r2,r2,-1
   26124:	90a4703a 	and	r18,r18,r2
   26128:	903e901e 	bne	r18,zero,25b6c <_dtoa_r+0x104>
   2612c:	05c000f4 	movhi	r23,3
   26130:	bdfa1004 	addi	r23,r23,-6080
   26134:	003e8f06 	br	25b74 <_dtoa_r+0x10c>
   26138:	b8800204 	addi	r2,r23,8
   2613c:	003e9206 	br	25b88 <_dtoa_r+0x120>
   26140:	01400434 	movhi	r5,16
   26144:	297fffc4 	addi	r5,r5,-1
   26148:	894a703a 	and	r5,r17,r5
   2614c:	d9000317 	ldw	r4,12(sp)
   26150:	294ffc34 	orhi	r5,r5,16368
   26154:	a53f0044 	addi	r20,r20,-1023
   26158:	dd400217 	ldw	r21,8(sp)
   2615c:	d8000f15 	stw	zero,60(sp)
   26160:	003eb106 	br	25c28 <_dtoa_r+0x1c0>
   26164:	05c000f4 	movhi	r23,3
   26168:	bdfa0704 	addi	r23,r23,-6116
   2616c:	003e6d06 	br	25b24 <_dtoa_r+0xbc>
   26170:	d8000415 	stw	zero,16(sp)
   26174:	80001115 	stw	zero,68(r16)
   26178:	8009883a 	mov	r4,r16
   2617c:	000b883a 	mov	r5,zero
   26180:	0027a300 	call	27a30 <_Balloc>
   26184:	01ffffc4 	movi	r7,-1
   26188:	102f883a 	mov	r23,r2
   2618c:	80801015 	stw	r2,64(r16)
   26190:	00800044 	movi	r2,1
   26194:	d9c00915 	stw	r7,36(sp)
   26198:	d8002115 	stw	zero,132(sp)
   2619c:	d9c00e15 	stw	r7,56(sp)
   261a0:	d8800c15 	stw	r2,48(sp)
   261a4:	d8800117 	ldw	r2,4(sp)
   261a8:	10008b16 	blt	r2,zero,263d8 <_dtoa_r+0x970>
   261ac:	d9000617 	ldw	r4,24(sp)
   261b0:	00c00384 	movi	r3,14
   261b4:	19008816 	blt	r3,r4,263d8 <_dtoa_r+0x970>
   261b8:	200490fa 	slli	r2,r4,3
   261bc:	d9c02117 	ldw	r7,132(sp)
   261c0:	00c000f4 	movhi	r3,3
   261c4:	18fa3804 	addi	r3,r3,-5920
   261c8:	1885883a 	add	r2,r3,r2
   261cc:	14800017 	ldw	r18,0(r2)
   261d0:	14c00117 	ldw	r19,4(r2)
   261d4:	3801c916 	blt	r7,zero,268fc <_dtoa_r+0xe94>
   261d8:	d9000317 	ldw	r4,12(sp)
   261dc:	900d883a 	mov	r6,r18
   261e0:	980f883a 	mov	r7,r19
   261e4:	880b883a 	mov	r5,r17
   261e8:	002a6200 	call	2a620 <__divdf3>
   261ec:	180b883a 	mov	r5,r3
   261f0:	1009883a 	mov	r4,r2
   261f4:	002aa840 	call	2aa84 <__fixdfsi>
   261f8:	1009883a 	mov	r4,r2
   261fc:	102b883a 	mov	r21,r2
   26200:	002a9b00 	call	2a9b0 <__floatsidf>
   26204:	1009883a 	mov	r4,r2
   26208:	180b883a 	mov	r5,r3
   2620c:	900d883a 	mov	r6,r18
   26210:	980f883a 	mov	r7,r19
   26214:	002a33c0 	call	2a33c <__muldf3>
   26218:	d9000317 	ldw	r4,12(sp)
   2621c:	880b883a 	mov	r5,r17
   26220:	100d883a 	mov	r6,r2
   26224:	180f883a 	mov	r7,r3
   26228:	002a2dc0 	call	2a2dc <__subdf3>
   2622c:	d9c00917 	ldw	r7,36(sp)
   26230:	1009883a 	mov	r4,r2
   26234:	a8800c04 	addi	r2,r21,48
   26238:	b8800005 	stb	r2,0(r23)
   2623c:	01800044 	movi	r6,1
   26240:	180b883a 	mov	r5,r3
   26244:	2005883a 	mov	r2,r4
   26248:	bd800044 	addi	r22,r23,1
   2624c:	39803726 	beq	r7,r6,2632c <_dtoa_r+0x8c4>
   26250:	000d883a 	mov	r6,zero
   26254:	01d00934 	movhi	r7,16420
   26258:	002a33c0 	call	2a33c <__muldf3>
   2625c:	1009883a 	mov	r4,r2
   26260:	180b883a 	mov	r5,r3
   26264:	000d883a 	mov	r6,zero
   26268:	000f883a 	mov	r7,zero
   2626c:	1029883a 	mov	r20,r2
   26270:	1823883a 	mov	r17,r3
   26274:	002a7d40 	call	2a7d4 <__eqdf2>
   26278:	103f9c26 	beq	r2,zero,260ec <_dtoa_r+0x684>
   2627c:	dd400917 	ldw	r21,36(sp)
   26280:	dc000415 	stw	r16,16(sp)
   26284:	00000906 	br	262ac <_dtoa_r+0x844>
   26288:	002a33c0 	call	2a33c <__muldf3>
   2628c:	1009883a 	mov	r4,r2
   26290:	180b883a 	mov	r5,r3
   26294:	000d883a 	mov	r6,zero
   26298:	000f883a 	mov	r7,zero
   2629c:	1029883a 	mov	r20,r2
   262a0:	1823883a 	mov	r17,r3
   262a4:	002a7d40 	call	2a7d4 <__eqdf2>
   262a8:	10022926 	beq	r2,zero,26b50 <_dtoa_r+0x10e8>
   262ac:	900d883a 	mov	r6,r18
   262b0:	980f883a 	mov	r7,r19
   262b4:	a009883a 	mov	r4,r20
   262b8:	880b883a 	mov	r5,r17
   262bc:	002a6200 	call	2a620 <__divdf3>
   262c0:	180b883a 	mov	r5,r3
   262c4:	1009883a 	mov	r4,r2
   262c8:	002aa840 	call	2aa84 <__fixdfsi>
   262cc:	1009883a 	mov	r4,r2
   262d0:	1021883a 	mov	r16,r2
   262d4:	002a9b00 	call	2a9b0 <__floatsidf>
   262d8:	1009883a 	mov	r4,r2
   262dc:	180b883a 	mov	r5,r3
   262e0:	900d883a 	mov	r6,r18
   262e4:	980f883a 	mov	r7,r19
   262e8:	002a33c0 	call	2a33c <__muldf3>
   262ec:	a009883a 	mov	r4,r20
   262f0:	880b883a 	mov	r5,r17
   262f4:	100d883a 	mov	r6,r2
   262f8:	180f883a 	mov	r7,r3
   262fc:	002a2dc0 	call	2a2dc <__subdf3>
   26300:	82400c04 	addi	r9,r16,48
   26304:	b2400005 	stb	r9,0(r22)
   26308:	b5800044 	addi	r22,r22,1
   2630c:	b5d3c83a 	sub	r9,r22,r23
   26310:	000d883a 	mov	r6,zero
   26314:	01d00934 	movhi	r7,16420
   26318:	1009883a 	mov	r4,r2
   2631c:	180b883a 	mov	r5,r3
   26320:	aa7fd91e 	bne	r21,r9,26288 <_dtoa_r+0x820>
   26324:	802b883a 	mov	r21,r16
   26328:	dc000417 	ldw	r16,16(sp)
   2632c:	1009883a 	mov	r4,r2
   26330:	180b883a 	mov	r5,r3
   26334:	100d883a 	mov	r6,r2
   26338:	180f883a 	mov	r7,r3
   2633c:	002a2880 	call	2a288 <__adddf3>
   26340:	9009883a 	mov	r4,r18
   26344:	980b883a 	mov	r5,r19
   26348:	100d883a 	mov	r6,r2
   2634c:	180f883a 	mov	r7,r3
   26350:	1023883a 	mov	r17,r2
   26354:	1829883a 	mov	r20,r3
   26358:	002a9540 	call	2a954 <__ltdf2>
   2635c:	10000816 	blt	r2,zero,26380 <_dtoa_r+0x918>
   26360:	9009883a 	mov	r4,r18
   26364:	980b883a 	mov	r5,r19
   26368:	880d883a 	mov	r6,r17
   2636c:	a00f883a 	mov	r7,r20
   26370:	002a7d40 	call	2a7d4 <__eqdf2>
   26374:	103f5d1e 	bne	r2,zero,260ec <_dtoa_r+0x684>
   26378:	ad40004c 	andi	r21,r21,1
   2637c:	a83f5b26 	beq	r21,zero,260ec <_dtoa_r+0x684>
   26380:	b53fffc3 	ldbu	r20,-1(r22)
   26384:	b0ffff84 	addi	r3,r22,-2
   26388:	01400e44 	movi	r5,57
   2638c:	00000306 	br	2639c <_dtoa_r+0x934>
   26390:	1d000003 	ldbu	r20,0(r3)
   26394:	102d883a 	mov	r22,r2
   26398:	18ffffc4 	addi	r3,r3,-1
   2639c:	a1003fcc 	andi	r4,r20,255
   263a0:	2100201c 	xori	r4,r4,128
   263a4:	213fe004 	addi	r4,r4,-128
   263a8:	b0bfffc4 	addi	r2,r22,-1
   263ac:	2142ca1e 	bne	r4,r5,26ed8 <_dtoa_r+0x1470>
   263b0:	b8bff71e 	bne	r23,r2,26390 <_dtoa_r+0x928>
   263b4:	d8800617 	ldw	r2,24(sp)
   263b8:	05000c44 	movi	r20,49
   263bc:	10800044 	addi	r2,r2,1
   263c0:	d8800615 	stw	r2,24(sp)
   263c4:	00800c04 	movi	r2,48
   263c8:	b8800005 	stb	r2,0(r23)
   263cc:	b805883a 	mov	r2,r23
   263d0:	15000005 	stb	r20,0(r2)
   263d4:	003f4506 	br	260ec <_dtoa_r+0x684>
   263d8:	d9c00c17 	ldw	r7,48(sp)
   263dc:	3800c926 	beq	r7,zero,26704 <_dtoa_r+0xc9c>
   263e0:	d9c00417 	ldw	r7,16(sp)
   263e4:	00c00044 	movi	r3,1
   263e8:	19c16c0e 	bge	r3,r7,2699c <_dtoa_r+0xf34>
   263ec:	d9000917 	ldw	r4,36(sp)
   263f0:	d9c00a17 	ldw	r7,40(sp)
   263f4:	24ffffc4 	addi	r19,r4,-1
   263f8:	3cc20716 	blt	r7,r19,26c18 <_dtoa_r+0x11b0>
   263fc:	3ce7c83a 	sub	r19,r7,r19
   26400:	d9c00917 	ldw	r7,36(sp)
   26404:	3802ae16 	blt	r7,zero,26ec0 <_dtoa_r+0x1458>
   26408:	dc800817 	ldw	r18,32(sp)
   2640c:	d8800917 	ldw	r2,36(sp)
   26410:	d8c00817 	ldw	r3,32(sp)
   26414:	d9c00717 	ldw	r7,28(sp)
   26418:	8009883a 	mov	r4,r16
   2641c:	1887883a 	add	r3,r3,r2
   26420:	388f883a 	add	r7,r7,r2
   26424:	01400044 	movi	r5,1
   26428:	d8c00815 	stw	r3,32(sp)
   2642c:	d9c00715 	stw	r7,28(sp)
   26430:	0027e600 	call	27e60 <__i2b>
   26434:	102b883a 	mov	r21,r2
   26438:	90000a26 	beq	r18,zero,26464 <_dtoa_r+0x9fc>
   2643c:	d8800717 	ldw	r2,28(sp)
   26440:	0080080e 	bge	zero,r2,26464 <_dtoa_r+0x9fc>
   26444:	90812b16 	blt	r18,r2,268f4 <_dtoa_r+0xe8c>
   26448:	d8c00817 	ldw	r3,32(sp)
   2644c:	d9000717 	ldw	r4,28(sp)
   26450:	90a5c83a 	sub	r18,r18,r2
   26454:	1887c83a 	sub	r3,r3,r2
   26458:	2089c83a 	sub	r4,r4,r2
   2645c:	d8c00815 	stw	r3,32(sp)
   26460:	d9000715 	stw	r4,28(sp)
   26464:	d9c00a17 	ldw	r7,40(sp)
   26468:	01c0140e 	bge	zero,r7,264bc <_dtoa_r+0xa54>
   2646c:	d8800c17 	ldw	r2,48(sp)
   26470:	1001de26 	beq	r2,zero,26bec <_dtoa_r+0x1184>
   26474:	04c00e0e 	bge	zero,r19,264b0 <_dtoa_r+0xa48>
   26478:	a80b883a 	mov	r5,r21
   2647c:	8009883a 	mov	r4,r16
   26480:	980d883a 	mov	r6,r19
   26484:	00280f40 	call	280f4 <__pow5mult>
   26488:	e00d883a 	mov	r6,fp
   2648c:	8009883a 	mov	r4,r16
   26490:	100b883a 	mov	r5,r2
   26494:	102b883a 	mov	r21,r2
   26498:	0027e9c0 	call	27e9c <__multiply>
   2649c:	1029883a 	mov	r20,r2
   264a0:	e00b883a 	mov	r5,fp
   264a4:	8009883a 	mov	r4,r16
   264a8:	0027ad80 	call	27ad8 <_Bfree>
   264ac:	a039883a 	mov	fp,r20
   264b0:	d8c00a17 	ldw	r3,40(sp)
   264b4:	1ccdc83a 	sub	r6,r3,r19
   264b8:	3001291e 	bne	r6,zero,26960 <_dtoa_r+0xef8>
   264bc:	8009883a 	mov	r4,r16
   264c0:	01400044 	movi	r5,1
   264c4:	0027e600 	call	27e60 <__i2b>
   264c8:	d9000b17 	ldw	r4,44(sp)
   264cc:	1029883a 	mov	r20,r2
   264d0:	0100050e 	bge	zero,r4,264e8 <_dtoa_r+0xa80>
   264d4:	d9800b17 	ldw	r6,44(sp)
   264d8:	8009883a 	mov	r4,r16
   264dc:	100b883a 	mov	r5,r2
   264e0:	00280f40 	call	280f4 <__pow5mult>
   264e4:	1029883a 	mov	r20,r2
   264e8:	d9c00417 	ldw	r7,16(sp)
   264ec:	00800044 	movi	r2,1
   264f0:	11c0f00e 	bge	r2,r7,268b4 <_dtoa_r+0xe4c>
   264f4:	0023883a 	mov	r17,zero
   264f8:	d8800b17 	ldw	r2,44(sp)
   264fc:	1001741e 	bne	r2,zero,26ad0 <_dtoa_r+0x1068>
   26500:	00800044 	movi	r2,1
   26504:	d8c00717 	ldw	r3,28(sp)
   26508:	10c5883a 	add	r2,r2,r3
   2650c:	108007cc 	andi	r2,r2,31
   26510:	10008026 	beq	r2,zero,26714 <_dtoa_r+0xcac>
   26514:	01000804 	movi	r4,32
   26518:	2089c83a 	sub	r4,r4,r2
   2651c:	00c00104 	movi	r3,4
   26520:	1902d00e 	bge	r3,r4,27064 <_dtoa_r+0x15fc>
   26524:	d9000817 	ldw	r4,32(sp)
   26528:	d9c00717 	ldw	r7,28(sp)
   2652c:	00c00704 	movi	r3,28
   26530:	1885c83a 	sub	r2,r3,r2
   26534:	2089883a 	add	r4,r4,r2
   26538:	388f883a 	add	r7,r7,r2
   2653c:	d9000815 	stw	r4,32(sp)
   26540:	90a5883a 	add	r18,r18,r2
   26544:	d9c00715 	stw	r7,28(sp)
   26548:	d9c00817 	ldw	r7,32(sp)
   2654c:	01c0050e 	bge	zero,r7,26564 <_dtoa_r+0xafc>
   26550:	e00b883a 	mov	r5,fp
   26554:	8009883a 	mov	r4,r16
   26558:	380d883a 	mov	r6,r7
   2655c:	00282200 	call	28220 <__lshift>
   26560:	1039883a 	mov	fp,r2
   26564:	d8800717 	ldw	r2,28(sp)
   26568:	0080050e 	bge	zero,r2,26580 <_dtoa_r+0xb18>
   2656c:	a00b883a 	mov	r5,r20
   26570:	8009883a 	mov	r4,r16
   26574:	100d883a 	mov	r6,r2
   26578:	00282200 	call	28220 <__lshift>
   2657c:	1029883a 	mov	r20,r2
   26580:	d8c00d17 	ldw	r3,52(sp)
   26584:	1801401e 	bne	r3,zero,26a88 <_dtoa_r+0x1020>
   26588:	d8800917 	ldw	r2,36(sp)
   2658c:	00815a0e 	bge	zero,r2,26af8 <_dtoa_r+0x1090>
   26590:	d8c00c17 	ldw	r3,48(sp)
   26594:	18006f1e 	bne	r3,zero,26754 <_dtoa_r+0xcec>
   26598:	b823883a 	mov	r17,r23
   2659c:	dc800917 	ldw	r18,36(sp)
   265a0:	00000206 	br	265ac <_dtoa_r+0xb44>
   265a4:	0027b000 	call	27b00 <__multadd>
   265a8:	1039883a 	mov	fp,r2
   265ac:	e009883a 	mov	r4,fp
   265b0:	a00b883a 	mov	r5,r20
   265b4:	002582c0 	call	2582c <quorem>
   265b8:	10800c04 	addi	r2,r2,48
   265bc:	88800005 	stb	r2,0(r17)
   265c0:	8c400044 	addi	r17,r17,1
   265c4:	8dc7c83a 	sub	r3,r17,r23
   265c8:	8009883a 	mov	r4,r16
   265cc:	e00b883a 	mov	r5,fp
   265d0:	01800284 	movi	r6,10
   265d4:	000f883a 	mov	r7,zero
   265d8:	1cbff216 	blt	r3,r18,265a4 <_dtoa_r+0xb3c>
   265dc:	dd800917 	ldw	r22,36(sp)
   265e0:	1007883a 	mov	r3,r2
   265e4:	05823a0e 	bge	zero,r22,26ed0 <_dtoa_r+0x1468>
   265e8:	bdad883a 	add	r22,r23,r22
   265ec:	0023883a 	mov	r17,zero
   265f0:	e00b883a 	mov	r5,fp
   265f4:	01800044 	movi	r6,1
   265f8:	8009883a 	mov	r4,r16
   265fc:	d8c01515 	stw	r3,84(sp)
   26600:	00282200 	call	28220 <__lshift>
   26604:	1009883a 	mov	r4,r2
   26608:	a00b883a 	mov	r5,r20
   2660c:	1039883a 	mov	fp,r2
   26610:	002837c0 	call	2837c <__mcmp>
   26614:	d8c01517 	ldw	r3,84(sp)
   26618:	0080d60e 	bge	zero,r2,26974 <_dtoa_r+0xf0c>
   2661c:	b13fffc3 	ldbu	r4,-1(r22)
   26620:	b0ffff84 	addi	r3,r22,-2
   26624:	01800e44 	movi	r6,57
   26628:	00000306 	br	26638 <_dtoa_r+0xbd0>
   2662c:	19000003 	ldbu	r4,0(r3)
   26630:	102d883a 	mov	r22,r2
   26634:	18ffffc4 	addi	r3,r3,-1
   26638:	21403fcc 	andi	r5,r4,255
   2663c:	2940201c 	xori	r5,r5,128
   26640:	297fe004 	addi	r5,r5,-128
   26644:	b0bfffc4 	addi	r2,r22,-1
   26648:	2981a71e 	bne	r5,r6,26ce8 <_dtoa_r+0x1280>
   2664c:	b8bff71e 	bne	r23,r2,2662c <_dtoa_r+0xbc4>
   26650:	d8800617 	ldw	r2,24(sp)
   26654:	10800044 	addi	r2,r2,1
   26658:	d8800615 	stw	r2,24(sp)
   2665c:	00800c44 	movi	r2,49
   26660:	b8800005 	stb	r2,0(r23)
   26664:	8009883a 	mov	r4,r16
   26668:	a00b883a 	mov	r5,r20
   2666c:	0027ad80 	call	27ad8 <_Bfree>
   26670:	a83e9e26 	beq	r21,zero,260ec <_dtoa_r+0x684>
   26674:	88000426 	beq	r17,zero,26688 <_dtoa_r+0xc20>
   26678:	8d400326 	beq	r17,r21,26688 <_dtoa_r+0xc20>
   2667c:	8009883a 	mov	r4,r16
   26680:	880b883a 	mov	r5,r17
   26684:	0027ad80 	call	27ad8 <_Bfree>
   26688:	8009883a 	mov	r4,r16
   2668c:	a80b883a 	mov	r5,r21
   26690:	0027ad80 	call	27ad8 <_Bfree>
   26694:	003e9506 	br	260ec <_dtoa_r+0x684>
   26698:	00c00044 	movi	r3,1
   2669c:	d8c00d15 	stw	r3,52(sp)
   266a0:	003d9f06 	br	25d20 <_dtoa_r+0x2b8>
   266a4:	d9000817 	ldw	r4,32(sp)
   266a8:	d8800617 	ldw	r2,24(sp)
   266ac:	d8000b15 	stw	zero,44(sp)
   266b0:	2089c83a 	sub	r4,r4,r2
   266b4:	0087c83a 	sub	r3,zero,r2
   266b8:	d9000815 	stw	r4,32(sp)
   266bc:	d8c00a15 	stw	r3,40(sp)
   266c0:	003da306 	br	25d50 <_dtoa_r+0x2e8>
   266c4:	0529c83a 	sub	r20,zero,r20
   266c8:	dd000815 	stw	r20,32(sp)
   266cc:	d8000715 	stw	zero,28(sp)
   266d0:	003d9806 	br	25d34 <_dtoa_r+0x2cc>
   266d4:	d9000617 	ldw	r4,24(sp)
   266d8:	002a9b00 	call	2a9b0 <__floatsidf>
   266dc:	1009883a 	mov	r4,r2
   266e0:	180b883a 	mov	r5,r3
   266e4:	980d883a 	mov	r6,r19
   266e8:	900f883a 	mov	r7,r18
   266ec:	002a8300 	call	2a830 <__nedf2>
   266f0:	103d7a26 	beq	r2,zero,25cdc <_dtoa_r+0x274>
   266f4:	d8800617 	ldw	r2,24(sp)
   266f8:	10bfffc4 	addi	r2,r2,-1
   266fc:	d8800615 	stw	r2,24(sp)
   26700:	003d7606 	br	25cdc <_dtoa_r+0x274>
   26704:	dcc00a17 	ldw	r19,40(sp)
   26708:	dc800817 	ldw	r18,32(sp)
   2670c:	002b883a 	mov	r21,zero
   26710:	003f4906 	br	26438 <_dtoa_r+0x9d0>
   26714:	00800704 	movi	r2,28
   26718:	d8c00817 	ldw	r3,32(sp)
   2671c:	d9000717 	ldw	r4,28(sp)
   26720:	90a5883a 	add	r18,r18,r2
   26724:	1887883a 	add	r3,r3,r2
   26728:	2089883a 	add	r4,r4,r2
   2672c:	d8c00815 	stw	r3,32(sp)
   26730:	d9000715 	stw	r4,28(sp)
   26734:	003f8406 	br	26548 <_dtoa_r+0xae0>
   26738:	d9c00317 	ldw	r7,12(sp)
   2673c:	013efb84 	movi	r4,-1042
   26740:	2509c83a 	sub	r4,r4,r20
   26744:	3908983a 	sll	r4,r7,r4
   26748:	003d3006 	br	25c0c <_dtoa_r+0x1a4>
   2674c:	d8000d15 	stw	zero,52(sp)
   26750:	003d7306 	br	25d20 <_dtoa_r+0x2b8>
   26754:	0480050e 	bge	zero,r18,2676c <_dtoa_r+0xd04>
   26758:	a80b883a 	mov	r5,r21
   2675c:	8009883a 	mov	r4,r16
   26760:	900d883a 	mov	r6,r18
   26764:	00282200 	call	28220 <__lshift>
   26768:	102b883a 	mov	r21,r2
   2676c:	8801611e 	bne	r17,zero,26cf4 <_dtoa_r+0x128c>
   26770:	a827883a 	mov	r19,r21
   26774:	d8c00317 	ldw	r3,12(sp)
   26778:	d9000917 	ldw	r4,36(sp)
   2677c:	b8bfffc4 	addi	r2,r23,-1
   26780:	18c0004c 	andi	r3,r3,1
   26784:	1105883a 	add	r2,r2,r4
   26788:	b825883a 	mov	r18,r23
   2678c:	d8800515 	stw	r2,20(sp)
   26790:	a823883a 	mov	r17,r21
   26794:	d8c00315 	stw	r3,12(sp)
   26798:	ddc00715 	stw	r23,28(sp)
   2679c:	e009883a 	mov	r4,fp
   267a0:	a00b883a 	mov	r5,r20
   267a4:	002582c0 	call	2582c <quorem>
   267a8:	e009883a 	mov	r4,fp
   267ac:	880b883a 	mov	r5,r17
   267b0:	102d883a 	mov	r22,r2
   267b4:	002837c0 	call	2837c <__mcmp>
   267b8:	980d883a 	mov	r6,r19
   267bc:	8009883a 	mov	r4,r16
   267c0:	a00b883a 	mov	r5,r20
   267c4:	102b883a 	mov	r21,r2
   267c8:	00283d40 	call	283d4 <__mdiff>
   267cc:	100d883a 	mov	r6,r2
   267d0:	10800317 	ldw	r2,12(r2)
   267d4:	b5c00c04 	addi	r23,r22,48
   267d8:	10008c26 	beq	r2,zero,26a0c <_dtoa_r+0xfa4>
   267dc:	8009883a 	mov	r4,r16
   267e0:	300b883a 	mov	r5,r6
   267e4:	0027ad80 	call	27ad8 <_Bfree>
   267e8:	00800044 	movi	r2,1
   267ec:	a8007116 	blt	r21,zero,269b4 <_dtoa_r+0xf4c>
   267f0:	a800041e 	bne	r21,zero,26804 <_dtoa_r+0xd9c>
   267f4:	d9c00417 	ldw	r7,16(sp)
   267f8:	3800021e 	bne	r7,zero,26804 <_dtoa_r+0xd9c>
   267fc:	d8c00317 	ldw	r3,12(sp)
   26800:	18006c26 	beq	r3,zero,269b4 <_dtoa_r+0xf4c>
   26804:	00814c16 	blt	zero,r2,26d38 <_dtoa_r+0x12d0>
   26808:	d8c00517 	ldw	r3,20(sp)
   2680c:	95400044 	addi	r21,r18,1
   26810:	95c00005 	stb	r23,0(r18)
   26814:	a82d883a 	mov	r22,r21
   26818:	90c14d26 	beq	r18,r3,26d50 <_dtoa_r+0x12e8>
   2681c:	e00b883a 	mov	r5,fp
   26820:	8009883a 	mov	r4,r16
   26824:	01800284 	movi	r6,10
   26828:	000f883a 	mov	r7,zero
   2682c:	0027b000 	call	27b00 <__multadd>
   26830:	1039883a 	mov	fp,r2
   26834:	8cc08b26 	beq	r17,r19,26a64 <_dtoa_r+0xffc>
   26838:	880b883a 	mov	r5,r17
   2683c:	01800284 	movi	r6,10
   26840:	000f883a 	mov	r7,zero
   26844:	8009883a 	mov	r4,r16
   26848:	0027b000 	call	27b00 <__multadd>
   2684c:	980b883a 	mov	r5,r19
   26850:	8009883a 	mov	r4,r16
   26854:	01800284 	movi	r6,10
   26858:	000f883a 	mov	r7,zero
   2685c:	1023883a 	mov	r17,r2
   26860:	0027b000 	call	27b00 <__multadd>
   26864:	1027883a 	mov	r19,r2
   26868:	a825883a 	mov	r18,r21
   2686c:	003fcb06 	br	2679c <_dtoa_r+0xd34>
   26870:	d9c00417 	ldw	r7,16(sp)
   26874:	00800104 	movi	r2,4
   26878:	3880e426 	beq	r7,r2,26c0c <_dtoa_r+0x11a4>
   2687c:	00800144 	movi	r2,5
   26880:	38be3c1e 	bne	r7,r2,26174 <_dtoa_r+0x70c>
   26884:	00c00044 	movi	r3,1
   26888:	d8c00c15 	stw	r3,48(sp)
   2688c:	d9c02117 	ldw	r7,132(sp)
   26890:	d8800617 	ldw	r2,24(sp)
   26894:	388f883a 	add	r7,r7,r2
   26898:	3c800044 	addi	r18,r7,1
   2689c:	d9c00e15 	stw	r7,56(sp)
   268a0:	dc800915 	stw	r18,36(sp)
   268a4:	04bd3e16 	blt	zero,r18,25da0 <_dtoa_r+0x338>
   268a8:	80001115 	stw	zero,68(r16)
   268ac:	000b883a 	mov	r5,zero
   268b0:	003d4606 	br	25dcc <_dtoa_r+0x364>
   268b4:	d8c00317 	ldw	r3,12(sp)
   268b8:	183f0e1e 	bne	r3,zero,264f4 <_dtoa_r+0xa8c>
   268bc:	00c00434 	movhi	r3,16
   268c0:	18ffffc4 	addi	r3,r3,-1
   268c4:	88c6703a 	and	r3,r17,r3
   268c8:	183f0a1e 	bne	r3,zero,264f4 <_dtoa_r+0xa8c>
   268cc:	8c5ffc2c 	andhi	r17,r17,32752
   268d0:	883f0826 	beq	r17,zero,264f4 <_dtoa_r+0xa8c>
   268d4:	d9000817 	ldw	r4,32(sp)
   268d8:	d9c00717 	ldw	r7,28(sp)
   268dc:	1023883a 	mov	r17,r2
   268e0:	2089883a 	add	r4,r4,r2
   268e4:	388f883a 	add	r7,r7,r2
   268e8:	d9000815 	stw	r4,32(sp)
   268ec:	d9c00715 	stw	r7,28(sp)
   268f0:	003f0106 	br	264f8 <_dtoa_r+0xa90>
   268f4:	9005883a 	mov	r2,r18
   268f8:	003ed306 	br	26448 <_dtoa_r+0x9e0>
   268fc:	d8800917 	ldw	r2,36(sp)
   26900:	00be3516 	blt	zero,r2,261d8 <_dtoa_r+0x770>
   26904:	1000b61e 	bne	r2,zero,26be0 <_dtoa_r+0x1178>
   26908:	9009883a 	mov	r4,r18
   2690c:	980b883a 	mov	r5,r19
   26910:	000d883a 	mov	r6,zero
   26914:	01d00534 	movhi	r7,16404
   26918:	002a33c0 	call	2a33c <__muldf3>
   2691c:	d9800317 	ldw	r6,12(sp)
   26920:	1009883a 	mov	r4,r2
   26924:	180b883a 	mov	r5,r3
   26928:	880f883a 	mov	r7,r17
   2692c:	002a8f00 	call	2a8f0 <__gedf2>
   26930:	0029883a 	mov	r20,zero
   26934:	002b883a 	mov	r21,zero
   26938:	10007e16 	blt	r2,zero,26b34 <_dtoa_r+0x10cc>
   2693c:	d8802117 	ldw	r2,132(sp)
   26940:	b82d883a 	mov	r22,r23
   26944:	0084303a 	nor	r2,zero,r2
   26948:	d8800615 	stw	r2,24(sp)
   2694c:	8009883a 	mov	r4,r16
   26950:	a00b883a 	mov	r5,r20
   26954:	0027ad80 	call	27ad8 <_Bfree>
   26958:	a83f4b1e 	bne	r21,zero,26688 <_dtoa_r+0xc20>
   2695c:	003de306 	br	260ec <_dtoa_r+0x684>
   26960:	e00b883a 	mov	r5,fp
   26964:	8009883a 	mov	r4,r16
   26968:	00280f40 	call	280f4 <__pow5mult>
   2696c:	1039883a 	mov	fp,r2
   26970:	003ed206 	br	264bc <_dtoa_r+0xa54>
   26974:	1000021e 	bne	r2,zero,26980 <_dtoa_r+0xf18>
   26978:	18c0004c 	andi	r3,r3,1
   2697c:	183f271e 	bne	r3,zero,2661c <_dtoa_r+0xbb4>
   26980:	01000c04 	movi	r4,48
   26984:	00000106 	br	2698c <_dtoa_r+0xf24>
   26988:	102d883a 	mov	r22,r2
   2698c:	b0bfffc4 	addi	r2,r22,-1
   26990:	10c00007 	ldb	r3,0(r2)
   26994:	193ffc26 	beq	r3,r4,26988 <_dtoa_r+0xf20>
   26998:	003f3206 	br	26664 <_dtoa_r+0xbfc>
   2699c:	d8c00f17 	ldw	r3,60(sp)
   269a0:	18015026 	beq	r3,zero,26ee4 <_dtoa_r+0x147c>
   269a4:	10810cc4 	addi	r2,r2,1075
   269a8:	dcc00a17 	ldw	r19,40(sp)
   269ac:	dc800817 	ldw	r18,32(sp)
   269b0:	003e9706 	br	26410 <_dtoa_r+0x9a8>
   269b4:	b807883a 	mov	r3,r23
   269b8:	182b883a 	mov	r21,r3
   269bc:	ddc00717 	ldw	r23,28(sp)
   269c0:	00800e0e 	bge	zero,r2,269fc <_dtoa_r+0xf94>
   269c4:	e00b883a 	mov	r5,fp
   269c8:	01800044 	movi	r6,1
   269cc:	8009883a 	mov	r4,r16
   269d0:	d8c01515 	stw	r3,84(sp)
   269d4:	00282200 	call	28220 <__lshift>
   269d8:	1009883a 	mov	r4,r2
   269dc:	a00b883a 	mov	r5,r20
   269e0:	1039883a 	mov	fp,r2
   269e4:	002837c0 	call	2837c <__mcmp>
   269e8:	d8c01517 	ldw	r3,84(sp)
   269ec:	0081880e 	bge	zero,r2,27010 <_dtoa_r+0x15a8>
   269f0:	00800e44 	movi	r2,57
   269f4:	b0c00c44 	addi	r3,r22,49
   269f8:	a8816326 	beq	r21,r2,26f88 <_dtoa_r+0x1520>
   269fc:	90c00005 	stb	r3,0(r18)
   26a00:	95800044 	addi	r22,r18,1
   26a04:	982b883a 	mov	r21,r19
   26a08:	003f1606 	br	26664 <_dtoa_r+0xbfc>
   26a0c:	300b883a 	mov	r5,r6
   26a10:	e009883a 	mov	r4,fp
   26a14:	d9801515 	stw	r6,84(sp)
   26a18:	002837c0 	call	2837c <__mcmp>
   26a1c:	d9801517 	ldw	r6,84(sp)
   26a20:	8009883a 	mov	r4,r16
   26a24:	d8801515 	stw	r2,84(sp)
   26a28:	300b883a 	mov	r5,r6
   26a2c:	0027ad80 	call	27ad8 <_Bfree>
   26a30:	d8801517 	ldw	r2,84(sp)
   26a34:	103f6d1e 	bne	r2,zero,267ec <_dtoa_r+0xd84>
   26a38:	d9c00417 	ldw	r7,16(sp)
   26a3c:	383f6b1e 	bne	r7,zero,267ec <_dtoa_r+0xd84>
   26a40:	d8c00317 	ldw	r3,12(sp)
   26a44:	183f691e 	bne	r3,zero,267ec <_dtoa_r+0xd84>
   26a48:	b807883a 	mov	r3,r23
   26a4c:	00800e44 	movi	r2,57
   26a50:	ddc00717 	ldw	r23,28(sp)
   26a54:	18814c26 	beq	r3,r2,26f88 <_dtoa_r+0x1520>
   26a58:	057fe80e 	bge	zero,r21,269fc <_dtoa_r+0xf94>
   26a5c:	b0c00c44 	addi	r3,r22,49
   26a60:	003fe606 	br	269fc <_dtoa_r+0xf94>
   26a64:	880b883a 	mov	r5,r17
   26a68:	8009883a 	mov	r4,r16
   26a6c:	01800284 	movi	r6,10
   26a70:	000f883a 	mov	r7,zero
   26a74:	0027b000 	call	27b00 <__multadd>
   26a78:	1023883a 	mov	r17,r2
   26a7c:	1027883a 	mov	r19,r2
   26a80:	a825883a 	mov	r18,r21
   26a84:	003f4506 	br	2679c <_dtoa_r+0xd34>
   26a88:	e009883a 	mov	r4,fp
   26a8c:	a00b883a 	mov	r5,r20
   26a90:	002837c0 	call	2837c <__mcmp>
   26a94:	103ebc0e 	bge	r2,zero,26588 <_dtoa_r+0xb20>
   26a98:	e00b883a 	mov	r5,fp
   26a9c:	8009883a 	mov	r4,r16
   26aa0:	01800284 	movi	r6,10
   26aa4:	000f883a 	mov	r7,zero
   26aa8:	0027b000 	call	27b00 <__multadd>
   26aac:	1039883a 	mov	fp,r2
   26ab0:	d8800617 	ldw	r2,24(sp)
   26ab4:	d8c00c17 	ldw	r3,48(sp)
   26ab8:	10bfffc4 	addi	r2,r2,-1
   26abc:	d8800615 	stw	r2,24(sp)
   26ac0:	1801571e 	bne	r3,zero,27020 <_dtoa_r+0x15b8>
   26ac4:	d9c00e17 	ldw	r7,56(sp)
   26ac8:	d9c00915 	stw	r7,36(sp)
   26acc:	003eae06 	br	26588 <_dtoa_r+0xb20>
   26ad0:	a0800417 	ldw	r2,16(r20)
   26ad4:	10800104 	addi	r2,r2,4
   26ad8:	1085883a 	add	r2,r2,r2
   26adc:	1085883a 	add	r2,r2,r2
   26ae0:	a085883a 	add	r2,r20,r2
   26ae4:	11000017 	ldw	r4,0(r2)
   26ae8:	0027d480 	call	27d48 <__hi0bits>
   26aec:	00c00804 	movi	r3,32
   26af0:	1885c83a 	sub	r2,r3,r2
   26af4:	003e8306 	br	26504 <_dtoa_r+0xa9c>
   26af8:	d9c00417 	ldw	r7,16(sp)
   26afc:	00800084 	movi	r2,2
   26b00:	11fea30e 	bge	r2,r7,26590 <_dtoa_r+0xb28>
   26b04:	d8800917 	ldw	r2,36(sp)
   26b08:	103f8c1e 	bne	r2,zero,2693c <_dtoa_r+0xed4>
   26b0c:	a00b883a 	mov	r5,r20
   26b10:	8009883a 	mov	r4,r16
   26b14:	01800144 	movi	r6,5
   26b18:	000f883a 	mov	r7,zero
   26b1c:	0027b000 	call	27b00 <__multadd>
   26b20:	e009883a 	mov	r4,fp
   26b24:	100b883a 	mov	r5,r2
   26b28:	1029883a 	mov	r20,r2
   26b2c:	002837c0 	call	2837c <__mcmp>
   26b30:	00bf820e 	bge	zero,r2,2693c <_dtoa_r+0xed4>
   26b34:	00800c44 	movi	r2,49
   26b38:	b8800005 	stb	r2,0(r23)
   26b3c:	d8800617 	ldw	r2,24(sp)
   26b40:	bd800044 	addi	r22,r23,1
   26b44:	10800044 	addi	r2,r2,1
   26b48:	d8800615 	stw	r2,24(sp)
   26b4c:	003f7f06 	br	2694c <_dtoa_r+0xee4>
   26b50:	dc000417 	ldw	r16,16(sp)
   26b54:	003d6506 	br	260ec <_dtoa_r+0x684>
   26b58:	9009883a 	mov	r4,r18
   26b5c:	002a9b00 	call	2a9b0 <__floatsidf>
   26b60:	1009883a 	mov	r4,r2
   26b64:	180b883a 	mov	r5,r3
   26b68:	980d883a 	mov	r6,r19
   26b6c:	a00f883a 	mov	r7,r20
   26b70:	002a33c0 	call	2a33c <__muldf3>
   26b74:	1009883a 	mov	r4,r2
   26b78:	180b883a 	mov	r5,r3
   26b7c:	000d883a 	mov	r6,zero
   26b80:	01d00734 	movhi	r7,16412
   26b84:	002a2880 	call	2a288 <__adddf3>
   26b88:	057f3034 	movhi	r21,64704
   26b8c:	1025883a 	mov	r18,r2
   26b90:	1d6b883a 	add	r21,r3,r21
   26b94:	9809883a 	mov	r4,r19
   26b98:	a00b883a 	mov	r5,r20
   26b9c:	000d883a 	mov	r6,zero
   26ba0:	01d00534 	movhi	r7,16404
   26ba4:	002a2dc0 	call	2a2dc <__subdf3>
   26ba8:	1009883a 	mov	r4,r2
   26bac:	180b883a 	mov	r5,r3
   26bb0:	900d883a 	mov	r6,r18
   26bb4:	a80f883a 	mov	r7,r21
   26bb8:	1027883a 	mov	r19,r2
   26bbc:	1829883a 	mov	r20,r3
   26bc0:	002a88c0 	call	2a88c <__gtdf2>
   26bc4:	00806616 	blt	zero,r2,26d60 <_dtoa_r+0x12f8>
   26bc8:	a9e0003c 	xorhi	r7,r21,32768
   26bcc:	9809883a 	mov	r4,r19
   26bd0:	a00b883a 	mov	r5,r20
   26bd4:	900d883a 	mov	r6,r18
   26bd8:	002a9540 	call	2a954 <__ltdf2>
   26bdc:	103d710e 	bge	r2,zero,261a4 <_dtoa_r+0x73c>
   26be0:	0029883a 	mov	r20,zero
   26be4:	002b883a 	mov	r21,zero
   26be8:	003f5406 	br	2693c <_dtoa_r+0xed4>
   26bec:	d9800a17 	ldw	r6,40(sp)
   26bf0:	e00b883a 	mov	r5,fp
   26bf4:	8009883a 	mov	r4,r16
   26bf8:	00280f40 	call	280f4 <__pow5mult>
   26bfc:	1039883a 	mov	fp,r2
   26c00:	003e2e06 	br	264bc <_dtoa_r+0xa54>
   26c04:	d8000c15 	stw	zero,48(sp)
   26c08:	003f2006 	br	2688c <_dtoa_r+0xe24>
   26c0c:	00800044 	movi	r2,1
   26c10:	d8800c15 	stw	r2,48(sp)
   26c14:	003c5d06 	br	25d8c <_dtoa_r+0x324>
   26c18:	d8c00a17 	ldw	r3,40(sp)
   26c1c:	d9000b17 	ldw	r4,44(sp)
   26c20:	dcc00a15 	stw	r19,40(sp)
   26c24:	98c5c83a 	sub	r2,r19,r3
   26c28:	2089883a 	add	r4,r4,r2
   26c2c:	d9000b15 	stw	r4,44(sp)
   26c30:	0027883a 	mov	r19,zero
   26c34:	003df206 	br	26400 <_dtoa_r+0x998>
   26c38:	d9000317 	ldw	r4,12(sp)
   26c3c:	8829883a 	mov	r20,r17
   26c40:	04800084 	movi	r18,2
   26c44:	d9001015 	stw	r4,64(sp)
   26c48:	003c8106 	br	25e50 <_dtoa_r+0x3e8>
   26c4c:	04800044 	movi	r18,1
   26c50:	dc800e15 	stw	r18,56(sp)
   26c54:	dc800915 	stw	r18,36(sp)
   26c58:	dc802115 	stw	r18,132(sp)
   26c5c:	003f1206 	br	268a8 <_dtoa_r+0xe40>
   26c60:	d8800617 	ldw	r2,24(sp)
   26c64:	00abc83a 	sub	r21,zero,r2
   26c68:	a800a426 	beq	r21,zero,26efc <_dtoa_r+0x1494>
   26c6c:	a88003cc 	andi	r2,r21,15
   26c70:	100490fa 	slli	r2,r2,3
   26c74:	00c000f4 	movhi	r3,3
   26c78:	18fa3804 	addi	r3,r3,-5920
   26c7c:	d9000317 	ldw	r4,12(sp)
   26c80:	1885883a 	add	r2,r3,r2
   26c84:	11800017 	ldw	r6,0(r2)
   26c88:	11c00117 	ldw	r7,4(r2)
   26c8c:	a82bd13a 	srai	r21,r21,4
   26c90:	880b883a 	mov	r5,r17
   26c94:	002a33c0 	call	2a33c <__muldf3>
   26c98:	1027883a 	mov	r19,r2
   26c9c:	1829883a 	mov	r20,r3
   26ca0:	a800e826 	beq	r21,zero,27044 <_dtoa_r+0x15dc>
   26ca4:	058000f4 	movhi	r22,3
   26ca8:	b5ba2e04 	addi	r22,r22,-5960
   26cac:	04800084 	movi	r18,2
   26cb0:	a980004c 	andi	r6,r21,1
   26cb4:	1009883a 	mov	r4,r2
   26cb8:	a82bd07a 	srai	r21,r21,1
   26cbc:	180b883a 	mov	r5,r3
   26cc0:	30000426 	beq	r6,zero,26cd4 <_dtoa_r+0x126c>
   26cc4:	b1800017 	ldw	r6,0(r22)
   26cc8:	b1c00117 	ldw	r7,4(r22)
   26ccc:	94800044 	addi	r18,r18,1
   26cd0:	002a33c0 	call	2a33c <__muldf3>
   26cd4:	b5800204 	addi	r22,r22,8
   26cd8:	a83ff51e 	bne	r21,zero,26cb0 <_dtoa_r+0x1248>
   26cdc:	1027883a 	mov	r19,r2
   26ce0:	1829883a 	mov	r20,r3
   26ce4:	003c7306 	br	25eb4 <_dtoa_r+0x44c>
   26ce8:	21000044 	addi	r4,r4,1
   26cec:	11000005 	stb	r4,0(r2)
   26cf0:	003e5c06 	br	26664 <_dtoa_r+0xbfc>
   26cf4:	a9400117 	ldw	r5,4(r21)
   26cf8:	8009883a 	mov	r4,r16
   26cfc:	0027a300 	call	27a30 <_Balloc>
   26d00:	a9800417 	ldw	r6,16(r21)
   26d04:	11000304 	addi	r4,r2,12
   26d08:	a9400304 	addi	r5,r21,12
   26d0c:	31800084 	addi	r6,r6,2
   26d10:	318d883a 	add	r6,r6,r6
   26d14:	318d883a 	add	r6,r6,r6
   26d18:	1023883a 	mov	r17,r2
   26d1c:	0022f540 	call	22f54 <memcpy>
   26d20:	8009883a 	mov	r4,r16
   26d24:	880b883a 	mov	r5,r17
   26d28:	01800044 	movi	r6,1
   26d2c:	00282200 	call	28220 <__lshift>
   26d30:	1027883a 	mov	r19,r2
   26d34:	003e8f06 	br	26774 <_dtoa_r+0xd0c>
   26d38:	b807883a 	mov	r3,r23
   26d3c:	00800e44 	movi	r2,57
   26d40:	ddc00717 	ldw	r23,28(sp)
   26d44:	18809026 	beq	r3,r2,26f88 <_dtoa_r+0x1520>
   26d48:	18c00044 	addi	r3,r3,1
   26d4c:	003f2b06 	br	269fc <_dtoa_r+0xf94>
   26d50:	b807883a 	mov	r3,r23
   26d54:	982b883a 	mov	r21,r19
   26d58:	ddc00717 	ldw	r23,28(sp)
   26d5c:	003e2406 	br	265f0 <_dtoa_r+0xb88>
   26d60:	0029883a 	mov	r20,zero
   26d64:	002b883a 	mov	r21,zero
   26d68:	003f7206 	br	26b34 <_dtoa_r+0x10cc>
   26d6c:	593fffc4 	addi	r4,r11,-1
   26d70:	200490fa 	slli	r2,r4,3
   26d74:	00c000f4 	movhi	r3,3
   26d78:	18fa3804 	addi	r3,r3,-5920
   26d7c:	d9001015 	stw	r4,64(sp)
   26d80:	1885883a 	add	r2,r3,r2
   26d84:	11000017 	ldw	r4,0(r2)
   26d88:	11400117 	ldw	r5,4(r2)
   26d8c:	900d883a 	mov	r6,r18
   26d90:	a80f883a 	mov	r7,r21
   26d94:	dac01615 	stw	r11,88(sp)
   26d98:	002a33c0 	call	2a33c <__muldf3>
   26d9c:	a00b883a 	mov	r5,r20
   26da0:	9809883a 	mov	r4,r19
   26da4:	d8c01215 	stw	r3,72(sp)
   26da8:	d8801115 	stw	r2,68(sp)
   26dac:	002aa840 	call	2aa84 <__fixdfsi>
   26db0:	1009883a 	mov	r4,r2
   26db4:	1025883a 	mov	r18,r2
   26db8:	002a9b00 	call	2a9b0 <__floatsidf>
   26dbc:	9809883a 	mov	r4,r19
   26dc0:	a00b883a 	mov	r5,r20
   26dc4:	100d883a 	mov	r6,r2
   26dc8:	180f883a 	mov	r7,r3
   26dcc:	94800c04 	addi	r18,r18,48
   26dd0:	002a2dc0 	call	2a2dc <__subdf3>
   26dd4:	bc800005 	stb	r18,0(r23)
   26dd8:	dac01617 	ldw	r11,88(sp)
   26ddc:	102b883a 	mov	r21,r2
   26de0:	00800044 	movi	r2,1
   26de4:	bd800044 	addi	r22,r23,1
   26de8:	1815883a 	mov	r10,r3
   26dec:	58802226 	beq	r11,r2,26e78 <_dtoa_r+0x1410>
   26df0:	bad7883a 	add	r11,r23,r11
   26df4:	dc001415 	stw	r16,80(sp)
   26df8:	a805883a 	mov	r2,r21
   26dfc:	b027883a 	mov	r19,r22
   26e00:	5821883a 	mov	r16,r11
   26e04:	882b883a 	mov	r21,r17
   26e08:	000d883a 	mov	r6,zero
   26e0c:	01d00934 	movhi	r7,16420
   26e10:	1009883a 	mov	r4,r2
   26e14:	180b883a 	mov	r5,r3
   26e18:	002a33c0 	call	2a33c <__muldf3>
   26e1c:	180b883a 	mov	r5,r3
   26e20:	1009883a 	mov	r4,r2
   26e24:	1829883a 	mov	r20,r3
   26e28:	1023883a 	mov	r17,r2
   26e2c:	002aa840 	call	2aa84 <__fixdfsi>
   26e30:	1009883a 	mov	r4,r2
   26e34:	1025883a 	mov	r18,r2
   26e38:	002a9b00 	call	2a9b0 <__floatsidf>
   26e3c:	8809883a 	mov	r4,r17
   26e40:	a00b883a 	mov	r5,r20
   26e44:	100d883a 	mov	r6,r2
   26e48:	180f883a 	mov	r7,r3
   26e4c:	94800c04 	addi	r18,r18,48
   26e50:	002a2dc0 	call	2a2dc <__subdf3>
   26e54:	9cc00044 	addi	r19,r19,1
   26e58:	9cbfffc5 	stb	r18,-1(r19)
   26e5c:	9c3fea1e 	bne	r19,r16,26e08 <_dtoa_r+0x13a0>
   26e60:	1815883a 	mov	r10,r3
   26e64:	d8c01017 	ldw	r3,64(sp)
   26e68:	dc001417 	ldw	r16,80(sp)
   26e6c:	a823883a 	mov	r17,r21
   26e70:	b0ed883a 	add	r22,r22,r3
   26e74:	102b883a 	mov	r21,r2
   26e78:	d9001117 	ldw	r4,68(sp)
   26e7c:	d9401217 	ldw	r5,72(sp)
   26e80:	000d883a 	mov	r6,zero
   26e84:	01cff834 	movhi	r7,16352
   26e88:	da801515 	stw	r10,84(sp)
   26e8c:	002a2880 	call	2a288 <__adddf3>
   26e90:	da801517 	ldw	r10,84(sp)
   26e94:	1009883a 	mov	r4,r2
   26e98:	180b883a 	mov	r5,r3
   26e9c:	500f883a 	mov	r7,r10
   26ea0:	a80d883a 	mov	r6,r21
   26ea4:	002a9540 	call	2a954 <__ltdf2>
   26ea8:	da801517 	ldw	r10,84(sp)
   26eac:	10003b0e 	bge	r2,zero,26f9c <_dtoa_r+0x1534>
   26eb0:	d9c01317 	ldw	r7,76(sp)
   26eb4:	b53fffc3 	ldbu	r20,-1(r22)
   26eb8:	d9c00615 	stw	r7,24(sp)
   26ebc:	003d3106 	br	26384 <_dtoa_r+0x91c>
   26ec0:	d8800817 	ldw	r2,32(sp)
   26ec4:	11e5c83a 	sub	r18,r2,r7
   26ec8:	0005883a 	mov	r2,zero
   26ecc:	003d5006 	br	26410 <_dtoa_r+0x9a8>
   26ed0:	05800044 	movi	r22,1
   26ed4:	003dc406 	br	265e8 <_dtoa_r+0xb80>
   26ed8:	a5000044 	addi	r20,r20,1
   26edc:	15000005 	stb	r20,0(r2)
   26ee0:	003c8206 	br	260ec <_dtoa_r+0x684>
   26ee4:	d8800217 	ldw	r2,8(sp)
   26ee8:	00c00d84 	movi	r3,54
   26eec:	dcc00a17 	ldw	r19,40(sp)
   26ef0:	1885c83a 	sub	r2,r3,r2
   26ef4:	dc800817 	ldw	r18,32(sp)
   26ef8:	003d4506 	br	26410 <_dtoa_r+0x9a8>
   26efc:	dcc00317 	ldw	r19,12(sp)
   26f00:	8829883a 	mov	r20,r17
   26f04:	04800084 	movi	r18,2
   26f08:	003bea06 	br	25eb4 <_dtoa_r+0x44c>
   26f0c:	d9000917 	ldw	r4,36(sp)
   26f10:	203f1126 	beq	r4,zero,26b58 <_dtoa_r+0x10f0>
   26f14:	d9c00e17 	ldw	r7,56(sp)
   26f18:	01fca20e 	bge	zero,r7,261a4 <_dtoa_r+0x73c>
   26f1c:	a00b883a 	mov	r5,r20
   26f20:	9809883a 	mov	r4,r19
   26f24:	000d883a 	mov	r6,zero
   26f28:	01d00934 	movhi	r7,16420
   26f2c:	002a33c0 	call	2a33c <__muldf3>
   26f30:	91000044 	addi	r4,r18,1
   26f34:	1027883a 	mov	r19,r2
   26f38:	1829883a 	mov	r20,r3
   26f3c:	002a9b00 	call	2a9b0 <__floatsidf>
   26f40:	9809883a 	mov	r4,r19
   26f44:	a00b883a 	mov	r5,r20
   26f48:	100d883a 	mov	r6,r2
   26f4c:	180f883a 	mov	r7,r3
   26f50:	002a33c0 	call	2a33c <__muldf3>
   26f54:	1009883a 	mov	r4,r2
   26f58:	180b883a 	mov	r5,r3
   26f5c:	000d883a 	mov	r6,zero
   26f60:	01d00734 	movhi	r7,16412
   26f64:	002a2880 	call	2a288 <__adddf3>
   26f68:	1025883a 	mov	r18,r2
   26f6c:	d8800617 	ldw	r2,24(sp)
   26f70:	057f3034 	movhi	r21,64704
   26f74:	1d6b883a 	add	r21,r3,r21
   26f78:	10bfffc4 	addi	r2,r2,-1
   26f7c:	d8801315 	stw	r2,76(sp)
   26f80:	dac00e17 	ldw	r11,56(sp)
   26f84:	003be706 	br	25f24 <_dtoa_r+0x4bc>
   26f88:	01000e44 	movi	r4,57
   26f8c:	91000005 	stb	r4,0(r18)
   26f90:	95800044 	addi	r22,r18,1
   26f94:	982b883a 	mov	r21,r19
   26f98:	003da106 	br	26620 <_dtoa_r+0xbb8>
   26f9c:	d9801117 	ldw	r6,68(sp)
   26fa0:	d9c01217 	ldw	r7,72(sp)
   26fa4:	0009883a 	mov	r4,zero
   26fa8:	014ff834 	movhi	r5,16352
   26fac:	da801515 	stw	r10,84(sp)
   26fb0:	002a2dc0 	call	2a2dc <__subdf3>
   26fb4:	da801517 	ldw	r10,84(sp)
   26fb8:	1009883a 	mov	r4,r2
   26fbc:	180b883a 	mov	r5,r3
   26fc0:	a80d883a 	mov	r6,r21
   26fc4:	500f883a 	mov	r7,r10
   26fc8:	002a88c0 	call	2a88c <__gtdf2>
   26fcc:	00bc750e 	bge	zero,r2,261a4 <_dtoa_r+0x73c>
   26fd0:	01000c04 	movi	r4,48
   26fd4:	00000106 	br	26fdc <_dtoa_r+0x1574>
   26fd8:	102d883a 	mov	r22,r2
   26fdc:	b0bfffc4 	addi	r2,r22,-1
   26fe0:	10c00007 	ldb	r3,0(r2)
   26fe4:	193ffc26 	beq	r3,r4,26fd8 <_dtoa_r+0x1570>
   26fe8:	d8801317 	ldw	r2,76(sp)
   26fec:	d8800615 	stw	r2,24(sp)
   26ff0:	003c3e06 	br	260ec <_dtoa_r+0x684>
   26ff4:	d9001317 	ldw	r4,76(sp)
   26ff8:	df001117 	ldw	fp,68(sp)
   26ffc:	d9000615 	stw	r4,24(sp)
   27000:	003ce006 	br	26384 <_dtoa_r+0x91c>
   27004:	df001117 	ldw	fp,68(sp)
   27008:	dc401217 	ldw	r17,72(sp)
   2700c:	003c6506 	br	261a4 <_dtoa_r+0x73c>
   27010:	103e7a1e 	bne	r2,zero,269fc <_dtoa_r+0xf94>
   27014:	1880004c 	andi	r2,r3,1
   27018:	103e7826 	beq	r2,zero,269fc <_dtoa_r+0xf94>
   2701c:	003e7406 	br	269f0 <_dtoa_r+0xf88>
   27020:	8009883a 	mov	r4,r16
   27024:	a80b883a 	mov	r5,r21
   27028:	01800284 	movi	r6,10
   2702c:	000f883a 	mov	r7,zero
   27030:	0027b000 	call	27b00 <__multadd>
   27034:	d9000e17 	ldw	r4,56(sp)
   27038:	102b883a 	mov	r21,r2
   2703c:	d9000915 	stw	r4,36(sp)
   27040:	003d5106 	br	26588 <_dtoa_r+0xb20>
   27044:	04800084 	movi	r18,2
   27048:	003b9a06 	br	25eb4 <_dtoa_r+0x44c>
   2704c:	d8c01317 	ldw	r3,76(sp)
   27050:	d8c00615 	stw	r3,24(sp)
   27054:	003ccb06 	br	26384 <_dtoa_r+0x91c>
   27058:	d8c01317 	ldw	r3,76(sp)
   2705c:	d8c00615 	stw	r3,24(sp)
   27060:	003c2206 	br	260ec <_dtoa_r+0x684>
   27064:	20fd3826 	beq	r4,r3,26548 <_dtoa_r+0xae0>
   27068:	00c00f04 	movi	r3,60
   2706c:	1885c83a 	sub	r2,r3,r2
   27070:	003da906 	br	26718 <_dtoa_r+0xcb0>
   27074:	000b883a 	mov	r5,zero
   27078:	003b5406 	br	25dcc <_dtoa_r+0x364>
   2707c:	04c00044 	movi	r19,1
   27080:	003b3b06 	br	25d70 <_dtoa_r+0x308>

00027084 <__sflags>:
   27084:	28800007 	ldb	r2,0(r5)
   27088:	00c01c84 	movi	r3,114
   2708c:	10c01826 	beq	r2,r3,270f0 <__sflags+0x6c>
   27090:	00c01dc4 	movi	r3,119
   27094:	10c01226 	beq	r2,r3,270e0 <__sflags+0x5c>
   27098:	00c01844 	movi	r3,97
   2709c:	10c00426 	beq	r2,r3,270b0 <__sflags+0x2c>
   270a0:	00800584 	movi	r2,22
   270a4:	20800015 	stw	r2,0(r4)
   270a8:	0005883a 	mov	r2,zero
   270ac:	f800283a 	ret
   270b0:	01c08204 	movi	r7,520
   270b4:	01000044 	movi	r4,1
   270b8:	00804204 	movi	r2,264
   270bc:	28c00047 	ldb	r3,1(r5)
   270c0:	18000426 	beq	r3,zero,270d4 <__sflags+0x50>
   270c4:	02000ac4 	movi	r8,43
   270c8:	1a000d26 	beq	r3,r8,27100 <__sflags+0x7c>
   270cc:	28c00087 	ldb	r3,2(r5)
   270d0:	1a000b26 	beq	r3,r8,27100 <__sflags+0x7c>
   270d4:	21c8b03a 	or	r4,r4,r7
   270d8:	31000015 	stw	r4,0(r6)
   270dc:	f800283a 	ret
   270e0:	01c18004 	movi	r7,1536
   270e4:	01000044 	movi	r4,1
   270e8:	00800204 	movi	r2,8
   270ec:	003ff306 	br	270bc <__sflags+0x38>
   270f0:	000f883a 	mov	r7,zero
   270f4:	0009883a 	mov	r4,zero
   270f8:	00800104 	movi	r2,4
   270fc:	003fef06 	br	270bc <__sflags+0x38>
   27100:	00fff8c4 	movi	r3,-29
   27104:	01000084 	movi	r4,2
   27108:	10c4703a 	and	r2,r2,r3
   2710c:	21c8b03a 	or	r4,r4,r7
   27110:	10800414 	ori	r2,r2,16
   27114:	31000015 	stw	r4,0(r6)
   27118:	f800283a 	ret

0002711c <__sfvwrite_r>:
   2711c:	30800217 	ldw	r2,8(r6)
   27120:	defff504 	addi	sp,sp,-44
   27124:	dd400615 	stw	r21,24(sp)
   27128:	dd000515 	stw	r20,20(sp)
   2712c:	dc000115 	stw	r16,4(sp)
   27130:	dfc00a15 	stw	ra,40(sp)
   27134:	df000915 	stw	fp,36(sp)
   27138:	ddc00815 	stw	r23,32(sp)
   2713c:	dd800715 	stw	r22,28(sp)
   27140:	dcc00415 	stw	r19,16(sp)
   27144:	dc800315 	stw	r18,12(sp)
   27148:	dc400215 	stw	r17,8(sp)
   2714c:	3029883a 	mov	r20,r6
   27150:	202b883a 	mov	r21,r4
   27154:	2821883a 	mov	r16,r5
   27158:	10002126 	beq	r2,zero,271e0 <__sfvwrite_r+0xc4>
   2715c:	2880030b 	ldhu	r2,12(r5)
   27160:	10c0020c 	andi	r3,r2,8
   27164:	18ffffcc 	andi	r3,r3,65535
   27168:	18e0001c 	xori	r3,r3,32768
   2716c:	18e00004 	addi	r3,r3,-32768
   27170:	18002826 	beq	r3,zero,27214 <__sfvwrite_r+0xf8>
   27174:	28c00417 	ldw	r3,16(r5)
   27178:	18002626 	beq	r3,zero,27214 <__sfvwrite_r+0xf8>
   2717c:	10c0008c 	andi	r3,r2,2
   27180:	18ffffcc 	andi	r3,r3,65535
   27184:	18e0001c 	xori	r3,r3,32768
   27188:	18e00004 	addi	r3,r3,-32768
   2718c:	a4400017 	ldw	r17,0(r20)
   27190:	18002b26 	beq	r3,zero,27240 <__sfvwrite_r+0x124>
   27194:	0027883a 	mov	r19,zero
   27198:	0025883a 	mov	r18,zero
   2719c:	05810004 	movi	r22,1024
   271a0:	980d883a 	mov	r6,r19
   271a4:	a809883a 	mov	r4,r21
   271a8:	90004f26 	beq	r18,zero,272e8 <__sfvwrite_r+0x1cc>
   271ac:	900f883a 	mov	r7,r18
   271b0:	81400717 	ldw	r5,28(r16)
   271b4:	b480012e 	bgeu	r22,r18,271bc <__sfvwrite_r+0xa0>
   271b8:	01c10004 	movi	r7,1024
   271bc:	80800917 	ldw	r2,36(r16)
   271c0:	103ee83a 	callr	r2
   271c4:	0080540e 	bge	zero,r2,27318 <__sfvwrite_r+0x1fc>
   271c8:	a0c00217 	ldw	r3,8(r20)
   271cc:	98a7883a 	add	r19,r19,r2
   271d0:	90a5c83a 	sub	r18,r18,r2
   271d4:	1885c83a 	sub	r2,r3,r2
   271d8:	a0800215 	stw	r2,8(r20)
   271dc:	103ff01e 	bne	r2,zero,271a0 <__sfvwrite_r+0x84>
   271e0:	0005883a 	mov	r2,zero
   271e4:	dfc00a17 	ldw	ra,40(sp)
   271e8:	df000917 	ldw	fp,36(sp)
   271ec:	ddc00817 	ldw	r23,32(sp)
   271f0:	dd800717 	ldw	r22,28(sp)
   271f4:	dd400617 	ldw	r21,24(sp)
   271f8:	dd000517 	ldw	r20,20(sp)
   271fc:	dcc00417 	ldw	r19,16(sp)
   27200:	dc800317 	ldw	r18,12(sp)
   27204:	dc400217 	ldw	r17,8(sp)
   27208:	dc000117 	ldw	r16,4(sp)
   2720c:	dec00b04 	addi	sp,sp,44
   27210:	f800283a 	ret
   27214:	a809883a 	mov	r4,r21
   27218:	800b883a 	mov	r5,r16
   2721c:	00256540 	call	25654 <__swsetup_r>
   27220:	1000f01e 	bne	r2,zero,275e4 <__sfvwrite_r+0x4c8>
   27224:	8080030b 	ldhu	r2,12(r16)
   27228:	a4400017 	ldw	r17,0(r20)
   2722c:	10c0008c 	andi	r3,r2,2
   27230:	18ffffcc 	andi	r3,r3,65535
   27234:	18e0001c 	xori	r3,r3,32768
   27238:	18e00004 	addi	r3,r3,-32768
   2723c:	183fd51e 	bne	r3,zero,27194 <__sfvwrite_r+0x78>
   27240:	10c0004c 	andi	r3,r2,1
   27244:	002d883a 	mov	r22,zero
   27248:	1800381e 	bne	r3,zero,2732c <__sfvwrite_r+0x210>
   2724c:	0025883a 	mov	r18,zero
   27250:	90002126 	beq	r18,zero,272d8 <__sfvwrite_r+0x1bc>
   27254:	10c0800c 	andi	r3,r2,512
   27258:	18ffffcc 	andi	r3,r3,65535
   2725c:	18e0001c 	xori	r3,r3,32768
   27260:	18e00004 	addi	r3,r3,-32768
   27264:	84c00217 	ldw	r19,8(r16)
   27268:	18006b26 	beq	r3,zero,27418 <__sfvwrite_r+0x2fc>
   2726c:	980f883a 	mov	r7,r19
   27270:	94c08636 	bltu	r18,r19,2748c <__sfvwrite_r+0x370>
   27274:	10c1200c 	andi	r3,r2,1152
   27278:	18009f1e 	bne	r3,zero,274f8 <__sfvwrite_r+0x3dc>
   2727c:	81000017 	ldw	r4,0(r16)
   27280:	982f883a 	mov	r23,r19
   27284:	9039883a 	mov	fp,r18
   27288:	9027883a 	mov	r19,r18
   2728c:	380d883a 	mov	r6,r7
   27290:	b00b883a 	mov	r5,r22
   27294:	d9c00015 	stw	r7,0(sp)
   27298:	00278a40 	call	278a4 <memmove>
   2729c:	d9c00017 	ldw	r7,0(sp)
   272a0:	81000217 	ldw	r4,8(r16)
   272a4:	80800017 	ldw	r2,0(r16)
   272a8:	25efc83a 	sub	r23,r4,r23
   272ac:	11cf883a 	add	r7,r2,r7
   272b0:	85c00215 	stw	r23,8(r16)
   272b4:	81c00015 	stw	r7,0(r16)
   272b8:	a0800217 	ldw	r2,8(r20)
   272bc:	b72d883a 	add	r22,r22,fp
   272c0:	9725c83a 	sub	r18,r18,fp
   272c4:	14e7c83a 	sub	r19,r2,r19
   272c8:	a4c00215 	stw	r19,8(r20)
   272cc:	983fc426 	beq	r19,zero,271e0 <__sfvwrite_r+0xc4>
   272d0:	8080030b 	ldhu	r2,12(r16)
   272d4:	903fdf1e 	bne	r18,zero,27254 <__sfvwrite_r+0x138>
   272d8:	8d800017 	ldw	r22,0(r17)
   272dc:	8c800117 	ldw	r18,4(r17)
   272e0:	8c400204 	addi	r17,r17,8
   272e4:	003fda06 	br	27250 <__sfvwrite_r+0x134>
   272e8:	8cc00017 	ldw	r19,0(r17)
   272ec:	8c800117 	ldw	r18,4(r17)
   272f0:	8c400204 	addi	r17,r17,8
   272f4:	003faa06 	br	271a0 <__sfvwrite_r+0x84>
   272f8:	0028aec0 	call	28aec <_realloc_r>
   272fc:	102f883a 	mov	r23,r2
   27300:	10009f1e 	bne	r2,zero,27580 <__sfvwrite_r+0x464>
   27304:	81400417 	ldw	r5,16(r16)
   27308:	a809883a 	mov	r4,r21
   2730c:	0021be00 	call	21be0 <_free_r>
   27310:	00800304 	movi	r2,12
   27314:	a8800015 	stw	r2,0(r21)
   27318:	80c0030b 	ldhu	r3,12(r16)
   2731c:	00bfffc4 	movi	r2,-1
   27320:	18c01014 	ori	r3,r3,64
   27324:	80c0030d 	sth	r3,12(r16)
   27328:	003fae06 	br	271e4 <__sfvwrite_r+0xc8>
   2732c:	0007883a 	mov	r3,zero
   27330:	0039883a 	mov	fp,zero
   27334:	0025883a 	mov	r18,zero
   27338:	90001e26 	beq	r18,zero,273b4 <__sfvwrite_r+0x298>
   2733c:	18006526 	beq	r3,zero,274d4 <__sfvwrite_r+0x3b8>
   27340:	b02f883a 	mov	r23,r22
   27344:	9580012e 	bgeu	r18,r22,2734c <__sfvwrite_r+0x230>
   27348:	902f883a 	mov	r23,r18
   2734c:	81000017 	ldw	r4,0(r16)
   27350:	80800417 	ldw	r2,16(r16)
   27354:	84c00217 	ldw	r19,8(r16)
   27358:	81c00517 	ldw	r7,20(r16)
   2735c:	1100022e 	bgeu	r2,r4,27368 <__sfvwrite_r+0x24c>
   27360:	99e7883a 	add	r19,r19,r7
   27364:	9dc01816 	blt	r19,r23,273c8 <__sfvwrite_r+0x2ac>
   27368:	b9c03b16 	blt	r23,r7,27458 <__sfvwrite_r+0x33c>
   2736c:	80800917 	ldw	r2,36(r16)
   27370:	81400717 	ldw	r5,28(r16)
   27374:	a809883a 	mov	r4,r21
   27378:	d8c00015 	stw	r3,0(sp)
   2737c:	e00d883a 	mov	r6,fp
   27380:	103ee83a 	callr	r2
   27384:	1027883a 	mov	r19,r2
   27388:	d8c00017 	ldw	r3,0(sp)
   2738c:	00bfe20e 	bge	zero,r2,27318 <__sfvwrite_r+0x1fc>
   27390:	b4edc83a 	sub	r22,r22,r19
   27394:	b0001a26 	beq	r22,zero,27400 <__sfvwrite_r+0x2e4>
   27398:	a0800217 	ldw	r2,8(r20)
   2739c:	e4f9883a 	add	fp,fp,r19
   273a0:	94e5c83a 	sub	r18,r18,r19
   273a4:	14e7c83a 	sub	r19,r2,r19
   273a8:	a4c00215 	stw	r19,8(r20)
   273ac:	983f8c26 	beq	r19,zero,271e0 <__sfvwrite_r+0xc4>
   273b0:	903fe21e 	bne	r18,zero,2733c <__sfvwrite_r+0x220>
   273b4:	8f000017 	ldw	fp,0(r17)
   273b8:	8c800117 	ldw	r18,4(r17)
   273bc:	0007883a 	mov	r3,zero
   273c0:	8c400204 	addi	r17,r17,8
   273c4:	003fdc06 	br	27338 <__sfvwrite_r+0x21c>
   273c8:	e00b883a 	mov	r5,fp
   273cc:	980d883a 	mov	r6,r19
   273d0:	d8c00015 	stw	r3,0(sp)
   273d4:	00278a40 	call	278a4 <memmove>
   273d8:	80800017 	ldw	r2,0(r16)
   273dc:	a809883a 	mov	r4,r21
   273e0:	800b883a 	mov	r5,r16
   273e4:	14c5883a 	add	r2,r2,r19
   273e8:	80800015 	stw	r2,0(r16)
   273ec:	002118c0 	call	2118c <_fflush_r>
   273f0:	d8c00017 	ldw	r3,0(sp)
   273f4:	103fc81e 	bne	r2,zero,27318 <__sfvwrite_r+0x1fc>
   273f8:	b4edc83a 	sub	r22,r22,r19
   273fc:	b03fe61e 	bne	r22,zero,27398 <__sfvwrite_r+0x27c>
   27400:	a809883a 	mov	r4,r21
   27404:	800b883a 	mov	r5,r16
   27408:	002118c0 	call	2118c <_fflush_r>
   2740c:	103fc21e 	bne	r2,zero,27318 <__sfvwrite_r+0x1fc>
   27410:	0007883a 	mov	r3,zero
   27414:	003fe006 	br	27398 <__sfvwrite_r+0x27c>
   27418:	81000017 	ldw	r4,0(r16)
   2741c:	80800417 	ldw	r2,16(r16)
   27420:	1100022e 	bgeu	r2,r4,2742c <__sfvwrite_r+0x310>
   27424:	9839883a 	mov	fp,r19
   27428:	9c806036 	bltu	r19,r18,275ac <__sfvwrite_r+0x490>
   2742c:	81c00517 	ldw	r7,20(r16)
   27430:	91c01c36 	bltu	r18,r7,274a4 <__sfvwrite_r+0x388>
   27434:	80800917 	ldw	r2,36(r16)
   27438:	81400717 	ldw	r5,28(r16)
   2743c:	a809883a 	mov	r4,r21
   27440:	b00d883a 	mov	r6,r22
   27444:	103ee83a 	callr	r2
   27448:	1027883a 	mov	r19,r2
   2744c:	00bfb20e 	bge	zero,r2,27318 <__sfvwrite_r+0x1fc>
   27450:	1039883a 	mov	fp,r2
   27454:	003f9806 	br	272b8 <__sfvwrite_r+0x19c>
   27458:	b80d883a 	mov	r6,r23
   2745c:	e00b883a 	mov	r5,fp
   27460:	d8c00015 	stw	r3,0(sp)
   27464:	00278a40 	call	278a4 <memmove>
   27468:	80800217 	ldw	r2,8(r16)
   2746c:	81000017 	ldw	r4,0(r16)
   27470:	b827883a 	mov	r19,r23
   27474:	15c5c83a 	sub	r2,r2,r23
   27478:	25ef883a 	add	r23,r4,r23
   2747c:	80800215 	stw	r2,8(r16)
   27480:	85c00015 	stw	r23,0(r16)
   27484:	d8c00017 	ldw	r3,0(sp)
   27488:	003fc106 	br	27390 <__sfvwrite_r+0x274>
   2748c:	81000017 	ldw	r4,0(r16)
   27490:	902f883a 	mov	r23,r18
   27494:	9039883a 	mov	fp,r18
   27498:	9027883a 	mov	r19,r18
   2749c:	900f883a 	mov	r7,r18
   274a0:	003f7a06 	br	2728c <__sfvwrite_r+0x170>
   274a4:	b00b883a 	mov	r5,r22
   274a8:	900d883a 	mov	r6,r18
   274ac:	00278a40 	call	278a4 <memmove>
   274b0:	80c00217 	ldw	r3,8(r16)
   274b4:	80800017 	ldw	r2,0(r16)
   274b8:	9027883a 	mov	r19,r18
   274bc:	1c87c83a 	sub	r3,r3,r18
   274c0:	1485883a 	add	r2,r2,r18
   274c4:	80c00215 	stw	r3,8(r16)
   274c8:	80800015 	stw	r2,0(r16)
   274cc:	9039883a 	mov	fp,r18
   274d0:	003f7906 	br	272b8 <__sfvwrite_r+0x19c>
   274d4:	e009883a 	mov	r4,fp
   274d8:	01400284 	movi	r5,10
   274dc:	900d883a 	mov	r6,r18
   274e0:	00277ac0 	call	277ac <memchr>
   274e4:	10003c26 	beq	r2,zero,275d8 <__sfvwrite_r+0x4bc>
   274e8:	15800044 	addi	r22,r2,1
   274ec:	b72dc83a 	sub	r22,r22,fp
   274f0:	00c00044 	movi	r3,1
   274f4:	003f9206 	br	27340 <__sfvwrite_r+0x224>
   274f8:	81000517 	ldw	r4,20(r16)
   274fc:	81400417 	ldw	r5,16(r16)
   27500:	80c00017 	ldw	r3,0(r16)
   27504:	210d883a 	add	r6,r4,r4
   27508:	3109883a 	add	r4,r6,r4
   2750c:	2026d7fa 	srli	r19,r4,31
   27510:	1979c83a 	sub	fp,r3,r5
   27514:	e1800044 	addi	r6,fp,1
   27518:	9909883a 	add	r4,r19,r4
   2751c:	2027d07a 	srai	r19,r4,1
   27520:	3489883a 	add	r4,r6,r18
   27524:	980d883a 	mov	r6,r19
   27528:	9900022e 	bgeu	r19,r4,27534 <__sfvwrite_r+0x418>
   2752c:	2027883a 	mov	r19,r4
   27530:	200d883a 	mov	r6,r4
   27534:	1081000c 	andi	r2,r2,1024
   27538:	10bfffcc 	andi	r2,r2,65535
   2753c:	10a0001c 	xori	r2,r2,32768
   27540:	10a00004 	addi	r2,r2,-32768
   27544:	a809883a 	mov	r4,r21
   27548:	103f6b26 	beq	r2,zero,272f8 <__sfvwrite_r+0x1dc>
   2754c:	300b883a 	mov	r5,r6
   27550:	00227d00 	call	227d0 <_malloc_r>
   27554:	102f883a 	mov	r23,r2
   27558:	103f6d26 	beq	r2,zero,27310 <__sfvwrite_r+0x1f4>
   2755c:	81400417 	ldw	r5,16(r16)
   27560:	1009883a 	mov	r4,r2
   27564:	e00d883a 	mov	r6,fp
   27568:	0022f540 	call	22f54 <memcpy>
   2756c:	8080030b 	ldhu	r2,12(r16)
   27570:	00fedfc4 	movi	r3,-1153
   27574:	10c4703a 	and	r2,r2,r3
   27578:	10802014 	ori	r2,r2,128
   2757c:	8080030d 	sth	r2,12(r16)
   27580:	bf09883a 	add	r4,r23,fp
   27584:	9f07c83a 	sub	r3,r19,fp
   27588:	85c00415 	stw	r23,16(r16)
   2758c:	84c00515 	stw	r19,20(r16)
   27590:	81000015 	stw	r4,0(r16)
   27594:	902f883a 	mov	r23,r18
   27598:	80c00215 	stw	r3,8(r16)
   2759c:	9039883a 	mov	fp,r18
   275a0:	9027883a 	mov	r19,r18
   275a4:	900f883a 	mov	r7,r18
   275a8:	003f3806 	br	2728c <__sfvwrite_r+0x170>
   275ac:	b00b883a 	mov	r5,r22
   275b0:	980d883a 	mov	r6,r19
   275b4:	00278a40 	call	278a4 <memmove>
   275b8:	80800017 	ldw	r2,0(r16)
   275bc:	a809883a 	mov	r4,r21
   275c0:	800b883a 	mov	r5,r16
   275c4:	14c5883a 	add	r2,r2,r19
   275c8:	80800015 	stw	r2,0(r16)
   275cc:	002118c0 	call	2118c <_fflush_r>
   275d0:	103f3926 	beq	r2,zero,272b8 <__sfvwrite_r+0x19c>
   275d4:	003f5006 	br	27318 <__sfvwrite_r+0x1fc>
   275d8:	95800044 	addi	r22,r18,1
   275dc:	00c00044 	movi	r3,1
   275e0:	003f5706 	br	27340 <__sfvwrite_r+0x224>
   275e4:	80c0030b 	ldhu	r3,12(r16)
   275e8:	00bfffc4 	movi	r2,-1
   275ec:	18c01014 	ori	r3,r3,64
   275f0:	80c0030d 	sth	r3,12(r16)
   275f4:	00c00244 	movi	r3,9
   275f8:	a8c00015 	stw	r3,0(r21)
   275fc:	003ef906 	br	271e4 <__sfvwrite_r+0xc8>

00027600 <_isatty_r>:
   27600:	defffd04 	addi	sp,sp,-12
   27604:	dc400115 	stw	r17,4(sp)
   27608:	dc000015 	stw	r16,0(sp)
   2760c:	2023883a 	mov	r17,r4
   27610:	040000f4 	movhi	r16,3
   27614:	84082404 	addi	r16,r16,8336
   27618:	2809883a 	mov	r4,r5
   2761c:	dfc00215 	stw	ra,8(sp)
   27620:	80000015 	stw	zero,0(r16)
   27624:	002b6780 	call	2b678 <isatty>
   27628:	00ffffc4 	movi	r3,-1
   2762c:	10c00526 	beq	r2,r3,27644 <_isatty_r+0x44>
   27630:	dfc00217 	ldw	ra,8(sp)
   27634:	dc400117 	ldw	r17,4(sp)
   27638:	dc000017 	ldw	r16,0(sp)
   2763c:	dec00304 	addi	sp,sp,12
   27640:	f800283a 	ret
   27644:	80c00017 	ldw	r3,0(r16)
   27648:	183ff926 	beq	r3,zero,27630 <_isatty_r+0x30>
   2764c:	88c00015 	stw	r3,0(r17)
   27650:	dfc00217 	ldw	ra,8(sp)
   27654:	dc400117 	ldw	r17,4(sp)
   27658:	dc000017 	ldw	r16,0(sp)
   2765c:	dec00304 	addi	sp,sp,12
   27660:	f800283a 	ret

00027664 <_setlocale_r>:
   27664:	defffc04 	addi	sp,sp,-16
   27668:	dc800215 	stw	r18,8(sp)
   2766c:	dc400115 	stw	r17,4(sp)
   27670:	dc000015 	stw	r16,0(sp)
   27674:	dfc00315 	stw	ra,12(sp)
   27678:	3021883a 	mov	r16,r6
   2767c:	2023883a 	mov	r17,r4
   27680:	2825883a 	mov	r18,r5
   27684:	30001626 	beq	r6,zero,276e0 <_setlocale_r+0x7c>
   27688:	3009883a 	mov	r4,r6
   2768c:	014000f4 	movhi	r5,3
   27690:	2979f504 	addi	r5,r5,-6188
   27694:	002914c0 	call	2914c <strcmp>
   27698:	10000a1e 	bne	r2,zero,276c4 <_setlocale_r+0x60>
   2769c:	8c800c15 	stw	r18,48(r17)
   276a0:	8c000d15 	stw	r16,52(r17)
   276a4:	008000f4 	movhi	r2,3
   276a8:	10b9f504 	addi	r2,r2,-6188
   276ac:	dfc00317 	ldw	ra,12(sp)
   276b0:	dc800217 	ldw	r18,8(sp)
   276b4:	dc400117 	ldw	r17,4(sp)
   276b8:	dc000017 	ldw	r16,0(sp)
   276bc:	dec00404 	addi	sp,sp,16
   276c0:	f800283a 	ret
   276c4:	8009883a 	mov	r4,r16
   276c8:	014000f4 	movhi	r5,3
   276cc:	2979ff04 	addi	r5,r5,-6148
   276d0:	002914c0 	call	2914c <strcmp>
   276d4:	103ff126 	beq	r2,zero,2769c <_setlocale_r+0x38>
   276d8:	0005883a 	mov	r2,zero
   276dc:	003ff306 	br	276ac <_setlocale_r+0x48>
   276e0:	008000f4 	movhi	r2,3
   276e4:	10b9f504 	addi	r2,r2,-6188
   276e8:	dfc00317 	ldw	ra,12(sp)
   276ec:	dc800217 	ldw	r18,8(sp)
   276f0:	dc400117 	ldw	r17,4(sp)
   276f4:	dc000017 	ldw	r16,0(sp)
   276f8:	dec00404 	addi	sp,sp,16
   276fc:	f800283a 	ret

00027700 <__locale_charset>:
   27700:	008000f4 	movhi	r2,3
   27704:	10ba1404 	addi	r2,r2,-6064
   27708:	f800283a 	ret

0002770c <_localeconv_r>:
   2770c:	008000f4 	movhi	r2,3
   27710:	10ba1804 	addi	r2,r2,-6048
   27714:	f800283a 	ret

00027718 <setlocale>:
   27718:	00c000f4 	movhi	r3,3
   2771c:	18c15204 	addi	r3,r3,1352
   27720:	2005883a 	mov	r2,r4
   27724:	19000017 	ldw	r4,0(r3)
   27728:	280d883a 	mov	r6,r5
   2772c:	100b883a 	mov	r5,r2
   27730:	00276641 	jmpi	27664 <_setlocale_r>

00027734 <localeconv>:
   27734:	008000f4 	movhi	r2,3
   27738:	10ba1804 	addi	r2,r2,-6048
   2773c:	f800283a 	ret

00027740 <_lseek_r>:
   27740:	defffd04 	addi	sp,sp,-12
   27744:	dc400115 	stw	r17,4(sp)
   27748:	dc000015 	stw	r16,0(sp)
   2774c:	2023883a 	mov	r17,r4
   27750:	040000f4 	movhi	r16,3
   27754:	84082404 	addi	r16,r16,8336
   27758:	2809883a 	mov	r4,r5
   2775c:	300b883a 	mov	r5,r6
   27760:	380d883a 	mov	r6,r7
   27764:	dfc00215 	stw	ra,8(sp)
   27768:	80000015 	stw	zero,0(r16)
   2776c:	002b8580 	call	2b858 <lseek>
   27770:	00ffffc4 	movi	r3,-1
   27774:	10c00526 	beq	r2,r3,2778c <_lseek_r+0x4c>
   27778:	dfc00217 	ldw	ra,8(sp)
   2777c:	dc400117 	ldw	r17,4(sp)
   27780:	dc000017 	ldw	r16,0(sp)
   27784:	dec00304 	addi	sp,sp,12
   27788:	f800283a 	ret
   2778c:	80c00017 	ldw	r3,0(r16)
   27790:	183ff926 	beq	r3,zero,27778 <_lseek_r+0x38>
   27794:	88c00015 	stw	r3,0(r17)
   27798:	dfc00217 	ldw	ra,8(sp)
   2779c:	dc400117 	ldw	r17,4(sp)
   277a0:	dc000017 	ldw	r16,0(sp)
   277a4:	dec00304 	addi	sp,sp,12
   277a8:	f800283a 	ret

000277ac <memchr>:
   277ac:	008000c4 	movi	r2,3
   277b0:	29403fcc 	andi	r5,r5,255
   277b4:	1180282e 	bgeu	r2,r6,27858 <memchr+0xac>
   277b8:	2086703a 	and	r3,r4,r2
   277bc:	1800351e 	bne	r3,zero,27894 <memchr+0xe8>
   277c0:	2816923a 	slli	r11,r5,8
   277c4:	2093883a 	add	r9,r4,r2
   277c8:	22000084 	addi	r8,r4,2
   277cc:	5957883a 	add	r11,r11,r5
   277d0:	5816923a 	slli	r11,r11,8
   277d4:	20c00044 	addi	r3,r4,1
   277d8:	037fbff4 	movhi	r13,65279
   277dc:	6b7fbfc4 	addi	r13,r13,-257
   277e0:	5957883a 	add	r11,r11,r5
   277e4:	5816923a 	slli	r11,r11,8
   277e8:	03202074 	movhi	r12,32897
   277ec:	63202004 	addi	r12,r12,-32640
   277f0:	101d883a 	mov	r14,r2
   277f4:	5957883a 	add	r11,r11,r5
   277f8:	21c00017 	ldw	r7,0(r4)
   277fc:	31bfff04 	addi	r6,r6,-4
   27800:	1805883a 	mov	r2,r3
   27804:	3acef03a 	xor	r7,r7,r11
   27808:	3b55883a 	add	r10,r7,r13
   2780c:	01ce303a 	nor	r7,zero,r7
   27810:	51ce703a 	and	r7,r10,r7
   27814:	3b0e703a 	and	r7,r7,r12
   27818:	38000a26 	beq	r7,zero,27844 <memchr+0x98>
   2781c:	21c00003 	ldbu	r7,0(r4)
   27820:	39401e26 	beq	r7,r5,2789c <memchr+0xf0>
   27824:	19c00003 	ldbu	r7,0(r3)
   27828:	39401926 	beq	r7,r5,27890 <memchr+0xe4>
   2782c:	41c00003 	ldbu	r7,0(r8)
   27830:	4005883a 	mov	r2,r8
   27834:	39401626 	beq	r7,r5,27890 <memchr+0xe4>
   27838:	49c00003 	ldbu	r7,0(r9)
   2783c:	4805883a 	mov	r2,r9
   27840:	39401326 	beq	r7,r5,27890 <memchr+0xe4>
   27844:	21000104 	addi	r4,r4,4
   27848:	4a400104 	addi	r9,r9,4
   2784c:	42000104 	addi	r8,r8,4
   27850:	18c00104 	addi	r3,r3,4
   27854:	71bfe836 	bltu	r14,r6,277f8 <memchr+0x4c>
   27858:	2005883a 	mov	r2,r4
   2785c:	30000a26 	beq	r6,zero,27888 <memchr+0xdc>
   27860:	10c00003 	ldbu	r3,0(r2)
   27864:	19400a26 	beq	r3,r5,27890 <memchr+0xe4>
   27868:	10c00044 	addi	r3,r2,1
   2786c:	118d883a 	add	r6,r2,r6
   27870:	00000306 	br	27880 <memchr+0xd4>
   27874:	11000003 	ldbu	r4,0(r2)
   27878:	18c00044 	addi	r3,r3,1
   2787c:	21400426 	beq	r4,r5,27890 <memchr+0xe4>
   27880:	1805883a 	mov	r2,r3
   27884:	19bffb1e 	bne	r3,r6,27874 <memchr+0xc8>
   27888:	0005883a 	mov	r2,zero
   2788c:	f800283a 	ret
   27890:	f800283a 	ret
   27894:	2005883a 	mov	r2,r4
   27898:	003ff106 	br	27860 <memchr+0xb4>
   2789c:	2005883a 	mov	r2,r4
   278a0:	f800283a 	ret

000278a4 <memmove>:
   278a4:	defffb04 	addi	sp,sp,-20
   278a8:	dc000015 	stw	r16,0(sp)
   278ac:	dfc00415 	stw	ra,16(sp)
   278b0:	dcc00315 	stw	r19,12(sp)
   278b4:	dc800215 	stw	r18,8(sp)
   278b8:	dc400115 	stw	r17,4(sp)
   278bc:	2021883a 	mov	r16,r4
   278c0:	300f883a 	mov	r7,r6
   278c4:	2900122e 	bgeu	r5,r4,27910 <memmove+0x6c>
   278c8:	2987883a 	add	r3,r5,r6
   278cc:	20c0102e 	bgeu	r4,r3,27910 <memmove+0x6c>
   278d0:	218b883a 	add	r5,r4,r6
   278d4:	1989c83a 	sub	r4,r3,r6
   278d8:	30000526 	beq	r6,zero,278f0 <memmove+0x4c>
   278dc:	18ffffc4 	addi	r3,r3,-1
   278e0:	18800003 	ldbu	r2,0(r3)
   278e4:	297fffc4 	addi	r5,r5,-1
   278e8:	28800005 	stb	r2,0(r5)
   278ec:	193ffb1e 	bne	r3,r4,278dc <memmove+0x38>
   278f0:	8005883a 	mov	r2,r16
   278f4:	dfc00417 	ldw	ra,16(sp)
   278f8:	dcc00317 	ldw	r19,12(sp)
   278fc:	dc800217 	ldw	r18,8(sp)
   27900:	dc400117 	ldw	r17,4(sp)
   27904:	dc000017 	ldw	r16,0(sp)
   27908:	dec00504 	addi	sp,sp,20
   2790c:	f800283a 	ret
   27910:	008003c4 	movi	r2,15
   27914:	1180422e 	bgeu	r2,r6,27a20 <memmove+0x17c>
   27918:	2c04b03a 	or	r2,r5,r16
   2791c:	108000cc 	andi	r2,r2,3
   27920:	10003f1e 	bne	r2,zero,27a20 <memmove+0x17c>
   27924:	32bffc04 	addi	r10,r6,-16
   27928:	5014d13a 	srli	r10,r10,4
   2792c:	81000404 	addi	r4,r16,16
   27930:	8007883a 	mov	r3,r16
   27934:	5004913a 	slli	r2,r10,4
   27938:	280f883a 	mov	r7,r5
   2793c:	2089883a 	add	r4,r4,r2
   27940:	38800017 	ldw	r2,0(r7)
   27944:	18c00404 	addi	r3,r3,16
   27948:	39c00404 	addi	r7,r7,16
   2794c:	18bffc15 	stw	r2,-16(r3)
   27950:	38bffd17 	ldw	r2,-12(r7)
   27954:	18bffd15 	stw	r2,-12(r3)
   27958:	38bffe17 	ldw	r2,-8(r7)
   2795c:	18bffe15 	stw	r2,-8(r3)
   27960:	38bfff17 	ldw	r2,-4(r7)
   27964:	18bfff15 	stw	r2,-4(r3)
   27968:	193ff51e 	bne	r3,r4,27940 <memmove+0x9c>
   2796c:	52800044 	addi	r10,r10,1
   27970:	5014913a 	slli	r10,r10,4
   27974:	31c003cc 	andi	r7,r6,15
   27978:	008000c4 	movi	r2,3
   2797c:	8287883a 	add	r3,r16,r10
   27980:	2a95883a 	add	r10,r5,r10
   27984:	11c0282e 	bgeu	r2,r7,27a28 <memmove+0x184>
   27988:	3c7fff04 	addi	r17,r7,-4
   2798c:	8808d0ba 	srli	r4,r17,2
   27990:	1a400104 	addi	r9,r3,4
   27994:	180d883a 	mov	r6,r3
   27998:	2105883a 	add	r2,r4,r4
   2799c:	1085883a 	add	r2,r2,r2
   279a0:	4893883a 	add	r9,r9,r2
   279a4:	5005883a 	mov	r2,r10
   279a8:	12000017 	ldw	r8,0(r2)
   279ac:	31800104 	addi	r6,r6,4
   279b0:	10800104 	addi	r2,r2,4
   279b4:	323fff15 	stw	r8,-4(r6)
   279b8:	327ffb1e 	bne	r6,r9,279a8 <memmove+0x104>
   279bc:	20800044 	addi	r2,r4,1
   279c0:	1085883a 	add	r2,r2,r2
   279c4:	1085883a 	add	r2,r2,r2
   279c8:	017fff04 	movi	r5,-4
   279cc:	18a5883a 	add	r18,r3,r2
   279d0:	50a7883a 	add	r19,r10,r2
   279d4:	00210140 	call	21014 <__mulsi3>
   279d8:	144f883a 	add	r7,r2,r17
   279dc:	980b883a 	mov	r5,r19
   279e0:	9007883a 	mov	r3,r18
   279e4:	383fc226 	beq	r7,zero,278f0 <memmove+0x4c>
   279e8:	19cf883a 	add	r7,r3,r7
   279ec:	29800003 	ldbu	r6,0(r5)
   279f0:	18c00044 	addi	r3,r3,1
   279f4:	29400044 	addi	r5,r5,1
   279f8:	19bfffc5 	stb	r6,-1(r3)
   279fc:	19fffb1e 	bne	r3,r7,279ec <memmove+0x148>
   27a00:	8005883a 	mov	r2,r16
   27a04:	dfc00417 	ldw	ra,16(sp)
   27a08:	dcc00317 	ldw	r19,12(sp)
   27a0c:	dc800217 	ldw	r18,8(sp)
   27a10:	dc400117 	ldw	r17,4(sp)
   27a14:	dc000017 	ldw	r16,0(sp)
   27a18:	dec00504 	addi	sp,sp,20
   27a1c:	f800283a 	ret
   27a20:	8007883a 	mov	r3,r16
   27a24:	003fef06 	br	279e4 <memmove+0x140>
   27a28:	500b883a 	mov	r5,r10
   27a2c:	003fed06 	br	279e4 <memmove+0x140>

00027a30 <_Balloc>:
   27a30:	20801317 	ldw	r2,76(r4)
   27a34:	defffc04 	addi	sp,sp,-16
   27a38:	dc400115 	stw	r17,4(sp)
   27a3c:	dc000015 	stw	r16,0(sp)
   27a40:	dfc00315 	stw	ra,12(sp)
   27a44:	dc800215 	stw	r18,8(sp)
   27a48:	2023883a 	mov	r17,r4
   27a4c:	2821883a 	mov	r16,r5
   27a50:	10000f26 	beq	r2,zero,27a90 <_Balloc+0x60>
   27a54:	8407883a 	add	r3,r16,r16
   27a58:	18c7883a 	add	r3,r3,r3
   27a5c:	10c7883a 	add	r3,r2,r3
   27a60:	18800017 	ldw	r2,0(r3)
   27a64:	10001126 	beq	r2,zero,27aac <_Balloc+0x7c>
   27a68:	11000017 	ldw	r4,0(r2)
   27a6c:	19000015 	stw	r4,0(r3)
   27a70:	10000415 	stw	zero,16(r2)
   27a74:	10000315 	stw	zero,12(r2)
   27a78:	dfc00317 	ldw	ra,12(sp)
   27a7c:	dc800217 	ldw	r18,8(sp)
   27a80:	dc400117 	ldw	r17,4(sp)
   27a84:	dc000017 	ldw	r16,0(sp)
   27a88:	dec00404 	addi	sp,sp,16
   27a8c:	f800283a 	ret
   27a90:	01400104 	movi	r5,4
   27a94:	01800404 	movi	r6,16
   27a98:	00291f00 	call	291f0 <_calloc_r>
   27a9c:	88801315 	stw	r2,76(r17)
   27aa0:	103fec1e 	bne	r2,zero,27a54 <_Balloc+0x24>
   27aa4:	0005883a 	mov	r2,zero
   27aa8:	003ff306 	br	27a78 <_Balloc+0x48>
   27aac:	01400044 	movi	r5,1
   27ab0:	2c24983a 	sll	r18,r5,r16
   27ab4:	8809883a 	mov	r4,r17
   27ab8:	91800144 	addi	r6,r18,5
   27abc:	318d883a 	add	r6,r6,r6
   27ac0:	318d883a 	add	r6,r6,r6
   27ac4:	00291f00 	call	291f0 <_calloc_r>
   27ac8:	103ff626 	beq	r2,zero,27aa4 <_Balloc+0x74>
   27acc:	14000115 	stw	r16,4(r2)
   27ad0:	14800215 	stw	r18,8(r2)
   27ad4:	003fe606 	br	27a70 <_Balloc+0x40>

00027ad8 <_Bfree>:
   27ad8:	28000826 	beq	r5,zero,27afc <_Bfree+0x24>
   27adc:	28c00117 	ldw	r3,4(r5)
   27ae0:	20801317 	ldw	r2,76(r4)
   27ae4:	18c7883a 	add	r3,r3,r3
   27ae8:	18c7883a 	add	r3,r3,r3
   27aec:	10c5883a 	add	r2,r2,r3
   27af0:	10c00017 	ldw	r3,0(r2)
   27af4:	28c00015 	stw	r3,0(r5)
   27af8:	11400015 	stw	r5,0(r2)
   27afc:	f800283a 	ret

00027b00 <__multadd>:
   27b00:	defff604 	addi	sp,sp,-40
   27b04:	dd400515 	stw	r21,20(sp)
   27b08:	2d400417 	ldw	r21,16(r5)
   27b0c:	df000815 	stw	fp,32(sp)
   27b10:	ddc00715 	stw	r23,28(sp)
   27b14:	dd800615 	stw	r22,24(sp)
   27b18:	dd000415 	stw	r20,16(sp)
   27b1c:	dc400115 	stw	r17,4(sp)
   27b20:	dc000015 	stw	r16,0(sp)
   27b24:	dfc00915 	stw	ra,36(sp)
   27b28:	dcc00315 	stw	r19,12(sp)
   27b2c:	dc800215 	stw	r18,8(sp)
   27b30:	282d883a 	mov	r22,r5
   27b34:	202f883a 	mov	r23,r4
   27b38:	3029883a 	mov	r20,r6
   27b3c:	3839883a 	mov	fp,r7
   27b40:	2c000504 	addi	r16,r5,20
   27b44:	0023883a 	mov	r17,zero
   27b48:	84c00017 	ldw	r19,0(r16)
   27b4c:	a00b883a 	mov	r5,r20
   27b50:	8c400044 	addi	r17,r17,1
   27b54:	993fffcc 	andi	r4,r19,65535
   27b58:	00210140 	call	21014 <__mulsi3>
   27b5c:	1725883a 	add	r18,r2,fp
   27b60:	9808d43a 	srli	r4,r19,16
   27b64:	9026d43a 	srli	r19,r18,16
   27b68:	a00b883a 	mov	r5,r20
   27b6c:	00210140 	call	21014 <__mulsi3>
   27b70:	988f883a 	add	r7,r19,r2
   27b74:	3804943a 	slli	r2,r7,16
   27b78:	94bfffcc 	andi	r18,r18,65535
   27b7c:	3838d43a 	srli	fp,r7,16
   27b80:	14a5883a 	add	r18,r2,r18
   27b84:	84800015 	stw	r18,0(r16)
   27b88:	84000104 	addi	r16,r16,4
   27b8c:	8d7fee16 	blt	r17,r21,27b48 <__multadd+0x48>
   27b90:	e0000926 	beq	fp,zero,27bb8 <__multadd+0xb8>
   27b94:	b0800217 	ldw	r2,8(r22)
   27b98:	a880140e 	bge	r21,r2,27bec <__multadd+0xec>
   27b9c:	a8800144 	addi	r2,r21,5
   27ba0:	1085883a 	add	r2,r2,r2
   27ba4:	1085883a 	add	r2,r2,r2
   27ba8:	b085883a 	add	r2,r22,r2
   27bac:	ad400044 	addi	r21,r21,1
   27bb0:	17000015 	stw	fp,0(r2)
   27bb4:	b5400415 	stw	r21,16(r22)
   27bb8:	b005883a 	mov	r2,r22
   27bbc:	dfc00917 	ldw	ra,36(sp)
   27bc0:	df000817 	ldw	fp,32(sp)
   27bc4:	ddc00717 	ldw	r23,28(sp)
   27bc8:	dd800617 	ldw	r22,24(sp)
   27bcc:	dd400517 	ldw	r21,20(sp)
   27bd0:	dd000417 	ldw	r20,16(sp)
   27bd4:	dcc00317 	ldw	r19,12(sp)
   27bd8:	dc800217 	ldw	r18,8(sp)
   27bdc:	dc400117 	ldw	r17,4(sp)
   27be0:	dc000017 	ldw	r16,0(sp)
   27be4:	dec00a04 	addi	sp,sp,40
   27be8:	f800283a 	ret
   27bec:	b1400117 	ldw	r5,4(r22)
   27bf0:	b809883a 	mov	r4,r23
   27bf4:	29400044 	addi	r5,r5,1
   27bf8:	0027a300 	call	27a30 <_Balloc>
   27bfc:	b1800417 	ldw	r6,16(r22)
   27c00:	b1400304 	addi	r5,r22,12
   27c04:	11000304 	addi	r4,r2,12
   27c08:	31800084 	addi	r6,r6,2
   27c0c:	318d883a 	add	r6,r6,r6
   27c10:	318d883a 	add	r6,r6,r6
   27c14:	1021883a 	mov	r16,r2
   27c18:	0022f540 	call	22f54 <memcpy>
   27c1c:	b0c00117 	ldw	r3,4(r22)
   27c20:	b8801317 	ldw	r2,76(r23)
   27c24:	18c7883a 	add	r3,r3,r3
   27c28:	18c7883a 	add	r3,r3,r3
   27c2c:	10c5883a 	add	r2,r2,r3
   27c30:	10c00017 	ldw	r3,0(r2)
   27c34:	b0c00015 	stw	r3,0(r22)
   27c38:	15800015 	stw	r22,0(r2)
   27c3c:	802d883a 	mov	r22,r16
   27c40:	003fd606 	br	27b9c <__multadd+0x9c>

00027c44 <__s2b>:
   27c44:	defff904 	addi	sp,sp,-28
   27c48:	dd000415 	stw	r20,16(sp)
   27c4c:	dc400115 	stw	r17,4(sp)
   27c50:	2829883a 	mov	r20,r5
   27c54:	2023883a 	mov	r17,r4
   27c58:	01400244 	movi	r5,9
   27c5c:	39000204 	addi	r4,r7,8
   27c60:	dcc00315 	stw	r19,12(sp)
   27c64:	dc800215 	stw	r18,8(sp)
   27c68:	dfc00615 	stw	ra,24(sp)
   27c6c:	dd400515 	stw	r21,20(sp)
   27c70:	dc000015 	stw	r16,0(sp)
   27c74:	3825883a 	mov	r18,r7
   27c78:	3027883a 	mov	r19,r6
   27c7c:	002ace80 	call	2ace8 <__divsi3>
   27c80:	00c00044 	movi	r3,1
   27c84:	000b883a 	mov	r5,zero
   27c88:	1880030e 	bge	r3,r2,27c98 <__s2b+0x54>
   27c8c:	18c7883a 	add	r3,r3,r3
   27c90:	29400044 	addi	r5,r5,1
   27c94:	18bffd16 	blt	r3,r2,27c8c <__s2b+0x48>
   27c98:	8809883a 	mov	r4,r17
   27c9c:	0027a300 	call	27a30 <_Balloc>
   27ca0:	d8c00717 	ldw	r3,28(sp)
   27ca4:	10c00515 	stw	r3,20(r2)
   27ca8:	00c00044 	movi	r3,1
   27cac:	10c00415 	stw	r3,16(r2)
   27cb0:	00c00244 	movi	r3,9
   27cb4:	1cc0210e 	bge	r3,r19,27d3c <__s2b+0xf8>
   27cb8:	a0eb883a 	add	r21,r20,r3
   27cbc:	a821883a 	mov	r16,r21
   27cc0:	a4e9883a 	add	r20,r20,r19
   27cc4:	81c00007 	ldb	r7,0(r16)
   27cc8:	8809883a 	mov	r4,r17
   27ccc:	84000044 	addi	r16,r16,1
   27cd0:	100b883a 	mov	r5,r2
   27cd4:	01800284 	movi	r6,10
   27cd8:	39fff404 	addi	r7,r7,-48
   27cdc:	0027b000 	call	27b00 <__multadd>
   27ce0:	853ff81e 	bne	r16,r20,27cc4 <__s2b+0x80>
   27ce4:	ace1883a 	add	r16,r21,r19
   27ce8:	843ffe04 	addi	r16,r16,-8
   27cec:	9c800a0e 	bge	r19,r18,27d18 <__s2b+0xd4>
   27cf0:	94e5c83a 	sub	r18,r18,r19
   27cf4:	84a5883a 	add	r18,r16,r18
   27cf8:	81c00007 	ldb	r7,0(r16)
   27cfc:	8809883a 	mov	r4,r17
   27d00:	84000044 	addi	r16,r16,1
   27d04:	100b883a 	mov	r5,r2
   27d08:	01800284 	movi	r6,10
   27d0c:	39fff404 	addi	r7,r7,-48
   27d10:	0027b000 	call	27b00 <__multadd>
   27d14:	84bff81e 	bne	r16,r18,27cf8 <__s2b+0xb4>
   27d18:	dfc00617 	ldw	ra,24(sp)
   27d1c:	dd400517 	ldw	r21,20(sp)
   27d20:	dd000417 	ldw	r20,16(sp)
   27d24:	dcc00317 	ldw	r19,12(sp)
   27d28:	dc800217 	ldw	r18,8(sp)
   27d2c:	dc400117 	ldw	r17,4(sp)
   27d30:	dc000017 	ldw	r16,0(sp)
   27d34:	dec00704 	addi	sp,sp,28
   27d38:	f800283a 	ret
   27d3c:	a4000284 	addi	r16,r20,10
   27d40:	1827883a 	mov	r19,r3
   27d44:	003fe906 	br	27cec <__s2b+0xa8>

00027d48 <__hi0bits>:
   27d48:	20bfffec 	andhi	r2,r4,65535
   27d4c:	1000141e 	bne	r2,zero,27da0 <__hi0bits+0x58>
   27d50:	2008943a 	slli	r4,r4,16
   27d54:	00800404 	movi	r2,16
   27d58:	20ffc02c 	andhi	r3,r4,65280
   27d5c:	1800021e 	bne	r3,zero,27d68 <__hi0bits+0x20>
   27d60:	2008923a 	slli	r4,r4,8
   27d64:	10800204 	addi	r2,r2,8
   27d68:	20fc002c 	andhi	r3,r4,61440
   27d6c:	1800021e 	bne	r3,zero,27d78 <__hi0bits+0x30>
   27d70:	2008913a 	slli	r4,r4,4
   27d74:	10800104 	addi	r2,r2,4
   27d78:	20f0002c 	andhi	r3,r4,49152
   27d7c:	1800031e 	bne	r3,zero,27d8c <__hi0bits+0x44>
   27d80:	2109883a 	add	r4,r4,r4
   27d84:	10800084 	addi	r2,r2,2
   27d88:	2109883a 	add	r4,r4,r4
   27d8c:	20000316 	blt	r4,zero,27d9c <__hi0bits+0x54>
   27d90:	2110002c 	andhi	r4,r4,16384
   27d94:	2000041e 	bne	r4,zero,27da8 <__hi0bits+0x60>
   27d98:	00800804 	movi	r2,32
   27d9c:	f800283a 	ret
   27da0:	0005883a 	mov	r2,zero
   27da4:	003fec06 	br	27d58 <__hi0bits+0x10>
   27da8:	10800044 	addi	r2,r2,1
   27dac:	f800283a 	ret

00027db0 <__lo0bits>:
   27db0:	20c00017 	ldw	r3,0(r4)
   27db4:	188001cc 	andi	r2,r3,7
   27db8:	10000826 	beq	r2,zero,27ddc <__lo0bits+0x2c>
   27dbc:	1880004c 	andi	r2,r3,1
   27dc0:	1000211e 	bne	r2,zero,27e48 <__lo0bits+0x98>
   27dc4:	1880008c 	andi	r2,r3,2
   27dc8:	1000211e 	bne	r2,zero,27e50 <__lo0bits+0xa0>
   27dcc:	1806d0ba 	srli	r3,r3,2
   27dd0:	00800084 	movi	r2,2
   27dd4:	20c00015 	stw	r3,0(r4)
   27dd8:	f800283a 	ret
   27ddc:	18bfffcc 	andi	r2,r3,65535
   27de0:	10001326 	beq	r2,zero,27e30 <__lo0bits+0x80>
   27de4:	0005883a 	mov	r2,zero
   27de8:	19403fcc 	andi	r5,r3,255
   27dec:	2800021e 	bne	r5,zero,27df8 <__lo0bits+0x48>
   27df0:	1806d23a 	srli	r3,r3,8
   27df4:	10800204 	addi	r2,r2,8
   27df8:	194003cc 	andi	r5,r3,15
   27dfc:	2800021e 	bne	r5,zero,27e08 <__lo0bits+0x58>
   27e00:	1806d13a 	srli	r3,r3,4
   27e04:	10800104 	addi	r2,r2,4
   27e08:	194000cc 	andi	r5,r3,3
   27e0c:	2800021e 	bne	r5,zero,27e18 <__lo0bits+0x68>
   27e10:	1806d0ba 	srli	r3,r3,2
   27e14:	10800084 	addi	r2,r2,2
   27e18:	1940004c 	andi	r5,r3,1
   27e1c:	2800081e 	bne	r5,zero,27e40 <__lo0bits+0x90>
   27e20:	1806d07a 	srli	r3,r3,1
   27e24:	1800051e 	bne	r3,zero,27e3c <__lo0bits+0x8c>
   27e28:	00800804 	movi	r2,32
   27e2c:	f800283a 	ret
   27e30:	1806d43a 	srli	r3,r3,16
   27e34:	00800404 	movi	r2,16
   27e38:	003feb06 	br	27de8 <__lo0bits+0x38>
   27e3c:	10800044 	addi	r2,r2,1
   27e40:	20c00015 	stw	r3,0(r4)
   27e44:	f800283a 	ret
   27e48:	0005883a 	mov	r2,zero
   27e4c:	f800283a 	ret
   27e50:	1806d07a 	srli	r3,r3,1
   27e54:	00800044 	movi	r2,1
   27e58:	20c00015 	stw	r3,0(r4)
   27e5c:	f800283a 	ret

00027e60 <__i2b>:
   27e60:	defffd04 	addi	sp,sp,-12
   27e64:	dc000015 	stw	r16,0(sp)
   27e68:	04000044 	movi	r16,1
   27e6c:	dc400115 	stw	r17,4(sp)
   27e70:	2823883a 	mov	r17,r5
   27e74:	800b883a 	mov	r5,r16
   27e78:	dfc00215 	stw	ra,8(sp)
   27e7c:	0027a300 	call	27a30 <_Balloc>
   27e80:	14400515 	stw	r17,20(r2)
   27e84:	14000415 	stw	r16,16(r2)
   27e88:	dfc00217 	ldw	ra,8(sp)
   27e8c:	dc400117 	ldw	r17,4(sp)
   27e90:	dc000017 	ldw	r16,0(sp)
   27e94:	dec00304 	addi	sp,sp,12
   27e98:	f800283a 	ret

00027e9c <__multiply>:
   27e9c:	defff004 	addi	sp,sp,-64
   27ea0:	dc800815 	stw	r18,32(sp)
   27ea4:	dc400715 	stw	r17,28(sp)
   27ea8:	34800417 	ldw	r18,16(r6)
   27eac:	2c400417 	ldw	r17,16(r5)
   27eb0:	ddc00d15 	stw	r23,52(sp)
   27eb4:	dc000615 	stw	r16,24(sp)
   27eb8:	dfc00f15 	stw	ra,60(sp)
   27ebc:	df000e15 	stw	fp,56(sp)
   27ec0:	dd800c15 	stw	r22,48(sp)
   27ec4:	dd400b15 	stw	r21,44(sp)
   27ec8:	dd000a15 	stw	r20,40(sp)
   27ecc:	dcc00915 	stw	r19,36(sp)
   27ed0:	2821883a 	mov	r16,r5
   27ed4:	302f883a 	mov	r23,r6
   27ed8:	8c80050e 	bge	r17,r18,27ef0 <__multiply+0x54>
   27edc:	8807883a 	mov	r3,r17
   27ee0:	3021883a 	mov	r16,r6
   27ee4:	9023883a 	mov	r17,r18
   27ee8:	282f883a 	mov	r23,r5
   27eec:	1825883a 	mov	r18,r3
   27ef0:	80800217 	ldw	r2,8(r16)
   27ef4:	8c87883a 	add	r3,r17,r18
   27ef8:	d8c00115 	stw	r3,4(sp)
   27efc:	81400117 	ldw	r5,4(r16)
   27f00:	10c0010e 	bge	r2,r3,27f08 <__multiply+0x6c>
   27f04:	29400044 	addi	r5,r5,1
   27f08:	0027a300 	call	27a30 <_Balloc>
   27f0c:	d8c00117 	ldw	r3,4(sp)
   27f10:	d8800515 	stw	r2,20(sp)
   27f14:	14c00504 	addi	r19,r2,20
   27f18:	1d400144 	addi	r21,r3,5
   27f1c:	ad6b883a 	add	r21,r21,r21
   27f20:	ad6b883a 	add	r21,r21,r21
   27f24:	156b883a 	add	r21,r2,r21
   27f28:	dd400215 	stw	r21,8(sp)
   27f2c:	9805883a 	mov	r2,r19
   27f30:	9d40042e 	bgeu	r19,r21,27f44 <__multiply+0xa8>
   27f34:	d8c00217 	ldw	r3,8(sp)
   27f38:	10000015 	stw	zero,0(r2)
   27f3c:	10800104 	addi	r2,r2,4
   27f40:	10fffc36 	bltu	r2,r3,27f34 <__multiply+0x98>
   27f44:	94800144 	addi	r18,r18,5
   27f48:	94a5883a 	add	r18,r18,r18
   27f4c:	94ad883a 	add	r22,r18,r18
   27f50:	8c400144 	addi	r17,r17,5
   27f54:	8c63883a 	add	r17,r17,r17
   27f58:	bdad883a 	add	r22,r23,r22
   27f5c:	80c00504 	addi	r3,r16,20
   27f60:	8c63883a 	add	r17,r17,r17
   27f64:	bc800504 	addi	r18,r23,20
   27f68:	dd800315 	stw	r22,12(sp)
   27f6c:	d8c00415 	stw	r3,16(sp)
   27f70:	dcc00015 	stw	r19,0(sp)
   27f74:	8463883a 	add	r17,r16,r17
   27f78:	9580412e 	bgeu	r18,r22,28080 <__multiply+0x1e4>
   27f7c:	90800017 	ldw	r2,0(r18)
   27f80:	173fffcc 	andi	fp,r2,65535
   27f84:	e0001a26 	beq	fp,zero,27ff0 <__multiply+0x154>
   27f88:	dd000017 	ldw	r20,0(sp)
   27f8c:	dd800417 	ldw	r22,16(sp)
   27f90:	002b883a 	mov	r21,zero
   27f94:	b4c00017 	ldw	r19,0(r22)
   27f98:	a4000017 	ldw	r16,0(r20)
   27f9c:	e00b883a 	mov	r5,fp
   27fa0:	993fffcc 	andi	r4,r19,65535
   27fa4:	00210140 	call	21014 <__mulsi3>
   27fa8:	9808d43a 	srli	r4,r19,16
   27fac:	817fffcc 	andi	r5,r16,65535
   27fb0:	1145883a 	add	r2,r2,r5
   27fb4:	e00b883a 	mov	r5,fp
   27fb8:	1567883a 	add	r19,r2,r21
   27fbc:	8020d43a 	srli	r16,r16,16
   27fc0:	00210140 	call	21014 <__mulsi3>
   27fc4:	9808d43a 	srli	r4,r19,16
   27fc8:	1405883a 	add	r2,r2,r16
   27fcc:	a4c0000d 	sth	r19,0(r20)
   27fd0:	110f883a 	add	r7,r2,r4
   27fd4:	a1c0008d 	sth	r7,2(r20)
   27fd8:	b5800104 	addi	r22,r22,4
   27fdc:	382ad43a 	srli	r21,r7,16
   27fe0:	a5000104 	addi	r20,r20,4
   27fe4:	b47feb36 	bltu	r22,r17,27f94 <__multiply+0xf8>
   27fe8:	a5400015 	stw	r21,0(r20)
   27fec:	90800017 	ldw	r2,0(r18)
   27ff0:	1038d43a 	srli	fp,r2,16
   27ff4:	e0001c26 	beq	fp,zero,28068 <__multiply+0x1cc>
   27ff8:	d8c00017 	ldw	r3,0(sp)
   27ffc:	dd000417 	ldw	r20,16(sp)
   28000:	002b883a 	mov	r21,zero
   28004:	1d800017 	ldw	r22,0(r3)
   28008:	182f883a 	mov	r23,r3
   2800c:	b021883a 	mov	r16,r22
   28010:	a4c00017 	ldw	r19,0(r20)
   28014:	8020d43a 	srli	r16,r16,16
   28018:	e00b883a 	mov	r5,fp
   2801c:	993fffcc 	andi	r4,r19,65535
   28020:	00210140 	call	21014 <__mulsi3>
   28024:	1405883a 	add	r2,r2,r16
   28028:	9808d43a 	srli	r4,r19,16
   2802c:	156b883a 	add	r21,r2,r21
   28030:	bdc00104 	addi	r23,r23,4
   28034:	bdbfff0d 	sth	r22,-4(r23)
   28038:	bd7fff8d 	sth	r21,-2(r23)
   2803c:	bc000017 	ldw	r16,0(r23)
   28040:	e00b883a 	mov	r5,fp
   28044:	00210140 	call	21014 <__mulsi3>
   28048:	a80ed43a 	srli	r7,r21,16
   2804c:	813fffcc 	andi	r4,r16,65535
   28050:	2085883a 	add	r2,r4,r2
   28054:	11ed883a 	add	r22,r2,r7
   28058:	a5000104 	addi	r20,r20,4
   2805c:	b02ad43a 	srli	r21,r22,16
   28060:	a47feb36 	bltu	r20,r17,28010 <__multiply+0x174>
   28064:	bd800015 	stw	r22,0(r23)
   28068:	d8c00017 	ldw	r3,0(sp)
   2806c:	94800104 	addi	r18,r18,4
   28070:	18c00104 	addi	r3,r3,4
   28074:	d8c00015 	stw	r3,0(sp)
   28078:	d8c00317 	ldw	r3,12(sp)
   2807c:	90ffbf36 	bltu	r18,r3,27f7c <__multiply+0xe0>
   28080:	d8c00117 	ldw	r3,4(sp)
   28084:	00c00c0e 	bge	zero,r3,280b8 <__multiply+0x21c>
   28088:	d8c00217 	ldw	r3,8(sp)
   2808c:	18bfff17 	ldw	r2,-4(r3)
   28090:	1d7fff04 	addi	r21,r3,-4
   28094:	10000326 	beq	r2,zero,280a4 <__multiply+0x208>
   28098:	00000706 	br	280b8 <__multiply+0x21c>
   2809c:	a8800017 	ldw	r2,0(r21)
   280a0:	1000051e 	bne	r2,zero,280b8 <__multiply+0x21c>
   280a4:	d8c00117 	ldw	r3,4(sp)
   280a8:	ad7fff04 	addi	r21,r21,-4
   280ac:	18ffffc4 	addi	r3,r3,-1
   280b0:	d8c00115 	stw	r3,4(sp)
   280b4:	183ff91e 	bne	r3,zero,2809c <__multiply+0x200>
   280b8:	d8800517 	ldw	r2,20(sp)
   280bc:	d8c00117 	ldw	r3,4(sp)
   280c0:	10c00415 	stw	r3,16(r2)
   280c4:	dfc00f17 	ldw	ra,60(sp)
   280c8:	df000e17 	ldw	fp,56(sp)
   280cc:	ddc00d17 	ldw	r23,52(sp)
   280d0:	dd800c17 	ldw	r22,48(sp)
   280d4:	dd400b17 	ldw	r21,44(sp)
   280d8:	dd000a17 	ldw	r20,40(sp)
   280dc:	dcc00917 	ldw	r19,36(sp)
   280e0:	dc800817 	ldw	r18,32(sp)
   280e4:	dc400717 	ldw	r17,28(sp)
   280e8:	dc000617 	ldw	r16,24(sp)
   280ec:	dec01004 	addi	sp,sp,64
   280f0:	f800283a 	ret

000280f4 <__pow5mult>:
   280f4:	defffb04 	addi	sp,sp,-20
   280f8:	dcc00315 	stw	r19,12(sp)
   280fc:	dc800215 	stw	r18,8(sp)
   28100:	dc000015 	stw	r16,0(sp)
   28104:	dfc00415 	stw	ra,16(sp)
   28108:	dc400115 	stw	r17,4(sp)
   2810c:	308000cc 	andi	r2,r6,3
   28110:	3021883a 	mov	r16,r6
   28114:	2027883a 	mov	r19,r4
   28118:	2825883a 	mov	r18,r5
   2811c:	10002e1e 	bne	r2,zero,281d8 <__pow5mult+0xe4>
   28120:	8021d0ba 	srai	r16,r16,2
   28124:	80001a26 	beq	r16,zero,28190 <__pow5mult+0x9c>
   28128:	9c401217 	ldw	r17,72(r19)
   2812c:	8800061e 	bne	r17,zero,28148 <__pow5mult+0x54>
   28130:	00003406 	br	28204 <__pow5mult+0x110>
   28134:	8021d07a 	srai	r16,r16,1
   28138:	80001526 	beq	r16,zero,28190 <__pow5mult+0x9c>
   2813c:	88c00017 	ldw	r3,0(r17)
   28140:	18001b26 	beq	r3,zero,281b0 <__pow5mult+0xbc>
   28144:	1823883a 	mov	r17,r3
   28148:	80c0004c 	andi	r3,r16,1
   2814c:	183ff926 	beq	r3,zero,28134 <__pow5mult+0x40>
   28150:	900b883a 	mov	r5,r18
   28154:	880d883a 	mov	r6,r17
   28158:	9809883a 	mov	r4,r19
   2815c:	0027e9c0 	call	27e9c <__multiply>
   28160:	90001b26 	beq	r18,zero,281d0 <__pow5mult+0xdc>
   28164:	91000117 	ldw	r4,4(r18)
   28168:	98c01317 	ldw	r3,76(r19)
   2816c:	8021d07a 	srai	r16,r16,1
   28170:	2109883a 	add	r4,r4,r4
   28174:	2109883a 	add	r4,r4,r4
   28178:	1907883a 	add	r3,r3,r4
   2817c:	19000017 	ldw	r4,0(r3)
   28180:	91000015 	stw	r4,0(r18)
   28184:	1c800015 	stw	r18,0(r3)
   28188:	1025883a 	mov	r18,r2
   2818c:	803feb1e 	bne	r16,zero,2813c <__pow5mult+0x48>
   28190:	9005883a 	mov	r2,r18
   28194:	dfc00417 	ldw	ra,16(sp)
   28198:	dcc00317 	ldw	r19,12(sp)
   2819c:	dc800217 	ldw	r18,8(sp)
   281a0:	dc400117 	ldw	r17,4(sp)
   281a4:	dc000017 	ldw	r16,0(sp)
   281a8:	dec00504 	addi	sp,sp,20
   281ac:	f800283a 	ret
   281b0:	880b883a 	mov	r5,r17
   281b4:	880d883a 	mov	r6,r17
   281b8:	9809883a 	mov	r4,r19
   281bc:	0027e9c0 	call	27e9c <__multiply>
   281c0:	88800015 	stw	r2,0(r17)
   281c4:	10000015 	stw	zero,0(r2)
   281c8:	1023883a 	mov	r17,r2
   281cc:	003fde06 	br	28148 <__pow5mult+0x54>
   281d0:	1025883a 	mov	r18,r2
   281d4:	003fd706 	br	28134 <__pow5mult+0x40>
   281d8:	10bfffc4 	addi	r2,r2,-1
   281dc:	1085883a 	add	r2,r2,r2
   281e0:	00c000f4 	movhi	r3,3
   281e4:	18fa6a04 	addi	r3,r3,-5720
   281e8:	1085883a 	add	r2,r2,r2
   281ec:	1885883a 	add	r2,r3,r2
   281f0:	11800017 	ldw	r6,0(r2)
   281f4:	000f883a 	mov	r7,zero
   281f8:	0027b000 	call	27b00 <__multadd>
   281fc:	1025883a 	mov	r18,r2
   28200:	003fc706 	br	28120 <__pow5mult+0x2c>
   28204:	9809883a 	mov	r4,r19
   28208:	01409c44 	movi	r5,625
   2820c:	0027e600 	call	27e60 <__i2b>
   28210:	98801215 	stw	r2,72(r19)
   28214:	1023883a 	mov	r17,r2
   28218:	10000015 	stw	zero,0(r2)
   2821c:	003fca06 	br	28148 <__pow5mult+0x54>

00028220 <__lshift>:
   28220:	defff904 	addi	sp,sp,-28
   28224:	dd400515 	stw	r21,20(sp)
   28228:	dc400115 	stw	r17,4(sp)
   2822c:	2d400417 	ldw	r21,16(r5)
   28230:	3023d17a 	srai	r17,r6,5
   28234:	28800217 	ldw	r2,8(r5)
   28238:	dd000415 	stw	r20,16(sp)
   2823c:	8d6b883a 	add	r21,r17,r21
   28240:	dcc00315 	stw	r19,12(sp)
   28244:	dc800215 	stw	r18,8(sp)
   28248:	dc000015 	stw	r16,0(sp)
   2824c:	dfc00615 	stw	ra,24(sp)
   28250:	ac000044 	addi	r16,r21,1
   28254:	2825883a 	mov	r18,r5
   28258:	3029883a 	mov	r20,r6
   2825c:	2027883a 	mov	r19,r4
   28260:	29400117 	ldw	r5,4(r5)
   28264:	1400030e 	bge	r2,r16,28274 <__lshift+0x54>
   28268:	1085883a 	add	r2,r2,r2
   2826c:	29400044 	addi	r5,r5,1
   28270:	143ffd16 	blt	r2,r16,28268 <__lshift+0x48>
   28274:	9809883a 	mov	r4,r19
   28278:	0027a300 	call	27a30 <_Balloc>
   2827c:	10c00504 	addi	r3,r2,20
   28280:	0440090e 	bge	zero,r17,282a8 <__lshift+0x88>
   28284:	000f883a 	mov	r7,zero
   28288:	18000015 	stw	zero,0(r3)
   2828c:	39c00044 	addi	r7,r7,1
   28290:	18c00104 	addi	r3,r3,4
   28294:	3c7ffc1e 	bne	r7,r17,28288 <__lshift+0x68>
   28298:	38c00144 	addi	r3,r7,5
   2829c:	18c7883a 	add	r3,r3,r3
   282a0:	18c7883a 	add	r3,r3,r3
   282a4:	10c7883a 	add	r3,r2,r3
   282a8:	92000417 	ldw	r8,16(r18)
   282ac:	a18007cc 	andi	r6,r20,31
   282b0:	91c00504 	addi	r7,r18,20
   282b4:	42000144 	addi	r8,r8,5
   282b8:	4211883a 	add	r8,r8,r8
   282bc:	4211883a 	add	r8,r8,r8
   282c0:	9211883a 	add	r8,r18,r8
   282c4:	30002226 	beq	r6,zero,28350 <__lshift+0x130>
   282c8:	02800804 	movi	r10,32
   282cc:	5195c83a 	sub	r10,r10,r6
   282d0:	000b883a 	mov	r5,zero
   282d4:	3a400017 	ldw	r9,0(r7)
   282d8:	18c00104 	addi	r3,r3,4
   282dc:	39c00104 	addi	r7,r7,4
   282e0:	4992983a 	sll	r9,r9,r6
   282e4:	2a4ab03a 	or	r5,r5,r9
   282e8:	197fff15 	stw	r5,-4(r3)
   282ec:	397fff17 	ldw	r5,-4(r7)
   282f0:	2a8ad83a 	srl	r5,r5,r10
   282f4:	3a3ff736 	bltu	r7,r8,282d4 <__lshift+0xb4>
   282f8:	19400015 	stw	r5,0(r3)
   282fc:	28000126 	beq	r5,zero,28304 <__lshift+0xe4>
   28300:	ac000084 	addi	r16,r21,2
   28304:	91000117 	ldw	r4,4(r18)
   28308:	98c01317 	ldw	r3,76(r19)
   2830c:	843fffc4 	addi	r16,r16,-1
   28310:	2109883a 	add	r4,r4,r4
   28314:	2109883a 	add	r4,r4,r4
   28318:	1907883a 	add	r3,r3,r4
   2831c:	19000017 	ldw	r4,0(r3)
   28320:	14000415 	stw	r16,16(r2)
   28324:	91000015 	stw	r4,0(r18)
   28328:	1c800015 	stw	r18,0(r3)
   2832c:	dfc00617 	ldw	ra,24(sp)
   28330:	dd400517 	ldw	r21,20(sp)
   28334:	dd000417 	ldw	r20,16(sp)
   28338:	dcc00317 	ldw	r19,12(sp)
   2833c:	dc800217 	ldw	r18,8(sp)
   28340:	dc400117 	ldw	r17,4(sp)
   28344:	dc000017 	ldw	r16,0(sp)
   28348:	dec00704 	addi	sp,sp,28
   2834c:	f800283a 	ret
   28350:	39400017 	ldw	r5,0(r7)
   28354:	18c00104 	addi	r3,r3,4
   28358:	39c00104 	addi	r7,r7,4
   2835c:	197fff15 	stw	r5,-4(r3)
   28360:	3a3fe82e 	bgeu	r7,r8,28304 <__lshift+0xe4>
   28364:	39400017 	ldw	r5,0(r7)
   28368:	18c00104 	addi	r3,r3,4
   2836c:	39c00104 	addi	r7,r7,4
   28370:	197fff15 	stw	r5,-4(r3)
   28374:	3a3ff636 	bltu	r7,r8,28350 <__lshift+0x130>
   28378:	003fe206 	br	28304 <__lshift+0xe4>

0002837c <__mcmp>:
   2837c:	20800417 	ldw	r2,16(r4)
   28380:	28c00417 	ldw	r3,16(r5)
   28384:	10c5c83a 	sub	r2,r2,r3
   28388:	10000f1e 	bne	r2,zero,283c8 <__mcmp+0x4c>
   2838c:	18c00144 	addi	r3,r3,5
   28390:	18c7883a 	add	r3,r3,r3
   28394:	18c7883a 	add	r3,r3,r3
   28398:	21c00504 	addi	r7,r4,20
   2839c:	28cb883a 	add	r5,r5,r3
   283a0:	20c9883a 	add	r4,r4,r3
   283a4:	213fff04 	addi	r4,r4,-4
   283a8:	297fff04 	addi	r5,r5,-4
   283ac:	21800017 	ldw	r6,0(r4)
   283b0:	28c00017 	ldw	r3,0(r5)
   283b4:	30c0021e 	bne	r6,r3,283c0 <__mcmp+0x44>
   283b8:	393ffa36 	bltu	r7,r4,283a4 <__mcmp+0x28>
   283bc:	f800283a 	ret
   283c0:	30c00236 	bltu	r6,r3,283cc <__mcmp+0x50>
   283c4:	00800044 	movi	r2,1
   283c8:	f800283a 	ret
   283cc:	00bfffc4 	movi	r2,-1
   283d0:	f800283a 	ret

000283d4 <__mdiff>:
   283d4:	defffb04 	addi	sp,sp,-20
   283d8:	dc000015 	stw	r16,0(sp)
   283dc:	2821883a 	mov	r16,r5
   283e0:	dc800215 	stw	r18,8(sp)
   283e4:	300b883a 	mov	r5,r6
   283e8:	2025883a 	mov	r18,r4
   283ec:	8009883a 	mov	r4,r16
   283f0:	dc400115 	stw	r17,4(sp)
   283f4:	dfc00415 	stw	ra,16(sp)
   283f8:	dcc00315 	stw	r19,12(sp)
   283fc:	3023883a 	mov	r17,r6
   28400:	002837c0 	call	2837c <__mcmp>
   28404:	10005026 	beq	r2,zero,28548 <__mdiff+0x174>
   28408:	10004a16 	blt	r2,zero,28534 <__mdiff+0x160>
   2840c:	0027883a 	mov	r19,zero
   28410:	81400117 	ldw	r5,4(r16)
   28414:	9009883a 	mov	r4,r18
   28418:	0027a300 	call	27a30 <_Balloc>
   2841c:	82400417 	ldw	r9,16(r16)
   28420:	89800417 	ldw	r6,16(r17)
   28424:	14c00315 	stw	r19,12(r2)
   28428:	4b800144 	addi	r14,r9,5
   2842c:	31800144 	addi	r6,r6,5
   28430:	739d883a 	add	r14,r14,r14
   28434:	318d883a 	add	r6,r6,r6
   28438:	739d883a 	add	r14,r14,r14
   2843c:	318d883a 	add	r6,r6,r6
   28440:	81c00504 	addi	r7,r16,20
   28444:	839d883a 	add	r14,r16,r14
   28448:	8a000504 	addi	r8,r17,20
   2844c:	898d883a 	add	r6,r17,r6
   28450:	10c00504 	addi	r3,r2,20
   28454:	0009883a 	mov	r4,zero
   28458:	3b000017 	ldw	r12,0(r7)
   2845c:	42c00017 	ldw	r11,0(r8)
   28460:	42000104 	addi	r8,r8,4
   28464:	62bfffcc 	andi	r10,r12,65535
   28468:	5b7fffcc 	andi	r13,r11,65535
   2846c:	5109883a 	add	r4,r10,r4
   28470:	2355c83a 	sub	r10,r4,r13
   28474:	5816d43a 	srli	r11,r11,16
   28478:	6008d43a 	srli	r4,r12,16
   2847c:	501bd43a 	srai	r13,r10,16
   28480:	1a80000d 	sth	r10,0(r3)
   28484:	22c9c83a 	sub	r4,r4,r11
   28488:	2349883a 	add	r4,r4,r13
   2848c:	1900008d 	sth	r4,2(r3)
   28490:	39c00104 	addi	r7,r7,4
   28494:	2009d43a 	srai	r4,r4,16
   28498:	18c00104 	addi	r3,r3,4
   2849c:	41bfee36 	bltu	r8,r6,28458 <__mdiff+0x84>
   284a0:	180b883a 	mov	r5,r3
   284a4:	3815883a 	mov	r10,r7
   284a8:	3b80132e 	bgeu	r7,r14,284f8 <__mdiff+0x124>
   284ac:	3a000017 	ldw	r8,0(r7)
   284b0:	18c00104 	addi	r3,r3,4
   284b4:	39c00104 	addi	r7,r7,4
   284b8:	41bfffcc 	andi	r6,r8,65535
   284bc:	310d883a 	add	r6,r6,r4
   284c0:	3009d43a 	srai	r4,r6,16
   284c4:	4010d43a 	srli	r8,r8,16
   284c8:	19bfff0d 	sth	r6,-4(r3)
   284cc:	2209883a 	add	r4,r4,r8
   284d0:	193fff8d 	sth	r4,-2(r3)
   284d4:	2009d43a 	srai	r4,r4,16
   284d8:	3bbff436 	bltu	r7,r14,284ac <__mdiff+0xd8>
   284dc:	0286303a 	nor	r3,zero,r10
   284e0:	1b87883a 	add	r3,r3,r14
   284e4:	1806d0ba 	srli	r3,r3,2
   284e8:	18c00044 	addi	r3,r3,1
   284ec:	18c7883a 	add	r3,r3,r3
   284f0:	18c7883a 	add	r3,r3,r3
   284f4:	28c7883a 	add	r3,r5,r3
   284f8:	193fff17 	ldw	r4,-4(r3)
   284fc:	18ffff04 	addi	r3,r3,-4
   28500:	2000041e 	bne	r4,zero,28514 <__mdiff+0x140>
   28504:	18ffff04 	addi	r3,r3,-4
   28508:	19000017 	ldw	r4,0(r3)
   2850c:	4a7fffc4 	addi	r9,r9,-1
   28510:	203ffc26 	beq	r4,zero,28504 <__mdiff+0x130>
   28514:	12400415 	stw	r9,16(r2)
   28518:	dfc00417 	ldw	ra,16(sp)
   2851c:	dcc00317 	ldw	r19,12(sp)
   28520:	dc800217 	ldw	r18,8(sp)
   28524:	dc400117 	ldw	r17,4(sp)
   28528:	dc000017 	ldw	r16,0(sp)
   2852c:	dec00504 	addi	sp,sp,20
   28530:	f800283a 	ret
   28534:	8005883a 	mov	r2,r16
   28538:	04c00044 	movi	r19,1
   2853c:	8821883a 	mov	r16,r17
   28540:	1023883a 	mov	r17,r2
   28544:	003fb206 	br	28410 <__mdiff+0x3c>
   28548:	9009883a 	mov	r4,r18
   2854c:	000b883a 	mov	r5,zero
   28550:	0027a300 	call	27a30 <_Balloc>
   28554:	00c00044 	movi	r3,1
   28558:	10c00415 	stw	r3,16(r2)
   2855c:	10000515 	stw	zero,20(r2)
   28560:	dfc00417 	ldw	ra,16(sp)
   28564:	dcc00317 	ldw	r19,12(sp)
   28568:	dc800217 	ldw	r18,8(sp)
   2856c:	dc400117 	ldw	r17,4(sp)
   28570:	dc000017 	ldw	r16,0(sp)
   28574:	dec00504 	addi	sp,sp,20
   28578:	f800283a 	ret

0002857c <__ulp>:
   2857c:	295ffc2c 	andhi	r5,r5,32752
   28580:	00bf3034 	movhi	r2,64704
   28584:	2887883a 	add	r3,r5,r2
   28588:	00c0020e 	bge	zero,r3,28594 <__ulp+0x18>
   2858c:	0005883a 	mov	r2,zero
   28590:	f800283a 	ret
   28594:	00c7c83a 	sub	r3,zero,r3
   28598:	1805d53a 	srai	r2,r3,20
   2859c:	00c004c4 	movi	r3,19
   285a0:	18800a0e 	bge	r3,r2,285cc <__ulp+0x50>
   285a4:	01000c84 	movi	r4,50
   285a8:	0007883a 	mov	r3,zero
   285ac:	20800516 	blt	r4,r2,285c4 <__ulp+0x48>
   285b0:	01000cc4 	movi	r4,51
   285b4:	2085c83a 	sub	r2,r4,r2
   285b8:	01000044 	movi	r4,1
   285bc:	2084983a 	sll	r2,r4,r2
   285c0:	f800283a 	ret
   285c4:	00800044 	movi	r2,1
   285c8:	f800283a 	ret
   285cc:	00c00234 	movhi	r3,8
   285d0:	1887d83a 	sra	r3,r3,r2
   285d4:	0005883a 	mov	r2,zero
   285d8:	f800283a 	ret

000285dc <__b2d>:
   285dc:	defffa04 	addi	sp,sp,-24
   285e0:	dc000015 	stw	r16,0(sp)
   285e4:	24000417 	ldw	r16,16(r4)
   285e8:	dc400115 	stw	r17,4(sp)
   285ec:	dcc00315 	stw	r19,12(sp)
   285f0:	84000144 	addi	r16,r16,5
   285f4:	8421883a 	add	r16,r16,r16
   285f8:	8421883a 	add	r16,r16,r16
   285fc:	2421883a 	add	r16,r4,r16
   28600:	847fff17 	ldw	r17,-4(r16)
   28604:	24c00504 	addi	r19,r4,20
   28608:	dd000415 	stw	r20,16(sp)
   2860c:	8809883a 	mov	r4,r17
   28610:	dc800215 	stw	r18,8(sp)
   28614:	2829883a 	mov	r20,r5
   28618:	dfc00515 	stw	ra,20(sp)
   2861c:	0027d480 	call	27d48 <__hi0bits>
   28620:	00c00804 	movi	r3,32
   28624:	1887c83a 	sub	r3,r3,r2
   28628:	a0c00015 	stw	r3,0(r20)
   2862c:	00c00284 	movi	r3,10
   28630:	84bfff04 	addi	r18,r16,-4
   28634:	18801216 	blt	r3,r2,28680 <__b2d+0xa4>
   28638:	010002c4 	movi	r4,11
   2863c:	2089c83a 	sub	r4,r4,r2
   28640:	8906d83a 	srl	r3,r17,r4
   28644:	18cffc34 	orhi	r3,r3,16368
   28648:	9c80322e 	bgeu	r19,r18,28714 <__b2d+0x138>
   2864c:	817ffe17 	ldw	r5,-8(r16)
   28650:	2908d83a 	srl	r4,r5,r4
   28654:	10800544 	addi	r2,r2,21
   28658:	88a2983a 	sll	r17,r17,r2
   2865c:	2444b03a 	or	r2,r4,r17
   28660:	dfc00517 	ldw	ra,20(sp)
   28664:	dd000417 	ldw	r20,16(sp)
   28668:	dcc00317 	ldw	r19,12(sp)
   2866c:	dc800217 	ldw	r18,8(sp)
   28670:	dc400117 	ldw	r17,4(sp)
   28674:	dc000017 	ldw	r16,0(sp)
   28678:	dec00604 	addi	sp,sp,24
   2867c:	f800283a 	ret
   28680:	9c801636 	bltu	r19,r18,286dc <__b2d+0x100>
   28684:	113ffd44 	addi	r4,r2,-11
   28688:	000b883a 	mov	r5,zero
   2868c:	20001726 	beq	r4,zero,286ec <__b2d+0x110>
   28690:	00c00ac4 	movi	r3,43
   28694:	1885c83a 	sub	r2,r3,r2
   28698:	8906983a 	sll	r3,r17,r4
   2869c:	288cd83a 	srl	r6,r5,r2
   286a0:	18cffc34 	orhi	r3,r3,16368
   286a4:	1986b03a 	or	r3,r3,r6
   286a8:	9c801c2e 	bgeu	r19,r18,2871c <__b2d+0x140>
   286ac:	91bfff17 	ldw	r6,-4(r18)
   286b0:	3084d83a 	srl	r2,r6,r2
   286b4:	2908983a 	sll	r4,r5,r4
   286b8:	1104b03a 	or	r2,r2,r4
   286bc:	dfc00517 	ldw	ra,20(sp)
   286c0:	dd000417 	ldw	r20,16(sp)
   286c4:	dcc00317 	ldw	r19,12(sp)
   286c8:	dc800217 	ldw	r18,8(sp)
   286cc:	dc400117 	ldw	r17,4(sp)
   286d0:	dc000017 	ldw	r16,0(sp)
   286d4:	dec00604 	addi	sp,sp,24
   286d8:	f800283a 	ret
   286dc:	113ffd44 	addi	r4,r2,-11
   286e0:	84bffe04 	addi	r18,r16,-8
   286e4:	817ffe17 	ldw	r5,-8(r16)
   286e8:	203fe91e 	bne	r4,zero,28690 <__b2d+0xb4>
   286ec:	88cffc34 	orhi	r3,r17,16368
   286f0:	2805883a 	mov	r2,r5
   286f4:	dfc00517 	ldw	ra,20(sp)
   286f8:	dd000417 	ldw	r20,16(sp)
   286fc:	dcc00317 	ldw	r19,12(sp)
   28700:	dc800217 	ldw	r18,8(sp)
   28704:	dc400117 	ldw	r17,4(sp)
   28708:	dc000017 	ldw	r16,0(sp)
   2870c:	dec00604 	addi	sp,sp,24
   28710:	f800283a 	ret
   28714:	0009883a 	mov	r4,zero
   28718:	003fce06 	br	28654 <__b2d+0x78>
   2871c:	0005883a 	mov	r2,zero
   28720:	003fe406 	br	286b4 <__b2d+0xd8>

00028724 <__d2b>:
   28724:	defff804 	addi	sp,sp,-32
   28728:	dc400315 	stw	r17,12(sp)
   2872c:	3023883a 	mov	r17,r6
   28730:	dc800415 	stw	r18,16(sp)
   28734:	8824907a 	slli	r18,r17,1
   28738:	dcc00515 	stw	r19,20(sp)
   2873c:	2827883a 	mov	r19,r5
   28740:	9024d57a 	srli	r18,r18,21
   28744:	01400044 	movi	r5,1
   28748:	dd000615 	stw	r20,24(sp)
   2874c:	dc000215 	stw	r16,8(sp)
   28750:	dfc00715 	stw	ra,28(sp)
   28754:	3829883a 	mov	r20,r7
   28758:	0027a300 	call	27a30 <_Balloc>
   2875c:	1021883a 	mov	r16,r2
   28760:	00800434 	movhi	r2,16
   28764:	10bfffc4 	addi	r2,r2,-1
   28768:	88a2703a 	and	r17,r17,r2
   2876c:	90000126 	beq	r18,zero,28774 <__d2b+0x50>
   28770:	8c400434 	orhi	r17,r17,16
   28774:	dc400015 	stw	r17,0(sp)
   28778:	98002226 	beq	r19,zero,28804 <__d2b+0xe0>
   2877c:	d9000104 	addi	r4,sp,4
   28780:	dcc00115 	stw	r19,4(sp)
   28784:	0027db00 	call	27db0 <__lo0bits>
   28788:	d8c00017 	ldw	r3,0(sp)
   2878c:	10002d1e 	bne	r2,zero,28844 <__d2b+0x120>
   28790:	d9000117 	ldw	r4,4(sp)
   28794:	81000515 	stw	r4,20(r16)
   28798:	1823003a 	cmpeq	r17,r3,zero
   2879c:	01000084 	movi	r4,2
   287a0:	2463c83a 	sub	r17,r4,r17
   287a4:	80c00615 	stw	r3,24(r16)
   287a8:	84400415 	stw	r17,16(r16)
   287ac:	90001d1e 	bne	r18,zero,28824 <__d2b+0x100>
   287b0:	88c00104 	addi	r3,r17,4
   287b4:	18c7883a 	add	r3,r3,r3
   287b8:	18c7883a 	add	r3,r3,r3
   287bc:	80c7883a 	add	r3,r16,r3
   287c0:	19000017 	ldw	r4,0(r3)
   287c4:	10bef384 	addi	r2,r2,-1074
   287c8:	a0800015 	stw	r2,0(r20)
   287cc:	0027d480 	call	27d48 <__hi0bits>
   287d0:	8822917a 	slli	r17,r17,5
   287d4:	d8c00817 	ldw	r3,32(sp)
   287d8:	8885c83a 	sub	r2,r17,r2
   287dc:	18800015 	stw	r2,0(r3)
   287e0:	8005883a 	mov	r2,r16
   287e4:	dfc00717 	ldw	ra,28(sp)
   287e8:	dd000617 	ldw	r20,24(sp)
   287ec:	dcc00517 	ldw	r19,20(sp)
   287f0:	dc800417 	ldw	r18,16(sp)
   287f4:	dc400317 	ldw	r17,12(sp)
   287f8:	dc000217 	ldw	r16,8(sp)
   287fc:	dec00804 	addi	sp,sp,32
   28800:	f800283a 	ret
   28804:	d809883a 	mov	r4,sp
   28808:	0027db00 	call	27db0 <__lo0bits>
   2880c:	d8c00017 	ldw	r3,0(sp)
   28810:	04400044 	movi	r17,1
   28814:	84400415 	stw	r17,16(r16)
   28818:	80c00515 	stw	r3,20(r16)
   2881c:	10800804 	addi	r2,r2,32
   28820:	903fe326 	beq	r18,zero,287b0 <__d2b+0x8c>
   28824:	00c00d44 	movi	r3,53
   28828:	94bef344 	addi	r18,r18,-1075
   2882c:	90a5883a 	add	r18,r18,r2
   28830:	1885c83a 	sub	r2,r3,r2
   28834:	d8c00817 	ldw	r3,32(sp)
   28838:	a4800015 	stw	r18,0(r20)
   2883c:	18800015 	stw	r2,0(r3)
   28840:	003fe706 	br	287e0 <__d2b+0xbc>
   28844:	01000804 	movi	r4,32
   28848:	2089c83a 	sub	r4,r4,r2
   2884c:	1908983a 	sll	r4,r3,r4
   28850:	d9400117 	ldw	r5,4(sp)
   28854:	1886d83a 	srl	r3,r3,r2
   28858:	2148b03a 	or	r4,r4,r5
   2885c:	81000515 	stw	r4,20(r16)
   28860:	d8c00015 	stw	r3,0(sp)
   28864:	003fcc06 	br	28798 <__d2b+0x74>

00028868 <__ratio>:
   28868:	defff904 	addi	sp,sp,-28
   2886c:	dc400315 	stw	r17,12(sp)
   28870:	2823883a 	mov	r17,r5
   28874:	d9400104 	addi	r5,sp,4
   28878:	dfc00615 	stw	ra,24(sp)
   2887c:	dcc00515 	stw	r19,20(sp)
   28880:	dc800415 	stw	r18,16(sp)
   28884:	2027883a 	mov	r19,r4
   28888:	dc000215 	stw	r16,8(sp)
   2888c:	00285dc0 	call	285dc <__b2d>
   28890:	8809883a 	mov	r4,r17
   28894:	d80b883a 	mov	r5,sp
   28898:	1025883a 	mov	r18,r2
   2889c:	1821883a 	mov	r16,r3
   288a0:	00285dc0 	call	285dc <__b2d>
   288a4:	99400417 	ldw	r5,16(r19)
   288a8:	89000417 	ldw	r4,16(r17)
   288ac:	d9800117 	ldw	r6,4(sp)
   288b0:	2909c83a 	sub	r4,r5,r4
   288b4:	d9400017 	ldw	r5,0(sp)
   288b8:	2008917a 	slli	r4,r4,5
   288bc:	314bc83a 	sub	r5,r6,r5
   288c0:	290b883a 	add	r5,r5,r4
   288c4:	01400e0e 	bge	zero,r5,28900 <__ratio+0x98>
   288c8:	280a953a 	slli	r5,r5,20
   288cc:	2c21883a 	add	r16,r5,r16
   288d0:	9009883a 	mov	r4,r18
   288d4:	800b883a 	mov	r5,r16
   288d8:	100d883a 	mov	r6,r2
   288dc:	180f883a 	mov	r7,r3
   288e0:	002a6200 	call	2a620 <__divdf3>
   288e4:	dfc00617 	ldw	ra,24(sp)
   288e8:	dcc00517 	ldw	r19,20(sp)
   288ec:	dc800417 	ldw	r18,16(sp)
   288f0:	dc400317 	ldw	r17,12(sp)
   288f4:	dc000217 	ldw	r16,8(sp)
   288f8:	dec00704 	addi	sp,sp,28
   288fc:	f800283a 	ret
   28900:	280a953a 	slli	r5,r5,20
   28904:	1947c83a 	sub	r3,r3,r5
   28908:	003ff106 	br	288d0 <__ratio+0x68>

0002890c <_mprec_log10>:
   2890c:	defffe04 	addi	sp,sp,-8
   28910:	dc000015 	stw	r16,0(sp)
   28914:	dfc00115 	stw	ra,4(sp)
   28918:	008005c4 	movi	r2,23
   2891c:	2021883a 	mov	r16,r4
   28920:	11000d0e 	bge	r2,r4,28958 <_mprec_log10+0x4c>
   28924:	0005883a 	mov	r2,zero
   28928:	00cffc34 	movhi	r3,16368
   2892c:	843fffc4 	addi	r16,r16,-1
   28930:	1009883a 	mov	r4,r2
   28934:	180b883a 	mov	r5,r3
   28938:	000d883a 	mov	r6,zero
   2893c:	01d00934 	movhi	r7,16420
   28940:	002a33c0 	call	2a33c <__muldf3>
   28944:	803ff91e 	bne	r16,zero,2892c <_mprec_log10+0x20>
   28948:	dfc00117 	ldw	ra,4(sp)
   2894c:	dc000017 	ldw	r16,0(sp)
   28950:	dec00204 	addi	sp,sp,8
   28954:	f800283a 	ret
   28958:	202090fa 	slli	r16,r4,3
   2895c:	008000f4 	movhi	r2,3
   28960:	10ba3804 	addi	r2,r2,-5920
   28964:	1421883a 	add	r16,r2,r16
   28968:	80800017 	ldw	r2,0(r16)
   2896c:	80c00117 	ldw	r3,4(r16)
   28970:	dfc00117 	ldw	ra,4(sp)
   28974:	dc000017 	ldw	r16,0(sp)
   28978:	dec00204 	addi	sp,sp,8
   2897c:	f800283a 	ret

00028980 <__copybits>:
   28980:	297fffc4 	addi	r5,r5,-1
   28984:	31c00417 	ldw	r7,16(r6)
   28988:	2811d17a 	srai	r8,r5,5
   2898c:	30800504 	addi	r2,r6,20
   28990:	39c00144 	addi	r7,r7,5
   28994:	42000044 	addi	r8,r8,1
   28998:	39cf883a 	add	r7,r7,r7
   2899c:	4211883a 	add	r8,r8,r8
   289a0:	39cf883a 	add	r7,r7,r7
   289a4:	4211883a 	add	r8,r8,r8
   289a8:	31cf883a 	add	r7,r6,r7
   289ac:	2211883a 	add	r8,r4,r8
   289b0:	11c00d2e 	bgeu	r2,r7,289e8 <__copybits+0x68>
   289b4:	2007883a 	mov	r3,r4
   289b8:	11400017 	ldw	r5,0(r2)
   289bc:	18c00104 	addi	r3,r3,4
   289c0:	10800104 	addi	r2,r2,4
   289c4:	197fff15 	stw	r5,-4(r3)
   289c8:	11fffb36 	bltu	r2,r7,289b8 <__copybits+0x38>
   289cc:	3985c83a 	sub	r2,r7,r6
   289d0:	10bffac4 	addi	r2,r2,-21
   289d4:	1004d0ba 	srli	r2,r2,2
   289d8:	10800044 	addi	r2,r2,1
   289dc:	1085883a 	add	r2,r2,r2
   289e0:	1085883a 	add	r2,r2,r2
   289e4:	2089883a 	add	r4,r4,r2
   289e8:	2200032e 	bgeu	r4,r8,289f8 <__copybits+0x78>
   289ec:	20000015 	stw	zero,0(r4)
   289f0:	21000104 	addi	r4,r4,4
   289f4:	223ffd36 	bltu	r4,r8,289ec <__copybits+0x6c>
   289f8:	f800283a 	ret

000289fc <__any_on>:
   289fc:	21800417 	ldw	r6,16(r4)
   28a00:	2805d17a 	srai	r2,r5,5
   28a04:	20c00504 	addi	r3,r4,20
   28a08:	30800f0e 	bge	r6,r2,28a48 <__any_on+0x4c>
   28a0c:	3005883a 	mov	r2,r6
   28a10:	10800144 	addi	r2,r2,5
   28a14:	1085883a 	add	r2,r2,r2
   28a18:	1085883a 	add	r2,r2,r2
   28a1c:	2089883a 	add	r4,r4,r2
   28a20:	1900152e 	bgeu	r3,r4,28a78 <__any_on+0x7c>
   28a24:	20bfff17 	ldw	r2,-4(r4)
   28a28:	213fff04 	addi	r4,r4,-4
   28a2c:	1000041e 	bne	r2,zero,28a40 <__any_on+0x44>
   28a30:	1900112e 	bgeu	r3,r4,28a78 <__any_on+0x7c>
   28a34:	213fff04 	addi	r4,r4,-4
   28a38:	20800017 	ldw	r2,0(r4)
   28a3c:	103ffc26 	beq	r2,zero,28a30 <__any_on+0x34>
   28a40:	00800044 	movi	r2,1
   28a44:	f800283a 	ret
   28a48:	11bff10e 	bge	r2,r6,28a10 <__any_on+0x14>
   28a4c:	294007cc 	andi	r5,r5,31
   28a50:	283fef26 	beq	r5,zero,28a10 <__any_on+0x14>
   28a54:	11800144 	addi	r6,r2,5
   28a58:	318d883a 	add	r6,r6,r6
   28a5c:	318d883a 	add	r6,r6,r6
   28a60:	218d883a 	add	r6,r4,r6
   28a64:	31800017 	ldw	r6,0(r6)
   28a68:	314ed83a 	srl	r7,r6,r5
   28a6c:	394a983a 	sll	r5,r7,r5
   28a70:	29bff31e 	bne	r5,r6,28a40 <__any_on+0x44>
   28a74:	003fe606 	br	28a10 <__any_on+0x14>
   28a78:	0005883a 	mov	r2,zero
   28a7c:	f800283a 	ret

00028a80 <_read_r>:
   28a80:	defffd04 	addi	sp,sp,-12
   28a84:	dc400115 	stw	r17,4(sp)
   28a88:	dc000015 	stw	r16,0(sp)
   28a8c:	2023883a 	mov	r17,r4
   28a90:	040000f4 	movhi	r16,3
   28a94:	84082404 	addi	r16,r16,8336
   28a98:	2809883a 	mov	r4,r5
   28a9c:	300b883a 	mov	r5,r6
   28aa0:	380d883a 	mov	r6,r7
   28aa4:	dfc00215 	stw	ra,8(sp)
   28aa8:	80000015 	stw	zero,0(r16)
   28aac:	002bccc0 	call	2bccc <read>
   28ab0:	00ffffc4 	movi	r3,-1
   28ab4:	10c00526 	beq	r2,r3,28acc <_read_r+0x4c>
   28ab8:	dfc00217 	ldw	ra,8(sp)
   28abc:	dc400117 	ldw	r17,4(sp)
   28ac0:	dc000017 	ldw	r16,0(sp)
   28ac4:	dec00304 	addi	sp,sp,12
   28ac8:	f800283a 	ret
   28acc:	80c00017 	ldw	r3,0(r16)
   28ad0:	183ff926 	beq	r3,zero,28ab8 <_read_r+0x38>
   28ad4:	88c00015 	stw	r3,0(r17)
   28ad8:	dfc00217 	ldw	ra,8(sp)
   28adc:	dc400117 	ldw	r17,4(sp)
   28ae0:	dc000017 	ldw	r16,0(sp)
   28ae4:	dec00304 	addi	sp,sp,12
   28ae8:	f800283a 	ret

00028aec <_realloc_r>:
   28aec:	defff504 	addi	sp,sp,-44
   28af0:	dd400615 	stw	r21,24(sp)
   28af4:	dc800315 	stw	r18,12(sp)
   28af8:	dc000115 	stw	r16,4(sp)
   28afc:	dfc00a15 	stw	ra,40(sp)
   28b00:	df000915 	stw	fp,36(sp)
   28b04:	ddc00815 	stw	r23,32(sp)
   28b08:	dd800715 	stw	r22,28(sp)
   28b0c:	dd000515 	stw	r20,20(sp)
   28b10:	dcc00415 	stw	r19,16(sp)
   28b14:	dc400215 	stw	r17,8(sp)
   28b18:	2821883a 	mov	r16,r5
   28b1c:	202b883a 	mov	r21,r4
   28b20:	3025883a 	mov	r18,r6
   28b24:	28009626 	beq	r5,zero,28d80 <_realloc_r+0x294>
   28b28:	002b9a40 	call	2b9a4 <__malloc_lock>
   28b2c:	80bfff17 	ldw	r2,-4(r16)
   28b30:	04ffff04 	movi	r19,-4
   28b34:	90c002c4 	addi	r3,r18,11
   28b38:	01000584 	movi	r4,22
   28b3c:	85bffe04 	addi	r22,r16,-8
   28b40:	14e6703a 	and	r19,r2,r19
   28b44:	20c0372e 	bgeu	r4,r3,28c24 <_realloc_r+0x138>
   28b48:	047ffe04 	movi	r17,-8
   28b4c:	1c62703a 	and	r17,r3,r17
   28b50:	8807883a 	mov	r3,r17
   28b54:	88005a16 	blt	r17,zero,28cc0 <_realloc_r+0x1d4>
   28b58:	8c805936 	bltu	r17,r18,28cc0 <_realloc_r+0x1d4>
   28b5c:	98c0340e 	bge	r19,r3,28c30 <_realloc_r+0x144>
   28b60:	070000f4 	movhi	fp,3
   28b64:	e73bc004 	addi	fp,fp,-4352
   28b68:	e1400217 	ldw	r5,8(fp)
   28b6c:	b4c9883a 	add	r4,r22,r19
   28b70:	29009026 	beq	r5,r4,28db4 <_realloc_r+0x2c8>
   28b74:	21800117 	ldw	r6,4(r4)
   28b78:	01ffff84 	movi	r7,-2
   28b7c:	31ce703a 	and	r7,r6,r7
   28b80:	21cf883a 	add	r7,r4,r7
   28b84:	39c00117 	ldw	r7,4(r7)
   28b88:	39c0004c 	andi	r7,r7,1
   28b8c:	38004326 	beq	r7,zero,28c9c <_realloc_r+0x1b0>
   28b90:	000d883a 	mov	r6,zero
   28b94:	0009883a 	mov	r4,zero
   28b98:	1080004c 	andi	r2,r2,1
   28b9c:	10005a1e 	bne	r2,zero,28d08 <_realloc_r+0x21c>
   28ba0:	85fffe17 	ldw	r23,-8(r16)
   28ba4:	00bfff04 	movi	r2,-4
   28ba8:	b5efc83a 	sub	r23,r22,r23
   28bac:	b9c00117 	ldw	r7,4(r23)
   28bb0:	388e703a 	and	r7,r7,r2
   28bb4:	3ccf883a 	add	r7,r7,r19
   28bb8:	20005226 	beq	r4,zero,28d04 <_realloc_r+0x218>
   28bbc:	31e9883a 	add	r20,r6,r7
   28bc0:	2140c726 	beq	r4,r5,28ee0 <_realloc_r+0x3f4>
   28bc4:	a0c04f16 	blt	r20,r3,28d04 <_realloc_r+0x218>
   28bc8:	20800317 	ldw	r2,12(r4)
   28bcc:	20c00217 	ldw	r3,8(r4)
   28bd0:	99bfff04 	addi	r6,r19,-4
   28bd4:	01000904 	movi	r4,36
   28bd8:	18800315 	stw	r2,12(r3)
   28bdc:	10c00215 	stw	r3,8(r2)
   28be0:	b8c00217 	ldw	r3,8(r23)
   28be4:	b8800317 	ldw	r2,12(r23)
   28be8:	bc800204 	addi	r18,r23,8
   28bec:	18800315 	stw	r2,12(r3)
   28bf0:	10c00215 	stw	r3,8(r2)
   28bf4:	2180ed36 	bltu	r4,r6,28fac <_realloc_r+0x4c0>
   28bf8:	008004c4 	movi	r2,19
   28bfc:	11809b2e 	bgeu	r2,r6,28e6c <_realloc_r+0x380>
   28c00:	80800017 	ldw	r2,0(r16)
   28c04:	b8800215 	stw	r2,8(r23)
   28c08:	80800117 	ldw	r2,4(r16)
   28c0c:	b8800315 	stw	r2,12(r23)
   28c10:	008006c4 	movi	r2,27
   28c14:	1180f936 	bltu	r2,r6,28ffc <_realloc_r+0x510>
   28c18:	b8800404 	addi	r2,r23,16
   28c1c:	80c00204 	addi	r3,r16,8
   28c20:	00009406 	br	28e74 <_realloc_r+0x388>
   28c24:	00c00404 	movi	r3,16
   28c28:	1823883a 	mov	r17,r3
   28c2c:	003fca06 	br	28b58 <_realloc_r+0x6c>
   28c30:	9829883a 	mov	r20,r19
   28c34:	a447c83a 	sub	r3,r20,r17
   28c38:	010003c4 	movi	r4,15
   28c3c:	1080004c 	andi	r2,r2,1
   28c40:	20c02336 	bltu	r4,r3,28cd0 <_realloc_r+0x1e4>
   28c44:	1504b03a 	or	r2,r2,r20
   28c48:	b0800115 	stw	r2,4(r22)
   28c4c:	b52d883a 	add	r22,r22,r20
   28c50:	b0800117 	ldw	r2,4(r22)
   28c54:	10800054 	ori	r2,r2,1
   28c58:	b0800115 	stw	r2,4(r22)
   28c5c:	a809883a 	mov	r4,r21
   28c60:	002b9c40 	call	2b9c4 <__malloc_unlock>
   28c64:	8025883a 	mov	r18,r16
   28c68:	9005883a 	mov	r2,r18
   28c6c:	dfc00a17 	ldw	ra,40(sp)
   28c70:	df000917 	ldw	fp,36(sp)
   28c74:	ddc00817 	ldw	r23,32(sp)
   28c78:	dd800717 	ldw	r22,28(sp)
   28c7c:	dd400617 	ldw	r21,24(sp)
   28c80:	dd000517 	ldw	r20,20(sp)
   28c84:	dcc00417 	ldw	r19,16(sp)
   28c88:	dc800317 	ldw	r18,12(sp)
   28c8c:	dc400217 	ldw	r17,8(sp)
   28c90:	dc000117 	ldw	r16,4(sp)
   28c94:	dec00b04 	addi	sp,sp,44
   28c98:	f800283a 	ret
   28c9c:	01ffff04 	movi	r7,-4
   28ca0:	31cc703a 	and	r6,r6,r7
   28ca4:	34e9883a 	add	r20,r6,r19
   28ca8:	a0ffbb16 	blt	r20,r3,28b98 <_realloc_r+0xac>
   28cac:	20c00317 	ldw	r3,12(r4)
   28cb0:	21000217 	ldw	r4,8(r4)
   28cb4:	20c00315 	stw	r3,12(r4)
   28cb8:	19000215 	stw	r4,8(r3)
   28cbc:	003fdd06 	br	28c34 <_realloc_r+0x148>
   28cc0:	00800304 	movi	r2,12
   28cc4:	a8800015 	stw	r2,0(r21)
   28cc8:	0025883a 	mov	r18,zero
   28ccc:	003fe606 	br	28c68 <_realloc_r+0x17c>
   28cd0:	1444b03a 	or	r2,r2,r17
   28cd4:	b0800115 	stw	r2,4(r22)
   28cd8:	b44b883a 	add	r5,r22,r17
   28cdc:	18800054 	ori	r2,r3,1
   28ce0:	28800115 	stw	r2,4(r5)
   28ce4:	28c7883a 	add	r3,r5,r3
   28ce8:	18800117 	ldw	r2,4(r3)
   28cec:	a809883a 	mov	r4,r21
   28cf0:	29400204 	addi	r5,r5,8
   28cf4:	10800054 	ori	r2,r2,1
   28cf8:	18800115 	stw	r2,4(r3)
   28cfc:	0021be00 	call	21be0 <_free_r>
   28d00:	003fd606 	br	28c5c <_realloc_r+0x170>
   28d04:	38c0330e 	bge	r7,r3,28dd4 <_realloc_r+0x2e8>
   28d08:	900b883a 	mov	r5,r18
   28d0c:	a809883a 	mov	r4,r21
   28d10:	00227d00 	call	227d0 <_malloc_r>
   28d14:	1025883a 	mov	r18,r2
   28d18:	10001626 	beq	r2,zero,28d74 <_realloc_r+0x288>
   28d1c:	80bfff17 	ldw	r2,-4(r16)
   28d20:	00ffff84 	movi	r3,-2
   28d24:	913ffe04 	addi	r4,r18,-8
   28d28:	10c6703a 	and	r3,r2,r3
   28d2c:	b0c7883a 	add	r3,r22,r3
   28d30:	20c09926 	beq	r4,r3,28f98 <_realloc_r+0x4ac>
   28d34:	99bfff04 	addi	r6,r19,-4
   28d38:	00800904 	movi	r2,36
   28d3c:	11806436 	bltu	r2,r6,28ed0 <_realloc_r+0x3e4>
   28d40:	00c004c4 	movi	r3,19
   28d44:	19804036 	bltu	r3,r6,28e48 <_realloc_r+0x35c>
   28d48:	9005883a 	mov	r2,r18
   28d4c:	8007883a 	mov	r3,r16
   28d50:	19000017 	ldw	r4,0(r3)
   28d54:	11000015 	stw	r4,0(r2)
   28d58:	19000117 	ldw	r4,4(r3)
   28d5c:	11000115 	stw	r4,4(r2)
   28d60:	18c00217 	ldw	r3,8(r3)
   28d64:	10c00215 	stw	r3,8(r2)
   28d68:	a809883a 	mov	r4,r21
   28d6c:	800b883a 	mov	r5,r16
   28d70:	0021be00 	call	21be0 <_free_r>
   28d74:	a809883a 	mov	r4,r21
   28d78:	002b9c40 	call	2b9c4 <__malloc_unlock>
   28d7c:	003fba06 	br	28c68 <_realloc_r+0x17c>
   28d80:	300b883a 	mov	r5,r6
   28d84:	dfc00a17 	ldw	ra,40(sp)
   28d88:	df000917 	ldw	fp,36(sp)
   28d8c:	ddc00817 	ldw	r23,32(sp)
   28d90:	dd800717 	ldw	r22,28(sp)
   28d94:	dd400617 	ldw	r21,24(sp)
   28d98:	dd000517 	ldw	r20,20(sp)
   28d9c:	dcc00417 	ldw	r19,16(sp)
   28da0:	dc800317 	ldw	r18,12(sp)
   28da4:	dc400217 	ldw	r17,8(sp)
   28da8:	dc000117 	ldw	r16,4(sp)
   28dac:	dec00b04 	addi	sp,sp,44
   28db0:	00227d01 	jmpi	227d0 <_malloc_r>
   28db4:	29800117 	ldw	r6,4(r5)
   28db8:	013fff04 	movi	r4,-4
   28dbc:	89c00404 	addi	r7,r17,16
   28dc0:	310c703a 	and	r6,r6,r4
   28dc4:	34c9883a 	add	r4,r6,r19
   28dc8:	21c0340e 	bge	r4,r7,28e9c <_realloc_r+0x3b0>
   28dcc:	2809883a 	mov	r4,r5
   28dd0:	003f7106 	br	28b98 <_realloc_r+0xac>
   28dd4:	b8800317 	ldw	r2,12(r23)
   28dd8:	b8c00217 	ldw	r3,8(r23)
   28ddc:	99bfff04 	addi	r6,r19,-4
   28de0:	01000904 	movi	r4,36
   28de4:	18800315 	stw	r2,12(r3)
   28de8:	10c00215 	stw	r3,8(r2)
   28dec:	bc800204 	addi	r18,r23,8
   28df0:	21807836 	bltu	r4,r6,28fd4 <_realloc_r+0x4e8>
   28df4:	008004c4 	movi	r2,19
   28df8:	1180732e 	bgeu	r2,r6,28fc8 <_realloc_r+0x4dc>
   28dfc:	80800017 	ldw	r2,0(r16)
   28e00:	b8800215 	stw	r2,8(r23)
   28e04:	80800117 	ldw	r2,4(r16)
   28e08:	b8800315 	stw	r2,12(r23)
   28e0c:	008006c4 	movi	r2,27
   28e10:	11808936 	bltu	r2,r6,29038 <_realloc_r+0x54c>
   28e14:	b8800404 	addi	r2,r23,16
   28e18:	80c00204 	addi	r3,r16,8
   28e1c:	19000017 	ldw	r4,0(r3)
   28e20:	9021883a 	mov	r16,r18
   28e24:	3829883a 	mov	r20,r7
   28e28:	11000015 	stw	r4,0(r2)
   28e2c:	19000117 	ldw	r4,4(r3)
   28e30:	b82d883a 	mov	r22,r23
   28e34:	11000115 	stw	r4,4(r2)
   28e38:	18c00217 	ldw	r3,8(r3)
   28e3c:	10c00215 	stw	r3,8(r2)
   28e40:	b8800117 	ldw	r2,4(r23)
   28e44:	003f7b06 	br	28c34 <_realloc_r+0x148>
   28e48:	80c00017 	ldw	r3,0(r16)
   28e4c:	90c00015 	stw	r3,0(r18)
   28e50:	80c00117 	ldw	r3,4(r16)
   28e54:	90c00115 	stw	r3,4(r18)
   28e58:	00c006c4 	movi	r3,27
   28e5c:	19804636 	bltu	r3,r6,28f78 <_realloc_r+0x48c>
   28e60:	90800204 	addi	r2,r18,8
   28e64:	80c00204 	addi	r3,r16,8
   28e68:	003fb906 	br	28d50 <_realloc_r+0x264>
   28e6c:	9005883a 	mov	r2,r18
   28e70:	8007883a 	mov	r3,r16
   28e74:	19000017 	ldw	r4,0(r3)
   28e78:	9021883a 	mov	r16,r18
   28e7c:	b82d883a 	mov	r22,r23
   28e80:	11000015 	stw	r4,0(r2)
   28e84:	19000117 	ldw	r4,4(r3)
   28e88:	11000115 	stw	r4,4(r2)
   28e8c:	18c00217 	ldw	r3,8(r3)
   28e90:	10c00215 	stw	r3,8(r2)
   28e94:	b8800117 	ldw	r2,4(r23)
   28e98:	003f6606 	br	28c34 <_realloc_r+0x148>
   28e9c:	2445c83a 	sub	r2,r4,r17
   28ea0:	b46d883a 	add	r22,r22,r17
   28ea4:	10800054 	ori	r2,r2,1
   28ea8:	b0800115 	stw	r2,4(r22)
   28eac:	80bfff17 	ldw	r2,-4(r16)
   28eb0:	a809883a 	mov	r4,r21
   28eb4:	e5800215 	stw	r22,8(fp)
   28eb8:	1080004c 	andi	r2,r2,1
   28ebc:	88a2b03a 	or	r17,r17,r2
   28ec0:	847fff15 	stw	r17,-4(r16)
   28ec4:	002b9c40 	call	2b9c4 <__malloc_unlock>
   28ec8:	8025883a 	mov	r18,r16
   28ecc:	003f6606 	br	28c68 <_realloc_r+0x17c>
   28ed0:	9009883a 	mov	r4,r18
   28ed4:	800b883a 	mov	r5,r16
   28ed8:	00278a40 	call	278a4 <memmove>
   28edc:	003fa206 	br	28d68 <_realloc_r+0x27c>
   28ee0:	88800404 	addi	r2,r17,16
   28ee4:	a0bf8716 	blt	r20,r2,28d04 <_realloc_r+0x218>
   28ee8:	b8800317 	ldw	r2,12(r23)
   28eec:	b8c00217 	ldw	r3,8(r23)
   28ef0:	99bfff04 	addi	r6,r19,-4
   28ef4:	01000904 	movi	r4,36
   28ef8:	18800315 	stw	r2,12(r3)
   28efc:	10c00215 	stw	r3,8(r2)
   28f00:	bc800204 	addi	r18,r23,8
   28f04:	21806536 	bltu	r4,r6,2909c <_realloc_r+0x5b0>
   28f08:	008004c4 	movi	r2,19
   28f0c:	1180592e 	bgeu	r2,r6,29074 <_realloc_r+0x588>
   28f10:	80800017 	ldw	r2,0(r16)
   28f14:	b8800215 	stw	r2,8(r23)
   28f18:	80800117 	ldw	r2,4(r16)
   28f1c:	b8800315 	stw	r2,12(r23)
   28f20:	008006c4 	movi	r2,27
   28f24:	11806136 	bltu	r2,r6,290ac <_realloc_r+0x5c0>
   28f28:	b8800404 	addi	r2,r23,16
   28f2c:	80c00204 	addi	r3,r16,8
   28f30:	19000017 	ldw	r4,0(r3)
   28f34:	11000015 	stw	r4,0(r2)
   28f38:	19000117 	ldw	r4,4(r3)
   28f3c:	11000115 	stw	r4,4(r2)
   28f40:	18c00217 	ldw	r3,8(r3)
   28f44:	10c00215 	stw	r3,8(r2)
   28f48:	a447c83a 	sub	r3,r20,r17
   28f4c:	bc45883a 	add	r2,r23,r17
   28f50:	18c00054 	ori	r3,r3,1
   28f54:	10c00115 	stw	r3,4(r2)
   28f58:	b8c00117 	ldw	r3,4(r23)
   28f5c:	e0800215 	stw	r2,8(fp)
   28f60:	a809883a 	mov	r4,r21
   28f64:	1880004c 	andi	r2,r3,1
   28f68:	88a2b03a 	or	r17,r17,r2
   28f6c:	bc400115 	stw	r17,4(r23)
   28f70:	002b9c40 	call	2b9c4 <__malloc_unlock>
   28f74:	003f3c06 	br	28c68 <_realloc_r+0x17c>
   28f78:	80c00217 	ldw	r3,8(r16)
   28f7c:	90c00215 	stw	r3,8(r18)
   28f80:	80c00317 	ldw	r3,12(r16)
   28f84:	90c00315 	stw	r3,12(r18)
   28f88:	30802426 	beq	r6,r2,2901c <_realloc_r+0x530>
   28f8c:	90800404 	addi	r2,r18,16
   28f90:	80c00404 	addi	r3,r16,16
   28f94:	003f6e06 	br	28d50 <_realloc_r+0x264>
   28f98:	953fff17 	ldw	r20,-4(r18)
   28f9c:	00ffff04 	movi	r3,-4
   28fa0:	a0e8703a 	and	r20,r20,r3
   28fa4:	a4e9883a 	add	r20,r20,r19
   28fa8:	003f2206 	br	28c34 <_realloc_r+0x148>
   28fac:	800b883a 	mov	r5,r16
   28fb0:	9009883a 	mov	r4,r18
   28fb4:	00278a40 	call	278a4 <memmove>
   28fb8:	9021883a 	mov	r16,r18
   28fbc:	b8800117 	ldw	r2,4(r23)
   28fc0:	b82d883a 	mov	r22,r23
   28fc4:	003f1b06 	br	28c34 <_realloc_r+0x148>
   28fc8:	9005883a 	mov	r2,r18
   28fcc:	8007883a 	mov	r3,r16
   28fd0:	003f9206 	br	28e1c <_realloc_r+0x330>
   28fd4:	800b883a 	mov	r5,r16
   28fd8:	9009883a 	mov	r4,r18
   28fdc:	d9c00015 	stw	r7,0(sp)
   28fe0:	00278a40 	call	278a4 <memmove>
   28fe4:	d9c00017 	ldw	r7,0(sp)
   28fe8:	9021883a 	mov	r16,r18
   28fec:	b8800117 	ldw	r2,4(r23)
   28ff0:	3829883a 	mov	r20,r7
   28ff4:	b82d883a 	mov	r22,r23
   28ff8:	003f0e06 	br	28c34 <_realloc_r+0x148>
   28ffc:	80800217 	ldw	r2,8(r16)
   29000:	b8800415 	stw	r2,16(r23)
   29004:	80800317 	ldw	r2,12(r16)
   29008:	b8800515 	stw	r2,20(r23)
   2900c:	31001226 	beq	r6,r4,29058 <_realloc_r+0x56c>
   29010:	b8800604 	addi	r2,r23,24
   29014:	80c00404 	addi	r3,r16,16
   29018:	003f9606 	br	28e74 <_realloc_r+0x388>
   2901c:	81000417 	ldw	r4,16(r16)
   29020:	90800604 	addi	r2,r18,24
   29024:	80c00604 	addi	r3,r16,24
   29028:	91000415 	stw	r4,16(r18)
   2902c:	81000517 	ldw	r4,20(r16)
   29030:	91000515 	stw	r4,20(r18)
   29034:	003f4606 	br	28d50 <_realloc_r+0x264>
   29038:	80800217 	ldw	r2,8(r16)
   2903c:	b8800415 	stw	r2,16(r23)
   29040:	80800317 	ldw	r2,12(r16)
   29044:	b8800515 	stw	r2,20(r23)
   29048:	31000d26 	beq	r6,r4,29080 <_realloc_r+0x594>
   2904c:	b8800604 	addi	r2,r23,24
   29050:	80c00404 	addi	r3,r16,16
   29054:	003f7106 	br	28e1c <_realloc_r+0x330>
   29058:	81000417 	ldw	r4,16(r16)
   2905c:	b8800804 	addi	r2,r23,32
   29060:	80c00604 	addi	r3,r16,24
   29064:	b9000615 	stw	r4,24(r23)
   29068:	81000517 	ldw	r4,20(r16)
   2906c:	b9000715 	stw	r4,28(r23)
   29070:	003f8006 	br	28e74 <_realloc_r+0x388>
   29074:	9005883a 	mov	r2,r18
   29078:	8007883a 	mov	r3,r16
   2907c:	003fac06 	br	28f30 <_realloc_r+0x444>
   29080:	81000417 	ldw	r4,16(r16)
   29084:	b8800804 	addi	r2,r23,32
   29088:	80c00604 	addi	r3,r16,24
   2908c:	b9000615 	stw	r4,24(r23)
   29090:	81000517 	ldw	r4,20(r16)
   29094:	b9000715 	stw	r4,28(r23)
   29098:	003f6006 	br	28e1c <_realloc_r+0x330>
   2909c:	9009883a 	mov	r4,r18
   290a0:	800b883a 	mov	r5,r16
   290a4:	00278a40 	call	278a4 <memmove>
   290a8:	003fa706 	br	28f48 <_realloc_r+0x45c>
   290ac:	80800217 	ldw	r2,8(r16)
   290b0:	b8800415 	stw	r2,16(r23)
   290b4:	80800317 	ldw	r2,12(r16)
   290b8:	b8800515 	stw	r2,20(r23)
   290bc:	31000326 	beq	r6,r4,290cc <_realloc_r+0x5e0>
   290c0:	b8800604 	addi	r2,r23,24
   290c4:	80c00404 	addi	r3,r16,16
   290c8:	003f9906 	br	28f30 <_realloc_r+0x444>
   290cc:	81000417 	ldw	r4,16(r16)
   290d0:	b8800804 	addi	r2,r23,32
   290d4:	80c00604 	addi	r3,r16,24
   290d8:	b9000615 	stw	r4,24(r23)
   290dc:	81000517 	ldw	r4,20(r16)
   290e0:	b9000715 	stw	r4,28(r23)
   290e4:	003f9206 	br	28f30 <_realloc_r+0x444>

000290e8 <__isinfd>:
   290e8:	0105c83a 	sub	r2,zero,r4
   290ec:	1108b03a 	or	r4,r2,r4
   290f0:	2004d7fa 	srli	r2,r4,31
   290f4:	00e00034 	movhi	r3,32768
   290f8:	18ffffc4 	addi	r3,r3,-1
   290fc:	28ca703a 	and	r5,r5,r3
   29100:	1144b03a 	or	r2,r2,r5
   29104:	00dffc34 	movhi	r3,32752
   29108:	1885c83a 	sub	r2,r3,r2
   2910c:	0087c83a 	sub	r3,zero,r2
   29110:	1884b03a 	or	r2,r3,r2
   29114:	1005d7fa 	srai	r2,r2,31
   29118:	10800044 	addi	r2,r2,1
   2911c:	f800283a 	ret

00029120 <__isnand>:
   29120:	0105c83a 	sub	r2,zero,r4
   29124:	1108b03a 	or	r4,r2,r4
   29128:	2004d7fa 	srli	r2,r4,31
   2912c:	00e00034 	movhi	r3,32768
   29130:	18ffffc4 	addi	r3,r3,-1
   29134:	28ca703a 	and	r5,r5,r3
   29138:	1144b03a 	or	r2,r2,r5
   2913c:	00dffc34 	movhi	r3,32752
   29140:	1885c83a 	sub	r2,r3,r2
   29144:	1004d7fa 	srli	r2,r2,31
   29148:	f800283a 	ret

0002914c <strcmp>:
   2914c:	2904b03a 	or	r2,r5,r4
   29150:	108000cc 	andi	r2,r2,3
   29154:	1000171e 	bne	r2,zero,291b4 <strcmp+0x68>
   29158:	20800017 	ldw	r2,0(r4)
   2915c:	28c00017 	ldw	r3,0(r5)
   29160:	10c0141e 	bne	r2,r3,291b4 <strcmp+0x68>
   29164:	027fbff4 	movhi	r9,65279
   29168:	4a7fbfc4 	addi	r9,r9,-257
   2916c:	1247883a 	add	r3,r2,r9
   29170:	0084303a 	nor	r2,zero,r2
   29174:	1884703a 	and	r2,r3,r2
   29178:	02202074 	movhi	r8,32897
   2917c:	42202004 	addi	r8,r8,-32640
   29180:	1204703a 	and	r2,r2,r8
   29184:	10000226 	beq	r2,zero,29190 <strcmp+0x44>
   29188:	00001706 	br	291e8 <strcmp+0x9c>
   2918c:	3000161e 	bne	r6,zero,291e8 <strcmp+0x9c>
   29190:	21000104 	addi	r4,r4,4
   29194:	20800017 	ldw	r2,0(r4)
   29198:	29400104 	addi	r5,r5,4
   2919c:	28c00017 	ldw	r3,0(r5)
   291a0:	124f883a 	add	r7,r2,r9
   291a4:	008c303a 	nor	r6,zero,r2
   291a8:	398c703a 	and	r6,r7,r6
   291ac:	320c703a 	and	r6,r6,r8
   291b0:	10fff626 	beq	r2,r3,2918c <strcmp+0x40>
   291b4:	20800007 	ldb	r2,0(r4)
   291b8:	1000051e 	bne	r2,zero,291d0 <strcmp+0x84>
   291bc:	00000606 	br	291d8 <strcmp+0x8c>
   291c0:	21000044 	addi	r4,r4,1
   291c4:	20800007 	ldb	r2,0(r4)
   291c8:	29400044 	addi	r5,r5,1
   291cc:	10000226 	beq	r2,zero,291d8 <strcmp+0x8c>
   291d0:	28c00007 	ldb	r3,0(r5)
   291d4:	10fffa26 	beq	r2,r3,291c0 <strcmp+0x74>
   291d8:	20c00003 	ldbu	r3,0(r4)
   291dc:	28800003 	ldbu	r2,0(r5)
   291e0:	1885c83a 	sub	r2,r3,r2
   291e4:	f800283a 	ret
   291e8:	0005883a 	mov	r2,zero
   291ec:	f800283a 	ret

000291f0 <_calloc_r>:
   291f0:	defffe04 	addi	sp,sp,-8
   291f4:	dc000015 	stw	r16,0(sp)
   291f8:	2021883a 	mov	r16,r4
   291fc:	3009883a 	mov	r4,r6
   29200:	dfc00115 	stw	ra,4(sp)
   29204:	00210140 	call	21014 <__mulsi3>
   29208:	8009883a 	mov	r4,r16
   2920c:	100b883a 	mov	r5,r2
   29210:	00227d00 	call	227d0 <_malloc_r>
   29214:	1021883a 	mov	r16,r2
   29218:	10000c26 	beq	r2,zero,2924c <_calloc_r+0x5c>
   2921c:	11bfff17 	ldw	r6,-4(r2)
   29220:	00ffff04 	movi	r3,-4
   29224:	00800904 	movi	r2,36
   29228:	30cc703a 	and	r6,r6,r3
   2922c:	30cd883a 	add	r6,r6,r3
   29230:	11801436 	bltu	r2,r6,29284 <_calloc_r+0x94>
   29234:	00c004c4 	movi	r3,19
   29238:	19800936 	bltu	r3,r6,29260 <_calloc_r+0x70>
   2923c:	8005883a 	mov	r2,r16
   29240:	10000015 	stw	zero,0(r2)
   29244:	10000115 	stw	zero,4(r2)
   29248:	10000215 	stw	zero,8(r2)
   2924c:	8005883a 	mov	r2,r16
   29250:	dfc00117 	ldw	ra,4(sp)
   29254:	dc000017 	ldw	r16,0(sp)
   29258:	dec00204 	addi	sp,sp,8
   2925c:	f800283a 	ret
   29260:	80000015 	stw	zero,0(r16)
   29264:	80000115 	stw	zero,4(r16)
   29268:	00c006c4 	movi	r3,27
   2926c:	19800d2e 	bgeu	r3,r6,292a4 <_calloc_r+0xb4>
   29270:	80000215 	stw	zero,8(r16)
   29274:	80000315 	stw	zero,12(r16)
   29278:	30800c26 	beq	r6,r2,292ac <_calloc_r+0xbc>
   2927c:	80800404 	addi	r2,r16,16
   29280:	003fef06 	br	29240 <_calloc_r+0x50>
   29284:	8009883a 	mov	r4,r16
   29288:	000b883a 	mov	r5,zero
   2928c:	00230940 	call	23094 <memset>
   29290:	8005883a 	mov	r2,r16
   29294:	dfc00117 	ldw	ra,4(sp)
   29298:	dc000017 	ldw	r16,0(sp)
   2929c:	dec00204 	addi	sp,sp,8
   292a0:	f800283a 	ret
   292a4:	80800204 	addi	r2,r16,8
   292a8:	003fe506 	br	29240 <_calloc_r+0x50>
   292ac:	80000415 	stw	zero,16(r16)
   292b0:	80000515 	stw	zero,20(r16)
   292b4:	80800604 	addi	r2,r16,24
   292b8:	003fe106 	br	29240 <_calloc_r+0x50>

000292bc <__udivdi3>:
   292bc:	defff504 	addi	sp,sp,-44
   292c0:	dd000515 	stw	r20,20(sp)
   292c4:	dcc00415 	stw	r19,16(sp)
   292c8:	dc800315 	stw	r18,12(sp)
   292cc:	dc400215 	stw	r17,8(sp)
   292d0:	dc000115 	stw	r16,4(sp)
   292d4:	dfc00a15 	stw	ra,40(sp)
   292d8:	df000915 	stw	fp,36(sp)
   292dc:	ddc00815 	stw	r23,32(sp)
   292e0:	dd800715 	stw	r22,28(sp)
   292e4:	dd400615 	stw	r21,24(sp)
   292e8:	2025883a 	mov	r18,r4
   292ec:	2823883a 	mov	r17,r5
   292f0:	3021883a 	mov	r16,r6
   292f4:	2027883a 	mov	r19,r4
   292f8:	2829883a 	mov	r20,r5
   292fc:	3800451e 	bne	r7,zero,29414 <__udivdi3+0x158>
   29300:	2980652e 	bgeu	r5,r6,29498 <__udivdi3+0x1dc>
   29304:	00bfffd4 	movui	r2,65535
   29308:	1180b436 	bltu	r2,r6,295dc <__udivdi3+0x320>
   2930c:	00803fc4 	movi	r2,255
   29310:	11816636 	bltu	r2,r6,298ac <__udivdi3+0x5f0>
   29314:	0005883a 	mov	r2,zero
   29318:	0007883a 	mov	r3,zero
   2931c:	3084d83a 	srl	r2,r6,r2
   29320:	010000f4 	movhi	r4,3
   29324:	213a7204 	addi	r4,r4,-5688
   29328:	2085883a 	add	r2,r4,r2
   2932c:	10800003 	ldbu	r2,0(r2)
   29330:	10c7883a 	add	r3,r2,r3
   29334:	00800804 	movi	r2,32
   29338:	10c5c83a 	sub	r2,r2,r3
   2933c:	10000526 	beq	r2,zero,29354 <__udivdi3+0x98>
   29340:	88a2983a 	sll	r17,r17,r2
   29344:	90c6d83a 	srl	r3,r18,r3
   29348:	30a0983a 	sll	r16,r6,r2
   2934c:	90a6983a 	sll	r19,r18,r2
   29350:	88e8b03a 	or	r20,r17,r3
   29354:	8022d43a 	srli	r17,r16,16
   29358:	a009883a 	mov	r4,r20
   2935c:	857fffcc 	andi	r21,r16,65535
   29360:	880b883a 	mov	r5,r17
   29364:	002ad9c0 	call	2ad9c <__umodsi3>
   29368:	a009883a 	mov	r4,r20
   2936c:	880b883a 	mov	r5,r17
   29370:	102d883a 	mov	r22,r2
   29374:	002ad940 	call	2ad94 <__udivsi3>
   29378:	1009883a 	mov	r4,r2
   2937c:	a80b883a 	mov	r5,r21
   29380:	1025883a 	mov	r18,r2
   29384:	00210140 	call	21014 <__mulsi3>
   29388:	1009883a 	mov	r4,r2
   2938c:	b006943a 	slli	r3,r22,16
   29390:	9804d43a 	srli	r2,r19,16
   29394:	1886b03a 	or	r3,r3,r2
   29398:	1900052e 	bgeu	r3,r4,293b0 <__udivdi3+0xf4>
   2939c:	1c07883a 	add	r3,r3,r16
   293a0:	90bfffc4 	addi	r2,r18,-1
   293a4:	1c000136 	bltu	r3,r16,293ac <__udivdi3+0xf0>
   293a8:	19015536 	bltu	r3,r4,29900 <__udivdi3+0x644>
   293ac:	1025883a 	mov	r18,r2
   293b0:	1929c83a 	sub	r20,r3,r4
   293b4:	880b883a 	mov	r5,r17
   293b8:	a009883a 	mov	r4,r20
   293bc:	002ad9c0 	call	2ad9c <__umodsi3>
   293c0:	102d883a 	mov	r22,r2
   293c4:	880b883a 	mov	r5,r17
   293c8:	a009883a 	mov	r4,r20
   293cc:	b02c943a 	slli	r22,r22,16
   293d0:	002ad940 	call	2ad94 <__udivsi3>
   293d4:	1009883a 	mov	r4,r2
   293d8:	a80b883a 	mov	r5,r21
   293dc:	9cffffcc 	andi	r19,r19,65535
   293e0:	1023883a 	mov	r17,r2
   293e4:	b4e6b03a 	or	r19,r22,r19
   293e8:	00210140 	call	21014 <__mulsi3>
   293ec:	9880052e 	bgeu	r19,r2,29404 <__udivdi3+0x148>
   293f0:	9c27883a 	add	r19,r19,r16
   293f4:	88ffffc4 	addi	r3,r17,-1
   293f8:	9c011436 	bltu	r19,r16,2984c <__udivdi3+0x590>
   293fc:	9881132e 	bgeu	r19,r2,2984c <__udivdi3+0x590>
   29400:	8c7fff84 	addi	r17,r17,-2
   29404:	9004943a 	slli	r2,r18,16
   29408:	0007883a 	mov	r3,zero
   2940c:	8884b03a 	or	r2,r17,r2
   29410:	00001506 	br	29468 <__udivdi3+0x1ac>
   29414:	29c06a36 	bltu	r5,r7,295c0 <__udivdi3+0x304>
   29418:	00bfffd4 	movui	r2,65535
   2941c:	11c06a2e 	bgeu	r2,r7,295c8 <__udivdi3+0x30c>
   29420:	00804034 	movhi	r2,256
   29424:	10bfffc4 	addi	r2,r2,-1
   29428:	11c11436 	bltu	r2,r7,2987c <__udivdi3+0x5c0>
   2942c:	00c00404 	movi	r3,16
   29430:	180b883a 	mov	r5,r3
   29434:	38c6d83a 	srl	r3,r7,r3
   29438:	010000f4 	movhi	r4,3
   2943c:	213a7204 	addi	r4,r4,-5688
   29440:	04000804 	movi	r16,32
   29444:	20c7883a 	add	r3,r4,r3
   29448:	18800003 	ldbu	r2,0(r3)
   2944c:	1145883a 	add	r2,r2,r5
   29450:	80a1c83a 	sub	r16,r16,r2
   29454:	80006e1e 	bne	r16,zero,29610 <__udivdi3+0x354>
   29458:	0007883a 	mov	r3,zero
   2945c:	3c406a36 	bltu	r7,r17,29608 <__udivdi3+0x34c>
   29460:	9180692e 	bgeu	r18,r6,29608 <__udivdi3+0x34c>
   29464:	0005883a 	mov	r2,zero
   29468:	dfc00a17 	ldw	ra,40(sp)
   2946c:	df000917 	ldw	fp,36(sp)
   29470:	ddc00817 	ldw	r23,32(sp)
   29474:	dd800717 	ldw	r22,28(sp)
   29478:	dd400617 	ldw	r21,24(sp)
   2947c:	dd000517 	ldw	r20,20(sp)
   29480:	dcc00417 	ldw	r19,16(sp)
   29484:	dc800317 	ldw	r18,12(sp)
   29488:	dc400217 	ldw	r17,8(sp)
   2948c:	dc000117 	ldw	r16,4(sp)
   29490:	dec00b04 	addi	sp,sp,44
   29494:	f800283a 	ret
   29498:	3000041e 	bne	r6,zero,294ac <__udivdi3+0x1f0>
   2949c:	01000044 	movi	r4,1
   294a0:	000b883a 	mov	r5,zero
   294a4:	002ad940 	call	2ad94 <__udivsi3>
   294a8:	1021883a 	mov	r16,r2
   294ac:	00bfffd4 	movui	r2,65535
   294b0:	1400502e 	bgeu	r2,r16,295f4 <__udivdi3+0x338>
   294b4:	00804034 	movhi	r2,256
   294b8:	10bfffc4 	addi	r2,r2,-1
   294bc:	1400f536 	bltu	r2,r16,29894 <__udivdi3+0x5d8>
   294c0:	00800404 	movi	r2,16
   294c4:	1007883a 	mov	r3,r2
   294c8:	8084d83a 	srl	r2,r16,r2
   294cc:	010000f4 	movhi	r4,3
   294d0:	213a7204 	addi	r4,r4,-5688
   294d4:	2085883a 	add	r2,r4,r2
   294d8:	10800003 	ldbu	r2,0(r2)
   294dc:	10c7883a 	add	r3,r2,r3
   294e0:	00800804 	movi	r2,32
   294e4:	10c5c83a 	sub	r2,r2,r3
   294e8:	1000a01e 	bne	r2,zero,2976c <__udivdi3+0x4b0>
   294ec:	8028d43a 	srli	r20,r16,16
   294f0:	8c23c83a 	sub	r17,r17,r16
   294f4:	857fffcc 	andi	r21,r16,65535
   294f8:	00c00044 	movi	r3,1
   294fc:	8809883a 	mov	r4,r17
   29500:	a00b883a 	mov	r5,r20
   29504:	d8c00015 	stw	r3,0(sp)
   29508:	002ad9c0 	call	2ad9c <__umodsi3>
   2950c:	8809883a 	mov	r4,r17
   29510:	a00b883a 	mov	r5,r20
   29514:	102d883a 	mov	r22,r2
   29518:	002ad940 	call	2ad94 <__udivsi3>
   2951c:	1009883a 	mov	r4,r2
   29520:	a80b883a 	mov	r5,r21
   29524:	1025883a 	mov	r18,r2
   29528:	00210140 	call	21014 <__mulsi3>
   2952c:	1009883a 	mov	r4,r2
   29530:	b00c943a 	slli	r6,r22,16
   29534:	9804d43a 	srli	r2,r19,16
   29538:	d8c00017 	ldw	r3,0(sp)
   2953c:	308cb03a 	or	r6,r6,r2
   29540:	3100052e 	bgeu	r6,r4,29558 <__udivdi3+0x29c>
   29544:	340d883a 	add	r6,r6,r16
   29548:	90bfffc4 	addi	r2,r18,-1
   2954c:	34000136 	bltu	r6,r16,29554 <__udivdi3+0x298>
   29550:	3100e836 	bltu	r6,r4,298f4 <__udivdi3+0x638>
   29554:	1025883a 	mov	r18,r2
   29558:	3123c83a 	sub	r17,r6,r4
   2955c:	8809883a 	mov	r4,r17
   29560:	a00b883a 	mov	r5,r20
   29564:	d8c00015 	stw	r3,0(sp)
   29568:	002ad9c0 	call	2ad9c <__umodsi3>
   2956c:	102d883a 	mov	r22,r2
   29570:	8809883a 	mov	r4,r17
   29574:	a00b883a 	mov	r5,r20
   29578:	b02c943a 	slli	r22,r22,16
   2957c:	002ad940 	call	2ad94 <__udivsi3>
   29580:	1009883a 	mov	r4,r2
   29584:	a80b883a 	mov	r5,r21
   29588:	9cffffcc 	andi	r19,r19,65535
   2958c:	1023883a 	mov	r17,r2
   29590:	b4e6b03a 	or	r19,r22,r19
   29594:	00210140 	call	21014 <__mulsi3>
   29598:	d8c00017 	ldw	r3,0(sp)
   2959c:	9880052e 	bgeu	r19,r2,295b4 <__udivdi3+0x2f8>
   295a0:	9c27883a 	add	r19,r19,r16
   295a4:	893fffc4 	addi	r4,r17,-1
   295a8:	9c00aa36 	bltu	r19,r16,29854 <__udivdi3+0x598>
   295ac:	9880a92e 	bgeu	r19,r2,29854 <__udivdi3+0x598>
   295b0:	8c7fff84 	addi	r17,r17,-2
   295b4:	9004943a 	slli	r2,r18,16
   295b8:	8884b03a 	or	r2,r17,r2
   295bc:	003faa06 	br	29468 <__udivdi3+0x1ac>
   295c0:	0007883a 	mov	r3,zero
   295c4:	003fa706 	br	29464 <__udivdi3+0x1a8>
   295c8:	00803fc4 	movi	r2,255
   295cc:	11c0ae36 	bltu	r2,r7,29888 <__udivdi3+0x5cc>
   295d0:	0007883a 	mov	r3,zero
   295d4:	000b883a 	mov	r5,zero
   295d8:	003f9606 	br	29434 <__udivdi3+0x178>
   295dc:	00804034 	movhi	r2,256
   295e0:	10bfffc4 	addi	r2,r2,-1
   295e4:	1180ae36 	bltu	r2,r6,298a0 <__udivdi3+0x5e4>
   295e8:	00800404 	movi	r2,16
   295ec:	1007883a 	mov	r3,r2
   295f0:	003f4a06 	br	2931c <__udivdi3+0x60>
   295f4:	00803fc4 	movi	r2,255
   295f8:	1400af36 	bltu	r2,r16,298b8 <__udivdi3+0x5fc>
   295fc:	0005883a 	mov	r2,zero
   29600:	0007883a 	mov	r3,zero
   29604:	003fb006 	br	294c8 <__udivdi3+0x20c>
   29608:	00800044 	movi	r2,1
   2960c:	003f9606 	br	29468 <__udivdi3+0x1ac>
   29610:	3c0e983a 	sll	r7,r7,r16
   29614:	3086d83a 	srl	r3,r6,r2
   29618:	88aed83a 	srl	r23,r17,r2
   2961c:	9084d83a 	srl	r2,r18,r2
   29620:	38e6b03a 	or	r19,r7,r3
   29624:	9828d43a 	srli	r20,r19,16
   29628:	8c22983a 	sll	r17,r17,r16
   2962c:	b809883a 	mov	r4,r23
   29630:	a00b883a 	mov	r5,r20
   29634:	342a983a 	sll	r21,r6,r16
   29638:	88a2b03a 	or	r17,r17,r2
   2963c:	002ad9c0 	call	2ad9c <__umodsi3>
   29640:	b809883a 	mov	r4,r23
   29644:	a00b883a 	mov	r5,r20
   29648:	1039883a 	mov	fp,r2
   2964c:	9dbfffcc 	andi	r22,r19,65535
   29650:	002ad940 	call	2ad94 <__udivsi3>
   29654:	1009883a 	mov	r4,r2
   29658:	b00b883a 	mov	r5,r22
   2965c:	102f883a 	mov	r23,r2
   29660:	00210140 	call	21014 <__mulsi3>
   29664:	1009883a 	mov	r4,r2
   29668:	e00e943a 	slli	r7,fp,16
   2966c:	8804d43a 	srli	r2,r17,16
   29670:	388eb03a 	or	r7,r7,r2
   29674:	3900042e 	bgeu	r7,r4,29688 <__udivdi3+0x3cc>
   29678:	3ccf883a 	add	r7,r7,r19
   2967c:	b8bfffc4 	addi	r2,r23,-1
   29680:	3cc0942e 	bgeu	r7,r19,298d4 <__udivdi3+0x618>
   29684:	102f883a 	mov	r23,r2
   29688:	3939c83a 	sub	fp,r7,r4
   2968c:	a00b883a 	mov	r5,r20
   29690:	e009883a 	mov	r4,fp
   29694:	002ad9c0 	call	2ad9c <__umodsi3>
   29698:	a00b883a 	mov	r5,r20
   2969c:	e009883a 	mov	r4,fp
   296a0:	d8800015 	stw	r2,0(sp)
   296a4:	002ad940 	call	2ad94 <__udivsi3>
   296a8:	1009883a 	mov	r4,r2
   296ac:	b00b883a 	mov	r5,r22
   296b0:	1029883a 	mov	r20,r2
   296b4:	00210140 	call	21014 <__mulsi3>
   296b8:	d8c00017 	ldw	r3,0(sp)
   296bc:	8c7fffcc 	andi	r17,r17,65535
   296c0:	1806943a 	slli	r3,r3,16
   296c4:	1c46b03a 	or	r3,r3,r17
   296c8:	1880042e 	bgeu	r3,r2,296dc <__udivdi3+0x420>
   296cc:	1cc7883a 	add	r3,r3,r19
   296d0:	a13fffc4 	addi	r4,r20,-1
   296d4:	1cc07b2e 	bgeu	r3,r19,298c4 <__udivdi3+0x608>
   296d8:	2029883a 	mov	r20,r4
   296dc:	b82e943a 	slli	r23,r23,16
   296e0:	a822d43a 	srli	r17,r21,16
   296e4:	ad7fffcc 	andi	r21,r21,65535
   296e8:	a5e8b03a 	or	r20,r20,r23
   296ec:	a5bfffcc 	andi	r22,r20,65535
   296f0:	b009883a 	mov	r4,r22
   296f4:	a80b883a 	mov	r5,r21
   296f8:	18afc83a 	sub	r23,r3,r2
   296fc:	a026d43a 	srli	r19,r20,16
   29700:	00210140 	call	21014 <__mulsi3>
   29704:	b009883a 	mov	r4,r22
   29708:	880b883a 	mov	r5,r17
   2970c:	1039883a 	mov	fp,r2
   29710:	00210140 	call	21014 <__mulsi3>
   29714:	a80b883a 	mov	r5,r21
   29718:	9809883a 	mov	r4,r19
   2971c:	102d883a 	mov	r22,r2
   29720:	00210140 	call	21014 <__mulsi3>
   29724:	9809883a 	mov	r4,r19
   29728:	880b883a 	mov	r5,r17
   2972c:	102b883a 	mov	r21,r2
   29730:	00210140 	call	21014 <__mulsi3>
   29734:	100b883a 	mov	r5,r2
   29738:	e004d43a 	srli	r2,fp,16
   2973c:	ad89883a 	add	r4,r21,r22
   29740:	2089883a 	add	r4,r4,r2
   29744:	2540022e 	bgeu	r4,r21,29750 <__udivdi3+0x494>
   29748:	00800074 	movhi	r2,1
   2974c:	288b883a 	add	r5,r5,r2
   29750:	2004d43a 	srli	r2,r4,16
   29754:	288b883a 	add	r5,r5,r2
   29758:	b9404536 	bltu	r23,r5,29870 <__udivdi3+0x5b4>
   2975c:	b9403f26 	beq	r23,r5,2985c <__udivdi3+0x5a0>
   29760:	a005883a 	mov	r2,r20
   29764:	0007883a 	mov	r3,zero
   29768:	003f3f06 	br	29468 <__udivdi3+0x1ac>
   2976c:	80a0983a 	sll	r16,r16,r2
   29770:	88eed83a 	srl	r23,r17,r3
   29774:	90c6d83a 	srl	r3,r18,r3
   29778:	8028d43a 	srli	r20,r16,16
   2977c:	88a2983a 	sll	r17,r17,r2
   29780:	b809883a 	mov	r4,r23
   29784:	a00b883a 	mov	r5,r20
   29788:	88ecb03a 	or	r22,r17,r3
   2978c:	90a6983a 	sll	r19,r18,r2
   29790:	002ad9c0 	call	2ad9c <__umodsi3>
   29794:	b809883a 	mov	r4,r23
   29798:	a00b883a 	mov	r5,r20
   2979c:	1023883a 	mov	r17,r2
   297a0:	857fffcc 	andi	r21,r16,65535
   297a4:	002ad940 	call	2ad94 <__udivsi3>
   297a8:	1009883a 	mov	r4,r2
   297ac:	a80b883a 	mov	r5,r21
   297b0:	102f883a 	mov	r23,r2
   297b4:	00210140 	call	21014 <__mulsi3>
   297b8:	1009883a 	mov	r4,r2
   297bc:	880a943a 	slli	r5,r17,16
   297c0:	b004d43a 	srli	r2,r22,16
   297c4:	288ab03a 	or	r5,r5,r2
   297c8:	2900062e 	bgeu	r5,r4,297e4 <__udivdi3+0x528>
   297cc:	2c0b883a 	add	r5,r5,r16
   297d0:	b8bfffc4 	addi	r2,r23,-1
   297d4:	2c004536 	bltu	r5,r16,298ec <__udivdi3+0x630>
   297d8:	2900442e 	bgeu	r5,r4,298ec <__udivdi3+0x630>
   297dc:	bdffff84 	addi	r23,r23,-2
   297e0:	2c0b883a 	add	r5,r5,r16
   297e4:	2925c83a 	sub	r18,r5,r4
   297e8:	9009883a 	mov	r4,r18
   297ec:	a00b883a 	mov	r5,r20
   297f0:	002ad9c0 	call	2ad9c <__umodsi3>
   297f4:	1023883a 	mov	r17,r2
   297f8:	9009883a 	mov	r4,r18
   297fc:	a00b883a 	mov	r5,r20
   29800:	8822943a 	slli	r17,r17,16
   29804:	002ad940 	call	2ad94 <__udivsi3>
   29808:	1009883a 	mov	r4,r2
   2980c:	a80b883a 	mov	r5,r21
   29810:	b5bfffcc 	andi	r22,r22,65535
   29814:	1025883a 	mov	r18,r2
   29818:	8da2b03a 	or	r17,r17,r22
   2981c:	00210140 	call	21014 <__mulsi3>
   29820:	8880062e 	bgeu	r17,r2,2983c <__udivdi3+0x580>
   29824:	8c23883a 	add	r17,r17,r16
   29828:	90ffffc4 	addi	r3,r18,-1
   2982c:	8c002d36 	bltu	r17,r16,298e4 <__udivdi3+0x628>
   29830:	88802c2e 	bgeu	r17,r2,298e4 <__udivdi3+0x628>
   29834:	94bfff84 	addi	r18,r18,-2
   29838:	8c23883a 	add	r17,r17,r16
   2983c:	b806943a 	slli	r3,r23,16
   29840:	88a3c83a 	sub	r17,r17,r2
   29844:	90c6b03a 	or	r3,r18,r3
   29848:	003f2c06 	br	294fc <__udivdi3+0x240>
   2984c:	1823883a 	mov	r17,r3
   29850:	003eec06 	br	29404 <__udivdi3+0x148>
   29854:	2023883a 	mov	r17,r4
   29858:	003f5606 	br	295b4 <__udivdi3+0x2f8>
   2985c:	2008943a 	slli	r4,r4,16
   29860:	9420983a 	sll	r16,r18,r16
   29864:	e73fffcc 	andi	fp,fp,65535
   29868:	2709883a 	add	r4,r4,fp
   2986c:	813fbc2e 	bgeu	r16,r4,29760 <__udivdi3+0x4a4>
   29870:	a0bfffc4 	addi	r2,r20,-1
   29874:	0007883a 	mov	r3,zero
   29878:	003efb06 	br	29468 <__udivdi3+0x1ac>
   2987c:	00c00604 	movi	r3,24
   29880:	180b883a 	mov	r5,r3
   29884:	003eeb06 	br	29434 <__udivdi3+0x178>
   29888:	00c00204 	movi	r3,8
   2988c:	180b883a 	mov	r5,r3
   29890:	003ee806 	br	29434 <__udivdi3+0x178>
   29894:	00800604 	movi	r2,24
   29898:	1007883a 	mov	r3,r2
   2989c:	003f0a06 	br	294c8 <__udivdi3+0x20c>
   298a0:	00800604 	movi	r2,24
   298a4:	1007883a 	mov	r3,r2
   298a8:	003e9c06 	br	2931c <__udivdi3+0x60>
   298ac:	00800204 	movi	r2,8
   298b0:	1007883a 	mov	r3,r2
   298b4:	003e9906 	br	2931c <__udivdi3+0x60>
   298b8:	00800204 	movi	r2,8
   298bc:	1007883a 	mov	r3,r2
   298c0:	003f0106 	br	294c8 <__udivdi3+0x20c>
   298c4:	18bf842e 	bgeu	r3,r2,296d8 <__udivdi3+0x41c>
   298c8:	a53fff84 	addi	r20,r20,-2
   298cc:	1cc7883a 	add	r3,r3,r19
   298d0:	003f8206 	br	296dc <__udivdi3+0x420>
   298d4:	393f6b2e 	bgeu	r7,r4,29684 <__udivdi3+0x3c8>
   298d8:	bdffff84 	addi	r23,r23,-2
   298dc:	3ccf883a 	add	r7,r7,r19
   298e0:	003f6906 	br	29688 <__udivdi3+0x3cc>
   298e4:	1825883a 	mov	r18,r3
   298e8:	003fd406 	br	2983c <__udivdi3+0x580>
   298ec:	102f883a 	mov	r23,r2
   298f0:	003fbc06 	br	297e4 <__udivdi3+0x528>
   298f4:	94bfff84 	addi	r18,r18,-2
   298f8:	340d883a 	add	r6,r6,r16
   298fc:	003f1606 	br	29558 <__udivdi3+0x29c>
   29900:	94bfff84 	addi	r18,r18,-2
   29904:	1c07883a 	add	r3,r3,r16
   29908:	003ea906 	br	293b0 <__udivdi3+0xf4>

0002990c <__umoddi3>:
   2990c:	defff304 	addi	sp,sp,-52
   29910:	dd000715 	stw	r20,28(sp)
   29914:	dcc00615 	stw	r19,24(sp)
   29918:	dc800515 	stw	r18,20(sp)
   2991c:	dc400415 	stw	r17,16(sp)
   29920:	dc000315 	stw	r16,12(sp)
   29924:	dfc00c15 	stw	ra,48(sp)
   29928:	df000b15 	stw	fp,44(sp)
   2992c:	ddc00a15 	stw	r23,40(sp)
   29930:	dd800915 	stw	r22,36(sp)
   29934:	dd400815 	stw	r21,32(sp)
   29938:	2025883a 	mov	r18,r4
   2993c:	2823883a 	mov	r17,r5
   29940:	3021883a 	mov	r16,r6
   29944:	2027883a 	mov	r19,r4
   29948:	2829883a 	mov	r20,r5
   2994c:	38003a1e 	bne	r7,zero,29a38 <__umoddi3+0x12c>
   29950:	2980522e 	bgeu	r5,r6,29a9c <__umoddi3+0x190>
   29954:	00bfffd4 	movui	r2,65535
   29958:	1180a436 	bltu	r2,r6,29bec <__umoddi3+0x2e0>
   2995c:	00803fc4 	movi	r2,255
   29960:	11816036 	bltu	r2,r6,29ee4 <__umoddi3+0x5d8>
   29964:	0005883a 	mov	r2,zero
   29968:	0009883a 	mov	r4,zero
   2996c:	3084d83a 	srl	r2,r6,r2
   29970:	00c000f4 	movhi	r3,3
   29974:	18fa7204 	addi	r3,r3,-5688
   29978:	05400804 	movi	r21,32
   2997c:	1885883a 	add	r2,r3,r2
   29980:	10800003 	ldbu	r2,0(r2)
   29984:	1109883a 	add	r4,r2,r4
   29988:	a92bc83a 	sub	r21,r21,r4
   2998c:	a8010e26 	beq	r21,zero,29dc8 <__umoddi3+0x4bc>
   29990:	8d62983a 	sll	r17,r17,r21
   29994:	9108d83a 	srl	r4,r18,r4
   29998:	3560983a 	sll	r16,r6,r21
   2999c:	9566983a 	sll	r19,r18,r21
   299a0:	8928b03a 	or	r20,r17,r4
   299a4:	8022d43a 	srli	r17,r16,16
   299a8:	a009883a 	mov	r4,r20
   299ac:	84bfffcc 	andi	r18,r16,65535
   299b0:	880b883a 	mov	r5,r17
   299b4:	002ad9c0 	call	2ad9c <__umodsi3>
   299b8:	a009883a 	mov	r4,r20
   299bc:	880b883a 	mov	r5,r17
   299c0:	102d883a 	mov	r22,r2
   299c4:	002ad940 	call	2ad94 <__udivsi3>
   299c8:	1009883a 	mov	r4,r2
   299cc:	900b883a 	mov	r5,r18
   299d0:	00210140 	call	21014 <__mulsi3>
   299d4:	1009883a 	mov	r4,r2
   299d8:	b006943a 	slli	r3,r22,16
   299dc:	9804d43a 	srli	r2,r19,16
   299e0:	1886b03a 	or	r3,r3,r2
   299e4:	1900042e 	bgeu	r3,r4,299f8 <__umoddi3+0xec>
   299e8:	1c07883a 	add	r3,r3,r16
   299ec:	1c000236 	bltu	r3,r16,299f8 <__umoddi3+0xec>
   299f0:	1900012e 	bgeu	r3,r4,299f8 <__umoddi3+0xec>
   299f4:	1c07883a 	add	r3,r3,r16
   299f8:	1929c83a 	sub	r20,r3,r4
   299fc:	a009883a 	mov	r4,r20
   29a00:	880b883a 	mov	r5,r17
   29a04:	002ad9c0 	call	2ad9c <__umodsi3>
   29a08:	102d883a 	mov	r22,r2
   29a0c:	a009883a 	mov	r4,r20
   29a10:	880b883a 	mov	r5,r17
   29a14:	b02c943a 	slli	r22,r22,16
   29a18:	002ad940 	call	2ad94 <__udivsi3>
   29a1c:	1009883a 	mov	r4,r2
   29a20:	900b883a 	mov	r5,r18
   29a24:	9cffffcc 	andi	r19,r19,65535
   29a28:	00210140 	call	21014 <__mulsi3>
   29a2c:	b4e6b03a 	or	r19,r22,r19
   29a30:	9880572e 	bgeu	r19,r2,29b90 <__umoddi3+0x284>
   29a34:	00005206 	br	29b80 <__umoddi3+0x274>
   29a38:	29c05936 	bltu	r5,r7,29ba0 <__umoddi3+0x294>
   29a3c:	00bfffd4 	movui	r2,65535
   29a40:	11c0652e 	bgeu	r2,r7,29bd8 <__umoddi3+0x2cc>
   29a44:	00804034 	movhi	r2,256
   29a48:	10bfffc4 	addi	r2,r2,-1
   29a4c:	11c11936 	bltu	r2,r7,29eb4 <__umoddi3+0x5a8>
   29a50:	00c00404 	movi	r3,16
   29a54:	1827883a 	mov	r19,r3
   29a58:	38c6d83a 	srl	r3,r7,r3
   29a5c:	010000f4 	movhi	r4,3
   29a60:	213a7204 	addi	r4,r4,-5688
   29a64:	04000804 	movi	r16,32
   29a68:	20c7883a 	add	r3,r4,r3
   29a6c:	18800003 	ldbu	r2,0(r3)
   29a70:	14e7883a 	add	r19,r2,r19
   29a74:	84e1c83a 	sub	r16,r16,r19
   29a78:	8000671e 	bne	r16,zero,29c18 <__umoddi3+0x30c>
   29a7c:	3c400136 	bltu	r7,r17,29a84 <__umoddi3+0x178>
   29a80:	91812536 	bltu	r18,r6,29f18 <__umoddi3+0x60c>
   29a84:	9185c83a 	sub	r2,r18,r6
   29a88:	89e3c83a 	sub	r17,r17,r7
   29a8c:	90a5803a 	cmpltu	r18,r18,r2
   29a90:	8ca9c83a 	sub	r20,r17,r18
   29a94:	a007883a 	mov	r3,r20
   29a98:	00004306 	br	29ba8 <__umoddi3+0x29c>
   29a9c:	3000041e 	bne	r6,zero,29ab0 <__umoddi3+0x1a4>
   29aa0:	01000044 	movi	r4,1
   29aa4:	000b883a 	mov	r5,zero
   29aa8:	002ad940 	call	2ad94 <__udivsi3>
   29aac:	1021883a 	mov	r16,r2
   29ab0:	00bfffd4 	movui	r2,65535
   29ab4:	1400532e 	bgeu	r2,r16,29c04 <__umoddi3+0x2f8>
   29ab8:	00804034 	movhi	r2,256
   29abc:	10bfffc4 	addi	r2,r2,-1
   29ac0:	14010536 	bltu	r2,r16,29ed8 <__umoddi3+0x5cc>
   29ac4:	00800404 	movi	r2,16
   29ac8:	1007883a 	mov	r3,r2
   29acc:	8084d83a 	srl	r2,r16,r2
   29ad0:	010000f4 	movhi	r4,3
   29ad4:	213a7204 	addi	r4,r4,-5688
   29ad8:	05400804 	movi	r21,32
   29adc:	2085883a 	add	r2,r4,r2
   29ae0:	10800003 	ldbu	r2,0(r2)
   29ae4:	10c7883a 	add	r3,r2,r3
   29ae8:	a8ebc83a 	sub	r21,r21,r3
   29aec:	a800b81e 	bne	r21,zero,29dd0 <__umoddi3+0x4c4>
   29af0:	8028d43a 	srli	r20,r16,16
   29af4:	8c23c83a 	sub	r17,r17,r16
   29af8:	85bfffcc 	andi	r22,r16,65535
   29afc:	8809883a 	mov	r4,r17
   29b00:	a00b883a 	mov	r5,r20
   29b04:	002ad9c0 	call	2ad9c <__umodsi3>
   29b08:	8809883a 	mov	r4,r17
   29b0c:	a00b883a 	mov	r5,r20
   29b10:	1025883a 	mov	r18,r2
   29b14:	002ad940 	call	2ad94 <__udivsi3>
   29b18:	1009883a 	mov	r4,r2
   29b1c:	b00b883a 	mov	r5,r22
   29b20:	00210140 	call	21014 <__mulsi3>
   29b24:	1009883a 	mov	r4,r2
   29b28:	9006943a 	slli	r3,r18,16
   29b2c:	9804d43a 	srli	r2,r19,16
   29b30:	1886b03a 	or	r3,r3,r2
   29b34:	1900032e 	bgeu	r3,r4,29b44 <__umoddi3+0x238>
   29b38:	1c07883a 	add	r3,r3,r16
   29b3c:	1c000136 	bltu	r3,r16,29b44 <__umoddi3+0x238>
   29b40:	1900f336 	bltu	r3,r4,29f10 <__umoddi3+0x604>
   29b44:	1923c83a 	sub	r17,r3,r4
   29b48:	8809883a 	mov	r4,r17
   29b4c:	a00b883a 	mov	r5,r20
   29b50:	002ad9c0 	call	2ad9c <__umodsi3>
   29b54:	102f883a 	mov	r23,r2
   29b58:	8809883a 	mov	r4,r17
   29b5c:	a00b883a 	mov	r5,r20
   29b60:	b82e943a 	slli	r23,r23,16
   29b64:	002ad940 	call	2ad94 <__udivsi3>
   29b68:	1009883a 	mov	r4,r2
   29b6c:	b00b883a 	mov	r5,r22
   29b70:	9cffffcc 	andi	r19,r19,65535
   29b74:	00210140 	call	21014 <__mulsi3>
   29b78:	bce6b03a 	or	r19,r23,r19
   29b7c:	9880042e 	bgeu	r19,r2,29b90 <__umoddi3+0x284>
   29b80:	9c27883a 	add	r19,r19,r16
   29b84:	9c000236 	bltu	r19,r16,29b90 <__umoddi3+0x284>
   29b88:	9880012e 	bgeu	r19,r2,29b90 <__umoddi3+0x284>
   29b8c:	9c27883a 	add	r19,r19,r16
   29b90:	9885c83a 	sub	r2,r19,r2
   29b94:	1544d83a 	srl	r2,r2,r21
   29b98:	0007883a 	mov	r3,zero
   29b9c:	00000206 	br	29ba8 <__umoddi3+0x29c>
   29ba0:	2005883a 	mov	r2,r4
   29ba4:	2807883a 	mov	r3,r5
   29ba8:	dfc00c17 	ldw	ra,48(sp)
   29bac:	df000b17 	ldw	fp,44(sp)
   29bb0:	ddc00a17 	ldw	r23,40(sp)
   29bb4:	dd800917 	ldw	r22,36(sp)
   29bb8:	dd400817 	ldw	r21,32(sp)
   29bbc:	dd000717 	ldw	r20,28(sp)
   29bc0:	dcc00617 	ldw	r19,24(sp)
   29bc4:	dc800517 	ldw	r18,20(sp)
   29bc8:	dc400417 	ldw	r17,16(sp)
   29bcc:	dc000317 	ldw	r16,12(sp)
   29bd0:	dec00d04 	addi	sp,sp,52
   29bd4:	f800283a 	ret
   29bd8:	00803fc4 	movi	r2,255
   29bdc:	11c0b236 	bltu	r2,r7,29ea8 <__umoddi3+0x59c>
   29be0:	0007883a 	mov	r3,zero
   29be4:	0027883a 	mov	r19,zero
   29be8:	003f9b06 	br	29a58 <__umoddi3+0x14c>
   29bec:	00804034 	movhi	r2,256
   29bf0:	10bfffc4 	addi	r2,r2,-1
   29bf4:	1180b236 	bltu	r2,r6,29ec0 <__umoddi3+0x5b4>
   29bf8:	00800404 	movi	r2,16
   29bfc:	1009883a 	mov	r4,r2
   29c00:	003f5a06 	br	2996c <__umoddi3+0x60>
   29c04:	00803fc4 	movi	r2,255
   29c08:	1400b036 	bltu	r2,r16,29ecc <__umoddi3+0x5c0>
   29c0c:	0005883a 	mov	r2,zero
   29c10:	0007883a 	mov	r3,zero
   29c14:	003fad06 	br	29acc <__umoddi3+0x1c0>
   29c18:	34c4d83a 	srl	r2,r6,r19
   29c1c:	3c0e983a 	sll	r7,r7,r16
   29c20:	8cf8d83a 	srl	fp,r17,r19
   29c24:	8c22983a 	sll	r17,r17,r16
   29c28:	38a8b03a 	or	r20,r7,r2
   29c2c:	a02ad43a 	srli	r21,r20,16
   29c30:	94c4d83a 	srl	r2,r18,r19
   29c34:	e009883a 	mov	r4,fp
   29c38:	a80b883a 	mov	r5,r21
   29c3c:	342c983a 	sll	r22,r6,r16
   29c40:	88a2b03a 	or	r17,r17,r2
   29c44:	002ad9c0 	call	2ad9c <__umodsi3>
   29c48:	e009883a 	mov	r4,fp
   29c4c:	a80b883a 	mov	r5,r21
   29c50:	a5ffffcc 	andi	r23,r20,65535
   29c54:	d8800215 	stw	r2,8(sp)
   29c58:	002ad940 	call	2ad94 <__udivsi3>
   29c5c:	1009883a 	mov	r4,r2
   29c60:	b80b883a 	mov	r5,r23
   29c64:	1039883a 	mov	fp,r2
   29c68:	00210140 	call	21014 <__mulsi3>
   29c6c:	d8c00217 	ldw	r3,8(sp)
   29c70:	1009883a 	mov	r4,r2
   29c74:	8804d43a 	srli	r2,r17,16
   29c78:	1806943a 	slli	r3,r3,16
   29c7c:	9424983a 	sll	r18,r18,r16
   29c80:	1886b03a 	or	r3,r3,r2
   29c84:	1900042e 	bgeu	r3,r4,29c98 <__umoddi3+0x38c>
   29c88:	1d07883a 	add	r3,r3,r20
   29c8c:	e0bfffc4 	addi	r2,fp,-1
   29c90:	1d009b2e 	bgeu	r3,r20,29f00 <__umoddi3+0x5f4>
   29c94:	1039883a 	mov	fp,r2
   29c98:	1907c83a 	sub	r3,r3,r4
   29c9c:	1809883a 	mov	r4,r3
   29ca0:	a80b883a 	mov	r5,r21
   29ca4:	d8c00215 	stw	r3,8(sp)
   29ca8:	002ad9c0 	call	2ad9c <__umodsi3>
   29cac:	d8c00217 	ldw	r3,8(sp)
   29cb0:	a80b883a 	mov	r5,r21
   29cb4:	d8800015 	stw	r2,0(sp)
   29cb8:	1809883a 	mov	r4,r3
   29cbc:	002ad940 	call	2ad94 <__udivsi3>
   29cc0:	1009883a 	mov	r4,r2
   29cc4:	b80b883a 	mov	r5,r23
   29cc8:	102b883a 	mov	r21,r2
   29ccc:	00210140 	call	21014 <__mulsi3>
   29cd0:	d9c00017 	ldw	r7,0(sp)
   29cd4:	8c7fffcc 	andi	r17,r17,65535
   29cd8:	380e943a 	slli	r7,r7,16
   29cdc:	3c4eb03a 	or	r7,r7,r17
   29ce0:	3880042e 	bgeu	r7,r2,29cf4 <__umoddi3+0x3e8>
   29ce4:	3d0f883a 	add	r7,r7,r20
   29ce8:	a8ffffc4 	addi	r3,r21,-1
   29cec:	3d00802e 	bgeu	r7,r20,29ef0 <__umoddi3+0x5e4>
   29cf0:	182b883a 	mov	r21,r3
   29cf4:	e038943a 	slli	fp,fp,16
   29cf8:	b010d43a 	srli	r8,r22,16
   29cfc:	b1bfffcc 	andi	r6,r22,65535
   29d00:	af2ab03a 	or	r21,r21,fp
   29d04:	a82ed43a 	srli	r23,r21,16
   29d08:	ad7fffcc 	andi	r21,r21,65535
   29d0c:	300b883a 	mov	r5,r6
   29d10:	a809883a 	mov	r4,r21
   29d14:	38a3c83a 	sub	r17,r7,r2
   29d18:	d9800115 	stw	r6,4(sp)
   29d1c:	da000015 	stw	r8,0(sp)
   29d20:	00210140 	call	21014 <__mulsi3>
   29d24:	da000017 	ldw	r8,0(sp)
   29d28:	a809883a 	mov	r4,r21
   29d2c:	1039883a 	mov	fp,r2
   29d30:	400b883a 	mov	r5,r8
   29d34:	da000215 	stw	r8,8(sp)
   29d38:	00210140 	call	21014 <__mulsi3>
   29d3c:	d9800117 	ldw	r6,4(sp)
   29d40:	b809883a 	mov	r4,r23
   29d44:	d8800015 	stw	r2,0(sp)
   29d48:	300b883a 	mov	r5,r6
   29d4c:	00210140 	call	21014 <__mulsi3>
   29d50:	d8c00217 	ldw	r3,8(sp)
   29d54:	b809883a 	mov	r4,r23
   29d58:	102b883a 	mov	r21,r2
   29d5c:	180b883a 	mov	r5,r3
   29d60:	00210140 	call	21014 <__mulsi3>
   29d64:	d9c00017 	ldw	r7,0(sp)
   29d68:	1007883a 	mov	r3,r2
   29d6c:	e004d43a 	srli	r2,fp,16
   29d70:	a9c9883a 	add	r4,r21,r7
   29d74:	2089883a 	add	r4,r4,r2
   29d78:	2540022e 	bgeu	r4,r21,29d84 <__umoddi3+0x478>
   29d7c:	00800074 	movhi	r2,1
   29d80:	1887883a 	add	r3,r3,r2
   29d84:	2004d43a 	srli	r2,r4,16
   29d88:	2008943a 	slli	r4,r4,16
   29d8c:	e73fffcc 	andi	fp,fp,65535
   29d90:	1887883a 	add	r3,r3,r2
   29d94:	2709883a 	add	r4,r4,fp
   29d98:	88c03d36 	bltu	r17,r3,29e90 <__umoddi3+0x584>
   29d9c:	88c06126 	beq	r17,r3,29f24 <__umoddi3+0x618>
   29da0:	88c7c83a 	sub	r3,r17,r3
   29da4:	202d883a 	mov	r22,r4
   29da8:	95adc83a 	sub	r22,r18,r22
   29dac:	95a5803a 	cmpltu	r18,r18,r22
   29db0:	1c87c83a 	sub	r3,r3,r18
   29db4:	1cc4983a 	sll	r2,r3,r19
   29db8:	b42cd83a 	srl	r22,r22,r16
   29dbc:	1c06d83a 	srl	r3,r3,r16
   29dc0:	1584b03a 	or	r2,r2,r22
   29dc4:	003f7806 	br	29ba8 <__umoddi3+0x29c>
   29dc8:	002b883a 	mov	r21,zero
   29dcc:	003ef506 	br	299a4 <__umoddi3+0x98>
   29dd0:	8560983a 	sll	r16,r16,r21
   29dd4:	88e6d83a 	srl	r19,r17,r3
   29dd8:	90c6d83a 	srl	r3,r18,r3
   29ddc:	8028d43a 	srli	r20,r16,16
   29de0:	8d62983a 	sll	r17,r17,r21
   29de4:	9809883a 	mov	r4,r19
   29de8:	a00b883a 	mov	r5,r20
   29dec:	88eeb03a 	or	r23,r17,r3
   29df0:	002ad9c0 	call	2ad9c <__umodsi3>
   29df4:	9809883a 	mov	r4,r19
   29df8:	a00b883a 	mov	r5,r20
   29dfc:	1023883a 	mov	r17,r2
   29e00:	85bfffcc 	andi	r22,r16,65535
   29e04:	002ad940 	call	2ad94 <__udivsi3>
   29e08:	1009883a 	mov	r4,r2
   29e0c:	b00b883a 	mov	r5,r22
   29e10:	00210140 	call	21014 <__mulsi3>
   29e14:	1007883a 	mov	r3,r2
   29e18:	8808943a 	slli	r4,r17,16
   29e1c:	b804d43a 	srli	r2,r23,16
   29e20:	9566983a 	sll	r19,r18,r21
   29e24:	2088b03a 	or	r4,r4,r2
   29e28:	20c0042e 	bgeu	r4,r3,29e3c <__umoddi3+0x530>
   29e2c:	2409883a 	add	r4,r4,r16
   29e30:	24000236 	bltu	r4,r16,29e3c <__umoddi3+0x530>
   29e34:	20c0012e 	bgeu	r4,r3,29e3c <__umoddi3+0x530>
   29e38:	2409883a 	add	r4,r4,r16
   29e3c:	20e5c83a 	sub	r18,r4,r3
   29e40:	9009883a 	mov	r4,r18
   29e44:	a00b883a 	mov	r5,r20
   29e48:	002ad9c0 	call	2ad9c <__umodsi3>
   29e4c:	1023883a 	mov	r17,r2
   29e50:	9009883a 	mov	r4,r18
   29e54:	a00b883a 	mov	r5,r20
   29e58:	8822943a 	slli	r17,r17,16
   29e5c:	002ad940 	call	2ad94 <__udivsi3>
   29e60:	1009883a 	mov	r4,r2
   29e64:	b00b883a 	mov	r5,r22
   29e68:	bdffffcc 	andi	r23,r23,65535
   29e6c:	00210140 	call	21014 <__mulsi3>
   29e70:	8de2b03a 	or	r17,r17,r23
   29e74:	8880042e 	bgeu	r17,r2,29e88 <__umoddi3+0x57c>
   29e78:	8c23883a 	add	r17,r17,r16
   29e7c:	8c000236 	bltu	r17,r16,29e88 <__umoddi3+0x57c>
   29e80:	8880012e 	bgeu	r17,r2,29e88 <__umoddi3+0x57c>
   29e84:	8c23883a 	add	r17,r17,r16
   29e88:	88a3c83a 	sub	r17,r17,r2
   29e8c:	003f1b06 	br	29afc <__umoddi3+0x1f0>
   29e90:	25adc83a 	sub	r22,r4,r22
   29e94:	1d07c83a 	sub	r3,r3,r20
   29e98:	2589803a 	cmpltu	r4,r4,r22
   29e9c:	1907c83a 	sub	r3,r3,r4
   29ea0:	88c7c83a 	sub	r3,r17,r3
   29ea4:	003fc006 	br	29da8 <__umoddi3+0x49c>
   29ea8:	00c00204 	movi	r3,8
   29eac:	1827883a 	mov	r19,r3
   29eb0:	003ee906 	br	29a58 <__umoddi3+0x14c>
   29eb4:	00c00604 	movi	r3,24
   29eb8:	1827883a 	mov	r19,r3
   29ebc:	003ee606 	br	29a58 <__umoddi3+0x14c>
   29ec0:	00800604 	movi	r2,24
   29ec4:	1009883a 	mov	r4,r2
   29ec8:	003ea806 	br	2996c <__umoddi3+0x60>
   29ecc:	00800204 	movi	r2,8
   29ed0:	1007883a 	mov	r3,r2
   29ed4:	003efd06 	br	29acc <__umoddi3+0x1c0>
   29ed8:	00800604 	movi	r2,24
   29edc:	1007883a 	mov	r3,r2
   29ee0:	003efa06 	br	29acc <__umoddi3+0x1c0>
   29ee4:	00800204 	movi	r2,8
   29ee8:	1009883a 	mov	r4,r2
   29eec:	003e9f06 	br	2996c <__umoddi3+0x60>
   29ef0:	38bf7f2e 	bgeu	r7,r2,29cf0 <__umoddi3+0x3e4>
   29ef4:	ad7fff84 	addi	r21,r21,-2
   29ef8:	3d0f883a 	add	r7,r7,r20
   29efc:	003f7d06 	br	29cf4 <__umoddi3+0x3e8>
   29f00:	193f642e 	bgeu	r3,r4,29c94 <__umoddi3+0x388>
   29f04:	e73fff84 	addi	fp,fp,-2
   29f08:	1d07883a 	add	r3,r3,r20
   29f0c:	003f6206 	br	29c98 <__umoddi3+0x38c>
   29f10:	1c07883a 	add	r3,r3,r16
   29f14:	003f0b06 	br	29b44 <__umoddi3+0x238>
   29f18:	9005883a 	mov	r2,r18
   29f1c:	a007883a 	mov	r3,r20
   29f20:	003f2106 	br	29ba8 <__umoddi3+0x29c>
   29f24:	913fda36 	bltu	r18,r4,29e90 <__umoddi3+0x584>
   29f28:	202d883a 	mov	r22,r4
   29f2c:	0007883a 	mov	r3,zero
   29f30:	003f9d06 	br	29da8 <__umoddi3+0x49c>

00029f34 <_fpadd_parts>:
   29f34:	2005883a 	mov	r2,r4
   29f38:	21000017 	ldw	r4,0(r4)
   29f3c:	01c00044 	movi	r7,1
   29f40:	3900622e 	bgeu	r7,r4,2a0cc <_fpadd_parts+0x198>
   29f44:	28c00017 	ldw	r3,0(r5)
   29f48:	38c05f2e 	bgeu	r7,r3,2a0c8 <_fpadd_parts+0x194>
   29f4c:	01c00104 	movi	r7,4
   29f50:	21c0c626 	beq	r4,r7,2a26c <_fpadd_parts+0x338>
   29f54:	19c05c26 	beq	r3,r7,2a0c8 <_fpadd_parts+0x194>
   29f58:	01c00084 	movi	r7,2
   29f5c:	19c06b26 	beq	r3,r7,2a10c <_fpadd_parts+0x1d8>
   29f60:	21c05926 	beq	r4,r7,2a0c8 <_fpadd_parts+0x194>
   29f64:	11c00217 	ldw	r7,8(r2)
   29f68:	2ac00217 	ldw	r11,8(r5)
   29f6c:	13000317 	ldw	r12,12(r2)
   29f70:	13400417 	ldw	r13,16(r2)
   29f74:	3ac9c83a 	sub	r4,r7,r11
   29f78:	2a000317 	ldw	r8,12(r5)
   29f7c:	2a400417 	ldw	r9,16(r5)
   29f80:	2015883a 	mov	r10,r4
   29f84:	20007516 	blt	r4,zero,2a15c <_fpadd_parts+0x228>
   29f88:	00c00fc4 	movi	r3,63
   29f8c:	1a805016 	blt	r3,r10,2a0d0 <_fpadd_parts+0x19c>
   29f90:	0100870e 	bge	zero,r4,2a1b0 <_fpadd_parts+0x27c>
   29f94:	50fff804 	addi	r3,r10,-32
   29f98:	18009916 	blt	r3,zero,2a200 <_fpadd_parts+0x2cc>
   29f9c:	48d6d83a 	srl	r11,r9,r3
   29fa0:	001d883a 	mov	r14,zero
   29fa4:	18009e16 	blt	r3,zero,2a220 <_fpadd_parts+0x2ec>
   29fa8:	01000044 	movi	r4,1
   29fac:	20c6983a 	sll	r3,r4,r3
   29fb0:	0015883a 	mov	r10,zero
   29fb4:	513fffc4 	addi	r4,r10,-1
   29fb8:	2295403a 	cmpgeu	r10,r4,r10
   29fbc:	1a87c83a 	sub	r3,r3,r10
   29fc0:	1a52703a 	and	r9,r3,r9
   29fc4:	2210703a 	and	r8,r4,r8
   29fc8:	4250b03a 	or	r8,r8,r9
   29fcc:	4010c03a 	cmpne	r8,r8,zero
   29fd0:	42d0b03a 	or	r8,r8,r11
   29fd4:	7013883a 	mov	r9,r14
   29fd8:	11000117 	ldw	r4,4(r2)
   29fdc:	28800117 	ldw	r2,4(r5)
   29fe0:	20804126 	beq	r4,r2,2a0e8 <_fpadd_parts+0x1b4>
   29fe4:	20006326 	beq	r4,zero,2a174 <_fpadd_parts+0x240>
   29fe8:	4305c83a 	sub	r2,r8,r12
   29fec:	4091803a 	cmpltu	r8,r8,r2
   29ff0:	4b47c83a 	sub	r3,r9,r13
   29ff4:	1a07c83a 	sub	r3,r3,r8
   29ff8:	18006316 	blt	r3,zero,2a188 <_fpadd_parts+0x254>
   29ffc:	30000115 	stw	zero,4(r6)
   2a000:	31c00215 	stw	r7,8(r6)
   2a004:	30800315 	stw	r2,12(r6)
   2a008:	30c00415 	stw	r3,16(r6)
   2a00c:	11ffffc4 	addi	r7,r2,-1
   2a010:	388b403a 	cmpgeu	r5,r7,r2
   2a014:	194bc83a 	sub	r5,r3,r5
   2a018:	01040034 	movhi	r4,4096
   2a01c:	213fffc4 	addi	r4,r4,-1
   2a020:	21401736 	bltu	r4,r5,2a080 <_fpadd_parts+0x14c>
   2a024:	29008226 	beq	r5,r4,2a230 <_fpadd_parts+0x2fc>
   2a028:	31400217 	ldw	r5,8(r6)
   2a02c:	02840034 	movhi	r10,4096
   2a030:	52bfffc4 	addi	r10,r10,-1
   2a034:	033fff84 	movi	r12,-2
   2a038:	297fffc4 	addi	r5,r5,-1
   2a03c:	00000106 	br	2a044 <_fpadd_parts+0x110>
   2a040:	3a804a26 	beq	r7,r10,2a16c <_fpadd_parts+0x238>
   2a044:	1089883a 	add	r4,r2,r2
   2a048:	2091803a 	cmpltu	r8,r4,r2
   2a04c:	18c7883a 	add	r3,r3,r3
   2a050:	227fffc4 	addi	r9,r4,-1
   2a054:	40d1883a 	add	r8,r8,r3
   2a058:	490f403a 	cmpgeu	r7,r9,r4
   2a05c:	41cfc83a 	sub	r7,r8,r7
   2a060:	2817883a 	mov	r11,r5
   2a064:	2005883a 	mov	r2,r4
   2a068:	4007883a 	mov	r3,r8
   2a06c:	297fffc4 	addi	r5,r5,-1
   2a070:	51fff32e 	bgeu	r10,r7,2a040 <_fpadd_parts+0x10c>
   2a074:	31000315 	stw	r4,12(r6)
   2a078:	32000415 	stw	r8,16(r6)
   2a07c:	32c00215 	stw	r11,8(r6)
   2a080:	010000c4 	movi	r4,3
   2a084:	31000015 	stw	r4,0(r6)
   2a088:	01080034 	movhi	r4,8192
   2a08c:	213fffc4 	addi	r4,r4,-1
   2a090:	20c00b2e 	bgeu	r4,r3,2a0c0 <_fpadd_parts+0x18c>
   2a094:	180e97fa 	slli	r7,r3,31
   2a098:	1008d07a 	srli	r4,r2,1
   2a09c:	31400217 	ldw	r5,8(r6)
   2a0a0:	1806d07a 	srli	r3,r3,1
   2a0a4:	1080004c 	andi	r2,r2,1
   2a0a8:	3908b03a 	or	r4,r7,r4
   2a0ac:	1108b03a 	or	r4,r2,r4
   2a0b0:	29400044 	addi	r5,r5,1
   2a0b4:	31000315 	stw	r4,12(r6)
   2a0b8:	30c00415 	stw	r3,16(r6)
   2a0bc:	31400215 	stw	r5,8(r6)
   2a0c0:	3005883a 	mov	r2,r6
   2a0c4:	f800283a 	ret
   2a0c8:	2805883a 	mov	r2,r5
   2a0cc:	f800283a 	ret
   2a0d0:	59c01e0e 	bge	r11,r7,2a14c <_fpadd_parts+0x218>
   2a0d4:	11000117 	ldw	r4,4(r2)
   2a0d8:	28800117 	ldw	r2,4(r5)
   2a0dc:	0011883a 	mov	r8,zero
   2a0e0:	0013883a 	mov	r9,zero
   2a0e4:	20bfbf1e 	bne	r4,r2,29fe4 <_fpadd_parts+0xb0>
   2a0e8:	4305883a 	add	r2,r8,r12
   2a0ec:	1207803a 	cmpltu	r3,r2,r8
   2a0f0:	4b53883a 	add	r9,r9,r13
   2a0f4:	1a47883a 	add	r3,r3,r9
   2a0f8:	31000115 	stw	r4,4(r6)
   2a0fc:	31c00215 	stw	r7,8(r6)
   2a100:	30800315 	stw	r2,12(r6)
   2a104:	30c00415 	stw	r3,16(r6)
   2a108:	003fdd06 	br	2a080 <_fpadd_parts+0x14c>
   2a10c:	20ffef1e 	bne	r4,r3,2a0cc <_fpadd_parts+0x198>
   2a110:	31000015 	stw	r4,0(r6)
   2a114:	10c00117 	ldw	r3,4(r2)
   2a118:	30c00115 	stw	r3,4(r6)
   2a11c:	10c00217 	ldw	r3,8(r2)
   2a120:	11000117 	ldw	r4,4(r2)
   2a124:	29400117 	ldw	r5,4(r5)
   2a128:	30c00215 	stw	r3,8(r6)
   2a12c:	10c00317 	ldw	r3,12(r2)
   2a130:	2908703a 	and	r4,r5,r4
   2a134:	30c00315 	stw	r3,12(r6)
   2a138:	10c00417 	ldw	r3,16(r2)
   2a13c:	31000115 	stw	r4,4(r6)
   2a140:	3005883a 	mov	r2,r6
   2a144:	30c00415 	stw	r3,16(r6)
   2a148:	f800283a 	ret
   2a14c:	580f883a 	mov	r7,r11
   2a150:	0019883a 	mov	r12,zero
   2a154:	001b883a 	mov	r13,zero
   2a158:	003f9f06 	br	29fd8 <_fpadd_parts+0xa4>
   2a15c:	0115c83a 	sub	r10,zero,r4
   2a160:	00c00fc4 	movi	r3,63
   2a164:	1abfda16 	blt	r3,r10,2a0d0 <_fpadd_parts+0x19c>
   2a168:	003f8906 	br	29f90 <_fpadd_parts+0x5c>
   2a16c:	627fb52e 	bgeu	r12,r9,2a044 <_fpadd_parts+0x110>
   2a170:	003fc006 	br	2a074 <_fpadd_parts+0x140>
   2a174:	6205c83a 	sub	r2,r12,r8
   2a178:	6099803a 	cmpltu	r12,r12,r2
   2a17c:	6a47c83a 	sub	r3,r13,r9
   2a180:	1b07c83a 	sub	r3,r3,r12
   2a184:	183f9d0e 	bge	r3,zero,29ffc <_fpadd_parts+0xc8>
   2a188:	0085c83a 	sub	r2,zero,r2
   2a18c:	1008c03a 	cmpne	r4,r2,zero
   2a190:	00c7c83a 	sub	r3,zero,r3
   2a194:	1907c83a 	sub	r3,r3,r4
   2a198:	01000044 	movi	r4,1
   2a19c:	31000115 	stw	r4,4(r6)
   2a1a0:	31c00215 	stw	r7,8(r6)
   2a1a4:	30800315 	stw	r2,12(r6)
   2a1a8:	30c00415 	stw	r3,16(r6)
   2a1ac:	003f9706 	br	2a00c <_fpadd_parts+0xd8>
   2a1b0:	203f8926 	beq	r4,zero,29fd8 <_fpadd_parts+0xa4>
   2a1b4:	50fff804 	addi	r3,r10,-32
   2a1b8:	3a8f883a 	add	r7,r7,r10
   2a1bc:	18002316 	blt	r3,zero,2a24c <_fpadd_parts+0x318>
   2a1c0:	68d6d83a 	srl	r11,r13,r3
   2a1c4:	001d883a 	mov	r14,zero
   2a1c8:	18001c16 	blt	r3,zero,2a23c <_fpadd_parts+0x308>
   2a1cc:	01000044 	movi	r4,1
   2a1d0:	20c6983a 	sll	r3,r4,r3
   2a1d4:	0015883a 	mov	r10,zero
   2a1d8:	513fffc4 	addi	r4,r10,-1
   2a1dc:	2295403a 	cmpgeu	r10,r4,r10
   2a1e0:	1a87c83a 	sub	r3,r3,r10
   2a1e4:	1b5a703a 	and	r13,r3,r13
   2a1e8:	2318703a 	and	r12,r4,r12
   2a1ec:	6358b03a 	or	r12,r12,r13
   2a1f0:	6018c03a 	cmpne	r12,r12,zero
   2a1f4:	62d8b03a 	or	r12,r12,r11
   2a1f8:	701b883a 	mov	r13,r14
   2a1fc:	003f7606 	br	29fd8 <_fpadd_parts+0xa4>
   2a200:	4808907a 	slli	r4,r9,1
   2a204:	02c007c4 	movi	r11,31
   2a208:	5a97c83a 	sub	r11,r11,r10
   2a20c:	22c8983a 	sll	r4,r4,r11
   2a210:	4296d83a 	srl	r11,r8,r10
   2a214:	4a9cd83a 	srl	r14,r9,r10
   2a218:	22d6b03a 	or	r11,r4,r11
   2a21c:	003f6106 	br	29fa4 <_fpadd_parts+0x70>
   2a220:	00c00044 	movi	r3,1
   2a224:	1a94983a 	sll	r10,r3,r10
   2a228:	0007883a 	mov	r3,zero
   2a22c:	003f6106 	br	29fb4 <_fpadd_parts+0x80>
   2a230:	013fff84 	movi	r4,-2
   2a234:	21ff7c2e 	bgeu	r4,r7,2a028 <_fpadd_parts+0xf4>
   2a238:	003f9106 	br	2a080 <_fpadd_parts+0x14c>
   2a23c:	00c00044 	movi	r3,1
   2a240:	1a94983a 	sll	r10,r3,r10
   2a244:	0007883a 	mov	r3,zero
   2a248:	003fe306 	br	2a1d8 <_fpadd_parts+0x2a4>
   2a24c:	6816907a 	slli	r11,r13,1
   2a250:	010007c4 	movi	r4,31
   2a254:	2289c83a 	sub	r4,r4,r10
   2a258:	5908983a 	sll	r4,r11,r4
   2a25c:	6296d83a 	srl	r11,r12,r10
   2a260:	6a9cd83a 	srl	r14,r13,r10
   2a264:	22d6b03a 	or	r11,r4,r11
   2a268:	003fd706 	br	2a1c8 <_fpadd_parts+0x294>
   2a26c:	193f971e 	bne	r3,r4,2a0cc <_fpadd_parts+0x198>
   2a270:	11000117 	ldw	r4,4(r2)
   2a274:	28c00117 	ldw	r3,4(r5)
   2a278:	20ff9426 	beq	r4,r3,2a0cc <_fpadd_parts+0x198>
   2a27c:	008000f4 	movhi	r2,3
   2a280:	10ba6d04 	addi	r2,r2,-5708
   2a284:	f800283a 	ret

0002a288 <__adddf3>:
   2a288:	deffec04 	addi	sp,sp,-80
   2a28c:	d9001115 	stw	r4,68(sp)
   2a290:	d9401215 	stw	r5,72(sp)
   2a294:	d9001104 	addi	r4,sp,68
   2a298:	d9400a04 	addi	r5,sp,40
   2a29c:	dfc01315 	stw	ra,76(sp)
   2a2a0:	d9c01015 	stw	r7,64(sp)
   2a2a4:	d9800f15 	stw	r6,60(sp)
   2a2a8:	002b1840 	call	2b184 <__unpack_d>
   2a2ac:	d9000f04 	addi	r4,sp,60
   2a2b0:	d9400504 	addi	r5,sp,20
   2a2b4:	002b1840 	call	2b184 <__unpack_d>
   2a2b8:	d9000a04 	addi	r4,sp,40
   2a2bc:	d9400504 	addi	r5,sp,20
   2a2c0:	d80d883a 	mov	r6,sp
   2a2c4:	0029f340 	call	29f34 <_fpadd_parts>
   2a2c8:	1009883a 	mov	r4,r2
   2a2cc:	002af600 	call	2af60 <__pack_d>
   2a2d0:	dfc01317 	ldw	ra,76(sp)
   2a2d4:	dec01404 	addi	sp,sp,80
   2a2d8:	f800283a 	ret

0002a2dc <__subdf3>:
   2a2dc:	deffec04 	addi	sp,sp,-80
   2a2e0:	d9001115 	stw	r4,68(sp)
   2a2e4:	d9401215 	stw	r5,72(sp)
   2a2e8:	d9001104 	addi	r4,sp,68
   2a2ec:	d9400a04 	addi	r5,sp,40
   2a2f0:	dfc01315 	stw	ra,76(sp)
   2a2f4:	d9c01015 	stw	r7,64(sp)
   2a2f8:	d9800f15 	stw	r6,60(sp)
   2a2fc:	002b1840 	call	2b184 <__unpack_d>
   2a300:	d9000f04 	addi	r4,sp,60
   2a304:	d9400504 	addi	r5,sp,20
   2a308:	002b1840 	call	2b184 <__unpack_d>
   2a30c:	d8800617 	ldw	r2,24(sp)
   2a310:	d9000a04 	addi	r4,sp,40
   2a314:	d9400504 	addi	r5,sp,20
   2a318:	d80d883a 	mov	r6,sp
   2a31c:	1080005c 	xori	r2,r2,1
   2a320:	d8800615 	stw	r2,24(sp)
   2a324:	0029f340 	call	29f34 <_fpadd_parts>
   2a328:	1009883a 	mov	r4,r2
   2a32c:	002af600 	call	2af60 <__pack_d>
   2a330:	dfc01317 	ldw	ra,76(sp)
   2a334:	dec01404 	addi	sp,sp,80
   2a338:	f800283a 	ret

0002a33c <__muldf3>:
   2a33c:	deffe404 	addi	sp,sp,-112
   2a340:	d9001115 	stw	r4,68(sp)
   2a344:	d9401215 	stw	r5,72(sp)
   2a348:	d9001104 	addi	r4,sp,68
   2a34c:	d9400a04 	addi	r5,sp,40
   2a350:	dfc01b15 	stw	ra,108(sp)
   2a354:	d9800f15 	stw	r6,60(sp)
   2a358:	d9c01015 	stw	r7,64(sp)
   2a35c:	ddc01a15 	stw	r23,104(sp)
   2a360:	dd801915 	stw	r22,100(sp)
   2a364:	dd401815 	stw	r21,96(sp)
   2a368:	dd001715 	stw	r20,92(sp)
   2a36c:	dcc01615 	stw	r19,88(sp)
   2a370:	dc801515 	stw	r18,84(sp)
   2a374:	dc401415 	stw	r17,80(sp)
   2a378:	dc001315 	stw	r16,76(sp)
   2a37c:	002b1840 	call	2b184 <__unpack_d>
   2a380:	d9000f04 	addi	r4,sp,60
   2a384:	d9400504 	addi	r5,sp,20
   2a388:	002b1840 	call	2b184 <__unpack_d>
   2a38c:	d8c00a17 	ldw	r3,40(sp)
   2a390:	00800044 	movi	r2,1
   2a394:	10c01136 	bltu	r2,r3,2a3dc <__muldf3+0xa0>
   2a398:	d8c00b17 	ldw	r3,44(sp)
   2a39c:	d8800617 	ldw	r2,24(sp)
   2a3a0:	d9000a04 	addi	r4,sp,40
   2a3a4:	1884c03a 	cmpne	r2,r3,r2
   2a3a8:	d8800b15 	stw	r2,44(sp)
   2a3ac:	002af600 	call	2af60 <__pack_d>
   2a3b0:	dfc01b17 	ldw	ra,108(sp)
   2a3b4:	ddc01a17 	ldw	r23,104(sp)
   2a3b8:	dd801917 	ldw	r22,100(sp)
   2a3bc:	dd401817 	ldw	r21,96(sp)
   2a3c0:	dd001717 	ldw	r20,92(sp)
   2a3c4:	dcc01617 	ldw	r19,88(sp)
   2a3c8:	dc801517 	ldw	r18,84(sp)
   2a3cc:	dc401417 	ldw	r17,80(sp)
   2a3d0:	dc001317 	ldw	r16,76(sp)
   2a3d4:	dec01c04 	addi	sp,sp,112
   2a3d8:	f800283a 	ret
   2a3dc:	d9000517 	ldw	r4,20(sp)
   2a3e0:	11000636 	bltu	r2,r4,2a3fc <__muldf3+0xc0>
   2a3e4:	d8800617 	ldw	r2,24(sp)
   2a3e8:	d8c00b17 	ldw	r3,44(sp)
   2a3ec:	d9000504 	addi	r4,sp,20
   2a3f0:	1884c03a 	cmpne	r2,r3,r2
   2a3f4:	d8800615 	stw	r2,24(sp)
   2a3f8:	003fec06 	br	2a3ac <__muldf3+0x70>
   2a3fc:	00800104 	movi	r2,4
   2a400:	1880051e 	bne	r3,r2,2a418 <__muldf3+0xdc>
   2a404:	00800084 	movi	r2,2
   2a408:	20bfe31e 	bne	r4,r2,2a398 <__muldf3+0x5c>
   2a40c:	010000f4 	movhi	r4,3
   2a410:	213a6d04 	addi	r4,r4,-5708
   2a414:	003fe506 	br	2a3ac <__muldf3+0x70>
   2a418:	2080031e 	bne	r4,r2,2a428 <__muldf3+0xec>
   2a41c:	00800084 	movi	r2,2
   2a420:	18bffa26 	beq	r3,r2,2a40c <__muldf3+0xd0>
   2a424:	003fef06 	br	2a3e4 <__muldf3+0xa8>
   2a428:	00800084 	movi	r2,2
   2a42c:	18bfda26 	beq	r3,r2,2a398 <__muldf3+0x5c>
   2a430:	20bfec26 	beq	r4,r2,2a3e4 <__muldf3+0xa8>
   2a434:	dc000d17 	ldw	r16,52(sp)
   2a438:	dd000817 	ldw	r20,32(sp)
   2a43c:	dc800917 	ldw	r18,36(sp)
   2a440:	8009883a 	mov	r4,r16
   2a444:	000b883a 	mov	r5,zero
   2a448:	a00d883a 	mov	r6,r20
   2a44c:	000f883a 	mov	r7,zero
   2a450:	002ada40 	call	2ada4 <__muldi3>
   2a454:	dc400e17 	ldw	r17,56(sp)
   2a458:	9009883a 	mov	r4,r18
   2a45c:	800d883a 	mov	r6,r16
   2a460:	000b883a 	mov	r5,zero
   2a464:	000f883a 	mov	r7,zero
   2a468:	102f883a 	mov	r23,r2
   2a46c:	1827883a 	mov	r19,r3
   2a470:	002ada40 	call	2ada4 <__muldi3>
   2a474:	900d883a 	mov	r6,r18
   2a478:	8809883a 	mov	r4,r17
   2a47c:	000b883a 	mov	r5,zero
   2a480:	000f883a 	mov	r7,zero
   2a484:	102b883a 	mov	r21,r2
   2a488:	1821883a 	mov	r16,r3
   2a48c:	002ada40 	call	2ada4 <__muldi3>
   2a490:	8809883a 	mov	r4,r17
   2a494:	000b883a 	mov	r5,zero
   2a498:	a00d883a 	mov	r6,r20
   2a49c:	000f883a 	mov	r7,zero
   2a4a0:	102d883a 	mov	r22,r2
   2a4a4:	1825883a 	mov	r18,r3
   2a4a8:	002ada40 	call	2ada4 <__muldi3>
   2a4ac:	154b883a 	add	r5,r2,r21
   2a4b0:	2889803a 	cmpltu	r4,r5,r2
   2a4b4:	1c07883a 	add	r3,r3,r16
   2a4b8:	20c9883a 	add	r4,r4,r3
   2a4bc:	24004b36 	bltu	r4,r16,2a5ec <__muldf3+0x2b0>
   2a4c0:	8100011e 	bne	r16,r4,2a4c8 <__muldf3+0x18c>
   2a4c4:	2d404936 	bltu	r5,r21,2a5ec <__muldf3+0x2b0>
   2a4c8:	0011883a 	mov	r8,zero
   2a4cc:	0007883a 	mov	r3,zero
   2a4d0:	2ccb883a 	add	r5,r5,r19
   2a4d4:	b80d883a 	mov	r6,r23
   2a4d8:	2cc0012e 	bgeu	r5,r19,2a4e0 <__muldf3+0x1a4>
   2a4dc:	02000044 	movi	r8,1
   2a4e0:	258f883a 	add	r7,r4,r22
   2a4e4:	3909803a 	cmpltu	r4,r7,r4
   2a4e8:	da400c17 	ldw	r9,48(sp)
   2a4ec:	2489883a 	add	r4,r4,r18
   2a4f0:	d8800717 	ldw	r2,28(sp)
   2a4f4:	20c9883a 	add	r4,r4,r3
   2a4f8:	da800b17 	ldw	r10,44(sp)
   2a4fc:	d8c00617 	ldw	r3,24(sp)
   2a500:	3a11883a 	add	r8,r7,r8
   2a504:	4885883a 	add	r2,r9,r2
   2a508:	50c6c03a 	cmpne	r3,r10,r3
   2a50c:	41cf803a 	cmpltu	r7,r8,r7
   2a510:	12400104 	addi	r9,r2,4
   2a514:	d8c00115 	stw	r3,4(sp)
   2a518:	3909883a 	add	r4,r7,r4
   2a51c:	da400215 	stw	r9,8(sp)
   2a520:	03480034 	movhi	r13,8192
   2a524:	6b7fffc4 	addi	r13,r13,-1
   2a528:	4007883a 	mov	r3,r8
   2a52c:	6900102e 	bgeu	r13,r4,2a570 <__muldf3+0x234>
   2a530:	10800144 	addi	r2,r2,5
   2a534:	180ed07a 	srli	r7,r3,1
   2a538:	18c0004c 	andi	r3,r3,1
   2a53c:	201097fa 	slli	r8,r4,31
   2a540:	281697fa 	slli	r11,r5,31
   2a544:	2008d07a 	srli	r4,r4,1
   2a548:	3014d07a 	srli	r10,r6,1
   2a54c:	2812d07a 	srli	r9,r5,1
   2a550:	1019883a 	mov	r12,r2
   2a554:	18000226 	beq	r3,zero,2a560 <__muldf3+0x224>
   2a558:	5a8cb03a 	or	r6,r11,r10
   2a55c:	49600034 	orhi	r5,r9,32768
   2a560:	41c6b03a 	or	r3,r8,r7
   2a564:	10800044 	addi	r2,r2,1
   2a568:	693ff236 	bltu	r13,r4,2a534 <__muldf3+0x1f8>
   2a56c:	db000215 	stw	r12,8(sp)
   2a570:	03440034 	movhi	r13,4096
   2a574:	6b7fffc4 	addi	r13,r13,-1
   2a578:	69001336 	bltu	r13,r4,2a5c8 <__muldf3+0x28c>
   2a57c:	d8800217 	ldw	r2,8(sp)
   2a580:	10bfffc4 	addi	r2,r2,-1
   2a584:	18d3883a 	add	r9,r3,r3
   2a588:	48c7803a 	cmpltu	r3,r9,r3
   2a58c:	2109883a 	add	r4,r4,r4
   2a590:	190f883a 	add	r7,r3,r4
   2a594:	3191883a 	add	r8,r6,r6
   2a598:	4197803a 	cmpltu	r11,r8,r6
   2a59c:	2955883a 	add	r10,r5,r5
   2a5a0:	1019883a 	mov	r12,r2
   2a5a4:	4807883a 	mov	r3,r9
   2a5a8:	3809883a 	mov	r4,r7
   2a5ac:	2800010e 	bge	r5,zero,2a5b4 <__muldf3+0x278>
   2a5b0:	48c00054 	ori	r3,r9,1
   2a5b4:	400d883a 	mov	r6,r8
   2a5b8:	5a8b883a 	add	r5,r11,r10
   2a5bc:	10bfffc4 	addi	r2,r2,-1
   2a5c0:	69fff02e 	bgeu	r13,r7,2a584 <__muldf3+0x248>
   2a5c4:	db000215 	stw	r12,8(sp)
   2a5c8:	18803fcc 	andi	r2,r3,255
   2a5cc:	01c02004 	movi	r7,128
   2a5d0:	11c00926 	beq	r2,r7,2a5f8 <__muldf3+0x2bc>
   2a5d4:	008000c4 	movi	r2,3
   2a5d8:	d9000415 	stw	r4,16(sp)
   2a5dc:	d8c00315 	stw	r3,12(sp)
   2a5e0:	d8800015 	stw	r2,0(sp)
   2a5e4:	d809883a 	mov	r4,sp
   2a5e8:	003f7006 	br	2a3ac <__muldf3+0x70>
   2a5ec:	0011883a 	mov	r8,zero
   2a5f0:	00c00044 	movi	r3,1
   2a5f4:	003fb606 	br	2a4d0 <__muldf3+0x194>
   2a5f8:	19c0400c 	andi	r7,r3,256
   2a5fc:	383ff51e 	bne	r7,zero,2a5d4 <__muldf3+0x298>
   2a600:	314ab03a 	or	r5,r6,r5
   2a604:	283ff326 	beq	r5,zero,2a5d4 <__muldf3+0x298>
   2a608:	1885883a 	add	r2,r3,r2
   2a60c:	10cb803a 	cmpltu	r5,r2,r3
   2a610:	00ffc004 	movi	r3,-256
   2a614:	10c6703a 	and	r3,r2,r3
   2a618:	2909883a 	add	r4,r5,r4
   2a61c:	003fed06 	br	2a5d4 <__muldf3+0x298>

0002a620 <__divdf3>:
   2a620:	defff104 	addi	sp,sp,-60
   2a624:	d9000c15 	stw	r4,48(sp)
   2a628:	d9400d15 	stw	r5,52(sp)
   2a62c:	d9000c04 	addi	r4,sp,48
   2a630:	d9400504 	addi	r5,sp,20
   2a634:	dfc00e15 	stw	ra,56(sp)
   2a638:	d9800a15 	stw	r6,40(sp)
   2a63c:	d9c00b15 	stw	r7,44(sp)
   2a640:	002b1840 	call	2b184 <__unpack_d>
   2a644:	d9000a04 	addi	r4,sp,40
   2a648:	d80b883a 	mov	r5,sp
   2a64c:	002b1840 	call	2b184 <__unpack_d>
   2a650:	d8c00517 	ldw	r3,20(sp)
   2a654:	00800044 	movi	r2,1
   2a658:	10c00536 	bltu	r2,r3,2a670 <__divdf3+0x50>
   2a65c:	d9000504 	addi	r4,sp,20
   2a660:	002af600 	call	2af60 <__pack_d>
   2a664:	dfc00e17 	ldw	ra,56(sp)
   2a668:	dec00f04 	addi	sp,sp,60
   2a66c:	f800283a 	ret
   2a670:	d9000017 	ldw	r4,0(sp)
   2a674:	11000536 	bltu	r2,r4,2a68c <__divdf3+0x6c>
   2a678:	d809883a 	mov	r4,sp
   2a67c:	002af600 	call	2af60 <__pack_d>
   2a680:	dfc00e17 	ldw	ra,56(sp)
   2a684:	dec00f04 	addi	sp,sp,60
   2a688:	f800283a 	ret
   2a68c:	d9800617 	ldw	r6,24(sp)
   2a690:	d9400117 	ldw	r5,4(sp)
   2a694:	00800104 	movi	r2,4
   2a698:	314af03a 	xor	r5,r6,r5
   2a69c:	d9400615 	stw	r5,24(sp)
   2a6a0:	18800226 	beq	r3,r2,2a6ac <__divdf3+0x8c>
   2a6a4:	01400084 	movi	r5,2
   2a6a8:	1940041e 	bne	r3,r5,2a6bc <__divdf3+0x9c>
   2a6ac:	193feb1e 	bne	r3,r4,2a65c <__divdf3+0x3c>
   2a6b0:	010000f4 	movhi	r4,3
   2a6b4:	213a6d04 	addi	r4,r4,-5708
   2a6b8:	003fe906 	br	2a660 <__divdf3+0x40>
   2a6bc:	20803326 	beq	r4,r2,2a78c <__divdf3+0x16c>
   2a6c0:	21403726 	beq	r4,r5,2a7a0 <__divdf3+0x180>
   2a6c4:	d8800217 	ldw	r2,8(sp)
   2a6c8:	d9000717 	ldw	r4,28(sp)
   2a6cc:	d8c00917 	ldw	r3,36(sp)
   2a6d0:	da000417 	ldw	r8,16(sp)
   2a6d4:	2089c83a 	sub	r4,r4,r2
   2a6d8:	d9000715 	stw	r4,28(sp)
   2a6dc:	d8800817 	ldw	r2,32(sp)
   2a6e0:	dbc00317 	ldw	r15,12(sp)
   2a6e4:	1a000236 	bltu	r3,r8,2a6f0 <__divdf3+0xd0>
   2a6e8:	40c0081e 	bne	r8,r3,2a70c <__divdf3+0xec>
   2a6ec:	13c0072e 	bgeu	r2,r15,2a70c <__divdf3+0xec>
   2a6f0:	108b883a 	add	r5,r2,r2
   2a6f4:	288d803a 	cmpltu	r6,r5,r2
   2a6f8:	18c7883a 	add	r3,r3,r3
   2a6fc:	213fffc4 	addi	r4,r4,-1
   2a700:	2805883a 	mov	r2,r5
   2a704:	30c7883a 	add	r3,r6,r3
   2a708:	d9000715 	stw	r4,28(sp)
   2a70c:	01400f44 	movi	r5,61
   2a710:	000f883a 	mov	r7,zero
   2a714:	01040034 	movhi	r4,4096
   2a718:	0019883a 	mov	r12,zero
   2a71c:	001b883a 	mov	r13,zero
   2a720:	201697fa 	slli	r11,r4,31
   2a724:	3814d07a 	srli	r10,r7,1
   2a728:	297fffc4 	addi	r5,r5,-1
   2a72c:	1a000936 	bltu	r3,r8,2a754 <__divdf3+0x134>
   2a730:	13cdc83a 	sub	r6,r2,r15
   2a734:	1193803a 	cmpltu	r9,r2,r6
   2a738:	1a1dc83a 	sub	r14,r3,r8
   2a73c:	40c0011e 	bne	r8,r3,2a744 <__divdf3+0x124>
   2a740:	13c00436 	bltu	r2,r15,2a754 <__divdf3+0x134>
   2a744:	3005883a 	mov	r2,r6
   2a748:	7247c83a 	sub	r3,r14,r9
   2a74c:	61d8b03a 	or	r12,r12,r7
   2a750:	691ab03a 	or	r13,r13,r4
   2a754:	108d883a 	add	r6,r2,r2
   2a758:	3093803a 	cmpltu	r9,r6,r2
   2a75c:	18c7883a 	add	r3,r3,r3
   2a760:	5a8eb03a 	or	r7,r11,r10
   2a764:	2008d07a 	srli	r4,r4,1
   2a768:	3005883a 	mov	r2,r6
   2a76c:	48c7883a 	add	r3,r9,r3
   2a770:	283feb1e 	bne	r5,zero,2a720 <__divdf3+0x100>
   2a774:	61003fcc 	andi	r4,r12,255
   2a778:	01402004 	movi	r5,128
   2a77c:	21400b26 	beq	r4,r5,2a7ac <__divdf3+0x18c>
   2a780:	db000815 	stw	r12,32(sp)
   2a784:	db400915 	stw	r13,36(sp)
   2a788:	003fb406 	br	2a65c <__divdf3+0x3c>
   2a78c:	d8000815 	stw	zero,32(sp)
   2a790:	d8000915 	stw	zero,36(sp)
   2a794:	d8000715 	stw	zero,28(sp)
   2a798:	d9000504 	addi	r4,sp,20
   2a79c:	003fb006 	br	2a660 <__divdf3+0x40>
   2a7a0:	d8800515 	stw	r2,20(sp)
   2a7a4:	d9000504 	addi	r4,sp,20
   2a7a8:	003fad06 	br	2a660 <__divdf3+0x40>
   2a7ac:	6140400c 	andi	r5,r12,256
   2a7b0:	283ff31e 	bne	r5,zero,2a780 <__divdf3+0x160>
   2a7b4:	30c4b03a 	or	r2,r6,r3
   2a7b8:	103ff126 	beq	r2,zero,2a780 <__divdf3+0x160>
   2a7bc:	6109883a 	add	r4,r12,r4
   2a7c0:	2305803a 	cmpltu	r2,r4,r12
   2a7c4:	033fc004 	movi	r12,-256
   2a7c8:	2318703a 	and	r12,r4,r12
   2a7cc:	135b883a 	add	r13,r2,r13
   2a7d0:	003feb06 	br	2a780 <__divdf3+0x160>

0002a7d4 <__eqdf2>:
   2a7d4:	defff104 	addi	sp,sp,-60
   2a7d8:	d9000c15 	stw	r4,48(sp)
   2a7dc:	d9400d15 	stw	r5,52(sp)
   2a7e0:	d9000c04 	addi	r4,sp,48
   2a7e4:	d9400504 	addi	r5,sp,20
   2a7e8:	dfc00e15 	stw	ra,56(sp)
   2a7ec:	d9800a15 	stw	r6,40(sp)
   2a7f0:	d9c00b15 	stw	r7,44(sp)
   2a7f4:	002b1840 	call	2b184 <__unpack_d>
   2a7f8:	d9000a04 	addi	r4,sp,40
   2a7fc:	d80b883a 	mov	r5,sp
   2a800:	002b1840 	call	2b184 <__unpack_d>
   2a804:	d8c00517 	ldw	r3,20(sp)
   2a808:	00800044 	movi	r2,1
   2a80c:	10c0052e 	bgeu	r2,r3,2a824 <__eqdf2+0x50>
   2a810:	d8c00017 	ldw	r3,0(sp)
   2a814:	10c0032e 	bgeu	r2,r3,2a824 <__eqdf2+0x50>
   2a818:	d9000504 	addi	r4,sp,20
   2a81c:	d80b883a 	mov	r5,sp
   2a820:	002b2880 	call	2b288 <__fpcmp_parts_d>
   2a824:	dfc00e17 	ldw	ra,56(sp)
   2a828:	dec00f04 	addi	sp,sp,60
   2a82c:	f800283a 	ret

0002a830 <__nedf2>:
   2a830:	defff104 	addi	sp,sp,-60
   2a834:	d9000c15 	stw	r4,48(sp)
   2a838:	d9400d15 	stw	r5,52(sp)
   2a83c:	d9000c04 	addi	r4,sp,48
   2a840:	d9400504 	addi	r5,sp,20
   2a844:	dfc00e15 	stw	ra,56(sp)
   2a848:	d9800a15 	stw	r6,40(sp)
   2a84c:	d9c00b15 	stw	r7,44(sp)
   2a850:	002b1840 	call	2b184 <__unpack_d>
   2a854:	d9000a04 	addi	r4,sp,40
   2a858:	d80b883a 	mov	r5,sp
   2a85c:	002b1840 	call	2b184 <__unpack_d>
   2a860:	d8c00517 	ldw	r3,20(sp)
   2a864:	00800044 	movi	r2,1
   2a868:	10c0052e 	bgeu	r2,r3,2a880 <__nedf2+0x50>
   2a86c:	d8c00017 	ldw	r3,0(sp)
   2a870:	10c0032e 	bgeu	r2,r3,2a880 <__nedf2+0x50>
   2a874:	d9000504 	addi	r4,sp,20
   2a878:	d80b883a 	mov	r5,sp
   2a87c:	002b2880 	call	2b288 <__fpcmp_parts_d>
   2a880:	dfc00e17 	ldw	ra,56(sp)
   2a884:	dec00f04 	addi	sp,sp,60
   2a888:	f800283a 	ret

0002a88c <__gtdf2>:
   2a88c:	defff104 	addi	sp,sp,-60
   2a890:	d9000c15 	stw	r4,48(sp)
   2a894:	d9400d15 	stw	r5,52(sp)
   2a898:	d9000c04 	addi	r4,sp,48
   2a89c:	d9400504 	addi	r5,sp,20
   2a8a0:	dfc00e15 	stw	ra,56(sp)
   2a8a4:	d9800a15 	stw	r6,40(sp)
   2a8a8:	d9c00b15 	stw	r7,44(sp)
   2a8ac:	002b1840 	call	2b184 <__unpack_d>
   2a8b0:	d9000a04 	addi	r4,sp,40
   2a8b4:	d80b883a 	mov	r5,sp
   2a8b8:	002b1840 	call	2b184 <__unpack_d>
   2a8bc:	d8c00517 	ldw	r3,20(sp)
   2a8c0:	00800044 	movi	r2,1
   2a8c4:	10c0082e 	bgeu	r2,r3,2a8e8 <__gtdf2+0x5c>
   2a8c8:	d8c00017 	ldw	r3,0(sp)
   2a8cc:	10c0062e 	bgeu	r2,r3,2a8e8 <__gtdf2+0x5c>
   2a8d0:	d9000504 	addi	r4,sp,20
   2a8d4:	d80b883a 	mov	r5,sp
   2a8d8:	002b2880 	call	2b288 <__fpcmp_parts_d>
   2a8dc:	dfc00e17 	ldw	ra,56(sp)
   2a8e0:	dec00f04 	addi	sp,sp,60
   2a8e4:	f800283a 	ret
   2a8e8:	00bfffc4 	movi	r2,-1
   2a8ec:	003ffb06 	br	2a8dc <__gtdf2+0x50>

0002a8f0 <__gedf2>:
   2a8f0:	defff104 	addi	sp,sp,-60
   2a8f4:	d9000c15 	stw	r4,48(sp)
   2a8f8:	d9400d15 	stw	r5,52(sp)
   2a8fc:	d9000c04 	addi	r4,sp,48
   2a900:	d9400504 	addi	r5,sp,20
   2a904:	dfc00e15 	stw	ra,56(sp)
   2a908:	d9800a15 	stw	r6,40(sp)
   2a90c:	d9c00b15 	stw	r7,44(sp)
   2a910:	002b1840 	call	2b184 <__unpack_d>
   2a914:	d9000a04 	addi	r4,sp,40
   2a918:	d80b883a 	mov	r5,sp
   2a91c:	002b1840 	call	2b184 <__unpack_d>
   2a920:	d8c00517 	ldw	r3,20(sp)
   2a924:	00800044 	movi	r2,1
   2a928:	10c0082e 	bgeu	r2,r3,2a94c <__gedf2+0x5c>
   2a92c:	d8c00017 	ldw	r3,0(sp)
   2a930:	10c0062e 	bgeu	r2,r3,2a94c <__gedf2+0x5c>
   2a934:	d9000504 	addi	r4,sp,20
   2a938:	d80b883a 	mov	r5,sp
   2a93c:	002b2880 	call	2b288 <__fpcmp_parts_d>
   2a940:	dfc00e17 	ldw	ra,56(sp)
   2a944:	dec00f04 	addi	sp,sp,60
   2a948:	f800283a 	ret
   2a94c:	00bfffc4 	movi	r2,-1
   2a950:	003ffb06 	br	2a940 <__gedf2+0x50>

0002a954 <__ltdf2>:
   2a954:	defff104 	addi	sp,sp,-60
   2a958:	d9000c15 	stw	r4,48(sp)
   2a95c:	d9400d15 	stw	r5,52(sp)
   2a960:	d9000c04 	addi	r4,sp,48
   2a964:	d9400504 	addi	r5,sp,20
   2a968:	dfc00e15 	stw	ra,56(sp)
   2a96c:	d9800a15 	stw	r6,40(sp)
   2a970:	d9c00b15 	stw	r7,44(sp)
   2a974:	002b1840 	call	2b184 <__unpack_d>
   2a978:	d9000a04 	addi	r4,sp,40
   2a97c:	d80b883a 	mov	r5,sp
   2a980:	002b1840 	call	2b184 <__unpack_d>
   2a984:	d8c00517 	ldw	r3,20(sp)
   2a988:	00800044 	movi	r2,1
   2a98c:	10c0052e 	bgeu	r2,r3,2a9a4 <__ltdf2+0x50>
   2a990:	d8c00017 	ldw	r3,0(sp)
   2a994:	10c0032e 	bgeu	r2,r3,2a9a4 <__ltdf2+0x50>
   2a998:	d9000504 	addi	r4,sp,20
   2a99c:	d80b883a 	mov	r5,sp
   2a9a0:	002b2880 	call	2b288 <__fpcmp_parts_d>
   2a9a4:	dfc00e17 	ldw	ra,56(sp)
   2a9a8:	dec00f04 	addi	sp,sp,60
   2a9ac:	f800283a 	ret

0002a9b0 <__floatsidf>:
   2a9b0:	2004d7fa 	srli	r2,r4,31
   2a9b4:	defff904 	addi	sp,sp,-28
   2a9b8:	00c000c4 	movi	r3,3
   2a9bc:	dfc00615 	stw	ra,24(sp)
   2a9c0:	dc000515 	stw	r16,20(sp)
   2a9c4:	d8c00015 	stw	r3,0(sp)
   2a9c8:	d8800115 	stw	r2,4(sp)
   2a9cc:	2000081e 	bne	r4,zero,2a9f0 <__floatsidf+0x40>
   2a9d0:	00800084 	movi	r2,2
   2a9d4:	d8800015 	stw	r2,0(sp)
   2a9d8:	d809883a 	mov	r4,sp
   2a9dc:	002af600 	call	2af60 <__pack_d>
   2a9e0:	dfc00617 	ldw	ra,24(sp)
   2a9e4:	dc000517 	ldw	r16,20(sp)
   2a9e8:	dec00704 	addi	sp,sp,28
   2a9ec:	f800283a 	ret
   2a9f0:	00c00f04 	movi	r3,60
   2a9f4:	d8c00215 	stw	r3,8(sp)
   2a9f8:	10000f1e 	bne	r2,zero,2aa38 <__floatsidf+0x88>
   2a9fc:	2021883a 	mov	r16,r4
   2aa00:	8009883a 	mov	r4,r16
   2aa04:	002aeb40 	call	2aeb4 <__clzsi2>
   2aa08:	11000744 	addi	r4,r2,29
   2aa0c:	0100110e 	bge	zero,r4,2aa54 <__floatsidf+0xa4>
   2aa10:	10ffff44 	addi	r3,r2,-3
   2aa14:	18001216 	blt	r3,zero,2aa60 <__floatsidf+0xb0>
   2aa18:	80c6983a 	sll	r3,r16,r3
   2aa1c:	0009883a 	mov	r4,zero
   2aa20:	014007c4 	movi	r5,31
   2aa24:	2885c83a 	sub	r2,r5,r2
   2aa28:	d9000315 	stw	r4,12(sp)
   2aa2c:	d8c00415 	stw	r3,16(sp)
   2aa30:	d8800215 	stw	r2,8(sp)
   2aa34:	003fe806 	br	2a9d8 <__floatsidf+0x28>
   2aa38:	00a00034 	movhi	r2,32768
   2aa3c:	20800e26 	beq	r4,r2,2aa78 <__floatsidf+0xc8>
   2aa40:	0121c83a 	sub	r16,zero,r4
   2aa44:	8009883a 	mov	r4,r16
   2aa48:	002aeb40 	call	2aeb4 <__clzsi2>
   2aa4c:	11000744 	addi	r4,r2,29
   2aa50:	013fef16 	blt	zero,r4,2aa10 <__floatsidf+0x60>
   2aa54:	dc000315 	stw	r16,12(sp)
   2aa58:	d8000415 	stw	zero,16(sp)
   2aa5c:	003fde06 	br	2a9d8 <__floatsidf+0x28>
   2aa60:	800ad07a 	srli	r5,r16,1
   2aa64:	00c007c4 	movi	r3,31
   2aa68:	1907c83a 	sub	r3,r3,r4
   2aa6c:	28c6d83a 	srl	r3,r5,r3
   2aa70:	8108983a 	sll	r4,r16,r4
   2aa74:	003fea06 	br	2aa20 <__floatsidf+0x70>
   2aa78:	0005883a 	mov	r2,zero
   2aa7c:	00f07834 	movhi	r3,49632
   2aa80:	003fd706 	br	2a9e0 <__floatsidf+0x30>

0002aa84 <__fixdfsi>:
   2aa84:	defff804 	addi	sp,sp,-32
   2aa88:	d9000515 	stw	r4,20(sp)
   2aa8c:	d9400615 	stw	r5,24(sp)
   2aa90:	d9000504 	addi	r4,sp,20
   2aa94:	d80b883a 	mov	r5,sp
   2aa98:	dfc00715 	stw	ra,28(sp)
   2aa9c:	002b1840 	call	2b184 <__unpack_d>
   2aaa0:	d8800017 	ldw	r2,0(sp)
   2aaa4:	00c00084 	movi	r3,2
   2aaa8:	10c01c26 	beq	r2,r3,2ab1c <__fixdfsi+0x98>
   2aaac:	00c00044 	movi	r3,1
   2aab0:	18801a2e 	bgeu	r3,r2,2ab1c <__fixdfsi+0x98>
   2aab4:	00c00104 	movi	r3,4
   2aab8:	10c01126 	beq	r2,r3,2ab00 <__fixdfsi+0x7c>
   2aabc:	d8800217 	ldw	r2,8(sp)
   2aac0:	10001616 	blt	r2,zero,2ab1c <__fixdfsi+0x98>
   2aac4:	00c00784 	movi	r3,30
   2aac8:	18800d16 	blt	r3,r2,2ab00 <__fixdfsi+0x7c>
   2aacc:	00c00f04 	movi	r3,60
   2aad0:	1885c83a 	sub	r2,r3,r2
   2aad4:	10fff804 	addi	r3,r2,-32
   2aad8:	d9400317 	ldw	r5,12(sp)
   2aadc:	d9000417 	ldw	r4,16(sp)
   2aae0:	18001616 	blt	r3,zero,2ab3c <__fixdfsi+0xb8>
   2aae4:	20c4d83a 	srl	r2,r4,r3
   2aae8:	d8c00117 	ldw	r3,4(sp)
   2aaec:	18000126 	beq	r3,zero,2aaf4 <__fixdfsi+0x70>
   2aaf0:	0085c83a 	sub	r2,zero,r2
   2aaf4:	dfc00717 	ldw	ra,28(sp)
   2aaf8:	dec00804 	addi	sp,sp,32
   2aafc:	f800283a 	ret
   2ab00:	d8800117 	ldw	r2,4(sp)
   2ab04:	1000091e 	bne	r2,zero,2ab2c <__fixdfsi+0xa8>
   2ab08:	00a00034 	movhi	r2,32768
   2ab0c:	10bfffc4 	addi	r2,r2,-1
   2ab10:	dfc00717 	ldw	ra,28(sp)
   2ab14:	dec00804 	addi	sp,sp,32
   2ab18:	f800283a 	ret
   2ab1c:	0005883a 	mov	r2,zero
   2ab20:	dfc00717 	ldw	ra,28(sp)
   2ab24:	dec00804 	addi	sp,sp,32
   2ab28:	f800283a 	ret
   2ab2c:	00a00034 	movhi	r2,32768
   2ab30:	dfc00717 	ldw	ra,28(sp)
   2ab34:	dec00804 	addi	sp,sp,32
   2ab38:	f800283a 	ret
   2ab3c:	2008907a 	slli	r4,r4,1
   2ab40:	018007c4 	movi	r6,31
   2ab44:	308dc83a 	sub	r6,r6,r2
   2ab48:	2188983a 	sll	r4,r4,r6
   2ab4c:	2884d83a 	srl	r2,r5,r2
   2ab50:	2084b03a 	or	r2,r4,r2
   2ab54:	003fe406 	br	2aae8 <__fixdfsi+0x64>

0002ab58 <__floatunsidf>:
   2ab58:	defff904 	addi	sp,sp,-28
   2ab5c:	dc000515 	stw	r16,20(sp)
   2ab60:	dfc00615 	stw	ra,24(sp)
   2ab64:	d8000115 	stw	zero,4(sp)
   2ab68:	2021883a 	mov	r16,r4
   2ab6c:	20001726 	beq	r4,zero,2abcc <__floatunsidf+0x74>
   2ab70:	008000c4 	movi	r2,3
   2ab74:	d8800015 	stw	r2,0(sp)
   2ab78:	00800f04 	movi	r2,60
   2ab7c:	d8800215 	stw	r2,8(sp)
   2ab80:	002aeb40 	call	2aeb4 <__clzsi2>
   2ab84:	10c00744 	addi	r3,r2,29
   2ab88:	18001816 	blt	r3,zero,2abec <__floatunsidf+0x94>
   2ab8c:	18002d26 	beq	r3,zero,2ac44 <__floatunsidf+0xec>
   2ab90:	113fff44 	addi	r4,r2,-3
   2ab94:	20002e16 	blt	r4,zero,2ac50 <__floatunsidf+0xf8>
   2ab98:	8108983a 	sll	r4,r16,r4
   2ab9c:	0021883a 	mov	r16,zero
   2aba0:	014007c4 	movi	r5,31
   2aba4:	2885c83a 	sub	r2,r5,r2
   2aba8:	dc000315 	stw	r16,12(sp)
   2abac:	d9000415 	stw	r4,16(sp)
   2abb0:	d8800215 	stw	r2,8(sp)
   2abb4:	d809883a 	mov	r4,sp
   2abb8:	002af600 	call	2af60 <__pack_d>
   2abbc:	dfc00617 	ldw	ra,24(sp)
   2abc0:	dc000517 	ldw	r16,20(sp)
   2abc4:	dec00704 	addi	sp,sp,28
   2abc8:	f800283a 	ret
   2abcc:	00800084 	movi	r2,2
   2abd0:	d809883a 	mov	r4,sp
   2abd4:	d8800015 	stw	r2,0(sp)
   2abd8:	002af600 	call	2af60 <__pack_d>
   2abdc:	dfc00617 	ldw	ra,24(sp)
   2abe0:	dc000517 	ldw	r16,20(sp)
   2abe4:	dec00704 	addi	sp,sp,28
   2abe8:	f800283a 	ret
   2abec:	00c7c83a 	sub	r3,zero,r3
   2abf0:	193ff804 	addi	r4,r3,-32
   2abf4:	20001c16 	blt	r4,zero,2ac68 <__floatunsidf+0x110>
   2abf8:	000b883a 	mov	r5,zero
   2abfc:	2009d7fa 	srai	r4,r4,31
   2ac00:	80c6d83a 	srl	r3,r16,r3
   2ac04:	297fffc4 	addi	r5,r5,-1
   2ac08:	2c20703a 	and	r16,r5,r16
   2ac0c:	8020c03a 	cmpne	r16,r16,zero
   2ac10:	1906703a 	and	r3,r3,r4
   2ac14:	010007c4 	movi	r4,31
   2ac18:	80c6b03a 	or	r3,r16,r3
   2ac1c:	2085c83a 	sub	r2,r4,r2
   2ac20:	d809883a 	mov	r4,sp
   2ac24:	d8c00315 	stw	r3,12(sp)
   2ac28:	d8000415 	stw	zero,16(sp)
   2ac2c:	d8800215 	stw	r2,8(sp)
   2ac30:	002af600 	call	2af60 <__pack_d>
   2ac34:	dfc00617 	ldw	ra,24(sp)
   2ac38:	dc000517 	ldw	r16,20(sp)
   2ac3c:	dec00704 	addi	sp,sp,28
   2ac40:	f800283a 	ret
   2ac44:	dc000315 	stw	r16,12(sp)
   2ac48:	d8000415 	stw	zero,16(sp)
   2ac4c:	003fd906 	br	2abb4 <__floatunsidf+0x5c>
   2ac50:	800ad07a 	srli	r5,r16,1
   2ac54:	010007c4 	movi	r4,31
   2ac58:	20c9c83a 	sub	r4,r4,r3
   2ac5c:	2908d83a 	srl	r4,r5,r4
   2ac60:	80e0983a 	sll	r16,r16,r3
   2ac64:	003fce06 	br	2aba0 <__floatunsidf+0x48>
   2ac68:	01400044 	movi	r5,1
   2ac6c:	28ca983a 	sll	r5,r5,r3
   2ac70:	003fe206 	br	2abfc <__floatunsidf+0xa4>

0002ac74 <udivmodsi4>:
   2ac74:	2005883a 	mov	r2,r4
   2ac78:	2900182e 	bgeu	r5,r4,2acdc <udivmodsi4+0x68>
   2ac7c:	28001716 	blt	r5,zero,2acdc <udivmodsi4+0x68>
   2ac80:	01000804 	movi	r4,32
   2ac84:	00c00044 	movi	r3,1
   2ac88:	00000206 	br	2ac94 <udivmodsi4+0x20>
   2ac8c:	20001126 	beq	r4,zero,2acd4 <udivmodsi4+0x60>
   2ac90:	28000516 	blt	r5,zero,2aca8 <udivmodsi4+0x34>
   2ac94:	294b883a 	add	r5,r5,r5
   2ac98:	213fffc4 	addi	r4,r4,-1
   2ac9c:	18c7883a 	add	r3,r3,r3
   2aca0:	28bffa36 	bltu	r5,r2,2ac8c <udivmodsi4+0x18>
   2aca4:	18000b26 	beq	r3,zero,2acd4 <udivmodsi4+0x60>
   2aca8:	0009883a 	mov	r4,zero
   2acac:	11400236 	bltu	r2,r5,2acb8 <udivmodsi4+0x44>
   2acb0:	1145c83a 	sub	r2,r2,r5
   2acb4:	20c8b03a 	or	r4,r4,r3
   2acb8:	1806d07a 	srli	r3,r3,1
   2acbc:	280ad07a 	srli	r5,r5,1
   2acc0:	183ffa1e 	bne	r3,zero,2acac <udivmodsi4+0x38>
   2acc4:	3000021e 	bne	r6,zero,2acd0 <udivmodsi4+0x5c>
   2acc8:	2005883a 	mov	r2,r4
   2accc:	f800283a 	ret
   2acd0:	f800283a 	ret
   2acd4:	0009883a 	mov	r4,zero
   2acd8:	003ffa06 	br	2acc4 <udivmodsi4+0x50>
   2acdc:	00c00044 	movi	r3,1
   2ace0:	0009883a 	mov	r4,zero
   2ace4:	003ff106 	br	2acac <udivmodsi4+0x38>

0002ace8 <__divsi3>:
   2ace8:	defffe04 	addi	sp,sp,-8
   2acec:	dfc00115 	stw	ra,4(sp)
   2acf0:	dc000015 	stw	r16,0(sp)
   2acf4:	20000a16 	blt	r4,zero,2ad20 <__divsi3+0x38>
   2acf8:	0021883a 	mov	r16,zero
   2acfc:	28000b16 	blt	r5,zero,2ad2c <__divsi3+0x44>
   2ad00:	000d883a 	mov	r6,zero
   2ad04:	002ac740 	call	2ac74 <udivmodsi4>
   2ad08:	80000126 	beq	r16,zero,2ad10 <__divsi3+0x28>
   2ad0c:	0085c83a 	sub	r2,zero,r2
   2ad10:	dfc00117 	ldw	ra,4(sp)
   2ad14:	dc000017 	ldw	r16,0(sp)
   2ad18:	dec00204 	addi	sp,sp,8
   2ad1c:	f800283a 	ret
   2ad20:	0109c83a 	sub	r4,zero,r4
   2ad24:	04000044 	movi	r16,1
   2ad28:	283ff50e 	bge	r5,zero,2ad00 <__divsi3+0x18>
   2ad2c:	014bc83a 	sub	r5,zero,r5
   2ad30:	8400005c 	xori	r16,r16,1
   2ad34:	003ff206 	br	2ad00 <__divsi3+0x18>

0002ad38 <__modsi3>:
   2ad38:	deffff04 	addi	sp,sp,-4
   2ad3c:	dfc00015 	stw	ra,0(sp)
   2ad40:	20000516 	blt	r4,zero,2ad58 <__modsi3+0x20>
   2ad44:	28000c16 	blt	r5,zero,2ad78 <__modsi3+0x40>
   2ad48:	01800044 	movi	r6,1
   2ad4c:	dfc00017 	ldw	ra,0(sp)
   2ad50:	dec00104 	addi	sp,sp,4
   2ad54:	002ac741 	jmpi	2ac74 <udivmodsi4>
   2ad58:	0109c83a 	sub	r4,zero,r4
   2ad5c:	28000b16 	blt	r5,zero,2ad8c <__modsi3+0x54>
   2ad60:	01800044 	movi	r6,1
   2ad64:	002ac740 	call	2ac74 <udivmodsi4>
   2ad68:	0085c83a 	sub	r2,zero,r2
   2ad6c:	dfc00017 	ldw	ra,0(sp)
   2ad70:	dec00104 	addi	sp,sp,4
   2ad74:	f800283a 	ret
   2ad78:	014bc83a 	sub	r5,zero,r5
   2ad7c:	01800044 	movi	r6,1
   2ad80:	dfc00017 	ldw	ra,0(sp)
   2ad84:	dec00104 	addi	sp,sp,4
   2ad88:	002ac741 	jmpi	2ac74 <udivmodsi4>
   2ad8c:	014bc83a 	sub	r5,zero,r5
   2ad90:	003ff306 	br	2ad60 <__modsi3+0x28>

0002ad94 <__udivsi3>:
   2ad94:	000d883a 	mov	r6,zero
   2ad98:	002ac741 	jmpi	2ac74 <udivmodsi4>

0002ad9c <__umodsi3>:
   2ad9c:	01800044 	movi	r6,1
   2ada0:	002ac741 	jmpi	2ac74 <udivmodsi4>

0002ada4 <__muldi3>:
   2ada4:	defff604 	addi	sp,sp,-40
   2ada8:	dd400515 	stw	r21,20(sp)
   2adac:	dd000415 	stw	r20,16(sp)
   2adb0:	257fffcc 	andi	r21,r4,65535
   2adb4:	353fffcc 	andi	r20,r6,65535
   2adb8:	dcc00315 	stw	r19,12(sp)
   2adbc:	3026d43a 	srli	r19,r6,16
   2adc0:	dd800615 	stw	r22,24(sp)
   2adc4:	dc800215 	stw	r18,8(sp)
   2adc8:	dc400115 	stw	r17,4(sp)
   2adcc:	2024d43a 	srli	r18,r4,16
   2add0:	2023883a 	mov	r17,r4
   2add4:	282d883a 	mov	r22,r5
   2add8:	a009883a 	mov	r4,r20
   2addc:	a80b883a 	mov	r5,r21
   2ade0:	dfc00915 	stw	ra,36(sp)
   2ade4:	df000815 	stw	fp,32(sp)
   2ade8:	ddc00715 	stw	r23,28(sp)
   2adec:	3839883a 	mov	fp,r7
   2adf0:	dc000015 	stw	r16,0(sp)
   2adf4:	3021883a 	mov	r16,r6
   2adf8:	00210140 	call	21014 <__mulsi3>
   2adfc:	a80b883a 	mov	r5,r21
   2ae00:	9809883a 	mov	r4,r19
   2ae04:	102f883a 	mov	r23,r2
   2ae08:	00210140 	call	21014 <__mulsi3>
   2ae0c:	a009883a 	mov	r4,r20
   2ae10:	900b883a 	mov	r5,r18
   2ae14:	102b883a 	mov	r21,r2
   2ae18:	00210140 	call	21014 <__mulsi3>
   2ae1c:	9809883a 	mov	r4,r19
   2ae20:	900b883a 	mov	r5,r18
   2ae24:	1029883a 	mov	r20,r2
   2ae28:	00210140 	call	21014 <__mulsi3>
   2ae2c:	1007883a 	mov	r3,r2
   2ae30:	b804d43a 	srli	r2,r23,16
   2ae34:	a549883a 	add	r4,r20,r21
   2ae38:	2089883a 	add	r4,r4,r2
   2ae3c:	2500022e 	bgeu	r4,r20,2ae48 <__muldi3+0xa4>
   2ae40:	00800074 	movhi	r2,1
   2ae44:	1887883a 	add	r3,r3,r2
   2ae48:	200cd43a 	srli	r6,r4,16
   2ae4c:	2004943a 	slli	r2,r4,16
   2ae50:	e00b883a 	mov	r5,fp
   2ae54:	8809883a 	mov	r4,r17
   2ae58:	bdffffcc 	andi	r23,r23,65535
   2ae5c:	19a3883a 	add	r17,r3,r6
   2ae60:	15ef883a 	add	r23,r2,r23
   2ae64:	00210140 	call	21014 <__mulsi3>
   2ae68:	8009883a 	mov	r4,r16
   2ae6c:	b00b883a 	mov	r5,r22
   2ae70:	1025883a 	mov	r18,r2
   2ae74:	00210140 	call	21014 <__mulsi3>
   2ae78:	9085883a 	add	r2,r18,r2
   2ae7c:	1447883a 	add	r3,r2,r17
   2ae80:	b805883a 	mov	r2,r23
   2ae84:	dfc00917 	ldw	ra,36(sp)
   2ae88:	df000817 	ldw	fp,32(sp)
   2ae8c:	ddc00717 	ldw	r23,28(sp)
   2ae90:	dd800617 	ldw	r22,24(sp)
   2ae94:	dd400517 	ldw	r21,20(sp)
   2ae98:	dd000417 	ldw	r20,16(sp)
   2ae9c:	dcc00317 	ldw	r19,12(sp)
   2aea0:	dc800217 	ldw	r18,8(sp)
   2aea4:	dc400117 	ldw	r17,4(sp)
   2aea8:	dc000017 	ldw	r16,0(sp)
   2aeac:	dec00a04 	addi	sp,sp,40
   2aeb0:	f800283a 	ret

0002aeb4 <__clzsi2>:
   2aeb4:	00bfffd4 	movui	r2,65535
   2aeb8:	11000b36 	bltu	r2,r4,2aee8 <__clzsi2+0x34>
   2aebc:	00803fc4 	movi	r2,255
   2aec0:	11001e2e 	bgeu	r2,r4,2af3c <__clzsi2+0x88>
   2aec4:	00c00204 	movi	r3,8
   2aec8:	20c8d83a 	srl	r4,r4,r3
   2aecc:	00c000f4 	movhi	r3,3
   2aed0:	18fa7204 	addi	r3,r3,-5688
   2aed4:	00800604 	movi	r2,24
   2aed8:	1909883a 	add	r4,r3,r4
   2aedc:	20c00003 	ldbu	r3,0(r4)
   2aee0:	10c5c83a 	sub	r2,r2,r3
   2aee4:	f800283a 	ret
   2aee8:	00804034 	movhi	r2,256
   2aeec:	10bfffc4 	addi	r2,r2,-1
   2aef0:	11000936 	bltu	r2,r4,2af18 <__clzsi2+0x64>
   2aef4:	00800404 	movi	r2,16
   2aef8:	1007883a 	mov	r3,r2
   2aefc:	20c8d83a 	srl	r4,r4,r3
   2af00:	00c000f4 	movhi	r3,3
   2af04:	18fa7204 	addi	r3,r3,-5688
   2af08:	1909883a 	add	r4,r3,r4
   2af0c:	20c00003 	ldbu	r3,0(r4)
   2af10:	10c5c83a 	sub	r2,r2,r3
   2af14:	f800283a 	ret
   2af18:	00c00604 	movi	r3,24
   2af1c:	20c8d83a 	srl	r4,r4,r3
   2af20:	00c000f4 	movhi	r3,3
   2af24:	18fa7204 	addi	r3,r3,-5688
   2af28:	00800204 	movi	r2,8
   2af2c:	1909883a 	add	r4,r3,r4
   2af30:	20c00003 	ldbu	r3,0(r4)
   2af34:	10c5c83a 	sub	r2,r2,r3
   2af38:	f800283a 	ret
   2af3c:	0007883a 	mov	r3,zero
   2af40:	20c8d83a 	srl	r4,r4,r3
   2af44:	00c000f4 	movhi	r3,3
   2af48:	18fa7204 	addi	r3,r3,-5688
   2af4c:	00800804 	movi	r2,32
   2af50:	1909883a 	add	r4,r3,r4
   2af54:	20c00003 	ldbu	r3,0(r4)
   2af58:	10c5c83a 	sub	r2,r2,r3
   2af5c:	f800283a 	ret

0002af60 <__pack_d>:
   2af60:	20800017 	ldw	r2,0(r4)
   2af64:	defff804 	addi	sp,sp,-32
   2af68:	dcc00315 	stw	r19,12(sp)
   2af6c:	dc800215 	stw	r18,8(sp)
   2af70:	dfc00715 	stw	ra,28(sp)
   2af74:	dd800615 	stw	r22,24(sp)
   2af78:	dd400515 	stw	r21,20(sp)
   2af7c:	dd000415 	stw	r20,16(sp)
   2af80:	dc400115 	stw	r17,4(sp)
   2af84:	dc000015 	stw	r16,0(sp)
   2af88:	04800044 	movi	r18,1
   2af8c:	24400317 	ldw	r17,12(r4)
   2af90:	24000417 	ldw	r16,16(r4)
   2af94:	24c00117 	ldw	r19,4(r4)
   2af98:	9080422e 	bgeu	r18,r2,2b0a4 <__pack_d+0x144>
   2af9c:	00c00104 	movi	r3,4
   2afa0:	10c03c26 	beq	r2,r3,2b094 <__pack_d+0x134>
   2afa4:	00c00084 	movi	r3,2
   2afa8:	10c01926 	beq	r2,r3,2b010 <__pack_d+0xb0>
   2afac:	8c04b03a 	or	r2,r17,r16
   2afb0:	10001726 	beq	r2,zero,2b010 <__pack_d+0xb0>
   2afb4:	21000217 	ldw	r4,8(r4)
   2afb8:	00bf0084 	movi	r2,-1022
   2afbc:	20804016 	blt	r4,r2,2b0c0 <__pack_d+0x160>
   2afc0:	0080ffc4 	movi	r2,1023
   2afc4:	11003316 	blt	r2,r4,2b094 <__pack_d+0x134>
   2afc8:	88803fcc 	andi	r2,r17,255
   2afcc:	00c02004 	movi	r3,128
   2afd0:	10c02926 	beq	r2,r3,2b078 <__pack_d+0x118>
   2afd4:	88801fc4 	addi	r2,r17,127
   2afd8:	1463803a 	cmpltu	r17,r2,r17
   2afdc:	8c21883a 	add	r16,r17,r16
   2afe0:	1023883a 	mov	r17,r2
   2afe4:	00880034 	movhi	r2,8192
   2afe8:	10bfffc4 	addi	r2,r2,-1
   2afec:	14001c36 	bltu	r2,r16,2b060 <__pack_d+0x100>
   2aff0:	2100ffc4 	addi	r4,r4,1023
   2aff4:	8006963a 	slli	r3,r16,24
   2aff8:	8804d23a 	srli	r2,r17,8
   2affc:	8020913a 	slli	r16,r16,4
   2b000:	2101ffcc 	andi	r4,r4,2047
   2b004:	1884b03a 	or	r2,r3,r2
   2b008:	8020d33a 	srli	r16,r16,12
   2b00c:	00000306 	br	2b01c <__pack_d+0xbc>
   2b010:	0009883a 	mov	r4,zero
   2b014:	0005883a 	mov	r2,zero
   2b018:	0021883a 	mov	r16,zero
   2b01c:	2008953a 	slli	r4,r4,20
   2b020:	982697fa 	slli	r19,r19,31
   2b024:	00c00434 	movhi	r3,16
   2b028:	18ffffc4 	addi	r3,r3,-1
   2b02c:	80e0703a 	and	r16,r16,r3
   2b030:	8106b03a 	or	r3,r16,r4
   2b034:	1cc6b03a 	or	r3,r3,r19
   2b038:	dfc00717 	ldw	ra,28(sp)
   2b03c:	dd800617 	ldw	r22,24(sp)
   2b040:	dd400517 	ldw	r21,20(sp)
   2b044:	dd000417 	ldw	r20,16(sp)
   2b048:	dcc00317 	ldw	r19,12(sp)
   2b04c:	dc800217 	ldw	r18,8(sp)
   2b050:	dc400117 	ldw	r17,4(sp)
   2b054:	dc000017 	ldw	r16,0(sp)
   2b058:	dec00804 	addi	sp,sp,32
   2b05c:	f800283a 	ret
   2b060:	800697fa 	slli	r3,r16,31
   2b064:	8804d07a 	srli	r2,r17,1
   2b068:	21010004 	addi	r4,r4,1024
   2b06c:	8020d07a 	srli	r16,r16,1
   2b070:	18a2b03a 	or	r17,r3,r2
   2b074:	003fdf06 	br	2aff4 <__pack_d+0x94>
   2b078:	88c0400c 	andi	r3,r17,256
   2b07c:	183fd926 	beq	r3,zero,2afe4 <__pack_d+0x84>
   2b080:	8885883a 	add	r2,r17,r2
   2b084:	1463803a 	cmpltu	r17,r2,r17
   2b088:	8c21883a 	add	r16,r17,r16
   2b08c:	1023883a 	mov	r17,r2
   2b090:	003fd406 	br	2afe4 <__pack_d+0x84>
   2b094:	0101ffc4 	movi	r4,2047
   2b098:	0005883a 	mov	r2,zero
   2b09c:	0021883a 	mov	r16,zero
   2b0a0:	003fde06 	br	2b01c <__pack_d+0xbc>
   2b0a4:	84000234 	orhi	r16,r16,8
   2b0a8:	00c00434 	movhi	r3,16
   2b0ac:	18ffffc4 	addi	r3,r3,-1
   2b0b0:	8805883a 	mov	r2,r17
   2b0b4:	80e0703a 	and	r16,r16,r3
   2b0b8:	0101ffc4 	movi	r4,2047
   2b0bc:	003fd706 	br	2b01c <__pack_d+0xbc>
   2b0c0:	1129c83a 	sub	r20,r2,r4
   2b0c4:	00800e04 	movi	r2,56
   2b0c8:	15002716 	blt	r2,r20,2b168 <__pack_d+0x208>
   2b0cc:	800b883a 	mov	r5,r16
   2b0d0:	a00d883a 	mov	r6,r20
   2b0d4:	8809883a 	mov	r4,r17
   2b0d8:	002b3580 	call	2b358 <__lshrdi3>
   2b0dc:	9009883a 	mov	r4,r18
   2b0e0:	000b883a 	mov	r5,zero
   2b0e4:	a00d883a 	mov	r6,r20
   2b0e8:	102d883a 	mov	r22,r2
   2b0ec:	182b883a 	mov	r21,r3
   2b0f0:	002b39c0 	call	2b39c <__ashldi3>
   2b0f4:	1009003a 	cmpeq	r4,r2,zero
   2b0f8:	1907c83a 	sub	r3,r3,r4
   2b0fc:	10bfffc4 	addi	r2,r2,-1
   2b100:	1c20703a 	and	r16,r3,r16
   2b104:	1444703a 	and	r2,r2,r17
   2b108:	1404b03a 	or	r2,r2,r16
   2b10c:	1004c03a 	cmpne	r2,r2,zero
   2b110:	1584b03a 	or	r2,r2,r22
   2b114:	11003fcc 	andi	r4,r2,255
   2b118:	01402004 	movi	r5,128
   2b11c:	a807883a 	mov	r3,r21
   2b120:	2140131e 	bne	r4,r5,2b170 <__pack_d+0x210>
   2b124:	1140400c 	andi	r5,r2,256
   2b128:	28000426 	beq	r5,zero,2b13c <__pack_d+0x1dc>
   2b12c:	1109883a 	add	r4,r2,r4
   2b130:	2085803a 	cmpltu	r2,r4,r2
   2b134:	1547883a 	add	r3,r2,r21
   2b138:	2005883a 	mov	r2,r4
   2b13c:	1808963a 	slli	r4,r3,24
   2b140:	1004d23a 	srli	r2,r2,8
   2b144:	1820913a 	slli	r16,r3,4
   2b148:	01440034 	movhi	r5,4096
   2b14c:	297fffc4 	addi	r5,r5,-1
   2b150:	2084b03a 	or	r2,r4,r2
   2b154:	8020d33a 	srli	r16,r16,12
   2b158:	01000044 	movi	r4,1
   2b15c:	28ffaf36 	bltu	r5,r3,2b01c <__pack_d+0xbc>
   2b160:	0009883a 	mov	r4,zero
   2b164:	003fad06 	br	2b01c <__pack_d+0xbc>
   2b168:	0005883a 	mov	r2,zero
   2b16c:	0007883a 	mov	r3,zero
   2b170:	11001fc4 	addi	r4,r2,127
   2b174:	2085803a 	cmpltu	r2,r4,r2
   2b178:	10c7883a 	add	r3,r2,r3
   2b17c:	2005883a 	mov	r2,r4
   2b180:	003fee06 	br	2b13c <__pack_d+0x1dc>

0002b184 <__unpack_d>:
   2b184:	21800117 	ldw	r6,4(r4)
   2b188:	20c00017 	ldw	r3,0(r4)
   2b18c:	3004d7fa 	srli	r2,r6,31
   2b190:	3008d53a 	srli	r4,r6,20
   2b194:	28800115 	stw	r2,4(r5)
   2b198:	2101ffcc 	andi	r4,r4,2047
   2b19c:	00800434 	movhi	r2,16
   2b1a0:	10bfffc4 	addi	r2,r2,-1
   2b1a4:	3084703a 	and	r2,r6,r2
   2b1a8:	20001a1e 	bne	r4,zero,2b214 <__unpack_d+0x90>
   2b1ac:	1888b03a 	or	r4,r3,r2
   2b1b0:	20002626 	beq	r4,zero,2b24c <__unpack_d+0xc8>
   2b1b4:	1808d63a 	srli	r4,r3,24
   2b1b8:	1004923a 	slli	r2,r2,8
   2b1bc:	01bf0084 	movi	r6,-1022
   2b1c0:	29800215 	stw	r6,8(r5)
   2b1c4:	2084b03a 	or	r2,r4,r2
   2b1c8:	010000c4 	movi	r4,3
   2b1cc:	29000015 	stw	r4,0(r5)
   2b1d0:	02040034 	movhi	r8,4096
   2b1d4:	423fffc4 	addi	r8,r8,-1
   2b1d8:	1806923a 	slli	r3,r3,8
   2b1dc:	40801836 	bltu	r8,r2,2b240 <__unpack_d+0xbc>
   2b1e0:	013f0044 	movi	r4,-1023
   2b1e4:	18cd883a 	add	r6,r3,r3
   2b1e8:	30c7803a 	cmpltu	r3,r6,r3
   2b1ec:	1085883a 	add	r2,r2,r2
   2b1f0:	1885883a 	add	r2,r3,r2
   2b1f4:	200f883a 	mov	r7,r4
   2b1f8:	3007883a 	mov	r3,r6
   2b1fc:	213fffc4 	addi	r4,r4,-1
   2b200:	40bff82e 	bgeu	r8,r2,2b1e4 <__unpack_d+0x60>
   2b204:	29c00215 	stw	r7,8(r5)
   2b208:	28c00315 	stw	r3,12(r5)
   2b20c:	28800415 	stw	r2,16(r5)
   2b210:	f800283a 	ret
   2b214:	01c1ffc4 	movi	r7,2047
   2b218:	21c00f26 	beq	r4,r7,2b258 <__unpack_d+0xd4>
   2b21c:	180cd63a 	srli	r6,r3,24
   2b220:	1004923a 	slli	r2,r2,8
   2b224:	213f0044 	addi	r4,r4,-1023
   2b228:	1806923a 	slli	r3,r3,8
   2b22c:	3084b03a 	or	r2,r6,r2
   2b230:	29000215 	stw	r4,8(r5)
   2b234:	010000c4 	movi	r4,3
   2b238:	10840034 	orhi	r2,r2,4096
   2b23c:	29000015 	stw	r4,0(r5)
   2b240:	28c00315 	stw	r3,12(r5)
   2b244:	28800415 	stw	r2,16(r5)
   2b248:	f800283a 	ret
   2b24c:	00800084 	movi	r2,2
   2b250:	28800015 	stw	r2,0(r5)
   2b254:	f800283a 	ret
   2b258:	1888b03a 	or	r4,r3,r2
   2b25c:	20000526 	beq	r4,zero,2b274 <__unpack_d+0xf0>
   2b260:	3180022c 	andhi	r6,r6,8
   2b264:	30000626 	beq	r6,zero,2b280 <__unpack_d+0xfc>
   2b268:	01000044 	movi	r4,1
   2b26c:	29000015 	stw	r4,0(r5)
   2b270:	003ff306 	br	2b240 <__unpack_d+0xbc>
   2b274:	00800104 	movi	r2,4
   2b278:	28800015 	stw	r2,0(r5)
   2b27c:	f800283a 	ret
   2b280:	28000015 	stw	zero,0(r5)
   2b284:	003fee06 	br	2b240 <__unpack_d+0xbc>

0002b288 <__fpcmp_parts_d>:
   2b288:	20c00017 	ldw	r3,0(r4)
   2b28c:	00800044 	movi	r2,1
   2b290:	10c0142e 	bgeu	r2,r3,2b2e4 <__fpcmp_parts_d+0x5c>
   2b294:	29800017 	ldw	r6,0(r5)
   2b298:	1180122e 	bgeu	r2,r6,2b2e4 <__fpcmp_parts_d+0x5c>
   2b29c:	01c00104 	movi	r7,4
   2b2a0:	19c02826 	beq	r3,r7,2b344 <__fpcmp_parts_d+0xbc>
   2b2a4:	31c00926 	beq	r6,r7,2b2cc <__fpcmp_parts_d+0x44>
   2b2a8:	01c00084 	movi	r7,2
   2b2ac:	19c00626 	beq	r3,r7,2b2c8 <__fpcmp_parts_d+0x40>
   2b2b0:	31c00a26 	beq	r6,r7,2b2dc <__fpcmp_parts_d+0x54>
   2b2b4:	20c00117 	ldw	r3,4(r4)
   2b2b8:	29800117 	ldw	r6,4(r5)
   2b2bc:	19800b26 	beq	r3,r6,2b2ec <__fpcmp_parts_d+0x64>
   2b2c0:	1800041e 	bne	r3,zero,2b2d4 <__fpcmp_parts_d+0x4c>
   2b2c4:	f800283a 	ret
   2b2c8:	30c01a26 	beq	r6,r3,2b334 <__fpcmp_parts_d+0xac>
   2b2cc:	28800117 	ldw	r2,4(r5)
   2b2d0:	1000041e 	bne	r2,zero,2b2e4 <__fpcmp_parts_d+0x5c>
   2b2d4:	00bfffc4 	movi	r2,-1
   2b2d8:	f800283a 	ret
   2b2dc:	20800117 	ldw	r2,4(r4)
   2b2e0:	103ffc1e 	bne	r2,zero,2b2d4 <__fpcmp_parts_d+0x4c>
   2b2e4:	00800044 	movi	r2,1
   2b2e8:	f800283a 	ret
   2b2ec:	21c00217 	ldw	r7,8(r4)
   2b2f0:	29800217 	ldw	r6,8(r5)
   2b2f4:	31c0020e 	bge	r6,r7,2b300 <__fpcmp_parts_d+0x78>
   2b2f8:	183ff61e 	bne	r3,zero,2b2d4 <__fpcmp_parts_d+0x4c>
   2b2fc:	f800283a 	ret
   2b300:	39800a16 	blt	r7,r6,2b32c <__fpcmp_parts_d+0xa4>
   2b304:	20800417 	ldw	r2,16(r4)
   2b308:	29800417 	ldw	r6,16(r5)
   2b30c:	21c00317 	ldw	r7,12(r4)
   2b310:	29000317 	ldw	r4,12(r5)
   2b314:	30800936 	bltu	r6,r2,2b33c <__fpcmp_parts_d+0xb4>
   2b318:	1180011e 	bne	r2,r6,2b320 <__fpcmp_parts_d+0x98>
   2b31c:	21c00736 	bltu	r4,r7,2b33c <__fpcmp_parts_d+0xb4>
   2b320:	11800236 	bltu	r2,r6,2b32c <__fpcmp_parts_d+0xa4>
   2b324:	3080031e 	bne	r6,r2,2b334 <__fpcmp_parts_d+0xac>
   2b328:	3900022e 	bgeu	r7,r4,2b334 <__fpcmp_parts_d+0xac>
   2b32c:	183fe926 	beq	r3,zero,2b2d4 <__fpcmp_parts_d+0x4c>
   2b330:	003fec06 	br	2b2e4 <__fpcmp_parts_d+0x5c>
   2b334:	0005883a 	mov	r2,zero
   2b338:	f800283a 	ret
   2b33c:	183fe926 	beq	r3,zero,2b2e4 <__fpcmp_parts_d+0x5c>
   2b340:	003fe406 	br	2b2d4 <__fpcmp_parts_d+0x4c>
   2b344:	30ffe51e 	bne	r6,r3,2b2dc <__fpcmp_parts_d+0x54>
   2b348:	28c00117 	ldw	r3,4(r5)
   2b34c:	20800117 	ldw	r2,4(r4)
   2b350:	1885c83a 	sub	r2,r3,r2
   2b354:	f800283a 	ret

0002b358 <__lshrdi3>:
   2b358:	2005883a 	mov	r2,r4
   2b35c:	2807883a 	mov	r3,r5
   2b360:	30000826 	beq	r6,zero,2b384 <__lshrdi3+0x2c>
   2b364:	01000804 	movi	r4,32
   2b368:	2189c83a 	sub	r4,r4,r6
   2b36c:	0100060e 	bge	zero,r4,2b388 <__lshrdi3+0x30>
   2b370:	1184d83a 	srl	r2,r2,r6
   2b374:	2908983a 	sll	r4,r5,r4
   2b378:	298cd83a 	srl	r6,r5,r6
   2b37c:	2084b03a 	or	r2,r4,r2
   2b380:	3007883a 	mov	r3,r6
   2b384:	f800283a 	ret
   2b388:	0105c83a 	sub	r2,zero,r4
   2b38c:	000d883a 	mov	r6,zero
   2b390:	2884d83a 	srl	r2,r5,r2
   2b394:	3007883a 	mov	r3,r6
   2b398:	003ffa06 	br	2b384 <__lshrdi3+0x2c>

0002b39c <__ashldi3>:
   2b39c:	2005883a 	mov	r2,r4
   2b3a0:	2807883a 	mov	r3,r5
   2b3a4:	30000826 	beq	r6,zero,2b3c8 <__ashldi3+0x2c>
   2b3a8:	01000804 	movi	r4,32
   2b3ac:	2189c83a 	sub	r4,r4,r6
   2b3b0:	0100060e 	bge	zero,r4,2b3cc <__ashldi3+0x30>
   2b3b4:	1108d83a 	srl	r4,r2,r4
   2b3b8:	2986983a 	sll	r3,r5,r6
   2b3bc:	118c983a 	sll	r6,r2,r6
   2b3c0:	20c6b03a 	or	r3,r4,r3
   2b3c4:	3005883a 	mov	r2,r6
   2b3c8:	f800283a 	ret
   2b3cc:	0107c83a 	sub	r3,zero,r4
   2b3d0:	000d883a 	mov	r6,zero
   2b3d4:	10c6983a 	sll	r3,r2,r3
   2b3d8:	3005883a 	mov	r2,r6
   2b3dc:	003ffa06 	br	2b3c8 <__ashldi3+0x2c>

0002b3e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2b3e0:	defffe04 	addi	sp,sp,-8
   2b3e4:	dfc00115 	stw	ra,4(sp)
   2b3e8:	df000015 	stw	fp,0(sp)
   2b3ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2b3f0:	008000f4 	movhi	r2,3
   2b3f4:	10815b04 	addi	r2,r2,1388
   2b3f8:	10800017 	ldw	r2,0(r2)
   2b3fc:	10000526 	beq	r2,zero,2b414 <alt_get_errno+0x34>
   2b400:	008000f4 	movhi	r2,3
   2b404:	10815b04 	addi	r2,r2,1388
   2b408:	10800017 	ldw	r2,0(r2)
   2b40c:	103ee83a 	callr	r2
   2b410:	00000206 	br	2b41c <alt_get_errno+0x3c>
   2b414:	008000f4 	movhi	r2,3
   2b418:	10882404 	addi	r2,r2,8336
}
   2b41c:	e037883a 	mov	sp,fp
   2b420:	dfc00117 	ldw	ra,4(sp)
   2b424:	df000017 	ldw	fp,0(sp)
   2b428:	dec00204 	addi	sp,sp,8
   2b42c:	f800283a 	ret

0002b430 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   2b430:	defffb04 	addi	sp,sp,-20
   2b434:	dfc00415 	stw	ra,16(sp)
   2b438:	df000315 	stw	fp,12(sp)
   2b43c:	df000304 	addi	fp,sp,12
   2b440:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   2b444:	e0bfff17 	ldw	r2,-4(fp)
   2b448:	10000716 	blt	r2,zero,2b468 <close+0x38>
   2b44c:	e13fff17 	ldw	r4,-4(fp)
   2b450:	01400304 	movi	r5,12
   2b454:	00210140 	call	21014 <__mulsi3>
   2b458:	00c000f4 	movhi	r3,3
   2b45c:	18fccf04 	addi	r3,r3,-3268
   2b460:	10c5883a 	add	r2,r2,r3
   2b464:	00000106 	br	2b46c <close+0x3c>
   2b468:	0005883a 	mov	r2,zero
   2b46c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   2b470:	e0bffd17 	ldw	r2,-12(fp)
   2b474:	10001826 	beq	r2,zero,2b4d8 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   2b478:	e0bffd17 	ldw	r2,-12(fp)
   2b47c:	10800017 	ldw	r2,0(r2)
   2b480:	10800417 	ldw	r2,16(r2)
   2b484:	10000626 	beq	r2,zero,2b4a0 <close+0x70>
   2b488:	e0bffd17 	ldw	r2,-12(fp)
   2b48c:	10800017 	ldw	r2,0(r2)
   2b490:	10800417 	ldw	r2,16(r2)
   2b494:	e13ffd17 	ldw	r4,-12(fp)
   2b498:	103ee83a 	callr	r2
   2b49c:	00000106 	br	2b4a4 <close+0x74>
   2b4a0:	0005883a 	mov	r2,zero
   2b4a4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   2b4a8:	e13fff17 	ldw	r4,-4(fp)
   2b4ac:	002bdc00 	call	2bdc0 <alt_release_fd>
    if (rval < 0)
   2b4b0:	e0bffe17 	ldw	r2,-8(fp)
   2b4b4:	1000060e 	bge	r2,zero,2b4d0 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   2b4b8:	002b3e00 	call	2b3e0 <alt_get_errno>
   2b4bc:	e0fffe17 	ldw	r3,-8(fp)
   2b4c0:	00c7c83a 	sub	r3,zero,r3
   2b4c4:	10c00015 	stw	r3,0(r2)
      return -1;
   2b4c8:	00bfffc4 	movi	r2,-1
   2b4cc:	00000606 	br	2b4e8 <close+0xb8>
    }
    return 0;
   2b4d0:	0005883a 	mov	r2,zero
   2b4d4:	00000406 	br	2b4e8 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2b4d8:	002b3e00 	call	2b3e0 <alt_get_errno>
   2b4dc:	00c01444 	movi	r3,81
   2b4e0:	10c00015 	stw	r3,0(r2)
    return -1;
   2b4e4:	00bfffc4 	movi	r2,-1
  }
}
   2b4e8:	e037883a 	mov	sp,fp
   2b4ec:	dfc00117 	ldw	ra,4(sp)
   2b4f0:	df000017 	ldw	fp,0(sp)
   2b4f4:	dec00204 	addi	sp,sp,8
   2b4f8:	f800283a 	ret

0002b4fc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   2b4fc:	defffc04 	addi	sp,sp,-16
   2b500:	df000315 	stw	fp,12(sp)
   2b504:	df000304 	addi	fp,sp,12
   2b508:	e13ffd15 	stw	r4,-12(fp)
   2b50c:	e17ffe15 	stw	r5,-8(fp)
   2b510:	e1bfff15 	stw	r6,-4(fp)
  return len;
   2b514:	e0bfff17 	ldw	r2,-4(fp)
}
   2b518:	e037883a 	mov	sp,fp
   2b51c:	df000017 	ldw	fp,0(sp)
   2b520:	dec00104 	addi	sp,sp,4
   2b524:	f800283a 	ret

0002b528 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2b528:	defffe04 	addi	sp,sp,-8
   2b52c:	dfc00115 	stw	ra,4(sp)
   2b530:	df000015 	stw	fp,0(sp)
   2b534:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2b538:	008000f4 	movhi	r2,3
   2b53c:	10815b04 	addi	r2,r2,1388
   2b540:	10800017 	ldw	r2,0(r2)
   2b544:	10000526 	beq	r2,zero,2b55c <alt_get_errno+0x34>
   2b548:	008000f4 	movhi	r2,3
   2b54c:	10815b04 	addi	r2,r2,1388
   2b550:	10800017 	ldw	r2,0(r2)
   2b554:	103ee83a 	callr	r2
   2b558:	00000206 	br	2b564 <alt_get_errno+0x3c>
   2b55c:	008000f4 	movhi	r2,3
   2b560:	10882404 	addi	r2,r2,8336
}
   2b564:	e037883a 	mov	sp,fp
   2b568:	dfc00117 	ldw	ra,4(sp)
   2b56c:	df000017 	ldw	fp,0(sp)
   2b570:	dec00204 	addi	sp,sp,8
   2b574:	f800283a 	ret

0002b578 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   2b578:	defffb04 	addi	sp,sp,-20
   2b57c:	dfc00415 	stw	ra,16(sp)
   2b580:	df000315 	stw	fp,12(sp)
   2b584:	df000304 	addi	fp,sp,12
   2b588:	e13ffe15 	stw	r4,-8(fp)
   2b58c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2b590:	e0bffe17 	ldw	r2,-8(fp)
   2b594:	10000716 	blt	r2,zero,2b5b4 <fstat+0x3c>
   2b598:	e13ffe17 	ldw	r4,-8(fp)
   2b59c:	01400304 	movi	r5,12
   2b5a0:	00210140 	call	21014 <__mulsi3>
   2b5a4:	00c000f4 	movhi	r3,3
   2b5a8:	18fccf04 	addi	r3,r3,-3268
   2b5ac:	10c5883a 	add	r2,r2,r3
   2b5b0:	00000106 	br	2b5b8 <fstat+0x40>
   2b5b4:	0005883a 	mov	r2,zero
   2b5b8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   2b5bc:	e0bffd17 	ldw	r2,-12(fp)
   2b5c0:	10001026 	beq	r2,zero,2b604 <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   2b5c4:	e0bffd17 	ldw	r2,-12(fp)
   2b5c8:	10800017 	ldw	r2,0(r2)
   2b5cc:	10800817 	ldw	r2,32(r2)
   2b5d0:	10000726 	beq	r2,zero,2b5f0 <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
   2b5d4:	e0bffd17 	ldw	r2,-12(fp)
   2b5d8:	10800017 	ldw	r2,0(r2)
   2b5dc:	10800817 	ldw	r2,32(r2)
   2b5e0:	e13ffd17 	ldw	r4,-12(fp)
   2b5e4:	e17fff17 	ldw	r5,-4(fp)
   2b5e8:	103ee83a 	callr	r2
   2b5ec:	00000906 	br	2b614 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   2b5f0:	e0bfff17 	ldw	r2,-4(fp)
   2b5f4:	00c80004 	movi	r3,8192
   2b5f8:	10c00115 	stw	r3,4(r2)
      return 0;
   2b5fc:	0005883a 	mov	r2,zero
   2b600:	00000406 	br	2b614 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2b604:	002b5280 	call	2b528 <alt_get_errno>
   2b608:	00c01444 	movi	r3,81
   2b60c:	10c00015 	stw	r3,0(r2)
    return -1;
   2b610:	00bfffc4 	movi	r2,-1
  }
}
   2b614:	e037883a 	mov	sp,fp
   2b618:	dfc00117 	ldw	ra,4(sp)
   2b61c:	df000017 	ldw	fp,0(sp)
   2b620:	dec00204 	addi	sp,sp,8
   2b624:	f800283a 	ret

0002b628 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2b628:	defffe04 	addi	sp,sp,-8
   2b62c:	dfc00115 	stw	ra,4(sp)
   2b630:	df000015 	stw	fp,0(sp)
   2b634:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2b638:	008000f4 	movhi	r2,3
   2b63c:	10815b04 	addi	r2,r2,1388
   2b640:	10800017 	ldw	r2,0(r2)
   2b644:	10000526 	beq	r2,zero,2b65c <alt_get_errno+0x34>
   2b648:	008000f4 	movhi	r2,3
   2b64c:	10815b04 	addi	r2,r2,1388
   2b650:	10800017 	ldw	r2,0(r2)
   2b654:	103ee83a 	callr	r2
   2b658:	00000206 	br	2b664 <alt_get_errno+0x3c>
   2b65c:	008000f4 	movhi	r2,3
   2b660:	10882404 	addi	r2,r2,8336
}
   2b664:	e037883a 	mov	sp,fp
   2b668:	dfc00117 	ldw	ra,4(sp)
   2b66c:	df000017 	ldw	fp,0(sp)
   2b670:	dec00204 	addi	sp,sp,8
   2b674:	f800283a 	ret

0002b678 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   2b678:	deffed04 	addi	sp,sp,-76
   2b67c:	dfc01215 	stw	ra,72(sp)
   2b680:	df001115 	stw	fp,68(sp)
   2b684:	df001104 	addi	fp,sp,68
   2b688:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2b68c:	e0bfff17 	ldw	r2,-4(fp)
   2b690:	10000716 	blt	r2,zero,2b6b0 <isatty+0x38>
   2b694:	e13fff17 	ldw	r4,-4(fp)
   2b698:	01400304 	movi	r5,12
   2b69c:	00210140 	call	21014 <__mulsi3>
   2b6a0:	00c000f4 	movhi	r3,3
   2b6a4:	18fccf04 	addi	r3,r3,-3268
   2b6a8:	10c5883a 	add	r2,r2,r3
   2b6ac:	00000106 	br	2b6b4 <isatty+0x3c>
   2b6b0:	0005883a 	mov	r2,zero
   2b6b4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   2b6b8:	e0bfef17 	ldw	r2,-68(fp)
   2b6bc:	10000e26 	beq	r2,zero,2b6f8 <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   2b6c0:	e0bfef17 	ldw	r2,-68(fp)
   2b6c4:	10800017 	ldw	r2,0(r2)
   2b6c8:	10800817 	ldw	r2,32(r2)
   2b6cc:	1000021e 	bne	r2,zero,2b6d8 <isatty+0x60>
    {
      return 1;
   2b6d0:	00800044 	movi	r2,1
   2b6d4:	00000c06 	br	2b708 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   2b6d8:	e0bff004 	addi	r2,fp,-64
   2b6dc:	e13fff17 	ldw	r4,-4(fp)
   2b6e0:	100b883a 	mov	r5,r2
   2b6e4:	002b5780 	call	2b578 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   2b6e8:	e0bff117 	ldw	r2,-60(fp)
   2b6ec:	10880020 	cmpeqi	r2,r2,8192
   2b6f0:	10803fcc 	andi	r2,r2,255
   2b6f4:	00000406 	br	2b708 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2b6f8:	002b6280 	call	2b628 <alt_get_errno>
   2b6fc:	00c01444 	movi	r3,81
   2b700:	10c00015 	stw	r3,0(r2)
    return 0;
   2b704:	0005883a 	mov	r2,zero
  }
}
   2b708:	e037883a 	mov	sp,fp
   2b70c:	dfc00117 	ldw	ra,4(sp)
   2b710:	df000017 	ldw	fp,0(sp)
   2b714:	dec00204 	addi	sp,sp,8
   2b718:	f800283a 	ret

0002b71c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   2b71c:	defffc04 	addi	sp,sp,-16
   2b720:	df000315 	stw	fp,12(sp)
   2b724:	df000304 	addi	fp,sp,12
   2b728:	e13ffd15 	stw	r4,-12(fp)
   2b72c:	e17ffe15 	stw	r5,-8(fp)
   2b730:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   2b734:	e0fffe17 	ldw	r3,-8(fp)
   2b738:	e0bffd17 	ldw	r2,-12(fp)
   2b73c:	18800e26 	beq	r3,r2,2b778 <alt_load_section+0x5c>
  {
    while( to != end )
   2b740:	00000a06 	br	2b76c <alt_load_section+0x50>
    {
      *to++ = *from++;
   2b744:	e0bffd17 	ldw	r2,-12(fp)
   2b748:	10c00017 	ldw	r3,0(r2)
   2b74c:	e0bffe17 	ldw	r2,-8(fp)
   2b750:	10c00015 	stw	r3,0(r2)
   2b754:	e0bffe17 	ldw	r2,-8(fp)
   2b758:	10800104 	addi	r2,r2,4
   2b75c:	e0bffe15 	stw	r2,-8(fp)
   2b760:	e0bffd17 	ldw	r2,-12(fp)
   2b764:	10800104 	addi	r2,r2,4
   2b768:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   2b76c:	e0fffe17 	ldw	r3,-8(fp)
   2b770:	e0bfff17 	ldw	r2,-4(fp)
   2b774:	18bff31e 	bne	r3,r2,2b744 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   2b778:	e037883a 	mov	sp,fp
   2b77c:	df000017 	ldw	fp,0(sp)
   2b780:	dec00104 	addi	sp,sp,4
   2b784:	f800283a 	ret

0002b788 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   2b788:	defffe04 	addi	sp,sp,-8
   2b78c:	dfc00115 	stw	ra,4(sp)
   2b790:	df000015 	stw	fp,0(sp)
   2b794:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   2b798:	010000f4 	movhi	r4,3
   2b79c:	21017204 	addi	r4,r4,1480
   2b7a0:	014000f4 	movhi	r5,3
   2b7a4:	297ac004 	addi	r5,r5,-5376
   2b7a8:	018000f4 	movhi	r6,3
   2b7ac:	31817204 	addi	r6,r6,1480
   2b7b0:	002b71c0 	call	2b71c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   2b7b4:	010000b4 	movhi	r4,2
   2b7b8:	21000804 	addi	r4,r4,32
   2b7bc:	014000b4 	movhi	r5,2
   2b7c0:	29400804 	addi	r5,r5,32
   2b7c4:	018000b4 	movhi	r6,2
   2b7c8:	31806e04 	addi	r6,r6,440
   2b7cc:	002b71c0 	call	2b71c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   2b7d0:	010000f4 	movhi	r4,3
   2b7d4:	2139d804 	addi	r4,r4,-6304
   2b7d8:	014000f4 	movhi	r5,3
   2b7dc:	2979d804 	addi	r5,r5,-6304
   2b7e0:	018000f4 	movhi	r6,3
   2b7e4:	31bac004 	addi	r6,r6,-5376
   2b7e8:	002b71c0 	call	2b71c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   2b7ec:	002d8d40 	call	2d8d4 <alt_dcache_flush_all>
  alt_icache_flush_all();
   2b7f0:	002dd940 	call	2dd94 <alt_icache_flush_all>
}
   2b7f4:	e037883a 	mov	sp,fp
   2b7f8:	dfc00117 	ldw	ra,4(sp)
   2b7fc:	df000017 	ldw	fp,0(sp)
   2b800:	dec00204 	addi	sp,sp,8
   2b804:	f800283a 	ret

0002b808 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2b808:	defffe04 	addi	sp,sp,-8
   2b80c:	dfc00115 	stw	ra,4(sp)
   2b810:	df000015 	stw	fp,0(sp)
   2b814:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2b818:	008000f4 	movhi	r2,3
   2b81c:	10815b04 	addi	r2,r2,1388
   2b820:	10800017 	ldw	r2,0(r2)
   2b824:	10000526 	beq	r2,zero,2b83c <alt_get_errno+0x34>
   2b828:	008000f4 	movhi	r2,3
   2b82c:	10815b04 	addi	r2,r2,1388
   2b830:	10800017 	ldw	r2,0(r2)
   2b834:	103ee83a 	callr	r2
   2b838:	00000206 	br	2b844 <alt_get_errno+0x3c>
   2b83c:	008000f4 	movhi	r2,3
   2b840:	10882404 	addi	r2,r2,8336
}
   2b844:	e037883a 	mov	sp,fp
   2b848:	dfc00117 	ldw	ra,4(sp)
   2b84c:	df000017 	ldw	fp,0(sp)
   2b850:	dec00204 	addi	sp,sp,8
   2b854:	f800283a 	ret

0002b858 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   2b858:	defff904 	addi	sp,sp,-28
   2b85c:	dfc00615 	stw	ra,24(sp)
   2b860:	df000515 	stw	fp,20(sp)
   2b864:	df000504 	addi	fp,sp,20
   2b868:	e13ffd15 	stw	r4,-12(fp)
   2b86c:	e17ffe15 	stw	r5,-8(fp)
   2b870:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   2b874:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2b878:	e0bffd17 	ldw	r2,-12(fp)
   2b87c:	10000716 	blt	r2,zero,2b89c <lseek+0x44>
   2b880:	e13ffd17 	ldw	r4,-12(fp)
   2b884:	01400304 	movi	r5,12
   2b888:	00210140 	call	21014 <__mulsi3>
   2b88c:	00c000f4 	movhi	r3,3
   2b890:	18fccf04 	addi	r3,r3,-3268
   2b894:	10c5883a 	add	r2,r2,r3
   2b898:	00000106 	br	2b8a0 <lseek+0x48>
   2b89c:	0005883a 	mov	r2,zero
   2b8a0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   2b8a4:	e0bffc17 	ldw	r2,-16(fp)
   2b8a8:	10001026 	beq	r2,zero,2b8ec <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   2b8ac:	e0bffc17 	ldw	r2,-16(fp)
   2b8b0:	10800017 	ldw	r2,0(r2)
   2b8b4:	10800717 	ldw	r2,28(r2)
   2b8b8:	10000926 	beq	r2,zero,2b8e0 <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   2b8bc:	e0bffc17 	ldw	r2,-16(fp)
   2b8c0:	10800017 	ldw	r2,0(r2)
   2b8c4:	10800717 	ldw	r2,28(r2)
   2b8c8:	e13ffc17 	ldw	r4,-16(fp)
   2b8cc:	e17ffe17 	ldw	r5,-8(fp)
   2b8d0:	e1bfff17 	ldw	r6,-4(fp)
   2b8d4:	103ee83a 	callr	r2
   2b8d8:	e0bffb15 	stw	r2,-20(fp)
   2b8dc:	00000506 	br	2b8f4 <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   2b8e0:	00bfde84 	movi	r2,-134
   2b8e4:	e0bffb15 	stw	r2,-20(fp)
   2b8e8:	00000206 	br	2b8f4 <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
   2b8ec:	00bfebc4 	movi	r2,-81
   2b8f0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   2b8f4:	e0bffb17 	ldw	r2,-20(fp)
   2b8f8:	1000060e 	bge	r2,zero,2b914 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   2b8fc:	002b8080 	call	2b808 <alt_get_errno>
   2b900:	e0fffb17 	ldw	r3,-20(fp)
   2b904:	00c7c83a 	sub	r3,zero,r3
   2b908:	10c00015 	stw	r3,0(r2)
    rc = -1;
   2b90c:	00bfffc4 	movi	r2,-1
   2b910:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   2b914:	e0bffb17 	ldw	r2,-20(fp)
}
   2b918:	e037883a 	mov	sp,fp
   2b91c:	dfc00117 	ldw	ra,4(sp)
   2b920:	df000017 	ldw	fp,0(sp)
   2b924:	dec00204 	addi	sp,sp,8
   2b928:	f800283a 	ret

0002b92c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   2b92c:	defffd04 	addi	sp,sp,-12
   2b930:	dfc00215 	stw	ra,8(sp)
   2b934:	df000115 	stw	fp,4(sp)
   2b938:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   2b93c:	0009883a 	mov	r4,zero
   2b940:	002c0680 	call	2c068 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   2b944:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   2b948:	002c09c0 	call	2c09c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   2b94c:	010000f4 	movhi	r4,3
   2b950:	213ab504 	addi	r4,r4,-5420
   2b954:	014000f4 	movhi	r5,3
   2b958:	297ab504 	addi	r5,r5,-5420
   2b95c:	018000f4 	movhi	r6,3
   2b960:	31bab504 	addi	r6,r6,-5420
   2b964:	002e1580 	call	2e158 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   2b968:	002d9e00 	call	2d9e0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   2b96c:	010000f4 	movhi	r4,3
   2b970:	21368f04 	addi	r4,r4,-9668
   2b974:	002e38c0 	call	2e38c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   2b978:	d126da17 	ldw	r4,-25752(gp)
   2b97c:	d0e6db17 	ldw	r3,-25748(gp)
   2b980:	d0a6dc17 	ldw	r2,-25744(gp)
   2b984:	180b883a 	mov	r5,r3
   2b988:	100d883a 	mov	r6,r2
   2b98c:	0020fdc0 	call	20fdc <main>
   2b990:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   2b994:	01000044 	movi	r4,1
   2b998:	002b4300 	call	2b430 <close>
  exit (result);
   2b99c:	e13fff17 	ldw	r4,-4(fp)
   2b9a0:	002e3a00 	call	2e3a0 <exit>

0002b9a4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   2b9a4:	defffe04 	addi	sp,sp,-8
   2b9a8:	df000115 	stw	fp,4(sp)
   2b9ac:	df000104 	addi	fp,sp,4
   2b9b0:	e13fff15 	stw	r4,-4(fp)
}
   2b9b4:	e037883a 	mov	sp,fp
   2b9b8:	df000017 	ldw	fp,0(sp)
   2b9bc:	dec00104 	addi	sp,sp,4
   2b9c0:	f800283a 	ret

0002b9c4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   2b9c4:	defffe04 	addi	sp,sp,-8
   2b9c8:	df000115 	stw	fp,4(sp)
   2b9cc:	df000104 	addi	fp,sp,4
   2b9d0:	e13fff15 	stw	r4,-4(fp)
}
   2b9d4:	e037883a 	mov	sp,fp
   2b9d8:	df000017 	ldw	fp,0(sp)
   2b9dc:	dec00104 	addi	sp,sp,4
   2b9e0:	f800283a 	ret

0002b9e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2b9e4:	defffe04 	addi	sp,sp,-8
   2b9e8:	dfc00115 	stw	ra,4(sp)
   2b9ec:	df000015 	stw	fp,0(sp)
   2b9f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2b9f4:	008000f4 	movhi	r2,3
   2b9f8:	10815b04 	addi	r2,r2,1388
   2b9fc:	10800017 	ldw	r2,0(r2)
   2ba00:	10000526 	beq	r2,zero,2ba18 <alt_get_errno+0x34>
   2ba04:	008000f4 	movhi	r2,3
   2ba08:	10815b04 	addi	r2,r2,1388
   2ba0c:	10800017 	ldw	r2,0(r2)
   2ba10:	103ee83a 	callr	r2
   2ba14:	00000206 	br	2ba20 <alt_get_errno+0x3c>
   2ba18:	008000f4 	movhi	r2,3
   2ba1c:	10882404 	addi	r2,r2,8336
}
   2ba20:	e037883a 	mov	sp,fp
   2ba24:	dfc00117 	ldw	ra,4(sp)
   2ba28:	df000017 	ldw	fp,0(sp)
   2ba2c:	dec00204 	addi	sp,sp,8
   2ba30:	f800283a 	ret

0002ba34 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   2ba34:	defffb04 	addi	sp,sp,-20
   2ba38:	dfc00415 	stw	ra,16(sp)
   2ba3c:	df000315 	stw	fp,12(sp)
   2ba40:	dc000215 	stw	r16,8(sp)
   2ba44:	df000204 	addi	fp,sp,8
   2ba48:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   2ba4c:	e0bfff17 	ldw	r2,-4(fp)
   2ba50:	10800217 	ldw	r2,8(r2)
   2ba54:	10d00034 	orhi	r3,r2,16384
   2ba58:	e0bfff17 	ldw	r2,-4(fp)
   2ba5c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   2ba60:	e03ffe15 	stw	zero,-8(fp)
   2ba64:	00002206 	br	2baf0 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   2ba68:	040000f4 	movhi	r16,3
   2ba6c:	843ccf04 	addi	r16,r16,-3268
   2ba70:	e0bffe17 	ldw	r2,-8(fp)
   2ba74:	1009883a 	mov	r4,r2
   2ba78:	01400304 	movi	r5,12
   2ba7c:	00210140 	call	21014 <__mulsi3>
   2ba80:	8085883a 	add	r2,r16,r2
   2ba84:	10c00017 	ldw	r3,0(r2)
   2ba88:	e0bfff17 	ldw	r2,-4(fp)
   2ba8c:	10800017 	ldw	r2,0(r2)
   2ba90:	1880141e 	bne	r3,r2,2bae4 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   2ba94:	040000f4 	movhi	r16,3
   2ba98:	843ccf04 	addi	r16,r16,-3268
   2ba9c:	e0bffe17 	ldw	r2,-8(fp)
   2baa0:	1009883a 	mov	r4,r2
   2baa4:	01400304 	movi	r5,12
   2baa8:	00210140 	call	21014 <__mulsi3>
   2baac:	8085883a 	add	r2,r16,r2
   2bab0:	10800204 	addi	r2,r2,8
   2bab4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   2bab8:	10000a0e 	bge	r2,zero,2bae4 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   2babc:	e13ffe17 	ldw	r4,-8(fp)
   2bac0:	01400304 	movi	r5,12
   2bac4:	00210140 	call	21014 <__mulsi3>
   2bac8:	00c000f4 	movhi	r3,3
   2bacc:	18fccf04 	addi	r3,r3,-3268
   2bad0:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   2bad4:	e0bfff17 	ldw	r2,-4(fp)
   2bad8:	18800226 	beq	r3,r2,2bae4 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   2badc:	00bffcc4 	movi	r2,-13
   2bae0:	00000a06 	br	2bb0c <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   2bae4:	e0bffe17 	ldw	r2,-8(fp)
   2bae8:	10800044 	addi	r2,r2,1
   2baec:	e0bffe15 	stw	r2,-8(fp)
   2baf0:	008000f4 	movhi	r2,3
   2baf4:	10815a04 	addi	r2,r2,1384
   2baf8:	10800017 	ldw	r2,0(r2)
   2bafc:	1007883a 	mov	r3,r2
   2bb00:	e0bffe17 	ldw	r2,-8(fp)
   2bb04:	18bfd82e 	bgeu	r3,r2,2ba68 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   2bb08:	0005883a 	mov	r2,zero
}
   2bb0c:	e037883a 	mov	sp,fp
   2bb10:	dfc00217 	ldw	ra,8(sp)
   2bb14:	df000117 	ldw	fp,4(sp)
   2bb18:	dc000017 	ldw	r16,0(sp)
   2bb1c:	dec00304 	addi	sp,sp,12
   2bb20:	f800283a 	ret

0002bb24 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   2bb24:	defff604 	addi	sp,sp,-40
   2bb28:	dfc00915 	stw	ra,36(sp)
   2bb2c:	df000815 	stw	fp,32(sp)
   2bb30:	df000804 	addi	fp,sp,32
   2bb34:	e13ffd15 	stw	r4,-12(fp)
   2bb38:	e17ffe15 	stw	r5,-8(fp)
   2bb3c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   2bb40:	00bfffc4 	movi	r2,-1
   2bb44:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   2bb48:	00bffb44 	movi	r2,-19
   2bb4c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   2bb50:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   2bb54:	e13ffd17 	ldw	r4,-12(fp)
   2bb58:	014000f4 	movhi	r5,3
   2bb5c:	29415804 	addi	r5,r5,1376
   2bb60:	002da980 	call	2da98 <alt_find_dev>
   2bb64:	e0bff815 	stw	r2,-32(fp)
   2bb68:	e0bff817 	ldw	r2,-32(fp)
   2bb6c:	1000051e 	bne	r2,zero,2bb84 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   2bb70:	e13ffd17 	ldw	r4,-12(fp)
   2bb74:	002db280 	call	2db28 <alt_find_file>
   2bb78:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   2bb7c:	00800044 	movi	r2,1
   2bb80:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   2bb84:	e0bff817 	ldw	r2,-32(fp)
   2bb88:	10002a26 	beq	r2,zero,2bc34 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   2bb8c:	e13ff817 	ldw	r4,-32(fp)
   2bb90:	002dcc00 	call	2dcc0 <alt_get_fd>
   2bb94:	e0bff915 	stw	r2,-28(fp)
   2bb98:	e0bff917 	ldw	r2,-28(fp)
   2bb9c:	1000030e 	bge	r2,zero,2bbac <open+0x88>
    {
      status = index;
   2bba0:	e0bff917 	ldw	r2,-28(fp)
   2bba4:	e0bffa15 	stw	r2,-24(fp)
   2bba8:	00002406 	br	2bc3c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   2bbac:	e13ff917 	ldw	r4,-28(fp)
   2bbb0:	01400304 	movi	r5,12
   2bbb4:	00210140 	call	21014 <__mulsi3>
   2bbb8:	00c000f4 	movhi	r3,3
   2bbbc:	18fccf04 	addi	r3,r3,-3268
   2bbc0:	10c5883a 	add	r2,r2,r3
   2bbc4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   2bbc8:	e0fffe17 	ldw	r3,-8(fp)
   2bbcc:	00900034 	movhi	r2,16384
   2bbd0:	10bfffc4 	addi	r2,r2,-1
   2bbd4:	1886703a 	and	r3,r3,r2
   2bbd8:	e0bffc17 	ldw	r2,-16(fp)
   2bbdc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   2bbe0:	e0bffb17 	ldw	r2,-20(fp)
   2bbe4:	1000051e 	bne	r2,zero,2bbfc <open+0xd8>
   2bbe8:	e13ffc17 	ldw	r4,-16(fp)
   2bbec:	002ba340 	call	2ba34 <alt_file_locked>
   2bbf0:	e0bffa15 	stw	r2,-24(fp)
   2bbf4:	e0bffa17 	ldw	r2,-24(fp)
   2bbf8:	10001016 	blt	r2,zero,2bc3c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   2bbfc:	e0bff817 	ldw	r2,-32(fp)
   2bc00:	10800317 	ldw	r2,12(r2)
   2bc04:	10000826 	beq	r2,zero,2bc28 <open+0x104>
   2bc08:	e0bff817 	ldw	r2,-32(fp)
   2bc0c:	10800317 	ldw	r2,12(r2)
   2bc10:	e13ffc17 	ldw	r4,-16(fp)
   2bc14:	e17ffd17 	ldw	r5,-12(fp)
   2bc18:	e1bffe17 	ldw	r6,-8(fp)
   2bc1c:	e1ffff17 	ldw	r7,-4(fp)
   2bc20:	103ee83a 	callr	r2
   2bc24:	00000106 	br	2bc2c <open+0x108>
   2bc28:	0005883a 	mov	r2,zero
   2bc2c:	e0bffa15 	stw	r2,-24(fp)
   2bc30:	00000206 	br	2bc3c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   2bc34:	00bffb44 	movi	r2,-19
   2bc38:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   2bc3c:	e0bffa17 	ldw	r2,-24(fp)
   2bc40:	1000080e 	bge	r2,zero,2bc64 <open+0x140>
  {
    alt_release_fd (index);  
   2bc44:	e13ff917 	ldw	r4,-28(fp)
   2bc48:	002bdc00 	call	2bdc0 <alt_release_fd>
    ALT_ERRNO = -status;
   2bc4c:	002b9e40 	call	2b9e4 <alt_get_errno>
   2bc50:	e0fffa17 	ldw	r3,-24(fp)
   2bc54:	00c7c83a 	sub	r3,zero,r3
   2bc58:	10c00015 	stw	r3,0(r2)
    return -1;
   2bc5c:	00bfffc4 	movi	r2,-1
   2bc60:	00000106 	br	2bc68 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   2bc64:	e0bff917 	ldw	r2,-28(fp)
}
   2bc68:	e037883a 	mov	sp,fp
   2bc6c:	dfc00117 	ldw	ra,4(sp)
   2bc70:	df000017 	ldw	fp,0(sp)
   2bc74:	dec00204 	addi	sp,sp,8
   2bc78:	f800283a 	ret

0002bc7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2bc7c:	defffe04 	addi	sp,sp,-8
   2bc80:	dfc00115 	stw	ra,4(sp)
   2bc84:	df000015 	stw	fp,0(sp)
   2bc88:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2bc8c:	008000f4 	movhi	r2,3
   2bc90:	10815b04 	addi	r2,r2,1388
   2bc94:	10800017 	ldw	r2,0(r2)
   2bc98:	10000526 	beq	r2,zero,2bcb0 <alt_get_errno+0x34>
   2bc9c:	008000f4 	movhi	r2,3
   2bca0:	10815b04 	addi	r2,r2,1388
   2bca4:	10800017 	ldw	r2,0(r2)
   2bca8:	103ee83a 	callr	r2
   2bcac:	00000206 	br	2bcb8 <alt_get_errno+0x3c>
   2bcb0:	008000f4 	movhi	r2,3
   2bcb4:	10882404 	addi	r2,r2,8336
}
   2bcb8:	e037883a 	mov	sp,fp
   2bcbc:	dfc00117 	ldw	ra,4(sp)
   2bcc0:	df000017 	ldw	fp,0(sp)
   2bcc4:	dec00204 	addi	sp,sp,8
   2bcc8:	f800283a 	ret

0002bccc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   2bccc:	defff904 	addi	sp,sp,-28
   2bcd0:	dfc00615 	stw	ra,24(sp)
   2bcd4:	df000515 	stw	fp,20(sp)
   2bcd8:	df000504 	addi	fp,sp,20
   2bcdc:	e13ffd15 	stw	r4,-12(fp)
   2bce0:	e17ffe15 	stw	r5,-8(fp)
   2bce4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2bce8:	e0bffd17 	ldw	r2,-12(fp)
   2bcec:	10000716 	blt	r2,zero,2bd0c <read+0x40>
   2bcf0:	e13ffd17 	ldw	r4,-12(fp)
   2bcf4:	01400304 	movi	r5,12
   2bcf8:	00210140 	call	21014 <__mulsi3>
   2bcfc:	00c000f4 	movhi	r3,3
   2bd00:	18fccf04 	addi	r3,r3,-3268
   2bd04:	10c5883a 	add	r2,r2,r3
   2bd08:	00000106 	br	2bd10 <read+0x44>
   2bd0c:	0005883a 	mov	r2,zero
   2bd10:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   2bd14:	e0bffb17 	ldw	r2,-20(fp)
   2bd18:	10002026 	beq	r2,zero,2bd9c <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   2bd1c:	e0bffb17 	ldw	r2,-20(fp)
   2bd20:	10800217 	ldw	r2,8(r2)
   2bd24:	108000cc 	andi	r2,r2,3
   2bd28:	10800060 	cmpeqi	r2,r2,1
   2bd2c:	1000171e 	bne	r2,zero,2bd8c <read+0xc0>
        (fd->dev->read))
   2bd30:	e0bffb17 	ldw	r2,-20(fp)
   2bd34:	10800017 	ldw	r2,0(r2)
   2bd38:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   2bd3c:	10001326 	beq	r2,zero,2bd8c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   2bd40:	e0bffb17 	ldw	r2,-20(fp)
   2bd44:	10800017 	ldw	r2,0(r2)
   2bd48:	10c00517 	ldw	r3,20(r2)
   2bd4c:	e0bfff17 	ldw	r2,-4(fp)
   2bd50:	e13ffb17 	ldw	r4,-20(fp)
   2bd54:	e17ffe17 	ldw	r5,-8(fp)
   2bd58:	100d883a 	mov	r6,r2
   2bd5c:	183ee83a 	callr	r3
   2bd60:	e0bffc15 	stw	r2,-16(fp)
   2bd64:	e0bffc17 	ldw	r2,-16(fp)
   2bd68:	1000060e 	bge	r2,zero,2bd84 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   2bd6c:	002bc7c0 	call	2bc7c <alt_get_errno>
   2bd70:	e0fffc17 	ldw	r3,-16(fp)
   2bd74:	00c7c83a 	sub	r3,zero,r3
   2bd78:	10c00015 	stw	r3,0(r2)
          return -1;
   2bd7c:	00bfffc4 	movi	r2,-1
   2bd80:	00000a06 	br	2bdac <read+0xe0>
        }
        return rval;
   2bd84:	e0bffc17 	ldw	r2,-16(fp)
   2bd88:	00000806 	br	2bdac <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   2bd8c:	002bc7c0 	call	2bc7c <alt_get_errno>
   2bd90:	00c00344 	movi	r3,13
   2bd94:	10c00015 	stw	r3,0(r2)
   2bd98:	00000306 	br	2bda8 <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   2bd9c:	002bc7c0 	call	2bc7c <alt_get_errno>
   2bda0:	00c01444 	movi	r3,81
   2bda4:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   2bda8:	00bfffc4 	movi	r2,-1
}
   2bdac:	e037883a 	mov	sp,fp
   2bdb0:	dfc00117 	ldw	ra,4(sp)
   2bdb4:	df000017 	ldw	fp,0(sp)
   2bdb8:	dec00204 	addi	sp,sp,8
   2bdbc:	f800283a 	ret

0002bdc0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   2bdc0:	defffc04 	addi	sp,sp,-16
   2bdc4:	dfc00315 	stw	ra,12(sp)
   2bdc8:	df000215 	stw	fp,8(sp)
   2bdcc:	dc000115 	stw	r16,4(sp)
   2bdd0:	df000104 	addi	fp,sp,4
   2bdd4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   2bdd8:	e0bfff17 	ldw	r2,-4(fp)
   2bddc:	108000d0 	cmplti	r2,r2,3
   2bde0:	1000111e 	bne	r2,zero,2be28 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   2bde4:	040000f4 	movhi	r16,3
   2bde8:	843ccf04 	addi	r16,r16,-3268
   2bdec:	e0bfff17 	ldw	r2,-4(fp)
   2bdf0:	1009883a 	mov	r4,r2
   2bdf4:	01400304 	movi	r5,12
   2bdf8:	00210140 	call	21014 <__mulsi3>
   2bdfc:	8085883a 	add	r2,r16,r2
   2be00:	10800204 	addi	r2,r2,8
   2be04:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   2be08:	040000f4 	movhi	r16,3
   2be0c:	843ccf04 	addi	r16,r16,-3268
   2be10:	e0bfff17 	ldw	r2,-4(fp)
   2be14:	1009883a 	mov	r4,r2
   2be18:	01400304 	movi	r5,12
   2be1c:	00210140 	call	21014 <__mulsi3>
   2be20:	8085883a 	add	r2,r16,r2
   2be24:	10000015 	stw	zero,0(r2)
  }
}
   2be28:	e037883a 	mov	sp,fp
   2be2c:	dfc00217 	ldw	ra,8(sp)
   2be30:	df000117 	ldw	fp,4(sp)
   2be34:	dc000017 	ldw	r16,0(sp)
   2be38:	dec00304 	addi	sp,sp,12
   2be3c:	f800283a 	ret

0002be40 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   2be40:	defff904 	addi	sp,sp,-28
   2be44:	df000615 	stw	fp,24(sp)
   2be48:	df000604 	addi	fp,sp,24
   2be4c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2be50:	0005303a 	rdctl	r2,status
   2be54:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2be58:	e0fffc17 	ldw	r3,-16(fp)
   2be5c:	00bfff84 	movi	r2,-2
   2be60:	1884703a 	and	r2,r3,r2
   2be64:	1001703a 	wrctl	status,r2
  
  return context;
   2be68:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   2be6c:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   2be70:	d0a00b17 	ldw	r2,-32724(gp)
   2be74:	10c000c4 	addi	r3,r2,3
   2be78:	00bfff04 	movi	r2,-4
   2be7c:	1884703a 	and	r2,r3,r2
   2be80:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   2be84:	d0e00b17 	ldw	r3,-32724(gp)
   2be88:	e0bfff17 	ldw	r2,-4(fp)
   2be8c:	1885883a 	add	r2,r3,r2
   2be90:	00c00134 	movhi	r3,4
   2be94:	18c00004 	addi	r3,r3,0
   2be98:	1880062e 	bgeu	r3,r2,2beb4 <sbrk+0x74>
   2be9c:	e0bffa17 	ldw	r2,-24(fp)
   2bea0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2bea4:	e0bffd17 	ldw	r2,-12(fp)
   2bea8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   2beac:	00bfffc4 	movi	r2,-1
   2beb0:	00000b06 	br	2bee0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   2beb4:	d0a00b17 	ldw	r2,-32724(gp)
   2beb8:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   2bebc:	d0e00b17 	ldw	r3,-32724(gp)
   2bec0:	e0bfff17 	ldw	r2,-4(fp)
   2bec4:	1885883a 	add	r2,r3,r2
   2bec8:	d0a00b15 	stw	r2,-32724(gp)
   2becc:	e0bffa17 	ldw	r2,-24(fp)
   2bed0:	e0bffe15 	stw	r2,-8(fp)
   2bed4:	e0bffe17 	ldw	r2,-8(fp)
   2bed8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   2bedc:	e0bffb17 	ldw	r2,-20(fp)
} 
   2bee0:	e037883a 	mov	sp,fp
   2bee4:	df000017 	ldw	fp,0(sp)
   2bee8:	dec00104 	addi	sp,sp,4
   2beec:	f800283a 	ret

0002bef0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2bef0:	defffe04 	addi	sp,sp,-8
   2bef4:	dfc00115 	stw	ra,4(sp)
   2bef8:	df000015 	stw	fp,0(sp)
   2befc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2bf00:	008000f4 	movhi	r2,3
   2bf04:	10815b04 	addi	r2,r2,1388
   2bf08:	10800017 	ldw	r2,0(r2)
   2bf0c:	10000526 	beq	r2,zero,2bf24 <alt_get_errno+0x34>
   2bf10:	008000f4 	movhi	r2,3
   2bf14:	10815b04 	addi	r2,r2,1388
   2bf18:	10800017 	ldw	r2,0(r2)
   2bf1c:	103ee83a 	callr	r2
   2bf20:	00000206 	br	2bf2c <alt_get_errno+0x3c>
   2bf24:	008000f4 	movhi	r2,3
   2bf28:	10882404 	addi	r2,r2,8336
}
   2bf2c:	e037883a 	mov	sp,fp
   2bf30:	dfc00117 	ldw	ra,4(sp)
   2bf34:	df000017 	ldw	fp,0(sp)
   2bf38:	dec00204 	addi	sp,sp,8
   2bf3c:	f800283a 	ret

0002bf40 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   2bf40:	defff904 	addi	sp,sp,-28
   2bf44:	dfc00615 	stw	ra,24(sp)
   2bf48:	df000515 	stw	fp,20(sp)
   2bf4c:	df000504 	addi	fp,sp,20
   2bf50:	e13ffd15 	stw	r4,-12(fp)
   2bf54:	e17ffe15 	stw	r5,-8(fp)
   2bf58:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2bf5c:	e0bffd17 	ldw	r2,-12(fp)
   2bf60:	10000716 	blt	r2,zero,2bf80 <write+0x40>
   2bf64:	e13ffd17 	ldw	r4,-12(fp)
   2bf68:	01400304 	movi	r5,12
   2bf6c:	00210140 	call	21014 <__mulsi3>
   2bf70:	00c000f4 	movhi	r3,3
   2bf74:	18fccf04 	addi	r3,r3,-3268
   2bf78:	10c5883a 	add	r2,r2,r3
   2bf7c:	00000106 	br	2bf84 <write+0x44>
   2bf80:	0005883a 	mov	r2,zero
   2bf84:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   2bf88:	e0bffb17 	ldw	r2,-20(fp)
   2bf8c:	10001f26 	beq	r2,zero,2c00c <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   2bf90:	e0bffb17 	ldw	r2,-20(fp)
   2bf94:	10800217 	ldw	r2,8(r2)
   2bf98:	108000cc 	andi	r2,r2,3
   2bf9c:	10001726 	beq	r2,zero,2bffc <write+0xbc>
   2bfa0:	e0bffb17 	ldw	r2,-20(fp)
   2bfa4:	10800017 	ldw	r2,0(r2)
   2bfa8:	10800617 	ldw	r2,24(r2)
   2bfac:	10001326 	beq	r2,zero,2bffc <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   2bfb0:	e0bffb17 	ldw	r2,-20(fp)
   2bfb4:	10800017 	ldw	r2,0(r2)
   2bfb8:	10c00617 	ldw	r3,24(r2)
   2bfbc:	e0bfff17 	ldw	r2,-4(fp)
   2bfc0:	e13ffb17 	ldw	r4,-20(fp)
   2bfc4:	e17ffe17 	ldw	r5,-8(fp)
   2bfc8:	100d883a 	mov	r6,r2
   2bfcc:	183ee83a 	callr	r3
   2bfd0:	e0bffc15 	stw	r2,-16(fp)
   2bfd4:	e0bffc17 	ldw	r2,-16(fp)
   2bfd8:	1000060e 	bge	r2,zero,2bff4 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   2bfdc:	002bef00 	call	2bef0 <alt_get_errno>
   2bfe0:	e0fffc17 	ldw	r3,-16(fp)
   2bfe4:	00c7c83a 	sub	r3,zero,r3
   2bfe8:	10c00015 	stw	r3,0(r2)
        return -1;
   2bfec:	00bfffc4 	movi	r2,-1
   2bff0:	00000a06 	br	2c01c <write+0xdc>
      }
      return rval;
   2bff4:	e0bffc17 	ldw	r2,-16(fp)
   2bff8:	00000806 	br	2c01c <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
   2bffc:	002bef00 	call	2bef0 <alt_get_errno>
   2c000:	00c00344 	movi	r3,13
   2c004:	10c00015 	stw	r3,0(r2)
   2c008:	00000306 	br	2c018 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   2c00c:	002bef00 	call	2bef0 <alt_get_errno>
   2c010:	00c01444 	movi	r3,81
   2c014:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   2c018:	00bfffc4 	movi	r2,-1
}
   2c01c:	e037883a 	mov	sp,fp
   2c020:	dfc00117 	ldw	ra,4(sp)
   2c024:	df000017 	ldw	fp,0(sp)
   2c028:	dec00204 	addi	sp,sp,8
   2c02c:	f800283a 	ret

0002c030 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   2c030:	defffd04 	addi	sp,sp,-12
   2c034:	dfc00215 	stw	ra,8(sp)
   2c038:	df000115 	stw	fp,4(sp)
   2c03c:	df000104 	addi	fp,sp,4
   2c040:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   2c044:	e13fff17 	ldw	r4,-4(fp)
   2c048:	014000f4 	movhi	r5,3
   2c04c:	29415804 	addi	r5,r5,1376
   2c050:	002d9400 	call	2d940 <alt_dev_llist_insert>
}
   2c054:	e037883a 	mov	sp,fp
   2c058:	dfc00117 	ldw	ra,4(sp)
   2c05c:	df000017 	ldw	fp,0(sp)
   2c060:	dec00204 	addi	sp,sp,8
   2c064:	f800283a 	ret

0002c068 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   2c068:	defffd04 	addi	sp,sp,-12
   2c06c:	dfc00215 	stw	ra,8(sp)
   2c070:	df000115 	stw	fp,4(sp)
   2c074:	df000104 	addi	fp,sp,4
   2c078:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU1, cpu1);
   2c07c:	002e36c0 	call	2e36c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   2c080:	00800044 	movi	r2,1
   2c084:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   2c088:	e037883a 	mov	sp,fp
   2c08c:	dfc00117 	ldw	ra,4(sp)
   2c090:	df000017 	ldw	fp,0(sp)
   2c094:	dec00204 	addi	sp,sp,8
   2c098:	f800283a 	ret

0002c09c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   2c09c:	defffe04 	addi	sp,sp,-8
   2c0a0:	dfc00115 	stw	ra,4(sp)
   2c0a4:	df000015 	stw	fp,0(sp)
   2c0a8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER1, timer1);
   2c0ac:	01000134 	movhi	r4,4
   2c0b0:	21043004 	addi	r4,r4,4288
   2c0b4:	000b883a 	mov	r5,zero
   2c0b8:	01800044 	movi	r6,1
   2c0bc:	01c0fa04 	movi	r7,1000
   2c0c0:	002d0e40 	call	2d0e4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_FIFO_INIT ( FIFO1TO2A, fifo1to2A);
   2c0c4:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO1TO2B, fifo1to2B);
   2c0c8:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO1TO2C, fifo1to2C);
   2c0cc:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO1TO4, fifo1to4);
   2c0d0:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO1TO5, fifo1to5);
   2c0d4:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO1TO6, fifo1to6);
   2c0d8:	0001883a 	nop
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART1, jtag_uart1);
   2c0dc:	010000f4 	movhi	r4,3
   2c0e0:	213d3904 	addi	r4,r4,-2844
   2c0e4:	000b883a 	mov	r5,zero
   2c0e8:	01800404 	movi	r6,16
   2c0ec:	002c7700 	call	2c770 <altera_avalon_jtag_uart_init>
   2c0f0:	010000f4 	movhi	r4,3
   2c0f4:	213d2f04 	addi	r4,r4,-2884
   2c0f8:	002c0300 	call	2c030 <alt_dev_reg>
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
   2c0fc:	010000f4 	movhi	r4,3
   2c100:	21014704 	addi	r4,r4,1308
   2c104:	002dc3c0 	call	2dc3c <alt_fs_reg>
}
   2c108:	e037883a 	mov	sp,fp
   2c10c:	dfc00117 	ldw	ra,4(sp)
   2c110:	df000017 	ldw	fp,0(sp)
   2c114:	dec00204 	addi	sp,sp,8
   2c118:	f800283a 	ret

0002c11c <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
   2c11c:	defffa04 	addi	sp,sp,-24
   2c120:	dfc00515 	stw	ra,20(sp)
   2c124:	df000415 	stw	fp,16(sp)
   2c128:	df000404 	addi	fp,sp,16
   2c12c:	e13ffc15 	stw	r4,-16(fp)
   2c130:	e17ffd15 	stw	r5,-12(fp)
   2c134:	e1bffe15 	stw	r6,-8(fp)
   2c138:	e1ffff15 	stw	r7,-4(fp)
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
   2c13c:	e13ffc17 	ldw	r4,-16(fp)
   2c140:	01400fc4 	movi	r5,63
   2c144:	002c2e80 	call	2c2e8 <altera_avalon_fifo_clear_event>
   2c148:	10000226 	beq	r2,zero,2c154 <altera_avalon_fifo_init+0x38>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   2c14c:	00bfffc4 	movi	r2,-1
   2c150:	00001306 	br	2c1a0 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
   2c154:	e13ffc17 	ldw	r4,-16(fp)
   2c158:	e17ffd17 	ldw	r5,-12(fp)
   2c15c:	002c3440 	call	2c344 <altera_avalon_fifo_write_ienable>
   2c160:	10000226 	beq	r2,zero,2c16c <altera_avalon_fifo_init+0x50>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   2c164:	00bfff84 	movi	r2,-2
   2c168:	00000d06 	br	2c1a0 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
   2c16c:	e13ffc17 	ldw	r4,-16(fp)
   2c170:	e17fff17 	ldw	r5,-4(fp)
   2c174:	002c39c0 	call	2c39c <altera_avalon_fifo_write_almostfull>
   2c178:	10000226 	beq	r2,zero,2c184 <altera_avalon_fifo_init+0x68>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   2c17c:	00bfff44 	movi	r2,-3
   2c180:	00000706 	br	2c1a0 <altera_avalon_fifo_init+0x84>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
   2c184:	e13ffc17 	ldw	r4,-16(fp)
   2c188:	e17ffe17 	ldw	r5,-8(fp)
   2c18c:	002c3f40 	call	2c3f4 <altera_avalon_fifo_write_almostempty>
   2c190:	10000226 	beq	r2,zero,2c19c <altera_avalon_fifo_init+0x80>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   2c194:	00bfff44 	movi	r2,-3
   2c198:	00000106 	br	2c1a0 <altera_avalon_fifo_init+0x84>
    }

    return ALTERA_AVALON_FIFO_OK;
   2c19c:	0005883a 	mov	r2,zero
}
   2c1a0:	e037883a 	mov	sp,fp
   2c1a4:	dfc00117 	ldw	ra,4(sp)
   2c1a8:	df000017 	ldw	fp,0(sp)
   2c1ac:	dec00204 	addi	sp,sp,8
   2c1b0:	f800283a 	ret

0002c1b4 <altera_avalon_fifo_read_status>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
   2c1b4:	defffd04 	addi	sp,sp,-12
   2c1b8:	df000215 	stw	fp,8(sp)
   2c1bc:	df000204 	addi	fp,sp,8
   2c1c0:	e13ffe15 	stw	r4,-8(fp)
   2c1c4:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   2c1c8:	e0bffe17 	ldw	r2,-8(fp)
   2c1cc:	10800104 	addi	r2,r2,4
   2c1d0:	10800037 	ldwio	r2,0(r2)
   2c1d4:	1007883a 	mov	r3,r2
   2c1d8:	e0bfff17 	ldw	r2,-4(fp)
   2c1dc:	1884703a 	and	r2,r3,r2
}
   2c1e0:	e037883a 	mov	sp,fp
   2c1e4:	df000017 	ldw	fp,0(sp)
   2c1e8:	dec00104 	addi	sp,sp,4
   2c1ec:	f800283a 	ret

0002c1f0 <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
   2c1f0:	defffd04 	addi	sp,sp,-12
   2c1f4:	df000215 	stw	fp,8(sp)
   2c1f8:	df000204 	addi	fp,sp,8
   2c1fc:	e13ffe15 	stw	r4,-8(fp)
   2c200:	e17fff15 	stw	r5,-4(fp)
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
   2c204:	e0bffe17 	ldw	r2,-8(fp)
   2c208:	10800304 	addi	r2,r2,12
   2c20c:	10800037 	ldwio	r2,0(r2)
   2c210:	1007883a 	mov	r3,r2
   2c214:	e0bfff17 	ldw	r2,-4(fp)
   2c218:	1884703a 	and	r2,r3,r2
}
   2c21c:	e037883a 	mov	sp,fp
   2c220:	df000017 	ldw	fp,0(sp)
   2c224:	dec00104 	addi	sp,sp,4
   2c228:	f800283a 	ret

0002c22c <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
   2c22c:	defffe04 	addi	sp,sp,-8
   2c230:	df000115 	stw	fp,4(sp)
   2c234:	df000104 	addi	fp,sp,4
   2c238:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
   2c23c:	e0bfff17 	ldw	r2,-4(fp)
   2c240:	10800404 	addi	r2,r2,16
   2c244:	10800037 	ldwio	r2,0(r2)
}
   2c248:	e037883a 	mov	sp,fp
   2c24c:	df000017 	ldw	fp,0(sp)
   2c250:	dec00104 	addi	sp,sp,4
   2c254:	f800283a 	ret

0002c258 <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
   2c258:	defffe04 	addi	sp,sp,-8
   2c25c:	df000115 	stw	fp,4(sp)
   2c260:	df000104 	addi	fp,sp,4
   2c264:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
   2c268:	e0bfff17 	ldw	r2,-4(fp)
   2c26c:	10800504 	addi	r2,r2,20
   2c270:	10800037 	ldwio	r2,0(r2)
}
   2c274:	e037883a 	mov	sp,fp
   2c278:	df000017 	ldw	fp,0(sp)
   2c27c:	dec00104 	addi	sp,sp,4
   2c280:	f800283a 	ret

0002c284 <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
   2c284:	defffd04 	addi	sp,sp,-12
   2c288:	df000215 	stw	fp,8(sp)
   2c28c:	df000204 	addi	fp,sp,8
   2c290:	e13ffe15 	stw	r4,-8(fp)
   2c294:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
   2c298:	e0bffe17 	ldw	r2,-8(fp)
   2c29c:	10800204 	addi	r2,r2,8
   2c2a0:	10800037 	ldwio	r2,0(r2)
   2c2a4:	1007883a 	mov	r3,r2
   2c2a8:	e0bfff17 	ldw	r2,-4(fp)
   2c2ac:	1884703a 	and	r2,r3,r2
}
   2c2b0:	e037883a 	mov	sp,fp
   2c2b4:	df000017 	ldw	fp,0(sp)
   2c2b8:	dec00104 	addi	sp,sp,4
   2c2bc:	f800283a 	ret

0002c2c0 <altera_avalon_fifo_read_level>:

int altera_avalon_fifo_read_level(alt_u32 address)
{
   2c2c0:	defffe04 	addi	sp,sp,-8
   2c2c4:	df000115 	stw	fp,4(sp)
   2c2c8:	df000104 	addi	fp,sp,4
   2c2cc:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
   2c2d0:	e0bfff17 	ldw	r2,-4(fp)
   2c2d4:	10800037 	ldwio	r2,0(r2)
}
   2c2d8:	e037883a 	mov	sp,fp
   2c2dc:	df000017 	ldw	fp,0(sp)
   2c2e0:	dec00104 	addi	sp,sp,4
   2c2e4:	f800283a 	ret

0002c2e8 <altera_avalon_fifo_clear_event>:

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
   2c2e8:	defffd04 	addi	sp,sp,-12
   2c2ec:	df000215 	stw	fp,8(sp)
   2c2f0:	df000204 	addi	fp,sp,8
   2c2f4:	e13ffe15 	stw	r4,-8(fp)
   2c2f8:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
   2c2fc:	e0bffe17 	ldw	r2,-8(fp)
   2c300:	10800204 	addi	r2,r2,8
   2c304:	e0ffff17 	ldw	r3,-4(fp)
   2c308:	10c00035 	stwio	r3,0(r2)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
   2c30c:	e0bffe17 	ldw	r2,-8(fp)
   2c310:	10800204 	addi	r2,r2,8
   2c314:	10800037 	ldwio	r2,0(r2)
   2c318:	1007883a 	mov	r3,r2
   2c31c:	e0bfff17 	ldw	r2,-4(fp)
   2c320:	1884703a 	and	r2,r3,r2
   2c324:	1000021e 	bne	r2,zero,2c330 <altera_avalon_fifo_clear_event+0x48>
        return ALTERA_AVALON_FIFO_OK;
   2c328:	0005883a 	mov	r2,zero
   2c32c:	00000106 	br	2c334 <altera_avalon_fifo_clear_event+0x4c>
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   2c330:	00bfffc4 	movi	r2,-1
}
   2c334:	e037883a 	mov	sp,fp
   2c338:	df000017 	ldw	fp,0(sp)
   2c33c:	dec00104 	addi	sp,sp,4
   2c340:	f800283a 	ret

0002c344 <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
   2c344:	defffd04 	addi	sp,sp,-12
   2c348:	df000215 	stw	fp,8(sp)
   2c34c:	df000204 	addi	fp,sp,8
   2c350:	e13ffe15 	stw	r4,-8(fp)
   2c354:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
   2c358:	e0bffe17 	ldw	r2,-8(fp)
   2c35c:	10800304 	addi	r2,r2,12
   2c360:	e0ffff17 	ldw	r3,-4(fp)
   2c364:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
   2c368:	e0bffe17 	ldw	r2,-8(fp)
   2c36c:	10800304 	addi	r2,r2,12
   2c370:	10800037 	ldwio	r2,0(r2)
   2c374:	1007883a 	mov	r3,r2
   2c378:	e0bfff17 	ldw	r2,-4(fp)
   2c37c:	1880021e 	bne	r3,r2,2c388 <altera_avalon_fifo_write_ienable+0x44>
        return ALTERA_AVALON_FIFO_OK;
   2c380:	0005883a 	mov	r2,zero
   2c384:	00000106 	br	2c38c <altera_avalon_fifo_write_ienable+0x48>
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   2c388:	00bfff84 	movi	r2,-2
}
   2c38c:	e037883a 	mov	sp,fp
   2c390:	df000017 	ldw	fp,0(sp)
   2c394:	dec00104 	addi	sp,sp,4
   2c398:	f800283a 	ret

0002c39c <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
   2c39c:	defffd04 	addi	sp,sp,-12
   2c3a0:	df000215 	stw	fp,8(sp)
   2c3a4:	df000204 	addi	fp,sp,8
   2c3a8:	e13ffe15 	stw	r4,-8(fp)
   2c3ac:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
   2c3b0:	e0bffe17 	ldw	r2,-8(fp)
   2c3b4:	10800404 	addi	r2,r2,16
   2c3b8:	e0ffff17 	ldw	r3,-4(fp)
   2c3bc:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
   2c3c0:	e0bffe17 	ldw	r2,-8(fp)
   2c3c4:	10800404 	addi	r2,r2,16
   2c3c8:	10800037 	ldwio	r2,0(r2)
   2c3cc:	1007883a 	mov	r3,r2
   2c3d0:	e0bfff17 	ldw	r2,-4(fp)
   2c3d4:	1880021e 	bne	r3,r2,2c3e0 <altera_avalon_fifo_write_almostfull+0x44>
        return ALTERA_AVALON_FIFO_OK;
   2c3d8:	0005883a 	mov	r2,zero
   2c3dc:	00000106 	br	2c3e4 <altera_avalon_fifo_write_almostfull+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   2c3e0:	00bfff44 	movi	r2,-3
}
   2c3e4:	e037883a 	mov	sp,fp
   2c3e8:	df000017 	ldw	fp,0(sp)
   2c3ec:	dec00104 	addi	sp,sp,4
   2c3f0:	f800283a 	ret

0002c3f4 <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
   2c3f4:	defffd04 	addi	sp,sp,-12
   2c3f8:	df000215 	stw	fp,8(sp)
   2c3fc:	df000204 	addi	fp,sp,8
   2c400:	e13ffe15 	stw	r4,-8(fp)
   2c404:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
   2c408:	e0bffe17 	ldw	r2,-8(fp)
   2c40c:	10800504 	addi	r2,r2,20
   2c410:	e0ffff17 	ldw	r3,-4(fp)
   2c414:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
   2c418:	e0bffe17 	ldw	r2,-8(fp)
   2c41c:	10800504 	addi	r2,r2,20
   2c420:	10800037 	ldwio	r2,0(r2)
   2c424:	1007883a 	mov	r3,r2
   2c428:	e0bfff17 	ldw	r2,-4(fp)
   2c42c:	1880021e 	bne	r3,r2,2c438 <altera_avalon_fifo_write_almostempty+0x44>
        return ALTERA_AVALON_FIFO_OK;
   2c430:	0005883a 	mov	r2,zero
   2c434:	00000106 	br	2c43c <altera_avalon_fifo_write_almostempty+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   2c438:	00bfff44 	movi	r2,-3
}
   2c43c:	e037883a 	mov	sp,fp
   2c440:	df000017 	ldw	fp,0(sp)
   2c444:	dec00104 	addi	sp,sp,4
   2c448:	f800283a 	ret

0002c44c <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
   2c44c:	defffb04 	addi	sp,sp,-20
   2c450:	dfc00415 	stw	ra,16(sp)
   2c454:	df000315 	stw	fp,12(sp)
   2c458:	df000304 	addi	fp,sp,12
   2c45c:	e13ffd15 	stw	r4,-12(fp)
   2c460:	e17ffe15 	stw	r5,-8(fp)
   2c464:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   2c468:	e13ffe17 	ldw	r4,-8(fp)
   2c46c:	01400044 	movi	r5,1
   2c470:	002c1b40 	call	2c1b4 <altera_avalon_fifo_read_status>
   2c474:	1000051e 	bne	r2,zero,2c48c <altera_avalon_fifo_write_fifo+0x40>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
   2c478:	e0bffd17 	ldw	r2,-12(fp)
   2c47c:	e0ffff17 	ldw	r3,-4(fp)
   2c480:	10c00035 	stwio	r3,0(r2)
        return ALTERA_AVALON_FIFO_OK;
   2c484:	0005883a 	mov	r2,zero
   2c488:	00000106 	br	2c490 <altera_avalon_fifo_write_fifo+0x44>
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
   2c48c:	00bfff04 	movi	r2,-4
    }
}
   2c490:	e037883a 	mov	sp,fp
   2c494:	dfc00117 	ldw	ra,4(sp)
   2c498:	df000017 	ldw	fp,0(sp)
   2c49c:	dec00204 	addi	sp,sp,8
   2c4a0:	f800283a 	ret

0002c4a4 <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
   2c4a4:	defffa04 	addi	sp,sp,-24
   2c4a8:	dfc00515 	stw	ra,20(sp)
   2c4ac:	df000415 	stw	fp,16(sp)
   2c4b0:	df000404 	addi	fp,sp,16
   2c4b4:	e13ffd15 	stw	r4,-12(fp)
   2c4b8:	e17ffe15 	stw	r5,-8(fp)
   2c4bc:	e1bfff15 	stw	r6,-4(fp)
    int return_val = 0;
   2c4c0:	e03ffc15 	stw	zero,-16(fp)
    *data = 0;
   2c4c4:	e0bfff17 	ldw	r2,-4(fp)
   2c4c8:	10000015 	stw	zero,0(r2)
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   2c4cc:	e13ffe17 	ldw	r4,-8(fp)
   2c4d0:	01400084 	movi	r5,2
   2c4d4:	002c1b40 	call	2c1b4 <altera_avalon_fifo_read_status>
   2c4d8:	1000071e 	bne	r2,zero,2c4f8 <altera_avalon_read_fifo+0x54>
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
   2c4dc:	e13ffe17 	ldw	r4,-8(fp)
   2c4e0:	002c2c00 	call	2c2c0 <altera_avalon_fifo_read_level>
   2c4e4:	e0bffc15 	stw	r2,-16(fp)
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   2c4e8:	e0bffd17 	ldw	r2,-12(fp)
   2c4ec:	10c00037 	ldwio	r3,0(r2)
   2c4f0:	e0bfff17 	ldw	r2,-4(fp)
   2c4f4:	10c00015 	stw	r3,0(r2)
    
    }
    return return_val;
   2c4f8:	e0bffc17 	ldw	r2,-16(fp)
}
   2c4fc:	e037883a 	mov	sp,fp
   2c500:	dfc00117 	ldw	ra,4(sp)
   2c504:	df000017 	ldw	fp,0(sp)
   2c508:	dec00204 	addi	sp,sp,8
   2c50c:	f800283a 	ret

0002c510 <altera_avalon_fifo_read_fifo>:

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
   2c510:	defffc04 	addi	sp,sp,-16
   2c514:	dfc00315 	stw	ra,12(sp)
   2c518:	df000215 	stw	fp,8(sp)
   2c51c:	df000204 	addi	fp,sp,8
   2c520:	e13ffe15 	stw	r4,-8(fp)
   2c524:	e17fff15 	stw	r5,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   2c528:	e13fff17 	ldw	r4,-4(fp)
   2c52c:	01400084 	movi	r5,2
   2c530:	002c1b40 	call	2c1b4 <altera_avalon_fifo_read_status>
   2c534:	1000031e 	bne	r2,zero,2c544 <altera_avalon_fifo_read_fifo+0x34>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   2c538:	e0bffe17 	ldw	r2,-8(fp)
   2c53c:	10800037 	ldwio	r2,0(r2)
   2c540:	00000106 	br	2c548 <altera_avalon_fifo_read_fifo+0x38>
    }
    return 0;
   2c544:	0005883a 	mov	r2,zero
}
   2c548:	e037883a 	mov	sp,fp
   2c54c:	dfc00117 	ldw	ra,4(sp)
   2c550:	df000017 	ldw	fp,0(sp)
   2c554:	dec00204 	addi	sp,sp,8
   2c558:	f800283a 	ret

0002c55c <altera_avalon_fifo_write_other_info>:

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
   2c55c:	defffb04 	addi	sp,sp,-20
   2c560:	dfc00415 	stw	ra,16(sp)
   2c564:	df000315 	stw	fp,12(sp)
   2c568:	df000304 	addi	fp,sp,12
   2c56c:	e13ffd15 	stw	r4,-12(fp)
   2c570:	e17ffe15 	stw	r5,-8(fp)
   2c574:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   2c578:	e13ffe17 	ldw	r4,-8(fp)
   2c57c:	01400044 	movi	r5,1
   2c580:	002c1b40 	call	2c1b4 <altera_avalon_fifo_read_status>
   2c584:	1000061e 	bne	r2,zero,2c5a0 <altera_avalon_fifo_write_other_info+0x44>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
   2c588:	e0bffd17 	ldw	r2,-12(fp)
   2c58c:	10800104 	addi	r2,r2,4
   2c590:	e0ffff17 	ldw	r3,-4(fp)
   2c594:	10c00035 	stwio	r3,0(r2)
	return ALTERA_AVALON_FIFO_OK;
   2c598:	0005883a 	mov	r2,zero
   2c59c:	00000106 	br	2c5a4 <altera_avalon_fifo_write_other_info+0x48>
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
   2c5a0:	00bfff04 	movi	r2,-4
    }
}
   2c5a4:	e037883a 	mov	sp,fp
   2c5a8:	dfc00117 	ldw	ra,4(sp)
   2c5ac:	df000017 	ldw	fp,0(sp)
   2c5b0:	dec00204 	addi	sp,sp,8
   2c5b4:	f800283a 	ret

0002c5b8 <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
   2c5b8:	defffe04 	addi	sp,sp,-8
   2c5bc:	df000115 	stw	fp,4(sp)
   2c5c0:	df000104 	addi	fp,sp,4
   2c5c4:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
   2c5c8:	e0bfff17 	ldw	r2,-4(fp)
   2c5cc:	10800104 	addi	r2,r2,4
   2c5d0:	10800037 	ldwio	r2,0(r2)
}
   2c5d4:	e037883a 	mov	sp,fp
   2c5d8:	df000017 	ldw	fp,0(sp)
   2c5dc:	dec00104 	addi	sp,sp,4
   2c5e0:	f800283a 	ret

0002c5e4 <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
   2c5e4:	defffe04 	addi	sp,sp,-8
   2c5e8:	df000115 	stw	fp,4(sp)
   2c5ec:	df000104 	addi	fp,sp,4
   2c5f0:	e13fff15 	stw	r4,-4(fp)
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
   2c5f4:	e0bfff17 	ldw	r2,-4(fp)
   2c5f8:	10800037 	ldwio	r2,0(r2)
}
   2c5fc:	e037883a 	mov	sp,fp
   2c600:	df000017 	ldw	fp,0(sp)
   2c604:	dec00104 	addi	sp,sp,4
   2c608:	f800283a 	ret

0002c60c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   2c60c:	defffa04 	addi	sp,sp,-24
   2c610:	dfc00515 	stw	ra,20(sp)
   2c614:	df000415 	stw	fp,16(sp)
   2c618:	df000404 	addi	fp,sp,16
   2c61c:	e13ffd15 	stw	r4,-12(fp)
   2c620:	e17ffe15 	stw	r5,-8(fp)
   2c624:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2c628:	e0bffd17 	ldw	r2,-12(fp)
   2c62c:	10800017 	ldw	r2,0(r2)
   2c630:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   2c634:	e0bffc17 	ldw	r2,-16(fp)
   2c638:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   2c63c:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   2c640:	10800217 	ldw	r2,8(r2)
   2c644:	1809883a 	mov	r4,r3
   2c648:	e17ffe17 	ldw	r5,-8(fp)
   2c64c:	e1bfff17 	ldw	r6,-4(fp)
   2c650:	100f883a 	mov	r7,r2
   2c654:	002cc340 	call	2cc34 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   2c658:	e037883a 	mov	sp,fp
   2c65c:	dfc00117 	ldw	ra,4(sp)
   2c660:	df000017 	ldw	fp,0(sp)
   2c664:	dec00204 	addi	sp,sp,8
   2c668:	f800283a 	ret

0002c66c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   2c66c:	defffa04 	addi	sp,sp,-24
   2c670:	dfc00515 	stw	ra,20(sp)
   2c674:	df000415 	stw	fp,16(sp)
   2c678:	df000404 	addi	fp,sp,16
   2c67c:	e13ffd15 	stw	r4,-12(fp)
   2c680:	e17ffe15 	stw	r5,-8(fp)
   2c684:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2c688:	e0bffd17 	ldw	r2,-12(fp)
   2c68c:	10800017 	ldw	r2,0(r2)
   2c690:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   2c694:	e0bffc17 	ldw	r2,-16(fp)
   2c698:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   2c69c:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   2c6a0:	10800217 	ldw	r2,8(r2)
   2c6a4:	1809883a 	mov	r4,r3
   2c6a8:	e17ffe17 	ldw	r5,-8(fp)
   2c6ac:	e1bfff17 	ldw	r6,-4(fp)
   2c6b0:	100f883a 	mov	r7,r2
   2c6b4:	002ce4c0 	call	2ce4c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   2c6b8:	e037883a 	mov	sp,fp
   2c6bc:	dfc00117 	ldw	ra,4(sp)
   2c6c0:	df000017 	ldw	fp,0(sp)
   2c6c4:	dec00204 	addi	sp,sp,8
   2c6c8:	f800283a 	ret

0002c6cc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   2c6cc:	defffc04 	addi	sp,sp,-16
   2c6d0:	dfc00315 	stw	ra,12(sp)
   2c6d4:	df000215 	stw	fp,8(sp)
   2c6d8:	df000204 	addi	fp,sp,8
   2c6dc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2c6e0:	e0bfff17 	ldw	r2,-4(fp)
   2c6e4:	10800017 	ldw	r2,0(r2)
   2c6e8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   2c6ec:	e0bffe17 	ldw	r2,-8(fp)
   2c6f0:	10c00a04 	addi	r3,r2,40
   2c6f4:	e0bfff17 	ldw	r2,-4(fp)
   2c6f8:	10800217 	ldw	r2,8(r2)
   2c6fc:	1809883a 	mov	r4,r3
   2c700:	100b883a 	mov	r5,r2
   2c704:	002cad80 	call	2cad8 <altera_avalon_jtag_uart_close>
}
   2c708:	e037883a 	mov	sp,fp
   2c70c:	dfc00117 	ldw	ra,4(sp)
   2c710:	df000017 	ldw	fp,0(sp)
   2c714:	dec00204 	addi	sp,sp,8
   2c718:	f800283a 	ret

0002c71c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   2c71c:	defffa04 	addi	sp,sp,-24
   2c720:	dfc00515 	stw	ra,20(sp)
   2c724:	df000415 	stw	fp,16(sp)
   2c728:	df000404 	addi	fp,sp,16
   2c72c:	e13ffd15 	stw	r4,-12(fp)
   2c730:	e17ffe15 	stw	r5,-8(fp)
   2c734:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   2c738:	e0bffd17 	ldw	r2,-12(fp)
   2c73c:	10800017 	ldw	r2,0(r2)
   2c740:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   2c744:	e0bffc17 	ldw	r2,-16(fp)
   2c748:	10800a04 	addi	r2,r2,40
   2c74c:	1009883a 	mov	r4,r2
   2c750:	e17ffe17 	ldw	r5,-8(fp)
   2c754:	e1bfff17 	ldw	r6,-4(fp)
   2c758:	002cb400 	call	2cb40 <altera_avalon_jtag_uart_ioctl>
}
   2c75c:	e037883a 	mov	sp,fp
   2c760:	dfc00117 	ldw	ra,4(sp)
   2c764:	df000017 	ldw	fp,0(sp)
   2c768:	dec00204 	addi	sp,sp,8
   2c76c:	f800283a 	ret

0002c770 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   2c770:	defffa04 	addi	sp,sp,-24
   2c774:	dfc00515 	stw	ra,20(sp)
   2c778:	df000415 	stw	fp,16(sp)
   2c77c:	df000404 	addi	fp,sp,16
   2c780:	e13ffd15 	stw	r4,-12(fp)
   2c784:	e17ffe15 	stw	r5,-8(fp)
   2c788:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2c78c:	e0bffd17 	ldw	r2,-12(fp)
   2c790:	00c00044 	movi	r3,1
   2c794:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   2c798:	e0bffd17 	ldw	r2,-12(fp)
   2c79c:	10800017 	ldw	r2,0(r2)
   2c7a0:	10800104 	addi	r2,r2,4
   2c7a4:	e0fffd17 	ldw	r3,-12(fp)
   2c7a8:	18c00817 	ldw	r3,32(r3)
   2c7ac:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   2c7b0:	e0fffe17 	ldw	r3,-8(fp)
   2c7b4:	e0bfff17 	ldw	r2,-4(fp)
   2c7b8:	d8000015 	stw	zero,0(sp)
   2c7bc:	1809883a 	mov	r4,r3
   2c7c0:	100b883a 	mov	r5,r2
   2c7c4:	018000f4 	movhi	r6,3
   2c7c8:	31b20c04 	addi	r6,r6,-14288
   2c7cc:	e1fffd17 	ldw	r7,-12(fp)
   2c7d0:	002ddb00 	call	2ddb0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   2c7d4:	e0bffd17 	ldw	r2,-12(fp)
   2c7d8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   2c7dc:	e0bffd17 	ldw	r2,-12(fp)
   2c7e0:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   2c7e4:	008000f4 	movhi	r2,3
   2c7e8:	10882f04 	addi	r2,r2,8380
   2c7ec:	10800017 	ldw	r2,0(r2)
   2c7f0:	1809883a 	mov	r4,r3
   2c7f4:	100b883a 	mov	r5,r2
   2c7f8:	018000f4 	movhi	r6,3
   2c7fc:	31b28d04 	addi	r6,r6,-13772
   2c800:	e1fffd17 	ldw	r7,-12(fp)
   2c804:	002d7940 	call	2d794 <alt_alarm_start>
   2c808:	1000040e 	bge	r2,zero,2c81c <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   2c80c:	e0bffd17 	ldw	r2,-12(fp)
   2c810:	00e00034 	movhi	r3,32768
   2c814:	18ffffc4 	addi	r3,r3,-1
   2c818:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   2c81c:	e037883a 	mov	sp,fp
   2c820:	dfc00117 	ldw	ra,4(sp)
   2c824:	df000017 	ldw	fp,0(sp)
   2c828:	dec00204 	addi	sp,sp,8
   2c82c:	f800283a 	ret

0002c830 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   2c830:	defff804 	addi	sp,sp,-32
   2c834:	df000715 	stw	fp,28(sp)
   2c838:	df000704 	addi	fp,sp,28
   2c83c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   2c840:	e0bfff17 	ldw	r2,-4(fp)
   2c844:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   2c848:	e0bffb17 	ldw	r2,-20(fp)
   2c84c:	10800017 	ldw	r2,0(r2)
   2c850:	e0bffc15 	stw	r2,-16(fp)
   2c854:	00000106 	br	2c85c <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
   2c858:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2c85c:	e0bffc17 	ldw	r2,-16(fp)
   2c860:	10800104 	addi	r2,r2,4
   2c864:	10800037 	ldwio	r2,0(r2)
   2c868:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   2c86c:	e0bffd17 	ldw	r2,-12(fp)
   2c870:	1080c00c 	andi	r2,r2,768
   2c874:	10006a26 	beq	r2,zero,2ca20 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   2c878:	e0bffd17 	ldw	r2,-12(fp)
   2c87c:	1080400c 	andi	r2,r2,256
   2c880:	10003326 	beq	r2,zero,2c950 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   2c884:	00800074 	movhi	r2,1
   2c888:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2c88c:	e0bffb17 	ldw	r2,-20(fp)
   2c890:	10800a17 	ldw	r2,40(r2)
   2c894:	10800044 	addi	r2,r2,1
   2c898:	1081ffcc 	andi	r2,r2,2047
   2c89c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   2c8a0:	e0bffb17 	ldw	r2,-20(fp)
   2c8a4:	10c00b17 	ldw	r3,44(r2)
   2c8a8:	e0bffe17 	ldw	r2,-8(fp)
   2c8ac:	18801426 	beq	r3,r2,2c900 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   2c8b0:	e0bffc17 	ldw	r2,-16(fp)
   2c8b4:	10800037 	ldwio	r2,0(r2)
   2c8b8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   2c8bc:	e0bff917 	ldw	r2,-28(fp)
   2c8c0:	10a0000c 	andi	r2,r2,32768
   2c8c4:	10001026 	beq	r2,zero,2c908 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   2c8c8:	e0bffb17 	ldw	r2,-20(fp)
   2c8cc:	10800a17 	ldw	r2,40(r2)
   2c8d0:	e0fff917 	ldw	r3,-28(fp)
   2c8d4:	e13ffb17 	ldw	r4,-20(fp)
   2c8d8:	2085883a 	add	r2,r4,r2
   2c8dc:	10800e04 	addi	r2,r2,56
   2c8e0:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2c8e4:	e0bffb17 	ldw	r2,-20(fp)
   2c8e8:	10800a17 	ldw	r2,40(r2)
   2c8ec:	10800044 	addi	r2,r2,1
   2c8f0:	10c1ffcc 	andi	r3,r2,2047
   2c8f4:	e0bffb17 	ldw	r2,-20(fp)
   2c8f8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   2c8fc:	003fe306 	br	2c88c <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   2c900:	0001883a 	nop
   2c904:	00000106 	br	2c90c <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   2c908:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   2c90c:	e0bff917 	ldw	r2,-28(fp)
   2c910:	10bfffec 	andhi	r2,r2,65535
   2c914:	10000e26 	beq	r2,zero,2c950 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2c918:	e0bffb17 	ldw	r2,-20(fp)
   2c91c:	10c00817 	ldw	r3,32(r2)
   2c920:	00bfff84 	movi	r2,-2
   2c924:	1886703a 	and	r3,r3,r2
   2c928:	e0bffb17 	ldw	r2,-20(fp)
   2c92c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   2c930:	e0bffc17 	ldw	r2,-16(fp)
   2c934:	10800104 	addi	r2,r2,4
   2c938:	e0fffb17 	ldw	r3,-20(fp)
   2c93c:	18c00817 	ldw	r3,32(r3)
   2c940:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2c944:	e0bffc17 	ldw	r2,-16(fp)
   2c948:	10800104 	addi	r2,r2,4
   2c94c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   2c950:	e0bffd17 	ldw	r2,-12(fp)
   2c954:	1080800c 	andi	r2,r2,512
   2c958:	103fbf26 	beq	r2,zero,2c858 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   2c95c:	e0bffd17 	ldw	r2,-12(fp)
   2c960:	1004d43a 	srli	r2,r2,16
   2c964:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   2c968:	00001406 	br	2c9bc <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   2c96c:	e0bffc17 	ldw	r2,-16(fp)
   2c970:	e0fffb17 	ldw	r3,-20(fp)
   2c974:	18c00d17 	ldw	r3,52(r3)
   2c978:	e13ffb17 	ldw	r4,-20(fp)
   2c97c:	20c7883a 	add	r3,r4,r3
   2c980:	18c20e04 	addi	r3,r3,2104
   2c984:	18c00003 	ldbu	r3,0(r3)
   2c988:	18c03fcc 	andi	r3,r3,255
   2c98c:	18c0201c 	xori	r3,r3,128
   2c990:	18ffe004 	addi	r3,r3,-128
   2c994:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2c998:	e0bffb17 	ldw	r2,-20(fp)
   2c99c:	10800d17 	ldw	r2,52(r2)
   2c9a0:	10800044 	addi	r2,r2,1
   2c9a4:	10c1ffcc 	andi	r3,r2,2047
   2c9a8:	e0bffb17 	ldw	r2,-20(fp)
   2c9ac:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   2c9b0:	e0bffa17 	ldw	r2,-24(fp)
   2c9b4:	10bfffc4 	addi	r2,r2,-1
   2c9b8:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   2c9bc:	e0bffa17 	ldw	r2,-24(fp)
   2c9c0:	10000526 	beq	r2,zero,2c9d8 <altera_avalon_jtag_uart_irq+0x1a8>
   2c9c4:	e0bffb17 	ldw	r2,-20(fp)
   2c9c8:	10c00d17 	ldw	r3,52(r2)
   2c9cc:	e0bffb17 	ldw	r2,-20(fp)
   2c9d0:	10800c17 	ldw	r2,48(r2)
   2c9d4:	18bfe51e 	bne	r3,r2,2c96c <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   2c9d8:	e0bffa17 	ldw	r2,-24(fp)
   2c9dc:	103f9e26 	beq	r2,zero,2c858 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   2c9e0:	e0bffb17 	ldw	r2,-20(fp)
   2c9e4:	10c00817 	ldw	r3,32(r2)
   2c9e8:	00bfff44 	movi	r2,-3
   2c9ec:	1886703a 	and	r3,r3,r2
   2c9f0:	e0bffb17 	ldw	r2,-20(fp)
   2c9f4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2c9f8:	e0bffb17 	ldw	r2,-20(fp)
   2c9fc:	10800017 	ldw	r2,0(r2)
   2ca00:	10800104 	addi	r2,r2,4
   2ca04:	e0fffb17 	ldw	r3,-20(fp)
   2ca08:	18c00817 	ldw	r3,32(r3)
   2ca0c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2ca10:	e0bffc17 	ldw	r2,-16(fp)
   2ca14:	10800104 	addi	r2,r2,4
   2ca18:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   2ca1c:	003f8e06 	br	2c858 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   2ca20:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   2ca24:	e037883a 	mov	sp,fp
   2ca28:	df000017 	ldw	fp,0(sp)
   2ca2c:	dec00104 	addi	sp,sp,4
   2ca30:	f800283a 	ret

0002ca34 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   2ca34:	defffc04 	addi	sp,sp,-16
   2ca38:	df000315 	stw	fp,12(sp)
   2ca3c:	df000304 	addi	fp,sp,12
   2ca40:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   2ca44:	e0bfff17 	ldw	r2,-4(fp)
   2ca48:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   2ca4c:	e0bffd17 	ldw	r2,-12(fp)
   2ca50:	10800017 	ldw	r2,0(r2)
   2ca54:	10800104 	addi	r2,r2,4
   2ca58:	10800037 	ldwio	r2,0(r2)
   2ca5c:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   2ca60:	e0bffe17 	ldw	r2,-8(fp)
   2ca64:	1081000c 	andi	r2,r2,1024
   2ca68:	10000a26 	beq	r2,zero,2ca94 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   2ca6c:	e0bffd17 	ldw	r2,-12(fp)
   2ca70:	10800017 	ldw	r2,0(r2)
   2ca74:	10800104 	addi	r2,r2,4
   2ca78:	e0fffd17 	ldw	r3,-12(fp)
   2ca7c:	18c00817 	ldw	r3,32(r3)
   2ca80:	18c10014 	ori	r3,r3,1024
   2ca84:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   2ca88:	e0bffd17 	ldw	r2,-12(fp)
   2ca8c:	10000915 	stw	zero,36(r2)
   2ca90:	00000a06 	br	2cabc <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   2ca94:	e0bffd17 	ldw	r2,-12(fp)
   2ca98:	10800917 	ldw	r2,36(r2)
   2ca9c:	00e00034 	movhi	r3,32768
   2caa0:	18ffff04 	addi	r3,r3,-4
   2caa4:	18800536 	bltu	r3,r2,2cabc <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
   2caa8:	e0bffd17 	ldw	r2,-12(fp)
   2caac:	10800917 	ldw	r2,36(r2)
   2cab0:	10c00044 	addi	r3,r2,1
   2cab4:	e0bffd17 	ldw	r2,-12(fp)
   2cab8:	10c00915 	stw	r3,36(r2)
   2cabc:	008000f4 	movhi	r2,3
   2cac0:	10882f04 	addi	r2,r2,8380
   2cac4:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   2cac8:	e037883a 	mov	sp,fp
   2cacc:	df000017 	ldw	fp,0(sp)
   2cad0:	dec00104 	addi	sp,sp,4
   2cad4:	f800283a 	ret

0002cad8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   2cad8:	defffd04 	addi	sp,sp,-12
   2cadc:	df000215 	stw	fp,8(sp)
   2cae0:	df000204 	addi	fp,sp,8
   2cae4:	e13ffe15 	stw	r4,-8(fp)
   2cae8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   2caec:	00000506 	br	2cb04 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   2caf0:	e0bfff17 	ldw	r2,-4(fp)
   2caf4:	1090000c 	andi	r2,r2,16384
   2caf8:	10000226 	beq	r2,zero,2cb04 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   2cafc:	00bffd44 	movi	r2,-11
   2cb00:	00000b06 	br	2cb30 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   2cb04:	e0bffe17 	ldw	r2,-8(fp)
   2cb08:	10c00d17 	ldw	r3,52(r2)
   2cb0c:	e0bffe17 	ldw	r2,-8(fp)
   2cb10:	10800c17 	ldw	r2,48(r2)
   2cb14:	18800526 	beq	r3,r2,2cb2c <altera_avalon_jtag_uart_close+0x54>
   2cb18:	e0bffe17 	ldw	r2,-8(fp)
   2cb1c:	10c00917 	ldw	r3,36(r2)
   2cb20:	e0bffe17 	ldw	r2,-8(fp)
   2cb24:	10800117 	ldw	r2,4(r2)
   2cb28:	18bff136 	bltu	r3,r2,2caf0 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   2cb2c:	0005883a 	mov	r2,zero
}
   2cb30:	e037883a 	mov	sp,fp
   2cb34:	df000017 	ldw	fp,0(sp)
   2cb38:	dec00104 	addi	sp,sp,4
   2cb3c:	f800283a 	ret

0002cb40 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   2cb40:	defffa04 	addi	sp,sp,-24
   2cb44:	df000515 	stw	fp,20(sp)
   2cb48:	df000504 	addi	fp,sp,20
   2cb4c:	e13ffd15 	stw	r4,-12(fp)
   2cb50:	e17ffe15 	stw	r5,-8(fp)
   2cb54:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   2cb58:	00bff9c4 	movi	r2,-25
   2cb5c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   2cb60:	e0bffe17 	ldw	r2,-8(fp)
   2cb64:	10da8060 	cmpeqi	r3,r2,27137
   2cb68:	1800031e 	bne	r3,zero,2cb78 <altera_avalon_jtag_uart_ioctl+0x38>
   2cb6c:	109a80a0 	cmpeqi	r2,r2,27138
   2cb70:	1000181e 	bne	r2,zero,2cbd4 <altera_avalon_jtag_uart_ioctl+0x94>
   2cb74:	00002606 	br	2cc10 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   2cb78:	e0bffd17 	ldw	r2,-12(fp)
   2cb7c:	10c00117 	ldw	r3,4(r2)
   2cb80:	00a00034 	movhi	r2,32768
   2cb84:	10bfffc4 	addi	r2,r2,-1
   2cb88:	18802226 	beq	r3,r2,2cc14 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
   2cb8c:	e0bfff17 	ldw	r2,-4(fp)
   2cb90:	10800017 	ldw	r2,0(r2)
   2cb94:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   2cb98:	e0bffc17 	ldw	r2,-16(fp)
   2cb9c:	10800090 	cmplti	r2,r2,2
   2cba0:	1000061e 	bne	r2,zero,2cbbc <altera_avalon_jtag_uart_ioctl+0x7c>
   2cba4:	e0fffc17 	ldw	r3,-16(fp)
   2cba8:	00a00034 	movhi	r2,32768
   2cbac:	10bfffc4 	addi	r2,r2,-1
   2cbb0:	18800226 	beq	r3,r2,2cbbc <altera_avalon_jtag_uart_ioctl+0x7c>
   2cbb4:	e0bffc17 	ldw	r2,-16(fp)
   2cbb8:	00000206 	br	2cbc4 <altera_avalon_jtag_uart_ioctl+0x84>
   2cbbc:	00a00034 	movhi	r2,32768
   2cbc0:	10bfff84 	addi	r2,r2,-2
   2cbc4:	e0fffd17 	ldw	r3,-12(fp)
   2cbc8:	18800115 	stw	r2,4(r3)
      rc = 0;
   2cbcc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   2cbd0:	00001006 	br	2cc14 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   2cbd4:	e0bffd17 	ldw	r2,-12(fp)
   2cbd8:	10c00117 	ldw	r3,4(r2)
   2cbdc:	00a00034 	movhi	r2,32768
   2cbe0:	10bfffc4 	addi	r2,r2,-1
   2cbe4:	18800d26 	beq	r3,r2,2cc1c <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   2cbe8:	e0bffd17 	ldw	r2,-12(fp)
   2cbec:	10c00917 	ldw	r3,36(r2)
   2cbf0:	e0bffd17 	ldw	r2,-12(fp)
   2cbf4:	10800117 	ldw	r2,4(r2)
   2cbf8:	1885803a 	cmpltu	r2,r3,r2
   2cbfc:	10c03fcc 	andi	r3,r2,255
   2cc00:	e0bfff17 	ldw	r2,-4(fp)
   2cc04:	10c00015 	stw	r3,0(r2)
      rc = 0;
   2cc08:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   2cc0c:	00000306 	br	2cc1c <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
   2cc10:	00000306 	br	2cc20 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   2cc14:	0001883a 	nop
   2cc18:	00000106 	br	2cc20 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   2cc1c:	0001883a 	nop

  default:
    break;
  }

  return rc;
   2cc20:	e0bffb17 	ldw	r2,-20(fp)
}
   2cc24:	e037883a 	mov	sp,fp
   2cc28:	df000017 	ldw	fp,0(sp)
   2cc2c:	dec00104 	addi	sp,sp,4
   2cc30:	f800283a 	ret

0002cc34 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   2cc34:	defff304 	addi	sp,sp,-52
   2cc38:	dfc00c15 	stw	ra,48(sp)
   2cc3c:	df000b15 	stw	fp,44(sp)
   2cc40:	df000b04 	addi	fp,sp,44
   2cc44:	e13ffc15 	stw	r4,-16(fp)
   2cc48:	e17ffd15 	stw	r5,-12(fp)
   2cc4c:	e1bffe15 	stw	r6,-8(fp)
   2cc50:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   2cc54:	e0bffd17 	ldw	r2,-12(fp)
   2cc58:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   2cc5c:	00004706 	br	2cd7c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   2cc60:	e0bffc17 	ldw	r2,-16(fp)
   2cc64:	10800a17 	ldw	r2,40(r2)
   2cc68:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   2cc6c:	e0bffc17 	ldw	r2,-16(fp)
   2cc70:	10800b17 	ldw	r2,44(r2)
   2cc74:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   2cc78:	e0fff717 	ldw	r3,-36(fp)
   2cc7c:	e0bff817 	ldw	r2,-32(fp)
   2cc80:	18800536 	bltu	r3,r2,2cc98 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   2cc84:	e0fff717 	ldw	r3,-36(fp)
   2cc88:	e0bff817 	ldw	r2,-32(fp)
   2cc8c:	1885c83a 	sub	r2,r3,r2
   2cc90:	e0bff615 	stw	r2,-40(fp)
   2cc94:	00000406 	br	2cca8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   2cc98:	00c20004 	movi	r3,2048
   2cc9c:	e0bff817 	ldw	r2,-32(fp)
   2cca0:	1885c83a 	sub	r2,r3,r2
   2cca4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   2cca8:	e0bff617 	ldw	r2,-40(fp)
   2ccac:	10001e26 	beq	r2,zero,2cd28 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   2ccb0:	e0fffe17 	ldw	r3,-8(fp)
   2ccb4:	e0bff617 	ldw	r2,-40(fp)
   2ccb8:	1880022e 	bgeu	r3,r2,2ccc4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   2ccbc:	e0bffe17 	ldw	r2,-8(fp)
   2ccc0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   2ccc4:	e0bff817 	ldw	r2,-32(fp)
   2ccc8:	10800e04 	addi	r2,r2,56
   2cccc:	e0fffc17 	ldw	r3,-16(fp)
   2ccd0:	1885883a 	add	r2,r3,r2
   2ccd4:	e13ff517 	ldw	r4,-44(fp)
   2ccd8:	100b883a 	mov	r5,r2
   2ccdc:	e1bff617 	ldw	r6,-40(fp)
   2cce0:	0022f540 	call	22f54 <memcpy>
      ptr   += n;
   2cce4:	e0fff517 	ldw	r3,-44(fp)
   2cce8:	e0bff617 	ldw	r2,-40(fp)
   2ccec:	1885883a 	add	r2,r3,r2
   2ccf0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   2ccf4:	e0fffe17 	ldw	r3,-8(fp)
   2ccf8:	e0bff617 	ldw	r2,-40(fp)
   2ccfc:	1885c83a 	sub	r2,r3,r2
   2cd00:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2cd04:	e0fff817 	ldw	r3,-32(fp)
   2cd08:	e0bff617 	ldw	r2,-40(fp)
   2cd0c:	1885883a 	add	r2,r3,r2
   2cd10:	10c1ffcc 	andi	r3,r2,2047
   2cd14:	e0bffc17 	ldw	r2,-16(fp)
   2cd18:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   2cd1c:	e0bffe17 	ldw	r2,-8(fp)
   2cd20:	00bfcf16 	blt	zero,r2,2cc60 <altera_avalon_jtag_uart_read+0x2c>
   2cd24:	00000106 	br	2cd2c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   2cd28:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   2cd2c:	e0fff517 	ldw	r3,-44(fp)
   2cd30:	e0bffd17 	ldw	r2,-12(fp)
   2cd34:	1880141e 	bne	r3,r2,2cd88 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   2cd38:	e0bfff17 	ldw	r2,-4(fp)
   2cd3c:	1090000c 	andi	r2,r2,16384
   2cd40:	1000131e 	bne	r2,zero,2cd90 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   2cd44:	0001883a 	nop
   2cd48:	e0bffc17 	ldw	r2,-16(fp)
   2cd4c:	10c00a17 	ldw	r3,40(r2)
   2cd50:	e0bff717 	ldw	r2,-36(fp)
   2cd54:	1880051e 	bne	r3,r2,2cd6c <altera_avalon_jtag_uart_read+0x138>
   2cd58:	e0bffc17 	ldw	r2,-16(fp)
   2cd5c:	10c00917 	ldw	r3,36(r2)
   2cd60:	e0bffc17 	ldw	r2,-16(fp)
   2cd64:	10800117 	ldw	r2,4(r2)
   2cd68:	18bff736 	bltu	r3,r2,2cd48 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   2cd6c:	e0bffc17 	ldw	r2,-16(fp)
   2cd70:	10c00a17 	ldw	r3,40(r2)
   2cd74:	e0bff717 	ldw	r2,-36(fp)
   2cd78:	18800726 	beq	r3,r2,2cd98 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   2cd7c:	e0bffe17 	ldw	r2,-8(fp)
   2cd80:	00bfb716 	blt	zero,r2,2cc60 <altera_avalon_jtag_uart_read+0x2c>
   2cd84:	00000506 	br	2cd9c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   2cd88:	0001883a 	nop
   2cd8c:	00000306 	br	2cd9c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   2cd90:	0001883a 	nop
   2cd94:	00000106 	br	2cd9c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   2cd98:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   2cd9c:	e0fff517 	ldw	r3,-44(fp)
   2cda0:	e0bffd17 	ldw	r2,-12(fp)
   2cda4:	18801726 	beq	r3,r2,2ce04 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2cda8:	0005303a 	rdctl	r2,status
   2cdac:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2cdb0:	e0fffa17 	ldw	r3,-24(fp)
   2cdb4:	00bfff84 	movi	r2,-2
   2cdb8:	1884703a 	and	r2,r3,r2
   2cdbc:	1001703a 	wrctl	status,r2
  
  return context;
   2cdc0:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   2cdc4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2cdc8:	e0bffc17 	ldw	r2,-16(fp)
   2cdcc:	10800817 	ldw	r2,32(r2)
   2cdd0:	10c00054 	ori	r3,r2,1
   2cdd4:	e0bffc17 	ldw	r2,-16(fp)
   2cdd8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2cddc:	e0bffc17 	ldw	r2,-16(fp)
   2cde0:	10800017 	ldw	r2,0(r2)
   2cde4:	10800104 	addi	r2,r2,4
   2cde8:	e0fffc17 	ldw	r3,-16(fp)
   2cdec:	18c00817 	ldw	r3,32(r3)
   2cdf0:	10c00035 	stwio	r3,0(r2)
   2cdf4:	e0bff917 	ldw	r2,-28(fp)
   2cdf8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2cdfc:	e0bffb17 	ldw	r2,-20(fp)
   2ce00:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   2ce04:	e0fff517 	ldw	r3,-44(fp)
   2ce08:	e0bffd17 	ldw	r2,-12(fp)
   2ce0c:	18800426 	beq	r3,r2,2ce20 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
   2ce10:	e0fff517 	ldw	r3,-44(fp)
   2ce14:	e0bffd17 	ldw	r2,-12(fp)
   2ce18:	1885c83a 	sub	r2,r3,r2
   2ce1c:	00000606 	br	2ce38 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
   2ce20:	e0bfff17 	ldw	r2,-4(fp)
   2ce24:	1090000c 	andi	r2,r2,16384
   2ce28:	10000226 	beq	r2,zero,2ce34 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
   2ce2c:	00bffd44 	movi	r2,-11
   2ce30:	00000106 	br	2ce38 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
   2ce34:	00bffec4 	movi	r2,-5
}
   2ce38:	e037883a 	mov	sp,fp
   2ce3c:	dfc00117 	ldw	ra,4(sp)
   2ce40:	df000017 	ldw	fp,0(sp)
   2ce44:	dec00204 	addi	sp,sp,8
   2ce48:	f800283a 	ret

0002ce4c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   2ce4c:	defff304 	addi	sp,sp,-52
   2ce50:	dfc00c15 	stw	ra,48(sp)
   2ce54:	df000b15 	stw	fp,44(sp)
   2ce58:	df000b04 	addi	fp,sp,44
   2ce5c:	e13ffc15 	stw	r4,-16(fp)
   2ce60:	e17ffd15 	stw	r5,-12(fp)
   2ce64:	e1bffe15 	stw	r6,-8(fp)
   2ce68:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   2ce6c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   2ce70:	e0bffd17 	ldw	r2,-12(fp)
   2ce74:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   2ce78:	00003706 	br	2cf58 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   2ce7c:	e0bffc17 	ldw	r2,-16(fp)
   2ce80:	10800c17 	ldw	r2,48(r2)
   2ce84:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   2ce88:	e0bffc17 	ldw	r2,-16(fp)
   2ce8c:	10800d17 	ldw	r2,52(r2)
   2ce90:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   2ce94:	e0fff817 	ldw	r3,-32(fp)
   2ce98:	e0bff517 	ldw	r2,-44(fp)
   2ce9c:	1880062e 	bgeu	r3,r2,2ceb8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   2cea0:	e0fff517 	ldw	r3,-44(fp)
   2cea4:	e0bff817 	ldw	r2,-32(fp)
   2cea8:	1885c83a 	sub	r2,r3,r2
   2ceac:	10bfffc4 	addi	r2,r2,-1
   2ceb0:	e0bff615 	stw	r2,-40(fp)
   2ceb4:	00000b06 	br	2cee4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   2ceb8:	e0bff517 	ldw	r2,-44(fp)
   2cebc:	10000526 	beq	r2,zero,2ced4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   2cec0:	00c20004 	movi	r3,2048
   2cec4:	e0bff817 	ldw	r2,-32(fp)
   2cec8:	1885c83a 	sub	r2,r3,r2
   2cecc:	e0bff615 	stw	r2,-40(fp)
   2ced0:	00000406 	br	2cee4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   2ced4:	00c1ffc4 	movi	r3,2047
   2ced8:	e0bff817 	ldw	r2,-32(fp)
   2cedc:	1885c83a 	sub	r2,r3,r2
   2cee0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   2cee4:	e0bff617 	ldw	r2,-40(fp)
   2cee8:	10001e26 	beq	r2,zero,2cf64 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   2ceec:	e0fffe17 	ldw	r3,-8(fp)
   2cef0:	e0bff617 	ldw	r2,-40(fp)
   2cef4:	1880022e 	bgeu	r3,r2,2cf00 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   2cef8:	e0bffe17 	ldw	r2,-8(fp)
   2cefc:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   2cf00:	e0bff817 	ldw	r2,-32(fp)
   2cf04:	10820e04 	addi	r2,r2,2104
   2cf08:	e0fffc17 	ldw	r3,-16(fp)
   2cf0c:	1885883a 	add	r2,r3,r2
   2cf10:	1009883a 	mov	r4,r2
   2cf14:	e17ffd17 	ldw	r5,-12(fp)
   2cf18:	e1bff617 	ldw	r6,-40(fp)
   2cf1c:	0022f540 	call	22f54 <memcpy>
      ptr   += n;
   2cf20:	e0fffd17 	ldw	r3,-12(fp)
   2cf24:	e0bff617 	ldw	r2,-40(fp)
   2cf28:	1885883a 	add	r2,r3,r2
   2cf2c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   2cf30:	e0fffe17 	ldw	r3,-8(fp)
   2cf34:	e0bff617 	ldw	r2,-40(fp)
   2cf38:	1885c83a 	sub	r2,r3,r2
   2cf3c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2cf40:	e0fff817 	ldw	r3,-32(fp)
   2cf44:	e0bff617 	ldw	r2,-40(fp)
   2cf48:	1885883a 	add	r2,r3,r2
   2cf4c:	10c1ffcc 	andi	r3,r2,2047
   2cf50:	e0bffc17 	ldw	r2,-16(fp)
   2cf54:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   2cf58:	e0bffe17 	ldw	r2,-8(fp)
   2cf5c:	00bfc716 	blt	zero,r2,2ce7c <altera_avalon_jtag_uart_write+0x30>
   2cf60:	00000106 	br	2cf68 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   2cf64:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2cf68:	0005303a 	rdctl	r2,status
   2cf6c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2cf70:	e0fffa17 	ldw	r3,-24(fp)
   2cf74:	00bfff84 	movi	r2,-2
   2cf78:	1884703a 	and	r2,r3,r2
   2cf7c:	1001703a 	wrctl	status,r2
  
  return context;
   2cf80:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   2cf84:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   2cf88:	e0bffc17 	ldw	r2,-16(fp)
   2cf8c:	10800817 	ldw	r2,32(r2)
   2cf90:	10c00094 	ori	r3,r2,2
   2cf94:	e0bffc17 	ldw	r2,-16(fp)
   2cf98:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2cf9c:	e0bffc17 	ldw	r2,-16(fp)
   2cfa0:	10800017 	ldw	r2,0(r2)
   2cfa4:	10800104 	addi	r2,r2,4
   2cfa8:	e0fffc17 	ldw	r3,-16(fp)
   2cfac:	18c00817 	ldw	r3,32(r3)
   2cfb0:	10c00035 	stwio	r3,0(r2)
   2cfb4:	e0bff917 	ldw	r2,-28(fp)
   2cfb8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2cfbc:	e0bffb17 	ldw	r2,-20(fp)
   2cfc0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   2cfc4:	e0bffe17 	ldw	r2,-8(fp)
   2cfc8:	0080110e 	bge	zero,r2,2d010 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   2cfcc:	e0bfff17 	ldw	r2,-4(fp)
   2cfd0:	1090000c 	andi	r2,r2,16384
   2cfd4:	1000111e 	bne	r2,zero,2d01c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   2cfd8:	0001883a 	nop
   2cfdc:	e0bffc17 	ldw	r2,-16(fp)
   2cfe0:	10c00d17 	ldw	r3,52(r2)
   2cfe4:	e0bff517 	ldw	r2,-44(fp)
   2cfe8:	1880051e 	bne	r3,r2,2d000 <altera_avalon_jtag_uart_write+0x1b4>
   2cfec:	e0bffc17 	ldw	r2,-16(fp)
   2cff0:	10c00917 	ldw	r3,36(r2)
   2cff4:	e0bffc17 	ldw	r2,-16(fp)
   2cff8:	10800117 	ldw	r2,4(r2)
   2cffc:	18bff736 	bltu	r3,r2,2cfdc <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   2d000:	e0bffc17 	ldw	r2,-16(fp)
   2d004:	10c00d17 	ldw	r3,52(r2)
   2d008:	e0bff517 	ldw	r2,-44(fp)
   2d00c:	18800526 	beq	r3,r2,2d024 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   2d010:	e0bffe17 	ldw	r2,-8(fp)
   2d014:	00bfd016 	blt	zero,r2,2cf58 <altera_avalon_jtag_uart_write+0x10c>
   2d018:	00000306 	br	2d028 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   2d01c:	0001883a 	nop
   2d020:	00000106 	br	2d028 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
   2d024:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   2d028:	e0fffd17 	ldw	r3,-12(fp)
   2d02c:	e0bff717 	ldw	r2,-36(fp)
   2d030:	18800426 	beq	r3,r2,2d044 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   2d034:	e0fffd17 	ldw	r3,-12(fp)
   2d038:	e0bff717 	ldw	r2,-36(fp)
   2d03c:	1885c83a 	sub	r2,r3,r2
   2d040:	00000606 	br	2d05c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   2d044:	e0bfff17 	ldw	r2,-4(fp)
   2d048:	1090000c 	andi	r2,r2,16384
   2d04c:	10000226 	beq	r2,zero,2d058 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   2d050:	00bffd44 	movi	r2,-11
   2d054:	00000106 	br	2d05c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   2d058:	00bffec4 	movi	r2,-5
}
   2d05c:	e037883a 	mov	sp,fp
   2d060:	dfc00117 	ldw	ra,4(sp)
   2d064:	df000017 	ldw	fp,0(sp)
   2d068:	dec00204 	addi	sp,sp,8
   2d06c:	f800283a 	ret

0002d070 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   2d070:	defffa04 	addi	sp,sp,-24
   2d074:	dfc00515 	stw	ra,20(sp)
   2d078:	df000415 	stw	fp,16(sp)
   2d07c:	df000404 	addi	fp,sp,16
   2d080:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   2d084:	0007883a 	mov	r3,zero
   2d088:	e0bfff17 	ldw	r2,-4(fp)
   2d08c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   2d090:	e0bfff17 	ldw	r2,-4(fp)
   2d094:	10800104 	addi	r2,r2,4
   2d098:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2d09c:	0005303a 	rdctl	r2,status
   2d0a0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2d0a4:	e0fffd17 	ldw	r3,-12(fp)
   2d0a8:	00bfff84 	movi	r2,-2
   2d0ac:	1884703a 	and	r2,r3,r2
   2d0b0:	1001703a 	wrctl	status,r2
  
  return context;
   2d0b4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   2d0b8:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   2d0bc:	002e2680 	call	2e268 <alt_tick>
   2d0c0:	e0bffc17 	ldw	r2,-16(fp)
   2d0c4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2d0c8:	e0bffe17 	ldw	r2,-8(fp)
   2d0cc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   2d0d0:	e037883a 	mov	sp,fp
   2d0d4:	dfc00117 	ldw	ra,4(sp)
   2d0d8:	df000017 	ldw	fp,0(sp)
   2d0dc:	dec00204 	addi	sp,sp,8
   2d0e0:	f800283a 	ret

0002d0e4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   2d0e4:	defff804 	addi	sp,sp,-32
   2d0e8:	dfc00715 	stw	ra,28(sp)
   2d0ec:	df000615 	stw	fp,24(sp)
   2d0f0:	df000604 	addi	fp,sp,24
   2d0f4:	e13ffc15 	stw	r4,-16(fp)
   2d0f8:	e17ffd15 	stw	r5,-12(fp)
   2d0fc:	e1bffe15 	stw	r6,-8(fp)
   2d100:	e1ffff15 	stw	r7,-4(fp)
   2d104:	e0bfff17 	ldw	r2,-4(fp)
   2d108:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   2d10c:	008000f4 	movhi	r2,3
   2d110:	10882f04 	addi	r2,r2,8380
   2d114:	10800017 	ldw	r2,0(r2)
   2d118:	1000041e 	bne	r2,zero,2d12c <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   2d11c:	008000f4 	movhi	r2,3
   2d120:	10882f04 	addi	r2,r2,8380
   2d124:	e0fffb17 	ldw	r3,-20(fp)
   2d128:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   2d12c:	e0bffc17 	ldw	r2,-16(fp)
   2d130:	10800104 	addi	r2,r2,4
   2d134:	00c001c4 	movi	r3,7
   2d138:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   2d13c:	d8000015 	stw	zero,0(sp)
   2d140:	e13ffd17 	ldw	r4,-12(fp)
   2d144:	e17ffe17 	ldw	r5,-8(fp)
   2d148:	018000f4 	movhi	r6,3
   2d14c:	31b41c04 	addi	r6,r6,-12176
   2d150:	e1fffc17 	ldw	r7,-16(fp)
   2d154:	002ddb00 	call	2ddb0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   2d158:	e037883a 	mov	sp,fp
   2d15c:	dfc00117 	ldw	ra,4(sp)
   2d160:	df000017 	ldw	fp,0(sp)
   2d164:	dec00204 	addi	sp,sp,8
   2d168:	f800283a 	ret

0002d16c <alt_hostfs_open>:
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
   2d16c:	deffeb04 	addi	sp,sp,-84
   2d170:	df001415 	stw	fp,80(sp)
   2d174:	dc401315 	stw	r17,76(sp)
   2d178:	dc001215 	stw	r16,72(sp)
   2d17c:	df001204 	addi	fp,sp,72
   2d180:	e13ffb15 	stw	r4,-20(fp)
   2d184:	e17ffc15 	stw	r5,-16(fp)
   2d188:	e1bffd15 	stw	r6,-12(fp)
   2d18c:	e1fffe15 	stw	r7,-8(fp)
  static const struct HOSTCALL_INFO hcinfo = { 0x0103, "open" };

  alt_hostfs_dev* dev= (alt_hostfs_dev*)fd->dev;
   2d190:	e0bffb17 	ldw	r2,-20(fp)
   2d194:	10800017 	ldw	r2,0(r2)
   2d198:	e0bfee15 	stw	r2,-72(fp)
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
   2d19c:	e0bfee17 	ldw	r2,-72(fp)
   2d1a0:	10800217 	ldw	r2,8(r2)
   2d1a4:	e0bff715 	stw	r2,-36(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
   2d1a8:	e0bff717 	ldw	r2,-36(fp)
   2d1ac:	10bfffc4 	addi	r2,r2,-1
   2d1b0:	e0bff815 	stw	r2,-32(fp)

  while (*++ptr != 0)
   2d1b4:	e0bff817 	ldw	r2,-32(fp)
   2d1b8:	10800044 	addi	r2,r2,1
   2d1bc:	e0bff815 	stw	r2,-32(fp)
   2d1c0:	e0bff817 	ldw	r2,-32(fp)
   2d1c4:	10800003 	ldbu	r2,0(r2)
   2d1c8:	10803fcc 	andi	r2,r2,255
   2d1cc:	1080201c 	xori	r2,r2,128
   2d1d0:	10bfe004 	addi	r2,r2,-128
   2d1d4:	103ff71e 	bne	r2,zero,2d1b4 <alt_hostfs_open+0x48>
    ;

  return ptr - string;
   2d1d8:	e0fff817 	ldw	r3,-32(fp)
   2d1dc:	e0bff717 	ldw	r2,-36(fp)
   2d1e0:	1885c83a 	sub	r2,r3,r2
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
   2d1e4:	10800044 	addi	r2,r2,1
   2d1e8:	e0fffc17 	ldw	r3,-16(fp)
   2d1ec:	1885883a 	add	r2,r3,r2
   2d1f0:	e0bffc15 	stw	r2,-16(fp)

  r3 = (int)&hcinfo;
   2d1f4:	d0a01b04 	addi	r2,gp,-32660
   2d1f8:	e0bfef15 	stw	r2,-68(fp)
  r4 = (int)name;
   2d1fc:	e0bffc17 	ldw	r2,-16(fp)
   2d200:	e0bff015 	stw	r2,-64(fp)
  r5 = flags;
   2d204:	e0bffd17 	ldw	r2,-12(fp)
   2d208:	e0bff115 	stw	r2,-60(fp)
  r6 = mode;
   2d20c:	e0bffe17 	ldw	r2,-8(fp)
   2d210:	e0bff215 	stw	r2,-56(fp)
   2d214:	e0bffc17 	ldw	r2,-16(fp)
   2d218:	e0bff915 	stw	r2,-28(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
   2d21c:	e0bff917 	ldw	r2,-28(fp)
   2d220:	10bfffc4 	addi	r2,r2,-1
   2d224:	e0bffa15 	stw	r2,-24(fp)

  while (*++ptr != 0)
   2d228:	e0bffa17 	ldw	r2,-24(fp)
   2d22c:	10800044 	addi	r2,r2,1
   2d230:	e0bffa15 	stw	r2,-24(fp)
   2d234:	e0bffa17 	ldw	r2,-24(fp)
   2d238:	10800003 	ldbu	r2,0(r2)
   2d23c:	10803fcc 	andi	r2,r2,255
   2d240:	1080201c 	xori	r2,r2,128
   2d244:	10bfe004 	addi	r2,r2,-128
   2d248:	103ff71e 	bne	r2,zero,2d228 <alt_hostfs_open+0xbc>
    ;

  return ptr - string;
   2d24c:	e0fffa17 	ldw	r3,-24(fp)
   2d250:	e0bff917 	ldw	r2,-28(fp)
   2d254:	1885c83a 	sub	r2,r3,r2

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
   2d258:	e0bff315 	stw	r2,-52(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6), "D07" (r7) : "memory" );
   2d25c:	e13ff017 	ldw	r4,-64(fp)
   2d260:	e13fff15 	stw	r4,-4(fp)
   2d264:	e17ff117 	ldw	r5,-60(fp)
   2d268:	e1bff217 	ldw	r6,-56(fp)
   2d26c:	e1fff317 	ldw	r7,-52(fp)
   2d270:	e0ffef17 	ldw	r3,-68(fp)
   2d274:	1821883a 	mov	r16,r3
   2d278:	8007883a 	mov	r3,r16
   2d27c:	e13fff17 	ldw	r4,-4(fp)
   2d280:	003da07a 	break	1
   2d284:	1821883a 	mov	r16,r3
   2d288:	1023883a 	mov	r17,r2
   2d28c:	e47ff415 	stw	r17,-48(fp)
   2d290:	e43fef15 	stw	r16,-68(fp)

  handle = (void *)r2;
   2d294:	e0bff417 	ldw	r2,-48(fp)
   2d298:	e0bff515 	stw	r2,-44(fp)
  error = r3;
   2d29c:	e0bfef17 	ldw	r2,-68(fp)
   2d2a0:	e0bff615 	stw	r2,-40(fp)

  if (error == 0)
   2d2a4:	e0bff617 	ldw	r2,-40(fp)
   2d2a8:	1000031e 	bne	r2,zero,2d2b8 <alt_hostfs_open+0x14c>
    fd->priv = handle;
   2d2ac:	e0bffb17 	ldw	r2,-20(fp)
   2d2b0:	e0fff517 	ldw	r3,-44(fp)
   2d2b4:	10c00115 	stw	r3,4(r2)

  return -error;
   2d2b8:	e0bff617 	ldw	r2,-40(fp)
   2d2bc:	0085c83a 	sub	r2,zero,r2
}
   2d2c0:	e037883a 	mov	sp,fp
   2d2c4:	df000217 	ldw	fp,8(sp)
   2d2c8:	dc400117 	ldw	r17,4(sp)
   2d2cc:	dc000017 	ldw	r16,0(sp)
   2d2d0:	dec00304 	addi	sp,sp,12
   2d2d4:	f800283a 	ret

0002d2d8 <alt_hostfs_close>:
* alt_hostfs_close
*
* Read the file
*/
int alt_hostfs_close(alt_fd* fd)
{
   2d2d8:	defffa04 	addi	sp,sp,-24
   2d2dc:	df000515 	stw	fp,20(sp)
   2d2e0:	dc000415 	stw	r16,16(sp)
   2d2e4:	df000404 	addi	fp,sp,16
   2d2e8:	e13fff15 	stw	r4,-4(fp)
  int error;

  /* Input and output parameters for the hostcall */
  int r3, r4;

  r3 = (int)&hcinfo;
   2d2ec:	d0a01804 	addi	r2,gp,-32672
   2d2f0:	e0bffc15 	stw	r2,-16(fp)
  r4 = (int)fd->priv;
   2d2f4:	e0bfff17 	ldw	r2,-4(fp)
   2d2f8:	10800117 	ldw	r2,4(r2)
   2d2fc:	e0bffd15 	stw	r2,-12(fp)

  __asm__ volatile("break 1" : "+D03" (r3) : "D04" (r4) );
   2d300:	e0bffd17 	ldw	r2,-12(fp)
   2d304:	e0fffc17 	ldw	r3,-16(fp)
   2d308:	1821883a 	mov	r16,r3
   2d30c:	8007883a 	mov	r3,r16
   2d310:	1009883a 	mov	r4,r2
   2d314:	003da07a 	break	1
   2d318:	1821883a 	mov	r16,r3
   2d31c:	e43ffc15 	stw	r16,-16(fp)

  error = r3;
   2d320:	e0bffc17 	ldw	r2,-16(fp)
   2d324:	e0bffe15 	stw	r2,-8(fp)

  return -error;
   2d328:	e0bffe17 	ldw	r2,-8(fp)
   2d32c:	0085c83a 	sub	r2,zero,r2
}
   2d330:	e037883a 	mov	sp,fp
   2d334:	df000117 	ldw	fp,4(sp)
   2d338:	dc000017 	ldw	r16,0(sp)
   2d33c:	dec00204 	addi	sp,sp,8
   2d340:	f800283a 	ret

0002d344 <alt_hostfs_read>:
* alt_hostfs_read
*
* Read the file
*/
int alt_hostfs_read(alt_fd* fd, char * ptr, int len)
{
   2d344:	defff204 	addi	sp,sp,-56
   2d348:	df000d15 	stw	fp,52(sp)
   2d34c:	dc400c15 	stw	r17,48(sp)
   2d350:	dc000b15 	stw	r16,44(sp)
   2d354:	df000b04 	addi	fp,sp,44
   2d358:	e13ffc15 	stw	r4,-16(fp)
   2d35c:	e17ffd15 	stw	r5,-12(fp)
   2d360:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
   2d364:	d0a01504 	addi	r2,gp,-32684
   2d368:	e0bff515 	stw	r2,-44(fp)
  r4 = (int)fd->priv;
   2d36c:	e0bffc17 	ldw	r2,-16(fp)
   2d370:	10800117 	ldw	r2,4(r2)
   2d374:	e0bff615 	stw	r2,-40(fp)
  r5 = (int)ptr;
   2d378:	e0bffd17 	ldw	r2,-12(fp)
   2d37c:	e0bff715 	stw	r2,-36(fp)
  r6 = len;
   2d380:	e0bffe17 	ldw	r2,-8(fp)
   2d384:	e0bff815 	stw	r2,-32(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
   2d388:	e13ff617 	ldw	r4,-40(fp)
   2d38c:	e13fff15 	stw	r4,-4(fp)
   2d390:	e17ff717 	ldw	r5,-36(fp)
   2d394:	e1bff817 	ldw	r6,-32(fp)
   2d398:	e0fff517 	ldw	r3,-44(fp)
   2d39c:	1821883a 	mov	r16,r3
   2d3a0:	8007883a 	mov	r3,r16
   2d3a4:	e13fff17 	ldw	r4,-4(fp)
   2d3a8:	003da07a 	break	1
   2d3ac:	1821883a 	mov	r16,r3
   2d3b0:	1023883a 	mov	r17,r2
   2d3b4:	e47ff915 	stw	r17,-28(fp)
   2d3b8:	e43ff515 	stw	r16,-44(fp)

  rc = r2;
   2d3bc:	e0bff917 	ldw	r2,-28(fp)
   2d3c0:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
   2d3c4:	e0bff517 	ldw	r2,-44(fp)
   2d3c8:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
   2d3cc:	e0bffb17 	ldw	r2,-20(fp)
   2d3d0:	10000326 	beq	r2,zero,2d3e0 <alt_hostfs_read+0x9c>
   2d3d4:	e0bffb17 	ldw	r2,-20(fp)
   2d3d8:	0085c83a 	sub	r2,zero,r2
   2d3dc:	00000106 	br	2d3e4 <alt_hostfs_read+0xa0>
   2d3e0:	e0bffa17 	ldw	r2,-24(fp)
}
   2d3e4:	e037883a 	mov	sp,fp
   2d3e8:	df000217 	ldw	fp,8(sp)
   2d3ec:	dc400117 	ldw	r17,4(sp)
   2d3f0:	dc000017 	ldw	r16,0(sp)
   2d3f4:	dec00304 	addi	sp,sp,12
   2d3f8:	f800283a 	ret

0002d3fc <alt_hostfs_write>:
* alt_hostfs_write
*
* Read the file
*/
int alt_hostfs_write(alt_fd* fd, const char * ptr, int len)
{
   2d3fc:	defff204 	addi	sp,sp,-56
   2d400:	df000d15 	stw	fp,52(sp)
   2d404:	dc400c15 	stw	r17,48(sp)
   2d408:	dc000b15 	stw	r16,44(sp)
   2d40c:	df000b04 	addi	fp,sp,44
   2d410:	e13ffc15 	stw	r4,-16(fp)
   2d414:	e17ffd15 	stw	r5,-12(fp)
   2d418:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
   2d41c:	d0a01204 	addi	r2,gp,-32696
   2d420:	e0bff515 	stw	r2,-44(fp)
  r4 = (int)fd->priv;
   2d424:	e0bffc17 	ldw	r2,-16(fp)
   2d428:	10800117 	ldw	r2,4(r2)
   2d42c:	e0bff615 	stw	r2,-40(fp)
  r5 = (int)ptr;
   2d430:	e0bffd17 	ldw	r2,-12(fp)
   2d434:	e0bff715 	stw	r2,-36(fp)
  r6 = len;
   2d438:	e0bffe17 	ldw	r2,-8(fp)
   2d43c:	e0bff815 	stw	r2,-32(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
   2d440:	e13ff617 	ldw	r4,-40(fp)
   2d444:	e13fff15 	stw	r4,-4(fp)
   2d448:	e17ff717 	ldw	r5,-36(fp)
   2d44c:	e1bff817 	ldw	r6,-32(fp)
   2d450:	e0fff517 	ldw	r3,-44(fp)
   2d454:	1821883a 	mov	r16,r3
   2d458:	8007883a 	mov	r3,r16
   2d45c:	e13fff17 	ldw	r4,-4(fp)
   2d460:	003da07a 	break	1
   2d464:	1821883a 	mov	r16,r3
   2d468:	1023883a 	mov	r17,r2
   2d46c:	e47ff915 	stw	r17,-28(fp)
   2d470:	e43ff515 	stw	r16,-44(fp)

  rc = r2;
   2d474:	e0bff917 	ldw	r2,-28(fp)
   2d478:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
   2d47c:	e0bff517 	ldw	r2,-44(fp)
   2d480:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
   2d484:	e0bffb17 	ldw	r2,-20(fp)
   2d488:	10000326 	beq	r2,zero,2d498 <alt_hostfs_write+0x9c>
   2d48c:	e0bffb17 	ldw	r2,-20(fp)
   2d490:	0085c83a 	sub	r2,zero,r2
   2d494:	00000106 	br	2d49c <alt_hostfs_write+0xa0>
   2d498:	e0bffa17 	ldw	r2,-24(fp)
}
   2d49c:	e037883a 	mov	sp,fp
   2d4a0:	df000217 	ldw	fp,8(sp)
   2d4a4:	dc400117 	ldw	r17,4(sp)
   2d4a8:	dc000017 	ldw	r16,0(sp)
   2d4ac:	dec00304 	addi	sp,sp,12
   2d4b0:	f800283a 	ret

0002d4b4 <alt_hostfs_seek>:
* Move around within a file
*
* returns -errno for an error or the offset within the file
*/
int alt_hostfs_seek(alt_fd* fd, int ptr, int dir)
{
   2d4b4:	defff204 	addi	sp,sp,-56
   2d4b8:	df000d15 	stw	fp,52(sp)
   2d4bc:	dc400c15 	stw	r17,48(sp)
   2d4c0:	dc000b15 	stw	r16,44(sp)
   2d4c4:	df000b04 	addi	fp,sp,44
   2d4c8:	e13ffc15 	stw	r4,-16(fp)
   2d4cc:	e17ffd15 	stw	r5,-12(fp)
   2d4d0:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
   2d4d4:	d0a00f04 	addi	r2,gp,-32708
   2d4d8:	e0bff515 	stw	r2,-44(fp)
  r4 = (int)fd->priv;
   2d4dc:	e0bffc17 	ldw	r2,-16(fp)
   2d4e0:	10800117 	ldw	r2,4(r2)
   2d4e4:	e0bff615 	stw	r2,-40(fp)
  r5 = ptr;
   2d4e8:	e0bffd17 	ldw	r2,-12(fp)
   2d4ec:	e0bff715 	stw	r2,-36(fp)
  r6 = dir;
   2d4f0:	e0bffe17 	ldw	r2,-8(fp)
   2d4f4:	e0bff815 	stw	r2,-32(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
   2d4f8:	e13ff617 	ldw	r4,-40(fp)
   2d4fc:	e13fff15 	stw	r4,-4(fp)
   2d500:	e17ff717 	ldw	r5,-36(fp)
   2d504:	e1bff817 	ldw	r6,-32(fp)
   2d508:	e0fff517 	ldw	r3,-44(fp)
   2d50c:	1821883a 	mov	r16,r3
   2d510:	8007883a 	mov	r3,r16
   2d514:	e13fff17 	ldw	r4,-4(fp)
   2d518:	003da07a 	break	1
   2d51c:	1821883a 	mov	r16,r3
   2d520:	1023883a 	mov	r17,r2
   2d524:	e47ff915 	stw	r17,-28(fp)
   2d528:	e43ff515 	stw	r16,-44(fp)

  rc = r2;
   2d52c:	e0bff917 	ldw	r2,-28(fp)
   2d530:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
   2d534:	e0bff517 	ldw	r2,-44(fp)
   2d538:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
   2d53c:	e0bffb17 	ldw	r2,-20(fp)
   2d540:	10000326 	beq	r2,zero,2d550 <alt_hostfs_seek+0x9c>
   2d544:	e0bffb17 	ldw	r2,-20(fp)
   2d548:	0085c83a 	sub	r2,zero,r2
   2d54c:	00000106 	br	2d554 <alt_hostfs_seek+0xa0>
   2d550:	e0bffa17 	ldw	r2,-24(fp)
}
   2d554:	e037883a 	mov	sp,fp
   2d558:	df000217 	ldw	fp,8(sp)
   2d55c:	dc400117 	ldw	r17,4(sp)
   2d560:	dc000017 	ldw	r16,0(sp)
   2d564:	dec00304 	addi	sp,sp,12
   2d568:	f800283a 	ret

0002d56c <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
   2d56c:	deffe204 	addi	sp,sp,-120
   2d570:	df001d15 	stw	fp,116(sp)
   2d574:	dc401c15 	stw	r17,112(sp)
   2d578:	dc001b15 	stw	r16,108(sp)
   2d57c:	df001b04 	addi	fp,sp,108
   2d580:	e13ffd15 	stw	r4,-12(fp)
   2d584:	e17ffe15 	stw	r5,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5;

  r3 = (int)&hcinfo;
   2d588:	d0a00c04 	addi	r2,gp,-32720
   2d58c:	e0bfe615 	stw	r2,-104(fp)
  r4 = (int)fd->priv;
   2d590:	e0bffd17 	ldw	r2,-12(fp)
   2d594:	10800117 	ldw	r2,4(r2)
   2d598:	e0bfe715 	stw	r2,-100(fp)
  r5 = (int)&hoststat;
   2d59c:	e0bfed04 	addi	r2,fp,-76
   2d5a0:	e0bfe815 	stw	r2,-96(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5) : "memory" );
   2d5a4:	e13fe717 	ldw	r4,-100(fp)
   2d5a8:	e13fff15 	stw	r4,-4(fp)
   2d5ac:	e17fe817 	ldw	r5,-96(fp)
   2d5b0:	e0ffe617 	ldw	r3,-104(fp)
   2d5b4:	1821883a 	mov	r16,r3
   2d5b8:	8007883a 	mov	r3,r16
   2d5bc:	e13fff17 	ldw	r4,-4(fp)
   2d5c0:	003da07a 	break	1
   2d5c4:	1821883a 	mov	r16,r3
   2d5c8:	1023883a 	mov	r17,r2
   2d5cc:	e47fe915 	stw	r17,-92(fp)
   2d5d0:	e43fe615 	stw	r16,-104(fp)

  rc = r2;
   2d5d4:	e0bfe917 	ldw	r2,-92(fp)
   2d5d8:	e0bfea15 	stw	r2,-88(fp)
  error = r3;
   2d5dc:	e0bfe617 	ldw	r2,-104(fp)
   2d5e0:	e0bfeb15 	stw	r2,-84(fp)

  if (error == 0)
   2d5e4:	e0bfeb17 	ldw	r2,-84(fp)
   2d5e8:	1000621e 	bne	r2,zero,2d774 <alt_hostfs_fstat+0x208>
     * no change is required.  On a little-endian processor we need to swap
     * the bytes in each word.
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
   2d5ec:	e0bfed04 	addi	r2,fp,-76
   2d5f0:	e0bfe515 	stw	r2,-108(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
   2d5f4:	e0bfe517 	ldw	r2,-108(fp)
   2d5f8:	10801004 	addi	r2,r2,64
   2d5fc:	e0bfec15 	stw	r2,-80(fp)
    for ( ; ptr < end ; ptr++)
   2d600:	00001606 	br	2d65c <alt_hostfs_fstat+0xf0>
      *ptr = ((*ptr & 0xFF000000) >> 24) |
   2d604:	e0bfe517 	ldw	r2,-108(fp)
   2d608:	10800017 	ldw	r2,0(r2)
   2d60c:	1006d63a 	srli	r3,r2,24
             ((*ptr & 0x00FF0000) >> 8)  |
   2d610:	e0bfe517 	ldw	r2,-108(fp)
   2d614:	10800017 	ldw	r2,0(r2)
   2d618:	10803fec 	andhi	r2,r2,255
   2d61c:	1004d23a 	srli	r2,r2,8

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
   2d620:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
   2d624:	e0bfe517 	ldw	r2,-108(fp)
   2d628:	10800017 	ldw	r2,0(r2)
   2d62c:	10bfc00c 	andi	r2,r2,65280
   2d630:	1004923a 	slli	r2,r2,8
#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
   2d634:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
   2d638:	e0bfe517 	ldw	r2,-108(fp)
   2d63c:	10800017 	ldw	r2,0(r2)
   2d640:	1004963a 	slli	r2,r2,24
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
   2d644:	1886b03a 	or	r3,r3,r2

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
   2d648:	e0bfe517 	ldw	r2,-108(fp)
   2d64c:	10c00015 	stw	r3,0(r2)
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
   2d650:	e0bfe517 	ldw	r2,-108(fp)
   2d654:	10800104 	addi	r2,r2,4
   2d658:	e0bfe515 	stw	r2,-108(fp)
   2d65c:	e0ffe517 	ldw	r3,-108(fp)
   2d660:	e0bfec17 	ldw	r2,-80(fp)
   2d664:	18bfe736 	bltu	r3,r2,2d604 <alt_hostfs_fstat+0x98>
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
   2d668:	e0bffe17 	ldw	r2,-8(fp)
   2d66c:	e0bfe515 	stw	r2,-108(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
   2d670:	e0bfe517 	ldw	r2,-108(fp)
   2d674:	10800f04 	addi	r2,r2,60
   2d678:	e0bfec15 	stw	r2,-80(fp)
    for ( ; ptr < end ; ptr++)
   2d67c:	00000506 	br	2d694 <alt_hostfs_fstat+0x128>
      *ptr = 0;
   2d680:	e0bfe517 	ldw	r2,-108(fp)
   2d684:	10000015 	stw	zero,0(r2)
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
    for ( ; ptr < end ; ptr++)
   2d688:	e0bfe517 	ldw	r2,-108(fp)
   2d68c:	10800104 	addi	r2,r2,4
   2d690:	e0bfe515 	stw	r2,-108(fp)
   2d694:	e0ffe517 	ldw	r3,-108(fp)
   2d698:	e0bfec17 	ldw	r2,-80(fp)
   2d69c:	18bff836 	bltu	r3,r2,2d680 <alt_hostfs_fstat+0x114>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
   2d6a0:	e0bfed17 	ldw	r2,-76(fp)
   2d6a4:	1007883a 	mov	r3,r2
   2d6a8:	e0bffe17 	ldw	r2,-8(fp)
   2d6ac:	10c0000d 	sth	r3,0(r2)
    st->st_ino     = hoststat.fst_ino;
   2d6b0:	e0bfee17 	ldw	r2,-72(fp)
   2d6b4:	1007883a 	mov	r3,r2
   2d6b8:	e0bffe17 	ldw	r2,-8(fp)
   2d6bc:	10c0008d 	sth	r3,2(r2)
    st->st_mode    = hoststat.fst_mode;
   2d6c0:	e0ffef17 	ldw	r3,-68(fp)
   2d6c4:	e0bffe17 	ldw	r2,-8(fp)
   2d6c8:	10c00115 	stw	r3,4(r2)
    st->st_nlink   = hoststat.fst_nlink;
   2d6cc:	e0bff017 	ldw	r2,-64(fp)
   2d6d0:	1007883a 	mov	r3,r2
   2d6d4:	e0bffe17 	ldw	r2,-8(fp)
   2d6d8:	10c0020d 	sth	r3,8(r2)
    st->st_uid     = hoststat.fst_uid;
   2d6dc:	e0bff117 	ldw	r2,-60(fp)
   2d6e0:	1007883a 	mov	r3,r2
   2d6e4:	e0bffe17 	ldw	r2,-8(fp)
   2d6e8:	10c0028d 	sth	r3,10(r2)
    st->st_gid     = hoststat.fst_gid;
   2d6ec:	e0bff217 	ldw	r2,-56(fp)
   2d6f0:	1007883a 	mov	r3,r2
   2d6f4:	e0bffe17 	ldw	r2,-8(fp)
   2d6f8:	10c0030d 	sth	r3,12(r2)
    st->st_rdev    = hoststat.fst_rdev;
   2d6fc:	e0bff317 	ldw	r2,-52(fp)
   2d700:	1007883a 	mov	r3,r2
   2d704:	e0bffe17 	ldw	r2,-8(fp)
   2d708:	10c0038d 	sth	r3,14(r2)
    st->st_size    = hoststat.fst_size[1];
   2d70c:	e0bff517 	ldw	r2,-44(fp)
   2d710:	1007883a 	mov	r3,r2
   2d714:	e0bffe17 	ldw	r2,-8(fp)
   2d718:	10c00415 	stw	r3,16(r2)

    st->st_atime   = hoststat.fst_atime;
   2d71c:	e0bffa17 	ldw	r2,-24(fp)
   2d720:	1007883a 	mov	r3,r2
   2d724:	e0bffe17 	ldw	r2,-8(fp)
   2d728:	10c00515 	stw	r3,20(r2)
    st->st_mtime   = hoststat.fst_mtime;
   2d72c:	e0bffb17 	ldw	r2,-20(fp)
   2d730:	1007883a 	mov	r3,r2
   2d734:	e0bffe17 	ldw	r2,-8(fp)
   2d738:	10c00715 	stw	r3,28(r2)
    st->st_ctime   = hoststat.fst_ctime;
   2d73c:	e0bffc17 	ldw	r2,-16(fp)
   2d740:	1007883a 	mov	r3,r2
   2d744:	e0bffe17 	ldw	r2,-8(fp)
   2d748:	10c00915 	stw	r3,36(r2)

    st->st_blksize = hoststat.fst_blksize[1];
   2d74c:	e0bff717 	ldw	r2,-36(fp)
   2d750:	1007883a 	mov	r3,r2
   2d754:	e0bffe17 	ldw	r2,-8(fp)
   2d758:	10c00b15 	stw	r3,44(r2)
    st->st_blocks  = hoststat.fst_blocks[1];
   2d75c:	e0bff917 	ldw	r2,-28(fp)
   2d760:	1007883a 	mov	r3,r2
   2d764:	e0bffe17 	ldw	r2,-8(fp)
   2d768:	10c00c15 	stw	r3,48(r2)

    return rc;
   2d76c:	e0bfea17 	ldw	r2,-88(fp)
   2d770:	00000206 	br	2d77c <alt_hostfs_fstat+0x210>
  }
  else
    return -error;
   2d774:	e0bfeb17 	ldw	r2,-84(fp)
   2d778:	0085c83a 	sub	r2,zero,r2
}
   2d77c:	e037883a 	mov	sp,fp
   2d780:	df000217 	ldw	fp,8(sp)
   2d784:	dc400117 	ldw	r17,4(sp)
   2d788:	dc000017 	ldw	r16,0(sp)
   2d78c:	dec00304 	addi	sp,sp,12
   2d790:	f800283a 	ret

0002d794 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   2d794:	defff504 	addi	sp,sp,-44
   2d798:	df000a15 	stw	fp,40(sp)
   2d79c:	df000a04 	addi	fp,sp,40
   2d7a0:	e13ffc15 	stw	r4,-16(fp)
   2d7a4:	e17ffd15 	stw	r5,-12(fp)
   2d7a8:	e1bffe15 	stw	r6,-8(fp)
   2d7ac:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   2d7b0:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   2d7b4:	008000f4 	movhi	r2,3
   2d7b8:	10882f04 	addi	r2,r2,8380
   2d7bc:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   2d7c0:	10003f26 	beq	r2,zero,2d8c0 <alt_alarm_start+0x12c>
  {
    if (alarm)
   2d7c4:	e0bffc17 	ldw	r2,-16(fp)
   2d7c8:	10003b26 	beq	r2,zero,2d8b8 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   2d7cc:	e0bffc17 	ldw	r2,-16(fp)
   2d7d0:	e0fffe17 	ldw	r3,-8(fp)
   2d7d4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   2d7d8:	e0bffc17 	ldw	r2,-16(fp)
   2d7dc:	e0ffff17 	ldw	r3,-4(fp)
   2d7e0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2d7e4:	0005303a 	rdctl	r2,status
   2d7e8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2d7ec:	e0fff817 	ldw	r3,-32(fp)
   2d7f0:	00bfff84 	movi	r2,-2
   2d7f4:	1884703a 	and	r2,r3,r2
   2d7f8:	1001703a 	wrctl	status,r2
  
  return context;
   2d7fc:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   2d800:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   2d804:	008000f4 	movhi	r2,3
   2d808:	10883004 	addi	r2,r2,8384
   2d80c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   2d810:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   2d814:	e0fffd17 	ldw	r3,-12(fp)
   2d818:	e0bff617 	ldw	r2,-40(fp)
   2d81c:	1885883a 	add	r2,r3,r2
   2d820:	10c00044 	addi	r3,r2,1
   2d824:	e0bffc17 	ldw	r2,-16(fp)
   2d828:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   2d82c:	e0bffc17 	ldw	r2,-16(fp)
   2d830:	10c00217 	ldw	r3,8(r2)
   2d834:	e0bff617 	ldw	r2,-40(fp)
   2d838:	1880042e 	bgeu	r3,r2,2d84c <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   2d83c:	e0bffc17 	ldw	r2,-16(fp)
   2d840:	00c00044 	movi	r3,1
   2d844:	10c00405 	stb	r3,16(r2)
   2d848:	00000206 	br	2d854 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   2d84c:	e0bffc17 	ldw	r2,-16(fp)
   2d850:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   2d854:	e0bffc17 	ldw	r2,-16(fp)
   2d858:	00c000f4 	movhi	r3,3
   2d85c:	18c17004 	addi	r3,r3,1472
   2d860:	e0fff915 	stw	r3,-28(fp)
   2d864:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   2d868:	e0bffa17 	ldw	r2,-24(fp)
   2d86c:	e0fff917 	ldw	r3,-28(fp)
   2d870:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   2d874:	e0bff917 	ldw	r2,-28(fp)
   2d878:	10c00017 	ldw	r3,0(r2)
   2d87c:	e0bffa17 	ldw	r2,-24(fp)
   2d880:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   2d884:	e0bff917 	ldw	r2,-28(fp)
   2d888:	10800017 	ldw	r2,0(r2)
   2d88c:	e0fffa17 	ldw	r3,-24(fp)
   2d890:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   2d894:	e0bff917 	ldw	r2,-28(fp)
   2d898:	e0fffa17 	ldw	r3,-24(fp)
   2d89c:	10c00015 	stw	r3,0(r2)
   2d8a0:	e0bff717 	ldw	r2,-36(fp)
   2d8a4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2d8a8:	e0bffb17 	ldw	r2,-20(fp)
   2d8ac:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   2d8b0:	0005883a 	mov	r2,zero
   2d8b4:	00000306 	br	2d8c4 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   2d8b8:	00bffa84 	movi	r2,-22
   2d8bc:	00000106 	br	2d8c4 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   2d8c0:	00bfde84 	movi	r2,-134
  }
}
   2d8c4:	e037883a 	mov	sp,fp
   2d8c8:	df000017 	ldw	fp,0(sp)
   2d8cc:	dec00104 	addi	sp,sp,4
   2d8d0:	f800283a 	ret

0002d8d4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   2d8d4:	deffff04 	addi	sp,sp,-4
   2d8d8:	df000015 	stw	fp,0(sp)
   2d8dc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   2d8e0:	e037883a 	mov	sp,fp
   2d8e4:	df000017 	ldw	fp,0(sp)
   2d8e8:	dec00104 	addi	sp,sp,4
   2d8ec:	f800283a 	ret

0002d8f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2d8f0:	defffe04 	addi	sp,sp,-8
   2d8f4:	dfc00115 	stw	ra,4(sp)
   2d8f8:	df000015 	stw	fp,0(sp)
   2d8fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2d900:	008000f4 	movhi	r2,3
   2d904:	10815b04 	addi	r2,r2,1388
   2d908:	10800017 	ldw	r2,0(r2)
   2d90c:	10000526 	beq	r2,zero,2d924 <alt_get_errno+0x34>
   2d910:	008000f4 	movhi	r2,3
   2d914:	10815b04 	addi	r2,r2,1388
   2d918:	10800017 	ldw	r2,0(r2)
   2d91c:	103ee83a 	callr	r2
   2d920:	00000206 	br	2d92c <alt_get_errno+0x3c>
   2d924:	008000f4 	movhi	r2,3
   2d928:	10882404 	addi	r2,r2,8336
}
   2d92c:	e037883a 	mov	sp,fp
   2d930:	dfc00117 	ldw	ra,4(sp)
   2d934:	df000017 	ldw	fp,0(sp)
   2d938:	dec00204 	addi	sp,sp,8
   2d93c:	f800283a 	ret

0002d940 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   2d940:	defffa04 	addi	sp,sp,-24
   2d944:	dfc00515 	stw	ra,20(sp)
   2d948:	df000415 	stw	fp,16(sp)
   2d94c:	df000404 	addi	fp,sp,16
   2d950:	e13ffe15 	stw	r4,-8(fp)
   2d954:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   2d958:	e0bffe17 	ldw	r2,-8(fp)
   2d95c:	10000326 	beq	r2,zero,2d96c <alt_dev_llist_insert+0x2c>
   2d960:	e0bffe17 	ldw	r2,-8(fp)
   2d964:	10800217 	ldw	r2,8(r2)
   2d968:	1000051e 	bne	r2,zero,2d980 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   2d96c:	002d8f00 	call	2d8f0 <alt_get_errno>
   2d970:	00c00584 	movi	r3,22
   2d974:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   2d978:	00bffa84 	movi	r2,-22
   2d97c:	00001306 	br	2d9cc <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   2d980:	e0bffe17 	ldw	r2,-8(fp)
   2d984:	e0ffff17 	ldw	r3,-4(fp)
   2d988:	e0fffc15 	stw	r3,-16(fp)
   2d98c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   2d990:	e0bffd17 	ldw	r2,-12(fp)
   2d994:	e0fffc17 	ldw	r3,-16(fp)
   2d998:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   2d99c:	e0bffc17 	ldw	r2,-16(fp)
   2d9a0:	10c00017 	ldw	r3,0(r2)
   2d9a4:	e0bffd17 	ldw	r2,-12(fp)
   2d9a8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   2d9ac:	e0bffc17 	ldw	r2,-16(fp)
   2d9b0:	10800017 	ldw	r2,0(r2)
   2d9b4:	e0fffd17 	ldw	r3,-12(fp)
   2d9b8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   2d9bc:	e0bffc17 	ldw	r2,-16(fp)
   2d9c0:	e0fffd17 	ldw	r3,-12(fp)
   2d9c4:	10c00015 	stw	r3,0(r2)

  return 0;  
   2d9c8:	0005883a 	mov	r2,zero
}
   2d9cc:	e037883a 	mov	sp,fp
   2d9d0:	dfc00117 	ldw	ra,4(sp)
   2d9d4:	df000017 	ldw	fp,0(sp)
   2d9d8:	dec00204 	addi	sp,sp,8
   2d9dc:	f800283a 	ret

0002d9e0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   2d9e0:	defffd04 	addi	sp,sp,-12
   2d9e4:	dfc00215 	stw	ra,8(sp)
   2d9e8:	df000115 	stw	fp,4(sp)
   2d9ec:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   2d9f0:	008000f4 	movhi	r2,3
   2d9f4:	10b9d704 	addi	r2,r2,-6308
   2d9f8:	e0bfff15 	stw	r2,-4(fp)
   2d9fc:	00000606 	br	2da18 <_do_ctors+0x38>
        (*ctor) (); 
   2da00:	e0bfff17 	ldw	r2,-4(fp)
   2da04:	10800017 	ldw	r2,0(r2)
   2da08:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   2da0c:	e0bfff17 	ldw	r2,-4(fp)
   2da10:	10bfff04 	addi	r2,r2,-4
   2da14:	e0bfff15 	stw	r2,-4(fp)
   2da18:	e0ffff17 	ldw	r3,-4(fp)
   2da1c:	008000f4 	movhi	r2,3
   2da20:	10b9d804 	addi	r2,r2,-6304
   2da24:	18bff62e 	bgeu	r3,r2,2da00 <_do_ctors+0x20>
        (*ctor) (); 
}
   2da28:	e037883a 	mov	sp,fp
   2da2c:	dfc00117 	ldw	ra,4(sp)
   2da30:	df000017 	ldw	fp,0(sp)
   2da34:	dec00204 	addi	sp,sp,8
   2da38:	f800283a 	ret

0002da3c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   2da3c:	defffd04 	addi	sp,sp,-12
   2da40:	dfc00215 	stw	ra,8(sp)
   2da44:	df000115 	stw	fp,4(sp)
   2da48:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   2da4c:	008000f4 	movhi	r2,3
   2da50:	10b9d704 	addi	r2,r2,-6308
   2da54:	e0bfff15 	stw	r2,-4(fp)
   2da58:	00000606 	br	2da74 <_do_dtors+0x38>
        (*dtor) (); 
   2da5c:	e0bfff17 	ldw	r2,-4(fp)
   2da60:	10800017 	ldw	r2,0(r2)
   2da64:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   2da68:	e0bfff17 	ldw	r2,-4(fp)
   2da6c:	10bfff04 	addi	r2,r2,-4
   2da70:	e0bfff15 	stw	r2,-4(fp)
   2da74:	e0ffff17 	ldw	r3,-4(fp)
   2da78:	008000f4 	movhi	r2,3
   2da7c:	10b9d804 	addi	r2,r2,-6304
   2da80:	18bff62e 	bgeu	r3,r2,2da5c <_do_dtors+0x20>
        (*dtor) (); 
}
   2da84:	e037883a 	mov	sp,fp
   2da88:	dfc00117 	ldw	ra,4(sp)
   2da8c:	df000017 	ldw	fp,0(sp)
   2da90:	dec00204 	addi	sp,sp,8
   2da94:	f800283a 	ret

0002da98 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   2da98:	defffa04 	addi	sp,sp,-24
   2da9c:	dfc00515 	stw	ra,20(sp)
   2daa0:	df000415 	stw	fp,16(sp)
   2daa4:	df000404 	addi	fp,sp,16
   2daa8:	e13ffe15 	stw	r4,-8(fp)
   2daac:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   2dab0:	e0bfff17 	ldw	r2,-4(fp)
   2dab4:	10800017 	ldw	r2,0(r2)
   2dab8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   2dabc:	e13ffe17 	ldw	r4,-8(fp)
   2dac0:	00236880 	call	23688 <strlen>
   2dac4:	10800044 	addi	r2,r2,1
   2dac8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   2dacc:	00000d06 	br	2db04 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   2dad0:	e0bffc17 	ldw	r2,-16(fp)
   2dad4:	10c00217 	ldw	r3,8(r2)
   2dad8:	e0bffd17 	ldw	r2,-12(fp)
   2dadc:	1809883a 	mov	r4,r3
   2dae0:	e17ffe17 	ldw	r5,-8(fp)
   2dae4:	100d883a 	mov	r6,r2
   2dae8:	002e3d80 	call	2e3d8 <memcmp>
   2daec:	1000021e 	bne	r2,zero,2daf8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   2daf0:	e0bffc17 	ldw	r2,-16(fp)
   2daf4:	00000706 	br	2db14 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   2daf8:	e0bffc17 	ldw	r2,-16(fp)
   2dafc:	10800017 	ldw	r2,0(r2)
   2db00:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   2db04:	e0fffc17 	ldw	r3,-16(fp)
   2db08:	e0bfff17 	ldw	r2,-4(fp)
   2db0c:	18bff01e 	bne	r3,r2,2dad0 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   2db10:	0005883a 	mov	r2,zero
}
   2db14:	e037883a 	mov	sp,fp
   2db18:	dfc00117 	ldw	ra,4(sp)
   2db1c:	df000017 	ldw	fp,0(sp)
   2db20:	dec00204 	addi	sp,sp,8
   2db24:	f800283a 	ret

0002db28 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   2db28:	defffb04 	addi	sp,sp,-20
   2db2c:	dfc00415 	stw	ra,16(sp)
   2db30:	df000315 	stw	fp,12(sp)
   2db34:	df000304 	addi	fp,sp,12
   2db38:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   2db3c:	008000f4 	movhi	r2,3
   2db40:	10815604 	addi	r2,r2,1368
   2db44:	10800017 	ldw	r2,0(r2)
   2db48:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   2db4c:	00003106 	br	2dc14 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   2db50:	e0bffd17 	ldw	r2,-12(fp)
   2db54:	10800217 	ldw	r2,8(r2)
   2db58:	1009883a 	mov	r4,r2
   2db5c:	00236880 	call	23688 <strlen>
   2db60:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   2db64:	e0bffd17 	ldw	r2,-12(fp)
   2db68:	10c00217 	ldw	r3,8(r2)
   2db6c:	e0bffe17 	ldw	r2,-8(fp)
   2db70:	10bfffc4 	addi	r2,r2,-1
   2db74:	1885883a 	add	r2,r3,r2
   2db78:	10800003 	ldbu	r2,0(r2)
   2db7c:	10803fcc 	andi	r2,r2,255
   2db80:	1080201c 	xori	r2,r2,128
   2db84:	10bfe004 	addi	r2,r2,-128
   2db88:	10800bd8 	cmpnei	r2,r2,47
   2db8c:	1000031e 	bne	r2,zero,2db9c <alt_find_file+0x74>
    {
      len -= 1;
   2db90:	e0bffe17 	ldw	r2,-8(fp)
   2db94:	10bfffc4 	addi	r2,r2,-1
   2db98:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   2db9c:	e0bffe17 	ldw	r2,-8(fp)
   2dba0:	e0ffff17 	ldw	r3,-4(fp)
   2dba4:	1885883a 	add	r2,r3,r2
   2dba8:	10800003 	ldbu	r2,0(r2)
   2dbac:	10803fcc 	andi	r2,r2,255
   2dbb0:	1080201c 	xori	r2,r2,128
   2dbb4:	10bfe004 	addi	r2,r2,-128
   2dbb8:	10800be0 	cmpeqi	r2,r2,47
   2dbbc:	1000081e 	bne	r2,zero,2dbe0 <alt_find_file+0xb8>
   2dbc0:	e0bffe17 	ldw	r2,-8(fp)
   2dbc4:	e0ffff17 	ldw	r3,-4(fp)
   2dbc8:	1885883a 	add	r2,r3,r2
   2dbcc:	10800003 	ldbu	r2,0(r2)
   2dbd0:	10803fcc 	andi	r2,r2,255
   2dbd4:	1080201c 	xori	r2,r2,128
   2dbd8:	10bfe004 	addi	r2,r2,-128
   2dbdc:	10000a1e 	bne	r2,zero,2dc08 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   2dbe0:	e0bffd17 	ldw	r2,-12(fp)
   2dbe4:	10c00217 	ldw	r3,8(r2)
   2dbe8:	e0bffe17 	ldw	r2,-8(fp)
   2dbec:	1809883a 	mov	r4,r3
   2dbf0:	e17fff17 	ldw	r5,-4(fp)
   2dbf4:	100d883a 	mov	r6,r2
   2dbf8:	002e3d80 	call	2e3d8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   2dbfc:	1000021e 	bne	r2,zero,2dc08 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   2dc00:	e0bffd17 	ldw	r2,-12(fp)
   2dc04:	00000806 	br	2dc28 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   2dc08:	e0bffd17 	ldw	r2,-12(fp)
   2dc0c:	10800017 	ldw	r2,0(r2)
   2dc10:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   2dc14:	e0fffd17 	ldw	r3,-12(fp)
   2dc18:	008000f4 	movhi	r2,3
   2dc1c:	10815604 	addi	r2,r2,1368
   2dc20:	18bfcb1e 	bne	r3,r2,2db50 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   2dc24:	0005883a 	mov	r2,zero
}
   2dc28:	e037883a 	mov	sp,fp
   2dc2c:	dfc00117 	ldw	ra,4(sp)
   2dc30:	df000017 	ldw	fp,0(sp)
   2dc34:	dec00204 	addi	sp,sp,8
   2dc38:	f800283a 	ret

0002dc3c <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
   2dc3c:	defffc04 	addi	sp,sp,-16
   2dc40:	df000315 	stw	fp,12(sp)
   2dc44:	df000304 	addi	fp,sp,12
   2dc48:	e13fff15 	stw	r4,-4(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
   2dc4c:	e0bfff17 	ldw	r2,-4(fp)
   2dc50:	10800217 	ldw	r2,8(r2)
   2dc54:	1000021e 	bne	r2,zero,2dc60 <alt_fs_reg+0x24>
  {
    return -ENODEV;
   2dc58:	00bffb44 	movi	r2,-19
   2dc5c:	00001406 	br	2dcb0 <alt_fs_reg+0x74>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
   2dc60:	e0bfff17 	ldw	r2,-4(fp)
   2dc64:	00c000f4 	movhi	r3,3
   2dc68:	18c15604 	addi	r3,r3,1368
   2dc6c:	e0fffd15 	stw	r3,-12(fp)
   2dc70:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   2dc74:	e0bffe17 	ldw	r2,-8(fp)
   2dc78:	e0fffd17 	ldw	r3,-12(fp)
   2dc7c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   2dc80:	e0bffd17 	ldw	r2,-12(fp)
   2dc84:	10c00017 	ldw	r3,0(r2)
   2dc88:	e0bffe17 	ldw	r2,-8(fp)
   2dc8c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   2dc90:	e0bffd17 	ldw	r2,-12(fp)
   2dc94:	10800017 	ldw	r2,0(r2)
   2dc98:	e0fffe17 	ldw	r3,-8(fp)
   2dc9c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   2dca0:	e0bffd17 	ldw	r2,-12(fp)
   2dca4:	e0fffe17 	ldw	r3,-8(fp)
   2dca8:	10c00015 	stw	r3,0(r2)

  return 0;
   2dcac:	0005883a 	mov	r2,zero
} 
   2dcb0:	e037883a 	mov	sp,fp
   2dcb4:	df000017 	ldw	fp,0(sp)
   2dcb8:	dec00104 	addi	sp,sp,4
   2dcbc:	f800283a 	ret

0002dcc0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   2dcc0:	defffa04 	addi	sp,sp,-24
   2dcc4:	dfc00515 	stw	ra,20(sp)
   2dcc8:	df000415 	stw	fp,16(sp)
   2dccc:	dc000315 	stw	r16,12(sp)
   2dcd0:	df000304 	addi	fp,sp,12
   2dcd4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   2dcd8:	00bffa04 	movi	r2,-24
   2dcdc:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   2dce0:	e03ffd15 	stw	zero,-12(fp)
   2dce4:	00002106 	br	2dd6c <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   2dce8:	040000f4 	movhi	r16,3
   2dcec:	843ccf04 	addi	r16,r16,-3268
   2dcf0:	e0bffd17 	ldw	r2,-12(fp)
   2dcf4:	1009883a 	mov	r4,r2
   2dcf8:	01400304 	movi	r5,12
   2dcfc:	00210140 	call	21014 <__mulsi3>
   2dd00:	8085883a 	add	r2,r16,r2
   2dd04:	10800017 	ldw	r2,0(r2)
   2dd08:	1000151e 	bne	r2,zero,2dd60 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   2dd0c:	040000f4 	movhi	r16,3
   2dd10:	843ccf04 	addi	r16,r16,-3268
   2dd14:	e0bffd17 	ldw	r2,-12(fp)
   2dd18:	1009883a 	mov	r4,r2
   2dd1c:	01400304 	movi	r5,12
   2dd20:	00210140 	call	21014 <__mulsi3>
   2dd24:	8085883a 	add	r2,r16,r2
   2dd28:	e0ffff17 	ldw	r3,-4(fp)
   2dd2c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   2dd30:	008000f4 	movhi	r2,3
   2dd34:	10815a04 	addi	r2,r2,1384
   2dd38:	10c00017 	ldw	r3,0(r2)
   2dd3c:	e0bffd17 	ldw	r2,-12(fp)
   2dd40:	1880040e 	bge	r3,r2,2dd54 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   2dd44:	008000f4 	movhi	r2,3
   2dd48:	10815a04 	addi	r2,r2,1384
   2dd4c:	e0fffd17 	ldw	r3,-12(fp)
   2dd50:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   2dd54:	e0bffd17 	ldw	r2,-12(fp)
   2dd58:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   2dd5c:	00000606 	br	2dd78 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   2dd60:	e0bffd17 	ldw	r2,-12(fp)
   2dd64:	10800044 	addi	r2,r2,1
   2dd68:	e0bffd15 	stw	r2,-12(fp)
   2dd6c:	e0bffd17 	ldw	r2,-12(fp)
   2dd70:	10800810 	cmplti	r2,r2,32
   2dd74:	103fdc1e 	bne	r2,zero,2dce8 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   2dd78:	e0bffe17 	ldw	r2,-8(fp)
}
   2dd7c:	e037883a 	mov	sp,fp
   2dd80:	dfc00217 	ldw	ra,8(sp)
   2dd84:	df000117 	ldw	fp,4(sp)
   2dd88:	dc000017 	ldw	r16,0(sp)
   2dd8c:	dec00304 	addi	sp,sp,12
   2dd90:	f800283a 	ret

0002dd94 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   2dd94:	deffff04 	addi	sp,sp,-4
   2dd98:	df000015 	stw	fp,0(sp)
   2dd9c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   2dda0:	e037883a 	mov	sp,fp
   2dda4:	df000017 	ldw	fp,0(sp)
   2dda8:	dec00104 	addi	sp,sp,4
   2ddac:	f800283a 	ret

0002ddb0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   2ddb0:	defff904 	addi	sp,sp,-28
   2ddb4:	dfc00615 	stw	ra,24(sp)
   2ddb8:	df000515 	stw	fp,20(sp)
   2ddbc:	df000504 	addi	fp,sp,20
   2ddc0:	e13ffc15 	stw	r4,-16(fp)
   2ddc4:	e17ffd15 	stw	r5,-12(fp)
   2ddc8:	e1bffe15 	stw	r6,-8(fp)
   2ddcc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   2ddd0:	e0800217 	ldw	r2,8(fp)
   2ddd4:	d8800015 	stw	r2,0(sp)
   2ddd8:	e13ffc17 	ldw	r4,-16(fp)
   2dddc:	e17ffd17 	ldw	r5,-12(fp)
   2dde0:	e1bffe17 	ldw	r6,-8(fp)
   2dde4:	e1ffff17 	ldw	r7,-4(fp)
   2dde8:	002df880 	call	2df88 <alt_iic_isr_register>
}  
   2ddec:	e037883a 	mov	sp,fp
   2ddf0:	dfc00117 	ldw	ra,4(sp)
   2ddf4:	df000017 	ldw	fp,0(sp)
   2ddf8:	dec00204 	addi	sp,sp,8
   2ddfc:	f800283a 	ret

0002de00 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   2de00:	defff904 	addi	sp,sp,-28
   2de04:	df000615 	stw	fp,24(sp)
   2de08:	df000604 	addi	fp,sp,24
   2de0c:	e13ffe15 	stw	r4,-8(fp)
   2de10:	e17fff15 	stw	r5,-4(fp)
   2de14:	e0bfff17 	ldw	r2,-4(fp)
   2de18:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2de1c:	0005303a 	rdctl	r2,status
   2de20:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2de24:	e0fffb17 	ldw	r3,-20(fp)
   2de28:	00bfff84 	movi	r2,-2
   2de2c:	1884703a 	and	r2,r3,r2
   2de30:	1001703a 	wrctl	status,r2
  
  return context;
   2de34:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   2de38:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   2de3c:	e0bffa17 	ldw	r2,-24(fp)
   2de40:	00c00044 	movi	r3,1
   2de44:	1884983a 	sll	r2,r3,r2
   2de48:	1007883a 	mov	r3,r2
   2de4c:	008000f4 	movhi	r2,3
   2de50:	10882e04 	addi	r2,r2,8376
   2de54:	10800017 	ldw	r2,0(r2)
   2de58:	1886b03a 	or	r3,r3,r2
   2de5c:	008000f4 	movhi	r2,3
   2de60:	10882e04 	addi	r2,r2,8376
   2de64:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2de68:	008000f4 	movhi	r2,3
   2de6c:	10882e04 	addi	r2,r2,8376
   2de70:	10800017 	ldw	r2,0(r2)
   2de74:	100170fa 	wrctl	ienable,r2
   2de78:	e0bffc17 	ldw	r2,-16(fp)
   2de7c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2de80:	e0bffd17 	ldw	r2,-12(fp)
   2de84:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   2de88:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   2de8c:	e037883a 	mov	sp,fp
   2de90:	df000017 	ldw	fp,0(sp)
   2de94:	dec00104 	addi	sp,sp,4
   2de98:	f800283a 	ret

0002de9c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   2de9c:	defff904 	addi	sp,sp,-28
   2dea0:	df000615 	stw	fp,24(sp)
   2dea4:	df000604 	addi	fp,sp,24
   2dea8:	e13ffe15 	stw	r4,-8(fp)
   2deac:	e17fff15 	stw	r5,-4(fp)
   2deb0:	e0bfff17 	ldw	r2,-4(fp)
   2deb4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2deb8:	0005303a 	rdctl	r2,status
   2debc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2dec0:	e0fffb17 	ldw	r3,-20(fp)
   2dec4:	00bfff84 	movi	r2,-2
   2dec8:	1884703a 	and	r2,r3,r2
   2decc:	1001703a 	wrctl	status,r2
  
  return context;
   2ded0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   2ded4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   2ded8:	e0bffa17 	ldw	r2,-24(fp)
   2dedc:	00c00044 	movi	r3,1
   2dee0:	1884983a 	sll	r2,r3,r2
   2dee4:	0084303a 	nor	r2,zero,r2
   2dee8:	1007883a 	mov	r3,r2
   2deec:	008000f4 	movhi	r2,3
   2def0:	10882e04 	addi	r2,r2,8376
   2def4:	10800017 	ldw	r2,0(r2)
   2def8:	1886703a 	and	r3,r3,r2
   2defc:	008000f4 	movhi	r2,3
   2df00:	10882e04 	addi	r2,r2,8376
   2df04:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2df08:	008000f4 	movhi	r2,3
   2df0c:	10882e04 	addi	r2,r2,8376
   2df10:	10800017 	ldw	r2,0(r2)
   2df14:	100170fa 	wrctl	ienable,r2
   2df18:	e0bffc17 	ldw	r2,-16(fp)
   2df1c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2df20:	e0bffd17 	ldw	r2,-12(fp)
   2df24:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   2df28:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   2df2c:	e037883a 	mov	sp,fp
   2df30:	df000017 	ldw	fp,0(sp)
   2df34:	dec00104 	addi	sp,sp,4
   2df38:	f800283a 	ret

0002df3c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   2df3c:	defffc04 	addi	sp,sp,-16
   2df40:	df000315 	stw	fp,12(sp)
   2df44:	df000304 	addi	fp,sp,12
   2df48:	e13ffe15 	stw	r4,-8(fp)
   2df4c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   2df50:	000530fa 	rdctl	r2,ienable
   2df54:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   2df58:	e0bfff17 	ldw	r2,-4(fp)
   2df5c:	00c00044 	movi	r3,1
   2df60:	1884983a 	sll	r2,r3,r2
   2df64:	1007883a 	mov	r3,r2
   2df68:	e0bffd17 	ldw	r2,-12(fp)
   2df6c:	1884703a 	and	r2,r3,r2
   2df70:	1004c03a 	cmpne	r2,r2,zero
   2df74:	10803fcc 	andi	r2,r2,255
}
   2df78:	e037883a 	mov	sp,fp
   2df7c:	df000017 	ldw	fp,0(sp)
   2df80:	dec00104 	addi	sp,sp,4
   2df84:	f800283a 	ret

0002df88 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   2df88:	defff504 	addi	sp,sp,-44
   2df8c:	dfc00a15 	stw	ra,40(sp)
   2df90:	df000915 	stw	fp,36(sp)
   2df94:	df000904 	addi	fp,sp,36
   2df98:	e13ffc15 	stw	r4,-16(fp)
   2df9c:	e17ffd15 	stw	r5,-12(fp)
   2dfa0:	e1bffe15 	stw	r6,-8(fp)
   2dfa4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   2dfa8:	00bffa84 	movi	r2,-22
   2dfac:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   2dfb0:	e0bffd17 	ldw	r2,-12(fp)
   2dfb4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   2dfb8:	e0bff817 	ldw	r2,-32(fp)
   2dfbc:	10800808 	cmpgei	r2,r2,32
   2dfc0:	1000271e 	bne	r2,zero,2e060 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2dfc4:	0005303a 	rdctl	r2,status
   2dfc8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2dfcc:	e0fffa17 	ldw	r3,-24(fp)
   2dfd0:	00bfff84 	movi	r2,-2
   2dfd4:	1884703a 	and	r2,r3,r2
   2dfd8:	1001703a 	wrctl	status,r2
  
  return context;
   2dfdc:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   2dfe0:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   2dfe4:	00c000f4 	movhi	r3,3
   2dfe8:	18c83b04 	addi	r3,r3,8428
   2dfec:	e0bff817 	ldw	r2,-32(fp)
   2dff0:	100490fa 	slli	r2,r2,3
   2dff4:	1885883a 	add	r2,r3,r2
   2dff8:	e0fffe17 	ldw	r3,-8(fp)
   2dffc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   2e000:	00c000f4 	movhi	r3,3
   2e004:	18c83b04 	addi	r3,r3,8428
   2e008:	e0bff817 	ldw	r2,-32(fp)
   2e00c:	100490fa 	slli	r2,r2,3
   2e010:	1885883a 	add	r2,r3,r2
   2e014:	10800104 	addi	r2,r2,4
   2e018:	e0ffff17 	ldw	r3,-4(fp)
   2e01c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   2e020:	e0bffe17 	ldw	r2,-8(fp)
   2e024:	10000526 	beq	r2,zero,2e03c <alt_iic_isr_register+0xb4>
   2e028:	e0bff817 	ldw	r2,-32(fp)
   2e02c:	e13ffc17 	ldw	r4,-16(fp)
   2e030:	100b883a 	mov	r5,r2
   2e034:	002de000 	call	2de00 <alt_ic_irq_enable>
   2e038:	00000406 	br	2e04c <alt_iic_isr_register+0xc4>
   2e03c:	e0bff817 	ldw	r2,-32(fp)
   2e040:	e13ffc17 	ldw	r4,-16(fp)
   2e044:	100b883a 	mov	r5,r2
   2e048:	002de9c0 	call	2de9c <alt_ic_irq_disable>
   2e04c:	e0bff715 	stw	r2,-36(fp)
   2e050:	e0bff917 	ldw	r2,-28(fp)
   2e054:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2e058:	e0bffb17 	ldw	r2,-20(fp)
   2e05c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   2e060:	e0bff717 	ldw	r2,-36(fp)
}
   2e064:	e037883a 	mov	sp,fp
   2e068:	dfc00117 	ldw	ra,4(sp)
   2e06c:	df000017 	ldw	fp,0(sp)
   2e070:	dec00204 	addi	sp,sp,8
   2e074:	f800283a 	ret

0002e078 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   2e078:	defff804 	addi	sp,sp,-32
   2e07c:	dfc00715 	stw	ra,28(sp)
   2e080:	df000615 	stw	fp,24(sp)
   2e084:	dc000515 	stw	r16,20(sp)
   2e088:	df000504 	addi	fp,sp,20
   2e08c:	e13ffc15 	stw	r4,-16(fp)
   2e090:	e17ffd15 	stw	r5,-12(fp)
   2e094:	e1bffe15 	stw	r6,-8(fp)
   2e098:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   2e09c:	e13ffd17 	ldw	r4,-12(fp)
   2e0a0:	e17ffe17 	ldw	r5,-8(fp)
   2e0a4:	e1bfff17 	ldw	r6,-4(fp)
   2e0a8:	002bb240 	call	2bb24 <open>
   2e0ac:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   2e0b0:	e0bffb17 	ldw	r2,-20(fp)
   2e0b4:	10002216 	blt	r2,zero,2e140 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   2e0b8:	040000f4 	movhi	r16,3
   2e0bc:	843ccf04 	addi	r16,r16,-3268
   2e0c0:	e0bffb17 	ldw	r2,-20(fp)
   2e0c4:	1009883a 	mov	r4,r2
   2e0c8:	01400304 	movi	r5,12
   2e0cc:	00210140 	call	21014 <__mulsi3>
   2e0d0:	8085883a 	add	r2,r16,r2
   2e0d4:	10c00017 	ldw	r3,0(r2)
   2e0d8:	e0bffc17 	ldw	r2,-16(fp)
   2e0dc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   2e0e0:	040000f4 	movhi	r16,3
   2e0e4:	843ccf04 	addi	r16,r16,-3268
   2e0e8:	e0bffb17 	ldw	r2,-20(fp)
   2e0ec:	1009883a 	mov	r4,r2
   2e0f0:	01400304 	movi	r5,12
   2e0f4:	00210140 	call	21014 <__mulsi3>
   2e0f8:	8085883a 	add	r2,r16,r2
   2e0fc:	10800104 	addi	r2,r2,4
   2e100:	10c00017 	ldw	r3,0(r2)
   2e104:	e0bffc17 	ldw	r2,-16(fp)
   2e108:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   2e10c:	040000f4 	movhi	r16,3
   2e110:	843ccf04 	addi	r16,r16,-3268
   2e114:	e0bffb17 	ldw	r2,-20(fp)
   2e118:	1009883a 	mov	r4,r2
   2e11c:	01400304 	movi	r5,12
   2e120:	00210140 	call	21014 <__mulsi3>
   2e124:	8085883a 	add	r2,r16,r2
   2e128:	10800204 	addi	r2,r2,8
   2e12c:	10c00017 	ldw	r3,0(r2)
   2e130:	e0bffc17 	ldw	r2,-16(fp)
   2e134:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   2e138:	e13ffb17 	ldw	r4,-20(fp)
   2e13c:	002bdc00 	call	2bdc0 <alt_release_fd>
  }
} 
   2e140:	e037883a 	mov	sp,fp
   2e144:	dfc00217 	ldw	ra,8(sp)
   2e148:	df000117 	ldw	fp,4(sp)
   2e14c:	dc000017 	ldw	r16,0(sp)
   2e150:	dec00304 	addi	sp,sp,12
   2e154:	f800283a 	ret

0002e158 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   2e158:	defffb04 	addi	sp,sp,-20
   2e15c:	dfc00415 	stw	ra,16(sp)
   2e160:	df000315 	stw	fp,12(sp)
   2e164:	df000304 	addi	fp,sp,12
   2e168:	e13ffd15 	stw	r4,-12(fp)
   2e16c:	e17ffe15 	stw	r5,-8(fp)
   2e170:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   2e174:	010000f4 	movhi	r4,3
   2e178:	213cd204 	addi	r4,r4,-3256
   2e17c:	e17ffd17 	ldw	r5,-12(fp)
   2e180:	01800044 	movi	r6,1
   2e184:	01c07fc4 	movi	r7,511
   2e188:	002e0780 	call	2e078 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   2e18c:	010000f4 	movhi	r4,3
   2e190:	213ccf04 	addi	r4,r4,-3268
   2e194:	e17ffe17 	ldw	r5,-8(fp)
   2e198:	000d883a 	mov	r6,zero
   2e19c:	01c07fc4 	movi	r7,511
   2e1a0:	002e0780 	call	2e078 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   2e1a4:	010000f4 	movhi	r4,3
   2e1a8:	213cd504 	addi	r4,r4,-3244
   2e1ac:	e17fff17 	ldw	r5,-4(fp)
   2e1b0:	01800044 	movi	r6,1
   2e1b4:	01c07fc4 	movi	r7,511
   2e1b8:	002e0780 	call	2e078 <alt_open_fd>
}  
   2e1bc:	e037883a 	mov	sp,fp
   2e1c0:	dfc00117 	ldw	ra,4(sp)
   2e1c4:	df000017 	ldw	fp,0(sp)
   2e1c8:	dec00204 	addi	sp,sp,8
   2e1cc:	f800283a 	ret

0002e1d0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   2e1d0:	defffa04 	addi	sp,sp,-24
   2e1d4:	df000515 	stw	fp,20(sp)
   2e1d8:	df000504 	addi	fp,sp,20
   2e1dc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2e1e0:	0005303a 	rdctl	r2,status
   2e1e4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2e1e8:	e0fffc17 	ldw	r3,-16(fp)
   2e1ec:	00bfff84 	movi	r2,-2
   2e1f0:	1884703a 	and	r2,r3,r2
   2e1f4:	1001703a 	wrctl	status,r2
  
  return context;
   2e1f8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   2e1fc:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   2e200:	e0bfff17 	ldw	r2,-4(fp)
   2e204:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   2e208:	e0bffd17 	ldw	r2,-12(fp)
   2e20c:	10800017 	ldw	r2,0(r2)
   2e210:	e0fffd17 	ldw	r3,-12(fp)
   2e214:	18c00117 	ldw	r3,4(r3)
   2e218:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   2e21c:	e0bffd17 	ldw	r2,-12(fp)
   2e220:	10800117 	ldw	r2,4(r2)
   2e224:	e0fffd17 	ldw	r3,-12(fp)
   2e228:	18c00017 	ldw	r3,0(r3)
   2e22c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   2e230:	e0bffd17 	ldw	r2,-12(fp)
   2e234:	e0fffd17 	ldw	r3,-12(fp)
   2e238:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   2e23c:	e0bffd17 	ldw	r2,-12(fp)
   2e240:	e0fffd17 	ldw	r3,-12(fp)
   2e244:	10c00015 	stw	r3,0(r2)
   2e248:	e0bffb17 	ldw	r2,-20(fp)
   2e24c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2e250:	e0bffe17 	ldw	r2,-8(fp)
   2e254:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   2e258:	e037883a 	mov	sp,fp
   2e25c:	df000017 	ldw	fp,0(sp)
   2e260:	dec00104 	addi	sp,sp,4
   2e264:	f800283a 	ret

0002e268 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   2e268:	defffb04 	addi	sp,sp,-20
   2e26c:	dfc00415 	stw	ra,16(sp)
   2e270:	df000315 	stw	fp,12(sp)
   2e274:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   2e278:	d0a01f17 	ldw	r2,-32644(gp)
   2e27c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   2e280:	d0a6df17 	ldw	r2,-25732(gp)
   2e284:	10800044 	addi	r2,r2,1
   2e288:	d0a6df15 	stw	r2,-25732(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   2e28c:	00002e06 	br	2e348 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   2e290:	e0bffd17 	ldw	r2,-12(fp)
   2e294:	10800017 	ldw	r2,0(r2)
   2e298:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   2e29c:	e0bffd17 	ldw	r2,-12(fp)
   2e2a0:	10800403 	ldbu	r2,16(r2)
   2e2a4:	10803fcc 	andi	r2,r2,255
   2e2a8:	10000426 	beq	r2,zero,2e2bc <alt_tick+0x54>
   2e2ac:	d0a6df17 	ldw	r2,-25732(gp)
   2e2b0:	1000021e 	bne	r2,zero,2e2bc <alt_tick+0x54>
    {
      alarm->rollover = 0;
   2e2b4:	e0bffd17 	ldw	r2,-12(fp)
   2e2b8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   2e2bc:	e0bffd17 	ldw	r2,-12(fp)
   2e2c0:	10800217 	ldw	r2,8(r2)
   2e2c4:	d0e6df17 	ldw	r3,-25732(gp)
   2e2c8:	18801d36 	bltu	r3,r2,2e340 <alt_tick+0xd8>
   2e2cc:	e0bffd17 	ldw	r2,-12(fp)
   2e2d0:	10800403 	ldbu	r2,16(r2)
   2e2d4:	10803fcc 	andi	r2,r2,255
   2e2d8:	1000191e 	bne	r2,zero,2e340 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   2e2dc:	e0bffd17 	ldw	r2,-12(fp)
   2e2e0:	10c00317 	ldw	r3,12(r2)
   2e2e4:	e0bffd17 	ldw	r2,-12(fp)
   2e2e8:	10800517 	ldw	r2,20(r2)
   2e2ec:	1009883a 	mov	r4,r2
   2e2f0:	183ee83a 	callr	r3
   2e2f4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   2e2f8:	e0bfff17 	ldw	r2,-4(fp)
   2e2fc:	1000031e 	bne	r2,zero,2e30c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   2e300:	e13ffd17 	ldw	r4,-12(fp)
   2e304:	002e1d00 	call	2e1d0 <alt_alarm_stop>
   2e308:	00000d06 	br	2e340 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   2e30c:	e0bffd17 	ldw	r2,-12(fp)
   2e310:	10c00217 	ldw	r3,8(r2)
   2e314:	e0bfff17 	ldw	r2,-4(fp)
   2e318:	1887883a 	add	r3,r3,r2
   2e31c:	e0bffd17 	ldw	r2,-12(fp)
   2e320:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   2e324:	e0bffd17 	ldw	r2,-12(fp)
   2e328:	10c00217 	ldw	r3,8(r2)
   2e32c:	d0a6df17 	ldw	r2,-25732(gp)
   2e330:	1880032e 	bgeu	r3,r2,2e340 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   2e334:	e0bffd17 	ldw	r2,-12(fp)
   2e338:	00c00044 	movi	r3,1
   2e33c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   2e340:	e0bffe17 	ldw	r2,-8(fp)
   2e344:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   2e348:	e0fffd17 	ldw	r3,-12(fp)
   2e34c:	d0a01f04 	addi	r2,gp,-32644
   2e350:	18bfcf1e 	bne	r3,r2,2e290 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   2e354:	0001883a 	nop
}
   2e358:	e037883a 	mov	sp,fp
   2e35c:	dfc00117 	ldw	ra,4(sp)
   2e360:	df000017 	ldw	fp,0(sp)
   2e364:	dec00204 	addi	sp,sp,8
   2e368:	f800283a 	ret

0002e36c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   2e36c:	deffff04 	addi	sp,sp,-4
   2e370:	df000015 	stw	fp,0(sp)
   2e374:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   2e378:	000170fa 	wrctl	ienable,zero
}
   2e37c:	e037883a 	mov	sp,fp
   2e380:	df000017 	ldw	fp,0(sp)
   2e384:	dec00104 	addi	sp,sp,4
   2e388:	f800283a 	ret

0002e38c <atexit>:
   2e38c:	200b883a 	mov	r5,r4
   2e390:	000d883a 	mov	r6,zero
   2e394:	0009883a 	mov	r4,zero
   2e398:	000f883a 	mov	r7,zero
   2e39c:	002e4541 	jmpi	2e454 <__register_exitproc>

0002e3a0 <exit>:
   2e3a0:	defffe04 	addi	sp,sp,-8
   2e3a4:	000b883a 	mov	r5,zero
   2e3a8:	dc000015 	stw	r16,0(sp)
   2e3ac:	dfc00115 	stw	ra,4(sp)
   2e3b0:	2021883a 	mov	r16,r4
   2e3b4:	002e5840 	call	2e584 <__call_exitprocs>
   2e3b8:	008000f4 	movhi	r2,3
   2e3bc:	10815104 	addi	r2,r2,1348
   2e3c0:	11000017 	ldw	r4,0(r2)
   2e3c4:	20800f17 	ldw	r2,60(r4)
   2e3c8:	10000126 	beq	r2,zero,2e3d0 <exit+0x30>
   2e3cc:	103ee83a 	callr	r2
   2e3d0:	8009883a 	mov	r4,r16
   2e3d4:	002e7240 	call	2e724 <_exit>

0002e3d8 <memcmp>:
   2e3d8:	01c000c4 	movi	r7,3
   2e3dc:	3980192e 	bgeu	r7,r6,2e444 <memcmp+0x6c>
   2e3e0:	2904b03a 	or	r2,r5,r4
   2e3e4:	11c4703a 	and	r2,r2,r7
   2e3e8:	10000f26 	beq	r2,zero,2e428 <memcmp+0x50>
   2e3ec:	20c00003 	ldbu	r3,0(r4)
   2e3f0:	28800003 	ldbu	r2,0(r5)
   2e3f4:	1880151e 	bne	r3,r2,2e44c <memcmp+0x74>
   2e3f8:	31bfff84 	addi	r6,r6,-2
   2e3fc:	01ffffc4 	movi	r7,-1
   2e400:	00000406 	br	2e414 <memcmp+0x3c>
   2e404:	20c00003 	ldbu	r3,0(r4)
   2e408:	28800003 	ldbu	r2,0(r5)
   2e40c:	31bfffc4 	addi	r6,r6,-1
   2e410:	18800e1e 	bne	r3,r2,2e44c <memcmp+0x74>
   2e414:	21000044 	addi	r4,r4,1
   2e418:	29400044 	addi	r5,r5,1
   2e41c:	31fff91e 	bne	r6,r7,2e404 <memcmp+0x2c>
   2e420:	0005883a 	mov	r2,zero
   2e424:	f800283a 	ret
   2e428:	20c00017 	ldw	r3,0(r4)
   2e42c:	28800017 	ldw	r2,0(r5)
   2e430:	1880041e 	bne	r3,r2,2e444 <memcmp+0x6c>
   2e434:	31bfff04 	addi	r6,r6,-4
   2e438:	21000104 	addi	r4,r4,4
   2e43c:	29400104 	addi	r5,r5,4
   2e440:	39bff936 	bltu	r7,r6,2e428 <memcmp+0x50>
   2e444:	303fe91e 	bne	r6,zero,2e3ec <memcmp+0x14>
   2e448:	003ff506 	br	2e420 <memcmp+0x48>
   2e44c:	1885c83a 	sub	r2,r3,r2
   2e450:	f800283a 	ret

0002e454 <__register_exitproc>:
   2e454:	defffa04 	addi	sp,sp,-24
   2e458:	008000f4 	movhi	r2,3
   2e45c:	10815104 	addi	r2,r2,1348
   2e460:	dc000315 	stw	r16,12(sp)
   2e464:	14000017 	ldw	r16,0(r2)
   2e468:	dc400415 	stw	r17,16(sp)
   2e46c:	dfc00515 	stw	ra,20(sp)
   2e470:	80805217 	ldw	r2,328(r16)
   2e474:	2023883a 	mov	r17,r4
   2e478:	10003e26 	beq	r2,zero,2e574 <__register_exitproc+0x120>
   2e47c:	10c00117 	ldw	r3,4(r2)
   2e480:	020007c4 	movi	r8,31
   2e484:	40c0180e 	bge	r8,r3,2e4e8 <__register_exitproc+0x94>
   2e488:	008000b4 	movhi	r2,2
   2e48c:	1089ea04 	addi	r2,r2,10152
   2e490:	1000061e 	bne	r2,zero,2e4ac <__register_exitproc+0x58>
   2e494:	00bfffc4 	movi	r2,-1
   2e498:	dfc00517 	ldw	ra,20(sp)
   2e49c:	dc400417 	ldw	r17,16(sp)
   2e4a0:	dc000317 	ldw	r16,12(sp)
   2e4a4:	dec00604 	addi	sp,sp,24
   2e4a8:	f800283a 	ret
   2e4ac:	01006404 	movi	r4,400
   2e4b0:	d9400015 	stw	r5,0(sp)
   2e4b4:	d9800115 	stw	r6,4(sp)
   2e4b8:	d9c00215 	stw	r7,8(sp)
   2e4bc:	00227a80 	call	227a8 <malloc>
   2e4c0:	d9400017 	ldw	r5,0(sp)
   2e4c4:	d9800117 	ldw	r6,4(sp)
   2e4c8:	d9c00217 	ldw	r7,8(sp)
   2e4cc:	103ff126 	beq	r2,zero,2e494 <__register_exitproc+0x40>
   2e4d0:	80c05217 	ldw	r3,328(r16)
   2e4d4:	10000115 	stw	zero,4(r2)
   2e4d8:	10c00015 	stw	r3,0(r2)
   2e4dc:	80805215 	stw	r2,328(r16)
   2e4e0:	10006215 	stw	zero,392(r2)
   2e4e4:	10006315 	stw	zero,396(r2)
   2e4e8:	10c00117 	ldw	r3,4(r2)
   2e4ec:	88000d1e 	bne	r17,zero,2e524 <__register_exitproc+0xd0>
   2e4f0:	19000084 	addi	r4,r3,2
   2e4f4:	2109883a 	add	r4,r4,r4
   2e4f8:	18c00044 	addi	r3,r3,1
   2e4fc:	2109883a 	add	r4,r4,r4
   2e500:	1109883a 	add	r4,r2,r4
   2e504:	10c00115 	stw	r3,4(r2)
   2e508:	0005883a 	mov	r2,zero
   2e50c:	21400015 	stw	r5,0(r4)
   2e510:	dfc00517 	ldw	ra,20(sp)
   2e514:	dc400417 	ldw	r17,16(sp)
   2e518:	dc000317 	ldw	r16,12(sp)
   2e51c:	dec00604 	addi	sp,sp,24
   2e520:	f800283a 	ret
   2e524:	02400044 	movi	r9,1
   2e528:	12806217 	ldw	r10,392(r2)
   2e52c:	48d2983a 	sll	r9,r9,r3
   2e530:	19000804 	addi	r4,r3,32
   2e534:	18d1883a 	add	r8,r3,r3
   2e538:	2109883a 	add	r4,r4,r4
   2e53c:	4211883a 	add	r8,r8,r8
   2e540:	2109883a 	add	r4,r4,r4
   2e544:	1109883a 	add	r4,r2,r4
   2e548:	1211883a 	add	r8,r2,r8
   2e54c:	5254b03a 	or	r10,r10,r9
   2e550:	21c02215 	stw	r7,136(r4)
   2e554:	41802215 	stw	r6,136(r8)
   2e558:	12806215 	stw	r10,392(r2)
   2e55c:	01000084 	movi	r4,2
   2e560:	893fe31e 	bne	r17,r4,2e4f0 <__register_exitproc+0x9c>
   2e564:	11006317 	ldw	r4,396(r2)
   2e568:	2252b03a 	or	r9,r4,r9
   2e56c:	12406315 	stw	r9,396(r2)
   2e570:	003fdf06 	br	2e4f0 <__register_exitproc+0x9c>
   2e574:	008000f4 	movhi	r2,3
   2e578:	10887b04 	addi	r2,r2,8684
   2e57c:	80805215 	stw	r2,328(r16)
   2e580:	003fbe06 	br	2e47c <__register_exitproc+0x28>

0002e584 <__call_exitprocs>:
   2e584:	008000f4 	movhi	r2,3
   2e588:	10815104 	addi	r2,r2,1348
   2e58c:	10800017 	ldw	r2,0(r2)
   2e590:	defff304 	addi	sp,sp,-52
   2e594:	df000b15 	stw	fp,44(sp)
   2e598:	d8800015 	stw	r2,0(sp)
   2e59c:	10805204 	addi	r2,r2,328
   2e5a0:	dd400815 	stw	r21,32(sp)
   2e5a4:	dfc00c15 	stw	ra,48(sp)
   2e5a8:	ddc00a15 	stw	r23,40(sp)
   2e5ac:	dd800915 	stw	r22,36(sp)
   2e5b0:	dd000715 	stw	r20,28(sp)
   2e5b4:	dcc00615 	stw	r19,24(sp)
   2e5b8:	dc800515 	stw	r18,20(sp)
   2e5bc:	dc400415 	stw	r17,16(sp)
   2e5c0:	dc000315 	stw	r16,12(sp)
   2e5c4:	d9000115 	stw	r4,4(sp)
   2e5c8:	2839883a 	mov	fp,r5
   2e5cc:	d8800215 	stw	r2,8(sp)
   2e5d0:	057fffc4 	movi	r21,-1
   2e5d4:	d8800017 	ldw	r2,0(sp)
   2e5d8:	ddc00217 	ldw	r23,8(sp)
   2e5dc:	14805217 	ldw	r18,328(r2)
   2e5e0:	90001726 	beq	r18,zero,2e640 <__call_exitprocs+0xbc>
   2e5e4:	94400117 	ldw	r17,4(r18)
   2e5e8:	8c3fffc4 	addi	r16,r17,-1
   2e5ec:	80001116 	blt	r16,zero,2e634 <__call_exitprocs+0xb0>
   2e5f0:	8c400044 	addi	r17,r17,1
   2e5f4:	8427883a 	add	r19,r16,r16
   2e5f8:	8c63883a 	add	r17,r17,r17
   2e5fc:	95802204 	addi	r22,r18,136
   2e600:	9ce7883a 	add	r19,r19,r19
   2e604:	8c63883a 	add	r17,r17,r17
   2e608:	b4e7883a 	add	r19,r22,r19
   2e60c:	9463883a 	add	r17,r18,r17
   2e610:	e0001726 	beq	fp,zero,2e670 <__call_exitprocs+0xec>
   2e614:	8c87c83a 	sub	r3,r17,r18
   2e618:	b0c7883a 	add	r3,r22,r3
   2e61c:	18c01e17 	ldw	r3,120(r3)
   2e620:	1f001326 	beq	r3,fp,2e670 <__call_exitprocs+0xec>
   2e624:	843fffc4 	addi	r16,r16,-1
   2e628:	9cffff04 	addi	r19,r19,-4
   2e62c:	8c7fff04 	addi	r17,r17,-4
   2e630:	857ff71e 	bne	r16,r21,2e610 <__call_exitprocs+0x8c>
   2e634:	008000b4 	movhi	r2,2
   2e638:	1089ef04 	addi	r2,r2,10172
   2e63c:	10002a1e 	bne	r2,zero,2e6e8 <__call_exitprocs+0x164>
   2e640:	dfc00c17 	ldw	ra,48(sp)
   2e644:	df000b17 	ldw	fp,44(sp)
   2e648:	ddc00a17 	ldw	r23,40(sp)
   2e64c:	dd800917 	ldw	r22,36(sp)
   2e650:	dd400817 	ldw	r21,32(sp)
   2e654:	dd000717 	ldw	r20,28(sp)
   2e658:	dcc00617 	ldw	r19,24(sp)
   2e65c:	dc800517 	ldw	r18,20(sp)
   2e660:	dc400417 	ldw	r17,16(sp)
   2e664:	dc000317 	ldw	r16,12(sp)
   2e668:	dec00d04 	addi	sp,sp,52
   2e66c:	f800283a 	ret
   2e670:	91000117 	ldw	r4,4(r18)
   2e674:	88c00017 	ldw	r3,0(r17)
   2e678:	213fffc4 	addi	r4,r4,-1
   2e67c:	24001526 	beq	r4,r16,2e6d4 <__call_exitprocs+0x150>
   2e680:	88000015 	stw	zero,0(r17)
   2e684:	183fe726 	beq	r3,zero,2e624 <__call_exitprocs+0xa0>
   2e688:	00800044 	movi	r2,1
   2e68c:	1408983a 	sll	r4,r2,r16
   2e690:	91406217 	ldw	r5,392(r18)
   2e694:	95000117 	ldw	r20,4(r18)
   2e698:	214a703a 	and	r5,r4,r5
   2e69c:	28000b26 	beq	r5,zero,2e6cc <__call_exitprocs+0x148>
   2e6a0:	91406317 	ldw	r5,396(r18)
   2e6a4:	2148703a 	and	r4,r4,r5
   2e6a8:	20000c1e 	bne	r4,zero,2e6dc <__call_exitprocs+0x158>
   2e6ac:	99400017 	ldw	r5,0(r19)
   2e6b0:	d9000117 	ldw	r4,4(sp)
   2e6b4:	183ee83a 	callr	r3
   2e6b8:	90c00117 	ldw	r3,4(r18)
   2e6bc:	1d3fc51e 	bne	r3,r20,2e5d4 <__call_exitprocs+0x50>
   2e6c0:	b8c00017 	ldw	r3,0(r23)
   2e6c4:	1cbfd726 	beq	r3,r18,2e624 <__call_exitprocs+0xa0>
   2e6c8:	003fc206 	br	2e5d4 <__call_exitprocs+0x50>
   2e6cc:	183ee83a 	callr	r3
   2e6d0:	003ff906 	br	2e6b8 <__call_exitprocs+0x134>
   2e6d4:	94000115 	stw	r16,4(r18)
   2e6d8:	003fea06 	br	2e684 <__call_exitprocs+0x100>
   2e6dc:	99000017 	ldw	r4,0(r19)
   2e6e0:	183ee83a 	callr	r3
   2e6e4:	003ff406 	br	2e6b8 <__call_exitprocs+0x134>
   2e6e8:	90c00117 	ldw	r3,4(r18)
   2e6ec:	1800071e 	bne	r3,zero,2e70c <__call_exitprocs+0x188>
   2e6f0:	90c00017 	ldw	r3,0(r18)
   2e6f4:	18000926 	beq	r3,zero,2e71c <__call_exitprocs+0x198>
   2e6f8:	9009883a 	mov	r4,r18
   2e6fc:	b8c00015 	stw	r3,0(r23)
   2e700:	00227bc0 	call	227bc <free>
   2e704:	bc800017 	ldw	r18,0(r23)
   2e708:	003fb506 	br	2e5e0 <__call_exitprocs+0x5c>
   2e70c:	90c00017 	ldw	r3,0(r18)
   2e710:	902f883a 	mov	r23,r18
   2e714:	1825883a 	mov	r18,r3
   2e718:	003fb106 	br	2e5e0 <__call_exitprocs+0x5c>
   2e71c:	0007883a 	mov	r3,zero
   2e720:	003ffb06 	br	2e710 <__call_exitprocs+0x18c>

0002e724 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   2e724:	defffc04 	addi	sp,sp,-16
   2e728:	df000315 	stw	fp,12(sp)
   2e72c:	df000304 	addi	fp,sp,12
   2e730:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   2e734:	0001883a 	nop
   2e738:	e0bfff17 	ldw	r2,-4(fp)
   2e73c:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
   2e740:	e0bffd17 	ldw	r2,-12(fp)
   2e744:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   2e748:	e0bffe17 	ldw	r2,-8(fp)
   2e74c:	10000226 	beq	r2,zero,2e758 <_exit+0x34>
    ALT_SIM_FAIL();
   2e750:	002af070 	cmpltui	zero,zero,43969
   2e754:	00000106 	br	2e75c <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   2e758:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   2e75c:	003fff06 	br	2e75c <_exit+0x38>

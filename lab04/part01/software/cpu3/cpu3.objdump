
cpu3.elf:     file format elf32-littlenios2
cpu3.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000401b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x00006d7c memsz 0x00006d7c flags r-x
    LOAD off    0x00007d9c vaddr 0x00046d9c paddr 0x00048868 align 2**12
         filesz 0x00001acc memsz 0x00001acc flags rw-
    LOAD off    0x0000a334 vaddr 0x0004a334 paddr 0x0004a334 align 2**12
         filesz 0x00000000 memsz 0x000002e4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00006b7c  000401b8  000401b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000068  00046d34  00046d34  00007d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001acc  00046d9c  00048868  00007d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e4  0004a334  0004a334  0000a334  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00009868  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000009f0  00000000  00000000  00009890  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0001973d  00000000  00000000  0000a280  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00006127  00000000  00000000  000239bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00007482  00000000  00000000  00029ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001394  00000000  00000000  00030f68  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00002604  00000000  00000000  000322fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00005b85  00000000  00000000  00034900  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  0003a488  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000398  00000000  00000000  0003a498  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0003d358  2**0
                  CONTENTS, READONLY
 17 .cpu          00000004  00000000  00000000  0003d35b  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0003d35f  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0003d360  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0003d361  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0003d365  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0003d369  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000a  00000000  00000000  0003d36d  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000a  00000000  00000000  0003d377  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000a  00000000  00000000  0003d381  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000004  00000000  00000000  0003d38b  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000052  00000000  00000000  0003d38f  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00190008  00000000  00000000  0003d3e1  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
000401b8 l    d  .text	00000000 .text
00046d34 l    d  .rodata	00000000 .rodata
00046d9c l    d  .rwdata	00000000 .rwdata
0004a334 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../cpu3_bsp//obj/HAL/src/crt0.o
000401f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00040094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 FIFO.c
00000000 l    df *ABS*	00000000 dct.c
000487d4 l     O .rwdata	00000002 c2.2797
000487d6 l     O .rwdata	00000002 c6.2800
000487d8 l     O .rwdata	00000002 s2.2803
000487da l     O .rwdata	00000002 c7.2801
000487dc l     O .rwdata	00000002 c5.2799
000487de l     O .rwdata	00000002 c3.2798
000487e0 l     O .rwdata	00000002 c1.2796
000487e2 l     O .rwdata	00000002 s1.2802
000487e4 l     O .rwdata	00000002 s3.2804
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
000471a4 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00042dec l     F .text	00000008 __fp_lock
00042df4 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_close.c
000439c0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00043adc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00043b08 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00043c08 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00043cfc l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00043de8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00043fc4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00048810 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00044238 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00044378 l     F .text	00000038 alt_dev_reg
0004774c l     O .rwdata	00001060 jtag_uart3
000487ac l     O .rwdata	00000028 altera_hostfs
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00044b6c l     F .text	00000204 altera_avalon_jtag_uart_irq
00044d70 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000453ac l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_hostfs.c
00048850 l     O .rwdata	00000004 hcinfo.2311
00048844 l     O .rwdata	00000004 hcinfo.2324
00048838 l     O .rwdata	00000004 hcinfo.2333
0004882c l     O .rwdata	00000004 hcinfo.2346
00048820 l     O .rwdata	00000004 hcinfo.2359
00048814 l     O .rwdata	00000004 hcinfo.2385
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00045c2c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0004613c l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00046294 l     F .text	00000050 alt_get_errno
000462e4 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00043884 g     F .text	00000064 _isatty_r
00043f0c g     F .text	00000078 alt_main
00041628 g     F .text	00000084 _puts_r
0004a388 g     O .bss	00000100 alt_irq
000438e8 g     F .text	0000006c _lseek_r
000446d8 g     F .text	00000058 altera_avalon_fifo_write_almostfull
00048868 g       *ABS*	00000000 __flash_rwdata_start
0004a618 g       *ABS*	00000000 __alt_heap_start
00043598 g     F .text	0000005c __sseek
00042e90 g     F .text	0000010c __sinit
00042e08 g     F .text	00000078 __sfmoreglue
00043fa4 g     F .text	00000020 __malloc_unlock
000454a8 g     F .text	0000016c alt_hostfs_open
000422d8 g     F .text	0000018c memmove
00044458 g     F .text	00000098 altera_avalon_fifo_init
00042e80 g     F .text	00000010 _cleanup
00044788 g     F .text	00000058 altera_avalon_fifo_write_fifo
00000000  w      *UND*	00000000 __errno
00040000 g     F .entry	0000000c __reset
00044920 g     F .text	00000028 altera_avalon_fifo_read_backpressure
00040020 g       *ABS*	00000000 __flash_exceptions_start
0004381c g     F .text	00000068 _fstat_r
0004a344 g     O .bss	00000004 errno
0004a34c g     O .bss	00000004 alt_argv
000507d4 g       *ABS*	00000000 _gp
00044624 g     F .text	0000005c altera_avalon_fifo_clear_event
000475cc g     O .rwdata	00000180 alt_fd_list
000457f0 g     F .text	000000b8 alt_hostfs_seek
000466e8 g     F .text	00000090 alt_find_dev
00042198 g     F .text	00000140 memcpy
00042dfc g     F .text	0000000c _cleanup_r
00045dd4 g     F .text	00000084 alt_fs_reg
0004621c g     F .text	00000078 alt_io_redirect
00046d34 g       *ABS*	00000000 __DTOR_END__
000416ac g     F .text	00000014 puts
00044f70 g     F .text	00000218 altera_avalon_jtag_uart_read
00040e7c g     F .text	00000014 malloc
00043c58 g     F .text	000000a4 isatty
0004a340 g     O .bss	00000004 __malloc_top_pad
00041bbc g     F .text	000004e4 __sfvwrite_r
000416c0 g     F .text	00000064 _sbrk_r
00045680 g     F .text	000000b8 alt_hostfs_read
00043954 g     F .text	0000006c _read_r
00048808 g     O .rwdata	00000004 alt_max_fd
000436cc g     F .text	0000013c _fclose_r
00042dbc g     F .text	00000030 fflush
0004a33c g     O .bss	00000004 __malloc_max_sbrked_mem
00043e38 g     F .text	000000d4 lseek
000487f0 g     O .rwdata	00000004 _global_impure_ptr
00042464 g     F .text	000005fc _realloc_r
0004a618 g       *ABS*	00000000 __bss_end
0004604c g     F .text	000000f0 alt_iic_isr_register
000465c4 g     F .text	00000104 alt_tick
000430a8 g     F .text	00000018 __fp_lock_all
00046000 g     F .text	0000004c alt_ic_irq_enabled
000402c0 g     F .text	00000040 FIFO_INIT
0004652c g     F .text	00000098 alt_alarm_stop
0004a354 g     O .bss	00000004 alt_irq_active
00045614 g     F .text	0000006c alt_hostfs_close
000400ec g     F .exceptions	000000cc alt_irq_handler
000475a4 g     O .rwdata	00000028 alt_dev_null
00045c10 g     F .text	0000001c alt_dcache_flush_all
00044680 g     F .text	00000058 altera_avalon_fifo_write_ienable
00048868 g       *ABS*	00000000 __ram_rwdata_end
00044594 g     F .text	0000002c altera_avalon_fifo_read_almostempty
00048800 g     O .rwdata	00000008 alt_dev_list
00044288 g     F .text	000000f0 write
00046d9c g       *ABS*	00000000 __ram_rodata_end
00043b58 g     F .text	000000b0 fstat
0004a618 g       *ABS*	00000000 end
00044aac g     F .text	000000c0 altera_avalon_jtag_uart_init
000445c0 g     F .text	0000003c altera_avalon_fifo_read_event
00046d34 g       *ABS*	00000000 __CTOR_LIST__
00057000 g       *ABS*	00000000 __alt_stack_pointer
00045420 g     F .text	00000088 alt_avalon_timer_sc_init
00045188 g     F .text	00000224 altera_avalon_jtag_uart_write
00043098 g     F .text	00000004 __sfp_lock_acquire
0004484c g     F .text	0000004c altera_avalon_fifo_read_fifo
000420a0 g     F .text	000000f8 memchr
000418ec g     F .text	000002d0 _free_r
00046b58 g     F .text	000001a0 __call_exitprocs
000487e8 g     O .rwdata	00000004 __malloc_sbrk_base
000401b8 g     F .text	0000003c _start
0004a358 g     O .bss	00000004 _alt_tick_rate
0004a35c g     O .bss	00000004 _alt_nticks
00044014 g     F .text	000000f4 read
000443e4 g     F .text	00000074 alt_sys_init
00046a28 g     F .text	00000130 __register_exitproc
00044e14 g     F .text	00000068 altera_avalon_jtag_uart_close
00040e54 g     F .text	00000028 __mulsi3
00046d9c g       *ABS*	00000000 __ram_rwdata_start
00046d34 g       *ABS*	00000000 __ram_rodata_start
0004a360 g     O .bss	00000028 __malloc_current_mallinfo
00044948 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0004688c g     F .text	000000d4 alt_get_fd
00043668 g     F .text	00000064 _close_r
000469ac g     F .text	0000007c memcmp
00044a08 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0004a618 g       *ABS*	00000000 __alt_stack_base
00044a58 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00042a60 g     F .text	00000174 __swsetup_r
000444f0 g     F .text	0000003c altera_avalon_fifo_read_status
00042f9c g     F .text	000000fc __sfp
00046d9c g     O .rwdata	00000408 __malloc_av_
000430a4 g     F .text	00000004 __sinit_lock_release
000434bc g     F .text	00000054 __sread
000448f4 g     F .text	0000002c altera_avalon_fifo_read_other_info
00046778 g     F .text	00000114 alt_find_file
00045c7c g     F .text	000000a0 alt_dev_llist_insert
00043f84 g     F .text	00000020 __malloc_lock
00044188 g     F .text	000000b0 sbrk
00042bd4 g     F .text	000001e8 _fflush_r
0004a334 g       *ABS*	00000000 __bss_start
0004a334 g     O .bss	00000004 data
000433e0 g     F .text	000000dc memset
00040de0 g     F .text	00000074 main
0004a350 g     O .bss	00000004 alt_envp
0004a338 g     O .bss	00000004 __malloc_max_total_mem
000449a8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000445fc g     F .text	00000028 altera_avalon_fifo_read_level
000435f4 g     F .text	00000008 __sclose
00057000 g       *ABS*	00000000 __alt_heap_limit
00043808 g     F .text	00000014 fclose
0004a488 g     O .bss	00000190 _atexit0
00040ea4 g     F .text	00000784 _malloc_r
0004880c g     O .rwdata	00000004 alt_errno
000430d8 g     F .text	000000a8 _fwalk
000417b0 g     F .text	0000013c _malloc_trim_r
00046d34 g       *ABS*	00000000 __CTOR_END__
00046d34 g       *ABS*	00000000 __flash_rodata_start
00046d34 g       *ABS*	00000000 __DTOR_LIST__
00040300 g     F .text	00000040 delay
00040340 g     F .text	00000aa0 DCT
000443b0 g     F .text	00000034 alt_irq_init
00044108 g     F .text	00000080 alt_release_fd
00046960 g     F .text	00000014 atexit
000435fc g     F .text	0000006c _write_r
000487f4 g     O .rwdata	00000004 _impure_ptr
0004a348 g     O .bss	00000004 alt_argc
00045d78 g     F .text	0000005c _do_dtors
00040258 g     F .text	00000068 READ_FIFO
00040020 g       .exceptions	00000000 alt_irq_entry
000430c0 g     F .text	00000018 __fp_unlock_all
000487f8 g     O .rwdata	00000008 alt_fs_list
00040000 g       *ABS*	00000000 __alt_mem_mem3
00045738 g     F .text	000000b8 alt_hostfs_write
00040020 g       *ABS*	00000000 __ram_exceptions_start
00044898 g     F .text	0000005c altera_avalon_fifo_write_other_info
00045e74 g     F .text	00000050 alt_ic_isr_register
00048868 g       *ABS*	00000000 _edata
0004a618 g       *ABS*	00000000 _end
000401b8 g       *ABS*	00000000 __ram_exceptions_end
00044e7c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00045f60 g     F .text	000000a0 alt_ic_irq_disable
00043510 g     F .text	00000088 __swrite
000487ec g     O .rwdata	00000004 __malloc_trim_threshold
000466c8 g     F .text	00000020 altera_nios2_qsys_irq_init
00046974 g     F .text	00000038 exit
00043180 g     F .text	000000b8 _fwalk_reent
0004452c g     F .text	0000003c altera_avalon_fifo_read_ienable
00057000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
0004309c g     F .text	00000004 __sfp_lock_release
00046cf8 g     F .text	0000003c _exit
00045ad0 g     F .text	00000140 alt_alarm_start
00044568 g     F .text	0000002c altera_avalon_fifo_read_almostfull
00043238 g     F .text	000001a8 __smakebuf_r
00041724 g     F .text	0000008c strlen
000463d4 g     F .text	00000158 open
000447e0 g     F .text	0000006c altera_avalon_read_fifo
00045e58 g     F .text	0000001c alt_icache_flush_all
000401f4 g     F .text	00000064 WRITE_FIFO
0004885c g     O .rwdata	00000004 alt_priority_mask
00045ec4 g     F .text	0000009c alt_ic_irq_enable
00044730 g     F .text	00000058 altera_avalon_fifo_write_almostempty
00048860 g     O .rwdata	00000008 alt_alarm_list
00045d1c g     F .text	0000005c _do_ctors
00043a10 g     F .text	000000cc close
00043d68 g     F .text	00000080 alt_load
00040e90 g     F .text	00000014 free
000430a0 g     F .text	00000004 __sinit_lock_acquire
000458a8 g     F .text	00000228 alt_hostfs_fstat



Disassembly of section .entry:

00040000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40000:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40004:	08406e14 	ori	at,at,440
    jmp r1
   40008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400ec0 	call	400ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000306 	br	40098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   4008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)

00040094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   40094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   40098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   4009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400e8:	ef80083a 	eret

000400ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400ec:	defff904 	addi	sp,sp,-28
   400f0:	dfc00615 	stw	ra,24(sp)
   400f4:	df000515 	stw	fp,20(sp)
   400f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   400fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40100:	0005313a 	rdctl	r2,ipending
   40104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40114:	00800044 	movi	r2,1
   40118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4011c:	e0fffb17 	ldw	r3,-20(fp)
   40120:	e0bffc17 	ldw	r2,-16(fp)
   40124:	1884703a 	and	r2,r3,r2
   40128:	10001726 	beq	r2,zero,40188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4012c:	00c00174 	movhi	r3,5
   40130:	18e8e204 	addi	r3,r3,-23672
   40134:	e0bffd17 	ldw	r2,-12(fp)
   40138:	100490fa 	slli	r2,r2,3
   4013c:	1885883a 	add	r2,r3,r2
   40140:	10c00017 	ldw	r3,0(r2)
   40144:	01000174 	movhi	r4,5
   40148:	2128e204 	addi	r4,r4,-23672
   4014c:	e0bffd17 	ldw	r2,-12(fp)
   40150:	100490fa 	slli	r2,r2,3
   40154:	2085883a 	add	r2,r4,r2
   40158:	10800104 	addi	r2,r2,4
   4015c:	10800017 	ldw	r2,0(r2)
   40160:	1009883a 	mov	r4,r2
   40164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4016c:	0005313a 	rdctl	r2,ipending
   40170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   40178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   4017c:	e0bffb17 	ldw	r2,-20(fp)
   40180:	103fe31e 	bne	r2,zero,40110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   40184:	00000706 	br	401a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   40188:	e0bffc17 	ldw	r2,-16(fp)
   4018c:	1085883a 	add	r2,r2,r2
   40190:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40194:	e0bffd17 	ldw	r2,-12(fp)
   40198:	10800044 	addi	r2,r2,1
   4019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a0:	003fde06 	br	4011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   401a4:	e037883a 	mov	sp,fp
   401a8:	dfc00117 	ldw	ra,4(sp)
   401ac:	df000017 	ldw	fp,0(sp)
   401b0:	dec00204 	addi	sp,sp,8
   401b4:	f800283a 	ret

Disassembly of section .text:

000401b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   401b8:	06c00174 	movhi	sp,5
    ori sp, sp, %lo(__alt_stack_pointer)
   401bc:	dedc0014 	ori	sp,sp,28672
    movhi gp, %hi(_gp)
   401c0:	06800174 	movhi	gp,5
    ori gp, gp, %lo(_gp)
   401c4:	d681f514 	ori	gp,gp,2004
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   401c8:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   401cc:	10a8cd14 	ori	r2,r2,41780

    movhi r3, %hi(__bss_end)
   401d0:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
   401d4:	18e98614 	ori	r3,r3,42520

    beq r2, r3, 1f
   401d8:	10c00326 	beq	r2,r3,401e8 <_start+0x30>

0:
    stw zero, (r2)
   401dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   401e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   401e4:	10fffd36 	bltu	r2,r3,401dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   401e8:	0043d680 	call	43d68 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   401ec:	0043f0c0 	call	43f0c <alt_main>

000401f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   401f0:	003fff06 	br	401f0 <alt_after_alt_main>

000401f4 <WRITE_FIFO>:
 */

#include "FIFO.h"

void WRITE_FIFO(int *buffer, int inBase, int controllBase)
{
   401f4:	defffb04 	addi	sp,sp,-20
   401f8:	dfc00415 	stw	ra,16(sp)
   401fc:	df000315 	stw	fp,12(sp)
   40200:	df000304 	addi	fp,sp,12
   40204:	e13ffd15 	stw	r4,-12(fp)
   40208:	e17ffe15 	stw	r5,-8(fp)
   4020c:	e1bfff15 	stw	r6,-4(fp)
	// printf("Writing to FIFO : %d\n", altera_avalon_fifo_read_level(controllBase));

	// Check if FIFO is full before writing
	while (altera_avalon_fifo_read_level(controllBase) == ALMOST_FULL)
   40210:	0001883a 	nop
   40214:	e0bfff17 	ldw	r2,-4(fp)
   40218:	1009883a 	mov	r4,r2
   4021c:	00445fc0 	call	445fc <altera_avalon_fifo_read_level>
   40220:	10800220 	cmpeqi	r2,r2,8
   40224:	103ffb1e 	bne	r2,zero,40214 <WRITE_FIFO+0x20>
	{
	}

	// Write data to FIFO
	altera_avalon_fifo_write_fifo(inBase, controllBase, *buffer);
   40228:	e13ffe17 	ldw	r4,-8(fp)
   4022c:	e0ffff17 	ldw	r3,-4(fp)
   40230:	e0bffd17 	ldw	r2,-12(fp)
   40234:	10800017 	ldw	r2,0(r2)
   40238:	180b883a 	mov	r5,r3
   4023c:	100d883a 	mov	r6,r2
   40240:	00447880 	call	44788 <altera_avalon_fifo_write_fifo>
}
   40244:	e037883a 	mov	sp,fp
   40248:	dfc00117 	ldw	ra,4(sp)
   4024c:	df000017 	ldw	fp,0(sp)
   40250:	dec00204 	addi	sp,sp,8
   40254:	f800283a 	ret

00040258 <READ_FIFO>:

int READ_FIFO(int *buffer, int outBase, int controllBase)
{
   40258:	defffb04 	addi	sp,sp,-20
   4025c:	dfc00415 	stw	ra,16(sp)
   40260:	df000315 	stw	fp,12(sp)
   40264:	df000304 	addi	fp,sp,12
   40268:	e13ffd15 	stw	r4,-12(fp)
   4026c:	e17ffe15 	stw	r5,-8(fp)
   40270:	e1bfff15 	stw	r6,-4(fp)
	// Wait if the FIFO is empty
	// while (altera_avalon_fifo_read_status(FIFO_MEM_IN_CSR_BASE, ALTERA_AVALON_FIFO_STATUS_EMPTY))
	// 	;

	while (altera_avalon_fifo_read_level(controllBase) == ALMOST_EMTY)
   40274:	0001883a 	nop
   40278:	e0bfff17 	ldw	r2,-4(fp)
   4027c:	1009883a 	mov	r4,r2
   40280:	00445fc0 	call	445fc <altera_avalon_fifo_read_level>
   40284:	103ffc26 	beq	r2,zero,40278 <READ_FIFO+0x20>
	{
	}

	// Read the data
	*buffer = altera_avalon_fifo_read_fifo(outBase, controllBase);
   40288:	e0fffe17 	ldw	r3,-8(fp)
   4028c:	e0bfff17 	ldw	r2,-4(fp)
   40290:	1809883a 	mov	r4,r3
   40294:	100b883a 	mov	r5,r2
   40298:	004484c0 	call	4484c <altera_avalon_fifo_read_fifo>
   4029c:	e0fffd17 	ldw	r3,-12(fp)
   402a0:	18800015 	stw	r2,0(r3)

	return *buffer;
   402a4:	e0bffd17 	ldw	r2,-12(fp)
   402a8:	10800017 	ldw	r2,0(r2)
}
   402ac:	e037883a 	mov	sp,fp
   402b0:	dfc00117 	ldw	ra,4(sp)
   402b4:	df000017 	ldw	fp,0(sp)
   402b8:	dec00204 	addi	sp,sp,8
   402bc:	f800283a 	ret

000402c0 <FIFO_INIT>:

// Initialization
void FIFO_INIT(int controllBase)
{
   402c0:	defffd04 	addi	sp,sp,-12
   402c4:	dfc00215 	stw	ra,8(sp)
   402c8:	df000115 	stw	fp,4(sp)
   402cc:	df000104 	addi	fp,sp,4
   402d0:	e13fff15 	stw	r4,-4(fp)
	altera_avalon_fifo_init(controllBase,
   402d4:	e0bfff17 	ldw	r2,-4(fp)
   402d8:	1009883a 	mov	r4,r2
   402dc:	000b883a 	mov	r5,zero
   402e0:	000d883a 	mov	r6,zero
   402e4:	01c00204 	movi	r7,8
   402e8:	00444580 	call	44458 <altera_avalon_fifo_init>
							0,
							ALMOST_EMTY,  // Almost empty threshold
							ALMOST_FULL); // Almost full threshold
   402ec:	e037883a 	mov	sp,fp
   402f0:	dfc00117 	ldw	ra,4(sp)
   402f4:	df000017 	ldw	fp,0(sp)
   402f8:	dec00204 	addi	sp,sp,8
   402fc:	f800283a 	ret

00040300 <delay>:
#include <time.h>

// FILE *log_file;

void delay(int n)
{
   40300:	defffd04 	addi	sp,sp,-12
   40304:	df000215 	stw	fp,8(sp)
   40308:	df000204 	addi	fp,sp,8
   4030c:	e13fff15 	stw	r4,-4(fp)
	int i;
	for (i = n; i > 0; i--)
   40310:	e0bfff17 	ldw	r2,-4(fp)
   40314:	e0bffe15 	stw	r2,-8(fp)
   40318:	00000306 	br	40328 <delay+0x28>
   4031c:	e0bffe17 	ldw	r2,-8(fp)
   40320:	10bfffc4 	addi	r2,r2,-1
   40324:	e0bffe15 	stw	r2,-8(fp)
   40328:	e0bffe17 	ldw	r2,-8(fp)
   4032c:	00bffb16 	blt	zero,r2,4031c <delay+0x1c>
	{
		continue;
	}
}
   40330:	e037883a 	mov	sp,fp
   40334:	df000017 	ldw	fp,0(sp)
   40338:	dec00104 	addi	sp,sp,4
   4033c:	f800283a 	ret

00040340 <DCT>:

INT16 *data;

/* DCT for One block(8x8) */
void DCT(void)
{
   40340:	defff104 	addi	sp,sp,-60
   40344:	dfc00e15 	stw	ra,56(sp)
   40348:	df000d15 	stw	fp,52(sp)
   4034c:	dc400c15 	stw	r17,48(sp)
   40350:	dc000b15 	stw	r16,44(sp)
   40354:	df000b04 	addi	fp,sp,44
	static const UINT16 s1 = 3;
	static const UINT16 s2 = 10;
	static const UINT16 s3 = 13;

	/* read back from queue */
	for (i = 0; i < 64; i++)
   40358:	e03ff50d 	sth	zero,-44(fp)
   4035c:	00001006 	br	403a0 <DCT+0x60>
	{
		READ_FIFO(&temp, OUT_BASE_2to3, CONTROL_BASE_2to3);
   40360:	e0bfff04 	addi	r2,fp,-4
   40364:	1009883a 	mov	r4,r2
   40368:	014000b4 	movhi	r5,2
   4036c:	29441b04 	addi	r5,r5,4204
   40370:	018000b4 	movhi	r6,2
   40374:	31840004 	addi	r6,r6,4096
   40378:	00402580 	call	40258 <READ_FIFO>
		data[i] = temp; // Casting data
   4037c:	d0e6d817 	ldw	r3,-25760(gp)
   40380:	e0bff50b 	ldhu	r2,-44(fp)
   40384:	1085883a 	add	r2,r2,r2
   40388:	1885883a 	add	r2,r3,r2
   4038c:	e0ffff17 	ldw	r3,-4(fp)
   40390:	10c0000d 	sth	r3,0(r2)
	static const UINT16 s1 = 3;
	static const UINT16 s2 = 10;
	static const UINT16 s3 = 13;

	/* read back from queue */
	for (i = 0; i < 64; i++)
   40394:	e0bff50b 	ldhu	r2,-44(fp)
   40398:	10800044 	addi	r2,r2,1
   4039c:	e0bff50d 	sth	r2,-44(fp)
   403a0:	e0bff50b 	ldhu	r2,-44(fp)
   403a4:	10801030 	cmpltui	r2,r2,64
   403a8:	103fed1e 	bne	r2,zero,40360 <DCT+0x20>
	// 		printf("\n");
	// }

	// start_time = clock();

	for (i = 8; i > 0; i--)
   403ac:	00800204 	movi	r2,8
   403b0:	e0bff50d 	sth	r2,-44(fp)
   403b4:	00012d06 	br	4086c <DCT+0x52c>
	{
		x8 = data[0] + data[7];
   403b8:	d0a6d817 	ldw	r2,-25760(gp)
   403bc:	1080000b 	ldhu	r2,0(r2)
   403c0:	10ffffcc 	andi	r3,r2,65535
   403c4:	18e0001c 	xori	r3,r3,32768
   403c8:	18e00004 	addi	r3,r3,-32768
   403cc:	d0a6d817 	ldw	r2,-25760(gp)
   403d0:	10800384 	addi	r2,r2,14
   403d4:	1080000b 	ldhu	r2,0(r2)
   403d8:	10bfffcc 	andi	r2,r2,65535
   403dc:	10a0001c 	xori	r2,r2,32768
   403e0:	10a00004 	addi	r2,r2,-32768
   403e4:	1885883a 	add	r2,r3,r2
   403e8:	e0bff615 	stw	r2,-40(fp)
		x0 = data[0] - data[7];
   403ec:	d0a6d817 	ldw	r2,-25760(gp)
   403f0:	1080000b 	ldhu	r2,0(r2)
   403f4:	10ffffcc 	andi	r3,r2,65535
   403f8:	18e0001c 	xori	r3,r3,32768
   403fc:	18e00004 	addi	r3,r3,-32768
   40400:	d0a6d817 	ldw	r2,-25760(gp)
   40404:	10800384 	addi	r2,r2,14
   40408:	1080000b 	ldhu	r2,0(r2)
   4040c:	10bfffcc 	andi	r2,r2,65535
   40410:	10a0001c 	xori	r2,r2,32768
   40414:	10a00004 	addi	r2,r2,-32768
   40418:	1885c83a 	sub	r2,r3,r2
   4041c:	e0bff715 	stw	r2,-36(fp)

		x7 = data[1] + data[6];
   40420:	d0a6d817 	ldw	r2,-25760(gp)
   40424:	10800084 	addi	r2,r2,2
   40428:	1080000b 	ldhu	r2,0(r2)
   4042c:	10ffffcc 	andi	r3,r2,65535
   40430:	18e0001c 	xori	r3,r3,32768
   40434:	18e00004 	addi	r3,r3,-32768
   40438:	d0a6d817 	ldw	r2,-25760(gp)
   4043c:	10800304 	addi	r2,r2,12
   40440:	1080000b 	ldhu	r2,0(r2)
   40444:	10bfffcc 	andi	r2,r2,65535
   40448:	10a0001c 	xori	r2,r2,32768
   4044c:	10a00004 	addi	r2,r2,-32768
   40450:	1885883a 	add	r2,r3,r2
   40454:	e0bff815 	stw	r2,-32(fp)
		x1 = data[1] - data[6];
   40458:	d0a6d817 	ldw	r2,-25760(gp)
   4045c:	10800084 	addi	r2,r2,2
   40460:	1080000b 	ldhu	r2,0(r2)
   40464:	10ffffcc 	andi	r3,r2,65535
   40468:	18e0001c 	xori	r3,r3,32768
   4046c:	18e00004 	addi	r3,r3,-32768
   40470:	d0a6d817 	ldw	r2,-25760(gp)
   40474:	10800304 	addi	r2,r2,12
   40478:	1080000b 	ldhu	r2,0(r2)
   4047c:	10bfffcc 	andi	r2,r2,65535
   40480:	10a0001c 	xori	r2,r2,32768
   40484:	10a00004 	addi	r2,r2,-32768
   40488:	1885c83a 	sub	r2,r3,r2
   4048c:	e0bff915 	stw	r2,-28(fp)

		x6 = data[2] + data[5];
   40490:	d0a6d817 	ldw	r2,-25760(gp)
   40494:	10800104 	addi	r2,r2,4
   40498:	1080000b 	ldhu	r2,0(r2)
   4049c:	10ffffcc 	andi	r3,r2,65535
   404a0:	18e0001c 	xori	r3,r3,32768
   404a4:	18e00004 	addi	r3,r3,-32768
   404a8:	d0a6d817 	ldw	r2,-25760(gp)
   404ac:	10800284 	addi	r2,r2,10
   404b0:	1080000b 	ldhu	r2,0(r2)
   404b4:	10bfffcc 	andi	r2,r2,65535
   404b8:	10a0001c 	xori	r2,r2,32768
   404bc:	10a00004 	addi	r2,r2,-32768
   404c0:	1885883a 	add	r2,r3,r2
   404c4:	e0bffa15 	stw	r2,-24(fp)
		x2 = data[2] - data[5];
   404c8:	d0a6d817 	ldw	r2,-25760(gp)
   404cc:	10800104 	addi	r2,r2,4
   404d0:	1080000b 	ldhu	r2,0(r2)
   404d4:	10ffffcc 	andi	r3,r2,65535
   404d8:	18e0001c 	xori	r3,r3,32768
   404dc:	18e00004 	addi	r3,r3,-32768
   404e0:	d0a6d817 	ldw	r2,-25760(gp)
   404e4:	10800284 	addi	r2,r2,10
   404e8:	1080000b 	ldhu	r2,0(r2)
   404ec:	10bfffcc 	andi	r2,r2,65535
   404f0:	10a0001c 	xori	r2,r2,32768
   404f4:	10a00004 	addi	r2,r2,-32768
   404f8:	1885c83a 	sub	r2,r3,r2
   404fc:	e0bffb15 	stw	r2,-20(fp)

		x5 = data[3] + data[4];
   40500:	d0a6d817 	ldw	r2,-25760(gp)
   40504:	10800184 	addi	r2,r2,6
   40508:	1080000b 	ldhu	r2,0(r2)
   4050c:	10ffffcc 	andi	r3,r2,65535
   40510:	18e0001c 	xori	r3,r3,32768
   40514:	18e00004 	addi	r3,r3,-32768
   40518:	d0a6d817 	ldw	r2,-25760(gp)
   4051c:	10800204 	addi	r2,r2,8
   40520:	1080000b 	ldhu	r2,0(r2)
   40524:	10bfffcc 	andi	r2,r2,65535
   40528:	10a0001c 	xori	r2,r2,32768
   4052c:	10a00004 	addi	r2,r2,-32768
   40530:	1885883a 	add	r2,r3,r2
   40534:	e0bffc15 	stw	r2,-16(fp)
		x3 = data[3] - data[4];
   40538:	d0a6d817 	ldw	r2,-25760(gp)
   4053c:	10800184 	addi	r2,r2,6
   40540:	1080000b 	ldhu	r2,0(r2)
   40544:	10ffffcc 	andi	r3,r2,65535
   40548:	18e0001c 	xori	r3,r3,32768
   4054c:	18e00004 	addi	r3,r3,-32768
   40550:	d0a6d817 	ldw	r2,-25760(gp)
   40554:	10800204 	addi	r2,r2,8
   40558:	1080000b 	ldhu	r2,0(r2)
   4055c:	10bfffcc 	andi	r2,r2,65535
   40560:	10a0001c 	xori	r2,r2,32768
   40564:	10a00004 	addi	r2,r2,-32768
   40568:	1885c83a 	sub	r2,r3,r2
   4056c:	e0bffd15 	stw	r2,-12(fp)

		x4 = x8 + x5;
   40570:	e0fff617 	ldw	r3,-40(fp)
   40574:	e0bffc17 	ldw	r2,-16(fp)
   40578:	1885883a 	add	r2,r3,r2
   4057c:	e0bffe15 	stw	r2,-8(fp)
		x8 -= x5;
   40580:	e0fff617 	ldw	r3,-40(fp)
   40584:	e0bffc17 	ldw	r2,-16(fp)
   40588:	1885c83a 	sub	r2,r3,r2
   4058c:	e0bff615 	stw	r2,-40(fp)

		x5 = x7 + x6;
   40590:	e0fff817 	ldw	r3,-32(fp)
   40594:	e0bffa17 	ldw	r2,-24(fp)
   40598:	1885883a 	add	r2,r3,r2
   4059c:	e0bffc15 	stw	r2,-16(fp)
		x7 -= x6;
   405a0:	e0fff817 	ldw	r3,-32(fp)
   405a4:	e0bffa17 	ldw	r2,-24(fp)
   405a8:	1885c83a 	sub	r2,r3,r2
   405ac:	e0bff815 	stw	r2,-32(fp)

		data[0] = (INT16)(x4 + x5);
   405b0:	d0a6d817 	ldw	r2,-25760(gp)
   405b4:	e0fffe17 	ldw	r3,-8(fp)
   405b8:	1809883a 	mov	r4,r3
   405bc:	e0fffc17 	ldw	r3,-16(fp)
   405c0:	20c7883a 	add	r3,r4,r3
   405c4:	10c0000d 	sth	r3,0(r2)
		data[4] = (INT16)(x4 - x5);
   405c8:	d0a6d817 	ldw	r2,-25760(gp)
   405cc:	10800204 	addi	r2,r2,8
   405d0:	e0fffe17 	ldw	r3,-8(fp)
   405d4:	1809883a 	mov	r4,r3
   405d8:	e0fffc17 	ldw	r3,-16(fp)
   405dc:	20c7c83a 	sub	r3,r4,r3
   405e0:	10c0000d 	sth	r3,0(r2)

		data[2] = (INT16)((x8 * c2 + x7 * c6) >> s2);
   405e4:	d0a6d817 	ldw	r2,-25760(gp)
   405e8:	14000104 	addi	r16,r2,4
   405ec:	d0a0000b 	ldhu	r2,-32768(gp)
   405f0:	10bfffcc 	andi	r2,r2,65535
   405f4:	1009883a 	mov	r4,r2
   405f8:	e17ff617 	ldw	r5,-40(fp)
   405fc:	0040e540 	call	40e54 <__mulsi3>
   40600:	1023883a 	mov	r17,r2
   40604:	d0a0008b 	ldhu	r2,-32766(gp)
   40608:	10bfffcc 	andi	r2,r2,65535
   4060c:	1009883a 	mov	r4,r2
   40610:	e17ff817 	ldw	r5,-32(fp)
   40614:	0040e540 	call	40e54 <__mulsi3>
   40618:	8887883a 	add	r3,r17,r2
   4061c:	d0a0010b 	ldhu	r2,-32764(gp)
   40620:	10bfffcc 	andi	r2,r2,65535
   40624:	1885d83a 	sra	r2,r3,r2
   40628:	8080000d 	sth	r2,0(r16)
		data[6] = (INT16)((x8 * c6 - x7 * c2) >> s2);
   4062c:	d0a6d817 	ldw	r2,-25760(gp)
   40630:	14000304 	addi	r16,r2,12
   40634:	d0a0008b 	ldhu	r2,-32766(gp)
   40638:	10bfffcc 	andi	r2,r2,65535
   4063c:	1009883a 	mov	r4,r2
   40640:	e17ff617 	ldw	r5,-40(fp)
   40644:	0040e540 	call	40e54 <__mulsi3>
   40648:	1023883a 	mov	r17,r2
   4064c:	d0a0000b 	ldhu	r2,-32768(gp)
   40650:	10bfffcc 	andi	r2,r2,65535
   40654:	1009883a 	mov	r4,r2
   40658:	e17ff817 	ldw	r5,-32(fp)
   4065c:	0040e540 	call	40e54 <__mulsi3>
   40660:	8887c83a 	sub	r3,r17,r2
   40664:	d0a0010b 	ldhu	r2,-32764(gp)
   40668:	10bfffcc 	andi	r2,r2,65535
   4066c:	1885d83a 	sra	r2,r3,r2
   40670:	8080000d 	sth	r2,0(r16)

		data[7] = (INT16)((x0 * c7 - x1 * c5 + x2 * c3 - x3 * c1) >> s2);
   40674:	d0a6d817 	ldw	r2,-25760(gp)
   40678:	14000384 	addi	r16,r2,14
   4067c:	d0a0018b 	ldhu	r2,-32762(gp)
   40680:	10bfffcc 	andi	r2,r2,65535
   40684:	1009883a 	mov	r4,r2
   40688:	e17ff717 	ldw	r5,-36(fp)
   4068c:	0040e540 	call	40e54 <__mulsi3>
   40690:	1023883a 	mov	r17,r2
   40694:	d0a0020b 	ldhu	r2,-32760(gp)
   40698:	10bfffcc 	andi	r2,r2,65535
   4069c:	1009883a 	mov	r4,r2
   406a0:	e17ff917 	ldw	r5,-28(fp)
   406a4:	0040e540 	call	40e54 <__mulsi3>
   406a8:	88a3c83a 	sub	r17,r17,r2
   406ac:	d0a0028b 	ldhu	r2,-32758(gp)
   406b0:	10bfffcc 	andi	r2,r2,65535
   406b4:	1009883a 	mov	r4,r2
   406b8:	e17ffb17 	ldw	r5,-20(fp)
   406bc:	0040e540 	call	40e54 <__mulsi3>
   406c0:	88a3883a 	add	r17,r17,r2
   406c4:	d0a0030b 	ldhu	r2,-32756(gp)
   406c8:	10bfffcc 	andi	r2,r2,65535
   406cc:	1009883a 	mov	r4,r2
   406d0:	e17ffd17 	ldw	r5,-12(fp)
   406d4:	0040e540 	call	40e54 <__mulsi3>
   406d8:	8887c83a 	sub	r3,r17,r2
   406dc:	d0a0010b 	ldhu	r2,-32764(gp)
   406e0:	10bfffcc 	andi	r2,r2,65535
   406e4:	1885d83a 	sra	r2,r3,r2
   406e8:	8080000d 	sth	r2,0(r16)
		data[5] = (INT16)((x0 * c5 - x1 * c1 + x2 * c7 + x3 * c3) >> s2);
   406ec:	d0a6d817 	ldw	r2,-25760(gp)
   406f0:	14000284 	addi	r16,r2,10
   406f4:	d0a0020b 	ldhu	r2,-32760(gp)
   406f8:	10bfffcc 	andi	r2,r2,65535
   406fc:	1009883a 	mov	r4,r2
   40700:	e17ff717 	ldw	r5,-36(fp)
   40704:	0040e540 	call	40e54 <__mulsi3>
   40708:	1023883a 	mov	r17,r2
   4070c:	d0a0030b 	ldhu	r2,-32756(gp)
   40710:	10bfffcc 	andi	r2,r2,65535
   40714:	1009883a 	mov	r4,r2
   40718:	e17ff917 	ldw	r5,-28(fp)
   4071c:	0040e540 	call	40e54 <__mulsi3>
   40720:	88a3c83a 	sub	r17,r17,r2
   40724:	d0a0018b 	ldhu	r2,-32762(gp)
   40728:	10bfffcc 	andi	r2,r2,65535
   4072c:	1009883a 	mov	r4,r2
   40730:	e17ffb17 	ldw	r5,-20(fp)
   40734:	0040e540 	call	40e54 <__mulsi3>
   40738:	88a3883a 	add	r17,r17,r2
   4073c:	d0a0028b 	ldhu	r2,-32758(gp)
   40740:	10bfffcc 	andi	r2,r2,65535
   40744:	1009883a 	mov	r4,r2
   40748:	e17ffd17 	ldw	r5,-12(fp)
   4074c:	0040e540 	call	40e54 <__mulsi3>
   40750:	8887883a 	add	r3,r17,r2
   40754:	d0a0010b 	ldhu	r2,-32764(gp)
   40758:	10bfffcc 	andi	r2,r2,65535
   4075c:	1885d83a 	sra	r2,r3,r2
   40760:	8080000d 	sth	r2,0(r16)
		data[3] = (INT16)((x0 * c3 - x1 * c7 - x2 * c1 - x3 * c5) >> s2);
   40764:	d0a6d817 	ldw	r2,-25760(gp)
   40768:	14000184 	addi	r16,r2,6
   4076c:	d0a0028b 	ldhu	r2,-32758(gp)
   40770:	10bfffcc 	andi	r2,r2,65535
   40774:	1009883a 	mov	r4,r2
   40778:	e17ff717 	ldw	r5,-36(fp)
   4077c:	0040e540 	call	40e54 <__mulsi3>
   40780:	1023883a 	mov	r17,r2
   40784:	d0a0018b 	ldhu	r2,-32762(gp)
   40788:	10bfffcc 	andi	r2,r2,65535
   4078c:	1009883a 	mov	r4,r2
   40790:	e17ff917 	ldw	r5,-28(fp)
   40794:	0040e540 	call	40e54 <__mulsi3>
   40798:	88a3c83a 	sub	r17,r17,r2
   4079c:	d0a0030b 	ldhu	r2,-32756(gp)
   407a0:	10bfffcc 	andi	r2,r2,65535
   407a4:	1009883a 	mov	r4,r2
   407a8:	e17ffb17 	ldw	r5,-20(fp)
   407ac:	0040e540 	call	40e54 <__mulsi3>
   407b0:	88a3c83a 	sub	r17,r17,r2
   407b4:	d0a0020b 	ldhu	r2,-32760(gp)
   407b8:	10bfffcc 	andi	r2,r2,65535
   407bc:	1009883a 	mov	r4,r2
   407c0:	e17ffd17 	ldw	r5,-12(fp)
   407c4:	0040e540 	call	40e54 <__mulsi3>
   407c8:	8887c83a 	sub	r3,r17,r2
   407cc:	d0a0010b 	ldhu	r2,-32764(gp)
   407d0:	10bfffcc 	andi	r2,r2,65535
   407d4:	1885d83a 	sra	r2,r3,r2
   407d8:	8080000d 	sth	r2,0(r16)
		data[1] = (INT16)((x0 * c1 + x1 * c3 + x2 * c5 + x3 * c7) >> s2);
   407dc:	d0a6d817 	ldw	r2,-25760(gp)
   407e0:	14000084 	addi	r16,r2,2
   407e4:	d0a0030b 	ldhu	r2,-32756(gp)
   407e8:	10bfffcc 	andi	r2,r2,65535
   407ec:	1009883a 	mov	r4,r2
   407f0:	e17ff717 	ldw	r5,-36(fp)
   407f4:	0040e540 	call	40e54 <__mulsi3>
   407f8:	1023883a 	mov	r17,r2
   407fc:	d0a0028b 	ldhu	r2,-32758(gp)
   40800:	10bfffcc 	andi	r2,r2,65535
   40804:	1009883a 	mov	r4,r2
   40808:	e17ff917 	ldw	r5,-28(fp)
   4080c:	0040e540 	call	40e54 <__mulsi3>
   40810:	88a3883a 	add	r17,r17,r2
   40814:	d0a0020b 	ldhu	r2,-32760(gp)
   40818:	10bfffcc 	andi	r2,r2,65535
   4081c:	1009883a 	mov	r4,r2
   40820:	e17ffb17 	ldw	r5,-20(fp)
   40824:	0040e540 	call	40e54 <__mulsi3>
   40828:	88a3883a 	add	r17,r17,r2
   4082c:	d0a0018b 	ldhu	r2,-32762(gp)
   40830:	10bfffcc 	andi	r2,r2,65535
   40834:	1009883a 	mov	r4,r2
   40838:	e17ffd17 	ldw	r5,-12(fp)
   4083c:	0040e540 	call	40e54 <__mulsi3>
   40840:	8887883a 	add	r3,r17,r2
   40844:	d0a0010b 	ldhu	r2,-32764(gp)
   40848:	10bfffcc 	andi	r2,r2,65535
   4084c:	1885d83a 	sra	r2,r3,r2
   40850:	8080000d 	sth	r2,0(r16)

		data += 8;
   40854:	d0a6d817 	ldw	r2,-25760(gp)
   40858:	10800404 	addi	r2,r2,16
   4085c:	d0a6d815 	stw	r2,-25760(gp)
	// 		printf("\n");
	// }

	// start_time = clock();

	for (i = 8; i > 0; i--)
   40860:	e0bff50b 	ldhu	r2,-44(fp)
   40864:	10bfffc4 	addi	r2,r2,-1
   40868:	e0bff50d 	sth	r2,-44(fp)
   4086c:	e0bff50b 	ldhu	r2,-44(fp)
   40870:	103ed11e 	bne	r2,zero,403b8 <DCT+0x78>
		data[1] = (INT16)((x0 * c1 + x1 * c3 + x2 * c5 + x3 * c7) >> s2);

		data += 8;
	}

	data -= 64;
   40874:	d0a6d817 	ldw	r2,-25760(gp)
   40878:	10bfe004 	addi	r2,r2,-128
   4087c:	d0a6d815 	stw	r2,-25760(gp)

	for (i = 8; i > 0; i--)
   40880:	00800204 	movi	r2,8
   40884:	e0bff50d 	sth	r2,-44(fp)
   40888:	00013106 	br	40d50 <DCT+0xa10>
	{
		x8 = data[0] + data[56];
   4088c:	d0a6d817 	ldw	r2,-25760(gp)
   40890:	1080000b 	ldhu	r2,0(r2)
   40894:	10ffffcc 	andi	r3,r2,65535
   40898:	18e0001c 	xori	r3,r3,32768
   4089c:	18e00004 	addi	r3,r3,-32768
   408a0:	d0a6d817 	ldw	r2,-25760(gp)
   408a4:	10801c04 	addi	r2,r2,112
   408a8:	1080000b 	ldhu	r2,0(r2)
   408ac:	10bfffcc 	andi	r2,r2,65535
   408b0:	10a0001c 	xori	r2,r2,32768
   408b4:	10a00004 	addi	r2,r2,-32768
   408b8:	1885883a 	add	r2,r3,r2
   408bc:	e0bff615 	stw	r2,-40(fp)
		x0 = data[0] - data[56];
   408c0:	d0a6d817 	ldw	r2,-25760(gp)
   408c4:	1080000b 	ldhu	r2,0(r2)
   408c8:	10ffffcc 	andi	r3,r2,65535
   408cc:	18e0001c 	xori	r3,r3,32768
   408d0:	18e00004 	addi	r3,r3,-32768
   408d4:	d0a6d817 	ldw	r2,-25760(gp)
   408d8:	10801c04 	addi	r2,r2,112
   408dc:	1080000b 	ldhu	r2,0(r2)
   408e0:	10bfffcc 	andi	r2,r2,65535
   408e4:	10a0001c 	xori	r2,r2,32768
   408e8:	10a00004 	addi	r2,r2,-32768
   408ec:	1885c83a 	sub	r2,r3,r2
   408f0:	e0bff715 	stw	r2,-36(fp)

		x7 = data[8] + data[48];
   408f4:	d0a6d817 	ldw	r2,-25760(gp)
   408f8:	10800404 	addi	r2,r2,16
   408fc:	1080000b 	ldhu	r2,0(r2)
   40900:	10ffffcc 	andi	r3,r2,65535
   40904:	18e0001c 	xori	r3,r3,32768
   40908:	18e00004 	addi	r3,r3,-32768
   4090c:	d0a6d817 	ldw	r2,-25760(gp)
   40910:	10801804 	addi	r2,r2,96
   40914:	1080000b 	ldhu	r2,0(r2)
   40918:	10bfffcc 	andi	r2,r2,65535
   4091c:	10a0001c 	xori	r2,r2,32768
   40920:	10a00004 	addi	r2,r2,-32768
   40924:	1885883a 	add	r2,r3,r2
   40928:	e0bff815 	stw	r2,-32(fp)
		x1 = data[8] - data[48];
   4092c:	d0a6d817 	ldw	r2,-25760(gp)
   40930:	10800404 	addi	r2,r2,16
   40934:	1080000b 	ldhu	r2,0(r2)
   40938:	10ffffcc 	andi	r3,r2,65535
   4093c:	18e0001c 	xori	r3,r3,32768
   40940:	18e00004 	addi	r3,r3,-32768
   40944:	d0a6d817 	ldw	r2,-25760(gp)
   40948:	10801804 	addi	r2,r2,96
   4094c:	1080000b 	ldhu	r2,0(r2)
   40950:	10bfffcc 	andi	r2,r2,65535
   40954:	10a0001c 	xori	r2,r2,32768
   40958:	10a00004 	addi	r2,r2,-32768
   4095c:	1885c83a 	sub	r2,r3,r2
   40960:	e0bff915 	stw	r2,-28(fp)

		x6 = data[16] + data[40];
   40964:	d0a6d817 	ldw	r2,-25760(gp)
   40968:	10800804 	addi	r2,r2,32
   4096c:	1080000b 	ldhu	r2,0(r2)
   40970:	10ffffcc 	andi	r3,r2,65535
   40974:	18e0001c 	xori	r3,r3,32768
   40978:	18e00004 	addi	r3,r3,-32768
   4097c:	d0a6d817 	ldw	r2,-25760(gp)
   40980:	10801404 	addi	r2,r2,80
   40984:	1080000b 	ldhu	r2,0(r2)
   40988:	10bfffcc 	andi	r2,r2,65535
   4098c:	10a0001c 	xori	r2,r2,32768
   40990:	10a00004 	addi	r2,r2,-32768
   40994:	1885883a 	add	r2,r3,r2
   40998:	e0bffa15 	stw	r2,-24(fp)
		x2 = data[16] - data[40];
   4099c:	d0a6d817 	ldw	r2,-25760(gp)
   409a0:	10800804 	addi	r2,r2,32
   409a4:	1080000b 	ldhu	r2,0(r2)
   409a8:	10ffffcc 	andi	r3,r2,65535
   409ac:	18e0001c 	xori	r3,r3,32768
   409b0:	18e00004 	addi	r3,r3,-32768
   409b4:	d0a6d817 	ldw	r2,-25760(gp)
   409b8:	10801404 	addi	r2,r2,80
   409bc:	1080000b 	ldhu	r2,0(r2)
   409c0:	10bfffcc 	andi	r2,r2,65535
   409c4:	10a0001c 	xori	r2,r2,32768
   409c8:	10a00004 	addi	r2,r2,-32768
   409cc:	1885c83a 	sub	r2,r3,r2
   409d0:	e0bffb15 	stw	r2,-20(fp)

		x5 = data[24] + data[32];
   409d4:	d0a6d817 	ldw	r2,-25760(gp)
   409d8:	10800c04 	addi	r2,r2,48
   409dc:	1080000b 	ldhu	r2,0(r2)
   409e0:	10ffffcc 	andi	r3,r2,65535
   409e4:	18e0001c 	xori	r3,r3,32768
   409e8:	18e00004 	addi	r3,r3,-32768
   409ec:	d0a6d817 	ldw	r2,-25760(gp)
   409f0:	10801004 	addi	r2,r2,64
   409f4:	1080000b 	ldhu	r2,0(r2)
   409f8:	10bfffcc 	andi	r2,r2,65535
   409fc:	10a0001c 	xori	r2,r2,32768
   40a00:	10a00004 	addi	r2,r2,-32768
   40a04:	1885883a 	add	r2,r3,r2
   40a08:	e0bffc15 	stw	r2,-16(fp)
		x3 = data[24] - data[32];
   40a0c:	d0a6d817 	ldw	r2,-25760(gp)
   40a10:	10800c04 	addi	r2,r2,48
   40a14:	1080000b 	ldhu	r2,0(r2)
   40a18:	10ffffcc 	andi	r3,r2,65535
   40a1c:	18e0001c 	xori	r3,r3,32768
   40a20:	18e00004 	addi	r3,r3,-32768
   40a24:	d0a6d817 	ldw	r2,-25760(gp)
   40a28:	10801004 	addi	r2,r2,64
   40a2c:	1080000b 	ldhu	r2,0(r2)
   40a30:	10bfffcc 	andi	r2,r2,65535
   40a34:	10a0001c 	xori	r2,r2,32768
   40a38:	10a00004 	addi	r2,r2,-32768
   40a3c:	1885c83a 	sub	r2,r3,r2
   40a40:	e0bffd15 	stw	r2,-12(fp)

		x4 = x8 + x5;
   40a44:	e0fff617 	ldw	r3,-40(fp)
   40a48:	e0bffc17 	ldw	r2,-16(fp)
   40a4c:	1885883a 	add	r2,r3,r2
   40a50:	e0bffe15 	stw	r2,-8(fp)
		x8 -= x5;
   40a54:	e0fff617 	ldw	r3,-40(fp)
   40a58:	e0bffc17 	ldw	r2,-16(fp)
   40a5c:	1885c83a 	sub	r2,r3,r2
   40a60:	e0bff615 	stw	r2,-40(fp)

		x5 = x7 + x6;
   40a64:	e0fff817 	ldw	r3,-32(fp)
   40a68:	e0bffa17 	ldw	r2,-24(fp)
   40a6c:	1885883a 	add	r2,r3,r2
   40a70:	e0bffc15 	stw	r2,-16(fp)
		x7 -= x6;
   40a74:	e0fff817 	ldw	r3,-32(fp)
   40a78:	e0bffa17 	ldw	r2,-24(fp)
   40a7c:	1885c83a 	sub	r2,r3,r2
   40a80:	e0bff815 	stw	r2,-32(fp)

		data[0] = (INT16)((x4 + x5) >> s1);
   40a84:	d0a6d817 	ldw	r2,-25760(gp)
   40a88:	e13ffe17 	ldw	r4,-8(fp)
   40a8c:	e0fffc17 	ldw	r3,-16(fp)
   40a90:	20c9883a 	add	r4,r4,r3
   40a94:	d0e0038b 	ldhu	r3,-32754(gp)
   40a98:	18ffffcc 	andi	r3,r3,65535
   40a9c:	20c7d83a 	sra	r3,r4,r3
   40aa0:	10c0000d 	sth	r3,0(r2)
		data[32] = (INT16)((x4 - x5) >> s1);
   40aa4:	d0a6d817 	ldw	r2,-25760(gp)
   40aa8:	10801004 	addi	r2,r2,64
   40aac:	e13ffe17 	ldw	r4,-8(fp)
   40ab0:	e0fffc17 	ldw	r3,-16(fp)
   40ab4:	20c9c83a 	sub	r4,r4,r3
   40ab8:	d0e0038b 	ldhu	r3,-32754(gp)
   40abc:	18ffffcc 	andi	r3,r3,65535
   40ac0:	20c7d83a 	sra	r3,r4,r3
   40ac4:	10c0000d 	sth	r3,0(r2)

		data[16] = (INT16)((x8 * c2 + x7 * c6) >> s3);
   40ac8:	d0a6d817 	ldw	r2,-25760(gp)
   40acc:	14000804 	addi	r16,r2,32
   40ad0:	d0a0000b 	ldhu	r2,-32768(gp)
   40ad4:	10bfffcc 	andi	r2,r2,65535
   40ad8:	1009883a 	mov	r4,r2
   40adc:	e17ff617 	ldw	r5,-40(fp)
   40ae0:	0040e540 	call	40e54 <__mulsi3>
   40ae4:	1023883a 	mov	r17,r2
   40ae8:	d0a0008b 	ldhu	r2,-32766(gp)
   40aec:	10bfffcc 	andi	r2,r2,65535
   40af0:	1009883a 	mov	r4,r2
   40af4:	e17ff817 	ldw	r5,-32(fp)
   40af8:	0040e540 	call	40e54 <__mulsi3>
   40afc:	8887883a 	add	r3,r17,r2
   40b00:	d0a0040b 	ldhu	r2,-32752(gp)
   40b04:	10bfffcc 	andi	r2,r2,65535
   40b08:	1885d83a 	sra	r2,r3,r2
   40b0c:	8080000d 	sth	r2,0(r16)
		data[48] = (INT16)((x8 * c6 - x7 * c2) >> s3);
   40b10:	d0a6d817 	ldw	r2,-25760(gp)
   40b14:	14001804 	addi	r16,r2,96
   40b18:	d0a0008b 	ldhu	r2,-32766(gp)
   40b1c:	10bfffcc 	andi	r2,r2,65535
   40b20:	1009883a 	mov	r4,r2
   40b24:	e17ff617 	ldw	r5,-40(fp)
   40b28:	0040e540 	call	40e54 <__mulsi3>
   40b2c:	1023883a 	mov	r17,r2
   40b30:	d0a0000b 	ldhu	r2,-32768(gp)
   40b34:	10bfffcc 	andi	r2,r2,65535
   40b38:	1009883a 	mov	r4,r2
   40b3c:	e17ff817 	ldw	r5,-32(fp)
   40b40:	0040e540 	call	40e54 <__mulsi3>
   40b44:	8887c83a 	sub	r3,r17,r2
   40b48:	d0a0040b 	ldhu	r2,-32752(gp)
   40b4c:	10bfffcc 	andi	r2,r2,65535
   40b50:	1885d83a 	sra	r2,r3,r2
   40b54:	8080000d 	sth	r2,0(r16)

		data[56] = (INT16)((x0 * c7 - x1 * c5 + x2 * c3 - x3 * c1) >> s3);
   40b58:	d0a6d817 	ldw	r2,-25760(gp)
   40b5c:	14001c04 	addi	r16,r2,112
   40b60:	d0a0018b 	ldhu	r2,-32762(gp)
   40b64:	10bfffcc 	andi	r2,r2,65535
   40b68:	1009883a 	mov	r4,r2
   40b6c:	e17ff717 	ldw	r5,-36(fp)
   40b70:	0040e540 	call	40e54 <__mulsi3>
   40b74:	1023883a 	mov	r17,r2
   40b78:	d0a0020b 	ldhu	r2,-32760(gp)
   40b7c:	10bfffcc 	andi	r2,r2,65535
   40b80:	1009883a 	mov	r4,r2
   40b84:	e17ff917 	ldw	r5,-28(fp)
   40b88:	0040e540 	call	40e54 <__mulsi3>
   40b8c:	88a3c83a 	sub	r17,r17,r2
   40b90:	d0a0028b 	ldhu	r2,-32758(gp)
   40b94:	10bfffcc 	andi	r2,r2,65535
   40b98:	1009883a 	mov	r4,r2
   40b9c:	e17ffb17 	ldw	r5,-20(fp)
   40ba0:	0040e540 	call	40e54 <__mulsi3>
   40ba4:	88a3883a 	add	r17,r17,r2
   40ba8:	d0a0030b 	ldhu	r2,-32756(gp)
   40bac:	10bfffcc 	andi	r2,r2,65535
   40bb0:	1009883a 	mov	r4,r2
   40bb4:	e17ffd17 	ldw	r5,-12(fp)
   40bb8:	0040e540 	call	40e54 <__mulsi3>
   40bbc:	8887c83a 	sub	r3,r17,r2
   40bc0:	d0a0040b 	ldhu	r2,-32752(gp)
   40bc4:	10bfffcc 	andi	r2,r2,65535
   40bc8:	1885d83a 	sra	r2,r3,r2
   40bcc:	8080000d 	sth	r2,0(r16)
		data[40] = (INT16)((x0 * c5 - x1 * c1 + x2 * c7 + x3 * c3) >> s3);
   40bd0:	d0a6d817 	ldw	r2,-25760(gp)
   40bd4:	14001404 	addi	r16,r2,80
   40bd8:	d0a0020b 	ldhu	r2,-32760(gp)
   40bdc:	10bfffcc 	andi	r2,r2,65535
   40be0:	1009883a 	mov	r4,r2
   40be4:	e17ff717 	ldw	r5,-36(fp)
   40be8:	0040e540 	call	40e54 <__mulsi3>
   40bec:	1023883a 	mov	r17,r2
   40bf0:	d0a0030b 	ldhu	r2,-32756(gp)
   40bf4:	10bfffcc 	andi	r2,r2,65535
   40bf8:	1009883a 	mov	r4,r2
   40bfc:	e17ff917 	ldw	r5,-28(fp)
   40c00:	0040e540 	call	40e54 <__mulsi3>
   40c04:	88a3c83a 	sub	r17,r17,r2
   40c08:	d0a0018b 	ldhu	r2,-32762(gp)
   40c0c:	10bfffcc 	andi	r2,r2,65535
   40c10:	1009883a 	mov	r4,r2
   40c14:	e17ffb17 	ldw	r5,-20(fp)
   40c18:	0040e540 	call	40e54 <__mulsi3>
   40c1c:	88a3883a 	add	r17,r17,r2
   40c20:	d0a0028b 	ldhu	r2,-32758(gp)
   40c24:	10bfffcc 	andi	r2,r2,65535
   40c28:	1009883a 	mov	r4,r2
   40c2c:	e17ffd17 	ldw	r5,-12(fp)
   40c30:	0040e540 	call	40e54 <__mulsi3>
   40c34:	8887883a 	add	r3,r17,r2
   40c38:	d0a0040b 	ldhu	r2,-32752(gp)
   40c3c:	10bfffcc 	andi	r2,r2,65535
   40c40:	1885d83a 	sra	r2,r3,r2
   40c44:	8080000d 	sth	r2,0(r16)
		data[24] = (INT16)((x0 * c3 - x1 * c7 - x2 * c1 - x3 * c5) >> s3);
   40c48:	d0a6d817 	ldw	r2,-25760(gp)
   40c4c:	14000c04 	addi	r16,r2,48
   40c50:	d0a0028b 	ldhu	r2,-32758(gp)
   40c54:	10bfffcc 	andi	r2,r2,65535
   40c58:	1009883a 	mov	r4,r2
   40c5c:	e17ff717 	ldw	r5,-36(fp)
   40c60:	0040e540 	call	40e54 <__mulsi3>
   40c64:	1023883a 	mov	r17,r2
   40c68:	d0a0018b 	ldhu	r2,-32762(gp)
   40c6c:	10bfffcc 	andi	r2,r2,65535
   40c70:	1009883a 	mov	r4,r2
   40c74:	e17ff917 	ldw	r5,-28(fp)
   40c78:	0040e540 	call	40e54 <__mulsi3>
   40c7c:	88a3c83a 	sub	r17,r17,r2
   40c80:	d0a0030b 	ldhu	r2,-32756(gp)
   40c84:	10bfffcc 	andi	r2,r2,65535
   40c88:	1009883a 	mov	r4,r2
   40c8c:	e17ffb17 	ldw	r5,-20(fp)
   40c90:	0040e540 	call	40e54 <__mulsi3>
   40c94:	88a3c83a 	sub	r17,r17,r2
   40c98:	d0a0020b 	ldhu	r2,-32760(gp)
   40c9c:	10bfffcc 	andi	r2,r2,65535
   40ca0:	1009883a 	mov	r4,r2
   40ca4:	e17ffd17 	ldw	r5,-12(fp)
   40ca8:	0040e540 	call	40e54 <__mulsi3>
   40cac:	8887c83a 	sub	r3,r17,r2
   40cb0:	d0a0040b 	ldhu	r2,-32752(gp)
   40cb4:	10bfffcc 	andi	r2,r2,65535
   40cb8:	1885d83a 	sra	r2,r3,r2
   40cbc:	8080000d 	sth	r2,0(r16)
		data[8] = (INT16)((x0 * c1 + x1 * c3 + x2 * c5 + x3 * c7) >> s3);
   40cc0:	d0a6d817 	ldw	r2,-25760(gp)
   40cc4:	14000404 	addi	r16,r2,16
   40cc8:	d0a0030b 	ldhu	r2,-32756(gp)
   40ccc:	10bfffcc 	andi	r2,r2,65535
   40cd0:	1009883a 	mov	r4,r2
   40cd4:	e17ff717 	ldw	r5,-36(fp)
   40cd8:	0040e540 	call	40e54 <__mulsi3>
   40cdc:	1023883a 	mov	r17,r2
   40ce0:	d0a0028b 	ldhu	r2,-32758(gp)
   40ce4:	10bfffcc 	andi	r2,r2,65535
   40ce8:	1009883a 	mov	r4,r2
   40cec:	e17ff917 	ldw	r5,-28(fp)
   40cf0:	0040e540 	call	40e54 <__mulsi3>
   40cf4:	88a3883a 	add	r17,r17,r2
   40cf8:	d0a0020b 	ldhu	r2,-32760(gp)
   40cfc:	10bfffcc 	andi	r2,r2,65535
   40d00:	1009883a 	mov	r4,r2
   40d04:	e17ffb17 	ldw	r5,-20(fp)
   40d08:	0040e540 	call	40e54 <__mulsi3>
   40d0c:	88a3883a 	add	r17,r17,r2
   40d10:	d0a0018b 	ldhu	r2,-32762(gp)
   40d14:	10bfffcc 	andi	r2,r2,65535
   40d18:	1009883a 	mov	r4,r2
   40d1c:	e17ffd17 	ldw	r5,-12(fp)
   40d20:	0040e540 	call	40e54 <__mulsi3>
   40d24:	8887883a 	add	r3,r17,r2
   40d28:	d0a0040b 	ldhu	r2,-32752(gp)
   40d2c:	10bfffcc 	andi	r2,r2,65535
   40d30:	1885d83a 	sra	r2,r3,r2
   40d34:	8080000d 	sth	r2,0(r16)

		data++;
   40d38:	d0a6d817 	ldw	r2,-25760(gp)
   40d3c:	10800084 	addi	r2,r2,2
   40d40:	d0a6d815 	stw	r2,-25760(gp)
		data += 8;
	}

	data -= 64;

	for (i = 8; i > 0; i--)
   40d44:	e0bff50b 	ldhu	r2,-44(fp)
   40d48:	10bfffc4 	addi	r2,r2,-1
   40d4c:	e0bff50d 	sth	r2,-44(fp)
   40d50:	e0bff50b 	ldhu	r2,-44(fp)
   40d54:	103ecd1e 	bne	r2,zero,4088c <DCT+0x54c>
		data[8] = (INT16)((x0 * c1 + x1 * c3 + x2 * c5 + x3 * c7) >> s3);

		data++;
	}

	data -= 8;
   40d58:	d0a6d817 	ldw	r2,-25760(gp)
   40d5c:	10bffc04 	addi	r2,r2,-16
   40d60:	d0a6d815 	stw	r2,-25760(gp)

	// end_time = clock();
	// fprintf(log_file, "Time taken for DCT encoding: %f\n", (double)(end_time - start_time) / CLOCKS_PER_SEC);

	/* write out to queue */
	for (i = 0; i < 64; i++)
   40d64:	e03ff50d 	sth	zero,-44(fp)
   40d68:	00001306 	br	40db8 <DCT+0xa78>
	{
		temp = data[i];
   40d6c:	d0e6d817 	ldw	r3,-25760(gp)
   40d70:	e0bff50b 	ldhu	r2,-44(fp)
   40d74:	1085883a 	add	r2,r2,r2
   40d78:	1885883a 	add	r2,r3,r2
   40d7c:	1080000b 	ldhu	r2,0(r2)
   40d80:	10bfffcc 	andi	r2,r2,65535
   40d84:	10a0001c 	xori	r2,r2,32768
   40d88:	10a00004 	addi	r2,r2,-32768
   40d8c:	e0bfff15 	stw	r2,-4(fp)
		WRITE_FIFO(&temp, IN_BASE_3to4, CONTROL_BASE_3to4); // Casting data
   40d90:	e0bfff04 	addi	r2,fp,-4
   40d94:	1009883a 	mov	r4,r2
   40d98:	014000b4 	movhi	r5,2
   40d9c:	29441a04 	addi	r5,r5,4200
   40da0:	018000b4 	movhi	r6,2
   40da4:	31840804 	addi	r6,r6,4128
   40da8:	00401f40 	call	401f4 <WRITE_FIFO>

	// end_time = clock();
	// fprintf(log_file, "Time taken for DCT encoding: %f\n", (double)(end_time - start_time) / CLOCKS_PER_SEC);

	/* write out to queue */
	for (i = 0; i < 64; i++)
   40dac:	e0bff50b 	ldhu	r2,-44(fp)
   40db0:	10800044 	addi	r2,r2,1
   40db4:	e0bff50d 	sth	r2,-44(fp)
   40db8:	e0bff50b 	ldhu	r2,-44(fp)
   40dbc:	10801030 	cmpltui	r2,r2,64
   40dc0:	103fea1e 	bne	r2,zero,40d6c <DCT+0xa2c>
	{
		temp = data[i];
		WRITE_FIFO(&temp, IN_BASE_3to4, CONTROL_BASE_3to4); // Casting data
	}
}
   40dc4:	e037883a 	mov	sp,fp
   40dc8:	dfc00317 	ldw	ra,12(sp)
   40dcc:	df000217 	ldw	fp,8(sp)
   40dd0:	dc400117 	ldw	r17,4(sp)
   40dd4:	dc000017 	ldw	r16,0(sp)
   40dd8:	dec00404 	addi	sp,sp,16
   40ddc:	f800283a 	ret

00040de0 <main>:

int main(void)
{
   40de0:	defffe04 	addi	sp,sp,-8
   40de4:	dfc00115 	stw	ra,4(sp)
   40de8:	df000015 	stw	fp,0(sp)
   40dec:	d839883a 	mov	fp,sp
	printf("Starting CPU3\n");
   40df0:	01000134 	movhi	r4,4
   40df4:	211b4d04 	addi	r4,r4,27956
   40df8:	00416ac0 	call	416ac <puts>
	// 	fprintf(stderr, "Error opening log file\n");
	// 	return 1;
	// }

	/* Initialize FIFO */
	delay(100000);
   40dfc:	010000b4 	movhi	r4,2
   40e00:	2121a804 	addi	r4,r4,-31072
   40e04:	00403000 	call	40300 <delay>
	FIFO_INIT(CONTROL_BASE_3to4);
   40e08:	010000b4 	movhi	r4,2
   40e0c:	21040804 	addi	r4,r4,4128
   40e10:	00402c00 	call	402c0 <FIFO_INIT>
	delay(100000);
   40e14:	010000b4 	movhi	r4,2
   40e18:	2121a804 	addi	r4,r4,-31072
   40e1c:	00403000 	call	40300 <delay>

	data = (INT16 *)malloc(sizeof(INT16) * 64);
   40e20:	01002004 	movi	r4,128
   40e24:	0040e7c0 	call	40e7c <malloc>
   40e28:	d0a6d815 	stw	r2,-25760(gp)

	while (1)
	{
		printf("DCT Started\n");
   40e2c:	01000134 	movhi	r4,4
   40e30:	211b5104 	addi	r4,r4,27972
   40e34:	00416ac0 	call	416ac <puts>

		DCT();
   40e38:	00403400 	call	40340 <DCT>
		DCT();
   40e3c:	00403400 	call	40340 <DCT>
		DCT();
   40e40:	00403400 	call	40340 <DCT>

		printf("DCT Done\n");
   40e44:	01000134 	movhi	r4,4
   40e48:	211b5404 	addi	r4,r4,27984
   40e4c:	00416ac0 	call	416ac <puts>
	}
   40e50:	003ff606 	br	40e2c <main+0x4c>

00040e54 <__mulsi3>:
   40e54:	0005883a 	mov	r2,zero
   40e58:	20000726 	beq	r4,zero,40e78 <__mulsi3+0x24>
   40e5c:	20c0004c 	andi	r3,r4,1
   40e60:	2008d07a 	srli	r4,r4,1
   40e64:	18000126 	beq	r3,zero,40e6c <__mulsi3+0x18>
   40e68:	1145883a 	add	r2,r2,r5
   40e6c:	294b883a 	add	r5,r5,r5
   40e70:	203ffa1e 	bne	r4,zero,40e5c <__mulsi3+0x8>
   40e74:	f800283a 	ret
   40e78:	f800283a 	ret

00040e7c <malloc>:
   40e7c:	00800174 	movhi	r2,5
   40e80:	10a1fd04 	addi	r2,r2,-30732
   40e84:	200b883a 	mov	r5,r4
   40e88:	11000017 	ldw	r4,0(r2)
   40e8c:	0040ea41 	jmpi	40ea4 <_malloc_r>

00040e90 <free>:
   40e90:	00800174 	movhi	r2,5
   40e94:	10a1fd04 	addi	r2,r2,-30732
   40e98:	200b883a 	mov	r5,r4
   40e9c:	11000017 	ldw	r4,0(r2)
   40ea0:	00418ec1 	jmpi	418ec <_free_r>

00040ea4 <_malloc_r>:
   40ea4:	defff604 	addi	sp,sp,-40
   40ea8:	dc800215 	stw	r18,8(sp)
   40eac:	dfc00915 	stw	ra,36(sp)
   40eb0:	df000815 	stw	fp,32(sp)
   40eb4:	ddc00715 	stw	r23,28(sp)
   40eb8:	dd800615 	stw	r22,24(sp)
   40ebc:	dd400515 	stw	r21,20(sp)
   40ec0:	dd000415 	stw	r20,16(sp)
   40ec4:	dcc00315 	stw	r19,12(sp)
   40ec8:	dc400115 	stw	r17,4(sp)
   40ecc:	dc000015 	stw	r16,0(sp)
   40ed0:	288002c4 	addi	r2,r5,11
   40ed4:	00c00584 	movi	r3,22
   40ed8:	2025883a 	mov	r18,r4
   40edc:	18802b2e 	bgeu	r3,r2,40f8c <_malloc_r+0xe8>
   40ee0:	047ffe04 	movi	r17,-8
   40ee4:	1462703a 	and	r17,r2,r17
   40ee8:	88002a16 	blt	r17,zero,40f94 <_malloc_r+0xf0>
   40eec:	89402936 	bltu	r17,r5,40f94 <_malloc_r+0xf0>
   40ef0:	9009883a 	mov	r4,r18
   40ef4:	0043f840 	call	43f84 <__malloc_lock>
   40ef8:	00807dc4 	movi	r2,503
   40efc:	14402936 	bltu	r2,r17,40fa4 <_malloc_r+0x100>
   40f00:	8808d0fa 	srli	r4,r17,3
   40f04:	04c00134 	movhi	r19,4
   40f08:	9cdb6704 	addi	r19,r19,28060
   40f0c:	2105883a 	add	r2,r4,r4
   40f10:	1085883a 	add	r2,r2,r2
   40f14:	1085883a 	add	r2,r2,r2
   40f18:	9885883a 	add	r2,r19,r2
   40f1c:	14000317 	ldw	r16,12(r2)
   40f20:	80815526 	beq	r16,r2,41478 <_malloc_r+0x5d4>
   40f24:	81000117 	ldw	r4,4(r16)
   40f28:	00bfff04 	movi	r2,-4
   40f2c:	80c00317 	ldw	r3,12(r16)
   40f30:	2084703a 	and	r2,r4,r2
   40f34:	8085883a 	add	r2,r16,r2
   40f38:	11800117 	ldw	r6,4(r2)
   40f3c:	81400217 	ldw	r5,8(r16)
   40f40:	9009883a 	mov	r4,r18
   40f44:	31800054 	ori	r6,r6,1
   40f48:	11800115 	stw	r6,4(r2)
   40f4c:	28c00315 	stw	r3,12(r5)
   40f50:	19400215 	stw	r5,8(r3)
   40f54:	0043fa40 	call	43fa4 <__malloc_unlock>
   40f58:	80800204 	addi	r2,r16,8
   40f5c:	dfc00917 	ldw	ra,36(sp)
   40f60:	df000817 	ldw	fp,32(sp)
   40f64:	ddc00717 	ldw	r23,28(sp)
   40f68:	dd800617 	ldw	r22,24(sp)
   40f6c:	dd400517 	ldw	r21,20(sp)
   40f70:	dd000417 	ldw	r20,16(sp)
   40f74:	dcc00317 	ldw	r19,12(sp)
   40f78:	dc800217 	ldw	r18,8(sp)
   40f7c:	dc400117 	ldw	r17,4(sp)
   40f80:	dc000017 	ldw	r16,0(sp)
   40f84:	dec00a04 	addi	sp,sp,40
   40f88:	f800283a 	ret
   40f8c:	04400404 	movi	r17,16
   40f90:	897fd72e 	bgeu	r17,r5,40ef0 <_malloc_r+0x4c>
   40f94:	00800304 	movi	r2,12
   40f98:	90800015 	stw	r2,0(r18)
   40f9c:	0005883a 	mov	r2,zero
   40fa0:	003fee06 	br	40f5c <_malloc_r+0xb8>
   40fa4:	8808d27a 	srli	r4,r17,9
   40fa8:	20007126 	beq	r4,zero,41170 <_malloc_r+0x2cc>
   40fac:	00800104 	movi	r2,4
   40fb0:	1100eb36 	bltu	r2,r4,41360 <_malloc_r+0x4bc>
   40fb4:	8808d1ba 	srli	r4,r17,6
   40fb8:	21000e04 	addi	r4,r4,56
   40fbc:	210b883a 	add	r5,r4,r4
   40fc0:	294b883a 	add	r5,r5,r5
   40fc4:	294b883a 	add	r5,r5,r5
   40fc8:	04c00134 	movhi	r19,4
   40fcc:	9cdb6704 	addi	r19,r19,28060
   40fd0:	994b883a 	add	r5,r19,r5
   40fd4:	2c000317 	ldw	r16,12(r5)
   40fd8:	2c000e26 	beq	r5,r16,41014 <_malloc_r+0x170>
   40fdc:	80c00117 	ldw	r3,4(r16)
   40fe0:	01ffff04 	movi	r7,-4
   40fe4:	018003c4 	movi	r6,15
   40fe8:	19c6703a 	and	r3,r3,r7
   40fec:	1c45c83a 	sub	r2,r3,r17
   40ff0:	30800716 	blt	r6,r2,41010 <_malloc_r+0x16c>
   40ff4:	1000610e 	bge	r2,zero,4117c <_malloc_r+0x2d8>
   40ff8:	84000317 	ldw	r16,12(r16)
   40ffc:	2c000526 	beq	r5,r16,41014 <_malloc_r+0x170>
   41000:	80c00117 	ldw	r3,4(r16)
   41004:	19c6703a 	and	r3,r3,r7
   41008:	1c45c83a 	sub	r2,r3,r17
   4100c:	30bff90e 	bge	r6,r2,40ff4 <_malloc_r+0x150>
   41010:	213fffc4 	addi	r4,r4,-1
   41014:	21000044 	addi	r4,r4,1
   41018:	9c000417 	ldw	r16,16(r19)
   4101c:	00c00134 	movhi	r3,4
   41020:	18db6704 	addi	r3,r3,28060
   41024:	1a400204 	addi	r9,r3,8
   41028:	8240ff26 	beq	r16,r9,41428 <_malloc_r+0x584>
   4102c:	81400117 	ldw	r5,4(r16)
   41030:	00bfff04 	movi	r2,-4
   41034:	018003c4 	movi	r6,15
   41038:	2884703a 	and	r2,r5,r2
   4103c:	144bc83a 	sub	r5,r2,r17
   41040:	3140ea16 	blt	r6,r5,413ec <_malloc_r+0x548>
   41044:	1a400515 	stw	r9,20(r3)
   41048:	1a400415 	stw	r9,16(r3)
   4104c:	2800570e 	bge	r5,zero,411ac <_malloc_r+0x308>
   41050:	01407fc4 	movi	r5,511
   41054:	2880ca36 	bltu	r5,r2,41380 <_malloc_r+0x4dc>
   41058:	1004d0fa 	srli	r2,r2,3
   4105c:	02000044 	movi	r8,1
   41060:	19c00117 	ldw	r7,4(r3)
   41064:	108b883a 	add	r5,r2,r2
   41068:	294b883a 	add	r5,r5,r5
   4106c:	1005d0ba 	srai	r2,r2,2
   41070:	294b883a 	add	r5,r5,r5
   41074:	28cb883a 	add	r5,r5,r3
   41078:	29800217 	ldw	r6,8(r5)
   4107c:	4084983a 	sll	r2,r8,r2
   41080:	81400315 	stw	r5,12(r16)
   41084:	81800215 	stw	r6,8(r16)
   41088:	11c4b03a 	or	r2,r2,r7
   4108c:	18800115 	stw	r2,4(r3)
   41090:	2c000215 	stw	r16,8(r5)
   41094:	34000315 	stw	r16,12(r6)
   41098:	200bd0ba 	srai	r5,r4,2
   4109c:	00c00044 	movi	r3,1
   410a0:	194a983a 	sll	r5,r3,r5
   410a4:	11404936 	bltu	r2,r5,411cc <_malloc_r+0x328>
   410a8:	1146703a 	and	r3,r2,r5
   410ac:	18000a1e 	bne	r3,zero,410d8 <_malloc_r+0x234>
   410b0:	00ffff04 	movi	r3,-4
   410b4:	294b883a 	add	r5,r5,r5
   410b8:	20c8703a 	and	r4,r4,r3
   410bc:	1146703a 	and	r3,r2,r5
   410c0:	21000104 	addi	r4,r4,4
   410c4:	1800041e 	bne	r3,zero,410d8 <_malloc_r+0x234>
   410c8:	294b883a 	add	r5,r5,r5
   410cc:	1146703a 	and	r3,r2,r5
   410d0:	21000104 	addi	r4,r4,4
   410d4:	183ffc26 	beq	r3,zero,410c8 <_malloc_r+0x224>
   410d8:	023fff04 	movi	r8,-4
   410dc:	01c003c4 	movi	r7,15
   410e0:	2105883a 	add	r2,r4,r4
   410e4:	1085883a 	add	r2,r2,r2
   410e8:	1085883a 	add	r2,r2,r2
   410ec:	9899883a 	add	r12,r19,r2
   410f0:	62800304 	addi	r10,r12,12
   410f4:	2017883a 	mov	r11,r4
   410f8:	54000017 	ldw	r16,0(r10)
   410fc:	51bffd04 	addi	r6,r10,-12
   41100:	8180041e 	bne	r16,r6,41114 <_malloc_r+0x270>
   41104:	0000ca06 	br	41430 <_malloc_r+0x58c>
   41108:	10001c0e 	bge	r2,zero,4117c <_malloc_r+0x2d8>
   4110c:	84000317 	ldw	r16,12(r16)
   41110:	8180c726 	beq	r16,r6,41430 <_malloc_r+0x58c>
   41114:	80c00117 	ldw	r3,4(r16)
   41118:	1a06703a 	and	r3,r3,r8
   4111c:	1c45c83a 	sub	r2,r3,r17
   41120:	38bff90e 	bge	r7,r2,41108 <_malloc_r+0x264>
   41124:	81000317 	ldw	r4,12(r16)
   41128:	81400217 	ldw	r5,8(r16)
   4112c:	8447883a 	add	r3,r16,r17
   41130:	8c400054 	ori	r17,r17,1
   41134:	29000315 	stw	r4,12(r5)
   41138:	21400215 	stw	r5,8(r4)
   4113c:	84400115 	stw	r17,4(r16)
   41140:	1889883a 	add	r4,r3,r2
   41144:	11400054 	ori	r5,r2,1
   41148:	98c00515 	stw	r3,20(r19)
   4114c:	98c00415 	stw	r3,16(r19)
   41150:	20800015 	stw	r2,0(r4)
   41154:	1a400315 	stw	r9,12(r3)
   41158:	1a400215 	stw	r9,8(r3)
   4115c:	19400115 	stw	r5,4(r3)
   41160:	9009883a 	mov	r4,r18
   41164:	0043fa40 	call	43fa4 <__malloc_unlock>
   41168:	80800204 	addi	r2,r16,8
   4116c:	003f7b06 	br	40f5c <_malloc_r+0xb8>
   41170:	8808d0fa 	srli	r4,r17,3
   41174:	210b883a 	add	r5,r4,r4
   41178:	003f9106 	br	40fc0 <_malloc_r+0x11c>
   4117c:	80c7883a 	add	r3,r16,r3
   41180:	19400117 	ldw	r5,4(r3)
   41184:	80800317 	ldw	r2,12(r16)
   41188:	81000217 	ldw	r4,8(r16)
   4118c:	29400054 	ori	r5,r5,1
   41190:	19400115 	stw	r5,4(r3)
   41194:	20800315 	stw	r2,12(r4)
   41198:	11000215 	stw	r4,8(r2)
   4119c:	9009883a 	mov	r4,r18
   411a0:	0043fa40 	call	43fa4 <__malloc_unlock>
   411a4:	80800204 	addi	r2,r16,8
   411a8:	003f6c06 	br	40f5c <_malloc_r+0xb8>
   411ac:	8085883a 	add	r2,r16,r2
   411b0:	10c00117 	ldw	r3,4(r2)
   411b4:	9009883a 	mov	r4,r18
   411b8:	18c00054 	ori	r3,r3,1
   411bc:	10c00115 	stw	r3,4(r2)
   411c0:	0043fa40 	call	43fa4 <__malloc_unlock>
   411c4:	80800204 	addi	r2,r16,8
   411c8:	003f6406 	br	40f5c <_malloc_r+0xb8>
   411cc:	9c000217 	ldw	r16,8(r19)
   411d0:	00bfff04 	movi	r2,-4
   411d4:	85400117 	ldw	r21,4(r16)
   411d8:	a8aa703a 	and	r21,r21,r2
   411dc:	ac400336 	bltu	r21,r17,411ec <_malloc_r+0x348>
   411e0:	ac45c83a 	sub	r2,r21,r17
   411e4:	00c003c4 	movi	r3,15
   411e8:	18805316 	blt	r3,r2,41338 <_malloc_r+0x494>
   411ec:	d5e6db17 	ldw	r23,-25748(gp)
   411f0:	d0e00517 	ldw	r3,-32748(gp)
   411f4:	00bfffc4 	movi	r2,-1
   411f8:	8579883a 	add	fp,r16,r21
   411fc:	8def883a 	add	r23,r17,r23
   41200:	1880d226 	beq	r3,r2,4154c <_malloc_r+0x6a8>
   41204:	bdc403c4 	addi	r23,r23,4111
   41208:	00bc0004 	movi	r2,-4096
   4120c:	b8ae703a 	and	r23,r23,r2
   41210:	9009883a 	mov	r4,r18
   41214:	b80b883a 	mov	r5,r23
   41218:	00416c00 	call	416c0 <_sbrk_r>
   4121c:	1029883a 	mov	r20,r2
   41220:	00bfffc4 	movi	r2,-1
   41224:	a080d126 	beq	r20,r2,4156c <_malloc_r+0x6c8>
   41228:	a7009f36 	bltu	r20,fp,414a8 <_malloc_r+0x604>
   4122c:	05800174 	movhi	r22,5
   41230:	b5a8d804 	addi	r22,r22,-23712
   41234:	b0800017 	ldw	r2,0(r22)
   41238:	b885883a 	add	r2,r23,r2
   4123c:	b0800015 	stw	r2,0(r22)
   41240:	e500cf26 	beq	fp,r20,41580 <_malloc_r+0x6dc>
   41244:	d1200517 	ldw	r4,-32748(gp)
   41248:	00ffffc4 	movi	r3,-1
   4124c:	20c0e026 	beq	r4,r3,415d0 <_malloc_r+0x72c>
   41250:	a739c83a 	sub	fp,r20,fp
   41254:	1705883a 	add	r2,r2,fp
   41258:	b0800015 	stw	r2,0(r22)
   4125c:	a08001cc 	andi	r2,r20,7
   41260:	1000a526 	beq	r2,zero,414f8 <_malloc_r+0x654>
   41264:	a0a9c83a 	sub	r20,r20,r2
   41268:	00c40204 	movi	r3,4104
   4126c:	a5000204 	addi	r20,r20,8
   41270:	1885c83a 	sub	r2,r3,r2
   41274:	a5c7883a 	add	r3,r20,r23
   41278:	18c3ffcc 	andi	r3,r3,4095
   4127c:	10efc83a 	sub	r23,r2,r3
   41280:	9009883a 	mov	r4,r18
   41284:	b80b883a 	mov	r5,r23
   41288:	00416c00 	call	416c0 <_sbrk_r>
   4128c:	00ffffc4 	movi	r3,-1
   41290:	10c0cc26 	beq	r2,r3,415c4 <_malloc_r+0x720>
   41294:	1505c83a 	sub	r2,r2,r20
   41298:	b887883a 	add	r3,r23,r2
   4129c:	18c00054 	ori	r3,r3,1
   412a0:	b0800017 	ldw	r2,0(r22)
   412a4:	9d000215 	stw	r20,8(r19)
   412a8:	a0c00115 	stw	r3,4(r20)
   412ac:	b885883a 	add	r2,r23,r2
   412b0:	b0800015 	stw	r2,0(r22)
   412b4:	84c00e26 	beq	r16,r19,412f0 <_malloc_r+0x44c>
   412b8:	00c003c4 	movi	r3,15
   412bc:	1d40902e 	bgeu	r3,r21,41500 <_malloc_r+0x65c>
   412c0:	ad7ffd04 	addi	r21,r21,-12
   412c4:	013ffe04 	movi	r4,-8
   412c8:	a908703a 	and	r4,r21,r4
   412cc:	810b883a 	add	r5,r16,r4
   412d0:	01800144 	movi	r6,5
   412d4:	29800115 	stw	r6,4(r5)
   412d8:	29800215 	stw	r6,8(r5)
   412dc:	81400117 	ldw	r5,4(r16)
   412e0:	2940004c 	andi	r5,r5,1
   412e4:	214ab03a 	or	r5,r4,r5
   412e8:	81400115 	stw	r5,4(r16)
   412ec:	1900ae36 	bltu	r3,r4,415a8 <_malloc_r+0x704>
   412f0:	d0e6da17 	ldw	r3,-25752(gp)
   412f4:	1880012e 	bgeu	r3,r2,412fc <_malloc_r+0x458>
   412f8:	d0a6da15 	stw	r2,-25752(gp)
   412fc:	d0e6d917 	ldw	r3,-25756(gp)
   41300:	9c000217 	ldw	r16,8(r19)
   41304:	1880012e 	bgeu	r3,r2,4130c <_malloc_r+0x468>
   41308:	d0a6d915 	stw	r2,-25756(gp)
   4130c:	80c00117 	ldw	r3,4(r16)
   41310:	00bfff04 	movi	r2,-4
   41314:	1886703a 	and	r3,r3,r2
   41318:	1c45c83a 	sub	r2,r3,r17
   4131c:	1c400236 	bltu	r3,r17,41328 <_malloc_r+0x484>
   41320:	00c003c4 	movi	r3,15
   41324:	18800416 	blt	r3,r2,41338 <_malloc_r+0x494>
   41328:	9009883a 	mov	r4,r18
   4132c:	0043fa40 	call	43fa4 <__malloc_unlock>
   41330:	0005883a 	mov	r2,zero
   41334:	003f0906 	br	40f5c <_malloc_r+0xb8>
   41338:	88c00054 	ori	r3,r17,1
   4133c:	10800054 	ori	r2,r2,1
   41340:	80c00115 	stw	r3,4(r16)
   41344:	8463883a 	add	r17,r16,r17
   41348:	88800115 	stw	r2,4(r17)
   4134c:	9009883a 	mov	r4,r18
   41350:	9c400215 	stw	r17,8(r19)
   41354:	0043fa40 	call	43fa4 <__malloc_unlock>
   41358:	80800204 	addi	r2,r16,8
   4135c:	003eff06 	br	40f5c <_malloc_r+0xb8>
   41360:	00800504 	movi	r2,20
   41364:	1100492e 	bgeu	r2,r4,4148c <_malloc_r+0x5e8>
   41368:	00801504 	movi	r2,84
   4136c:	11005c36 	bltu	r2,r4,414e0 <_malloc_r+0x63c>
   41370:	8808d33a 	srli	r4,r17,12
   41374:	21001b84 	addi	r4,r4,110
   41378:	210b883a 	add	r5,r4,r4
   4137c:	003f1006 	br	40fc0 <_malloc_r+0x11c>
   41380:	1006d27a 	srli	r3,r2,9
   41384:	01400104 	movi	r5,4
   41388:	28c0432e 	bgeu	r5,r3,41498 <_malloc_r+0x5f4>
   4138c:	01400504 	movi	r5,20
   41390:	28c07036 	bltu	r5,r3,41554 <_malloc_r+0x6b0>
   41394:	194016c4 	addi	r5,r3,91
   41398:	294d883a 	add	r6,r5,r5
   4139c:	318d883a 	add	r6,r6,r6
   413a0:	318d883a 	add	r6,r6,r6
   413a4:	998d883a 	add	r6,r19,r6
   413a8:	30c00217 	ldw	r3,8(r6)
   413ac:	01c00134 	movhi	r7,4
   413b0:	39db6704 	addi	r7,r7,28060
   413b4:	19805726 	beq	r3,r6,41514 <_malloc_r+0x670>
   413b8:	01ffff04 	movi	r7,-4
   413bc:	19400117 	ldw	r5,4(r3)
   413c0:	29ca703a 	and	r5,r5,r7
   413c4:	1140022e 	bgeu	r2,r5,413d0 <_malloc_r+0x52c>
   413c8:	18c00217 	ldw	r3,8(r3)
   413cc:	30fffb1e 	bne	r6,r3,413bc <_malloc_r+0x518>
   413d0:	19400317 	ldw	r5,12(r3)
   413d4:	98800117 	ldw	r2,4(r19)
   413d8:	81400315 	stw	r5,12(r16)
   413dc:	80c00215 	stw	r3,8(r16)
   413e0:	2c000215 	stw	r16,8(r5)
   413e4:	1c000315 	stw	r16,12(r3)
   413e8:	003f2b06 	br	41098 <_malloc_r+0x1f4>
   413ec:	8445883a 	add	r2,r16,r17
   413f0:	8c400054 	ori	r17,r17,1
   413f4:	18800515 	stw	r2,20(r3)
   413f8:	18800415 	stw	r2,16(r3)
   413fc:	29000054 	ori	r4,r5,1
   41400:	1147883a 	add	r3,r2,r5
   41404:	84400115 	stw	r17,4(r16)
   41408:	11000115 	stw	r4,4(r2)
   4140c:	12400315 	stw	r9,12(r2)
   41410:	12400215 	stw	r9,8(r2)
   41414:	19400015 	stw	r5,0(r3)
   41418:	9009883a 	mov	r4,r18
   4141c:	0043fa40 	call	43fa4 <__malloc_unlock>
   41420:	80800204 	addi	r2,r16,8
   41424:	003ecd06 	br	40f5c <_malloc_r+0xb8>
   41428:	18800117 	ldw	r2,4(r3)
   4142c:	003f1a06 	br	41098 <_malloc_r+0x1f4>
   41430:	5ac00044 	addi	r11,r11,1
   41434:	588000cc 	andi	r2,r11,3
   41438:	52800204 	addi	r10,r10,8
   4143c:	103f2e1e 	bne	r2,zero,410f8 <_malloc_r+0x254>
   41440:	20c000cc 	andi	r3,r4,3
   41444:	60bffe04 	addi	r2,r12,-8
   41448:	18006f26 	beq	r3,zero,41608 <_malloc_r+0x764>
   4144c:	63000017 	ldw	r12,0(r12)
   41450:	213fffc4 	addi	r4,r4,-1
   41454:	60bffa26 	beq	r12,r2,41440 <_malloc_r+0x59c>
   41458:	98800117 	ldw	r2,4(r19)
   4145c:	294b883a 	add	r5,r5,r5
   41460:	117f5a36 	bltu	r2,r5,411cc <_malloc_r+0x328>
   41464:	283f5926 	beq	r5,zero,411cc <_malloc_r+0x328>
   41468:	1146703a 	and	r3,r2,r5
   4146c:	18001626 	beq	r3,zero,414c8 <_malloc_r+0x624>
   41470:	5809883a 	mov	r4,r11
   41474:	003f1a06 	br	410e0 <_malloc_r+0x23c>
   41478:	80800204 	addi	r2,r16,8
   4147c:	84000517 	ldw	r16,20(r16)
   41480:	143ea81e 	bne	r2,r16,40f24 <_malloc_r+0x80>
   41484:	21000084 	addi	r4,r4,2
   41488:	003ee306 	br	41018 <_malloc_r+0x174>
   4148c:	210016c4 	addi	r4,r4,91
   41490:	210b883a 	add	r5,r4,r4
   41494:	003eca06 	br	40fc0 <_malloc_r+0x11c>
   41498:	100ad1ba 	srli	r5,r2,6
   4149c:	29400e04 	addi	r5,r5,56
   414a0:	294d883a 	add	r6,r5,r5
   414a4:	003fbd06 	br	4139c <_malloc_r+0x4f8>
   414a8:	84ff6026 	beq	r16,r19,4122c <_malloc_r+0x388>
   414ac:	00800134 	movhi	r2,4
   414b0:	109b6704 	addi	r2,r2,28060
   414b4:	14000217 	ldw	r16,8(r2)
   414b8:	00bfff04 	movi	r2,-4
   414bc:	80c00117 	ldw	r3,4(r16)
   414c0:	1886703a 	and	r3,r3,r2
   414c4:	003f9406 	br	41318 <_malloc_r+0x474>
   414c8:	294b883a 	add	r5,r5,r5
   414cc:	1146703a 	and	r3,r2,r5
   414d0:	5ac00104 	addi	r11,r11,4
   414d4:	183ffc26 	beq	r3,zero,414c8 <_malloc_r+0x624>
   414d8:	5809883a 	mov	r4,r11
   414dc:	003f0006 	br	410e0 <_malloc_r+0x23c>
   414e0:	00805504 	movi	r2,340
   414e4:	11001336 	bltu	r2,r4,41534 <_malloc_r+0x690>
   414e8:	8808d3fa 	srli	r4,r17,15
   414ec:	21001dc4 	addi	r4,r4,119
   414f0:	210b883a 	add	r5,r4,r4
   414f4:	003eb206 	br	40fc0 <_malloc_r+0x11c>
   414f8:	00840004 	movi	r2,4096
   414fc:	003f5d06 	br	41274 <_malloc_r+0x3d0>
   41500:	00800044 	movi	r2,1
   41504:	a0800115 	stw	r2,4(r20)
   41508:	a021883a 	mov	r16,r20
   4150c:	0007883a 	mov	r3,zero
   41510:	003f8106 	br	41318 <_malloc_r+0x474>
   41514:	280bd0ba 	srai	r5,r5,2
   41518:	01800044 	movi	r6,1
   4151c:	38800117 	ldw	r2,4(r7)
   41520:	314c983a 	sll	r6,r6,r5
   41524:	180b883a 	mov	r5,r3
   41528:	3084b03a 	or	r2,r6,r2
   4152c:	38800115 	stw	r2,4(r7)
   41530:	003fa906 	br	413d8 <_malloc_r+0x534>
   41534:	00815504 	movi	r2,1364
   41538:	11001836 	bltu	r2,r4,4159c <_malloc_r+0x6f8>
   4153c:	8808d4ba 	srli	r4,r17,18
   41540:	21001f04 	addi	r4,r4,124
   41544:	210b883a 	add	r5,r4,r4
   41548:	003e9d06 	br	40fc0 <_malloc_r+0x11c>
   4154c:	bdc00404 	addi	r23,r23,16
   41550:	003f2f06 	br	41210 <_malloc_r+0x36c>
   41554:	01401504 	movi	r5,84
   41558:	28c01f36 	bltu	r5,r3,415d8 <_malloc_r+0x734>
   4155c:	100ad33a 	srli	r5,r2,12
   41560:	29401b84 	addi	r5,r5,110
   41564:	294d883a 	add	r6,r5,r5
   41568:	003f8c06 	br	4139c <_malloc_r+0x4f8>
   4156c:	9c000217 	ldw	r16,8(r19)
   41570:	00bfff04 	movi	r2,-4
   41574:	80c00117 	ldw	r3,4(r16)
   41578:	1886703a 	and	r3,r3,r2
   4157c:	003f6606 	br	41318 <_malloc_r+0x474>
   41580:	e0c3ffcc 	andi	r3,fp,4095
   41584:	183f2f1e 	bne	r3,zero,41244 <_malloc_r+0x3a0>
   41588:	98c00217 	ldw	r3,8(r19)
   4158c:	bd49883a 	add	r4,r23,r21
   41590:	21000054 	ori	r4,r4,1
   41594:	19000115 	stw	r4,4(r3)
   41598:	003f5506 	br	412f0 <_malloc_r+0x44c>
   4159c:	01403f04 	movi	r5,252
   415a0:	01001f84 	movi	r4,126
   415a4:	003e8606 	br	40fc0 <_malloc_r+0x11c>
   415a8:	9009883a 	mov	r4,r18
   415ac:	81400204 	addi	r5,r16,8
   415b0:	00418ec0 	call	418ec <_free_r>
   415b4:	00800174 	movhi	r2,5
   415b8:	10a8d804 	addi	r2,r2,-23712
   415bc:	10800017 	ldw	r2,0(r2)
   415c0:	003f4b06 	br	412f0 <_malloc_r+0x44c>
   415c4:	00c00044 	movi	r3,1
   415c8:	002f883a 	mov	r23,zero
   415cc:	003f3406 	br	412a0 <_malloc_r+0x3fc>
   415d0:	d5200515 	stw	r20,-32748(gp)
   415d4:	003f2106 	br	4125c <_malloc_r+0x3b8>
   415d8:	01405504 	movi	r5,340
   415dc:	28c00436 	bltu	r5,r3,415f0 <_malloc_r+0x74c>
   415e0:	100ad3fa 	srli	r5,r2,15
   415e4:	29401dc4 	addi	r5,r5,119
   415e8:	294d883a 	add	r6,r5,r5
   415ec:	003f6b06 	br	4139c <_malloc_r+0x4f8>
   415f0:	01415504 	movi	r5,1364
   415f4:	28c00936 	bltu	r5,r3,4161c <_malloc_r+0x778>
   415f8:	100ad4ba 	srli	r5,r2,18
   415fc:	29401f04 	addi	r5,r5,124
   41600:	294d883a 	add	r6,r5,r5
   41604:	003f6506 	br	4139c <_malloc_r+0x4f8>
   41608:	98800117 	ldw	r2,4(r19)
   4160c:	0146303a 	nor	r3,zero,r5
   41610:	1884703a 	and	r2,r3,r2
   41614:	98800115 	stw	r2,4(r19)
   41618:	003f9006 	br	4145c <_malloc_r+0x5b8>
   4161c:	01803f04 	movi	r6,252
   41620:	01401f84 	movi	r5,126
   41624:	003f5d06 	br	4139c <_malloc_r+0x4f8>

00041628 <_puts_r>:
   41628:	defff604 	addi	sp,sp,-40
   4162c:	dc400815 	stw	r17,32(sp)
   41630:	2023883a 	mov	r17,r4
   41634:	2809883a 	mov	r4,r5
   41638:	dc000715 	stw	r16,28(sp)
   4163c:	dfc00915 	stw	ra,36(sp)
   41640:	2821883a 	mov	r16,r5
   41644:	00417240 	call	41724 <strlen>
   41648:	10c00044 	addi	r3,r2,1
   4164c:	d8800115 	stw	r2,4(sp)
   41650:	89400217 	ldw	r5,8(r17)
   41654:	00800134 	movhi	r2,4
   41658:	109b5704 	addi	r2,r2,27996
   4165c:	d8800215 	stw	r2,8(sp)
   41660:	00800044 	movi	r2,1
   41664:	d8800315 	stw	r2,12(sp)
   41668:	8809883a 	mov	r4,r17
   4166c:	00800084 	movi	r2,2
   41670:	d9800404 	addi	r6,sp,16
   41674:	dc000015 	stw	r16,0(sp)
   41678:	d8c00615 	stw	r3,24(sp)
   4167c:	dec00415 	stw	sp,16(sp)
   41680:	d8800515 	stw	r2,20(sp)
   41684:	0041bbc0 	call	41bbc <__sfvwrite_r>
   41688:	1000061e 	bne	r2,zero,416a4 <_puts_r+0x7c>
   4168c:	00800284 	movi	r2,10
   41690:	dfc00917 	ldw	ra,36(sp)
   41694:	dc400817 	ldw	r17,32(sp)
   41698:	dc000717 	ldw	r16,28(sp)
   4169c:	dec00a04 	addi	sp,sp,40
   416a0:	f800283a 	ret
   416a4:	00bfffc4 	movi	r2,-1
   416a8:	003ff906 	br	41690 <_puts_r+0x68>

000416ac <puts>:
   416ac:	00800174 	movhi	r2,5
   416b0:	10a1fd04 	addi	r2,r2,-30732
   416b4:	200b883a 	mov	r5,r4
   416b8:	11000017 	ldw	r4,0(r2)
   416bc:	00416281 	jmpi	41628 <_puts_r>

000416c0 <_sbrk_r>:
   416c0:	defffd04 	addi	sp,sp,-12
   416c4:	dc400115 	stw	r17,4(sp)
   416c8:	dc000015 	stw	r16,0(sp)
   416cc:	2023883a 	mov	r17,r4
   416d0:	04000174 	movhi	r16,5
   416d4:	8428d104 	addi	r16,r16,-23740
   416d8:	2809883a 	mov	r4,r5
   416dc:	dfc00215 	stw	ra,8(sp)
   416e0:	80000015 	stw	zero,0(r16)
   416e4:	00441880 	call	44188 <sbrk>
   416e8:	00ffffc4 	movi	r3,-1
   416ec:	10c00526 	beq	r2,r3,41704 <_sbrk_r+0x44>
   416f0:	dfc00217 	ldw	ra,8(sp)
   416f4:	dc400117 	ldw	r17,4(sp)
   416f8:	dc000017 	ldw	r16,0(sp)
   416fc:	dec00304 	addi	sp,sp,12
   41700:	f800283a 	ret
   41704:	80c00017 	ldw	r3,0(r16)
   41708:	183ff926 	beq	r3,zero,416f0 <_sbrk_r+0x30>
   4170c:	88c00015 	stw	r3,0(r17)
   41710:	dfc00217 	ldw	ra,8(sp)
   41714:	dc400117 	ldw	r17,4(sp)
   41718:	dc000017 	ldw	r16,0(sp)
   4171c:	dec00304 	addi	sp,sp,12
   41720:	f800283a 	ret

00041724 <strlen>:
   41724:	208000cc 	andi	r2,r4,3
   41728:	10001f1e 	bne	r2,zero,417a8 <strlen+0x84>
   4172c:	20800017 	ldw	r2,0(r4)
   41730:	01ffbff4 	movhi	r7,65279
   41734:	39ffbfc4 	addi	r7,r7,-257
   41738:	01a02074 	movhi	r6,32897
   4173c:	31a02004 	addi	r6,r6,-32640
   41740:	11c7883a 	add	r3,r2,r7
   41744:	0084303a 	nor	r2,zero,r2
   41748:	1886703a 	and	r3,r3,r2
   4174c:	1986703a 	and	r3,r3,r6
   41750:	2005883a 	mov	r2,r4
   41754:	1800101e 	bne	r3,zero,41798 <strlen+0x74>
   41758:	10800104 	addi	r2,r2,4
   4175c:	10c00017 	ldw	r3,0(r2)
   41760:	19cb883a 	add	r5,r3,r7
   41764:	00c6303a 	nor	r3,zero,r3
   41768:	28c6703a 	and	r3,r5,r3
   4176c:	1986703a 	and	r3,r3,r6
   41770:	1800091e 	bne	r3,zero,41798 <strlen+0x74>
   41774:	10800104 	addi	r2,r2,4
   41778:	10c00017 	ldw	r3,0(r2)
   4177c:	19cb883a 	add	r5,r3,r7
   41780:	00c6303a 	nor	r3,zero,r3
   41784:	28c6703a 	and	r3,r5,r3
   41788:	1986703a 	and	r3,r3,r6
   4178c:	183ff226 	beq	r3,zero,41758 <strlen+0x34>
   41790:	00000106 	br	41798 <strlen+0x74>
   41794:	10800044 	addi	r2,r2,1
   41798:	10c00007 	ldb	r3,0(r2)
   4179c:	183ffd1e 	bne	r3,zero,41794 <strlen+0x70>
   417a0:	1105c83a 	sub	r2,r2,r4
   417a4:	f800283a 	ret
   417a8:	2005883a 	mov	r2,r4
   417ac:	003ffa06 	br	41798 <strlen+0x74>

000417b0 <_malloc_trim_r>:
   417b0:	defffb04 	addi	sp,sp,-20
   417b4:	dcc00315 	stw	r19,12(sp)
   417b8:	dc800215 	stw	r18,8(sp)
   417bc:	dc400115 	stw	r17,4(sp)
   417c0:	dc000015 	stw	r16,0(sp)
   417c4:	2827883a 	mov	r19,r5
   417c8:	dfc00415 	stw	ra,16(sp)
   417cc:	04400134 	movhi	r17,4
   417d0:	8c5b6704 	addi	r17,r17,28060
   417d4:	2021883a 	mov	r16,r4
   417d8:	0043f840 	call	43f84 <__malloc_lock>
   417dc:	88800217 	ldw	r2,8(r17)
   417e0:	14800117 	ldw	r18,4(r2)
   417e4:	00bfff04 	movi	r2,-4
   417e8:	90a4703a 	and	r18,r18,r2
   417ec:	9083fbc4 	addi	r2,r18,4079
   417f0:	14e7c83a 	sub	r19,r2,r19
   417f4:	9826d33a 	srli	r19,r19,12
   417f8:	0083ffc4 	movi	r2,4095
   417fc:	9cffffc4 	addi	r19,r19,-1
   41800:	9826933a 	slli	r19,r19,12
   41804:	14c0060e 	bge	r2,r19,41820 <_malloc_trim_r+0x70>
   41808:	8009883a 	mov	r4,r16
   4180c:	000b883a 	mov	r5,zero
   41810:	00416c00 	call	416c0 <_sbrk_r>
   41814:	88c00217 	ldw	r3,8(r17)
   41818:	1c87883a 	add	r3,r3,r18
   4181c:	10c00a26 	beq	r2,r3,41848 <_malloc_trim_r+0x98>
   41820:	8009883a 	mov	r4,r16
   41824:	0043fa40 	call	43fa4 <__malloc_unlock>
   41828:	0005883a 	mov	r2,zero
   4182c:	dfc00417 	ldw	ra,16(sp)
   41830:	dcc00317 	ldw	r19,12(sp)
   41834:	dc800217 	ldw	r18,8(sp)
   41838:	dc400117 	ldw	r17,4(sp)
   4183c:	dc000017 	ldw	r16,0(sp)
   41840:	dec00504 	addi	sp,sp,20
   41844:	f800283a 	ret
   41848:	8009883a 	mov	r4,r16
   4184c:	04cbc83a 	sub	r5,zero,r19
   41850:	00416c00 	call	416c0 <_sbrk_r>
   41854:	00ffffc4 	movi	r3,-1
   41858:	10c01326 	beq	r2,r3,418a8 <_malloc_trim_r+0xf8>
   4185c:	00800174 	movhi	r2,5
   41860:	10a8d804 	addi	r2,r2,-23712
   41864:	11000017 	ldw	r4,0(r2)
   41868:	88c00217 	ldw	r3,8(r17)
   4186c:	94e5c83a 	sub	r18,r18,r19
   41870:	94800054 	ori	r18,r18,1
   41874:	24e7c83a 	sub	r19,r4,r19
   41878:	1c800115 	stw	r18,4(r3)
   4187c:	8009883a 	mov	r4,r16
   41880:	14c00015 	stw	r19,0(r2)
   41884:	0043fa40 	call	43fa4 <__malloc_unlock>
   41888:	00800044 	movi	r2,1
   4188c:	dfc00417 	ldw	ra,16(sp)
   41890:	dcc00317 	ldw	r19,12(sp)
   41894:	dc800217 	ldw	r18,8(sp)
   41898:	dc400117 	ldw	r17,4(sp)
   4189c:	dc000017 	ldw	r16,0(sp)
   418a0:	dec00504 	addi	sp,sp,20
   418a4:	f800283a 	ret
   418a8:	8009883a 	mov	r4,r16
   418ac:	000b883a 	mov	r5,zero
   418b0:	00416c00 	call	416c0 <_sbrk_r>
   418b4:	88c00217 	ldw	r3,8(r17)
   418b8:	014003c4 	movi	r5,15
   418bc:	10c9c83a 	sub	r4,r2,r3
   418c0:	293fd70e 	bge	r5,r4,41820 <_malloc_trim_r+0x70>
   418c4:	01400174 	movhi	r5,5
   418c8:	2961fa04 	addi	r5,r5,-30744
   418cc:	29400017 	ldw	r5,0(r5)
   418d0:	21000054 	ori	r4,r4,1
   418d4:	19000115 	stw	r4,4(r3)
   418d8:	1145c83a 	sub	r2,r2,r5
   418dc:	01400174 	movhi	r5,5
   418e0:	2968d804 	addi	r5,r5,-23712
   418e4:	28800015 	stw	r2,0(r5)
   418e8:	003fcd06 	br	41820 <_malloc_trim_r+0x70>

000418ec <_free_r>:
   418ec:	defffd04 	addi	sp,sp,-12
   418f0:	dc400115 	stw	r17,4(sp)
   418f4:	dc000015 	stw	r16,0(sp)
   418f8:	dfc00215 	stw	ra,8(sp)
   418fc:	2821883a 	mov	r16,r5
   41900:	2023883a 	mov	r17,r4
   41904:	28004b26 	beq	r5,zero,41a34 <_free_r+0x148>
   41908:	0043f840 	call	43f84 <__malloc_lock>
   4190c:	823fff17 	ldw	r8,-4(r16)
   41910:	00bfff84 	movi	r2,-2
   41914:	81bffe04 	addi	r6,r16,-8
   41918:	4084703a 	and	r2,r8,r2
   4191c:	3087883a 	add	r3,r6,r2
   41920:	01400134 	movhi	r5,4
   41924:	295b6704 	addi	r5,r5,28060
   41928:	1a400117 	ldw	r9,4(r3)
   4192c:	29000217 	ldw	r4,8(r5)
   41930:	01ffff04 	movi	r7,-4
   41934:	49ce703a 	and	r7,r9,r7
   41938:	20c06526 	beq	r4,r3,41ad0 <_free_r+0x1e4>
   4193c:	19c00115 	stw	r7,4(r3)
   41940:	4200004c 	andi	r8,r8,1
   41944:	40003026 	beq	r8,zero,41a08 <_free_r+0x11c>
   41948:	0009883a 	mov	r4,zero
   4194c:	19d1883a 	add	r8,r3,r7
   41950:	42000117 	ldw	r8,4(r8)
   41954:	4200004c 	andi	r8,r8,1
   41958:	4000061e 	bne	r8,zero,41974 <_free_r+0x88>
   4195c:	11c5883a 	add	r2,r2,r7
   41960:	19c00217 	ldw	r7,8(r3)
   41964:	20004e26 	beq	r4,zero,41aa0 <_free_r+0x1b4>
   41968:	18c00317 	ldw	r3,12(r3)
   4196c:	38c00315 	stw	r3,12(r7)
   41970:	19c00215 	stw	r7,8(r3)
   41974:	11c00054 	ori	r7,r2,1
   41978:	3087883a 	add	r3,r6,r2
   4197c:	31c00115 	stw	r7,4(r6)
   41980:	18800015 	stw	r2,0(r3)
   41984:	20001a1e 	bne	r4,zero,419f0 <_free_r+0x104>
   41988:	00c07fc4 	movi	r3,511
   4198c:	18802e2e 	bgeu	r3,r2,41a48 <_free_r+0x15c>
   41990:	1006d27a 	srli	r3,r2,9
   41994:	01000104 	movi	r4,4
   41998:	20c06636 	bltu	r4,r3,41b34 <_free_r+0x248>
   4199c:	1008d1ba 	srli	r4,r2,6
   419a0:	21000e04 	addi	r4,r4,56
   419a4:	210f883a 	add	r7,r4,r4
   419a8:	39cf883a 	add	r7,r7,r7
   419ac:	39cf883a 	add	r7,r7,r7
   419b0:	29cf883a 	add	r7,r5,r7
   419b4:	38c00217 	ldw	r3,8(r7)
   419b8:	01400134 	movhi	r5,4
   419bc:	295b6704 	addi	r5,r5,28060
   419c0:	19c06126 	beq	r3,r7,41b48 <_free_r+0x25c>
   419c4:	013fff04 	movi	r4,-4
   419c8:	19400117 	ldw	r5,4(r3)
   419cc:	290a703a 	and	r5,r5,r4
   419d0:	1140022e 	bgeu	r2,r5,419dc <_free_r+0xf0>
   419d4:	18c00217 	ldw	r3,8(r3)
   419d8:	38fffb1e 	bne	r7,r3,419c8 <_free_r+0xdc>
   419dc:	18800317 	ldw	r2,12(r3)
   419e0:	30800315 	stw	r2,12(r6)
   419e4:	30c00215 	stw	r3,8(r6)
   419e8:	11800215 	stw	r6,8(r2)
   419ec:	19800315 	stw	r6,12(r3)
   419f0:	8809883a 	mov	r4,r17
   419f4:	dfc00217 	ldw	ra,8(sp)
   419f8:	dc400117 	ldw	r17,4(sp)
   419fc:	dc000017 	ldw	r16,0(sp)
   41a00:	dec00304 	addi	sp,sp,12
   41a04:	0043fa41 	jmpi	43fa4 <__malloc_unlock>
   41a08:	813ffe17 	ldw	r4,-8(r16)
   41a0c:	2a400204 	addi	r9,r5,8
   41a10:	310dc83a 	sub	r6,r6,r4
   41a14:	32000217 	ldw	r8,8(r6)
   41a18:	1105883a 	add	r2,r2,r4
   41a1c:	42404326 	beq	r8,r9,41b2c <_free_r+0x240>
   41a20:	32400317 	ldw	r9,12(r6)
   41a24:	0009883a 	mov	r4,zero
   41a28:	42400315 	stw	r9,12(r8)
   41a2c:	4a000215 	stw	r8,8(r9)
   41a30:	003fc606 	br	4194c <_free_r+0x60>
   41a34:	dfc00217 	ldw	ra,8(sp)
   41a38:	dc400117 	ldw	r17,4(sp)
   41a3c:	dc000017 	ldw	r16,0(sp)
   41a40:	dec00304 	addi	sp,sp,12
   41a44:	f800283a 	ret
   41a48:	1004d0fa 	srli	r2,r2,3
   41a4c:	02000044 	movi	r8,1
   41a50:	29c00117 	ldw	r7,4(r5)
   41a54:	1087883a 	add	r3,r2,r2
   41a58:	18c7883a 	add	r3,r3,r3
   41a5c:	1005d0ba 	srai	r2,r2,2
   41a60:	18c7883a 	add	r3,r3,r3
   41a64:	28c7883a 	add	r3,r5,r3
   41a68:	19000217 	ldw	r4,8(r3)
   41a6c:	4084983a 	sll	r2,r8,r2
   41a70:	30c00315 	stw	r3,12(r6)
   41a74:	31000215 	stw	r4,8(r6)
   41a78:	11c4b03a 	or	r2,r2,r7
   41a7c:	21800315 	stw	r6,12(r4)
   41a80:	8809883a 	mov	r4,r17
   41a84:	28800115 	stw	r2,4(r5)
   41a88:	19800215 	stw	r6,8(r3)
   41a8c:	dfc00217 	ldw	ra,8(sp)
   41a90:	dc400117 	ldw	r17,4(sp)
   41a94:	dc000017 	ldw	r16,0(sp)
   41a98:	dec00304 	addi	sp,sp,12
   41a9c:	0043fa41 	jmpi	43fa4 <__malloc_unlock>
   41aa0:	02000134 	movhi	r8,4
   41aa4:	421b6904 	addi	r8,r8,28068
   41aa8:	3a3faf1e 	bne	r7,r8,41968 <_free_r+0x7c>
   41aac:	29800515 	stw	r6,20(r5)
   41ab0:	29800415 	stw	r6,16(r5)
   41ab4:	11000054 	ori	r4,r2,1
   41ab8:	3087883a 	add	r3,r6,r2
   41abc:	31c00315 	stw	r7,12(r6)
   41ac0:	31c00215 	stw	r7,8(r6)
   41ac4:	31000115 	stw	r4,4(r6)
   41ac8:	18800015 	stw	r2,0(r3)
   41acc:	003fc806 	br	419f0 <_free_r+0x104>
   41ad0:	4200004c 	andi	r8,r8,1
   41ad4:	3885883a 	add	r2,r7,r2
   41ad8:	4000071e 	bne	r8,zero,41af8 <_free_r+0x20c>
   41adc:	81fffe17 	ldw	r7,-8(r16)
   41ae0:	31cdc83a 	sub	r6,r6,r7
   41ae4:	30c00317 	ldw	r3,12(r6)
   41ae8:	31000217 	ldw	r4,8(r6)
   41aec:	11c5883a 	add	r2,r2,r7
   41af0:	20c00315 	stw	r3,12(r4)
   41af4:	19000215 	stw	r4,8(r3)
   41af8:	00c00174 	movhi	r3,5
   41afc:	18e1fb04 	addi	r3,r3,-30740
   41b00:	18c00017 	ldw	r3,0(r3)
   41b04:	11000054 	ori	r4,r2,1
   41b08:	31000115 	stw	r4,4(r6)
   41b0c:	29800215 	stw	r6,8(r5)
   41b10:	10ffb736 	bltu	r2,r3,419f0 <_free_r+0x104>
   41b14:	00800174 	movhi	r2,5
   41b18:	10a8d004 	addi	r2,r2,-23744
   41b1c:	11400017 	ldw	r5,0(r2)
   41b20:	8809883a 	mov	r4,r17
   41b24:	00417b00 	call	417b0 <_malloc_trim_r>
   41b28:	003fb106 	br	419f0 <_free_r+0x104>
   41b2c:	01000044 	movi	r4,1
   41b30:	003f8606 	br	4194c <_free_r+0x60>
   41b34:	01000504 	movi	r4,20
   41b38:	20c00b36 	bltu	r4,r3,41b68 <_free_r+0x27c>
   41b3c:	190016c4 	addi	r4,r3,91
   41b40:	210f883a 	add	r7,r4,r4
   41b44:	003f9806 	br	419a8 <_free_r+0xbc>
   41b48:	2009d0ba 	srai	r4,r4,2
   41b4c:	00800044 	movi	r2,1
   41b50:	29c00117 	ldw	r7,4(r5)
   41b54:	1108983a 	sll	r4,r2,r4
   41b58:	1805883a 	mov	r2,r3
   41b5c:	21c8b03a 	or	r4,r4,r7
   41b60:	29000115 	stw	r4,4(r5)
   41b64:	003f9e06 	br	419e0 <_free_r+0xf4>
   41b68:	01001504 	movi	r4,84
   41b6c:	20c00436 	bltu	r4,r3,41b80 <_free_r+0x294>
   41b70:	1008d33a 	srli	r4,r2,12
   41b74:	21001b84 	addi	r4,r4,110
   41b78:	210f883a 	add	r7,r4,r4
   41b7c:	003f8a06 	br	419a8 <_free_r+0xbc>
   41b80:	01005504 	movi	r4,340
   41b84:	20c00436 	bltu	r4,r3,41b98 <_free_r+0x2ac>
   41b88:	1008d3fa 	srli	r4,r2,15
   41b8c:	21001dc4 	addi	r4,r4,119
   41b90:	210f883a 	add	r7,r4,r4
   41b94:	003f8406 	br	419a8 <_free_r+0xbc>
   41b98:	01015504 	movi	r4,1364
   41b9c:	20c00436 	bltu	r4,r3,41bb0 <_free_r+0x2c4>
   41ba0:	1008d4ba 	srli	r4,r2,18
   41ba4:	21001f04 	addi	r4,r4,124
   41ba8:	210f883a 	add	r7,r4,r4
   41bac:	003f7e06 	br	419a8 <_free_r+0xbc>
   41bb0:	01c03f04 	movi	r7,252
   41bb4:	01001f84 	movi	r4,126
   41bb8:	003f7b06 	br	419a8 <_free_r+0xbc>

00041bbc <__sfvwrite_r>:
   41bbc:	30800217 	ldw	r2,8(r6)
   41bc0:	defff504 	addi	sp,sp,-44
   41bc4:	dd400615 	stw	r21,24(sp)
   41bc8:	dd000515 	stw	r20,20(sp)
   41bcc:	dc000115 	stw	r16,4(sp)
   41bd0:	dfc00a15 	stw	ra,40(sp)
   41bd4:	df000915 	stw	fp,36(sp)
   41bd8:	ddc00815 	stw	r23,32(sp)
   41bdc:	dd800715 	stw	r22,28(sp)
   41be0:	dcc00415 	stw	r19,16(sp)
   41be4:	dc800315 	stw	r18,12(sp)
   41be8:	dc400215 	stw	r17,8(sp)
   41bec:	3029883a 	mov	r20,r6
   41bf0:	202b883a 	mov	r21,r4
   41bf4:	2821883a 	mov	r16,r5
   41bf8:	10002126 	beq	r2,zero,41c80 <__sfvwrite_r+0xc4>
   41bfc:	2880030b 	ldhu	r2,12(r5)
   41c00:	10c0020c 	andi	r3,r2,8
   41c04:	18ffffcc 	andi	r3,r3,65535
   41c08:	18e0001c 	xori	r3,r3,32768
   41c0c:	18e00004 	addi	r3,r3,-32768
   41c10:	18002826 	beq	r3,zero,41cb4 <__sfvwrite_r+0xf8>
   41c14:	28c00417 	ldw	r3,16(r5)
   41c18:	18002626 	beq	r3,zero,41cb4 <__sfvwrite_r+0xf8>
   41c1c:	10c0008c 	andi	r3,r2,2
   41c20:	18ffffcc 	andi	r3,r3,65535
   41c24:	18e0001c 	xori	r3,r3,32768
   41c28:	18e00004 	addi	r3,r3,-32768
   41c2c:	a4400017 	ldw	r17,0(r20)
   41c30:	18002b26 	beq	r3,zero,41ce0 <__sfvwrite_r+0x124>
   41c34:	0027883a 	mov	r19,zero
   41c38:	0025883a 	mov	r18,zero
   41c3c:	05810004 	movi	r22,1024
   41c40:	980d883a 	mov	r6,r19
   41c44:	a809883a 	mov	r4,r21
   41c48:	90004f26 	beq	r18,zero,41d88 <__sfvwrite_r+0x1cc>
   41c4c:	900f883a 	mov	r7,r18
   41c50:	81400717 	ldw	r5,28(r16)
   41c54:	b480012e 	bgeu	r22,r18,41c5c <__sfvwrite_r+0xa0>
   41c58:	01c10004 	movi	r7,1024
   41c5c:	80800917 	ldw	r2,36(r16)
   41c60:	103ee83a 	callr	r2
   41c64:	0080540e 	bge	zero,r2,41db8 <__sfvwrite_r+0x1fc>
   41c68:	a0c00217 	ldw	r3,8(r20)
   41c6c:	98a7883a 	add	r19,r19,r2
   41c70:	90a5c83a 	sub	r18,r18,r2
   41c74:	1885c83a 	sub	r2,r3,r2
   41c78:	a0800215 	stw	r2,8(r20)
   41c7c:	103ff01e 	bne	r2,zero,41c40 <__sfvwrite_r+0x84>
   41c80:	0005883a 	mov	r2,zero
   41c84:	dfc00a17 	ldw	ra,40(sp)
   41c88:	df000917 	ldw	fp,36(sp)
   41c8c:	ddc00817 	ldw	r23,32(sp)
   41c90:	dd800717 	ldw	r22,28(sp)
   41c94:	dd400617 	ldw	r21,24(sp)
   41c98:	dd000517 	ldw	r20,20(sp)
   41c9c:	dcc00417 	ldw	r19,16(sp)
   41ca0:	dc800317 	ldw	r18,12(sp)
   41ca4:	dc400217 	ldw	r17,8(sp)
   41ca8:	dc000117 	ldw	r16,4(sp)
   41cac:	dec00b04 	addi	sp,sp,44
   41cb0:	f800283a 	ret
   41cb4:	a809883a 	mov	r4,r21
   41cb8:	800b883a 	mov	r5,r16
   41cbc:	0042a600 	call	42a60 <__swsetup_r>
   41cc0:	1000f01e 	bne	r2,zero,42084 <__sfvwrite_r+0x4c8>
   41cc4:	8080030b 	ldhu	r2,12(r16)
   41cc8:	a4400017 	ldw	r17,0(r20)
   41ccc:	10c0008c 	andi	r3,r2,2
   41cd0:	18ffffcc 	andi	r3,r3,65535
   41cd4:	18e0001c 	xori	r3,r3,32768
   41cd8:	18e00004 	addi	r3,r3,-32768
   41cdc:	183fd51e 	bne	r3,zero,41c34 <__sfvwrite_r+0x78>
   41ce0:	10c0004c 	andi	r3,r2,1
   41ce4:	002d883a 	mov	r22,zero
   41ce8:	1800381e 	bne	r3,zero,41dcc <__sfvwrite_r+0x210>
   41cec:	0025883a 	mov	r18,zero
   41cf0:	90002126 	beq	r18,zero,41d78 <__sfvwrite_r+0x1bc>
   41cf4:	10c0800c 	andi	r3,r2,512
   41cf8:	18ffffcc 	andi	r3,r3,65535
   41cfc:	18e0001c 	xori	r3,r3,32768
   41d00:	18e00004 	addi	r3,r3,-32768
   41d04:	84c00217 	ldw	r19,8(r16)
   41d08:	18006b26 	beq	r3,zero,41eb8 <__sfvwrite_r+0x2fc>
   41d0c:	980f883a 	mov	r7,r19
   41d10:	94c08636 	bltu	r18,r19,41f2c <__sfvwrite_r+0x370>
   41d14:	10c1200c 	andi	r3,r2,1152
   41d18:	18009f1e 	bne	r3,zero,41f98 <__sfvwrite_r+0x3dc>
   41d1c:	81000017 	ldw	r4,0(r16)
   41d20:	982f883a 	mov	r23,r19
   41d24:	9039883a 	mov	fp,r18
   41d28:	9027883a 	mov	r19,r18
   41d2c:	380d883a 	mov	r6,r7
   41d30:	b00b883a 	mov	r5,r22
   41d34:	d9c00015 	stw	r7,0(sp)
   41d38:	00422d80 	call	422d8 <memmove>
   41d3c:	d9c00017 	ldw	r7,0(sp)
   41d40:	81000217 	ldw	r4,8(r16)
   41d44:	80800017 	ldw	r2,0(r16)
   41d48:	25efc83a 	sub	r23,r4,r23
   41d4c:	11cf883a 	add	r7,r2,r7
   41d50:	85c00215 	stw	r23,8(r16)
   41d54:	81c00015 	stw	r7,0(r16)
   41d58:	a0800217 	ldw	r2,8(r20)
   41d5c:	b72d883a 	add	r22,r22,fp
   41d60:	9725c83a 	sub	r18,r18,fp
   41d64:	14e7c83a 	sub	r19,r2,r19
   41d68:	a4c00215 	stw	r19,8(r20)
   41d6c:	983fc426 	beq	r19,zero,41c80 <__sfvwrite_r+0xc4>
   41d70:	8080030b 	ldhu	r2,12(r16)
   41d74:	903fdf1e 	bne	r18,zero,41cf4 <__sfvwrite_r+0x138>
   41d78:	8d800017 	ldw	r22,0(r17)
   41d7c:	8c800117 	ldw	r18,4(r17)
   41d80:	8c400204 	addi	r17,r17,8
   41d84:	003fda06 	br	41cf0 <__sfvwrite_r+0x134>
   41d88:	8cc00017 	ldw	r19,0(r17)
   41d8c:	8c800117 	ldw	r18,4(r17)
   41d90:	8c400204 	addi	r17,r17,8
   41d94:	003faa06 	br	41c40 <__sfvwrite_r+0x84>
   41d98:	00424640 	call	42464 <_realloc_r>
   41d9c:	102f883a 	mov	r23,r2
   41da0:	10009f1e 	bne	r2,zero,42020 <__sfvwrite_r+0x464>
   41da4:	81400417 	ldw	r5,16(r16)
   41da8:	a809883a 	mov	r4,r21
   41dac:	00418ec0 	call	418ec <_free_r>
   41db0:	00800304 	movi	r2,12
   41db4:	a8800015 	stw	r2,0(r21)
   41db8:	80c0030b 	ldhu	r3,12(r16)
   41dbc:	00bfffc4 	movi	r2,-1
   41dc0:	18c01014 	ori	r3,r3,64
   41dc4:	80c0030d 	sth	r3,12(r16)
   41dc8:	003fae06 	br	41c84 <__sfvwrite_r+0xc8>
   41dcc:	0007883a 	mov	r3,zero
   41dd0:	0039883a 	mov	fp,zero
   41dd4:	0025883a 	mov	r18,zero
   41dd8:	90001e26 	beq	r18,zero,41e54 <__sfvwrite_r+0x298>
   41ddc:	18006526 	beq	r3,zero,41f74 <__sfvwrite_r+0x3b8>
   41de0:	b02f883a 	mov	r23,r22
   41de4:	9580012e 	bgeu	r18,r22,41dec <__sfvwrite_r+0x230>
   41de8:	902f883a 	mov	r23,r18
   41dec:	81000017 	ldw	r4,0(r16)
   41df0:	80800417 	ldw	r2,16(r16)
   41df4:	84c00217 	ldw	r19,8(r16)
   41df8:	81c00517 	ldw	r7,20(r16)
   41dfc:	1100022e 	bgeu	r2,r4,41e08 <__sfvwrite_r+0x24c>
   41e00:	99e7883a 	add	r19,r19,r7
   41e04:	9dc01816 	blt	r19,r23,41e68 <__sfvwrite_r+0x2ac>
   41e08:	b9c03b16 	blt	r23,r7,41ef8 <__sfvwrite_r+0x33c>
   41e0c:	80800917 	ldw	r2,36(r16)
   41e10:	81400717 	ldw	r5,28(r16)
   41e14:	a809883a 	mov	r4,r21
   41e18:	d8c00015 	stw	r3,0(sp)
   41e1c:	e00d883a 	mov	r6,fp
   41e20:	103ee83a 	callr	r2
   41e24:	1027883a 	mov	r19,r2
   41e28:	d8c00017 	ldw	r3,0(sp)
   41e2c:	00bfe20e 	bge	zero,r2,41db8 <__sfvwrite_r+0x1fc>
   41e30:	b4edc83a 	sub	r22,r22,r19
   41e34:	b0001a26 	beq	r22,zero,41ea0 <__sfvwrite_r+0x2e4>
   41e38:	a0800217 	ldw	r2,8(r20)
   41e3c:	e4f9883a 	add	fp,fp,r19
   41e40:	94e5c83a 	sub	r18,r18,r19
   41e44:	14e7c83a 	sub	r19,r2,r19
   41e48:	a4c00215 	stw	r19,8(r20)
   41e4c:	983f8c26 	beq	r19,zero,41c80 <__sfvwrite_r+0xc4>
   41e50:	903fe21e 	bne	r18,zero,41ddc <__sfvwrite_r+0x220>
   41e54:	8f000017 	ldw	fp,0(r17)
   41e58:	8c800117 	ldw	r18,4(r17)
   41e5c:	0007883a 	mov	r3,zero
   41e60:	8c400204 	addi	r17,r17,8
   41e64:	003fdc06 	br	41dd8 <__sfvwrite_r+0x21c>
   41e68:	e00b883a 	mov	r5,fp
   41e6c:	980d883a 	mov	r6,r19
   41e70:	d8c00015 	stw	r3,0(sp)
   41e74:	00422d80 	call	422d8 <memmove>
   41e78:	80800017 	ldw	r2,0(r16)
   41e7c:	a809883a 	mov	r4,r21
   41e80:	800b883a 	mov	r5,r16
   41e84:	14c5883a 	add	r2,r2,r19
   41e88:	80800015 	stw	r2,0(r16)
   41e8c:	0042bd40 	call	42bd4 <_fflush_r>
   41e90:	d8c00017 	ldw	r3,0(sp)
   41e94:	103fc81e 	bne	r2,zero,41db8 <__sfvwrite_r+0x1fc>
   41e98:	b4edc83a 	sub	r22,r22,r19
   41e9c:	b03fe61e 	bne	r22,zero,41e38 <__sfvwrite_r+0x27c>
   41ea0:	a809883a 	mov	r4,r21
   41ea4:	800b883a 	mov	r5,r16
   41ea8:	0042bd40 	call	42bd4 <_fflush_r>
   41eac:	103fc21e 	bne	r2,zero,41db8 <__sfvwrite_r+0x1fc>
   41eb0:	0007883a 	mov	r3,zero
   41eb4:	003fe006 	br	41e38 <__sfvwrite_r+0x27c>
   41eb8:	81000017 	ldw	r4,0(r16)
   41ebc:	80800417 	ldw	r2,16(r16)
   41ec0:	1100022e 	bgeu	r2,r4,41ecc <__sfvwrite_r+0x310>
   41ec4:	9839883a 	mov	fp,r19
   41ec8:	9c806036 	bltu	r19,r18,4204c <__sfvwrite_r+0x490>
   41ecc:	81c00517 	ldw	r7,20(r16)
   41ed0:	91c01c36 	bltu	r18,r7,41f44 <__sfvwrite_r+0x388>
   41ed4:	80800917 	ldw	r2,36(r16)
   41ed8:	81400717 	ldw	r5,28(r16)
   41edc:	a809883a 	mov	r4,r21
   41ee0:	b00d883a 	mov	r6,r22
   41ee4:	103ee83a 	callr	r2
   41ee8:	1027883a 	mov	r19,r2
   41eec:	00bfb20e 	bge	zero,r2,41db8 <__sfvwrite_r+0x1fc>
   41ef0:	1039883a 	mov	fp,r2
   41ef4:	003f9806 	br	41d58 <__sfvwrite_r+0x19c>
   41ef8:	b80d883a 	mov	r6,r23
   41efc:	e00b883a 	mov	r5,fp
   41f00:	d8c00015 	stw	r3,0(sp)
   41f04:	00422d80 	call	422d8 <memmove>
   41f08:	80800217 	ldw	r2,8(r16)
   41f0c:	81000017 	ldw	r4,0(r16)
   41f10:	b827883a 	mov	r19,r23
   41f14:	15c5c83a 	sub	r2,r2,r23
   41f18:	25ef883a 	add	r23,r4,r23
   41f1c:	80800215 	stw	r2,8(r16)
   41f20:	85c00015 	stw	r23,0(r16)
   41f24:	d8c00017 	ldw	r3,0(sp)
   41f28:	003fc106 	br	41e30 <__sfvwrite_r+0x274>
   41f2c:	81000017 	ldw	r4,0(r16)
   41f30:	902f883a 	mov	r23,r18
   41f34:	9039883a 	mov	fp,r18
   41f38:	9027883a 	mov	r19,r18
   41f3c:	900f883a 	mov	r7,r18
   41f40:	003f7a06 	br	41d2c <__sfvwrite_r+0x170>
   41f44:	b00b883a 	mov	r5,r22
   41f48:	900d883a 	mov	r6,r18
   41f4c:	00422d80 	call	422d8 <memmove>
   41f50:	80c00217 	ldw	r3,8(r16)
   41f54:	80800017 	ldw	r2,0(r16)
   41f58:	9027883a 	mov	r19,r18
   41f5c:	1c87c83a 	sub	r3,r3,r18
   41f60:	1485883a 	add	r2,r2,r18
   41f64:	80c00215 	stw	r3,8(r16)
   41f68:	80800015 	stw	r2,0(r16)
   41f6c:	9039883a 	mov	fp,r18
   41f70:	003f7906 	br	41d58 <__sfvwrite_r+0x19c>
   41f74:	e009883a 	mov	r4,fp
   41f78:	01400284 	movi	r5,10
   41f7c:	900d883a 	mov	r6,r18
   41f80:	00420a00 	call	420a0 <memchr>
   41f84:	10003c26 	beq	r2,zero,42078 <__sfvwrite_r+0x4bc>
   41f88:	15800044 	addi	r22,r2,1
   41f8c:	b72dc83a 	sub	r22,r22,fp
   41f90:	00c00044 	movi	r3,1
   41f94:	003f9206 	br	41de0 <__sfvwrite_r+0x224>
   41f98:	81000517 	ldw	r4,20(r16)
   41f9c:	81400417 	ldw	r5,16(r16)
   41fa0:	80c00017 	ldw	r3,0(r16)
   41fa4:	210d883a 	add	r6,r4,r4
   41fa8:	3109883a 	add	r4,r6,r4
   41fac:	2026d7fa 	srli	r19,r4,31
   41fb0:	1979c83a 	sub	fp,r3,r5
   41fb4:	e1800044 	addi	r6,fp,1
   41fb8:	9909883a 	add	r4,r19,r4
   41fbc:	2027d07a 	srai	r19,r4,1
   41fc0:	3489883a 	add	r4,r6,r18
   41fc4:	980d883a 	mov	r6,r19
   41fc8:	9900022e 	bgeu	r19,r4,41fd4 <__sfvwrite_r+0x418>
   41fcc:	2027883a 	mov	r19,r4
   41fd0:	200d883a 	mov	r6,r4
   41fd4:	1081000c 	andi	r2,r2,1024
   41fd8:	10bfffcc 	andi	r2,r2,65535
   41fdc:	10a0001c 	xori	r2,r2,32768
   41fe0:	10a00004 	addi	r2,r2,-32768
   41fe4:	a809883a 	mov	r4,r21
   41fe8:	103f6b26 	beq	r2,zero,41d98 <__sfvwrite_r+0x1dc>
   41fec:	300b883a 	mov	r5,r6
   41ff0:	0040ea40 	call	40ea4 <_malloc_r>
   41ff4:	102f883a 	mov	r23,r2
   41ff8:	103f6d26 	beq	r2,zero,41db0 <__sfvwrite_r+0x1f4>
   41ffc:	81400417 	ldw	r5,16(r16)
   42000:	1009883a 	mov	r4,r2
   42004:	e00d883a 	mov	r6,fp
   42008:	00421980 	call	42198 <memcpy>
   4200c:	8080030b 	ldhu	r2,12(r16)
   42010:	00fedfc4 	movi	r3,-1153
   42014:	10c4703a 	and	r2,r2,r3
   42018:	10802014 	ori	r2,r2,128
   4201c:	8080030d 	sth	r2,12(r16)
   42020:	bf09883a 	add	r4,r23,fp
   42024:	9f07c83a 	sub	r3,r19,fp
   42028:	85c00415 	stw	r23,16(r16)
   4202c:	84c00515 	stw	r19,20(r16)
   42030:	81000015 	stw	r4,0(r16)
   42034:	902f883a 	mov	r23,r18
   42038:	80c00215 	stw	r3,8(r16)
   4203c:	9039883a 	mov	fp,r18
   42040:	9027883a 	mov	r19,r18
   42044:	900f883a 	mov	r7,r18
   42048:	003f3806 	br	41d2c <__sfvwrite_r+0x170>
   4204c:	b00b883a 	mov	r5,r22
   42050:	980d883a 	mov	r6,r19
   42054:	00422d80 	call	422d8 <memmove>
   42058:	80800017 	ldw	r2,0(r16)
   4205c:	a809883a 	mov	r4,r21
   42060:	800b883a 	mov	r5,r16
   42064:	14c5883a 	add	r2,r2,r19
   42068:	80800015 	stw	r2,0(r16)
   4206c:	0042bd40 	call	42bd4 <_fflush_r>
   42070:	103f3926 	beq	r2,zero,41d58 <__sfvwrite_r+0x19c>
   42074:	003f5006 	br	41db8 <__sfvwrite_r+0x1fc>
   42078:	95800044 	addi	r22,r18,1
   4207c:	00c00044 	movi	r3,1
   42080:	003f5706 	br	41de0 <__sfvwrite_r+0x224>
   42084:	80c0030b 	ldhu	r3,12(r16)
   42088:	00bfffc4 	movi	r2,-1
   4208c:	18c01014 	ori	r3,r3,64
   42090:	80c0030d 	sth	r3,12(r16)
   42094:	00c00244 	movi	r3,9
   42098:	a8c00015 	stw	r3,0(r21)
   4209c:	003ef906 	br	41c84 <__sfvwrite_r+0xc8>

000420a0 <memchr>:
   420a0:	008000c4 	movi	r2,3
   420a4:	29403fcc 	andi	r5,r5,255
   420a8:	1180282e 	bgeu	r2,r6,4214c <memchr+0xac>
   420ac:	2086703a 	and	r3,r4,r2
   420b0:	1800351e 	bne	r3,zero,42188 <memchr+0xe8>
   420b4:	2816923a 	slli	r11,r5,8
   420b8:	2093883a 	add	r9,r4,r2
   420bc:	22000084 	addi	r8,r4,2
   420c0:	5957883a 	add	r11,r11,r5
   420c4:	5816923a 	slli	r11,r11,8
   420c8:	20c00044 	addi	r3,r4,1
   420cc:	037fbff4 	movhi	r13,65279
   420d0:	6b7fbfc4 	addi	r13,r13,-257
   420d4:	5957883a 	add	r11,r11,r5
   420d8:	5816923a 	slli	r11,r11,8
   420dc:	03202074 	movhi	r12,32897
   420e0:	63202004 	addi	r12,r12,-32640
   420e4:	101d883a 	mov	r14,r2
   420e8:	5957883a 	add	r11,r11,r5
   420ec:	21c00017 	ldw	r7,0(r4)
   420f0:	31bfff04 	addi	r6,r6,-4
   420f4:	1805883a 	mov	r2,r3
   420f8:	3acef03a 	xor	r7,r7,r11
   420fc:	3b55883a 	add	r10,r7,r13
   42100:	01ce303a 	nor	r7,zero,r7
   42104:	51ce703a 	and	r7,r10,r7
   42108:	3b0e703a 	and	r7,r7,r12
   4210c:	38000a26 	beq	r7,zero,42138 <memchr+0x98>
   42110:	21c00003 	ldbu	r7,0(r4)
   42114:	39401e26 	beq	r7,r5,42190 <memchr+0xf0>
   42118:	19c00003 	ldbu	r7,0(r3)
   4211c:	39401926 	beq	r7,r5,42184 <memchr+0xe4>
   42120:	41c00003 	ldbu	r7,0(r8)
   42124:	4005883a 	mov	r2,r8
   42128:	39401626 	beq	r7,r5,42184 <memchr+0xe4>
   4212c:	49c00003 	ldbu	r7,0(r9)
   42130:	4805883a 	mov	r2,r9
   42134:	39401326 	beq	r7,r5,42184 <memchr+0xe4>
   42138:	21000104 	addi	r4,r4,4
   4213c:	4a400104 	addi	r9,r9,4
   42140:	42000104 	addi	r8,r8,4
   42144:	18c00104 	addi	r3,r3,4
   42148:	71bfe836 	bltu	r14,r6,420ec <memchr+0x4c>
   4214c:	2005883a 	mov	r2,r4
   42150:	30000a26 	beq	r6,zero,4217c <memchr+0xdc>
   42154:	10c00003 	ldbu	r3,0(r2)
   42158:	19400a26 	beq	r3,r5,42184 <memchr+0xe4>
   4215c:	10c00044 	addi	r3,r2,1
   42160:	118d883a 	add	r6,r2,r6
   42164:	00000306 	br	42174 <memchr+0xd4>
   42168:	11000003 	ldbu	r4,0(r2)
   4216c:	18c00044 	addi	r3,r3,1
   42170:	21400426 	beq	r4,r5,42184 <memchr+0xe4>
   42174:	1805883a 	mov	r2,r3
   42178:	19bffb1e 	bne	r3,r6,42168 <memchr+0xc8>
   4217c:	0005883a 	mov	r2,zero
   42180:	f800283a 	ret
   42184:	f800283a 	ret
   42188:	2005883a 	mov	r2,r4
   4218c:	003ff106 	br	42154 <memchr+0xb4>
   42190:	2005883a 	mov	r2,r4
   42194:	f800283a 	ret

00042198 <memcpy>:
   42198:	defffb04 	addi	sp,sp,-20
   4219c:	dc000015 	stw	r16,0(sp)
   421a0:	dfc00415 	stw	ra,16(sp)
   421a4:	dcc00315 	stw	r19,12(sp)
   421a8:	dc800215 	stw	r18,8(sp)
   421ac:	dc400115 	stw	r17,4(sp)
   421b0:	00c003c4 	movi	r3,15
   421b4:	2021883a 	mov	r16,r4
   421b8:	3005883a 	mov	r2,r6
   421bc:	1980032e 	bgeu	r3,r6,421cc <memcpy+0x34>
   421c0:	2906b03a 	or	r3,r5,r4
   421c4:	18c000cc 	andi	r3,r3,3
   421c8:	18001026 	beq	r3,zero,4220c <memcpy+0x74>
   421cc:	8007883a 	mov	r3,r16
   421d0:	288f883a 	add	r7,r5,r2
   421d4:	10000526 	beq	r2,zero,421ec <memcpy+0x54>
   421d8:	29800003 	ldbu	r6,0(r5)
   421dc:	18c00044 	addi	r3,r3,1
   421e0:	29400044 	addi	r5,r5,1
   421e4:	19bfffc5 	stb	r6,-1(r3)
   421e8:	29fffb1e 	bne	r5,r7,421d8 <memcpy+0x40>
   421ec:	8005883a 	mov	r2,r16
   421f0:	dfc00417 	ldw	ra,16(sp)
   421f4:	dcc00317 	ldw	r19,12(sp)
   421f8:	dc800217 	ldw	r18,8(sp)
   421fc:	dc400117 	ldw	r17,4(sp)
   42200:	dc000017 	ldw	r16,0(sp)
   42204:	dec00504 	addi	sp,sp,20
   42208:	f800283a 	ret
   4220c:	32bffc04 	addi	r10,r6,-16
   42210:	5014d13a 	srli	r10,r10,4
   42214:	20800404 	addi	r2,r4,16
   42218:	2007883a 	mov	r3,r4
   4221c:	5008913a 	slli	r4,r10,4
   42220:	280f883a 	mov	r7,r5
   42224:	1105883a 	add	r2,r2,r4
   42228:	3a000017 	ldw	r8,0(r7)
   4222c:	18c00404 	addi	r3,r3,16
   42230:	39c00404 	addi	r7,r7,16
   42234:	1a3ffc15 	stw	r8,-16(r3)
   42238:	3a3ffd17 	ldw	r8,-12(r7)
   4223c:	1a3ffd15 	stw	r8,-12(r3)
   42240:	3a3ffe17 	ldw	r8,-8(r7)
   42244:	1a3ffe15 	stw	r8,-8(r3)
   42248:	3a3fff17 	ldw	r8,-4(r7)
   4224c:	1a3fff15 	stw	r8,-4(r3)
   42250:	18bff51e 	bne	r3,r2,42228 <memcpy+0x90>
   42254:	52800044 	addi	r10,r10,1
   42258:	5014913a 	slli	r10,r10,4
   4225c:	308003cc 	andi	r2,r6,15
   42260:	010000c4 	movi	r4,3
   42264:	8287883a 	add	r3,r16,r10
   42268:	2a95883a 	add	r10,r5,r10
   4226c:	2080182e 	bgeu	r4,r2,422d0 <memcpy+0x138>
   42270:	147fff04 	addi	r17,r2,-4
   42274:	8808d0ba 	srli	r4,r17,2
   42278:	1a400104 	addi	r9,r3,4
   4227c:	180d883a 	mov	r6,r3
   42280:	2105883a 	add	r2,r4,r4
   42284:	1085883a 	add	r2,r2,r2
   42288:	4893883a 	add	r9,r9,r2
   4228c:	500f883a 	mov	r7,r10
   42290:	3a000017 	ldw	r8,0(r7)
   42294:	31800104 	addi	r6,r6,4
   42298:	39c00104 	addi	r7,r7,4
   4229c:	323fff15 	stw	r8,-4(r6)
   422a0:	327ffb1e 	bne	r6,r9,42290 <memcpy+0xf8>
   422a4:	20800044 	addi	r2,r4,1
   422a8:	1085883a 	add	r2,r2,r2
   422ac:	1085883a 	add	r2,r2,r2
   422b0:	017fff04 	movi	r5,-4
   422b4:	18a5883a 	add	r18,r3,r2
   422b8:	50a7883a 	add	r19,r10,r2
   422bc:	0040e540 	call	40e54 <__mulsi3>
   422c0:	1445883a 	add	r2,r2,r17
   422c4:	980b883a 	mov	r5,r19
   422c8:	9007883a 	mov	r3,r18
   422cc:	003fc006 	br	421d0 <memcpy+0x38>
   422d0:	500b883a 	mov	r5,r10
   422d4:	003fbe06 	br	421d0 <memcpy+0x38>

000422d8 <memmove>:
   422d8:	defffb04 	addi	sp,sp,-20
   422dc:	dc000015 	stw	r16,0(sp)
   422e0:	dfc00415 	stw	ra,16(sp)
   422e4:	dcc00315 	stw	r19,12(sp)
   422e8:	dc800215 	stw	r18,8(sp)
   422ec:	dc400115 	stw	r17,4(sp)
   422f0:	2021883a 	mov	r16,r4
   422f4:	300f883a 	mov	r7,r6
   422f8:	2900122e 	bgeu	r5,r4,42344 <memmove+0x6c>
   422fc:	2987883a 	add	r3,r5,r6
   42300:	20c0102e 	bgeu	r4,r3,42344 <memmove+0x6c>
   42304:	218b883a 	add	r5,r4,r6
   42308:	1989c83a 	sub	r4,r3,r6
   4230c:	30000526 	beq	r6,zero,42324 <memmove+0x4c>
   42310:	18ffffc4 	addi	r3,r3,-1
   42314:	18800003 	ldbu	r2,0(r3)
   42318:	297fffc4 	addi	r5,r5,-1
   4231c:	28800005 	stb	r2,0(r5)
   42320:	193ffb1e 	bne	r3,r4,42310 <memmove+0x38>
   42324:	8005883a 	mov	r2,r16
   42328:	dfc00417 	ldw	ra,16(sp)
   4232c:	dcc00317 	ldw	r19,12(sp)
   42330:	dc800217 	ldw	r18,8(sp)
   42334:	dc400117 	ldw	r17,4(sp)
   42338:	dc000017 	ldw	r16,0(sp)
   4233c:	dec00504 	addi	sp,sp,20
   42340:	f800283a 	ret
   42344:	008003c4 	movi	r2,15
   42348:	1180422e 	bgeu	r2,r6,42454 <memmove+0x17c>
   4234c:	2c04b03a 	or	r2,r5,r16
   42350:	108000cc 	andi	r2,r2,3
   42354:	10003f1e 	bne	r2,zero,42454 <memmove+0x17c>
   42358:	32bffc04 	addi	r10,r6,-16
   4235c:	5014d13a 	srli	r10,r10,4
   42360:	81000404 	addi	r4,r16,16
   42364:	8007883a 	mov	r3,r16
   42368:	5004913a 	slli	r2,r10,4
   4236c:	280f883a 	mov	r7,r5
   42370:	2089883a 	add	r4,r4,r2
   42374:	38800017 	ldw	r2,0(r7)
   42378:	18c00404 	addi	r3,r3,16
   4237c:	39c00404 	addi	r7,r7,16
   42380:	18bffc15 	stw	r2,-16(r3)
   42384:	38bffd17 	ldw	r2,-12(r7)
   42388:	18bffd15 	stw	r2,-12(r3)
   4238c:	38bffe17 	ldw	r2,-8(r7)
   42390:	18bffe15 	stw	r2,-8(r3)
   42394:	38bfff17 	ldw	r2,-4(r7)
   42398:	18bfff15 	stw	r2,-4(r3)
   4239c:	193ff51e 	bne	r3,r4,42374 <memmove+0x9c>
   423a0:	52800044 	addi	r10,r10,1
   423a4:	5014913a 	slli	r10,r10,4
   423a8:	31c003cc 	andi	r7,r6,15
   423ac:	008000c4 	movi	r2,3
   423b0:	8287883a 	add	r3,r16,r10
   423b4:	2a95883a 	add	r10,r5,r10
   423b8:	11c0282e 	bgeu	r2,r7,4245c <memmove+0x184>
   423bc:	3c7fff04 	addi	r17,r7,-4
   423c0:	8808d0ba 	srli	r4,r17,2
   423c4:	1a400104 	addi	r9,r3,4
   423c8:	180d883a 	mov	r6,r3
   423cc:	2105883a 	add	r2,r4,r4
   423d0:	1085883a 	add	r2,r2,r2
   423d4:	4893883a 	add	r9,r9,r2
   423d8:	5005883a 	mov	r2,r10
   423dc:	12000017 	ldw	r8,0(r2)
   423e0:	31800104 	addi	r6,r6,4
   423e4:	10800104 	addi	r2,r2,4
   423e8:	323fff15 	stw	r8,-4(r6)
   423ec:	327ffb1e 	bne	r6,r9,423dc <memmove+0x104>
   423f0:	20800044 	addi	r2,r4,1
   423f4:	1085883a 	add	r2,r2,r2
   423f8:	1085883a 	add	r2,r2,r2
   423fc:	017fff04 	movi	r5,-4
   42400:	18a5883a 	add	r18,r3,r2
   42404:	50a7883a 	add	r19,r10,r2
   42408:	0040e540 	call	40e54 <__mulsi3>
   4240c:	144f883a 	add	r7,r2,r17
   42410:	980b883a 	mov	r5,r19
   42414:	9007883a 	mov	r3,r18
   42418:	383fc226 	beq	r7,zero,42324 <memmove+0x4c>
   4241c:	19cf883a 	add	r7,r3,r7
   42420:	29800003 	ldbu	r6,0(r5)
   42424:	18c00044 	addi	r3,r3,1
   42428:	29400044 	addi	r5,r5,1
   4242c:	19bfffc5 	stb	r6,-1(r3)
   42430:	19fffb1e 	bne	r3,r7,42420 <memmove+0x148>
   42434:	8005883a 	mov	r2,r16
   42438:	dfc00417 	ldw	ra,16(sp)
   4243c:	dcc00317 	ldw	r19,12(sp)
   42440:	dc800217 	ldw	r18,8(sp)
   42444:	dc400117 	ldw	r17,4(sp)
   42448:	dc000017 	ldw	r16,0(sp)
   4244c:	dec00504 	addi	sp,sp,20
   42450:	f800283a 	ret
   42454:	8007883a 	mov	r3,r16
   42458:	003fef06 	br	42418 <memmove+0x140>
   4245c:	500b883a 	mov	r5,r10
   42460:	003fed06 	br	42418 <memmove+0x140>

00042464 <_realloc_r>:
   42464:	defff504 	addi	sp,sp,-44
   42468:	dd400615 	stw	r21,24(sp)
   4246c:	dc800315 	stw	r18,12(sp)
   42470:	dc000115 	stw	r16,4(sp)
   42474:	dfc00a15 	stw	ra,40(sp)
   42478:	df000915 	stw	fp,36(sp)
   4247c:	ddc00815 	stw	r23,32(sp)
   42480:	dd800715 	stw	r22,28(sp)
   42484:	dd000515 	stw	r20,20(sp)
   42488:	dcc00415 	stw	r19,16(sp)
   4248c:	dc400215 	stw	r17,8(sp)
   42490:	2821883a 	mov	r16,r5
   42494:	202b883a 	mov	r21,r4
   42498:	3025883a 	mov	r18,r6
   4249c:	28009626 	beq	r5,zero,426f8 <_realloc_r+0x294>
   424a0:	0043f840 	call	43f84 <__malloc_lock>
   424a4:	80bfff17 	ldw	r2,-4(r16)
   424a8:	04ffff04 	movi	r19,-4
   424ac:	90c002c4 	addi	r3,r18,11
   424b0:	01000584 	movi	r4,22
   424b4:	85bffe04 	addi	r22,r16,-8
   424b8:	14e6703a 	and	r19,r2,r19
   424bc:	20c0372e 	bgeu	r4,r3,4259c <_realloc_r+0x138>
   424c0:	047ffe04 	movi	r17,-8
   424c4:	1c62703a 	and	r17,r3,r17
   424c8:	8807883a 	mov	r3,r17
   424cc:	88005a16 	blt	r17,zero,42638 <_realloc_r+0x1d4>
   424d0:	8c805936 	bltu	r17,r18,42638 <_realloc_r+0x1d4>
   424d4:	98c0340e 	bge	r19,r3,425a8 <_realloc_r+0x144>
   424d8:	07000134 	movhi	fp,4
   424dc:	e71b6704 	addi	fp,fp,28060
   424e0:	e1400217 	ldw	r5,8(fp)
   424e4:	b4c9883a 	add	r4,r22,r19
   424e8:	29009026 	beq	r5,r4,4272c <_realloc_r+0x2c8>
   424ec:	21800117 	ldw	r6,4(r4)
   424f0:	01ffff84 	movi	r7,-2
   424f4:	31ce703a 	and	r7,r6,r7
   424f8:	21cf883a 	add	r7,r4,r7
   424fc:	39c00117 	ldw	r7,4(r7)
   42500:	39c0004c 	andi	r7,r7,1
   42504:	38004326 	beq	r7,zero,42614 <_realloc_r+0x1b0>
   42508:	000d883a 	mov	r6,zero
   4250c:	0009883a 	mov	r4,zero
   42510:	1080004c 	andi	r2,r2,1
   42514:	10005a1e 	bne	r2,zero,42680 <_realloc_r+0x21c>
   42518:	85fffe17 	ldw	r23,-8(r16)
   4251c:	00bfff04 	movi	r2,-4
   42520:	b5efc83a 	sub	r23,r22,r23
   42524:	b9c00117 	ldw	r7,4(r23)
   42528:	388e703a 	and	r7,r7,r2
   4252c:	3ccf883a 	add	r7,r7,r19
   42530:	20005226 	beq	r4,zero,4267c <_realloc_r+0x218>
   42534:	31e9883a 	add	r20,r6,r7
   42538:	2140c726 	beq	r4,r5,42858 <_realloc_r+0x3f4>
   4253c:	a0c04f16 	blt	r20,r3,4267c <_realloc_r+0x218>
   42540:	20800317 	ldw	r2,12(r4)
   42544:	20c00217 	ldw	r3,8(r4)
   42548:	99bfff04 	addi	r6,r19,-4
   4254c:	01000904 	movi	r4,36
   42550:	18800315 	stw	r2,12(r3)
   42554:	10c00215 	stw	r3,8(r2)
   42558:	b8c00217 	ldw	r3,8(r23)
   4255c:	b8800317 	ldw	r2,12(r23)
   42560:	bc800204 	addi	r18,r23,8
   42564:	18800315 	stw	r2,12(r3)
   42568:	10c00215 	stw	r3,8(r2)
   4256c:	2180ed36 	bltu	r4,r6,42924 <_realloc_r+0x4c0>
   42570:	008004c4 	movi	r2,19
   42574:	11809b2e 	bgeu	r2,r6,427e4 <_realloc_r+0x380>
   42578:	80800017 	ldw	r2,0(r16)
   4257c:	b8800215 	stw	r2,8(r23)
   42580:	80800117 	ldw	r2,4(r16)
   42584:	b8800315 	stw	r2,12(r23)
   42588:	008006c4 	movi	r2,27
   4258c:	1180f936 	bltu	r2,r6,42974 <_realloc_r+0x510>
   42590:	b8800404 	addi	r2,r23,16
   42594:	80c00204 	addi	r3,r16,8
   42598:	00009406 	br	427ec <_realloc_r+0x388>
   4259c:	00c00404 	movi	r3,16
   425a0:	1823883a 	mov	r17,r3
   425a4:	003fca06 	br	424d0 <_realloc_r+0x6c>
   425a8:	9829883a 	mov	r20,r19
   425ac:	a447c83a 	sub	r3,r20,r17
   425b0:	010003c4 	movi	r4,15
   425b4:	1080004c 	andi	r2,r2,1
   425b8:	20c02336 	bltu	r4,r3,42648 <_realloc_r+0x1e4>
   425bc:	1504b03a 	or	r2,r2,r20
   425c0:	b0800115 	stw	r2,4(r22)
   425c4:	b52d883a 	add	r22,r22,r20
   425c8:	b0800117 	ldw	r2,4(r22)
   425cc:	10800054 	ori	r2,r2,1
   425d0:	b0800115 	stw	r2,4(r22)
   425d4:	a809883a 	mov	r4,r21
   425d8:	0043fa40 	call	43fa4 <__malloc_unlock>
   425dc:	8025883a 	mov	r18,r16
   425e0:	9005883a 	mov	r2,r18
   425e4:	dfc00a17 	ldw	ra,40(sp)
   425e8:	df000917 	ldw	fp,36(sp)
   425ec:	ddc00817 	ldw	r23,32(sp)
   425f0:	dd800717 	ldw	r22,28(sp)
   425f4:	dd400617 	ldw	r21,24(sp)
   425f8:	dd000517 	ldw	r20,20(sp)
   425fc:	dcc00417 	ldw	r19,16(sp)
   42600:	dc800317 	ldw	r18,12(sp)
   42604:	dc400217 	ldw	r17,8(sp)
   42608:	dc000117 	ldw	r16,4(sp)
   4260c:	dec00b04 	addi	sp,sp,44
   42610:	f800283a 	ret
   42614:	01ffff04 	movi	r7,-4
   42618:	31cc703a 	and	r6,r6,r7
   4261c:	34e9883a 	add	r20,r6,r19
   42620:	a0ffbb16 	blt	r20,r3,42510 <_realloc_r+0xac>
   42624:	20c00317 	ldw	r3,12(r4)
   42628:	21000217 	ldw	r4,8(r4)
   4262c:	20c00315 	stw	r3,12(r4)
   42630:	19000215 	stw	r4,8(r3)
   42634:	003fdd06 	br	425ac <_realloc_r+0x148>
   42638:	00800304 	movi	r2,12
   4263c:	a8800015 	stw	r2,0(r21)
   42640:	0025883a 	mov	r18,zero
   42644:	003fe606 	br	425e0 <_realloc_r+0x17c>
   42648:	1444b03a 	or	r2,r2,r17
   4264c:	b0800115 	stw	r2,4(r22)
   42650:	b44b883a 	add	r5,r22,r17
   42654:	18800054 	ori	r2,r3,1
   42658:	28800115 	stw	r2,4(r5)
   4265c:	28c7883a 	add	r3,r5,r3
   42660:	18800117 	ldw	r2,4(r3)
   42664:	a809883a 	mov	r4,r21
   42668:	29400204 	addi	r5,r5,8
   4266c:	10800054 	ori	r2,r2,1
   42670:	18800115 	stw	r2,4(r3)
   42674:	00418ec0 	call	418ec <_free_r>
   42678:	003fd606 	br	425d4 <_realloc_r+0x170>
   4267c:	38c0330e 	bge	r7,r3,4274c <_realloc_r+0x2e8>
   42680:	900b883a 	mov	r5,r18
   42684:	a809883a 	mov	r4,r21
   42688:	0040ea40 	call	40ea4 <_malloc_r>
   4268c:	1025883a 	mov	r18,r2
   42690:	10001626 	beq	r2,zero,426ec <_realloc_r+0x288>
   42694:	80bfff17 	ldw	r2,-4(r16)
   42698:	00ffff84 	movi	r3,-2
   4269c:	913ffe04 	addi	r4,r18,-8
   426a0:	10c6703a 	and	r3,r2,r3
   426a4:	b0c7883a 	add	r3,r22,r3
   426a8:	20c09926 	beq	r4,r3,42910 <_realloc_r+0x4ac>
   426ac:	99bfff04 	addi	r6,r19,-4
   426b0:	00800904 	movi	r2,36
   426b4:	11806436 	bltu	r2,r6,42848 <_realloc_r+0x3e4>
   426b8:	00c004c4 	movi	r3,19
   426bc:	19804036 	bltu	r3,r6,427c0 <_realloc_r+0x35c>
   426c0:	9005883a 	mov	r2,r18
   426c4:	8007883a 	mov	r3,r16
   426c8:	19000017 	ldw	r4,0(r3)
   426cc:	11000015 	stw	r4,0(r2)
   426d0:	19000117 	ldw	r4,4(r3)
   426d4:	11000115 	stw	r4,4(r2)
   426d8:	18c00217 	ldw	r3,8(r3)
   426dc:	10c00215 	stw	r3,8(r2)
   426e0:	a809883a 	mov	r4,r21
   426e4:	800b883a 	mov	r5,r16
   426e8:	00418ec0 	call	418ec <_free_r>
   426ec:	a809883a 	mov	r4,r21
   426f0:	0043fa40 	call	43fa4 <__malloc_unlock>
   426f4:	003fba06 	br	425e0 <_realloc_r+0x17c>
   426f8:	300b883a 	mov	r5,r6
   426fc:	dfc00a17 	ldw	ra,40(sp)
   42700:	df000917 	ldw	fp,36(sp)
   42704:	ddc00817 	ldw	r23,32(sp)
   42708:	dd800717 	ldw	r22,28(sp)
   4270c:	dd400617 	ldw	r21,24(sp)
   42710:	dd000517 	ldw	r20,20(sp)
   42714:	dcc00417 	ldw	r19,16(sp)
   42718:	dc800317 	ldw	r18,12(sp)
   4271c:	dc400217 	ldw	r17,8(sp)
   42720:	dc000117 	ldw	r16,4(sp)
   42724:	dec00b04 	addi	sp,sp,44
   42728:	0040ea41 	jmpi	40ea4 <_malloc_r>
   4272c:	29800117 	ldw	r6,4(r5)
   42730:	013fff04 	movi	r4,-4
   42734:	89c00404 	addi	r7,r17,16
   42738:	310c703a 	and	r6,r6,r4
   4273c:	34c9883a 	add	r4,r6,r19
   42740:	21c0340e 	bge	r4,r7,42814 <_realloc_r+0x3b0>
   42744:	2809883a 	mov	r4,r5
   42748:	003f7106 	br	42510 <_realloc_r+0xac>
   4274c:	b8800317 	ldw	r2,12(r23)
   42750:	b8c00217 	ldw	r3,8(r23)
   42754:	99bfff04 	addi	r6,r19,-4
   42758:	01000904 	movi	r4,36
   4275c:	18800315 	stw	r2,12(r3)
   42760:	10c00215 	stw	r3,8(r2)
   42764:	bc800204 	addi	r18,r23,8
   42768:	21807836 	bltu	r4,r6,4294c <_realloc_r+0x4e8>
   4276c:	008004c4 	movi	r2,19
   42770:	1180732e 	bgeu	r2,r6,42940 <_realloc_r+0x4dc>
   42774:	80800017 	ldw	r2,0(r16)
   42778:	b8800215 	stw	r2,8(r23)
   4277c:	80800117 	ldw	r2,4(r16)
   42780:	b8800315 	stw	r2,12(r23)
   42784:	008006c4 	movi	r2,27
   42788:	11808936 	bltu	r2,r6,429b0 <_realloc_r+0x54c>
   4278c:	b8800404 	addi	r2,r23,16
   42790:	80c00204 	addi	r3,r16,8
   42794:	19000017 	ldw	r4,0(r3)
   42798:	9021883a 	mov	r16,r18
   4279c:	3829883a 	mov	r20,r7
   427a0:	11000015 	stw	r4,0(r2)
   427a4:	19000117 	ldw	r4,4(r3)
   427a8:	b82d883a 	mov	r22,r23
   427ac:	11000115 	stw	r4,4(r2)
   427b0:	18c00217 	ldw	r3,8(r3)
   427b4:	10c00215 	stw	r3,8(r2)
   427b8:	b8800117 	ldw	r2,4(r23)
   427bc:	003f7b06 	br	425ac <_realloc_r+0x148>
   427c0:	80c00017 	ldw	r3,0(r16)
   427c4:	90c00015 	stw	r3,0(r18)
   427c8:	80c00117 	ldw	r3,4(r16)
   427cc:	90c00115 	stw	r3,4(r18)
   427d0:	00c006c4 	movi	r3,27
   427d4:	19804636 	bltu	r3,r6,428f0 <_realloc_r+0x48c>
   427d8:	90800204 	addi	r2,r18,8
   427dc:	80c00204 	addi	r3,r16,8
   427e0:	003fb906 	br	426c8 <_realloc_r+0x264>
   427e4:	9005883a 	mov	r2,r18
   427e8:	8007883a 	mov	r3,r16
   427ec:	19000017 	ldw	r4,0(r3)
   427f0:	9021883a 	mov	r16,r18
   427f4:	b82d883a 	mov	r22,r23
   427f8:	11000015 	stw	r4,0(r2)
   427fc:	19000117 	ldw	r4,4(r3)
   42800:	11000115 	stw	r4,4(r2)
   42804:	18c00217 	ldw	r3,8(r3)
   42808:	10c00215 	stw	r3,8(r2)
   4280c:	b8800117 	ldw	r2,4(r23)
   42810:	003f6606 	br	425ac <_realloc_r+0x148>
   42814:	2445c83a 	sub	r2,r4,r17
   42818:	b46d883a 	add	r22,r22,r17
   4281c:	10800054 	ori	r2,r2,1
   42820:	b0800115 	stw	r2,4(r22)
   42824:	80bfff17 	ldw	r2,-4(r16)
   42828:	a809883a 	mov	r4,r21
   4282c:	e5800215 	stw	r22,8(fp)
   42830:	1080004c 	andi	r2,r2,1
   42834:	88a2b03a 	or	r17,r17,r2
   42838:	847fff15 	stw	r17,-4(r16)
   4283c:	0043fa40 	call	43fa4 <__malloc_unlock>
   42840:	8025883a 	mov	r18,r16
   42844:	003f6606 	br	425e0 <_realloc_r+0x17c>
   42848:	9009883a 	mov	r4,r18
   4284c:	800b883a 	mov	r5,r16
   42850:	00422d80 	call	422d8 <memmove>
   42854:	003fa206 	br	426e0 <_realloc_r+0x27c>
   42858:	88800404 	addi	r2,r17,16
   4285c:	a0bf8716 	blt	r20,r2,4267c <_realloc_r+0x218>
   42860:	b8800317 	ldw	r2,12(r23)
   42864:	b8c00217 	ldw	r3,8(r23)
   42868:	99bfff04 	addi	r6,r19,-4
   4286c:	01000904 	movi	r4,36
   42870:	18800315 	stw	r2,12(r3)
   42874:	10c00215 	stw	r3,8(r2)
   42878:	bc800204 	addi	r18,r23,8
   4287c:	21806536 	bltu	r4,r6,42a14 <_realloc_r+0x5b0>
   42880:	008004c4 	movi	r2,19
   42884:	1180592e 	bgeu	r2,r6,429ec <_realloc_r+0x588>
   42888:	80800017 	ldw	r2,0(r16)
   4288c:	b8800215 	stw	r2,8(r23)
   42890:	80800117 	ldw	r2,4(r16)
   42894:	b8800315 	stw	r2,12(r23)
   42898:	008006c4 	movi	r2,27
   4289c:	11806136 	bltu	r2,r6,42a24 <_realloc_r+0x5c0>
   428a0:	b8800404 	addi	r2,r23,16
   428a4:	80c00204 	addi	r3,r16,8
   428a8:	19000017 	ldw	r4,0(r3)
   428ac:	11000015 	stw	r4,0(r2)
   428b0:	19000117 	ldw	r4,4(r3)
   428b4:	11000115 	stw	r4,4(r2)
   428b8:	18c00217 	ldw	r3,8(r3)
   428bc:	10c00215 	stw	r3,8(r2)
   428c0:	a447c83a 	sub	r3,r20,r17
   428c4:	bc45883a 	add	r2,r23,r17
   428c8:	18c00054 	ori	r3,r3,1
   428cc:	10c00115 	stw	r3,4(r2)
   428d0:	b8c00117 	ldw	r3,4(r23)
   428d4:	e0800215 	stw	r2,8(fp)
   428d8:	a809883a 	mov	r4,r21
   428dc:	1880004c 	andi	r2,r3,1
   428e0:	88a2b03a 	or	r17,r17,r2
   428e4:	bc400115 	stw	r17,4(r23)
   428e8:	0043fa40 	call	43fa4 <__malloc_unlock>
   428ec:	003f3c06 	br	425e0 <_realloc_r+0x17c>
   428f0:	80c00217 	ldw	r3,8(r16)
   428f4:	90c00215 	stw	r3,8(r18)
   428f8:	80c00317 	ldw	r3,12(r16)
   428fc:	90c00315 	stw	r3,12(r18)
   42900:	30802426 	beq	r6,r2,42994 <_realloc_r+0x530>
   42904:	90800404 	addi	r2,r18,16
   42908:	80c00404 	addi	r3,r16,16
   4290c:	003f6e06 	br	426c8 <_realloc_r+0x264>
   42910:	953fff17 	ldw	r20,-4(r18)
   42914:	00ffff04 	movi	r3,-4
   42918:	a0e8703a 	and	r20,r20,r3
   4291c:	a4e9883a 	add	r20,r20,r19
   42920:	003f2206 	br	425ac <_realloc_r+0x148>
   42924:	800b883a 	mov	r5,r16
   42928:	9009883a 	mov	r4,r18
   4292c:	00422d80 	call	422d8 <memmove>
   42930:	9021883a 	mov	r16,r18
   42934:	b8800117 	ldw	r2,4(r23)
   42938:	b82d883a 	mov	r22,r23
   4293c:	003f1b06 	br	425ac <_realloc_r+0x148>
   42940:	9005883a 	mov	r2,r18
   42944:	8007883a 	mov	r3,r16
   42948:	003f9206 	br	42794 <_realloc_r+0x330>
   4294c:	800b883a 	mov	r5,r16
   42950:	9009883a 	mov	r4,r18
   42954:	d9c00015 	stw	r7,0(sp)
   42958:	00422d80 	call	422d8 <memmove>
   4295c:	d9c00017 	ldw	r7,0(sp)
   42960:	9021883a 	mov	r16,r18
   42964:	b8800117 	ldw	r2,4(r23)
   42968:	3829883a 	mov	r20,r7
   4296c:	b82d883a 	mov	r22,r23
   42970:	003f0e06 	br	425ac <_realloc_r+0x148>
   42974:	80800217 	ldw	r2,8(r16)
   42978:	b8800415 	stw	r2,16(r23)
   4297c:	80800317 	ldw	r2,12(r16)
   42980:	b8800515 	stw	r2,20(r23)
   42984:	31001226 	beq	r6,r4,429d0 <_realloc_r+0x56c>
   42988:	b8800604 	addi	r2,r23,24
   4298c:	80c00404 	addi	r3,r16,16
   42990:	003f9606 	br	427ec <_realloc_r+0x388>
   42994:	81000417 	ldw	r4,16(r16)
   42998:	90800604 	addi	r2,r18,24
   4299c:	80c00604 	addi	r3,r16,24
   429a0:	91000415 	stw	r4,16(r18)
   429a4:	81000517 	ldw	r4,20(r16)
   429a8:	91000515 	stw	r4,20(r18)
   429ac:	003f4606 	br	426c8 <_realloc_r+0x264>
   429b0:	80800217 	ldw	r2,8(r16)
   429b4:	b8800415 	stw	r2,16(r23)
   429b8:	80800317 	ldw	r2,12(r16)
   429bc:	b8800515 	stw	r2,20(r23)
   429c0:	31000d26 	beq	r6,r4,429f8 <_realloc_r+0x594>
   429c4:	b8800604 	addi	r2,r23,24
   429c8:	80c00404 	addi	r3,r16,16
   429cc:	003f7106 	br	42794 <_realloc_r+0x330>
   429d0:	81000417 	ldw	r4,16(r16)
   429d4:	b8800804 	addi	r2,r23,32
   429d8:	80c00604 	addi	r3,r16,24
   429dc:	b9000615 	stw	r4,24(r23)
   429e0:	81000517 	ldw	r4,20(r16)
   429e4:	b9000715 	stw	r4,28(r23)
   429e8:	003f8006 	br	427ec <_realloc_r+0x388>
   429ec:	9005883a 	mov	r2,r18
   429f0:	8007883a 	mov	r3,r16
   429f4:	003fac06 	br	428a8 <_realloc_r+0x444>
   429f8:	81000417 	ldw	r4,16(r16)
   429fc:	b8800804 	addi	r2,r23,32
   42a00:	80c00604 	addi	r3,r16,24
   42a04:	b9000615 	stw	r4,24(r23)
   42a08:	81000517 	ldw	r4,20(r16)
   42a0c:	b9000715 	stw	r4,28(r23)
   42a10:	003f6006 	br	42794 <_realloc_r+0x330>
   42a14:	9009883a 	mov	r4,r18
   42a18:	800b883a 	mov	r5,r16
   42a1c:	00422d80 	call	422d8 <memmove>
   42a20:	003fa706 	br	428c0 <_realloc_r+0x45c>
   42a24:	80800217 	ldw	r2,8(r16)
   42a28:	b8800415 	stw	r2,16(r23)
   42a2c:	80800317 	ldw	r2,12(r16)
   42a30:	b8800515 	stw	r2,20(r23)
   42a34:	31000326 	beq	r6,r4,42a44 <_realloc_r+0x5e0>
   42a38:	b8800604 	addi	r2,r23,24
   42a3c:	80c00404 	addi	r3,r16,16
   42a40:	003f9906 	br	428a8 <_realloc_r+0x444>
   42a44:	81000417 	ldw	r4,16(r16)
   42a48:	b8800804 	addi	r2,r23,32
   42a4c:	80c00604 	addi	r3,r16,24
   42a50:	b9000615 	stw	r4,24(r23)
   42a54:	81000517 	ldw	r4,20(r16)
   42a58:	b9000715 	stw	r4,28(r23)
   42a5c:	003f9206 	br	428a8 <_realloc_r+0x444>

00042a60 <__swsetup_r>:
   42a60:	00800174 	movhi	r2,5
   42a64:	10a1fd04 	addi	r2,r2,-30732
   42a68:	10800017 	ldw	r2,0(r2)
   42a6c:	defffd04 	addi	sp,sp,-12
   42a70:	dc400115 	stw	r17,4(sp)
   42a74:	dc000015 	stw	r16,0(sp)
   42a78:	dfc00215 	stw	ra,8(sp)
   42a7c:	2023883a 	mov	r17,r4
   42a80:	2821883a 	mov	r16,r5
   42a84:	10000226 	beq	r2,zero,42a90 <__swsetup_r+0x30>
   42a88:	10c00e17 	ldw	r3,56(r2)
   42a8c:	18003d26 	beq	r3,zero,42b84 <__swsetup_r+0x124>
   42a90:	8080030b 	ldhu	r2,12(r16)
   42a94:	10c0020c 	andi	r3,r2,8
   42a98:	18ffffcc 	andi	r3,r3,65535
   42a9c:	18e0001c 	xori	r3,r3,32768
   42aa0:	18e00004 	addi	r3,r3,-32768
   42aa4:	18001226 	beq	r3,zero,42af0 <__swsetup_r+0x90>
   42aa8:	80c00417 	ldw	r3,16(r16)
   42aac:	18001f26 	beq	r3,zero,42b2c <__swsetup_r+0xcc>
   42ab0:	1100004c 	andi	r4,r2,1
   42ab4:	2000261e 	bne	r4,zero,42b50 <__swsetup_r+0xf0>
   42ab8:	1080008c 	andi	r2,r2,2
   42abc:	10bfffcc 	andi	r2,r2,65535
   42ac0:	10a0001c 	xori	r2,r2,32768
   42ac4:	10a00004 	addi	r2,r2,-32768
   42ac8:	1000311e 	bne	r2,zero,42b90 <__swsetup_r+0x130>
   42acc:	80800517 	ldw	r2,20(r16)
   42ad0:	80800215 	stw	r2,8(r16)
   42ad4:	18002326 	beq	r3,zero,42b64 <__swsetup_r+0x104>
   42ad8:	0005883a 	mov	r2,zero
   42adc:	dfc00217 	ldw	ra,8(sp)
   42ae0:	dc400117 	ldw	r17,4(sp)
   42ae4:	dc000017 	ldw	r16,0(sp)
   42ae8:	dec00304 	addi	sp,sp,12
   42aec:	f800283a 	ret
   42af0:	10c0040c 	andi	r3,r2,16
   42af4:	18ffffcc 	andi	r3,r3,65535
   42af8:	18e0001c 	xori	r3,r3,32768
   42afc:	18e00004 	addi	r3,r3,-32768
   42b00:	18001e26 	beq	r3,zero,42b7c <__swsetup_r+0x11c>
   42b04:	10c0010c 	andi	r3,r2,4
   42b08:	18ffffcc 	andi	r3,r3,65535
   42b0c:	18e0001c 	xori	r3,r3,32768
   42b10:	18e00004 	addi	r3,r3,-32768
   42b14:	1800211e 	bne	r3,zero,42b9c <__swsetup_r+0x13c>
   42b18:	80c00417 	ldw	r3,16(r16)
   42b1c:	11400214 	ori	r5,r2,8
   42b20:	8140030d 	sth	r5,12(r16)
   42b24:	2805883a 	mov	r2,r5
   42b28:	183fe11e 	bne	r3,zero,42ab0 <__swsetup_r+0x50>
   42b2c:	1140a00c 	andi	r5,r2,640
   42b30:	01008004 	movi	r4,512
   42b34:	293fde26 	beq	r5,r4,42ab0 <__swsetup_r+0x50>
   42b38:	8809883a 	mov	r4,r17
   42b3c:	800b883a 	mov	r5,r16
   42b40:	00432380 	call	43238 <__smakebuf_r>
   42b44:	8080030b 	ldhu	r2,12(r16)
   42b48:	80c00417 	ldw	r3,16(r16)
   42b4c:	003fd806 	br	42ab0 <__swsetup_r+0x50>
   42b50:	80800517 	ldw	r2,20(r16)
   42b54:	80000215 	stw	zero,8(r16)
   42b58:	0085c83a 	sub	r2,zero,r2
   42b5c:	80800615 	stw	r2,24(r16)
   42b60:	183fdd1e 	bne	r3,zero,42ad8 <__swsetup_r+0x78>
   42b64:	8080030b 	ldhu	r2,12(r16)
   42b68:	1080200c 	andi	r2,r2,128
   42b6c:	10bfffcc 	andi	r2,r2,65535
   42b70:	10a0001c 	xori	r2,r2,32768
   42b74:	10a00004 	addi	r2,r2,-32768
   42b78:	103fd826 	beq	r2,zero,42adc <__swsetup_r+0x7c>
   42b7c:	00bfffc4 	movi	r2,-1
   42b80:	003fd606 	br	42adc <__swsetup_r+0x7c>
   42b84:	1009883a 	mov	r4,r2
   42b88:	0042e900 	call	42e90 <__sinit>
   42b8c:	003fc006 	br	42a90 <__swsetup_r+0x30>
   42b90:	0005883a 	mov	r2,zero
   42b94:	80800215 	stw	r2,8(r16)
   42b98:	003fce06 	br	42ad4 <__swsetup_r+0x74>
   42b9c:	81400c17 	ldw	r5,48(r16)
   42ba0:	28000626 	beq	r5,zero,42bbc <__swsetup_r+0x15c>
   42ba4:	80c01004 	addi	r3,r16,64
   42ba8:	28c00326 	beq	r5,r3,42bb8 <__swsetup_r+0x158>
   42bac:	8809883a 	mov	r4,r17
   42bb0:	00418ec0 	call	418ec <_free_r>
   42bb4:	8080030b 	ldhu	r2,12(r16)
   42bb8:	80000c15 	stw	zero,48(r16)
   42bbc:	80c00417 	ldw	r3,16(r16)
   42bc0:	013ff6c4 	movi	r4,-37
   42bc4:	2084703a 	and	r2,r4,r2
   42bc8:	80000115 	stw	zero,4(r16)
   42bcc:	80c00015 	stw	r3,0(r16)
   42bd0:	003fd206 	br	42b1c <__swsetup_r+0xbc>

00042bd4 <_fflush_r>:
   42bd4:	defffb04 	addi	sp,sp,-20
   42bd8:	dcc00315 	stw	r19,12(sp)
   42bdc:	dc400115 	stw	r17,4(sp)
   42be0:	dfc00415 	stw	ra,16(sp)
   42be4:	dc800215 	stw	r18,8(sp)
   42be8:	dc000015 	stw	r16,0(sp)
   42bec:	2027883a 	mov	r19,r4
   42bf0:	2823883a 	mov	r17,r5
   42bf4:	20000226 	beq	r4,zero,42c00 <_fflush_r+0x2c>
   42bf8:	20800e17 	ldw	r2,56(r4)
   42bfc:	10005726 	beq	r2,zero,42d5c <_fflush_r+0x188>
   42c00:	8880030b 	ldhu	r2,12(r17)
   42c04:	10c0020c 	andi	r3,r2,8
   42c08:	18ffffcc 	andi	r3,r3,65535
   42c0c:	18e0001c 	xori	r3,r3,32768
   42c10:	18e00004 	addi	r3,r3,-32768
   42c14:	1800311e 	bne	r3,zero,42cdc <_fflush_r+0x108>
   42c18:	89000117 	ldw	r4,4(r17)
   42c1c:	10c20014 	ori	r3,r2,2048
   42c20:	88c0030d 	sth	r3,12(r17)
   42c24:	180b883a 	mov	r5,r3
   42c28:	0100520e 	bge	zero,r4,42d74 <_fflush_r+0x1a0>
   42c2c:	88c00a17 	ldw	r3,40(r17)
   42c30:	18002226 	beq	r3,zero,42cbc <_fflush_r+0xe8>
   42c34:	1084000c 	andi	r2,r2,4096
   42c38:	10bfffcc 	andi	r2,r2,65535
   42c3c:	10a0001c 	xori	r2,r2,32768
   42c40:	10a00004 	addi	r2,r2,-32768
   42c44:	10004e26 	beq	r2,zero,42d80 <_fflush_r+0x1ac>
   42c48:	8c001417 	ldw	r16,80(r17)
   42c4c:	2940010c 	andi	r5,r5,4
   42c50:	297fffcc 	andi	r5,r5,65535
   42c54:	2960001c 	xori	r5,r5,32768
   42c58:	29600004 	addi	r5,r5,-32768
   42c5c:	28000626 	beq	r5,zero,42c78 <_fflush_r+0xa4>
   42c60:	89000117 	ldw	r4,4(r17)
   42c64:	88800c17 	ldw	r2,48(r17)
   42c68:	8121c83a 	sub	r16,r16,r4
   42c6c:	10000226 	beq	r2,zero,42c78 <_fflush_r+0xa4>
   42c70:	88800f17 	ldw	r2,60(r17)
   42c74:	80a1c83a 	sub	r16,r16,r2
   42c78:	89400717 	ldw	r5,28(r17)
   42c7c:	9809883a 	mov	r4,r19
   42c80:	800d883a 	mov	r6,r16
   42c84:	000f883a 	mov	r7,zero
   42c88:	183ee83a 	callr	r3
   42c8c:	8080281e 	bne	r16,r2,42d30 <_fflush_r+0x15c>
   42c90:	8880030b 	ldhu	r2,12(r17)
   42c94:	88c00417 	ldw	r3,16(r17)
   42c98:	88000115 	stw	zero,4(r17)
   42c9c:	113dffcc 	andi	r4,r2,63487
   42ca0:	1084000c 	andi	r2,r2,4096
   42ca4:	10bfffcc 	andi	r2,r2,65535
   42ca8:	10a0001c 	xori	r2,r2,32768
   42cac:	8900030d 	sth	r4,12(r17)
   42cb0:	88c00015 	stw	r3,0(r17)
   42cb4:	10a00004 	addi	r2,r2,-32768
   42cb8:	10002c1e 	bne	r2,zero,42d6c <_fflush_r+0x198>
   42cbc:	0005883a 	mov	r2,zero
   42cc0:	dfc00417 	ldw	ra,16(sp)
   42cc4:	dcc00317 	ldw	r19,12(sp)
   42cc8:	dc800217 	ldw	r18,8(sp)
   42ccc:	dc400117 	ldw	r17,4(sp)
   42cd0:	dc000017 	ldw	r16,0(sp)
   42cd4:	dec00504 	addi	sp,sp,20
   42cd8:	f800283a 	ret
   42cdc:	8c800417 	ldw	r18,16(r17)
   42ce0:	903ff626 	beq	r18,zero,42cbc <_fflush_r+0xe8>
   42ce4:	8c000017 	ldw	r16,0(r17)
   42ce8:	108000cc 	andi	r2,r2,3
   42cec:	8c800015 	stw	r18,0(r17)
   42cf0:	84a1c83a 	sub	r16,r16,r18
   42cf4:	10001b1e 	bne	r2,zero,42d64 <_fflush_r+0x190>
   42cf8:	88800517 	ldw	r2,20(r17)
   42cfc:	88800215 	stw	r2,8(r17)
   42d00:	04000316 	blt	zero,r16,42d10 <_fflush_r+0x13c>
   42d04:	003fed06 	br	42cbc <_fflush_r+0xe8>
   42d08:	90a5883a 	add	r18,r18,r2
   42d0c:	043feb0e 	bge	zero,r16,42cbc <_fflush_r+0xe8>
   42d10:	88800917 	ldw	r2,36(r17)
   42d14:	89400717 	ldw	r5,28(r17)
   42d18:	800f883a 	mov	r7,r16
   42d1c:	900d883a 	mov	r6,r18
   42d20:	9809883a 	mov	r4,r19
   42d24:	103ee83a 	callr	r2
   42d28:	80a1c83a 	sub	r16,r16,r2
   42d2c:	00bff616 	blt	zero,r2,42d08 <_fflush_r+0x134>
   42d30:	88c0030b 	ldhu	r3,12(r17)
   42d34:	00bfffc4 	movi	r2,-1
   42d38:	18c01014 	ori	r3,r3,64
   42d3c:	88c0030d 	sth	r3,12(r17)
   42d40:	dfc00417 	ldw	ra,16(sp)
   42d44:	dcc00317 	ldw	r19,12(sp)
   42d48:	dc800217 	ldw	r18,8(sp)
   42d4c:	dc400117 	ldw	r17,4(sp)
   42d50:	dc000017 	ldw	r16,0(sp)
   42d54:	dec00504 	addi	sp,sp,20
   42d58:	f800283a 	ret
   42d5c:	0042e900 	call	42e90 <__sinit>
   42d60:	003fa706 	br	42c00 <_fflush_r+0x2c>
   42d64:	0005883a 	mov	r2,zero
   42d68:	003fe406 	br	42cfc <_fflush_r+0x128>
   42d6c:	8c001415 	stw	r16,80(r17)
   42d70:	003fd206 	br	42cbc <_fflush_r+0xe8>
   42d74:	88c00f17 	ldw	r3,60(r17)
   42d78:	00ffac16 	blt	zero,r3,42c2c <_fflush_r+0x58>
   42d7c:	003fcf06 	br	42cbc <_fflush_r+0xe8>
   42d80:	89400717 	ldw	r5,28(r17)
   42d84:	9809883a 	mov	r4,r19
   42d88:	000d883a 	mov	r6,zero
   42d8c:	01c00044 	movi	r7,1
   42d90:	183ee83a 	callr	r3
   42d94:	1021883a 	mov	r16,r2
   42d98:	00bfffc4 	movi	r2,-1
   42d9c:	80800326 	beq	r16,r2,42dac <_fflush_r+0x1d8>
   42da0:	8940030b 	ldhu	r5,12(r17)
   42da4:	88c00a17 	ldw	r3,40(r17)
   42da8:	003fa806 	br	42c4c <_fflush_r+0x78>
   42dac:	98c00017 	ldw	r3,0(r19)
   42db0:	00800744 	movi	r2,29
   42db4:	18bfde1e 	bne	r3,r2,42d30 <_fflush_r+0x15c>
   42db8:	003fc006 	br	42cbc <_fflush_r+0xe8>

00042dbc <fflush>:
   42dbc:	200b883a 	mov	r5,r4
   42dc0:	20000426 	beq	r4,zero,42dd4 <fflush+0x18>
   42dc4:	00800174 	movhi	r2,5
   42dc8:	10a1fd04 	addi	r2,r2,-30732
   42dcc:	11000017 	ldw	r4,0(r2)
   42dd0:	0042bd41 	jmpi	42bd4 <_fflush_r>
   42dd4:	00800174 	movhi	r2,5
   42dd8:	10a1fc04 	addi	r2,r2,-30736
   42ddc:	11000017 	ldw	r4,0(r2)
   42de0:	01400134 	movhi	r5,4
   42de4:	294af504 	addi	r5,r5,11220
   42de8:	00431801 	jmpi	43180 <_fwalk_reent>

00042dec <__fp_lock>:
   42dec:	0005883a 	mov	r2,zero
   42df0:	f800283a 	ret

00042df4 <__fp_unlock>:
   42df4:	0005883a 	mov	r2,zero
   42df8:	f800283a 	ret

00042dfc <_cleanup_r>:
   42dfc:	01400134 	movhi	r5,4
   42e00:	294e0204 	addi	r5,r5,14344
   42e04:	00430d81 	jmpi	430d8 <_fwalk>

00042e08 <__sfmoreglue>:
   42e08:	defffc04 	addi	sp,sp,-16
   42e0c:	dc800215 	stw	r18,8(sp)
   42e10:	2825883a 	mov	r18,r5
   42e14:	dc000015 	stw	r16,0(sp)
   42e18:	01401704 	movi	r5,92
   42e1c:	2021883a 	mov	r16,r4
   42e20:	9009883a 	mov	r4,r18
   42e24:	dfc00315 	stw	ra,12(sp)
   42e28:	dc400115 	stw	r17,4(sp)
   42e2c:	0040e540 	call	40e54 <__mulsi3>
   42e30:	8009883a 	mov	r4,r16
   42e34:	11400304 	addi	r5,r2,12
   42e38:	1023883a 	mov	r17,r2
   42e3c:	0040ea40 	call	40ea4 <_malloc_r>
   42e40:	1021883a 	mov	r16,r2
   42e44:	10000726 	beq	r2,zero,42e64 <__sfmoreglue+0x5c>
   42e48:	11000304 	addi	r4,r2,12
   42e4c:	10000015 	stw	zero,0(r2)
   42e50:	14800115 	stw	r18,4(r2)
   42e54:	11000215 	stw	r4,8(r2)
   42e58:	000b883a 	mov	r5,zero
   42e5c:	880d883a 	mov	r6,r17
   42e60:	00433e00 	call	433e0 <memset>
   42e64:	8005883a 	mov	r2,r16
   42e68:	dfc00317 	ldw	ra,12(sp)
   42e6c:	dc800217 	ldw	r18,8(sp)
   42e70:	dc400117 	ldw	r17,4(sp)
   42e74:	dc000017 	ldw	r16,0(sp)
   42e78:	dec00404 	addi	sp,sp,16
   42e7c:	f800283a 	ret

00042e80 <_cleanup>:
   42e80:	00800174 	movhi	r2,5
   42e84:	10a1fc04 	addi	r2,r2,-30736
   42e88:	11000017 	ldw	r4,0(r2)
   42e8c:	0042dfc1 	jmpi	42dfc <_cleanup_r>

00042e90 <__sinit>:
   42e90:	20800e17 	ldw	r2,56(r4)
   42e94:	1000401e 	bne	r2,zero,42f98 <__sinit+0x108>
   42e98:	21400117 	ldw	r5,4(r4)
   42e9c:	01800134 	movhi	r6,4
   42ea0:	318b7f04 	addi	r6,r6,11772
   42ea4:	20c00217 	ldw	r3,8(r4)
   42ea8:	21800f15 	stw	r6,60(r4)
   42eac:	2080bb04 	addi	r2,r4,748
   42eb0:	02400044 	movi	r9,1
   42eb4:	018000c4 	movi	r6,3
   42eb8:	2180b915 	stw	r6,740(r4)
   42ebc:	2080ba15 	stw	r2,744(r4)
   42ec0:	22400e15 	stw	r9,56(r4)
   42ec4:	20800317 	ldw	r2,12(r4)
   42ec8:	2000b815 	stw	zero,736(r4)
   42ecc:	02000134 	movhi	r8,4
   42ed0:	420d2f04 	addi	r8,r8,13500
   42ed4:	01c00134 	movhi	r7,4
   42ed8:	39cd4404 	addi	r7,r7,13584
   42edc:	01800134 	movhi	r6,4
   42ee0:	318d6604 	addi	r6,r6,13720
   42ee4:	01000134 	movhi	r4,4
   42ee8:	210d7d04 	addi	r4,r4,13812
   42eec:	02800104 	movi	r10,4
   42ef0:	28000015 	stw	zero,0(r5)
   42ef4:	28000115 	stw	zero,4(r5)
   42ef8:	28000215 	stw	zero,8(r5)
   42efc:	2a80030d 	sth	r10,12(r5)
   42f00:	2800038d 	sth	zero,14(r5)
   42f04:	28000415 	stw	zero,16(r5)
   42f08:	28000515 	stw	zero,20(r5)
   42f0c:	28000615 	stw	zero,24(r5)
   42f10:	29400715 	stw	r5,28(r5)
   42f14:	2a000815 	stw	r8,32(r5)
   42f18:	29c00915 	stw	r7,36(r5)
   42f1c:	29800a15 	stw	r6,40(r5)
   42f20:	29000b15 	stw	r4,44(r5)
   42f24:	01400284 	movi	r5,10
   42f28:	18000015 	stw	zero,0(r3)
   42f2c:	18000115 	stw	zero,4(r3)
   42f30:	18000215 	stw	zero,8(r3)
   42f34:	1940030d 	sth	r5,12(r3)
   42f38:	1a40038d 	sth	r9,14(r3)
   42f3c:	18000415 	stw	zero,16(r3)
   42f40:	18000515 	stw	zero,20(r3)
   42f44:	18000615 	stw	zero,24(r3)
   42f48:	18c00715 	stw	r3,28(r3)
   42f4c:	1a000815 	stw	r8,32(r3)
   42f50:	19c00915 	stw	r7,36(r3)
   42f54:	19800a15 	stw	r6,40(r3)
   42f58:	19000b15 	stw	r4,44(r3)
   42f5c:	00c00484 	movi	r3,18
   42f60:	10c0030d 	sth	r3,12(r2)
   42f64:	00c00084 	movi	r3,2
   42f68:	10000015 	stw	zero,0(r2)
   42f6c:	10000115 	stw	zero,4(r2)
   42f70:	10000215 	stw	zero,8(r2)
   42f74:	10c0038d 	sth	r3,14(r2)
   42f78:	10000415 	stw	zero,16(r2)
   42f7c:	10000515 	stw	zero,20(r2)
   42f80:	10000615 	stw	zero,24(r2)
   42f84:	10800715 	stw	r2,28(r2)
   42f88:	12000815 	stw	r8,32(r2)
   42f8c:	11c00915 	stw	r7,36(r2)
   42f90:	11800a15 	stw	r6,40(r2)
   42f94:	11000b15 	stw	r4,44(r2)
   42f98:	f800283a 	ret

00042f9c <__sfp>:
   42f9c:	defffc04 	addi	sp,sp,-16
   42fa0:	00800174 	movhi	r2,5
   42fa4:	10a1fc04 	addi	r2,r2,-30736
   42fa8:	dc400115 	stw	r17,4(sp)
   42fac:	14400017 	ldw	r17,0(r2)
   42fb0:	dc800215 	stw	r18,8(sp)
   42fb4:	dfc00315 	stw	ra,12(sp)
   42fb8:	88800e17 	ldw	r2,56(r17)
   42fbc:	dc000015 	stw	r16,0(sp)
   42fc0:	2025883a 	mov	r18,r4
   42fc4:	10002826 	beq	r2,zero,43068 <__sfp+0xcc>
   42fc8:	8c40b804 	addi	r17,r17,736
   42fcc:	043fffc4 	movi	r16,-1
   42fd0:	89400117 	ldw	r5,4(r17)
   42fd4:	88800217 	ldw	r2,8(r17)
   42fd8:	297fffc4 	addi	r5,r5,-1
   42fdc:	28000a16 	blt	r5,zero,43008 <__sfp+0x6c>
   42fe0:	10c0030f 	ldh	r3,12(r2)
   42fe4:	18000c26 	beq	r3,zero,43018 <__sfp+0x7c>
   42fe8:	10c01a04 	addi	r3,r2,104
   42fec:	00000206 	br	42ff8 <__sfp+0x5c>
   42ff0:	19bfe90f 	ldh	r6,-92(r3)
   42ff4:	30000826 	beq	r6,zero,43018 <__sfp+0x7c>
   42ff8:	297fffc4 	addi	r5,r5,-1
   42ffc:	18bffd04 	addi	r2,r3,-12
   43000:	18c01704 	addi	r3,r3,92
   43004:	2c3ffa1e 	bne	r5,r16,42ff0 <__sfp+0x54>
   43008:	88800017 	ldw	r2,0(r17)
   4300c:	10001926 	beq	r2,zero,43074 <__sfp+0xd8>
   43010:	1023883a 	mov	r17,r2
   43014:	003fee06 	br	42fd0 <__sfp+0x34>
   43018:	00ffffc4 	movi	r3,-1
   4301c:	10c0038d 	sth	r3,14(r2)
   43020:	00c00044 	movi	r3,1
   43024:	10c0030d 	sth	r3,12(r2)
   43028:	10000015 	stw	zero,0(r2)
   4302c:	10000215 	stw	zero,8(r2)
   43030:	10000115 	stw	zero,4(r2)
   43034:	10000415 	stw	zero,16(r2)
   43038:	10000515 	stw	zero,20(r2)
   4303c:	10000615 	stw	zero,24(r2)
   43040:	10000c15 	stw	zero,48(r2)
   43044:	10000d15 	stw	zero,52(r2)
   43048:	10001115 	stw	zero,68(r2)
   4304c:	10001215 	stw	zero,72(r2)
   43050:	dfc00317 	ldw	ra,12(sp)
   43054:	dc800217 	ldw	r18,8(sp)
   43058:	dc400117 	ldw	r17,4(sp)
   4305c:	dc000017 	ldw	r16,0(sp)
   43060:	dec00404 	addi	sp,sp,16
   43064:	f800283a 	ret
   43068:	8809883a 	mov	r4,r17
   4306c:	0042e900 	call	42e90 <__sinit>
   43070:	003fd506 	br	42fc8 <__sfp+0x2c>
   43074:	9009883a 	mov	r4,r18
   43078:	01400104 	movi	r5,4
   4307c:	0042e080 	call	42e08 <__sfmoreglue>
   43080:	88800015 	stw	r2,0(r17)
   43084:	103fe21e 	bne	r2,zero,43010 <__sfp+0x74>
   43088:	00800304 	movi	r2,12
   4308c:	90800015 	stw	r2,0(r18)
   43090:	0005883a 	mov	r2,zero
   43094:	003fee06 	br	43050 <__sfp+0xb4>

00043098 <__sfp_lock_acquire>:
   43098:	f800283a 	ret

0004309c <__sfp_lock_release>:
   4309c:	f800283a 	ret

000430a0 <__sinit_lock_acquire>:
   430a0:	f800283a 	ret

000430a4 <__sinit_lock_release>:
   430a4:	f800283a 	ret

000430a8 <__fp_lock_all>:
   430a8:	00800174 	movhi	r2,5
   430ac:	10a1fd04 	addi	r2,r2,-30732
   430b0:	11000017 	ldw	r4,0(r2)
   430b4:	01400134 	movhi	r5,4
   430b8:	294b7b04 	addi	r5,r5,11756
   430bc:	00430d81 	jmpi	430d8 <_fwalk>

000430c0 <__fp_unlock_all>:
   430c0:	00800174 	movhi	r2,5
   430c4:	10a1fd04 	addi	r2,r2,-30732
   430c8:	11000017 	ldw	r4,0(r2)
   430cc:	01400134 	movhi	r5,4
   430d0:	294b7d04 	addi	r5,r5,11764
   430d4:	00430d81 	jmpi	430d8 <_fwalk>

000430d8 <_fwalk>:
   430d8:	defff904 	addi	sp,sp,-28
   430dc:	dcc00315 	stw	r19,12(sp)
   430e0:	24c0b804 	addi	r19,r4,736
   430e4:	dd400515 	stw	r21,20(sp)
   430e8:	dd000415 	stw	r20,16(sp)
   430ec:	dfc00615 	stw	ra,24(sp)
   430f0:	dc800215 	stw	r18,8(sp)
   430f4:	dc400115 	stw	r17,4(sp)
   430f8:	dc000015 	stw	r16,0(sp)
   430fc:	282b883a 	mov	r21,r5
   43100:	0029883a 	mov	r20,zero
   43104:	00430980 	call	43098 <__sfp_lock_acquire>
   43108:	98001226 	beq	r19,zero,43154 <_fwalk+0x7c>
   4310c:	04bfffc4 	movi	r18,-1
   43110:	9c400117 	ldw	r17,4(r19)
   43114:	9c000217 	ldw	r16,8(r19)
   43118:	8c7fffc4 	addi	r17,r17,-1
   4311c:	88000b16 	blt	r17,zero,4314c <_fwalk+0x74>
   43120:	84000304 	addi	r16,r16,12
   43124:	80c0000f 	ldh	r3,0(r16)
   43128:	8c7fffc4 	addi	r17,r17,-1
   4312c:	813ffd04 	addi	r4,r16,-12
   43130:	18000426 	beq	r3,zero,43144 <_fwalk+0x6c>
   43134:	80c0008f 	ldh	r3,2(r16)
   43138:	1c800226 	beq	r3,r18,43144 <_fwalk+0x6c>
   4313c:	a83ee83a 	callr	r21
   43140:	a0a8b03a 	or	r20,r20,r2
   43144:	84001704 	addi	r16,r16,92
   43148:	8cbff61e 	bne	r17,r18,43124 <_fwalk+0x4c>
   4314c:	9cc00017 	ldw	r19,0(r19)
   43150:	983fef1e 	bne	r19,zero,43110 <_fwalk+0x38>
   43154:	004309c0 	call	4309c <__sfp_lock_release>
   43158:	a005883a 	mov	r2,r20
   4315c:	dfc00617 	ldw	ra,24(sp)
   43160:	dd400517 	ldw	r21,20(sp)
   43164:	dd000417 	ldw	r20,16(sp)
   43168:	dcc00317 	ldw	r19,12(sp)
   4316c:	dc800217 	ldw	r18,8(sp)
   43170:	dc400117 	ldw	r17,4(sp)
   43174:	dc000017 	ldw	r16,0(sp)
   43178:	dec00704 	addi	sp,sp,28
   4317c:	f800283a 	ret

00043180 <_fwalk_reent>:
   43180:	defff804 	addi	sp,sp,-32
   43184:	dcc00315 	stw	r19,12(sp)
   43188:	24c0b804 	addi	r19,r4,736
   4318c:	dd800615 	stw	r22,24(sp)
   43190:	dd400515 	stw	r21,20(sp)
   43194:	dd000415 	stw	r20,16(sp)
   43198:	dfc00715 	stw	ra,28(sp)
   4319c:	dc800215 	stw	r18,8(sp)
   431a0:	dc400115 	stw	r17,4(sp)
   431a4:	dc000015 	stw	r16,0(sp)
   431a8:	2029883a 	mov	r20,r4
   431ac:	282b883a 	mov	r21,r5
   431b0:	002d883a 	mov	r22,zero
   431b4:	00430980 	call	43098 <__sfp_lock_acquire>
   431b8:	98001326 	beq	r19,zero,43208 <_fwalk_reent+0x88>
   431bc:	04bfffc4 	movi	r18,-1
   431c0:	9c400117 	ldw	r17,4(r19)
   431c4:	9c000217 	ldw	r16,8(r19)
   431c8:	8c7fffc4 	addi	r17,r17,-1
   431cc:	88000c16 	blt	r17,zero,43200 <_fwalk_reent+0x80>
   431d0:	84000304 	addi	r16,r16,12
   431d4:	80c0000f 	ldh	r3,0(r16)
   431d8:	8c7fffc4 	addi	r17,r17,-1
   431dc:	817ffd04 	addi	r5,r16,-12
   431e0:	18000526 	beq	r3,zero,431f8 <_fwalk_reent+0x78>
   431e4:	80c0008f 	ldh	r3,2(r16)
   431e8:	a009883a 	mov	r4,r20
   431ec:	1c800226 	beq	r3,r18,431f8 <_fwalk_reent+0x78>
   431f0:	a83ee83a 	callr	r21
   431f4:	b0acb03a 	or	r22,r22,r2
   431f8:	84001704 	addi	r16,r16,92
   431fc:	8cbff51e 	bne	r17,r18,431d4 <_fwalk_reent+0x54>
   43200:	9cc00017 	ldw	r19,0(r19)
   43204:	983fee1e 	bne	r19,zero,431c0 <_fwalk_reent+0x40>
   43208:	004309c0 	call	4309c <__sfp_lock_release>
   4320c:	b005883a 	mov	r2,r22
   43210:	dfc00717 	ldw	ra,28(sp)
   43214:	dd800617 	ldw	r22,24(sp)
   43218:	dd400517 	ldw	r21,20(sp)
   4321c:	dd000417 	ldw	r20,16(sp)
   43220:	dcc00317 	ldw	r19,12(sp)
   43224:	dc800217 	ldw	r18,8(sp)
   43228:	dc400117 	ldw	r17,4(sp)
   4322c:	dc000017 	ldw	r16,0(sp)
   43230:	dec00804 	addi	sp,sp,32
   43234:	f800283a 	ret

00043238 <__smakebuf_r>:
   43238:	2880030b 	ldhu	r2,12(r5)
   4323c:	deffed04 	addi	sp,sp,-76
   43240:	dc401015 	stw	r17,64(sp)
   43244:	10c0008c 	andi	r3,r2,2
   43248:	18ffffcc 	andi	r3,r3,65535
   4324c:	18e0001c 	xori	r3,r3,32768
   43250:	dc000f15 	stw	r16,60(sp)
   43254:	dfc01215 	stw	ra,72(sp)
   43258:	dc801115 	stw	r18,68(sp)
   4325c:	18e00004 	addi	r3,r3,-32768
   43260:	2821883a 	mov	r16,r5
   43264:	2023883a 	mov	r17,r4
   43268:	1800381e 	bne	r3,zero,4334c <__smakebuf_r+0x114>
   4326c:	2940038f 	ldh	r5,14(r5)
   43270:	28002d16 	blt	r5,zero,43328 <__smakebuf_r+0xf0>
   43274:	d80d883a 	mov	r6,sp
   43278:	004381c0 	call	4381c <_fstat_r>
   4327c:	10002916 	blt	r2,zero,43324 <__smakebuf_r+0xec>
   43280:	d8800117 	ldw	r2,4(sp)
   43284:	00e00014 	movui	r3,32768
   43288:	10bc000c 	andi	r2,r2,61440
   4328c:	10c03c26 	beq	r2,r3,43380 <__smakebuf_r+0x148>
   43290:	80c0030b 	ldhu	r3,12(r16)
   43294:	18c20014 	ori	r3,r3,2048
   43298:	80c0030d 	sth	r3,12(r16)
   4329c:	00c80004 	movi	r3,8192
   432a0:	10c00c1e 	bne	r2,r3,432d4 <__smakebuf_r+0x9c>
   432a4:	8140038f 	ldh	r5,14(r16)
   432a8:	8809883a 	mov	r4,r17
   432ac:	00438840 	call	43884 <_isatty_r>
   432b0:	10000826 	beq	r2,zero,432d4 <__smakebuf_r+0x9c>
   432b4:	80c0030b 	ldhu	r3,12(r16)
   432b8:	808010c4 	addi	r2,r16,67
   432bc:	80800015 	stw	r2,0(r16)
   432c0:	18c00054 	ori	r3,r3,1
   432c4:	80800415 	stw	r2,16(r16)
   432c8:	00800044 	movi	r2,1
   432cc:	80c0030d 	sth	r3,12(r16)
   432d0:	80800515 	stw	r2,20(r16)
   432d4:	04810004 	movi	r18,1024
   432d8:	8809883a 	mov	r4,r17
   432dc:	900b883a 	mov	r5,r18
   432e0:	0040ea40 	call	40ea4 <_malloc_r>
   432e4:	10003026 	beq	r2,zero,433a8 <__smakebuf_r+0x170>
   432e8:	80c0030b 	ldhu	r3,12(r16)
   432ec:	01000134 	movhi	r4,4
   432f0:	210b7f04 	addi	r4,r4,11772
   432f4:	89000f15 	stw	r4,60(r17)
   432f8:	18c02014 	ori	r3,r3,128
   432fc:	80c0030d 	sth	r3,12(r16)
   43300:	80800015 	stw	r2,0(r16)
   43304:	80800415 	stw	r2,16(r16)
   43308:	84800515 	stw	r18,20(r16)
   4330c:	dfc01217 	ldw	ra,72(sp)
   43310:	dc801117 	ldw	r18,68(sp)
   43314:	dc401017 	ldw	r17,64(sp)
   43318:	dc000f17 	ldw	r16,60(sp)
   4331c:	dec01304 	addi	sp,sp,76
   43320:	f800283a 	ret
   43324:	8080030b 	ldhu	r2,12(r16)
   43328:	10c0200c 	andi	r3,r2,128
   4332c:	18ffffcc 	andi	r3,r3,65535
   43330:	18e0001c 	xori	r3,r3,32768
   43334:	18e00004 	addi	r3,r3,-32768
   43338:	18000f1e 	bne	r3,zero,43378 <__smakebuf_r+0x140>
   4333c:	04810004 	movi	r18,1024
   43340:	10820014 	ori	r2,r2,2048
   43344:	8080030d 	sth	r2,12(r16)
   43348:	003fe306 	br	432d8 <__smakebuf_r+0xa0>
   4334c:	288010c4 	addi	r2,r5,67
   43350:	28800015 	stw	r2,0(r5)
   43354:	28800415 	stw	r2,16(r5)
   43358:	00800044 	movi	r2,1
   4335c:	28800515 	stw	r2,20(r5)
   43360:	dfc01217 	ldw	ra,72(sp)
   43364:	dc801117 	ldw	r18,68(sp)
   43368:	dc401017 	ldw	r17,64(sp)
   4336c:	dc000f17 	ldw	r16,60(sp)
   43370:	dec01304 	addi	sp,sp,76
   43374:	f800283a 	ret
   43378:	04801004 	movi	r18,64
   4337c:	003ff006 	br	43340 <__smakebuf_r+0x108>
   43380:	81000a17 	ldw	r4,40(r16)
   43384:	00c00134 	movhi	r3,4
   43388:	18cd6604 	addi	r3,r3,13720
   4338c:	20ffc01e 	bne	r4,r3,43290 <__smakebuf_r+0x58>
   43390:	8080030b 	ldhu	r2,12(r16)
   43394:	00c10004 	movi	r3,1024
   43398:	80c01315 	stw	r3,76(r16)
   4339c:	10c4b03a 	or	r2,r2,r3
   433a0:	8080030d 	sth	r2,12(r16)
   433a4:	003fcb06 	br	432d4 <__smakebuf_r+0x9c>
   433a8:	8080030b 	ldhu	r2,12(r16)
   433ac:	10c0800c 	andi	r3,r2,512
   433b0:	18ffffcc 	andi	r3,r3,65535
   433b4:	18e0001c 	xori	r3,r3,32768
   433b8:	18e00004 	addi	r3,r3,-32768
   433bc:	183fd31e 	bne	r3,zero,4330c <__smakebuf_r+0xd4>
   433c0:	10800094 	ori	r2,r2,2
   433c4:	80c010c4 	addi	r3,r16,67
   433c8:	8080030d 	sth	r2,12(r16)
   433cc:	00800044 	movi	r2,1
   433d0:	80c00015 	stw	r3,0(r16)
   433d4:	80c00415 	stw	r3,16(r16)
   433d8:	80800515 	stw	r2,20(r16)
   433dc:	003fcb06 	br	4330c <__smakebuf_r+0xd4>

000433e0 <memset>:
   433e0:	00c000c4 	movi	r3,3
   433e4:	2005883a 	mov	r2,r4
   433e8:	29403fcc 	andi	r5,r5,255
   433ec:	19802d2e 	bgeu	r3,r6,434a4 <memset+0xc4>
   433f0:	20c6703a 	and	r3,r4,r3
   433f4:	18002e1e 	bne	r3,zero,434b0 <memset+0xd0>
   433f8:	2806923a 	slli	r3,r5,8
   433fc:	010003c4 	movi	r4,15
   43400:	3011883a 	mov	r8,r6
   43404:	1946b03a 	or	r3,r3,r5
   43408:	180e943a 	slli	r7,r3,16
   4340c:	38ceb03a 	or	r7,r7,r3
   43410:	1007883a 	mov	r3,r2
   43414:	21800f2e 	bgeu	r4,r6,43454 <memset+0x74>
   43418:	19c00015 	stw	r7,0(r3)
   4341c:	19c00115 	stw	r7,4(r3)
   43420:	19c00215 	stw	r7,8(r3)
   43424:	19c00315 	stw	r7,12(r3)
   43428:	423ffc04 	addi	r8,r8,-16
   4342c:	18c00404 	addi	r3,r3,16
   43430:	223ff936 	bltu	r4,r8,43418 <memset+0x38>
   43434:	30fffc04 	addi	r3,r6,-16
   43438:	1806d13a 	srli	r3,r3,4
   4343c:	318003cc 	andi	r6,r6,15
   43440:	010000c4 	movi	r4,3
   43444:	18c00044 	addi	r3,r3,1
   43448:	1806913a 	slli	r3,r3,4
   4344c:	10c7883a 	add	r3,r2,r3
   43450:	21800e2e 	bgeu	r4,r6,4348c <memset+0xac>
   43454:	1813883a 	mov	r9,r3
   43458:	3011883a 	mov	r8,r6
   4345c:	010000c4 	movi	r4,3
   43460:	49c00015 	stw	r7,0(r9)
   43464:	423fff04 	addi	r8,r8,-4
   43468:	4a400104 	addi	r9,r9,4
   4346c:	223ffc36 	bltu	r4,r8,43460 <memset+0x80>
   43470:	313fff04 	addi	r4,r6,-4
   43474:	2008d0ba 	srli	r4,r4,2
   43478:	318000cc 	andi	r6,r6,3
   4347c:	21000044 	addi	r4,r4,1
   43480:	2109883a 	add	r4,r4,r4
   43484:	2109883a 	add	r4,r4,r4
   43488:	1907883a 	add	r3,r3,r4
   4348c:	30000a26 	beq	r6,zero,434b8 <memset+0xd8>
   43490:	198d883a 	add	r6,r3,r6
   43494:	19400005 	stb	r5,0(r3)
   43498:	18c00044 	addi	r3,r3,1
   4349c:	19bffd1e 	bne	r3,r6,43494 <memset+0xb4>
   434a0:	f800283a 	ret
   434a4:	2007883a 	mov	r3,r4
   434a8:	303ff91e 	bne	r6,zero,43490 <memset+0xb0>
   434ac:	00000206 	br	434b8 <memset+0xd8>
   434b0:	2007883a 	mov	r3,r4
   434b4:	003ff606 	br	43490 <memset+0xb0>
   434b8:	f800283a 	ret

000434bc <__sread>:
   434bc:	defffe04 	addi	sp,sp,-8
   434c0:	dc000015 	stw	r16,0(sp)
   434c4:	2821883a 	mov	r16,r5
   434c8:	2940038f 	ldh	r5,14(r5)
   434cc:	dfc00115 	stw	ra,4(sp)
   434d0:	00439540 	call	43954 <_read_r>
   434d4:	10000716 	blt	r2,zero,434f4 <__sread+0x38>
   434d8:	80c01417 	ldw	r3,80(r16)
   434dc:	1887883a 	add	r3,r3,r2
   434e0:	80c01415 	stw	r3,80(r16)
   434e4:	dfc00117 	ldw	ra,4(sp)
   434e8:	dc000017 	ldw	r16,0(sp)
   434ec:	dec00204 	addi	sp,sp,8
   434f0:	f800283a 	ret
   434f4:	80c0030b 	ldhu	r3,12(r16)
   434f8:	18fbffcc 	andi	r3,r3,61439
   434fc:	80c0030d 	sth	r3,12(r16)
   43500:	dfc00117 	ldw	ra,4(sp)
   43504:	dc000017 	ldw	r16,0(sp)
   43508:	dec00204 	addi	sp,sp,8
   4350c:	f800283a 	ret

00043510 <__swrite>:
   43510:	2880030b 	ldhu	r2,12(r5)
   43514:	defffb04 	addi	sp,sp,-20
   43518:	dcc00315 	stw	r19,12(sp)
   4351c:	10c0400c 	andi	r3,r2,256
   43520:	18ffffcc 	andi	r3,r3,65535
   43524:	18e0001c 	xori	r3,r3,32768
   43528:	dc800215 	stw	r18,8(sp)
   4352c:	dc400115 	stw	r17,4(sp)
   43530:	dc000015 	stw	r16,0(sp)
   43534:	dfc00415 	stw	ra,16(sp)
   43538:	18e00004 	addi	r3,r3,-32768
   4353c:	2821883a 	mov	r16,r5
   43540:	2027883a 	mov	r19,r4
   43544:	3025883a 	mov	r18,r6
   43548:	3823883a 	mov	r17,r7
   4354c:	18000526 	beq	r3,zero,43564 <__swrite+0x54>
   43550:	2940038f 	ldh	r5,14(r5)
   43554:	000d883a 	mov	r6,zero
   43558:	01c00084 	movi	r7,2
   4355c:	00438e80 	call	438e8 <_lseek_r>
   43560:	8080030b 	ldhu	r2,12(r16)
   43564:	8140038f 	ldh	r5,14(r16)
   43568:	10bbffcc 	andi	r2,r2,61439
   4356c:	9809883a 	mov	r4,r19
   43570:	900d883a 	mov	r6,r18
   43574:	880f883a 	mov	r7,r17
   43578:	8080030d 	sth	r2,12(r16)
   4357c:	dfc00417 	ldw	ra,16(sp)
   43580:	dcc00317 	ldw	r19,12(sp)
   43584:	dc800217 	ldw	r18,8(sp)
   43588:	dc400117 	ldw	r17,4(sp)
   4358c:	dc000017 	ldw	r16,0(sp)
   43590:	dec00504 	addi	sp,sp,20
   43594:	00435fc1 	jmpi	435fc <_write_r>

00043598 <__sseek>:
   43598:	defffe04 	addi	sp,sp,-8
   4359c:	dc000015 	stw	r16,0(sp)
   435a0:	2821883a 	mov	r16,r5
   435a4:	2940038f 	ldh	r5,14(r5)
   435a8:	dfc00115 	stw	ra,4(sp)
   435ac:	00438e80 	call	438e8 <_lseek_r>
   435b0:	00ffffc4 	movi	r3,-1
   435b4:	10c00826 	beq	r2,r3,435d8 <__sseek+0x40>
   435b8:	80c0030b 	ldhu	r3,12(r16)
   435bc:	80801415 	stw	r2,80(r16)
   435c0:	18c40014 	ori	r3,r3,4096
   435c4:	80c0030d 	sth	r3,12(r16)
   435c8:	dfc00117 	ldw	ra,4(sp)
   435cc:	dc000017 	ldw	r16,0(sp)
   435d0:	dec00204 	addi	sp,sp,8
   435d4:	f800283a 	ret
   435d8:	80c0030b 	ldhu	r3,12(r16)
   435dc:	18fbffcc 	andi	r3,r3,61439
   435e0:	80c0030d 	sth	r3,12(r16)
   435e4:	dfc00117 	ldw	ra,4(sp)
   435e8:	dc000017 	ldw	r16,0(sp)
   435ec:	dec00204 	addi	sp,sp,8
   435f0:	f800283a 	ret

000435f4 <__sclose>:
   435f4:	2940038f 	ldh	r5,14(r5)
   435f8:	00436681 	jmpi	43668 <_close_r>

000435fc <_write_r>:
   435fc:	defffd04 	addi	sp,sp,-12
   43600:	dc400115 	stw	r17,4(sp)
   43604:	dc000015 	stw	r16,0(sp)
   43608:	2023883a 	mov	r17,r4
   4360c:	04000174 	movhi	r16,5
   43610:	8428d104 	addi	r16,r16,-23740
   43614:	2809883a 	mov	r4,r5
   43618:	300b883a 	mov	r5,r6
   4361c:	380d883a 	mov	r6,r7
   43620:	dfc00215 	stw	ra,8(sp)
   43624:	80000015 	stw	zero,0(r16)
   43628:	00442880 	call	44288 <write>
   4362c:	00ffffc4 	movi	r3,-1
   43630:	10c00526 	beq	r2,r3,43648 <_write_r+0x4c>
   43634:	dfc00217 	ldw	ra,8(sp)
   43638:	dc400117 	ldw	r17,4(sp)
   4363c:	dc000017 	ldw	r16,0(sp)
   43640:	dec00304 	addi	sp,sp,12
   43644:	f800283a 	ret
   43648:	80c00017 	ldw	r3,0(r16)
   4364c:	183ff926 	beq	r3,zero,43634 <_write_r+0x38>
   43650:	88c00015 	stw	r3,0(r17)
   43654:	dfc00217 	ldw	ra,8(sp)
   43658:	dc400117 	ldw	r17,4(sp)
   4365c:	dc000017 	ldw	r16,0(sp)
   43660:	dec00304 	addi	sp,sp,12
   43664:	f800283a 	ret

00043668 <_close_r>:
   43668:	defffd04 	addi	sp,sp,-12
   4366c:	dc400115 	stw	r17,4(sp)
   43670:	dc000015 	stw	r16,0(sp)
   43674:	2023883a 	mov	r17,r4
   43678:	04000174 	movhi	r16,5
   4367c:	8428d104 	addi	r16,r16,-23740
   43680:	2809883a 	mov	r4,r5
   43684:	dfc00215 	stw	ra,8(sp)
   43688:	80000015 	stw	zero,0(r16)
   4368c:	0043a100 	call	43a10 <close>
   43690:	00ffffc4 	movi	r3,-1
   43694:	10c00526 	beq	r2,r3,436ac <_close_r+0x44>
   43698:	dfc00217 	ldw	ra,8(sp)
   4369c:	dc400117 	ldw	r17,4(sp)
   436a0:	dc000017 	ldw	r16,0(sp)
   436a4:	dec00304 	addi	sp,sp,12
   436a8:	f800283a 	ret
   436ac:	80c00017 	ldw	r3,0(r16)
   436b0:	183ff926 	beq	r3,zero,43698 <_close_r+0x30>
   436b4:	88c00015 	stw	r3,0(r17)
   436b8:	dfc00217 	ldw	ra,8(sp)
   436bc:	dc400117 	ldw	r17,4(sp)
   436c0:	dc000017 	ldw	r16,0(sp)
   436c4:	dec00304 	addi	sp,sp,12
   436c8:	f800283a 	ret

000436cc <_fclose_r>:
   436cc:	defffc04 	addi	sp,sp,-16
   436d0:	dc400115 	stw	r17,4(sp)
   436d4:	dc000015 	stw	r16,0(sp)
   436d8:	dfc00315 	stw	ra,12(sp)
   436dc:	dc800215 	stw	r18,8(sp)
   436e0:	2821883a 	mov	r16,r5
   436e4:	2023883a 	mov	r17,r4
   436e8:	28003426 	beq	r5,zero,437bc <_fclose_r+0xf0>
   436ec:	00430980 	call	43098 <__sfp_lock_acquire>
   436f0:	88000226 	beq	r17,zero,436fc <_fclose_r+0x30>
   436f4:	88800e17 	ldw	r2,56(r17)
   436f8:	10003826 	beq	r2,zero,437dc <_fclose_r+0x110>
   436fc:	8080030f 	ldh	r2,12(r16)
   43700:	10002526 	beq	r2,zero,43798 <_fclose_r+0xcc>
   43704:	8809883a 	mov	r4,r17
   43708:	800b883a 	mov	r5,r16
   4370c:	0042bd40 	call	42bd4 <_fflush_r>
   43710:	1025883a 	mov	r18,r2
   43714:	80800b17 	ldw	r2,44(r16)
   43718:	10000426 	beq	r2,zero,4372c <_fclose_r+0x60>
   4371c:	81400717 	ldw	r5,28(r16)
   43720:	8809883a 	mov	r4,r17
   43724:	103ee83a 	callr	r2
   43728:	10003516 	blt	r2,zero,43800 <_fclose_r+0x134>
   4372c:	8080030b 	ldhu	r2,12(r16)
   43730:	1080200c 	andi	r2,r2,128
   43734:	10bfffcc 	andi	r2,r2,65535
   43738:	10a0001c 	xori	r2,r2,32768
   4373c:	10a00004 	addi	r2,r2,-32768
   43740:	10002b1e 	bne	r2,zero,437f0 <_fclose_r+0x124>
   43744:	81400c17 	ldw	r5,48(r16)
   43748:	28000526 	beq	r5,zero,43760 <_fclose_r+0x94>
   4374c:	80801004 	addi	r2,r16,64
   43750:	28800226 	beq	r5,r2,4375c <_fclose_r+0x90>
   43754:	8809883a 	mov	r4,r17
   43758:	00418ec0 	call	418ec <_free_r>
   4375c:	80000c15 	stw	zero,48(r16)
   43760:	81401117 	ldw	r5,68(r16)
   43764:	28000326 	beq	r5,zero,43774 <_fclose_r+0xa8>
   43768:	8809883a 	mov	r4,r17
   4376c:	00418ec0 	call	418ec <_free_r>
   43770:	80001115 	stw	zero,68(r16)
   43774:	8000030d 	sth	zero,12(r16)
   43778:	004309c0 	call	4309c <__sfp_lock_release>
   4377c:	9005883a 	mov	r2,r18
   43780:	dfc00317 	ldw	ra,12(sp)
   43784:	dc800217 	ldw	r18,8(sp)
   43788:	dc400117 	ldw	r17,4(sp)
   4378c:	dc000017 	ldw	r16,0(sp)
   43790:	dec00404 	addi	sp,sp,16
   43794:	f800283a 	ret
   43798:	004309c0 	call	4309c <__sfp_lock_release>
   4379c:	0025883a 	mov	r18,zero
   437a0:	9005883a 	mov	r2,r18
   437a4:	dfc00317 	ldw	ra,12(sp)
   437a8:	dc800217 	ldw	r18,8(sp)
   437ac:	dc400117 	ldw	r17,4(sp)
   437b0:	dc000017 	ldw	r16,0(sp)
   437b4:	dec00404 	addi	sp,sp,16
   437b8:	f800283a 	ret
   437bc:	0025883a 	mov	r18,zero
   437c0:	9005883a 	mov	r2,r18
   437c4:	dfc00317 	ldw	ra,12(sp)
   437c8:	dc800217 	ldw	r18,8(sp)
   437cc:	dc400117 	ldw	r17,4(sp)
   437d0:	dc000017 	ldw	r16,0(sp)
   437d4:	dec00404 	addi	sp,sp,16
   437d8:	f800283a 	ret
   437dc:	8809883a 	mov	r4,r17
   437e0:	0042e900 	call	42e90 <__sinit>
   437e4:	8080030f 	ldh	r2,12(r16)
   437e8:	103fc61e 	bne	r2,zero,43704 <_fclose_r+0x38>
   437ec:	003fea06 	br	43798 <_fclose_r+0xcc>
   437f0:	81400417 	ldw	r5,16(r16)
   437f4:	8809883a 	mov	r4,r17
   437f8:	00418ec0 	call	418ec <_free_r>
   437fc:	003fd106 	br	43744 <_fclose_r+0x78>
   43800:	04bfffc4 	movi	r18,-1
   43804:	003fc906 	br	4372c <_fclose_r+0x60>

00043808 <fclose>:
   43808:	00800174 	movhi	r2,5
   4380c:	10a1fd04 	addi	r2,r2,-30732
   43810:	200b883a 	mov	r5,r4
   43814:	11000017 	ldw	r4,0(r2)
   43818:	00436cc1 	jmpi	436cc <_fclose_r>

0004381c <_fstat_r>:
   4381c:	defffd04 	addi	sp,sp,-12
   43820:	dc400115 	stw	r17,4(sp)
   43824:	dc000015 	stw	r16,0(sp)
   43828:	2023883a 	mov	r17,r4
   4382c:	04000174 	movhi	r16,5
   43830:	8428d104 	addi	r16,r16,-23740
   43834:	2809883a 	mov	r4,r5
   43838:	300b883a 	mov	r5,r6
   4383c:	dfc00215 	stw	ra,8(sp)
   43840:	80000015 	stw	zero,0(r16)
   43844:	0043b580 	call	43b58 <fstat>
   43848:	00ffffc4 	movi	r3,-1
   4384c:	10c00526 	beq	r2,r3,43864 <_fstat_r+0x48>
   43850:	dfc00217 	ldw	ra,8(sp)
   43854:	dc400117 	ldw	r17,4(sp)
   43858:	dc000017 	ldw	r16,0(sp)
   4385c:	dec00304 	addi	sp,sp,12
   43860:	f800283a 	ret
   43864:	80c00017 	ldw	r3,0(r16)
   43868:	183ff926 	beq	r3,zero,43850 <_fstat_r+0x34>
   4386c:	88c00015 	stw	r3,0(r17)
   43870:	dfc00217 	ldw	ra,8(sp)
   43874:	dc400117 	ldw	r17,4(sp)
   43878:	dc000017 	ldw	r16,0(sp)
   4387c:	dec00304 	addi	sp,sp,12
   43880:	f800283a 	ret

00043884 <_isatty_r>:
   43884:	defffd04 	addi	sp,sp,-12
   43888:	dc400115 	stw	r17,4(sp)
   4388c:	dc000015 	stw	r16,0(sp)
   43890:	2023883a 	mov	r17,r4
   43894:	04000174 	movhi	r16,5
   43898:	8428d104 	addi	r16,r16,-23740
   4389c:	2809883a 	mov	r4,r5
   438a0:	dfc00215 	stw	ra,8(sp)
   438a4:	80000015 	stw	zero,0(r16)
   438a8:	0043c580 	call	43c58 <isatty>
   438ac:	00ffffc4 	movi	r3,-1
   438b0:	10c00526 	beq	r2,r3,438c8 <_isatty_r+0x44>
   438b4:	dfc00217 	ldw	ra,8(sp)
   438b8:	dc400117 	ldw	r17,4(sp)
   438bc:	dc000017 	ldw	r16,0(sp)
   438c0:	dec00304 	addi	sp,sp,12
   438c4:	f800283a 	ret
   438c8:	80c00017 	ldw	r3,0(r16)
   438cc:	183ff926 	beq	r3,zero,438b4 <_isatty_r+0x30>
   438d0:	88c00015 	stw	r3,0(r17)
   438d4:	dfc00217 	ldw	ra,8(sp)
   438d8:	dc400117 	ldw	r17,4(sp)
   438dc:	dc000017 	ldw	r16,0(sp)
   438e0:	dec00304 	addi	sp,sp,12
   438e4:	f800283a 	ret

000438e8 <_lseek_r>:
   438e8:	defffd04 	addi	sp,sp,-12
   438ec:	dc400115 	stw	r17,4(sp)
   438f0:	dc000015 	stw	r16,0(sp)
   438f4:	2023883a 	mov	r17,r4
   438f8:	04000174 	movhi	r16,5
   438fc:	8428d104 	addi	r16,r16,-23740
   43900:	2809883a 	mov	r4,r5
   43904:	300b883a 	mov	r5,r6
   43908:	380d883a 	mov	r6,r7
   4390c:	dfc00215 	stw	ra,8(sp)
   43910:	80000015 	stw	zero,0(r16)
   43914:	0043e380 	call	43e38 <lseek>
   43918:	00ffffc4 	movi	r3,-1
   4391c:	10c00526 	beq	r2,r3,43934 <_lseek_r+0x4c>
   43920:	dfc00217 	ldw	ra,8(sp)
   43924:	dc400117 	ldw	r17,4(sp)
   43928:	dc000017 	ldw	r16,0(sp)
   4392c:	dec00304 	addi	sp,sp,12
   43930:	f800283a 	ret
   43934:	80c00017 	ldw	r3,0(r16)
   43938:	183ff926 	beq	r3,zero,43920 <_lseek_r+0x38>
   4393c:	88c00015 	stw	r3,0(r17)
   43940:	dfc00217 	ldw	ra,8(sp)
   43944:	dc400117 	ldw	r17,4(sp)
   43948:	dc000017 	ldw	r16,0(sp)
   4394c:	dec00304 	addi	sp,sp,12
   43950:	f800283a 	ret

00043954 <_read_r>:
   43954:	defffd04 	addi	sp,sp,-12
   43958:	dc400115 	stw	r17,4(sp)
   4395c:	dc000015 	stw	r16,0(sp)
   43960:	2023883a 	mov	r17,r4
   43964:	04000174 	movhi	r16,5
   43968:	8428d104 	addi	r16,r16,-23740
   4396c:	2809883a 	mov	r4,r5
   43970:	300b883a 	mov	r5,r6
   43974:	380d883a 	mov	r6,r7
   43978:	dfc00215 	stw	ra,8(sp)
   4397c:	80000015 	stw	zero,0(r16)
   43980:	00440140 	call	44014 <read>
   43984:	00ffffc4 	movi	r3,-1
   43988:	10c00526 	beq	r2,r3,439a0 <_read_r+0x4c>
   4398c:	dfc00217 	ldw	ra,8(sp)
   43990:	dc400117 	ldw	r17,4(sp)
   43994:	dc000017 	ldw	r16,0(sp)
   43998:	dec00304 	addi	sp,sp,12
   4399c:	f800283a 	ret
   439a0:	80c00017 	ldw	r3,0(r16)
   439a4:	183ff926 	beq	r3,zero,4398c <_read_r+0x38>
   439a8:	88c00015 	stw	r3,0(r17)
   439ac:	dfc00217 	ldw	ra,8(sp)
   439b0:	dc400117 	ldw	r17,4(sp)
   439b4:	dc000017 	ldw	r16,0(sp)
   439b8:	dec00304 	addi	sp,sp,12
   439bc:	f800283a 	ret

000439c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   439c0:	defffe04 	addi	sp,sp,-8
   439c4:	dfc00115 	stw	ra,4(sp)
   439c8:	df000015 	stw	fp,0(sp)
   439cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   439d0:	00800174 	movhi	r2,5
   439d4:	10a20304 	addi	r2,r2,-30708
   439d8:	10800017 	ldw	r2,0(r2)
   439dc:	10000526 	beq	r2,zero,439f4 <alt_get_errno+0x34>
   439e0:	00800174 	movhi	r2,5
   439e4:	10a20304 	addi	r2,r2,-30708
   439e8:	10800017 	ldw	r2,0(r2)
   439ec:	103ee83a 	callr	r2
   439f0:	00000206 	br	439fc <alt_get_errno+0x3c>
   439f4:	00800174 	movhi	r2,5
   439f8:	10a8d104 	addi	r2,r2,-23740
}
   439fc:	e037883a 	mov	sp,fp
   43a00:	dfc00117 	ldw	ra,4(sp)
   43a04:	df000017 	ldw	fp,0(sp)
   43a08:	dec00204 	addi	sp,sp,8
   43a0c:	f800283a 	ret

00043a10 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   43a10:	defffb04 	addi	sp,sp,-20
   43a14:	dfc00415 	stw	ra,16(sp)
   43a18:	df000315 	stw	fp,12(sp)
   43a1c:	df000304 	addi	fp,sp,12
   43a20:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   43a24:	e0bfff17 	ldw	r2,-4(fp)
   43a28:	10000716 	blt	r2,zero,43a48 <close+0x38>
   43a2c:	e13fff17 	ldw	r4,-4(fp)
   43a30:	01400304 	movi	r5,12
   43a34:	0040e540 	call	40e54 <__mulsi3>
   43a38:	00c00134 	movhi	r3,4
   43a3c:	18dd7304 	addi	r3,r3,30156
   43a40:	10c5883a 	add	r2,r2,r3
   43a44:	00000106 	br	43a4c <close+0x3c>
   43a48:	0005883a 	mov	r2,zero
   43a4c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   43a50:	e0bffd17 	ldw	r2,-12(fp)
   43a54:	10001826 	beq	r2,zero,43ab8 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   43a58:	e0bffd17 	ldw	r2,-12(fp)
   43a5c:	10800017 	ldw	r2,0(r2)
   43a60:	10800417 	ldw	r2,16(r2)
   43a64:	10000626 	beq	r2,zero,43a80 <close+0x70>
   43a68:	e0bffd17 	ldw	r2,-12(fp)
   43a6c:	10800017 	ldw	r2,0(r2)
   43a70:	10800417 	ldw	r2,16(r2)
   43a74:	e13ffd17 	ldw	r4,-12(fp)
   43a78:	103ee83a 	callr	r2
   43a7c:	00000106 	br	43a84 <close+0x74>
   43a80:	0005883a 	mov	r2,zero
   43a84:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   43a88:	e13fff17 	ldw	r4,-4(fp)
   43a8c:	00441080 	call	44108 <alt_release_fd>
    if (rval < 0)
   43a90:	e0bffe17 	ldw	r2,-8(fp)
   43a94:	1000060e 	bge	r2,zero,43ab0 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   43a98:	00439c00 	call	439c0 <alt_get_errno>
   43a9c:	e0fffe17 	ldw	r3,-8(fp)
   43aa0:	00c7c83a 	sub	r3,zero,r3
   43aa4:	10c00015 	stw	r3,0(r2)
      return -1;
   43aa8:	00bfffc4 	movi	r2,-1
   43aac:	00000606 	br	43ac8 <close+0xb8>
    }
    return 0;
   43ab0:	0005883a 	mov	r2,zero
   43ab4:	00000406 	br	43ac8 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   43ab8:	00439c00 	call	439c0 <alt_get_errno>
   43abc:	00c01444 	movi	r3,81
   43ac0:	10c00015 	stw	r3,0(r2)
    return -1;
   43ac4:	00bfffc4 	movi	r2,-1
  }
}
   43ac8:	e037883a 	mov	sp,fp
   43acc:	dfc00117 	ldw	ra,4(sp)
   43ad0:	df000017 	ldw	fp,0(sp)
   43ad4:	dec00204 	addi	sp,sp,8
   43ad8:	f800283a 	ret

00043adc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   43adc:	defffc04 	addi	sp,sp,-16
   43ae0:	df000315 	stw	fp,12(sp)
   43ae4:	df000304 	addi	fp,sp,12
   43ae8:	e13ffd15 	stw	r4,-12(fp)
   43aec:	e17ffe15 	stw	r5,-8(fp)
   43af0:	e1bfff15 	stw	r6,-4(fp)
  return len;
   43af4:	e0bfff17 	ldw	r2,-4(fp)
}
   43af8:	e037883a 	mov	sp,fp
   43afc:	df000017 	ldw	fp,0(sp)
   43b00:	dec00104 	addi	sp,sp,4
   43b04:	f800283a 	ret

00043b08 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43b08:	defffe04 	addi	sp,sp,-8
   43b0c:	dfc00115 	stw	ra,4(sp)
   43b10:	df000015 	stw	fp,0(sp)
   43b14:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43b18:	00800174 	movhi	r2,5
   43b1c:	10a20304 	addi	r2,r2,-30708
   43b20:	10800017 	ldw	r2,0(r2)
   43b24:	10000526 	beq	r2,zero,43b3c <alt_get_errno+0x34>
   43b28:	00800174 	movhi	r2,5
   43b2c:	10a20304 	addi	r2,r2,-30708
   43b30:	10800017 	ldw	r2,0(r2)
   43b34:	103ee83a 	callr	r2
   43b38:	00000206 	br	43b44 <alt_get_errno+0x3c>
   43b3c:	00800174 	movhi	r2,5
   43b40:	10a8d104 	addi	r2,r2,-23740
}
   43b44:	e037883a 	mov	sp,fp
   43b48:	dfc00117 	ldw	ra,4(sp)
   43b4c:	df000017 	ldw	fp,0(sp)
   43b50:	dec00204 	addi	sp,sp,8
   43b54:	f800283a 	ret

00043b58 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   43b58:	defffb04 	addi	sp,sp,-20
   43b5c:	dfc00415 	stw	ra,16(sp)
   43b60:	df000315 	stw	fp,12(sp)
   43b64:	df000304 	addi	fp,sp,12
   43b68:	e13ffe15 	stw	r4,-8(fp)
   43b6c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43b70:	e0bffe17 	ldw	r2,-8(fp)
   43b74:	10000716 	blt	r2,zero,43b94 <fstat+0x3c>
   43b78:	e13ffe17 	ldw	r4,-8(fp)
   43b7c:	01400304 	movi	r5,12
   43b80:	0040e540 	call	40e54 <__mulsi3>
   43b84:	00c00134 	movhi	r3,4
   43b88:	18dd7304 	addi	r3,r3,30156
   43b8c:	10c5883a 	add	r2,r2,r3
   43b90:	00000106 	br	43b98 <fstat+0x40>
   43b94:	0005883a 	mov	r2,zero
   43b98:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   43b9c:	e0bffd17 	ldw	r2,-12(fp)
   43ba0:	10001026 	beq	r2,zero,43be4 <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   43ba4:	e0bffd17 	ldw	r2,-12(fp)
   43ba8:	10800017 	ldw	r2,0(r2)
   43bac:	10800817 	ldw	r2,32(r2)
   43bb0:	10000726 	beq	r2,zero,43bd0 <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
   43bb4:	e0bffd17 	ldw	r2,-12(fp)
   43bb8:	10800017 	ldw	r2,0(r2)
   43bbc:	10800817 	ldw	r2,32(r2)
   43bc0:	e13ffd17 	ldw	r4,-12(fp)
   43bc4:	e17fff17 	ldw	r5,-4(fp)
   43bc8:	103ee83a 	callr	r2
   43bcc:	00000906 	br	43bf4 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   43bd0:	e0bfff17 	ldw	r2,-4(fp)
   43bd4:	00c80004 	movi	r3,8192
   43bd8:	10c00115 	stw	r3,4(r2)
      return 0;
   43bdc:	0005883a 	mov	r2,zero
   43be0:	00000406 	br	43bf4 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   43be4:	0043b080 	call	43b08 <alt_get_errno>
   43be8:	00c01444 	movi	r3,81
   43bec:	10c00015 	stw	r3,0(r2)
    return -1;
   43bf0:	00bfffc4 	movi	r2,-1
  }
}
   43bf4:	e037883a 	mov	sp,fp
   43bf8:	dfc00117 	ldw	ra,4(sp)
   43bfc:	df000017 	ldw	fp,0(sp)
   43c00:	dec00204 	addi	sp,sp,8
   43c04:	f800283a 	ret

00043c08 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43c08:	defffe04 	addi	sp,sp,-8
   43c0c:	dfc00115 	stw	ra,4(sp)
   43c10:	df000015 	stw	fp,0(sp)
   43c14:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43c18:	00800174 	movhi	r2,5
   43c1c:	10a20304 	addi	r2,r2,-30708
   43c20:	10800017 	ldw	r2,0(r2)
   43c24:	10000526 	beq	r2,zero,43c3c <alt_get_errno+0x34>
   43c28:	00800174 	movhi	r2,5
   43c2c:	10a20304 	addi	r2,r2,-30708
   43c30:	10800017 	ldw	r2,0(r2)
   43c34:	103ee83a 	callr	r2
   43c38:	00000206 	br	43c44 <alt_get_errno+0x3c>
   43c3c:	00800174 	movhi	r2,5
   43c40:	10a8d104 	addi	r2,r2,-23740
}
   43c44:	e037883a 	mov	sp,fp
   43c48:	dfc00117 	ldw	ra,4(sp)
   43c4c:	df000017 	ldw	fp,0(sp)
   43c50:	dec00204 	addi	sp,sp,8
   43c54:	f800283a 	ret

00043c58 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   43c58:	deffed04 	addi	sp,sp,-76
   43c5c:	dfc01215 	stw	ra,72(sp)
   43c60:	df001115 	stw	fp,68(sp)
   43c64:	df001104 	addi	fp,sp,68
   43c68:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43c6c:	e0bfff17 	ldw	r2,-4(fp)
   43c70:	10000716 	blt	r2,zero,43c90 <isatty+0x38>
   43c74:	e13fff17 	ldw	r4,-4(fp)
   43c78:	01400304 	movi	r5,12
   43c7c:	0040e540 	call	40e54 <__mulsi3>
   43c80:	00c00134 	movhi	r3,4
   43c84:	18dd7304 	addi	r3,r3,30156
   43c88:	10c5883a 	add	r2,r2,r3
   43c8c:	00000106 	br	43c94 <isatty+0x3c>
   43c90:	0005883a 	mov	r2,zero
   43c94:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   43c98:	e0bfef17 	ldw	r2,-68(fp)
   43c9c:	10000e26 	beq	r2,zero,43cd8 <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   43ca0:	e0bfef17 	ldw	r2,-68(fp)
   43ca4:	10800017 	ldw	r2,0(r2)
   43ca8:	10800817 	ldw	r2,32(r2)
   43cac:	1000021e 	bne	r2,zero,43cb8 <isatty+0x60>
    {
      return 1;
   43cb0:	00800044 	movi	r2,1
   43cb4:	00000c06 	br	43ce8 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   43cb8:	e0bff004 	addi	r2,fp,-64
   43cbc:	e13fff17 	ldw	r4,-4(fp)
   43cc0:	100b883a 	mov	r5,r2
   43cc4:	0043b580 	call	43b58 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   43cc8:	e0bff117 	ldw	r2,-60(fp)
   43ccc:	10880020 	cmpeqi	r2,r2,8192
   43cd0:	10803fcc 	andi	r2,r2,255
   43cd4:	00000406 	br	43ce8 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   43cd8:	0043c080 	call	43c08 <alt_get_errno>
   43cdc:	00c01444 	movi	r3,81
   43ce0:	10c00015 	stw	r3,0(r2)
    return 0;
   43ce4:	0005883a 	mov	r2,zero
  }
}
   43ce8:	e037883a 	mov	sp,fp
   43cec:	dfc00117 	ldw	ra,4(sp)
   43cf0:	df000017 	ldw	fp,0(sp)
   43cf4:	dec00204 	addi	sp,sp,8
   43cf8:	f800283a 	ret

00043cfc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   43cfc:	defffc04 	addi	sp,sp,-16
   43d00:	df000315 	stw	fp,12(sp)
   43d04:	df000304 	addi	fp,sp,12
   43d08:	e13ffd15 	stw	r4,-12(fp)
   43d0c:	e17ffe15 	stw	r5,-8(fp)
   43d10:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   43d14:	e0fffe17 	ldw	r3,-8(fp)
   43d18:	e0bffd17 	ldw	r2,-12(fp)
   43d1c:	18800e26 	beq	r3,r2,43d58 <alt_load_section+0x5c>
  {
    while( to != end )
   43d20:	00000a06 	br	43d4c <alt_load_section+0x50>
    {
      *to++ = *from++;
   43d24:	e0bffd17 	ldw	r2,-12(fp)
   43d28:	10c00017 	ldw	r3,0(r2)
   43d2c:	e0bffe17 	ldw	r2,-8(fp)
   43d30:	10c00015 	stw	r3,0(r2)
   43d34:	e0bffe17 	ldw	r2,-8(fp)
   43d38:	10800104 	addi	r2,r2,4
   43d3c:	e0bffe15 	stw	r2,-8(fp)
   43d40:	e0bffd17 	ldw	r2,-12(fp)
   43d44:	10800104 	addi	r2,r2,4
   43d48:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   43d4c:	e0fffe17 	ldw	r3,-8(fp)
   43d50:	e0bfff17 	ldw	r2,-4(fp)
   43d54:	18bff31e 	bne	r3,r2,43d24 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   43d58:	e037883a 	mov	sp,fp
   43d5c:	df000017 	ldw	fp,0(sp)
   43d60:	dec00104 	addi	sp,sp,4
   43d64:	f800283a 	ret

00043d68 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   43d68:	defffe04 	addi	sp,sp,-8
   43d6c:	dfc00115 	stw	ra,4(sp)
   43d70:	df000015 	stw	fp,0(sp)
   43d74:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   43d78:	01000174 	movhi	r4,5
   43d7c:	21221a04 	addi	r4,r4,-30616
   43d80:	01400134 	movhi	r5,4
   43d84:	295b6704 	addi	r5,r5,28060
   43d88:	01800174 	movhi	r6,5
   43d8c:	31a21a04 	addi	r6,r6,-30616
   43d90:	0043cfc0 	call	43cfc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   43d94:	01000134 	movhi	r4,4
   43d98:	21000804 	addi	r4,r4,32
   43d9c:	01400134 	movhi	r5,4
   43da0:	29400804 	addi	r5,r5,32
   43da4:	01800134 	movhi	r6,4
   43da8:	31806e04 	addi	r6,r6,440
   43dac:	0043cfc0 	call	43cfc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   43db0:	01000134 	movhi	r4,4
   43db4:	211b4d04 	addi	r4,r4,27956
   43db8:	01400134 	movhi	r5,4
   43dbc:	295b4d04 	addi	r5,r5,27956
   43dc0:	01800134 	movhi	r6,4
   43dc4:	319b6704 	addi	r6,r6,28060
   43dc8:	0043cfc0 	call	43cfc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   43dcc:	0045c100 	call	45c10 <alt_dcache_flush_all>
  alt_icache_flush_all();
   43dd0:	0045e580 	call	45e58 <alt_icache_flush_all>
}
   43dd4:	e037883a 	mov	sp,fp
   43dd8:	dfc00117 	ldw	ra,4(sp)
   43ddc:	df000017 	ldw	fp,0(sp)
   43de0:	dec00204 	addi	sp,sp,8
   43de4:	f800283a 	ret

00043de8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43de8:	defffe04 	addi	sp,sp,-8
   43dec:	dfc00115 	stw	ra,4(sp)
   43df0:	df000015 	stw	fp,0(sp)
   43df4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43df8:	00800174 	movhi	r2,5
   43dfc:	10a20304 	addi	r2,r2,-30708
   43e00:	10800017 	ldw	r2,0(r2)
   43e04:	10000526 	beq	r2,zero,43e1c <alt_get_errno+0x34>
   43e08:	00800174 	movhi	r2,5
   43e0c:	10a20304 	addi	r2,r2,-30708
   43e10:	10800017 	ldw	r2,0(r2)
   43e14:	103ee83a 	callr	r2
   43e18:	00000206 	br	43e24 <alt_get_errno+0x3c>
   43e1c:	00800174 	movhi	r2,5
   43e20:	10a8d104 	addi	r2,r2,-23740
}
   43e24:	e037883a 	mov	sp,fp
   43e28:	dfc00117 	ldw	ra,4(sp)
   43e2c:	df000017 	ldw	fp,0(sp)
   43e30:	dec00204 	addi	sp,sp,8
   43e34:	f800283a 	ret

00043e38 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   43e38:	defff904 	addi	sp,sp,-28
   43e3c:	dfc00615 	stw	ra,24(sp)
   43e40:	df000515 	stw	fp,20(sp)
   43e44:	df000504 	addi	fp,sp,20
   43e48:	e13ffd15 	stw	r4,-12(fp)
   43e4c:	e17ffe15 	stw	r5,-8(fp)
   43e50:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   43e54:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43e58:	e0bffd17 	ldw	r2,-12(fp)
   43e5c:	10000716 	blt	r2,zero,43e7c <lseek+0x44>
   43e60:	e13ffd17 	ldw	r4,-12(fp)
   43e64:	01400304 	movi	r5,12
   43e68:	0040e540 	call	40e54 <__mulsi3>
   43e6c:	00c00134 	movhi	r3,4
   43e70:	18dd7304 	addi	r3,r3,30156
   43e74:	10c5883a 	add	r2,r2,r3
   43e78:	00000106 	br	43e80 <lseek+0x48>
   43e7c:	0005883a 	mov	r2,zero
   43e80:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   43e84:	e0bffc17 	ldw	r2,-16(fp)
   43e88:	10001026 	beq	r2,zero,43ecc <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   43e8c:	e0bffc17 	ldw	r2,-16(fp)
   43e90:	10800017 	ldw	r2,0(r2)
   43e94:	10800717 	ldw	r2,28(r2)
   43e98:	10000926 	beq	r2,zero,43ec0 <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   43e9c:	e0bffc17 	ldw	r2,-16(fp)
   43ea0:	10800017 	ldw	r2,0(r2)
   43ea4:	10800717 	ldw	r2,28(r2)
   43ea8:	e13ffc17 	ldw	r4,-16(fp)
   43eac:	e17ffe17 	ldw	r5,-8(fp)
   43eb0:	e1bfff17 	ldw	r6,-4(fp)
   43eb4:	103ee83a 	callr	r2
   43eb8:	e0bffb15 	stw	r2,-20(fp)
   43ebc:	00000506 	br	43ed4 <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   43ec0:	00bfde84 	movi	r2,-134
   43ec4:	e0bffb15 	stw	r2,-20(fp)
   43ec8:	00000206 	br	43ed4 <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
   43ecc:	00bfebc4 	movi	r2,-81
   43ed0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   43ed4:	e0bffb17 	ldw	r2,-20(fp)
   43ed8:	1000060e 	bge	r2,zero,43ef4 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   43edc:	0043de80 	call	43de8 <alt_get_errno>
   43ee0:	e0fffb17 	ldw	r3,-20(fp)
   43ee4:	00c7c83a 	sub	r3,zero,r3
   43ee8:	10c00015 	stw	r3,0(r2)
    rc = -1;
   43eec:	00bfffc4 	movi	r2,-1
   43ef0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   43ef4:	e0bffb17 	ldw	r2,-20(fp)
}
   43ef8:	e037883a 	mov	sp,fp
   43efc:	dfc00117 	ldw	ra,4(sp)
   43f00:	df000017 	ldw	fp,0(sp)
   43f04:	dec00204 	addi	sp,sp,8
   43f08:	f800283a 	ret

00043f0c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   43f0c:	defffd04 	addi	sp,sp,-12
   43f10:	dfc00215 	stw	ra,8(sp)
   43f14:	df000115 	stw	fp,4(sp)
   43f18:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   43f1c:	0009883a 	mov	r4,zero
   43f20:	00443b00 	call	443b0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   43f24:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   43f28:	00443e40 	call	443e4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   43f2c:	01000134 	movhi	r4,4
   43f30:	211b5c04 	addi	r4,r4,28016
   43f34:	01400134 	movhi	r5,4
   43f38:	295b5c04 	addi	r5,r5,28016
   43f3c:	01800134 	movhi	r6,4
   43f40:	319b5c04 	addi	r6,r6,28016
   43f44:	004621c0 	call	4621c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   43f48:	0045d1c0 	call	45d1c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   43f4c:	01000134 	movhi	r4,4
   43f50:	21175e04 	addi	r4,r4,23928
   43f54:	00469600 	call	46960 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   43f58:	d126dd17 	ldw	r4,-25740(gp)
   43f5c:	d0e6de17 	ldw	r3,-25736(gp)
   43f60:	d0a6df17 	ldw	r2,-25732(gp)
   43f64:	180b883a 	mov	r5,r3
   43f68:	100d883a 	mov	r6,r2
   43f6c:	0040de00 	call	40de0 <main>
   43f70:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   43f74:	01000044 	movi	r4,1
   43f78:	0043a100 	call	43a10 <close>
  exit (result);
   43f7c:	e13fff17 	ldw	r4,-4(fp)
   43f80:	00469740 	call	46974 <exit>

00043f84 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   43f84:	defffe04 	addi	sp,sp,-8
   43f88:	df000115 	stw	fp,4(sp)
   43f8c:	df000104 	addi	fp,sp,4
   43f90:	e13fff15 	stw	r4,-4(fp)
}
   43f94:	e037883a 	mov	sp,fp
   43f98:	df000017 	ldw	fp,0(sp)
   43f9c:	dec00104 	addi	sp,sp,4
   43fa0:	f800283a 	ret

00043fa4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   43fa4:	defffe04 	addi	sp,sp,-8
   43fa8:	df000115 	stw	fp,4(sp)
   43fac:	df000104 	addi	fp,sp,4
   43fb0:	e13fff15 	stw	r4,-4(fp)
}
   43fb4:	e037883a 	mov	sp,fp
   43fb8:	df000017 	ldw	fp,0(sp)
   43fbc:	dec00104 	addi	sp,sp,4
   43fc0:	f800283a 	ret

00043fc4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43fc4:	defffe04 	addi	sp,sp,-8
   43fc8:	dfc00115 	stw	ra,4(sp)
   43fcc:	df000015 	stw	fp,0(sp)
   43fd0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43fd4:	00800174 	movhi	r2,5
   43fd8:	10a20304 	addi	r2,r2,-30708
   43fdc:	10800017 	ldw	r2,0(r2)
   43fe0:	10000526 	beq	r2,zero,43ff8 <alt_get_errno+0x34>
   43fe4:	00800174 	movhi	r2,5
   43fe8:	10a20304 	addi	r2,r2,-30708
   43fec:	10800017 	ldw	r2,0(r2)
   43ff0:	103ee83a 	callr	r2
   43ff4:	00000206 	br	44000 <alt_get_errno+0x3c>
   43ff8:	00800174 	movhi	r2,5
   43ffc:	10a8d104 	addi	r2,r2,-23740
}
   44000:	e037883a 	mov	sp,fp
   44004:	dfc00117 	ldw	ra,4(sp)
   44008:	df000017 	ldw	fp,0(sp)
   4400c:	dec00204 	addi	sp,sp,8
   44010:	f800283a 	ret

00044014 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   44014:	defff904 	addi	sp,sp,-28
   44018:	dfc00615 	stw	ra,24(sp)
   4401c:	df000515 	stw	fp,20(sp)
   44020:	df000504 	addi	fp,sp,20
   44024:	e13ffd15 	stw	r4,-12(fp)
   44028:	e17ffe15 	stw	r5,-8(fp)
   4402c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   44030:	e0bffd17 	ldw	r2,-12(fp)
   44034:	10000716 	blt	r2,zero,44054 <read+0x40>
   44038:	e13ffd17 	ldw	r4,-12(fp)
   4403c:	01400304 	movi	r5,12
   44040:	0040e540 	call	40e54 <__mulsi3>
   44044:	00c00134 	movhi	r3,4
   44048:	18dd7304 	addi	r3,r3,30156
   4404c:	10c5883a 	add	r2,r2,r3
   44050:	00000106 	br	44058 <read+0x44>
   44054:	0005883a 	mov	r2,zero
   44058:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   4405c:	e0bffb17 	ldw	r2,-20(fp)
   44060:	10002026 	beq	r2,zero,440e4 <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   44064:	e0bffb17 	ldw	r2,-20(fp)
   44068:	10800217 	ldw	r2,8(r2)
   4406c:	108000cc 	andi	r2,r2,3
   44070:	10800060 	cmpeqi	r2,r2,1
   44074:	1000171e 	bne	r2,zero,440d4 <read+0xc0>
        (fd->dev->read))
   44078:	e0bffb17 	ldw	r2,-20(fp)
   4407c:	10800017 	ldw	r2,0(r2)
   44080:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   44084:	10001326 	beq	r2,zero,440d4 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   44088:	e0bffb17 	ldw	r2,-20(fp)
   4408c:	10800017 	ldw	r2,0(r2)
   44090:	10c00517 	ldw	r3,20(r2)
   44094:	e0bfff17 	ldw	r2,-4(fp)
   44098:	e13ffb17 	ldw	r4,-20(fp)
   4409c:	e17ffe17 	ldw	r5,-8(fp)
   440a0:	100d883a 	mov	r6,r2
   440a4:	183ee83a 	callr	r3
   440a8:	e0bffc15 	stw	r2,-16(fp)
   440ac:	e0bffc17 	ldw	r2,-16(fp)
   440b0:	1000060e 	bge	r2,zero,440cc <read+0xb8>
        {
          ALT_ERRNO = -rval;
   440b4:	0043fc40 	call	43fc4 <alt_get_errno>
   440b8:	e0fffc17 	ldw	r3,-16(fp)
   440bc:	00c7c83a 	sub	r3,zero,r3
   440c0:	10c00015 	stw	r3,0(r2)
          return -1;
   440c4:	00bfffc4 	movi	r2,-1
   440c8:	00000a06 	br	440f4 <read+0xe0>
        }
        return rval;
   440cc:	e0bffc17 	ldw	r2,-16(fp)
   440d0:	00000806 	br	440f4 <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   440d4:	0043fc40 	call	43fc4 <alt_get_errno>
   440d8:	00c00344 	movi	r3,13
   440dc:	10c00015 	stw	r3,0(r2)
   440e0:	00000306 	br	440f0 <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   440e4:	0043fc40 	call	43fc4 <alt_get_errno>
   440e8:	00c01444 	movi	r3,81
   440ec:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   440f0:	00bfffc4 	movi	r2,-1
}
   440f4:	e037883a 	mov	sp,fp
   440f8:	dfc00117 	ldw	ra,4(sp)
   440fc:	df000017 	ldw	fp,0(sp)
   44100:	dec00204 	addi	sp,sp,8
   44104:	f800283a 	ret

00044108 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   44108:	defffc04 	addi	sp,sp,-16
   4410c:	dfc00315 	stw	ra,12(sp)
   44110:	df000215 	stw	fp,8(sp)
   44114:	dc000115 	stw	r16,4(sp)
   44118:	df000104 	addi	fp,sp,4
   4411c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   44120:	e0bfff17 	ldw	r2,-4(fp)
   44124:	108000d0 	cmplti	r2,r2,3
   44128:	1000111e 	bne	r2,zero,44170 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   4412c:	04000134 	movhi	r16,4
   44130:	841d7304 	addi	r16,r16,30156
   44134:	e0bfff17 	ldw	r2,-4(fp)
   44138:	1009883a 	mov	r4,r2
   4413c:	01400304 	movi	r5,12
   44140:	0040e540 	call	40e54 <__mulsi3>
   44144:	8085883a 	add	r2,r16,r2
   44148:	10800204 	addi	r2,r2,8
   4414c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   44150:	04000134 	movhi	r16,4
   44154:	841d7304 	addi	r16,r16,30156
   44158:	e0bfff17 	ldw	r2,-4(fp)
   4415c:	1009883a 	mov	r4,r2
   44160:	01400304 	movi	r5,12
   44164:	0040e540 	call	40e54 <__mulsi3>
   44168:	8085883a 	add	r2,r16,r2
   4416c:	10000015 	stw	zero,0(r2)
  }
}
   44170:	e037883a 	mov	sp,fp
   44174:	dfc00217 	ldw	ra,8(sp)
   44178:	df000117 	ldw	fp,4(sp)
   4417c:	dc000017 	ldw	r16,0(sp)
   44180:	dec00304 	addi	sp,sp,12
   44184:	f800283a 	ret

00044188 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   44188:	defff904 	addi	sp,sp,-28
   4418c:	df000615 	stw	fp,24(sp)
   44190:	df000604 	addi	fp,sp,24
   44194:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44198:	0005303a 	rdctl	r2,status
   4419c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   441a0:	e0fffc17 	ldw	r3,-16(fp)
   441a4:	00bfff84 	movi	r2,-2
   441a8:	1884703a 	and	r2,r3,r2
   441ac:	1001703a 	wrctl	status,r2
  
  return context;
   441b0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   441b4:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   441b8:	d0a00f17 	ldw	r2,-32708(gp)
   441bc:	10c000c4 	addi	r3,r2,3
   441c0:	00bfff04 	movi	r2,-4
   441c4:	1884703a 	and	r2,r3,r2
   441c8:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   441cc:	d0e00f17 	ldw	r3,-32708(gp)
   441d0:	e0bfff17 	ldw	r2,-4(fp)
   441d4:	1885883a 	add	r2,r3,r2
   441d8:	00c00174 	movhi	r3,5
   441dc:	18dc0004 	addi	r3,r3,28672
   441e0:	1880062e 	bgeu	r3,r2,441fc <sbrk+0x74>
   441e4:	e0bffa17 	ldw	r2,-24(fp)
   441e8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   441ec:	e0bffd17 	ldw	r2,-12(fp)
   441f0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   441f4:	00bfffc4 	movi	r2,-1
   441f8:	00000b06 	br	44228 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   441fc:	d0a00f17 	ldw	r2,-32708(gp)
   44200:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   44204:	d0e00f17 	ldw	r3,-32708(gp)
   44208:	e0bfff17 	ldw	r2,-4(fp)
   4420c:	1885883a 	add	r2,r3,r2
   44210:	d0a00f15 	stw	r2,-32708(gp)
   44214:	e0bffa17 	ldw	r2,-24(fp)
   44218:	e0bffe15 	stw	r2,-8(fp)
   4421c:	e0bffe17 	ldw	r2,-8(fp)
   44220:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   44224:	e0bffb17 	ldw	r2,-20(fp)
} 
   44228:	e037883a 	mov	sp,fp
   4422c:	df000017 	ldw	fp,0(sp)
   44230:	dec00104 	addi	sp,sp,4
   44234:	f800283a 	ret

00044238 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   44238:	defffe04 	addi	sp,sp,-8
   4423c:	dfc00115 	stw	ra,4(sp)
   44240:	df000015 	stw	fp,0(sp)
   44244:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   44248:	00800174 	movhi	r2,5
   4424c:	10a20304 	addi	r2,r2,-30708
   44250:	10800017 	ldw	r2,0(r2)
   44254:	10000526 	beq	r2,zero,4426c <alt_get_errno+0x34>
   44258:	00800174 	movhi	r2,5
   4425c:	10a20304 	addi	r2,r2,-30708
   44260:	10800017 	ldw	r2,0(r2)
   44264:	103ee83a 	callr	r2
   44268:	00000206 	br	44274 <alt_get_errno+0x3c>
   4426c:	00800174 	movhi	r2,5
   44270:	10a8d104 	addi	r2,r2,-23740
}
   44274:	e037883a 	mov	sp,fp
   44278:	dfc00117 	ldw	ra,4(sp)
   4427c:	df000017 	ldw	fp,0(sp)
   44280:	dec00204 	addi	sp,sp,8
   44284:	f800283a 	ret

00044288 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   44288:	defff904 	addi	sp,sp,-28
   4428c:	dfc00615 	stw	ra,24(sp)
   44290:	df000515 	stw	fp,20(sp)
   44294:	df000504 	addi	fp,sp,20
   44298:	e13ffd15 	stw	r4,-12(fp)
   4429c:	e17ffe15 	stw	r5,-8(fp)
   442a0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   442a4:	e0bffd17 	ldw	r2,-12(fp)
   442a8:	10000716 	blt	r2,zero,442c8 <write+0x40>
   442ac:	e13ffd17 	ldw	r4,-12(fp)
   442b0:	01400304 	movi	r5,12
   442b4:	0040e540 	call	40e54 <__mulsi3>
   442b8:	00c00134 	movhi	r3,4
   442bc:	18dd7304 	addi	r3,r3,30156
   442c0:	10c5883a 	add	r2,r2,r3
   442c4:	00000106 	br	442cc <write+0x44>
   442c8:	0005883a 	mov	r2,zero
   442cc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   442d0:	e0bffb17 	ldw	r2,-20(fp)
   442d4:	10001f26 	beq	r2,zero,44354 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   442d8:	e0bffb17 	ldw	r2,-20(fp)
   442dc:	10800217 	ldw	r2,8(r2)
   442e0:	108000cc 	andi	r2,r2,3
   442e4:	10001726 	beq	r2,zero,44344 <write+0xbc>
   442e8:	e0bffb17 	ldw	r2,-20(fp)
   442ec:	10800017 	ldw	r2,0(r2)
   442f0:	10800617 	ldw	r2,24(r2)
   442f4:	10001326 	beq	r2,zero,44344 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   442f8:	e0bffb17 	ldw	r2,-20(fp)
   442fc:	10800017 	ldw	r2,0(r2)
   44300:	10c00617 	ldw	r3,24(r2)
   44304:	e0bfff17 	ldw	r2,-4(fp)
   44308:	e13ffb17 	ldw	r4,-20(fp)
   4430c:	e17ffe17 	ldw	r5,-8(fp)
   44310:	100d883a 	mov	r6,r2
   44314:	183ee83a 	callr	r3
   44318:	e0bffc15 	stw	r2,-16(fp)
   4431c:	e0bffc17 	ldw	r2,-16(fp)
   44320:	1000060e 	bge	r2,zero,4433c <write+0xb4>
      {
        ALT_ERRNO = -rval;
   44324:	00442380 	call	44238 <alt_get_errno>
   44328:	e0fffc17 	ldw	r3,-16(fp)
   4432c:	00c7c83a 	sub	r3,zero,r3
   44330:	10c00015 	stw	r3,0(r2)
        return -1;
   44334:	00bfffc4 	movi	r2,-1
   44338:	00000a06 	br	44364 <write+0xdc>
      }
      return rval;
   4433c:	e0bffc17 	ldw	r2,-16(fp)
   44340:	00000806 	br	44364 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
   44344:	00442380 	call	44238 <alt_get_errno>
   44348:	00c00344 	movi	r3,13
   4434c:	10c00015 	stw	r3,0(r2)
   44350:	00000306 	br	44360 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   44354:	00442380 	call	44238 <alt_get_errno>
   44358:	00c01444 	movi	r3,81
   4435c:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   44360:	00bfffc4 	movi	r2,-1
}
   44364:	e037883a 	mov	sp,fp
   44368:	dfc00117 	ldw	ra,4(sp)
   4436c:	df000017 	ldw	fp,0(sp)
   44370:	dec00204 	addi	sp,sp,8
   44374:	f800283a 	ret

00044378 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   44378:	defffd04 	addi	sp,sp,-12
   4437c:	dfc00215 	stw	ra,8(sp)
   44380:	df000115 	stw	fp,4(sp)
   44384:	df000104 	addi	fp,sp,4
   44388:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   4438c:	e13fff17 	ldw	r4,-4(fp)
   44390:	01400174 	movhi	r5,5
   44394:	29620004 	addi	r5,r5,-30720
   44398:	0045c7c0 	call	45c7c <alt_dev_llist_insert>
}
   4439c:	e037883a 	mov	sp,fp
   443a0:	dfc00117 	ldw	ra,4(sp)
   443a4:	df000017 	ldw	fp,0(sp)
   443a8:	dec00204 	addi	sp,sp,8
   443ac:	f800283a 	ret

000443b0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   443b0:	defffd04 	addi	sp,sp,-12
   443b4:	dfc00215 	stw	ra,8(sp)
   443b8:	df000115 	stw	fp,4(sp)
   443bc:	df000104 	addi	fp,sp,4
   443c0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU3, cpu3);
   443c4:	00466c80 	call	466c8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   443c8:	00800044 	movi	r2,1
   443cc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   443d0:	e037883a 	mov	sp,fp
   443d4:	dfc00117 	ldw	ra,4(sp)
   443d8:	df000017 	ldw	fp,0(sp)
   443dc:	dec00204 	addi	sp,sp,8
   443e0:	f800283a 	ret

000443e4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   443e4:	defffe04 	addi	sp,sp,-8
   443e8:	dfc00115 	stw	ra,4(sp)
   443ec:	df000015 	stw	fp,0(sp)
   443f0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER3, timer3);
   443f4:	010000b4 	movhi	r4,2
   443f8:	21041004 	addi	r4,r4,4160
   443fc:	000b883a 	mov	r5,zero
   44400:	01800044 	movi	r6,1
   44404:	01c0fa04 	movi	r7,1000
   44408:	00454200 	call	45420 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_FIFO_INIT ( FIFO2TO3, fifo2to3);
   4440c:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO3TO4, fifo3to4);
   44410:	0001883a 	nop
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART3, jtag_uart3);
   44414:	01000134 	movhi	r4,4
   44418:	211ddd04 	addi	r4,r4,30580
   4441c:	000b883a 	mov	r5,zero
   44420:	01800404 	movi	r6,16
   44424:	0044aac0 	call	44aac <altera_avalon_jtag_uart_init>
   44428:	01000134 	movhi	r4,4
   4442c:	211dd304 	addi	r4,r4,30540
   44430:	00443780 	call	44378 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   44434:	0001883a 	nop
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
   44438:	01000174 	movhi	r4,5
   4443c:	2121eb04 	addi	r4,r4,-30804
   44440:	0045dd40 	call	45dd4 <alt_fs_reg>
}
   44444:	e037883a 	mov	sp,fp
   44448:	dfc00117 	ldw	ra,4(sp)
   4444c:	df000017 	ldw	fp,0(sp)
   44450:	dec00204 	addi	sp,sp,8
   44454:	f800283a 	ret

00044458 <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
   44458:	defffa04 	addi	sp,sp,-24
   4445c:	dfc00515 	stw	ra,20(sp)
   44460:	df000415 	stw	fp,16(sp)
   44464:	df000404 	addi	fp,sp,16
   44468:	e13ffc15 	stw	r4,-16(fp)
   4446c:	e17ffd15 	stw	r5,-12(fp)
   44470:	e1bffe15 	stw	r6,-8(fp)
   44474:	e1ffff15 	stw	r7,-4(fp)
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
   44478:	e13ffc17 	ldw	r4,-16(fp)
   4447c:	01400fc4 	movi	r5,63
   44480:	00446240 	call	44624 <altera_avalon_fifo_clear_event>
   44484:	10000226 	beq	r2,zero,44490 <altera_avalon_fifo_init+0x38>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   44488:	00bfffc4 	movi	r2,-1
   4448c:	00001306 	br	444dc <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
   44490:	e13ffc17 	ldw	r4,-16(fp)
   44494:	e17ffd17 	ldw	r5,-12(fp)
   44498:	00446800 	call	44680 <altera_avalon_fifo_write_ienable>
   4449c:	10000226 	beq	r2,zero,444a8 <altera_avalon_fifo_init+0x50>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   444a0:	00bfff84 	movi	r2,-2
   444a4:	00000d06 	br	444dc <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
   444a8:	e13ffc17 	ldw	r4,-16(fp)
   444ac:	e17fff17 	ldw	r5,-4(fp)
   444b0:	00446d80 	call	446d8 <altera_avalon_fifo_write_almostfull>
   444b4:	10000226 	beq	r2,zero,444c0 <altera_avalon_fifo_init+0x68>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   444b8:	00bfff44 	movi	r2,-3
   444bc:	00000706 	br	444dc <altera_avalon_fifo_init+0x84>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
   444c0:	e13ffc17 	ldw	r4,-16(fp)
   444c4:	e17ffe17 	ldw	r5,-8(fp)
   444c8:	00447300 	call	44730 <altera_avalon_fifo_write_almostempty>
   444cc:	10000226 	beq	r2,zero,444d8 <altera_avalon_fifo_init+0x80>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   444d0:	00bfff44 	movi	r2,-3
   444d4:	00000106 	br	444dc <altera_avalon_fifo_init+0x84>
    }

    return ALTERA_AVALON_FIFO_OK;
   444d8:	0005883a 	mov	r2,zero
}
   444dc:	e037883a 	mov	sp,fp
   444e0:	dfc00117 	ldw	ra,4(sp)
   444e4:	df000017 	ldw	fp,0(sp)
   444e8:	dec00204 	addi	sp,sp,8
   444ec:	f800283a 	ret

000444f0 <altera_avalon_fifo_read_status>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
   444f0:	defffd04 	addi	sp,sp,-12
   444f4:	df000215 	stw	fp,8(sp)
   444f8:	df000204 	addi	fp,sp,8
   444fc:	e13ffe15 	stw	r4,-8(fp)
   44500:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   44504:	e0bffe17 	ldw	r2,-8(fp)
   44508:	10800104 	addi	r2,r2,4
   4450c:	10800037 	ldwio	r2,0(r2)
   44510:	1007883a 	mov	r3,r2
   44514:	e0bfff17 	ldw	r2,-4(fp)
   44518:	1884703a 	and	r2,r3,r2
}
   4451c:	e037883a 	mov	sp,fp
   44520:	df000017 	ldw	fp,0(sp)
   44524:	dec00104 	addi	sp,sp,4
   44528:	f800283a 	ret

0004452c <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
   4452c:	defffd04 	addi	sp,sp,-12
   44530:	df000215 	stw	fp,8(sp)
   44534:	df000204 	addi	fp,sp,8
   44538:	e13ffe15 	stw	r4,-8(fp)
   4453c:	e17fff15 	stw	r5,-4(fp)
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
   44540:	e0bffe17 	ldw	r2,-8(fp)
   44544:	10800304 	addi	r2,r2,12
   44548:	10800037 	ldwio	r2,0(r2)
   4454c:	1007883a 	mov	r3,r2
   44550:	e0bfff17 	ldw	r2,-4(fp)
   44554:	1884703a 	and	r2,r3,r2
}
   44558:	e037883a 	mov	sp,fp
   4455c:	df000017 	ldw	fp,0(sp)
   44560:	dec00104 	addi	sp,sp,4
   44564:	f800283a 	ret

00044568 <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
   44568:	defffe04 	addi	sp,sp,-8
   4456c:	df000115 	stw	fp,4(sp)
   44570:	df000104 	addi	fp,sp,4
   44574:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
   44578:	e0bfff17 	ldw	r2,-4(fp)
   4457c:	10800404 	addi	r2,r2,16
   44580:	10800037 	ldwio	r2,0(r2)
}
   44584:	e037883a 	mov	sp,fp
   44588:	df000017 	ldw	fp,0(sp)
   4458c:	dec00104 	addi	sp,sp,4
   44590:	f800283a 	ret

00044594 <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
   44594:	defffe04 	addi	sp,sp,-8
   44598:	df000115 	stw	fp,4(sp)
   4459c:	df000104 	addi	fp,sp,4
   445a0:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
   445a4:	e0bfff17 	ldw	r2,-4(fp)
   445a8:	10800504 	addi	r2,r2,20
   445ac:	10800037 	ldwio	r2,0(r2)
}
   445b0:	e037883a 	mov	sp,fp
   445b4:	df000017 	ldw	fp,0(sp)
   445b8:	dec00104 	addi	sp,sp,4
   445bc:	f800283a 	ret

000445c0 <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
   445c0:	defffd04 	addi	sp,sp,-12
   445c4:	df000215 	stw	fp,8(sp)
   445c8:	df000204 	addi	fp,sp,8
   445cc:	e13ffe15 	stw	r4,-8(fp)
   445d0:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
   445d4:	e0bffe17 	ldw	r2,-8(fp)
   445d8:	10800204 	addi	r2,r2,8
   445dc:	10800037 	ldwio	r2,0(r2)
   445e0:	1007883a 	mov	r3,r2
   445e4:	e0bfff17 	ldw	r2,-4(fp)
   445e8:	1884703a 	and	r2,r3,r2
}
   445ec:	e037883a 	mov	sp,fp
   445f0:	df000017 	ldw	fp,0(sp)
   445f4:	dec00104 	addi	sp,sp,4
   445f8:	f800283a 	ret

000445fc <altera_avalon_fifo_read_level>:

int altera_avalon_fifo_read_level(alt_u32 address)
{
   445fc:	defffe04 	addi	sp,sp,-8
   44600:	df000115 	stw	fp,4(sp)
   44604:	df000104 	addi	fp,sp,4
   44608:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
   4460c:	e0bfff17 	ldw	r2,-4(fp)
   44610:	10800037 	ldwio	r2,0(r2)
}
   44614:	e037883a 	mov	sp,fp
   44618:	df000017 	ldw	fp,0(sp)
   4461c:	dec00104 	addi	sp,sp,4
   44620:	f800283a 	ret

00044624 <altera_avalon_fifo_clear_event>:

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
   44624:	defffd04 	addi	sp,sp,-12
   44628:	df000215 	stw	fp,8(sp)
   4462c:	df000204 	addi	fp,sp,8
   44630:	e13ffe15 	stw	r4,-8(fp)
   44634:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
   44638:	e0bffe17 	ldw	r2,-8(fp)
   4463c:	10800204 	addi	r2,r2,8
   44640:	e0ffff17 	ldw	r3,-4(fp)
   44644:	10c00035 	stwio	r3,0(r2)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
   44648:	e0bffe17 	ldw	r2,-8(fp)
   4464c:	10800204 	addi	r2,r2,8
   44650:	10800037 	ldwio	r2,0(r2)
   44654:	1007883a 	mov	r3,r2
   44658:	e0bfff17 	ldw	r2,-4(fp)
   4465c:	1884703a 	and	r2,r3,r2
   44660:	1000021e 	bne	r2,zero,4466c <altera_avalon_fifo_clear_event+0x48>
        return ALTERA_AVALON_FIFO_OK;
   44664:	0005883a 	mov	r2,zero
   44668:	00000106 	br	44670 <altera_avalon_fifo_clear_event+0x4c>
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   4466c:	00bfffc4 	movi	r2,-1
}
   44670:	e037883a 	mov	sp,fp
   44674:	df000017 	ldw	fp,0(sp)
   44678:	dec00104 	addi	sp,sp,4
   4467c:	f800283a 	ret

00044680 <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
   44680:	defffd04 	addi	sp,sp,-12
   44684:	df000215 	stw	fp,8(sp)
   44688:	df000204 	addi	fp,sp,8
   4468c:	e13ffe15 	stw	r4,-8(fp)
   44690:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
   44694:	e0bffe17 	ldw	r2,-8(fp)
   44698:	10800304 	addi	r2,r2,12
   4469c:	e0ffff17 	ldw	r3,-4(fp)
   446a0:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
   446a4:	e0bffe17 	ldw	r2,-8(fp)
   446a8:	10800304 	addi	r2,r2,12
   446ac:	10800037 	ldwio	r2,0(r2)
   446b0:	1007883a 	mov	r3,r2
   446b4:	e0bfff17 	ldw	r2,-4(fp)
   446b8:	1880021e 	bne	r3,r2,446c4 <altera_avalon_fifo_write_ienable+0x44>
        return ALTERA_AVALON_FIFO_OK;
   446bc:	0005883a 	mov	r2,zero
   446c0:	00000106 	br	446c8 <altera_avalon_fifo_write_ienable+0x48>
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   446c4:	00bfff84 	movi	r2,-2
}
   446c8:	e037883a 	mov	sp,fp
   446cc:	df000017 	ldw	fp,0(sp)
   446d0:	dec00104 	addi	sp,sp,4
   446d4:	f800283a 	ret

000446d8 <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
   446d8:	defffd04 	addi	sp,sp,-12
   446dc:	df000215 	stw	fp,8(sp)
   446e0:	df000204 	addi	fp,sp,8
   446e4:	e13ffe15 	stw	r4,-8(fp)
   446e8:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
   446ec:	e0bffe17 	ldw	r2,-8(fp)
   446f0:	10800404 	addi	r2,r2,16
   446f4:	e0ffff17 	ldw	r3,-4(fp)
   446f8:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
   446fc:	e0bffe17 	ldw	r2,-8(fp)
   44700:	10800404 	addi	r2,r2,16
   44704:	10800037 	ldwio	r2,0(r2)
   44708:	1007883a 	mov	r3,r2
   4470c:	e0bfff17 	ldw	r2,-4(fp)
   44710:	1880021e 	bne	r3,r2,4471c <altera_avalon_fifo_write_almostfull+0x44>
        return ALTERA_AVALON_FIFO_OK;
   44714:	0005883a 	mov	r2,zero
   44718:	00000106 	br	44720 <altera_avalon_fifo_write_almostfull+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   4471c:	00bfff44 	movi	r2,-3
}
   44720:	e037883a 	mov	sp,fp
   44724:	df000017 	ldw	fp,0(sp)
   44728:	dec00104 	addi	sp,sp,4
   4472c:	f800283a 	ret

00044730 <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
   44730:	defffd04 	addi	sp,sp,-12
   44734:	df000215 	stw	fp,8(sp)
   44738:	df000204 	addi	fp,sp,8
   4473c:	e13ffe15 	stw	r4,-8(fp)
   44740:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
   44744:	e0bffe17 	ldw	r2,-8(fp)
   44748:	10800504 	addi	r2,r2,20
   4474c:	e0ffff17 	ldw	r3,-4(fp)
   44750:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
   44754:	e0bffe17 	ldw	r2,-8(fp)
   44758:	10800504 	addi	r2,r2,20
   4475c:	10800037 	ldwio	r2,0(r2)
   44760:	1007883a 	mov	r3,r2
   44764:	e0bfff17 	ldw	r2,-4(fp)
   44768:	1880021e 	bne	r3,r2,44774 <altera_avalon_fifo_write_almostempty+0x44>
        return ALTERA_AVALON_FIFO_OK;
   4476c:	0005883a 	mov	r2,zero
   44770:	00000106 	br	44778 <altera_avalon_fifo_write_almostempty+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   44774:	00bfff44 	movi	r2,-3
}
   44778:	e037883a 	mov	sp,fp
   4477c:	df000017 	ldw	fp,0(sp)
   44780:	dec00104 	addi	sp,sp,4
   44784:	f800283a 	ret

00044788 <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
   44788:	defffb04 	addi	sp,sp,-20
   4478c:	dfc00415 	stw	ra,16(sp)
   44790:	df000315 	stw	fp,12(sp)
   44794:	df000304 	addi	fp,sp,12
   44798:	e13ffd15 	stw	r4,-12(fp)
   4479c:	e17ffe15 	stw	r5,-8(fp)
   447a0:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   447a4:	e13ffe17 	ldw	r4,-8(fp)
   447a8:	01400044 	movi	r5,1
   447ac:	00444f00 	call	444f0 <altera_avalon_fifo_read_status>
   447b0:	1000051e 	bne	r2,zero,447c8 <altera_avalon_fifo_write_fifo+0x40>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
   447b4:	e0bffd17 	ldw	r2,-12(fp)
   447b8:	e0ffff17 	ldw	r3,-4(fp)
   447bc:	10c00035 	stwio	r3,0(r2)
        return ALTERA_AVALON_FIFO_OK;
   447c0:	0005883a 	mov	r2,zero
   447c4:	00000106 	br	447cc <altera_avalon_fifo_write_fifo+0x44>
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
   447c8:	00bfff04 	movi	r2,-4
    }
}
   447cc:	e037883a 	mov	sp,fp
   447d0:	dfc00117 	ldw	ra,4(sp)
   447d4:	df000017 	ldw	fp,0(sp)
   447d8:	dec00204 	addi	sp,sp,8
   447dc:	f800283a 	ret

000447e0 <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
   447e0:	defffa04 	addi	sp,sp,-24
   447e4:	dfc00515 	stw	ra,20(sp)
   447e8:	df000415 	stw	fp,16(sp)
   447ec:	df000404 	addi	fp,sp,16
   447f0:	e13ffd15 	stw	r4,-12(fp)
   447f4:	e17ffe15 	stw	r5,-8(fp)
   447f8:	e1bfff15 	stw	r6,-4(fp)
    int return_val = 0;
   447fc:	e03ffc15 	stw	zero,-16(fp)
    *data = 0;
   44800:	e0bfff17 	ldw	r2,-4(fp)
   44804:	10000015 	stw	zero,0(r2)
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   44808:	e13ffe17 	ldw	r4,-8(fp)
   4480c:	01400084 	movi	r5,2
   44810:	00444f00 	call	444f0 <altera_avalon_fifo_read_status>
   44814:	1000071e 	bne	r2,zero,44834 <altera_avalon_read_fifo+0x54>
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
   44818:	e13ffe17 	ldw	r4,-8(fp)
   4481c:	00445fc0 	call	445fc <altera_avalon_fifo_read_level>
   44820:	e0bffc15 	stw	r2,-16(fp)
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   44824:	e0bffd17 	ldw	r2,-12(fp)
   44828:	10c00037 	ldwio	r3,0(r2)
   4482c:	e0bfff17 	ldw	r2,-4(fp)
   44830:	10c00015 	stw	r3,0(r2)
    
    }
    return return_val;
   44834:	e0bffc17 	ldw	r2,-16(fp)
}
   44838:	e037883a 	mov	sp,fp
   4483c:	dfc00117 	ldw	ra,4(sp)
   44840:	df000017 	ldw	fp,0(sp)
   44844:	dec00204 	addi	sp,sp,8
   44848:	f800283a 	ret

0004484c <altera_avalon_fifo_read_fifo>:

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
   4484c:	defffc04 	addi	sp,sp,-16
   44850:	dfc00315 	stw	ra,12(sp)
   44854:	df000215 	stw	fp,8(sp)
   44858:	df000204 	addi	fp,sp,8
   4485c:	e13ffe15 	stw	r4,-8(fp)
   44860:	e17fff15 	stw	r5,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   44864:	e13fff17 	ldw	r4,-4(fp)
   44868:	01400084 	movi	r5,2
   4486c:	00444f00 	call	444f0 <altera_avalon_fifo_read_status>
   44870:	1000031e 	bne	r2,zero,44880 <altera_avalon_fifo_read_fifo+0x34>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   44874:	e0bffe17 	ldw	r2,-8(fp)
   44878:	10800037 	ldwio	r2,0(r2)
   4487c:	00000106 	br	44884 <altera_avalon_fifo_read_fifo+0x38>
    }
    return 0;
   44880:	0005883a 	mov	r2,zero
}
   44884:	e037883a 	mov	sp,fp
   44888:	dfc00117 	ldw	ra,4(sp)
   4488c:	df000017 	ldw	fp,0(sp)
   44890:	dec00204 	addi	sp,sp,8
   44894:	f800283a 	ret

00044898 <altera_avalon_fifo_write_other_info>:

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
   44898:	defffb04 	addi	sp,sp,-20
   4489c:	dfc00415 	stw	ra,16(sp)
   448a0:	df000315 	stw	fp,12(sp)
   448a4:	df000304 	addi	fp,sp,12
   448a8:	e13ffd15 	stw	r4,-12(fp)
   448ac:	e17ffe15 	stw	r5,-8(fp)
   448b0:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   448b4:	e13ffe17 	ldw	r4,-8(fp)
   448b8:	01400044 	movi	r5,1
   448bc:	00444f00 	call	444f0 <altera_avalon_fifo_read_status>
   448c0:	1000061e 	bne	r2,zero,448dc <altera_avalon_fifo_write_other_info+0x44>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
   448c4:	e0bffd17 	ldw	r2,-12(fp)
   448c8:	10800104 	addi	r2,r2,4
   448cc:	e0ffff17 	ldw	r3,-4(fp)
   448d0:	10c00035 	stwio	r3,0(r2)
	return ALTERA_AVALON_FIFO_OK;
   448d4:	0005883a 	mov	r2,zero
   448d8:	00000106 	br	448e0 <altera_avalon_fifo_write_other_info+0x48>
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
   448dc:	00bfff04 	movi	r2,-4
    }
}
   448e0:	e037883a 	mov	sp,fp
   448e4:	dfc00117 	ldw	ra,4(sp)
   448e8:	df000017 	ldw	fp,0(sp)
   448ec:	dec00204 	addi	sp,sp,8
   448f0:	f800283a 	ret

000448f4 <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
   448f4:	defffe04 	addi	sp,sp,-8
   448f8:	df000115 	stw	fp,4(sp)
   448fc:	df000104 	addi	fp,sp,4
   44900:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
   44904:	e0bfff17 	ldw	r2,-4(fp)
   44908:	10800104 	addi	r2,r2,4
   4490c:	10800037 	ldwio	r2,0(r2)
}
   44910:	e037883a 	mov	sp,fp
   44914:	df000017 	ldw	fp,0(sp)
   44918:	dec00104 	addi	sp,sp,4
   4491c:	f800283a 	ret

00044920 <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
   44920:	defffe04 	addi	sp,sp,-8
   44924:	df000115 	stw	fp,4(sp)
   44928:	df000104 	addi	fp,sp,4
   4492c:	e13fff15 	stw	r4,-4(fp)
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
   44930:	e0bfff17 	ldw	r2,-4(fp)
   44934:	10800037 	ldwio	r2,0(r2)
}
   44938:	e037883a 	mov	sp,fp
   4493c:	df000017 	ldw	fp,0(sp)
   44940:	dec00104 	addi	sp,sp,4
   44944:	f800283a 	ret

00044948 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   44948:	defffa04 	addi	sp,sp,-24
   4494c:	dfc00515 	stw	ra,20(sp)
   44950:	df000415 	stw	fp,16(sp)
   44954:	df000404 	addi	fp,sp,16
   44958:	e13ffd15 	stw	r4,-12(fp)
   4495c:	e17ffe15 	stw	r5,-8(fp)
   44960:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   44964:	e0bffd17 	ldw	r2,-12(fp)
   44968:	10800017 	ldw	r2,0(r2)
   4496c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   44970:	e0bffc17 	ldw	r2,-16(fp)
   44974:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   44978:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   4497c:	10800217 	ldw	r2,8(r2)
   44980:	1809883a 	mov	r4,r3
   44984:	e17ffe17 	ldw	r5,-8(fp)
   44988:	e1bfff17 	ldw	r6,-4(fp)
   4498c:	100f883a 	mov	r7,r2
   44990:	0044f700 	call	44f70 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   44994:	e037883a 	mov	sp,fp
   44998:	dfc00117 	ldw	ra,4(sp)
   4499c:	df000017 	ldw	fp,0(sp)
   449a0:	dec00204 	addi	sp,sp,8
   449a4:	f800283a 	ret

000449a8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   449a8:	defffa04 	addi	sp,sp,-24
   449ac:	dfc00515 	stw	ra,20(sp)
   449b0:	df000415 	stw	fp,16(sp)
   449b4:	df000404 	addi	fp,sp,16
   449b8:	e13ffd15 	stw	r4,-12(fp)
   449bc:	e17ffe15 	stw	r5,-8(fp)
   449c0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   449c4:	e0bffd17 	ldw	r2,-12(fp)
   449c8:	10800017 	ldw	r2,0(r2)
   449cc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   449d0:	e0bffc17 	ldw	r2,-16(fp)
   449d4:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   449d8:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   449dc:	10800217 	ldw	r2,8(r2)
   449e0:	1809883a 	mov	r4,r3
   449e4:	e17ffe17 	ldw	r5,-8(fp)
   449e8:	e1bfff17 	ldw	r6,-4(fp)
   449ec:	100f883a 	mov	r7,r2
   449f0:	00451880 	call	45188 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   449f4:	e037883a 	mov	sp,fp
   449f8:	dfc00117 	ldw	ra,4(sp)
   449fc:	df000017 	ldw	fp,0(sp)
   44a00:	dec00204 	addi	sp,sp,8
   44a04:	f800283a 	ret

00044a08 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   44a08:	defffc04 	addi	sp,sp,-16
   44a0c:	dfc00315 	stw	ra,12(sp)
   44a10:	df000215 	stw	fp,8(sp)
   44a14:	df000204 	addi	fp,sp,8
   44a18:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   44a1c:	e0bfff17 	ldw	r2,-4(fp)
   44a20:	10800017 	ldw	r2,0(r2)
   44a24:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   44a28:	e0bffe17 	ldw	r2,-8(fp)
   44a2c:	10c00a04 	addi	r3,r2,40
   44a30:	e0bfff17 	ldw	r2,-4(fp)
   44a34:	10800217 	ldw	r2,8(r2)
   44a38:	1809883a 	mov	r4,r3
   44a3c:	100b883a 	mov	r5,r2
   44a40:	0044e140 	call	44e14 <altera_avalon_jtag_uart_close>
}
   44a44:	e037883a 	mov	sp,fp
   44a48:	dfc00117 	ldw	ra,4(sp)
   44a4c:	df000017 	ldw	fp,0(sp)
   44a50:	dec00204 	addi	sp,sp,8
   44a54:	f800283a 	ret

00044a58 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   44a58:	defffa04 	addi	sp,sp,-24
   44a5c:	dfc00515 	stw	ra,20(sp)
   44a60:	df000415 	stw	fp,16(sp)
   44a64:	df000404 	addi	fp,sp,16
   44a68:	e13ffd15 	stw	r4,-12(fp)
   44a6c:	e17ffe15 	stw	r5,-8(fp)
   44a70:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   44a74:	e0bffd17 	ldw	r2,-12(fp)
   44a78:	10800017 	ldw	r2,0(r2)
   44a7c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   44a80:	e0bffc17 	ldw	r2,-16(fp)
   44a84:	10800a04 	addi	r2,r2,40
   44a88:	1009883a 	mov	r4,r2
   44a8c:	e17ffe17 	ldw	r5,-8(fp)
   44a90:	e1bfff17 	ldw	r6,-4(fp)
   44a94:	0044e7c0 	call	44e7c <altera_avalon_jtag_uart_ioctl>
}
   44a98:	e037883a 	mov	sp,fp
   44a9c:	dfc00117 	ldw	ra,4(sp)
   44aa0:	df000017 	ldw	fp,0(sp)
   44aa4:	dec00204 	addi	sp,sp,8
   44aa8:	f800283a 	ret

00044aac <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   44aac:	defffa04 	addi	sp,sp,-24
   44ab0:	dfc00515 	stw	ra,20(sp)
   44ab4:	df000415 	stw	fp,16(sp)
   44ab8:	df000404 	addi	fp,sp,16
   44abc:	e13ffd15 	stw	r4,-12(fp)
   44ac0:	e17ffe15 	stw	r5,-8(fp)
   44ac4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   44ac8:	e0bffd17 	ldw	r2,-12(fp)
   44acc:	00c00044 	movi	r3,1
   44ad0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   44ad4:	e0bffd17 	ldw	r2,-12(fp)
   44ad8:	10800017 	ldw	r2,0(r2)
   44adc:	10800104 	addi	r2,r2,4
   44ae0:	e0fffd17 	ldw	r3,-12(fp)
   44ae4:	18c00817 	ldw	r3,32(r3)
   44ae8:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   44aec:	e0fffe17 	ldw	r3,-8(fp)
   44af0:	e0bfff17 	ldw	r2,-4(fp)
   44af4:	d8000015 	stw	zero,0(sp)
   44af8:	1809883a 	mov	r4,r3
   44afc:	100b883a 	mov	r5,r2
   44b00:	01800134 	movhi	r6,4
   44b04:	3192db04 	addi	r6,r6,19308
   44b08:	e1fffd17 	ldw	r7,-12(fp)
   44b0c:	0045e740 	call	45e74 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   44b10:	e0bffd17 	ldw	r2,-12(fp)
   44b14:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   44b18:	e0bffd17 	ldw	r2,-12(fp)
   44b1c:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   44b20:	00800174 	movhi	r2,5
   44b24:	10a8d604 	addi	r2,r2,-23720
   44b28:	10800017 	ldw	r2,0(r2)
   44b2c:	1809883a 	mov	r4,r3
   44b30:	100b883a 	mov	r5,r2
   44b34:	01800134 	movhi	r6,4
   44b38:	31935c04 	addi	r6,r6,19824
   44b3c:	e1fffd17 	ldw	r7,-12(fp)
   44b40:	0045ad00 	call	45ad0 <alt_alarm_start>
   44b44:	1000040e 	bge	r2,zero,44b58 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   44b48:	e0bffd17 	ldw	r2,-12(fp)
   44b4c:	00e00034 	movhi	r3,32768
   44b50:	18ffffc4 	addi	r3,r3,-1
   44b54:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   44b58:	e037883a 	mov	sp,fp
   44b5c:	dfc00117 	ldw	ra,4(sp)
   44b60:	df000017 	ldw	fp,0(sp)
   44b64:	dec00204 	addi	sp,sp,8
   44b68:	f800283a 	ret

00044b6c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   44b6c:	defff804 	addi	sp,sp,-32
   44b70:	df000715 	stw	fp,28(sp)
   44b74:	df000704 	addi	fp,sp,28
   44b78:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   44b7c:	e0bfff17 	ldw	r2,-4(fp)
   44b80:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   44b84:	e0bffb17 	ldw	r2,-20(fp)
   44b88:	10800017 	ldw	r2,0(r2)
   44b8c:	e0bffc15 	stw	r2,-16(fp)
   44b90:	00000106 	br	44b98 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
   44b94:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   44b98:	e0bffc17 	ldw	r2,-16(fp)
   44b9c:	10800104 	addi	r2,r2,4
   44ba0:	10800037 	ldwio	r2,0(r2)
   44ba4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   44ba8:	e0bffd17 	ldw	r2,-12(fp)
   44bac:	1080c00c 	andi	r2,r2,768
   44bb0:	10006a26 	beq	r2,zero,44d5c <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   44bb4:	e0bffd17 	ldw	r2,-12(fp)
   44bb8:	1080400c 	andi	r2,r2,256
   44bbc:	10003326 	beq	r2,zero,44c8c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   44bc0:	00800074 	movhi	r2,1
   44bc4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   44bc8:	e0bffb17 	ldw	r2,-20(fp)
   44bcc:	10800a17 	ldw	r2,40(r2)
   44bd0:	10800044 	addi	r2,r2,1
   44bd4:	1081ffcc 	andi	r2,r2,2047
   44bd8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   44bdc:	e0bffb17 	ldw	r2,-20(fp)
   44be0:	10c00b17 	ldw	r3,44(r2)
   44be4:	e0bffe17 	ldw	r2,-8(fp)
   44be8:	18801426 	beq	r3,r2,44c3c <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   44bec:	e0bffc17 	ldw	r2,-16(fp)
   44bf0:	10800037 	ldwio	r2,0(r2)
   44bf4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   44bf8:	e0bff917 	ldw	r2,-28(fp)
   44bfc:	10a0000c 	andi	r2,r2,32768
   44c00:	10001026 	beq	r2,zero,44c44 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   44c04:	e0bffb17 	ldw	r2,-20(fp)
   44c08:	10800a17 	ldw	r2,40(r2)
   44c0c:	e0fff917 	ldw	r3,-28(fp)
   44c10:	e13ffb17 	ldw	r4,-20(fp)
   44c14:	2085883a 	add	r2,r4,r2
   44c18:	10800e04 	addi	r2,r2,56
   44c1c:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   44c20:	e0bffb17 	ldw	r2,-20(fp)
   44c24:	10800a17 	ldw	r2,40(r2)
   44c28:	10800044 	addi	r2,r2,1
   44c2c:	10c1ffcc 	andi	r3,r2,2047
   44c30:	e0bffb17 	ldw	r2,-20(fp)
   44c34:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   44c38:	003fe306 	br	44bc8 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   44c3c:	0001883a 	nop
   44c40:	00000106 	br	44c48 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   44c44:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   44c48:	e0bff917 	ldw	r2,-28(fp)
   44c4c:	10bfffec 	andhi	r2,r2,65535
   44c50:	10000e26 	beq	r2,zero,44c8c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   44c54:	e0bffb17 	ldw	r2,-20(fp)
   44c58:	10c00817 	ldw	r3,32(r2)
   44c5c:	00bfff84 	movi	r2,-2
   44c60:	1886703a 	and	r3,r3,r2
   44c64:	e0bffb17 	ldw	r2,-20(fp)
   44c68:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   44c6c:	e0bffc17 	ldw	r2,-16(fp)
   44c70:	10800104 	addi	r2,r2,4
   44c74:	e0fffb17 	ldw	r3,-20(fp)
   44c78:	18c00817 	ldw	r3,32(r3)
   44c7c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   44c80:	e0bffc17 	ldw	r2,-16(fp)
   44c84:	10800104 	addi	r2,r2,4
   44c88:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   44c8c:	e0bffd17 	ldw	r2,-12(fp)
   44c90:	1080800c 	andi	r2,r2,512
   44c94:	103fbf26 	beq	r2,zero,44b94 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   44c98:	e0bffd17 	ldw	r2,-12(fp)
   44c9c:	1004d43a 	srli	r2,r2,16
   44ca0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   44ca4:	00001406 	br	44cf8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   44ca8:	e0bffc17 	ldw	r2,-16(fp)
   44cac:	e0fffb17 	ldw	r3,-20(fp)
   44cb0:	18c00d17 	ldw	r3,52(r3)
   44cb4:	e13ffb17 	ldw	r4,-20(fp)
   44cb8:	20c7883a 	add	r3,r4,r3
   44cbc:	18c20e04 	addi	r3,r3,2104
   44cc0:	18c00003 	ldbu	r3,0(r3)
   44cc4:	18c03fcc 	andi	r3,r3,255
   44cc8:	18c0201c 	xori	r3,r3,128
   44ccc:	18ffe004 	addi	r3,r3,-128
   44cd0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   44cd4:	e0bffb17 	ldw	r2,-20(fp)
   44cd8:	10800d17 	ldw	r2,52(r2)
   44cdc:	10800044 	addi	r2,r2,1
   44ce0:	10c1ffcc 	andi	r3,r2,2047
   44ce4:	e0bffb17 	ldw	r2,-20(fp)
   44ce8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   44cec:	e0bffa17 	ldw	r2,-24(fp)
   44cf0:	10bfffc4 	addi	r2,r2,-1
   44cf4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   44cf8:	e0bffa17 	ldw	r2,-24(fp)
   44cfc:	10000526 	beq	r2,zero,44d14 <altera_avalon_jtag_uart_irq+0x1a8>
   44d00:	e0bffb17 	ldw	r2,-20(fp)
   44d04:	10c00d17 	ldw	r3,52(r2)
   44d08:	e0bffb17 	ldw	r2,-20(fp)
   44d0c:	10800c17 	ldw	r2,48(r2)
   44d10:	18bfe51e 	bne	r3,r2,44ca8 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   44d14:	e0bffa17 	ldw	r2,-24(fp)
   44d18:	103f9e26 	beq	r2,zero,44b94 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   44d1c:	e0bffb17 	ldw	r2,-20(fp)
   44d20:	10c00817 	ldw	r3,32(r2)
   44d24:	00bfff44 	movi	r2,-3
   44d28:	1886703a 	and	r3,r3,r2
   44d2c:	e0bffb17 	ldw	r2,-20(fp)
   44d30:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   44d34:	e0bffb17 	ldw	r2,-20(fp)
   44d38:	10800017 	ldw	r2,0(r2)
   44d3c:	10800104 	addi	r2,r2,4
   44d40:	e0fffb17 	ldw	r3,-20(fp)
   44d44:	18c00817 	ldw	r3,32(r3)
   44d48:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   44d4c:	e0bffc17 	ldw	r2,-16(fp)
   44d50:	10800104 	addi	r2,r2,4
   44d54:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   44d58:	003f8e06 	br	44b94 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   44d5c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   44d60:	e037883a 	mov	sp,fp
   44d64:	df000017 	ldw	fp,0(sp)
   44d68:	dec00104 	addi	sp,sp,4
   44d6c:	f800283a 	ret

00044d70 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   44d70:	defffc04 	addi	sp,sp,-16
   44d74:	df000315 	stw	fp,12(sp)
   44d78:	df000304 	addi	fp,sp,12
   44d7c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   44d80:	e0bfff17 	ldw	r2,-4(fp)
   44d84:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   44d88:	e0bffd17 	ldw	r2,-12(fp)
   44d8c:	10800017 	ldw	r2,0(r2)
   44d90:	10800104 	addi	r2,r2,4
   44d94:	10800037 	ldwio	r2,0(r2)
   44d98:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   44d9c:	e0bffe17 	ldw	r2,-8(fp)
   44da0:	1081000c 	andi	r2,r2,1024
   44da4:	10000a26 	beq	r2,zero,44dd0 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   44da8:	e0bffd17 	ldw	r2,-12(fp)
   44dac:	10800017 	ldw	r2,0(r2)
   44db0:	10800104 	addi	r2,r2,4
   44db4:	e0fffd17 	ldw	r3,-12(fp)
   44db8:	18c00817 	ldw	r3,32(r3)
   44dbc:	18c10014 	ori	r3,r3,1024
   44dc0:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   44dc4:	e0bffd17 	ldw	r2,-12(fp)
   44dc8:	10000915 	stw	zero,36(r2)
   44dcc:	00000a06 	br	44df8 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   44dd0:	e0bffd17 	ldw	r2,-12(fp)
   44dd4:	10800917 	ldw	r2,36(r2)
   44dd8:	00e00034 	movhi	r3,32768
   44ddc:	18ffff04 	addi	r3,r3,-4
   44de0:	18800536 	bltu	r3,r2,44df8 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
   44de4:	e0bffd17 	ldw	r2,-12(fp)
   44de8:	10800917 	ldw	r2,36(r2)
   44dec:	10c00044 	addi	r3,r2,1
   44df0:	e0bffd17 	ldw	r2,-12(fp)
   44df4:	10c00915 	stw	r3,36(r2)
   44df8:	00800174 	movhi	r2,5
   44dfc:	10a8d604 	addi	r2,r2,-23720
   44e00:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   44e04:	e037883a 	mov	sp,fp
   44e08:	df000017 	ldw	fp,0(sp)
   44e0c:	dec00104 	addi	sp,sp,4
   44e10:	f800283a 	ret

00044e14 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   44e14:	defffd04 	addi	sp,sp,-12
   44e18:	df000215 	stw	fp,8(sp)
   44e1c:	df000204 	addi	fp,sp,8
   44e20:	e13ffe15 	stw	r4,-8(fp)
   44e24:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   44e28:	00000506 	br	44e40 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   44e2c:	e0bfff17 	ldw	r2,-4(fp)
   44e30:	1090000c 	andi	r2,r2,16384
   44e34:	10000226 	beq	r2,zero,44e40 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   44e38:	00bffd44 	movi	r2,-11
   44e3c:	00000b06 	br	44e6c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   44e40:	e0bffe17 	ldw	r2,-8(fp)
   44e44:	10c00d17 	ldw	r3,52(r2)
   44e48:	e0bffe17 	ldw	r2,-8(fp)
   44e4c:	10800c17 	ldw	r2,48(r2)
   44e50:	18800526 	beq	r3,r2,44e68 <altera_avalon_jtag_uart_close+0x54>
   44e54:	e0bffe17 	ldw	r2,-8(fp)
   44e58:	10c00917 	ldw	r3,36(r2)
   44e5c:	e0bffe17 	ldw	r2,-8(fp)
   44e60:	10800117 	ldw	r2,4(r2)
   44e64:	18bff136 	bltu	r3,r2,44e2c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   44e68:	0005883a 	mov	r2,zero
}
   44e6c:	e037883a 	mov	sp,fp
   44e70:	df000017 	ldw	fp,0(sp)
   44e74:	dec00104 	addi	sp,sp,4
   44e78:	f800283a 	ret

00044e7c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   44e7c:	defffa04 	addi	sp,sp,-24
   44e80:	df000515 	stw	fp,20(sp)
   44e84:	df000504 	addi	fp,sp,20
   44e88:	e13ffd15 	stw	r4,-12(fp)
   44e8c:	e17ffe15 	stw	r5,-8(fp)
   44e90:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   44e94:	00bff9c4 	movi	r2,-25
   44e98:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   44e9c:	e0bffe17 	ldw	r2,-8(fp)
   44ea0:	10da8060 	cmpeqi	r3,r2,27137
   44ea4:	1800031e 	bne	r3,zero,44eb4 <altera_avalon_jtag_uart_ioctl+0x38>
   44ea8:	109a80a0 	cmpeqi	r2,r2,27138
   44eac:	1000181e 	bne	r2,zero,44f10 <altera_avalon_jtag_uart_ioctl+0x94>
   44eb0:	00002606 	br	44f4c <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   44eb4:	e0bffd17 	ldw	r2,-12(fp)
   44eb8:	10c00117 	ldw	r3,4(r2)
   44ebc:	00a00034 	movhi	r2,32768
   44ec0:	10bfffc4 	addi	r2,r2,-1
   44ec4:	18802226 	beq	r3,r2,44f50 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
   44ec8:	e0bfff17 	ldw	r2,-4(fp)
   44ecc:	10800017 	ldw	r2,0(r2)
   44ed0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   44ed4:	e0bffc17 	ldw	r2,-16(fp)
   44ed8:	10800090 	cmplti	r2,r2,2
   44edc:	1000061e 	bne	r2,zero,44ef8 <altera_avalon_jtag_uart_ioctl+0x7c>
   44ee0:	e0fffc17 	ldw	r3,-16(fp)
   44ee4:	00a00034 	movhi	r2,32768
   44ee8:	10bfffc4 	addi	r2,r2,-1
   44eec:	18800226 	beq	r3,r2,44ef8 <altera_avalon_jtag_uart_ioctl+0x7c>
   44ef0:	e0bffc17 	ldw	r2,-16(fp)
   44ef4:	00000206 	br	44f00 <altera_avalon_jtag_uart_ioctl+0x84>
   44ef8:	00a00034 	movhi	r2,32768
   44efc:	10bfff84 	addi	r2,r2,-2
   44f00:	e0fffd17 	ldw	r3,-12(fp)
   44f04:	18800115 	stw	r2,4(r3)
      rc = 0;
   44f08:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   44f0c:	00001006 	br	44f50 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   44f10:	e0bffd17 	ldw	r2,-12(fp)
   44f14:	10c00117 	ldw	r3,4(r2)
   44f18:	00a00034 	movhi	r2,32768
   44f1c:	10bfffc4 	addi	r2,r2,-1
   44f20:	18800d26 	beq	r3,r2,44f58 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   44f24:	e0bffd17 	ldw	r2,-12(fp)
   44f28:	10c00917 	ldw	r3,36(r2)
   44f2c:	e0bffd17 	ldw	r2,-12(fp)
   44f30:	10800117 	ldw	r2,4(r2)
   44f34:	1885803a 	cmpltu	r2,r3,r2
   44f38:	10c03fcc 	andi	r3,r2,255
   44f3c:	e0bfff17 	ldw	r2,-4(fp)
   44f40:	10c00015 	stw	r3,0(r2)
      rc = 0;
   44f44:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   44f48:	00000306 	br	44f58 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
   44f4c:	00000306 	br	44f5c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   44f50:	0001883a 	nop
   44f54:	00000106 	br	44f5c <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   44f58:	0001883a 	nop

  default:
    break;
  }

  return rc;
   44f5c:	e0bffb17 	ldw	r2,-20(fp)
}
   44f60:	e037883a 	mov	sp,fp
   44f64:	df000017 	ldw	fp,0(sp)
   44f68:	dec00104 	addi	sp,sp,4
   44f6c:	f800283a 	ret

00044f70 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   44f70:	defff304 	addi	sp,sp,-52
   44f74:	dfc00c15 	stw	ra,48(sp)
   44f78:	df000b15 	stw	fp,44(sp)
   44f7c:	df000b04 	addi	fp,sp,44
   44f80:	e13ffc15 	stw	r4,-16(fp)
   44f84:	e17ffd15 	stw	r5,-12(fp)
   44f88:	e1bffe15 	stw	r6,-8(fp)
   44f8c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   44f90:	e0bffd17 	ldw	r2,-12(fp)
   44f94:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   44f98:	00004706 	br	450b8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   44f9c:	e0bffc17 	ldw	r2,-16(fp)
   44fa0:	10800a17 	ldw	r2,40(r2)
   44fa4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   44fa8:	e0bffc17 	ldw	r2,-16(fp)
   44fac:	10800b17 	ldw	r2,44(r2)
   44fb0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   44fb4:	e0fff717 	ldw	r3,-36(fp)
   44fb8:	e0bff817 	ldw	r2,-32(fp)
   44fbc:	18800536 	bltu	r3,r2,44fd4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   44fc0:	e0fff717 	ldw	r3,-36(fp)
   44fc4:	e0bff817 	ldw	r2,-32(fp)
   44fc8:	1885c83a 	sub	r2,r3,r2
   44fcc:	e0bff615 	stw	r2,-40(fp)
   44fd0:	00000406 	br	44fe4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   44fd4:	00c20004 	movi	r3,2048
   44fd8:	e0bff817 	ldw	r2,-32(fp)
   44fdc:	1885c83a 	sub	r2,r3,r2
   44fe0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   44fe4:	e0bff617 	ldw	r2,-40(fp)
   44fe8:	10001e26 	beq	r2,zero,45064 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   44fec:	e0fffe17 	ldw	r3,-8(fp)
   44ff0:	e0bff617 	ldw	r2,-40(fp)
   44ff4:	1880022e 	bgeu	r3,r2,45000 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   44ff8:	e0bffe17 	ldw	r2,-8(fp)
   44ffc:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   45000:	e0bff817 	ldw	r2,-32(fp)
   45004:	10800e04 	addi	r2,r2,56
   45008:	e0fffc17 	ldw	r3,-16(fp)
   4500c:	1885883a 	add	r2,r3,r2
   45010:	e13ff517 	ldw	r4,-44(fp)
   45014:	100b883a 	mov	r5,r2
   45018:	e1bff617 	ldw	r6,-40(fp)
   4501c:	00421980 	call	42198 <memcpy>
      ptr   += n;
   45020:	e0fff517 	ldw	r3,-44(fp)
   45024:	e0bff617 	ldw	r2,-40(fp)
   45028:	1885883a 	add	r2,r3,r2
   4502c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   45030:	e0fffe17 	ldw	r3,-8(fp)
   45034:	e0bff617 	ldw	r2,-40(fp)
   45038:	1885c83a 	sub	r2,r3,r2
   4503c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   45040:	e0fff817 	ldw	r3,-32(fp)
   45044:	e0bff617 	ldw	r2,-40(fp)
   45048:	1885883a 	add	r2,r3,r2
   4504c:	10c1ffcc 	andi	r3,r2,2047
   45050:	e0bffc17 	ldw	r2,-16(fp)
   45054:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   45058:	e0bffe17 	ldw	r2,-8(fp)
   4505c:	00bfcf16 	blt	zero,r2,44f9c <altera_avalon_jtag_uart_read+0x2c>
   45060:	00000106 	br	45068 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   45064:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   45068:	e0fff517 	ldw	r3,-44(fp)
   4506c:	e0bffd17 	ldw	r2,-12(fp)
   45070:	1880141e 	bne	r3,r2,450c4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   45074:	e0bfff17 	ldw	r2,-4(fp)
   45078:	1090000c 	andi	r2,r2,16384
   4507c:	1000131e 	bne	r2,zero,450cc <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   45080:	0001883a 	nop
   45084:	e0bffc17 	ldw	r2,-16(fp)
   45088:	10c00a17 	ldw	r3,40(r2)
   4508c:	e0bff717 	ldw	r2,-36(fp)
   45090:	1880051e 	bne	r3,r2,450a8 <altera_avalon_jtag_uart_read+0x138>
   45094:	e0bffc17 	ldw	r2,-16(fp)
   45098:	10c00917 	ldw	r3,36(r2)
   4509c:	e0bffc17 	ldw	r2,-16(fp)
   450a0:	10800117 	ldw	r2,4(r2)
   450a4:	18bff736 	bltu	r3,r2,45084 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   450a8:	e0bffc17 	ldw	r2,-16(fp)
   450ac:	10c00a17 	ldw	r3,40(r2)
   450b0:	e0bff717 	ldw	r2,-36(fp)
   450b4:	18800726 	beq	r3,r2,450d4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   450b8:	e0bffe17 	ldw	r2,-8(fp)
   450bc:	00bfb716 	blt	zero,r2,44f9c <altera_avalon_jtag_uart_read+0x2c>
   450c0:	00000506 	br	450d8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   450c4:	0001883a 	nop
   450c8:	00000306 	br	450d8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   450cc:	0001883a 	nop
   450d0:	00000106 	br	450d8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   450d4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   450d8:	e0fff517 	ldw	r3,-44(fp)
   450dc:	e0bffd17 	ldw	r2,-12(fp)
   450e0:	18801726 	beq	r3,r2,45140 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   450e4:	0005303a 	rdctl	r2,status
   450e8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   450ec:	e0fffa17 	ldw	r3,-24(fp)
   450f0:	00bfff84 	movi	r2,-2
   450f4:	1884703a 	and	r2,r3,r2
   450f8:	1001703a 	wrctl	status,r2
  
  return context;
   450fc:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   45100:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   45104:	e0bffc17 	ldw	r2,-16(fp)
   45108:	10800817 	ldw	r2,32(r2)
   4510c:	10c00054 	ori	r3,r2,1
   45110:	e0bffc17 	ldw	r2,-16(fp)
   45114:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   45118:	e0bffc17 	ldw	r2,-16(fp)
   4511c:	10800017 	ldw	r2,0(r2)
   45120:	10800104 	addi	r2,r2,4
   45124:	e0fffc17 	ldw	r3,-16(fp)
   45128:	18c00817 	ldw	r3,32(r3)
   4512c:	10c00035 	stwio	r3,0(r2)
   45130:	e0bff917 	ldw	r2,-28(fp)
   45134:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45138:	e0bffb17 	ldw	r2,-20(fp)
   4513c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   45140:	e0fff517 	ldw	r3,-44(fp)
   45144:	e0bffd17 	ldw	r2,-12(fp)
   45148:	18800426 	beq	r3,r2,4515c <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
   4514c:	e0fff517 	ldw	r3,-44(fp)
   45150:	e0bffd17 	ldw	r2,-12(fp)
   45154:	1885c83a 	sub	r2,r3,r2
   45158:	00000606 	br	45174 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
   4515c:	e0bfff17 	ldw	r2,-4(fp)
   45160:	1090000c 	andi	r2,r2,16384
   45164:	10000226 	beq	r2,zero,45170 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
   45168:	00bffd44 	movi	r2,-11
   4516c:	00000106 	br	45174 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
   45170:	00bffec4 	movi	r2,-5
}
   45174:	e037883a 	mov	sp,fp
   45178:	dfc00117 	ldw	ra,4(sp)
   4517c:	df000017 	ldw	fp,0(sp)
   45180:	dec00204 	addi	sp,sp,8
   45184:	f800283a 	ret

00045188 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   45188:	defff304 	addi	sp,sp,-52
   4518c:	dfc00c15 	stw	ra,48(sp)
   45190:	df000b15 	stw	fp,44(sp)
   45194:	df000b04 	addi	fp,sp,44
   45198:	e13ffc15 	stw	r4,-16(fp)
   4519c:	e17ffd15 	stw	r5,-12(fp)
   451a0:	e1bffe15 	stw	r6,-8(fp)
   451a4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   451a8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   451ac:	e0bffd17 	ldw	r2,-12(fp)
   451b0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   451b4:	00003706 	br	45294 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   451b8:	e0bffc17 	ldw	r2,-16(fp)
   451bc:	10800c17 	ldw	r2,48(r2)
   451c0:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   451c4:	e0bffc17 	ldw	r2,-16(fp)
   451c8:	10800d17 	ldw	r2,52(r2)
   451cc:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   451d0:	e0fff817 	ldw	r3,-32(fp)
   451d4:	e0bff517 	ldw	r2,-44(fp)
   451d8:	1880062e 	bgeu	r3,r2,451f4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   451dc:	e0fff517 	ldw	r3,-44(fp)
   451e0:	e0bff817 	ldw	r2,-32(fp)
   451e4:	1885c83a 	sub	r2,r3,r2
   451e8:	10bfffc4 	addi	r2,r2,-1
   451ec:	e0bff615 	stw	r2,-40(fp)
   451f0:	00000b06 	br	45220 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   451f4:	e0bff517 	ldw	r2,-44(fp)
   451f8:	10000526 	beq	r2,zero,45210 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   451fc:	00c20004 	movi	r3,2048
   45200:	e0bff817 	ldw	r2,-32(fp)
   45204:	1885c83a 	sub	r2,r3,r2
   45208:	e0bff615 	stw	r2,-40(fp)
   4520c:	00000406 	br	45220 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   45210:	00c1ffc4 	movi	r3,2047
   45214:	e0bff817 	ldw	r2,-32(fp)
   45218:	1885c83a 	sub	r2,r3,r2
   4521c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   45220:	e0bff617 	ldw	r2,-40(fp)
   45224:	10001e26 	beq	r2,zero,452a0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   45228:	e0fffe17 	ldw	r3,-8(fp)
   4522c:	e0bff617 	ldw	r2,-40(fp)
   45230:	1880022e 	bgeu	r3,r2,4523c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   45234:	e0bffe17 	ldw	r2,-8(fp)
   45238:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   4523c:	e0bff817 	ldw	r2,-32(fp)
   45240:	10820e04 	addi	r2,r2,2104
   45244:	e0fffc17 	ldw	r3,-16(fp)
   45248:	1885883a 	add	r2,r3,r2
   4524c:	1009883a 	mov	r4,r2
   45250:	e17ffd17 	ldw	r5,-12(fp)
   45254:	e1bff617 	ldw	r6,-40(fp)
   45258:	00421980 	call	42198 <memcpy>
      ptr   += n;
   4525c:	e0fffd17 	ldw	r3,-12(fp)
   45260:	e0bff617 	ldw	r2,-40(fp)
   45264:	1885883a 	add	r2,r3,r2
   45268:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   4526c:	e0fffe17 	ldw	r3,-8(fp)
   45270:	e0bff617 	ldw	r2,-40(fp)
   45274:	1885c83a 	sub	r2,r3,r2
   45278:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4527c:	e0fff817 	ldw	r3,-32(fp)
   45280:	e0bff617 	ldw	r2,-40(fp)
   45284:	1885883a 	add	r2,r3,r2
   45288:	10c1ffcc 	andi	r3,r2,2047
   4528c:	e0bffc17 	ldw	r2,-16(fp)
   45290:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   45294:	e0bffe17 	ldw	r2,-8(fp)
   45298:	00bfc716 	blt	zero,r2,451b8 <altera_avalon_jtag_uart_write+0x30>
   4529c:	00000106 	br	452a4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   452a0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   452a4:	0005303a 	rdctl	r2,status
   452a8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   452ac:	e0fffa17 	ldw	r3,-24(fp)
   452b0:	00bfff84 	movi	r2,-2
   452b4:	1884703a 	and	r2,r3,r2
   452b8:	1001703a 	wrctl	status,r2
  
  return context;
   452bc:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   452c0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   452c4:	e0bffc17 	ldw	r2,-16(fp)
   452c8:	10800817 	ldw	r2,32(r2)
   452cc:	10c00094 	ori	r3,r2,2
   452d0:	e0bffc17 	ldw	r2,-16(fp)
   452d4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   452d8:	e0bffc17 	ldw	r2,-16(fp)
   452dc:	10800017 	ldw	r2,0(r2)
   452e0:	10800104 	addi	r2,r2,4
   452e4:	e0fffc17 	ldw	r3,-16(fp)
   452e8:	18c00817 	ldw	r3,32(r3)
   452ec:	10c00035 	stwio	r3,0(r2)
   452f0:	e0bff917 	ldw	r2,-28(fp)
   452f4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   452f8:	e0bffb17 	ldw	r2,-20(fp)
   452fc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   45300:	e0bffe17 	ldw	r2,-8(fp)
   45304:	0080110e 	bge	zero,r2,4534c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   45308:	e0bfff17 	ldw	r2,-4(fp)
   4530c:	1090000c 	andi	r2,r2,16384
   45310:	1000111e 	bne	r2,zero,45358 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   45314:	0001883a 	nop
   45318:	e0bffc17 	ldw	r2,-16(fp)
   4531c:	10c00d17 	ldw	r3,52(r2)
   45320:	e0bff517 	ldw	r2,-44(fp)
   45324:	1880051e 	bne	r3,r2,4533c <altera_avalon_jtag_uart_write+0x1b4>
   45328:	e0bffc17 	ldw	r2,-16(fp)
   4532c:	10c00917 	ldw	r3,36(r2)
   45330:	e0bffc17 	ldw	r2,-16(fp)
   45334:	10800117 	ldw	r2,4(r2)
   45338:	18bff736 	bltu	r3,r2,45318 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   4533c:	e0bffc17 	ldw	r2,-16(fp)
   45340:	10c00d17 	ldw	r3,52(r2)
   45344:	e0bff517 	ldw	r2,-44(fp)
   45348:	18800526 	beq	r3,r2,45360 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   4534c:	e0bffe17 	ldw	r2,-8(fp)
   45350:	00bfd016 	blt	zero,r2,45294 <altera_avalon_jtag_uart_write+0x10c>
   45354:	00000306 	br	45364 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   45358:	0001883a 	nop
   4535c:	00000106 	br	45364 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
   45360:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   45364:	e0fffd17 	ldw	r3,-12(fp)
   45368:	e0bff717 	ldw	r2,-36(fp)
   4536c:	18800426 	beq	r3,r2,45380 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   45370:	e0fffd17 	ldw	r3,-12(fp)
   45374:	e0bff717 	ldw	r2,-36(fp)
   45378:	1885c83a 	sub	r2,r3,r2
   4537c:	00000606 	br	45398 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   45380:	e0bfff17 	ldw	r2,-4(fp)
   45384:	1090000c 	andi	r2,r2,16384
   45388:	10000226 	beq	r2,zero,45394 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   4538c:	00bffd44 	movi	r2,-11
   45390:	00000106 	br	45398 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   45394:	00bffec4 	movi	r2,-5
}
   45398:	e037883a 	mov	sp,fp
   4539c:	dfc00117 	ldw	ra,4(sp)
   453a0:	df000017 	ldw	fp,0(sp)
   453a4:	dec00204 	addi	sp,sp,8
   453a8:	f800283a 	ret

000453ac <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   453ac:	defffa04 	addi	sp,sp,-24
   453b0:	dfc00515 	stw	ra,20(sp)
   453b4:	df000415 	stw	fp,16(sp)
   453b8:	df000404 	addi	fp,sp,16
   453bc:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   453c0:	0007883a 	mov	r3,zero
   453c4:	e0bfff17 	ldw	r2,-4(fp)
   453c8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   453cc:	e0bfff17 	ldw	r2,-4(fp)
   453d0:	10800104 	addi	r2,r2,4
   453d4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   453d8:	0005303a 	rdctl	r2,status
   453dc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   453e0:	e0fffd17 	ldw	r3,-12(fp)
   453e4:	00bfff84 	movi	r2,-2
   453e8:	1884703a 	and	r2,r3,r2
   453ec:	1001703a 	wrctl	status,r2
  
  return context;
   453f0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   453f4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   453f8:	00465c40 	call	465c4 <alt_tick>
   453fc:	e0bffc17 	ldw	r2,-16(fp)
   45400:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45404:	e0bffe17 	ldw	r2,-8(fp)
   45408:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   4540c:	e037883a 	mov	sp,fp
   45410:	dfc00117 	ldw	ra,4(sp)
   45414:	df000017 	ldw	fp,0(sp)
   45418:	dec00204 	addi	sp,sp,8
   4541c:	f800283a 	ret

00045420 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   45420:	defff804 	addi	sp,sp,-32
   45424:	dfc00715 	stw	ra,28(sp)
   45428:	df000615 	stw	fp,24(sp)
   4542c:	df000604 	addi	fp,sp,24
   45430:	e13ffc15 	stw	r4,-16(fp)
   45434:	e17ffd15 	stw	r5,-12(fp)
   45438:	e1bffe15 	stw	r6,-8(fp)
   4543c:	e1ffff15 	stw	r7,-4(fp)
   45440:	e0bfff17 	ldw	r2,-4(fp)
   45444:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   45448:	00800174 	movhi	r2,5
   4544c:	10a8d604 	addi	r2,r2,-23720
   45450:	10800017 	ldw	r2,0(r2)
   45454:	1000041e 	bne	r2,zero,45468 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   45458:	00800174 	movhi	r2,5
   4545c:	10a8d604 	addi	r2,r2,-23720
   45460:	e0fffb17 	ldw	r3,-20(fp)
   45464:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   45468:	e0bffc17 	ldw	r2,-16(fp)
   4546c:	10800104 	addi	r2,r2,4
   45470:	00c001c4 	movi	r3,7
   45474:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   45478:	d8000015 	stw	zero,0(sp)
   4547c:	e13ffd17 	ldw	r4,-12(fp)
   45480:	e17ffe17 	ldw	r5,-8(fp)
   45484:	01800134 	movhi	r6,4
   45488:	3194eb04 	addi	r6,r6,21420
   4548c:	e1fffc17 	ldw	r7,-16(fp)
   45490:	0045e740 	call	45e74 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   45494:	e037883a 	mov	sp,fp
   45498:	dfc00117 	ldw	ra,4(sp)
   4549c:	df000017 	ldw	fp,0(sp)
   454a0:	dec00204 	addi	sp,sp,8
   454a4:	f800283a 	ret

000454a8 <alt_hostfs_open>:
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
   454a8:	deffeb04 	addi	sp,sp,-84
   454ac:	df001415 	stw	fp,80(sp)
   454b0:	dc401315 	stw	r17,76(sp)
   454b4:	dc001215 	stw	r16,72(sp)
   454b8:	df001204 	addi	fp,sp,72
   454bc:	e13ffb15 	stw	r4,-20(fp)
   454c0:	e17ffc15 	stw	r5,-16(fp)
   454c4:	e1bffd15 	stw	r6,-12(fp)
   454c8:	e1fffe15 	stw	r7,-8(fp)
  static const struct HOSTCALL_INFO hcinfo = { 0x0103, "open" };

  alt_hostfs_dev* dev= (alt_hostfs_dev*)fd->dev;
   454cc:	e0bffb17 	ldw	r2,-20(fp)
   454d0:	10800017 	ldw	r2,0(r2)
   454d4:	e0bfee15 	stw	r2,-72(fp)
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
   454d8:	e0bfee17 	ldw	r2,-72(fp)
   454dc:	10800217 	ldw	r2,8(r2)
   454e0:	e0bff715 	stw	r2,-36(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
   454e4:	e0bff717 	ldw	r2,-36(fp)
   454e8:	10bfffc4 	addi	r2,r2,-1
   454ec:	e0bff815 	stw	r2,-32(fp)

  while (*++ptr != 0)
   454f0:	e0bff817 	ldw	r2,-32(fp)
   454f4:	10800044 	addi	r2,r2,1
   454f8:	e0bff815 	stw	r2,-32(fp)
   454fc:	e0bff817 	ldw	r2,-32(fp)
   45500:	10800003 	ldbu	r2,0(r2)
   45504:	10803fcc 	andi	r2,r2,255
   45508:	1080201c 	xori	r2,r2,128
   4550c:	10bfe004 	addi	r2,r2,-128
   45510:	103ff71e 	bne	r2,zero,454f0 <alt_hostfs_open+0x48>
    ;

  return ptr - string;
   45514:	e0fff817 	ldw	r3,-32(fp)
   45518:	e0bff717 	ldw	r2,-36(fp)
   4551c:	1885c83a 	sub	r2,r3,r2
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
   45520:	10800044 	addi	r2,r2,1
   45524:	e0fffc17 	ldw	r3,-16(fp)
   45528:	1885883a 	add	r2,r3,r2
   4552c:	e0bffc15 	stw	r2,-16(fp)

  r3 = (int)&hcinfo;
   45530:	d0a01f04 	addi	r2,gp,-32644
   45534:	e0bfef15 	stw	r2,-68(fp)
  r4 = (int)name;
   45538:	e0bffc17 	ldw	r2,-16(fp)
   4553c:	e0bff015 	stw	r2,-64(fp)
  r5 = flags;
   45540:	e0bffd17 	ldw	r2,-12(fp)
   45544:	e0bff115 	stw	r2,-60(fp)
  r6 = mode;
   45548:	e0bffe17 	ldw	r2,-8(fp)
   4554c:	e0bff215 	stw	r2,-56(fp)
   45550:	e0bffc17 	ldw	r2,-16(fp)
   45554:	e0bff915 	stw	r2,-28(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
   45558:	e0bff917 	ldw	r2,-28(fp)
   4555c:	10bfffc4 	addi	r2,r2,-1
   45560:	e0bffa15 	stw	r2,-24(fp)

  while (*++ptr != 0)
   45564:	e0bffa17 	ldw	r2,-24(fp)
   45568:	10800044 	addi	r2,r2,1
   4556c:	e0bffa15 	stw	r2,-24(fp)
   45570:	e0bffa17 	ldw	r2,-24(fp)
   45574:	10800003 	ldbu	r2,0(r2)
   45578:	10803fcc 	andi	r2,r2,255
   4557c:	1080201c 	xori	r2,r2,128
   45580:	10bfe004 	addi	r2,r2,-128
   45584:	103ff71e 	bne	r2,zero,45564 <alt_hostfs_open+0xbc>
    ;

  return ptr - string;
   45588:	e0fffa17 	ldw	r3,-24(fp)
   4558c:	e0bff917 	ldw	r2,-28(fp)
   45590:	1885c83a 	sub	r2,r3,r2

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
   45594:	e0bff315 	stw	r2,-52(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6), "D07" (r7) : "memory" );
   45598:	e13ff017 	ldw	r4,-64(fp)
   4559c:	e13fff15 	stw	r4,-4(fp)
   455a0:	e17ff117 	ldw	r5,-60(fp)
   455a4:	e1bff217 	ldw	r6,-56(fp)
   455a8:	e1fff317 	ldw	r7,-52(fp)
   455ac:	e0ffef17 	ldw	r3,-68(fp)
   455b0:	1821883a 	mov	r16,r3
   455b4:	8007883a 	mov	r3,r16
   455b8:	e13fff17 	ldw	r4,-4(fp)
   455bc:	003da07a 	break	1
   455c0:	1821883a 	mov	r16,r3
   455c4:	1023883a 	mov	r17,r2
   455c8:	e47ff415 	stw	r17,-48(fp)
   455cc:	e43fef15 	stw	r16,-68(fp)

  handle = (void *)r2;
   455d0:	e0bff417 	ldw	r2,-48(fp)
   455d4:	e0bff515 	stw	r2,-44(fp)
  error = r3;
   455d8:	e0bfef17 	ldw	r2,-68(fp)
   455dc:	e0bff615 	stw	r2,-40(fp)

  if (error == 0)
   455e0:	e0bff617 	ldw	r2,-40(fp)
   455e4:	1000031e 	bne	r2,zero,455f4 <alt_hostfs_open+0x14c>
    fd->priv = handle;
   455e8:	e0bffb17 	ldw	r2,-20(fp)
   455ec:	e0fff517 	ldw	r3,-44(fp)
   455f0:	10c00115 	stw	r3,4(r2)

  return -error;
   455f4:	e0bff617 	ldw	r2,-40(fp)
   455f8:	0085c83a 	sub	r2,zero,r2
}
   455fc:	e037883a 	mov	sp,fp
   45600:	df000217 	ldw	fp,8(sp)
   45604:	dc400117 	ldw	r17,4(sp)
   45608:	dc000017 	ldw	r16,0(sp)
   4560c:	dec00304 	addi	sp,sp,12
   45610:	f800283a 	ret

00045614 <alt_hostfs_close>:
* alt_hostfs_close
*
* Read the file
*/
int alt_hostfs_close(alt_fd* fd)
{
   45614:	defffa04 	addi	sp,sp,-24
   45618:	df000515 	stw	fp,20(sp)
   4561c:	dc000415 	stw	r16,16(sp)
   45620:	df000404 	addi	fp,sp,16
   45624:	e13fff15 	stw	r4,-4(fp)
  int error;

  /* Input and output parameters for the hostcall */
  int r3, r4;

  r3 = (int)&hcinfo;
   45628:	d0a01c04 	addi	r2,gp,-32656
   4562c:	e0bffc15 	stw	r2,-16(fp)
  r4 = (int)fd->priv;
   45630:	e0bfff17 	ldw	r2,-4(fp)
   45634:	10800117 	ldw	r2,4(r2)
   45638:	e0bffd15 	stw	r2,-12(fp)

  __asm__ volatile("break 1" : "+D03" (r3) : "D04" (r4) );
   4563c:	e0bffd17 	ldw	r2,-12(fp)
   45640:	e0fffc17 	ldw	r3,-16(fp)
   45644:	1821883a 	mov	r16,r3
   45648:	8007883a 	mov	r3,r16
   4564c:	1009883a 	mov	r4,r2
   45650:	003da07a 	break	1
   45654:	1821883a 	mov	r16,r3
   45658:	e43ffc15 	stw	r16,-16(fp)

  error = r3;
   4565c:	e0bffc17 	ldw	r2,-16(fp)
   45660:	e0bffe15 	stw	r2,-8(fp)

  return -error;
   45664:	e0bffe17 	ldw	r2,-8(fp)
   45668:	0085c83a 	sub	r2,zero,r2
}
   4566c:	e037883a 	mov	sp,fp
   45670:	df000117 	ldw	fp,4(sp)
   45674:	dc000017 	ldw	r16,0(sp)
   45678:	dec00204 	addi	sp,sp,8
   4567c:	f800283a 	ret

00045680 <alt_hostfs_read>:
* alt_hostfs_read
*
* Read the file
*/
int alt_hostfs_read(alt_fd* fd, char * ptr, int len)
{
   45680:	defff204 	addi	sp,sp,-56
   45684:	df000d15 	stw	fp,52(sp)
   45688:	dc400c15 	stw	r17,48(sp)
   4568c:	dc000b15 	stw	r16,44(sp)
   45690:	df000b04 	addi	fp,sp,44
   45694:	e13ffc15 	stw	r4,-16(fp)
   45698:	e17ffd15 	stw	r5,-12(fp)
   4569c:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
   456a0:	d0a01904 	addi	r2,gp,-32668
   456a4:	e0bff515 	stw	r2,-44(fp)
  r4 = (int)fd->priv;
   456a8:	e0bffc17 	ldw	r2,-16(fp)
   456ac:	10800117 	ldw	r2,4(r2)
   456b0:	e0bff615 	stw	r2,-40(fp)
  r5 = (int)ptr;
   456b4:	e0bffd17 	ldw	r2,-12(fp)
   456b8:	e0bff715 	stw	r2,-36(fp)
  r6 = len;
   456bc:	e0bffe17 	ldw	r2,-8(fp)
   456c0:	e0bff815 	stw	r2,-32(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
   456c4:	e13ff617 	ldw	r4,-40(fp)
   456c8:	e13fff15 	stw	r4,-4(fp)
   456cc:	e17ff717 	ldw	r5,-36(fp)
   456d0:	e1bff817 	ldw	r6,-32(fp)
   456d4:	e0fff517 	ldw	r3,-44(fp)
   456d8:	1821883a 	mov	r16,r3
   456dc:	8007883a 	mov	r3,r16
   456e0:	e13fff17 	ldw	r4,-4(fp)
   456e4:	003da07a 	break	1
   456e8:	1821883a 	mov	r16,r3
   456ec:	1023883a 	mov	r17,r2
   456f0:	e47ff915 	stw	r17,-28(fp)
   456f4:	e43ff515 	stw	r16,-44(fp)

  rc = r2;
   456f8:	e0bff917 	ldw	r2,-28(fp)
   456fc:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
   45700:	e0bff517 	ldw	r2,-44(fp)
   45704:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
   45708:	e0bffb17 	ldw	r2,-20(fp)
   4570c:	10000326 	beq	r2,zero,4571c <alt_hostfs_read+0x9c>
   45710:	e0bffb17 	ldw	r2,-20(fp)
   45714:	0085c83a 	sub	r2,zero,r2
   45718:	00000106 	br	45720 <alt_hostfs_read+0xa0>
   4571c:	e0bffa17 	ldw	r2,-24(fp)
}
   45720:	e037883a 	mov	sp,fp
   45724:	df000217 	ldw	fp,8(sp)
   45728:	dc400117 	ldw	r17,4(sp)
   4572c:	dc000017 	ldw	r16,0(sp)
   45730:	dec00304 	addi	sp,sp,12
   45734:	f800283a 	ret

00045738 <alt_hostfs_write>:
* alt_hostfs_write
*
* Read the file
*/
int alt_hostfs_write(alt_fd* fd, const char * ptr, int len)
{
   45738:	defff204 	addi	sp,sp,-56
   4573c:	df000d15 	stw	fp,52(sp)
   45740:	dc400c15 	stw	r17,48(sp)
   45744:	dc000b15 	stw	r16,44(sp)
   45748:	df000b04 	addi	fp,sp,44
   4574c:	e13ffc15 	stw	r4,-16(fp)
   45750:	e17ffd15 	stw	r5,-12(fp)
   45754:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
   45758:	d0a01604 	addi	r2,gp,-32680
   4575c:	e0bff515 	stw	r2,-44(fp)
  r4 = (int)fd->priv;
   45760:	e0bffc17 	ldw	r2,-16(fp)
   45764:	10800117 	ldw	r2,4(r2)
   45768:	e0bff615 	stw	r2,-40(fp)
  r5 = (int)ptr;
   4576c:	e0bffd17 	ldw	r2,-12(fp)
   45770:	e0bff715 	stw	r2,-36(fp)
  r6 = len;
   45774:	e0bffe17 	ldw	r2,-8(fp)
   45778:	e0bff815 	stw	r2,-32(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
   4577c:	e13ff617 	ldw	r4,-40(fp)
   45780:	e13fff15 	stw	r4,-4(fp)
   45784:	e17ff717 	ldw	r5,-36(fp)
   45788:	e1bff817 	ldw	r6,-32(fp)
   4578c:	e0fff517 	ldw	r3,-44(fp)
   45790:	1821883a 	mov	r16,r3
   45794:	8007883a 	mov	r3,r16
   45798:	e13fff17 	ldw	r4,-4(fp)
   4579c:	003da07a 	break	1
   457a0:	1821883a 	mov	r16,r3
   457a4:	1023883a 	mov	r17,r2
   457a8:	e47ff915 	stw	r17,-28(fp)
   457ac:	e43ff515 	stw	r16,-44(fp)

  rc = r2;
   457b0:	e0bff917 	ldw	r2,-28(fp)
   457b4:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
   457b8:	e0bff517 	ldw	r2,-44(fp)
   457bc:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
   457c0:	e0bffb17 	ldw	r2,-20(fp)
   457c4:	10000326 	beq	r2,zero,457d4 <alt_hostfs_write+0x9c>
   457c8:	e0bffb17 	ldw	r2,-20(fp)
   457cc:	0085c83a 	sub	r2,zero,r2
   457d0:	00000106 	br	457d8 <alt_hostfs_write+0xa0>
   457d4:	e0bffa17 	ldw	r2,-24(fp)
}
   457d8:	e037883a 	mov	sp,fp
   457dc:	df000217 	ldw	fp,8(sp)
   457e0:	dc400117 	ldw	r17,4(sp)
   457e4:	dc000017 	ldw	r16,0(sp)
   457e8:	dec00304 	addi	sp,sp,12
   457ec:	f800283a 	ret

000457f0 <alt_hostfs_seek>:
* Move around within a file
*
* returns -errno for an error or the offset within the file
*/
int alt_hostfs_seek(alt_fd* fd, int ptr, int dir)
{
   457f0:	defff204 	addi	sp,sp,-56
   457f4:	df000d15 	stw	fp,52(sp)
   457f8:	dc400c15 	stw	r17,48(sp)
   457fc:	dc000b15 	stw	r16,44(sp)
   45800:	df000b04 	addi	fp,sp,44
   45804:	e13ffc15 	stw	r4,-16(fp)
   45808:	e17ffd15 	stw	r5,-12(fp)
   4580c:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
   45810:	d0a01304 	addi	r2,gp,-32692
   45814:	e0bff515 	stw	r2,-44(fp)
  r4 = (int)fd->priv;
   45818:	e0bffc17 	ldw	r2,-16(fp)
   4581c:	10800117 	ldw	r2,4(r2)
   45820:	e0bff615 	stw	r2,-40(fp)
  r5 = ptr;
   45824:	e0bffd17 	ldw	r2,-12(fp)
   45828:	e0bff715 	stw	r2,-36(fp)
  r6 = dir;
   4582c:	e0bffe17 	ldw	r2,-8(fp)
   45830:	e0bff815 	stw	r2,-32(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
   45834:	e13ff617 	ldw	r4,-40(fp)
   45838:	e13fff15 	stw	r4,-4(fp)
   4583c:	e17ff717 	ldw	r5,-36(fp)
   45840:	e1bff817 	ldw	r6,-32(fp)
   45844:	e0fff517 	ldw	r3,-44(fp)
   45848:	1821883a 	mov	r16,r3
   4584c:	8007883a 	mov	r3,r16
   45850:	e13fff17 	ldw	r4,-4(fp)
   45854:	003da07a 	break	1
   45858:	1821883a 	mov	r16,r3
   4585c:	1023883a 	mov	r17,r2
   45860:	e47ff915 	stw	r17,-28(fp)
   45864:	e43ff515 	stw	r16,-44(fp)

  rc = r2;
   45868:	e0bff917 	ldw	r2,-28(fp)
   4586c:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
   45870:	e0bff517 	ldw	r2,-44(fp)
   45874:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
   45878:	e0bffb17 	ldw	r2,-20(fp)
   4587c:	10000326 	beq	r2,zero,4588c <alt_hostfs_seek+0x9c>
   45880:	e0bffb17 	ldw	r2,-20(fp)
   45884:	0085c83a 	sub	r2,zero,r2
   45888:	00000106 	br	45890 <alt_hostfs_seek+0xa0>
   4588c:	e0bffa17 	ldw	r2,-24(fp)
}
   45890:	e037883a 	mov	sp,fp
   45894:	df000217 	ldw	fp,8(sp)
   45898:	dc400117 	ldw	r17,4(sp)
   4589c:	dc000017 	ldw	r16,0(sp)
   458a0:	dec00304 	addi	sp,sp,12
   458a4:	f800283a 	ret

000458a8 <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
   458a8:	deffe204 	addi	sp,sp,-120
   458ac:	df001d15 	stw	fp,116(sp)
   458b0:	dc401c15 	stw	r17,112(sp)
   458b4:	dc001b15 	stw	r16,108(sp)
   458b8:	df001b04 	addi	fp,sp,108
   458bc:	e13ffd15 	stw	r4,-12(fp)
   458c0:	e17ffe15 	stw	r5,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5;

  r3 = (int)&hcinfo;
   458c4:	d0a01004 	addi	r2,gp,-32704
   458c8:	e0bfe615 	stw	r2,-104(fp)
  r4 = (int)fd->priv;
   458cc:	e0bffd17 	ldw	r2,-12(fp)
   458d0:	10800117 	ldw	r2,4(r2)
   458d4:	e0bfe715 	stw	r2,-100(fp)
  r5 = (int)&hoststat;
   458d8:	e0bfed04 	addi	r2,fp,-76
   458dc:	e0bfe815 	stw	r2,-96(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5) : "memory" );
   458e0:	e13fe717 	ldw	r4,-100(fp)
   458e4:	e13fff15 	stw	r4,-4(fp)
   458e8:	e17fe817 	ldw	r5,-96(fp)
   458ec:	e0ffe617 	ldw	r3,-104(fp)
   458f0:	1821883a 	mov	r16,r3
   458f4:	8007883a 	mov	r3,r16
   458f8:	e13fff17 	ldw	r4,-4(fp)
   458fc:	003da07a 	break	1
   45900:	1821883a 	mov	r16,r3
   45904:	1023883a 	mov	r17,r2
   45908:	e47fe915 	stw	r17,-92(fp)
   4590c:	e43fe615 	stw	r16,-104(fp)

  rc = r2;
   45910:	e0bfe917 	ldw	r2,-92(fp)
   45914:	e0bfea15 	stw	r2,-88(fp)
  error = r3;
   45918:	e0bfe617 	ldw	r2,-104(fp)
   4591c:	e0bfeb15 	stw	r2,-84(fp)

  if (error == 0)
   45920:	e0bfeb17 	ldw	r2,-84(fp)
   45924:	1000621e 	bne	r2,zero,45ab0 <alt_hostfs_fstat+0x208>
     * no change is required.  On a little-endian processor we need to swap
     * the bytes in each word.
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
   45928:	e0bfed04 	addi	r2,fp,-76
   4592c:	e0bfe515 	stw	r2,-108(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
   45930:	e0bfe517 	ldw	r2,-108(fp)
   45934:	10801004 	addi	r2,r2,64
   45938:	e0bfec15 	stw	r2,-80(fp)
    for ( ; ptr < end ; ptr++)
   4593c:	00001606 	br	45998 <alt_hostfs_fstat+0xf0>
      *ptr = ((*ptr & 0xFF000000) >> 24) |
   45940:	e0bfe517 	ldw	r2,-108(fp)
   45944:	10800017 	ldw	r2,0(r2)
   45948:	1006d63a 	srli	r3,r2,24
             ((*ptr & 0x00FF0000) >> 8)  |
   4594c:	e0bfe517 	ldw	r2,-108(fp)
   45950:	10800017 	ldw	r2,0(r2)
   45954:	10803fec 	andhi	r2,r2,255
   45958:	1004d23a 	srli	r2,r2,8

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
   4595c:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
   45960:	e0bfe517 	ldw	r2,-108(fp)
   45964:	10800017 	ldw	r2,0(r2)
   45968:	10bfc00c 	andi	r2,r2,65280
   4596c:	1004923a 	slli	r2,r2,8
#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
   45970:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
   45974:	e0bfe517 	ldw	r2,-108(fp)
   45978:	10800017 	ldw	r2,0(r2)
   4597c:	1004963a 	slli	r2,r2,24
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
   45980:	1886b03a 	or	r3,r3,r2

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
   45984:	e0bfe517 	ldw	r2,-108(fp)
   45988:	10c00015 	stw	r3,0(r2)
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
   4598c:	e0bfe517 	ldw	r2,-108(fp)
   45990:	10800104 	addi	r2,r2,4
   45994:	e0bfe515 	stw	r2,-108(fp)
   45998:	e0ffe517 	ldw	r3,-108(fp)
   4599c:	e0bfec17 	ldw	r2,-80(fp)
   459a0:	18bfe736 	bltu	r3,r2,45940 <alt_hostfs_fstat+0x98>
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
   459a4:	e0bffe17 	ldw	r2,-8(fp)
   459a8:	e0bfe515 	stw	r2,-108(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
   459ac:	e0bfe517 	ldw	r2,-108(fp)
   459b0:	10800f04 	addi	r2,r2,60
   459b4:	e0bfec15 	stw	r2,-80(fp)
    for ( ; ptr < end ; ptr++)
   459b8:	00000506 	br	459d0 <alt_hostfs_fstat+0x128>
      *ptr = 0;
   459bc:	e0bfe517 	ldw	r2,-108(fp)
   459c0:	10000015 	stw	zero,0(r2)
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
    for ( ; ptr < end ; ptr++)
   459c4:	e0bfe517 	ldw	r2,-108(fp)
   459c8:	10800104 	addi	r2,r2,4
   459cc:	e0bfe515 	stw	r2,-108(fp)
   459d0:	e0ffe517 	ldw	r3,-108(fp)
   459d4:	e0bfec17 	ldw	r2,-80(fp)
   459d8:	18bff836 	bltu	r3,r2,459bc <alt_hostfs_fstat+0x114>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
   459dc:	e0bfed17 	ldw	r2,-76(fp)
   459e0:	1007883a 	mov	r3,r2
   459e4:	e0bffe17 	ldw	r2,-8(fp)
   459e8:	10c0000d 	sth	r3,0(r2)
    st->st_ino     = hoststat.fst_ino;
   459ec:	e0bfee17 	ldw	r2,-72(fp)
   459f0:	1007883a 	mov	r3,r2
   459f4:	e0bffe17 	ldw	r2,-8(fp)
   459f8:	10c0008d 	sth	r3,2(r2)
    st->st_mode    = hoststat.fst_mode;
   459fc:	e0ffef17 	ldw	r3,-68(fp)
   45a00:	e0bffe17 	ldw	r2,-8(fp)
   45a04:	10c00115 	stw	r3,4(r2)
    st->st_nlink   = hoststat.fst_nlink;
   45a08:	e0bff017 	ldw	r2,-64(fp)
   45a0c:	1007883a 	mov	r3,r2
   45a10:	e0bffe17 	ldw	r2,-8(fp)
   45a14:	10c0020d 	sth	r3,8(r2)
    st->st_uid     = hoststat.fst_uid;
   45a18:	e0bff117 	ldw	r2,-60(fp)
   45a1c:	1007883a 	mov	r3,r2
   45a20:	e0bffe17 	ldw	r2,-8(fp)
   45a24:	10c0028d 	sth	r3,10(r2)
    st->st_gid     = hoststat.fst_gid;
   45a28:	e0bff217 	ldw	r2,-56(fp)
   45a2c:	1007883a 	mov	r3,r2
   45a30:	e0bffe17 	ldw	r2,-8(fp)
   45a34:	10c0030d 	sth	r3,12(r2)
    st->st_rdev    = hoststat.fst_rdev;
   45a38:	e0bff317 	ldw	r2,-52(fp)
   45a3c:	1007883a 	mov	r3,r2
   45a40:	e0bffe17 	ldw	r2,-8(fp)
   45a44:	10c0038d 	sth	r3,14(r2)
    st->st_size    = hoststat.fst_size[1];
   45a48:	e0bff517 	ldw	r2,-44(fp)
   45a4c:	1007883a 	mov	r3,r2
   45a50:	e0bffe17 	ldw	r2,-8(fp)
   45a54:	10c00415 	stw	r3,16(r2)

    st->st_atime   = hoststat.fst_atime;
   45a58:	e0bffa17 	ldw	r2,-24(fp)
   45a5c:	1007883a 	mov	r3,r2
   45a60:	e0bffe17 	ldw	r2,-8(fp)
   45a64:	10c00515 	stw	r3,20(r2)
    st->st_mtime   = hoststat.fst_mtime;
   45a68:	e0bffb17 	ldw	r2,-20(fp)
   45a6c:	1007883a 	mov	r3,r2
   45a70:	e0bffe17 	ldw	r2,-8(fp)
   45a74:	10c00715 	stw	r3,28(r2)
    st->st_ctime   = hoststat.fst_ctime;
   45a78:	e0bffc17 	ldw	r2,-16(fp)
   45a7c:	1007883a 	mov	r3,r2
   45a80:	e0bffe17 	ldw	r2,-8(fp)
   45a84:	10c00915 	stw	r3,36(r2)

    st->st_blksize = hoststat.fst_blksize[1];
   45a88:	e0bff717 	ldw	r2,-36(fp)
   45a8c:	1007883a 	mov	r3,r2
   45a90:	e0bffe17 	ldw	r2,-8(fp)
   45a94:	10c00b15 	stw	r3,44(r2)
    st->st_blocks  = hoststat.fst_blocks[1];
   45a98:	e0bff917 	ldw	r2,-28(fp)
   45a9c:	1007883a 	mov	r3,r2
   45aa0:	e0bffe17 	ldw	r2,-8(fp)
   45aa4:	10c00c15 	stw	r3,48(r2)

    return rc;
   45aa8:	e0bfea17 	ldw	r2,-88(fp)
   45aac:	00000206 	br	45ab8 <alt_hostfs_fstat+0x210>
  }
  else
    return -error;
   45ab0:	e0bfeb17 	ldw	r2,-84(fp)
   45ab4:	0085c83a 	sub	r2,zero,r2
}
   45ab8:	e037883a 	mov	sp,fp
   45abc:	df000217 	ldw	fp,8(sp)
   45ac0:	dc400117 	ldw	r17,4(sp)
   45ac4:	dc000017 	ldw	r16,0(sp)
   45ac8:	dec00304 	addi	sp,sp,12
   45acc:	f800283a 	ret

00045ad0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   45ad0:	defff504 	addi	sp,sp,-44
   45ad4:	df000a15 	stw	fp,40(sp)
   45ad8:	df000a04 	addi	fp,sp,40
   45adc:	e13ffc15 	stw	r4,-16(fp)
   45ae0:	e17ffd15 	stw	r5,-12(fp)
   45ae4:	e1bffe15 	stw	r6,-8(fp)
   45ae8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   45aec:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   45af0:	00800174 	movhi	r2,5
   45af4:	10a8d604 	addi	r2,r2,-23720
   45af8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   45afc:	10003f26 	beq	r2,zero,45bfc <alt_alarm_start+0x12c>
  {
    if (alarm)
   45b00:	e0bffc17 	ldw	r2,-16(fp)
   45b04:	10003b26 	beq	r2,zero,45bf4 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   45b08:	e0bffc17 	ldw	r2,-16(fp)
   45b0c:	e0fffe17 	ldw	r3,-8(fp)
   45b10:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   45b14:	e0bffc17 	ldw	r2,-16(fp)
   45b18:	e0ffff17 	ldw	r3,-4(fp)
   45b1c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45b20:	0005303a 	rdctl	r2,status
   45b24:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   45b28:	e0fff817 	ldw	r3,-32(fp)
   45b2c:	00bfff84 	movi	r2,-2
   45b30:	1884703a 	and	r2,r3,r2
   45b34:	1001703a 	wrctl	status,r2
  
  return context;
   45b38:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   45b3c:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   45b40:	00800174 	movhi	r2,5
   45b44:	10a8d704 	addi	r2,r2,-23716
   45b48:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   45b4c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   45b50:	e0fffd17 	ldw	r3,-12(fp)
   45b54:	e0bff617 	ldw	r2,-40(fp)
   45b58:	1885883a 	add	r2,r3,r2
   45b5c:	10c00044 	addi	r3,r2,1
   45b60:	e0bffc17 	ldw	r2,-16(fp)
   45b64:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   45b68:	e0bffc17 	ldw	r2,-16(fp)
   45b6c:	10c00217 	ldw	r3,8(r2)
   45b70:	e0bff617 	ldw	r2,-40(fp)
   45b74:	1880042e 	bgeu	r3,r2,45b88 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   45b78:	e0bffc17 	ldw	r2,-16(fp)
   45b7c:	00c00044 	movi	r3,1
   45b80:	10c00405 	stb	r3,16(r2)
   45b84:	00000206 	br	45b90 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   45b88:	e0bffc17 	ldw	r2,-16(fp)
   45b8c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   45b90:	e0bffc17 	ldw	r2,-16(fp)
   45b94:	00c00174 	movhi	r3,5
   45b98:	18e21804 	addi	r3,r3,-30624
   45b9c:	e0fff915 	stw	r3,-28(fp)
   45ba0:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   45ba4:	e0bffa17 	ldw	r2,-24(fp)
   45ba8:	e0fff917 	ldw	r3,-28(fp)
   45bac:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   45bb0:	e0bff917 	ldw	r2,-28(fp)
   45bb4:	10c00017 	ldw	r3,0(r2)
   45bb8:	e0bffa17 	ldw	r2,-24(fp)
   45bbc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   45bc0:	e0bff917 	ldw	r2,-28(fp)
   45bc4:	10800017 	ldw	r2,0(r2)
   45bc8:	e0fffa17 	ldw	r3,-24(fp)
   45bcc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   45bd0:	e0bff917 	ldw	r2,-28(fp)
   45bd4:	e0fffa17 	ldw	r3,-24(fp)
   45bd8:	10c00015 	stw	r3,0(r2)
   45bdc:	e0bff717 	ldw	r2,-36(fp)
   45be0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45be4:	e0bffb17 	ldw	r2,-20(fp)
   45be8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   45bec:	0005883a 	mov	r2,zero
   45bf0:	00000306 	br	45c00 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   45bf4:	00bffa84 	movi	r2,-22
   45bf8:	00000106 	br	45c00 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   45bfc:	00bfde84 	movi	r2,-134
  }
}
   45c00:	e037883a 	mov	sp,fp
   45c04:	df000017 	ldw	fp,0(sp)
   45c08:	dec00104 	addi	sp,sp,4
   45c0c:	f800283a 	ret

00045c10 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   45c10:	deffff04 	addi	sp,sp,-4
   45c14:	df000015 	stw	fp,0(sp)
   45c18:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   45c1c:	e037883a 	mov	sp,fp
   45c20:	df000017 	ldw	fp,0(sp)
   45c24:	dec00104 	addi	sp,sp,4
   45c28:	f800283a 	ret

00045c2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   45c2c:	defffe04 	addi	sp,sp,-8
   45c30:	dfc00115 	stw	ra,4(sp)
   45c34:	df000015 	stw	fp,0(sp)
   45c38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   45c3c:	00800174 	movhi	r2,5
   45c40:	10a20304 	addi	r2,r2,-30708
   45c44:	10800017 	ldw	r2,0(r2)
   45c48:	10000526 	beq	r2,zero,45c60 <alt_get_errno+0x34>
   45c4c:	00800174 	movhi	r2,5
   45c50:	10a20304 	addi	r2,r2,-30708
   45c54:	10800017 	ldw	r2,0(r2)
   45c58:	103ee83a 	callr	r2
   45c5c:	00000206 	br	45c68 <alt_get_errno+0x3c>
   45c60:	00800174 	movhi	r2,5
   45c64:	10a8d104 	addi	r2,r2,-23740
}
   45c68:	e037883a 	mov	sp,fp
   45c6c:	dfc00117 	ldw	ra,4(sp)
   45c70:	df000017 	ldw	fp,0(sp)
   45c74:	dec00204 	addi	sp,sp,8
   45c78:	f800283a 	ret

00045c7c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   45c7c:	defffa04 	addi	sp,sp,-24
   45c80:	dfc00515 	stw	ra,20(sp)
   45c84:	df000415 	stw	fp,16(sp)
   45c88:	df000404 	addi	fp,sp,16
   45c8c:	e13ffe15 	stw	r4,-8(fp)
   45c90:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   45c94:	e0bffe17 	ldw	r2,-8(fp)
   45c98:	10000326 	beq	r2,zero,45ca8 <alt_dev_llist_insert+0x2c>
   45c9c:	e0bffe17 	ldw	r2,-8(fp)
   45ca0:	10800217 	ldw	r2,8(r2)
   45ca4:	1000051e 	bne	r2,zero,45cbc <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   45ca8:	0045c2c0 	call	45c2c <alt_get_errno>
   45cac:	00c00584 	movi	r3,22
   45cb0:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   45cb4:	00bffa84 	movi	r2,-22
   45cb8:	00001306 	br	45d08 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   45cbc:	e0bffe17 	ldw	r2,-8(fp)
   45cc0:	e0ffff17 	ldw	r3,-4(fp)
   45cc4:	e0fffc15 	stw	r3,-16(fp)
   45cc8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   45ccc:	e0bffd17 	ldw	r2,-12(fp)
   45cd0:	e0fffc17 	ldw	r3,-16(fp)
   45cd4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   45cd8:	e0bffc17 	ldw	r2,-16(fp)
   45cdc:	10c00017 	ldw	r3,0(r2)
   45ce0:	e0bffd17 	ldw	r2,-12(fp)
   45ce4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   45ce8:	e0bffc17 	ldw	r2,-16(fp)
   45cec:	10800017 	ldw	r2,0(r2)
   45cf0:	e0fffd17 	ldw	r3,-12(fp)
   45cf4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   45cf8:	e0bffc17 	ldw	r2,-16(fp)
   45cfc:	e0fffd17 	ldw	r3,-12(fp)
   45d00:	10c00015 	stw	r3,0(r2)

  return 0;  
   45d04:	0005883a 	mov	r2,zero
}
   45d08:	e037883a 	mov	sp,fp
   45d0c:	dfc00117 	ldw	ra,4(sp)
   45d10:	df000017 	ldw	fp,0(sp)
   45d14:	dec00204 	addi	sp,sp,8
   45d18:	f800283a 	ret

00045d1c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   45d1c:	defffd04 	addi	sp,sp,-12
   45d20:	dfc00215 	stw	ra,8(sp)
   45d24:	df000115 	stw	fp,4(sp)
   45d28:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   45d2c:	00800134 	movhi	r2,4
   45d30:	109b4c04 	addi	r2,r2,27952
   45d34:	e0bfff15 	stw	r2,-4(fp)
   45d38:	00000606 	br	45d54 <_do_ctors+0x38>
        (*ctor) (); 
   45d3c:	e0bfff17 	ldw	r2,-4(fp)
   45d40:	10800017 	ldw	r2,0(r2)
   45d44:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   45d48:	e0bfff17 	ldw	r2,-4(fp)
   45d4c:	10bfff04 	addi	r2,r2,-4
   45d50:	e0bfff15 	stw	r2,-4(fp)
   45d54:	e0ffff17 	ldw	r3,-4(fp)
   45d58:	00800134 	movhi	r2,4
   45d5c:	109b4d04 	addi	r2,r2,27956
   45d60:	18bff62e 	bgeu	r3,r2,45d3c <_do_ctors+0x20>
        (*ctor) (); 
}
   45d64:	e037883a 	mov	sp,fp
   45d68:	dfc00117 	ldw	ra,4(sp)
   45d6c:	df000017 	ldw	fp,0(sp)
   45d70:	dec00204 	addi	sp,sp,8
   45d74:	f800283a 	ret

00045d78 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   45d78:	defffd04 	addi	sp,sp,-12
   45d7c:	dfc00215 	stw	ra,8(sp)
   45d80:	df000115 	stw	fp,4(sp)
   45d84:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   45d88:	00800134 	movhi	r2,4
   45d8c:	109b4c04 	addi	r2,r2,27952
   45d90:	e0bfff15 	stw	r2,-4(fp)
   45d94:	00000606 	br	45db0 <_do_dtors+0x38>
        (*dtor) (); 
   45d98:	e0bfff17 	ldw	r2,-4(fp)
   45d9c:	10800017 	ldw	r2,0(r2)
   45da0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   45da4:	e0bfff17 	ldw	r2,-4(fp)
   45da8:	10bfff04 	addi	r2,r2,-4
   45dac:	e0bfff15 	stw	r2,-4(fp)
   45db0:	e0ffff17 	ldw	r3,-4(fp)
   45db4:	00800134 	movhi	r2,4
   45db8:	109b4d04 	addi	r2,r2,27956
   45dbc:	18bff62e 	bgeu	r3,r2,45d98 <_do_dtors+0x20>
        (*dtor) (); 
}
   45dc0:	e037883a 	mov	sp,fp
   45dc4:	dfc00117 	ldw	ra,4(sp)
   45dc8:	df000017 	ldw	fp,0(sp)
   45dcc:	dec00204 	addi	sp,sp,8
   45dd0:	f800283a 	ret

00045dd4 <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
   45dd4:	defffc04 	addi	sp,sp,-16
   45dd8:	df000315 	stw	fp,12(sp)
   45ddc:	df000304 	addi	fp,sp,12
   45de0:	e13fff15 	stw	r4,-4(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
   45de4:	e0bfff17 	ldw	r2,-4(fp)
   45de8:	10800217 	ldw	r2,8(r2)
   45dec:	1000021e 	bne	r2,zero,45df8 <alt_fs_reg+0x24>
  {
    return -ENODEV;
   45df0:	00bffb44 	movi	r2,-19
   45df4:	00001406 	br	45e48 <alt_fs_reg+0x74>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
   45df8:	e0bfff17 	ldw	r2,-4(fp)
   45dfc:	00c00174 	movhi	r3,5
   45e00:	18e1fe04 	addi	r3,r3,-30728
   45e04:	e0fffd15 	stw	r3,-12(fp)
   45e08:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   45e0c:	e0bffe17 	ldw	r2,-8(fp)
   45e10:	e0fffd17 	ldw	r3,-12(fp)
   45e14:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   45e18:	e0bffd17 	ldw	r2,-12(fp)
   45e1c:	10c00017 	ldw	r3,0(r2)
   45e20:	e0bffe17 	ldw	r2,-8(fp)
   45e24:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   45e28:	e0bffd17 	ldw	r2,-12(fp)
   45e2c:	10800017 	ldw	r2,0(r2)
   45e30:	e0fffe17 	ldw	r3,-8(fp)
   45e34:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   45e38:	e0bffd17 	ldw	r2,-12(fp)
   45e3c:	e0fffe17 	ldw	r3,-8(fp)
   45e40:	10c00015 	stw	r3,0(r2)

  return 0;
   45e44:	0005883a 	mov	r2,zero
} 
   45e48:	e037883a 	mov	sp,fp
   45e4c:	df000017 	ldw	fp,0(sp)
   45e50:	dec00104 	addi	sp,sp,4
   45e54:	f800283a 	ret

00045e58 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   45e58:	deffff04 	addi	sp,sp,-4
   45e5c:	df000015 	stw	fp,0(sp)
   45e60:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   45e64:	e037883a 	mov	sp,fp
   45e68:	df000017 	ldw	fp,0(sp)
   45e6c:	dec00104 	addi	sp,sp,4
   45e70:	f800283a 	ret

00045e74 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   45e74:	defff904 	addi	sp,sp,-28
   45e78:	dfc00615 	stw	ra,24(sp)
   45e7c:	df000515 	stw	fp,20(sp)
   45e80:	df000504 	addi	fp,sp,20
   45e84:	e13ffc15 	stw	r4,-16(fp)
   45e88:	e17ffd15 	stw	r5,-12(fp)
   45e8c:	e1bffe15 	stw	r6,-8(fp)
   45e90:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   45e94:	e0800217 	ldw	r2,8(fp)
   45e98:	d8800015 	stw	r2,0(sp)
   45e9c:	e13ffc17 	ldw	r4,-16(fp)
   45ea0:	e17ffd17 	ldw	r5,-12(fp)
   45ea4:	e1bffe17 	ldw	r6,-8(fp)
   45ea8:	e1ffff17 	ldw	r7,-4(fp)
   45eac:	004604c0 	call	4604c <alt_iic_isr_register>
}  
   45eb0:	e037883a 	mov	sp,fp
   45eb4:	dfc00117 	ldw	ra,4(sp)
   45eb8:	df000017 	ldw	fp,0(sp)
   45ebc:	dec00204 	addi	sp,sp,8
   45ec0:	f800283a 	ret

00045ec4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   45ec4:	defff904 	addi	sp,sp,-28
   45ec8:	df000615 	stw	fp,24(sp)
   45ecc:	df000604 	addi	fp,sp,24
   45ed0:	e13ffe15 	stw	r4,-8(fp)
   45ed4:	e17fff15 	stw	r5,-4(fp)
   45ed8:	e0bfff17 	ldw	r2,-4(fp)
   45edc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45ee0:	0005303a 	rdctl	r2,status
   45ee4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   45ee8:	e0fffb17 	ldw	r3,-20(fp)
   45eec:	00bfff84 	movi	r2,-2
   45ef0:	1884703a 	and	r2,r3,r2
   45ef4:	1001703a 	wrctl	status,r2
  
  return context;
   45ef8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   45efc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   45f00:	e0bffa17 	ldw	r2,-24(fp)
   45f04:	00c00044 	movi	r3,1
   45f08:	1884983a 	sll	r2,r3,r2
   45f0c:	1007883a 	mov	r3,r2
   45f10:	00800174 	movhi	r2,5
   45f14:	10a8d504 	addi	r2,r2,-23724
   45f18:	10800017 	ldw	r2,0(r2)
   45f1c:	1886b03a 	or	r3,r3,r2
   45f20:	00800174 	movhi	r2,5
   45f24:	10a8d504 	addi	r2,r2,-23724
   45f28:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   45f2c:	00800174 	movhi	r2,5
   45f30:	10a8d504 	addi	r2,r2,-23724
   45f34:	10800017 	ldw	r2,0(r2)
   45f38:	100170fa 	wrctl	ienable,r2
   45f3c:	e0bffc17 	ldw	r2,-16(fp)
   45f40:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45f44:	e0bffd17 	ldw	r2,-12(fp)
   45f48:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   45f4c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   45f50:	e037883a 	mov	sp,fp
   45f54:	df000017 	ldw	fp,0(sp)
   45f58:	dec00104 	addi	sp,sp,4
   45f5c:	f800283a 	ret

00045f60 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   45f60:	defff904 	addi	sp,sp,-28
   45f64:	df000615 	stw	fp,24(sp)
   45f68:	df000604 	addi	fp,sp,24
   45f6c:	e13ffe15 	stw	r4,-8(fp)
   45f70:	e17fff15 	stw	r5,-4(fp)
   45f74:	e0bfff17 	ldw	r2,-4(fp)
   45f78:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45f7c:	0005303a 	rdctl	r2,status
   45f80:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   45f84:	e0fffb17 	ldw	r3,-20(fp)
   45f88:	00bfff84 	movi	r2,-2
   45f8c:	1884703a 	and	r2,r3,r2
   45f90:	1001703a 	wrctl	status,r2
  
  return context;
   45f94:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   45f98:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   45f9c:	e0bffa17 	ldw	r2,-24(fp)
   45fa0:	00c00044 	movi	r3,1
   45fa4:	1884983a 	sll	r2,r3,r2
   45fa8:	0084303a 	nor	r2,zero,r2
   45fac:	1007883a 	mov	r3,r2
   45fb0:	00800174 	movhi	r2,5
   45fb4:	10a8d504 	addi	r2,r2,-23724
   45fb8:	10800017 	ldw	r2,0(r2)
   45fbc:	1886703a 	and	r3,r3,r2
   45fc0:	00800174 	movhi	r2,5
   45fc4:	10a8d504 	addi	r2,r2,-23724
   45fc8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   45fcc:	00800174 	movhi	r2,5
   45fd0:	10a8d504 	addi	r2,r2,-23724
   45fd4:	10800017 	ldw	r2,0(r2)
   45fd8:	100170fa 	wrctl	ienable,r2
   45fdc:	e0bffc17 	ldw	r2,-16(fp)
   45fe0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45fe4:	e0bffd17 	ldw	r2,-12(fp)
   45fe8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   45fec:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   45ff0:	e037883a 	mov	sp,fp
   45ff4:	df000017 	ldw	fp,0(sp)
   45ff8:	dec00104 	addi	sp,sp,4
   45ffc:	f800283a 	ret

00046000 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   46000:	defffc04 	addi	sp,sp,-16
   46004:	df000315 	stw	fp,12(sp)
   46008:	df000304 	addi	fp,sp,12
   4600c:	e13ffe15 	stw	r4,-8(fp)
   46010:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   46014:	000530fa 	rdctl	r2,ienable
   46018:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   4601c:	e0bfff17 	ldw	r2,-4(fp)
   46020:	00c00044 	movi	r3,1
   46024:	1884983a 	sll	r2,r3,r2
   46028:	1007883a 	mov	r3,r2
   4602c:	e0bffd17 	ldw	r2,-12(fp)
   46030:	1884703a 	and	r2,r3,r2
   46034:	1004c03a 	cmpne	r2,r2,zero
   46038:	10803fcc 	andi	r2,r2,255
}
   4603c:	e037883a 	mov	sp,fp
   46040:	df000017 	ldw	fp,0(sp)
   46044:	dec00104 	addi	sp,sp,4
   46048:	f800283a 	ret

0004604c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4604c:	defff504 	addi	sp,sp,-44
   46050:	dfc00a15 	stw	ra,40(sp)
   46054:	df000915 	stw	fp,36(sp)
   46058:	df000904 	addi	fp,sp,36
   4605c:	e13ffc15 	stw	r4,-16(fp)
   46060:	e17ffd15 	stw	r5,-12(fp)
   46064:	e1bffe15 	stw	r6,-8(fp)
   46068:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   4606c:	00bffa84 	movi	r2,-22
   46070:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   46074:	e0bffd17 	ldw	r2,-12(fp)
   46078:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   4607c:	e0bff817 	ldw	r2,-32(fp)
   46080:	10800808 	cmpgei	r2,r2,32
   46084:	1000271e 	bne	r2,zero,46124 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   46088:	0005303a 	rdctl	r2,status
   4608c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   46090:	e0fffa17 	ldw	r3,-24(fp)
   46094:	00bfff84 	movi	r2,-2
   46098:	1884703a 	and	r2,r3,r2
   4609c:	1001703a 	wrctl	status,r2
  
  return context;
   460a0:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   460a4:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   460a8:	00c00174 	movhi	r3,5
   460ac:	18e8e204 	addi	r3,r3,-23672
   460b0:	e0bff817 	ldw	r2,-32(fp)
   460b4:	100490fa 	slli	r2,r2,3
   460b8:	1885883a 	add	r2,r3,r2
   460bc:	e0fffe17 	ldw	r3,-8(fp)
   460c0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   460c4:	00c00174 	movhi	r3,5
   460c8:	18e8e204 	addi	r3,r3,-23672
   460cc:	e0bff817 	ldw	r2,-32(fp)
   460d0:	100490fa 	slli	r2,r2,3
   460d4:	1885883a 	add	r2,r3,r2
   460d8:	10800104 	addi	r2,r2,4
   460dc:	e0ffff17 	ldw	r3,-4(fp)
   460e0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   460e4:	e0bffe17 	ldw	r2,-8(fp)
   460e8:	10000526 	beq	r2,zero,46100 <alt_iic_isr_register+0xb4>
   460ec:	e0bff817 	ldw	r2,-32(fp)
   460f0:	e13ffc17 	ldw	r4,-16(fp)
   460f4:	100b883a 	mov	r5,r2
   460f8:	0045ec40 	call	45ec4 <alt_ic_irq_enable>
   460fc:	00000406 	br	46110 <alt_iic_isr_register+0xc4>
   46100:	e0bff817 	ldw	r2,-32(fp)
   46104:	e13ffc17 	ldw	r4,-16(fp)
   46108:	100b883a 	mov	r5,r2
   4610c:	0045f600 	call	45f60 <alt_ic_irq_disable>
   46110:	e0bff715 	stw	r2,-36(fp)
   46114:	e0bff917 	ldw	r2,-28(fp)
   46118:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4611c:	e0bffb17 	ldw	r2,-20(fp)
   46120:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   46124:	e0bff717 	ldw	r2,-36(fp)
}
   46128:	e037883a 	mov	sp,fp
   4612c:	dfc00117 	ldw	ra,4(sp)
   46130:	df000017 	ldw	fp,0(sp)
   46134:	dec00204 	addi	sp,sp,8
   46138:	f800283a 	ret

0004613c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   4613c:	defff804 	addi	sp,sp,-32
   46140:	dfc00715 	stw	ra,28(sp)
   46144:	df000615 	stw	fp,24(sp)
   46148:	dc000515 	stw	r16,20(sp)
   4614c:	df000504 	addi	fp,sp,20
   46150:	e13ffc15 	stw	r4,-16(fp)
   46154:	e17ffd15 	stw	r5,-12(fp)
   46158:	e1bffe15 	stw	r6,-8(fp)
   4615c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   46160:	e13ffd17 	ldw	r4,-12(fp)
   46164:	e17ffe17 	ldw	r5,-8(fp)
   46168:	e1bfff17 	ldw	r6,-4(fp)
   4616c:	00463d40 	call	463d4 <open>
   46170:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   46174:	e0bffb17 	ldw	r2,-20(fp)
   46178:	10002216 	blt	r2,zero,46204 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   4617c:	04000134 	movhi	r16,4
   46180:	841d7304 	addi	r16,r16,30156
   46184:	e0bffb17 	ldw	r2,-20(fp)
   46188:	1009883a 	mov	r4,r2
   4618c:	01400304 	movi	r5,12
   46190:	0040e540 	call	40e54 <__mulsi3>
   46194:	8085883a 	add	r2,r16,r2
   46198:	10c00017 	ldw	r3,0(r2)
   4619c:	e0bffc17 	ldw	r2,-16(fp)
   461a0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   461a4:	04000134 	movhi	r16,4
   461a8:	841d7304 	addi	r16,r16,30156
   461ac:	e0bffb17 	ldw	r2,-20(fp)
   461b0:	1009883a 	mov	r4,r2
   461b4:	01400304 	movi	r5,12
   461b8:	0040e540 	call	40e54 <__mulsi3>
   461bc:	8085883a 	add	r2,r16,r2
   461c0:	10800104 	addi	r2,r2,4
   461c4:	10c00017 	ldw	r3,0(r2)
   461c8:	e0bffc17 	ldw	r2,-16(fp)
   461cc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   461d0:	04000134 	movhi	r16,4
   461d4:	841d7304 	addi	r16,r16,30156
   461d8:	e0bffb17 	ldw	r2,-20(fp)
   461dc:	1009883a 	mov	r4,r2
   461e0:	01400304 	movi	r5,12
   461e4:	0040e540 	call	40e54 <__mulsi3>
   461e8:	8085883a 	add	r2,r16,r2
   461ec:	10800204 	addi	r2,r2,8
   461f0:	10c00017 	ldw	r3,0(r2)
   461f4:	e0bffc17 	ldw	r2,-16(fp)
   461f8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   461fc:	e13ffb17 	ldw	r4,-20(fp)
   46200:	00441080 	call	44108 <alt_release_fd>
  }
} 
   46204:	e037883a 	mov	sp,fp
   46208:	dfc00217 	ldw	ra,8(sp)
   4620c:	df000117 	ldw	fp,4(sp)
   46210:	dc000017 	ldw	r16,0(sp)
   46214:	dec00304 	addi	sp,sp,12
   46218:	f800283a 	ret

0004621c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   4621c:	defffb04 	addi	sp,sp,-20
   46220:	dfc00415 	stw	ra,16(sp)
   46224:	df000315 	stw	fp,12(sp)
   46228:	df000304 	addi	fp,sp,12
   4622c:	e13ffd15 	stw	r4,-12(fp)
   46230:	e17ffe15 	stw	r5,-8(fp)
   46234:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   46238:	01000134 	movhi	r4,4
   4623c:	211d7604 	addi	r4,r4,30168
   46240:	e17ffd17 	ldw	r5,-12(fp)
   46244:	01800044 	movi	r6,1
   46248:	01c07fc4 	movi	r7,511
   4624c:	004613c0 	call	4613c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   46250:	01000134 	movhi	r4,4
   46254:	211d7304 	addi	r4,r4,30156
   46258:	e17ffe17 	ldw	r5,-8(fp)
   4625c:	000d883a 	mov	r6,zero
   46260:	01c07fc4 	movi	r7,511
   46264:	004613c0 	call	4613c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   46268:	01000134 	movhi	r4,4
   4626c:	211d7904 	addi	r4,r4,30180
   46270:	e17fff17 	ldw	r5,-4(fp)
   46274:	01800044 	movi	r6,1
   46278:	01c07fc4 	movi	r7,511
   4627c:	004613c0 	call	4613c <alt_open_fd>
}  
   46280:	e037883a 	mov	sp,fp
   46284:	dfc00117 	ldw	ra,4(sp)
   46288:	df000017 	ldw	fp,0(sp)
   4628c:	dec00204 	addi	sp,sp,8
   46290:	f800283a 	ret

00046294 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   46294:	defffe04 	addi	sp,sp,-8
   46298:	dfc00115 	stw	ra,4(sp)
   4629c:	df000015 	stw	fp,0(sp)
   462a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   462a4:	00800174 	movhi	r2,5
   462a8:	10a20304 	addi	r2,r2,-30708
   462ac:	10800017 	ldw	r2,0(r2)
   462b0:	10000526 	beq	r2,zero,462c8 <alt_get_errno+0x34>
   462b4:	00800174 	movhi	r2,5
   462b8:	10a20304 	addi	r2,r2,-30708
   462bc:	10800017 	ldw	r2,0(r2)
   462c0:	103ee83a 	callr	r2
   462c4:	00000206 	br	462d0 <alt_get_errno+0x3c>
   462c8:	00800174 	movhi	r2,5
   462cc:	10a8d104 	addi	r2,r2,-23740
}
   462d0:	e037883a 	mov	sp,fp
   462d4:	dfc00117 	ldw	ra,4(sp)
   462d8:	df000017 	ldw	fp,0(sp)
   462dc:	dec00204 	addi	sp,sp,8
   462e0:	f800283a 	ret

000462e4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   462e4:	defffb04 	addi	sp,sp,-20
   462e8:	dfc00415 	stw	ra,16(sp)
   462ec:	df000315 	stw	fp,12(sp)
   462f0:	dc000215 	stw	r16,8(sp)
   462f4:	df000204 	addi	fp,sp,8
   462f8:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   462fc:	e0bfff17 	ldw	r2,-4(fp)
   46300:	10800217 	ldw	r2,8(r2)
   46304:	10d00034 	orhi	r3,r2,16384
   46308:	e0bfff17 	ldw	r2,-4(fp)
   4630c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   46310:	e03ffe15 	stw	zero,-8(fp)
   46314:	00002206 	br	463a0 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   46318:	04000134 	movhi	r16,4
   4631c:	841d7304 	addi	r16,r16,30156
   46320:	e0bffe17 	ldw	r2,-8(fp)
   46324:	1009883a 	mov	r4,r2
   46328:	01400304 	movi	r5,12
   4632c:	0040e540 	call	40e54 <__mulsi3>
   46330:	8085883a 	add	r2,r16,r2
   46334:	10c00017 	ldw	r3,0(r2)
   46338:	e0bfff17 	ldw	r2,-4(fp)
   4633c:	10800017 	ldw	r2,0(r2)
   46340:	1880141e 	bne	r3,r2,46394 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   46344:	04000134 	movhi	r16,4
   46348:	841d7304 	addi	r16,r16,30156
   4634c:	e0bffe17 	ldw	r2,-8(fp)
   46350:	1009883a 	mov	r4,r2
   46354:	01400304 	movi	r5,12
   46358:	0040e540 	call	40e54 <__mulsi3>
   4635c:	8085883a 	add	r2,r16,r2
   46360:	10800204 	addi	r2,r2,8
   46364:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   46368:	10000a0e 	bge	r2,zero,46394 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   4636c:	e13ffe17 	ldw	r4,-8(fp)
   46370:	01400304 	movi	r5,12
   46374:	0040e540 	call	40e54 <__mulsi3>
   46378:	00c00134 	movhi	r3,4
   4637c:	18dd7304 	addi	r3,r3,30156
   46380:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   46384:	e0bfff17 	ldw	r2,-4(fp)
   46388:	18800226 	beq	r3,r2,46394 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   4638c:	00bffcc4 	movi	r2,-13
   46390:	00000a06 	br	463bc <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   46394:	e0bffe17 	ldw	r2,-8(fp)
   46398:	10800044 	addi	r2,r2,1
   4639c:	e0bffe15 	stw	r2,-8(fp)
   463a0:	00800174 	movhi	r2,5
   463a4:	10a20204 	addi	r2,r2,-30712
   463a8:	10800017 	ldw	r2,0(r2)
   463ac:	1007883a 	mov	r3,r2
   463b0:	e0bffe17 	ldw	r2,-8(fp)
   463b4:	18bfd82e 	bgeu	r3,r2,46318 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   463b8:	0005883a 	mov	r2,zero
}
   463bc:	e037883a 	mov	sp,fp
   463c0:	dfc00217 	ldw	ra,8(sp)
   463c4:	df000117 	ldw	fp,4(sp)
   463c8:	dc000017 	ldw	r16,0(sp)
   463cc:	dec00304 	addi	sp,sp,12
   463d0:	f800283a 	ret

000463d4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   463d4:	defff604 	addi	sp,sp,-40
   463d8:	dfc00915 	stw	ra,36(sp)
   463dc:	df000815 	stw	fp,32(sp)
   463e0:	df000804 	addi	fp,sp,32
   463e4:	e13ffd15 	stw	r4,-12(fp)
   463e8:	e17ffe15 	stw	r5,-8(fp)
   463ec:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   463f0:	00bfffc4 	movi	r2,-1
   463f4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   463f8:	00bffb44 	movi	r2,-19
   463fc:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   46400:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   46404:	e13ffd17 	ldw	r4,-12(fp)
   46408:	01400174 	movhi	r5,5
   4640c:	29620004 	addi	r5,r5,-30720
   46410:	00466e80 	call	466e8 <alt_find_dev>
   46414:	e0bff815 	stw	r2,-32(fp)
   46418:	e0bff817 	ldw	r2,-32(fp)
   4641c:	1000051e 	bne	r2,zero,46434 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   46420:	e13ffd17 	ldw	r4,-12(fp)
   46424:	00467780 	call	46778 <alt_find_file>
   46428:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   4642c:	00800044 	movi	r2,1
   46430:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   46434:	e0bff817 	ldw	r2,-32(fp)
   46438:	10002a26 	beq	r2,zero,464e4 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   4643c:	e13ff817 	ldw	r4,-32(fp)
   46440:	004688c0 	call	4688c <alt_get_fd>
   46444:	e0bff915 	stw	r2,-28(fp)
   46448:	e0bff917 	ldw	r2,-28(fp)
   4644c:	1000030e 	bge	r2,zero,4645c <open+0x88>
    {
      status = index;
   46450:	e0bff917 	ldw	r2,-28(fp)
   46454:	e0bffa15 	stw	r2,-24(fp)
   46458:	00002406 	br	464ec <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   4645c:	e13ff917 	ldw	r4,-28(fp)
   46460:	01400304 	movi	r5,12
   46464:	0040e540 	call	40e54 <__mulsi3>
   46468:	00c00134 	movhi	r3,4
   4646c:	18dd7304 	addi	r3,r3,30156
   46470:	10c5883a 	add	r2,r2,r3
   46474:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   46478:	e0fffe17 	ldw	r3,-8(fp)
   4647c:	00900034 	movhi	r2,16384
   46480:	10bfffc4 	addi	r2,r2,-1
   46484:	1886703a 	and	r3,r3,r2
   46488:	e0bffc17 	ldw	r2,-16(fp)
   4648c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   46490:	e0bffb17 	ldw	r2,-20(fp)
   46494:	1000051e 	bne	r2,zero,464ac <open+0xd8>
   46498:	e13ffc17 	ldw	r4,-16(fp)
   4649c:	00462e40 	call	462e4 <alt_file_locked>
   464a0:	e0bffa15 	stw	r2,-24(fp)
   464a4:	e0bffa17 	ldw	r2,-24(fp)
   464a8:	10001016 	blt	r2,zero,464ec <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   464ac:	e0bff817 	ldw	r2,-32(fp)
   464b0:	10800317 	ldw	r2,12(r2)
   464b4:	10000826 	beq	r2,zero,464d8 <open+0x104>
   464b8:	e0bff817 	ldw	r2,-32(fp)
   464bc:	10800317 	ldw	r2,12(r2)
   464c0:	e13ffc17 	ldw	r4,-16(fp)
   464c4:	e17ffd17 	ldw	r5,-12(fp)
   464c8:	e1bffe17 	ldw	r6,-8(fp)
   464cc:	e1ffff17 	ldw	r7,-4(fp)
   464d0:	103ee83a 	callr	r2
   464d4:	00000106 	br	464dc <open+0x108>
   464d8:	0005883a 	mov	r2,zero
   464dc:	e0bffa15 	stw	r2,-24(fp)
   464e0:	00000206 	br	464ec <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   464e4:	00bffb44 	movi	r2,-19
   464e8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   464ec:	e0bffa17 	ldw	r2,-24(fp)
   464f0:	1000080e 	bge	r2,zero,46514 <open+0x140>
  {
    alt_release_fd (index);  
   464f4:	e13ff917 	ldw	r4,-28(fp)
   464f8:	00441080 	call	44108 <alt_release_fd>
    ALT_ERRNO = -status;
   464fc:	00462940 	call	46294 <alt_get_errno>
   46500:	e0fffa17 	ldw	r3,-24(fp)
   46504:	00c7c83a 	sub	r3,zero,r3
   46508:	10c00015 	stw	r3,0(r2)
    return -1;
   4650c:	00bfffc4 	movi	r2,-1
   46510:	00000106 	br	46518 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   46514:	e0bff917 	ldw	r2,-28(fp)
}
   46518:	e037883a 	mov	sp,fp
   4651c:	dfc00117 	ldw	ra,4(sp)
   46520:	df000017 	ldw	fp,0(sp)
   46524:	dec00204 	addi	sp,sp,8
   46528:	f800283a 	ret

0004652c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   4652c:	defffa04 	addi	sp,sp,-24
   46530:	df000515 	stw	fp,20(sp)
   46534:	df000504 	addi	fp,sp,20
   46538:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4653c:	0005303a 	rdctl	r2,status
   46540:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   46544:	e0fffc17 	ldw	r3,-16(fp)
   46548:	00bfff84 	movi	r2,-2
   4654c:	1884703a 	and	r2,r3,r2
   46550:	1001703a 	wrctl	status,r2
  
  return context;
   46554:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   46558:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   4655c:	e0bfff17 	ldw	r2,-4(fp)
   46560:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   46564:	e0bffd17 	ldw	r2,-12(fp)
   46568:	10800017 	ldw	r2,0(r2)
   4656c:	e0fffd17 	ldw	r3,-12(fp)
   46570:	18c00117 	ldw	r3,4(r3)
   46574:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   46578:	e0bffd17 	ldw	r2,-12(fp)
   4657c:	10800117 	ldw	r2,4(r2)
   46580:	e0fffd17 	ldw	r3,-12(fp)
   46584:	18c00017 	ldw	r3,0(r3)
   46588:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   4658c:	e0bffd17 	ldw	r2,-12(fp)
   46590:	e0fffd17 	ldw	r3,-12(fp)
   46594:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   46598:	e0bffd17 	ldw	r2,-12(fp)
   4659c:	e0fffd17 	ldw	r3,-12(fp)
   465a0:	10c00015 	stw	r3,0(r2)
   465a4:	e0bffb17 	ldw	r2,-20(fp)
   465a8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   465ac:	e0bffe17 	ldw	r2,-8(fp)
   465b0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   465b4:	e037883a 	mov	sp,fp
   465b8:	df000017 	ldw	fp,0(sp)
   465bc:	dec00104 	addi	sp,sp,4
   465c0:	f800283a 	ret

000465c4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   465c4:	defffb04 	addi	sp,sp,-20
   465c8:	dfc00415 	stw	ra,16(sp)
   465cc:	df000315 	stw	fp,12(sp)
   465d0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   465d4:	d0a02317 	ldw	r2,-32628(gp)
   465d8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   465dc:	d0a6e217 	ldw	r2,-25720(gp)
   465e0:	10800044 	addi	r2,r2,1
   465e4:	d0a6e215 	stw	r2,-25720(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   465e8:	00002e06 	br	466a4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   465ec:	e0bffd17 	ldw	r2,-12(fp)
   465f0:	10800017 	ldw	r2,0(r2)
   465f4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   465f8:	e0bffd17 	ldw	r2,-12(fp)
   465fc:	10800403 	ldbu	r2,16(r2)
   46600:	10803fcc 	andi	r2,r2,255
   46604:	10000426 	beq	r2,zero,46618 <alt_tick+0x54>
   46608:	d0a6e217 	ldw	r2,-25720(gp)
   4660c:	1000021e 	bne	r2,zero,46618 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   46610:	e0bffd17 	ldw	r2,-12(fp)
   46614:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   46618:	e0bffd17 	ldw	r2,-12(fp)
   4661c:	10800217 	ldw	r2,8(r2)
   46620:	d0e6e217 	ldw	r3,-25720(gp)
   46624:	18801d36 	bltu	r3,r2,4669c <alt_tick+0xd8>
   46628:	e0bffd17 	ldw	r2,-12(fp)
   4662c:	10800403 	ldbu	r2,16(r2)
   46630:	10803fcc 	andi	r2,r2,255
   46634:	1000191e 	bne	r2,zero,4669c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   46638:	e0bffd17 	ldw	r2,-12(fp)
   4663c:	10c00317 	ldw	r3,12(r2)
   46640:	e0bffd17 	ldw	r2,-12(fp)
   46644:	10800517 	ldw	r2,20(r2)
   46648:	1009883a 	mov	r4,r2
   4664c:	183ee83a 	callr	r3
   46650:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   46654:	e0bfff17 	ldw	r2,-4(fp)
   46658:	1000031e 	bne	r2,zero,46668 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   4665c:	e13ffd17 	ldw	r4,-12(fp)
   46660:	004652c0 	call	4652c <alt_alarm_stop>
   46664:	00000d06 	br	4669c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   46668:	e0bffd17 	ldw	r2,-12(fp)
   4666c:	10c00217 	ldw	r3,8(r2)
   46670:	e0bfff17 	ldw	r2,-4(fp)
   46674:	1887883a 	add	r3,r3,r2
   46678:	e0bffd17 	ldw	r2,-12(fp)
   4667c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   46680:	e0bffd17 	ldw	r2,-12(fp)
   46684:	10c00217 	ldw	r3,8(r2)
   46688:	d0a6e217 	ldw	r2,-25720(gp)
   4668c:	1880032e 	bgeu	r3,r2,4669c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   46690:	e0bffd17 	ldw	r2,-12(fp)
   46694:	00c00044 	movi	r3,1
   46698:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   4669c:	e0bffe17 	ldw	r2,-8(fp)
   466a0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   466a4:	e0fffd17 	ldw	r3,-12(fp)
   466a8:	d0a02304 	addi	r2,gp,-32628
   466ac:	18bfcf1e 	bne	r3,r2,465ec <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   466b0:	0001883a 	nop
}
   466b4:	e037883a 	mov	sp,fp
   466b8:	dfc00117 	ldw	ra,4(sp)
   466bc:	df000017 	ldw	fp,0(sp)
   466c0:	dec00204 	addi	sp,sp,8
   466c4:	f800283a 	ret

000466c8 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   466c8:	deffff04 	addi	sp,sp,-4
   466cc:	df000015 	stw	fp,0(sp)
   466d0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   466d4:	000170fa 	wrctl	ienable,zero
}
   466d8:	e037883a 	mov	sp,fp
   466dc:	df000017 	ldw	fp,0(sp)
   466e0:	dec00104 	addi	sp,sp,4
   466e4:	f800283a 	ret

000466e8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   466e8:	defffa04 	addi	sp,sp,-24
   466ec:	dfc00515 	stw	ra,20(sp)
   466f0:	df000415 	stw	fp,16(sp)
   466f4:	df000404 	addi	fp,sp,16
   466f8:	e13ffe15 	stw	r4,-8(fp)
   466fc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   46700:	e0bfff17 	ldw	r2,-4(fp)
   46704:	10800017 	ldw	r2,0(r2)
   46708:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   4670c:	e13ffe17 	ldw	r4,-8(fp)
   46710:	00417240 	call	41724 <strlen>
   46714:	10800044 	addi	r2,r2,1
   46718:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4671c:	00000d06 	br	46754 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   46720:	e0bffc17 	ldw	r2,-16(fp)
   46724:	10c00217 	ldw	r3,8(r2)
   46728:	e0bffd17 	ldw	r2,-12(fp)
   4672c:	1809883a 	mov	r4,r3
   46730:	e17ffe17 	ldw	r5,-8(fp)
   46734:	100d883a 	mov	r6,r2
   46738:	00469ac0 	call	469ac <memcmp>
   4673c:	1000021e 	bne	r2,zero,46748 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   46740:	e0bffc17 	ldw	r2,-16(fp)
   46744:	00000706 	br	46764 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   46748:	e0bffc17 	ldw	r2,-16(fp)
   4674c:	10800017 	ldw	r2,0(r2)
   46750:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   46754:	e0fffc17 	ldw	r3,-16(fp)
   46758:	e0bfff17 	ldw	r2,-4(fp)
   4675c:	18bff01e 	bne	r3,r2,46720 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   46760:	0005883a 	mov	r2,zero
}
   46764:	e037883a 	mov	sp,fp
   46768:	dfc00117 	ldw	ra,4(sp)
   4676c:	df000017 	ldw	fp,0(sp)
   46770:	dec00204 	addi	sp,sp,8
   46774:	f800283a 	ret

00046778 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   46778:	defffb04 	addi	sp,sp,-20
   4677c:	dfc00415 	stw	ra,16(sp)
   46780:	df000315 	stw	fp,12(sp)
   46784:	df000304 	addi	fp,sp,12
   46788:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   4678c:	00800174 	movhi	r2,5
   46790:	10a1fe04 	addi	r2,r2,-30728
   46794:	10800017 	ldw	r2,0(r2)
   46798:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   4679c:	00003106 	br	46864 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   467a0:	e0bffd17 	ldw	r2,-12(fp)
   467a4:	10800217 	ldw	r2,8(r2)
   467a8:	1009883a 	mov	r4,r2
   467ac:	00417240 	call	41724 <strlen>
   467b0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   467b4:	e0bffd17 	ldw	r2,-12(fp)
   467b8:	10c00217 	ldw	r3,8(r2)
   467bc:	e0bffe17 	ldw	r2,-8(fp)
   467c0:	10bfffc4 	addi	r2,r2,-1
   467c4:	1885883a 	add	r2,r3,r2
   467c8:	10800003 	ldbu	r2,0(r2)
   467cc:	10803fcc 	andi	r2,r2,255
   467d0:	1080201c 	xori	r2,r2,128
   467d4:	10bfe004 	addi	r2,r2,-128
   467d8:	10800bd8 	cmpnei	r2,r2,47
   467dc:	1000031e 	bne	r2,zero,467ec <alt_find_file+0x74>
    {
      len -= 1;
   467e0:	e0bffe17 	ldw	r2,-8(fp)
   467e4:	10bfffc4 	addi	r2,r2,-1
   467e8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   467ec:	e0bffe17 	ldw	r2,-8(fp)
   467f0:	e0ffff17 	ldw	r3,-4(fp)
   467f4:	1885883a 	add	r2,r3,r2
   467f8:	10800003 	ldbu	r2,0(r2)
   467fc:	10803fcc 	andi	r2,r2,255
   46800:	1080201c 	xori	r2,r2,128
   46804:	10bfe004 	addi	r2,r2,-128
   46808:	10800be0 	cmpeqi	r2,r2,47
   4680c:	1000081e 	bne	r2,zero,46830 <alt_find_file+0xb8>
   46810:	e0bffe17 	ldw	r2,-8(fp)
   46814:	e0ffff17 	ldw	r3,-4(fp)
   46818:	1885883a 	add	r2,r3,r2
   4681c:	10800003 	ldbu	r2,0(r2)
   46820:	10803fcc 	andi	r2,r2,255
   46824:	1080201c 	xori	r2,r2,128
   46828:	10bfe004 	addi	r2,r2,-128
   4682c:	10000a1e 	bne	r2,zero,46858 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   46830:	e0bffd17 	ldw	r2,-12(fp)
   46834:	10c00217 	ldw	r3,8(r2)
   46838:	e0bffe17 	ldw	r2,-8(fp)
   4683c:	1809883a 	mov	r4,r3
   46840:	e17fff17 	ldw	r5,-4(fp)
   46844:	100d883a 	mov	r6,r2
   46848:	00469ac0 	call	469ac <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   4684c:	1000021e 	bne	r2,zero,46858 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   46850:	e0bffd17 	ldw	r2,-12(fp)
   46854:	00000806 	br	46878 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   46858:	e0bffd17 	ldw	r2,-12(fp)
   4685c:	10800017 	ldw	r2,0(r2)
   46860:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   46864:	e0fffd17 	ldw	r3,-12(fp)
   46868:	00800174 	movhi	r2,5
   4686c:	10a1fe04 	addi	r2,r2,-30728
   46870:	18bfcb1e 	bne	r3,r2,467a0 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   46874:	0005883a 	mov	r2,zero
}
   46878:	e037883a 	mov	sp,fp
   4687c:	dfc00117 	ldw	ra,4(sp)
   46880:	df000017 	ldw	fp,0(sp)
   46884:	dec00204 	addi	sp,sp,8
   46888:	f800283a 	ret

0004688c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   4688c:	defffa04 	addi	sp,sp,-24
   46890:	dfc00515 	stw	ra,20(sp)
   46894:	df000415 	stw	fp,16(sp)
   46898:	dc000315 	stw	r16,12(sp)
   4689c:	df000304 	addi	fp,sp,12
   468a0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   468a4:	00bffa04 	movi	r2,-24
   468a8:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   468ac:	e03ffd15 	stw	zero,-12(fp)
   468b0:	00002106 	br	46938 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   468b4:	04000134 	movhi	r16,4
   468b8:	841d7304 	addi	r16,r16,30156
   468bc:	e0bffd17 	ldw	r2,-12(fp)
   468c0:	1009883a 	mov	r4,r2
   468c4:	01400304 	movi	r5,12
   468c8:	0040e540 	call	40e54 <__mulsi3>
   468cc:	8085883a 	add	r2,r16,r2
   468d0:	10800017 	ldw	r2,0(r2)
   468d4:	1000151e 	bne	r2,zero,4692c <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   468d8:	04000134 	movhi	r16,4
   468dc:	841d7304 	addi	r16,r16,30156
   468e0:	e0bffd17 	ldw	r2,-12(fp)
   468e4:	1009883a 	mov	r4,r2
   468e8:	01400304 	movi	r5,12
   468ec:	0040e540 	call	40e54 <__mulsi3>
   468f0:	8085883a 	add	r2,r16,r2
   468f4:	e0ffff17 	ldw	r3,-4(fp)
   468f8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   468fc:	00800174 	movhi	r2,5
   46900:	10a20204 	addi	r2,r2,-30712
   46904:	10c00017 	ldw	r3,0(r2)
   46908:	e0bffd17 	ldw	r2,-12(fp)
   4690c:	1880040e 	bge	r3,r2,46920 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   46910:	00800174 	movhi	r2,5
   46914:	10a20204 	addi	r2,r2,-30712
   46918:	e0fffd17 	ldw	r3,-12(fp)
   4691c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   46920:	e0bffd17 	ldw	r2,-12(fp)
   46924:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   46928:	00000606 	br	46944 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4692c:	e0bffd17 	ldw	r2,-12(fp)
   46930:	10800044 	addi	r2,r2,1
   46934:	e0bffd15 	stw	r2,-12(fp)
   46938:	e0bffd17 	ldw	r2,-12(fp)
   4693c:	10800810 	cmplti	r2,r2,32
   46940:	103fdc1e 	bne	r2,zero,468b4 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   46944:	e0bffe17 	ldw	r2,-8(fp)
}
   46948:	e037883a 	mov	sp,fp
   4694c:	dfc00217 	ldw	ra,8(sp)
   46950:	df000117 	ldw	fp,4(sp)
   46954:	dc000017 	ldw	r16,0(sp)
   46958:	dec00304 	addi	sp,sp,12
   4695c:	f800283a 	ret

00046960 <atexit>:
   46960:	200b883a 	mov	r5,r4
   46964:	000d883a 	mov	r6,zero
   46968:	0009883a 	mov	r4,zero
   4696c:	000f883a 	mov	r7,zero
   46970:	0046a281 	jmpi	46a28 <__register_exitproc>

00046974 <exit>:
   46974:	defffe04 	addi	sp,sp,-8
   46978:	000b883a 	mov	r5,zero
   4697c:	dc000015 	stw	r16,0(sp)
   46980:	dfc00115 	stw	ra,4(sp)
   46984:	2021883a 	mov	r16,r4
   46988:	0046b580 	call	46b58 <__call_exitprocs>
   4698c:	00800174 	movhi	r2,5
   46990:	10a1fc04 	addi	r2,r2,-30736
   46994:	11000017 	ldw	r4,0(r2)
   46998:	20800f17 	ldw	r2,60(r4)
   4699c:	10000126 	beq	r2,zero,469a4 <exit+0x30>
   469a0:	103ee83a 	callr	r2
   469a4:	8009883a 	mov	r4,r16
   469a8:	0046cf80 	call	46cf8 <_exit>

000469ac <memcmp>:
   469ac:	01c000c4 	movi	r7,3
   469b0:	3980192e 	bgeu	r7,r6,46a18 <memcmp+0x6c>
   469b4:	2904b03a 	or	r2,r5,r4
   469b8:	11c4703a 	and	r2,r2,r7
   469bc:	10000f26 	beq	r2,zero,469fc <memcmp+0x50>
   469c0:	20c00003 	ldbu	r3,0(r4)
   469c4:	28800003 	ldbu	r2,0(r5)
   469c8:	1880151e 	bne	r3,r2,46a20 <memcmp+0x74>
   469cc:	31bfff84 	addi	r6,r6,-2
   469d0:	01ffffc4 	movi	r7,-1
   469d4:	00000406 	br	469e8 <memcmp+0x3c>
   469d8:	20c00003 	ldbu	r3,0(r4)
   469dc:	28800003 	ldbu	r2,0(r5)
   469e0:	31bfffc4 	addi	r6,r6,-1
   469e4:	18800e1e 	bne	r3,r2,46a20 <memcmp+0x74>
   469e8:	21000044 	addi	r4,r4,1
   469ec:	29400044 	addi	r5,r5,1
   469f0:	31fff91e 	bne	r6,r7,469d8 <memcmp+0x2c>
   469f4:	0005883a 	mov	r2,zero
   469f8:	f800283a 	ret
   469fc:	20c00017 	ldw	r3,0(r4)
   46a00:	28800017 	ldw	r2,0(r5)
   46a04:	1880041e 	bne	r3,r2,46a18 <memcmp+0x6c>
   46a08:	31bfff04 	addi	r6,r6,-4
   46a0c:	21000104 	addi	r4,r4,4
   46a10:	29400104 	addi	r5,r5,4
   46a14:	39bff936 	bltu	r7,r6,469fc <memcmp+0x50>
   46a18:	303fe91e 	bne	r6,zero,469c0 <memcmp+0x14>
   46a1c:	003ff506 	br	469f4 <memcmp+0x48>
   46a20:	1885c83a 	sub	r2,r3,r2
   46a24:	f800283a 	ret

00046a28 <__register_exitproc>:
   46a28:	defffa04 	addi	sp,sp,-24
   46a2c:	00800174 	movhi	r2,5
   46a30:	10a1fc04 	addi	r2,r2,-30736
   46a34:	dc000315 	stw	r16,12(sp)
   46a38:	14000017 	ldw	r16,0(r2)
   46a3c:	dc400415 	stw	r17,16(sp)
   46a40:	dfc00515 	stw	ra,20(sp)
   46a44:	80805217 	ldw	r2,328(r16)
   46a48:	2023883a 	mov	r17,r4
   46a4c:	10003e26 	beq	r2,zero,46b48 <__register_exitproc+0x120>
   46a50:	10c00117 	ldw	r3,4(r2)
   46a54:	020007c4 	movi	r8,31
   46a58:	40c0180e 	bge	r8,r3,46abc <__register_exitproc+0x94>
   46a5c:	00800134 	movhi	r2,4
   46a60:	10839f04 	addi	r2,r2,3708
   46a64:	1000061e 	bne	r2,zero,46a80 <__register_exitproc+0x58>
   46a68:	00bfffc4 	movi	r2,-1
   46a6c:	dfc00517 	ldw	ra,20(sp)
   46a70:	dc400417 	ldw	r17,16(sp)
   46a74:	dc000317 	ldw	r16,12(sp)
   46a78:	dec00604 	addi	sp,sp,24
   46a7c:	f800283a 	ret
   46a80:	01006404 	movi	r4,400
   46a84:	d9400015 	stw	r5,0(sp)
   46a88:	d9800115 	stw	r6,4(sp)
   46a8c:	d9c00215 	stw	r7,8(sp)
   46a90:	0040e7c0 	call	40e7c <malloc>
   46a94:	d9400017 	ldw	r5,0(sp)
   46a98:	d9800117 	ldw	r6,4(sp)
   46a9c:	d9c00217 	ldw	r7,8(sp)
   46aa0:	103ff126 	beq	r2,zero,46a68 <__register_exitproc+0x40>
   46aa4:	80c05217 	ldw	r3,328(r16)
   46aa8:	10000115 	stw	zero,4(r2)
   46aac:	10c00015 	stw	r3,0(r2)
   46ab0:	80805215 	stw	r2,328(r16)
   46ab4:	10006215 	stw	zero,392(r2)
   46ab8:	10006315 	stw	zero,396(r2)
   46abc:	10c00117 	ldw	r3,4(r2)
   46ac0:	88000d1e 	bne	r17,zero,46af8 <__register_exitproc+0xd0>
   46ac4:	19000084 	addi	r4,r3,2
   46ac8:	2109883a 	add	r4,r4,r4
   46acc:	18c00044 	addi	r3,r3,1
   46ad0:	2109883a 	add	r4,r4,r4
   46ad4:	1109883a 	add	r4,r2,r4
   46ad8:	10c00115 	stw	r3,4(r2)
   46adc:	0005883a 	mov	r2,zero
   46ae0:	21400015 	stw	r5,0(r4)
   46ae4:	dfc00517 	ldw	ra,20(sp)
   46ae8:	dc400417 	ldw	r17,16(sp)
   46aec:	dc000317 	ldw	r16,12(sp)
   46af0:	dec00604 	addi	sp,sp,24
   46af4:	f800283a 	ret
   46af8:	02400044 	movi	r9,1
   46afc:	12806217 	ldw	r10,392(r2)
   46b00:	48d2983a 	sll	r9,r9,r3
   46b04:	19000804 	addi	r4,r3,32
   46b08:	18d1883a 	add	r8,r3,r3
   46b0c:	2109883a 	add	r4,r4,r4
   46b10:	4211883a 	add	r8,r8,r8
   46b14:	2109883a 	add	r4,r4,r4
   46b18:	1109883a 	add	r4,r2,r4
   46b1c:	1211883a 	add	r8,r2,r8
   46b20:	5254b03a 	or	r10,r10,r9
   46b24:	21c02215 	stw	r7,136(r4)
   46b28:	41802215 	stw	r6,136(r8)
   46b2c:	12806215 	stw	r10,392(r2)
   46b30:	01000084 	movi	r4,2
   46b34:	893fe31e 	bne	r17,r4,46ac4 <__register_exitproc+0x9c>
   46b38:	11006317 	ldw	r4,396(r2)
   46b3c:	2252b03a 	or	r9,r4,r9
   46b40:	12406315 	stw	r9,396(r2)
   46b44:	003fdf06 	br	46ac4 <__register_exitproc+0x9c>
   46b48:	00800174 	movhi	r2,5
   46b4c:	10a92204 	addi	r2,r2,-23416
   46b50:	80805215 	stw	r2,328(r16)
   46b54:	003fbe06 	br	46a50 <__register_exitproc+0x28>

00046b58 <__call_exitprocs>:
   46b58:	00800174 	movhi	r2,5
   46b5c:	10a1fc04 	addi	r2,r2,-30736
   46b60:	10800017 	ldw	r2,0(r2)
   46b64:	defff304 	addi	sp,sp,-52
   46b68:	df000b15 	stw	fp,44(sp)
   46b6c:	d8800015 	stw	r2,0(sp)
   46b70:	10805204 	addi	r2,r2,328
   46b74:	dd400815 	stw	r21,32(sp)
   46b78:	dfc00c15 	stw	ra,48(sp)
   46b7c:	ddc00a15 	stw	r23,40(sp)
   46b80:	dd800915 	stw	r22,36(sp)
   46b84:	dd000715 	stw	r20,28(sp)
   46b88:	dcc00615 	stw	r19,24(sp)
   46b8c:	dc800515 	stw	r18,20(sp)
   46b90:	dc400415 	stw	r17,16(sp)
   46b94:	dc000315 	stw	r16,12(sp)
   46b98:	d9000115 	stw	r4,4(sp)
   46b9c:	2839883a 	mov	fp,r5
   46ba0:	d8800215 	stw	r2,8(sp)
   46ba4:	057fffc4 	movi	r21,-1
   46ba8:	d8800017 	ldw	r2,0(sp)
   46bac:	ddc00217 	ldw	r23,8(sp)
   46bb0:	14805217 	ldw	r18,328(r2)
   46bb4:	90001726 	beq	r18,zero,46c14 <__call_exitprocs+0xbc>
   46bb8:	94400117 	ldw	r17,4(r18)
   46bbc:	8c3fffc4 	addi	r16,r17,-1
   46bc0:	80001116 	blt	r16,zero,46c08 <__call_exitprocs+0xb0>
   46bc4:	8c400044 	addi	r17,r17,1
   46bc8:	8427883a 	add	r19,r16,r16
   46bcc:	8c63883a 	add	r17,r17,r17
   46bd0:	95802204 	addi	r22,r18,136
   46bd4:	9ce7883a 	add	r19,r19,r19
   46bd8:	8c63883a 	add	r17,r17,r17
   46bdc:	b4e7883a 	add	r19,r22,r19
   46be0:	9463883a 	add	r17,r18,r17
   46be4:	e0001726 	beq	fp,zero,46c44 <__call_exitprocs+0xec>
   46be8:	8c87c83a 	sub	r3,r17,r18
   46bec:	b0c7883a 	add	r3,r22,r3
   46bf0:	18c01e17 	ldw	r3,120(r3)
   46bf4:	1f001326 	beq	r3,fp,46c44 <__call_exitprocs+0xec>
   46bf8:	843fffc4 	addi	r16,r16,-1
   46bfc:	9cffff04 	addi	r19,r19,-4
   46c00:	8c7fff04 	addi	r17,r17,-4
   46c04:	857ff71e 	bne	r16,r21,46be4 <__call_exitprocs+0x8c>
   46c08:	00800134 	movhi	r2,4
   46c0c:	1083a404 	addi	r2,r2,3728
   46c10:	10002a1e 	bne	r2,zero,46cbc <__call_exitprocs+0x164>
   46c14:	dfc00c17 	ldw	ra,48(sp)
   46c18:	df000b17 	ldw	fp,44(sp)
   46c1c:	ddc00a17 	ldw	r23,40(sp)
   46c20:	dd800917 	ldw	r22,36(sp)
   46c24:	dd400817 	ldw	r21,32(sp)
   46c28:	dd000717 	ldw	r20,28(sp)
   46c2c:	dcc00617 	ldw	r19,24(sp)
   46c30:	dc800517 	ldw	r18,20(sp)
   46c34:	dc400417 	ldw	r17,16(sp)
   46c38:	dc000317 	ldw	r16,12(sp)
   46c3c:	dec00d04 	addi	sp,sp,52
   46c40:	f800283a 	ret
   46c44:	91000117 	ldw	r4,4(r18)
   46c48:	88c00017 	ldw	r3,0(r17)
   46c4c:	213fffc4 	addi	r4,r4,-1
   46c50:	24001526 	beq	r4,r16,46ca8 <__call_exitprocs+0x150>
   46c54:	88000015 	stw	zero,0(r17)
   46c58:	183fe726 	beq	r3,zero,46bf8 <__call_exitprocs+0xa0>
   46c5c:	00800044 	movi	r2,1
   46c60:	1408983a 	sll	r4,r2,r16
   46c64:	91406217 	ldw	r5,392(r18)
   46c68:	95000117 	ldw	r20,4(r18)
   46c6c:	214a703a 	and	r5,r4,r5
   46c70:	28000b26 	beq	r5,zero,46ca0 <__call_exitprocs+0x148>
   46c74:	91406317 	ldw	r5,396(r18)
   46c78:	2148703a 	and	r4,r4,r5
   46c7c:	20000c1e 	bne	r4,zero,46cb0 <__call_exitprocs+0x158>
   46c80:	99400017 	ldw	r5,0(r19)
   46c84:	d9000117 	ldw	r4,4(sp)
   46c88:	183ee83a 	callr	r3
   46c8c:	90c00117 	ldw	r3,4(r18)
   46c90:	1d3fc51e 	bne	r3,r20,46ba8 <__call_exitprocs+0x50>
   46c94:	b8c00017 	ldw	r3,0(r23)
   46c98:	1cbfd726 	beq	r3,r18,46bf8 <__call_exitprocs+0xa0>
   46c9c:	003fc206 	br	46ba8 <__call_exitprocs+0x50>
   46ca0:	183ee83a 	callr	r3
   46ca4:	003ff906 	br	46c8c <__call_exitprocs+0x134>
   46ca8:	94000115 	stw	r16,4(r18)
   46cac:	003fea06 	br	46c58 <__call_exitprocs+0x100>
   46cb0:	99000017 	ldw	r4,0(r19)
   46cb4:	183ee83a 	callr	r3
   46cb8:	003ff406 	br	46c8c <__call_exitprocs+0x134>
   46cbc:	90c00117 	ldw	r3,4(r18)
   46cc0:	1800071e 	bne	r3,zero,46ce0 <__call_exitprocs+0x188>
   46cc4:	90c00017 	ldw	r3,0(r18)
   46cc8:	18000926 	beq	r3,zero,46cf0 <__call_exitprocs+0x198>
   46ccc:	9009883a 	mov	r4,r18
   46cd0:	b8c00015 	stw	r3,0(r23)
   46cd4:	0040e900 	call	40e90 <free>
   46cd8:	bc800017 	ldw	r18,0(r23)
   46cdc:	003fb506 	br	46bb4 <__call_exitprocs+0x5c>
   46ce0:	90c00017 	ldw	r3,0(r18)
   46ce4:	902f883a 	mov	r23,r18
   46ce8:	1825883a 	mov	r18,r3
   46cec:	003fb106 	br	46bb4 <__call_exitprocs+0x5c>
   46cf0:	0007883a 	mov	r3,zero
   46cf4:	003ffb06 	br	46ce4 <__call_exitprocs+0x18c>

00046cf8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   46cf8:	defffc04 	addi	sp,sp,-16
   46cfc:	df000315 	stw	fp,12(sp)
   46d00:	df000304 	addi	fp,sp,12
   46d04:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   46d08:	0001883a 	nop
   46d0c:	e0bfff17 	ldw	r2,-4(fp)
   46d10:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
   46d14:	e0bffd17 	ldw	r2,-12(fp)
   46d18:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   46d1c:	e0bffe17 	ldw	r2,-8(fp)
   46d20:	10000226 	beq	r2,zero,46d2c <_exit+0x34>
    ALT_SIM_FAIL();
   46d24:	002af070 	cmpltui	zero,zero,43969
   46d28:	00000106 	br	46d30 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   46d2c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   46d30:	003fff06 	br	46d30 <_exit+0x38>

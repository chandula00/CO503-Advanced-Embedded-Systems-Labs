
cpu6.elf:     file format elf32-littlenios2
cpu6.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000101b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x000071d4 memsz 0x000071d4 flags r-x
    LOAD off    0x000081f4 vaddr 0x000171f4 paddr 0x00018cac align 2**12
         filesz 0x00001ab8 memsz 0x00001ab8 flags rw-
    LOAD off    0x0000a764 vaddr 0x0001a764 paddr 0x0001a764 align 2**12
         filesz 0x00000000 memsz 0x000002e0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00006fe4  000101b8  000101b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000058  0001719c  0001719c  0000819c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ab8  000171f4  00018cac  000081f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e0  0001a764  0001a764  0000a764  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00009cac  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000b10  00000000  00000000  00009cd0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0001ecf6  00000000  00000000  0000a7e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00007208  00000000  00000000  000294d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00008748  00000000  00000000  000306de  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001548  00000000  00000000  00038e28  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000028a0  00000000  00000000  0003a370  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00006aea  00000000  00000000  0003cc10  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  000436fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000398  00000000  00000000  00043710  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00046710  2**0
                  CONTENTS, READONLY
 17 .cpu          00000004  00000000  00000000  00046713  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00046717  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00046718  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00046719  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0004671d  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  00046721  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000a  00000000  00000000  00046725  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000a  00000000  00000000  0004672f  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000a  00000000  00000000  00046739  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000004  00000000  00000000  00046743  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000052  00000000  00000000  00046747  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00190000  00000000  00000000  00046799  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
000101b8 l    d  .text	00000000 .text
0001719c l    d  .rodata	00000000 .rodata
000171f4 l    d  .rwdata	00000000 .rwdata
0001a764 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../cpu6_bsp//obj/HAL/src/crt0.o
000101f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00010094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 FIFO.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00010888 l     F .text	00000008 __fp_lock
00010890 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fputc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000171f4 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
00012488 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
00013e28 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00013f44 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00013f70 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00014070 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00014164 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00014250 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0001442c l     F .text	00000050 alt_get_errno
0001447c l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
000146c4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00018c54 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00014938 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00014a78 l     F .text	00000038 alt_dev_reg
00017ba4 l     O .rwdata	00001060 jtag_uart6
00018c04 l     O .rwdata	00000028 altera_hostfs
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0001526c l     F .text	00000204 altera_avalon_jtag_uart_irq
00015470 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00015aac l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_hostfs.c
00018c94 l     O .rwdata	00000004 hcinfo.2311
00018c88 l     O .rwdata	00000004 hcinfo.2324
00018c7c l     O .rwdata	00000004 hcinfo.2333
00018c70 l     O .rwdata	00000004 hcinfo.2346
00018c64 l     O .rwdata	00000004 hcinfo.2359
00018c58 l     O .rwdata	00000004 hcinfo.2385
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0001632c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00016ab4 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00013304 g     F .text	00000064 _isatty_r
00014374 g     F .text	00000078 alt_main
000128cc g     F .text	00000094 strcpy
000123f0 g     F .text	00000084 _puts_r
0001a7b4 g     O .bss	00000100 alt_irq
00013368 g     F .text	0000006c _lseek_r
00014dd8 g     F .text	00000058 altera_avalon_fifo_write_almostfull
00018cac g       *ABS*	00000000 __flash_rwdata_start
00012d88 g     F .text	00000098 __sflags
0001aa44 g       *ABS*	00000000 __alt_heap_start
000127d0 g     F .text	0000005c __sseek
0001092c g     F .text	0000010c __sinit
000129ec g     F .text	0000013c __swbuf_r
000108a4 g     F .text	00000078 __sfmoreglue
0001440c g     F .text	00000020 __malloc_unlock
00015ba8 g     F .text	0000016c alt_hostfs_open
0001360c g     F .text	0000018c memmove
00014b58 g     F .text	00000098 altera_avalon_fifo_init
0001091c g     F .text	00000010 _cleanup
00014e88 g     F .text	00000058 altera_avalon_fifo_write_fifo
00000000  w      *UND*	00000000 __errno
00010000 g     F .entry	0000000c __reset
00015020 g     F .text	00000028 altera_avalon_fifo_read_backpressure
00010020 g       *ABS*	00000000 __flash_exceptions_start
00011608 g     F .text	00000068 _fstat_r
0001a764 g     O .bss	00000004 errno
0001a778 g     O .bss	00000004 alt_argv
00020c2c g       *ABS*	00000000 _gp
00014d24 g     F .text	0000005c altera_avalon_fifo_clear_event
00017a24 g     O .rwdata	00000180 alt_fd_list
00015ef0 g     F .text	000000b8 alt_hostfs_seek
000164d4 g     F .text	00000090 alt_find_dev
000134cc g     F .text	00000140 memcpy
00010898 g     F .text	0000000c _cleanup_r
00016678 g     F .text	00000084 alt_fs_reg
00016b94 g     F .text	00000078 alt_io_redirect
0001719c g       *ABS*	00000000 __DTOR_END__
00012474 g     F .text	00000014 puts
00015670 g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000140c0 g     F .text	000000a4 isatty
0001a770 g     O .bss	00000004 __malloc_top_pad
00010000 g       *ABS*	00000000 __alt_mem_mem6
00012e20 g     F .text	000004e4 __sfvwrite_r
00012690 g     F .text	00000064 _sbrk_r
00015d80 g     F .text	000000b8 alt_hostfs_read
00013798 g     F .text	0000006c _read_r
00018c4c g     O .rwdata	00000004 alt_max_fd
00010520 g     F .text	0000013c _fclose_r
00010858 g     F .text	00000030 fflush
0001a76c g     O .bss	00000004 __malloc_max_sbrked_mem
000142a0 g     F .text	000000d4 lseek
00018c2c g     O .rwdata	00000004 _global_impure_ptr
00013804 g     F .text	000005fc _realloc_r
0001aa44 g       *ABS*	00000000 __bss_end
000169c4 g     F .text	000000f0 alt_iic_isr_register
00016ca4 g     F .text	00000104 alt_tick
00010b44 g     F .text	00000018 __fp_lock_all
00016978 g     F .text	0000004c alt_ic_irq_enabled
000102c0 g     F .text	00000040 FIFO_INIT
00016c0c g     F .text	00000098 alt_alarm_stop
0001a780 g     O .bss	00000004 alt_irq_active
00015d14 g     F .text	0000006c alt_hostfs_close
000100ec g     F .exceptions	000000cc alt_irq_handler
000179fc g     O .rwdata	00000028 alt_dev_null
00016310 g     F .text	0000001c alt_dcache_flush_all
00014d80 g     F .text	00000058 altera_avalon_fifo_write_ienable
00018cac g       *ABS*	00000000 __ram_rwdata_end
00014c94 g     F .text	0000002c altera_avalon_fifo_read_almostempty
00018c44 g     O .rwdata	00000008 alt_dev_list
00010cc0 g     F .text	00000044 _fputc_r
00014988 g     F .text	000000f0 write
00012244 g     F .text	000000bc _putc_r
000171f4 g       *ABS*	00000000 __ram_rodata_end
00013fc0 g     F .text	000000b0 fstat
00012834 g     F .text	00000098 strcat
0001aa44 g       *ABS*	00000000 end
000115e4 g     F .text	00000024 fseek
000151ac g     F .text	000000c0 altera_avalon_jtag_uart_init
00014cc0 g     F .text	0000003c altera_avalon_fifo_read_event
0001719c g       *ABS*	00000000 __CTOR_LIST__
00020000 g       *ABS*	00000000 __alt_stack_pointer
00015b20 g     F .text	00000088 alt_avalon_timer_sc_init
00015888 g     F .text	00000224 altera_avalon_jtag_uart_write
00010b34 g     F .text	00000004 __sfp_lock_acquire
00014f4c g     F .text	0000004c altera_avalon_fifo_read_fifo
000133d4 g     F .text	000000f8 memchr
00010ea0 g     F .text	000002d0 _free_r
00016fc0 g     F .text	000001a0 __call_exitprocs
00018c34 g     O .rwdata	00000004 __malloc_sbrk_base
000101b8 g     F .text	0000003c _start
0001a784 g     O .bss	00000004 _alt_tick_rate
0001a788 g     O .bss	00000004 _alt_nticks
00014714 g     F .text	000000f4 read
00014ae4 g     F .text	00000074 alt_sys_init
000121d8 g     F .text	0000006c _open_r
00016e90 g     F .text	00000130 __register_exitproc
00015514 g     F .text	00000068 altera_avalon_jtag_uart_close
00013e00 g     F .text	00000028 __mulsi3
000171f4 g       *ABS*	00000000 __ram_rwdata_start
0001719c g       *ABS*	00000000 __ram_rodata_start
0001a78c g     O .bss	00000028 __malloc_current_mallinfo
00015048 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000166fc g     F .text	000000d4 alt_get_fd
00012d24 g     F .text	00000064 _close_r
00016e14 g     F .text	0000007c memcmp
00015108 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0001aa44 g       *ABS*	00000000 __alt_stack_base
00015158 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00012bb0 g     F .text	00000174 __swsetup_r
00014bf0 g     F .text	0000003c altera_avalon_fifo_read_status
00010a38 g     F .text	000000fc __sfp
000175f4 g     O .rwdata	00000408 __malloc_av_
00010b40 g     F .text	00000004 __sinit_lock_release
000126f4 g     F .text	00000054 __sread
00014ff4 g     F .text	0000002c altera_avalon_fifo_read_other_info
00016564 g     F .text	00000114 alt_find_file
0001637c g     F .text	000000a0 alt_dev_llist_insert
000143ec g     F .text	00000020 __malloc_lock
00014888 g     F .text	000000b0 sbrk
00010670 g     F .text	000001e8 _fflush_r
00010ca4 g     F .text	0000001c fopen
0001a764 g       *ABS*	00000000 __bss_start
000120fc g     F .text	000000dc memset
00010300 g     F .text	00000220 main
0001a77c g     O .bss	00000004 alt_envp
0001a768 g     O .bss	00000004 __malloc_max_total_mem
000150a8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00014cfc g     F .text	00000028 altera_avalon_fifo_read_level
00012b28 g     F .text	0000001c __swbuf
0001282c g     F .text	00000008 __sclose
00020000 g       *ABS*	00000000 __alt_heap_limit
0001065c g     F .text	00000014 fclose
0001a8b4 g     O .bss	00000190 _atexit0
00011978 g     F .text	00000784 _malloc_r
00018c50 g     O .rwdata	00000004 alt_errno
00011670 g     F .text	000000a8 _fwalk
00012300 g     F .text	000000f0 putc
00010d64 g     F .text	0000013c _malloc_trim_r
0001719c g       *ABS*	00000000 __CTOR_END__
0001719c g       *ABS*	00000000 __flash_rodata_start
0001719c g       *ABS*	00000000 __DTOR_LIST__
00014ab0 g     F .text	00000034 alt_irq_init
00014808 g     F .text	00000080 alt_release_fd
00016dc8 g     F .text	00000014 atexit
00012b44 g     F .text	0000006c _write_r
00018c30 g     O .rwdata	00000004 _impure_ptr
0001a774 g     O .bss	00000004 alt_argc
00016478 g     F .text	0000005c _do_dtors
00011170 g     F .text	00000474 _fseek_r
00010258 g     F .text	00000068 READ_FIFO
000124a4 g     F .text	000001ec __srefill_r
00010020 g       .exceptions	00000000 alt_irq_entry
00010b5c g     F .text	00000018 __fp_unlock_all
00010d04 g     F .text	00000060 fputc
00018c3c g     O .rwdata	00000008 alt_fs_list
00015e38 g     F .text	000000b8 alt_hostfs_write
00010020 g       *ABS*	00000000 __ram_exceptions_start
00014f98 g     F .text	0000005c altera_avalon_fifo_write_other_info
000167ec g     F .text	00000050 alt_ic_isr_register
00018cac g       *ABS*	00000000 _edata
0001aa44 g       *ABS*	00000000 _end
000101b8 g       *ABS*	00000000 __ram_exceptions_end
0001557c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
000168d8 g     F .text	000000a0 alt_ic_irq_disable
00012748 g     F .text	00000088 __swrite
00018c38 g     O .rwdata	00000004 __malloc_trim_threshold
00016da8 g     F .text	00000020 altera_nios2_qsys_irq_init
00016ddc g     F .text	00000038 exit
00011718 g     F .text	000000b8 _fwalk_reent
00014c2c g     F .text	0000003c altera_avalon_fifo_read_ienable
00020000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00010b38 g     F .text	00000004 __sfp_lock_release
00010b74 g     F .text	00000130 _fopen_r
00017160 g     F .text	0000003c _exit
000161d0 g     F .text	00000140 alt_alarm_start
00014c68 g     F .text	0000002c altera_avalon_fifo_read_almostfull
000117d0 g     F .text	000001a8 __smakebuf_r
00012960 g     F .text	0000008c strlen
0001456c g     F .text	00000158 open
00014ee0 g     F .text	0000006c altera_avalon_read_fifo
000167d0 g     F .text	0000001c alt_icache_flush_all
000101f4 g     F .text	00000064 WRITE_FIFO
00018ca0 g     O .rwdata	00000004 alt_priority_mask
0001683c g     F .text	0000009c alt_ic_irq_enable
00014e30 g     F .text	00000058 altera_avalon_fifo_write_almostempty
00018ca4 g     O .rwdata	00000008 alt_alarm_list
0001641c g     F .text	0000005c _do_ctors
00013e78 g     F .text	000000cc close
000141d0 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
00010b3c g     F .text	00000004 __sinit_lock_acquire
00015fa8 g     F .text	00000228 alt_hostfs_fstat



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08406e14 	ori	at,at,440
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100ec0 	call	100ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000306 	br	10098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   1008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)

00010094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   10094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   10098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   1009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100e8:	ef80083a 	eret

000100ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100ec:	defff904 	addi	sp,sp,-28
   100f0:	dfc00615 	stw	ra,24(sp)
   100f4:	df000515 	stw	fp,20(sp)
   100f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   100fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10100:	0005313a 	rdctl	r2,ipending
   10104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   10108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   10110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10114:	00800044 	movi	r2,1
   10118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1011c:	e0fffb17 	ldw	r3,-20(fp)
   10120:	e0bffc17 	ldw	r2,-16(fp)
   10124:	1884703a 	and	r2,r3,r2
   10128:	10001726 	beq	r2,zero,10188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1012c:	00c000b4 	movhi	r3,2
   10130:	18e9ed04 	addi	r3,r3,-22604
   10134:	e0bffd17 	ldw	r2,-12(fp)
   10138:	100490fa 	slli	r2,r2,3
   1013c:	1885883a 	add	r2,r3,r2
   10140:	10c00017 	ldw	r3,0(r2)
   10144:	010000b4 	movhi	r4,2
   10148:	2129ed04 	addi	r4,r4,-22604
   1014c:	e0bffd17 	ldw	r2,-12(fp)
   10150:	100490fa 	slli	r2,r2,3
   10154:	2085883a 	add	r2,r4,r2
   10158:	10800104 	addi	r2,r2,4
   1015c:	10800017 	ldw	r2,0(r2)
   10160:	1009883a 	mov	r4,r2
   10164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   10168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   1016c:	0005313a 	rdctl	r2,ipending
   10170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   10174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   10178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   1017c:	e0bffb17 	ldw	r2,-20(fp)
   10180:	103fe31e 	bne	r2,zero,10110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   10184:	00000706 	br	101a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10188:	e0bffc17 	ldw	r2,-16(fp)
   1018c:	1085883a 	add	r2,r2,r2
   10190:	e0bffc15 	stw	r2,-16(fp)
      i++;
   10194:	e0bffd17 	ldw	r2,-12(fp)
   10198:	10800044 	addi	r2,r2,1
   1019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   101a0:	003fde06 	br	1011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   101a4:	e037883a 	mov	sp,fp
   101a8:	dfc00117 	ldw	ra,4(sp)
   101ac:	df000017 	ldw	fp,0(sp)
   101b0:	dec00204 	addi	sp,sp,8
   101b4:	f800283a 	ret

Disassembly of section .text:

000101b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   101b8:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   101bc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   101c0:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   101c4:	d6830b14 	ori	gp,gp,3116
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   101c8:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   101cc:	10a9d914 	ori	r2,r2,42852

    movhi r3, %hi(__bss_end)
   101d0:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   101d4:	18ea9114 	ori	r3,r3,43588

    beq r2, r3, 1f
   101d8:	10c00326 	beq	r2,r3,101e8 <_start+0x30>

0:
    stw zero, (r2)
   101dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101e4:	10fffd36 	bltu	r2,r3,101dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101e8:	00141d00 	call	141d0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101ec:	00143740 	call	14374 <alt_main>

000101f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101f0:	003fff06 	br	101f0 <alt_after_alt_main>

000101f4 <WRITE_FIFO>:
 */

#include "FIFO.h"

void WRITE_FIFO(int *buffer, int inBase, int controllBase)
{
   101f4:	defffb04 	addi	sp,sp,-20
   101f8:	dfc00415 	stw	ra,16(sp)
   101fc:	df000315 	stw	fp,12(sp)
   10200:	df000304 	addi	fp,sp,12
   10204:	e13ffd15 	stw	r4,-12(fp)
   10208:	e17ffe15 	stw	r5,-8(fp)
   1020c:	e1bfff15 	stw	r6,-4(fp)

	// Check if FIFO is full before writing
	while (altera_avalon_fifo_read_level(controllBase) == ALMOST_FULL)
   10210:	0001883a 	nop
   10214:	e0bfff17 	ldw	r2,-4(fp)
   10218:	1009883a 	mov	r4,r2
   1021c:	0014cfc0 	call	14cfc <altera_avalon_fifo_read_level>
   10220:	10800220 	cmpeqi	r2,r2,8
   10224:	103ffb1e 	bne	r2,zero,10214 <WRITE_FIFO+0x20>
	{
	}

	// Write data to FIFO
	altera_avalon_fifo_write_fifo(inBase, controllBase, *buffer);
   10228:	e13ffe17 	ldw	r4,-8(fp)
   1022c:	e0ffff17 	ldw	r3,-4(fp)
   10230:	e0bffd17 	ldw	r2,-12(fp)
   10234:	10800017 	ldw	r2,0(r2)
   10238:	180b883a 	mov	r5,r3
   1023c:	100d883a 	mov	r6,r2
   10240:	0014e880 	call	14e88 <altera_avalon_fifo_write_fifo>
}
   10244:	e037883a 	mov	sp,fp
   10248:	dfc00117 	ldw	ra,4(sp)
   1024c:	df000017 	ldw	fp,0(sp)
   10250:	dec00204 	addi	sp,sp,8
   10254:	f800283a 	ret

00010258 <READ_FIFO>:

int READ_FIFO(int *buffer, int outBase, int controllBase)
{
   10258:	defffb04 	addi	sp,sp,-20
   1025c:	dfc00415 	stw	ra,16(sp)
   10260:	df000315 	stw	fp,12(sp)
   10264:	df000304 	addi	fp,sp,12
   10268:	e13ffd15 	stw	r4,-12(fp)
   1026c:	e17ffe15 	stw	r5,-8(fp)
   10270:	e1bfff15 	stw	r6,-4(fp)
	// Wait if the FIFO is empty
	// while (altera_avalon_fifo_read_status(FIFO_MEM_IN_CSR_BASE, ALTERA_AVALON_FIFO_STATUS_EMPTY))
	// 	;

	while (altera_avalon_fifo_read_level(controllBase) == ALMOST_EMTY)
   10274:	0001883a 	nop
   10278:	e0bfff17 	ldw	r2,-4(fp)
   1027c:	1009883a 	mov	r4,r2
   10280:	0014cfc0 	call	14cfc <altera_avalon_fifo_read_level>
   10284:	103ffc26 	beq	r2,zero,10278 <READ_FIFO+0x20>
	{
	}

	// Read the data
	*buffer = altera_avalon_fifo_read_fifo(outBase, controllBase);
   10288:	e0fffe17 	ldw	r3,-8(fp)
   1028c:	e0bfff17 	ldw	r2,-4(fp)
   10290:	1809883a 	mov	r4,r3
   10294:	100b883a 	mov	r5,r2
   10298:	0014f4c0 	call	14f4c <altera_avalon_fifo_read_fifo>
   1029c:	e0fffd17 	ldw	r3,-12(fp)
   102a0:	18800015 	stw	r2,0(r3)

	return *buffer;
   102a4:	e0bffd17 	ldw	r2,-12(fp)
   102a8:	10800017 	ldw	r2,0(r2)
}
   102ac:	e037883a 	mov	sp,fp
   102b0:	dfc00117 	ldw	ra,4(sp)
   102b4:	df000017 	ldw	fp,0(sp)
   102b8:	dec00204 	addi	sp,sp,8
   102bc:	f800283a 	ret

000102c0 <FIFO_INIT>:

// Initialization
void FIFO_INIT(int controllBase)
{
   102c0:	defffd04 	addi	sp,sp,-12
   102c4:	dfc00215 	stw	ra,8(sp)
   102c8:	df000115 	stw	fp,4(sp)
   102cc:	df000104 	addi	fp,sp,4
   102d0:	e13fff15 	stw	r4,-4(fp)
	altera_avalon_fifo_init(controllBase,
   102d4:	e0bfff17 	ldw	r2,-4(fp)
   102d8:	1009883a 	mov	r4,r2
   102dc:	000b883a 	mov	r5,zero
   102e0:	000d883a 	mov	r6,zero
   102e4:	01c00204 	movi	r7,8
   102e8:	0014b580 	call	14b58 <altera_avalon_fifo_init>
							0,
							ALMOST_EMTY,  // Almost empty threshold
							ALMOST_FULL); // Almost full threshold
   102ec:	e037883a 	mov	sp,fp
   102f0:	dfc00117 	ldw	ra,4(sp)
   102f4:	df000017 	ldw	fp,0(sp)
   102f8:	dec00204 	addi	sp,sp,8
   102fc:	f800283a 	ret

00010300 <main>:

typedef char INT8;
typedef unsigned char UINT8;

int main(void)
{
   10300:	deffe204 	addi	sp,sp,-120
   10304:	dfc01d15 	stw	ra,116(sp)
   10308:	df001c15 	stw	fp,112(sp)
   1030c:	df001c04 	addi	fp,sp,112
	FILE *fptr;
	UINT8 out;
	INT8 filename[50];

	printf("Start\n");
   10310:	01000074 	movhi	r4,1
   10314:	211c6704 	addi	r4,r4,29084
   10318:	00124740 	call	12474 <puts>

	while (1)
	{

		out = 0;
   1031c:	e03fe505 	stb	zero,-108(fp)
		// {
		// 	out++;
		// 	READ_FIFO(&filename[out], OUT_BASE_5to6, CONTROL_BASE_1to6);
		// }

		filename[out++] = 't';
   10320:	e0bfe503 	ldbu	r2,-108(fp)
   10324:	e0ffe704 	addi	r3,fp,-100
   10328:	1885883a 	add	r2,r3,r2
   1032c:	00c01d04 	movi	r3,116
   10330:	10c00005 	stb	r3,0(r2)
   10334:	e0bfe503 	ldbu	r2,-108(fp)
   10338:	10800044 	addi	r2,r2,1
   1033c:	e0bfe505 	stb	r2,-108(fp)
		filename[out++] = 'e';
   10340:	e0bfe503 	ldbu	r2,-108(fp)
   10344:	e0ffe704 	addi	r3,fp,-100
   10348:	1885883a 	add	r2,r3,r2
   1034c:	00c01944 	movi	r3,101
   10350:	10c00005 	stb	r3,0(r2)
   10354:	e0bfe503 	ldbu	r2,-108(fp)
   10358:	10800044 	addi	r2,r2,1
   1035c:	e0bfe505 	stb	r2,-108(fp)
		filename[out++] = 's';
   10360:	e0bfe503 	ldbu	r2,-108(fp)
   10364:	e0ffe704 	addi	r3,fp,-100
   10368:	1885883a 	add	r2,r3,r2
   1036c:	00c01cc4 	movi	r3,115
   10370:	10c00005 	stb	r3,0(r2)
   10374:	e0bfe503 	ldbu	r2,-108(fp)
   10378:	10800044 	addi	r2,r2,1
   1037c:	e0bfe505 	stb	r2,-108(fp)
		filename[out++] = 't';
   10380:	e0bfe503 	ldbu	r2,-108(fp)
   10384:	e0ffe704 	addi	r3,fp,-100
   10388:	1885883a 	add	r2,r3,r2
   1038c:	00c01d04 	movi	r3,116
   10390:	10c00005 	stb	r3,0(r2)
   10394:	e0bfe503 	ldbu	r2,-108(fp)
   10398:	10800044 	addi	r2,r2,1
   1039c:	e0bfe505 	stb	r2,-108(fp)

		filename[out++] = '.';
   103a0:	e0bfe503 	ldbu	r2,-108(fp)
   103a4:	e0ffe704 	addi	r3,fp,-100
   103a8:	1885883a 	add	r2,r3,r2
   103ac:	00c00b84 	movi	r3,46
   103b0:	10c00005 	stb	r3,0(r2)
   103b4:	e0bfe503 	ldbu	r2,-108(fp)
   103b8:	10800044 	addi	r2,r2,1
   103bc:	e0bfe505 	stb	r2,-108(fp)
		filename[out++] = 'j';
   103c0:	e0bfe503 	ldbu	r2,-108(fp)
   103c4:	e0ffe704 	addi	r3,fp,-100
   103c8:	1885883a 	add	r2,r3,r2
   103cc:	00c01a84 	movi	r3,106
   103d0:	10c00005 	stb	r3,0(r2)
   103d4:	e0bfe503 	ldbu	r2,-108(fp)
   103d8:	10800044 	addi	r2,r2,1
   103dc:	e0bfe505 	stb	r2,-108(fp)
		filename[out++] = 'p';
   103e0:	e0bfe503 	ldbu	r2,-108(fp)
   103e4:	e0ffe704 	addi	r3,fp,-100
   103e8:	1885883a 	add	r2,r3,r2
   103ec:	00c01c04 	movi	r3,112
   103f0:	10c00005 	stb	r3,0(r2)
   103f4:	e0bfe503 	ldbu	r2,-108(fp)
   103f8:	10800044 	addi	r2,r2,1
   103fc:	e0bfe505 	stb	r2,-108(fp)
		filename[out++] = 'g';
   10400:	e0bfe503 	ldbu	r2,-108(fp)
   10404:	e0ffe704 	addi	r3,fp,-100
   10408:	1885883a 	add	r2,r3,r2
   1040c:	00c019c4 	movi	r3,103
   10410:	10c00005 	stb	r3,0(r2)
   10414:	e0bfe503 	ldbu	r2,-108(fp)
   10418:	10800044 	addi	r2,r2,1
   1041c:	e0bfe505 	stb	r2,-108(fp)
		filename[out] = '\0';
   10420:	e0bfe503 	ldbu	r2,-108(fp)
   10424:	e0ffe704 	addi	r3,fp,-100
   10428:	1885883a 	add	r2,r3,r2
   1042c:	10000005 	stb	zero,0(r2)

		char path[50] = "/mnt/host/files/";
   10430:	009b4bc4 	movi	r2,27951
   10434:	e0bff38d 	sth	r2,-50(fp)
   10438:	009d1b84 	movi	r2,29806
   1043c:	e0bff40d 	sth	r2,-48(fp)
   10440:	009a0bc4 	movi	r2,26671
   10444:	e0bff48d 	sth	r2,-46(fp)
   10448:	009cdbc4 	movi	r2,29551
   1044c:	e0bff50d 	sth	r2,-44(fp)
   10450:	008bdd04 	movi	r2,12148
   10454:	e0bff58d 	sth	r2,-42(fp)
   10458:	009a5984 	movi	r2,26982
   1045c:	e0bff60d 	sth	r2,-40(fp)
   10460:	00995b04 	movi	r2,25964
   10464:	e0bff68d 	sth	r2,-38(fp)
   10468:	008bdcc4 	movi	r2,12147
   1046c:	e0bff70d 	sth	r2,-36(fp)
   10470:	e03ff78d 	sth	zero,-34(fp)
   10474:	e03ff80d 	sth	zero,-32(fp)
   10478:	e0fff884 	addi	r3,fp,-30
   1047c:	00800784 	movi	r2,30
   10480:	1809883a 	mov	r4,r3
   10484:	000b883a 	mov	r5,zero
   10488:	100d883a 	mov	r6,r2
   1048c:	00120fc0 	call	120fc <memset>
		strcat(path, filename);
   10490:	e0fff384 	addi	r3,fp,-50
   10494:	e0bfe704 	addi	r2,fp,-100
   10498:	1809883a 	mov	r4,r3
   1049c:	100b883a 	mov	r5,r2
   104a0:	00128340 	call	12834 <strcat>

		fptr = fopen(path, "wb");
   104a4:	e0bff384 	addi	r2,fp,-50
   104a8:	1009883a 	mov	r4,r2
   104ac:	01400074 	movhi	r5,1
   104b0:	295c6904 	addi	r5,r5,29092
   104b4:	0010ca40 	call	10ca4 <fopen>
   104b8:	e0bfe615 	stw	r2,-104(fp)

		int n = 0;
   104bc:	e03fe415 	stw	zero,-112(fp)
		while (n < 100)
   104c0:	00000906 	br	104e8 <main+0x1e8>
		{
			// out = (UINT8)RECV2();
			// READ_FIFO(&out, OUT_BASE_5to6, CONTROL_BASE_5to6);
			out = 'a';
   104c4:	00801844 	movi	r2,97
   104c8:	e0bfe505 	stb	r2,-108(fp)

			fputc(out, fptr);
   104cc:	e0bfe503 	ldbu	r2,-108(fp)
   104d0:	1009883a 	mov	r4,r2
   104d4:	e17fe617 	ldw	r5,-104(fp)
   104d8:	0010d040 	call	10d04 <fputc>

			// 	if (out == 0xD9)
			// 		break;
			// }

			n++;
   104dc:	e0bfe417 	ldw	r2,-112(fp)
   104e0:	10800044 	addi	r2,r2,1
   104e4:	e0bfe415 	stw	r2,-112(fp)
		strcat(path, filename);

		fptr = fopen(path, "wb");

		int n = 0;
		while (n < 100)
   104e8:	e0bfe417 	ldw	r2,-112(fp)
   104ec:	10801910 	cmplti	r2,r2,100
   104f0:	103ff41e 	bne	r2,zero,104c4 <main+0x1c4>
			// }

			n++;
		}

		fclose(fptr);
   104f4:	e13fe617 	ldw	r4,-104(fp)
   104f8:	001065c0 	call	1065c <fclose>

		printf("Image Done!\n");
   104fc:	01000074 	movhi	r4,1
   10500:	211c6a04 	addi	r4,r4,29096
   10504:	00124740 	call	12474 <puts>

		break;
	}

	return 0;
   10508:	0005883a 	mov	r2,zero
}
   1050c:	e037883a 	mov	sp,fp
   10510:	dfc00117 	ldw	ra,4(sp)
   10514:	df000017 	ldw	fp,0(sp)
   10518:	dec00204 	addi	sp,sp,8
   1051c:	f800283a 	ret

00010520 <_fclose_r>:
   10520:	defffc04 	addi	sp,sp,-16
   10524:	dc400115 	stw	r17,4(sp)
   10528:	dc000015 	stw	r16,0(sp)
   1052c:	dfc00315 	stw	ra,12(sp)
   10530:	dc800215 	stw	r18,8(sp)
   10534:	2821883a 	mov	r16,r5
   10538:	2023883a 	mov	r17,r4
   1053c:	28003426 	beq	r5,zero,10610 <_fclose_r+0xf0>
   10540:	0010b340 	call	10b34 <__sfp_lock_acquire>
   10544:	88000226 	beq	r17,zero,10550 <_fclose_r+0x30>
   10548:	88800e17 	ldw	r2,56(r17)
   1054c:	10003826 	beq	r2,zero,10630 <_fclose_r+0x110>
   10550:	8080030f 	ldh	r2,12(r16)
   10554:	10002526 	beq	r2,zero,105ec <_fclose_r+0xcc>
   10558:	8809883a 	mov	r4,r17
   1055c:	800b883a 	mov	r5,r16
   10560:	00106700 	call	10670 <_fflush_r>
   10564:	1025883a 	mov	r18,r2
   10568:	80800b17 	ldw	r2,44(r16)
   1056c:	10000426 	beq	r2,zero,10580 <_fclose_r+0x60>
   10570:	81400717 	ldw	r5,28(r16)
   10574:	8809883a 	mov	r4,r17
   10578:	103ee83a 	callr	r2
   1057c:	10003516 	blt	r2,zero,10654 <_fclose_r+0x134>
   10580:	8080030b 	ldhu	r2,12(r16)
   10584:	1080200c 	andi	r2,r2,128
   10588:	10bfffcc 	andi	r2,r2,65535
   1058c:	10a0001c 	xori	r2,r2,32768
   10590:	10a00004 	addi	r2,r2,-32768
   10594:	10002b1e 	bne	r2,zero,10644 <_fclose_r+0x124>
   10598:	81400c17 	ldw	r5,48(r16)
   1059c:	28000526 	beq	r5,zero,105b4 <_fclose_r+0x94>
   105a0:	80801004 	addi	r2,r16,64
   105a4:	28800226 	beq	r5,r2,105b0 <_fclose_r+0x90>
   105a8:	8809883a 	mov	r4,r17
   105ac:	0010ea00 	call	10ea0 <_free_r>
   105b0:	80000c15 	stw	zero,48(r16)
   105b4:	81401117 	ldw	r5,68(r16)
   105b8:	28000326 	beq	r5,zero,105c8 <_fclose_r+0xa8>
   105bc:	8809883a 	mov	r4,r17
   105c0:	0010ea00 	call	10ea0 <_free_r>
   105c4:	80001115 	stw	zero,68(r16)
   105c8:	8000030d 	sth	zero,12(r16)
   105cc:	0010b380 	call	10b38 <__sfp_lock_release>
   105d0:	9005883a 	mov	r2,r18
   105d4:	dfc00317 	ldw	ra,12(sp)
   105d8:	dc800217 	ldw	r18,8(sp)
   105dc:	dc400117 	ldw	r17,4(sp)
   105e0:	dc000017 	ldw	r16,0(sp)
   105e4:	dec00404 	addi	sp,sp,16
   105e8:	f800283a 	ret
   105ec:	0010b380 	call	10b38 <__sfp_lock_release>
   105f0:	0025883a 	mov	r18,zero
   105f4:	9005883a 	mov	r2,r18
   105f8:	dfc00317 	ldw	ra,12(sp)
   105fc:	dc800217 	ldw	r18,8(sp)
   10600:	dc400117 	ldw	r17,4(sp)
   10604:	dc000017 	ldw	r16,0(sp)
   10608:	dec00404 	addi	sp,sp,16
   1060c:	f800283a 	ret
   10610:	0025883a 	mov	r18,zero
   10614:	9005883a 	mov	r2,r18
   10618:	dfc00317 	ldw	ra,12(sp)
   1061c:	dc800217 	ldw	r18,8(sp)
   10620:	dc400117 	ldw	r17,4(sp)
   10624:	dc000017 	ldw	r16,0(sp)
   10628:	dec00404 	addi	sp,sp,16
   1062c:	f800283a 	ret
   10630:	8809883a 	mov	r4,r17
   10634:	001092c0 	call	1092c <__sinit>
   10638:	8080030f 	ldh	r2,12(r16)
   1063c:	103fc61e 	bne	r2,zero,10558 <_fclose_r+0x38>
   10640:	003fea06 	br	105ec <_fclose_r+0xcc>
   10644:	81400417 	ldw	r5,16(r16)
   10648:	8809883a 	mov	r4,r17
   1064c:	0010ea00 	call	10ea0 <_free_r>
   10650:	003fd106 	br	10598 <_fclose_r+0x78>
   10654:	04bfffc4 	movi	r18,-1
   10658:	003fc906 	br	10580 <_fclose_r+0x60>

0001065c <fclose>:
   1065c:	008000b4 	movhi	r2,2
   10660:	10a30c04 	addi	r2,r2,-29648
   10664:	200b883a 	mov	r5,r4
   10668:	11000017 	ldw	r4,0(r2)
   1066c:	00105201 	jmpi	10520 <_fclose_r>

00010670 <_fflush_r>:
   10670:	defffb04 	addi	sp,sp,-20
   10674:	dcc00315 	stw	r19,12(sp)
   10678:	dc400115 	stw	r17,4(sp)
   1067c:	dfc00415 	stw	ra,16(sp)
   10680:	dc800215 	stw	r18,8(sp)
   10684:	dc000015 	stw	r16,0(sp)
   10688:	2027883a 	mov	r19,r4
   1068c:	2823883a 	mov	r17,r5
   10690:	20000226 	beq	r4,zero,1069c <_fflush_r+0x2c>
   10694:	20800e17 	ldw	r2,56(r4)
   10698:	10005726 	beq	r2,zero,107f8 <_fflush_r+0x188>
   1069c:	8880030b 	ldhu	r2,12(r17)
   106a0:	10c0020c 	andi	r3,r2,8
   106a4:	18ffffcc 	andi	r3,r3,65535
   106a8:	18e0001c 	xori	r3,r3,32768
   106ac:	18e00004 	addi	r3,r3,-32768
   106b0:	1800311e 	bne	r3,zero,10778 <_fflush_r+0x108>
   106b4:	89000117 	ldw	r4,4(r17)
   106b8:	10c20014 	ori	r3,r2,2048
   106bc:	88c0030d 	sth	r3,12(r17)
   106c0:	180b883a 	mov	r5,r3
   106c4:	0100520e 	bge	zero,r4,10810 <_fflush_r+0x1a0>
   106c8:	88c00a17 	ldw	r3,40(r17)
   106cc:	18002226 	beq	r3,zero,10758 <_fflush_r+0xe8>
   106d0:	1084000c 	andi	r2,r2,4096
   106d4:	10bfffcc 	andi	r2,r2,65535
   106d8:	10a0001c 	xori	r2,r2,32768
   106dc:	10a00004 	addi	r2,r2,-32768
   106e0:	10004e26 	beq	r2,zero,1081c <_fflush_r+0x1ac>
   106e4:	8c001417 	ldw	r16,80(r17)
   106e8:	2940010c 	andi	r5,r5,4
   106ec:	297fffcc 	andi	r5,r5,65535
   106f0:	2960001c 	xori	r5,r5,32768
   106f4:	29600004 	addi	r5,r5,-32768
   106f8:	28000626 	beq	r5,zero,10714 <_fflush_r+0xa4>
   106fc:	89000117 	ldw	r4,4(r17)
   10700:	88800c17 	ldw	r2,48(r17)
   10704:	8121c83a 	sub	r16,r16,r4
   10708:	10000226 	beq	r2,zero,10714 <_fflush_r+0xa4>
   1070c:	88800f17 	ldw	r2,60(r17)
   10710:	80a1c83a 	sub	r16,r16,r2
   10714:	89400717 	ldw	r5,28(r17)
   10718:	9809883a 	mov	r4,r19
   1071c:	800d883a 	mov	r6,r16
   10720:	000f883a 	mov	r7,zero
   10724:	183ee83a 	callr	r3
   10728:	8080281e 	bne	r16,r2,107cc <_fflush_r+0x15c>
   1072c:	8880030b 	ldhu	r2,12(r17)
   10730:	88c00417 	ldw	r3,16(r17)
   10734:	88000115 	stw	zero,4(r17)
   10738:	113dffcc 	andi	r4,r2,63487
   1073c:	1084000c 	andi	r2,r2,4096
   10740:	10bfffcc 	andi	r2,r2,65535
   10744:	10a0001c 	xori	r2,r2,32768
   10748:	8900030d 	sth	r4,12(r17)
   1074c:	88c00015 	stw	r3,0(r17)
   10750:	10a00004 	addi	r2,r2,-32768
   10754:	10002c1e 	bne	r2,zero,10808 <_fflush_r+0x198>
   10758:	0005883a 	mov	r2,zero
   1075c:	dfc00417 	ldw	ra,16(sp)
   10760:	dcc00317 	ldw	r19,12(sp)
   10764:	dc800217 	ldw	r18,8(sp)
   10768:	dc400117 	ldw	r17,4(sp)
   1076c:	dc000017 	ldw	r16,0(sp)
   10770:	dec00504 	addi	sp,sp,20
   10774:	f800283a 	ret
   10778:	8c800417 	ldw	r18,16(r17)
   1077c:	903ff626 	beq	r18,zero,10758 <_fflush_r+0xe8>
   10780:	8c000017 	ldw	r16,0(r17)
   10784:	108000cc 	andi	r2,r2,3
   10788:	8c800015 	stw	r18,0(r17)
   1078c:	84a1c83a 	sub	r16,r16,r18
   10790:	10001b1e 	bne	r2,zero,10800 <_fflush_r+0x190>
   10794:	88800517 	ldw	r2,20(r17)
   10798:	88800215 	stw	r2,8(r17)
   1079c:	04000316 	blt	zero,r16,107ac <_fflush_r+0x13c>
   107a0:	003fed06 	br	10758 <_fflush_r+0xe8>
   107a4:	90a5883a 	add	r18,r18,r2
   107a8:	043feb0e 	bge	zero,r16,10758 <_fflush_r+0xe8>
   107ac:	88800917 	ldw	r2,36(r17)
   107b0:	89400717 	ldw	r5,28(r17)
   107b4:	800f883a 	mov	r7,r16
   107b8:	900d883a 	mov	r6,r18
   107bc:	9809883a 	mov	r4,r19
   107c0:	103ee83a 	callr	r2
   107c4:	80a1c83a 	sub	r16,r16,r2
   107c8:	00bff616 	blt	zero,r2,107a4 <_fflush_r+0x134>
   107cc:	88c0030b 	ldhu	r3,12(r17)
   107d0:	00bfffc4 	movi	r2,-1
   107d4:	18c01014 	ori	r3,r3,64
   107d8:	88c0030d 	sth	r3,12(r17)
   107dc:	dfc00417 	ldw	ra,16(sp)
   107e0:	dcc00317 	ldw	r19,12(sp)
   107e4:	dc800217 	ldw	r18,8(sp)
   107e8:	dc400117 	ldw	r17,4(sp)
   107ec:	dc000017 	ldw	r16,0(sp)
   107f0:	dec00504 	addi	sp,sp,20
   107f4:	f800283a 	ret
   107f8:	001092c0 	call	1092c <__sinit>
   107fc:	003fa706 	br	1069c <_fflush_r+0x2c>
   10800:	0005883a 	mov	r2,zero
   10804:	003fe406 	br	10798 <_fflush_r+0x128>
   10808:	8c001415 	stw	r16,80(r17)
   1080c:	003fd206 	br	10758 <_fflush_r+0xe8>
   10810:	88c00f17 	ldw	r3,60(r17)
   10814:	00ffac16 	blt	zero,r3,106c8 <_fflush_r+0x58>
   10818:	003fcf06 	br	10758 <_fflush_r+0xe8>
   1081c:	89400717 	ldw	r5,28(r17)
   10820:	9809883a 	mov	r4,r19
   10824:	000d883a 	mov	r6,zero
   10828:	01c00044 	movi	r7,1
   1082c:	183ee83a 	callr	r3
   10830:	1021883a 	mov	r16,r2
   10834:	00bfffc4 	movi	r2,-1
   10838:	80800326 	beq	r16,r2,10848 <_fflush_r+0x1d8>
   1083c:	8940030b 	ldhu	r5,12(r17)
   10840:	88c00a17 	ldw	r3,40(r17)
   10844:	003fa806 	br	106e8 <_fflush_r+0x78>
   10848:	98c00017 	ldw	r3,0(r19)
   1084c:	00800744 	movi	r2,29
   10850:	18bfde1e 	bne	r3,r2,107cc <_fflush_r+0x15c>
   10854:	003fc006 	br	10758 <_fflush_r+0xe8>

00010858 <fflush>:
   10858:	200b883a 	mov	r5,r4
   1085c:	20000426 	beq	r4,zero,10870 <fflush+0x18>
   10860:	008000b4 	movhi	r2,2
   10864:	10a30c04 	addi	r2,r2,-29648
   10868:	11000017 	ldw	r4,0(r2)
   1086c:	00106701 	jmpi	10670 <_fflush_r>
   10870:	008000b4 	movhi	r2,2
   10874:	10a30b04 	addi	r2,r2,-29652
   10878:	11000017 	ldw	r4,0(r2)
   1087c:	01400074 	movhi	r5,1
   10880:	29419c04 	addi	r5,r5,1648
   10884:	00117181 	jmpi	11718 <_fwalk_reent>

00010888 <__fp_lock>:
   10888:	0005883a 	mov	r2,zero
   1088c:	f800283a 	ret

00010890 <__fp_unlock>:
   10890:	0005883a 	mov	r2,zero
   10894:	f800283a 	ret

00010898 <_cleanup_r>:
   10898:	01400074 	movhi	r5,1
   1089c:	29419704 	addi	r5,r5,1628
   108a0:	00116701 	jmpi	11670 <_fwalk>

000108a4 <__sfmoreglue>:
   108a4:	defffc04 	addi	sp,sp,-16
   108a8:	dc800215 	stw	r18,8(sp)
   108ac:	2825883a 	mov	r18,r5
   108b0:	dc000015 	stw	r16,0(sp)
   108b4:	01401704 	movi	r5,92
   108b8:	2021883a 	mov	r16,r4
   108bc:	9009883a 	mov	r4,r18
   108c0:	dfc00315 	stw	ra,12(sp)
   108c4:	dc400115 	stw	r17,4(sp)
   108c8:	0013e000 	call	13e00 <__mulsi3>
   108cc:	8009883a 	mov	r4,r16
   108d0:	11400304 	addi	r5,r2,12
   108d4:	1023883a 	mov	r17,r2
   108d8:	00119780 	call	11978 <_malloc_r>
   108dc:	1021883a 	mov	r16,r2
   108e0:	10000726 	beq	r2,zero,10900 <__sfmoreglue+0x5c>
   108e4:	11000304 	addi	r4,r2,12
   108e8:	10000015 	stw	zero,0(r2)
   108ec:	14800115 	stw	r18,4(r2)
   108f0:	11000215 	stw	r4,8(r2)
   108f4:	000b883a 	mov	r5,zero
   108f8:	880d883a 	mov	r6,r17
   108fc:	00120fc0 	call	120fc <memset>
   10900:	8005883a 	mov	r2,r16
   10904:	dfc00317 	ldw	ra,12(sp)
   10908:	dc800217 	ldw	r18,8(sp)
   1090c:	dc400117 	ldw	r17,4(sp)
   10910:	dc000017 	ldw	r16,0(sp)
   10914:	dec00404 	addi	sp,sp,16
   10918:	f800283a 	ret

0001091c <_cleanup>:
   1091c:	008000b4 	movhi	r2,2
   10920:	10a30b04 	addi	r2,r2,-29652
   10924:	11000017 	ldw	r4,0(r2)
   10928:	00108981 	jmpi	10898 <_cleanup_r>

0001092c <__sinit>:
   1092c:	20800e17 	ldw	r2,56(r4)
   10930:	1000401e 	bne	r2,zero,10a34 <__sinit+0x108>
   10934:	21400117 	ldw	r5,4(r4)
   10938:	01800074 	movhi	r6,1
   1093c:	31822604 	addi	r6,r6,2200
   10940:	20c00217 	ldw	r3,8(r4)
   10944:	21800f15 	stw	r6,60(r4)
   10948:	2080bb04 	addi	r2,r4,748
   1094c:	02400044 	movi	r9,1
   10950:	018000c4 	movi	r6,3
   10954:	2180b915 	stw	r6,740(r4)
   10958:	2080ba15 	stw	r2,744(r4)
   1095c:	22400e15 	stw	r9,56(r4)
   10960:	20800317 	ldw	r2,12(r4)
   10964:	2000b815 	stw	zero,736(r4)
   10968:	02000074 	movhi	r8,1
   1096c:	4209bd04 	addi	r8,r8,9972
   10970:	01c00074 	movhi	r7,1
   10974:	39c9d204 	addi	r7,r7,10056
   10978:	01800074 	movhi	r6,1
   1097c:	3189f404 	addi	r6,r6,10192
   10980:	01000074 	movhi	r4,1
   10984:	210a0b04 	addi	r4,r4,10284
   10988:	02800104 	movi	r10,4
   1098c:	28000015 	stw	zero,0(r5)
   10990:	28000115 	stw	zero,4(r5)
   10994:	28000215 	stw	zero,8(r5)
   10998:	2a80030d 	sth	r10,12(r5)
   1099c:	2800038d 	sth	zero,14(r5)
   109a0:	28000415 	stw	zero,16(r5)
   109a4:	28000515 	stw	zero,20(r5)
   109a8:	28000615 	stw	zero,24(r5)
   109ac:	29400715 	stw	r5,28(r5)
   109b0:	2a000815 	stw	r8,32(r5)
   109b4:	29c00915 	stw	r7,36(r5)
   109b8:	29800a15 	stw	r6,40(r5)
   109bc:	29000b15 	stw	r4,44(r5)
   109c0:	01400284 	movi	r5,10
   109c4:	18000015 	stw	zero,0(r3)
   109c8:	18000115 	stw	zero,4(r3)
   109cc:	18000215 	stw	zero,8(r3)
   109d0:	1940030d 	sth	r5,12(r3)
   109d4:	1a40038d 	sth	r9,14(r3)
   109d8:	18000415 	stw	zero,16(r3)
   109dc:	18000515 	stw	zero,20(r3)
   109e0:	18000615 	stw	zero,24(r3)
   109e4:	18c00715 	stw	r3,28(r3)
   109e8:	1a000815 	stw	r8,32(r3)
   109ec:	19c00915 	stw	r7,36(r3)
   109f0:	19800a15 	stw	r6,40(r3)
   109f4:	19000b15 	stw	r4,44(r3)
   109f8:	00c00484 	movi	r3,18
   109fc:	10c0030d 	sth	r3,12(r2)
   10a00:	00c00084 	movi	r3,2
   10a04:	10000015 	stw	zero,0(r2)
   10a08:	10000115 	stw	zero,4(r2)
   10a0c:	10000215 	stw	zero,8(r2)
   10a10:	10c0038d 	sth	r3,14(r2)
   10a14:	10000415 	stw	zero,16(r2)
   10a18:	10000515 	stw	zero,20(r2)
   10a1c:	10000615 	stw	zero,24(r2)
   10a20:	10800715 	stw	r2,28(r2)
   10a24:	12000815 	stw	r8,32(r2)
   10a28:	11c00915 	stw	r7,36(r2)
   10a2c:	11800a15 	stw	r6,40(r2)
   10a30:	11000b15 	stw	r4,44(r2)
   10a34:	f800283a 	ret

00010a38 <__sfp>:
   10a38:	defffc04 	addi	sp,sp,-16
   10a3c:	008000b4 	movhi	r2,2
   10a40:	10a30b04 	addi	r2,r2,-29652
   10a44:	dc400115 	stw	r17,4(sp)
   10a48:	14400017 	ldw	r17,0(r2)
   10a4c:	dc800215 	stw	r18,8(sp)
   10a50:	dfc00315 	stw	ra,12(sp)
   10a54:	88800e17 	ldw	r2,56(r17)
   10a58:	dc000015 	stw	r16,0(sp)
   10a5c:	2025883a 	mov	r18,r4
   10a60:	10002826 	beq	r2,zero,10b04 <__sfp+0xcc>
   10a64:	8c40b804 	addi	r17,r17,736
   10a68:	043fffc4 	movi	r16,-1
   10a6c:	89400117 	ldw	r5,4(r17)
   10a70:	88800217 	ldw	r2,8(r17)
   10a74:	297fffc4 	addi	r5,r5,-1
   10a78:	28000a16 	blt	r5,zero,10aa4 <__sfp+0x6c>
   10a7c:	10c0030f 	ldh	r3,12(r2)
   10a80:	18000c26 	beq	r3,zero,10ab4 <__sfp+0x7c>
   10a84:	10c01a04 	addi	r3,r2,104
   10a88:	00000206 	br	10a94 <__sfp+0x5c>
   10a8c:	19bfe90f 	ldh	r6,-92(r3)
   10a90:	30000826 	beq	r6,zero,10ab4 <__sfp+0x7c>
   10a94:	297fffc4 	addi	r5,r5,-1
   10a98:	18bffd04 	addi	r2,r3,-12
   10a9c:	18c01704 	addi	r3,r3,92
   10aa0:	2c3ffa1e 	bne	r5,r16,10a8c <__sfp+0x54>
   10aa4:	88800017 	ldw	r2,0(r17)
   10aa8:	10001926 	beq	r2,zero,10b10 <__sfp+0xd8>
   10aac:	1023883a 	mov	r17,r2
   10ab0:	003fee06 	br	10a6c <__sfp+0x34>
   10ab4:	00ffffc4 	movi	r3,-1
   10ab8:	10c0038d 	sth	r3,14(r2)
   10abc:	00c00044 	movi	r3,1
   10ac0:	10c0030d 	sth	r3,12(r2)
   10ac4:	10000015 	stw	zero,0(r2)
   10ac8:	10000215 	stw	zero,8(r2)
   10acc:	10000115 	stw	zero,4(r2)
   10ad0:	10000415 	stw	zero,16(r2)
   10ad4:	10000515 	stw	zero,20(r2)
   10ad8:	10000615 	stw	zero,24(r2)
   10adc:	10000c15 	stw	zero,48(r2)
   10ae0:	10000d15 	stw	zero,52(r2)
   10ae4:	10001115 	stw	zero,68(r2)
   10ae8:	10001215 	stw	zero,72(r2)
   10aec:	dfc00317 	ldw	ra,12(sp)
   10af0:	dc800217 	ldw	r18,8(sp)
   10af4:	dc400117 	ldw	r17,4(sp)
   10af8:	dc000017 	ldw	r16,0(sp)
   10afc:	dec00404 	addi	sp,sp,16
   10b00:	f800283a 	ret
   10b04:	8809883a 	mov	r4,r17
   10b08:	001092c0 	call	1092c <__sinit>
   10b0c:	003fd506 	br	10a64 <__sfp+0x2c>
   10b10:	9009883a 	mov	r4,r18
   10b14:	01400104 	movi	r5,4
   10b18:	00108a40 	call	108a4 <__sfmoreglue>
   10b1c:	88800015 	stw	r2,0(r17)
   10b20:	103fe21e 	bne	r2,zero,10aac <__sfp+0x74>
   10b24:	00800304 	movi	r2,12
   10b28:	90800015 	stw	r2,0(r18)
   10b2c:	0005883a 	mov	r2,zero
   10b30:	003fee06 	br	10aec <__sfp+0xb4>

00010b34 <__sfp_lock_acquire>:
   10b34:	f800283a 	ret

00010b38 <__sfp_lock_release>:
   10b38:	f800283a 	ret

00010b3c <__sinit_lock_acquire>:
   10b3c:	f800283a 	ret

00010b40 <__sinit_lock_release>:
   10b40:	f800283a 	ret

00010b44 <__fp_lock_all>:
   10b44:	008000b4 	movhi	r2,2
   10b48:	10a30c04 	addi	r2,r2,-29648
   10b4c:	11000017 	ldw	r4,0(r2)
   10b50:	01400074 	movhi	r5,1
   10b54:	29422204 	addi	r5,r5,2184
   10b58:	00116701 	jmpi	11670 <_fwalk>

00010b5c <__fp_unlock_all>:
   10b5c:	008000b4 	movhi	r2,2
   10b60:	10a30c04 	addi	r2,r2,-29648
   10b64:	11000017 	ldw	r4,0(r2)
   10b68:	01400074 	movhi	r5,1
   10b6c:	29422404 	addi	r5,r5,2192
   10b70:	00116701 	jmpi	11670 <_fwalk>

00010b74 <_fopen_r>:
   10b74:	defffa04 	addi	sp,sp,-24
   10b78:	dcc00415 	stw	r19,16(sp)
   10b7c:	2827883a 	mov	r19,r5
   10b80:	300b883a 	mov	r5,r6
   10b84:	d80d883a 	mov	r6,sp
   10b88:	dc800315 	stw	r18,12(sp)
   10b8c:	dc400215 	stw	r17,8(sp)
   10b90:	dfc00515 	stw	ra,20(sp)
   10b94:	dc000115 	stw	r16,4(sp)
   10b98:	2025883a 	mov	r18,r4
   10b9c:	0012d880 	call	12d88 <__sflags>
   10ba0:	1023883a 	mov	r17,r2
   10ba4:	10002926 	beq	r2,zero,10c4c <_fopen_r+0xd8>
   10ba8:	9009883a 	mov	r4,r18
   10bac:	0010a380 	call	10a38 <__sfp>
   10bb0:	1021883a 	mov	r16,r2
   10bb4:	10002526 	beq	r2,zero,10c4c <_fopen_r+0xd8>
   10bb8:	d9800017 	ldw	r6,0(sp)
   10bbc:	9009883a 	mov	r4,r18
   10bc0:	980b883a 	mov	r5,r19
   10bc4:	01c06d84 	movi	r7,438
   10bc8:	00121d80 	call	121d8 <_open_r>
   10bcc:	10001c16 	blt	r2,zero,10c40 <_fopen_r+0xcc>
   10bd0:	8080038d 	sth	r2,14(r16)
   10bd4:	00800074 	movhi	r2,1
   10bd8:	1089bd04 	addi	r2,r2,9972
   10bdc:	80800815 	stw	r2,32(r16)
   10be0:	00800074 	movhi	r2,1
   10be4:	1089d204 	addi	r2,r2,10056
   10be8:	80800915 	stw	r2,36(r16)
   10bec:	00800074 	movhi	r2,1
   10bf0:	1089f404 	addi	r2,r2,10192
   10bf4:	88c0400c 	andi	r3,r17,256
   10bf8:	80800a15 	stw	r2,40(r16)
   10bfc:	00800074 	movhi	r2,1
   10c00:	108a0b04 	addi	r2,r2,10284
   10c04:	80800b15 	stw	r2,44(r16)
   10c08:	18bfffcc 	andi	r2,r3,65535
   10c0c:	10a0001c 	xori	r2,r2,32768
   10c10:	8440030d 	sth	r17,12(r16)
   10c14:	84000715 	stw	r16,28(r16)
   10c18:	10a00004 	addi	r2,r2,-32768
   10c1c:	1000141e 	bne	r2,zero,10c70 <_fopen_r+0xfc>
   10c20:	8005883a 	mov	r2,r16
   10c24:	dfc00517 	ldw	ra,20(sp)
   10c28:	dcc00417 	ldw	r19,16(sp)
   10c2c:	dc800317 	ldw	r18,12(sp)
   10c30:	dc400217 	ldw	r17,8(sp)
   10c34:	dc000117 	ldw	r16,4(sp)
   10c38:	dec00604 	addi	sp,sp,24
   10c3c:	f800283a 	ret
   10c40:	0010b340 	call	10b34 <__sfp_lock_acquire>
   10c44:	8000030d 	sth	zero,12(r16)
   10c48:	0010b380 	call	10b38 <__sfp_lock_release>
   10c4c:	0021883a 	mov	r16,zero
   10c50:	8005883a 	mov	r2,r16
   10c54:	dfc00517 	ldw	ra,20(sp)
   10c58:	dcc00417 	ldw	r19,16(sp)
   10c5c:	dc800317 	ldw	r18,12(sp)
   10c60:	dc400217 	ldw	r17,8(sp)
   10c64:	dc000117 	ldw	r16,4(sp)
   10c68:	dec00604 	addi	sp,sp,24
   10c6c:	f800283a 	ret
   10c70:	9009883a 	mov	r4,r18
   10c74:	800b883a 	mov	r5,r16
   10c78:	000d883a 	mov	r6,zero
   10c7c:	01c00084 	movi	r7,2
   10c80:	00111700 	call	11170 <_fseek_r>
   10c84:	8005883a 	mov	r2,r16
   10c88:	dfc00517 	ldw	ra,20(sp)
   10c8c:	dcc00417 	ldw	r19,16(sp)
   10c90:	dc800317 	ldw	r18,12(sp)
   10c94:	dc400217 	ldw	r17,8(sp)
   10c98:	dc000117 	ldw	r16,4(sp)
   10c9c:	dec00604 	addi	sp,sp,24
   10ca0:	f800283a 	ret

00010ca4 <fopen>:
   10ca4:	00c000b4 	movhi	r3,2
   10ca8:	18e30c04 	addi	r3,r3,-29648
   10cac:	2005883a 	mov	r2,r4
   10cb0:	19000017 	ldw	r4,0(r3)
   10cb4:	280d883a 	mov	r6,r5
   10cb8:	100b883a 	mov	r5,r2
   10cbc:	0010b741 	jmpi	10b74 <_fopen_r>

00010cc0 <_fputc_r>:
   10cc0:	defffc04 	addi	sp,sp,-16
   10cc4:	dc000215 	stw	r16,8(sp)
   10cc8:	dfc00315 	stw	ra,12(sp)
   10ccc:	2021883a 	mov	r16,r4
   10cd0:	20000726 	beq	r4,zero,10cf0 <_fputc_r+0x30>
   10cd4:	20800e17 	ldw	r2,56(r4)
   10cd8:	1000051e 	bne	r2,zero,10cf0 <_fputc_r+0x30>
   10cdc:	d9400015 	stw	r5,0(sp)
   10ce0:	d9800115 	stw	r6,4(sp)
   10ce4:	001092c0 	call	1092c <__sinit>
   10ce8:	d9800117 	ldw	r6,4(sp)
   10cec:	d9400017 	ldw	r5,0(sp)
   10cf0:	8009883a 	mov	r4,r16
   10cf4:	dfc00317 	ldw	ra,12(sp)
   10cf8:	dc000217 	ldw	r16,8(sp)
   10cfc:	dec00404 	addi	sp,sp,16
   10d00:	00122441 	jmpi	12244 <_putc_r>

00010d04 <fputc>:
   10d04:	defffc04 	addi	sp,sp,-16
   10d08:	dc000115 	stw	r16,4(sp)
   10d0c:	040000b4 	movhi	r16,2
   10d10:	84230c04 	addi	r16,r16,-29648
   10d14:	80800017 	ldw	r2,0(r16)
   10d18:	dc400215 	stw	r17,8(sp)
   10d1c:	dfc00315 	stw	ra,12(sp)
   10d20:	2023883a 	mov	r17,r4
   10d24:	280d883a 	mov	r6,r5
   10d28:	10000726 	beq	r2,zero,10d48 <fputc+0x44>
   10d2c:	10c00e17 	ldw	r3,56(r2)
   10d30:	1800051e 	bne	r3,zero,10d48 <fputc+0x44>
   10d34:	1009883a 	mov	r4,r2
   10d38:	d9400015 	stw	r5,0(sp)
   10d3c:	001092c0 	call	1092c <__sinit>
   10d40:	80800017 	ldw	r2,0(r16)
   10d44:	d9800017 	ldw	r6,0(sp)
   10d48:	1009883a 	mov	r4,r2
   10d4c:	880b883a 	mov	r5,r17
   10d50:	dfc00317 	ldw	ra,12(sp)
   10d54:	dc400217 	ldw	r17,8(sp)
   10d58:	dc000117 	ldw	r16,4(sp)
   10d5c:	dec00404 	addi	sp,sp,16
   10d60:	00122441 	jmpi	12244 <_putc_r>

00010d64 <_malloc_trim_r>:
   10d64:	defffb04 	addi	sp,sp,-20
   10d68:	dcc00315 	stw	r19,12(sp)
   10d6c:	dc800215 	stw	r18,8(sp)
   10d70:	dc400115 	stw	r17,4(sp)
   10d74:	dc000015 	stw	r16,0(sp)
   10d78:	2827883a 	mov	r19,r5
   10d7c:	dfc00415 	stw	ra,16(sp)
   10d80:	04400074 	movhi	r17,1
   10d84:	8c5d7d04 	addi	r17,r17,30196
   10d88:	2021883a 	mov	r16,r4
   10d8c:	00143ec0 	call	143ec <__malloc_lock>
   10d90:	88800217 	ldw	r2,8(r17)
   10d94:	14800117 	ldw	r18,4(r2)
   10d98:	00bfff04 	movi	r2,-4
   10d9c:	90a4703a 	and	r18,r18,r2
   10da0:	9083fbc4 	addi	r2,r18,4079
   10da4:	14e7c83a 	sub	r19,r2,r19
   10da8:	9826d33a 	srli	r19,r19,12
   10dac:	0083ffc4 	movi	r2,4095
   10db0:	9cffffc4 	addi	r19,r19,-1
   10db4:	9826933a 	slli	r19,r19,12
   10db8:	14c0060e 	bge	r2,r19,10dd4 <_malloc_trim_r+0x70>
   10dbc:	8009883a 	mov	r4,r16
   10dc0:	000b883a 	mov	r5,zero
   10dc4:	00126900 	call	12690 <_sbrk_r>
   10dc8:	88c00217 	ldw	r3,8(r17)
   10dcc:	1c87883a 	add	r3,r3,r18
   10dd0:	10c00a26 	beq	r2,r3,10dfc <_malloc_trim_r+0x98>
   10dd4:	8009883a 	mov	r4,r16
   10dd8:	001440c0 	call	1440c <__malloc_unlock>
   10ddc:	0005883a 	mov	r2,zero
   10de0:	dfc00417 	ldw	ra,16(sp)
   10de4:	dcc00317 	ldw	r19,12(sp)
   10de8:	dc800217 	ldw	r18,8(sp)
   10dec:	dc400117 	ldw	r17,4(sp)
   10df0:	dc000017 	ldw	r16,0(sp)
   10df4:	dec00504 	addi	sp,sp,20
   10df8:	f800283a 	ret
   10dfc:	8009883a 	mov	r4,r16
   10e00:	04cbc83a 	sub	r5,zero,r19
   10e04:	00126900 	call	12690 <_sbrk_r>
   10e08:	00ffffc4 	movi	r3,-1
   10e0c:	10c01326 	beq	r2,r3,10e5c <_malloc_trim_r+0xf8>
   10e10:	008000b4 	movhi	r2,2
   10e14:	10a9e304 	addi	r2,r2,-22644
   10e18:	11000017 	ldw	r4,0(r2)
   10e1c:	88c00217 	ldw	r3,8(r17)
   10e20:	94e5c83a 	sub	r18,r18,r19
   10e24:	94800054 	ori	r18,r18,1
   10e28:	24e7c83a 	sub	r19,r4,r19
   10e2c:	1c800115 	stw	r18,4(r3)
   10e30:	8009883a 	mov	r4,r16
   10e34:	14c00015 	stw	r19,0(r2)
   10e38:	001440c0 	call	1440c <__malloc_unlock>
   10e3c:	00800044 	movi	r2,1
   10e40:	dfc00417 	ldw	ra,16(sp)
   10e44:	dcc00317 	ldw	r19,12(sp)
   10e48:	dc800217 	ldw	r18,8(sp)
   10e4c:	dc400117 	ldw	r17,4(sp)
   10e50:	dc000017 	ldw	r16,0(sp)
   10e54:	dec00504 	addi	sp,sp,20
   10e58:	f800283a 	ret
   10e5c:	8009883a 	mov	r4,r16
   10e60:	000b883a 	mov	r5,zero
   10e64:	00126900 	call	12690 <_sbrk_r>
   10e68:	88c00217 	ldw	r3,8(r17)
   10e6c:	014003c4 	movi	r5,15
   10e70:	10c9c83a 	sub	r4,r2,r3
   10e74:	293fd70e 	bge	r5,r4,10dd4 <_malloc_trim_r+0x70>
   10e78:	014000b4 	movhi	r5,2
   10e7c:	29630d04 	addi	r5,r5,-29644
   10e80:	29400017 	ldw	r5,0(r5)
   10e84:	21000054 	ori	r4,r4,1
   10e88:	19000115 	stw	r4,4(r3)
   10e8c:	1145c83a 	sub	r2,r2,r5
   10e90:	014000b4 	movhi	r5,2
   10e94:	2969e304 	addi	r5,r5,-22644
   10e98:	28800015 	stw	r2,0(r5)
   10e9c:	003fcd06 	br	10dd4 <_malloc_trim_r+0x70>

00010ea0 <_free_r>:
   10ea0:	defffd04 	addi	sp,sp,-12
   10ea4:	dc400115 	stw	r17,4(sp)
   10ea8:	dc000015 	stw	r16,0(sp)
   10eac:	dfc00215 	stw	ra,8(sp)
   10eb0:	2821883a 	mov	r16,r5
   10eb4:	2023883a 	mov	r17,r4
   10eb8:	28004b26 	beq	r5,zero,10fe8 <_free_r+0x148>
   10ebc:	00143ec0 	call	143ec <__malloc_lock>
   10ec0:	823fff17 	ldw	r8,-4(r16)
   10ec4:	00bfff84 	movi	r2,-2
   10ec8:	81bffe04 	addi	r6,r16,-8
   10ecc:	4084703a 	and	r2,r8,r2
   10ed0:	3087883a 	add	r3,r6,r2
   10ed4:	01400074 	movhi	r5,1
   10ed8:	295d7d04 	addi	r5,r5,30196
   10edc:	1a400117 	ldw	r9,4(r3)
   10ee0:	29000217 	ldw	r4,8(r5)
   10ee4:	01ffff04 	movi	r7,-4
   10ee8:	49ce703a 	and	r7,r9,r7
   10eec:	20c06526 	beq	r4,r3,11084 <_free_r+0x1e4>
   10ef0:	19c00115 	stw	r7,4(r3)
   10ef4:	4200004c 	andi	r8,r8,1
   10ef8:	40003026 	beq	r8,zero,10fbc <_free_r+0x11c>
   10efc:	0009883a 	mov	r4,zero
   10f00:	19d1883a 	add	r8,r3,r7
   10f04:	42000117 	ldw	r8,4(r8)
   10f08:	4200004c 	andi	r8,r8,1
   10f0c:	4000061e 	bne	r8,zero,10f28 <_free_r+0x88>
   10f10:	11c5883a 	add	r2,r2,r7
   10f14:	19c00217 	ldw	r7,8(r3)
   10f18:	20004e26 	beq	r4,zero,11054 <_free_r+0x1b4>
   10f1c:	18c00317 	ldw	r3,12(r3)
   10f20:	38c00315 	stw	r3,12(r7)
   10f24:	19c00215 	stw	r7,8(r3)
   10f28:	11c00054 	ori	r7,r2,1
   10f2c:	3087883a 	add	r3,r6,r2
   10f30:	31c00115 	stw	r7,4(r6)
   10f34:	18800015 	stw	r2,0(r3)
   10f38:	20001a1e 	bne	r4,zero,10fa4 <_free_r+0x104>
   10f3c:	00c07fc4 	movi	r3,511
   10f40:	18802e2e 	bgeu	r3,r2,10ffc <_free_r+0x15c>
   10f44:	1006d27a 	srli	r3,r2,9
   10f48:	01000104 	movi	r4,4
   10f4c:	20c06636 	bltu	r4,r3,110e8 <_free_r+0x248>
   10f50:	1008d1ba 	srli	r4,r2,6
   10f54:	21000e04 	addi	r4,r4,56
   10f58:	210f883a 	add	r7,r4,r4
   10f5c:	39cf883a 	add	r7,r7,r7
   10f60:	39cf883a 	add	r7,r7,r7
   10f64:	29cf883a 	add	r7,r5,r7
   10f68:	38c00217 	ldw	r3,8(r7)
   10f6c:	01400074 	movhi	r5,1
   10f70:	295d7d04 	addi	r5,r5,30196
   10f74:	19c06126 	beq	r3,r7,110fc <_free_r+0x25c>
   10f78:	013fff04 	movi	r4,-4
   10f7c:	19400117 	ldw	r5,4(r3)
   10f80:	290a703a 	and	r5,r5,r4
   10f84:	1140022e 	bgeu	r2,r5,10f90 <_free_r+0xf0>
   10f88:	18c00217 	ldw	r3,8(r3)
   10f8c:	38fffb1e 	bne	r7,r3,10f7c <_free_r+0xdc>
   10f90:	18800317 	ldw	r2,12(r3)
   10f94:	30800315 	stw	r2,12(r6)
   10f98:	30c00215 	stw	r3,8(r6)
   10f9c:	11800215 	stw	r6,8(r2)
   10fa0:	19800315 	stw	r6,12(r3)
   10fa4:	8809883a 	mov	r4,r17
   10fa8:	dfc00217 	ldw	ra,8(sp)
   10fac:	dc400117 	ldw	r17,4(sp)
   10fb0:	dc000017 	ldw	r16,0(sp)
   10fb4:	dec00304 	addi	sp,sp,12
   10fb8:	001440c1 	jmpi	1440c <__malloc_unlock>
   10fbc:	813ffe17 	ldw	r4,-8(r16)
   10fc0:	2a400204 	addi	r9,r5,8
   10fc4:	310dc83a 	sub	r6,r6,r4
   10fc8:	32000217 	ldw	r8,8(r6)
   10fcc:	1105883a 	add	r2,r2,r4
   10fd0:	42404326 	beq	r8,r9,110e0 <_free_r+0x240>
   10fd4:	32400317 	ldw	r9,12(r6)
   10fd8:	0009883a 	mov	r4,zero
   10fdc:	42400315 	stw	r9,12(r8)
   10fe0:	4a000215 	stw	r8,8(r9)
   10fe4:	003fc606 	br	10f00 <_free_r+0x60>
   10fe8:	dfc00217 	ldw	ra,8(sp)
   10fec:	dc400117 	ldw	r17,4(sp)
   10ff0:	dc000017 	ldw	r16,0(sp)
   10ff4:	dec00304 	addi	sp,sp,12
   10ff8:	f800283a 	ret
   10ffc:	1004d0fa 	srli	r2,r2,3
   11000:	02000044 	movi	r8,1
   11004:	29c00117 	ldw	r7,4(r5)
   11008:	1087883a 	add	r3,r2,r2
   1100c:	18c7883a 	add	r3,r3,r3
   11010:	1005d0ba 	srai	r2,r2,2
   11014:	18c7883a 	add	r3,r3,r3
   11018:	28c7883a 	add	r3,r5,r3
   1101c:	19000217 	ldw	r4,8(r3)
   11020:	4084983a 	sll	r2,r8,r2
   11024:	30c00315 	stw	r3,12(r6)
   11028:	31000215 	stw	r4,8(r6)
   1102c:	11c4b03a 	or	r2,r2,r7
   11030:	21800315 	stw	r6,12(r4)
   11034:	8809883a 	mov	r4,r17
   11038:	28800115 	stw	r2,4(r5)
   1103c:	19800215 	stw	r6,8(r3)
   11040:	dfc00217 	ldw	ra,8(sp)
   11044:	dc400117 	ldw	r17,4(sp)
   11048:	dc000017 	ldw	r16,0(sp)
   1104c:	dec00304 	addi	sp,sp,12
   11050:	001440c1 	jmpi	1440c <__malloc_unlock>
   11054:	02000074 	movhi	r8,1
   11058:	421d7f04 	addi	r8,r8,30204
   1105c:	3a3faf1e 	bne	r7,r8,10f1c <_free_r+0x7c>
   11060:	29800515 	stw	r6,20(r5)
   11064:	29800415 	stw	r6,16(r5)
   11068:	11000054 	ori	r4,r2,1
   1106c:	3087883a 	add	r3,r6,r2
   11070:	31c00315 	stw	r7,12(r6)
   11074:	31c00215 	stw	r7,8(r6)
   11078:	31000115 	stw	r4,4(r6)
   1107c:	18800015 	stw	r2,0(r3)
   11080:	003fc806 	br	10fa4 <_free_r+0x104>
   11084:	4200004c 	andi	r8,r8,1
   11088:	3885883a 	add	r2,r7,r2
   1108c:	4000071e 	bne	r8,zero,110ac <_free_r+0x20c>
   11090:	81fffe17 	ldw	r7,-8(r16)
   11094:	31cdc83a 	sub	r6,r6,r7
   11098:	30c00317 	ldw	r3,12(r6)
   1109c:	31000217 	ldw	r4,8(r6)
   110a0:	11c5883a 	add	r2,r2,r7
   110a4:	20c00315 	stw	r3,12(r4)
   110a8:	19000215 	stw	r4,8(r3)
   110ac:	00c000b4 	movhi	r3,2
   110b0:	18e30e04 	addi	r3,r3,-29640
   110b4:	18c00017 	ldw	r3,0(r3)
   110b8:	11000054 	ori	r4,r2,1
   110bc:	31000115 	stw	r4,4(r6)
   110c0:	29800215 	stw	r6,8(r5)
   110c4:	10ffb736 	bltu	r2,r3,10fa4 <_free_r+0x104>
   110c8:	008000b4 	movhi	r2,2
   110cc:	10a9dc04 	addi	r2,r2,-22672
   110d0:	11400017 	ldw	r5,0(r2)
   110d4:	8809883a 	mov	r4,r17
   110d8:	0010d640 	call	10d64 <_malloc_trim_r>
   110dc:	003fb106 	br	10fa4 <_free_r+0x104>
   110e0:	01000044 	movi	r4,1
   110e4:	003f8606 	br	10f00 <_free_r+0x60>
   110e8:	01000504 	movi	r4,20
   110ec:	20c00b36 	bltu	r4,r3,1111c <_free_r+0x27c>
   110f0:	190016c4 	addi	r4,r3,91
   110f4:	210f883a 	add	r7,r4,r4
   110f8:	003f9806 	br	10f5c <_free_r+0xbc>
   110fc:	2009d0ba 	srai	r4,r4,2
   11100:	00800044 	movi	r2,1
   11104:	29c00117 	ldw	r7,4(r5)
   11108:	1108983a 	sll	r4,r2,r4
   1110c:	1805883a 	mov	r2,r3
   11110:	21c8b03a 	or	r4,r4,r7
   11114:	29000115 	stw	r4,4(r5)
   11118:	003f9e06 	br	10f94 <_free_r+0xf4>
   1111c:	01001504 	movi	r4,84
   11120:	20c00436 	bltu	r4,r3,11134 <_free_r+0x294>
   11124:	1008d33a 	srli	r4,r2,12
   11128:	21001b84 	addi	r4,r4,110
   1112c:	210f883a 	add	r7,r4,r4
   11130:	003f8a06 	br	10f5c <_free_r+0xbc>
   11134:	01005504 	movi	r4,340
   11138:	20c00436 	bltu	r4,r3,1114c <_free_r+0x2ac>
   1113c:	1008d3fa 	srli	r4,r2,15
   11140:	21001dc4 	addi	r4,r4,119
   11144:	210f883a 	add	r7,r4,r4
   11148:	003f8406 	br	10f5c <_free_r+0xbc>
   1114c:	01015504 	movi	r4,1364
   11150:	20c00436 	bltu	r4,r3,11164 <_free_r+0x2c4>
   11154:	1008d4ba 	srli	r4,r2,18
   11158:	21001f04 	addi	r4,r4,124
   1115c:	210f883a 	add	r7,r4,r4
   11160:	003f7e06 	br	10f5c <_free_r+0xbc>
   11164:	01c03f04 	movi	r7,252
   11168:	01001f84 	movi	r4,126
   1116c:	003f7b06 	br	10f5c <_free_r+0xbc>

00011170 <_fseek_r>:
   11170:	deffe804 	addi	sp,sp,-96
   11174:	dd001315 	stw	r20,76(sp)
   11178:	dc801115 	stw	r18,68(sp)
   1117c:	dc401015 	stw	r17,64(sp)
   11180:	dc000f15 	stw	r16,60(sp)
   11184:	dfc01715 	stw	ra,92(sp)
   11188:	ddc01615 	stw	r23,88(sp)
   1118c:	dd801515 	stw	r22,84(sp)
   11190:	dd401415 	stw	r21,80(sp)
   11194:	dcc01215 	stw	r19,72(sp)
   11198:	2023883a 	mov	r17,r4
   1119c:	2821883a 	mov	r16,r5
   111a0:	3029883a 	mov	r20,r6
   111a4:	3825883a 	mov	r18,r7
   111a8:	20000226 	beq	r4,zero,111b4 <_fseek_r+0x44>
   111ac:	20800e17 	ldw	r2,56(r4)
   111b0:	10006226 	beq	r2,zero,1133c <_fseek_r+0x1cc>
   111b4:	80c0030b 	ldhu	r3,12(r16)
   111b8:	00804204 	movi	r2,264
   111bc:	18c0420c 	andi	r3,r3,264
   111c0:	18806326 	beq	r3,r2,11350 <_fseek_r+0x1e0>
   111c4:	84c00a17 	ldw	r19,40(r16)
   111c8:	98010226 	beq	r19,zero,115d4 <_fseek_r+0x464>
   111cc:	00800044 	movi	r2,1
   111d0:	90803d26 	beq	r18,r2,112c8 <_fseek_r+0x158>
   111d4:	00800084 	movi	r2,2
   111d8:	90800126 	beq	r18,r2,111e0 <_fseek_r+0x70>
   111dc:	90002c1e 	bne	r18,zero,11290 <_fseek_r+0x120>
   111e0:	80800417 	ldw	r2,16(r16)
   111e4:	002d883a 	mov	r22,zero
   111e8:	002b883a 	mov	r21,zero
   111ec:	1000e526 	beq	r2,zero,11584 <_fseek_r+0x414>
   111f0:	80c0030b 	ldhu	r3,12(r16)
   111f4:	1882068c 	andi	r2,r3,2074
   111f8:	1809883a 	mov	r4,r3
   111fc:	10000a1e 	bne	r2,zero,11228 <_fseek_r+0xb8>
   11200:	1881000c 	andi	r2,r3,1024
   11204:	10bfffcc 	andi	r2,r2,65535
   11208:	10a0001c 	xori	r2,r2,32768
   1120c:	10a00004 	addi	r2,r2,-32768
   11210:	1000631e 	bne	r2,zero,113a0 <_fseek_r+0x230>
   11214:	00800074 	movhi	r2,1
   11218:	1089f404 	addi	r2,r2,10192
   1121c:	98805026 	beq	r19,r2,11360 <_fseek_r+0x1f0>
   11220:	18c20014 	ori	r3,r3,2048
   11224:	80c0030d 	sth	r3,12(r16)
   11228:	8809883a 	mov	r4,r17
   1122c:	800b883a 	mov	r5,r16
   11230:	00106700 	call	10670 <_fflush_r>
   11234:	1000181e 	bne	r2,zero,11298 <_fseek_r+0x128>
   11238:	81400717 	ldw	r5,28(r16)
   1123c:	8809883a 	mov	r4,r17
   11240:	a00d883a 	mov	r6,r20
   11244:	900f883a 	mov	r7,r18
   11248:	983ee83a 	callr	r19
   1124c:	00ffffc4 	movi	r3,-1
   11250:	10c01126 	beq	r2,r3,11298 <_fseek_r+0x128>
   11254:	81400c17 	ldw	r5,48(r16)
   11258:	28000526 	beq	r5,zero,11270 <_fseek_r+0x100>
   1125c:	80801004 	addi	r2,r16,64
   11260:	28800226 	beq	r5,r2,1126c <_fseek_r+0xfc>
   11264:	8809883a 	mov	r4,r17
   11268:	0010ea00 	call	10ea0 <_free_r>
   1126c:	80000c15 	stw	zero,48(r16)
   11270:	8080030b 	ldhu	r2,12(r16)
   11274:	80c00417 	ldw	r3,16(r16)
   11278:	80000115 	stw	zero,4(r16)
   1127c:	10bdf7cc 	andi	r2,r2,63455
   11280:	8080030d 	sth	r2,12(r16)
   11284:	80c00015 	stw	r3,0(r16)
   11288:	0005883a 	mov	r2,zero
   1128c:	00000306 	br	1129c <_fseek_r+0x12c>
   11290:	00800584 	movi	r2,22
   11294:	88800015 	stw	r2,0(r17)
   11298:	00bfffc4 	movi	r2,-1
   1129c:	dfc01717 	ldw	ra,92(sp)
   112a0:	ddc01617 	ldw	r23,88(sp)
   112a4:	dd801517 	ldw	r22,84(sp)
   112a8:	dd401417 	ldw	r21,80(sp)
   112ac:	dd001317 	ldw	r20,76(sp)
   112b0:	dcc01217 	ldw	r19,72(sp)
   112b4:	dc801117 	ldw	r18,68(sp)
   112b8:	dc401017 	ldw	r17,64(sp)
   112bc:	dc000f17 	ldw	r16,60(sp)
   112c0:	dec01804 	addi	sp,sp,96
   112c4:	f800283a 	ret
   112c8:	8809883a 	mov	r4,r17
   112cc:	800b883a 	mov	r5,r16
   112d0:	00106700 	call	10670 <_fflush_r>
   112d4:	8080030b 	ldhu	r2,12(r16)
   112d8:	10c4000c 	andi	r3,r2,4096
   112dc:	18ffffcc 	andi	r3,r3,65535
   112e0:	18e0001c 	xori	r3,r3,32768
   112e4:	18e00004 	addi	r3,r3,-32768
   112e8:	18007d26 	beq	r3,zero,114e0 <_fseek_r+0x370>
   112ec:	85401417 	ldw	r21,80(r16)
   112f0:	10c0010c 	andi	r3,r2,4
   112f4:	18ffffcc 	andi	r3,r3,65535
   112f8:	18e0001c 	xori	r3,r3,32768
   112fc:	18e00004 	addi	r3,r3,-32768
   11300:	18005f1e 	bne	r3,zero,11480 <_fseek_r+0x310>
   11304:	1080020c 	andi	r2,r2,8
   11308:	10bfffcc 	andi	r2,r2,65535
   1130c:	10a0001c 	xori	r2,r2,32768
   11310:	10a00004 	addi	r2,r2,-32768
   11314:	10007026 	beq	r2,zero,114d8 <_fseek_r+0x368>
   11318:	80c00017 	ldw	r3,0(r16)
   1131c:	80800417 	ldw	r2,16(r16)
   11320:	18000226 	beq	r3,zero,1132c <_fseek_r+0x1bc>
   11324:	1887c83a 	sub	r3,r3,r2
   11328:	a8eb883a 	add	r21,r21,r3
   1132c:	a569883a 	add	r20,r20,r21
   11330:	05800044 	movi	r22,1
   11334:	0025883a 	mov	r18,zero
   11338:	003fac06 	br	111ec <_fseek_r+0x7c>
   1133c:	001092c0 	call	1092c <__sinit>
   11340:	80c0030b 	ldhu	r3,12(r16)
   11344:	00804204 	movi	r2,264
   11348:	18c0420c 	andi	r3,r3,264
   1134c:	18bf9d1e 	bne	r3,r2,111c4 <_fseek_r+0x54>
   11350:	8809883a 	mov	r4,r17
   11354:	800b883a 	mov	r5,r16
   11358:	00106700 	call	10670 <_fflush_r>
   1135c:	003f9906 	br	111c4 <_fseek_r+0x54>
   11360:	8140038f 	ldh	r5,14(r16)
   11364:	283fae16 	blt	r5,zero,11220 <_fseek_r+0xb0>
   11368:	8809883a 	mov	r4,r17
   1136c:	d80d883a 	mov	r6,sp
   11370:	00116080 	call	11608 <_fstat_r>
   11374:	1000741e 	bne	r2,zero,11548 <_fseek_r+0x3d8>
   11378:	d8c00117 	ldw	r3,4(sp)
   1137c:	00a00014 	movui	r2,32768
   11380:	18fc000c 	andi	r3,r3,61440
   11384:	1880701e 	bne	r3,r2,11548 <_fseek_r+0x3d8>
   11388:	8100030b 	ldhu	r4,12(r16)
   1138c:	00810004 	movi	r2,1024
   11390:	80801315 	stw	r2,76(r16)
   11394:	2084b03a 	or	r2,r4,r2
   11398:	1009883a 	mov	r4,r2
   1139c:	8080030d 	sth	r2,12(r16)
   113a0:	90003f1e 	bne	r18,zero,114a0 <_fseek_r+0x330>
   113a4:	a02f883a 	mov	r23,r20
   113a8:	b000461e 	bne	r22,zero,114c4 <_fseek_r+0x354>
   113ac:	2084000c 	andi	r2,r4,4096
   113b0:	10bfffcc 	andi	r2,r2,65535
   113b4:	10a0001c 	xori	r2,r2,32768
   113b8:	10a00004 	addi	r2,r2,-32768
   113bc:	10007526 	beq	r2,zero,11594 <_fseek_r+0x424>
   113c0:	80801417 	ldw	r2,80(r16)
   113c4:	80c00117 	ldw	r3,4(r16)
   113c8:	81400c17 	ldw	r5,48(r16)
   113cc:	10ebc83a 	sub	r21,r2,r3
   113d0:	28007926 	beq	r5,zero,115b8 <_fseek_r+0x448>
   113d4:	81c00f17 	ldw	r7,60(r16)
   113d8:	a9ebc83a 	sub	r21,r21,r7
   113dc:	80800e17 	ldw	r2,56(r16)
   113e0:	81800417 	ldw	r6,16(r16)
   113e4:	a8eb883a 	add	r21,r21,r3
   113e8:	1185c83a 	sub	r2,r2,r6
   113ec:	a8abc83a 	sub	r21,r21,r2
   113f0:	3885883a 	add	r2,r7,r2
   113f4:	2208000c 	andi	r8,r4,8192
   113f8:	423fffcc 	andi	r8,r8,65535
   113fc:	4220001c 	xori	r8,r8,32768
   11400:	42200004 	addi	r8,r8,-32768
   11404:	4000031e 	bne	r8,zero,11414 <_fseek_r+0x2a4>
   11408:	bd400216 	blt	r23,r21,11414 <_fseek_r+0x2a4>
   1140c:	a887883a 	add	r3,r21,r2
   11410:	b8c03d36 	bltu	r23,r3,11508 <_fseek_r+0x398>
   11414:	85401317 	ldw	r21,76(r16)
   11418:	81400717 	ldw	r5,28(r16)
   1141c:	8809883a 	mov	r4,r17
   11420:	056bc83a 	sub	r21,zero,r21
   11424:	bd6a703a 	and	r21,r23,r21
   11428:	a80d883a 	mov	r6,r21
   1142c:	000f883a 	mov	r7,zero
   11430:	983ee83a 	callr	r19
   11434:	00ffffc4 	movi	r3,-1
   11438:	10ff7b26 	beq	r2,r3,11228 <_fseek_r+0xb8>
   1143c:	80800417 	ldw	r2,16(r16)
   11440:	81400c17 	ldw	r5,48(r16)
   11444:	80000115 	stw	zero,4(r16)
   11448:	80800015 	stw	r2,0(r16)
   1144c:	28000526 	beq	r5,zero,11464 <_fseek_r+0x2f4>
   11450:	80801004 	addi	r2,r16,64
   11454:	28800226 	beq	r5,r2,11460 <_fseek_r+0x2f0>
   11458:	8809883a 	mov	r4,r17
   1145c:	0010ea00 	call	10ea0 <_free_r>
   11460:	80000c15 	stw	zero,48(r16)
   11464:	8080030b 	ldhu	r2,12(r16)
   11468:	bd6fc83a 	sub	r23,r23,r21
   1146c:	10bff7cc 	andi	r2,r2,65503
   11470:	8080030d 	sth	r2,12(r16)
   11474:	b800361e 	bne	r23,zero,11550 <_fseek_r+0x3e0>
   11478:	0005883a 	mov	r2,zero
   1147c:	003f8706 	br	1129c <_fseek_r+0x12c>
   11480:	80c00117 	ldw	r3,4(r16)
   11484:	80800c17 	ldw	r2,48(r16)
   11488:	a8ebc83a 	sub	r21,r21,r3
   1148c:	10001226 	beq	r2,zero,114d8 <_fseek_r+0x368>
   11490:	80c00f17 	ldw	r3,60(r16)
   11494:	80800417 	ldw	r2,16(r16)
   11498:	a8ebc83a 	sub	r21,r21,r3
   1149c:	003fa306 	br	1132c <_fseek_r+0x1bc>
   114a0:	8140038f 	ldh	r5,14(r16)
   114a4:	8809883a 	mov	r4,r17
   114a8:	d80d883a 	mov	r6,sp
   114ac:	00116080 	call	11608 <_fstat_r>
   114b0:	103f5d1e 	bne	r2,zero,11228 <_fseek_r+0xb8>
   114b4:	ddc00417 	ldw	r23,16(sp)
   114b8:	8100030b 	ldhu	r4,12(r16)
   114bc:	a5ef883a 	add	r23,r20,r23
   114c0:	b03fba26 	beq	r22,zero,113ac <_fseek_r+0x23c>
   114c4:	81400c17 	ldw	r5,48(r16)
   114c8:	80c00117 	ldw	r3,4(r16)
   114cc:	28003a26 	beq	r5,zero,115b8 <_fseek_r+0x448>
   114d0:	81c00f17 	ldw	r7,60(r16)
   114d4:	003fc106 	br	113dc <_fseek_r+0x26c>
   114d8:	80800417 	ldw	r2,16(r16)
   114dc:	003f9306 	br	1132c <_fseek_r+0x1bc>
   114e0:	81400717 	ldw	r5,28(r16)
   114e4:	8809883a 	mov	r4,r17
   114e8:	000d883a 	mov	r6,zero
   114ec:	900f883a 	mov	r7,r18
   114f0:	983ee83a 	callr	r19
   114f4:	102b883a 	mov	r21,r2
   114f8:	00bfffc4 	movi	r2,-1
   114fc:	a8bf6626 	beq	r21,r2,11298 <_fseek_r+0x128>
   11500:	8080030b 	ldhu	r2,12(r16)
   11504:	003f7a06 	br	112f0 <_fseek_r+0x180>
   11508:	bd6bc83a 	sub	r21,r23,r21
   1150c:	354d883a 	add	r6,r6,r21
   11510:	1545c83a 	sub	r2,r2,r21
   11514:	81800015 	stw	r6,0(r16)
   11518:	80800115 	stw	r2,4(r16)
   1151c:	28000626 	beq	r5,zero,11538 <_fseek_r+0x3c8>
   11520:	80801004 	addi	r2,r16,64
   11524:	28800326 	beq	r5,r2,11534 <_fseek_r+0x3c4>
   11528:	8809883a 	mov	r4,r17
   1152c:	0010ea00 	call	10ea0 <_free_r>
   11530:	8100030b 	ldhu	r4,12(r16)
   11534:	80000c15 	stw	zero,48(r16)
   11538:	213ff7cc 	andi	r4,r4,65503
   1153c:	8100030d 	sth	r4,12(r16)
   11540:	0005883a 	mov	r2,zero
   11544:	003f5506 	br	1129c <_fseek_r+0x12c>
   11548:	80c0030b 	ldhu	r3,12(r16)
   1154c:	003f3406 	br	11220 <_fseek_r+0xb0>
   11550:	8809883a 	mov	r4,r17
   11554:	800b883a 	mov	r5,r16
   11558:	00124a40 	call	124a4 <__srefill_r>
   1155c:	103f321e 	bne	r2,zero,11228 <_fseek_r+0xb8>
   11560:	80800117 	ldw	r2,4(r16)
   11564:	15ff3036 	bltu	r2,r23,11228 <_fseek_r+0xb8>
   11568:	80c00017 	ldw	r3,0(r16)
   1156c:	15c5c83a 	sub	r2,r2,r23
   11570:	80800115 	stw	r2,4(r16)
   11574:	1def883a 	add	r23,r3,r23
   11578:	85c00015 	stw	r23,0(r16)
   1157c:	0005883a 	mov	r2,zero
   11580:	003f4606 	br	1129c <_fseek_r+0x12c>
   11584:	8809883a 	mov	r4,r17
   11588:	800b883a 	mov	r5,r16
   1158c:	00117d00 	call	117d0 <__smakebuf_r>
   11590:	003f1706 	br	111f0 <_fseek_r+0x80>
   11594:	81400717 	ldw	r5,28(r16)
   11598:	8809883a 	mov	r4,r17
   1159c:	000d883a 	mov	r6,zero
   115a0:	01c00044 	movi	r7,1
   115a4:	983ee83a 	callr	r19
   115a8:	00ffffc4 	movi	r3,-1
   115ac:	10ff1e26 	beq	r2,r3,11228 <_fseek_r+0xb8>
   115b0:	8100030b 	ldhu	r4,12(r16)
   115b4:	003f8306 	br	113c4 <_fseek_r+0x254>
   115b8:	80800017 	ldw	r2,0(r16)
   115bc:	81800417 	ldw	r6,16(r16)
   115c0:	000b883a 	mov	r5,zero
   115c4:	1185c83a 	sub	r2,r2,r6
   115c8:	a8abc83a 	sub	r21,r21,r2
   115cc:	1885883a 	add	r2,r3,r2
   115d0:	003f8806 	br	113f4 <_fseek_r+0x284>
   115d4:	00800744 	movi	r2,29
   115d8:	88800015 	stw	r2,0(r17)
   115dc:	00bfffc4 	movi	r2,-1
   115e0:	003f2e06 	br	1129c <_fseek_r+0x12c>

000115e4 <fseek>:
   115e4:	008000b4 	movhi	r2,2
   115e8:	10a30c04 	addi	r2,r2,-29648
   115ec:	2007883a 	mov	r3,r4
   115f0:	11000017 	ldw	r4,0(r2)
   115f4:	2805883a 	mov	r2,r5
   115f8:	300f883a 	mov	r7,r6
   115fc:	180b883a 	mov	r5,r3
   11600:	100d883a 	mov	r6,r2
   11604:	00111701 	jmpi	11170 <_fseek_r>

00011608 <_fstat_r>:
   11608:	defffd04 	addi	sp,sp,-12
   1160c:	dc400115 	stw	r17,4(sp)
   11610:	dc000015 	stw	r16,0(sp)
   11614:	2023883a 	mov	r17,r4
   11618:	040000b4 	movhi	r16,2
   1161c:	8429d904 	addi	r16,r16,-22684
   11620:	2809883a 	mov	r4,r5
   11624:	300b883a 	mov	r5,r6
   11628:	dfc00215 	stw	ra,8(sp)
   1162c:	80000015 	stw	zero,0(r16)
   11630:	0013fc00 	call	13fc0 <fstat>
   11634:	00ffffc4 	movi	r3,-1
   11638:	10c00526 	beq	r2,r3,11650 <_fstat_r+0x48>
   1163c:	dfc00217 	ldw	ra,8(sp)
   11640:	dc400117 	ldw	r17,4(sp)
   11644:	dc000017 	ldw	r16,0(sp)
   11648:	dec00304 	addi	sp,sp,12
   1164c:	f800283a 	ret
   11650:	80c00017 	ldw	r3,0(r16)
   11654:	183ff926 	beq	r3,zero,1163c <_fstat_r+0x34>
   11658:	88c00015 	stw	r3,0(r17)
   1165c:	dfc00217 	ldw	ra,8(sp)
   11660:	dc400117 	ldw	r17,4(sp)
   11664:	dc000017 	ldw	r16,0(sp)
   11668:	dec00304 	addi	sp,sp,12
   1166c:	f800283a 	ret

00011670 <_fwalk>:
   11670:	defff904 	addi	sp,sp,-28
   11674:	dcc00315 	stw	r19,12(sp)
   11678:	24c0b804 	addi	r19,r4,736
   1167c:	dd400515 	stw	r21,20(sp)
   11680:	dd000415 	stw	r20,16(sp)
   11684:	dfc00615 	stw	ra,24(sp)
   11688:	dc800215 	stw	r18,8(sp)
   1168c:	dc400115 	stw	r17,4(sp)
   11690:	dc000015 	stw	r16,0(sp)
   11694:	282b883a 	mov	r21,r5
   11698:	0029883a 	mov	r20,zero
   1169c:	0010b340 	call	10b34 <__sfp_lock_acquire>
   116a0:	98001226 	beq	r19,zero,116ec <_fwalk+0x7c>
   116a4:	04bfffc4 	movi	r18,-1
   116a8:	9c400117 	ldw	r17,4(r19)
   116ac:	9c000217 	ldw	r16,8(r19)
   116b0:	8c7fffc4 	addi	r17,r17,-1
   116b4:	88000b16 	blt	r17,zero,116e4 <_fwalk+0x74>
   116b8:	84000304 	addi	r16,r16,12
   116bc:	80c0000f 	ldh	r3,0(r16)
   116c0:	8c7fffc4 	addi	r17,r17,-1
   116c4:	813ffd04 	addi	r4,r16,-12
   116c8:	18000426 	beq	r3,zero,116dc <_fwalk+0x6c>
   116cc:	80c0008f 	ldh	r3,2(r16)
   116d0:	1c800226 	beq	r3,r18,116dc <_fwalk+0x6c>
   116d4:	a83ee83a 	callr	r21
   116d8:	a0a8b03a 	or	r20,r20,r2
   116dc:	84001704 	addi	r16,r16,92
   116e0:	8cbff61e 	bne	r17,r18,116bc <_fwalk+0x4c>
   116e4:	9cc00017 	ldw	r19,0(r19)
   116e8:	983fef1e 	bne	r19,zero,116a8 <_fwalk+0x38>
   116ec:	0010b380 	call	10b38 <__sfp_lock_release>
   116f0:	a005883a 	mov	r2,r20
   116f4:	dfc00617 	ldw	ra,24(sp)
   116f8:	dd400517 	ldw	r21,20(sp)
   116fc:	dd000417 	ldw	r20,16(sp)
   11700:	dcc00317 	ldw	r19,12(sp)
   11704:	dc800217 	ldw	r18,8(sp)
   11708:	dc400117 	ldw	r17,4(sp)
   1170c:	dc000017 	ldw	r16,0(sp)
   11710:	dec00704 	addi	sp,sp,28
   11714:	f800283a 	ret

00011718 <_fwalk_reent>:
   11718:	defff804 	addi	sp,sp,-32
   1171c:	dcc00315 	stw	r19,12(sp)
   11720:	24c0b804 	addi	r19,r4,736
   11724:	dd800615 	stw	r22,24(sp)
   11728:	dd400515 	stw	r21,20(sp)
   1172c:	dd000415 	stw	r20,16(sp)
   11730:	dfc00715 	stw	ra,28(sp)
   11734:	dc800215 	stw	r18,8(sp)
   11738:	dc400115 	stw	r17,4(sp)
   1173c:	dc000015 	stw	r16,0(sp)
   11740:	2029883a 	mov	r20,r4
   11744:	282b883a 	mov	r21,r5
   11748:	002d883a 	mov	r22,zero
   1174c:	0010b340 	call	10b34 <__sfp_lock_acquire>
   11750:	98001326 	beq	r19,zero,117a0 <_fwalk_reent+0x88>
   11754:	04bfffc4 	movi	r18,-1
   11758:	9c400117 	ldw	r17,4(r19)
   1175c:	9c000217 	ldw	r16,8(r19)
   11760:	8c7fffc4 	addi	r17,r17,-1
   11764:	88000c16 	blt	r17,zero,11798 <_fwalk_reent+0x80>
   11768:	84000304 	addi	r16,r16,12
   1176c:	80c0000f 	ldh	r3,0(r16)
   11770:	8c7fffc4 	addi	r17,r17,-1
   11774:	817ffd04 	addi	r5,r16,-12
   11778:	18000526 	beq	r3,zero,11790 <_fwalk_reent+0x78>
   1177c:	80c0008f 	ldh	r3,2(r16)
   11780:	a009883a 	mov	r4,r20
   11784:	1c800226 	beq	r3,r18,11790 <_fwalk_reent+0x78>
   11788:	a83ee83a 	callr	r21
   1178c:	b0acb03a 	or	r22,r22,r2
   11790:	84001704 	addi	r16,r16,92
   11794:	8cbff51e 	bne	r17,r18,1176c <_fwalk_reent+0x54>
   11798:	9cc00017 	ldw	r19,0(r19)
   1179c:	983fee1e 	bne	r19,zero,11758 <_fwalk_reent+0x40>
   117a0:	0010b380 	call	10b38 <__sfp_lock_release>
   117a4:	b005883a 	mov	r2,r22
   117a8:	dfc00717 	ldw	ra,28(sp)
   117ac:	dd800617 	ldw	r22,24(sp)
   117b0:	dd400517 	ldw	r21,20(sp)
   117b4:	dd000417 	ldw	r20,16(sp)
   117b8:	dcc00317 	ldw	r19,12(sp)
   117bc:	dc800217 	ldw	r18,8(sp)
   117c0:	dc400117 	ldw	r17,4(sp)
   117c4:	dc000017 	ldw	r16,0(sp)
   117c8:	dec00804 	addi	sp,sp,32
   117cc:	f800283a 	ret

000117d0 <__smakebuf_r>:
   117d0:	2880030b 	ldhu	r2,12(r5)
   117d4:	deffed04 	addi	sp,sp,-76
   117d8:	dc401015 	stw	r17,64(sp)
   117dc:	10c0008c 	andi	r3,r2,2
   117e0:	18ffffcc 	andi	r3,r3,65535
   117e4:	18e0001c 	xori	r3,r3,32768
   117e8:	dc000f15 	stw	r16,60(sp)
   117ec:	dfc01215 	stw	ra,72(sp)
   117f0:	dc801115 	stw	r18,68(sp)
   117f4:	18e00004 	addi	r3,r3,-32768
   117f8:	2821883a 	mov	r16,r5
   117fc:	2023883a 	mov	r17,r4
   11800:	1800381e 	bne	r3,zero,118e4 <__smakebuf_r+0x114>
   11804:	2940038f 	ldh	r5,14(r5)
   11808:	28002d16 	blt	r5,zero,118c0 <__smakebuf_r+0xf0>
   1180c:	d80d883a 	mov	r6,sp
   11810:	00116080 	call	11608 <_fstat_r>
   11814:	10002916 	blt	r2,zero,118bc <__smakebuf_r+0xec>
   11818:	d8800117 	ldw	r2,4(sp)
   1181c:	00e00014 	movui	r3,32768
   11820:	10bc000c 	andi	r2,r2,61440
   11824:	10c03c26 	beq	r2,r3,11918 <__smakebuf_r+0x148>
   11828:	80c0030b 	ldhu	r3,12(r16)
   1182c:	18c20014 	ori	r3,r3,2048
   11830:	80c0030d 	sth	r3,12(r16)
   11834:	00c80004 	movi	r3,8192
   11838:	10c00c1e 	bne	r2,r3,1186c <__smakebuf_r+0x9c>
   1183c:	8140038f 	ldh	r5,14(r16)
   11840:	8809883a 	mov	r4,r17
   11844:	00133040 	call	13304 <_isatty_r>
   11848:	10000826 	beq	r2,zero,1186c <__smakebuf_r+0x9c>
   1184c:	80c0030b 	ldhu	r3,12(r16)
   11850:	808010c4 	addi	r2,r16,67
   11854:	80800015 	stw	r2,0(r16)
   11858:	18c00054 	ori	r3,r3,1
   1185c:	80800415 	stw	r2,16(r16)
   11860:	00800044 	movi	r2,1
   11864:	80c0030d 	sth	r3,12(r16)
   11868:	80800515 	stw	r2,20(r16)
   1186c:	04810004 	movi	r18,1024
   11870:	8809883a 	mov	r4,r17
   11874:	900b883a 	mov	r5,r18
   11878:	00119780 	call	11978 <_malloc_r>
   1187c:	10003026 	beq	r2,zero,11940 <__smakebuf_r+0x170>
   11880:	80c0030b 	ldhu	r3,12(r16)
   11884:	01000074 	movhi	r4,1
   11888:	21022604 	addi	r4,r4,2200
   1188c:	89000f15 	stw	r4,60(r17)
   11890:	18c02014 	ori	r3,r3,128
   11894:	80c0030d 	sth	r3,12(r16)
   11898:	80800015 	stw	r2,0(r16)
   1189c:	80800415 	stw	r2,16(r16)
   118a0:	84800515 	stw	r18,20(r16)
   118a4:	dfc01217 	ldw	ra,72(sp)
   118a8:	dc801117 	ldw	r18,68(sp)
   118ac:	dc401017 	ldw	r17,64(sp)
   118b0:	dc000f17 	ldw	r16,60(sp)
   118b4:	dec01304 	addi	sp,sp,76
   118b8:	f800283a 	ret
   118bc:	8080030b 	ldhu	r2,12(r16)
   118c0:	10c0200c 	andi	r3,r2,128
   118c4:	18ffffcc 	andi	r3,r3,65535
   118c8:	18e0001c 	xori	r3,r3,32768
   118cc:	18e00004 	addi	r3,r3,-32768
   118d0:	18000f1e 	bne	r3,zero,11910 <__smakebuf_r+0x140>
   118d4:	04810004 	movi	r18,1024
   118d8:	10820014 	ori	r2,r2,2048
   118dc:	8080030d 	sth	r2,12(r16)
   118e0:	003fe306 	br	11870 <__smakebuf_r+0xa0>
   118e4:	288010c4 	addi	r2,r5,67
   118e8:	28800015 	stw	r2,0(r5)
   118ec:	28800415 	stw	r2,16(r5)
   118f0:	00800044 	movi	r2,1
   118f4:	28800515 	stw	r2,20(r5)
   118f8:	dfc01217 	ldw	ra,72(sp)
   118fc:	dc801117 	ldw	r18,68(sp)
   11900:	dc401017 	ldw	r17,64(sp)
   11904:	dc000f17 	ldw	r16,60(sp)
   11908:	dec01304 	addi	sp,sp,76
   1190c:	f800283a 	ret
   11910:	04801004 	movi	r18,64
   11914:	003ff006 	br	118d8 <__smakebuf_r+0x108>
   11918:	81000a17 	ldw	r4,40(r16)
   1191c:	00c00074 	movhi	r3,1
   11920:	18c9f404 	addi	r3,r3,10192
   11924:	20ffc01e 	bne	r4,r3,11828 <__smakebuf_r+0x58>
   11928:	8080030b 	ldhu	r2,12(r16)
   1192c:	00c10004 	movi	r3,1024
   11930:	80c01315 	stw	r3,76(r16)
   11934:	10c4b03a 	or	r2,r2,r3
   11938:	8080030d 	sth	r2,12(r16)
   1193c:	003fcb06 	br	1186c <__smakebuf_r+0x9c>
   11940:	8080030b 	ldhu	r2,12(r16)
   11944:	10c0800c 	andi	r3,r2,512
   11948:	18ffffcc 	andi	r3,r3,65535
   1194c:	18e0001c 	xori	r3,r3,32768
   11950:	18e00004 	addi	r3,r3,-32768
   11954:	183fd31e 	bne	r3,zero,118a4 <__smakebuf_r+0xd4>
   11958:	10800094 	ori	r2,r2,2
   1195c:	80c010c4 	addi	r3,r16,67
   11960:	8080030d 	sth	r2,12(r16)
   11964:	00800044 	movi	r2,1
   11968:	80c00015 	stw	r3,0(r16)
   1196c:	80c00415 	stw	r3,16(r16)
   11970:	80800515 	stw	r2,20(r16)
   11974:	003fcb06 	br	118a4 <__smakebuf_r+0xd4>

00011978 <_malloc_r>:
   11978:	defff604 	addi	sp,sp,-40
   1197c:	dc800215 	stw	r18,8(sp)
   11980:	dfc00915 	stw	ra,36(sp)
   11984:	df000815 	stw	fp,32(sp)
   11988:	ddc00715 	stw	r23,28(sp)
   1198c:	dd800615 	stw	r22,24(sp)
   11990:	dd400515 	stw	r21,20(sp)
   11994:	dd000415 	stw	r20,16(sp)
   11998:	dcc00315 	stw	r19,12(sp)
   1199c:	dc400115 	stw	r17,4(sp)
   119a0:	dc000015 	stw	r16,0(sp)
   119a4:	288002c4 	addi	r2,r5,11
   119a8:	00c00584 	movi	r3,22
   119ac:	2025883a 	mov	r18,r4
   119b0:	18802b2e 	bgeu	r3,r2,11a60 <_malloc_r+0xe8>
   119b4:	047ffe04 	movi	r17,-8
   119b8:	1462703a 	and	r17,r2,r17
   119bc:	88002a16 	blt	r17,zero,11a68 <_malloc_r+0xf0>
   119c0:	89402936 	bltu	r17,r5,11a68 <_malloc_r+0xf0>
   119c4:	9009883a 	mov	r4,r18
   119c8:	00143ec0 	call	143ec <__malloc_lock>
   119cc:	00807dc4 	movi	r2,503
   119d0:	14402936 	bltu	r2,r17,11a78 <_malloc_r+0x100>
   119d4:	8808d0fa 	srli	r4,r17,3
   119d8:	04c00074 	movhi	r19,1
   119dc:	9cdd7d04 	addi	r19,r19,30196
   119e0:	2105883a 	add	r2,r4,r4
   119e4:	1085883a 	add	r2,r2,r2
   119e8:	1085883a 	add	r2,r2,r2
   119ec:	9885883a 	add	r2,r19,r2
   119f0:	14000317 	ldw	r16,12(r2)
   119f4:	80815526 	beq	r16,r2,11f4c <_malloc_r+0x5d4>
   119f8:	81000117 	ldw	r4,4(r16)
   119fc:	00bfff04 	movi	r2,-4
   11a00:	80c00317 	ldw	r3,12(r16)
   11a04:	2084703a 	and	r2,r4,r2
   11a08:	8085883a 	add	r2,r16,r2
   11a0c:	11800117 	ldw	r6,4(r2)
   11a10:	81400217 	ldw	r5,8(r16)
   11a14:	9009883a 	mov	r4,r18
   11a18:	31800054 	ori	r6,r6,1
   11a1c:	11800115 	stw	r6,4(r2)
   11a20:	28c00315 	stw	r3,12(r5)
   11a24:	19400215 	stw	r5,8(r3)
   11a28:	001440c0 	call	1440c <__malloc_unlock>
   11a2c:	80800204 	addi	r2,r16,8
   11a30:	dfc00917 	ldw	ra,36(sp)
   11a34:	df000817 	ldw	fp,32(sp)
   11a38:	ddc00717 	ldw	r23,28(sp)
   11a3c:	dd800617 	ldw	r22,24(sp)
   11a40:	dd400517 	ldw	r21,20(sp)
   11a44:	dd000417 	ldw	r20,16(sp)
   11a48:	dcc00317 	ldw	r19,12(sp)
   11a4c:	dc800217 	ldw	r18,8(sp)
   11a50:	dc400117 	ldw	r17,4(sp)
   11a54:	dc000017 	ldw	r16,0(sp)
   11a58:	dec00a04 	addi	sp,sp,40
   11a5c:	f800283a 	ret
   11a60:	04400404 	movi	r17,16
   11a64:	897fd72e 	bgeu	r17,r5,119c4 <_malloc_r+0x4c>
   11a68:	00800304 	movi	r2,12
   11a6c:	90800015 	stw	r2,0(r18)
   11a70:	0005883a 	mov	r2,zero
   11a74:	003fee06 	br	11a30 <_malloc_r+0xb8>
   11a78:	8808d27a 	srli	r4,r17,9
   11a7c:	20007126 	beq	r4,zero,11c44 <_malloc_r+0x2cc>
   11a80:	00800104 	movi	r2,4
   11a84:	1100eb36 	bltu	r2,r4,11e34 <_malloc_r+0x4bc>
   11a88:	8808d1ba 	srli	r4,r17,6
   11a8c:	21000e04 	addi	r4,r4,56
   11a90:	210b883a 	add	r5,r4,r4
   11a94:	294b883a 	add	r5,r5,r5
   11a98:	294b883a 	add	r5,r5,r5
   11a9c:	04c00074 	movhi	r19,1
   11aa0:	9cdd7d04 	addi	r19,r19,30196
   11aa4:	994b883a 	add	r5,r19,r5
   11aa8:	2c000317 	ldw	r16,12(r5)
   11aac:	2c000e26 	beq	r5,r16,11ae8 <_malloc_r+0x170>
   11ab0:	80c00117 	ldw	r3,4(r16)
   11ab4:	01ffff04 	movi	r7,-4
   11ab8:	018003c4 	movi	r6,15
   11abc:	19c6703a 	and	r3,r3,r7
   11ac0:	1c45c83a 	sub	r2,r3,r17
   11ac4:	30800716 	blt	r6,r2,11ae4 <_malloc_r+0x16c>
   11ac8:	1000610e 	bge	r2,zero,11c50 <_malloc_r+0x2d8>
   11acc:	84000317 	ldw	r16,12(r16)
   11ad0:	2c000526 	beq	r5,r16,11ae8 <_malloc_r+0x170>
   11ad4:	80c00117 	ldw	r3,4(r16)
   11ad8:	19c6703a 	and	r3,r3,r7
   11adc:	1c45c83a 	sub	r2,r3,r17
   11ae0:	30bff90e 	bge	r6,r2,11ac8 <_malloc_r+0x150>
   11ae4:	213fffc4 	addi	r4,r4,-1
   11ae8:	21000044 	addi	r4,r4,1
   11aec:	9c000417 	ldw	r16,16(r19)
   11af0:	00c00074 	movhi	r3,1
   11af4:	18dd7d04 	addi	r3,r3,30196
   11af8:	1a400204 	addi	r9,r3,8
   11afc:	8240ff26 	beq	r16,r9,11efc <_malloc_r+0x584>
   11b00:	81400117 	ldw	r5,4(r16)
   11b04:	00bfff04 	movi	r2,-4
   11b08:	018003c4 	movi	r6,15
   11b0c:	2884703a 	and	r2,r5,r2
   11b10:	144bc83a 	sub	r5,r2,r17
   11b14:	3140ea16 	blt	r6,r5,11ec0 <_malloc_r+0x548>
   11b18:	1a400515 	stw	r9,20(r3)
   11b1c:	1a400415 	stw	r9,16(r3)
   11b20:	2800570e 	bge	r5,zero,11c80 <_malloc_r+0x308>
   11b24:	01407fc4 	movi	r5,511
   11b28:	2880ca36 	bltu	r5,r2,11e54 <_malloc_r+0x4dc>
   11b2c:	1004d0fa 	srli	r2,r2,3
   11b30:	02000044 	movi	r8,1
   11b34:	19c00117 	ldw	r7,4(r3)
   11b38:	108b883a 	add	r5,r2,r2
   11b3c:	294b883a 	add	r5,r5,r5
   11b40:	1005d0ba 	srai	r2,r2,2
   11b44:	294b883a 	add	r5,r5,r5
   11b48:	28cb883a 	add	r5,r5,r3
   11b4c:	29800217 	ldw	r6,8(r5)
   11b50:	4084983a 	sll	r2,r8,r2
   11b54:	81400315 	stw	r5,12(r16)
   11b58:	81800215 	stw	r6,8(r16)
   11b5c:	11c4b03a 	or	r2,r2,r7
   11b60:	18800115 	stw	r2,4(r3)
   11b64:	2c000215 	stw	r16,8(r5)
   11b68:	34000315 	stw	r16,12(r6)
   11b6c:	200bd0ba 	srai	r5,r4,2
   11b70:	00c00044 	movi	r3,1
   11b74:	194a983a 	sll	r5,r3,r5
   11b78:	11404936 	bltu	r2,r5,11ca0 <_malloc_r+0x328>
   11b7c:	1146703a 	and	r3,r2,r5
   11b80:	18000a1e 	bne	r3,zero,11bac <_malloc_r+0x234>
   11b84:	00ffff04 	movi	r3,-4
   11b88:	294b883a 	add	r5,r5,r5
   11b8c:	20c8703a 	and	r4,r4,r3
   11b90:	1146703a 	and	r3,r2,r5
   11b94:	21000104 	addi	r4,r4,4
   11b98:	1800041e 	bne	r3,zero,11bac <_malloc_r+0x234>
   11b9c:	294b883a 	add	r5,r5,r5
   11ba0:	1146703a 	and	r3,r2,r5
   11ba4:	21000104 	addi	r4,r4,4
   11ba8:	183ffc26 	beq	r3,zero,11b9c <_malloc_r+0x224>
   11bac:	023fff04 	movi	r8,-4
   11bb0:	01c003c4 	movi	r7,15
   11bb4:	2105883a 	add	r2,r4,r4
   11bb8:	1085883a 	add	r2,r2,r2
   11bbc:	1085883a 	add	r2,r2,r2
   11bc0:	9899883a 	add	r12,r19,r2
   11bc4:	62800304 	addi	r10,r12,12
   11bc8:	2017883a 	mov	r11,r4
   11bcc:	54000017 	ldw	r16,0(r10)
   11bd0:	51bffd04 	addi	r6,r10,-12
   11bd4:	8180041e 	bne	r16,r6,11be8 <_malloc_r+0x270>
   11bd8:	0000ca06 	br	11f04 <_malloc_r+0x58c>
   11bdc:	10001c0e 	bge	r2,zero,11c50 <_malloc_r+0x2d8>
   11be0:	84000317 	ldw	r16,12(r16)
   11be4:	8180c726 	beq	r16,r6,11f04 <_malloc_r+0x58c>
   11be8:	80c00117 	ldw	r3,4(r16)
   11bec:	1a06703a 	and	r3,r3,r8
   11bf0:	1c45c83a 	sub	r2,r3,r17
   11bf4:	38bff90e 	bge	r7,r2,11bdc <_malloc_r+0x264>
   11bf8:	81000317 	ldw	r4,12(r16)
   11bfc:	81400217 	ldw	r5,8(r16)
   11c00:	8447883a 	add	r3,r16,r17
   11c04:	8c400054 	ori	r17,r17,1
   11c08:	29000315 	stw	r4,12(r5)
   11c0c:	21400215 	stw	r5,8(r4)
   11c10:	84400115 	stw	r17,4(r16)
   11c14:	1889883a 	add	r4,r3,r2
   11c18:	11400054 	ori	r5,r2,1
   11c1c:	98c00515 	stw	r3,20(r19)
   11c20:	98c00415 	stw	r3,16(r19)
   11c24:	20800015 	stw	r2,0(r4)
   11c28:	1a400315 	stw	r9,12(r3)
   11c2c:	1a400215 	stw	r9,8(r3)
   11c30:	19400115 	stw	r5,4(r3)
   11c34:	9009883a 	mov	r4,r18
   11c38:	001440c0 	call	1440c <__malloc_unlock>
   11c3c:	80800204 	addi	r2,r16,8
   11c40:	003f7b06 	br	11a30 <_malloc_r+0xb8>
   11c44:	8808d0fa 	srli	r4,r17,3
   11c48:	210b883a 	add	r5,r4,r4
   11c4c:	003f9106 	br	11a94 <_malloc_r+0x11c>
   11c50:	80c7883a 	add	r3,r16,r3
   11c54:	19400117 	ldw	r5,4(r3)
   11c58:	80800317 	ldw	r2,12(r16)
   11c5c:	81000217 	ldw	r4,8(r16)
   11c60:	29400054 	ori	r5,r5,1
   11c64:	19400115 	stw	r5,4(r3)
   11c68:	20800315 	stw	r2,12(r4)
   11c6c:	11000215 	stw	r4,8(r2)
   11c70:	9009883a 	mov	r4,r18
   11c74:	001440c0 	call	1440c <__malloc_unlock>
   11c78:	80800204 	addi	r2,r16,8
   11c7c:	003f6c06 	br	11a30 <_malloc_r+0xb8>
   11c80:	8085883a 	add	r2,r16,r2
   11c84:	10c00117 	ldw	r3,4(r2)
   11c88:	9009883a 	mov	r4,r18
   11c8c:	18c00054 	ori	r3,r3,1
   11c90:	10c00115 	stw	r3,4(r2)
   11c94:	001440c0 	call	1440c <__malloc_unlock>
   11c98:	80800204 	addi	r2,r16,8
   11c9c:	003f6406 	br	11a30 <_malloc_r+0xb8>
   11ca0:	9c000217 	ldw	r16,8(r19)
   11ca4:	00bfff04 	movi	r2,-4
   11ca8:	85400117 	ldw	r21,4(r16)
   11cac:	a8aa703a 	and	r21,r21,r2
   11cb0:	ac400336 	bltu	r21,r17,11cc0 <_malloc_r+0x348>
   11cb4:	ac45c83a 	sub	r2,r21,r17
   11cb8:	00c003c4 	movi	r3,15
   11cbc:	18805316 	blt	r3,r2,11e0c <_malloc_r+0x494>
   11cc0:	d5e6d117 	ldw	r23,-25788(gp)
   11cc4:	d0e00217 	ldw	r3,-32760(gp)
   11cc8:	00bfffc4 	movi	r2,-1
   11ccc:	8579883a 	add	fp,r16,r21
   11cd0:	8def883a 	add	r23,r17,r23
   11cd4:	1880d226 	beq	r3,r2,12020 <_malloc_r+0x6a8>
   11cd8:	bdc403c4 	addi	r23,r23,4111
   11cdc:	00bc0004 	movi	r2,-4096
   11ce0:	b8ae703a 	and	r23,r23,r2
   11ce4:	9009883a 	mov	r4,r18
   11ce8:	b80b883a 	mov	r5,r23
   11cec:	00126900 	call	12690 <_sbrk_r>
   11cf0:	1029883a 	mov	r20,r2
   11cf4:	00bfffc4 	movi	r2,-1
   11cf8:	a080d126 	beq	r20,r2,12040 <_malloc_r+0x6c8>
   11cfc:	a7009f36 	bltu	r20,fp,11f7c <_malloc_r+0x604>
   11d00:	058000b4 	movhi	r22,2
   11d04:	b5a9e304 	addi	r22,r22,-22644
   11d08:	b0800017 	ldw	r2,0(r22)
   11d0c:	b885883a 	add	r2,r23,r2
   11d10:	b0800015 	stw	r2,0(r22)
   11d14:	e500cf26 	beq	fp,r20,12054 <_malloc_r+0x6dc>
   11d18:	d1200217 	ldw	r4,-32760(gp)
   11d1c:	00ffffc4 	movi	r3,-1
   11d20:	20c0e026 	beq	r4,r3,120a4 <_malloc_r+0x72c>
   11d24:	a739c83a 	sub	fp,r20,fp
   11d28:	1705883a 	add	r2,r2,fp
   11d2c:	b0800015 	stw	r2,0(r22)
   11d30:	a08001cc 	andi	r2,r20,7
   11d34:	1000a526 	beq	r2,zero,11fcc <_malloc_r+0x654>
   11d38:	a0a9c83a 	sub	r20,r20,r2
   11d3c:	00c40204 	movi	r3,4104
   11d40:	a5000204 	addi	r20,r20,8
   11d44:	1885c83a 	sub	r2,r3,r2
   11d48:	a5c7883a 	add	r3,r20,r23
   11d4c:	18c3ffcc 	andi	r3,r3,4095
   11d50:	10efc83a 	sub	r23,r2,r3
   11d54:	9009883a 	mov	r4,r18
   11d58:	b80b883a 	mov	r5,r23
   11d5c:	00126900 	call	12690 <_sbrk_r>
   11d60:	00ffffc4 	movi	r3,-1
   11d64:	10c0cc26 	beq	r2,r3,12098 <_malloc_r+0x720>
   11d68:	1505c83a 	sub	r2,r2,r20
   11d6c:	b887883a 	add	r3,r23,r2
   11d70:	18c00054 	ori	r3,r3,1
   11d74:	b0800017 	ldw	r2,0(r22)
   11d78:	9d000215 	stw	r20,8(r19)
   11d7c:	a0c00115 	stw	r3,4(r20)
   11d80:	b885883a 	add	r2,r23,r2
   11d84:	b0800015 	stw	r2,0(r22)
   11d88:	84c00e26 	beq	r16,r19,11dc4 <_malloc_r+0x44c>
   11d8c:	00c003c4 	movi	r3,15
   11d90:	1d40902e 	bgeu	r3,r21,11fd4 <_malloc_r+0x65c>
   11d94:	ad7ffd04 	addi	r21,r21,-12
   11d98:	013ffe04 	movi	r4,-8
   11d9c:	a908703a 	and	r4,r21,r4
   11da0:	810b883a 	add	r5,r16,r4
   11da4:	01800144 	movi	r6,5
   11da8:	29800115 	stw	r6,4(r5)
   11dac:	29800215 	stw	r6,8(r5)
   11db0:	81400117 	ldw	r5,4(r16)
   11db4:	2940004c 	andi	r5,r5,1
   11db8:	214ab03a 	or	r5,r4,r5
   11dbc:	81400115 	stw	r5,4(r16)
   11dc0:	1900ae36 	bltu	r3,r4,1207c <_malloc_r+0x704>
   11dc4:	d0e6d017 	ldw	r3,-25792(gp)
   11dc8:	1880012e 	bgeu	r3,r2,11dd0 <_malloc_r+0x458>
   11dcc:	d0a6d015 	stw	r2,-25792(gp)
   11dd0:	d0e6cf17 	ldw	r3,-25796(gp)
   11dd4:	9c000217 	ldw	r16,8(r19)
   11dd8:	1880012e 	bgeu	r3,r2,11de0 <_malloc_r+0x468>
   11ddc:	d0a6cf15 	stw	r2,-25796(gp)
   11de0:	80c00117 	ldw	r3,4(r16)
   11de4:	00bfff04 	movi	r2,-4
   11de8:	1886703a 	and	r3,r3,r2
   11dec:	1c45c83a 	sub	r2,r3,r17
   11df0:	1c400236 	bltu	r3,r17,11dfc <_malloc_r+0x484>
   11df4:	00c003c4 	movi	r3,15
   11df8:	18800416 	blt	r3,r2,11e0c <_malloc_r+0x494>
   11dfc:	9009883a 	mov	r4,r18
   11e00:	001440c0 	call	1440c <__malloc_unlock>
   11e04:	0005883a 	mov	r2,zero
   11e08:	003f0906 	br	11a30 <_malloc_r+0xb8>
   11e0c:	88c00054 	ori	r3,r17,1
   11e10:	10800054 	ori	r2,r2,1
   11e14:	80c00115 	stw	r3,4(r16)
   11e18:	8463883a 	add	r17,r16,r17
   11e1c:	88800115 	stw	r2,4(r17)
   11e20:	9009883a 	mov	r4,r18
   11e24:	9c400215 	stw	r17,8(r19)
   11e28:	001440c0 	call	1440c <__malloc_unlock>
   11e2c:	80800204 	addi	r2,r16,8
   11e30:	003eff06 	br	11a30 <_malloc_r+0xb8>
   11e34:	00800504 	movi	r2,20
   11e38:	1100492e 	bgeu	r2,r4,11f60 <_malloc_r+0x5e8>
   11e3c:	00801504 	movi	r2,84
   11e40:	11005c36 	bltu	r2,r4,11fb4 <_malloc_r+0x63c>
   11e44:	8808d33a 	srli	r4,r17,12
   11e48:	21001b84 	addi	r4,r4,110
   11e4c:	210b883a 	add	r5,r4,r4
   11e50:	003f1006 	br	11a94 <_malloc_r+0x11c>
   11e54:	1006d27a 	srli	r3,r2,9
   11e58:	01400104 	movi	r5,4
   11e5c:	28c0432e 	bgeu	r5,r3,11f6c <_malloc_r+0x5f4>
   11e60:	01400504 	movi	r5,20
   11e64:	28c07036 	bltu	r5,r3,12028 <_malloc_r+0x6b0>
   11e68:	194016c4 	addi	r5,r3,91
   11e6c:	294d883a 	add	r6,r5,r5
   11e70:	318d883a 	add	r6,r6,r6
   11e74:	318d883a 	add	r6,r6,r6
   11e78:	998d883a 	add	r6,r19,r6
   11e7c:	30c00217 	ldw	r3,8(r6)
   11e80:	01c00074 	movhi	r7,1
   11e84:	39dd7d04 	addi	r7,r7,30196
   11e88:	19805726 	beq	r3,r6,11fe8 <_malloc_r+0x670>
   11e8c:	01ffff04 	movi	r7,-4
   11e90:	19400117 	ldw	r5,4(r3)
   11e94:	29ca703a 	and	r5,r5,r7
   11e98:	1140022e 	bgeu	r2,r5,11ea4 <_malloc_r+0x52c>
   11e9c:	18c00217 	ldw	r3,8(r3)
   11ea0:	30fffb1e 	bne	r6,r3,11e90 <_malloc_r+0x518>
   11ea4:	19400317 	ldw	r5,12(r3)
   11ea8:	98800117 	ldw	r2,4(r19)
   11eac:	81400315 	stw	r5,12(r16)
   11eb0:	80c00215 	stw	r3,8(r16)
   11eb4:	2c000215 	stw	r16,8(r5)
   11eb8:	1c000315 	stw	r16,12(r3)
   11ebc:	003f2b06 	br	11b6c <_malloc_r+0x1f4>
   11ec0:	8445883a 	add	r2,r16,r17
   11ec4:	8c400054 	ori	r17,r17,1
   11ec8:	18800515 	stw	r2,20(r3)
   11ecc:	18800415 	stw	r2,16(r3)
   11ed0:	29000054 	ori	r4,r5,1
   11ed4:	1147883a 	add	r3,r2,r5
   11ed8:	84400115 	stw	r17,4(r16)
   11edc:	11000115 	stw	r4,4(r2)
   11ee0:	12400315 	stw	r9,12(r2)
   11ee4:	12400215 	stw	r9,8(r2)
   11ee8:	19400015 	stw	r5,0(r3)
   11eec:	9009883a 	mov	r4,r18
   11ef0:	001440c0 	call	1440c <__malloc_unlock>
   11ef4:	80800204 	addi	r2,r16,8
   11ef8:	003ecd06 	br	11a30 <_malloc_r+0xb8>
   11efc:	18800117 	ldw	r2,4(r3)
   11f00:	003f1a06 	br	11b6c <_malloc_r+0x1f4>
   11f04:	5ac00044 	addi	r11,r11,1
   11f08:	588000cc 	andi	r2,r11,3
   11f0c:	52800204 	addi	r10,r10,8
   11f10:	103f2e1e 	bne	r2,zero,11bcc <_malloc_r+0x254>
   11f14:	20c000cc 	andi	r3,r4,3
   11f18:	60bffe04 	addi	r2,r12,-8
   11f1c:	18006f26 	beq	r3,zero,120dc <_malloc_r+0x764>
   11f20:	63000017 	ldw	r12,0(r12)
   11f24:	213fffc4 	addi	r4,r4,-1
   11f28:	60bffa26 	beq	r12,r2,11f14 <_malloc_r+0x59c>
   11f2c:	98800117 	ldw	r2,4(r19)
   11f30:	294b883a 	add	r5,r5,r5
   11f34:	117f5a36 	bltu	r2,r5,11ca0 <_malloc_r+0x328>
   11f38:	283f5926 	beq	r5,zero,11ca0 <_malloc_r+0x328>
   11f3c:	1146703a 	and	r3,r2,r5
   11f40:	18001626 	beq	r3,zero,11f9c <_malloc_r+0x624>
   11f44:	5809883a 	mov	r4,r11
   11f48:	003f1a06 	br	11bb4 <_malloc_r+0x23c>
   11f4c:	80800204 	addi	r2,r16,8
   11f50:	84000517 	ldw	r16,20(r16)
   11f54:	143ea81e 	bne	r2,r16,119f8 <_malloc_r+0x80>
   11f58:	21000084 	addi	r4,r4,2
   11f5c:	003ee306 	br	11aec <_malloc_r+0x174>
   11f60:	210016c4 	addi	r4,r4,91
   11f64:	210b883a 	add	r5,r4,r4
   11f68:	003eca06 	br	11a94 <_malloc_r+0x11c>
   11f6c:	100ad1ba 	srli	r5,r2,6
   11f70:	29400e04 	addi	r5,r5,56
   11f74:	294d883a 	add	r6,r5,r5
   11f78:	003fbd06 	br	11e70 <_malloc_r+0x4f8>
   11f7c:	84ff6026 	beq	r16,r19,11d00 <_malloc_r+0x388>
   11f80:	00800074 	movhi	r2,1
   11f84:	109d7d04 	addi	r2,r2,30196
   11f88:	14000217 	ldw	r16,8(r2)
   11f8c:	00bfff04 	movi	r2,-4
   11f90:	80c00117 	ldw	r3,4(r16)
   11f94:	1886703a 	and	r3,r3,r2
   11f98:	003f9406 	br	11dec <_malloc_r+0x474>
   11f9c:	294b883a 	add	r5,r5,r5
   11fa0:	1146703a 	and	r3,r2,r5
   11fa4:	5ac00104 	addi	r11,r11,4
   11fa8:	183ffc26 	beq	r3,zero,11f9c <_malloc_r+0x624>
   11fac:	5809883a 	mov	r4,r11
   11fb0:	003f0006 	br	11bb4 <_malloc_r+0x23c>
   11fb4:	00805504 	movi	r2,340
   11fb8:	11001336 	bltu	r2,r4,12008 <_malloc_r+0x690>
   11fbc:	8808d3fa 	srli	r4,r17,15
   11fc0:	21001dc4 	addi	r4,r4,119
   11fc4:	210b883a 	add	r5,r4,r4
   11fc8:	003eb206 	br	11a94 <_malloc_r+0x11c>
   11fcc:	00840004 	movi	r2,4096
   11fd0:	003f5d06 	br	11d48 <_malloc_r+0x3d0>
   11fd4:	00800044 	movi	r2,1
   11fd8:	a0800115 	stw	r2,4(r20)
   11fdc:	a021883a 	mov	r16,r20
   11fe0:	0007883a 	mov	r3,zero
   11fe4:	003f8106 	br	11dec <_malloc_r+0x474>
   11fe8:	280bd0ba 	srai	r5,r5,2
   11fec:	01800044 	movi	r6,1
   11ff0:	38800117 	ldw	r2,4(r7)
   11ff4:	314c983a 	sll	r6,r6,r5
   11ff8:	180b883a 	mov	r5,r3
   11ffc:	3084b03a 	or	r2,r6,r2
   12000:	38800115 	stw	r2,4(r7)
   12004:	003fa906 	br	11eac <_malloc_r+0x534>
   12008:	00815504 	movi	r2,1364
   1200c:	11001836 	bltu	r2,r4,12070 <_malloc_r+0x6f8>
   12010:	8808d4ba 	srli	r4,r17,18
   12014:	21001f04 	addi	r4,r4,124
   12018:	210b883a 	add	r5,r4,r4
   1201c:	003e9d06 	br	11a94 <_malloc_r+0x11c>
   12020:	bdc00404 	addi	r23,r23,16
   12024:	003f2f06 	br	11ce4 <_malloc_r+0x36c>
   12028:	01401504 	movi	r5,84
   1202c:	28c01f36 	bltu	r5,r3,120ac <_malloc_r+0x734>
   12030:	100ad33a 	srli	r5,r2,12
   12034:	29401b84 	addi	r5,r5,110
   12038:	294d883a 	add	r6,r5,r5
   1203c:	003f8c06 	br	11e70 <_malloc_r+0x4f8>
   12040:	9c000217 	ldw	r16,8(r19)
   12044:	00bfff04 	movi	r2,-4
   12048:	80c00117 	ldw	r3,4(r16)
   1204c:	1886703a 	and	r3,r3,r2
   12050:	003f6606 	br	11dec <_malloc_r+0x474>
   12054:	e0c3ffcc 	andi	r3,fp,4095
   12058:	183f2f1e 	bne	r3,zero,11d18 <_malloc_r+0x3a0>
   1205c:	98c00217 	ldw	r3,8(r19)
   12060:	bd49883a 	add	r4,r23,r21
   12064:	21000054 	ori	r4,r4,1
   12068:	19000115 	stw	r4,4(r3)
   1206c:	003f5506 	br	11dc4 <_malloc_r+0x44c>
   12070:	01403f04 	movi	r5,252
   12074:	01001f84 	movi	r4,126
   12078:	003e8606 	br	11a94 <_malloc_r+0x11c>
   1207c:	9009883a 	mov	r4,r18
   12080:	81400204 	addi	r5,r16,8
   12084:	0010ea00 	call	10ea0 <_free_r>
   12088:	008000b4 	movhi	r2,2
   1208c:	10a9e304 	addi	r2,r2,-22644
   12090:	10800017 	ldw	r2,0(r2)
   12094:	003f4b06 	br	11dc4 <_malloc_r+0x44c>
   12098:	00c00044 	movi	r3,1
   1209c:	002f883a 	mov	r23,zero
   120a0:	003f3406 	br	11d74 <_malloc_r+0x3fc>
   120a4:	d5200215 	stw	r20,-32760(gp)
   120a8:	003f2106 	br	11d30 <_malloc_r+0x3b8>
   120ac:	01405504 	movi	r5,340
   120b0:	28c00436 	bltu	r5,r3,120c4 <_malloc_r+0x74c>
   120b4:	100ad3fa 	srli	r5,r2,15
   120b8:	29401dc4 	addi	r5,r5,119
   120bc:	294d883a 	add	r6,r5,r5
   120c0:	003f6b06 	br	11e70 <_malloc_r+0x4f8>
   120c4:	01415504 	movi	r5,1364
   120c8:	28c00936 	bltu	r5,r3,120f0 <_malloc_r+0x778>
   120cc:	100ad4ba 	srli	r5,r2,18
   120d0:	29401f04 	addi	r5,r5,124
   120d4:	294d883a 	add	r6,r5,r5
   120d8:	003f6506 	br	11e70 <_malloc_r+0x4f8>
   120dc:	98800117 	ldw	r2,4(r19)
   120e0:	0146303a 	nor	r3,zero,r5
   120e4:	1884703a 	and	r2,r3,r2
   120e8:	98800115 	stw	r2,4(r19)
   120ec:	003f9006 	br	11f30 <_malloc_r+0x5b8>
   120f0:	01803f04 	movi	r6,252
   120f4:	01401f84 	movi	r5,126
   120f8:	003f5d06 	br	11e70 <_malloc_r+0x4f8>

000120fc <memset>:
   120fc:	00c000c4 	movi	r3,3
   12100:	2005883a 	mov	r2,r4
   12104:	29403fcc 	andi	r5,r5,255
   12108:	19802d2e 	bgeu	r3,r6,121c0 <memset+0xc4>
   1210c:	20c6703a 	and	r3,r4,r3
   12110:	18002e1e 	bne	r3,zero,121cc <memset+0xd0>
   12114:	2806923a 	slli	r3,r5,8
   12118:	010003c4 	movi	r4,15
   1211c:	3011883a 	mov	r8,r6
   12120:	1946b03a 	or	r3,r3,r5
   12124:	180e943a 	slli	r7,r3,16
   12128:	38ceb03a 	or	r7,r7,r3
   1212c:	1007883a 	mov	r3,r2
   12130:	21800f2e 	bgeu	r4,r6,12170 <memset+0x74>
   12134:	19c00015 	stw	r7,0(r3)
   12138:	19c00115 	stw	r7,4(r3)
   1213c:	19c00215 	stw	r7,8(r3)
   12140:	19c00315 	stw	r7,12(r3)
   12144:	423ffc04 	addi	r8,r8,-16
   12148:	18c00404 	addi	r3,r3,16
   1214c:	223ff936 	bltu	r4,r8,12134 <memset+0x38>
   12150:	30fffc04 	addi	r3,r6,-16
   12154:	1806d13a 	srli	r3,r3,4
   12158:	318003cc 	andi	r6,r6,15
   1215c:	010000c4 	movi	r4,3
   12160:	18c00044 	addi	r3,r3,1
   12164:	1806913a 	slli	r3,r3,4
   12168:	10c7883a 	add	r3,r2,r3
   1216c:	21800e2e 	bgeu	r4,r6,121a8 <memset+0xac>
   12170:	1813883a 	mov	r9,r3
   12174:	3011883a 	mov	r8,r6
   12178:	010000c4 	movi	r4,3
   1217c:	49c00015 	stw	r7,0(r9)
   12180:	423fff04 	addi	r8,r8,-4
   12184:	4a400104 	addi	r9,r9,4
   12188:	223ffc36 	bltu	r4,r8,1217c <memset+0x80>
   1218c:	313fff04 	addi	r4,r6,-4
   12190:	2008d0ba 	srli	r4,r4,2
   12194:	318000cc 	andi	r6,r6,3
   12198:	21000044 	addi	r4,r4,1
   1219c:	2109883a 	add	r4,r4,r4
   121a0:	2109883a 	add	r4,r4,r4
   121a4:	1907883a 	add	r3,r3,r4
   121a8:	30000a26 	beq	r6,zero,121d4 <memset+0xd8>
   121ac:	198d883a 	add	r6,r3,r6
   121b0:	19400005 	stb	r5,0(r3)
   121b4:	18c00044 	addi	r3,r3,1
   121b8:	19bffd1e 	bne	r3,r6,121b0 <memset+0xb4>
   121bc:	f800283a 	ret
   121c0:	2007883a 	mov	r3,r4
   121c4:	303ff91e 	bne	r6,zero,121ac <memset+0xb0>
   121c8:	00000206 	br	121d4 <memset+0xd8>
   121cc:	2007883a 	mov	r3,r4
   121d0:	003ff606 	br	121ac <memset+0xb0>
   121d4:	f800283a 	ret

000121d8 <_open_r>:
   121d8:	defffd04 	addi	sp,sp,-12
   121dc:	dc400115 	stw	r17,4(sp)
   121e0:	dc000015 	stw	r16,0(sp)
   121e4:	2023883a 	mov	r17,r4
   121e8:	040000b4 	movhi	r16,2
   121ec:	8429d904 	addi	r16,r16,-22684
   121f0:	2809883a 	mov	r4,r5
   121f4:	300b883a 	mov	r5,r6
   121f8:	380d883a 	mov	r6,r7
   121fc:	dfc00215 	stw	ra,8(sp)
   12200:	80000015 	stw	zero,0(r16)
   12204:	001456c0 	call	1456c <open>
   12208:	00ffffc4 	movi	r3,-1
   1220c:	10c00526 	beq	r2,r3,12224 <_open_r+0x4c>
   12210:	dfc00217 	ldw	ra,8(sp)
   12214:	dc400117 	ldw	r17,4(sp)
   12218:	dc000017 	ldw	r16,0(sp)
   1221c:	dec00304 	addi	sp,sp,12
   12220:	f800283a 	ret
   12224:	80c00017 	ldw	r3,0(r16)
   12228:	183ff926 	beq	r3,zero,12210 <_open_r+0x38>
   1222c:	88c00015 	stw	r3,0(r17)
   12230:	dfc00217 	ldw	ra,8(sp)
   12234:	dc400117 	ldw	r17,4(sp)
   12238:	dc000017 	ldw	r16,0(sp)
   1223c:	dec00304 	addi	sp,sp,12
   12240:	f800283a 	ret

00012244 <_putc_r>:
   12244:	defffc04 	addi	sp,sp,-16
   12248:	dc000215 	stw	r16,8(sp)
   1224c:	dfc00315 	stw	ra,12(sp)
   12250:	2021883a 	mov	r16,r4
   12254:	20000226 	beq	r4,zero,12260 <_putc_r+0x1c>
   12258:	20800e17 	ldw	r2,56(r4)
   1225c:	10001d26 	beq	r2,zero,122d4 <_putc_r+0x90>
   12260:	30800217 	ldw	r2,8(r6)
   12264:	10bfffc4 	addi	r2,r2,-1
   12268:	30800215 	stw	r2,8(r6)
   1226c:	10000a16 	blt	r2,zero,12298 <_putc_r+0x54>
   12270:	30800017 	ldw	r2,0(r6)
   12274:	11400005 	stb	r5,0(r2)
   12278:	30800017 	ldw	r2,0(r6)
   1227c:	10c00044 	addi	r3,r2,1
   12280:	10800003 	ldbu	r2,0(r2)
   12284:	30c00015 	stw	r3,0(r6)
   12288:	dfc00317 	ldw	ra,12(sp)
   1228c:	dc000217 	ldw	r16,8(sp)
   12290:	dec00404 	addi	sp,sp,16
   12294:	f800283a 	ret
   12298:	30c00617 	ldw	r3,24(r6)
   1229c:	10c01316 	blt	r2,r3,122ec <_putc_r+0xa8>
   122a0:	30800017 	ldw	r2,0(r6)
   122a4:	01000284 	movi	r4,10
   122a8:	11400005 	stb	r5,0(r2)
   122ac:	30c00017 	ldw	r3,0(r6)
   122b0:	19400003 	ldbu	r5,0(r3)
   122b4:	29000d26 	beq	r5,r4,122ec <_putc_r+0xa8>
   122b8:	18c00044 	addi	r3,r3,1
   122bc:	2805883a 	mov	r2,r5
   122c0:	30c00015 	stw	r3,0(r6)
   122c4:	dfc00317 	ldw	ra,12(sp)
   122c8:	dc000217 	ldw	r16,8(sp)
   122cc:	dec00404 	addi	sp,sp,16
   122d0:	f800283a 	ret
   122d4:	d9400015 	stw	r5,0(sp)
   122d8:	d9800115 	stw	r6,4(sp)
   122dc:	001092c0 	call	1092c <__sinit>
   122e0:	d9800117 	ldw	r6,4(sp)
   122e4:	d9400017 	ldw	r5,0(sp)
   122e8:	003fdd06 	br	12260 <_putc_r+0x1c>
   122ec:	8009883a 	mov	r4,r16
   122f0:	dfc00317 	ldw	ra,12(sp)
   122f4:	dc000217 	ldw	r16,8(sp)
   122f8:	dec00404 	addi	sp,sp,16
   122fc:	00129ec1 	jmpi	129ec <__swbuf_r>

00012300 <putc>:
   12300:	defffc04 	addi	sp,sp,-16
   12304:	dc400115 	stw	r17,4(sp)
   12308:	044000b4 	movhi	r17,2
   1230c:	8c630c04 	addi	r17,r17,-29648
   12310:	88800017 	ldw	r2,0(r17)
   12314:	dc800215 	stw	r18,8(sp)
   12318:	dc000015 	stw	r16,0(sp)
   1231c:	dfc00315 	stw	ra,12(sp)
   12320:	2025883a 	mov	r18,r4
   12324:	2821883a 	mov	r16,r5
   12328:	10000226 	beq	r2,zero,12334 <putc+0x34>
   1232c:	10c00e17 	ldw	r3,56(r2)
   12330:	18002126 	beq	r3,zero,123b8 <putc+0xb8>
   12334:	80800217 	ldw	r2,8(r16)
   12338:	10bfffc4 	addi	r2,r2,-1
   1233c:	80800215 	stw	r2,8(r16)
   12340:	10000c16 	blt	r2,zero,12374 <putc+0x74>
   12344:	80800017 	ldw	r2,0(r16)
   12348:	14800005 	stb	r18,0(r2)
   1234c:	80800017 	ldw	r2,0(r16)
   12350:	10c00044 	addi	r3,r2,1
   12354:	10800003 	ldbu	r2,0(r2)
   12358:	80c00015 	stw	r3,0(r16)
   1235c:	dfc00317 	ldw	ra,12(sp)
   12360:	dc800217 	ldw	r18,8(sp)
   12364:	dc400117 	ldw	r17,4(sp)
   12368:	dc000017 	ldw	r16,0(sp)
   1236c:	dec00404 	addi	sp,sp,16
   12370:	f800283a 	ret
   12374:	80c00617 	ldw	r3,24(r16)
   12378:	10c01216 	blt	r2,r3,123c4 <putc+0xc4>
   1237c:	80800017 	ldw	r2,0(r16)
   12380:	01000284 	movi	r4,10
   12384:	14800005 	stb	r18,0(r2)
   12388:	80c00017 	ldw	r3,0(r16)
   1238c:	19400003 	ldbu	r5,0(r3)
   12390:	29001526 	beq	r5,r4,123e8 <putc+0xe8>
   12394:	18c00044 	addi	r3,r3,1
   12398:	2805883a 	mov	r2,r5
   1239c:	80c00015 	stw	r3,0(r16)
   123a0:	dfc00317 	ldw	ra,12(sp)
   123a4:	dc800217 	ldw	r18,8(sp)
   123a8:	dc400117 	ldw	r17,4(sp)
   123ac:	dc000017 	ldw	r16,0(sp)
   123b0:	dec00404 	addi	sp,sp,16
   123b4:	f800283a 	ret
   123b8:	1009883a 	mov	r4,r2
   123bc:	001092c0 	call	1092c <__sinit>
   123c0:	003fdc06 	br	12334 <putc+0x34>
   123c4:	89000017 	ldw	r4,0(r17)
   123c8:	900b883a 	mov	r5,r18
   123cc:	800d883a 	mov	r6,r16
   123d0:	dfc00317 	ldw	ra,12(sp)
   123d4:	dc800217 	ldw	r18,8(sp)
   123d8:	dc400117 	ldw	r17,4(sp)
   123dc:	dc000017 	ldw	r16,0(sp)
   123e0:	dec00404 	addi	sp,sp,16
   123e4:	00129ec1 	jmpi	129ec <__swbuf_r>
   123e8:	89000017 	ldw	r4,0(r17)
   123ec:	003ff706 	br	123cc <putc+0xcc>

000123f0 <_puts_r>:
   123f0:	defff604 	addi	sp,sp,-40
   123f4:	dc400815 	stw	r17,32(sp)
   123f8:	2023883a 	mov	r17,r4
   123fc:	2809883a 	mov	r4,r5
   12400:	dc000715 	stw	r16,28(sp)
   12404:	dfc00915 	stw	ra,36(sp)
   12408:	2821883a 	mov	r16,r5
   1240c:	00129600 	call	12960 <strlen>
   12410:	10c00044 	addi	r3,r2,1
   12414:	d8800115 	stw	r2,4(sp)
   12418:	89400217 	ldw	r5,8(r17)
   1241c:	00800074 	movhi	r2,1
   12420:	109c6e04 	addi	r2,r2,29112
   12424:	d8800215 	stw	r2,8(sp)
   12428:	00800044 	movi	r2,1
   1242c:	d8800315 	stw	r2,12(sp)
   12430:	8809883a 	mov	r4,r17
   12434:	00800084 	movi	r2,2
   12438:	d9800404 	addi	r6,sp,16
   1243c:	dc000015 	stw	r16,0(sp)
   12440:	d8c00615 	stw	r3,24(sp)
   12444:	dec00415 	stw	sp,16(sp)
   12448:	d8800515 	stw	r2,20(sp)
   1244c:	0012e200 	call	12e20 <__sfvwrite_r>
   12450:	1000061e 	bne	r2,zero,1246c <_puts_r+0x7c>
   12454:	00800284 	movi	r2,10
   12458:	dfc00917 	ldw	ra,36(sp)
   1245c:	dc400817 	ldw	r17,32(sp)
   12460:	dc000717 	ldw	r16,28(sp)
   12464:	dec00a04 	addi	sp,sp,40
   12468:	f800283a 	ret
   1246c:	00bfffc4 	movi	r2,-1
   12470:	003ff906 	br	12458 <_puts_r+0x68>

00012474 <puts>:
   12474:	008000b4 	movhi	r2,2
   12478:	10a30c04 	addi	r2,r2,-29648
   1247c:	200b883a 	mov	r5,r4
   12480:	11000017 	ldw	r4,0(r2)
   12484:	00123f01 	jmpi	123f0 <_puts_r>

00012488 <lflush>:
   12488:	20c0030b 	ldhu	r3,12(r4)
   1248c:	00800244 	movi	r2,9
   12490:	18c0024c 	andi	r3,r3,9
   12494:	18800226 	beq	r3,r2,124a0 <lflush+0x18>
   12498:	0005883a 	mov	r2,zero
   1249c:	f800283a 	ret
   124a0:	00108581 	jmpi	10858 <fflush>

000124a4 <__srefill_r>:
   124a4:	defffd04 	addi	sp,sp,-12
   124a8:	dc400115 	stw	r17,4(sp)
   124ac:	dc000015 	stw	r16,0(sp)
   124b0:	dfc00215 	stw	ra,8(sp)
   124b4:	2023883a 	mov	r17,r4
   124b8:	2821883a 	mov	r16,r5
   124bc:	20000226 	beq	r4,zero,124c8 <__srefill_r+0x24>
   124c0:	20800e17 	ldw	r2,56(r4)
   124c4:	10004426 	beq	r2,zero,125d8 <__srefill_r+0x134>
   124c8:	8080030b 	ldhu	r2,12(r16)
   124cc:	80000115 	stw	zero,4(r16)
   124d0:	10c0080c 	andi	r3,r2,32
   124d4:	18ffffcc 	andi	r3,r3,65535
   124d8:	18e0001c 	xori	r3,r3,32768
   124dc:	18e00004 	addi	r3,r3,-32768
   124e0:	1800371e 	bne	r3,zero,125c0 <__srefill_r+0x11c>
   124e4:	10c0010c 	andi	r3,r2,4
   124e8:	18ffffcc 	andi	r3,r3,65535
   124ec:	18e0001c 	xori	r3,r3,32768
   124f0:	18e00004 	addi	r3,r3,-32768
   124f4:	18002226 	beq	r3,zero,12580 <__srefill_r+0xdc>
   124f8:	81400c17 	ldw	r5,48(r16)
   124fc:	28000826 	beq	r5,zero,12520 <__srefill_r+0x7c>
   12500:	80801004 	addi	r2,r16,64
   12504:	28800226 	beq	r5,r2,12510 <__srefill_r+0x6c>
   12508:	8809883a 	mov	r4,r17
   1250c:	0010ea00 	call	10ea0 <_free_r>
   12510:	80800f17 	ldw	r2,60(r16)
   12514:	80000c15 	stw	zero,48(r16)
   12518:	80800115 	stw	r2,4(r16)
   1251c:	1000401e 	bne	r2,zero,12620 <__srefill_r+0x17c>
   12520:	80800417 	ldw	r2,16(r16)
   12524:	10005026 	beq	r2,zero,12668 <__srefill_r+0x1c4>
   12528:	8080030b 	ldhu	r2,12(r16)
   1252c:	108000cc 	andi	r2,r2,3
   12530:	10002b1e 	bne	r2,zero,125e0 <__srefill_r+0x13c>
   12534:	81800417 	ldw	r6,16(r16)
   12538:	80800817 	ldw	r2,32(r16)
   1253c:	81400717 	ldw	r5,28(r16)
   12540:	81c00517 	ldw	r7,20(r16)
   12544:	8809883a 	mov	r4,r17
   12548:	81800015 	stw	r6,0(r16)
   1254c:	103ee83a 	callr	r2
   12550:	8100030b 	ldhu	r4,12(r16)
   12554:	00f7ffc4 	movi	r3,-8193
   12558:	80800115 	stw	r2,4(r16)
   1255c:	20c6703a 	and	r3,r4,r3
   12560:	80c0030d 	sth	r3,12(r16)
   12564:	0080130e 	bge	zero,r2,125b4 <__srefill_r+0x110>
   12568:	0005883a 	mov	r2,zero
   1256c:	dfc00217 	ldw	ra,8(sp)
   12570:	dc400117 	ldw	r17,4(sp)
   12574:	dc000017 	ldw	r16,0(sp)
   12578:	dec00304 	addi	sp,sp,12
   1257c:	f800283a 	ret
   12580:	10c0040c 	andi	r3,r2,16
   12584:	18ffffcc 	andi	r3,r3,65535
   12588:	18e0001c 	xori	r3,r3,32768
   1258c:	18e00004 	addi	r3,r3,-32768
   12590:	18003926 	beq	r3,zero,12678 <__srefill_r+0x1d4>
   12594:	10c0020c 	andi	r3,r2,8
   12598:	18ffffcc 	andi	r3,r3,65535
   1259c:	18e0001c 	xori	r3,r3,32768
   125a0:	18e00004 	addi	r3,r3,-32768
   125a4:	1800261e 	bne	r3,zero,12640 <__srefill_r+0x19c>
   125a8:	10800114 	ori	r2,r2,4
   125ac:	8080030d 	sth	r2,12(r16)
   125b0:	003fdb06 	br	12520 <__srefill_r+0x7c>
   125b4:	1000111e 	bne	r2,zero,125fc <__srefill_r+0x158>
   125b8:	18c00814 	ori	r3,r3,32
   125bc:	80c0030d 	sth	r3,12(r16)
   125c0:	00bfffc4 	movi	r2,-1
   125c4:	dfc00217 	ldw	ra,8(sp)
   125c8:	dc400117 	ldw	r17,4(sp)
   125cc:	dc000017 	ldw	r16,0(sp)
   125d0:	dec00304 	addi	sp,sp,12
   125d4:	f800283a 	ret
   125d8:	001092c0 	call	1092c <__sinit>
   125dc:	003fba06 	br	124c8 <__srefill_r+0x24>
   125e0:	008000b4 	movhi	r2,2
   125e4:	10a30b04 	addi	r2,r2,-29652
   125e8:	11000017 	ldw	r4,0(r2)
   125ec:	01400074 	movhi	r5,1
   125f0:	29492204 	addi	r5,r5,9352
   125f4:	00116700 	call	11670 <_fwalk>
   125f8:	003fce06 	br	12534 <__srefill_r+0x90>
   125fc:	18c01014 	ori	r3,r3,64
   12600:	00bfffc4 	movi	r2,-1
   12604:	80000115 	stw	zero,4(r16)
   12608:	80c0030d 	sth	r3,12(r16)
   1260c:	dfc00217 	ldw	ra,8(sp)
   12610:	dc400117 	ldw	r17,4(sp)
   12614:	dc000017 	ldw	r16,0(sp)
   12618:	dec00304 	addi	sp,sp,12
   1261c:	f800283a 	ret
   12620:	80c00e17 	ldw	r3,56(r16)
   12624:	0005883a 	mov	r2,zero
   12628:	80c00015 	stw	r3,0(r16)
   1262c:	dfc00217 	ldw	ra,8(sp)
   12630:	dc400117 	ldw	r17,4(sp)
   12634:	dc000017 	ldw	r16,0(sp)
   12638:	dec00304 	addi	sp,sp,12
   1263c:	f800283a 	ret
   12640:	8809883a 	mov	r4,r17
   12644:	800b883a 	mov	r5,r16
   12648:	00106700 	call	10670 <_fflush_r>
   1264c:	103fdc1e 	bne	r2,zero,125c0 <__srefill_r+0x11c>
   12650:	8080030b 	ldhu	r2,12(r16)
   12654:	00fffdc4 	movi	r3,-9
   12658:	80000215 	stw	zero,8(r16)
   1265c:	1884703a 	and	r2,r3,r2
   12660:	80000615 	stw	zero,24(r16)
   12664:	003fd006 	br	125a8 <__srefill_r+0x104>
   12668:	8809883a 	mov	r4,r17
   1266c:	800b883a 	mov	r5,r16
   12670:	00117d00 	call	117d0 <__smakebuf_r>
   12674:	003fac06 	br	12528 <__srefill_r+0x84>
   12678:	00c00244 	movi	r3,9
   1267c:	10801014 	ori	r2,r2,64
   12680:	88c00015 	stw	r3,0(r17)
   12684:	8080030d 	sth	r2,12(r16)
   12688:	00bfffc4 	movi	r2,-1
   1268c:	003fb706 	br	1256c <__srefill_r+0xc8>

00012690 <_sbrk_r>:
   12690:	defffd04 	addi	sp,sp,-12
   12694:	dc400115 	stw	r17,4(sp)
   12698:	dc000015 	stw	r16,0(sp)
   1269c:	2023883a 	mov	r17,r4
   126a0:	040000b4 	movhi	r16,2
   126a4:	8429d904 	addi	r16,r16,-22684
   126a8:	2809883a 	mov	r4,r5
   126ac:	dfc00215 	stw	ra,8(sp)
   126b0:	80000015 	stw	zero,0(r16)
   126b4:	00148880 	call	14888 <sbrk>
   126b8:	00ffffc4 	movi	r3,-1
   126bc:	10c00526 	beq	r2,r3,126d4 <_sbrk_r+0x44>
   126c0:	dfc00217 	ldw	ra,8(sp)
   126c4:	dc400117 	ldw	r17,4(sp)
   126c8:	dc000017 	ldw	r16,0(sp)
   126cc:	dec00304 	addi	sp,sp,12
   126d0:	f800283a 	ret
   126d4:	80c00017 	ldw	r3,0(r16)
   126d8:	183ff926 	beq	r3,zero,126c0 <_sbrk_r+0x30>
   126dc:	88c00015 	stw	r3,0(r17)
   126e0:	dfc00217 	ldw	ra,8(sp)
   126e4:	dc400117 	ldw	r17,4(sp)
   126e8:	dc000017 	ldw	r16,0(sp)
   126ec:	dec00304 	addi	sp,sp,12
   126f0:	f800283a 	ret

000126f4 <__sread>:
   126f4:	defffe04 	addi	sp,sp,-8
   126f8:	dc000015 	stw	r16,0(sp)
   126fc:	2821883a 	mov	r16,r5
   12700:	2940038f 	ldh	r5,14(r5)
   12704:	dfc00115 	stw	ra,4(sp)
   12708:	00137980 	call	13798 <_read_r>
   1270c:	10000716 	blt	r2,zero,1272c <__sread+0x38>
   12710:	80c01417 	ldw	r3,80(r16)
   12714:	1887883a 	add	r3,r3,r2
   12718:	80c01415 	stw	r3,80(r16)
   1271c:	dfc00117 	ldw	ra,4(sp)
   12720:	dc000017 	ldw	r16,0(sp)
   12724:	dec00204 	addi	sp,sp,8
   12728:	f800283a 	ret
   1272c:	80c0030b 	ldhu	r3,12(r16)
   12730:	18fbffcc 	andi	r3,r3,61439
   12734:	80c0030d 	sth	r3,12(r16)
   12738:	dfc00117 	ldw	ra,4(sp)
   1273c:	dc000017 	ldw	r16,0(sp)
   12740:	dec00204 	addi	sp,sp,8
   12744:	f800283a 	ret

00012748 <__swrite>:
   12748:	2880030b 	ldhu	r2,12(r5)
   1274c:	defffb04 	addi	sp,sp,-20
   12750:	dcc00315 	stw	r19,12(sp)
   12754:	10c0400c 	andi	r3,r2,256
   12758:	18ffffcc 	andi	r3,r3,65535
   1275c:	18e0001c 	xori	r3,r3,32768
   12760:	dc800215 	stw	r18,8(sp)
   12764:	dc400115 	stw	r17,4(sp)
   12768:	dc000015 	stw	r16,0(sp)
   1276c:	dfc00415 	stw	ra,16(sp)
   12770:	18e00004 	addi	r3,r3,-32768
   12774:	2821883a 	mov	r16,r5
   12778:	2027883a 	mov	r19,r4
   1277c:	3025883a 	mov	r18,r6
   12780:	3823883a 	mov	r17,r7
   12784:	18000526 	beq	r3,zero,1279c <__swrite+0x54>
   12788:	2940038f 	ldh	r5,14(r5)
   1278c:	000d883a 	mov	r6,zero
   12790:	01c00084 	movi	r7,2
   12794:	00133680 	call	13368 <_lseek_r>
   12798:	8080030b 	ldhu	r2,12(r16)
   1279c:	8140038f 	ldh	r5,14(r16)
   127a0:	10bbffcc 	andi	r2,r2,61439
   127a4:	9809883a 	mov	r4,r19
   127a8:	900d883a 	mov	r6,r18
   127ac:	880f883a 	mov	r7,r17
   127b0:	8080030d 	sth	r2,12(r16)
   127b4:	dfc00417 	ldw	ra,16(sp)
   127b8:	dcc00317 	ldw	r19,12(sp)
   127bc:	dc800217 	ldw	r18,8(sp)
   127c0:	dc400117 	ldw	r17,4(sp)
   127c4:	dc000017 	ldw	r16,0(sp)
   127c8:	dec00504 	addi	sp,sp,20
   127cc:	0012b441 	jmpi	12b44 <_write_r>

000127d0 <__sseek>:
   127d0:	defffe04 	addi	sp,sp,-8
   127d4:	dc000015 	stw	r16,0(sp)
   127d8:	2821883a 	mov	r16,r5
   127dc:	2940038f 	ldh	r5,14(r5)
   127e0:	dfc00115 	stw	ra,4(sp)
   127e4:	00133680 	call	13368 <_lseek_r>
   127e8:	00ffffc4 	movi	r3,-1
   127ec:	10c00826 	beq	r2,r3,12810 <__sseek+0x40>
   127f0:	80c0030b 	ldhu	r3,12(r16)
   127f4:	80801415 	stw	r2,80(r16)
   127f8:	18c40014 	ori	r3,r3,4096
   127fc:	80c0030d 	sth	r3,12(r16)
   12800:	dfc00117 	ldw	ra,4(sp)
   12804:	dc000017 	ldw	r16,0(sp)
   12808:	dec00204 	addi	sp,sp,8
   1280c:	f800283a 	ret
   12810:	80c0030b 	ldhu	r3,12(r16)
   12814:	18fbffcc 	andi	r3,r3,61439
   12818:	80c0030d 	sth	r3,12(r16)
   1281c:	dfc00117 	ldw	ra,4(sp)
   12820:	dc000017 	ldw	r16,0(sp)
   12824:	dec00204 	addi	sp,sp,8
   12828:	f800283a 	ret

0001282c <__sclose>:
   1282c:	2940038f 	ldh	r5,14(r5)
   12830:	0012d241 	jmpi	12d24 <_close_r>

00012834 <strcat>:
   12834:	defffe04 	addi	sp,sp,-8
   12838:	dc000015 	stw	r16,0(sp)
   1283c:	dfc00115 	stw	ra,4(sp)
   12840:	208000cc 	andi	r2,r4,3
   12844:	2021883a 	mov	r16,r4
   12848:	1000141e 	bne	r2,zero,1289c <strcat+0x68>
   1284c:	20800017 	ldw	r2,0(r4)
   12850:	027fbff4 	movhi	r9,65279
   12854:	4a7fbfc4 	addi	r9,r9,-257
   12858:	02202074 	movhi	r8,32897
   1285c:	42202004 	addi	r8,r8,-32640
   12860:	1247883a 	add	r3,r2,r9
   12864:	0084303a 	nor	r2,zero,r2
   12868:	1884703a 	and	r2,r3,r2
   1286c:	1204703a 	and	r2,r2,r8
   12870:	2007883a 	mov	r3,r4
   12874:	1000091e 	bne	r2,zero,1289c <strcat+0x68>
   12878:	18c00104 	addi	r3,r3,4
   1287c:	19800017 	ldw	r6,0(r3)
   12880:	324f883a 	add	r7,r6,r9
   12884:	018c303a 	nor	r6,zero,r6
   12888:	398c703a 	and	r6,r7,r6
   1288c:	320c703a 	and	r6,r6,r8
   12890:	303ff926 	beq	r6,zero,12878 <strcat+0x44>
   12894:	1809883a 	mov	r4,r3
   12898:	00000106 	br	128a0 <strcat+0x6c>
   1289c:	8009883a 	mov	r4,r16
   128a0:	20800007 	ldb	r2,0(r4)
   128a4:	10000326 	beq	r2,zero,128b4 <strcat+0x80>
   128a8:	21000044 	addi	r4,r4,1
   128ac:	20c00007 	ldb	r3,0(r4)
   128b0:	183ffd1e 	bne	r3,zero,128a8 <strcat+0x74>
   128b4:	00128cc0 	call	128cc <strcpy>
   128b8:	8005883a 	mov	r2,r16
   128bc:	dfc00117 	ldw	ra,4(sp)
   128c0:	dc000017 	ldw	r16,0(sp)
   128c4:	dec00204 	addi	sp,sp,8
   128c8:	f800283a 	ret

000128cc <strcpy>:
   128cc:	2906b03a 	or	r3,r5,r4
   128d0:	18c000cc 	andi	r3,r3,3
   128d4:	2005883a 	mov	r2,r4
   128d8:	18001a1e 	bne	r3,zero,12944 <strcpy+0x78>
   128dc:	29800017 	ldw	r6,0(r5)
   128e0:	02bfbff4 	movhi	r10,65279
   128e4:	52bfbfc4 	addi	r10,r10,-257
   128e8:	02602074 	movhi	r9,32897
   128ec:	4a602004 	addi	r9,r9,-32640
   128f0:	0188303a 	nor	r4,zero,r6
   128f4:	3287883a 	add	r3,r6,r10
   128f8:	20c6703a 	and	r3,r4,r3
   128fc:	1a46703a 	and	r3,r3,r9
   12900:	1800101e 	bne	r3,zero,12944 <strcpy+0x78>
   12904:	1007883a 	mov	r3,r2
   12908:	19800015 	stw	r6,0(r3)
   1290c:	29400104 	addi	r5,r5,4
   12910:	29800017 	ldw	r6,0(r5)
   12914:	18c00104 	addi	r3,r3,4
   12918:	0190303a 	nor	r8,zero,r6
   1291c:	328f883a 	add	r7,r6,r10
   12920:	41ce703a 	and	r7,r8,r7
   12924:	3a4e703a 	and	r7,r7,r9
   12928:	383ff726 	beq	r7,zero,12908 <strcpy+0x3c>
   1292c:	29800007 	ldb	r6,0(r5)
   12930:	18c00044 	addi	r3,r3,1
   12934:	29400044 	addi	r5,r5,1
   12938:	19bfffc5 	stb	r6,-1(r3)
   1293c:	3000021e 	bne	r6,zero,12948 <strcpy+0x7c>
   12940:	f800283a 	ret
   12944:	1007883a 	mov	r3,r2
   12948:	29800007 	ldb	r6,0(r5)
   1294c:	18c00044 	addi	r3,r3,1
   12950:	29400044 	addi	r5,r5,1
   12954:	19bfffc5 	stb	r6,-1(r3)
   12958:	303ffb1e 	bne	r6,zero,12948 <strcpy+0x7c>
   1295c:	f800283a 	ret

00012960 <strlen>:
   12960:	208000cc 	andi	r2,r4,3
   12964:	10001f1e 	bne	r2,zero,129e4 <strlen+0x84>
   12968:	20800017 	ldw	r2,0(r4)
   1296c:	01ffbff4 	movhi	r7,65279
   12970:	39ffbfc4 	addi	r7,r7,-257
   12974:	01a02074 	movhi	r6,32897
   12978:	31a02004 	addi	r6,r6,-32640
   1297c:	11c7883a 	add	r3,r2,r7
   12980:	0084303a 	nor	r2,zero,r2
   12984:	1886703a 	and	r3,r3,r2
   12988:	1986703a 	and	r3,r3,r6
   1298c:	2005883a 	mov	r2,r4
   12990:	1800101e 	bne	r3,zero,129d4 <strlen+0x74>
   12994:	10800104 	addi	r2,r2,4
   12998:	10c00017 	ldw	r3,0(r2)
   1299c:	19cb883a 	add	r5,r3,r7
   129a0:	00c6303a 	nor	r3,zero,r3
   129a4:	28c6703a 	and	r3,r5,r3
   129a8:	1986703a 	and	r3,r3,r6
   129ac:	1800091e 	bne	r3,zero,129d4 <strlen+0x74>
   129b0:	10800104 	addi	r2,r2,4
   129b4:	10c00017 	ldw	r3,0(r2)
   129b8:	19cb883a 	add	r5,r3,r7
   129bc:	00c6303a 	nor	r3,zero,r3
   129c0:	28c6703a 	and	r3,r5,r3
   129c4:	1986703a 	and	r3,r3,r6
   129c8:	183ff226 	beq	r3,zero,12994 <strlen+0x34>
   129cc:	00000106 	br	129d4 <strlen+0x74>
   129d0:	10800044 	addi	r2,r2,1
   129d4:	10c00007 	ldb	r3,0(r2)
   129d8:	183ffd1e 	bne	r3,zero,129d0 <strlen+0x70>
   129dc:	1105c83a 	sub	r2,r2,r4
   129e0:	f800283a 	ret
   129e4:	2005883a 	mov	r2,r4
   129e8:	003ffa06 	br	129d4 <strlen+0x74>

000129ec <__swbuf_r>:
   129ec:	defffc04 	addi	sp,sp,-16
   129f0:	dc800215 	stw	r18,8(sp)
   129f4:	dc400115 	stw	r17,4(sp)
   129f8:	dc000015 	stw	r16,0(sp)
   129fc:	dfc00315 	stw	ra,12(sp)
   12a00:	2023883a 	mov	r17,r4
   12a04:	2825883a 	mov	r18,r5
   12a08:	3021883a 	mov	r16,r6
   12a0c:	20000226 	beq	r4,zero,12a18 <__swbuf_r+0x2c>
   12a10:	20800e17 	ldw	r2,56(r4)
   12a14:	10003b26 	beq	r2,zero,12b04 <__swbuf_r+0x118>
   12a18:	8080030b 	ldhu	r2,12(r16)
   12a1c:	80c00617 	ldw	r3,24(r16)
   12a20:	1080020c 	andi	r2,r2,8
   12a24:	10bfffcc 	andi	r2,r2,65535
   12a28:	10a0001c 	xori	r2,r2,32768
   12a2c:	80c00215 	stw	r3,8(r16)
   12a30:	10a00004 	addi	r2,r2,-32768
   12a34:	10002226 	beq	r2,zero,12ac0 <__swbuf_r+0xd4>
   12a38:	80800417 	ldw	r2,16(r16)
   12a3c:	10002026 	beq	r2,zero,12ac0 <__swbuf_r+0xd4>
   12a40:	80c00017 	ldw	r3,0(r16)
   12a44:	81000517 	ldw	r4,20(r16)
   12a48:	94803fcc 	andi	r18,r18,255
   12a4c:	1885c83a 	sub	r2,r3,r2
   12a50:	1100250e 	bge	r2,r4,12ae8 <__swbuf_r+0xfc>
   12a54:	10800044 	addi	r2,r2,1
   12a58:	81400217 	ldw	r5,8(r16)
   12a5c:	19000044 	addi	r4,r3,1
   12a60:	297fffc4 	addi	r5,r5,-1
   12a64:	81400215 	stw	r5,8(r16)
   12a68:	1c800005 	stb	r18,0(r3)
   12a6c:	80c00517 	ldw	r3,20(r16)
   12a70:	81000015 	stw	r4,0(r16)
   12a74:	18800c26 	beq	r3,r2,12aa8 <__swbuf_r+0xbc>
   12a78:	8080030b 	ldhu	r2,12(r16)
   12a7c:	1080004c 	andi	r2,r2,1
   12a80:	10000226 	beq	r2,zero,12a8c <__swbuf_r+0xa0>
   12a84:	00800284 	movi	r2,10
   12a88:	90800726 	beq	r18,r2,12aa8 <__swbuf_r+0xbc>
   12a8c:	9005883a 	mov	r2,r18
   12a90:	dfc00317 	ldw	ra,12(sp)
   12a94:	dc800217 	ldw	r18,8(sp)
   12a98:	dc400117 	ldw	r17,4(sp)
   12a9c:	dc000017 	ldw	r16,0(sp)
   12aa0:	dec00404 	addi	sp,sp,16
   12aa4:	f800283a 	ret
   12aa8:	8809883a 	mov	r4,r17
   12aac:	800b883a 	mov	r5,r16
   12ab0:	00106700 	call	10670 <_fflush_r>
   12ab4:	103ff526 	beq	r2,zero,12a8c <__swbuf_r+0xa0>
   12ab8:	04bfffc4 	movi	r18,-1
   12abc:	003ff306 	br	12a8c <__swbuf_r+0xa0>
   12ac0:	8809883a 	mov	r4,r17
   12ac4:	800b883a 	mov	r5,r16
   12ac8:	0012bb00 	call	12bb0 <__swsetup_r>
   12acc:	10000f1e 	bne	r2,zero,12b0c <__swbuf_r+0x120>
   12ad0:	80800417 	ldw	r2,16(r16)
   12ad4:	80c00017 	ldw	r3,0(r16)
   12ad8:	81000517 	ldw	r4,20(r16)
   12adc:	94803fcc 	andi	r18,r18,255
   12ae0:	1885c83a 	sub	r2,r3,r2
   12ae4:	113fdb16 	blt	r2,r4,12a54 <__swbuf_r+0x68>
   12ae8:	8809883a 	mov	r4,r17
   12aec:	800b883a 	mov	r5,r16
   12af0:	00106700 	call	10670 <_fflush_r>
   12af4:	103ff01e 	bne	r2,zero,12ab8 <__swbuf_r+0xcc>
   12af8:	80c00017 	ldw	r3,0(r16)
   12afc:	00800044 	movi	r2,1
   12b00:	003fd506 	br	12a58 <__swbuf_r+0x6c>
   12b04:	001092c0 	call	1092c <__sinit>
   12b08:	003fc306 	br	12a18 <__swbuf_r+0x2c>
   12b0c:	8080030b 	ldhu	r2,12(r16)
   12b10:	04bfffc4 	movi	r18,-1
   12b14:	10801014 	ori	r2,r2,64
   12b18:	8080030d 	sth	r2,12(r16)
   12b1c:	00800244 	movi	r2,9
   12b20:	88800015 	stw	r2,0(r17)
   12b24:	003fd906 	br	12a8c <__swbuf_r+0xa0>

00012b28 <__swbuf>:
   12b28:	00c000b4 	movhi	r3,2
   12b2c:	18e30c04 	addi	r3,r3,-29648
   12b30:	2005883a 	mov	r2,r4
   12b34:	19000017 	ldw	r4,0(r3)
   12b38:	280d883a 	mov	r6,r5
   12b3c:	100b883a 	mov	r5,r2
   12b40:	00129ec1 	jmpi	129ec <__swbuf_r>

00012b44 <_write_r>:
   12b44:	defffd04 	addi	sp,sp,-12
   12b48:	dc400115 	stw	r17,4(sp)
   12b4c:	dc000015 	stw	r16,0(sp)
   12b50:	2023883a 	mov	r17,r4
   12b54:	040000b4 	movhi	r16,2
   12b58:	8429d904 	addi	r16,r16,-22684
   12b5c:	2809883a 	mov	r4,r5
   12b60:	300b883a 	mov	r5,r6
   12b64:	380d883a 	mov	r6,r7
   12b68:	dfc00215 	stw	ra,8(sp)
   12b6c:	80000015 	stw	zero,0(r16)
   12b70:	00149880 	call	14988 <write>
   12b74:	00ffffc4 	movi	r3,-1
   12b78:	10c00526 	beq	r2,r3,12b90 <_write_r+0x4c>
   12b7c:	dfc00217 	ldw	ra,8(sp)
   12b80:	dc400117 	ldw	r17,4(sp)
   12b84:	dc000017 	ldw	r16,0(sp)
   12b88:	dec00304 	addi	sp,sp,12
   12b8c:	f800283a 	ret
   12b90:	80c00017 	ldw	r3,0(r16)
   12b94:	183ff926 	beq	r3,zero,12b7c <_write_r+0x38>
   12b98:	88c00015 	stw	r3,0(r17)
   12b9c:	dfc00217 	ldw	ra,8(sp)
   12ba0:	dc400117 	ldw	r17,4(sp)
   12ba4:	dc000017 	ldw	r16,0(sp)
   12ba8:	dec00304 	addi	sp,sp,12
   12bac:	f800283a 	ret

00012bb0 <__swsetup_r>:
   12bb0:	008000b4 	movhi	r2,2
   12bb4:	10a30c04 	addi	r2,r2,-29648
   12bb8:	10800017 	ldw	r2,0(r2)
   12bbc:	defffd04 	addi	sp,sp,-12
   12bc0:	dc400115 	stw	r17,4(sp)
   12bc4:	dc000015 	stw	r16,0(sp)
   12bc8:	dfc00215 	stw	ra,8(sp)
   12bcc:	2023883a 	mov	r17,r4
   12bd0:	2821883a 	mov	r16,r5
   12bd4:	10000226 	beq	r2,zero,12be0 <__swsetup_r+0x30>
   12bd8:	10c00e17 	ldw	r3,56(r2)
   12bdc:	18003d26 	beq	r3,zero,12cd4 <__swsetup_r+0x124>
   12be0:	8080030b 	ldhu	r2,12(r16)
   12be4:	10c0020c 	andi	r3,r2,8
   12be8:	18ffffcc 	andi	r3,r3,65535
   12bec:	18e0001c 	xori	r3,r3,32768
   12bf0:	18e00004 	addi	r3,r3,-32768
   12bf4:	18001226 	beq	r3,zero,12c40 <__swsetup_r+0x90>
   12bf8:	80c00417 	ldw	r3,16(r16)
   12bfc:	18001f26 	beq	r3,zero,12c7c <__swsetup_r+0xcc>
   12c00:	1100004c 	andi	r4,r2,1
   12c04:	2000261e 	bne	r4,zero,12ca0 <__swsetup_r+0xf0>
   12c08:	1080008c 	andi	r2,r2,2
   12c0c:	10bfffcc 	andi	r2,r2,65535
   12c10:	10a0001c 	xori	r2,r2,32768
   12c14:	10a00004 	addi	r2,r2,-32768
   12c18:	1000311e 	bne	r2,zero,12ce0 <__swsetup_r+0x130>
   12c1c:	80800517 	ldw	r2,20(r16)
   12c20:	80800215 	stw	r2,8(r16)
   12c24:	18002326 	beq	r3,zero,12cb4 <__swsetup_r+0x104>
   12c28:	0005883a 	mov	r2,zero
   12c2c:	dfc00217 	ldw	ra,8(sp)
   12c30:	dc400117 	ldw	r17,4(sp)
   12c34:	dc000017 	ldw	r16,0(sp)
   12c38:	dec00304 	addi	sp,sp,12
   12c3c:	f800283a 	ret
   12c40:	10c0040c 	andi	r3,r2,16
   12c44:	18ffffcc 	andi	r3,r3,65535
   12c48:	18e0001c 	xori	r3,r3,32768
   12c4c:	18e00004 	addi	r3,r3,-32768
   12c50:	18001e26 	beq	r3,zero,12ccc <__swsetup_r+0x11c>
   12c54:	10c0010c 	andi	r3,r2,4
   12c58:	18ffffcc 	andi	r3,r3,65535
   12c5c:	18e0001c 	xori	r3,r3,32768
   12c60:	18e00004 	addi	r3,r3,-32768
   12c64:	1800211e 	bne	r3,zero,12cec <__swsetup_r+0x13c>
   12c68:	80c00417 	ldw	r3,16(r16)
   12c6c:	11400214 	ori	r5,r2,8
   12c70:	8140030d 	sth	r5,12(r16)
   12c74:	2805883a 	mov	r2,r5
   12c78:	183fe11e 	bne	r3,zero,12c00 <__swsetup_r+0x50>
   12c7c:	1140a00c 	andi	r5,r2,640
   12c80:	01008004 	movi	r4,512
   12c84:	293fde26 	beq	r5,r4,12c00 <__swsetup_r+0x50>
   12c88:	8809883a 	mov	r4,r17
   12c8c:	800b883a 	mov	r5,r16
   12c90:	00117d00 	call	117d0 <__smakebuf_r>
   12c94:	8080030b 	ldhu	r2,12(r16)
   12c98:	80c00417 	ldw	r3,16(r16)
   12c9c:	003fd806 	br	12c00 <__swsetup_r+0x50>
   12ca0:	80800517 	ldw	r2,20(r16)
   12ca4:	80000215 	stw	zero,8(r16)
   12ca8:	0085c83a 	sub	r2,zero,r2
   12cac:	80800615 	stw	r2,24(r16)
   12cb0:	183fdd1e 	bne	r3,zero,12c28 <__swsetup_r+0x78>
   12cb4:	8080030b 	ldhu	r2,12(r16)
   12cb8:	1080200c 	andi	r2,r2,128
   12cbc:	10bfffcc 	andi	r2,r2,65535
   12cc0:	10a0001c 	xori	r2,r2,32768
   12cc4:	10a00004 	addi	r2,r2,-32768
   12cc8:	103fd826 	beq	r2,zero,12c2c <__swsetup_r+0x7c>
   12ccc:	00bfffc4 	movi	r2,-1
   12cd0:	003fd606 	br	12c2c <__swsetup_r+0x7c>
   12cd4:	1009883a 	mov	r4,r2
   12cd8:	001092c0 	call	1092c <__sinit>
   12cdc:	003fc006 	br	12be0 <__swsetup_r+0x30>
   12ce0:	0005883a 	mov	r2,zero
   12ce4:	80800215 	stw	r2,8(r16)
   12ce8:	003fce06 	br	12c24 <__swsetup_r+0x74>
   12cec:	81400c17 	ldw	r5,48(r16)
   12cf0:	28000626 	beq	r5,zero,12d0c <__swsetup_r+0x15c>
   12cf4:	80c01004 	addi	r3,r16,64
   12cf8:	28c00326 	beq	r5,r3,12d08 <__swsetup_r+0x158>
   12cfc:	8809883a 	mov	r4,r17
   12d00:	0010ea00 	call	10ea0 <_free_r>
   12d04:	8080030b 	ldhu	r2,12(r16)
   12d08:	80000c15 	stw	zero,48(r16)
   12d0c:	80c00417 	ldw	r3,16(r16)
   12d10:	013ff6c4 	movi	r4,-37
   12d14:	2084703a 	and	r2,r4,r2
   12d18:	80000115 	stw	zero,4(r16)
   12d1c:	80c00015 	stw	r3,0(r16)
   12d20:	003fd206 	br	12c6c <__swsetup_r+0xbc>

00012d24 <_close_r>:
   12d24:	defffd04 	addi	sp,sp,-12
   12d28:	dc400115 	stw	r17,4(sp)
   12d2c:	dc000015 	stw	r16,0(sp)
   12d30:	2023883a 	mov	r17,r4
   12d34:	040000b4 	movhi	r16,2
   12d38:	8429d904 	addi	r16,r16,-22684
   12d3c:	2809883a 	mov	r4,r5
   12d40:	dfc00215 	stw	ra,8(sp)
   12d44:	80000015 	stw	zero,0(r16)
   12d48:	0013e780 	call	13e78 <close>
   12d4c:	00ffffc4 	movi	r3,-1
   12d50:	10c00526 	beq	r2,r3,12d68 <_close_r+0x44>
   12d54:	dfc00217 	ldw	ra,8(sp)
   12d58:	dc400117 	ldw	r17,4(sp)
   12d5c:	dc000017 	ldw	r16,0(sp)
   12d60:	dec00304 	addi	sp,sp,12
   12d64:	f800283a 	ret
   12d68:	80c00017 	ldw	r3,0(r16)
   12d6c:	183ff926 	beq	r3,zero,12d54 <_close_r+0x30>
   12d70:	88c00015 	stw	r3,0(r17)
   12d74:	dfc00217 	ldw	ra,8(sp)
   12d78:	dc400117 	ldw	r17,4(sp)
   12d7c:	dc000017 	ldw	r16,0(sp)
   12d80:	dec00304 	addi	sp,sp,12
   12d84:	f800283a 	ret

00012d88 <__sflags>:
   12d88:	28800007 	ldb	r2,0(r5)
   12d8c:	00c01c84 	movi	r3,114
   12d90:	10c01826 	beq	r2,r3,12df4 <__sflags+0x6c>
   12d94:	00c01dc4 	movi	r3,119
   12d98:	10c01226 	beq	r2,r3,12de4 <__sflags+0x5c>
   12d9c:	00c01844 	movi	r3,97
   12da0:	10c00426 	beq	r2,r3,12db4 <__sflags+0x2c>
   12da4:	00800584 	movi	r2,22
   12da8:	20800015 	stw	r2,0(r4)
   12dac:	0005883a 	mov	r2,zero
   12db0:	f800283a 	ret
   12db4:	01c08204 	movi	r7,520
   12db8:	01000044 	movi	r4,1
   12dbc:	00804204 	movi	r2,264
   12dc0:	28c00047 	ldb	r3,1(r5)
   12dc4:	18000426 	beq	r3,zero,12dd8 <__sflags+0x50>
   12dc8:	02000ac4 	movi	r8,43
   12dcc:	1a000d26 	beq	r3,r8,12e04 <__sflags+0x7c>
   12dd0:	28c00087 	ldb	r3,2(r5)
   12dd4:	1a000b26 	beq	r3,r8,12e04 <__sflags+0x7c>
   12dd8:	21c8b03a 	or	r4,r4,r7
   12ddc:	31000015 	stw	r4,0(r6)
   12de0:	f800283a 	ret
   12de4:	01c18004 	movi	r7,1536
   12de8:	01000044 	movi	r4,1
   12dec:	00800204 	movi	r2,8
   12df0:	003ff306 	br	12dc0 <__sflags+0x38>
   12df4:	000f883a 	mov	r7,zero
   12df8:	0009883a 	mov	r4,zero
   12dfc:	00800104 	movi	r2,4
   12e00:	003fef06 	br	12dc0 <__sflags+0x38>
   12e04:	00fff8c4 	movi	r3,-29
   12e08:	01000084 	movi	r4,2
   12e0c:	10c4703a 	and	r2,r2,r3
   12e10:	21c8b03a 	or	r4,r4,r7
   12e14:	10800414 	ori	r2,r2,16
   12e18:	31000015 	stw	r4,0(r6)
   12e1c:	f800283a 	ret

00012e20 <__sfvwrite_r>:
   12e20:	30800217 	ldw	r2,8(r6)
   12e24:	defff504 	addi	sp,sp,-44
   12e28:	dd400615 	stw	r21,24(sp)
   12e2c:	dd000515 	stw	r20,20(sp)
   12e30:	dc000115 	stw	r16,4(sp)
   12e34:	dfc00a15 	stw	ra,40(sp)
   12e38:	df000915 	stw	fp,36(sp)
   12e3c:	ddc00815 	stw	r23,32(sp)
   12e40:	dd800715 	stw	r22,28(sp)
   12e44:	dcc00415 	stw	r19,16(sp)
   12e48:	dc800315 	stw	r18,12(sp)
   12e4c:	dc400215 	stw	r17,8(sp)
   12e50:	3029883a 	mov	r20,r6
   12e54:	202b883a 	mov	r21,r4
   12e58:	2821883a 	mov	r16,r5
   12e5c:	10002126 	beq	r2,zero,12ee4 <__sfvwrite_r+0xc4>
   12e60:	2880030b 	ldhu	r2,12(r5)
   12e64:	10c0020c 	andi	r3,r2,8
   12e68:	18ffffcc 	andi	r3,r3,65535
   12e6c:	18e0001c 	xori	r3,r3,32768
   12e70:	18e00004 	addi	r3,r3,-32768
   12e74:	18002826 	beq	r3,zero,12f18 <__sfvwrite_r+0xf8>
   12e78:	28c00417 	ldw	r3,16(r5)
   12e7c:	18002626 	beq	r3,zero,12f18 <__sfvwrite_r+0xf8>
   12e80:	10c0008c 	andi	r3,r2,2
   12e84:	18ffffcc 	andi	r3,r3,65535
   12e88:	18e0001c 	xori	r3,r3,32768
   12e8c:	18e00004 	addi	r3,r3,-32768
   12e90:	a4400017 	ldw	r17,0(r20)
   12e94:	18002b26 	beq	r3,zero,12f44 <__sfvwrite_r+0x124>
   12e98:	0027883a 	mov	r19,zero
   12e9c:	0025883a 	mov	r18,zero
   12ea0:	05810004 	movi	r22,1024
   12ea4:	980d883a 	mov	r6,r19
   12ea8:	a809883a 	mov	r4,r21
   12eac:	90004f26 	beq	r18,zero,12fec <__sfvwrite_r+0x1cc>
   12eb0:	900f883a 	mov	r7,r18
   12eb4:	81400717 	ldw	r5,28(r16)
   12eb8:	b480012e 	bgeu	r22,r18,12ec0 <__sfvwrite_r+0xa0>
   12ebc:	01c10004 	movi	r7,1024
   12ec0:	80800917 	ldw	r2,36(r16)
   12ec4:	103ee83a 	callr	r2
   12ec8:	0080540e 	bge	zero,r2,1301c <__sfvwrite_r+0x1fc>
   12ecc:	a0c00217 	ldw	r3,8(r20)
   12ed0:	98a7883a 	add	r19,r19,r2
   12ed4:	90a5c83a 	sub	r18,r18,r2
   12ed8:	1885c83a 	sub	r2,r3,r2
   12edc:	a0800215 	stw	r2,8(r20)
   12ee0:	103ff01e 	bne	r2,zero,12ea4 <__sfvwrite_r+0x84>
   12ee4:	0005883a 	mov	r2,zero
   12ee8:	dfc00a17 	ldw	ra,40(sp)
   12eec:	df000917 	ldw	fp,36(sp)
   12ef0:	ddc00817 	ldw	r23,32(sp)
   12ef4:	dd800717 	ldw	r22,28(sp)
   12ef8:	dd400617 	ldw	r21,24(sp)
   12efc:	dd000517 	ldw	r20,20(sp)
   12f00:	dcc00417 	ldw	r19,16(sp)
   12f04:	dc800317 	ldw	r18,12(sp)
   12f08:	dc400217 	ldw	r17,8(sp)
   12f0c:	dc000117 	ldw	r16,4(sp)
   12f10:	dec00b04 	addi	sp,sp,44
   12f14:	f800283a 	ret
   12f18:	a809883a 	mov	r4,r21
   12f1c:	800b883a 	mov	r5,r16
   12f20:	0012bb00 	call	12bb0 <__swsetup_r>
   12f24:	1000f01e 	bne	r2,zero,132e8 <__sfvwrite_r+0x4c8>
   12f28:	8080030b 	ldhu	r2,12(r16)
   12f2c:	a4400017 	ldw	r17,0(r20)
   12f30:	10c0008c 	andi	r3,r2,2
   12f34:	18ffffcc 	andi	r3,r3,65535
   12f38:	18e0001c 	xori	r3,r3,32768
   12f3c:	18e00004 	addi	r3,r3,-32768
   12f40:	183fd51e 	bne	r3,zero,12e98 <__sfvwrite_r+0x78>
   12f44:	10c0004c 	andi	r3,r2,1
   12f48:	002d883a 	mov	r22,zero
   12f4c:	1800381e 	bne	r3,zero,13030 <__sfvwrite_r+0x210>
   12f50:	0025883a 	mov	r18,zero
   12f54:	90002126 	beq	r18,zero,12fdc <__sfvwrite_r+0x1bc>
   12f58:	10c0800c 	andi	r3,r2,512
   12f5c:	18ffffcc 	andi	r3,r3,65535
   12f60:	18e0001c 	xori	r3,r3,32768
   12f64:	18e00004 	addi	r3,r3,-32768
   12f68:	84c00217 	ldw	r19,8(r16)
   12f6c:	18006b26 	beq	r3,zero,1311c <__sfvwrite_r+0x2fc>
   12f70:	980f883a 	mov	r7,r19
   12f74:	94c08636 	bltu	r18,r19,13190 <__sfvwrite_r+0x370>
   12f78:	10c1200c 	andi	r3,r2,1152
   12f7c:	18009f1e 	bne	r3,zero,131fc <__sfvwrite_r+0x3dc>
   12f80:	81000017 	ldw	r4,0(r16)
   12f84:	982f883a 	mov	r23,r19
   12f88:	9039883a 	mov	fp,r18
   12f8c:	9027883a 	mov	r19,r18
   12f90:	380d883a 	mov	r6,r7
   12f94:	b00b883a 	mov	r5,r22
   12f98:	d9c00015 	stw	r7,0(sp)
   12f9c:	001360c0 	call	1360c <memmove>
   12fa0:	d9c00017 	ldw	r7,0(sp)
   12fa4:	81000217 	ldw	r4,8(r16)
   12fa8:	80800017 	ldw	r2,0(r16)
   12fac:	25efc83a 	sub	r23,r4,r23
   12fb0:	11cf883a 	add	r7,r2,r7
   12fb4:	85c00215 	stw	r23,8(r16)
   12fb8:	81c00015 	stw	r7,0(r16)
   12fbc:	a0800217 	ldw	r2,8(r20)
   12fc0:	b72d883a 	add	r22,r22,fp
   12fc4:	9725c83a 	sub	r18,r18,fp
   12fc8:	14e7c83a 	sub	r19,r2,r19
   12fcc:	a4c00215 	stw	r19,8(r20)
   12fd0:	983fc426 	beq	r19,zero,12ee4 <__sfvwrite_r+0xc4>
   12fd4:	8080030b 	ldhu	r2,12(r16)
   12fd8:	903fdf1e 	bne	r18,zero,12f58 <__sfvwrite_r+0x138>
   12fdc:	8d800017 	ldw	r22,0(r17)
   12fe0:	8c800117 	ldw	r18,4(r17)
   12fe4:	8c400204 	addi	r17,r17,8
   12fe8:	003fda06 	br	12f54 <__sfvwrite_r+0x134>
   12fec:	8cc00017 	ldw	r19,0(r17)
   12ff0:	8c800117 	ldw	r18,4(r17)
   12ff4:	8c400204 	addi	r17,r17,8
   12ff8:	003faa06 	br	12ea4 <__sfvwrite_r+0x84>
   12ffc:	00138040 	call	13804 <_realloc_r>
   13000:	102f883a 	mov	r23,r2
   13004:	10009f1e 	bne	r2,zero,13284 <__sfvwrite_r+0x464>
   13008:	81400417 	ldw	r5,16(r16)
   1300c:	a809883a 	mov	r4,r21
   13010:	0010ea00 	call	10ea0 <_free_r>
   13014:	00800304 	movi	r2,12
   13018:	a8800015 	stw	r2,0(r21)
   1301c:	80c0030b 	ldhu	r3,12(r16)
   13020:	00bfffc4 	movi	r2,-1
   13024:	18c01014 	ori	r3,r3,64
   13028:	80c0030d 	sth	r3,12(r16)
   1302c:	003fae06 	br	12ee8 <__sfvwrite_r+0xc8>
   13030:	0007883a 	mov	r3,zero
   13034:	0039883a 	mov	fp,zero
   13038:	0025883a 	mov	r18,zero
   1303c:	90001e26 	beq	r18,zero,130b8 <__sfvwrite_r+0x298>
   13040:	18006526 	beq	r3,zero,131d8 <__sfvwrite_r+0x3b8>
   13044:	b02f883a 	mov	r23,r22
   13048:	9580012e 	bgeu	r18,r22,13050 <__sfvwrite_r+0x230>
   1304c:	902f883a 	mov	r23,r18
   13050:	81000017 	ldw	r4,0(r16)
   13054:	80800417 	ldw	r2,16(r16)
   13058:	84c00217 	ldw	r19,8(r16)
   1305c:	81c00517 	ldw	r7,20(r16)
   13060:	1100022e 	bgeu	r2,r4,1306c <__sfvwrite_r+0x24c>
   13064:	99e7883a 	add	r19,r19,r7
   13068:	9dc01816 	blt	r19,r23,130cc <__sfvwrite_r+0x2ac>
   1306c:	b9c03b16 	blt	r23,r7,1315c <__sfvwrite_r+0x33c>
   13070:	80800917 	ldw	r2,36(r16)
   13074:	81400717 	ldw	r5,28(r16)
   13078:	a809883a 	mov	r4,r21
   1307c:	d8c00015 	stw	r3,0(sp)
   13080:	e00d883a 	mov	r6,fp
   13084:	103ee83a 	callr	r2
   13088:	1027883a 	mov	r19,r2
   1308c:	d8c00017 	ldw	r3,0(sp)
   13090:	00bfe20e 	bge	zero,r2,1301c <__sfvwrite_r+0x1fc>
   13094:	b4edc83a 	sub	r22,r22,r19
   13098:	b0001a26 	beq	r22,zero,13104 <__sfvwrite_r+0x2e4>
   1309c:	a0800217 	ldw	r2,8(r20)
   130a0:	e4f9883a 	add	fp,fp,r19
   130a4:	94e5c83a 	sub	r18,r18,r19
   130a8:	14e7c83a 	sub	r19,r2,r19
   130ac:	a4c00215 	stw	r19,8(r20)
   130b0:	983f8c26 	beq	r19,zero,12ee4 <__sfvwrite_r+0xc4>
   130b4:	903fe21e 	bne	r18,zero,13040 <__sfvwrite_r+0x220>
   130b8:	8f000017 	ldw	fp,0(r17)
   130bc:	8c800117 	ldw	r18,4(r17)
   130c0:	0007883a 	mov	r3,zero
   130c4:	8c400204 	addi	r17,r17,8
   130c8:	003fdc06 	br	1303c <__sfvwrite_r+0x21c>
   130cc:	e00b883a 	mov	r5,fp
   130d0:	980d883a 	mov	r6,r19
   130d4:	d8c00015 	stw	r3,0(sp)
   130d8:	001360c0 	call	1360c <memmove>
   130dc:	80800017 	ldw	r2,0(r16)
   130e0:	a809883a 	mov	r4,r21
   130e4:	800b883a 	mov	r5,r16
   130e8:	14c5883a 	add	r2,r2,r19
   130ec:	80800015 	stw	r2,0(r16)
   130f0:	00106700 	call	10670 <_fflush_r>
   130f4:	d8c00017 	ldw	r3,0(sp)
   130f8:	103fc81e 	bne	r2,zero,1301c <__sfvwrite_r+0x1fc>
   130fc:	b4edc83a 	sub	r22,r22,r19
   13100:	b03fe61e 	bne	r22,zero,1309c <__sfvwrite_r+0x27c>
   13104:	a809883a 	mov	r4,r21
   13108:	800b883a 	mov	r5,r16
   1310c:	00106700 	call	10670 <_fflush_r>
   13110:	103fc21e 	bne	r2,zero,1301c <__sfvwrite_r+0x1fc>
   13114:	0007883a 	mov	r3,zero
   13118:	003fe006 	br	1309c <__sfvwrite_r+0x27c>
   1311c:	81000017 	ldw	r4,0(r16)
   13120:	80800417 	ldw	r2,16(r16)
   13124:	1100022e 	bgeu	r2,r4,13130 <__sfvwrite_r+0x310>
   13128:	9839883a 	mov	fp,r19
   1312c:	9c806036 	bltu	r19,r18,132b0 <__sfvwrite_r+0x490>
   13130:	81c00517 	ldw	r7,20(r16)
   13134:	91c01c36 	bltu	r18,r7,131a8 <__sfvwrite_r+0x388>
   13138:	80800917 	ldw	r2,36(r16)
   1313c:	81400717 	ldw	r5,28(r16)
   13140:	a809883a 	mov	r4,r21
   13144:	b00d883a 	mov	r6,r22
   13148:	103ee83a 	callr	r2
   1314c:	1027883a 	mov	r19,r2
   13150:	00bfb20e 	bge	zero,r2,1301c <__sfvwrite_r+0x1fc>
   13154:	1039883a 	mov	fp,r2
   13158:	003f9806 	br	12fbc <__sfvwrite_r+0x19c>
   1315c:	b80d883a 	mov	r6,r23
   13160:	e00b883a 	mov	r5,fp
   13164:	d8c00015 	stw	r3,0(sp)
   13168:	001360c0 	call	1360c <memmove>
   1316c:	80800217 	ldw	r2,8(r16)
   13170:	81000017 	ldw	r4,0(r16)
   13174:	b827883a 	mov	r19,r23
   13178:	15c5c83a 	sub	r2,r2,r23
   1317c:	25ef883a 	add	r23,r4,r23
   13180:	80800215 	stw	r2,8(r16)
   13184:	85c00015 	stw	r23,0(r16)
   13188:	d8c00017 	ldw	r3,0(sp)
   1318c:	003fc106 	br	13094 <__sfvwrite_r+0x274>
   13190:	81000017 	ldw	r4,0(r16)
   13194:	902f883a 	mov	r23,r18
   13198:	9039883a 	mov	fp,r18
   1319c:	9027883a 	mov	r19,r18
   131a0:	900f883a 	mov	r7,r18
   131a4:	003f7a06 	br	12f90 <__sfvwrite_r+0x170>
   131a8:	b00b883a 	mov	r5,r22
   131ac:	900d883a 	mov	r6,r18
   131b0:	001360c0 	call	1360c <memmove>
   131b4:	80c00217 	ldw	r3,8(r16)
   131b8:	80800017 	ldw	r2,0(r16)
   131bc:	9027883a 	mov	r19,r18
   131c0:	1c87c83a 	sub	r3,r3,r18
   131c4:	1485883a 	add	r2,r2,r18
   131c8:	80c00215 	stw	r3,8(r16)
   131cc:	80800015 	stw	r2,0(r16)
   131d0:	9039883a 	mov	fp,r18
   131d4:	003f7906 	br	12fbc <__sfvwrite_r+0x19c>
   131d8:	e009883a 	mov	r4,fp
   131dc:	01400284 	movi	r5,10
   131e0:	900d883a 	mov	r6,r18
   131e4:	00133d40 	call	133d4 <memchr>
   131e8:	10003c26 	beq	r2,zero,132dc <__sfvwrite_r+0x4bc>
   131ec:	15800044 	addi	r22,r2,1
   131f0:	b72dc83a 	sub	r22,r22,fp
   131f4:	00c00044 	movi	r3,1
   131f8:	003f9206 	br	13044 <__sfvwrite_r+0x224>
   131fc:	81000517 	ldw	r4,20(r16)
   13200:	81400417 	ldw	r5,16(r16)
   13204:	80c00017 	ldw	r3,0(r16)
   13208:	210d883a 	add	r6,r4,r4
   1320c:	3109883a 	add	r4,r6,r4
   13210:	2026d7fa 	srli	r19,r4,31
   13214:	1979c83a 	sub	fp,r3,r5
   13218:	e1800044 	addi	r6,fp,1
   1321c:	9909883a 	add	r4,r19,r4
   13220:	2027d07a 	srai	r19,r4,1
   13224:	3489883a 	add	r4,r6,r18
   13228:	980d883a 	mov	r6,r19
   1322c:	9900022e 	bgeu	r19,r4,13238 <__sfvwrite_r+0x418>
   13230:	2027883a 	mov	r19,r4
   13234:	200d883a 	mov	r6,r4
   13238:	1081000c 	andi	r2,r2,1024
   1323c:	10bfffcc 	andi	r2,r2,65535
   13240:	10a0001c 	xori	r2,r2,32768
   13244:	10a00004 	addi	r2,r2,-32768
   13248:	a809883a 	mov	r4,r21
   1324c:	103f6b26 	beq	r2,zero,12ffc <__sfvwrite_r+0x1dc>
   13250:	300b883a 	mov	r5,r6
   13254:	00119780 	call	11978 <_malloc_r>
   13258:	102f883a 	mov	r23,r2
   1325c:	103f6d26 	beq	r2,zero,13014 <__sfvwrite_r+0x1f4>
   13260:	81400417 	ldw	r5,16(r16)
   13264:	1009883a 	mov	r4,r2
   13268:	e00d883a 	mov	r6,fp
   1326c:	00134cc0 	call	134cc <memcpy>
   13270:	8080030b 	ldhu	r2,12(r16)
   13274:	00fedfc4 	movi	r3,-1153
   13278:	10c4703a 	and	r2,r2,r3
   1327c:	10802014 	ori	r2,r2,128
   13280:	8080030d 	sth	r2,12(r16)
   13284:	bf09883a 	add	r4,r23,fp
   13288:	9f07c83a 	sub	r3,r19,fp
   1328c:	85c00415 	stw	r23,16(r16)
   13290:	84c00515 	stw	r19,20(r16)
   13294:	81000015 	stw	r4,0(r16)
   13298:	902f883a 	mov	r23,r18
   1329c:	80c00215 	stw	r3,8(r16)
   132a0:	9039883a 	mov	fp,r18
   132a4:	9027883a 	mov	r19,r18
   132a8:	900f883a 	mov	r7,r18
   132ac:	003f3806 	br	12f90 <__sfvwrite_r+0x170>
   132b0:	b00b883a 	mov	r5,r22
   132b4:	980d883a 	mov	r6,r19
   132b8:	001360c0 	call	1360c <memmove>
   132bc:	80800017 	ldw	r2,0(r16)
   132c0:	a809883a 	mov	r4,r21
   132c4:	800b883a 	mov	r5,r16
   132c8:	14c5883a 	add	r2,r2,r19
   132cc:	80800015 	stw	r2,0(r16)
   132d0:	00106700 	call	10670 <_fflush_r>
   132d4:	103f3926 	beq	r2,zero,12fbc <__sfvwrite_r+0x19c>
   132d8:	003f5006 	br	1301c <__sfvwrite_r+0x1fc>
   132dc:	95800044 	addi	r22,r18,1
   132e0:	00c00044 	movi	r3,1
   132e4:	003f5706 	br	13044 <__sfvwrite_r+0x224>
   132e8:	80c0030b 	ldhu	r3,12(r16)
   132ec:	00bfffc4 	movi	r2,-1
   132f0:	18c01014 	ori	r3,r3,64
   132f4:	80c0030d 	sth	r3,12(r16)
   132f8:	00c00244 	movi	r3,9
   132fc:	a8c00015 	stw	r3,0(r21)
   13300:	003ef906 	br	12ee8 <__sfvwrite_r+0xc8>

00013304 <_isatty_r>:
   13304:	defffd04 	addi	sp,sp,-12
   13308:	dc400115 	stw	r17,4(sp)
   1330c:	dc000015 	stw	r16,0(sp)
   13310:	2023883a 	mov	r17,r4
   13314:	040000b4 	movhi	r16,2
   13318:	8429d904 	addi	r16,r16,-22684
   1331c:	2809883a 	mov	r4,r5
   13320:	dfc00215 	stw	ra,8(sp)
   13324:	80000015 	stw	zero,0(r16)
   13328:	00140c00 	call	140c0 <isatty>
   1332c:	00ffffc4 	movi	r3,-1
   13330:	10c00526 	beq	r2,r3,13348 <_isatty_r+0x44>
   13334:	dfc00217 	ldw	ra,8(sp)
   13338:	dc400117 	ldw	r17,4(sp)
   1333c:	dc000017 	ldw	r16,0(sp)
   13340:	dec00304 	addi	sp,sp,12
   13344:	f800283a 	ret
   13348:	80c00017 	ldw	r3,0(r16)
   1334c:	183ff926 	beq	r3,zero,13334 <_isatty_r+0x30>
   13350:	88c00015 	stw	r3,0(r17)
   13354:	dfc00217 	ldw	ra,8(sp)
   13358:	dc400117 	ldw	r17,4(sp)
   1335c:	dc000017 	ldw	r16,0(sp)
   13360:	dec00304 	addi	sp,sp,12
   13364:	f800283a 	ret

00013368 <_lseek_r>:
   13368:	defffd04 	addi	sp,sp,-12
   1336c:	dc400115 	stw	r17,4(sp)
   13370:	dc000015 	stw	r16,0(sp)
   13374:	2023883a 	mov	r17,r4
   13378:	040000b4 	movhi	r16,2
   1337c:	8429d904 	addi	r16,r16,-22684
   13380:	2809883a 	mov	r4,r5
   13384:	300b883a 	mov	r5,r6
   13388:	380d883a 	mov	r6,r7
   1338c:	dfc00215 	stw	ra,8(sp)
   13390:	80000015 	stw	zero,0(r16)
   13394:	00142a00 	call	142a0 <lseek>
   13398:	00ffffc4 	movi	r3,-1
   1339c:	10c00526 	beq	r2,r3,133b4 <_lseek_r+0x4c>
   133a0:	dfc00217 	ldw	ra,8(sp)
   133a4:	dc400117 	ldw	r17,4(sp)
   133a8:	dc000017 	ldw	r16,0(sp)
   133ac:	dec00304 	addi	sp,sp,12
   133b0:	f800283a 	ret
   133b4:	80c00017 	ldw	r3,0(r16)
   133b8:	183ff926 	beq	r3,zero,133a0 <_lseek_r+0x38>
   133bc:	88c00015 	stw	r3,0(r17)
   133c0:	dfc00217 	ldw	ra,8(sp)
   133c4:	dc400117 	ldw	r17,4(sp)
   133c8:	dc000017 	ldw	r16,0(sp)
   133cc:	dec00304 	addi	sp,sp,12
   133d0:	f800283a 	ret

000133d4 <memchr>:
   133d4:	008000c4 	movi	r2,3
   133d8:	29403fcc 	andi	r5,r5,255
   133dc:	1180282e 	bgeu	r2,r6,13480 <memchr+0xac>
   133e0:	2086703a 	and	r3,r4,r2
   133e4:	1800351e 	bne	r3,zero,134bc <memchr+0xe8>
   133e8:	2816923a 	slli	r11,r5,8
   133ec:	2093883a 	add	r9,r4,r2
   133f0:	22000084 	addi	r8,r4,2
   133f4:	5957883a 	add	r11,r11,r5
   133f8:	5816923a 	slli	r11,r11,8
   133fc:	20c00044 	addi	r3,r4,1
   13400:	037fbff4 	movhi	r13,65279
   13404:	6b7fbfc4 	addi	r13,r13,-257
   13408:	5957883a 	add	r11,r11,r5
   1340c:	5816923a 	slli	r11,r11,8
   13410:	03202074 	movhi	r12,32897
   13414:	63202004 	addi	r12,r12,-32640
   13418:	101d883a 	mov	r14,r2
   1341c:	5957883a 	add	r11,r11,r5
   13420:	21c00017 	ldw	r7,0(r4)
   13424:	31bfff04 	addi	r6,r6,-4
   13428:	1805883a 	mov	r2,r3
   1342c:	3acef03a 	xor	r7,r7,r11
   13430:	3b55883a 	add	r10,r7,r13
   13434:	01ce303a 	nor	r7,zero,r7
   13438:	51ce703a 	and	r7,r10,r7
   1343c:	3b0e703a 	and	r7,r7,r12
   13440:	38000a26 	beq	r7,zero,1346c <memchr+0x98>
   13444:	21c00003 	ldbu	r7,0(r4)
   13448:	39401e26 	beq	r7,r5,134c4 <memchr+0xf0>
   1344c:	19c00003 	ldbu	r7,0(r3)
   13450:	39401926 	beq	r7,r5,134b8 <memchr+0xe4>
   13454:	41c00003 	ldbu	r7,0(r8)
   13458:	4005883a 	mov	r2,r8
   1345c:	39401626 	beq	r7,r5,134b8 <memchr+0xe4>
   13460:	49c00003 	ldbu	r7,0(r9)
   13464:	4805883a 	mov	r2,r9
   13468:	39401326 	beq	r7,r5,134b8 <memchr+0xe4>
   1346c:	21000104 	addi	r4,r4,4
   13470:	4a400104 	addi	r9,r9,4
   13474:	42000104 	addi	r8,r8,4
   13478:	18c00104 	addi	r3,r3,4
   1347c:	71bfe836 	bltu	r14,r6,13420 <memchr+0x4c>
   13480:	2005883a 	mov	r2,r4
   13484:	30000a26 	beq	r6,zero,134b0 <memchr+0xdc>
   13488:	10c00003 	ldbu	r3,0(r2)
   1348c:	19400a26 	beq	r3,r5,134b8 <memchr+0xe4>
   13490:	10c00044 	addi	r3,r2,1
   13494:	118d883a 	add	r6,r2,r6
   13498:	00000306 	br	134a8 <memchr+0xd4>
   1349c:	11000003 	ldbu	r4,0(r2)
   134a0:	18c00044 	addi	r3,r3,1
   134a4:	21400426 	beq	r4,r5,134b8 <memchr+0xe4>
   134a8:	1805883a 	mov	r2,r3
   134ac:	19bffb1e 	bne	r3,r6,1349c <memchr+0xc8>
   134b0:	0005883a 	mov	r2,zero
   134b4:	f800283a 	ret
   134b8:	f800283a 	ret
   134bc:	2005883a 	mov	r2,r4
   134c0:	003ff106 	br	13488 <memchr+0xb4>
   134c4:	2005883a 	mov	r2,r4
   134c8:	f800283a 	ret

000134cc <memcpy>:
   134cc:	defffb04 	addi	sp,sp,-20
   134d0:	dc000015 	stw	r16,0(sp)
   134d4:	dfc00415 	stw	ra,16(sp)
   134d8:	dcc00315 	stw	r19,12(sp)
   134dc:	dc800215 	stw	r18,8(sp)
   134e0:	dc400115 	stw	r17,4(sp)
   134e4:	00c003c4 	movi	r3,15
   134e8:	2021883a 	mov	r16,r4
   134ec:	3005883a 	mov	r2,r6
   134f0:	1980032e 	bgeu	r3,r6,13500 <memcpy+0x34>
   134f4:	2906b03a 	or	r3,r5,r4
   134f8:	18c000cc 	andi	r3,r3,3
   134fc:	18001026 	beq	r3,zero,13540 <memcpy+0x74>
   13500:	8007883a 	mov	r3,r16
   13504:	288f883a 	add	r7,r5,r2
   13508:	10000526 	beq	r2,zero,13520 <memcpy+0x54>
   1350c:	29800003 	ldbu	r6,0(r5)
   13510:	18c00044 	addi	r3,r3,1
   13514:	29400044 	addi	r5,r5,1
   13518:	19bfffc5 	stb	r6,-1(r3)
   1351c:	29fffb1e 	bne	r5,r7,1350c <memcpy+0x40>
   13520:	8005883a 	mov	r2,r16
   13524:	dfc00417 	ldw	ra,16(sp)
   13528:	dcc00317 	ldw	r19,12(sp)
   1352c:	dc800217 	ldw	r18,8(sp)
   13530:	dc400117 	ldw	r17,4(sp)
   13534:	dc000017 	ldw	r16,0(sp)
   13538:	dec00504 	addi	sp,sp,20
   1353c:	f800283a 	ret
   13540:	32bffc04 	addi	r10,r6,-16
   13544:	5014d13a 	srli	r10,r10,4
   13548:	20800404 	addi	r2,r4,16
   1354c:	2007883a 	mov	r3,r4
   13550:	5008913a 	slli	r4,r10,4
   13554:	280f883a 	mov	r7,r5
   13558:	1105883a 	add	r2,r2,r4
   1355c:	3a000017 	ldw	r8,0(r7)
   13560:	18c00404 	addi	r3,r3,16
   13564:	39c00404 	addi	r7,r7,16
   13568:	1a3ffc15 	stw	r8,-16(r3)
   1356c:	3a3ffd17 	ldw	r8,-12(r7)
   13570:	1a3ffd15 	stw	r8,-12(r3)
   13574:	3a3ffe17 	ldw	r8,-8(r7)
   13578:	1a3ffe15 	stw	r8,-8(r3)
   1357c:	3a3fff17 	ldw	r8,-4(r7)
   13580:	1a3fff15 	stw	r8,-4(r3)
   13584:	18bff51e 	bne	r3,r2,1355c <memcpy+0x90>
   13588:	52800044 	addi	r10,r10,1
   1358c:	5014913a 	slli	r10,r10,4
   13590:	308003cc 	andi	r2,r6,15
   13594:	010000c4 	movi	r4,3
   13598:	8287883a 	add	r3,r16,r10
   1359c:	2a95883a 	add	r10,r5,r10
   135a0:	2080182e 	bgeu	r4,r2,13604 <memcpy+0x138>
   135a4:	147fff04 	addi	r17,r2,-4
   135a8:	8808d0ba 	srli	r4,r17,2
   135ac:	1a400104 	addi	r9,r3,4
   135b0:	180d883a 	mov	r6,r3
   135b4:	2105883a 	add	r2,r4,r4
   135b8:	1085883a 	add	r2,r2,r2
   135bc:	4893883a 	add	r9,r9,r2
   135c0:	500f883a 	mov	r7,r10
   135c4:	3a000017 	ldw	r8,0(r7)
   135c8:	31800104 	addi	r6,r6,4
   135cc:	39c00104 	addi	r7,r7,4
   135d0:	323fff15 	stw	r8,-4(r6)
   135d4:	327ffb1e 	bne	r6,r9,135c4 <memcpy+0xf8>
   135d8:	20800044 	addi	r2,r4,1
   135dc:	1085883a 	add	r2,r2,r2
   135e0:	1085883a 	add	r2,r2,r2
   135e4:	017fff04 	movi	r5,-4
   135e8:	18a5883a 	add	r18,r3,r2
   135ec:	50a7883a 	add	r19,r10,r2
   135f0:	0013e000 	call	13e00 <__mulsi3>
   135f4:	1445883a 	add	r2,r2,r17
   135f8:	980b883a 	mov	r5,r19
   135fc:	9007883a 	mov	r3,r18
   13600:	003fc006 	br	13504 <memcpy+0x38>
   13604:	500b883a 	mov	r5,r10
   13608:	003fbe06 	br	13504 <memcpy+0x38>

0001360c <memmove>:
   1360c:	defffb04 	addi	sp,sp,-20
   13610:	dc000015 	stw	r16,0(sp)
   13614:	dfc00415 	stw	ra,16(sp)
   13618:	dcc00315 	stw	r19,12(sp)
   1361c:	dc800215 	stw	r18,8(sp)
   13620:	dc400115 	stw	r17,4(sp)
   13624:	2021883a 	mov	r16,r4
   13628:	300f883a 	mov	r7,r6
   1362c:	2900122e 	bgeu	r5,r4,13678 <memmove+0x6c>
   13630:	2987883a 	add	r3,r5,r6
   13634:	20c0102e 	bgeu	r4,r3,13678 <memmove+0x6c>
   13638:	218b883a 	add	r5,r4,r6
   1363c:	1989c83a 	sub	r4,r3,r6
   13640:	30000526 	beq	r6,zero,13658 <memmove+0x4c>
   13644:	18ffffc4 	addi	r3,r3,-1
   13648:	18800003 	ldbu	r2,0(r3)
   1364c:	297fffc4 	addi	r5,r5,-1
   13650:	28800005 	stb	r2,0(r5)
   13654:	193ffb1e 	bne	r3,r4,13644 <memmove+0x38>
   13658:	8005883a 	mov	r2,r16
   1365c:	dfc00417 	ldw	ra,16(sp)
   13660:	dcc00317 	ldw	r19,12(sp)
   13664:	dc800217 	ldw	r18,8(sp)
   13668:	dc400117 	ldw	r17,4(sp)
   1366c:	dc000017 	ldw	r16,0(sp)
   13670:	dec00504 	addi	sp,sp,20
   13674:	f800283a 	ret
   13678:	008003c4 	movi	r2,15
   1367c:	1180422e 	bgeu	r2,r6,13788 <memmove+0x17c>
   13680:	2c04b03a 	or	r2,r5,r16
   13684:	108000cc 	andi	r2,r2,3
   13688:	10003f1e 	bne	r2,zero,13788 <memmove+0x17c>
   1368c:	32bffc04 	addi	r10,r6,-16
   13690:	5014d13a 	srli	r10,r10,4
   13694:	81000404 	addi	r4,r16,16
   13698:	8007883a 	mov	r3,r16
   1369c:	5004913a 	slli	r2,r10,4
   136a0:	280f883a 	mov	r7,r5
   136a4:	2089883a 	add	r4,r4,r2
   136a8:	38800017 	ldw	r2,0(r7)
   136ac:	18c00404 	addi	r3,r3,16
   136b0:	39c00404 	addi	r7,r7,16
   136b4:	18bffc15 	stw	r2,-16(r3)
   136b8:	38bffd17 	ldw	r2,-12(r7)
   136bc:	18bffd15 	stw	r2,-12(r3)
   136c0:	38bffe17 	ldw	r2,-8(r7)
   136c4:	18bffe15 	stw	r2,-8(r3)
   136c8:	38bfff17 	ldw	r2,-4(r7)
   136cc:	18bfff15 	stw	r2,-4(r3)
   136d0:	193ff51e 	bne	r3,r4,136a8 <memmove+0x9c>
   136d4:	52800044 	addi	r10,r10,1
   136d8:	5014913a 	slli	r10,r10,4
   136dc:	31c003cc 	andi	r7,r6,15
   136e0:	008000c4 	movi	r2,3
   136e4:	8287883a 	add	r3,r16,r10
   136e8:	2a95883a 	add	r10,r5,r10
   136ec:	11c0282e 	bgeu	r2,r7,13790 <memmove+0x184>
   136f0:	3c7fff04 	addi	r17,r7,-4
   136f4:	8808d0ba 	srli	r4,r17,2
   136f8:	1a400104 	addi	r9,r3,4
   136fc:	180d883a 	mov	r6,r3
   13700:	2105883a 	add	r2,r4,r4
   13704:	1085883a 	add	r2,r2,r2
   13708:	4893883a 	add	r9,r9,r2
   1370c:	5005883a 	mov	r2,r10
   13710:	12000017 	ldw	r8,0(r2)
   13714:	31800104 	addi	r6,r6,4
   13718:	10800104 	addi	r2,r2,4
   1371c:	323fff15 	stw	r8,-4(r6)
   13720:	327ffb1e 	bne	r6,r9,13710 <memmove+0x104>
   13724:	20800044 	addi	r2,r4,1
   13728:	1085883a 	add	r2,r2,r2
   1372c:	1085883a 	add	r2,r2,r2
   13730:	017fff04 	movi	r5,-4
   13734:	18a5883a 	add	r18,r3,r2
   13738:	50a7883a 	add	r19,r10,r2
   1373c:	0013e000 	call	13e00 <__mulsi3>
   13740:	144f883a 	add	r7,r2,r17
   13744:	980b883a 	mov	r5,r19
   13748:	9007883a 	mov	r3,r18
   1374c:	383fc226 	beq	r7,zero,13658 <memmove+0x4c>
   13750:	19cf883a 	add	r7,r3,r7
   13754:	29800003 	ldbu	r6,0(r5)
   13758:	18c00044 	addi	r3,r3,1
   1375c:	29400044 	addi	r5,r5,1
   13760:	19bfffc5 	stb	r6,-1(r3)
   13764:	19fffb1e 	bne	r3,r7,13754 <memmove+0x148>
   13768:	8005883a 	mov	r2,r16
   1376c:	dfc00417 	ldw	ra,16(sp)
   13770:	dcc00317 	ldw	r19,12(sp)
   13774:	dc800217 	ldw	r18,8(sp)
   13778:	dc400117 	ldw	r17,4(sp)
   1377c:	dc000017 	ldw	r16,0(sp)
   13780:	dec00504 	addi	sp,sp,20
   13784:	f800283a 	ret
   13788:	8007883a 	mov	r3,r16
   1378c:	003fef06 	br	1374c <memmove+0x140>
   13790:	500b883a 	mov	r5,r10
   13794:	003fed06 	br	1374c <memmove+0x140>

00013798 <_read_r>:
   13798:	defffd04 	addi	sp,sp,-12
   1379c:	dc400115 	stw	r17,4(sp)
   137a0:	dc000015 	stw	r16,0(sp)
   137a4:	2023883a 	mov	r17,r4
   137a8:	040000b4 	movhi	r16,2
   137ac:	8429d904 	addi	r16,r16,-22684
   137b0:	2809883a 	mov	r4,r5
   137b4:	300b883a 	mov	r5,r6
   137b8:	380d883a 	mov	r6,r7
   137bc:	dfc00215 	stw	ra,8(sp)
   137c0:	80000015 	stw	zero,0(r16)
   137c4:	00147140 	call	14714 <read>
   137c8:	00ffffc4 	movi	r3,-1
   137cc:	10c00526 	beq	r2,r3,137e4 <_read_r+0x4c>
   137d0:	dfc00217 	ldw	ra,8(sp)
   137d4:	dc400117 	ldw	r17,4(sp)
   137d8:	dc000017 	ldw	r16,0(sp)
   137dc:	dec00304 	addi	sp,sp,12
   137e0:	f800283a 	ret
   137e4:	80c00017 	ldw	r3,0(r16)
   137e8:	183ff926 	beq	r3,zero,137d0 <_read_r+0x38>
   137ec:	88c00015 	stw	r3,0(r17)
   137f0:	dfc00217 	ldw	ra,8(sp)
   137f4:	dc400117 	ldw	r17,4(sp)
   137f8:	dc000017 	ldw	r16,0(sp)
   137fc:	dec00304 	addi	sp,sp,12
   13800:	f800283a 	ret

00013804 <_realloc_r>:
   13804:	defff504 	addi	sp,sp,-44
   13808:	dd400615 	stw	r21,24(sp)
   1380c:	dc800315 	stw	r18,12(sp)
   13810:	dc000115 	stw	r16,4(sp)
   13814:	dfc00a15 	stw	ra,40(sp)
   13818:	df000915 	stw	fp,36(sp)
   1381c:	ddc00815 	stw	r23,32(sp)
   13820:	dd800715 	stw	r22,28(sp)
   13824:	dd000515 	stw	r20,20(sp)
   13828:	dcc00415 	stw	r19,16(sp)
   1382c:	dc400215 	stw	r17,8(sp)
   13830:	2821883a 	mov	r16,r5
   13834:	202b883a 	mov	r21,r4
   13838:	3025883a 	mov	r18,r6
   1383c:	28009626 	beq	r5,zero,13a98 <_realloc_r+0x294>
   13840:	00143ec0 	call	143ec <__malloc_lock>
   13844:	80bfff17 	ldw	r2,-4(r16)
   13848:	04ffff04 	movi	r19,-4
   1384c:	90c002c4 	addi	r3,r18,11
   13850:	01000584 	movi	r4,22
   13854:	85bffe04 	addi	r22,r16,-8
   13858:	14e6703a 	and	r19,r2,r19
   1385c:	20c0372e 	bgeu	r4,r3,1393c <_realloc_r+0x138>
   13860:	047ffe04 	movi	r17,-8
   13864:	1c62703a 	and	r17,r3,r17
   13868:	8807883a 	mov	r3,r17
   1386c:	88005a16 	blt	r17,zero,139d8 <_realloc_r+0x1d4>
   13870:	8c805936 	bltu	r17,r18,139d8 <_realloc_r+0x1d4>
   13874:	98c0340e 	bge	r19,r3,13948 <_realloc_r+0x144>
   13878:	07000074 	movhi	fp,1
   1387c:	e71d7d04 	addi	fp,fp,30196
   13880:	e1400217 	ldw	r5,8(fp)
   13884:	b4c9883a 	add	r4,r22,r19
   13888:	29009026 	beq	r5,r4,13acc <_realloc_r+0x2c8>
   1388c:	21800117 	ldw	r6,4(r4)
   13890:	01ffff84 	movi	r7,-2
   13894:	31ce703a 	and	r7,r6,r7
   13898:	21cf883a 	add	r7,r4,r7
   1389c:	39c00117 	ldw	r7,4(r7)
   138a0:	39c0004c 	andi	r7,r7,1
   138a4:	38004326 	beq	r7,zero,139b4 <_realloc_r+0x1b0>
   138a8:	000d883a 	mov	r6,zero
   138ac:	0009883a 	mov	r4,zero
   138b0:	1080004c 	andi	r2,r2,1
   138b4:	10005a1e 	bne	r2,zero,13a20 <_realloc_r+0x21c>
   138b8:	85fffe17 	ldw	r23,-8(r16)
   138bc:	00bfff04 	movi	r2,-4
   138c0:	b5efc83a 	sub	r23,r22,r23
   138c4:	b9c00117 	ldw	r7,4(r23)
   138c8:	388e703a 	and	r7,r7,r2
   138cc:	3ccf883a 	add	r7,r7,r19
   138d0:	20005226 	beq	r4,zero,13a1c <_realloc_r+0x218>
   138d4:	31e9883a 	add	r20,r6,r7
   138d8:	2140c726 	beq	r4,r5,13bf8 <_realloc_r+0x3f4>
   138dc:	a0c04f16 	blt	r20,r3,13a1c <_realloc_r+0x218>
   138e0:	20800317 	ldw	r2,12(r4)
   138e4:	20c00217 	ldw	r3,8(r4)
   138e8:	99bfff04 	addi	r6,r19,-4
   138ec:	01000904 	movi	r4,36
   138f0:	18800315 	stw	r2,12(r3)
   138f4:	10c00215 	stw	r3,8(r2)
   138f8:	b8c00217 	ldw	r3,8(r23)
   138fc:	b8800317 	ldw	r2,12(r23)
   13900:	bc800204 	addi	r18,r23,8
   13904:	18800315 	stw	r2,12(r3)
   13908:	10c00215 	stw	r3,8(r2)
   1390c:	2180ed36 	bltu	r4,r6,13cc4 <_realloc_r+0x4c0>
   13910:	008004c4 	movi	r2,19
   13914:	11809b2e 	bgeu	r2,r6,13b84 <_realloc_r+0x380>
   13918:	80800017 	ldw	r2,0(r16)
   1391c:	b8800215 	stw	r2,8(r23)
   13920:	80800117 	ldw	r2,4(r16)
   13924:	b8800315 	stw	r2,12(r23)
   13928:	008006c4 	movi	r2,27
   1392c:	1180f936 	bltu	r2,r6,13d14 <_realloc_r+0x510>
   13930:	b8800404 	addi	r2,r23,16
   13934:	80c00204 	addi	r3,r16,8
   13938:	00009406 	br	13b8c <_realloc_r+0x388>
   1393c:	00c00404 	movi	r3,16
   13940:	1823883a 	mov	r17,r3
   13944:	003fca06 	br	13870 <_realloc_r+0x6c>
   13948:	9829883a 	mov	r20,r19
   1394c:	a447c83a 	sub	r3,r20,r17
   13950:	010003c4 	movi	r4,15
   13954:	1080004c 	andi	r2,r2,1
   13958:	20c02336 	bltu	r4,r3,139e8 <_realloc_r+0x1e4>
   1395c:	1504b03a 	or	r2,r2,r20
   13960:	b0800115 	stw	r2,4(r22)
   13964:	b52d883a 	add	r22,r22,r20
   13968:	b0800117 	ldw	r2,4(r22)
   1396c:	10800054 	ori	r2,r2,1
   13970:	b0800115 	stw	r2,4(r22)
   13974:	a809883a 	mov	r4,r21
   13978:	001440c0 	call	1440c <__malloc_unlock>
   1397c:	8025883a 	mov	r18,r16
   13980:	9005883a 	mov	r2,r18
   13984:	dfc00a17 	ldw	ra,40(sp)
   13988:	df000917 	ldw	fp,36(sp)
   1398c:	ddc00817 	ldw	r23,32(sp)
   13990:	dd800717 	ldw	r22,28(sp)
   13994:	dd400617 	ldw	r21,24(sp)
   13998:	dd000517 	ldw	r20,20(sp)
   1399c:	dcc00417 	ldw	r19,16(sp)
   139a0:	dc800317 	ldw	r18,12(sp)
   139a4:	dc400217 	ldw	r17,8(sp)
   139a8:	dc000117 	ldw	r16,4(sp)
   139ac:	dec00b04 	addi	sp,sp,44
   139b0:	f800283a 	ret
   139b4:	01ffff04 	movi	r7,-4
   139b8:	31cc703a 	and	r6,r6,r7
   139bc:	34e9883a 	add	r20,r6,r19
   139c0:	a0ffbb16 	blt	r20,r3,138b0 <_realloc_r+0xac>
   139c4:	20c00317 	ldw	r3,12(r4)
   139c8:	21000217 	ldw	r4,8(r4)
   139cc:	20c00315 	stw	r3,12(r4)
   139d0:	19000215 	stw	r4,8(r3)
   139d4:	003fdd06 	br	1394c <_realloc_r+0x148>
   139d8:	00800304 	movi	r2,12
   139dc:	a8800015 	stw	r2,0(r21)
   139e0:	0025883a 	mov	r18,zero
   139e4:	003fe606 	br	13980 <_realloc_r+0x17c>
   139e8:	1444b03a 	or	r2,r2,r17
   139ec:	b0800115 	stw	r2,4(r22)
   139f0:	b44b883a 	add	r5,r22,r17
   139f4:	18800054 	ori	r2,r3,1
   139f8:	28800115 	stw	r2,4(r5)
   139fc:	28c7883a 	add	r3,r5,r3
   13a00:	18800117 	ldw	r2,4(r3)
   13a04:	a809883a 	mov	r4,r21
   13a08:	29400204 	addi	r5,r5,8
   13a0c:	10800054 	ori	r2,r2,1
   13a10:	18800115 	stw	r2,4(r3)
   13a14:	0010ea00 	call	10ea0 <_free_r>
   13a18:	003fd606 	br	13974 <_realloc_r+0x170>
   13a1c:	38c0330e 	bge	r7,r3,13aec <_realloc_r+0x2e8>
   13a20:	900b883a 	mov	r5,r18
   13a24:	a809883a 	mov	r4,r21
   13a28:	00119780 	call	11978 <_malloc_r>
   13a2c:	1025883a 	mov	r18,r2
   13a30:	10001626 	beq	r2,zero,13a8c <_realloc_r+0x288>
   13a34:	80bfff17 	ldw	r2,-4(r16)
   13a38:	00ffff84 	movi	r3,-2
   13a3c:	913ffe04 	addi	r4,r18,-8
   13a40:	10c6703a 	and	r3,r2,r3
   13a44:	b0c7883a 	add	r3,r22,r3
   13a48:	20c09926 	beq	r4,r3,13cb0 <_realloc_r+0x4ac>
   13a4c:	99bfff04 	addi	r6,r19,-4
   13a50:	00800904 	movi	r2,36
   13a54:	11806436 	bltu	r2,r6,13be8 <_realloc_r+0x3e4>
   13a58:	00c004c4 	movi	r3,19
   13a5c:	19804036 	bltu	r3,r6,13b60 <_realloc_r+0x35c>
   13a60:	9005883a 	mov	r2,r18
   13a64:	8007883a 	mov	r3,r16
   13a68:	19000017 	ldw	r4,0(r3)
   13a6c:	11000015 	stw	r4,0(r2)
   13a70:	19000117 	ldw	r4,4(r3)
   13a74:	11000115 	stw	r4,4(r2)
   13a78:	18c00217 	ldw	r3,8(r3)
   13a7c:	10c00215 	stw	r3,8(r2)
   13a80:	a809883a 	mov	r4,r21
   13a84:	800b883a 	mov	r5,r16
   13a88:	0010ea00 	call	10ea0 <_free_r>
   13a8c:	a809883a 	mov	r4,r21
   13a90:	001440c0 	call	1440c <__malloc_unlock>
   13a94:	003fba06 	br	13980 <_realloc_r+0x17c>
   13a98:	300b883a 	mov	r5,r6
   13a9c:	dfc00a17 	ldw	ra,40(sp)
   13aa0:	df000917 	ldw	fp,36(sp)
   13aa4:	ddc00817 	ldw	r23,32(sp)
   13aa8:	dd800717 	ldw	r22,28(sp)
   13aac:	dd400617 	ldw	r21,24(sp)
   13ab0:	dd000517 	ldw	r20,20(sp)
   13ab4:	dcc00417 	ldw	r19,16(sp)
   13ab8:	dc800317 	ldw	r18,12(sp)
   13abc:	dc400217 	ldw	r17,8(sp)
   13ac0:	dc000117 	ldw	r16,4(sp)
   13ac4:	dec00b04 	addi	sp,sp,44
   13ac8:	00119781 	jmpi	11978 <_malloc_r>
   13acc:	29800117 	ldw	r6,4(r5)
   13ad0:	013fff04 	movi	r4,-4
   13ad4:	89c00404 	addi	r7,r17,16
   13ad8:	310c703a 	and	r6,r6,r4
   13adc:	34c9883a 	add	r4,r6,r19
   13ae0:	21c0340e 	bge	r4,r7,13bb4 <_realloc_r+0x3b0>
   13ae4:	2809883a 	mov	r4,r5
   13ae8:	003f7106 	br	138b0 <_realloc_r+0xac>
   13aec:	b8800317 	ldw	r2,12(r23)
   13af0:	b8c00217 	ldw	r3,8(r23)
   13af4:	99bfff04 	addi	r6,r19,-4
   13af8:	01000904 	movi	r4,36
   13afc:	18800315 	stw	r2,12(r3)
   13b00:	10c00215 	stw	r3,8(r2)
   13b04:	bc800204 	addi	r18,r23,8
   13b08:	21807836 	bltu	r4,r6,13cec <_realloc_r+0x4e8>
   13b0c:	008004c4 	movi	r2,19
   13b10:	1180732e 	bgeu	r2,r6,13ce0 <_realloc_r+0x4dc>
   13b14:	80800017 	ldw	r2,0(r16)
   13b18:	b8800215 	stw	r2,8(r23)
   13b1c:	80800117 	ldw	r2,4(r16)
   13b20:	b8800315 	stw	r2,12(r23)
   13b24:	008006c4 	movi	r2,27
   13b28:	11808936 	bltu	r2,r6,13d50 <_realloc_r+0x54c>
   13b2c:	b8800404 	addi	r2,r23,16
   13b30:	80c00204 	addi	r3,r16,8
   13b34:	19000017 	ldw	r4,0(r3)
   13b38:	9021883a 	mov	r16,r18
   13b3c:	3829883a 	mov	r20,r7
   13b40:	11000015 	stw	r4,0(r2)
   13b44:	19000117 	ldw	r4,4(r3)
   13b48:	b82d883a 	mov	r22,r23
   13b4c:	11000115 	stw	r4,4(r2)
   13b50:	18c00217 	ldw	r3,8(r3)
   13b54:	10c00215 	stw	r3,8(r2)
   13b58:	b8800117 	ldw	r2,4(r23)
   13b5c:	003f7b06 	br	1394c <_realloc_r+0x148>
   13b60:	80c00017 	ldw	r3,0(r16)
   13b64:	90c00015 	stw	r3,0(r18)
   13b68:	80c00117 	ldw	r3,4(r16)
   13b6c:	90c00115 	stw	r3,4(r18)
   13b70:	00c006c4 	movi	r3,27
   13b74:	19804636 	bltu	r3,r6,13c90 <_realloc_r+0x48c>
   13b78:	90800204 	addi	r2,r18,8
   13b7c:	80c00204 	addi	r3,r16,8
   13b80:	003fb906 	br	13a68 <_realloc_r+0x264>
   13b84:	9005883a 	mov	r2,r18
   13b88:	8007883a 	mov	r3,r16
   13b8c:	19000017 	ldw	r4,0(r3)
   13b90:	9021883a 	mov	r16,r18
   13b94:	b82d883a 	mov	r22,r23
   13b98:	11000015 	stw	r4,0(r2)
   13b9c:	19000117 	ldw	r4,4(r3)
   13ba0:	11000115 	stw	r4,4(r2)
   13ba4:	18c00217 	ldw	r3,8(r3)
   13ba8:	10c00215 	stw	r3,8(r2)
   13bac:	b8800117 	ldw	r2,4(r23)
   13bb0:	003f6606 	br	1394c <_realloc_r+0x148>
   13bb4:	2445c83a 	sub	r2,r4,r17
   13bb8:	b46d883a 	add	r22,r22,r17
   13bbc:	10800054 	ori	r2,r2,1
   13bc0:	b0800115 	stw	r2,4(r22)
   13bc4:	80bfff17 	ldw	r2,-4(r16)
   13bc8:	a809883a 	mov	r4,r21
   13bcc:	e5800215 	stw	r22,8(fp)
   13bd0:	1080004c 	andi	r2,r2,1
   13bd4:	88a2b03a 	or	r17,r17,r2
   13bd8:	847fff15 	stw	r17,-4(r16)
   13bdc:	001440c0 	call	1440c <__malloc_unlock>
   13be0:	8025883a 	mov	r18,r16
   13be4:	003f6606 	br	13980 <_realloc_r+0x17c>
   13be8:	9009883a 	mov	r4,r18
   13bec:	800b883a 	mov	r5,r16
   13bf0:	001360c0 	call	1360c <memmove>
   13bf4:	003fa206 	br	13a80 <_realloc_r+0x27c>
   13bf8:	88800404 	addi	r2,r17,16
   13bfc:	a0bf8716 	blt	r20,r2,13a1c <_realloc_r+0x218>
   13c00:	b8800317 	ldw	r2,12(r23)
   13c04:	b8c00217 	ldw	r3,8(r23)
   13c08:	99bfff04 	addi	r6,r19,-4
   13c0c:	01000904 	movi	r4,36
   13c10:	18800315 	stw	r2,12(r3)
   13c14:	10c00215 	stw	r3,8(r2)
   13c18:	bc800204 	addi	r18,r23,8
   13c1c:	21806536 	bltu	r4,r6,13db4 <_realloc_r+0x5b0>
   13c20:	008004c4 	movi	r2,19
   13c24:	1180592e 	bgeu	r2,r6,13d8c <_realloc_r+0x588>
   13c28:	80800017 	ldw	r2,0(r16)
   13c2c:	b8800215 	stw	r2,8(r23)
   13c30:	80800117 	ldw	r2,4(r16)
   13c34:	b8800315 	stw	r2,12(r23)
   13c38:	008006c4 	movi	r2,27
   13c3c:	11806136 	bltu	r2,r6,13dc4 <_realloc_r+0x5c0>
   13c40:	b8800404 	addi	r2,r23,16
   13c44:	80c00204 	addi	r3,r16,8
   13c48:	19000017 	ldw	r4,0(r3)
   13c4c:	11000015 	stw	r4,0(r2)
   13c50:	19000117 	ldw	r4,4(r3)
   13c54:	11000115 	stw	r4,4(r2)
   13c58:	18c00217 	ldw	r3,8(r3)
   13c5c:	10c00215 	stw	r3,8(r2)
   13c60:	a447c83a 	sub	r3,r20,r17
   13c64:	bc45883a 	add	r2,r23,r17
   13c68:	18c00054 	ori	r3,r3,1
   13c6c:	10c00115 	stw	r3,4(r2)
   13c70:	b8c00117 	ldw	r3,4(r23)
   13c74:	e0800215 	stw	r2,8(fp)
   13c78:	a809883a 	mov	r4,r21
   13c7c:	1880004c 	andi	r2,r3,1
   13c80:	88a2b03a 	or	r17,r17,r2
   13c84:	bc400115 	stw	r17,4(r23)
   13c88:	001440c0 	call	1440c <__malloc_unlock>
   13c8c:	003f3c06 	br	13980 <_realloc_r+0x17c>
   13c90:	80c00217 	ldw	r3,8(r16)
   13c94:	90c00215 	stw	r3,8(r18)
   13c98:	80c00317 	ldw	r3,12(r16)
   13c9c:	90c00315 	stw	r3,12(r18)
   13ca0:	30802426 	beq	r6,r2,13d34 <_realloc_r+0x530>
   13ca4:	90800404 	addi	r2,r18,16
   13ca8:	80c00404 	addi	r3,r16,16
   13cac:	003f6e06 	br	13a68 <_realloc_r+0x264>
   13cb0:	953fff17 	ldw	r20,-4(r18)
   13cb4:	00ffff04 	movi	r3,-4
   13cb8:	a0e8703a 	and	r20,r20,r3
   13cbc:	a4e9883a 	add	r20,r20,r19
   13cc0:	003f2206 	br	1394c <_realloc_r+0x148>
   13cc4:	800b883a 	mov	r5,r16
   13cc8:	9009883a 	mov	r4,r18
   13ccc:	001360c0 	call	1360c <memmove>
   13cd0:	9021883a 	mov	r16,r18
   13cd4:	b8800117 	ldw	r2,4(r23)
   13cd8:	b82d883a 	mov	r22,r23
   13cdc:	003f1b06 	br	1394c <_realloc_r+0x148>
   13ce0:	9005883a 	mov	r2,r18
   13ce4:	8007883a 	mov	r3,r16
   13ce8:	003f9206 	br	13b34 <_realloc_r+0x330>
   13cec:	800b883a 	mov	r5,r16
   13cf0:	9009883a 	mov	r4,r18
   13cf4:	d9c00015 	stw	r7,0(sp)
   13cf8:	001360c0 	call	1360c <memmove>
   13cfc:	d9c00017 	ldw	r7,0(sp)
   13d00:	9021883a 	mov	r16,r18
   13d04:	b8800117 	ldw	r2,4(r23)
   13d08:	3829883a 	mov	r20,r7
   13d0c:	b82d883a 	mov	r22,r23
   13d10:	003f0e06 	br	1394c <_realloc_r+0x148>
   13d14:	80800217 	ldw	r2,8(r16)
   13d18:	b8800415 	stw	r2,16(r23)
   13d1c:	80800317 	ldw	r2,12(r16)
   13d20:	b8800515 	stw	r2,20(r23)
   13d24:	31001226 	beq	r6,r4,13d70 <_realloc_r+0x56c>
   13d28:	b8800604 	addi	r2,r23,24
   13d2c:	80c00404 	addi	r3,r16,16
   13d30:	003f9606 	br	13b8c <_realloc_r+0x388>
   13d34:	81000417 	ldw	r4,16(r16)
   13d38:	90800604 	addi	r2,r18,24
   13d3c:	80c00604 	addi	r3,r16,24
   13d40:	91000415 	stw	r4,16(r18)
   13d44:	81000517 	ldw	r4,20(r16)
   13d48:	91000515 	stw	r4,20(r18)
   13d4c:	003f4606 	br	13a68 <_realloc_r+0x264>
   13d50:	80800217 	ldw	r2,8(r16)
   13d54:	b8800415 	stw	r2,16(r23)
   13d58:	80800317 	ldw	r2,12(r16)
   13d5c:	b8800515 	stw	r2,20(r23)
   13d60:	31000d26 	beq	r6,r4,13d98 <_realloc_r+0x594>
   13d64:	b8800604 	addi	r2,r23,24
   13d68:	80c00404 	addi	r3,r16,16
   13d6c:	003f7106 	br	13b34 <_realloc_r+0x330>
   13d70:	81000417 	ldw	r4,16(r16)
   13d74:	b8800804 	addi	r2,r23,32
   13d78:	80c00604 	addi	r3,r16,24
   13d7c:	b9000615 	stw	r4,24(r23)
   13d80:	81000517 	ldw	r4,20(r16)
   13d84:	b9000715 	stw	r4,28(r23)
   13d88:	003f8006 	br	13b8c <_realloc_r+0x388>
   13d8c:	9005883a 	mov	r2,r18
   13d90:	8007883a 	mov	r3,r16
   13d94:	003fac06 	br	13c48 <_realloc_r+0x444>
   13d98:	81000417 	ldw	r4,16(r16)
   13d9c:	b8800804 	addi	r2,r23,32
   13da0:	80c00604 	addi	r3,r16,24
   13da4:	b9000615 	stw	r4,24(r23)
   13da8:	81000517 	ldw	r4,20(r16)
   13dac:	b9000715 	stw	r4,28(r23)
   13db0:	003f6006 	br	13b34 <_realloc_r+0x330>
   13db4:	9009883a 	mov	r4,r18
   13db8:	800b883a 	mov	r5,r16
   13dbc:	001360c0 	call	1360c <memmove>
   13dc0:	003fa706 	br	13c60 <_realloc_r+0x45c>
   13dc4:	80800217 	ldw	r2,8(r16)
   13dc8:	b8800415 	stw	r2,16(r23)
   13dcc:	80800317 	ldw	r2,12(r16)
   13dd0:	b8800515 	stw	r2,20(r23)
   13dd4:	31000326 	beq	r6,r4,13de4 <_realloc_r+0x5e0>
   13dd8:	b8800604 	addi	r2,r23,24
   13ddc:	80c00404 	addi	r3,r16,16
   13de0:	003f9906 	br	13c48 <_realloc_r+0x444>
   13de4:	81000417 	ldw	r4,16(r16)
   13de8:	b8800804 	addi	r2,r23,32
   13dec:	80c00604 	addi	r3,r16,24
   13df0:	b9000615 	stw	r4,24(r23)
   13df4:	81000517 	ldw	r4,20(r16)
   13df8:	b9000715 	stw	r4,28(r23)
   13dfc:	003f9206 	br	13c48 <_realloc_r+0x444>

00013e00 <__mulsi3>:
   13e00:	0005883a 	mov	r2,zero
   13e04:	20000726 	beq	r4,zero,13e24 <__mulsi3+0x24>
   13e08:	20c0004c 	andi	r3,r4,1
   13e0c:	2008d07a 	srli	r4,r4,1
   13e10:	18000126 	beq	r3,zero,13e18 <__mulsi3+0x18>
   13e14:	1145883a 	add	r2,r2,r5
   13e18:	294b883a 	add	r5,r5,r5
   13e1c:	203ffa1e 	bne	r4,zero,13e08 <__mulsi3+0x8>
   13e20:	f800283a 	ret
   13e24:	f800283a 	ret

00013e28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13e28:	defffe04 	addi	sp,sp,-8
   13e2c:	dfc00115 	stw	ra,4(sp)
   13e30:	df000015 	stw	fp,0(sp)
   13e34:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13e38:	008000b4 	movhi	r2,2
   13e3c:	10a31404 	addi	r2,r2,-29616
   13e40:	10800017 	ldw	r2,0(r2)
   13e44:	10000526 	beq	r2,zero,13e5c <alt_get_errno+0x34>
   13e48:	008000b4 	movhi	r2,2
   13e4c:	10a31404 	addi	r2,r2,-29616
   13e50:	10800017 	ldw	r2,0(r2)
   13e54:	103ee83a 	callr	r2
   13e58:	00000206 	br	13e64 <alt_get_errno+0x3c>
   13e5c:	008000b4 	movhi	r2,2
   13e60:	10a9d904 	addi	r2,r2,-22684
}
   13e64:	e037883a 	mov	sp,fp
   13e68:	dfc00117 	ldw	ra,4(sp)
   13e6c:	df000017 	ldw	fp,0(sp)
   13e70:	dec00204 	addi	sp,sp,8
   13e74:	f800283a 	ret

00013e78 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   13e78:	defffb04 	addi	sp,sp,-20
   13e7c:	dfc00415 	stw	ra,16(sp)
   13e80:	df000315 	stw	fp,12(sp)
   13e84:	df000304 	addi	fp,sp,12
   13e88:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   13e8c:	e0bfff17 	ldw	r2,-4(fp)
   13e90:	10000716 	blt	r2,zero,13eb0 <close+0x38>
   13e94:	e13fff17 	ldw	r4,-4(fp)
   13e98:	01400304 	movi	r5,12
   13e9c:	0013e000 	call	13e00 <__mulsi3>
   13ea0:	00c00074 	movhi	r3,1
   13ea4:	18de8904 	addi	r3,r3,31268
   13ea8:	10c5883a 	add	r2,r2,r3
   13eac:	00000106 	br	13eb4 <close+0x3c>
   13eb0:	0005883a 	mov	r2,zero
   13eb4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   13eb8:	e0bffd17 	ldw	r2,-12(fp)
   13ebc:	10001826 	beq	r2,zero,13f20 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   13ec0:	e0bffd17 	ldw	r2,-12(fp)
   13ec4:	10800017 	ldw	r2,0(r2)
   13ec8:	10800417 	ldw	r2,16(r2)
   13ecc:	10000626 	beq	r2,zero,13ee8 <close+0x70>
   13ed0:	e0bffd17 	ldw	r2,-12(fp)
   13ed4:	10800017 	ldw	r2,0(r2)
   13ed8:	10800417 	ldw	r2,16(r2)
   13edc:	e13ffd17 	ldw	r4,-12(fp)
   13ee0:	103ee83a 	callr	r2
   13ee4:	00000106 	br	13eec <close+0x74>
   13ee8:	0005883a 	mov	r2,zero
   13eec:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   13ef0:	e13fff17 	ldw	r4,-4(fp)
   13ef4:	00148080 	call	14808 <alt_release_fd>
    if (rval < 0)
   13ef8:	e0bffe17 	ldw	r2,-8(fp)
   13efc:	1000060e 	bge	r2,zero,13f18 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   13f00:	0013e280 	call	13e28 <alt_get_errno>
   13f04:	e0fffe17 	ldw	r3,-8(fp)
   13f08:	00c7c83a 	sub	r3,zero,r3
   13f0c:	10c00015 	stw	r3,0(r2)
      return -1;
   13f10:	00bfffc4 	movi	r2,-1
   13f14:	00000606 	br	13f30 <close+0xb8>
    }
    return 0;
   13f18:	0005883a 	mov	r2,zero
   13f1c:	00000406 	br	13f30 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13f20:	0013e280 	call	13e28 <alt_get_errno>
   13f24:	00c01444 	movi	r3,81
   13f28:	10c00015 	stw	r3,0(r2)
    return -1;
   13f2c:	00bfffc4 	movi	r2,-1
  }
}
   13f30:	e037883a 	mov	sp,fp
   13f34:	dfc00117 	ldw	ra,4(sp)
   13f38:	df000017 	ldw	fp,0(sp)
   13f3c:	dec00204 	addi	sp,sp,8
   13f40:	f800283a 	ret

00013f44 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   13f44:	defffc04 	addi	sp,sp,-16
   13f48:	df000315 	stw	fp,12(sp)
   13f4c:	df000304 	addi	fp,sp,12
   13f50:	e13ffd15 	stw	r4,-12(fp)
   13f54:	e17ffe15 	stw	r5,-8(fp)
   13f58:	e1bfff15 	stw	r6,-4(fp)
  return len;
   13f5c:	e0bfff17 	ldw	r2,-4(fp)
}
   13f60:	e037883a 	mov	sp,fp
   13f64:	df000017 	ldw	fp,0(sp)
   13f68:	dec00104 	addi	sp,sp,4
   13f6c:	f800283a 	ret

00013f70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13f70:	defffe04 	addi	sp,sp,-8
   13f74:	dfc00115 	stw	ra,4(sp)
   13f78:	df000015 	stw	fp,0(sp)
   13f7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13f80:	008000b4 	movhi	r2,2
   13f84:	10a31404 	addi	r2,r2,-29616
   13f88:	10800017 	ldw	r2,0(r2)
   13f8c:	10000526 	beq	r2,zero,13fa4 <alt_get_errno+0x34>
   13f90:	008000b4 	movhi	r2,2
   13f94:	10a31404 	addi	r2,r2,-29616
   13f98:	10800017 	ldw	r2,0(r2)
   13f9c:	103ee83a 	callr	r2
   13fa0:	00000206 	br	13fac <alt_get_errno+0x3c>
   13fa4:	008000b4 	movhi	r2,2
   13fa8:	10a9d904 	addi	r2,r2,-22684
}
   13fac:	e037883a 	mov	sp,fp
   13fb0:	dfc00117 	ldw	ra,4(sp)
   13fb4:	df000017 	ldw	fp,0(sp)
   13fb8:	dec00204 	addi	sp,sp,8
   13fbc:	f800283a 	ret

00013fc0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   13fc0:	defffb04 	addi	sp,sp,-20
   13fc4:	dfc00415 	stw	ra,16(sp)
   13fc8:	df000315 	stw	fp,12(sp)
   13fcc:	df000304 	addi	fp,sp,12
   13fd0:	e13ffe15 	stw	r4,-8(fp)
   13fd4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13fd8:	e0bffe17 	ldw	r2,-8(fp)
   13fdc:	10000716 	blt	r2,zero,13ffc <fstat+0x3c>
   13fe0:	e13ffe17 	ldw	r4,-8(fp)
   13fe4:	01400304 	movi	r5,12
   13fe8:	0013e000 	call	13e00 <__mulsi3>
   13fec:	00c00074 	movhi	r3,1
   13ff0:	18de8904 	addi	r3,r3,31268
   13ff4:	10c5883a 	add	r2,r2,r3
   13ff8:	00000106 	br	14000 <fstat+0x40>
   13ffc:	0005883a 	mov	r2,zero
   14000:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   14004:	e0bffd17 	ldw	r2,-12(fp)
   14008:	10001026 	beq	r2,zero,1404c <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   1400c:	e0bffd17 	ldw	r2,-12(fp)
   14010:	10800017 	ldw	r2,0(r2)
   14014:	10800817 	ldw	r2,32(r2)
   14018:	10000726 	beq	r2,zero,14038 <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
   1401c:	e0bffd17 	ldw	r2,-12(fp)
   14020:	10800017 	ldw	r2,0(r2)
   14024:	10800817 	ldw	r2,32(r2)
   14028:	e13ffd17 	ldw	r4,-12(fp)
   1402c:	e17fff17 	ldw	r5,-4(fp)
   14030:	103ee83a 	callr	r2
   14034:	00000906 	br	1405c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   14038:	e0bfff17 	ldw	r2,-4(fp)
   1403c:	00c80004 	movi	r3,8192
   14040:	10c00115 	stw	r3,4(r2)
      return 0;
   14044:	0005883a 	mov	r2,zero
   14048:	00000406 	br	1405c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1404c:	0013f700 	call	13f70 <alt_get_errno>
   14050:	00c01444 	movi	r3,81
   14054:	10c00015 	stw	r3,0(r2)
    return -1;
   14058:	00bfffc4 	movi	r2,-1
  }
}
   1405c:	e037883a 	mov	sp,fp
   14060:	dfc00117 	ldw	ra,4(sp)
   14064:	df000017 	ldw	fp,0(sp)
   14068:	dec00204 	addi	sp,sp,8
   1406c:	f800283a 	ret

00014070 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14070:	defffe04 	addi	sp,sp,-8
   14074:	dfc00115 	stw	ra,4(sp)
   14078:	df000015 	stw	fp,0(sp)
   1407c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14080:	008000b4 	movhi	r2,2
   14084:	10a31404 	addi	r2,r2,-29616
   14088:	10800017 	ldw	r2,0(r2)
   1408c:	10000526 	beq	r2,zero,140a4 <alt_get_errno+0x34>
   14090:	008000b4 	movhi	r2,2
   14094:	10a31404 	addi	r2,r2,-29616
   14098:	10800017 	ldw	r2,0(r2)
   1409c:	103ee83a 	callr	r2
   140a0:	00000206 	br	140ac <alt_get_errno+0x3c>
   140a4:	008000b4 	movhi	r2,2
   140a8:	10a9d904 	addi	r2,r2,-22684
}
   140ac:	e037883a 	mov	sp,fp
   140b0:	dfc00117 	ldw	ra,4(sp)
   140b4:	df000017 	ldw	fp,0(sp)
   140b8:	dec00204 	addi	sp,sp,8
   140bc:	f800283a 	ret

000140c0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   140c0:	deffed04 	addi	sp,sp,-76
   140c4:	dfc01215 	stw	ra,72(sp)
   140c8:	df001115 	stw	fp,68(sp)
   140cc:	df001104 	addi	fp,sp,68
   140d0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   140d4:	e0bfff17 	ldw	r2,-4(fp)
   140d8:	10000716 	blt	r2,zero,140f8 <isatty+0x38>
   140dc:	e13fff17 	ldw	r4,-4(fp)
   140e0:	01400304 	movi	r5,12
   140e4:	0013e000 	call	13e00 <__mulsi3>
   140e8:	00c00074 	movhi	r3,1
   140ec:	18de8904 	addi	r3,r3,31268
   140f0:	10c5883a 	add	r2,r2,r3
   140f4:	00000106 	br	140fc <isatty+0x3c>
   140f8:	0005883a 	mov	r2,zero
   140fc:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   14100:	e0bfef17 	ldw	r2,-68(fp)
   14104:	10000e26 	beq	r2,zero,14140 <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   14108:	e0bfef17 	ldw	r2,-68(fp)
   1410c:	10800017 	ldw	r2,0(r2)
   14110:	10800817 	ldw	r2,32(r2)
   14114:	1000021e 	bne	r2,zero,14120 <isatty+0x60>
    {
      return 1;
   14118:	00800044 	movi	r2,1
   1411c:	00000c06 	br	14150 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   14120:	e0bff004 	addi	r2,fp,-64
   14124:	e13fff17 	ldw	r4,-4(fp)
   14128:	100b883a 	mov	r5,r2
   1412c:	0013fc00 	call	13fc0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   14130:	e0bff117 	ldw	r2,-60(fp)
   14134:	10880020 	cmpeqi	r2,r2,8192
   14138:	10803fcc 	andi	r2,r2,255
   1413c:	00000406 	br	14150 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   14140:	00140700 	call	14070 <alt_get_errno>
   14144:	00c01444 	movi	r3,81
   14148:	10c00015 	stw	r3,0(r2)
    return 0;
   1414c:	0005883a 	mov	r2,zero
  }
}
   14150:	e037883a 	mov	sp,fp
   14154:	dfc00117 	ldw	ra,4(sp)
   14158:	df000017 	ldw	fp,0(sp)
   1415c:	dec00204 	addi	sp,sp,8
   14160:	f800283a 	ret

00014164 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   14164:	defffc04 	addi	sp,sp,-16
   14168:	df000315 	stw	fp,12(sp)
   1416c:	df000304 	addi	fp,sp,12
   14170:	e13ffd15 	stw	r4,-12(fp)
   14174:	e17ffe15 	stw	r5,-8(fp)
   14178:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   1417c:	e0fffe17 	ldw	r3,-8(fp)
   14180:	e0bffd17 	ldw	r2,-12(fp)
   14184:	18800e26 	beq	r3,r2,141c0 <alt_load_section+0x5c>
  {
    while( to != end )
   14188:	00000a06 	br	141b4 <alt_load_section+0x50>
    {
      *to++ = *from++;
   1418c:	e0bffd17 	ldw	r2,-12(fp)
   14190:	10c00017 	ldw	r3,0(r2)
   14194:	e0bffe17 	ldw	r2,-8(fp)
   14198:	10c00015 	stw	r3,0(r2)
   1419c:	e0bffe17 	ldw	r2,-8(fp)
   141a0:	10800104 	addi	r2,r2,4
   141a4:	e0bffe15 	stw	r2,-8(fp)
   141a8:	e0bffd17 	ldw	r2,-12(fp)
   141ac:	10800104 	addi	r2,r2,4
   141b0:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   141b4:	e0fffe17 	ldw	r3,-8(fp)
   141b8:	e0bfff17 	ldw	r2,-4(fp)
   141bc:	18bff31e 	bne	r3,r2,1418c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   141c0:	e037883a 	mov	sp,fp
   141c4:	df000017 	ldw	fp,0(sp)
   141c8:	dec00104 	addi	sp,sp,4
   141cc:	f800283a 	ret

000141d0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   141d0:	defffe04 	addi	sp,sp,-8
   141d4:	dfc00115 	stw	ra,4(sp)
   141d8:	df000015 	stw	fp,0(sp)
   141dc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   141e0:	010000b4 	movhi	r4,2
   141e4:	21232b04 	addi	r4,r4,-29524
   141e8:	01400074 	movhi	r5,1
   141ec:	295c7d04 	addi	r5,r5,29172
   141f0:	018000b4 	movhi	r6,2
   141f4:	31a32b04 	addi	r6,r6,-29524
   141f8:	00141640 	call	14164 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   141fc:	01000074 	movhi	r4,1
   14200:	21000804 	addi	r4,r4,32
   14204:	01400074 	movhi	r5,1
   14208:	29400804 	addi	r5,r5,32
   1420c:	01800074 	movhi	r6,1
   14210:	31806e04 	addi	r6,r6,440
   14214:	00141640 	call	14164 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   14218:	01000074 	movhi	r4,1
   1421c:	211c6704 	addi	r4,r4,29084
   14220:	01400074 	movhi	r5,1
   14224:	295c6704 	addi	r5,r5,29084
   14228:	01800074 	movhi	r6,1
   1422c:	319c7d04 	addi	r6,r6,29172
   14230:	00141640 	call	14164 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   14234:	00163100 	call	16310 <alt_dcache_flush_all>
  alt_icache_flush_all();
   14238:	00167d00 	call	167d0 <alt_icache_flush_all>
}
   1423c:	e037883a 	mov	sp,fp
   14240:	dfc00117 	ldw	ra,4(sp)
   14244:	df000017 	ldw	fp,0(sp)
   14248:	dec00204 	addi	sp,sp,8
   1424c:	f800283a 	ret

00014250 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14250:	defffe04 	addi	sp,sp,-8
   14254:	dfc00115 	stw	ra,4(sp)
   14258:	df000015 	stw	fp,0(sp)
   1425c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14260:	008000b4 	movhi	r2,2
   14264:	10a31404 	addi	r2,r2,-29616
   14268:	10800017 	ldw	r2,0(r2)
   1426c:	10000526 	beq	r2,zero,14284 <alt_get_errno+0x34>
   14270:	008000b4 	movhi	r2,2
   14274:	10a31404 	addi	r2,r2,-29616
   14278:	10800017 	ldw	r2,0(r2)
   1427c:	103ee83a 	callr	r2
   14280:	00000206 	br	1428c <alt_get_errno+0x3c>
   14284:	008000b4 	movhi	r2,2
   14288:	10a9d904 	addi	r2,r2,-22684
}
   1428c:	e037883a 	mov	sp,fp
   14290:	dfc00117 	ldw	ra,4(sp)
   14294:	df000017 	ldw	fp,0(sp)
   14298:	dec00204 	addi	sp,sp,8
   1429c:	f800283a 	ret

000142a0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   142a0:	defff904 	addi	sp,sp,-28
   142a4:	dfc00615 	stw	ra,24(sp)
   142a8:	df000515 	stw	fp,20(sp)
   142ac:	df000504 	addi	fp,sp,20
   142b0:	e13ffd15 	stw	r4,-12(fp)
   142b4:	e17ffe15 	stw	r5,-8(fp)
   142b8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   142bc:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   142c0:	e0bffd17 	ldw	r2,-12(fp)
   142c4:	10000716 	blt	r2,zero,142e4 <lseek+0x44>
   142c8:	e13ffd17 	ldw	r4,-12(fp)
   142cc:	01400304 	movi	r5,12
   142d0:	0013e000 	call	13e00 <__mulsi3>
   142d4:	00c00074 	movhi	r3,1
   142d8:	18de8904 	addi	r3,r3,31268
   142dc:	10c5883a 	add	r2,r2,r3
   142e0:	00000106 	br	142e8 <lseek+0x48>
   142e4:	0005883a 	mov	r2,zero
   142e8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   142ec:	e0bffc17 	ldw	r2,-16(fp)
   142f0:	10001026 	beq	r2,zero,14334 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   142f4:	e0bffc17 	ldw	r2,-16(fp)
   142f8:	10800017 	ldw	r2,0(r2)
   142fc:	10800717 	ldw	r2,28(r2)
   14300:	10000926 	beq	r2,zero,14328 <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   14304:	e0bffc17 	ldw	r2,-16(fp)
   14308:	10800017 	ldw	r2,0(r2)
   1430c:	10800717 	ldw	r2,28(r2)
   14310:	e13ffc17 	ldw	r4,-16(fp)
   14314:	e17ffe17 	ldw	r5,-8(fp)
   14318:	e1bfff17 	ldw	r6,-4(fp)
   1431c:	103ee83a 	callr	r2
   14320:	e0bffb15 	stw	r2,-20(fp)
   14324:	00000506 	br	1433c <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   14328:	00bfde84 	movi	r2,-134
   1432c:	e0bffb15 	stw	r2,-20(fp)
   14330:	00000206 	br	1433c <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
   14334:	00bfebc4 	movi	r2,-81
   14338:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   1433c:	e0bffb17 	ldw	r2,-20(fp)
   14340:	1000060e 	bge	r2,zero,1435c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   14344:	00142500 	call	14250 <alt_get_errno>
   14348:	e0fffb17 	ldw	r3,-20(fp)
   1434c:	00c7c83a 	sub	r3,zero,r3
   14350:	10c00015 	stw	r3,0(r2)
    rc = -1;
   14354:	00bfffc4 	movi	r2,-1
   14358:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   1435c:	e0bffb17 	ldw	r2,-20(fp)
}
   14360:	e037883a 	mov	sp,fp
   14364:	dfc00117 	ldw	ra,4(sp)
   14368:	df000017 	ldw	fp,0(sp)
   1436c:	dec00204 	addi	sp,sp,8
   14370:	f800283a 	ret

00014374 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   14374:	defffd04 	addi	sp,sp,-12
   14378:	dfc00215 	stw	ra,8(sp)
   1437c:	df000115 	stw	fp,4(sp)
   14380:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   14384:	0009883a 	mov	r4,zero
   14388:	0014ab00 	call	14ab0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   1438c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   14390:	0014ae40 	call	14ae4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   14394:	01000074 	movhi	r4,1
   14398:	211c7204 	addi	r4,r4,29128
   1439c:	01400074 	movhi	r5,1
   143a0:	295c7204 	addi	r5,r5,29128
   143a4:	01800074 	movhi	r6,1
   143a8:	319c7204 	addi	r6,r6,29128
   143ac:	0016b940 	call	16b94 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   143b0:	001641c0 	call	1641c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   143b4:	01000074 	movhi	r4,1
   143b8:	21191e04 	addi	r4,r4,25720
   143bc:	0016dc80 	call	16dc8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   143c0:	d126d217 	ldw	r4,-25784(gp)
   143c4:	d0e6d317 	ldw	r3,-25780(gp)
   143c8:	d0a6d417 	ldw	r2,-25776(gp)
   143cc:	180b883a 	mov	r5,r3
   143d0:	100d883a 	mov	r6,r2
   143d4:	00103000 	call	10300 <main>
   143d8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   143dc:	01000044 	movi	r4,1
   143e0:	0013e780 	call	13e78 <close>
  exit (result);
   143e4:	e13fff17 	ldw	r4,-4(fp)
   143e8:	0016ddc0 	call	16ddc <exit>

000143ec <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   143ec:	defffe04 	addi	sp,sp,-8
   143f0:	df000115 	stw	fp,4(sp)
   143f4:	df000104 	addi	fp,sp,4
   143f8:	e13fff15 	stw	r4,-4(fp)
}
   143fc:	e037883a 	mov	sp,fp
   14400:	df000017 	ldw	fp,0(sp)
   14404:	dec00104 	addi	sp,sp,4
   14408:	f800283a 	ret

0001440c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   1440c:	defffe04 	addi	sp,sp,-8
   14410:	df000115 	stw	fp,4(sp)
   14414:	df000104 	addi	fp,sp,4
   14418:	e13fff15 	stw	r4,-4(fp)
}
   1441c:	e037883a 	mov	sp,fp
   14420:	df000017 	ldw	fp,0(sp)
   14424:	dec00104 	addi	sp,sp,4
   14428:	f800283a 	ret

0001442c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1442c:	defffe04 	addi	sp,sp,-8
   14430:	dfc00115 	stw	ra,4(sp)
   14434:	df000015 	stw	fp,0(sp)
   14438:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1443c:	008000b4 	movhi	r2,2
   14440:	10a31404 	addi	r2,r2,-29616
   14444:	10800017 	ldw	r2,0(r2)
   14448:	10000526 	beq	r2,zero,14460 <alt_get_errno+0x34>
   1444c:	008000b4 	movhi	r2,2
   14450:	10a31404 	addi	r2,r2,-29616
   14454:	10800017 	ldw	r2,0(r2)
   14458:	103ee83a 	callr	r2
   1445c:	00000206 	br	14468 <alt_get_errno+0x3c>
   14460:	008000b4 	movhi	r2,2
   14464:	10a9d904 	addi	r2,r2,-22684
}
   14468:	e037883a 	mov	sp,fp
   1446c:	dfc00117 	ldw	ra,4(sp)
   14470:	df000017 	ldw	fp,0(sp)
   14474:	dec00204 	addi	sp,sp,8
   14478:	f800283a 	ret

0001447c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1447c:	defffb04 	addi	sp,sp,-20
   14480:	dfc00415 	stw	ra,16(sp)
   14484:	df000315 	stw	fp,12(sp)
   14488:	dc000215 	stw	r16,8(sp)
   1448c:	df000204 	addi	fp,sp,8
   14490:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   14494:	e0bfff17 	ldw	r2,-4(fp)
   14498:	10800217 	ldw	r2,8(r2)
   1449c:	10d00034 	orhi	r3,r2,16384
   144a0:	e0bfff17 	ldw	r2,-4(fp)
   144a4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   144a8:	e03ffe15 	stw	zero,-8(fp)
   144ac:	00002206 	br	14538 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   144b0:	04000074 	movhi	r16,1
   144b4:	841e8904 	addi	r16,r16,31268
   144b8:	e0bffe17 	ldw	r2,-8(fp)
   144bc:	1009883a 	mov	r4,r2
   144c0:	01400304 	movi	r5,12
   144c4:	0013e000 	call	13e00 <__mulsi3>
   144c8:	8085883a 	add	r2,r16,r2
   144cc:	10c00017 	ldw	r3,0(r2)
   144d0:	e0bfff17 	ldw	r2,-4(fp)
   144d4:	10800017 	ldw	r2,0(r2)
   144d8:	1880141e 	bne	r3,r2,1452c <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   144dc:	04000074 	movhi	r16,1
   144e0:	841e8904 	addi	r16,r16,31268
   144e4:	e0bffe17 	ldw	r2,-8(fp)
   144e8:	1009883a 	mov	r4,r2
   144ec:	01400304 	movi	r5,12
   144f0:	0013e000 	call	13e00 <__mulsi3>
   144f4:	8085883a 	add	r2,r16,r2
   144f8:	10800204 	addi	r2,r2,8
   144fc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   14500:	10000a0e 	bge	r2,zero,1452c <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   14504:	e13ffe17 	ldw	r4,-8(fp)
   14508:	01400304 	movi	r5,12
   1450c:	0013e000 	call	13e00 <__mulsi3>
   14510:	00c00074 	movhi	r3,1
   14514:	18de8904 	addi	r3,r3,31268
   14518:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1451c:	e0bfff17 	ldw	r2,-4(fp)
   14520:	18800226 	beq	r3,r2,1452c <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   14524:	00bffcc4 	movi	r2,-13
   14528:	00000a06 	br	14554 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1452c:	e0bffe17 	ldw	r2,-8(fp)
   14530:	10800044 	addi	r2,r2,1
   14534:	e0bffe15 	stw	r2,-8(fp)
   14538:	008000b4 	movhi	r2,2
   1453c:	10a31304 	addi	r2,r2,-29620
   14540:	10800017 	ldw	r2,0(r2)
   14544:	1007883a 	mov	r3,r2
   14548:	e0bffe17 	ldw	r2,-8(fp)
   1454c:	18bfd82e 	bgeu	r3,r2,144b0 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   14550:	0005883a 	mov	r2,zero
}
   14554:	e037883a 	mov	sp,fp
   14558:	dfc00217 	ldw	ra,8(sp)
   1455c:	df000117 	ldw	fp,4(sp)
   14560:	dc000017 	ldw	r16,0(sp)
   14564:	dec00304 	addi	sp,sp,12
   14568:	f800283a 	ret

0001456c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1456c:	defff604 	addi	sp,sp,-40
   14570:	dfc00915 	stw	ra,36(sp)
   14574:	df000815 	stw	fp,32(sp)
   14578:	df000804 	addi	fp,sp,32
   1457c:	e13ffd15 	stw	r4,-12(fp)
   14580:	e17ffe15 	stw	r5,-8(fp)
   14584:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   14588:	00bfffc4 	movi	r2,-1
   1458c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   14590:	00bffb44 	movi	r2,-19
   14594:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   14598:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1459c:	e13ffd17 	ldw	r4,-12(fp)
   145a0:	014000b4 	movhi	r5,2
   145a4:	29631104 	addi	r5,r5,-29628
   145a8:	00164d40 	call	164d4 <alt_find_dev>
   145ac:	e0bff815 	stw	r2,-32(fp)
   145b0:	e0bff817 	ldw	r2,-32(fp)
   145b4:	1000051e 	bne	r2,zero,145cc <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   145b8:	e13ffd17 	ldw	r4,-12(fp)
   145bc:	00165640 	call	16564 <alt_find_file>
   145c0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   145c4:	00800044 	movi	r2,1
   145c8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   145cc:	e0bff817 	ldw	r2,-32(fp)
   145d0:	10002a26 	beq	r2,zero,1467c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   145d4:	e13ff817 	ldw	r4,-32(fp)
   145d8:	00166fc0 	call	166fc <alt_get_fd>
   145dc:	e0bff915 	stw	r2,-28(fp)
   145e0:	e0bff917 	ldw	r2,-28(fp)
   145e4:	1000030e 	bge	r2,zero,145f4 <open+0x88>
    {
      status = index;
   145e8:	e0bff917 	ldw	r2,-28(fp)
   145ec:	e0bffa15 	stw	r2,-24(fp)
   145f0:	00002406 	br	14684 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   145f4:	e13ff917 	ldw	r4,-28(fp)
   145f8:	01400304 	movi	r5,12
   145fc:	0013e000 	call	13e00 <__mulsi3>
   14600:	00c00074 	movhi	r3,1
   14604:	18de8904 	addi	r3,r3,31268
   14608:	10c5883a 	add	r2,r2,r3
   1460c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   14610:	e0fffe17 	ldw	r3,-8(fp)
   14614:	00900034 	movhi	r2,16384
   14618:	10bfffc4 	addi	r2,r2,-1
   1461c:	1886703a 	and	r3,r3,r2
   14620:	e0bffc17 	ldw	r2,-16(fp)
   14624:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   14628:	e0bffb17 	ldw	r2,-20(fp)
   1462c:	1000051e 	bne	r2,zero,14644 <open+0xd8>
   14630:	e13ffc17 	ldw	r4,-16(fp)
   14634:	001447c0 	call	1447c <alt_file_locked>
   14638:	e0bffa15 	stw	r2,-24(fp)
   1463c:	e0bffa17 	ldw	r2,-24(fp)
   14640:	10001016 	blt	r2,zero,14684 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   14644:	e0bff817 	ldw	r2,-32(fp)
   14648:	10800317 	ldw	r2,12(r2)
   1464c:	10000826 	beq	r2,zero,14670 <open+0x104>
   14650:	e0bff817 	ldw	r2,-32(fp)
   14654:	10800317 	ldw	r2,12(r2)
   14658:	e13ffc17 	ldw	r4,-16(fp)
   1465c:	e17ffd17 	ldw	r5,-12(fp)
   14660:	e1bffe17 	ldw	r6,-8(fp)
   14664:	e1ffff17 	ldw	r7,-4(fp)
   14668:	103ee83a 	callr	r2
   1466c:	00000106 	br	14674 <open+0x108>
   14670:	0005883a 	mov	r2,zero
   14674:	e0bffa15 	stw	r2,-24(fp)
   14678:	00000206 	br	14684 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1467c:	00bffb44 	movi	r2,-19
   14680:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   14684:	e0bffa17 	ldw	r2,-24(fp)
   14688:	1000080e 	bge	r2,zero,146ac <open+0x140>
  {
    alt_release_fd (index);  
   1468c:	e13ff917 	ldw	r4,-28(fp)
   14690:	00148080 	call	14808 <alt_release_fd>
    ALT_ERRNO = -status;
   14694:	001442c0 	call	1442c <alt_get_errno>
   14698:	e0fffa17 	ldw	r3,-24(fp)
   1469c:	00c7c83a 	sub	r3,zero,r3
   146a0:	10c00015 	stw	r3,0(r2)
    return -1;
   146a4:	00bfffc4 	movi	r2,-1
   146a8:	00000106 	br	146b0 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   146ac:	e0bff917 	ldw	r2,-28(fp)
}
   146b0:	e037883a 	mov	sp,fp
   146b4:	dfc00117 	ldw	ra,4(sp)
   146b8:	df000017 	ldw	fp,0(sp)
   146bc:	dec00204 	addi	sp,sp,8
   146c0:	f800283a 	ret

000146c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   146c4:	defffe04 	addi	sp,sp,-8
   146c8:	dfc00115 	stw	ra,4(sp)
   146cc:	df000015 	stw	fp,0(sp)
   146d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   146d4:	008000b4 	movhi	r2,2
   146d8:	10a31404 	addi	r2,r2,-29616
   146dc:	10800017 	ldw	r2,0(r2)
   146e0:	10000526 	beq	r2,zero,146f8 <alt_get_errno+0x34>
   146e4:	008000b4 	movhi	r2,2
   146e8:	10a31404 	addi	r2,r2,-29616
   146ec:	10800017 	ldw	r2,0(r2)
   146f0:	103ee83a 	callr	r2
   146f4:	00000206 	br	14700 <alt_get_errno+0x3c>
   146f8:	008000b4 	movhi	r2,2
   146fc:	10a9d904 	addi	r2,r2,-22684
}
   14700:	e037883a 	mov	sp,fp
   14704:	dfc00117 	ldw	ra,4(sp)
   14708:	df000017 	ldw	fp,0(sp)
   1470c:	dec00204 	addi	sp,sp,8
   14710:	f800283a 	ret

00014714 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   14714:	defff904 	addi	sp,sp,-28
   14718:	dfc00615 	stw	ra,24(sp)
   1471c:	df000515 	stw	fp,20(sp)
   14720:	df000504 	addi	fp,sp,20
   14724:	e13ffd15 	stw	r4,-12(fp)
   14728:	e17ffe15 	stw	r5,-8(fp)
   1472c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   14730:	e0bffd17 	ldw	r2,-12(fp)
   14734:	10000716 	blt	r2,zero,14754 <read+0x40>
   14738:	e13ffd17 	ldw	r4,-12(fp)
   1473c:	01400304 	movi	r5,12
   14740:	0013e000 	call	13e00 <__mulsi3>
   14744:	00c00074 	movhi	r3,1
   14748:	18de8904 	addi	r3,r3,31268
   1474c:	10c5883a 	add	r2,r2,r3
   14750:	00000106 	br	14758 <read+0x44>
   14754:	0005883a 	mov	r2,zero
   14758:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1475c:	e0bffb17 	ldw	r2,-20(fp)
   14760:	10002026 	beq	r2,zero,147e4 <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   14764:	e0bffb17 	ldw	r2,-20(fp)
   14768:	10800217 	ldw	r2,8(r2)
   1476c:	108000cc 	andi	r2,r2,3
   14770:	10800060 	cmpeqi	r2,r2,1
   14774:	1000171e 	bne	r2,zero,147d4 <read+0xc0>
        (fd->dev->read))
   14778:	e0bffb17 	ldw	r2,-20(fp)
   1477c:	10800017 	ldw	r2,0(r2)
   14780:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   14784:	10001326 	beq	r2,zero,147d4 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   14788:	e0bffb17 	ldw	r2,-20(fp)
   1478c:	10800017 	ldw	r2,0(r2)
   14790:	10c00517 	ldw	r3,20(r2)
   14794:	e0bfff17 	ldw	r2,-4(fp)
   14798:	e13ffb17 	ldw	r4,-20(fp)
   1479c:	e17ffe17 	ldw	r5,-8(fp)
   147a0:	100d883a 	mov	r6,r2
   147a4:	183ee83a 	callr	r3
   147a8:	e0bffc15 	stw	r2,-16(fp)
   147ac:	e0bffc17 	ldw	r2,-16(fp)
   147b0:	1000060e 	bge	r2,zero,147cc <read+0xb8>
        {
          ALT_ERRNO = -rval;
   147b4:	00146c40 	call	146c4 <alt_get_errno>
   147b8:	e0fffc17 	ldw	r3,-16(fp)
   147bc:	00c7c83a 	sub	r3,zero,r3
   147c0:	10c00015 	stw	r3,0(r2)
          return -1;
   147c4:	00bfffc4 	movi	r2,-1
   147c8:	00000a06 	br	147f4 <read+0xe0>
        }
        return rval;
   147cc:	e0bffc17 	ldw	r2,-16(fp)
   147d0:	00000806 	br	147f4 <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   147d4:	00146c40 	call	146c4 <alt_get_errno>
   147d8:	00c00344 	movi	r3,13
   147dc:	10c00015 	stw	r3,0(r2)
   147e0:	00000306 	br	147f0 <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   147e4:	00146c40 	call	146c4 <alt_get_errno>
   147e8:	00c01444 	movi	r3,81
   147ec:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   147f0:	00bfffc4 	movi	r2,-1
}
   147f4:	e037883a 	mov	sp,fp
   147f8:	dfc00117 	ldw	ra,4(sp)
   147fc:	df000017 	ldw	fp,0(sp)
   14800:	dec00204 	addi	sp,sp,8
   14804:	f800283a 	ret

00014808 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   14808:	defffc04 	addi	sp,sp,-16
   1480c:	dfc00315 	stw	ra,12(sp)
   14810:	df000215 	stw	fp,8(sp)
   14814:	dc000115 	stw	r16,4(sp)
   14818:	df000104 	addi	fp,sp,4
   1481c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   14820:	e0bfff17 	ldw	r2,-4(fp)
   14824:	108000d0 	cmplti	r2,r2,3
   14828:	1000111e 	bne	r2,zero,14870 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   1482c:	04000074 	movhi	r16,1
   14830:	841e8904 	addi	r16,r16,31268
   14834:	e0bfff17 	ldw	r2,-4(fp)
   14838:	1009883a 	mov	r4,r2
   1483c:	01400304 	movi	r5,12
   14840:	0013e000 	call	13e00 <__mulsi3>
   14844:	8085883a 	add	r2,r16,r2
   14848:	10800204 	addi	r2,r2,8
   1484c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   14850:	04000074 	movhi	r16,1
   14854:	841e8904 	addi	r16,r16,31268
   14858:	e0bfff17 	ldw	r2,-4(fp)
   1485c:	1009883a 	mov	r4,r2
   14860:	01400304 	movi	r5,12
   14864:	0013e000 	call	13e00 <__mulsi3>
   14868:	8085883a 	add	r2,r16,r2
   1486c:	10000015 	stw	zero,0(r2)
  }
}
   14870:	e037883a 	mov	sp,fp
   14874:	dfc00217 	ldw	ra,8(sp)
   14878:	df000117 	ldw	fp,4(sp)
   1487c:	dc000017 	ldw	r16,0(sp)
   14880:	dec00304 	addi	sp,sp,12
   14884:	f800283a 	ret

00014888 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   14888:	defff904 	addi	sp,sp,-28
   1488c:	df000615 	stw	fp,24(sp)
   14890:	df000604 	addi	fp,sp,24
   14894:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14898:	0005303a 	rdctl	r2,status
   1489c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   148a0:	e0fffc17 	ldw	r3,-16(fp)
   148a4:	00bfff84 	movi	r2,-2
   148a8:	1884703a 	and	r2,r3,r2
   148ac:	1001703a 	wrctl	status,r2
  
  return context;
   148b0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   148b4:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   148b8:	d0a00a17 	ldw	r2,-32728(gp)
   148bc:	10c000c4 	addi	r3,r2,3
   148c0:	00bfff04 	movi	r2,-4
   148c4:	1884703a 	and	r2,r3,r2
   148c8:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   148cc:	d0e00a17 	ldw	r3,-32728(gp)
   148d0:	e0bfff17 	ldw	r2,-4(fp)
   148d4:	1885883a 	add	r2,r3,r2
   148d8:	00c000b4 	movhi	r3,2
   148dc:	18c00004 	addi	r3,r3,0
   148e0:	1880062e 	bgeu	r3,r2,148fc <sbrk+0x74>
   148e4:	e0bffa17 	ldw	r2,-24(fp)
   148e8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   148ec:	e0bffd17 	ldw	r2,-12(fp)
   148f0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   148f4:	00bfffc4 	movi	r2,-1
   148f8:	00000b06 	br	14928 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   148fc:	d0a00a17 	ldw	r2,-32728(gp)
   14900:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   14904:	d0e00a17 	ldw	r3,-32728(gp)
   14908:	e0bfff17 	ldw	r2,-4(fp)
   1490c:	1885883a 	add	r2,r3,r2
   14910:	d0a00a15 	stw	r2,-32728(gp)
   14914:	e0bffa17 	ldw	r2,-24(fp)
   14918:	e0bffe15 	stw	r2,-8(fp)
   1491c:	e0bffe17 	ldw	r2,-8(fp)
   14920:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   14924:	e0bffb17 	ldw	r2,-20(fp)
} 
   14928:	e037883a 	mov	sp,fp
   1492c:	df000017 	ldw	fp,0(sp)
   14930:	dec00104 	addi	sp,sp,4
   14934:	f800283a 	ret

00014938 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14938:	defffe04 	addi	sp,sp,-8
   1493c:	dfc00115 	stw	ra,4(sp)
   14940:	df000015 	stw	fp,0(sp)
   14944:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14948:	008000b4 	movhi	r2,2
   1494c:	10a31404 	addi	r2,r2,-29616
   14950:	10800017 	ldw	r2,0(r2)
   14954:	10000526 	beq	r2,zero,1496c <alt_get_errno+0x34>
   14958:	008000b4 	movhi	r2,2
   1495c:	10a31404 	addi	r2,r2,-29616
   14960:	10800017 	ldw	r2,0(r2)
   14964:	103ee83a 	callr	r2
   14968:	00000206 	br	14974 <alt_get_errno+0x3c>
   1496c:	008000b4 	movhi	r2,2
   14970:	10a9d904 	addi	r2,r2,-22684
}
   14974:	e037883a 	mov	sp,fp
   14978:	dfc00117 	ldw	ra,4(sp)
   1497c:	df000017 	ldw	fp,0(sp)
   14980:	dec00204 	addi	sp,sp,8
   14984:	f800283a 	ret

00014988 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   14988:	defff904 	addi	sp,sp,-28
   1498c:	dfc00615 	stw	ra,24(sp)
   14990:	df000515 	stw	fp,20(sp)
   14994:	df000504 	addi	fp,sp,20
   14998:	e13ffd15 	stw	r4,-12(fp)
   1499c:	e17ffe15 	stw	r5,-8(fp)
   149a0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   149a4:	e0bffd17 	ldw	r2,-12(fp)
   149a8:	10000716 	blt	r2,zero,149c8 <write+0x40>
   149ac:	e13ffd17 	ldw	r4,-12(fp)
   149b0:	01400304 	movi	r5,12
   149b4:	0013e000 	call	13e00 <__mulsi3>
   149b8:	00c00074 	movhi	r3,1
   149bc:	18de8904 	addi	r3,r3,31268
   149c0:	10c5883a 	add	r2,r2,r3
   149c4:	00000106 	br	149cc <write+0x44>
   149c8:	0005883a 	mov	r2,zero
   149cc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   149d0:	e0bffb17 	ldw	r2,-20(fp)
   149d4:	10001f26 	beq	r2,zero,14a54 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   149d8:	e0bffb17 	ldw	r2,-20(fp)
   149dc:	10800217 	ldw	r2,8(r2)
   149e0:	108000cc 	andi	r2,r2,3
   149e4:	10001726 	beq	r2,zero,14a44 <write+0xbc>
   149e8:	e0bffb17 	ldw	r2,-20(fp)
   149ec:	10800017 	ldw	r2,0(r2)
   149f0:	10800617 	ldw	r2,24(r2)
   149f4:	10001326 	beq	r2,zero,14a44 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   149f8:	e0bffb17 	ldw	r2,-20(fp)
   149fc:	10800017 	ldw	r2,0(r2)
   14a00:	10c00617 	ldw	r3,24(r2)
   14a04:	e0bfff17 	ldw	r2,-4(fp)
   14a08:	e13ffb17 	ldw	r4,-20(fp)
   14a0c:	e17ffe17 	ldw	r5,-8(fp)
   14a10:	100d883a 	mov	r6,r2
   14a14:	183ee83a 	callr	r3
   14a18:	e0bffc15 	stw	r2,-16(fp)
   14a1c:	e0bffc17 	ldw	r2,-16(fp)
   14a20:	1000060e 	bge	r2,zero,14a3c <write+0xb4>
      {
        ALT_ERRNO = -rval;
   14a24:	00149380 	call	14938 <alt_get_errno>
   14a28:	e0fffc17 	ldw	r3,-16(fp)
   14a2c:	00c7c83a 	sub	r3,zero,r3
   14a30:	10c00015 	stw	r3,0(r2)
        return -1;
   14a34:	00bfffc4 	movi	r2,-1
   14a38:	00000a06 	br	14a64 <write+0xdc>
      }
      return rval;
   14a3c:	e0bffc17 	ldw	r2,-16(fp)
   14a40:	00000806 	br	14a64 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
   14a44:	00149380 	call	14938 <alt_get_errno>
   14a48:	00c00344 	movi	r3,13
   14a4c:	10c00015 	stw	r3,0(r2)
   14a50:	00000306 	br	14a60 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   14a54:	00149380 	call	14938 <alt_get_errno>
   14a58:	00c01444 	movi	r3,81
   14a5c:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   14a60:	00bfffc4 	movi	r2,-1
}
   14a64:	e037883a 	mov	sp,fp
   14a68:	dfc00117 	ldw	ra,4(sp)
   14a6c:	df000017 	ldw	fp,0(sp)
   14a70:	dec00204 	addi	sp,sp,8
   14a74:	f800283a 	ret

00014a78 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   14a78:	defffd04 	addi	sp,sp,-12
   14a7c:	dfc00215 	stw	ra,8(sp)
   14a80:	df000115 	stw	fp,4(sp)
   14a84:	df000104 	addi	fp,sp,4
   14a88:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   14a8c:	e13fff17 	ldw	r4,-4(fp)
   14a90:	014000b4 	movhi	r5,2
   14a94:	29631104 	addi	r5,r5,-29628
   14a98:	001637c0 	call	1637c <alt_dev_llist_insert>
}
   14a9c:	e037883a 	mov	sp,fp
   14aa0:	dfc00117 	ldw	ra,4(sp)
   14aa4:	df000017 	ldw	fp,0(sp)
   14aa8:	dec00204 	addi	sp,sp,8
   14aac:	f800283a 	ret

00014ab0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   14ab0:	defffd04 	addi	sp,sp,-12
   14ab4:	dfc00215 	stw	ra,8(sp)
   14ab8:	df000115 	stw	fp,4(sp)
   14abc:	df000104 	addi	fp,sp,4
   14ac0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU6, cpu6);
   14ac4:	0016da80 	call	16da8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   14ac8:	00800044 	movi	r2,1
   14acc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   14ad0:	e037883a 	mov	sp,fp
   14ad4:	dfc00117 	ldw	ra,4(sp)
   14ad8:	df000017 	ldw	fp,0(sp)
   14adc:	dec00204 	addi	sp,sp,8
   14ae0:	f800283a 	ret

00014ae4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   14ae4:	defffe04 	addi	sp,sp,-8
   14ae8:	dfc00115 	stw	ra,4(sp)
   14aec:	df000015 	stw	fp,0(sp)
   14af0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER6, timer6);
   14af4:	010000b4 	movhi	r4,2
   14af8:	21040004 	addi	r4,r4,4096
   14afc:	000b883a 	mov	r5,zero
   14b00:	01800044 	movi	r6,1
   14b04:	01c0fa04 	movi	r7,1000
   14b08:	0015b200 	call	15b20 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_FIFO_INIT ( FIFO1TO6, fifo1to6);
   14b0c:	0001883a 	nop
    ALTERA_AVALON_FIFO_INIT ( FIFO5TO6, fifo5to6);
   14b10:	0001883a 	nop
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART6, jtag_uart6);
   14b14:	01000074 	movhi	r4,1
   14b18:	211ef304 	addi	r4,r4,31692
   14b1c:	000b883a 	mov	r5,zero
   14b20:	01800404 	movi	r6,16
   14b24:	00151ac0 	call	151ac <altera_avalon_jtag_uart_init>
   14b28:	01000074 	movhi	r4,1
   14b2c:	211ee904 	addi	r4,r4,31652
   14b30:	0014a780 	call	14a78 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   14b34:	0001883a 	nop
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
   14b38:	010000b4 	movhi	r4,2
   14b3c:	21230104 	addi	r4,r4,-29692
   14b40:	00166780 	call	16678 <alt_fs_reg>
}
   14b44:	e037883a 	mov	sp,fp
   14b48:	dfc00117 	ldw	ra,4(sp)
   14b4c:	df000017 	ldw	fp,0(sp)
   14b50:	dec00204 	addi	sp,sp,8
   14b54:	f800283a 	ret

00014b58 <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
   14b58:	defffa04 	addi	sp,sp,-24
   14b5c:	dfc00515 	stw	ra,20(sp)
   14b60:	df000415 	stw	fp,16(sp)
   14b64:	df000404 	addi	fp,sp,16
   14b68:	e13ffc15 	stw	r4,-16(fp)
   14b6c:	e17ffd15 	stw	r5,-12(fp)
   14b70:	e1bffe15 	stw	r6,-8(fp)
   14b74:	e1ffff15 	stw	r7,-4(fp)
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
   14b78:	e13ffc17 	ldw	r4,-16(fp)
   14b7c:	01400fc4 	movi	r5,63
   14b80:	0014d240 	call	14d24 <altera_avalon_fifo_clear_event>
   14b84:	10000226 	beq	r2,zero,14b90 <altera_avalon_fifo_init+0x38>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   14b88:	00bfffc4 	movi	r2,-1
   14b8c:	00001306 	br	14bdc <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
   14b90:	e13ffc17 	ldw	r4,-16(fp)
   14b94:	e17ffd17 	ldw	r5,-12(fp)
   14b98:	0014d800 	call	14d80 <altera_avalon_fifo_write_ienable>
   14b9c:	10000226 	beq	r2,zero,14ba8 <altera_avalon_fifo_init+0x50>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   14ba0:	00bfff84 	movi	r2,-2
   14ba4:	00000d06 	br	14bdc <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
   14ba8:	e13ffc17 	ldw	r4,-16(fp)
   14bac:	e17fff17 	ldw	r5,-4(fp)
   14bb0:	0014dd80 	call	14dd8 <altera_avalon_fifo_write_almostfull>
   14bb4:	10000226 	beq	r2,zero,14bc0 <altera_avalon_fifo_init+0x68>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   14bb8:	00bfff44 	movi	r2,-3
   14bbc:	00000706 	br	14bdc <altera_avalon_fifo_init+0x84>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
   14bc0:	e13ffc17 	ldw	r4,-16(fp)
   14bc4:	e17ffe17 	ldw	r5,-8(fp)
   14bc8:	0014e300 	call	14e30 <altera_avalon_fifo_write_almostempty>
   14bcc:	10000226 	beq	r2,zero,14bd8 <altera_avalon_fifo_init+0x80>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   14bd0:	00bfff44 	movi	r2,-3
   14bd4:	00000106 	br	14bdc <altera_avalon_fifo_init+0x84>
    }

    return ALTERA_AVALON_FIFO_OK;
   14bd8:	0005883a 	mov	r2,zero
}
   14bdc:	e037883a 	mov	sp,fp
   14be0:	dfc00117 	ldw	ra,4(sp)
   14be4:	df000017 	ldw	fp,0(sp)
   14be8:	dec00204 	addi	sp,sp,8
   14bec:	f800283a 	ret

00014bf0 <altera_avalon_fifo_read_status>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
   14bf0:	defffd04 	addi	sp,sp,-12
   14bf4:	df000215 	stw	fp,8(sp)
   14bf8:	df000204 	addi	fp,sp,8
   14bfc:	e13ffe15 	stw	r4,-8(fp)
   14c00:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   14c04:	e0bffe17 	ldw	r2,-8(fp)
   14c08:	10800104 	addi	r2,r2,4
   14c0c:	10800037 	ldwio	r2,0(r2)
   14c10:	1007883a 	mov	r3,r2
   14c14:	e0bfff17 	ldw	r2,-4(fp)
   14c18:	1884703a 	and	r2,r3,r2
}
   14c1c:	e037883a 	mov	sp,fp
   14c20:	df000017 	ldw	fp,0(sp)
   14c24:	dec00104 	addi	sp,sp,4
   14c28:	f800283a 	ret

00014c2c <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
   14c2c:	defffd04 	addi	sp,sp,-12
   14c30:	df000215 	stw	fp,8(sp)
   14c34:	df000204 	addi	fp,sp,8
   14c38:	e13ffe15 	stw	r4,-8(fp)
   14c3c:	e17fff15 	stw	r5,-4(fp)
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
   14c40:	e0bffe17 	ldw	r2,-8(fp)
   14c44:	10800304 	addi	r2,r2,12
   14c48:	10800037 	ldwio	r2,0(r2)
   14c4c:	1007883a 	mov	r3,r2
   14c50:	e0bfff17 	ldw	r2,-4(fp)
   14c54:	1884703a 	and	r2,r3,r2
}
   14c58:	e037883a 	mov	sp,fp
   14c5c:	df000017 	ldw	fp,0(sp)
   14c60:	dec00104 	addi	sp,sp,4
   14c64:	f800283a 	ret

00014c68 <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
   14c68:	defffe04 	addi	sp,sp,-8
   14c6c:	df000115 	stw	fp,4(sp)
   14c70:	df000104 	addi	fp,sp,4
   14c74:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
   14c78:	e0bfff17 	ldw	r2,-4(fp)
   14c7c:	10800404 	addi	r2,r2,16
   14c80:	10800037 	ldwio	r2,0(r2)
}
   14c84:	e037883a 	mov	sp,fp
   14c88:	df000017 	ldw	fp,0(sp)
   14c8c:	dec00104 	addi	sp,sp,4
   14c90:	f800283a 	ret

00014c94 <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
   14c94:	defffe04 	addi	sp,sp,-8
   14c98:	df000115 	stw	fp,4(sp)
   14c9c:	df000104 	addi	fp,sp,4
   14ca0:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
   14ca4:	e0bfff17 	ldw	r2,-4(fp)
   14ca8:	10800504 	addi	r2,r2,20
   14cac:	10800037 	ldwio	r2,0(r2)
}
   14cb0:	e037883a 	mov	sp,fp
   14cb4:	df000017 	ldw	fp,0(sp)
   14cb8:	dec00104 	addi	sp,sp,4
   14cbc:	f800283a 	ret

00014cc0 <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
   14cc0:	defffd04 	addi	sp,sp,-12
   14cc4:	df000215 	stw	fp,8(sp)
   14cc8:	df000204 	addi	fp,sp,8
   14ccc:	e13ffe15 	stw	r4,-8(fp)
   14cd0:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
   14cd4:	e0bffe17 	ldw	r2,-8(fp)
   14cd8:	10800204 	addi	r2,r2,8
   14cdc:	10800037 	ldwio	r2,0(r2)
   14ce0:	1007883a 	mov	r3,r2
   14ce4:	e0bfff17 	ldw	r2,-4(fp)
   14ce8:	1884703a 	and	r2,r3,r2
}
   14cec:	e037883a 	mov	sp,fp
   14cf0:	df000017 	ldw	fp,0(sp)
   14cf4:	dec00104 	addi	sp,sp,4
   14cf8:	f800283a 	ret

00014cfc <altera_avalon_fifo_read_level>:

int altera_avalon_fifo_read_level(alt_u32 address)
{
   14cfc:	defffe04 	addi	sp,sp,-8
   14d00:	df000115 	stw	fp,4(sp)
   14d04:	df000104 	addi	fp,sp,4
   14d08:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
   14d0c:	e0bfff17 	ldw	r2,-4(fp)
   14d10:	10800037 	ldwio	r2,0(r2)
}
   14d14:	e037883a 	mov	sp,fp
   14d18:	df000017 	ldw	fp,0(sp)
   14d1c:	dec00104 	addi	sp,sp,4
   14d20:	f800283a 	ret

00014d24 <altera_avalon_fifo_clear_event>:

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
   14d24:	defffd04 	addi	sp,sp,-12
   14d28:	df000215 	stw	fp,8(sp)
   14d2c:	df000204 	addi	fp,sp,8
   14d30:	e13ffe15 	stw	r4,-8(fp)
   14d34:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
   14d38:	e0bffe17 	ldw	r2,-8(fp)
   14d3c:	10800204 	addi	r2,r2,8
   14d40:	e0ffff17 	ldw	r3,-4(fp)
   14d44:	10c00035 	stwio	r3,0(r2)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
   14d48:	e0bffe17 	ldw	r2,-8(fp)
   14d4c:	10800204 	addi	r2,r2,8
   14d50:	10800037 	ldwio	r2,0(r2)
   14d54:	1007883a 	mov	r3,r2
   14d58:	e0bfff17 	ldw	r2,-4(fp)
   14d5c:	1884703a 	and	r2,r3,r2
   14d60:	1000021e 	bne	r2,zero,14d6c <altera_avalon_fifo_clear_event+0x48>
        return ALTERA_AVALON_FIFO_OK;
   14d64:	0005883a 	mov	r2,zero
   14d68:	00000106 	br	14d70 <altera_avalon_fifo_clear_event+0x4c>
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   14d6c:	00bfffc4 	movi	r2,-1
}
   14d70:	e037883a 	mov	sp,fp
   14d74:	df000017 	ldw	fp,0(sp)
   14d78:	dec00104 	addi	sp,sp,4
   14d7c:	f800283a 	ret

00014d80 <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
   14d80:	defffd04 	addi	sp,sp,-12
   14d84:	df000215 	stw	fp,8(sp)
   14d88:	df000204 	addi	fp,sp,8
   14d8c:	e13ffe15 	stw	r4,-8(fp)
   14d90:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
   14d94:	e0bffe17 	ldw	r2,-8(fp)
   14d98:	10800304 	addi	r2,r2,12
   14d9c:	e0ffff17 	ldw	r3,-4(fp)
   14da0:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
   14da4:	e0bffe17 	ldw	r2,-8(fp)
   14da8:	10800304 	addi	r2,r2,12
   14dac:	10800037 	ldwio	r2,0(r2)
   14db0:	1007883a 	mov	r3,r2
   14db4:	e0bfff17 	ldw	r2,-4(fp)
   14db8:	1880021e 	bne	r3,r2,14dc4 <altera_avalon_fifo_write_ienable+0x44>
        return ALTERA_AVALON_FIFO_OK;
   14dbc:	0005883a 	mov	r2,zero
   14dc0:	00000106 	br	14dc8 <altera_avalon_fifo_write_ienable+0x48>
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   14dc4:	00bfff84 	movi	r2,-2
}
   14dc8:	e037883a 	mov	sp,fp
   14dcc:	df000017 	ldw	fp,0(sp)
   14dd0:	dec00104 	addi	sp,sp,4
   14dd4:	f800283a 	ret

00014dd8 <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
   14dd8:	defffd04 	addi	sp,sp,-12
   14ddc:	df000215 	stw	fp,8(sp)
   14de0:	df000204 	addi	fp,sp,8
   14de4:	e13ffe15 	stw	r4,-8(fp)
   14de8:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
   14dec:	e0bffe17 	ldw	r2,-8(fp)
   14df0:	10800404 	addi	r2,r2,16
   14df4:	e0ffff17 	ldw	r3,-4(fp)
   14df8:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
   14dfc:	e0bffe17 	ldw	r2,-8(fp)
   14e00:	10800404 	addi	r2,r2,16
   14e04:	10800037 	ldwio	r2,0(r2)
   14e08:	1007883a 	mov	r3,r2
   14e0c:	e0bfff17 	ldw	r2,-4(fp)
   14e10:	1880021e 	bne	r3,r2,14e1c <altera_avalon_fifo_write_almostfull+0x44>
        return ALTERA_AVALON_FIFO_OK;
   14e14:	0005883a 	mov	r2,zero
   14e18:	00000106 	br	14e20 <altera_avalon_fifo_write_almostfull+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   14e1c:	00bfff44 	movi	r2,-3
}
   14e20:	e037883a 	mov	sp,fp
   14e24:	df000017 	ldw	fp,0(sp)
   14e28:	dec00104 	addi	sp,sp,4
   14e2c:	f800283a 	ret

00014e30 <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
   14e30:	defffd04 	addi	sp,sp,-12
   14e34:	df000215 	stw	fp,8(sp)
   14e38:	df000204 	addi	fp,sp,8
   14e3c:	e13ffe15 	stw	r4,-8(fp)
   14e40:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
   14e44:	e0bffe17 	ldw	r2,-8(fp)
   14e48:	10800504 	addi	r2,r2,20
   14e4c:	e0ffff17 	ldw	r3,-4(fp)
   14e50:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
   14e54:	e0bffe17 	ldw	r2,-8(fp)
   14e58:	10800504 	addi	r2,r2,20
   14e5c:	10800037 	ldwio	r2,0(r2)
   14e60:	1007883a 	mov	r3,r2
   14e64:	e0bfff17 	ldw	r2,-4(fp)
   14e68:	1880021e 	bne	r3,r2,14e74 <altera_avalon_fifo_write_almostempty+0x44>
        return ALTERA_AVALON_FIFO_OK;
   14e6c:	0005883a 	mov	r2,zero
   14e70:	00000106 	br	14e78 <altera_avalon_fifo_write_almostempty+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   14e74:	00bfff44 	movi	r2,-3
}
   14e78:	e037883a 	mov	sp,fp
   14e7c:	df000017 	ldw	fp,0(sp)
   14e80:	dec00104 	addi	sp,sp,4
   14e84:	f800283a 	ret

00014e88 <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
   14e88:	defffb04 	addi	sp,sp,-20
   14e8c:	dfc00415 	stw	ra,16(sp)
   14e90:	df000315 	stw	fp,12(sp)
   14e94:	df000304 	addi	fp,sp,12
   14e98:	e13ffd15 	stw	r4,-12(fp)
   14e9c:	e17ffe15 	stw	r5,-8(fp)
   14ea0:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   14ea4:	e13ffe17 	ldw	r4,-8(fp)
   14ea8:	01400044 	movi	r5,1
   14eac:	0014bf00 	call	14bf0 <altera_avalon_fifo_read_status>
   14eb0:	1000051e 	bne	r2,zero,14ec8 <altera_avalon_fifo_write_fifo+0x40>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
   14eb4:	e0bffd17 	ldw	r2,-12(fp)
   14eb8:	e0ffff17 	ldw	r3,-4(fp)
   14ebc:	10c00035 	stwio	r3,0(r2)
        return ALTERA_AVALON_FIFO_OK;
   14ec0:	0005883a 	mov	r2,zero
   14ec4:	00000106 	br	14ecc <altera_avalon_fifo_write_fifo+0x44>
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
   14ec8:	00bfff04 	movi	r2,-4
    }
}
   14ecc:	e037883a 	mov	sp,fp
   14ed0:	dfc00117 	ldw	ra,4(sp)
   14ed4:	df000017 	ldw	fp,0(sp)
   14ed8:	dec00204 	addi	sp,sp,8
   14edc:	f800283a 	ret

00014ee0 <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
   14ee0:	defffa04 	addi	sp,sp,-24
   14ee4:	dfc00515 	stw	ra,20(sp)
   14ee8:	df000415 	stw	fp,16(sp)
   14eec:	df000404 	addi	fp,sp,16
   14ef0:	e13ffd15 	stw	r4,-12(fp)
   14ef4:	e17ffe15 	stw	r5,-8(fp)
   14ef8:	e1bfff15 	stw	r6,-4(fp)
    int return_val = 0;
   14efc:	e03ffc15 	stw	zero,-16(fp)
    *data = 0;
   14f00:	e0bfff17 	ldw	r2,-4(fp)
   14f04:	10000015 	stw	zero,0(r2)
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   14f08:	e13ffe17 	ldw	r4,-8(fp)
   14f0c:	01400084 	movi	r5,2
   14f10:	0014bf00 	call	14bf0 <altera_avalon_fifo_read_status>
   14f14:	1000071e 	bne	r2,zero,14f34 <altera_avalon_read_fifo+0x54>
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
   14f18:	e13ffe17 	ldw	r4,-8(fp)
   14f1c:	0014cfc0 	call	14cfc <altera_avalon_fifo_read_level>
   14f20:	e0bffc15 	stw	r2,-16(fp)
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   14f24:	e0bffd17 	ldw	r2,-12(fp)
   14f28:	10c00037 	ldwio	r3,0(r2)
   14f2c:	e0bfff17 	ldw	r2,-4(fp)
   14f30:	10c00015 	stw	r3,0(r2)
    
    }
    return return_val;
   14f34:	e0bffc17 	ldw	r2,-16(fp)
}
   14f38:	e037883a 	mov	sp,fp
   14f3c:	dfc00117 	ldw	ra,4(sp)
   14f40:	df000017 	ldw	fp,0(sp)
   14f44:	dec00204 	addi	sp,sp,8
   14f48:	f800283a 	ret

00014f4c <altera_avalon_fifo_read_fifo>:

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
   14f4c:	defffc04 	addi	sp,sp,-16
   14f50:	dfc00315 	stw	ra,12(sp)
   14f54:	df000215 	stw	fp,8(sp)
   14f58:	df000204 	addi	fp,sp,8
   14f5c:	e13ffe15 	stw	r4,-8(fp)
   14f60:	e17fff15 	stw	r5,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   14f64:	e13fff17 	ldw	r4,-4(fp)
   14f68:	01400084 	movi	r5,2
   14f6c:	0014bf00 	call	14bf0 <altera_avalon_fifo_read_status>
   14f70:	1000031e 	bne	r2,zero,14f80 <altera_avalon_fifo_read_fifo+0x34>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   14f74:	e0bffe17 	ldw	r2,-8(fp)
   14f78:	10800037 	ldwio	r2,0(r2)
   14f7c:	00000106 	br	14f84 <altera_avalon_fifo_read_fifo+0x38>
    }
    return 0;
   14f80:	0005883a 	mov	r2,zero
}
   14f84:	e037883a 	mov	sp,fp
   14f88:	dfc00117 	ldw	ra,4(sp)
   14f8c:	df000017 	ldw	fp,0(sp)
   14f90:	dec00204 	addi	sp,sp,8
   14f94:	f800283a 	ret

00014f98 <altera_avalon_fifo_write_other_info>:

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
   14f98:	defffb04 	addi	sp,sp,-20
   14f9c:	dfc00415 	stw	ra,16(sp)
   14fa0:	df000315 	stw	fp,12(sp)
   14fa4:	df000304 	addi	fp,sp,12
   14fa8:	e13ffd15 	stw	r4,-12(fp)
   14fac:	e17ffe15 	stw	r5,-8(fp)
   14fb0:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   14fb4:	e13ffe17 	ldw	r4,-8(fp)
   14fb8:	01400044 	movi	r5,1
   14fbc:	0014bf00 	call	14bf0 <altera_avalon_fifo_read_status>
   14fc0:	1000061e 	bne	r2,zero,14fdc <altera_avalon_fifo_write_other_info+0x44>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
   14fc4:	e0bffd17 	ldw	r2,-12(fp)
   14fc8:	10800104 	addi	r2,r2,4
   14fcc:	e0ffff17 	ldw	r3,-4(fp)
   14fd0:	10c00035 	stwio	r3,0(r2)
	return ALTERA_AVALON_FIFO_OK;
   14fd4:	0005883a 	mov	r2,zero
   14fd8:	00000106 	br	14fe0 <altera_avalon_fifo_write_other_info+0x48>
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
   14fdc:	00bfff04 	movi	r2,-4
    }
}
   14fe0:	e037883a 	mov	sp,fp
   14fe4:	dfc00117 	ldw	ra,4(sp)
   14fe8:	df000017 	ldw	fp,0(sp)
   14fec:	dec00204 	addi	sp,sp,8
   14ff0:	f800283a 	ret

00014ff4 <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
   14ff4:	defffe04 	addi	sp,sp,-8
   14ff8:	df000115 	stw	fp,4(sp)
   14ffc:	df000104 	addi	fp,sp,4
   15000:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
   15004:	e0bfff17 	ldw	r2,-4(fp)
   15008:	10800104 	addi	r2,r2,4
   1500c:	10800037 	ldwio	r2,0(r2)
}
   15010:	e037883a 	mov	sp,fp
   15014:	df000017 	ldw	fp,0(sp)
   15018:	dec00104 	addi	sp,sp,4
   1501c:	f800283a 	ret

00015020 <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
   15020:	defffe04 	addi	sp,sp,-8
   15024:	df000115 	stw	fp,4(sp)
   15028:	df000104 	addi	fp,sp,4
   1502c:	e13fff15 	stw	r4,-4(fp)
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
   15030:	e0bfff17 	ldw	r2,-4(fp)
   15034:	10800037 	ldwio	r2,0(r2)
}
   15038:	e037883a 	mov	sp,fp
   1503c:	df000017 	ldw	fp,0(sp)
   15040:	dec00104 	addi	sp,sp,4
   15044:	f800283a 	ret

00015048 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   15048:	defffa04 	addi	sp,sp,-24
   1504c:	dfc00515 	stw	ra,20(sp)
   15050:	df000415 	stw	fp,16(sp)
   15054:	df000404 	addi	fp,sp,16
   15058:	e13ffd15 	stw	r4,-12(fp)
   1505c:	e17ffe15 	stw	r5,-8(fp)
   15060:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   15064:	e0bffd17 	ldw	r2,-12(fp)
   15068:	10800017 	ldw	r2,0(r2)
   1506c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   15070:	e0bffc17 	ldw	r2,-16(fp)
   15074:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   15078:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   1507c:	10800217 	ldw	r2,8(r2)
   15080:	1809883a 	mov	r4,r3
   15084:	e17ffe17 	ldw	r5,-8(fp)
   15088:	e1bfff17 	ldw	r6,-4(fp)
   1508c:	100f883a 	mov	r7,r2
   15090:	00156700 	call	15670 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   15094:	e037883a 	mov	sp,fp
   15098:	dfc00117 	ldw	ra,4(sp)
   1509c:	df000017 	ldw	fp,0(sp)
   150a0:	dec00204 	addi	sp,sp,8
   150a4:	f800283a 	ret

000150a8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   150a8:	defffa04 	addi	sp,sp,-24
   150ac:	dfc00515 	stw	ra,20(sp)
   150b0:	df000415 	stw	fp,16(sp)
   150b4:	df000404 	addi	fp,sp,16
   150b8:	e13ffd15 	stw	r4,-12(fp)
   150bc:	e17ffe15 	stw	r5,-8(fp)
   150c0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   150c4:	e0bffd17 	ldw	r2,-12(fp)
   150c8:	10800017 	ldw	r2,0(r2)
   150cc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   150d0:	e0bffc17 	ldw	r2,-16(fp)
   150d4:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   150d8:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   150dc:	10800217 	ldw	r2,8(r2)
   150e0:	1809883a 	mov	r4,r3
   150e4:	e17ffe17 	ldw	r5,-8(fp)
   150e8:	e1bfff17 	ldw	r6,-4(fp)
   150ec:	100f883a 	mov	r7,r2
   150f0:	00158880 	call	15888 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   150f4:	e037883a 	mov	sp,fp
   150f8:	dfc00117 	ldw	ra,4(sp)
   150fc:	df000017 	ldw	fp,0(sp)
   15100:	dec00204 	addi	sp,sp,8
   15104:	f800283a 	ret

00015108 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   15108:	defffc04 	addi	sp,sp,-16
   1510c:	dfc00315 	stw	ra,12(sp)
   15110:	df000215 	stw	fp,8(sp)
   15114:	df000204 	addi	fp,sp,8
   15118:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1511c:	e0bfff17 	ldw	r2,-4(fp)
   15120:	10800017 	ldw	r2,0(r2)
   15124:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   15128:	e0bffe17 	ldw	r2,-8(fp)
   1512c:	10c00a04 	addi	r3,r2,40
   15130:	e0bfff17 	ldw	r2,-4(fp)
   15134:	10800217 	ldw	r2,8(r2)
   15138:	1809883a 	mov	r4,r3
   1513c:	100b883a 	mov	r5,r2
   15140:	00155140 	call	15514 <altera_avalon_jtag_uart_close>
}
   15144:	e037883a 	mov	sp,fp
   15148:	dfc00117 	ldw	ra,4(sp)
   1514c:	df000017 	ldw	fp,0(sp)
   15150:	dec00204 	addi	sp,sp,8
   15154:	f800283a 	ret

00015158 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   15158:	defffa04 	addi	sp,sp,-24
   1515c:	dfc00515 	stw	ra,20(sp)
   15160:	df000415 	stw	fp,16(sp)
   15164:	df000404 	addi	fp,sp,16
   15168:	e13ffd15 	stw	r4,-12(fp)
   1516c:	e17ffe15 	stw	r5,-8(fp)
   15170:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   15174:	e0bffd17 	ldw	r2,-12(fp)
   15178:	10800017 	ldw	r2,0(r2)
   1517c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   15180:	e0bffc17 	ldw	r2,-16(fp)
   15184:	10800a04 	addi	r2,r2,40
   15188:	1009883a 	mov	r4,r2
   1518c:	e17ffe17 	ldw	r5,-8(fp)
   15190:	e1bfff17 	ldw	r6,-4(fp)
   15194:	001557c0 	call	1557c <altera_avalon_jtag_uart_ioctl>
}
   15198:	e037883a 	mov	sp,fp
   1519c:	dfc00117 	ldw	ra,4(sp)
   151a0:	df000017 	ldw	fp,0(sp)
   151a4:	dec00204 	addi	sp,sp,8
   151a8:	f800283a 	ret

000151ac <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   151ac:	defffa04 	addi	sp,sp,-24
   151b0:	dfc00515 	stw	ra,20(sp)
   151b4:	df000415 	stw	fp,16(sp)
   151b8:	df000404 	addi	fp,sp,16
   151bc:	e13ffd15 	stw	r4,-12(fp)
   151c0:	e17ffe15 	stw	r5,-8(fp)
   151c4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   151c8:	e0bffd17 	ldw	r2,-12(fp)
   151cc:	00c00044 	movi	r3,1
   151d0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   151d4:	e0bffd17 	ldw	r2,-12(fp)
   151d8:	10800017 	ldw	r2,0(r2)
   151dc:	10800104 	addi	r2,r2,4
   151e0:	e0fffd17 	ldw	r3,-12(fp)
   151e4:	18c00817 	ldw	r3,32(r3)
   151e8:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   151ec:	e0fffe17 	ldw	r3,-8(fp)
   151f0:	e0bfff17 	ldw	r2,-4(fp)
   151f4:	d8000015 	stw	zero,0(sp)
   151f8:	1809883a 	mov	r4,r3
   151fc:	100b883a 	mov	r5,r2
   15200:	01800074 	movhi	r6,1
   15204:	31949b04 	addi	r6,r6,21100
   15208:	e1fffd17 	ldw	r7,-12(fp)
   1520c:	00167ec0 	call	167ec <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   15210:	e0bffd17 	ldw	r2,-12(fp)
   15214:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   15218:	e0bffd17 	ldw	r2,-12(fp)
   1521c:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   15220:	008000b4 	movhi	r2,2
   15224:	10a9e104 	addi	r2,r2,-22652
   15228:	10800017 	ldw	r2,0(r2)
   1522c:	1809883a 	mov	r4,r3
   15230:	100b883a 	mov	r5,r2
   15234:	01800074 	movhi	r6,1
   15238:	31951c04 	addi	r6,r6,21616
   1523c:	e1fffd17 	ldw	r7,-12(fp)
   15240:	00161d00 	call	161d0 <alt_alarm_start>
   15244:	1000040e 	bge	r2,zero,15258 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   15248:	e0bffd17 	ldw	r2,-12(fp)
   1524c:	00e00034 	movhi	r3,32768
   15250:	18ffffc4 	addi	r3,r3,-1
   15254:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   15258:	e037883a 	mov	sp,fp
   1525c:	dfc00117 	ldw	ra,4(sp)
   15260:	df000017 	ldw	fp,0(sp)
   15264:	dec00204 	addi	sp,sp,8
   15268:	f800283a 	ret

0001526c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   1526c:	defff804 	addi	sp,sp,-32
   15270:	df000715 	stw	fp,28(sp)
   15274:	df000704 	addi	fp,sp,28
   15278:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   1527c:	e0bfff17 	ldw	r2,-4(fp)
   15280:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   15284:	e0bffb17 	ldw	r2,-20(fp)
   15288:	10800017 	ldw	r2,0(r2)
   1528c:	e0bffc15 	stw	r2,-16(fp)
   15290:	00000106 	br	15298 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
   15294:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   15298:	e0bffc17 	ldw	r2,-16(fp)
   1529c:	10800104 	addi	r2,r2,4
   152a0:	10800037 	ldwio	r2,0(r2)
   152a4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   152a8:	e0bffd17 	ldw	r2,-12(fp)
   152ac:	1080c00c 	andi	r2,r2,768
   152b0:	10006a26 	beq	r2,zero,1545c <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   152b4:	e0bffd17 	ldw	r2,-12(fp)
   152b8:	1080400c 	andi	r2,r2,256
   152bc:	10003326 	beq	r2,zero,1538c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   152c0:	00800074 	movhi	r2,1
   152c4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   152c8:	e0bffb17 	ldw	r2,-20(fp)
   152cc:	10800a17 	ldw	r2,40(r2)
   152d0:	10800044 	addi	r2,r2,1
   152d4:	1081ffcc 	andi	r2,r2,2047
   152d8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   152dc:	e0bffb17 	ldw	r2,-20(fp)
   152e0:	10c00b17 	ldw	r3,44(r2)
   152e4:	e0bffe17 	ldw	r2,-8(fp)
   152e8:	18801426 	beq	r3,r2,1533c <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   152ec:	e0bffc17 	ldw	r2,-16(fp)
   152f0:	10800037 	ldwio	r2,0(r2)
   152f4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   152f8:	e0bff917 	ldw	r2,-28(fp)
   152fc:	10a0000c 	andi	r2,r2,32768
   15300:	10001026 	beq	r2,zero,15344 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   15304:	e0bffb17 	ldw	r2,-20(fp)
   15308:	10800a17 	ldw	r2,40(r2)
   1530c:	e0fff917 	ldw	r3,-28(fp)
   15310:	e13ffb17 	ldw	r4,-20(fp)
   15314:	2085883a 	add	r2,r4,r2
   15318:	10800e04 	addi	r2,r2,56
   1531c:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   15320:	e0bffb17 	ldw	r2,-20(fp)
   15324:	10800a17 	ldw	r2,40(r2)
   15328:	10800044 	addi	r2,r2,1
   1532c:	10c1ffcc 	andi	r3,r2,2047
   15330:	e0bffb17 	ldw	r2,-20(fp)
   15334:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   15338:	003fe306 	br	152c8 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   1533c:	0001883a 	nop
   15340:	00000106 	br	15348 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   15344:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   15348:	e0bff917 	ldw	r2,-28(fp)
   1534c:	10bfffec 	andhi	r2,r2,65535
   15350:	10000e26 	beq	r2,zero,1538c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   15354:	e0bffb17 	ldw	r2,-20(fp)
   15358:	10c00817 	ldw	r3,32(r2)
   1535c:	00bfff84 	movi	r2,-2
   15360:	1886703a 	and	r3,r3,r2
   15364:	e0bffb17 	ldw	r2,-20(fp)
   15368:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   1536c:	e0bffc17 	ldw	r2,-16(fp)
   15370:	10800104 	addi	r2,r2,4
   15374:	e0fffb17 	ldw	r3,-20(fp)
   15378:	18c00817 	ldw	r3,32(r3)
   1537c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   15380:	e0bffc17 	ldw	r2,-16(fp)
   15384:	10800104 	addi	r2,r2,4
   15388:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   1538c:	e0bffd17 	ldw	r2,-12(fp)
   15390:	1080800c 	andi	r2,r2,512
   15394:	103fbf26 	beq	r2,zero,15294 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   15398:	e0bffd17 	ldw	r2,-12(fp)
   1539c:	1004d43a 	srli	r2,r2,16
   153a0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   153a4:	00001406 	br	153f8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   153a8:	e0bffc17 	ldw	r2,-16(fp)
   153ac:	e0fffb17 	ldw	r3,-20(fp)
   153b0:	18c00d17 	ldw	r3,52(r3)
   153b4:	e13ffb17 	ldw	r4,-20(fp)
   153b8:	20c7883a 	add	r3,r4,r3
   153bc:	18c20e04 	addi	r3,r3,2104
   153c0:	18c00003 	ldbu	r3,0(r3)
   153c4:	18c03fcc 	andi	r3,r3,255
   153c8:	18c0201c 	xori	r3,r3,128
   153cc:	18ffe004 	addi	r3,r3,-128
   153d0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   153d4:	e0bffb17 	ldw	r2,-20(fp)
   153d8:	10800d17 	ldw	r2,52(r2)
   153dc:	10800044 	addi	r2,r2,1
   153e0:	10c1ffcc 	andi	r3,r2,2047
   153e4:	e0bffb17 	ldw	r2,-20(fp)
   153e8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   153ec:	e0bffa17 	ldw	r2,-24(fp)
   153f0:	10bfffc4 	addi	r2,r2,-1
   153f4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   153f8:	e0bffa17 	ldw	r2,-24(fp)
   153fc:	10000526 	beq	r2,zero,15414 <altera_avalon_jtag_uart_irq+0x1a8>
   15400:	e0bffb17 	ldw	r2,-20(fp)
   15404:	10c00d17 	ldw	r3,52(r2)
   15408:	e0bffb17 	ldw	r2,-20(fp)
   1540c:	10800c17 	ldw	r2,48(r2)
   15410:	18bfe51e 	bne	r3,r2,153a8 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   15414:	e0bffa17 	ldw	r2,-24(fp)
   15418:	103f9e26 	beq	r2,zero,15294 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1541c:	e0bffb17 	ldw	r2,-20(fp)
   15420:	10c00817 	ldw	r3,32(r2)
   15424:	00bfff44 	movi	r2,-3
   15428:	1886703a 	and	r3,r3,r2
   1542c:	e0bffb17 	ldw	r2,-20(fp)
   15430:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   15434:	e0bffb17 	ldw	r2,-20(fp)
   15438:	10800017 	ldw	r2,0(r2)
   1543c:	10800104 	addi	r2,r2,4
   15440:	e0fffb17 	ldw	r3,-20(fp)
   15444:	18c00817 	ldw	r3,32(r3)
   15448:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1544c:	e0bffc17 	ldw	r2,-16(fp)
   15450:	10800104 	addi	r2,r2,4
   15454:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   15458:	003f8e06 	br	15294 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   1545c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   15460:	e037883a 	mov	sp,fp
   15464:	df000017 	ldw	fp,0(sp)
   15468:	dec00104 	addi	sp,sp,4
   1546c:	f800283a 	ret

00015470 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   15470:	defffc04 	addi	sp,sp,-16
   15474:	df000315 	stw	fp,12(sp)
   15478:	df000304 	addi	fp,sp,12
   1547c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   15480:	e0bfff17 	ldw	r2,-4(fp)
   15484:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   15488:	e0bffd17 	ldw	r2,-12(fp)
   1548c:	10800017 	ldw	r2,0(r2)
   15490:	10800104 	addi	r2,r2,4
   15494:	10800037 	ldwio	r2,0(r2)
   15498:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   1549c:	e0bffe17 	ldw	r2,-8(fp)
   154a0:	1081000c 	andi	r2,r2,1024
   154a4:	10000a26 	beq	r2,zero,154d0 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   154a8:	e0bffd17 	ldw	r2,-12(fp)
   154ac:	10800017 	ldw	r2,0(r2)
   154b0:	10800104 	addi	r2,r2,4
   154b4:	e0fffd17 	ldw	r3,-12(fp)
   154b8:	18c00817 	ldw	r3,32(r3)
   154bc:	18c10014 	ori	r3,r3,1024
   154c0:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   154c4:	e0bffd17 	ldw	r2,-12(fp)
   154c8:	10000915 	stw	zero,36(r2)
   154cc:	00000a06 	br	154f8 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   154d0:	e0bffd17 	ldw	r2,-12(fp)
   154d4:	10800917 	ldw	r2,36(r2)
   154d8:	00e00034 	movhi	r3,32768
   154dc:	18ffff04 	addi	r3,r3,-4
   154e0:	18800536 	bltu	r3,r2,154f8 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
   154e4:	e0bffd17 	ldw	r2,-12(fp)
   154e8:	10800917 	ldw	r2,36(r2)
   154ec:	10c00044 	addi	r3,r2,1
   154f0:	e0bffd17 	ldw	r2,-12(fp)
   154f4:	10c00915 	stw	r3,36(r2)
   154f8:	008000b4 	movhi	r2,2
   154fc:	10a9e104 	addi	r2,r2,-22652
   15500:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   15504:	e037883a 	mov	sp,fp
   15508:	df000017 	ldw	fp,0(sp)
   1550c:	dec00104 	addi	sp,sp,4
   15510:	f800283a 	ret

00015514 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   15514:	defffd04 	addi	sp,sp,-12
   15518:	df000215 	stw	fp,8(sp)
   1551c:	df000204 	addi	fp,sp,8
   15520:	e13ffe15 	stw	r4,-8(fp)
   15524:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   15528:	00000506 	br	15540 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   1552c:	e0bfff17 	ldw	r2,-4(fp)
   15530:	1090000c 	andi	r2,r2,16384
   15534:	10000226 	beq	r2,zero,15540 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   15538:	00bffd44 	movi	r2,-11
   1553c:	00000b06 	br	1556c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   15540:	e0bffe17 	ldw	r2,-8(fp)
   15544:	10c00d17 	ldw	r3,52(r2)
   15548:	e0bffe17 	ldw	r2,-8(fp)
   1554c:	10800c17 	ldw	r2,48(r2)
   15550:	18800526 	beq	r3,r2,15568 <altera_avalon_jtag_uart_close+0x54>
   15554:	e0bffe17 	ldw	r2,-8(fp)
   15558:	10c00917 	ldw	r3,36(r2)
   1555c:	e0bffe17 	ldw	r2,-8(fp)
   15560:	10800117 	ldw	r2,4(r2)
   15564:	18bff136 	bltu	r3,r2,1552c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   15568:	0005883a 	mov	r2,zero
}
   1556c:	e037883a 	mov	sp,fp
   15570:	df000017 	ldw	fp,0(sp)
   15574:	dec00104 	addi	sp,sp,4
   15578:	f800283a 	ret

0001557c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   1557c:	defffa04 	addi	sp,sp,-24
   15580:	df000515 	stw	fp,20(sp)
   15584:	df000504 	addi	fp,sp,20
   15588:	e13ffd15 	stw	r4,-12(fp)
   1558c:	e17ffe15 	stw	r5,-8(fp)
   15590:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   15594:	00bff9c4 	movi	r2,-25
   15598:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   1559c:	e0bffe17 	ldw	r2,-8(fp)
   155a0:	10da8060 	cmpeqi	r3,r2,27137
   155a4:	1800031e 	bne	r3,zero,155b4 <altera_avalon_jtag_uart_ioctl+0x38>
   155a8:	109a80a0 	cmpeqi	r2,r2,27138
   155ac:	1000181e 	bne	r2,zero,15610 <altera_avalon_jtag_uart_ioctl+0x94>
   155b0:	00002606 	br	1564c <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   155b4:	e0bffd17 	ldw	r2,-12(fp)
   155b8:	10c00117 	ldw	r3,4(r2)
   155bc:	00a00034 	movhi	r2,32768
   155c0:	10bfffc4 	addi	r2,r2,-1
   155c4:	18802226 	beq	r3,r2,15650 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
   155c8:	e0bfff17 	ldw	r2,-4(fp)
   155cc:	10800017 	ldw	r2,0(r2)
   155d0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   155d4:	e0bffc17 	ldw	r2,-16(fp)
   155d8:	10800090 	cmplti	r2,r2,2
   155dc:	1000061e 	bne	r2,zero,155f8 <altera_avalon_jtag_uart_ioctl+0x7c>
   155e0:	e0fffc17 	ldw	r3,-16(fp)
   155e4:	00a00034 	movhi	r2,32768
   155e8:	10bfffc4 	addi	r2,r2,-1
   155ec:	18800226 	beq	r3,r2,155f8 <altera_avalon_jtag_uart_ioctl+0x7c>
   155f0:	e0bffc17 	ldw	r2,-16(fp)
   155f4:	00000206 	br	15600 <altera_avalon_jtag_uart_ioctl+0x84>
   155f8:	00a00034 	movhi	r2,32768
   155fc:	10bfff84 	addi	r2,r2,-2
   15600:	e0fffd17 	ldw	r3,-12(fp)
   15604:	18800115 	stw	r2,4(r3)
      rc = 0;
   15608:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1560c:	00001006 	br	15650 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   15610:	e0bffd17 	ldw	r2,-12(fp)
   15614:	10c00117 	ldw	r3,4(r2)
   15618:	00a00034 	movhi	r2,32768
   1561c:	10bfffc4 	addi	r2,r2,-1
   15620:	18800d26 	beq	r3,r2,15658 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   15624:	e0bffd17 	ldw	r2,-12(fp)
   15628:	10c00917 	ldw	r3,36(r2)
   1562c:	e0bffd17 	ldw	r2,-12(fp)
   15630:	10800117 	ldw	r2,4(r2)
   15634:	1885803a 	cmpltu	r2,r3,r2
   15638:	10c03fcc 	andi	r3,r2,255
   1563c:	e0bfff17 	ldw	r2,-4(fp)
   15640:	10c00015 	stw	r3,0(r2)
      rc = 0;
   15644:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   15648:	00000306 	br	15658 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
   1564c:	00000306 	br	1565c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   15650:	0001883a 	nop
   15654:	00000106 	br	1565c <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   15658:	0001883a 	nop

  default:
    break;
  }

  return rc;
   1565c:	e0bffb17 	ldw	r2,-20(fp)
}
   15660:	e037883a 	mov	sp,fp
   15664:	df000017 	ldw	fp,0(sp)
   15668:	dec00104 	addi	sp,sp,4
   1566c:	f800283a 	ret

00015670 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   15670:	defff304 	addi	sp,sp,-52
   15674:	dfc00c15 	stw	ra,48(sp)
   15678:	df000b15 	stw	fp,44(sp)
   1567c:	df000b04 	addi	fp,sp,44
   15680:	e13ffc15 	stw	r4,-16(fp)
   15684:	e17ffd15 	stw	r5,-12(fp)
   15688:	e1bffe15 	stw	r6,-8(fp)
   1568c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   15690:	e0bffd17 	ldw	r2,-12(fp)
   15694:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   15698:	00004706 	br	157b8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   1569c:	e0bffc17 	ldw	r2,-16(fp)
   156a0:	10800a17 	ldw	r2,40(r2)
   156a4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   156a8:	e0bffc17 	ldw	r2,-16(fp)
   156ac:	10800b17 	ldw	r2,44(r2)
   156b0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   156b4:	e0fff717 	ldw	r3,-36(fp)
   156b8:	e0bff817 	ldw	r2,-32(fp)
   156bc:	18800536 	bltu	r3,r2,156d4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   156c0:	e0fff717 	ldw	r3,-36(fp)
   156c4:	e0bff817 	ldw	r2,-32(fp)
   156c8:	1885c83a 	sub	r2,r3,r2
   156cc:	e0bff615 	stw	r2,-40(fp)
   156d0:	00000406 	br	156e4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   156d4:	00c20004 	movi	r3,2048
   156d8:	e0bff817 	ldw	r2,-32(fp)
   156dc:	1885c83a 	sub	r2,r3,r2
   156e0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   156e4:	e0bff617 	ldw	r2,-40(fp)
   156e8:	10001e26 	beq	r2,zero,15764 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   156ec:	e0fffe17 	ldw	r3,-8(fp)
   156f0:	e0bff617 	ldw	r2,-40(fp)
   156f4:	1880022e 	bgeu	r3,r2,15700 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   156f8:	e0bffe17 	ldw	r2,-8(fp)
   156fc:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   15700:	e0bff817 	ldw	r2,-32(fp)
   15704:	10800e04 	addi	r2,r2,56
   15708:	e0fffc17 	ldw	r3,-16(fp)
   1570c:	1885883a 	add	r2,r3,r2
   15710:	e13ff517 	ldw	r4,-44(fp)
   15714:	100b883a 	mov	r5,r2
   15718:	e1bff617 	ldw	r6,-40(fp)
   1571c:	00134cc0 	call	134cc <memcpy>
      ptr   += n;
   15720:	e0fff517 	ldw	r3,-44(fp)
   15724:	e0bff617 	ldw	r2,-40(fp)
   15728:	1885883a 	add	r2,r3,r2
   1572c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   15730:	e0fffe17 	ldw	r3,-8(fp)
   15734:	e0bff617 	ldw	r2,-40(fp)
   15738:	1885c83a 	sub	r2,r3,r2
   1573c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   15740:	e0fff817 	ldw	r3,-32(fp)
   15744:	e0bff617 	ldw	r2,-40(fp)
   15748:	1885883a 	add	r2,r3,r2
   1574c:	10c1ffcc 	andi	r3,r2,2047
   15750:	e0bffc17 	ldw	r2,-16(fp)
   15754:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   15758:	e0bffe17 	ldw	r2,-8(fp)
   1575c:	00bfcf16 	blt	zero,r2,1569c <altera_avalon_jtag_uart_read+0x2c>
   15760:	00000106 	br	15768 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   15764:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   15768:	e0fff517 	ldw	r3,-44(fp)
   1576c:	e0bffd17 	ldw	r2,-12(fp)
   15770:	1880141e 	bne	r3,r2,157c4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   15774:	e0bfff17 	ldw	r2,-4(fp)
   15778:	1090000c 	andi	r2,r2,16384
   1577c:	1000131e 	bne	r2,zero,157cc <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   15780:	0001883a 	nop
   15784:	e0bffc17 	ldw	r2,-16(fp)
   15788:	10c00a17 	ldw	r3,40(r2)
   1578c:	e0bff717 	ldw	r2,-36(fp)
   15790:	1880051e 	bne	r3,r2,157a8 <altera_avalon_jtag_uart_read+0x138>
   15794:	e0bffc17 	ldw	r2,-16(fp)
   15798:	10c00917 	ldw	r3,36(r2)
   1579c:	e0bffc17 	ldw	r2,-16(fp)
   157a0:	10800117 	ldw	r2,4(r2)
   157a4:	18bff736 	bltu	r3,r2,15784 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   157a8:	e0bffc17 	ldw	r2,-16(fp)
   157ac:	10c00a17 	ldw	r3,40(r2)
   157b0:	e0bff717 	ldw	r2,-36(fp)
   157b4:	18800726 	beq	r3,r2,157d4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   157b8:	e0bffe17 	ldw	r2,-8(fp)
   157bc:	00bfb716 	blt	zero,r2,1569c <altera_avalon_jtag_uart_read+0x2c>
   157c0:	00000506 	br	157d8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   157c4:	0001883a 	nop
   157c8:	00000306 	br	157d8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   157cc:	0001883a 	nop
   157d0:	00000106 	br	157d8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   157d4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   157d8:	e0fff517 	ldw	r3,-44(fp)
   157dc:	e0bffd17 	ldw	r2,-12(fp)
   157e0:	18801726 	beq	r3,r2,15840 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   157e4:	0005303a 	rdctl	r2,status
   157e8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   157ec:	e0fffa17 	ldw	r3,-24(fp)
   157f0:	00bfff84 	movi	r2,-2
   157f4:	1884703a 	and	r2,r3,r2
   157f8:	1001703a 	wrctl	status,r2
  
  return context;
   157fc:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   15800:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   15804:	e0bffc17 	ldw	r2,-16(fp)
   15808:	10800817 	ldw	r2,32(r2)
   1580c:	10c00054 	ori	r3,r2,1
   15810:	e0bffc17 	ldw	r2,-16(fp)
   15814:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   15818:	e0bffc17 	ldw	r2,-16(fp)
   1581c:	10800017 	ldw	r2,0(r2)
   15820:	10800104 	addi	r2,r2,4
   15824:	e0fffc17 	ldw	r3,-16(fp)
   15828:	18c00817 	ldw	r3,32(r3)
   1582c:	10c00035 	stwio	r3,0(r2)
   15830:	e0bff917 	ldw	r2,-28(fp)
   15834:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15838:	e0bffb17 	ldw	r2,-20(fp)
   1583c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   15840:	e0fff517 	ldw	r3,-44(fp)
   15844:	e0bffd17 	ldw	r2,-12(fp)
   15848:	18800426 	beq	r3,r2,1585c <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
   1584c:	e0fff517 	ldw	r3,-44(fp)
   15850:	e0bffd17 	ldw	r2,-12(fp)
   15854:	1885c83a 	sub	r2,r3,r2
   15858:	00000606 	br	15874 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
   1585c:	e0bfff17 	ldw	r2,-4(fp)
   15860:	1090000c 	andi	r2,r2,16384
   15864:	10000226 	beq	r2,zero,15870 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
   15868:	00bffd44 	movi	r2,-11
   1586c:	00000106 	br	15874 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
   15870:	00bffec4 	movi	r2,-5
}
   15874:	e037883a 	mov	sp,fp
   15878:	dfc00117 	ldw	ra,4(sp)
   1587c:	df000017 	ldw	fp,0(sp)
   15880:	dec00204 	addi	sp,sp,8
   15884:	f800283a 	ret

00015888 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   15888:	defff304 	addi	sp,sp,-52
   1588c:	dfc00c15 	stw	ra,48(sp)
   15890:	df000b15 	stw	fp,44(sp)
   15894:	df000b04 	addi	fp,sp,44
   15898:	e13ffc15 	stw	r4,-16(fp)
   1589c:	e17ffd15 	stw	r5,-12(fp)
   158a0:	e1bffe15 	stw	r6,-8(fp)
   158a4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   158a8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   158ac:	e0bffd17 	ldw	r2,-12(fp)
   158b0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   158b4:	00003706 	br	15994 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   158b8:	e0bffc17 	ldw	r2,-16(fp)
   158bc:	10800c17 	ldw	r2,48(r2)
   158c0:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   158c4:	e0bffc17 	ldw	r2,-16(fp)
   158c8:	10800d17 	ldw	r2,52(r2)
   158cc:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   158d0:	e0fff817 	ldw	r3,-32(fp)
   158d4:	e0bff517 	ldw	r2,-44(fp)
   158d8:	1880062e 	bgeu	r3,r2,158f4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   158dc:	e0fff517 	ldw	r3,-44(fp)
   158e0:	e0bff817 	ldw	r2,-32(fp)
   158e4:	1885c83a 	sub	r2,r3,r2
   158e8:	10bfffc4 	addi	r2,r2,-1
   158ec:	e0bff615 	stw	r2,-40(fp)
   158f0:	00000b06 	br	15920 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   158f4:	e0bff517 	ldw	r2,-44(fp)
   158f8:	10000526 	beq	r2,zero,15910 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   158fc:	00c20004 	movi	r3,2048
   15900:	e0bff817 	ldw	r2,-32(fp)
   15904:	1885c83a 	sub	r2,r3,r2
   15908:	e0bff615 	stw	r2,-40(fp)
   1590c:	00000406 	br	15920 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   15910:	00c1ffc4 	movi	r3,2047
   15914:	e0bff817 	ldw	r2,-32(fp)
   15918:	1885c83a 	sub	r2,r3,r2
   1591c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   15920:	e0bff617 	ldw	r2,-40(fp)
   15924:	10001e26 	beq	r2,zero,159a0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   15928:	e0fffe17 	ldw	r3,-8(fp)
   1592c:	e0bff617 	ldw	r2,-40(fp)
   15930:	1880022e 	bgeu	r3,r2,1593c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   15934:	e0bffe17 	ldw	r2,-8(fp)
   15938:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   1593c:	e0bff817 	ldw	r2,-32(fp)
   15940:	10820e04 	addi	r2,r2,2104
   15944:	e0fffc17 	ldw	r3,-16(fp)
   15948:	1885883a 	add	r2,r3,r2
   1594c:	1009883a 	mov	r4,r2
   15950:	e17ffd17 	ldw	r5,-12(fp)
   15954:	e1bff617 	ldw	r6,-40(fp)
   15958:	00134cc0 	call	134cc <memcpy>
      ptr   += n;
   1595c:	e0fffd17 	ldw	r3,-12(fp)
   15960:	e0bff617 	ldw	r2,-40(fp)
   15964:	1885883a 	add	r2,r3,r2
   15968:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   1596c:	e0fffe17 	ldw	r3,-8(fp)
   15970:	e0bff617 	ldw	r2,-40(fp)
   15974:	1885c83a 	sub	r2,r3,r2
   15978:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1597c:	e0fff817 	ldw	r3,-32(fp)
   15980:	e0bff617 	ldw	r2,-40(fp)
   15984:	1885883a 	add	r2,r3,r2
   15988:	10c1ffcc 	andi	r3,r2,2047
   1598c:	e0bffc17 	ldw	r2,-16(fp)
   15990:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   15994:	e0bffe17 	ldw	r2,-8(fp)
   15998:	00bfc716 	blt	zero,r2,158b8 <altera_avalon_jtag_uart_write+0x30>
   1599c:	00000106 	br	159a4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   159a0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   159a4:	0005303a 	rdctl	r2,status
   159a8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   159ac:	e0fffa17 	ldw	r3,-24(fp)
   159b0:	00bfff84 	movi	r2,-2
   159b4:	1884703a 	and	r2,r3,r2
   159b8:	1001703a 	wrctl	status,r2
  
  return context;
   159bc:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   159c0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   159c4:	e0bffc17 	ldw	r2,-16(fp)
   159c8:	10800817 	ldw	r2,32(r2)
   159cc:	10c00094 	ori	r3,r2,2
   159d0:	e0bffc17 	ldw	r2,-16(fp)
   159d4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   159d8:	e0bffc17 	ldw	r2,-16(fp)
   159dc:	10800017 	ldw	r2,0(r2)
   159e0:	10800104 	addi	r2,r2,4
   159e4:	e0fffc17 	ldw	r3,-16(fp)
   159e8:	18c00817 	ldw	r3,32(r3)
   159ec:	10c00035 	stwio	r3,0(r2)
   159f0:	e0bff917 	ldw	r2,-28(fp)
   159f4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   159f8:	e0bffb17 	ldw	r2,-20(fp)
   159fc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   15a00:	e0bffe17 	ldw	r2,-8(fp)
   15a04:	0080110e 	bge	zero,r2,15a4c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   15a08:	e0bfff17 	ldw	r2,-4(fp)
   15a0c:	1090000c 	andi	r2,r2,16384
   15a10:	1000111e 	bne	r2,zero,15a58 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   15a14:	0001883a 	nop
   15a18:	e0bffc17 	ldw	r2,-16(fp)
   15a1c:	10c00d17 	ldw	r3,52(r2)
   15a20:	e0bff517 	ldw	r2,-44(fp)
   15a24:	1880051e 	bne	r3,r2,15a3c <altera_avalon_jtag_uart_write+0x1b4>
   15a28:	e0bffc17 	ldw	r2,-16(fp)
   15a2c:	10c00917 	ldw	r3,36(r2)
   15a30:	e0bffc17 	ldw	r2,-16(fp)
   15a34:	10800117 	ldw	r2,4(r2)
   15a38:	18bff736 	bltu	r3,r2,15a18 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   15a3c:	e0bffc17 	ldw	r2,-16(fp)
   15a40:	10c00d17 	ldw	r3,52(r2)
   15a44:	e0bff517 	ldw	r2,-44(fp)
   15a48:	18800526 	beq	r3,r2,15a60 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   15a4c:	e0bffe17 	ldw	r2,-8(fp)
   15a50:	00bfd016 	blt	zero,r2,15994 <altera_avalon_jtag_uart_write+0x10c>
   15a54:	00000306 	br	15a64 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   15a58:	0001883a 	nop
   15a5c:	00000106 	br	15a64 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
   15a60:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   15a64:	e0fffd17 	ldw	r3,-12(fp)
   15a68:	e0bff717 	ldw	r2,-36(fp)
   15a6c:	18800426 	beq	r3,r2,15a80 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   15a70:	e0fffd17 	ldw	r3,-12(fp)
   15a74:	e0bff717 	ldw	r2,-36(fp)
   15a78:	1885c83a 	sub	r2,r3,r2
   15a7c:	00000606 	br	15a98 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   15a80:	e0bfff17 	ldw	r2,-4(fp)
   15a84:	1090000c 	andi	r2,r2,16384
   15a88:	10000226 	beq	r2,zero,15a94 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   15a8c:	00bffd44 	movi	r2,-11
   15a90:	00000106 	br	15a98 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   15a94:	00bffec4 	movi	r2,-5
}
   15a98:	e037883a 	mov	sp,fp
   15a9c:	dfc00117 	ldw	ra,4(sp)
   15aa0:	df000017 	ldw	fp,0(sp)
   15aa4:	dec00204 	addi	sp,sp,8
   15aa8:	f800283a 	ret

00015aac <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   15aac:	defffa04 	addi	sp,sp,-24
   15ab0:	dfc00515 	stw	ra,20(sp)
   15ab4:	df000415 	stw	fp,16(sp)
   15ab8:	df000404 	addi	fp,sp,16
   15abc:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   15ac0:	0007883a 	mov	r3,zero
   15ac4:	e0bfff17 	ldw	r2,-4(fp)
   15ac8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   15acc:	e0bfff17 	ldw	r2,-4(fp)
   15ad0:	10800104 	addi	r2,r2,4
   15ad4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15ad8:	0005303a 	rdctl	r2,status
   15adc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15ae0:	e0fffd17 	ldw	r3,-12(fp)
   15ae4:	00bfff84 	movi	r2,-2
   15ae8:	1884703a 	and	r2,r3,r2
   15aec:	1001703a 	wrctl	status,r2
  
  return context;
   15af0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   15af4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   15af8:	0016ca40 	call	16ca4 <alt_tick>
   15afc:	e0bffc17 	ldw	r2,-16(fp)
   15b00:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15b04:	e0bffe17 	ldw	r2,-8(fp)
   15b08:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   15b0c:	e037883a 	mov	sp,fp
   15b10:	dfc00117 	ldw	ra,4(sp)
   15b14:	df000017 	ldw	fp,0(sp)
   15b18:	dec00204 	addi	sp,sp,8
   15b1c:	f800283a 	ret

00015b20 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   15b20:	defff804 	addi	sp,sp,-32
   15b24:	dfc00715 	stw	ra,28(sp)
   15b28:	df000615 	stw	fp,24(sp)
   15b2c:	df000604 	addi	fp,sp,24
   15b30:	e13ffc15 	stw	r4,-16(fp)
   15b34:	e17ffd15 	stw	r5,-12(fp)
   15b38:	e1bffe15 	stw	r6,-8(fp)
   15b3c:	e1ffff15 	stw	r7,-4(fp)
   15b40:	e0bfff17 	ldw	r2,-4(fp)
   15b44:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   15b48:	008000b4 	movhi	r2,2
   15b4c:	10a9e104 	addi	r2,r2,-22652
   15b50:	10800017 	ldw	r2,0(r2)
   15b54:	1000041e 	bne	r2,zero,15b68 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   15b58:	008000b4 	movhi	r2,2
   15b5c:	10a9e104 	addi	r2,r2,-22652
   15b60:	e0fffb17 	ldw	r3,-20(fp)
   15b64:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   15b68:	e0bffc17 	ldw	r2,-16(fp)
   15b6c:	10800104 	addi	r2,r2,4
   15b70:	00c001c4 	movi	r3,7
   15b74:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   15b78:	d8000015 	stw	zero,0(sp)
   15b7c:	e13ffd17 	ldw	r4,-12(fp)
   15b80:	e17ffe17 	ldw	r5,-8(fp)
   15b84:	01800074 	movhi	r6,1
   15b88:	3196ab04 	addi	r6,r6,23212
   15b8c:	e1fffc17 	ldw	r7,-16(fp)
   15b90:	00167ec0 	call	167ec <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   15b94:	e037883a 	mov	sp,fp
   15b98:	dfc00117 	ldw	ra,4(sp)
   15b9c:	df000017 	ldw	fp,0(sp)
   15ba0:	dec00204 	addi	sp,sp,8
   15ba4:	f800283a 	ret

00015ba8 <alt_hostfs_open>:
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
   15ba8:	deffeb04 	addi	sp,sp,-84
   15bac:	df001415 	stw	fp,80(sp)
   15bb0:	dc401315 	stw	r17,76(sp)
   15bb4:	dc001215 	stw	r16,72(sp)
   15bb8:	df001204 	addi	fp,sp,72
   15bbc:	e13ffb15 	stw	r4,-20(fp)
   15bc0:	e17ffc15 	stw	r5,-16(fp)
   15bc4:	e1bffd15 	stw	r6,-12(fp)
   15bc8:	e1fffe15 	stw	r7,-8(fp)
  static const struct HOSTCALL_INFO hcinfo = { 0x0103, "open" };

  alt_hostfs_dev* dev= (alt_hostfs_dev*)fd->dev;
   15bcc:	e0bffb17 	ldw	r2,-20(fp)
   15bd0:	10800017 	ldw	r2,0(r2)
   15bd4:	e0bfee15 	stw	r2,-72(fp)
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
   15bd8:	e0bfee17 	ldw	r2,-72(fp)
   15bdc:	10800217 	ldw	r2,8(r2)
   15be0:	e0bff715 	stw	r2,-36(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
   15be4:	e0bff717 	ldw	r2,-36(fp)
   15be8:	10bfffc4 	addi	r2,r2,-1
   15bec:	e0bff815 	stw	r2,-32(fp)

  while (*++ptr != 0)
   15bf0:	e0bff817 	ldw	r2,-32(fp)
   15bf4:	10800044 	addi	r2,r2,1
   15bf8:	e0bff815 	stw	r2,-32(fp)
   15bfc:	e0bff817 	ldw	r2,-32(fp)
   15c00:	10800003 	ldbu	r2,0(r2)
   15c04:	10803fcc 	andi	r2,r2,255
   15c08:	1080201c 	xori	r2,r2,128
   15c0c:	10bfe004 	addi	r2,r2,-128
   15c10:	103ff71e 	bne	r2,zero,15bf0 <alt_hostfs_open+0x48>
    ;

  return ptr - string;
   15c14:	e0fff817 	ldw	r3,-32(fp)
   15c18:	e0bff717 	ldw	r2,-36(fp)
   15c1c:	1885c83a 	sub	r2,r3,r2
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
   15c20:	10800044 	addi	r2,r2,1
   15c24:	e0fffc17 	ldw	r3,-16(fp)
   15c28:	1885883a 	add	r2,r3,r2
   15c2c:	e0bffc15 	stw	r2,-16(fp)

  r3 = (int)&hcinfo;
   15c30:	d0a01a04 	addi	r2,gp,-32664
   15c34:	e0bfef15 	stw	r2,-68(fp)
  r4 = (int)name;
   15c38:	e0bffc17 	ldw	r2,-16(fp)
   15c3c:	e0bff015 	stw	r2,-64(fp)
  r5 = flags;
   15c40:	e0bffd17 	ldw	r2,-12(fp)
   15c44:	e0bff115 	stw	r2,-60(fp)
  r6 = mode;
   15c48:	e0bffe17 	ldw	r2,-8(fp)
   15c4c:	e0bff215 	stw	r2,-56(fp)
   15c50:	e0bffc17 	ldw	r2,-16(fp)
   15c54:	e0bff915 	stw	r2,-28(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
   15c58:	e0bff917 	ldw	r2,-28(fp)
   15c5c:	10bfffc4 	addi	r2,r2,-1
   15c60:	e0bffa15 	stw	r2,-24(fp)

  while (*++ptr != 0)
   15c64:	e0bffa17 	ldw	r2,-24(fp)
   15c68:	10800044 	addi	r2,r2,1
   15c6c:	e0bffa15 	stw	r2,-24(fp)
   15c70:	e0bffa17 	ldw	r2,-24(fp)
   15c74:	10800003 	ldbu	r2,0(r2)
   15c78:	10803fcc 	andi	r2,r2,255
   15c7c:	1080201c 	xori	r2,r2,128
   15c80:	10bfe004 	addi	r2,r2,-128
   15c84:	103ff71e 	bne	r2,zero,15c64 <alt_hostfs_open+0xbc>
    ;

  return ptr - string;
   15c88:	e0fffa17 	ldw	r3,-24(fp)
   15c8c:	e0bff917 	ldw	r2,-28(fp)
   15c90:	1885c83a 	sub	r2,r3,r2

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
   15c94:	e0bff315 	stw	r2,-52(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6), "D07" (r7) : "memory" );
   15c98:	e13ff017 	ldw	r4,-64(fp)
   15c9c:	e13fff15 	stw	r4,-4(fp)
   15ca0:	e17ff117 	ldw	r5,-60(fp)
   15ca4:	e1bff217 	ldw	r6,-56(fp)
   15ca8:	e1fff317 	ldw	r7,-52(fp)
   15cac:	e0ffef17 	ldw	r3,-68(fp)
   15cb0:	1821883a 	mov	r16,r3
   15cb4:	8007883a 	mov	r3,r16
   15cb8:	e13fff17 	ldw	r4,-4(fp)
   15cbc:	003da07a 	break	1
   15cc0:	1821883a 	mov	r16,r3
   15cc4:	1023883a 	mov	r17,r2
   15cc8:	e47ff415 	stw	r17,-48(fp)
   15ccc:	e43fef15 	stw	r16,-68(fp)

  handle = (void *)r2;
   15cd0:	e0bff417 	ldw	r2,-48(fp)
   15cd4:	e0bff515 	stw	r2,-44(fp)
  error = r3;
   15cd8:	e0bfef17 	ldw	r2,-68(fp)
   15cdc:	e0bff615 	stw	r2,-40(fp)

  if (error == 0)
   15ce0:	e0bff617 	ldw	r2,-40(fp)
   15ce4:	1000031e 	bne	r2,zero,15cf4 <alt_hostfs_open+0x14c>
    fd->priv = handle;
   15ce8:	e0bffb17 	ldw	r2,-20(fp)
   15cec:	e0fff517 	ldw	r3,-44(fp)
   15cf0:	10c00115 	stw	r3,4(r2)

  return -error;
   15cf4:	e0bff617 	ldw	r2,-40(fp)
   15cf8:	0085c83a 	sub	r2,zero,r2
}
   15cfc:	e037883a 	mov	sp,fp
   15d00:	df000217 	ldw	fp,8(sp)
   15d04:	dc400117 	ldw	r17,4(sp)
   15d08:	dc000017 	ldw	r16,0(sp)
   15d0c:	dec00304 	addi	sp,sp,12
   15d10:	f800283a 	ret

00015d14 <alt_hostfs_close>:
* alt_hostfs_close
*
* Read the file
*/
int alt_hostfs_close(alt_fd* fd)
{
   15d14:	defffa04 	addi	sp,sp,-24
   15d18:	df000515 	stw	fp,20(sp)
   15d1c:	dc000415 	stw	r16,16(sp)
   15d20:	df000404 	addi	fp,sp,16
   15d24:	e13fff15 	stw	r4,-4(fp)
  int error;

  /* Input and output parameters for the hostcall */
  int r3, r4;

  r3 = (int)&hcinfo;
   15d28:	d0a01704 	addi	r2,gp,-32676
   15d2c:	e0bffc15 	stw	r2,-16(fp)
  r4 = (int)fd->priv;
   15d30:	e0bfff17 	ldw	r2,-4(fp)
   15d34:	10800117 	ldw	r2,4(r2)
   15d38:	e0bffd15 	stw	r2,-12(fp)

  __asm__ volatile("break 1" : "+D03" (r3) : "D04" (r4) );
   15d3c:	e0bffd17 	ldw	r2,-12(fp)
   15d40:	e0fffc17 	ldw	r3,-16(fp)
   15d44:	1821883a 	mov	r16,r3
   15d48:	8007883a 	mov	r3,r16
   15d4c:	1009883a 	mov	r4,r2
   15d50:	003da07a 	break	1
   15d54:	1821883a 	mov	r16,r3
   15d58:	e43ffc15 	stw	r16,-16(fp)

  error = r3;
   15d5c:	e0bffc17 	ldw	r2,-16(fp)
   15d60:	e0bffe15 	stw	r2,-8(fp)

  return -error;
   15d64:	e0bffe17 	ldw	r2,-8(fp)
   15d68:	0085c83a 	sub	r2,zero,r2
}
   15d6c:	e037883a 	mov	sp,fp
   15d70:	df000117 	ldw	fp,4(sp)
   15d74:	dc000017 	ldw	r16,0(sp)
   15d78:	dec00204 	addi	sp,sp,8
   15d7c:	f800283a 	ret

00015d80 <alt_hostfs_read>:
* alt_hostfs_read
*
* Read the file
*/
int alt_hostfs_read(alt_fd* fd, char * ptr, int len)
{
   15d80:	defff204 	addi	sp,sp,-56
   15d84:	df000d15 	stw	fp,52(sp)
   15d88:	dc400c15 	stw	r17,48(sp)
   15d8c:	dc000b15 	stw	r16,44(sp)
   15d90:	df000b04 	addi	fp,sp,44
   15d94:	e13ffc15 	stw	r4,-16(fp)
   15d98:	e17ffd15 	stw	r5,-12(fp)
   15d9c:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
   15da0:	d0a01404 	addi	r2,gp,-32688
   15da4:	e0bff515 	stw	r2,-44(fp)
  r4 = (int)fd->priv;
   15da8:	e0bffc17 	ldw	r2,-16(fp)
   15dac:	10800117 	ldw	r2,4(r2)
   15db0:	e0bff615 	stw	r2,-40(fp)
  r5 = (int)ptr;
   15db4:	e0bffd17 	ldw	r2,-12(fp)
   15db8:	e0bff715 	stw	r2,-36(fp)
  r6 = len;
   15dbc:	e0bffe17 	ldw	r2,-8(fp)
   15dc0:	e0bff815 	stw	r2,-32(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
   15dc4:	e13ff617 	ldw	r4,-40(fp)
   15dc8:	e13fff15 	stw	r4,-4(fp)
   15dcc:	e17ff717 	ldw	r5,-36(fp)
   15dd0:	e1bff817 	ldw	r6,-32(fp)
   15dd4:	e0fff517 	ldw	r3,-44(fp)
   15dd8:	1821883a 	mov	r16,r3
   15ddc:	8007883a 	mov	r3,r16
   15de0:	e13fff17 	ldw	r4,-4(fp)
   15de4:	003da07a 	break	1
   15de8:	1821883a 	mov	r16,r3
   15dec:	1023883a 	mov	r17,r2
   15df0:	e47ff915 	stw	r17,-28(fp)
   15df4:	e43ff515 	stw	r16,-44(fp)

  rc = r2;
   15df8:	e0bff917 	ldw	r2,-28(fp)
   15dfc:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
   15e00:	e0bff517 	ldw	r2,-44(fp)
   15e04:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
   15e08:	e0bffb17 	ldw	r2,-20(fp)
   15e0c:	10000326 	beq	r2,zero,15e1c <alt_hostfs_read+0x9c>
   15e10:	e0bffb17 	ldw	r2,-20(fp)
   15e14:	0085c83a 	sub	r2,zero,r2
   15e18:	00000106 	br	15e20 <alt_hostfs_read+0xa0>
   15e1c:	e0bffa17 	ldw	r2,-24(fp)
}
   15e20:	e037883a 	mov	sp,fp
   15e24:	df000217 	ldw	fp,8(sp)
   15e28:	dc400117 	ldw	r17,4(sp)
   15e2c:	dc000017 	ldw	r16,0(sp)
   15e30:	dec00304 	addi	sp,sp,12
   15e34:	f800283a 	ret

00015e38 <alt_hostfs_write>:
* alt_hostfs_write
*
* Read the file
*/
int alt_hostfs_write(alt_fd* fd, const char * ptr, int len)
{
   15e38:	defff204 	addi	sp,sp,-56
   15e3c:	df000d15 	stw	fp,52(sp)
   15e40:	dc400c15 	stw	r17,48(sp)
   15e44:	dc000b15 	stw	r16,44(sp)
   15e48:	df000b04 	addi	fp,sp,44
   15e4c:	e13ffc15 	stw	r4,-16(fp)
   15e50:	e17ffd15 	stw	r5,-12(fp)
   15e54:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
   15e58:	d0a01104 	addi	r2,gp,-32700
   15e5c:	e0bff515 	stw	r2,-44(fp)
  r4 = (int)fd->priv;
   15e60:	e0bffc17 	ldw	r2,-16(fp)
   15e64:	10800117 	ldw	r2,4(r2)
   15e68:	e0bff615 	stw	r2,-40(fp)
  r5 = (int)ptr;
   15e6c:	e0bffd17 	ldw	r2,-12(fp)
   15e70:	e0bff715 	stw	r2,-36(fp)
  r6 = len;
   15e74:	e0bffe17 	ldw	r2,-8(fp)
   15e78:	e0bff815 	stw	r2,-32(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
   15e7c:	e13ff617 	ldw	r4,-40(fp)
   15e80:	e13fff15 	stw	r4,-4(fp)
   15e84:	e17ff717 	ldw	r5,-36(fp)
   15e88:	e1bff817 	ldw	r6,-32(fp)
   15e8c:	e0fff517 	ldw	r3,-44(fp)
   15e90:	1821883a 	mov	r16,r3
   15e94:	8007883a 	mov	r3,r16
   15e98:	e13fff17 	ldw	r4,-4(fp)
   15e9c:	003da07a 	break	1
   15ea0:	1821883a 	mov	r16,r3
   15ea4:	1023883a 	mov	r17,r2
   15ea8:	e47ff915 	stw	r17,-28(fp)
   15eac:	e43ff515 	stw	r16,-44(fp)

  rc = r2;
   15eb0:	e0bff917 	ldw	r2,-28(fp)
   15eb4:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
   15eb8:	e0bff517 	ldw	r2,-44(fp)
   15ebc:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
   15ec0:	e0bffb17 	ldw	r2,-20(fp)
   15ec4:	10000326 	beq	r2,zero,15ed4 <alt_hostfs_write+0x9c>
   15ec8:	e0bffb17 	ldw	r2,-20(fp)
   15ecc:	0085c83a 	sub	r2,zero,r2
   15ed0:	00000106 	br	15ed8 <alt_hostfs_write+0xa0>
   15ed4:	e0bffa17 	ldw	r2,-24(fp)
}
   15ed8:	e037883a 	mov	sp,fp
   15edc:	df000217 	ldw	fp,8(sp)
   15ee0:	dc400117 	ldw	r17,4(sp)
   15ee4:	dc000017 	ldw	r16,0(sp)
   15ee8:	dec00304 	addi	sp,sp,12
   15eec:	f800283a 	ret

00015ef0 <alt_hostfs_seek>:
* Move around within a file
*
* returns -errno for an error or the offset within the file
*/
int alt_hostfs_seek(alt_fd* fd, int ptr, int dir)
{
   15ef0:	defff204 	addi	sp,sp,-56
   15ef4:	df000d15 	stw	fp,52(sp)
   15ef8:	dc400c15 	stw	r17,48(sp)
   15efc:	dc000b15 	stw	r16,44(sp)
   15f00:	df000b04 	addi	fp,sp,44
   15f04:	e13ffc15 	stw	r4,-16(fp)
   15f08:	e17ffd15 	stw	r5,-12(fp)
   15f0c:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
   15f10:	d0a00e04 	addi	r2,gp,-32712
   15f14:	e0bff515 	stw	r2,-44(fp)
  r4 = (int)fd->priv;
   15f18:	e0bffc17 	ldw	r2,-16(fp)
   15f1c:	10800117 	ldw	r2,4(r2)
   15f20:	e0bff615 	stw	r2,-40(fp)
  r5 = ptr;
   15f24:	e0bffd17 	ldw	r2,-12(fp)
   15f28:	e0bff715 	stw	r2,-36(fp)
  r6 = dir;
   15f2c:	e0bffe17 	ldw	r2,-8(fp)
   15f30:	e0bff815 	stw	r2,-32(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
   15f34:	e13ff617 	ldw	r4,-40(fp)
   15f38:	e13fff15 	stw	r4,-4(fp)
   15f3c:	e17ff717 	ldw	r5,-36(fp)
   15f40:	e1bff817 	ldw	r6,-32(fp)
   15f44:	e0fff517 	ldw	r3,-44(fp)
   15f48:	1821883a 	mov	r16,r3
   15f4c:	8007883a 	mov	r3,r16
   15f50:	e13fff17 	ldw	r4,-4(fp)
   15f54:	003da07a 	break	1
   15f58:	1821883a 	mov	r16,r3
   15f5c:	1023883a 	mov	r17,r2
   15f60:	e47ff915 	stw	r17,-28(fp)
   15f64:	e43ff515 	stw	r16,-44(fp)

  rc = r2;
   15f68:	e0bff917 	ldw	r2,-28(fp)
   15f6c:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
   15f70:	e0bff517 	ldw	r2,-44(fp)
   15f74:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
   15f78:	e0bffb17 	ldw	r2,-20(fp)
   15f7c:	10000326 	beq	r2,zero,15f8c <alt_hostfs_seek+0x9c>
   15f80:	e0bffb17 	ldw	r2,-20(fp)
   15f84:	0085c83a 	sub	r2,zero,r2
   15f88:	00000106 	br	15f90 <alt_hostfs_seek+0xa0>
   15f8c:	e0bffa17 	ldw	r2,-24(fp)
}
   15f90:	e037883a 	mov	sp,fp
   15f94:	df000217 	ldw	fp,8(sp)
   15f98:	dc400117 	ldw	r17,4(sp)
   15f9c:	dc000017 	ldw	r16,0(sp)
   15fa0:	dec00304 	addi	sp,sp,12
   15fa4:	f800283a 	ret

00015fa8 <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
   15fa8:	deffe204 	addi	sp,sp,-120
   15fac:	df001d15 	stw	fp,116(sp)
   15fb0:	dc401c15 	stw	r17,112(sp)
   15fb4:	dc001b15 	stw	r16,108(sp)
   15fb8:	df001b04 	addi	fp,sp,108
   15fbc:	e13ffd15 	stw	r4,-12(fp)
   15fc0:	e17ffe15 	stw	r5,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5;

  r3 = (int)&hcinfo;
   15fc4:	d0a00b04 	addi	r2,gp,-32724
   15fc8:	e0bfe615 	stw	r2,-104(fp)
  r4 = (int)fd->priv;
   15fcc:	e0bffd17 	ldw	r2,-12(fp)
   15fd0:	10800117 	ldw	r2,4(r2)
   15fd4:	e0bfe715 	stw	r2,-100(fp)
  r5 = (int)&hoststat;
   15fd8:	e0bfed04 	addi	r2,fp,-76
   15fdc:	e0bfe815 	stw	r2,-96(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5) : "memory" );
   15fe0:	e13fe717 	ldw	r4,-100(fp)
   15fe4:	e13fff15 	stw	r4,-4(fp)
   15fe8:	e17fe817 	ldw	r5,-96(fp)
   15fec:	e0ffe617 	ldw	r3,-104(fp)
   15ff0:	1821883a 	mov	r16,r3
   15ff4:	8007883a 	mov	r3,r16
   15ff8:	e13fff17 	ldw	r4,-4(fp)
   15ffc:	003da07a 	break	1
   16000:	1821883a 	mov	r16,r3
   16004:	1023883a 	mov	r17,r2
   16008:	e47fe915 	stw	r17,-92(fp)
   1600c:	e43fe615 	stw	r16,-104(fp)

  rc = r2;
   16010:	e0bfe917 	ldw	r2,-92(fp)
   16014:	e0bfea15 	stw	r2,-88(fp)
  error = r3;
   16018:	e0bfe617 	ldw	r2,-104(fp)
   1601c:	e0bfeb15 	stw	r2,-84(fp)

  if (error == 0)
   16020:	e0bfeb17 	ldw	r2,-84(fp)
   16024:	1000621e 	bne	r2,zero,161b0 <alt_hostfs_fstat+0x208>
     * no change is required.  On a little-endian processor we need to swap
     * the bytes in each word.
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
   16028:	e0bfed04 	addi	r2,fp,-76
   1602c:	e0bfe515 	stw	r2,-108(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
   16030:	e0bfe517 	ldw	r2,-108(fp)
   16034:	10801004 	addi	r2,r2,64
   16038:	e0bfec15 	stw	r2,-80(fp)
    for ( ; ptr < end ; ptr++)
   1603c:	00001606 	br	16098 <alt_hostfs_fstat+0xf0>
      *ptr = ((*ptr & 0xFF000000) >> 24) |
   16040:	e0bfe517 	ldw	r2,-108(fp)
   16044:	10800017 	ldw	r2,0(r2)
   16048:	1006d63a 	srli	r3,r2,24
             ((*ptr & 0x00FF0000) >> 8)  |
   1604c:	e0bfe517 	ldw	r2,-108(fp)
   16050:	10800017 	ldw	r2,0(r2)
   16054:	10803fec 	andhi	r2,r2,255
   16058:	1004d23a 	srli	r2,r2,8

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
   1605c:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
   16060:	e0bfe517 	ldw	r2,-108(fp)
   16064:	10800017 	ldw	r2,0(r2)
   16068:	10bfc00c 	andi	r2,r2,65280
   1606c:	1004923a 	slli	r2,r2,8
#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
   16070:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
   16074:	e0bfe517 	ldw	r2,-108(fp)
   16078:	10800017 	ldw	r2,0(r2)
   1607c:	1004963a 	slli	r2,r2,24
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
   16080:	1886b03a 	or	r3,r3,r2

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
   16084:	e0bfe517 	ldw	r2,-108(fp)
   16088:	10c00015 	stw	r3,0(r2)
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
   1608c:	e0bfe517 	ldw	r2,-108(fp)
   16090:	10800104 	addi	r2,r2,4
   16094:	e0bfe515 	stw	r2,-108(fp)
   16098:	e0ffe517 	ldw	r3,-108(fp)
   1609c:	e0bfec17 	ldw	r2,-80(fp)
   160a0:	18bfe736 	bltu	r3,r2,16040 <alt_hostfs_fstat+0x98>
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
   160a4:	e0bffe17 	ldw	r2,-8(fp)
   160a8:	e0bfe515 	stw	r2,-108(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
   160ac:	e0bfe517 	ldw	r2,-108(fp)
   160b0:	10800f04 	addi	r2,r2,60
   160b4:	e0bfec15 	stw	r2,-80(fp)
    for ( ; ptr < end ; ptr++)
   160b8:	00000506 	br	160d0 <alt_hostfs_fstat+0x128>
      *ptr = 0;
   160bc:	e0bfe517 	ldw	r2,-108(fp)
   160c0:	10000015 	stw	zero,0(r2)
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
    for ( ; ptr < end ; ptr++)
   160c4:	e0bfe517 	ldw	r2,-108(fp)
   160c8:	10800104 	addi	r2,r2,4
   160cc:	e0bfe515 	stw	r2,-108(fp)
   160d0:	e0ffe517 	ldw	r3,-108(fp)
   160d4:	e0bfec17 	ldw	r2,-80(fp)
   160d8:	18bff836 	bltu	r3,r2,160bc <alt_hostfs_fstat+0x114>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
   160dc:	e0bfed17 	ldw	r2,-76(fp)
   160e0:	1007883a 	mov	r3,r2
   160e4:	e0bffe17 	ldw	r2,-8(fp)
   160e8:	10c0000d 	sth	r3,0(r2)
    st->st_ino     = hoststat.fst_ino;
   160ec:	e0bfee17 	ldw	r2,-72(fp)
   160f0:	1007883a 	mov	r3,r2
   160f4:	e0bffe17 	ldw	r2,-8(fp)
   160f8:	10c0008d 	sth	r3,2(r2)
    st->st_mode    = hoststat.fst_mode;
   160fc:	e0ffef17 	ldw	r3,-68(fp)
   16100:	e0bffe17 	ldw	r2,-8(fp)
   16104:	10c00115 	stw	r3,4(r2)
    st->st_nlink   = hoststat.fst_nlink;
   16108:	e0bff017 	ldw	r2,-64(fp)
   1610c:	1007883a 	mov	r3,r2
   16110:	e0bffe17 	ldw	r2,-8(fp)
   16114:	10c0020d 	sth	r3,8(r2)
    st->st_uid     = hoststat.fst_uid;
   16118:	e0bff117 	ldw	r2,-60(fp)
   1611c:	1007883a 	mov	r3,r2
   16120:	e0bffe17 	ldw	r2,-8(fp)
   16124:	10c0028d 	sth	r3,10(r2)
    st->st_gid     = hoststat.fst_gid;
   16128:	e0bff217 	ldw	r2,-56(fp)
   1612c:	1007883a 	mov	r3,r2
   16130:	e0bffe17 	ldw	r2,-8(fp)
   16134:	10c0030d 	sth	r3,12(r2)
    st->st_rdev    = hoststat.fst_rdev;
   16138:	e0bff317 	ldw	r2,-52(fp)
   1613c:	1007883a 	mov	r3,r2
   16140:	e0bffe17 	ldw	r2,-8(fp)
   16144:	10c0038d 	sth	r3,14(r2)
    st->st_size    = hoststat.fst_size[1];
   16148:	e0bff517 	ldw	r2,-44(fp)
   1614c:	1007883a 	mov	r3,r2
   16150:	e0bffe17 	ldw	r2,-8(fp)
   16154:	10c00415 	stw	r3,16(r2)

    st->st_atime   = hoststat.fst_atime;
   16158:	e0bffa17 	ldw	r2,-24(fp)
   1615c:	1007883a 	mov	r3,r2
   16160:	e0bffe17 	ldw	r2,-8(fp)
   16164:	10c00515 	stw	r3,20(r2)
    st->st_mtime   = hoststat.fst_mtime;
   16168:	e0bffb17 	ldw	r2,-20(fp)
   1616c:	1007883a 	mov	r3,r2
   16170:	e0bffe17 	ldw	r2,-8(fp)
   16174:	10c00715 	stw	r3,28(r2)
    st->st_ctime   = hoststat.fst_ctime;
   16178:	e0bffc17 	ldw	r2,-16(fp)
   1617c:	1007883a 	mov	r3,r2
   16180:	e0bffe17 	ldw	r2,-8(fp)
   16184:	10c00915 	stw	r3,36(r2)

    st->st_blksize = hoststat.fst_blksize[1];
   16188:	e0bff717 	ldw	r2,-36(fp)
   1618c:	1007883a 	mov	r3,r2
   16190:	e0bffe17 	ldw	r2,-8(fp)
   16194:	10c00b15 	stw	r3,44(r2)
    st->st_blocks  = hoststat.fst_blocks[1];
   16198:	e0bff917 	ldw	r2,-28(fp)
   1619c:	1007883a 	mov	r3,r2
   161a0:	e0bffe17 	ldw	r2,-8(fp)
   161a4:	10c00c15 	stw	r3,48(r2)

    return rc;
   161a8:	e0bfea17 	ldw	r2,-88(fp)
   161ac:	00000206 	br	161b8 <alt_hostfs_fstat+0x210>
  }
  else
    return -error;
   161b0:	e0bfeb17 	ldw	r2,-84(fp)
   161b4:	0085c83a 	sub	r2,zero,r2
}
   161b8:	e037883a 	mov	sp,fp
   161bc:	df000217 	ldw	fp,8(sp)
   161c0:	dc400117 	ldw	r17,4(sp)
   161c4:	dc000017 	ldw	r16,0(sp)
   161c8:	dec00304 	addi	sp,sp,12
   161cc:	f800283a 	ret

000161d0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   161d0:	defff504 	addi	sp,sp,-44
   161d4:	df000a15 	stw	fp,40(sp)
   161d8:	df000a04 	addi	fp,sp,40
   161dc:	e13ffc15 	stw	r4,-16(fp)
   161e0:	e17ffd15 	stw	r5,-12(fp)
   161e4:	e1bffe15 	stw	r6,-8(fp)
   161e8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   161ec:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   161f0:	008000b4 	movhi	r2,2
   161f4:	10a9e104 	addi	r2,r2,-22652
   161f8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   161fc:	10003f26 	beq	r2,zero,162fc <alt_alarm_start+0x12c>
  {
    if (alarm)
   16200:	e0bffc17 	ldw	r2,-16(fp)
   16204:	10003b26 	beq	r2,zero,162f4 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   16208:	e0bffc17 	ldw	r2,-16(fp)
   1620c:	e0fffe17 	ldw	r3,-8(fp)
   16210:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   16214:	e0bffc17 	ldw	r2,-16(fp)
   16218:	e0ffff17 	ldw	r3,-4(fp)
   1621c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16220:	0005303a 	rdctl	r2,status
   16224:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16228:	e0fff817 	ldw	r3,-32(fp)
   1622c:	00bfff84 	movi	r2,-2
   16230:	1884703a 	and	r2,r3,r2
   16234:	1001703a 	wrctl	status,r2
  
  return context;
   16238:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   1623c:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   16240:	008000b4 	movhi	r2,2
   16244:	10a9e204 	addi	r2,r2,-22648
   16248:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   1624c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   16250:	e0fffd17 	ldw	r3,-12(fp)
   16254:	e0bff617 	ldw	r2,-40(fp)
   16258:	1885883a 	add	r2,r3,r2
   1625c:	10c00044 	addi	r3,r2,1
   16260:	e0bffc17 	ldw	r2,-16(fp)
   16264:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   16268:	e0bffc17 	ldw	r2,-16(fp)
   1626c:	10c00217 	ldw	r3,8(r2)
   16270:	e0bff617 	ldw	r2,-40(fp)
   16274:	1880042e 	bgeu	r3,r2,16288 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   16278:	e0bffc17 	ldw	r2,-16(fp)
   1627c:	00c00044 	movi	r3,1
   16280:	10c00405 	stb	r3,16(r2)
   16284:	00000206 	br	16290 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   16288:	e0bffc17 	ldw	r2,-16(fp)
   1628c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   16290:	e0bffc17 	ldw	r2,-16(fp)
   16294:	00c000b4 	movhi	r3,2
   16298:	18e32904 	addi	r3,r3,-29532
   1629c:	e0fff915 	stw	r3,-28(fp)
   162a0:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   162a4:	e0bffa17 	ldw	r2,-24(fp)
   162a8:	e0fff917 	ldw	r3,-28(fp)
   162ac:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   162b0:	e0bff917 	ldw	r2,-28(fp)
   162b4:	10c00017 	ldw	r3,0(r2)
   162b8:	e0bffa17 	ldw	r2,-24(fp)
   162bc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   162c0:	e0bff917 	ldw	r2,-28(fp)
   162c4:	10800017 	ldw	r2,0(r2)
   162c8:	e0fffa17 	ldw	r3,-24(fp)
   162cc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   162d0:	e0bff917 	ldw	r2,-28(fp)
   162d4:	e0fffa17 	ldw	r3,-24(fp)
   162d8:	10c00015 	stw	r3,0(r2)
   162dc:	e0bff717 	ldw	r2,-36(fp)
   162e0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   162e4:	e0bffb17 	ldw	r2,-20(fp)
   162e8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   162ec:	0005883a 	mov	r2,zero
   162f0:	00000306 	br	16300 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   162f4:	00bffa84 	movi	r2,-22
   162f8:	00000106 	br	16300 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   162fc:	00bfde84 	movi	r2,-134
  }
}
   16300:	e037883a 	mov	sp,fp
   16304:	df000017 	ldw	fp,0(sp)
   16308:	dec00104 	addi	sp,sp,4
   1630c:	f800283a 	ret

00016310 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   16310:	deffff04 	addi	sp,sp,-4
   16314:	df000015 	stw	fp,0(sp)
   16318:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1631c:	e037883a 	mov	sp,fp
   16320:	df000017 	ldw	fp,0(sp)
   16324:	dec00104 	addi	sp,sp,4
   16328:	f800283a 	ret

0001632c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1632c:	defffe04 	addi	sp,sp,-8
   16330:	dfc00115 	stw	ra,4(sp)
   16334:	df000015 	stw	fp,0(sp)
   16338:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1633c:	008000b4 	movhi	r2,2
   16340:	10a31404 	addi	r2,r2,-29616
   16344:	10800017 	ldw	r2,0(r2)
   16348:	10000526 	beq	r2,zero,16360 <alt_get_errno+0x34>
   1634c:	008000b4 	movhi	r2,2
   16350:	10a31404 	addi	r2,r2,-29616
   16354:	10800017 	ldw	r2,0(r2)
   16358:	103ee83a 	callr	r2
   1635c:	00000206 	br	16368 <alt_get_errno+0x3c>
   16360:	008000b4 	movhi	r2,2
   16364:	10a9d904 	addi	r2,r2,-22684
}
   16368:	e037883a 	mov	sp,fp
   1636c:	dfc00117 	ldw	ra,4(sp)
   16370:	df000017 	ldw	fp,0(sp)
   16374:	dec00204 	addi	sp,sp,8
   16378:	f800283a 	ret

0001637c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   1637c:	defffa04 	addi	sp,sp,-24
   16380:	dfc00515 	stw	ra,20(sp)
   16384:	df000415 	stw	fp,16(sp)
   16388:	df000404 	addi	fp,sp,16
   1638c:	e13ffe15 	stw	r4,-8(fp)
   16390:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   16394:	e0bffe17 	ldw	r2,-8(fp)
   16398:	10000326 	beq	r2,zero,163a8 <alt_dev_llist_insert+0x2c>
   1639c:	e0bffe17 	ldw	r2,-8(fp)
   163a0:	10800217 	ldw	r2,8(r2)
   163a4:	1000051e 	bne	r2,zero,163bc <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   163a8:	001632c0 	call	1632c <alt_get_errno>
   163ac:	00c00584 	movi	r3,22
   163b0:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   163b4:	00bffa84 	movi	r2,-22
   163b8:	00001306 	br	16408 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   163bc:	e0bffe17 	ldw	r2,-8(fp)
   163c0:	e0ffff17 	ldw	r3,-4(fp)
   163c4:	e0fffc15 	stw	r3,-16(fp)
   163c8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   163cc:	e0bffd17 	ldw	r2,-12(fp)
   163d0:	e0fffc17 	ldw	r3,-16(fp)
   163d4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   163d8:	e0bffc17 	ldw	r2,-16(fp)
   163dc:	10c00017 	ldw	r3,0(r2)
   163e0:	e0bffd17 	ldw	r2,-12(fp)
   163e4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   163e8:	e0bffc17 	ldw	r2,-16(fp)
   163ec:	10800017 	ldw	r2,0(r2)
   163f0:	e0fffd17 	ldw	r3,-12(fp)
   163f4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   163f8:	e0bffc17 	ldw	r2,-16(fp)
   163fc:	e0fffd17 	ldw	r3,-12(fp)
   16400:	10c00015 	stw	r3,0(r2)

  return 0;  
   16404:	0005883a 	mov	r2,zero
}
   16408:	e037883a 	mov	sp,fp
   1640c:	dfc00117 	ldw	ra,4(sp)
   16410:	df000017 	ldw	fp,0(sp)
   16414:	dec00204 	addi	sp,sp,8
   16418:	f800283a 	ret

0001641c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   1641c:	defffd04 	addi	sp,sp,-12
   16420:	dfc00215 	stw	ra,8(sp)
   16424:	df000115 	stw	fp,4(sp)
   16428:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1642c:	00800074 	movhi	r2,1
   16430:	109c6604 	addi	r2,r2,29080
   16434:	e0bfff15 	stw	r2,-4(fp)
   16438:	00000606 	br	16454 <_do_ctors+0x38>
        (*ctor) (); 
   1643c:	e0bfff17 	ldw	r2,-4(fp)
   16440:	10800017 	ldw	r2,0(r2)
   16444:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   16448:	e0bfff17 	ldw	r2,-4(fp)
   1644c:	10bfff04 	addi	r2,r2,-4
   16450:	e0bfff15 	stw	r2,-4(fp)
   16454:	e0ffff17 	ldw	r3,-4(fp)
   16458:	00800074 	movhi	r2,1
   1645c:	109c6704 	addi	r2,r2,29084
   16460:	18bff62e 	bgeu	r3,r2,1643c <_do_ctors+0x20>
        (*ctor) (); 
}
   16464:	e037883a 	mov	sp,fp
   16468:	dfc00117 	ldw	ra,4(sp)
   1646c:	df000017 	ldw	fp,0(sp)
   16470:	dec00204 	addi	sp,sp,8
   16474:	f800283a 	ret

00016478 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   16478:	defffd04 	addi	sp,sp,-12
   1647c:	dfc00215 	stw	ra,8(sp)
   16480:	df000115 	stw	fp,4(sp)
   16484:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   16488:	00800074 	movhi	r2,1
   1648c:	109c6604 	addi	r2,r2,29080
   16490:	e0bfff15 	stw	r2,-4(fp)
   16494:	00000606 	br	164b0 <_do_dtors+0x38>
        (*dtor) (); 
   16498:	e0bfff17 	ldw	r2,-4(fp)
   1649c:	10800017 	ldw	r2,0(r2)
   164a0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   164a4:	e0bfff17 	ldw	r2,-4(fp)
   164a8:	10bfff04 	addi	r2,r2,-4
   164ac:	e0bfff15 	stw	r2,-4(fp)
   164b0:	e0ffff17 	ldw	r3,-4(fp)
   164b4:	00800074 	movhi	r2,1
   164b8:	109c6704 	addi	r2,r2,29084
   164bc:	18bff62e 	bgeu	r3,r2,16498 <_do_dtors+0x20>
        (*dtor) (); 
}
   164c0:	e037883a 	mov	sp,fp
   164c4:	dfc00117 	ldw	ra,4(sp)
   164c8:	df000017 	ldw	fp,0(sp)
   164cc:	dec00204 	addi	sp,sp,8
   164d0:	f800283a 	ret

000164d4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   164d4:	defffa04 	addi	sp,sp,-24
   164d8:	dfc00515 	stw	ra,20(sp)
   164dc:	df000415 	stw	fp,16(sp)
   164e0:	df000404 	addi	fp,sp,16
   164e4:	e13ffe15 	stw	r4,-8(fp)
   164e8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   164ec:	e0bfff17 	ldw	r2,-4(fp)
   164f0:	10800017 	ldw	r2,0(r2)
   164f4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   164f8:	e13ffe17 	ldw	r4,-8(fp)
   164fc:	00129600 	call	12960 <strlen>
   16500:	10800044 	addi	r2,r2,1
   16504:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   16508:	00000d06 	br	16540 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1650c:	e0bffc17 	ldw	r2,-16(fp)
   16510:	10c00217 	ldw	r3,8(r2)
   16514:	e0bffd17 	ldw	r2,-12(fp)
   16518:	1809883a 	mov	r4,r3
   1651c:	e17ffe17 	ldw	r5,-8(fp)
   16520:	100d883a 	mov	r6,r2
   16524:	0016e140 	call	16e14 <memcmp>
   16528:	1000021e 	bne	r2,zero,16534 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1652c:	e0bffc17 	ldw	r2,-16(fp)
   16530:	00000706 	br	16550 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   16534:	e0bffc17 	ldw	r2,-16(fp)
   16538:	10800017 	ldw	r2,0(r2)
   1653c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   16540:	e0fffc17 	ldw	r3,-16(fp)
   16544:	e0bfff17 	ldw	r2,-4(fp)
   16548:	18bff01e 	bne	r3,r2,1650c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   1654c:	0005883a 	mov	r2,zero
}
   16550:	e037883a 	mov	sp,fp
   16554:	dfc00117 	ldw	ra,4(sp)
   16558:	df000017 	ldw	fp,0(sp)
   1655c:	dec00204 	addi	sp,sp,8
   16560:	f800283a 	ret

00016564 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   16564:	defffb04 	addi	sp,sp,-20
   16568:	dfc00415 	stw	ra,16(sp)
   1656c:	df000315 	stw	fp,12(sp)
   16570:	df000304 	addi	fp,sp,12
   16574:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   16578:	008000b4 	movhi	r2,2
   1657c:	10a30f04 	addi	r2,r2,-29636
   16580:	10800017 	ldw	r2,0(r2)
   16584:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   16588:	00003106 	br	16650 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   1658c:	e0bffd17 	ldw	r2,-12(fp)
   16590:	10800217 	ldw	r2,8(r2)
   16594:	1009883a 	mov	r4,r2
   16598:	00129600 	call	12960 <strlen>
   1659c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   165a0:	e0bffd17 	ldw	r2,-12(fp)
   165a4:	10c00217 	ldw	r3,8(r2)
   165a8:	e0bffe17 	ldw	r2,-8(fp)
   165ac:	10bfffc4 	addi	r2,r2,-1
   165b0:	1885883a 	add	r2,r3,r2
   165b4:	10800003 	ldbu	r2,0(r2)
   165b8:	10803fcc 	andi	r2,r2,255
   165bc:	1080201c 	xori	r2,r2,128
   165c0:	10bfe004 	addi	r2,r2,-128
   165c4:	10800bd8 	cmpnei	r2,r2,47
   165c8:	1000031e 	bne	r2,zero,165d8 <alt_find_file+0x74>
    {
      len -= 1;
   165cc:	e0bffe17 	ldw	r2,-8(fp)
   165d0:	10bfffc4 	addi	r2,r2,-1
   165d4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   165d8:	e0bffe17 	ldw	r2,-8(fp)
   165dc:	e0ffff17 	ldw	r3,-4(fp)
   165e0:	1885883a 	add	r2,r3,r2
   165e4:	10800003 	ldbu	r2,0(r2)
   165e8:	10803fcc 	andi	r2,r2,255
   165ec:	1080201c 	xori	r2,r2,128
   165f0:	10bfe004 	addi	r2,r2,-128
   165f4:	10800be0 	cmpeqi	r2,r2,47
   165f8:	1000081e 	bne	r2,zero,1661c <alt_find_file+0xb8>
   165fc:	e0bffe17 	ldw	r2,-8(fp)
   16600:	e0ffff17 	ldw	r3,-4(fp)
   16604:	1885883a 	add	r2,r3,r2
   16608:	10800003 	ldbu	r2,0(r2)
   1660c:	10803fcc 	andi	r2,r2,255
   16610:	1080201c 	xori	r2,r2,128
   16614:	10bfe004 	addi	r2,r2,-128
   16618:	10000a1e 	bne	r2,zero,16644 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   1661c:	e0bffd17 	ldw	r2,-12(fp)
   16620:	10c00217 	ldw	r3,8(r2)
   16624:	e0bffe17 	ldw	r2,-8(fp)
   16628:	1809883a 	mov	r4,r3
   1662c:	e17fff17 	ldw	r5,-4(fp)
   16630:	100d883a 	mov	r6,r2
   16634:	0016e140 	call	16e14 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   16638:	1000021e 	bne	r2,zero,16644 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   1663c:	e0bffd17 	ldw	r2,-12(fp)
   16640:	00000806 	br	16664 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   16644:	e0bffd17 	ldw	r2,-12(fp)
   16648:	10800017 	ldw	r2,0(r2)
   1664c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   16650:	e0fffd17 	ldw	r3,-12(fp)
   16654:	008000b4 	movhi	r2,2
   16658:	10a30f04 	addi	r2,r2,-29636
   1665c:	18bfcb1e 	bne	r3,r2,1658c <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   16660:	0005883a 	mov	r2,zero
}
   16664:	e037883a 	mov	sp,fp
   16668:	dfc00117 	ldw	ra,4(sp)
   1666c:	df000017 	ldw	fp,0(sp)
   16670:	dec00204 	addi	sp,sp,8
   16674:	f800283a 	ret

00016678 <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
   16678:	defffc04 	addi	sp,sp,-16
   1667c:	df000315 	stw	fp,12(sp)
   16680:	df000304 	addi	fp,sp,12
   16684:	e13fff15 	stw	r4,-4(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
   16688:	e0bfff17 	ldw	r2,-4(fp)
   1668c:	10800217 	ldw	r2,8(r2)
   16690:	1000021e 	bne	r2,zero,1669c <alt_fs_reg+0x24>
  {
    return -ENODEV;
   16694:	00bffb44 	movi	r2,-19
   16698:	00001406 	br	166ec <alt_fs_reg+0x74>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
   1669c:	e0bfff17 	ldw	r2,-4(fp)
   166a0:	00c000b4 	movhi	r3,2
   166a4:	18e30f04 	addi	r3,r3,-29636
   166a8:	e0fffd15 	stw	r3,-12(fp)
   166ac:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   166b0:	e0bffe17 	ldw	r2,-8(fp)
   166b4:	e0fffd17 	ldw	r3,-12(fp)
   166b8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   166bc:	e0bffd17 	ldw	r2,-12(fp)
   166c0:	10c00017 	ldw	r3,0(r2)
   166c4:	e0bffe17 	ldw	r2,-8(fp)
   166c8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   166cc:	e0bffd17 	ldw	r2,-12(fp)
   166d0:	10800017 	ldw	r2,0(r2)
   166d4:	e0fffe17 	ldw	r3,-8(fp)
   166d8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   166dc:	e0bffd17 	ldw	r2,-12(fp)
   166e0:	e0fffe17 	ldw	r3,-8(fp)
   166e4:	10c00015 	stw	r3,0(r2)

  return 0;
   166e8:	0005883a 	mov	r2,zero
} 
   166ec:	e037883a 	mov	sp,fp
   166f0:	df000017 	ldw	fp,0(sp)
   166f4:	dec00104 	addi	sp,sp,4
   166f8:	f800283a 	ret

000166fc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   166fc:	defffa04 	addi	sp,sp,-24
   16700:	dfc00515 	stw	ra,20(sp)
   16704:	df000415 	stw	fp,16(sp)
   16708:	dc000315 	stw	r16,12(sp)
   1670c:	df000304 	addi	fp,sp,12
   16710:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   16714:	00bffa04 	movi	r2,-24
   16718:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1671c:	e03ffd15 	stw	zero,-12(fp)
   16720:	00002106 	br	167a8 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   16724:	04000074 	movhi	r16,1
   16728:	841e8904 	addi	r16,r16,31268
   1672c:	e0bffd17 	ldw	r2,-12(fp)
   16730:	1009883a 	mov	r4,r2
   16734:	01400304 	movi	r5,12
   16738:	0013e000 	call	13e00 <__mulsi3>
   1673c:	8085883a 	add	r2,r16,r2
   16740:	10800017 	ldw	r2,0(r2)
   16744:	1000151e 	bne	r2,zero,1679c <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   16748:	04000074 	movhi	r16,1
   1674c:	841e8904 	addi	r16,r16,31268
   16750:	e0bffd17 	ldw	r2,-12(fp)
   16754:	1009883a 	mov	r4,r2
   16758:	01400304 	movi	r5,12
   1675c:	0013e000 	call	13e00 <__mulsi3>
   16760:	8085883a 	add	r2,r16,r2
   16764:	e0ffff17 	ldw	r3,-4(fp)
   16768:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   1676c:	008000b4 	movhi	r2,2
   16770:	10a31304 	addi	r2,r2,-29620
   16774:	10c00017 	ldw	r3,0(r2)
   16778:	e0bffd17 	ldw	r2,-12(fp)
   1677c:	1880040e 	bge	r3,r2,16790 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   16780:	008000b4 	movhi	r2,2
   16784:	10a31304 	addi	r2,r2,-29620
   16788:	e0fffd17 	ldw	r3,-12(fp)
   1678c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   16790:	e0bffd17 	ldw	r2,-12(fp)
   16794:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   16798:	00000606 	br	167b4 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1679c:	e0bffd17 	ldw	r2,-12(fp)
   167a0:	10800044 	addi	r2,r2,1
   167a4:	e0bffd15 	stw	r2,-12(fp)
   167a8:	e0bffd17 	ldw	r2,-12(fp)
   167ac:	10800810 	cmplti	r2,r2,32
   167b0:	103fdc1e 	bne	r2,zero,16724 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   167b4:	e0bffe17 	ldw	r2,-8(fp)
}
   167b8:	e037883a 	mov	sp,fp
   167bc:	dfc00217 	ldw	ra,8(sp)
   167c0:	df000117 	ldw	fp,4(sp)
   167c4:	dc000017 	ldw	r16,0(sp)
   167c8:	dec00304 	addi	sp,sp,12
   167cc:	f800283a 	ret

000167d0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   167d0:	deffff04 	addi	sp,sp,-4
   167d4:	df000015 	stw	fp,0(sp)
   167d8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   167dc:	e037883a 	mov	sp,fp
   167e0:	df000017 	ldw	fp,0(sp)
   167e4:	dec00104 	addi	sp,sp,4
   167e8:	f800283a 	ret

000167ec <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   167ec:	defff904 	addi	sp,sp,-28
   167f0:	dfc00615 	stw	ra,24(sp)
   167f4:	df000515 	stw	fp,20(sp)
   167f8:	df000504 	addi	fp,sp,20
   167fc:	e13ffc15 	stw	r4,-16(fp)
   16800:	e17ffd15 	stw	r5,-12(fp)
   16804:	e1bffe15 	stw	r6,-8(fp)
   16808:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   1680c:	e0800217 	ldw	r2,8(fp)
   16810:	d8800015 	stw	r2,0(sp)
   16814:	e13ffc17 	ldw	r4,-16(fp)
   16818:	e17ffd17 	ldw	r5,-12(fp)
   1681c:	e1bffe17 	ldw	r6,-8(fp)
   16820:	e1ffff17 	ldw	r7,-4(fp)
   16824:	00169c40 	call	169c4 <alt_iic_isr_register>
}  
   16828:	e037883a 	mov	sp,fp
   1682c:	dfc00117 	ldw	ra,4(sp)
   16830:	df000017 	ldw	fp,0(sp)
   16834:	dec00204 	addi	sp,sp,8
   16838:	f800283a 	ret

0001683c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   1683c:	defff904 	addi	sp,sp,-28
   16840:	df000615 	stw	fp,24(sp)
   16844:	df000604 	addi	fp,sp,24
   16848:	e13ffe15 	stw	r4,-8(fp)
   1684c:	e17fff15 	stw	r5,-4(fp)
   16850:	e0bfff17 	ldw	r2,-4(fp)
   16854:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16858:	0005303a 	rdctl	r2,status
   1685c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16860:	e0fffb17 	ldw	r3,-20(fp)
   16864:	00bfff84 	movi	r2,-2
   16868:	1884703a 	and	r2,r3,r2
   1686c:	1001703a 	wrctl	status,r2
  
  return context;
   16870:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   16874:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   16878:	e0bffa17 	ldw	r2,-24(fp)
   1687c:	00c00044 	movi	r3,1
   16880:	1884983a 	sll	r2,r3,r2
   16884:	1007883a 	mov	r3,r2
   16888:	008000b4 	movhi	r2,2
   1688c:	10a9e004 	addi	r2,r2,-22656
   16890:	10800017 	ldw	r2,0(r2)
   16894:	1886b03a 	or	r3,r3,r2
   16898:	008000b4 	movhi	r2,2
   1689c:	10a9e004 	addi	r2,r2,-22656
   168a0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   168a4:	008000b4 	movhi	r2,2
   168a8:	10a9e004 	addi	r2,r2,-22656
   168ac:	10800017 	ldw	r2,0(r2)
   168b0:	100170fa 	wrctl	ienable,r2
   168b4:	e0bffc17 	ldw	r2,-16(fp)
   168b8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   168bc:	e0bffd17 	ldw	r2,-12(fp)
   168c0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   168c4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   168c8:	e037883a 	mov	sp,fp
   168cc:	df000017 	ldw	fp,0(sp)
   168d0:	dec00104 	addi	sp,sp,4
   168d4:	f800283a 	ret

000168d8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   168d8:	defff904 	addi	sp,sp,-28
   168dc:	df000615 	stw	fp,24(sp)
   168e0:	df000604 	addi	fp,sp,24
   168e4:	e13ffe15 	stw	r4,-8(fp)
   168e8:	e17fff15 	stw	r5,-4(fp)
   168ec:	e0bfff17 	ldw	r2,-4(fp)
   168f0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   168f4:	0005303a 	rdctl	r2,status
   168f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   168fc:	e0fffb17 	ldw	r3,-20(fp)
   16900:	00bfff84 	movi	r2,-2
   16904:	1884703a 	and	r2,r3,r2
   16908:	1001703a 	wrctl	status,r2
  
  return context;
   1690c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   16910:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   16914:	e0bffa17 	ldw	r2,-24(fp)
   16918:	00c00044 	movi	r3,1
   1691c:	1884983a 	sll	r2,r3,r2
   16920:	0084303a 	nor	r2,zero,r2
   16924:	1007883a 	mov	r3,r2
   16928:	008000b4 	movhi	r2,2
   1692c:	10a9e004 	addi	r2,r2,-22656
   16930:	10800017 	ldw	r2,0(r2)
   16934:	1886703a 	and	r3,r3,r2
   16938:	008000b4 	movhi	r2,2
   1693c:	10a9e004 	addi	r2,r2,-22656
   16940:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   16944:	008000b4 	movhi	r2,2
   16948:	10a9e004 	addi	r2,r2,-22656
   1694c:	10800017 	ldw	r2,0(r2)
   16950:	100170fa 	wrctl	ienable,r2
   16954:	e0bffc17 	ldw	r2,-16(fp)
   16958:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1695c:	e0bffd17 	ldw	r2,-12(fp)
   16960:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   16964:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   16968:	e037883a 	mov	sp,fp
   1696c:	df000017 	ldw	fp,0(sp)
   16970:	dec00104 	addi	sp,sp,4
   16974:	f800283a 	ret

00016978 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   16978:	defffc04 	addi	sp,sp,-16
   1697c:	df000315 	stw	fp,12(sp)
   16980:	df000304 	addi	fp,sp,12
   16984:	e13ffe15 	stw	r4,-8(fp)
   16988:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   1698c:	000530fa 	rdctl	r2,ienable
   16990:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   16994:	e0bfff17 	ldw	r2,-4(fp)
   16998:	00c00044 	movi	r3,1
   1699c:	1884983a 	sll	r2,r3,r2
   169a0:	1007883a 	mov	r3,r2
   169a4:	e0bffd17 	ldw	r2,-12(fp)
   169a8:	1884703a 	and	r2,r3,r2
   169ac:	1004c03a 	cmpne	r2,r2,zero
   169b0:	10803fcc 	andi	r2,r2,255
}
   169b4:	e037883a 	mov	sp,fp
   169b8:	df000017 	ldw	fp,0(sp)
   169bc:	dec00104 	addi	sp,sp,4
   169c0:	f800283a 	ret

000169c4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   169c4:	defff504 	addi	sp,sp,-44
   169c8:	dfc00a15 	stw	ra,40(sp)
   169cc:	df000915 	stw	fp,36(sp)
   169d0:	df000904 	addi	fp,sp,36
   169d4:	e13ffc15 	stw	r4,-16(fp)
   169d8:	e17ffd15 	stw	r5,-12(fp)
   169dc:	e1bffe15 	stw	r6,-8(fp)
   169e0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   169e4:	00bffa84 	movi	r2,-22
   169e8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   169ec:	e0bffd17 	ldw	r2,-12(fp)
   169f0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   169f4:	e0bff817 	ldw	r2,-32(fp)
   169f8:	10800808 	cmpgei	r2,r2,32
   169fc:	1000271e 	bne	r2,zero,16a9c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16a00:	0005303a 	rdctl	r2,status
   16a04:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16a08:	e0fffa17 	ldw	r3,-24(fp)
   16a0c:	00bfff84 	movi	r2,-2
   16a10:	1884703a 	and	r2,r3,r2
   16a14:	1001703a 	wrctl	status,r2
  
  return context;
   16a18:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   16a1c:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   16a20:	00c000b4 	movhi	r3,2
   16a24:	18e9ed04 	addi	r3,r3,-22604
   16a28:	e0bff817 	ldw	r2,-32(fp)
   16a2c:	100490fa 	slli	r2,r2,3
   16a30:	1885883a 	add	r2,r3,r2
   16a34:	e0fffe17 	ldw	r3,-8(fp)
   16a38:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   16a3c:	00c000b4 	movhi	r3,2
   16a40:	18e9ed04 	addi	r3,r3,-22604
   16a44:	e0bff817 	ldw	r2,-32(fp)
   16a48:	100490fa 	slli	r2,r2,3
   16a4c:	1885883a 	add	r2,r3,r2
   16a50:	10800104 	addi	r2,r2,4
   16a54:	e0ffff17 	ldw	r3,-4(fp)
   16a58:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   16a5c:	e0bffe17 	ldw	r2,-8(fp)
   16a60:	10000526 	beq	r2,zero,16a78 <alt_iic_isr_register+0xb4>
   16a64:	e0bff817 	ldw	r2,-32(fp)
   16a68:	e13ffc17 	ldw	r4,-16(fp)
   16a6c:	100b883a 	mov	r5,r2
   16a70:	001683c0 	call	1683c <alt_ic_irq_enable>
   16a74:	00000406 	br	16a88 <alt_iic_isr_register+0xc4>
   16a78:	e0bff817 	ldw	r2,-32(fp)
   16a7c:	e13ffc17 	ldw	r4,-16(fp)
   16a80:	100b883a 	mov	r5,r2
   16a84:	00168d80 	call	168d8 <alt_ic_irq_disable>
   16a88:	e0bff715 	stw	r2,-36(fp)
   16a8c:	e0bff917 	ldw	r2,-28(fp)
   16a90:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16a94:	e0bffb17 	ldw	r2,-20(fp)
   16a98:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   16a9c:	e0bff717 	ldw	r2,-36(fp)
}
   16aa0:	e037883a 	mov	sp,fp
   16aa4:	dfc00117 	ldw	ra,4(sp)
   16aa8:	df000017 	ldw	fp,0(sp)
   16aac:	dec00204 	addi	sp,sp,8
   16ab0:	f800283a 	ret

00016ab4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   16ab4:	defff804 	addi	sp,sp,-32
   16ab8:	dfc00715 	stw	ra,28(sp)
   16abc:	df000615 	stw	fp,24(sp)
   16ac0:	dc000515 	stw	r16,20(sp)
   16ac4:	df000504 	addi	fp,sp,20
   16ac8:	e13ffc15 	stw	r4,-16(fp)
   16acc:	e17ffd15 	stw	r5,-12(fp)
   16ad0:	e1bffe15 	stw	r6,-8(fp)
   16ad4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   16ad8:	e13ffd17 	ldw	r4,-12(fp)
   16adc:	e17ffe17 	ldw	r5,-8(fp)
   16ae0:	e1bfff17 	ldw	r6,-4(fp)
   16ae4:	001456c0 	call	1456c <open>
   16ae8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   16aec:	e0bffb17 	ldw	r2,-20(fp)
   16af0:	10002216 	blt	r2,zero,16b7c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   16af4:	04000074 	movhi	r16,1
   16af8:	841e8904 	addi	r16,r16,31268
   16afc:	e0bffb17 	ldw	r2,-20(fp)
   16b00:	1009883a 	mov	r4,r2
   16b04:	01400304 	movi	r5,12
   16b08:	0013e000 	call	13e00 <__mulsi3>
   16b0c:	8085883a 	add	r2,r16,r2
   16b10:	10c00017 	ldw	r3,0(r2)
   16b14:	e0bffc17 	ldw	r2,-16(fp)
   16b18:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   16b1c:	04000074 	movhi	r16,1
   16b20:	841e8904 	addi	r16,r16,31268
   16b24:	e0bffb17 	ldw	r2,-20(fp)
   16b28:	1009883a 	mov	r4,r2
   16b2c:	01400304 	movi	r5,12
   16b30:	0013e000 	call	13e00 <__mulsi3>
   16b34:	8085883a 	add	r2,r16,r2
   16b38:	10800104 	addi	r2,r2,4
   16b3c:	10c00017 	ldw	r3,0(r2)
   16b40:	e0bffc17 	ldw	r2,-16(fp)
   16b44:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   16b48:	04000074 	movhi	r16,1
   16b4c:	841e8904 	addi	r16,r16,31268
   16b50:	e0bffb17 	ldw	r2,-20(fp)
   16b54:	1009883a 	mov	r4,r2
   16b58:	01400304 	movi	r5,12
   16b5c:	0013e000 	call	13e00 <__mulsi3>
   16b60:	8085883a 	add	r2,r16,r2
   16b64:	10800204 	addi	r2,r2,8
   16b68:	10c00017 	ldw	r3,0(r2)
   16b6c:	e0bffc17 	ldw	r2,-16(fp)
   16b70:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   16b74:	e13ffb17 	ldw	r4,-20(fp)
   16b78:	00148080 	call	14808 <alt_release_fd>
  }
} 
   16b7c:	e037883a 	mov	sp,fp
   16b80:	dfc00217 	ldw	ra,8(sp)
   16b84:	df000117 	ldw	fp,4(sp)
   16b88:	dc000017 	ldw	r16,0(sp)
   16b8c:	dec00304 	addi	sp,sp,12
   16b90:	f800283a 	ret

00016b94 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   16b94:	defffb04 	addi	sp,sp,-20
   16b98:	dfc00415 	stw	ra,16(sp)
   16b9c:	df000315 	stw	fp,12(sp)
   16ba0:	df000304 	addi	fp,sp,12
   16ba4:	e13ffd15 	stw	r4,-12(fp)
   16ba8:	e17ffe15 	stw	r5,-8(fp)
   16bac:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   16bb0:	01000074 	movhi	r4,1
   16bb4:	211e8c04 	addi	r4,r4,31280
   16bb8:	e17ffd17 	ldw	r5,-12(fp)
   16bbc:	01800044 	movi	r6,1
   16bc0:	01c07fc4 	movi	r7,511
   16bc4:	0016ab40 	call	16ab4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   16bc8:	01000074 	movhi	r4,1
   16bcc:	211e8904 	addi	r4,r4,31268
   16bd0:	e17ffe17 	ldw	r5,-8(fp)
   16bd4:	000d883a 	mov	r6,zero
   16bd8:	01c07fc4 	movi	r7,511
   16bdc:	0016ab40 	call	16ab4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   16be0:	01000074 	movhi	r4,1
   16be4:	211e8f04 	addi	r4,r4,31292
   16be8:	e17fff17 	ldw	r5,-4(fp)
   16bec:	01800044 	movi	r6,1
   16bf0:	01c07fc4 	movi	r7,511
   16bf4:	0016ab40 	call	16ab4 <alt_open_fd>
}  
   16bf8:	e037883a 	mov	sp,fp
   16bfc:	dfc00117 	ldw	ra,4(sp)
   16c00:	df000017 	ldw	fp,0(sp)
   16c04:	dec00204 	addi	sp,sp,8
   16c08:	f800283a 	ret

00016c0c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   16c0c:	defffa04 	addi	sp,sp,-24
   16c10:	df000515 	stw	fp,20(sp)
   16c14:	df000504 	addi	fp,sp,20
   16c18:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16c1c:	0005303a 	rdctl	r2,status
   16c20:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16c24:	e0fffc17 	ldw	r3,-16(fp)
   16c28:	00bfff84 	movi	r2,-2
   16c2c:	1884703a 	and	r2,r3,r2
   16c30:	1001703a 	wrctl	status,r2
  
  return context;
   16c34:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   16c38:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   16c3c:	e0bfff17 	ldw	r2,-4(fp)
   16c40:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   16c44:	e0bffd17 	ldw	r2,-12(fp)
   16c48:	10800017 	ldw	r2,0(r2)
   16c4c:	e0fffd17 	ldw	r3,-12(fp)
   16c50:	18c00117 	ldw	r3,4(r3)
   16c54:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   16c58:	e0bffd17 	ldw	r2,-12(fp)
   16c5c:	10800117 	ldw	r2,4(r2)
   16c60:	e0fffd17 	ldw	r3,-12(fp)
   16c64:	18c00017 	ldw	r3,0(r3)
   16c68:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   16c6c:	e0bffd17 	ldw	r2,-12(fp)
   16c70:	e0fffd17 	ldw	r3,-12(fp)
   16c74:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   16c78:	e0bffd17 	ldw	r2,-12(fp)
   16c7c:	e0fffd17 	ldw	r3,-12(fp)
   16c80:	10c00015 	stw	r3,0(r2)
   16c84:	e0bffb17 	ldw	r2,-20(fp)
   16c88:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16c8c:	e0bffe17 	ldw	r2,-8(fp)
   16c90:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   16c94:	e037883a 	mov	sp,fp
   16c98:	df000017 	ldw	fp,0(sp)
   16c9c:	dec00104 	addi	sp,sp,4
   16ca0:	f800283a 	ret

00016ca4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   16ca4:	defffb04 	addi	sp,sp,-20
   16ca8:	dfc00415 	stw	ra,16(sp)
   16cac:	df000315 	stw	fp,12(sp)
   16cb0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   16cb4:	d0a01e17 	ldw	r2,-32648(gp)
   16cb8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   16cbc:	d0a6d717 	ldw	r2,-25764(gp)
   16cc0:	10800044 	addi	r2,r2,1
   16cc4:	d0a6d715 	stw	r2,-25764(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   16cc8:	00002e06 	br	16d84 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   16ccc:	e0bffd17 	ldw	r2,-12(fp)
   16cd0:	10800017 	ldw	r2,0(r2)
   16cd4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   16cd8:	e0bffd17 	ldw	r2,-12(fp)
   16cdc:	10800403 	ldbu	r2,16(r2)
   16ce0:	10803fcc 	andi	r2,r2,255
   16ce4:	10000426 	beq	r2,zero,16cf8 <alt_tick+0x54>
   16ce8:	d0a6d717 	ldw	r2,-25764(gp)
   16cec:	1000021e 	bne	r2,zero,16cf8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   16cf0:	e0bffd17 	ldw	r2,-12(fp)
   16cf4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   16cf8:	e0bffd17 	ldw	r2,-12(fp)
   16cfc:	10800217 	ldw	r2,8(r2)
   16d00:	d0e6d717 	ldw	r3,-25764(gp)
   16d04:	18801d36 	bltu	r3,r2,16d7c <alt_tick+0xd8>
   16d08:	e0bffd17 	ldw	r2,-12(fp)
   16d0c:	10800403 	ldbu	r2,16(r2)
   16d10:	10803fcc 	andi	r2,r2,255
   16d14:	1000191e 	bne	r2,zero,16d7c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   16d18:	e0bffd17 	ldw	r2,-12(fp)
   16d1c:	10c00317 	ldw	r3,12(r2)
   16d20:	e0bffd17 	ldw	r2,-12(fp)
   16d24:	10800517 	ldw	r2,20(r2)
   16d28:	1009883a 	mov	r4,r2
   16d2c:	183ee83a 	callr	r3
   16d30:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   16d34:	e0bfff17 	ldw	r2,-4(fp)
   16d38:	1000031e 	bne	r2,zero,16d48 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   16d3c:	e13ffd17 	ldw	r4,-12(fp)
   16d40:	0016c0c0 	call	16c0c <alt_alarm_stop>
   16d44:	00000d06 	br	16d7c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   16d48:	e0bffd17 	ldw	r2,-12(fp)
   16d4c:	10c00217 	ldw	r3,8(r2)
   16d50:	e0bfff17 	ldw	r2,-4(fp)
   16d54:	1887883a 	add	r3,r3,r2
   16d58:	e0bffd17 	ldw	r2,-12(fp)
   16d5c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   16d60:	e0bffd17 	ldw	r2,-12(fp)
   16d64:	10c00217 	ldw	r3,8(r2)
   16d68:	d0a6d717 	ldw	r2,-25764(gp)
   16d6c:	1880032e 	bgeu	r3,r2,16d7c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   16d70:	e0bffd17 	ldw	r2,-12(fp)
   16d74:	00c00044 	movi	r3,1
   16d78:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   16d7c:	e0bffe17 	ldw	r2,-8(fp)
   16d80:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   16d84:	e0fffd17 	ldw	r3,-12(fp)
   16d88:	d0a01e04 	addi	r2,gp,-32648
   16d8c:	18bfcf1e 	bne	r3,r2,16ccc <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   16d90:	0001883a 	nop
}
   16d94:	e037883a 	mov	sp,fp
   16d98:	dfc00117 	ldw	ra,4(sp)
   16d9c:	df000017 	ldw	fp,0(sp)
   16da0:	dec00204 	addi	sp,sp,8
   16da4:	f800283a 	ret

00016da8 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   16da8:	deffff04 	addi	sp,sp,-4
   16dac:	df000015 	stw	fp,0(sp)
   16db0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   16db4:	000170fa 	wrctl	ienable,zero
}
   16db8:	e037883a 	mov	sp,fp
   16dbc:	df000017 	ldw	fp,0(sp)
   16dc0:	dec00104 	addi	sp,sp,4
   16dc4:	f800283a 	ret

00016dc8 <atexit>:
   16dc8:	200b883a 	mov	r5,r4
   16dcc:	000d883a 	mov	r6,zero
   16dd0:	0009883a 	mov	r4,zero
   16dd4:	000f883a 	mov	r7,zero
   16dd8:	0016e901 	jmpi	16e90 <__register_exitproc>

00016ddc <exit>:
   16ddc:	defffe04 	addi	sp,sp,-8
   16de0:	000b883a 	mov	r5,zero
   16de4:	dc000015 	stw	r16,0(sp)
   16de8:	dfc00115 	stw	ra,4(sp)
   16dec:	2021883a 	mov	r16,r4
   16df0:	0016fc00 	call	16fc0 <__call_exitprocs>
   16df4:	008000b4 	movhi	r2,2
   16df8:	10a30b04 	addi	r2,r2,-29652
   16dfc:	11000017 	ldw	r4,0(r2)
   16e00:	20800f17 	ldw	r2,60(r4)
   16e04:	10000126 	beq	r2,zero,16e0c <exit+0x30>
   16e08:	103ee83a 	callr	r2
   16e0c:	8009883a 	mov	r4,r16
   16e10:	00171600 	call	17160 <_exit>

00016e14 <memcmp>:
   16e14:	01c000c4 	movi	r7,3
   16e18:	3980192e 	bgeu	r7,r6,16e80 <memcmp+0x6c>
   16e1c:	2904b03a 	or	r2,r5,r4
   16e20:	11c4703a 	and	r2,r2,r7
   16e24:	10000f26 	beq	r2,zero,16e64 <memcmp+0x50>
   16e28:	20c00003 	ldbu	r3,0(r4)
   16e2c:	28800003 	ldbu	r2,0(r5)
   16e30:	1880151e 	bne	r3,r2,16e88 <memcmp+0x74>
   16e34:	31bfff84 	addi	r6,r6,-2
   16e38:	01ffffc4 	movi	r7,-1
   16e3c:	00000406 	br	16e50 <memcmp+0x3c>
   16e40:	20c00003 	ldbu	r3,0(r4)
   16e44:	28800003 	ldbu	r2,0(r5)
   16e48:	31bfffc4 	addi	r6,r6,-1
   16e4c:	18800e1e 	bne	r3,r2,16e88 <memcmp+0x74>
   16e50:	21000044 	addi	r4,r4,1
   16e54:	29400044 	addi	r5,r5,1
   16e58:	31fff91e 	bne	r6,r7,16e40 <memcmp+0x2c>
   16e5c:	0005883a 	mov	r2,zero
   16e60:	f800283a 	ret
   16e64:	20c00017 	ldw	r3,0(r4)
   16e68:	28800017 	ldw	r2,0(r5)
   16e6c:	1880041e 	bne	r3,r2,16e80 <memcmp+0x6c>
   16e70:	31bfff04 	addi	r6,r6,-4
   16e74:	21000104 	addi	r4,r4,4
   16e78:	29400104 	addi	r5,r5,4
   16e7c:	39bff936 	bltu	r7,r6,16e64 <memcmp+0x50>
   16e80:	303fe91e 	bne	r6,zero,16e28 <memcmp+0x14>
   16e84:	003ff506 	br	16e5c <memcmp+0x48>
   16e88:	1885c83a 	sub	r2,r3,r2
   16e8c:	f800283a 	ret

00016e90 <__register_exitproc>:
   16e90:	defffa04 	addi	sp,sp,-24
   16e94:	008000b4 	movhi	r2,2
   16e98:	10a30b04 	addi	r2,r2,-29652
   16e9c:	dc000315 	stw	r16,12(sp)
   16ea0:	14000017 	ldw	r16,0(r2)
   16ea4:	dc400415 	stw	r17,16(sp)
   16ea8:	dfc00515 	stw	ra,20(sp)
   16eac:	80805217 	ldw	r2,328(r16)
   16eb0:	2023883a 	mov	r17,r4
   16eb4:	10003e26 	beq	r2,zero,16fb0 <__register_exitproc+0x120>
   16eb8:	10c00117 	ldw	r3,4(r2)
   16ebc:	020007c4 	movi	r8,31
   16ec0:	40c0180e 	bge	r8,r3,16f24 <__register_exitproc+0x94>
   16ec4:	00800034 	movhi	r2,0
   16ec8:	10800004 	addi	r2,r2,0
   16ecc:	1000061e 	bne	r2,zero,16ee8 <__register_exitproc+0x58>
   16ed0:	00bfffc4 	movi	r2,-1
   16ed4:	dfc00517 	ldw	ra,20(sp)
   16ed8:	dc400417 	ldw	r17,16(sp)
   16edc:	dc000317 	ldw	r16,12(sp)
   16ee0:	dec00604 	addi	sp,sp,24
   16ee4:	f800283a 	ret
   16ee8:	01006404 	movi	r4,400
   16eec:	d9400015 	stw	r5,0(sp)
   16ef0:	d9800115 	stw	r6,4(sp)
   16ef4:	d9c00215 	stw	r7,8(sp)
   16ef8:	00000000 	call	0 <__alt_mem_mem6-0x10000>
   16efc:	d9400017 	ldw	r5,0(sp)
   16f00:	d9800117 	ldw	r6,4(sp)
   16f04:	d9c00217 	ldw	r7,8(sp)
   16f08:	103ff126 	beq	r2,zero,16ed0 <__register_exitproc+0x40>
   16f0c:	80c05217 	ldw	r3,328(r16)
   16f10:	10000115 	stw	zero,4(r2)
   16f14:	10c00015 	stw	r3,0(r2)
   16f18:	80805215 	stw	r2,328(r16)
   16f1c:	10006215 	stw	zero,392(r2)
   16f20:	10006315 	stw	zero,396(r2)
   16f24:	10c00117 	ldw	r3,4(r2)
   16f28:	88000d1e 	bne	r17,zero,16f60 <__register_exitproc+0xd0>
   16f2c:	19000084 	addi	r4,r3,2
   16f30:	2109883a 	add	r4,r4,r4
   16f34:	18c00044 	addi	r3,r3,1
   16f38:	2109883a 	add	r4,r4,r4
   16f3c:	1109883a 	add	r4,r2,r4
   16f40:	10c00115 	stw	r3,4(r2)
   16f44:	0005883a 	mov	r2,zero
   16f48:	21400015 	stw	r5,0(r4)
   16f4c:	dfc00517 	ldw	ra,20(sp)
   16f50:	dc400417 	ldw	r17,16(sp)
   16f54:	dc000317 	ldw	r16,12(sp)
   16f58:	dec00604 	addi	sp,sp,24
   16f5c:	f800283a 	ret
   16f60:	02400044 	movi	r9,1
   16f64:	12806217 	ldw	r10,392(r2)
   16f68:	48d2983a 	sll	r9,r9,r3
   16f6c:	19000804 	addi	r4,r3,32
   16f70:	18d1883a 	add	r8,r3,r3
   16f74:	2109883a 	add	r4,r4,r4
   16f78:	4211883a 	add	r8,r8,r8
   16f7c:	2109883a 	add	r4,r4,r4
   16f80:	1109883a 	add	r4,r2,r4
   16f84:	1211883a 	add	r8,r2,r8
   16f88:	5254b03a 	or	r10,r10,r9
   16f8c:	21c02215 	stw	r7,136(r4)
   16f90:	41802215 	stw	r6,136(r8)
   16f94:	12806215 	stw	r10,392(r2)
   16f98:	01000084 	movi	r4,2
   16f9c:	893fe31e 	bne	r17,r4,16f2c <__register_exitproc+0x9c>
   16fa0:	11006317 	ldw	r4,396(r2)
   16fa4:	2252b03a 	or	r9,r4,r9
   16fa8:	12406315 	stw	r9,396(r2)
   16fac:	003fdf06 	br	16f2c <__register_exitproc+0x9c>
   16fb0:	008000b4 	movhi	r2,2
   16fb4:	10aa2d04 	addi	r2,r2,-22348
   16fb8:	80805215 	stw	r2,328(r16)
   16fbc:	003fbe06 	br	16eb8 <__register_exitproc+0x28>

00016fc0 <__call_exitprocs>:
   16fc0:	008000b4 	movhi	r2,2
   16fc4:	10a30b04 	addi	r2,r2,-29652
   16fc8:	10800017 	ldw	r2,0(r2)
   16fcc:	defff304 	addi	sp,sp,-52
   16fd0:	df000b15 	stw	fp,44(sp)
   16fd4:	d8800015 	stw	r2,0(sp)
   16fd8:	10805204 	addi	r2,r2,328
   16fdc:	dd400815 	stw	r21,32(sp)
   16fe0:	dfc00c15 	stw	ra,48(sp)
   16fe4:	ddc00a15 	stw	r23,40(sp)
   16fe8:	dd800915 	stw	r22,36(sp)
   16fec:	dd000715 	stw	r20,28(sp)
   16ff0:	dcc00615 	stw	r19,24(sp)
   16ff4:	dc800515 	stw	r18,20(sp)
   16ff8:	dc400415 	stw	r17,16(sp)
   16ffc:	dc000315 	stw	r16,12(sp)
   17000:	d9000115 	stw	r4,4(sp)
   17004:	2839883a 	mov	fp,r5
   17008:	d8800215 	stw	r2,8(sp)
   1700c:	057fffc4 	movi	r21,-1
   17010:	d8800017 	ldw	r2,0(sp)
   17014:	ddc00217 	ldw	r23,8(sp)
   17018:	14805217 	ldw	r18,328(r2)
   1701c:	90001726 	beq	r18,zero,1707c <__call_exitprocs+0xbc>
   17020:	94400117 	ldw	r17,4(r18)
   17024:	8c3fffc4 	addi	r16,r17,-1
   17028:	80001116 	blt	r16,zero,17070 <__call_exitprocs+0xb0>
   1702c:	8c400044 	addi	r17,r17,1
   17030:	8427883a 	add	r19,r16,r16
   17034:	8c63883a 	add	r17,r17,r17
   17038:	95802204 	addi	r22,r18,136
   1703c:	9ce7883a 	add	r19,r19,r19
   17040:	8c63883a 	add	r17,r17,r17
   17044:	b4e7883a 	add	r19,r22,r19
   17048:	9463883a 	add	r17,r18,r17
   1704c:	e0001726 	beq	fp,zero,170ac <__call_exitprocs+0xec>
   17050:	8c87c83a 	sub	r3,r17,r18
   17054:	b0c7883a 	add	r3,r22,r3
   17058:	18c01e17 	ldw	r3,120(r3)
   1705c:	1f001326 	beq	r3,fp,170ac <__call_exitprocs+0xec>
   17060:	843fffc4 	addi	r16,r16,-1
   17064:	9cffff04 	addi	r19,r19,-4
   17068:	8c7fff04 	addi	r17,r17,-4
   1706c:	857ff71e 	bne	r16,r21,1704c <__call_exitprocs+0x8c>
   17070:	00800034 	movhi	r2,0
   17074:	10800004 	addi	r2,r2,0
   17078:	10002a1e 	bne	r2,zero,17124 <__call_exitprocs+0x164>
   1707c:	dfc00c17 	ldw	ra,48(sp)
   17080:	df000b17 	ldw	fp,44(sp)
   17084:	ddc00a17 	ldw	r23,40(sp)
   17088:	dd800917 	ldw	r22,36(sp)
   1708c:	dd400817 	ldw	r21,32(sp)
   17090:	dd000717 	ldw	r20,28(sp)
   17094:	dcc00617 	ldw	r19,24(sp)
   17098:	dc800517 	ldw	r18,20(sp)
   1709c:	dc400417 	ldw	r17,16(sp)
   170a0:	dc000317 	ldw	r16,12(sp)
   170a4:	dec00d04 	addi	sp,sp,52
   170a8:	f800283a 	ret
   170ac:	91000117 	ldw	r4,4(r18)
   170b0:	88c00017 	ldw	r3,0(r17)
   170b4:	213fffc4 	addi	r4,r4,-1
   170b8:	24001526 	beq	r4,r16,17110 <__call_exitprocs+0x150>
   170bc:	88000015 	stw	zero,0(r17)
   170c0:	183fe726 	beq	r3,zero,17060 <__call_exitprocs+0xa0>
   170c4:	00800044 	movi	r2,1
   170c8:	1408983a 	sll	r4,r2,r16
   170cc:	91406217 	ldw	r5,392(r18)
   170d0:	95000117 	ldw	r20,4(r18)
   170d4:	214a703a 	and	r5,r4,r5
   170d8:	28000b26 	beq	r5,zero,17108 <__call_exitprocs+0x148>
   170dc:	91406317 	ldw	r5,396(r18)
   170e0:	2148703a 	and	r4,r4,r5
   170e4:	20000c1e 	bne	r4,zero,17118 <__call_exitprocs+0x158>
   170e8:	99400017 	ldw	r5,0(r19)
   170ec:	d9000117 	ldw	r4,4(sp)
   170f0:	183ee83a 	callr	r3
   170f4:	90c00117 	ldw	r3,4(r18)
   170f8:	1d3fc51e 	bne	r3,r20,17010 <__call_exitprocs+0x50>
   170fc:	b8c00017 	ldw	r3,0(r23)
   17100:	1cbfd726 	beq	r3,r18,17060 <__call_exitprocs+0xa0>
   17104:	003fc206 	br	17010 <__call_exitprocs+0x50>
   17108:	183ee83a 	callr	r3
   1710c:	003ff906 	br	170f4 <__call_exitprocs+0x134>
   17110:	94000115 	stw	r16,4(r18)
   17114:	003fea06 	br	170c0 <__call_exitprocs+0x100>
   17118:	99000017 	ldw	r4,0(r19)
   1711c:	183ee83a 	callr	r3
   17120:	003ff406 	br	170f4 <__call_exitprocs+0x134>
   17124:	90c00117 	ldw	r3,4(r18)
   17128:	1800071e 	bne	r3,zero,17148 <__call_exitprocs+0x188>
   1712c:	90c00017 	ldw	r3,0(r18)
   17130:	18000926 	beq	r3,zero,17158 <__call_exitprocs+0x198>
   17134:	9009883a 	mov	r4,r18
   17138:	b8c00015 	stw	r3,0(r23)
   1713c:	00000000 	call	0 <__alt_mem_mem6-0x10000>
   17140:	bc800017 	ldw	r18,0(r23)
   17144:	003fb506 	br	1701c <__call_exitprocs+0x5c>
   17148:	90c00017 	ldw	r3,0(r18)
   1714c:	902f883a 	mov	r23,r18
   17150:	1825883a 	mov	r18,r3
   17154:	003fb106 	br	1701c <__call_exitprocs+0x5c>
   17158:	0007883a 	mov	r3,zero
   1715c:	003ffb06 	br	1714c <__call_exitprocs+0x18c>

00017160 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   17160:	defffc04 	addi	sp,sp,-16
   17164:	df000315 	stw	fp,12(sp)
   17168:	df000304 	addi	fp,sp,12
   1716c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   17170:	0001883a 	nop
   17174:	e0bfff17 	ldw	r2,-4(fp)
   17178:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
   1717c:	e0bffd17 	ldw	r2,-12(fp)
   17180:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   17184:	e0bffe17 	ldw	r2,-8(fp)
   17188:	10000226 	beq	r2,zero,17194 <_exit+0x34>
    ALT_SIM_FAIL();
   1718c:	002af070 	cmpltui	zero,zero,43969
   17190:	00000106 	br	17198 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   17194:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   17198:	003fff06 	br	17198 <_exit+0x38>


JPEG_Encoder.elf:     file format elf32-littlenios2
JPEG_Encoder.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x00041670 memsz 0x00041670 flags r-x
    LOAD off    0x00042690 vaddr 0x08041690 paddr 0x08043198 align 2**12
         filesz 0x00001b08 memsz 0x00001b08 flags rw-
    LOAD off    0x00044ca0 vaddr 0x08044ca0 paddr 0x08044ca0 align 2**12
         filesz 0x00000000 memsz 0x04000428 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0003ec24  080001b8  080001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000028b4  0803eddc  0803eddc  0003fddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b08  08041690  08043198  00042690  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          040006d5  08044ca0  08044ca0  00044ca0  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00044198  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001960  00000000  00000000  000441c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0006f001  00000000  00000000  00045b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000130e0  00000000  00000000  000b4b21  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0001a7c3  00000000  00000000  000c7c01  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000047d8  00000000  00000000  000e23c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000083ad  00000000  00000000  000e6b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0001d97f  00000000  00000000  000eef49  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000040  00000000  00000000  0010c8c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ea0  00000000  00000000  0010c908  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0011421a  2**0
                  CONTENTS, READONLY
 17 .cpu          00000003  00000000  00000000  0011421d  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00114220  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00114221  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00114222  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00114226  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0011422a  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  0011422e  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  00114237  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  00114240  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000003  00000000  00000000  00114249  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000038  00000000  00000000  0011424c  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0004fac1  00000000  00000000  00114284  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
080001b8 l    d  .text	00000000 .text
0803eddc l    d  .rodata	00000000 .rodata
08041690 l    d  .rwdata	00000000 .rwdata
08044ca0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../JPEG_Encoder_bsp//obj/HAL/src/crt0.o
080001f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
08000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 bmp_extract.c
00000000 l    df *ABS*	00000000 jpeg_encoding.c
00000000 l    df *ABS*	00000000 cdjpeg.c
00000000 l    df *ABS*	00000000 jaricom.c
00000000 l    df *ABS*	00000000 jcapimin.c
00000000 l    df *ABS*	00000000 jcapistd.c
00000000 l    df *ABS*	00000000 jcarith.c
08001670 l     F .text	000000b0 emit_byte
08001720 l     F .text	00000334 finish_pass
08001a54 l     F .text	00000300 arith_encode
08001d54 l     F .text	0000019c emit_restart
08001ef0 l     F .text	00000474 encode_mcu_DC_first
08002364 l     F .text	000004d4 encode_mcu_AC_first
08002838 l     F .text	00000134 encode_mcu_DC_refine
0800296c l     F .text	00000494 encode_mcu_AC_refine
08002e00 l     F .text	000007e8 encode_mcu
080035e8 l     F .text	000003a8 start_pass
00000000 l    df *ABS*	00000000 jccoefct.c
08003a68 l     F .text	000000a0 start_iMCU_row
08003b08 l     F .text	00000154 start_pass_coef
08003c5c l     F .text	00000434 compress_data
08004090 l     F .text	00000420 compress_first_pass
080044b0 l     F .text	00000308 compress_output
00000000 l    df *ABS*	00000000 jccolor.c
08004988 l     F .text	000001d4 rgb_ycc_start
08004b5c l     F .text	00000270 rgb_ycc_convert
08004dcc l     F .text	00000168 rgb_gray_convert
08004f34 l     F .text	000002bc cmyk_ycck_convert
080051f0 l     F .text	000000d8 grayscale_convert
080052c8 l     F .text	0000010c null_convert
080053d4 l     F .text	00000020 null_method
00000000 l    df *ABS*	00000000 jcdctmgr.c
08005978 l     F .text	000001cc forward_DCT
08005b44 l     F .text	000001a8 forward_DCT_float
08005cec l     F .text	000006c8 start_pass_fdctmgr
0803f078 l     O .rodata	00000080 aanscales.4176
0803f0f8 l     O .rodata	00000040 aanscalefactor.4184
00000000 l    df *ABS*	00000000 jchuff.c
08006470 l     F .text	00000438 jpeg_make_c_derived_tbl
080068a8 l     F .text	00000084 dump_buffer_s
0800692c l     F .text	000000ac dump_buffer_e
080069d8 l     F .text	000001a0 emit_bits_s
08006b78 l     F .text	00000194 emit_bits_e
08006d0c l     F .text	0000005c flush_bits_s
08006d68 l     F .text	00000048 flush_bits_e
08006db0 l     F .text	000000e4 emit_dc_symbol
08006e94 l     F .text	000000e4 emit_ac_symbol
08006f78 l     F .text	00000088 emit_buffered_bits
08007000 l     F .text	00000108 emit_eobrun
08007108 l     F .text	00000138 emit_restart_s
08007240 l     F .text	00000140 emit_restart_e
08007380 l     F .text	00000298 encode_mcu_DC_first
08007618 l     F .text	000002e4 encode_mcu_AC_first
080078fc l     F .text	0000019c encode_mcu_DC_refine
08007a98 l     F .text	000003c0 encode_mcu_AC_refine
08007e58 l     F .text	00000334 encode_one_block
0800818c l     F .text	000002d8 encode_mcu_huff
08008464 l     F .text	00000190 finish_pass_huff
080085f4 l     F .text	000001f0 htest_one_block
080087e4 l     F .text	000001e4 encode_mcu_gather
080089c8 l     F .text	000006c4 jpeg_gen_optimal_table
0800908c l     F .text	00000224 finish_pass_gather
080092b0 l     F .text	00000458 start_pass_huff
00000000 l    df *ABS*	00000000 jcinit.c
00000000 l    df *ABS*	00000000 jcmainct.c
08009950 l     F .text	000000b8 start_pass_main
08009a08 l     F .text	00000178 process_data_simple_main
00000000 l    df *ABS*	00000000 jcmarker.c
08009cfc l     F .text	000000b0 emit_byte
08009dac l     F .text	00000048 emit_marker
08009df4 l     F .text	00000058 emit_2bytes
08009e4c l     F .text	000001f8 emit_dqt
0800a044 l     F .text	000001e0 emit_dht
0800a224 l     F .text	00000290 emit_dac
0800a4b4 l     F .text	00000054 emit_dri
0800a508 l     F .text	00000188 emit_sof
0800a690 l     F .text	00000170 emit_sos
0800a800 l     F .text	00000090 emit_pseudo_sos
0800a890 l     F .text	0000010c emit_jfif_app0
0800a99c l     F .text	000000ec emit_adobe_app14
0800aa88 l     F .text	00000084 write_marker_header
0800ab0c l     F .text	00000038 write_marker_byte
0800ab44 l     F .text	00000078 write_file_header
0800abbc l     F .text	00000220 write_frame_header
0800addc l     F .text	0000011c write_scan_header
0800aef8 l     F .text	00000034 write_file_trailer
0800af2c l     F .text	0000011c write_tables_only
00000000 l    df *ABS*	00000000 jcmaster.c
0800b16c l     F .text	00000098 jpeg_calc_trans_dimensions
0800b204 l     F .text	00000738 initial_setup
0800b93c l     F .text	0000077c validate_script
0800c0b8 l     F .text	0000017c reduce_script
0800c234 l     F .text	00000248 select_scan_parameters
0800c47c l     F .text	0000040c per_scan_setup
0800c888 l     F .text	000002f4 prepare_for_pass
0800cb7c l     F .text	0000005c pass_startup
0800cbd8 l     F .text	000000f8 finish_pass_master
00000000 l    df *ABS*	00000000 jcomapi.c
00000000 l    df *ABS*	00000000 jcparam.c
0803f138 l     O .rodata	00000100 std_luminance_quant_tbl
0803f238 l     O .rodata	00000100 std_chrominance_quant_tbl
0800d3bc l     F .text	00000114 add_huff_table
0800d4d0 l     F .text	000000b8 std_huff_tables
0803f338 l     O .rodata	00000011 bits_dc_luminance.3790
0803f349 l     O .rodata	0000000c val_dc_luminance.3791
0803f355 l     O .rodata	00000011 bits_ac_luminance.3794
0803f366 l     O .rodata	000000a2 val_ac_luminance.3795
0803f408 l     O .rodata	00000011 bits_dc_chrominance.3792
0803f419 l     O .rodata	0000000c val_dc_chrominance.3793
0803f425 l     O .rodata	00000011 bits_ac_chrominance.3796
0803f436 l     O .rodata	000000a2 val_ac_chrominance.3797
0800df88 l     F .text	00000084 fill_a_scan
0800e00c l     F .text	000000a4 fill_scans
0800e0b0 l     F .text	000000f8 fill_dc_scans
00000000 l    df *ABS*	00000000 jcprepct.c
0800e550 l     F .text	0000009c start_pass_prep
0800e5ec l     F .text	0000007c expand_bottom_edge
0800e668 l     F .text	00000360 pre_process_data
0800e9c8 l     F .text	00000380 pre_process_context
0800ed48 l     F .text	00000264 create_context_buffer
00000000 l    df *ABS*	00000000 jcsample.c
0800f164 l     F .text	00000020 start_pass_downsample
0800f184 l     F .text	000000b8 expand_right_edge
0800f23c l     F .text	00000130 sep_downsample
0800f36c l     F .text	00000258 int_downsample
0800f5c4 l     F .text	000000b0 fullsize_downsample
0800f674 l     F .text	0000013c h2v1_downsample
0800f7b0 l     F .text	00000194 h2v2_downsample
0800f944 l     F .text	00000598 h2v2_smooth_downsample
0800fedc l     F .text	00000358 fullsize_smooth_downsample
00000000 l    df *ABS*	00000000 jctrans.c
08010b88 l     F .text	00000098 transencode_master_selection
08011158 l     F .text	000000fc transencode_coef_controller
08010c20 l     F .text	000000a0 start_iMCU_row
08010cc0 l     F .text	00000078 start_pass_coef
08010d38 l     F .text	00000420 compress_output
00000000 l    df *ABS*	00000000 jdatadst.c
08011254 l     F .text	00000074 init_destination
080112c8 l     F .text	00000020 init_mem_destination
080112e8 l     F .text	000000a4 empty_output_buffer
0801138c l     F .text	00000118 empty_mem_output_buffer
080114a4 l     F .text	000000ec term_destination
08011590 l     F .text	00000060 term_mem_destination
00000000 l    df *ABS*	00000000 jerror.c
0801184c l     F .text	00000038 error_exit
08011884 l     F .text	00000064 output_message
080118e8 l     F .text	000000a4 emit_message
0801198c l     F .text	00000204 format_message
08011b90 l     F .text	00000038 reset_error_mgr
00000000 l    df *ABS*	00000000 jfdctflt.c
00000000 l    df *ABS*	00000000 jfdctfst.c
00000000 l    df *ABS*	00000000 jfdctint.c
00000000 l    df *ABS*	00000000 jidctflt.c
00000000 l    df *ABS*	00000000 jidctfst.c
00000000 l    df *ABS*	00000000 jidctint.c
00000000 l    df *ABS*	00000000 jmemansi.c
08025028 l     F .text	000000c0 read_backing_store
080250e8 l     F .text	000000c0 write_backing_store
080251a8 l     F .text	0000003c close_backing_store
00000000 l    df *ABS*	00000000 jmemmgr.c
080252e8 l     F .text	00000060 out_of_memory
080430fc l     O .rwdata	00000008 first_pool_slop
08043104 l     O .rwdata	00000008 extra_pool_slop
08025348 l     F .text	000002d8 alloc_small
08025620 l     F .text	00000178 alloc_large
08025798 l     F .text	00000178 alloc_sarray
08025910 l     F .text	00000188 alloc_barray
08025a98 l     F .text	000000f8 request_virt_sarray
08025b90 l     F .text	000000f8 request_virt_barray
08025c88 l     F .text	00000444 realize_virt_arrays
080260cc l     F .text	000001dc do_sarray_io
080262a8 l     F .text	000001e0 do_barray_io
08026488 l     F .text	000002e8 access_virt_sarray
08026770 l     F .text	000002ec access_virt_barray
08026a5c l     F .text	0000029c free_pool
08026cf8 l     F .text	0000007c self_destruct
00000000 l    df *ABS*	00000000 jquant1.c
08040a00 l     O .rodata	00000100 base_dither_matrix
08027030 l     F .text	00000240 select_ncolors
08040b00 l     O .rodata	0000000c RGB_order.3775
08027270 l     F .text	00000064 output_value
080272d4 l     F .text	00000060 largest_input_value
08027334 l     F .text	00000284 create_colormap
080275b8 l     F .text	00000278 create_colorindex
08027830 l     F .text	0000013c make_odither_array
0802796c l     F .text	0000011c create_odither_tables
08027a88 l     F .text	00000144 color_quantize
08027bcc l     F .text	00000164 color_quantize3
08027d30 l     F .text	000001f4 quantize_ord_dither
08027f24 l     F .text	0000023c quantize3_ord_dither
08028160 l     F .text	0000034c quantize_fs_dither
080284ac l     F .text	000000a8 alloc_fs_workspace
08028554 l     F .text	000001e0 start_pass_1_quant
08028734 l     F .text	00000020 finish_pass_1_quant
08028754 l     F .text	0000004c new_color_map_1_quant
00000000 l    df *ABS*	00000000 jquant2.c
080288e4 l     F .text	0000013c prescan_quantize
08028a20 l     F .text	0000007c find_biggest_color_pop
08028a9c l     F .text	00000074 find_biggest_volume
08028b10 l     F .text	00000758 update_box
08029268 l     F .text	00000240 median_cut
080294a8 l     F .text	00000298 compute_color
08029740 l     F .text	00000140 select_colors
08029880 l     F .text	00000568 find_nearby_colors
08029de8 l     F .text	000002b4 find_best_colors
0802a09c l     F .text	000001e4 fill_inverse_cmap
0802a280 l     F .text	00000190 pass2_no_dither
0802a410 l     F .text	00000528 pass2_fs_dither
0802a938 l     F .text	000001b0 init_error_limit
0802aae8 l     F .text	00000064 finish_pass1
0802ab4c l     F .text	00000020 finish_pass2
0802ab6c l     F .text	0000024c start_pass_2_quant
0802adb8 l     F .text	00000038 new_color_map_2_quant
00000000 l    df *ABS*	00000000 jutils.c
00000000 l    df *ABS*	00000000 jpeg_encoder.c
08044ca0 l     O .bss	00000001 count
08044ca1 l     O .bss	00000001 countShow
08044ca2 l     O .bss	00000001 countItr
00000000 l    df *ABS*	00000000 fp-bit.c
0802b564 l     F .text	000001f4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0802c0e8 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 ctype_.c
08041255 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0802cd6c l     F .text	00000008 __fp_lock
0802cd74 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 ftell.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 getenv.c
00000000 l    df *ABS*	00000000 getenv_r.c
00000000 l    df *ABS*	00000000 impure.c
08041690 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
0802ef38 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 rewind.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 scanf.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 sscanf.c
0802f320 l     F .text	00000008 eofread
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 tmpfile.c
00000000 l    df *ABS*	00000000 tmpnam.c
0802fa44 l     F .text	000000e0 worker
00000000 l    df *ABS*	00000000 vfprintf.c
0802fce4 l     F .text	00000034 __sprint_r
08041446 l     O .rodata	00000010 blanks.3515
08041456 l     O .rodata	00000010 zeroes.3516
00000000 l    df *ABS*	00000000 vfscanf.c
0804146e l     O .rodata	00000022 basefix.3427
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
08033724 l     F .text	0000023c quorem
00000000 l    df *ABS*	00000000 environ.c
08044cb4 l     O .bss	00000004 initial_env
00000000 l    df *ABS*	00000000 fdopen.c
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
080414b0 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
080415f8 l     O .rodata	0000000c p05.2435
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 remove.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 strtod.c
08041ea4 l     O .rwdata	00000014 fpi.2015
08041614 l     O .rodata	00000028 tinytens
08041eb8 l     O .rwdata	00000014 fpinan.2051
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 unlinkr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
08039a38 l     F .text	00000110 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
0803b3dc l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0803bd50 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0803be6c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_env_lock.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0803bf14 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0803c034 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
0803c128 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0803c2a8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0803c394 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0803c570 l     F .text	00000050 alt_get_errno
0803c5c0 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
0803c808 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08043140 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_unlink.c
0803ca7c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0803cb34 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0803cc74 l     F .text	00000038 alt_dev_reg
08042074 l     O .rwdata	00001060 jtag_uart
080430d4 l     O .rwdata	00000028 altera_hostfs
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0803cf6c l     F .text	00000204 altera_avalon_jtag_uart_irq
0803d170 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0803d7ac l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_hostfs.c
08043180 l     O .rwdata	00000004 hcinfo.2311
08043174 l     O .rwdata	00000004 hcinfo.2324
08043168 l     O .rwdata	00000004 hcinfo.2333
0804315c l     O .rwdata	00000004 hcinfo.2346
08043150 l     O .rwdata	00000004 hcinfo.2359
08043144 l     O .rwdata	00000004 hcinfo.2385
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0803e180 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0803e908 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 
08040d50 g     O .rodata	000000d0 jpeg_natural_order6
080369f8 g     F .text	00000074 _mprec_log10
080106f0 g     F .text	00000498 jpeg_copy_critical_parameters
08036ae8 g     F .text	00000084 __any_on
080355cc g     F .text	00000064 _isatty_r
08044d04 g     O .bss	00000034 g_input_file_header
080414e0 g     O .rodata	00000028 __mprec_tinytens
0803c4b8 g     F .text	00000078 alt_main
0802f698 g     F .text	00000094 strcpy
0802c988 g     F .text	00000044 __ashldi3
0802eea0 g     F .text	00000084 _puts_r
0c044e38 g     O .bss	00000100 alt_irq
0801a16c g     F .text	00000e30 jpeg_idct_13x13
08035744 g     F .text	0000006c _lseek_r
08043198 g       *ABS*	00000000 __flash_rwdata_start
0800efac g     F .text	000001b8 jinit_c_prep_controller
08035050 g     F .text	00000098 __sflags
0802fa34 g     F .text	00000010 tmpfile
0803b7e4 g     F .text	0000005c __eqdf2
0802461c g     F .text	000004bc jpeg_idct_3x6
0c0450c8 g       *ABS*	00000000 __alt_heap_start
08037348 g     F .text	00000068 _kill_r
0802ee64 g     F .text	0000003c printf
0802f4f8 g     F .text	0000005c __sseek
0802ce10 g     F .text	0000010c __sinit
08035668 g     F .text	0000009c _setlocale_r
0802cd88 g     F .text	00000078 __sfmoreglue
080398ec g     F .text	0000001c ungetc
0803c550 g     F .text	00000020 __malloc_unlock
0800d1f0 g     F .text	00000080 jpeg_default_qtables
0803d8a8 g     F .text	0000016c alt_hostfs_open
080373b4 g     F .text	00001548 _strtod_r
08024f10 g     F .text	00000034 jpeg_get_small
080133f0 g     F .text	00000c74 jpeg_idct_float
0800d874 g     F .text	00000714 jpeg_set_colorspace
0800d2e4 g     F .text	00000084 jpeg_quality_scaling
08023598 g     F .text	000007e4 jpeg_idct_5x10
08035990 g     F .text	0000018c memmove
0800e1a8 g     F .text	000003a8 jpeg_simple_progression
0802ce00 g     F .text	00000010 _cleanup
08035b1c g     F .text	000000a8 _Balloc
0802ba30 g     F .text	000000a4 __fixsfsi
08012540 g     F .text	000006a0 jpeg_fdct_ifast
08040e20 g     O .rodata	000000a4 jpeg_natural_order5
0803b89c g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
08017510 g     F .text	000000b4 jpeg_idct_1x1
08000000 g     F .entry	0000000c __reset
0802e108 g     F .text	0000002c getenv
08000020 g       *ABS*	00000000 __flash_exceptions_start
08014b58 g     F .text	00000c44 jpeg_idct_islow
0802dd10 g     F .text	00000068 _fstat_r
08044ca4 g     O .bss	00000004 errno
080332ac g     F .text	00000024 __svfscanf
08003990 g     F .text	000000d8 jinit_arith_encoder
08018954 g     F .text	00000c68 jpeg_idct_11x11
0802c5f0 g     F .text	0000002c __make_fp
08044cc8 g     O .bss	00000004 alt_argv
0804b0fc g       *ABS*	00000000 _gp
0803cb04 g     F .text	00000030 usleep
0802b7a4 g     F .text	00000058 __subsf3
0803c014 g     F .text	00000020 getpid
0801bd1c g     F .text	00000e10 jpeg_idct_15x15
08021544 g     F .text	00000ca4 jpeg_idct_8x16
08041ef4 g     O .rwdata	00000180 alt_fd_list
0801ea44 g     F .text	00000b20 jpeg_idct_14x7
0800d270 g     F .text	00000074 jpeg_set_linear_quality
0803dbf0 g     F .text	000000b8 alt_hostfs_seek
0803e328 g     F .text	00000090 alt_find_dev
0802ebb0 g     F .text	00000140 memcpy
0803a350 g     F .text	0000028c __hexnan
0801db74 g     F .text	00000ed0 jpeg_idct_16x8
08001124 g     F .text	00000044 jpeg_write_m_byte
0802cd7c g     F .text	0000000c _cleanup_r
0802b0cc g     F .text	00000058 jround_up
0803ba1c g     F .text	000000d4 __floatsidf
0803e4cc g     F .text	00000084 alt_fs_reg
0803e9e8 g     F .text	00000078 alt_io_redirect
0803b964 g     F .text	0000005c __ltdf2
0803eddc g       *ABS*	00000000 __DTOR_END__
0800d588 g     F .text	000001fc jpeg_set_defaults
0802ef24 g     F .text	00000014 puts
08035814 g     F .text	00000040 mbrtowc
0802fb24 g     F .text	00000098 _tmpnam_r
08023d7c g     F .text	000008a0 jpeg_idct_4x8
08033260 g     F .text	0000004c _vfscanf_r
08036954 g     F .text	000000a4 __ratio
08040ec4 g     O .rodata	00000080 jpeg_natural_order4
0803d370 g     F .text	00000218 altera_avalon_jtag_uart_read
080252a0 g     F .text	00000028 jpeg_mem_init
0802e404 g     F .text	00000014 malloc
0802ee38 g     F .text	0000002c _printf_r
08037204 g     F .text	00000014 remove
0802b084 g     F .text	00000048 jdiv_round_up
0802c208 g     F .text	00000008 __udivsi3
0803c084 g     F .text	000000a4 isatty
08035630 g     F .text	00000038 iswspace
08041530 g     O .rodata	000000c8 __mprec_tens
08035704 g     F .text	0000000c __locale_charset
0803a5dc g     F .text	00000084 __fixunsdfsi
08044cb0 g     O .bss	00000004 __malloc_top_pad
080373b0 g     F .text	00000004 _getpid_r
08022cc4 g     F .text	000008d4 jpeg_idct_6x12
0802113c g     F .text	000002e4 jpeg_idct_4x2
080392a8 g     F .text	00000024 strtoul
08043124 g     O .rwdata	00000004 __mb_cur_max
08035710 g     F .text	0000000c _localeconv_r
080392cc g     F .text	00000394 _strtoull_r
08035f4c g     F .text	0000003c __i2b
080350e8 g     F .text	000004e4 __sfvwrite_r
0802f18c g     F .text	00000064 _sbrk_r
0801af9c g     F .text	00000d80 jpeg_idct_14x14
0803da80 g     F .text	000000b8 alt_hostfs_read
080251e4 g     F .text	000000bc jpeg_open_backing_store
08016fa4 g     F .text	00000334 jpeg_idct_3x3
08036b6c g     F .text	0000006c _read_r
08041e98 g     O .rwdata	0000000c __lc_ctype
08043138 g     O .rwdata	00000004 alt_max_fd
0802c840 g     F .text	00000104 __unpack_d
0802ca04 g     F .text	0000013c _fclose_r
0802cd3c g     F .text	00000030 fflush
08044cac g     O .bss	00000004 __malloc_max_sbrked_mem
0803b730 g     F .text	00000054 __adddf3
080366c8 g     F .text	00000148 __b2d
080053f4 g     F .text	00000584 jinit_color_converter
0803acb0 g     F .text	00000628 __umoddi3
0803c3e4 g     F .text	000000d4 lseek
08043110 g     O .rwdata	00000004 _global_impure_ptr
0800cf28 g     F .text	00000058 jpeg_destroy
0803eeb0 g     O .rodata	000001c8 jpeg_aritab
08036bd8 g     F .text	000005fc _realloc_r
0c0450c8 g       *ABS*	00000000 __bss_end
0803e818 g     F .text	000000f0 alt_iic_isr_register
0802b124 g     F .text	000000d0 jcopy_sample_rows
0803eaf8 g     F .text	00000104 alt_tick
0c044d38 g     O .bss	00000100 __hexdig
0802b3b4 g     F .text	000001b0 convert_picture
0803a660 g     F .text	00000650 __udivdi3
08041508 g     O .rodata	00000028 __mprec_bigtens
08035d30 g     F .text	00000104 __s2b
08016018 g     F .text	00000608 jpeg_idct_6x6
0802bfcc g     F .text	0000011c __floatunsidf
08036468 g     F .text	00000058 __mcmp
0800cfd4 g     F .text	00000054 jpeg_alloc_huff_table
0804310c g     O .rwdata	00000004 __ctype_ptr
0802d028 g     F .text	00000018 __fp_lock_all
0803e7cc g     F .text	0000004c alt_ic_irq_enabled
08009b80 g     F .text	0000017c jinit_c_main_controller
0803ea60 g     F .text	00000098 alt_alarm_stop
08038cb0 g     F .text	00000024 strtol
08044cd0 g     O .bss	00000004 alt_irq_active
0803da14 g     F .text	0000006c alt_hostfs_close
080000ec g     F .exceptions	000000cc alt_irq_handler
08041ecc g     O .rwdata	00000028 alt_dev_null
080407e8 g     O .rodata	00000200 jpeg_std_message_table
0802c528 g     F .text	000000c8 __unpack_f
08000f48 g     F .text	0000011c jpeg_write_marker
08024ad8 g     F .text	00000310 jpeg_idct_2x4
0803e164 g     F .text	0000001c alt_dcache_flush_all
08035e34 g     F .text	00000068 __hi0bits
0803baf0 g     F .text	000000d4 __fixdfsi
0801cb2c g     F .text	00001048 jpeg_idct_16x16
080388fc g     F .text	0000001c strtod
0802adf0 g     F .text	00000294 jinit_2pass_quantizer
08043198 g       *ABS*	00000000 __ram_rwdata_end
08039908 g     F .text	00000064 _unlink_r
08043130 g     O .rwdata	00000008 alt_dev_list
0803cb84 g     F .text	000000f0 write
08009708 g     F .text	00000144 jinit_huff_encoder
0802f140 g     F .text	00000038 _rewind_r
0803b32c g     F .text	0000005c __gtsf2
08043120 g     O .rwdata	00000004 environ
08041690 g       *ABS*	00000000 __ram_rodata_end
0803bf64 g     F .text	000000b0 fstat
0802d1cc g     F .text	00000024 fprintf
0802c944 g     F .text	00000044 __lshrdi3
0803c178 g     F .text	00000130 kill
0803b9c0 g     F .text	0000005c __ledf2
08011c88 g     F .text	000008b8 jpeg_fdct_float
0802f55c g     F .text	00000098 strcat
080361e0 g     F .text	0000012c __pow5mult
08044cc0 g     O .bss	00000004 __nlocale_changed
0802c210 g     F .text	00000008 __umodsi3
0802f230 g     F .text	0000002c _scanf_r
08011bc8 g     F .text	000000c0 jpeg_std_error
0c0450c8 g       *ABS*	00000000 end
0802c3fc g     F .text	0000012c __pack_f
08040b0c g     O .rodata	00000140 jpeg_natural_order
0802dcec g     F .text	00000024 fseek
080252c8 g     F .text	00000020 jpeg_mem_term
08000938 g     F .text	00000034 read_stdin
0803ceac g     F .text	000000c0 altera_avalon_jtag_uart_init
080195bc g     F .text	00000bb0 jpeg_idct_12x12
0803eddc g       *ABS*	00000000 __CTOR_LIST__
10000000 g       *ABS*	00000000 __alt_stack_pointer
0803d820 g     F .text	00000088 alt_avalon_timer_sc_init
0802c350 g     F .text	000000ac __clzsi2
0803d588 g     F .text	00000224 altera_avalon_jtag_uart_write
0802f96c g     F .text	000000c8 _tmpfile_r
0802d018 g     F .text	00000004 __sfp_lock_acquire
08035898 g     F .text	000000f8 memchr
0802fd18 g     F .text	00001e7c ___vfprintf_internal_r
0802f25c g     F .text	00000058 _sprintf_r
0802d5a8 g     F .text	000002d0 _free_r
08016620 g     F .text	00000564 jpeg_idct_5x5
0800b048 g     F .text	000000cc jinit_marker_writer
08012be0 g     F .text	00000810 jpeg_fdct_islow
08033520 g     F .text	000001a0 __call_exitprocs
080014c0 g     F .text	000001b0 jpeg_write_raw_data
080287a0 g     F .text	00000144 jinit_1pass_quantizer
08026d74 g     F .text	000002bc jinit_memory_mgr
08044cbc g     O .bss	00000004 __mlocale_changed
08043118 g     O .rwdata	00000004 __malloc_sbrk_base
080001b8 g     F .text	0000003c _start
08044cd4 g     O .bss	00000004 _alt_tick_rate
08038cd4 g     F .text	00000330 _strtoll_r
0803630c g     F .text	0000015c __lshift
08044cd8 g     O .bss	00000004 _alt_nticks
0803c858 g     F .text	000000f4 read
08014064 g     F .text	00000af4 jpeg_idct_ifast
0803cce0 g     F .text	00000068 alt_sys_init
0802b98c g     F .text	000000a4 __floatsisf
0802edcc g     F .text	0000006c _open_r
08017f0c g     F .text	00000a48 jpeg_idct_10x10
0803ecac g     F .text	00000130 __register_exitproc
08024fe8 g     F .text	00000040 jpeg_mem_available
0802f7b8 g     F .text	000000fc strncmp
0802b23c g     F .text	0000003c jzero_far
08035f88 g     F .text	00000258 __multiply
0803d214 g     F .text	00000068 altera_avalon_jtag_uart_close
0802c218 g     F .text	00000028 __mulsi3
08041690 g       *ABS*	00000000 __ram_rwdata_start
0803eddc g       *ABS*	00000000 __ram_rodata_start
0802f8b4 g     F .text	000000b8 strncpy
0803cacc g     F .text	00000038 unlink
08044cdc g     O .bss	00000028 __malloc_current_mallinfo
0803b2d8 g     F .text	00000054 __eqsf2
08036810 g     F .text	00000144 __d2b
0803cd48 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08039004 g     F .text	000002a4 _strtoul_r
08034f7c g     F .text	000000b8 _fdopen_r
0803e550 g     F .text	000000d4 alt_get_fd
0803e010 g     F .text	00000154 alt_busy_sleep
080172d8 g     F .text	00000238 jpeg_idct_2x2
0803bc80 g     F .text	000000d0 __fpcmp_parts_d
080336c0 g     F .text	00000064 _close_r
080001f4 g     F .text	00000144 bmp_extract_header
0803ec30 g     F .text	0000007c memcmp
0803ce08 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0c0450c8 g       *ABS*	00000000 __alt_stack_base
0803ce58 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0802dffc g     F .text	000000b0 _fwrite_r
08035034 g     F .text	0000001c fdopen
0802f328 g     F .text	0000007c sscanf
08000c40 g     F .text	00000104 jpeg_suppress_tables
080333ac g     F .text	00000174 __swsetup_r
0802bdb8 g     F .text	000001b4 __divdf3
0802cf1c g     F .text	000000fc __sfp
08036a6c g     F .text	0000007c __copybits
08041a90 g     O .rwdata	00000408 __malloc_av_
0802d024 g     F .text	00000004 __sinit_lock_release
0802bad4 g     F .text	000002e4 __muldf3
0802f41c g     F .text	00000054 __sread
08041030 g     O .rodata	00000010 __thenan_sf
0802d42c g     F .text	00000040 fread
0803e3b8 g     F .text	00000114 alt_find_file
08000c10 g     F .text	00000030 jpeg_abort_compress
0803e1d0 g     F .text	000000a0 alt_dev_llist_insert
0803c530 g     F .text	00000020 __malloc_lock
0802d1a4 g     F .text	00000028 _fprintf_r
0803c9cc g     F .text	000000b0 sbrk
0802cb54 g     F .text	000001e8 _fflush_r
0803996c g     F .text	000000cc _calloc_r
0802d188 g     F .text	0000001c fopen
08044ca0 g       *ABS*	00000000 __bss_start
0802ecf0 g     F .text	000000dc memset
0802b278 g     F .text	0000013c main
0800d028 g     F .text	000001c8 jpeg_add_quant_table
0800ce80 g     F .text	000000a8 jpeg_abort
08044ccc g     O .bss	00000004 alt_envp
08044ca8 g     O .bss	00000004 __malloc_max_total_mem
0803cda8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0802de88 g     F .text	00000014 ftell
0803b388 g     F .text	00000054 __ltsf2
0802d1f0 g     F .text	0000023c _fread_r
0802f554 g     F .text	00000008 __sclose
10000000 g       *ABS*	00000000 __alt_heap_limit
08001230 g     F .text	000000fc jpeg_start_compress
0802cb40 g     F .text	00000014 fclose
0800cf80 g     F .text	00000054 jpeg_alloc_quant_table
08038a38 g     F .text	00000278 _strtol_r
0802bf6c g     F .text	00000060 __truncdfsf2
0802e134 g     F .text	0000010c _findenv_r
08000be0 g     F .text	00000030 jpeg_destroy_compress
0c044f38 g     O .bss	00000190 _atexit0
08033960 g     F .text	0000161c _dtoa_r
0802e42c g     F .text	00000784 _malloc_r
08001168 g     F .text	000000c8 jpeg_write_tables
0800d784 g     F .text	000000f0 jpeg_default_colorspace
0804313c g     O .rwdata	00000004 alt_errno
08024f7c g     F .text	00000034 jpeg_get_large
08039660 g     F .text	000000f0 __submore
0801f564 g     F .text	000008ec jpeg_idct_12x6
0803beb8 g     F .text	00000020 __env_unlock
0802e0ec g     F .text	0000001c _findenv
0802de9c g     F .text	000000a8 _fwalk
08000338 g     F .text	000001c4 bmp_rearrange_comps
0802fcd0 g     F .text	00000014 tmpnam
08035854 g     F .text	00000044 _mbtowc_r
0802c15c g     F .text	00000050 __divsi3
08041040 g     O .rodata	00000014 __thenan_df
0802d46c g     F .text	0000013c _malloc_trim_r
0803eddc g       *ABS*	00000000 __CTOR_END__
0802b7fc g     F .text	00000190 __mulsf3
0802f5f4 g     F .text	000000a4 strcmp
080009a0 g     F .text	00000240 jpeg_CreateCompress
0803eddc g       *ABS*	00000000 __flash_rodata_start
0803eddc g       *ABS*	00000000 __DTOR_LIST__
0803b840 g     F .text	0000005c __nedf2
0803ccac g     F .text	00000034 alt_irq_init
0803c94c g     F .text	00000080 alt_release_fd
0802f2b4 g     F .text	0000006c sprintf
08041054 g     O .rodata	00000100 __clz_tab
08044cb8 g     O .bss	00000004 _PathLocale
08038918 g     F .text	00000120 strtof
0803ec1c g     F .text	00000014 atexit
08024fb0 g     F .text	00000038 jpeg_free_large
08033340 g     F .text	0000006c _write_r
08040f44 g     O .rodata	00000064 jpeg_natural_order3
0803571c g     F .text	0000001c setlocale
0802f1f0 g     F .text	00000040 scanf
08011694 g     F .text	000001b8 jpeg_mem_dest
080063b4 g     F .text	000000bc jinit_forward_dct
08037340 g     F .text	00000008 nanf
08043114 g     O .rwdata	00000004 _impure_ptr
08044cc4 g     O .bss	00000004 alt_argc
080357b0 g     F .text	00000064 _mbrtowc_r
0803e2cc g     F .text	0000005c _do_dtors
0802d878 g     F .text	00000474 _fseek_r
080221e8 g     F .text	00000adc jpeg_idct_7x14
0802ef54 g     F .text	000001ec __srefill_r
08000020 g       .exceptions	00000000 alt_irq_entry
08036668 g     F .text	00000060 __ulp
08037218 g     F .text	00000038 __isinfd
0802d040 g     F .text	00000018 __fp_unlock_all
0800984c g     F .text	00000104 jinit_compress_master
0800b114 g     F .text	00000058 jpeg_calc_jpeg_dimensions
0800080c g     F .text	0000012c keymatch
08020cbc g     F .text	00000480 jpeg_idct_6x3
08043128 g     O .rwdata	00000008 alt_fs_list
0801579c g     F .text	0000087c jpeg_idct_7x7
08040c4c g     O .rodata	00000104 jpeg_natural_order7
0803db38 g     F .text	000000b8 alt_hostfs_write
08000020 g       *ABS*	00000000 __ram_exceptions_start
08035738 g     F .text	0000000c localeconv
08000d44 g     F .text	00000204 jpeg_finish_compress
08024de8 g     F .text	00000128 jpeg_idct_1x2
08044d38 g     O .bss	04000000 g_file_buffer
0803e640 g     F .text	00000050 alt_ic_isr_register
0802fbbc g     F .text	000000f8 _tempnam_r
0802e0ac g     F .text	00000040 fwrite
08039b48 g     F .text	00000090 __hexdig_init
0802f3a4 g     F .text	00000078 _sscanf_r
08043198 g       *ABS*	00000000 _edata
08020618 g     F .text	000006a4 jpeg_idct_8x4
0c0450c8 g       *ABS*	00000000 _end
08021420 g     F .text	00000124 jpeg_idct_2x1
080001b8 g       *ABS*	00000000 __ram_exceptions_end
080332d0 g     F .text	00000070 vfscanf
0803d27c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0802f178 g     F .text	00000014 rewind
0803e72c g     F .text	000000a0 alt_ic_irq_disable
0802f470 g     F .text	00000088 __swrite
0804311c g     O .rwdata	00000004 __malloc_trim_threshold
0803ebfc g     F .text	00000020 altera_nios2_qsys_irq_init
08016b84 g     F .text	00000420 jpeg_idct_4x4
0802c9cc g     F .text	00000038 exit
0802df44 g     F .text	000000b8 _fwalk_reent
08001064 g     F .text	000000c0 jpeg_write_m_header
080364c0 g     F .text	000001a8 __mdiff
0802c1ac g     F .text	0000005c __modsi3
10000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
0802d01c g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
0800068c g     F .text	00000180 jpeg_encode
08010234 g     F .text	000003f4 jinit_downsampler
0803727c g     F .text	000000c4 __sccl
08041154 g     O .rodata	00000101 _ctype_
0800d368 g     F .text	00000054 jpeg_set_quality
080115f0 g     F .text	000000a4 jpeg_stdio_dest
0803bbc4 g     F .text	000000bc __fpcmp_parts_f
0802d058 g     F .text	00000130 _fopen_r
08037250 g     F .text	0000002c __isnand
0803bed8 g     F .text	0000003c _exit
0803ded0 g     F .text	00000140 alt_alarm_start
0802c240 g     F .text	00000110 __muldi3
0802fcb4 g     F .text	0000001c tempnam
0802e25c g     F .text	000001a8 __smakebuf_r
0802f72c g     F .text	0000008c strlen
0803c6b0 g     F .text	00000158 open
0800132c g     F .text	00000194 jpeg_write_scanlines
0803b900 g     F .text	00000064 __gedf2
080371d4 g     F .text	00000030 _remove_r
08039bd8 g     F .text	00000778 __gethex
080004fc g     F .text	00000190 bmp_extract
0802b1f4 g     F .text	00000048 jcopy_block_row
0802dd78 g     F .text	00000110 _ftell_r
08010628 g     F .text	000000c8 jpeg_write_coefficients
0803e624 g     F .text	0000001c alt_icache_flush_all
0804318c g     O .rwdata	00000004 alt_priority_mask
0803e690 g     F .text	0000009c alt_ic_irq_enable
08024f44 g     F .text	00000038 jpeg_free_small
08031b94 g     F .text	00000024 __vfprintf_internal
0803be98 g     F .text	00000020 __env_lock
0800096c g     F .text	00000034 write_stdout
0800ccd0 g     F .text	000001b0 jinit_c_master_control
0803b784 g     F .text	00000060 __subdf3
08035e9c g     F .text	000000b0 __lo0bits
08031bb8 g     F .text	000016a8 __svfscanf_r
08043190 g     O .rwdata	00000008 alt_alarm_list
08039750 g     F .text	0000019c _ungetc_r
0803e270 g     F .text	0000005c _do_ctors
080047b8 g     F .text	000001d0 jinit_c_coef_controller
0803bda0 g     F .text	000000cc close
0802b758 g     F .text	0000004c __addsf3
0801fe50 g     F .text	000007c8 jpeg_idct_10x5
08040fa8 g     O .rodata	00000050 jpeg_natural_order2
0803c314 g     F .text	00000080 alt_load
0802c61c g     F .text	00000224 __pack_d
080175c4 g     F .text	00000948 jpeg_idct_9x9
0802e418 g     F .text	00000014 free
0802d020 g     F .text	00000004 __sinit_lock_acquire
08035bec g     F .text	00000144 __multadd
08035bc4 g     F .text	00000028 _Bfree
0802e240 g     F .text	0000001c _getenv_r
0803dca8 g     F .text	00000228 alt_hostfs_fstat



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08406e14 	ori	at,at,440
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000ec0 	call	80000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000306 	br	8000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 800008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)

08000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 8000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 8000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 800009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000e8:	ef80083a 	eret

080000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000ec:	defff904 	addi	sp,sp,-28
 80000f0:	dfc00615 	stw	ra,24(sp)
 80000f4:	df000515 	stw	fp,20(sp)
 80000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 80000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000100:	0005313a 	rdctl	r2,ipending
 8000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000114:	00800044 	movi	r2,1
 8000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800011c:	e0fffb17 	ldw	r3,-20(fp)
 8000120:	e0bffc17 	ldw	r2,-16(fp)
 8000124:	1884703a 	and	r2,r3,r2
 8000128:	10001726 	beq	r2,zero,8000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800012c:	00c30134 	movhi	r3,3076
 8000130:	18d38e04 	addi	r3,r3,20024
 8000134:	e0bffd17 	ldw	r2,-12(fp)
 8000138:	100490fa 	slli	r2,r2,3
 800013c:	1885883a 	add	r2,r3,r2
 8000140:	10c00017 	ldw	r3,0(r2)
 8000144:	01030134 	movhi	r4,3076
 8000148:	21138e04 	addi	r4,r4,20024
 800014c:	e0bffd17 	ldw	r2,-12(fp)
 8000150:	100490fa 	slli	r2,r2,3
 8000154:	2085883a 	add	r2,r4,r2
 8000158:	10800104 	addi	r2,r2,4
 800015c:	10800017 	ldw	r2,0(r2)
 8000160:	1009883a 	mov	r4,r2
 8000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800016c:	0005313a 	rdctl	r2,ipending
 8000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 8000178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 800017c:	e0bffb17 	ldw	r2,-20(fp)
 8000180:	103fe31e 	bne	r2,zero,8000110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 8000184:	00000706 	br	80001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 8000188:	e0bffc17 	ldw	r2,-16(fp)
 800018c:	1085883a 	add	r2,r2,r2
 8000190:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000194:	e0bffd17 	ldw	r2,-12(fp)
 8000198:	10800044 	addi	r2,r2,1
 800019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80001a0:	003fde06 	br	800011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 80001a4:	e037883a 	mov	sp,fp
 80001a8:	dfc00117 	ldw	ra,4(sp)
 80001ac:	df000017 	ldw	fp,0(sp)
 80001b0:	dec00204 	addi	sp,sp,8
 80001b4:	f800283a 	ret

Disassembly of section .text:

080001b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 80001b8:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
 80001bc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 80001c0:	06820134 	movhi	gp,2052
    ori gp, gp, %lo(_gp)
 80001c4:	d6ac3f14 	ori	gp,gp,45308
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 80001c8:	00820134 	movhi	r2,2052
    ori r2, r2, %lo(__bss_start)
 80001cc:	10932814 	ori	r2,r2,19616

    movhi r3, %hi(__bss_end)
 80001d0:	00c30134 	movhi	r3,3076
    ori r3, r3, %lo(__bss_end)
 80001d4:	18d43214 	ori	r3,r3,20680

    beq r2, r3, 1f
 80001d8:	10c00326 	beq	r2,r3,80001e8 <_start+0x30>

0:
    stw zero, (r2)
 80001dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 80001e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 80001e4:	10fffd36 	bltu	r2,r3,80001dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 80001e8:	803c3140 	call	803c314 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 80001ec:	803c4b80 	call	803c4b8 <alt_main>

080001f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 80001f0:	003fff06 	br	80001f0 <alt_after_alt_main>

080001f4 <bmp_extract_header>:
#include "bmp_extract.h"

int8_t g_file_buffer[67108864];	// Create and Enormous buffer to avoid dynamic memory allocation
Bmp_header g_input_file_header;

int bmp_extract_header(Bmp_data *pic_data) {
 80001f4:	defffb04 	addi	sp,sp,-20
 80001f8:	dfc00415 	stw	ra,16(sp)
 80001fc:	df000315 	stw	fp,12(sp)
 8000200:	dc000215 	stw	r16,8(sp)
 8000204:	df000204 	addi	fp,sp,8
 8000208:	e13fff15 	stw	r4,-4(fp)
	int i;

	if (pic_data->buffer[0] == 'B' && pic_data->buffer[1] == 'M') {
 800020c:	e0bfff17 	ldw	r2,-4(fp)
 8000210:	10800117 	ldw	r2,4(r2)
 8000214:	10800003 	ldbu	r2,0(r2)
 8000218:	10803fcc 	andi	r2,r2,255
 800021c:	1080201c 	xori	r2,r2,128
 8000220:	10bfe004 	addi	r2,r2,-128
 8000224:	10801098 	cmpnei	r2,r2,66
 8000228:	10003c1e 	bne	r2,zero,800031c <bmp_extract_header+0x128>
 800022c:	e0bfff17 	ldw	r2,-4(fp)
 8000230:	10800117 	ldw	r2,4(r2)
 8000234:	10800044 	addi	r2,r2,1
 8000238:	10800003 	ldbu	r2,0(r2)
 800023c:	10803fcc 	andi	r2,r2,255
 8000240:	1080201c 	xori	r2,r2,128
 8000244:	10bfe004 	addi	r2,r2,-128
 8000248:	10801358 	cmpnei	r2,r2,77
 800024c:	1000331e 	bne	r2,zero,800031c <bmp_extract_header+0x128>
		for (i = 0; i < 52; i++) {
 8000250:	e03ffe15 	stw	zero,-8(fp)
 8000254:	00000e06 	br	8000290 <bmp_extract_header+0x9c>
			pic_data->header->BMPRawData[i] = pic_data->buffer[i + 2];
 8000258:	e0bfff17 	ldw	r2,-4(fp)
 800025c:	11000017 	ldw	r4,0(r2)
 8000260:	e0bfff17 	ldw	r2,-4(fp)
 8000264:	10c00117 	ldw	r3,4(r2)
 8000268:	e0bffe17 	ldw	r2,-8(fp)
 800026c:	10800084 	addi	r2,r2,2
 8000270:	1885883a 	add	r2,r3,r2
 8000274:	10c00003 	ldbu	r3,0(r2)
 8000278:	e0bffe17 	ldw	r2,-8(fp)
 800027c:	2085883a 	add	r2,r4,r2
 8000280:	10c00005 	stb	r3,0(r2)

int bmp_extract_header(Bmp_data *pic_data) {
	int i;

	if (pic_data->buffer[0] == 'B' && pic_data->buffer[1] == 'M') {
		for (i = 0; i < 52; i++) {
 8000284:	e0bffe17 	ldw	r2,-8(fp)
 8000288:	10800044 	addi	r2,r2,1
 800028c:	e0bffe15 	stw	r2,-8(fp)
 8000290:	e0bffe17 	ldw	r2,-8(fp)
 8000294:	10800d10 	cmplti	r2,r2,52
 8000298:	103fef1e 	bne	r2,zero,8000258 <bmp_extract_header+0x64>
			pic_data->header->BMPRawData[i] = pic_data->buffer[i + 2];
		}

		// Calculate the effective size of the data field
		pic_data->header->BMPDataSize = pic_data->header->BMPHeight * pic_data->header->BMPWidth
 800029c:	e0bfff17 	ldw	r2,-4(fp)
 80002a0:	14000017 	ldw	r16,0(r2)
 80002a4:	e0bfff17 	ldw	r2,-4(fp)
 80002a8:	10800017 	ldw	r2,0(r2)
 80002ac:	10c00517 	ldw	r3,20(r2)
 80002b0:	e0bfff17 	ldw	r2,-4(fp)
 80002b4:	10800017 	ldw	r2,0(r2)
 80002b8:	10800417 	ldw	r2,16(r2)
 80002bc:	1809883a 	mov	r4,r3
 80002c0:	100b883a 	mov	r5,r2
 80002c4:	802c2180 	call	802c218 <__mulsi3>
 80002c8:	1007883a 	mov	r3,r2
				* (pic_data->header->BMPBitsPerPixel / 8);
 80002cc:	e0bfff17 	ldw	r2,-4(fp)
 80002d0:	10800017 	ldw	r2,0(r2)
 80002d4:	1080068b 	ldhu	r2,26(r2)
 80002d8:	10bfffcc 	andi	r2,r2,65535
 80002dc:	1004d0fa 	srli	r2,r2,3
 80002e0:	10bfffcc 	andi	r2,r2,65535
 80002e4:	1809883a 	mov	r4,r3
 80002e8:	100b883a 	mov	r5,r2
 80002ec:	802c2180 	call	802c218 <__mulsi3>
		for (i = 0; i < 52; i++) {
			pic_data->header->BMPRawData[i] = pic_data->buffer[i + 2];
		}

		// Calculate the effective size of the data field
		pic_data->header->BMPDataSize = pic_data->header->BMPHeight * pic_data->header->BMPWidth
 80002f0:	80800815 	stw	r2,32(r16)
				* (pic_data->header->BMPBitsPerPixel / 8);

		pic_data->bitmap = &pic_data->buffer[pic_data->header->BMPDataOffset];
 80002f4:	e0bfff17 	ldw	r2,-4(fp)
 80002f8:	10c00117 	ldw	r3,4(r2)
 80002fc:	e0bfff17 	ldw	r2,-4(fp)
 8000300:	10800017 	ldw	r2,0(r2)
 8000304:	10800217 	ldw	r2,8(r2)
 8000308:	1887883a 	add	r3,r3,r2
 800030c:	e0bfff17 	ldw	r2,-4(fp)
 8000310:	10c00215 	stw	r3,8(r2)
		return 1;
 8000314:	00800044 	movi	r2,1
 8000318:	00000106 	br	8000320 <bmp_extract_header+0x12c>
	}
	return 0;
 800031c:	0005883a 	mov	r2,zero
}
 8000320:	e037883a 	mov	sp,fp
 8000324:	dfc00217 	ldw	ra,8(sp)
 8000328:	df000117 	ldw	fp,4(sp)
 800032c:	dc000017 	ldw	r16,0(sp)
 8000330:	dec00304 	addi	sp,sp,12
 8000334:	f800283a 	ret

08000338 <bmp_rearrange_comps>:

void bmp_rearrange_comps(Bmp_data *pic_data) {
 8000338:	defff704 	addi	sp,sp,-36
 800033c:	dfc00815 	stw	ra,32(sp)
 8000340:	df000715 	stw	fp,28(sp)
 8000344:	dc000615 	stw	r16,24(sp)
 8000348:	df000604 	addi	fp,sp,24
 800034c:	e13fff15 	stw	r4,-4(fp)
	int row, column;
	int8_t r, g, b, *row_ptr, *dest;

	// <*dest> starts from the top left of the image and moves downwards.
	// <*row_ptr> starts from the bottom left of the image and moves upwards.
	dest = pic_data->bitmap;
 8000350:	e0bfff17 	ldw	r2,-4(fp)
 8000354:	10800217 	ldw	r2,8(r2)
 8000358:	e0bffc15 	stw	r2,-16(fp)

	for (row = pic_data->header->BMPHeight - 1; row >= pic_data->header->BMPHeight / 2; row--) {
 800035c:	e0bfff17 	ldw	r2,-4(fp)
 8000360:	10800017 	ldw	r2,0(r2)
 8000364:	10800517 	ldw	r2,20(r2)
 8000368:	10bfffc4 	addi	r2,r2,-1
 800036c:	e0bffa15 	stw	r2,-24(fp)
 8000370:	00005606 	br	80004cc <bmp_rearrange_comps+0x194>
		// We loop until <*dest> and <*row_ptr> meet in the middle of the image.

		row_ptr = &(pic_data->bitmap[row * pic_data->header->BMPWidth * 3]);
 8000374:	e0bfff17 	ldw	r2,-4(fp)
 8000378:	14000217 	ldw	r16,8(r2)
 800037c:	e0bfff17 	ldw	r2,-4(fp)
 8000380:	10800017 	ldw	r2,0(r2)
 8000384:	10c00417 	ldw	r3,16(r2)
 8000388:	e0bffa17 	ldw	r2,-24(fp)
 800038c:	1809883a 	mov	r4,r3
 8000390:	100b883a 	mov	r5,r2
 8000394:	802c2180 	call	802c218 <__mulsi3>
 8000398:	1007883a 	mov	r3,r2
 800039c:	1805883a 	mov	r2,r3
 80003a0:	1085883a 	add	r2,r2,r2
 80003a4:	10c5883a 	add	r2,r2,r3
 80003a8:	8085883a 	add	r2,r16,r2
 80003ac:	e0bffd15 	stw	r2,-12(fp)
		for (column = 0; column < pic_data->header->BMPWidth * 3; column += 3) {
 80003b0:	e03ffb15 	stw	zero,-20(fp)
 80003b4:	00003a06 	br	80004a0 <bmp_rearrange_comps+0x168>
			// Not only do we move data from <*dest> to <*row_ptr> and vice-versa,
			// we also need to reshuffle RGB components.
			r = dest[2];
 80003b8:	e0bffc17 	ldw	r2,-16(fp)
 80003bc:	10800083 	ldbu	r2,2(r2)
 80003c0:	e0bffe05 	stb	r2,-8(fp)
			g = dest[1];
 80003c4:	e0bffc17 	ldw	r2,-16(fp)
 80003c8:	10800043 	ldbu	r2,1(r2)
 80003cc:	e0bffe45 	stb	r2,-7(fp)
			b = dest[0];
 80003d0:	e0bffc17 	ldw	r2,-16(fp)
 80003d4:	10800003 	ldbu	r2,0(r2)
 80003d8:	e0bffe85 	stb	r2,-6(fp)

			*dest++ = row_ptr[column + 2];
 80003dc:	e0bffb17 	ldw	r2,-20(fp)
 80003e0:	10800084 	addi	r2,r2,2
 80003e4:	e0fffd17 	ldw	r3,-12(fp)
 80003e8:	1885883a 	add	r2,r3,r2
 80003ec:	10c00003 	ldbu	r3,0(r2)
 80003f0:	e0bffc17 	ldw	r2,-16(fp)
 80003f4:	10c00005 	stb	r3,0(r2)
 80003f8:	e0bffc17 	ldw	r2,-16(fp)
 80003fc:	10800044 	addi	r2,r2,1
 8000400:	e0bffc15 	stw	r2,-16(fp)
			*dest++ = row_ptr[column + 1];
 8000404:	e0bffb17 	ldw	r2,-20(fp)
 8000408:	10800044 	addi	r2,r2,1
 800040c:	e0fffd17 	ldw	r3,-12(fp)
 8000410:	1885883a 	add	r2,r3,r2
 8000414:	10c00003 	ldbu	r3,0(r2)
 8000418:	e0bffc17 	ldw	r2,-16(fp)
 800041c:	10c00005 	stb	r3,0(r2)
 8000420:	e0bffc17 	ldw	r2,-16(fp)
 8000424:	10800044 	addi	r2,r2,1
 8000428:	e0bffc15 	stw	r2,-16(fp)
			*dest++ = row_ptr[column];
 800042c:	e0bffb17 	ldw	r2,-20(fp)
 8000430:	e0fffd17 	ldw	r3,-12(fp)
 8000434:	1885883a 	add	r2,r3,r2
 8000438:	10c00003 	ldbu	r3,0(r2)
 800043c:	e0bffc17 	ldw	r2,-16(fp)
 8000440:	10c00005 	stb	r3,0(r2)
 8000444:	e0bffc17 	ldw	r2,-16(fp)
 8000448:	10800044 	addi	r2,r2,1
 800044c:	e0bffc15 	stw	r2,-16(fp)

			row_ptr[column] = r;
 8000450:	e0bffb17 	ldw	r2,-20(fp)
 8000454:	e0fffd17 	ldw	r3,-12(fp)
 8000458:	1885883a 	add	r2,r3,r2
 800045c:	e0fffe03 	ldbu	r3,-8(fp)
 8000460:	10c00005 	stb	r3,0(r2)
			row_ptr[column + 1] = g;
 8000464:	e0bffb17 	ldw	r2,-20(fp)
 8000468:	10800044 	addi	r2,r2,1
 800046c:	e0fffd17 	ldw	r3,-12(fp)
 8000470:	1885883a 	add	r2,r3,r2
 8000474:	e0fffe43 	ldbu	r3,-7(fp)
 8000478:	10c00005 	stb	r3,0(r2)
			row_ptr[column + 2] = b;
 800047c:	e0bffb17 	ldw	r2,-20(fp)
 8000480:	10800084 	addi	r2,r2,2
 8000484:	e0fffd17 	ldw	r3,-12(fp)
 8000488:	1885883a 	add	r2,r3,r2
 800048c:	e0fffe83 	ldbu	r3,-6(fp)
 8000490:	10c00005 	stb	r3,0(r2)

	for (row = pic_data->header->BMPHeight - 1; row >= pic_data->header->BMPHeight / 2; row--) {
		// We loop until <*dest> and <*row_ptr> meet in the middle of the image.

		row_ptr = &(pic_data->bitmap[row * pic_data->header->BMPWidth * 3]);
		for (column = 0; column < pic_data->header->BMPWidth * 3; column += 3) {
 8000494:	e0bffb17 	ldw	r2,-20(fp)
 8000498:	108000c4 	addi	r2,r2,3
 800049c:	e0bffb15 	stw	r2,-20(fp)
 80004a0:	e13ffb17 	ldw	r4,-20(fp)
 80004a4:	e0bfff17 	ldw	r2,-4(fp)
 80004a8:	10800017 	ldw	r2,0(r2)
 80004ac:	10c00417 	ldw	r3,16(r2)
 80004b0:	1805883a 	mov	r2,r3
 80004b4:	1085883a 	add	r2,r2,r2
 80004b8:	10c5883a 	add	r2,r2,r3
 80004bc:	20bfbe36 	bltu	r4,r2,80003b8 <bmp_rearrange_comps+0x80>

	// <*dest> starts from the top left of the image and moves downwards.
	// <*row_ptr> starts from the bottom left of the image and moves upwards.
	dest = pic_data->bitmap;

	for (row = pic_data->header->BMPHeight - 1; row >= pic_data->header->BMPHeight / 2; row--) {
 80004c0:	e0bffa17 	ldw	r2,-24(fp)
 80004c4:	10bfffc4 	addi	r2,r2,-1
 80004c8:	e0bffa15 	stw	r2,-24(fp)
 80004cc:	e0fffa17 	ldw	r3,-24(fp)
 80004d0:	e0bfff17 	ldw	r2,-4(fp)
 80004d4:	10800017 	ldw	r2,0(r2)
 80004d8:	10800517 	ldw	r2,20(r2)
 80004dc:	1004d07a 	srli	r2,r2,1
 80004e0:	18bfa42e 	bgeu	r3,r2,8000374 <bmp_rearrange_comps+0x3c>
			row_ptr[column] = r;
			row_ptr[column + 1] = g;
			row_ptr[column + 2] = b;
		}
	}
}
 80004e4:	e037883a 	mov	sp,fp
 80004e8:	dfc00217 	ldw	ra,8(sp)
 80004ec:	df000117 	ldw	fp,4(sp)
 80004f0:	dc000017 	ldw	r16,0(sp)
 80004f4:	dec00304 	addi	sp,sp,12
 80004f8:	f800283a 	ret

080004fc <bmp_extract>:

int bmp_extract(char *file_name, Bmp_data *pic_data) {
 80004fc:	defff904 	addi	sp,sp,-28
 8000500:	dfc00615 	stw	ra,24(sp)
 8000504:	df000515 	stw	fp,20(sp)
 8000508:	df000504 	addi	fp,sp,20
 800050c:	e13ffe15 	stw	r4,-8(fp)
 8000510:	e17fff15 	stw	r5,-4(fp)
	FILE *bmp_file = NULL;
 8000514:	e03ffb15 	stw	zero,-20(fp)
	int bmp_file_size, bytes_read;

	bmp_file = fopen(file_name, "rb");
 8000518:	e13ffe17 	ldw	r4,-8(fp)
 800051c:	01420134 	movhi	r5,2052
 8000520:	297b7704 	addi	r5,r5,-4644
 8000524:	802d1880 	call	802d188 <fopen>
 8000528:	e0bffb15 	stw	r2,-20(fp)
	if(bmp_file == NULL) {
 800052c:	e0bffb17 	ldw	r2,-20(fp)
 8000530:	1000061e 	bne	r2,zero,800054c <bmp_extract+0x50>
		printf("Error opening the file %s\n", file_name);
 8000534:	01020134 	movhi	r4,2052
 8000538:	213b7804 	addi	r4,r4,-4640
 800053c:	e17ffe17 	ldw	r5,-8(fp)
 8000540:	802ee640 	call	802ee64 <printf>
		return 1;
 8000544:	00800044 	movi	r2,1
 8000548:	00004b06 	br	8000678 <bmp_extract+0x17c>
	}

	// Get the size of the file
	fseek(bmp_file, 0, SEEK_END);
 800054c:	e13ffb17 	ldw	r4,-20(fp)
 8000550:	000b883a 	mov	r5,zero
 8000554:	01800084 	movi	r6,2
 8000558:	802dcec0 	call	802dcec <fseek>
	bmp_file_size = ftell(bmp_file);
 800055c:	e13ffb17 	ldw	r4,-20(fp)
 8000560:	802de880 	call	802de88 <ftell>
 8000564:	e0bffc15 	stw	r2,-16(fp)
	rewind(bmp_file);
 8000568:	e13ffb17 	ldw	r4,-20(fp)
 800056c:	802f1780 	call	802f178 <rewind>

	pic_data->buffer = g_file_buffer;		// (int8_t *)malloc(bmp_file_size);
 8000570:	e0bfff17 	ldw	r2,-4(fp)
 8000574:	00c20134 	movhi	r3,2052
 8000578:	18d34e04 	addi	r3,r3,19768
 800057c:	10c00115 	stw	r3,4(r2)

	// Read the whole file into the buffer
	bytes_read = fread((void *)pic_data->buffer, sizeof(int8_t), bmp_file_size, bmp_file);
 8000580:	e0bfff17 	ldw	r2,-4(fp)
 8000584:	10c00117 	ldw	r3,4(r2)
 8000588:	e0bffc17 	ldw	r2,-16(fp)
 800058c:	1809883a 	mov	r4,r3
 8000590:	01400044 	movi	r5,1
 8000594:	100d883a 	mov	r6,r2
 8000598:	e1fffb17 	ldw	r7,-20(fp)
 800059c:	802d42c0 	call	802d42c <fread>
 80005a0:	e0bffd15 	stw	r2,-12(fp)

	fclose(bmp_file);
 80005a4:	e13ffb17 	ldw	r4,-20(fp)
 80005a8:	802cb400 	call	802cb40 <fclose>

	if(bytes_read != bmp_file_size)
 80005ac:	e0fffd17 	ldw	r3,-12(fp)
 80005b0:	e0bffc17 	ldw	r2,-16(fp)
 80005b4:	18800526 	beq	r3,r2,80005cc <bmp_extract+0xd0>
	{
		printf("Error occurred while reading the file\n\n");
 80005b8:	01020134 	movhi	r4,2052
 80005bc:	213b7f04 	addi	r4,r4,-4612
 80005c0:	802ef240 	call	802ef24 <puts>
		return 2;
 80005c4:	00800084 	movi	r2,2
 80005c8:	00002b06 	br	8000678 <bmp_extract+0x17c>
	}

	pic_data->header = &g_input_file_header;	// (Bmp_header *)malloc(sizeof(Bmp_header));
 80005cc:	e0bfff17 	ldw	r2,-4(fp)
 80005d0:	00c20134 	movhi	r3,2052
 80005d4:	18d34104 	addi	r3,r3,19716
 80005d8:	10c00015 	stw	r3,0(r2)

	bmp_extract_header(pic_data);
 80005dc:	e13fff17 	ldw	r4,-4(fp)
 80005e0:	80001f40 	call	80001f4 <bmp_extract_header>
	bmp_rearrange_comps(pic_data);
 80005e4:	e13fff17 	ldw	r4,-4(fp)
 80005e8:	80003380 	call	8000338 <bmp_rearrange_comps>

	printf("Size of the file: %d\n", (int)pic_data->header->BMPFileSize);
 80005ec:	e0bfff17 	ldw	r2,-4(fp)
 80005f0:	10800017 	ldw	r2,0(r2)
 80005f4:	10800017 	ldw	r2,0(r2)
 80005f8:	01020134 	movhi	r4,2052
 80005fc:	213b8904 	addi	r4,r4,-4572
 8000600:	100b883a 	mov	r5,r2
 8000604:	802ee640 	call	802ee64 <printf>
	printf("Size of the height: %d\n", (int)pic_data->header->BMPHeight);
 8000608:	e0bfff17 	ldw	r2,-4(fp)
 800060c:	10800017 	ldw	r2,0(r2)
 8000610:	10800517 	ldw	r2,20(r2)
 8000614:	01020134 	movhi	r4,2052
 8000618:	213b8f04 	addi	r4,r4,-4548
 800061c:	100b883a 	mov	r5,r2
 8000620:	802ee640 	call	802ee64 <printf>
	printf("Size of the width: %d\n", (int)pic_data->header->BMPWidth);
 8000624:	e0bfff17 	ldw	r2,-4(fp)
 8000628:	10800017 	ldw	r2,0(r2)
 800062c:	10800417 	ldw	r2,16(r2)
 8000630:	01020134 	movhi	r4,2052
 8000634:	213b9504 	addi	r4,r4,-4524
 8000638:	100b883a 	mov	r5,r2
 800063c:	802ee640 	call	802ee64 <printf>
	printf("Size of the offset: %d\n", (int)pic_data->header->BMPDataOffset);
 8000640:	e0bfff17 	ldw	r2,-4(fp)
 8000644:	10800017 	ldw	r2,0(r2)
 8000648:	10800217 	ldw	r2,8(r2)
 800064c:	01020134 	movhi	r4,2052
 8000650:	213b9b04 	addi	r4,r4,-4500
 8000654:	100b883a 	mov	r5,r2
 8000658:	802ee640 	call	802ee64 <printf>
	printf("Data pointer: 0x%08x\n\n", (unsigned int)pic_data->bitmap);
 800065c:	e0bfff17 	ldw	r2,-4(fp)
 8000660:	10800217 	ldw	r2,8(r2)
 8000664:	01020134 	movhi	r4,2052
 8000668:	213ba104 	addi	r4,r4,-4476
 800066c:	100b883a 	mov	r5,r2
 8000670:	802ee640 	call	802ee64 <printf>

	return 0;
 8000674:	0005883a 	mov	r2,zero
}
 8000678:	e037883a 	mov	sp,fp
 800067c:	dfc00117 	ldw	ra,4(sp)
 8000680:	df000017 	ldw	fp,0(sp)
 8000684:	dec00204 	addi	sp,sp,8
 8000688:	f800283a 	ret

0800068c <jpeg_encode>:

#include "jpeg_encoding.h"


int jpeg_encode(char *destFilename, int8_t *rawData, int image_height, int image_width, int quality)
{
 800068c:	deff6f04 	addi	sp,sp,-580
 8000690:	dfc09015 	stw	ra,576(sp)
 8000694:	df008f15 	stw	fp,572(sp)
 8000698:	df008f04 	addi	fp,sp,572
 800069c:	e13ffc15 	stw	r4,-16(fp)
 80006a0:	e17ffd15 	stw	r5,-12(fp)
 80006a4:	e1bffe15 	stw	r6,-8(fp)
 80006a8:	e1ffff15 	stw	r7,-4(fp)
	/* We have to set up the error handler first, in case the initialization
	* step fails.  (Unlikely, but it could happen if you are out of memory.)
	* This routine fills in the contents of struct jerr, and returns jerr's
	* address which we place into the link field in cinfo.
	*/
	cinfo.err = jpeg_std_error(&jerr);
 80006ac:	e0bfda04 	addi	r2,fp,-152
 80006b0:	1009883a 	mov	r4,r2
 80006b4:	8011bc80 	call	8011bc8 <jpeg_std_error>
 80006b8:	e0bf7315 	stw	r2,-564(fp)
	/* Now we can initialize the JPEG compression object. */
	jpeg_create_compress(&cinfo);
 80006bc:	e0bf7304 	addi	r2,fp,-564
 80006c0:	1009883a 	mov	r4,r2
 80006c4:	01401404 	movi	r5,80
 80006c8:	01806704 	movi	r6,412
 80006cc:	80009a00 	call	80009a0 <jpeg_CreateCompress>
	/* Here we use the library-supplied code to send compressed data to a
	* stdio stream.  You can also write your own code to do something else.
	* VERY IMPORTANT: use "b" option to fopen() if you are on a machine that
	* requires it in order to write binary files.
	*/
	if ((outfile = fopen(destFilename, "w")) == NULL) {
 80006d0:	e13ffc17 	ldw	r4,-16(fp)
 80006d4:	01420134 	movhi	r5,2052
 80006d8:	297ba704 	addi	r5,r5,-4452
 80006dc:	802d1880 	call	802d188 <fopen>
 80006e0:	e0bf7115 	stw	r2,-572(fp)
 80006e4:	e0bf7117 	ldw	r2,-572(fp)
 80006e8:	10000b1e 	bne	r2,zero,8000718 <jpeg_encode+0x8c>
		fprintf(stderr, "can't open %s\n", destFilename);
 80006ec:	00820134 	movhi	r2,2052
 80006f0:	108c4504 	addi	r2,r2,12564
 80006f4:	10800017 	ldw	r2,0(r2)
 80006f8:	10800317 	ldw	r2,12(r2)
 80006fc:	1009883a 	mov	r4,r2
 8000700:	01420134 	movhi	r5,2052
 8000704:	297ba804 	addi	r5,r5,-4448
 8000708:	e1bffc17 	ldw	r6,-16(fp)
 800070c:	802d1cc0 	call	802d1cc <fprintf>
		exit(1);
 8000710:	01000044 	movi	r4,1
 8000714:	802c9cc0 	call	802c9cc <exit>
	}
	jpeg_stdio_dest(&cinfo, outfile);
 8000718:	e0bf7304 	addi	r2,fp,-564
 800071c:	1009883a 	mov	r4,r2
 8000720:	e17f7117 	ldw	r5,-572(fp)
 8000724:	80115f00 	call	80115f0 <jpeg_stdio_dest>
	/* Step 3: set parameters for compression */

	/* First we supply a description of the input image.
	* Four fields of the cinfo struct must be filled in:
	*/
	cinfo.image_width = image_width; 	/* image width and height, in pixels */
 8000728:	e0bfff17 	ldw	r2,-4(fp)
 800072c:	e0bf7a15 	stw	r2,-536(fp)
	cinfo.image_height = image_height;
 8000730:	e0bffe17 	ldw	r2,-8(fp)
 8000734:	e0bf7b15 	stw	r2,-532(fp)
	cinfo.input_components = 3;		/* # of color components per pixel */
 8000738:	008000c4 	movi	r2,3
 800073c:	e0bf7c15 	stw	r2,-528(fp)
	cinfo.in_color_space = JCS_RGB; 	/* colorspace of input image */
 8000740:	00800084 	movi	r2,2
 8000744:	e0bf7d15 	stw	r2,-524(fp)
	/* Now use the library's routine to set default compression parameters.
	* (You must set at least cinfo.in_color_space before calling this,
	* since the defaults depend on the source color space.)
	*/
	jpeg_set_defaults(&cinfo);
 8000748:	e0bf7304 	addi	r2,fp,-564
 800074c:	1009883a 	mov	r4,r2
 8000750:	800d5880 	call	800d588 <jpeg_set_defaults>
	/* Now you can set any non-default parameters you wish to.
	* Here we just illustrate the use of quality (quantization table) scaling:
	*/
	jpeg_set_quality(&cinfo, quality, TRUE /* limit to baseline-JPEG values */);
 8000754:	e0bf7304 	addi	r2,fp,-564
 8000758:	1009883a 	mov	r4,r2
 800075c:	e1400217 	ldw	r5,8(fp)
 8000760:	01800044 	movi	r6,1
 8000764:	800d3680 	call	800d368 <jpeg_set_quality>
	/* Step 4: Start compressor */

	/* TRUE ensures that we will write a complete interchange-JPEG file.
	* Pass TRUE unless you are very sure of what you're doing.
	*/
	jpeg_start_compress(&cinfo, TRUE);
 8000768:	e0bf7304 	addi	r2,fp,-564
 800076c:	1009883a 	mov	r4,r2
 8000770:	01400044 	movi	r5,1
 8000774:	80012300 	call	8001230 <jpeg_start_compress>
	/* Here we use the library's state variable cinfo.next_scanline as the
	* loop counter, so that we don't have to keep track ourselves.
	* To keep things simple, we pass one scanline per call; you can pass
	* more if you wish, though.
	*/
	row_stride = image_width * 3;	/* JSAMPLEs per row in image_buffer */
 8000778:	e0ffff17 	ldw	r3,-4(fp)
 800077c:	1805883a 	mov	r2,r3
 8000780:	1085883a 	add	r2,r2,r2
 8000784:	10c5883a 	add	r2,r2,r3
 8000788:	e0bf7215 	stw	r2,-568(fp)

	while (cinfo.next_scanline < cinfo.image_height) {
 800078c:	00000e06 	br	80007c8 <jpeg_encode+0x13c>
		/* jpeg_write_scanlines expects an array of pointers to scanlines.
		* Here the array is only one element long, but you could pass
		* more than one scanline at a time if that's more convenient.
		*/
		row_pointer[0] = (JSAMPLE *)&rawData[cinfo.next_scanline * row_stride];
 8000790:	e0ffaf17 	ldw	r3,-324(fp)
 8000794:	e0bf7217 	ldw	r2,-568(fp)
 8000798:	1809883a 	mov	r4,r3
 800079c:	100b883a 	mov	r5,r2
 80007a0:	802c2180 	call	802c218 <__mulsi3>
 80007a4:	e0fffd17 	ldw	r3,-12(fp)
 80007a8:	1885883a 	add	r2,r3,r2
 80007ac:	e0bffb15 	stw	r2,-20(fp)
		(void) jpeg_write_scanlines(&cinfo, row_pointer, 1);
 80007b0:	e0ff7304 	addi	r3,fp,-564
 80007b4:	e0bffb04 	addi	r2,fp,-20
 80007b8:	1809883a 	mov	r4,r3
 80007bc:	100b883a 	mov	r5,r2
 80007c0:	01800044 	movi	r6,1
 80007c4:	800132c0 	call	800132c <jpeg_write_scanlines>
	* To keep things simple, we pass one scanline per call; you can pass
	* more if you wish, though.
	*/
	row_stride = image_width * 3;	/* JSAMPLEs per row in image_buffer */

	while (cinfo.next_scanline < cinfo.image_height) {
 80007c8:	e0ffaf17 	ldw	r3,-324(fp)
 80007cc:	e0bf7b17 	ldw	r2,-532(fp)
 80007d0:	18bfef36 	bltu	r3,r2,8000790 <jpeg_encode+0x104>
		(void) jpeg_write_scanlines(&cinfo, row_pointer, 1);
	}

	/* Step 6: Finish compression */

	jpeg_finish_compress(&cinfo);
 80007d4:	e0bf7304 	addi	r2,fp,-564
 80007d8:	1009883a 	mov	r4,r2
 80007dc:	8000d440 	call	8000d44 <jpeg_finish_compress>
	/* After finish_compress, we can close the output file. */
	fclose(outfile);
 80007e0:	e13f7117 	ldw	r4,-572(fp)
 80007e4:	802cb400 	call	802cb40 <fclose>

	/* Step 7: release JPEG compression object */

	/* This is an important step since it will release a good deal of memory. */
	jpeg_destroy_compress(&cinfo);
 80007e8:	e0bf7304 	addi	r2,fp,-564
 80007ec:	1009883a 	mov	r4,r2
 80007f0:	8000be00 	call	8000be0 <jpeg_destroy_compress>

	/* And we're done! */
	return 0;
 80007f4:	0005883a 	mov	r2,zero
}
 80007f8:	e037883a 	mov	sp,fp
 80007fc:	dfc00117 	ldw	ra,4(sp)
 8000800:	df000017 	ldw	fp,0(sp)
 8000804:	dec00204 	addi	sp,sp,8
 8000808:	f800283a 	ret

0800080c <keymatch>:
* minchars is length of minimum legal abbreviation.
*/

GLOBAL(boolean)
	keymatch (char * arg, const char * keyword, int minchars)
{
 800080c:	defff804 	addi	sp,sp,-32
 8000810:	df000715 	stw	fp,28(sp)
 8000814:	dc800615 	stw	r18,24(sp)
 8000818:	dc400515 	stw	r17,20(sp)
 800081c:	dc000415 	stw	r16,16(sp)
 8000820:	df000404 	addi	fp,sp,16
 8000824:	e13ffd15 	stw	r4,-12(fp)
 8000828:	e17ffe15 	stw	r5,-8(fp)
 800082c:	e1bfff15 	stw	r6,-4(fp)
	register int ca, ck;
	register int nmatched = 0;
 8000830:	0023883a 	mov	r17,zero

	while ((ca = *arg++) != '\0') {
 8000834:	00002906 	br	80008dc <keymatch+0xd0>
		if ((ck = *keyword++) == '\0')
 8000838:	e0bffe17 	ldw	r2,-8(fp)
 800083c:	10800003 	ldbu	r2,0(r2)
 8000840:	14803fcc 	andi	r18,r2,255
 8000844:	9480201c 	xori	r18,r18,128
 8000848:	94bfe004 	addi	r18,r18,-128
 800084c:	9005003a 	cmpeq	r2,r18,zero
 8000850:	e0fffe17 	ldw	r3,-8(fp)
 8000854:	18c00044 	addi	r3,r3,1
 8000858:	e0fffe15 	stw	r3,-8(fp)
 800085c:	10803fcc 	andi	r2,r2,255
 8000860:	10000226 	beq	r2,zero,800086c <keymatch+0x60>
			return FALSE;		/* arg longer than keyword, no good */
 8000864:	0005883a 	mov	r2,zero
 8000868:	00002c06 	br	800091c <keymatch+0x110>
		if (isupper(ca))		/* force arg to lcase (assume ck is already) */
 800086c:	00820134 	movhi	r2,2052
 8000870:	108c4304 	addi	r2,r2,12556
 8000874:	10c00017 	ldw	r3,0(r2)
 8000878:	8005883a 	mov	r2,r16
 800087c:	1885883a 	add	r2,r3,r2
 8000880:	10800003 	ldbu	r2,0(r2)
 8000884:	10803fcc 	andi	r2,r2,255
 8000888:	1080004c 	andi	r2,r2,1
 800088c:	10000f26 	beq	r2,zero,80008cc <keymatch+0xc0>
			ca = tolower(ca);
 8000890:	e43ffc15 	stw	r16,-16(fp)
 8000894:	00820134 	movhi	r2,2052
 8000898:	108c4304 	addi	r2,r2,12556
 800089c:	10c00017 	ldw	r3,0(r2)
 80008a0:	e0bffc17 	ldw	r2,-16(fp)
 80008a4:	1885883a 	add	r2,r3,r2
 80008a8:	10800003 	ldbu	r2,0(r2)
 80008ac:	10803fcc 	andi	r2,r2,255
 80008b0:	1080004c 	andi	r2,r2,1
 80008b4:	10000326 	beq	r2,zero,80008c4 <keymatch+0xb8>
 80008b8:	e0bffc17 	ldw	r2,-16(fp)
 80008bc:	10800804 	addi	r2,r2,32
 80008c0:	00000106 	br	80008c8 <keymatch+0xbc>
 80008c4:	e0bffc17 	ldw	r2,-16(fp)
 80008c8:	1021883a 	mov	r16,r2
		if (ca != ck)
 80008cc:	84800226 	beq	r16,r18,80008d8 <keymatch+0xcc>
			return FALSE;		/* no good */
 80008d0:	0005883a 	mov	r2,zero
 80008d4:	00001106 	br	800091c <keymatch+0x110>
		nmatched++;			/* count matched characters */
 80008d8:	8c400044 	addi	r17,r17,1
	keymatch (char * arg, const char * keyword, int minchars)
{
	register int ca, ck;
	register int nmatched = 0;

	while ((ca = *arg++) != '\0') {
 80008dc:	e0bffd17 	ldw	r2,-12(fp)
 80008e0:	10800003 	ldbu	r2,0(r2)
 80008e4:	14003fcc 	andi	r16,r2,255
 80008e8:	8400201c 	xori	r16,r16,128
 80008ec:	843fe004 	addi	r16,r16,-128
 80008f0:	8004c03a 	cmpne	r2,r16,zero
 80008f4:	e0fffd17 	ldw	r3,-12(fp)
 80008f8:	18c00044 	addi	r3,r3,1
 80008fc:	e0fffd15 	stw	r3,-12(fp)
 8000900:	10803fcc 	andi	r2,r2,255
 8000904:	103fcc1e 	bne	r2,zero,8000838 <keymatch+0x2c>
		if (ca != ck)
			return FALSE;		/* no good */
		nmatched++;			/* count matched characters */
	}
	/* reached end of argument; fail if it's too short for unique abbrev */
	if (nmatched < minchars)
 8000908:	e0bfff17 	ldw	r2,-4(fp)
 800090c:	8880020e 	bge	r17,r2,8000918 <keymatch+0x10c>
		return FALSE;
 8000910:	0005883a 	mov	r2,zero
 8000914:	00000106 	br	800091c <keymatch+0x110>
	return TRUE;			/* A-OK */
 8000918:	00800044 	movi	r2,1
}
 800091c:	e037883a 	mov	sp,fp
 8000920:	df000317 	ldw	fp,12(sp)
 8000924:	dc800217 	ldw	r18,8(sp)
 8000928:	dc400117 	ldw	r17,4(sp)
 800092c:	dc000017 	ldw	r16,0(sp)
 8000930:	dec00404 	addi	sp,sp,16
 8000934:	f800283a 	ret

08000938 <read_stdin>:
* Non-Unix systems often require some hacking to get out of text mode.
*/

GLOBAL(FILE *)
	read_stdin (void)
{
 8000938:	defffe04 	addi	sp,sp,-8
 800093c:	df000115 	stw	fp,4(sp)
 8000940:	df000104 	addi	fp,sp,4
	FILE * input_file = stdin;
 8000944:	00820134 	movhi	r2,2052
 8000948:	108c4504 	addi	r2,r2,12564
 800094c:	10800017 	ldw	r2,0(r2)
 8000950:	10800117 	ldw	r2,4(r2)
 8000954:	e0bfff15 	stw	r2,-4(fp)
	if ((input_file = fdopen(fileno(stdin), READ_BINARY)) == NULL) {
		fprintf(stderr, "Cannot reopen stdin\n");
		exit(EXIT_FAILURE);
	}
#endif
	return input_file;
 8000958:	e0bfff17 	ldw	r2,-4(fp)
}
 800095c:	e037883a 	mov	sp,fp
 8000960:	df000017 	ldw	fp,0(sp)
 8000964:	dec00104 	addi	sp,sp,4
 8000968:	f800283a 	ret

0800096c <write_stdout>:


GLOBAL(FILE *)
	write_stdout (void)
{
 800096c:	defffe04 	addi	sp,sp,-8
 8000970:	df000115 	stw	fp,4(sp)
 8000974:	df000104 	addi	fp,sp,4
	FILE * output_file = stdout;
 8000978:	00820134 	movhi	r2,2052
 800097c:	108c4504 	addi	r2,r2,12564
 8000980:	10800017 	ldw	r2,0(r2)
 8000984:	10800217 	ldw	r2,8(r2)
 8000988:	e0bfff15 	stw	r2,-4(fp)
	if ((output_file = fdopen(fileno(stdout), WRITE_BINARY)) == NULL) {
		fprintf(stderr, "Cannot reopen stdout\n");
		exit(EXIT_FAILURE);
	}
#endif
	return output_file;
 800098c:	e0bfff17 	ldw	r2,-4(fp)
}
 8000990:	e037883a 	mov	sp,fp
 8000994:	df000017 	ldw	fp,0(sp)
 8000998:	dec00104 	addi	sp,sp,4
 800099c:	f800283a 	ret

080009a0 <jpeg_CreateCompress>:
* The error manager must already be set up (in case memory manager fails).
*/

GLOBAL(void)
	jpeg_CreateCompress (j_compress_ptr cinfo, int version, size_t structsize)
{
 80009a0:	defff804 	addi	sp,sp,-32
 80009a4:	dfc00715 	stw	ra,28(sp)
 80009a8:	df000615 	stw	fp,24(sp)
 80009ac:	df000604 	addi	fp,sp,24
 80009b0:	e13ffd15 	stw	r4,-12(fp)
 80009b4:	e17ffe15 	stw	r5,-8(fp)
 80009b8:	e1bfff15 	stw	r6,-4(fp)
	int i;

	/* Guard against version mismatches between library and caller. */
	cinfo->mem = NULL;		/* so jpeg_destroy knows mem mgr not called */
 80009bc:	e0bffd17 	ldw	r2,-12(fp)
 80009c0:	10000115 	stw	zero,4(r2)
	if (version != JPEG_LIB_VERSION)
 80009c4:	e0bffe17 	ldw	r2,-8(fp)
 80009c8:	10801420 	cmpeqi	r2,r2,80
 80009cc:	1000111e 	bne	r2,zero,8000a14 <jpeg_CreateCompress+0x74>
		ERREXIT2(cinfo, JERR_BAD_LIB_VERSION, JPEG_LIB_VERSION, version);
 80009d0:	e0bffd17 	ldw	r2,-12(fp)
 80009d4:	10800017 	ldw	r2,0(r2)
 80009d8:	00c00344 	movi	r3,13
 80009dc:	10c00515 	stw	r3,20(r2)
 80009e0:	e0bffd17 	ldw	r2,-12(fp)
 80009e4:	10800017 	ldw	r2,0(r2)
 80009e8:	00c01404 	movi	r3,80
 80009ec:	10c00615 	stw	r3,24(r2)
 80009f0:	e0bffd17 	ldw	r2,-12(fp)
 80009f4:	10800017 	ldw	r2,0(r2)
 80009f8:	e0fffe17 	ldw	r3,-8(fp)
 80009fc:	10c00715 	stw	r3,28(r2)
 8000a00:	e0bffd17 	ldw	r2,-12(fp)
 8000a04:	10800017 	ldw	r2,0(r2)
 8000a08:	10800017 	ldw	r2,0(r2)
 8000a0c:	e13ffd17 	ldw	r4,-12(fp)
 8000a10:	103ee83a 	callr	r2
	if (structsize != SIZEOF(struct jpeg_compress_struct))
 8000a14:	e0bfff17 	ldw	r2,-4(fp)
 8000a18:	10806720 	cmpeqi	r2,r2,412
 8000a1c:	1000111e 	bne	r2,zero,8000a64 <jpeg_CreateCompress+0xc4>
		ERREXIT2(cinfo, JERR_BAD_STRUCT_SIZE, 
 8000a20:	e0bffd17 	ldw	r2,-12(fp)
 8000a24:	10800017 	ldw	r2,0(r2)
 8000a28:	00c00584 	movi	r3,22
 8000a2c:	10c00515 	stw	r3,20(r2)
 8000a30:	e0bffd17 	ldw	r2,-12(fp)
 8000a34:	10800017 	ldw	r2,0(r2)
 8000a38:	00c06704 	movi	r3,412
 8000a3c:	10c00615 	stw	r3,24(r2)
 8000a40:	e0bffd17 	ldw	r2,-12(fp)
 8000a44:	10800017 	ldw	r2,0(r2)
 8000a48:	e0ffff17 	ldw	r3,-4(fp)
 8000a4c:	10c00715 	stw	r3,28(r2)
 8000a50:	e0bffd17 	ldw	r2,-12(fp)
 8000a54:	10800017 	ldw	r2,0(r2)
 8000a58:	10800017 	ldw	r2,0(r2)
 8000a5c:	e13ffd17 	ldw	r4,-12(fp)
 8000a60:	103ee83a 	callr	r2
	* client_data, so we have to save and restore those fields.
	* Note: if application hasn't set client_data, tools like Purify may
	* complain here.
	*/
	{
		struct jpeg_error_mgr * err = cinfo->err;
 8000a64:	e0bffd17 	ldw	r2,-12(fp)
 8000a68:	10800017 	ldw	r2,0(r2)
 8000a6c:	e0bffb15 	stw	r2,-20(fp)
		void * client_data = cinfo->client_data; /* ignore Purify complaint here */
 8000a70:	e0bffd17 	ldw	r2,-12(fp)
 8000a74:	10800317 	ldw	r2,12(r2)
 8000a78:	e0bffc15 	stw	r2,-16(fp)
		MEMZERO(cinfo, SIZEOF(struct jpeg_compress_struct));
 8000a7c:	e13ffd17 	ldw	r4,-12(fp)
 8000a80:	000b883a 	mov	r5,zero
 8000a84:	01806704 	movi	r6,412
 8000a88:	802ecf00 	call	802ecf0 <memset>
		cinfo->err = err;
 8000a8c:	e0bffd17 	ldw	r2,-12(fp)
 8000a90:	e0fffb17 	ldw	r3,-20(fp)
 8000a94:	10c00015 	stw	r3,0(r2)
		cinfo->client_data = client_data;
 8000a98:	e0bffd17 	ldw	r2,-12(fp)
 8000a9c:	e0fffc17 	ldw	r3,-16(fp)
 8000aa0:	10c00315 	stw	r3,12(r2)
	}
	cinfo->is_decompressor = FALSE;
 8000aa4:	e0bffd17 	ldw	r2,-12(fp)
 8000aa8:	10000405 	stb	zero,16(r2)

	/* Initialize a memory manager instance for this object */
	jinit_memory_mgr((j_common_ptr) cinfo);
 8000aac:	e13ffd17 	ldw	r4,-12(fp)
 8000ab0:	8026d740 	call	8026d74 <jinit_memory_mgr>

	/* Zero out pointers to permanent structures. */
	cinfo->progress = NULL;
 8000ab4:	e0bffd17 	ldw	r2,-12(fp)
 8000ab8:	10000215 	stw	zero,8(r2)
	cinfo->dest = NULL;
 8000abc:	e0bffd17 	ldw	r2,-12(fp)
 8000ac0:	10000615 	stw	zero,24(r2)

	cinfo->comp_info = NULL;
 8000ac4:	e0bffd17 	ldw	r2,-12(fp)
 8000ac8:	10001415 	stw	zero,80(r2)

	for (i = 0; i < NUM_QUANT_TBLS; i++) {
 8000acc:	e03ffa15 	stw	zero,-24(fp)
 8000ad0:	00001206 	br	8000b1c <jpeg_CreateCompress+0x17c>
		cinfo->quant_tbl_ptrs[i] = NULL;
 8000ad4:	e0fffd17 	ldw	r3,-12(fp)
 8000ad8:	e0bffa17 	ldw	r2,-24(fp)
 8000adc:	10800544 	addi	r2,r2,21
 8000ae0:	1085883a 	add	r2,r2,r2
 8000ae4:	1085883a 	add	r2,r2,r2
 8000ae8:	1885883a 	add	r2,r3,r2
 8000aec:	10000015 	stw	zero,0(r2)
		cinfo->q_scale_factor[i] = 100;
 8000af0:	e0fffd17 	ldw	r3,-12(fp)
 8000af4:	e0bffa17 	ldw	r2,-24(fp)
 8000af8:	10800644 	addi	r2,r2,25
 8000afc:	1085883a 	add	r2,r2,r2
 8000b00:	1085883a 	add	r2,r2,r2
 8000b04:	1885883a 	add	r2,r3,r2
 8000b08:	00c01904 	movi	r3,100
 8000b0c:	10c00015 	stw	r3,0(r2)
	cinfo->progress = NULL;
	cinfo->dest = NULL;

	cinfo->comp_info = NULL;

	for (i = 0; i < NUM_QUANT_TBLS; i++) {
 8000b10:	e0bffa17 	ldw	r2,-24(fp)
 8000b14:	10800044 	addi	r2,r2,1
 8000b18:	e0bffa15 	stw	r2,-24(fp)
 8000b1c:	e0bffa17 	ldw	r2,-24(fp)
 8000b20:	10800110 	cmplti	r2,r2,4
 8000b24:	103feb1e 	bne	r2,zero,8000ad4 <jpeg_CreateCompress+0x134>
		cinfo->quant_tbl_ptrs[i] = NULL;
		cinfo->q_scale_factor[i] = 100;
	}

	for (i = 0; i < NUM_HUFF_TBLS; i++) {
 8000b28:	e03ffa15 	stw	zero,-24(fp)
 8000b2c:	00001106 	br	8000b74 <jpeg_CreateCompress+0x1d4>
		cinfo->dc_huff_tbl_ptrs[i] = NULL;
 8000b30:	e0fffd17 	ldw	r3,-12(fp)
 8000b34:	e0bffa17 	ldw	r2,-24(fp)
 8000b38:	10800744 	addi	r2,r2,29
 8000b3c:	1085883a 	add	r2,r2,r2
 8000b40:	1085883a 	add	r2,r2,r2
 8000b44:	1885883a 	add	r2,r3,r2
 8000b48:	10000015 	stw	zero,0(r2)
		cinfo->ac_huff_tbl_ptrs[i] = NULL;
 8000b4c:	e0fffd17 	ldw	r3,-12(fp)
 8000b50:	e0bffa17 	ldw	r2,-24(fp)
 8000b54:	10800844 	addi	r2,r2,33
 8000b58:	1085883a 	add	r2,r2,r2
 8000b5c:	1085883a 	add	r2,r2,r2
 8000b60:	1885883a 	add	r2,r3,r2
 8000b64:	10000015 	stw	zero,0(r2)
	for (i = 0; i < NUM_QUANT_TBLS; i++) {
		cinfo->quant_tbl_ptrs[i] = NULL;
		cinfo->q_scale_factor[i] = 100;
	}

	for (i = 0; i < NUM_HUFF_TBLS; i++) {
 8000b68:	e0bffa17 	ldw	r2,-24(fp)
 8000b6c:	10800044 	addi	r2,r2,1
 8000b70:	e0bffa15 	stw	r2,-24(fp)
 8000b74:	e0bffa17 	ldw	r2,-24(fp)
 8000b78:	10800110 	cmplti	r2,r2,4
 8000b7c:	103fec1e 	bne	r2,zero,8000b30 <jpeg_CreateCompress+0x190>
		cinfo->dc_huff_tbl_ptrs[i] = NULL;
		cinfo->ac_huff_tbl_ptrs[i] = NULL;
	}

	/* Must do it here for emit_dqt in case jpeg_write_tables is used */
	cinfo->block_size = DCTSIZE;
 8000b80:	e0bffd17 	ldw	r2,-12(fp)
 8000b84:	00c00204 	movi	r3,8
 8000b88:	10c05915 	stw	r3,356(r2)
	cinfo->natural_order = jpeg_natural_order;
 8000b8c:	e0bffd17 	ldw	r2,-12(fp)
 8000b90:	00c20134 	movhi	r3,2052
 8000b94:	18c2c304 	addi	r3,r3,2828
 8000b98:	10c05a15 	stw	r3,360(r2)
	cinfo->lim_Se = DCTSIZE2-1;
 8000b9c:	e0bffd17 	ldw	r2,-12(fp)
 8000ba0:	00c00fc4 	movi	r3,63
 8000ba4:	10c05b15 	stw	r3,364(r2)

	cinfo->script_space = NULL;
 8000ba8:	e0bffd17 	ldw	r2,-12(fp)
 8000bac:	10006515 	stw	zero,404(r2)

	cinfo->input_gamma = 1.0;	/* in case application forgets */
 8000bb0:	e0bffd17 	ldw	r2,-12(fp)
 8000bb4:	10000b15 	stw	zero,44(r2)
 8000bb8:	00cffc34 	movhi	r3,16368
 8000bbc:	10c00c15 	stw	r3,48(r2)

	/* OK, I'm ready */
	cinfo->global_state = CSTATE_START;
 8000bc0:	e0bffd17 	ldw	r2,-12(fp)
 8000bc4:	00c01904 	movi	r3,100
 8000bc8:	10c00515 	stw	r3,20(r2)
}
 8000bcc:	e037883a 	mov	sp,fp
 8000bd0:	dfc00117 	ldw	ra,4(sp)
 8000bd4:	df000017 	ldw	fp,0(sp)
 8000bd8:	dec00204 	addi	sp,sp,8
 8000bdc:	f800283a 	ret

08000be0 <jpeg_destroy_compress>:
* Destruction of a JPEG compression object
*/

GLOBAL(void)
	jpeg_destroy_compress (j_compress_ptr cinfo)
{
 8000be0:	defffd04 	addi	sp,sp,-12
 8000be4:	dfc00215 	stw	ra,8(sp)
 8000be8:	df000115 	stw	fp,4(sp)
 8000bec:	df000104 	addi	fp,sp,4
 8000bf0:	e13fff15 	stw	r4,-4(fp)
	jpeg_destroy((j_common_ptr) cinfo); /* use common routine */
 8000bf4:	e13fff17 	ldw	r4,-4(fp)
 8000bf8:	800cf280 	call	800cf28 <jpeg_destroy>
}
 8000bfc:	e037883a 	mov	sp,fp
 8000c00:	dfc00117 	ldw	ra,4(sp)
 8000c04:	df000017 	ldw	fp,0(sp)
 8000c08:	dec00204 	addi	sp,sp,8
 8000c0c:	f800283a 	ret

08000c10 <jpeg_abort_compress>:
* but don't destroy the object itself.
*/

GLOBAL(void)
	jpeg_abort_compress (j_compress_ptr cinfo)
{
 8000c10:	defffd04 	addi	sp,sp,-12
 8000c14:	dfc00215 	stw	ra,8(sp)
 8000c18:	df000115 	stw	fp,4(sp)
 8000c1c:	df000104 	addi	fp,sp,4
 8000c20:	e13fff15 	stw	r4,-4(fp)
	jpeg_abort((j_common_ptr) cinfo); /* use common routine */
 8000c24:	e13fff17 	ldw	r4,-4(fp)
 8000c28:	800ce800 	call	800ce80 <jpeg_abort>
}
 8000c2c:	e037883a 	mov	sp,fp
 8000c30:	dfc00117 	ldw	ra,4(sp)
 8000c34:	df000017 	ldw	fp,0(sp)
 8000c38:	dec00204 	addi	sp,sp,8
 8000c3c:	f800283a 	ret

08000c40 <jpeg_suppress_tables>:
* jcparam.o would be linked whether the application used it or not.
*/

GLOBAL(void)
	jpeg_suppress_tables (j_compress_ptr cinfo, boolean suppress)
{
 8000c40:	defffa04 	addi	sp,sp,-24
 8000c44:	df000515 	stw	fp,20(sp)
 8000c48:	df000504 	addi	fp,sp,20
 8000c4c:	e13ffe15 	stw	r4,-8(fp)
 8000c50:	2805883a 	mov	r2,r5
 8000c54:	e0bfff05 	stb	r2,-4(fp)
	int i;
	JQUANT_TBL * qtbl;
	JHUFF_TBL * htbl;

	for (i = 0; i < NUM_QUANT_TBLS; i++) {
 8000c58:	e03ffb15 	stw	zero,-20(fp)
 8000c5c:	00001006 	br	8000ca0 <jpeg_suppress_tables+0x60>
		if ((qtbl = cinfo->quant_tbl_ptrs[i]) != NULL)
 8000c60:	e0fffe17 	ldw	r3,-8(fp)
 8000c64:	e0bffb17 	ldw	r2,-20(fp)
 8000c68:	10800544 	addi	r2,r2,21
 8000c6c:	1085883a 	add	r2,r2,r2
 8000c70:	1085883a 	add	r2,r2,r2
 8000c74:	1885883a 	add	r2,r3,r2
 8000c78:	10800017 	ldw	r2,0(r2)
 8000c7c:	e0bffc15 	stw	r2,-16(fp)
 8000c80:	e0bffc17 	ldw	r2,-16(fp)
 8000c84:	10000326 	beq	r2,zero,8000c94 <jpeg_suppress_tables+0x54>
			qtbl->sent_table = suppress;
 8000c88:	e0bffc17 	ldw	r2,-16(fp)
 8000c8c:	e0ffff03 	ldbu	r3,-4(fp)
 8000c90:	10c02005 	stb	r3,128(r2)
{
	int i;
	JQUANT_TBL * qtbl;
	JHUFF_TBL * htbl;

	for (i = 0; i < NUM_QUANT_TBLS; i++) {
 8000c94:	e0bffb17 	ldw	r2,-20(fp)
 8000c98:	10800044 	addi	r2,r2,1
 8000c9c:	e0bffb15 	stw	r2,-20(fp)
 8000ca0:	e0bffb17 	ldw	r2,-20(fp)
 8000ca4:	10800110 	cmplti	r2,r2,4
 8000ca8:	103fed1e 	bne	r2,zero,8000c60 <jpeg_suppress_tables+0x20>
		if ((qtbl = cinfo->quant_tbl_ptrs[i]) != NULL)
			qtbl->sent_table = suppress;
	}

	for (i = 0; i < NUM_HUFF_TBLS; i++) {
 8000cac:	e03ffb15 	stw	zero,-20(fp)
 8000cb0:	00001d06 	br	8000d28 <jpeg_suppress_tables+0xe8>
		if ((htbl = cinfo->dc_huff_tbl_ptrs[i]) != NULL)
 8000cb4:	e0fffe17 	ldw	r3,-8(fp)
 8000cb8:	e0bffb17 	ldw	r2,-20(fp)
 8000cbc:	10800744 	addi	r2,r2,29
 8000cc0:	1085883a 	add	r2,r2,r2
 8000cc4:	1085883a 	add	r2,r2,r2
 8000cc8:	1885883a 	add	r2,r3,r2
 8000ccc:	10800017 	ldw	r2,0(r2)
 8000cd0:	e0bffd15 	stw	r2,-12(fp)
 8000cd4:	e0bffd17 	ldw	r2,-12(fp)
 8000cd8:	10000326 	beq	r2,zero,8000ce8 <jpeg_suppress_tables+0xa8>
			htbl->sent_table = suppress;
 8000cdc:	e0bffd17 	ldw	r2,-12(fp)
 8000ce0:	e0ffff03 	ldbu	r3,-4(fp)
 8000ce4:	10c04445 	stb	r3,273(r2)
		if ((htbl = cinfo->ac_huff_tbl_ptrs[i]) != NULL)
 8000ce8:	e0fffe17 	ldw	r3,-8(fp)
 8000cec:	e0bffb17 	ldw	r2,-20(fp)
 8000cf0:	10800844 	addi	r2,r2,33
 8000cf4:	1085883a 	add	r2,r2,r2
 8000cf8:	1085883a 	add	r2,r2,r2
 8000cfc:	1885883a 	add	r2,r3,r2
 8000d00:	10800017 	ldw	r2,0(r2)
 8000d04:	e0bffd15 	stw	r2,-12(fp)
 8000d08:	e0bffd17 	ldw	r2,-12(fp)
 8000d0c:	10000326 	beq	r2,zero,8000d1c <jpeg_suppress_tables+0xdc>
			htbl->sent_table = suppress;
 8000d10:	e0bffd17 	ldw	r2,-12(fp)
 8000d14:	e0ffff03 	ldbu	r3,-4(fp)
 8000d18:	10c04445 	stb	r3,273(r2)
	for (i = 0; i < NUM_QUANT_TBLS; i++) {
		if ((qtbl = cinfo->quant_tbl_ptrs[i]) != NULL)
			qtbl->sent_table = suppress;
	}

	for (i = 0; i < NUM_HUFF_TBLS; i++) {
 8000d1c:	e0bffb17 	ldw	r2,-20(fp)
 8000d20:	10800044 	addi	r2,r2,1
 8000d24:	e0bffb15 	stw	r2,-20(fp)
 8000d28:	e0bffb17 	ldw	r2,-20(fp)
 8000d2c:	10800110 	cmplti	r2,r2,4
 8000d30:	103fe01e 	bne	r2,zero,8000cb4 <jpeg_suppress_tables+0x74>
		if ((htbl = cinfo->dc_huff_tbl_ptrs[i]) != NULL)
			htbl->sent_table = suppress;
		if ((htbl = cinfo->ac_huff_tbl_ptrs[i]) != NULL)
			htbl->sent_table = suppress;
	}
}
 8000d34:	e037883a 	mov	sp,fp
 8000d38:	df000017 	ldw	fp,0(sp)
 8000d3c:	dec00104 	addi	sp,sp,4
 8000d40:	f800283a 	ret

08000d44 <jpeg_finish_compress>:
* work including most of the actual output.
*/

GLOBAL(void)
	jpeg_finish_compress (j_compress_ptr cinfo)
{
 8000d44:	defffc04 	addi	sp,sp,-16
 8000d48:	dfc00315 	stw	ra,12(sp)
 8000d4c:	df000215 	stw	fp,8(sp)
 8000d50:	df000204 	addi	fp,sp,8
 8000d54:	e13fff15 	stw	r4,-4(fp)
	JDIMENSION iMCU_row;

	if (cinfo->global_state == CSTATE_SCANNING ||
 8000d58:	e0bfff17 	ldw	r2,-4(fp)
 8000d5c:	10800517 	ldw	r2,20(r2)
 8000d60:	10801960 	cmpeqi	r2,r2,101
 8000d64:	1000041e 	bne	r2,zero,8000d78 <jpeg_finish_compress+0x34>
		cinfo->global_state == CSTATE_RAW_OK) {
 8000d68:	e0bfff17 	ldw	r2,-4(fp)
 8000d6c:	10800517 	ldw	r2,20(r2)
GLOBAL(void)
	jpeg_finish_compress (j_compress_ptr cinfo)
{
	JDIMENSION iMCU_row;

	if (cinfo->global_state == CSTATE_SCANNING ||
 8000d70:	10801998 	cmpnei	r2,r2,102
 8000d74:	1000141e 	bne	r2,zero,8000dc8 <jpeg_finish_compress+0x84>
		cinfo->global_state == CSTATE_RAW_OK) {
			/* Terminate first pass */
			if (cinfo->next_scanline < cinfo->image_height)
 8000d78:	e0bfff17 	ldw	r2,-4(fp)
 8000d7c:	10c03c17 	ldw	r3,240(r2)
 8000d80:	e0bfff17 	ldw	r2,-4(fp)
 8000d84:	10800817 	ldw	r2,32(r2)
 8000d88:	1880092e 	bgeu	r3,r2,8000db0 <jpeg_finish_compress+0x6c>
				ERREXIT(cinfo, JERR_TOO_LITTLE_DATA);
 8000d8c:	e0bfff17 	ldw	r2,-4(fp)
 8000d90:	10800017 	ldw	r2,0(r2)
 8000d94:	00c01144 	movi	r3,69
 8000d98:	10c00515 	stw	r3,20(r2)
 8000d9c:	e0bfff17 	ldw	r2,-4(fp)
 8000da0:	10800017 	ldw	r2,0(r2)
 8000da4:	10800017 	ldw	r2,0(r2)
 8000da8:	e13fff17 	ldw	r4,-4(fp)
 8000dac:	103ee83a 	callr	r2
			(*cinfo->master->finish_pass) (cinfo);
 8000db0:	e0bfff17 	ldw	r2,-4(fp)
 8000db4:	10805c17 	ldw	r2,368(r2)
 8000db8:	10800217 	ldw	r2,8(r2)
 8000dbc:	e13fff17 	ldw	r4,-4(fp)
 8000dc0:	103ee83a 	callr	r2
	} else if (cinfo->global_state != CSTATE_WRCOEFS)
		ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
	/* Perform any remaining passes */
	while (! cinfo->master->is_last_pass) {
 8000dc4:	00004906 	br	8000eec <jpeg_finish_compress+0x1a8>
		cinfo->global_state == CSTATE_RAW_OK) {
			/* Terminate first pass */
			if (cinfo->next_scanline < cinfo->image_height)
				ERREXIT(cinfo, JERR_TOO_LITTLE_DATA);
			(*cinfo->master->finish_pass) (cinfo);
	} else if (cinfo->global_state != CSTATE_WRCOEFS)
 8000dc8:	e0bfff17 	ldw	r2,-4(fp)
 8000dcc:	10800517 	ldw	r2,20(r2)
 8000dd0:	108019e0 	cmpeqi	r2,r2,103
 8000dd4:	1000451e 	bne	r2,zero,8000eec <jpeg_finish_compress+0x1a8>
		ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8000dd8:	e0bfff17 	ldw	r2,-4(fp)
 8000ddc:	10800017 	ldw	r2,0(r2)
 8000de0:	00c00544 	movi	r3,21
 8000de4:	10c00515 	stw	r3,20(r2)
 8000de8:	e0bfff17 	ldw	r2,-4(fp)
 8000dec:	10800017 	ldw	r2,0(r2)
 8000df0:	e0ffff17 	ldw	r3,-4(fp)
 8000df4:	18c00517 	ldw	r3,20(r3)
 8000df8:	10c00615 	stw	r3,24(r2)
 8000dfc:	e0bfff17 	ldw	r2,-4(fp)
 8000e00:	10800017 	ldw	r2,0(r2)
 8000e04:	10800017 	ldw	r2,0(r2)
 8000e08:	e13fff17 	ldw	r4,-4(fp)
 8000e0c:	103ee83a 	callr	r2
	/* Perform any remaining passes */
	while (! cinfo->master->is_last_pass) {
 8000e10:	00003606 	br	8000eec <jpeg_finish_compress+0x1a8>
		(*cinfo->master->prepare_for_pass) (cinfo);
 8000e14:	e0bfff17 	ldw	r2,-4(fp)
 8000e18:	10805c17 	ldw	r2,368(r2)
 8000e1c:	10800017 	ldw	r2,0(r2)
 8000e20:	e13fff17 	ldw	r4,-4(fp)
 8000e24:	103ee83a 	callr	r2
		for (iMCU_row = 0; iMCU_row < cinfo->total_iMCU_rows; iMCU_row++) {
 8000e28:	e03ffe15 	stw	zero,-8(fp)
 8000e2c:	00002506 	br	8000ec4 <jpeg_finish_compress+0x180>
			if (cinfo->progress != NULL) {
 8000e30:	e0bfff17 	ldw	r2,-4(fp)
 8000e34:	10800217 	ldw	r2,8(r2)
 8000e38:	10000e26 	beq	r2,zero,8000e74 <jpeg_finish_compress+0x130>
				cinfo->progress->pass_counter = (long) iMCU_row;
 8000e3c:	e0bfff17 	ldw	r2,-4(fp)
 8000e40:	10800217 	ldw	r2,8(r2)
 8000e44:	e0fffe17 	ldw	r3,-8(fp)
 8000e48:	10c00115 	stw	r3,4(r2)
				cinfo->progress->pass_limit = (long) cinfo->total_iMCU_rows;
 8000e4c:	e0bfff17 	ldw	r2,-4(fp)
 8000e50:	10800217 	ldw	r2,8(r2)
 8000e54:	e0ffff17 	ldw	r3,-4(fp)
 8000e58:	18c04217 	ldw	r3,264(r3)
 8000e5c:	10c00215 	stw	r3,8(r2)
				(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 8000e60:	e0bfff17 	ldw	r2,-4(fp)
 8000e64:	10800217 	ldw	r2,8(r2)
 8000e68:	10800017 	ldw	r2,0(r2)
 8000e6c:	e13fff17 	ldw	r4,-4(fp)
 8000e70:	103ee83a 	callr	r2
			}
			/* We bypass the main controller and invoke coef controller directly;
			* all work is being done from the coefficient buffer.
			*/
			if (! (*cinfo->coef->compress_data) (cinfo, (JSAMPIMAGE) NULL))
 8000e74:	e0bfff17 	ldw	r2,-4(fp)
 8000e78:	10805f17 	ldw	r2,380(r2)
 8000e7c:	10800117 	ldw	r2,4(r2)
 8000e80:	e13fff17 	ldw	r4,-4(fp)
 8000e84:	000b883a 	mov	r5,zero
 8000e88:	103ee83a 	callr	r2
 8000e8c:	10803fcc 	andi	r2,r2,255
 8000e90:	1000091e 	bne	r2,zero,8000eb8 <jpeg_finish_compress+0x174>
				ERREXIT(cinfo, JERR_CANT_SUSPEND);
 8000e94:	e0bfff17 	ldw	r2,-4(fp)
 8000e98:	10800017 	ldw	r2,0(r2)
 8000e9c:	00c00644 	movi	r3,25
 8000ea0:	10c00515 	stw	r3,20(r2)
 8000ea4:	e0bfff17 	ldw	r2,-4(fp)
 8000ea8:	10800017 	ldw	r2,0(r2)
 8000eac:	10800017 	ldw	r2,0(r2)
 8000eb0:	e13fff17 	ldw	r4,-4(fp)
 8000eb4:	103ee83a 	callr	r2
	} else if (cinfo->global_state != CSTATE_WRCOEFS)
		ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
	/* Perform any remaining passes */
	while (! cinfo->master->is_last_pass) {
		(*cinfo->master->prepare_for_pass) (cinfo);
		for (iMCU_row = 0; iMCU_row < cinfo->total_iMCU_rows; iMCU_row++) {
 8000eb8:	e0bffe17 	ldw	r2,-8(fp)
 8000ebc:	10800044 	addi	r2,r2,1
 8000ec0:	e0bffe15 	stw	r2,-8(fp)
 8000ec4:	e0bfff17 	ldw	r2,-4(fp)
 8000ec8:	10804217 	ldw	r2,264(r2)
 8000ecc:	e0fffe17 	ldw	r3,-8(fp)
 8000ed0:	18bfd736 	bltu	r3,r2,8000e30 <jpeg_finish_compress+0xec>
			* all work is being done from the coefficient buffer.
			*/
			if (! (*cinfo->coef->compress_data) (cinfo, (JSAMPIMAGE) NULL))
				ERREXIT(cinfo, JERR_CANT_SUSPEND);
		}
		(*cinfo->master->finish_pass) (cinfo);
 8000ed4:	e0bfff17 	ldw	r2,-4(fp)
 8000ed8:	10805c17 	ldw	r2,368(r2)
 8000edc:	10800217 	ldw	r2,8(r2)
 8000ee0:	e13fff17 	ldw	r4,-4(fp)
 8000ee4:	103ee83a 	callr	r2
 8000ee8:	00000106 	br	8000ef0 <jpeg_finish_compress+0x1ac>
				ERREXIT(cinfo, JERR_TOO_LITTLE_DATA);
			(*cinfo->master->finish_pass) (cinfo);
	} else if (cinfo->global_state != CSTATE_WRCOEFS)
		ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
	/* Perform any remaining passes */
	while (! cinfo->master->is_last_pass) {
 8000eec:	0001883a 	nop
 8000ef0:	e0bfff17 	ldw	r2,-4(fp)
 8000ef4:	10805c17 	ldw	r2,368(r2)
 8000ef8:	10800343 	ldbu	r2,13(r2)
 8000efc:	10803fcc 	andi	r2,r2,255
 8000f00:	103fc426 	beq	r2,zero,8000e14 <jpeg_finish_compress+0xd0>
				ERREXIT(cinfo, JERR_CANT_SUSPEND);
		}
		(*cinfo->master->finish_pass) (cinfo);
	}
	/* Write EOI, do final cleanup */
	(*cinfo->marker->write_file_trailer) (cinfo);
 8000f04:	e0bfff17 	ldw	r2,-4(fp)
 8000f08:	10806017 	ldw	r2,384(r2)
 8000f0c:	10800317 	ldw	r2,12(r2)
 8000f10:	e13fff17 	ldw	r4,-4(fp)
 8000f14:	103ee83a 	callr	r2
	(*cinfo->dest->term_destination) (cinfo);
 8000f18:	e0bfff17 	ldw	r2,-4(fp)
 8000f1c:	10800617 	ldw	r2,24(r2)
 8000f20:	10800417 	ldw	r2,16(r2)
 8000f24:	e13fff17 	ldw	r4,-4(fp)
 8000f28:	103ee83a 	callr	r2
	/* We can use jpeg_abort to release memory and reset global_state */
	jpeg_abort((j_common_ptr) cinfo);
 8000f2c:	e13fff17 	ldw	r4,-4(fp)
 8000f30:	800ce800 	call	800ce80 <jpeg_abort>
}
 8000f34:	e037883a 	mov	sp,fp
 8000f38:	dfc00117 	ldw	ra,4(sp)
 8000f3c:	df000017 	ldw	fp,0(sp)
 8000f40:	dec00204 	addi	sp,sp,8
 8000f44:	f800283a 	ret

08000f48 <jpeg_write_marker>:
*/

GLOBAL(void)
	jpeg_write_marker (j_compress_ptr cinfo, int marker,
	const JOCTET *dataptr, unsigned int datalen)
{
 8000f48:	defff904 	addi	sp,sp,-28
 8000f4c:	dfc00615 	stw	ra,24(sp)
 8000f50:	df000515 	stw	fp,20(sp)
 8000f54:	df000504 	addi	fp,sp,20
 8000f58:	e13ffc15 	stw	r4,-16(fp)
 8000f5c:	e17ffd15 	stw	r5,-12(fp)
 8000f60:	e1bffe15 	stw	r6,-8(fp)
 8000f64:	e1ffff15 	stw	r7,-4(fp)
	JMETHOD(void, write_marker_byte, (j_compress_ptr info, int val));

	if (cinfo->next_scanline != 0 ||
 8000f68:	e0bffc17 	ldw	r2,-16(fp)
 8000f6c:	10803c17 	ldw	r2,240(r2)
 8000f70:	10000c1e 	bne	r2,zero,8000fa4 <jpeg_write_marker+0x5c>
		(cinfo->global_state != CSTATE_SCANNING &&
 8000f74:	e0bffc17 	ldw	r2,-16(fp)
 8000f78:	10800517 	ldw	r2,20(r2)
	jpeg_write_marker (j_compress_ptr cinfo, int marker,
	const JOCTET *dataptr, unsigned int datalen)
{
	JMETHOD(void, write_marker_byte, (j_compress_ptr info, int val));

	if (cinfo->next_scanline != 0 ||
 8000f7c:	10801960 	cmpeqi	r2,r2,101
 8000f80:	1000161e 	bne	r2,zero,8000fdc <jpeg_write_marker+0x94>
		(cinfo->global_state != CSTATE_SCANNING &&
		cinfo->global_state != CSTATE_RAW_OK &&
 8000f84:	e0bffc17 	ldw	r2,-16(fp)
 8000f88:	10800517 	ldw	r2,20(r2)
	const JOCTET *dataptr, unsigned int datalen)
{
	JMETHOD(void, write_marker_byte, (j_compress_ptr info, int val));

	if (cinfo->next_scanline != 0 ||
		(cinfo->global_state != CSTATE_SCANNING &&
 8000f8c:	108019a0 	cmpeqi	r2,r2,102
 8000f90:	1000121e 	bne	r2,zero,8000fdc <jpeg_write_marker+0x94>
		cinfo->global_state != CSTATE_RAW_OK &&
		cinfo->global_state != CSTATE_WRCOEFS))
 8000f94:	e0bffc17 	ldw	r2,-16(fp)
 8000f98:	10800517 	ldw	r2,20(r2)
{
	JMETHOD(void, write_marker_byte, (j_compress_ptr info, int val));

	if (cinfo->next_scanline != 0 ||
		(cinfo->global_state != CSTATE_SCANNING &&
		cinfo->global_state != CSTATE_RAW_OK &&
 8000f9c:	108019e0 	cmpeqi	r2,r2,103
 8000fa0:	10000e1e 	bne	r2,zero,8000fdc <jpeg_write_marker+0x94>
		cinfo->global_state != CSTATE_WRCOEFS))
		ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8000fa4:	e0bffc17 	ldw	r2,-16(fp)
 8000fa8:	10800017 	ldw	r2,0(r2)
 8000fac:	00c00544 	movi	r3,21
 8000fb0:	10c00515 	stw	r3,20(r2)
 8000fb4:	e0bffc17 	ldw	r2,-16(fp)
 8000fb8:	10800017 	ldw	r2,0(r2)
 8000fbc:	e0fffc17 	ldw	r3,-16(fp)
 8000fc0:	18c00517 	ldw	r3,20(r3)
 8000fc4:	10c00615 	stw	r3,24(r2)
 8000fc8:	e0bffc17 	ldw	r2,-16(fp)
 8000fcc:	10800017 	ldw	r2,0(r2)
 8000fd0:	10800017 	ldw	r2,0(r2)
 8000fd4:	e13ffc17 	ldw	r4,-16(fp)
 8000fd8:	103ee83a 	callr	r2

	(*cinfo->marker->write_marker_header) (cinfo, marker, datalen);
 8000fdc:	e0bffc17 	ldw	r2,-16(fp)
 8000fe0:	10806017 	ldw	r2,384(r2)
 8000fe4:	10800517 	ldw	r2,20(r2)
 8000fe8:	e13ffc17 	ldw	r4,-16(fp)
 8000fec:	e17ffd17 	ldw	r5,-12(fp)
 8000ff0:	e1bfff17 	ldw	r6,-4(fp)
 8000ff4:	103ee83a 	callr	r2
	write_marker_byte = cinfo->marker->write_marker_byte;	/* copy for speed */
 8000ff8:	e0bffc17 	ldw	r2,-16(fp)
 8000ffc:	10806017 	ldw	r2,384(r2)
 8001000:	10800617 	ldw	r2,24(r2)
 8001004:	e0bffb15 	stw	r2,-20(fp)
	while (datalen--) {
 8001008:	00000a06 	br	8001034 <jpeg_write_marker+0xec>
		(*write_marker_byte) (cinfo, *dataptr);
 800100c:	e0bffe17 	ldw	r2,-8(fp)
 8001010:	10800003 	ldbu	r2,0(r2)
 8001014:	10803fcc 	andi	r2,r2,255
 8001018:	e0fffb17 	ldw	r3,-20(fp)
 800101c:	e13ffc17 	ldw	r4,-16(fp)
 8001020:	100b883a 	mov	r5,r2
 8001024:	183ee83a 	callr	r3
		dataptr++;
 8001028:	e0bffe17 	ldw	r2,-8(fp)
 800102c:	10800044 	addi	r2,r2,1
 8001030:	e0bffe15 	stw	r2,-8(fp)
		cinfo->global_state != CSTATE_WRCOEFS))
		ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);

	(*cinfo->marker->write_marker_header) (cinfo, marker, datalen);
	write_marker_byte = cinfo->marker->write_marker_byte;	/* copy for speed */
	while (datalen--) {
 8001034:	e0bfff17 	ldw	r2,-4(fp)
 8001038:	1004c03a 	cmpne	r2,r2,zero
 800103c:	e0ffff17 	ldw	r3,-4(fp)
 8001040:	18ffffc4 	addi	r3,r3,-1
 8001044:	e0ffff15 	stw	r3,-4(fp)
 8001048:	10803fcc 	andi	r2,r2,255
 800104c:	103fef1e 	bne	r2,zero,800100c <jpeg_write_marker+0xc4>
		(*write_marker_byte) (cinfo, *dataptr);
		dataptr++;
	}
}
 8001050:	e037883a 	mov	sp,fp
 8001054:	dfc00117 	ldw	ra,4(sp)
 8001058:	df000017 	ldw	fp,0(sp)
 800105c:	dec00204 	addi	sp,sp,8
 8001060:	f800283a 	ret

08001064 <jpeg_write_m_header>:

/* Same, but piecemeal. */

GLOBAL(void)
	jpeg_write_m_header (j_compress_ptr cinfo, int marker, unsigned int datalen)
{
 8001064:	defffb04 	addi	sp,sp,-20
 8001068:	dfc00415 	stw	ra,16(sp)
 800106c:	df000315 	stw	fp,12(sp)
 8001070:	df000304 	addi	fp,sp,12
 8001074:	e13ffd15 	stw	r4,-12(fp)
 8001078:	e17ffe15 	stw	r5,-8(fp)
 800107c:	e1bfff15 	stw	r6,-4(fp)
	if (cinfo->next_scanline != 0 ||
 8001080:	e0bffd17 	ldw	r2,-12(fp)
 8001084:	10803c17 	ldw	r2,240(r2)
 8001088:	10000c1e 	bne	r2,zero,80010bc <jpeg_write_m_header+0x58>
		(cinfo->global_state != CSTATE_SCANNING &&
 800108c:	e0bffd17 	ldw	r2,-12(fp)
 8001090:	10800517 	ldw	r2,20(r2)
/* Same, but piecemeal. */

GLOBAL(void)
	jpeg_write_m_header (j_compress_ptr cinfo, int marker, unsigned int datalen)
{
	if (cinfo->next_scanline != 0 ||
 8001094:	10801960 	cmpeqi	r2,r2,101
 8001098:	1000161e 	bne	r2,zero,80010f4 <jpeg_write_m_header+0x90>
		(cinfo->global_state != CSTATE_SCANNING &&
		cinfo->global_state != CSTATE_RAW_OK &&
 800109c:	e0bffd17 	ldw	r2,-12(fp)
 80010a0:	10800517 	ldw	r2,20(r2)

GLOBAL(void)
	jpeg_write_m_header (j_compress_ptr cinfo, int marker, unsigned int datalen)
{
	if (cinfo->next_scanline != 0 ||
		(cinfo->global_state != CSTATE_SCANNING &&
 80010a4:	108019a0 	cmpeqi	r2,r2,102
 80010a8:	1000121e 	bne	r2,zero,80010f4 <jpeg_write_m_header+0x90>
		cinfo->global_state != CSTATE_RAW_OK &&
		cinfo->global_state != CSTATE_WRCOEFS))
 80010ac:	e0bffd17 	ldw	r2,-12(fp)
 80010b0:	10800517 	ldw	r2,20(r2)
GLOBAL(void)
	jpeg_write_m_header (j_compress_ptr cinfo, int marker, unsigned int datalen)
{
	if (cinfo->next_scanline != 0 ||
		(cinfo->global_state != CSTATE_SCANNING &&
		cinfo->global_state != CSTATE_RAW_OK &&
 80010b4:	108019e0 	cmpeqi	r2,r2,103
 80010b8:	10000e1e 	bne	r2,zero,80010f4 <jpeg_write_m_header+0x90>
		cinfo->global_state != CSTATE_WRCOEFS))
		ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 80010bc:	e0bffd17 	ldw	r2,-12(fp)
 80010c0:	10800017 	ldw	r2,0(r2)
 80010c4:	00c00544 	movi	r3,21
 80010c8:	10c00515 	stw	r3,20(r2)
 80010cc:	e0bffd17 	ldw	r2,-12(fp)
 80010d0:	10800017 	ldw	r2,0(r2)
 80010d4:	e0fffd17 	ldw	r3,-12(fp)
 80010d8:	18c00517 	ldw	r3,20(r3)
 80010dc:	10c00615 	stw	r3,24(r2)
 80010e0:	e0bffd17 	ldw	r2,-12(fp)
 80010e4:	10800017 	ldw	r2,0(r2)
 80010e8:	10800017 	ldw	r2,0(r2)
 80010ec:	e13ffd17 	ldw	r4,-12(fp)
 80010f0:	103ee83a 	callr	r2

	(*cinfo->marker->write_marker_header) (cinfo, marker, datalen);
 80010f4:	e0bffd17 	ldw	r2,-12(fp)
 80010f8:	10806017 	ldw	r2,384(r2)
 80010fc:	10800517 	ldw	r2,20(r2)
 8001100:	e13ffd17 	ldw	r4,-12(fp)
 8001104:	e17ffe17 	ldw	r5,-8(fp)
 8001108:	e1bfff17 	ldw	r6,-4(fp)
 800110c:	103ee83a 	callr	r2
}
 8001110:	e037883a 	mov	sp,fp
 8001114:	dfc00117 	ldw	ra,4(sp)
 8001118:	df000017 	ldw	fp,0(sp)
 800111c:	dec00204 	addi	sp,sp,8
 8001120:	f800283a 	ret

08001124 <jpeg_write_m_byte>:

GLOBAL(void)
	jpeg_write_m_byte (j_compress_ptr cinfo, int val)
{
 8001124:	defffc04 	addi	sp,sp,-16
 8001128:	dfc00315 	stw	ra,12(sp)
 800112c:	df000215 	stw	fp,8(sp)
 8001130:	df000204 	addi	fp,sp,8
 8001134:	e13ffe15 	stw	r4,-8(fp)
 8001138:	e17fff15 	stw	r5,-4(fp)
	(*cinfo->marker->write_marker_byte) (cinfo, val);
 800113c:	e0bffe17 	ldw	r2,-8(fp)
 8001140:	10806017 	ldw	r2,384(r2)
 8001144:	10800617 	ldw	r2,24(r2)
 8001148:	e13ffe17 	ldw	r4,-8(fp)
 800114c:	e17fff17 	ldw	r5,-4(fp)
 8001150:	103ee83a 	callr	r2
}
 8001154:	e037883a 	mov	sp,fp
 8001158:	dfc00117 	ldw	ra,4(sp)
 800115c:	df000017 	ldw	fp,0(sp)
 8001160:	dec00204 	addi	sp,sp,8
 8001164:	f800283a 	ret

08001168 <jpeg_write_tables>:
* will not re-emit the tables unless it is passed write_all_tables=TRUE.
*/

GLOBAL(void)
	jpeg_write_tables (j_compress_ptr cinfo)
{
 8001168:	defffd04 	addi	sp,sp,-12
 800116c:	dfc00215 	stw	ra,8(sp)
 8001170:	df000115 	stw	fp,4(sp)
 8001174:	df000104 	addi	fp,sp,4
 8001178:	e13fff15 	stw	r4,-4(fp)
	if (cinfo->global_state != CSTATE_START)
 800117c:	e0bfff17 	ldw	r2,-4(fp)
 8001180:	10800517 	ldw	r2,20(r2)
 8001184:	10801920 	cmpeqi	r2,r2,100
 8001188:	10000e1e 	bne	r2,zero,80011c4 <jpeg_write_tables+0x5c>
		ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800118c:	e0bfff17 	ldw	r2,-4(fp)
 8001190:	10800017 	ldw	r2,0(r2)
 8001194:	00c00544 	movi	r3,21
 8001198:	10c00515 	stw	r3,20(r2)
 800119c:	e0bfff17 	ldw	r2,-4(fp)
 80011a0:	10800017 	ldw	r2,0(r2)
 80011a4:	e0ffff17 	ldw	r3,-4(fp)
 80011a8:	18c00517 	ldw	r3,20(r3)
 80011ac:	10c00615 	stw	r3,24(r2)
 80011b0:	e0bfff17 	ldw	r2,-4(fp)
 80011b4:	10800017 	ldw	r2,0(r2)
 80011b8:	10800017 	ldw	r2,0(r2)
 80011bc:	e13fff17 	ldw	r4,-4(fp)
 80011c0:	103ee83a 	callr	r2

	/* (Re)initialize error mgr and destination modules */
	(*cinfo->err->reset_error_mgr) ((j_common_ptr) cinfo);
 80011c4:	e0bfff17 	ldw	r2,-4(fp)
 80011c8:	10800017 	ldw	r2,0(r2)
 80011cc:	10800417 	ldw	r2,16(r2)
 80011d0:	e13fff17 	ldw	r4,-4(fp)
 80011d4:	103ee83a 	callr	r2
	(*cinfo->dest->init_destination) (cinfo);
 80011d8:	e0bfff17 	ldw	r2,-4(fp)
 80011dc:	10800617 	ldw	r2,24(r2)
 80011e0:	10800217 	ldw	r2,8(r2)
 80011e4:	e13fff17 	ldw	r4,-4(fp)
 80011e8:	103ee83a 	callr	r2
	/* Initialize the marker writer ... bit of a crock to do it here. */
	jinit_marker_writer(cinfo);
 80011ec:	e13fff17 	ldw	r4,-4(fp)
 80011f0:	800b0480 	call	800b048 <jinit_marker_writer>
	/* Write them tables! */
	(*cinfo->marker->write_tables_only) (cinfo);
 80011f4:	e0bfff17 	ldw	r2,-4(fp)
 80011f8:	10806017 	ldw	r2,384(r2)
 80011fc:	10800417 	ldw	r2,16(r2)
 8001200:	e13fff17 	ldw	r4,-4(fp)
 8001204:	103ee83a 	callr	r2
	/* And clean up. */
	(*cinfo->dest->term_destination) (cinfo);
 8001208:	e0bfff17 	ldw	r2,-4(fp)
 800120c:	10800617 	ldw	r2,24(r2)
 8001210:	10800417 	ldw	r2,16(r2)
 8001214:	e13fff17 	ldw	r4,-4(fp)
 8001218:	103ee83a 	callr	r2
	* compression cycle or otherwise resetting the JPEG object.  However, that
	* seems less bad than unexpectedly freeing memory in the normal case.
	* An app that prefers the old behavior can call jpeg_abort for itself after
	* each call to jpeg_write_tables().
	*/
}
 800121c:	e037883a 	mov	sp,fp
 8001220:	dfc00117 	ldw	ra,4(sp)
 8001224:	df000017 	ldw	fp,0(sp)
 8001228:	dec00204 	addi	sp,sp,8
 800122c:	f800283a 	ret

08001230 <jpeg_start_compress>:
* wrong thing.
*/

GLOBAL(void)
	jpeg_start_compress (j_compress_ptr cinfo, boolean write_all_tables)
{
 8001230:	defffc04 	addi	sp,sp,-16
 8001234:	dfc00315 	stw	ra,12(sp)
 8001238:	df000215 	stw	fp,8(sp)
 800123c:	df000204 	addi	fp,sp,8
 8001240:	e13ffe15 	stw	r4,-8(fp)
 8001244:	2805883a 	mov	r2,r5
 8001248:	e0bfff05 	stb	r2,-4(fp)
	if (cinfo->global_state != CSTATE_START)
 800124c:	e0bffe17 	ldw	r2,-8(fp)
 8001250:	10800517 	ldw	r2,20(r2)
 8001254:	10801920 	cmpeqi	r2,r2,100
 8001258:	10000e1e 	bne	r2,zero,8001294 <jpeg_start_compress+0x64>
		ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800125c:	e0bffe17 	ldw	r2,-8(fp)
 8001260:	10800017 	ldw	r2,0(r2)
 8001264:	00c00544 	movi	r3,21
 8001268:	10c00515 	stw	r3,20(r2)
 800126c:	e0bffe17 	ldw	r2,-8(fp)
 8001270:	10800017 	ldw	r2,0(r2)
 8001274:	e0fffe17 	ldw	r3,-8(fp)
 8001278:	18c00517 	ldw	r3,20(r3)
 800127c:	10c00615 	stw	r3,24(r2)
 8001280:	e0bffe17 	ldw	r2,-8(fp)
 8001284:	10800017 	ldw	r2,0(r2)
 8001288:	10800017 	ldw	r2,0(r2)
 800128c:	e13ffe17 	ldw	r4,-8(fp)
 8001290:	103ee83a 	callr	r2

	if (write_all_tables)
 8001294:	e0bfff03 	ldbu	r2,-4(fp)
 8001298:	10000326 	beq	r2,zero,80012a8 <jpeg_start_compress+0x78>
		jpeg_suppress_tables(cinfo, FALSE);	/* mark all tables to be written */
 800129c:	e13ffe17 	ldw	r4,-8(fp)
 80012a0:	000b883a 	mov	r5,zero
 80012a4:	8000c400 	call	8000c40 <jpeg_suppress_tables>

	/* (Re)initialize error mgr and destination modules */
	(*cinfo->err->reset_error_mgr) ((j_common_ptr) cinfo);
 80012a8:	e0bffe17 	ldw	r2,-8(fp)
 80012ac:	10800017 	ldw	r2,0(r2)
 80012b0:	10800417 	ldw	r2,16(r2)
 80012b4:	e13ffe17 	ldw	r4,-8(fp)
 80012b8:	103ee83a 	callr	r2
	(*cinfo->dest->init_destination) (cinfo);
 80012bc:	e0bffe17 	ldw	r2,-8(fp)
 80012c0:	10800617 	ldw	r2,24(r2)
 80012c4:	10800217 	ldw	r2,8(r2)
 80012c8:	e13ffe17 	ldw	r4,-8(fp)
 80012cc:	103ee83a 	callr	r2
	/* Perform master selection of active modules */
	jinit_compress_master(cinfo);
 80012d0:	e13ffe17 	ldw	r4,-8(fp)
 80012d4:	800984c0 	call	800984c <jinit_compress_master>
	/* Set up for the first pass */
	(*cinfo->master->prepare_for_pass) (cinfo);
 80012d8:	e0bffe17 	ldw	r2,-8(fp)
 80012dc:	10805c17 	ldw	r2,368(r2)
 80012e0:	10800017 	ldw	r2,0(r2)
 80012e4:	e13ffe17 	ldw	r4,-8(fp)
 80012e8:	103ee83a 	callr	r2
	/* Ready for application to drive first pass through jpeg_write_scanlines
	* or jpeg_write_raw_data.
	*/
	cinfo->next_scanline = 0;
 80012ec:	e0bffe17 	ldw	r2,-8(fp)
 80012f0:	10003c15 	stw	zero,240(r2)
	cinfo->global_state = (cinfo->raw_data_in ? CSTATE_RAW_OK : CSTATE_SCANNING);
 80012f4:	e0bffe17 	ldw	r2,-8(fp)
 80012f8:	10803303 	ldbu	r2,204(r2)
 80012fc:	10803fcc 	andi	r2,r2,255
 8001300:	10000226 	beq	r2,zero,800130c <jpeg_start_compress+0xdc>
 8001304:	00801984 	movi	r2,102
 8001308:	00000106 	br	8001310 <jpeg_start_compress+0xe0>
 800130c:	00801944 	movi	r2,101
 8001310:	e0fffe17 	ldw	r3,-8(fp)
 8001314:	18800515 	stw	r2,20(r3)
}
 8001318:	e037883a 	mov	sp,fp
 800131c:	dfc00117 	ldw	ra,4(sp)
 8001320:	df000017 	ldw	fp,0(sp)
 8001324:	dec00204 	addi	sp,sp,8
 8001328:	f800283a 	ret

0800132c <jpeg_write_scanlines>:
*/

GLOBAL(JDIMENSION)
	jpeg_write_scanlines (j_compress_ptr cinfo, JSAMPARRAY scanlines,
	JDIMENSION num_lines)
{
 800132c:	defff904 	addi	sp,sp,-28
 8001330:	dfc00615 	stw	ra,24(sp)
 8001334:	df000515 	stw	fp,20(sp)
 8001338:	df000504 	addi	fp,sp,20
 800133c:	e13ffd15 	stw	r4,-12(fp)
 8001340:	e17ffe15 	stw	r5,-8(fp)
 8001344:	e1bfff15 	stw	r6,-4(fp)
	JDIMENSION row_ctr, rows_left;

	if (cinfo->global_state != CSTATE_SCANNING)
 8001348:	e0bffd17 	ldw	r2,-12(fp)
 800134c:	10800517 	ldw	r2,20(r2)
 8001350:	10801960 	cmpeqi	r2,r2,101
 8001354:	10000e1e 	bne	r2,zero,8001390 <jpeg_write_scanlines+0x64>
		ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8001358:	e0bffd17 	ldw	r2,-12(fp)
 800135c:	10800017 	ldw	r2,0(r2)
 8001360:	00c00544 	movi	r3,21
 8001364:	10c00515 	stw	r3,20(r2)
 8001368:	e0bffd17 	ldw	r2,-12(fp)
 800136c:	10800017 	ldw	r2,0(r2)
 8001370:	e0fffd17 	ldw	r3,-12(fp)
 8001374:	18c00517 	ldw	r3,20(r3)
 8001378:	10c00615 	stw	r3,24(r2)
 800137c:	e0bffd17 	ldw	r2,-12(fp)
 8001380:	10800017 	ldw	r2,0(r2)
 8001384:	10800017 	ldw	r2,0(r2)
 8001388:	e13ffd17 	ldw	r4,-12(fp)
 800138c:	103ee83a 	callr	r2
	if (cinfo->next_scanline >= cinfo->image_height)
 8001390:	e0bffd17 	ldw	r2,-12(fp)
 8001394:	10c03c17 	ldw	r3,240(r2)
 8001398:	e0bffd17 	ldw	r2,-12(fp)
 800139c:	10800817 	ldw	r2,32(r2)
 80013a0:	18800a36 	bltu	r3,r2,80013cc <jpeg_write_scanlines+0xa0>
		WARNMS(cinfo, JWRN_TOO_MUCH_DATA);
 80013a4:	e0bffd17 	ldw	r2,-12(fp)
 80013a8:	10800017 	ldw	r2,0(r2)
 80013ac:	00c01f84 	movi	r3,126
 80013b0:	10c00515 	stw	r3,20(r2)
 80013b4:	e0bffd17 	ldw	r2,-12(fp)
 80013b8:	10800017 	ldw	r2,0(r2)
 80013bc:	10800117 	ldw	r2,4(r2)
 80013c0:	e13ffd17 	ldw	r4,-12(fp)
 80013c4:	017fffc4 	movi	r5,-1
 80013c8:	103ee83a 	callr	r2

	/* Call progress monitor hook if present */
	if (cinfo->progress != NULL) {
 80013cc:	e0bffd17 	ldw	r2,-12(fp)
 80013d0:	10800217 	ldw	r2,8(r2)
 80013d4:	10000f26 	beq	r2,zero,8001414 <jpeg_write_scanlines+0xe8>
		cinfo->progress->pass_counter = (long) cinfo->next_scanline;
 80013d8:	e0bffd17 	ldw	r2,-12(fp)
 80013dc:	10800217 	ldw	r2,8(r2)
 80013e0:	e0fffd17 	ldw	r3,-12(fp)
 80013e4:	18c03c17 	ldw	r3,240(r3)
 80013e8:	10c00115 	stw	r3,4(r2)
		cinfo->progress->pass_limit = (long) cinfo->image_height;
 80013ec:	e0bffd17 	ldw	r2,-12(fp)
 80013f0:	10800217 	ldw	r2,8(r2)
 80013f4:	e0fffd17 	ldw	r3,-12(fp)
 80013f8:	18c00817 	ldw	r3,32(r3)
 80013fc:	10c00215 	stw	r3,8(r2)
		(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 8001400:	e0bffd17 	ldw	r2,-12(fp)
 8001404:	10800217 	ldw	r2,8(r2)
 8001408:	10800017 	ldw	r2,0(r2)
 800140c:	e13ffd17 	ldw	r4,-12(fp)
 8001410:	103ee83a 	callr	r2
	/* Give master control module another chance if this is first call to
	* jpeg_write_scanlines.  This lets output of the frame/scan headers be
	* delayed so that application can write COM, etc, markers between
	* jpeg_start_compress and jpeg_write_scanlines.
	*/
	if (cinfo->master->call_pass_startup)
 8001414:	e0bffd17 	ldw	r2,-12(fp)
 8001418:	10805c17 	ldw	r2,368(r2)
 800141c:	10800303 	ldbu	r2,12(r2)
 8001420:	10803fcc 	andi	r2,r2,255
 8001424:	10000526 	beq	r2,zero,800143c <jpeg_write_scanlines+0x110>
		(*cinfo->master->pass_startup) (cinfo);
 8001428:	e0bffd17 	ldw	r2,-12(fp)
 800142c:	10805c17 	ldw	r2,368(r2)
 8001430:	10800117 	ldw	r2,4(r2)
 8001434:	e13ffd17 	ldw	r4,-12(fp)
 8001438:	103ee83a 	callr	r2

	/* Ignore any extra scanlines at bottom of image. */
	rows_left = cinfo->image_height - cinfo->next_scanline;
 800143c:	e0bffd17 	ldw	r2,-12(fp)
 8001440:	10c00817 	ldw	r3,32(r2)
 8001444:	e0bffd17 	ldw	r2,-12(fp)
 8001448:	10803c17 	ldw	r2,240(r2)
 800144c:	1885c83a 	sub	r2,r3,r2
 8001450:	e0bffb15 	stw	r2,-20(fp)
	if (num_lines > rows_left)
 8001454:	e0bfff17 	ldw	r2,-4(fp)
 8001458:	e0fffb17 	ldw	r3,-20(fp)
 800145c:	1880022e 	bgeu	r3,r2,8001468 <jpeg_write_scanlines+0x13c>
		num_lines = rows_left;
 8001460:	e0bffb17 	ldw	r2,-20(fp)
 8001464:	e0bfff15 	stw	r2,-4(fp)

	row_ctr = 0;
 8001468:	e03ffc15 	stw	zero,-16(fp)
	(*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, num_lines);
 800146c:	e0bffd17 	ldw	r2,-12(fp)
 8001470:	10805d17 	ldw	r2,372(r2)
 8001474:	10c00117 	ldw	r3,4(r2)
 8001478:	e0bffc04 	addi	r2,fp,-16
 800147c:	e13ffd17 	ldw	r4,-12(fp)
 8001480:	e17ffe17 	ldw	r5,-8(fp)
 8001484:	100d883a 	mov	r6,r2
 8001488:	e1ffff17 	ldw	r7,-4(fp)
 800148c:	183ee83a 	callr	r3
	cinfo->next_scanline += row_ctr;
 8001490:	e0bffd17 	ldw	r2,-12(fp)
 8001494:	10c03c17 	ldw	r3,240(r2)
 8001498:	e0bffc17 	ldw	r2,-16(fp)
 800149c:	1887883a 	add	r3,r3,r2
 80014a0:	e0bffd17 	ldw	r2,-12(fp)
 80014a4:	10c03c15 	stw	r3,240(r2)
	return row_ctr;
 80014a8:	e0bffc17 	ldw	r2,-16(fp)
}
 80014ac:	e037883a 	mov	sp,fp
 80014b0:	dfc00117 	ldw	ra,4(sp)
 80014b4:	df000017 	ldw	fp,0(sp)
 80014b8:	dec00204 	addi	sp,sp,8
 80014bc:	f800283a 	ret

080014c0 <jpeg_write_raw_data>:
*/

GLOBAL(JDIMENSION)
	jpeg_write_raw_data (j_compress_ptr cinfo, JSAMPIMAGE data,
	JDIMENSION num_lines)
{
 80014c0:	defffa04 	addi	sp,sp,-24
 80014c4:	dfc00515 	stw	ra,20(sp)
 80014c8:	df000415 	stw	fp,16(sp)
 80014cc:	df000404 	addi	fp,sp,16
 80014d0:	e13ffd15 	stw	r4,-12(fp)
 80014d4:	e17ffe15 	stw	r5,-8(fp)
 80014d8:	e1bfff15 	stw	r6,-4(fp)
	JDIMENSION lines_per_iMCU_row;

	if (cinfo->global_state != CSTATE_RAW_OK)
 80014dc:	e0bffd17 	ldw	r2,-12(fp)
 80014e0:	10800517 	ldw	r2,20(r2)
 80014e4:	108019a0 	cmpeqi	r2,r2,102
 80014e8:	10000e1e 	bne	r2,zero,8001524 <jpeg_write_raw_data+0x64>
		ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 80014ec:	e0bffd17 	ldw	r2,-12(fp)
 80014f0:	10800017 	ldw	r2,0(r2)
 80014f4:	00c00544 	movi	r3,21
 80014f8:	10c00515 	stw	r3,20(r2)
 80014fc:	e0bffd17 	ldw	r2,-12(fp)
 8001500:	10800017 	ldw	r2,0(r2)
 8001504:	e0fffd17 	ldw	r3,-12(fp)
 8001508:	18c00517 	ldw	r3,20(r3)
 800150c:	10c00615 	stw	r3,24(r2)
 8001510:	e0bffd17 	ldw	r2,-12(fp)
 8001514:	10800017 	ldw	r2,0(r2)
 8001518:	10800017 	ldw	r2,0(r2)
 800151c:	e13ffd17 	ldw	r4,-12(fp)
 8001520:	103ee83a 	callr	r2
	if (cinfo->next_scanline >= cinfo->image_height) {
 8001524:	e0bffd17 	ldw	r2,-12(fp)
 8001528:	10c03c17 	ldw	r3,240(r2)
 800152c:	e0bffd17 	ldw	r2,-12(fp)
 8001530:	10800817 	ldw	r2,32(r2)
 8001534:	18800c36 	bltu	r3,r2,8001568 <jpeg_write_raw_data+0xa8>
		WARNMS(cinfo, JWRN_TOO_MUCH_DATA);
 8001538:	e0bffd17 	ldw	r2,-12(fp)
 800153c:	10800017 	ldw	r2,0(r2)
 8001540:	00c01f84 	movi	r3,126
 8001544:	10c00515 	stw	r3,20(r2)
 8001548:	e0bffd17 	ldw	r2,-12(fp)
 800154c:	10800017 	ldw	r2,0(r2)
 8001550:	10800117 	ldw	r2,4(r2)
 8001554:	e13ffd17 	ldw	r4,-12(fp)
 8001558:	017fffc4 	movi	r5,-1
 800155c:	103ee83a 	callr	r2
		return 0;
 8001560:	0005883a 	mov	r2,zero
 8001564:	00003d06 	br	800165c <jpeg_write_raw_data+0x19c>
	}

	/* Call progress monitor hook if present */
	if (cinfo->progress != NULL) {
 8001568:	e0bffd17 	ldw	r2,-12(fp)
 800156c:	10800217 	ldw	r2,8(r2)
 8001570:	10000f26 	beq	r2,zero,80015b0 <jpeg_write_raw_data+0xf0>
		cinfo->progress->pass_counter = (long) cinfo->next_scanline;
 8001574:	e0bffd17 	ldw	r2,-12(fp)
 8001578:	10800217 	ldw	r2,8(r2)
 800157c:	e0fffd17 	ldw	r3,-12(fp)
 8001580:	18c03c17 	ldw	r3,240(r3)
 8001584:	10c00115 	stw	r3,4(r2)
		cinfo->progress->pass_limit = (long) cinfo->image_height;
 8001588:	e0bffd17 	ldw	r2,-12(fp)
 800158c:	10800217 	ldw	r2,8(r2)
 8001590:	e0fffd17 	ldw	r3,-12(fp)
 8001594:	18c00817 	ldw	r3,32(r3)
 8001598:	10c00215 	stw	r3,8(r2)
		(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 800159c:	e0bffd17 	ldw	r2,-12(fp)
 80015a0:	10800217 	ldw	r2,8(r2)
 80015a4:	10800017 	ldw	r2,0(r2)
 80015a8:	e13ffd17 	ldw	r4,-12(fp)
 80015ac:	103ee83a 	callr	r2
	/* Give master control module another chance if this is first call to
	* jpeg_write_raw_data.  This lets output of the frame/scan headers be
	* delayed so that application can write COM, etc, markers between
	* jpeg_start_compress and jpeg_write_raw_data.
	*/
	if (cinfo->master->call_pass_startup)
 80015b0:	e0bffd17 	ldw	r2,-12(fp)
 80015b4:	10805c17 	ldw	r2,368(r2)
 80015b8:	10800303 	ldbu	r2,12(r2)
 80015bc:	10803fcc 	andi	r2,r2,255
 80015c0:	10000526 	beq	r2,zero,80015d8 <jpeg_write_raw_data+0x118>
		(*cinfo->master->pass_startup) (cinfo);
 80015c4:	e0bffd17 	ldw	r2,-12(fp)
 80015c8:	10805c17 	ldw	r2,368(r2)
 80015cc:	10800117 	ldw	r2,4(r2)
 80015d0:	e13ffd17 	ldw	r4,-12(fp)
 80015d4:	103ee83a 	callr	r2

	/* Verify that at least one iMCU row has been passed. */
	lines_per_iMCU_row = cinfo->max_v_samp_factor * DCTSIZE;
 80015d8:	e0bffd17 	ldw	r2,-12(fp)
 80015dc:	10803f17 	ldw	r2,252(r2)
 80015e0:	100490fa 	slli	r2,r2,3
 80015e4:	e0bffc15 	stw	r2,-16(fp)
	if (num_lines < lines_per_iMCU_row)
 80015e8:	e0ffff17 	ldw	r3,-4(fp)
 80015ec:	e0bffc17 	ldw	r2,-16(fp)
 80015f0:	1880092e 	bgeu	r3,r2,8001618 <jpeg_write_raw_data+0x158>
		ERREXIT(cinfo, JERR_BUFFER_SIZE);
 80015f4:	e0bffd17 	ldw	r2,-12(fp)
 80015f8:	10800017 	ldw	r2,0(r2)
 80015fc:	00c00604 	movi	r3,24
 8001600:	10c00515 	stw	r3,20(r2)
 8001604:	e0bffd17 	ldw	r2,-12(fp)
 8001608:	10800017 	ldw	r2,0(r2)
 800160c:	10800017 	ldw	r2,0(r2)
 8001610:	e13ffd17 	ldw	r4,-12(fp)
 8001614:	103ee83a 	callr	r2

	/* Directly compress the row. */
	if (! (*cinfo->coef->compress_data) (cinfo, data)) {
 8001618:	e0bffd17 	ldw	r2,-12(fp)
 800161c:	10805f17 	ldw	r2,380(r2)
 8001620:	10800117 	ldw	r2,4(r2)
 8001624:	e13ffd17 	ldw	r4,-12(fp)
 8001628:	e17ffe17 	ldw	r5,-8(fp)
 800162c:	103ee83a 	callr	r2
 8001630:	10803fcc 	andi	r2,r2,255
 8001634:	1000021e 	bne	r2,zero,8001640 <jpeg_write_raw_data+0x180>
		/* If compressor did not consume the whole row, suspend processing. */
		return 0;
 8001638:	0005883a 	mov	r2,zero
 800163c:	00000706 	br	800165c <jpeg_write_raw_data+0x19c>
	}

	/* OK, we processed one iMCU row. */
	cinfo->next_scanline += lines_per_iMCU_row;
 8001640:	e0bffd17 	ldw	r2,-12(fp)
 8001644:	10c03c17 	ldw	r3,240(r2)
 8001648:	e0bffc17 	ldw	r2,-16(fp)
 800164c:	1887883a 	add	r3,r3,r2
 8001650:	e0bffd17 	ldw	r2,-12(fp)
 8001654:	10c03c15 	stw	r3,240(r2)
	return lines_per_iMCU_row;
 8001658:	e0bffc17 	ldw	r2,-16(fp)
}
 800165c:	e037883a 	mov	sp,fp
 8001660:	dfc00117 	ldw	ra,4(sp)
 8001664:	df000017 	ldw	fp,0(sp)
 8001668:	dec00204 	addi	sp,sp,8
 800166c:	f800283a 	ret

08001670 <emit_byte>:


LOCAL(void)
	emit_byte (int val, j_compress_ptr cinfo)
	/* Write next output byte; we do not support suspension in this module. */
{
 8001670:	defffb04 	addi	sp,sp,-20
 8001674:	dfc00415 	stw	ra,16(sp)
 8001678:	df000315 	stw	fp,12(sp)
 800167c:	df000304 	addi	fp,sp,12
 8001680:	e13ffe15 	stw	r4,-8(fp)
 8001684:	e17fff15 	stw	r5,-4(fp)
	struct jpeg_destination_mgr * dest = cinfo->dest;
 8001688:	e0bfff17 	ldw	r2,-4(fp)
 800168c:	10800617 	ldw	r2,24(r2)
 8001690:	e0bffd15 	stw	r2,-12(fp)

	*dest->next_output_byte++ = (JOCTET) val;
 8001694:	e0bffd17 	ldw	r2,-12(fp)
 8001698:	10800017 	ldw	r2,0(r2)
 800169c:	e0fffe17 	ldw	r3,-8(fp)
 80016a0:	10c00005 	stb	r3,0(r2)
 80016a4:	10c00044 	addi	r3,r2,1
 80016a8:	e0bffd17 	ldw	r2,-12(fp)
 80016ac:	10c00015 	stw	r3,0(r2)
	if (--dest->free_in_buffer == 0)
 80016b0:	e0bffd17 	ldw	r2,-12(fp)
 80016b4:	10800117 	ldw	r2,4(r2)
 80016b8:	10ffffc4 	addi	r3,r2,-1
 80016bc:	e0bffd17 	ldw	r2,-12(fp)
 80016c0:	10c00115 	stw	r3,4(r2)
 80016c4:	e0bffd17 	ldw	r2,-12(fp)
 80016c8:	10800117 	ldw	r2,4(r2)
 80016cc:	10000f1e 	bne	r2,zero,800170c <emit_byte+0x9c>
		if (! (*dest->empty_output_buffer) (cinfo))
 80016d0:	e0bffd17 	ldw	r2,-12(fp)
 80016d4:	10800317 	ldw	r2,12(r2)
 80016d8:	e13fff17 	ldw	r4,-4(fp)
 80016dc:	103ee83a 	callr	r2
 80016e0:	10803fcc 	andi	r2,r2,255
 80016e4:	1000091e 	bne	r2,zero,800170c <emit_byte+0x9c>
			ERREXIT(cinfo, JERR_CANT_SUSPEND);
 80016e8:	e0bfff17 	ldw	r2,-4(fp)
 80016ec:	10800017 	ldw	r2,0(r2)
 80016f0:	00c00644 	movi	r3,25
 80016f4:	10c00515 	stw	r3,20(r2)
 80016f8:	e0bfff17 	ldw	r2,-4(fp)
 80016fc:	10800017 	ldw	r2,0(r2)
 8001700:	10800017 	ldw	r2,0(r2)
 8001704:	e13fff17 	ldw	r4,-4(fp)
 8001708:	103ee83a 	callr	r2
}
 800170c:	e037883a 	mov	sp,fp
 8001710:	dfc00117 	ldw	ra,4(sp)
 8001714:	df000017 	ldw	fp,0(sp)
 8001718:	dec00204 	addi	sp,sp,8
 800171c:	f800283a 	ret

08001720 <finish_pass>:
* Finish up at the end of an arithmetic-compressed scan.
*/

METHODDEF(void)
	finish_pass (j_compress_ptr cinfo)
{
 8001720:	defffb04 	addi	sp,sp,-20
 8001724:	dfc00415 	stw	ra,16(sp)
 8001728:	df000315 	stw	fp,12(sp)
 800172c:	df000304 	addi	fp,sp,12
 8001730:	e13fff15 	stw	r4,-4(fp)
	arith_entropy_ptr e = (arith_entropy_ptr) cinfo->entropy;
 8001734:	e0bfff17 	ldw	r2,-4(fp)
 8001738:	10806417 	ldw	r2,400(r2)
 800173c:	e0bffd15 	stw	r2,-12(fp)

	/* Section D.1.8: Termination of encoding */

	/* Find the e->c in the coding interval with the largest
	* number of trailing zero bits */
	if ((temp = (e->a - 1 + e->c) & 0xFFFF0000L) < e->c)
 8001740:	e0bffd17 	ldw	r2,-12(fp)
 8001744:	10800417 	ldw	r2,16(r2)
 8001748:	10ffffc4 	addi	r3,r2,-1
 800174c:	e0bffd17 	ldw	r2,-12(fp)
 8001750:	10800317 	ldw	r2,12(r2)
 8001754:	1885883a 	add	r2,r3,r2
 8001758:	10bfffec 	andhi	r2,r2,65535
 800175c:	e0bffe15 	stw	r2,-8(fp)
 8001760:	e0bffd17 	ldw	r2,-12(fp)
 8001764:	10800317 	ldw	r2,12(r2)
 8001768:	e0fffe17 	ldw	r3,-8(fp)
 800176c:	1880060e 	bge	r3,r2,8001788 <finish_pass+0x68>
		e->c = temp + 0x8000L;
 8001770:	e0fffe17 	ldw	r3,-8(fp)
 8001774:	00a00014 	movui	r2,32768
 8001778:	1887883a 	add	r3,r3,r2
 800177c:	e0bffd17 	ldw	r2,-12(fp)
 8001780:	10c00315 	stw	r3,12(r2)
 8001784:	00000306 	br	8001794 <finish_pass+0x74>
	else
		e->c = temp;
 8001788:	e0bffd17 	ldw	r2,-12(fp)
 800178c:	e0fffe17 	ldw	r3,-8(fp)
 8001790:	10c00315 	stw	r3,12(r2)
	/* Send remaining bytes to output */
	e->c <<= e->ct;
 8001794:	e0bffd17 	ldw	r2,-12(fp)
 8001798:	10c00317 	ldw	r3,12(r2)
 800179c:	e0bffd17 	ldw	r2,-12(fp)
 80017a0:	10800717 	ldw	r2,28(r2)
 80017a4:	1886983a 	sll	r3,r3,r2
 80017a8:	e0bffd17 	ldw	r2,-12(fp)
 80017ac:	10c00315 	stw	r3,12(r2)
	if (e->c & 0xF8000000L) {
 80017b0:	e0bffd17 	ldw	r2,-12(fp)
 80017b4:	10800317 	ldw	r2,12(r2)
 80017b8:	10be002c 	andhi	r2,r2,63488
 80017bc:	10002826 	beq	r2,zero,8001860 <finish_pass+0x140>
		/* One final overflow has to be handled */
		if (e->buffer >= 0) {
 80017c0:	e0bffd17 	ldw	r2,-12(fp)
 80017c4:	10800817 	ldw	r2,32(r2)
 80017c8:	10001b16 	blt	r2,zero,8001838 <finish_pass+0x118>
			if (e->zc)
 80017cc:	e0bffd17 	ldw	r2,-12(fp)
 80017d0:	10800617 	ldw	r2,24(r2)
 80017d4:	10000b26 	beq	r2,zero,8001804 <finish_pass+0xe4>
				do emit_byte(0x00, cinfo);
 80017d8:	0009883a 	mov	r4,zero
 80017dc:	e17fff17 	ldw	r5,-4(fp)
 80017e0:	80016700 	call	8001670 <emit_byte>
			while (--e->zc);
 80017e4:	e0bffd17 	ldw	r2,-12(fp)
 80017e8:	10800617 	ldw	r2,24(r2)
 80017ec:	10ffffc4 	addi	r3,r2,-1
 80017f0:	e0bffd17 	ldw	r2,-12(fp)
 80017f4:	10c00615 	stw	r3,24(r2)
 80017f8:	e0bffd17 	ldw	r2,-12(fp)
 80017fc:	10800617 	ldw	r2,24(r2)
 8001800:	103ff51e 	bne	r2,zero,80017d8 <finish_pass+0xb8>
			emit_byte(e->buffer + 1, cinfo);
 8001804:	e0bffd17 	ldw	r2,-12(fp)
 8001808:	10800817 	ldw	r2,32(r2)
 800180c:	10800044 	addi	r2,r2,1
 8001810:	1009883a 	mov	r4,r2
 8001814:	e17fff17 	ldw	r5,-4(fp)
 8001818:	80016700 	call	8001670 <emit_byte>
			if (e->buffer + 1 == 0xFF)
 800181c:	e0bffd17 	ldw	r2,-12(fp)
 8001820:	10800817 	ldw	r2,32(r2)
 8001824:	10803f98 	cmpnei	r2,r2,254
 8001828:	1000031e 	bne	r2,zero,8001838 <finish_pass+0x118>
				emit_byte(0x00, cinfo);
 800182c:	0009883a 	mov	r4,zero
 8001830:	e17fff17 	ldw	r5,-4(fp)
 8001834:	80016700 	call	8001670 <emit_byte>
		}
		e->zc += e->sc;  /* carry-over converts stacked 0xFF bytes to 0x00 */
 8001838:	e0bffd17 	ldw	r2,-12(fp)
 800183c:	10c00617 	ldw	r3,24(r2)
 8001840:	e0bffd17 	ldw	r2,-12(fp)
 8001844:	10800517 	ldw	r2,20(r2)
 8001848:	1887883a 	add	r3,r3,r2
 800184c:	e0bffd17 	ldw	r2,-12(fp)
 8001850:	10c00615 	stw	r3,24(r2)
		e->sc = 0;
 8001854:	e0bffd17 	ldw	r2,-12(fp)
 8001858:	10000515 	stw	zero,20(r2)
 800185c:	00003e06 	br	8001958 <finish_pass+0x238>
	} else {
		if (e->buffer == 0)
 8001860:	e0bffd17 	ldw	r2,-12(fp)
 8001864:	10800817 	ldw	r2,32(r2)
 8001868:	1000061e 	bne	r2,zero,8001884 <finish_pass+0x164>
			++e->zc;
 800186c:	e0bffd17 	ldw	r2,-12(fp)
 8001870:	10800617 	ldw	r2,24(r2)
 8001874:	10c00044 	addi	r3,r2,1
 8001878:	e0bffd17 	ldw	r2,-12(fp)
 800187c:	10c00615 	stw	r3,24(r2)
 8001880:	00001606 	br	80018dc <finish_pass+0x1bc>
		else if (e->buffer >= 0) {
 8001884:	e0bffd17 	ldw	r2,-12(fp)
 8001888:	10800817 	ldw	r2,32(r2)
 800188c:	10001316 	blt	r2,zero,80018dc <finish_pass+0x1bc>
			if (e->zc)
 8001890:	e0bffd17 	ldw	r2,-12(fp)
 8001894:	10800617 	ldw	r2,24(r2)
 8001898:	10000b26 	beq	r2,zero,80018c8 <finish_pass+0x1a8>
				do emit_byte(0x00, cinfo);
 800189c:	0009883a 	mov	r4,zero
 80018a0:	e17fff17 	ldw	r5,-4(fp)
 80018a4:	80016700 	call	8001670 <emit_byte>
			while (--e->zc);
 80018a8:	e0bffd17 	ldw	r2,-12(fp)
 80018ac:	10800617 	ldw	r2,24(r2)
 80018b0:	10ffffc4 	addi	r3,r2,-1
 80018b4:	e0bffd17 	ldw	r2,-12(fp)
 80018b8:	10c00615 	stw	r3,24(r2)
 80018bc:	e0bffd17 	ldw	r2,-12(fp)
 80018c0:	10800617 	ldw	r2,24(r2)
 80018c4:	103ff51e 	bne	r2,zero,800189c <finish_pass+0x17c>
			emit_byte(e->buffer, cinfo);
 80018c8:	e0bffd17 	ldw	r2,-12(fp)
 80018cc:	10800817 	ldw	r2,32(r2)
 80018d0:	1009883a 	mov	r4,r2
 80018d4:	e17fff17 	ldw	r5,-4(fp)
 80018d8:	80016700 	call	8001670 <emit_byte>
		}
		if (e->sc) {
 80018dc:	e0bffd17 	ldw	r2,-12(fp)
 80018e0:	10800517 	ldw	r2,20(r2)
 80018e4:	10001c26 	beq	r2,zero,8001958 <finish_pass+0x238>
			if (e->zc)
 80018e8:	e0bffd17 	ldw	r2,-12(fp)
 80018ec:	10800617 	ldw	r2,24(r2)
 80018f0:	10000b26 	beq	r2,zero,8001920 <finish_pass+0x200>
				do emit_byte(0x00, cinfo);
 80018f4:	0009883a 	mov	r4,zero
 80018f8:	e17fff17 	ldw	r5,-4(fp)
 80018fc:	80016700 	call	8001670 <emit_byte>
			while (--e->zc);
 8001900:	e0bffd17 	ldw	r2,-12(fp)
 8001904:	10800617 	ldw	r2,24(r2)
 8001908:	10ffffc4 	addi	r3,r2,-1
 800190c:	e0bffd17 	ldw	r2,-12(fp)
 8001910:	10c00615 	stw	r3,24(r2)
 8001914:	e0bffd17 	ldw	r2,-12(fp)
 8001918:	10800617 	ldw	r2,24(r2)
 800191c:	103ff51e 	bne	r2,zero,80018f4 <finish_pass+0x1d4>
			do {
				emit_byte(0xFF, cinfo);
 8001920:	01003fc4 	movi	r4,255
 8001924:	e17fff17 	ldw	r5,-4(fp)
 8001928:	80016700 	call	8001670 <emit_byte>
				emit_byte(0x00, cinfo);
 800192c:	0009883a 	mov	r4,zero
 8001930:	e17fff17 	ldw	r5,-4(fp)
 8001934:	80016700 	call	8001670 <emit_byte>
			} while (--e->sc);
 8001938:	e0bffd17 	ldw	r2,-12(fp)
 800193c:	10800517 	ldw	r2,20(r2)
 8001940:	10ffffc4 	addi	r3,r2,-1
 8001944:	e0bffd17 	ldw	r2,-12(fp)
 8001948:	10c00515 	stw	r3,20(r2)
 800194c:	e0bffd17 	ldw	r2,-12(fp)
 8001950:	10800517 	ldw	r2,20(r2)
 8001954:	103ff21e 	bne	r2,zero,8001920 <finish_pass+0x200>
		}
	}
	/* Output final bytes only if they are not 0x00 */
	if (e->c & 0x7FFF800L) {
 8001958:	e0bffd17 	ldw	r2,-12(fp)
 800195c:	10c00317 	ldw	r3,12(r2)
 8001960:	00820034 	movhi	r2,2048
 8001964:	10be0004 	addi	r2,r2,-2048
 8001968:	1884703a 	and	r2,r3,r2
 800196c:	10003426 	beq	r2,zero,8001a40 <finish_pass+0x320>
		if (e->zc)  /* output final pending zero bytes */
 8001970:	e0bffd17 	ldw	r2,-12(fp)
 8001974:	10800617 	ldw	r2,24(r2)
 8001978:	10000b26 	beq	r2,zero,80019a8 <finish_pass+0x288>
			do emit_byte(0x00, cinfo);
 800197c:	0009883a 	mov	r4,zero
 8001980:	e17fff17 	ldw	r5,-4(fp)
 8001984:	80016700 	call	8001670 <emit_byte>
		while (--e->zc);
 8001988:	e0bffd17 	ldw	r2,-12(fp)
 800198c:	10800617 	ldw	r2,24(r2)
 8001990:	10ffffc4 	addi	r3,r2,-1
 8001994:	e0bffd17 	ldw	r2,-12(fp)
 8001998:	10c00615 	stw	r3,24(r2)
 800199c:	e0bffd17 	ldw	r2,-12(fp)
 80019a0:	10800617 	ldw	r2,24(r2)
 80019a4:	103ff51e 	bne	r2,zero,800197c <finish_pass+0x25c>
		emit_byte((e->c >> 19) & 0xFF, cinfo);
 80019a8:	e0bffd17 	ldw	r2,-12(fp)
 80019ac:	10800317 	ldw	r2,12(r2)
 80019b0:	1005d4fa 	srai	r2,r2,19
 80019b4:	10803fcc 	andi	r2,r2,255
 80019b8:	1009883a 	mov	r4,r2
 80019bc:	e17fff17 	ldw	r5,-4(fp)
 80019c0:	80016700 	call	8001670 <emit_byte>
		if (((e->c >> 19) & 0xFF) == 0xFF)
 80019c4:	e0bffd17 	ldw	r2,-12(fp)
 80019c8:	10800317 	ldw	r2,12(r2)
 80019cc:	1005d4fa 	srai	r2,r2,19
 80019d0:	10803fcc 	andi	r2,r2,255
 80019d4:	10803fd8 	cmpnei	r2,r2,255
 80019d8:	1000031e 	bne	r2,zero,80019e8 <finish_pass+0x2c8>
			emit_byte(0x00, cinfo);
 80019dc:	0009883a 	mov	r4,zero
 80019e0:	e17fff17 	ldw	r5,-4(fp)
 80019e4:	80016700 	call	8001670 <emit_byte>
		if (e->c & 0x7F800L) {
 80019e8:	e0bffd17 	ldw	r2,-12(fp)
 80019ec:	10c00317 	ldw	r3,12(r2)
 80019f0:	00800234 	movhi	r2,8
 80019f4:	10be0004 	addi	r2,r2,-2048
 80019f8:	1884703a 	and	r2,r3,r2
 80019fc:	10001026 	beq	r2,zero,8001a40 <finish_pass+0x320>
			emit_byte((e->c >> 11) & 0xFF, cinfo);
 8001a00:	e0bffd17 	ldw	r2,-12(fp)
 8001a04:	10800317 	ldw	r2,12(r2)
 8001a08:	1005d2fa 	srai	r2,r2,11
 8001a0c:	10803fcc 	andi	r2,r2,255
 8001a10:	1009883a 	mov	r4,r2
 8001a14:	e17fff17 	ldw	r5,-4(fp)
 8001a18:	80016700 	call	8001670 <emit_byte>
			if (((e->c >> 11) & 0xFF) == 0xFF)
 8001a1c:	e0bffd17 	ldw	r2,-12(fp)
 8001a20:	10800317 	ldw	r2,12(r2)
 8001a24:	1005d2fa 	srai	r2,r2,11
 8001a28:	10803fcc 	andi	r2,r2,255
 8001a2c:	10803fd8 	cmpnei	r2,r2,255
 8001a30:	1000031e 	bne	r2,zero,8001a40 <finish_pass+0x320>
				emit_byte(0x00, cinfo);
 8001a34:	0009883a 	mov	r4,zero
 8001a38:	e17fff17 	ldw	r5,-4(fp)
 8001a3c:	80016700 	call	8001670 <emit_byte>
		}
	}
}
 8001a40:	e037883a 	mov	sp,fp
 8001a44:	dfc00117 	ldw	ra,4(sp)
 8001a48:	df000017 	ldw	fp,0(sp)
 8001a4c:	dec00204 	addi	sp,sp,8
 8001a50:	f800283a 	ret

08001a54 <arith_encode>:
* derived from Markus Kuhn's JBIG implementation.
*/

LOCAL(void)
	arith_encode (j_compress_ptr cinfo, unsigned char *st, int val) 
{
 8001a54:	defff604 	addi	sp,sp,-40
 8001a58:	dfc00915 	stw	ra,36(sp)
 8001a5c:	df000815 	stw	fp,32(sp)
 8001a60:	dd000715 	stw	r20,28(sp)
 8001a64:	dcc00615 	stw	r19,24(sp)
 8001a68:	dc800515 	stw	r18,20(sp)
 8001a6c:	dc400415 	stw	r17,16(sp)
 8001a70:	dc000315 	stw	r16,12(sp)
 8001a74:	df000304 	addi	fp,sp,12
 8001a78:	e13ffd15 	stw	r4,-12(fp)
 8001a7c:	e17ffe15 	stw	r5,-8(fp)
 8001a80:	e1bfff15 	stw	r6,-4(fp)
	register arith_entropy_ptr e = (arith_entropy_ptr) cinfo->entropy;
 8001a84:	e0bffd17 	ldw	r2,-12(fp)
 8001a88:	14006417 	ldw	r16,400(r2)
	register int sv;

	/* Fetch values from our compact representation of Table D.2:
	* Qe values and probability estimation state machine
	*/
	sv = *st;
 8001a8c:	e0bffe17 	ldw	r2,-8(fp)
 8001a90:	10800003 	ldbu	r2,0(r2)
 8001a94:	14803fcc 	andi	r18,r2,255
	qe = jpeg_aritab[sv & 0x7F];	/* => Qe_Value */
 8001a98:	90801fcc 	andi	r2,r18,127
 8001a9c:	00c20134 	movhi	r3,2052
 8001aa0:	18fbac04 	addi	r3,r3,-4432
 8001aa4:	1085883a 	add	r2,r2,r2
 8001aa8:	1085883a 	add	r2,r2,r2
 8001aac:	1885883a 	add	r2,r3,r2
 8001ab0:	14400017 	ldw	r17,0(r2)
	nl = qe & 0xFF; qe >>= 8;	/* Next_Index_LPS + Switch_MPS */
 8001ab4:	8829883a 	mov	r20,r17
 8001ab8:	8823d23a 	srai	r17,r17,8
	nm = qe & 0xFF; qe >>= 8;	/* Next_Index_MPS */
 8001abc:	8827883a 	mov	r19,r17
 8001ac0:	8823d23a 	srai	r17,r17,8

	/* Encode & estimation procedures per sections D.1.4 & D.1.5 */
	e->a -= qe;
 8001ac4:	80800417 	ldw	r2,16(r16)
 8001ac8:	1445c83a 	sub	r2,r2,r17
 8001acc:	80800415 	stw	r2,16(r16)
	if (val != (sv >> 7)) {
 8001ad0:	9007d1fa 	srai	r3,r18,7
 8001ad4:	e0bfff17 	ldw	r2,-4(fp)
 8001ad8:	18801126 	beq	r3,r2,8001b20 <arith_encode+0xcc>
		/* Encode the less probable symbol */
		if (e->a >= qe) {
 8001adc:	80800417 	ldw	r2,16(r16)
 8001ae0:	14400516 	blt	r2,r17,8001af8 <arith_encode+0xa4>
			/* If the interval size (qe) for the less probable symbol (LPS)
			* is larger than the interval size for the MPS, then exchange
			* the two symbols for coding efficiency, otherwise code the LPS
			* as usual: */
			e->c += e->a;
 8001ae4:	80c00317 	ldw	r3,12(r16)
 8001ae8:	80800417 	ldw	r2,16(r16)
 8001aec:	1885883a 	add	r2,r3,r2
 8001af0:	80800315 	stw	r2,12(r16)
			e->a = qe;
 8001af4:	84400415 	stw	r17,16(r16)
		}
		*st = (sv & 0x80) ^ nl;	/* Estimate_after_LPS */
 8001af8:	9007883a 	mov	r3,r18
 8001afc:	00bfe004 	movi	r2,-128
 8001b00:	1884703a 	and	r2,r3,r2
 8001b04:	1007883a 	mov	r3,r2
 8001b08:	a005883a 	mov	r2,r20
 8001b0c:	1884f03a 	xor	r2,r3,r2
 8001b10:	1007883a 	mov	r3,r2
 8001b14:	e0bffe17 	ldw	r2,-8(fp)
 8001b18:	10c00005 	stb	r3,0(r2)
 8001b1c:	00001306 	br	8001b6c <arith_encode+0x118>
	} else {
		/* Encode the more probable symbol */
		if (e->a >= 0x8000L)
 8001b20:	80800417 	ldw	r2,16(r16)
 8001b24:	00dfffc4 	movi	r3,32767
 8001b28:	18807f16 	blt	r3,r2,8001d28 <arith_encode+0x2d4>
			return;  /* A >= 0x8000 -> ready, no renormalization required */
		if (e->a < qe) {
 8001b2c:	80800417 	ldw	r2,16(r16)
 8001b30:	1440050e 	bge	r2,r17,8001b48 <arith_encode+0xf4>
			/* If the interval size (qe) for the less probable symbol (LPS)
			* is larger than the interval size for the MPS, then exchange
			* the two symbols for coding efficiency: */
			e->c += e->a;
 8001b34:	80c00317 	ldw	r3,12(r16)
 8001b38:	80800417 	ldw	r2,16(r16)
 8001b3c:	1885883a 	add	r2,r3,r2
 8001b40:	80800315 	stw	r2,12(r16)
			e->a = qe;
 8001b44:	84400415 	stw	r17,16(r16)
		}
		*st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 8001b48:	9007883a 	mov	r3,r18
 8001b4c:	00bfe004 	movi	r2,-128
 8001b50:	1884703a 	and	r2,r3,r2
 8001b54:	1007883a 	mov	r3,r2
 8001b58:	9805883a 	mov	r2,r19
 8001b5c:	1884f03a 	xor	r2,r3,r2
 8001b60:	1007883a 	mov	r3,r2
 8001b64:	e0bffe17 	ldw	r2,-8(fp)
 8001b68:	10c00005 	stb	r3,0(r2)
	}

	/* Renormalization & data output per section D.1.6 */
	do {
		e->a <<= 1;
 8001b6c:	80800417 	ldw	r2,16(r16)
 8001b70:	1085883a 	add	r2,r2,r2
 8001b74:	80800415 	stw	r2,16(r16)
		e->c <<= 1;
 8001b78:	80800317 	ldw	r2,12(r16)
 8001b7c:	1085883a 	add	r2,r2,r2
 8001b80:	80800315 	stw	r2,12(r16)
		if (--e->ct == 0) {
 8001b84:	80800717 	ldw	r2,28(r16)
 8001b88:	10bfffc4 	addi	r2,r2,-1
 8001b8c:	80800715 	stw	r2,28(r16)
 8001b90:	80800717 	ldw	r2,28(r16)
 8001b94:	1000601e 	bne	r2,zero,8001d18 <arith_encode+0x2c4>
			/* Another byte is ready for output */
			temp = e->c >> 19;
 8001b98:	80800317 	ldw	r2,12(r16)
 8001b9c:	1023d4fa 	srai	r17,r2,19
			if (temp > 0xFF) {
 8001ba0:	88804010 	cmplti	r2,r17,256
 8001ba4:	10001f1e 	bne	r2,zero,8001c24 <arith_encode+0x1d0>
				/* Handle overflow over all stacked 0xFF bytes */
				if (e->buffer >= 0) {
 8001ba8:	80800817 	ldw	r2,32(r16)
 8001bac:	10001516 	blt	r2,zero,8001c04 <arith_encode+0x1b0>
					if (e->zc)
 8001bb0:	80800617 	ldw	r2,24(r16)
 8001bb4:	10000826 	beq	r2,zero,8001bd8 <arith_encode+0x184>
						do emit_byte(0x00, cinfo);
 8001bb8:	0009883a 	mov	r4,zero
 8001bbc:	e17ffd17 	ldw	r5,-12(fp)
 8001bc0:	80016700 	call	8001670 <emit_byte>
					while (--e->zc);
 8001bc4:	80800617 	ldw	r2,24(r16)
 8001bc8:	10bfffc4 	addi	r2,r2,-1
 8001bcc:	80800615 	stw	r2,24(r16)
 8001bd0:	80800617 	ldw	r2,24(r16)
 8001bd4:	103ff81e 	bne	r2,zero,8001bb8 <arith_encode+0x164>
					emit_byte(e->buffer + 1, cinfo);
 8001bd8:	80800817 	ldw	r2,32(r16)
 8001bdc:	10800044 	addi	r2,r2,1
 8001be0:	1009883a 	mov	r4,r2
 8001be4:	e17ffd17 	ldw	r5,-12(fp)
 8001be8:	80016700 	call	8001670 <emit_byte>
					if (e->buffer + 1 == 0xFF)
 8001bec:	80800817 	ldw	r2,32(r16)
 8001bf0:	10803f98 	cmpnei	r2,r2,254
 8001bf4:	1000031e 	bne	r2,zero,8001c04 <arith_encode+0x1b0>
						emit_byte(0x00, cinfo);
 8001bf8:	0009883a 	mov	r4,zero
 8001bfc:	e17ffd17 	ldw	r5,-12(fp)
 8001c00:	80016700 	call	8001670 <emit_byte>
				}
				e->zc += e->sc;  /* carry-over converts stacked 0xFF bytes to 0x00 */
 8001c04:	80c00617 	ldw	r3,24(r16)
 8001c08:	80800517 	ldw	r2,20(r16)
 8001c0c:	1885883a 	add	r2,r3,r2
 8001c10:	80800615 	stw	r2,24(r16)
				e->sc = 0;
 8001c14:	80000515 	stw	zero,20(r16)
				/* Note: The 3 spacer bits in the C register guarantee
				* that the new buffer byte can't be 0xFF here
				* (see page 160 in the P&M JPEG book). */
				e->buffer = temp & 0xFF;  /* new output byte, might overflow later */
 8001c18:	88803fcc 	andi	r2,r17,255
 8001c1c:	80800815 	stw	r2,32(r16)
 8001c20:	00003506 	br	8001cf8 <arith_encode+0x2a4>
			} else if (temp == 0xFF) {
 8001c24:	88803fd8 	cmpnei	r2,r17,255
 8001c28:	1000041e 	bne	r2,zero,8001c3c <arith_encode+0x1e8>
				++e->sc;  /* stack 0xFF byte (which might overflow later) */
 8001c2c:	80800517 	ldw	r2,20(r16)
 8001c30:	10800044 	addi	r2,r2,1
 8001c34:	80800515 	stw	r2,20(r16)
 8001c38:	00002f06 	br	8001cf8 <arith_encode+0x2a4>
			} else {
				/* Output all stacked 0xFF bytes, they will not overflow any more */
				if (e->buffer == 0)
 8001c3c:	80800817 	ldw	r2,32(r16)
 8001c40:	1000041e 	bne	r2,zero,8001c54 <arith_encode+0x200>
					++e->zc;
 8001c44:	80800617 	ldw	r2,24(r16)
 8001c48:	10800044 	addi	r2,r2,1
 8001c4c:	80800615 	stw	r2,24(r16)
 8001c50:	00001006 	br	8001c94 <arith_encode+0x240>
				else if (e->buffer >= 0) {
 8001c54:	80800817 	ldw	r2,32(r16)
 8001c58:	10000e16 	blt	r2,zero,8001c94 <arith_encode+0x240>
					if (e->zc)
 8001c5c:	80800617 	ldw	r2,24(r16)
 8001c60:	10000826 	beq	r2,zero,8001c84 <arith_encode+0x230>
						do emit_byte(0x00, cinfo);
 8001c64:	0009883a 	mov	r4,zero
 8001c68:	e17ffd17 	ldw	r5,-12(fp)
 8001c6c:	80016700 	call	8001670 <emit_byte>
					while (--e->zc);
 8001c70:	80800617 	ldw	r2,24(r16)
 8001c74:	10bfffc4 	addi	r2,r2,-1
 8001c78:	80800615 	stw	r2,24(r16)
 8001c7c:	80800617 	ldw	r2,24(r16)
 8001c80:	103ff81e 	bne	r2,zero,8001c64 <arith_encode+0x210>
					emit_byte(e->buffer, cinfo);
 8001c84:	80800817 	ldw	r2,32(r16)
 8001c88:	1009883a 	mov	r4,r2
 8001c8c:	e17ffd17 	ldw	r5,-12(fp)
 8001c90:	80016700 	call	8001670 <emit_byte>
				}
				if (e->sc) {
 8001c94:	80800517 	ldw	r2,20(r16)
 8001c98:	10001526 	beq	r2,zero,8001cf0 <arith_encode+0x29c>
					if (e->zc)
 8001c9c:	80800617 	ldw	r2,24(r16)
 8001ca0:	10000826 	beq	r2,zero,8001cc4 <arith_encode+0x270>
						do emit_byte(0x00, cinfo);
 8001ca4:	0009883a 	mov	r4,zero
 8001ca8:	e17ffd17 	ldw	r5,-12(fp)
 8001cac:	80016700 	call	8001670 <emit_byte>
					while (--e->zc);
 8001cb0:	80800617 	ldw	r2,24(r16)
 8001cb4:	10bfffc4 	addi	r2,r2,-1
 8001cb8:	80800615 	stw	r2,24(r16)
 8001cbc:	80800617 	ldw	r2,24(r16)
 8001cc0:	103ff81e 	bne	r2,zero,8001ca4 <arith_encode+0x250>
					do {
						emit_byte(0xFF, cinfo);
 8001cc4:	01003fc4 	movi	r4,255
 8001cc8:	e17ffd17 	ldw	r5,-12(fp)
 8001ccc:	80016700 	call	8001670 <emit_byte>
						emit_byte(0x00, cinfo);
 8001cd0:	0009883a 	mov	r4,zero
 8001cd4:	e17ffd17 	ldw	r5,-12(fp)
 8001cd8:	80016700 	call	8001670 <emit_byte>
					} while (--e->sc);
 8001cdc:	80800517 	ldw	r2,20(r16)
 8001ce0:	10bfffc4 	addi	r2,r2,-1
 8001ce4:	80800515 	stw	r2,20(r16)
 8001ce8:	80800517 	ldw	r2,20(r16)
 8001cec:	103ff51e 	bne	r2,zero,8001cc4 <arith_encode+0x270>
				}
				e->buffer = temp & 0xFF;  /* new output byte (can still overflow) */
 8001cf0:	88803fcc 	andi	r2,r17,255
 8001cf4:	80800815 	stw	r2,32(r16)
			}
			e->c &= 0x7FFFFL;
 8001cf8:	80c00317 	ldw	r3,12(r16)
 8001cfc:	00800234 	movhi	r2,8
 8001d00:	10bfffc4 	addi	r2,r2,-1
 8001d04:	1884703a 	and	r2,r3,r2
 8001d08:	80800315 	stw	r2,12(r16)
			e->ct += 8;
 8001d0c:	80800717 	ldw	r2,28(r16)
 8001d10:	10800204 	addi	r2,r2,8
 8001d14:	80800715 	stw	r2,28(r16)
		}
	} while (e->a < 0x8000L);
 8001d18:	80800417 	ldw	r2,16(r16)
 8001d1c:	00dfffc4 	movi	r3,32767
 8001d20:	18bf920e 	bge	r3,r2,8001b6c <arith_encode+0x118>
 8001d24:	00000106 	br	8001d2c <arith_encode+0x2d8>
		}
		*st = (sv & 0x80) ^ nl;	/* Estimate_after_LPS */
	} else {
		/* Encode the more probable symbol */
		if (e->a >= 0x8000L)
			return;  /* A >= 0x8000 -> ready, no renormalization required */
 8001d28:	0001883a 	nop
			}
			e->c &= 0x7FFFFL;
			e->ct += 8;
		}
	} while (e->a < 0x8000L);
}
 8001d2c:	e037883a 	mov	sp,fp
 8001d30:	dfc00617 	ldw	ra,24(sp)
 8001d34:	df000517 	ldw	fp,20(sp)
 8001d38:	dd000417 	ldw	r20,16(sp)
 8001d3c:	dcc00317 	ldw	r19,12(sp)
 8001d40:	dc800217 	ldw	r18,8(sp)
 8001d44:	dc400117 	ldw	r17,4(sp)
 8001d48:	dc000017 	ldw	r16,0(sp)
 8001d4c:	dec00704 	addi	sp,sp,28
 8001d50:	f800283a 	ret

08001d54 <emit_restart>:
* Emit a restart marker & resynchronize predictions.
*/

LOCAL(void)
	emit_restart (j_compress_ptr cinfo, int restart_num)
{
 8001d54:	defff904 	addi	sp,sp,-28
 8001d58:	dfc00615 	stw	ra,24(sp)
 8001d5c:	df000515 	stw	fp,20(sp)
 8001d60:	df000504 	addi	fp,sp,20
 8001d64:	e13ffe15 	stw	r4,-8(fp)
 8001d68:	e17fff15 	stw	r5,-4(fp)
	arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 8001d6c:	e0bffe17 	ldw	r2,-8(fp)
 8001d70:	10806417 	ldw	r2,400(r2)
 8001d74:	e0bffc15 	stw	r2,-16(fp)
	int ci;
	jpeg_component_info * compptr;

	finish_pass(cinfo);
 8001d78:	e13ffe17 	ldw	r4,-8(fp)
 8001d7c:	80017200 	call	8001720 <finish_pass>

	emit_byte(0xFF, cinfo);
 8001d80:	01003fc4 	movi	r4,255
 8001d84:	e17ffe17 	ldw	r5,-8(fp)
 8001d88:	80016700 	call	8001670 <emit_byte>
	emit_byte(JPEG_RST0 + restart_num, cinfo);
 8001d8c:	e0bfff17 	ldw	r2,-4(fp)
 8001d90:	10803404 	addi	r2,r2,208
 8001d94:	1009883a 	mov	r4,r2
 8001d98:	e17ffe17 	ldw	r5,-8(fp)
 8001d9c:	80016700 	call	8001670 <emit_byte>

	/* Re-initialize statistics areas */
	for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8001da0:	e03ffb15 	stw	zero,-20(fp)
 8001da4:	00003a06 	br	8001e90 <emit_restart+0x13c>
		compptr = cinfo->cur_comp_info[ci];
 8001da8:	e0fffe17 	ldw	r3,-8(fp)
 8001dac:	e0bffb17 	ldw	r2,-20(fp)
 8001db0:	10801104 	addi	r2,r2,68
 8001db4:	1085883a 	add	r2,r2,r2
 8001db8:	1085883a 	add	r2,r2,r2
 8001dbc:	1885883a 	add	r2,r3,r2
 8001dc0:	10800017 	ldw	r2,0(r2)
 8001dc4:	e0bffd15 	stw	r2,-12(fp)
		/* DC needs no table for refinement scan */
		if (cinfo->Ss == 0 && cinfo->Ah == 0) {
 8001dc8:	e0bffe17 	ldw	r2,-8(fp)
 8001dcc:	10805517 	ldw	r2,340(r2)
 8001dd0:	10001d1e 	bne	r2,zero,8001e48 <emit_restart+0xf4>
 8001dd4:	e0bffe17 	ldw	r2,-8(fp)
 8001dd8:	10805717 	ldw	r2,348(r2)
 8001ddc:	10001a1e 	bne	r2,zero,8001e48 <emit_restart+0xf4>
			MEMZERO(entropy->dc_stats[compptr->dc_tbl_no], DC_STAT_BINS);
 8001de0:	e0bffd17 	ldw	r2,-12(fp)
 8001de4:	10800517 	ldw	r2,20(r2)
 8001de8:	e0fffc17 	ldw	r3,-16(fp)
 8001dec:	108004c4 	addi	r2,r2,19
 8001df0:	1085883a 	add	r2,r2,r2
 8001df4:	1085883a 	add	r2,r2,r2
 8001df8:	1885883a 	add	r2,r3,r2
 8001dfc:	10800017 	ldw	r2,0(r2)
 8001e00:	1009883a 	mov	r4,r2
 8001e04:	000b883a 	mov	r5,zero
 8001e08:	01801004 	movi	r6,64
 8001e0c:	802ecf00 	call	802ecf0 <memset>
			/* Reset DC predictions to 0 */
			entropy->last_dc_val[ci] = 0;
 8001e10:	e0fffc17 	ldw	r3,-16(fp)
 8001e14:	e0bffb17 	ldw	r2,-20(fp)
 8001e18:	10800244 	addi	r2,r2,9
 8001e1c:	1085883a 	add	r2,r2,r2
 8001e20:	1085883a 	add	r2,r2,r2
 8001e24:	1885883a 	add	r2,r3,r2
 8001e28:	10000015 	stw	zero,0(r2)
			entropy->dc_context[ci] = 0;
 8001e2c:	e0fffc17 	ldw	r3,-16(fp)
 8001e30:	e0bffb17 	ldw	r2,-20(fp)
 8001e34:	10800344 	addi	r2,r2,13
 8001e38:	1085883a 	add	r2,r2,r2
 8001e3c:	1085883a 	add	r2,r2,r2
 8001e40:	1885883a 	add	r2,r3,r2
 8001e44:	10000015 	stw	zero,0(r2)
		}
		/* AC needs no table when not present */
		if (cinfo->Se) {
 8001e48:	e0bffe17 	ldw	r2,-8(fp)
 8001e4c:	10805617 	ldw	r2,344(r2)
 8001e50:	10000c26 	beq	r2,zero,8001e84 <emit_restart+0x130>
			MEMZERO(entropy->ac_stats[compptr->ac_tbl_no], AC_STAT_BINS);
 8001e54:	e0bffd17 	ldw	r2,-12(fp)
 8001e58:	10800617 	ldw	r2,24(r2)
 8001e5c:	e0fffc17 	ldw	r3,-16(fp)
 8001e60:	108008c4 	addi	r2,r2,35
 8001e64:	1085883a 	add	r2,r2,r2
 8001e68:	1085883a 	add	r2,r2,r2
 8001e6c:	1885883a 	add	r2,r3,r2
 8001e70:	10800017 	ldw	r2,0(r2)
 8001e74:	1009883a 	mov	r4,r2
 8001e78:	000b883a 	mov	r5,zero
 8001e7c:	01804004 	movi	r6,256
 8001e80:	802ecf00 	call	802ecf0 <memset>

	emit_byte(0xFF, cinfo);
	emit_byte(JPEG_RST0 + restart_num, cinfo);

	/* Re-initialize statistics areas */
	for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8001e84:	e0bffb17 	ldw	r2,-20(fp)
 8001e88:	10800044 	addi	r2,r2,1
 8001e8c:	e0bffb15 	stw	r2,-20(fp)
 8001e90:	e0bffe17 	ldw	r2,-8(fp)
 8001e94:	10804317 	ldw	r2,268(r2)
 8001e98:	e0fffb17 	ldw	r3,-20(fp)
 8001e9c:	18bfc216 	blt	r3,r2,8001da8 <emit_restart+0x54>
			MEMZERO(entropy->ac_stats[compptr->ac_tbl_no], AC_STAT_BINS);
		}
	}

	/* Reset arithmetic encoding variables */
	entropy->c = 0;
 8001ea0:	e0bffc17 	ldw	r2,-16(fp)
 8001ea4:	10000315 	stw	zero,12(r2)
	entropy->a = 0x10000L;
 8001ea8:	e0bffc17 	ldw	r2,-16(fp)
 8001eac:	00c00074 	movhi	r3,1
 8001eb0:	10c00415 	stw	r3,16(r2)
	entropy->sc = 0;
 8001eb4:	e0bffc17 	ldw	r2,-16(fp)
 8001eb8:	10000515 	stw	zero,20(r2)
	entropy->zc = 0;
 8001ebc:	e0bffc17 	ldw	r2,-16(fp)
 8001ec0:	10000615 	stw	zero,24(r2)
	entropy->ct = 11;
 8001ec4:	e0bffc17 	ldw	r2,-16(fp)
 8001ec8:	00c002c4 	movi	r3,11
 8001ecc:	10c00715 	stw	r3,28(r2)
	entropy->buffer = -1;  /* empty */
 8001ed0:	e0bffc17 	ldw	r2,-16(fp)
 8001ed4:	00ffffc4 	movi	r3,-1
 8001ed8:	10c00815 	stw	r3,32(r2)
}
 8001edc:	e037883a 	mov	sp,fp
 8001ee0:	dfc00117 	ldw	ra,4(sp)
 8001ee4:	df000017 	ldw	fp,0(sp)
 8001ee8:	dec00204 	addi	sp,sp,8
 8001eec:	f800283a 	ret

08001ef0 <encode_mcu_DC_first>:
* or first pass of successive approximation).
*/

METHODDEF(boolean)
	encode_mcu_DC_first (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
{
 8001ef0:	defff304 	addi	sp,sp,-52
 8001ef4:	dfc00c15 	stw	ra,48(sp)
 8001ef8:	df000b15 	stw	fp,44(sp)
 8001efc:	df000b04 	addi	fp,sp,44
 8001f00:	e13ffe15 	stw	r4,-8(fp)
 8001f04:	e17fff15 	stw	r5,-4(fp)
	arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 8001f08:	e0bffe17 	ldw	r2,-8(fp)
 8001f0c:	10806417 	ldw	r2,400(r2)
 8001f10:	e0bffa15 	stw	r2,-24(fp)
	int blkn, ci, tbl;
	int v, v2, m;
	ISHIFT_TEMPS

		/* Emit restart marker if needed */
		if (cinfo->restart_interval) {
 8001f14:	e0bffe17 	ldw	r2,-8(fp)
 8001f18:	10803717 	ldw	r2,220(r2)
 8001f1c:	10001b26 	beq	r2,zero,8001f8c <encode_mcu_DC_first+0x9c>
			if (entropy->restarts_to_go == 0) {
 8001f20:	e0bffa17 	ldw	r2,-24(fp)
 8001f24:	10801117 	ldw	r2,68(r2)
 8001f28:	1000131e 	bne	r2,zero,8001f78 <encode_mcu_DC_first+0x88>
				emit_restart(cinfo, entropy->next_restart_num);
 8001f2c:	e0bffa17 	ldw	r2,-24(fp)
 8001f30:	10801217 	ldw	r2,72(r2)
 8001f34:	e13ffe17 	ldw	r4,-8(fp)
 8001f38:	100b883a 	mov	r5,r2
 8001f3c:	8001d540 	call	8001d54 <emit_restart>
				entropy->restarts_to_go = cinfo->restart_interval;
 8001f40:	e0bffe17 	ldw	r2,-8(fp)
 8001f44:	10c03717 	ldw	r3,220(r2)
 8001f48:	e0bffa17 	ldw	r2,-24(fp)
 8001f4c:	10c01115 	stw	r3,68(r2)
				entropy->next_restart_num++;
 8001f50:	e0bffa17 	ldw	r2,-24(fp)
 8001f54:	10801217 	ldw	r2,72(r2)
 8001f58:	10c00044 	addi	r3,r2,1
 8001f5c:	e0bffa17 	ldw	r2,-24(fp)
 8001f60:	10c01215 	stw	r3,72(r2)
				entropy->next_restart_num &= 7;
 8001f64:	e0bffa17 	ldw	r2,-24(fp)
 8001f68:	10801217 	ldw	r2,72(r2)
 8001f6c:	10c001cc 	andi	r3,r2,7
 8001f70:	e0bffa17 	ldw	r2,-24(fp)
 8001f74:	10c01215 	stw	r3,72(r2)
			}
			entropy->restarts_to_go--;
 8001f78:	e0bffa17 	ldw	r2,-24(fp)
 8001f7c:	10801117 	ldw	r2,68(r2)
 8001f80:	10ffffc4 	addi	r3,r2,-1
 8001f84:	e0bffa17 	ldw	r2,-24(fp)
 8001f88:	10c01115 	stw	r3,68(r2)
		}

		/* Encode the MCU data blocks */
		for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8001f8c:	e03ff615 	stw	zero,-40(fp)
 8001f90:	0000ea06 	br	800233c <encode_mcu_DC_first+0x44c>
			block = MCU_data[blkn];
 8001f94:	e0bff617 	ldw	r2,-40(fp)
 8001f98:	1085883a 	add	r2,r2,r2
 8001f9c:	1085883a 	add	r2,r2,r2
 8001fa0:	e0ffff17 	ldw	r3,-4(fp)
 8001fa4:	1885883a 	add	r2,r3,r2
 8001fa8:	10800017 	ldw	r2,0(r2)
 8001fac:	e0bffb15 	stw	r2,-20(fp)
			ci = cinfo->MCU_membership[blkn];
 8001fb0:	e0fffe17 	ldw	r3,-8(fp)
 8001fb4:	e0bff617 	ldw	r2,-40(fp)
 8001fb8:	108012c4 	addi	r2,r2,75
 8001fbc:	1085883a 	add	r2,r2,r2
 8001fc0:	1085883a 	add	r2,r2,r2
 8001fc4:	1885883a 	add	r2,r3,r2
 8001fc8:	10800017 	ldw	r2,0(r2)
 8001fcc:	e0bffc15 	stw	r2,-16(fp)
			tbl = cinfo->cur_comp_info[ci]->dc_tbl_no;
 8001fd0:	e0fffe17 	ldw	r3,-8(fp)
 8001fd4:	e0bffc17 	ldw	r2,-16(fp)
 8001fd8:	10801104 	addi	r2,r2,68
 8001fdc:	1085883a 	add	r2,r2,r2
 8001fe0:	1085883a 	add	r2,r2,r2
 8001fe4:	1885883a 	add	r2,r3,r2
 8001fe8:	10800017 	ldw	r2,0(r2)
 8001fec:	10800517 	ldw	r2,20(r2)
 8001ff0:	e0bffd15 	stw	r2,-12(fp)

			/* Compute the DC value after the required point transform by Al.
			* This is simply an arithmetic right shift.
			*/
			m = IRIGHT_SHIFT((int) ((*block)[0]), cinfo->Al);
 8001ff4:	e0bffb17 	ldw	r2,-20(fp)
 8001ff8:	1080000b 	ldhu	r2,0(r2)
 8001ffc:	10ffffcc 	andi	r3,r2,65535
 8002000:	18e0001c 	xori	r3,r3,32768
 8002004:	18e00004 	addi	r3,r3,-32768
 8002008:	e0bffe17 	ldw	r2,-8(fp)
 800200c:	10805817 	ldw	r2,352(r2)
 8002010:	1885d83a 	sra	r2,r3,r2
 8002014:	e0bff915 	stw	r2,-28(fp)

			/* Sections F.1.4.1 & F.1.4.4.1: Encoding of DC coefficients */

			/* Table F.4: Point to statistics bin S0 for DC coefficient coding */
			st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 8002018:	e0fffa17 	ldw	r3,-24(fp)
 800201c:	e0bffd17 	ldw	r2,-12(fp)
 8002020:	108004c4 	addi	r2,r2,19
 8002024:	1085883a 	add	r2,r2,r2
 8002028:	1085883a 	add	r2,r2,r2
 800202c:	1885883a 	add	r2,r3,r2
 8002030:	10c00017 	ldw	r3,0(r2)
 8002034:	e13ffa17 	ldw	r4,-24(fp)
 8002038:	e0bffc17 	ldw	r2,-16(fp)
 800203c:	10800344 	addi	r2,r2,13
 8002040:	1085883a 	add	r2,r2,r2
 8002044:	1085883a 	add	r2,r2,r2
 8002048:	2085883a 	add	r2,r4,r2
 800204c:	10800017 	ldw	r2,0(r2)
 8002050:	1885883a 	add	r2,r3,r2
 8002054:	e0bff515 	stw	r2,-44(fp)

			/* Figure F.4: Encode_DC_DIFF */
			if ((v = m - entropy->last_dc_val[ci]) == 0) {
 8002058:	e0fffa17 	ldw	r3,-24(fp)
 800205c:	e0bffc17 	ldw	r2,-16(fp)
 8002060:	10800244 	addi	r2,r2,9
 8002064:	1085883a 	add	r2,r2,r2
 8002068:	1085883a 	add	r2,r2,r2
 800206c:	1885883a 	add	r2,r3,r2
 8002070:	10800017 	ldw	r2,0(r2)
 8002074:	e0fff917 	ldw	r3,-28(fp)
 8002078:	1885c83a 	sub	r2,r3,r2
 800207c:	e0bff715 	stw	r2,-36(fp)
 8002080:	e0bff717 	ldw	r2,-36(fp)
 8002084:	10000c1e 	bne	r2,zero,80020b8 <encode_mcu_DC_first+0x1c8>
				arith_encode(cinfo, st, 0);
 8002088:	e13ffe17 	ldw	r4,-8(fp)
 800208c:	e17ff517 	ldw	r5,-44(fp)
 8002090:	000d883a 	mov	r6,zero
 8002094:	8001a540 	call	8001a54 <arith_encode>
				entropy->dc_context[ci] = 0;	/* zero diff category */
 8002098:	e0fffa17 	ldw	r3,-24(fp)
 800209c:	e0bffc17 	ldw	r2,-16(fp)
 80020a0:	10800344 	addi	r2,r2,13
 80020a4:	1085883a 	add	r2,r2,r2
 80020a8:	1085883a 	add	r2,r2,r2
 80020ac:	1885883a 	add	r2,r3,r2
 80020b0:	10000015 	stw	zero,0(r2)
 80020b4:	00009e06 	br	8002330 <encode_mcu_DC_first+0x440>
			} else {
				entropy->last_dc_val[ci] = m;
 80020b8:	e0fffa17 	ldw	r3,-24(fp)
 80020bc:	e0bffc17 	ldw	r2,-16(fp)
 80020c0:	10800244 	addi	r2,r2,9
 80020c4:	1085883a 	add	r2,r2,r2
 80020c8:	1085883a 	add	r2,r2,r2
 80020cc:	1885883a 	add	r2,r3,r2
 80020d0:	e0fff917 	ldw	r3,-28(fp)
 80020d4:	10c00015 	stw	r3,0(r2)
				arith_encode(cinfo, st, 1);
 80020d8:	e13ffe17 	ldw	r4,-8(fp)
 80020dc:	e17ff517 	ldw	r5,-44(fp)
 80020e0:	01800044 	movi	r6,1
 80020e4:	8001a540 	call	8001a54 <arith_encode>
				/* Figure F.6: Encoding nonzero value v */
				/* Figure F.7: Encoding the sign of v */
				if (v > 0) {
 80020e8:	e0bff717 	ldw	r2,-36(fp)
 80020ec:	0080120e 	bge	zero,r2,8002138 <encode_mcu_DC_first+0x248>
					arith_encode(cinfo, st + 1, 0);	/* Table F.4: SS = S0 + 1 */
 80020f0:	e0bff517 	ldw	r2,-44(fp)
 80020f4:	10800044 	addi	r2,r2,1
 80020f8:	e13ffe17 	ldw	r4,-8(fp)
 80020fc:	100b883a 	mov	r5,r2
 8002100:	000d883a 	mov	r6,zero
 8002104:	8001a540 	call	8001a54 <arith_encode>
					st += 2;			/* Table F.4: SP = S0 + 2 */
 8002108:	e0bff517 	ldw	r2,-44(fp)
 800210c:	10800084 	addi	r2,r2,2
 8002110:	e0bff515 	stw	r2,-44(fp)
					entropy->dc_context[ci] = 4;	/* small positive diff category */
 8002114:	e0fffa17 	ldw	r3,-24(fp)
 8002118:	e0bffc17 	ldw	r2,-16(fp)
 800211c:	10800344 	addi	r2,r2,13
 8002120:	1085883a 	add	r2,r2,r2
 8002124:	1085883a 	add	r2,r2,r2
 8002128:	1885883a 	add	r2,r3,r2
 800212c:	00c00104 	movi	r3,4
 8002130:	10c00015 	stw	r3,0(r2)
 8002134:	00001406 	br	8002188 <encode_mcu_DC_first+0x298>
				} else {
					v = -v;
 8002138:	e0bff717 	ldw	r2,-36(fp)
 800213c:	0085c83a 	sub	r2,zero,r2
 8002140:	e0bff715 	stw	r2,-36(fp)
					arith_encode(cinfo, st + 1, 1);	/* Table F.4: SS = S0 + 1 */
 8002144:	e0bff517 	ldw	r2,-44(fp)
 8002148:	10800044 	addi	r2,r2,1
 800214c:	e13ffe17 	ldw	r4,-8(fp)
 8002150:	100b883a 	mov	r5,r2
 8002154:	01800044 	movi	r6,1
 8002158:	8001a540 	call	8001a54 <arith_encode>
					st += 3;			/* Table F.4: SN = S0 + 3 */
 800215c:	e0bff517 	ldw	r2,-44(fp)
 8002160:	108000c4 	addi	r2,r2,3
 8002164:	e0bff515 	stw	r2,-44(fp)
					entropy->dc_context[ci] = 8;	/* small negative diff category */
 8002168:	e0fffa17 	ldw	r3,-24(fp)
 800216c:	e0bffc17 	ldw	r2,-16(fp)
 8002170:	10800344 	addi	r2,r2,13
 8002174:	1085883a 	add	r2,r2,r2
 8002178:	1085883a 	add	r2,r2,r2
 800217c:	1885883a 	add	r2,r3,r2
 8002180:	00c00204 	movi	r3,8
 8002184:	10c00015 	stw	r3,0(r2)
				}
				/* Figure F.8: Encoding the magnitude category of v */
				m = 0;
 8002188:	e03ff915 	stw	zero,-28(fp)
				if (v -= 1) {
 800218c:	e0bff717 	ldw	r2,-36(fp)
 8002190:	10bfffc4 	addi	r2,r2,-1
 8002194:	e0bff715 	stw	r2,-36(fp)
 8002198:	e0bff717 	ldw	r2,-36(fp)
 800219c:	10002126 	beq	r2,zero,8002224 <encode_mcu_DC_first+0x334>
					arith_encode(cinfo, st, 1);
 80021a0:	e13ffe17 	ldw	r4,-8(fp)
 80021a4:	e17ff517 	ldw	r5,-44(fp)
 80021a8:	01800044 	movi	r6,1
 80021ac:	8001a540 	call	8001a54 <arith_encode>
					m = 1;
 80021b0:	00800044 	movi	r2,1
 80021b4:	e0bff915 	stw	r2,-28(fp)
					v2 = v;
 80021b8:	e0bff717 	ldw	r2,-36(fp)
 80021bc:	e0bff815 	stw	r2,-32(fp)
					st = entropy->dc_stats[tbl] + 20; /* Table F.4: X1 = 20 */
 80021c0:	e0fffa17 	ldw	r3,-24(fp)
 80021c4:	e0bffd17 	ldw	r2,-12(fp)
 80021c8:	108004c4 	addi	r2,r2,19
 80021cc:	1085883a 	add	r2,r2,r2
 80021d0:	1085883a 	add	r2,r2,r2
 80021d4:	1885883a 	add	r2,r3,r2
 80021d8:	10800017 	ldw	r2,0(r2)
 80021dc:	10800504 	addi	r2,r2,20
 80021e0:	e0bff515 	stw	r2,-44(fp)
					while (v2 >>= 1) {
 80021e4:	00000a06 	br	8002210 <encode_mcu_DC_first+0x320>
						arith_encode(cinfo, st, 1);
 80021e8:	e13ffe17 	ldw	r4,-8(fp)
 80021ec:	e17ff517 	ldw	r5,-44(fp)
 80021f0:	01800044 	movi	r6,1
 80021f4:	8001a540 	call	8001a54 <arith_encode>
						m <<= 1;
 80021f8:	e0bff917 	ldw	r2,-28(fp)
 80021fc:	1085883a 	add	r2,r2,r2
 8002200:	e0bff915 	stw	r2,-28(fp)
						st += 1;
 8002204:	e0bff517 	ldw	r2,-44(fp)
 8002208:	10800044 	addi	r2,r2,1
 800220c:	e0bff515 	stw	r2,-44(fp)
				if (v -= 1) {
					arith_encode(cinfo, st, 1);
					m = 1;
					v2 = v;
					st = entropy->dc_stats[tbl] + 20; /* Table F.4: X1 = 20 */
					while (v2 >>= 1) {
 8002210:	e0bff817 	ldw	r2,-32(fp)
 8002214:	1005d07a 	srai	r2,r2,1
 8002218:	e0bff815 	stw	r2,-32(fp)
 800221c:	e0bff817 	ldw	r2,-32(fp)
 8002220:	103ff11e 	bne	r2,zero,80021e8 <encode_mcu_DC_first+0x2f8>
						arith_encode(cinfo, st, 1);
						m <<= 1;
						st += 1;
					}
				}
				arith_encode(cinfo, st, 0);
 8002224:	e13ffe17 	ldw	r4,-8(fp)
 8002228:	e17ff517 	ldw	r5,-44(fp)
 800222c:	000d883a 	mov	r6,zero
 8002230:	8001a540 	call	8001a54 <arith_encode>
				/* Section F.1.4.4.1.2: Establish dc_context conditioning category */
				if (m < (int) ((1L << cinfo->arith_dc_L[tbl]) >> 1))
 8002234:	e0fffe17 	ldw	r3,-8(fp)
 8002238:	e0bffd17 	ldw	r2,-12(fp)
 800223c:	1885883a 	add	r2,r3,r2
 8002240:	10802504 	addi	r2,r2,148
 8002244:	10800003 	ldbu	r2,0(r2)
 8002248:	10803fcc 	andi	r2,r2,255
 800224c:	00c00044 	movi	r3,1
 8002250:	1884983a 	sll	r2,r3,r2
 8002254:	1005d07a 	srai	r2,r2,1
 8002258:	e0fff917 	ldw	r3,-28(fp)
 800225c:	1880080e 	bge	r3,r2,8002280 <encode_mcu_DC_first+0x390>
					entropy->dc_context[ci] = 0;	/* zero diff category */
 8002260:	e0fffa17 	ldw	r3,-24(fp)
 8002264:	e0bffc17 	ldw	r2,-16(fp)
 8002268:	10800344 	addi	r2,r2,13
 800226c:	1085883a 	add	r2,r2,r2
 8002270:	1085883a 	add	r2,r2,r2
 8002274:	1885883a 	add	r2,r3,r2
 8002278:	10000015 	stw	zero,0(r2)
 800227c:	00001a06 	br	80022e8 <encode_mcu_DC_first+0x3f8>
				else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
 8002280:	e0fffe17 	ldw	r3,-8(fp)
 8002284:	e0bffd17 	ldw	r2,-12(fp)
 8002288:	1885883a 	add	r2,r3,r2
 800228c:	10802904 	addi	r2,r2,164
 8002290:	10800003 	ldbu	r2,0(r2)
 8002294:	10803fcc 	andi	r2,r2,255
 8002298:	00c00044 	movi	r3,1
 800229c:	1884983a 	sll	r2,r3,r2
 80022a0:	1007d07a 	srai	r3,r2,1
 80022a4:	e0bff917 	ldw	r2,-28(fp)
 80022a8:	18800f0e 	bge	r3,r2,80022e8 <encode_mcu_DC_first+0x3f8>
					entropy->dc_context[ci] += 8;	/* large diff category */
 80022ac:	e0fffa17 	ldw	r3,-24(fp)
 80022b0:	e0bffc17 	ldw	r2,-16(fp)
 80022b4:	10800344 	addi	r2,r2,13
 80022b8:	1085883a 	add	r2,r2,r2
 80022bc:	1085883a 	add	r2,r2,r2
 80022c0:	1885883a 	add	r2,r3,r2
 80022c4:	10800017 	ldw	r2,0(r2)
 80022c8:	10c00204 	addi	r3,r2,8
 80022cc:	e13ffa17 	ldw	r4,-24(fp)
 80022d0:	e0bffc17 	ldw	r2,-16(fp)
 80022d4:	10800344 	addi	r2,r2,13
 80022d8:	1085883a 	add	r2,r2,r2
 80022dc:	1085883a 	add	r2,r2,r2
 80022e0:	2085883a 	add	r2,r4,r2
 80022e4:	10c00015 	stw	r3,0(r2)
				/* Figure F.9: Encoding the magnitude bit pattern of v */
				st += 14;
 80022e8:	e0bff517 	ldw	r2,-44(fp)
 80022ec:	10800384 	addi	r2,r2,14
 80022f0:	e0bff515 	stw	r2,-44(fp)
				while (m >>= 1)
 80022f4:	00000906 	br	800231c <encode_mcu_DC_first+0x42c>
					arith_encode(cinfo, st, (m & v) ? 1 : 0);
 80022f8:	e0fff917 	ldw	r3,-28(fp)
 80022fc:	e0bff717 	ldw	r2,-36(fp)
 8002300:	1884703a 	and	r2,r3,r2
 8002304:	1004c03a 	cmpne	r2,r2,zero
 8002308:	10803fcc 	andi	r2,r2,255
 800230c:	e13ffe17 	ldw	r4,-8(fp)
 8002310:	e17ff517 	ldw	r5,-44(fp)
 8002314:	100d883a 	mov	r6,r2
 8002318:	8001a540 	call	8001a54 <arith_encode>
					entropy->dc_context[ci] = 0;	/* zero diff category */
				else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
					entropy->dc_context[ci] += 8;	/* large diff category */
				/* Figure F.9: Encoding the magnitude bit pattern of v */
				st += 14;
				while (m >>= 1)
 800231c:	e0bff917 	ldw	r2,-28(fp)
 8002320:	1005d07a 	srai	r2,r2,1
 8002324:	e0bff915 	stw	r2,-28(fp)
 8002328:	e0bff917 	ldw	r2,-28(fp)
 800232c:	103ff21e 	bne	r2,zero,80022f8 <encode_mcu_DC_first+0x408>
			}
			entropy->restarts_to_go--;
		}

		/* Encode the MCU data blocks */
		for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8002330:	e0bff617 	ldw	r2,-40(fp)
 8002334:	10800044 	addi	r2,r2,1
 8002338:	e0bff615 	stw	r2,-40(fp)
 800233c:	e0bffe17 	ldw	r2,-8(fp)
 8002340:	10804a17 	ldw	r2,296(r2)
 8002344:	e0fff617 	ldw	r3,-40(fp)
 8002348:	18bf1216 	blt	r3,r2,8001f94 <encode_mcu_DC_first+0xa4>
				while (m >>= 1)
					arith_encode(cinfo, st, (m & v) ? 1 : 0);
			}
		}

		return TRUE;
 800234c:	00800044 	movi	r2,1
}
 8002350:	e037883a 	mov	sp,fp
 8002354:	dfc00117 	ldw	ra,4(sp)
 8002358:	df000017 	ldw	fp,0(sp)
 800235c:	dec00204 	addi	sp,sp,8
 8002360:	f800283a 	ret

08002364 <encode_mcu_AC_first>:
* or first pass of successive approximation).
*/

METHODDEF(boolean)
	encode_mcu_AC_first (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
{
 8002364:	defff204 	addi	sp,sp,-56
 8002368:	dfc00d15 	stw	ra,52(sp)
 800236c:	df000c15 	stw	fp,48(sp)
 8002370:	df000c04 	addi	fp,sp,48
 8002374:	e13ffe15 	stw	r4,-8(fp)
 8002378:	e17fff15 	stw	r5,-4(fp)
	arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800237c:	e0bffe17 	ldw	r2,-8(fp)
 8002380:	10806417 	ldw	r2,400(r2)
 8002384:	e0bffa15 	stw	r2,-24(fp)
	int tbl, k, ke;
	int v, v2, m;
	const int * natural_order;

	/* Emit restart marker if needed */
	if (cinfo->restart_interval) {
 8002388:	e0bffe17 	ldw	r2,-8(fp)
 800238c:	10803717 	ldw	r2,220(r2)
 8002390:	10001b26 	beq	r2,zero,8002400 <encode_mcu_AC_first+0x9c>
		if (entropy->restarts_to_go == 0) {
 8002394:	e0bffa17 	ldw	r2,-24(fp)
 8002398:	10801117 	ldw	r2,68(r2)
 800239c:	1000131e 	bne	r2,zero,80023ec <encode_mcu_AC_first+0x88>
			emit_restart(cinfo, entropy->next_restart_num);
 80023a0:	e0bffa17 	ldw	r2,-24(fp)
 80023a4:	10801217 	ldw	r2,72(r2)
 80023a8:	e13ffe17 	ldw	r4,-8(fp)
 80023ac:	100b883a 	mov	r5,r2
 80023b0:	8001d540 	call	8001d54 <emit_restart>
			entropy->restarts_to_go = cinfo->restart_interval;
 80023b4:	e0bffe17 	ldw	r2,-8(fp)
 80023b8:	10c03717 	ldw	r3,220(r2)
 80023bc:	e0bffa17 	ldw	r2,-24(fp)
 80023c0:	10c01115 	stw	r3,68(r2)
			entropy->next_restart_num++;
 80023c4:	e0bffa17 	ldw	r2,-24(fp)
 80023c8:	10801217 	ldw	r2,72(r2)
 80023cc:	10c00044 	addi	r3,r2,1
 80023d0:	e0bffa17 	ldw	r2,-24(fp)
 80023d4:	10c01215 	stw	r3,72(r2)
			entropy->next_restart_num &= 7;
 80023d8:	e0bffa17 	ldw	r2,-24(fp)
 80023dc:	10801217 	ldw	r2,72(r2)
 80023e0:	10c001cc 	andi	r3,r2,7
 80023e4:	e0bffa17 	ldw	r2,-24(fp)
 80023e8:	10c01215 	stw	r3,72(r2)
		}
		entropy->restarts_to_go--;
 80023ec:	e0bffa17 	ldw	r2,-24(fp)
 80023f0:	10801117 	ldw	r2,68(r2)
 80023f4:	10ffffc4 	addi	r3,r2,-1
 80023f8:	e0bffa17 	ldw	r2,-24(fp)
 80023fc:	10c01115 	stw	r3,68(r2)
	}

	natural_order = cinfo->natural_order;
 8002400:	e0bffe17 	ldw	r2,-8(fp)
 8002404:	10805a17 	ldw	r2,360(r2)
 8002408:	e0bffb15 	stw	r2,-20(fp)

	/* Encode the MCU data block */
	block = MCU_data[0];
 800240c:	e0bfff17 	ldw	r2,-4(fp)
 8002410:	10800017 	ldw	r2,0(r2)
 8002414:	e0bffc15 	stw	r2,-16(fp)
	tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 8002418:	e0bffe17 	ldw	r2,-8(fp)
 800241c:	10804417 	ldw	r2,272(r2)
 8002420:	10800617 	ldw	r2,24(r2)
 8002424:	e0bffd15 	stw	r2,-12(fp)

	/* Sections F.1.4.2 & F.1.4.4.2: Encoding of AC coefficients */

	/* Establish EOB (end-of-block) index */
	for (ke = cinfo->Se; ke > 0; ke--)
 8002428:	e0bffe17 	ldw	r2,-8(fp)
 800242c:	10805617 	ldw	r2,344(r2)
 8002430:	e0bff615 	stw	r2,-40(fp)
 8002434:	00002506 	br	80024cc <encode_mcu_AC_first+0x168>
		/* We must apply the point transform by Al.  For AC coefficients this
		* is an integer division with rounding towards 0.  To do this portably
		* in C, we shift after obtaining the absolute value.
		*/
		if ((v = (*block)[natural_order[ke]]) >= 0) {
 8002438:	e0bff617 	ldw	r2,-40(fp)
 800243c:	1085883a 	add	r2,r2,r2
 8002440:	1085883a 	add	r2,r2,r2
 8002444:	e0fffb17 	ldw	r3,-20(fp)
 8002448:	1885883a 	add	r2,r3,r2
 800244c:	10800017 	ldw	r2,0(r2)
 8002450:	e0fffc17 	ldw	r3,-16(fp)
 8002454:	1085883a 	add	r2,r2,r2
 8002458:	1885883a 	add	r2,r3,r2
 800245c:	1080000b 	ldhu	r2,0(r2)
 8002460:	10bfffcc 	andi	r2,r2,65535
 8002464:	10a0001c 	xori	r2,r2,32768
 8002468:	10a00004 	addi	r2,r2,-32768
 800246c:	e0bff715 	stw	r2,-36(fp)
 8002470:	e0bff717 	ldw	r2,-36(fp)
 8002474:	10000816 	blt	r2,zero,8002498 <encode_mcu_AC_first+0x134>
			if (v >>= cinfo->Al) break;
 8002478:	e0bffe17 	ldw	r2,-8(fp)
 800247c:	10805817 	ldw	r2,352(r2)
 8002480:	e0fff717 	ldw	r3,-36(fp)
 8002484:	1885d83a 	sra	r2,r3,r2
 8002488:	e0bff715 	stw	r2,-36(fp)
 800248c:	e0bff717 	ldw	r2,-36(fp)
 8002490:	10000b26 	beq	r2,zero,80024c0 <encode_mcu_AC_first+0x15c>
 8002494:	00001106 	br	80024dc <encode_mcu_AC_first+0x178>
		} else {
			v = -v;
 8002498:	e0bff717 	ldw	r2,-36(fp)
 800249c:	0085c83a 	sub	r2,zero,r2
 80024a0:	e0bff715 	stw	r2,-36(fp)
			if (v >>= cinfo->Al) break;
 80024a4:	e0bffe17 	ldw	r2,-8(fp)
 80024a8:	10805817 	ldw	r2,352(r2)
 80024ac:	e0fff717 	ldw	r3,-36(fp)
 80024b0:	1885d83a 	sra	r2,r3,r2
 80024b4:	e0bff715 	stw	r2,-36(fp)
 80024b8:	e0bff717 	ldw	r2,-36(fp)
 80024bc:	1000061e 	bne	r2,zero,80024d8 <encode_mcu_AC_first+0x174>
	tbl = cinfo->cur_comp_info[0]->ac_tbl_no;

	/* Sections F.1.4.2 & F.1.4.4.2: Encoding of AC coefficients */

	/* Establish EOB (end-of-block) index */
	for (ke = cinfo->Se; ke > 0; ke--)
 80024c0:	e0bff617 	ldw	r2,-40(fp)
 80024c4:	10bfffc4 	addi	r2,r2,-1
 80024c8:	e0bff615 	stw	r2,-40(fp)
 80024cc:	e0bff617 	ldw	r2,-40(fp)
 80024d0:	00bfd916 	blt	zero,r2,8002438 <encode_mcu_AC_first+0xd4>
 80024d4:	00000106 	br	80024dc <encode_mcu_AC_first+0x178>
		*/
		if ((v = (*block)[natural_order[ke]]) >= 0) {
			if (v >>= cinfo->Al) break;
		} else {
			v = -v;
			if (v >>= cinfo->Al) break;
 80024d8:	0001883a 	nop
		}

		/* Figure F.5: Encode_AC_Coefficients */
		for (k = cinfo->Ss; k <= ke; k++) {
 80024dc:	e0bffe17 	ldw	r2,-8(fp)
 80024e0:	10805517 	ldw	r2,340(r2)
 80024e4:	e0bff515 	stw	r2,-44(fp)
 80024e8:	0000b406 	br	80027bc <encode_mcu_AC_first+0x458>
			st = entropy->ac_stats[tbl] + 3 * (k - 1);
 80024ec:	e0fffa17 	ldw	r3,-24(fp)
 80024f0:	e0bffd17 	ldw	r2,-12(fp)
 80024f4:	108008c4 	addi	r2,r2,35
 80024f8:	1085883a 	add	r2,r2,r2
 80024fc:	1085883a 	add	r2,r2,r2
 8002500:	1885883a 	add	r2,r3,r2
 8002504:	11000017 	ldw	r4,0(r2)
 8002508:	e0bff517 	ldw	r2,-44(fp)
 800250c:	10ffffc4 	addi	r3,r2,-1
 8002510:	1805883a 	mov	r2,r3
 8002514:	1085883a 	add	r2,r2,r2
 8002518:	10c5883a 	add	r2,r2,r3
 800251c:	2085883a 	add	r2,r4,r2
 8002520:	e0bff415 	stw	r2,-48(fp)
			arith_encode(cinfo, st, 0);		/* EOB decision */
 8002524:	e13ffe17 	ldw	r4,-8(fp)
 8002528:	e17ff417 	ldw	r5,-48(fp)
 800252c:	000d883a 	mov	r6,zero
 8002530:	8001a540 	call	8001a54 <arith_encode>
			for (;;) {
				if ((v = (*block)[natural_order[k]]) >= 0) {
 8002534:	e0bff517 	ldw	r2,-44(fp)
 8002538:	1085883a 	add	r2,r2,r2
 800253c:	1085883a 	add	r2,r2,r2
 8002540:	e0fffb17 	ldw	r3,-20(fp)
 8002544:	1885883a 	add	r2,r3,r2
 8002548:	10800017 	ldw	r2,0(r2)
 800254c:	e0fffc17 	ldw	r3,-16(fp)
 8002550:	1085883a 	add	r2,r2,r2
 8002554:	1885883a 	add	r2,r3,r2
 8002558:	1080000b 	ldhu	r2,0(r2)
 800255c:	10bfffcc 	andi	r2,r2,65535
 8002560:	10a0001c 	xori	r2,r2,32768
 8002564:	10a00004 	addi	r2,r2,-32768
 8002568:	e0bff715 	stw	r2,-36(fp)
 800256c:	e0bff717 	ldw	r2,-36(fp)
 8002570:	10001416 	blt	r2,zero,80025c4 <encode_mcu_AC_first+0x260>
					if (v >>= cinfo->Al) {
 8002574:	e0bffe17 	ldw	r2,-8(fp)
 8002578:	10805817 	ldw	r2,352(r2)
 800257c:	e0fff717 	ldw	r3,-36(fp)
 8002580:	1885d83a 	sra	r2,r3,r2
 8002584:	e0bff715 	stw	r2,-36(fp)
 8002588:	e0bff717 	ldw	r2,-36(fp)
 800258c:	10002426 	beq	r2,zero,8002620 <encode_mcu_AC_first+0x2bc>
						arith_encode(cinfo, st + 1, 1);
 8002590:	e0bff417 	ldw	r2,-48(fp)
 8002594:	10800044 	addi	r2,r2,1
 8002598:	e13ffe17 	ldw	r4,-8(fp)
 800259c:	100b883a 	mov	r5,r2
 80025a0:	01800044 	movi	r6,1
 80025a4:	8001a540 	call	8001a54 <arith_encode>
						arith_encode(cinfo, entropy->fixed_bin, 0);
 80025a8:	e0bffa17 	ldw	r2,-24(fp)
 80025ac:	10803304 	addi	r2,r2,204
 80025b0:	e13ffe17 	ldw	r4,-8(fp)
 80025b4:	100b883a 	mov	r5,r2
 80025b8:	000d883a 	mov	r6,zero
 80025bc:	8001a540 	call	8001a54 <arith_encode>
						break;
 80025c0:	00002406 	br	8002654 <encode_mcu_AC_first+0x2f0>
					}
				} else {
					v = -v;
 80025c4:	e0bff717 	ldw	r2,-36(fp)
 80025c8:	0085c83a 	sub	r2,zero,r2
 80025cc:	e0bff715 	stw	r2,-36(fp)
					if (v >>= cinfo->Al) {
 80025d0:	e0bffe17 	ldw	r2,-8(fp)
 80025d4:	10805817 	ldw	r2,352(r2)
 80025d8:	e0fff717 	ldw	r3,-36(fp)
 80025dc:	1885d83a 	sra	r2,r3,r2
 80025e0:	e0bff715 	stw	r2,-36(fp)
 80025e4:	e0bff717 	ldw	r2,-36(fp)
 80025e8:	10000d26 	beq	r2,zero,8002620 <encode_mcu_AC_first+0x2bc>
						arith_encode(cinfo, st + 1, 1);
 80025ec:	e0bff417 	ldw	r2,-48(fp)
 80025f0:	10800044 	addi	r2,r2,1
 80025f4:	e13ffe17 	ldw	r4,-8(fp)
 80025f8:	100b883a 	mov	r5,r2
 80025fc:	01800044 	movi	r6,1
 8002600:	8001a540 	call	8001a54 <arith_encode>
						arith_encode(cinfo, entropy->fixed_bin, 1);
 8002604:	e0bffa17 	ldw	r2,-24(fp)
 8002608:	10803304 	addi	r2,r2,204
 800260c:	e13ffe17 	ldw	r4,-8(fp)
 8002610:	100b883a 	mov	r5,r2
 8002614:	01800044 	movi	r6,1
 8002618:	8001a540 	call	8001a54 <arith_encode>
						break;
 800261c:	00000d06 	br	8002654 <encode_mcu_AC_first+0x2f0>
					}
				}
				arith_encode(cinfo, st + 1, 0); st += 3; k++;
 8002620:	e0bff417 	ldw	r2,-48(fp)
 8002624:	10800044 	addi	r2,r2,1
 8002628:	e13ffe17 	ldw	r4,-8(fp)
 800262c:	100b883a 	mov	r5,r2
 8002630:	000d883a 	mov	r6,zero
 8002634:	8001a540 	call	8001a54 <arith_encode>
 8002638:	e0bff417 	ldw	r2,-48(fp)
 800263c:	108000c4 	addi	r2,r2,3
 8002640:	e0bff415 	stw	r2,-48(fp)
 8002644:	e0bff517 	ldw	r2,-44(fp)
 8002648:	10800044 	addi	r2,r2,1
 800264c:	e0bff515 	stw	r2,-44(fp)
			}
 8002650:	003fb806 	br	8002534 <encode_mcu_AC_first+0x1d0>
			st += 2;
 8002654:	e0bff417 	ldw	r2,-48(fp)
 8002658:	10800084 	addi	r2,r2,2
 800265c:	e0bff415 	stw	r2,-48(fp)
			/* Figure F.8: Encoding the magnitude category of v */
			m = 0;
 8002660:	e03ff915 	stw	zero,-28(fp)
			if (v -= 1) {
 8002664:	e0bff717 	ldw	r2,-36(fp)
 8002668:	10bfffc4 	addi	r2,r2,-1
 800266c:	e0bff715 	stw	r2,-36(fp)
 8002670:	e0bff717 	ldw	r2,-36(fp)
 8002674:	10003826 	beq	r2,zero,8002758 <encode_mcu_AC_first+0x3f4>
				arith_encode(cinfo, st, 1);
 8002678:	e13ffe17 	ldw	r4,-8(fp)
 800267c:	e17ff417 	ldw	r5,-48(fp)
 8002680:	01800044 	movi	r6,1
 8002684:	8001a540 	call	8001a54 <arith_encode>
				m = 1;
 8002688:	00800044 	movi	r2,1
 800268c:	e0bff915 	stw	r2,-28(fp)
				v2 = v;
 8002690:	e0bff717 	ldw	r2,-36(fp)
 8002694:	e0bff815 	stw	r2,-32(fp)
				if (v2 >>= 1) {
 8002698:	e0bff817 	ldw	r2,-32(fp)
 800269c:	1005d07a 	srai	r2,r2,1
 80026a0:	e0bff815 	stw	r2,-32(fp)
 80026a4:	e0bff817 	ldw	r2,-32(fp)
 80026a8:	10002b26 	beq	r2,zero,8002758 <encode_mcu_AC_first+0x3f4>
					arith_encode(cinfo, st, 1);
 80026ac:	e13ffe17 	ldw	r4,-8(fp)
 80026b0:	e17ff417 	ldw	r5,-48(fp)
 80026b4:	01800044 	movi	r6,1
 80026b8:	8001a540 	call	8001a54 <arith_encode>
					m <<= 1;
 80026bc:	e0bff917 	ldw	r2,-28(fp)
 80026c0:	1085883a 	add	r2,r2,r2
 80026c4:	e0bff915 	stw	r2,-28(fp)
					st = entropy->ac_stats[tbl] +
 80026c8:	e0fffa17 	ldw	r3,-24(fp)
 80026cc:	e0bffd17 	ldw	r2,-12(fp)
 80026d0:	108008c4 	addi	r2,r2,35
 80026d4:	1085883a 	add	r2,r2,r2
 80026d8:	1085883a 	add	r2,r2,r2
 80026dc:	1885883a 	add	r2,r3,r2
 80026e0:	10c00017 	ldw	r3,0(r2)
						(k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 80026e4:	e13ffe17 	ldw	r4,-8(fp)
 80026e8:	e0bffd17 	ldw	r2,-12(fp)
 80026ec:	2085883a 	add	r2,r4,r2
 80026f0:	10802d04 	addi	r2,r2,180
 80026f4:	10800003 	ldbu	r2,0(r2)
 80026f8:	11003fcc 	andi	r4,r2,255
				m = 1;
				v2 = v;
				if (v2 >>= 1) {
					arith_encode(cinfo, st, 1);
					m <<= 1;
					st = entropy->ac_stats[tbl] +
 80026fc:	e0bff517 	ldw	r2,-44(fp)
 8002700:	20800216 	blt	r4,r2,800270c <encode_mcu_AC_first+0x3a8>
 8002704:	00802f44 	movi	r2,189
 8002708:	00000106 	br	8002710 <encode_mcu_AC_first+0x3ac>
 800270c:	00803644 	movi	r2,217
 8002710:	1885883a 	add	r2,r3,r2
 8002714:	e0bff415 	stw	r2,-48(fp)
						(k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
					while (v2 >>= 1) {
 8002718:	00000a06 	br	8002744 <encode_mcu_AC_first+0x3e0>
						arith_encode(cinfo, st, 1);
 800271c:	e13ffe17 	ldw	r4,-8(fp)
 8002720:	e17ff417 	ldw	r5,-48(fp)
 8002724:	01800044 	movi	r6,1
 8002728:	8001a540 	call	8001a54 <arith_encode>
						m <<= 1;
 800272c:	e0bff917 	ldw	r2,-28(fp)
 8002730:	1085883a 	add	r2,r2,r2
 8002734:	e0bff915 	stw	r2,-28(fp)
						st += 1;
 8002738:	e0bff417 	ldw	r2,-48(fp)
 800273c:	10800044 	addi	r2,r2,1
 8002740:	e0bff415 	stw	r2,-48(fp)
				if (v2 >>= 1) {
					arith_encode(cinfo, st, 1);
					m <<= 1;
					st = entropy->ac_stats[tbl] +
						(k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
					while (v2 >>= 1) {
 8002744:	e0bff817 	ldw	r2,-32(fp)
 8002748:	1005d07a 	srai	r2,r2,1
 800274c:	e0bff815 	stw	r2,-32(fp)
 8002750:	e0bff817 	ldw	r2,-32(fp)
 8002754:	103ff11e 	bne	r2,zero,800271c <encode_mcu_AC_first+0x3b8>
						m <<= 1;
						st += 1;
					}
				}
			}
			arith_encode(cinfo, st, 0);
 8002758:	e13ffe17 	ldw	r4,-8(fp)
 800275c:	e17ff417 	ldw	r5,-48(fp)
 8002760:	000d883a 	mov	r6,zero
 8002764:	8001a540 	call	8001a54 <arith_encode>
			/* Figure F.9: Encoding the magnitude bit pattern of v */
			st += 14;
 8002768:	e0bff417 	ldw	r2,-48(fp)
 800276c:	10800384 	addi	r2,r2,14
 8002770:	e0bff415 	stw	r2,-48(fp)
			while (m >>= 1)
 8002774:	00000906 	br	800279c <encode_mcu_AC_first+0x438>
				arith_encode(cinfo, st, (m & v) ? 1 : 0);
 8002778:	e0fff917 	ldw	r3,-28(fp)
 800277c:	e0bff717 	ldw	r2,-36(fp)
 8002780:	1884703a 	and	r2,r3,r2
 8002784:	1004c03a 	cmpne	r2,r2,zero
 8002788:	10803fcc 	andi	r2,r2,255
 800278c:	e13ffe17 	ldw	r4,-8(fp)
 8002790:	e17ff417 	ldw	r5,-48(fp)
 8002794:	100d883a 	mov	r6,r2
 8002798:	8001a540 	call	8001a54 <arith_encode>
				}
			}
			arith_encode(cinfo, st, 0);
			/* Figure F.9: Encoding the magnitude bit pattern of v */
			st += 14;
			while (m >>= 1)
 800279c:	e0bff917 	ldw	r2,-28(fp)
 80027a0:	1005d07a 	srai	r2,r2,1
 80027a4:	e0bff915 	stw	r2,-28(fp)
 80027a8:	e0bff917 	ldw	r2,-28(fp)
 80027ac:	103ff21e 	bne	r2,zero,8002778 <encode_mcu_AC_first+0x414>
			v = -v;
			if (v >>= cinfo->Al) break;
		}

		/* Figure F.5: Encode_AC_Coefficients */
		for (k = cinfo->Ss; k <= ke; k++) {
 80027b0:	e0bff517 	ldw	r2,-44(fp)
 80027b4:	10800044 	addi	r2,r2,1
 80027b8:	e0bff515 	stw	r2,-44(fp)
 80027bc:	e0bff517 	ldw	r2,-44(fp)
 80027c0:	e0fff617 	ldw	r3,-40(fp)
 80027c4:	18bf490e 	bge	r3,r2,80024ec <encode_mcu_AC_first+0x188>
			st += 14;
			while (m >>= 1)
				arith_encode(cinfo, st, (m & v) ? 1 : 0);
		}
		/* Encode EOB decision only if k <= cinfo->Se */
		if (k <= cinfo->Se) {
 80027c8:	e0bffe17 	ldw	r2,-8(fp)
 80027cc:	10c05617 	ldw	r3,344(r2)
 80027d0:	e0bff517 	ldw	r2,-44(fp)
 80027d4:	18801216 	blt	r3,r2,8002820 <encode_mcu_AC_first+0x4bc>
			st = entropy->ac_stats[tbl] + 3 * (k - 1);
 80027d8:	e0fffa17 	ldw	r3,-24(fp)
 80027dc:	e0bffd17 	ldw	r2,-12(fp)
 80027e0:	108008c4 	addi	r2,r2,35
 80027e4:	1085883a 	add	r2,r2,r2
 80027e8:	1085883a 	add	r2,r2,r2
 80027ec:	1885883a 	add	r2,r3,r2
 80027f0:	11000017 	ldw	r4,0(r2)
 80027f4:	e0bff517 	ldw	r2,-44(fp)
 80027f8:	10ffffc4 	addi	r3,r2,-1
 80027fc:	1805883a 	mov	r2,r3
 8002800:	1085883a 	add	r2,r2,r2
 8002804:	10c5883a 	add	r2,r2,r3
 8002808:	2085883a 	add	r2,r4,r2
 800280c:	e0bff415 	stw	r2,-48(fp)
			arith_encode(cinfo, st, 1);
 8002810:	e13ffe17 	ldw	r4,-8(fp)
 8002814:	e17ff417 	ldw	r5,-48(fp)
 8002818:	01800044 	movi	r6,1
 800281c:	8001a540 	call	8001a54 <arith_encode>
		}

		return TRUE;
 8002820:	00800044 	movi	r2,1
}
 8002824:	e037883a 	mov	sp,fp
 8002828:	dfc00117 	ldw	ra,4(sp)
 800282c:	df000017 	ldw	fp,0(sp)
 8002830:	dec00204 	addi	sp,sp,8
 8002834:	f800283a 	ret

08002838 <encode_mcu_DC_refine>:
* MCU encoding for DC successive approximation refinement scan.
*/

METHODDEF(boolean)
	encode_mcu_DC_refine (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
{
 8002838:	defff804 	addi	sp,sp,-32
 800283c:	dfc00715 	stw	ra,28(sp)
 8002840:	df000615 	stw	fp,24(sp)
 8002844:	df000604 	addi	fp,sp,24
 8002848:	e13ffe15 	stw	r4,-8(fp)
 800284c:	e17fff15 	stw	r5,-4(fp)
	arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 8002850:	e0bffe17 	ldw	r2,-8(fp)
 8002854:	10806417 	ldw	r2,400(r2)
 8002858:	e0bffb15 	stw	r2,-20(fp)
	unsigned char *st;
	int Al, blkn;

	/* Emit restart marker if needed */
	if (cinfo->restart_interval) {
 800285c:	e0bffe17 	ldw	r2,-8(fp)
 8002860:	10803717 	ldw	r2,220(r2)
 8002864:	10001b26 	beq	r2,zero,80028d4 <encode_mcu_DC_refine+0x9c>
		if (entropy->restarts_to_go == 0) {
 8002868:	e0bffb17 	ldw	r2,-20(fp)
 800286c:	10801117 	ldw	r2,68(r2)
 8002870:	1000131e 	bne	r2,zero,80028c0 <encode_mcu_DC_refine+0x88>
			emit_restart(cinfo, entropy->next_restart_num);
 8002874:	e0bffb17 	ldw	r2,-20(fp)
 8002878:	10801217 	ldw	r2,72(r2)
 800287c:	e13ffe17 	ldw	r4,-8(fp)
 8002880:	100b883a 	mov	r5,r2
 8002884:	8001d540 	call	8001d54 <emit_restart>
			entropy->restarts_to_go = cinfo->restart_interval;
 8002888:	e0bffe17 	ldw	r2,-8(fp)
 800288c:	10c03717 	ldw	r3,220(r2)
 8002890:	e0bffb17 	ldw	r2,-20(fp)
 8002894:	10c01115 	stw	r3,68(r2)
			entropy->next_restart_num++;
 8002898:	e0bffb17 	ldw	r2,-20(fp)
 800289c:	10801217 	ldw	r2,72(r2)
 80028a0:	10c00044 	addi	r3,r2,1
 80028a4:	e0bffb17 	ldw	r2,-20(fp)
 80028a8:	10c01215 	stw	r3,72(r2)
			entropy->next_restart_num &= 7;
 80028ac:	e0bffb17 	ldw	r2,-20(fp)
 80028b0:	10801217 	ldw	r2,72(r2)
 80028b4:	10c001cc 	andi	r3,r2,7
 80028b8:	e0bffb17 	ldw	r2,-20(fp)
 80028bc:	10c01215 	stw	r3,72(r2)
		}
		entropy->restarts_to_go--;
 80028c0:	e0bffb17 	ldw	r2,-20(fp)
 80028c4:	10801117 	ldw	r2,68(r2)
 80028c8:	10ffffc4 	addi	r3,r2,-1
 80028cc:	e0bffb17 	ldw	r2,-20(fp)
 80028d0:	10c01115 	stw	r3,68(r2)
	}

	st = entropy->fixed_bin;	/* use fixed probability estimation */
 80028d4:	e0bffb17 	ldw	r2,-20(fp)
 80028d8:	10803304 	addi	r2,r2,204
 80028dc:	e0bffc15 	stw	r2,-16(fp)
	Al = cinfo->Al;
 80028e0:	e0bffe17 	ldw	r2,-8(fp)
 80028e4:	10805817 	ldw	r2,352(r2)
 80028e8:	e0bffd15 	stw	r2,-12(fp)

	/* Encode the MCU data blocks */
	for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 80028ec:	e03ffa15 	stw	zero,-24(fp)
 80028f0:	00001406 	br	8002944 <encode_mcu_DC_refine+0x10c>
		/* We simply emit the Al'th bit of the DC coefficient value. */
		arith_encode(cinfo, st, (MCU_data[blkn][0][0] >> Al) & 1);
 80028f4:	e0bffa17 	ldw	r2,-24(fp)
 80028f8:	1085883a 	add	r2,r2,r2
 80028fc:	1085883a 	add	r2,r2,r2
 8002900:	e0ffff17 	ldw	r3,-4(fp)
 8002904:	1885883a 	add	r2,r3,r2
 8002908:	10800017 	ldw	r2,0(r2)
 800290c:	1080000b 	ldhu	r2,0(r2)
 8002910:	10ffffcc 	andi	r3,r2,65535
 8002914:	18e0001c 	xori	r3,r3,32768
 8002918:	18e00004 	addi	r3,r3,-32768
 800291c:	e0bffd17 	ldw	r2,-12(fp)
 8002920:	1885d83a 	sra	r2,r3,r2
 8002924:	1080004c 	andi	r2,r2,1
 8002928:	e13ffe17 	ldw	r4,-8(fp)
 800292c:	e17ffc17 	ldw	r5,-16(fp)
 8002930:	100d883a 	mov	r6,r2
 8002934:	8001a540 	call	8001a54 <arith_encode>

	st = entropy->fixed_bin;	/* use fixed probability estimation */
	Al = cinfo->Al;

	/* Encode the MCU data blocks */
	for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8002938:	e0bffa17 	ldw	r2,-24(fp)
 800293c:	10800044 	addi	r2,r2,1
 8002940:	e0bffa15 	stw	r2,-24(fp)
 8002944:	e0bffe17 	ldw	r2,-8(fp)
 8002948:	10804a17 	ldw	r2,296(r2)
 800294c:	e0fffa17 	ldw	r3,-24(fp)
 8002950:	18bfe816 	blt	r3,r2,80028f4 <encode_mcu_DC_refine+0xbc>
		/* We simply emit the Al'th bit of the DC coefficient value. */
		arith_encode(cinfo, st, (MCU_data[blkn][0][0] >> Al) & 1);
	}

	return TRUE;
 8002954:	00800044 	movi	r2,1
}
 8002958:	e037883a 	mov	sp,fp
 800295c:	dfc00117 	ldw	ra,4(sp)
 8002960:	df000017 	ldw	fp,0(sp)
 8002964:	dec00204 	addi	sp,sp,8
 8002968:	f800283a 	ret

0800296c <encode_mcu_AC_refine>:
* MCU encoding for AC successive approximation refinement scan.
*/

METHODDEF(boolean)
	encode_mcu_AC_refine (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
{
 800296c:	defff304 	addi	sp,sp,-52
 8002970:	dfc00c15 	stw	ra,48(sp)
 8002974:	df000b15 	stw	fp,44(sp)
 8002978:	df000b04 	addi	fp,sp,44
 800297c:	e13ffe15 	stw	r4,-8(fp)
 8002980:	e17fff15 	stw	r5,-4(fp)
	arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 8002984:	e0bffe17 	ldw	r2,-8(fp)
 8002988:	10806417 	ldw	r2,400(r2)
 800298c:	e0bff915 	stw	r2,-28(fp)
	int tbl, k, ke, kex;
	int v;
	const int * natural_order;

	/* Emit restart marker if needed */
	if (cinfo->restart_interval) {
 8002990:	e0bffe17 	ldw	r2,-8(fp)
 8002994:	10803717 	ldw	r2,220(r2)
 8002998:	10001b26 	beq	r2,zero,8002a08 <encode_mcu_AC_refine+0x9c>
		if (entropy->restarts_to_go == 0) {
 800299c:	e0bff917 	ldw	r2,-28(fp)
 80029a0:	10801117 	ldw	r2,68(r2)
 80029a4:	1000131e 	bne	r2,zero,80029f4 <encode_mcu_AC_refine+0x88>
			emit_restart(cinfo, entropy->next_restart_num);
 80029a8:	e0bff917 	ldw	r2,-28(fp)
 80029ac:	10801217 	ldw	r2,72(r2)
 80029b0:	e13ffe17 	ldw	r4,-8(fp)
 80029b4:	100b883a 	mov	r5,r2
 80029b8:	8001d540 	call	8001d54 <emit_restart>
			entropy->restarts_to_go = cinfo->restart_interval;
 80029bc:	e0bffe17 	ldw	r2,-8(fp)
 80029c0:	10c03717 	ldw	r3,220(r2)
 80029c4:	e0bff917 	ldw	r2,-28(fp)
 80029c8:	10c01115 	stw	r3,68(r2)
			entropy->next_restart_num++;
 80029cc:	e0bff917 	ldw	r2,-28(fp)
 80029d0:	10801217 	ldw	r2,72(r2)
 80029d4:	10c00044 	addi	r3,r2,1
 80029d8:	e0bff917 	ldw	r2,-28(fp)
 80029dc:	10c01215 	stw	r3,72(r2)
			entropy->next_restart_num &= 7;
 80029e0:	e0bff917 	ldw	r2,-28(fp)
 80029e4:	10801217 	ldw	r2,72(r2)
 80029e8:	10c001cc 	andi	r3,r2,7
 80029ec:	e0bff917 	ldw	r2,-28(fp)
 80029f0:	10c01215 	stw	r3,72(r2)
		}
		entropy->restarts_to_go--;
 80029f4:	e0bff917 	ldw	r2,-28(fp)
 80029f8:	10801117 	ldw	r2,68(r2)
 80029fc:	10ffffc4 	addi	r3,r2,-1
 8002a00:	e0bff917 	ldw	r2,-28(fp)
 8002a04:	10c01115 	stw	r3,68(r2)
	}

	natural_order = cinfo->natural_order;
 8002a08:	e0bffe17 	ldw	r2,-8(fp)
 8002a0c:	10805a17 	ldw	r2,360(r2)
 8002a10:	e0bffa15 	stw	r2,-24(fp)

	/* Encode the MCU data block */
	block = MCU_data[0];
 8002a14:	e0bfff17 	ldw	r2,-4(fp)
 8002a18:	10800017 	ldw	r2,0(r2)
 8002a1c:	e0bffb15 	stw	r2,-20(fp)
	tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 8002a20:	e0bffe17 	ldw	r2,-8(fp)
 8002a24:	10804417 	ldw	r2,272(r2)
 8002a28:	10800617 	ldw	r2,24(r2)
 8002a2c:	e0bffc15 	stw	r2,-16(fp)

	/* Section G.1.3.3: Encoding of AC coefficients */

	/* Establish EOB (end-of-block) index */
	for (ke = cinfo->Se; ke > 0; ke--)
 8002a30:	e0bffe17 	ldw	r2,-8(fp)
 8002a34:	10805617 	ldw	r2,344(r2)
 8002a38:	e0bff715 	stw	r2,-36(fp)
 8002a3c:	00002506 	br	8002ad4 <encode_mcu_AC_refine+0x168>
		/* We must apply the point transform by Al.  For AC coefficients this
		* is an integer division with rounding towards 0.  To do this portably
		* in C, we shift after obtaining the absolute value.
		*/
		if ((v = (*block)[natural_order[ke]]) >= 0) {
 8002a40:	e0bff717 	ldw	r2,-36(fp)
 8002a44:	1085883a 	add	r2,r2,r2
 8002a48:	1085883a 	add	r2,r2,r2
 8002a4c:	e0fffa17 	ldw	r3,-24(fp)
 8002a50:	1885883a 	add	r2,r3,r2
 8002a54:	10800017 	ldw	r2,0(r2)
 8002a58:	e0fffb17 	ldw	r3,-20(fp)
 8002a5c:	1085883a 	add	r2,r2,r2
 8002a60:	1885883a 	add	r2,r3,r2
 8002a64:	1080000b 	ldhu	r2,0(r2)
 8002a68:	10bfffcc 	andi	r2,r2,65535
 8002a6c:	10a0001c 	xori	r2,r2,32768
 8002a70:	10a00004 	addi	r2,r2,-32768
 8002a74:	e0bffd15 	stw	r2,-12(fp)
 8002a78:	e0bffd17 	ldw	r2,-12(fp)
 8002a7c:	10000816 	blt	r2,zero,8002aa0 <encode_mcu_AC_refine+0x134>
			if (v >>= cinfo->Al) break;
 8002a80:	e0bffe17 	ldw	r2,-8(fp)
 8002a84:	10805817 	ldw	r2,352(r2)
 8002a88:	e0fffd17 	ldw	r3,-12(fp)
 8002a8c:	1885d83a 	sra	r2,r3,r2
 8002a90:	e0bffd15 	stw	r2,-12(fp)
 8002a94:	e0bffd17 	ldw	r2,-12(fp)
 8002a98:	10000b26 	beq	r2,zero,8002ac8 <encode_mcu_AC_refine+0x15c>
 8002a9c:	00001106 	br	8002ae4 <encode_mcu_AC_refine+0x178>
		} else {
			v = -v;
 8002aa0:	e0bffd17 	ldw	r2,-12(fp)
 8002aa4:	0085c83a 	sub	r2,zero,r2
 8002aa8:	e0bffd15 	stw	r2,-12(fp)
			if (v >>= cinfo->Al) break;
 8002aac:	e0bffe17 	ldw	r2,-8(fp)
 8002ab0:	10805817 	ldw	r2,352(r2)
 8002ab4:	e0fffd17 	ldw	r3,-12(fp)
 8002ab8:	1885d83a 	sra	r2,r3,r2
 8002abc:	e0bffd15 	stw	r2,-12(fp)
 8002ac0:	e0bffd17 	ldw	r2,-12(fp)
 8002ac4:	1000061e 	bne	r2,zero,8002ae0 <encode_mcu_AC_refine+0x174>
	tbl = cinfo->cur_comp_info[0]->ac_tbl_no;

	/* Section G.1.3.3: Encoding of AC coefficients */

	/* Establish EOB (end-of-block) index */
	for (ke = cinfo->Se; ke > 0; ke--)
 8002ac8:	e0bff717 	ldw	r2,-36(fp)
 8002acc:	10bfffc4 	addi	r2,r2,-1
 8002ad0:	e0bff715 	stw	r2,-36(fp)
 8002ad4:	e0bff717 	ldw	r2,-36(fp)
 8002ad8:	00bfd916 	blt	zero,r2,8002a40 <encode_mcu_AC_refine+0xd4>
 8002adc:	00000106 	br	8002ae4 <encode_mcu_AC_refine+0x178>
		*/
		if ((v = (*block)[natural_order[ke]]) >= 0) {
			if (v >>= cinfo->Al) break;
		} else {
			v = -v;
			if (v >>= cinfo->Al) break;
 8002ae0:	0001883a 	nop
		}

		/* Establish EOBx (previous stage end-of-block) index */
		for (kex = ke; kex > 0; kex--)
 8002ae4:	e0bff717 	ldw	r2,-36(fp)
 8002ae8:	e0bff815 	stw	r2,-32(fp)
 8002aec:	00002506 	br	8002b84 <encode_mcu_AC_refine+0x218>
			if ((v = (*block)[natural_order[kex]]) >= 0) {
 8002af0:	e0bff817 	ldw	r2,-32(fp)
 8002af4:	1085883a 	add	r2,r2,r2
 8002af8:	1085883a 	add	r2,r2,r2
 8002afc:	e0fffa17 	ldw	r3,-24(fp)
 8002b00:	1885883a 	add	r2,r3,r2
 8002b04:	10800017 	ldw	r2,0(r2)
 8002b08:	e0fffb17 	ldw	r3,-20(fp)
 8002b0c:	1085883a 	add	r2,r2,r2
 8002b10:	1885883a 	add	r2,r3,r2
 8002b14:	1080000b 	ldhu	r2,0(r2)
 8002b18:	10bfffcc 	andi	r2,r2,65535
 8002b1c:	10a0001c 	xori	r2,r2,32768
 8002b20:	10a00004 	addi	r2,r2,-32768
 8002b24:	e0bffd15 	stw	r2,-12(fp)
 8002b28:	e0bffd17 	ldw	r2,-12(fp)
 8002b2c:	10000816 	blt	r2,zero,8002b50 <encode_mcu_AC_refine+0x1e4>
				if (v >>= cinfo->Ah) break;
 8002b30:	e0bffe17 	ldw	r2,-8(fp)
 8002b34:	10805717 	ldw	r2,348(r2)
 8002b38:	e0fffd17 	ldw	r3,-12(fp)
 8002b3c:	1885d83a 	sra	r2,r3,r2
 8002b40:	e0bffd15 	stw	r2,-12(fp)
 8002b44:	e0bffd17 	ldw	r2,-12(fp)
 8002b48:	10000b26 	beq	r2,zero,8002b78 <encode_mcu_AC_refine+0x20c>
 8002b4c:	00001106 	br	8002b94 <encode_mcu_AC_refine+0x228>
			} else {
				v = -v;
 8002b50:	e0bffd17 	ldw	r2,-12(fp)
 8002b54:	0085c83a 	sub	r2,zero,r2
 8002b58:	e0bffd15 	stw	r2,-12(fp)
				if (v >>= cinfo->Ah) break;
 8002b5c:	e0bffe17 	ldw	r2,-8(fp)
 8002b60:	10805717 	ldw	r2,348(r2)
 8002b64:	e0fffd17 	ldw	r3,-12(fp)
 8002b68:	1885d83a 	sra	r2,r3,r2
 8002b6c:	e0bffd15 	stw	r2,-12(fp)
 8002b70:	e0bffd17 	ldw	r2,-12(fp)
 8002b74:	1000061e 	bne	r2,zero,8002b90 <encode_mcu_AC_refine+0x224>
			v = -v;
			if (v >>= cinfo->Al) break;
		}

		/* Establish EOBx (previous stage end-of-block) index */
		for (kex = ke; kex > 0; kex--)
 8002b78:	e0bff817 	ldw	r2,-32(fp)
 8002b7c:	10bfffc4 	addi	r2,r2,-1
 8002b80:	e0bff815 	stw	r2,-32(fp)
 8002b84:	e0bff817 	ldw	r2,-32(fp)
 8002b88:	00bfd916 	blt	zero,r2,8002af0 <encode_mcu_AC_refine+0x184>
 8002b8c:	00000106 	br	8002b94 <encode_mcu_AC_refine+0x228>
			if ((v = (*block)[natural_order[kex]]) >= 0) {
				if (v >>= cinfo->Ah) break;
			} else {
				v = -v;
				if (v >>= cinfo->Ah) break;
 8002b90:	0001883a 	nop
			}

			/* Figure G.10: Encode_AC_Coefficients_SA */
			for (k = cinfo->Ss; k <= ke; k++) {
 8002b94:	e0bffe17 	ldw	r2,-8(fp)
 8002b98:	10805517 	ldw	r2,340(r2)
 8002b9c:	e0bff615 	stw	r2,-40(fp)
 8002ba0:	00007806 	br	8002d84 <encode_mcu_AC_refine+0x418>
				st = entropy->ac_stats[tbl] + 3 * (k - 1);
 8002ba4:	e0fff917 	ldw	r3,-28(fp)
 8002ba8:	e0bffc17 	ldw	r2,-16(fp)
 8002bac:	108008c4 	addi	r2,r2,35
 8002bb0:	1085883a 	add	r2,r2,r2
 8002bb4:	1085883a 	add	r2,r2,r2
 8002bb8:	1885883a 	add	r2,r3,r2
 8002bbc:	11000017 	ldw	r4,0(r2)
 8002bc0:	e0bff617 	ldw	r2,-40(fp)
 8002bc4:	10ffffc4 	addi	r3,r2,-1
 8002bc8:	1805883a 	mov	r2,r3
 8002bcc:	1085883a 	add	r2,r2,r2
 8002bd0:	10c5883a 	add	r2,r2,r3
 8002bd4:	2085883a 	add	r2,r4,r2
 8002bd8:	e0bff515 	stw	r2,-44(fp)
				if (k > kex)
 8002bdc:	e0bff617 	ldw	r2,-40(fp)
 8002be0:	e0fff817 	ldw	r3,-32(fp)
 8002be4:	1880040e 	bge	r3,r2,8002bf8 <encode_mcu_AC_refine+0x28c>
					arith_encode(cinfo, st, 0);	/* EOB decision */
 8002be8:	e13ffe17 	ldw	r4,-8(fp)
 8002bec:	e17ff517 	ldw	r5,-44(fp)
 8002bf0:	000d883a 	mov	r6,zero
 8002bf4:	8001a540 	call	8001a54 <arith_encode>
				for (;;) {
					if ((v = (*block)[natural_order[k]]) >= 0) {
 8002bf8:	e0bff617 	ldw	r2,-40(fp)
 8002bfc:	1085883a 	add	r2,r2,r2
 8002c00:	1085883a 	add	r2,r2,r2
 8002c04:	e0fffa17 	ldw	r3,-24(fp)
 8002c08:	1885883a 	add	r2,r3,r2
 8002c0c:	10800017 	ldw	r2,0(r2)
 8002c10:	e0fffb17 	ldw	r3,-20(fp)
 8002c14:	1085883a 	add	r2,r2,r2
 8002c18:	1885883a 	add	r2,r3,r2
 8002c1c:	1080000b 	ldhu	r2,0(r2)
 8002c20:	10bfffcc 	andi	r2,r2,65535
 8002c24:	10a0001c 	xori	r2,r2,32768
 8002c28:	10a00004 	addi	r2,r2,-32768
 8002c2c:	e0bffd15 	stw	r2,-12(fp)
 8002c30:	e0bffd17 	ldw	r2,-12(fp)
 8002c34:	10002016 	blt	r2,zero,8002cb8 <encode_mcu_AC_refine+0x34c>
						if (v >>= cinfo->Al) {
 8002c38:	e0bffe17 	ldw	r2,-8(fp)
 8002c3c:	10805817 	ldw	r2,352(r2)
 8002c40:	e0fffd17 	ldw	r3,-12(fp)
 8002c44:	1885d83a 	sra	r2,r3,r2
 8002c48:	e0bffd15 	stw	r2,-12(fp)
 8002c4c:	e0bffd17 	ldw	r2,-12(fp)
 8002c50:	10003c26 	beq	r2,zero,8002d44 <encode_mcu_AC_refine+0x3d8>
							if (v >> 1)			/* previously nonzero coef */
 8002c54:	e0bffd17 	ldw	r2,-12(fp)
 8002c58:	1005d07a 	srai	r2,r2,1
 8002c5c:	10000926 	beq	r2,zero,8002c84 <encode_mcu_AC_refine+0x318>
								arith_encode(cinfo, st + 2, (v & 1));
 8002c60:	e0bff517 	ldw	r2,-44(fp)
 8002c64:	10c00084 	addi	r3,r2,2
 8002c68:	e0bffd17 	ldw	r2,-12(fp)
 8002c6c:	1080004c 	andi	r2,r2,1
 8002c70:	e13ffe17 	ldw	r4,-8(fp)
 8002c74:	180b883a 	mov	r5,r3
 8002c78:	100d883a 	mov	r6,r2
 8002c7c:	8001a540 	call	8001a54 <arith_encode>
							else {			/* newly nonzero coef */
								arith_encode(cinfo, st + 1, 1);
								arith_encode(cinfo, entropy->fixed_bin, 0);
							}
							break;
 8002c80:	00003d06 	br	8002d78 <encode_mcu_AC_refine+0x40c>
					if ((v = (*block)[natural_order[k]]) >= 0) {
						if (v >>= cinfo->Al) {
							if (v >> 1)			/* previously nonzero coef */
								arith_encode(cinfo, st + 2, (v & 1));
							else {			/* newly nonzero coef */
								arith_encode(cinfo, st + 1, 1);
 8002c84:	e0bff517 	ldw	r2,-44(fp)
 8002c88:	10800044 	addi	r2,r2,1
 8002c8c:	e13ffe17 	ldw	r4,-8(fp)
 8002c90:	100b883a 	mov	r5,r2
 8002c94:	01800044 	movi	r6,1
 8002c98:	8001a540 	call	8001a54 <arith_encode>
								arith_encode(cinfo, entropy->fixed_bin, 0);
 8002c9c:	e0bff917 	ldw	r2,-28(fp)
 8002ca0:	10803304 	addi	r2,r2,204
 8002ca4:	e13ffe17 	ldw	r4,-8(fp)
 8002ca8:	100b883a 	mov	r5,r2
 8002cac:	000d883a 	mov	r6,zero
 8002cb0:	8001a540 	call	8001a54 <arith_encode>
							}
							break;
 8002cb4:	00003006 	br	8002d78 <encode_mcu_AC_refine+0x40c>
						}
					} else {
						v = -v;
 8002cb8:	e0bffd17 	ldw	r2,-12(fp)
 8002cbc:	0085c83a 	sub	r2,zero,r2
 8002cc0:	e0bffd15 	stw	r2,-12(fp)
						if (v >>= cinfo->Al) {
 8002cc4:	e0bffe17 	ldw	r2,-8(fp)
 8002cc8:	10805817 	ldw	r2,352(r2)
 8002ccc:	e0fffd17 	ldw	r3,-12(fp)
 8002cd0:	1885d83a 	sra	r2,r3,r2
 8002cd4:	e0bffd15 	stw	r2,-12(fp)
 8002cd8:	e0bffd17 	ldw	r2,-12(fp)
 8002cdc:	10001926 	beq	r2,zero,8002d44 <encode_mcu_AC_refine+0x3d8>
							if (v >> 1)			/* previously nonzero coef */
 8002ce0:	e0bffd17 	ldw	r2,-12(fp)
 8002ce4:	1005d07a 	srai	r2,r2,1
 8002ce8:	10000926 	beq	r2,zero,8002d10 <encode_mcu_AC_refine+0x3a4>
								arith_encode(cinfo, st + 2, (v & 1));
 8002cec:	e0bff517 	ldw	r2,-44(fp)
 8002cf0:	10c00084 	addi	r3,r2,2
 8002cf4:	e0bffd17 	ldw	r2,-12(fp)
 8002cf8:	1080004c 	andi	r2,r2,1
 8002cfc:	e13ffe17 	ldw	r4,-8(fp)
 8002d00:	180b883a 	mov	r5,r3
 8002d04:	100d883a 	mov	r6,r2
 8002d08:	8001a540 	call	8001a54 <arith_encode>
							else {			/* newly nonzero coef */
								arith_encode(cinfo, st + 1, 1);
								arith_encode(cinfo, entropy->fixed_bin, 1);
							}
							break;
 8002d0c:	00001a06 	br	8002d78 <encode_mcu_AC_refine+0x40c>
						v = -v;
						if (v >>= cinfo->Al) {
							if (v >> 1)			/* previously nonzero coef */
								arith_encode(cinfo, st + 2, (v & 1));
							else {			/* newly nonzero coef */
								arith_encode(cinfo, st + 1, 1);
 8002d10:	e0bff517 	ldw	r2,-44(fp)
 8002d14:	10800044 	addi	r2,r2,1
 8002d18:	e13ffe17 	ldw	r4,-8(fp)
 8002d1c:	100b883a 	mov	r5,r2
 8002d20:	01800044 	movi	r6,1
 8002d24:	8001a540 	call	8001a54 <arith_encode>
								arith_encode(cinfo, entropy->fixed_bin, 1);
 8002d28:	e0bff917 	ldw	r2,-28(fp)
 8002d2c:	10803304 	addi	r2,r2,204
 8002d30:	e13ffe17 	ldw	r4,-8(fp)
 8002d34:	100b883a 	mov	r5,r2
 8002d38:	01800044 	movi	r6,1
 8002d3c:	8001a540 	call	8001a54 <arith_encode>
							}
							break;
 8002d40:	00000d06 	br	8002d78 <encode_mcu_AC_refine+0x40c>
						}
					}
					arith_encode(cinfo, st + 1, 0); st += 3; k++;
 8002d44:	e0bff517 	ldw	r2,-44(fp)
 8002d48:	10800044 	addi	r2,r2,1
 8002d4c:	e13ffe17 	ldw	r4,-8(fp)
 8002d50:	100b883a 	mov	r5,r2
 8002d54:	000d883a 	mov	r6,zero
 8002d58:	8001a540 	call	8001a54 <arith_encode>
 8002d5c:	e0bff517 	ldw	r2,-44(fp)
 8002d60:	108000c4 	addi	r2,r2,3
 8002d64:	e0bff515 	stw	r2,-44(fp)
 8002d68:	e0bff617 	ldw	r2,-40(fp)
 8002d6c:	10800044 	addi	r2,r2,1
 8002d70:	e0bff615 	stw	r2,-40(fp)
				}
 8002d74:	003fa006 	br	8002bf8 <encode_mcu_AC_refine+0x28c>
				v = -v;
				if (v >>= cinfo->Ah) break;
			}

			/* Figure G.10: Encode_AC_Coefficients_SA */
			for (k = cinfo->Ss; k <= ke; k++) {
 8002d78:	e0bff617 	ldw	r2,-40(fp)
 8002d7c:	10800044 	addi	r2,r2,1
 8002d80:	e0bff615 	stw	r2,-40(fp)
 8002d84:	e0bff617 	ldw	r2,-40(fp)
 8002d88:	e0fff717 	ldw	r3,-36(fp)
 8002d8c:	18bf850e 	bge	r3,r2,8002ba4 <encode_mcu_AC_refine+0x238>
					}
					arith_encode(cinfo, st + 1, 0); st += 3; k++;
				}
			}
			/* Encode EOB decision only if k <= cinfo->Se */
			if (k <= cinfo->Se) {
 8002d90:	e0bffe17 	ldw	r2,-8(fp)
 8002d94:	10c05617 	ldw	r3,344(r2)
 8002d98:	e0bff617 	ldw	r2,-40(fp)
 8002d9c:	18801216 	blt	r3,r2,8002de8 <encode_mcu_AC_refine+0x47c>
				st = entropy->ac_stats[tbl] + 3 * (k - 1);
 8002da0:	e0fff917 	ldw	r3,-28(fp)
 8002da4:	e0bffc17 	ldw	r2,-16(fp)
 8002da8:	108008c4 	addi	r2,r2,35
 8002dac:	1085883a 	add	r2,r2,r2
 8002db0:	1085883a 	add	r2,r2,r2
 8002db4:	1885883a 	add	r2,r3,r2
 8002db8:	11000017 	ldw	r4,0(r2)
 8002dbc:	e0bff617 	ldw	r2,-40(fp)
 8002dc0:	10ffffc4 	addi	r3,r2,-1
 8002dc4:	1805883a 	mov	r2,r3
 8002dc8:	1085883a 	add	r2,r2,r2
 8002dcc:	10c5883a 	add	r2,r2,r3
 8002dd0:	2085883a 	add	r2,r4,r2
 8002dd4:	e0bff515 	stw	r2,-44(fp)
				arith_encode(cinfo, st, 1);
 8002dd8:	e13ffe17 	ldw	r4,-8(fp)
 8002ddc:	e17ff517 	ldw	r5,-44(fp)
 8002de0:	01800044 	movi	r6,1
 8002de4:	8001a540 	call	8001a54 <arith_encode>
			}

			return TRUE;
 8002de8:	00800044 	movi	r2,1
}
 8002dec:	e037883a 	mov	sp,fp
 8002df0:	dfc00117 	ldw	ra,4(sp)
 8002df4:	df000017 	ldw	fp,0(sp)
 8002df8:	dec00204 	addi	sp,sp,8
 8002dfc:	f800283a 	ret

08002e00 <encode_mcu>:
* Encode and output one MCU's worth of arithmetic-compressed coefficients.
*/

METHODDEF(boolean)
	encode_mcu (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
{
 8002e00:	deffef04 	addi	sp,sp,-68
 8002e04:	dfc01015 	stw	ra,64(sp)
 8002e08:	df000f15 	stw	fp,60(sp)
 8002e0c:	df000f04 	addi	fp,sp,60
 8002e10:	e13ffe15 	stw	r4,-8(fp)
 8002e14:	e17fff15 	stw	r5,-4(fp)
	arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 8002e18:	e0bffe17 	ldw	r2,-8(fp)
 8002e1c:	10806417 	ldw	r2,400(r2)
 8002e20:	e0bff815 	stw	r2,-32(fp)
	int blkn, ci, tbl, k, ke;
	int v, v2, m;
	const int * natural_order;

	/* Emit restart marker if needed */
	if (cinfo->restart_interval) {
 8002e24:	e0bffe17 	ldw	r2,-8(fp)
 8002e28:	10803717 	ldw	r2,220(r2)
 8002e2c:	10001b26 	beq	r2,zero,8002e9c <encode_mcu+0x9c>
		if (entropy->restarts_to_go == 0) {
 8002e30:	e0bff817 	ldw	r2,-32(fp)
 8002e34:	10801117 	ldw	r2,68(r2)
 8002e38:	1000131e 	bne	r2,zero,8002e88 <encode_mcu+0x88>
			emit_restart(cinfo, entropy->next_restart_num);
 8002e3c:	e0bff817 	ldw	r2,-32(fp)
 8002e40:	10801217 	ldw	r2,72(r2)
 8002e44:	e13ffe17 	ldw	r4,-8(fp)
 8002e48:	100b883a 	mov	r5,r2
 8002e4c:	8001d540 	call	8001d54 <emit_restart>
			entropy->restarts_to_go = cinfo->restart_interval;
 8002e50:	e0bffe17 	ldw	r2,-8(fp)
 8002e54:	10c03717 	ldw	r3,220(r2)
 8002e58:	e0bff817 	ldw	r2,-32(fp)
 8002e5c:	10c01115 	stw	r3,68(r2)
			entropy->next_restart_num++;
 8002e60:	e0bff817 	ldw	r2,-32(fp)
 8002e64:	10801217 	ldw	r2,72(r2)
 8002e68:	10c00044 	addi	r3,r2,1
 8002e6c:	e0bff817 	ldw	r2,-32(fp)
 8002e70:	10c01215 	stw	r3,72(r2)
			entropy->next_restart_num &= 7;
 8002e74:	e0bff817 	ldw	r2,-32(fp)
 8002e78:	10801217 	ldw	r2,72(r2)
 8002e7c:	10c001cc 	andi	r3,r2,7
 8002e80:	e0bff817 	ldw	r2,-32(fp)
 8002e84:	10c01215 	stw	r3,72(r2)
		}
		entropy->restarts_to_go--;
 8002e88:	e0bff817 	ldw	r2,-32(fp)
 8002e8c:	10801117 	ldw	r2,68(r2)
 8002e90:	10ffffc4 	addi	r3,r2,-1
 8002e94:	e0bff817 	ldw	r2,-32(fp)
 8002e98:	10c01115 	stw	r3,68(r2)
	}

	natural_order = cinfo->natural_order;
 8002e9c:	e0bffe17 	ldw	r2,-8(fp)
 8002ea0:	10805a17 	ldw	r2,360(r2)
 8002ea4:	e0bff915 	stw	r2,-28(fp)

	/* Encode the MCU data blocks */
	for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8002ea8:	e03ff215 	stw	zero,-56(fp)
 8002eac:	0001c406 	br	80035c0 <encode_mcu+0x7c0>
		block = MCU_data[blkn];
 8002eb0:	e0bff217 	ldw	r2,-56(fp)
 8002eb4:	1085883a 	add	r2,r2,r2
 8002eb8:	1085883a 	add	r2,r2,r2
 8002ebc:	e0ffff17 	ldw	r3,-4(fp)
 8002ec0:	1885883a 	add	r2,r3,r2
 8002ec4:	10800017 	ldw	r2,0(r2)
 8002ec8:	e0bffa15 	stw	r2,-24(fp)
		ci = cinfo->MCU_membership[blkn];
 8002ecc:	e0fffe17 	ldw	r3,-8(fp)
 8002ed0:	e0bff217 	ldw	r2,-56(fp)
 8002ed4:	108012c4 	addi	r2,r2,75
 8002ed8:	1085883a 	add	r2,r2,r2
 8002edc:	1085883a 	add	r2,r2,r2
 8002ee0:	1885883a 	add	r2,r3,r2
 8002ee4:	10800017 	ldw	r2,0(r2)
 8002ee8:	e0bffb15 	stw	r2,-20(fp)
		compptr = cinfo->cur_comp_info[ci];
 8002eec:	e0fffe17 	ldw	r3,-8(fp)
 8002ef0:	e0bffb17 	ldw	r2,-20(fp)
 8002ef4:	10801104 	addi	r2,r2,68
 8002ef8:	1085883a 	add	r2,r2,r2
 8002efc:	1085883a 	add	r2,r2,r2
 8002f00:	1885883a 	add	r2,r3,r2
 8002f04:	10800017 	ldw	r2,0(r2)
 8002f08:	e0bffc15 	stw	r2,-16(fp)

		/* Sections F.1.4.1 & F.1.4.4.1: Encoding of DC coefficients */

		tbl = compptr->dc_tbl_no;
 8002f0c:	e0bffc17 	ldw	r2,-16(fp)
 8002f10:	10800517 	ldw	r2,20(r2)
 8002f14:	e0bffd15 	stw	r2,-12(fp)

		/* Table F.4: Point to statistics bin S0 for DC coefficient coding */
		st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 8002f18:	e0fff817 	ldw	r3,-32(fp)
 8002f1c:	e0bffd17 	ldw	r2,-12(fp)
 8002f20:	108004c4 	addi	r2,r2,19
 8002f24:	1085883a 	add	r2,r2,r2
 8002f28:	1085883a 	add	r2,r2,r2
 8002f2c:	1885883a 	add	r2,r3,r2
 8002f30:	10c00017 	ldw	r3,0(r2)
 8002f34:	e13ff817 	ldw	r4,-32(fp)
 8002f38:	e0bffb17 	ldw	r2,-20(fp)
 8002f3c:	10800344 	addi	r2,r2,13
 8002f40:	1085883a 	add	r2,r2,r2
 8002f44:	1085883a 	add	r2,r2,r2
 8002f48:	2085883a 	add	r2,r4,r2
 8002f4c:	10800017 	ldw	r2,0(r2)
 8002f50:	1885883a 	add	r2,r3,r2
 8002f54:	e0bff115 	stw	r2,-60(fp)

		/* Figure F.4: Encode_DC_DIFF */
		if ((v = (*block)[0] - entropy->last_dc_val[ci]) == 0) {
 8002f58:	e0bffa17 	ldw	r2,-24(fp)
 8002f5c:	1080000b 	ldhu	r2,0(r2)
 8002f60:	10ffffcc 	andi	r3,r2,65535
 8002f64:	18e0001c 	xori	r3,r3,32768
 8002f68:	18e00004 	addi	r3,r3,-32768
 8002f6c:	e13ff817 	ldw	r4,-32(fp)
 8002f70:	e0bffb17 	ldw	r2,-20(fp)
 8002f74:	10800244 	addi	r2,r2,9
 8002f78:	1085883a 	add	r2,r2,r2
 8002f7c:	1085883a 	add	r2,r2,r2
 8002f80:	2085883a 	add	r2,r4,r2
 8002f84:	10800017 	ldw	r2,0(r2)
 8002f88:	1885c83a 	sub	r2,r3,r2
 8002f8c:	e0bff515 	stw	r2,-44(fp)
 8002f90:	e0bff517 	ldw	r2,-44(fp)
 8002f94:	10000c1e 	bne	r2,zero,8002fc8 <encode_mcu+0x1c8>
			arith_encode(cinfo, st, 0);
 8002f98:	e13ffe17 	ldw	r4,-8(fp)
 8002f9c:	e17ff117 	ldw	r5,-60(fp)
 8002fa0:	000d883a 	mov	r6,zero
 8002fa4:	8001a540 	call	8001a54 <arith_encode>
			entropy->dc_context[ci] = 0;	/* zero diff category */
 8002fa8:	e0fff817 	ldw	r3,-32(fp)
 8002fac:	e0bffb17 	ldw	r2,-20(fp)
 8002fb0:	10800344 	addi	r2,r2,13
 8002fb4:	1085883a 	add	r2,r2,r2
 8002fb8:	1085883a 	add	r2,r2,r2
 8002fbc:	1885883a 	add	r2,r3,r2
 8002fc0:	10000015 	stw	zero,0(r2)
 8002fc4:	0000a206 	br	8003250 <encode_mcu+0x450>
		} else {
			entropy->last_dc_val[ci] = (*block)[0];
 8002fc8:	e0bffa17 	ldw	r2,-24(fp)
 8002fcc:	1080000b 	ldhu	r2,0(r2)
 8002fd0:	10ffffcc 	andi	r3,r2,65535
 8002fd4:	18e0001c 	xori	r3,r3,32768
 8002fd8:	18e00004 	addi	r3,r3,-32768
 8002fdc:	e13ff817 	ldw	r4,-32(fp)
 8002fe0:	e0bffb17 	ldw	r2,-20(fp)
 8002fe4:	10800244 	addi	r2,r2,9
 8002fe8:	1085883a 	add	r2,r2,r2
 8002fec:	1085883a 	add	r2,r2,r2
 8002ff0:	2085883a 	add	r2,r4,r2
 8002ff4:	10c00015 	stw	r3,0(r2)
			arith_encode(cinfo, st, 1);
 8002ff8:	e13ffe17 	ldw	r4,-8(fp)
 8002ffc:	e17ff117 	ldw	r5,-60(fp)
 8003000:	01800044 	movi	r6,1
 8003004:	8001a540 	call	8001a54 <arith_encode>
			/* Figure F.6: Encoding nonzero value v */
			/* Figure F.7: Encoding the sign of v */
			if (v > 0) {
 8003008:	e0bff517 	ldw	r2,-44(fp)
 800300c:	0080120e 	bge	zero,r2,8003058 <encode_mcu+0x258>
				arith_encode(cinfo, st + 1, 0);	/* Table F.4: SS = S0 + 1 */
 8003010:	e0bff117 	ldw	r2,-60(fp)
 8003014:	10800044 	addi	r2,r2,1
 8003018:	e13ffe17 	ldw	r4,-8(fp)
 800301c:	100b883a 	mov	r5,r2
 8003020:	000d883a 	mov	r6,zero
 8003024:	8001a540 	call	8001a54 <arith_encode>
				st += 2;			/* Table F.4: SP = S0 + 2 */
 8003028:	e0bff117 	ldw	r2,-60(fp)
 800302c:	10800084 	addi	r2,r2,2
 8003030:	e0bff115 	stw	r2,-60(fp)
				entropy->dc_context[ci] = 4;	/* small positive diff category */
 8003034:	e0fff817 	ldw	r3,-32(fp)
 8003038:	e0bffb17 	ldw	r2,-20(fp)
 800303c:	10800344 	addi	r2,r2,13
 8003040:	1085883a 	add	r2,r2,r2
 8003044:	1085883a 	add	r2,r2,r2
 8003048:	1885883a 	add	r2,r3,r2
 800304c:	00c00104 	movi	r3,4
 8003050:	10c00015 	stw	r3,0(r2)
 8003054:	00001406 	br	80030a8 <encode_mcu+0x2a8>
			} else {
				v = -v;
 8003058:	e0bff517 	ldw	r2,-44(fp)
 800305c:	0085c83a 	sub	r2,zero,r2
 8003060:	e0bff515 	stw	r2,-44(fp)
				arith_encode(cinfo, st + 1, 1);	/* Table F.4: SS = S0 + 1 */
 8003064:	e0bff117 	ldw	r2,-60(fp)
 8003068:	10800044 	addi	r2,r2,1
 800306c:	e13ffe17 	ldw	r4,-8(fp)
 8003070:	100b883a 	mov	r5,r2
 8003074:	01800044 	movi	r6,1
 8003078:	8001a540 	call	8001a54 <arith_encode>
				st += 3;			/* Table F.4: SN = S0 + 3 */
 800307c:	e0bff117 	ldw	r2,-60(fp)
 8003080:	108000c4 	addi	r2,r2,3
 8003084:	e0bff115 	stw	r2,-60(fp)
				entropy->dc_context[ci] = 8;	/* small negative diff category */
 8003088:	e0fff817 	ldw	r3,-32(fp)
 800308c:	e0bffb17 	ldw	r2,-20(fp)
 8003090:	10800344 	addi	r2,r2,13
 8003094:	1085883a 	add	r2,r2,r2
 8003098:	1085883a 	add	r2,r2,r2
 800309c:	1885883a 	add	r2,r3,r2
 80030a0:	00c00204 	movi	r3,8
 80030a4:	10c00015 	stw	r3,0(r2)
			}
			/* Figure F.8: Encoding the magnitude category of v */
			m = 0;
 80030a8:	e03ff715 	stw	zero,-36(fp)
			if (v -= 1) {
 80030ac:	e0bff517 	ldw	r2,-44(fp)
 80030b0:	10bfffc4 	addi	r2,r2,-1
 80030b4:	e0bff515 	stw	r2,-44(fp)
 80030b8:	e0bff517 	ldw	r2,-44(fp)
 80030bc:	10002126 	beq	r2,zero,8003144 <encode_mcu+0x344>
				arith_encode(cinfo, st, 1);
 80030c0:	e13ffe17 	ldw	r4,-8(fp)
 80030c4:	e17ff117 	ldw	r5,-60(fp)
 80030c8:	01800044 	movi	r6,1
 80030cc:	8001a540 	call	8001a54 <arith_encode>
				m = 1;
 80030d0:	00800044 	movi	r2,1
 80030d4:	e0bff715 	stw	r2,-36(fp)
				v2 = v;
 80030d8:	e0bff517 	ldw	r2,-44(fp)
 80030dc:	e0bff615 	stw	r2,-40(fp)
				st = entropy->dc_stats[tbl] + 20; /* Table F.4: X1 = 20 */
 80030e0:	e0fff817 	ldw	r3,-32(fp)
 80030e4:	e0bffd17 	ldw	r2,-12(fp)
 80030e8:	108004c4 	addi	r2,r2,19
 80030ec:	1085883a 	add	r2,r2,r2
 80030f0:	1085883a 	add	r2,r2,r2
 80030f4:	1885883a 	add	r2,r3,r2
 80030f8:	10800017 	ldw	r2,0(r2)
 80030fc:	10800504 	addi	r2,r2,20
 8003100:	e0bff115 	stw	r2,-60(fp)
				while (v2 >>= 1) {
 8003104:	00000a06 	br	8003130 <encode_mcu+0x330>
					arith_encode(cinfo, st, 1);
 8003108:	e13ffe17 	ldw	r4,-8(fp)
 800310c:	e17ff117 	ldw	r5,-60(fp)
 8003110:	01800044 	movi	r6,1
 8003114:	8001a540 	call	8001a54 <arith_encode>
					m <<= 1;
 8003118:	e0bff717 	ldw	r2,-36(fp)
 800311c:	1085883a 	add	r2,r2,r2
 8003120:	e0bff715 	stw	r2,-36(fp)
					st += 1;
 8003124:	e0bff117 	ldw	r2,-60(fp)
 8003128:	10800044 	addi	r2,r2,1
 800312c:	e0bff115 	stw	r2,-60(fp)
			if (v -= 1) {
				arith_encode(cinfo, st, 1);
				m = 1;
				v2 = v;
				st = entropy->dc_stats[tbl] + 20; /* Table F.4: X1 = 20 */
				while (v2 >>= 1) {
 8003130:	e0bff617 	ldw	r2,-40(fp)
 8003134:	1005d07a 	srai	r2,r2,1
 8003138:	e0bff615 	stw	r2,-40(fp)
 800313c:	e0bff617 	ldw	r2,-40(fp)
 8003140:	103ff11e 	bne	r2,zero,8003108 <encode_mcu+0x308>
					arith_encode(cinfo, st, 1);
					m <<= 1;
					st += 1;
				}
			}
			arith_encode(cinfo, st, 0);
 8003144:	e13ffe17 	ldw	r4,-8(fp)
 8003148:	e17ff117 	ldw	r5,-60(fp)
 800314c:	000d883a 	mov	r6,zero
 8003150:	8001a540 	call	8001a54 <arith_encode>
			/* Section F.1.4.4.1.2: Establish dc_context conditioning category */
			if (m < (int) ((1L << cinfo->arith_dc_L[tbl]) >> 1))
 8003154:	e0fffe17 	ldw	r3,-8(fp)
 8003158:	e0bffd17 	ldw	r2,-12(fp)
 800315c:	1885883a 	add	r2,r3,r2
 8003160:	10802504 	addi	r2,r2,148
 8003164:	10800003 	ldbu	r2,0(r2)
 8003168:	10803fcc 	andi	r2,r2,255
 800316c:	00c00044 	movi	r3,1
 8003170:	1884983a 	sll	r2,r3,r2
 8003174:	1005d07a 	srai	r2,r2,1
 8003178:	e0fff717 	ldw	r3,-36(fp)
 800317c:	1880080e 	bge	r3,r2,80031a0 <encode_mcu+0x3a0>
				entropy->dc_context[ci] = 0;	/* zero diff category */
 8003180:	e0fff817 	ldw	r3,-32(fp)
 8003184:	e0bffb17 	ldw	r2,-20(fp)
 8003188:	10800344 	addi	r2,r2,13
 800318c:	1085883a 	add	r2,r2,r2
 8003190:	1085883a 	add	r2,r2,r2
 8003194:	1885883a 	add	r2,r3,r2
 8003198:	10000015 	stw	zero,0(r2)
 800319c:	00001a06 	br	8003208 <encode_mcu+0x408>
			else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
 80031a0:	e0fffe17 	ldw	r3,-8(fp)
 80031a4:	e0bffd17 	ldw	r2,-12(fp)
 80031a8:	1885883a 	add	r2,r3,r2
 80031ac:	10802904 	addi	r2,r2,164
 80031b0:	10800003 	ldbu	r2,0(r2)
 80031b4:	10803fcc 	andi	r2,r2,255
 80031b8:	00c00044 	movi	r3,1
 80031bc:	1884983a 	sll	r2,r3,r2
 80031c0:	1007d07a 	srai	r3,r2,1
 80031c4:	e0bff717 	ldw	r2,-36(fp)
 80031c8:	18800f0e 	bge	r3,r2,8003208 <encode_mcu+0x408>
				entropy->dc_context[ci] += 8;	/* large diff category */
 80031cc:	e0fff817 	ldw	r3,-32(fp)
 80031d0:	e0bffb17 	ldw	r2,-20(fp)
 80031d4:	10800344 	addi	r2,r2,13
 80031d8:	1085883a 	add	r2,r2,r2
 80031dc:	1085883a 	add	r2,r2,r2
 80031e0:	1885883a 	add	r2,r3,r2
 80031e4:	10800017 	ldw	r2,0(r2)
 80031e8:	10c00204 	addi	r3,r2,8
 80031ec:	e13ff817 	ldw	r4,-32(fp)
 80031f0:	e0bffb17 	ldw	r2,-20(fp)
 80031f4:	10800344 	addi	r2,r2,13
 80031f8:	1085883a 	add	r2,r2,r2
 80031fc:	1085883a 	add	r2,r2,r2
 8003200:	2085883a 	add	r2,r4,r2
 8003204:	10c00015 	stw	r3,0(r2)
			/* Figure F.9: Encoding the magnitude bit pattern of v */
			st += 14;
 8003208:	e0bff117 	ldw	r2,-60(fp)
 800320c:	10800384 	addi	r2,r2,14
 8003210:	e0bff115 	stw	r2,-60(fp)
			while (m >>= 1)
 8003214:	00000906 	br	800323c <encode_mcu+0x43c>
				arith_encode(cinfo, st, (m & v) ? 1 : 0);
 8003218:	e0fff717 	ldw	r3,-36(fp)
 800321c:	e0bff517 	ldw	r2,-44(fp)
 8003220:	1884703a 	and	r2,r3,r2
 8003224:	1004c03a 	cmpne	r2,r2,zero
 8003228:	10803fcc 	andi	r2,r2,255
 800322c:	e13ffe17 	ldw	r4,-8(fp)
 8003230:	e17ff117 	ldw	r5,-60(fp)
 8003234:	100d883a 	mov	r6,r2
 8003238:	8001a540 	call	8001a54 <arith_encode>
				entropy->dc_context[ci] = 0;	/* zero diff category */
			else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
				entropy->dc_context[ci] += 8;	/* large diff category */
			/* Figure F.9: Encoding the magnitude bit pattern of v */
			st += 14;
			while (m >>= 1)
 800323c:	e0bff717 	ldw	r2,-36(fp)
 8003240:	1005d07a 	srai	r2,r2,1
 8003244:	e0bff715 	stw	r2,-36(fp)
 8003248:	e0bff717 	ldw	r2,-36(fp)
 800324c:	103ff21e 	bne	r2,zero,8003218 <encode_mcu+0x418>
				arith_encode(cinfo, st, (m & v) ? 1 : 0);
		}

		/* Sections F.1.4.2 & F.1.4.4.2: Encoding of AC coefficients */

		tbl = compptr->ac_tbl_no;
 8003250:	e0bffc17 	ldw	r2,-16(fp)
 8003254:	10800617 	ldw	r2,24(r2)
 8003258:	e0bffd15 	stw	r2,-12(fp)

		/* Establish EOB (end-of-block) index */
		for (ke = cinfo->lim_Se; ke > 0; ke--)
 800325c:	e0bffe17 	ldw	r2,-8(fp)
 8003260:	10805b17 	ldw	r2,364(r2)
 8003264:	e0bff415 	stw	r2,-48(fp)
 8003268:	00001106 	br	80032b0 <encode_mcu+0x4b0>
			if ((*block)[natural_order[ke]]) break;
 800326c:	e0bff417 	ldw	r2,-48(fp)
 8003270:	1085883a 	add	r2,r2,r2
 8003274:	1085883a 	add	r2,r2,r2
 8003278:	e0fff917 	ldw	r3,-28(fp)
 800327c:	1885883a 	add	r2,r3,r2
 8003280:	10800017 	ldw	r2,0(r2)
 8003284:	e0fffa17 	ldw	r3,-24(fp)
 8003288:	1085883a 	add	r2,r2,r2
 800328c:	1885883a 	add	r2,r3,r2
 8003290:	1080000b 	ldhu	r2,0(r2)
 8003294:	10bfffcc 	andi	r2,r2,65535
 8003298:	10a0001c 	xori	r2,r2,32768
 800329c:	10a00004 	addi	r2,r2,-32768
 80032a0:	1000061e 	bne	r2,zero,80032bc <encode_mcu+0x4bc>
		/* Sections F.1.4.2 & F.1.4.4.2: Encoding of AC coefficients */

		tbl = compptr->ac_tbl_no;

		/* Establish EOB (end-of-block) index */
		for (ke = cinfo->lim_Se; ke > 0; ke--)
 80032a4:	e0bff417 	ldw	r2,-48(fp)
 80032a8:	10bfffc4 	addi	r2,r2,-1
 80032ac:	e0bff415 	stw	r2,-48(fp)
 80032b0:	e0bff417 	ldw	r2,-48(fp)
 80032b4:	00bfed16 	blt	zero,r2,800326c <encode_mcu+0x46c>
 80032b8:	00000106 	br	80032c0 <encode_mcu+0x4c0>
			if ((*block)[natural_order[ke]]) break;
 80032bc:	0001883a 	nop

		/* Figure F.5: Encode_AC_Coefficients */
		for (k = 1; k <= ke; k++) {
 80032c0:	00800044 	movi	r2,1
 80032c4:	e0bff315 	stw	r2,-52(fp)
 80032c8:	0000a106 	br	8003550 <encode_mcu+0x750>
			st = entropy->ac_stats[tbl] + 3 * (k - 1);
 80032cc:	e0fff817 	ldw	r3,-32(fp)
 80032d0:	e0bffd17 	ldw	r2,-12(fp)
 80032d4:	108008c4 	addi	r2,r2,35
 80032d8:	1085883a 	add	r2,r2,r2
 80032dc:	1085883a 	add	r2,r2,r2
 80032e0:	1885883a 	add	r2,r3,r2
 80032e4:	11000017 	ldw	r4,0(r2)
 80032e8:	e0bff317 	ldw	r2,-52(fp)
 80032ec:	10ffffc4 	addi	r3,r2,-1
 80032f0:	1805883a 	mov	r2,r3
 80032f4:	1085883a 	add	r2,r2,r2
 80032f8:	10c5883a 	add	r2,r2,r3
 80032fc:	2085883a 	add	r2,r4,r2
 8003300:	e0bff115 	stw	r2,-60(fp)
			arith_encode(cinfo, st, 0);	/* EOB decision */
 8003304:	e13ffe17 	ldw	r4,-8(fp)
 8003308:	e17ff117 	ldw	r5,-60(fp)
 800330c:	000d883a 	mov	r6,zero
 8003310:	8001a540 	call	8001a54 <arith_encode>
			while ((v = (*block)[natural_order[k]]) == 0) {
 8003314:	00000c06 	br	8003348 <encode_mcu+0x548>
				arith_encode(cinfo, st + 1, 0); st += 3; k++;
 8003318:	e0bff117 	ldw	r2,-60(fp)
 800331c:	10800044 	addi	r2,r2,1
 8003320:	e13ffe17 	ldw	r4,-8(fp)
 8003324:	100b883a 	mov	r5,r2
 8003328:	000d883a 	mov	r6,zero
 800332c:	8001a540 	call	8001a54 <arith_encode>
 8003330:	e0bff117 	ldw	r2,-60(fp)
 8003334:	108000c4 	addi	r2,r2,3
 8003338:	e0bff115 	stw	r2,-60(fp)
 800333c:	e0bff317 	ldw	r2,-52(fp)
 8003340:	10800044 	addi	r2,r2,1
 8003344:	e0bff315 	stw	r2,-52(fp)

		/* Figure F.5: Encode_AC_Coefficients */
		for (k = 1; k <= ke; k++) {
			st = entropy->ac_stats[tbl] + 3 * (k - 1);
			arith_encode(cinfo, st, 0);	/* EOB decision */
			while ((v = (*block)[natural_order[k]]) == 0) {
 8003348:	e0bff317 	ldw	r2,-52(fp)
 800334c:	1085883a 	add	r2,r2,r2
 8003350:	1085883a 	add	r2,r2,r2
 8003354:	e0fff917 	ldw	r3,-28(fp)
 8003358:	1885883a 	add	r2,r3,r2
 800335c:	10800017 	ldw	r2,0(r2)
 8003360:	e0fffa17 	ldw	r3,-24(fp)
 8003364:	1085883a 	add	r2,r2,r2
 8003368:	1885883a 	add	r2,r3,r2
 800336c:	1080000b 	ldhu	r2,0(r2)
 8003370:	10bfffcc 	andi	r2,r2,65535
 8003374:	10a0001c 	xori	r2,r2,32768
 8003378:	10a00004 	addi	r2,r2,-32768
 800337c:	e0bff515 	stw	r2,-44(fp)
 8003380:	e0bff517 	ldw	r2,-44(fp)
 8003384:	103fe426 	beq	r2,zero,8003318 <encode_mcu+0x518>
				arith_encode(cinfo, st + 1, 0); st += 3; k++;
			}
			arith_encode(cinfo, st + 1, 1);
 8003388:	e0bff117 	ldw	r2,-60(fp)
 800338c:	10800044 	addi	r2,r2,1
 8003390:	e13ffe17 	ldw	r4,-8(fp)
 8003394:	100b883a 	mov	r5,r2
 8003398:	01800044 	movi	r6,1
 800339c:	8001a540 	call	8001a54 <arith_encode>
			/* Figure F.6: Encoding nonzero value v */
			/* Figure F.7: Encoding the sign of v */
			if (v > 0) {
 80033a0:	e0bff517 	ldw	r2,-44(fp)
 80033a4:	0080070e 	bge	zero,r2,80033c4 <encode_mcu+0x5c4>
				arith_encode(cinfo, entropy->fixed_bin, 0);
 80033a8:	e0bff817 	ldw	r2,-32(fp)
 80033ac:	10803304 	addi	r2,r2,204
 80033b0:	e13ffe17 	ldw	r4,-8(fp)
 80033b4:	100b883a 	mov	r5,r2
 80033b8:	000d883a 	mov	r6,zero
 80033bc:	8001a540 	call	8001a54 <arith_encode>
 80033c0:	00000906 	br	80033e8 <encode_mcu+0x5e8>
			} else {
				v = -v;
 80033c4:	e0bff517 	ldw	r2,-44(fp)
 80033c8:	0085c83a 	sub	r2,zero,r2
 80033cc:	e0bff515 	stw	r2,-44(fp)
				arith_encode(cinfo, entropy->fixed_bin, 1);
 80033d0:	e0bff817 	ldw	r2,-32(fp)
 80033d4:	10803304 	addi	r2,r2,204
 80033d8:	e13ffe17 	ldw	r4,-8(fp)
 80033dc:	100b883a 	mov	r5,r2
 80033e0:	01800044 	movi	r6,1
 80033e4:	8001a540 	call	8001a54 <arith_encode>
			}
			st += 2;
 80033e8:	e0bff117 	ldw	r2,-60(fp)
 80033ec:	10800084 	addi	r2,r2,2
 80033f0:	e0bff115 	stw	r2,-60(fp)
			/* Figure F.8: Encoding the magnitude category of v */
			m = 0;
 80033f4:	e03ff715 	stw	zero,-36(fp)
			if (v -= 1) {
 80033f8:	e0bff517 	ldw	r2,-44(fp)
 80033fc:	10bfffc4 	addi	r2,r2,-1
 8003400:	e0bff515 	stw	r2,-44(fp)
 8003404:	e0bff517 	ldw	r2,-44(fp)
 8003408:	10003826 	beq	r2,zero,80034ec <encode_mcu+0x6ec>
				arith_encode(cinfo, st, 1);
 800340c:	e13ffe17 	ldw	r4,-8(fp)
 8003410:	e17ff117 	ldw	r5,-60(fp)
 8003414:	01800044 	movi	r6,1
 8003418:	8001a540 	call	8001a54 <arith_encode>
				m = 1;
 800341c:	00800044 	movi	r2,1
 8003420:	e0bff715 	stw	r2,-36(fp)
				v2 = v;
 8003424:	e0bff517 	ldw	r2,-44(fp)
 8003428:	e0bff615 	stw	r2,-40(fp)
				if (v2 >>= 1) {
 800342c:	e0bff617 	ldw	r2,-40(fp)
 8003430:	1005d07a 	srai	r2,r2,1
 8003434:	e0bff615 	stw	r2,-40(fp)
 8003438:	e0bff617 	ldw	r2,-40(fp)
 800343c:	10002b26 	beq	r2,zero,80034ec <encode_mcu+0x6ec>
					arith_encode(cinfo, st, 1);
 8003440:	e13ffe17 	ldw	r4,-8(fp)
 8003444:	e17ff117 	ldw	r5,-60(fp)
 8003448:	01800044 	movi	r6,1
 800344c:	8001a540 	call	8001a54 <arith_encode>
					m <<= 1;
 8003450:	e0bff717 	ldw	r2,-36(fp)
 8003454:	1085883a 	add	r2,r2,r2
 8003458:	e0bff715 	stw	r2,-36(fp)
					st = entropy->ac_stats[tbl] +
 800345c:	e0fff817 	ldw	r3,-32(fp)
 8003460:	e0bffd17 	ldw	r2,-12(fp)
 8003464:	108008c4 	addi	r2,r2,35
 8003468:	1085883a 	add	r2,r2,r2
 800346c:	1085883a 	add	r2,r2,r2
 8003470:	1885883a 	add	r2,r3,r2
 8003474:	10c00017 	ldw	r3,0(r2)
						(k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 8003478:	e13ffe17 	ldw	r4,-8(fp)
 800347c:	e0bffd17 	ldw	r2,-12(fp)
 8003480:	2085883a 	add	r2,r4,r2
 8003484:	10802d04 	addi	r2,r2,180
 8003488:	10800003 	ldbu	r2,0(r2)
 800348c:	11003fcc 	andi	r4,r2,255
				m = 1;
				v2 = v;
				if (v2 >>= 1) {
					arith_encode(cinfo, st, 1);
					m <<= 1;
					st = entropy->ac_stats[tbl] +
 8003490:	e0bff317 	ldw	r2,-52(fp)
 8003494:	20800216 	blt	r4,r2,80034a0 <encode_mcu+0x6a0>
 8003498:	00802f44 	movi	r2,189
 800349c:	00000106 	br	80034a4 <encode_mcu+0x6a4>
 80034a0:	00803644 	movi	r2,217
 80034a4:	1885883a 	add	r2,r3,r2
 80034a8:	e0bff115 	stw	r2,-60(fp)
						(k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
					while (v2 >>= 1) {
 80034ac:	00000a06 	br	80034d8 <encode_mcu+0x6d8>
						arith_encode(cinfo, st, 1);
 80034b0:	e13ffe17 	ldw	r4,-8(fp)
 80034b4:	e17ff117 	ldw	r5,-60(fp)
 80034b8:	01800044 	movi	r6,1
 80034bc:	8001a540 	call	8001a54 <arith_encode>
						m <<= 1;
 80034c0:	e0bff717 	ldw	r2,-36(fp)
 80034c4:	1085883a 	add	r2,r2,r2
 80034c8:	e0bff715 	stw	r2,-36(fp)
						st += 1;
 80034cc:	e0bff117 	ldw	r2,-60(fp)
 80034d0:	10800044 	addi	r2,r2,1
 80034d4:	e0bff115 	stw	r2,-60(fp)
				if (v2 >>= 1) {
					arith_encode(cinfo, st, 1);
					m <<= 1;
					st = entropy->ac_stats[tbl] +
						(k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
					while (v2 >>= 1) {
 80034d8:	e0bff617 	ldw	r2,-40(fp)
 80034dc:	1005d07a 	srai	r2,r2,1
 80034e0:	e0bff615 	stw	r2,-40(fp)
 80034e4:	e0bff617 	ldw	r2,-40(fp)
 80034e8:	103ff11e 	bne	r2,zero,80034b0 <encode_mcu+0x6b0>
						m <<= 1;
						st += 1;
					}
				}
			}
			arith_encode(cinfo, st, 0);
 80034ec:	e13ffe17 	ldw	r4,-8(fp)
 80034f0:	e17ff117 	ldw	r5,-60(fp)
 80034f4:	000d883a 	mov	r6,zero
 80034f8:	8001a540 	call	8001a54 <arith_encode>
			/* Figure F.9: Encoding the magnitude bit pattern of v */
			st += 14;
 80034fc:	e0bff117 	ldw	r2,-60(fp)
 8003500:	10800384 	addi	r2,r2,14
 8003504:	e0bff115 	stw	r2,-60(fp)
			while (m >>= 1)
 8003508:	00000906 	br	8003530 <encode_mcu+0x730>
				arith_encode(cinfo, st, (m & v) ? 1 : 0);
 800350c:	e0fff717 	ldw	r3,-36(fp)
 8003510:	e0bff517 	ldw	r2,-44(fp)
 8003514:	1884703a 	and	r2,r3,r2
 8003518:	1004c03a 	cmpne	r2,r2,zero
 800351c:	10803fcc 	andi	r2,r2,255
 8003520:	e13ffe17 	ldw	r4,-8(fp)
 8003524:	e17ff117 	ldw	r5,-60(fp)
 8003528:	100d883a 	mov	r6,r2
 800352c:	8001a540 	call	8001a54 <arith_encode>
				}
			}
			arith_encode(cinfo, st, 0);
			/* Figure F.9: Encoding the magnitude bit pattern of v */
			st += 14;
			while (m >>= 1)
 8003530:	e0bff717 	ldw	r2,-36(fp)
 8003534:	1005d07a 	srai	r2,r2,1
 8003538:	e0bff715 	stw	r2,-36(fp)
 800353c:	e0bff717 	ldw	r2,-36(fp)
 8003540:	103ff21e 	bne	r2,zero,800350c <encode_mcu+0x70c>
		/* Establish EOB (end-of-block) index */
		for (ke = cinfo->lim_Se; ke > 0; ke--)
			if ((*block)[natural_order[ke]]) break;

		/* Figure F.5: Encode_AC_Coefficients */
		for (k = 1; k <= ke; k++) {
 8003544:	e0bff317 	ldw	r2,-52(fp)
 8003548:	10800044 	addi	r2,r2,1
 800354c:	e0bff315 	stw	r2,-52(fp)
 8003550:	e0bff317 	ldw	r2,-52(fp)
 8003554:	e0fff417 	ldw	r3,-48(fp)
 8003558:	18bf5c0e 	bge	r3,r2,80032cc <encode_mcu+0x4cc>
			st += 14;
			while (m >>= 1)
				arith_encode(cinfo, st, (m & v) ? 1 : 0);
		}
		/* Encode EOB decision only if k <= cinfo->lim_Se */
		if (k <= cinfo->lim_Se) {
 800355c:	e0bffe17 	ldw	r2,-8(fp)
 8003560:	10c05b17 	ldw	r3,364(r2)
 8003564:	e0bff317 	ldw	r2,-52(fp)
 8003568:	18801216 	blt	r3,r2,80035b4 <encode_mcu+0x7b4>
			st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800356c:	e0fff817 	ldw	r3,-32(fp)
 8003570:	e0bffd17 	ldw	r2,-12(fp)
 8003574:	108008c4 	addi	r2,r2,35
 8003578:	1085883a 	add	r2,r2,r2
 800357c:	1085883a 	add	r2,r2,r2
 8003580:	1885883a 	add	r2,r3,r2
 8003584:	11000017 	ldw	r4,0(r2)
 8003588:	e0bff317 	ldw	r2,-52(fp)
 800358c:	10ffffc4 	addi	r3,r2,-1
 8003590:	1805883a 	mov	r2,r3
 8003594:	1085883a 	add	r2,r2,r2
 8003598:	10c5883a 	add	r2,r2,r3
 800359c:	2085883a 	add	r2,r4,r2
 80035a0:	e0bff115 	stw	r2,-60(fp)
			arith_encode(cinfo, st, 1);
 80035a4:	e13ffe17 	ldw	r4,-8(fp)
 80035a8:	e17ff117 	ldw	r5,-60(fp)
 80035ac:	01800044 	movi	r6,1
 80035b0:	8001a540 	call	8001a54 <arith_encode>
	}

	natural_order = cinfo->natural_order;

	/* Encode the MCU data blocks */
	for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 80035b4:	e0bff217 	ldw	r2,-56(fp)
 80035b8:	10800044 	addi	r2,r2,1
 80035bc:	e0bff215 	stw	r2,-56(fp)
 80035c0:	e0bffe17 	ldw	r2,-8(fp)
 80035c4:	10804a17 	ldw	r2,296(r2)
 80035c8:	e0fff217 	ldw	r3,-56(fp)
 80035cc:	18be3816 	blt	r3,r2,8002eb0 <encode_mcu+0xb0>
			st = entropy->ac_stats[tbl] + 3 * (k - 1);
			arith_encode(cinfo, st, 1);
		}
	}

	return TRUE;
 80035d0:	00800044 	movi	r2,1
}
 80035d4:	e037883a 	mov	sp,fp
 80035d8:	dfc00117 	ldw	ra,4(sp)
 80035dc:	df000017 	ldw	fp,0(sp)
 80035e0:	dec00204 	addi	sp,sp,8
 80035e4:	f800283a 	ret

080035e8 <start_pass>:
* Initialize for an arithmetic-compressed scan.
*/

METHODDEF(void)
	start_pass (j_compress_ptr cinfo, boolean gather_statistics)
{
 80035e8:	defff804 	addi	sp,sp,-32
 80035ec:	dfc00715 	stw	ra,28(sp)
 80035f0:	df000615 	stw	fp,24(sp)
 80035f4:	df000604 	addi	fp,sp,24
 80035f8:	e13ffe15 	stw	r4,-8(fp)
 80035fc:	2805883a 	mov	r2,r5
 8003600:	e0bfff05 	stb	r2,-4(fp)
	arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 8003604:	e0bffe17 	ldw	r2,-8(fp)
 8003608:	10806417 	ldw	r2,400(r2)
 800360c:	e0bffb15 	stw	r2,-20(fp)
	int ci, tbl;
	jpeg_component_info * compptr;

	if (gather_statistics)
 8003610:	e0bfff03 	ldbu	r2,-4(fp)
 8003614:	10000926 	beq	r2,zero,800363c <start_pass+0x54>
		/* Make sure to avoid that in the master control logic!
		* We are fully adaptive here and need no extra
		* statistics gathering pass!
		*/
		ERREXIT(cinfo, JERR_NOT_COMPILED);
 8003618:	e0bffe17 	ldw	r2,-8(fp)
 800361c:	10800017 	ldw	r2,0(r2)
 8003620:	00c00c44 	movi	r3,49
 8003624:	10c00515 	stw	r3,20(r2)
 8003628:	e0bffe17 	ldw	r2,-8(fp)
 800362c:	10800017 	ldw	r2,0(r2)
 8003630:	10800017 	ldw	r2,0(r2)
 8003634:	e13ffe17 	ldw	r4,-8(fp)
 8003638:	103ee83a 	callr	r2

	/* We assume jcmaster.c already validated the progressive scan parameters. */

	/* Select execution routines */
	if (cinfo->progressive_mode) {
 800363c:	e0bffe17 	ldw	r2,-8(fp)
 8003640:	10803d03 	ldbu	r2,244(r2)
 8003644:	10803fcc 	andi	r2,r2,255
 8003648:	10001d26 	beq	r2,zero,80036c0 <start_pass+0xd8>
		if (cinfo->Ah == 0) {
 800364c:	e0bffe17 	ldw	r2,-8(fp)
 8003650:	10805717 	ldw	r2,348(r2)
 8003654:	10000d1e 	bne	r2,zero,800368c <start_pass+0xa4>
			if (cinfo->Ss == 0)
 8003658:	e0bffe17 	ldw	r2,-8(fp)
 800365c:	10805517 	ldw	r2,340(r2)
 8003660:	1000051e 	bne	r2,zero,8003678 <start_pass+0x90>
				entropy->pub.encode_mcu = encode_mcu_DC_first;
 8003664:	e0bffb17 	ldw	r2,-20(fp)
 8003668:	00c20034 	movhi	r3,2048
 800366c:	18c7bc04 	addi	r3,r3,7920
 8003670:	10c00115 	stw	r3,4(r2)
 8003674:	00001606 	br	80036d0 <start_pass+0xe8>
			else
				entropy->pub.encode_mcu = encode_mcu_AC_first;
 8003678:	e0bffb17 	ldw	r2,-20(fp)
 800367c:	00c20034 	movhi	r3,2048
 8003680:	18c8d904 	addi	r3,r3,9060
 8003684:	10c00115 	stw	r3,4(r2)
 8003688:	00001106 	br	80036d0 <start_pass+0xe8>
		} else {
			if (cinfo->Ss == 0)
 800368c:	e0bffe17 	ldw	r2,-8(fp)
 8003690:	10805517 	ldw	r2,340(r2)
 8003694:	1000051e 	bne	r2,zero,80036ac <start_pass+0xc4>
				entropy->pub.encode_mcu = encode_mcu_DC_refine;
 8003698:	e0bffb17 	ldw	r2,-20(fp)
 800369c:	00c20034 	movhi	r3,2048
 80036a0:	18ca0e04 	addi	r3,r3,10296
 80036a4:	10c00115 	stw	r3,4(r2)
 80036a8:	00000906 	br	80036d0 <start_pass+0xe8>
			else
				entropy->pub.encode_mcu = encode_mcu_AC_refine;
 80036ac:	e0bffb17 	ldw	r2,-20(fp)
 80036b0:	00c20034 	movhi	r3,2048
 80036b4:	18ca5b04 	addi	r3,r3,10604
 80036b8:	10c00115 	stw	r3,4(r2)
 80036bc:	00000406 	br	80036d0 <start_pass+0xe8>
		}
	} else
		entropy->pub.encode_mcu = encode_mcu;
 80036c0:	e0bffb17 	ldw	r2,-20(fp)
 80036c4:	00c20034 	movhi	r3,2048
 80036c8:	18cb8004 	addi	r3,r3,11776
 80036cc:	10c00115 	stw	r3,4(r2)

	/* Allocate & initialize requested statistics areas */
	for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 80036d0:	e03ffa15 	stw	zero,-24(fp)
 80036d4:	00009006 	br	8003918 <start_pass+0x330>
		compptr = cinfo->cur_comp_info[ci];
 80036d8:	e0fffe17 	ldw	r3,-8(fp)
 80036dc:	e0bffa17 	ldw	r2,-24(fp)
 80036e0:	10801104 	addi	r2,r2,68
 80036e4:	1085883a 	add	r2,r2,r2
 80036e8:	1085883a 	add	r2,r2,r2
 80036ec:	1885883a 	add	r2,r3,r2
 80036f0:	10800017 	ldw	r2,0(r2)
 80036f4:	e0bffc15 	stw	r2,-16(fp)
		/* DC needs no table for refinement scan */
		if (cinfo->Ss == 0 && cinfo->Ah == 0) {
 80036f8:	e0bffe17 	ldw	r2,-8(fp)
 80036fc:	10805517 	ldw	r2,340(r2)
 8003700:	1000481e 	bne	r2,zero,8003824 <start_pass+0x23c>
 8003704:	e0bffe17 	ldw	r2,-8(fp)
 8003708:	10805717 	ldw	r2,348(r2)
 800370c:	1000451e 	bne	r2,zero,8003824 <start_pass+0x23c>
			tbl = compptr->dc_tbl_no;
 8003710:	e0bffc17 	ldw	r2,-16(fp)
 8003714:	10800517 	ldw	r2,20(r2)
 8003718:	e0bffd15 	stw	r2,-12(fp)
			if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
 800371c:	e0bffd17 	ldw	r2,-12(fp)
 8003720:	10000316 	blt	r2,zero,8003730 <start_pass+0x148>
 8003724:	e0bffd17 	ldw	r2,-12(fp)
 8003728:	10800410 	cmplti	r2,r2,16
 800372c:	10000d1e 	bne	r2,zero,8003764 <start_pass+0x17c>
				ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
 8003730:	e0bffe17 	ldw	r2,-8(fp)
 8003734:	10800017 	ldw	r2,0(r2)
 8003738:	00c00c84 	movi	r3,50
 800373c:	10c00515 	stw	r3,20(r2)
 8003740:	e0bffe17 	ldw	r2,-8(fp)
 8003744:	10800017 	ldw	r2,0(r2)
 8003748:	e0fffd17 	ldw	r3,-12(fp)
 800374c:	10c00615 	stw	r3,24(r2)
 8003750:	e0bffe17 	ldw	r2,-8(fp)
 8003754:	10800017 	ldw	r2,0(r2)
 8003758:	10800017 	ldw	r2,0(r2)
 800375c:	e13ffe17 	ldw	r4,-8(fp)
 8003760:	103ee83a 	callr	r2
			if (entropy->dc_stats[tbl] == NULL)
 8003764:	e0fffb17 	ldw	r3,-20(fp)
 8003768:	e0bffd17 	ldw	r2,-12(fp)
 800376c:	108004c4 	addi	r2,r2,19
 8003770:	1085883a 	add	r2,r2,r2
 8003774:	1085883a 	add	r2,r2,r2
 8003778:	1885883a 	add	r2,r3,r2
 800377c:	10800017 	ldw	r2,0(r2)
 8003780:	10000f1e 	bne	r2,zero,80037c0 <start_pass+0x1d8>
				entropy->dc_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
 8003784:	e0bffe17 	ldw	r2,-8(fp)
 8003788:	10800117 	ldw	r2,4(r2)
				((j_common_ptr) cinfo, JPOOL_IMAGE, DC_STAT_BINS);
 800378c:	10800017 	ldw	r2,0(r2)
 8003790:	e13ffe17 	ldw	r4,-8(fp)
 8003794:	01400044 	movi	r5,1
 8003798:	01801004 	movi	r6,64
 800379c:	103ee83a 	callr	r2
 80037a0:	1007883a 	mov	r3,r2
		if (cinfo->Ss == 0 && cinfo->Ah == 0) {
			tbl = compptr->dc_tbl_no;
			if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
				ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
			if (entropy->dc_stats[tbl] == NULL)
				entropy->dc_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
 80037a4:	e13ffb17 	ldw	r4,-20(fp)
 80037a8:	e0bffd17 	ldw	r2,-12(fp)
 80037ac:	108004c4 	addi	r2,r2,19
 80037b0:	1085883a 	add	r2,r2,r2
 80037b4:	1085883a 	add	r2,r2,r2
 80037b8:	2085883a 	add	r2,r4,r2
 80037bc:	10c00015 	stw	r3,0(r2)
				((j_common_ptr) cinfo, JPOOL_IMAGE, DC_STAT_BINS);
			MEMZERO(entropy->dc_stats[tbl], DC_STAT_BINS);
 80037c0:	e0fffb17 	ldw	r3,-20(fp)
 80037c4:	e0bffd17 	ldw	r2,-12(fp)
 80037c8:	108004c4 	addi	r2,r2,19
 80037cc:	1085883a 	add	r2,r2,r2
 80037d0:	1085883a 	add	r2,r2,r2
 80037d4:	1885883a 	add	r2,r3,r2
 80037d8:	10800017 	ldw	r2,0(r2)
 80037dc:	1009883a 	mov	r4,r2
 80037e0:	000b883a 	mov	r5,zero
 80037e4:	01801004 	movi	r6,64
 80037e8:	802ecf00 	call	802ecf0 <memset>
			/* Initialize DC predictions to 0 */
			entropy->last_dc_val[ci] = 0;
 80037ec:	e0fffb17 	ldw	r3,-20(fp)
 80037f0:	e0bffa17 	ldw	r2,-24(fp)
 80037f4:	10800244 	addi	r2,r2,9
 80037f8:	1085883a 	add	r2,r2,r2
 80037fc:	1085883a 	add	r2,r2,r2
 8003800:	1885883a 	add	r2,r3,r2
 8003804:	10000015 	stw	zero,0(r2)
			entropy->dc_context[ci] = 0;
 8003808:	e0fffb17 	ldw	r3,-20(fp)
 800380c:	e0bffa17 	ldw	r2,-24(fp)
 8003810:	10800344 	addi	r2,r2,13
 8003814:	1085883a 	add	r2,r2,r2
 8003818:	1085883a 	add	r2,r2,r2
 800381c:	1885883a 	add	r2,r3,r2
 8003820:	10000015 	stw	zero,0(r2)
		}
		/* AC needs no table when not present */
		if (cinfo->Se) {
 8003824:	e0bffe17 	ldw	r2,-8(fp)
 8003828:	10805617 	ldw	r2,344(r2)
 800382c:	10003726 	beq	r2,zero,800390c <start_pass+0x324>
			tbl = compptr->ac_tbl_no;
 8003830:	e0bffc17 	ldw	r2,-16(fp)
 8003834:	10800617 	ldw	r2,24(r2)
 8003838:	e0bffd15 	stw	r2,-12(fp)
			if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
 800383c:	e0bffd17 	ldw	r2,-12(fp)
 8003840:	10000316 	blt	r2,zero,8003850 <start_pass+0x268>
 8003844:	e0bffd17 	ldw	r2,-12(fp)
 8003848:	10800410 	cmplti	r2,r2,16
 800384c:	10000d1e 	bne	r2,zero,8003884 <start_pass+0x29c>
				ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
 8003850:	e0bffe17 	ldw	r2,-8(fp)
 8003854:	10800017 	ldw	r2,0(r2)
 8003858:	00c00c84 	movi	r3,50
 800385c:	10c00515 	stw	r3,20(r2)
 8003860:	e0bffe17 	ldw	r2,-8(fp)
 8003864:	10800017 	ldw	r2,0(r2)
 8003868:	e0fffd17 	ldw	r3,-12(fp)
 800386c:	10c00615 	stw	r3,24(r2)
 8003870:	e0bffe17 	ldw	r2,-8(fp)
 8003874:	10800017 	ldw	r2,0(r2)
 8003878:	10800017 	ldw	r2,0(r2)
 800387c:	e13ffe17 	ldw	r4,-8(fp)
 8003880:	103ee83a 	callr	r2
			if (entropy->ac_stats[tbl] == NULL)
 8003884:	e0fffb17 	ldw	r3,-20(fp)
 8003888:	e0bffd17 	ldw	r2,-12(fp)
 800388c:	108008c4 	addi	r2,r2,35
 8003890:	1085883a 	add	r2,r2,r2
 8003894:	1085883a 	add	r2,r2,r2
 8003898:	1885883a 	add	r2,r3,r2
 800389c:	10800017 	ldw	r2,0(r2)
 80038a0:	10000f1e 	bne	r2,zero,80038e0 <start_pass+0x2f8>
				entropy->ac_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
 80038a4:	e0bffe17 	ldw	r2,-8(fp)
 80038a8:	10800117 	ldw	r2,4(r2)
				((j_common_ptr) cinfo, JPOOL_IMAGE, AC_STAT_BINS);
 80038ac:	10800017 	ldw	r2,0(r2)
 80038b0:	e13ffe17 	ldw	r4,-8(fp)
 80038b4:	01400044 	movi	r5,1
 80038b8:	01804004 	movi	r6,256
 80038bc:	103ee83a 	callr	r2
 80038c0:	1007883a 	mov	r3,r2
		if (cinfo->Se) {
			tbl = compptr->ac_tbl_no;
			if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
				ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
			if (entropy->ac_stats[tbl] == NULL)
				entropy->ac_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
 80038c4:	e13ffb17 	ldw	r4,-20(fp)
 80038c8:	e0bffd17 	ldw	r2,-12(fp)
 80038cc:	108008c4 	addi	r2,r2,35
 80038d0:	1085883a 	add	r2,r2,r2
 80038d4:	1085883a 	add	r2,r2,r2
 80038d8:	2085883a 	add	r2,r4,r2
 80038dc:	10c00015 	stw	r3,0(r2)
				((j_common_ptr) cinfo, JPOOL_IMAGE, AC_STAT_BINS);
			MEMZERO(entropy->ac_stats[tbl], AC_STAT_BINS);
 80038e0:	e0fffb17 	ldw	r3,-20(fp)
 80038e4:	e0bffd17 	ldw	r2,-12(fp)
 80038e8:	108008c4 	addi	r2,r2,35
 80038ec:	1085883a 	add	r2,r2,r2
 80038f0:	1085883a 	add	r2,r2,r2
 80038f4:	1885883a 	add	r2,r3,r2
 80038f8:	10800017 	ldw	r2,0(r2)
 80038fc:	1009883a 	mov	r4,r2
 8003900:	000b883a 	mov	r5,zero
 8003904:	01804004 	movi	r6,256
 8003908:	802ecf00 	call	802ecf0 <memset>
		}
	} else
		entropy->pub.encode_mcu = encode_mcu;

	/* Allocate & initialize requested statistics areas */
	for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800390c:	e0bffa17 	ldw	r2,-24(fp)
 8003910:	10800044 	addi	r2,r2,1
 8003914:	e0bffa15 	stw	r2,-24(fp)
 8003918:	e0bffe17 	ldw	r2,-8(fp)
 800391c:	10804317 	ldw	r2,268(r2)
 8003920:	e0fffa17 	ldw	r3,-24(fp)
 8003924:	18bf6c16 	blt	r3,r2,80036d8 <start_pass+0xf0>
#endif
		}
	}

	/* Initialize arithmetic encoding variables */
	entropy->c = 0;
 8003928:	e0bffb17 	ldw	r2,-20(fp)
 800392c:	10000315 	stw	zero,12(r2)
	entropy->a = 0x10000L;
 8003930:	e0bffb17 	ldw	r2,-20(fp)
 8003934:	00c00074 	movhi	r3,1
 8003938:	10c00415 	stw	r3,16(r2)
	entropy->sc = 0;
 800393c:	e0bffb17 	ldw	r2,-20(fp)
 8003940:	10000515 	stw	zero,20(r2)
	entropy->zc = 0;
 8003944:	e0bffb17 	ldw	r2,-20(fp)
 8003948:	10000615 	stw	zero,24(r2)
	entropy->ct = 11;
 800394c:	e0bffb17 	ldw	r2,-20(fp)
 8003950:	00c002c4 	movi	r3,11
 8003954:	10c00715 	stw	r3,28(r2)
	entropy->buffer = -1;  /* empty */
 8003958:	e0bffb17 	ldw	r2,-20(fp)
 800395c:	00ffffc4 	movi	r3,-1
 8003960:	10c00815 	stw	r3,32(r2)

	/* Initialize restart stuff */
	entropy->restarts_to_go = cinfo->restart_interval;
 8003964:	e0bffe17 	ldw	r2,-8(fp)
 8003968:	10c03717 	ldw	r3,220(r2)
 800396c:	e0bffb17 	ldw	r2,-20(fp)
 8003970:	10c01115 	stw	r3,68(r2)
	entropy->next_restart_num = 0;
 8003974:	e0bffb17 	ldw	r2,-20(fp)
 8003978:	10001215 	stw	zero,72(r2)
}
 800397c:	e037883a 	mov	sp,fp
 8003980:	dfc00117 	ldw	ra,4(sp)
 8003984:	df000017 	ldw	fp,0(sp)
 8003988:	dec00204 	addi	sp,sp,8
 800398c:	f800283a 	ret

08003990 <jinit_arith_encoder>:
* Module initialization routine for arithmetic entropy encoding.
*/

GLOBAL(void)
	jinit_arith_encoder (j_compress_ptr cinfo)
{
 8003990:	defffb04 	addi	sp,sp,-20
 8003994:	dfc00415 	stw	ra,16(sp)
 8003998:	df000315 	stw	fp,12(sp)
 800399c:	df000304 	addi	fp,sp,12
 80039a0:	e13fff15 	stw	r4,-4(fp)
	arith_entropy_ptr entropy;
	int i;

	entropy = (arith_entropy_ptr)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80039a4:	e0bfff17 	ldw	r2,-4(fp)
 80039a8:	10800117 	ldw	r2,4(r2)
 80039ac:	10800017 	ldw	r2,0(r2)
	jinit_arith_encoder (j_compress_ptr cinfo)
{
	arith_entropy_ptr entropy;
	int i;

	entropy = (arith_entropy_ptr)
 80039b0:	e13fff17 	ldw	r4,-4(fp)
 80039b4:	01400044 	movi	r5,1
 80039b8:	01803404 	movi	r6,208
 80039bc:	103ee83a 	callr	r2
 80039c0:	e0bffe15 	stw	r2,-8(fp)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
		SIZEOF(arith_entropy_encoder));
	cinfo->entropy = (struct jpeg_entropy_encoder *) entropy;
 80039c4:	e0bfff17 	ldw	r2,-4(fp)
 80039c8:	e0fffe17 	ldw	r3,-8(fp)
 80039cc:	10c06415 	stw	r3,400(r2)
	entropy->pub.start_pass = start_pass;
 80039d0:	e0bffe17 	ldw	r2,-8(fp)
 80039d4:	00c20034 	movhi	r3,2048
 80039d8:	18cd7a04 	addi	r3,r3,13800
 80039dc:	10c00015 	stw	r3,0(r2)
	entropy->pub.finish_pass = finish_pass;
 80039e0:	e0bffe17 	ldw	r2,-8(fp)
 80039e4:	00c20034 	movhi	r3,2048
 80039e8:	18c5c804 	addi	r3,r3,5920
 80039ec:	10c00215 	stw	r3,8(r2)

	/* Mark tables unallocated */
	for (i = 0; i < NUM_ARITH_TBLS; i++) {
 80039f0:	e03ffd15 	stw	zero,-12(fp)
 80039f4:	00001106 	br	8003a3c <jinit_arith_encoder+0xac>
		entropy->dc_stats[i] = NULL;
 80039f8:	e0fffe17 	ldw	r3,-8(fp)
 80039fc:	e0bffd17 	ldw	r2,-12(fp)
 8003a00:	108004c4 	addi	r2,r2,19
 8003a04:	1085883a 	add	r2,r2,r2
 8003a08:	1085883a 	add	r2,r2,r2
 8003a0c:	1885883a 	add	r2,r3,r2
 8003a10:	10000015 	stw	zero,0(r2)
		entropy->ac_stats[i] = NULL;
 8003a14:	e0fffe17 	ldw	r3,-8(fp)
 8003a18:	e0bffd17 	ldw	r2,-12(fp)
 8003a1c:	108008c4 	addi	r2,r2,35
 8003a20:	1085883a 	add	r2,r2,r2
 8003a24:	1085883a 	add	r2,r2,r2
 8003a28:	1885883a 	add	r2,r3,r2
 8003a2c:	10000015 	stw	zero,0(r2)
	cinfo->entropy = (struct jpeg_entropy_encoder *) entropy;
	entropy->pub.start_pass = start_pass;
	entropy->pub.finish_pass = finish_pass;

	/* Mark tables unallocated */
	for (i = 0; i < NUM_ARITH_TBLS; i++) {
 8003a30:	e0bffd17 	ldw	r2,-12(fp)
 8003a34:	10800044 	addi	r2,r2,1
 8003a38:	e0bffd15 	stw	r2,-12(fp)
 8003a3c:	e0bffd17 	ldw	r2,-12(fp)
 8003a40:	10800410 	cmplti	r2,r2,16
 8003a44:	103fec1e 	bne	r2,zero,80039f8 <jinit_arith_encoder+0x68>
		entropy->dc_stats[i] = NULL;
		entropy->ac_stats[i] = NULL;
	}

	/* Initialize index for fixed probability estimation */
	entropy->fixed_bin[0] = 113;
 8003a48:	e0bffe17 	ldw	r2,-8(fp)
 8003a4c:	00c01c44 	movi	r3,113
 8003a50:	10c03305 	stb	r3,204(r2)
}
 8003a54:	e037883a 	mov	sp,fp
 8003a58:	dfc00117 	ldw	ra,4(sp)
 8003a5c:	df000017 	ldw	fp,0(sp)
 8003a60:	dec00204 	addi	sp,sp,8
 8003a64:	f800283a 	ret

08003a68 <start_iMCU_row>:


LOCAL(void)
	start_iMCU_row (j_compress_ptr cinfo)
	/* Reset within-iMCU-row counters for a new row */
{
 8003a68:	defffd04 	addi	sp,sp,-12
 8003a6c:	df000215 	stw	fp,8(sp)
 8003a70:	df000204 	addi	fp,sp,8
 8003a74:	e13fff15 	stw	r4,-4(fp)
	my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 8003a78:	e0bfff17 	ldw	r2,-4(fp)
 8003a7c:	10805f17 	ldw	r2,380(r2)
 8003a80:	e0bffe15 	stw	r2,-8(fp)

	/* In an interleaved scan, an MCU row is the same as an iMCU row.
	* In a noninterleaved scan, an iMCU row has v_samp_factor MCU rows.
	* But at the bottom of the image, process only what's left.
	*/
	if (cinfo->comps_in_scan > 1) {
 8003a84:	e0bfff17 	ldw	r2,-4(fp)
 8003a88:	10804317 	ldw	r2,268(r2)
 8003a8c:	10800090 	cmplti	r2,r2,2
 8003a90:	1000041e 	bne	r2,zero,8003aa4 <start_iMCU_row+0x3c>
		coef->MCU_rows_per_iMCU_row = 1;
 8003a94:	e0bffe17 	ldw	r2,-8(fp)
 8003a98:	00c00044 	movi	r3,1
 8003a9c:	10c00515 	stw	r3,20(r2)
 8003aa0:	00001106 	br	8003ae8 <start_iMCU_row+0x80>
	} else {
		if (coef->iMCU_row_num < (cinfo->total_iMCU_rows-1))
 8003aa4:	e0bffe17 	ldw	r2,-8(fp)
 8003aa8:	10c00217 	ldw	r3,8(r2)
 8003aac:	e0bfff17 	ldw	r2,-4(fp)
 8003ab0:	10804217 	ldw	r2,264(r2)
 8003ab4:	10bfffc4 	addi	r2,r2,-1
 8003ab8:	1880062e 	bgeu	r3,r2,8003ad4 <start_iMCU_row+0x6c>
			coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
 8003abc:	e0bfff17 	ldw	r2,-4(fp)
 8003ac0:	10804417 	ldw	r2,272(r2)
 8003ac4:	10c00317 	ldw	r3,12(r2)
 8003ac8:	e0bffe17 	ldw	r2,-8(fp)
 8003acc:	10c00515 	stw	r3,20(r2)
 8003ad0:	00000506 	br	8003ae8 <start_iMCU_row+0x80>
		else
			coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->last_row_height;
 8003ad4:	e0bfff17 	ldw	r2,-4(fp)
 8003ad8:	10804417 	ldw	r2,272(r2)
 8003adc:	10c01317 	ldw	r3,76(r2)
 8003ae0:	e0bffe17 	ldw	r2,-8(fp)
 8003ae4:	10c00515 	stw	r3,20(r2)
	}

	coef->mcu_ctr = 0;
 8003ae8:	e0bffe17 	ldw	r2,-8(fp)
 8003aec:	10000315 	stw	zero,12(r2)
	coef->MCU_vert_offset = 0;
 8003af0:	e0bffe17 	ldw	r2,-8(fp)
 8003af4:	10000415 	stw	zero,16(r2)
}
 8003af8:	e037883a 	mov	sp,fp
 8003afc:	df000017 	ldw	fp,0(sp)
 8003b00:	dec00104 	addi	sp,sp,4
 8003b04:	f800283a 	ret

08003b08 <start_pass_coef>:
* Initialize for a processing pass.
*/

METHODDEF(void)
	start_pass_coef (j_compress_ptr cinfo, J_BUF_MODE pass_mode)
{
 8003b08:	defffb04 	addi	sp,sp,-20
 8003b0c:	dfc00415 	stw	ra,16(sp)
 8003b10:	df000315 	stw	fp,12(sp)
 8003b14:	df000304 	addi	fp,sp,12
 8003b18:	e13ffe15 	stw	r4,-8(fp)
 8003b1c:	e17fff15 	stw	r5,-4(fp)
	my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 8003b20:	e0bffe17 	ldw	r2,-8(fp)
 8003b24:	10805f17 	ldw	r2,380(r2)
 8003b28:	e0bffd15 	stw	r2,-12(fp)

	coef->iMCU_row_num = 0;
 8003b2c:	e0bffd17 	ldw	r2,-12(fp)
 8003b30:	10000215 	stw	zero,8(r2)
	start_iMCU_row(cinfo);
 8003b34:	e13ffe17 	ldw	r4,-8(fp)
 8003b38:	8003a680 	call	8003a68 <start_iMCU_row>

	switch (pass_mode) {
 8003b3c:	e0bfff17 	ldw	r2,-4(fp)
 8003b40:	10c000a0 	cmpeqi	r3,r2,2
 8003b44:	1800251e 	bne	r3,zero,8003bdc <start_pass_coef+0xd4>
 8003b48:	10c000e0 	cmpeqi	r3,r2,3
 8003b4c:	1800121e 	bne	r3,zero,8003b98 <start_pass_coef+0x90>
 8003b50:	1000331e 	bne	r2,zero,8003c20 <start_pass_coef+0x118>
	case JBUF_PASS_THRU:
		if (coef->whole_image[0] != NULL)
 8003b54:	e0bffd17 	ldw	r2,-12(fp)
 8003b58:	10801017 	ldw	r2,64(r2)
 8003b5c:	10000926 	beq	r2,zero,8003b84 <start_pass_coef+0x7c>
			ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 8003b60:	e0bffe17 	ldw	r2,-8(fp)
 8003b64:	10800017 	ldw	r2,0(r2)
 8003b68:	00c000c4 	movi	r3,3
 8003b6c:	10c00515 	stw	r3,20(r2)
 8003b70:	e0bffe17 	ldw	r2,-8(fp)
 8003b74:	10800017 	ldw	r2,0(r2)
 8003b78:	10800017 	ldw	r2,0(r2)
 8003b7c:	e13ffe17 	ldw	r4,-8(fp)
 8003b80:	103ee83a 	callr	r2
		coef->pub.compress_data = compress_data;
 8003b84:	e0bffd17 	ldw	r2,-12(fp)
 8003b88:	00c20034 	movhi	r3,2048
 8003b8c:	18cf1704 	addi	r3,r3,15452
 8003b90:	10c00115 	stw	r3,4(r2)
		break;
 8003b94:	00002c06 	br	8003c48 <start_pass_coef+0x140>
#ifdef FULL_COEF_BUFFER_SUPPORTED
	case JBUF_SAVE_AND_PASS:
		if (coef->whole_image[0] == NULL)
 8003b98:	e0bffd17 	ldw	r2,-12(fp)
 8003b9c:	10801017 	ldw	r2,64(r2)
 8003ba0:	1000091e 	bne	r2,zero,8003bc8 <start_pass_coef+0xc0>
			ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 8003ba4:	e0bffe17 	ldw	r2,-8(fp)
 8003ba8:	10800017 	ldw	r2,0(r2)
 8003bac:	00c000c4 	movi	r3,3
 8003bb0:	10c00515 	stw	r3,20(r2)
 8003bb4:	e0bffe17 	ldw	r2,-8(fp)
 8003bb8:	10800017 	ldw	r2,0(r2)
 8003bbc:	10800017 	ldw	r2,0(r2)
 8003bc0:	e13ffe17 	ldw	r4,-8(fp)
 8003bc4:	103ee83a 	callr	r2
		coef->pub.compress_data = compress_first_pass;
 8003bc8:	e0bffd17 	ldw	r2,-12(fp)
 8003bcc:	00c20034 	movhi	r3,2048
 8003bd0:	18d02404 	addi	r3,r3,16528
 8003bd4:	10c00115 	stw	r3,4(r2)
		break;
 8003bd8:	00001b06 	br	8003c48 <start_pass_coef+0x140>
	case JBUF_CRANK_DEST:
		if (coef->whole_image[0] == NULL)
 8003bdc:	e0bffd17 	ldw	r2,-12(fp)
 8003be0:	10801017 	ldw	r2,64(r2)
 8003be4:	1000091e 	bne	r2,zero,8003c0c <start_pass_coef+0x104>
			ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 8003be8:	e0bffe17 	ldw	r2,-8(fp)
 8003bec:	10800017 	ldw	r2,0(r2)
 8003bf0:	00c000c4 	movi	r3,3
 8003bf4:	10c00515 	stw	r3,20(r2)
 8003bf8:	e0bffe17 	ldw	r2,-8(fp)
 8003bfc:	10800017 	ldw	r2,0(r2)
 8003c00:	10800017 	ldw	r2,0(r2)
 8003c04:	e13ffe17 	ldw	r4,-8(fp)
 8003c08:	103ee83a 	callr	r2
		coef->pub.compress_data = compress_output;
 8003c0c:	e0bffd17 	ldw	r2,-12(fp)
 8003c10:	00c20034 	movhi	r3,2048
 8003c14:	18d12c04 	addi	r3,r3,17584
 8003c18:	10c00115 	stw	r3,4(r2)
		break;
 8003c1c:	00000a06 	br	8003c48 <start_pass_coef+0x140>
#endif
	default:
		ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 8003c20:	e0bffe17 	ldw	r2,-8(fp)
 8003c24:	10800017 	ldw	r2,0(r2)
 8003c28:	00c000c4 	movi	r3,3
 8003c2c:	10c00515 	stw	r3,20(r2)
 8003c30:	e0bffe17 	ldw	r2,-8(fp)
 8003c34:	10800017 	ldw	r2,0(r2)
 8003c38:	10800017 	ldw	r2,0(r2)
 8003c3c:	e13ffe17 	ldw	r4,-8(fp)
 8003c40:	103ee83a 	callr	r2
		break;
 8003c44:	0001883a 	nop
	}
}
 8003c48:	e037883a 	mov	sp,fp
 8003c4c:	dfc00117 	ldw	ra,4(sp)
 8003c50:	df000017 	ldw	fp,0(sp)
 8003c54:	dec00204 	addi	sp,sp,8
 8003c58:	f800283a 	ret

08003c5c <compress_data>:
* which we index according to the component's SOF position.
*/

METHODDEF(boolean)
	compress_data (j_compress_ptr cinfo, JSAMPIMAGE input_buf)
{
 8003c5c:	deffeb04 	addi	sp,sp,-84
 8003c60:	dfc01415 	stw	ra,80(sp)
 8003c64:	df001315 	stw	fp,76(sp)
 8003c68:	df001304 	addi	fp,sp,76
 8003c6c:	e13ffe15 	stw	r4,-8(fp)
 8003c70:	e17fff15 	stw	r5,-4(fp)
	my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 8003c74:	e0bffe17 	ldw	r2,-8(fp)
 8003c78:	10805f17 	ldw	r2,380(r2)
 8003c7c:	e0bff715 	stw	r2,-36(fp)
	JDIMENSION MCU_col_num;	/* index of current MCU within row */
	JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 8003c80:	e0bffe17 	ldw	r2,-8(fp)
 8003c84:	10804817 	ldw	r2,288(r2)
 8003c88:	10bfffc4 	addi	r2,r2,-1
 8003c8c:	e0bff815 	stw	r2,-32(fp)
	JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 8003c90:	e0bffe17 	ldw	r2,-8(fp)
 8003c94:	10804217 	ldw	r2,264(r2)
 8003c98:	10bfffc4 	addi	r2,r2,-1
 8003c9c:	e0bff915 	stw	r2,-28(fp)
	JDIMENSION ypos, xpos;
	jpeg_component_info *compptr;
	forward_DCT_ptr forward_DCT;

	/* Loop to write as much as one whole iMCU row */
	for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row; yoffset++) {
 8003ca0:	e0bff717 	ldw	r2,-36(fp)
 8003ca4:	10800417 	ldw	r2,16(r2)
 8003ca8:	e0bff515 	stw	r2,-44(fp)
 8003cac:	0000e706 	br	800404c <compress_data+0x3f0>
		for (MCU_col_num = coef->mcu_ctr; MCU_col_num <= last_MCU_col; MCU_col_num++) {
 8003cb0:	e0bff717 	ldw	r2,-36(fp)
 8003cb4:	10800317 	ldw	r2,12(r2)
 8003cb8:	e0bff015 	stw	r2,-64(fp)
 8003cbc:	0000db06 	br	800402c <compress_data+0x3d0>
			* specially.  The data in them does not matter for image reconstruction,
			* so we fill them with values that will encode to the smallest amount of
			* data, viz: all zeroes in the AC entries, DC entries equal to previous
			* block's DC value.  (Thanks to Thomas Kinsman for this idea.)
			*/
			blkn = 0;
 8003cc0:	e03ff115 	stw	zero,-60(fp)
			for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8003cc4:	e03ff315 	stw	zero,-52(fp)
 8003cc8:	0000bf06 	br	8003fc8 <compress_data+0x36c>
				compptr = cinfo->cur_comp_info[ci];
 8003ccc:	e0fffe17 	ldw	r3,-8(fp)
 8003cd0:	e0bff317 	ldw	r2,-52(fp)
 8003cd4:	10801104 	addi	r2,r2,68
 8003cd8:	1085883a 	add	r2,r2,r2
 8003cdc:	1085883a 	add	r2,r2,r2
 8003ce0:	1885883a 	add	r2,r3,r2
 8003ce4:	10800017 	ldw	r2,0(r2)
 8003ce8:	e0bffa15 	stw	r2,-24(fp)
				forward_DCT = cinfo->fdct->forward_DCT[compptr->component_index];
 8003cec:	e0bffe17 	ldw	r2,-8(fp)
 8003cf0:	10c06317 	ldw	r3,396(r2)
 8003cf4:	e0bffa17 	ldw	r2,-24(fp)
 8003cf8:	10800117 	ldw	r2,4(r2)
 8003cfc:	10800044 	addi	r2,r2,1
 8003d00:	1085883a 	add	r2,r2,r2
 8003d04:	1085883a 	add	r2,r2,r2
 8003d08:	1885883a 	add	r2,r3,r2
 8003d0c:	10800017 	ldw	r2,0(r2)
 8003d10:	e0bffb15 	stw	r2,-20(fp)
				blockcnt = (MCU_col_num < last_MCU_col) ? compptr->MCU_width : compptr->last_col_width;
 8003d14:	e0fff017 	ldw	r3,-64(fp)
 8003d18:	e0bff817 	ldw	r2,-32(fp)
 8003d1c:	1880032e 	bgeu	r3,r2,8003d2c <compress_data+0xd0>
 8003d20:	e0bffa17 	ldw	r2,-24(fp)
 8003d24:	10800e17 	ldw	r2,56(r2)
 8003d28:	00000206 	br	8003d34 <compress_data+0xd8>
 8003d2c:	e0bffa17 	ldw	r2,-24(fp)
 8003d30:	10801217 	ldw	r2,72(r2)
 8003d34:	e0bffc15 	stw	r2,-16(fp)
				xpos = MCU_col_num * compptr->MCU_sample_width;
 8003d38:	e0bffa17 	ldw	r2,-24(fp)
 8003d3c:	10801117 	ldw	r2,68(r2)
 8003d40:	1009883a 	mov	r4,r2
 8003d44:	e17ff017 	ldw	r5,-64(fp)
 8003d48:	802c2180 	call	802c218 <__mulsi3>
 8003d4c:	e0bffd15 	stw	r2,-12(fp)
				ypos = yoffset * compptr->DCT_v_scaled_size;
 8003d50:	e0bffa17 	ldw	r2,-24(fp)
 8003d54:	10800a17 	ldw	r2,40(r2)
 8003d58:	1009883a 	mov	r4,r2
 8003d5c:	e17ff517 	ldw	r5,-44(fp)
 8003d60:	802c2180 	call	802c218 <__mulsi3>
 8003d64:	e0bff615 	stw	r2,-40(fp)
				/* ypos == (yoffset+yindex) * DCTSIZE */
				for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 8003d68:	e03ff415 	stw	zero,-48(fp)
 8003d6c:	00008f06 	br	8003fac <compress_data+0x350>
					if (coef->iMCU_row_num < last_iMCU_row || yoffset+yindex < compptr->last_row_height) {
 8003d70:	e0bff717 	ldw	r2,-36(fp)
 8003d74:	10c00217 	ldw	r3,8(r2)
 8003d78:	e0bff917 	ldw	r2,-28(fp)
 8003d7c:	18800636 	bltu	r3,r2,8003d98 <compress_data+0x13c>
 8003d80:	e0fff517 	ldw	r3,-44(fp)
 8003d84:	e0bff417 	ldw	r2,-48(fp)
 8003d88:	1887883a 	add	r3,r3,r2
 8003d8c:	e0bffa17 	ldw	r2,-24(fp)
 8003d90:	10801317 	ldw	r2,76(r2)
 8003d94:	18804f0e 	bge	r3,r2,8003ed4 <compress_data+0x278>
						(*forward_DCT) (cinfo, compptr,
							input_buf[compptr->component_index],
 8003d98:	e0bffa17 	ldw	r2,-24(fp)
 8003d9c:	10800117 	ldw	r2,4(r2)
 8003da0:	1085883a 	add	r2,r2,r2
 8003da4:	1085883a 	add	r2,r2,r2
 8003da8:	e0ffff17 	ldw	r3,-4(fp)
 8003dac:	1885883a 	add	r2,r3,r2
				xpos = MCU_col_num * compptr->MCU_sample_width;
				ypos = yoffset * compptr->DCT_v_scaled_size;
				/* ypos == (yoffset+yindex) * DCTSIZE */
				for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
					if (coef->iMCU_row_num < last_iMCU_row || yoffset+yindex < compptr->last_row_height) {
						(*forward_DCT) (cinfo, compptr,
 8003db0:	10c00017 	ldw	r3,0(r2)
							input_buf[compptr->component_index],
							coef->MCU_buffer[blkn],
 8003db4:	e13ff717 	ldw	r4,-36(fp)
				xpos = MCU_col_num * compptr->MCU_sample_width;
				ypos = yoffset * compptr->DCT_v_scaled_size;
				/* ypos == (yoffset+yindex) * DCTSIZE */
				for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
					if (coef->iMCU_row_num < last_iMCU_row || yoffset+yindex < compptr->last_row_height) {
						(*forward_DCT) (cinfo, compptr,
 8003db8:	e0bff117 	ldw	r2,-60(fp)
 8003dbc:	10800184 	addi	r2,r2,6
 8003dc0:	1085883a 	add	r2,r2,r2
 8003dc4:	1085883a 	add	r2,r2,r2
 8003dc8:	2085883a 	add	r2,r4,r2
 8003dcc:	10800017 	ldw	r2,0(r2)
 8003dd0:	e13ffc17 	ldw	r4,-16(fp)
 8003dd4:	e17ff617 	ldw	r5,-40(fp)
 8003dd8:	d9400015 	stw	r5,0(sp)
 8003ddc:	e17ffd17 	ldw	r5,-12(fp)
 8003de0:	d9400115 	stw	r5,4(sp)
 8003de4:	d9000215 	stw	r4,8(sp)
 8003de8:	e23ffb17 	ldw	r8,-20(fp)
 8003dec:	e13ffe17 	ldw	r4,-8(fp)
 8003df0:	e17ffa17 	ldw	r5,-24(fp)
 8003df4:	180d883a 	mov	r6,r3
 8003df8:	100f883a 	mov	r7,r2
 8003dfc:	403ee83a 	callr	r8
							input_buf[compptr->component_index],
							coef->MCU_buffer[blkn],
							ypos, xpos, (JDIMENSION) blockcnt);
						if (blockcnt < compptr->MCU_width) {
 8003e00:	e0bffa17 	ldw	r2,-24(fp)
 8003e04:	10800e17 	ldw	r2,56(r2)
 8003e08:	e0fffc17 	ldw	r3,-16(fp)
 8003e0c:	18805a0e 	bge	r3,r2,8003f78 <compress_data+0x31c>
							/* Create some dummy blocks at the right edge of the image. */
							jzero_far((void FAR *) coef->MCU_buffer[blkn + blockcnt],
 8003e10:	e0fff117 	ldw	r3,-60(fp)
 8003e14:	e0bffc17 	ldw	r2,-16(fp)
 8003e18:	1885883a 	add	r2,r3,r2
 8003e1c:	e0fff717 	ldw	r3,-36(fp)
 8003e20:	10800184 	addi	r2,r2,6
 8003e24:	1085883a 	add	r2,r2,r2
 8003e28:	1085883a 	add	r2,r2,r2
 8003e2c:	1885883a 	add	r2,r3,r2
 8003e30:	10c00017 	ldw	r3,0(r2)
								(compptr->MCU_width - blockcnt) * SIZEOF(JBLOCK));
 8003e34:	e0bffa17 	ldw	r2,-24(fp)
 8003e38:	11000e17 	ldw	r4,56(r2)
 8003e3c:	e0bffc17 	ldw	r2,-16(fp)
 8003e40:	2085c83a 	sub	r2,r4,r2
							input_buf[compptr->component_index],
							coef->MCU_buffer[blkn],
							ypos, xpos, (JDIMENSION) blockcnt);
						if (blockcnt < compptr->MCU_width) {
							/* Create some dummy blocks at the right edge of the image. */
							jzero_far((void FAR *) coef->MCU_buffer[blkn + blockcnt],
 8003e44:	100491fa 	slli	r2,r2,7
 8003e48:	1809883a 	mov	r4,r3
 8003e4c:	100b883a 	mov	r5,r2
 8003e50:	802b23c0 	call	802b23c <jzero_far>
								(compptr->MCU_width - blockcnt) * SIZEOF(JBLOCK));
							for (bi = blockcnt; bi < compptr->MCU_width; bi++) {
 8003e54:	e0bffc17 	ldw	r2,-16(fp)
 8003e58:	e0bff215 	stw	r2,-56(fp)
 8003e5c:	00001806 	br	8003ec0 <compress_data+0x264>
								coef->MCU_buffer[blkn+bi][0][0] = coef->MCU_buffer[blkn+bi-1][0][0];
 8003e60:	e0fff117 	ldw	r3,-60(fp)
 8003e64:	e0bff217 	ldw	r2,-56(fp)
 8003e68:	1885883a 	add	r2,r3,r2
 8003e6c:	e0fff717 	ldw	r3,-36(fp)
 8003e70:	10800184 	addi	r2,r2,6
 8003e74:	1085883a 	add	r2,r2,r2
 8003e78:	1085883a 	add	r2,r2,r2
 8003e7c:	1885883a 	add	r2,r3,r2
 8003e80:	10c00017 	ldw	r3,0(r2)
 8003e84:	e13ff117 	ldw	r4,-60(fp)
 8003e88:	e0bff217 	ldw	r2,-56(fp)
 8003e8c:	2085883a 	add	r2,r4,r2
 8003e90:	10bfffc4 	addi	r2,r2,-1
 8003e94:	e13ff717 	ldw	r4,-36(fp)
 8003e98:	10800184 	addi	r2,r2,6
 8003e9c:	1085883a 	add	r2,r2,r2
 8003ea0:	1085883a 	add	r2,r2,r2
 8003ea4:	2085883a 	add	r2,r4,r2
 8003ea8:	10800017 	ldw	r2,0(r2)
 8003eac:	1080000b 	ldhu	r2,0(r2)
 8003eb0:	1880000d 	sth	r2,0(r3)
							ypos, xpos, (JDIMENSION) blockcnt);
						if (blockcnt < compptr->MCU_width) {
							/* Create some dummy blocks at the right edge of the image. */
							jzero_far((void FAR *) coef->MCU_buffer[blkn + blockcnt],
								(compptr->MCU_width - blockcnt) * SIZEOF(JBLOCK));
							for (bi = blockcnt; bi < compptr->MCU_width; bi++) {
 8003eb4:	e0bff217 	ldw	r2,-56(fp)
 8003eb8:	10800044 	addi	r2,r2,1
 8003ebc:	e0bff215 	stw	r2,-56(fp)
 8003ec0:	e0bffa17 	ldw	r2,-24(fp)
 8003ec4:	10800e17 	ldw	r2,56(r2)
 8003ec8:	e0fff217 	ldw	r3,-56(fp)
 8003ecc:	18bfe416 	blt	r3,r2,8003e60 <compress_data+0x204>
					if (coef->iMCU_row_num < last_iMCU_row || yoffset+yindex < compptr->last_row_height) {
						(*forward_DCT) (cinfo, compptr,
							input_buf[compptr->component_index],
							coef->MCU_buffer[blkn],
							ypos, xpos, (JDIMENSION) blockcnt);
						if (blockcnt < compptr->MCU_width) {
 8003ed0:	00002906 	br	8003f78 <compress_data+0x31c>
								coef->MCU_buffer[blkn+bi][0][0] = coef->MCU_buffer[blkn+bi-1][0][0];
							}
						}
					} else {
						/* Create a row of dummy blocks at the bottom of the image. */
						jzero_far((void FAR *) coef->MCU_buffer[blkn],
 8003ed4:	e0fff717 	ldw	r3,-36(fp)
 8003ed8:	e0bff117 	ldw	r2,-60(fp)
 8003edc:	10800184 	addi	r2,r2,6
 8003ee0:	1085883a 	add	r2,r2,r2
 8003ee4:	1085883a 	add	r2,r2,r2
 8003ee8:	1885883a 	add	r2,r3,r2
 8003eec:	10c00017 	ldw	r3,0(r2)
							compptr->MCU_width * SIZEOF(JBLOCK));
 8003ef0:	e0bffa17 	ldw	r2,-24(fp)
 8003ef4:	10800e17 	ldw	r2,56(r2)
								coef->MCU_buffer[blkn+bi][0][0] = coef->MCU_buffer[blkn+bi-1][0][0];
							}
						}
					} else {
						/* Create a row of dummy blocks at the bottom of the image. */
						jzero_far((void FAR *) coef->MCU_buffer[blkn],
 8003ef8:	100491fa 	slli	r2,r2,7
 8003efc:	1809883a 	mov	r4,r3
 8003f00:	100b883a 	mov	r5,r2
 8003f04:	802b23c0 	call	802b23c <jzero_far>
							compptr->MCU_width * SIZEOF(JBLOCK));
						for (bi = 0; bi < compptr->MCU_width; bi++) {
 8003f08:	e03ff215 	stw	zero,-56(fp)
 8003f0c:	00001606 	br	8003f68 <compress_data+0x30c>
							coef->MCU_buffer[blkn+bi][0][0] = coef->MCU_buffer[blkn-1][0][0];
 8003f10:	e0fff117 	ldw	r3,-60(fp)
 8003f14:	e0bff217 	ldw	r2,-56(fp)
 8003f18:	1885883a 	add	r2,r3,r2
 8003f1c:	e0fff717 	ldw	r3,-36(fp)
 8003f20:	10800184 	addi	r2,r2,6
 8003f24:	1085883a 	add	r2,r2,r2
 8003f28:	1085883a 	add	r2,r2,r2
 8003f2c:	1885883a 	add	r2,r3,r2
 8003f30:	10c00017 	ldw	r3,0(r2)
 8003f34:	e0bff117 	ldw	r2,-60(fp)
 8003f38:	10bfffc4 	addi	r2,r2,-1
 8003f3c:	e13ff717 	ldw	r4,-36(fp)
 8003f40:	10800184 	addi	r2,r2,6
 8003f44:	1085883a 	add	r2,r2,r2
 8003f48:	1085883a 	add	r2,r2,r2
 8003f4c:	2085883a 	add	r2,r4,r2
 8003f50:	10800017 	ldw	r2,0(r2)
 8003f54:	1080000b 	ldhu	r2,0(r2)
 8003f58:	1880000d 	sth	r2,0(r3)
						}
					} else {
						/* Create a row of dummy blocks at the bottom of the image. */
						jzero_far((void FAR *) coef->MCU_buffer[blkn],
							compptr->MCU_width * SIZEOF(JBLOCK));
						for (bi = 0; bi < compptr->MCU_width; bi++) {
 8003f5c:	e0bff217 	ldw	r2,-56(fp)
 8003f60:	10800044 	addi	r2,r2,1
 8003f64:	e0bff215 	stw	r2,-56(fp)
 8003f68:	e0bffa17 	ldw	r2,-24(fp)
 8003f6c:	10800e17 	ldw	r2,56(r2)
 8003f70:	e0fff217 	ldw	r3,-56(fp)
 8003f74:	18bfe616 	blt	r3,r2,8003f10 <compress_data+0x2b4>
							coef->MCU_buffer[blkn+bi][0][0] = coef->MCU_buffer[blkn-1][0][0];
						}
					}
					blkn += compptr->MCU_width;
 8003f78:	e0bffa17 	ldw	r2,-24(fp)
 8003f7c:	10800e17 	ldw	r2,56(r2)
 8003f80:	e0fff117 	ldw	r3,-60(fp)
 8003f84:	1885883a 	add	r2,r3,r2
 8003f88:	e0bff115 	stw	r2,-60(fp)
					ypos += compptr->DCT_v_scaled_size;
 8003f8c:	e0bffa17 	ldw	r2,-24(fp)
 8003f90:	10800a17 	ldw	r2,40(r2)
 8003f94:	e0fff617 	ldw	r3,-40(fp)
 8003f98:	1885883a 	add	r2,r3,r2
 8003f9c:	e0bff615 	stw	r2,-40(fp)
				forward_DCT = cinfo->fdct->forward_DCT[compptr->component_index];
				blockcnt = (MCU_col_num < last_MCU_col) ? compptr->MCU_width : compptr->last_col_width;
				xpos = MCU_col_num * compptr->MCU_sample_width;
				ypos = yoffset * compptr->DCT_v_scaled_size;
				/* ypos == (yoffset+yindex) * DCTSIZE */
				for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 8003fa0:	e0bff417 	ldw	r2,-48(fp)
 8003fa4:	10800044 	addi	r2,r2,1
 8003fa8:	e0bff415 	stw	r2,-48(fp)
 8003fac:	e0bffa17 	ldw	r2,-24(fp)
 8003fb0:	10800f17 	ldw	r2,60(r2)
 8003fb4:	e0fff417 	ldw	r3,-48(fp)
 8003fb8:	18bf6d16 	blt	r3,r2,8003d70 <compress_data+0x114>
			* so we fill them with values that will encode to the smallest amount of
			* data, viz: all zeroes in the AC entries, DC entries equal to previous
			* block's DC value.  (Thanks to Thomas Kinsman for this idea.)
			*/
			blkn = 0;
			for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8003fbc:	e0bff317 	ldw	r2,-52(fp)
 8003fc0:	10800044 	addi	r2,r2,1
 8003fc4:	e0bff315 	stw	r2,-52(fp)
 8003fc8:	e0bffe17 	ldw	r2,-8(fp)
 8003fcc:	10804317 	ldw	r2,268(r2)
 8003fd0:	e0fff317 	ldw	r3,-52(fp)
 8003fd4:	18bf3d16 	blt	r3,r2,8003ccc <compress_data+0x70>
				}
			}
			/* Try to write the MCU.  In event of a suspension failure, we will
			* re-DCT the MCU on restart (a bit inefficient, could be fixed...)
			*/
			if (! (*cinfo->entropy->encode_mcu) (cinfo, coef->MCU_buffer)) {
 8003fd8:	e0bffe17 	ldw	r2,-8(fp)
 8003fdc:	10806417 	ldw	r2,400(r2)
 8003fe0:	10c00117 	ldw	r3,4(r2)
 8003fe4:	e0bff717 	ldw	r2,-36(fp)
 8003fe8:	10800604 	addi	r2,r2,24
 8003fec:	e13ffe17 	ldw	r4,-8(fp)
 8003ff0:	100b883a 	mov	r5,r2
 8003ff4:	183ee83a 	callr	r3
 8003ff8:	10803fcc 	andi	r2,r2,255
 8003ffc:	1000081e 	bne	r2,zero,8004020 <compress_data+0x3c4>
				/* Suspension forced; update state counters and exit */
				coef->MCU_vert_offset = yoffset;
 8004000:	e0bff717 	ldw	r2,-36(fp)
 8004004:	e0fff517 	ldw	r3,-44(fp)
 8004008:	10c00415 	stw	r3,16(r2)
				coef->mcu_ctr = MCU_col_num;
 800400c:	e0bff717 	ldw	r2,-36(fp)
 8004010:	e0fff017 	ldw	r3,-64(fp)
 8004014:	10c00315 	stw	r3,12(r2)
				return FALSE;
 8004018:	0005883a 	mov	r2,zero
 800401c:	00001706 	br	800407c <compress_data+0x420>
	jpeg_component_info *compptr;
	forward_DCT_ptr forward_DCT;

	/* Loop to write as much as one whole iMCU row */
	for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row; yoffset++) {
		for (MCU_col_num = coef->mcu_ctr; MCU_col_num <= last_MCU_col; MCU_col_num++) {
 8004020:	e0bff017 	ldw	r2,-64(fp)
 8004024:	10800044 	addi	r2,r2,1
 8004028:	e0bff015 	stw	r2,-64(fp)
 800402c:	e0bff017 	ldw	r2,-64(fp)
 8004030:	e0fff817 	ldw	r3,-32(fp)
 8004034:	18bf222e 	bgeu	r3,r2,8003cc0 <compress_data+0x64>
				coef->mcu_ctr = MCU_col_num;
				return FALSE;
			}
		}
		/* Completed an MCU row, but perhaps not an iMCU row */
		coef->mcu_ctr = 0;
 8004038:	e0bff717 	ldw	r2,-36(fp)
 800403c:	10000315 	stw	zero,12(r2)
	JDIMENSION ypos, xpos;
	jpeg_component_info *compptr;
	forward_DCT_ptr forward_DCT;

	/* Loop to write as much as one whole iMCU row */
	for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row; yoffset++) {
 8004040:	e0bff517 	ldw	r2,-44(fp)
 8004044:	10800044 	addi	r2,r2,1
 8004048:	e0bff515 	stw	r2,-44(fp)
 800404c:	e0bff717 	ldw	r2,-36(fp)
 8004050:	10800517 	ldw	r2,20(r2)
 8004054:	e0fff517 	ldw	r3,-44(fp)
 8004058:	18bf1516 	blt	r3,r2,8003cb0 <compress_data+0x54>
		}
		/* Completed an MCU row, but perhaps not an iMCU row */
		coef->mcu_ctr = 0;
	}
	/* Completed the iMCU row, advance counters for next one */
	coef->iMCU_row_num++;
 800405c:	e0bff717 	ldw	r2,-36(fp)
 8004060:	10800217 	ldw	r2,8(r2)
 8004064:	10c00044 	addi	r3,r2,1
 8004068:	e0bff717 	ldw	r2,-36(fp)
 800406c:	10c00215 	stw	r3,8(r2)
	start_iMCU_row(cinfo);
 8004070:	e13ffe17 	ldw	r4,-8(fp)
 8004074:	8003a680 	call	8003a68 <start_iMCU_row>
	return TRUE;
 8004078:	00800044 	movi	r2,1
}
 800407c:	e037883a 	mov	sp,fp
 8004080:	dfc00117 	ldw	ra,4(sp)
 8004084:	df000017 	ldw	fp,0(sp)
 8004088:	dec00204 	addi	sp,sp,8
 800408c:	f800283a 	ret

08004090 <compress_first_pass>:
* at the scan-dependent variables (MCU dimensions, etc).
*/

METHODDEF(boolean)
	compress_first_pass (j_compress_ptr cinfo, JSAMPIMAGE input_buf)
{
 8004090:	deffe604 	addi	sp,sp,-104
 8004094:	dfc01915 	stw	ra,100(sp)
 8004098:	df001815 	stw	fp,96(sp)
 800409c:	dc401715 	stw	r17,92(sp)
 80040a0:	dc001615 	stw	r16,88(sp)
 80040a4:	df001604 	addi	fp,sp,88
 80040a8:	e13ffe15 	stw	r4,-8(fp)
 80040ac:	e17fff15 	stw	r5,-4(fp)
	my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 80040b0:	e0bffe17 	ldw	r2,-8(fp)
 80040b4:	10805f17 	ldw	r2,380(r2)
 80040b8:	e0bff615 	stw	r2,-40(fp)
	JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 80040bc:	e0bffe17 	ldw	r2,-8(fp)
 80040c0:	10804217 	ldw	r2,264(r2)
 80040c4:	10bfffc4 	addi	r2,r2,-1
 80040c8:	e0bff715 	stw	r2,-36(fp)
	jpeg_component_info *compptr;
	JBLOCKARRAY buffer;
	JBLOCKROW thisblockrow, lastblockrow;
	forward_DCT_ptr forward_DCT;

	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components; ci++, compptr++) {
 80040cc:	e03fef15 	stw	zero,-68(fp)
 80040d0:	e0bffe17 	ldw	r2,-8(fp)
 80040d4:	10801417 	ldw	r2,80(r2)
 80040d8:	e0bff315 	stw	r2,-52(fp)
 80040dc:	0000e606 	br	8004478 <compress_first_pass+0x3e8>
		/* Align the virtual buffer for this component. */
		buffer = (*cinfo->mem->access_virt_barray)
 80040e0:	e0bffe17 	ldw	r2,-8(fp)
 80040e4:	10800117 	ldw	r2,4(r2)
			((j_common_ptr) cinfo, coef->whole_image[ci],
 80040e8:	14400817 	ldw	r17,32(r2)
 80040ec:	e0fff617 	ldw	r3,-40(fp)
 80040f0:	e0bfef17 	ldw	r2,-68(fp)
 80040f4:	10800404 	addi	r2,r2,16
 80040f8:	1085883a 	add	r2,r2,r2
 80040fc:	1085883a 	add	r2,r2,r2
 8004100:	1885883a 	add	r2,r3,r2
 8004104:	14000017 	ldw	r16,0(r2)
			coef->iMCU_row_num * compptr->v_samp_factor,
 8004108:	e0bff617 	ldw	r2,-40(fp)
 800410c:	10c00217 	ldw	r3,8(r2)
 8004110:	e0bff317 	ldw	r2,-52(fp)
 8004114:	10800317 	ldw	r2,12(r2)
	forward_DCT_ptr forward_DCT;

	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components; ci++, compptr++) {
		/* Align the virtual buffer for this component. */
		buffer = (*cinfo->mem->access_virt_barray)
			((j_common_ptr) cinfo, coef->whole_image[ci],
 8004118:	1809883a 	mov	r4,r3
 800411c:	100b883a 	mov	r5,r2
 8004120:	802c2180 	call	802c218 <__mulsi3>
 8004124:	1007883a 	mov	r3,r2
			coef->iMCU_row_num * compptr->v_samp_factor,
			(JDIMENSION) compptr->v_samp_factor, TRUE);
 8004128:	e0bff317 	ldw	r2,-52(fp)
 800412c:	10800317 	ldw	r2,12(r2)
	JBLOCKROW thisblockrow, lastblockrow;
	forward_DCT_ptr forward_DCT;

	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components; ci++, compptr++) {
		/* Align the virtual buffer for this component. */
		buffer = (*cinfo->mem->access_virt_barray)
 8004130:	01000044 	movi	r4,1
 8004134:	d9000015 	stw	r4,0(sp)
 8004138:	e13ffe17 	ldw	r4,-8(fp)
 800413c:	800b883a 	mov	r5,r16
 8004140:	180d883a 	mov	r6,r3
 8004144:	100f883a 	mov	r7,r2
 8004148:	883ee83a 	callr	r17
 800414c:	e0bff815 	stw	r2,-32(fp)
			((j_common_ptr) cinfo, coef->whole_image[ci],
			coef->iMCU_row_num * compptr->v_samp_factor,
			(JDIMENSION) compptr->v_samp_factor, TRUE);
		/* Count non-dummy DCT block rows in this iMCU row. */
		if (coef->iMCU_row_num < last_iMCU_row)
 8004150:	e0bff617 	ldw	r2,-40(fp)
 8004154:	10c00217 	ldw	r3,8(r2)
 8004158:	e0bff717 	ldw	r2,-36(fp)
 800415c:	1880042e 	bgeu	r3,r2,8004170 <compress_first_pass+0xe0>
			block_rows = compptr->v_samp_factor;
 8004160:	e0bff317 	ldw	r2,-52(fp)
 8004164:	10800317 	ldw	r2,12(r2)
 8004168:	e0bff115 	stw	r2,-60(fp)
 800416c:	00000d06 	br	80041a4 <compress_first_pass+0x114>
		else {
			/* NB: can't use last_row_height here, since may not be set! */
			block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 8004170:	e0bff317 	ldw	r2,-52(fp)
 8004174:	10c00817 	ldw	r3,32(r2)
 8004178:	e0bff317 	ldw	r2,-52(fp)
 800417c:	10800317 	ldw	r2,12(r2)
 8004180:	1809883a 	mov	r4,r3
 8004184:	100b883a 	mov	r5,r2
 8004188:	802c2100 	call	802c210 <__umodsi3>
 800418c:	e0bff115 	stw	r2,-60(fp)
			if (block_rows == 0) block_rows = compptr->v_samp_factor;
 8004190:	e0bff117 	ldw	r2,-60(fp)
 8004194:	1000031e 	bne	r2,zero,80041a4 <compress_first_pass+0x114>
 8004198:	e0bff317 	ldw	r2,-52(fp)
 800419c:	10800317 	ldw	r2,12(r2)
 80041a0:	e0bff115 	stw	r2,-60(fp)
		}
		blocks_across = compptr->width_in_blocks;
 80041a4:	e0bff317 	ldw	r2,-52(fp)
 80041a8:	10800717 	ldw	r2,28(r2)
 80041ac:	e0bff915 	stw	r2,-28(fp)
		h_samp_factor = compptr->h_samp_factor;
 80041b0:	e0bff317 	ldw	r2,-52(fp)
 80041b4:	10800217 	ldw	r2,8(r2)
 80041b8:	e0bffa15 	stw	r2,-24(fp)
		/* Count number of dummy blocks to be added at the right margin. */
		ndummy = (int) (blocks_across % h_samp_factor);
 80041bc:	e0bffa17 	ldw	r2,-24(fp)
 80041c0:	e0fff917 	ldw	r3,-28(fp)
 80041c4:	1809883a 	mov	r4,r3
 80041c8:	100b883a 	mov	r5,r2
 80041cc:	802c2100 	call	802c210 <__umodsi3>
 80041d0:	e0bff215 	stw	r2,-56(fp)
		if (ndummy > 0)
 80041d4:	e0bff217 	ldw	r2,-56(fp)
 80041d8:	0080040e 	bge	zero,r2,80041ec <compress_first_pass+0x15c>
			ndummy = h_samp_factor - ndummy;
 80041dc:	e0fffa17 	ldw	r3,-24(fp)
 80041e0:	e0bff217 	ldw	r2,-56(fp)
 80041e4:	1885c83a 	sub	r2,r3,r2
 80041e8:	e0bff215 	stw	r2,-56(fp)
		forward_DCT = cinfo->fdct->forward_DCT[ci];
 80041ec:	e0bffe17 	ldw	r2,-8(fp)
 80041f0:	10c06317 	ldw	r3,396(r2)
 80041f4:	e0bfef17 	ldw	r2,-68(fp)
 80041f8:	10800044 	addi	r2,r2,1
 80041fc:	1085883a 	add	r2,r2,r2
 8004200:	1085883a 	add	r2,r2,r2
 8004204:	1885883a 	add	r2,r3,r2
 8004208:	10800017 	ldw	r2,0(r2)
 800420c:	e0bffb15 	stw	r2,-20(fp)
		/* Perform DCT for all non-dummy blocks in this iMCU row.  Each call
		* on forward_DCT processes a complete horizontal row of DCT blocks.
		*/
		for (block_row = 0; block_row < block_rows; block_row++) {
 8004210:	e03ff015 	stw	zero,-64(fp)
 8004214:	00003d06 	br	800430c <compress_first_pass+0x27c>
			thisblockrow = buffer[block_row];
 8004218:	e0bff017 	ldw	r2,-64(fp)
 800421c:	1085883a 	add	r2,r2,r2
 8004220:	1085883a 	add	r2,r2,r2
 8004224:	e0fff817 	ldw	r3,-32(fp)
 8004228:	1885883a 	add	r2,r3,r2
 800422c:	10800017 	ldw	r2,0(r2)
 8004230:	e0bff415 	stw	r2,-48(fp)
			(*forward_DCT) (cinfo, compptr, input_buf[ci], thisblockrow,
 8004234:	e0bfef17 	ldw	r2,-68(fp)
 8004238:	1085883a 	add	r2,r2,r2
 800423c:	1085883a 	add	r2,r2,r2
 8004240:	e0ffff17 	ldw	r3,-4(fp)
 8004244:	1885883a 	add	r2,r3,r2
 8004248:	14000017 	ldw	r16,0(r2)
				(JDIMENSION) (block_row * compptr->DCT_v_scaled_size),
 800424c:	e0bff317 	ldw	r2,-52(fp)
 8004250:	10800a17 	ldw	r2,40(r2)
 8004254:	1009883a 	mov	r4,r2
 8004258:	e17ff017 	ldw	r5,-64(fp)
 800425c:	802c2180 	call	802c218 <__mulsi3>
		/* Perform DCT for all non-dummy blocks in this iMCU row.  Each call
		* on forward_DCT processes a complete horizontal row of DCT blocks.
		*/
		for (block_row = 0; block_row < block_rows; block_row++) {
			thisblockrow = buffer[block_row];
			(*forward_DCT) (cinfo, compptr, input_buf[ci], thisblockrow,
 8004260:	d8800015 	stw	r2,0(sp)
 8004264:	d8000115 	stw	zero,4(sp)
 8004268:	e0bff917 	ldw	r2,-28(fp)
 800426c:	d8800215 	stw	r2,8(sp)
 8004270:	e0bffb17 	ldw	r2,-20(fp)
 8004274:	e13ffe17 	ldw	r4,-8(fp)
 8004278:	e17ff317 	ldw	r5,-52(fp)
 800427c:	800d883a 	mov	r6,r16
 8004280:	e1fff417 	ldw	r7,-48(fp)
 8004284:	103ee83a 	callr	r2
				(JDIMENSION) (block_row * compptr->DCT_v_scaled_size),
				(JDIMENSION) 0, blocks_across);
			if (ndummy > 0) {
 8004288:	e0bff217 	ldw	r2,-56(fp)
 800428c:	00801c0e 	bge	zero,r2,8004300 <compress_first_pass+0x270>
				/* Create dummy blocks at the right edge of the image. */
				thisblockrow += blocks_across; /* => first dummy block */
 8004290:	e0bff917 	ldw	r2,-28(fp)
 8004294:	100491fa 	slli	r2,r2,7
 8004298:	e0fff417 	ldw	r3,-48(fp)
 800429c:	1885883a 	add	r2,r3,r2
 80042a0:	e0bff415 	stw	r2,-48(fp)
				jzero_far((void FAR *) thisblockrow, ndummy * SIZEOF(JBLOCK));
 80042a4:	e0bff217 	ldw	r2,-56(fp)
 80042a8:	100491fa 	slli	r2,r2,7
 80042ac:	e13ff417 	ldw	r4,-48(fp)
 80042b0:	100b883a 	mov	r5,r2
 80042b4:	802b23c0 	call	802b23c <jzero_far>
				lastDC = thisblockrow[-1][0];
 80042b8:	e0bff417 	ldw	r2,-48(fp)
 80042bc:	10bfe004 	addi	r2,r2,-128
 80042c0:	1080000b 	ldhu	r2,0(r2)
 80042c4:	e0bffc0d 	sth	r2,-16(fp)
				for (bi = 0; bi < ndummy; bi++) {
 80042c8:	e03fee15 	stw	zero,-72(fp)
 80042cc:	00000906 	br	80042f4 <compress_first_pass+0x264>
					thisblockrow[bi][0] = lastDC;
 80042d0:	e0bfee17 	ldw	r2,-72(fp)
 80042d4:	100491fa 	slli	r2,r2,7
 80042d8:	e0fff417 	ldw	r3,-48(fp)
 80042dc:	1885883a 	add	r2,r3,r2
 80042e0:	e0fffc0b 	ldhu	r3,-16(fp)
 80042e4:	10c0000d 	sth	r3,0(r2)
			if (ndummy > 0) {
				/* Create dummy blocks at the right edge of the image. */
				thisblockrow += blocks_across; /* => first dummy block */
				jzero_far((void FAR *) thisblockrow, ndummy * SIZEOF(JBLOCK));
				lastDC = thisblockrow[-1][0];
				for (bi = 0; bi < ndummy; bi++) {
 80042e8:	e0bfee17 	ldw	r2,-72(fp)
 80042ec:	10800044 	addi	r2,r2,1
 80042f0:	e0bfee15 	stw	r2,-72(fp)
 80042f4:	e0ffee17 	ldw	r3,-72(fp)
 80042f8:	e0bff217 	ldw	r2,-56(fp)
 80042fc:	18bff416 	blt	r3,r2,80042d0 <compress_first_pass+0x240>
			ndummy = h_samp_factor - ndummy;
		forward_DCT = cinfo->fdct->forward_DCT[ci];
		/* Perform DCT for all non-dummy blocks in this iMCU row.  Each call
		* on forward_DCT processes a complete horizontal row of DCT blocks.
		*/
		for (block_row = 0; block_row < block_rows; block_row++) {
 8004300:	e0bff017 	ldw	r2,-64(fp)
 8004304:	10800044 	addi	r2,r2,1
 8004308:	e0bff015 	stw	r2,-64(fp)
 800430c:	e0fff017 	ldw	r3,-64(fp)
 8004310:	e0bff117 	ldw	r2,-60(fp)
 8004314:	18bfc016 	blt	r3,r2,8004218 <compress_first_pass+0x188>
		/* If at end of image, create dummy block rows as needed.
		* The tricky part here is that within each MCU, we want the DC values
		* of the dummy blocks to match the last real block's DC value.
		* This squeezes a few more bytes out of the resulting file...
		*/
		if (coef->iMCU_row_num == last_iMCU_row) {
 8004318:	e0bff617 	ldw	r2,-40(fp)
 800431c:	10c00217 	ldw	r3,8(r2)
 8004320:	e0bff717 	ldw	r2,-36(fp)
 8004324:	18804e1e 	bne	r3,r2,8004460 <compress_first_pass+0x3d0>
			blocks_across += ndummy;	/* include lower right corner */
 8004328:	e0bff217 	ldw	r2,-56(fp)
 800432c:	e0fff917 	ldw	r3,-28(fp)
 8004330:	1885883a 	add	r2,r3,r2
 8004334:	e0bff915 	stw	r2,-28(fp)
			MCUs_across = blocks_across / h_samp_factor;
 8004338:	e0bffa17 	ldw	r2,-24(fp)
 800433c:	e13ff917 	ldw	r4,-28(fp)
 8004340:	100b883a 	mov	r5,r2
 8004344:	802c2080 	call	802c208 <__udivsi3>
 8004348:	e0bffd15 	stw	r2,-12(fp)
			for (block_row = block_rows; block_row < compptr->v_samp_factor; block_row++) {
 800434c:	e0bff117 	ldw	r2,-60(fp)
 8004350:	e0bff015 	stw	r2,-64(fp)
 8004354:	00003e06 	br	8004450 <compress_first_pass+0x3c0>
				thisblockrow = buffer[block_row];
 8004358:	e0bff017 	ldw	r2,-64(fp)
 800435c:	1085883a 	add	r2,r2,r2
 8004360:	1085883a 	add	r2,r2,r2
 8004364:	e0fff817 	ldw	r3,-32(fp)
 8004368:	1885883a 	add	r2,r3,r2
 800436c:	10800017 	ldw	r2,0(r2)
 8004370:	e0bff415 	stw	r2,-48(fp)
				lastblockrow = buffer[block_row-1];
 8004374:	e0bff017 	ldw	r2,-64(fp)
 8004378:	10bfffc4 	addi	r2,r2,-1
 800437c:	1085883a 	add	r2,r2,r2
 8004380:	1085883a 	add	r2,r2,r2
 8004384:	e0fff817 	ldw	r3,-32(fp)
 8004388:	1885883a 	add	r2,r3,r2
 800438c:	10800017 	ldw	r2,0(r2)
 8004390:	e0bff515 	stw	r2,-44(fp)
				jzero_far((void FAR *) thisblockrow, (size_t) (blocks_across * SIZEOF(JBLOCK)));
 8004394:	e0bff917 	ldw	r2,-28(fp)
 8004398:	100491fa 	slli	r2,r2,7
 800439c:	e13ff417 	ldw	r4,-48(fp)
 80043a0:	100b883a 	mov	r5,r2
 80043a4:	802b23c0 	call	802b23c <jzero_far>
				for (MCUindex = 0; MCUindex < MCUs_across; MCUindex++) {
 80043a8:	e03fed15 	stw	zero,-76(fp)
 80043ac:	00002206 	br	8004438 <compress_first_pass+0x3a8>
					lastDC = lastblockrow[h_samp_factor-1][0];
 80043b0:	e0bffa17 	ldw	r2,-24(fp)
 80043b4:	10bfffc4 	addi	r2,r2,-1
 80043b8:	100491fa 	slli	r2,r2,7
 80043bc:	e0fff517 	ldw	r3,-44(fp)
 80043c0:	1885883a 	add	r2,r3,r2
 80043c4:	1080000b 	ldhu	r2,0(r2)
 80043c8:	e0bffc0d 	sth	r2,-16(fp)
					for (bi = 0; bi < h_samp_factor; bi++) {
 80043cc:	e03fee15 	stw	zero,-72(fp)
 80043d0:	00000906 	br	80043f8 <compress_first_pass+0x368>
						thisblockrow[bi][0] = lastDC;
 80043d4:	e0bfee17 	ldw	r2,-72(fp)
 80043d8:	100491fa 	slli	r2,r2,7
 80043dc:	e0fff417 	ldw	r3,-48(fp)
 80043e0:	1885883a 	add	r2,r3,r2
 80043e4:	e0fffc0b 	ldhu	r3,-16(fp)
 80043e8:	10c0000d 	sth	r3,0(r2)
				thisblockrow = buffer[block_row];
				lastblockrow = buffer[block_row-1];
				jzero_far((void FAR *) thisblockrow, (size_t) (blocks_across * SIZEOF(JBLOCK)));
				for (MCUindex = 0; MCUindex < MCUs_across; MCUindex++) {
					lastDC = lastblockrow[h_samp_factor-1][0];
					for (bi = 0; bi < h_samp_factor; bi++) {
 80043ec:	e0bfee17 	ldw	r2,-72(fp)
 80043f0:	10800044 	addi	r2,r2,1
 80043f4:	e0bfee15 	stw	r2,-72(fp)
 80043f8:	e0ffee17 	ldw	r3,-72(fp)
 80043fc:	e0bffa17 	ldw	r2,-24(fp)
 8004400:	18bff416 	blt	r3,r2,80043d4 <compress_first_pass+0x344>
						thisblockrow[bi][0] = lastDC;
					}
					thisblockrow += h_samp_factor; /* advance to next MCU in row */
 8004404:	e0bffa17 	ldw	r2,-24(fp)
 8004408:	100491fa 	slli	r2,r2,7
 800440c:	e0fff417 	ldw	r3,-48(fp)
 8004410:	1885883a 	add	r2,r3,r2
 8004414:	e0bff415 	stw	r2,-48(fp)
					lastblockrow += h_samp_factor;
 8004418:	e0bffa17 	ldw	r2,-24(fp)
 800441c:	100491fa 	slli	r2,r2,7
 8004420:	e0fff517 	ldw	r3,-44(fp)
 8004424:	1885883a 	add	r2,r3,r2
 8004428:	e0bff515 	stw	r2,-44(fp)
			MCUs_across = blocks_across / h_samp_factor;
			for (block_row = block_rows; block_row < compptr->v_samp_factor; block_row++) {
				thisblockrow = buffer[block_row];
				lastblockrow = buffer[block_row-1];
				jzero_far((void FAR *) thisblockrow, (size_t) (blocks_across * SIZEOF(JBLOCK)));
				for (MCUindex = 0; MCUindex < MCUs_across; MCUindex++) {
 800442c:	e0bfed17 	ldw	r2,-76(fp)
 8004430:	10800044 	addi	r2,r2,1
 8004434:	e0bfed15 	stw	r2,-76(fp)
 8004438:	e0ffed17 	ldw	r3,-76(fp)
 800443c:	e0bffd17 	ldw	r2,-12(fp)
 8004440:	18bfdb36 	bltu	r3,r2,80043b0 <compress_first_pass+0x320>
		* This squeezes a few more bytes out of the resulting file...
		*/
		if (coef->iMCU_row_num == last_iMCU_row) {
			blocks_across += ndummy;	/* include lower right corner */
			MCUs_across = blocks_across / h_samp_factor;
			for (block_row = block_rows; block_row < compptr->v_samp_factor; block_row++) {
 8004444:	e0bff017 	ldw	r2,-64(fp)
 8004448:	10800044 	addi	r2,r2,1
 800444c:	e0bff015 	stw	r2,-64(fp)
 8004450:	e0bff317 	ldw	r2,-52(fp)
 8004454:	10800317 	ldw	r2,12(r2)
 8004458:	e0fff017 	ldw	r3,-64(fp)
 800445c:	18bfbe16 	blt	r3,r2,8004358 <compress_first_pass+0x2c8>
	jpeg_component_info *compptr;
	JBLOCKARRAY buffer;
	JBLOCKROW thisblockrow, lastblockrow;
	forward_DCT_ptr forward_DCT;

	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components; ci++, compptr++) {
 8004460:	e0bfef17 	ldw	r2,-68(fp)
 8004464:	10800044 	addi	r2,r2,1
 8004468:	e0bfef15 	stw	r2,-68(fp)
 800446c:	e0bff317 	ldw	r2,-52(fp)
 8004470:	10801604 	addi	r2,r2,88
 8004474:	e0bff315 	stw	r2,-52(fp)
 8004478:	e0bffe17 	ldw	r2,-8(fp)
 800447c:	10801217 	ldw	r2,72(r2)
 8004480:	e0ffef17 	ldw	r3,-68(fp)
 8004484:	18bf1616 	blt	r3,r2,80040e0 <compress_first_pass+0x50>
	/* NB: compress_output will increment iMCU_row_num if successful.
	* A suspension return will result in redoing all the work above next time.
	*/

	/* Emit data to the entropy encoder, sharing code with subsequent passes */
	return compress_output(cinfo, input_buf);
 8004488:	e13ffe17 	ldw	r4,-8(fp)
 800448c:	e17fff17 	ldw	r5,-4(fp)
 8004490:	80044b00 	call	80044b0 <compress_output>
}
 8004494:	e037883a 	mov	sp,fp
 8004498:	dfc00317 	ldw	ra,12(sp)
 800449c:	df000217 	ldw	fp,8(sp)
 80044a0:	dc400117 	ldw	r17,4(sp)
 80044a4:	dc000017 	ldw	r16,0(sp)
 80044a8:	dec00404 	addi	sp,sp,16
 80044ac:	f800283a 	ret

080044b0 <compress_output>:
* NB: input_buf is ignored; it is likely to be a NULL pointer.
*/

METHODDEF(boolean)
	compress_output (j_compress_ptr cinfo, JSAMPIMAGE input_buf)
{
 80044b0:	deffeb04 	addi	sp,sp,-84
 80044b4:	dfc01415 	stw	ra,80(sp)
 80044b8:	df001315 	stw	fp,76(sp)
 80044bc:	dc401215 	stw	r17,72(sp)
 80044c0:	dc001115 	stw	r16,68(sp)
 80044c4:	df001104 	addi	fp,sp,68
 80044c8:	e13ffe15 	stw	r4,-8(fp)
 80044cc:	e17fff15 	stw	r5,-4(fp)
	my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 80044d0:	e0bffe17 	ldw	r2,-8(fp)
 80044d4:	10805f17 	ldw	r2,380(r2)
 80044d8:	e0bff715 	stw	r2,-36(fp)

	/* Align the virtual buffers for the components used in this scan.
	* NB: during first pass, this is safe only because the buffers will
	* already be aligned properly, so jmemmgr.c won't need to do any I/O.
	*/
	for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 80044dc:	e03ff215 	stw	zero,-56(fp)
 80044e0:	00002e06 	br	800459c <compress_output+0xec>
		compptr = cinfo->cur_comp_info[ci];
 80044e4:	e0fffe17 	ldw	r3,-8(fp)
 80044e8:	e0bff217 	ldw	r2,-56(fp)
 80044ec:	10801104 	addi	r2,r2,68
 80044f0:	1085883a 	add	r2,r2,r2
 80044f4:	1085883a 	add	r2,r2,r2
 80044f8:	1885883a 	add	r2,r3,r2
 80044fc:	10800017 	ldw	r2,0(r2)
 8004500:	e0bff815 	stw	r2,-32(fp)
		buffer[ci] = (*cinfo->mem->access_virt_barray)
 8004504:	e0bffe17 	ldw	r2,-8(fp)
 8004508:	10800117 	ldw	r2,4(r2)
			((j_common_ptr) cinfo, coef->whole_image[compptr->component_index],
 800450c:	14400817 	ldw	r17,32(r2)
 8004510:	e0bff817 	ldw	r2,-32(fp)
 8004514:	10800117 	ldw	r2,4(r2)
 8004518:	e0fff717 	ldw	r3,-36(fp)
 800451c:	10800404 	addi	r2,r2,16
 8004520:	1085883a 	add	r2,r2,r2
 8004524:	1085883a 	add	r2,r2,r2
 8004528:	1885883a 	add	r2,r3,r2
 800452c:	14000017 	ldw	r16,0(r2)
			coef->iMCU_row_num * compptr->v_samp_factor,
 8004530:	e0bff717 	ldw	r2,-36(fp)
 8004534:	10c00217 	ldw	r3,8(r2)
 8004538:	e0bff817 	ldw	r2,-32(fp)
 800453c:	10800317 	ldw	r2,12(r2)
	* already be aligned properly, so jmemmgr.c won't need to do any I/O.
	*/
	for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
		compptr = cinfo->cur_comp_info[ci];
		buffer[ci] = (*cinfo->mem->access_virt_barray)
			((j_common_ptr) cinfo, coef->whole_image[compptr->component_index],
 8004540:	1809883a 	mov	r4,r3
 8004544:	100b883a 	mov	r5,r2
 8004548:	802c2180 	call	802c218 <__mulsi3>
 800454c:	1007883a 	mov	r3,r2
			coef->iMCU_row_num * compptr->v_samp_factor,
			(JDIMENSION) compptr->v_samp_factor, FALSE);
 8004550:	e0bff817 	ldw	r2,-32(fp)
 8004554:	10800317 	ldw	r2,12(r2)
	* already be aligned properly, so jmemmgr.c won't need to do any I/O.
	*/
	for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
		compptr = cinfo->cur_comp_info[ci];
		buffer[ci] = (*cinfo->mem->access_virt_barray)
			((j_common_ptr) cinfo, coef->whole_image[compptr->component_index],
 8004558:	d8000015 	stw	zero,0(sp)
 800455c:	e13ffe17 	ldw	r4,-8(fp)
 8004560:	800b883a 	mov	r5,r16
 8004564:	180d883a 	mov	r6,r3
 8004568:	100f883a 	mov	r7,r2
 800456c:	883ee83a 	callr	r17
 8004570:	1007883a 	mov	r3,r2
	* NB: during first pass, this is safe only because the buffers will
	* already be aligned properly, so jmemmgr.c won't need to do any I/O.
	*/
	for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
		compptr = cinfo->cur_comp_info[ci];
		buffer[ci] = (*cinfo->mem->access_virt_barray)
 8004574:	e0bff217 	ldw	r2,-56(fp)
 8004578:	1085883a 	add	r2,r2,r2
 800457c:	1085883a 	add	r2,r2,r2
 8004580:	e13ff004 	addi	r4,fp,-64
 8004584:	2085883a 	add	r2,r4,r2
 8004588:	10800a04 	addi	r2,r2,40
 800458c:	10c00015 	stw	r3,0(r2)

	/* Align the virtual buffers for the components used in this scan.
	* NB: during first pass, this is safe only because the buffers will
	* already be aligned properly, so jmemmgr.c won't need to do any I/O.
	*/
	for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8004590:	e0bff217 	ldw	r2,-56(fp)
 8004594:	10800044 	addi	r2,r2,1
 8004598:	e0bff215 	stw	r2,-56(fp)
 800459c:	e0bffe17 	ldw	r2,-8(fp)
 80045a0:	10804317 	ldw	r2,268(r2)
 80045a4:	e0fff217 	ldw	r3,-56(fp)
 80045a8:	18bfce16 	blt	r3,r2,80044e4 <compress_output+0x34>
			coef->iMCU_row_num * compptr->v_samp_factor,
			(JDIMENSION) compptr->v_samp_factor, FALSE);
	}

	/* Loop to process one whole iMCU row */
	for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 80045ac:	e0bff717 	ldw	r2,-36(fp)
 80045b0:	10800417 	ldw	r2,16(r2)
 80045b4:	e0bff515 	stw	r2,-44(fp)
 80045b8:	00006c06 	br	800476c <compress_output+0x2bc>
		yoffset++) {
			for (MCU_col_num = coef->mcu_ctr; MCU_col_num < cinfo->MCUs_per_row;
 80045bc:	e0bff717 	ldw	r2,-36(fp)
 80045c0:	10800317 	ldw	r2,12(r2)
 80045c4:	e0bff015 	stw	r2,-64(fp)
 80045c8:	00005f06 	br	8004748 <compress_output+0x298>
				MCU_col_num++) {
					/* Construct list of pointers to DCT blocks belonging to this MCU */
					blkn = 0;			/* index of current DCT block within MCU */
 80045cc:	e03ff115 	stw	zero,-60(fp)
					for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 80045d0:	e03ff215 	stw	zero,-56(fp)
 80045d4:	00004306 	br	80046e4 <compress_output+0x234>
						compptr = cinfo->cur_comp_info[ci];
 80045d8:	e0fffe17 	ldw	r3,-8(fp)
 80045dc:	e0bff217 	ldw	r2,-56(fp)
 80045e0:	10801104 	addi	r2,r2,68
 80045e4:	1085883a 	add	r2,r2,r2
 80045e8:	1085883a 	add	r2,r2,r2
 80045ec:	1885883a 	add	r2,r3,r2
 80045f0:	10800017 	ldw	r2,0(r2)
 80045f4:	e0bff815 	stw	r2,-32(fp)
						start_col = MCU_col_num * compptr->MCU_width;
 80045f8:	e0bff817 	ldw	r2,-32(fp)
 80045fc:	10800e17 	ldw	r2,56(r2)
 8004600:	1009883a 	mov	r4,r2
 8004604:	e17ff017 	ldw	r5,-64(fp)
 8004608:	802c2180 	call	802c218 <__mulsi3>
 800460c:	e0bff915 	stw	r2,-28(fp)
						for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 8004610:	e03ff415 	stw	zero,-48(fp)
 8004614:	00002c06 	br	80046c8 <compress_output+0x218>
							buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 8004618:	e0bff217 	ldw	r2,-56(fp)
 800461c:	1085883a 	add	r2,r2,r2
 8004620:	1085883a 	add	r2,r2,r2
 8004624:	e0fff004 	addi	r3,fp,-64
 8004628:	1885883a 	add	r2,r3,r2
 800462c:	10800a04 	addi	r2,r2,40
 8004630:	10c00017 	ldw	r3,0(r2)
 8004634:	e13ff417 	ldw	r4,-48(fp)
 8004638:	e0bff517 	ldw	r2,-44(fp)
 800463c:	2085883a 	add	r2,r4,r2
 8004640:	1085883a 	add	r2,r2,r2
 8004644:	1085883a 	add	r2,r2,r2
 8004648:	1885883a 	add	r2,r3,r2
 800464c:	10c00017 	ldw	r3,0(r2)
 8004650:	e0bff917 	ldw	r2,-28(fp)
 8004654:	100491fa 	slli	r2,r2,7
 8004658:	1885883a 	add	r2,r3,r2
 800465c:	e0bff615 	stw	r2,-40(fp)
							for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 8004660:	e03ff315 	stw	zero,-52(fp)
 8004664:	00001106 	br	80046ac <compress_output+0x1fc>
								coef->MCU_buffer[blkn++] = buffer_ptr++;
 8004668:	e0fff717 	ldw	r3,-36(fp)
 800466c:	e0bff117 	ldw	r2,-60(fp)
 8004670:	10800184 	addi	r2,r2,6
 8004674:	1085883a 	add	r2,r2,r2
 8004678:	1085883a 	add	r2,r2,r2
 800467c:	1885883a 	add	r2,r3,r2
 8004680:	e0fff617 	ldw	r3,-40(fp)
 8004684:	10c00015 	stw	r3,0(r2)
 8004688:	e0bff117 	ldw	r2,-60(fp)
 800468c:	10800044 	addi	r2,r2,1
 8004690:	e0bff115 	stw	r2,-60(fp)
 8004694:	e0bff617 	ldw	r2,-40(fp)
 8004698:	10802004 	addi	r2,r2,128
 800469c:	e0bff615 	stw	r2,-40(fp)
					for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
						compptr = cinfo->cur_comp_info[ci];
						start_col = MCU_col_num * compptr->MCU_width;
						for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
							buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
							for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 80046a0:	e0bff317 	ldw	r2,-52(fp)
 80046a4:	10800044 	addi	r2,r2,1
 80046a8:	e0bff315 	stw	r2,-52(fp)
 80046ac:	e0bff817 	ldw	r2,-32(fp)
 80046b0:	10800e17 	ldw	r2,56(r2)
 80046b4:	e0fff317 	ldw	r3,-52(fp)
 80046b8:	18bfeb16 	blt	r3,r2,8004668 <compress_output+0x1b8>
					/* Construct list of pointers to DCT blocks belonging to this MCU */
					blkn = 0;			/* index of current DCT block within MCU */
					for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
						compptr = cinfo->cur_comp_info[ci];
						start_col = MCU_col_num * compptr->MCU_width;
						for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 80046bc:	e0bff417 	ldw	r2,-48(fp)
 80046c0:	10800044 	addi	r2,r2,1
 80046c4:	e0bff415 	stw	r2,-48(fp)
 80046c8:	e0bff817 	ldw	r2,-32(fp)
 80046cc:	10800f17 	ldw	r2,60(r2)
 80046d0:	e0fff417 	ldw	r3,-48(fp)
 80046d4:	18bfd016 	blt	r3,r2,8004618 <compress_output+0x168>
		yoffset++) {
			for (MCU_col_num = coef->mcu_ctr; MCU_col_num < cinfo->MCUs_per_row;
				MCU_col_num++) {
					/* Construct list of pointers to DCT blocks belonging to this MCU */
					blkn = 0;			/* index of current DCT block within MCU */
					for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 80046d8:	e0bff217 	ldw	r2,-56(fp)
 80046dc:	10800044 	addi	r2,r2,1
 80046e0:	e0bff215 	stw	r2,-56(fp)
 80046e4:	e0bffe17 	ldw	r2,-8(fp)
 80046e8:	10804317 	ldw	r2,268(r2)
 80046ec:	e0fff217 	ldw	r3,-56(fp)
 80046f0:	18bfb916 	blt	r3,r2,80045d8 <compress_output+0x128>
								coef->MCU_buffer[blkn++] = buffer_ptr++;
							}
						}
					}
					/* Try to write the MCU. */
					if (! (*cinfo->entropy->encode_mcu) (cinfo, coef->MCU_buffer)) {
 80046f4:	e0bffe17 	ldw	r2,-8(fp)
 80046f8:	10806417 	ldw	r2,400(r2)
 80046fc:	10c00117 	ldw	r3,4(r2)
 8004700:	e0bff717 	ldw	r2,-36(fp)
 8004704:	10800604 	addi	r2,r2,24
 8004708:	e13ffe17 	ldw	r4,-8(fp)
 800470c:	100b883a 	mov	r5,r2
 8004710:	183ee83a 	callr	r3
 8004714:	10803fcc 	andi	r2,r2,255
 8004718:	1000081e 	bne	r2,zero,800473c <compress_output+0x28c>
						/* Suspension forced; update state counters and exit */
						coef->MCU_vert_offset = yoffset;
 800471c:	e0bff717 	ldw	r2,-36(fp)
 8004720:	e0fff517 	ldw	r3,-44(fp)
 8004724:	10c00415 	stw	r3,16(r2)
						coef->mcu_ctr = MCU_col_num;
 8004728:	e0bff717 	ldw	r2,-36(fp)
 800472c:	e0fff017 	ldw	r3,-64(fp)
 8004730:	10c00315 	stw	r3,12(r2)
						return FALSE;
 8004734:	0005883a 	mov	r2,zero
 8004738:	00001806 	br	800479c <compress_output+0x2ec>

	/* Loop to process one whole iMCU row */
	for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
		yoffset++) {
			for (MCU_col_num = coef->mcu_ctr; MCU_col_num < cinfo->MCUs_per_row;
				MCU_col_num++) {
 800473c:	e0bff017 	ldw	r2,-64(fp)
 8004740:	10800044 	addi	r2,r2,1
 8004744:	e0bff015 	stw	r2,-64(fp)
	}

	/* Loop to process one whole iMCU row */
	for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
		yoffset++) {
			for (MCU_col_num = coef->mcu_ctr; MCU_col_num < cinfo->MCUs_per_row;
 8004748:	e0bffe17 	ldw	r2,-8(fp)
 800474c:	10804817 	ldw	r2,288(r2)
 8004750:	e0fff017 	ldw	r3,-64(fp)
 8004754:	18bf9d36 	bltu	r3,r2,80045cc <compress_output+0x11c>
						coef->mcu_ctr = MCU_col_num;
						return FALSE;
					}
			}
			/* Completed an MCU row, but perhaps not an iMCU row */
			coef->mcu_ctr = 0;
 8004758:	e0bff717 	ldw	r2,-36(fp)
 800475c:	10000315 	stw	zero,12(r2)
			(JDIMENSION) compptr->v_samp_factor, FALSE);
	}

	/* Loop to process one whole iMCU row */
	for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
		yoffset++) {
 8004760:	e0bff517 	ldw	r2,-44(fp)
 8004764:	10800044 	addi	r2,r2,1
 8004768:	e0bff515 	stw	r2,-44(fp)
			coef->iMCU_row_num * compptr->v_samp_factor,
			(JDIMENSION) compptr->v_samp_factor, FALSE);
	}

	/* Loop to process one whole iMCU row */
	for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800476c:	e0bff717 	ldw	r2,-36(fp)
 8004770:	10800517 	ldw	r2,20(r2)
 8004774:	e0fff517 	ldw	r3,-44(fp)
 8004778:	18bf9016 	blt	r3,r2,80045bc <compress_output+0x10c>
			}
			/* Completed an MCU row, but perhaps not an iMCU row */
			coef->mcu_ctr = 0;
	}
	/* Completed the iMCU row, advance counters for next one */
	coef->iMCU_row_num++;
 800477c:	e0bff717 	ldw	r2,-36(fp)
 8004780:	10800217 	ldw	r2,8(r2)
 8004784:	10c00044 	addi	r3,r2,1
 8004788:	e0bff717 	ldw	r2,-36(fp)
 800478c:	10c00215 	stw	r3,8(r2)
	start_iMCU_row(cinfo);
 8004790:	e13ffe17 	ldw	r4,-8(fp)
 8004794:	8003a680 	call	8003a68 <start_iMCU_row>
	return TRUE;
 8004798:	00800044 	movi	r2,1
}
 800479c:	e037883a 	mov	sp,fp
 80047a0:	dfc00317 	ldw	ra,12(sp)
 80047a4:	df000217 	ldw	fp,8(sp)
 80047a8:	dc400117 	ldw	r17,4(sp)
 80047ac:	dc000017 	ldw	r16,0(sp)
 80047b0:	dec00404 	addi	sp,sp,16
 80047b4:	f800283a 	ret

080047b8 <jinit_c_coef_controller>:
* Initialize coefficient buffer controller.
*/

GLOBAL(void)
	jinit_c_coef_controller (j_compress_ptr cinfo, boolean need_full_buffer)
{
 80047b8:	defff304 	addi	sp,sp,-52
 80047bc:	dfc00c15 	stw	ra,48(sp)
 80047c0:	df000b15 	stw	fp,44(sp)
 80047c4:	dc400a15 	stw	r17,40(sp)
 80047c8:	dc000915 	stw	r16,36(sp)
 80047cc:	df000904 	addi	fp,sp,36
 80047d0:	e13ffe15 	stw	r4,-8(fp)
 80047d4:	2805883a 	mov	r2,r5
 80047d8:	e0bfff05 	stb	r2,-4(fp)
	my_coef_ptr coef;

	coef = (my_coef_ptr)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80047dc:	e0bffe17 	ldw	r2,-8(fp)
 80047e0:	10800117 	ldw	r2,4(r2)
 80047e4:	10800017 	ldw	r2,0(r2)
GLOBAL(void)
	jinit_c_coef_controller (j_compress_ptr cinfo, boolean need_full_buffer)
{
	my_coef_ptr coef;

	coef = (my_coef_ptr)
 80047e8:	e13ffe17 	ldw	r4,-8(fp)
 80047ec:	01400044 	movi	r5,1
 80047f0:	01801a04 	movi	r6,104
 80047f4:	103ee83a 	callr	r2
 80047f8:	e0bffc15 	stw	r2,-16(fp)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
		SIZEOF(my_coef_controller));
	cinfo->coef = (struct jpeg_c_coef_controller *) coef;
 80047fc:	e0bffe17 	ldw	r2,-8(fp)
 8004800:	e0fffc17 	ldw	r3,-16(fp)
 8004804:	10c05f15 	stw	r3,380(r2)
	coef->pub.start_pass = start_pass_coef;
 8004808:	e0bffc17 	ldw	r2,-16(fp)
 800480c:	00c20034 	movhi	r3,2048
 8004810:	18cec204 	addi	r3,r3,15112
 8004814:	10c00015 	stw	r3,0(r2)

	/* Create the coefficient buffer. */
	if (need_full_buffer) {
 8004818:	e0bfff03 	ldbu	r2,-4(fp)
 800481c:	10003626 	beq	r2,zero,80048f8 <jinit_c_coef_controller+0x140>
		/* Allocate a full-image virtual array for each component, */
		/* padded to a multiple of samp_factor DCT blocks in each direction. */
		int ci;
		jpeg_component_info *compptr;

		for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8004820:	e03ff915 	stw	zero,-28(fp)
 8004824:	e0bffe17 	ldw	r2,-8(fp)
 8004828:	10801417 	ldw	r2,80(r2)
 800482c:	e0bffa15 	stw	r2,-24(fp)
 8004830:	00002c06 	br	80048e4 <jinit_c_coef_controller+0x12c>
			ci++, compptr++) {
				coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 8004834:	e0bffe17 	ldw	r2,-8(fp)
 8004838:	10800117 	ldw	r2,4(r2)
					((j_common_ptr) cinfo, JPOOL_IMAGE, FALSE,
 800483c:	14400517 	ldw	r17,20(r2)
					(JDIMENSION) jround_up((long) compptr->width_in_blocks,
 8004840:	e0bffa17 	ldw	r2,-24(fp)
 8004844:	10800717 	ldw	r2,28(r2)
 8004848:	1007883a 	mov	r3,r2
					(long) compptr->h_samp_factor),
 800484c:	e0bffa17 	ldw	r2,-24(fp)
 8004850:	10800217 	ldw	r2,8(r2)

		for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
			ci++, compptr++) {
				coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
					((j_common_ptr) cinfo, JPOOL_IMAGE, FALSE,
					(JDIMENSION) jround_up((long) compptr->width_in_blocks,
 8004854:	1809883a 	mov	r4,r3
 8004858:	100b883a 	mov	r5,r2
 800485c:	802b0cc0 	call	802b0cc <jround_up>
		jpeg_component_info *compptr;

		for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
			ci++, compptr++) {
				coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
					((j_common_ptr) cinfo, JPOOL_IMAGE, FALSE,
 8004860:	1021883a 	mov	r16,r2
					(JDIMENSION) jround_up((long) compptr->width_in_blocks,
					(long) compptr->h_samp_factor),
					(JDIMENSION) jround_up((long) compptr->height_in_blocks,
 8004864:	e0bffa17 	ldw	r2,-24(fp)
 8004868:	10800817 	ldw	r2,32(r2)
 800486c:	1007883a 	mov	r3,r2
					(long) compptr->v_samp_factor),
 8004870:	e0bffa17 	ldw	r2,-24(fp)
 8004874:	10800317 	ldw	r2,12(r2)
			ci++, compptr++) {
				coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
					((j_common_ptr) cinfo, JPOOL_IMAGE, FALSE,
					(JDIMENSION) jround_up((long) compptr->width_in_blocks,
					(long) compptr->h_samp_factor),
					(JDIMENSION) jround_up((long) compptr->height_in_blocks,
 8004878:	1809883a 	mov	r4,r3
 800487c:	100b883a 	mov	r5,r2
 8004880:	802b0cc0 	call	802b0cc <jround_up>
		jpeg_component_info *compptr;

		for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
			ci++, compptr++) {
				coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
					((j_common_ptr) cinfo, JPOOL_IMAGE, FALSE,
 8004884:	1007883a 	mov	r3,r2
					(JDIMENSION) jround_up((long) compptr->width_in_blocks,
					(long) compptr->h_samp_factor),
					(JDIMENSION) jround_up((long) compptr->height_in_blocks,
					(long) compptr->v_samp_factor),
					(JDIMENSION) compptr->v_samp_factor);
 8004888:	e0bffa17 	ldw	r2,-24(fp)
 800488c:	10800317 	ldw	r2,12(r2)
		jpeg_component_info *compptr;

		for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
			ci++, compptr++) {
				coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
					((j_common_ptr) cinfo, JPOOL_IMAGE, FALSE,
 8004890:	d8c00015 	stw	r3,0(sp)
 8004894:	d8800115 	stw	r2,4(sp)
 8004898:	e13ffe17 	ldw	r4,-8(fp)
 800489c:	01400044 	movi	r5,1
 80048a0:	000d883a 	mov	r6,zero
 80048a4:	800f883a 	mov	r7,r16
 80048a8:	883ee83a 	callr	r17
 80048ac:	1007883a 	mov	r3,r2
		int ci;
		jpeg_component_info *compptr;

		for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
			ci++, compptr++) {
				coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 80048b0:	e13ffc17 	ldw	r4,-16(fp)
 80048b4:	e0bff917 	ldw	r2,-28(fp)
 80048b8:	10800404 	addi	r2,r2,16
 80048bc:	1085883a 	add	r2,r2,r2
 80048c0:	1085883a 	add	r2,r2,r2
 80048c4:	2085883a 	add	r2,r4,r2
 80048c8:	10c00015 	stw	r3,0(r2)
		/* padded to a multiple of samp_factor DCT blocks in each direction. */
		int ci;
		jpeg_component_info *compptr;

		for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
			ci++, compptr++) {
 80048cc:	e0bff917 	ldw	r2,-28(fp)
 80048d0:	10800044 	addi	r2,r2,1
 80048d4:	e0bff915 	stw	r2,-28(fp)
 80048d8:	e0bffa17 	ldw	r2,-24(fp)
 80048dc:	10801604 	addi	r2,r2,88
 80048e0:	e0bffa15 	stw	r2,-24(fp)
		/* Allocate a full-image virtual array for each component, */
		/* padded to a multiple of samp_factor DCT blocks in each direction. */
		int ci;
		jpeg_component_info *compptr;

		for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 80048e4:	e0bffe17 	ldw	r2,-8(fp)
 80048e8:	10801217 	ldw	r2,72(r2)
 80048ec:	e0fff917 	ldw	r3,-28(fp)
 80048f0:	18bfd016 	blt	r3,r2,8004834 <jinit_c_coef_controller+0x7c>
 80048f4:	00001d06 	br	800496c <jinit_c_coef_controller+0x1b4>
		/* We only need a single-MCU buffer. */
		JBLOCKROW buffer;
		int i;

		buffer = (JBLOCKROW)
			(*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80048f8:	e0bffe17 	ldw	r2,-8(fp)
 80048fc:	10800117 	ldw	r2,4(r2)
 8004900:	10800117 	ldw	r2,4(r2)
	} else {
		/* We only need a single-MCU buffer. */
		JBLOCKROW buffer;
		int i;

		buffer = (JBLOCKROW)
 8004904:	e13ffe17 	ldw	r4,-8(fp)
 8004908:	01400044 	movi	r5,1
 800490c:	01814004 	movi	r6,1280
 8004910:	103ee83a 	callr	r2
 8004914:	e0bffd15 	stw	r2,-12(fp)
			(*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
			C_MAX_BLOCKS_IN_MCU * SIZEOF(JBLOCK));
		for (i = 0; i < C_MAX_BLOCKS_IN_MCU; i++) {
 8004918:	e03ffb15 	stw	zero,-20(fp)
 800491c:	00000e06 	br	8004958 <jinit_c_coef_controller+0x1a0>
			coef->MCU_buffer[i] = buffer + i;
 8004920:	e0bffb17 	ldw	r2,-20(fp)
 8004924:	100491fa 	slli	r2,r2,7
 8004928:	e0fffd17 	ldw	r3,-12(fp)
 800492c:	1887883a 	add	r3,r3,r2
 8004930:	e13ffc17 	ldw	r4,-16(fp)
 8004934:	e0bffb17 	ldw	r2,-20(fp)
 8004938:	10800184 	addi	r2,r2,6
 800493c:	1085883a 	add	r2,r2,r2
 8004940:	1085883a 	add	r2,r2,r2
 8004944:	2085883a 	add	r2,r4,r2
 8004948:	10c00015 	stw	r3,0(r2)
		int i;

		buffer = (JBLOCKROW)
			(*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
			C_MAX_BLOCKS_IN_MCU * SIZEOF(JBLOCK));
		for (i = 0; i < C_MAX_BLOCKS_IN_MCU; i++) {
 800494c:	e0bffb17 	ldw	r2,-20(fp)
 8004950:	10800044 	addi	r2,r2,1
 8004954:	e0bffb15 	stw	r2,-20(fp)
 8004958:	e0bffb17 	ldw	r2,-20(fp)
 800495c:	10800290 	cmplti	r2,r2,10
 8004960:	103fef1e 	bne	r2,zero,8004920 <jinit_c_coef_controller+0x168>
			coef->MCU_buffer[i] = buffer + i;
		}
		coef->whole_image[0] = NULL; /* flag for no virtual arrays */
 8004964:	e0bffc17 	ldw	r2,-16(fp)
 8004968:	10001015 	stw	zero,64(r2)
	}
}
 800496c:	e037883a 	mov	sp,fp
 8004970:	dfc00317 	ldw	ra,12(sp)
 8004974:	df000217 	ldw	fp,8(sp)
 8004978:	dc400117 	ldw	r17,4(sp)
 800497c:	dc000017 	ldw	r16,0(sp)
 8004980:	dec00404 	addi	sp,sp,16
 8004984:	f800283a 	ret

08004988 <rgb_ycc_start>:
* Initialize for RGB->YCC colorspace conversion.
*/

METHODDEF(void)
	rgb_ycc_start (j_compress_ptr cinfo)
{
 8004988:	defff904 	addi	sp,sp,-28
 800498c:	dfc00615 	stw	ra,24(sp)
 8004990:	df000515 	stw	fp,20(sp)
 8004994:	dc000415 	stw	r16,16(sp)
 8004998:	df000404 	addi	fp,sp,16
 800499c:	e13fff15 	stw	r4,-4(fp)
	my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 80049a0:	e0bfff17 	ldw	r2,-4(fp)
 80049a4:	10806117 	ldw	r2,388(r2)
 80049a8:	e0bffd15 	stw	r2,-12(fp)
	INT32 * rgb_ycc_tab;
	INT32 i;

	/* Allocate and fill in the conversion tables. */
	cconvert->rgb_ycc_tab = rgb_ycc_tab = (INT32 *)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80049ac:	e0bfff17 	ldw	r2,-4(fp)
 80049b0:	10800117 	ldw	r2,4(r2)
 80049b4:	10800017 	ldw	r2,0(r2)
	my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
	INT32 * rgb_ycc_tab;
	INT32 i;

	/* Allocate and fill in the conversion tables. */
	cconvert->rgb_ycc_tab = rgb_ycc_tab = (INT32 *)
 80049b8:	e13fff17 	ldw	r4,-4(fp)
 80049bc:	01400044 	movi	r5,1
 80049c0:	01880004 	movi	r6,8192
 80049c4:	103ee83a 	callr	r2
 80049c8:	e0bffe15 	stw	r2,-8(fp)
 80049cc:	e0bffd17 	ldw	r2,-12(fp)
 80049d0:	e0fffe17 	ldw	r3,-8(fp)
 80049d4:	10c00215 	stw	r3,8(r2)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
		(TABLE_SIZE * SIZEOF(INT32)));

	for (i = 0; i <= MAXJSAMPLE; i++) {
 80049d8:	e03ffc15 	stw	zero,-16(fp)
 80049dc:	00005606 	br	8004b38 <rgb_ycc_start+0x1b0>
		rgb_ycc_tab[i+R_Y_OFF] = FIX(0.29900) * i;
 80049e0:	e0bffc17 	ldw	r2,-16(fp)
 80049e4:	1085883a 	add	r2,r2,r2
 80049e8:	1085883a 	add	r2,r2,r2
 80049ec:	e0fffe17 	ldw	r3,-8(fp)
 80049f0:	18a1883a 	add	r16,r3,r2
 80049f4:	e13ffc17 	ldw	r4,-16(fp)
 80049f8:	015322c4 	movi	r5,19595
 80049fc:	802c2180 	call	802c218 <__mulsi3>
 8004a00:	80800015 	stw	r2,0(r16)
		rgb_ycc_tab[i+G_Y_OFF] = FIX(0.58700) * i;
 8004a04:	e0bffc17 	ldw	r2,-16(fp)
 8004a08:	10804004 	addi	r2,r2,256
 8004a0c:	1085883a 	add	r2,r2,r2
 8004a10:	1085883a 	add	r2,r2,r2
 8004a14:	e0fffe17 	ldw	r3,-8(fp)
 8004a18:	18a1883a 	add	r16,r3,r2
 8004a1c:	e13ffc17 	ldw	r4,-16(fp)
 8004a20:	01659194 	movui	r5,38470
 8004a24:	802c2180 	call	802c218 <__mulsi3>
 8004a28:	80800015 	stw	r2,0(r16)
		rgb_ycc_tab[i+B_Y_OFF] = FIX(0.11400) * i     + ONE_HALF;
 8004a2c:	e0bffc17 	ldw	r2,-16(fp)
 8004a30:	10808004 	addi	r2,r2,512
 8004a34:	1085883a 	add	r2,r2,r2
 8004a38:	1085883a 	add	r2,r2,r2
 8004a3c:	e0fffe17 	ldw	r3,-8(fp)
 8004a40:	18a1883a 	add	r16,r3,r2
 8004a44:	e13ffc17 	ldw	r4,-16(fp)
 8004a48:	01474bc4 	movi	r5,7471
 8004a4c:	802c2180 	call	802c218 <__mulsi3>
 8004a50:	1007883a 	mov	r3,r2
 8004a54:	00a00014 	movui	r2,32768
 8004a58:	1885883a 	add	r2,r3,r2
 8004a5c:	80800015 	stw	r2,0(r16)
		rgb_ycc_tab[i+R_CB_OFF] = (-FIX(0.16874)) * i;
 8004a60:	e0bffc17 	ldw	r2,-16(fp)
 8004a64:	1080c004 	addi	r2,r2,768
 8004a68:	1085883a 	add	r2,r2,r2
 8004a6c:	1085883a 	add	r2,r2,r2
 8004a70:	e0fffe17 	ldw	r3,-8(fp)
 8004a74:	18a1883a 	add	r16,r3,r2
 8004a78:	e13ffc17 	ldw	r4,-16(fp)
 8004a7c:	01753344 	movi	r5,-11059
 8004a80:	802c2180 	call	802c218 <__mulsi3>
 8004a84:	80800015 	stw	r2,0(r16)
		rgb_ycc_tab[i+G_CB_OFF] = (-FIX(0.33126)) * i;
 8004a88:	e0bffc17 	ldw	r2,-16(fp)
 8004a8c:	10810004 	addi	r2,r2,1024
 8004a90:	1085883a 	add	r2,r2,r2
 8004a94:	1085883a 	add	r2,r2,r2
 8004a98:	e0fffe17 	ldw	r3,-8(fp)
 8004a9c:	18a1883a 	add	r16,r3,r2
 8004aa0:	e13ffc17 	ldw	r4,-16(fp)
 8004aa4:	016accc4 	movi	r5,-21709
 8004aa8:	802c2180 	call	802c218 <__mulsi3>
 8004aac:	80800015 	stw	r2,0(r16)
		/* We use a rounding fudge-factor of 0.5-epsilon for Cb and Cr.
		* This ensures that the maximum output will round to MAXJSAMPLE
		* not MAXJSAMPLE+1, and thus that we don't have to range-limit.
		*/
		rgb_ycc_tab[i+B_CB_OFF] = FIX(0.50000) * i    + CBCR_OFFSET + ONE_HALF-1;
 8004ab0:	e0bffc17 	ldw	r2,-16(fp)
 8004ab4:	10814004 	addi	r2,r2,1280
 8004ab8:	1085883a 	add	r2,r2,r2
 8004abc:	1085883a 	add	r2,r2,r2
 8004ac0:	e0fffe17 	ldw	r3,-8(fp)
 8004ac4:	1885883a 	add	r2,r3,r2
 8004ac8:	e0fffc17 	ldw	r3,-16(fp)
 8004acc:	18c04044 	addi	r3,r3,257
 8004ad0:	180693fa 	slli	r3,r3,15
 8004ad4:	18ffffc4 	addi	r3,r3,-1
 8004ad8:	10c00015 	stw	r3,0(r2)
		/*  B=>Cb and R=>Cr tables are the same
		rgb_ycc_tab[i+R_CR_OFF] = FIX(0.50000) * i    + CBCR_OFFSET + ONE_HALF-1;
		*/
		rgb_ycc_tab[i+G_CR_OFF] = (-FIX(0.41869)) * i;
 8004adc:	e0bffc17 	ldw	r2,-16(fp)
 8004ae0:	10818004 	addi	r2,r2,1536
 8004ae4:	1085883a 	add	r2,r2,r2
 8004ae8:	1085883a 	add	r2,r2,r2
 8004aec:	e0fffe17 	ldw	r3,-8(fp)
 8004af0:	18a1883a 	add	r16,r3,r2
 8004af4:	e13ffc17 	ldw	r4,-16(fp)
 8004af8:	01653444 	movi	r5,-27439
 8004afc:	802c2180 	call	802c218 <__mulsi3>
 8004b00:	80800015 	stw	r2,0(r16)
		rgb_ycc_tab[i+B_CR_OFF] = (-FIX(0.08131)) * i;
 8004b04:	e0bffc17 	ldw	r2,-16(fp)
 8004b08:	1081c004 	addi	r2,r2,1792
 8004b0c:	1085883a 	add	r2,r2,r2
 8004b10:	1085883a 	add	r2,r2,r2
 8004b14:	e0fffe17 	ldw	r3,-8(fp)
 8004b18:	18a1883a 	add	r16,r3,r2
 8004b1c:	e13ffc17 	ldw	r4,-16(fp)
 8004b20:	017acbc4 	movi	r5,-5329
 8004b24:	802c2180 	call	802c218 <__mulsi3>
 8004b28:	80800015 	stw	r2,0(r16)
	/* Allocate and fill in the conversion tables. */
	cconvert->rgb_ycc_tab = rgb_ycc_tab = (INT32 *)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
		(TABLE_SIZE * SIZEOF(INT32)));

	for (i = 0; i <= MAXJSAMPLE; i++) {
 8004b2c:	e0bffc17 	ldw	r2,-16(fp)
 8004b30:	10800044 	addi	r2,r2,1
 8004b34:	e0bffc15 	stw	r2,-16(fp)
 8004b38:	e0bffc17 	ldw	r2,-16(fp)
 8004b3c:	10804010 	cmplti	r2,r2,256
 8004b40:	103fa71e 	bne	r2,zero,80049e0 <rgb_ycc_start+0x58>
		rgb_ycc_tab[i+R_CR_OFF] = FIX(0.50000) * i    + CBCR_OFFSET + ONE_HALF-1;
		*/
		rgb_ycc_tab[i+G_CR_OFF] = (-FIX(0.41869)) * i;
		rgb_ycc_tab[i+B_CR_OFF] = (-FIX(0.08131)) * i;
	}
}
 8004b44:	e037883a 	mov	sp,fp
 8004b48:	dfc00217 	ldw	ra,8(sp)
 8004b4c:	df000117 	ldw	fp,4(sp)
 8004b50:	dc000017 	ldw	r16,0(sp)
 8004b54:	dec00304 	addi	sp,sp,12
 8004b58:	f800283a 	ret

08004b5c <rgb_ycc_convert>:

METHODDEF(void)
	rgb_ycc_convert (j_compress_ptr cinfo,
	JSAMPARRAY input_buf, JSAMPIMAGE output_buf,
	JDIMENSION output_row, int num_rows)
{
 8004b5c:	defff004 	addi	sp,sp,-64
 8004b60:	df000f15 	stw	fp,60(sp)
 8004b64:	ddc00e15 	stw	r23,56(sp)
 8004b68:	dd800d15 	stw	r22,52(sp)
 8004b6c:	dd400c15 	stw	r21,48(sp)
 8004b70:	dd000b15 	stw	r20,44(sp)
 8004b74:	dcc00a15 	stw	r19,40(sp)
 8004b78:	dc800915 	stw	r18,36(sp)
 8004b7c:	dc400815 	stw	r17,32(sp)
 8004b80:	dc000715 	stw	r16,28(sp)
 8004b84:	df000704 	addi	fp,sp,28
 8004b88:	e13ffb15 	stw	r4,-20(fp)
 8004b8c:	e17ffc15 	stw	r5,-16(fp)
 8004b90:	e1bffd15 	stw	r6,-12(fp)
 8004b94:	e1fffe15 	stw	r7,-8(fp)
	my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 8004b98:	e0bffb17 	ldw	r2,-20(fp)
 8004b9c:	10806117 	ldw	r2,388(r2)
 8004ba0:	e0bff915 	stw	r2,-28(fp)
	register int r, g, b;
	register INT32 * ctab = cconvert->rgb_ycc_tab;
 8004ba4:	e0bff917 	ldw	r2,-28(fp)
 8004ba8:	14000217 	ldw	r16,8(r2)
	register JSAMPROW inptr;
	register JSAMPROW outptr0, outptr1, outptr2;
	register JDIMENSION col;
	JDIMENSION num_cols = cinfo->image_width;
 8004bac:	e0bffb17 	ldw	r2,-20(fp)
 8004bb0:	10800717 	ldw	r2,28(r2)
 8004bb4:	e0bffa15 	stw	r2,-24(fp)

	while (--num_rows >= 0) {
 8004bb8:	00007306 	br	8004d88 <rgb_ycc_convert+0x22c>
		inptr = *input_buf++;
 8004bbc:	e0bffc17 	ldw	r2,-16(fp)
 8004bc0:	14800017 	ldw	r18,0(r2)
 8004bc4:	e0bffc17 	ldw	r2,-16(fp)
 8004bc8:	10800104 	addi	r2,r2,4
 8004bcc:	e0bffc15 	stw	r2,-16(fp)
		outptr0 = output_buf[0][output_row];
 8004bd0:	e0bffd17 	ldw	r2,-12(fp)
 8004bd4:	10c00017 	ldw	r3,0(r2)
 8004bd8:	e0bffe17 	ldw	r2,-8(fp)
 8004bdc:	1085883a 	add	r2,r2,r2
 8004be0:	1085883a 	add	r2,r2,r2
 8004be4:	1885883a 	add	r2,r3,r2
 8004be8:	15800017 	ldw	r22,0(r2)
		outptr1 = output_buf[1][output_row];
 8004bec:	e0bffd17 	ldw	r2,-12(fp)
 8004bf0:	10800104 	addi	r2,r2,4
 8004bf4:	10c00017 	ldw	r3,0(r2)
 8004bf8:	e0bffe17 	ldw	r2,-8(fp)
 8004bfc:	1085883a 	add	r2,r2,r2
 8004c00:	1085883a 	add	r2,r2,r2
 8004c04:	1885883a 	add	r2,r3,r2
 8004c08:	15c00017 	ldw	r23,0(r2)
		outptr2 = output_buf[2][output_row];
 8004c0c:	e0bffd17 	ldw	r2,-12(fp)
 8004c10:	10800204 	addi	r2,r2,8
 8004c14:	10c00017 	ldw	r3,0(r2)
 8004c18:	e0bffe17 	ldw	r2,-8(fp)
 8004c1c:	1085883a 	add	r2,r2,r2
 8004c20:	1085883a 	add	r2,r2,r2
 8004c24:	1885883a 	add	r2,r3,r2
 8004c28:	10800017 	ldw	r2,0(r2)
 8004c2c:	e0bfff15 	stw	r2,-4(fp)
		output_row++;
 8004c30:	e0bffe17 	ldw	r2,-8(fp)
 8004c34:	10800044 	addi	r2,r2,1
 8004c38:	e0bffe15 	stw	r2,-8(fp)
		for (col = 0; col < num_cols; col++) {
 8004c3c:	0023883a 	mov	r17,zero
 8004c40:	00004f06 	br	8004d80 <rgb_ycc_convert+0x224>
			r = GETJSAMPLE(inptr[RGB_RED]);
 8004c44:	90800003 	ldbu	r2,0(r18)
 8004c48:	15403fcc 	andi	r21,r2,255
			g = GETJSAMPLE(inptr[RGB_GREEN]);
 8004c4c:	90800044 	addi	r2,r18,1
 8004c50:	10800003 	ldbu	r2,0(r2)
 8004c54:	15003fcc 	andi	r20,r2,255
			b = GETJSAMPLE(inptr[RGB_BLUE]);
 8004c58:	90800084 	addi	r2,r18,2
 8004c5c:	10800003 	ldbu	r2,0(r2)
 8004c60:	14c03fcc 	andi	r19,r2,255
			inptr += RGB_PIXELSIZE;
 8004c64:	948000c4 	addi	r18,r18,3
			* must be too; we do not need an explicit range-limiting operation.
			* Hence the value being shifted is never negative, and we don't
			* need the general RIGHT_SHIFT macro.
			*/
			/* Y */
			outptr0[col] = (JSAMPLE)
 8004c68:	b447883a 	add	r3,r22,r17
				((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
 8004c6c:	a805883a 	mov	r2,r21
 8004c70:	1085883a 	add	r2,r2,r2
 8004c74:	1085883a 	add	r2,r2,r2
 8004c78:	8085883a 	add	r2,r16,r2
 8004c7c:	11000017 	ldw	r4,0(r2)
 8004c80:	a005883a 	mov	r2,r20
 8004c84:	10804004 	addi	r2,r2,256
 8004c88:	1085883a 	add	r2,r2,r2
 8004c8c:	1085883a 	add	r2,r2,r2
 8004c90:	8085883a 	add	r2,r16,r2
 8004c94:	10800017 	ldw	r2,0(r2)
 8004c98:	2089883a 	add	r4,r4,r2
 8004c9c:	9805883a 	mov	r2,r19
 8004ca0:	10808004 	addi	r2,r2,512
 8004ca4:	1085883a 	add	r2,r2,r2
 8004ca8:	1085883a 	add	r2,r2,r2
 8004cac:	8085883a 	add	r2,r16,r2
 8004cb0:	10800017 	ldw	r2,0(r2)
 8004cb4:	2085883a 	add	r2,r4,r2
				>> SCALEBITS);
 8004cb8:	1005d43a 	srai	r2,r2,16
			* must be too; we do not need an explicit range-limiting operation.
			* Hence the value being shifted is never negative, and we don't
			* need the general RIGHT_SHIFT macro.
			*/
			/* Y */
			outptr0[col] = (JSAMPLE)
 8004cbc:	18800005 	stb	r2,0(r3)
				((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
				>> SCALEBITS);
			/* Cb */
			outptr1[col] = (JSAMPLE)
 8004cc0:	bc47883a 	add	r3,r23,r17
				((ctab[r+R_CB_OFF] + ctab[g+G_CB_OFF] + ctab[b+B_CB_OFF])
 8004cc4:	a805883a 	mov	r2,r21
 8004cc8:	1080c004 	addi	r2,r2,768
 8004ccc:	1085883a 	add	r2,r2,r2
 8004cd0:	1085883a 	add	r2,r2,r2
 8004cd4:	8085883a 	add	r2,r16,r2
 8004cd8:	11000017 	ldw	r4,0(r2)
 8004cdc:	a005883a 	mov	r2,r20
 8004ce0:	10810004 	addi	r2,r2,1024
 8004ce4:	1085883a 	add	r2,r2,r2
 8004ce8:	1085883a 	add	r2,r2,r2
 8004cec:	8085883a 	add	r2,r16,r2
 8004cf0:	10800017 	ldw	r2,0(r2)
 8004cf4:	2089883a 	add	r4,r4,r2
 8004cf8:	9805883a 	mov	r2,r19
 8004cfc:	10814004 	addi	r2,r2,1280
 8004d00:	1085883a 	add	r2,r2,r2
 8004d04:	1085883a 	add	r2,r2,r2
 8004d08:	8085883a 	add	r2,r16,r2
 8004d0c:	10800017 	ldw	r2,0(r2)
 8004d10:	2085883a 	add	r2,r4,r2
				>> SCALEBITS);
 8004d14:	1005d43a 	srai	r2,r2,16
			/* Y */
			outptr0[col] = (JSAMPLE)
				((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
				>> SCALEBITS);
			/* Cb */
			outptr1[col] = (JSAMPLE)
 8004d18:	18800005 	stb	r2,0(r3)
				((ctab[r+R_CB_OFF] + ctab[g+G_CB_OFF] + ctab[b+B_CB_OFF])
				>> SCALEBITS);
			/* Cr */
			outptr2[col] = (JSAMPLE)
 8004d1c:	e0bfff17 	ldw	r2,-4(fp)
 8004d20:	1447883a 	add	r3,r2,r17
				((ctab[r+R_CR_OFF] + ctab[g+G_CR_OFF] + ctab[b+B_CR_OFF])
 8004d24:	a805883a 	mov	r2,r21
 8004d28:	10814004 	addi	r2,r2,1280
 8004d2c:	1085883a 	add	r2,r2,r2
 8004d30:	1085883a 	add	r2,r2,r2
 8004d34:	8085883a 	add	r2,r16,r2
 8004d38:	11000017 	ldw	r4,0(r2)
 8004d3c:	a005883a 	mov	r2,r20
 8004d40:	10818004 	addi	r2,r2,1536
 8004d44:	1085883a 	add	r2,r2,r2
 8004d48:	1085883a 	add	r2,r2,r2
 8004d4c:	8085883a 	add	r2,r16,r2
 8004d50:	10800017 	ldw	r2,0(r2)
 8004d54:	2089883a 	add	r4,r4,r2
 8004d58:	9805883a 	mov	r2,r19
 8004d5c:	1081c004 	addi	r2,r2,1792
 8004d60:	1085883a 	add	r2,r2,r2
 8004d64:	1085883a 	add	r2,r2,r2
 8004d68:	8085883a 	add	r2,r16,r2
 8004d6c:	10800017 	ldw	r2,0(r2)
 8004d70:	2085883a 	add	r2,r4,r2
				>> SCALEBITS);
 8004d74:	1005d43a 	srai	r2,r2,16
			/* Cb */
			outptr1[col] = (JSAMPLE)
				((ctab[r+R_CB_OFF] + ctab[g+G_CB_OFF] + ctab[b+B_CB_OFF])
				>> SCALEBITS);
			/* Cr */
			outptr2[col] = (JSAMPLE)
 8004d78:	18800005 	stb	r2,0(r3)
		inptr = *input_buf++;
		outptr0 = output_buf[0][output_row];
		outptr1 = output_buf[1][output_row];
		outptr2 = output_buf[2][output_row];
		output_row++;
		for (col = 0; col < num_cols; col++) {
 8004d7c:	8c400044 	addi	r17,r17,1
 8004d80:	e0bffa17 	ldw	r2,-24(fp)
 8004d84:	88bfaf36 	bltu	r17,r2,8004c44 <rgb_ycc_convert+0xe8>
	register JSAMPROW inptr;
	register JSAMPROW outptr0, outptr1, outptr2;
	register JDIMENSION col;
	JDIMENSION num_cols = cinfo->image_width;

	while (--num_rows >= 0) {
 8004d88:	e0800917 	ldw	r2,36(fp)
 8004d8c:	10bfffc4 	addi	r2,r2,-1
 8004d90:	e0800915 	stw	r2,36(fp)
 8004d94:	e0800917 	ldw	r2,36(fp)
 8004d98:	103f880e 	bge	r2,zero,8004bbc <rgb_ycc_convert+0x60>
			outptr2[col] = (JSAMPLE)
				((ctab[r+R_CR_OFF] + ctab[g+G_CR_OFF] + ctab[b+B_CR_OFF])
				>> SCALEBITS);
		}
	}
}
 8004d9c:	e037883a 	mov	sp,fp
 8004da0:	df000817 	ldw	fp,32(sp)
 8004da4:	ddc00717 	ldw	r23,28(sp)
 8004da8:	dd800617 	ldw	r22,24(sp)
 8004dac:	dd400517 	ldw	r21,20(sp)
 8004db0:	dd000417 	ldw	r20,16(sp)
 8004db4:	dcc00317 	ldw	r19,12(sp)
 8004db8:	dc800217 	ldw	r18,8(sp)
 8004dbc:	dc400117 	ldw	r17,4(sp)
 8004dc0:	dc000017 	ldw	r16,0(sp)
 8004dc4:	dec00904 	addi	sp,sp,36
 8004dc8:	f800283a 	ret

08004dcc <rgb_gray_convert>:

METHODDEF(void)
	rgb_gray_convert (j_compress_ptr cinfo,
	JSAMPARRAY input_buf, JSAMPIMAGE output_buf,
	JDIMENSION output_row, int num_rows)
{
 8004dcc:	defff204 	addi	sp,sp,-56
 8004dd0:	df000d15 	stw	fp,52(sp)
 8004dd4:	dd800c15 	stw	r22,48(sp)
 8004dd8:	dd400b15 	stw	r21,44(sp)
 8004ddc:	dd000a15 	stw	r20,40(sp)
 8004de0:	dcc00915 	stw	r19,36(sp)
 8004de4:	dc800815 	stw	r18,32(sp)
 8004de8:	dc400715 	stw	r17,28(sp)
 8004dec:	dc000615 	stw	r16,24(sp)
 8004df0:	df000604 	addi	fp,sp,24
 8004df4:	e13ffc15 	stw	r4,-16(fp)
 8004df8:	e17ffd15 	stw	r5,-12(fp)
 8004dfc:	e1bffe15 	stw	r6,-8(fp)
 8004e00:	e1ffff15 	stw	r7,-4(fp)
	my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 8004e04:	e0bffc17 	ldw	r2,-16(fp)
 8004e08:	10806117 	ldw	r2,388(r2)
 8004e0c:	e0bffa15 	stw	r2,-24(fp)
	register int r, g, b;
	register INT32 * ctab = cconvert->rgb_ycc_tab;
 8004e10:	e0bffa17 	ldw	r2,-24(fp)
 8004e14:	14800217 	ldw	r18,8(r2)
	register JSAMPROW inptr;
	register JSAMPROW outptr;
	register JDIMENSION col;
	JDIMENSION num_cols = cinfo->image_width;
 8004e18:	e0bffc17 	ldw	r2,-16(fp)
 8004e1c:	10800717 	ldw	r2,28(r2)
 8004e20:	e0bffb15 	stw	r2,-20(fp)

	while (--num_rows >= 0) {
 8004e24:	00003306 	br	8004ef4 <rgb_gray_convert+0x128>
		inptr = *input_buf++;
 8004e28:	e0bffd17 	ldw	r2,-12(fp)
 8004e2c:	14000017 	ldw	r16,0(r2)
 8004e30:	e0bffd17 	ldw	r2,-12(fp)
 8004e34:	10800104 	addi	r2,r2,4
 8004e38:	e0bffd15 	stw	r2,-12(fp)
		outptr = output_buf[0][output_row];
 8004e3c:	e0bffe17 	ldw	r2,-8(fp)
 8004e40:	10c00017 	ldw	r3,0(r2)
 8004e44:	e0bfff17 	ldw	r2,-4(fp)
 8004e48:	1085883a 	add	r2,r2,r2
 8004e4c:	1085883a 	add	r2,r2,r2
 8004e50:	1885883a 	add	r2,r3,r2
 8004e54:	14c00017 	ldw	r19,0(r2)
		output_row++;
 8004e58:	e0bfff17 	ldw	r2,-4(fp)
 8004e5c:	10800044 	addi	r2,r2,1
 8004e60:	e0bfff15 	stw	r2,-4(fp)
		for (col = 0; col < num_cols; col++) {
 8004e64:	0023883a 	mov	r17,zero
 8004e68:	00002006 	br	8004eec <rgb_gray_convert+0x120>
			r = GETJSAMPLE(inptr[RGB_RED]);
 8004e6c:	80800003 	ldbu	r2,0(r16)
 8004e70:	15803fcc 	andi	r22,r2,255
			g = GETJSAMPLE(inptr[RGB_GREEN]);
 8004e74:	80800044 	addi	r2,r16,1
 8004e78:	10800003 	ldbu	r2,0(r2)
 8004e7c:	15403fcc 	andi	r21,r2,255
			b = GETJSAMPLE(inptr[RGB_BLUE]);
 8004e80:	80800084 	addi	r2,r16,2
 8004e84:	10800003 	ldbu	r2,0(r2)
 8004e88:	15003fcc 	andi	r20,r2,255
			inptr += RGB_PIXELSIZE;
 8004e8c:	840000c4 	addi	r16,r16,3
			/* Y */
			outptr[col] = (JSAMPLE)
 8004e90:	9c47883a 	add	r3,r19,r17
				((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
 8004e94:	b005883a 	mov	r2,r22
 8004e98:	1085883a 	add	r2,r2,r2
 8004e9c:	1085883a 	add	r2,r2,r2
 8004ea0:	9085883a 	add	r2,r18,r2
 8004ea4:	11000017 	ldw	r4,0(r2)
 8004ea8:	a805883a 	mov	r2,r21
 8004eac:	10804004 	addi	r2,r2,256
 8004eb0:	1085883a 	add	r2,r2,r2
 8004eb4:	1085883a 	add	r2,r2,r2
 8004eb8:	9085883a 	add	r2,r18,r2
 8004ebc:	10800017 	ldw	r2,0(r2)
 8004ec0:	2089883a 	add	r4,r4,r2
 8004ec4:	a005883a 	mov	r2,r20
 8004ec8:	10808004 	addi	r2,r2,512
 8004ecc:	1085883a 	add	r2,r2,r2
 8004ed0:	1085883a 	add	r2,r2,r2
 8004ed4:	9085883a 	add	r2,r18,r2
 8004ed8:	10800017 	ldw	r2,0(r2)
 8004edc:	2085883a 	add	r2,r4,r2
				>> SCALEBITS);
 8004ee0:	1005d43a 	srai	r2,r2,16
			r = GETJSAMPLE(inptr[RGB_RED]);
			g = GETJSAMPLE(inptr[RGB_GREEN]);
			b = GETJSAMPLE(inptr[RGB_BLUE]);
			inptr += RGB_PIXELSIZE;
			/* Y */
			outptr[col] = (JSAMPLE)
 8004ee4:	18800005 	stb	r2,0(r3)

	while (--num_rows >= 0) {
		inptr = *input_buf++;
		outptr = output_buf[0][output_row];
		output_row++;
		for (col = 0; col < num_cols; col++) {
 8004ee8:	8c400044 	addi	r17,r17,1
 8004eec:	e0bffb17 	ldw	r2,-20(fp)
 8004ef0:	88bfde36 	bltu	r17,r2,8004e6c <rgb_gray_convert+0xa0>
	register JSAMPROW inptr;
	register JSAMPROW outptr;
	register JDIMENSION col;
	JDIMENSION num_cols = cinfo->image_width;

	while (--num_rows >= 0) {
 8004ef4:	e0800817 	ldw	r2,32(fp)
 8004ef8:	10bfffc4 	addi	r2,r2,-1
 8004efc:	e0800815 	stw	r2,32(fp)
 8004f00:	e0800817 	ldw	r2,32(fp)
 8004f04:	103fc80e 	bge	r2,zero,8004e28 <rgb_gray_convert+0x5c>
			outptr[col] = (JSAMPLE)
				((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
				>> SCALEBITS);
		}
	}
}
 8004f08:	e037883a 	mov	sp,fp
 8004f0c:	df000717 	ldw	fp,28(sp)
 8004f10:	dd800617 	ldw	r22,24(sp)
 8004f14:	dd400517 	ldw	r21,20(sp)
 8004f18:	dd000417 	ldw	r20,16(sp)
 8004f1c:	dcc00317 	ldw	r19,12(sp)
 8004f20:	dc800217 	ldw	r18,8(sp)
 8004f24:	dc400117 	ldw	r17,4(sp)
 8004f28:	dc000017 	ldw	r16,0(sp)
 8004f2c:	dec00804 	addi	sp,sp,32
 8004f30:	f800283a 	ret

08004f34 <cmyk_ycck_convert>:

METHODDEF(void)
	cmyk_ycck_convert (j_compress_ptr cinfo,
	JSAMPARRAY input_buf, JSAMPIMAGE output_buf,
	JDIMENSION output_row, int num_rows)
{
 8004f34:	deffef04 	addi	sp,sp,-68
 8004f38:	df001015 	stw	fp,64(sp)
 8004f3c:	ddc00f15 	stw	r23,60(sp)
 8004f40:	dd800e15 	stw	r22,56(sp)
 8004f44:	dd400d15 	stw	r21,52(sp)
 8004f48:	dd000c15 	stw	r20,48(sp)
 8004f4c:	dcc00b15 	stw	r19,44(sp)
 8004f50:	dc800a15 	stw	r18,40(sp)
 8004f54:	dc400915 	stw	r17,36(sp)
 8004f58:	dc000815 	stw	r16,32(sp)
 8004f5c:	df000804 	addi	fp,sp,32
 8004f60:	e13ffa15 	stw	r4,-24(fp)
 8004f64:	e17ffb15 	stw	r5,-20(fp)
 8004f68:	e1bffc15 	stw	r6,-16(fp)
 8004f6c:	e1fffd15 	stw	r7,-12(fp)
	my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 8004f70:	e0bffa17 	ldw	r2,-24(fp)
 8004f74:	10806117 	ldw	r2,388(r2)
 8004f78:	e0bff815 	stw	r2,-32(fp)
	register int r, g, b;
	register INT32 * ctab = cconvert->rgb_ycc_tab;
 8004f7c:	e0bff817 	ldw	r2,-32(fp)
 8004f80:	14000217 	ldw	r16,8(r2)
	register JSAMPROW inptr;
	register JSAMPROW outptr0, outptr1, outptr2, outptr3;
	register JDIMENSION col;
	JDIMENSION num_cols = cinfo->image_width;
 8004f84:	e0bffa17 	ldw	r2,-24(fp)
 8004f88:	10800717 	ldw	r2,28(r2)
 8004f8c:	e0bff915 	stw	r2,-28(fp)

	while (--num_rows >= 0) {
 8004f90:	00008606 	br	80051ac <cmyk_ycck_convert+0x278>
		inptr = *input_buf++;
 8004f94:	e0bffb17 	ldw	r2,-20(fp)
 8004f98:	14800017 	ldw	r18,0(r2)
 8004f9c:	e0bffb17 	ldw	r2,-20(fp)
 8004fa0:	10800104 	addi	r2,r2,4
 8004fa4:	e0bffb15 	stw	r2,-20(fp)
		outptr0 = output_buf[0][output_row];
 8004fa8:	e0bffc17 	ldw	r2,-16(fp)
 8004fac:	10c00017 	ldw	r3,0(r2)
 8004fb0:	e0bffd17 	ldw	r2,-12(fp)
 8004fb4:	1085883a 	add	r2,r2,r2
 8004fb8:	1085883a 	add	r2,r2,r2
 8004fbc:	1885883a 	add	r2,r3,r2
 8004fc0:	15800017 	ldw	r22,0(r2)
		outptr1 = output_buf[1][output_row];
 8004fc4:	e0bffc17 	ldw	r2,-16(fp)
 8004fc8:	10800104 	addi	r2,r2,4
 8004fcc:	10c00017 	ldw	r3,0(r2)
 8004fd0:	e0bffd17 	ldw	r2,-12(fp)
 8004fd4:	1085883a 	add	r2,r2,r2
 8004fd8:	1085883a 	add	r2,r2,r2
 8004fdc:	1885883a 	add	r2,r3,r2
 8004fe0:	15c00017 	ldw	r23,0(r2)
		outptr2 = output_buf[2][output_row];
 8004fe4:	e0bffc17 	ldw	r2,-16(fp)
 8004fe8:	10800204 	addi	r2,r2,8
 8004fec:	10c00017 	ldw	r3,0(r2)
 8004ff0:	e0bffd17 	ldw	r2,-12(fp)
 8004ff4:	1085883a 	add	r2,r2,r2
 8004ff8:	1085883a 	add	r2,r2,r2
 8004ffc:	1885883a 	add	r2,r3,r2
 8005000:	10800017 	ldw	r2,0(r2)
 8005004:	e0bffe15 	stw	r2,-8(fp)
		outptr3 = output_buf[3][output_row];
 8005008:	e0bffc17 	ldw	r2,-16(fp)
 800500c:	10800304 	addi	r2,r2,12
 8005010:	10c00017 	ldw	r3,0(r2)
 8005014:	e0bffd17 	ldw	r2,-12(fp)
 8005018:	1085883a 	add	r2,r2,r2
 800501c:	1085883a 	add	r2,r2,r2
 8005020:	1885883a 	add	r2,r3,r2
 8005024:	10800017 	ldw	r2,0(r2)
 8005028:	e0bfff15 	stw	r2,-4(fp)
		output_row++;
 800502c:	e0bffd17 	ldw	r2,-12(fp)
 8005030:	10800044 	addi	r2,r2,1
 8005034:	e0bffd15 	stw	r2,-12(fp)
		for (col = 0; col < num_cols; col++) {
 8005038:	0023883a 	mov	r17,zero
 800503c:	00005906 	br	80051a4 <cmyk_ycck_convert+0x270>
			r = MAXJSAMPLE - GETJSAMPLE(inptr[0]);
 8005040:	90800003 	ldbu	r2,0(r18)
 8005044:	10803fcc 	andi	r2,r2,255
 8005048:	00c03fc4 	movi	r3,255
 800504c:	18abc83a 	sub	r21,r3,r2
			g = MAXJSAMPLE - GETJSAMPLE(inptr[1]);
 8005050:	90800044 	addi	r2,r18,1
 8005054:	10800003 	ldbu	r2,0(r2)
 8005058:	10803fcc 	andi	r2,r2,255
 800505c:	00c03fc4 	movi	r3,255
 8005060:	18a9c83a 	sub	r20,r3,r2
			b = MAXJSAMPLE - GETJSAMPLE(inptr[2]);
 8005064:	90800084 	addi	r2,r18,2
 8005068:	10800003 	ldbu	r2,0(r2)
 800506c:	10803fcc 	andi	r2,r2,255
 8005070:	00c03fc4 	movi	r3,255
 8005074:	18a7c83a 	sub	r19,r3,r2
			/* K passes through as-is */
			outptr3[col] = inptr[3];	/* don't need GETJSAMPLE here */
 8005078:	e0ffff17 	ldw	r3,-4(fp)
 800507c:	1c45883a 	add	r2,r3,r17
 8005080:	90c000c3 	ldbu	r3,3(r18)
 8005084:	10c00005 	stb	r3,0(r2)
			inptr += 4;
 8005088:	94800104 	addi	r18,r18,4
			* must be too; we do not need an explicit range-limiting operation.
			* Hence the value being shifted is never negative, and we don't
			* need the general RIGHT_SHIFT macro.
			*/
			/* Y */
			outptr0[col] = (JSAMPLE)
 800508c:	b447883a 	add	r3,r22,r17
				((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
 8005090:	a805883a 	mov	r2,r21
 8005094:	1085883a 	add	r2,r2,r2
 8005098:	1085883a 	add	r2,r2,r2
 800509c:	8085883a 	add	r2,r16,r2
 80050a0:	11000017 	ldw	r4,0(r2)
 80050a4:	a005883a 	mov	r2,r20
 80050a8:	10804004 	addi	r2,r2,256
 80050ac:	1085883a 	add	r2,r2,r2
 80050b0:	1085883a 	add	r2,r2,r2
 80050b4:	8085883a 	add	r2,r16,r2
 80050b8:	10800017 	ldw	r2,0(r2)
 80050bc:	2089883a 	add	r4,r4,r2
 80050c0:	9805883a 	mov	r2,r19
 80050c4:	10808004 	addi	r2,r2,512
 80050c8:	1085883a 	add	r2,r2,r2
 80050cc:	1085883a 	add	r2,r2,r2
 80050d0:	8085883a 	add	r2,r16,r2
 80050d4:	10800017 	ldw	r2,0(r2)
 80050d8:	2085883a 	add	r2,r4,r2
				>> SCALEBITS);
 80050dc:	1005d43a 	srai	r2,r2,16
			* must be too; we do not need an explicit range-limiting operation.
			* Hence the value being shifted is never negative, and we don't
			* need the general RIGHT_SHIFT macro.
			*/
			/* Y */
			outptr0[col] = (JSAMPLE)
 80050e0:	18800005 	stb	r2,0(r3)
				((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
				>> SCALEBITS);
			/* Cb */
			outptr1[col] = (JSAMPLE)
 80050e4:	bc47883a 	add	r3,r23,r17
				((ctab[r+R_CB_OFF] + ctab[g+G_CB_OFF] + ctab[b+B_CB_OFF])
 80050e8:	a805883a 	mov	r2,r21
 80050ec:	1080c004 	addi	r2,r2,768
 80050f0:	1085883a 	add	r2,r2,r2
 80050f4:	1085883a 	add	r2,r2,r2
 80050f8:	8085883a 	add	r2,r16,r2
 80050fc:	11000017 	ldw	r4,0(r2)
 8005100:	a005883a 	mov	r2,r20
 8005104:	10810004 	addi	r2,r2,1024
 8005108:	1085883a 	add	r2,r2,r2
 800510c:	1085883a 	add	r2,r2,r2
 8005110:	8085883a 	add	r2,r16,r2
 8005114:	10800017 	ldw	r2,0(r2)
 8005118:	2089883a 	add	r4,r4,r2
 800511c:	9805883a 	mov	r2,r19
 8005120:	10814004 	addi	r2,r2,1280
 8005124:	1085883a 	add	r2,r2,r2
 8005128:	1085883a 	add	r2,r2,r2
 800512c:	8085883a 	add	r2,r16,r2
 8005130:	10800017 	ldw	r2,0(r2)
 8005134:	2085883a 	add	r2,r4,r2
				>> SCALEBITS);
 8005138:	1005d43a 	srai	r2,r2,16
			/* Y */
			outptr0[col] = (JSAMPLE)
				((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
				>> SCALEBITS);
			/* Cb */
			outptr1[col] = (JSAMPLE)
 800513c:	18800005 	stb	r2,0(r3)
				((ctab[r+R_CB_OFF] + ctab[g+G_CB_OFF] + ctab[b+B_CB_OFF])
				>> SCALEBITS);
			/* Cr */
			outptr2[col] = (JSAMPLE)
 8005140:	e0bffe17 	ldw	r2,-8(fp)
 8005144:	1447883a 	add	r3,r2,r17
				((ctab[r+R_CR_OFF] + ctab[g+G_CR_OFF] + ctab[b+B_CR_OFF])
 8005148:	a805883a 	mov	r2,r21
 800514c:	10814004 	addi	r2,r2,1280
 8005150:	1085883a 	add	r2,r2,r2
 8005154:	1085883a 	add	r2,r2,r2
 8005158:	8085883a 	add	r2,r16,r2
 800515c:	11000017 	ldw	r4,0(r2)
 8005160:	a005883a 	mov	r2,r20
 8005164:	10818004 	addi	r2,r2,1536
 8005168:	1085883a 	add	r2,r2,r2
 800516c:	1085883a 	add	r2,r2,r2
 8005170:	8085883a 	add	r2,r16,r2
 8005174:	10800017 	ldw	r2,0(r2)
 8005178:	2089883a 	add	r4,r4,r2
 800517c:	9805883a 	mov	r2,r19
 8005180:	1081c004 	addi	r2,r2,1792
 8005184:	1085883a 	add	r2,r2,r2
 8005188:	1085883a 	add	r2,r2,r2
 800518c:	8085883a 	add	r2,r16,r2
 8005190:	10800017 	ldw	r2,0(r2)
 8005194:	2085883a 	add	r2,r4,r2
				>> SCALEBITS);
 8005198:	1005d43a 	srai	r2,r2,16
			/* Cb */
			outptr1[col] = (JSAMPLE)
				((ctab[r+R_CB_OFF] + ctab[g+G_CB_OFF] + ctab[b+B_CB_OFF])
				>> SCALEBITS);
			/* Cr */
			outptr2[col] = (JSAMPLE)
 800519c:	18800005 	stb	r2,0(r3)
		outptr0 = output_buf[0][output_row];
		outptr1 = output_buf[1][output_row];
		outptr2 = output_buf[2][output_row];
		outptr3 = output_buf[3][output_row];
		output_row++;
		for (col = 0; col < num_cols; col++) {
 80051a0:	8c400044 	addi	r17,r17,1
 80051a4:	e0bff917 	ldw	r2,-28(fp)
 80051a8:	88bfa536 	bltu	r17,r2,8005040 <cmyk_ycck_convert+0x10c>
	register JSAMPROW inptr;
	register JSAMPROW outptr0, outptr1, outptr2, outptr3;
	register JDIMENSION col;
	JDIMENSION num_cols = cinfo->image_width;

	while (--num_rows >= 0) {
 80051ac:	e0800917 	ldw	r2,36(fp)
 80051b0:	10bfffc4 	addi	r2,r2,-1
 80051b4:	e0800915 	stw	r2,36(fp)
 80051b8:	e0800917 	ldw	r2,36(fp)
 80051bc:	103f750e 	bge	r2,zero,8004f94 <cmyk_ycck_convert+0x60>
			outptr2[col] = (JSAMPLE)
				((ctab[r+R_CR_OFF] + ctab[g+G_CR_OFF] + ctab[b+B_CR_OFF])
				>> SCALEBITS);
		}
	}
}
 80051c0:	e037883a 	mov	sp,fp
 80051c4:	df000817 	ldw	fp,32(sp)
 80051c8:	ddc00717 	ldw	r23,28(sp)
 80051cc:	dd800617 	ldw	r22,24(sp)
 80051d0:	dd400517 	ldw	r21,20(sp)
 80051d4:	dd000417 	ldw	r20,16(sp)
 80051d8:	dcc00317 	ldw	r19,12(sp)
 80051dc:	dc800217 	ldw	r18,8(sp)
 80051e0:	dc400117 	ldw	r17,4(sp)
 80051e4:	dc000017 	ldw	r16,0(sp)
 80051e8:	dec00904 	addi	sp,sp,36
 80051ec:	f800283a 	ret

080051f0 <grayscale_convert>:

METHODDEF(void)
	grayscale_convert (j_compress_ptr cinfo,
	JSAMPARRAY input_buf, JSAMPIMAGE output_buf,
	JDIMENSION output_row, int num_rows)
{
 80051f0:	defff604 	addi	sp,sp,-40
 80051f4:	df000915 	stw	fp,36(sp)
 80051f8:	dc800815 	stw	r18,32(sp)
 80051fc:	dc400715 	stw	r17,28(sp)
 8005200:	dc000615 	stw	r16,24(sp)
 8005204:	df000604 	addi	fp,sp,24
 8005208:	e13ffc15 	stw	r4,-16(fp)
 800520c:	e17ffd15 	stw	r5,-12(fp)
 8005210:	e1bffe15 	stw	r6,-8(fp)
 8005214:	e1ffff15 	stw	r7,-4(fp)
	register JSAMPROW inptr;
	register JSAMPROW outptr;
	register JDIMENSION col;
	JDIMENSION num_cols = cinfo->image_width;
 8005218:	e0bffc17 	ldw	r2,-16(fp)
 800521c:	10800717 	ldw	r2,28(r2)
 8005220:	e0bffa15 	stw	r2,-24(fp)
	int instride = cinfo->input_components;
 8005224:	e0bffc17 	ldw	r2,-16(fp)
 8005228:	10800917 	ldw	r2,36(r2)
 800522c:	e0bffb15 	stw	r2,-20(fp)

	while (--num_rows >= 0) {
 8005230:	00001906 	br	8005298 <grayscale_convert+0xa8>
		inptr = *input_buf++;
 8005234:	e0bffd17 	ldw	r2,-12(fp)
 8005238:	14400017 	ldw	r17,0(r2)
 800523c:	e0bffd17 	ldw	r2,-12(fp)
 8005240:	10800104 	addi	r2,r2,4
 8005244:	e0bffd15 	stw	r2,-12(fp)
		outptr = output_buf[0][output_row];
 8005248:	e0bffe17 	ldw	r2,-8(fp)
 800524c:	10c00017 	ldw	r3,0(r2)
 8005250:	e0bfff17 	ldw	r2,-4(fp)
 8005254:	1085883a 	add	r2,r2,r2
 8005258:	1085883a 	add	r2,r2,r2
 800525c:	1885883a 	add	r2,r3,r2
 8005260:	14800017 	ldw	r18,0(r2)
		output_row++;
 8005264:	e0bfff17 	ldw	r2,-4(fp)
 8005268:	10800044 	addi	r2,r2,1
 800526c:	e0bfff15 	stw	r2,-4(fp)
		for (col = 0; col < num_cols; col++) {
 8005270:	0021883a 	mov	r16,zero
 8005274:	00000606 	br	8005290 <grayscale_convert+0xa0>
			outptr[col] = inptr[0];	/* don't need GETJSAMPLE() here */
 8005278:	9405883a 	add	r2,r18,r16
 800527c:	88c00003 	ldbu	r3,0(r17)
 8005280:	10c00005 	stb	r3,0(r2)
			inptr += instride;
 8005284:	e0bffb17 	ldw	r2,-20(fp)
 8005288:	88a3883a 	add	r17,r17,r2

	while (--num_rows >= 0) {
		inptr = *input_buf++;
		outptr = output_buf[0][output_row];
		output_row++;
		for (col = 0; col < num_cols; col++) {
 800528c:	84000044 	addi	r16,r16,1
 8005290:	e0bffa17 	ldw	r2,-24(fp)
 8005294:	80bff836 	bltu	r16,r2,8005278 <grayscale_convert+0x88>
	register JSAMPROW outptr;
	register JDIMENSION col;
	JDIMENSION num_cols = cinfo->image_width;
	int instride = cinfo->input_components;

	while (--num_rows >= 0) {
 8005298:	e0800417 	ldw	r2,16(fp)
 800529c:	10bfffc4 	addi	r2,r2,-1
 80052a0:	e0800415 	stw	r2,16(fp)
 80052a4:	e0800417 	ldw	r2,16(fp)
 80052a8:	103fe20e 	bge	r2,zero,8005234 <grayscale_convert+0x44>
		for (col = 0; col < num_cols; col++) {
			outptr[col] = inptr[0];	/* don't need GETJSAMPLE() here */
			inptr += instride;
		}
	}
}
 80052ac:	e037883a 	mov	sp,fp
 80052b0:	df000317 	ldw	fp,12(sp)
 80052b4:	dc800217 	ldw	r18,8(sp)
 80052b8:	dc400117 	ldw	r17,4(sp)
 80052bc:	dc000017 	ldw	r16,0(sp)
 80052c0:	dec00404 	addi	sp,sp,16
 80052c4:	f800283a 	ret

080052c8 <null_convert>:

METHODDEF(void)
	null_convert (j_compress_ptr cinfo,
	JSAMPARRAY input_buf, JSAMPIMAGE output_buf,
	JDIMENSION output_row, int num_rows)
{
 80052c8:	defff504 	addi	sp,sp,-44
 80052cc:	df000a15 	stw	fp,40(sp)
 80052d0:	dcc00915 	stw	r19,36(sp)
 80052d4:	dc800815 	stw	r18,32(sp)
 80052d8:	dc400715 	stw	r17,28(sp)
 80052dc:	dc000615 	stw	r16,24(sp)
 80052e0:	df000604 	addi	fp,sp,24
 80052e4:	e13ffc15 	stw	r4,-16(fp)
 80052e8:	e17ffd15 	stw	r5,-12(fp)
 80052ec:	e1bffe15 	stw	r6,-8(fp)
 80052f0:	e1ffff15 	stw	r7,-4(fp)
	register JSAMPROW inptr;
	register JSAMPROW outptr;
	register JDIMENSION col;
	register int ci;
	int nc = cinfo->num_components;
 80052f4:	e0bffc17 	ldw	r2,-16(fp)
 80052f8:	10801217 	ldw	r2,72(r2)
 80052fc:	e0bffa15 	stw	r2,-24(fp)
	JDIMENSION num_cols = cinfo->image_width;
 8005300:	e0bffc17 	ldw	r2,-16(fp)
 8005304:	10800717 	ldw	r2,28(r2)
 8005308:	e0bffb15 	stw	r2,-20(fp)

	while (--num_rows >= 0) {
 800530c:	00002406 	br	80053a0 <null_convert+0xd8>
		/* It seems fastest to make a separate pass for each component. */
		for (ci = 0; ci < nc; ci++) {
 8005310:	0021883a 	mov	r16,zero
 8005314:	00001a06 	br	8005380 <null_convert+0xb8>
			inptr = *input_buf;
 8005318:	e0bffd17 	ldw	r2,-12(fp)
 800531c:	14800017 	ldw	r18,0(r2)
			outptr = output_buf[ci][output_row];
 8005320:	8005883a 	mov	r2,r16
 8005324:	1085883a 	add	r2,r2,r2
 8005328:	1085883a 	add	r2,r2,r2
 800532c:	e0fffe17 	ldw	r3,-8(fp)
 8005330:	1885883a 	add	r2,r3,r2
 8005334:	10c00017 	ldw	r3,0(r2)
 8005338:	e0bfff17 	ldw	r2,-4(fp)
 800533c:	1085883a 	add	r2,r2,r2
 8005340:	1085883a 	add	r2,r2,r2
 8005344:	1885883a 	add	r2,r3,r2
 8005348:	14c00017 	ldw	r19,0(r2)
			for (col = 0; col < num_cols; col++) {
 800534c:	0023883a 	mov	r17,zero
 8005350:	00000806 	br	8005374 <null_convert+0xac>
				outptr[col] = inptr[ci]; /* don't need GETJSAMPLE() here */
 8005354:	9c45883a 	add	r2,r19,r17
 8005358:	8007883a 	mov	r3,r16
 800535c:	90c7883a 	add	r3,r18,r3
 8005360:	18c00003 	ldbu	r3,0(r3)
 8005364:	10c00005 	stb	r3,0(r2)
				inptr += nc;
 8005368:	e0bffa17 	ldw	r2,-24(fp)
 800536c:	90a5883a 	add	r18,r18,r2
	while (--num_rows >= 0) {
		/* It seems fastest to make a separate pass for each component. */
		for (ci = 0; ci < nc; ci++) {
			inptr = *input_buf;
			outptr = output_buf[ci][output_row];
			for (col = 0; col < num_cols; col++) {
 8005370:	8c400044 	addi	r17,r17,1
 8005374:	e0bffb17 	ldw	r2,-20(fp)
 8005378:	88bff636 	bltu	r17,r2,8005354 <null_convert+0x8c>
	int nc = cinfo->num_components;
	JDIMENSION num_cols = cinfo->image_width;

	while (--num_rows >= 0) {
		/* It seems fastest to make a separate pass for each component. */
		for (ci = 0; ci < nc; ci++) {
 800537c:	84000044 	addi	r16,r16,1
 8005380:	e0bffa17 	ldw	r2,-24(fp)
 8005384:	80bfe416 	blt	r16,r2,8005318 <null_convert+0x50>
			for (col = 0; col < num_cols; col++) {
				outptr[col] = inptr[ci]; /* don't need GETJSAMPLE() here */
				inptr += nc;
			}
		}
		input_buf++;
 8005388:	e0bffd17 	ldw	r2,-12(fp)
 800538c:	10800104 	addi	r2,r2,4
 8005390:	e0bffd15 	stw	r2,-12(fp)
		output_row++;
 8005394:	e0bfff17 	ldw	r2,-4(fp)
 8005398:	10800044 	addi	r2,r2,1
 800539c:	e0bfff15 	stw	r2,-4(fp)
	register JDIMENSION col;
	register int ci;
	int nc = cinfo->num_components;
	JDIMENSION num_cols = cinfo->image_width;

	while (--num_rows >= 0) {
 80053a0:	e0800517 	ldw	r2,20(fp)
 80053a4:	10bfffc4 	addi	r2,r2,-1
 80053a8:	e0800515 	stw	r2,20(fp)
 80053ac:	e0800517 	ldw	r2,20(fp)
 80053b0:	103fd70e 	bge	r2,zero,8005310 <null_convert+0x48>
			}
		}
		input_buf++;
		output_row++;
	}
}
 80053b4:	e037883a 	mov	sp,fp
 80053b8:	df000417 	ldw	fp,16(sp)
 80053bc:	dcc00317 	ldw	r19,12(sp)
 80053c0:	dc800217 	ldw	r18,8(sp)
 80053c4:	dc400117 	ldw	r17,4(sp)
 80053c8:	dc000017 	ldw	r16,0(sp)
 80053cc:	dec00504 	addi	sp,sp,20
 80053d0:	f800283a 	ret

080053d4 <null_method>:
* Empty method for start_pass.
*/

METHODDEF(void)
	null_method (j_compress_ptr cinfo)
{
 80053d4:	defffe04 	addi	sp,sp,-8
 80053d8:	df000115 	stw	fp,4(sp)
 80053dc:	df000104 	addi	fp,sp,4
 80053e0:	e13fff15 	stw	r4,-4(fp)
	/* no work needed */
}
 80053e4:	e037883a 	mov	sp,fp
 80053e8:	df000017 	ldw	fp,0(sp)
 80053ec:	dec00104 	addi	sp,sp,4
 80053f0:	f800283a 	ret

080053f4 <jinit_color_converter>:
* Module initialization routine for input colorspace conversion.
*/

GLOBAL(void)
	jinit_color_converter (j_compress_ptr cinfo)
{
 80053f4:	defffc04 	addi	sp,sp,-16
 80053f8:	dfc00315 	stw	ra,12(sp)
 80053fc:	df000215 	stw	fp,8(sp)
 8005400:	df000204 	addi	fp,sp,8
 8005404:	e13fff15 	stw	r4,-4(fp)
	my_cconvert_ptr cconvert;

	cconvert = (my_cconvert_ptr)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8005408:	e0bfff17 	ldw	r2,-4(fp)
 800540c:	10800117 	ldw	r2,4(r2)
 8005410:	10800017 	ldw	r2,0(r2)
GLOBAL(void)
	jinit_color_converter (j_compress_ptr cinfo)
{
	my_cconvert_ptr cconvert;

	cconvert = (my_cconvert_ptr)
 8005414:	e13fff17 	ldw	r4,-4(fp)
 8005418:	01400044 	movi	r5,1
 800541c:	01800304 	movi	r6,12
 8005420:	103ee83a 	callr	r2
 8005424:	e0bffe15 	stw	r2,-8(fp)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
		SIZEOF(my_color_converter));
	cinfo->cconvert = (struct jpeg_color_converter *) cconvert;
 8005428:	e0bfff17 	ldw	r2,-4(fp)
 800542c:	e0fffe17 	ldw	r3,-8(fp)
 8005430:	10c06115 	stw	r3,388(r2)
	/* set start_pass to null method until we find out differently */
	cconvert->pub.start_pass = null_method;
 8005434:	e0bffe17 	ldw	r2,-8(fp)
 8005438:	00c20034 	movhi	r3,2048
 800543c:	18d4f504 	addi	r3,r3,21460
 8005440:	10c00015 	stw	r3,0(r2)

	/* Make sure input_components agrees with in_color_space */
	switch (cinfo->in_color_space) {
 8005444:	e0bfff17 	ldw	r2,-4(fp)
 8005448:	10800a17 	ldw	r2,40(r2)
 800544c:	10c001a8 	cmpgeui	r3,r2,6
 8005450:	1800371e 	bne	r3,zero,8005530 <jinit_color_converter+0x13c>
 8005454:	1085883a 	add	r2,r2,r2
 8005458:	1087883a 	add	r3,r2,r2
 800545c:	00820034 	movhi	r2,2048
 8005460:	10951c04 	addi	r2,r2,21616
 8005464:	1885883a 	add	r2,r3,r2
 8005468:	10800017 	ldw	r2,0(r2)
 800546c:	1000683a 	jmp	r2
 8005470:	08005530 	cmpltui	zero,at,340
 8005474:	08005488 	cmpgei	zero,at,338
 8005478:	080054c0 	call	80054c <__alt_mem_sdram-0x77ffab4>
 800547c:	080054c0 	call	80054c <__alt_mem_sdram-0x77ffab4>
 8005480:	080054f8 	rdprs	zero,at,339
 8005484:	080054f8 	rdprs	zero,at,339
	case JCS_GRAYSCALE:
		if (cinfo->input_components != 1)
 8005488:	e0bfff17 	ldw	r2,-4(fp)
 800548c:	10800917 	ldw	r2,36(r2)
 8005490:	10800060 	cmpeqi	r2,r2,1
 8005494:	1000331e 	bne	r2,zero,8005564 <jinit_color_converter+0x170>
			ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
 8005498:	e0bfff17 	ldw	r2,-4(fp)
 800549c:	10800017 	ldw	r2,0(r2)
 80054a0:	00c00284 	movi	r3,10
 80054a4:	10c00515 	stw	r3,20(r2)
 80054a8:	e0bfff17 	ldw	r2,-4(fp)
 80054ac:	10800017 	ldw	r2,0(r2)
 80054b0:	10800017 	ldw	r2,0(r2)
 80054b4:	e13fff17 	ldw	r4,-4(fp)
 80054b8:	103ee83a 	callr	r2
		break;
 80054bc:	00002906 	br	8005564 <jinit_color_converter+0x170>
			ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
		break;
#endif /* else share code with YCbCr */

	case JCS_YCbCr:
		if (cinfo->input_components != 3)
 80054c0:	e0bfff17 	ldw	r2,-4(fp)
 80054c4:	10800917 	ldw	r2,36(r2)
 80054c8:	108000e0 	cmpeqi	r2,r2,3
 80054cc:	1000271e 	bne	r2,zero,800556c <jinit_color_converter+0x178>
			ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
 80054d0:	e0bfff17 	ldw	r2,-4(fp)
 80054d4:	10800017 	ldw	r2,0(r2)
 80054d8:	00c00284 	movi	r3,10
 80054dc:	10c00515 	stw	r3,20(r2)
 80054e0:	e0bfff17 	ldw	r2,-4(fp)
 80054e4:	10800017 	ldw	r2,0(r2)
 80054e8:	10800017 	ldw	r2,0(r2)
 80054ec:	e13fff17 	ldw	r4,-4(fp)
 80054f0:	103ee83a 	callr	r2
		break;
 80054f4:	00001d06 	br	800556c <jinit_color_converter+0x178>

	case JCS_CMYK:
	case JCS_YCCK:
		if (cinfo->input_components != 4)
 80054f8:	e0bfff17 	ldw	r2,-4(fp)
 80054fc:	10800917 	ldw	r2,36(r2)
 8005500:	10800120 	cmpeqi	r2,r2,4
 8005504:	10001b1e 	bne	r2,zero,8005574 <jinit_color_converter+0x180>
			ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
 8005508:	e0bfff17 	ldw	r2,-4(fp)
 800550c:	10800017 	ldw	r2,0(r2)
 8005510:	00c00284 	movi	r3,10
 8005514:	10c00515 	stw	r3,20(r2)
 8005518:	e0bfff17 	ldw	r2,-4(fp)
 800551c:	10800017 	ldw	r2,0(r2)
 8005520:	10800017 	ldw	r2,0(r2)
 8005524:	e13fff17 	ldw	r4,-4(fp)
 8005528:	103ee83a 	callr	r2
		break;
 800552c:	00001106 	br	8005574 <jinit_color_converter+0x180>

	default:			/* JCS_UNKNOWN can be anything */
		if (cinfo->input_components < 1)
 8005530:	e0bfff17 	ldw	r2,-4(fp)
 8005534:	10800917 	ldw	r2,36(r2)
 8005538:	00801016 	blt	zero,r2,800557c <jinit_color_converter+0x188>
			ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
 800553c:	e0bfff17 	ldw	r2,-4(fp)
 8005540:	10800017 	ldw	r2,0(r2)
 8005544:	00c00284 	movi	r3,10
 8005548:	10c00515 	stw	r3,20(r2)
 800554c:	e0bfff17 	ldw	r2,-4(fp)
 8005550:	10800017 	ldw	r2,0(r2)
 8005554:	10800017 	ldw	r2,0(r2)
 8005558:	e13fff17 	ldw	r4,-4(fp)
 800555c:	103ee83a 	callr	r2
		break;
 8005560:	00000606 	br	800557c <jinit_color_converter+0x188>
	/* Make sure input_components agrees with in_color_space */
	switch (cinfo->in_color_space) {
	case JCS_GRAYSCALE:
		if (cinfo->input_components != 1)
			ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
		break;
 8005564:	0001883a 	nop
 8005568:	00000506 	br	8005580 <jinit_color_converter+0x18c>
#endif /* else share code with YCbCr */

	case JCS_YCbCr:
		if (cinfo->input_components != 3)
			ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
		break;
 800556c:	0001883a 	nop
 8005570:	00000306 	br	8005580 <jinit_color_converter+0x18c>

	case JCS_CMYK:
	case JCS_YCCK:
		if (cinfo->input_components != 4)
			ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
		break;
 8005574:	0001883a 	nop
 8005578:	00000106 	br	8005580 <jinit_color_converter+0x18c>

	default:			/* JCS_UNKNOWN can be anything */
		if (cinfo->input_components < 1)
			ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
		break;
 800557c:	0001883a 	nop
	}

	/* Check num_components, set conversion method based on requested space */
	switch (cinfo->jpeg_color_space) {
 8005580:	e0bfff17 	ldw	r2,-4(fp)
 8005584:	10801317 	ldw	r2,76(r2)
 8005588:	10c001a8 	cmpgeui	r3,r2,6
 800558c:	1800dd1e 	bne	r3,zero,8005904 <jinit_color_converter+0x510>
 8005590:	1085883a 	add	r2,r2,r2
 8005594:	1087883a 	add	r3,r2,r2
 8005598:	00820034 	movhi	r2,2048
 800559c:	10956b04 	addi	r2,r2,21932
 80055a0:	1885883a 	add	r2,r3,r2
 80055a4:	10800017 	ldw	r2,0(r2)
 80055a8:	1000683a 	jmp	r2
 80055ac:	08005904 	addi	zero,at,356
 80055b0:	080055c4 	addi	zero,at,343
 80055b4:	0800569c 	xori	zero,at,346
 80055b8:	0800571c 	xori	zero,at,348
 80055bc:	080057d0 	cmplti	zero,at,351
 80055c0:	08005850 	cmplti	zero,at,353
	case JCS_GRAYSCALE:
		if (cinfo->num_components != 1)
 80055c4:	e0bfff17 	ldw	r2,-4(fp)
 80055c8:	10801217 	ldw	r2,72(r2)
 80055cc:	10800060 	cmpeqi	r2,r2,1
 80055d0:	1000091e 	bne	r2,zero,80055f8 <jinit_color_converter+0x204>
			ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
 80055d4:	e0bfff17 	ldw	r2,-4(fp)
 80055d8:	10800017 	ldw	r2,0(r2)
 80055dc:	00c002c4 	movi	r3,11
 80055e0:	10c00515 	stw	r3,20(r2)
 80055e4:	e0bfff17 	ldw	r2,-4(fp)
 80055e8:	10800017 	ldw	r2,0(r2)
 80055ec:	10800017 	ldw	r2,0(r2)
 80055f0:	e13fff17 	ldw	r4,-4(fp)
 80055f4:	103ee83a 	callr	r2
		if (cinfo->in_color_space == JCS_GRAYSCALE)
 80055f8:	e0bfff17 	ldw	r2,-4(fp)
 80055fc:	10800a17 	ldw	r2,40(r2)
 8005600:	10800058 	cmpnei	r2,r2,1
 8005604:	1000051e 	bne	r2,zero,800561c <jinit_color_converter+0x228>
			cconvert->pub.color_convert = grayscale_convert;
 8005608:	e0bffe17 	ldw	r2,-8(fp)
 800560c:	00c20034 	movhi	r3,2048
 8005610:	18d47c04 	addi	r3,r3,20976
 8005614:	10c00115 	stw	r3,4(r2)
			cconvert->pub.color_convert = rgb_gray_convert;
		} else if (cinfo->in_color_space == JCS_YCbCr)
			cconvert->pub.color_convert = grayscale_convert;
		else
			ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
		break;
 8005618:	0000d206 	br	8005964 <jinit_color_converter+0x570>
	case JCS_GRAYSCALE:
		if (cinfo->num_components != 1)
			ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
		if (cinfo->in_color_space == JCS_GRAYSCALE)
			cconvert->pub.color_convert = grayscale_convert;
		else if (cinfo->in_color_space == JCS_RGB) {
 800561c:	e0bfff17 	ldw	r2,-4(fp)
 8005620:	10800a17 	ldw	r2,40(r2)
 8005624:	10800098 	cmpnei	r2,r2,2
 8005628:	1000091e 	bne	r2,zero,8005650 <jinit_color_converter+0x25c>
			cconvert->pub.start_pass = rgb_ycc_start;
 800562c:	e0bffe17 	ldw	r2,-8(fp)
 8005630:	00c20034 	movhi	r3,2048
 8005634:	18d26204 	addi	r3,r3,18824
 8005638:	10c00015 	stw	r3,0(r2)
			cconvert->pub.color_convert = rgb_gray_convert;
 800563c:	e0bffe17 	ldw	r2,-8(fp)
 8005640:	00c20034 	movhi	r3,2048
 8005644:	18d37304 	addi	r3,r3,19916
 8005648:	10c00115 	stw	r3,4(r2)
		} else if (cinfo->in_color_space == JCS_YCbCr)
			cconvert->pub.color_convert = grayscale_convert;
		else
			ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
		break;
 800564c:	0000c506 	br	8005964 <jinit_color_converter+0x570>
		if (cinfo->in_color_space == JCS_GRAYSCALE)
			cconvert->pub.color_convert = grayscale_convert;
		else if (cinfo->in_color_space == JCS_RGB) {
			cconvert->pub.start_pass = rgb_ycc_start;
			cconvert->pub.color_convert = rgb_gray_convert;
		} else if (cinfo->in_color_space == JCS_YCbCr)
 8005650:	e0bfff17 	ldw	r2,-4(fp)
 8005654:	10800a17 	ldw	r2,40(r2)
 8005658:	108000d8 	cmpnei	r2,r2,3
 800565c:	1000051e 	bne	r2,zero,8005674 <jinit_color_converter+0x280>
			cconvert->pub.color_convert = grayscale_convert;
 8005660:	e0bffe17 	ldw	r2,-8(fp)
 8005664:	00c20034 	movhi	r3,2048
 8005668:	18d47c04 	addi	r3,r3,20976
 800566c:	10c00115 	stw	r3,4(r2)
		else
			ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
		break;
 8005670:	0000bc06 	br	8005964 <jinit_color_converter+0x570>
			cconvert->pub.start_pass = rgb_ycc_start;
			cconvert->pub.color_convert = rgb_gray_convert;
		} else if (cinfo->in_color_space == JCS_YCbCr)
			cconvert->pub.color_convert = grayscale_convert;
		else
			ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
 8005674:	e0bfff17 	ldw	r2,-4(fp)
 8005678:	10800017 	ldw	r2,0(r2)
 800567c:	00c00704 	movi	r3,28
 8005680:	10c00515 	stw	r3,20(r2)
 8005684:	e0bfff17 	ldw	r2,-4(fp)
 8005688:	10800017 	ldw	r2,0(r2)
 800568c:	10800017 	ldw	r2,0(r2)
 8005690:	e13fff17 	ldw	r4,-4(fp)
 8005694:	103ee83a 	callr	r2
		break;
 8005698:	0000b206 	br	8005964 <jinit_color_converter+0x570>

	case JCS_RGB:
		if (cinfo->num_components != 3)
 800569c:	e0bfff17 	ldw	r2,-4(fp)
 80056a0:	10801217 	ldw	r2,72(r2)
 80056a4:	108000e0 	cmpeqi	r2,r2,3
 80056a8:	1000091e 	bne	r2,zero,80056d0 <jinit_color_converter+0x2dc>
			ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
 80056ac:	e0bfff17 	ldw	r2,-4(fp)
 80056b0:	10800017 	ldw	r2,0(r2)
 80056b4:	00c002c4 	movi	r3,11
 80056b8:	10c00515 	stw	r3,20(r2)
 80056bc:	e0bfff17 	ldw	r2,-4(fp)
 80056c0:	10800017 	ldw	r2,0(r2)
 80056c4:	10800017 	ldw	r2,0(r2)
 80056c8:	e13fff17 	ldw	r4,-4(fp)
 80056cc:	103ee83a 	callr	r2
		if (cinfo->in_color_space == JCS_RGB && RGB_PIXELSIZE == 3)
 80056d0:	e0bfff17 	ldw	r2,-4(fp)
 80056d4:	10800a17 	ldw	r2,40(r2)
 80056d8:	10800098 	cmpnei	r2,r2,2
 80056dc:	1000051e 	bne	r2,zero,80056f4 <jinit_color_converter+0x300>
			cconvert->pub.color_convert = null_convert;
 80056e0:	e0bffe17 	ldw	r2,-8(fp)
 80056e4:	00c20034 	movhi	r3,2048
 80056e8:	18d4b204 	addi	r3,r3,21192
 80056ec:	10c00115 	stw	r3,4(r2)
		else
			ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
		break;
 80056f0:	00009c06 	br	8005964 <jinit_color_converter+0x570>
		if (cinfo->num_components != 3)
			ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
		if (cinfo->in_color_space == JCS_RGB && RGB_PIXELSIZE == 3)
			cconvert->pub.color_convert = null_convert;
		else
			ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
 80056f4:	e0bfff17 	ldw	r2,-4(fp)
 80056f8:	10800017 	ldw	r2,0(r2)
 80056fc:	00c00704 	movi	r3,28
 8005700:	10c00515 	stw	r3,20(r2)
 8005704:	e0bfff17 	ldw	r2,-4(fp)
 8005708:	10800017 	ldw	r2,0(r2)
 800570c:	10800017 	ldw	r2,0(r2)
 8005710:	e13fff17 	ldw	r4,-4(fp)
 8005714:	103ee83a 	callr	r2
		break;
 8005718:	00009206 	br	8005964 <jinit_color_converter+0x570>

	case JCS_YCbCr:
		if (cinfo->num_components != 3)
 800571c:	e0bfff17 	ldw	r2,-4(fp)
 8005720:	10801217 	ldw	r2,72(r2)
 8005724:	108000e0 	cmpeqi	r2,r2,3
 8005728:	1000091e 	bne	r2,zero,8005750 <jinit_color_converter+0x35c>
			ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
 800572c:	e0bfff17 	ldw	r2,-4(fp)
 8005730:	10800017 	ldw	r2,0(r2)
 8005734:	00c002c4 	movi	r3,11
 8005738:	10c00515 	stw	r3,20(r2)
 800573c:	e0bfff17 	ldw	r2,-4(fp)
 8005740:	10800017 	ldw	r2,0(r2)
 8005744:	10800017 	ldw	r2,0(r2)
 8005748:	e13fff17 	ldw	r4,-4(fp)
 800574c:	103ee83a 	callr	r2
		if (cinfo->in_color_space == JCS_RGB) {
 8005750:	e0bfff17 	ldw	r2,-4(fp)
 8005754:	10800a17 	ldw	r2,40(r2)
 8005758:	10800098 	cmpnei	r2,r2,2
 800575c:	1000091e 	bne	r2,zero,8005784 <jinit_color_converter+0x390>
			cconvert->pub.start_pass = rgb_ycc_start;
 8005760:	e0bffe17 	ldw	r2,-8(fp)
 8005764:	00c20034 	movhi	r3,2048
 8005768:	18d26204 	addi	r3,r3,18824
 800576c:	10c00015 	stw	r3,0(r2)
			cconvert->pub.color_convert = rgb_ycc_convert;
 8005770:	e0bffe17 	ldw	r2,-8(fp)
 8005774:	00c20034 	movhi	r3,2048
 8005778:	18d2d704 	addi	r3,r3,19292
 800577c:	10c00115 	stw	r3,4(r2)
		} else if (cinfo->in_color_space == JCS_YCbCr)
			cconvert->pub.color_convert = null_convert;
		else
			ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
		break;
 8005780:	00007806 	br	8005964 <jinit_color_converter+0x570>
		if (cinfo->num_components != 3)
			ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
		if (cinfo->in_color_space == JCS_RGB) {
			cconvert->pub.start_pass = rgb_ycc_start;
			cconvert->pub.color_convert = rgb_ycc_convert;
		} else if (cinfo->in_color_space == JCS_YCbCr)
 8005784:	e0bfff17 	ldw	r2,-4(fp)
 8005788:	10800a17 	ldw	r2,40(r2)
 800578c:	108000d8 	cmpnei	r2,r2,3
 8005790:	1000051e 	bne	r2,zero,80057a8 <jinit_color_converter+0x3b4>
			cconvert->pub.color_convert = null_convert;
 8005794:	e0bffe17 	ldw	r2,-8(fp)
 8005798:	00c20034 	movhi	r3,2048
 800579c:	18d4b204 	addi	r3,r3,21192
 80057a0:	10c00115 	stw	r3,4(r2)
		else
			ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
		break;
 80057a4:	00006f06 	br	8005964 <jinit_color_converter+0x570>
			cconvert->pub.start_pass = rgb_ycc_start;
			cconvert->pub.color_convert = rgb_ycc_convert;
		} else if (cinfo->in_color_space == JCS_YCbCr)
			cconvert->pub.color_convert = null_convert;
		else
			ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
 80057a8:	e0bfff17 	ldw	r2,-4(fp)
 80057ac:	10800017 	ldw	r2,0(r2)
 80057b0:	00c00704 	movi	r3,28
 80057b4:	10c00515 	stw	r3,20(r2)
 80057b8:	e0bfff17 	ldw	r2,-4(fp)
 80057bc:	10800017 	ldw	r2,0(r2)
 80057c0:	10800017 	ldw	r2,0(r2)
 80057c4:	e13fff17 	ldw	r4,-4(fp)
 80057c8:	103ee83a 	callr	r2
		break;
 80057cc:	00006506 	br	8005964 <jinit_color_converter+0x570>

	case JCS_CMYK:
		if (cinfo->num_components != 4)
 80057d0:	e0bfff17 	ldw	r2,-4(fp)
 80057d4:	10801217 	ldw	r2,72(r2)
 80057d8:	10800120 	cmpeqi	r2,r2,4
 80057dc:	1000091e 	bne	r2,zero,8005804 <jinit_color_converter+0x410>
			ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
 80057e0:	e0bfff17 	ldw	r2,-4(fp)
 80057e4:	10800017 	ldw	r2,0(r2)
 80057e8:	00c002c4 	movi	r3,11
 80057ec:	10c00515 	stw	r3,20(r2)
 80057f0:	e0bfff17 	ldw	r2,-4(fp)
 80057f4:	10800017 	ldw	r2,0(r2)
 80057f8:	10800017 	ldw	r2,0(r2)
 80057fc:	e13fff17 	ldw	r4,-4(fp)
 8005800:	103ee83a 	callr	r2
		if (cinfo->in_color_space == JCS_CMYK)
 8005804:	e0bfff17 	ldw	r2,-4(fp)
 8005808:	10800a17 	ldw	r2,40(r2)
 800580c:	10800118 	cmpnei	r2,r2,4
 8005810:	1000051e 	bne	r2,zero,8005828 <jinit_color_converter+0x434>
			cconvert->pub.color_convert = null_convert;
 8005814:	e0bffe17 	ldw	r2,-8(fp)
 8005818:	00c20034 	movhi	r3,2048
 800581c:	18d4b204 	addi	r3,r3,21192
 8005820:	10c00115 	stw	r3,4(r2)
		else
			ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
		break;
 8005824:	00004f06 	br	8005964 <jinit_color_converter+0x570>
		if (cinfo->num_components != 4)
			ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
		if (cinfo->in_color_space == JCS_CMYK)
			cconvert->pub.color_convert = null_convert;
		else
			ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
 8005828:	e0bfff17 	ldw	r2,-4(fp)
 800582c:	10800017 	ldw	r2,0(r2)
 8005830:	00c00704 	movi	r3,28
 8005834:	10c00515 	stw	r3,20(r2)
 8005838:	e0bfff17 	ldw	r2,-4(fp)
 800583c:	10800017 	ldw	r2,0(r2)
 8005840:	10800017 	ldw	r2,0(r2)
 8005844:	e13fff17 	ldw	r4,-4(fp)
 8005848:	103ee83a 	callr	r2
		break;
 800584c:	00004506 	br	8005964 <jinit_color_converter+0x570>

	case JCS_YCCK:
		if (cinfo->num_components != 4)
 8005850:	e0bfff17 	ldw	r2,-4(fp)
 8005854:	10801217 	ldw	r2,72(r2)
 8005858:	10800120 	cmpeqi	r2,r2,4
 800585c:	1000091e 	bne	r2,zero,8005884 <jinit_color_converter+0x490>
			ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
 8005860:	e0bfff17 	ldw	r2,-4(fp)
 8005864:	10800017 	ldw	r2,0(r2)
 8005868:	00c002c4 	movi	r3,11
 800586c:	10c00515 	stw	r3,20(r2)
 8005870:	e0bfff17 	ldw	r2,-4(fp)
 8005874:	10800017 	ldw	r2,0(r2)
 8005878:	10800017 	ldw	r2,0(r2)
 800587c:	e13fff17 	ldw	r4,-4(fp)
 8005880:	103ee83a 	callr	r2
		if (cinfo->in_color_space == JCS_CMYK) {
 8005884:	e0bfff17 	ldw	r2,-4(fp)
 8005888:	10800a17 	ldw	r2,40(r2)
 800588c:	10800118 	cmpnei	r2,r2,4
 8005890:	1000091e 	bne	r2,zero,80058b8 <jinit_color_converter+0x4c4>
			cconvert->pub.start_pass = rgb_ycc_start;
 8005894:	e0bffe17 	ldw	r2,-8(fp)
 8005898:	00c20034 	movhi	r3,2048
 800589c:	18d26204 	addi	r3,r3,18824
 80058a0:	10c00015 	stw	r3,0(r2)
			cconvert->pub.color_convert = cmyk_ycck_convert;
 80058a4:	e0bffe17 	ldw	r2,-8(fp)
 80058a8:	00c20034 	movhi	r3,2048
 80058ac:	18d3cd04 	addi	r3,r3,20276
 80058b0:	10c00115 	stw	r3,4(r2)
		} else if (cinfo->in_color_space == JCS_YCCK)
			cconvert->pub.color_convert = null_convert;
		else
			ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
		break;
 80058b4:	00002b06 	br	8005964 <jinit_color_converter+0x570>
		if (cinfo->num_components != 4)
			ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
		if (cinfo->in_color_space == JCS_CMYK) {
			cconvert->pub.start_pass = rgb_ycc_start;
			cconvert->pub.color_convert = cmyk_ycck_convert;
		} else if (cinfo->in_color_space == JCS_YCCK)
 80058b8:	e0bfff17 	ldw	r2,-4(fp)
 80058bc:	10800a17 	ldw	r2,40(r2)
 80058c0:	10800158 	cmpnei	r2,r2,5
 80058c4:	1000051e 	bne	r2,zero,80058dc <jinit_color_converter+0x4e8>
			cconvert->pub.color_convert = null_convert;
 80058c8:	e0bffe17 	ldw	r2,-8(fp)
 80058cc:	00c20034 	movhi	r3,2048
 80058d0:	18d4b204 	addi	r3,r3,21192
 80058d4:	10c00115 	stw	r3,4(r2)
		else
			ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
		break;
 80058d8:	00002206 	br	8005964 <jinit_color_converter+0x570>
			cconvert->pub.start_pass = rgb_ycc_start;
			cconvert->pub.color_convert = cmyk_ycck_convert;
		} else if (cinfo->in_color_space == JCS_YCCK)
			cconvert->pub.color_convert = null_convert;
		else
			ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
 80058dc:	e0bfff17 	ldw	r2,-4(fp)
 80058e0:	10800017 	ldw	r2,0(r2)
 80058e4:	00c00704 	movi	r3,28
 80058e8:	10c00515 	stw	r3,20(r2)
 80058ec:	e0bfff17 	ldw	r2,-4(fp)
 80058f0:	10800017 	ldw	r2,0(r2)
 80058f4:	10800017 	ldw	r2,0(r2)
 80058f8:	e13fff17 	ldw	r4,-4(fp)
 80058fc:	103ee83a 	callr	r2
		break;
 8005900:	00001806 	br	8005964 <jinit_color_converter+0x570>

	default:			/* allow null conversion of JCS_UNKNOWN */
		if (cinfo->jpeg_color_space != cinfo->in_color_space ||
 8005904:	e0bfff17 	ldw	r2,-4(fp)
 8005908:	10c01317 	ldw	r3,76(r2)
 800590c:	e0bfff17 	ldw	r2,-4(fp)
 8005910:	10800a17 	ldw	r2,40(r2)
 8005914:	1880051e 	bne	r3,r2,800592c <jinit_color_converter+0x538>
			cinfo->num_components != cinfo->input_components)
 8005918:	e0bfff17 	ldw	r2,-4(fp)
 800591c:	10c01217 	ldw	r3,72(r2)
 8005920:	e0bfff17 	ldw	r2,-4(fp)
 8005924:	10800917 	ldw	r2,36(r2)
		else
			ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
		break;

	default:			/* allow null conversion of JCS_UNKNOWN */
		if (cinfo->jpeg_color_space != cinfo->in_color_space ||
 8005928:	18800926 	beq	r3,r2,8005950 <jinit_color_converter+0x55c>
			cinfo->num_components != cinfo->input_components)
			ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
 800592c:	e0bfff17 	ldw	r2,-4(fp)
 8005930:	10800017 	ldw	r2,0(r2)
 8005934:	00c00704 	movi	r3,28
 8005938:	10c00515 	stw	r3,20(r2)
 800593c:	e0bfff17 	ldw	r2,-4(fp)
 8005940:	10800017 	ldw	r2,0(r2)
 8005944:	10800017 	ldw	r2,0(r2)
 8005948:	e13fff17 	ldw	r4,-4(fp)
 800594c:	103ee83a 	callr	r2
		cconvert->pub.color_convert = null_convert;
 8005950:	e0bffe17 	ldw	r2,-8(fp)
 8005954:	00c20034 	movhi	r3,2048
 8005958:	18d4b204 	addi	r3,r3,21192
 800595c:	10c00115 	stw	r3,4(r2)
		break;
 8005960:	0001883a 	nop
	}
}
 8005964:	e037883a 	mov	sp,fp
 8005968:	dfc00117 	ldw	ra,4(sp)
 800596c:	df000017 	ldw	fp,0(sp)
 8005970:	dec00204 	addi	sp,sp,8
 8005974:	f800283a 	ret

08005978 <forward_DCT>:
	forward_DCT (j_compress_ptr cinfo, jpeg_component_info * compptr,
	JSAMPARRAY sample_data, JBLOCKROW coef_blocks,
	JDIMENSION start_row, JDIMENSION start_col,
	JDIMENSION num_blocks)
	/* This version is used for integer DCT implementations. */
{
 8005978:	deffb204 	addi	sp,sp,-312
 800597c:	dfc04d15 	stw	ra,308(sp)
 8005980:	df004c15 	stw	fp,304(sp)
 8005984:	dcc04b15 	stw	r19,300(sp)
 8005988:	dc804a15 	stw	r18,296(sp)
 800598c:	dc404915 	stw	r17,292(sp)
 8005990:	dc004815 	stw	r16,288(sp)
 8005994:	df004804 	addi	fp,sp,288
 8005998:	e13ffc15 	stw	r4,-16(fp)
 800599c:	e17ffd15 	stw	r5,-12(fp)
 80059a0:	e1bffe15 	stw	r6,-8(fp)
 80059a4:	e1ffff15 	stw	r7,-4(fp)
	/* This routine is heavily used, so it's worth coding it tightly. */
	my_fdct_ptr fdct = (my_fdct_ptr) cinfo->fdct;
 80059a8:	e0bffc17 	ldw	r2,-16(fp)
 80059ac:	10806317 	ldw	r2,396(r2)
 80059b0:	e0bfb915 	stw	r2,-284(fp)
	forward_DCT_method_ptr do_dct = fdct->do_dct[compptr->component_index];
 80059b4:	e0bffd17 	ldw	r2,-12(fp)
 80059b8:	10800117 	ldw	r2,4(r2)
 80059bc:	e0ffb917 	ldw	r3,-284(fp)
 80059c0:	108002c4 	addi	r2,r2,11
 80059c4:	1085883a 	add	r2,r2,r2
 80059c8:	1085883a 	add	r2,r2,r2
 80059cc:	1885883a 	add	r2,r3,r2
 80059d0:	10800017 	ldw	r2,0(r2)
 80059d4:	e0bfba15 	stw	r2,-280(fp)
	DCTELEM * divisors = fdct->divisors[compptr->quant_tbl_no];
 80059d8:	e0bffd17 	ldw	r2,-12(fp)
 80059dc:	10800417 	ldw	r2,16(r2)
 80059e0:	e0ffb917 	ldw	r3,-284(fp)
 80059e4:	10800544 	addi	r2,r2,21
 80059e8:	1085883a 	add	r2,r2,r2
 80059ec:	1085883a 	add	r2,r2,r2
 80059f0:	1885883a 	add	r2,r3,r2
 80059f4:	10800017 	ldw	r2,0(r2)
 80059f8:	e0bfbb15 	stw	r2,-276(fp)
	DCTELEM workspace[DCTSIZE2];	/* work area for FDCT subroutine */
	JDIMENSION bi;

	sample_data += start_row;	/* fold in the vertical offset once */
 80059fc:	e0800617 	ldw	r2,24(fp)
 8005a00:	1085883a 	add	r2,r2,r2
 8005a04:	1085883a 	add	r2,r2,r2
 8005a08:	e0fffe17 	ldw	r3,-8(fp)
 8005a0c:	1885883a 	add	r2,r3,r2
 8005a10:	e0bffe15 	stw	r2,-8(fp)

	for (bi = 0; bi < num_blocks; bi++, start_col += compptr->DCT_h_scaled_size) {
 8005a14:	e03fb815 	stw	zero,-288(fp)
 8005a18:	00003e06 	br	8005b14 <forward_DCT+0x19c>
		/* Perform the DCT */
		(*do_dct) (workspace, sample_data, start_col);
 8005a1c:	e0bfbc04 	addi	r2,fp,-272
 8005a20:	e0ffba17 	ldw	r3,-280(fp)
 8005a24:	1009883a 	mov	r4,r2
 8005a28:	e17ffe17 	ldw	r5,-8(fp)
 8005a2c:	e1800717 	ldw	r6,28(fp)
 8005a30:	183ee83a 	callr	r3

		/* Quantize/descale the coefficients, and store into coef_blocks[] */
		{ register DCTELEM temp, qval;
		register int i;
		register JCOEFPTR output_ptr = coef_blocks[bi];
 8005a34:	e0bfb817 	ldw	r2,-288(fp)
 8005a38:	100491fa 	slli	r2,r2,7
 8005a3c:	e0ffff17 	ldw	r3,-4(fp)
 8005a40:	18a7883a 	add	r19,r3,r2

		for (i = 0; i < DCTSIZE2; i++) {
 8005a44:	0023883a 	mov	r17,zero
 8005a48:	00002806 	br	8005aec <forward_DCT+0x174>
			qval = divisors[i];
 8005a4c:	8805883a 	mov	r2,r17
 8005a50:	1085883a 	add	r2,r2,r2
 8005a54:	1085883a 	add	r2,r2,r2
 8005a58:	e0ffbb17 	ldw	r3,-276(fp)
 8005a5c:	1885883a 	add	r2,r3,r2
 8005a60:	14800017 	ldw	r18,0(r2)
			temp = workspace[i];
 8005a64:	8c45883a 	add	r2,r17,r17
 8005a68:	1085883a 	add	r2,r2,r2
 8005a6c:	e0ffb804 	addi	r3,fp,-288
 8005a70:	1885883a 	add	r2,r3,r2
 8005a74:	10800404 	addi	r2,r2,16
 8005a78:	14000017 	ldw	r16,0(r2)
#ifdef FAST_DIVIDE
#define DIVIDE_BY(a,b)	a /= b
#else
#define DIVIDE_BY(a,b)	if (a >= b) a /= b; else a = 0
#endif
			if (temp < 0) {
 8005a7c:	80000c0e 	bge	r16,zero,8005ab0 <forward_DCT+0x138>
				temp = -temp;
 8005a80:	0421c83a 	sub	r16,zero,r16
				temp += qval>>1;	/* for rounding */
 8005a84:	9005d07a 	srai	r2,r18,1
 8005a88:	80a1883a 	add	r16,r16,r2
				DIVIDE_BY(temp, qval);
 8005a8c:	84800516 	blt	r16,r18,8005aa4 <forward_DCT+0x12c>
 8005a90:	8009883a 	mov	r4,r16
 8005a94:	900b883a 	mov	r5,r18
 8005a98:	802c15c0 	call	802c15c <__divsi3>
 8005a9c:	1021883a 	mov	r16,r2
 8005aa0:	00000106 	br	8005aa8 <forward_DCT+0x130>
 8005aa4:	0021883a 	mov	r16,zero
				temp = -temp;
 8005aa8:	0421c83a 	sub	r16,zero,r16
 8005aac:	00000906 	br	8005ad4 <forward_DCT+0x15c>
			} else {
				temp += qval>>1;	/* for rounding */
 8005ab0:	9005d07a 	srai	r2,r18,1
 8005ab4:	80a1883a 	add	r16,r16,r2
				DIVIDE_BY(temp, qval);
 8005ab8:	84800516 	blt	r16,r18,8005ad0 <forward_DCT+0x158>
 8005abc:	8009883a 	mov	r4,r16
 8005ac0:	900b883a 	mov	r5,r18
 8005ac4:	802c15c0 	call	802c15c <__divsi3>
 8005ac8:	1021883a 	mov	r16,r2
 8005acc:	00000106 	br	8005ad4 <forward_DCT+0x15c>
 8005ad0:	0021883a 	mov	r16,zero
			}
			output_ptr[i] = (JCOEF) temp;
 8005ad4:	8805883a 	mov	r2,r17
 8005ad8:	1085883a 	add	r2,r2,r2
 8005adc:	9885883a 	add	r2,r19,r2
 8005ae0:	8007883a 	mov	r3,r16
 8005ae4:	10c0000d 	sth	r3,0(r2)
		/* Quantize/descale the coefficients, and store into coef_blocks[] */
		{ register DCTELEM temp, qval;
		register int i;
		register JCOEFPTR output_ptr = coef_blocks[bi];

		for (i = 0; i < DCTSIZE2; i++) {
 8005ae8:	8c400044 	addi	r17,r17,1
 8005aec:	88801010 	cmplti	r2,r17,64
 8005af0:	103fd61e 	bne	r2,zero,8005a4c <forward_DCT+0xd4>
	DCTELEM workspace[DCTSIZE2];	/* work area for FDCT subroutine */
	JDIMENSION bi;

	sample_data += start_row;	/* fold in the vertical offset once */

	for (bi = 0; bi < num_blocks; bi++, start_col += compptr->DCT_h_scaled_size) {
 8005af4:	e0bfb817 	ldw	r2,-288(fp)
 8005af8:	10800044 	addi	r2,r2,1
 8005afc:	e0bfb815 	stw	r2,-288(fp)
 8005b00:	e0bffd17 	ldw	r2,-12(fp)
 8005b04:	10800917 	ldw	r2,36(r2)
 8005b08:	e0c00717 	ldw	r3,28(fp)
 8005b0c:	1885883a 	add	r2,r3,r2
 8005b10:	e0800715 	stw	r2,28(fp)
 8005b14:	e0ffb817 	ldw	r3,-288(fp)
 8005b18:	e0800817 	ldw	r2,32(fp)
 8005b1c:	18bfbf36 	bltu	r3,r2,8005a1c <forward_DCT+0xa4>
			}
			output_ptr[i] = (JCOEF) temp;
		}
		}
	}
}
 8005b20:	e037883a 	mov	sp,fp
 8005b24:	dfc00517 	ldw	ra,20(sp)
 8005b28:	df000417 	ldw	fp,16(sp)
 8005b2c:	dcc00317 	ldw	r19,12(sp)
 8005b30:	dc800217 	ldw	r18,8(sp)
 8005b34:	dc400117 	ldw	r17,4(sp)
 8005b38:	dc000017 	ldw	r16,0(sp)
 8005b3c:	dec00604 	addi	sp,sp,24
 8005b40:	f800283a 	ret

08005b44 <forward_DCT_float>:
	forward_DCT_float (j_compress_ptr cinfo, jpeg_component_info * compptr,
	JSAMPARRAY sample_data, JBLOCKROW coef_blocks,
	JDIMENSION start_row, JDIMENSION start_col,
	JDIMENSION num_blocks)
	/* This version is used for floating-point DCT implementations. */
{
 8005b44:	deffb204 	addi	sp,sp,-312
 8005b48:	dfc04d15 	stw	ra,308(sp)
 8005b4c:	df004c15 	stw	fp,304(sp)
 8005b50:	dcc04b15 	stw	r19,300(sp)
 8005b54:	dc804a15 	stw	r18,296(sp)
 8005b58:	dc404915 	stw	r17,292(sp)
 8005b5c:	dc004815 	stw	r16,288(sp)
 8005b60:	df004804 	addi	fp,sp,288
 8005b64:	e13ffc15 	stw	r4,-16(fp)
 8005b68:	e17ffd15 	stw	r5,-12(fp)
 8005b6c:	e1bffe15 	stw	r6,-8(fp)
 8005b70:	e1ffff15 	stw	r7,-4(fp)
	/* This routine is heavily used, so it's worth coding it tightly. */
	my_fdct_ptr fdct = (my_fdct_ptr) cinfo->fdct;
 8005b74:	e0bffc17 	ldw	r2,-16(fp)
 8005b78:	10806317 	ldw	r2,396(r2)
 8005b7c:	e0bfb915 	stw	r2,-284(fp)
	float_DCT_method_ptr do_dct = fdct->do_float_dct[compptr->component_index];
 8005b80:	e0bffd17 	ldw	r2,-12(fp)
 8005b84:	10800117 	ldw	r2,4(r2)
 8005b88:	e0ffb917 	ldw	r3,-284(fp)
 8005b8c:	10800644 	addi	r2,r2,25
 8005b90:	1085883a 	add	r2,r2,r2
 8005b94:	1085883a 	add	r2,r2,r2
 8005b98:	1885883a 	add	r2,r3,r2
 8005b9c:	10800017 	ldw	r2,0(r2)
 8005ba0:	e0bfba15 	stw	r2,-280(fp)
	FAST_FLOAT * divisors = fdct->float_divisors[compptr->quant_tbl_no];
 8005ba4:	e0bffd17 	ldw	r2,-12(fp)
 8005ba8:	10800417 	ldw	r2,16(r2)
 8005bac:	e0ffb917 	ldw	r3,-284(fp)
 8005bb0:	108008c4 	addi	r2,r2,35
 8005bb4:	1085883a 	add	r2,r2,r2
 8005bb8:	1085883a 	add	r2,r2,r2
 8005bbc:	1885883a 	add	r2,r3,r2
 8005bc0:	10800017 	ldw	r2,0(r2)
 8005bc4:	e0bfbb15 	stw	r2,-276(fp)
	FAST_FLOAT workspace[DCTSIZE2]; /* work area for FDCT subroutine */
	JDIMENSION bi;

	sample_data += start_row;	/* fold in the vertical offset once */
 8005bc8:	e0800617 	ldw	r2,24(fp)
 8005bcc:	1085883a 	add	r2,r2,r2
 8005bd0:	1085883a 	add	r2,r2,r2
 8005bd4:	e0fffe17 	ldw	r3,-8(fp)
 8005bd8:	1885883a 	add	r2,r3,r2
 8005bdc:	e0bffe15 	stw	r2,-8(fp)

	for (bi = 0; bi < num_blocks; bi++, start_col += compptr->DCT_h_scaled_size) {
 8005be0:	e03fb815 	stw	zero,-288(fp)
 8005be4:	00003506 	br	8005cbc <forward_DCT_float+0x178>
		/* Perform the DCT */
		(*do_dct) (workspace, sample_data, start_col);
 8005be8:	e0bfbc04 	addi	r2,fp,-272
 8005bec:	e0ffba17 	ldw	r3,-280(fp)
 8005bf0:	1009883a 	mov	r4,r2
 8005bf4:	e17ffe17 	ldw	r5,-8(fp)
 8005bf8:	e1800717 	ldw	r6,28(fp)
 8005bfc:	183ee83a 	callr	r3

		/* Quantize/descale the coefficients, and store into coef_blocks[] */
		{ register FAST_FLOAT temp;
		register int i;
		register JCOEFPTR output_ptr = coef_blocks[bi];
 8005c00:	e0bfb817 	ldw	r2,-288(fp)
 8005c04:	100491fa 	slli	r2,r2,7
 8005c08:	e0ffff17 	ldw	r3,-4(fp)
 8005c0c:	18a3883a 	add	r17,r3,r2

		for (i = 0; i < DCTSIZE2; i++) {
 8005c10:	0021883a 	mov	r16,zero
 8005c14:	00001f06 	br	8005c94 <forward_DCT_float+0x150>
			/* Apply the quantization and scaling factor */
			temp = workspace[i] * divisors[i];
 8005c18:	8405883a 	add	r2,r16,r16
 8005c1c:	1085883a 	add	r2,r2,r2
 8005c20:	e0ffb804 	addi	r3,fp,-288
 8005c24:	1885883a 	add	r2,r3,r2
 8005c28:	10800404 	addi	r2,r2,16
 8005c2c:	10c00017 	ldw	r3,0(r2)
 8005c30:	8005883a 	mov	r2,r16
 8005c34:	1085883a 	add	r2,r2,r2
 8005c38:	1085883a 	add	r2,r2,r2
 8005c3c:	e13fbb17 	ldw	r4,-276(fp)
 8005c40:	2089883a 	add	r4,r4,r2
 8005c44:	20800017 	ldw	r2,0(r4)
 8005c48:	1809883a 	mov	r4,r3
 8005c4c:	100b883a 	mov	r5,r2
 8005c50:	802b7fc0 	call	802b7fc <__mulsf3>
 8005c54:	1007883a 	mov	r3,r2
 8005c58:	1827883a 	mov	r19,r3
			* Since C does not specify the direction of rounding for negative
			* quotients, we have to force the dividend positive for portability.
			* The maximum coefficient size is +-16K (for 12-bit data), so this
			* code should work for either 16-bit or 32-bit ints.
			*/
			output_ptr[i] = (JCOEF) ((int) (temp + (FAST_FLOAT) 16384.5) - 16384);
 8005c5c:	8005883a 	mov	r2,r16
 8005c60:	1085883a 	add	r2,r2,r2
 8005c64:	88a5883a 	add	r18,r17,r2
 8005c68:	9809883a 	mov	r4,r19
 8005c6c:	0151a034 	movhi	r5,18048
 8005c70:	29404004 	addi	r5,r5,256
 8005c74:	802b7580 	call	802b758 <__addsf3>
 8005c78:	1007883a 	mov	r3,r2
 8005c7c:	1805883a 	mov	r2,r3
 8005c80:	1009883a 	mov	r4,r2
 8005c84:	802ba300 	call	802ba30 <__fixsfsi>
 8005c88:	10b00004 	addi	r2,r2,-16384
 8005c8c:	9080000d 	sth	r2,0(r18)
		/* Quantize/descale the coefficients, and store into coef_blocks[] */
		{ register FAST_FLOAT temp;
		register int i;
		register JCOEFPTR output_ptr = coef_blocks[bi];

		for (i = 0; i < DCTSIZE2; i++) {
 8005c90:	84000044 	addi	r16,r16,1
 8005c94:	80801010 	cmplti	r2,r16,64
 8005c98:	103fdf1e 	bne	r2,zero,8005c18 <forward_DCT_float+0xd4>
	FAST_FLOAT workspace[DCTSIZE2]; /* work area for FDCT subroutine */
	JDIMENSION bi;

	sample_data += start_row;	/* fold in the vertical offset once */

	for (bi = 0; bi < num_blocks; bi++, start_col += compptr->DCT_h_scaled_size) {
 8005c9c:	e0bfb817 	ldw	r2,-288(fp)
 8005ca0:	10800044 	addi	r2,r2,1
 8005ca4:	e0bfb815 	stw	r2,-288(fp)
 8005ca8:	e0bffd17 	ldw	r2,-12(fp)
 8005cac:	10800917 	ldw	r2,36(r2)
 8005cb0:	e0c00717 	ldw	r3,28(fp)
 8005cb4:	1885883a 	add	r2,r3,r2
 8005cb8:	e0800715 	stw	r2,28(fp)
 8005cbc:	e0ffb817 	ldw	r3,-288(fp)
 8005cc0:	e0800817 	ldw	r2,32(fp)
 8005cc4:	18bfc836 	bltu	r3,r2,8005be8 <forward_DCT_float+0xa4>
			*/
			output_ptr[i] = (JCOEF) ((int) (temp + (FAST_FLOAT) 16384.5) - 16384);
		}
		}
	}
}
 8005cc8:	e037883a 	mov	sp,fp
 8005ccc:	dfc00517 	ldw	ra,20(sp)
 8005cd0:	df000417 	ldw	fp,16(sp)
 8005cd4:	dcc00317 	ldw	r19,12(sp)
 8005cd8:	dc800217 	ldw	r18,8(sp)
 8005cdc:	dc400117 	ldw	r17,4(sp)
 8005ce0:	dc000017 	ldw	r16,0(sp)
 8005ce4:	dec00604 	addi	sp,sp,24
 8005ce8:	f800283a 	ret

08005cec <start_pass_fdctmgr>:
* first scan.  Hence all components should be examined here.
*/

METHODDEF(void)
	start_pass_fdctmgr (j_compress_ptr cinfo)
{
 8005cec:	defff104 	addi	sp,sp,-60
 8005cf0:	dfc00e15 	stw	ra,56(sp)
 8005cf4:	df000d15 	stw	fp,52(sp)
 8005cf8:	dc000c15 	stw	r16,48(sp)
 8005cfc:	df000c04 	addi	fp,sp,48
 8005d00:	e13fff15 	stw	r4,-4(fp)
	my_fdct_ptr fdct = (my_fdct_ptr) cinfo->fdct;
 8005d04:	e0bfff17 	ldw	r2,-4(fp)
 8005d08:	10806317 	ldw	r2,396(r2)
 8005d0c:	e0bffa15 	stw	r2,-24(fp)
	int ci, qtblno, i;
	jpeg_component_info *compptr;
	int method = 0;
 8005d10:	e03ff715 	stw	zero,-36(fp)
	JQUANT_TBL * qtbl;
	DCTELEM * dtbl;

	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8005d14:	e03ff415 	stw	zero,-48(fp)
 8005d18:	e0bfff17 	ldw	r2,-4(fp)
 8005d1c:	10801417 	ldw	r2,80(r2)
 8005d20:	e0bff615 	stw	r2,-40(fp)
 8005d24:	00019906 	br	800638c <start_pass_fdctmgr+0x6a0>
		ci++, compptr++) {
			/* Select the proper DCT routine for this component's scaling */
			switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 8005d28:	e0bff617 	ldw	r2,-40(fp)
 8005d2c:	10800917 	ldw	r2,36(r2)
 8005d30:	1006923a 	slli	r3,r2,8
 8005d34:	e0bff617 	ldw	r2,-40(fp)
 8005d38:	10800a17 	ldw	r2,40(r2)
 8005d3c:	1885883a 	add	r2,r3,r2
 8005d40:	10820220 	cmpeqi	r2,r2,2056
 8005d44:	10003626 	beq	r2,zero,8005e20 <start_pass_fdctmgr+0x134>
				fdct->do_dct[ci] = jpeg_fdct_1x2;
				method = JDCT_ISLOW;	/* jfdctint uses islow-style table */
				break;
#endif
			case ((DCTSIZE << 8) + DCTSIZE):
				switch (cinfo->dct_method) {
 8005d48:	e0bfff17 	ldw	r2,-4(fp)
 8005d4c:	10803617 	ldw	r2,216(r2)
 8005d50:	10c00060 	cmpeqi	r3,r2,1
 8005d54:	18000f1e 	bne	r3,zero,8005d94 <start_pass_fdctmgr+0xa8>
 8005d58:	0080032e 	bgeu	zero,r2,8005d68 <start_pass_fdctmgr+0x7c>
 8005d5c:	108000a0 	cmpeqi	r2,r2,2
 8005d60:	1000181e 	bne	r2,zero,8005dc4 <start_pass_fdctmgr+0xd8>
 8005d64:	00002306 	br	8005df4 <start_pass_fdctmgr+0x108>
#ifdef DCT_ISLOW_SUPPORTED
				case JDCT_ISLOW:
					fdct->do_dct[ci] = jpeg_fdct_islow;
 8005d68:	e0fffa17 	ldw	r3,-24(fp)
 8005d6c:	e0bff417 	ldw	r2,-48(fp)
 8005d70:	108002c4 	addi	r2,r2,11
 8005d74:	1085883a 	add	r2,r2,r2
 8005d78:	1085883a 	add	r2,r2,r2
 8005d7c:	1885883a 	add	r2,r3,r2
 8005d80:	00c20074 	movhi	r3,2049
 8005d84:	18caf804 	addi	r3,r3,11232
 8005d88:	10c00015 	stw	r3,0(r2)
					method = JDCT_ISLOW;
 8005d8c:	e03ff715 	stw	zero,-36(fp)
					break;
 8005d90:	00002206 	br	8005e1c <start_pass_fdctmgr+0x130>
#endif
#ifdef DCT_IFAST_SUPPORTED
				case JDCT_IFAST:
					fdct->do_dct[ci] = jpeg_fdct_ifast;
 8005d94:	e0fffa17 	ldw	r3,-24(fp)
 8005d98:	e0bff417 	ldw	r2,-48(fp)
 8005d9c:	108002c4 	addi	r2,r2,11
 8005da0:	1085883a 	add	r2,r2,r2
 8005da4:	1085883a 	add	r2,r2,r2
 8005da8:	1885883a 	add	r2,r3,r2
 8005dac:	00c20074 	movhi	r3,2049
 8005db0:	18c95004 	addi	r3,r3,9536
 8005db4:	10c00015 	stw	r3,0(r2)
					method = JDCT_IFAST;
 8005db8:	00800044 	movi	r2,1
 8005dbc:	e0bff715 	stw	r2,-36(fp)
					break;
 8005dc0:	00001606 	br	8005e1c <start_pass_fdctmgr+0x130>
#endif
#ifdef DCT_FLOAT_SUPPORTED
				case JDCT_FLOAT:
					fdct->do_float_dct[ci] = jpeg_fdct_float;
 8005dc4:	e0fffa17 	ldw	r3,-24(fp)
 8005dc8:	e0bff417 	ldw	r2,-48(fp)
 8005dcc:	10800644 	addi	r2,r2,25
 8005dd0:	1085883a 	add	r2,r2,r2
 8005dd4:	1085883a 	add	r2,r2,r2
 8005dd8:	1885883a 	add	r2,r3,r2
 8005ddc:	00c20074 	movhi	r3,2049
 8005de0:	18c72204 	addi	r3,r3,7304
 8005de4:	10c00015 	stw	r3,0(r2)
					method = JDCT_FLOAT;
 8005de8:	00800084 	movi	r2,2
 8005dec:	e0bff715 	stw	r2,-36(fp)
					break;
 8005df0:	00000a06 	br	8005e1c <start_pass_fdctmgr+0x130>
#endif
				default:
					ERREXIT(cinfo, JERR_NOT_COMPILED);
 8005df4:	e0bfff17 	ldw	r2,-4(fp)
 8005df8:	10800017 	ldw	r2,0(r2)
 8005dfc:	00c00c44 	movi	r3,49
 8005e00:	10c00515 	stw	r3,20(r2)
 8005e04:	e0bfff17 	ldw	r2,-4(fp)
 8005e08:	10800017 	ldw	r2,0(r2)
 8005e0c:	10800017 	ldw	r2,0(r2)
 8005e10:	e13fff17 	ldw	r4,-4(fp)
 8005e14:	103ee83a 	callr	r2
					break;
 8005e18:	0001883a 	nop
				}
				break;
 8005e1c:	00001406 	br	8005e70 <start_pass_fdctmgr+0x184>
			default:
				ERREXIT2(cinfo, JERR_BAD_DCTSIZE,
 8005e20:	e0bfff17 	ldw	r2,-4(fp)
 8005e24:	10800017 	ldw	r2,0(r2)
 8005e28:	00c001c4 	movi	r3,7
 8005e2c:	10c00515 	stw	r3,20(r2)
 8005e30:	e0bfff17 	ldw	r2,-4(fp)
 8005e34:	10800017 	ldw	r2,0(r2)
 8005e38:	e0fff617 	ldw	r3,-40(fp)
 8005e3c:	18c00917 	ldw	r3,36(r3)
 8005e40:	10c00615 	stw	r3,24(r2)
 8005e44:	e0bfff17 	ldw	r2,-4(fp)
 8005e48:	10800017 	ldw	r2,0(r2)
 8005e4c:	e0fff617 	ldw	r3,-40(fp)
 8005e50:	18c00a17 	ldw	r3,40(r3)
 8005e54:	10c00715 	stw	r3,28(r2)
 8005e58:	e0bfff17 	ldw	r2,-4(fp)
 8005e5c:	10800017 	ldw	r2,0(r2)
 8005e60:	10800017 	ldw	r2,0(r2)
 8005e64:	e13fff17 	ldw	r4,-4(fp)
 8005e68:	103ee83a 	callr	r2
					compptr->DCT_h_scaled_size, compptr->DCT_v_scaled_size);
				break;
 8005e6c:	0001883a 	nop
			}
			qtblno = compptr->quant_tbl_no;
 8005e70:	e0bff617 	ldw	r2,-40(fp)
 8005e74:	10800417 	ldw	r2,16(r2)
 8005e78:	e0bffb15 	stw	r2,-20(fp)
			/* Make sure specified quantization table is present */
			if (qtblno < 0 || qtblno >= NUM_QUANT_TBLS ||
 8005e7c:	e0bffb17 	ldw	r2,-20(fp)
 8005e80:	10000b16 	blt	r2,zero,8005eb0 <start_pass_fdctmgr+0x1c4>
 8005e84:	e0bffb17 	ldw	r2,-20(fp)
 8005e88:	10800108 	cmpgei	r2,r2,4
 8005e8c:	1000081e 	bne	r2,zero,8005eb0 <start_pass_fdctmgr+0x1c4>
				cinfo->quant_tbl_ptrs[qtblno] == NULL)
 8005e90:	e0ffff17 	ldw	r3,-4(fp)
 8005e94:	e0bffb17 	ldw	r2,-20(fp)
 8005e98:	10800544 	addi	r2,r2,21
 8005e9c:	1085883a 	add	r2,r2,r2
 8005ea0:	1085883a 	add	r2,r2,r2
 8005ea4:	1885883a 	add	r2,r3,r2
 8005ea8:	10800017 	ldw	r2,0(r2)
					compptr->DCT_h_scaled_size, compptr->DCT_v_scaled_size);
				break;
			}
			qtblno = compptr->quant_tbl_no;
			/* Make sure specified quantization table is present */
			if (qtblno < 0 || qtblno >= NUM_QUANT_TBLS ||
 8005eac:	10000d1e 	bne	r2,zero,8005ee4 <start_pass_fdctmgr+0x1f8>
				cinfo->quant_tbl_ptrs[qtblno] == NULL)
				ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, qtblno);
 8005eb0:	e0bfff17 	ldw	r2,-4(fp)
 8005eb4:	10800017 	ldw	r2,0(r2)
 8005eb8:	00c00d84 	movi	r3,54
 8005ebc:	10c00515 	stw	r3,20(r2)
 8005ec0:	e0bfff17 	ldw	r2,-4(fp)
 8005ec4:	10800017 	ldw	r2,0(r2)
 8005ec8:	e0fffb17 	ldw	r3,-20(fp)
 8005ecc:	10c00615 	stw	r3,24(r2)
 8005ed0:	e0bfff17 	ldw	r2,-4(fp)
 8005ed4:	10800017 	ldw	r2,0(r2)
 8005ed8:	10800017 	ldw	r2,0(r2)
 8005edc:	e13fff17 	ldw	r4,-4(fp)
 8005ee0:	103ee83a 	callr	r2
			qtbl = cinfo->quant_tbl_ptrs[qtblno];
 8005ee4:	e0ffff17 	ldw	r3,-4(fp)
 8005ee8:	e0bffb17 	ldw	r2,-20(fp)
 8005eec:	10800544 	addi	r2,r2,21
 8005ef0:	1085883a 	add	r2,r2,r2
 8005ef4:	1085883a 	add	r2,r2,r2
 8005ef8:	1885883a 	add	r2,r3,r2
 8005efc:	10800017 	ldw	r2,0(r2)
 8005f00:	e0bffc15 	stw	r2,-16(fp)
			/* Compute divisors for this quant table */
			/* We may do this more than once for same table, but it's not a big deal */
			switch (method) {
 8005f04:	e0bff717 	ldw	r2,-36(fp)
 8005f08:	10c00060 	cmpeqi	r3,r2,1
 8005f0c:	1800411e 	bne	r3,zero,8006014 <start_pass_fdctmgr+0x328>
 8005f10:	10c000a0 	cmpeqi	r3,r2,2
 8005f14:	18008a1e 	bne	r3,zero,8006140 <start_pass_fdctmgr+0x454>
 8005f18:	10010c1e 	bne	r2,zero,800634c <start_pass_fdctmgr+0x660>
#ifdef PROVIDE_ISLOW_TABLES
			case JDCT_ISLOW:
				/* For LL&M IDCT method, divisors are equal to raw quantization
				* coefficients multiplied by 8 (to counteract scaling).
				*/
				if (fdct->divisors[qtblno] == NULL) {
 8005f1c:	e0fffa17 	ldw	r3,-24(fp)
 8005f20:	e0bffb17 	ldw	r2,-20(fp)
 8005f24:	10800544 	addi	r2,r2,21
 8005f28:	1085883a 	add	r2,r2,r2
 8005f2c:	1085883a 	add	r2,r2,r2
 8005f30:	1885883a 	add	r2,r3,r2
 8005f34:	10800017 	ldw	r2,0(r2)
 8005f38:	10000f1e 	bne	r2,zero,8005f78 <start_pass_fdctmgr+0x28c>
					fdct->divisors[qtblno] = (DCTELEM *)
						(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8005f3c:	e0bfff17 	ldw	r2,-4(fp)
 8005f40:	10800117 	ldw	r2,4(r2)
 8005f44:	10800017 	ldw	r2,0(r2)
 8005f48:	e13fff17 	ldw	r4,-4(fp)
 8005f4c:	01400044 	movi	r5,1
 8005f50:	01804004 	movi	r6,256
 8005f54:	103ee83a 	callr	r2
 8005f58:	1007883a 	mov	r3,r2
			case JDCT_ISLOW:
				/* For LL&M IDCT method, divisors are equal to raw quantization
				* coefficients multiplied by 8 (to counteract scaling).
				*/
				if (fdct->divisors[qtblno] == NULL) {
					fdct->divisors[qtblno] = (DCTELEM *)
 8005f5c:	e13ffa17 	ldw	r4,-24(fp)
 8005f60:	e0bffb17 	ldw	r2,-20(fp)
 8005f64:	10800544 	addi	r2,r2,21
 8005f68:	1085883a 	add	r2,r2,r2
 8005f6c:	1085883a 	add	r2,r2,r2
 8005f70:	2085883a 	add	r2,r4,r2
 8005f74:	10c00015 	stw	r3,0(r2)
						(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
						DCTSIZE2 * SIZEOF(DCTELEM));
				}
				dtbl = fdct->divisors[qtblno];
 8005f78:	e0fffa17 	ldw	r3,-24(fp)
 8005f7c:	e0bffb17 	ldw	r2,-20(fp)
 8005f80:	10800544 	addi	r2,r2,21
 8005f84:	1085883a 	add	r2,r2,r2
 8005f88:	1085883a 	add	r2,r2,r2
 8005f8c:	1885883a 	add	r2,r3,r2
 8005f90:	10800017 	ldw	r2,0(r2)
 8005f94:	e0bffd15 	stw	r2,-12(fp)
				for (i = 0; i < DCTSIZE2; i++) {
 8005f98:	e03ff515 	stw	zero,-44(fp)
 8005f9c:	00001006 	br	8005fe0 <start_pass_fdctmgr+0x2f4>
					dtbl[i] = ((DCTELEM) qtbl->quantval[i]) << 3;
 8005fa0:	e0bff517 	ldw	r2,-44(fp)
 8005fa4:	1085883a 	add	r2,r2,r2
 8005fa8:	1085883a 	add	r2,r2,r2
 8005fac:	e0fffd17 	ldw	r3,-12(fp)
 8005fb0:	1887883a 	add	r3,r3,r2
 8005fb4:	e13ffc17 	ldw	r4,-16(fp)
 8005fb8:	e0bff517 	ldw	r2,-44(fp)
 8005fbc:	1085883a 	add	r2,r2,r2
 8005fc0:	2085883a 	add	r2,r4,r2
 8005fc4:	1080000b 	ldhu	r2,0(r2)
 8005fc8:	10bfffcc 	andi	r2,r2,65535
 8005fcc:	100490fa 	slli	r2,r2,3
 8005fd0:	18800015 	stw	r2,0(r3)
					fdct->divisors[qtblno] = (DCTELEM *)
						(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
						DCTSIZE2 * SIZEOF(DCTELEM));
				}
				dtbl = fdct->divisors[qtblno];
				for (i = 0; i < DCTSIZE2; i++) {
 8005fd4:	e0bff517 	ldw	r2,-44(fp)
 8005fd8:	10800044 	addi	r2,r2,1
 8005fdc:	e0bff515 	stw	r2,-44(fp)
 8005fe0:	e0bff517 	ldw	r2,-44(fp)
 8005fe4:	10801010 	cmplti	r2,r2,64
 8005fe8:	103fed1e 	bne	r2,zero,8005fa0 <start_pass_fdctmgr+0x2b4>
					dtbl[i] = ((DCTELEM) qtbl->quantval[i]) << 3;
				}
				fdct->pub.forward_DCT[ci] = forward_DCT;
 8005fec:	e0fffa17 	ldw	r3,-24(fp)
 8005ff0:	e0bff417 	ldw	r2,-48(fp)
 8005ff4:	10800044 	addi	r2,r2,1
 8005ff8:	1085883a 	add	r2,r2,r2
 8005ffc:	1085883a 	add	r2,r2,r2
 8006000:	1885883a 	add	r2,r3,r2
 8006004:	00c20034 	movhi	r3,2048
 8006008:	18d65e04 	addi	r3,r3,22904
 800600c:	10c00015 	stw	r3,0(r2)
				break;
 8006010:	0000d806 	br	8006374 <start_pass_fdctmgr+0x688>
						8867, 12299, 11585, 10426,  8867,  6967,  4799,  2446,
						4520,  6270,  5906,  5315,  4520,  3552,  2446,  1247
					};
					SHIFT_TEMPS

						if (fdct->divisors[qtblno] == NULL) {
 8006014:	e0fffa17 	ldw	r3,-24(fp)
 8006018:	e0bffb17 	ldw	r2,-20(fp)
 800601c:	10800544 	addi	r2,r2,21
 8006020:	1085883a 	add	r2,r2,r2
 8006024:	1085883a 	add	r2,r2,r2
 8006028:	1885883a 	add	r2,r3,r2
 800602c:	10800017 	ldw	r2,0(r2)
 8006030:	10000f1e 	bne	r2,zero,8006070 <start_pass_fdctmgr+0x384>
							fdct->divisors[qtblno] = (DCTELEM *)
								(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8006034:	e0bfff17 	ldw	r2,-4(fp)
 8006038:	10800117 	ldw	r2,4(r2)
 800603c:	10800017 	ldw	r2,0(r2)
 8006040:	e13fff17 	ldw	r4,-4(fp)
 8006044:	01400044 	movi	r5,1
 8006048:	01804004 	movi	r6,256
 800604c:	103ee83a 	callr	r2
 8006050:	1007883a 	mov	r3,r2
						4520,  6270,  5906,  5315,  4520,  3552,  2446,  1247
					};
					SHIFT_TEMPS

						if (fdct->divisors[qtblno] == NULL) {
							fdct->divisors[qtblno] = (DCTELEM *)
 8006054:	e13ffa17 	ldw	r4,-24(fp)
 8006058:	e0bffb17 	ldw	r2,-20(fp)
 800605c:	10800544 	addi	r2,r2,21
 8006060:	1085883a 	add	r2,r2,r2
 8006064:	1085883a 	add	r2,r2,r2
 8006068:	2085883a 	add	r2,r4,r2
 800606c:	10c00015 	stw	r3,0(r2)
								(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
								DCTSIZE2 * SIZEOF(DCTELEM));
						}
						dtbl = fdct->divisors[qtblno];
 8006070:	e0fffa17 	ldw	r3,-24(fp)
 8006074:	e0bffb17 	ldw	r2,-20(fp)
 8006078:	10800544 	addi	r2,r2,21
 800607c:	1085883a 	add	r2,r2,r2
 8006080:	1085883a 	add	r2,r2,r2
 8006084:	1885883a 	add	r2,r3,r2
 8006088:	10800017 	ldw	r2,0(r2)
 800608c:	e0bffd15 	stw	r2,-12(fp)
						for (i = 0; i < DCTSIZE2; i++) {
 8006090:	e03ff515 	stw	zero,-44(fp)
 8006094:	00001d06 	br	800610c <start_pass_fdctmgr+0x420>
							dtbl[i] = (DCTELEM)
 8006098:	e0bff517 	ldw	r2,-44(fp)
 800609c:	1085883a 	add	r2,r2,r2
 80060a0:	1085883a 	add	r2,r2,r2
 80060a4:	e0fffd17 	ldw	r3,-12(fp)
 80060a8:	18a1883a 	add	r16,r3,r2
								DESCALE(MULTIPLY16V16((INT32) qtbl->quantval[i],
 80060ac:	e0fffc17 	ldw	r3,-16(fp)
 80060b0:	e0bff517 	ldw	r2,-44(fp)
 80060b4:	1085883a 	add	r2,r2,r2
 80060b8:	1885883a 	add	r2,r3,r2
 80060bc:	1080000b 	ldhu	r2,0(r2)
 80060c0:	10ffffcc 	andi	r3,r2,65535
 80060c4:	01020134 	movhi	r4,2052
 80060c8:	213c1e04 	addi	r4,r4,-3976
 80060cc:	e0bff517 	ldw	r2,-44(fp)
 80060d0:	1085883a 	add	r2,r2,r2
 80060d4:	2085883a 	add	r2,r4,r2
 80060d8:	1080000b 	ldhu	r2,0(r2)
 80060dc:	10bfffcc 	andi	r2,r2,65535
 80060e0:	10a0001c 	xori	r2,r2,32768
 80060e4:	10a00004 	addi	r2,r2,-32768
 80060e8:	1809883a 	mov	r4,r3
 80060ec:	100b883a 	mov	r5,r2
 80060f0:	802c2180 	call	802c218 <__mulsi3>
 80060f4:	10810004 	addi	r2,r2,1024
 80060f8:	1005d2fa 	srai	r2,r2,11
								(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
								DCTSIZE2 * SIZEOF(DCTELEM));
						}
						dtbl = fdct->divisors[qtblno];
						for (i = 0; i < DCTSIZE2; i++) {
							dtbl[i] = (DCTELEM)
 80060fc:	80800015 	stw	r2,0(r16)
							fdct->divisors[qtblno] = (DCTELEM *)
								(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
								DCTSIZE2 * SIZEOF(DCTELEM));
						}
						dtbl = fdct->divisors[qtblno];
						for (i = 0; i < DCTSIZE2; i++) {
 8006100:	e0bff517 	ldw	r2,-44(fp)
 8006104:	10800044 	addi	r2,r2,1
 8006108:	e0bff515 	stw	r2,-44(fp)
 800610c:	e0bff517 	ldw	r2,-44(fp)
 8006110:	10801010 	cmplti	r2,r2,64
 8006114:	103fe01e 	bne	r2,zero,8006098 <start_pass_fdctmgr+0x3ac>
								DESCALE(MULTIPLY16V16((INT32) qtbl->quantval[i],
								(INT32) aanscales[i]),
								CONST_BITS-3);
						}
				}
				fdct->pub.forward_DCT[ci] = forward_DCT;
 8006118:	e0fffa17 	ldw	r3,-24(fp)
 800611c:	e0bff417 	ldw	r2,-48(fp)
 8006120:	10800044 	addi	r2,r2,1
 8006124:	1085883a 	add	r2,r2,r2
 8006128:	1085883a 	add	r2,r2,r2
 800612c:	1885883a 	add	r2,r3,r2
 8006130:	00c20034 	movhi	r3,2048
 8006134:	18d65e04 	addi	r3,r3,22904
 8006138:	10c00015 	stw	r3,0(r2)
				break;
 800613c:	00008d06 	br	8006374 <start_pass_fdctmgr+0x688>
					static const double aanscalefactor[DCTSIZE] = {
						1.0, 1.387039845, 1.306562965, 1.175875602,
						1.0, 0.785694958, 0.541196100, 0.275899379
					};

					if (fdct->float_divisors[qtblno] == NULL) {
 8006140:	e0fffa17 	ldw	r3,-24(fp)
 8006144:	e0bffb17 	ldw	r2,-20(fp)
 8006148:	108008c4 	addi	r2,r2,35
 800614c:	1085883a 	add	r2,r2,r2
 8006150:	1085883a 	add	r2,r2,r2
 8006154:	1885883a 	add	r2,r3,r2
 8006158:	10800017 	ldw	r2,0(r2)
 800615c:	10000f1e 	bne	r2,zero,800619c <start_pass_fdctmgr+0x4b0>
						fdct->float_divisors[qtblno] = (FAST_FLOAT *)
							(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8006160:	e0bfff17 	ldw	r2,-4(fp)
 8006164:	10800117 	ldw	r2,4(r2)
 8006168:	10800017 	ldw	r2,0(r2)
 800616c:	e13fff17 	ldw	r4,-4(fp)
 8006170:	01400044 	movi	r5,1
 8006174:	01804004 	movi	r6,256
 8006178:	103ee83a 	callr	r2
 800617c:	1007883a 	mov	r3,r2
						1.0, 1.387039845, 1.306562965, 1.175875602,
						1.0, 0.785694958, 0.541196100, 0.275899379
					};

					if (fdct->float_divisors[qtblno] == NULL) {
						fdct->float_divisors[qtblno] = (FAST_FLOAT *)
 8006180:	e13ffa17 	ldw	r4,-24(fp)
 8006184:	e0bffb17 	ldw	r2,-20(fp)
 8006188:	108008c4 	addi	r2,r2,35
 800618c:	1085883a 	add	r2,r2,r2
 8006190:	1085883a 	add	r2,r2,r2
 8006194:	2085883a 	add	r2,r4,r2
 8006198:	10c00015 	stw	r3,0(r2)
							(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
							DCTSIZE2 * SIZEOF(FAST_FLOAT));
					}
					fdtbl = fdct->float_divisors[qtblno];
 800619c:	e0fffa17 	ldw	r3,-24(fp)
 80061a0:	e0bffb17 	ldw	r2,-20(fp)
 80061a4:	108008c4 	addi	r2,r2,35
 80061a8:	1085883a 	add	r2,r2,r2
 80061ac:	1085883a 	add	r2,r2,r2
 80061b0:	1885883a 	add	r2,r3,r2
 80061b4:	10800017 	ldw	r2,0(r2)
 80061b8:	e0bffe15 	stw	r2,-8(fp)
					i = 0;
 80061bc:	e03ff515 	stw	zero,-44(fp)
					for (row = 0; row < DCTSIZE; row++) {
 80061c0:	e03ff815 	stw	zero,-32(fp)
 80061c4:	00005406 	br	8006318 <start_pass_fdctmgr+0x62c>
						for (col = 0; col < DCTSIZE; col++) {
 80061c8:	e03ff915 	stw	zero,-28(fp)
 80061cc:	00004c06 	br	8006300 <start_pass_fdctmgr+0x614>
							fdtbl[i] = (FAST_FLOAT)
 80061d0:	e0bff517 	ldw	r2,-44(fp)
 80061d4:	1085883a 	add	r2,r2,r2
 80061d8:	1085883a 	add	r2,r2,r2
 80061dc:	e0fffe17 	ldw	r3,-8(fp)
 80061e0:	18a1883a 	add	r16,r3,r2
								(1.0 / (((double) qtbl->quantval[i] *
 80061e4:	e0fffc17 	ldw	r3,-16(fp)
 80061e8:	e0bff517 	ldw	r2,-44(fp)
 80061ec:	1085883a 	add	r2,r2,r2
 80061f0:	1885883a 	add	r2,r3,r2
 80061f4:	1080000b 	ldhu	r2,0(r2)
 80061f8:	10bfffcc 	andi	r2,r2,65535
 80061fc:	1009883a 	mov	r4,r2
 8006200:	802bfcc0 	call	802bfcc <__floatunsidf>
 8006204:	100b883a 	mov	r5,r2
 8006208:	180d883a 	mov	r6,r3
								aanscalefactor[row] * aanscalefactor[col] * 8.0)));
 800620c:	00c20134 	movhi	r3,2052
 8006210:	18fc3e04 	addi	r3,r3,-3848
 8006214:	e0bff817 	ldw	r2,-32(fp)
 8006218:	100490fa 	slli	r2,r2,3
 800621c:	1889883a 	add	r4,r3,r2
 8006220:	20800017 	ldw	r2,0(r4)
 8006224:	20c00117 	ldw	r3,4(r4)
					fdtbl = fdct->float_divisors[qtblno];
					i = 0;
					for (row = 0; row < DCTSIZE; row++) {
						for (col = 0; col < DCTSIZE; col++) {
							fdtbl[i] = (FAST_FLOAT)
								(1.0 / (((double) qtbl->quantval[i] *
 8006228:	2809883a 	mov	r4,r5
 800622c:	300b883a 	mov	r5,r6
 8006230:	100d883a 	mov	r6,r2
 8006234:	180f883a 	mov	r7,r3
 8006238:	802bad40 	call	802bad4 <__muldf3>
 800623c:	100f883a 	mov	r7,r2
 8006240:	1811883a 	mov	r8,r3
 8006244:	380b883a 	mov	r5,r7
 8006248:	400d883a 	mov	r6,r8
								aanscalefactor[row] * aanscalefactor[col] * 8.0)));
 800624c:	00c20134 	movhi	r3,2052
 8006250:	18fc3e04 	addi	r3,r3,-3848
 8006254:	e0bff917 	ldw	r2,-28(fp)
 8006258:	100490fa 	slli	r2,r2,3
 800625c:	1889883a 	add	r4,r3,r2
 8006260:	20800017 	ldw	r2,0(r4)
 8006264:	20c00117 	ldw	r3,4(r4)
 8006268:	2809883a 	mov	r4,r5
 800626c:	300b883a 	mov	r5,r6
 8006270:	100d883a 	mov	r6,r2
 8006274:	180f883a 	mov	r7,r3
 8006278:	802bad40 	call	802bad4 <__muldf3>
 800627c:	1009883a 	mov	r4,r2
 8006280:	180b883a 	mov	r5,r3
 8006284:	2005883a 	mov	r2,r4
 8006288:	2807883a 	mov	r3,r5
 800628c:	1009883a 	mov	r4,r2
 8006290:	180b883a 	mov	r5,r3
 8006294:	000d883a 	mov	r6,zero
 8006298:	01d00834 	movhi	r7,16416
 800629c:	802bad40 	call	802bad4 <__muldf3>
 80062a0:	1009883a 	mov	r4,r2
 80062a4:	180b883a 	mov	r5,r3
 80062a8:	2005883a 	mov	r2,r4
 80062ac:	2807883a 	mov	r3,r5
					fdtbl = fdct->float_divisors[qtblno];
					i = 0;
					for (row = 0; row < DCTSIZE; row++) {
						for (col = 0; col < DCTSIZE; col++) {
							fdtbl[i] = (FAST_FLOAT)
								(1.0 / (((double) qtbl->quantval[i] *
 80062b0:	0009883a 	mov	r4,zero
 80062b4:	014ffc34 	movhi	r5,16368
 80062b8:	100d883a 	mov	r6,r2
 80062bc:	180f883a 	mov	r7,r3
 80062c0:	802bdb80 	call	802bdb8 <__divdf3>
 80062c4:	1009883a 	mov	r4,r2
 80062c8:	180b883a 	mov	r5,r3
 80062cc:	2005883a 	mov	r2,r4
 80062d0:	2807883a 	mov	r3,r5
					}
					fdtbl = fdct->float_divisors[qtblno];
					i = 0;
					for (row = 0; row < DCTSIZE; row++) {
						for (col = 0; col < DCTSIZE; col++) {
							fdtbl[i] = (FAST_FLOAT)
 80062d4:	1009883a 	mov	r4,r2
 80062d8:	180b883a 	mov	r5,r3
 80062dc:	802bf6c0 	call	802bf6c <__truncdfsf2>
 80062e0:	1007883a 	mov	r3,r2
 80062e4:	80c00015 	stw	r3,0(r16)
								(1.0 / (((double) qtbl->quantval[i] *
								aanscalefactor[row] * aanscalefactor[col] * 8.0)));
							i++;
 80062e8:	e0bff517 	ldw	r2,-44(fp)
 80062ec:	10800044 	addi	r2,r2,1
 80062f0:	e0bff515 	stw	r2,-44(fp)
							DCTSIZE2 * SIZEOF(FAST_FLOAT));
					}
					fdtbl = fdct->float_divisors[qtblno];
					i = 0;
					for (row = 0; row < DCTSIZE; row++) {
						for (col = 0; col < DCTSIZE; col++) {
 80062f4:	e0bff917 	ldw	r2,-28(fp)
 80062f8:	10800044 	addi	r2,r2,1
 80062fc:	e0bff915 	stw	r2,-28(fp)
 8006300:	e0bff917 	ldw	r2,-28(fp)
 8006304:	10800210 	cmplti	r2,r2,8
 8006308:	103fb11e 	bne	r2,zero,80061d0 <start_pass_fdctmgr+0x4e4>
							(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
							DCTSIZE2 * SIZEOF(FAST_FLOAT));
					}
					fdtbl = fdct->float_divisors[qtblno];
					i = 0;
					for (row = 0; row < DCTSIZE; row++) {
 800630c:	e0bff817 	ldw	r2,-32(fp)
 8006310:	10800044 	addi	r2,r2,1
 8006314:	e0bff815 	stw	r2,-32(fp)
 8006318:	e0bff817 	ldw	r2,-32(fp)
 800631c:	10800210 	cmplti	r2,r2,8
 8006320:	103fa91e 	bne	r2,zero,80061c8 <start_pass_fdctmgr+0x4dc>
								aanscalefactor[row] * aanscalefactor[col] * 8.0)));
							i++;
						}
					}
				}
				fdct->pub.forward_DCT[ci] = forward_DCT_float;
 8006324:	e0fffa17 	ldw	r3,-24(fp)
 8006328:	e0bff417 	ldw	r2,-48(fp)
 800632c:	10800044 	addi	r2,r2,1
 8006330:	1085883a 	add	r2,r2,r2
 8006334:	1085883a 	add	r2,r2,r2
 8006338:	1885883a 	add	r2,r3,r2
 800633c:	00c20034 	movhi	r3,2048
 8006340:	18d6d104 	addi	r3,r3,23364
 8006344:	10c00015 	stw	r3,0(r2)
				break;
 8006348:	00000a06 	br	8006374 <start_pass_fdctmgr+0x688>
#endif
			default:
				ERREXIT(cinfo, JERR_NOT_COMPILED);
 800634c:	e0bfff17 	ldw	r2,-4(fp)
 8006350:	10800017 	ldw	r2,0(r2)
 8006354:	00c00c44 	movi	r3,49
 8006358:	10c00515 	stw	r3,20(r2)
 800635c:	e0bfff17 	ldw	r2,-4(fp)
 8006360:	10800017 	ldw	r2,0(r2)
 8006364:	10800017 	ldw	r2,0(r2)
 8006368:	e13fff17 	ldw	r4,-4(fp)
 800636c:	103ee83a 	callr	r2
				break;
 8006370:	0001883a 	nop
	int method = 0;
	JQUANT_TBL * qtbl;
	DCTELEM * dtbl;

	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
		ci++, compptr++) {
 8006374:	e0bff417 	ldw	r2,-48(fp)
 8006378:	10800044 	addi	r2,r2,1
 800637c:	e0bff415 	stw	r2,-48(fp)
 8006380:	e0bff617 	ldw	r2,-40(fp)
 8006384:	10801604 	addi	r2,r2,88
 8006388:	e0bff615 	stw	r2,-40(fp)
	jpeg_component_info *compptr;
	int method = 0;
	JQUANT_TBL * qtbl;
	DCTELEM * dtbl;

	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800638c:	e0bfff17 	ldw	r2,-4(fp)
 8006390:	10801217 	ldw	r2,72(r2)
 8006394:	e0fff417 	ldw	r3,-48(fp)
 8006398:	18be6316 	blt	r3,r2,8005d28 <start_pass_fdctmgr+0x3c>
			default:
				ERREXIT(cinfo, JERR_NOT_COMPILED);
				break;
			}
	}
}
 800639c:	e037883a 	mov	sp,fp
 80063a0:	dfc00217 	ldw	ra,8(sp)
 80063a4:	df000117 	ldw	fp,4(sp)
 80063a8:	dc000017 	ldw	r16,0(sp)
 80063ac:	dec00304 	addi	sp,sp,12
 80063b0:	f800283a 	ret

080063b4 <jinit_forward_dct>:
* Initialize FDCT manager.
*/

GLOBAL(void)
	jinit_forward_dct (j_compress_ptr cinfo)
{
 80063b4:	defffb04 	addi	sp,sp,-20
 80063b8:	dfc00415 	stw	ra,16(sp)
 80063bc:	df000315 	stw	fp,12(sp)
 80063c0:	df000304 	addi	fp,sp,12
 80063c4:	e13fff15 	stw	r4,-4(fp)
	my_fdct_ptr fdct;
	int i;

	fdct = (my_fdct_ptr)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80063c8:	e0bfff17 	ldw	r2,-4(fp)
 80063cc:	10800117 	ldw	r2,4(r2)
 80063d0:	10800017 	ldw	r2,0(r2)
	jinit_forward_dct (j_compress_ptr cinfo)
{
	my_fdct_ptr fdct;
	int i;

	fdct = (my_fdct_ptr)
 80063d4:	e13fff17 	ldw	r4,-4(fp)
 80063d8:	01400044 	movi	r5,1
 80063dc:	01802704 	movi	r6,156
 80063e0:	103ee83a 	callr	r2
 80063e4:	e0bffe15 	stw	r2,-8(fp)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
		SIZEOF(my_fdct_controller));
	cinfo->fdct = (struct jpeg_forward_dct *) fdct;
 80063e8:	e0bfff17 	ldw	r2,-4(fp)
 80063ec:	e0fffe17 	ldw	r3,-8(fp)
 80063f0:	10c06315 	stw	r3,396(r2)
	fdct->pub.start_pass = start_pass_fdctmgr;
 80063f4:	e0bffe17 	ldw	r2,-8(fp)
 80063f8:	00c20034 	movhi	r3,2048
 80063fc:	18d73b04 	addi	r3,r3,23788
 8006400:	10c00015 	stw	r3,0(r2)

	/* Mark divisor tables unallocated */
	for (i = 0; i < NUM_QUANT_TBLS; i++) {
 8006404:	e03ffd15 	stw	zero,-12(fp)
 8006408:	00001106 	br	8006450 <jinit_forward_dct+0x9c>
		fdct->divisors[i] = NULL;
 800640c:	e0fffe17 	ldw	r3,-8(fp)
 8006410:	e0bffd17 	ldw	r2,-12(fp)
 8006414:	10800544 	addi	r2,r2,21
 8006418:	1085883a 	add	r2,r2,r2
 800641c:	1085883a 	add	r2,r2,r2
 8006420:	1885883a 	add	r2,r3,r2
 8006424:	10000015 	stw	zero,0(r2)
#ifdef DCT_FLOAT_SUPPORTED
		fdct->float_divisors[i] = NULL;
 8006428:	e0fffe17 	ldw	r3,-8(fp)
 800642c:	e0bffd17 	ldw	r2,-12(fp)
 8006430:	108008c4 	addi	r2,r2,35
 8006434:	1085883a 	add	r2,r2,r2
 8006438:	1085883a 	add	r2,r2,r2
 800643c:	1885883a 	add	r2,r3,r2
 8006440:	10000015 	stw	zero,0(r2)
		SIZEOF(my_fdct_controller));
	cinfo->fdct = (struct jpeg_forward_dct *) fdct;
	fdct->pub.start_pass = start_pass_fdctmgr;

	/* Mark divisor tables unallocated */
	for (i = 0; i < NUM_QUANT_TBLS; i++) {
 8006444:	e0bffd17 	ldw	r2,-12(fp)
 8006448:	10800044 	addi	r2,r2,1
 800644c:	e0bffd15 	stw	r2,-12(fp)
 8006450:	e0bffd17 	ldw	r2,-12(fp)
 8006454:	10800110 	cmplti	r2,r2,4
 8006458:	103fec1e 	bne	r2,zero,800640c <jinit_forward_dct+0x58>
		fdct->divisors[i] = NULL;
#ifdef DCT_FLOAT_SUPPORTED
		fdct->float_divisors[i] = NULL;
#endif
	}
}
 800645c:	e037883a 	mov	sp,fp
 8006460:	dfc00117 	ldw	ra,4(sp)
 8006464:	df000017 	ldw	fp,0(sp)
 8006468:	dec00204 	addi	sp,sp,8
 800646c:	f800283a 	ret

08006470 <jpeg_make_c_derived_tbl>:
*/

LOCAL(void)
	jpeg_make_c_derived_tbl (j_compress_ptr cinfo, boolean isDC, int tblno,
	c_derived_tbl ** pdtbl)
{
 8006470:	defeaf04 	addi	sp,sp,-1348
 8006474:	dfc15015 	stw	ra,1344(sp)
 8006478:	df014f15 	stw	fp,1340(sp)
 800647c:	df014f04 	addi	fp,sp,1340
 8006480:	e13ffc15 	stw	r4,-16(fp)
 8006484:	2805883a 	mov	r2,r5
 8006488:	e1bffe15 	stw	r6,-8(fp)
 800648c:	e1ffff15 	stw	r7,-4(fp)
 8006490:	e0bffd05 	stb	r2,-12(fp)
	/* Note that huffsize[] and huffcode[] are filled in code-length order,
	* paralleling the order of the symbols themselves in htbl->huffval[].
	*/

	/* Find the input Huffman table */
	if (tblno < 0 || tblno >= NUM_HUFF_TBLS)
 8006494:	e0bffe17 	ldw	r2,-8(fp)
 8006498:	10000316 	blt	r2,zero,80064a8 <jpeg_make_c_derived_tbl+0x38>
 800649c:	e0bffe17 	ldw	r2,-8(fp)
 80064a0:	10800110 	cmplti	r2,r2,4
 80064a4:	10000d1e 	bne	r2,zero,80064dc <jpeg_make_c_derived_tbl+0x6c>
		ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 80064a8:	e0bffc17 	ldw	r2,-16(fp)
 80064ac:	10800017 	ldw	r2,0(r2)
 80064b0:	00c00d04 	movi	r3,52
 80064b4:	10c00515 	stw	r3,20(r2)
 80064b8:	e0bffc17 	ldw	r2,-16(fp)
 80064bc:	10800017 	ldw	r2,0(r2)
 80064c0:	e0fffe17 	ldw	r3,-8(fp)
 80064c4:	10c00615 	stw	r3,24(r2)
 80064c8:	e0bffc17 	ldw	r2,-16(fp)
 80064cc:	10800017 	ldw	r2,0(r2)
 80064d0:	10800017 	ldw	r2,0(r2)
 80064d4:	e13ffc17 	ldw	r4,-16(fp)
 80064d8:	103ee83a 	callr	r2
	htbl =
		isDC ? cinfo->dc_huff_tbl_ptrs[tblno] : cinfo->ac_huff_tbl_ptrs[tblno];
 80064dc:	e0bffd03 	ldbu	r2,-12(fp)
 80064e0:	10000826 	beq	r2,zero,8006504 <jpeg_make_c_derived_tbl+0x94>
 80064e4:	e0fffc17 	ldw	r3,-16(fp)
 80064e8:	e0bffe17 	ldw	r2,-8(fp)
 80064ec:	10800744 	addi	r2,r2,29
 80064f0:	1085883a 	add	r2,r2,r2
 80064f4:	1085883a 	add	r2,r2,r2
 80064f8:	1885883a 	add	r2,r3,r2
 80064fc:	10800017 	ldw	r2,0(r2)
 8006500:	00000706 	br	8006520 <jpeg_make_c_derived_tbl+0xb0>
 8006504:	e0fffc17 	ldw	r3,-16(fp)
 8006508:	e0bffe17 	ldw	r2,-8(fp)
 800650c:	10800844 	addi	r2,r2,33
 8006510:	1085883a 	add	r2,r2,r2
 8006514:	1085883a 	add	r2,r2,r2
 8006518:	1885883a 	add	r2,r3,r2
 800651c:	10800017 	ldw	r2,0(r2)
	*/

	/* Find the input Huffman table */
	if (tblno < 0 || tblno >= NUM_HUFF_TBLS)
		ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
	htbl =
 8006520:	e0beb615 	stw	r2,-1320(fp)
		isDC ? cinfo->dc_huff_tbl_ptrs[tblno] : cinfo->ac_huff_tbl_ptrs[tblno];
	if (htbl == NULL)
 8006524:	e0beb617 	ldw	r2,-1320(fp)
 8006528:	10000d1e 	bne	r2,zero,8006560 <jpeg_make_c_derived_tbl+0xf0>
		ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 800652c:	e0bffc17 	ldw	r2,-16(fp)
 8006530:	10800017 	ldw	r2,0(r2)
 8006534:	00c00d04 	movi	r3,52
 8006538:	10c00515 	stw	r3,20(r2)
 800653c:	e0bffc17 	ldw	r2,-16(fp)
 8006540:	10800017 	ldw	r2,0(r2)
 8006544:	e0fffe17 	ldw	r3,-8(fp)
 8006548:	10c00615 	stw	r3,24(r2)
 800654c:	e0bffc17 	ldw	r2,-16(fp)
 8006550:	10800017 	ldw	r2,0(r2)
 8006554:	10800017 	ldw	r2,0(r2)
 8006558:	e13ffc17 	ldw	r4,-16(fp)
 800655c:	103ee83a 	callr	r2

	/* Allocate a workspace if we haven't already done so. */
	if (*pdtbl == NULL)
 8006560:	e0bfff17 	ldw	r2,-4(fp)
 8006564:	10800017 	ldw	r2,0(r2)
 8006568:	1000091e 	bne	r2,zero,8006590 <jpeg_make_c_derived_tbl+0x120>
		*pdtbl = (c_derived_tbl *)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800656c:	e0bffc17 	ldw	r2,-16(fp)
 8006570:	10800117 	ldw	r2,4(r2)
 8006574:	10800017 	ldw	r2,0(r2)
 8006578:	e13ffc17 	ldw	r4,-16(fp)
 800657c:	01400044 	movi	r5,1
 8006580:	01814004 	movi	r6,1280
 8006584:	103ee83a 	callr	r2
	if (htbl == NULL)
		ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);

	/* Allocate a workspace if we haven't already done so. */
	if (*pdtbl == NULL)
		*pdtbl = (c_derived_tbl *)
 8006588:	e0ffff17 	ldw	r3,-4(fp)
 800658c:	18800015 	stw	r2,0(r3)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
		SIZEOF(c_derived_tbl));
	dtbl = *pdtbl;
 8006590:	e0bfff17 	ldw	r2,-4(fp)
 8006594:	10800017 	ldw	r2,0(r2)
 8006598:	e0beb715 	stw	r2,-1316(fp)

	/* Figure C.1: make table of Huffman code length for each symbol */

	p = 0;
 800659c:	e03eb115 	stw	zero,-1340(fp)
	for (l = 1; l <= 16; l++) {
 80065a0:	00800044 	movi	r2,1
 80065a4:	e0beb315 	stw	r2,-1332(fp)
 80065a8:	00002c06 	br	800665c <jpeg_make_c_derived_tbl+0x1ec>
		i = (int) htbl->bits[l];
 80065ac:	e0feb617 	ldw	r3,-1320(fp)
 80065b0:	e0beb317 	ldw	r2,-1332(fp)
 80065b4:	1885883a 	add	r2,r3,r2
 80065b8:	10800003 	ldbu	r2,0(r2)
 80065bc:	10803fcc 	andi	r2,r2,255
 80065c0:	e0beb215 	stw	r2,-1336(fp)
		if (i < 0 || p + i > 256)	/* protect against table overrun */
 80065c4:	e0beb217 	ldw	r2,-1336(fp)
 80065c8:	10000516 	blt	r2,zero,80065e0 <jpeg_make_c_derived_tbl+0x170>
 80065cc:	e0feb117 	ldw	r3,-1340(fp)
 80065d0:	e0beb217 	ldw	r2,-1336(fp)
 80065d4:	1885883a 	add	r2,r3,r2
 80065d8:	10804050 	cmplti	r2,r2,257
 80065dc:	1000141e 	bne	r2,zero,8006630 <jpeg_make_c_derived_tbl+0x1c0>
			ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 80065e0:	e0bffc17 	ldw	r2,-16(fp)
 80065e4:	10800017 	ldw	r2,0(r2)
 80065e8:	00c00244 	movi	r3,9
 80065ec:	10c00515 	stw	r3,20(r2)
 80065f0:	e0bffc17 	ldw	r2,-16(fp)
 80065f4:	10800017 	ldw	r2,0(r2)
 80065f8:	10800017 	ldw	r2,0(r2)
 80065fc:	e13ffc17 	ldw	r4,-16(fp)
 8006600:	103ee83a 	callr	r2
		while (i--)
 8006604:	00000a06 	br	8006630 <jpeg_make_c_derived_tbl+0x1c0>
			huffsize[p++] = (char) l;
 8006608:	e0beb317 	ldw	r2,-1332(fp)
 800660c:	1007883a 	mov	r3,r2
 8006610:	e13eba04 	addi	r4,fp,-1304
 8006614:	e0beb117 	ldw	r2,-1340(fp)
 8006618:	2085883a 	add	r2,r4,r2
 800661c:	10c00005 	stb	r3,0(r2)
 8006620:	e0beb117 	ldw	r2,-1340(fp)
 8006624:	10800044 	addi	r2,r2,1
 8006628:	e0beb115 	stw	r2,-1340(fp)
 800662c:	00000106 	br	8006634 <jpeg_make_c_derived_tbl+0x1c4>
	p = 0;
	for (l = 1; l <= 16; l++) {
		i = (int) htbl->bits[l];
		if (i < 0 || p + i > 256)	/* protect against table overrun */
			ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
		while (i--)
 8006630:	0001883a 	nop
 8006634:	e0beb217 	ldw	r2,-1336(fp)
 8006638:	1004c03a 	cmpne	r2,r2,zero
 800663c:	e0feb217 	ldw	r3,-1336(fp)
 8006640:	18ffffc4 	addi	r3,r3,-1
 8006644:	e0feb215 	stw	r3,-1336(fp)
 8006648:	10803fcc 	andi	r2,r2,255
 800664c:	103fee1e 	bne	r2,zero,8006608 <jpeg_make_c_derived_tbl+0x198>
	dtbl = *pdtbl;

	/* Figure C.1: make table of Huffman code length for each symbol */

	p = 0;
	for (l = 1; l <= 16; l++) {
 8006650:	e0beb317 	ldw	r2,-1332(fp)
 8006654:	10800044 	addi	r2,r2,1
 8006658:	e0beb315 	stw	r2,-1332(fp)
 800665c:	e0beb317 	ldw	r2,-1332(fp)
 8006660:	10800450 	cmplti	r2,r2,17
 8006664:	103fd11e 	bne	r2,zero,80065ac <jpeg_make_c_derived_tbl+0x13c>
		if (i < 0 || p + i > 256)	/* protect against table overrun */
			ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
		while (i--)
			huffsize[p++] = (char) l;
	}
	huffsize[p] = 0;
 8006668:	e0feba04 	addi	r3,fp,-1304
 800666c:	e0beb117 	ldw	r2,-1340(fp)
 8006670:	1885883a 	add	r2,r3,r2
 8006674:	10000005 	stb	zero,0(r2)
	lastp = p;
 8006678:	e0beb117 	ldw	r2,-1340(fp)
 800667c:	e0beb815 	stw	r2,-1312(fp)

	/* Figure C.2: generate the codes themselves */
	/* We also validate that the counts represent a legal Huffman code tree. */

	code = 0;
 8006680:	e03eb515 	stw	zero,-1324(fp)
	si = huffsize[0];
 8006684:	e0beba03 	ldbu	r2,-1304(fp)
 8006688:	10803fcc 	andi	r2,r2,255
 800668c:	1080201c 	xori	r2,r2,128
 8006690:	10bfe004 	addi	r2,r2,-128
 8006694:	e0beb415 	stw	r2,-1328(fp)
	p = 0;
 8006698:	e03eb115 	stw	zero,-1340(fp)
	while (huffsize[p]) {
 800669c:	00002d06 	br	8006754 <jpeg_make_c_derived_tbl+0x2e4>
		while (((int) huffsize[p]) == si) {
			huffcode[p++] = code;
 80066a0:	e0beb117 	ldw	r2,-1340(fp)
 80066a4:	1085883a 	add	r2,r2,r2
 80066a8:	1085883a 	add	r2,r2,r2
 80066ac:	e0feb104 	addi	r3,fp,-1340
 80066b0:	1885883a 	add	r2,r3,r2
 80066b4:	10804a04 	addi	r2,r2,296
 80066b8:	e0feb517 	ldw	r3,-1324(fp)
 80066bc:	10c00015 	stw	r3,0(r2)
 80066c0:	e0beb117 	ldw	r2,-1340(fp)
 80066c4:	10800044 	addi	r2,r2,1
 80066c8:	e0beb115 	stw	r2,-1340(fp)
			code++;
 80066cc:	e0beb517 	ldw	r2,-1324(fp)
 80066d0:	10800044 	addi	r2,r2,1
 80066d4:	e0beb515 	stw	r2,-1324(fp)
 80066d8:	00000106 	br	80066e0 <jpeg_make_c_derived_tbl+0x270>

	code = 0;
	si = huffsize[0];
	p = 0;
	while (huffsize[p]) {
		while (((int) huffsize[p]) == si) {
 80066dc:	0001883a 	nop
 80066e0:	e0feba04 	addi	r3,fp,-1304
 80066e4:	e0beb117 	ldw	r2,-1340(fp)
 80066e8:	1885883a 	add	r2,r3,r2
 80066ec:	10800003 	ldbu	r2,0(r2)
 80066f0:	10c03fcc 	andi	r3,r2,255
 80066f4:	18c0201c 	xori	r3,r3,128
 80066f8:	18ffe004 	addi	r3,r3,-128
 80066fc:	e0beb417 	ldw	r2,-1328(fp)
 8006700:	18bfe726 	beq	r3,r2,80066a0 <jpeg_make_c_derived_tbl+0x230>
			code++;
		}
		/* code is now 1 more than the last code used for codelength si; but
		* it must still fit in si bits, since no code is allowed to be all ones.
		*/
		if (((INT32) code) >= (((INT32) 1) << si))
 8006704:	e0feb517 	ldw	r3,-1324(fp)
 8006708:	01000044 	movi	r4,1
 800670c:	e0beb417 	ldw	r2,-1328(fp)
 8006710:	2084983a 	sll	r2,r4,r2
 8006714:	18800916 	blt	r3,r2,800673c <jpeg_make_c_derived_tbl+0x2cc>
			ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 8006718:	e0bffc17 	ldw	r2,-16(fp)
 800671c:	10800017 	ldw	r2,0(r2)
 8006720:	00c00244 	movi	r3,9
 8006724:	10c00515 	stw	r3,20(r2)
 8006728:	e0bffc17 	ldw	r2,-16(fp)
 800672c:	10800017 	ldw	r2,0(r2)
 8006730:	10800017 	ldw	r2,0(r2)
 8006734:	e13ffc17 	ldw	r4,-16(fp)
 8006738:	103ee83a 	callr	r2
		code <<= 1;
 800673c:	e0beb517 	ldw	r2,-1324(fp)
 8006740:	1085883a 	add	r2,r2,r2
 8006744:	e0beb515 	stw	r2,-1324(fp)
		si++;
 8006748:	e0beb417 	ldw	r2,-1328(fp)
 800674c:	10800044 	addi	r2,r2,1
 8006750:	e0beb415 	stw	r2,-1328(fp)
	/* We also validate that the counts represent a legal Huffman code tree. */

	code = 0;
	si = huffsize[0];
	p = 0;
	while (huffsize[p]) {
 8006754:	e0feba04 	addi	r3,fp,-1304
 8006758:	e0beb117 	ldw	r2,-1340(fp)
 800675c:	1885883a 	add	r2,r3,r2
 8006760:	10800003 	ldbu	r2,0(r2)
 8006764:	10803fcc 	andi	r2,r2,255
 8006768:	1080201c 	xori	r2,r2,128
 800676c:	10bfe004 	addi	r2,r2,-128
 8006770:	103fda1e 	bne	r2,zero,80066dc <jpeg_make_c_derived_tbl+0x26c>

	/* Set all codeless symbols to have code length 0;
	* this lets us detect duplicate VAL entries here, and later
	* allows emit_bits to detect any attempt to emit such symbols.
	*/
	MEMZERO(dtbl->ehufsi, SIZEOF(dtbl->ehufsi));
 8006774:	e0beb717 	ldw	r2,-1316(fp)
 8006778:	10810004 	addi	r2,r2,1024
 800677c:	1009883a 	mov	r4,r2
 8006780:	000b883a 	mov	r5,zero
 8006784:	01804004 	movi	r6,256
 8006788:	802ecf00 	call	802ecf0 <memset>
	/* This is also a convenient place to check for out-of-range
	* and duplicated VAL entries.  We allow 0..255 for AC symbols
	* but only 0..15 for DC.  (We could constrain them further
	* based on data depth and mode, but this seems enough.)
	*/
	maxsymbol = isDC ? 15 : 255;
 800678c:	e0bffd03 	ldbu	r2,-12(fp)
 8006790:	10000226 	beq	r2,zero,800679c <jpeg_make_c_derived_tbl+0x32c>
 8006794:	008003c4 	movi	r2,15
 8006798:	00000106 	br	80067a0 <jpeg_make_c_derived_tbl+0x330>
 800679c:	00803fc4 	movi	r2,255
 80067a0:	e0beb915 	stw	r2,-1308(fp)

	for (p = 0; p < lastp; p++) {
 80067a4:	e03eb115 	stw	zero,-1340(fp)
 80067a8:	00003706 	br	8006888 <jpeg_make_c_derived_tbl+0x418>
		i = htbl->huffval[p];
 80067ac:	e0feb617 	ldw	r3,-1320(fp)
 80067b0:	e0beb117 	ldw	r2,-1340(fp)
 80067b4:	1885883a 	add	r2,r3,r2
 80067b8:	10800444 	addi	r2,r2,17
 80067bc:	10800003 	ldbu	r2,0(r2)
 80067c0:	10803fcc 	andi	r2,r2,255
 80067c4:	e0beb215 	stw	r2,-1336(fp)
		if (i < 0 || i > maxsymbol || dtbl->ehufsi[i])
 80067c8:	e0beb217 	ldw	r2,-1336(fp)
 80067cc:	10000c16 	blt	r2,zero,8006800 <jpeg_make_c_derived_tbl+0x390>
 80067d0:	e0beb217 	ldw	r2,-1336(fp)
 80067d4:	e0feb917 	ldw	r3,-1308(fp)
 80067d8:	18800916 	blt	r3,r2,8006800 <jpeg_make_c_derived_tbl+0x390>
 80067dc:	e0feb717 	ldw	r3,-1316(fp)
 80067e0:	e0beb217 	ldw	r2,-1336(fp)
 80067e4:	1885883a 	add	r2,r3,r2
 80067e8:	10810004 	addi	r2,r2,1024
 80067ec:	10800003 	ldbu	r2,0(r2)
 80067f0:	10803fcc 	andi	r2,r2,255
 80067f4:	1080201c 	xori	r2,r2,128
 80067f8:	10bfe004 	addi	r2,r2,-128
 80067fc:	10000926 	beq	r2,zero,8006824 <jpeg_make_c_derived_tbl+0x3b4>
			ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 8006800:	e0bffc17 	ldw	r2,-16(fp)
 8006804:	10800017 	ldw	r2,0(r2)
 8006808:	00c00244 	movi	r3,9
 800680c:	10c00515 	stw	r3,20(r2)
 8006810:	e0bffc17 	ldw	r2,-16(fp)
 8006814:	10800017 	ldw	r2,0(r2)
 8006818:	10800017 	ldw	r2,0(r2)
 800681c:	e13ffc17 	ldw	r4,-16(fp)
 8006820:	103ee83a 	callr	r2
		dtbl->ehufco[i] = huffcode[p];
 8006824:	e0beb117 	ldw	r2,-1340(fp)
 8006828:	1085883a 	add	r2,r2,r2
 800682c:	1085883a 	add	r2,r2,r2
 8006830:	e0feb104 	addi	r3,fp,-1340
 8006834:	1885883a 	add	r2,r3,r2
 8006838:	10804a04 	addi	r2,r2,296
 800683c:	10c00017 	ldw	r3,0(r2)
 8006840:	e13eb717 	ldw	r4,-1316(fp)
 8006844:	e0beb217 	ldw	r2,-1336(fp)
 8006848:	1085883a 	add	r2,r2,r2
 800684c:	1085883a 	add	r2,r2,r2
 8006850:	2085883a 	add	r2,r4,r2
 8006854:	10c00015 	stw	r3,0(r2)
		dtbl->ehufsi[i] = huffsize[p];
 8006858:	e0feba04 	addi	r3,fp,-1304
 800685c:	e0beb117 	ldw	r2,-1340(fp)
 8006860:	1885883a 	add	r2,r3,r2
 8006864:	10c00003 	ldbu	r3,0(r2)
 8006868:	e13eb717 	ldw	r4,-1316(fp)
 800686c:	e0beb217 	ldw	r2,-1336(fp)
 8006870:	2085883a 	add	r2,r4,r2
 8006874:	10810004 	addi	r2,r2,1024
 8006878:	10c00005 	stb	r3,0(r2)
	* but only 0..15 for DC.  (We could constrain them further
	* based on data depth and mode, but this seems enough.)
	*/
	maxsymbol = isDC ? 15 : 255;

	for (p = 0; p < lastp; p++) {
 800687c:	e0beb117 	ldw	r2,-1340(fp)
 8006880:	10800044 	addi	r2,r2,1
 8006884:	e0beb115 	stw	r2,-1340(fp)
 8006888:	e0feb117 	ldw	r3,-1340(fp)
 800688c:	e0beb817 	ldw	r2,-1312(fp)
 8006890:	18bfc616 	blt	r3,r2,80067ac <jpeg_make_c_derived_tbl+0x33c>
		if (i < 0 || i > maxsymbol || dtbl->ehufsi[i])
			ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
		dtbl->ehufco[i] = huffcode[p];
		dtbl->ehufsi[i] = huffsize[p];
	}
}
 8006894:	e037883a 	mov	sp,fp
 8006898:	dfc00117 	ldw	ra,4(sp)
 800689c:	df000017 	ldw	fp,0(sp)
 80068a0:	dec00204 	addi	sp,sp,8
 80068a4:	f800283a 	ret

080068a8 <dump_buffer_s>:


LOCAL(boolean)
	dump_buffer_s (working_state * state)
	/* Empty the output buffer; return TRUE if successful, FALSE if must suspend */
{
 80068a8:	defffc04 	addi	sp,sp,-16
 80068ac:	dfc00315 	stw	ra,12(sp)
 80068b0:	df000215 	stw	fp,8(sp)
 80068b4:	df000204 	addi	fp,sp,8
 80068b8:	e13fff15 	stw	r4,-4(fp)
	struct jpeg_destination_mgr * dest = state->cinfo->dest;
 80068bc:	e0bfff17 	ldw	r2,-4(fp)
 80068c0:	10800817 	ldw	r2,32(r2)
 80068c4:	10800617 	ldw	r2,24(r2)
 80068c8:	e0bffe15 	stw	r2,-8(fp)

	if (! (*dest->empty_output_buffer) (state->cinfo))
 80068cc:	e0bffe17 	ldw	r2,-8(fp)
 80068d0:	10c00317 	ldw	r3,12(r2)
 80068d4:	e0bfff17 	ldw	r2,-4(fp)
 80068d8:	10800817 	ldw	r2,32(r2)
 80068dc:	1009883a 	mov	r4,r2
 80068e0:	183ee83a 	callr	r3
 80068e4:	10803fcc 	andi	r2,r2,255
 80068e8:	1000021e 	bne	r2,zero,80068f4 <dump_buffer_s+0x4c>
		return FALSE;
 80068ec:	0005883a 	mov	r2,zero
 80068f0:	00000906 	br	8006918 <dump_buffer_s+0x70>
	/* After a successful buffer dump, must reset buffer pointers */
	state->next_output_byte = dest->next_output_byte;
 80068f4:	e0bffe17 	ldw	r2,-8(fp)
 80068f8:	10c00017 	ldw	r3,0(r2)
 80068fc:	e0bfff17 	ldw	r2,-4(fp)
 8006900:	10c00015 	stw	r3,0(r2)
	state->free_in_buffer = dest->free_in_buffer;
 8006904:	e0bffe17 	ldw	r2,-8(fp)
 8006908:	10c00117 	ldw	r3,4(r2)
 800690c:	e0bfff17 	ldw	r2,-4(fp)
 8006910:	10c00115 	stw	r3,4(r2)
	return TRUE;
 8006914:	00800044 	movi	r2,1
}
 8006918:	e037883a 	mov	sp,fp
 800691c:	dfc00117 	ldw	ra,4(sp)
 8006920:	df000017 	ldw	fp,0(sp)
 8006924:	dec00204 	addi	sp,sp,8
 8006928:	f800283a 	ret

0800692c <dump_buffer_e>:


LOCAL(void)
	dump_buffer_e (huff_entropy_ptr entropy)
	/* Empty the output buffer; we do not support suspension in this case. */
{
 800692c:	defffc04 	addi	sp,sp,-16
 8006930:	dfc00315 	stw	ra,12(sp)
 8006934:	df000215 	stw	fp,8(sp)
 8006938:	df000204 	addi	fp,sp,8
 800693c:	e13fff15 	stw	r4,-4(fp)
	struct jpeg_destination_mgr * dest = entropy->cinfo->dest;
 8006940:	e0bfff17 	ldw	r2,-4(fp)
 8006944:	10801e17 	ldw	r2,120(r2)
 8006948:	10800617 	ldw	r2,24(r2)
 800694c:	e0bffe15 	stw	r2,-8(fp)

	if (! (*dest->empty_output_buffer) (entropy->cinfo))
 8006950:	e0bffe17 	ldw	r2,-8(fp)
 8006954:	10c00317 	ldw	r3,12(r2)
 8006958:	e0bfff17 	ldw	r2,-4(fp)
 800695c:	10801e17 	ldw	r2,120(r2)
 8006960:	1009883a 	mov	r4,r2
 8006964:	183ee83a 	callr	r3
 8006968:	10803fcc 	andi	r2,r2,255
 800696c:	10000d1e 	bne	r2,zero,80069a4 <dump_buffer_e+0x78>
		ERREXIT(entropy->cinfo, JERR_CANT_SUSPEND);
 8006970:	e0bfff17 	ldw	r2,-4(fp)
 8006974:	10801e17 	ldw	r2,120(r2)
 8006978:	10800017 	ldw	r2,0(r2)
 800697c:	00c00644 	movi	r3,25
 8006980:	10c00515 	stw	r3,20(r2)
 8006984:	e0bfff17 	ldw	r2,-4(fp)
 8006988:	10801e17 	ldw	r2,120(r2)
 800698c:	10800017 	ldw	r2,0(r2)
 8006990:	10c00017 	ldw	r3,0(r2)
 8006994:	e0bfff17 	ldw	r2,-4(fp)
 8006998:	10801e17 	ldw	r2,120(r2)
 800699c:	1009883a 	mov	r4,r2
 80069a0:	183ee83a 	callr	r3
	/* After a successful buffer dump, must reset buffer pointers */
	entropy->next_output_byte = dest->next_output_byte;
 80069a4:	e0bffe17 	ldw	r2,-8(fp)
 80069a8:	10c00017 	ldw	r3,0(r2)
 80069ac:	e0bfff17 	ldw	r2,-4(fp)
 80069b0:	10c01c15 	stw	r3,112(r2)
	entropy->free_in_buffer = dest->free_in_buffer;
 80069b4:	e0bffe17 	ldw	r2,-8(fp)
 80069b8:	10c00117 	ldw	r3,4(r2)
 80069bc:	e0bfff17 	ldw	r2,-4(fp)
 80069c0:	10c01d15 	stw	r3,116(r2)
}
 80069c4:	e037883a 	mov	sp,fp
 80069c8:	dfc00117 	ldw	ra,4(sp)
 80069cc:	df000017 	ldw	fp,0(sp)
 80069d0:	dec00204 	addi	sp,sp,8
 80069d4:	f800283a 	ret

080069d8 <emit_bits_s>:

INLINE
	LOCAL(boolean)
	emit_bits_s (working_state * state, unsigned int code, int size)
	/* Emit some bits; return TRUE if successful, FALSE if must suspend */
{
 80069d8:	defff804 	addi	sp,sp,-32
 80069dc:	dfc00715 	stw	ra,28(sp)
 80069e0:	df000615 	stw	fp,24(sp)
 80069e4:	dc400515 	stw	r17,20(sp)
 80069e8:	dc000415 	stw	r16,16(sp)
 80069ec:	df000404 	addi	fp,sp,16
 80069f0:	e13ffd15 	stw	r4,-12(fp)
 80069f4:	e17ffe15 	stw	r5,-8(fp)
 80069f8:	e1bfff15 	stw	r6,-4(fp)
	/* This routine is heavily used, so it's worth coding tightly. */
	register INT32 put_buffer = (INT32) code;
 80069fc:	e43ffe17 	ldw	r16,-8(fp)
	register int put_bits = state->cur.put_bits;
 8006a00:	e0bffd17 	ldw	r2,-12(fp)
 8006a04:	14400317 	ldw	r17,12(r2)

	/* if size is 0, caller used an invalid Huffman table entry */
	if (size == 0)
 8006a08:	e0bfff17 	ldw	r2,-4(fp)
 8006a0c:	10000d1e 	bne	r2,zero,8006a44 <emit_bits_s+0x6c>
		ERREXIT(state->cinfo, JERR_HUFF_MISSING_CODE);
 8006a10:	e0bffd17 	ldw	r2,-12(fp)
 8006a14:	10800817 	ldw	r2,32(r2)
 8006a18:	10800017 	ldw	r2,0(r2)
 8006a1c:	00c00a44 	movi	r3,41
 8006a20:	10c00515 	stw	r3,20(r2)
 8006a24:	e0bffd17 	ldw	r2,-12(fp)
 8006a28:	10800817 	ldw	r2,32(r2)
 8006a2c:	10800017 	ldw	r2,0(r2)
 8006a30:	10c00017 	ldw	r3,0(r2)
 8006a34:	e0bffd17 	ldw	r2,-12(fp)
 8006a38:	10800817 	ldw	r2,32(r2)
 8006a3c:	1009883a 	mov	r4,r2
 8006a40:	183ee83a 	callr	r3

	put_buffer &= (((INT32) 1)<<size) - 1; /* mask off any extra bits in code */
 8006a44:	00c00044 	movi	r3,1
 8006a48:	e0bfff17 	ldw	r2,-4(fp)
 8006a4c:	1884983a 	sll	r2,r3,r2
 8006a50:	10bfffc4 	addi	r2,r2,-1
 8006a54:	80a0703a 	and	r16,r16,r2

	put_bits += size;		/* new number of bits in buffer */
 8006a58:	e0bfff17 	ldw	r2,-4(fp)
 8006a5c:	88a3883a 	add	r17,r17,r2

	put_buffer <<= 24 - put_bits; /* align incoming bits */
 8006a60:	00800604 	movi	r2,24
 8006a64:	1445c83a 	sub	r2,r2,r17
 8006a68:	80a0983a 	sll	r16,r16,r2

	put_buffer |= state->cur.put_buffer; /* and merge with old buffer contents */
 8006a6c:	e0bffd17 	ldw	r2,-12(fp)
 8006a70:	10800217 	ldw	r2,8(r2)
 8006a74:	80a0b03a 	or	r16,r16,r2

	while (put_bits >= 8) {
 8006a78:	00003106 	br	8006b40 <emit_bits_s+0x168>
		int c = (int) ((put_buffer >> 16) & 0xFF);
 8006a7c:	8005d43a 	srai	r2,r16,16
 8006a80:	10803fcc 	andi	r2,r2,255
 8006a84:	e0bffc15 	stw	r2,-16(fp)

		emit_byte_s(state, c, return FALSE);
 8006a88:	e0bffd17 	ldw	r2,-12(fp)
 8006a8c:	10800017 	ldw	r2,0(r2)
 8006a90:	e0fffc17 	ldw	r3,-16(fp)
 8006a94:	10c00005 	stb	r3,0(r2)
 8006a98:	10c00044 	addi	r3,r2,1
 8006a9c:	e0bffd17 	ldw	r2,-12(fp)
 8006aa0:	10c00015 	stw	r3,0(r2)
 8006aa4:	e0bffd17 	ldw	r2,-12(fp)
 8006aa8:	10800117 	ldw	r2,4(r2)
 8006aac:	10ffffc4 	addi	r3,r2,-1
 8006ab0:	e0bffd17 	ldw	r2,-12(fp)
 8006ab4:	10c00115 	stw	r3,4(r2)
 8006ab8:	e0bffd17 	ldw	r2,-12(fp)
 8006abc:	10800117 	ldw	r2,4(r2)
 8006ac0:	1000061e 	bne	r2,zero,8006adc <emit_bits_s+0x104>
 8006ac4:	e13ffd17 	ldw	r4,-12(fp)
 8006ac8:	80068a80 	call	80068a8 <dump_buffer_s>
 8006acc:	10803fcc 	andi	r2,r2,255
 8006ad0:	1000021e 	bne	r2,zero,8006adc <emit_bits_s+0x104>
 8006ad4:	0005883a 	mov	r2,zero
 8006ad8:	00002006 	br	8006b5c <emit_bits_s+0x184>
		if (c == 0xFF) {		/* need to stuff a zero byte? */
 8006adc:	e0bffc17 	ldw	r2,-16(fp)
 8006ae0:	10803fd8 	cmpnei	r2,r2,255
 8006ae4:	1000141e 	bne	r2,zero,8006b38 <emit_bits_s+0x160>
			emit_byte_s(state, 0, return FALSE);
 8006ae8:	e0bffd17 	ldw	r2,-12(fp)
 8006aec:	10800017 	ldw	r2,0(r2)
 8006af0:	10000005 	stb	zero,0(r2)
 8006af4:	10c00044 	addi	r3,r2,1
 8006af8:	e0bffd17 	ldw	r2,-12(fp)
 8006afc:	10c00015 	stw	r3,0(r2)
 8006b00:	e0bffd17 	ldw	r2,-12(fp)
 8006b04:	10800117 	ldw	r2,4(r2)
 8006b08:	10ffffc4 	addi	r3,r2,-1
 8006b0c:	e0bffd17 	ldw	r2,-12(fp)
 8006b10:	10c00115 	stw	r3,4(r2)
 8006b14:	e0bffd17 	ldw	r2,-12(fp)
 8006b18:	10800117 	ldw	r2,4(r2)
 8006b1c:	1000061e 	bne	r2,zero,8006b38 <emit_bits_s+0x160>
 8006b20:	e13ffd17 	ldw	r4,-12(fp)
 8006b24:	80068a80 	call	80068a8 <dump_buffer_s>
 8006b28:	10803fcc 	andi	r2,r2,255
 8006b2c:	1000021e 	bne	r2,zero,8006b38 <emit_bits_s+0x160>
 8006b30:	0005883a 	mov	r2,zero
 8006b34:	00000906 	br	8006b5c <emit_bits_s+0x184>
		}
		put_buffer <<= 8;
 8006b38:	8020923a 	slli	r16,r16,8
		put_bits -= 8;
 8006b3c:	8c7ffe04 	addi	r17,r17,-8

	put_buffer <<= 24 - put_bits; /* align incoming bits */

	put_buffer |= state->cur.put_buffer; /* and merge with old buffer contents */

	while (put_bits >= 8) {
 8006b40:	88800208 	cmpgei	r2,r17,8
 8006b44:	103fcd1e 	bne	r2,zero,8006a7c <emit_bits_s+0xa4>
		}
		put_buffer <<= 8;
		put_bits -= 8;
	}

	state->cur.put_buffer = put_buffer; /* update state variables */
 8006b48:	e0bffd17 	ldw	r2,-12(fp)
 8006b4c:	14000215 	stw	r16,8(r2)
	state->cur.put_bits = put_bits;
 8006b50:	e0bffd17 	ldw	r2,-12(fp)
 8006b54:	14400315 	stw	r17,12(r2)

	return TRUE;
 8006b58:	00800044 	movi	r2,1
}
 8006b5c:	e037883a 	mov	sp,fp
 8006b60:	dfc00317 	ldw	ra,12(sp)
 8006b64:	df000217 	ldw	fp,8(sp)
 8006b68:	dc400117 	ldw	r17,4(sp)
 8006b6c:	dc000017 	ldw	r16,0(sp)
 8006b70:	dec00404 	addi	sp,sp,16
 8006b74:	f800283a 	ret

08006b78 <emit_bits_e>:

INLINE
	LOCAL(void)
	emit_bits_e (huff_entropy_ptr entropy, unsigned int code, int size)
	/* Emit some bits, unless we are in gather mode */
{
 8006b78:	defff804 	addi	sp,sp,-32
 8006b7c:	dfc00715 	stw	ra,28(sp)
 8006b80:	df000615 	stw	fp,24(sp)
 8006b84:	dc400515 	stw	r17,20(sp)
 8006b88:	dc000415 	stw	r16,16(sp)
 8006b8c:	df000404 	addi	fp,sp,16
 8006b90:	e13ffd15 	stw	r4,-12(fp)
 8006b94:	e17ffe15 	stw	r5,-8(fp)
 8006b98:	e1bfff15 	stw	r6,-4(fp)
	/* This routine is heavily used, so it's worth coding tightly. */
	register INT32 put_buffer = (INT32) code;
 8006b9c:	e43ffe17 	ldw	r16,-8(fp)
	register int put_bits = entropy->saved.put_bits;
 8006ba0:	e0bffd17 	ldw	r2,-12(fp)
 8006ba4:	14400417 	ldw	r17,16(r2)

	/* if size is 0, caller used an invalid Huffman table entry */
	if (size == 0)
 8006ba8:	e0bfff17 	ldw	r2,-4(fp)
 8006bac:	10000d1e 	bne	r2,zero,8006be4 <emit_bits_e+0x6c>
		ERREXIT(entropy->cinfo, JERR_HUFF_MISSING_CODE);
 8006bb0:	e0bffd17 	ldw	r2,-12(fp)
 8006bb4:	10801e17 	ldw	r2,120(r2)
 8006bb8:	10800017 	ldw	r2,0(r2)
 8006bbc:	00c00a44 	movi	r3,41
 8006bc0:	10c00515 	stw	r3,20(r2)
 8006bc4:	e0bffd17 	ldw	r2,-12(fp)
 8006bc8:	10801e17 	ldw	r2,120(r2)
 8006bcc:	10800017 	ldw	r2,0(r2)
 8006bd0:	10c00017 	ldw	r3,0(r2)
 8006bd4:	e0bffd17 	ldw	r2,-12(fp)
 8006bd8:	10801e17 	ldw	r2,120(r2)
 8006bdc:	1009883a 	mov	r4,r2
 8006be0:	183ee83a 	callr	r3

	if (entropy->gather_statistics)
 8006be4:	e0bffd17 	ldw	r2,-12(fp)
 8006be8:	10801b03 	ldbu	r2,108(r2)
 8006bec:	10803fcc 	andi	r2,r2,255
 8006bf0:	10003e1e 	bne	r2,zero,8006cec <emit_bits_e+0x174>
		return;			/* do nothing if we're only getting stats */

	put_buffer &= (((INT32) 1)<<size) - 1; /* mask off any extra bits in code */
 8006bf4:	00c00044 	movi	r3,1
 8006bf8:	e0bfff17 	ldw	r2,-4(fp)
 8006bfc:	1884983a 	sll	r2,r3,r2
 8006c00:	10bfffc4 	addi	r2,r2,-1
 8006c04:	80a0703a 	and	r16,r16,r2

	put_bits += size;		/* new number of bits in buffer */
 8006c08:	e0bfff17 	ldw	r2,-4(fp)
 8006c0c:	88a3883a 	add	r17,r17,r2

	put_buffer <<= 24 - put_bits; /* align incoming bits */
 8006c10:	00800604 	movi	r2,24
 8006c14:	1445c83a 	sub	r2,r2,r17
 8006c18:	80a0983a 	sll	r16,r16,r2

	/* and merge with old buffer contents */
	put_buffer |= entropy->saved.put_buffer;
 8006c1c:	e0bffd17 	ldw	r2,-12(fp)
 8006c20:	10800317 	ldw	r2,12(r2)
 8006c24:	80a0b03a 	or	r16,r16,r2

	while (put_bits >= 8) {
 8006c28:	00002906 	br	8006cd0 <emit_bits_e+0x158>
		int c = (int) ((put_buffer >> 16) & 0xFF);
 8006c2c:	8005d43a 	srai	r2,r16,16
 8006c30:	10803fcc 	andi	r2,r2,255
 8006c34:	e0bffc15 	stw	r2,-16(fp)

		emit_byte_e(entropy, c);
 8006c38:	e0bffd17 	ldw	r2,-12(fp)
 8006c3c:	10801c17 	ldw	r2,112(r2)
 8006c40:	e0fffc17 	ldw	r3,-16(fp)
 8006c44:	10c00005 	stb	r3,0(r2)
 8006c48:	10c00044 	addi	r3,r2,1
 8006c4c:	e0bffd17 	ldw	r2,-12(fp)
 8006c50:	10c01c15 	stw	r3,112(r2)
 8006c54:	e0bffd17 	ldw	r2,-12(fp)
 8006c58:	10801d17 	ldw	r2,116(r2)
 8006c5c:	10ffffc4 	addi	r3,r2,-1
 8006c60:	e0bffd17 	ldw	r2,-12(fp)
 8006c64:	10c01d15 	stw	r3,116(r2)
 8006c68:	e0bffd17 	ldw	r2,-12(fp)
 8006c6c:	10801d17 	ldw	r2,116(r2)
 8006c70:	1000021e 	bne	r2,zero,8006c7c <emit_bits_e+0x104>
 8006c74:	e13ffd17 	ldw	r4,-12(fp)
 8006c78:	800692c0 	call	800692c <dump_buffer_e>
		if (c == 0xFF) {		/* need to stuff a zero byte? */
 8006c7c:	e0bffc17 	ldw	r2,-16(fp)
 8006c80:	10803fd8 	cmpnei	r2,r2,255
 8006c84:	1000101e 	bne	r2,zero,8006cc8 <emit_bits_e+0x150>
			emit_byte_e(entropy, 0);
 8006c88:	e0bffd17 	ldw	r2,-12(fp)
 8006c8c:	10801c17 	ldw	r2,112(r2)
 8006c90:	10000005 	stb	zero,0(r2)
 8006c94:	10c00044 	addi	r3,r2,1
 8006c98:	e0bffd17 	ldw	r2,-12(fp)
 8006c9c:	10c01c15 	stw	r3,112(r2)
 8006ca0:	e0bffd17 	ldw	r2,-12(fp)
 8006ca4:	10801d17 	ldw	r2,116(r2)
 8006ca8:	10ffffc4 	addi	r3,r2,-1
 8006cac:	e0bffd17 	ldw	r2,-12(fp)
 8006cb0:	10c01d15 	stw	r3,116(r2)
 8006cb4:	e0bffd17 	ldw	r2,-12(fp)
 8006cb8:	10801d17 	ldw	r2,116(r2)
 8006cbc:	1000021e 	bne	r2,zero,8006cc8 <emit_bits_e+0x150>
 8006cc0:	e13ffd17 	ldw	r4,-12(fp)
 8006cc4:	800692c0 	call	800692c <dump_buffer_e>
		}
		put_buffer <<= 8;
 8006cc8:	8020923a 	slli	r16,r16,8
		put_bits -= 8;
 8006ccc:	8c7ffe04 	addi	r17,r17,-8
	put_buffer <<= 24 - put_bits; /* align incoming bits */

	/* and merge with old buffer contents */
	put_buffer |= entropy->saved.put_buffer;

	while (put_bits >= 8) {
 8006cd0:	88800208 	cmpgei	r2,r17,8
 8006cd4:	103fd51e 	bne	r2,zero,8006c2c <emit_bits_e+0xb4>
		}
		put_buffer <<= 8;
		put_bits -= 8;
	}

	entropy->saved.put_buffer = put_buffer; /* update variables */
 8006cd8:	e0bffd17 	ldw	r2,-12(fp)
 8006cdc:	14000315 	stw	r16,12(r2)
	entropy->saved.put_bits = put_bits;
 8006ce0:	e0bffd17 	ldw	r2,-12(fp)
 8006ce4:	14400415 	stw	r17,16(r2)
 8006ce8:	00000106 	br	8006cf0 <emit_bits_e+0x178>
	/* if size is 0, caller used an invalid Huffman table entry */
	if (size == 0)
		ERREXIT(entropy->cinfo, JERR_HUFF_MISSING_CODE);

	if (entropy->gather_statistics)
		return;			/* do nothing if we're only getting stats */
 8006cec:	0001883a 	nop
		put_bits -= 8;
	}

	entropy->saved.put_buffer = put_buffer; /* update variables */
	entropy->saved.put_bits = put_bits;
}
 8006cf0:	e037883a 	mov	sp,fp
 8006cf4:	dfc00317 	ldw	ra,12(sp)
 8006cf8:	df000217 	ldw	fp,8(sp)
 8006cfc:	dc400117 	ldw	r17,4(sp)
 8006d00:	dc000017 	ldw	r16,0(sp)
 8006d04:	dec00404 	addi	sp,sp,16
 8006d08:	f800283a 	ret

08006d0c <flush_bits_s>:


LOCAL(boolean)
	flush_bits_s (working_state * state)
{
 8006d0c:	defffd04 	addi	sp,sp,-12
 8006d10:	dfc00215 	stw	ra,8(sp)
 8006d14:	df000115 	stw	fp,4(sp)
 8006d18:	df000104 	addi	fp,sp,4
 8006d1c:	e13fff15 	stw	r4,-4(fp)
	if (! emit_bits_s(state, 0x7F, 7)) /* fill any partial byte with ones */
 8006d20:	e13fff17 	ldw	r4,-4(fp)
 8006d24:	01401fc4 	movi	r5,127
 8006d28:	018001c4 	movi	r6,7
 8006d2c:	80069d80 	call	80069d8 <emit_bits_s>
 8006d30:	10803fcc 	andi	r2,r2,255
 8006d34:	1000021e 	bne	r2,zero,8006d40 <flush_bits_s+0x34>
		return FALSE;
 8006d38:	0005883a 	mov	r2,zero
 8006d3c:	00000506 	br	8006d54 <flush_bits_s+0x48>
	state->cur.put_buffer = 0;	     /* and reset bit-buffer to empty */
 8006d40:	e0bfff17 	ldw	r2,-4(fp)
 8006d44:	10000215 	stw	zero,8(r2)
	state->cur.put_bits = 0;
 8006d48:	e0bfff17 	ldw	r2,-4(fp)
 8006d4c:	10000315 	stw	zero,12(r2)
	return TRUE;
 8006d50:	00800044 	movi	r2,1
}
 8006d54:	e037883a 	mov	sp,fp
 8006d58:	dfc00117 	ldw	ra,4(sp)
 8006d5c:	df000017 	ldw	fp,0(sp)
 8006d60:	dec00204 	addi	sp,sp,8
 8006d64:	f800283a 	ret

08006d68 <flush_bits_e>:


LOCAL(void)
	flush_bits_e (huff_entropy_ptr entropy)
{
 8006d68:	defffd04 	addi	sp,sp,-12
 8006d6c:	dfc00215 	stw	ra,8(sp)
 8006d70:	df000115 	stw	fp,4(sp)
 8006d74:	df000104 	addi	fp,sp,4
 8006d78:	e13fff15 	stw	r4,-4(fp)
	emit_bits_e(entropy, 0x7F, 7); /* fill any partial byte with ones */
 8006d7c:	e13fff17 	ldw	r4,-4(fp)
 8006d80:	01401fc4 	movi	r5,127
 8006d84:	018001c4 	movi	r6,7
 8006d88:	8006b780 	call	8006b78 <emit_bits_e>
	entropy->saved.put_buffer = 0; /* and reset bit-buffer to empty */
 8006d8c:	e0bfff17 	ldw	r2,-4(fp)
 8006d90:	10000315 	stw	zero,12(r2)
	entropy->saved.put_bits = 0;
 8006d94:	e0bfff17 	ldw	r2,-4(fp)
 8006d98:	10000415 	stw	zero,16(r2)
}
 8006d9c:	e037883a 	mov	sp,fp
 8006da0:	dfc00117 	ldw	ra,4(sp)
 8006da4:	df000017 	ldw	fp,0(sp)
 8006da8:	dec00204 	addi	sp,sp,8
 8006dac:	f800283a 	ret

08006db0 <emit_dc_symbol>:
*/

INLINE
	LOCAL(void)
	emit_dc_symbol (huff_entropy_ptr entropy, int tbl_no, int symbol)
{
 8006db0:	defffa04 	addi	sp,sp,-24
 8006db4:	dfc00515 	stw	ra,20(sp)
 8006db8:	df000415 	stw	fp,16(sp)
 8006dbc:	df000404 	addi	fp,sp,16
 8006dc0:	e13ffd15 	stw	r4,-12(fp)
 8006dc4:	e17ffe15 	stw	r5,-8(fp)
 8006dc8:	e1bfff15 	stw	r6,-4(fp)
	if (entropy->gather_statistics)
 8006dcc:	e0bffd17 	ldw	r2,-12(fp)
 8006dd0:	10801b03 	ldbu	r2,108(r2)
 8006dd4:	10803fcc 	andi	r2,r2,255
 8006dd8:	10000f26 	beq	r2,zero,8006e18 <emit_dc_symbol+0x68>
		entropy->dc_count_ptrs[tbl_no][symbol]++;
 8006ddc:	e0fffd17 	ldw	r3,-12(fp)
 8006de0:	e0bffe17 	ldw	r2,-8(fp)
 8006de4:	108004c4 	addi	r2,r2,19
 8006de8:	1085883a 	add	r2,r2,r2
 8006dec:	1085883a 	add	r2,r2,r2
 8006df0:	1885883a 	add	r2,r3,r2
 8006df4:	10c00017 	ldw	r3,0(r2)
 8006df8:	e0bfff17 	ldw	r2,-4(fp)
 8006dfc:	1085883a 	add	r2,r2,r2
 8006e00:	1085883a 	add	r2,r2,r2
 8006e04:	1885883a 	add	r2,r3,r2
 8006e08:	10c00017 	ldw	r3,0(r2)
 8006e0c:	18c00044 	addi	r3,r3,1
 8006e10:	10c00015 	stw	r3,0(r2)
 8006e14:	00001a06 	br	8006e80 <emit_dc_symbol+0xd0>
	else {
		c_derived_tbl * tbl = entropy->dc_derived_tbls[tbl_no];
 8006e18:	e0fffd17 	ldw	r3,-12(fp)
 8006e1c:	e0bffe17 	ldw	r2,-8(fp)
 8006e20:	108002c4 	addi	r2,r2,11
 8006e24:	1085883a 	add	r2,r2,r2
 8006e28:	1085883a 	add	r2,r2,r2
 8006e2c:	1885883a 	add	r2,r3,r2
 8006e30:	10800017 	ldw	r2,0(r2)
 8006e34:	e0bffc15 	stw	r2,-16(fp)
		emit_bits_e(entropy, tbl->ehufco[symbol], tbl->ehufsi[symbol]);
 8006e38:	e0fffc17 	ldw	r3,-16(fp)
 8006e3c:	e0bfff17 	ldw	r2,-4(fp)
 8006e40:	1085883a 	add	r2,r2,r2
 8006e44:	1085883a 	add	r2,r2,r2
 8006e48:	1885883a 	add	r2,r3,r2
 8006e4c:	10c00017 	ldw	r3,0(r2)
 8006e50:	e13ffc17 	ldw	r4,-16(fp)
 8006e54:	e0bfff17 	ldw	r2,-4(fp)
 8006e58:	2085883a 	add	r2,r4,r2
 8006e5c:	10810004 	addi	r2,r2,1024
 8006e60:	10800003 	ldbu	r2,0(r2)
 8006e64:	10803fcc 	andi	r2,r2,255
 8006e68:	1080201c 	xori	r2,r2,128
 8006e6c:	10bfe004 	addi	r2,r2,-128
 8006e70:	e13ffd17 	ldw	r4,-12(fp)
 8006e74:	180b883a 	mov	r5,r3
 8006e78:	100d883a 	mov	r6,r2
 8006e7c:	8006b780 	call	8006b78 <emit_bits_e>
	}
}
 8006e80:	e037883a 	mov	sp,fp
 8006e84:	dfc00117 	ldw	ra,4(sp)
 8006e88:	df000017 	ldw	fp,0(sp)
 8006e8c:	dec00204 	addi	sp,sp,8
 8006e90:	f800283a 	ret

08006e94 <emit_ac_symbol>:


INLINE
	LOCAL(void)
	emit_ac_symbol (huff_entropy_ptr entropy, int tbl_no, int symbol)
{
 8006e94:	defffa04 	addi	sp,sp,-24
 8006e98:	dfc00515 	stw	ra,20(sp)
 8006e9c:	df000415 	stw	fp,16(sp)
 8006ea0:	df000404 	addi	fp,sp,16
 8006ea4:	e13ffd15 	stw	r4,-12(fp)
 8006ea8:	e17ffe15 	stw	r5,-8(fp)
 8006eac:	e1bfff15 	stw	r6,-4(fp)
	if (entropy->gather_statistics)
 8006eb0:	e0bffd17 	ldw	r2,-12(fp)
 8006eb4:	10801b03 	ldbu	r2,108(r2)
 8006eb8:	10803fcc 	andi	r2,r2,255
 8006ebc:	10000f26 	beq	r2,zero,8006efc <emit_ac_symbol+0x68>
		entropy->ac_count_ptrs[tbl_no][symbol]++;
 8006ec0:	e0fffd17 	ldw	r3,-12(fp)
 8006ec4:	e0bffe17 	ldw	r2,-8(fp)
 8006ec8:	108005c4 	addi	r2,r2,23
 8006ecc:	1085883a 	add	r2,r2,r2
 8006ed0:	1085883a 	add	r2,r2,r2
 8006ed4:	1885883a 	add	r2,r3,r2
 8006ed8:	10c00017 	ldw	r3,0(r2)
 8006edc:	e0bfff17 	ldw	r2,-4(fp)
 8006ee0:	1085883a 	add	r2,r2,r2
 8006ee4:	1085883a 	add	r2,r2,r2
 8006ee8:	1885883a 	add	r2,r3,r2
 8006eec:	10c00017 	ldw	r3,0(r2)
 8006ef0:	18c00044 	addi	r3,r3,1
 8006ef4:	10c00015 	stw	r3,0(r2)
 8006ef8:	00001a06 	br	8006f64 <emit_ac_symbol+0xd0>
	else {
		c_derived_tbl * tbl = entropy->ac_derived_tbls[tbl_no];
 8006efc:	e0fffd17 	ldw	r3,-12(fp)
 8006f00:	e0bffe17 	ldw	r2,-8(fp)
 8006f04:	108003c4 	addi	r2,r2,15
 8006f08:	1085883a 	add	r2,r2,r2
 8006f0c:	1085883a 	add	r2,r2,r2
 8006f10:	1885883a 	add	r2,r3,r2
 8006f14:	10800017 	ldw	r2,0(r2)
 8006f18:	e0bffc15 	stw	r2,-16(fp)
		emit_bits_e(entropy, tbl->ehufco[symbol], tbl->ehufsi[symbol]);
 8006f1c:	e0fffc17 	ldw	r3,-16(fp)
 8006f20:	e0bfff17 	ldw	r2,-4(fp)
 8006f24:	1085883a 	add	r2,r2,r2
 8006f28:	1085883a 	add	r2,r2,r2
 8006f2c:	1885883a 	add	r2,r3,r2
 8006f30:	10c00017 	ldw	r3,0(r2)
 8006f34:	e13ffc17 	ldw	r4,-16(fp)
 8006f38:	e0bfff17 	ldw	r2,-4(fp)
 8006f3c:	2085883a 	add	r2,r4,r2
 8006f40:	10810004 	addi	r2,r2,1024
 8006f44:	10800003 	ldbu	r2,0(r2)
 8006f48:	10803fcc 	andi	r2,r2,255
 8006f4c:	1080201c 	xori	r2,r2,128
 8006f50:	10bfe004 	addi	r2,r2,-128
 8006f54:	e13ffd17 	ldw	r4,-12(fp)
 8006f58:	180b883a 	mov	r5,r3
 8006f5c:	100d883a 	mov	r6,r2
 8006f60:	8006b780 	call	8006b78 <emit_bits_e>
	}
}
 8006f64:	e037883a 	mov	sp,fp
 8006f68:	dfc00117 	ldw	ra,4(sp)
 8006f6c:	df000017 	ldw	fp,0(sp)
 8006f70:	dec00204 	addi	sp,sp,8
 8006f74:	f800283a 	ret

08006f78 <emit_buffered_bits>:
*/

LOCAL(void)
	emit_buffered_bits (huff_entropy_ptr entropy, char * bufstart,
	unsigned int nbits)
{
 8006f78:	defffb04 	addi	sp,sp,-20
 8006f7c:	dfc00415 	stw	ra,16(sp)
 8006f80:	df000315 	stw	fp,12(sp)
 8006f84:	df000304 	addi	fp,sp,12
 8006f88:	e13ffd15 	stw	r4,-12(fp)
 8006f8c:	e17ffe15 	stw	r5,-8(fp)
 8006f90:	e1bfff15 	stw	r6,-4(fp)
	if (entropy->gather_statistics)
 8006f94:	e0bffd17 	ldw	r2,-12(fp)
 8006f98:	10801b03 	ldbu	r2,108(r2)
 8006f9c:	10803fcc 	andi	r2,r2,255
 8006fa0:	10001026 	beq	r2,zero,8006fe4 <emit_buffered_bits+0x6c>
		return;			/* no real work */
 8006fa4:	00001106 	br	8006fec <emit_buffered_bits+0x74>

	while (nbits > 0) {
		emit_bits_e(entropy, (unsigned int) (*bufstart), 1);
 8006fa8:	e0bffe17 	ldw	r2,-8(fp)
 8006fac:	10800003 	ldbu	r2,0(r2)
 8006fb0:	10803fcc 	andi	r2,r2,255
 8006fb4:	1080201c 	xori	r2,r2,128
 8006fb8:	10bfe004 	addi	r2,r2,-128
 8006fbc:	e13ffd17 	ldw	r4,-12(fp)
 8006fc0:	100b883a 	mov	r5,r2
 8006fc4:	01800044 	movi	r6,1
 8006fc8:	8006b780 	call	8006b78 <emit_bits_e>
		bufstart++;
 8006fcc:	e0bffe17 	ldw	r2,-8(fp)
 8006fd0:	10800044 	addi	r2,r2,1
 8006fd4:	e0bffe15 	stw	r2,-8(fp)
		nbits--;
 8006fd8:	e0bfff17 	ldw	r2,-4(fp)
 8006fdc:	10bfffc4 	addi	r2,r2,-1
 8006fe0:	e0bfff15 	stw	r2,-4(fp)
	unsigned int nbits)
{
	if (entropy->gather_statistics)
		return;			/* no real work */

	while (nbits > 0) {
 8006fe4:	e0bfff17 	ldw	r2,-4(fp)
 8006fe8:	103fef1e 	bne	r2,zero,8006fa8 <emit_buffered_bits+0x30>
		emit_bits_e(entropy, (unsigned int) (*bufstart), 1);
		bufstart++;
		nbits--;
	}
}
 8006fec:	e037883a 	mov	sp,fp
 8006ff0:	dfc00117 	ldw	ra,4(sp)
 8006ff4:	df000017 	ldw	fp,0(sp)
 8006ff8:	dec00204 	addi	sp,sp,8
 8006ffc:	f800283a 	ret

08007000 <emit_eobrun>:
* Emit any pending EOBRUN symbol.
*/

LOCAL(void)
	emit_eobrun (huff_entropy_ptr entropy)
{
 8007000:	defffb04 	addi	sp,sp,-20
 8007004:	dfc00415 	stw	ra,16(sp)
 8007008:	df000315 	stw	fp,12(sp)
 800700c:	dc400215 	stw	r17,8(sp)
 8007010:	dc000115 	stw	r16,4(sp)
 8007014:	df000104 	addi	fp,sp,4
 8007018:	e13fff15 	stw	r4,-4(fp)
	register int temp, nbits;

	if (entropy->EOBRUN > 0) {	/* if there is any pending EOBRUN */
 800701c:	e0bfff17 	ldw	r2,-4(fp)
 8007020:	10802017 	ldw	r2,128(r2)
 8007024:	10003126 	beq	r2,zero,80070ec <emit_eobrun+0xec>
		temp = entropy->EOBRUN;
 8007028:	e0bfff17 	ldw	r2,-4(fp)
 800702c:	10802017 	ldw	r2,128(r2)
 8007030:	1023883a 	mov	r17,r2
		nbits = 0;
 8007034:	0021883a 	mov	r16,zero
		while ((temp >>= 1))
 8007038:	00000106 	br	8007040 <emit_eobrun+0x40>
			nbits++;
 800703c:	84000044 	addi	r16,r16,1
	register int temp, nbits;

	if (entropy->EOBRUN > 0) {	/* if there is any pending EOBRUN */
		temp = entropy->EOBRUN;
		nbits = 0;
		while ((temp >>= 1))
 8007040:	8823d07a 	srai	r17,r17,1
 8007044:	883ffd1e 	bne	r17,zero,800703c <emit_eobrun+0x3c>
			nbits++;
		/* safety check: shouldn't happen given limited correction-bit buffer */
		if (nbits > 14)
 8007048:	808003d0 	cmplti	r2,r16,15
 800704c:	10000d1e 	bne	r2,zero,8007084 <emit_eobrun+0x84>
			ERREXIT(entropy->cinfo, JERR_HUFF_MISSING_CODE);
 8007050:	e0bfff17 	ldw	r2,-4(fp)
 8007054:	10801e17 	ldw	r2,120(r2)
 8007058:	10800017 	ldw	r2,0(r2)
 800705c:	00c00a44 	movi	r3,41
 8007060:	10c00515 	stw	r3,20(r2)
 8007064:	e0bfff17 	ldw	r2,-4(fp)
 8007068:	10801e17 	ldw	r2,120(r2)
 800706c:	10800017 	ldw	r2,0(r2)
 8007070:	10c00017 	ldw	r3,0(r2)
 8007074:	e0bfff17 	ldw	r2,-4(fp)
 8007078:	10801e17 	ldw	r2,120(r2)
 800707c:	1009883a 	mov	r4,r2
 8007080:	183ee83a 	callr	r3

		emit_ac_symbol(entropy, entropy->ac_tbl_no, nbits << 4);
 8007084:	e0bfff17 	ldw	r2,-4(fp)
 8007088:	10c01f17 	ldw	r3,124(r2)
 800708c:	8004913a 	slli	r2,r16,4
 8007090:	e13fff17 	ldw	r4,-4(fp)
 8007094:	180b883a 	mov	r5,r3
 8007098:	100d883a 	mov	r6,r2
 800709c:	8006e940 	call	8006e94 <emit_ac_symbol>
		if (nbits)
 80070a0:	80000626 	beq	r16,zero,80070bc <emit_eobrun+0xbc>
			emit_bits_e(entropy, entropy->EOBRUN, nbits);
 80070a4:	e0bfff17 	ldw	r2,-4(fp)
 80070a8:	10802017 	ldw	r2,128(r2)
 80070ac:	e13fff17 	ldw	r4,-4(fp)
 80070b0:	100b883a 	mov	r5,r2
 80070b4:	800d883a 	mov	r6,r16
 80070b8:	8006b780 	call	8006b78 <emit_bits_e>

		entropy->EOBRUN = 0;
 80070bc:	e0bfff17 	ldw	r2,-4(fp)
 80070c0:	10002015 	stw	zero,128(r2)

		/* Emit any buffered correction bits */
		emit_buffered_bits(entropy, entropy->bit_buffer, entropy->BE);
 80070c4:	e0bfff17 	ldw	r2,-4(fp)
 80070c8:	10c02217 	ldw	r3,136(r2)
 80070cc:	e0bfff17 	ldw	r2,-4(fp)
 80070d0:	10802117 	ldw	r2,132(r2)
 80070d4:	e13fff17 	ldw	r4,-4(fp)
 80070d8:	180b883a 	mov	r5,r3
 80070dc:	100d883a 	mov	r6,r2
 80070e0:	8006f780 	call	8006f78 <emit_buffered_bits>
		entropy->BE = 0;
 80070e4:	e0bfff17 	ldw	r2,-4(fp)
 80070e8:	10002115 	stw	zero,132(r2)
	}
}
 80070ec:	e037883a 	mov	sp,fp
 80070f0:	dfc00317 	ldw	ra,12(sp)
 80070f4:	df000217 	ldw	fp,8(sp)
 80070f8:	dc400117 	ldw	r17,4(sp)
 80070fc:	dc000017 	ldw	r16,0(sp)
 8007100:	dec00404 	addi	sp,sp,16
 8007104:	f800283a 	ret

08007108 <emit_restart_s>:
* Emit a restart marker & resynchronize predictions.
*/

LOCAL(boolean)
	emit_restart_s (working_state * state, int restart_num)
{
 8007108:	defffb04 	addi	sp,sp,-20
 800710c:	dfc00415 	stw	ra,16(sp)
 8007110:	df000315 	stw	fp,12(sp)
 8007114:	df000304 	addi	fp,sp,12
 8007118:	e13ffe15 	stw	r4,-8(fp)
 800711c:	e17fff15 	stw	r5,-4(fp)
	int ci;

	if (! flush_bits_s(state))
 8007120:	e13ffe17 	ldw	r4,-8(fp)
 8007124:	8006d0c0 	call	8006d0c <flush_bits_s>
 8007128:	10803fcc 	andi	r2,r2,255
 800712c:	1000021e 	bne	r2,zero,8007138 <emit_restart_s+0x30>
		return FALSE;
 8007130:	0005883a 	mov	r2,zero
 8007134:	00003d06 	br	800722c <emit_restart_s+0x124>

	emit_byte_s(state, 0xFF, return FALSE);
 8007138:	e0bffe17 	ldw	r2,-8(fp)
 800713c:	10800017 	ldw	r2,0(r2)
 8007140:	00ffffc4 	movi	r3,-1
 8007144:	10c00005 	stb	r3,0(r2)
 8007148:	10c00044 	addi	r3,r2,1
 800714c:	e0bffe17 	ldw	r2,-8(fp)
 8007150:	10c00015 	stw	r3,0(r2)
 8007154:	e0bffe17 	ldw	r2,-8(fp)
 8007158:	10800117 	ldw	r2,4(r2)
 800715c:	10ffffc4 	addi	r3,r2,-1
 8007160:	e0bffe17 	ldw	r2,-8(fp)
 8007164:	10c00115 	stw	r3,4(r2)
 8007168:	e0bffe17 	ldw	r2,-8(fp)
 800716c:	10800117 	ldw	r2,4(r2)
 8007170:	1000061e 	bne	r2,zero,800718c <emit_restart_s+0x84>
 8007174:	e13ffe17 	ldw	r4,-8(fp)
 8007178:	80068a80 	call	80068a8 <dump_buffer_s>
 800717c:	10803fcc 	andi	r2,r2,255
 8007180:	1000021e 	bne	r2,zero,800718c <emit_restart_s+0x84>
 8007184:	0005883a 	mov	r2,zero
 8007188:	00002806 	br	800722c <emit_restart_s+0x124>
	emit_byte_s(state, JPEG_RST0 + restart_num, return FALSE);
 800718c:	e0bffe17 	ldw	r2,-8(fp)
 8007190:	10800017 	ldw	r2,0(r2)
 8007194:	e0ffff17 	ldw	r3,-4(fp)
 8007198:	18fff404 	addi	r3,r3,-48
 800719c:	10c00005 	stb	r3,0(r2)
 80071a0:	10c00044 	addi	r3,r2,1
 80071a4:	e0bffe17 	ldw	r2,-8(fp)
 80071a8:	10c00015 	stw	r3,0(r2)
 80071ac:	e0bffe17 	ldw	r2,-8(fp)
 80071b0:	10800117 	ldw	r2,4(r2)
 80071b4:	10ffffc4 	addi	r3,r2,-1
 80071b8:	e0bffe17 	ldw	r2,-8(fp)
 80071bc:	10c00115 	stw	r3,4(r2)
 80071c0:	e0bffe17 	ldw	r2,-8(fp)
 80071c4:	10800117 	ldw	r2,4(r2)
 80071c8:	1000061e 	bne	r2,zero,80071e4 <emit_restart_s+0xdc>
 80071cc:	e13ffe17 	ldw	r4,-8(fp)
 80071d0:	80068a80 	call	80068a8 <dump_buffer_s>
 80071d4:	10803fcc 	andi	r2,r2,255
 80071d8:	1000021e 	bne	r2,zero,80071e4 <emit_restart_s+0xdc>
 80071dc:	0005883a 	mov	r2,zero
 80071e0:	00001206 	br	800722c <emit_restart_s+0x124>

	/* Re-initialize DC predictions to 0 */
	for (ci = 0; ci < state->cinfo->comps_in_scan; ci++)
 80071e4:	e03ffd15 	stw	zero,-12(fp)
 80071e8:	00000a06 	br	8007214 <emit_restart_s+0x10c>
		state->cur.last_dc_val[ci] = 0;
 80071ec:	e0fffe17 	ldw	r3,-8(fp)
 80071f0:	e0bffd17 	ldw	r2,-12(fp)
 80071f4:	10800104 	addi	r2,r2,4
 80071f8:	1085883a 	add	r2,r2,r2
 80071fc:	1085883a 	add	r2,r2,r2
 8007200:	1885883a 	add	r2,r3,r2
 8007204:	10000015 	stw	zero,0(r2)

	emit_byte_s(state, 0xFF, return FALSE);
	emit_byte_s(state, JPEG_RST0 + restart_num, return FALSE);

	/* Re-initialize DC predictions to 0 */
	for (ci = 0; ci < state->cinfo->comps_in_scan; ci++)
 8007208:	e0bffd17 	ldw	r2,-12(fp)
 800720c:	10800044 	addi	r2,r2,1
 8007210:	e0bffd15 	stw	r2,-12(fp)
 8007214:	e0bffe17 	ldw	r2,-8(fp)
 8007218:	10800817 	ldw	r2,32(r2)
 800721c:	10804317 	ldw	r2,268(r2)
 8007220:	e0fffd17 	ldw	r3,-12(fp)
 8007224:	18bff116 	blt	r3,r2,80071ec <emit_restart_s+0xe4>
		state->cur.last_dc_val[ci] = 0;

	/* The restart counter is not updated until we successfully write the MCU. */

	return TRUE;
 8007228:	00800044 	movi	r2,1
}
 800722c:	e037883a 	mov	sp,fp
 8007230:	dfc00117 	ldw	ra,4(sp)
 8007234:	df000017 	ldw	fp,0(sp)
 8007238:	dec00204 	addi	sp,sp,8
 800723c:	f800283a 	ret

08007240 <emit_restart_e>:


LOCAL(void)
	emit_restart_e (huff_entropy_ptr entropy, int restart_num)
{
 8007240:	defffb04 	addi	sp,sp,-20
 8007244:	dfc00415 	stw	ra,16(sp)
 8007248:	df000315 	stw	fp,12(sp)
 800724c:	df000304 	addi	fp,sp,12
 8007250:	e13ffe15 	stw	r4,-8(fp)
 8007254:	e17fff15 	stw	r5,-4(fp)
	int ci;

	emit_eobrun(entropy);
 8007258:	e13ffe17 	ldw	r4,-8(fp)
 800725c:	80070000 	call	8007000 <emit_eobrun>

	if (! entropy->gather_statistics) {
 8007260:	e0bffe17 	ldw	r2,-8(fp)
 8007264:	10801b03 	ldbu	r2,108(r2)
 8007268:	10803fcc 	andi	r2,r2,255
 800726c:	1000251e 	bne	r2,zero,8007304 <emit_restart_e+0xc4>
		flush_bits_e(entropy);
 8007270:	e13ffe17 	ldw	r4,-8(fp)
 8007274:	8006d680 	call	8006d68 <flush_bits_e>
		emit_byte_e(entropy, 0xFF);
 8007278:	e0bffe17 	ldw	r2,-8(fp)
 800727c:	10801c17 	ldw	r2,112(r2)
 8007280:	00ffffc4 	movi	r3,-1
 8007284:	10c00005 	stb	r3,0(r2)
 8007288:	10c00044 	addi	r3,r2,1
 800728c:	e0bffe17 	ldw	r2,-8(fp)
 8007290:	10c01c15 	stw	r3,112(r2)
 8007294:	e0bffe17 	ldw	r2,-8(fp)
 8007298:	10801d17 	ldw	r2,116(r2)
 800729c:	10ffffc4 	addi	r3,r2,-1
 80072a0:	e0bffe17 	ldw	r2,-8(fp)
 80072a4:	10c01d15 	stw	r3,116(r2)
 80072a8:	e0bffe17 	ldw	r2,-8(fp)
 80072ac:	10801d17 	ldw	r2,116(r2)
 80072b0:	1000021e 	bne	r2,zero,80072bc <emit_restart_e+0x7c>
 80072b4:	e13ffe17 	ldw	r4,-8(fp)
 80072b8:	800692c0 	call	800692c <dump_buffer_e>
		emit_byte_e(entropy, JPEG_RST0 + restart_num);
 80072bc:	e0bffe17 	ldw	r2,-8(fp)
 80072c0:	10801c17 	ldw	r2,112(r2)
 80072c4:	e0ffff17 	ldw	r3,-4(fp)
 80072c8:	18fff404 	addi	r3,r3,-48
 80072cc:	10c00005 	stb	r3,0(r2)
 80072d0:	10c00044 	addi	r3,r2,1
 80072d4:	e0bffe17 	ldw	r2,-8(fp)
 80072d8:	10c01c15 	stw	r3,112(r2)
 80072dc:	e0bffe17 	ldw	r2,-8(fp)
 80072e0:	10801d17 	ldw	r2,116(r2)
 80072e4:	10ffffc4 	addi	r3,r2,-1
 80072e8:	e0bffe17 	ldw	r2,-8(fp)
 80072ec:	10c01d15 	stw	r3,116(r2)
 80072f0:	e0bffe17 	ldw	r2,-8(fp)
 80072f4:	10801d17 	ldw	r2,116(r2)
 80072f8:	1000021e 	bne	r2,zero,8007304 <emit_restart_e+0xc4>
 80072fc:	e13ffe17 	ldw	r4,-8(fp)
 8007300:	800692c0 	call	800692c <dump_buffer_e>
	}

	if (entropy->cinfo->Ss == 0) {
 8007304:	e0bffe17 	ldw	r2,-8(fp)
 8007308:	10801e17 	ldw	r2,120(r2)
 800730c:	10805517 	ldw	r2,340(r2)
 8007310:	1000121e 	bne	r2,zero,800735c <emit_restart_e+0x11c>
		/* Re-initialize DC predictions to 0 */
		for (ci = 0; ci < entropy->cinfo->comps_in_scan; ci++)
 8007314:	e03ffd15 	stw	zero,-12(fp)
 8007318:	00000a06 	br	8007344 <emit_restart_e+0x104>
			entropy->saved.last_dc_val[ci] = 0;
 800731c:	e0fffe17 	ldw	r3,-8(fp)
 8007320:	e0bffd17 	ldw	r2,-12(fp)
 8007324:	10800144 	addi	r2,r2,5
 8007328:	1085883a 	add	r2,r2,r2
 800732c:	1085883a 	add	r2,r2,r2
 8007330:	1885883a 	add	r2,r3,r2
 8007334:	10000015 	stw	zero,0(r2)
		emit_byte_e(entropy, JPEG_RST0 + restart_num);
	}

	if (entropy->cinfo->Ss == 0) {
		/* Re-initialize DC predictions to 0 */
		for (ci = 0; ci < entropy->cinfo->comps_in_scan; ci++)
 8007338:	e0bffd17 	ldw	r2,-12(fp)
 800733c:	10800044 	addi	r2,r2,1
 8007340:	e0bffd15 	stw	r2,-12(fp)
 8007344:	e0bffe17 	ldw	r2,-8(fp)
 8007348:	10801e17 	ldw	r2,120(r2)
 800734c:	10804317 	ldw	r2,268(r2)
 8007350:	e0fffd17 	ldw	r3,-12(fp)
 8007354:	18bff116 	blt	r3,r2,800731c <emit_restart_e+0xdc>
 8007358:	00000406 	br	800736c <emit_restart_e+0x12c>
			entropy->saved.last_dc_val[ci] = 0;
	} else {
		/* Re-initialize all AC-related fields to 0 */
		entropy->EOBRUN = 0;
 800735c:	e0bffe17 	ldw	r2,-8(fp)
 8007360:	10002015 	stw	zero,128(r2)
		entropy->BE = 0;
 8007364:	e0bffe17 	ldw	r2,-8(fp)
 8007368:	10002115 	stw	zero,132(r2)
	}
}
 800736c:	e037883a 	mov	sp,fp
 8007370:	dfc00117 	ldw	ra,4(sp)
 8007374:	df000017 	ldw	fp,0(sp)
 8007378:	dec00204 	addi	sp,sp,8
 800737c:	f800283a 	ret

08007380 <encode_mcu_DC_first>:
* or first pass of successive approximation).
*/

METHODDEF(boolean)
	encode_mcu_DC_first (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
{
 8007380:	defff304 	addi	sp,sp,-52
 8007384:	dfc00c15 	stw	ra,48(sp)
 8007388:	df000b15 	stw	fp,44(sp)
 800738c:	dc800a15 	stw	r18,40(sp)
 8007390:	dc400915 	stw	r17,36(sp)
 8007394:	dc000815 	stw	r16,32(sp)
 8007398:	df000804 	addi	fp,sp,32
 800739c:	e13ffe15 	stw	r4,-8(fp)
 80073a0:	e17fff15 	stw	r5,-4(fp)
	huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 80073a4:	e0bffe17 	ldw	r2,-8(fp)
 80073a8:	10806417 	ldw	r2,400(r2)
 80073ac:	e0bff915 	stw	r2,-28(fp)
	register int temp, temp2;
	register int nbits;
	int blkn, ci;
	int Al = cinfo->Al;
 80073b0:	e0bffe17 	ldw	r2,-8(fp)
 80073b4:	10805817 	ldw	r2,352(r2)
 80073b8:	e0bffa15 	stw	r2,-24(fp)
	JBLOCKROW block;
	jpeg_component_info * compptr;
	ISHIFT_TEMPS

		entropy->next_output_byte = cinfo->dest->next_output_byte;
 80073bc:	e0bffe17 	ldw	r2,-8(fp)
 80073c0:	10800617 	ldw	r2,24(r2)
 80073c4:	10c00017 	ldw	r3,0(r2)
 80073c8:	e0bff917 	ldw	r2,-28(fp)
 80073cc:	10c01c15 	stw	r3,112(r2)
	entropy->free_in_buffer = cinfo->dest->free_in_buffer;
 80073d0:	e0bffe17 	ldw	r2,-8(fp)
 80073d4:	10800617 	ldw	r2,24(r2)
 80073d8:	10c00117 	ldw	r3,4(r2)
 80073dc:	e0bff917 	ldw	r2,-28(fp)
 80073e0:	10c01d15 	stw	r3,116(r2)

	/* Emit restart marker if needed */
	if (cinfo->restart_interval)
 80073e4:	e0bffe17 	ldw	r2,-8(fp)
 80073e8:	10803717 	ldw	r2,220(r2)
 80073ec:	10000826 	beq	r2,zero,8007410 <encode_mcu_DC_first+0x90>
		if (entropy->restarts_to_go == 0)
 80073f0:	e0bff917 	ldw	r2,-28(fp)
 80073f4:	10800917 	ldw	r2,36(r2)
 80073f8:	1000051e 	bne	r2,zero,8007410 <encode_mcu_DC_first+0x90>
			emit_restart_e(entropy, entropy->next_restart_num);
 80073fc:	e0bff917 	ldw	r2,-28(fp)
 8007400:	10800a17 	ldw	r2,40(r2)
 8007404:	e13ff917 	ldw	r4,-28(fp)
 8007408:	100b883a 	mov	r5,r2
 800740c:	80072400 	call	8007240 <emit_restart_e>

	/* Encode the MCU data blocks */
	for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8007410:	e03ff815 	stw	zero,-32(fp)
 8007414:	00005006 	br	8007558 <encode_mcu_DC_first+0x1d8>
		block = MCU_data[blkn];
 8007418:	e0bff817 	ldw	r2,-32(fp)
 800741c:	1085883a 	add	r2,r2,r2
 8007420:	1085883a 	add	r2,r2,r2
 8007424:	e0ffff17 	ldw	r3,-4(fp)
 8007428:	1885883a 	add	r2,r3,r2
 800742c:	10800017 	ldw	r2,0(r2)
 8007430:	e0bffb15 	stw	r2,-20(fp)
		ci = cinfo->MCU_membership[blkn];
 8007434:	e0fffe17 	ldw	r3,-8(fp)
 8007438:	e0bff817 	ldw	r2,-32(fp)
 800743c:	108012c4 	addi	r2,r2,75
 8007440:	1085883a 	add	r2,r2,r2
 8007444:	1085883a 	add	r2,r2,r2
 8007448:	1885883a 	add	r2,r3,r2
 800744c:	10800017 	ldw	r2,0(r2)
 8007450:	e0bffc15 	stw	r2,-16(fp)
		compptr = cinfo->cur_comp_info[ci];
 8007454:	e0fffe17 	ldw	r3,-8(fp)
 8007458:	e0bffc17 	ldw	r2,-16(fp)
 800745c:	10801104 	addi	r2,r2,68
 8007460:	1085883a 	add	r2,r2,r2
 8007464:	1085883a 	add	r2,r2,r2
 8007468:	1885883a 	add	r2,r3,r2
 800746c:	10800017 	ldw	r2,0(r2)
 8007470:	e0bffd15 	stw	r2,-12(fp)

		/* Compute the DC value after the required point transform by Al.
		* This is simply an arithmetic right shift.
		*/
		temp2 = IRIGHT_SHIFT((int) ((*block)[0]), Al);
 8007474:	e0bffb17 	ldw	r2,-20(fp)
 8007478:	1080000b 	ldhu	r2,0(r2)
 800747c:	10ffffcc 	andi	r3,r2,65535
 8007480:	18e0001c 	xori	r3,r3,32768
 8007484:	18e00004 	addi	r3,r3,-32768
 8007488:	e0bffa17 	ldw	r2,-24(fp)
 800748c:	18a5d83a 	sra	r18,r3,r2

		/* DC differences are figured on the point-transformed values. */
		temp = temp2 - entropy->saved.last_dc_val[ci];
 8007490:	e0fff917 	ldw	r3,-28(fp)
 8007494:	e0bffc17 	ldw	r2,-16(fp)
 8007498:	10800144 	addi	r2,r2,5
 800749c:	1085883a 	add	r2,r2,r2
 80074a0:	1085883a 	add	r2,r2,r2
 80074a4:	1885883a 	add	r2,r3,r2
 80074a8:	10800017 	ldw	r2,0(r2)
 80074ac:	90a1c83a 	sub	r16,r18,r2
		entropy->saved.last_dc_val[ci] = temp2;
 80074b0:	e0fff917 	ldw	r3,-28(fp)
 80074b4:	e0bffc17 	ldw	r2,-16(fp)
 80074b8:	10800144 	addi	r2,r2,5
 80074bc:	1085883a 	add	r2,r2,r2
 80074c0:	1085883a 	add	r2,r2,r2
 80074c4:	1885883a 	add	r2,r3,r2
 80074c8:	14800015 	stw	r18,0(r2)

		/* Encode the DC coefficient difference per section G.1.2.1 */
		temp2 = temp;
 80074cc:	8025883a 	mov	r18,r16
		if (temp < 0) {
 80074d0:	8000020e 	bge	r16,zero,80074dc <encode_mcu_DC_first+0x15c>
			temp = -temp;		/* temp is abs value of input */
 80074d4:	0421c83a 	sub	r16,zero,r16
			/* For a negative input, want temp2 = bitwise complement of abs(input) */
			/* This code assumes we are on a two's complement machine */
			temp2--;
 80074d8:	94bfffc4 	addi	r18,r18,-1
		}

		/* Find the number of bits needed for the magnitude of the coefficient */
		nbits = 0;
 80074dc:	0023883a 	mov	r17,zero
		while (temp) {
 80074e0:	00000206 	br	80074ec <encode_mcu_DC_first+0x16c>
			nbits++;
 80074e4:	8c400044 	addi	r17,r17,1
			temp >>= 1;
 80074e8:	8021d07a 	srai	r16,r16,1
			temp2--;
		}

		/* Find the number of bits needed for the magnitude of the coefficient */
		nbits = 0;
		while (temp) {
 80074ec:	803ffd1e 	bne	r16,zero,80074e4 <encode_mcu_DC_first+0x164>
			temp >>= 1;
		}
		/* Check for out-of-range coefficient values.
		* Since we're encoding a difference, the range limit is twice as much.
		*/
		if (nbits > MAX_COEF_BITS+1)
 80074f0:	88800310 	cmplti	r2,r17,12
 80074f4:	1000091e 	bne	r2,zero,800751c <encode_mcu_DC_first+0x19c>
			ERREXIT(cinfo, JERR_BAD_DCT_COEF);
 80074f8:	e0bffe17 	ldw	r2,-8(fp)
 80074fc:	10800017 	ldw	r2,0(r2)
 8007500:	00c00184 	movi	r3,6
 8007504:	10c00515 	stw	r3,20(r2)
 8007508:	e0bffe17 	ldw	r2,-8(fp)
 800750c:	10800017 	ldw	r2,0(r2)
 8007510:	10800017 	ldw	r2,0(r2)
 8007514:	e13ffe17 	ldw	r4,-8(fp)
 8007518:	103ee83a 	callr	r2

		/* Count/emit the Huffman-coded symbol for the number of bits */
		emit_dc_symbol(entropy, compptr->dc_tbl_no, nbits);
 800751c:	e0bffd17 	ldw	r2,-12(fp)
 8007520:	10800517 	ldw	r2,20(r2)
 8007524:	e13ff917 	ldw	r4,-28(fp)
 8007528:	100b883a 	mov	r5,r2
 800752c:	880d883a 	mov	r6,r17
 8007530:	8006db00 	call	8006db0 <emit_dc_symbol>

		/* Emit that number of bits of the value, if positive, */
		/* or the complement of its magnitude, if negative. */
		if (nbits)			/* emit_bits rejects calls with size 0 */
 8007534:	88000526 	beq	r17,zero,800754c <encode_mcu_DC_first+0x1cc>
			emit_bits_e(entropy, (unsigned int) temp2, nbits);
 8007538:	9005883a 	mov	r2,r18
 800753c:	e13ff917 	ldw	r4,-28(fp)
 8007540:	100b883a 	mov	r5,r2
 8007544:	880d883a 	mov	r6,r17
 8007548:	8006b780 	call	8006b78 <emit_bits_e>
	if (cinfo->restart_interval)
		if (entropy->restarts_to_go == 0)
			emit_restart_e(entropy, entropy->next_restart_num);

	/* Encode the MCU data blocks */
	for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800754c:	e0bff817 	ldw	r2,-32(fp)
 8007550:	10800044 	addi	r2,r2,1
 8007554:	e0bff815 	stw	r2,-32(fp)
 8007558:	e0bffe17 	ldw	r2,-8(fp)
 800755c:	10804a17 	ldw	r2,296(r2)
 8007560:	e0fff817 	ldw	r3,-32(fp)
 8007564:	18bfac16 	blt	r3,r2,8007418 <encode_mcu_DC_first+0x98>
		/* or the complement of its magnitude, if negative. */
		if (nbits)			/* emit_bits rejects calls with size 0 */
			emit_bits_e(entropy, (unsigned int) temp2, nbits);
	}

	cinfo->dest->next_output_byte = entropy->next_output_byte;
 8007568:	e0bffe17 	ldw	r2,-8(fp)
 800756c:	10800617 	ldw	r2,24(r2)
 8007570:	e0fff917 	ldw	r3,-28(fp)
 8007574:	18c01c17 	ldw	r3,112(r3)
 8007578:	10c00015 	stw	r3,0(r2)
	cinfo->dest->free_in_buffer = entropy->free_in_buffer;
 800757c:	e0bffe17 	ldw	r2,-8(fp)
 8007580:	10800617 	ldw	r2,24(r2)
 8007584:	e0fff917 	ldw	r3,-28(fp)
 8007588:	18c01d17 	ldw	r3,116(r3)
 800758c:	10c00115 	stw	r3,4(r2)

	/* Update restart-interval state too */
	if (cinfo->restart_interval) {
 8007590:	e0bffe17 	ldw	r2,-8(fp)
 8007594:	10803717 	ldw	r2,220(r2)
 8007598:	10001626 	beq	r2,zero,80075f4 <encode_mcu_DC_first+0x274>
		if (entropy->restarts_to_go == 0) {
 800759c:	e0bff917 	ldw	r2,-28(fp)
 80075a0:	10800917 	ldw	r2,36(r2)
 80075a4:	10000e1e 	bne	r2,zero,80075e0 <encode_mcu_DC_first+0x260>
			entropy->restarts_to_go = cinfo->restart_interval;
 80075a8:	e0bffe17 	ldw	r2,-8(fp)
 80075ac:	10c03717 	ldw	r3,220(r2)
 80075b0:	e0bff917 	ldw	r2,-28(fp)
 80075b4:	10c00915 	stw	r3,36(r2)
			entropy->next_restart_num++;
 80075b8:	e0bff917 	ldw	r2,-28(fp)
 80075bc:	10800a17 	ldw	r2,40(r2)
 80075c0:	10c00044 	addi	r3,r2,1
 80075c4:	e0bff917 	ldw	r2,-28(fp)
 80075c8:	10c00a15 	stw	r3,40(r2)
			entropy->next_restart_num &= 7;
 80075cc:	e0bff917 	ldw	r2,-28(fp)
 80075d0:	10800a17 	ldw	r2,40(r2)
 80075d4:	10c001cc 	andi	r3,r2,7
 80075d8:	e0bff917 	ldw	r2,-28(fp)
 80075dc:	10c00a15 	stw	r3,40(r2)
		}
		entropy->restarts_to_go--;
 80075e0:	e0bff917 	ldw	r2,-28(fp)
 80075e4:	10800917 	ldw	r2,36(r2)
 80075e8:	10ffffc4 	addi	r3,r2,-1
 80075ec:	e0bff917 	ldw	r2,-28(fp)
 80075f0:	10c00915 	stw	r3,36(r2)
	}

	return TRUE;
 80075f4:	00800044 	movi	r2,1
}
 80075f8:	e037883a 	mov	sp,fp
 80075fc:	dfc00417 	ldw	ra,16(sp)
 8007600:	df000317 	ldw	fp,12(sp)
 8007604:	dc800217 	ldw	r18,8(sp)
 8007608:	dc400117 	ldw	r17,4(sp)
 800760c:	dc000017 	ldw	r16,0(sp)
 8007610:	dec00504 	addi	sp,sp,20
 8007614:	f800283a 	ret

08007618 <encode_mcu_AC_first>:
* or first pass of successive approximation).
*/

METHODDEF(boolean)
	encode_mcu_AC_first (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
{
 8007618:	defff204 	addi	sp,sp,-56
 800761c:	dfc00d15 	stw	ra,52(sp)
 8007620:	df000c15 	stw	fp,48(sp)
 8007624:	dd000b15 	stw	r20,44(sp)
 8007628:	dcc00a15 	stw	r19,40(sp)
 800762c:	dc800915 	stw	r18,36(sp)
 8007630:	dc400815 	stw	r17,32(sp)
 8007634:	dc000715 	stw	r16,28(sp)
 8007638:	df000704 	addi	fp,sp,28
 800763c:	e13ffe15 	stw	r4,-8(fp)
 8007640:	e17fff15 	stw	r5,-4(fp)
	huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 8007644:	e0bffe17 	ldw	r2,-8(fp)
 8007648:	10806417 	ldw	r2,400(r2)
 800764c:	e0bff915 	stw	r2,-28(fp)
	register int r, k;
	int Se, Al;
	const int * natural_order;
	JBLOCKROW block;

	entropy->next_output_byte = cinfo->dest->next_output_byte;
 8007650:	e0bffe17 	ldw	r2,-8(fp)
 8007654:	10800617 	ldw	r2,24(r2)
 8007658:	10c00017 	ldw	r3,0(r2)
 800765c:	e0bff917 	ldw	r2,-28(fp)
 8007660:	10c01c15 	stw	r3,112(r2)
	entropy->free_in_buffer = cinfo->dest->free_in_buffer;
 8007664:	e0bffe17 	ldw	r2,-8(fp)
 8007668:	10800617 	ldw	r2,24(r2)
 800766c:	10c00117 	ldw	r3,4(r2)
 8007670:	e0bff917 	ldw	r2,-28(fp)
 8007674:	10c01d15 	stw	r3,116(r2)

	/* Emit restart marker if needed */
	if (cinfo->restart_interval)
 8007678:	e0bffe17 	ldw	r2,-8(fp)
 800767c:	10803717 	ldw	r2,220(r2)
 8007680:	10000826 	beq	r2,zero,80076a4 <encode_mcu_AC_first+0x8c>
		if (entropy->restarts_to_go == 0)
 8007684:	e0bff917 	ldw	r2,-28(fp)
 8007688:	10800917 	ldw	r2,36(r2)
 800768c:	1000051e 	bne	r2,zero,80076a4 <encode_mcu_AC_first+0x8c>
			emit_restart_e(entropy, entropy->next_restart_num);
 8007690:	e0bff917 	ldw	r2,-28(fp)
 8007694:	10800a17 	ldw	r2,40(r2)
 8007698:	e13ff917 	ldw	r4,-28(fp)
 800769c:	100b883a 	mov	r5,r2
 80076a0:	80072400 	call	8007240 <emit_restart_e>

	Se = cinfo->Se;
 80076a4:	e0bffe17 	ldw	r2,-8(fp)
 80076a8:	10805617 	ldw	r2,344(r2)
 80076ac:	e0bffa15 	stw	r2,-24(fp)
	Al = cinfo->Al;
 80076b0:	e0bffe17 	ldw	r2,-8(fp)
 80076b4:	10805817 	ldw	r2,352(r2)
 80076b8:	e0bffb15 	stw	r2,-20(fp)
	natural_order = cinfo->natural_order;
 80076bc:	e0bffe17 	ldw	r2,-8(fp)
 80076c0:	10805a17 	ldw	r2,360(r2)
 80076c4:	e0bffc15 	stw	r2,-16(fp)

	/* Encode the MCU data block */
	block = MCU_data[0];
 80076c8:	e0bfff17 	ldw	r2,-4(fp)
 80076cc:	10800017 	ldw	r2,0(r2)
 80076d0:	e0bffd15 	stw	r2,-12(fp)

	/* Encode the AC coefficients per section G.1.2.2, fig. G.3 */

	r = 0;			/* r = run length of zeros */
 80076d4:	0023883a 	mov	r17,zero

	for (k = cinfo->Ss; k <= Se; k++) {
 80076d8:	e0bffe17 	ldw	r2,-8(fp)
 80076dc:	14c05517 	ldw	r19,340(r2)
 80076e0:	00004a06 	br	800780c <encode_mcu_AC_first+0x1f4>
		if ((temp = (*block)[natural_order[k]]) == 0) {
 80076e4:	9805883a 	mov	r2,r19
 80076e8:	1085883a 	add	r2,r2,r2
 80076ec:	1085883a 	add	r2,r2,r2
 80076f0:	e0fffc17 	ldw	r3,-16(fp)
 80076f4:	1885883a 	add	r2,r3,r2
 80076f8:	10800017 	ldw	r2,0(r2)
 80076fc:	e0fffd17 	ldw	r3,-12(fp)
 8007700:	1085883a 	add	r2,r2,r2
 8007704:	1885883a 	add	r2,r3,r2
 8007708:	1080000b 	ldhu	r2,0(r2)
 800770c:	143fffcc 	andi	r16,r2,65535
 8007710:	8420001c 	xori	r16,r16,32768
 8007714:	84200004 	addi	r16,r16,-32768
 8007718:	8000021e 	bne	r16,zero,8007724 <encode_mcu_AC_first+0x10c>
			r++;
 800771c:	8c400044 	addi	r17,r17,1
			continue;
 8007720:	00003906 	br	8007808 <encode_mcu_AC_first+0x1f0>
		/* We must apply the point transform by Al.  For AC coefficients this
		* is an integer division with rounding towards 0.  To do this portably
		* in C, we shift after obtaining the absolute value; so the code is
		* interwoven with finding the abs value (temp) and output bits (temp2).
		*/
		if (temp < 0) {
 8007724:	8000050e 	bge	r16,zero,800773c <encode_mcu_AC_first+0x124>
			temp = -temp;		/* temp is abs value of input */
 8007728:	0421c83a 	sub	r16,zero,r16
			temp >>= Al;		/* apply the point transform */
 800772c:	e0bffb17 	ldw	r2,-20(fp)
 8007730:	80a1d83a 	sra	r16,r16,r2
			/* For a negative coef, want temp2 = bitwise complement of abs(coef) */
			temp2 = ~temp;
 8007734:	0428303a 	nor	r20,zero,r16
 8007738:	00000306 	br	8007748 <encode_mcu_AC_first+0x130>
		} else {
			temp >>= Al;		/* apply the point transform */
 800773c:	e0bffb17 	ldw	r2,-20(fp)
 8007740:	80a1d83a 	sra	r16,r16,r2
			temp2 = temp;
 8007744:	8029883a 	mov	r20,r16
		}
		/* Watch out for case that nonzero coef is zero after point transform */
		if (temp == 0) {
 8007748:	8000021e 	bne	r16,zero,8007754 <encode_mcu_AC_first+0x13c>
			r++;
 800774c:	8c400044 	addi	r17,r17,1
			continue;
 8007750:	00002d06 	br	8007808 <encode_mcu_AC_first+0x1f0>
		}

		/* Emit any pending EOBRUN */
		if (entropy->EOBRUN > 0)
 8007754:	e0bff917 	ldw	r2,-28(fp)
 8007758:	10802017 	ldw	r2,128(r2)
 800775c:	10000a26 	beq	r2,zero,8007788 <encode_mcu_AC_first+0x170>
			emit_eobrun(entropy);
 8007760:	e13ff917 	ldw	r4,-28(fp)
 8007764:	80070000 	call	8007000 <emit_eobrun>
		/* if run length > 15, must emit special run-length-16 codes (0xF0) */
		while (r > 15) {
 8007768:	00000706 	br	8007788 <encode_mcu_AC_first+0x170>
			emit_ac_symbol(entropy, entropy->ac_tbl_no, 0xF0);
 800776c:	e0bff917 	ldw	r2,-28(fp)
 8007770:	10801f17 	ldw	r2,124(r2)
 8007774:	e13ff917 	ldw	r4,-28(fp)
 8007778:	100b883a 	mov	r5,r2
 800777c:	01803c04 	movi	r6,240
 8007780:	8006e940 	call	8006e94 <emit_ac_symbol>
			r -= 16;
 8007784:	8c7ffc04 	addi	r17,r17,-16

		/* Emit any pending EOBRUN */
		if (entropy->EOBRUN > 0)
			emit_eobrun(entropy);
		/* if run length > 15, must emit special run-length-16 codes (0xF0) */
		while (r > 15) {
 8007788:	88800408 	cmpgei	r2,r17,16
 800778c:	103ff71e 	bne	r2,zero,800776c <encode_mcu_AC_first+0x154>
			emit_ac_symbol(entropy, entropy->ac_tbl_no, 0xF0);
			r -= 16;
		}

		/* Find the number of bits needed for the magnitude of the coefficient */
		nbits = 1;			/* there must be at least one 1 bit */
 8007790:	04800044 	movi	r18,1
		while ((temp >>= 1))
 8007794:	00000106 	br	800779c <encode_mcu_AC_first+0x184>
			nbits++;
 8007798:	94800044 	addi	r18,r18,1
			r -= 16;
		}

		/* Find the number of bits needed for the magnitude of the coefficient */
		nbits = 1;			/* there must be at least one 1 bit */
		while ((temp >>= 1))
 800779c:	8021d07a 	srai	r16,r16,1
 80077a0:	803ffd1e 	bne	r16,zero,8007798 <encode_mcu_AC_first+0x180>
			nbits++;
		/* Check for out-of-range coefficient values */
		if (nbits > MAX_COEF_BITS)
 80077a4:	908002d0 	cmplti	r2,r18,11
 80077a8:	1000091e 	bne	r2,zero,80077d0 <encode_mcu_AC_first+0x1b8>
			ERREXIT(cinfo, JERR_BAD_DCT_COEF);
 80077ac:	e0bffe17 	ldw	r2,-8(fp)
 80077b0:	10800017 	ldw	r2,0(r2)
 80077b4:	00c00184 	movi	r3,6
 80077b8:	10c00515 	stw	r3,20(r2)
 80077bc:	e0bffe17 	ldw	r2,-8(fp)
 80077c0:	10800017 	ldw	r2,0(r2)
 80077c4:	10800017 	ldw	r2,0(r2)
 80077c8:	e13ffe17 	ldw	r4,-8(fp)
 80077cc:	103ee83a 	callr	r2

		/* Count/emit Huffman symbol for run length / number of bits */
		emit_ac_symbol(entropy, entropy->ac_tbl_no, (r << 4) + nbits);
 80077d0:	e0bff917 	ldw	r2,-28(fp)
 80077d4:	10c01f17 	ldw	r3,124(r2)
 80077d8:	8804913a 	slli	r2,r17,4
 80077dc:	1485883a 	add	r2,r2,r18
 80077e0:	e13ff917 	ldw	r4,-28(fp)
 80077e4:	180b883a 	mov	r5,r3
 80077e8:	100d883a 	mov	r6,r2
 80077ec:	8006e940 	call	8006e94 <emit_ac_symbol>

		/* Emit that number of bits of the value, if positive, */
		/* or the complement of its magnitude, if negative. */
		emit_bits_e(entropy, (unsigned int) temp2, nbits);
 80077f0:	a005883a 	mov	r2,r20
 80077f4:	e13ff917 	ldw	r4,-28(fp)
 80077f8:	100b883a 	mov	r5,r2
 80077fc:	900d883a 	mov	r6,r18
 8007800:	8006b780 	call	8006b78 <emit_bits_e>

		r = 0;			/* reset zero run length */
 8007804:	0023883a 	mov	r17,zero

	/* Encode the AC coefficients per section G.1.2.2, fig. G.3 */

	r = 0;			/* r = run length of zeros */

	for (k = cinfo->Ss; k <= Se; k++) {
 8007808:	9cc00044 	addi	r19,r19,1
 800780c:	e0bffa17 	ldw	r2,-24(fp)
 8007810:	14ffb40e 	bge	r2,r19,80076e4 <encode_mcu_AC_first+0xcc>
		emit_bits_e(entropy, (unsigned int) temp2, nbits);

		r = 0;			/* reset zero run length */
	}

	if (r > 0) {			/* If there are trailing zeroes, */
 8007814:	04400b0e 	bge	zero,r17,8007844 <encode_mcu_AC_first+0x22c>
		entropy->EOBRUN++;		/* count an EOB */
 8007818:	e0bff917 	ldw	r2,-28(fp)
 800781c:	10802017 	ldw	r2,128(r2)
 8007820:	10c00044 	addi	r3,r2,1
 8007824:	e0bff917 	ldw	r2,-28(fp)
 8007828:	10c02015 	stw	r3,128(r2)
		if (entropy->EOBRUN == 0x7FFF)
 800782c:	e0bff917 	ldw	r2,-28(fp)
 8007830:	10802017 	ldw	r2,128(r2)
 8007834:	109fffd8 	cmpnei	r2,r2,32767
 8007838:	1000021e 	bne	r2,zero,8007844 <encode_mcu_AC_first+0x22c>
			emit_eobrun(entropy);	/* force it out to avoid overflow */
 800783c:	e13ff917 	ldw	r4,-28(fp)
 8007840:	80070000 	call	8007000 <emit_eobrun>
	}

	cinfo->dest->next_output_byte = entropy->next_output_byte;
 8007844:	e0bffe17 	ldw	r2,-8(fp)
 8007848:	10800617 	ldw	r2,24(r2)
 800784c:	e0fff917 	ldw	r3,-28(fp)
 8007850:	18c01c17 	ldw	r3,112(r3)
 8007854:	10c00015 	stw	r3,0(r2)
	cinfo->dest->free_in_buffer = entropy->free_in_buffer;
 8007858:	e0bffe17 	ldw	r2,-8(fp)
 800785c:	10800617 	ldw	r2,24(r2)
 8007860:	e0fff917 	ldw	r3,-28(fp)
 8007864:	18c01d17 	ldw	r3,116(r3)
 8007868:	10c00115 	stw	r3,4(r2)

	/* Update restart-interval state too */
	if (cinfo->restart_interval) {
 800786c:	e0bffe17 	ldw	r2,-8(fp)
 8007870:	10803717 	ldw	r2,220(r2)
 8007874:	10001626 	beq	r2,zero,80078d0 <encode_mcu_AC_first+0x2b8>
		if (entropy->restarts_to_go == 0) {
 8007878:	e0bff917 	ldw	r2,-28(fp)
 800787c:	10800917 	ldw	r2,36(r2)
 8007880:	10000e1e 	bne	r2,zero,80078bc <encode_mcu_AC_first+0x2a4>
			entropy->restarts_to_go = cinfo->restart_interval;
 8007884:	e0bffe17 	ldw	r2,-8(fp)
 8007888:	10c03717 	ldw	r3,220(r2)
 800788c:	e0bff917 	ldw	r2,-28(fp)
 8007890:	10c00915 	stw	r3,36(r2)
			entropy->next_restart_num++;
 8007894:	e0bff917 	ldw	r2,-28(fp)
 8007898:	10800a17 	ldw	r2,40(r2)
 800789c:	10c00044 	addi	r3,r2,1
 80078a0:	e0bff917 	ldw	r2,-28(fp)
 80078a4:	10c00a15 	stw	r3,40(r2)
			entropy->next_restart_num &= 7;
 80078a8:	e0bff917 	ldw	r2,-28(fp)
 80078ac:	10800a17 	ldw	r2,40(r2)
 80078b0:	10c001cc 	andi	r3,r2,7
 80078b4:	e0bff917 	ldw	r2,-28(fp)
 80078b8:	10c00a15 	stw	r3,40(r2)
		}
		entropy->restarts_to_go--;
 80078bc:	e0bff917 	ldw	r2,-28(fp)
 80078c0:	10800917 	ldw	r2,36(r2)
 80078c4:	10ffffc4 	addi	r3,r2,-1
 80078c8:	e0bff917 	ldw	r2,-28(fp)
 80078cc:	10c00915 	stw	r3,36(r2)
	}

	return TRUE;
 80078d0:	00800044 	movi	r2,1
}
 80078d4:	e037883a 	mov	sp,fp
 80078d8:	dfc00617 	ldw	ra,24(sp)
 80078dc:	df000517 	ldw	fp,20(sp)
 80078e0:	dd000417 	ldw	r20,16(sp)
 80078e4:	dcc00317 	ldw	r19,12(sp)
 80078e8:	dc800217 	ldw	r18,8(sp)
 80078ec:	dc400117 	ldw	r17,4(sp)
 80078f0:	dc000017 	ldw	r16,0(sp)
 80078f4:	dec00704 	addi	sp,sp,28
 80078f8:	f800283a 	ret

080078fc <encode_mcu_DC_refine>:
* is not very clear on the point.
*/

METHODDEF(boolean)
	encode_mcu_DC_refine (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
{
 80078fc:	defff704 	addi	sp,sp,-36
 8007900:	dfc00815 	stw	ra,32(sp)
 8007904:	df000715 	stw	fp,28(sp)
 8007908:	dc000615 	stw	r16,24(sp)
 800790c:	df000604 	addi	fp,sp,24
 8007910:	e13ffe15 	stw	r4,-8(fp)
 8007914:	e17fff15 	stw	r5,-4(fp)
	huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 8007918:	e0bffe17 	ldw	r2,-8(fp)
 800791c:	10806417 	ldw	r2,400(r2)
 8007920:	e0bffb15 	stw	r2,-20(fp)
	register int temp;
	int blkn;
	int Al = cinfo->Al;
 8007924:	e0bffe17 	ldw	r2,-8(fp)
 8007928:	10805817 	ldw	r2,352(r2)
 800792c:	e0bffc15 	stw	r2,-16(fp)
	JBLOCKROW block;

	entropy->next_output_byte = cinfo->dest->next_output_byte;
 8007930:	e0bffe17 	ldw	r2,-8(fp)
 8007934:	10800617 	ldw	r2,24(r2)
 8007938:	10c00017 	ldw	r3,0(r2)
 800793c:	e0bffb17 	ldw	r2,-20(fp)
 8007940:	10c01c15 	stw	r3,112(r2)
	entropy->free_in_buffer = cinfo->dest->free_in_buffer;
 8007944:	e0bffe17 	ldw	r2,-8(fp)
 8007948:	10800617 	ldw	r2,24(r2)
 800794c:	10c00117 	ldw	r3,4(r2)
 8007950:	e0bffb17 	ldw	r2,-20(fp)
 8007954:	10c01d15 	stw	r3,116(r2)

	/* Emit restart marker if needed */
	if (cinfo->restart_interval)
 8007958:	e0bffe17 	ldw	r2,-8(fp)
 800795c:	10803717 	ldw	r2,220(r2)
 8007960:	10000826 	beq	r2,zero,8007984 <encode_mcu_DC_refine+0x88>
		if (entropy->restarts_to_go == 0)
 8007964:	e0bffb17 	ldw	r2,-20(fp)
 8007968:	10800917 	ldw	r2,36(r2)
 800796c:	1000051e 	bne	r2,zero,8007984 <encode_mcu_DC_refine+0x88>
			emit_restart_e(entropy, entropy->next_restart_num);
 8007970:	e0bffb17 	ldw	r2,-20(fp)
 8007974:	10800a17 	ldw	r2,40(r2)
 8007978:	e13ffb17 	ldw	r4,-20(fp)
 800797c:	100b883a 	mov	r5,r2
 8007980:	80072400 	call	8007240 <emit_restart_e>

	/* Encode the MCU data blocks */
	for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8007984:	e03ffa15 	stw	zero,-24(fp)
 8007988:	00001506 	br	80079e0 <encode_mcu_DC_refine+0xe4>
		block = MCU_data[blkn];
 800798c:	e0bffa17 	ldw	r2,-24(fp)
 8007990:	1085883a 	add	r2,r2,r2
 8007994:	1085883a 	add	r2,r2,r2
 8007998:	e0ffff17 	ldw	r3,-4(fp)
 800799c:	1885883a 	add	r2,r3,r2
 80079a0:	10800017 	ldw	r2,0(r2)
 80079a4:	e0bffd15 	stw	r2,-12(fp)

		/* We simply emit the Al'th bit of the DC coefficient value. */
		temp = (*block)[0];
 80079a8:	e0bffd17 	ldw	r2,-12(fp)
 80079ac:	1080000b 	ldhu	r2,0(r2)
 80079b0:	143fffcc 	andi	r16,r2,65535
 80079b4:	8420001c 	xori	r16,r16,32768
 80079b8:	84200004 	addi	r16,r16,-32768
		emit_bits_e(entropy, (unsigned int) (temp >> Al), 1);
 80079bc:	e0bffc17 	ldw	r2,-16(fp)
 80079c0:	8085d83a 	sra	r2,r16,r2
 80079c4:	e13ffb17 	ldw	r4,-20(fp)
 80079c8:	100b883a 	mov	r5,r2
 80079cc:	01800044 	movi	r6,1
 80079d0:	8006b780 	call	8006b78 <emit_bits_e>
	if (cinfo->restart_interval)
		if (entropy->restarts_to_go == 0)
			emit_restart_e(entropy, entropy->next_restart_num);

	/* Encode the MCU data blocks */
	for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 80079d4:	e0bffa17 	ldw	r2,-24(fp)
 80079d8:	10800044 	addi	r2,r2,1
 80079dc:	e0bffa15 	stw	r2,-24(fp)
 80079e0:	e0bffe17 	ldw	r2,-8(fp)
 80079e4:	10804a17 	ldw	r2,296(r2)
 80079e8:	e0fffa17 	ldw	r3,-24(fp)
 80079ec:	18bfe716 	blt	r3,r2,800798c <encode_mcu_DC_refine+0x90>
		/* We simply emit the Al'th bit of the DC coefficient value. */
		temp = (*block)[0];
		emit_bits_e(entropy, (unsigned int) (temp >> Al), 1);
	}

	cinfo->dest->next_output_byte = entropy->next_output_byte;
 80079f0:	e0bffe17 	ldw	r2,-8(fp)
 80079f4:	10800617 	ldw	r2,24(r2)
 80079f8:	e0fffb17 	ldw	r3,-20(fp)
 80079fc:	18c01c17 	ldw	r3,112(r3)
 8007a00:	10c00015 	stw	r3,0(r2)
	cinfo->dest->free_in_buffer = entropy->free_in_buffer;
 8007a04:	e0bffe17 	ldw	r2,-8(fp)
 8007a08:	10800617 	ldw	r2,24(r2)
 8007a0c:	e0fffb17 	ldw	r3,-20(fp)
 8007a10:	18c01d17 	ldw	r3,116(r3)
 8007a14:	10c00115 	stw	r3,4(r2)

	/* Update restart-interval state too */
	if (cinfo->restart_interval) {
 8007a18:	e0bffe17 	ldw	r2,-8(fp)
 8007a1c:	10803717 	ldw	r2,220(r2)
 8007a20:	10001626 	beq	r2,zero,8007a7c <encode_mcu_DC_refine+0x180>
		if (entropy->restarts_to_go == 0) {
 8007a24:	e0bffb17 	ldw	r2,-20(fp)
 8007a28:	10800917 	ldw	r2,36(r2)
 8007a2c:	10000e1e 	bne	r2,zero,8007a68 <encode_mcu_DC_refine+0x16c>
			entropy->restarts_to_go = cinfo->restart_interval;
 8007a30:	e0bffe17 	ldw	r2,-8(fp)
 8007a34:	10c03717 	ldw	r3,220(r2)
 8007a38:	e0bffb17 	ldw	r2,-20(fp)
 8007a3c:	10c00915 	stw	r3,36(r2)
			entropy->next_restart_num++;
 8007a40:	e0bffb17 	ldw	r2,-20(fp)
 8007a44:	10800a17 	ldw	r2,40(r2)
 8007a48:	10c00044 	addi	r3,r2,1
 8007a4c:	e0bffb17 	ldw	r2,-20(fp)
 8007a50:	10c00a15 	stw	r3,40(r2)
			entropy->next_restart_num &= 7;
 8007a54:	e0bffb17 	ldw	r2,-20(fp)
 8007a58:	10800a17 	ldw	r2,40(r2)
 8007a5c:	10c001cc 	andi	r3,r2,7
 8007a60:	e0bffb17 	ldw	r2,-20(fp)
 8007a64:	10c00a15 	stw	r3,40(r2)
		}
		entropy->restarts_to_go--;
 8007a68:	e0bffb17 	ldw	r2,-20(fp)
 8007a6c:	10800917 	ldw	r2,36(r2)
 8007a70:	10ffffc4 	addi	r3,r2,-1
 8007a74:	e0bffb17 	ldw	r2,-20(fp)
 8007a78:	10c00915 	stw	r3,36(r2)
	}

	return TRUE;
 8007a7c:	00800044 	movi	r2,1
}
 8007a80:	e037883a 	mov	sp,fp
 8007a84:	dfc00217 	ldw	ra,8(sp)
 8007a88:	df000117 	ldw	fp,4(sp)
 8007a8c:	dc000017 	ldw	r16,0(sp)
 8007a90:	dec00304 	addi	sp,sp,12
 8007a94:	f800283a 	ret

08007a98 <encode_mcu_AC_refine>:
* MCU encoding for AC successive approximation refinement scan.
*/

METHODDEF(boolean)
	encode_mcu_AC_refine (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
{
 8007a98:	deffb104 	addi	sp,sp,-316
 8007a9c:	dfc04e15 	stw	ra,312(sp)
 8007aa0:	df004d15 	stw	fp,308(sp)
 8007aa4:	dc804c15 	stw	r18,304(sp)
 8007aa8:	dc404b15 	stw	r17,300(sp)
 8007aac:	dc004a15 	stw	r16,296(sp)
 8007ab0:	df004a04 	addi	fp,sp,296
 8007ab4:	e13ffe15 	stw	r4,-8(fp)
 8007ab8:	e17fff15 	stw	r5,-4(fp)
	huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 8007abc:	e0bffe17 	ldw	r2,-8(fp)
 8007ac0:	10806417 	ldw	r2,400(r2)
 8007ac4:	e0bfb915 	stw	r2,-284(fp)
	int Se, Al;
	const int * natural_order;
	JBLOCKROW block;
	int absvalues[DCTSIZE2];

	entropy->next_output_byte = cinfo->dest->next_output_byte;
 8007ac8:	e0bffe17 	ldw	r2,-8(fp)
 8007acc:	10800617 	ldw	r2,24(r2)
 8007ad0:	10c00017 	ldw	r3,0(r2)
 8007ad4:	e0bfb917 	ldw	r2,-284(fp)
 8007ad8:	10c01c15 	stw	r3,112(r2)
	entropy->free_in_buffer = cinfo->dest->free_in_buffer;
 8007adc:	e0bffe17 	ldw	r2,-8(fp)
 8007ae0:	10800617 	ldw	r2,24(r2)
 8007ae4:	10c00117 	ldw	r3,4(r2)
 8007ae8:	e0bfb917 	ldw	r2,-284(fp)
 8007aec:	10c01d15 	stw	r3,116(r2)

	/* Emit restart marker if needed */
	if (cinfo->restart_interval)
 8007af0:	e0bffe17 	ldw	r2,-8(fp)
 8007af4:	10803717 	ldw	r2,220(r2)
 8007af8:	10000826 	beq	r2,zero,8007b1c <encode_mcu_AC_refine+0x84>
		if (entropy->restarts_to_go == 0)
 8007afc:	e0bfb917 	ldw	r2,-284(fp)
 8007b00:	10800917 	ldw	r2,36(r2)
 8007b04:	1000051e 	bne	r2,zero,8007b1c <encode_mcu_AC_refine+0x84>
			emit_restart_e(entropy, entropy->next_restart_num);
 8007b08:	e0bfb917 	ldw	r2,-284(fp)
 8007b0c:	10800a17 	ldw	r2,40(r2)
 8007b10:	e13fb917 	ldw	r4,-284(fp)
 8007b14:	100b883a 	mov	r5,r2
 8007b18:	80072400 	call	8007240 <emit_restart_e>

	Se = cinfo->Se;
 8007b1c:	e0bffe17 	ldw	r2,-8(fp)
 8007b20:	10805617 	ldw	r2,344(r2)
 8007b24:	e0bfba15 	stw	r2,-280(fp)
	Al = cinfo->Al;
 8007b28:	e0bffe17 	ldw	r2,-8(fp)
 8007b2c:	10805817 	ldw	r2,352(r2)
 8007b30:	e0bfbb15 	stw	r2,-276(fp)
	natural_order = cinfo->natural_order;
 8007b34:	e0bffe17 	ldw	r2,-8(fp)
 8007b38:	10805a17 	ldw	r2,360(r2)
 8007b3c:	e0bfbc15 	stw	r2,-272(fp)

	/* Encode the MCU data block */
	block = MCU_data[0];
 8007b40:	e0bfff17 	ldw	r2,-4(fp)
 8007b44:	10800017 	ldw	r2,0(r2)
 8007b48:	e0bfbd15 	stw	r2,-268(fp)

	/* It is convenient to make a pre-pass to determine the transformed
	* coefficients' absolute values and the EOB position.
	*/
	EOB = 0;
 8007b4c:	e03fb615 	stw	zero,-296(fp)
	for (k = cinfo->Ss; k <= Se; k++) {
 8007b50:	e0bffe17 	ldw	r2,-8(fp)
 8007b54:	14005517 	ldw	r16,340(r2)
 8007b58:	00001b06 	br	8007bc8 <encode_mcu_AC_refine+0x130>
		temp = (*block)[natural_order[k]];
 8007b5c:	8005883a 	mov	r2,r16
 8007b60:	1085883a 	add	r2,r2,r2
 8007b64:	1085883a 	add	r2,r2,r2
 8007b68:	e0ffbc17 	ldw	r3,-272(fp)
 8007b6c:	1885883a 	add	r2,r3,r2
 8007b70:	10800017 	ldw	r2,0(r2)
 8007b74:	e0ffbd17 	ldw	r3,-268(fp)
 8007b78:	1085883a 	add	r2,r2,r2
 8007b7c:	1885883a 	add	r2,r3,r2
 8007b80:	1080000b 	ldhu	r2,0(r2)
 8007b84:	147fffcc 	andi	r17,r2,65535
 8007b88:	8c60001c 	xori	r17,r17,32768
 8007b8c:	8c600004 	addi	r17,r17,-32768
		/* We must apply the point transform by Al.  For AC coefficients this
		* is an integer division with rounding towards 0.  To do this portably
		* in C, we shift after obtaining the absolute value.
		*/
		if (temp < 0)
 8007b90:	8800010e 	bge	r17,zero,8007b98 <encode_mcu_AC_refine+0x100>
			temp = -temp;		/* temp is abs value of input */
 8007b94:	0463c83a 	sub	r17,zero,r17
		temp >>= Al;		/* apply the point transform */
 8007b98:	e0bfbb17 	ldw	r2,-276(fp)
 8007b9c:	88a3d83a 	sra	r17,r17,r2
		absvalues[k] = temp;	/* save abs value for main pass */
 8007ba0:	8405883a 	add	r2,r16,r16
 8007ba4:	1085883a 	add	r2,r2,r2
 8007ba8:	e0ffb604 	addi	r3,fp,-296
 8007bac:	1885883a 	add	r2,r3,r2
 8007bb0:	10800804 	addi	r2,r2,32
 8007bb4:	14400015 	stw	r17,0(r2)
		if (temp == 1)
 8007bb8:	88800058 	cmpnei	r2,r17,1
 8007bbc:	1000011e 	bne	r2,zero,8007bc4 <encode_mcu_AC_refine+0x12c>
			EOB = k;			/* EOB = index of last newly-nonzero coef */
 8007bc0:	e43fb615 	stw	r16,-296(fp)

	/* It is convenient to make a pre-pass to determine the transformed
	* coefficients' absolute values and the EOB position.
	*/
	EOB = 0;
	for (k = cinfo->Ss; k <= Se; k++) {
 8007bc4:	84000044 	addi	r16,r16,1
 8007bc8:	e0bfba17 	ldw	r2,-280(fp)
 8007bcc:	143fe30e 	bge	r2,r16,8007b5c <encode_mcu_AC_refine+0xc4>
			EOB = k;			/* EOB = index of last newly-nonzero coef */
	}

	/* Encode the AC coefficients per section G.1.2.3, fig. G.7 */

	r = 0;			/* r = run length of zeros */
 8007bd0:	0025883a 	mov	r18,zero
	BR = 0;			/* BR = count of buffered bits added now */
 8007bd4:	e03fb815 	stw	zero,-288(fp)
	BR_buffer = entropy->bit_buffer + entropy->BE; /* Append bits to buffer */
 8007bd8:	e0bfb917 	ldw	r2,-284(fp)
 8007bdc:	10c02217 	ldw	r3,136(r2)
 8007be0:	e0bfb917 	ldw	r2,-284(fp)
 8007be4:	10802117 	ldw	r2,132(r2)
 8007be8:	1885883a 	add	r2,r3,r2
 8007bec:	e0bfb715 	stw	r2,-292(fp)

	for (k = cinfo->Ss; k <= Se; k++) {
 8007bf0:	e0bffe17 	ldw	r2,-8(fp)
 8007bf4:	14005517 	ldw	r16,340(r2)
 8007bf8:	00005106 	br	8007d40 <encode_mcu_AC_refine+0x2a8>
		if ((temp = absvalues[k]) == 0) {
 8007bfc:	8405883a 	add	r2,r16,r16
 8007c00:	1085883a 	add	r2,r2,r2
 8007c04:	e0ffb604 	addi	r3,fp,-296
 8007c08:	1885883a 	add	r2,r3,r2
 8007c0c:	10800804 	addi	r2,r2,32
 8007c10:	14400017 	ldw	r17,0(r2)
 8007c14:	8800131e 	bne	r17,zero,8007c64 <encode_mcu_AC_refine+0x1cc>
			r++;
 8007c18:	94800044 	addi	r18,r18,1
			continue;
 8007c1c:	00004706 	br	8007d3c <encode_mcu_AC_refine+0x2a4>
		}

		/* Emit any required ZRLs, but not if they can be folded into EOB */
		while (r > 15 && k <= EOB) {
			/* emit any pending EOBRUN and the BE correction bits */
			emit_eobrun(entropy);
 8007c20:	e13fb917 	ldw	r4,-284(fp)
 8007c24:	80070000 	call	8007000 <emit_eobrun>
			/* Emit ZRL */
			emit_ac_symbol(entropy, entropy->ac_tbl_no, 0xF0);
 8007c28:	e0bfb917 	ldw	r2,-284(fp)
 8007c2c:	10801f17 	ldw	r2,124(r2)
 8007c30:	e13fb917 	ldw	r4,-284(fp)
 8007c34:	100b883a 	mov	r5,r2
 8007c38:	01803c04 	movi	r6,240
 8007c3c:	8006e940 	call	8006e94 <emit_ac_symbol>
			r -= 16;
 8007c40:	94bffc04 	addi	r18,r18,-16
			/* Emit buffered correction bits that must be associated with ZRL */
			emit_buffered_bits(entropy, BR_buffer, BR);
 8007c44:	e13fb917 	ldw	r4,-284(fp)
 8007c48:	e17fb717 	ldw	r5,-292(fp)
 8007c4c:	e1bfb817 	ldw	r6,-288(fp)
 8007c50:	8006f780 	call	8006f78 <emit_buffered_bits>
			BR_buffer = entropy->bit_buffer; /* BE bits are gone now */
 8007c54:	e0bfb917 	ldw	r2,-284(fp)
 8007c58:	10802217 	ldw	r2,136(r2)
 8007c5c:	e0bfb715 	stw	r2,-292(fp)
			BR = 0;
 8007c60:	e03fb815 	stw	zero,-288(fp)
			r++;
			continue;
		}

		/* Emit any required ZRLs, but not if they can be folded into EOB */
		while (r > 15 && k <= EOB) {
 8007c64:	90800410 	cmplti	r2,r18,16
 8007c68:	1000021e 	bne	r2,zero,8007c74 <encode_mcu_AC_refine+0x1dc>
 8007c6c:	e0bfb617 	ldw	r2,-296(fp)
 8007c70:	143feb0e 	bge	r2,r16,8007c20 <encode_mcu_AC_refine+0x188>
		/* If the coef was previously nonzero, it only needs a correction bit.
		* NOTE: a straight translation of the spec's figure G.7 would suggest
		* that we also need to test r > 15.  But if r > 15, we can only get here
		* if k > EOB, which implies that this coefficient is not 1.
		*/
		if (temp > 1) {
 8007c74:	88800090 	cmplti	r2,r17,2
 8007c78:	10000a1e 	bne	r2,zero,8007ca4 <encode_mcu_AC_refine+0x20c>
			/* The correction bit is the next bit of the absolute value. */
			BR_buffer[BR++] = (char) (temp & 1);
 8007c7c:	e0ffb717 	ldw	r3,-292(fp)
 8007c80:	e0bfb817 	ldw	r2,-288(fp)
 8007c84:	1885883a 	add	r2,r3,r2
 8007c88:	8807883a 	mov	r3,r17
 8007c8c:	18c0004c 	andi	r3,r3,1
 8007c90:	10c00005 	stb	r3,0(r2)
 8007c94:	e0bfb817 	ldw	r2,-288(fp)
 8007c98:	10800044 	addi	r2,r2,1
 8007c9c:	e0bfb815 	stw	r2,-288(fp)
			continue;
 8007ca0:	00002606 	br	8007d3c <encode_mcu_AC_refine+0x2a4>
		}

		/* Emit any pending EOBRUN and the BE correction bits */
		emit_eobrun(entropy);
 8007ca4:	e13fb917 	ldw	r4,-284(fp)
 8007ca8:	80070000 	call	8007000 <emit_eobrun>

		/* Count/emit Huffman symbol for run length / number of bits */
		emit_ac_symbol(entropy, entropy->ac_tbl_no, (r << 4) + 1);
 8007cac:	e0bfb917 	ldw	r2,-284(fp)
 8007cb0:	10c01f17 	ldw	r3,124(r2)
 8007cb4:	9004913a 	slli	r2,r18,4
 8007cb8:	10800044 	addi	r2,r2,1
 8007cbc:	e13fb917 	ldw	r4,-284(fp)
 8007cc0:	180b883a 	mov	r5,r3
 8007cc4:	100d883a 	mov	r6,r2
 8007cc8:	8006e940 	call	8006e94 <emit_ac_symbol>

		/* Emit output bit for newly-nonzero coef */
		temp = ((*block)[natural_order[k]] < 0) ? 0 : 1;
 8007ccc:	8005883a 	mov	r2,r16
 8007cd0:	1085883a 	add	r2,r2,r2
 8007cd4:	1085883a 	add	r2,r2,r2
 8007cd8:	e0ffbc17 	ldw	r3,-272(fp)
 8007cdc:	1885883a 	add	r2,r3,r2
 8007ce0:	10800017 	ldw	r2,0(r2)
 8007ce4:	e0ffbd17 	ldw	r3,-268(fp)
 8007ce8:	1085883a 	add	r2,r2,r2
 8007cec:	1885883a 	add	r2,r3,r2
 8007cf0:	1080000b 	ldhu	r2,0(r2)
 8007cf4:	0084303a 	nor	r2,zero,r2
 8007cf8:	10bfffcc 	andi	r2,r2,65535
 8007cfc:	1004d3fa 	srli	r2,r2,15
 8007d00:	14403fcc 	andi	r17,r2,255
		emit_bits_e(entropy, (unsigned int) temp, 1);
 8007d04:	8805883a 	mov	r2,r17
 8007d08:	e13fb917 	ldw	r4,-284(fp)
 8007d0c:	100b883a 	mov	r5,r2
 8007d10:	01800044 	movi	r6,1
 8007d14:	8006b780 	call	8006b78 <emit_bits_e>

		/* Emit buffered correction bits that must be associated with this code */
		emit_buffered_bits(entropy, BR_buffer, BR);
 8007d18:	e13fb917 	ldw	r4,-284(fp)
 8007d1c:	e17fb717 	ldw	r5,-292(fp)
 8007d20:	e1bfb817 	ldw	r6,-288(fp)
 8007d24:	8006f780 	call	8006f78 <emit_buffered_bits>
		BR_buffer = entropy->bit_buffer; /* BE bits are gone now */
 8007d28:	e0bfb917 	ldw	r2,-284(fp)
 8007d2c:	10802217 	ldw	r2,136(r2)
 8007d30:	e0bfb715 	stw	r2,-292(fp)
		BR = 0;
 8007d34:	e03fb815 	stw	zero,-288(fp)
		r = 0;			/* reset zero run length */
 8007d38:	0025883a 	mov	r18,zero

	r = 0;			/* r = run length of zeros */
	BR = 0;			/* BR = count of buffered bits added now */
	BR_buffer = entropy->bit_buffer + entropy->BE; /* Append bits to buffer */

	for (k = cinfo->Ss; k <= Se; k++) {
 8007d3c:	84000044 	addi	r16,r16,1
 8007d40:	e0bfba17 	ldw	r2,-280(fp)
 8007d44:	143fad0e 	bge	r2,r16,8007bfc <encode_mcu_AC_refine+0x164>
		BR_buffer = entropy->bit_buffer; /* BE bits are gone now */
		BR = 0;
		r = 0;			/* reset zero run length */
	}

	if (r > 0 || BR > 0) {	/* If there are trailing zeroes, */
 8007d48:	04800216 	blt	zero,r18,8007d54 <encode_mcu_AC_refine+0x2bc>
 8007d4c:	e0bfb817 	ldw	r2,-288(fp)
 8007d50:	10001526 	beq	r2,zero,8007da8 <encode_mcu_AC_refine+0x310>
		entropy->EOBRUN++;		/* count an EOB */
 8007d54:	e0bfb917 	ldw	r2,-284(fp)
 8007d58:	10802017 	ldw	r2,128(r2)
 8007d5c:	10c00044 	addi	r3,r2,1
 8007d60:	e0bfb917 	ldw	r2,-284(fp)
 8007d64:	10c02015 	stw	r3,128(r2)
		entropy->BE += BR;		/* concat my correction bits to older ones */
 8007d68:	e0bfb917 	ldw	r2,-284(fp)
 8007d6c:	10c02117 	ldw	r3,132(r2)
 8007d70:	e0bfb817 	ldw	r2,-288(fp)
 8007d74:	1887883a 	add	r3,r3,r2
 8007d78:	e0bfb917 	ldw	r2,-284(fp)
 8007d7c:	10c02115 	stw	r3,132(r2)
		/* We force out the EOB if we risk either:
		* 1. overflow of the EOB counter;
		* 2. overflow of the correction bit buffer during the next MCU.
		*/
		if (entropy->EOBRUN == 0x7FFF || entropy->BE > (MAX_CORR_BITS-DCTSIZE2+1))
 8007d80:	e0bfb917 	ldw	r2,-284(fp)
 8007d84:	10802017 	ldw	r2,128(r2)
 8007d88:	109fffe0 	cmpeqi	r2,r2,32767
 8007d8c:	1000041e 	bne	r2,zero,8007da0 <encode_mcu_AC_refine+0x308>
 8007d90:	e0bfb917 	ldw	r2,-284(fp)
 8007d94:	10802117 	ldw	r2,132(r2)
 8007d98:	1080eab0 	cmpltui	r2,r2,938
 8007d9c:	1000021e 	bne	r2,zero,8007da8 <encode_mcu_AC_refine+0x310>
			emit_eobrun(entropy);
 8007da0:	e13fb917 	ldw	r4,-284(fp)
 8007da4:	80070000 	call	8007000 <emit_eobrun>
	}

	cinfo->dest->next_output_byte = entropy->next_output_byte;
 8007da8:	e0bffe17 	ldw	r2,-8(fp)
 8007dac:	10800617 	ldw	r2,24(r2)
 8007db0:	e0ffb917 	ldw	r3,-284(fp)
 8007db4:	18c01c17 	ldw	r3,112(r3)
 8007db8:	10c00015 	stw	r3,0(r2)
	cinfo->dest->free_in_buffer = entropy->free_in_buffer;
 8007dbc:	e0bffe17 	ldw	r2,-8(fp)
 8007dc0:	10800617 	ldw	r2,24(r2)
 8007dc4:	e0ffb917 	ldw	r3,-284(fp)
 8007dc8:	18c01d17 	ldw	r3,116(r3)
 8007dcc:	10c00115 	stw	r3,4(r2)

	/* Update restart-interval state too */
	if (cinfo->restart_interval) {
 8007dd0:	e0bffe17 	ldw	r2,-8(fp)
 8007dd4:	10803717 	ldw	r2,220(r2)
 8007dd8:	10001626 	beq	r2,zero,8007e34 <encode_mcu_AC_refine+0x39c>
		if (entropy->restarts_to_go == 0) {
 8007ddc:	e0bfb917 	ldw	r2,-284(fp)
 8007de0:	10800917 	ldw	r2,36(r2)
 8007de4:	10000e1e 	bne	r2,zero,8007e20 <encode_mcu_AC_refine+0x388>
			entropy->restarts_to_go = cinfo->restart_interval;
 8007de8:	e0bffe17 	ldw	r2,-8(fp)
 8007dec:	10c03717 	ldw	r3,220(r2)
 8007df0:	e0bfb917 	ldw	r2,-284(fp)
 8007df4:	10c00915 	stw	r3,36(r2)
			entropy->next_restart_num++;
 8007df8:	e0bfb917 	ldw	r2,-284(fp)
 8007dfc:	10800a17 	ldw	r2,40(r2)
 8007e00:	10c00044 	addi	r3,r2,1
 8007e04:	e0bfb917 	ldw	r2,-284(fp)
 8007e08:	10c00a15 	stw	r3,40(r2)
			entropy->next_restart_num &= 7;
 8007e0c:	e0bfb917 	ldw	r2,-284(fp)
 8007e10:	10800a17 	ldw	r2,40(r2)
 8007e14:	10c001cc 	andi	r3,r2,7
 8007e18:	e0bfb917 	ldw	r2,-284(fp)
 8007e1c:	10c00a15 	stw	r3,40(r2)
		}
		entropy->restarts_to_go--;
 8007e20:	e0bfb917 	ldw	r2,-284(fp)
 8007e24:	10800917 	ldw	r2,36(r2)
 8007e28:	10ffffc4 	addi	r3,r2,-1
 8007e2c:	e0bfb917 	ldw	r2,-284(fp)
 8007e30:	10c00915 	stw	r3,36(r2)
	}

	return TRUE;
 8007e34:	00800044 	movi	r2,1
}
 8007e38:	e037883a 	mov	sp,fp
 8007e3c:	dfc00417 	ldw	ra,16(sp)
 8007e40:	df000317 	ldw	fp,12(sp)
 8007e44:	dc800217 	ldw	r18,8(sp)
 8007e48:	dc400117 	ldw	r17,4(sp)
 8007e4c:	dc000017 	ldw	r16,0(sp)
 8007e50:	dec00504 	addi	sp,sp,20
 8007e54:	f800283a 	ret

08007e58 <encode_one_block>:
/* Encode a single block's worth of coefficients */

LOCAL(boolean)
	encode_one_block (working_state * state, JCOEFPTR block, int last_dc_val,
	c_derived_tbl *dctbl, c_derived_tbl *actbl)
{
 8007e58:	defff304 	addi	sp,sp,-52
 8007e5c:	dfc00c15 	stw	ra,48(sp)
 8007e60:	df000b15 	stw	fp,44(sp)
 8007e64:	dd000a15 	stw	r20,40(sp)
 8007e68:	dcc00915 	stw	r19,36(sp)
 8007e6c:	dc800815 	stw	r18,32(sp)
 8007e70:	dc400715 	stw	r17,28(sp)
 8007e74:	dc000615 	stw	r16,24(sp)
 8007e78:	df000604 	addi	fp,sp,24
 8007e7c:	e13ffc15 	stw	r4,-16(fp)
 8007e80:	e17ffd15 	stw	r5,-12(fp)
 8007e84:	e1bffe15 	stw	r6,-8(fp)
 8007e88:	e1ffff15 	stw	r7,-4(fp)
	register int temp, temp2;
	register int nbits;
	register int k, r, i;
	int Se = state->cinfo->lim_Se;
 8007e8c:	e0bffc17 	ldw	r2,-16(fp)
 8007e90:	10800817 	ldw	r2,32(r2)
 8007e94:	10805b17 	ldw	r2,364(r2)
 8007e98:	e0bffa15 	stw	r2,-24(fp)
	const int * natural_order = state->cinfo->natural_order;
 8007e9c:	e0bffc17 	ldw	r2,-16(fp)
 8007ea0:	10800817 	ldw	r2,32(r2)
 8007ea4:	10805a17 	ldw	r2,360(r2)
 8007ea8:	e0bffb15 	stw	r2,-20(fp)

	/* Encode the DC coefficient difference per section F.1.2.1 */

	temp = temp2 = block[0] - last_dc_val;
 8007eac:	e0bffd17 	ldw	r2,-12(fp)
 8007eb0:	1080000b 	ldhu	r2,0(r2)
 8007eb4:	10ffffcc 	andi	r3,r2,65535
 8007eb8:	18e0001c 	xori	r3,r3,32768
 8007ebc:	18e00004 	addi	r3,r3,-32768
 8007ec0:	e0bffe17 	ldw	r2,-8(fp)
 8007ec4:	18a7c83a 	sub	r19,r3,r2
 8007ec8:	9821883a 	mov	r16,r19

	if (temp < 0) {
 8007ecc:	8000020e 	bge	r16,zero,8007ed8 <encode_one_block+0x80>
		temp = -temp;		/* temp is abs value of input */
 8007ed0:	0421c83a 	sub	r16,zero,r16
		/* For a negative input, want temp2 = bitwise complement of abs(input) */
		/* This code assumes we are on a two's complement machine */
		temp2--;
 8007ed4:	9cffffc4 	addi	r19,r19,-1
	}

	/* Find the number of bits needed for the magnitude of the coefficient */
	nbits = 0;
 8007ed8:	0023883a 	mov	r17,zero
	while (temp) {
 8007edc:	00000206 	br	8007ee8 <encode_one_block+0x90>
		nbits++;
 8007ee0:	8c400044 	addi	r17,r17,1
		temp >>= 1;
 8007ee4:	8021d07a 	srai	r16,r16,1
		temp2--;
	}

	/* Find the number of bits needed for the magnitude of the coefficient */
	nbits = 0;
	while (temp) {
 8007ee8:	803ffd1e 	bne	r16,zero,8007ee0 <encode_one_block+0x88>
		temp >>= 1;
	}
	/* Check for out-of-range coefficient values.
	* Since we're encoding a difference, the range limit is twice as much.
	*/
	if (nbits > MAX_COEF_BITS+1)
 8007eec:	88800310 	cmplti	r2,r17,12
 8007ef0:	10000d1e 	bne	r2,zero,8007f28 <encode_one_block+0xd0>
		ERREXIT(state->cinfo, JERR_BAD_DCT_COEF);
 8007ef4:	e0bffc17 	ldw	r2,-16(fp)
 8007ef8:	10800817 	ldw	r2,32(r2)
 8007efc:	10800017 	ldw	r2,0(r2)
 8007f00:	00c00184 	movi	r3,6
 8007f04:	10c00515 	stw	r3,20(r2)
 8007f08:	e0bffc17 	ldw	r2,-16(fp)
 8007f0c:	10800817 	ldw	r2,32(r2)
 8007f10:	10800017 	ldw	r2,0(r2)
 8007f14:	10c00017 	ldw	r3,0(r2)
 8007f18:	e0bffc17 	ldw	r2,-16(fp)
 8007f1c:	10800817 	ldw	r2,32(r2)
 8007f20:	1009883a 	mov	r4,r2
 8007f24:	183ee83a 	callr	r3

	/* Emit the Huffman-coded symbol for the number of bits */
	if (! emit_bits_s(state, dctbl->ehufco[nbits], dctbl->ehufsi[nbits]))
 8007f28:	e0ffff17 	ldw	r3,-4(fp)
 8007f2c:	8c45883a 	add	r2,r17,r17
 8007f30:	1085883a 	add	r2,r2,r2
 8007f34:	1885883a 	add	r2,r3,r2
 8007f38:	10c00017 	ldw	r3,0(r2)
 8007f3c:	e0bfff17 	ldw	r2,-4(fp)
 8007f40:	1445883a 	add	r2,r2,r17
 8007f44:	10810004 	addi	r2,r2,1024
 8007f48:	10800003 	ldbu	r2,0(r2)
 8007f4c:	10803fcc 	andi	r2,r2,255
 8007f50:	1080201c 	xori	r2,r2,128
 8007f54:	10bfe004 	addi	r2,r2,-128
 8007f58:	e13ffc17 	ldw	r4,-16(fp)
 8007f5c:	180b883a 	mov	r5,r3
 8007f60:	100d883a 	mov	r6,r2
 8007f64:	80069d80 	call	80069d8 <emit_bits_s>
 8007f68:	10803fcc 	andi	r2,r2,255
 8007f6c:	1000021e 	bne	r2,zero,8007f78 <encode_one_block+0x120>
		return FALSE;
 8007f70:	0005883a 	mov	r2,zero
 8007f74:	00007b06 	br	8008164 <encode_one_block+0x30c>

	/* Emit that number of bits of the value, if positive, */
	/* or the complement of its magnitude, if negative. */
	if (nbits)			/* emit_bits rejects calls with size 0 */
 8007f78:	88000926 	beq	r17,zero,8007fa0 <encode_one_block+0x148>
		if (! emit_bits_s(state, (unsigned int) temp2, nbits))
 8007f7c:	9805883a 	mov	r2,r19
 8007f80:	e13ffc17 	ldw	r4,-16(fp)
 8007f84:	100b883a 	mov	r5,r2
 8007f88:	880d883a 	mov	r6,r17
 8007f8c:	80069d80 	call	80069d8 <emit_bits_s>
 8007f90:	10803fcc 	andi	r2,r2,255
 8007f94:	1000021e 	bne	r2,zero,8007fa0 <encode_one_block+0x148>
			return FALSE;
 8007f98:	0005883a 	mov	r2,zero
 8007f9c:	00007106 	br	8008164 <encode_one_block+0x30c>

	/* Encode the AC coefficients per section F.1.2.2 */

	r = 0;			/* r = run length of zeros */
 8007fa0:	0025883a 	mov	r18,zero

	for (k = 1; k <= Se; k++) {
 8007fa4:	05000044 	movi	r20,1
 8007fa8:	00005b06 	br	8008118 <encode_one_block+0x2c0>
		if ((temp = block[natural_order[k]]) == 0) {
 8007fac:	a005883a 	mov	r2,r20
 8007fb0:	1085883a 	add	r2,r2,r2
 8007fb4:	1085883a 	add	r2,r2,r2
 8007fb8:	e0fffb17 	ldw	r3,-20(fp)
 8007fbc:	1885883a 	add	r2,r3,r2
 8007fc0:	10800017 	ldw	r2,0(r2)
 8007fc4:	1085883a 	add	r2,r2,r2
 8007fc8:	e0fffd17 	ldw	r3,-12(fp)
 8007fcc:	1885883a 	add	r2,r3,r2
 8007fd0:	1080000b 	ldhu	r2,0(r2)
 8007fd4:	143fffcc 	andi	r16,r2,65535
 8007fd8:	8420001c 	xori	r16,r16,32768
 8007fdc:	84200004 	addi	r16,r16,-32768
 8007fe0:	8000121e 	bne	r16,zero,800802c <encode_one_block+0x1d4>
			r++;
 8007fe4:	94800044 	addi	r18,r18,1
 8007fe8:	00004a06 	br	8008114 <encode_one_block+0x2bc>
		} else {
			/* if run length > 15, must emit special run-length-16 codes (0xF0) */
			while (r > 15) {
				if (! emit_bits_s(state, actbl->ehufco[0xF0], actbl->ehufsi[0xF0]))
 8007fec:	e0800717 	ldw	r2,28(fp)
 8007ff0:	10c0f017 	ldw	r3,960(r2)
 8007ff4:	e0800717 	ldw	r2,28(fp)
 8007ff8:	10813c03 	ldbu	r2,1264(r2)
 8007ffc:	10803fcc 	andi	r2,r2,255
 8008000:	1080201c 	xori	r2,r2,128
 8008004:	10bfe004 	addi	r2,r2,-128
 8008008:	e13ffc17 	ldw	r4,-16(fp)
 800800c:	180b883a 	mov	r5,r3
 8008010:	100d883a 	mov	r6,r2
 8008014:	80069d80 	call	80069d8 <emit_bits_s>
 8008018:	10803fcc 	andi	r2,r2,255
 800801c:	1000021e 	bne	r2,zero,8008028 <encode_one_block+0x1d0>
					return FALSE;
 8008020:	0005883a 	mov	r2,zero
 8008024:	00004f06 	br	8008164 <encode_one_block+0x30c>
				r -= 16;
 8008028:	94bffc04 	addi	r18,r18,-16
	for (k = 1; k <= Se; k++) {
		if ((temp = block[natural_order[k]]) == 0) {
			r++;
		} else {
			/* if run length > 15, must emit special run-length-16 codes (0xF0) */
			while (r > 15) {
 800802c:	90800408 	cmpgei	r2,r18,16
 8008030:	103fee1e 	bne	r2,zero,8007fec <encode_one_block+0x194>
				if (! emit_bits_s(state, actbl->ehufco[0xF0], actbl->ehufsi[0xF0]))
					return FALSE;
				r -= 16;
			}

			temp2 = temp;
 8008034:	8027883a 	mov	r19,r16
			if (temp < 0) {
 8008038:	8000020e 	bge	r16,zero,8008044 <encode_one_block+0x1ec>
				temp = -temp;		/* temp is abs value of input */
 800803c:	0421c83a 	sub	r16,zero,r16
				/* This code assumes we are on a two's complement machine */
				temp2--;
 8008040:	9cffffc4 	addi	r19,r19,-1
			}

			/* Find the number of bits needed for the magnitude of the coefficient */
			nbits = 1;		/* there must be at least one 1 bit */
 8008044:	04400044 	movi	r17,1
			while ((temp >>= 1))
 8008048:	00000106 	br	8008050 <encode_one_block+0x1f8>
				nbits++;
 800804c:	8c400044 	addi	r17,r17,1
				temp2--;
			}

			/* Find the number of bits needed for the magnitude of the coefficient */
			nbits = 1;		/* there must be at least one 1 bit */
			while ((temp >>= 1))
 8008050:	8021d07a 	srai	r16,r16,1
 8008054:	803ffd1e 	bne	r16,zero,800804c <encode_one_block+0x1f4>
				nbits++;
			/* Check for out-of-range coefficient values */
			if (nbits > MAX_COEF_BITS)
 8008058:	888002d0 	cmplti	r2,r17,11
 800805c:	10000d1e 	bne	r2,zero,8008094 <encode_one_block+0x23c>
				ERREXIT(state->cinfo, JERR_BAD_DCT_COEF);
 8008060:	e0bffc17 	ldw	r2,-16(fp)
 8008064:	10800817 	ldw	r2,32(r2)
 8008068:	10800017 	ldw	r2,0(r2)
 800806c:	00c00184 	movi	r3,6
 8008070:	10c00515 	stw	r3,20(r2)
 8008074:	e0bffc17 	ldw	r2,-16(fp)
 8008078:	10800817 	ldw	r2,32(r2)
 800807c:	10800017 	ldw	r2,0(r2)
 8008080:	10c00017 	ldw	r3,0(r2)
 8008084:	e0bffc17 	ldw	r2,-16(fp)
 8008088:	10800817 	ldw	r2,32(r2)
 800808c:	1009883a 	mov	r4,r2
 8008090:	183ee83a 	callr	r3

			/* Emit Huffman symbol for run length / number of bits */
			i = (r << 4) + nbits;
 8008094:	9004913a 	slli	r2,r18,4
 8008098:	1461883a 	add	r16,r2,r17
			if (! emit_bits_s(state, actbl->ehufco[i], actbl->ehufsi[i]))
 800809c:	e0c00717 	ldw	r3,28(fp)
 80080a0:	8405883a 	add	r2,r16,r16
 80080a4:	1085883a 	add	r2,r2,r2
 80080a8:	1885883a 	add	r2,r3,r2
 80080ac:	10c00017 	ldw	r3,0(r2)
 80080b0:	e0800717 	ldw	r2,28(fp)
 80080b4:	1405883a 	add	r2,r2,r16
 80080b8:	10810004 	addi	r2,r2,1024
 80080bc:	10800003 	ldbu	r2,0(r2)
 80080c0:	10803fcc 	andi	r2,r2,255
 80080c4:	1080201c 	xori	r2,r2,128
 80080c8:	10bfe004 	addi	r2,r2,-128
 80080cc:	e13ffc17 	ldw	r4,-16(fp)
 80080d0:	180b883a 	mov	r5,r3
 80080d4:	100d883a 	mov	r6,r2
 80080d8:	80069d80 	call	80069d8 <emit_bits_s>
 80080dc:	10803fcc 	andi	r2,r2,255
 80080e0:	1000021e 	bne	r2,zero,80080ec <encode_one_block+0x294>
				return FALSE;
 80080e4:	0005883a 	mov	r2,zero
 80080e8:	00001e06 	br	8008164 <encode_one_block+0x30c>

			/* Emit that number of bits of the value, if positive, */
			/* or the complement of its magnitude, if negative. */
			if (! emit_bits_s(state, (unsigned int) temp2, nbits))
 80080ec:	9805883a 	mov	r2,r19
 80080f0:	e13ffc17 	ldw	r4,-16(fp)
 80080f4:	100b883a 	mov	r5,r2
 80080f8:	880d883a 	mov	r6,r17
 80080fc:	80069d80 	call	80069d8 <emit_bits_s>
 8008100:	10803fcc 	andi	r2,r2,255
 8008104:	1000021e 	bne	r2,zero,8008110 <encode_one_block+0x2b8>
				return FALSE;
 8008108:	0005883a 	mov	r2,zero
 800810c:	00001506 	br	8008164 <encode_one_block+0x30c>

			r = 0;
 8008110:	0025883a 	mov	r18,zero

	/* Encode the AC coefficients per section F.1.2.2 */

	r = 0;			/* r = run length of zeros */

	for (k = 1; k <= Se; k++) {
 8008114:	a5000044 	addi	r20,r20,1
 8008118:	e0bffa17 	ldw	r2,-24(fp)
 800811c:	153fa30e 	bge	r2,r20,8007fac <encode_one_block+0x154>
			r = 0;
		}
	}

	/* If the last coef(s) were zero, emit an end-of-block code */
	if (r > 0)
 8008120:	04800f0e 	bge	zero,r18,8008160 <encode_one_block+0x308>
		if (! emit_bits_s(state, actbl->ehufco[0], actbl->ehufsi[0]))
 8008124:	e0800717 	ldw	r2,28(fp)
 8008128:	10c00017 	ldw	r3,0(r2)
 800812c:	e0800717 	ldw	r2,28(fp)
 8008130:	10810003 	ldbu	r2,1024(r2)
 8008134:	10803fcc 	andi	r2,r2,255
 8008138:	1080201c 	xori	r2,r2,128
 800813c:	10bfe004 	addi	r2,r2,-128
 8008140:	e13ffc17 	ldw	r4,-16(fp)
 8008144:	180b883a 	mov	r5,r3
 8008148:	100d883a 	mov	r6,r2
 800814c:	80069d80 	call	80069d8 <emit_bits_s>
 8008150:	10803fcc 	andi	r2,r2,255
 8008154:	1000021e 	bne	r2,zero,8008160 <encode_one_block+0x308>
			return FALSE;
 8008158:	0005883a 	mov	r2,zero
 800815c:	00000106 	br	8008164 <encode_one_block+0x30c>

	return TRUE;
 8008160:	00800044 	movi	r2,1
}
 8008164:	e037883a 	mov	sp,fp
 8008168:	dfc00617 	ldw	ra,24(sp)
 800816c:	df000517 	ldw	fp,20(sp)
 8008170:	dd000417 	ldw	r20,16(sp)
 8008174:	dcc00317 	ldw	r19,12(sp)
 8008178:	dc800217 	ldw	r18,8(sp)
 800817c:	dc400117 	ldw	r17,4(sp)
 8008180:	dc000017 	ldw	r16,0(sp)
 8008184:	dec00704 	addi	sp,sp,28
 8008188:	f800283a 	ret

0800818c <encode_mcu_huff>:
* Encode and output one MCU's worth of Huffman-compressed coefficients.
*/

METHODDEF(boolean)
	encode_mcu_huff (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
{
 800818c:	deffee04 	addi	sp,sp,-72
 8008190:	dfc01115 	stw	ra,68(sp)
 8008194:	df001015 	stw	fp,64(sp)
 8008198:	df001004 	addi	fp,sp,64
 800819c:	e13ffe15 	stw	r4,-8(fp)
 80081a0:	e17fff15 	stw	r5,-4(fp)
	huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 80081a4:	e0bffe17 	ldw	r2,-8(fp)
 80081a8:	10806417 	ldw	r2,400(r2)
 80081ac:	e0bff215 	stw	r2,-56(fp)
	working_state state;
	int blkn, ci;
	jpeg_component_info * compptr;

	/* Load up working state */
	state.next_output_byte = cinfo->dest->next_output_byte;
 80081b0:	e0bffe17 	ldw	r2,-8(fp)
 80081b4:	10800617 	ldw	r2,24(r2)
 80081b8:	10800017 	ldw	r2,0(r2)
 80081bc:	e0bff515 	stw	r2,-44(fp)
	state.free_in_buffer = cinfo->dest->free_in_buffer;
 80081c0:	e0bffe17 	ldw	r2,-8(fp)
 80081c4:	10800617 	ldw	r2,24(r2)
 80081c8:	10800117 	ldw	r2,4(r2)
 80081cc:	e0bff615 	stw	r2,-40(fp)
	ASSIGN_STATE(state.cur, entropy->saved);
 80081d0:	e0bff217 	ldw	r2,-56(fp)
 80081d4:	10c00317 	ldw	r3,12(r2)
 80081d8:	e0fff715 	stw	r3,-36(fp)
 80081dc:	10c00417 	ldw	r3,16(r2)
 80081e0:	e0fff815 	stw	r3,-32(fp)
 80081e4:	10c00517 	ldw	r3,20(r2)
 80081e8:	e0fff915 	stw	r3,-28(fp)
 80081ec:	10c00617 	ldw	r3,24(r2)
 80081f0:	e0fffa15 	stw	r3,-24(fp)
 80081f4:	10c00717 	ldw	r3,28(r2)
 80081f8:	e0fffb15 	stw	r3,-20(fp)
 80081fc:	10800817 	ldw	r2,32(r2)
 8008200:	e0bffc15 	stw	r2,-16(fp)
	state.cinfo = cinfo;
 8008204:	e0bffe17 	ldw	r2,-8(fp)
 8008208:	e0bffd15 	stw	r2,-12(fp)

	/* Emit restart marker if needed */
	if (cinfo->restart_interval) {
 800820c:	e0bffe17 	ldw	r2,-8(fp)
 8008210:	10803717 	ldw	r2,220(r2)
 8008214:	10000d26 	beq	r2,zero,800824c <encode_mcu_huff+0xc0>
		if (entropy->restarts_to_go == 0)
 8008218:	e0bff217 	ldw	r2,-56(fp)
 800821c:	10800917 	ldw	r2,36(r2)
 8008220:	10000a1e 	bne	r2,zero,800824c <encode_mcu_huff+0xc0>
			if (! emit_restart_s(&state, entropy->next_restart_num))
 8008224:	e0bff217 	ldw	r2,-56(fp)
 8008228:	10800a17 	ldw	r2,40(r2)
 800822c:	e0fff504 	addi	r3,fp,-44
 8008230:	1809883a 	mov	r4,r3
 8008234:	100b883a 	mov	r5,r2
 8008238:	80071080 	call	8007108 <emit_restart_s>
 800823c:	10803fcc 	andi	r2,r2,255
 8008240:	1000021e 	bne	r2,zero,800824c <encode_mcu_huff+0xc0>
				return FALSE;
 8008244:	0005883a 	mov	r2,zero
 8008248:	00008106 	br	8008450 <encode_mcu_huff+0x2c4>
	}

	/* Encode the MCU data blocks */
	for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800824c:	e03ff115 	stw	zero,-60(fp)
 8008250:	00004c06 	br	8008384 <encode_mcu_huff+0x1f8>
		ci = cinfo->MCU_membership[blkn];
 8008254:	e0fffe17 	ldw	r3,-8(fp)
 8008258:	e0bff117 	ldw	r2,-60(fp)
 800825c:	108012c4 	addi	r2,r2,75
 8008260:	1085883a 	add	r2,r2,r2
 8008264:	1085883a 	add	r2,r2,r2
 8008268:	1885883a 	add	r2,r3,r2
 800826c:	10800017 	ldw	r2,0(r2)
 8008270:	e0bff315 	stw	r2,-52(fp)
		compptr = cinfo->cur_comp_info[ci];
 8008274:	e0fffe17 	ldw	r3,-8(fp)
 8008278:	e0bff317 	ldw	r2,-52(fp)
 800827c:	10801104 	addi	r2,r2,68
 8008280:	1085883a 	add	r2,r2,r2
 8008284:	1085883a 	add	r2,r2,r2
 8008288:	1885883a 	add	r2,r3,r2
 800828c:	10800017 	ldw	r2,0(r2)
 8008290:	e0bff415 	stw	r2,-48(fp)
		if (! encode_one_block(&state,
			MCU_data[blkn][0], state.cur.last_dc_val[ci],
 8008294:	e0bff117 	ldw	r2,-60(fp)
 8008298:	1085883a 	add	r2,r2,r2
 800829c:	1085883a 	add	r2,r2,r2
 80082a0:	e0ffff17 	ldw	r3,-4(fp)
 80082a4:	1885883a 	add	r2,r3,r2

	/* Encode the MCU data blocks */
	for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
		ci = cinfo->MCU_membership[blkn];
		compptr = cinfo->cur_comp_info[ci];
		if (! encode_one_block(&state,
 80082a8:	11400017 	ldw	r5,0(r2)
 80082ac:	e0bff317 	ldw	r2,-52(fp)
 80082b0:	10800104 	addi	r2,r2,4
 80082b4:	1085883a 	add	r2,r2,r2
 80082b8:	1085883a 	add	r2,r2,r2
 80082bc:	e0fff104 	addi	r3,fp,-60
 80082c0:	1885883a 	add	r2,r3,r2
 80082c4:	10800404 	addi	r2,r2,16
 80082c8:	11800017 	ldw	r6,0(r2)
			MCU_data[blkn][0], state.cur.last_dc_val[ci],
			entropy->dc_derived_tbls[compptr->dc_tbl_no],
 80082cc:	e0bff417 	ldw	r2,-48(fp)
 80082d0:	10800517 	ldw	r2,20(r2)
 80082d4:	e0fff217 	ldw	r3,-56(fp)

	/* Encode the MCU data blocks */
	for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
		ci = cinfo->MCU_membership[blkn];
		compptr = cinfo->cur_comp_info[ci];
		if (! encode_one_block(&state,
 80082d8:	108002c4 	addi	r2,r2,11
 80082dc:	1085883a 	add	r2,r2,r2
 80082e0:	1085883a 	add	r2,r2,r2
 80082e4:	1885883a 	add	r2,r3,r2
 80082e8:	10c00017 	ldw	r3,0(r2)
			MCU_data[blkn][0], state.cur.last_dc_val[ci],
			entropy->dc_derived_tbls[compptr->dc_tbl_no],
			entropy->ac_derived_tbls[compptr->ac_tbl_no]))
 80082ec:	e0bff417 	ldw	r2,-48(fp)
 80082f0:	10800617 	ldw	r2,24(r2)
 80082f4:	e13ff217 	ldw	r4,-56(fp)

	/* Encode the MCU data blocks */
	for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
		ci = cinfo->MCU_membership[blkn];
		compptr = cinfo->cur_comp_info[ci];
		if (! encode_one_block(&state,
 80082f8:	108003c4 	addi	r2,r2,15
 80082fc:	1085883a 	add	r2,r2,r2
 8008300:	1085883a 	add	r2,r2,r2
 8008304:	2085883a 	add	r2,r4,r2
 8008308:	11000017 	ldw	r4,0(r2)
 800830c:	e0bff504 	addi	r2,fp,-44
 8008310:	d9000015 	stw	r4,0(sp)
 8008314:	1009883a 	mov	r4,r2
 8008318:	180f883a 	mov	r7,r3
 800831c:	8007e580 	call	8007e58 <encode_one_block>
 8008320:	10803fcc 	andi	r2,r2,255
 8008324:	1000021e 	bne	r2,zero,8008330 <encode_mcu_huff+0x1a4>
			MCU_data[blkn][0], state.cur.last_dc_val[ci],
			entropy->dc_derived_tbls[compptr->dc_tbl_no],
			entropy->ac_derived_tbls[compptr->ac_tbl_no]))
			return FALSE;
 8008328:	0005883a 	mov	r2,zero
 800832c:	00004806 	br	8008450 <encode_mcu_huff+0x2c4>
		/* Update last_dc_val */
		state.cur.last_dc_val[ci] = MCU_data[blkn][0][0];
 8008330:	e0bff117 	ldw	r2,-60(fp)
 8008334:	1085883a 	add	r2,r2,r2
 8008338:	1085883a 	add	r2,r2,r2
 800833c:	e0ffff17 	ldw	r3,-4(fp)
 8008340:	1885883a 	add	r2,r3,r2
 8008344:	10800017 	ldw	r2,0(r2)
 8008348:	1080000b 	ldhu	r2,0(r2)
 800834c:	10ffffcc 	andi	r3,r2,65535
 8008350:	18e0001c 	xori	r3,r3,32768
 8008354:	18e00004 	addi	r3,r3,-32768
 8008358:	e0bff317 	ldw	r2,-52(fp)
 800835c:	10800104 	addi	r2,r2,4
 8008360:	1085883a 	add	r2,r2,r2
 8008364:	1085883a 	add	r2,r2,r2
 8008368:	e13ff104 	addi	r4,fp,-60
 800836c:	2085883a 	add	r2,r4,r2
 8008370:	10800404 	addi	r2,r2,16
 8008374:	10c00015 	stw	r3,0(r2)
			if (! emit_restart_s(&state, entropy->next_restart_num))
				return FALSE;
	}

	/* Encode the MCU data blocks */
	for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8008378:	e0bff117 	ldw	r2,-60(fp)
 800837c:	10800044 	addi	r2,r2,1
 8008380:	e0bff115 	stw	r2,-60(fp)
 8008384:	e0bffe17 	ldw	r2,-8(fp)
 8008388:	10804a17 	ldw	r2,296(r2)
 800838c:	e0fff117 	ldw	r3,-60(fp)
 8008390:	18bfb016 	blt	r3,r2,8008254 <encode_mcu_huff+0xc8>
		/* Update last_dc_val */
		state.cur.last_dc_val[ci] = MCU_data[blkn][0][0];
	}

	/* Completed MCU, so update state */
	cinfo->dest->next_output_byte = state.next_output_byte;
 8008394:	e0bffe17 	ldw	r2,-8(fp)
 8008398:	10800617 	ldw	r2,24(r2)
 800839c:	e0fff517 	ldw	r3,-44(fp)
 80083a0:	10c00015 	stw	r3,0(r2)
	cinfo->dest->free_in_buffer = state.free_in_buffer;
 80083a4:	e0bffe17 	ldw	r2,-8(fp)
 80083a8:	10800617 	ldw	r2,24(r2)
 80083ac:	e0fff617 	ldw	r3,-40(fp)
 80083b0:	10c00115 	stw	r3,4(r2)
	ASSIGN_STATE(entropy->saved, state.cur);
 80083b4:	e0bff217 	ldw	r2,-56(fp)
 80083b8:	e0fff717 	ldw	r3,-36(fp)
 80083bc:	10c00315 	stw	r3,12(r2)
 80083c0:	e0fff817 	ldw	r3,-32(fp)
 80083c4:	10c00415 	stw	r3,16(r2)
 80083c8:	e0fff917 	ldw	r3,-28(fp)
 80083cc:	10c00515 	stw	r3,20(r2)
 80083d0:	e0fffa17 	ldw	r3,-24(fp)
 80083d4:	10c00615 	stw	r3,24(r2)
 80083d8:	e0fffb17 	ldw	r3,-20(fp)
 80083dc:	10c00715 	stw	r3,28(r2)
 80083e0:	e0fffc17 	ldw	r3,-16(fp)
 80083e4:	10c00815 	stw	r3,32(r2)

	/* Update restart-interval state too */
	if (cinfo->restart_interval) {
 80083e8:	e0bffe17 	ldw	r2,-8(fp)
 80083ec:	10803717 	ldw	r2,220(r2)
 80083f0:	10001626 	beq	r2,zero,800844c <encode_mcu_huff+0x2c0>
		if (entropy->restarts_to_go == 0) {
 80083f4:	e0bff217 	ldw	r2,-56(fp)
 80083f8:	10800917 	ldw	r2,36(r2)
 80083fc:	10000e1e 	bne	r2,zero,8008438 <encode_mcu_huff+0x2ac>
			entropy->restarts_to_go = cinfo->restart_interval;
 8008400:	e0bffe17 	ldw	r2,-8(fp)
 8008404:	10c03717 	ldw	r3,220(r2)
 8008408:	e0bff217 	ldw	r2,-56(fp)
 800840c:	10c00915 	stw	r3,36(r2)
			entropy->next_restart_num++;
 8008410:	e0bff217 	ldw	r2,-56(fp)
 8008414:	10800a17 	ldw	r2,40(r2)
 8008418:	10c00044 	addi	r3,r2,1
 800841c:	e0bff217 	ldw	r2,-56(fp)
 8008420:	10c00a15 	stw	r3,40(r2)
			entropy->next_restart_num &= 7;
 8008424:	e0bff217 	ldw	r2,-56(fp)
 8008428:	10800a17 	ldw	r2,40(r2)
 800842c:	10c001cc 	andi	r3,r2,7
 8008430:	e0bff217 	ldw	r2,-56(fp)
 8008434:	10c00a15 	stw	r3,40(r2)
		}
		entropy->restarts_to_go--;
 8008438:	e0bff217 	ldw	r2,-56(fp)
 800843c:	10800917 	ldw	r2,36(r2)
 8008440:	10ffffc4 	addi	r3,r2,-1
 8008444:	e0bff217 	ldw	r2,-56(fp)
 8008448:	10c00915 	stw	r3,36(r2)
	}

	return TRUE;
 800844c:	00800044 	movi	r2,1
}
 8008450:	e037883a 	mov	sp,fp
 8008454:	dfc00117 	ldw	ra,4(sp)
 8008458:	df000017 	ldw	fp,0(sp)
 800845c:	dec00204 	addi	sp,sp,8
 8008460:	f800283a 	ret

08008464 <finish_pass_huff>:
* Finish up at the end of a Huffman-compressed scan.
*/

METHODDEF(void)
	finish_pass_huff (j_compress_ptr cinfo)
{
 8008464:	defff304 	addi	sp,sp,-52
 8008468:	dfc00c15 	stw	ra,48(sp)
 800846c:	df000b15 	stw	fp,44(sp)
 8008470:	df000b04 	addi	fp,sp,44
 8008474:	e13fff15 	stw	r4,-4(fp)
	huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 8008478:	e0bfff17 	ldw	r2,-4(fp)
 800847c:	10806417 	ldw	r2,400(r2)
 8008480:	e0bff515 	stw	r2,-44(fp)
	working_state state;

	if (cinfo->progressive_mode) {
 8008484:	e0bfff17 	ldw	r2,-4(fp)
 8008488:	10803d03 	ldbu	r2,244(r2)
 800848c:	10803fcc 	andi	r2,r2,255
 8008490:	10001926 	beq	r2,zero,80084f8 <finish_pass_huff+0x94>
		entropy->next_output_byte = cinfo->dest->next_output_byte;
 8008494:	e0bfff17 	ldw	r2,-4(fp)
 8008498:	10800617 	ldw	r2,24(r2)
 800849c:	10c00017 	ldw	r3,0(r2)
 80084a0:	e0bff517 	ldw	r2,-44(fp)
 80084a4:	10c01c15 	stw	r3,112(r2)
		entropy->free_in_buffer = cinfo->dest->free_in_buffer;
 80084a8:	e0bfff17 	ldw	r2,-4(fp)
 80084ac:	10800617 	ldw	r2,24(r2)
 80084b0:	10c00117 	ldw	r3,4(r2)
 80084b4:	e0bff517 	ldw	r2,-44(fp)
 80084b8:	10c01d15 	stw	r3,116(r2)

		/* Flush out any buffered data */
		emit_eobrun(entropy);
 80084bc:	e13ff517 	ldw	r4,-44(fp)
 80084c0:	80070000 	call	8007000 <emit_eobrun>
		flush_bits_e(entropy);
 80084c4:	e13ff517 	ldw	r4,-44(fp)
 80084c8:	8006d680 	call	8006d68 <flush_bits_e>

		cinfo->dest->next_output_byte = entropy->next_output_byte;
 80084cc:	e0bfff17 	ldw	r2,-4(fp)
 80084d0:	10800617 	ldw	r2,24(r2)
 80084d4:	e0fff517 	ldw	r3,-44(fp)
 80084d8:	18c01c17 	ldw	r3,112(r3)
 80084dc:	10c00015 	stw	r3,0(r2)
		cinfo->dest->free_in_buffer = entropy->free_in_buffer;
 80084e0:	e0bfff17 	ldw	r2,-4(fp)
 80084e4:	10800617 	ldw	r2,24(r2)
 80084e8:	e0fff517 	ldw	r3,-44(fp)
 80084ec:	18c01d17 	ldw	r3,116(r3)
 80084f0:	10c00115 	stw	r3,4(r2)
 80084f4:	00003a06 	br	80085e0 <finish_pass_huff+0x17c>
	} else {
		/* Load up working state ... flush_bits needs it */
		state.next_output_byte = cinfo->dest->next_output_byte;
 80084f8:	e0bfff17 	ldw	r2,-4(fp)
 80084fc:	10800617 	ldw	r2,24(r2)
 8008500:	10800017 	ldw	r2,0(r2)
 8008504:	e0bff615 	stw	r2,-40(fp)
		state.free_in_buffer = cinfo->dest->free_in_buffer;
 8008508:	e0bfff17 	ldw	r2,-4(fp)
 800850c:	10800617 	ldw	r2,24(r2)
 8008510:	10800117 	ldw	r2,4(r2)
 8008514:	e0bff715 	stw	r2,-36(fp)
		ASSIGN_STATE(state.cur, entropy->saved);
 8008518:	e0bff517 	ldw	r2,-44(fp)
 800851c:	10c00317 	ldw	r3,12(r2)
 8008520:	e0fff815 	stw	r3,-32(fp)
 8008524:	10c00417 	ldw	r3,16(r2)
 8008528:	e0fff915 	stw	r3,-28(fp)
 800852c:	10c00517 	ldw	r3,20(r2)
 8008530:	e0fffa15 	stw	r3,-24(fp)
 8008534:	10c00617 	ldw	r3,24(r2)
 8008538:	e0fffb15 	stw	r3,-20(fp)
 800853c:	10c00717 	ldw	r3,28(r2)
 8008540:	e0fffc15 	stw	r3,-16(fp)
 8008544:	10800817 	ldw	r2,32(r2)
 8008548:	e0bffd15 	stw	r2,-12(fp)
		state.cinfo = cinfo;
 800854c:	e0bfff17 	ldw	r2,-4(fp)
 8008550:	e0bffe15 	stw	r2,-8(fp)

		/* Flush out the last data */
		if (! flush_bits_s(&state))
 8008554:	e0bff604 	addi	r2,fp,-40
 8008558:	1009883a 	mov	r4,r2
 800855c:	8006d0c0 	call	8006d0c <flush_bits_s>
 8008560:	10803fcc 	andi	r2,r2,255
 8008564:	1000091e 	bne	r2,zero,800858c <finish_pass_huff+0x128>
			ERREXIT(cinfo, JERR_CANT_SUSPEND);
 8008568:	e0bfff17 	ldw	r2,-4(fp)
 800856c:	10800017 	ldw	r2,0(r2)
 8008570:	00c00644 	movi	r3,25
 8008574:	10c00515 	stw	r3,20(r2)
 8008578:	e0bfff17 	ldw	r2,-4(fp)
 800857c:	10800017 	ldw	r2,0(r2)
 8008580:	10800017 	ldw	r2,0(r2)
 8008584:	e13fff17 	ldw	r4,-4(fp)
 8008588:	103ee83a 	callr	r2

		/* Update state */
		cinfo->dest->next_output_byte = state.next_output_byte;
 800858c:	e0bfff17 	ldw	r2,-4(fp)
 8008590:	10800617 	ldw	r2,24(r2)
 8008594:	e0fff617 	ldw	r3,-40(fp)
 8008598:	10c00015 	stw	r3,0(r2)
		cinfo->dest->free_in_buffer = state.free_in_buffer;
 800859c:	e0bfff17 	ldw	r2,-4(fp)
 80085a0:	10800617 	ldw	r2,24(r2)
 80085a4:	e0fff717 	ldw	r3,-36(fp)
 80085a8:	10c00115 	stw	r3,4(r2)
		ASSIGN_STATE(entropy->saved, state.cur);
 80085ac:	e0bff517 	ldw	r2,-44(fp)
 80085b0:	e0fff817 	ldw	r3,-32(fp)
 80085b4:	10c00315 	stw	r3,12(r2)
 80085b8:	e0fff917 	ldw	r3,-28(fp)
 80085bc:	10c00415 	stw	r3,16(r2)
 80085c0:	e0fffa17 	ldw	r3,-24(fp)
 80085c4:	10c00515 	stw	r3,20(r2)
 80085c8:	e0fffb17 	ldw	r3,-20(fp)
 80085cc:	10c00615 	stw	r3,24(r2)
 80085d0:	e0fffc17 	ldw	r3,-16(fp)
 80085d4:	10c00715 	stw	r3,28(r2)
 80085d8:	e0fffd17 	ldw	r3,-12(fp)
 80085dc:	10c00815 	stw	r3,32(r2)
	}
}
 80085e0:	e037883a 	mov	sp,fp
 80085e4:	dfc00117 	ldw	ra,4(sp)
 80085e8:	df000017 	ldw	fp,0(sp)
 80085ec:	dec00204 	addi	sp,sp,8
 80085f0:	f800283a 	ret

080085f4 <htest_one_block>:
/* Process a single block's worth of coefficients */

LOCAL(void)
	htest_one_block (j_compress_ptr cinfo, JCOEFPTR block, int last_dc_val,
	long dc_counts[], long ac_counts[])
{
 80085f4:	defff404 	addi	sp,sp,-48
 80085f8:	dfc00b15 	stw	ra,44(sp)
 80085fc:	df000a15 	stw	fp,40(sp)
 8008600:	dcc00915 	stw	r19,36(sp)
 8008604:	dc800815 	stw	r18,32(sp)
 8008608:	dc400715 	stw	r17,28(sp)
 800860c:	dc000615 	stw	r16,24(sp)
 8008610:	df000604 	addi	fp,sp,24
 8008614:	e13ffc15 	stw	r4,-16(fp)
 8008618:	e17ffd15 	stw	r5,-12(fp)
 800861c:	e1bffe15 	stw	r6,-8(fp)
 8008620:	e1ffff15 	stw	r7,-4(fp)
	register int temp;
	register int nbits;
	register int k, r;
	int Se = cinfo->lim_Se;
 8008624:	e0bffc17 	ldw	r2,-16(fp)
 8008628:	10805b17 	ldw	r2,364(r2)
 800862c:	e0bffa15 	stw	r2,-24(fp)
	const int * natural_order = cinfo->natural_order;
 8008630:	e0bffc17 	ldw	r2,-16(fp)
 8008634:	10805a17 	ldw	r2,360(r2)
 8008638:	e0bffb15 	stw	r2,-20(fp)

	/* Encode the DC coefficient difference per section F.1.2.1 */

	temp = block[0] - last_dc_val;
 800863c:	e0bffd17 	ldw	r2,-12(fp)
 8008640:	1080000b 	ldhu	r2,0(r2)
 8008644:	10ffffcc 	andi	r3,r2,65535
 8008648:	18e0001c 	xori	r3,r3,32768
 800864c:	18e00004 	addi	r3,r3,-32768
 8008650:	e0bffe17 	ldw	r2,-8(fp)
 8008654:	18a1c83a 	sub	r16,r3,r2
	if (temp < 0)
 8008658:	8000010e 	bge	r16,zero,8008660 <htest_one_block+0x6c>
		temp = -temp;
 800865c:	0421c83a 	sub	r16,zero,r16

	/* Find the number of bits needed for the magnitude of the coefficient */
	nbits = 0;
 8008660:	0023883a 	mov	r17,zero
	while (temp) {
 8008664:	00000206 	br	8008670 <htest_one_block+0x7c>
		nbits++;
 8008668:	8c400044 	addi	r17,r17,1
		temp >>= 1;
 800866c:	8021d07a 	srai	r16,r16,1
	if (temp < 0)
		temp = -temp;

	/* Find the number of bits needed for the magnitude of the coefficient */
	nbits = 0;
	while (temp) {
 8008670:	803ffd1e 	bne	r16,zero,8008668 <htest_one_block+0x74>
		temp >>= 1;
	}
	/* Check for out-of-range coefficient values.
	* Since we're encoding a difference, the range limit is twice as much.
	*/
	if (nbits > MAX_COEF_BITS+1)
 8008674:	88800310 	cmplti	r2,r17,12
 8008678:	1000091e 	bne	r2,zero,80086a0 <htest_one_block+0xac>
		ERREXIT(cinfo, JERR_BAD_DCT_COEF);
 800867c:	e0bffc17 	ldw	r2,-16(fp)
 8008680:	10800017 	ldw	r2,0(r2)
 8008684:	00c00184 	movi	r3,6
 8008688:	10c00515 	stw	r3,20(r2)
 800868c:	e0bffc17 	ldw	r2,-16(fp)
 8008690:	10800017 	ldw	r2,0(r2)
 8008694:	10800017 	ldw	r2,0(r2)
 8008698:	e13ffc17 	ldw	r4,-16(fp)
 800869c:	103ee83a 	callr	r2

	/* Count the Huffman symbol for the number of bits */
	dc_counts[nbits]++;
 80086a0:	8805883a 	mov	r2,r17
 80086a4:	1085883a 	add	r2,r2,r2
 80086a8:	1085883a 	add	r2,r2,r2
 80086ac:	e0ffff17 	ldw	r3,-4(fp)
 80086b0:	1885883a 	add	r2,r3,r2
 80086b4:	10c00017 	ldw	r3,0(r2)
 80086b8:	18c00044 	addi	r3,r3,1
 80086bc:	10c00015 	stw	r3,0(r2)

	/* Encode the AC coefficients per section F.1.2.2 */

	r = 0;			/* r = run length of zeros */
 80086c0:	0025883a 	mov	r18,zero

	for (k = 1; k <= Se; k++) {
 80086c4:	04c00044 	movi	r19,1
 80086c8:	00003506 	br	80087a0 <htest_one_block+0x1ac>
		if ((temp = block[natural_order[k]]) == 0) {
 80086cc:	9805883a 	mov	r2,r19
 80086d0:	1085883a 	add	r2,r2,r2
 80086d4:	1085883a 	add	r2,r2,r2
 80086d8:	e0fffb17 	ldw	r3,-20(fp)
 80086dc:	1885883a 	add	r2,r3,r2
 80086e0:	10800017 	ldw	r2,0(r2)
 80086e4:	1085883a 	add	r2,r2,r2
 80086e8:	e0fffd17 	ldw	r3,-12(fp)
 80086ec:	1885883a 	add	r2,r3,r2
 80086f0:	1080000b 	ldhu	r2,0(r2)
 80086f4:	143fffcc 	andi	r16,r2,65535
 80086f8:	8420001c 	xori	r16,r16,32768
 80086fc:	84200004 	addi	r16,r16,-32768
 8008700:	8000081e 	bne	r16,zero,8008724 <htest_one_block+0x130>
			r++;
 8008704:	94800044 	addi	r18,r18,1
 8008708:	00002406 	br	800879c <htest_one_block+0x1a8>
		} else {
			/* if run length > 15, must emit special run-length-16 codes (0xF0) */
			while (r > 15) {
				ac_counts[0xF0]++;
 800870c:	e0800617 	ldw	r2,24(fp)
 8008710:	1080f004 	addi	r2,r2,960
 8008714:	10c00017 	ldw	r3,0(r2)
 8008718:	18c00044 	addi	r3,r3,1
 800871c:	10c00015 	stw	r3,0(r2)
				r -= 16;
 8008720:	94bffc04 	addi	r18,r18,-16
	for (k = 1; k <= Se; k++) {
		if ((temp = block[natural_order[k]]) == 0) {
			r++;
		} else {
			/* if run length > 15, must emit special run-length-16 codes (0xF0) */
			while (r > 15) {
 8008724:	90800408 	cmpgei	r2,r18,16
 8008728:	103ff81e 	bne	r2,zero,800870c <htest_one_block+0x118>
				ac_counts[0xF0]++;
				r -= 16;
			}

			/* Find the number of bits needed for the magnitude of the coefficient */
			if (temp < 0)
 800872c:	8000010e 	bge	r16,zero,8008734 <htest_one_block+0x140>
				temp = -temp;
 8008730:	0421c83a 	sub	r16,zero,r16

			/* Find the number of bits needed for the magnitude of the coefficient */
			nbits = 1;		/* there must be at least one 1 bit */
 8008734:	04400044 	movi	r17,1
			while ((temp >>= 1))
 8008738:	00000106 	br	8008740 <htest_one_block+0x14c>
				nbits++;
 800873c:	8c400044 	addi	r17,r17,1
			if (temp < 0)
				temp = -temp;

			/* Find the number of bits needed for the magnitude of the coefficient */
			nbits = 1;		/* there must be at least one 1 bit */
			while ((temp >>= 1))
 8008740:	8021d07a 	srai	r16,r16,1
 8008744:	803ffd1e 	bne	r16,zero,800873c <htest_one_block+0x148>
				nbits++;
			/* Check for out-of-range coefficient values */
			if (nbits > MAX_COEF_BITS)
 8008748:	888002d0 	cmplti	r2,r17,11
 800874c:	1000091e 	bne	r2,zero,8008774 <htest_one_block+0x180>
				ERREXIT(cinfo, JERR_BAD_DCT_COEF);
 8008750:	e0bffc17 	ldw	r2,-16(fp)
 8008754:	10800017 	ldw	r2,0(r2)
 8008758:	00c00184 	movi	r3,6
 800875c:	10c00515 	stw	r3,20(r2)
 8008760:	e0bffc17 	ldw	r2,-16(fp)
 8008764:	10800017 	ldw	r2,0(r2)
 8008768:	10800017 	ldw	r2,0(r2)
 800876c:	e13ffc17 	ldw	r4,-16(fp)
 8008770:	103ee83a 	callr	r2

			/* Count Huffman symbol for run length / number of bits */
			ac_counts[(r << 4) + nbits]++;
 8008774:	9004913a 	slli	r2,r18,4
 8008778:	1445883a 	add	r2,r2,r17
 800877c:	1085883a 	add	r2,r2,r2
 8008780:	1085883a 	add	r2,r2,r2
 8008784:	e0c00617 	ldw	r3,24(fp)
 8008788:	1885883a 	add	r2,r3,r2
 800878c:	10c00017 	ldw	r3,0(r2)
 8008790:	18c00044 	addi	r3,r3,1
 8008794:	10c00015 	stw	r3,0(r2)

			r = 0;
 8008798:	0025883a 	mov	r18,zero

	/* Encode the AC coefficients per section F.1.2.2 */

	r = 0;			/* r = run length of zeros */

	for (k = 1; k <= Se; k++) {
 800879c:	9cc00044 	addi	r19,r19,1
 80087a0:	e0bffa17 	ldw	r2,-24(fp)
 80087a4:	14ffc90e 	bge	r2,r19,80086cc <htest_one_block+0xd8>
			r = 0;
		}
	}

	/* If the last coef(s) were zero, emit an end-of-block code */
	if (r > 0)
 80087a8:	0480050e 	bge	zero,r18,80087c0 <htest_one_block+0x1cc>
		ac_counts[0]++;
 80087ac:	e0800617 	ldw	r2,24(fp)
 80087b0:	10800017 	ldw	r2,0(r2)
 80087b4:	10c00044 	addi	r3,r2,1
 80087b8:	e0800617 	ldw	r2,24(fp)
 80087bc:	10c00015 	stw	r3,0(r2)
}
 80087c0:	e037883a 	mov	sp,fp
 80087c4:	dfc00517 	ldw	ra,20(sp)
 80087c8:	df000417 	ldw	fp,16(sp)
 80087cc:	dcc00317 	ldw	r19,12(sp)
 80087d0:	dc800217 	ldw	r18,8(sp)
 80087d4:	dc400117 	ldw	r17,4(sp)
 80087d8:	dc000017 	ldw	r16,0(sp)
 80087dc:	dec00604 	addi	sp,sp,24
 80087e0:	f800283a 	ret

080087e4 <encode_mcu_gather>:
* No data is actually output, so no suspension return is possible.
*/

METHODDEF(boolean)
	encode_mcu_gather (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
{
 80087e4:	defff704 	addi	sp,sp,-36
 80087e8:	dfc00815 	stw	ra,32(sp)
 80087ec:	df000715 	stw	fp,28(sp)
 80087f0:	df000704 	addi	fp,sp,28
 80087f4:	e13ffe15 	stw	r4,-8(fp)
 80087f8:	e17fff15 	stw	r5,-4(fp)
	huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 80087fc:	e0bffe17 	ldw	r2,-8(fp)
 8008800:	10806417 	ldw	r2,400(r2)
 8008804:	e0bffc15 	stw	r2,-16(fp)
	int blkn, ci;
	jpeg_component_info * compptr;

	/* Take care of restart intervals if needed */
	if (cinfo->restart_interval) {
 8008808:	e0bffe17 	ldw	r2,-8(fp)
 800880c:	10803717 	ldw	r2,220(r2)
 8008810:	10001c26 	beq	r2,zero,8008884 <encode_mcu_gather+0xa0>
		if (entropy->restarts_to_go == 0) {
 8008814:	e0bffc17 	ldw	r2,-16(fp)
 8008818:	10800917 	ldw	r2,36(r2)
 800881c:	1000141e 	bne	r2,zero,8008870 <encode_mcu_gather+0x8c>
			/* Re-initialize DC predictions to 0 */
			for (ci = 0; ci < cinfo->comps_in_scan; ci++)
 8008820:	e03ffb15 	stw	zero,-20(fp)
 8008824:	00000a06 	br	8008850 <encode_mcu_gather+0x6c>
				entropy->saved.last_dc_val[ci] = 0;
 8008828:	e0fffc17 	ldw	r3,-16(fp)
 800882c:	e0bffb17 	ldw	r2,-20(fp)
 8008830:	10800144 	addi	r2,r2,5
 8008834:	1085883a 	add	r2,r2,r2
 8008838:	1085883a 	add	r2,r2,r2
 800883c:	1885883a 	add	r2,r3,r2
 8008840:	10000015 	stw	zero,0(r2)

	/* Take care of restart intervals if needed */
	if (cinfo->restart_interval) {
		if (entropy->restarts_to_go == 0) {
			/* Re-initialize DC predictions to 0 */
			for (ci = 0; ci < cinfo->comps_in_scan; ci++)
 8008844:	e0bffb17 	ldw	r2,-20(fp)
 8008848:	10800044 	addi	r2,r2,1
 800884c:	e0bffb15 	stw	r2,-20(fp)
 8008850:	e0bffe17 	ldw	r2,-8(fp)
 8008854:	10804317 	ldw	r2,268(r2)
 8008858:	e0fffb17 	ldw	r3,-20(fp)
 800885c:	18bff216 	blt	r3,r2,8008828 <encode_mcu_gather+0x44>
				entropy->saved.last_dc_val[ci] = 0;
			/* Update restart state */
			entropy->restarts_to_go = cinfo->restart_interval;
 8008860:	e0bffe17 	ldw	r2,-8(fp)
 8008864:	10c03717 	ldw	r3,220(r2)
 8008868:	e0bffc17 	ldw	r2,-16(fp)
 800886c:	10c00915 	stw	r3,36(r2)
		}
		entropy->restarts_to_go--;
 8008870:	e0bffc17 	ldw	r2,-16(fp)
 8008874:	10800917 	ldw	r2,36(r2)
 8008878:	10ffffc4 	addi	r3,r2,-1
 800887c:	e0bffc17 	ldw	r2,-16(fp)
 8008880:	10c00915 	stw	r3,36(r2)
	}

	for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8008884:	e03ffa15 	stw	zero,-24(fp)
 8008888:	00004506 	br	80089a0 <encode_mcu_gather+0x1bc>
		ci = cinfo->MCU_membership[blkn];
 800888c:	e0fffe17 	ldw	r3,-8(fp)
 8008890:	e0bffa17 	ldw	r2,-24(fp)
 8008894:	108012c4 	addi	r2,r2,75
 8008898:	1085883a 	add	r2,r2,r2
 800889c:	1085883a 	add	r2,r2,r2
 80088a0:	1885883a 	add	r2,r3,r2
 80088a4:	10800017 	ldw	r2,0(r2)
 80088a8:	e0bffb15 	stw	r2,-20(fp)
		compptr = cinfo->cur_comp_info[ci];
 80088ac:	e0fffe17 	ldw	r3,-8(fp)
 80088b0:	e0bffb17 	ldw	r2,-20(fp)
 80088b4:	10801104 	addi	r2,r2,68
 80088b8:	1085883a 	add	r2,r2,r2
 80088bc:	1085883a 	add	r2,r2,r2
 80088c0:	1885883a 	add	r2,r3,r2
 80088c4:	10800017 	ldw	r2,0(r2)
 80088c8:	e0bffd15 	stw	r2,-12(fp)
		htest_one_block(cinfo, MCU_data[blkn][0], entropy->saved.last_dc_val[ci],
 80088cc:	e0bffa17 	ldw	r2,-24(fp)
 80088d0:	1085883a 	add	r2,r2,r2
 80088d4:	1085883a 	add	r2,r2,r2
 80088d8:	e0ffff17 	ldw	r3,-4(fp)
 80088dc:	1885883a 	add	r2,r3,r2
 80088e0:	11400017 	ldw	r5,0(r2)
 80088e4:	e0fffc17 	ldw	r3,-16(fp)
 80088e8:	e0bffb17 	ldw	r2,-20(fp)
 80088ec:	10800144 	addi	r2,r2,5
 80088f0:	1085883a 	add	r2,r2,r2
 80088f4:	1085883a 	add	r2,r2,r2
 80088f8:	1885883a 	add	r2,r3,r2
 80088fc:	11800017 	ldw	r6,0(r2)
			entropy->dc_count_ptrs[compptr->dc_tbl_no],
 8008900:	e0bffd17 	ldw	r2,-12(fp)
 8008904:	10800517 	ldw	r2,20(r2)
 8008908:	e0fffc17 	ldw	r3,-16(fp)
	}

	for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
		ci = cinfo->MCU_membership[blkn];
		compptr = cinfo->cur_comp_info[ci];
		htest_one_block(cinfo, MCU_data[blkn][0], entropy->saved.last_dc_val[ci],
 800890c:	108004c4 	addi	r2,r2,19
 8008910:	1085883a 	add	r2,r2,r2
 8008914:	1085883a 	add	r2,r2,r2
 8008918:	1885883a 	add	r2,r3,r2
 800891c:	10c00017 	ldw	r3,0(r2)
			entropy->dc_count_ptrs[compptr->dc_tbl_no],
			entropy->ac_count_ptrs[compptr->ac_tbl_no]);
 8008920:	e0bffd17 	ldw	r2,-12(fp)
 8008924:	10800617 	ldw	r2,24(r2)
 8008928:	e13ffc17 	ldw	r4,-16(fp)
	}

	for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
		ci = cinfo->MCU_membership[blkn];
		compptr = cinfo->cur_comp_info[ci];
		htest_one_block(cinfo, MCU_data[blkn][0], entropy->saved.last_dc_val[ci],
 800892c:	108005c4 	addi	r2,r2,23
 8008930:	1085883a 	add	r2,r2,r2
 8008934:	1085883a 	add	r2,r2,r2
 8008938:	2085883a 	add	r2,r4,r2
 800893c:	10800017 	ldw	r2,0(r2)
 8008940:	d8800015 	stw	r2,0(sp)
 8008944:	e13ffe17 	ldw	r4,-8(fp)
 8008948:	180f883a 	mov	r7,r3
 800894c:	80085f40 	call	80085f4 <htest_one_block>
			entropy->dc_count_ptrs[compptr->dc_tbl_no],
			entropy->ac_count_ptrs[compptr->ac_tbl_no]);
		entropy->saved.last_dc_val[ci] = MCU_data[blkn][0][0];
 8008950:	e0bffa17 	ldw	r2,-24(fp)
 8008954:	1085883a 	add	r2,r2,r2
 8008958:	1085883a 	add	r2,r2,r2
 800895c:	e0ffff17 	ldw	r3,-4(fp)
 8008960:	1885883a 	add	r2,r3,r2
 8008964:	10800017 	ldw	r2,0(r2)
 8008968:	1080000b 	ldhu	r2,0(r2)
 800896c:	10ffffcc 	andi	r3,r2,65535
 8008970:	18e0001c 	xori	r3,r3,32768
 8008974:	18e00004 	addi	r3,r3,-32768
 8008978:	e13ffc17 	ldw	r4,-16(fp)
 800897c:	e0bffb17 	ldw	r2,-20(fp)
 8008980:	10800144 	addi	r2,r2,5
 8008984:	1085883a 	add	r2,r2,r2
 8008988:	1085883a 	add	r2,r2,r2
 800898c:	2085883a 	add	r2,r4,r2
 8008990:	10c00015 	stw	r3,0(r2)
			entropy->restarts_to_go = cinfo->restart_interval;
		}
		entropy->restarts_to_go--;
	}

	for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8008994:	e0bffa17 	ldw	r2,-24(fp)
 8008998:	10800044 	addi	r2,r2,1
 800899c:	e0bffa15 	stw	r2,-24(fp)
 80089a0:	e0bffe17 	ldw	r2,-8(fp)
 80089a4:	10804a17 	ldw	r2,296(r2)
 80089a8:	e0fffa17 	ldw	r3,-24(fp)
 80089ac:	18bfb716 	blt	r3,r2,800888c <encode_mcu_gather+0xa8>
			entropy->dc_count_ptrs[compptr->dc_tbl_no],
			entropy->ac_count_ptrs[compptr->ac_tbl_no]);
		entropy->saved.last_dc_val[ci] = MCU_data[blkn][0][0];
	}

	return TRUE;
 80089b0:	00800044 	movi	r2,1
}
 80089b4:	e037883a 	mov	sp,fp
 80089b8:	dfc00117 	ldw	ra,4(sp)
 80089bc:	df000017 	ldw	fp,0(sp)
 80089c0:	dec00204 	addi	sp,sp,8
 80089c4:	f800283a 	ret

080089c8 <jpeg_gen_optimal_table>:
* So the extra complexity of an optimal algorithm doesn't seem worthwhile.
*/

LOCAL(void)
	jpeg_gen_optimal_table (j_compress_ptr cinfo, JHUFF_TBL * htbl, long freq[])
{
 80089c8:	defdea04 	addi	sp,sp,-2136
 80089cc:	dfc21515 	stw	ra,2132(sp)
 80089d0:	df021415 	stw	fp,2128(sp)
 80089d4:	df021404 	addi	fp,sp,2128
 80089d8:	e13ffd15 	stw	r4,-12(fp)
 80089dc:	e17ffe15 	stw	r5,-8(fp)
 80089e0:	e1bfff15 	stw	r6,-4(fp)
	int p, i, j;
	long v;

	/* This algorithm is explained in section K.2 of the JPEG standard */

	MEMZERO(bits, SIZEOF(bits));
 80089e4:	e0bdf204 	addi	r2,fp,-2104
 80089e8:	1009883a 	mov	r4,r2
 80089ec:	000b883a 	mov	r5,zero
 80089f0:	01800844 	movi	r6,33
 80089f4:	802ecf00 	call	802ecf0 <memset>
	MEMZERO(codesize, SIZEOF(codesize));
 80089f8:	e0bdfb04 	addi	r2,fp,-2068
 80089fc:	1009883a 	mov	r4,r2
 8008a00:	000b883a 	mov	r5,zero
 8008a04:	01810104 	movi	r6,1028
 8008a08:	802ecf00 	call	802ecf0 <memset>
	for (i = 0; i < 257; i++)
 8008a0c:	e03def15 	stw	zero,-2116(fp)
 8008a10:	00000b06 	br	8008a40 <jpeg_gen_optimal_table+0x78>
		others[i] = -1;		/* init links to empty */
 8008a14:	e0bdef17 	ldw	r2,-2116(fp)
 8008a18:	1085883a 	add	r2,r2,r2
 8008a1c:	1085883a 	add	r2,r2,r2
 8008a20:	e0fdec04 	addi	r3,fp,-2128
 8008a24:	1885883a 	add	r2,r3,r2
 8008a28:	10811004 	addi	r2,r2,1088
 8008a2c:	00ffffc4 	movi	r3,-1
 8008a30:	10c00015 	stw	r3,0(r2)

	/* This algorithm is explained in section K.2 of the JPEG standard */

	MEMZERO(bits, SIZEOF(bits));
	MEMZERO(codesize, SIZEOF(codesize));
	for (i = 0; i < 257; i++)
 8008a34:	e0bdef17 	ldw	r2,-2116(fp)
 8008a38:	10800044 	addi	r2,r2,1
 8008a3c:	e0bdef15 	stw	r2,-2116(fp)
 8008a40:	e0bdef17 	ldw	r2,-2116(fp)
 8008a44:	10804050 	cmplti	r2,r2,257
 8008a48:	103ff21e 	bne	r2,zero,8008a14 <jpeg_gen_optimal_table+0x4c>
		others[i] = -1;		/* init links to empty */

	freq[256] = 1;		/* make sure 256 has a nonzero count */
 8008a4c:	e0bfff17 	ldw	r2,-4(fp)
 8008a50:	10810004 	addi	r2,r2,1024
 8008a54:	00c00044 	movi	r3,1
 8008a58:	10c00015 	stw	r3,0(r2)
	/* Huffman's basic algorithm to assign optimal code lengths to symbols */

	for (;;) {
		/* Find the smallest nonzero frequency, set c1 = its symbol */
		/* In case of ties, take the larger symbol number */
		c1 = -1;
 8008a5c:	00bfffc4 	movi	r2,-1
 8008a60:	e0bdec15 	stw	r2,-2128(fp)
		v = 1000000000L;
 8008a64:	008ee6f4 	movhi	r2,15259
 8008a68:	10b28004 	addi	r2,r2,-13824
 8008a6c:	e0bdf115 	stw	r2,-2108(fp)
		for (i = 0; i <= 256; i++) {
 8008a70:	e03def15 	stw	zero,-2116(fp)
 8008a74:	00001b06 	br	8008ae4 <jpeg_gen_optimal_table+0x11c>
			if (freq[i] && freq[i] <= v) {
 8008a78:	e0bdef17 	ldw	r2,-2116(fp)
 8008a7c:	1085883a 	add	r2,r2,r2
 8008a80:	1085883a 	add	r2,r2,r2
 8008a84:	e0ffff17 	ldw	r3,-4(fp)
 8008a88:	1885883a 	add	r2,r3,r2
 8008a8c:	10800017 	ldw	r2,0(r2)
 8008a90:	10001126 	beq	r2,zero,8008ad8 <jpeg_gen_optimal_table+0x110>
 8008a94:	e0bdef17 	ldw	r2,-2116(fp)
 8008a98:	1085883a 	add	r2,r2,r2
 8008a9c:	1085883a 	add	r2,r2,r2
 8008aa0:	e0ffff17 	ldw	r3,-4(fp)
 8008aa4:	1885883a 	add	r2,r3,r2
 8008aa8:	10800017 	ldw	r2,0(r2)
 8008aac:	e0fdf117 	ldw	r3,-2108(fp)
 8008ab0:	18800916 	blt	r3,r2,8008ad8 <jpeg_gen_optimal_table+0x110>
				v = freq[i];
 8008ab4:	e0bdef17 	ldw	r2,-2116(fp)
 8008ab8:	1085883a 	add	r2,r2,r2
 8008abc:	1085883a 	add	r2,r2,r2
 8008ac0:	e0ffff17 	ldw	r3,-4(fp)
 8008ac4:	1885883a 	add	r2,r3,r2
 8008ac8:	10800017 	ldw	r2,0(r2)
 8008acc:	e0bdf115 	stw	r2,-2108(fp)
				c1 = i;
 8008ad0:	e0bdef17 	ldw	r2,-2116(fp)
 8008ad4:	e0bdec15 	stw	r2,-2128(fp)
	for (;;) {
		/* Find the smallest nonzero frequency, set c1 = its symbol */
		/* In case of ties, take the larger symbol number */
		c1 = -1;
		v = 1000000000L;
		for (i = 0; i <= 256; i++) {
 8008ad8:	e0bdef17 	ldw	r2,-2116(fp)
 8008adc:	10800044 	addi	r2,r2,1
 8008ae0:	e0bdef15 	stw	r2,-2116(fp)
 8008ae4:	e0bdef17 	ldw	r2,-2116(fp)
 8008ae8:	10804050 	cmplti	r2,r2,257
 8008aec:	103fe21e 	bne	r2,zero,8008a78 <jpeg_gen_optimal_table+0xb0>
			}
		}

		/* Find the next smallest nonzero frequency, set c2 = its symbol */
		/* In case of ties, take the larger symbol number */
		c2 = -1;
 8008af0:	00bfffc4 	movi	r2,-1
 8008af4:	e0bded15 	stw	r2,-2124(fp)
		v = 1000000000L;
 8008af8:	008ee6f4 	movhi	r2,15259
 8008afc:	10b28004 	addi	r2,r2,-13824
 8008b00:	e0bdf115 	stw	r2,-2108(fp)
		for (i = 0; i <= 256; i++) {
 8008b04:	e03def15 	stw	zero,-2116(fp)
 8008b08:	00001e06 	br	8008b84 <jpeg_gen_optimal_table+0x1bc>
			if (freq[i] && freq[i] <= v && i != c1) {
 8008b0c:	e0bdef17 	ldw	r2,-2116(fp)
 8008b10:	1085883a 	add	r2,r2,r2
 8008b14:	1085883a 	add	r2,r2,r2
 8008b18:	e0ffff17 	ldw	r3,-4(fp)
 8008b1c:	1885883a 	add	r2,r3,r2
 8008b20:	10800017 	ldw	r2,0(r2)
 8008b24:	10001426 	beq	r2,zero,8008b78 <jpeg_gen_optimal_table+0x1b0>
 8008b28:	e0bdef17 	ldw	r2,-2116(fp)
 8008b2c:	1085883a 	add	r2,r2,r2
 8008b30:	1085883a 	add	r2,r2,r2
 8008b34:	e0ffff17 	ldw	r3,-4(fp)
 8008b38:	1885883a 	add	r2,r3,r2
 8008b3c:	10800017 	ldw	r2,0(r2)
 8008b40:	e0fdf117 	ldw	r3,-2108(fp)
 8008b44:	18800c16 	blt	r3,r2,8008b78 <jpeg_gen_optimal_table+0x1b0>
 8008b48:	e0fdef17 	ldw	r3,-2116(fp)
 8008b4c:	e0bdec17 	ldw	r2,-2128(fp)
 8008b50:	18800926 	beq	r3,r2,8008b78 <jpeg_gen_optimal_table+0x1b0>
				v = freq[i];
 8008b54:	e0bdef17 	ldw	r2,-2116(fp)
 8008b58:	1085883a 	add	r2,r2,r2
 8008b5c:	1085883a 	add	r2,r2,r2
 8008b60:	e0ffff17 	ldw	r3,-4(fp)
 8008b64:	1885883a 	add	r2,r3,r2
 8008b68:	10800017 	ldw	r2,0(r2)
 8008b6c:	e0bdf115 	stw	r2,-2108(fp)
				c2 = i;
 8008b70:	e0bdef17 	ldw	r2,-2116(fp)
 8008b74:	e0bded15 	stw	r2,-2124(fp)

		/* Find the next smallest nonzero frequency, set c2 = its symbol */
		/* In case of ties, take the larger symbol number */
		c2 = -1;
		v = 1000000000L;
		for (i = 0; i <= 256; i++) {
 8008b78:	e0bdef17 	ldw	r2,-2116(fp)
 8008b7c:	10800044 	addi	r2,r2,1
 8008b80:	e0bdef15 	stw	r2,-2116(fp)
 8008b84:	e0bdef17 	ldw	r2,-2116(fp)
 8008b88:	10804050 	cmplti	r2,r2,257
 8008b8c:	103fdf1e 	bne	r2,zero,8008b0c <jpeg_gen_optimal_table+0x144>
				c2 = i;
			}
		}

		/* Done if we've merged everything into one frequency */
		if (c2 < 0)
 8008b90:	e0bded17 	ldw	r2,-2124(fp)
 8008b94:	10008016 	blt	r2,zero,8008d98 <jpeg_gen_optimal_table+0x3d0>
			break;

		/* Else merge the two counts/trees */
		freq[c1] += freq[c2];
 8008b98:	e0bdec17 	ldw	r2,-2128(fp)
 8008b9c:	1085883a 	add	r2,r2,r2
 8008ba0:	1085883a 	add	r2,r2,r2
 8008ba4:	e0ffff17 	ldw	r3,-4(fp)
 8008ba8:	1887883a 	add	r3,r3,r2
 8008bac:	e0bdec17 	ldw	r2,-2128(fp)
 8008bb0:	1085883a 	add	r2,r2,r2
 8008bb4:	1085883a 	add	r2,r2,r2
 8008bb8:	e13fff17 	ldw	r4,-4(fp)
 8008bbc:	2085883a 	add	r2,r4,r2
 8008bc0:	11000017 	ldw	r4,0(r2)
 8008bc4:	e0bded17 	ldw	r2,-2124(fp)
 8008bc8:	1085883a 	add	r2,r2,r2
 8008bcc:	1085883a 	add	r2,r2,r2
 8008bd0:	e17fff17 	ldw	r5,-4(fp)
 8008bd4:	2885883a 	add	r2,r5,r2
 8008bd8:	10800017 	ldw	r2,0(r2)
 8008bdc:	2085883a 	add	r2,r4,r2
 8008be0:	18800015 	stw	r2,0(r3)
		freq[c2] = 0;
 8008be4:	e0bded17 	ldw	r2,-2124(fp)
 8008be8:	1085883a 	add	r2,r2,r2
 8008bec:	1085883a 	add	r2,r2,r2
 8008bf0:	e0ffff17 	ldw	r3,-4(fp)
 8008bf4:	1885883a 	add	r2,r3,r2
 8008bf8:	10000015 	stw	zero,0(r2)

		/* Increment the codesize of everything in c1's tree branch */
		codesize[c1]++;
 8008bfc:	e0bdec17 	ldw	r2,-2128(fp)
 8008c00:	1085883a 	add	r2,r2,r2
 8008c04:	1085883a 	add	r2,r2,r2
 8008c08:	e13dec04 	addi	r4,fp,-2128
 8008c0c:	2085883a 	add	r2,r4,r2
 8008c10:	10800f04 	addi	r2,r2,60
 8008c14:	10800017 	ldw	r2,0(r2)
 8008c18:	10c00044 	addi	r3,r2,1
 8008c1c:	e0bdec17 	ldw	r2,-2128(fp)
 8008c20:	1085883a 	add	r2,r2,r2
 8008c24:	1085883a 	add	r2,r2,r2
 8008c28:	e13dec04 	addi	r4,fp,-2128
 8008c2c:	2085883a 	add	r2,r4,r2
 8008c30:	10800f04 	addi	r2,r2,60
 8008c34:	10c00015 	stw	r3,0(r2)
		while (others[c1] >= 0) {
 8008c38:	00001706 	br	8008c98 <jpeg_gen_optimal_table+0x2d0>
			c1 = others[c1];
 8008c3c:	e0bdec17 	ldw	r2,-2128(fp)
 8008c40:	1085883a 	add	r2,r2,r2
 8008c44:	1085883a 	add	r2,r2,r2
 8008c48:	e0fdec04 	addi	r3,fp,-2128
 8008c4c:	1885883a 	add	r2,r3,r2
 8008c50:	10811004 	addi	r2,r2,1088
 8008c54:	10800017 	ldw	r2,0(r2)
 8008c58:	e0bdec15 	stw	r2,-2128(fp)
			codesize[c1]++;
 8008c5c:	e0bdec17 	ldw	r2,-2128(fp)
 8008c60:	1085883a 	add	r2,r2,r2
 8008c64:	1085883a 	add	r2,r2,r2
 8008c68:	e13dec04 	addi	r4,fp,-2128
 8008c6c:	2085883a 	add	r2,r4,r2
 8008c70:	10800f04 	addi	r2,r2,60
 8008c74:	10800017 	ldw	r2,0(r2)
 8008c78:	10c00044 	addi	r3,r2,1
 8008c7c:	e0bdec17 	ldw	r2,-2128(fp)
 8008c80:	1085883a 	add	r2,r2,r2
 8008c84:	1085883a 	add	r2,r2,r2
 8008c88:	e13dec04 	addi	r4,fp,-2128
 8008c8c:	2085883a 	add	r2,r4,r2
 8008c90:	10800f04 	addi	r2,r2,60
 8008c94:	10c00015 	stw	r3,0(r2)
		freq[c1] += freq[c2];
		freq[c2] = 0;

		/* Increment the codesize of everything in c1's tree branch */
		codesize[c1]++;
		while (others[c1] >= 0) {
 8008c98:	e0bdec17 	ldw	r2,-2128(fp)
 8008c9c:	1085883a 	add	r2,r2,r2
 8008ca0:	1085883a 	add	r2,r2,r2
 8008ca4:	e0fdec04 	addi	r3,fp,-2128
 8008ca8:	1885883a 	add	r2,r3,r2
 8008cac:	10811004 	addi	r2,r2,1088
 8008cb0:	10800017 	ldw	r2,0(r2)
 8008cb4:	103fe10e 	bge	r2,zero,8008c3c <jpeg_gen_optimal_table+0x274>
			c1 = others[c1];
			codesize[c1]++;
		}

		others[c1] = c2;		/* chain c2 onto c1's tree branch */
 8008cb8:	e0bdec17 	ldw	r2,-2128(fp)
 8008cbc:	1085883a 	add	r2,r2,r2
 8008cc0:	1085883a 	add	r2,r2,r2
 8008cc4:	e13dec04 	addi	r4,fp,-2128
 8008cc8:	2085883a 	add	r2,r4,r2
 8008ccc:	10811004 	addi	r2,r2,1088
 8008cd0:	e0fded17 	ldw	r3,-2124(fp)
 8008cd4:	10c00015 	stw	r3,0(r2)

		/* Increment the codesize of everything in c2's tree branch */
		codesize[c2]++;
 8008cd8:	e0bded17 	ldw	r2,-2124(fp)
 8008cdc:	1085883a 	add	r2,r2,r2
 8008ce0:	1085883a 	add	r2,r2,r2
 8008ce4:	e0fdec04 	addi	r3,fp,-2128
 8008ce8:	1885883a 	add	r2,r3,r2
 8008cec:	10800f04 	addi	r2,r2,60
 8008cf0:	10800017 	ldw	r2,0(r2)
 8008cf4:	10c00044 	addi	r3,r2,1
 8008cf8:	e0bded17 	ldw	r2,-2124(fp)
 8008cfc:	1085883a 	add	r2,r2,r2
 8008d00:	1085883a 	add	r2,r2,r2
 8008d04:	e13dec04 	addi	r4,fp,-2128
 8008d08:	2085883a 	add	r2,r4,r2
 8008d0c:	10800f04 	addi	r2,r2,60
 8008d10:	10c00015 	stw	r3,0(r2)
		while (others[c2] >= 0) {
 8008d14:	00001706 	br	8008d74 <jpeg_gen_optimal_table+0x3ac>
			c2 = others[c2];
 8008d18:	e0bded17 	ldw	r2,-2124(fp)
 8008d1c:	1085883a 	add	r2,r2,r2
 8008d20:	1085883a 	add	r2,r2,r2
 8008d24:	e0fdec04 	addi	r3,fp,-2128
 8008d28:	1885883a 	add	r2,r3,r2
 8008d2c:	10811004 	addi	r2,r2,1088
 8008d30:	10800017 	ldw	r2,0(r2)
 8008d34:	e0bded15 	stw	r2,-2124(fp)
			codesize[c2]++;
 8008d38:	e0bded17 	ldw	r2,-2124(fp)
 8008d3c:	1085883a 	add	r2,r2,r2
 8008d40:	1085883a 	add	r2,r2,r2
 8008d44:	e13dec04 	addi	r4,fp,-2128
 8008d48:	2085883a 	add	r2,r4,r2
 8008d4c:	10800f04 	addi	r2,r2,60
 8008d50:	10800017 	ldw	r2,0(r2)
 8008d54:	10c00044 	addi	r3,r2,1
 8008d58:	e0bded17 	ldw	r2,-2124(fp)
 8008d5c:	1085883a 	add	r2,r2,r2
 8008d60:	1085883a 	add	r2,r2,r2
 8008d64:	e13dec04 	addi	r4,fp,-2128
 8008d68:	2085883a 	add	r2,r4,r2
 8008d6c:	10800f04 	addi	r2,r2,60
 8008d70:	10c00015 	stw	r3,0(r2)

		others[c1] = c2;		/* chain c2 onto c1's tree branch */

		/* Increment the codesize of everything in c2's tree branch */
		codesize[c2]++;
		while (others[c2] >= 0) {
 8008d74:	e0bded17 	ldw	r2,-2124(fp)
 8008d78:	1085883a 	add	r2,r2,r2
 8008d7c:	1085883a 	add	r2,r2,r2
 8008d80:	e0fdec04 	addi	r3,fp,-2128
 8008d84:	1885883a 	add	r2,r3,r2
 8008d88:	10811004 	addi	r2,r2,1088
 8008d8c:	10800017 	ldw	r2,0(r2)
 8008d90:	103fe10e 	bge	r2,zero,8008d18 <jpeg_gen_optimal_table+0x350>
			c2 = others[c2];
			codesize[c2]++;
		}
	}
 8008d94:	003f3106 	br	8008a5c <jpeg_gen_optimal_table+0x94>
			}
		}

		/* Done if we've merged everything into one frequency */
		if (c2 < 0)
			break;
 8008d98:	0001883a 	nop
			codesize[c2]++;
		}
	}

	/* Now count the number of symbols of each code length */
	for (i = 0; i <= 256; i++) {
 8008d9c:	e03def15 	stw	zero,-2116(fp)
 8008da0:	00002b06 	br	8008e50 <jpeg_gen_optimal_table+0x488>
		if (codesize[i]) {
 8008da4:	e0bdef17 	ldw	r2,-2116(fp)
 8008da8:	1085883a 	add	r2,r2,r2
 8008dac:	1085883a 	add	r2,r2,r2
 8008db0:	e13dec04 	addi	r4,fp,-2128
 8008db4:	2085883a 	add	r2,r4,r2
 8008db8:	10800f04 	addi	r2,r2,60
 8008dbc:	10800017 	ldw	r2,0(r2)
 8008dc0:	10002026 	beq	r2,zero,8008e44 <jpeg_gen_optimal_table+0x47c>
			/* The JPEG standard seems to think that this can't happen, */
			/* but I'm paranoid... */
			if (codesize[i] > MAX_CLEN)
 8008dc4:	e0bdef17 	ldw	r2,-2116(fp)
 8008dc8:	1085883a 	add	r2,r2,r2
 8008dcc:	1085883a 	add	r2,r2,r2
 8008dd0:	e0fdec04 	addi	r3,fp,-2128
 8008dd4:	1885883a 	add	r2,r3,r2
 8008dd8:	10800f04 	addi	r2,r2,60
 8008ddc:	10800017 	ldw	r2,0(r2)
 8008de0:	10800850 	cmplti	r2,r2,33
 8008de4:	1000091e 	bne	r2,zero,8008e0c <jpeg_gen_optimal_table+0x444>
				ERREXIT(cinfo, JERR_HUFF_CLEN_OVERFLOW);
 8008de8:	e0bffd17 	ldw	r2,-12(fp)
 8008dec:	10800017 	ldw	r2,0(r2)
 8008df0:	00c00a04 	movi	r3,40
 8008df4:	10c00515 	stw	r3,20(r2)
 8008df8:	e0bffd17 	ldw	r2,-12(fp)
 8008dfc:	10800017 	ldw	r2,0(r2)
 8008e00:	10800017 	ldw	r2,0(r2)
 8008e04:	e13ffd17 	ldw	r4,-12(fp)
 8008e08:	103ee83a 	callr	r2

			bits[codesize[i]]++;
 8008e0c:	e0bdef17 	ldw	r2,-2116(fp)
 8008e10:	1085883a 	add	r2,r2,r2
 8008e14:	1085883a 	add	r2,r2,r2
 8008e18:	e13dec04 	addi	r4,fp,-2128
 8008e1c:	2085883a 	add	r2,r4,r2
 8008e20:	10800f04 	addi	r2,r2,60
 8008e24:	10800017 	ldw	r2,0(r2)
 8008e28:	e0fdf204 	addi	r3,fp,-2104
 8008e2c:	1887883a 	add	r3,r3,r2
 8008e30:	18c00003 	ldbu	r3,0(r3)
 8008e34:	18c00044 	addi	r3,r3,1
 8008e38:	e13df204 	addi	r4,fp,-2104
 8008e3c:	2085883a 	add	r2,r4,r2
 8008e40:	10c00005 	stb	r3,0(r2)
			codesize[c2]++;
		}
	}

	/* Now count the number of symbols of each code length */
	for (i = 0; i <= 256; i++) {
 8008e44:	e0bdef17 	ldw	r2,-2116(fp)
 8008e48:	10800044 	addi	r2,r2,1
 8008e4c:	e0bdef15 	stw	r2,-2116(fp)
 8008e50:	e0bdef17 	ldw	r2,-2116(fp)
 8008e54:	10804050 	cmplti	r2,r2,257
 8008e58:	103fd21e 	bne	r2,zero,8008da4 <jpeg_gen_optimal_table+0x3dc>
	* skipping the BITS entry for that prefix length, a code word from the next
	* shortest nonzero BITS entry is converted into a prefix for two code words
	* one bit longer.
	*/

	for (i = MAX_CLEN; i > 16; i--) {
 8008e5c:	00800804 	movi	r2,32
 8008e60:	e0bdef15 	stw	r2,-2116(fp)
 8008e64:	00004006 	br	8008f68 <jpeg_gen_optimal_table+0x5a0>
		while (bits[i] > 0) {
			j = i - 2;		/* find length of new prefix to be used */
 8008e68:	e0bdef17 	ldw	r2,-2116(fp)
 8008e6c:	10bfff84 	addi	r2,r2,-2
 8008e70:	e0bdf015 	stw	r2,-2112(fp)
			while (bits[j] == 0)
 8008e74:	00000306 	br	8008e84 <jpeg_gen_optimal_table+0x4bc>
				j--;
 8008e78:	e0bdf017 	ldw	r2,-2112(fp)
 8008e7c:	10bfffc4 	addi	r2,r2,-1
 8008e80:	e0bdf015 	stw	r2,-2112(fp)
	*/

	for (i = MAX_CLEN; i > 16; i--) {
		while (bits[i] > 0) {
			j = i - 2;		/* find length of new prefix to be used */
			while (bits[j] == 0)
 8008e84:	e0fdf204 	addi	r3,fp,-2104
 8008e88:	e0bdf017 	ldw	r2,-2112(fp)
 8008e8c:	1885883a 	add	r2,r3,r2
 8008e90:	10800003 	ldbu	r2,0(r2)
 8008e94:	10803fcc 	andi	r2,r2,255
 8008e98:	103ff726 	beq	r2,zero,8008e78 <jpeg_gen_optimal_table+0x4b0>
				j--;

			bits[i] -= 2;		/* remove two symbols */
 8008e9c:	e0fdf204 	addi	r3,fp,-2104
 8008ea0:	e0bdef17 	ldw	r2,-2116(fp)
 8008ea4:	1885883a 	add	r2,r3,r2
 8008ea8:	10800003 	ldbu	r2,0(r2)
 8008eac:	10bfff84 	addi	r2,r2,-2
 8008eb0:	1007883a 	mov	r3,r2
 8008eb4:	e13df204 	addi	r4,fp,-2104
 8008eb8:	e0bdef17 	ldw	r2,-2116(fp)
 8008ebc:	2085883a 	add	r2,r4,r2
 8008ec0:	10c00005 	stb	r3,0(r2)
			bits[i-1]++;		/* one goes in this length */
 8008ec4:	e0bdef17 	ldw	r2,-2116(fp)
 8008ec8:	10bfffc4 	addi	r2,r2,-1
 8008ecc:	e0fdf204 	addi	r3,fp,-2104
 8008ed0:	1887883a 	add	r3,r3,r2
 8008ed4:	18c00003 	ldbu	r3,0(r3)
 8008ed8:	18c00044 	addi	r3,r3,1
 8008edc:	e13df204 	addi	r4,fp,-2104
 8008ee0:	2085883a 	add	r2,r4,r2
 8008ee4:	10c00005 	stb	r3,0(r2)
			bits[j+1] += 2;		/* two new symbols in this length */
 8008ee8:	e0bdf017 	ldw	r2,-2112(fp)
 8008eec:	10800044 	addi	r2,r2,1
 8008ef0:	e0fdf017 	ldw	r3,-2112(fp)
 8008ef4:	18c00044 	addi	r3,r3,1
 8008ef8:	e13df204 	addi	r4,fp,-2104
 8008efc:	20c7883a 	add	r3,r4,r3
 8008f00:	18c00003 	ldbu	r3,0(r3)
 8008f04:	18c00084 	addi	r3,r3,2
 8008f08:	e13df204 	addi	r4,fp,-2104
 8008f0c:	2085883a 	add	r2,r4,r2
 8008f10:	10c00005 	stb	r3,0(r2)
			bits[j]--;		/* symbol of this length is now a prefix */
 8008f14:	e0fdf204 	addi	r3,fp,-2104
 8008f18:	e0bdf017 	ldw	r2,-2112(fp)
 8008f1c:	1885883a 	add	r2,r3,r2
 8008f20:	10800003 	ldbu	r2,0(r2)
 8008f24:	10bfffc4 	addi	r2,r2,-1
 8008f28:	1007883a 	mov	r3,r2
 8008f2c:	e13df204 	addi	r4,fp,-2104
 8008f30:	e0bdf017 	ldw	r2,-2112(fp)
 8008f34:	2085883a 	add	r2,r4,r2
 8008f38:	10c00005 	stb	r3,0(r2)
 8008f3c:	00000106 	br	8008f44 <jpeg_gen_optimal_table+0x57c>
	* shortest nonzero BITS entry is converted into a prefix for two code words
	* one bit longer.
	*/

	for (i = MAX_CLEN; i > 16; i--) {
		while (bits[i] > 0) {
 8008f40:	0001883a 	nop
 8008f44:	e0fdf204 	addi	r3,fp,-2104
 8008f48:	e0bdef17 	ldw	r2,-2116(fp)
 8008f4c:	1885883a 	add	r2,r3,r2
 8008f50:	10800003 	ldbu	r2,0(r2)
 8008f54:	10803fcc 	andi	r2,r2,255
 8008f58:	103fc31e 	bne	r2,zero,8008e68 <jpeg_gen_optimal_table+0x4a0>
	* skipping the BITS entry for that prefix length, a code word from the next
	* shortest nonzero BITS entry is converted into a prefix for two code words
	* one bit longer.
	*/

	for (i = MAX_CLEN; i > 16; i--) {
 8008f5c:	e0bdef17 	ldw	r2,-2116(fp)
 8008f60:	10bfffc4 	addi	r2,r2,-1
 8008f64:	e0bdef15 	stw	r2,-2116(fp)
 8008f68:	e0bdef17 	ldw	r2,-2116(fp)
 8008f6c:	10800448 	cmpgei	r2,r2,17
 8008f70:	103ff31e 	bne	r2,zero,8008f40 <jpeg_gen_optimal_table+0x578>
			bits[j]--;		/* symbol of this length is now a prefix */
		}
	}

	/* Remove the count for the pseudo-symbol 256 from the largest codelength */
	while (bits[i] == 0)		/* find largest codelength still in use */
 8008f74:	00000306 	br	8008f84 <jpeg_gen_optimal_table+0x5bc>
		i--;
 8008f78:	e0bdef17 	ldw	r2,-2116(fp)
 8008f7c:	10bfffc4 	addi	r2,r2,-1
 8008f80:	e0bdef15 	stw	r2,-2116(fp)
			bits[j]--;		/* symbol of this length is now a prefix */
		}
	}

	/* Remove the count for the pseudo-symbol 256 from the largest codelength */
	while (bits[i] == 0)		/* find largest codelength still in use */
 8008f84:	e0fdf204 	addi	r3,fp,-2104
 8008f88:	e0bdef17 	ldw	r2,-2116(fp)
 8008f8c:	1885883a 	add	r2,r3,r2
 8008f90:	10800003 	ldbu	r2,0(r2)
 8008f94:	10803fcc 	andi	r2,r2,255
 8008f98:	103ff726 	beq	r2,zero,8008f78 <jpeg_gen_optimal_table+0x5b0>
		i--;
	bits[i]--;
 8008f9c:	e0fdf204 	addi	r3,fp,-2104
 8008fa0:	e0bdef17 	ldw	r2,-2116(fp)
 8008fa4:	1885883a 	add	r2,r3,r2
 8008fa8:	10800003 	ldbu	r2,0(r2)
 8008fac:	10bfffc4 	addi	r2,r2,-1
 8008fb0:	1007883a 	mov	r3,r2
 8008fb4:	e13df204 	addi	r4,fp,-2104
 8008fb8:	e0bdef17 	ldw	r2,-2116(fp)
 8008fbc:	2085883a 	add	r2,r4,r2
 8008fc0:	10c00005 	stb	r3,0(r2)

	/* Return final symbol counts (only for lengths 0..16) */
	MEMCOPY(htbl->bits, bits, SIZEOF(htbl->bits));
 8008fc4:	e0fffe17 	ldw	r3,-8(fp)
 8008fc8:	e0bdf204 	addi	r2,fp,-2104
 8008fcc:	1809883a 	mov	r4,r3
 8008fd0:	100b883a 	mov	r5,r2
 8008fd4:	01800444 	movi	r6,17
 8008fd8:	802ebb00 	call	802ebb0 <memcpy>

	/* Return a list of the symbols sorted by code length */
	/* It's not real clear to me why we don't need to consider the codelength
	* changes made above, but the JPEG spec seems to think this works.
	*/
	p = 0;
 8008fdc:	e03dee15 	stw	zero,-2120(fp)
	for (i = 1; i <= MAX_CLEN; i++) {
 8008fe0:	00800044 	movi	r2,1
 8008fe4:	e0bdef15 	stw	r2,-2116(fp)
 8008fe8:	00001e06 	br	8009064 <jpeg_gen_optimal_table+0x69c>
		for (j = 0; j <= 255; j++) {
 8008fec:	e03df015 	stw	zero,-2112(fp)
 8008ff0:	00001606 	br	800904c <jpeg_gen_optimal_table+0x684>
			if (codesize[j] == i) {
 8008ff4:	e0bdf017 	ldw	r2,-2112(fp)
 8008ff8:	1085883a 	add	r2,r2,r2
 8008ffc:	1085883a 	add	r2,r2,r2
 8009000:	e0fdec04 	addi	r3,fp,-2128
 8009004:	1885883a 	add	r2,r3,r2
 8009008:	10800f04 	addi	r2,r2,60
 800900c:	10c00017 	ldw	r3,0(r2)
 8009010:	e0bdef17 	ldw	r2,-2116(fp)
 8009014:	18800a1e 	bne	r3,r2,8009040 <jpeg_gen_optimal_table+0x678>
				htbl->huffval[p] = (UINT8) j;
 8009018:	e0bdf017 	ldw	r2,-2112(fp)
 800901c:	1007883a 	mov	r3,r2
 8009020:	e13ffe17 	ldw	r4,-8(fp)
 8009024:	e0bdee17 	ldw	r2,-2120(fp)
 8009028:	2085883a 	add	r2,r4,r2
 800902c:	10800444 	addi	r2,r2,17
 8009030:	10c00005 	stb	r3,0(r2)
				p++;
 8009034:	e0bdee17 	ldw	r2,-2120(fp)
 8009038:	10800044 	addi	r2,r2,1
 800903c:	e0bdee15 	stw	r2,-2120(fp)
	/* It's not real clear to me why we don't need to consider the codelength
	* changes made above, but the JPEG spec seems to think this works.
	*/
	p = 0;
	for (i = 1; i <= MAX_CLEN; i++) {
		for (j = 0; j <= 255; j++) {
 8009040:	e0bdf017 	ldw	r2,-2112(fp)
 8009044:	10800044 	addi	r2,r2,1
 8009048:	e0bdf015 	stw	r2,-2112(fp)
 800904c:	e0bdf017 	ldw	r2,-2112(fp)
 8009050:	10804010 	cmplti	r2,r2,256
 8009054:	103fe71e 	bne	r2,zero,8008ff4 <jpeg_gen_optimal_table+0x62c>
	/* Return a list of the symbols sorted by code length */
	/* It's not real clear to me why we don't need to consider the codelength
	* changes made above, but the JPEG spec seems to think this works.
	*/
	p = 0;
	for (i = 1; i <= MAX_CLEN; i++) {
 8009058:	e0bdef17 	ldw	r2,-2116(fp)
 800905c:	10800044 	addi	r2,r2,1
 8009060:	e0bdef15 	stw	r2,-2116(fp)
 8009064:	e0bdef17 	ldw	r2,-2116(fp)
 8009068:	10800850 	cmplti	r2,r2,33
 800906c:	103fdf1e 	bne	r2,zero,8008fec <jpeg_gen_optimal_table+0x624>
			}
		}
	}

	/* Set sent_table FALSE so updated table will be written to JPEG file. */
	htbl->sent_table = FALSE;
 8009070:	e0bffe17 	ldw	r2,-8(fp)
 8009074:	10004445 	stb	zero,273(r2)
}
 8009078:	e037883a 	mov	sp,fp
 800907c:	dfc00117 	ldw	ra,4(sp)
 8009080:	df000017 	ldw	fp,0(sp)
 8009084:	dec00204 	addi	sp,sp,8
 8009088:	f800283a 	ret

0800908c <finish_pass_gather>:
* Finish up a statistics-gathering pass and create the new Huffman tables.
*/

METHODDEF(void)
	finish_pass_gather (j_compress_ptr cinfo)
{
 800908c:	defff604 	addi	sp,sp,-40
 8009090:	dfc00915 	stw	ra,36(sp)
 8009094:	df000815 	stw	fp,32(sp)
 8009098:	df000804 	addi	fp,sp,32
 800909c:	e13fff15 	stw	r4,-4(fp)
	huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 80090a0:	e0bfff17 	ldw	r2,-4(fp)
 80090a4:	10806417 	ldw	r2,400(r2)
 80090a8:	e0bff915 	stw	r2,-28(fp)
	boolean did_ac[NUM_HUFF_TBLS];

	/* It's important not to apply jpeg_gen_optimal_table more than once
	* per table, because it clobbers the input frequency counts!
	*/
	if (cinfo->progressive_mode)
 80090ac:	e0bfff17 	ldw	r2,-4(fp)
 80090b0:	10803d03 	ldbu	r2,244(r2)
 80090b4:	10803fcc 	andi	r2,r2,255
 80090b8:	10000226 	beq	r2,zero,80090c4 <finish_pass_gather+0x38>
		/* Flush out buffered data (all we care about is counting the EOB symbol) */
		emit_eobrun(entropy);
 80090bc:	e13ff917 	ldw	r4,-28(fp)
 80090c0:	80070000 	call	8007000 <emit_eobrun>

	MEMZERO(did_dc, SIZEOF(did_dc));
 80090c4:	e0bffd04 	addi	r2,fp,-12
 80090c8:	1009883a 	mov	r4,r2
 80090cc:	000b883a 	mov	r5,zero
 80090d0:	01800104 	movi	r6,4
 80090d4:	802ecf00 	call	802ecf0 <memset>
	MEMZERO(did_ac, SIZEOF(did_ac));
 80090d8:	e0bffe04 	addi	r2,fp,-8
 80090dc:	1009883a 	mov	r4,r2
 80090e0:	000b883a 	mov	r5,zero
 80090e4:	01800104 	movi	r6,4
 80090e8:	802ecf00 	call	802ecf0 <memset>

	for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 80090ec:	e03ff815 	stw	zero,-32(fp)
 80090f0:	00006606 	br	800928c <finish_pass_gather+0x200>
		compptr = cinfo->cur_comp_info[ci];
 80090f4:	e0ffff17 	ldw	r3,-4(fp)
 80090f8:	e0bff817 	ldw	r2,-32(fp)
 80090fc:	10801104 	addi	r2,r2,68
 8009100:	1085883a 	add	r2,r2,r2
 8009104:	1085883a 	add	r2,r2,r2
 8009108:	1885883a 	add	r2,r3,r2
 800910c:	10800017 	ldw	r2,0(r2)
 8009110:	e0bffa15 	stw	r2,-24(fp)
		/* DC needs no table for refinement scan */
		if (cinfo->Ss == 0 && cinfo->Ah == 0) {
 8009114:	e0bfff17 	ldw	r2,-4(fp)
 8009118:	10805517 	ldw	r2,340(r2)
 800911c:	10002c1e 	bne	r2,zero,80091d0 <finish_pass_gather+0x144>
 8009120:	e0bfff17 	ldw	r2,-4(fp)
 8009124:	10805717 	ldw	r2,348(r2)
 8009128:	1000291e 	bne	r2,zero,80091d0 <finish_pass_gather+0x144>
			tbl = compptr->dc_tbl_no;
 800912c:	e0bffa17 	ldw	r2,-24(fp)
 8009130:	10800517 	ldw	r2,20(r2)
 8009134:	e0bffb15 	stw	r2,-20(fp)
			if (! did_dc[tbl]) {
 8009138:	e0fffd04 	addi	r3,fp,-12
 800913c:	e0bffb17 	ldw	r2,-20(fp)
 8009140:	1885883a 	add	r2,r3,r2
 8009144:	10800003 	ldbu	r2,0(r2)
 8009148:	10803fcc 	andi	r2,r2,255
 800914c:	1000201e 	bne	r2,zero,80091d0 <finish_pass_gather+0x144>
				htblptr = & cinfo->dc_huff_tbl_ptrs[tbl];
 8009150:	e0bffb17 	ldw	r2,-20(fp)
 8009154:	10800744 	addi	r2,r2,29
 8009158:	1085883a 	add	r2,r2,r2
 800915c:	1085883a 	add	r2,r2,r2
 8009160:	e0ffff17 	ldw	r3,-4(fp)
 8009164:	1885883a 	add	r2,r3,r2
 8009168:	e0bffc15 	stw	r2,-16(fp)
				if (*htblptr == NULL)
 800916c:	e0bffc17 	ldw	r2,-16(fp)
 8009170:	10800017 	ldw	r2,0(r2)
 8009174:	1000041e 	bne	r2,zero,8009188 <finish_pass_gather+0xfc>
					*htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
 8009178:	e13fff17 	ldw	r4,-4(fp)
 800917c:	800cfd40 	call	800cfd4 <jpeg_alloc_huff_table>
 8009180:	e0fffc17 	ldw	r3,-16(fp)
 8009184:	18800015 	stw	r2,0(r3)
				jpeg_gen_optimal_table(cinfo, *htblptr, entropy->dc_count_ptrs[tbl]);
 8009188:	e0bffc17 	ldw	r2,-16(fp)
 800918c:	10c00017 	ldw	r3,0(r2)
 8009190:	e13ff917 	ldw	r4,-28(fp)
 8009194:	e0bffb17 	ldw	r2,-20(fp)
 8009198:	108004c4 	addi	r2,r2,19
 800919c:	1085883a 	add	r2,r2,r2
 80091a0:	1085883a 	add	r2,r2,r2
 80091a4:	2085883a 	add	r2,r4,r2
 80091a8:	10800017 	ldw	r2,0(r2)
 80091ac:	e13fff17 	ldw	r4,-4(fp)
 80091b0:	180b883a 	mov	r5,r3
 80091b4:	100d883a 	mov	r6,r2
 80091b8:	80089c80 	call	80089c8 <jpeg_gen_optimal_table>
				did_dc[tbl] = TRUE;
 80091bc:	e0fffd04 	addi	r3,fp,-12
 80091c0:	e0bffb17 	ldw	r2,-20(fp)
 80091c4:	1885883a 	add	r2,r3,r2
 80091c8:	00c00044 	movi	r3,1
 80091cc:	10c00005 	stb	r3,0(r2)
			}
		}
		/* AC needs no table when not present */
		if (cinfo->Se) {
 80091d0:	e0bfff17 	ldw	r2,-4(fp)
 80091d4:	10805617 	ldw	r2,344(r2)
 80091d8:	10002926 	beq	r2,zero,8009280 <finish_pass_gather+0x1f4>
			tbl = compptr->ac_tbl_no;
 80091dc:	e0bffa17 	ldw	r2,-24(fp)
 80091e0:	10800617 	ldw	r2,24(r2)
 80091e4:	e0bffb15 	stw	r2,-20(fp)
			if (! did_ac[tbl]) {
 80091e8:	e0fffe04 	addi	r3,fp,-8
 80091ec:	e0bffb17 	ldw	r2,-20(fp)
 80091f0:	1885883a 	add	r2,r3,r2
 80091f4:	10800003 	ldbu	r2,0(r2)
 80091f8:	10803fcc 	andi	r2,r2,255
 80091fc:	1000201e 	bne	r2,zero,8009280 <finish_pass_gather+0x1f4>
				htblptr = & cinfo->ac_huff_tbl_ptrs[tbl];
 8009200:	e0bffb17 	ldw	r2,-20(fp)
 8009204:	10800844 	addi	r2,r2,33
 8009208:	1085883a 	add	r2,r2,r2
 800920c:	1085883a 	add	r2,r2,r2
 8009210:	e0ffff17 	ldw	r3,-4(fp)
 8009214:	1885883a 	add	r2,r3,r2
 8009218:	e0bffc15 	stw	r2,-16(fp)
				if (*htblptr == NULL)
 800921c:	e0bffc17 	ldw	r2,-16(fp)
 8009220:	10800017 	ldw	r2,0(r2)
 8009224:	1000041e 	bne	r2,zero,8009238 <finish_pass_gather+0x1ac>
					*htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
 8009228:	e13fff17 	ldw	r4,-4(fp)
 800922c:	800cfd40 	call	800cfd4 <jpeg_alloc_huff_table>
 8009230:	e0fffc17 	ldw	r3,-16(fp)
 8009234:	18800015 	stw	r2,0(r3)
				jpeg_gen_optimal_table(cinfo, *htblptr, entropy->ac_count_ptrs[tbl]);
 8009238:	e0bffc17 	ldw	r2,-16(fp)
 800923c:	10c00017 	ldw	r3,0(r2)
 8009240:	e13ff917 	ldw	r4,-28(fp)
 8009244:	e0bffb17 	ldw	r2,-20(fp)
 8009248:	108005c4 	addi	r2,r2,23
 800924c:	1085883a 	add	r2,r2,r2
 8009250:	1085883a 	add	r2,r2,r2
 8009254:	2085883a 	add	r2,r4,r2
 8009258:	10800017 	ldw	r2,0(r2)
 800925c:	e13fff17 	ldw	r4,-4(fp)
 8009260:	180b883a 	mov	r5,r3
 8009264:	100d883a 	mov	r6,r2
 8009268:	80089c80 	call	80089c8 <jpeg_gen_optimal_table>
				did_ac[tbl] = TRUE;
 800926c:	e0fffe04 	addi	r3,fp,-8
 8009270:	e0bffb17 	ldw	r2,-20(fp)
 8009274:	1885883a 	add	r2,r3,r2
 8009278:	00c00044 	movi	r3,1
 800927c:	10c00005 	stb	r3,0(r2)
		emit_eobrun(entropy);

	MEMZERO(did_dc, SIZEOF(did_dc));
	MEMZERO(did_ac, SIZEOF(did_ac));

	for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8009280:	e0bff817 	ldw	r2,-32(fp)
 8009284:	10800044 	addi	r2,r2,1
 8009288:	e0bff815 	stw	r2,-32(fp)
 800928c:	e0bfff17 	ldw	r2,-4(fp)
 8009290:	10804317 	ldw	r2,268(r2)
 8009294:	e0fff817 	ldw	r3,-32(fp)
 8009298:	18bf9616 	blt	r3,r2,80090f4 <finish_pass_gather+0x68>
				jpeg_gen_optimal_table(cinfo, *htblptr, entropy->ac_count_ptrs[tbl]);
				did_ac[tbl] = TRUE;
			}
		}
	}
}
 800929c:	e037883a 	mov	sp,fp
 80092a0:	dfc00117 	ldw	ra,4(sp)
 80092a4:	df000017 	ldw	fp,0(sp)
 80092a8:	dec00204 	addi	sp,sp,8
 80092ac:	f800283a 	ret

080092b0 <start_pass_huff>:
* just count the Huffman symbols used and generate Huffman code tables.
*/

METHODDEF(void)
	start_pass_huff (j_compress_ptr cinfo, boolean gather_statistics)
{
 80092b0:	defff804 	addi	sp,sp,-32
 80092b4:	dfc00715 	stw	ra,28(sp)
 80092b8:	df000615 	stw	fp,24(sp)
 80092bc:	df000604 	addi	fp,sp,24
 80092c0:	e13ffe15 	stw	r4,-8(fp)
 80092c4:	2805883a 	mov	r2,r5
 80092c8:	e0bfff05 	stb	r2,-4(fp)
	huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 80092cc:	e0bffe17 	ldw	r2,-8(fp)
 80092d0:	10806417 	ldw	r2,400(r2)
 80092d4:	e0bffb15 	stw	r2,-20(fp)
	int ci, tbl;
	jpeg_component_info * compptr;

	if (gather_statistics)
 80092d8:	e0bfff03 	ldbu	r2,-4(fp)
 80092dc:	10000526 	beq	r2,zero,80092f4 <start_pass_huff+0x44>
		entropy->pub.finish_pass = finish_pass_gather;
 80092e0:	e0bffb17 	ldw	r2,-20(fp)
 80092e4:	00c20074 	movhi	r3,2049
 80092e8:	18e42304 	addi	r3,r3,-28532
 80092ec:	10c00215 	stw	r3,8(r2)
 80092f0:	00000406 	br	8009304 <start_pass_huff+0x54>
	else
		entropy->pub.finish_pass = finish_pass_huff;
 80092f4:	e0bffb17 	ldw	r2,-20(fp)
 80092f8:	00c20074 	movhi	r3,2049
 80092fc:	18e11904 	addi	r3,r3,-31644
 8009300:	10c00215 	stw	r3,8(r2)

	if (cinfo->progressive_mode) {
 8009304:	e0bffe17 	ldw	r2,-8(fp)
 8009308:	10803d03 	ldbu	r2,244(r2)
 800930c:	10803fcc 	andi	r2,r2,255
 8009310:	10003826 	beq	r2,zero,80093f4 <start_pass_huff+0x144>
		entropy->cinfo = cinfo;
 8009314:	e0bffb17 	ldw	r2,-20(fp)
 8009318:	e0fffe17 	ldw	r3,-8(fp)
 800931c:	10c01e15 	stw	r3,120(r2)
		entropy->gather_statistics = gather_statistics;
 8009320:	e0bffb17 	ldw	r2,-20(fp)
 8009324:	e0ffff03 	ldbu	r3,-4(fp)
 8009328:	10c01b05 	stb	r3,108(r2)

		/* We assume jcmaster.c already validated the scan parameters. */

		/* Select execution routine */
		if (cinfo->Ah == 0) {
 800932c:	e0bffe17 	ldw	r2,-8(fp)
 8009330:	10805717 	ldw	r2,348(r2)
 8009334:	10000d1e 	bne	r2,zero,800936c <start_pass_huff+0xbc>
			if (cinfo->Ss == 0)
 8009338:	e0bffe17 	ldw	r2,-8(fp)
 800933c:	10805517 	ldw	r2,340(r2)
 8009340:	1000051e 	bne	r2,zero,8009358 <start_pass_huff+0xa8>
				entropy->pub.encode_mcu = encode_mcu_DC_first;
 8009344:	e0bffb17 	ldw	r2,-20(fp)
 8009348:	00c20034 	movhi	r3,2048
 800934c:	18dce004 	addi	r3,r3,29568
 8009350:	10c00115 	stw	r3,4(r2)
 8009354:	00001d06 	br	80093cc <start_pass_huff+0x11c>
			else
				entropy->pub.encode_mcu = encode_mcu_AC_first;
 8009358:	e0bffb17 	ldw	r2,-20(fp)
 800935c:	00c20034 	movhi	r3,2048
 8009360:	18dd8604 	addi	r3,r3,30232
 8009364:	10c00115 	stw	r3,4(r2)
 8009368:	00001806 	br	80093cc <start_pass_huff+0x11c>
		} else {
			if (cinfo->Ss == 0)
 800936c:	e0bffe17 	ldw	r2,-8(fp)
 8009370:	10805517 	ldw	r2,340(r2)
 8009374:	1000051e 	bne	r2,zero,800938c <start_pass_huff+0xdc>
				entropy->pub.encode_mcu = encode_mcu_DC_refine;
 8009378:	e0bffb17 	ldw	r2,-20(fp)
 800937c:	00c20034 	movhi	r3,2048
 8009380:	18de3f04 	addi	r3,r3,30972
 8009384:	10c00115 	stw	r3,4(r2)
 8009388:	00001006 	br	80093cc <start_pass_huff+0x11c>
			else {
				entropy->pub.encode_mcu = encode_mcu_AC_refine;
 800938c:	e0bffb17 	ldw	r2,-20(fp)
 8009390:	00c20034 	movhi	r3,2048
 8009394:	18dea604 	addi	r3,r3,31384
 8009398:	10c00115 	stw	r3,4(r2)
				/* AC refinement needs a correction bit buffer */
				if (entropy->bit_buffer == NULL)
 800939c:	e0bffb17 	ldw	r2,-20(fp)
 80093a0:	10802217 	ldw	r2,136(r2)
 80093a4:	1000091e 	bne	r2,zero,80093cc <start_pass_huff+0x11c>
					entropy->bit_buffer = (char *)
					(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80093a8:	e0bffe17 	ldw	r2,-8(fp)
 80093ac:	10800117 	ldw	r2,4(r2)
 80093b0:	10800017 	ldw	r2,0(r2)
 80093b4:	e13ffe17 	ldw	r4,-8(fp)
 80093b8:	01400044 	movi	r5,1
 80093bc:	0180fa04 	movi	r6,1000
 80093c0:	103ee83a 	callr	r2
				entropy->pub.encode_mcu = encode_mcu_DC_refine;
			else {
				entropy->pub.encode_mcu = encode_mcu_AC_refine;
				/* AC refinement needs a correction bit buffer */
				if (entropy->bit_buffer == NULL)
					entropy->bit_buffer = (char *)
 80093c4:	e0fffb17 	ldw	r3,-20(fp)
 80093c8:	18802215 	stw	r2,136(r3)
					MAX_CORR_BITS * SIZEOF(char));
			}
		}

		/* Initialize AC stuff */
		entropy->ac_tbl_no = cinfo->cur_comp_info[0]->ac_tbl_no;
 80093cc:	e0bffe17 	ldw	r2,-8(fp)
 80093d0:	10804417 	ldw	r2,272(r2)
 80093d4:	10c00617 	ldw	r3,24(r2)
 80093d8:	e0bffb17 	ldw	r2,-20(fp)
 80093dc:	10c01f15 	stw	r3,124(r2)
		entropy->EOBRUN = 0;
 80093e0:	e0bffb17 	ldw	r2,-20(fp)
 80093e4:	10002015 	stw	zero,128(r2)
		entropy->BE = 0;
 80093e8:	e0bffb17 	ldw	r2,-20(fp)
 80093ec:	10002115 	stw	zero,132(r2)
 80093f0:	00000b06 	br	8009420 <start_pass_huff+0x170>
	} else {
		if (gather_statistics)
 80093f4:	e0bfff03 	ldbu	r2,-4(fp)
 80093f8:	10000526 	beq	r2,zero,8009410 <start_pass_huff+0x160>
			entropy->pub.encode_mcu = encode_mcu_gather;
 80093fc:	e0bffb17 	ldw	r2,-20(fp)
 8009400:	00c20074 	movhi	r3,2049
 8009404:	18e1f904 	addi	r3,r3,-30748
 8009408:	10c00115 	stw	r3,4(r2)
 800940c:	00000406 	br	8009420 <start_pass_huff+0x170>
		else
			entropy->pub.encode_mcu = encode_mcu_huff;
 8009410:	e0bffb17 	ldw	r2,-20(fp)
 8009414:	00c20074 	movhi	r3,2049
 8009418:	18e06304 	addi	r3,r3,-32372
 800941c:	10c00115 	stw	r3,4(r2)
	}

	for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8009420:	e03ffa15 	stw	zero,-24(fp)
 8009424:	0000a506 	br	80096bc <start_pass_huff+0x40c>
		compptr = cinfo->cur_comp_info[ci];
 8009428:	e0fffe17 	ldw	r3,-8(fp)
 800942c:	e0bffa17 	ldw	r2,-24(fp)
 8009430:	10801104 	addi	r2,r2,68
 8009434:	1085883a 	add	r2,r2,r2
 8009438:	1085883a 	add	r2,r2,r2
 800943c:	1885883a 	add	r2,r3,r2
 8009440:	10800017 	ldw	r2,0(r2)
 8009444:	e0bffc15 	stw	r2,-16(fp)
		/* DC needs no table for refinement scan */
		if (cinfo->Ss == 0 && cinfo->Ah == 0) {
 8009448:	e0bffe17 	ldw	r2,-8(fp)
 800944c:	10805517 	ldw	r2,340(r2)
 8009450:	10004f1e 	bne	r2,zero,8009590 <start_pass_huff+0x2e0>
 8009454:	e0bffe17 	ldw	r2,-8(fp)
 8009458:	10805717 	ldw	r2,348(r2)
 800945c:	10004c1e 	bne	r2,zero,8009590 <start_pass_huff+0x2e0>
			tbl = compptr->dc_tbl_no;
 8009460:	e0bffc17 	ldw	r2,-16(fp)
 8009464:	10800517 	ldw	r2,20(r2)
 8009468:	e0bffd15 	stw	r2,-12(fp)
			if (gather_statistics) {
 800946c:	e0bfff03 	ldbu	r2,-4(fp)
 8009470:	10003526 	beq	r2,zero,8009548 <start_pass_huff+0x298>
				/* Check for invalid table index */
				/* (make_c_derived_tbl does this in the other path) */
				if (tbl < 0 || tbl >= NUM_HUFF_TBLS)
 8009474:	e0bffd17 	ldw	r2,-12(fp)
 8009478:	10000316 	blt	r2,zero,8009488 <start_pass_huff+0x1d8>
 800947c:	e0bffd17 	ldw	r2,-12(fp)
 8009480:	10800110 	cmplti	r2,r2,4
 8009484:	10000d1e 	bne	r2,zero,80094bc <start_pass_huff+0x20c>
					ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tbl);
 8009488:	e0bffe17 	ldw	r2,-8(fp)
 800948c:	10800017 	ldw	r2,0(r2)
 8009490:	00c00d04 	movi	r3,52
 8009494:	10c00515 	stw	r3,20(r2)
 8009498:	e0bffe17 	ldw	r2,-8(fp)
 800949c:	10800017 	ldw	r2,0(r2)
 80094a0:	e0fffd17 	ldw	r3,-12(fp)
 80094a4:	10c00615 	stw	r3,24(r2)
 80094a8:	e0bffe17 	ldw	r2,-8(fp)
 80094ac:	10800017 	ldw	r2,0(r2)
 80094b0:	10800017 	ldw	r2,0(r2)
 80094b4:	e13ffe17 	ldw	r4,-8(fp)
 80094b8:	103ee83a 	callr	r2
				/* Allocate and zero the statistics tables */
				/* Note that jpeg_gen_optimal_table expects 257 entries in each table! */
				if (entropy->dc_count_ptrs[tbl] == NULL)
 80094bc:	e0fffb17 	ldw	r3,-20(fp)
 80094c0:	e0bffd17 	ldw	r2,-12(fp)
 80094c4:	108004c4 	addi	r2,r2,19
 80094c8:	1085883a 	add	r2,r2,r2
 80094cc:	1085883a 	add	r2,r2,r2
 80094d0:	1885883a 	add	r2,r3,r2
 80094d4:	10800017 	ldw	r2,0(r2)
 80094d8:	10000f1e 	bne	r2,zero,8009518 <start_pass_huff+0x268>
					entropy->dc_count_ptrs[tbl] = (long *)
					(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80094dc:	e0bffe17 	ldw	r2,-8(fp)
 80094e0:	10800117 	ldw	r2,4(r2)
 80094e4:	10800017 	ldw	r2,0(r2)
 80094e8:	e13ffe17 	ldw	r4,-8(fp)
 80094ec:	01400044 	movi	r5,1
 80094f0:	01810104 	movi	r6,1028
 80094f4:	103ee83a 	callr	r2
 80094f8:	1007883a 	mov	r3,r2
				if (tbl < 0 || tbl >= NUM_HUFF_TBLS)
					ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tbl);
				/* Allocate and zero the statistics tables */
				/* Note that jpeg_gen_optimal_table expects 257 entries in each table! */
				if (entropy->dc_count_ptrs[tbl] == NULL)
					entropy->dc_count_ptrs[tbl] = (long *)
 80094fc:	e13ffb17 	ldw	r4,-20(fp)
 8009500:	e0bffd17 	ldw	r2,-12(fp)
 8009504:	108004c4 	addi	r2,r2,19
 8009508:	1085883a 	add	r2,r2,r2
 800950c:	1085883a 	add	r2,r2,r2
 8009510:	2085883a 	add	r2,r4,r2
 8009514:	10c00015 	stw	r3,0(r2)
					(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
					257 * SIZEOF(long));
				MEMZERO(entropy->dc_count_ptrs[tbl], 257 * SIZEOF(long));
 8009518:	e0fffb17 	ldw	r3,-20(fp)
 800951c:	e0bffd17 	ldw	r2,-12(fp)
 8009520:	108004c4 	addi	r2,r2,19
 8009524:	1085883a 	add	r2,r2,r2
 8009528:	1085883a 	add	r2,r2,r2
 800952c:	1885883a 	add	r2,r3,r2
 8009530:	10800017 	ldw	r2,0(r2)
 8009534:	1009883a 	mov	r4,r2
 8009538:	000b883a 	mov	r5,zero
 800953c:	01810104 	movi	r6,1028
 8009540:	802ecf00 	call	802ecf0 <memset>
 8009544:	00000b06 	br	8009574 <start_pass_huff+0x2c4>
			} else {
				/* Compute derived values for Huffman tables */
				/* We may do this more than once for a table, but it's not expensive */
				jpeg_make_c_derived_tbl(cinfo, TRUE, tbl,
 8009548:	e0bffd17 	ldw	r2,-12(fp)
 800954c:	108002c4 	addi	r2,r2,11
 8009550:	1085883a 	add	r2,r2,r2
 8009554:	1085883a 	add	r2,r2,r2
 8009558:	e0fffb17 	ldw	r3,-20(fp)
 800955c:	1885883a 	add	r2,r3,r2
 8009560:	e13ffe17 	ldw	r4,-8(fp)
 8009564:	01400044 	movi	r5,1
 8009568:	e1bffd17 	ldw	r6,-12(fp)
 800956c:	100f883a 	mov	r7,r2
 8009570:	80064700 	call	8006470 <jpeg_make_c_derived_tbl>
					& entropy->dc_derived_tbls[tbl]);
			}
			/* Initialize DC predictions to 0 */
			entropy->saved.last_dc_val[ci] = 0;
 8009574:	e0fffb17 	ldw	r3,-20(fp)
 8009578:	e0bffa17 	ldw	r2,-24(fp)
 800957c:	10800144 	addi	r2,r2,5
 8009580:	1085883a 	add	r2,r2,r2
 8009584:	1085883a 	add	r2,r2,r2
 8009588:	1885883a 	add	r2,r3,r2
 800958c:	10000015 	stw	zero,0(r2)
		}
		/* AC needs no table when not present */
		if (cinfo->Se) {
 8009590:	e0bffe17 	ldw	r2,-8(fp)
 8009594:	10805617 	ldw	r2,344(r2)
 8009598:	10004526 	beq	r2,zero,80096b0 <start_pass_huff+0x400>
			tbl = compptr->ac_tbl_no;
 800959c:	e0bffc17 	ldw	r2,-16(fp)
 80095a0:	10800617 	ldw	r2,24(r2)
 80095a4:	e0bffd15 	stw	r2,-12(fp)
			if (gather_statistics) {
 80095a8:	e0bfff03 	ldbu	r2,-4(fp)
 80095ac:	10003526 	beq	r2,zero,8009684 <start_pass_huff+0x3d4>
				if (tbl < 0 || tbl >= NUM_HUFF_TBLS)
 80095b0:	e0bffd17 	ldw	r2,-12(fp)
 80095b4:	10000316 	blt	r2,zero,80095c4 <start_pass_huff+0x314>
 80095b8:	e0bffd17 	ldw	r2,-12(fp)
 80095bc:	10800110 	cmplti	r2,r2,4
 80095c0:	10000d1e 	bne	r2,zero,80095f8 <start_pass_huff+0x348>
					ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tbl);
 80095c4:	e0bffe17 	ldw	r2,-8(fp)
 80095c8:	10800017 	ldw	r2,0(r2)
 80095cc:	00c00d04 	movi	r3,52
 80095d0:	10c00515 	stw	r3,20(r2)
 80095d4:	e0bffe17 	ldw	r2,-8(fp)
 80095d8:	10800017 	ldw	r2,0(r2)
 80095dc:	e0fffd17 	ldw	r3,-12(fp)
 80095e0:	10c00615 	stw	r3,24(r2)
 80095e4:	e0bffe17 	ldw	r2,-8(fp)
 80095e8:	10800017 	ldw	r2,0(r2)
 80095ec:	10800017 	ldw	r2,0(r2)
 80095f0:	e13ffe17 	ldw	r4,-8(fp)
 80095f4:	103ee83a 	callr	r2
				if (entropy->ac_count_ptrs[tbl] == NULL)
 80095f8:	e0fffb17 	ldw	r3,-20(fp)
 80095fc:	e0bffd17 	ldw	r2,-12(fp)
 8009600:	108005c4 	addi	r2,r2,23
 8009604:	1085883a 	add	r2,r2,r2
 8009608:	1085883a 	add	r2,r2,r2
 800960c:	1885883a 	add	r2,r3,r2
 8009610:	10800017 	ldw	r2,0(r2)
 8009614:	10000f1e 	bne	r2,zero,8009654 <start_pass_huff+0x3a4>
					entropy->ac_count_ptrs[tbl] = (long *)
					(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009618:	e0bffe17 	ldw	r2,-8(fp)
 800961c:	10800117 	ldw	r2,4(r2)
 8009620:	10800017 	ldw	r2,0(r2)
 8009624:	e13ffe17 	ldw	r4,-8(fp)
 8009628:	01400044 	movi	r5,1
 800962c:	01810104 	movi	r6,1028
 8009630:	103ee83a 	callr	r2
 8009634:	1007883a 	mov	r3,r2
			tbl = compptr->ac_tbl_no;
			if (gather_statistics) {
				if (tbl < 0 || tbl >= NUM_HUFF_TBLS)
					ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tbl);
				if (entropy->ac_count_ptrs[tbl] == NULL)
					entropy->ac_count_ptrs[tbl] = (long *)
 8009638:	e13ffb17 	ldw	r4,-20(fp)
 800963c:	e0bffd17 	ldw	r2,-12(fp)
 8009640:	108005c4 	addi	r2,r2,23
 8009644:	1085883a 	add	r2,r2,r2
 8009648:	1085883a 	add	r2,r2,r2
 800964c:	2085883a 	add	r2,r4,r2
 8009650:	10c00015 	stw	r3,0(r2)
					(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
					257 * SIZEOF(long));
				MEMZERO(entropy->ac_count_ptrs[tbl], 257 * SIZEOF(long));
 8009654:	e0fffb17 	ldw	r3,-20(fp)
 8009658:	e0bffd17 	ldw	r2,-12(fp)
 800965c:	108005c4 	addi	r2,r2,23
 8009660:	1085883a 	add	r2,r2,r2
 8009664:	1085883a 	add	r2,r2,r2
 8009668:	1885883a 	add	r2,r3,r2
 800966c:	10800017 	ldw	r2,0(r2)
 8009670:	1009883a 	mov	r4,r2
 8009674:	000b883a 	mov	r5,zero
 8009678:	01810104 	movi	r6,1028
 800967c:	802ecf00 	call	802ecf0 <memset>
 8009680:	00000b06 	br	80096b0 <start_pass_huff+0x400>
			} else {
				jpeg_make_c_derived_tbl(cinfo, FALSE, tbl,
 8009684:	e0bffd17 	ldw	r2,-12(fp)
 8009688:	108003c4 	addi	r2,r2,15
 800968c:	1085883a 	add	r2,r2,r2
 8009690:	1085883a 	add	r2,r2,r2
 8009694:	e0fffb17 	ldw	r3,-20(fp)
 8009698:	1885883a 	add	r2,r3,r2
 800969c:	e13ffe17 	ldw	r4,-8(fp)
 80096a0:	000b883a 	mov	r5,zero
 80096a4:	e1bffd17 	ldw	r6,-12(fp)
 80096a8:	100f883a 	mov	r7,r2
 80096ac:	80064700 	call	8006470 <jpeg_make_c_derived_tbl>
			entropy->pub.encode_mcu = encode_mcu_gather;
		else
			entropy->pub.encode_mcu = encode_mcu_huff;
	}

	for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 80096b0:	e0bffa17 	ldw	r2,-24(fp)
 80096b4:	10800044 	addi	r2,r2,1
 80096b8:	e0bffa15 	stw	r2,-24(fp)
 80096bc:	e0bffe17 	ldw	r2,-8(fp)
 80096c0:	10804317 	ldw	r2,268(r2)
 80096c4:	e0fffa17 	ldw	r3,-24(fp)
 80096c8:	18bf5716 	blt	r3,r2,8009428 <start_pass_huff+0x178>
			}
		}
	}

	/* Initialize bit buffer to empty */
	entropy->saved.put_buffer = 0;
 80096cc:	e0bffb17 	ldw	r2,-20(fp)
 80096d0:	10000315 	stw	zero,12(r2)
	entropy->saved.put_bits = 0;
 80096d4:	e0bffb17 	ldw	r2,-20(fp)
 80096d8:	10000415 	stw	zero,16(r2)

	/* Initialize restart stuff */
	entropy->restarts_to_go = cinfo->restart_interval;
 80096dc:	e0bffe17 	ldw	r2,-8(fp)
 80096e0:	10c03717 	ldw	r3,220(r2)
 80096e4:	e0bffb17 	ldw	r2,-20(fp)
 80096e8:	10c00915 	stw	r3,36(r2)
	entropy->next_restart_num = 0;
 80096ec:	e0bffb17 	ldw	r2,-20(fp)
 80096f0:	10000a15 	stw	zero,40(r2)
}
 80096f4:	e037883a 	mov	sp,fp
 80096f8:	dfc00117 	ldw	ra,4(sp)
 80096fc:	df000017 	ldw	fp,0(sp)
 8009700:	dec00204 	addi	sp,sp,8
 8009704:	f800283a 	ret

08009708 <jinit_huff_encoder>:
* Module initialization routine for Huffman entropy encoding.
*/

GLOBAL(void)
	jinit_huff_encoder (j_compress_ptr cinfo)
{
 8009708:	defffb04 	addi	sp,sp,-20
 800970c:	dfc00415 	stw	ra,16(sp)
 8009710:	df000315 	stw	fp,12(sp)
 8009714:	df000304 	addi	fp,sp,12
 8009718:	e13fff15 	stw	r4,-4(fp)
	huff_entropy_ptr entropy;
	int i;

	entropy = (huff_entropy_ptr)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800971c:	e0bfff17 	ldw	r2,-4(fp)
 8009720:	10800117 	ldw	r2,4(r2)
 8009724:	10800017 	ldw	r2,0(r2)
	jinit_huff_encoder (j_compress_ptr cinfo)
{
	huff_entropy_ptr entropy;
	int i;

	entropy = (huff_entropy_ptr)
 8009728:	e13fff17 	ldw	r4,-4(fp)
 800972c:	01400044 	movi	r5,1
 8009730:	01802304 	movi	r6,140
 8009734:	103ee83a 	callr	r2
 8009738:	e0bffe15 	stw	r2,-8(fp)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
		SIZEOF(huff_entropy_encoder));
	cinfo->entropy = (struct jpeg_entropy_encoder *) entropy;
 800973c:	e0bfff17 	ldw	r2,-4(fp)
 8009740:	e0fffe17 	ldw	r3,-8(fp)
 8009744:	10c06415 	stw	r3,400(r2)
	entropy->pub.start_pass = start_pass_huff;
 8009748:	e0bffe17 	ldw	r2,-8(fp)
 800974c:	00c20074 	movhi	r3,2049
 8009750:	18e4ac04 	addi	r3,r3,-27984
 8009754:	10c00015 	stw	r3,0(r2)

	/* Mark tables unallocated */
	for (i = 0; i < NUM_HUFF_TBLS; i++) {
 8009758:	e03ffd15 	stw	zero,-12(fp)
 800975c:	00002d06 	br	8009814 <jinit_huff_encoder+0x10c>
		entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
 8009760:	e0fffe17 	ldw	r3,-8(fp)
 8009764:	e0bffd17 	ldw	r2,-12(fp)
 8009768:	108003c4 	addi	r2,r2,15
 800976c:	1085883a 	add	r2,r2,r2
 8009770:	1085883a 	add	r2,r2,r2
 8009774:	1885883a 	add	r2,r3,r2
 8009778:	10000015 	stw	zero,0(r2)
 800977c:	e0fffe17 	ldw	r3,-8(fp)
 8009780:	e0bffd17 	ldw	r2,-12(fp)
 8009784:	108003c4 	addi	r2,r2,15
 8009788:	1085883a 	add	r2,r2,r2
 800978c:	1085883a 	add	r2,r2,r2
 8009790:	1885883a 	add	r2,r3,r2
 8009794:	10c00017 	ldw	r3,0(r2)
 8009798:	e13ffe17 	ldw	r4,-8(fp)
 800979c:	e0bffd17 	ldw	r2,-12(fp)
 80097a0:	108002c4 	addi	r2,r2,11
 80097a4:	1085883a 	add	r2,r2,r2
 80097a8:	1085883a 	add	r2,r2,r2
 80097ac:	2085883a 	add	r2,r4,r2
 80097b0:	10c00015 	stw	r3,0(r2)
		entropy->dc_count_ptrs[i] = entropy->ac_count_ptrs[i] = NULL;
 80097b4:	e0fffe17 	ldw	r3,-8(fp)
 80097b8:	e0bffd17 	ldw	r2,-12(fp)
 80097bc:	108005c4 	addi	r2,r2,23
 80097c0:	1085883a 	add	r2,r2,r2
 80097c4:	1085883a 	add	r2,r2,r2
 80097c8:	1885883a 	add	r2,r3,r2
 80097cc:	10000015 	stw	zero,0(r2)
 80097d0:	e0fffe17 	ldw	r3,-8(fp)
 80097d4:	e0bffd17 	ldw	r2,-12(fp)
 80097d8:	108005c4 	addi	r2,r2,23
 80097dc:	1085883a 	add	r2,r2,r2
 80097e0:	1085883a 	add	r2,r2,r2
 80097e4:	1885883a 	add	r2,r3,r2
 80097e8:	10c00017 	ldw	r3,0(r2)
 80097ec:	e13ffe17 	ldw	r4,-8(fp)
 80097f0:	e0bffd17 	ldw	r2,-12(fp)
 80097f4:	108004c4 	addi	r2,r2,19
 80097f8:	1085883a 	add	r2,r2,r2
 80097fc:	1085883a 	add	r2,r2,r2
 8009800:	2085883a 	add	r2,r4,r2
 8009804:	10c00015 	stw	r3,0(r2)
		SIZEOF(huff_entropy_encoder));
	cinfo->entropy = (struct jpeg_entropy_encoder *) entropy;
	entropy->pub.start_pass = start_pass_huff;

	/* Mark tables unallocated */
	for (i = 0; i < NUM_HUFF_TBLS; i++) {
 8009808:	e0bffd17 	ldw	r2,-12(fp)
 800980c:	10800044 	addi	r2,r2,1
 8009810:	e0bffd15 	stw	r2,-12(fp)
 8009814:	e0bffd17 	ldw	r2,-12(fp)
 8009818:	10800110 	cmplti	r2,r2,4
 800981c:	103fd01e 	bne	r2,zero,8009760 <jinit_huff_encoder+0x58>
		entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
		entropy->dc_count_ptrs[i] = entropy->ac_count_ptrs[i] = NULL;
	}

	if (cinfo->progressive_mode)
 8009820:	e0bfff17 	ldw	r2,-4(fp)
 8009824:	10803d03 	ldbu	r2,244(r2)
 8009828:	10803fcc 	andi	r2,r2,255
 800982c:	10000226 	beq	r2,zero,8009838 <jinit_huff_encoder+0x130>
		entropy->bit_buffer = NULL;	/* needed only in AC refinement scan */
 8009830:	e0bffe17 	ldw	r2,-8(fp)
 8009834:	10002215 	stw	zero,136(r2)
}
 8009838:	e037883a 	mov	sp,fp
 800983c:	dfc00117 	ldw	ra,4(sp)
 8009840:	df000017 	ldw	fp,0(sp)
 8009844:	dec00204 	addi	sp,sp,8
 8009848:	f800283a 	ret

0800984c <jinit_compress_master>:
* which modules will be used and give them appropriate initialization calls.
*/

GLOBAL(void)
	jinit_compress_master (j_compress_ptr cinfo)
{
 800984c:	defffd04 	addi	sp,sp,-12
 8009850:	dfc00215 	stw	ra,8(sp)
 8009854:	df000115 	stw	fp,4(sp)
 8009858:	df000104 	addi	fp,sp,4
 800985c:	e13fff15 	stw	r4,-4(fp)
	/* Initialize master control (includes parameter checking/processing) */
	jinit_c_master_control(cinfo, FALSE /* full compression */);
 8009860:	e13fff17 	ldw	r4,-4(fp)
 8009864:	000b883a 	mov	r5,zero
 8009868:	800ccd00 	call	800ccd0 <jinit_c_master_control>

	/* Preprocessing */
	if (! cinfo->raw_data_in) {
 800986c:	e0bfff17 	ldw	r2,-4(fp)
 8009870:	10803303 	ldbu	r2,204(r2)
 8009874:	10803fcc 	andi	r2,r2,255
 8009878:	1000071e 	bne	r2,zero,8009898 <jinit_compress_master+0x4c>
		jinit_color_converter(cinfo);
 800987c:	e13fff17 	ldw	r4,-4(fp)
 8009880:	80053f40 	call	80053f4 <jinit_color_converter>
		jinit_downsampler(cinfo);
 8009884:	e13fff17 	ldw	r4,-4(fp)
 8009888:	80102340 	call	8010234 <jinit_downsampler>
		jinit_c_prep_controller(cinfo, FALSE /* never need full buffer here */);
 800988c:	e13fff17 	ldw	r4,-4(fp)
 8009890:	000b883a 	mov	r5,zero
 8009894:	800efac0 	call	800efac <jinit_c_prep_controller>
	}
	/* Forward DCT */
	jinit_forward_dct(cinfo);
 8009898:	e13fff17 	ldw	r4,-4(fp)
 800989c:	80063b40 	call	80063b4 <jinit_forward_dct>
	/* Entropy encoding: either Huffman or arithmetic coding. */
	if (cinfo->arith_code)
 80098a0:	e0bfff17 	ldw	r2,-4(fp)
 80098a4:	10803343 	ldbu	r2,205(r2)
 80098a8:	10803fcc 	andi	r2,r2,255
 80098ac:	10000326 	beq	r2,zero,80098bc <jinit_compress_master+0x70>
		jinit_arith_encoder(cinfo);
 80098b0:	e13fff17 	ldw	r4,-4(fp)
 80098b4:	80039900 	call	8003990 <jinit_arith_encoder>
 80098b8:	00000206 	br	80098c4 <jinit_compress_master+0x78>
	else {
		jinit_huff_encoder(cinfo);
 80098bc:	e13fff17 	ldw	r4,-4(fp)
 80098c0:	80097080 	call	8009708 <jinit_huff_encoder>
	}

	/* Need a full-image coefficient buffer in any multi-pass mode. */
	jinit_c_coef_controller(cinfo,
		(boolean) (cinfo->num_scans > 1 || cinfo->optimize_coding));
 80098c4:	e0bfff17 	ldw	r2,-4(fp)
 80098c8:	10803117 	ldw	r2,196(r2)
 80098cc:	10800088 	cmpgei	r2,r2,2
 80098d0:	1000041e 	bne	r2,zero,80098e4 <jinit_compress_master+0x98>
 80098d4:	e0bfff17 	ldw	r2,-4(fp)
 80098d8:	10803383 	ldbu	r2,206(r2)
 80098dc:	10803fcc 	andi	r2,r2,255
 80098e0:	10000226 	beq	r2,zero,80098ec <jinit_compress_master+0xa0>
 80098e4:	00800044 	movi	r2,1
 80098e8:	00000106 	br	80098f0 <jinit_compress_master+0xa4>
 80098ec:	0005883a 	mov	r2,zero
	else {
		jinit_huff_encoder(cinfo);
	}

	/* Need a full-image coefficient buffer in any multi-pass mode. */
	jinit_c_coef_controller(cinfo,
 80098f0:	10803fcc 	andi	r2,r2,255
 80098f4:	e13fff17 	ldw	r4,-4(fp)
 80098f8:	100b883a 	mov	r5,r2
 80098fc:	80047b80 	call	80047b8 <jinit_c_coef_controller>
		(boolean) (cinfo->num_scans > 1 || cinfo->optimize_coding));
	jinit_c_main_controller(cinfo, FALSE /* never need full buffer here */);
 8009900:	e13fff17 	ldw	r4,-4(fp)
 8009904:	000b883a 	mov	r5,zero
 8009908:	8009b800 	call	8009b80 <jinit_c_main_controller>

	jinit_marker_writer(cinfo);
 800990c:	e13fff17 	ldw	r4,-4(fp)
 8009910:	800b0480 	call	800b048 <jinit_marker_writer>

	/* We can now tell the memory manager to allocate virtual arrays. */
	(*cinfo->mem->realize_virt_arrays) ((j_common_ptr) cinfo);
 8009914:	e0bfff17 	ldw	r2,-4(fp)
 8009918:	10800117 	ldw	r2,4(r2)
 800991c:	10800617 	ldw	r2,24(r2)
 8009920:	e13fff17 	ldw	r4,-4(fp)
 8009924:	103ee83a 	callr	r2

	/* Write the datastream header (SOI) immediately.
	* Frame and scan headers are postponed till later.
	* This lets application insert special markers after the SOI.
	*/
	(*cinfo->marker->write_file_header) (cinfo);
 8009928:	e0bfff17 	ldw	r2,-4(fp)
 800992c:	10806017 	ldw	r2,384(r2)
 8009930:	10800017 	ldw	r2,0(r2)
 8009934:	e13fff17 	ldw	r4,-4(fp)
 8009938:	103ee83a 	callr	r2
}
 800993c:	e037883a 	mov	sp,fp
 8009940:	dfc00117 	ldw	ra,4(sp)
 8009944:	df000017 	ldw	fp,0(sp)
 8009948:	dec00204 	addi	sp,sp,8
 800994c:	f800283a 	ret

08009950 <start_pass_main>:
* Initialize for a processing pass.
*/

METHODDEF(void)
	start_pass_main (j_compress_ptr cinfo, J_BUF_MODE pass_mode)
{
 8009950:	defffb04 	addi	sp,sp,-20
 8009954:	dfc00415 	stw	ra,16(sp)
 8009958:	df000315 	stw	fp,12(sp)
 800995c:	df000304 	addi	fp,sp,12
 8009960:	e13ffe15 	stw	r4,-8(fp)
 8009964:	e17fff15 	stw	r5,-4(fp)
	my_main_ptr main = (my_main_ptr) cinfo->main;
 8009968:	e0bffe17 	ldw	r2,-8(fp)
 800996c:	10805d17 	ldw	r2,372(r2)
 8009970:	e0bffd15 	stw	r2,-12(fp)

	/* Do nothing in raw-data mode. */
	if (cinfo->raw_data_in)
 8009974:	e0bffe17 	ldw	r2,-8(fp)
 8009978:	10803303 	ldbu	r2,204(r2)
 800997c:	10803fcc 	andi	r2,r2,255
 8009980:	10001b1e 	bne	r2,zero,80099f0 <start_pass_main+0xa0>
		return;

	main->cur_iMCU_row = 0;	/* initialize counters */
 8009984:	e0bffd17 	ldw	r2,-12(fp)
 8009988:	10000215 	stw	zero,8(r2)
	main->rowgroup_ctr = 0;
 800998c:	e0bffd17 	ldw	r2,-12(fp)
 8009990:	10000315 	stw	zero,12(r2)
	main->suspended = FALSE;
 8009994:	e0bffd17 	ldw	r2,-12(fp)
 8009998:	10000405 	stb	zero,16(r2)
	main->pass_mode = pass_mode;	/* save mode for use by process_data */
 800999c:	e0bffd17 	ldw	r2,-12(fp)
 80099a0:	e0ffff17 	ldw	r3,-4(fp)
 80099a4:	10c00515 	stw	r3,20(r2)

	switch (pass_mode) {
 80099a8:	e0bfff17 	ldw	r2,-4(fp)
 80099ac:	1000051e 	bne	r2,zero,80099c4 <start_pass_main+0x74>
	case JBUF_PASS_THRU:
#ifdef FULL_MAIN_BUFFER_SUPPORTED
		if (main->whole_image[0] != NULL)
			ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
#endif
		main->pub.process_data = process_data_simple_main;
 80099b0:	e0bffd17 	ldw	r2,-12(fp)
 80099b4:	00c20074 	movhi	r3,2049
 80099b8:	18e68204 	addi	r3,r3,-26104
 80099bc:	10c00115 	stw	r3,4(r2)
		break;
 80099c0:	00000c06 	br	80099f4 <start_pass_main+0xa4>
			ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
		main->pub.process_data = process_data_buffer_main;
		break;
#endif
	default:
		ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 80099c4:	e0bffe17 	ldw	r2,-8(fp)
 80099c8:	10800017 	ldw	r2,0(r2)
 80099cc:	00c000c4 	movi	r3,3
 80099d0:	10c00515 	stw	r3,20(r2)
 80099d4:	e0bffe17 	ldw	r2,-8(fp)
 80099d8:	10800017 	ldw	r2,0(r2)
 80099dc:	10800017 	ldw	r2,0(r2)
 80099e0:	e13ffe17 	ldw	r4,-8(fp)
 80099e4:	103ee83a 	callr	r2
		break;
 80099e8:	0001883a 	nop
 80099ec:	00000106 	br	80099f4 <start_pass_main+0xa4>
{
	my_main_ptr main = (my_main_ptr) cinfo->main;

	/* Do nothing in raw-data mode. */
	if (cinfo->raw_data_in)
		return;
 80099f0:	0001883a 	nop
#endif
	default:
		ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
		break;
	}
}
 80099f4:	e037883a 	mov	sp,fp
 80099f8:	dfc00117 	ldw	ra,4(sp)
 80099fc:	df000017 	ldw	fp,0(sp)
 8009a00:	dec00204 	addi	sp,sp,8
 8009a04:	f800283a 	ret

08009a08 <process_data_simple_main>:

METHODDEF(void)
	process_data_simple_main (j_compress_ptr cinfo,
	JSAMPARRAY input_buf, JDIMENSION *in_row_ctr,
	JDIMENSION in_rows_avail)
{
 8009a08:	defff604 	addi	sp,sp,-40
 8009a0c:	dfc00915 	stw	ra,36(sp)
 8009a10:	df000815 	stw	fp,32(sp)
 8009a14:	df000804 	addi	fp,sp,32
 8009a18:	e13ffc15 	stw	r4,-16(fp)
 8009a1c:	e17ffd15 	stw	r5,-12(fp)
 8009a20:	e1bffe15 	stw	r6,-8(fp)
 8009a24:	e1ffff15 	stw	r7,-4(fp)
	my_main_ptr main = (my_main_ptr) cinfo->main;
 8009a28:	e0bffc17 	ldw	r2,-16(fp)
 8009a2c:	10805d17 	ldw	r2,372(r2)
 8009a30:	e0bffb15 	stw	r2,-20(fp)

	while (main->cur_iMCU_row < cinfo->total_iMCU_rows) {
 8009a34:	00004406 	br	8009b48 <process_data_simple_main+0x140>
		/* Read input data if we haven't filled the main buffer yet */
		if (main->rowgroup_ctr < (JDIMENSION) cinfo->min_DCT_v_scaled_size)
 8009a38:	e0bffb17 	ldw	r2,-20(fp)
 8009a3c:	10c00317 	ldw	r3,12(r2)
 8009a40:	e0bffc17 	ldw	r2,-16(fp)
 8009a44:	10804117 	ldw	r2,260(r2)
 8009a48:	1880112e 	bgeu	r3,r2,8009a90 <process_data_simple_main+0x88>
			(*cinfo->prep->pre_process_data) (cinfo,
 8009a4c:	e0bffc17 	ldw	r2,-16(fp)
 8009a50:	10805e17 	ldw	r2,376(r2)
 8009a54:	10800117 	ldw	r2,4(r2)
			input_buf, in_row_ctr, in_rows_avail,
			main->buffer, &main->rowgroup_ctr,
 8009a58:	e0fffb17 	ldw	r3,-20(fp)
 8009a5c:	19400604 	addi	r5,r3,24
	my_main_ptr main = (my_main_ptr) cinfo->main;

	while (main->cur_iMCU_row < cinfo->total_iMCU_rows) {
		/* Read input data if we haven't filled the main buffer yet */
		if (main->rowgroup_ctr < (JDIMENSION) cinfo->min_DCT_v_scaled_size)
			(*cinfo->prep->pre_process_data) (cinfo,
 8009a60:	e0fffb17 	ldw	r3,-20(fp)
 8009a64:	19000304 	addi	r4,r3,12
			input_buf, in_row_ctr, in_rows_avail,
			main->buffer, &main->rowgroup_ctr,
			(JDIMENSION) cinfo->min_DCT_v_scaled_size);
 8009a68:	e0fffc17 	ldw	r3,-16(fp)
 8009a6c:	18c04117 	ldw	r3,260(r3)
	my_main_ptr main = (my_main_ptr) cinfo->main;

	while (main->cur_iMCU_row < cinfo->total_iMCU_rows) {
		/* Read input data if we haven't filled the main buffer yet */
		if (main->rowgroup_ctr < (JDIMENSION) cinfo->min_DCT_v_scaled_size)
			(*cinfo->prep->pre_process_data) (cinfo,
 8009a70:	d9400015 	stw	r5,0(sp)
 8009a74:	d9000115 	stw	r4,4(sp)
 8009a78:	d8c00215 	stw	r3,8(sp)
 8009a7c:	e13ffc17 	ldw	r4,-16(fp)
 8009a80:	e17ffd17 	ldw	r5,-12(fp)
 8009a84:	e1bffe17 	ldw	r6,-8(fp)
 8009a88:	e1ffff17 	ldw	r7,-4(fp)
 8009a8c:	103ee83a 	callr	r2

		/* If we don't have a full iMCU row buffered, return to application for
		* more data.  Note that preprocessor will always pad to fill the iMCU row
		* at the bottom of the image.
		*/
		if (main->rowgroup_ctr != (JDIMENSION) cinfo->min_DCT_v_scaled_size)
 8009a90:	e0bffb17 	ldw	r2,-20(fp)
 8009a94:	10c00317 	ldw	r3,12(r2)
 8009a98:	e0bffc17 	ldw	r2,-16(fp)
 8009a9c:	10804117 	ldw	r2,260(r2)
 8009aa0:	18802f1e 	bne	r3,r2,8009b60 <process_data_simple_main+0x158>
			return;

		/* Send the completed row to the compressor */
		if (! (*cinfo->coef->compress_data) (cinfo, main->buffer)) {
 8009aa4:	e0bffc17 	ldw	r2,-16(fp)
 8009aa8:	10805f17 	ldw	r2,380(r2)
 8009aac:	10c00117 	ldw	r3,4(r2)
 8009ab0:	e0bffb17 	ldw	r2,-20(fp)
 8009ab4:	10800604 	addi	r2,r2,24
 8009ab8:	e13ffc17 	ldw	r4,-16(fp)
 8009abc:	100b883a 	mov	r5,r2
 8009ac0:	183ee83a 	callr	r3
 8009ac4:	10803fcc 	andi	r2,r2,255
 8009ac8:	10000d1e 	bne	r2,zero,8009b00 <process_data_simple_main+0xf8>
			* suspend processing and return to the application.  In this situation
			* we pretend we didn't yet consume the last input row; otherwise, if
			* it happened to be the last row of the image, the application would
			* think we were done.
			*/
			if (! main->suspended) {
 8009acc:	e0bffb17 	ldw	r2,-20(fp)
 8009ad0:	10800403 	ldbu	r2,16(r2)
 8009ad4:	10803fcc 	andi	r2,r2,255
 8009ad8:	1000231e 	bne	r2,zero,8009b68 <process_data_simple_main+0x160>
				(*in_row_ctr)--;
 8009adc:	e0bffe17 	ldw	r2,-8(fp)
 8009ae0:	10800017 	ldw	r2,0(r2)
 8009ae4:	10ffffc4 	addi	r3,r2,-1
 8009ae8:	e0bffe17 	ldw	r2,-8(fp)
 8009aec:	10c00015 	stw	r3,0(r2)
				main->suspended = TRUE;
 8009af0:	e0bffb17 	ldw	r2,-20(fp)
 8009af4:	00c00044 	movi	r3,1
 8009af8:	10c00405 	stb	r3,16(r2)
			}
			return;
 8009afc:	00001a06 	br	8009b68 <process_data_simple_main+0x160>
		}
		/* We did finish the row.  Undo our little suspension hack if a previous
		* call suspended; then mark the main buffer empty.
		*/
		if (main->suspended) {
 8009b00:	e0bffb17 	ldw	r2,-20(fp)
 8009b04:	10800403 	ldbu	r2,16(r2)
 8009b08:	10803fcc 	andi	r2,r2,255
 8009b0c:	10000726 	beq	r2,zero,8009b2c <process_data_simple_main+0x124>
			(*in_row_ctr)++;
 8009b10:	e0bffe17 	ldw	r2,-8(fp)
 8009b14:	10800017 	ldw	r2,0(r2)
 8009b18:	10c00044 	addi	r3,r2,1
 8009b1c:	e0bffe17 	ldw	r2,-8(fp)
 8009b20:	10c00015 	stw	r3,0(r2)
			main->suspended = FALSE;
 8009b24:	e0bffb17 	ldw	r2,-20(fp)
 8009b28:	10000405 	stb	zero,16(r2)
		}
		main->rowgroup_ctr = 0;
 8009b2c:	e0bffb17 	ldw	r2,-20(fp)
 8009b30:	10000315 	stw	zero,12(r2)
		main->cur_iMCU_row++;
 8009b34:	e0bffb17 	ldw	r2,-20(fp)
 8009b38:	10800217 	ldw	r2,8(r2)
 8009b3c:	10c00044 	addi	r3,r2,1
 8009b40:	e0bffb17 	ldw	r2,-20(fp)
 8009b44:	10c00215 	stw	r3,8(r2)
	JSAMPARRAY input_buf, JDIMENSION *in_row_ctr,
	JDIMENSION in_rows_avail)
{
	my_main_ptr main = (my_main_ptr) cinfo->main;

	while (main->cur_iMCU_row < cinfo->total_iMCU_rows) {
 8009b48:	e0bffb17 	ldw	r2,-20(fp)
 8009b4c:	10c00217 	ldw	r3,8(r2)
 8009b50:	e0bffc17 	ldw	r2,-16(fp)
 8009b54:	10804217 	ldw	r2,264(r2)
 8009b58:	18bfb736 	bltu	r3,r2,8009a38 <process_data_simple_main+0x30>
 8009b5c:	00000306 	br	8009b6c <process_data_simple_main+0x164>
		/* If we don't have a full iMCU row buffered, return to application for
		* more data.  Note that preprocessor will always pad to fill the iMCU row
		* at the bottom of the image.
		*/
		if (main->rowgroup_ctr != (JDIMENSION) cinfo->min_DCT_v_scaled_size)
			return;
 8009b60:	0001883a 	nop
 8009b64:	00000106 	br	8009b6c <process_data_simple_main+0x164>
			*/
			if (! main->suspended) {
				(*in_row_ctr)--;
				main->suspended = TRUE;
			}
			return;
 8009b68:	0001883a 	nop
			main->suspended = FALSE;
		}
		main->rowgroup_ctr = 0;
		main->cur_iMCU_row++;
	}
}
 8009b6c:	e037883a 	mov	sp,fp
 8009b70:	dfc00117 	ldw	ra,4(sp)
 8009b74:	df000017 	ldw	fp,0(sp)
 8009b78:	dec00204 	addi	sp,sp,8
 8009b7c:	f800283a 	ret

08009b80 <jinit_c_main_controller>:
* Initialize main buffer controller.
*/

GLOBAL(void)
	jinit_c_main_controller (j_compress_ptr cinfo, boolean need_full_buffer)
{
 8009b80:	defff704 	addi	sp,sp,-36
 8009b84:	dfc00815 	stw	ra,32(sp)
 8009b88:	df000715 	stw	fp,28(sp)
 8009b8c:	dc400615 	stw	r17,24(sp)
 8009b90:	dc000515 	stw	r16,20(sp)
 8009b94:	df000504 	addi	fp,sp,20
 8009b98:	e13ffe15 	stw	r4,-8(fp)
 8009b9c:	2805883a 	mov	r2,r5
 8009ba0:	e0bfff05 	stb	r2,-4(fp)
	my_main_ptr main;
	int ci;
	jpeg_component_info *compptr;

	main = (my_main_ptr)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009ba4:	e0bffe17 	ldw	r2,-8(fp)
 8009ba8:	10800117 	ldw	r2,4(r2)
 8009bac:	10800017 	ldw	r2,0(r2)
{
	my_main_ptr main;
	int ci;
	jpeg_component_info *compptr;

	main = (my_main_ptr)
 8009bb0:	e13ffe17 	ldw	r4,-8(fp)
 8009bb4:	01400044 	movi	r5,1
 8009bb8:	01801004 	movi	r6,64
 8009bbc:	103ee83a 	callr	r2
 8009bc0:	e0bffd15 	stw	r2,-12(fp)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
		SIZEOF(my_main_controller));
	cinfo->main = (struct jpeg_c_main_controller *) main;
 8009bc4:	e0bffe17 	ldw	r2,-8(fp)
 8009bc8:	e0fffd17 	ldw	r3,-12(fp)
 8009bcc:	10c05d15 	stw	r3,372(r2)
	main->pub.start_pass = start_pass_main;
 8009bd0:	e0bffd17 	ldw	r2,-12(fp)
 8009bd4:	00c20074 	movhi	r3,2049
 8009bd8:	18e65404 	addi	r3,r3,-26288
 8009bdc:	10c00015 	stw	r3,0(r2)

	/* We don't need to create a buffer in raw-data mode. */
	if (cinfo->raw_data_in)
 8009be0:	e0bffe17 	ldw	r2,-8(fp)
 8009be4:	10803303 	ldbu	r2,204(r2)
 8009be8:	10803fcc 	andi	r2,r2,255
 8009bec:	10003b1e 	bne	r2,zero,8009cdc <jinit_c_main_controller+0x15c>
		return;

	/* Create the buffer.  It holds downsampled data, so each component
	* may be of a different size.
	*/
	if (need_full_buffer) {
 8009bf0:	e0bfff03 	ldbu	r2,-4(fp)
 8009bf4:	10000a26 	beq	r2,zero,8009c20 <jinit_c_main_controller+0xa0>
					(JDIMENSION) jround_up((long) compptr->height_in_blocks,
					(long) compptr->v_samp_factor) * DCTSIZE,
					(JDIMENSION) (compptr->v_samp_factor * compptr->DCT_v_scaled_size));
		}
#else
		ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 8009bf8:	e0bffe17 	ldw	r2,-8(fp)
 8009bfc:	10800017 	ldw	r2,0(r2)
 8009c00:	00c000c4 	movi	r3,3
 8009c04:	10c00515 	stw	r3,20(r2)
 8009c08:	e0bffe17 	ldw	r2,-8(fp)
 8009c0c:	10800017 	ldw	r2,0(r2)
 8009c10:	10800017 	ldw	r2,0(r2)
 8009c14:	e13ffe17 	ldw	r4,-8(fp)
 8009c18:	103ee83a 	callr	r2
 8009c1c:	00003006 	br	8009ce0 <jinit_c_main_controller+0x160>
	} else {
#ifdef FULL_MAIN_BUFFER_SUPPORTED
		main->whole_image[0] = NULL; /* flag for no virtual arrays */
#endif
		/* Allocate a strip buffer for each component */
		for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8009c20:	e03ffb15 	stw	zero,-20(fp)
 8009c24:	e0bffe17 	ldw	r2,-8(fp)
 8009c28:	10801417 	ldw	r2,80(r2)
 8009c2c:	e0bffc15 	stw	r2,-16(fp)
 8009c30:	00002506 	br	8009cc8 <jinit_c_main_controller+0x148>
			ci++, compptr++) {
				main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 8009c34:	e0bffe17 	ldw	r2,-8(fp)
 8009c38:	10800117 	ldw	r2,4(r2)
					((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009c3c:	14400217 	ldw	r17,8(r2)
					compptr->width_in_blocks * compptr->DCT_h_scaled_size,
 8009c40:	e0bffc17 	ldw	r2,-16(fp)
 8009c44:	10c00717 	ldw	r3,28(r2)
 8009c48:	e0bffc17 	ldw	r2,-16(fp)
 8009c4c:	10800917 	ldw	r2,36(r2)
#endif
		/* Allocate a strip buffer for each component */
		for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
			ci++, compptr++) {
				main->buffer[ci] = (*cinfo->mem->alloc_sarray)
					((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009c50:	1809883a 	mov	r4,r3
 8009c54:	100b883a 	mov	r5,r2
 8009c58:	802c2180 	call	802c218 <__mulsi3>
 8009c5c:	1021883a 	mov	r16,r2
					compptr->width_in_blocks * compptr->DCT_h_scaled_size,
					(JDIMENSION) (compptr->v_samp_factor * compptr->DCT_v_scaled_size));
 8009c60:	e0bffc17 	ldw	r2,-16(fp)
 8009c64:	10c00317 	ldw	r3,12(r2)
 8009c68:	e0bffc17 	ldw	r2,-16(fp)
 8009c6c:	10800a17 	ldw	r2,40(r2)
 8009c70:	1809883a 	mov	r4,r3
 8009c74:	100b883a 	mov	r5,r2
 8009c78:	802c2180 	call	802c218 <__mulsi3>
#endif
		/* Allocate a strip buffer for each component */
		for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
			ci++, compptr++) {
				main->buffer[ci] = (*cinfo->mem->alloc_sarray)
					((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009c7c:	e13ffe17 	ldw	r4,-8(fp)
 8009c80:	01400044 	movi	r5,1
 8009c84:	800d883a 	mov	r6,r16
 8009c88:	100f883a 	mov	r7,r2
 8009c8c:	883ee83a 	callr	r17
 8009c90:	1007883a 	mov	r3,r2
		main->whole_image[0] = NULL; /* flag for no virtual arrays */
#endif
		/* Allocate a strip buffer for each component */
		for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
			ci++, compptr++) {
				main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 8009c94:	e13ffd17 	ldw	r4,-12(fp)
 8009c98:	e0bffb17 	ldw	r2,-20(fp)
 8009c9c:	10800184 	addi	r2,r2,6
 8009ca0:	1085883a 	add	r2,r2,r2
 8009ca4:	1085883a 	add	r2,r2,r2
 8009ca8:	2085883a 	add	r2,r4,r2
 8009cac:	10c00015 	stw	r3,0(r2)
#ifdef FULL_MAIN_BUFFER_SUPPORTED
		main->whole_image[0] = NULL; /* flag for no virtual arrays */
#endif
		/* Allocate a strip buffer for each component */
		for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
			ci++, compptr++) {
 8009cb0:	e0bffb17 	ldw	r2,-20(fp)
 8009cb4:	10800044 	addi	r2,r2,1
 8009cb8:	e0bffb15 	stw	r2,-20(fp)
 8009cbc:	e0bffc17 	ldw	r2,-16(fp)
 8009cc0:	10801604 	addi	r2,r2,88
 8009cc4:	e0bffc15 	stw	r2,-16(fp)
	} else {
#ifdef FULL_MAIN_BUFFER_SUPPORTED
		main->whole_image[0] = NULL; /* flag for no virtual arrays */
#endif
		/* Allocate a strip buffer for each component */
		for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8009cc8:	e0bffe17 	ldw	r2,-8(fp)
 8009ccc:	10801217 	ldw	r2,72(r2)
 8009cd0:	e0fffb17 	ldw	r3,-20(fp)
 8009cd4:	18bfd716 	blt	r3,r2,8009c34 <jinit_c_main_controller+0xb4>
 8009cd8:	00000106 	br	8009ce0 <jinit_c_main_controller+0x160>
	cinfo->main = (struct jpeg_c_main_controller *) main;
	main->pub.start_pass = start_pass_main;

	/* We don't need to create a buffer in raw-data mode. */
	if (cinfo->raw_data_in)
		return;
 8009cdc:	0001883a 	nop
					((j_common_ptr) cinfo, JPOOL_IMAGE,
					compptr->width_in_blocks * compptr->DCT_h_scaled_size,
					(JDIMENSION) (compptr->v_samp_factor * compptr->DCT_v_scaled_size));
		}
	}
}
 8009ce0:	e037883a 	mov	sp,fp
 8009ce4:	dfc00317 	ldw	ra,12(sp)
 8009ce8:	df000217 	ldw	fp,8(sp)
 8009cec:	dc400117 	ldw	r17,4(sp)
 8009cf0:	dc000017 	ldw	r16,0(sp)
 8009cf4:	dec00404 	addi	sp,sp,16
 8009cf8:	f800283a 	ret

08009cfc <emit_byte>:
*/

LOCAL(void)
	emit_byte (j_compress_ptr cinfo, int val)
	/* Emit a byte */
{
 8009cfc:	defffb04 	addi	sp,sp,-20
 8009d00:	dfc00415 	stw	ra,16(sp)
 8009d04:	df000315 	stw	fp,12(sp)
 8009d08:	df000304 	addi	fp,sp,12
 8009d0c:	e13ffe15 	stw	r4,-8(fp)
 8009d10:	e17fff15 	stw	r5,-4(fp)
	struct jpeg_destination_mgr * dest = cinfo->dest;
 8009d14:	e0bffe17 	ldw	r2,-8(fp)
 8009d18:	10800617 	ldw	r2,24(r2)
 8009d1c:	e0bffd15 	stw	r2,-12(fp)

	*(dest->next_output_byte)++ = (JOCTET) val;
 8009d20:	e0bffd17 	ldw	r2,-12(fp)
 8009d24:	10800017 	ldw	r2,0(r2)
 8009d28:	e0ffff17 	ldw	r3,-4(fp)
 8009d2c:	10c00005 	stb	r3,0(r2)
 8009d30:	10c00044 	addi	r3,r2,1
 8009d34:	e0bffd17 	ldw	r2,-12(fp)
 8009d38:	10c00015 	stw	r3,0(r2)
	if (--dest->free_in_buffer == 0) {
 8009d3c:	e0bffd17 	ldw	r2,-12(fp)
 8009d40:	10800117 	ldw	r2,4(r2)
 8009d44:	10ffffc4 	addi	r3,r2,-1
 8009d48:	e0bffd17 	ldw	r2,-12(fp)
 8009d4c:	10c00115 	stw	r3,4(r2)
 8009d50:	e0bffd17 	ldw	r2,-12(fp)
 8009d54:	10800117 	ldw	r2,4(r2)
 8009d58:	10000f1e 	bne	r2,zero,8009d98 <emit_byte+0x9c>
		if (! (*dest->empty_output_buffer) (cinfo))
 8009d5c:	e0bffd17 	ldw	r2,-12(fp)
 8009d60:	10800317 	ldw	r2,12(r2)
 8009d64:	e13ffe17 	ldw	r4,-8(fp)
 8009d68:	103ee83a 	callr	r2
 8009d6c:	10803fcc 	andi	r2,r2,255
 8009d70:	1000091e 	bne	r2,zero,8009d98 <emit_byte+0x9c>
			ERREXIT(cinfo, JERR_CANT_SUSPEND);
 8009d74:	e0bffe17 	ldw	r2,-8(fp)
 8009d78:	10800017 	ldw	r2,0(r2)
 8009d7c:	00c00644 	movi	r3,25
 8009d80:	10c00515 	stw	r3,20(r2)
 8009d84:	e0bffe17 	ldw	r2,-8(fp)
 8009d88:	10800017 	ldw	r2,0(r2)
 8009d8c:	10800017 	ldw	r2,0(r2)
 8009d90:	e13ffe17 	ldw	r4,-8(fp)
 8009d94:	103ee83a 	callr	r2
	}
}
 8009d98:	e037883a 	mov	sp,fp
 8009d9c:	dfc00117 	ldw	ra,4(sp)
 8009da0:	df000017 	ldw	fp,0(sp)
 8009da4:	dec00204 	addi	sp,sp,8
 8009da8:	f800283a 	ret

08009dac <emit_marker>:


LOCAL(void)
	emit_marker (j_compress_ptr cinfo, JPEG_MARKER mark)
	/* Emit a marker code */
{
 8009dac:	defffc04 	addi	sp,sp,-16
 8009db0:	dfc00315 	stw	ra,12(sp)
 8009db4:	df000215 	stw	fp,8(sp)
 8009db8:	df000204 	addi	fp,sp,8
 8009dbc:	e13ffe15 	stw	r4,-8(fp)
 8009dc0:	e17fff15 	stw	r5,-4(fp)
	emit_byte(cinfo, 0xFF);
 8009dc4:	e13ffe17 	ldw	r4,-8(fp)
 8009dc8:	01403fc4 	movi	r5,255
 8009dcc:	8009cfc0 	call	8009cfc <emit_byte>
	emit_byte(cinfo, (int) mark);
 8009dd0:	e0bfff17 	ldw	r2,-4(fp)
 8009dd4:	e13ffe17 	ldw	r4,-8(fp)
 8009dd8:	100b883a 	mov	r5,r2
 8009ddc:	8009cfc0 	call	8009cfc <emit_byte>
}
 8009de0:	e037883a 	mov	sp,fp
 8009de4:	dfc00117 	ldw	ra,4(sp)
 8009de8:	df000017 	ldw	fp,0(sp)
 8009dec:	dec00204 	addi	sp,sp,8
 8009df0:	f800283a 	ret

08009df4 <emit_2bytes>:


LOCAL(void)
	emit_2bytes (j_compress_ptr cinfo, int value)
	/* Emit a 2-byte integer; these are always MSB first in JPEG files */
{
 8009df4:	defffc04 	addi	sp,sp,-16
 8009df8:	dfc00315 	stw	ra,12(sp)
 8009dfc:	df000215 	stw	fp,8(sp)
 8009e00:	df000204 	addi	fp,sp,8
 8009e04:	e13ffe15 	stw	r4,-8(fp)
 8009e08:	e17fff15 	stw	r5,-4(fp)
	emit_byte(cinfo, (value >> 8) & 0xFF);
 8009e0c:	e0bfff17 	ldw	r2,-4(fp)
 8009e10:	1005d23a 	srai	r2,r2,8
 8009e14:	10803fcc 	andi	r2,r2,255
 8009e18:	e13ffe17 	ldw	r4,-8(fp)
 8009e1c:	100b883a 	mov	r5,r2
 8009e20:	8009cfc0 	call	8009cfc <emit_byte>
	emit_byte(cinfo, value & 0xFF);
 8009e24:	e0bfff17 	ldw	r2,-4(fp)
 8009e28:	10803fcc 	andi	r2,r2,255
 8009e2c:	e13ffe17 	ldw	r4,-8(fp)
 8009e30:	100b883a 	mov	r5,r2
 8009e34:	8009cfc0 	call	8009cfc <emit_byte>
}
 8009e38:	e037883a 	mov	sp,fp
 8009e3c:	dfc00117 	ldw	ra,4(sp)
 8009e40:	df000017 	ldw	fp,0(sp)
 8009e44:	dec00204 	addi	sp,sp,8
 8009e48:	f800283a 	ret

08009e4c <emit_dqt>:

LOCAL(int)
	emit_dqt (j_compress_ptr cinfo, int index)
	/* Emit a DQT marker */
	/* Returns the precision used (0 = 8bits, 1 = 16bits) for baseline checking */
{
 8009e4c:	defff804 	addi	sp,sp,-32
 8009e50:	dfc00715 	stw	ra,28(sp)
 8009e54:	df000615 	stw	fp,24(sp)
 8009e58:	df000604 	addi	fp,sp,24
 8009e5c:	e13ffe15 	stw	r4,-8(fp)
 8009e60:	e17fff15 	stw	r5,-4(fp)
	JQUANT_TBL * qtbl = cinfo->quant_tbl_ptrs[index];
 8009e64:	e0fffe17 	ldw	r3,-8(fp)
 8009e68:	e0bfff17 	ldw	r2,-4(fp)
 8009e6c:	10800544 	addi	r2,r2,21
 8009e70:	1085883a 	add	r2,r2,r2
 8009e74:	1085883a 	add	r2,r2,r2
 8009e78:	1885883a 	add	r2,r3,r2
 8009e7c:	10800017 	ldw	r2,0(r2)
 8009e80:	e0bffc15 	stw	r2,-16(fp)
	int prec;
	int i;

	if (qtbl == NULL)
 8009e84:	e0bffc17 	ldw	r2,-16(fp)
 8009e88:	10000d1e 	bne	r2,zero,8009ec0 <emit_dqt+0x74>
		ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, index);
 8009e8c:	e0bffe17 	ldw	r2,-8(fp)
 8009e90:	10800017 	ldw	r2,0(r2)
 8009e94:	00c00d84 	movi	r3,54
 8009e98:	10c00515 	stw	r3,20(r2)
 8009e9c:	e0bffe17 	ldw	r2,-8(fp)
 8009ea0:	10800017 	ldw	r2,0(r2)
 8009ea4:	e0ffff17 	ldw	r3,-4(fp)
 8009ea8:	10c00615 	stw	r3,24(r2)
 8009eac:	e0bffe17 	ldw	r2,-8(fp)
 8009eb0:	10800017 	ldw	r2,0(r2)
 8009eb4:	10800017 	ldw	r2,0(r2)
 8009eb8:	e13ffe17 	ldw	r4,-8(fp)
 8009ebc:	103ee83a 	callr	r2

	prec = 0;
 8009ec0:	e03ffa15 	stw	zero,-24(fp)
	for (i = 0; i <= cinfo->lim_Se; i++) {
 8009ec4:	e03ffb15 	stw	zero,-20(fp)
 8009ec8:	00001306 	br	8009f18 <emit_dqt+0xcc>
		if (qtbl->quantval[cinfo->natural_order[i]] > 255)
 8009ecc:	e0bffe17 	ldw	r2,-8(fp)
 8009ed0:	10c05a17 	ldw	r3,360(r2)
 8009ed4:	e0bffb17 	ldw	r2,-20(fp)
 8009ed8:	1085883a 	add	r2,r2,r2
 8009edc:	1085883a 	add	r2,r2,r2
 8009ee0:	1885883a 	add	r2,r3,r2
 8009ee4:	10800017 	ldw	r2,0(r2)
 8009ee8:	e0fffc17 	ldw	r3,-16(fp)
 8009eec:	1085883a 	add	r2,r2,r2
 8009ef0:	1885883a 	add	r2,r3,r2
 8009ef4:	1080000b 	ldhu	r2,0(r2)
 8009ef8:	10bfffcc 	andi	r2,r2,65535
 8009efc:	10804030 	cmpltui	r2,r2,256
 8009f00:	1000021e 	bne	r2,zero,8009f0c <emit_dqt+0xc0>
			prec = 1;
 8009f04:	00800044 	movi	r2,1
 8009f08:	e0bffa15 	stw	r2,-24(fp)

	if (qtbl == NULL)
		ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, index);

	prec = 0;
	for (i = 0; i <= cinfo->lim_Se; i++) {
 8009f0c:	e0bffb17 	ldw	r2,-20(fp)
 8009f10:	10800044 	addi	r2,r2,1
 8009f14:	e0bffb15 	stw	r2,-20(fp)
 8009f18:	e0bffe17 	ldw	r2,-8(fp)
 8009f1c:	10c05b17 	ldw	r3,364(r2)
 8009f20:	e0bffb17 	ldw	r2,-20(fp)
 8009f24:	18bfe90e 	bge	r3,r2,8009ecc <emit_dqt+0x80>
		if (qtbl->quantval[cinfo->natural_order[i]] > 255)
			prec = 1;
	}

	if (! qtbl->sent_table) {
 8009f28:	e0bffc17 	ldw	r2,-16(fp)
 8009f2c:	10802003 	ldbu	r2,128(r2)
 8009f30:	10803fcc 	andi	r2,r2,255
 8009f34:	10003d1e 	bne	r2,zero,800a02c <emit_dqt+0x1e0>
		emit_marker(cinfo, M_DQT);
 8009f38:	e13ffe17 	ldw	r4,-8(fp)
 8009f3c:	014036c4 	movi	r5,219
 8009f40:	8009dac0 	call	8009dac <emit_marker>

		emit_2bytes(cinfo,
 8009f44:	e0bffa17 	ldw	r2,-24(fp)
 8009f48:	10000626 	beq	r2,zero,8009f64 <emit_dqt+0x118>
			prec ? cinfo->lim_Se * 2 + 2 + 1 + 2 : cinfo->lim_Se + 1 + 1 + 2);
 8009f4c:	e0bffe17 	ldw	r2,-8(fp)
 8009f50:	10805b17 	ldw	r2,364(r2)
 8009f54:	10800044 	addi	r2,r2,1
 8009f58:	1085883a 	add	r2,r2,r2
	}

	if (! qtbl->sent_table) {
		emit_marker(cinfo, M_DQT);

		emit_2bytes(cinfo,
 8009f5c:	108000c4 	addi	r2,r2,3
 8009f60:	00000306 	br	8009f70 <emit_dqt+0x124>
			prec ? cinfo->lim_Se * 2 + 2 + 1 + 2 : cinfo->lim_Se + 1 + 1 + 2);
 8009f64:	e0bffe17 	ldw	r2,-8(fp)
 8009f68:	10805b17 	ldw	r2,364(r2)
	}

	if (! qtbl->sent_table) {
		emit_marker(cinfo, M_DQT);

		emit_2bytes(cinfo,
 8009f6c:	10800104 	addi	r2,r2,4
 8009f70:	e13ffe17 	ldw	r4,-8(fp)
 8009f74:	100b883a 	mov	r5,r2
 8009f78:	8009df40 	call	8009df4 <emit_2bytes>
			prec ? cinfo->lim_Se * 2 + 2 + 1 + 2 : cinfo->lim_Se + 1 + 1 + 2);

		emit_byte(cinfo, index + (prec<<4));
 8009f7c:	e0bffa17 	ldw	r2,-24(fp)
 8009f80:	1006913a 	slli	r3,r2,4
 8009f84:	e0bfff17 	ldw	r2,-4(fp)
 8009f88:	1885883a 	add	r2,r3,r2
 8009f8c:	e13ffe17 	ldw	r4,-8(fp)
 8009f90:	100b883a 	mov	r5,r2
 8009f94:	8009cfc0 	call	8009cfc <emit_byte>

		for (i = 0; i <= cinfo->lim_Se; i++) {
 8009f98:	e03ffb15 	stw	zero,-20(fp)
 8009f9c:	00001c06 	br	800a010 <emit_dqt+0x1c4>
			/* The table entries must be emitted in zigzag order. */
			unsigned int qval = qtbl->quantval[cinfo->natural_order[i]];
 8009fa0:	e0bffe17 	ldw	r2,-8(fp)
 8009fa4:	10c05a17 	ldw	r3,360(r2)
 8009fa8:	e0bffb17 	ldw	r2,-20(fp)
 8009fac:	1085883a 	add	r2,r2,r2
 8009fb0:	1085883a 	add	r2,r2,r2
 8009fb4:	1885883a 	add	r2,r3,r2
 8009fb8:	10800017 	ldw	r2,0(r2)
 8009fbc:	e0fffc17 	ldw	r3,-16(fp)
 8009fc0:	1085883a 	add	r2,r2,r2
 8009fc4:	1885883a 	add	r2,r3,r2
 8009fc8:	1080000b 	ldhu	r2,0(r2)
 8009fcc:	10bfffcc 	andi	r2,r2,65535
 8009fd0:	e0bffd15 	stw	r2,-12(fp)
			if (prec)
 8009fd4:	e0bffa17 	ldw	r2,-24(fp)
 8009fd8:	10000526 	beq	r2,zero,8009ff0 <emit_dqt+0x1a4>
				emit_byte(cinfo, (int) (qval >> 8));
 8009fdc:	e0bffd17 	ldw	r2,-12(fp)
 8009fe0:	1004d23a 	srli	r2,r2,8
 8009fe4:	e13ffe17 	ldw	r4,-8(fp)
 8009fe8:	100b883a 	mov	r5,r2
 8009fec:	8009cfc0 	call	8009cfc <emit_byte>
			emit_byte(cinfo, (int) (qval & 0xFF));
 8009ff0:	e0bffd17 	ldw	r2,-12(fp)
 8009ff4:	10803fcc 	andi	r2,r2,255
 8009ff8:	e13ffe17 	ldw	r4,-8(fp)
 8009ffc:	100b883a 	mov	r5,r2
 800a000:	8009cfc0 	call	8009cfc <emit_byte>
		emit_2bytes(cinfo,
			prec ? cinfo->lim_Se * 2 + 2 + 1 + 2 : cinfo->lim_Se + 1 + 1 + 2);

		emit_byte(cinfo, index + (prec<<4));

		for (i = 0; i <= cinfo->lim_Se; i++) {
 800a004:	e0bffb17 	ldw	r2,-20(fp)
 800a008:	10800044 	addi	r2,r2,1
 800a00c:	e0bffb15 	stw	r2,-20(fp)
 800a010:	e0bffe17 	ldw	r2,-8(fp)
 800a014:	10c05b17 	ldw	r3,364(r2)
 800a018:	e0bffb17 	ldw	r2,-20(fp)
 800a01c:	18bfe00e 	bge	r3,r2,8009fa0 <emit_dqt+0x154>
			if (prec)
				emit_byte(cinfo, (int) (qval >> 8));
			emit_byte(cinfo, (int) (qval & 0xFF));
		}

		qtbl->sent_table = TRUE;
 800a020:	e0bffc17 	ldw	r2,-16(fp)
 800a024:	00c00044 	movi	r3,1
 800a028:	10c02005 	stb	r3,128(r2)
	}

	return prec;
 800a02c:	e0bffa17 	ldw	r2,-24(fp)
}
 800a030:	e037883a 	mov	sp,fp
 800a034:	dfc00117 	ldw	ra,4(sp)
 800a038:	df000017 	ldw	fp,0(sp)
 800a03c:	dec00204 	addi	sp,sp,8
 800a040:	f800283a 	ret

0800a044 <emit_dht>:


LOCAL(void)
	emit_dht (j_compress_ptr cinfo, int index, boolean is_ac)
	/* Emit a DHT marker */
{
 800a044:	defff804 	addi	sp,sp,-32
 800a048:	dfc00715 	stw	ra,28(sp)
 800a04c:	df000615 	stw	fp,24(sp)
 800a050:	df000604 	addi	fp,sp,24
 800a054:	e13ffd15 	stw	r4,-12(fp)
 800a058:	e17ffe15 	stw	r5,-8(fp)
 800a05c:	3005883a 	mov	r2,r6
 800a060:	e0bfff05 	stb	r2,-4(fp)
	JHUFF_TBL * htbl;
	int length, i;

	if (is_ac) {
 800a064:	e0bfff03 	ldbu	r2,-4(fp)
 800a068:	10000c26 	beq	r2,zero,800a09c <emit_dht+0x58>
		htbl = cinfo->ac_huff_tbl_ptrs[index];
 800a06c:	e0fffd17 	ldw	r3,-12(fp)
 800a070:	e0bffe17 	ldw	r2,-8(fp)
 800a074:	10800844 	addi	r2,r2,33
 800a078:	1085883a 	add	r2,r2,r2
 800a07c:	1085883a 	add	r2,r2,r2
 800a080:	1885883a 	add	r2,r3,r2
 800a084:	10800017 	ldw	r2,0(r2)
 800a088:	e0bffa15 	stw	r2,-24(fp)
		index += 0x10;		/* output index has AC bit set */
 800a08c:	e0bffe17 	ldw	r2,-8(fp)
 800a090:	10800404 	addi	r2,r2,16
 800a094:	e0bffe15 	stw	r2,-8(fp)
 800a098:	00000806 	br	800a0bc <emit_dht+0x78>
	} else {
		htbl = cinfo->dc_huff_tbl_ptrs[index];
 800a09c:	e0fffd17 	ldw	r3,-12(fp)
 800a0a0:	e0bffe17 	ldw	r2,-8(fp)
 800a0a4:	10800744 	addi	r2,r2,29
 800a0a8:	1085883a 	add	r2,r2,r2
 800a0ac:	1085883a 	add	r2,r2,r2
 800a0b0:	1885883a 	add	r2,r3,r2
 800a0b4:	10800017 	ldw	r2,0(r2)
 800a0b8:	e0bffa15 	stw	r2,-24(fp)
	}

	if (htbl == NULL)
 800a0bc:	e0bffa17 	ldw	r2,-24(fp)
 800a0c0:	10000d1e 	bne	r2,zero,800a0f8 <emit_dht+0xb4>
		ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, index);
 800a0c4:	e0bffd17 	ldw	r2,-12(fp)
 800a0c8:	10800017 	ldw	r2,0(r2)
 800a0cc:	00c00d04 	movi	r3,52
 800a0d0:	10c00515 	stw	r3,20(r2)
 800a0d4:	e0bffd17 	ldw	r2,-12(fp)
 800a0d8:	10800017 	ldw	r2,0(r2)
 800a0dc:	e0fffe17 	ldw	r3,-8(fp)
 800a0e0:	10c00615 	stw	r3,24(r2)
 800a0e4:	e0bffd17 	ldw	r2,-12(fp)
 800a0e8:	10800017 	ldw	r2,0(r2)
 800a0ec:	10800017 	ldw	r2,0(r2)
 800a0f0:	e13ffd17 	ldw	r4,-12(fp)
 800a0f4:	103ee83a 	callr	r2

	if (! htbl->sent_table) {
 800a0f8:	e0bffa17 	ldw	r2,-24(fp)
 800a0fc:	10804443 	ldbu	r2,273(r2)
 800a100:	10803fcc 	andi	r2,r2,255
 800a104:	1000421e 	bne	r2,zero,800a210 <emit_dht+0x1cc>
		emit_marker(cinfo, M_DHT);
 800a108:	e13ffd17 	ldw	r4,-12(fp)
 800a10c:	01403104 	movi	r5,196
 800a110:	8009dac0 	call	8009dac <emit_marker>

		length = 0;
 800a114:	e03ffb15 	stw	zero,-20(fp)
		for (i = 1; i <= 16; i++)
 800a118:	00800044 	movi	r2,1
 800a11c:	e0bffc15 	stw	r2,-16(fp)
 800a120:	00000b06 	br	800a150 <emit_dht+0x10c>
			length += htbl->bits[i];
 800a124:	e0fffa17 	ldw	r3,-24(fp)
 800a128:	e0bffc17 	ldw	r2,-16(fp)
 800a12c:	1885883a 	add	r2,r3,r2
 800a130:	10800003 	ldbu	r2,0(r2)
 800a134:	10803fcc 	andi	r2,r2,255
 800a138:	e0fffb17 	ldw	r3,-20(fp)
 800a13c:	1885883a 	add	r2,r3,r2
 800a140:	e0bffb15 	stw	r2,-20(fp)

	if (! htbl->sent_table) {
		emit_marker(cinfo, M_DHT);

		length = 0;
		for (i = 1; i <= 16; i++)
 800a144:	e0bffc17 	ldw	r2,-16(fp)
 800a148:	10800044 	addi	r2,r2,1
 800a14c:	e0bffc15 	stw	r2,-16(fp)
 800a150:	e0bffc17 	ldw	r2,-16(fp)
 800a154:	10800450 	cmplti	r2,r2,17
 800a158:	103ff21e 	bne	r2,zero,800a124 <emit_dht+0xe0>
			length += htbl->bits[i];

		emit_2bytes(cinfo, length + 2 + 1 + 16);
 800a15c:	e0bffb17 	ldw	r2,-20(fp)
 800a160:	108004c4 	addi	r2,r2,19
 800a164:	e13ffd17 	ldw	r4,-12(fp)
 800a168:	100b883a 	mov	r5,r2
 800a16c:	8009df40 	call	8009df4 <emit_2bytes>
		emit_byte(cinfo, index);
 800a170:	e13ffd17 	ldw	r4,-12(fp)
 800a174:	e17ffe17 	ldw	r5,-8(fp)
 800a178:	8009cfc0 	call	8009cfc <emit_byte>

		for (i = 1; i <= 16; i++)
 800a17c:	00800044 	movi	r2,1
 800a180:	e0bffc15 	stw	r2,-16(fp)
 800a184:	00000b06 	br	800a1b4 <emit_dht+0x170>
			emit_byte(cinfo, htbl->bits[i]);
 800a188:	e0fffa17 	ldw	r3,-24(fp)
 800a18c:	e0bffc17 	ldw	r2,-16(fp)
 800a190:	1885883a 	add	r2,r3,r2
 800a194:	10800003 	ldbu	r2,0(r2)
 800a198:	10803fcc 	andi	r2,r2,255
 800a19c:	e13ffd17 	ldw	r4,-12(fp)
 800a1a0:	100b883a 	mov	r5,r2
 800a1a4:	8009cfc0 	call	8009cfc <emit_byte>
			length += htbl->bits[i];

		emit_2bytes(cinfo, length + 2 + 1 + 16);
		emit_byte(cinfo, index);

		for (i = 1; i <= 16; i++)
 800a1a8:	e0bffc17 	ldw	r2,-16(fp)
 800a1ac:	10800044 	addi	r2,r2,1
 800a1b0:	e0bffc15 	stw	r2,-16(fp)
 800a1b4:	e0bffc17 	ldw	r2,-16(fp)
 800a1b8:	10800450 	cmplti	r2,r2,17
 800a1bc:	103ff21e 	bne	r2,zero,800a188 <emit_dht+0x144>
			emit_byte(cinfo, htbl->bits[i]);

		for (i = 0; i < length; i++)
 800a1c0:	e03ffc15 	stw	zero,-16(fp)
 800a1c4:	00000c06 	br	800a1f8 <emit_dht+0x1b4>
			emit_byte(cinfo, htbl->huffval[i]);
 800a1c8:	e0fffa17 	ldw	r3,-24(fp)
 800a1cc:	e0bffc17 	ldw	r2,-16(fp)
 800a1d0:	1885883a 	add	r2,r3,r2
 800a1d4:	10800444 	addi	r2,r2,17
 800a1d8:	10800003 	ldbu	r2,0(r2)
 800a1dc:	10803fcc 	andi	r2,r2,255
 800a1e0:	e13ffd17 	ldw	r4,-12(fp)
 800a1e4:	100b883a 	mov	r5,r2
 800a1e8:	8009cfc0 	call	8009cfc <emit_byte>
		emit_byte(cinfo, index);

		for (i = 1; i <= 16; i++)
			emit_byte(cinfo, htbl->bits[i]);

		for (i = 0; i < length; i++)
 800a1ec:	e0bffc17 	ldw	r2,-16(fp)
 800a1f0:	10800044 	addi	r2,r2,1
 800a1f4:	e0bffc15 	stw	r2,-16(fp)
 800a1f8:	e0fffc17 	ldw	r3,-16(fp)
 800a1fc:	e0bffb17 	ldw	r2,-20(fp)
 800a200:	18bff116 	blt	r3,r2,800a1c8 <emit_dht+0x184>
			emit_byte(cinfo, htbl->huffval[i]);

		htbl->sent_table = TRUE;
 800a204:	e0bffa17 	ldw	r2,-24(fp)
 800a208:	00c00044 	movi	r3,1
 800a20c:	10c04445 	stb	r3,273(r2)
	}
}
 800a210:	e037883a 	mov	sp,fp
 800a214:	dfc00117 	ldw	ra,4(sp)
 800a218:	df000017 	ldw	fp,0(sp)
 800a21c:	dec00204 	addi	sp,sp,8
 800a220:	f800283a 	ret

0800a224 <emit_dac>:
LOCAL(void)
	emit_dac (j_compress_ptr cinfo)
	/* Emit a DAC marker */
	/* Since the useful info is so small, we want to emit all the tables in */
	/* one DAC marker.  Therefore this routine does its own scan of the table. */
{
 800a224:	defff204 	addi	sp,sp,-56
 800a228:	dfc00d15 	stw	ra,52(sp)
 800a22c:	df000c15 	stw	fp,48(sp)
 800a230:	df000c04 	addi	fp,sp,48
 800a234:	e13fff15 	stw	r4,-4(fp)
	char dc_in_use[NUM_ARITH_TBLS];
	char ac_in_use[NUM_ARITH_TBLS];
	int length, i;
	jpeg_component_info *compptr;

	for (i = 0; i < NUM_ARITH_TBLS; i++)
 800a238:	e03ff515 	stw	zero,-44(fp)
 800a23c:	00000f06 	br	800a27c <emit_dac+0x58>
		dc_in_use[i] = ac_in_use[i] = 0;
 800a240:	e0fffb04 	addi	r3,fp,-20
 800a244:	e0bff517 	ldw	r2,-44(fp)
 800a248:	1885883a 	add	r2,r3,r2
 800a24c:	10000005 	stb	zero,0(r2)
 800a250:	e0fffb04 	addi	r3,fp,-20
 800a254:	e0bff517 	ldw	r2,-44(fp)
 800a258:	1885883a 	add	r2,r3,r2
 800a25c:	10c00003 	ldbu	r3,0(r2)
 800a260:	e13ff704 	addi	r4,fp,-36
 800a264:	e0bff517 	ldw	r2,-44(fp)
 800a268:	2085883a 	add	r2,r4,r2
 800a26c:	10c00005 	stb	r3,0(r2)
	char dc_in_use[NUM_ARITH_TBLS];
	char ac_in_use[NUM_ARITH_TBLS];
	int length, i;
	jpeg_component_info *compptr;

	for (i = 0; i < NUM_ARITH_TBLS; i++)
 800a270:	e0bff517 	ldw	r2,-44(fp)
 800a274:	10800044 	addi	r2,r2,1
 800a278:	e0bff515 	stw	r2,-44(fp)
 800a27c:	e0bff517 	ldw	r2,-44(fp)
 800a280:	10800410 	cmplti	r2,r2,16
 800a284:	103fee1e 	bne	r2,zero,800a240 <emit_dac+0x1c>
		dc_in_use[i] = ac_in_use[i] = 0;

	for (i = 0; i < cinfo->comps_in_scan; i++) {
 800a288:	e03ff515 	stw	zero,-44(fp)
 800a28c:	00002006 	br	800a310 <emit_dac+0xec>
		compptr = cinfo->cur_comp_info[i];
 800a290:	e0ffff17 	ldw	r3,-4(fp)
 800a294:	e0bff517 	ldw	r2,-44(fp)
 800a298:	10801104 	addi	r2,r2,68
 800a29c:	1085883a 	add	r2,r2,r2
 800a2a0:	1085883a 	add	r2,r2,r2
 800a2a4:	1885883a 	add	r2,r3,r2
 800a2a8:	10800017 	ldw	r2,0(r2)
 800a2ac:	e0bff615 	stw	r2,-40(fp)
		/* DC needs no table for refinement scan */
		if (cinfo->Ss == 0 && cinfo->Ah == 0)
 800a2b0:	e0bfff17 	ldw	r2,-4(fp)
 800a2b4:	10805517 	ldw	r2,340(r2)
 800a2b8:	1000091e 	bne	r2,zero,800a2e0 <emit_dac+0xbc>
 800a2bc:	e0bfff17 	ldw	r2,-4(fp)
 800a2c0:	10805717 	ldw	r2,348(r2)
 800a2c4:	1000061e 	bne	r2,zero,800a2e0 <emit_dac+0xbc>
			dc_in_use[compptr->dc_tbl_no] = 1;
 800a2c8:	e0bff617 	ldw	r2,-40(fp)
 800a2cc:	10800517 	ldw	r2,20(r2)
 800a2d0:	e0fff704 	addi	r3,fp,-36
 800a2d4:	1885883a 	add	r2,r3,r2
 800a2d8:	00c00044 	movi	r3,1
 800a2dc:	10c00005 	stb	r3,0(r2)
		/* AC needs no table when not present */
		if (cinfo->Se)
 800a2e0:	e0bfff17 	ldw	r2,-4(fp)
 800a2e4:	10805617 	ldw	r2,344(r2)
 800a2e8:	10000626 	beq	r2,zero,800a304 <emit_dac+0xe0>
			ac_in_use[compptr->ac_tbl_no] = 1;
 800a2ec:	e0bff617 	ldw	r2,-40(fp)
 800a2f0:	10800617 	ldw	r2,24(r2)
 800a2f4:	e0fffb04 	addi	r3,fp,-20
 800a2f8:	1885883a 	add	r2,r3,r2
 800a2fc:	00c00044 	movi	r3,1
 800a300:	10c00005 	stb	r3,0(r2)
	jpeg_component_info *compptr;

	for (i = 0; i < NUM_ARITH_TBLS; i++)
		dc_in_use[i] = ac_in_use[i] = 0;

	for (i = 0; i < cinfo->comps_in_scan; i++) {
 800a304:	e0bff517 	ldw	r2,-44(fp)
 800a308:	10800044 	addi	r2,r2,1
 800a30c:	e0bff515 	stw	r2,-44(fp)
 800a310:	e0bfff17 	ldw	r2,-4(fp)
 800a314:	10804317 	ldw	r2,268(r2)
 800a318:	e0fff517 	ldw	r3,-44(fp)
 800a31c:	18bfdc16 	blt	r3,r2,800a290 <emit_dac+0x6c>
		/* AC needs no table when not present */
		if (cinfo->Se)
			ac_in_use[compptr->ac_tbl_no] = 1;
	}

	length = 0;
 800a320:	e03ff415 	stw	zero,-48(fp)
	for (i = 0; i < NUM_ARITH_TBLS; i++)
 800a324:	e03ff515 	stw	zero,-44(fp)
 800a328:	00001506 	br	800a380 <emit_dac+0x15c>
		length += dc_in_use[i] + ac_in_use[i];
 800a32c:	e0fff704 	addi	r3,fp,-36
 800a330:	e0bff517 	ldw	r2,-44(fp)
 800a334:	1885883a 	add	r2,r3,r2
 800a338:	10800003 	ldbu	r2,0(r2)
 800a33c:	10c03fcc 	andi	r3,r2,255
 800a340:	18c0201c 	xori	r3,r3,128
 800a344:	18ffe004 	addi	r3,r3,-128
 800a348:	e13ffb04 	addi	r4,fp,-20
 800a34c:	e0bff517 	ldw	r2,-44(fp)
 800a350:	2085883a 	add	r2,r4,r2
 800a354:	10800003 	ldbu	r2,0(r2)
 800a358:	10803fcc 	andi	r2,r2,255
 800a35c:	1080201c 	xori	r2,r2,128
 800a360:	10bfe004 	addi	r2,r2,-128
 800a364:	1885883a 	add	r2,r3,r2
 800a368:	e0fff417 	ldw	r3,-48(fp)
 800a36c:	1885883a 	add	r2,r3,r2
 800a370:	e0bff415 	stw	r2,-48(fp)
		if (cinfo->Se)
			ac_in_use[compptr->ac_tbl_no] = 1;
	}

	length = 0;
	for (i = 0; i < NUM_ARITH_TBLS; i++)
 800a374:	e0bff517 	ldw	r2,-44(fp)
 800a378:	10800044 	addi	r2,r2,1
 800a37c:	e0bff515 	stw	r2,-44(fp)
 800a380:	e0bff517 	ldw	r2,-44(fp)
 800a384:	10800410 	cmplti	r2,r2,16
 800a388:	103fe81e 	bne	r2,zero,800a32c <emit_dac+0x108>
		length += dc_in_use[i] + ac_in_use[i];

	if (length) {
 800a38c:	e0bff417 	ldw	r2,-48(fp)
 800a390:	10004326 	beq	r2,zero,800a4a0 <emit_dac+0x27c>
		emit_marker(cinfo, M_DAC);
 800a394:	e13fff17 	ldw	r4,-4(fp)
 800a398:	01403304 	movi	r5,204
 800a39c:	8009dac0 	call	8009dac <emit_marker>

		emit_2bytes(cinfo, length*2 + 2);
 800a3a0:	e0bff417 	ldw	r2,-48(fp)
 800a3a4:	10800044 	addi	r2,r2,1
 800a3a8:	1085883a 	add	r2,r2,r2
 800a3ac:	e13fff17 	ldw	r4,-4(fp)
 800a3b0:	100b883a 	mov	r5,r2
 800a3b4:	8009df40 	call	8009df4 <emit_2bytes>

		for (i = 0; i < NUM_ARITH_TBLS; i++) {
 800a3b8:	e03ff515 	stw	zero,-44(fp)
 800a3bc:	00003506 	br	800a494 <emit_dac+0x270>
			if (dc_in_use[i]) {
 800a3c0:	e0fff704 	addi	r3,fp,-36
 800a3c4:	e0bff517 	ldw	r2,-44(fp)
 800a3c8:	1885883a 	add	r2,r3,r2
 800a3cc:	10800003 	ldbu	r2,0(r2)
 800a3d0:	10803fcc 	andi	r2,r2,255
 800a3d4:	1080201c 	xori	r2,r2,128
 800a3d8:	10bfe004 	addi	r2,r2,-128
 800a3dc:	10001426 	beq	r2,zero,800a430 <emit_dac+0x20c>
				emit_byte(cinfo, i);
 800a3e0:	e13fff17 	ldw	r4,-4(fp)
 800a3e4:	e17ff517 	ldw	r5,-44(fp)
 800a3e8:	8009cfc0 	call	8009cfc <emit_byte>
				emit_byte(cinfo, cinfo->arith_dc_L[i] + (cinfo->arith_dc_U[i]<<4));
 800a3ec:	e0ffff17 	ldw	r3,-4(fp)
 800a3f0:	e0bff517 	ldw	r2,-44(fp)
 800a3f4:	1885883a 	add	r2,r3,r2
 800a3f8:	10802504 	addi	r2,r2,148
 800a3fc:	10800003 	ldbu	r2,0(r2)
 800a400:	10c03fcc 	andi	r3,r2,255
 800a404:	e13fff17 	ldw	r4,-4(fp)
 800a408:	e0bff517 	ldw	r2,-44(fp)
 800a40c:	2085883a 	add	r2,r4,r2
 800a410:	10802904 	addi	r2,r2,164
 800a414:	10800003 	ldbu	r2,0(r2)
 800a418:	10803fcc 	andi	r2,r2,255
 800a41c:	1004913a 	slli	r2,r2,4
 800a420:	1885883a 	add	r2,r3,r2
 800a424:	e13fff17 	ldw	r4,-4(fp)
 800a428:	100b883a 	mov	r5,r2
 800a42c:	8009cfc0 	call	8009cfc <emit_byte>
			}
			if (ac_in_use[i]) {
 800a430:	e0fffb04 	addi	r3,fp,-20
 800a434:	e0bff517 	ldw	r2,-44(fp)
 800a438:	1885883a 	add	r2,r3,r2
 800a43c:	10800003 	ldbu	r2,0(r2)
 800a440:	10803fcc 	andi	r2,r2,255
 800a444:	1080201c 	xori	r2,r2,128
 800a448:	10bfe004 	addi	r2,r2,-128
 800a44c:	10000e26 	beq	r2,zero,800a488 <emit_dac+0x264>
				emit_byte(cinfo, i + 0x10);
 800a450:	e0bff517 	ldw	r2,-44(fp)
 800a454:	10800404 	addi	r2,r2,16
 800a458:	e13fff17 	ldw	r4,-4(fp)
 800a45c:	100b883a 	mov	r5,r2
 800a460:	8009cfc0 	call	8009cfc <emit_byte>
				emit_byte(cinfo, cinfo->arith_ac_K[i]);
 800a464:	e0ffff17 	ldw	r3,-4(fp)
 800a468:	e0bff517 	ldw	r2,-44(fp)
 800a46c:	1885883a 	add	r2,r3,r2
 800a470:	10802d04 	addi	r2,r2,180
 800a474:	10800003 	ldbu	r2,0(r2)
 800a478:	10803fcc 	andi	r2,r2,255
 800a47c:	e13fff17 	ldw	r4,-4(fp)
 800a480:	100b883a 	mov	r5,r2
 800a484:	8009cfc0 	call	8009cfc <emit_byte>
	if (length) {
		emit_marker(cinfo, M_DAC);

		emit_2bytes(cinfo, length*2 + 2);

		for (i = 0; i < NUM_ARITH_TBLS; i++) {
 800a488:	e0bff517 	ldw	r2,-44(fp)
 800a48c:	10800044 	addi	r2,r2,1
 800a490:	e0bff515 	stw	r2,-44(fp)
 800a494:	e0bff517 	ldw	r2,-44(fp)
 800a498:	10800410 	cmplti	r2,r2,16
 800a49c:	103fc81e 	bne	r2,zero,800a3c0 <emit_dac+0x19c>
				emit_byte(cinfo, cinfo->arith_ac_K[i]);
			}
		}
	}
#endif /* C_ARITH_CODING_SUPPORTED */
}
 800a4a0:	e037883a 	mov	sp,fp
 800a4a4:	dfc00117 	ldw	ra,4(sp)
 800a4a8:	df000017 	ldw	fp,0(sp)
 800a4ac:	dec00204 	addi	sp,sp,8
 800a4b0:	f800283a 	ret

0800a4b4 <emit_dri>:


LOCAL(void)
	emit_dri (j_compress_ptr cinfo)
	/* Emit a DRI marker */
{
 800a4b4:	defffd04 	addi	sp,sp,-12
 800a4b8:	dfc00215 	stw	ra,8(sp)
 800a4bc:	df000115 	stw	fp,4(sp)
 800a4c0:	df000104 	addi	fp,sp,4
 800a4c4:	e13fff15 	stw	r4,-4(fp)
	emit_marker(cinfo, M_DRI);
 800a4c8:	e13fff17 	ldw	r4,-4(fp)
 800a4cc:	01403744 	movi	r5,221
 800a4d0:	8009dac0 	call	8009dac <emit_marker>

	emit_2bytes(cinfo, 4);	/* fixed length */
 800a4d4:	e13fff17 	ldw	r4,-4(fp)
 800a4d8:	01400104 	movi	r5,4
 800a4dc:	8009df40 	call	8009df4 <emit_2bytes>

	emit_2bytes(cinfo, (int) cinfo->restart_interval);
 800a4e0:	e0bfff17 	ldw	r2,-4(fp)
 800a4e4:	10803717 	ldw	r2,220(r2)
 800a4e8:	e13fff17 	ldw	r4,-4(fp)
 800a4ec:	100b883a 	mov	r5,r2
 800a4f0:	8009df40 	call	8009df4 <emit_2bytes>
}
 800a4f4:	e037883a 	mov	sp,fp
 800a4f8:	dfc00117 	ldw	ra,4(sp)
 800a4fc:	df000017 	ldw	fp,0(sp)
 800a500:	dec00204 	addi	sp,sp,8
 800a504:	f800283a 	ret

0800a508 <emit_sof>:


LOCAL(void)
	emit_sof (j_compress_ptr cinfo, JPEG_MARKER code)
	/* Emit a SOF marker */
{
 800a508:	defffa04 	addi	sp,sp,-24
 800a50c:	dfc00515 	stw	ra,20(sp)
 800a510:	df000415 	stw	fp,16(sp)
 800a514:	df000404 	addi	fp,sp,16
 800a518:	e13ffe15 	stw	r4,-8(fp)
 800a51c:	e17fff15 	stw	r5,-4(fp)
	int ci;
	jpeg_component_info *compptr;

	emit_marker(cinfo, code);
 800a520:	e13ffe17 	ldw	r4,-8(fp)
 800a524:	e17fff17 	ldw	r5,-4(fp)
 800a528:	8009dac0 	call	8009dac <emit_marker>

	emit_2bytes(cinfo, 3 * cinfo->num_components + 2 + 5 + 1); /* length */
 800a52c:	e0bffe17 	ldw	r2,-8(fp)
 800a530:	10c01217 	ldw	r3,72(r2)
 800a534:	1805883a 	mov	r2,r3
 800a538:	1085883a 	add	r2,r2,r2
 800a53c:	10c5883a 	add	r2,r2,r3
 800a540:	10800204 	addi	r2,r2,8
 800a544:	e13ffe17 	ldw	r4,-8(fp)
 800a548:	100b883a 	mov	r5,r2
 800a54c:	8009df40 	call	8009df4 <emit_2bytes>

	/* Make sure image isn't bigger than SOF field can handle */
	if ((long) cinfo->jpeg_height > 65535L ||
 800a550:	e0bffe17 	ldw	r2,-8(fp)
 800a554:	10801017 	ldw	r2,64(r2)
 800a558:	00ffffd4 	movui	r3,65535
 800a55c:	18800416 	blt	r3,r2,800a570 <emit_sof+0x68>
		(long) cinfo->jpeg_width > 65535L)
 800a560:	e0bffe17 	ldw	r2,-8(fp)
 800a564:	10800f17 	ldw	r2,60(r2)
	emit_marker(cinfo, code);

	emit_2bytes(cinfo, 3 * cinfo->num_components + 2 + 5 + 1); /* length */

	/* Make sure image isn't bigger than SOF field can handle */
	if ((long) cinfo->jpeg_height > 65535L ||
 800a568:	00ffffd4 	movui	r3,65535
 800a56c:	18800d0e 	bge	r3,r2,800a5a4 <emit_sof+0x9c>
		(long) cinfo->jpeg_width > 65535L)
		ERREXIT1(cinfo, JERR_IMAGE_TOO_BIG, (unsigned int) 65535);
 800a570:	e0bffe17 	ldw	r2,-8(fp)
 800a574:	10800017 	ldw	r2,0(r2)
 800a578:	00c00a84 	movi	r3,42
 800a57c:	10c00515 	stw	r3,20(r2)
 800a580:	e0bffe17 	ldw	r2,-8(fp)
 800a584:	10800017 	ldw	r2,0(r2)
 800a588:	00ffffd4 	movui	r3,65535
 800a58c:	10c00615 	stw	r3,24(r2)
 800a590:	e0bffe17 	ldw	r2,-8(fp)
 800a594:	10800017 	ldw	r2,0(r2)
 800a598:	10800017 	ldw	r2,0(r2)
 800a59c:	e13ffe17 	ldw	r4,-8(fp)
 800a5a0:	103ee83a 	callr	r2

	emit_byte(cinfo, cinfo->data_precision);
 800a5a4:	e0bffe17 	ldw	r2,-8(fp)
 800a5a8:	10801117 	ldw	r2,68(r2)
 800a5ac:	e13ffe17 	ldw	r4,-8(fp)
 800a5b0:	100b883a 	mov	r5,r2
 800a5b4:	8009cfc0 	call	8009cfc <emit_byte>
	emit_2bytes(cinfo, (int) cinfo->jpeg_height);
 800a5b8:	e0bffe17 	ldw	r2,-8(fp)
 800a5bc:	10801017 	ldw	r2,64(r2)
 800a5c0:	e13ffe17 	ldw	r4,-8(fp)
 800a5c4:	100b883a 	mov	r5,r2
 800a5c8:	8009df40 	call	8009df4 <emit_2bytes>
	emit_2bytes(cinfo, (int) cinfo->jpeg_width);
 800a5cc:	e0bffe17 	ldw	r2,-8(fp)
 800a5d0:	10800f17 	ldw	r2,60(r2)
 800a5d4:	e13ffe17 	ldw	r4,-8(fp)
 800a5d8:	100b883a 	mov	r5,r2
 800a5dc:	8009df40 	call	8009df4 <emit_2bytes>

	emit_byte(cinfo, cinfo->num_components);
 800a5e0:	e0bffe17 	ldw	r2,-8(fp)
 800a5e4:	10801217 	ldw	r2,72(r2)
 800a5e8:	e13ffe17 	ldw	r4,-8(fp)
 800a5ec:	100b883a 	mov	r5,r2
 800a5f0:	8009cfc0 	call	8009cfc <emit_byte>

	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a5f4:	e03ffc15 	stw	zero,-16(fp)
 800a5f8:	e0bffe17 	ldw	r2,-8(fp)
 800a5fc:	10801417 	ldw	r2,80(r2)
 800a600:	e0bffd15 	stw	r2,-12(fp)
 800a604:	00001906 	br	800a66c <emit_sof+0x164>
		ci++, compptr++) {
			emit_byte(cinfo, compptr->component_id);
 800a608:	e0bffd17 	ldw	r2,-12(fp)
 800a60c:	10800017 	ldw	r2,0(r2)
 800a610:	e13ffe17 	ldw	r4,-8(fp)
 800a614:	100b883a 	mov	r5,r2
 800a618:	8009cfc0 	call	8009cfc <emit_byte>
			emit_byte(cinfo, (compptr->h_samp_factor << 4) + compptr->v_samp_factor);
 800a61c:	e0bffd17 	ldw	r2,-12(fp)
 800a620:	10800217 	ldw	r2,8(r2)
 800a624:	1006913a 	slli	r3,r2,4
 800a628:	e0bffd17 	ldw	r2,-12(fp)
 800a62c:	10800317 	ldw	r2,12(r2)
 800a630:	1885883a 	add	r2,r3,r2
 800a634:	e13ffe17 	ldw	r4,-8(fp)
 800a638:	100b883a 	mov	r5,r2
 800a63c:	8009cfc0 	call	8009cfc <emit_byte>
			emit_byte(cinfo, compptr->quant_tbl_no);
 800a640:	e0bffd17 	ldw	r2,-12(fp)
 800a644:	10800417 	ldw	r2,16(r2)
 800a648:	e13ffe17 	ldw	r4,-8(fp)
 800a64c:	100b883a 	mov	r5,r2
 800a650:	8009cfc0 	call	8009cfc <emit_byte>
	emit_2bytes(cinfo, (int) cinfo->jpeg_width);

	emit_byte(cinfo, cinfo->num_components);

	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
		ci++, compptr++) {
 800a654:	e0bffc17 	ldw	r2,-16(fp)
 800a658:	10800044 	addi	r2,r2,1
 800a65c:	e0bffc15 	stw	r2,-16(fp)
 800a660:	e0bffd17 	ldw	r2,-12(fp)
 800a664:	10801604 	addi	r2,r2,88
 800a668:	e0bffd15 	stw	r2,-12(fp)
	emit_2bytes(cinfo, (int) cinfo->jpeg_height);
	emit_2bytes(cinfo, (int) cinfo->jpeg_width);

	emit_byte(cinfo, cinfo->num_components);

	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a66c:	e0bffe17 	ldw	r2,-8(fp)
 800a670:	10801217 	ldw	r2,72(r2)
 800a674:	e0fffc17 	ldw	r3,-16(fp)
 800a678:	18bfe316 	blt	r3,r2,800a608 <emit_sof+0x100>
		ci++, compptr++) {
			emit_byte(cinfo, compptr->component_id);
			emit_byte(cinfo, (compptr->h_samp_factor << 4) + compptr->v_samp_factor);
			emit_byte(cinfo, compptr->quant_tbl_no);
	}
}
 800a67c:	e037883a 	mov	sp,fp
 800a680:	dfc00117 	ldw	ra,4(sp)
 800a684:	df000017 	ldw	fp,0(sp)
 800a688:	dec00204 	addi	sp,sp,8
 800a68c:	f800283a 	ret

0800a690 <emit_sos>:


LOCAL(void)
	emit_sos (j_compress_ptr cinfo)
	/* Emit a SOS marker */
{
 800a690:	defff904 	addi	sp,sp,-28
 800a694:	dfc00615 	stw	ra,24(sp)
 800a698:	df000515 	stw	fp,20(sp)
 800a69c:	df000504 	addi	fp,sp,20
 800a6a0:	e13fff15 	stw	r4,-4(fp)
	int i, td, ta;
	jpeg_component_info *compptr;

	emit_marker(cinfo, M_SOS);
 800a6a4:	e13fff17 	ldw	r4,-4(fp)
 800a6a8:	01403684 	movi	r5,218
 800a6ac:	8009dac0 	call	8009dac <emit_marker>

	emit_2bytes(cinfo, 2 * cinfo->comps_in_scan + 2 + 1 + 3); /* length */
 800a6b0:	e0bfff17 	ldw	r2,-4(fp)
 800a6b4:	10804317 	ldw	r2,268(r2)
 800a6b8:	108000c4 	addi	r2,r2,3
 800a6bc:	1085883a 	add	r2,r2,r2
 800a6c0:	e13fff17 	ldw	r4,-4(fp)
 800a6c4:	100b883a 	mov	r5,r2
 800a6c8:	8009df40 	call	8009df4 <emit_2bytes>

	emit_byte(cinfo, cinfo->comps_in_scan);
 800a6cc:	e0bfff17 	ldw	r2,-4(fp)
 800a6d0:	10804317 	ldw	r2,268(r2)
 800a6d4:	e13fff17 	ldw	r4,-4(fp)
 800a6d8:	100b883a 	mov	r5,r2
 800a6dc:	8009cfc0 	call	8009cfc <emit_byte>

	for (i = 0; i < cinfo->comps_in_scan; i++) {
 800a6e0:	e03ffb15 	stw	zero,-20(fp)
 800a6e4:	00002a06 	br	800a790 <emit_sos+0x100>
		compptr = cinfo->cur_comp_info[i];
 800a6e8:	e0ffff17 	ldw	r3,-4(fp)
 800a6ec:	e0bffb17 	ldw	r2,-20(fp)
 800a6f0:	10801104 	addi	r2,r2,68
 800a6f4:	1085883a 	add	r2,r2,r2
 800a6f8:	1085883a 	add	r2,r2,r2
 800a6fc:	1885883a 	add	r2,r3,r2
 800a700:	10800017 	ldw	r2,0(r2)
 800a704:	e0bffc15 	stw	r2,-16(fp)
		emit_byte(cinfo, compptr->component_id);
 800a708:	e0bffc17 	ldw	r2,-16(fp)
 800a70c:	10800017 	ldw	r2,0(r2)
 800a710:	e13fff17 	ldw	r4,-4(fp)
 800a714:	100b883a 	mov	r5,r2
 800a718:	8009cfc0 	call	8009cfc <emit_byte>
		/* We emit 0 for unused field(s); this is recommended by the P&M text
		* but does not seem to be specified in the standard.
		*/

		/* DC needs no table for refinement scan */
		td = cinfo->Ss == 0 && cinfo->Ah == 0 ? compptr->dc_tbl_no : 0;
 800a71c:	e0bfff17 	ldw	r2,-4(fp)
 800a720:	10805517 	ldw	r2,340(r2)
 800a724:	1000061e 	bne	r2,zero,800a740 <emit_sos+0xb0>
 800a728:	e0bfff17 	ldw	r2,-4(fp)
 800a72c:	10805717 	ldw	r2,348(r2)
 800a730:	1000031e 	bne	r2,zero,800a740 <emit_sos+0xb0>
 800a734:	e0bffc17 	ldw	r2,-16(fp)
 800a738:	10800517 	ldw	r2,20(r2)
 800a73c:	00000106 	br	800a744 <emit_sos+0xb4>
 800a740:	0005883a 	mov	r2,zero
 800a744:	e0bffd15 	stw	r2,-12(fp)
		/* AC needs no table when not present */
		ta = cinfo->Se ? compptr->ac_tbl_no : 0;
 800a748:	e0bfff17 	ldw	r2,-4(fp)
 800a74c:	10805617 	ldw	r2,344(r2)
 800a750:	10000326 	beq	r2,zero,800a760 <emit_sos+0xd0>
 800a754:	e0bffc17 	ldw	r2,-16(fp)
 800a758:	10800617 	ldw	r2,24(r2)
 800a75c:	00000106 	br	800a764 <emit_sos+0xd4>
 800a760:	0005883a 	mov	r2,zero
 800a764:	e0bffe15 	stw	r2,-8(fp)

		emit_byte(cinfo, (td << 4) + ta);
 800a768:	e0bffd17 	ldw	r2,-12(fp)
 800a76c:	1006913a 	slli	r3,r2,4
 800a770:	e0bffe17 	ldw	r2,-8(fp)
 800a774:	1885883a 	add	r2,r3,r2
 800a778:	e13fff17 	ldw	r4,-4(fp)
 800a77c:	100b883a 	mov	r5,r2
 800a780:	8009cfc0 	call	8009cfc <emit_byte>

	emit_2bytes(cinfo, 2 * cinfo->comps_in_scan + 2 + 1 + 3); /* length */

	emit_byte(cinfo, cinfo->comps_in_scan);

	for (i = 0; i < cinfo->comps_in_scan; i++) {
 800a784:	e0bffb17 	ldw	r2,-20(fp)
 800a788:	10800044 	addi	r2,r2,1
 800a78c:	e0bffb15 	stw	r2,-20(fp)
 800a790:	e0bfff17 	ldw	r2,-4(fp)
 800a794:	10804317 	ldw	r2,268(r2)
 800a798:	e0fffb17 	ldw	r3,-20(fp)
 800a79c:	18bfd216 	blt	r3,r2,800a6e8 <emit_sos+0x58>
		ta = cinfo->Se ? compptr->ac_tbl_no : 0;

		emit_byte(cinfo, (td << 4) + ta);
	}

	emit_byte(cinfo, cinfo->Ss);
 800a7a0:	e0bfff17 	ldw	r2,-4(fp)
 800a7a4:	10805517 	ldw	r2,340(r2)
 800a7a8:	e13fff17 	ldw	r4,-4(fp)
 800a7ac:	100b883a 	mov	r5,r2
 800a7b0:	8009cfc0 	call	8009cfc <emit_byte>
	emit_byte(cinfo, cinfo->Se);
 800a7b4:	e0bfff17 	ldw	r2,-4(fp)
 800a7b8:	10805617 	ldw	r2,344(r2)
 800a7bc:	e13fff17 	ldw	r4,-4(fp)
 800a7c0:	100b883a 	mov	r5,r2
 800a7c4:	8009cfc0 	call	8009cfc <emit_byte>
	emit_byte(cinfo, (cinfo->Ah << 4) + cinfo->Al);
 800a7c8:	e0bfff17 	ldw	r2,-4(fp)
 800a7cc:	10805717 	ldw	r2,348(r2)
 800a7d0:	1006913a 	slli	r3,r2,4
 800a7d4:	e0bfff17 	ldw	r2,-4(fp)
 800a7d8:	10805817 	ldw	r2,352(r2)
 800a7dc:	1885883a 	add	r2,r3,r2
 800a7e0:	e13fff17 	ldw	r4,-4(fp)
 800a7e4:	100b883a 	mov	r5,r2
 800a7e8:	8009cfc0 	call	8009cfc <emit_byte>
}
 800a7ec:	e037883a 	mov	sp,fp
 800a7f0:	dfc00117 	ldw	ra,4(sp)
 800a7f4:	df000017 	ldw	fp,0(sp)
 800a7f8:	dec00204 	addi	sp,sp,8
 800a7fc:	f800283a 	ret

0800a800 <emit_pseudo_sos>:


LOCAL(void)
	emit_pseudo_sos (j_compress_ptr cinfo)
	/* Emit a pseudo SOS marker */
{
 800a800:	defffd04 	addi	sp,sp,-12
 800a804:	dfc00215 	stw	ra,8(sp)
 800a808:	df000115 	stw	fp,4(sp)
 800a80c:	df000104 	addi	fp,sp,4
 800a810:	e13fff15 	stw	r4,-4(fp)
	emit_marker(cinfo, M_SOS);
 800a814:	e13fff17 	ldw	r4,-4(fp)
 800a818:	01403684 	movi	r5,218
 800a81c:	8009dac0 	call	8009dac <emit_marker>

	emit_2bytes(cinfo, 2 + 1 + 3); /* length */
 800a820:	e13fff17 	ldw	r4,-4(fp)
 800a824:	01400184 	movi	r5,6
 800a828:	8009df40 	call	8009df4 <emit_2bytes>

	emit_byte(cinfo, 0); /* Ns */
 800a82c:	e13fff17 	ldw	r4,-4(fp)
 800a830:	000b883a 	mov	r5,zero
 800a834:	8009cfc0 	call	8009cfc <emit_byte>

	emit_byte(cinfo, 0); /* Ss */
 800a838:	e13fff17 	ldw	r4,-4(fp)
 800a83c:	000b883a 	mov	r5,zero
 800a840:	8009cfc0 	call	8009cfc <emit_byte>
	emit_byte(cinfo, cinfo->block_size * cinfo->block_size - 1); /* Se */
 800a844:	e0bfff17 	ldw	r2,-4(fp)
 800a848:	10c05917 	ldw	r3,356(r2)
 800a84c:	e0bfff17 	ldw	r2,-4(fp)
 800a850:	10805917 	ldw	r2,356(r2)
 800a854:	1809883a 	mov	r4,r3
 800a858:	100b883a 	mov	r5,r2
 800a85c:	802c2180 	call	802c218 <__mulsi3>
 800a860:	10bfffc4 	addi	r2,r2,-1
 800a864:	e13fff17 	ldw	r4,-4(fp)
 800a868:	100b883a 	mov	r5,r2
 800a86c:	8009cfc0 	call	8009cfc <emit_byte>
	emit_byte(cinfo, 0); /* Ah/Al */
 800a870:	e13fff17 	ldw	r4,-4(fp)
 800a874:	000b883a 	mov	r5,zero
 800a878:	8009cfc0 	call	8009cfc <emit_byte>
}
 800a87c:	e037883a 	mov	sp,fp
 800a880:	dfc00117 	ldw	ra,4(sp)
 800a884:	df000017 	ldw	fp,0(sp)
 800a888:	dec00204 	addi	sp,sp,8
 800a88c:	f800283a 	ret

0800a890 <emit_jfif_app0>:


LOCAL(void)
	emit_jfif_app0 (j_compress_ptr cinfo)
	/* Emit a JFIF-compliant APP0 marker */
{
 800a890:	defffd04 	addi	sp,sp,-12
 800a894:	dfc00215 	stw	ra,8(sp)
 800a898:	df000115 	stw	fp,4(sp)
 800a89c:	df000104 	addi	fp,sp,4
 800a8a0:	e13fff15 	stw	r4,-4(fp)
	* Ydpu			(2 bytes - dots per unit vertical)
	* Thumbnail X size		(1 byte)
	* Thumbnail Y size		(1 byte)
	*/

	emit_marker(cinfo, M_APP0);
 800a8a4:	e13fff17 	ldw	r4,-4(fp)
 800a8a8:	01403804 	movi	r5,224
 800a8ac:	8009dac0 	call	8009dac <emit_marker>

	emit_2bytes(cinfo, 2 + 4 + 1 + 2 + 1 + 2 + 2 + 1 + 1); /* length */
 800a8b0:	e13fff17 	ldw	r4,-4(fp)
 800a8b4:	01400404 	movi	r5,16
 800a8b8:	8009df40 	call	8009df4 <emit_2bytes>

	emit_byte(cinfo, 0x4A);	/* Identifier: ASCII "JFIF" */
 800a8bc:	e13fff17 	ldw	r4,-4(fp)
 800a8c0:	01401284 	movi	r5,74
 800a8c4:	8009cfc0 	call	8009cfc <emit_byte>
	emit_byte(cinfo, 0x46);
 800a8c8:	e13fff17 	ldw	r4,-4(fp)
 800a8cc:	01401184 	movi	r5,70
 800a8d0:	8009cfc0 	call	8009cfc <emit_byte>
	emit_byte(cinfo, 0x49);
 800a8d4:	e13fff17 	ldw	r4,-4(fp)
 800a8d8:	01401244 	movi	r5,73
 800a8dc:	8009cfc0 	call	8009cfc <emit_byte>
	emit_byte(cinfo, 0x46);
 800a8e0:	e13fff17 	ldw	r4,-4(fp)
 800a8e4:	01401184 	movi	r5,70
 800a8e8:	8009cfc0 	call	8009cfc <emit_byte>
	emit_byte(cinfo, 0);
 800a8ec:	e13fff17 	ldw	r4,-4(fp)
 800a8f0:	000b883a 	mov	r5,zero
 800a8f4:	8009cfc0 	call	8009cfc <emit_byte>
	emit_byte(cinfo, cinfo->JFIF_major_version); /* Version fields */
 800a8f8:	e0bfff17 	ldw	r2,-4(fp)
 800a8fc:	10803943 	ldbu	r2,229(r2)
 800a900:	10803fcc 	andi	r2,r2,255
 800a904:	e13fff17 	ldw	r4,-4(fp)
 800a908:	100b883a 	mov	r5,r2
 800a90c:	8009cfc0 	call	8009cfc <emit_byte>
	emit_byte(cinfo, cinfo->JFIF_minor_version);
 800a910:	e0bfff17 	ldw	r2,-4(fp)
 800a914:	10803983 	ldbu	r2,230(r2)
 800a918:	10803fcc 	andi	r2,r2,255
 800a91c:	e13fff17 	ldw	r4,-4(fp)
 800a920:	100b883a 	mov	r5,r2
 800a924:	8009cfc0 	call	8009cfc <emit_byte>
	emit_byte(cinfo, cinfo->density_unit); /* Pixel size information */
 800a928:	e0bfff17 	ldw	r2,-4(fp)
 800a92c:	108039c3 	ldbu	r2,231(r2)
 800a930:	10803fcc 	andi	r2,r2,255
 800a934:	e13fff17 	ldw	r4,-4(fp)
 800a938:	100b883a 	mov	r5,r2
 800a93c:	8009cfc0 	call	8009cfc <emit_byte>
	emit_2bytes(cinfo, (int) cinfo->X_density);
 800a940:	e0bfff17 	ldw	r2,-4(fp)
 800a944:	10803a0b 	ldhu	r2,232(r2)
 800a948:	10bfffcc 	andi	r2,r2,65535
 800a94c:	e13fff17 	ldw	r4,-4(fp)
 800a950:	100b883a 	mov	r5,r2
 800a954:	8009df40 	call	8009df4 <emit_2bytes>
	emit_2bytes(cinfo, (int) cinfo->Y_density);
 800a958:	e0bfff17 	ldw	r2,-4(fp)
 800a95c:	10803a8b 	ldhu	r2,234(r2)
 800a960:	10bfffcc 	andi	r2,r2,65535
 800a964:	e13fff17 	ldw	r4,-4(fp)
 800a968:	100b883a 	mov	r5,r2
 800a96c:	8009df40 	call	8009df4 <emit_2bytes>
	emit_byte(cinfo, 0);		/* No thumbnail image */
 800a970:	e13fff17 	ldw	r4,-4(fp)
 800a974:	000b883a 	mov	r5,zero
 800a978:	8009cfc0 	call	8009cfc <emit_byte>
	emit_byte(cinfo, 0);
 800a97c:	e13fff17 	ldw	r4,-4(fp)
 800a980:	000b883a 	mov	r5,zero
 800a984:	8009cfc0 	call	8009cfc <emit_byte>
}
 800a988:	e037883a 	mov	sp,fp
 800a98c:	dfc00117 	ldw	ra,4(sp)
 800a990:	df000017 	ldw	fp,0(sp)
 800a994:	dec00204 	addi	sp,sp,8
 800a998:	f800283a 	ret

0800a99c <emit_adobe_app14>:


LOCAL(void)
	emit_adobe_app14 (j_compress_ptr cinfo)
	/* Emit an Adobe APP14 marker */
{
 800a99c:	defffd04 	addi	sp,sp,-12
 800a9a0:	dfc00215 	stw	ra,8(sp)
 800a9a4:	df000115 	stw	fp,4(sp)
 800a9a8:	df000104 	addi	fp,sp,4
 800a9ac:	e13fff15 	stw	r4,-4(fp)
	* We write the color transform byte as 1 if the JPEG color space is
	* YCbCr, 2 if it's YCCK, 0 otherwise.  Adobe's definition has to do with
	* whether the encoder performed a transformation, which is pretty useless.
	*/

	emit_marker(cinfo, M_APP14);
 800a9b0:	e13fff17 	ldw	r4,-4(fp)
 800a9b4:	01403b84 	movi	r5,238
 800a9b8:	8009dac0 	call	8009dac <emit_marker>

	emit_2bytes(cinfo, 2 + 5 + 2 + 2 + 2 + 1); /* length */
 800a9bc:	e13fff17 	ldw	r4,-4(fp)
 800a9c0:	01400384 	movi	r5,14
 800a9c4:	8009df40 	call	8009df4 <emit_2bytes>

	emit_byte(cinfo, 0x41);	/* Identifier: ASCII "Adobe" */
 800a9c8:	e13fff17 	ldw	r4,-4(fp)
 800a9cc:	01401044 	movi	r5,65
 800a9d0:	8009cfc0 	call	8009cfc <emit_byte>
	emit_byte(cinfo, 0x64);
 800a9d4:	e13fff17 	ldw	r4,-4(fp)
 800a9d8:	01401904 	movi	r5,100
 800a9dc:	8009cfc0 	call	8009cfc <emit_byte>
	emit_byte(cinfo, 0x6F);
 800a9e0:	e13fff17 	ldw	r4,-4(fp)
 800a9e4:	01401bc4 	movi	r5,111
 800a9e8:	8009cfc0 	call	8009cfc <emit_byte>
	emit_byte(cinfo, 0x62);
 800a9ec:	e13fff17 	ldw	r4,-4(fp)
 800a9f0:	01401884 	movi	r5,98
 800a9f4:	8009cfc0 	call	8009cfc <emit_byte>
	emit_byte(cinfo, 0x65);
 800a9f8:	e13fff17 	ldw	r4,-4(fp)
 800a9fc:	01401944 	movi	r5,101
 800aa00:	8009cfc0 	call	8009cfc <emit_byte>
	emit_2bytes(cinfo, 100);	/* Version */
 800aa04:	e13fff17 	ldw	r4,-4(fp)
 800aa08:	01401904 	movi	r5,100
 800aa0c:	8009df40 	call	8009df4 <emit_2bytes>
	emit_2bytes(cinfo, 0);	/* Flags0 */
 800aa10:	e13fff17 	ldw	r4,-4(fp)
 800aa14:	000b883a 	mov	r5,zero
 800aa18:	8009df40 	call	8009df4 <emit_2bytes>
	emit_2bytes(cinfo, 0);	/* Flags1 */
 800aa1c:	e13fff17 	ldw	r4,-4(fp)
 800aa20:	000b883a 	mov	r5,zero
 800aa24:	8009df40 	call	8009df4 <emit_2bytes>
	switch (cinfo->jpeg_color_space) {
 800aa28:	e0bfff17 	ldw	r2,-4(fp)
 800aa2c:	10801317 	ldw	r2,76(r2)
 800aa30:	10c000e0 	cmpeqi	r3,r2,3
 800aa34:	1800031e 	bne	r3,zero,800aa44 <emit_adobe_app14+0xa8>
 800aa38:	10800160 	cmpeqi	r2,r2,5
 800aa3c:	1000051e 	bne	r2,zero,800aa54 <emit_adobe_app14+0xb8>
 800aa40:	00000806 	br	800aa64 <emit_adobe_app14+0xc8>
	case JCS_YCbCr:
		emit_byte(cinfo, 1);	/* Color transform = 1 */
 800aa44:	e13fff17 	ldw	r4,-4(fp)
 800aa48:	01400044 	movi	r5,1
 800aa4c:	8009cfc0 	call	8009cfc <emit_byte>
		break;
 800aa50:	00000806 	br	800aa74 <emit_adobe_app14+0xd8>
	case JCS_YCCK:
		emit_byte(cinfo, 2);	/* Color transform = 2 */
 800aa54:	e13fff17 	ldw	r4,-4(fp)
 800aa58:	01400084 	movi	r5,2
 800aa5c:	8009cfc0 	call	8009cfc <emit_byte>
		break;
 800aa60:	00000406 	br	800aa74 <emit_adobe_app14+0xd8>
	default:
		emit_byte(cinfo, 0);	/* Color transform = 0 */
 800aa64:	e13fff17 	ldw	r4,-4(fp)
 800aa68:	000b883a 	mov	r5,zero
 800aa6c:	8009cfc0 	call	8009cfc <emit_byte>
		break;
 800aa70:	0001883a 	nop
	}
}
 800aa74:	e037883a 	mov	sp,fp
 800aa78:	dfc00117 	ldw	ra,4(sp)
 800aa7c:	df000017 	ldw	fp,0(sp)
 800aa80:	dec00204 	addi	sp,sp,8
 800aa84:	f800283a 	ret

0800aa88 <write_marker_header>:
*/

METHODDEF(void)
	write_marker_header (j_compress_ptr cinfo, int marker, unsigned int datalen)
	/* Emit an arbitrary marker header */
{
 800aa88:	defffb04 	addi	sp,sp,-20
 800aa8c:	dfc00415 	stw	ra,16(sp)
 800aa90:	df000315 	stw	fp,12(sp)
 800aa94:	df000304 	addi	fp,sp,12
 800aa98:	e13ffd15 	stw	r4,-12(fp)
 800aa9c:	e17ffe15 	stw	r5,-8(fp)
 800aaa0:	e1bfff15 	stw	r6,-4(fp)
	if (datalen > (unsigned int) 65533)		/* safety check */
 800aaa4:	e0bfff17 	ldw	r2,-4(fp)
 800aaa8:	10bfffb0 	cmpltui	r2,r2,65534
 800aaac:	1000091e 	bne	r2,zero,800aad4 <write_marker_header+0x4c>
		ERREXIT(cinfo, JERR_BAD_LENGTH);
 800aab0:	e0bffd17 	ldw	r2,-12(fp)
 800aab4:	10800017 	ldw	r2,0(r2)
 800aab8:	00c00304 	movi	r3,12
 800aabc:	10c00515 	stw	r3,20(r2)
 800aac0:	e0bffd17 	ldw	r2,-12(fp)
 800aac4:	10800017 	ldw	r2,0(r2)
 800aac8:	10800017 	ldw	r2,0(r2)
 800aacc:	e13ffd17 	ldw	r4,-12(fp)
 800aad0:	103ee83a 	callr	r2

	emit_marker(cinfo, (JPEG_MARKER) marker);
 800aad4:	e0bffe17 	ldw	r2,-8(fp)
 800aad8:	e13ffd17 	ldw	r4,-12(fp)
 800aadc:	100b883a 	mov	r5,r2
 800aae0:	8009dac0 	call	8009dac <emit_marker>

	emit_2bytes(cinfo, (int) (datalen + 2));	/* total length */
 800aae4:	e0bfff17 	ldw	r2,-4(fp)
 800aae8:	10800084 	addi	r2,r2,2
 800aaec:	e13ffd17 	ldw	r4,-12(fp)
 800aaf0:	100b883a 	mov	r5,r2
 800aaf4:	8009df40 	call	8009df4 <emit_2bytes>
}
 800aaf8:	e037883a 	mov	sp,fp
 800aafc:	dfc00117 	ldw	ra,4(sp)
 800ab00:	df000017 	ldw	fp,0(sp)
 800ab04:	dec00204 	addi	sp,sp,8
 800ab08:	f800283a 	ret

0800ab0c <write_marker_byte>:

METHODDEF(void)
	write_marker_byte (j_compress_ptr cinfo, int val)
	/* Emit one byte of marker parameters following write_marker_header */
{
 800ab0c:	defffc04 	addi	sp,sp,-16
 800ab10:	dfc00315 	stw	ra,12(sp)
 800ab14:	df000215 	stw	fp,8(sp)
 800ab18:	df000204 	addi	fp,sp,8
 800ab1c:	e13ffe15 	stw	r4,-8(fp)
 800ab20:	e17fff15 	stw	r5,-4(fp)
	emit_byte(cinfo, val);
 800ab24:	e13ffe17 	ldw	r4,-8(fp)
 800ab28:	e17fff17 	ldw	r5,-4(fp)
 800ab2c:	8009cfc0 	call	8009cfc <emit_byte>
}
 800ab30:	e037883a 	mov	sp,fp
 800ab34:	dfc00117 	ldw	ra,4(sp)
 800ab38:	df000017 	ldw	fp,0(sp)
 800ab3c:	dec00204 	addi	sp,sp,8
 800ab40:	f800283a 	ret

0800ab44 <write_file_header>:
* jpeg_start_compress returns.
*/

METHODDEF(void)
	write_file_header (j_compress_ptr cinfo)
{
 800ab44:	defffc04 	addi	sp,sp,-16
 800ab48:	dfc00315 	stw	ra,12(sp)
 800ab4c:	df000215 	stw	fp,8(sp)
 800ab50:	df000204 	addi	fp,sp,8
 800ab54:	e13fff15 	stw	r4,-4(fp)
	my_marker_ptr marker = (my_marker_ptr) cinfo->marker;
 800ab58:	e0bfff17 	ldw	r2,-4(fp)
 800ab5c:	10806017 	ldw	r2,384(r2)
 800ab60:	e0bffe15 	stw	r2,-8(fp)

	emit_marker(cinfo, M_SOI);	/* first the SOI */
 800ab64:	e13fff17 	ldw	r4,-4(fp)
 800ab68:	01403604 	movi	r5,216
 800ab6c:	8009dac0 	call	8009dac <emit_marker>

	/* SOI is defined to reset restart interval to 0 */
	marker->last_restart_interval = 0;
 800ab70:	e0bffe17 	ldw	r2,-8(fp)
 800ab74:	10000715 	stw	zero,28(r2)

	if (cinfo->write_JFIF_header)	/* next an optional JFIF APP0 */
 800ab78:	e0bfff17 	ldw	r2,-4(fp)
 800ab7c:	10803903 	ldbu	r2,228(r2)
 800ab80:	10803fcc 	andi	r2,r2,255
 800ab84:	10000226 	beq	r2,zero,800ab90 <write_file_header+0x4c>
		emit_jfif_app0(cinfo);
 800ab88:	e13fff17 	ldw	r4,-4(fp)
 800ab8c:	800a8900 	call	800a890 <emit_jfif_app0>
	if (cinfo->write_Adobe_marker) /* next an optional Adobe APP14 */
 800ab90:	e0bfff17 	ldw	r2,-4(fp)
 800ab94:	10803b03 	ldbu	r2,236(r2)
 800ab98:	10803fcc 	andi	r2,r2,255
 800ab9c:	10000226 	beq	r2,zero,800aba8 <write_file_header+0x64>
		emit_adobe_app14(cinfo);
 800aba0:	e13fff17 	ldw	r4,-4(fp)
 800aba4:	800a99c0 	call	800a99c <emit_adobe_app14>
}
 800aba8:	e037883a 	mov	sp,fp
 800abac:	dfc00117 	ldw	ra,4(sp)
 800abb0:	df000017 	ldw	fp,0(sp)
 800abb4:	dec00204 	addi	sp,sp,8
 800abb8:	f800283a 	ret

0800abbc <write_frame_header>:
* try to error-check the quant table numbers as soon as they see the SOF.
*/

METHODDEF(void)
	write_frame_header (j_compress_ptr cinfo)
{
 800abbc:	defff904 	addi	sp,sp,-28
 800abc0:	dfc00615 	stw	ra,24(sp)
 800abc4:	df000515 	stw	fp,20(sp)
 800abc8:	df000504 	addi	fp,sp,20
 800abcc:	e13fff15 	stw	r4,-4(fp)
	jpeg_component_info *compptr;

	/* Emit DQT for each quantization table.
	* Note that emit_dqt() suppresses any duplicate tables.
	*/
	prec = 0;
 800abd0:	e03ffc15 	stw	zero,-16(fp)
	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800abd4:	e03ffb15 	stw	zero,-20(fp)
 800abd8:	e0bfff17 	ldw	r2,-4(fp)
 800abdc:	10801417 	ldw	r2,80(r2)
 800abe0:	e0bffe15 	stw	r2,-8(fp)
 800abe4:	00000e06 	br	800ac20 <write_frame_header+0x64>
		ci++, compptr++) {
			prec += emit_dqt(cinfo, compptr->quant_tbl_no);
 800abe8:	e0bffe17 	ldw	r2,-8(fp)
 800abec:	10800417 	ldw	r2,16(r2)
 800abf0:	e13fff17 	ldw	r4,-4(fp)
 800abf4:	100b883a 	mov	r5,r2
 800abf8:	8009e4c0 	call	8009e4c <emit_dqt>
 800abfc:	e0fffc17 	ldw	r3,-16(fp)
 800ac00:	1885883a 	add	r2,r3,r2
 800ac04:	e0bffc15 	stw	r2,-16(fp)
	/* Emit DQT for each quantization table.
	* Note that emit_dqt() suppresses any duplicate tables.
	*/
	prec = 0;
	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
		ci++, compptr++) {
 800ac08:	e0bffb17 	ldw	r2,-20(fp)
 800ac0c:	10800044 	addi	r2,r2,1
 800ac10:	e0bffb15 	stw	r2,-20(fp)
 800ac14:	e0bffe17 	ldw	r2,-8(fp)
 800ac18:	10801604 	addi	r2,r2,88
 800ac1c:	e0bffe15 	stw	r2,-8(fp)

	/* Emit DQT for each quantization table.
	* Note that emit_dqt() suppresses any duplicate tables.
	*/
	prec = 0;
	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ac20:	e0bfff17 	ldw	r2,-4(fp)
 800ac24:	10801217 	ldw	r2,72(r2)
 800ac28:	e0fffb17 	ldw	r3,-20(fp)
 800ac2c:	18bfee16 	blt	r3,r2,800abe8 <write_frame_header+0x2c>
	/* now prec is nonzero iff there are any 16-bit quant tables. */

	/* Check for a non-baseline specification.
	* Note we assume that Huffman table numbers won't be changed later.
	*/
	if (cinfo->arith_code || cinfo->progressive_mode ||
 800ac30:	e0bfff17 	ldw	r2,-4(fp)
 800ac34:	10803343 	ldbu	r2,205(r2)
 800ac38:	10803fcc 	andi	r2,r2,255
 800ac3c:	10000c1e 	bne	r2,zero,800ac70 <write_frame_header+0xb4>
 800ac40:	e0bfff17 	ldw	r2,-4(fp)
 800ac44:	10803d03 	ldbu	r2,244(r2)
 800ac48:	10803fcc 	andi	r2,r2,255
 800ac4c:	1000081e 	bne	r2,zero,800ac70 <write_frame_header+0xb4>
		cinfo->data_precision != 8 || cinfo->block_size != DCTSIZE) {
 800ac50:	e0bfff17 	ldw	r2,-4(fp)
 800ac54:	10801117 	ldw	r2,68(r2)
	/* now prec is nonzero iff there are any 16-bit quant tables. */

	/* Check for a non-baseline specification.
	* Note we assume that Huffman table numbers won't be changed later.
	*/
	if (cinfo->arith_code || cinfo->progressive_mode ||
 800ac58:	10800218 	cmpnei	r2,r2,8
 800ac5c:	1000041e 	bne	r2,zero,800ac70 <write_frame_header+0xb4>
		cinfo->data_precision != 8 || cinfo->block_size != DCTSIZE) {
 800ac60:	e0bfff17 	ldw	r2,-4(fp)
 800ac64:	10805917 	ldw	r2,356(r2)
 800ac68:	10800220 	cmpeqi	r2,r2,8
 800ac6c:	1000021e 	bne	r2,zero,800ac78 <write_frame_header+0xbc>
			is_baseline = FALSE;
 800ac70:	e03ffd05 	stb	zero,-12(fp)
 800ac74:	00002906 	br	800ad1c <write_frame_header+0x160>
	} else {
		is_baseline = TRUE;
 800ac78:	00800044 	movi	r2,1
 800ac7c:	e0bffd05 	stb	r2,-12(fp)
		for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ac80:	e03ffb15 	stw	zero,-20(fp)
 800ac84:	e0bfff17 	ldw	r2,-4(fp)
 800ac88:	10801417 	ldw	r2,80(r2)
 800ac8c:	e0bffe15 	stw	r2,-8(fp)
 800ac90:	00000f06 	br	800acd0 <write_frame_header+0x114>
			ci++, compptr++) {
				if (compptr->dc_tbl_no > 1 || compptr->ac_tbl_no > 1)
 800ac94:	e0bffe17 	ldw	r2,-8(fp)
 800ac98:	10800517 	ldw	r2,20(r2)
 800ac9c:	10800088 	cmpgei	r2,r2,2
 800aca0:	1000041e 	bne	r2,zero,800acb4 <write_frame_header+0xf8>
 800aca4:	e0bffe17 	ldw	r2,-8(fp)
 800aca8:	10800617 	ldw	r2,24(r2)
 800acac:	10800090 	cmplti	r2,r2,2
 800acb0:	1000011e 	bne	r2,zero,800acb8 <write_frame_header+0xfc>
					is_baseline = FALSE;
 800acb4:	e03ffd05 	stb	zero,-12(fp)
		cinfo->data_precision != 8 || cinfo->block_size != DCTSIZE) {
			is_baseline = FALSE;
	} else {
		is_baseline = TRUE;
		for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
			ci++, compptr++) {
 800acb8:	e0bffb17 	ldw	r2,-20(fp)
 800acbc:	10800044 	addi	r2,r2,1
 800acc0:	e0bffb15 	stw	r2,-20(fp)
 800acc4:	e0bffe17 	ldw	r2,-8(fp)
 800acc8:	10801604 	addi	r2,r2,88
 800accc:	e0bffe15 	stw	r2,-8(fp)
	if (cinfo->arith_code || cinfo->progressive_mode ||
		cinfo->data_precision != 8 || cinfo->block_size != DCTSIZE) {
			is_baseline = FALSE;
	} else {
		is_baseline = TRUE;
		for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800acd0:	e0bfff17 	ldw	r2,-4(fp)
 800acd4:	10801217 	ldw	r2,72(r2)
 800acd8:	e0fffb17 	ldw	r3,-20(fp)
 800acdc:	18bfed16 	blt	r3,r2,800ac94 <write_frame_header+0xd8>
			ci++, compptr++) {
				if (compptr->dc_tbl_no > 1 || compptr->ac_tbl_no > 1)
					is_baseline = FALSE;
		}
		if (prec && is_baseline) {
 800ace0:	e0bffc17 	ldw	r2,-16(fp)
 800ace4:	10000d26 	beq	r2,zero,800ad1c <write_frame_header+0x160>
 800ace8:	e0bffd03 	ldbu	r2,-12(fp)
 800acec:	10000b26 	beq	r2,zero,800ad1c <write_frame_header+0x160>
			is_baseline = FALSE;
 800acf0:	e03ffd05 	stb	zero,-12(fp)
			/* If it's baseline except for quantizer size, warn the user */
			TRACEMS(cinfo, 0, JTRC_16BIT_TABLES);
 800acf4:	e0bfff17 	ldw	r2,-4(fp)
 800acf8:	10800017 	ldw	r2,0(r2)
 800acfc:	00c01344 	movi	r3,77
 800ad00:	10c00515 	stw	r3,20(r2)
 800ad04:	e0bfff17 	ldw	r2,-4(fp)
 800ad08:	10800017 	ldw	r2,0(r2)
 800ad0c:	10800117 	ldw	r2,4(r2)
 800ad10:	e13fff17 	ldw	r4,-4(fp)
 800ad14:	000b883a 	mov	r5,zero
 800ad18:	103ee83a 	callr	r2
		}
	}

	/* Emit the proper SOF marker */
	if (cinfo->arith_code) {
 800ad1c:	e0bfff17 	ldw	r2,-4(fp)
 800ad20:	10803343 	ldbu	r2,205(r2)
 800ad24:	10803fcc 	andi	r2,r2,255
 800ad28:	10000c26 	beq	r2,zero,800ad5c <write_frame_header+0x1a0>
		if (cinfo->progressive_mode)
 800ad2c:	e0bfff17 	ldw	r2,-4(fp)
 800ad30:	10803d03 	ldbu	r2,244(r2)
 800ad34:	10803fcc 	andi	r2,r2,255
 800ad38:	10000426 	beq	r2,zero,800ad4c <write_frame_header+0x190>
			emit_sof(cinfo, M_SOF10); /* SOF code for progressive arithmetic */
 800ad3c:	e13fff17 	ldw	r4,-4(fp)
 800ad40:	01403284 	movi	r5,202
 800ad44:	800a5080 	call	800a508 <emit_sof>
 800ad48:	00001506 	br	800ada0 <write_frame_header+0x1e4>
		else
			emit_sof(cinfo, M_SOF9);  /* SOF code for sequential arithmetic */
 800ad4c:	e13fff17 	ldw	r4,-4(fp)
 800ad50:	01403244 	movi	r5,201
 800ad54:	800a5080 	call	800a508 <emit_sof>
 800ad58:	00001106 	br	800ada0 <write_frame_header+0x1e4>
	} else {
		if (cinfo->progressive_mode)
 800ad5c:	e0bfff17 	ldw	r2,-4(fp)
 800ad60:	10803d03 	ldbu	r2,244(r2)
 800ad64:	10803fcc 	andi	r2,r2,255
 800ad68:	10000426 	beq	r2,zero,800ad7c <write_frame_header+0x1c0>
			emit_sof(cinfo, M_SOF2);	/* SOF code for progressive Huffman */
 800ad6c:	e13fff17 	ldw	r4,-4(fp)
 800ad70:	01403084 	movi	r5,194
 800ad74:	800a5080 	call	800a508 <emit_sof>
 800ad78:	00000906 	br	800ada0 <write_frame_header+0x1e4>
		else if (is_baseline)
 800ad7c:	e0bffd03 	ldbu	r2,-12(fp)
 800ad80:	10000426 	beq	r2,zero,800ad94 <write_frame_header+0x1d8>
			emit_sof(cinfo, M_SOF0);	/* SOF code for baseline implementation */
 800ad84:	e13fff17 	ldw	r4,-4(fp)
 800ad88:	01403004 	movi	r5,192
 800ad8c:	800a5080 	call	800a508 <emit_sof>
 800ad90:	00000306 	br	800ada0 <write_frame_header+0x1e4>
		else
			emit_sof(cinfo, M_SOF1);	/* SOF code for non-baseline Huffman file */
 800ad94:	e13fff17 	ldw	r4,-4(fp)
 800ad98:	01403044 	movi	r5,193
 800ad9c:	800a5080 	call	800a508 <emit_sof>
	}

	/* Check to emit pseudo SOS marker */
	if (cinfo->progressive_mode && cinfo->block_size != DCTSIZE)
 800ada0:	e0bfff17 	ldw	r2,-4(fp)
 800ada4:	10803d03 	ldbu	r2,244(r2)
 800ada8:	10803fcc 	andi	r2,r2,255
 800adac:	10000626 	beq	r2,zero,800adc8 <write_frame_header+0x20c>
 800adb0:	e0bfff17 	ldw	r2,-4(fp)
 800adb4:	10805917 	ldw	r2,356(r2)
 800adb8:	10800220 	cmpeqi	r2,r2,8
 800adbc:	1000021e 	bne	r2,zero,800adc8 <write_frame_header+0x20c>
		emit_pseudo_sos(cinfo);
 800adc0:	e13fff17 	ldw	r4,-4(fp)
 800adc4:	800a8000 	call	800a800 <emit_pseudo_sos>
}
 800adc8:	e037883a 	mov	sp,fp
 800adcc:	dfc00117 	ldw	ra,4(sp)
 800add0:	df000017 	ldw	fp,0(sp)
 800add4:	dec00204 	addi	sp,sp,8
 800add8:	f800283a 	ret

0800addc <write_scan_header>:
* Compressed data will be written following the SOS.
*/

METHODDEF(void)
	write_scan_header (j_compress_ptr cinfo)
{
 800addc:	defffa04 	addi	sp,sp,-24
 800ade0:	dfc00515 	stw	ra,20(sp)
 800ade4:	df000415 	stw	fp,16(sp)
 800ade8:	df000404 	addi	fp,sp,16
 800adec:	e13fff15 	stw	r4,-4(fp)
	my_marker_ptr marker = (my_marker_ptr) cinfo->marker;
 800adf0:	e0bfff17 	ldw	r2,-4(fp)
 800adf4:	10806017 	ldw	r2,384(r2)
 800adf8:	e0bffd15 	stw	r2,-12(fp)
	int i;
	jpeg_component_info *compptr;

	if (cinfo->arith_code) {
 800adfc:	e0bfff17 	ldw	r2,-4(fp)
 800ae00:	10803343 	ldbu	r2,205(r2)
 800ae04:	10803fcc 	andi	r2,r2,255
 800ae08:	10000326 	beq	r2,zero,800ae18 <write_scan_header+0x3c>
		/* Emit arith conditioning info.  We may have some duplication
		* if the file has multiple scans, but it's so small it's hardly
		* worth worrying about.
		*/
		emit_dac(cinfo);
 800ae0c:	e13fff17 	ldw	r4,-4(fp)
 800ae10:	800a2240 	call	800a224 <emit_dac>
 800ae14:	00002606 	br	800aeb0 <write_scan_header+0xd4>
	} else {
		/* Emit Huffman tables.
		* Note that emit_dht() suppresses any duplicate tables.
		*/
		for (i = 0; i < cinfo->comps_in_scan; i++) {
 800ae18:	e03ffc15 	stw	zero,-16(fp)
 800ae1c:	00002006 	br	800aea0 <write_scan_header+0xc4>
			compptr = cinfo->cur_comp_info[i];
 800ae20:	e0ffff17 	ldw	r3,-4(fp)
 800ae24:	e0bffc17 	ldw	r2,-16(fp)
 800ae28:	10801104 	addi	r2,r2,68
 800ae2c:	1085883a 	add	r2,r2,r2
 800ae30:	1085883a 	add	r2,r2,r2
 800ae34:	1885883a 	add	r2,r3,r2
 800ae38:	10800017 	ldw	r2,0(r2)
 800ae3c:	e0bffe15 	stw	r2,-8(fp)
			/* DC needs no table for refinement scan */
			if (cinfo->Ss == 0 && cinfo->Ah == 0)
 800ae40:	e0bfff17 	ldw	r2,-4(fp)
 800ae44:	10805517 	ldw	r2,340(r2)
 800ae48:	1000091e 	bne	r2,zero,800ae70 <write_scan_header+0x94>
 800ae4c:	e0bfff17 	ldw	r2,-4(fp)
 800ae50:	10805717 	ldw	r2,348(r2)
 800ae54:	1000061e 	bne	r2,zero,800ae70 <write_scan_header+0x94>
				emit_dht(cinfo, compptr->dc_tbl_no, FALSE);
 800ae58:	e0bffe17 	ldw	r2,-8(fp)
 800ae5c:	10800517 	ldw	r2,20(r2)
 800ae60:	e13fff17 	ldw	r4,-4(fp)
 800ae64:	100b883a 	mov	r5,r2
 800ae68:	000d883a 	mov	r6,zero
 800ae6c:	800a0440 	call	800a044 <emit_dht>
			/* AC needs no table when not present */
			if (cinfo->Se)
 800ae70:	e0bfff17 	ldw	r2,-4(fp)
 800ae74:	10805617 	ldw	r2,344(r2)
 800ae78:	10000626 	beq	r2,zero,800ae94 <write_scan_header+0xb8>
				emit_dht(cinfo, compptr->ac_tbl_no, TRUE);
 800ae7c:	e0bffe17 	ldw	r2,-8(fp)
 800ae80:	10800617 	ldw	r2,24(r2)
 800ae84:	e13fff17 	ldw	r4,-4(fp)
 800ae88:	100b883a 	mov	r5,r2
 800ae8c:	01800044 	movi	r6,1
 800ae90:	800a0440 	call	800a044 <emit_dht>
		emit_dac(cinfo);
	} else {
		/* Emit Huffman tables.
		* Note that emit_dht() suppresses any duplicate tables.
		*/
		for (i = 0; i < cinfo->comps_in_scan; i++) {
 800ae94:	e0bffc17 	ldw	r2,-16(fp)
 800ae98:	10800044 	addi	r2,r2,1
 800ae9c:	e0bffc15 	stw	r2,-16(fp)
 800aea0:	e0bfff17 	ldw	r2,-4(fp)
 800aea4:	10804317 	ldw	r2,268(r2)
 800aea8:	e0fffc17 	ldw	r3,-16(fp)
 800aeac:	18bfdc16 	blt	r3,r2,800ae20 <write_scan_header+0x44>
	}

	/* Emit DRI if required --- note that DRI value could change for each scan.
	* We avoid wasting space with unnecessary DRIs, however.
	*/
	if (cinfo->restart_interval != marker->last_restart_interval) {
 800aeb0:	e0bfff17 	ldw	r2,-4(fp)
 800aeb4:	10c03717 	ldw	r3,220(r2)
 800aeb8:	e0bffd17 	ldw	r2,-12(fp)
 800aebc:	10800717 	ldw	r2,28(r2)
 800aec0:	18800626 	beq	r3,r2,800aedc <write_scan_header+0x100>
		emit_dri(cinfo);
 800aec4:	e13fff17 	ldw	r4,-4(fp)
 800aec8:	800a4b40 	call	800a4b4 <emit_dri>
		marker->last_restart_interval = cinfo->restart_interval;
 800aecc:	e0bfff17 	ldw	r2,-4(fp)
 800aed0:	10c03717 	ldw	r3,220(r2)
 800aed4:	e0bffd17 	ldw	r2,-12(fp)
 800aed8:	10c00715 	stw	r3,28(r2)
	}

	emit_sos(cinfo);
 800aedc:	e13fff17 	ldw	r4,-4(fp)
 800aee0:	800a6900 	call	800a690 <emit_sos>
}
 800aee4:	e037883a 	mov	sp,fp
 800aee8:	dfc00117 	ldw	ra,4(sp)
 800aeec:	df000017 	ldw	fp,0(sp)
 800aef0:	dec00204 	addi	sp,sp,8
 800aef4:	f800283a 	ret

0800aef8 <write_file_trailer>:
* Write datastream trailer.
*/

METHODDEF(void)
	write_file_trailer (j_compress_ptr cinfo)
{
 800aef8:	defffd04 	addi	sp,sp,-12
 800aefc:	dfc00215 	stw	ra,8(sp)
 800af00:	df000115 	stw	fp,4(sp)
 800af04:	df000104 	addi	fp,sp,4
 800af08:	e13fff15 	stw	r4,-4(fp)
	emit_marker(cinfo, M_EOI);
 800af0c:	e13fff17 	ldw	r4,-4(fp)
 800af10:	01403644 	movi	r5,217
 800af14:	8009dac0 	call	8009dac <emit_marker>
}
 800af18:	e037883a 	mov	sp,fp
 800af1c:	dfc00117 	ldw	ra,4(sp)
 800af20:	df000017 	ldw	fp,0(sp)
 800af24:	dec00204 	addi	sp,sp,8
 800af28:	f800283a 	ret

0800af2c <write_tables_only>:
* emitted.  Note that all tables will be marked sent_table = TRUE at exit.
*/

METHODDEF(void)
	write_tables_only (j_compress_ptr cinfo)
{
 800af2c:	defffc04 	addi	sp,sp,-16
 800af30:	dfc00315 	stw	ra,12(sp)
 800af34:	df000215 	stw	fp,8(sp)
 800af38:	df000204 	addi	fp,sp,8
 800af3c:	e13fff15 	stw	r4,-4(fp)
	int i;

	emit_marker(cinfo, M_SOI);
 800af40:	e13fff17 	ldw	r4,-4(fp)
 800af44:	01403604 	movi	r5,216
 800af48:	8009dac0 	call	8009dac <emit_marker>

	for (i = 0; i < NUM_QUANT_TBLS; i++) {
 800af4c:	e03ffe15 	stw	zero,-8(fp)
 800af50:	00000e06 	br	800af8c <write_tables_only+0x60>
		if (cinfo->quant_tbl_ptrs[i] != NULL)
 800af54:	e0ffff17 	ldw	r3,-4(fp)
 800af58:	e0bffe17 	ldw	r2,-8(fp)
 800af5c:	10800544 	addi	r2,r2,21
 800af60:	1085883a 	add	r2,r2,r2
 800af64:	1085883a 	add	r2,r2,r2
 800af68:	1885883a 	add	r2,r3,r2
 800af6c:	10800017 	ldw	r2,0(r2)
 800af70:	10000326 	beq	r2,zero,800af80 <write_tables_only+0x54>
			(void) emit_dqt(cinfo, i);
 800af74:	e13fff17 	ldw	r4,-4(fp)
 800af78:	e17ffe17 	ldw	r5,-8(fp)
 800af7c:	8009e4c0 	call	8009e4c <emit_dqt>
{
	int i;

	emit_marker(cinfo, M_SOI);

	for (i = 0; i < NUM_QUANT_TBLS; i++) {
 800af80:	e0bffe17 	ldw	r2,-8(fp)
 800af84:	10800044 	addi	r2,r2,1
 800af88:	e0bffe15 	stw	r2,-8(fp)
 800af8c:	e0bffe17 	ldw	r2,-8(fp)
 800af90:	10800110 	cmplti	r2,r2,4
 800af94:	103fef1e 	bne	r2,zero,800af54 <write_tables_only+0x28>
		if (cinfo->quant_tbl_ptrs[i] != NULL)
			(void) emit_dqt(cinfo, i);
	}

	if (! cinfo->arith_code) {
 800af98:	e0bfff17 	ldw	r2,-4(fp)
 800af9c:	10803343 	ldbu	r2,205(r2)
 800afa0:	10803fcc 	andi	r2,r2,255
 800afa4:	1000201e 	bne	r2,zero,800b028 <write_tables_only+0xfc>
		for (i = 0; i < NUM_HUFF_TBLS; i++) {
 800afa8:	e03ffe15 	stw	zero,-8(fp)
 800afac:	00001b06 	br	800b01c <write_tables_only+0xf0>
			if (cinfo->dc_huff_tbl_ptrs[i] != NULL)
 800afb0:	e0ffff17 	ldw	r3,-4(fp)
 800afb4:	e0bffe17 	ldw	r2,-8(fp)
 800afb8:	10800744 	addi	r2,r2,29
 800afbc:	1085883a 	add	r2,r2,r2
 800afc0:	1085883a 	add	r2,r2,r2
 800afc4:	1885883a 	add	r2,r3,r2
 800afc8:	10800017 	ldw	r2,0(r2)
 800afcc:	10000426 	beq	r2,zero,800afe0 <write_tables_only+0xb4>
				emit_dht(cinfo, i, FALSE);
 800afd0:	e13fff17 	ldw	r4,-4(fp)
 800afd4:	e17ffe17 	ldw	r5,-8(fp)
 800afd8:	000d883a 	mov	r6,zero
 800afdc:	800a0440 	call	800a044 <emit_dht>
			if (cinfo->ac_huff_tbl_ptrs[i] != NULL)
 800afe0:	e0ffff17 	ldw	r3,-4(fp)
 800afe4:	e0bffe17 	ldw	r2,-8(fp)
 800afe8:	10800844 	addi	r2,r2,33
 800afec:	1085883a 	add	r2,r2,r2
 800aff0:	1085883a 	add	r2,r2,r2
 800aff4:	1885883a 	add	r2,r3,r2
 800aff8:	10800017 	ldw	r2,0(r2)
 800affc:	10000426 	beq	r2,zero,800b010 <write_tables_only+0xe4>
				emit_dht(cinfo, i, TRUE);
 800b000:	e13fff17 	ldw	r4,-4(fp)
 800b004:	e17ffe17 	ldw	r5,-8(fp)
 800b008:	01800044 	movi	r6,1
 800b00c:	800a0440 	call	800a044 <emit_dht>
		if (cinfo->quant_tbl_ptrs[i] != NULL)
			(void) emit_dqt(cinfo, i);
	}

	if (! cinfo->arith_code) {
		for (i = 0; i < NUM_HUFF_TBLS; i++) {
 800b010:	e0bffe17 	ldw	r2,-8(fp)
 800b014:	10800044 	addi	r2,r2,1
 800b018:	e0bffe15 	stw	r2,-8(fp)
 800b01c:	e0bffe17 	ldw	r2,-8(fp)
 800b020:	10800110 	cmplti	r2,r2,4
 800b024:	103fe21e 	bne	r2,zero,800afb0 <write_tables_only+0x84>
			if (cinfo->ac_huff_tbl_ptrs[i] != NULL)
				emit_dht(cinfo, i, TRUE);
		}
	}

	emit_marker(cinfo, M_EOI);
 800b028:	e13fff17 	ldw	r4,-4(fp)
 800b02c:	01403644 	movi	r5,217
 800b030:	8009dac0 	call	8009dac <emit_marker>
}
 800b034:	e037883a 	mov	sp,fp
 800b038:	dfc00117 	ldw	ra,4(sp)
 800b03c:	df000017 	ldw	fp,0(sp)
 800b040:	dec00204 	addi	sp,sp,8
 800b044:	f800283a 	ret

0800b048 <jinit_marker_writer>:
* Initialize the marker writer module.
*/

GLOBAL(void)
	jinit_marker_writer (j_compress_ptr cinfo)
{
 800b048:	defffc04 	addi	sp,sp,-16
 800b04c:	dfc00315 	stw	ra,12(sp)
 800b050:	df000215 	stw	fp,8(sp)
 800b054:	df000204 	addi	fp,sp,8
 800b058:	e13fff15 	stw	r4,-4(fp)
	my_marker_ptr marker;

	/* Create the subobject */
	marker = (my_marker_ptr)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b05c:	e0bfff17 	ldw	r2,-4(fp)
 800b060:	10800117 	ldw	r2,4(r2)
 800b064:	10800017 	ldw	r2,0(r2)
	jinit_marker_writer (j_compress_ptr cinfo)
{
	my_marker_ptr marker;

	/* Create the subobject */
	marker = (my_marker_ptr)
 800b068:	e13fff17 	ldw	r4,-4(fp)
 800b06c:	01400044 	movi	r5,1
 800b070:	01800804 	movi	r6,32
 800b074:	103ee83a 	callr	r2
 800b078:	e0bffe15 	stw	r2,-8(fp)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
		SIZEOF(my_marker_writer));
	cinfo->marker = (struct jpeg_marker_writer *) marker;
 800b07c:	e0bfff17 	ldw	r2,-4(fp)
 800b080:	e0fffe17 	ldw	r3,-8(fp)
 800b084:	10c06015 	stw	r3,384(r2)
	/* Initialize method pointers */
	marker->pub.write_file_header = write_file_header;
 800b088:	e0bffe17 	ldw	r2,-8(fp)
 800b08c:	00c20074 	movhi	r3,2049
 800b090:	18ead104 	addi	r3,r3,-21692
 800b094:	10c00015 	stw	r3,0(r2)
	marker->pub.write_frame_header = write_frame_header;
 800b098:	e0bffe17 	ldw	r2,-8(fp)
 800b09c:	00c20074 	movhi	r3,2049
 800b0a0:	18eaef04 	addi	r3,r3,-21572
 800b0a4:	10c00115 	stw	r3,4(r2)
	marker->pub.write_scan_header = write_scan_header;
 800b0a8:	e0bffe17 	ldw	r2,-8(fp)
 800b0ac:	00c20074 	movhi	r3,2049
 800b0b0:	18eb7704 	addi	r3,r3,-21028
 800b0b4:	10c00215 	stw	r3,8(r2)
	marker->pub.write_file_trailer = write_file_trailer;
 800b0b8:	e0bffe17 	ldw	r2,-8(fp)
 800b0bc:	00c20074 	movhi	r3,2049
 800b0c0:	18ebbe04 	addi	r3,r3,-20744
 800b0c4:	10c00315 	stw	r3,12(r2)
	marker->pub.write_tables_only = write_tables_only;
 800b0c8:	e0bffe17 	ldw	r2,-8(fp)
 800b0cc:	00c20074 	movhi	r3,2049
 800b0d0:	18ebcb04 	addi	r3,r3,-20692
 800b0d4:	10c00415 	stw	r3,16(r2)
	marker->pub.write_marker_header = write_marker_header;
 800b0d8:	e0bffe17 	ldw	r2,-8(fp)
 800b0dc:	00c20074 	movhi	r3,2049
 800b0e0:	18eaa204 	addi	r3,r3,-21880
 800b0e4:	10c00515 	stw	r3,20(r2)
	marker->pub.write_marker_byte = write_marker_byte;
 800b0e8:	e0bffe17 	ldw	r2,-8(fp)
 800b0ec:	00c20074 	movhi	r3,2049
 800b0f0:	18eac304 	addi	r3,r3,-21748
 800b0f4:	10c00615 	stw	r3,24(r2)
	/* Initialize private state */
	marker->last_restart_interval = 0;
 800b0f8:	e0bffe17 	ldw	r2,-8(fp)
 800b0fc:	10000715 	stw	zero,28(r2)
}
 800b100:	e037883a 	mov	sp,fp
 800b104:	dfc00117 	ldw	ra,4(sp)
 800b108:	df000017 	ldw	fp,0(sp)
 800b10c:	dec00204 	addi	sp,sp,8
 800b110:	f800283a 	ret

0800b114 <jpeg_calc_jpeg_dimensions>:
*/

GLOBAL(void)
	jpeg_calc_jpeg_dimensions (j_compress_ptr cinfo)
	/* Do computations that are needed before master selection phase */
{
 800b114:	defffe04 	addi	sp,sp,-8
 800b118:	df000115 	stw	fp,4(sp)
 800b11c:	df000104 	addi	fp,sp,4
 800b120:	e13fff15 	stw	r4,-4(fp)
	}

#else /* !DCT_SCALING_SUPPORTED */

	/* Hardwire it to "no scaling" */
	cinfo->jpeg_width = cinfo->image_width;
 800b124:	e0bfff17 	ldw	r2,-4(fp)
 800b128:	10c00717 	ldw	r3,28(r2)
 800b12c:	e0bfff17 	ldw	r2,-4(fp)
 800b130:	10c00f15 	stw	r3,60(r2)
	cinfo->jpeg_height = cinfo->image_height;
 800b134:	e0bfff17 	ldw	r2,-4(fp)
 800b138:	10c00817 	ldw	r3,32(r2)
 800b13c:	e0bfff17 	ldw	r2,-4(fp)
 800b140:	10c01015 	stw	r3,64(r2)
	cinfo->min_DCT_h_scaled_size = DCTSIZE;
 800b144:	e0bfff17 	ldw	r2,-4(fp)
 800b148:	00c00204 	movi	r3,8
 800b14c:	10c04015 	stw	r3,256(r2)
	cinfo->min_DCT_v_scaled_size = DCTSIZE;
 800b150:	e0bfff17 	ldw	r2,-4(fp)
 800b154:	00c00204 	movi	r3,8
 800b158:	10c04115 	stw	r3,260(r2)

#endif /* DCT_SCALING_SUPPORTED */
}
 800b15c:	e037883a 	mov	sp,fp
 800b160:	df000017 	ldw	fp,0(sp)
 800b164:	dec00104 	addi	sp,sp,4
 800b168:	f800283a 	ret

0800b16c <jpeg_calc_trans_dimensions>:


LOCAL(void)
	jpeg_calc_trans_dimensions (j_compress_ptr cinfo)
{
 800b16c:	defffd04 	addi	sp,sp,-12
 800b170:	dfc00215 	stw	ra,8(sp)
 800b174:	df000115 	stw	fp,4(sp)
 800b178:	df000104 	addi	fp,sp,4
 800b17c:	e13fff15 	stw	r4,-4(fp)
	if (cinfo->min_DCT_h_scaled_size != cinfo->min_DCT_v_scaled_size)
 800b180:	e0bfff17 	ldw	r2,-4(fp)
 800b184:	10c04017 	ldw	r3,256(r2)
 800b188:	e0bfff17 	ldw	r2,-4(fp)
 800b18c:	10804117 	ldw	r2,260(r2)
 800b190:	18801326 	beq	r3,r2,800b1e0 <jpeg_calc_trans_dimensions+0x74>
		ERREXIT2(cinfo, JERR_BAD_DCTSIZE,
 800b194:	e0bfff17 	ldw	r2,-4(fp)
 800b198:	10800017 	ldw	r2,0(r2)
 800b19c:	00c001c4 	movi	r3,7
 800b1a0:	10c00515 	stw	r3,20(r2)
 800b1a4:	e0bfff17 	ldw	r2,-4(fp)
 800b1a8:	10800017 	ldw	r2,0(r2)
 800b1ac:	e0ffff17 	ldw	r3,-4(fp)
 800b1b0:	18c04017 	ldw	r3,256(r3)
 800b1b4:	10c00615 	stw	r3,24(r2)
 800b1b8:	e0bfff17 	ldw	r2,-4(fp)
 800b1bc:	10800017 	ldw	r2,0(r2)
 800b1c0:	e0ffff17 	ldw	r3,-4(fp)
 800b1c4:	18c04117 	ldw	r3,260(r3)
 800b1c8:	10c00715 	stw	r3,28(r2)
 800b1cc:	e0bfff17 	ldw	r2,-4(fp)
 800b1d0:	10800017 	ldw	r2,0(r2)
 800b1d4:	10800017 	ldw	r2,0(r2)
 800b1d8:	e13fff17 	ldw	r4,-4(fp)
 800b1dc:	103ee83a 	callr	r2
		cinfo->min_DCT_h_scaled_size, cinfo->min_DCT_v_scaled_size);

	cinfo->block_size = cinfo->min_DCT_h_scaled_size;
 800b1e0:	e0bfff17 	ldw	r2,-4(fp)
 800b1e4:	10c04017 	ldw	r3,256(r2)
 800b1e8:	e0bfff17 	ldw	r2,-4(fp)
 800b1ec:	10c05915 	stw	r3,356(r2)
}
 800b1f0:	e037883a 	mov	sp,fp
 800b1f4:	dfc00117 	ldw	ra,4(sp)
 800b1f8:	df000017 	ldw	fp,0(sp)
 800b1fc:	dec00204 	addi	sp,sp,8
 800b200:	f800283a 	ret

0800b204 <initial_setup>:


LOCAL(void)
	initial_setup (j_compress_ptr cinfo, boolean transcode_only)
	/* Do computations that are needed before master selection phase */
{
 800b204:	defff604 	addi	sp,sp,-40
 800b208:	dfc00915 	stw	ra,36(sp)
 800b20c:	df000815 	stw	fp,32(sp)
 800b210:	dc000715 	stw	r16,28(sp)
 800b214:	df000704 	addi	fp,sp,28
 800b218:	e13ffe15 	stw	r4,-8(fp)
 800b21c:	2805883a 	mov	r2,r5
 800b220:	e0bfff05 	stb	r2,-4(fp)
	int ci, ssize;
	jpeg_component_info *compptr;
	long samplesperrow;
	JDIMENSION jd_samplesperrow;

	if (transcode_only)
 800b224:	e0bfff03 	ldbu	r2,-4(fp)
 800b228:	10000326 	beq	r2,zero,800b238 <initial_setup+0x34>
		jpeg_calc_trans_dimensions(cinfo);
 800b22c:	e13ffe17 	ldw	r4,-8(fp)
 800b230:	800b16c0 	call	800b16c <jpeg_calc_trans_dimensions>
 800b234:	00000206 	br	800b240 <initial_setup+0x3c>
	else
		jpeg_calc_jpeg_dimensions(cinfo);
 800b238:	e13ffe17 	ldw	r4,-8(fp)
 800b23c:	800b1140 	call	800b114 <jpeg_calc_jpeg_dimensions>

	/* Sanity check on block_size */
	if (cinfo->block_size < 1 || cinfo->block_size > 16)
 800b240:	e0bffe17 	ldw	r2,-8(fp)
 800b244:	10805917 	ldw	r2,356(r2)
 800b248:	0080040e 	bge	zero,r2,800b25c <initial_setup+0x58>
 800b24c:	e0bffe17 	ldw	r2,-8(fp)
 800b250:	10805917 	ldw	r2,356(r2)
 800b254:	10800450 	cmplti	r2,r2,17
 800b258:	1000131e 	bne	r2,zero,800b2a8 <initial_setup+0xa4>
		ERREXIT2(cinfo, JERR_BAD_DCTSIZE, cinfo->block_size, cinfo->block_size);
 800b25c:	e0bffe17 	ldw	r2,-8(fp)
 800b260:	10800017 	ldw	r2,0(r2)
 800b264:	00c001c4 	movi	r3,7
 800b268:	10c00515 	stw	r3,20(r2)
 800b26c:	e0bffe17 	ldw	r2,-8(fp)
 800b270:	10800017 	ldw	r2,0(r2)
 800b274:	e0fffe17 	ldw	r3,-8(fp)
 800b278:	18c05917 	ldw	r3,356(r3)
 800b27c:	10c00615 	stw	r3,24(r2)
 800b280:	e0bffe17 	ldw	r2,-8(fp)
 800b284:	10800017 	ldw	r2,0(r2)
 800b288:	e0fffe17 	ldw	r3,-8(fp)
 800b28c:	18c05917 	ldw	r3,356(r3)
 800b290:	10c00715 	stw	r3,28(r2)
 800b294:	e0bffe17 	ldw	r2,-8(fp)
 800b298:	10800017 	ldw	r2,0(r2)
 800b29c:	10800017 	ldw	r2,0(r2)
 800b2a0:	e13ffe17 	ldw	r4,-8(fp)
 800b2a4:	103ee83a 	callr	r2

	/* Derive natural_order from block_size */
	switch (cinfo->block_size) {
 800b2a8:	e0bffe17 	ldw	r2,-8(fp)
 800b2ac:	10805917 	ldw	r2,356(r2)
 800b2b0:	10c00228 	cmpgeui	r3,r2,8
 800b2b4:	18002d1e 	bne	r3,zero,800b36c <initial_setup+0x168>
 800b2b8:	1085883a 	add	r2,r2,r2
 800b2bc:	1087883a 	add	r3,r2,r2
 800b2c0:	00820074 	movhi	r2,2049
 800b2c4:	10acb504 	addi	r2,r2,-19756
 800b2c8:	1885883a 	add	r2,r3,r2
 800b2cc:	10800017 	ldw	r2,0(r2)
 800b2d0:	1000683a 	jmp	r2
 800b2d4:	0800b36c 	andhi	zero,at,717
 800b2d8:	0800b36c 	andhi	zero,at,717
 800b2dc:	0800b2f4 	orhi	zero,at,715
 800b2e0:	0800b308 	cmpgei	zero,at,716
 800b2e4:	0800b31c 	xori	zero,at,716
 800b2e8:	0800b330 	cmpltui	zero,at,716
 800b2ec:	0800b344 	addi	zero,at,717
 800b2f0:	0800b358 	cmpnei	zero,at,717
	case 2: cinfo->natural_order = jpeg_natural_order2; break;
 800b2f4:	e0bffe17 	ldw	r2,-8(fp)
 800b2f8:	00c20134 	movhi	r3,2052
 800b2fc:	18c3ea04 	addi	r3,r3,4008
 800b300:	10c05a15 	stw	r3,360(r2)
 800b304:	00001e06 	br	800b380 <initial_setup+0x17c>
	case 3: cinfo->natural_order = jpeg_natural_order3; break;
 800b308:	e0bffe17 	ldw	r2,-8(fp)
 800b30c:	00c20134 	movhi	r3,2052
 800b310:	18c3d104 	addi	r3,r3,3908
 800b314:	10c05a15 	stw	r3,360(r2)
 800b318:	00001906 	br	800b380 <initial_setup+0x17c>
	case 4: cinfo->natural_order = jpeg_natural_order4; break;
 800b31c:	e0bffe17 	ldw	r2,-8(fp)
 800b320:	00c20134 	movhi	r3,2052
 800b324:	18c3b104 	addi	r3,r3,3780
 800b328:	10c05a15 	stw	r3,360(r2)
 800b32c:	00001406 	br	800b380 <initial_setup+0x17c>
	case 5: cinfo->natural_order = jpeg_natural_order5; break;
 800b330:	e0bffe17 	ldw	r2,-8(fp)
 800b334:	00c20134 	movhi	r3,2052
 800b338:	18c38804 	addi	r3,r3,3616
 800b33c:	10c05a15 	stw	r3,360(r2)
 800b340:	00000f06 	br	800b380 <initial_setup+0x17c>
	case 6: cinfo->natural_order = jpeg_natural_order6; break;
 800b344:	e0bffe17 	ldw	r2,-8(fp)
 800b348:	00c20134 	movhi	r3,2052
 800b34c:	18c35404 	addi	r3,r3,3408
 800b350:	10c05a15 	stw	r3,360(r2)
 800b354:	00000a06 	br	800b380 <initial_setup+0x17c>
	case 7: cinfo->natural_order = jpeg_natural_order7; break;
 800b358:	e0bffe17 	ldw	r2,-8(fp)
 800b35c:	00c20134 	movhi	r3,2052
 800b360:	18c31304 	addi	r3,r3,3148
 800b364:	10c05a15 	stw	r3,360(r2)
 800b368:	00000506 	br	800b380 <initial_setup+0x17c>
	default: cinfo->natural_order = jpeg_natural_order; break;
 800b36c:	e0bffe17 	ldw	r2,-8(fp)
 800b370:	00c20134 	movhi	r3,2052
 800b374:	18c2c304 	addi	r3,r3,2828
 800b378:	10c05a15 	stw	r3,360(r2)
 800b37c:	0001883a 	nop
	}

	/* Derive lim_Se from block_size */
	cinfo->lim_Se = cinfo->block_size < DCTSIZE ?
 800b380:	e0bffe17 	ldw	r2,-8(fp)
 800b384:	10805917 	ldw	r2,356(r2)
		cinfo->block_size * cinfo->block_size - 1 : DCTSIZE2-1;
 800b388:	10800208 	cmpgei	r2,r2,8
 800b38c:	1000091e 	bne	r2,zero,800b3b4 <initial_setup+0x1b0>
 800b390:	e0bffe17 	ldw	r2,-8(fp)
 800b394:	10c05917 	ldw	r3,356(r2)
 800b398:	e0bffe17 	ldw	r2,-8(fp)
 800b39c:	10805917 	ldw	r2,356(r2)
 800b3a0:	1809883a 	mov	r4,r3
 800b3a4:	100b883a 	mov	r5,r2
 800b3a8:	802c2180 	call	802c218 <__mulsi3>
 800b3ac:	10bfffc4 	addi	r2,r2,-1
 800b3b0:	00000106 	br	800b3b8 <initial_setup+0x1b4>
 800b3b4:	00800fc4 	movi	r2,63
	case 7: cinfo->natural_order = jpeg_natural_order7; break;
	default: cinfo->natural_order = jpeg_natural_order; break;
	}

	/* Derive lim_Se from block_size */
	cinfo->lim_Se = cinfo->block_size < DCTSIZE ?
 800b3b8:	e0fffe17 	ldw	r3,-8(fp)
 800b3bc:	18805b15 	stw	r2,364(r3)
		cinfo->block_size * cinfo->block_size - 1 : DCTSIZE2-1;

	/* Sanity check on image dimensions */
	if (cinfo->jpeg_height <= 0 || cinfo->jpeg_width <= 0 ||
 800b3c0:	e0bffe17 	ldw	r2,-8(fp)
 800b3c4:	10801017 	ldw	r2,64(r2)
 800b3c8:	10000926 	beq	r2,zero,800b3f0 <initial_setup+0x1ec>
 800b3cc:	e0bffe17 	ldw	r2,-8(fp)
 800b3d0:	10800f17 	ldw	r2,60(r2)
 800b3d4:	10000626 	beq	r2,zero,800b3f0 <initial_setup+0x1ec>
		cinfo->num_components <= 0 || cinfo->input_components <= 0)
 800b3d8:	e0bffe17 	ldw	r2,-8(fp)
 800b3dc:	10801217 	ldw	r2,72(r2)
	/* Derive lim_Se from block_size */
	cinfo->lim_Se = cinfo->block_size < DCTSIZE ?
		cinfo->block_size * cinfo->block_size - 1 : DCTSIZE2-1;

	/* Sanity check on image dimensions */
	if (cinfo->jpeg_height <= 0 || cinfo->jpeg_width <= 0 ||
 800b3e0:	0080030e 	bge	zero,r2,800b3f0 <initial_setup+0x1ec>
		cinfo->num_components <= 0 || cinfo->input_components <= 0)
 800b3e4:	e0bffe17 	ldw	r2,-8(fp)
 800b3e8:	10800917 	ldw	r2,36(r2)
 800b3ec:	00800916 	blt	zero,r2,800b414 <initial_setup+0x210>
		ERREXIT(cinfo, JERR_EMPTY_IMAGE);
 800b3f0:	e0bffe17 	ldw	r2,-8(fp)
 800b3f4:	10800017 	ldw	r2,0(r2)
 800b3f8:	00c00844 	movi	r3,33
 800b3fc:	10c00515 	stw	r3,20(r2)
 800b400:	e0bffe17 	ldw	r2,-8(fp)
 800b404:	10800017 	ldw	r2,0(r2)
 800b408:	10800017 	ldw	r2,0(r2)
 800b40c:	e13ffe17 	ldw	r4,-8(fp)
 800b410:	103ee83a 	callr	r2

	/* Make sure image isn't bigger than I can handle */
	if ((long) cinfo->jpeg_height > (long) JPEG_MAX_DIMENSION ||
 800b414:	e0bffe17 	ldw	r2,-8(fp)
 800b418:	10801017 	ldw	r2,64(r2)
 800b41c:	00fff714 	movui	r3,65500
 800b420:	18800416 	blt	r3,r2,800b434 <initial_setup+0x230>
		(long) cinfo->jpeg_width > (long) JPEG_MAX_DIMENSION)
 800b424:	e0bffe17 	ldw	r2,-8(fp)
 800b428:	10800f17 	ldw	r2,60(r2)
	if (cinfo->jpeg_height <= 0 || cinfo->jpeg_width <= 0 ||
		cinfo->num_components <= 0 || cinfo->input_components <= 0)
		ERREXIT(cinfo, JERR_EMPTY_IMAGE);

	/* Make sure image isn't bigger than I can handle */
	if ((long) cinfo->jpeg_height > (long) JPEG_MAX_DIMENSION ||
 800b42c:	00fff714 	movui	r3,65500
 800b430:	18800d0e 	bge	r3,r2,800b468 <initial_setup+0x264>
		(long) cinfo->jpeg_width > (long) JPEG_MAX_DIMENSION)
		ERREXIT1(cinfo, JERR_IMAGE_TOO_BIG, (unsigned int) JPEG_MAX_DIMENSION);
 800b434:	e0bffe17 	ldw	r2,-8(fp)
 800b438:	10800017 	ldw	r2,0(r2)
 800b43c:	00c00a84 	movi	r3,42
 800b440:	10c00515 	stw	r3,20(r2)
 800b444:	e0bffe17 	ldw	r2,-8(fp)
 800b448:	10800017 	ldw	r2,0(r2)
 800b44c:	00fff714 	movui	r3,65500
 800b450:	10c00615 	stw	r3,24(r2)
 800b454:	e0bffe17 	ldw	r2,-8(fp)
 800b458:	10800017 	ldw	r2,0(r2)
 800b45c:	10800017 	ldw	r2,0(r2)
 800b460:	e13ffe17 	ldw	r4,-8(fp)
 800b464:	103ee83a 	callr	r2

	/* Width of an input scanline must be representable as JDIMENSION. */
	samplesperrow = (long) cinfo->image_width * (long) cinfo->input_components;
 800b468:	e0bffe17 	ldw	r2,-8(fp)
 800b46c:	10800717 	ldw	r2,28(r2)
 800b470:	1007883a 	mov	r3,r2
 800b474:	e0bffe17 	ldw	r2,-8(fp)
 800b478:	10800917 	ldw	r2,36(r2)
 800b47c:	1809883a 	mov	r4,r3
 800b480:	100b883a 	mov	r5,r2
 800b484:	802c2180 	call	802c218 <__mulsi3>
 800b488:	e0bffb15 	stw	r2,-20(fp)
	jd_samplesperrow = (JDIMENSION) samplesperrow;
 800b48c:	e0bffb17 	ldw	r2,-20(fp)
 800b490:	e0bffc15 	stw	r2,-16(fp)
	if ((long) jd_samplesperrow != samplesperrow)
 800b494:	e0fffc17 	ldw	r3,-16(fp)
 800b498:	e0bffb17 	ldw	r2,-20(fp)
 800b49c:	18800926 	beq	r3,r2,800b4c4 <initial_setup+0x2c0>
		ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 800b4a0:	e0bffe17 	ldw	r2,-8(fp)
 800b4a4:	10800017 	ldw	r2,0(r2)
 800b4a8:	00c01204 	movi	r3,72
 800b4ac:	10c00515 	stw	r3,20(r2)
 800b4b0:	e0bffe17 	ldw	r2,-8(fp)
 800b4b4:	10800017 	ldw	r2,0(r2)
 800b4b8:	10800017 	ldw	r2,0(r2)
 800b4bc:	e13ffe17 	ldw	r4,-8(fp)
 800b4c0:	103ee83a 	callr	r2

	/* For now, precision must match compiled-in value... */
	if (cinfo->data_precision != BITS_IN_JSAMPLE)
 800b4c4:	e0bffe17 	ldw	r2,-8(fp)
 800b4c8:	10801117 	ldw	r2,68(r2)
 800b4cc:	10800220 	cmpeqi	r2,r2,8
 800b4d0:	10000e1e 	bne	r2,zero,800b50c <initial_setup+0x308>
		ERREXIT1(cinfo, JERR_BAD_PRECISION, cinfo->data_precision);
 800b4d4:	e0bffe17 	ldw	r2,-8(fp)
 800b4d8:	10800017 	ldw	r2,0(r2)
 800b4dc:	00c00404 	movi	r3,16
 800b4e0:	10c00515 	stw	r3,20(r2)
 800b4e4:	e0bffe17 	ldw	r2,-8(fp)
 800b4e8:	10800017 	ldw	r2,0(r2)
 800b4ec:	e0fffe17 	ldw	r3,-8(fp)
 800b4f0:	18c01117 	ldw	r3,68(r3)
 800b4f4:	10c00615 	stw	r3,24(r2)
 800b4f8:	e0bffe17 	ldw	r2,-8(fp)
 800b4fc:	10800017 	ldw	r2,0(r2)
 800b500:	10800017 	ldw	r2,0(r2)
 800b504:	e13ffe17 	ldw	r4,-8(fp)
 800b508:	103ee83a 	callr	r2

	/* Check that number of components won't exceed internal array sizes */
	if (cinfo->num_components > MAX_COMPONENTS)
 800b50c:	e0bffe17 	ldw	r2,-8(fp)
 800b510:	10801217 	ldw	r2,72(r2)
 800b514:	108002d0 	cmplti	r2,r2,11
 800b518:	1000121e 	bne	r2,zero,800b564 <initial_setup+0x360>
		ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
 800b51c:	e0bffe17 	ldw	r2,-8(fp)
 800b520:	10800017 	ldw	r2,0(r2)
 800b524:	00c006c4 	movi	r3,27
 800b528:	10c00515 	stw	r3,20(r2)
 800b52c:	e0bffe17 	ldw	r2,-8(fp)
 800b530:	10800017 	ldw	r2,0(r2)
 800b534:	e0fffe17 	ldw	r3,-8(fp)
 800b538:	18c01217 	ldw	r3,72(r3)
 800b53c:	10c00615 	stw	r3,24(r2)
 800b540:	e0bffe17 	ldw	r2,-8(fp)
 800b544:	10800017 	ldw	r2,0(r2)
 800b548:	00c00284 	movi	r3,10
 800b54c:	10c00715 	stw	r3,28(r2)
 800b550:	e0bffe17 	ldw	r2,-8(fp)
 800b554:	10800017 	ldw	r2,0(r2)
 800b558:	10800017 	ldw	r2,0(r2)
 800b55c:	e13ffe17 	ldw	r4,-8(fp)
 800b560:	103ee83a 	callr	r2
		MAX_COMPONENTS);

	/* Compute maximum sampling factors; check factor validity */
	cinfo->max_h_samp_factor = 1;
 800b564:	e0bffe17 	ldw	r2,-8(fp)
 800b568:	00c00044 	movi	r3,1
 800b56c:	10c03e15 	stw	r3,248(r2)
	cinfo->max_v_samp_factor = 1;
 800b570:	e0bffe17 	ldw	r2,-8(fp)
 800b574:	00c00044 	movi	r3,1
 800b578:	10c03f15 	stw	r3,252(r2)
	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b57c:	e03ff915 	stw	zero,-28(fp)
 800b580:	e0bffe17 	ldw	r2,-8(fp)
 800b584:	10801417 	ldw	r2,80(r2)
 800b588:	e0bffa15 	stw	r2,-24(fp)
 800b58c:	00002d06 	br	800b644 <initial_setup+0x440>
		ci++, compptr++) {
			if (compptr->h_samp_factor<=0 || compptr->h_samp_factor>MAX_SAMP_FACTOR ||
 800b590:	e0bffa17 	ldw	r2,-24(fp)
 800b594:	10800217 	ldw	r2,8(r2)
 800b598:	00800b0e 	bge	zero,r2,800b5c8 <initial_setup+0x3c4>
 800b59c:	e0bffa17 	ldw	r2,-24(fp)
 800b5a0:	10800217 	ldw	r2,8(r2)
 800b5a4:	10800148 	cmpgei	r2,r2,5
 800b5a8:	1000071e 	bne	r2,zero,800b5c8 <initial_setup+0x3c4>
				compptr->v_samp_factor<=0 || compptr->v_samp_factor>MAX_SAMP_FACTOR)
 800b5ac:	e0bffa17 	ldw	r2,-24(fp)
 800b5b0:	10800317 	ldw	r2,12(r2)
	/* Compute maximum sampling factors; check factor validity */
	cinfo->max_h_samp_factor = 1;
	cinfo->max_v_samp_factor = 1;
	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
		ci++, compptr++) {
			if (compptr->h_samp_factor<=0 || compptr->h_samp_factor>MAX_SAMP_FACTOR ||
 800b5b4:	0080040e 	bge	zero,r2,800b5c8 <initial_setup+0x3c4>
				compptr->v_samp_factor<=0 || compptr->v_samp_factor>MAX_SAMP_FACTOR)
 800b5b8:	e0bffa17 	ldw	r2,-24(fp)
 800b5bc:	10800317 	ldw	r2,12(r2)
 800b5c0:	10800150 	cmplti	r2,r2,5
 800b5c4:	1000091e 	bne	r2,zero,800b5ec <initial_setup+0x3e8>
				ERREXIT(cinfo, JERR_BAD_SAMPLING);
 800b5c8:	e0bffe17 	ldw	r2,-8(fp)
 800b5cc:	10800017 	ldw	r2,0(r2)
 800b5d0:	00c004c4 	movi	r3,19
 800b5d4:	10c00515 	stw	r3,20(r2)
 800b5d8:	e0bffe17 	ldw	r2,-8(fp)
 800b5dc:	10800017 	ldw	r2,0(r2)
 800b5e0:	10800017 	ldw	r2,0(r2)
 800b5e4:	e13ffe17 	ldw	r4,-8(fp)
 800b5e8:	103ee83a 	callr	r2
			cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
 800b5ec:	e0bffa17 	ldw	r2,-24(fp)
 800b5f0:	10800217 	ldw	r2,8(r2)
 800b5f4:	e0fffe17 	ldw	r3,-8(fp)
 800b5f8:	18c03e17 	ldw	r3,248(r3)
 800b5fc:	10c0010e 	bge	r2,r3,800b604 <initial_setup+0x400>
 800b600:	1805883a 	mov	r2,r3
 800b604:	e0fffe17 	ldw	r3,-8(fp)
 800b608:	18803e15 	stw	r2,248(r3)
				compptr->h_samp_factor);
			cinfo->max_v_samp_factor = MAX(cinfo->max_v_samp_factor,
 800b60c:	e0bffa17 	ldw	r2,-24(fp)
 800b610:	10800317 	ldw	r2,12(r2)
 800b614:	e0fffe17 	ldw	r3,-8(fp)
 800b618:	18c03f17 	ldw	r3,252(r3)
 800b61c:	10c0010e 	bge	r2,r3,800b624 <initial_setup+0x420>
 800b620:	1805883a 	mov	r2,r3
 800b624:	e0fffe17 	ldw	r3,-8(fp)
 800b628:	18803f15 	stw	r2,252(r3)

	/* Compute maximum sampling factors; check factor validity */
	cinfo->max_h_samp_factor = 1;
	cinfo->max_v_samp_factor = 1;
	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
		ci++, compptr++) {
 800b62c:	e0bff917 	ldw	r2,-28(fp)
 800b630:	10800044 	addi	r2,r2,1
 800b634:	e0bff915 	stw	r2,-28(fp)
 800b638:	e0bffa17 	ldw	r2,-24(fp)
 800b63c:	10801604 	addi	r2,r2,88
 800b640:	e0bffa15 	stw	r2,-24(fp)
		MAX_COMPONENTS);

	/* Compute maximum sampling factors; check factor validity */
	cinfo->max_h_samp_factor = 1;
	cinfo->max_v_samp_factor = 1;
	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b644:	e0bffe17 	ldw	r2,-8(fp)
 800b648:	10801217 	ldw	r2,72(r2)
 800b64c:	e0fff917 	ldw	r3,-28(fp)
 800b650:	18bfcf16 	blt	r3,r2,800b590 <initial_setup+0x38c>
			cinfo->max_v_samp_factor = MAX(cinfo->max_v_samp_factor,
				compptr->v_samp_factor);
	}

	/* Compute dimensions of components */
	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b654:	e03ff915 	stw	zero,-28(fp)
 800b658:	e0bffe17 	ldw	r2,-8(fp)
 800b65c:	10801417 	ldw	r2,80(r2)
 800b660:	e0bffa15 	stw	r2,-24(fp)
 800b664:	00009b06 	br	800b8d4 <initial_setup+0x6d0>
		ci++, compptr++) {
			/* Fill in the correct component_index value; don't rely on application */
			compptr->component_index = ci;
 800b668:	e0bffa17 	ldw	r2,-24(fp)
 800b66c:	e0fff917 	ldw	r3,-28(fp)
 800b670:	10c00115 	stw	r3,4(r2)
			/* In selecting the actual DCT scaling for each component, we try to
			* scale down the chroma components via DCT scaling rather than downsampling.
			* This saves time if the downsampler gets to use 1:1 scaling.
			* Note this code adapts subsampling ratios which are powers of 2.
			*/
			ssize = 1;
 800b674:	00800044 	movi	r2,1
 800b678:	e0bffd15 	stw	r2,-12(fp)
				(cinfo->do_fancy_downsampling ? DCTSIZE : DCTSIZE / 2) &&
				(cinfo->max_h_samp_factor % (compptr->h_samp_factor * ssize * 2)) == 0) {
					ssize = ssize * 2;
			}
#endif
			compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size * ssize;
 800b67c:	e0bffe17 	ldw	r2,-8(fp)
 800b680:	10804017 	ldw	r2,256(r2)
 800b684:	1009883a 	mov	r4,r2
 800b688:	e17ffd17 	ldw	r5,-12(fp)
 800b68c:	802c2180 	call	802c218 <__mulsi3>
 800b690:	1007883a 	mov	r3,r2
 800b694:	e0bffa17 	ldw	r2,-24(fp)
 800b698:	10c00915 	stw	r3,36(r2)
			ssize = 1;
 800b69c:	00800044 	movi	r2,1
 800b6a0:	e0bffd15 	stw	r2,-12(fp)
				(cinfo->do_fancy_downsampling ? DCTSIZE : DCTSIZE / 2) &&
				(cinfo->max_v_samp_factor % (compptr->v_samp_factor * ssize * 2)) == 0) {
					ssize = ssize * 2;
			}
#endif
			compptr->DCT_v_scaled_size = cinfo->min_DCT_v_scaled_size * ssize;
 800b6a4:	e0bffe17 	ldw	r2,-8(fp)
 800b6a8:	10804117 	ldw	r2,260(r2)
 800b6ac:	1009883a 	mov	r4,r2
 800b6b0:	e17ffd17 	ldw	r5,-12(fp)
 800b6b4:	802c2180 	call	802c218 <__mulsi3>
 800b6b8:	1007883a 	mov	r3,r2
 800b6bc:	e0bffa17 	ldw	r2,-24(fp)
 800b6c0:	10c00a15 	stw	r3,40(r2)

			/* We don't support DCT ratios larger than 2. */
			if (compptr->DCT_h_scaled_size > compptr->DCT_v_scaled_size * 2)
 800b6c4:	e0bffa17 	ldw	r2,-24(fp)
 800b6c8:	10c00917 	ldw	r3,36(r2)
 800b6cc:	e0bffa17 	ldw	r2,-24(fp)
 800b6d0:	10800a17 	ldw	r2,40(r2)
 800b6d4:	1085883a 	add	r2,r2,r2
 800b6d8:	10c0070e 	bge	r2,r3,800b6f8 <initial_setup+0x4f4>
				compptr->DCT_h_scaled_size = compptr->DCT_v_scaled_size * 2;
 800b6dc:	e0bffa17 	ldw	r2,-24(fp)
 800b6e0:	10800a17 	ldw	r2,40(r2)
 800b6e4:	1085883a 	add	r2,r2,r2
 800b6e8:	1007883a 	mov	r3,r2
 800b6ec:	e0bffa17 	ldw	r2,-24(fp)
 800b6f0:	10c00915 	stw	r3,36(r2)
 800b6f4:	00000c06 	br	800b728 <initial_setup+0x524>
			else if (compptr->DCT_v_scaled_size > compptr->DCT_h_scaled_size * 2)
 800b6f8:	e0bffa17 	ldw	r2,-24(fp)
 800b6fc:	10c00a17 	ldw	r3,40(r2)
 800b700:	e0bffa17 	ldw	r2,-24(fp)
 800b704:	10800917 	ldw	r2,36(r2)
 800b708:	1085883a 	add	r2,r2,r2
 800b70c:	10c0060e 	bge	r2,r3,800b728 <initial_setup+0x524>
				compptr->DCT_v_scaled_size = compptr->DCT_h_scaled_size * 2;
 800b710:	e0bffa17 	ldw	r2,-24(fp)
 800b714:	10800917 	ldw	r2,36(r2)
 800b718:	1085883a 	add	r2,r2,r2
 800b71c:	1007883a 	mov	r3,r2
 800b720:	e0bffa17 	ldw	r2,-24(fp)
 800b724:	10c00a15 	stw	r3,40(r2)

			/* Size in DCT blocks */
			compptr->width_in_blocks = (JDIMENSION)
				jdiv_round_up((long) cinfo->jpeg_width * (long) compptr->h_samp_factor,
 800b728:	e0bffe17 	ldw	r2,-8(fp)
 800b72c:	10800f17 	ldw	r2,60(r2)
 800b730:	1007883a 	mov	r3,r2
 800b734:	e0bffa17 	ldw	r2,-24(fp)
 800b738:	10800217 	ldw	r2,8(r2)
 800b73c:	1809883a 	mov	r4,r3
 800b740:	100b883a 	mov	r5,r2
 800b744:	802c2180 	call	802c218 <__mulsi3>
 800b748:	1021883a 	mov	r16,r2
				(long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800b74c:	e0bffe17 	ldw	r2,-8(fp)
 800b750:	10c03e17 	ldw	r3,248(r2)
 800b754:	e0bffe17 	ldw	r2,-8(fp)
 800b758:	10805917 	ldw	r2,356(r2)
 800b75c:	1809883a 	mov	r4,r3
 800b760:	100b883a 	mov	r5,r2
 800b764:	802c2180 	call	802c218 <__mulsi3>
			else if (compptr->DCT_v_scaled_size > compptr->DCT_h_scaled_size * 2)
				compptr->DCT_v_scaled_size = compptr->DCT_h_scaled_size * 2;

			/* Size in DCT blocks */
			compptr->width_in_blocks = (JDIMENSION)
				jdiv_round_up((long) cinfo->jpeg_width * (long) compptr->h_samp_factor,
 800b768:	8009883a 	mov	r4,r16
 800b76c:	100b883a 	mov	r5,r2
 800b770:	802b0840 	call	802b084 <jdiv_round_up>
				compptr->DCT_h_scaled_size = compptr->DCT_v_scaled_size * 2;
			else if (compptr->DCT_v_scaled_size > compptr->DCT_h_scaled_size * 2)
				compptr->DCT_v_scaled_size = compptr->DCT_h_scaled_size * 2;

			/* Size in DCT blocks */
			compptr->width_in_blocks = (JDIMENSION)
 800b774:	1007883a 	mov	r3,r2
 800b778:	e0bffa17 	ldw	r2,-24(fp)
 800b77c:	10c00715 	stw	r3,28(r2)
				jdiv_round_up((long) cinfo->jpeg_width * (long) compptr->h_samp_factor,
				(long) (cinfo->max_h_samp_factor * cinfo->block_size));
			compptr->height_in_blocks = (JDIMENSION)
				jdiv_round_up((long) cinfo->jpeg_height * (long) compptr->v_samp_factor,
 800b780:	e0bffe17 	ldw	r2,-8(fp)
 800b784:	10801017 	ldw	r2,64(r2)
 800b788:	1007883a 	mov	r3,r2
 800b78c:	e0bffa17 	ldw	r2,-24(fp)
 800b790:	10800317 	ldw	r2,12(r2)
 800b794:	1809883a 	mov	r4,r3
 800b798:	100b883a 	mov	r5,r2
 800b79c:	802c2180 	call	802c218 <__mulsi3>
 800b7a0:	1021883a 	mov	r16,r2
				(long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800b7a4:	e0bffe17 	ldw	r2,-8(fp)
 800b7a8:	10c03f17 	ldw	r3,252(r2)
 800b7ac:	e0bffe17 	ldw	r2,-8(fp)
 800b7b0:	10805917 	ldw	r2,356(r2)
 800b7b4:	1809883a 	mov	r4,r3
 800b7b8:	100b883a 	mov	r5,r2
 800b7bc:	802c2180 	call	802c218 <__mulsi3>
			/* Size in DCT blocks */
			compptr->width_in_blocks = (JDIMENSION)
				jdiv_round_up((long) cinfo->jpeg_width * (long) compptr->h_samp_factor,
				(long) (cinfo->max_h_samp_factor * cinfo->block_size));
			compptr->height_in_blocks = (JDIMENSION)
				jdiv_round_up((long) cinfo->jpeg_height * (long) compptr->v_samp_factor,
 800b7c0:	8009883a 	mov	r4,r16
 800b7c4:	100b883a 	mov	r5,r2
 800b7c8:	802b0840 	call	802b084 <jdiv_round_up>

			/* Size in DCT blocks */
			compptr->width_in_blocks = (JDIMENSION)
				jdiv_round_up((long) cinfo->jpeg_width * (long) compptr->h_samp_factor,
				(long) (cinfo->max_h_samp_factor * cinfo->block_size));
			compptr->height_in_blocks = (JDIMENSION)
 800b7cc:	1007883a 	mov	r3,r2
 800b7d0:	e0bffa17 	ldw	r2,-24(fp)
 800b7d4:	10c00815 	stw	r3,32(r2)
				jdiv_round_up((long) cinfo->jpeg_height * (long) compptr->v_samp_factor,
				(long) (cinfo->max_v_samp_factor * cinfo->block_size));
			/* Size in samples */
			compptr->downsampled_width = (JDIMENSION)
				jdiv_round_up((long) cinfo->jpeg_width *
 800b7d8:	e0bffe17 	ldw	r2,-8(fp)
 800b7dc:	10800f17 	ldw	r2,60(r2)
 800b7e0:	1021883a 	mov	r16,r2
				(long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
 800b7e4:	e0bffa17 	ldw	r2,-24(fp)
 800b7e8:	10c00217 	ldw	r3,8(r2)
 800b7ec:	e0bffa17 	ldw	r2,-24(fp)
 800b7f0:	10800917 	ldw	r2,36(r2)
 800b7f4:	1809883a 	mov	r4,r3
 800b7f8:	100b883a 	mov	r5,r2
 800b7fc:	802c2180 	call	802c218 <__mulsi3>
			compptr->height_in_blocks = (JDIMENSION)
				jdiv_round_up((long) cinfo->jpeg_height * (long) compptr->v_samp_factor,
				(long) (cinfo->max_v_samp_factor * cinfo->block_size));
			/* Size in samples */
			compptr->downsampled_width = (JDIMENSION)
				jdiv_round_up((long) cinfo->jpeg_width *
 800b800:	8009883a 	mov	r4,r16
 800b804:	100b883a 	mov	r5,r2
 800b808:	802c2180 	call	802c218 <__mulsi3>
 800b80c:	1021883a 	mov	r16,r2
				(long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
				(long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800b810:	e0bffe17 	ldw	r2,-8(fp)
 800b814:	10c03e17 	ldw	r3,248(r2)
 800b818:	e0bffe17 	ldw	r2,-8(fp)
 800b81c:	10805917 	ldw	r2,356(r2)
 800b820:	1809883a 	mov	r4,r3
 800b824:	100b883a 	mov	r5,r2
 800b828:	802c2180 	call	802c218 <__mulsi3>
			compptr->height_in_blocks = (JDIMENSION)
				jdiv_round_up((long) cinfo->jpeg_height * (long) compptr->v_samp_factor,
				(long) (cinfo->max_v_samp_factor * cinfo->block_size));
			/* Size in samples */
			compptr->downsampled_width = (JDIMENSION)
				jdiv_round_up((long) cinfo->jpeg_width *
 800b82c:	8009883a 	mov	r4,r16
 800b830:	100b883a 	mov	r5,r2
 800b834:	802b0840 	call	802b084 <jdiv_round_up>
				(long) (cinfo->max_h_samp_factor * cinfo->block_size));
			compptr->height_in_blocks = (JDIMENSION)
				jdiv_round_up((long) cinfo->jpeg_height * (long) compptr->v_samp_factor,
				(long) (cinfo->max_v_samp_factor * cinfo->block_size));
			/* Size in samples */
			compptr->downsampled_width = (JDIMENSION)
 800b838:	1007883a 	mov	r3,r2
 800b83c:	e0bffa17 	ldw	r2,-24(fp)
 800b840:	10c00b15 	stw	r3,44(r2)
				jdiv_round_up((long) cinfo->jpeg_width *
				(long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
				(long) (cinfo->max_h_samp_factor * cinfo->block_size));
			compptr->downsampled_height = (JDIMENSION)
				jdiv_round_up((long) cinfo->jpeg_height *
 800b844:	e0bffe17 	ldw	r2,-8(fp)
 800b848:	10801017 	ldw	r2,64(r2)
 800b84c:	1021883a 	mov	r16,r2
				(long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
 800b850:	e0bffa17 	ldw	r2,-24(fp)
 800b854:	10c00317 	ldw	r3,12(r2)
 800b858:	e0bffa17 	ldw	r2,-24(fp)
 800b85c:	10800a17 	ldw	r2,40(r2)
 800b860:	1809883a 	mov	r4,r3
 800b864:	100b883a 	mov	r5,r2
 800b868:	802c2180 	call	802c218 <__mulsi3>
			compptr->downsampled_width = (JDIMENSION)
				jdiv_round_up((long) cinfo->jpeg_width *
				(long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
				(long) (cinfo->max_h_samp_factor * cinfo->block_size));
			compptr->downsampled_height = (JDIMENSION)
				jdiv_round_up((long) cinfo->jpeg_height *
 800b86c:	8009883a 	mov	r4,r16
 800b870:	100b883a 	mov	r5,r2
 800b874:	802c2180 	call	802c218 <__mulsi3>
 800b878:	1021883a 	mov	r16,r2
				(long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
				(long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800b87c:	e0bffe17 	ldw	r2,-8(fp)
 800b880:	10c03f17 	ldw	r3,252(r2)
 800b884:	e0bffe17 	ldw	r2,-8(fp)
 800b888:	10805917 	ldw	r2,356(r2)
 800b88c:	1809883a 	mov	r4,r3
 800b890:	100b883a 	mov	r5,r2
 800b894:	802c2180 	call	802c218 <__mulsi3>
			compptr->downsampled_width = (JDIMENSION)
				jdiv_round_up((long) cinfo->jpeg_width *
				(long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
				(long) (cinfo->max_h_samp_factor * cinfo->block_size));
			compptr->downsampled_height = (JDIMENSION)
				jdiv_round_up((long) cinfo->jpeg_height *
 800b898:	8009883a 	mov	r4,r16
 800b89c:	100b883a 	mov	r5,r2
 800b8a0:	802b0840 	call	802b084 <jdiv_round_up>
			/* Size in samples */
			compptr->downsampled_width = (JDIMENSION)
				jdiv_round_up((long) cinfo->jpeg_width *
				(long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
				(long) (cinfo->max_h_samp_factor * cinfo->block_size));
			compptr->downsampled_height = (JDIMENSION)
 800b8a4:	1007883a 	mov	r3,r2
 800b8a8:	e0bffa17 	ldw	r2,-24(fp)
 800b8ac:	10c00c15 	stw	r3,48(r2)
				jdiv_round_up((long) cinfo->jpeg_height *
				(long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
				(long) (cinfo->max_v_samp_factor * cinfo->block_size));
			/* Mark component needed (this flag isn't actually used for compression) */
			compptr->component_needed = TRUE;
 800b8b0:	e0bffa17 	ldw	r2,-24(fp)
 800b8b4:	00c00044 	movi	r3,1
 800b8b8:	10c00d05 	stb	r3,52(r2)
				compptr->v_samp_factor);
	}

	/* Compute dimensions of components */
	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
		ci++, compptr++) {
 800b8bc:	e0bff917 	ldw	r2,-28(fp)
 800b8c0:	10800044 	addi	r2,r2,1
 800b8c4:	e0bff915 	stw	r2,-28(fp)
 800b8c8:	e0bffa17 	ldw	r2,-24(fp)
 800b8cc:	10801604 	addi	r2,r2,88
 800b8d0:	e0bffa15 	stw	r2,-24(fp)
			cinfo->max_v_samp_factor = MAX(cinfo->max_v_samp_factor,
				compptr->v_samp_factor);
	}

	/* Compute dimensions of components */
	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b8d4:	e0bffe17 	ldw	r2,-8(fp)
 800b8d8:	10801217 	ldw	r2,72(r2)
 800b8dc:	e0fff917 	ldw	r3,-28(fp)
 800b8e0:	18bf6116 	blt	r3,r2,800b668 <initial_setup+0x464>

	/* Compute number of fully interleaved MCU rows (number of times that
	* main controller will call coefficient controller).
	*/
	cinfo->total_iMCU_rows = (JDIMENSION)
		jdiv_round_up((long) cinfo->jpeg_height,
 800b8e4:	e0bffe17 	ldw	r2,-8(fp)
 800b8e8:	10801017 	ldw	r2,64(r2)
 800b8ec:	1021883a 	mov	r16,r2
		(long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800b8f0:	e0bffe17 	ldw	r2,-8(fp)
 800b8f4:	10c03f17 	ldw	r3,252(r2)
 800b8f8:	e0bffe17 	ldw	r2,-8(fp)
 800b8fc:	10805917 	ldw	r2,356(r2)
 800b900:	1809883a 	mov	r4,r3
 800b904:	100b883a 	mov	r5,r2
 800b908:	802c2180 	call	802c218 <__mulsi3>

	/* Compute number of fully interleaved MCU rows (number of times that
	* main controller will call coefficient controller).
	*/
	cinfo->total_iMCU_rows = (JDIMENSION)
		jdiv_round_up((long) cinfo->jpeg_height,
 800b90c:	8009883a 	mov	r4,r16
 800b910:	100b883a 	mov	r5,r2
 800b914:	802b0840 	call	802b084 <jdiv_round_up>
	}

	/* Compute number of fully interleaved MCU rows (number of times that
	* main controller will call coefficient controller).
	*/
	cinfo->total_iMCU_rows = (JDIMENSION)
 800b918:	1007883a 	mov	r3,r2
 800b91c:	e0bffe17 	ldw	r2,-8(fp)
 800b920:	10c04215 	stw	r3,264(r2)
		jdiv_round_up((long) cinfo->jpeg_height,
		(long) (cinfo->max_v_samp_factor * cinfo->block_size));
}
 800b924:	e037883a 	mov	sp,fp
 800b928:	dfc00217 	ldw	ra,8(sp)
 800b92c:	df000117 	ldw	fp,4(sp)
 800b930:	dc000017 	ldw	r16,0(sp)
 800b934:	dec00304 	addi	sp,sp,12
 800b938:	f800283a 	ret

0800b93c <validate_script>:
LOCAL(void)
	validate_script (j_compress_ptr cinfo)
	/* Verify that the scan script in cinfo->scan_info[] is valid; also
	* determine whether it uses progressive JPEG, and set cinfo->progressive_mode.
	*/
{
 800b93c:	defd6f04 	addi	sp,sp,-2628
 800b940:	dfc29015 	stw	ra,2624(sp)
 800b944:	df028f15 	stw	fp,2620(sp)
 800b948:	df028f04 	addi	fp,sp,2620
 800b94c:	e13fff15 	stw	r4,-4(fp)
	int * last_bitpos_ptr;
	int last_bitpos[MAX_COMPONENTS][DCTSIZE2];
	/* -1 until that coefficient has been seen; then last Al for it */
#endif

	if (cinfo->num_scans <= 0)
 800b950:	e0bfff17 	ldw	r2,-4(fp)
 800b954:	10803117 	ldw	r2,196(r2)
 800b958:	00800c16 	blt	zero,r2,800b98c <validate_script+0x50>
		ERREXIT1(cinfo, JERR_BAD_SCAN_SCRIPT, 0);
 800b95c:	e0bfff17 	ldw	r2,-4(fp)
 800b960:	10800017 	ldw	r2,0(r2)
 800b964:	00c00504 	movi	r3,20
 800b968:	10c00515 	stw	r3,20(r2)
 800b96c:	e0bfff17 	ldw	r2,-4(fp)
 800b970:	10800017 	ldw	r2,0(r2)
 800b974:	10000615 	stw	zero,24(r2)
 800b978:	e0bfff17 	ldw	r2,-4(fp)
 800b97c:	10800017 	ldw	r2,0(r2)
 800b980:	10800017 	ldw	r2,0(r2)
 800b984:	e13fff17 	ldw	r4,-4(fp)
 800b988:	103ee83a 	callr	r2

	/* For sequential JPEG, all scans must have Ss=0, Se=DCTSIZE2-1;
	* for progressive JPEG, no scan can have this.
	*/
	scanptr = cinfo->scan_info;
 800b98c:	e0bfff17 	ldw	r2,-4(fp)
 800b990:	10803217 	ldw	r2,200(r2)
 800b994:	e0bd7115 	stw	r2,-2620(fp)
	if (scanptr->Ss != 0 || scanptr->Se != DCTSIZE2-1) {
 800b998:	e0bd7117 	ldw	r2,-2620(fp)
 800b99c:	10800517 	ldw	r2,20(r2)
 800b9a0:	1000041e 	bne	r2,zero,800b9b4 <validate_script+0x78>
 800b9a4:	e0bd7117 	ldw	r2,-2620(fp)
 800b9a8:	10800617 	ldw	r2,24(r2)
 800b9ac:	10800fe0 	cmpeqi	r2,r2,63
 800b9b0:	10001d1e 	bne	r2,zero,800ba28 <validate_script+0xec>
#ifdef C_PROGRESSIVE_SUPPORTED
		cinfo->progressive_mode = TRUE;
 800b9b4:	e0bfff17 	ldw	r2,-4(fp)
 800b9b8:	00c00044 	movi	r3,1
 800b9bc:	10c03d05 	stb	r3,244(r2)
		last_bitpos_ptr = & last_bitpos[0][0];
 800b9c0:	e0bd7f04 	addi	r2,fp,-2564
 800b9c4:	e0bd7515 	stw	r2,-2604(fp)
		for (ci = 0; ci < cinfo->num_components; ci++) 
 800b9c8:	e03d7315 	stw	zero,-2612(fp)
 800b9cc:	00001106 	br	800ba14 <validate_script+0xd8>
			for (coefi = 0; coefi < DCTSIZE2; coefi++)
 800b9d0:	e03d7415 	stw	zero,-2608(fp)
 800b9d4:	00000906 	br	800b9fc <validate_script+0xc0>
				*last_bitpos_ptr++ = -1;
 800b9d8:	e0bd7517 	ldw	r2,-2604(fp)
 800b9dc:	00ffffc4 	movi	r3,-1
 800b9e0:	10c00015 	stw	r3,0(r2)
 800b9e4:	e0bd7517 	ldw	r2,-2604(fp)
 800b9e8:	10800104 	addi	r2,r2,4
 800b9ec:	e0bd7515 	stw	r2,-2604(fp)
	if (scanptr->Ss != 0 || scanptr->Se != DCTSIZE2-1) {
#ifdef C_PROGRESSIVE_SUPPORTED
		cinfo->progressive_mode = TRUE;
		last_bitpos_ptr = & last_bitpos[0][0];
		for (ci = 0; ci < cinfo->num_components; ci++) 
			for (coefi = 0; coefi < DCTSIZE2; coefi++)
 800b9f0:	e0bd7417 	ldw	r2,-2608(fp)
 800b9f4:	10800044 	addi	r2,r2,1
 800b9f8:	e0bd7415 	stw	r2,-2608(fp)
 800b9fc:	e0bd7417 	ldw	r2,-2608(fp)
 800ba00:	10801010 	cmplti	r2,r2,64
 800ba04:	103ff41e 	bne	r2,zero,800b9d8 <validate_script+0x9c>
	scanptr = cinfo->scan_info;
	if (scanptr->Ss != 0 || scanptr->Se != DCTSIZE2-1) {
#ifdef C_PROGRESSIVE_SUPPORTED
		cinfo->progressive_mode = TRUE;
		last_bitpos_ptr = & last_bitpos[0][0];
		for (ci = 0; ci < cinfo->num_components; ci++) 
 800ba08:	e0bd7317 	ldw	r2,-2612(fp)
 800ba0c:	10800044 	addi	r2,r2,1
 800ba10:	e0bd7315 	stw	r2,-2612(fp)
 800ba14:	e0bfff17 	ldw	r2,-4(fp)
 800ba18:	10801217 	ldw	r2,72(r2)
 800ba1c:	e0fd7317 	ldw	r3,-2612(fp)
 800ba20:	18bfeb16 	blt	r3,r2,800b9d0 <validate_script+0x94>

	/* For sequential JPEG, all scans must have Ss=0, Se=DCTSIZE2-1;
	* for progressive JPEG, no scan can have this.
	*/
	scanptr = cinfo->scan_info;
	if (scanptr->Ss != 0 || scanptr->Se != DCTSIZE2-1) {
 800ba24:	00000f06 	br	800ba64 <validate_script+0x128>
				*last_bitpos_ptr++ = -1;
#else
		ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif
	} else {
		cinfo->progressive_mode = FALSE;
 800ba28:	e0bfff17 	ldw	r2,-4(fp)
 800ba2c:	10003d05 	stb	zero,244(r2)
		for (ci = 0; ci < cinfo->num_components; ci++) 
 800ba30:	e03d7315 	stw	zero,-2612(fp)
 800ba34:	00000706 	br	800ba54 <validate_script+0x118>
			component_sent[ci] = FALSE;
 800ba38:	e0fd7c04 	addi	r3,fp,-2576
 800ba3c:	e0bd7317 	ldw	r2,-2612(fp)
 800ba40:	1885883a 	add	r2,r3,r2
 800ba44:	10000005 	stb	zero,0(r2)
#else
		ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif
	} else {
		cinfo->progressive_mode = FALSE;
		for (ci = 0; ci < cinfo->num_components; ci++) 
 800ba48:	e0bd7317 	ldw	r2,-2612(fp)
 800ba4c:	10800044 	addi	r2,r2,1
 800ba50:	e0bd7315 	stw	r2,-2612(fp)
 800ba54:	e0bfff17 	ldw	r2,-4(fp)
 800ba58:	10801217 	ldw	r2,72(r2)
 800ba5c:	e0fd7317 	ldw	r3,-2612(fp)
 800ba60:	18bff516 	blt	r3,r2,800ba38 <validate_script+0xfc>
			component_sent[ci] = FALSE;
	}

	for (scanno = 1; scanno <= cinfo->num_scans; scanptr++, scanno++) {
 800ba64:	00800044 	movi	r2,1
 800ba68:	e0bd7215 	stw	r2,-2616(fp)
 800ba6c:	00015306 	br	800bfbc <validate_script+0x680>
		/* Validate component indexes */
		ncomps = scanptr->comps_in_scan;
 800ba70:	e0bd7117 	ldw	r2,-2620(fp)
 800ba74:	10800017 	ldw	r2,0(r2)
 800ba78:	e0bd7615 	stw	r2,-2600(fp)
		if (ncomps <= 0 || ncomps > MAX_COMPS_IN_SCAN)
 800ba7c:	e0bd7617 	ldw	r2,-2600(fp)
 800ba80:	0080030e 	bge	zero,r2,800ba90 <validate_script+0x154>
 800ba84:	e0bd7617 	ldw	r2,-2600(fp)
 800ba88:	10800150 	cmplti	r2,r2,5
 800ba8c:	1000111e 	bne	r2,zero,800bad4 <validate_script+0x198>
			ERREXIT2(cinfo, JERR_COMPONENT_COUNT, ncomps, MAX_COMPS_IN_SCAN);
 800ba90:	e0bfff17 	ldw	r2,-4(fp)
 800ba94:	10800017 	ldw	r2,0(r2)
 800ba98:	00c006c4 	movi	r3,27
 800ba9c:	10c00515 	stw	r3,20(r2)
 800baa0:	e0bfff17 	ldw	r2,-4(fp)
 800baa4:	10800017 	ldw	r2,0(r2)
 800baa8:	e0fd7617 	ldw	r3,-2600(fp)
 800baac:	10c00615 	stw	r3,24(r2)
 800bab0:	e0bfff17 	ldw	r2,-4(fp)
 800bab4:	10800017 	ldw	r2,0(r2)
 800bab8:	00c00104 	movi	r3,4
 800babc:	10c00715 	stw	r3,28(r2)
 800bac0:	e0bfff17 	ldw	r2,-4(fp)
 800bac4:	10800017 	ldw	r2,0(r2)
 800bac8:	10800017 	ldw	r2,0(r2)
 800bacc:	e13fff17 	ldw	r4,-4(fp)
 800bad0:	103ee83a 	callr	r2
		for (ci = 0; ci < ncomps; ci++) {
 800bad4:	e03d7315 	stw	zero,-2612(fp)
 800bad8:	00003706 	br	800bbb8 <validate_script+0x27c>
			thisi = scanptr->component_index[ci];
 800badc:	e0fd7117 	ldw	r3,-2620(fp)
 800bae0:	e0bd7317 	ldw	r2,-2612(fp)
 800bae4:	10800044 	addi	r2,r2,1
 800bae8:	1085883a 	add	r2,r2,r2
 800baec:	1085883a 	add	r2,r2,r2
 800baf0:	1885883a 	add	r2,r3,r2
 800baf4:	10800017 	ldw	r2,0(r2)
 800baf8:	e0bd7715 	stw	r2,-2596(fp)
			if (thisi < 0 || thisi >= cinfo->num_components)
 800bafc:	e0bd7717 	ldw	r2,-2596(fp)
 800bb00:	10000416 	blt	r2,zero,800bb14 <validate_script+0x1d8>
 800bb04:	e0bfff17 	ldw	r2,-4(fp)
 800bb08:	10801217 	ldw	r2,72(r2)
 800bb0c:	e0fd7717 	ldw	r3,-2596(fp)
 800bb10:	18800d16 	blt	r3,r2,800bb48 <validate_script+0x20c>
				ERREXIT1(cinfo, JERR_BAD_SCAN_SCRIPT, scanno);
 800bb14:	e0bfff17 	ldw	r2,-4(fp)
 800bb18:	10800017 	ldw	r2,0(r2)
 800bb1c:	00c00504 	movi	r3,20
 800bb20:	10c00515 	stw	r3,20(r2)
 800bb24:	e0bfff17 	ldw	r2,-4(fp)
 800bb28:	10800017 	ldw	r2,0(r2)
 800bb2c:	e0fd7217 	ldw	r3,-2616(fp)
 800bb30:	10c00615 	stw	r3,24(r2)
 800bb34:	e0bfff17 	ldw	r2,-4(fp)
 800bb38:	10800017 	ldw	r2,0(r2)
 800bb3c:	10800017 	ldw	r2,0(r2)
 800bb40:	e13fff17 	ldw	r4,-4(fp)
 800bb44:	103ee83a 	callr	r2
			/* Components must appear in SOF order within each scan */
			if (ci > 0 && thisi <= scanptr->component_index[ci-1])
 800bb48:	e0bd7317 	ldw	r2,-2612(fp)
 800bb4c:	0080170e 	bge	zero,r2,800bbac <validate_script+0x270>
 800bb50:	e0bd7317 	ldw	r2,-2612(fp)
 800bb54:	10bfffc4 	addi	r2,r2,-1
 800bb58:	e0fd7117 	ldw	r3,-2620(fp)
 800bb5c:	10800044 	addi	r2,r2,1
 800bb60:	1085883a 	add	r2,r2,r2
 800bb64:	1085883a 	add	r2,r2,r2
 800bb68:	1885883a 	add	r2,r3,r2
 800bb6c:	10c00017 	ldw	r3,0(r2)
 800bb70:	e0bd7717 	ldw	r2,-2596(fp)
 800bb74:	18800d16 	blt	r3,r2,800bbac <validate_script+0x270>
				ERREXIT1(cinfo, JERR_BAD_SCAN_SCRIPT, scanno);
 800bb78:	e0bfff17 	ldw	r2,-4(fp)
 800bb7c:	10800017 	ldw	r2,0(r2)
 800bb80:	00c00504 	movi	r3,20
 800bb84:	10c00515 	stw	r3,20(r2)
 800bb88:	e0bfff17 	ldw	r2,-4(fp)
 800bb8c:	10800017 	ldw	r2,0(r2)
 800bb90:	e0fd7217 	ldw	r3,-2616(fp)
 800bb94:	10c00615 	stw	r3,24(r2)
 800bb98:	e0bfff17 	ldw	r2,-4(fp)
 800bb9c:	10800017 	ldw	r2,0(r2)
 800bba0:	10800017 	ldw	r2,0(r2)
 800bba4:	e13fff17 	ldw	r4,-4(fp)
 800bba8:	103ee83a 	callr	r2
	for (scanno = 1; scanno <= cinfo->num_scans; scanptr++, scanno++) {
		/* Validate component indexes */
		ncomps = scanptr->comps_in_scan;
		if (ncomps <= 0 || ncomps > MAX_COMPS_IN_SCAN)
			ERREXIT2(cinfo, JERR_COMPONENT_COUNT, ncomps, MAX_COMPS_IN_SCAN);
		for (ci = 0; ci < ncomps; ci++) {
 800bbac:	e0bd7317 	ldw	r2,-2612(fp)
 800bbb0:	10800044 	addi	r2,r2,1
 800bbb4:	e0bd7315 	stw	r2,-2612(fp)
 800bbb8:	e0fd7317 	ldw	r3,-2612(fp)
 800bbbc:	e0bd7617 	ldw	r2,-2600(fp)
 800bbc0:	18bfc616 	blt	r3,r2,800badc <validate_script+0x1a0>
			/* Components must appear in SOF order within each scan */
			if (ci > 0 && thisi <= scanptr->component_index[ci-1])
				ERREXIT1(cinfo, JERR_BAD_SCAN_SCRIPT, scanno);
		}
		/* Validate progression parameters */
		Ss = scanptr->Ss;
 800bbc4:	e0bd7117 	ldw	r2,-2620(fp)
 800bbc8:	10800517 	ldw	r2,20(r2)
 800bbcc:	e0bd7815 	stw	r2,-2592(fp)
		Se = scanptr->Se;
 800bbd0:	e0bd7117 	ldw	r2,-2620(fp)
 800bbd4:	10800617 	ldw	r2,24(r2)
 800bbd8:	e0bd7915 	stw	r2,-2588(fp)
		Ah = scanptr->Ah;
 800bbdc:	e0bd7117 	ldw	r2,-2620(fp)
 800bbe0:	10800717 	ldw	r2,28(r2)
 800bbe4:	e0bd7a15 	stw	r2,-2584(fp)
		Al = scanptr->Al;
 800bbe8:	e0bd7117 	ldw	r2,-2620(fp)
 800bbec:	10800817 	ldw	r2,32(r2)
 800bbf0:	e0bd7b15 	stw	r2,-2580(fp)
		if (cinfo->progressive_mode) {
 800bbf4:	e0bfff17 	ldw	r2,-4(fp)
 800bbf8:	10803d03 	ldbu	r2,244(r2)
 800bbfc:	10803fcc 	andi	r2,r2,255
 800bc00:	1000aa26 	beq	r2,zero,800beac <validate_script+0x570>
#if BITS_IN_JSAMPLE == 8
#define MAX_AH_AL 10
#else
#define MAX_AH_AL 13
#endif
			if (Ss < 0 || Ss >= DCTSIZE2 || Se < Ss || Se >= DCTSIZE2 ||
 800bc04:	e0bd7817 	ldw	r2,-2592(fp)
 800bc08:	10001316 	blt	r2,zero,800bc58 <validate_script+0x31c>
 800bc0c:	e0bd7817 	ldw	r2,-2592(fp)
 800bc10:	10801008 	cmpgei	r2,r2,64
 800bc14:	1000101e 	bne	r2,zero,800bc58 <validate_script+0x31c>
 800bc18:	e0fd7917 	ldw	r3,-2588(fp)
 800bc1c:	e0bd7817 	ldw	r2,-2592(fp)
 800bc20:	18800d16 	blt	r3,r2,800bc58 <validate_script+0x31c>
 800bc24:	e0bd7917 	ldw	r2,-2588(fp)
 800bc28:	10801008 	cmpgei	r2,r2,64
 800bc2c:	10000a1e 	bne	r2,zero,800bc58 <validate_script+0x31c>
 800bc30:	e0bd7a17 	ldw	r2,-2584(fp)
 800bc34:	10000816 	blt	r2,zero,800bc58 <validate_script+0x31c>
				Ah < 0 || Ah > MAX_AH_AL || Al < 0 || Al > MAX_AH_AL)
 800bc38:	e0bd7a17 	ldw	r2,-2584(fp)
 800bc3c:	108002c8 	cmpgei	r2,r2,11
 800bc40:	1000051e 	bne	r2,zero,800bc58 <validate_script+0x31c>
 800bc44:	e0bd7b17 	ldw	r2,-2580(fp)
 800bc48:	10000316 	blt	r2,zero,800bc58 <validate_script+0x31c>
 800bc4c:	e0bd7b17 	ldw	r2,-2580(fp)
 800bc50:	108002d0 	cmplti	r2,r2,11
 800bc54:	10000d1e 	bne	r2,zero,800bc8c <validate_script+0x350>
				ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
 800bc58:	e0bfff17 	ldw	r2,-4(fp)
 800bc5c:	10800017 	ldw	r2,0(r2)
 800bc60:	00c00484 	movi	r3,18
 800bc64:	10c00515 	stw	r3,20(r2)
 800bc68:	e0bfff17 	ldw	r2,-4(fp)
 800bc6c:	10800017 	ldw	r2,0(r2)
 800bc70:	e0fd7217 	ldw	r3,-2616(fp)
 800bc74:	10c00615 	stw	r3,24(r2)
 800bc78:	e0bfff17 	ldw	r2,-4(fp)
 800bc7c:	10800017 	ldw	r2,0(r2)
 800bc80:	10800017 	ldw	r2,0(r2)
 800bc84:	e13fff17 	ldw	r4,-4(fp)
 800bc88:	103ee83a 	callr	r2
			if (Ss == 0) {
 800bc8c:	e0bd7817 	ldw	r2,-2592(fp)
 800bc90:	1000101e 	bne	r2,zero,800bcd4 <validate_script+0x398>
				if (Se != 0)		/* DC and AC together not OK */
 800bc94:	e0bd7917 	ldw	r2,-2588(fp)
 800bc98:	10001e26 	beq	r2,zero,800bd14 <validate_script+0x3d8>
					ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
 800bc9c:	e0bfff17 	ldw	r2,-4(fp)
 800bca0:	10800017 	ldw	r2,0(r2)
 800bca4:	00c00484 	movi	r3,18
 800bca8:	10c00515 	stw	r3,20(r2)
 800bcac:	e0bfff17 	ldw	r2,-4(fp)
 800bcb0:	10800017 	ldw	r2,0(r2)
 800bcb4:	e0fd7217 	ldw	r3,-2616(fp)
 800bcb8:	10c00615 	stw	r3,24(r2)
 800bcbc:	e0bfff17 	ldw	r2,-4(fp)
 800bcc0:	10800017 	ldw	r2,0(r2)
 800bcc4:	10800017 	ldw	r2,0(r2)
 800bcc8:	e13fff17 	ldw	r4,-4(fp)
 800bccc:	103ee83a 	callr	r2
 800bcd0:	00001006 	br	800bd14 <validate_script+0x3d8>
			} else {
				if (ncomps != 1)	/* AC scans must be for only one component */
 800bcd4:	e0bd7617 	ldw	r2,-2600(fp)
 800bcd8:	10800060 	cmpeqi	r2,r2,1
 800bcdc:	10000d1e 	bne	r2,zero,800bd14 <validate_script+0x3d8>
					ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
 800bce0:	e0bfff17 	ldw	r2,-4(fp)
 800bce4:	10800017 	ldw	r2,0(r2)
 800bce8:	00c00484 	movi	r3,18
 800bcec:	10c00515 	stw	r3,20(r2)
 800bcf0:	e0bfff17 	ldw	r2,-4(fp)
 800bcf4:	10800017 	ldw	r2,0(r2)
 800bcf8:	e0fd7217 	ldw	r3,-2616(fp)
 800bcfc:	10c00615 	stw	r3,24(r2)
 800bd00:	e0bfff17 	ldw	r2,-4(fp)
 800bd04:	10800017 	ldw	r2,0(r2)
 800bd08:	10800017 	ldw	r2,0(r2)
 800bd0c:	e13fff17 	ldw	r4,-4(fp)
 800bd10:	103ee83a 	callr	r2
			}
			for (ci = 0; ci < ncomps; ci++) {
 800bd14:	e03d7315 	stw	zero,-2612(fp)
 800bd18:	00006006 	br	800be9c <validate_script+0x560>
				last_bitpos_ptr = & last_bitpos[scanptr->component_index[ci]][0];
 800bd1c:	e0fd7117 	ldw	r3,-2620(fp)
 800bd20:	e0bd7317 	ldw	r2,-2612(fp)
 800bd24:	10800044 	addi	r2,r2,1
 800bd28:	1085883a 	add	r2,r2,r2
 800bd2c:	1085883a 	add	r2,r2,r2
 800bd30:	1885883a 	add	r2,r3,r2
 800bd34:	10800017 	ldw	r2,0(r2)
 800bd38:	e0fd7f04 	addi	r3,fp,-2564
 800bd3c:	1004923a 	slli	r2,r2,8
 800bd40:	1885883a 	add	r2,r3,r2
 800bd44:	e0bd7515 	stw	r2,-2604(fp)
				if (Ss != 0 && last_bitpos_ptr[0] < 0) /* AC without prior DC scan */
 800bd48:	e0bd7817 	ldw	r2,-2592(fp)
 800bd4c:	10001026 	beq	r2,zero,800bd90 <validate_script+0x454>
 800bd50:	e0bd7517 	ldw	r2,-2604(fp)
 800bd54:	10800017 	ldw	r2,0(r2)
 800bd58:	10000d0e 	bge	r2,zero,800bd90 <validate_script+0x454>
					ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
 800bd5c:	e0bfff17 	ldw	r2,-4(fp)
 800bd60:	10800017 	ldw	r2,0(r2)
 800bd64:	00c00484 	movi	r3,18
 800bd68:	10c00515 	stw	r3,20(r2)
 800bd6c:	e0bfff17 	ldw	r2,-4(fp)
 800bd70:	10800017 	ldw	r2,0(r2)
 800bd74:	e0fd7217 	ldw	r3,-2616(fp)
 800bd78:	10c00615 	stw	r3,24(r2)
 800bd7c:	e0bfff17 	ldw	r2,-4(fp)
 800bd80:	10800017 	ldw	r2,0(r2)
 800bd84:	10800017 	ldw	r2,0(r2)
 800bd88:	e13fff17 	ldw	r4,-4(fp)
 800bd8c:	103ee83a 	callr	r2
				for (coefi = Ss; coefi <= Se; coefi++) {
 800bd90:	e0bd7817 	ldw	r2,-2592(fp)
 800bd94:	e0bd7415 	stw	r2,-2608(fp)
 800bd98:	00003a06 	br	800be84 <validate_script+0x548>
					if (last_bitpos_ptr[coefi] < 0) {
 800bd9c:	e0bd7417 	ldw	r2,-2608(fp)
 800bda0:	1085883a 	add	r2,r2,r2
 800bda4:	1085883a 	add	r2,r2,r2
 800bda8:	e0fd7517 	ldw	r3,-2604(fp)
 800bdac:	1885883a 	add	r2,r3,r2
 800bdb0:	10800017 	ldw	r2,0(r2)
 800bdb4:	1000100e 	bge	r2,zero,800bdf8 <validate_script+0x4bc>
						/* first scan of this coefficient */
						if (Ah != 0)
 800bdb8:	e0bd7a17 	ldw	r2,-2584(fp)
 800bdbc:	10002726 	beq	r2,zero,800be5c <validate_script+0x520>
							ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
 800bdc0:	e0bfff17 	ldw	r2,-4(fp)
 800bdc4:	10800017 	ldw	r2,0(r2)
 800bdc8:	00c00484 	movi	r3,18
 800bdcc:	10c00515 	stw	r3,20(r2)
 800bdd0:	e0bfff17 	ldw	r2,-4(fp)
 800bdd4:	10800017 	ldw	r2,0(r2)
 800bdd8:	e0fd7217 	ldw	r3,-2616(fp)
 800bddc:	10c00615 	stw	r3,24(r2)
 800bde0:	e0bfff17 	ldw	r2,-4(fp)
 800bde4:	10800017 	ldw	r2,0(r2)
 800bde8:	10800017 	ldw	r2,0(r2)
 800bdec:	e13fff17 	ldw	r4,-4(fp)
 800bdf0:	103ee83a 	callr	r2
 800bdf4:	00001906 	br	800be5c <validate_script+0x520>
					} else {
						/* not first scan */
						if (Ah != last_bitpos_ptr[coefi] || Al != Ah-1)
 800bdf8:	e0bd7417 	ldw	r2,-2608(fp)
 800bdfc:	1085883a 	add	r2,r2,r2
 800be00:	1085883a 	add	r2,r2,r2
 800be04:	e0fd7517 	ldw	r3,-2604(fp)
 800be08:	1885883a 	add	r2,r3,r2
 800be0c:	10c00017 	ldw	r3,0(r2)
 800be10:	e0bd7a17 	ldw	r2,-2584(fp)
 800be14:	1880041e 	bne	r3,r2,800be28 <validate_script+0x4ec>
 800be18:	e0bd7a17 	ldw	r2,-2584(fp)
 800be1c:	10ffffc4 	addi	r3,r2,-1
 800be20:	e0bd7b17 	ldw	r2,-2580(fp)
 800be24:	18800d26 	beq	r3,r2,800be5c <validate_script+0x520>
							ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
 800be28:	e0bfff17 	ldw	r2,-4(fp)
 800be2c:	10800017 	ldw	r2,0(r2)
 800be30:	00c00484 	movi	r3,18
 800be34:	10c00515 	stw	r3,20(r2)
 800be38:	e0bfff17 	ldw	r2,-4(fp)
 800be3c:	10800017 	ldw	r2,0(r2)
 800be40:	e0fd7217 	ldw	r3,-2616(fp)
 800be44:	10c00615 	stw	r3,24(r2)
 800be48:	e0bfff17 	ldw	r2,-4(fp)
 800be4c:	10800017 	ldw	r2,0(r2)
 800be50:	10800017 	ldw	r2,0(r2)
 800be54:	e13fff17 	ldw	r4,-4(fp)
 800be58:	103ee83a 	callr	r2
					}
					last_bitpos_ptr[coefi] = Al;
 800be5c:	e0bd7417 	ldw	r2,-2608(fp)
 800be60:	1085883a 	add	r2,r2,r2
 800be64:	1085883a 	add	r2,r2,r2
 800be68:	e0fd7517 	ldw	r3,-2604(fp)
 800be6c:	1885883a 	add	r2,r3,r2
 800be70:	e0fd7b17 	ldw	r3,-2580(fp)
 800be74:	10c00015 	stw	r3,0(r2)
			}
			for (ci = 0; ci < ncomps; ci++) {
				last_bitpos_ptr = & last_bitpos[scanptr->component_index[ci]][0];
				if (Ss != 0 && last_bitpos_ptr[0] < 0) /* AC without prior DC scan */
					ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
				for (coefi = Ss; coefi <= Se; coefi++) {
 800be78:	e0bd7417 	ldw	r2,-2608(fp)
 800be7c:	10800044 	addi	r2,r2,1
 800be80:	e0bd7415 	stw	r2,-2608(fp)
 800be84:	e0bd7417 	ldw	r2,-2608(fp)
 800be88:	e0fd7917 	ldw	r3,-2588(fp)
 800be8c:	18bfc30e 	bge	r3,r2,800bd9c <validate_script+0x460>
					ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
			} else {
				if (ncomps != 1)	/* AC scans must be for only one component */
					ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
			}
			for (ci = 0; ci < ncomps; ci++) {
 800be90:	e0bd7317 	ldw	r2,-2612(fp)
 800be94:	10800044 	addi	r2,r2,1
 800be98:	e0bd7315 	stw	r2,-2612(fp)
 800be9c:	e0fd7317 	ldw	r3,-2612(fp)
 800bea0:	e0bd7617 	ldw	r2,-2600(fp)
 800bea4:	18bf9d16 	blt	r3,r2,800bd1c <validate_script+0x3e0>
 800bea8:	00003e06 	br	800bfa4 <validate_script+0x668>
				}
			}
#endif
		} else {
			/* For sequential JPEG, all progression parameters must be these: */
			if (Ss != 0 || Se != DCTSIZE2-1 || Ah != 0 || Al != 0)
 800beac:	e0bd7817 	ldw	r2,-2592(fp)
 800beb0:	1000071e 	bne	r2,zero,800bed0 <validate_script+0x594>
 800beb4:	e0bd7917 	ldw	r2,-2588(fp)
 800beb8:	10800fd8 	cmpnei	r2,r2,63
 800bebc:	1000041e 	bne	r2,zero,800bed0 <validate_script+0x594>
 800bec0:	e0bd7a17 	ldw	r2,-2584(fp)
 800bec4:	1000021e 	bne	r2,zero,800bed0 <validate_script+0x594>
 800bec8:	e0bd7b17 	ldw	r2,-2580(fp)
 800becc:	10000d26 	beq	r2,zero,800bf04 <validate_script+0x5c8>
				ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
 800bed0:	e0bfff17 	ldw	r2,-4(fp)
 800bed4:	10800017 	ldw	r2,0(r2)
 800bed8:	00c00484 	movi	r3,18
 800bedc:	10c00515 	stw	r3,20(r2)
 800bee0:	e0bfff17 	ldw	r2,-4(fp)
 800bee4:	10800017 	ldw	r2,0(r2)
 800bee8:	e0fd7217 	ldw	r3,-2616(fp)
 800beec:	10c00615 	stw	r3,24(r2)
 800bef0:	e0bfff17 	ldw	r2,-4(fp)
 800bef4:	10800017 	ldw	r2,0(r2)
 800bef8:	10800017 	ldw	r2,0(r2)
 800befc:	e13fff17 	ldw	r4,-4(fp)
 800bf00:	103ee83a 	callr	r2
			/* Make sure components are not sent twice */
			for (ci = 0; ci < ncomps; ci++) {
 800bf04:	e03d7315 	stw	zero,-2612(fp)
 800bf08:	00002306 	br	800bf98 <validate_script+0x65c>
				thisi = scanptr->component_index[ci];
 800bf0c:	e0fd7117 	ldw	r3,-2620(fp)
 800bf10:	e0bd7317 	ldw	r2,-2612(fp)
 800bf14:	10800044 	addi	r2,r2,1
 800bf18:	1085883a 	add	r2,r2,r2
 800bf1c:	1085883a 	add	r2,r2,r2
 800bf20:	1885883a 	add	r2,r3,r2
 800bf24:	10800017 	ldw	r2,0(r2)
 800bf28:	e0bd7715 	stw	r2,-2596(fp)
				if (component_sent[thisi])
 800bf2c:	e0fd7c04 	addi	r3,fp,-2576
 800bf30:	e0bd7717 	ldw	r2,-2596(fp)
 800bf34:	1885883a 	add	r2,r3,r2
 800bf38:	10800003 	ldbu	r2,0(r2)
 800bf3c:	10803fcc 	andi	r2,r2,255
 800bf40:	10000d26 	beq	r2,zero,800bf78 <validate_script+0x63c>
					ERREXIT1(cinfo, JERR_BAD_SCAN_SCRIPT, scanno);
 800bf44:	e0bfff17 	ldw	r2,-4(fp)
 800bf48:	10800017 	ldw	r2,0(r2)
 800bf4c:	00c00504 	movi	r3,20
 800bf50:	10c00515 	stw	r3,20(r2)
 800bf54:	e0bfff17 	ldw	r2,-4(fp)
 800bf58:	10800017 	ldw	r2,0(r2)
 800bf5c:	e0fd7217 	ldw	r3,-2616(fp)
 800bf60:	10c00615 	stw	r3,24(r2)
 800bf64:	e0bfff17 	ldw	r2,-4(fp)
 800bf68:	10800017 	ldw	r2,0(r2)
 800bf6c:	10800017 	ldw	r2,0(r2)
 800bf70:	e13fff17 	ldw	r4,-4(fp)
 800bf74:	103ee83a 	callr	r2
				component_sent[thisi] = TRUE;
 800bf78:	e0fd7c04 	addi	r3,fp,-2576
 800bf7c:	e0bd7717 	ldw	r2,-2596(fp)
 800bf80:	1885883a 	add	r2,r3,r2
 800bf84:	00c00044 	movi	r3,1
 800bf88:	10c00005 	stb	r3,0(r2)
		} else {
			/* For sequential JPEG, all progression parameters must be these: */
			if (Ss != 0 || Se != DCTSIZE2-1 || Ah != 0 || Al != 0)
				ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
			/* Make sure components are not sent twice */
			for (ci = 0; ci < ncomps; ci++) {
 800bf8c:	e0bd7317 	ldw	r2,-2612(fp)
 800bf90:	10800044 	addi	r2,r2,1
 800bf94:	e0bd7315 	stw	r2,-2612(fp)
 800bf98:	e0fd7317 	ldw	r3,-2612(fp)
 800bf9c:	e0bd7617 	ldw	r2,-2600(fp)
 800bfa0:	18bfda16 	blt	r3,r2,800bf0c <validate_script+0x5d0>
		cinfo->progressive_mode = FALSE;
		for (ci = 0; ci < cinfo->num_components; ci++) 
			component_sent[ci] = FALSE;
	}

	for (scanno = 1; scanno <= cinfo->num_scans; scanptr++, scanno++) {
 800bfa4:	e0bd7117 	ldw	r2,-2620(fp)
 800bfa8:	10800904 	addi	r2,r2,36
 800bfac:	e0bd7115 	stw	r2,-2620(fp)
 800bfb0:	e0bd7217 	ldw	r2,-2616(fp)
 800bfb4:	10800044 	addi	r2,r2,1
 800bfb8:	e0bd7215 	stw	r2,-2616(fp)
 800bfbc:	e0bfff17 	ldw	r2,-4(fp)
 800bfc0:	10c03117 	ldw	r3,196(r2)
 800bfc4:	e0bd7217 	ldw	r2,-2616(fp)
 800bfc8:	18bea90e 	bge	r3,r2,800ba70 <validate_script+0x134>
			}
		}
	}

	/* Now verify that everything got sent. */
	if (cinfo->progressive_mode) {
 800bfcc:	e0bfff17 	ldw	r2,-4(fp)
 800bfd0:	10803d03 	ldbu	r2,244(r2)
 800bfd4:	10803fcc 	andi	r2,r2,255
 800bfd8:	10001a26 	beq	r2,zero,800c044 <validate_script+0x708>
		/* For progressive mode, we only check that at least some DC data
		* got sent for each component; the spec does not require that all bits
		* of all coefficients be transmitted.  Would it be wiser to enforce
		* transmission of all coefficient bits??
		*/
		for (ci = 0; ci < cinfo->num_components; ci++) {
 800bfdc:	e03d7315 	stw	zero,-2612(fp)
 800bfe0:	00001306 	br	800c030 <validate_script+0x6f4>
			if (last_bitpos[ci][0] < 0)
 800bfe4:	e0bd7317 	ldw	r2,-2612(fp)
 800bfe8:	1004923a 	slli	r2,r2,8
 800bfec:	e0fd7104 	addi	r3,fp,-2620
 800bff0:	1885883a 	add	r2,r3,r2
 800bff4:	10800e04 	addi	r2,r2,56
 800bff8:	10800017 	ldw	r2,0(r2)
 800bffc:	1000090e 	bge	r2,zero,800c024 <validate_script+0x6e8>
				ERREXIT(cinfo, JERR_MISSING_DATA);
 800c000:	e0bfff17 	ldw	r2,-4(fp)
 800c004:	10800017 	ldw	r2,0(r2)
 800c008:	00c00b84 	movi	r3,46
 800c00c:	10c00515 	stw	r3,20(r2)
 800c010:	e0bfff17 	ldw	r2,-4(fp)
 800c014:	10800017 	ldw	r2,0(r2)
 800c018:	10800017 	ldw	r2,0(r2)
 800c01c:	e13fff17 	ldw	r4,-4(fp)
 800c020:	103ee83a 	callr	r2
		/* For progressive mode, we only check that at least some DC data
		* got sent for each component; the spec does not require that all bits
		* of all coefficients be transmitted.  Would it be wiser to enforce
		* transmission of all coefficient bits??
		*/
		for (ci = 0; ci < cinfo->num_components; ci++) {
 800c024:	e0bd7317 	ldw	r2,-2612(fp)
 800c028:	10800044 	addi	r2,r2,1
 800c02c:	e0bd7315 	stw	r2,-2612(fp)
 800c030:	e0bfff17 	ldw	r2,-4(fp)
 800c034:	10801217 	ldw	r2,72(r2)
 800c038:	e0fd7317 	ldw	r3,-2612(fp)
 800c03c:	18bfe916 	blt	r3,r2,800bfe4 <validate_script+0x6a8>
 800c040:	00001806 	br	800c0a4 <validate_script+0x768>
			if (last_bitpos[ci][0] < 0)
				ERREXIT(cinfo, JERR_MISSING_DATA);
		}
#endif
	} else {
		for (ci = 0; ci < cinfo->num_components; ci++) {
 800c044:	e03d7315 	stw	zero,-2612(fp)
 800c048:	00001206 	br	800c094 <validate_script+0x758>
			if (! component_sent[ci])
 800c04c:	e0fd7c04 	addi	r3,fp,-2576
 800c050:	e0bd7317 	ldw	r2,-2612(fp)
 800c054:	1885883a 	add	r2,r3,r2
 800c058:	10800003 	ldbu	r2,0(r2)
 800c05c:	10803fcc 	andi	r2,r2,255
 800c060:	1000091e 	bne	r2,zero,800c088 <validate_script+0x74c>
				ERREXIT(cinfo, JERR_MISSING_DATA);
 800c064:	e0bfff17 	ldw	r2,-4(fp)
 800c068:	10800017 	ldw	r2,0(r2)
 800c06c:	00c00b84 	movi	r3,46
 800c070:	10c00515 	stw	r3,20(r2)
 800c074:	e0bfff17 	ldw	r2,-4(fp)
 800c078:	10800017 	ldw	r2,0(r2)
 800c07c:	10800017 	ldw	r2,0(r2)
 800c080:	e13fff17 	ldw	r4,-4(fp)
 800c084:	103ee83a 	callr	r2
			if (last_bitpos[ci][0] < 0)
				ERREXIT(cinfo, JERR_MISSING_DATA);
		}
#endif
	} else {
		for (ci = 0; ci < cinfo->num_components; ci++) {
 800c088:	e0bd7317 	ldw	r2,-2612(fp)
 800c08c:	10800044 	addi	r2,r2,1
 800c090:	e0bd7315 	stw	r2,-2612(fp)
 800c094:	e0bfff17 	ldw	r2,-4(fp)
 800c098:	10801217 	ldw	r2,72(r2)
 800c09c:	e0fd7317 	ldw	r3,-2612(fp)
 800c0a0:	18bfea16 	blt	r3,r2,800c04c <validate_script+0x710>
			if (! component_sent[ci])
				ERREXIT(cinfo, JERR_MISSING_DATA);
		}
	}
}
 800c0a4:	e037883a 	mov	sp,fp
 800c0a8:	dfc00117 	ldw	ra,4(sp)
 800c0ac:	df000017 	ldw	fp,0(sp)
 800c0b0:	dec00204 	addi	sp,sp,8
 800c0b4:	f800283a 	ret

0800c0b8 <reduce_script>:
LOCAL(void)
	reduce_script (j_compress_ptr cinfo)
	/* Adapt scan script for use with reduced block size;
	* assume that script has been validated before.
	*/
{
 800c0b8:	defff904 	addi	sp,sp,-28
 800c0bc:	dfc00615 	stw	ra,24(sp)
 800c0c0:	df000515 	stw	fp,20(sp)
 800c0c4:	dc000415 	stw	r16,16(sp)
 800c0c8:	df000404 	addi	fp,sp,16
 800c0cc:	e13fff15 	stw	r4,-4(fp)
	jpeg_scan_info * scanptr;
	int idxout, idxin;

	/* Circumvent const declaration for this function */
	scanptr = (jpeg_scan_info *) cinfo->scan_info;
 800c0d0:	e0bfff17 	ldw	r2,-4(fp)
 800c0d4:	10803217 	ldw	r2,200(r2)
 800c0d8:	e0bffe15 	stw	r2,-8(fp)
	idxout = 0;
 800c0dc:	e03ffc15 	stw	zero,-16(fp)

	for (idxin = 0; idxin < cinfo->num_scans; idxin++) {
 800c0e0:	e03ffd15 	stw	zero,-12(fp)
 800c0e4:	00004606 	br	800c200 <reduce_script+0x148>
		/* After skipping, idxout becomes smaller than idxin */
		if (idxin != idxout)
 800c0e8:	e0fffd17 	ldw	r3,-12(fp)
 800c0ec:	e0bffc17 	ldw	r2,-16(fp)
 800c0f0:	18801e26 	beq	r3,r2,800c16c <reduce_script+0xb4>
			/* Copy rest of data;
			* note we stay in given chunk of allocated memory.
			*/
			scanptr[idxout] = scanptr[idxin];
 800c0f4:	e0bffc17 	ldw	r2,-16(fp)
 800c0f8:	1009883a 	mov	r4,r2
 800c0fc:	01400904 	movi	r5,36
 800c100:	802c2180 	call	802c218 <__mulsi3>
 800c104:	e0fffe17 	ldw	r3,-8(fp)
 800c108:	18a1883a 	add	r16,r3,r2
 800c10c:	e0bffd17 	ldw	r2,-12(fp)
 800c110:	1009883a 	mov	r4,r2
 800c114:	01400904 	movi	r5,36
 800c118:	802c2180 	call	802c218 <__mulsi3>
 800c11c:	e0fffe17 	ldw	r3,-8(fp)
 800c120:	1885883a 	add	r2,r3,r2
 800c124:	10c00017 	ldw	r3,0(r2)
 800c128:	80c00015 	stw	r3,0(r16)
 800c12c:	10c00117 	ldw	r3,4(r2)
 800c130:	80c00115 	stw	r3,4(r16)
 800c134:	10c00217 	ldw	r3,8(r2)
 800c138:	80c00215 	stw	r3,8(r16)
 800c13c:	10c00317 	ldw	r3,12(r2)
 800c140:	80c00315 	stw	r3,12(r16)
 800c144:	10c00417 	ldw	r3,16(r2)
 800c148:	80c00415 	stw	r3,16(r16)
 800c14c:	10c00517 	ldw	r3,20(r2)
 800c150:	80c00515 	stw	r3,20(r16)
 800c154:	10c00617 	ldw	r3,24(r2)
 800c158:	80c00615 	stw	r3,24(r16)
 800c15c:	10c00717 	ldw	r3,28(r2)
 800c160:	80c00715 	stw	r3,28(r16)
 800c164:	10800817 	ldw	r2,32(r2)
 800c168:	80800815 	stw	r2,32(r16)
		if (scanptr[idxout].Ss > cinfo->lim_Se)
 800c16c:	e0bffc17 	ldw	r2,-16(fp)
 800c170:	1009883a 	mov	r4,r2
 800c174:	01400904 	movi	r5,36
 800c178:	802c2180 	call	802c218 <__mulsi3>
 800c17c:	e0fffe17 	ldw	r3,-8(fp)
 800c180:	1885883a 	add	r2,r3,r2
 800c184:	10800517 	ldw	r2,20(r2)
 800c188:	e0ffff17 	ldw	r3,-4(fp)
 800c18c:	18c05b17 	ldw	r3,364(r3)
 800c190:	18801716 	blt	r3,r2,800c1f0 <reduce_script+0x138>
			/* Entire scan out of range - skip this entry */
			continue;
		if (scanptr[idxout].Se > cinfo->lim_Se)
 800c194:	e0bffc17 	ldw	r2,-16(fp)
 800c198:	1009883a 	mov	r4,r2
 800c19c:	01400904 	movi	r5,36
 800c1a0:	802c2180 	call	802c218 <__mulsi3>
 800c1a4:	e0fffe17 	ldw	r3,-8(fp)
 800c1a8:	1885883a 	add	r2,r3,r2
 800c1ac:	10800617 	ldw	r2,24(r2)
 800c1b0:	e0ffff17 	ldw	r3,-4(fp)
 800c1b4:	18c05b17 	ldw	r3,364(r3)
 800c1b8:	1880090e 	bge	r3,r2,800c1e0 <reduce_script+0x128>
			/* Limit scan to end of block */
			scanptr[idxout].Se = cinfo->lim_Se;
 800c1bc:	e0bffc17 	ldw	r2,-16(fp)
 800c1c0:	1009883a 	mov	r4,r2
 800c1c4:	01400904 	movi	r5,36
 800c1c8:	802c2180 	call	802c218 <__mulsi3>
 800c1cc:	e0fffe17 	ldw	r3,-8(fp)
 800c1d0:	1885883a 	add	r2,r3,r2
 800c1d4:	e0ffff17 	ldw	r3,-4(fp)
 800c1d8:	18c05b17 	ldw	r3,364(r3)
 800c1dc:	10c00615 	stw	r3,24(r2)
		idxout++;
 800c1e0:	e0bffc17 	ldw	r2,-16(fp)
 800c1e4:	10800044 	addi	r2,r2,1
 800c1e8:	e0bffc15 	stw	r2,-16(fp)
 800c1ec:	00000106 	br	800c1f4 <reduce_script+0x13c>
			* note we stay in given chunk of allocated memory.
			*/
			scanptr[idxout] = scanptr[idxin];
		if (scanptr[idxout].Ss > cinfo->lim_Se)
			/* Entire scan out of range - skip this entry */
			continue;
 800c1f0:	0001883a 	nop

	/* Circumvent const declaration for this function */
	scanptr = (jpeg_scan_info *) cinfo->scan_info;
	idxout = 0;

	for (idxin = 0; idxin < cinfo->num_scans; idxin++) {
 800c1f4:	e0bffd17 	ldw	r2,-12(fp)
 800c1f8:	10800044 	addi	r2,r2,1
 800c1fc:	e0bffd15 	stw	r2,-12(fp)
 800c200:	e0bfff17 	ldw	r2,-4(fp)
 800c204:	10803117 	ldw	r2,196(r2)
 800c208:	e0fffd17 	ldw	r3,-12(fp)
 800c20c:	18bfb616 	blt	r3,r2,800c0e8 <reduce_script+0x30>
			/* Limit scan to end of block */
			scanptr[idxout].Se = cinfo->lim_Se;
		idxout++;
	}

	cinfo->num_scans = idxout;
 800c210:	e0bfff17 	ldw	r2,-4(fp)
 800c214:	e0fffc17 	ldw	r3,-16(fp)
 800c218:	10c03115 	stw	r3,196(r2)
}
 800c21c:	e037883a 	mov	sp,fp
 800c220:	dfc00217 	ldw	ra,8(sp)
 800c224:	df000117 	ldw	fp,4(sp)
 800c228:	dc000017 	ldw	r16,0(sp)
 800c22c:	dec00304 	addi	sp,sp,12
 800c230:	f800283a 	ret

0800c234 <select_scan_parameters>:


LOCAL(void)
	select_scan_parameters (j_compress_ptr cinfo)
	/* Set up the scan parameters for the current scan */
{
 800c234:	defff904 	addi	sp,sp,-28
 800c238:	dfc00615 	stw	ra,24(sp)
 800c23c:	df000515 	stw	fp,20(sp)
 800c240:	dc000415 	stw	r16,16(sp)
 800c244:	df000404 	addi	fp,sp,16
 800c248:	e13fff15 	stw	r4,-4(fp)
	int ci;

#ifdef C_MULTISCAN_FILES_SUPPORTED
	if (cinfo->scan_info != NULL) {
 800c24c:	e0bfff17 	ldw	r2,-4(fp)
 800c250:	10803217 	ldw	r2,200(r2)
 800c254:	10004226 	beq	r2,zero,800c360 <select_scan_parameters+0x12c>
		/* Prepare for current scan --- the script is already validated */
		my_master_ptr master = (my_master_ptr) cinfo->master;
 800c258:	e0bfff17 	ldw	r2,-4(fp)
 800c25c:	10805c17 	ldw	r2,368(r2)
 800c260:	e0bffd15 	stw	r2,-12(fp)
		const jpeg_scan_info * scanptr = cinfo->scan_info + master->scan_number;
 800c264:	e0bfff17 	ldw	r2,-4(fp)
 800c268:	14003217 	ldw	r16,200(r2)
 800c26c:	e0bffd17 	ldw	r2,-12(fp)
 800c270:	10800717 	ldw	r2,28(r2)
 800c274:	1009883a 	mov	r4,r2
 800c278:	01400904 	movi	r5,36
 800c27c:	802c2180 	call	802c218 <__mulsi3>
 800c280:	8085883a 	add	r2,r16,r2
 800c284:	e0bffe15 	stw	r2,-8(fp)

		cinfo->comps_in_scan = scanptr->comps_in_scan;
 800c288:	e0bffe17 	ldw	r2,-8(fp)
 800c28c:	10c00017 	ldw	r3,0(r2)
 800c290:	e0bfff17 	ldw	r2,-4(fp)
 800c294:	10c04315 	stw	r3,268(r2)
		for (ci = 0; ci < scanptr->comps_in_scan; ci++) {
 800c298:	e03ffc15 	stw	zero,-16(fp)
 800c29c:	00001706 	br	800c2fc <select_scan_parameters+0xc8>
			cinfo->cur_comp_info[ci] =
				&cinfo->comp_info[scanptr->component_index[ci]];
 800c2a0:	e0bfff17 	ldw	r2,-4(fp)
 800c2a4:	14001417 	ldw	r16,80(r2)
 800c2a8:	e0fffe17 	ldw	r3,-8(fp)
 800c2ac:	e0bffc17 	ldw	r2,-16(fp)
 800c2b0:	10800044 	addi	r2,r2,1
 800c2b4:	1085883a 	add	r2,r2,r2
 800c2b8:	1085883a 	add	r2,r2,r2
 800c2bc:	1885883a 	add	r2,r3,r2
 800c2c0:	10800017 	ldw	r2,0(r2)
 800c2c4:	1009883a 	mov	r4,r2
 800c2c8:	01401604 	movi	r5,88
 800c2cc:	802c2180 	call	802c218 <__mulsi3>
 800c2d0:	8087883a 	add	r3,r16,r2
		my_master_ptr master = (my_master_ptr) cinfo->master;
		const jpeg_scan_info * scanptr = cinfo->scan_info + master->scan_number;

		cinfo->comps_in_scan = scanptr->comps_in_scan;
		for (ci = 0; ci < scanptr->comps_in_scan; ci++) {
			cinfo->cur_comp_info[ci] =
 800c2d4:	e13fff17 	ldw	r4,-4(fp)
 800c2d8:	e0bffc17 	ldw	r2,-16(fp)
 800c2dc:	10801104 	addi	r2,r2,68
 800c2e0:	1085883a 	add	r2,r2,r2
 800c2e4:	1085883a 	add	r2,r2,r2
 800c2e8:	2085883a 	add	r2,r4,r2
 800c2ec:	10c00015 	stw	r3,0(r2)
		/* Prepare for current scan --- the script is already validated */
		my_master_ptr master = (my_master_ptr) cinfo->master;
		const jpeg_scan_info * scanptr = cinfo->scan_info + master->scan_number;

		cinfo->comps_in_scan = scanptr->comps_in_scan;
		for (ci = 0; ci < scanptr->comps_in_scan; ci++) {
 800c2f0:	e0bffc17 	ldw	r2,-16(fp)
 800c2f4:	10800044 	addi	r2,r2,1
 800c2f8:	e0bffc15 	stw	r2,-16(fp)
 800c2fc:	e0bffe17 	ldw	r2,-8(fp)
 800c300:	10800017 	ldw	r2,0(r2)
 800c304:	e0fffc17 	ldw	r3,-16(fp)
 800c308:	18bfe516 	blt	r3,r2,800c2a0 <select_scan_parameters+0x6c>
			cinfo->cur_comp_info[ci] =
				&cinfo->comp_info[scanptr->component_index[ci]];
		}
		if (cinfo->progressive_mode) {
 800c30c:	e0bfff17 	ldw	r2,-4(fp)
 800c310:	10803d03 	ldbu	r2,244(r2)
 800c314:	10803fcc 	andi	r2,r2,255
 800c318:	10004226 	beq	r2,zero,800c424 <select_scan_parameters+0x1f0>
			cinfo->Ss = scanptr->Ss;
 800c31c:	e0bffe17 	ldw	r2,-8(fp)
 800c320:	10c00517 	ldw	r3,20(r2)
 800c324:	e0bfff17 	ldw	r2,-4(fp)
 800c328:	10c05515 	stw	r3,340(r2)
			cinfo->Se = scanptr->Se;
 800c32c:	e0bffe17 	ldw	r2,-8(fp)
 800c330:	10c00617 	ldw	r3,24(r2)
 800c334:	e0bfff17 	ldw	r2,-4(fp)
 800c338:	10c05615 	stw	r3,344(r2)
			cinfo->Ah = scanptr->Ah;
 800c33c:	e0bffe17 	ldw	r2,-8(fp)
 800c340:	10c00717 	ldw	r3,28(r2)
 800c344:	e0bfff17 	ldw	r2,-4(fp)
 800c348:	10c05715 	stw	r3,348(r2)
			cinfo->Al = scanptr->Al;
 800c34c:	e0bffe17 	ldw	r2,-8(fp)
 800c350:	10c00817 	ldw	r3,32(r2)
 800c354:	e0bfff17 	ldw	r2,-4(fp)
 800c358:	10c05815 	stw	r3,352(r2)
			return;
 800c35c:	00004106 	br	800c464 <select_scan_parameters+0x230>
	}
	else
#endif
	{
		/* Prepare for single sequential-JPEG scan containing all components */
		if (cinfo->num_components > MAX_COMPS_IN_SCAN)
 800c360:	e0bfff17 	ldw	r2,-4(fp)
 800c364:	10801217 	ldw	r2,72(r2)
 800c368:	10800150 	cmplti	r2,r2,5
 800c36c:	1000121e 	bne	r2,zero,800c3b8 <select_scan_parameters+0x184>
			ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
 800c370:	e0bfff17 	ldw	r2,-4(fp)
 800c374:	10800017 	ldw	r2,0(r2)
 800c378:	00c006c4 	movi	r3,27
 800c37c:	10c00515 	stw	r3,20(r2)
 800c380:	e0bfff17 	ldw	r2,-4(fp)
 800c384:	10800017 	ldw	r2,0(r2)
 800c388:	e0ffff17 	ldw	r3,-4(fp)
 800c38c:	18c01217 	ldw	r3,72(r3)
 800c390:	10c00615 	stw	r3,24(r2)
 800c394:	e0bfff17 	ldw	r2,-4(fp)
 800c398:	10800017 	ldw	r2,0(r2)
 800c39c:	00c00104 	movi	r3,4
 800c3a0:	10c00715 	stw	r3,28(r2)
 800c3a4:	e0bfff17 	ldw	r2,-4(fp)
 800c3a8:	10800017 	ldw	r2,0(r2)
 800c3ac:	10800017 	ldw	r2,0(r2)
 800c3b0:	e13fff17 	ldw	r4,-4(fp)
 800c3b4:	103ee83a 	callr	r2
			MAX_COMPS_IN_SCAN);
		cinfo->comps_in_scan = cinfo->num_components;
 800c3b8:	e0bfff17 	ldw	r2,-4(fp)
 800c3bc:	10c01217 	ldw	r3,72(r2)
 800c3c0:	e0bfff17 	ldw	r2,-4(fp)
 800c3c4:	10c04315 	stw	r3,268(r2)
		for (ci = 0; ci < cinfo->num_components; ci++) {
 800c3c8:	e03ffc15 	stw	zero,-16(fp)
 800c3cc:	00001106 	br	800c414 <select_scan_parameters+0x1e0>
			cinfo->cur_comp_info[ci] = &cinfo->comp_info[ci];
 800c3d0:	e0bfff17 	ldw	r2,-4(fp)
 800c3d4:	14001417 	ldw	r16,80(r2)
 800c3d8:	e0bffc17 	ldw	r2,-16(fp)
 800c3dc:	1009883a 	mov	r4,r2
 800c3e0:	01401604 	movi	r5,88
 800c3e4:	802c2180 	call	802c218 <__mulsi3>
 800c3e8:	8087883a 	add	r3,r16,r2
 800c3ec:	e13fff17 	ldw	r4,-4(fp)
 800c3f0:	e0bffc17 	ldw	r2,-16(fp)
 800c3f4:	10801104 	addi	r2,r2,68
 800c3f8:	1085883a 	add	r2,r2,r2
 800c3fc:	1085883a 	add	r2,r2,r2
 800c400:	2085883a 	add	r2,r4,r2
 800c404:	10c00015 	stw	r3,0(r2)
		/* Prepare for single sequential-JPEG scan containing all components */
		if (cinfo->num_components > MAX_COMPS_IN_SCAN)
			ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
			MAX_COMPS_IN_SCAN);
		cinfo->comps_in_scan = cinfo->num_components;
		for (ci = 0; ci < cinfo->num_components; ci++) {
 800c408:	e0bffc17 	ldw	r2,-16(fp)
 800c40c:	10800044 	addi	r2,r2,1
 800c410:	e0bffc15 	stw	r2,-16(fp)
 800c414:	e0bfff17 	ldw	r2,-4(fp)
 800c418:	10801217 	ldw	r2,72(r2)
 800c41c:	e0fffc17 	ldw	r3,-16(fp)
 800c420:	18bfeb16 	blt	r3,r2,800c3d0 <select_scan_parameters+0x19c>
			cinfo->cur_comp_info[ci] = &cinfo->comp_info[ci];
		}
	}
	cinfo->Ss = 0;
 800c424:	e0bfff17 	ldw	r2,-4(fp)
 800c428:	10005515 	stw	zero,340(r2)
	cinfo->Se = cinfo->block_size * cinfo->block_size - 1;
 800c42c:	e0bfff17 	ldw	r2,-4(fp)
 800c430:	10c05917 	ldw	r3,356(r2)
 800c434:	e0bfff17 	ldw	r2,-4(fp)
 800c438:	10805917 	ldw	r2,356(r2)
 800c43c:	1809883a 	mov	r4,r3
 800c440:	100b883a 	mov	r5,r2
 800c444:	802c2180 	call	802c218 <__mulsi3>
 800c448:	10ffffc4 	addi	r3,r2,-1
 800c44c:	e0bfff17 	ldw	r2,-4(fp)
 800c450:	10c05615 	stw	r3,344(r2)
	cinfo->Ah = 0;
 800c454:	e0bfff17 	ldw	r2,-4(fp)
 800c458:	10005715 	stw	zero,348(r2)
	cinfo->Al = 0;
 800c45c:	e0bfff17 	ldw	r2,-4(fp)
 800c460:	10005815 	stw	zero,352(r2)
}
 800c464:	e037883a 	mov	sp,fp
 800c468:	dfc00217 	ldw	ra,8(sp)
 800c46c:	df000117 	ldw	fp,4(sp)
 800c470:	dc000017 	ldw	r16,0(sp)
 800c474:	dec00304 	addi	sp,sp,12
 800c478:	f800283a 	ret

0800c47c <per_scan_setup>:

LOCAL(void)
	per_scan_setup (j_compress_ptr cinfo)
	/* Do computations that are needed before processing a JPEG scan */
	/* cinfo->comps_in_scan and cinfo->cur_comp_info[] are already set */
{
 800c47c:	defff704 	addi	sp,sp,-36
 800c480:	dfc00815 	stw	ra,32(sp)
 800c484:	df000715 	stw	fp,28(sp)
 800c488:	dc000615 	stw	r16,24(sp)
 800c48c:	df000604 	addi	fp,sp,24
 800c490:	e13fff15 	stw	r4,-4(fp)
	int ci, mcublks, tmp;
	jpeg_component_info *compptr;

	if (cinfo->comps_in_scan == 1) {
 800c494:	e0bfff17 	ldw	r2,-4(fp)
 800c498:	10804317 	ldw	r2,268(r2)
 800c49c:	10800058 	cmpnei	r2,r2,1
 800c4a0:	1000311e 	bne	r2,zero,800c568 <per_scan_setup+0xec>

		/* Noninterleaved (single-component) scan */
		compptr = cinfo->cur_comp_info[0];
 800c4a4:	e0bfff17 	ldw	r2,-4(fp)
 800c4a8:	10804417 	ldw	r2,272(r2)
 800c4ac:	e0bffd15 	stw	r2,-12(fp)

		/* Overall image size in MCUs */
		cinfo->MCUs_per_row = compptr->width_in_blocks;
 800c4b0:	e0bffd17 	ldw	r2,-12(fp)
 800c4b4:	10c00717 	ldw	r3,28(r2)
 800c4b8:	e0bfff17 	ldw	r2,-4(fp)
 800c4bc:	10c04815 	stw	r3,288(r2)
		cinfo->MCU_rows_in_scan = compptr->height_in_blocks;
 800c4c0:	e0bffd17 	ldw	r2,-12(fp)
 800c4c4:	10c00817 	ldw	r3,32(r2)
 800c4c8:	e0bfff17 	ldw	r2,-4(fp)
 800c4cc:	10c04915 	stw	r3,292(r2)

		/* For noninterleaved scan, always one block per MCU */
		compptr->MCU_width = 1;
 800c4d0:	e0bffd17 	ldw	r2,-12(fp)
 800c4d4:	00c00044 	movi	r3,1
 800c4d8:	10c00e15 	stw	r3,56(r2)
		compptr->MCU_height = 1;
 800c4dc:	e0bffd17 	ldw	r2,-12(fp)
 800c4e0:	00c00044 	movi	r3,1
 800c4e4:	10c00f15 	stw	r3,60(r2)
		compptr->MCU_blocks = 1;
 800c4e8:	e0bffd17 	ldw	r2,-12(fp)
 800c4ec:	00c00044 	movi	r3,1
 800c4f0:	10c01015 	stw	r3,64(r2)
		compptr->MCU_sample_width = compptr->DCT_h_scaled_size;
 800c4f4:	e0bffd17 	ldw	r2,-12(fp)
 800c4f8:	10c00917 	ldw	r3,36(r2)
 800c4fc:	e0bffd17 	ldw	r2,-12(fp)
 800c500:	10c01115 	stw	r3,68(r2)
		compptr->last_col_width = 1;
 800c504:	e0bffd17 	ldw	r2,-12(fp)
 800c508:	00c00044 	movi	r3,1
 800c50c:	10c01215 	stw	r3,72(r2)
		/* For noninterleaved scans, it is convenient to define last_row_height
		* as the number of block rows present in the last iMCU row.
		*/
		tmp = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 800c510:	e0bffd17 	ldw	r2,-12(fp)
 800c514:	10c00817 	ldw	r3,32(r2)
 800c518:	e0bffd17 	ldw	r2,-12(fp)
 800c51c:	10800317 	ldw	r2,12(r2)
 800c520:	1809883a 	mov	r4,r3
 800c524:	100b883a 	mov	r5,r2
 800c528:	802c2100 	call	802c210 <__umodsi3>
 800c52c:	e0bffc15 	stw	r2,-16(fp)
		if (tmp == 0) tmp = compptr->v_samp_factor;
 800c530:	e0bffc17 	ldw	r2,-16(fp)
 800c534:	1000031e 	bne	r2,zero,800c544 <per_scan_setup+0xc8>
 800c538:	e0bffd17 	ldw	r2,-12(fp)
 800c53c:	10800317 	ldw	r2,12(r2)
 800c540:	e0bffc15 	stw	r2,-16(fp)
		compptr->last_row_height = tmp;
 800c544:	e0bffd17 	ldw	r2,-12(fp)
 800c548:	e0fffc17 	ldw	r3,-16(fp)
 800c54c:	10c01315 	stw	r3,76(r2)

		/* Prepare array describing MCU composition */
		cinfo->blocks_in_MCU = 1;
 800c550:	e0bfff17 	ldw	r2,-4(fp)
 800c554:	00c00044 	movi	r3,1
 800c558:	10c04a15 	stw	r3,296(r2)
		cinfo->MCU_membership[0] = 0;
 800c55c:	e0bfff17 	ldw	r2,-4(fp)
 800c560:	10004b15 	stw	zero,300(r2)
 800c564:	0000b006 	br	800c828 <per_scan_setup+0x3ac>

	} else {

		/* Interleaved (multi-component) scan */
		if (cinfo->comps_in_scan <= 0 || cinfo->comps_in_scan > MAX_COMPS_IN_SCAN)
 800c568:	e0bfff17 	ldw	r2,-4(fp)
 800c56c:	10804317 	ldw	r2,268(r2)
 800c570:	0080040e 	bge	zero,r2,800c584 <per_scan_setup+0x108>
 800c574:	e0bfff17 	ldw	r2,-4(fp)
 800c578:	10804317 	ldw	r2,268(r2)
 800c57c:	10800150 	cmplti	r2,r2,5
 800c580:	1000121e 	bne	r2,zero,800c5cc <per_scan_setup+0x150>
			ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->comps_in_scan,
 800c584:	e0bfff17 	ldw	r2,-4(fp)
 800c588:	10800017 	ldw	r2,0(r2)
 800c58c:	00c006c4 	movi	r3,27
 800c590:	10c00515 	stw	r3,20(r2)
 800c594:	e0bfff17 	ldw	r2,-4(fp)
 800c598:	10800017 	ldw	r2,0(r2)
 800c59c:	e0ffff17 	ldw	r3,-4(fp)
 800c5a0:	18c04317 	ldw	r3,268(r3)
 800c5a4:	10c00615 	stw	r3,24(r2)
 800c5a8:	e0bfff17 	ldw	r2,-4(fp)
 800c5ac:	10800017 	ldw	r2,0(r2)
 800c5b0:	00c00104 	movi	r3,4
 800c5b4:	10c00715 	stw	r3,28(r2)
 800c5b8:	e0bfff17 	ldw	r2,-4(fp)
 800c5bc:	10800017 	ldw	r2,0(r2)
 800c5c0:	10800017 	ldw	r2,0(r2)
 800c5c4:	e13fff17 	ldw	r4,-4(fp)
 800c5c8:	103ee83a 	callr	r2
			MAX_COMPS_IN_SCAN);

		/* Overall image size in MCUs */
		cinfo->MCUs_per_row = (JDIMENSION)
			jdiv_round_up((long) cinfo->jpeg_width,
 800c5cc:	e0bfff17 	ldw	r2,-4(fp)
 800c5d0:	10800f17 	ldw	r2,60(r2)
 800c5d4:	1021883a 	mov	r16,r2
			(long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800c5d8:	e0bfff17 	ldw	r2,-4(fp)
 800c5dc:	10c03e17 	ldw	r3,248(r2)
 800c5e0:	e0bfff17 	ldw	r2,-4(fp)
 800c5e4:	10805917 	ldw	r2,356(r2)
 800c5e8:	1809883a 	mov	r4,r3
 800c5ec:	100b883a 	mov	r5,r2
 800c5f0:	802c2180 	call	802c218 <__mulsi3>
			ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->comps_in_scan,
			MAX_COMPS_IN_SCAN);

		/* Overall image size in MCUs */
		cinfo->MCUs_per_row = (JDIMENSION)
			jdiv_round_up((long) cinfo->jpeg_width,
 800c5f4:	8009883a 	mov	r4,r16
 800c5f8:	100b883a 	mov	r5,r2
 800c5fc:	802b0840 	call	802b084 <jdiv_round_up>
		if (cinfo->comps_in_scan <= 0 || cinfo->comps_in_scan > MAX_COMPS_IN_SCAN)
			ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->comps_in_scan,
			MAX_COMPS_IN_SCAN);

		/* Overall image size in MCUs */
		cinfo->MCUs_per_row = (JDIMENSION)
 800c600:	1007883a 	mov	r3,r2
 800c604:	e0bfff17 	ldw	r2,-4(fp)
 800c608:	10c04815 	stw	r3,288(r2)
			jdiv_round_up((long) cinfo->jpeg_width,
			(long) (cinfo->max_h_samp_factor * cinfo->block_size));
		cinfo->MCU_rows_in_scan = (JDIMENSION)
			jdiv_round_up((long) cinfo->jpeg_height,
 800c60c:	e0bfff17 	ldw	r2,-4(fp)
 800c610:	10801017 	ldw	r2,64(r2)
 800c614:	1021883a 	mov	r16,r2
			(long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800c618:	e0bfff17 	ldw	r2,-4(fp)
 800c61c:	10c03f17 	ldw	r3,252(r2)
 800c620:	e0bfff17 	ldw	r2,-4(fp)
 800c624:	10805917 	ldw	r2,356(r2)
 800c628:	1809883a 	mov	r4,r3
 800c62c:	100b883a 	mov	r5,r2
 800c630:	802c2180 	call	802c218 <__mulsi3>
		/* Overall image size in MCUs */
		cinfo->MCUs_per_row = (JDIMENSION)
			jdiv_round_up((long) cinfo->jpeg_width,
			(long) (cinfo->max_h_samp_factor * cinfo->block_size));
		cinfo->MCU_rows_in_scan = (JDIMENSION)
			jdiv_round_up((long) cinfo->jpeg_height,
 800c634:	8009883a 	mov	r4,r16
 800c638:	100b883a 	mov	r5,r2
 800c63c:	802b0840 	call	802b084 <jdiv_round_up>

		/* Overall image size in MCUs */
		cinfo->MCUs_per_row = (JDIMENSION)
			jdiv_round_up((long) cinfo->jpeg_width,
			(long) (cinfo->max_h_samp_factor * cinfo->block_size));
		cinfo->MCU_rows_in_scan = (JDIMENSION)
 800c640:	1007883a 	mov	r3,r2
 800c644:	e0bfff17 	ldw	r2,-4(fp)
 800c648:	10c04915 	stw	r3,292(r2)
			jdiv_round_up((long) cinfo->jpeg_height,
			(long) (cinfo->max_v_samp_factor * cinfo->block_size));

		cinfo->blocks_in_MCU = 0;
 800c64c:	e0bfff17 	ldw	r2,-4(fp)
 800c650:	10004a15 	stw	zero,296(r2)

		for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c654:	e03ffa15 	stw	zero,-24(fp)
 800c658:	00006f06 	br	800c818 <per_scan_setup+0x39c>
			compptr = cinfo->cur_comp_info[ci];
 800c65c:	e0ffff17 	ldw	r3,-4(fp)
 800c660:	e0bffa17 	ldw	r2,-24(fp)
 800c664:	10801104 	addi	r2,r2,68
 800c668:	1085883a 	add	r2,r2,r2
 800c66c:	1085883a 	add	r2,r2,r2
 800c670:	1885883a 	add	r2,r3,r2
 800c674:	10800017 	ldw	r2,0(r2)
 800c678:	e0bffd15 	stw	r2,-12(fp)
			/* Sampling factors give # of blocks of component in each MCU */
			compptr->MCU_width = compptr->h_samp_factor;
 800c67c:	e0bffd17 	ldw	r2,-12(fp)
 800c680:	10c00217 	ldw	r3,8(r2)
 800c684:	e0bffd17 	ldw	r2,-12(fp)
 800c688:	10c00e15 	stw	r3,56(r2)
			compptr->MCU_height = compptr->v_samp_factor;
 800c68c:	e0bffd17 	ldw	r2,-12(fp)
 800c690:	10c00317 	ldw	r3,12(r2)
 800c694:	e0bffd17 	ldw	r2,-12(fp)
 800c698:	10c00f15 	stw	r3,60(r2)
			compptr->MCU_blocks = compptr->MCU_width * compptr->MCU_height;
 800c69c:	e0bffd17 	ldw	r2,-12(fp)
 800c6a0:	10c00e17 	ldw	r3,56(r2)
 800c6a4:	e0bffd17 	ldw	r2,-12(fp)
 800c6a8:	10800f17 	ldw	r2,60(r2)
 800c6ac:	1809883a 	mov	r4,r3
 800c6b0:	100b883a 	mov	r5,r2
 800c6b4:	802c2180 	call	802c218 <__mulsi3>
 800c6b8:	1007883a 	mov	r3,r2
 800c6bc:	e0bffd17 	ldw	r2,-12(fp)
 800c6c0:	10c01015 	stw	r3,64(r2)
			compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
 800c6c4:	e0bffd17 	ldw	r2,-12(fp)
 800c6c8:	10c00e17 	ldw	r3,56(r2)
 800c6cc:	e0bffd17 	ldw	r2,-12(fp)
 800c6d0:	10800917 	ldw	r2,36(r2)
 800c6d4:	1809883a 	mov	r4,r3
 800c6d8:	100b883a 	mov	r5,r2
 800c6dc:	802c2180 	call	802c218 <__mulsi3>
 800c6e0:	1007883a 	mov	r3,r2
 800c6e4:	e0bffd17 	ldw	r2,-12(fp)
 800c6e8:	10c01115 	stw	r3,68(r2)
			/* Figure number of non-dummy blocks in last MCU column & row */
			tmp = (int) (compptr->width_in_blocks % compptr->MCU_width);
 800c6ec:	e0bffd17 	ldw	r2,-12(fp)
 800c6f0:	10c00717 	ldw	r3,28(r2)
 800c6f4:	e0bffd17 	ldw	r2,-12(fp)
 800c6f8:	10800e17 	ldw	r2,56(r2)
 800c6fc:	1809883a 	mov	r4,r3
 800c700:	100b883a 	mov	r5,r2
 800c704:	802c2100 	call	802c210 <__umodsi3>
 800c708:	e0bffc15 	stw	r2,-16(fp)
			if (tmp == 0) tmp = compptr->MCU_width;
 800c70c:	e0bffc17 	ldw	r2,-16(fp)
 800c710:	1000031e 	bne	r2,zero,800c720 <per_scan_setup+0x2a4>
 800c714:	e0bffd17 	ldw	r2,-12(fp)
 800c718:	10800e17 	ldw	r2,56(r2)
 800c71c:	e0bffc15 	stw	r2,-16(fp)
			compptr->last_col_width = tmp;
 800c720:	e0bffd17 	ldw	r2,-12(fp)
 800c724:	e0fffc17 	ldw	r3,-16(fp)
 800c728:	10c01215 	stw	r3,72(r2)
			tmp = (int) (compptr->height_in_blocks % compptr->MCU_height);
 800c72c:	e0bffd17 	ldw	r2,-12(fp)
 800c730:	10c00817 	ldw	r3,32(r2)
 800c734:	e0bffd17 	ldw	r2,-12(fp)
 800c738:	10800f17 	ldw	r2,60(r2)
 800c73c:	1809883a 	mov	r4,r3
 800c740:	100b883a 	mov	r5,r2
 800c744:	802c2100 	call	802c210 <__umodsi3>
 800c748:	e0bffc15 	stw	r2,-16(fp)
			if (tmp == 0) tmp = compptr->MCU_height;
 800c74c:	e0bffc17 	ldw	r2,-16(fp)
 800c750:	1000031e 	bne	r2,zero,800c760 <per_scan_setup+0x2e4>
 800c754:	e0bffd17 	ldw	r2,-12(fp)
 800c758:	10800f17 	ldw	r2,60(r2)
 800c75c:	e0bffc15 	stw	r2,-16(fp)
			compptr->last_row_height = tmp;
 800c760:	e0bffd17 	ldw	r2,-12(fp)
 800c764:	e0fffc17 	ldw	r3,-16(fp)
 800c768:	10c01315 	stw	r3,76(r2)
			/* Prepare array describing MCU composition */
			mcublks = compptr->MCU_blocks;
 800c76c:	e0bffd17 	ldw	r2,-12(fp)
 800c770:	10801017 	ldw	r2,64(r2)
 800c774:	e0bffb15 	stw	r2,-20(fp)
			if (cinfo->blocks_in_MCU + mcublks > C_MAX_BLOCKS_IN_MCU)
 800c778:	e0bfff17 	ldw	r2,-4(fp)
 800c77c:	10c04a17 	ldw	r3,296(r2)
 800c780:	e0bffb17 	ldw	r2,-20(fp)
 800c784:	1885883a 	add	r2,r3,r2
 800c788:	108002d0 	cmplti	r2,r2,11
 800c78c:	1000171e 	bne	r2,zero,800c7ec <per_scan_setup+0x370>
				ERREXIT(cinfo, JERR_BAD_MCU_SIZE);
 800c790:	e0bfff17 	ldw	r2,-4(fp)
 800c794:	10800017 	ldw	r2,0(r2)
 800c798:	00c00384 	movi	r3,14
 800c79c:	10c00515 	stw	r3,20(r2)
 800c7a0:	e0bfff17 	ldw	r2,-4(fp)
 800c7a4:	10800017 	ldw	r2,0(r2)
 800c7a8:	10800017 	ldw	r2,0(r2)
 800c7ac:	e13fff17 	ldw	r4,-4(fp)
 800c7b0:	103ee83a 	callr	r2
			while (mcublks-- > 0) {
 800c7b4:	00000d06 	br	800c7ec <per_scan_setup+0x370>
				cinfo->MCU_membership[cinfo->blocks_in_MCU++] = ci;
 800c7b8:	e0bfff17 	ldw	r2,-4(fp)
 800c7bc:	10804a17 	ldw	r2,296(r2)
 800c7c0:	e13fff17 	ldw	r4,-4(fp)
 800c7c4:	10c012c4 	addi	r3,r2,75
 800c7c8:	18c7883a 	add	r3,r3,r3
 800c7cc:	18c7883a 	add	r3,r3,r3
 800c7d0:	20c7883a 	add	r3,r4,r3
 800c7d4:	e13ffa17 	ldw	r4,-24(fp)
 800c7d8:	19000015 	stw	r4,0(r3)
 800c7dc:	10c00044 	addi	r3,r2,1
 800c7e0:	e0bfff17 	ldw	r2,-4(fp)
 800c7e4:	10c04a15 	stw	r3,296(r2)
 800c7e8:	00000106 	br	800c7f0 <per_scan_setup+0x374>
			compptr->last_row_height = tmp;
			/* Prepare array describing MCU composition */
			mcublks = compptr->MCU_blocks;
			if (cinfo->blocks_in_MCU + mcublks > C_MAX_BLOCKS_IN_MCU)
				ERREXIT(cinfo, JERR_BAD_MCU_SIZE);
			while (mcublks-- > 0) {
 800c7ec:	0001883a 	nop
 800c7f0:	e0bffb17 	ldw	r2,-20(fp)
 800c7f4:	0084803a 	cmplt	r2,zero,r2
 800c7f8:	e0fffb17 	ldw	r3,-20(fp)
 800c7fc:	18ffffc4 	addi	r3,r3,-1
 800c800:	e0fffb15 	stw	r3,-20(fp)
 800c804:	10803fcc 	andi	r2,r2,255
 800c808:	103feb1e 	bne	r2,zero,800c7b8 <per_scan_setup+0x33c>
			jdiv_round_up((long) cinfo->jpeg_height,
			(long) (cinfo->max_v_samp_factor * cinfo->block_size));

		cinfo->blocks_in_MCU = 0;

		for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c80c:	e0bffa17 	ldw	r2,-24(fp)
 800c810:	10800044 	addi	r2,r2,1
 800c814:	e0bffa15 	stw	r2,-24(fp)
 800c818:	e0bfff17 	ldw	r2,-4(fp)
 800c81c:	10804317 	ldw	r2,268(r2)
 800c820:	e0fffa17 	ldw	r3,-24(fp)
 800c824:	18bf8d16 	blt	r3,r2,800c65c <per_scan_setup+0x1e0>

	}

	/* Convert restart specified in rows to actual MCU count. */
	/* Note that count must fit in 16 bits, so we provide limiting. */
	if (cinfo->restart_in_rows > 0) {
 800c828:	e0bfff17 	ldw	r2,-4(fp)
 800c82c:	10803817 	ldw	r2,224(r2)
 800c830:	00800f0e 	bge	zero,r2,800c870 <per_scan_setup+0x3f4>
		long nominal = (long) cinfo->restart_in_rows * (long) cinfo->MCUs_per_row;
 800c834:	e0bfff17 	ldw	r2,-4(fp)
 800c838:	10c03817 	ldw	r3,224(r2)
 800c83c:	e0bfff17 	ldw	r2,-4(fp)
 800c840:	10804817 	ldw	r2,288(r2)
 800c844:	1809883a 	mov	r4,r3
 800c848:	100b883a 	mov	r5,r2
 800c84c:	802c2180 	call	802c218 <__mulsi3>
 800c850:	e0bffe15 	stw	r2,-8(fp)
		cinfo->restart_interval = (unsigned int) MIN(nominal, 65535L);
 800c854:	e0bffe17 	ldw	r2,-8(fp)
 800c858:	00ffffd4 	movui	r3,65535
 800c85c:	1880010e 	bge	r3,r2,800c864 <per_scan_setup+0x3e8>
 800c860:	00bfffd4 	movui	r2,65535
 800c864:	1007883a 	mov	r3,r2
 800c868:	e0bfff17 	ldw	r2,-4(fp)
 800c86c:	10c03715 	stw	r3,220(r2)
	}
}
 800c870:	e037883a 	mov	sp,fp
 800c874:	dfc00217 	ldw	ra,8(sp)
 800c878:	df000117 	ldw	fp,4(sp)
 800c87c:	dc000017 	ldw	r16,0(sp)
 800c880:	dec00304 	addi	sp,sp,12
 800c884:	f800283a 	ret

0800c888 <prepare_for_pass>:
* required.
*/

METHODDEF(void)
	prepare_for_pass (j_compress_ptr cinfo)
{
 800c888:	defffc04 	addi	sp,sp,-16
 800c88c:	dfc00315 	stw	ra,12(sp)
 800c890:	df000215 	stw	fp,8(sp)
 800c894:	df000204 	addi	fp,sp,8
 800c898:	e13fff15 	stw	r4,-4(fp)
	my_master_ptr master = (my_master_ptr) cinfo->master;
 800c89c:	e0bfff17 	ldw	r2,-4(fp)
 800c8a0:	10805c17 	ldw	r2,368(r2)
 800c8a4:	e0bffe15 	stw	r2,-8(fp)

	switch (master->pass_type) {
 800c8a8:	e0bffe17 	ldw	r2,-8(fp)
 800c8ac:	10800417 	ldw	r2,16(r2)
 800c8b0:	10c00060 	cmpeqi	r3,r2,1
 800c8b4:	1800481e 	bne	r3,zero,800c9d8 <prepare_for_pass+0x150>
 800c8b8:	0080032e 	bgeu	zero,r2,800c8c8 <prepare_for_pass+0x40>
 800c8bc:	108000a0 	cmpeqi	r2,r2,2
 800c8c0:	1000661e 	bne	r2,zero,800ca5c <prepare_for_pass+0x1d4>
 800c8c4:	00008906 	br	800caec <prepare_for_pass+0x264>
	case main_pass:
		/* Initial pass: will collect input data, and do either Huffman
		* optimization or data output for the first scan.
		*/
		select_scan_parameters(cinfo);
 800c8c8:	e13fff17 	ldw	r4,-4(fp)
 800c8cc:	800c2340 	call	800c234 <select_scan_parameters>
		per_scan_setup(cinfo);
 800c8d0:	e13fff17 	ldw	r4,-4(fp)
 800c8d4:	800c47c0 	call	800c47c <per_scan_setup>
		if (! cinfo->raw_data_in) {
 800c8d8:	e0bfff17 	ldw	r2,-4(fp)
 800c8dc:	10803303 	ldbu	r2,204(r2)
 800c8e0:	10803fcc 	andi	r2,r2,255
 800c8e4:	1000101e 	bne	r2,zero,800c928 <prepare_for_pass+0xa0>
			(*cinfo->cconvert->start_pass) (cinfo);
 800c8e8:	e0bfff17 	ldw	r2,-4(fp)
 800c8ec:	10806117 	ldw	r2,388(r2)
 800c8f0:	10800017 	ldw	r2,0(r2)
 800c8f4:	e13fff17 	ldw	r4,-4(fp)
 800c8f8:	103ee83a 	callr	r2
			(*cinfo->downsample->start_pass) (cinfo);
 800c8fc:	e0bfff17 	ldw	r2,-4(fp)
 800c900:	10806217 	ldw	r2,392(r2)
 800c904:	10800017 	ldw	r2,0(r2)
 800c908:	e13fff17 	ldw	r4,-4(fp)
 800c90c:	103ee83a 	callr	r2
			(*cinfo->prep->start_pass) (cinfo, JBUF_PASS_THRU);
 800c910:	e0bfff17 	ldw	r2,-4(fp)
 800c914:	10805e17 	ldw	r2,376(r2)
 800c918:	10800017 	ldw	r2,0(r2)
 800c91c:	e13fff17 	ldw	r4,-4(fp)
 800c920:	000b883a 	mov	r5,zero
 800c924:	103ee83a 	callr	r2
		}
		(*cinfo->fdct->start_pass) (cinfo);
 800c928:	e0bfff17 	ldw	r2,-4(fp)
 800c92c:	10806317 	ldw	r2,396(r2)
 800c930:	10800017 	ldw	r2,0(r2)
 800c934:	e13fff17 	ldw	r4,-4(fp)
 800c938:	103ee83a 	callr	r2
		(*cinfo->entropy->start_pass) (cinfo, cinfo->optimize_coding);
 800c93c:	e0bfff17 	ldw	r2,-4(fp)
 800c940:	10806417 	ldw	r2,400(r2)
 800c944:	10c00017 	ldw	r3,0(r2)
 800c948:	e0bfff17 	ldw	r2,-4(fp)
 800c94c:	10803383 	ldbu	r2,206(r2)
 800c950:	10803fcc 	andi	r2,r2,255
 800c954:	e13fff17 	ldw	r4,-4(fp)
 800c958:	100b883a 	mov	r5,r2
 800c95c:	183ee83a 	callr	r3
		(*cinfo->coef->start_pass) (cinfo,
 800c960:	e0bfff17 	ldw	r2,-4(fp)
 800c964:	10805f17 	ldw	r2,380(r2)
 800c968:	10c00017 	ldw	r3,0(r2)
			(master->total_passes > 1 ?
 800c96c:	e0bffe17 	ldw	r2,-8(fp)
 800c970:	10800617 	ldw	r2,24(r2)
			(*cinfo->downsample->start_pass) (cinfo);
			(*cinfo->prep->start_pass) (cinfo, JBUF_PASS_THRU);
		}
		(*cinfo->fdct->start_pass) (cinfo);
		(*cinfo->entropy->start_pass) (cinfo, cinfo->optimize_coding);
		(*cinfo->coef->start_pass) (cinfo,
 800c974:	10800090 	cmplti	r2,r2,2
 800c978:	1000021e 	bne	r2,zero,800c984 <prepare_for_pass+0xfc>
 800c97c:	008000c4 	movi	r2,3
 800c980:	00000106 	br	800c988 <prepare_for_pass+0x100>
 800c984:	0005883a 	mov	r2,zero
 800c988:	e13fff17 	ldw	r4,-4(fp)
 800c98c:	100b883a 	mov	r5,r2
 800c990:	183ee83a 	callr	r3
			(master->total_passes > 1 ?
JBUF_SAVE_AND_PASS : JBUF_PASS_THRU));
		(*cinfo->main->start_pass) (cinfo, JBUF_PASS_THRU);
 800c994:	e0bfff17 	ldw	r2,-4(fp)
 800c998:	10805d17 	ldw	r2,372(r2)
 800c99c:	10800017 	ldw	r2,0(r2)
 800c9a0:	e13fff17 	ldw	r4,-4(fp)
 800c9a4:	000b883a 	mov	r5,zero
 800c9a8:	103ee83a 	callr	r2
		if (cinfo->optimize_coding) {
 800c9ac:	e0bfff17 	ldw	r2,-4(fp)
 800c9b0:	10803383 	ldbu	r2,206(r2)
 800c9b4:	10803fcc 	andi	r2,r2,255
 800c9b8:	10000326 	beq	r2,zero,800c9c8 <prepare_for_pass+0x140>
			/* No immediate data output; postpone writing frame/scan headers */
			master->pub.call_pass_startup = FALSE;
 800c9bc:	e0bffe17 	ldw	r2,-8(fp)
 800c9c0:	10000305 	stb	zero,12(r2)
		} else {
			/* Will write frame/scan headers at first jpeg_write_scanlines call */
			master->pub.call_pass_startup = TRUE;
		}
		break;
 800c9c4:	00005206 	br	800cb10 <prepare_for_pass+0x288>
		if (cinfo->optimize_coding) {
			/* No immediate data output; postpone writing frame/scan headers */
			master->pub.call_pass_startup = FALSE;
		} else {
			/* Will write frame/scan headers at first jpeg_write_scanlines call */
			master->pub.call_pass_startup = TRUE;
 800c9c8:	e0bffe17 	ldw	r2,-8(fp)
 800c9cc:	00c00044 	movi	r3,1
 800c9d0:	10c00305 	stb	r3,12(r2)
		}
		break;
 800c9d4:	00004e06 	br	800cb10 <prepare_for_pass+0x288>
#ifdef ENTROPY_OPT_SUPPORTED
	case huff_opt_pass:
		/* Do Huffman optimization for a scan after the first one. */
		select_scan_parameters(cinfo);
 800c9d8:	e13fff17 	ldw	r4,-4(fp)
 800c9dc:	800c2340 	call	800c234 <select_scan_parameters>
		per_scan_setup(cinfo);
 800c9e0:	e13fff17 	ldw	r4,-4(fp)
 800c9e4:	800c47c0 	call	800c47c <per_scan_setup>
		if (cinfo->Ss != 0 || cinfo->Ah == 0) {
 800c9e8:	e0bfff17 	ldw	r2,-4(fp)
 800c9ec:	10805517 	ldw	r2,340(r2)
 800c9f0:	1000031e 	bne	r2,zero,800ca00 <prepare_for_pass+0x178>
 800c9f4:	e0bfff17 	ldw	r2,-4(fp)
 800c9f8:	10805717 	ldw	r2,348(r2)
 800c9fc:	10000f1e 	bne	r2,zero,800ca3c <prepare_for_pass+0x1b4>
			(*cinfo->entropy->start_pass) (cinfo, TRUE);
 800ca00:	e0bfff17 	ldw	r2,-4(fp)
 800ca04:	10806417 	ldw	r2,400(r2)
 800ca08:	10800017 	ldw	r2,0(r2)
 800ca0c:	e13fff17 	ldw	r4,-4(fp)
 800ca10:	01400044 	movi	r5,1
 800ca14:	103ee83a 	callr	r2
			(*cinfo->coef->start_pass) (cinfo, JBUF_CRANK_DEST);
 800ca18:	e0bfff17 	ldw	r2,-4(fp)
 800ca1c:	10805f17 	ldw	r2,380(r2)
 800ca20:	10800017 	ldw	r2,0(r2)
 800ca24:	e13fff17 	ldw	r4,-4(fp)
 800ca28:	01400084 	movi	r5,2
 800ca2c:	103ee83a 	callr	r2
			master->pub.call_pass_startup = FALSE;
 800ca30:	e0bffe17 	ldw	r2,-8(fp)
 800ca34:	10000305 	stb	zero,12(r2)
			break;
 800ca38:	00003506 	br	800cb10 <prepare_for_pass+0x288>
		}
		/* Special case: Huffman DC refinement scans need no Huffman table
		* and therefore we can skip the optimization pass for them.
		*/
		master->pass_type = output_pass;
 800ca3c:	e0bffe17 	ldw	r2,-8(fp)
 800ca40:	00c00084 	movi	r3,2
 800ca44:	10c00415 	stw	r3,16(r2)
		master->pass_number++;
 800ca48:	e0bffe17 	ldw	r2,-8(fp)
 800ca4c:	10800517 	ldw	r2,20(r2)
 800ca50:	10c00044 	addi	r3,r2,1
 800ca54:	e0bffe17 	ldw	r2,-8(fp)
 800ca58:	10c00515 	stw	r3,20(r2)
		/*FALLTHROUGH*/
#endif
	case output_pass:
		/* Do a data-output pass. */
		/* We need not repeat per-scan setup if prior optimization pass did it. */
		if (! cinfo->optimize_coding) {
 800ca5c:	e0bfff17 	ldw	r2,-4(fp)
 800ca60:	10803383 	ldbu	r2,206(r2)
 800ca64:	10803fcc 	andi	r2,r2,255
 800ca68:	1000041e 	bne	r2,zero,800ca7c <prepare_for_pass+0x1f4>
			select_scan_parameters(cinfo);
 800ca6c:	e13fff17 	ldw	r4,-4(fp)
 800ca70:	800c2340 	call	800c234 <select_scan_parameters>
			per_scan_setup(cinfo);
 800ca74:	e13fff17 	ldw	r4,-4(fp)
 800ca78:	800c47c0 	call	800c47c <per_scan_setup>
		}
		(*cinfo->entropy->start_pass) (cinfo, FALSE);
 800ca7c:	e0bfff17 	ldw	r2,-4(fp)
 800ca80:	10806417 	ldw	r2,400(r2)
 800ca84:	10800017 	ldw	r2,0(r2)
 800ca88:	e13fff17 	ldw	r4,-4(fp)
 800ca8c:	000b883a 	mov	r5,zero
 800ca90:	103ee83a 	callr	r2
		(*cinfo->coef->start_pass) (cinfo, JBUF_CRANK_DEST);
 800ca94:	e0bfff17 	ldw	r2,-4(fp)
 800ca98:	10805f17 	ldw	r2,380(r2)
 800ca9c:	10800017 	ldw	r2,0(r2)
 800caa0:	e13fff17 	ldw	r4,-4(fp)
 800caa4:	01400084 	movi	r5,2
 800caa8:	103ee83a 	callr	r2
		/* We emit frame/scan headers now */
		if (master->scan_number == 0)
 800caac:	e0bffe17 	ldw	r2,-8(fp)
 800cab0:	10800717 	ldw	r2,28(r2)
 800cab4:	1000051e 	bne	r2,zero,800cacc <prepare_for_pass+0x244>
			(*cinfo->marker->write_frame_header) (cinfo);
 800cab8:	e0bfff17 	ldw	r2,-4(fp)
 800cabc:	10806017 	ldw	r2,384(r2)
 800cac0:	10800117 	ldw	r2,4(r2)
 800cac4:	e13fff17 	ldw	r4,-4(fp)
 800cac8:	103ee83a 	callr	r2
		(*cinfo->marker->write_scan_header) (cinfo);
 800cacc:	e0bfff17 	ldw	r2,-4(fp)
 800cad0:	10806017 	ldw	r2,384(r2)
 800cad4:	10800217 	ldw	r2,8(r2)
 800cad8:	e13fff17 	ldw	r4,-4(fp)
 800cadc:	103ee83a 	callr	r2
		master->pub.call_pass_startup = FALSE;
 800cae0:	e0bffe17 	ldw	r2,-8(fp)
 800cae4:	10000305 	stb	zero,12(r2)
		break;
 800cae8:	00000906 	br	800cb10 <prepare_for_pass+0x288>
	default:
		ERREXIT(cinfo, JERR_NOT_COMPILED);
 800caec:	e0bfff17 	ldw	r2,-4(fp)
 800caf0:	10800017 	ldw	r2,0(r2)
 800caf4:	00c00c44 	movi	r3,49
 800caf8:	10c00515 	stw	r3,20(r2)
 800cafc:	e0bfff17 	ldw	r2,-4(fp)
 800cb00:	10800017 	ldw	r2,0(r2)
 800cb04:	10800017 	ldw	r2,0(r2)
 800cb08:	e13fff17 	ldw	r4,-4(fp)
 800cb0c:	103ee83a 	callr	r2
	}

	master->pub.is_last_pass = (master->pass_number == master->total_passes-1);
 800cb10:	e0bffe17 	ldw	r2,-8(fp)
 800cb14:	10c00517 	ldw	r3,20(r2)
 800cb18:	e0bffe17 	ldw	r2,-8(fp)
 800cb1c:	10800617 	ldw	r2,24(r2)
 800cb20:	10bfffc4 	addi	r2,r2,-1
 800cb24:	1885003a 	cmpeq	r2,r3,r2
 800cb28:	1007883a 	mov	r3,r2
 800cb2c:	e0bffe17 	ldw	r2,-8(fp)
 800cb30:	10c00345 	stb	r3,13(r2)

	/* Set up progress monitor's pass info if present */
	if (cinfo->progress != NULL) {
 800cb34:	e0bfff17 	ldw	r2,-4(fp)
 800cb38:	10800217 	ldw	r2,8(r2)
 800cb3c:	10000a26 	beq	r2,zero,800cb68 <prepare_for_pass+0x2e0>
		cinfo->progress->completed_passes = master->pass_number;
 800cb40:	e0bfff17 	ldw	r2,-4(fp)
 800cb44:	10800217 	ldw	r2,8(r2)
 800cb48:	e0fffe17 	ldw	r3,-8(fp)
 800cb4c:	18c00517 	ldw	r3,20(r3)
 800cb50:	10c00315 	stw	r3,12(r2)
		cinfo->progress->total_passes = master->total_passes;
 800cb54:	e0bfff17 	ldw	r2,-4(fp)
 800cb58:	10800217 	ldw	r2,8(r2)
 800cb5c:	e0fffe17 	ldw	r3,-8(fp)
 800cb60:	18c00617 	ldw	r3,24(r3)
 800cb64:	10c00415 	stw	r3,16(r2)
	}
}
 800cb68:	e037883a 	mov	sp,fp
 800cb6c:	dfc00117 	ldw	ra,4(sp)
 800cb70:	df000017 	ldw	fp,0(sp)
 800cb74:	dec00204 	addi	sp,sp,8
 800cb78:	f800283a 	ret

0800cb7c <pass_startup>:
* In multi-pass processing, this routine is not used.
*/

METHODDEF(void)
	pass_startup (j_compress_ptr cinfo)
{
 800cb7c:	defffd04 	addi	sp,sp,-12
 800cb80:	dfc00215 	stw	ra,8(sp)
 800cb84:	df000115 	stw	fp,4(sp)
 800cb88:	df000104 	addi	fp,sp,4
 800cb8c:	e13fff15 	stw	r4,-4(fp)
	cinfo->master->call_pass_startup = FALSE; /* reset flag so call only once */
 800cb90:	e0bfff17 	ldw	r2,-4(fp)
 800cb94:	10805c17 	ldw	r2,368(r2)
 800cb98:	10000305 	stb	zero,12(r2)

	(*cinfo->marker->write_frame_header) (cinfo);
 800cb9c:	e0bfff17 	ldw	r2,-4(fp)
 800cba0:	10806017 	ldw	r2,384(r2)
 800cba4:	10800117 	ldw	r2,4(r2)
 800cba8:	e13fff17 	ldw	r4,-4(fp)
 800cbac:	103ee83a 	callr	r2
	(*cinfo->marker->write_scan_header) (cinfo);
 800cbb0:	e0bfff17 	ldw	r2,-4(fp)
 800cbb4:	10806017 	ldw	r2,384(r2)
 800cbb8:	10800217 	ldw	r2,8(r2)
 800cbbc:	e13fff17 	ldw	r4,-4(fp)
 800cbc0:	103ee83a 	callr	r2
}
 800cbc4:	e037883a 	mov	sp,fp
 800cbc8:	dfc00117 	ldw	ra,4(sp)
 800cbcc:	df000017 	ldw	fp,0(sp)
 800cbd0:	dec00204 	addi	sp,sp,8
 800cbd4:	f800283a 	ret

0800cbd8 <finish_pass_master>:
* Finish up at end of pass.
*/

METHODDEF(void)
	finish_pass_master (j_compress_ptr cinfo)
{
 800cbd8:	defffc04 	addi	sp,sp,-16
 800cbdc:	dfc00315 	stw	ra,12(sp)
 800cbe0:	df000215 	stw	fp,8(sp)
 800cbe4:	df000204 	addi	fp,sp,8
 800cbe8:	e13fff15 	stw	r4,-4(fp)
	my_master_ptr master = (my_master_ptr) cinfo->master;
 800cbec:	e0bfff17 	ldw	r2,-4(fp)
 800cbf0:	10805c17 	ldw	r2,368(r2)
 800cbf4:	e0bffe15 	stw	r2,-8(fp)

	/* The entropy coder always needs an end-of-pass call,
	* either to analyze statistics or to flush its output buffer.
	*/
	(*cinfo->entropy->finish_pass) (cinfo);
 800cbf8:	e0bfff17 	ldw	r2,-4(fp)
 800cbfc:	10806417 	ldw	r2,400(r2)
 800cc00:	10800217 	ldw	r2,8(r2)
 800cc04:	e13fff17 	ldw	r4,-4(fp)
 800cc08:	103ee83a 	callr	r2

	/* Update state for next pass */
	switch (master->pass_type) {
 800cc0c:	e0bffe17 	ldw	r2,-8(fp)
 800cc10:	10800417 	ldw	r2,16(r2)
 800cc14:	10c00060 	cmpeqi	r3,r2,1
 800cc18:	1800111e 	bne	r3,zero,800cc60 <finish_pass_master+0x88>
 800cc1c:	0080032e 	bgeu	zero,r2,800cc2c <finish_pass_master+0x54>
 800cc20:	108000a0 	cmpeqi	r2,r2,2
 800cc24:	1000121e 	bne	r2,zero,800cc70 <finish_pass_master+0x98>
 800cc28:	00001f06 	br	800cca8 <finish_pass_master+0xd0>
	case main_pass:
		/* next pass is either output of scan 0 (after optimization)
		* or output of scan 1 (if no optimization).
		*/
		master->pass_type = output_pass;
 800cc2c:	e0bffe17 	ldw	r2,-8(fp)
 800cc30:	00c00084 	movi	r3,2
 800cc34:	10c00415 	stw	r3,16(r2)
		if (! cinfo->optimize_coding)
 800cc38:	e0bfff17 	ldw	r2,-4(fp)
 800cc3c:	10803383 	ldbu	r2,206(r2)
 800cc40:	10803fcc 	andi	r2,r2,255
 800cc44:	1000171e 	bne	r2,zero,800cca4 <finish_pass_master+0xcc>
			master->scan_number++;
 800cc48:	e0bffe17 	ldw	r2,-8(fp)
 800cc4c:	10800717 	ldw	r2,28(r2)
 800cc50:	10c00044 	addi	r3,r2,1
 800cc54:	e0bffe17 	ldw	r2,-8(fp)
 800cc58:	10c00715 	stw	r3,28(r2)
		break;
 800cc5c:	00001106 	br	800cca4 <finish_pass_master+0xcc>
	case huff_opt_pass:
		/* next pass is always output of current scan */
		master->pass_type = output_pass;
 800cc60:	e0bffe17 	ldw	r2,-8(fp)
 800cc64:	00c00084 	movi	r3,2
 800cc68:	10c00415 	stw	r3,16(r2)
		break;
 800cc6c:	00000e06 	br	800cca8 <finish_pass_master+0xd0>
	case output_pass:
		/* next pass is either optimization or output of next scan */
		if (cinfo->optimize_coding)
 800cc70:	e0bfff17 	ldw	r2,-4(fp)
 800cc74:	10803383 	ldbu	r2,206(r2)
 800cc78:	10803fcc 	andi	r2,r2,255
 800cc7c:	10000326 	beq	r2,zero,800cc8c <finish_pass_master+0xb4>
			master->pass_type = huff_opt_pass;
 800cc80:	e0bffe17 	ldw	r2,-8(fp)
 800cc84:	00c00044 	movi	r3,1
 800cc88:	10c00415 	stw	r3,16(r2)
		master->scan_number++;
 800cc8c:	e0bffe17 	ldw	r2,-8(fp)
 800cc90:	10800717 	ldw	r2,28(r2)
 800cc94:	10c00044 	addi	r3,r2,1
 800cc98:	e0bffe17 	ldw	r2,-8(fp)
 800cc9c:	10c00715 	stw	r3,28(r2)
		break;
 800cca0:	00000106 	br	800cca8 <finish_pass_master+0xd0>
		* or output of scan 1 (if no optimization).
		*/
		master->pass_type = output_pass;
		if (! cinfo->optimize_coding)
			master->scan_number++;
		break;
 800cca4:	0001883a 	nop
			master->pass_type = huff_opt_pass;
		master->scan_number++;
		break;
	}

	master->pass_number++;
 800cca8:	e0bffe17 	ldw	r2,-8(fp)
 800ccac:	10800517 	ldw	r2,20(r2)
 800ccb0:	10c00044 	addi	r3,r2,1
 800ccb4:	e0bffe17 	ldw	r2,-8(fp)
 800ccb8:	10c00515 	stw	r3,20(r2)
}
 800ccbc:	e037883a 	mov	sp,fp
 800ccc0:	dfc00117 	ldw	ra,4(sp)
 800ccc4:	df000017 	ldw	fp,0(sp)
 800ccc8:	dec00204 	addi	sp,sp,8
 800cccc:	f800283a 	ret

0800ccd0 <jinit_c_master_control>:
* Initialize master compression control.
*/

GLOBAL(void)
	jinit_c_master_control (j_compress_ptr cinfo, boolean transcode_only)
{
 800ccd0:	defffb04 	addi	sp,sp,-20
 800ccd4:	dfc00415 	stw	ra,16(sp)
 800ccd8:	df000315 	stw	fp,12(sp)
 800ccdc:	df000304 	addi	fp,sp,12
 800cce0:	e13ffe15 	stw	r4,-8(fp)
 800cce4:	2805883a 	mov	r2,r5
 800cce8:	e0bfff05 	stb	r2,-4(fp)
	my_master_ptr master;

	master = (my_master_ptr)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ccec:	e0bffe17 	ldw	r2,-8(fp)
 800ccf0:	10800117 	ldw	r2,4(r2)
 800ccf4:	10800017 	ldw	r2,0(r2)
GLOBAL(void)
	jinit_c_master_control (j_compress_ptr cinfo, boolean transcode_only)
{
	my_master_ptr master;

	master = (my_master_ptr)
 800ccf8:	e13ffe17 	ldw	r4,-8(fp)
 800ccfc:	01400044 	movi	r5,1
 800cd00:	01800804 	movi	r6,32
 800cd04:	103ee83a 	callr	r2
 800cd08:	e0bffd15 	stw	r2,-12(fp)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
		SIZEOF(my_comp_master));
	cinfo->master = (struct jpeg_comp_master *) master;
 800cd0c:	e0bffe17 	ldw	r2,-8(fp)
 800cd10:	e0fffd17 	ldw	r3,-12(fp)
 800cd14:	10c05c15 	stw	r3,368(r2)
	master->pub.prepare_for_pass = prepare_for_pass;
 800cd18:	e0bffd17 	ldw	r2,-12(fp)
 800cd1c:	00c20074 	movhi	r3,2049
 800cd20:	18f22204 	addi	r3,r3,-14200
 800cd24:	10c00015 	stw	r3,0(r2)
	master->pub.pass_startup = pass_startup;
 800cd28:	e0bffd17 	ldw	r2,-12(fp)
 800cd2c:	00c20074 	movhi	r3,2049
 800cd30:	18f2df04 	addi	r3,r3,-13444
 800cd34:	10c00115 	stw	r3,4(r2)
	master->pub.finish_pass = finish_pass_master;
 800cd38:	e0bffd17 	ldw	r2,-12(fp)
 800cd3c:	00c20074 	movhi	r3,2049
 800cd40:	18f2f604 	addi	r3,r3,-13352
 800cd44:	10c00215 	stw	r3,8(r2)
	master->pub.is_last_pass = FALSE;
 800cd48:	e0bffd17 	ldw	r2,-12(fp)
 800cd4c:	10000345 	stb	zero,13(r2)

	/* Validate parameters, determine derived values */
	initial_setup(cinfo, transcode_only);
 800cd50:	e0bfff03 	ldbu	r2,-4(fp)
 800cd54:	e13ffe17 	ldw	r4,-8(fp)
 800cd58:	100b883a 	mov	r5,r2
 800cd5c:	800b2040 	call	800b204 <initial_setup>

	if (cinfo->scan_info != NULL) {
 800cd60:	e0bffe17 	ldw	r2,-8(fp)
 800cd64:	10803217 	ldw	r2,200(r2)
 800cd68:	10000926 	beq	r2,zero,800cd90 <jinit_c_master_control+0xc0>
#ifdef C_MULTISCAN_FILES_SUPPORTED
		validate_script(cinfo);
 800cd6c:	e13ffe17 	ldw	r4,-8(fp)
 800cd70:	800b93c0 	call	800b93c <validate_script>
		if (cinfo->block_size < DCTSIZE)
 800cd74:	e0bffe17 	ldw	r2,-8(fp)
 800cd78:	10805917 	ldw	r2,356(r2)
 800cd7c:	10800208 	cmpgei	r2,r2,8
 800cd80:	1000081e 	bne	r2,zero,800cda4 <jinit_c_master_control+0xd4>
			reduce_script(cinfo);
 800cd84:	e13ffe17 	ldw	r4,-8(fp)
 800cd88:	800c0b80 	call	800c0b8 <reduce_script>
 800cd8c:	00000506 	br	800cda4 <jinit_c_master_control+0xd4>
#else
		ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif
	} else {
		cinfo->progressive_mode = FALSE;
 800cd90:	e0bffe17 	ldw	r2,-8(fp)
 800cd94:	10003d05 	stb	zero,244(r2)
		cinfo->num_scans = 1;
 800cd98:	e0bffe17 	ldw	r2,-8(fp)
 800cd9c:	00c00044 	movi	r3,1
 800cda0:	10c03115 	stw	r3,196(r2)
	}

	if ((cinfo->progressive_mode || cinfo->block_size < DCTSIZE) &&
 800cda4:	e0bffe17 	ldw	r2,-8(fp)
 800cda8:	10803d03 	ldbu	r2,244(r2)
 800cdac:	10803fcc 	andi	r2,r2,255
 800cdb0:	1000041e 	bne	r2,zero,800cdc4 <jinit_c_master_control+0xf4>
 800cdb4:	e0bffe17 	ldw	r2,-8(fp)
 800cdb8:	10805917 	ldw	r2,356(r2)
 800cdbc:	10800208 	cmpgei	r2,r2,8
 800cdc0:	1000071e 	bne	r2,zero,800cde0 <jinit_c_master_control+0x110>
		!cinfo->arith_code)			/*  TEMPORARY HACK ??? */
 800cdc4:	e0bffe17 	ldw	r2,-8(fp)
 800cdc8:	10803343 	ldbu	r2,205(r2)
	} else {
		cinfo->progressive_mode = FALSE;
		cinfo->num_scans = 1;
	}

	if ((cinfo->progressive_mode || cinfo->block_size < DCTSIZE) &&
 800cdcc:	10803fcc 	andi	r2,r2,255
 800cdd0:	1000031e 	bne	r2,zero,800cde0 <jinit_c_master_control+0x110>
		!cinfo->arith_code)			/*  TEMPORARY HACK ??? */
		/* assume default tables no good for progressive or downscale mode */
		cinfo->optimize_coding = TRUE;
 800cdd4:	e0bffe17 	ldw	r2,-8(fp)
 800cdd8:	00c00044 	movi	r3,1
 800cddc:	10c03385 	stb	r3,206(r2)

	/* Initialize my private state */
	if (transcode_only) {
 800cde0:	e0bfff03 	ldbu	r2,-4(fp)
 800cde4:	10000c26 	beq	r2,zero,800ce18 <jinit_c_master_control+0x148>
		/* no main pass in transcoding */
		if (cinfo->optimize_coding)
 800cde8:	e0bffe17 	ldw	r2,-8(fp)
 800cdec:	10803383 	ldbu	r2,206(r2)
 800cdf0:	10803fcc 	andi	r2,r2,255
 800cdf4:	10000426 	beq	r2,zero,800ce08 <jinit_c_master_control+0x138>
			master->pass_type = huff_opt_pass;
 800cdf8:	e0bffd17 	ldw	r2,-12(fp)
 800cdfc:	00c00044 	movi	r3,1
 800ce00:	10c00415 	stw	r3,16(r2)
 800ce04:	00000606 	br	800ce20 <jinit_c_master_control+0x150>
		else
			master->pass_type = output_pass;
 800ce08:	e0bffd17 	ldw	r2,-12(fp)
 800ce0c:	00c00084 	movi	r3,2
 800ce10:	10c00415 	stw	r3,16(r2)
 800ce14:	00000206 	br	800ce20 <jinit_c_master_control+0x150>
	} else {
		/* for normal compression, first pass is always this type: */
		master->pass_type = main_pass;
 800ce18:	e0bffd17 	ldw	r2,-12(fp)
 800ce1c:	10000415 	stw	zero,16(r2)
	}
	master->scan_number = 0;
 800ce20:	e0bffd17 	ldw	r2,-12(fp)
 800ce24:	10000715 	stw	zero,28(r2)
	master->pass_number = 0;
 800ce28:	e0bffd17 	ldw	r2,-12(fp)
 800ce2c:	10000515 	stw	zero,20(r2)
	if (cinfo->optimize_coding)
 800ce30:	e0bffe17 	ldw	r2,-8(fp)
 800ce34:	10803383 	ldbu	r2,206(r2)
 800ce38:	10803fcc 	andi	r2,r2,255
 800ce3c:	10000726 	beq	r2,zero,800ce5c <jinit_c_master_control+0x18c>
		master->total_passes = cinfo->num_scans * 2;
 800ce40:	e0bffe17 	ldw	r2,-8(fp)
 800ce44:	10803117 	ldw	r2,196(r2)
 800ce48:	1085883a 	add	r2,r2,r2
 800ce4c:	1007883a 	mov	r3,r2
 800ce50:	e0bffd17 	ldw	r2,-12(fp)
 800ce54:	10c00615 	stw	r3,24(r2)
 800ce58:	00000406 	br	800ce6c <jinit_c_master_control+0x19c>
	else
		master->total_passes = cinfo->num_scans;
 800ce5c:	e0bffe17 	ldw	r2,-8(fp)
 800ce60:	10c03117 	ldw	r3,196(r2)
 800ce64:	e0bffd17 	ldw	r2,-12(fp)
 800ce68:	10c00615 	stw	r3,24(r2)
}
 800ce6c:	e037883a 	mov	sp,fp
 800ce70:	dfc00117 	ldw	ra,4(sp)
 800ce74:	df000017 	ldw	fp,0(sp)
 800ce78:	dec00204 	addi	sp,sp,8
 800ce7c:	f800283a 	ret

0800ce80 <jpeg_abort>:
* responsibility.
*/

GLOBAL(void)
	jpeg_abort (j_common_ptr cinfo)
{
 800ce80:	defffc04 	addi	sp,sp,-16
 800ce84:	dfc00315 	stw	ra,12(sp)
 800ce88:	df000215 	stw	fp,8(sp)
 800ce8c:	df000204 	addi	fp,sp,8
 800ce90:	e13fff15 	stw	r4,-4(fp)
	int pool;

	/* Do nothing if called on a not-initialized or destroyed JPEG object. */
	if (cinfo->mem == NULL)
 800ce94:	e0bfff17 	ldw	r2,-4(fp)
 800ce98:	10800117 	ldw	r2,4(r2)
 800ce9c:	10001c26 	beq	r2,zero,800cf10 <jpeg_abort+0x90>
		return;

	/* Releasing pools in reverse order might help avoid fragmentation
	* with some (brain-damaged) malloc libraries.
	*/
	for (pool = JPOOL_NUMPOOLS-1; pool > JPOOL_PERMANENT; pool--) {
 800cea0:	00800044 	movi	r2,1
 800cea4:	e0bffe15 	stw	r2,-8(fp)
 800cea8:	00000906 	br	800ced0 <jpeg_abort+0x50>
		(*cinfo->mem->free_pool) (cinfo, pool);
 800ceac:	e0bfff17 	ldw	r2,-4(fp)
 800ceb0:	10800117 	ldw	r2,4(r2)
 800ceb4:	10800917 	ldw	r2,36(r2)
 800ceb8:	e13fff17 	ldw	r4,-4(fp)
 800cebc:	e17ffe17 	ldw	r5,-8(fp)
 800cec0:	103ee83a 	callr	r2
		return;

	/* Releasing pools in reverse order might help avoid fragmentation
	* with some (brain-damaged) malloc libraries.
	*/
	for (pool = JPOOL_NUMPOOLS-1; pool > JPOOL_PERMANENT; pool--) {
 800cec4:	e0bffe17 	ldw	r2,-8(fp)
 800cec8:	10bfffc4 	addi	r2,r2,-1
 800cecc:	e0bffe15 	stw	r2,-8(fp)
 800ced0:	e0bffe17 	ldw	r2,-8(fp)
 800ced4:	00bff516 	blt	zero,r2,800ceac <jpeg_abort+0x2c>
		(*cinfo->mem->free_pool) (cinfo, pool);
	}

	/* Reset overall state for possible reuse of object */
	if (cinfo->is_decompressor) {
 800ced8:	e0bfff17 	ldw	r2,-4(fp)
 800cedc:	10800403 	ldbu	r2,16(r2)
 800cee0:	10803fcc 	andi	r2,r2,255
 800cee4:	10000626 	beq	r2,zero,800cf00 <jpeg_abort+0x80>
		cinfo->global_state = DSTATE_START;
 800cee8:	e0bfff17 	ldw	r2,-4(fp)
 800ceec:	00c03204 	movi	r3,200
 800cef0:	10c00515 	stw	r3,20(r2)
		/* Try to keep application from accessing now-deleted marker list.
		* A bit kludgy to do it here, but this is the most central place.
		*/
		((j_decompress_ptr) cinfo)->marker_list = NULL;
 800cef4:	e0bfff17 	ldw	r2,-4(fp)
 800cef8:	10004315 	stw	zero,268(r2)
 800cefc:	00000506 	br	800cf14 <jpeg_abort+0x94>
	} else {
		cinfo->global_state = CSTATE_START;
 800cf00:	e0bfff17 	ldw	r2,-4(fp)
 800cf04:	00c01904 	movi	r3,100
 800cf08:	10c00515 	stw	r3,20(r2)
 800cf0c:	00000106 	br	800cf14 <jpeg_abort+0x94>
{
	int pool;

	/* Do nothing if called on a not-initialized or destroyed JPEG object. */
	if (cinfo->mem == NULL)
		return;
 800cf10:	0001883a 	nop
		*/
		((j_decompress_ptr) cinfo)->marker_list = NULL;
	} else {
		cinfo->global_state = CSTATE_START;
	}
}
 800cf14:	e037883a 	mov	sp,fp
 800cf18:	dfc00117 	ldw	ra,4(sp)
 800cf1c:	df000017 	ldw	fp,0(sp)
 800cf20:	dec00204 	addi	sp,sp,8
 800cf24:	f800283a 	ret

0800cf28 <jpeg_destroy>:
* responsibility.
*/

GLOBAL(void)
	jpeg_destroy (j_common_ptr cinfo)
{
 800cf28:	defffd04 	addi	sp,sp,-12
 800cf2c:	dfc00215 	stw	ra,8(sp)
 800cf30:	df000115 	stw	fp,4(sp)
 800cf34:	df000104 	addi	fp,sp,4
 800cf38:	e13fff15 	stw	r4,-4(fp)
	/* We need only tell the memory manager to release everything. */
	/* NB: mem pointer is NULL if memory mgr failed to initialize. */
	if (cinfo->mem != NULL)
 800cf3c:	e0bfff17 	ldw	r2,-4(fp)
 800cf40:	10800117 	ldw	r2,4(r2)
 800cf44:	10000526 	beq	r2,zero,800cf5c <jpeg_destroy+0x34>
		(*cinfo->mem->self_destruct) (cinfo);
 800cf48:	e0bfff17 	ldw	r2,-4(fp)
 800cf4c:	10800117 	ldw	r2,4(r2)
 800cf50:	10800a17 	ldw	r2,40(r2)
 800cf54:	e13fff17 	ldw	r4,-4(fp)
 800cf58:	103ee83a 	callr	r2
	cinfo->mem = NULL;		/* be safe if jpeg_destroy is called twice */
 800cf5c:	e0bfff17 	ldw	r2,-4(fp)
 800cf60:	10000115 	stw	zero,4(r2)
	cinfo->global_state = 0;	/* mark it destroyed */
 800cf64:	e0bfff17 	ldw	r2,-4(fp)
 800cf68:	10000515 	stw	zero,20(r2)
}
 800cf6c:	e037883a 	mov	sp,fp
 800cf70:	dfc00117 	ldw	ra,4(sp)
 800cf74:	df000017 	ldw	fp,0(sp)
 800cf78:	dec00204 	addi	sp,sp,8
 800cf7c:	f800283a 	ret

0800cf80 <jpeg_alloc_quant_table>:
* (Would jutils.c be a more reasonable place to put these?)
*/

GLOBAL(JQUANT_TBL *)
	jpeg_alloc_quant_table (j_common_ptr cinfo)
{
 800cf80:	defffc04 	addi	sp,sp,-16
 800cf84:	dfc00315 	stw	ra,12(sp)
 800cf88:	df000215 	stw	fp,8(sp)
 800cf8c:	df000204 	addi	fp,sp,8
 800cf90:	e13fff15 	stw	r4,-4(fp)
	JQUANT_TBL *tbl;

	tbl = (JQUANT_TBL *)
		(*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JQUANT_TBL));
 800cf94:	e0bfff17 	ldw	r2,-4(fp)
 800cf98:	10800117 	ldw	r2,4(r2)
 800cf9c:	10800017 	ldw	r2,0(r2)
GLOBAL(JQUANT_TBL *)
	jpeg_alloc_quant_table (j_common_ptr cinfo)
{
	JQUANT_TBL *tbl;

	tbl = (JQUANT_TBL *)
 800cfa0:	e13fff17 	ldw	r4,-4(fp)
 800cfa4:	000b883a 	mov	r5,zero
 800cfa8:	01802084 	movi	r6,130
 800cfac:	103ee83a 	callr	r2
 800cfb0:	e0bffe15 	stw	r2,-8(fp)
		(*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JQUANT_TBL));
	tbl->sent_table = FALSE;	/* make sure this is false in any new table */
 800cfb4:	e0bffe17 	ldw	r2,-8(fp)
 800cfb8:	10002005 	stb	zero,128(r2)
	return tbl;
 800cfbc:	e0bffe17 	ldw	r2,-8(fp)
}
 800cfc0:	e037883a 	mov	sp,fp
 800cfc4:	dfc00117 	ldw	ra,4(sp)
 800cfc8:	df000017 	ldw	fp,0(sp)
 800cfcc:	dec00204 	addi	sp,sp,8
 800cfd0:	f800283a 	ret

0800cfd4 <jpeg_alloc_huff_table>:


GLOBAL(JHUFF_TBL *)
	jpeg_alloc_huff_table (j_common_ptr cinfo)
{
 800cfd4:	defffc04 	addi	sp,sp,-16
 800cfd8:	dfc00315 	stw	ra,12(sp)
 800cfdc:	df000215 	stw	fp,8(sp)
 800cfe0:	df000204 	addi	fp,sp,8
 800cfe4:	e13fff15 	stw	r4,-4(fp)
	JHUFF_TBL *tbl;

	tbl = (JHUFF_TBL *)
		(*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JHUFF_TBL));
 800cfe8:	e0bfff17 	ldw	r2,-4(fp)
 800cfec:	10800117 	ldw	r2,4(r2)
 800cff0:	10800017 	ldw	r2,0(r2)
GLOBAL(JHUFF_TBL *)
	jpeg_alloc_huff_table (j_common_ptr cinfo)
{
	JHUFF_TBL *tbl;

	tbl = (JHUFF_TBL *)
 800cff4:	e13fff17 	ldw	r4,-4(fp)
 800cff8:	000b883a 	mov	r5,zero
 800cffc:	01804484 	movi	r6,274
 800d000:	103ee83a 	callr	r2
 800d004:	e0bffe15 	stw	r2,-8(fp)
		(*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JHUFF_TBL));
	tbl->sent_table = FALSE;	/* make sure this is false in any new table */
 800d008:	e0bffe17 	ldw	r2,-8(fp)
 800d00c:	10004445 	stb	zero,273(r2)
	return tbl;
 800d010:	e0bffe17 	ldw	r2,-8(fp)
}
 800d014:	e037883a 	mov	sp,fp
 800d018:	dfc00117 	ldw	ra,4(sp)
 800d01c:	df000017 	ldw	fp,0(sp)
 800d020:	dec00204 	addi	sp,sp,8
 800d024:	f800283a 	ret

0800d028 <jpeg_add_quant_table>:
	/* Define a quantization table equal to the basic_table times
	* a scale factor (given as a percentage).
	* If force_baseline is TRUE, the computed quantization table entries
	* are limited to 1..255 for JPEG baseline compatibility.
	*/
{
 800d028:	defff604 	addi	sp,sp,-40
 800d02c:	dfc00915 	stw	ra,36(sp)
 800d030:	df000815 	stw	fp,32(sp)
 800d034:	df000804 	addi	fp,sp,32
 800d038:	e13ffb15 	stw	r4,-20(fp)
 800d03c:	e17ffc15 	stw	r5,-16(fp)
 800d040:	e1bffd15 	stw	r6,-12(fp)
 800d044:	e1fffe15 	stw	r7,-8(fp)
 800d048:	e0800217 	ldw	r2,8(fp)
 800d04c:	e0bfff05 	stb	r2,-4(fp)
	JQUANT_TBL ** qtblptr;
	int i;
	long temp;

	/* Safety check to ensure start_compress not called yet. */
	if (cinfo->global_state != CSTATE_START)
 800d050:	e0bffb17 	ldw	r2,-20(fp)
 800d054:	10800517 	ldw	r2,20(r2)
 800d058:	10801920 	cmpeqi	r2,r2,100
 800d05c:	10000e1e 	bne	r2,zero,800d098 <jpeg_add_quant_table+0x70>
		ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800d060:	e0bffb17 	ldw	r2,-20(fp)
 800d064:	10800017 	ldw	r2,0(r2)
 800d068:	00c00544 	movi	r3,21
 800d06c:	10c00515 	stw	r3,20(r2)
 800d070:	e0bffb17 	ldw	r2,-20(fp)
 800d074:	10800017 	ldw	r2,0(r2)
 800d078:	e0fffb17 	ldw	r3,-20(fp)
 800d07c:	18c00517 	ldw	r3,20(r3)
 800d080:	10c00615 	stw	r3,24(r2)
 800d084:	e0bffb17 	ldw	r2,-20(fp)
 800d088:	10800017 	ldw	r2,0(r2)
 800d08c:	10800017 	ldw	r2,0(r2)
 800d090:	e13ffb17 	ldw	r4,-20(fp)
 800d094:	103ee83a 	callr	r2

	if (which_tbl < 0 || which_tbl >= NUM_QUANT_TBLS)
 800d098:	e0bffc17 	ldw	r2,-16(fp)
 800d09c:	10000316 	blt	r2,zero,800d0ac <jpeg_add_quant_table+0x84>
 800d0a0:	e0bffc17 	ldw	r2,-16(fp)
 800d0a4:	10800110 	cmplti	r2,r2,4
 800d0a8:	10000d1e 	bne	r2,zero,800d0e0 <jpeg_add_quant_table+0xb8>
		ERREXIT1(cinfo, JERR_DQT_INDEX, which_tbl);
 800d0ac:	e0bffb17 	ldw	r2,-20(fp)
 800d0b0:	10800017 	ldw	r2,0(r2)
 800d0b4:	00c00804 	movi	r3,32
 800d0b8:	10c00515 	stw	r3,20(r2)
 800d0bc:	e0bffb17 	ldw	r2,-20(fp)
 800d0c0:	10800017 	ldw	r2,0(r2)
 800d0c4:	e0fffc17 	ldw	r3,-16(fp)
 800d0c8:	10c00615 	stw	r3,24(r2)
 800d0cc:	e0bffb17 	ldw	r2,-20(fp)
 800d0d0:	10800017 	ldw	r2,0(r2)
 800d0d4:	10800017 	ldw	r2,0(r2)
 800d0d8:	e13ffb17 	ldw	r4,-20(fp)
 800d0dc:	103ee83a 	callr	r2

	qtblptr = & cinfo->quant_tbl_ptrs[which_tbl];
 800d0e0:	e0bffc17 	ldw	r2,-16(fp)
 800d0e4:	10800544 	addi	r2,r2,21
 800d0e8:	1085883a 	add	r2,r2,r2
 800d0ec:	1085883a 	add	r2,r2,r2
 800d0f0:	e0fffb17 	ldw	r3,-20(fp)
 800d0f4:	1885883a 	add	r2,r3,r2
 800d0f8:	e0bffa15 	stw	r2,-24(fp)

	if (*qtblptr == NULL)
 800d0fc:	e0bffa17 	ldw	r2,-24(fp)
 800d100:	10800017 	ldw	r2,0(r2)
 800d104:	1000041e 	bne	r2,zero,800d118 <jpeg_add_quant_table+0xf0>
		*qtblptr = jpeg_alloc_quant_table((j_common_ptr) cinfo);
 800d108:	e13ffb17 	ldw	r4,-20(fp)
 800d10c:	800cf800 	call	800cf80 <jpeg_alloc_quant_table>
 800d110:	e0fffa17 	ldw	r3,-24(fp)
 800d114:	18800015 	stw	r2,0(r3)

	for (i = 0; i < DCTSIZE2; i++) {
 800d118:	e03ff815 	stw	zero,-32(fp)
 800d11c:	00002906 	br	800d1c4 <jpeg_add_quant_table+0x19c>
		temp = ((long) basic_table[i] * scale_factor + 50L) / 100L;
 800d120:	e0bff817 	ldw	r2,-32(fp)
 800d124:	1085883a 	add	r2,r2,r2
 800d128:	1085883a 	add	r2,r2,r2
 800d12c:	e0fffd17 	ldw	r3,-12(fp)
 800d130:	1885883a 	add	r2,r3,r2
 800d134:	10800017 	ldw	r2,0(r2)
 800d138:	1009883a 	mov	r4,r2
 800d13c:	e17ffe17 	ldw	r5,-8(fp)
 800d140:	802c2180 	call	802c218 <__mulsi3>
 800d144:	10800c84 	addi	r2,r2,50
 800d148:	1009883a 	mov	r4,r2
 800d14c:	01401904 	movi	r5,100
 800d150:	802c15c0 	call	802c15c <__divsi3>
 800d154:	e0bff915 	stw	r2,-28(fp)
		/* limit the values to the valid range */
		if (temp <= 0L) temp = 1L;
 800d158:	e0bff917 	ldw	r2,-28(fp)
 800d15c:	00800216 	blt	zero,r2,800d168 <jpeg_add_quant_table+0x140>
 800d160:	00800044 	movi	r2,1
 800d164:	e0bff915 	stw	r2,-28(fp)
		if (temp > 32767L) temp = 32767L; /* max quantizer needed for 12 bits */
 800d168:	e0bff917 	ldw	r2,-28(fp)
 800d16c:	00dfffc4 	movi	r3,32767
 800d170:	1880020e 	bge	r3,r2,800d17c <jpeg_add_quant_table+0x154>
 800d174:	009fffc4 	movi	r2,32767
 800d178:	e0bff915 	stw	r2,-28(fp)
		if (force_baseline && temp > 255L)
 800d17c:	e0bfff03 	ldbu	r2,-4(fp)
 800d180:	10000526 	beq	r2,zero,800d198 <jpeg_add_quant_table+0x170>
 800d184:	e0bff917 	ldw	r2,-28(fp)
 800d188:	10804010 	cmplti	r2,r2,256
 800d18c:	1000021e 	bne	r2,zero,800d198 <jpeg_add_quant_table+0x170>
			temp = 255L;		/* limit to baseline range if requested */
 800d190:	00803fc4 	movi	r2,255
 800d194:	e0bff915 	stw	r2,-28(fp)
		(*qtblptr)->quantval[i] = (UINT16) temp;
 800d198:	e0bffa17 	ldw	r2,-24(fp)
 800d19c:	11000017 	ldw	r4,0(r2)
 800d1a0:	e0bff917 	ldw	r2,-28(fp)
 800d1a4:	1007883a 	mov	r3,r2
 800d1a8:	e0bff817 	ldw	r2,-32(fp)
 800d1ac:	1085883a 	add	r2,r2,r2
 800d1b0:	2085883a 	add	r2,r4,r2
 800d1b4:	10c0000d 	sth	r3,0(r2)
	qtblptr = & cinfo->quant_tbl_ptrs[which_tbl];

	if (*qtblptr == NULL)
		*qtblptr = jpeg_alloc_quant_table((j_common_ptr) cinfo);

	for (i = 0; i < DCTSIZE2; i++) {
 800d1b8:	e0bff817 	ldw	r2,-32(fp)
 800d1bc:	10800044 	addi	r2,r2,1
 800d1c0:	e0bff815 	stw	r2,-32(fp)
 800d1c4:	e0bff817 	ldw	r2,-32(fp)
 800d1c8:	10801010 	cmplti	r2,r2,64
 800d1cc:	103fd41e 	bne	r2,zero,800d120 <jpeg_add_quant_table+0xf8>
			temp = 255L;		/* limit to baseline range if requested */
		(*qtblptr)->quantval[i] = (UINT16) temp;
	}

	/* Initialize sent_table FALSE so table will be written to JPEG file. */
	(*qtblptr)->sent_table = FALSE;
 800d1d0:	e0bffa17 	ldw	r2,-24(fp)
 800d1d4:	10800017 	ldw	r2,0(r2)
 800d1d8:	10002005 	stb	zero,128(r2)
}
 800d1dc:	e037883a 	mov	sp,fp
 800d1e0:	dfc00117 	ldw	ra,4(sp)
 800d1e4:	df000017 	ldw	fp,0(sp)
 800d1e8:	dec00204 	addi	sp,sp,8
 800d1ec:	f800283a 	ret

0800d1f0 <jpeg_default_qtables>:
	jpeg_default_qtables (j_compress_ptr cinfo, boolean force_baseline)
	/* Set or change the 'quality' (quantization) setting, using default tables
	* and straight percentage-scaling quality scales.
	* This entry point allows different scalings for luminance and chrominance.
	*/
{
 800d1f0:	defffb04 	addi	sp,sp,-20
 800d1f4:	dfc00415 	stw	ra,16(sp)
 800d1f8:	df000315 	stw	fp,12(sp)
 800d1fc:	df000304 	addi	fp,sp,12
 800d200:	e13ffe15 	stw	r4,-8(fp)
 800d204:	2805883a 	mov	r2,r5
 800d208:	e0bfff05 	stb	r2,-4(fp)
	/* Set up two quantization tables using the specified scaling */
	jpeg_add_quant_table(cinfo, 0, std_luminance_quant_tbl,
		cinfo->q_scale_factor[0], force_baseline);
 800d20c:	e0bffe17 	ldw	r2,-8(fp)
	* and straight percentage-scaling quality scales.
	* This entry point allows different scalings for luminance and chrominance.
	*/
{
	/* Set up two quantization tables using the specified scaling */
	jpeg_add_quant_table(cinfo, 0, std_luminance_quant_tbl,
 800d210:	10801917 	ldw	r2,100(r2)
 800d214:	e0ffff03 	ldbu	r3,-4(fp)
 800d218:	d8c00015 	stw	r3,0(sp)
 800d21c:	e13ffe17 	ldw	r4,-8(fp)
 800d220:	000b883a 	mov	r5,zero
 800d224:	01820134 	movhi	r6,2052
 800d228:	31bc4e04 	addi	r6,r6,-3784
 800d22c:	100f883a 	mov	r7,r2
 800d230:	800d0280 	call	800d028 <jpeg_add_quant_table>
		cinfo->q_scale_factor[0], force_baseline);
	jpeg_add_quant_table(cinfo, 1, std_chrominance_quant_tbl,
		cinfo->q_scale_factor[1], force_baseline);
 800d234:	e0bffe17 	ldw	r2,-8(fp)
	*/
{
	/* Set up two quantization tables using the specified scaling */
	jpeg_add_quant_table(cinfo, 0, std_luminance_quant_tbl,
		cinfo->q_scale_factor[0], force_baseline);
	jpeg_add_quant_table(cinfo, 1, std_chrominance_quant_tbl,
 800d238:	10801a17 	ldw	r2,104(r2)
 800d23c:	e0ffff03 	ldbu	r3,-4(fp)
 800d240:	d8c00015 	stw	r3,0(sp)
 800d244:	e13ffe17 	ldw	r4,-8(fp)
 800d248:	01400044 	movi	r5,1
 800d24c:	01820134 	movhi	r6,2052
 800d250:	31bc8e04 	addi	r6,r6,-3528
 800d254:	100f883a 	mov	r7,r2
 800d258:	800d0280 	call	800d028 <jpeg_add_quant_table>
		cinfo->q_scale_factor[1], force_baseline);
}
 800d25c:	e037883a 	mov	sp,fp
 800d260:	dfc00117 	ldw	ra,4(sp)
 800d264:	df000017 	ldw	fp,0(sp)
 800d268:	dec00204 	addi	sp,sp,8
 800d26c:	f800283a 	ret

0800d270 <jpeg_set_linear_quality>:
	/* Set or change the 'quality' (quantization) setting, using default tables
	* and a straight percentage-scaling quality scale.  In most cases it's better
	* to use jpeg_set_quality (below); this entry point is provided for
	* applications that insist on a linear percentage scaling.
	*/
{
 800d270:	defffa04 	addi	sp,sp,-24
 800d274:	dfc00515 	stw	ra,20(sp)
 800d278:	df000415 	stw	fp,16(sp)
 800d27c:	df000404 	addi	fp,sp,16
 800d280:	e13ffd15 	stw	r4,-12(fp)
 800d284:	e17ffe15 	stw	r5,-8(fp)
 800d288:	3005883a 	mov	r2,r6
 800d28c:	e0bfff05 	stb	r2,-4(fp)
	/* Set up two quantization tables using the specified scaling */
	jpeg_add_quant_table(cinfo, 0, std_luminance_quant_tbl,
 800d290:	e0bfff03 	ldbu	r2,-4(fp)
 800d294:	d8800015 	stw	r2,0(sp)
 800d298:	e13ffd17 	ldw	r4,-12(fp)
 800d29c:	000b883a 	mov	r5,zero
 800d2a0:	01820134 	movhi	r6,2052
 800d2a4:	31bc4e04 	addi	r6,r6,-3784
 800d2a8:	e1fffe17 	ldw	r7,-8(fp)
 800d2ac:	800d0280 	call	800d028 <jpeg_add_quant_table>
		scale_factor, force_baseline);
	jpeg_add_quant_table(cinfo, 1, std_chrominance_quant_tbl,
 800d2b0:	e0bfff03 	ldbu	r2,-4(fp)
 800d2b4:	d8800015 	stw	r2,0(sp)
 800d2b8:	e13ffd17 	ldw	r4,-12(fp)
 800d2bc:	01400044 	movi	r5,1
 800d2c0:	01820134 	movhi	r6,2052
 800d2c4:	31bc8e04 	addi	r6,r6,-3528
 800d2c8:	e1fffe17 	ldw	r7,-8(fp)
 800d2cc:	800d0280 	call	800d028 <jpeg_add_quant_table>
		scale_factor, force_baseline);
}
 800d2d0:	e037883a 	mov	sp,fp
 800d2d4:	dfc00117 	ldw	ra,4(sp)
 800d2d8:	df000017 	ldw	fp,0(sp)
 800d2dc:	dec00204 	addi	sp,sp,8
 800d2e0:	f800283a 	ret

0800d2e4 <jpeg_quality_scaling>:
	jpeg_quality_scaling (int quality)
	/* Convert a user-specified quality rating to a percentage scaling factor
	* for an underlying quantization table, using our recommended scaling curve.
	* The input 'quality' factor should be 0 (terrible) to 100 (very good).
	*/
{
 800d2e4:	defffd04 	addi	sp,sp,-12
 800d2e8:	dfc00215 	stw	ra,8(sp)
 800d2ec:	df000115 	stw	fp,4(sp)
 800d2f0:	df000104 	addi	fp,sp,4
 800d2f4:	e13fff15 	stw	r4,-4(fp)
	/* Safety limit on quality factor.  Convert 0 to 1 to avoid zero divide. */
	if (quality <= 0) quality = 1;
 800d2f8:	e0bfff17 	ldw	r2,-4(fp)
 800d2fc:	00800216 	blt	zero,r2,800d308 <jpeg_quality_scaling+0x24>
 800d300:	00800044 	movi	r2,1
 800d304:	e0bfff15 	stw	r2,-4(fp)
	if (quality > 100) quality = 100;
 800d308:	e0bfff17 	ldw	r2,-4(fp)
 800d30c:	10801950 	cmplti	r2,r2,101
 800d310:	1000021e 	bne	r2,zero,800d31c <jpeg_quality_scaling+0x38>
 800d314:	00801904 	movi	r2,100
 800d318:	e0bfff15 	stw	r2,-4(fp)
	* Qualities 50..100 are converted to scaling percentage 200 - 2*Q;
	* note that at Q=100 the scaling is 0, which will cause jpeg_add_quant_table
	* to make all the table entries 1 (hence, minimum quantization loss).
	* Qualities 1..50 are converted to scaling percentage 5000/Q.
	*/
	if (quality < 50)
 800d31c:	e0bfff17 	ldw	r2,-4(fp)
 800d320:	10800c88 	cmpgei	r2,r2,50
 800d324:	1000051e 	bne	r2,zero,800d33c <jpeg_quality_scaling+0x58>
		quality = 5000 / quality;
 800d328:	0104e204 	movi	r4,5000
 800d32c:	e17fff17 	ldw	r5,-4(fp)
 800d330:	802c15c0 	call	802c15c <__divsi3>
 800d334:	e0bfff15 	stw	r2,-4(fp)
 800d338:	00000506 	br	800d350 <jpeg_quality_scaling+0x6c>
	else
		quality = 200 - quality*2;
 800d33c:	00c01904 	movi	r3,100
 800d340:	e0bfff17 	ldw	r2,-4(fp)
 800d344:	1885c83a 	sub	r2,r3,r2
 800d348:	1085883a 	add	r2,r2,r2
 800d34c:	e0bfff15 	stw	r2,-4(fp)

	return quality;
 800d350:	e0bfff17 	ldw	r2,-4(fp)
}
 800d354:	e037883a 	mov	sp,fp
 800d358:	dfc00117 	ldw	ra,4(sp)
 800d35c:	df000017 	ldw	fp,0(sp)
 800d360:	dec00204 	addi	sp,sp,8
 800d364:	f800283a 	ret

0800d368 <jpeg_set_quality>:
	/* Set or change the 'quality' (quantization) setting, using default tables.
	* This is the standard quality-adjusting entry point for typical user
	* interfaces; only those who want detailed control over quantization tables
	* would use the preceding three routines directly.
	*/
{
 800d368:	defffb04 	addi	sp,sp,-20
 800d36c:	dfc00415 	stw	ra,16(sp)
 800d370:	df000315 	stw	fp,12(sp)
 800d374:	df000304 	addi	fp,sp,12
 800d378:	e13ffd15 	stw	r4,-12(fp)
 800d37c:	e17ffe15 	stw	r5,-8(fp)
 800d380:	3005883a 	mov	r2,r6
 800d384:	e0bfff05 	stb	r2,-4(fp)
	/* Convert user 0-100 rating to percentage scaling */
	quality = jpeg_quality_scaling(quality);
 800d388:	e13ffe17 	ldw	r4,-8(fp)
 800d38c:	800d2e40 	call	800d2e4 <jpeg_quality_scaling>
 800d390:	e0bffe15 	stw	r2,-8(fp)

	/* Set up standard quality tables */
	jpeg_set_linear_quality(cinfo, quality, force_baseline);
 800d394:	e0bfff03 	ldbu	r2,-4(fp)
 800d398:	e13ffd17 	ldw	r4,-12(fp)
 800d39c:	e17ffe17 	ldw	r5,-8(fp)
 800d3a0:	100d883a 	mov	r6,r2
 800d3a4:	800d2700 	call	800d270 <jpeg_set_linear_quality>
}
 800d3a8:	e037883a 	mov	sp,fp
 800d3ac:	dfc00117 	ldw	ra,4(sp)
 800d3b0:	df000017 	ldw	fp,0(sp)
 800d3b4:	dec00204 	addi	sp,sp,8
 800d3b8:	f800283a 	ret

0800d3bc <add_huff_table>:

LOCAL(void)
	add_huff_table (j_compress_ptr cinfo,
	JHUFF_TBL **htblptr, const UINT8 *bits, const UINT8 *val)
	/* Define a Huffman table */
{
 800d3bc:	defff804 	addi	sp,sp,-32
 800d3c0:	dfc00715 	stw	ra,28(sp)
 800d3c4:	df000615 	stw	fp,24(sp)
 800d3c8:	df000604 	addi	fp,sp,24
 800d3cc:	e13ffc15 	stw	r4,-16(fp)
 800d3d0:	e17ffd15 	stw	r5,-12(fp)
 800d3d4:	e1bffe15 	stw	r6,-8(fp)
 800d3d8:	e1ffff15 	stw	r7,-4(fp)
	int nsymbols, len;

	if (*htblptr == NULL)
 800d3dc:	e0bffd17 	ldw	r2,-12(fp)
 800d3e0:	10800017 	ldw	r2,0(r2)
 800d3e4:	1000041e 	bne	r2,zero,800d3f8 <add_huff_table+0x3c>
		*htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
 800d3e8:	e13ffc17 	ldw	r4,-16(fp)
 800d3ec:	800cfd40 	call	800cfd4 <jpeg_alloc_huff_table>
 800d3f0:	e0fffd17 	ldw	r3,-12(fp)
 800d3f4:	18800015 	stw	r2,0(r3)

	/* Copy the number-of-symbols-of-each-code-length counts */
	MEMCOPY((*htblptr)->bits, bits, SIZEOF((*htblptr)->bits));
 800d3f8:	e0bffd17 	ldw	r2,-12(fp)
 800d3fc:	10800017 	ldw	r2,0(r2)
 800d400:	1009883a 	mov	r4,r2
 800d404:	e17ffe17 	ldw	r5,-8(fp)
 800d408:	01800444 	movi	r6,17
 800d40c:	802ebb00 	call	802ebb0 <memcpy>

	/* Validate the counts.  We do this here mainly so we can copy the right
	* number of symbols from the val[] array, without risking marching off
	* the end of memory.  jchuff.c will do a more thorough test later.
	*/
	nsymbols = 0;
 800d410:	e03ffa15 	stw	zero,-24(fp)
	for (len = 1; len <= 16; len++)
 800d414:	00800044 	movi	r2,1
 800d418:	e0bffb15 	stw	r2,-20(fp)
 800d41c:	00000b06 	br	800d44c <add_huff_table+0x90>
		nsymbols += bits[len];
 800d420:	e0bffb17 	ldw	r2,-20(fp)
 800d424:	e0fffe17 	ldw	r3,-8(fp)
 800d428:	1885883a 	add	r2,r3,r2
 800d42c:	10800003 	ldbu	r2,0(r2)
 800d430:	10803fcc 	andi	r2,r2,255
 800d434:	e0fffa17 	ldw	r3,-24(fp)
 800d438:	1885883a 	add	r2,r3,r2
 800d43c:	e0bffa15 	stw	r2,-24(fp)
	/* Validate the counts.  We do this here mainly so we can copy the right
	* number of symbols from the val[] array, without risking marching off
	* the end of memory.  jchuff.c will do a more thorough test later.
	*/
	nsymbols = 0;
	for (len = 1; len <= 16; len++)
 800d440:	e0bffb17 	ldw	r2,-20(fp)
 800d444:	10800044 	addi	r2,r2,1
 800d448:	e0bffb15 	stw	r2,-20(fp)
 800d44c:	e0bffb17 	ldw	r2,-20(fp)
 800d450:	10800450 	cmplti	r2,r2,17
 800d454:	103ff21e 	bne	r2,zero,800d420 <add_huff_table+0x64>
		nsymbols += bits[len];
	if (nsymbols < 1 || nsymbols > 256)
 800d458:	e0bffa17 	ldw	r2,-24(fp)
 800d45c:	0080030e 	bge	zero,r2,800d46c <add_huff_table+0xb0>
 800d460:	e0bffa17 	ldw	r2,-24(fp)
 800d464:	10804050 	cmplti	r2,r2,257
 800d468:	1000091e 	bne	r2,zero,800d490 <add_huff_table+0xd4>
		ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800d46c:	e0bffc17 	ldw	r2,-16(fp)
 800d470:	10800017 	ldw	r2,0(r2)
 800d474:	00c00244 	movi	r3,9
 800d478:	10c00515 	stw	r3,20(r2)
 800d47c:	e0bffc17 	ldw	r2,-16(fp)
 800d480:	10800017 	ldw	r2,0(r2)
 800d484:	10800017 	ldw	r2,0(r2)
 800d488:	e13ffc17 	ldw	r4,-16(fp)
 800d48c:	103ee83a 	callr	r2

	MEMCOPY((*htblptr)->huffval, val, nsymbols * SIZEOF(UINT8));
 800d490:	e0bffd17 	ldw	r2,-12(fp)
 800d494:	10800017 	ldw	r2,0(r2)
 800d498:	10c00444 	addi	r3,r2,17
 800d49c:	e0bffa17 	ldw	r2,-24(fp)
 800d4a0:	1809883a 	mov	r4,r3
 800d4a4:	e17fff17 	ldw	r5,-4(fp)
 800d4a8:	100d883a 	mov	r6,r2
 800d4ac:	802ebb00 	call	802ebb0 <memcpy>

	/* Initialize sent_table FALSE so table will be written to JPEG file. */
	(*htblptr)->sent_table = FALSE;
 800d4b0:	e0bffd17 	ldw	r2,-12(fp)
 800d4b4:	10800017 	ldw	r2,0(r2)
 800d4b8:	10004445 	stb	zero,273(r2)
}
 800d4bc:	e037883a 	mov	sp,fp
 800d4c0:	dfc00117 	ldw	ra,4(sp)
 800d4c4:	df000017 	ldw	fp,0(sp)
 800d4c8:	dec00204 	addi	sp,sp,8
 800d4cc:	f800283a 	ret

0800d4d0 <std_huff_tables>:

LOCAL(void)
	std_huff_tables (j_compress_ptr cinfo)
	/* Set up the standard Huffman tables (cf. JPEG standard section K.3) */
	/* IMPORTANT: these are only valid for 8-bit data precision! */
{
 800d4d0:	defffd04 	addi	sp,sp,-12
 800d4d4:	dfc00215 	stw	ra,8(sp)
 800d4d8:	df000115 	stw	fp,4(sp)
 800d4dc:	df000104 	addi	fp,sp,4
 800d4e0:	e13fff15 	stw	r4,-4(fp)
	0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda,
	0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9,
	0xea, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8,
	0xf9, 0xfa };

	add_huff_table(cinfo, &cinfo->dc_huff_tbl_ptrs[0],
 800d4e4:	e0bfff17 	ldw	r2,-4(fp)
 800d4e8:	10801d04 	addi	r2,r2,116
 800d4ec:	e13fff17 	ldw	r4,-4(fp)
 800d4f0:	100b883a 	mov	r5,r2
 800d4f4:	01820134 	movhi	r6,2052
 800d4f8:	31bcce04 	addi	r6,r6,-3272
 800d4fc:	01c20134 	movhi	r7,2052
 800d500:	39fcd244 	addi	r7,r7,-3255
 800d504:	800d3bc0 	call	800d3bc <add_huff_table>
		bits_dc_luminance, val_dc_luminance);
	add_huff_table(cinfo, &cinfo->ac_huff_tbl_ptrs[0],
 800d508:	e0bfff17 	ldw	r2,-4(fp)
 800d50c:	10802104 	addi	r2,r2,132
 800d510:	e13fff17 	ldw	r4,-4(fp)
 800d514:	100b883a 	mov	r5,r2
 800d518:	01820134 	movhi	r6,2052
 800d51c:	31bcd544 	addi	r6,r6,-3243
 800d520:	01c20134 	movhi	r7,2052
 800d524:	39fcd984 	addi	r7,r7,-3226
 800d528:	800d3bc0 	call	800d3bc <add_huff_table>
		bits_ac_luminance, val_ac_luminance);
	add_huff_table(cinfo, &cinfo->dc_huff_tbl_ptrs[1],
 800d52c:	e0bfff17 	ldw	r2,-4(fp)
 800d530:	10801e04 	addi	r2,r2,120
 800d534:	e13fff17 	ldw	r4,-4(fp)
 800d538:	100b883a 	mov	r5,r2
 800d53c:	01820134 	movhi	r6,2052
 800d540:	31bd0204 	addi	r6,r6,-3064
 800d544:	01c20134 	movhi	r7,2052
 800d548:	39fd0644 	addi	r7,r7,-3047
 800d54c:	800d3bc0 	call	800d3bc <add_huff_table>
		bits_dc_chrominance, val_dc_chrominance);
	add_huff_table(cinfo, &cinfo->ac_huff_tbl_ptrs[1],
 800d550:	e0bfff17 	ldw	r2,-4(fp)
 800d554:	10802204 	addi	r2,r2,136
 800d558:	e13fff17 	ldw	r4,-4(fp)
 800d55c:	100b883a 	mov	r5,r2
 800d560:	01820134 	movhi	r6,2052
 800d564:	31bd0944 	addi	r6,r6,-3035
 800d568:	01c20134 	movhi	r7,2052
 800d56c:	39fd0d84 	addi	r7,r7,-3018
 800d570:	800d3bc0 	call	800d3bc <add_huff_table>
		bits_ac_chrominance, val_ac_chrominance);
}
 800d574:	e037883a 	mov	sp,fp
 800d578:	dfc00117 	ldw	ra,4(sp)
 800d57c:	df000017 	ldw	fp,0(sp)
 800d580:	dec00204 	addi	sp,sp,8
 800d584:	f800283a 	ret

0800d588 <jpeg_set_defaults>:
* your code will still work (they'll be set to reasonable defaults).
*/

GLOBAL(void)
	jpeg_set_defaults (j_compress_ptr cinfo)
{
 800d588:	defffc04 	addi	sp,sp,-16
 800d58c:	dfc00315 	stw	ra,12(sp)
 800d590:	df000215 	stw	fp,8(sp)
 800d594:	df000204 	addi	fp,sp,8
 800d598:	e13fff15 	stw	r4,-4(fp)
	int i;

	/* Safety check to ensure start_compress not called yet. */
	if (cinfo->global_state != CSTATE_START)
 800d59c:	e0bfff17 	ldw	r2,-4(fp)
 800d5a0:	10800517 	ldw	r2,20(r2)
 800d5a4:	10801920 	cmpeqi	r2,r2,100
 800d5a8:	10000e1e 	bne	r2,zero,800d5e4 <jpeg_set_defaults+0x5c>
		ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800d5ac:	e0bfff17 	ldw	r2,-4(fp)
 800d5b0:	10800017 	ldw	r2,0(r2)
 800d5b4:	00c00544 	movi	r3,21
 800d5b8:	10c00515 	stw	r3,20(r2)
 800d5bc:	e0bfff17 	ldw	r2,-4(fp)
 800d5c0:	10800017 	ldw	r2,0(r2)
 800d5c4:	e0ffff17 	ldw	r3,-4(fp)
 800d5c8:	18c00517 	ldw	r3,20(r3)
 800d5cc:	10c00615 	stw	r3,24(r2)
 800d5d0:	e0bfff17 	ldw	r2,-4(fp)
 800d5d4:	10800017 	ldw	r2,0(r2)
 800d5d8:	10800017 	ldw	r2,0(r2)
 800d5dc:	e13fff17 	ldw	r4,-4(fp)
 800d5e0:	103ee83a 	callr	r2

	/* Allocate comp_info array large enough for maximum component count.
	* Array is made permanent in case application wants to compress
	* multiple images at same param settings.
	*/
	if (cinfo->comp_info == NULL)
 800d5e4:	e0bfff17 	ldw	r2,-4(fp)
 800d5e8:	10801417 	ldw	r2,80(r2)
 800d5ec:	1000091e 	bne	r2,zero,800d614 <jpeg_set_defaults+0x8c>
		cinfo->comp_info = (jpeg_component_info *)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800d5f0:	e0bfff17 	ldw	r2,-4(fp)
 800d5f4:	10800117 	ldw	r2,4(r2)
 800d5f8:	10800017 	ldw	r2,0(r2)
 800d5fc:	e13fff17 	ldw	r4,-4(fp)
 800d600:	000b883a 	mov	r5,zero
 800d604:	0180dc04 	movi	r6,880
 800d608:	103ee83a 	callr	r2
	/* Allocate comp_info array large enough for maximum component count.
	* Array is made permanent in case application wants to compress
	* multiple images at same param settings.
	*/
	if (cinfo->comp_info == NULL)
		cinfo->comp_info = (jpeg_component_info *)
 800d60c:	e0ffff17 	ldw	r3,-4(fp)
 800d610:	18801415 	stw	r2,80(r3)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
		MAX_COMPONENTS * SIZEOF(jpeg_component_info));

	/* Initialize everything not dependent on the color space */

	cinfo->scale_num = 1;		/* 1:1 scaling */
 800d614:	e0bfff17 	ldw	r2,-4(fp)
 800d618:	00c00044 	movi	r3,1
 800d61c:	10c00d15 	stw	r3,52(r2)
	cinfo->scale_denom = 1;
 800d620:	e0bfff17 	ldw	r2,-4(fp)
 800d624:	00c00044 	movi	r3,1
 800d628:	10c00e15 	stw	r3,56(r2)
	cinfo->data_precision = BITS_IN_JSAMPLE;
 800d62c:	e0bfff17 	ldw	r2,-4(fp)
 800d630:	00c00204 	movi	r3,8
 800d634:	10c01115 	stw	r3,68(r2)
	/* Set up two quantization tables using default quality of 75 */
	jpeg_set_quality(cinfo, 75, TRUE);
 800d638:	e13fff17 	ldw	r4,-4(fp)
 800d63c:	014012c4 	movi	r5,75
 800d640:	01800044 	movi	r6,1
 800d644:	800d3680 	call	800d368 <jpeg_set_quality>
	/* Set up two Huffman tables */
	std_huff_tables(cinfo);
 800d648:	e13fff17 	ldw	r4,-4(fp)
 800d64c:	800d4d00 	call	800d4d0 <std_huff_tables>

	/* Initialize default arithmetic coding conditioning */
	for (i = 0; i < NUM_ARITH_TBLS; i++) {
 800d650:	e03ffe15 	stw	zero,-8(fp)
 800d654:	00001406 	br	800d6a8 <jpeg_set_defaults+0x120>
		cinfo->arith_dc_L[i] = 0;
 800d658:	e0ffff17 	ldw	r3,-4(fp)
 800d65c:	e0bffe17 	ldw	r2,-8(fp)
 800d660:	1885883a 	add	r2,r3,r2
 800d664:	10802504 	addi	r2,r2,148
 800d668:	10000005 	stb	zero,0(r2)
		cinfo->arith_dc_U[i] = 1;
 800d66c:	e0ffff17 	ldw	r3,-4(fp)
 800d670:	e0bffe17 	ldw	r2,-8(fp)
 800d674:	1885883a 	add	r2,r3,r2
 800d678:	10802904 	addi	r2,r2,164
 800d67c:	00c00044 	movi	r3,1
 800d680:	10c00005 	stb	r3,0(r2)
		cinfo->arith_ac_K[i] = 5;
 800d684:	e0ffff17 	ldw	r3,-4(fp)
 800d688:	e0bffe17 	ldw	r2,-8(fp)
 800d68c:	1885883a 	add	r2,r3,r2
 800d690:	10802d04 	addi	r2,r2,180
 800d694:	00c00144 	movi	r3,5
 800d698:	10c00005 	stb	r3,0(r2)
	jpeg_set_quality(cinfo, 75, TRUE);
	/* Set up two Huffman tables */
	std_huff_tables(cinfo);

	/* Initialize default arithmetic coding conditioning */
	for (i = 0; i < NUM_ARITH_TBLS; i++) {
 800d69c:	e0bffe17 	ldw	r2,-8(fp)
 800d6a0:	10800044 	addi	r2,r2,1
 800d6a4:	e0bffe15 	stw	r2,-8(fp)
 800d6a8:	e0bffe17 	ldw	r2,-8(fp)
 800d6ac:	10800410 	cmplti	r2,r2,16
 800d6b0:	103fe91e 	bne	r2,zero,800d658 <jpeg_set_defaults+0xd0>
		cinfo->arith_dc_U[i] = 1;
		cinfo->arith_ac_K[i] = 5;
	}

	/* Default is no multiple-scan output */
	cinfo->scan_info = NULL;
 800d6b4:	e0bfff17 	ldw	r2,-4(fp)
 800d6b8:	10003215 	stw	zero,200(r2)
	cinfo->num_scans = 0;
 800d6bc:	e0bfff17 	ldw	r2,-4(fp)
 800d6c0:	10003115 	stw	zero,196(r2)

	/* Expect normal source image, not raw downsampled data */
	cinfo->raw_data_in = FALSE;
 800d6c4:	e0bfff17 	ldw	r2,-4(fp)
 800d6c8:	10003305 	stb	zero,204(r2)

	/* Use Huffman coding, not arithmetic coding, by default */
	cinfo->arith_code = FALSE;
 800d6cc:	e0bfff17 	ldw	r2,-4(fp)
 800d6d0:	10003345 	stb	zero,205(r2)

	/* By default, don't do extra passes to optimize entropy coding */
	cinfo->optimize_coding = FALSE;
 800d6d4:	e0bfff17 	ldw	r2,-4(fp)
 800d6d8:	10003385 	stb	zero,206(r2)
	/* The standard Huffman tables are only valid for 8-bit data precision.
	* If the precision is higher, force optimization on so that usable
	* tables will be computed.  This test can be removed if default tables
	* are supplied that are valid for the desired precision.
	*/
	if (cinfo->data_precision > 8)
 800d6dc:	e0bfff17 	ldw	r2,-4(fp)
 800d6e0:	10801117 	ldw	r2,68(r2)
 800d6e4:	10800250 	cmplti	r2,r2,9
 800d6e8:	1000031e 	bne	r2,zero,800d6f8 <jpeg_set_defaults+0x170>
		cinfo->optimize_coding = TRUE;
 800d6ec:	e0bfff17 	ldw	r2,-4(fp)
 800d6f0:	00c00044 	movi	r3,1
 800d6f4:	10c03385 	stb	r3,206(r2)

	/* By default, use the simpler non-cosited sampling alignment */
	cinfo->CCIR601_sampling = FALSE;
 800d6f8:	e0bfff17 	ldw	r2,-4(fp)
 800d6fc:	100033c5 	stb	zero,207(r2)

	/* By default, apply fancy downsampling */
	cinfo->do_fancy_downsampling = TRUE;
 800d700:	e0bfff17 	ldw	r2,-4(fp)
 800d704:	00c00044 	movi	r3,1
 800d708:	10c03405 	stb	r3,208(r2)

	/* No input smoothing */
	cinfo->smoothing_factor = 0;
 800d70c:	e0bfff17 	ldw	r2,-4(fp)
 800d710:	10003515 	stw	zero,212(r2)

	/* DCT algorithm preference */
	cinfo->dct_method = JDCT_DEFAULT;
 800d714:	e0bfff17 	ldw	r2,-4(fp)
 800d718:	00c00044 	movi	r3,1
 800d71c:	10c03615 	stw	r3,216(r2)

	/* No restart markers */
	cinfo->restart_interval = 0;
 800d720:	e0bfff17 	ldw	r2,-4(fp)
 800d724:	10003715 	stw	zero,220(r2)
	cinfo->restart_in_rows = 0;
 800d728:	e0bfff17 	ldw	r2,-4(fp)
 800d72c:	10003815 	stw	zero,224(r2)
	* An application that wants to emit JFIF 1.02 extension markers should set
	* JFIF_minor_version to 2.  We could probably get away with just defaulting
	* to 1.02, but there may still be some decoders in use that will complain
	* about that; saying 1.01 should minimize compatibility problems.
	*/
	cinfo->JFIF_major_version = 1; /* Default JFIF version = 1.01 */
 800d730:	e0bfff17 	ldw	r2,-4(fp)
 800d734:	00c00044 	movi	r3,1
 800d738:	10c03945 	stb	r3,229(r2)
	cinfo->JFIF_minor_version = 1;
 800d73c:	e0bfff17 	ldw	r2,-4(fp)
 800d740:	00c00044 	movi	r3,1
 800d744:	10c03985 	stb	r3,230(r2)
	cinfo->density_unit = 0;	/* Pixel size is unknown by default */
 800d748:	e0bfff17 	ldw	r2,-4(fp)
 800d74c:	100039c5 	stb	zero,231(r2)
	cinfo->X_density = 1;		/* Pixel aspect ratio is square by default */
 800d750:	e0bfff17 	ldw	r2,-4(fp)
 800d754:	00c00044 	movi	r3,1
 800d758:	10c03a0d 	sth	r3,232(r2)
	cinfo->Y_density = 1;
 800d75c:	e0bfff17 	ldw	r2,-4(fp)
 800d760:	00c00044 	movi	r3,1
 800d764:	10c03a8d 	sth	r3,234(r2)

	/* Choose JPEG colorspace based on input space, set defaults accordingly */

	jpeg_default_colorspace(cinfo);
 800d768:	e13fff17 	ldw	r4,-4(fp)
 800d76c:	800d7840 	call	800d784 <jpeg_default_colorspace>
}
 800d770:	e037883a 	mov	sp,fp
 800d774:	dfc00117 	ldw	ra,4(sp)
 800d778:	df000017 	ldw	fp,0(sp)
 800d77c:	dec00204 	addi	sp,sp,8
 800d780:	f800283a 	ret

0800d784 <jpeg_default_colorspace>:
* Select an appropriate JPEG colorspace for in_color_space.
*/

GLOBAL(void)
	jpeg_default_colorspace (j_compress_ptr cinfo)
{
 800d784:	defffd04 	addi	sp,sp,-12
 800d788:	dfc00215 	stw	ra,8(sp)
 800d78c:	df000115 	stw	fp,4(sp)
 800d790:	df000104 	addi	fp,sp,4
 800d794:	e13fff15 	stw	r4,-4(fp)
	switch (cinfo->in_color_space) {
 800d798:	e0bfff17 	ldw	r2,-4(fp)
 800d79c:	10800a17 	ldw	r2,40(r2)
 800d7a0:	10c001a8 	cmpgeui	r3,r2,6
 800d7a4:	1800251e 	bne	r3,zero,800d83c <jpeg_default_colorspace+0xb8>
 800d7a8:	1085883a 	add	r2,r2,r2
 800d7ac:	1087883a 	add	r3,r2,r2
 800d7b0:	00820074 	movhi	r2,2049
 800d7b4:	10b5f104 	addi	r2,r2,-10300
 800d7b8:	1885883a 	add	r2,r3,r2
 800d7bc:	10800017 	ldw	r2,0(r2)
 800d7c0:	1000683a 	jmp	r2
 800d7c4:	0800d82c 	andhi	zero,at,864
 800d7c8:	0800d7dc 	xori	zero,at,863
 800d7cc:	0800d7ec 	andhi	zero,at,863
 800d7d0:	0800d7fc 	xorhi	zero,at,863
 800d7d4:	0800d80c 	andi	zero,at,864
 800d7d8:	0800d81c 	xori	zero,at,864
	case JCS_GRAYSCALE:
		jpeg_set_colorspace(cinfo, JCS_GRAYSCALE);
 800d7dc:	e13fff17 	ldw	r4,-4(fp)
 800d7e0:	01400044 	movi	r5,1
 800d7e4:	800d8740 	call	800d874 <jpeg_set_colorspace>
		break;
 800d7e8:	00001d06 	br	800d860 <jpeg_default_colorspace+0xdc>
	case JCS_RGB:
		jpeg_set_colorspace(cinfo, JCS_YCbCr);
 800d7ec:	e13fff17 	ldw	r4,-4(fp)
 800d7f0:	014000c4 	movi	r5,3
 800d7f4:	800d8740 	call	800d874 <jpeg_set_colorspace>
		break;
 800d7f8:	00001906 	br	800d860 <jpeg_default_colorspace+0xdc>
	case JCS_YCbCr:
		jpeg_set_colorspace(cinfo, JCS_YCbCr);
 800d7fc:	e13fff17 	ldw	r4,-4(fp)
 800d800:	014000c4 	movi	r5,3
 800d804:	800d8740 	call	800d874 <jpeg_set_colorspace>
		break;
 800d808:	00001506 	br	800d860 <jpeg_default_colorspace+0xdc>
	case JCS_CMYK:
		jpeg_set_colorspace(cinfo, JCS_CMYK); /* By default, no translation */
 800d80c:	e13fff17 	ldw	r4,-4(fp)
 800d810:	01400104 	movi	r5,4
 800d814:	800d8740 	call	800d874 <jpeg_set_colorspace>
		break;
 800d818:	00001106 	br	800d860 <jpeg_default_colorspace+0xdc>
	case JCS_YCCK:
		jpeg_set_colorspace(cinfo, JCS_YCCK);
 800d81c:	e13fff17 	ldw	r4,-4(fp)
 800d820:	01400144 	movi	r5,5
 800d824:	800d8740 	call	800d874 <jpeg_set_colorspace>
		break;
 800d828:	00000d06 	br	800d860 <jpeg_default_colorspace+0xdc>
	case JCS_UNKNOWN:
		jpeg_set_colorspace(cinfo, JCS_UNKNOWN);
 800d82c:	e13fff17 	ldw	r4,-4(fp)
 800d830:	000b883a 	mov	r5,zero
 800d834:	800d8740 	call	800d874 <jpeg_set_colorspace>
		break;
 800d838:	00000906 	br	800d860 <jpeg_default_colorspace+0xdc>
	default:
		ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
 800d83c:	e0bfff17 	ldw	r2,-4(fp)
 800d840:	10800017 	ldw	r2,0(r2)
 800d844:	00c00284 	movi	r3,10
 800d848:	10c00515 	stw	r3,20(r2)
 800d84c:	e0bfff17 	ldw	r2,-4(fp)
 800d850:	10800017 	ldw	r2,0(r2)
 800d854:	10800017 	ldw	r2,0(r2)
 800d858:	e13fff17 	ldw	r4,-4(fp)
 800d85c:	103ee83a 	callr	r2
	}
}
 800d860:	e037883a 	mov	sp,fp
 800d864:	dfc00117 	ldw	ra,4(sp)
 800d868:	df000017 	ldw	fp,0(sp)
 800d86c:	dec00204 	addi	sp,sp,8
 800d870:	f800283a 	ret

0800d874 <jpeg_set_colorspace>:
* Set the JPEG colorspace, and choose colorspace-dependent default values.
*/

GLOBAL(void)
	jpeg_set_colorspace (j_compress_ptr cinfo, J_COLOR_SPACE colorspace)
{
 800d874:	defff904 	addi	sp,sp,-28
 800d878:	dfc00615 	stw	ra,24(sp)
 800d87c:	df000515 	stw	fp,20(sp)
 800d880:	dc000415 	stw	r16,16(sp)
 800d884:	df000404 	addi	fp,sp,16
 800d888:	e13ffe15 	stw	r4,-8(fp)
 800d88c:	e17fff15 	stw	r5,-4(fp)
	compptr->quant_tbl_no = (quant), \
	compptr->dc_tbl_no = (dctbl), \
	compptr->ac_tbl_no = (actbl) )

	/* Safety check to ensure start_compress not called yet. */
	if (cinfo->global_state != CSTATE_START)
 800d890:	e0bffe17 	ldw	r2,-8(fp)
 800d894:	10800517 	ldw	r2,20(r2)
 800d898:	10801920 	cmpeqi	r2,r2,100
 800d89c:	10000e1e 	bne	r2,zero,800d8d8 <jpeg_set_colorspace+0x64>
		ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800d8a0:	e0bffe17 	ldw	r2,-8(fp)
 800d8a4:	10800017 	ldw	r2,0(r2)
 800d8a8:	00c00544 	movi	r3,21
 800d8ac:	10c00515 	stw	r3,20(r2)
 800d8b0:	e0bffe17 	ldw	r2,-8(fp)
 800d8b4:	10800017 	ldw	r2,0(r2)
 800d8b8:	e0fffe17 	ldw	r3,-8(fp)
 800d8bc:	18c00517 	ldw	r3,20(r3)
 800d8c0:	10c00615 	stw	r3,24(r2)
 800d8c4:	e0bffe17 	ldw	r2,-8(fp)
 800d8c8:	10800017 	ldw	r2,0(r2)
 800d8cc:	10800017 	ldw	r2,0(r2)
 800d8d0:	e13ffe17 	ldw	r4,-8(fp)
 800d8d4:	103ee83a 	callr	r2

	/* For all colorspaces, we use Q and Huff tables 0 for luminance components,
	* tables 1 for chrominance components.
	*/

	cinfo->jpeg_color_space = colorspace;
 800d8d8:	e0bffe17 	ldw	r2,-8(fp)
 800d8dc:	e0ffff17 	ldw	r3,-4(fp)
 800d8e0:	10c01315 	stw	r3,76(r2)

	cinfo->write_JFIF_header = FALSE; /* No marker for non-JFIF colorspaces */
 800d8e4:	e0bffe17 	ldw	r2,-8(fp)
 800d8e8:	10003905 	stb	zero,228(r2)
	cinfo->write_Adobe_marker = FALSE; /* write no Adobe marker by default */
 800d8ec:	e0bffe17 	ldw	r2,-8(fp)
 800d8f0:	10003b05 	stb	zero,236(r2)

	switch (colorspace) {
 800d8f4:	e0bfff17 	ldw	r2,-4(fp)
 800d8f8:	108001a8 	cmpgeui	r2,r2,6
 800d8fc:	1001931e 	bne	r2,zero,800df4c <jpeg_set_colorspace+0x6d8>
 800d900:	e0bfff17 	ldw	r2,-4(fp)
 800d904:	1085883a 	add	r2,r2,r2
 800d908:	1087883a 	add	r3,r2,r2
 800d90c:	00820074 	movhi	r2,2049
 800d910:	10b64804 	addi	r2,r2,-9952
 800d914:	1885883a 	add	r2,r3,r2
 800d918:	10800017 	ldw	r2,0(r2)
 800d91c:	1000683a 	jmp	r2
 800d920:	0800de54 	ori	zero,at,889
 800d924:	0800d938 	rdprs	zero,at,868
 800d928:	0800d99c 	xori	zero,at,870
 800d92c:	0800da98 	cmpnei	zero,at,874
 800d930:	0800dbac 	andhi	zero,at,878
 800d934:	0800dcf4 	orhi	zero,at,883
	case JCS_GRAYSCALE:
		cinfo->write_JFIF_header = TRUE; /* Write a JFIF marker */
 800d938:	e0bffe17 	ldw	r2,-8(fp)
 800d93c:	00c00044 	movi	r3,1
 800d940:	10c03905 	stb	r3,228(r2)
		cinfo->num_components = 1;
 800d944:	e0bffe17 	ldw	r2,-8(fp)
 800d948:	00c00044 	movi	r3,1
 800d94c:	10c01215 	stw	r3,72(r2)
		/* JFIF specifies component ID 1 */
		SET_COMP(0, 1, 1,1, 0, 0,0);
 800d950:	e0bffe17 	ldw	r2,-8(fp)
 800d954:	10801417 	ldw	r2,80(r2)
 800d958:	e0bffd15 	stw	r2,-12(fp)
 800d95c:	e0bffd17 	ldw	r2,-12(fp)
 800d960:	00c00044 	movi	r3,1
 800d964:	10c00015 	stw	r3,0(r2)
 800d968:	e0bffd17 	ldw	r2,-12(fp)
 800d96c:	00c00044 	movi	r3,1
 800d970:	10c00215 	stw	r3,8(r2)
 800d974:	e0bffd17 	ldw	r2,-12(fp)
 800d978:	00c00044 	movi	r3,1
 800d97c:	10c00315 	stw	r3,12(r2)
 800d980:	e0bffd17 	ldw	r2,-12(fp)
 800d984:	10000415 	stw	zero,16(r2)
 800d988:	e0bffd17 	ldw	r2,-12(fp)
 800d98c:	10000515 	stw	zero,20(r2)
 800d990:	e0bffd17 	ldw	r2,-12(fp)
 800d994:	10000615 	stw	zero,24(r2)
		break;
 800d998:	00017506 	br	800df70 <jpeg_set_colorspace+0x6fc>
	case JCS_RGB:
		cinfo->write_Adobe_marker = TRUE; /* write Adobe marker to flag RGB */
 800d99c:	e0bffe17 	ldw	r2,-8(fp)
 800d9a0:	00c00044 	movi	r3,1
 800d9a4:	10c03b05 	stb	r3,236(r2)
		cinfo->num_components = 3;
 800d9a8:	e0bffe17 	ldw	r2,-8(fp)
 800d9ac:	00c000c4 	movi	r3,3
 800d9b0:	10c01215 	stw	r3,72(r2)
		SET_COMP(0, 0x52 /* 'R' */, 1,1, 0, 0,0);
 800d9b4:	e0bffe17 	ldw	r2,-8(fp)
 800d9b8:	10801417 	ldw	r2,80(r2)
 800d9bc:	e0bffd15 	stw	r2,-12(fp)
 800d9c0:	e0bffd17 	ldw	r2,-12(fp)
 800d9c4:	00c01484 	movi	r3,82
 800d9c8:	10c00015 	stw	r3,0(r2)
 800d9cc:	e0bffd17 	ldw	r2,-12(fp)
 800d9d0:	00c00044 	movi	r3,1
 800d9d4:	10c00215 	stw	r3,8(r2)
 800d9d8:	e0bffd17 	ldw	r2,-12(fp)
 800d9dc:	00c00044 	movi	r3,1
 800d9e0:	10c00315 	stw	r3,12(r2)
 800d9e4:	e0bffd17 	ldw	r2,-12(fp)
 800d9e8:	10000415 	stw	zero,16(r2)
 800d9ec:	e0bffd17 	ldw	r2,-12(fp)
 800d9f0:	10000515 	stw	zero,20(r2)
 800d9f4:	e0bffd17 	ldw	r2,-12(fp)
 800d9f8:	10000615 	stw	zero,24(r2)
		SET_COMP(1, 0x47 /* 'G' */, 1,1, 0, 0,0);
 800d9fc:	e0bffe17 	ldw	r2,-8(fp)
 800da00:	10801417 	ldw	r2,80(r2)
 800da04:	10801604 	addi	r2,r2,88
 800da08:	e0bffd15 	stw	r2,-12(fp)
 800da0c:	e0bffd17 	ldw	r2,-12(fp)
 800da10:	00c011c4 	movi	r3,71
 800da14:	10c00015 	stw	r3,0(r2)
 800da18:	e0bffd17 	ldw	r2,-12(fp)
 800da1c:	00c00044 	movi	r3,1
 800da20:	10c00215 	stw	r3,8(r2)
 800da24:	e0bffd17 	ldw	r2,-12(fp)
 800da28:	00c00044 	movi	r3,1
 800da2c:	10c00315 	stw	r3,12(r2)
 800da30:	e0bffd17 	ldw	r2,-12(fp)
 800da34:	10000415 	stw	zero,16(r2)
 800da38:	e0bffd17 	ldw	r2,-12(fp)
 800da3c:	10000515 	stw	zero,20(r2)
 800da40:	e0bffd17 	ldw	r2,-12(fp)
 800da44:	10000615 	stw	zero,24(r2)
		SET_COMP(2, 0x42 /* 'B' */, 1,1, 0, 0,0);
 800da48:	e0bffe17 	ldw	r2,-8(fp)
 800da4c:	10801417 	ldw	r2,80(r2)
 800da50:	10802c04 	addi	r2,r2,176
 800da54:	e0bffd15 	stw	r2,-12(fp)
 800da58:	e0bffd17 	ldw	r2,-12(fp)
 800da5c:	00c01084 	movi	r3,66
 800da60:	10c00015 	stw	r3,0(r2)
 800da64:	e0bffd17 	ldw	r2,-12(fp)
 800da68:	00c00044 	movi	r3,1
 800da6c:	10c00215 	stw	r3,8(r2)
 800da70:	e0bffd17 	ldw	r2,-12(fp)
 800da74:	00c00044 	movi	r3,1
 800da78:	10c00315 	stw	r3,12(r2)
 800da7c:	e0bffd17 	ldw	r2,-12(fp)
 800da80:	10000415 	stw	zero,16(r2)
 800da84:	e0bffd17 	ldw	r2,-12(fp)
 800da88:	10000515 	stw	zero,20(r2)
 800da8c:	e0bffd17 	ldw	r2,-12(fp)
 800da90:	10000615 	stw	zero,24(r2)
		break;
 800da94:	00013606 	br	800df70 <jpeg_set_colorspace+0x6fc>
	case JCS_YCbCr:
		cinfo->write_JFIF_header = TRUE; /* Write a JFIF marker */
 800da98:	e0bffe17 	ldw	r2,-8(fp)
 800da9c:	00c00044 	movi	r3,1
 800daa0:	10c03905 	stb	r3,228(r2)
		cinfo->num_components = 3;
 800daa4:	e0bffe17 	ldw	r2,-8(fp)
 800daa8:	00c000c4 	movi	r3,3
 800daac:	10c01215 	stw	r3,72(r2)
		/* JFIF specifies component IDs 1,2,3 */
		/* We default to 2x2 subsamples of chrominance */
		SET_COMP(0, 1, 2,2, 0, 0,0);
 800dab0:	e0bffe17 	ldw	r2,-8(fp)
 800dab4:	10801417 	ldw	r2,80(r2)
 800dab8:	e0bffd15 	stw	r2,-12(fp)
 800dabc:	e0bffd17 	ldw	r2,-12(fp)
 800dac0:	00c00044 	movi	r3,1
 800dac4:	10c00015 	stw	r3,0(r2)
 800dac8:	e0bffd17 	ldw	r2,-12(fp)
 800dacc:	00c00084 	movi	r3,2
 800dad0:	10c00215 	stw	r3,8(r2)
 800dad4:	e0bffd17 	ldw	r2,-12(fp)
 800dad8:	00c00084 	movi	r3,2
 800dadc:	10c00315 	stw	r3,12(r2)
 800dae0:	e0bffd17 	ldw	r2,-12(fp)
 800dae4:	10000415 	stw	zero,16(r2)
 800dae8:	e0bffd17 	ldw	r2,-12(fp)
 800daec:	10000515 	stw	zero,20(r2)
 800daf0:	e0bffd17 	ldw	r2,-12(fp)
 800daf4:	10000615 	stw	zero,24(r2)
		SET_COMP(1, 2, 1,1, 1, 1,1);
 800daf8:	e0bffe17 	ldw	r2,-8(fp)
 800dafc:	10801417 	ldw	r2,80(r2)
 800db00:	10801604 	addi	r2,r2,88
 800db04:	e0bffd15 	stw	r2,-12(fp)
 800db08:	e0bffd17 	ldw	r2,-12(fp)
 800db0c:	00c00084 	movi	r3,2
 800db10:	10c00015 	stw	r3,0(r2)
 800db14:	e0bffd17 	ldw	r2,-12(fp)
 800db18:	00c00044 	movi	r3,1
 800db1c:	10c00215 	stw	r3,8(r2)
 800db20:	e0bffd17 	ldw	r2,-12(fp)
 800db24:	00c00044 	movi	r3,1
 800db28:	10c00315 	stw	r3,12(r2)
 800db2c:	e0bffd17 	ldw	r2,-12(fp)
 800db30:	00c00044 	movi	r3,1
 800db34:	10c00415 	stw	r3,16(r2)
 800db38:	e0bffd17 	ldw	r2,-12(fp)
 800db3c:	00c00044 	movi	r3,1
 800db40:	10c00515 	stw	r3,20(r2)
 800db44:	e0bffd17 	ldw	r2,-12(fp)
 800db48:	00c00044 	movi	r3,1
 800db4c:	10c00615 	stw	r3,24(r2)
		SET_COMP(2, 3, 1,1, 1, 1,1);
 800db50:	e0bffe17 	ldw	r2,-8(fp)
 800db54:	10801417 	ldw	r2,80(r2)
 800db58:	10802c04 	addi	r2,r2,176
 800db5c:	e0bffd15 	stw	r2,-12(fp)
 800db60:	e0bffd17 	ldw	r2,-12(fp)
 800db64:	00c000c4 	movi	r3,3
 800db68:	10c00015 	stw	r3,0(r2)
 800db6c:	e0bffd17 	ldw	r2,-12(fp)
 800db70:	00c00044 	movi	r3,1
 800db74:	10c00215 	stw	r3,8(r2)
 800db78:	e0bffd17 	ldw	r2,-12(fp)
 800db7c:	00c00044 	movi	r3,1
 800db80:	10c00315 	stw	r3,12(r2)
 800db84:	e0bffd17 	ldw	r2,-12(fp)
 800db88:	00c00044 	movi	r3,1
 800db8c:	10c00415 	stw	r3,16(r2)
 800db90:	e0bffd17 	ldw	r2,-12(fp)
 800db94:	00c00044 	movi	r3,1
 800db98:	10c00515 	stw	r3,20(r2)
 800db9c:	e0bffd17 	ldw	r2,-12(fp)
 800dba0:	00c00044 	movi	r3,1
 800dba4:	10c00615 	stw	r3,24(r2)
		break;
 800dba8:	0000f106 	br	800df70 <jpeg_set_colorspace+0x6fc>
	case JCS_CMYK:
		cinfo->write_Adobe_marker = TRUE; /* write Adobe marker to flag CMYK */
 800dbac:	e0bffe17 	ldw	r2,-8(fp)
 800dbb0:	00c00044 	movi	r3,1
 800dbb4:	10c03b05 	stb	r3,236(r2)
		cinfo->num_components = 4;
 800dbb8:	e0bffe17 	ldw	r2,-8(fp)
 800dbbc:	00c00104 	movi	r3,4
 800dbc0:	10c01215 	stw	r3,72(r2)
		SET_COMP(0, 0x43 /* 'C' */, 1,1, 0, 0,0);
 800dbc4:	e0bffe17 	ldw	r2,-8(fp)
 800dbc8:	10801417 	ldw	r2,80(r2)
 800dbcc:	e0bffd15 	stw	r2,-12(fp)
 800dbd0:	e0bffd17 	ldw	r2,-12(fp)
 800dbd4:	00c010c4 	movi	r3,67
 800dbd8:	10c00015 	stw	r3,0(r2)
 800dbdc:	e0bffd17 	ldw	r2,-12(fp)
 800dbe0:	00c00044 	movi	r3,1
 800dbe4:	10c00215 	stw	r3,8(r2)
 800dbe8:	e0bffd17 	ldw	r2,-12(fp)
 800dbec:	00c00044 	movi	r3,1
 800dbf0:	10c00315 	stw	r3,12(r2)
 800dbf4:	e0bffd17 	ldw	r2,-12(fp)
 800dbf8:	10000415 	stw	zero,16(r2)
 800dbfc:	e0bffd17 	ldw	r2,-12(fp)
 800dc00:	10000515 	stw	zero,20(r2)
 800dc04:	e0bffd17 	ldw	r2,-12(fp)
 800dc08:	10000615 	stw	zero,24(r2)
		SET_COMP(1, 0x4D /* 'M' */, 1,1, 0, 0,0);
 800dc0c:	e0bffe17 	ldw	r2,-8(fp)
 800dc10:	10801417 	ldw	r2,80(r2)
 800dc14:	10801604 	addi	r2,r2,88
 800dc18:	e0bffd15 	stw	r2,-12(fp)
 800dc1c:	e0bffd17 	ldw	r2,-12(fp)
 800dc20:	00c01344 	movi	r3,77
 800dc24:	10c00015 	stw	r3,0(r2)
 800dc28:	e0bffd17 	ldw	r2,-12(fp)
 800dc2c:	00c00044 	movi	r3,1
 800dc30:	10c00215 	stw	r3,8(r2)
 800dc34:	e0bffd17 	ldw	r2,-12(fp)
 800dc38:	00c00044 	movi	r3,1
 800dc3c:	10c00315 	stw	r3,12(r2)
 800dc40:	e0bffd17 	ldw	r2,-12(fp)
 800dc44:	10000415 	stw	zero,16(r2)
 800dc48:	e0bffd17 	ldw	r2,-12(fp)
 800dc4c:	10000515 	stw	zero,20(r2)
 800dc50:	e0bffd17 	ldw	r2,-12(fp)
 800dc54:	10000615 	stw	zero,24(r2)
		SET_COMP(2, 0x59 /* 'Y' */, 1,1, 0, 0,0);
 800dc58:	e0bffe17 	ldw	r2,-8(fp)
 800dc5c:	10801417 	ldw	r2,80(r2)
 800dc60:	10802c04 	addi	r2,r2,176
 800dc64:	e0bffd15 	stw	r2,-12(fp)
 800dc68:	e0bffd17 	ldw	r2,-12(fp)
 800dc6c:	00c01644 	movi	r3,89
 800dc70:	10c00015 	stw	r3,0(r2)
 800dc74:	e0bffd17 	ldw	r2,-12(fp)
 800dc78:	00c00044 	movi	r3,1
 800dc7c:	10c00215 	stw	r3,8(r2)
 800dc80:	e0bffd17 	ldw	r2,-12(fp)
 800dc84:	00c00044 	movi	r3,1
 800dc88:	10c00315 	stw	r3,12(r2)
 800dc8c:	e0bffd17 	ldw	r2,-12(fp)
 800dc90:	10000415 	stw	zero,16(r2)
 800dc94:	e0bffd17 	ldw	r2,-12(fp)
 800dc98:	10000515 	stw	zero,20(r2)
 800dc9c:	e0bffd17 	ldw	r2,-12(fp)
 800dca0:	10000615 	stw	zero,24(r2)
		SET_COMP(3, 0x4B /* 'K' */, 1,1, 0, 0,0);
 800dca4:	e0bffe17 	ldw	r2,-8(fp)
 800dca8:	10801417 	ldw	r2,80(r2)
 800dcac:	10804204 	addi	r2,r2,264
 800dcb0:	e0bffd15 	stw	r2,-12(fp)
 800dcb4:	e0bffd17 	ldw	r2,-12(fp)
 800dcb8:	00c012c4 	movi	r3,75
 800dcbc:	10c00015 	stw	r3,0(r2)
 800dcc0:	e0bffd17 	ldw	r2,-12(fp)
 800dcc4:	00c00044 	movi	r3,1
 800dcc8:	10c00215 	stw	r3,8(r2)
 800dccc:	e0bffd17 	ldw	r2,-12(fp)
 800dcd0:	00c00044 	movi	r3,1
 800dcd4:	10c00315 	stw	r3,12(r2)
 800dcd8:	e0bffd17 	ldw	r2,-12(fp)
 800dcdc:	10000415 	stw	zero,16(r2)
 800dce0:	e0bffd17 	ldw	r2,-12(fp)
 800dce4:	10000515 	stw	zero,20(r2)
 800dce8:	e0bffd17 	ldw	r2,-12(fp)
 800dcec:	10000615 	stw	zero,24(r2)
		break;
 800dcf0:	00009f06 	br	800df70 <jpeg_set_colorspace+0x6fc>
	case JCS_YCCK:
		cinfo->write_Adobe_marker = TRUE; /* write Adobe marker to flag YCCK */
 800dcf4:	e0bffe17 	ldw	r2,-8(fp)
 800dcf8:	00c00044 	movi	r3,1
 800dcfc:	10c03b05 	stb	r3,236(r2)
		cinfo->num_components = 4;
 800dd00:	e0bffe17 	ldw	r2,-8(fp)
 800dd04:	00c00104 	movi	r3,4
 800dd08:	10c01215 	stw	r3,72(r2)
		SET_COMP(0, 1, 2,2, 0, 0,0);
 800dd0c:	e0bffe17 	ldw	r2,-8(fp)
 800dd10:	10801417 	ldw	r2,80(r2)
 800dd14:	e0bffd15 	stw	r2,-12(fp)
 800dd18:	e0bffd17 	ldw	r2,-12(fp)
 800dd1c:	00c00044 	movi	r3,1
 800dd20:	10c00015 	stw	r3,0(r2)
 800dd24:	e0bffd17 	ldw	r2,-12(fp)
 800dd28:	00c00084 	movi	r3,2
 800dd2c:	10c00215 	stw	r3,8(r2)
 800dd30:	e0bffd17 	ldw	r2,-12(fp)
 800dd34:	00c00084 	movi	r3,2
 800dd38:	10c00315 	stw	r3,12(r2)
 800dd3c:	e0bffd17 	ldw	r2,-12(fp)
 800dd40:	10000415 	stw	zero,16(r2)
 800dd44:	e0bffd17 	ldw	r2,-12(fp)
 800dd48:	10000515 	stw	zero,20(r2)
 800dd4c:	e0bffd17 	ldw	r2,-12(fp)
 800dd50:	10000615 	stw	zero,24(r2)
		SET_COMP(1, 2, 1,1, 1, 1,1);
 800dd54:	e0bffe17 	ldw	r2,-8(fp)
 800dd58:	10801417 	ldw	r2,80(r2)
 800dd5c:	10801604 	addi	r2,r2,88
 800dd60:	e0bffd15 	stw	r2,-12(fp)
 800dd64:	e0bffd17 	ldw	r2,-12(fp)
 800dd68:	00c00084 	movi	r3,2
 800dd6c:	10c00015 	stw	r3,0(r2)
 800dd70:	e0bffd17 	ldw	r2,-12(fp)
 800dd74:	00c00044 	movi	r3,1
 800dd78:	10c00215 	stw	r3,8(r2)
 800dd7c:	e0bffd17 	ldw	r2,-12(fp)
 800dd80:	00c00044 	movi	r3,1
 800dd84:	10c00315 	stw	r3,12(r2)
 800dd88:	e0bffd17 	ldw	r2,-12(fp)
 800dd8c:	00c00044 	movi	r3,1
 800dd90:	10c00415 	stw	r3,16(r2)
 800dd94:	e0bffd17 	ldw	r2,-12(fp)
 800dd98:	00c00044 	movi	r3,1
 800dd9c:	10c00515 	stw	r3,20(r2)
 800dda0:	e0bffd17 	ldw	r2,-12(fp)
 800dda4:	00c00044 	movi	r3,1
 800dda8:	10c00615 	stw	r3,24(r2)
		SET_COMP(2, 3, 1,1, 1, 1,1);
 800ddac:	e0bffe17 	ldw	r2,-8(fp)
 800ddb0:	10801417 	ldw	r2,80(r2)
 800ddb4:	10802c04 	addi	r2,r2,176
 800ddb8:	e0bffd15 	stw	r2,-12(fp)
 800ddbc:	e0bffd17 	ldw	r2,-12(fp)
 800ddc0:	00c000c4 	movi	r3,3
 800ddc4:	10c00015 	stw	r3,0(r2)
 800ddc8:	e0bffd17 	ldw	r2,-12(fp)
 800ddcc:	00c00044 	movi	r3,1
 800ddd0:	10c00215 	stw	r3,8(r2)
 800ddd4:	e0bffd17 	ldw	r2,-12(fp)
 800ddd8:	00c00044 	movi	r3,1
 800dddc:	10c00315 	stw	r3,12(r2)
 800dde0:	e0bffd17 	ldw	r2,-12(fp)
 800dde4:	00c00044 	movi	r3,1
 800dde8:	10c00415 	stw	r3,16(r2)
 800ddec:	e0bffd17 	ldw	r2,-12(fp)
 800ddf0:	00c00044 	movi	r3,1
 800ddf4:	10c00515 	stw	r3,20(r2)
 800ddf8:	e0bffd17 	ldw	r2,-12(fp)
 800ddfc:	00c00044 	movi	r3,1
 800de00:	10c00615 	stw	r3,24(r2)
		SET_COMP(3, 4, 2,2, 0, 0,0);
 800de04:	e0bffe17 	ldw	r2,-8(fp)
 800de08:	10801417 	ldw	r2,80(r2)
 800de0c:	10804204 	addi	r2,r2,264
 800de10:	e0bffd15 	stw	r2,-12(fp)
 800de14:	e0bffd17 	ldw	r2,-12(fp)
 800de18:	00c00104 	movi	r3,4
 800de1c:	10c00015 	stw	r3,0(r2)
 800de20:	e0bffd17 	ldw	r2,-12(fp)
 800de24:	00c00084 	movi	r3,2
 800de28:	10c00215 	stw	r3,8(r2)
 800de2c:	e0bffd17 	ldw	r2,-12(fp)
 800de30:	00c00084 	movi	r3,2
 800de34:	10c00315 	stw	r3,12(r2)
 800de38:	e0bffd17 	ldw	r2,-12(fp)
 800de3c:	10000415 	stw	zero,16(r2)
 800de40:	e0bffd17 	ldw	r2,-12(fp)
 800de44:	10000515 	stw	zero,20(r2)
 800de48:	e0bffd17 	ldw	r2,-12(fp)
 800de4c:	10000615 	stw	zero,24(r2)
		break;
 800de50:	00004706 	br	800df70 <jpeg_set_colorspace+0x6fc>
	case JCS_UNKNOWN:
		cinfo->num_components = cinfo->input_components;
 800de54:	e0bffe17 	ldw	r2,-8(fp)
 800de58:	10c00917 	ldw	r3,36(r2)
 800de5c:	e0bffe17 	ldw	r2,-8(fp)
 800de60:	10c01215 	stw	r3,72(r2)
		if (cinfo->num_components < 1 || cinfo->num_components > MAX_COMPONENTS)
 800de64:	e0bffe17 	ldw	r2,-8(fp)
 800de68:	10801217 	ldw	r2,72(r2)
 800de6c:	0080040e 	bge	zero,r2,800de80 <jpeg_set_colorspace+0x60c>
 800de70:	e0bffe17 	ldw	r2,-8(fp)
 800de74:	10801217 	ldw	r2,72(r2)
 800de78:	108002d0 	cmplti	r2,r2,11
 800de7c:	1000121e 	bne	r2,zero,800dec8 <jpeg_set_colorspace+0x654>
			ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
 800de80:	e0bffe17 	ldw	r2,-8(fp)
 800de84:	10800017 	ldw	r2,0(r2)
 800de88:	00c006c4 	movi	r3,27
 800de8c:	10c00515 	stw	r3,20(r2)
 800de90:	e0bffe17 	ldw	r2,-8(fp)
 800de94:	10800017 	ldw	r2,0(r2)
 800de98:	e0fffe17 	ldw	r3,-8(fp)
 800de9c:	18c01217 	ldw	r3,72(r3)
 800dea0:	10c00615 	stw	r3,24(r2)
 800dea4:	e0bffe17 	ldw	r2,-8(fp)
 800dea8:	10800017 	ldw	r2,0(r2)
 800deac:	00c00284 	movi	r3,10
 800deb0:	10c00715 	stw	r3,28(r2)
 800deb4:	e0bffe17 	ldw	r2,-8(fp)
 800deb8:	10800017 	ldw	r2,0(r2)
 800debc:	10800017 	ldw	r2,0(r2)
 800dec0:	e13ffe17 	ldw	r4,-8(fp)
 800dec4:	103ee83a 	callr	r2
			MAX_COMPONENTS);
		for (ci = 0; ci < cinfo->num_components; ci++) {
 800dec8:	e03ffc15 	stw	zero,-16(fp)
 800decc:	00001a06 	br	800df38 <jpeg_set_colorspace+0x6c4>
			SET_COMP(ci, ci, 1,1, 0, 0,0);
 800ded0:	e0bffe17 	ldw	r2,-8(fp)
 800ded4:	14001417 	ldw	r16,80(r2)
 800ded8:	e0bffc17 	ldw	r2,-16(fp)
 800dedc:	1009883a 	mov	r4,r2
 800dee0:	01401604 	movi	r5,88
 800dee4:	802c2180 	call	802c218 <__mulsi3>
 800dee8:	8085883a 	add	r2,r16,r2
 800deec:	e0bffd15 	stw	r2,-12(fp)
 800def0:	e0bffd17 	ldw	r2,-12(fp)
 800def4:	e0fffc17 	ldw	r3,-16(fp)
 800def8:	10c00015 	stw	r3,0(r2)
 800defc:	e0bffd17 	ldw	r2,-12(fp)
 800df00:	00c00044 	movi	r3,1
 800df04:	10c00215 	stw	r3,8(r2)
 800df08:	e0bffd17 	ldw	r2,-12(fp)
 800df0c:	00c00044 	movi	r3,1
 800df10:	10c00315 	stw	r3,12(r2)
 800df14:	e0bffd17 	ldw	r2,-12(fp)
 800df18:	10000415 	stw	zero,16(r2)
 800df1c:	e0bffd17 	ldw	r2,-12(fp)
 800df20:	10000515 	stw	zero,20(r2)
 800df24:	e0bffd17 	ldw	r2,-12(fp)
 800df28:	10000615 	stw	zero,24(r2)
	case JCS_UNKNOWN:
		cinfo->num_components = cinfo->input_components;
		if (cinfo->num_components < 1 || cinfo->num_components > MAX_COMPONENTS)
			ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
			MAX_COMPONENTS);
		for (ci = 0; ci < cinfo->num_components; ci++) {
 800df2c:	e0bffc17 	ldw	r2,-16(fp)
 800df30:	10800044 	addi	r2,r2,1
 800df34:	e0bffc15 	stw	r2,-16(fp)
 800df38:	e0bffe17 	ldw	r2,-8(fp)
 800df3c:	10801217 	ldw	r2,72(r2)
 800df40:	e0fffc17 	ldw	r3,-16(fp)
 800df44:	18bfe216 	blt	r3,r2,800ded0 <jpeg_set_colorspace+0x65c>
			SET_COMP(ci, ci, 1,1, 0, 0,0);
		}
		break;
 800df48:	00000906 	br	800df70 <jpeg_set_colorspace+0x6fc>
	default:
		ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
 800df4c:	e0bffe17 	ldw	r2,-8(fp)
 800df50:	10800017 	ldw	r2,0(r2)
 800df54:	00c002c4 	movi	r3,11
 800df58:	10c00515 	stw	r3,20(r2)
 800df5c:	e0bffe17 	ldw	r2,-8(fp)
 800df60:	10800017 	ldw	r2,0(r2)
 800df64:	10800017 	ldw	r2,0(r2)
 800df68:	e13ffe17 	ldw	r4,-8(fp)
 800df6c:	103ee83a 	callr	r2
	}
}
 800df70:	e037883a 	mov	sp,fp
 800df74:	dfc00217 	ldw	ra,8(sp)
 800df78:	df000117 	ldw	fp,4(sp)
 800df7c:	dc000017 	ldw	r16,0(sp)
 800df80:	dec00304 	addi	sp,sp,12
 800df84:	f800283a 	ret

0800df88 <fill_a_scan>:

LOCAL(jpeg_scan_info *)
	fill_a_scan (jpeg_scan_info * scanptr, int ci,
	int Ss, int Se, int Ah, int Al)
	/* Support routine: generate one scan for specified component */
{
 800df88:	defffb04 	addi	sp,sp,-20
 800df8c:	df000415 	stw	fp,16(sp)
 800df90:	df000404 	addi	fp,sp,16
 800df94:	e13ffc15 	stw	r4,-16(fp)
 800df98:	e17ffd15 	stw	r5,-12(fp)
 800df9c:	e1bffe15 	stw	r6,-8(fp)
 800dfa0:	e1ffff15 	stw	r7,-4(fp)
	scanptr->comps_in_scan = 1;
 800dfa4:	e0bffc17 	ldw	r2,-16(fp)
 800dfa8:	00c00044 	movi	r3,1
 800dfac:	10c00015 	stw	r3,0(r2)
	scanptr->component_index[0] = ci;
 800dfb0:	e0bffc17 	ldw	r2,-16(fp)
 800dfb4:	e0fffd17 	ldw	r3,-12(fp)
 800dfb8:	10c00115 	stw	r3,4(r2)
	scanptr->Ss = Ss;
 800dfbc:	e0bffc17 	ldw	r2,-16(fp)
 800dfc0:	e0fffe17 	ldw	r3,-8(fp)
 800dfc4:	10c00515 	stw	r3,20(r2)
	scanptr->Se = Se;
 800dfc8:	e0bffc17 	ldw	r2,-16(fp)
 800dfcc:	e0ffff17 	ldw	r3,-4(fp)
 800dfd0:	10c00615 	stw	r3,24(r2)
	scanptr->Ah = Ah;
 800dfd4:	e0bffc17 	ldw	r2,-16(fp)
 800dfd8:	e0c00117 	ldw	r3,4(fp)
 800dfdc:	10c00715 	stw	r3,28(r2)
	scanptr->Al = Al;
 800dfe0:	e0bffc17 	ldw	r2,-16(fp)
 800dfe4:	e0c00217 	ldw	r3,8(fp)
 800dfe8:	10c00815 	stw	r3,32(r2)
	scanptr++;
 800dfec:	e0bffc17 	ldw	r2,-16(fp)
 800dff0:	10800904 	addi	r2,r2,36
 800dff4:	e0bffc15 	stw	r2,-16(fp)
	return scanptr;
 800dff8:	e0bffc17 	ldw	r2,-16(fp)
}
 800dffc:	e037883a 	mov	sp,fp
 800e000:	df000017 	ldw	fp,0(sp)
 800e004:	dec00104 	addi	sp,sp,4
 800e008:	f800283a 	ret

0800e00c <fill_scans>:

LOCAL(jpeg_scan_info *)
	fill_scans (jpeg_scan_info * scanptr, int ncomps,
	int Ss, int Se, int Ah, int Al)
	/* Support routine: generate one scan for each component */
{
 800e00c:	defffa04 	addi	sp,sp,-24
 800e010:	df000515 	stw	fp,20(sp)
 800e014:	df000504 	addi	fp,sp,20
 800e018:	e13ffc15 	stw	r4,-16(fp)
 800e01c:	e17ffd15 	stw	r5,-12(fp)
 800e020:	e1bffe15 	stw	r6,-8(fp)
 800e024:	e1ffff15 	stw	r7,-4(fp)
	int ci;

	for (ci = 0; ci < ncomps; ci++) {
 800e028:	e03ffb15 	stw	zero,-20(fp)
 800e02c:	00001806 	br	800e090 <fill_scans+0x84>
		scanptr->comps_in_scan = 1;
 800e030:	e0bffc17 	ldw	r2,-16(fp)
 800e034:	00c00044 	movi	r3,1
 800e038:	10c00015 	stw	r3,0(r2)
		scanptr->component_index[0] = ci;
 800e03c:	e0bffc17 	ldw	r2,-16(fp)
 800e040:	e0fffb17 	ldw	r3,-20(fp)
 800e044:	10c00115 	stw	r3,4(r2)
		scanptr->Ss = Ss;
 800e048:	e0bffc17 	ldw	r2,-16(fp)
 800e04c:	e0fffe17 	ldw	r3,-8(fp)
 800e050:	10c00515 	stw	r3,20(r2)
		scanptr->Se = Se;
 800e054:	e0bffc17 	ldw	r2,-16(fp)
 800e058:	e0ffff17 	ldw	r3,-4(fp)
 800e05c:	10c00615 	stw	r3,24(r2)
		scanptr->Ah = Ah;
 800e060:	e0bffc17 	ldw	r2,-16(fp)
 800e064:	e0c00117 	ldw	r3,4(fp)
 800e068:	10c00715 	stw	r3,28(r2)
		scanptr->Al = Al;
 800e06c:	e0bffc17 	ldw	r2,-16(fp)
 800e070:	e0c00217 	ldw	r3,8(fp)
 800e074:	10c00815 	stw	r3,32(r2)
		scanptr++;
 800e078:	e0bffc17 	ldw	r2,-16(fp)
 800e07c:	10800904 	addi	r2,r2,36
 800e080:	e0bffc15 	stw	r2,-16(fp)
	int Ss, int Se, int Ah, int Al)
	/* Support routine: generate one scan for each component */
{
	int ci;

	for (ci = 0; ci < ncomps; ci++) {
 800e084:	e0bffb17 	ldw	r2,-20(fp)
 800e088:	10800044 	addi	r2,r2,1
 800e08c:	e0bffb15 	stw	r2,-20(fp)
 800e090:	e0fffb17 	ldw	r3,-20(fp)
 800e094:	e0bffd17 	ldw	r2,-12(fp)
 800e098:	18bfe516 	blt	r3,r2,800e030 <fill_scans+0x24>
		scanptr->Se = Se;
		scanptr->Ah = Ah;
		scanptr->Al = Al;
		scanptr++;
	}
	return scanptr;
 800e09c:	e0bffc17 	ldw	r2,-16(fp)
}
 800e0a0:	e037883a 	mov	sp,fp
 800e0a4:	df000017 	ldw	fp,0(sp)
 800e0a8:	dec00104 	addi	sp,sp,4
 800e0ac:	f800283a 	ret

0800e0b0 <fill_dc_scans>:

LOCAL(jpeg_scan_info *)
	fill_dc_scans (jpeg_scan_info * scanptr, int ncomps, int Ah, int Al)
	/* Support routine: generate interleaved DC scan if possible, else N scans */
{
 800e0b0:	defff704 	addi	sp,sp,-36
 800e0b4:	dfc00815 	stw	ra,32(sp)
 800e0b8:	df000715 	stw	fp,28(sp)
 800e0bc:	df000704 	addi	fp,sp,28
 800e0c0:	e13ffc15 	stw	r4,-16(fp)
 800e0c4:	e17ffd15 	stw	r5,-12(fp)
 800e0c8:	e1bffe15 	stw	r6,-8(fp)
 800e0cc:	e1ffff15 	stw	r7,-4(fp)
	int ci;

	if (ncomps <= MAX_COMPS_IN_SCAN) {
 800e0d0:	e0bffd17 	ldw	r2,-12(fp)
 800e0d4:	10800148 	cmpgei	r2,r2,5
 800e0d8:	1000231e 	bne	r2,zero,800e168 <fill_dc_scans+0xb8>
		/* Single interleaved DC scan */
		scanptr->comps_in_scan = ncomps;
 800e0dc:	e0bffc17 	ldw	r2,-16(fp)
 800e0e0:	e0fffd17 	ldw	r3,-12(fp)
 800e0e4:	10c00015 	stw	r3,0(r2)
		for (ci = 0; ci < ncomps; ci++)
 800e0e8:	e03ffb15 	stw	zero,-20(fp)
 800e0ec:	00000b06 	br	800e11c <fill_dc_scans+0x6c>
			scanptr->component_index[ci] = ci;
 800e0f0:	e0fffc17 	ldw	r3,-16(fp)
 800e0f4:	e0bffb17 	ldw	r2,-20(fp)
 800e0f8:	10800044 	addi	r2,r2,1
 800e0fc:	1085883a 	add	r2,r2,r2
 800e100:	1085883a 	add	r2,r2,r2
 800e104:	1885883a 	add	r2,r3,r2
 800e108:	e0fffb17 	ldw	r3,-20(fp)
 800e10c:	10c00015 	stw	r3,0(r2)
	int ci;

	if (ncomps <= MAX_COMPS_IN_SCAN) {
		/* Single interleaved DC scan */
		scanptr->comps_in_scan = ncomps;
		for (ci = 0; ci < ncomps; ci++)
 800e110:	e0bffb17 	ldw	r2,-20(fp)
 800e114:	10800044 	addi	r2,r2,1
 800e118:	e0bffb15 	stw	r2,-20(fp)
 800e11c:	e0fffb17 	ldw	r3,-20(fp)
 800e120:	e0bffd17 	ldw	r2,-12(fp)
 800e124:	18bff216 	blt	r3,r2,800e0f0 <fill_dc_scans+0x40>
			scanptr->component_index[ci] = ci;
		scanptr->Ss = scanptr->Se = 0;
 800e128:	e0bffc17 	ldw	r2,-16(fp)
 800e12c:	10000615 	stw	zero,24(r2)
 800e130:	e0bffc17 	ldw	r2,-16(fp)
 800e134:	10c00617 	ldw	r3,24(r2)
 800e138:	e0bffc17 	ldw	r2,-16(fp)
 800e13c:	10c00515 	stw	r3,20(r2)
		scanptr->Ah = Ah;
 800e140:	e0bffc17 	ldw	r2,-16(fp)
 800e144:	e0fffe17 	ldw	r3,-8(fp)
 800e148:	10c00715 	stw	r3,28(r2)
		scanptr->Al = Al;
 800e14c:	e0bffc17 	ldw	r2,-16(fp)
 800e150:	e0ffff17 	ldw	r3,-4(fp)
 800e154:	10c00815 	stw	r3,32(r2)
		scanptr++;
 800e158:	e0bffc17 	ldw	r2,-16(fp)
 800e15c:	10800904 	addi	r2,r2,36
 800e160:	e0bffc15 	stw	r2,-16(fp)
 800e164:	00000a06 	br	800e190 <fill_dc_scans+0xe0>
	} else {
		/* Noninterleaved DC scan for each component */
		scanptr = fill_scans(scanptr, ncomps, 0, 0, Ah, Al);
 800e168:	e0bffe17 	ldw	r2,-8(fp)
 800e16c:	d8800015 	stw	r2,0(sp)
 800e170:	e0bfff17 	ldw	r2,-4(fp)
 800e174:	d8800115 	stw	r2,4(sp)
 800e178:	e13ffc17 	ldw	r4,-16(fp)
 800e17c:	e17ffd17 	ldw	r5,-12(fp)
 800e180:	000d883a 	mov	r6,zero
 800e184:	000f883a 	mov	r7,zero
 800e188:	800e00c0 	call	800e00c <fill_scans>
 800e18c:	e0bffc15 	stw	r2,-16(fp)
	}
	return scanptr;
 800e190:	e0bffc17 	ldw	r2,-16(fp)
}
 800e194:	e037883a 	mov	sp,fp
 800e198:	dfc00117 	ldw	ra,4(sp)
 800e19c:	df000017 	ldw	fp,0(sp)
 800e1a0:	dec00204 	addi	sp,sp,8
 800e1a4:	f800283a 	ret

0800e1a8 <jpeg_simple_progression>:
* cinfo->num_components and cinfo->jpeg_color_space must be correct.
*/

GLOBAL(void)
	jpeg_simple_progression (j_compress_ptr cinfo)
{
 800e1a8:	defff704 	addi	sp,sp,-36
 800e1ac:	dfc00815 	stw	ra,32(sp)
 800e1b0:	df000715 	stw	fp,28(sp)
 800e1b4:	dc000615 	stw	r16,24(sp)
 800e1b8:	df000604 	addi	fp,sp,24
 800e1bc:	e13fff15 	stw	r4,-4(fp)
	int ncomps = cinfo->num_components;
 800e1c0:	e0bfff17 	ldw	r2,-4(fp)
 800e1c4:	10801217 	ldw	r2,72(r2)
 800e1c8:	e0bffd15 	stw	r2,-12(fp)
	int nscans;
	jpeg_scan_info * scanptr;

	/* Safety check to ensure start_compress not called yet. */
	if (cinfo->global_state != CSTATE_START)
 800e1cc:	e0bfff17 	ldw	r2,-4(fp)
 800e1d0:	10800517 	ldw	r2,20(r2)
 800e1d4:	10801920 	cmpeqi	r2,r2,100
 800e1d8:	10000e1e 	bne	r2,zero,800e214 <jpeg_simple_progression+0x6c>
		ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800e1dc:	e0bfff17 	ldw	r2,-4(fp)
 800e1e0:	10800017 	ldw	r2,0(r2)
 800e1e4:	00c00544 	movi	r3,21
 800e1e8:	10c00515 	stw	r3,20(r2)
 800e1ec:	e0bfff17 	ldw	r2,-4(fp)
 800e1f0:	10800017 	ldw	r2,0(r2)
 800e1f4:	e0ffff17 	ldw	r3,-4(fp)
 800e1f8:	18c00517 	ldw	r3,20(r3)
 800e1fc:	10c00615 	stw	r3,24(r2)
 800e200:	e0bfff17 	ldw	r2,-4(fp)
 800e204:	10800017 	ldw	r2,0(r2)
 800e208:	10800017 	ldw	r2,0(r2)
 800e20c:	e13fff17 	ldw	r4,-4(fp)
 800e210:	103ee83a 	callr	r2

	/* Figure space needed for script.  Calculation must match code below! */
	if (ncomps == 3 && cinfo->jpeg_color_space == JCS_YCbCr) {
 800e214:	e0bffd17 	ldw	r2,-12(fp)
 800e218:	108000d8 	cmpnei	r2,r2,3
 800e21c:	1000071e 	bne	r2,zero,800e23c <jpeg_simple_progression+0x94>
 800e220:	e0bfff17 	ldw	r2,-4(fp)
 800e224:	10801317 	ldw	r2,76(r2)
 800e228:	108000d8 	cmpnei	r2,r2,3
 800e22c:	1000031e 	bne	r2,zero,800e23c <jpeg_simple_progression+0x94>
		/* Custom script for YCbCr color images. */
		nscans = 10;
 800e230:	00800284 	movi	r2,10
 800e234:	e0bffc15 	stw	r2,-16(fp)
 800e238:	00000d06 	br	800e270 <jpeg_simple_progression+0xc8>
	} else {
		/* All-purpose script for other color spaces. */
		if (ncomps > MAX_COMPS_IN_SCAN)
 800e23c:	e0bffd17 	ldw	r2,-12(fp)
 800e240:	10800150 	cmplti	r2,r2,5
 800e244:	1000051e 	bne	r2,zero,800e25c <jpeg_simple_progression+0xb4>
			nscans = 6 * ncomps;	/* 2 DC + 4 AC scans per component */
 800e248:	e13ffd17 	ldw	r4,-12(fp)
 800e24c:	01400184 	movi	r5,6
 800e250:	802c2180 	call	802c218 <__mulsi3>
 800e254:	e0bffc15 	stw	r2,-16(fp)
 800e258:	00000506 	br	800e270 <jpeg_simple_progression+0xc8>
		else
			nscans = 2 + 4 * ncomps;	/* 2 DC scans; 4 AC scans per component */
 800e25c:	e0bffd17 	ldw	r2,-12(fp)
 800e260:	1085883a 	add	r2,r2,r2
 800e264:	1085883a 	add	r2,r2,r2
 800e268:	10800084 	addi	r2,r2,2
 800e26c:	e0bffc15 	stw	r2,-16(fp)
	* multiple compressions without changing the settings.  To avoid a memory
	* leak if jpeg_simple_progression is called repeatedly for the same JPEG
	* object, we try to re-use previously allocated space, and we allocate
	* enough space to handle YCbCr even if initially asked for grayscale.
	*/
	if (cinfo->script_space == NULL || cinfo->script_space_size < nscans) {
 800e270:	e0bfff17 	ldw	r2,-4(fp)
 800e274:	10806517 	ldw	r2,404(r2)
 800e278:	10000426 	beq	r2,zero,800e28c <jpeg_simple_progression+0xe4>
 800e27c:	e0bfff17 	ldw	r2,-4(fp)
 800e280:	10c06617 	ldw	r3,408(r2)
 800e284:	e0bffc17 	ldw	r2,-16(fp)
 800e288:	1880140e 	bge	r3,r2,800e2dc <jpeg_simple_progression+0x134>
		cinfo->script_space_size = MAX(nscans, 10);
 800e28c:	e0bffc17 	ldw	r2,-16(fp)
 800e290:	10c00288 	cmpgei	r3,r2,10
 800e294:	1800011e 	bne	r3,zero,800e29c <jpeg_simple_progression+0xf4>
 800e298:	00800284 	movi	r2,10
 800e29c:	e0ffff17 	ldw	r3,-4(fp)
 800e2a0:	18806615 	stw	r2,408(r3)
		cinfo->script_space = (jpeg_scan_info *)
			(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800e2a4:	e0bfff17 	ldw	r2,-4(fp)
 800e2a8:	10800117 	ldw	r2,4(r2)
 800e2ac:	14000017 	ldw	r16,0(r2)
			cinfo->script_space_size * SIZEOF(jpeg_scan_info));
 800e2b0:	e0bfff17 	ldw	r2,-4(fp)
 800e2b4:	10806617 	ldw	r2,408(r2)
	* enough space to handle YCbCr even if initially asked for grayscale.
	*/
	if (cinfo->script_space == NULL || cinfo->script_space_size < nscans) {
		cinfo->script_space_size = MAX(nscans, 10);
		cinfo->script_space = (jpeg_scan_info *)
			(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800e2b8:	1009883a 	mov	r4,r2
 800e2bc:	01400904 	movi	r5,36
 800e2c0:	802c2180 	call	802c218 <__mulsi3>
 800e2c4:	e13fff17 	ldw	r4,-4(fp)
 800e2c8:	000b883a 	mov	r5,zero
 800e2cc:	100d883a 	mov	r6,r2
 800e2d0:	803ee83a 	callr	r16
	* object, we try to re-use previously allocated space, and we allocate
	* enough space to handle YCbCr even if initially asked for grayscale.
	*/
	if (cinfo->script_space == NULL || cinfo->script_space_size < nscans) {
		cinfo->script_space_size = MAX(nscans, 10);
		cinfo->script_space = (jpeg_scan_info *)
 800e2d4:	e0ffff17 	ldw	r3,-4(fp)
 800e2d8:	18806515 	stw	r2,404(r3)
			(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
			cinfo->script_space_size * SIZEOF(jpeg_scan_info));
	}
	scanptr = cinfo->script_space;
 800e2dc:	e0bfff17 	ldw	r2,-4(fp)
 800e2e0:	10806517 	ldw	r2,404(r2)
 800e2e4:	e0bffe15 	stw	r2,-8(fp)
	cinfo->scan_info = scanptr;
 800e2e8:	e0bfff17 	ldw	r2,-4(fp)
 800e2ec:	e0fffe17 	ldw	r3,-8(fp)
 800e2f0:	10c03215 	stw	r3,200(r2)
	cinfo->num_scans = nscans;
 800e2f4:	e0bfff17 	ldw	r2,-4(fp)
 800e2f8:	e0fffc17 	ldw	r3,-16(fp)
 800e2fc:	10c03115 	stw	r3,196(r2)

	if (ncomps == 3 && cinfo->jpeg_color_space == JCS_YCbCr) {
 800e300:	e0bffd17 	ldw	r2,-12(fp)
 800e304:	108000d8 	cmpnei	r2,r2,3
 800e308:	10005a1e 	bne	r2,zero,800e474 <jpeg_simple_progression+0x2cc>
 800e30c:	e0bfff17 	ldw	r2,-4(fp)
 800e310:	10801317 	ldw	r2,76(r2)
 800e314:	108000d8 	cmpnei	r2,r2,3
 800e318:	1000561e 	bne	r2,zero,800e474 <jpeg_simple_progression+0x2cc>
		/* Custom script for YCbCr color images. */
		/* Initial DC scan */
		scanptr = fill_dc_scans(scanptr, ncomps, 0, 1);
 800e31c:	e13ffe17 	ldw	r4,-8(fp)
 800e320:	e17ffd17 	ldw	r5,-12(fp)
 800e324:	000d883a 	mov	r6,zero
 800e328:	01c00044 	movi	r7,1
 800e32c:	800e0b00 	call	800e0b0 <fill_dc_scans>
 800e330:	e0bffe15 	stw	r2,-8(fp)
		/* Initial AC scan: get some luma data out in a hurry */
		scanptr = fill_a_scan(scanptr, 0, 1, 5, 0, 2);
 800e334:	d8000015 	stw	zero,0(sp)
 800e338:	00800084 	movi	r2,2
 800e33c:	d8800115 	stw	r2,4(sp)
 800e340:	e13ffe17 	ldw	r4,-8(fp)
 800e344:	000b883a 	mov	r5,zero
 800e348:	01800044 	movi	r6,1
 800e34c:	01c00144 	movi	r7,5
 800e350:	800df880 	call	800df88 <fill_a_scan>
 800e354:	e0bffe15 	stw	r2,-8(fp)
		/* Chroma data is too small to be worth expending many scans on */
		scanptr = fill_a_scan(scanptr, 2, 1, 63, 0, 1);
 800e358:	d8000015 	stw	zero,0(sp)
 800e35c:	00800044 	movi	r2,1
 800e360:	d8800115 	stw	r2,4(sp)
 800e364:	e13ffe17 	ldw	r4,-8(fp)
 800e368:	01400084 	movi	r5,2
 800e36c:	01800044 	movi	r6,1
 800e370:	01c00fc4 	movi	r7,63
 800e374:	800df880 	call	800df88 <fill_a_scan>
 800e378:	e0bffe15 	stw	r2,-8(fp)
		scanptr = fill_a_scan(scanptr, 1, 1, 63, 0, 1);
 800e37c:	d8000015 	stw	zero,0(sp)
 800e380:	00800044 	movi	r2,1
 800e384:	d8800115 	stw	r2,4(sp)
 800e388:	e13ffe17 	ldw	r4,-8(fp)
 800e38c:	01400044 	movi	r5,1
 800e390:	01800044 	movi	r6,1
 800e394:	01c00fc4 	movi	r7,63
 800e398:	800df880 	call	800df88 <fill_a_scan>
 800e39c:	e0bffe15 	stw	r2,-8(fp)
		/* Complete spectral selection for luma AC */
		scanptr = fill_a_scan(scanptr, 0, 6, 63, 0, 2);
 800e3a0:	d8000015 	stw	zero,0(sp)
 800e3a4:	00800084 	movi	r2,2
 800e3a8:	d8800115 	stw	r2,4(sp)
 800e3ac:	e13ffe17 	ldw	r4,-8(fp)
 800e3b0:	000b883a 	mov	r5,zero
 800e3b4:	01800184 	movi	r6,6
 800e3b8:	01c00fc4 	movi	r7,63
 800e3bc:	800df880 	call	800df88 <fill_a_scan>
 800e3c0:	e0bffe15 	stw	r2,-8(fp)
		/* Refine next bit of luma AC */
		scanptr = fill_a_scan(scanptr, 0, 1, 63, 2, 1);
 800e3c4:	00800084 	movi	r2,2
 800e3c8:	d8800015 	stw	r2,0(sp)
 800e3cc:	00800044 	movi	r2,1
 800e3d0:	d8800115 	stw	r2,4(sp)
 800e3d4:	e13ffe17 	ldw	r4,-8(fp)
 800e3d8:	000b883a 	mov	r5,zero
 800e3dc:	01800044 	movi	r6,1
 800e3e0:	01c00fc4 	movi	r7,63
 800e3e4:	800df880 	call	800df88 <fill_a_scan>
 800e3e8:	e0bffe15 	stw	r2,-8(fp)
		/* Finish DC successive approximation */
		scanptr = fill_dc_scans(scanptr, ncomps, 1, 0);
 800e3ec:	e13ffe17 	ldw	r4,-8(fp)
 800e3f0:	e17ffd17 	ldw	r5,-12(fp)
 800e3f4:	01800044 	movi	r6,1
 800e3f8:	000f883a 	mov	r7,zero
 800e3fc:	800e0b00 	call	800e0b0 <fill_dc_scans>
 800e400:	e0bffe15 	stw	r2,-8(fp)
		/* Finish AC successive approximation */
		scanptr = fill_a_scan(scanptr, 2, 1, 63, 1, 0);
 800e404:	00800044 	movi	r2,1
 800e408:	d8800015 	stw	r2,0(sp)
 800e40c:	d8000115 	stw	zero,4(sp)
 800e410:	e13ffe17 	ldw	r4,-8(fp)
 800e414:	01400084 	movi	r5,2
 800e418:	01800044 	movi	r6,1
 800e41c:	01c00fc4 	movi	r7,63
 800e420:	800df880 	call	800df88 <fill_a_scan>
 800e424:	e0bffe15 	stw	r2,-8(fp)
		scanptr = fill_a_scan(scanptr, 1, 1, 63, 1, 0);
 800e428:	00800044 	movi	r2,1
 800e42c:	d8800015 	stw	r2,0(sp)
 800e430:	d8000115 	stw	zero,4(sp)
 800e434:	e13ffe17 	ldw	r4,-8(fp)
 800e438:	01400044 	movi	r5,1
 800e43c:	01800044 	movi	r6,1
 800e440:	01c00fc4 	movi	r7,63
 800e444:	800df880 	call	800df88 <fill_a_scan>
 800e448:	e0bffe15 	stw	r2,-8(fp)
		/* Luma bottom bit comes last since it's usually largest scan */
		scanptr = fill_a_scan(scanptr, 0, 1, 63, 1, 0);
 800e44c:	00800044 	movi	r2,1
 800e450:	d8800015 	stw	r2,0(sp)
 800e454:	d8000115 	stw	zero,4(sp)
 800e458:	e13ffe17 	ldw	r4,-8(fp)
 800e45c:	000b883a 	mov	r5,zero
 800e460:	01800044 	movi	r6,1
 800e464:	01c00fc4 	movi	r7,63
 800e468:	800df880 	call	800df88 <fill_a_scan>
 800e46c:	e0bffe15 	stw	r2,-8(fp)
 800e470:	00003106 	br	800e538 <jpeg_simple_progression+0x390>
	} else {
		/* All-purpose script for other color spaces. */
		/* Successive approximation first pass */
		scanptr = fill_dc_scans(scanptr, ncomps, 0, 1);
 800e474:	e13ffe17 	ldw	r4,-8(fp)
 800e478:	e17ffd17 	ldw	r5,-12(fp)
 800e47c:	000d883a 	mov	r6,zero
 800e480:	01c00044 	movi	r7,1
 800e484:	800e0b00 	call	800e0b0 <fill_dc_scans>
 800e488:	e0bffe15 	stw	r2,-8(fp)
		scanptr = fill_scans(scanptr, ncomps, 1, 5, 0, 2);
 800e48c:	d8000015 	stw	zero,0(sp)
 800e490:	00800084 	movi	r2,2
 800e494:	d8800115 	stw	r2,4(sp)
 800e498:	e13ffe17 	ldw	r4,-8(fp)
 800e49c:	e17ffd17 	ldw	r5,-12(fp)
 800e4a0:	01800044 	movi	r6,1
 800e4a4:	01c00144 	movi	r7,5
 800e4a8:	800e00c0 	call	800e00c <fill_scans>
 800e4ac:	e0bffe15 	stw	r2,-8(fp)
		scanptr = fill_scans(scanptr, ncomps, 6, 63, 0, 2);
 800e4b0:	d8000015 	stw	zero,0(sp)
 800e4b4:	00800084 	movi	r2,2
 800e4b8:	d8800115 	stw	r2,4(sp)
 800e4bc:	e13ffe17 	ldw	r4,-8(fp)
 800e4c0:	e17ffd17 	ldw	r5,-12(fp)
 800e4c4:	01800184 	movi	r6,6
 800e4c8:	01c00fc4 	movi	r7,63
 800e4cc:	800e00c0 	call	800e00c <fill_scans>
 800e4d0:	e0bffe15 	stw	r2,-8(fp)
		/* Successive approximation second pass */
		scanptr = fill_scans(scanptr, ncomps, 1, 63, 2, 1);
 800e4d4:	00800084 	movi	r2,2
 800e4d8:	d8800015 	stw	r2,0(sp)
 800e4dc:	00800044 	movi	r2,1
 800e4e0:	d8800115 	stw	r2,4(sp)
 800e4e4:	e13ffe17 	ldw	r4,-8(fp)
 800e4e8:	e17ffd17 	ldw	r5,-12(fp)
 800e4ec:	01800044 	movi	r6,1
 800e4f0:	01c00fc4 	movi	r7,63
 800e4f4:	800e00c0 	call	800e00c <fill_scans>
 800e4f8:	e0bffe15 	stw	r2,-8(fp)
		/* Successive approximation final pass */
		scanptr = fill_dc_scans(scanptr, ncomps, 1, 0);
 800e4fc:	e13ffe17 	ldw	r4,-8(fp)
 800e500:	e17ffd17 	ldw	r5,-12(fp)
 800e504:	01800044 	movi	r6,1
 800e508:	000f883a 	mov	r7,zero
 800e50c:	800e0b00 	call	800e0b0 <fill_dc_scans>
 800e510:	e0bffe15 	stw	r2,-8(fp)
		scanptr = fill_scans(scanptr, ncomps, 1, 63, 1, 0);
 800e514:	00800044 	movi	r2,1
 800e518:	d8800015 	stw	r2,0(sp)
 800e51c:	d8000115 	stw	zero,4(sp)
 800e520:	e13ffe17 	ldw	r4,-8(fp)
 800e524:	e17ffd17 	ldw	r5,-12(fp)
 800e528:	01800044 	movi	r6,1
 800e52c:	01c00fc4 	movi	r7,63
 800e530:	800e00c0 	call	800e00c <fill_scans>
 800e534:	e0bffe15 	stw	r2,-8(fp)
	}
}
 800e538:	e037883a 	mov	sp,fp
 800e53c:	dfc00217 	ldw	ra,8(sp)
 800e540:	df000117 	ldw	fp,4(sp)
 800e544:	dc000017 	ldw	r16,0(sp)
 800e548:	dec00304 	addi	sp,sp,12
 800e54c:	f800283a 	ret

0800e550 <start_pass_prep>:
* Initialize for a processing pass.
*/

METHODDEF(void)
	start_pass_prep (j_compress_ptr cinfo, J_BUF_MODE pass_mode)
{
 800e550:	defffb04 	addi	sp,sp,-20
 800e554:	dfc00415 	stw	ra,16(sp)
 800e558:	df000315 	stw	fp,12(sp)
 800e55c:	df000304 	addi	fp,sp,12
 800e560:	e13ffe15 	stw	r4,-8(fp)
 800e564:	e17fff15 	stw	r5,-4(fp)
	my_prep_ptr prep = (my_prep_ptr) cinfo->prep;
 800e568:	e0bffe17 	ldw	r2,-8(fp)
 800e56c:	10805e17 	ldw	r2,376(r2)
 800e570:	e0bffd15 	stw	r2,-12(fp)

	if (pass_mode != JBUF_PASS_THRU)
 800e574:	e0bfff17 	ldw	r2,-4(fp)
 800e578:	10000926 	beq	r2,zero,800e5a0 <start_pass_prep+0x50>
		ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800e57c:	e0bffe17 	ldw	r2,-8(fp)
 800e580:	10800017 	ldw	r2,0(r2)
 800e584:	00c000c4 	movi	r3,3
 800e588:	10c00515 	stw	r3,20(r2)
 800e58c:	e0bffe17 	ldw	r2,-8(fp)
 800e590:	10800017 	ldw	r2,0(r2)
 800e594:	10800017 	ldw	r2,0(r2)
 800e598:	e13ffe17 	ldw	r4,-8(fp)
 800e59c:	103ee83a 	callr	r2

	/* Initialize total-height counter for detecting bottom of image */
	prep->rows_to_go = cinfo->image_height;
 800e5a0:	e0bffe17 	ldw	r2,-8(fp)
 800e5a4:	10c00817 	ldw	r3,32(r2)
 800e5a8:	e0bffd17 	ldw	r2,-12(fp)
 800e5ac:	10c00c15 	stw	r3,48(r2)
	/* Mark the conversion buffer empty */
	prep->next_buf_row = 0;
 800e5b0:	e0bffd17 	ldw	r2,-12(fp)
 800e5b4:	10000d15 	stw	zero,52(r2)
#ifdef CONTEXT_ROWS_SUPPORTED
	/* Preset additional state variables for context mode.
	* These aren't used in non-context mode, so we needn't test which mode.
	*/
	prep->this_row_group = 0;
 800e5b8:	e0bffd17 	ldw	r2,-12(fp)
 800e5bc:	10000e15 	stw	zero,56(r2)
	/* Set next_buf_stop to stop after two row groups have been read in. */
	prep->next_buf_stop = 2 * cinfo->max_v_samp_factor;
 800e5c0:	e0bffe17 	ldw	r2,-8(fp)
 800e5c4:	10803f17 	ldw	r2,252(r2)
 800e5c8:	1085883a 	add	r2,r2,r2
 800e5cc:	1007883a 	mov	r3,r2
 800e5d0:	e0bffd17 	ldw	r2,-12(fp)
 800e5d4:	10c00f15 	stw	r3,60(r2)
#endif
}
 800e5d8:	e037883a 	mov	sp,fp
 800e5dc:	dfc00117 	ldw	ra,4(sp)
 800e5e0:	df000017 	ldw	fp,0(sp)
 800e5e4:	dec00204 	addi	sp,sp,8
 800e5e8:	f800283a 	ret

0800e5ec <expand_bottom_edge>:
*/

LOCAL(void)
	expand_bottom_edge (JSAMPARRAY image_data, JDIMENSION num_cols,
	int input_rows, int output_rows)
{
 800e5ec:	defff704 	addi	sp,sp,-36
 800e5f0:	dfc00815 	stw	ra,32(sp)
 800e5f4:	df000715 	stw	fp,28(sp)
 800e5f8:	dc000615 	stw	r16,24(sp)
 800e5fc:	df000604 	addi	fp,sp,24
 800e600:	e13ffc15 	stw	r4,-16(fp)
 800e604:	e17ffd15 	stw	r5,-12(fp)
 800e608:	e1bffe15 	stw	r6,-8(fp)
 800e60c:	e1ffff15 	stw	r7,-4(fp)
	register int row;

	for (row = input_rows; row < output_rows; row++) {
 800e610:	e43ffe17 	ldw	r16,-8(fp)
 800e614:	00000c06 	br	800e648 <expand_bottom_edge+0x5c>
		jcopy_sample_rows(image_data, input_rows-1, image_data, row,
 800e618:	e0bffe17 	ldw	r2,-8(fp)
 800e61c:	10bfffc4 	addi	r2,r2,-1
 800e620:	00c00044 	movi	r3,1
 800e624:	d8c00015 	stw	r3,0(sp)
 800e628:	e0fffd17 	ldw	r3,-12(fp)
 800e62c:	d8c00115 	stw	r3,4(sp)
 800e630:	e13ffc17 	ldw	r4,-16(fp)
 800e634:	100b883a 	mov	r5,r2
 800e638:	e1bffc17 	ldw	r6,-16(fp)
 800e63c:	800f883a 	mov	r7,r16
 800e640:	802b1240 	call	802b124 <jcopy_sample_rows>
	expand_bottom_edge (JSAMPARRAY image_data, JDIMENSION num_cols,
	int input_rows, int output_rows)
{
	register int row;

	for (row = input_rows; row < output_rows; row++) {
 800e644:	84000044 	addi	r16,r16,1
 800e648:	e0bfff17 	ldw	r2,-4(fp)
 800e64c:	80bff216 	blt	r16,r2,800e618 <expand_bottom_edge+0x2c>
		jcopy_sample_rows(image_data, input_rows-1, image_data, row,
			1, num_cols);
	}
}
 800e650:	e037883a 	mov	sp,fp
 800e654:	dfc00217 	ldw	ra,8(sp)
 800e658:	df000117 	ldw	fp,4(sp)
 800e65c:	dc000017 	ldw	r16,0(sp)
 800e660:	dec00304 	addi	sp,sp,12
 800e664:	f800283a 	ret

0800e668 <pre_process_data>:
	pre_process_data (j_compress_ptr cinfo,
	JSAMPARRAY input_buf, JDIMENSION *in_row_ctr,
	JDIMENSION in_rows_avail,
	JSAMPIMAGE output_buf, JDIMENSION *out_row_group_ctr,
	JDIMENSION out_row_groups_avail)
{
 800e668:	defff104 	addi	sp,sp,-60
 800e66c:	dfc00e15 	stw	ra,56(sp)
 800e670:	df000d15 	stw	fp,52(sp)
 800e674:	dc800c15 	stw	r18,48(sp)
 800e678:	dc400b15 	stw	r17,44(sp)
 800e67c:	dc000a15 	stw	r16,40(sp)
 800e680:	df000a04 	addi	fp,sp,40
 800e684:	e13ffc15 	stw	r4,-16(fp)
 800e688:	e17ffd15 	stw	r5,-12(fp)
 800e68c:	e1bffe15 	stw	r6,-8(fp)
 800e690:	e1ffff15 	stw	r7,-4(fp)
	my_prep_ptr prep = (my_prep_ptr) cinfo->prep;
 800e694:	e0bffc17 	ldw	r2,-16(fp)
 800e698:	10805e17 	ldw	r2,376(r2)
 800e69c:	e0bff915 	stw	r2,-28(fp)
	int numrows, ci;
	JDIMENSION inrows;
	jpeg_component_info * compptr;

	while (*in_row_ctr < in_rows_avail &&
 800e6a0:	0000b906 	br	800e988 <pre_process_data+0x320>
		*out_row_group_ctr < out_row_groups_avail) {
			/* Do color conversion to fill the conversion buffer. */
			inrows = in_rows_avail - *in_row_ctr;
 800e6a4:	e0bffe17 	ldw	r2,-8(fp)
 800e6a8:	10800017 	ldw	r2,0(r2)
 800e6ac:	e0ffff17 	ldw	r3,-4(fp)
 800e6b0:	1885c83a 	sub	r2,r3,r2
 800e6b4:	e0bffa15 	stw	r2,-24(fp)
			numrows = cinfo->max_v_samp_factor - prep->next_buf_row;
 800e6b8:	e0bffc17 	ldw	r2,-16(fp)
 800e6bc:	10c03f17 	ldw	r3,252(r2)
 800e6c0:	e0bff917 	ldw	r2,-28(fp)
 800e6c4:	10800d17 	ldw	r2,52(r2)
 800e6c8:	1885c83a 	sub	r2,r3,r2
 800e6cc:	e0bffb15 	stw	r2,-20(fp)
			numrows = (int) MIN((JDIMENSION) numrows, inrows);
 800e6d0:	e0bffb17 	ldw	r2,-20(fp)
 800e6d4:	e0fffa17 	ldw	r3,-24(fp)
 800e6d8:	1880012e 	bgeu	r3,r2,800e6e0 <pre_process_data+0x78>
 800e6dc:	1805883a 	mov	r2,r3
 800e6e0:	e0bffb15 	stw	r2,-20(fp)
			(*cinfo->cconvert->color_convert) (cinfo, input_buf + *in_row_ctr,
 800e6e4:	e0bffc17 	ldw	r2,-16(fp)
 800e6e8:	10806117 	ldw	r2,388(r2)
 800e6ec:	12000117 	ldw	r8,4(r2)
 800e6f0:	e0bffe17 	ldw	r2,-8(fp)
 800e6f4:	10800017 	ldw	r2,0(r2)
 800e6f8:	1085883a 	add	r2,r2,r2
 800e6fc:	1085883a 	add	r2,r2,r2
 800e700:	e0fffd17 	ldw	r3,-12(fp)
 800e704:	188b883a 	add	r5,r3,r2
				prep->color_buf,
 800e708:	e0bff917 	ldw	r2,-28(fp)
 800e70c:	10c00204 	addi	r3,r2,8
				(JDIMENSION) prep->next_buf_row,
 800e710:	e0bff917 	ldw	r2,-28(fp)
 800e714:	10800d17 	ldw	r2,52(r2)
		*out_row_group_ctr < out_row_groups_avail) {
			/* Do color conversion to fill the conversion buffer. */
			inrows = in_rows_avail - *in_row_ctr;
			numrows = cinfo->max_v_samp_factor - prep->next_buf_row;
			numrows = (int) MIN((JDIMENSION) numrows, inrows);
			(*cinfo->cconvert->color_convert) (cinfo, input_buf + *in_row_ctr,
 800e718:	e13ffb17 	ldw	r4,-20(fp)
 800e71c:	d9000015 	stw	r4,0(sp)
 800e720:	e13ffc17 	ldw	r4,-16(fp)
 800e724:	180d883a 	mov	r6,r3
 800e728:	100f883a 	mov	r7,r2
 800e72c:	403ee83a 	callr	r8
				prep->color_buf,
				(JDIMENSION) prep->next_buf_row,
				numrows);
			*in_row_ctr += numrows;
 800e730:	e0bffe17 	ldw	r2,-8(fp)
 800e734:	10c00017 	ldw	r3,0(r2)
 800e738:	e0bffb17 	ldw	r2,-20(fp)
 800e73c:	1887883a 	add	r3,r3,r2
 800e740:	e0bffe17 	ldw	r2,-8(fp)
 800e744:	10c00015 	stw	r3,0(r2)
			prep->next_buf_row += numrows;
 800e748:	e0bff917 	ldw	r2,-28(fp)
 800e74c:	10c00d17 	ldw	r3,52(r2)
 800e750:	e0bffb17 	ldw	r2,-20(fp)
 800e754:	1887883a 	add	r3,r3,r2
 800e758:	e0bff917 	ldw	r2,-28(fp)
 800e75c:	10c00d15 	stw	r3,52(r2)
			prep->rows_to_go -= numrows;
 800e760:	e0bff917 	ldw	r2,-28(fp)
 800e764:	10c00c17 	ldw	r3,48(r2)
 800e768:	e0bffb17 	ldw	r2,-20(fp)
 800e76c:	1887c83a 	sub	r3,r3,r2
 800e770:	e0bff917 	ldw	r2,-28(fp)
 800e774:	10c00c15 	stw	r3,48(r2)
			/* If at bottom of image, pad to fill the conversion buffer. */
			if (prep->rows_to_go == 0 &&
 800e778:	e0bff917 	ldw	r2,-28(fp)
 800e77c:	10800c17 	ldw	r2,48(r2)
 800e780:	1000221e 	bne	r2,zero,800e80c <pre_process_data+0x1a4>
				prep->next_buf_row < cinfo->max_v_samp_factor) {
 800e784:	e0bff917 	ldw	r2,-28(fp)
 800e788:	10c00d17 	ldw	r3,52(r2)
 800e78c:	e0bffc17 	ldw	r2,-16(fp)
 800e790:	10803f17 	ldw	r2,252(r2)
				numrows);
			*in_row_ctr += numrows;
			prep->next_buf_row += numrows;
			prep->rows_to_go -= numrows;
			/* If at bottom of image, pad to fill the conversion buffer. */
			if (prep->rows_to_go == 0 &&
 800e794:	18801d0e 	bge	r3,r2,800e80c <pre_process_data+0x1a4>
				prep->next_buf_row < cinfo->max_v_samp_factor) {
					for (ci = 0; ci < cinfo->num_components; ci++) {
 800e798:	e03ff715 	stw	zero,-36(fp)
 800e79c:	00001306 	br	800e7ec <pre_process_data+0x184>
						expand_bottom_edge(prep->color_buf[ci], cinfo->image_width,
 800e7a0:	e0fff917 	ldw	r3,-28(fp)
 800e7a4:	e0bff717 	ldw	r2,-36(fp)
 800e7a8:	10800084 	addi	r2,r2,2
 800e7ac:	1085883a 	add	r2,r2,r2
 800e7b0:	1085883a 	add	r2,r2,r2
 800e7b4:	1885883a 	add	r2,r3,r2
 800e7b8:	11000017 	ldw	r4,0(r2)
 800e7bc:	e0bffc17 	ldw	r2,-16(fp)
 800e7c0:	11400717 	ldw	r5,28(r2)
							prep->next_buf_row, cinfo->max_v_samp_factor);
 800e7c4:	e0bff917 	ldw	r2,-28(fp)
			prep->rows_to_go -= numrows;
			/* If at bottom of image, pad to fill the conversion buffer. */
			if (prep->rows_to_go == 0 &&
				prep->next_buf_row < cinfo->max_v_samp_factor) {
					for (ci = 0; ci < cinfo->num_components; ci++) {
						expand_bottom_edge(prep->color_buf[ci], cinfo->image_width,
 800e7c8:	10c00d17 	ldw	r3,52(r2)
							prep->next_buf_row, cinfo->max_v_samp_factor);
 800e7cc:	e0bffc17 	ldw	r2,-16(fp)
			prep->rows_to_go -= numrows;
			/* If at bottom of image, pad to fill the conversion buffer. */
			if (prep->rows_to_go == 0 &&
				prep->next_buf_row < cinfo->max_v_samp_factor) {
					for (ci = 0; ci < cinfo->num_components; ci++) {
						expand_bottom_edge(prep->color_buf[ci], cinfo->image_width,
 800e7d0:	10803f17 	ldw	r2,252(r2)
 800e7d4:	180d883a 	mov	r6,r3
 800e7d8:	100f883a 	mov	r7,r2
 800e7dc:	800e5ec0 	call	800e5ec <expand_bottom_edge>
			prep->next_buf_row += numrows;
			prep->rows_to_go -= numrows;
			/* If at bottom of image, pad to fill the conversion buffer. */
			if (prep->rows_to_go == 0 &&
				prep->next_buf_row < cinfo->max_v_samp_factor) {
					for (ci = 0; ci < cinfo->num_components; ci++) {
 800e7e0:	e0bff717 	ldw	r2,-36(fp)
 800e7e4:	10800044 	addi	r2,r2,1
 800e7e8:	e0bff715 	stw	r2,-36(fp)
 800e7ec:	e0bffc17 	ldw	r2,-16(fp)
 800e7f0:	10801217 	ldw	r2,72(r2)
 800e7f4:	e0fff717 	ldw	r3,-36(fp)
 800e7f8:	18bfe916 	blt	r3,r2,800e7a0 <pre_process_data+0x138>
						expand_bottom_edge(prep->color_buf[ci], cinfo->image_width,
							prep->next_buf_row, cinfo->max_v_samp_factor);
					}
					prep->next_buf_row = cinfo->max_v_samp_factor;
 800e7fc:	e0bffc17 	ldw	r2,-16(fp)
 800e800:	10c03f17 	ldw	r3,252(r2)
 800e804:	e0bff917 	ldw	r2,-28(fp)
 800e808:	10c00d15 	stw	r3,52(r2)
			}
			/* If we've filled the conversion buffer, empty it. */
			if (prep->next_buf_row == cinfo->max_v_samp_factor) {
 800e80c:	e0bff917 	ldw	r2,-28(fp)
 800e810:	10c00d17 	ldw	r3,52(r2)
 800e814:	e0bffc17 	ldw	r2,-16(fp)
 800e818:	10803f17 	ldw	r2,252(r2)
 800e81c:	1880141e 	bne	r3,r2,800e870 <pre_process_data+0x208>
				(*cinfo->downsample->downsample) (cinfo,
 800e820:	e0bffc17 	ldw	r2,-16(fp)
 800e824:	10806217 	ldw	r2,392(r2)
 800e828:	10c00117 	ldw	r3,4(r2)
					prep->color_buf, (JDIMENSION) 0,
 800e82c:	e0bff917 	ldw	r2,-28(fp)
 800e830:	10800204 	addi	r2,r2,8
					}
					prep->next_buf_row = cinfo->max_v_samp_factor;
			}
			/* If we've filled the conversion buffer, empty it. */
			if (prep->next_buf_row == cinfo->max_v_samp_factor) {
				(*cinfo->downsample->downsample) (cinfo,
 800e834:	e1000617 	ldw	r4,24(fp)
 800e838:	21000017 	ldw	r4,0(r4)
 800e83c:	d9000015 	stw	r4,0(sp)
 800e840:	e13ffc17 	ldw	r4,-16(fp)
 800e844:	100b883a 	mov	r5,r2
 800e848:	000d883a 	mov	r6,zero
 800e84c:	e1c00517 	ldw	r7,20(fp)
 800e850:	183ee83a 	callr	r3
					prep->color_buf, (JDIMENSION) 0,
					output_buf, *out_row_group_ctr);
				prep->next_buf_row = 0;
 800e854:	e0bff917 	ldw	r2,-28(fp)
 800e858:	10000d15 	stw	zero,52(r2)
				(*out_row_group_ctr)++;
 800e85c:	e0800617 	ldw	r2,24(fp)
 800e860:	10800017 	ldw	r2,0(r2)
 800e864:	10c00044 	addi	r3,r2,1
 800e868:	e0800617 	ldw	r2,24(fp)
 800e86c:	10c00015 	stw	r3,0(r2)
			}
			/* If at bottom of image, pad the output to a full iMCU height.
			* Note we assume the caller is providing a one-iMCU-height output buffer!
			*/
			if (prep->rows_to_go == 0 &&
 800e870:	e0bff917 	ldw	r2,-28(fp)
 800e874:	10800c17 	ldw	r2,48(r2)
 800e878:	1000431e 	bne	r2,zero,800e988 <pre_process_data+0x320>
				*out_row_group_ctr < out_row_groups_avail) {
 800e87c:	e0800617 	ldw	r2,24(fp)
 800e880:	10c00017 	ldw	r3,0(r2)
				(*out_row_group_ctr)++;
			}
			/* If at bottom of image, pad the output to a full iMCU height.
			* Note we assume the caller is providing a one-iMCU-height output buffer!
			*/
			if (prep->rows_to_go == 0 &&
 800e884:	e0800717 	ldw	r2,28(fp)
 800e888:	18803f2e 	bgeu	r3,r2,800e988 <pre_process_data+0x320>
				*out_row_group_ctr < out_row_groups_avail) {
					for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e88c:	e03ff715 	stw	zero,-36(fp)
 800e890:	e0bffc17 	ldw	r2,-16(fp)
 800e894:	10801417 	ldw	r2,80(r2)
 800e898:	e0bff815 	stw	r2,-32(fp)
 800e89c:	00003206 	br	800e968 <pre_process_data+0x300>
						ci++, compptr++) {
							numrows = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800e8a0:	e0bff817 	ldw	r2,-32(fp)
 800e8a4:	10c00317 	ldw	r3,12(r2)
 800e8a8:	e0bff817 	ldw	r2,-32(fp)
 800e8ac:	10800a17 	ldw	r2,40(r2)
 800e8b0:	1809883a 	mov	r4,r3
 800e8b4:	100b883a 	mov	r5,r2
 800e8b8:	802c2180 	call	802c218 <__mulsi3>
 800e8bc:	1007883a 	mov	r3,r2
								cinfo->min_DCT_v_scaled_size;
 800e8c0:	e0bffc17 	ldw	r2,-16(fp)
 800e8c4:	10804117 	ldw	r2,260(r2)
			*/
			if (prep->rows_to_go == 0 &&
				*out_row_group_ctr < out_row_groups_avail) {
					for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
						ci++, compptr++) {
							numrows = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800e8c8:	1809883a 	mov	r4,r3
 800e8cc:	100b883a 	mov	r5,r2
 800e8d0:	802c15c0 	call	802c15c <__divsi3>
 800e8d4:	e0bffb15 	stw	r2,-20(fp)
								cinfo->min_DCT_v_scaled_size;
							expand_bottom_edge(output_buf[ci],
 800e8d8:	e0bff717 	ldw	r2,-36(fp)
 800e8dc:	1085883a 	add	r2,r2,r2
 800e8e0:	1085883a 	add	r2,r2,r2
 800e8e4:	e0c00517 	ldw	r3,20(fp)
 800e8e8:	1885883a 	add	r2,r3,r2
 800e8ec:	14800017 	ldw	r18,0(r2)
								compptr->width_in_blocks * compptr->DCT_h_scaled_size,
 800e8f0:	e0bff817 	ldw	r2,-32(fp)
 800e8f4:	10c00717 	ldw	r3,28(r2)
 800e8f8:	e0bff817 	ldw	r2,-32(fp)
 800e8fc:	10800917 	ldw	r2,36(r2)
				*out_row_group_ctr < out_row_groups_avail) {
					for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
						ci++, compptr++) {
							numrows = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
								cinfo->min_DCT_v_scaled_size;
							expand_bottom_edge(output_buf[ci],
 800e900:	1809883a 	mov	r4,r3
 800e904:	100b883a 	mov	r5,r2
 800e908:	802c2180 	call	802c218 <__mulsi3>
 800e90c:	1023883a 	mov	r17,r2
								compptr->width_in_blocks * compptr->DCT_h_scaled_size,
								(int) (*out_row_group_ctr * numrows),
 800e910:	e0800617 	ldw	r2,24(fp)
 800e914:	10c00017 	ldw	r3,0(r2)
 800e918:	e0bffb17 	ldw	r2,-20(fp)
 800e91c:	1809883a 	mov	r4,r3
 800e920:	100b883a 	mov	r5,r2
 800e924:	802c2180 	call	802c218 <__mulsi3>
				*out_row_group_ctr < out_row_groups_avail) {
					for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
						ci++, compptr++) {
							numrows = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
								cinfo->min_DCT_v_scaled_size;
							expand_bottom_edge(output_buf[ci],
 800e928:	1021883a 	mov	r16,r2
								compptr->width_in_blocks * compptr->DCT_h_scaled_size,
								(int) (*out_row_group_ctr * numrows),
								(int) (out_row_groups_avail * numrows));
 800e92c:	e0bffb17 	ldw	r2,-20(fp)
 800e930:	1009883a 	mov	r4,r2
 800e934:	e1400717 	ldw	r5,28(fp)
 800e938:	802c2180 	call	802c218 <__mulsi3>
				*out_row_group_ctr < out_row_groups_avail) {
					for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
						ci++, compptr++) {
							numrows = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
								cinfo->min_DCT_v_scaled_size;
							expand_bottom_edge(output_buf[ci],
 800e93c:	9009883a 	mov	r4,r18
 800e940:	880b883a 	mov	r5,r17
 800e944:	800d883a 	mov	r6,r16
 800e948:	100f883a 	mov	r7,r2
 800e94c:	800e5ec0 	call	800e5ec <expand_bottom_edge>
			* Note we assume the caller is providing a one-iMCU-height output buffer!
			*/
			if (prep->rows_to_go == 0 &&
				*out_row_group_ctr < out_row_groups_avail) {
					for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
						ci++, compptr++) {
 800e950:	e0bff717 	ldw	r2,-36(fp)
 800e954:	10800044 	addi	r2,r2,1
 800e958:	e0bff715 	stw	r2,-36(fp)
 800e95c:	e0bff817 	ldw	r2,-32(fp)
 800e960:	10801604 	addi	r2,r2,88
 800e964:	e0bff815 	stw	r2,-32(fp)
			/* If at bottom of image, pad the output to a full iMCU height.
			* Note we assume the caller is providing a one-iMCU-height output buffer!
			*/
			if (prep->rows_to_go == 0 &&
				*out_row_group_ctr < out_row_groups_avail) {
					for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e968:	e0bffc17 	ldw	r2,-16(fp)
 800e96c:	10801217 	ldw	r2,72(r2)
 800e970:	e0fff717 	ldw	r3,-36(fp)
 800e974:	18bfca16 	blt	r3,r2,800e8a0 <pre_process_data+0x238>
							expand_bottom_edge(output_buf[ci],
								compptr->width_in_blocks * compptr->DCT_h_scaled_size,
								(int) (*out_row_group_ctr * numrows),
								(int) (out_row_groups_avail * numrows));
					}
					*out_row_group_ctr = out_row_groups_avail;
 800e978:	e0800617 	ldw	r2,24(fp)
 800e97c:	e0c00717 	ldw	r3,28(fp)
 800e980:	10c00015 	stw	r3,0(r2)
					break;			/* can exit outer loop without test */
 800e984:	00000806 	br	800e9a8 <pre_process_data+0x340>
	my_prep_ptr prep = (my_prep_ptr) cinfo->prep;
	int numrows, ci;
	JDIMENSION inrows;
	jpeg_component_info * compptr;

	while (*in_row_ctr < in_rows_avail &&
 800e988:	e0bffe17 	ldw	r2,-8(fp)
 800e98c:	10c00017 	ldw	r3,0(r2)
 800e990:	e0bfff17 	ldw	r2,-4(fp)
 800e994:	1880042e 	bgeu	r3,r2,800e9a8 <pre_process_data+0x340>
		*out_row_group_ctr < out_row_groups_avail) {
 800e998:	e0800617 	ldw	r2,24(fp)
 800e99c:	10c00017 	ldw	r3,0(r2)
	my_prep_ptr prep = (my_prep_ptr) cinfo->prep;
	int numrows, ci;
	JDIMENSION inrows;
	jpeg_component_info * compptr;

	while (*in_row_ctr < in_rows_avail &&
 800e9a0:	e0800717 	ldw	r2,28(fp)
 800e9a4:	18bf3f36 	bltu	r3,r2,800e6a4 <pre_process_data+0x3c>
					}
					*out_row_group_ctr = out_row_groups_avail;
					break;			/* can exit outer loop without test */
			}
	}
}
 800e9a8:	e037883a 	mov	sp,fp
 800e9ac:	dfc00417 	ldw	ra,16(sp)
 800e9b0:	df000317 	ldw	fp,12(sp)
 800e9b4:	dc800217 	ldw	r18,8(sp)
 800e9b8:	dc400117 	ldw	r17,4(sp)
 800e9bc:	dc000017 	ldw	r16,0(sp)
 800e9c0:	dec00504 	addi	sp,sp,20
 800e9c4:	f800283a 	ret

0800e9c8 <pre_process_context>:
	pre_process_context (j_compress_ptr cinfo,
	JSAMPARRAY input_buf, JDIMENSION *in_row_ctr,
	JDIMENSION in_rows_avail,
	JSAMPIMAGE output_buf, JDIMENSION *out_row_group_ctr,
	JDIMENSION out_row_groups_avail)
{
 800e9c8:	defff204 	addi	sp,sp,-56
 800e9cc:	dfc00d15 	stw	ra,52(sp)
 800e9d0:	df000c15 	stw	fp,48(sp)
 800e9d4:	df000c04 	addi	fp,sp,48
 800e9d8:	e13ffc15 	stw	r4,-16(fp)
 800e9dc:	e17ffd15 	stw	r5,-12(fp)
 800e9e0:	e1bffe15 	stw	r6,-8(fp)
 800e9e4:	e1ffff15 	stw	r7,-4(fp)
	my_prep_ptr prep = (my_prep_ptr) cinfo->prep;
 800e9e8:	e0bffc17 	ldw	r2,-16(fp)
 800e9ec:	10805e17 	ldw	r2,376(r2)
 800e9f0:	e0bff815 	stw	r2,-32(fp)
	int numrows, ci;
	int buf_height = cinfo->max_v_samp_factor * 3;
 800e9f4:	e0bffc17 	ldw	r2,-16(fp)
 800e9f8:	10c03f17 	ldw	r3,252(r2)
 800e9fc:	1805883a 	mov	r2,r3
 800ea00:	1085883a 	add	r2,r2,r2
 800ea04:	10c5883a 	add	r2,r2,r3
 800ea08:	e0bff915 	stw	r2,-28(fp)
	JDIMENSION inrows;

	while (*out_row_group_ctr < out_row_groups_avail) {
 800ea0c:	0000c306 	br	800ed1c <pre_process_context+0x354>
		if (*in_row_ctr < in_rows_avail) {
 800ea10:	e0bffe17 	ldw	r2,-8(fp)
 800ea14:	10c00017 	ldw	r3,0(r2)
 800ea18:	e0bfff17 	ldw	r2,-4(fp)
 800ea1c:	1880672e 	bgeu	r3,r2,800ebbc <pre_process_context+0x1f4>
			/* Do color conversion to fill the conversion buffer. */
			inrows = in_rows_avail - *in_row_ctr;
 800ea20:	e0bffe17 	ldw	r2,-8(fp)
 800ea24:	10800017 	ldw	r2,0(r2)
 800ea28:	e0ffff17 	ldw	r3,-4(fp)
 800ea2c:	1885c83a 	sub	r2,r3,r2
 800ea30:	e0bffa15 	stw	r2,-24(fp)
			numrows = prep->next_buf_stop - prep->next_buf_row;
 800ea34:	e0bff817 	ldw	r2,-32(fp)
 800ea38:	10c00f17 	ldw	r3,60(r2)
 800ea3c:	e0bff817 	ldw	r2,-32(fp)
 800ea40:	10800d17 	ldw	r2,52(r2)
 800ea44:	1885c83a 	sub	r2,r3,r2
 800ea48:	e0bffb15 	stw	r2,-20(fp)
			numrows = (int) MIN((JDIMENSION) numrows, inrows);
 800ea4c:	e0bffb17 	ldw	r2,-20(fp)
 800ea50:	e0fffa17 	ldw	r3,-24(fp)
 800ea54:	1880012e 	bgeu	r3,r2,800ea5c <pre_process_context+0x94>
 800ea58:	1805883a 	mov	r2,r3
 800ea5c:	e0bffb15 	stw	r2,-20(fp)
			(*cinfo->cconvert->color_convert) (cinfo, input_buf + *in_row_ctr,
 800ea60:	e0bffc17 	ldw	r2,-16(fp)
 800ea64:	10806117 	ldw	r2,388(r2)
 800ea68:	12000117 	ldw	r8,4(r2)
 800ea6c:	e0bffe17 	ldw	r2,-8(fp)
 800ea70:	10800017 	ldw	r2,0(r2)
 800ea74:	1085883a 	add	r2,r2,r2
 800ea78:	1085883a 	add	r2,r2,r2
 800ea7c:	e0fffd17 	ldw	r3,-12(fp)
 800ea80:	188b883a 	add	r5,r3,r2
				prep->color_buf,
 800ea84:	e0bff817 	ldw	r2,-32(fp)
 800ea88:	10c00204 	addi	r3,r2,8
				(JDIMENSION) prep->next_buf_row,
 800ea8c:	e0bff817 	ldw	r2,-32(fp)
 800ea90:	10800d17 	ldw	r2,52(r2)
		if (*in_row_ctr < in_rows_avail) {
			/* Do color conversion to fill the conversion buffer. */
			inrows = in_rows_avail - *in_row_ctr;
			numrows = prep->next_buf_stop - prep->next_buf_row;
			numrows = (int) MIN((JDIMENSION) numrows, inrows);
			(*cinfo->cconvert->color_convert) (cinfo, input_buf + *in_row_ctr,
 800ea94:	e13ffb17 	ldw	r4,-20(fp)
 800ea98:	d9000015 	stw	r4,0(sp)
 800ea9c:	e13ffc17 	ldw	r4,-16(fp)
 800eaa0:	180d883a 	mov	r6,r3
 800eaa4:	100f883a 	mov	r7,r2
 800eaa8:	403ee83a 	callr	r8
				prep->color_buf,
				(JDIMENSION) prep->next_buf_row,
				numrows);
			/* Pad at top of image, if first time through */
			if (prep->rows_to_go == cinfo->image_height) {
 800eaac:	e0bff817 	ldw	r2,-32(fp)
 800eab0:	10c00c17 	ldw	r3,48(r2)
 800eab4:	e0bffc17 	ldw	r2,-16(fp)
 800eab8:	10800817 	ldw	r2,32(r2)
 800eabc:	18802c1e 	bne	r3,r2,800eb70 <pre_process_context+0x1a8>
				for (ci = 0; ci < cinfo->num_components; ci++) {
 800eac0:	e03ff615 	stw	zero,-40(fp)
 800eac4:	00002606 	br	800eb60 <pre_process_context+0x198>
					int row;
					for (row = 1; row <= cinfo->max_v_samp_factor; row++) {
 800eac8:	00800044 	movi	r2,1
 800eacc:	e0bff715 	stw	r2,-36(fp)
 800ead0:	00001c06 	br	800eb44 <pre_process_context+0x17c>
						jcopy_sample_rows(prep->color_buf[ci], 0,
 800ead4:	e0fff817 	ldw	r3,-32(fp)
 800ead8:	e0bff617 	ldw	r2,-40(fp)
 800eadc:	10800084 	addi	r2,r2,2
 800eae0:	1085883a 	add	r2,r2,r2
 800eae4:	1085883a 	add	r2,r2,r2
 800eae8:	1885883a 	add	r2,r3,r2
 800eaec:	11000017 	ldw	r4,0(r2)
							prep->color_buf[ci], -row,
 800eaf0:	e0fff817 	ldw	r3,-32(fp)
			/* Pad at top of image, if first time through */
			if (prep->rows_to_go == cinfo->image_height) {
				for (ci = 0; ci < cinfo->num_components; ci++) {
					int row;
					for (row = 1; row <= cinfo->max_v_samp_factor; row++) {
						jcopy_sample_rows(prep->color_buf[ci], 0,
 800eaf4:	e0bff617 	ldw	r2,-40(fp)
 800eaf8:	10800084 	addi	r2,r2,2
 800eafc:	1085883a 	add	r2,r2,r2
 800eb00:	1085883a 	add	r2,r2,r2
 800eb04:	1885883a 	add	r2,r3,r2
 800eb08:	10c00017 	ldw	r3,0(r2)
 800eb0c:	e0bff717 	ldw	r2,-36(fp)
 800eb10:	0085c83a 	sub	r2,zero,r2
							prep->color_buf[ci], -row,
							1, cinfo->image_width);
 800eb14:	e17ffc17 	ldw	r5,-16(fp)
			/* Pad at top of image, if first time through */
			if (prep->rows_to_go == cinfo->image_height) {
				for (ci = 0; ci < cinfo->num_components; ci++) {
					int row;
					for (row = 1; row <= cinfo->max_v_samp_factor; row++) {
						jcopy_sample_rows(prep->color_buf[ci], 0,
 800eb18:	29400717 	ldw	r5,28(r5)
 800eb1c:	01800044 	movi	r6,1
 800eb20:	d9800015 	stw	r6,0(sp)
 800eb24:	d9400115 	stw	r5,4(sp)
 800eb28:	000b883a 	mov	r5,zero
 800eb2c:	180d883a 	mov	r6,r3
 800eb30:	100f883a 	mov	r7,r2
 800eb34:	802b1240 	call	802b124 <jcopy_sample_rows>
				numrows);
			/* Pad at top of image, if first time through */
			if (prep->rows_to_go == cinfo->image_height) {
				for (ci = 0; ci < cinfo->num_components; ci++) {
					int row;
					for (row = 1; row <= cinfo->max_v_samp_factor; row++) {
 800eb38:	e0bff717 	ldw	r2,-36(fp)
 800eb3c:	10800044 	addi	r2,r2,1
 800eb40:	e0bff715 	stw	r2,-36(fp)
 800eb44:	e0bffc17 	ldw	r2,-16(fp)
 800eb48:	10c03f17 	ldw	r3,252(r2)
 800eb4c:	e0bff717 	ldw	r2,-36(fp)
 800eb50:	18bfe00e 	bge	r3,r2,800ead4 <pre_process_context+0x10c>
				prep->color_buf,
				(JDIMENSION) prep->next_buf_row,
				numrows);
			/* Pad at top of image, if first time through */
			if (prep->rows_to_go == cinfo->image_height) {
				for (ci = 0; ci < cinfo->num_components; ci++) {
 800eb54:	e0bff617 	ldw	r2,-40(fp)
 800eb58:	10800044 	addi	r2,r2,1
 800eb5c:	e0bff615 	stw	r2,-40(fp)
 800eb60:	e0bffc17 	ldw	r2,-16(fp)
 800eb64:	10801217 	ldw	r2,72(r2)
 800eb68:	e0fff617 	ldw	r3,-40(fp)
 800eb6c:	18bfd616 	blt	r3,r2,800eac8 <pre_process_context+0x100>
							prep->color_buf[ci], -row,
							1, cinfo->image_width);
					}
				}
			}
			*in_row_ctr += numrows;
 800eb70:	e0bffe17 	ldw	r2,-8(fp)
 800eb74:	10c00017 	ldw	r3,0(r2)
 800eb78:	e0bffb17 	ldw	r2,-20(fp)
 800eb7c:	1887883a 	add	r3,r3,r2
 800eb80:	e0bffe17 	ldw	r2,-8(fp)
 800eb84:	10c00015 	stw	r3,0(r2)
			prep->next_buf_row += numrows;
 800eb88:	e0bff817 	ldw	r2,-32(fp)
 800eb8c:	10c00d17 	ldw	r3,52(r2)
 800eb90:	e0bffb17 	ldw	r2,-20(fp)
 800eb94:	1887883a 	add	r3,r3,r2
 800eb98:	e0bff817 	ldw	r2,-32(fp)
 800eb9c:	10c00d15 	stw	r3,52(r2)
			prep->rows_to_go -= numrows;
 800eba0:	e0bff817 	ldw	r2,-32(fp)
 800eba4:	10c00c17 	ldw	r3,48(r2)
 800eba8:	e0bffb17 	ldw	r2,-20(fp)
 800ebac:	1887c83a 	sub	r3,r3,r2
 800ebb0:	e0bff817 	ldw	r2,-32(fp)
 800ebb4:	10c00c15 	stw	r3,48(r2)
 800ebb8:	00002506 	br	800ec50 <pre_process_context+0x288>
		} else {
			/* Return for more data, unless we are at the bottom of the image. */
			if (prep->rows_to_go != 0)
 800ebbc:	e0bff817 	ldw	r2,-32(fp)
 800ebc0:	10800c17 	ldw	r2,48(r2)
 800ebc4:	10005a1e 	bne	r2,zero,800ed30 <pre_process_context+0x368>
				break;
			/* When at bottom of image, pad to fill the conversion buffer. */
			if (prep->next_buf_row < prep->next_buf_stop) {
 800ebc8:	e0bff817 	ldw	r2,-32(fp)
 800ebcc:	10c00d17 	ldw	r3,52(r2)
 800ebd0:	e0bff817 	ldw	r2,-32(fp)
 800ebd4:	10800f17 	ldw	r2,60(r2)
 800ebd8:	18801d0e 	bge	r3,r2,800ec50 <pre_process_context+0x288>
				for (ci = 0; ci < cinfo->num_components; ci++) {
 800ebdc:	e03ff615 	stw	zero,-40(fp)
 800ebe0:	00001306 	br	800ec30 <pre_process_context+0x268>
					expand_bottom_edge(prep->color_buf[ci], cinfo->image_width,
 800ebe4:	e0fff817 	ldw	r3,-32(fp)
 800ebe8:	e0bff617 	ldw	r2,-40(fp)
 800ebec:	10800084 	addi	r2,r2,2
 800ebf0:	1085883a 	add	r2,r2,r2
 800ebf4:	1085883a 	add	r2,r2,r2
 800ebf8:	1885883a 	add	r2,r3,r2
 800ebfc:	11000017 	ldw	r4,0(r2)
 800ec00:	e0bffc17 	ldw	r2,-16(fp)
 800ec04:	11400717 	ldw	r5,28(r2)
						prep->next_buf_row, prep->next_buf_stop);
 800ec08:	e0bff817 	ldw	r2,-32(fp)
			if (prep->rows_to_go != 0)
				break;
			/* When at bottom of image, pad to fill the conversion buffer. */
			if (prep->next_buf_row < prep->next_buf_stop) {
				for (ci = 0; ci < cinfo->num_components; ci++) {
					expand_bottom_edge(prep->color_buf[ci], cinfo->image_width,
 800ec0c:	10c00d17 	ldw	r3,52(r2)
						prep->next_buf_row, prep->next_buf_stop);
 800ec10:	e0bff817 	ldw	r2,-32(fp)
			if (prep->rows_to_go != 0)
				break;
			/* When at bottom of image, pad to fill the conversion buffer. */
			if (prep->next_buf_row < prep->next_buf_stop) {
				for (ci = 0; ci < cinfo->num_components; ci++) {
					expand_bottom_edge(prep->color_buf[ci], cinfo->image_width,
 800ec14:	10800f17 	ldw	r2,60(r2)
 800ec18:	180d883a 	mov	r6,r3
 800ec1c:	100f883a 	mov	r7,r2
 800ec20:	800e5ec0 	call	800e5ec <expand_bottom_edge>
			/* Return for more data, unless we are at the bottom of the image. */
			if (prep->rows_to_go != 0)
				break;
			/* When at bottom of image, pad to fill the conversion buffer. */
			if (prep->next_buf_row < prep->next_buf_stop) {
				for (ci = 0; ci < cinfo->num_components; ci++) {
 800ec24:	e0bff617 	ldw	r2,-40(fp)
 800ec28:	10800044 	addi	r2,r2,1
 800ec2c:	e0bff615 	stw	r2,-40(fp)
 800ec30:	e0bffc17 	ldw	r2,-16(fp)
 800ec34:	10801217 	ldw	r2,72(r2)
 800ec38:	e0fff617 	ldw	r3,-40(fp)
 800ec3c:	18bfe916 	blt	r3,r2,800ebe4 <pre_process_context+0x21c>
					expand_bottom_edge(prep->color_buf[ci], cinfo->image_width,
						prep->next_buf_row, prep->next_buf_stop);
				}
				prep->next_buf_row = prep->next_buf_stop;
 800ec40:	e0bff817 	ldw	r2,-32(fp)
 800ec44:	10c00f17 	ldw	r3,60(r2)
 800ec48:	e0bff817 	ldw	r2,-32(fp)
 800ec4c:	10c00d15 	stw	r3,52(r2)
			}
		}
		/* If we've gotten enough data, downsample a row group. */
		if (prep->next_buf_row == prep->next_buf_stop) {
 800ec50:	e0bff817 	ldw	r2,-32(fp)
 800ec54:	10c00d17 	ldw	r3,52(r2)
 800ec58:	e0bff817 	ldw	r2,-32(fp)
 800ec5c:	10800f17 	ldw	r2,60(r2)
 800ec60:	18802e1e 	bne	r3,r2,800ed1c <pre_process_context+0x354>
			(*cinfo->downsample->downsample) (cinfo,
 800ec64:	e0bffc17 	ldw	r2,-16(fp)
 800ec68:	10806217 	ldw	r2,392(r2)
 800ec6c:	12000117 	ldw	r8,4(r2)
				prep->color_buf,
 800ec70:	e0bff817 	ldw	r2,-32(fp)
 800ec74:	10c00204 	addi	r3,r2,8
				(JDIMENSION) prep->this_row_group,
 800ec78:	e0bff817 	ldw	r2,-32(fp)
 800ec7c:	10800e17 	ldw	r2,56(r2)
				prep->next_buf_row = prep->next_buf_stop;
			}
		}
		/* If we've gotten enough data, downsample a row group. */
		if (prep->next_buf_row == prep->next_buf_stop) {
			(*cinfo->downsample->downsample) (cinfo,
 800ec80:	e1000317 	ldw	r4,12(fp)
 800ec84:	21000017 	ldw	r4,0(r4)
 800ec88:	d9000015 	stw	r4,0(sp)
 800ec8c:	e13ffc17 	ldw	r4,-16(fp)
 800ec90:	180b883a 	mov	r5,r3
 800ec94:	100d883a 	mov	r6,r2
 800ec98:	e1c00217 	ldw	r7,8(fp)
 800ec9c:	403ee83a 	callr	r8
				prep->color_buf,
				(JDIMENSION) prep->this_row_group,
				output_buf, *out_row_group_ctr);
			(*out_row_group_ctr)++;
 800eca0:	e0800317 	ldw	r2,12(fp)
 800eca4:	10800017 	ldw	r2,0(r2)
 800eca8:	10c00044 	addi	r3,r2,1
 800ecac:	e0800317 	ldw	r2,12(fp)
 800ecb0:	10c00015 	stw	r3,0(r2)
			/* Advance pointers with wraparound as necessary. */
			prep->this_row_group += cinfo->max_v_samp_factor;
 800ecb4:	e0bff817 	ldw	r2,-32(fp)
 800ecb8:	10c00e17 	ldw	r3,56(r2)
 800ecbc:	e0bffc17 	ldw	r2,-16(fp)
 800ecc0:	10803f17 	ldw	r2,252(r2)
 800ecc4:	1887883a 	add	r3,r3,r2
 800ecc8:	e0bff817 	ldw	r2,-32(fp)
 800eccc:	10c00e15 	stw	r3,56(r2)
			if (prep->this_row_group >= buf_height)
 800ecd0:	e0bff817 	ldw	r2,-32(fp)
 800ecd4:	10c00e17 	ldw	r3,56(r2)
 800ecd8:	e0bff917 	ldw	r2,-28(fp)
 800ecdc:	18800216 	blt	r3,r2,800ece8 <pre_process_context+0x320>
				prep->this_row_group = 0;
 800ece0:	e0bff817 	ldw	r2,-32(fp)
 800ece4:	10000e15 	stw	zero,56(r2)
			if (prep->next_buf_row >= buf_height)
 800ece8:	e0bff817 	ldw	r2,-32(fp)
 800ecec:	10c00d17 	ldw	r3,52(r2)
 800ecf0:	e0bff917 	ldw	r2,-28(fp)
 800ecf4:	18800216 	blt	r3,r2,800ed00 <pre_process_context+0x338>
				prep->next_buf_row = 0;
 800ecf8:	e0bff817 	ldw	r2,-32(fp)
 800ecfc:	10000d15 	stw	zero,52(r2)
			prep->next_buf_stop = prep->next_buf_row + cinfo->max_v_samp_factor;
 800ed00:	e0bff817 	ldw	r2,-32(fp)
 800ed04:	10c00d17 	ldw	r3,52(r2)
 800ed08:	e0bffc17 	ldw	r2,-16(fp)
 800ed0c:	10803f17 	ldw	r2,252(r2)
 800ed10:	1887883a 	add	r3,r3,r2
 800ed14:	e0bff817 	ldw	r2,-32(fp)
 800ed18:	10c00f15 	stw	r3,60(r2)
	my_prep_ptr prep = (my_prep_ptr) cinfo->prep;
	int numrows, ci;
	int buf_height = cinfo->max_v_samp_factor * 3;
	JDIMENSION inrows;

	while (*out_row_group_ctr < out_row_groups_avail) {
 800ed1c:	e0800317 	ldw	r2,12(fp)
 800ed20:	10c00017 	ldw	r3,0(r2)
 800ed24:	e0800417 	ldw	r2,16(fp)
 800ed28:	18bf3936 	bltu	r3,r2,800ea10 <pre_process_context+0x48>
 800ed2c:	00000106 	br	800ed34 <pre_process_context+0x36c>
			prep->next_buf_row += numrows;
			prep->rows_to_go -= numrows;
		} else {
			/* Return for more data, unless we are at the bottom of the image. */
			if (prep->rows_to_go != 0)
				break;
 800ed30:	0001883a 	nop
			if (prep->next_buf_row >= buf_height)
				prep->next_buf_row = 0;
			prep->next_buf_stop = prep->next_buf_row + cinfo->max_v_samp_factor;
		}
	}
}
 800ed34:	e037883a 	mov	sp,fp
 800ed38:	dfc00117 	ldw	ra,4(sp)
 800ed3c:	df000017 	ldw	fp,0(sp)
 800ed40:	dec00204 	addi	sp,sp,8
 800ed44:	f800283a 	ret

0800ed48 <create_context_buffer>:
* Create the wrapped-around downsampling input buffer needed for context mode.
*/

LOCAL(void)
	create_context_buffer (j_compress_ptr cinfo)
{
 800ed48:	defff504 	addi	sp,sp,-44
 800ed4c:	dfc00a15 	stw	ra,40(sp)
 800ed50:	df000915 	stw	fp,36(sp)
 800ed54:	dc000815 	stw	r16,32(sp)
 800ed58:	df000804 	addi	fp,sp,32
 800ed5c:	e13fff15 	stw	r4,-4(fp)
	my_prep_ptr prep = (my_prep_ptr) cinfo->prep;
 800ed60:	e0bfff17 	ldw	r2,-4(fp)
 800ed64:	10805e17 	ldw	r2,376(r2)
 800ed68:	e0bffc15 	stw	r2,-16(fp)
	int rgroup_height = cinfo->max_v_samp_factor;
 800ed6c:	e0bfff17 	ldw	r2,-4(fp)
 800ed70:	10803f17 	ldw	r2,252(r2)
 800ed74:	e0bffd15 	stw	r2,-12(fp)

	/* Grab enough space for fake row pointers for all the components;
	* we need five row groups' worth of pointers for each component.
	*/
	fake_buffer = (JSAMPARRAY)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ed78:	e0bfff17 	ldw	r2,-4(fp)
 800ed7c:	10800117 	ldw	r2,4(r2)
 800ed80:	14000017 	ldw	r16,0(r2)
		(cinfo->num_components * 5 * rgroup_height) *
 800ed84:	e0bfff17 	ldw	r2,-4(fp)
 800ed88:	10801217 	ldw	r2,72(r2)

	/* Grab enough space for fake row pointers for all the components;
	* we need five row groups' worth of pointers for each component.
	*/
	fake_buffer = (JSAMPARRAY)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ed8c:	1009883a 	mov	r4,r2
 800ed90:	01400504 	movi	r5,20
 800ed94:	802c2180 	call	802c218 <__mulsi3>
 800ed98:	1009883a 	mov	r4,r2
 800ed9c:	e17ffd17 	ldw	r5,-12(fp)
 800eda0:	802c2180 	call	802c218 <__mulsi3>
	JSAMPARRAY true_buffer, fake_buffer;

	/* Grab enough space for fake row pointers for all the components;
	* we need five row groups' worth of pointers for each component.
	*/
	fake_buffer = (JSAMPARRAY)
 800eda4:	e13fff17 	ldw	r4,-4(fp)
 800eda8:	01400044 	movi	r5,1
 800edac:	100d883a 	mov	r6,r2
 800edb0:	803ee83a 	callr	r16
 800edb4:	e0bffb15 	stw	r2,-20(fp)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
		(cinfo->num_components * 5 * rgroup_height) *
		SIZEOF(JSAMPROW));

	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800edb8:	e03ff815 	stw	zero,-32(fp)
 800edbc:	e0bfff17 	ldw	r2,-4(fp)
 800edc0:	10801417 	ldw	r2,80(r2)
 800edc4:	e0bffa15 	stw	r2,-24(fp)
 800edc8:	00006e06 	br	800ef84 <create_context_buffer+0x23c>
		ci++, compptr++) {
			/* Allocate the actual buffer space (3 row groups) for this component.
			* We make the buffer wide enough to allow the downsampler to edge-expand
			* horizontally within the buffer, if it so chooses.
			*/
			true_buffer = (*cinfo->mem->alloc_sarray)
 800edcc:	e0bfff17 	ldw	r2,-4(fp)
 800edd0:	10800117 	ldw	r2,4(r2)
				((j_common_ptr) cinfo, JPOOL_IMAGE,
 800edd4:	14000217 	ldw	r16,8(r2)
				(JDIMENSION) (((long) compptr->width_in_blocks *
 800edd8:	e0bffa17 	ldw	r2,-24(fp)
 800eddc:	10800717 	ldw	r2,28(r2)
 800ede0:	1007883a 	mov	r3,r2
				cinfo->min_DCT_h_scaled_size *
 800ede4:	e0bfff17 	ldw	r2,-4(fp)
 800ede8:	10804017 	ldw	r2,256(r2)
			* We make the buffer wide enough to allow the downsampler to edge-expand
			* horizontally within the buffer, if it so chooses.
			*/
			true_buffer = (*cinfo->mem->alloc_sarray)
				((j_common_ptr) cinfo, JPOOL_IMAGE,
				(JDIMENSION) (((long) compptr->width_in_blocks *
 800edec:	1809883a 	mov	r4,r3
 800edf0:	100b883a 	mov	r5,r2
 800edf4:	802c2180 	call	802c218 <__mulsi3>
 800edf8:	1007883a 	mov	r3,r2
				cinfo->min_DCT_h_scaled_size *
				cinfo->max_h_samp_factor) / compptr->h_samp_factor),
 800edfc:	e0bfff17 	ldw	r2,-4(fp)
 800ee00:	10803e17 	ldw	r2,248(r2)
			* horizontally within the buffer, if it so chooses.
			*/
			true_buffer = (*cinfo->mem->alloc_sarray)
				((j_common_ptr) cinfo, JPOOL_IMAGE,
				(JDIMENSION) (((long) compptr->width_in_blocks *
				cinfo->min_DCT_h_scaled_size *
 800ee04:	1809883a 	mov	r4,r3
 800ee08:	100b883a 	mov	r5,r2
 800ee0c:	802c2180 	call	802c218 <__mulsi3>
 800ee10:	1007883a 	mov	r3,r2
				cinfo->max_h_samp_factor) / compptr->h_samp_factor),
 800ee14:	e0bffa17 	ldw	r2,-24(fp)
 800ee18:	10800217 	ldw	r2,8(r2)
 800ee1c:	1809883a 	mov	r4,r3
 800ee20:	100b883a 	mov	r5,r2
 800ee24:	802c15c0 	call	802c15c <__divsi3>
			/* Allocate the actual buffer space (3 row groups) for this component.
			* We make the buffer wide enough to allow the downsampler to edge-expand
			* horizontally within the buffer, if it so chooses.
			*/
			true_buffer = (*cinfo->mem->alloc_sarray)
				((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ee28:	100d883a 	mov	r6,r2
				(JDIMENSION) (((long) compptr->width_in_blocks *
				cinfo->min_DCT_h_scaled_size *
				cinfo->max_h_samp_factor) / compptr->h_samp_factor),
				(JDIMENSION) (3 * rgroup_height));
 800ee2c:	e0fffd17 	ldw	r3,-12(fp)
 800ee30:	1805883a 	mov	r2,r3
 800ee34:	1085883a 	add	r2,r2,r2
 800ee38:	10c5883a 	add	r2,r2,r3
		ci++, compptr++) {
			/* Allocate the actual buffer space (3 row groups) for this component.
			* We make the buffer wide enough to allow the downsampler to edge-expand
			* horizontally within the buffer, if it so chooses.
			*/
			true_buffer = (*cinfo->mem->alloc_sarray)
 800ee3c:	e13fff17 	ldw	r4,-4(fp)
 800ee40:	01400044 	movi	r5,1
 800ee44:	100f883a 	mov	r7,r2
 800ee48:	803ee83a 	callr	r16
 800ee4c:	e0bffe15 	stw	r2,-8(fp)
				(JDIMENSION) (((long) compptr->width_in_blocks *
				cinfo->min_DCT_h_scaled_size *
				cinfo->max_h_samp_factor) / compptr->h_samp_factor),
				(JDIMENSION) (3 * rgroup_height));
			/* Copy true buffer row pointers into the middle of the fake row array */
			MEMCOPY(fake_buffer + rgroup_height, true_buffer,
 800ee50:	e0bffd17 	ldw	r2,-12(fp)
 800ee54:	1085883a 	add	r2,r2,r2
 800ee58:	1085883a 	add	r2,r2,r2
 800ee5c:	e0fffb17 	ldw	r3,-20(fp)
 800ee60:	18a1883a 	add	r16,r3,r2
 800ee64:	e13ffd17 	ldw	r4,-12(fp)
 800ee68:	01400304 	movi	r5,12
 800ee6c:	802c2180 	call	802c218 <__mulsi3>
 800ee70:	8009883a 	mov	r4,r16
 800ee74:	e17ffe17 	ldw	r5,-8(fp)
 800ee78:	100d883a 	mov	r6,r2
 800ee7c:	802ebb00 	call	802ebb0 <memcpy>
				3 * rgroup_height * SIZEOF(JSAMPROW));
			/* Fill in the above and below wraparound pointers */
			for (i = 0; i < rgroup_height; i++) {
 800ee80:	e03ff915 	stw	zero,-28(fp)
 800ee84:	00002406 	br	800ef18 <create_context_buffer+0x1d0>
				fake_buffer[i] = true_buffer[2 * rgroup_height + i];
 800ee88:	e0bff917 	ldw	r2,-28(fp)
 800ee8c:	1085883a 	add	r2,r2,r2
 800ee90:	1085883a 	add	r2,r2,r2
 800ee94:	e0fffb17 	ldw	r3,-20(fp)
 800ee98:	1887883a 	add	r3,r3,r2
 800ee9c:	e0bffd17 	ldw	r2,-12(fp)
 800eea0:	1085883a 	add	r2,r2,r2
 800eea4:	1009883a 	mov	r4,r2
 800eea8:	e0bff917 	ldw	r2,-28(fp)
 800eeac:	2085883a 	add	r2,r4,r2
 800eeb0:	1085883a 	add	r2,r2,r2
 800eeb4:	1085883a 	add	r2,r2,r2
 800eeb8:	e13ffe17 	ldw	r4,-8(fp)
 800eebc:	2085883a 	add	r2,r4,r2
 800eec0:	10800017 	ldw	r2,0(r2)
 800eec4:	18800015 	stw	r2,0(r3)
				fake_buffer[4 * rgroup_height + i] = true_buffer[i];
 800eec8:	e0bffd17 	ldw	r2,-12(fp)
 800eecc:	1085883a 	add	r2,r2,r2
 800eed0:	1085883a 	add	r2,r2,r2
 800eed4:	1007883a 	mov	r3,r2
 800eed8:	e0bff917 	ldw	r2,-28(fp)
 800eedc:	1885883a 	add	r2,r3,r2
 800eee0:	1085883a 	add	r2,r2,r2
 800eee4:	1085883a 	add	r2,r2,r2
 800eee8:	e0fffb17 	ldw	r3,-20(fp)
 800eeec:	1887883a 	add	r3,r3,r2
 800eef0:	e0bff917 	ldw	r2,-28(fp)
 800eef4:	1085883a 	add	r2,r2,r2
 800eef8:	1085883a 	add	r2,r2,r2
 800eefc:	e13ffe17 	ldw	r4,-8(fp)
 800ef00:	2085883a 	add	r2,r4,r2
 800ef04:	10800017 	ldw	r2,0(r2)
 800ef08:	18800015 	stw	r2,0(r3)
				(JDIMENSION) (3 * rgroup_height));
			/* Copy true buffer row pointers into the middle of the fake row array */
			MEMCOPY(fake_buffer + rgroup_height, true_buffer,
				3 * rgroup_height * SIZEOF(JSAMPROW));
			/* Fill in the above and below wraparound pointers */
			for (i = 0; i < rgroup_height; i++) {
 800ef0c:	e0bff917 	ldw	r2,-28(fp)
 800ef10:	10800044 	addi	r2,r2,1
 800ef14:	e0bff915 	stw	r2,-28(fp)
 800ef18:	e0fff917 	ldw	r3,-28(fp)
 800ef1c:	e0bffd17 	ldw	r2,-12(fp)
 800ef20:	18bfd916 	blt	r3,r2,800ee88 <create_context_buffer+0x140>
				fake_buffer[i] = true_buffer[2 * rgroup_height + i];
				fake_buffer[4 * rgroup_height + i] = true_buffer[i];
			}
			prep->color_buf[ci] = fake_buffer + rgroup_height;
 800ef24:	e0bffd17 	ldw	r2,-12(fp)
 800ef28:	1085883a 	add	r2,r2,r2
 800ef2c:	1085883a 	add	r2,r2,r2
 800ef30:	e0fffb17 	ldw	r3,-20(fp)
 800ef34:	1887883a 	add	r3,r3,r2
 800ef38:	e13ffc17 	ldw	r4,-16(fp)
 800ef3c:	e0bff817 	ldw	r2,-32(fp)
 800ef40:	10800084 	addi	r2,r2,2
 800ef44:	1085883a 	add	r2,r2,r2
 800ef48:	1085883a 	add	r2,r2,r2
 800ef4c:	2085883a 	add	r2,r4,r2
 800ef50:	10c00015 	stw	r3,0(r2)
			fake_buffer += 5 * rgroup_height; /* point to space for next component */
 800ef54:	e13ffd17 	ldw	r4,-12(fp)
 800ef58:	01400504 	movi	r5,20
 800ef5c:	802c2180 	call	802c218 <__mulsi3>
 800ef60:	e0fffb17 	ldw	r3,-20(fp)
 800ef64:	1885883a 	add	r2,r3,r2
 800ef68:	e0bffb15 	stw	r2,-20(fp)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
		(cinfo->num_components * 5 * rgroup_height) *
		SIZEOF(JSAMPROW));

	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
		ci++, compptr++) {
 800ef6c:	e0bff817 	ldw	r2,-32(fp)
 800ef70:	10800044 	addi	r2,r2,1
 800ef74:	e0bff815 	stw	r2,-32(fp)
 800ef78:	e0bffa17 	ldw	r2,-24(fp)
 800ef7c:	10801604 	addi	r2,r2,88
 800ef80:	e0bffa15 	stw	r2,-24(fp)
	fake_buffer = (JSAMPARRAY)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
		(cinfo->num_components * 5 * rgroup_height) *
		SIZEOF(JSAMPROW));

	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ef84:	e0bfff17 	ldw	r2,-4(fp)
 800ef88:	10801217 	ldw	r2,72(r2)
 800ef8c:	e0fff817 	ldw	r3,-32(fp)
 800ef90:	18bf8e16 	blt	r3,r2,800edcc <create_context_buffer+0x84>
				fake_buffer[4 * rgroup_height + i] = true_buffer[i];
			}
			prep->color_buf[ci] = fake_buffer + rgroup_height;
			fake_buffer += 5 * rgroup_height; /* point to space for next component */
	}
}
 800ef94:	e037883a 	mov	sp,fp
 800ef98:	dfc00217 	ldw	ra,8(sp)
 800ef9c:	df000117 	ldw	fp,4(sp)
 800efa0:	dc000017 	ldw	r16,0(sp)
 800efa4:	dec00304 	addi	sp,sp,12
 800efa8:	f800283a 	ret

0800efac <jinit_c_prep_controller>:
* Initialize preprocessing controller.
*/

GLOBAL(void)
	jinit_c_prep_controller (j_compress_ptr cinfo, boolean need_full_buffer)
{
 800efac:	defff804 	addi	sp,sp,-32
 800efb0:	dfc00715 	stw	ra,28(sp)
 800efb4:	df000615 	stw	fp,24(sp)
 800efb8:	dc000515 	stw	r16,20(sp)
 800efbc:	df000504 	addi	fp,sp,20
 800efc0:	e13ffe15 	stw	r4,-8(fp)
 800efc4:	2805883a 	mov	r2,r5
 800efc8:	e0bfff05 	stb	r2,-4(fp)
	my_prep_ptr prep;
	int ci;
	jpeg_component_info * compptr;

	if (need_full_buffer)		/* safety check */
 800efcc:	e0bfff03 	ldbu	r2,-4(fp)
 800efd0:	10000926 	beq	r2,zero,800eff8 <jinit_c_prep_controller+0x4c>
		ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800efd4:	e0bffe17 	ldw	r2,-8(fp)
 800efd8:	10800017 	ldw	r2,0(r2)
 800efdc:	00c000c4 	movi	r3,3
 800efe0:	10c00515 	stw	r3,20(r2)
 800efe4:	e0bffe17 	ldw	r2,-8(fp)
 800efe8:	10800017 	ldw	r2,0(r2)
 800efec:	10800017 	ldw	r2,0(r2)
 800eff0:	e13ffe17 	ldw	r4,-8(fp)
 800eff4:	103ee83a 	callr	r2

	prep = (my_prep_ptr)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800eff8:	e0bffe17 	ldw	r2,-8(fp)
 800effc:	10800117 	ldw	r2,4(r2)
 800f000:	10800017 	ldw	r2,0(r2)
	jpeg_component_info * compptr;

	if (need_full_buffer)		/* safety check */
		ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);

	prep = (my_prep_ptr)
 800f004:	e13ffe17 	ldw	r4,-8(fp)
 800f008:	01400044 	movi	r5,1
 800f00c:	01801004 	movi	r6,64
 800f010:	103ee83a 	callr	r2
 800f014:	e0bffd15 	stw	r2,-12(fp)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
		SIZEOF(my_prep_controller));
	cinfo->prep = (struct jpeg_c_prep_controller *) prep;
 800f018:	e0bffe17 	ldw	r2,-8(fp)
 800f01c:	e0fffd17 	ldw	r3,-12(fp)
 800f020:	10c05e15 	stw	r3,376(r2)
	prep->pub.start_pass = start_pass_prep;
 800f024:	e0bffd17 	ldw	r2,-12(fp)
 800f028:	00c20074 	movhi	r3,2049
 800f02c:	18f95404 	addi	r3,r3,-6832
 800f030:	10c00015 	stw	r3,0(r2)

	/* Allocate the color conversion buffer.
	* We make the buffer wide enough to allow the downsampler to edge-expand
	* horizontally within the buffer, if it so chooses.
	*/
	if (cinfo->downsample->need_context_rows) {
 800f034:	e0bffe17 	ldw	r2,-8(fp)
 800f038:	10806217 	ldw	r2,392(r2)
 800f03c:	10800203 	ldbu	r2,8(r2)
 800f040:	10803fcc 	andi	r2,r2,255
 800f044:	10000726 	beq	r2,zero,800f064 <jinit_c_prep_controller+0xb8>
		/* Set up to provide context rows */
#ifdef CONTEXT_ROWS_SUPPORTED
		prep->pub.pre_process_data = pre_process_context;
 800f048:	e0bffd17 	ldw	r2,-12(fp)
 800f04c:	00c20074 	movhi	r3,2049
 800f050:	18fa7204 	addi	r3,r3,-5688
 800f054:	10c00115 	stw	r3,4(r2)
		create_context_buffer(cinfo);
 800f058:	e13ffe17 	ldw	r4,-8(fp)
 800f05c:	800ed480 	call	800ed48 <create_context_buffer>
 800f060:	00003a06 	br	800f14c <jinit_c_prep_controller+0x1a0>
#else
		ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif
	} else {
		/* No context, just make it tall enough for one row group */
		prep->pub.pre_process_data = pre_process_data;
 800f064:	e0bffd17 	ldw	r2,-12(fp)
 800f068:	00c20074 	movhi	r3,2049
 800f06c:	18f99a04 	addi	r3,r3,-6552
 800f070:	10c00115 	stw	r3,4(r2)
		for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800f074:	e03ffb15 	stw	zero,-20(fp)
 800f078:	e0bffe17 	ldw	r2,-8(fp)
 800f07c:	10801417 	ldw	r2,80(r2)
 800f080:	e0bffc15 	stw	r2,-16(fp)
 800f084:	00002d06 	br	800f13c <jinit_c_prep_controller+0x190>
			ci++, compptr++) {
				prep->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 800f088:	e0bffe17 	ldw	r2,-8(fp)
 800f08c:	10800117 	ldw	r2,4(r2)
					((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f090:	14000217 	ldw	r16,8(r2)
					(JDIMENSION) (((long) compptr->width_in_blocks *
 800f094:	e0bffc17 	ldw	r2,-16(fp)
 800f098:	10800717 	ldw	r2,28(r2)
 800f09c:	1007883a 	mov	r3,r2
					cinfo->min_DCT_h_scaled_size *
 800f0a0:	e0bffe17 	ldw	r2,-8(fp)
 800f0a4:	10804017 	ldw	r2,256(r2)
		prep->pub.pre_process_data = pre_process_data;
		for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
			ci++, compptr++) {
				prep->color_buf[ci] = (*cinfo->mem->alloc_sarray)
					((j_common_ptr) cinfo, JPOOL_IMAGE,
					(JDIMENSION) (((long) compptr->width_in_blocks *
 800f0a8:	1809883a 	mov	r4,r3
 800f0ac:	100b883a 	mov	r5,r2
 800f0b0:	802c2180 	call	802c218 <__mulsi3>
 800f0b4:	1007883a 	mov	r3,r2
					cinfo->min_DCT_h_scaled_size *
					cinfo->max_h_samp_factor) / compptr->h_samp_factor),
 800f0b8:	e0bffe17 	ldw	r2,-8(fp)
 800f0bc:	10803e17 	ldw	r2,248(r2)
		for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
			ci++, compptr++) {
				prep->color_buf[ci] = (*cinfo->mem->alloc_sarray)
					((j_common_ptr) cinfo, JPOOL_IMAGE,
					(JDIMENSION) (((long) compptr->width_in_blocks *
					cinfo->min_DCT_h_scaled_size *
 800f0c0:	1809883a 	mov	r4,r3
 800f0c4:	100b883a 	mov	r5,r2
 800f0c8:	802c2180 	call	802c218 <__mulsi3>
 800f0cc:	1007883a 	mov	r3,r2
					cinfo->max_h_samp_factor) / compptr->h_samp_factor),
 800f0d0:	e0bffc17 	ldw	r2,-16(fp)
 800f0d4:	10800217 	ldw	r2,8(r2)
 800f0d8:	1809883a 	mov	r4,r3
 800f0dc:	100b883a 	mov	r5,r2
 800f0e0:	802c15c0 	call	802c15c <__divsi3>
		/* No context, just make it tall enough for one row group */
		prep->pub.pre_process_data = pre_process_data;
		for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
			ci++, compptr++) {
				prep->color_buf[ci] = (*cinfo->mem->alloc_sarray)
					((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f0e4:	1007883a 	mov	r3,r2
					(JDIMENSION) (((long) compptr->width_in_blocks *
					cinfo->min_DCT_h_scaled_size *
					cinfo->max_h_samp_factor) / compptr->h_samp_factor),
					(JDIMENSION) cinfo->max_v_samp_factor);
 800f0e8:	e0bffe17 	ldw	r2,-8(fp)
 800f0ec:	10803f17 	ldw	r2,252(r2)
		/* No context, just make it tall enough for one row group */
		prep->pub.pre_process_data = pre_process_data;
		for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
			ci++, compptr++) {
				prep->color_buf[ci] = (*cinfo->mem->alloc_sarray)
					((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f0f0:	e13ffe17 	ldw	r4,-8(fp)
 800f0f4:	01400044 	movi	r5,1
 800f0f8:	180d883a 	mov	r6,r3
 800f0fc:	100f883a 	mov	r7,r2
 800f100:	803ee83a 	callr	r16
 800f104:	1007883a 	mov	r3,r2
	} else {
		/* No context, just make it tall enough for one row group */
		prep->pub.pre_process_data = pre_process_data;
		for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
			ci++, compptr++) {
				prep->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 800f108:	e13ffd17 	ldw	r4,-12(fp)
 800f10c:	e0bffb17 	ldw	r2,-20(fp)
 800f110:	10800084 	addi	r2,r2,2
 800f114:	1085883a 	add	r2,r2,r2
 800f118:	1085883a 	add	r2,r2,r2
 800f11c:	2085883a 	add	r2,r4,r2
 800f120:	10c00015 	stw	r3,0(r2)
#endif
	} else {
		/* No context, just make it tall enough for one row group */
		prep->pub.pre_process_data = pre_process_data;
		for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
			ci++, compptr++) {
 800f124:	e0bffb17 	ldw	r2,-20(fp)
 800f128:	10800044 	addi	r2,r2,1
 800f12c:	e0bffb15 	stw	r2,-20(fp)
 800f130:	e0bffc17 	ldw	r2,-16(fp)
 800f134:	10801604 	addi	r2,r2,88
 800f138:	e0bffc15 	stw	r2,-16(fp)
		ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif
	} else {
		/* No context, just make it tall enough for one row group */
		prep->pub.pre_process_data = pre_process_data;
		for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800f13c:	e0bffe17 	ldw	r2,-8(fp)
 800f140:	10801217 	ldw	r2,72(r2)
 800f144:	e0fffb17 	ldw	r3,-20(fp)
 800f148:	18bfcf16 	blt	r3,r2,800f088 <jinit_c_prep_controller+0xdc>
					cinfo->min_DCT_h_scaled_size *
					cinfo->max_h_samp_factor) / compptr->h_samp_factor),
					(JDIMENSION) cinfo->max_v_samp_factor);
		}
	}
}
 800f14c:	e037883a 	mov	sp,fp
 800f150:	dfc00217 	ldw	ra,8(sp)
 800f154:	df000117 	ldw	fp,4(sp)
 800f158:	dc000017 	ldw	r16,0(sp)
 800f15c:	dec00304 	addi	sp,sp,12
 800f160:	f800283a 	ret

0800f164 <start_pass_downsample>:
* Initialize for a downsampling pass.
*/

METHODDEF(void)
	start_pass_downsample (j_compress_ptr cinfo)
{
 800f164:	defffe04 	addi	sp,sp,-8
 800f168:	df000115 	stw	fp,4(sp)
 800f16c:	df000104 	addi	fp,sp,4
 800f170:	e13fff15 	stw	r4,-4(fp)
	/* no work for now */
}
 800f174:	e037883a 	mov	sp,fp
 800f178:	df000017 	ldw	fp,0(sp)
 800f17c:	dec00104 	addi	sp,sp,4
 800f180:	f800283a 	ret

0800f184 <expand_right_edge>:
*/

LOCAL(void)
	expand_right_edge (JSAMPARRAY image_data, int num_rows,
	JDIMENSION input_cols, JDIMENSION output_cols)
{
 800f184:	defff604 	addi	sp,sp,-40
 800f188:	df000915 	stw	fp,36(sp)
 800f18c:	dc800815 	stw	r18,32(sp)
 800f190:	dc400715 	stw	r17,28(sp)
 800f194:	dc000615 	stw	r16,24(sp)
 800f198:	df000604 	addi	fp,sp,24
 800f19c:	e13ffc15 	stw	r4,-16(fp)
 800f1a0:	e17ffd15 	stw	r5,-12(fp)
 800f1a4:	e1bffe15 	stw	r6,-8(fp)
 800f1a8:	e1ffff15 	stw	r7,-4(fp)
	register JSAMPROW ptr;
	register JSAMPLE pixval;
	register int count;
	int row;
	int numcols = (int) (output_cols - input_cols);
 800f1ac:	e0ffff17 	ldw	r3,-4(fp)
 800f1b0:	e0bffe17 	ldw	r2,-8(fp)
 800f1b4:	1885c83a 	sub	r2,r3,r2
 800f1b8:	e0bffb15 	stw	r2,-20(fp)

	if (numcols > 0) {
 800f1bc:	e0bffb17 	ldw	r2,-20(fp)
 800f1c0:	0080170e 	bge	zero,r2,800f220 <expand_right_edge+0x9c>
		for (row = 0; row < num_rows; row++) {
 800f1c4:	e03ffa15 	stw	zero,-24(fp)
 800f1c8:	00001206 	br	800f214 <expand_right_edge+0x90>
			ptr = image_data[row] + input_cols;
 800f1cc:	e0bffa17 	ldw	r2,-24(fp)
 800f1d0:	1085883a 	add	r2,r2,r2
 800f1d4:	1085883a 	add	r2,r2,r2
 800f1d8:	e0fffc17 	ldw	r3,-16(fp)
 800f1dc:	1885883a 	add	r2,r3,r2
 800f1e0:	10c00017 	ldw	r3,0(r2)
 800f1e4:	e0bffe17 	ldw	r2,-8(fp)
 800f1e8:	18a1883a 	add	r16,r3,r2
			pixval = ptr[-1];		/* don't need GETJSAMPLE() here */
 800f1ec:	84bfffc3 	ldbu	r18,-1(r16)
			for (count = numcols; count > 0; count--)
 800f1f0:	e47ffb17 	ldw	r17,-20(fp)
 800f1f4:	00000306 	br	800f204 <expand_right_edge+0x80>
				*ptr++ = pixval;
 800f1f8:	84800005 	stb	r18,0(r16)
 800f1fc:	84000044 	addi	r16,r16,1

	if (numcols > 0) {
		for (row = 0; row < num_rows; row++) {
			ptr = image_data[row] + input_cols;
			pixval = ptr[-1];		/* don't need GETJSAMPLE() here */
			for (count = numcols; count > 0; count--)
 800f200:	8c7fffc4 	addi	r17,r17,-1
 800f204:	047ffc16 	blt	zero,r17,800f1f8 <expand_right_edge+0x74>
	register int count;
	int row;
	int numcols = (int) (output_cols - input_cols);

	if (numcols > 0) {
		for (row = 0; row < num_rows; row++) {
 800f208:	e0bffa17 	ldw	r2,-24(fp)
 800f20c:	10800044 	addi	r2,r2,1
 800f210:	e0bffa15 	stw	r2,-24(fp)
 800f214:	e0fffa17 	ldw	r3,-24(fp)
 800f218:	e0bffd17 	ldw	r2,-12(fp)
 800f21c:	18bfeb16 	blt	r3,r2,800f1cc <expand_right_edge+0x48>
			pixval = ptr[-1];		/* don't need GETJSAMPLE() here */
			for (count = numcols; count > 0; count--)
				*ptr++ = pixval;
		}
	}
}
 800f220:	e037883a 	mov	sp,fp
 800f224:	df000317 	ldw	fp,12(sp)
 800f228:	dc800217 	ldw	r18,8(sp)
 800f22c:	dc400117 	ldw	r17,4(sp)
 800f230:	dc000017 	ldw	r16,0(sp)
 800f234:	dec00404 	addi	sp,sp,16
 800f238:	f800283a 	ret

0800f23c <sep_downsample>:

METHODDEF(void)
	sep_downsample (j_compress_ptr cinfo,
	JSAMPIMAGE input_buf, JDIMENSION in_row_index,
	JSAMPIMAGE output_buf, JDIMENSION out_row_group_index)
{
 800f23c:	defff404 	addi	sp,sp,-48
 800f240:	dfc00b15 	stw	ra,44(sp)
 800f244:	df000a15 	stw	fp,40(sp)
 800f248:	dc000915 	stw	r16,36(sp)
 800f24c:	df000904 	addi	fp,sp,36
 800f250:	e13ffc15 	stw	r4,-16(fp)
 800f254:	e17ffd15 	stw	r5,-12(fp)
 800f258:	e1bffe15 	stw	r6,-8(fp)
 800f25c:	e1ffff15 	stw	r7,-4(fp)
	my_downsample_ptr downsample = (my_downsample_ptr) cinfo->downsample;
 800f260:	e0bffc17 	ldw	r2,-16(fp)
 800f264:	10806217 	ldw	r2,392(r2)
 800f268:	e0bff915 	stw	r2,-28(fp)
	int ci;
	jpeg_component_info * compptr;
	JSAMPARRAY in_ptr, out_ptr;

	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800f26c:	e03ff715 	stw	zero,-36(fp)
 800f270:	e0bffc17 	ldw	r2,-16(fp)
 800f274:	10801417 	ldw	r2,80(r2)
 800f278:	e0bff815 	stw	r2,-32(fp)
 800f27c:	00003106 	br	800f344 <sep_downsample+0x108>
		ci++, compptr++) {
			in_ptr = input_buf[ci] + in_row_index;
 800f280:	e0bff717 	ldw	r2,-36(fp)
 800f284:	1085883a 	add	r2,r2,r2
 800f288:	1085883a 	add	r2,r2,r2
 800f28c:	e0fffd17 	ldw	r3,-12(fp)
 800f290:	1885883a 	add	r2,r3,r2
 800f294:	10c00017 	ldw	r3,0(r2)
 800f298:	e0bffe17 	ldw	r2,-8(fp)
 800f29c:	1085883a 	add	r2,r2,r2
 800f2a0:	1085883a 	add	r2,r2,r2
 800f2a4:	1885883a 	add	r2,r3,r2
 800f2a8:	e0bffa15 	stw	r2,-24(fp)
			out_ptr = output_buf[ci] +
 800f2ac:	e0bff717 	ldw	r2,-36(fp)
 800f2b0:	1085883a 	add	r2,r2,r2
 800f2b4:	1085883a 	add	r2,r2,r2
 800f2b8:	e0ffff17 	ldw	r3,-4(fp)
 800f2bc:	1885883a 	add	r2,r3,r2
 800f2c0:	14000017 	ldw	r16,0(r2)
				(out_row_group_index * downsample->rowgroup_height[ci]);
 800f2c4:	e0fff917 	ldw	r3,-28(fp)
 800f2c8:	e0bff717 	ldw	r2,-36(fp)
 800f2cc:	10800344 	addi	r2,r2,13
 800f2d0:	1085883a 	add	r2,r2,r2
 800f2d4:	1085883a 	add	r2,r2,r2
 800f2d8:	1885883a 	add	r2,r3,r2
 800f2dc:	10800017 	ldw	r2,0(r2)
 800f2e0:	1009883a 	mov	r4,r2
 800f2e4:	e1400317 	ldw	r5,12(fp)
 800f2e8:	802c2180 	call	802c218 <__mulsi3>
	JSAMPARRAY in_ptr, out_ptr;

	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
		ci++, compptr++) {
			in_ptr = input_buf[ci] + in_row_index;
			out_ptr = output_buf[ci] +
 800f2ec:	1085883a 	add	r2,r2,r2
 800f2f0:	1085883a 	add	r2,r2,r2
 800f2f4:	8085883a 	add	r2,r16,r2
 800f2f8:	e0bffb15 	stw	r2,-20(fp)
				(out_row_group_index * downsample->rowgroup_height[ci]);
			(*downsample->methods[ci]) (cinfo, compptr, in_ptr, out_ptr);
 800f2fc:	e0fff917 	ldw	r3,-28(fp)
 800f300:	e0bff717 	ldw	r2,-36(fp)
 800f304:	108000c4 	addi	r2,r2,3
 800f308:	1085883a 	add	r2,r2,r2
 800f30c:	1085883a 	add	r2,r2,r2
 800f310:	1885883a 	add	r2,r3,r2
 800f314:	10800017 	ldw	r2,0(r2)
 800f318:	e13ffc17 	ldw	r4,-16(fp)
 800f31c:	e17ff817 	ldw	r5,-32(fp)
 800f320:	e1bffa17 	ldw	r6,-24(fp)
 800f324:	e1fffb17 	ldw	r7,-20(fp)
 800f328:	103ee83a 	callr	r2
	int ci;
	jpeg_component_info * compptr;
	JSAMPARRAY in_ptr, out_ptr;

	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
		ci++, compptr++) {
 800f32c:	e0bff717 	ldw	r2,-36(fp)
 800f330:	10800044 	addi	r2,r2,1
 800f334:	e0bff715 	stw	r2,-36(fp)
 800f338:	e0bff817 	ldw	r2,-32(fp)
 800f33c:	10801604 	addi	r2,r2,88
 800f340:	e0bff815 	stw	r2,-32(fp)
	my_downsample_ptr downsample = (my_downsample_ptr) cinfo->downsample;
	int ci;
	jpeg_component_info * compptr;
	JSAMPARRAY in_ptr, out_ptr;

	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800f344:	e0bffc17 	ldw	r2,-16(fp)
 800f348:	10801217 	ldw	r2,72(r2)
 800f34c:	e0fff717 	ldw	r3,-36(fp)
 800f350:	18bfcb16 	blt	r3,r2,800f280 <sep_downsample+0x44>
			in_ptr = input_buf[ci] + in_row_index;
			out_ptr = output_buf[ci] +
				(out_row_group_index * downsample->rowgroup_height[ci]);
			(*downsample->methods[ci]) (cinfo, compptr, in_ptr, out_ptr);
	}
}
 800f354:	e037883a 	mov	sp,fp
 800f358:	dfc00217 	ldw	ra,8(sp)
 800f35c:	df000117 	ldw	fp,4(sp)
 800f360:	dc000017 	ldw	r16,0(sp)
 800f364:	dec00304 	addi	sp,sp,12
 800f368:	f800283a 	ret

0800f36c <int_downsample>:
*/

METHODDEF(void)
	int_downsample (j_compress_ptr cinfo, jpeg_component_info * compptr,
	JSAMPARRAY input_data, JSAMPARRAY output_data)
{
 800f36c:	deffe904 	addi	sp,sp,-92
 800f370:	dfc01615 	stw	ra,88(sp)
 800f374:	df001515 	stw	fp,84(sp)
 800f378:	dc401415 	stw	r17,80(sp)
 800f37c:	dc001315 	stw	r16,76(sp)
 800f380:	df001304 	addi	fp,sp,76
 800f384:	e13ffc15 	stw	r4,-16(fp)
 800f388:	e17ffd15 	stw	r5,-12(fp)
 800f38c:	e1bffe15 	stw	r6,-8(fp)
 800f390:	e1ffff15 	stw	r7,-4(fp)
	my_downsample_ptr downsample = (my_downsample_ptr) cinfo->downsample;
 800f394:	e0bffc17 	ldw	r2,-16(fp)
 800f398:	10806217 	ldw	r2,392(r2)
 800f39c:	e0bff615 	stw	r2,-40(fp)
	int inrow, outrow, h_expand, v_expand, numpix, numpix2, h, v;
	JDIMENSION outcol, outcol_h;	/* outcol_h == outcol*h_expand */
	JDIMENSION output_cols = compptr->width_in_blocks * compptr->DCT_h_scaled_size;
 800f3a0:	e0bffd17 	ldw	r2,-12(fp)
 800f3a4:	10c00717 	ldw	r3,28(r2)
 800f3a8:	e0bffd17 	ldw	r2,-12(fp)
 800f3ac:	10800917 	ldw	r2,36(r2)
 800f3b0:	1809883a 	mov	r4,r3
 800f3b4:	100b883a 	mov	r5,r2
 800f3b8:	802c2180 	call	802c218 <__mulsi3>
 800f3bc:	e0bff715 	stw	r2,-36(fp)
	JSAMPROW inptr, outptr;
	INT32 outvalue;

	h_expand = downsample->h_expand[compptr->component_index];
 800f3c0:	e0bffd17 	ldw	r2,-12(fp)
 800f3c4:	10800117 	ldw	r2,4(r2)
 800f3c8:	e0fff617 	ldw	r3,-40(fp)
 800f3cc:	1885883a 	add	r2,r3,r2
 800f3d0:	10801704 	addi	r2,r2,92
 800f3d4:	10800003 	ldbu	r2,0(r2)
 800f3d8:	10803fcc 	andi	r2,r2,255
 800f3dc:	e0bff815 	stw	r2,-32(fp)
	v_expand = downsample->v_expand[compptr->component_index];
 800f3e0:	e0bffd17 	ldw	r2,-12(fp)
 800f3e4:	10800117 	ldw	r2,4(r2)
 800f3e8:	e0fff617 	ldw	r3,-40(fp)
 800f3ec:	1885883a 	add	r2,r3,r2
 800f3f0:	10801904 	addi	r2,r2,100
 800f3f4:	10800083 	ldbu	r2,2(r2)
 800f3f8:	10803fcc 	andi	r2,r2,255
 800f3fc:	e0bff915 	stw	r2,-28(fp)
	numpix = h_expand * v_expand;
 800f400:	e13ff817 	ldw	r4,-32(fp)
 800f404:	e17ff917 	ldw	r5,-28(fp)
 800f408:	802c2180 	call	802c218 <__mulsi3>
 800f40c:	e0bffa15 	stw	r2,-24(fp)
	numpix2 = numpix/2;
 800f410:	e0bffa17 	ldw	r2,-24(fp)
 800f414:	1006d7fa 	srli	r3,r2,31
 800f418:	1885883a 	add	r2,r3,r2
 800f41c:	1005d07a 	srai	r2,r2,1
 800f420:	e0bffb15 	stw	r2,-20(fp)

	/* Expand input data enough to let all the output samples be generated
	* by the standard loop.  Special-casing padded output would be more
	* efficient.
	*/
	expand_right_edge(input_data, cinfo->max_v_samp_factor,
 800f424:	e0bffc17 	ldw	r2,-16(fp)
 800f428:	14403f17 	ldw	r17,252(r2)
		cinfo->image_width, output_cols * h_expand);
 800f42c:	e0bffc17 	ldw	r2,-16(fp)

	/* Expand input data enough to let all the output samples be generated
	* by the standard loop.  Special-casing padded output would be more
	* efficient.
	*/
	expand_right_edge(input_data, cinfo->max_v_samp_factor,
 800f430:	14000717 	ldw	r16,28(r2)
 800f434:	e0bff817 	ldw	r2,-32(fp)
 800f438:	1009883a 	mov	r4,r2
 800f43c:	e17ff717 	ldw	r5,-36(fp)
 800f440:	802c2180 	call	802c218 <__mulsi3>
 800f444:	e13ffe17 	ldw	r4,-8(fp)
 800f448:	880b883a 	mov	r5,r17
 800f44c:	800d883a 	mov	r6,r16
 800f450:	100f883a 	mov	r7,r2
 800f454:	800f1840 	call	800f184 <expand_right_edge>
		cinfo->image_width, output_cols * h_expand);

	inrow = outrow = 0;
 800f458:	e03fee15 	stw	zero,-72(fp)
 800f45c:	e0bfee17 	ldw	r2,-72(fp)
 800f460:	e0bfed15 	stw	r2,-76(fp)
	while (inrow < cinfo->max_v_samp_factor) {
 800f464:	00004c06 	br	800f598 <int_downsample+0x22c>
		outptr = output_data[outrow];
 800f468:	e0bfee17 	ldw	r2,-72(fp)
 800f46c:	1085883a 	add	r2,r2,r2
 800f470:	1085883a 	add	r2,r2,r2
 800f474:	e0ffff17 	ldw	r3,-4(fp)
 800f478:	1885883a 	add	r2,r3,r2
 800f47c:	10800017 	ldw	r2,0(r2)
 800f480:	e0bff415 	stw	r2,-48(fp)
		for (outcol = 0, outcol_h = 0; outcol < output_cols;
 800f484:	e03ff115 	stw	zero,-60(fp)
 800f488:	e03ff215 	stw	zero,-56(fp)
 800f48c:	00003806 	br	800f570 <int_downsample+0x204>
			outcol++, outcol_h += h_expand) {
				outvalue = 0;
 800f490:	e03ff515 	stw	zero,-44(fp)
				for (v = 0; v < v_expand; v++) {
 800f494:	e03ff015 	stw	zero,-64(fp)
 800f498:	00001f06 	br	800f518 <int_downsample+0x1ac>
					inptr = input_data[inrow+v] + outcol_h;
 800f49c:	e0ffed17 	ldw	r3,-76(fp)
 800f4a0:	e0bff017 	ldw	r2,-64(fp)
 800f4a4:	1885883a 	add	r2,r3,r2
 800f4a8:	1085883a 	add	r2,r2,r2
 800f4ac:	1085883a 	add	r2,r2,r2
 800f4b0:	e0fffe17 	ldw	r3,-8(fp)
 800f4b4:	1885883a 	add	r2,r3,r2
 800f4b8:	10c00017 	ldw	r3,0(r2)
 800f4bc:	e0bff217 	ldw	r2,-56(fp)
 800f4c0:	1885883a 	add	r2,r3,r2
 800f4c4:	e0bff315 	stw	r2,-52(fp)
					for (h = 0; h < h_expand; h++) {
 800f4c8:	e03fef15 	stw	zero,-68(fp)
 800f4cc:	00000c06 	br	800f500 <int_downsample+0x194>
						outvalue += (INT32) GETJSAMPLE(*inptr++);
 800f4d0:	e0bff317 	ldw	r2,-52(fp)
 800f4d4:	10800003 	ldbu	r2,0(r2)
 800f4d8:	10803fcc 	andi	r2,r2,255
 800f4dc:	e0fff517 	ldw	r3,-44(fp)
 800f4e0:	1885883a 	add	r2,r3,r2
 800f4e4:	e0bff515 	stw	r2,-44(fp)
 800f4e8:	e0bff317 	ldw	r2,-52(fp)
 800f4ec:	10800044 	addi	r2,r2,1
 800f4f0:	e0bff315 	stw	r2,-52(fp)
		for (outcol = 0, outcol_h = 0; outcol < output_cols;
			outcol++, outcol_h += h_expand) {
				outvalue = 0;
				for (v = 0; v < v_expand; v++) {
					inptr = input_data[inrow+v] + outcol_h;
					for (h = 0; h < h_expand; h++) {
 800f4f4:	e0bfef17 	ldw	r2,-68(fp)
 800f4f8:	10800044 	addi	r2,r2,1
 800f4fc:	e0bfef15 	stw	r2,-68(fp)
 800f500:	e0ffef17 	ldw	r3,-68(fp)
 800f504:	e0bff817 	ldw	r2,-32(fp)
 800f508:	18bff116 	blt	r3,r2,800f4d0 <int_downsample+0x164>
	while (inrow < cinfo->max_v_samp_factor) {
		outptr = output_data[outrow];
		for (outcol = 0, outcol_h = 0; outcol < output_cols;
			outcol++, outcol_h += h_expand) {
				outvalue = 0;
				for (v = 0; v < v_expand; v++) {
 800f50c:	e0bff017 	ldw	r2,-64(fp)
 800f510:	10800044 	addi	r2,r2,1
 800f514:	e0bff015 	stw	r2,-64(fp)
 800f518:	e0fff017 	ldw	r3,-64(fp)
 800f51c:	e0bff917 	ldw	r2,-28(fp)
 800f520:	18bfde16 	blt	r3,r2,800f49c <int_downsample+0x130>
					inptr = input_data[inrow+v] + outcol_h;
					for (h = 0; h < h_expand; h++) {
						outvalue += (INT32) GETJSAMPLE(*inptr++);
					}
				}
				*outptr++ = (JSAMPLE) ((outvalue + numpix2) / numpix);
 800f524:	e0fff517 	ldw	r3,-44(fp)
 800f528:	e0bffb17 	ldw	r2,-20(fp)
 800f52c:	1885883a 	add	r2,r3,r2
 800f530:	1009883a 	mov	r4,r2
 800f534:	e17ffa17 	ldw	r5,-24(fp)
 800f538:	802c15c0 	call	802c15c <__divsi3>
 800f53c:	1007883a 	mov	r3,r2
 800f540:	e0bff417 	ldw	r2,-48(fp)
 800f544:	10c00005 	stb	r3,0(r2)
 800f548:	e0bff417 	ldw	r2,-48(fp)
 800f54c:	10800044 	addi	r2,r2,1
 800f550:	e0bff415 	stw	r2,-48(fp)

	inrow = outrow = 0;
	while (inrow < cinfo->max_v_samp_factor) {
		outptr = output_data[outrow];
		for (outcol = 0, outcol_h = 0; outcol < output_cols;
			outcol++, outcol_h += h_expand) {
 800f554:	e0bff117 	ldw	r2,-60(fp)
 800f558:	10800044 	addi	r2,r2,1
 800f55c:	e0bff115 	stw	r2,-60(fp)
 800f560:	e0bff817 	ldw	r2,-32(fp)
 800f564:	e0fff217 	ldw	r3,-56(fp)
 800f568:	1885883a 	add	r2,r3,r2
 800f56c:	e0bff215 	stw	r2,-56(fp)
		cinfo->image_width, output_cols * h_expand);

	inrow = outrow = 0;
	while (inrow < cinfo->max_v_samp_factor) {
		outptr = output_data[outrow];
		for (outcol = 0, outcol_h = 0; outcol < output_cols;
 800f570:	e0fff117 	ldw	r3,-60(fp)
 800f574:	e0bff717 	ldw	r2,-36(fp)
 800f578:	18bfc536 	bltu	r3,r2,800f490 <int_downsample+0x124>
						outvalue += (INT32) GETJSAMPLE(*inptr++);
					}
				}
				*outptr++ = (JSAMPLE) ((outvalue + numpix2) / numpix);
		}
		inrow += v_expand;
 800f57c:	e0ffed17 	ldw	r3,-76(fp)
 800f580:	e0bff917 	ldw	r2,-28(fp)
 800f584:	1885883a 	add	r2,r3,r2
 800f588:	e0bfed15 	stw	r2,-76(fp)
		outrow++;
 800f58c:	e0bfee17 	ldw	r2,-72(fp)
 800f590:	10800044 	addi	r2,r2,1
 800f594:	e0bfee15 	stw	r2,-72(fp)
	*/
	expand_right_edge(input_data, cinfo->max_v_samp_factor,
		cinfo->image_width, output_cols * h_expand);

	inrow = outrow = 0;
	while (inrow < cinfo->max_v_samp_factor) {
 800f598:	e0bffc17 	ldw	r2,-16(fp)
 800f59c:	10803f17 	ldw	r2,252(r2)
 800f5a0:	e0ffed17 	ldw	r3,-76(fp)
 800f5a4:	18bfb016 	blt	r3,r2,800f468 <int_downsample+0xfc>
				*outptr++ = (JSAMPLE) ((outvalue + numpix2) / numpix);
		}
		inrow += v_expand;
		outrow++;
	}
}
 800f5a8:	e037883a 	mov	sp,fp
 800f5ac:	dfc00317 	ldw	ra,12(sp)
 800f5b0:	df000217 	ldw	fp,8(sp)
 800f5b4:	dc400117 	ldw	r17,4(sp)
 800f5b8:	dc000017 	ldw	r16,0(sp)
 800f5bc:	dec00404 	addi	sp,sp,16
 800f5c0:	f800283a 	ret

0800f5c4 <fullsize_downsample>:
*/

METHODDEF(void)
	fullsize_downsample (j_compress_ptr cinfo, jpeg_component_info * compptr,
	JSAMPARRAY input_data, JSAMPARRAY output_data)
{
 800f5c4:	defff604 	addi	sp,sp,-40
 800f5c8:	dfc00915 	stw	ra,36(sp)
 800f5cc:	df000815 	stw	fp,32(sp)
 800f5d0:	dc400715 	stw	r17,28(sp)
 800f5d4:	dc000615 	stw	r16,24(sp)
 800f5d8:	df000604 	addi	fp,sp,24
 800f5dc:	e13ffc15 	stw	r4,-16(fp)
 800f5e0:	e17ffd15 	stw	r5,-12(fp)
 800f5e4:	e1bffe15 	stw	r6,-8(fp)
 800f5e8:	e1ffff15 	stw	r7,-4(fp)
	/* Copy the data */
	jcopy_sample_rows(input_data, 0, output_data, 0,
		cinfo->max_v_samp_factor, cinfo->image_width);
 800f5ec:	e0bffc17 	ldw	r2,-16(fp)
METHODDEF(void)
	fullsize_downsample (j_compress_ptr cinfo, jpeg_component_info * compptr,
	JSAMPARRAY input_data, JSAMPARRAY output_data)
{
	/* Copy the data */
	jcopy_sample_rows(input_data, 0, output_data, 0,
 800f5f0:	10c03f17 	ldw	r3,252(r2)
		cinfo->max_v_samp_factor, cinfo->image_width);
 800f5f4:	e0bffc17 	ldw	r2,-16(fp)
METHODDEF(void)
	fullsize_downsample (j_compress_ptr cinfo, jpeg_component_info * compptr,
	JSAMPARRAY input_data, JSAMPARRAY output_data)
{
	/* Copy the data */
	jcopy_sample_rows(input_data, 0, output_data, 0,
 800f5f8:	10800717 	ldw	r2,28(r2)
 800f5fc:	d8c00015 	stw	r3,0(sp)
 800f600:	d8800115 	stw	r2,4(sp)
 800f604:	e13ffe17 	ldw	r4,-8(fp)
 800f608:	000b883a 	mov	r5,zero
 800f60c:	e1bfff17 	ldw	r6,-4(fp)
 800f610:	000f883a 	mov	r7,zero
 800f614:	802b1240 	call	802b124 <jcopy_sample_rows>
		cinfo->max_v_samp_factor, cinfo->image_width);
	/* Edge-expand */
	expand_right_edge(output_data, cinfo->max_v_samp_factor, cinfo->image_width,
 800f618:	e0bffc17 	ldw	r2,-16(fp)
 800f61c:	14403f17 	ldw	r17,252(r2)
 800f620:	e0bffc17 	ldw	r2,-16(fp)
 800f624:	14000717 	ldw	r16,28(r2)
		compptr->width_in_blocks * compptr->DCT_h_scaled_size);
 800f628:	e0bffd17 	ldw	r2,-12(fp)
 800f62c:	10c00717 	ldw	r3,28(r2)
 800f630:	e0bffd17 	ldw	r2,-12(fp)
 800f634:	10800917 	ldw	r2,36(r2)
{
	/* Copy the data */
	jcopy_sample_rows(input_data, 0, output_data, 0,
		cinfo->max_v_samp_factor, cinfo->image_width);
	/* Edge-expand */
	expand_right_edge(output_data, cinfo->max_v_samp_factor, cinfo->image_width,
 800f638:	1809883a 	mov	r4,r3
 800f63c:	100b883a 	mov	r5,r2
 800f640:	802c2180 	call	802c218 <__mulsi3>
 800f644:	e13fff17 	ldw	r4,-4(fp)
 800f648:	880b883a 	mov	r5,r17
 800f64c:	800d883a 	mov	r6,r16
 800f650:	100f883a 	mov	r7,r2
 800f654:	800f1840 	call	800f184 <expand_right_edge>
		compptr->width_in_blocks * compptr->DCT_h_scaled_size);
}
 800f658:	e037883a 	mov	sp,fp
 800f65c:	dfc00317 	ldw	ra,12(sp)
 800f660:	df000217 	ldw	fp,8(sp)
 800f664:	dc400117 	ldw	r17,4(sp)
 800f668:	dc000017 	ldw	r16,0(sp)
 800f66c:	dec00404 	addi	sp,sp,16
 800f670:	f800283a 	ret

0800f674 <h2v1_downsample>:
*/

METHODDEF(void)
	h2v1_downsample (j_compress_ptr cinfo, jpeg_component_info * compptr,
	JSAMPARRAY input_data, JSAMPARRAY output_data)
{
 800f674:	defff404 	addi	sp,sp,-48
 800f678:	dfc00b15 	stw	ra,44(sp)
 800f67c:	df000a15 	stw	fp,40(sp)
 800f680:	dc800915 	stw	r18,36(sp)
 800f684:	dc400815 	stw	r17,32(sp)
 800f688:	dc000715 	stw	r16,28(sp)
 800f68c:	df000704 	addi	fp,sp,28
 800f690:	e13ffc15 	stw	r4,-16(fp)
 800f694:	e17ffd15 	stw	r5,-12(fp)
 800f698:	e1bffe15 	stw	r6,-8(fp)
 800f69c:	e1ffff15 	stw	r7,-4(fp)
	int inrow;
	JDIMENSION outcol;
	JDIMENSION output_cols = compptr->width_in_blocks * compptr->DCT_h_scaled_size;
 800f6a0:	e0bffd17 	ldw	r2,-12(fp)
 800f6a4:	10c00717 	ldw	r3,28(r2)
 800f6a8:	e0bffd17 	ldw	r2,-12(fp)
 800f6ac:	10800917 	ldw	r2,36(r2)
 800f6b0:	1809883a 	mov	r4,r3
 800f6b4:	100b883a 	mov	r5,r2
 800f6b8:	802c2180 	call	802c218 <__mulsi3>
 800f6bc:	e0bffb15 	stw	r2,-20(fp)

	/* Expand input data enough to let all the output samples be generated
	* by the standard loop.  Special-casing padded output would be more
	* efficient.
	*/
	expand_right_edge(input_data, cinfo->max_v_samp_factor,
 800f6c0:	e0bffc17 	ldw	r2,-16(fp)
 800f6c4:	11403f17 	ldw	r5,252(r2)
		cinfo->image_width, output_cols * 2);
 800f6c8:	e0bffc17 	ldw	r2,-16(fp)

	/* Expand input data enough to let all the output samples be generated
	* by the standard loop.  Special-casing padded output would be more
	* efficient.
	*/
	expand_right_edge(input_data, cinfo->max_v_samp_factor,
 800f6cc:	10c00717 	ldw	r3,28(r2)
 800f6d0:	e0bffb17 	ldw	r2,-20(fp)
 800f6d4:	1085883a 	add	r2,r2,r2
 800f6d8:	e13ffe17 	ldw	r4,-8(fp)
 800f6dc:	180d883a 	mov	r6,r3
 800f6e0:	100f883a 	mov	r7,r2
 800f6e4:	800f1840 	call	800f184 <expand_right_edge>
		cinfo->image_width, output_cols * 2);

	for (inrow = 0; inrow < cinfo->max_v_samp_factor; inrow++) {
 800f6e8:	e03ff915 	stw	zero,-28(fp)
 800f6ec:	00002406 	br	800f780 <h2v1_downsample+0x10c>
		outptr = output_data[inrow];
 800f6f0:	e0bff917 	ldw	r2,-28(fp)
 800f6f4:	1085883a 	add	r2,r2,r2
 800f6f8:	1085883a 	add	r2,r2,r2
 800f6fc:	e0ffff17 	ldw	r3,-4(fp)
 800f700:	1885883a 	add	r2,r3,r2
 800f704:	14400017 	ldw	r17,0(r2)
		inptr = input_data[inrow];
 800f708:	e0bff917 	ldw	r2,-28(fp)
 800f70c:	1085883a 	add	r2,r2,r2
 800f710:	1085883a 	add	r2,r2,r2
 800f714:	e0fffe17 	ldw	r3,-8(fp)
 800f718:	1885883a 	add	r2,r3,r2
 800f71c:	14000017 	ldw	r16,0(r2)
		bias = 0;			/* bias = 0,1,0,1,... for successive samples */
 800f720:	0025883a 	mov	r18,zero
		for (outcol = 0; outcol < output_cols; outcol++) {
 800f724:	e03ffa15 	stw	zero,-24(fp)
 800f728:	00000f06 	br	800f768 <h2v1_downsample+0xf4>
			*outptr++ = (JSAMPLE) ((GETJSAMPLE(*inptr) + GETJSAMPLE(inptr[1])
 800f72c:	80800003 	ldbu	r2,0(r16)
 800f730:	10c03fcc 	andi	r3,r2,255
 800f734:	80800044 	addi	r2,r16,1
 800f738:	10800003 	ldbu	r2,0(r2)
 800f73c:	10803fcc 	andi	r2,r2,255
 800f740:	1885883a 	add	r2,r3,r2
				+ bias) >> 1);
 800f744:	1485883a 	add	r2,r2,r18
 800f748:	1005d07a 	srai	r2,r2,1
	for (inrow = 0; inrow < cinfo->max_v_samp_factor; inrow++) {
		outptr = output_data[inrow];
		inptr = input_data[inrow];
		bias = 0;			/* bias = 0,1,0,1,... for successive samples */
		for (outcol = 0; outcol < output_cols; outcol++) {
			*outptr++ = (JSAMPLE) ((GETJSAMPLE(*inptr) + GETJSAMPLE(inptr[1])
 800f74c:	88800005 	stb	r2,0(r17)
 800f750:	8c400044 	addi	r17,r17,1
				+ bias) >> 1);
			bias ^= 1;		/* 0=>1, 1=>0 */
 800f754:	9480005c 	xori	r18,r18,1
			inptr += 2;
 800f758:	84000084 	addi	r16,r16,2

	for (inrow = 0; inrow < cinfo->max_v_samp_factor; inrow++) {
		outptr = output_data[inrow];
		inptr = input_data[inrow];
		bias = 0;			/* bias = 0,1,0,1,... for successive samples */
		for (outcol = 0; outcol < output_cols; outcol++) {
 800f75c:	e0bffa17 	ldw	r2,-24(fp)
 800f760:	10800044 	addi	r2,r2,1
 800f764:	e0bffa15 	stw	r2,-24(fp)
 800f768:	e0fffa17 	ldw	r3,-24(fp)
 800f76c:	e0bffb17 	ldw	r2,-20(fp)
 800f770:	18bfee36 	bltu	r3,r2,800f72c <h2v1_downsample+0xb8>
	* efficient.
	*/
	expand_right_edge(input_data, cinfo->max_v_samp_factor,
		cinfo->image_width, output_cols * 2);

	for (inrow = 0; inrow < cinfo->max_v_samp_factor; inrow++) {
 800f774:	e0bff917 	ldw	r2,-28(fp)
 800f778:	10800044 	addi	r2,r2,1
 800f77c:	e0bff915 	stw	r2,-28(fp)
 800f780:	e0bffc17 	ldw	r2,-16(fp)
 800f784:	10803f17 	ldw	r2,252(r2)
 800f788:	e0fff917 	ldw	r3,-28(fp)
 800f78c:	18bfd816 	blt	r3,r2,800f6f0 <h2v1_downsample+0x7c>
				+ bias) >> 1);
			bias ^= 1;		/* 0=>1, 1=>0 */
			inptr += 2;
		}
	}
}
 800f790:	e037883a 	mov	sp,fp
 800f794:	dfc00417 	ldw	ra,16(sp)
 800f798:	df000317 	ldw	fp,12(sp)
 800f79c:	dc800217 	ldw	r18,8(sp)
 800f7a0:	dc400117 	ldw	r17,4(sp)
 800f7a4:	dc000017 	ldw	r16,0(sp)
 800f7a8:	dec00504 	addi	sp,sp,20
 800f7ac:	f800283a 	ret

0800f7b0 <h2v2_downsample>:
*/

METHODDEF(void)
	h2v2_downsample (j_compress_ptr cinfo, jpeg_component_info * compptr,
	JSAMPARRAY input_data, JSAMPARRAY output_data)
{
 800f7b0:	defff204 	addi	sp,sp,-56
 800f7b4:	dfc00d15 	stw	ra,52(sp)
 800f7b8:	df000c15 	stw	fp,48(sp)
 800f7bc:	dcc00b15 	stw	r19,44(sp)
 800f7c0:	dc800a15 	stw	r18,40(sp)
 800f7c4:	dc400915 	stw	r17,36(sp)
 800f7c8:	dc000815 	stw	r16,32(sp)
 800f7cc:	df000804 	addi	fp,sp,32
 800f7d0:	e13ffc15 	stw	r4,-16(fp)
 800f7d4:	e17ffd15 	stw	r5,-12(fp)
 800f7d8:	e1bffe15 	stw	r6,-8(fp)
 800f7dc:	e1ffff15 	stw	r7,-4(fp)
	int inrow, outrow;
	JDIMENSION outcol;
	JDIMENSION output_cols = compptr->width_in_blocks * compptr->DCT_h_scaled_size;
 800f7e0:	e0bffd17 	ldw	r2,-12(fp)
 800f7e4:	10c00717 	ldw	r3,28(r2)
 800f7e8:	e0bffd17 	ldw	r2,-12(fp)
 800f7ec:	10800917 	ldw	r2,36(r2)
 800f7f0:	1809883a 	mov	r4,r3
 800f7f4:	100b883a 	mov	r5,r2
 800f7f8:	802c2180 	call	802c218 <__mulsi3>
 800f7fc:	e0bffb15 	stw	r2,-20(fp)

	/* Expand input data enough to let all the output samples be generated
	* by the standard loop.  Special-casing padded output would be more
	* efficient.
	*/
	expand_right_edge(input_data, cinfo->max_v_samp_factor,
 800f800:	e0bffc17 	ldw	r2,-16(fp)
 800f804:	11403f17 	ldw	r5,252(r2)
		cinfo->image_width, output_cols * 2);
 800f808:	e0bffc17 	ldw	r2,-16(fp)

	/* Expand input data enough to let all the output samples be generated
	* by the standard loop.  Special-casing padded output would be more
	* efficient.
	*/
	expand_right_edge(input_data, cinfo->max_v_samp_factor,
 800f80c:	10c00717 	ldw	r3,28(r2)
 800f810:	e0bffb17 	ldw	r2,-20(fp)
 800f814:	1085883a 	add	r2,r2,r2
 800f818:	e13ffe17 	ldw	r4,-8(fp)
 800f81c:	180d883a 	mov	r6,r3
 800f820:	100f883a 	mov	r7,r2
 800f824:	800f1840 	call	800f184 <expand_right_edge>
		cinfo->image_width, output_cols * 2);

	inrow = outrow = 0;
 800f828:	e03ff915 	stw	zero,-28(fp)
 800f82c:	e0bff917 	ldw	r2,-28(fp)
 800f830:	e0bff815 	stw	r2,-32(fp)
	while (inrow < cinfo->max_v_samp_factor) {
 800f834:	00003606 	br	800f910 <h2v2_downsample+0x160>
		outptr = output_data[outrow];
 800f838:	e0bff917 	ldw	r2,-28(fp)
 800f83c:	1085883a 	add	r2,r2,r2
 800f840:	1085883a 	add	r2,r2,r2
 800f844:	e0ffff17 	ldw	r3,-4(fp)
 800f848:	1885883a 	add	r2,r3,r2
 800f84c:	14800017 	ldw	r18,0(r2)
		inptr0 = input_data[inrow];
 800f850:	e0bff817 	ldw	r2,-32(fp)
 800f854:	1085883a 	add	r2,r2,r2
 800f858:	1085883a 	add	r2,r2,r2
 800f85c:	e0fffe17 	ldw	r3,-8(fp)
 800f860:	1885883a 	add	r2,r3,r2
 800f864:	14000017 	ldw	r16,0(r2)
		inptr1 = input_data[inrow+1];
 800f868:	e0bff817 	ldw	r2,-32(fp)
 800f86c:	10800044 	addi	r2,r2,1
 800f870:	1085883a 	add	r2,r2,r2
 800f874:	1085883a 	add	r2,r2,r2
 800f878:	e0fffe17 	ldw	r3,-8(fp)
 800f87c:	1885883a 	add	r2,r3,r2
 800f880:	14400017 	ldw	r17,0(r2)
		bias = 1;			/* bias = 1,2,1,2,... for successive samples */
 800f884:	04c00044 	movi	r19,1
		for (outcol = 0; outcol < output_cols; outcol++) {
 800f888:	e03ffa15 	stw	zero,-24(fp)
 800f88c:	00001706 	br	800f8ec <h2v2_downsample+0x13c>
			*outptr++ = (JSAMPLE) ((GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
 800f890:	80800003 	ldbu	r2,0(r16)
 800f894:	10c03fcc 	andi	r3,r2,255
 800f898:	80800044 	addi	r2,r16,1
 800f89c:	10800003 	ldbu	r2,0(r2)
 800f8a0:	10803fcc 	andi	r2,r2,255
 800f8a4:	1887883a 	add	r3,r3,r2
				GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1])
 800f8a8:	88800003 	ldbu	r2,0(r17)
 800f8ac:	10803fcc 	andi	r2,r2,255
		outptr = output_data[outrow];
		inptr0 = input_data[inrow];
		inptr1 = input_data[inrow+1];
		bias = 1;			/* bias = 1,2,1,2,... for successive samples */
		for (outcol = 0; outcol < output_cols; outcol++) {
			*outptr++ = (JSAMPLE) ((GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
 800f8b0:	1887883a 	add	r3,r3,r2
				GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1])
 800f8b4:	88800044 	addi	r2,r17,1
 800f8b8:	10800003 	ldbu	r2,0(r2)
 800f8bc:	10803fcc 	andi	r2,r2,255
 800f8c0:	1885883a 	add	r2,r3,r2
				+ bias) >> 2);
 800f8c4:	14c5883a 	add	r2,r2,r19
 800f8c8:	1005d0ba 	srai	r2,r2,2
		outptr = output_data[outrow];
		inptr0 = input_data[inrow];
		inptr1 = input_data[inrow+1];
		bias = 1;			/* bias = 1,2,1,2,... for successive samples */
		for (outcol = 0; outcol < output_cols; outcol++) {
			*outptr++ = (JSAMPLE) ((GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
 800f8cc:	90800005 	stb	r2,0(r18)
 800f8d0:	94800044 	addi	r18,r18,1
				GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1])
				+ bias) >> 2);
			bias ^= 3;		/* 1=>2, 2=>1 */
 800f8d4:	9cc000dc 	xori	r19,r19,3
			inptr0 += 2; inptr1 += 2;
 800f8d8:	84000084 	addi	r16,r16,2
 800f8dc:	8c400084 	addi	r17,r17,2
	while (inrow < cinfo->max_v_samp_factor) {
		outptr = output_data[outrow];
		inptr0 = input_data[inrow];
		inptr1 = input_data[inrow+1];
		bias = 1;			/* bias = 1,2,1,2,... for successive samples */
		for (outcol = 0; outcol < output_cols; outcol++) {
 800f8e0:	e0bffa17 	ldw	r2,-24(fp)
 800f8e4:	10800044 	addi	r2,r2,1
 800f8e8:	e0bffa15 	stw	r2,-24(fp)
 800f8ec:	e0fffa17 	ldw	r3,-24(fp)
 800f8f0:	e0bffb17 	ldw	r2,-20(fp)
 800f8f4:	18bfe636 	bltu	r3,r2,800f890 <h2v2_downsample+0xe0>
				GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1])
				+ bias) >> 2);
			bias ^= 3;		/* 1=>2, 2=>1 */
			inptr0 += 2; inptr1 += 2;
		}
		inrow += 2;
 800f8f8:	e0bff817 	ldw	r2,-32(fp)
 800f8fc:	10800084 	addi	r2,r2,2
 800f900:	e0bff815 	stw	r2,-32(fp)
		outrow++;
 800f904:	e0bff917 	ldw	r2,-28(fp)
 800f908:	10800044 	addi	r2,r2,1
 800f90c:	e0bff915 	stw	r2,-28(fp)
	*/
	expand_right_edge(input_data, cinfo->max_v_samp_factor,
		cinfo->image_width, output_cols * 2);

	inrow = outrow = 0;
	while (inrow < cinfo->max_v_samp_factor) {
 800f910:	e0bffc17 	ldw	r2,-16(fp)
 800f914:	10803f17 	ldw	r2,252(r2)
 800f918:	e0fff817 	ldw	r3,-32(fp)
 800f91c:	18bfc616 	blt	r3,r2,800f838 <h2v2_downsample+0x88>
			inptr0 += 2; inptr1 += 2;
		}
		inrow += 2;
		outrow++;
	}
}
 800f920:	e037883a 	mov	sp,fp
 800f924:	dfc00517 	ldw	ra,20(sp)
 800f928:	df000417 	ldw	fp,16(sp)
 800f92c:	dcc00317 	ldw	r19,12(sp)
 800f930:	dc800217 	ldw	r18,8(sp)
 800f934:	dc400117 	ldw	r17,4(sp)
 800f938:	dc000017 	ldw	r16,0(sp)
 800f93c:	dec00604 	addi	sp,sp,24
 800f940:	f800283a 	ret

0800f944 <h2v2_smooth_downsample>:
*/

METHODDEF(void)
	h2v2_smooth_downsample (j_compress_ptr cinfo, jpeg_component_info * compptr,
	JSAMPARRAY input_data, JSAMPARRAY output_data)
{
 800f944:	deffec04 	addi	sp,sp,-80
 800f948:	dfc01315 	stw	ra,76(sp)
 800f94c:	df001215 	stw	fp,72(sp)
 800f950:	dd401115 	stw	r21,68(sp)
 800f954:	dd001015 	stw	r20,64(sp)
 800f958:	dcc00f15 	stw	r19,60(sp)
 800f95c:	dc800e15 	stw	r18,56(sp)
 800f960:	dc400d15 	stw	r17,52(sp)
 800f964:	dc000c15 	stw	r16,48(sp)
 800f968:	df000c04 	addi	fp,sp,48
 800f96c:	e13ffc15 	stw	r4,-16(fp)
 800f970:	e17ffd15 	stw	r5,-12(fp)
 800f974:	e1bffe15 	stw	r6,-8(fp)
 800f978:	e1ffff15 	stw	r7,-4(fp)
	int inrow, outrow;
	JDIMENSION colctr;
	JDIMENSION output_cols = compptr->width_in_blocks * compptr->DCT_h_scaled_size;
 800f97c:	e0bffd17 	ldw	r2,-12(fp)
 800f980:	10c00717 	ldw	r3,28(r2)
 800f984:	e0bffd17 	ldw	r2,-12(fp)
 800f988:	10800917 	ldw	r2,36(r2)
 800f98c:	1809883a 	mov	r4,r3
 800f990:	100b883a 	mov	r5,r2
 800f994:	802c2180 	call	802c218 <__mulsi3>
 800f998:	e0bff715 	stw	r2,-36(fp)

	/* Expand input data enough to let all the output samples be generated
	* by the standard loop.  Special-casing padded output would be more
	* efficient.
	*/
	expand_right_edge(input_data - 1, cinfo->max_v_samp_factor + 2,
 800f99c:	e0bffe17 	ldw	r2,-8(fp)
 800f9a0:	113fff04 	addi	r4,r2,-4
 800f9a4:	e0bffc17 	ldw	r2,-16(fp)
 800f9a8:	10803f17 	ldw	r2,252(r2)
 800f9ac:	11400084 	addi	r5,r2,2
		cinfo->image_width, output_cols * 2);
 800f9b0:	e0bffc17 	ldw	r2,-16(fp)

	/* Expand input data enough to let all the output samples be generated
	* by the standard loop.  Special-casing padded output would be more
	* efficient.
	*/
	expand_right_edge(input_data - 1, cinfo->max_v_samp_factor + 2,
 800f9b4:	10c00717 	ldw	r3,28(r2)
 800f9b8:	e0bff717 	ldw	r2,-36(fp)
 800f9bc:	1085883a 	add	r2,r2,r2
 800f9c0:	180d883a 	mov	r6,r3
 800f9c4:	100f883a 	mov	r7,r2
 800f9c8:	800f1840 	call	800f184 <expand_right_edge>
	* pixels, or SF/2 overall.  In order to use integer arithmetic, these
	* factors are scaled by 2^16 = 65536.
	* Also recall that SF = smoothing_factor / 1024.
	*/

	memberscale = 16384 - cinfo->smoothing_factor * 80; /* scaled (1-5*SF)/4 */
 800f9cc:	e0bffc17 	ldw	r2,-16(fp)
 800f9d0:	10803517 	ldw	r2,212(r2)
 800f9d4:	1009883a 	mov	r4,r2
 800f9d8:	017fec04 	movi	r5,-80
 800f9dc:	802c2180 	call	802c218 <__mulsi3>
 800f9e0:	10900004 	addi	r2,r2,16384
 800f9e4:	e0bff815 	stw	r2,-32(fp)
	neighscale = cinfo->smoothing_factor * 16; /* scaled SF/4 */
 800f9e8:	e0bffc17 	ldw	r2,-16(fp)
 800f9ec:	10803517 	ldw	r2,212(r2)
 800f9f0:	1004913a 	slli	r2,r2,4
 800f9f4:	e0bff915 	stw	r2,-28(fp)

	inrow = outrow = 0;
 800f9f8:	e03ff515 	stw	zero,-44(fp)
 800f9fc:	e0bff517 	ldw	r2,-44(fp)
 800fa00:	e0bff415 	stw	r2,-48(fp)
	while (inrow < cinfo->max_v_samp_factor) {
 800fa04:	00012606 	br	800fea0 <h2v2_smooth_downsample+0x55c>
		outptr = output_data[outrow];
 800fa08:	e0bff517 	ldw	r2,-44(fp)
 800fa0c:	1085883a 	add	r2,r2,r2
 800fa10:	1085883a 	add	r2,r2,r2
 800fa14:	e0ffff17 	ldw	r3,-4(fp)
 800fa18:	1885883a 	add	r2,r3,r2
 800fa1c:	15000017 	ldw	r20,0(r2)
		inptr0 = input_data[inrow];
 800fa20:	e0bff417 	ldw	r2,-48(fp)
 800fa24:	1085883a 	add	r2,r2,r2
 800fa28:	1085883a 	add	r2,r2,r2
 800fa2c:	e0fffe17 	ldw	r3,-8(fp)
 800fa30:	1885883a 	add	r2,r3,r2
 800fa34:	14c00017 	ldw	r19,0(r2)
		inptr1 = input_data[inrow+1];
 800fa38:	e0bff417 	ldw	r2,-48(fp)
 800fa3c:	10800044 	addi	r2,r2,1
 800fa40:	1085883a 	add	r2,r2,r2
 800fa44:	1085883a 	add	r2,r2,r2
 800fa48:	e0fffe17 	ldw	r3,-8(fp)
 800fa4c:	1885883a 	add	r2,r3,r2
 800fa50:	14800017 	ldw	r18,0(r2)
		above_ptr = input_data[inrow-1];
 800fa54:	e0bff417 	ldw	r2,-48(fp)
 800fa58:	10bfffc4 	addi	r2,r2,-1
 800fa5c:	1085883a 	add	r2,r2,r2
 800fa60:	1085883a 	add	r2,r2,r2
 800fa64:	e0fffe17 	ldw	r3,-8(fp)
 800fa68:	1885883a 	add	r2,r3,r2
 800fa6c:	14400017 	ldw	r17,0(r2)
		below_ptr = input_data[inrow+2];
 800fa70:	e0bff417 	ldw	r2,-48(fp)
 800fa74:	10800084 	addi	r2,r2,2
 800fa78:	1085883a 	add	r2,r2,r2
 800fa7c:	1085883a 	add	r2,r2,r2
 800fa80:	e0fffe17 	ldw	r3,-8(fp)
 800fa84:	1885883a 	add	r2,r3,r2
 800fa88:	14000017 	ldw	r16,0(r2)

		/* Special case for first column: pretend column -1 is same as column 0 */
		membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
 800fa8c:	98800003 	ldbu	r2,0(r19)
 800fa90:	10c03fcc 	andi	r3,r2,255
 800fa94:	98800044 	addi	r2,r19,1
 800fa98:	10800003 	ldbu	r2,0(r2)
 800fa9c:	10803fcc 	andi	r2,r2,255
 800faa0:	1887883a 	add	r3,r3,r2
			GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
 800faa4:	90800003 	ldbu	r2,0(r18)
 800faa8:	10803fcc 	andi	r2,r2,255
		inptr1 = input_data[inrow+1];
		above_ptr = input_data[inrow-1];
		below_ptr = input_data[inrow+2];

		/* Special case for first column: pretend column -1 is same as column 0 */
		membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
 800faac:	1887883a 	add	r3,r3,r2
			GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
 800fab0:	90800044 	addi	r2,r18,1
 800fab4:	10800003 	ldbu	r2,0(r2)
 800fab8:	10803fcc 	andi	r2,r2,255
		inptr1 = input_data[inrow+1];
		above_ptr = input_data[inrow-1];
		below_ptr = input_data[inrow+2];

		/* Special case for first column: pretend column -1 is same as column 0 */
		membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
 800fabc:	1885883a 	add	r2,r3,r2
 800fac0:	e0bffa15 	stw	r2,-24(fp)
			GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
		neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
 800fac4:	88800003 	ldbu	r2,0(r17)
 800fac8:	10c03fcc 	andi	r3,r2,255
 800facc:	88800044 	addi	r2,r17,1
 800fad0:	10800003 	ldbu	r2,0(r2)
 800fad4:	10803fcc 	andi	r2,r2,255
 800fad8:	1887883a 	add	r3,r3,r2
			GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
 800fadc:	80800003 	ldbu	r2,0(r16)
 800fae0:	10803fcc 	andi	r2,r2,255
		below_ptr = input_data[inrow+2];

		/* Special case for first column: pretend column -1 is same as column 0 */
		membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
			GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
		neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
 800fae4:	1887883a 	add	r3,r3,r2
			GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
 800fae8:	80800044 	addi	r2,r16,1
 800faec:	10800003 	ldbu	r2,0(r2)
 800faf0:	10803fcc 	andi	r2,r2,255
 800faf4:	1887883a 	add	r3,r3,r2
			GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[2]) +
 800faf8:	98800003 	ldbu	r2,0(r19)
 800fafc:	10803fcc 	andi	r2,r2,255

		/* Special case for first column: pretend column -1 is same as column 0 */
		membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
			GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
		neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
			GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
 800fb00:	1887883a 	add	r3,r3,r2
			GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[2]) +
 800fb04:	98800084 	addi	r2,r19,2
 800fb08:	10800003 	ldbu	r2,0(r2)
 800fb0c:	10803fcc 	andi	r2,r2,255
 800fb10:	1887883a 	add	r3,r3,r2
			GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[2]);
 800fb14:	90800003 	ldbu	r2,0(r18)
 800fb18:	10803fcc 	andi	r2,r2,255
		/* Special case for first column: pretend column -1 is same as column 0 */
		membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
			GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
		neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
			GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
			GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[2]) +
 800fb1c:	1887883a 	add	r3,r3,r2
			GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[2]);
 800fb20:	90800084 	addi	r2,r18,2
 800fb24:	10800003 	ldbu	r2,0(r2)
 800fb28:	10803fcc 	andi	r2,r2,255
		below_ptr = input_data[inrow+2];

		/* Special case for first column: pretend column -1 is same as column 0 */
		membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
			GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
		neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
 800fb2c:	1885883a 	add	r2,r3,r2
 800fb30:	e0bffb15 	stw	r2,-20(fp)
			GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
			GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[2]) +
			GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[2]);
		neighsum += neighsum;
 800fb34:	e0fffb17 	ldw	r3,-20(fp)
 800fb38:	e0bffb17 	ldw	r2,-20(fp)
 800fb3c:	1885883a 	add	r2,r3,r2
 800fb40:	e0bffb15 	stw	r2,-20(fp)
		neighsum += GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[2]) +
 800fb44:	88800003 	ldbu	r2,0(r17)
 800fb48:	10c03fcc 	andi	r3,r2,255
 800fb4c:	88800084 	addi	r2,r17,2
 800fb50:	10800003 	ldbu	r2,0(r2)
 800fb54:	10803fcc 	andi	r2,r2,255
 800fb58:	1887883a 	add	r3,r3,r2
			GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[2]);
 800fb5c:	80800003 	ldbu	r2,0(r16)
 800fb60:	10803fcc 	andi	r2,r2,255
		neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
			GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
			GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[2]) +
			GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[2]);
		neighsum += neighsum;
		neighsum += GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[2]) +
 800fb64:	1887883a 	add	r3,r3,r2
			GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[2]);
 800fb68:	80800084 	addi	r2,r16,2
 800fb6c:	10800003 	ldbu	r2,0(r2)
 800fb70:	10803fcc 	andi	r2,r2,255
 800fb74:	1885883a 	add	r2,r3,r2
		neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
			GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
			GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[2]) +
			GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[2]);
		neighsum += neighsum;
		neighsum += GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[2]) +
 800fb78:	e0fffb17 	ldw	r3,-20(fp)
 800fb7c:	1885883a 	add	r2,r3,r2
 800fb80:	e0bffb15 	stw	r2,-20(fp)
			GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[2]);
		membersum = membersum * memberscale + neighsum * neighscale;
 800fb84:	e13ffa17 	ldw	r4,-24(fp)
 800fb88:	e17ff817 	ldw	r5,-32(fp)
 800fb8c:	802c2180 	call	802c218 <__mulsi3>
 800fb90:	102b883a 	mov	r21,r2
 800fb94:	e13ffb17 	ldw	r4,-20(fp)
 800fb98:	e17ff917 	ldw	r5,-28(fp)
 800fb9c:	802c2180 	call	802c218 <__mulsi3>
 800fba0:	a885883a 	add	r2,r21,r2
 800fba4:	e0bffa15 	stw	r2,-24(fp)
		*outptr++ = (JSAMPLE) ((membersum + 32768) >> 16);
 800fba8:	e0fffa17 	ldw	r3,-24(fp)
 800fbac:	00a00014 	movui	r2,32768
 800fbb0:	1885883a 	add	r2,r3,r2
 800fbb4:	1005d43a 	srai	r2,r2,16
 800fbb8:	a0800005 	stb	r2,0(r20)
 800fbbc:	a5000044 	addi	r20,r20,1
		inptr0 += 2; inptr1 += 2; above_ptr += 2; below_ptr += 2;
 800fbc0:	9cc00084 	addi	r19,r19,2
 800fbc4:	94800084 	addi	r18,r18,2
 800fbc8:	8c400084 	addi	r17,r17,2
 800fbcc:	84000084 	addi	r16,r16,2

		for (colctr = output_cols - 2; colctr > 0; colctr--) {
 800fbd0:	e0bff717 	ldw	r2,-36(fp)
 800fbd4:	10bfff84 	addi	r2,r2,-2
 800fbd8:	e0bff615 	stw	r2,-40(fp)
 800fbdc:	00005806 	br	800fd40 <h2v2_smooth_downsample+0x3fc>
			/* sum of pixels directly mapped to this output element */
			membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
 800fbe0:	98800003 	ldbu	r2,0(r19)
 800fbe4:	10c03fcc 	andi	r3,r2,255
 800fbe8:	98800044 	addi	r2,r19,1
 800fbec:	10800003 	ldbu	r2,0(r2)
 800fbf0:	10803fcc 	andi	r2,r2,255
 800fbf4:	1887883a 	add	r3,r3,r2
				GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
 800fbf8:	90800003 	ldbu	r2,0(r18)
 800fbfc:	10803fcc 	andi	r2,r2,255
		*outptr++ = (JSAMPLE) ((membersum + 32768) >> 16);
		inptr0 += 2; inptr1 += 2; above_ptr += 2; below_ptr += 2;

		for (colctr = output_cols - 2; colctr > 0; colctr--) {
			/* sum of pixels directly mapped to this output element */
			membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
 800fc00:	1887883a 	add	r3,r3,r2
				GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
 800fc04:	90800044 	addi	r2,r18,1
 800fc08:	10800003 	ldbu	r2,0(r2)
 800fc0c:	10803fcc 	andi	r2,r2,255
		*outptr++ = (JSAMPLE) ((membersum + 32768) >> 16);
		inptr0 += 2; inptr1 += 2; above_ptr += 2; below_ptr += 2;

		for (colctr = output_cols - 2; colctr > 0; colctr--) {
			/* sum of pixels directly mapped to this output element */
			membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
 800fc10:	1885883a 	add	r2,r3,r2
 800fc14:	e0bffa15 	stw	r2,-24(fp)
				GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
			/* sum of edge-neighbor pixels */
			neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
 800fc18:	88800003 	ldbu	r2,0(r17)
 800fc1c:	10c03fcc 	andi	r3,r2,255
 800fc20:	88800044 	addi	r2,r17,1
 800fc24:	10800003 	ldbu	r2,0(r2)
 800fc28:	10803fcc 	andi	r2,r2,255
 800fc2c:	1887883a 	add	r3,r3,r2
				GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
 800fc30:	80800003 	ldbu	r2,0(r16)
 800fc34:	10803fcc 	andi	r2,r2,255
		for (colctr = output_cols - 2; colctr > 0; colctr--) {
			/* sum of pixels directly mapped to this output element */
			membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
				GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
			/* sum of edge-neighbor pixels */
			neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
 800fc38:	1887883a 	add	r3,r3,r2
				GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
 800fc3c:	80800044 	addi	r2,r16,1
 800fc40:	10800003 	ldbu	r2,0(r2)
 800fc44:	10803fcc 	andi	r2,r2,255
 800fc48:	1887883a 	add	r3,r3,r2
				GETJSAMPLE(inptr0[-1]) + GETJSAMPLE(inptr0[2]) +
 800fc4c:	98bfffc4 	addi	r2,r19,-1
 800fc50:	10800003 	ldbu	r2,0(r2)
 800fc54:	10803fcc 	andi	r2,r2,255
			/* sum of pixels directly mapped to this output element */
			membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
				GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
			/* sum of edge-neighbor pixels */
			neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
				GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
 800fc58:	1887883a 	add	r3,r3,r2
				GETJSAMPLE(inptr0[-1]) + GETJSAMPLE(inptr0[2]) +
 800fc5c:	98800084 	addi	r2,r19,2
 800fc60:	10800003 	ldbu	r2,0(r2)
 800fc64:	10803fcc 	andi	r2,r2,255
 800fc68:	1887883a 	add	r3,r3,r2
				GETJSAMPLE(inptr1[-1]) + GETJSAMPLE(inptr1[2]);
 800fc6c:	90bfffc4 	addi	r2,r18,-1
 800fc70:	10800003 	ldbu	r2,0(r2)
 800fc74:	10803fcc 	andi	r2,r2,255
			membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
				GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
			/* sum of edge-neighbor pixels */
			neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
				GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
				GETJSAMPLE(inptr0[-1]) + GETJSAMPLE(inptr0[2]) +
 800fc78:	1887883a 	add	r3,r3,r2
				GETJSAMPLE(inptr1[-1]) + GETJSAMPLE(inptr1[2]);
 800fc7c:	90800084 	addi	r2,r18,2
 800fc80:	10800003 	ldbu	r2,0(r2)
 800fc84:	10803fcc 	andi	r2,r2,255
		for (colctr = output_cols - 2; colctr > 0; colctr--) {
			/* sum of pixels directly mapped to this output element */
			membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
				GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
			/* sum of edge-neighbor pixels */
			neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
 800fc88:	1885883a 	add	r2,r3,r2
 800fc8c:	e0bffb15 	stw	r2,-20(fp)
				GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
				GETJSAMPLE(inptr0[-1]) + GETJSAMPLE(inptr0[2]) +
				GETJSAMPLE(inptr1[-1]) + GETJSAMPLE(inptr1[2]);
			/* The edge-neighbors count twice as much as corner-neighbors */
			neighsum += neighsum;
 800fc90:	e0fffb17 	ldw	r3,-20(fp)
 800fc94:	e0bffb17 	ldw	r2,-20(fp)
 800fc98:	1885883a 	add	r2,r3,r2
 800fc9c:	e0bffb15 	stw	r2,-20(fp)
			/* Add in the corner-neighbors */
			neighsum += GETJSAMPLE(above_ptr[-1]) + GETJSAMPLE(above_ptr[2]) +
 800fca0:	88bfffc4 	addi	r2,r17,-1
 800fca4:	10800003 	ldbu	r2,0(r2)
 800fca8:	10c03fcc 	andi	r3,r2,255
 800fcac:	88800084 	addi	r2,r17,2
 800fcb0:	10800003 	ldbu	r2,0(r2)
 800fcb4:	10803fcc 	andi	r2,r2,255
 800fcb8:	1887883a 	add	r3,r3,r2
				GETJSAMPLE(below_ptr[-1]) + GETJSAMPLE(below_ptr[2]);
 800fcbc:	80bfffc4 	addi	r2,r16,-1
 800fcc0:	10800003 	ldbu	r2,0(r2)
 800fcc4:	10803fcc 	andi	r2,r2,255
				GETJSAMPLE(inptr0[-1]) + GETJSAMPLE(inptr0[2]) +
				GETJSAMPLE(inptr1[-1]) + GETJSAMPLE(inptr1[2]);
			/* The edge-neighbors count twice as much as corner-neighbors */
			neighsum += neighsum;
			/* Add in the corner-neighbors */
			neighsum += GETJSAMPLE(above_ptr[-1]) + GETJSAMPLE(above_ptr[2]) +
 800fcc8:	1887883a 	add	r3,r3,r2
				GETJSAMPLE(below_ptr[-1]) + GETJSAMPLE(below_ptr[2]);
 800fccc:	80800084 	addi	r2,r16,2
 800fcd0:	10800003 	ldbu	r2,0(r2)
 800fcd4:	10803fcc 	andi	r2,r2,255
 800fcd8:	1885883a 	add	r2,r3,r2
				GETJSAMPLE(inptr0[-1]) + GETJSAMPLE(inptr0[2]) +
				GETJSAMPLE(inptr1[-1]) + GETJSAMPLE(inptr1[2]);
			/* The edge-neighbors count twice as much as corner-neighbors */
			neighsum += neighsum;
			/* Add in the corner-neighbors */
			neighsum += GETJSAMPLE(above_ptr[-1]) + GETJSAMPLE(above_ptr[2]) +
 800fcdc:	e0fffb17 	ldw	r3,-20(fp)
 800fce0:	1885883a 	add	r2,r3,r2
 800fce4:	e0bffb15 	stw	r2,-20(fp)
				GETJSAMPLE(below_ptr[-1]) + GETJSAMPLE(below_ptr[2]);
			/* form final output scaled up by 2^16 */
			membersum = membersum * memberscale + neighsum * neighscale;
 800fce8:	e13ffa17 	ldw	r4,-24(fp)
 800fcec:	e17ff817 	ldw	r5,-32(fp)
 800fcf0:	802c2180 	call	802c218 <__mulsi3>
 800fcf4:	102b883a 	mov	r21,r2
 800fcf8:	e13ffb17 	ldw	r4,-20(fp)
 800fcfc:	e17ff917 	ldw	r5,-28(fp)
 800fd00:	802c2180 	call	802c218 <__mulsi3>
 800fd04:	a885883a 	add	r2,r21,r2
 800fd08:	e0bffa15 	stw	r2,-24(fp)
			/* round, descale and output it */
			*outptr++ = (JSAMPLE) ((membersum + 32768) >> 16);
 800fd0c:	e0fffa17 	ldw	r3,-24(fp)
 800fd10:	00a00014 	movui	r2,32768
 800fd14:	1885883a 	add	r2,r3,r2
 800fd18:	1005d43a 	srai	r2,r2,16
 800fd1c:	a0800005 	stb	r2,0(r20)
 800fd20:	a5000044 	addi	r20,r20,1
			inptr0 += 2; inptr1 += 2; above_ptr += 2; below_ptr += 2;
 800fd24:	9cc00084 	addi	r19,r19,2
 800fd28:	94800084 	addi	r18,r18,2
 800fd2c:	8c400084 	addi	r17,r17,2
 800fd30:	84000084 	addi	r16,r16,2
			GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[2]);
		membersum = membersum * memberscale + neighsum * neighscale;
		*outptr++ = (JSAMPLE) ((membersum + 32768) >> 16);
		inptr0 += 2; inptr1 += 2; above_ptr += 2; below_ptr += 2;

		for (colctr = output_cols - 2; colctr > 0; colctr--) {
 800fd34:	e0bff617 	ldw	r2,-40(fp)
 800fd38:	10bfffc4 	addi	r2,r2,-1
 800fd3c:	e0bff615 	stw	r2,-40(fp)
 800fd40:	e0bff617 	ldw	r2,-40(fp)
 800fd44:	103fa61e 	bne	r2,zero,800fbe0 <h2v2_smooth_downsample+0x29c>
			*outptr++ = (JSAMPLE) ((membersum + 32768) >> 16);
			inptr0 += 2; inptr1 += 2; above_ptr += 2; below_ptr += 2;
		}

		/* Special case for last column */
		membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
 800fd48:	98800003 	ldbu	r2,0(r19)
 800fd4c:	10c03fcc 	andi	r3,r2,255
 800fd50:	98800044 	addi	r2,r19,1
 800fd54:	10800003 	ldbu	r2,0(r2)
 800fd58:	10803fcc 	andi	r2,r2,255
 800fd5c:	1887883a 	add	r3,r3,r2
			GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
 800fd60:	90800003 	ldbu	r2,0(r18)
 800fd64:	10803fcc 	andi	r2,r2,255
			*outptr++ = (JSAMPLE) ((membersum + 32768) >> 16);
			inptr0 += 2; inptr1 += 2; above_ptr += 2; below_ptr += 2;
		}

		/* Special case for last column */
		membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
 800fd68:	1887883a 	add	r3,r3,r2
			GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
 800fd6c:	90800044 	addi	r2,r18,1
 800fd70:	10800003 	ldbu	r2,0(r2)
 800fd74:	10803fcc 	andi	r2,r2,255
			*outptr++ = (JSAMPLE) ((membersum + 32768) >> 16);
			inptr0 += 2; inptr1 += 2; above_ptr += 2; below_ptr += 2;
		}

		/* Special case for last column */
		membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
 800fd78:	1885883a 	add	r2,r3,r2
 800fd7c:	e0bffa15 	stw	r2,-24(fp)
			GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
		neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
 800fd80:	88800003 	ldbu	r2,0(r17)
 800fd84:	10c03fcc 	andi	r3,r2,255
 800fd88:	88800044 	addi	r2,r17,1
 800fd8c:	10800003 	ldbu	r2,0(r2)
 800fd90:	10803fcc 	andi	r2,r2,255
 800fd94:	1887883a 	add	r3,r3,r2
			GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
 800fd98:	80800003 	ldbu	r2,0(r16)
 800fd9c:	10803fcc 	andi	r2,r2,255
		}

		/* Special case for last column */
		membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
			GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
		neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
 800fda0:	1887883a 	add	r3,r3,r2
			GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
 800fda4:	80800044 	addi	r2,r16,1
 800fda8:	10800003 	ldbu	r2,0(r2)
 800fdac:	10803fcc 	andi	r2,r2,255
 800fdb0:	1887883a 	add	r3,r3,r2
			GETJSAMPLE(inptr0[-1]) + GETJSAMPLE(inptr0[1]) +
 800fdb4:	98bfffc4 	addi	r2,r19,-1
 800fdb8:	10800003 	ldbu	r2,0(r2)
 800fdbc:	10803fcc 	andi	r2,r2,255

		/* Special case for last column */
		membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
			GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
		neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
			GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
 800fdc0:	1887883a 	add	r3,r3,r2
			GETJSAMPLE(inptr0[-1]) + GETJSAMPLE(inptr0[1]) +
 800fdc4:	98800044 	addi	r2,r19,1
 800fdc8:	10800003 	ldbu	r2,0(r2)
 800fdcc:	10803fcc 	andi	r2,r2,255
 800fdd0:	1887883a 	add	r3,r3,r2
			GETJSAMPLE(inptr1[-1]) + GETJSAMPLE(inptr1[1]);
 800fdd4:	90bfffc4 	addi	r2,r18,-1
 800fdd8:	10800003 	ldbu	r2,0(r2)
 800fddc:	10803fcc 	andi	r2,r2,255
		/* Special case for last column */
		membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
			GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
		neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
			GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
			GETJSAMPLE(inptr0[-1]) + GETJSAMPLE(inptr0[1]) +
 800fde0:	1887883a 	add	r3,r3,r2
			GETJSAMPLE(inptr1[-1]) + GETJSAMPLE(inptr1[1]);
 800fde4:	90800044 	addi	r2,r18,1
 800fde8:	10800003 	ldbu	r2,0(r2)
 800fdec:	10803fcc 	andi	r2,r2,255
		}

		/* Special case for last column */
		membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
			GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
		neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
 800fdf0:	1885883a 	add	r2,r3,r2
 800fdf4:	e0bffb15 	stw	r2,-20(fp)
			GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
			GETJSAMPLE(inptr0[-1]) + GETJSAMPLE(inptr0[1]) +
			GETJSAMPLE(inptr1[-1]) + GETJSAMPLE(inptr1[1]);
		neighsum += neighsum;
 800fdf8:	e0fffb17 	ldw	r3,-20(fp)
 800fdfc:	e0bffb17 	ldw	r2,-20(fp)
 800fe00:	1885883a 	add	r2,r3,r2
 800fe04:	e0bffb15 	stw	r2,-20(fp)
		neighsum += GETJSAMPLE(above_ptr[-1]) + GETJSAMPLE(above_ptr[1]) +
 800fe08:	88bfffc4 	addi	r2,r17,-1
 800fe0c:	10800003 	ldbu	r2,0(r2)
 800fe10:	10c03fcc 	andi	r3,r2,255
 800fe14:	88800044 	addi	r2,r17,1
 800fe18:	10800003 	ldbu	r2,0(r2)
 800fe1c:	10803fcc 	andi	r2,r2,255
 800fe20:	1887883a 	add	r3,r3,r2
			GETJSAMPLE(below_ptr[-1]) + GETJSAMPLE(below_ptr[1]);
 800fe24:	80bfffc4 	addi	r2,r16,-1
 800fe28:	10800003 	ldbu	r2,0(r2)
 800fe2c:	10803fcc 	andi	r2,r2,255
		neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
			GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
			GETJSAMPLE(inptr0[-1]) + GETJSAMPLE(inptr0[1]) +
			GETJSAMPLE(inptr1[-1]) + GETJSAMPLE(inptr1[1]);
		neighsum += neighsum;
		neighsum += GETJSAMPLE(above_ptr[-1]) + GETJSAMPLE(above_ptr[1]) +
 800fe30:	1887883a 	add	r3,r3,r2
			GETJSAMPLE(below_ptr[-1]) + GETJSAMPLE(below_ptr[1]);
 800fe34:	80800044 	addi	r2,r16,1
 800fe38:	10800003 	ldbu	r2,0(r2)
 800fe3c:	10803fcc 	andi	r2,r2,255
 800fe40:	1885883a 	add	r2,r3,r2
		neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
			GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
			GETJSAMPLE(inptr0[-1]) + GETJSAMPLE(inptr0[1]) +
			GETJSAMPLE(inptr1[-1]) + GETJSAMPLE(inptr1[1]);
		neighsum += neighsum;
		neighsum += GETJSAMPLE(above_ptr[-1]) + GETJSAMPLE(above_ptr[1]) +
 800fe44:	e0fffb17 	ldw	r3,-20(fp)
 800fe48:	1885883a 	add	r2,r3,r2
 800fe4c:	e0bffb15 	stw	r2,-20(fp)
			GETJSAMPLE(below_ptr[-1]) + GETJSAMPLE(below_ptr[1]);
		membersum = membersum * memberscale + neighsum * neighscale;
 800fe50:	e13ffa17 	ldw	r4,-24(fp)
 800fe54:	e17ff817 	ldw	r5,-32(fp)
 800fe58:	802c2180 	call	802c218 <__mulsi3>
 800fe5c:	1021883a 	mov	r16,r2
 800fe60:	e13ffb17 	ldw	r4,-20(fp)
 800fe64:	e17ff917 	ldw	r5,-28(fp)
 800fe68:	802c2180 	call	802c218 <__mulsi3>
 800fe6c:	8085883a 	add	r2,r16,r2
 800fe70:	e0bffa15 	stw	r2,-24(fp)
		*outptr = (JSAMPLE) ((membersum + 32768) >> 16);
 800fe74:	e0fffa17 	ldw	r3,-24(fp)
 800fe78:	00a00014 	movui	r2,32768
 800fe7c:	1885883a 	add	r2,r3,r2
 800fe80:	1005d43a 	srai	r2,r2,16
 800fe84:	a0800005 	stb	r2,0(r20)

		inrow += 2;
 800fe88:	e0bff417 	ldw	r2,-48(fp)
 800fe8c:	10800084 	addi	r2,r2,2
 800fe90:	e0bff415 	stw	r2,-48(fp)
		outrow++;
 800fe94:	e0bff517 	ldw	r2,-44(fp)
 800fe98:	10800044 	addi	r2,r2,1
 800fe9c:	e0bff515 	stw	r2,-44(fp)

	memberscale = 16384 - cinfo->smoothing_factor * 80; /* scaled (1-5*SF)/4 */
	neighscale = cinfo->smoothing_factor * 16; /* scaled SF/4 */

	inrow = outrow = 0;
	while (inrow < cinfo->max_v_samp_factor) {
 800fea0:	e0bffc17 	ldw	r2,-16(fp)
 800fea4:	10803f17 	ldw	r2,252(r2)
 800fea8:	e0fff417 	ldw	r3,-48(fp)
 800feac:	18bed616 	blt	r3,r2,800fa08 <h2v2_smooth_downsample+0xc4>
		*outptr = (JSAMPLE) ((membersum + 32768) >> 16);

		inrow += 2;
		outrow++;
	}
}
 800feb0:	e037883a 	mov	sp,fp
 800feb4:	dfc00717 	ldw	ra,28(sp)
 800feb8:	df000617 	ldw	fp,24(sp)
 800febc:	dd400517 	ldw	r21,20(sp)
 800fec0:	dd000417 	ldw	r20,16(sp)
 800fec4:	dcc00317 	ldw	r19,12(sp)
 800fec8:	dc800217 	ldw	r18,8(sp)
 800fecc:	dc400117 	ldw	r17,4(sp)
 800fed0:	dc000017 	ldw	r16,0(sp)
 800fed4:	dec00804 	addi	sp,sp,32
 800fed8:	f800283a 	ret

0800fedc <fullsize_smooth_downsample>:
*/

METHODDEF(void)
	fullsize_smooth_downsample (j_compress_ptr cinfo, jpeg_component_info *compptr,
	JSAMPARRAY input_data, JSAMPARRAY output_data)
{
 800fedc:	deffeb04 	addi	sp,sp,-84
 800fee0:	dfc01415 	stw	ra,80(sp)
 800fee4:	df001315 	stw	fp,76(sp)
 800fee8:	dd001215 	stw	r20,72(sp)
 800feec:	dcc01115 	stw	r19,68(sp)
 800fef0:	dc801015 	stw	r18,64(sp)
 800fef4:	dc400f15 	stw	r17,60(sp)
 800fef8:	dc000e15 	stw	r16,56(sp)
 800fefc:	df000e04 	addi	fp,sp,56
 800ff00:	e13ffc15 	stw	r4,-16(fp)
 800ff04:	e17ffd15 	stw	r5,-12(fp)
 800ff08:	e1bffe15 	stw	r6,-8(fp)
 800ff0c:	e1ffff15 	stw	r7,-4(fp)
	int inrow;
	JDIMENSION colctr;
	JDIMENSION output_cols = compptr->width_in_blocks * compptr->DCT_h_scaled_size;
 800ff10:	e0bffd17 	ldw	r2,-12(fp)
 800ff14:	10c00717 	ldw	r3,28(r2)
 800ff18:	e0bffd17 	ldw	r2,-12(fp)
 800ff1c:	10800917 	ldw	r2,36(r2)
 800ff20:	1809883a 	mov	r4,r3
 800ff24:	100b883a 	mov	r5,r2
 800ff28:	802c2180 	call	802c218 <__mulsi3>
 800ff2c:	e0bff615 	stw	r2,-40(fp)

	/* Expand input data enough to let all the output samples be generated
	* by the standard loop.  Special-casing padded output would be more
	* efficient.
	*/
	expand_right_edge(input_data - 1, cinfo->max_v_samp_factor + 2,
 800ff30:	e0bffe17 	ldw	r2,-8(fp)
 800ff34:	113fff04 	addi	r4,r2,-4
 800ff38:	e0bffc17 	ldw	r2,-16(fp)
 800ff3c:	10803f17 	ldw	r2,252(r2)
 800ff40:	10c00084 	addi	r3,r2,2
		cinfo->image_width, output_cols);
 800ff44:	e0bffc17 	ldw	r2,-16(fp)

	/* Expand input data enough to let all the output samples be generated
	* by the standard loop.  Special-casing padded output would be more
	* efficient.
	*/
	expand_right_edge(input_data - 1, cinfo->max_v_samp_factor + 2,
 800ff48:	10800717 	ldw	r2,28(r2)
 800ff4c:	180b883a 	mov	r5,r3
 800ff50:	100d883a 	mov	r6,r2
 800ff54:	e1fff617 	ldw	r7,-40(fp)
 800ff58:	800f1840 	call	800f184 <expand_right_edge>
	* smoothed pixel, while the main pixel contributes (1-8*SF).  In order
	* to use integer arithmetic, these factors are multiplied by 2^16 = 65536.
	* Also recall that SF = smoothing_factor / 1024.
	*/

	memberscale = 65536L - cinfo->smoothing_factor * 512L; /* scaled 1-8*SF */
 800ff5c:	e0bffc17 	ldw	r2,-16(fp)
 800ff60:	10803517 	ldw	r2,212(r2)
 800ff64:	00c02004 	movi	r3,128
 800ff68:	1885c83a 	sub	r2,r3,r2
 800ff6c:	1004927a 	slli	r2,r2,9
 800ff70:	e0bff715 	stw	r2,-36(fp)
	neighscale = cinfo->smoothing_factor * 64; /* scaled SF */
 800ff74:	e0bffc17 	ldw	r2,-16(fp)
 800ff78:	10803517 	ldw	r2,212(r2)
 800ff7c:	100491ba 	slli	r2,r2,6
 800ff80:	e0bff815 	stw	r2,-32(fp)

	for (inrow = 0; inrow < cinfo->max_v_samp_factor; inrow++) {
 800ff84:	e03ff215 	stw	zero,-56(fp)
 800ff88:	00009c06 	br	80101fc <fullsize_smooth_downsample+0x320>
		outptr = output_data[inrow];
 800ff8c:	e0bff217 	ldw	r2,-56(fp)
 800ff90:	1085883a 	add	r2,r2,r2
 800ff94:	1085883a 	add	r2,r2,r2
 800ff98:	e0ffff17 	ldw	r3,-4(fp)
 800ff9c:	1885883a 	add	r2,r3,r2
 800ffa0:	14400017 	ldw	r17,0(r2)
		inptr = input_data[inrow];
 800ffa4:	e0bff217 	ldw	r2,-56(fp)
 800ffa8:	1085883a 	add	r2,r2,r2
 800ffac:	1085883a 	add	r2,r2,r2
 800ffb0:	e0fffe17 	ldw	r3,-8(fp)
 800ffb4:	1885883a 	add	r2,r3,r2
 800ffb8:	14000017 	ldw	r16,0(r2)
		above_ptr = input_data[inrow-1];
 800ffbc:	e0bff217 	ldw	r2,-56(fp)
 800ffc0:	10bfffc4 	addi	r2,r2,-1
 800ffc4:	1085883a 	add	r2,r2,r2
 800ffc8:	1085883a 	add	r2,r2,r2
 800ffcc:	e0fffe17 	ldw	r3,-8(fp)
 800ffd0:	1885883a 	add	r2,r3,r2
 800ffd4:	14800017 	ldw	r18,0(r2)
		below_ptr = input_data[inrow+1];
 800ffd8:	e0bff217 	ldw	r2,-56(fp)
 800ffdc:	10800044 	addi	r2,r2,1
 800ffe0:	1085883a 	add	r2,r2,r2
 800ffe4:	1085883a 	add	r2,r2,r2
 800ffe8:	e0fffe17 	ldw	r3,-8(fp)
 800ffec:	1885883a 	add	r2,r3,r2
 800fff0:	14c00017 	ldw	r19,0(r2)

		/* Special case for first column */
		colsum = GETJSAMPLE(*above_ptr++) + GETJSAMPLE(*below_ptr++) +
 800fff4:	90800003 	ldbu	r2,0(r18)
 800fff8:	10c03fcc 	andi	r3,r2,255
 800fffc:	98800003 	ldbu	r2,0(r19)
 8010000:	10803fcc 	andi	r2,r2,255
 8010004:	1887883a 	add	r3,r3,r2
			GETJSAMPLE(*inptr);
 8010008:	80800003 	ldbu	r2,0(r16)
 801000c:	10803fcc 	andi	r2,r2,255
		inptr = input_data[inrow];
		above_ptr = input_data[inrow-1];
		below_ptr = input_data[inrow+1];

		/* Special case for first column */
		colsum = GETJSAMPLE(*above_ptr++) + GETJSAMPLE(*below_ptr++) +
 8010010:	1885883a 	add	r2,r3,r2
 8010014:	e0bff415 	stw	r2,-48(fp)
 8010018:	94800044 	addi	r18,r18,1
 801001c:	9cc00044 	addi	r19,r19,1
			GETJSAMPLE(*inptr);
		membersum = GETJSAMPLE(*inptr++);
 8010020:	80800003 	ldbu	r2,0(r16)
 8010024:	10803fcc 	andi	r2,r2,255
 8010028:	e0bff915 	stw	r2,-28(fp)
 801002c:	84000044 	addi	r16,r16,1
		nextcolsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(*below_ptr) +
 8010030:	90800003 	ldbu	r2,0(r18)
 8010034:	10c03fcc 	andi	r3,r2,255
 8010038:	98800003 	ldbu	r2,0(r19)
 801003c:	10803fcc 	andi	r2,r2,255
 8010040:	1887883a 	add	r3,r3,r2
			GETJSAMPLE(*inptr);
 8010044:	80800003 	ldbu	r2,0(r16)
 8010048:	10803fcc 	andi	r2,r2,255

		/* Special case for first column */
		colsum = GETJSAMPLE(*above_ptr++) + GETJSAMPLE(*below_ptr++) +
			GETJSAMPLE(*inptr);
		membersum = GETJSAMPLE(*inptr++);
		nextcolsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(*below_ptr) +
 801004c:	1885883a 	add	r2,r3,r2
 8010050:	e0bffa15 	stw	r2,-24(fp)
			GETJSAMPLE(*inptr);
		neighsum = colsum + (colsum - membersum) + nextcolsum;
 8010054:	e0fff417 	ldw	r3,-48(fp)
 8010058:	e0bff917 	ldw	r2,-28(fp)
 801005c:	1887c83a 	sub	r3,r3,r2
 8010060:	e0bff417 	ldw	r2,-48(fp)
 8010064:	1887883a 	add	r3,r3,r2
 8010068:	e0bffa17 	ldw	r2,-24(fp)
 801006c:	1885883a 	add	r2,r3,r2
 8010070:	e0bffb15 	stw	r2,-20(fp)
		membersum = membersum * memberscale + neighsum * neighscale;
 8010074:	e13ff917 	ldw	r4,-28(fp)
 8010078:	e17ff717 	ldw	r5,-36(fp)
 801007c:	802c2180 	call	802c218 <__mulsi3>
 8010080:	1029883a 	mov	r20,r2
 8010084:	e13ffb17 	ldw	r4,-20(fp)
 8010088:	e17ff817 	ldw	r5,-32(fp)
 801008c:	802c2180 	call	802c218 <__mulsi3>
 8010090:	a085883a 	add	r2,r20,r2
 8010094:	e0bff915 	stw	r2,-28(fp)
		*outptr++ = (JSAMPLE) ((membersum + 32768) >> 16);
 8010098:	e0fff917 	ldw	r3,-28(fp)
 801009c:	00a00014 	movui	r2,32768
 80100a0:	1885883a 	add	r2,r3,r2
 80100a4:	1005d43a 	srai	r2,r2,16
 80100a8:	88800005 	stb	r2,0(r17)
 80100ac:	8c400044 	addi	r17,r17,1
		lastcolsum = colsum; colsum = nextcolsum;
 80100b0:	e0bff417 	ldw	r2,-48(fp)
 80100b4:	e0bff515 	stw	r2,-44(fp)
 80100b8:	e0bffa17 	ldw	r2,-24(fp)
 80100bc:	e0bff415 	stw	r2,-48(fp)

		for (colctr = output_cols - 2; colctr > 0; colctr--) {
 80100c0:	e0bff617 	ldw	r2,-40(fp)
 80100c4:	10bfff84 	addi	r2,r2,-2
 80100c8:	e0bff315 	stw	r2,-52(fp)
 80100cc:	00002d06 	br	8010184 <fullsize_smooth_downsample+0x2a8>
			membersum = GETJSAMPLE(*inptr++);
 80100d0:	80800003 	ldbu	r2,0(r16)
 80100d4:	10803fcc 	andi	r2,r2,255
 80100d8:	e0bff915 	stw	r2,-28(fp)
 80100dc:	84000044 	addi	r16,r16,1
			above_ptr++; below_ptr++;
 80100e0:	94800044 	addi	r18,r18,1
 80100e4:	9cc00044 	addi	r19,r19,1
			nextcolsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(*below_ptr) +
 80100e8:	90800003 	ldbu	r2,0(r18)
 80100ec:	10c03fcc 	andi	r3,r2,255
 80100f0:	98800003 	ldbu	r2,0(r19)
 80100f4:	10803fcc 	andi	r2,r2,255
 80100f8:	1887883a 	add	r3,r3,r2
				GETJSAMPLE(*inptr);
 80100fc:	80800003 	ldbu	r2,0(r16)
 8010100:	10803fcc 	andi	r2,r2,255
		lastcolsum = colsum; colsum = nextcolsum;

		for (colctr = output_cols - 2; colctr > 0; colctr--) {
			membersum = GETJSAMPLE(*inptr++);
			above_ptr++; below_ptr++;
			nextcolsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(*below_ptr) +
 8010104:	1885883a 	add	r2,r3,r2
 8010108:	e0bffa15 	stw	r2,-24(fp)
				GETJSAMPLE(*inptr);
			neighsum = lastcolsum + (colsum - membersum) + nextcolsum;
 801010c:	e0fff417 	ldw	r3,-48(fp)
 8010110:	e0bff917 	ldw	r2,-28(fp)
 8010114:	1887c83a 	sub	r3,r3,r2
 8010118:	e0bff517 	ldw	r2,-44(fp)
 801011c:	1887883a 	add	r3,r3,r2
 8010120:	e0bffa17 	ldw	r2,-24(fp)
 8010124:	1885883a 	add	r2,r3,r2
 8010128:	e0bffb15 	stw	r2,-20(fp)
			membersum = membersum * memberscale + neighsum * neighscale;
 801012c:	e13ff917 	ldw	r4,-28(fp)
 8010130:	e17ff717 	ldw	r5,-36(fp)
 8010134:	802c2180 	call	802c218 <__mulsi3>
 8010138:	1029883a 	mov	r20,r2
 801013c:	e13ffb17 	ldw	r4,-20(fp)
 8010140:	e17ff817 	ldw	r5,-32(fp)
 8010144:	802c2180 	call	802c218 <__mulsi3>
 8010148:	a085883a 	add	r2,r20,r2
 801014c:	e0bff915 	stw	r2,-28(fp)
			*outptr++ = (JSAMPLE) ((membersum + 32768) >> 16);
 8010150:	e0fff917 	ldw	r3,-28(fp)
 8010154:	00a00014 	movui	r2,32768
 8010158:	1885883a 	add	r2,r3,r2
 801015c:	1005d43a 	srai	r2,r2,16
 8010160:	88800005 	stb	r2,0(r17)
 8010164:	8c400044 	addi	r17,r17,1
			lastcolsum = colsum; colsum = nextcolsum;
 8010168:	e0bff417 	ldw	r2,-48(fp)
 801016c:	e0bff515 	stw	r2,-44(fp)
 8010170:	e0bffa17 	ldw	r2,-24(fp)
 8010174:	e0bff415 	stw	r2,-48(fp)
		neighsum = colsum + (colsum - membersum) + nextcolsum;
		membersum = membersum * memberscale + neighsum * neighscale;
		*outptr++ = (JSAMPLE) ((membersum + 32768) >> 16);
		lastcolsum = colsum; colsum = nextcolsum;

		for (colctr = output_cols - 2; colctr > 0; colctr--) {
 8010178:	e0bff317 	ldw	r2,-52(fp)
 801017c:	10bfffc4 	addi	r2,r2,-1
 8010180:	e0bff315 	stw	r2,-52(fp)
 8010184:	e0bff317 	ldw	r2,-52(fp)
 8010188:	103fd11e 	bne	r2,zero,80100d0 <fullsize_smooth_downsample+0x1f4>
			*outptr++ = (JSAMPLE) ((membersum + 32768) >> 16);
			lastcolsum = colsum; colsum = nextcolsum;
		}

		/* Special case for last column */
		membersum = GETJSAMPLE(*inptr);
 801018c:	80800003 	ldbu	r2,0(r16)
 8010190:	10803fcc 	andi	r2,r2,255
 8010194:	e0bff915 	stw	r2,-28(fp)
		neighsum = lastcolsum + (colsum - membersum) + colsum;
 8010198:	e0fff417 	ldw	r3,-48(fp)
 801019c:	e0bff917 	ldw	r2,-28(fp)
 80101a0:	1887c83a 	sub	r3,r3,r2
 80101a4:	e0bff517 	ldw	r2,-44(fp)
 80101a8:	1887883a 	add	r3,r3,r2
 80101ac:	e0bff417 	ldw	r2,-48(fp)
 80101b0:	1885883a 	add	r2,r3,r2
 80101b4:	e0bffb15 	stw	r2,-20(fp)
		membersum = membersum * memberscale + neighsum * neighscale;
 80101b8:	e13ff917 	ldw	r4,-28(fp)
 80101bc:	e17ff717 	ldw	r5,-36(fp)
 80101c0:	802c2180 	call	802c218 <__mulsi3>
 80101c4:	1021883a 	mov	r16,r2
 80101c8:	e13ffb17 	ldw	r4,-20(fp)
 80101cc:	e17ff817 	ldw	r5,-32(fp)
 80101d0:	802c2180 	call	802c218 <__mulsi3>
 80101d4:	8085883a 	add	r2,r16,r2
 80101d8:	e0bff915 	stw	r2,-28(fp)
		*outptr = (JSAMPLE) ((membersum + 32768) >> 16);
 80101dc:	e0fff917 	ldw	r3,-28(fp)
 80101e0:	00a00014 	movui	r2,32768
 80101e4:	1885883a 	add	r2,r3,r2
 80101e8:	1005d43a 	srai	r2,r2,16
 80101ec:	88800005 	stb	r2,0(r17)
	*/

	memberscale = 65536L - cinfo->smoothing_factor * 512L; /* scaled 1-8*SF */
	neighscale = cinfo->smoothing_factor * 64; /* scaled SF */

	for (inrow = 0; inrow < cinfo->max_v_samp_factor; inrow++) {
 80101f0:	e0bff217 	ldw	r2,-56(fp)
 80101f4:	10800044 	addi	r2,r2,1
 80101f8:	e0bff215 	stw	r2,-56(fp)
 80101fc:	e0bffc17 	ldw	r2,-16(fp)
 8010200:	10803f17 	ldw	r2,252(r2)
 8010204:	e0fff217 	ldw	r3,-56(fp)
 8010208:	18bf6016 	blt	r3,r2,800ff8c <fullsize_smooth_downsample+0xb0>
		neighsum = lastcolsum + (colsum - membersum) + colsum;
		membersum = membersum * memberscale + neighsum * neighscale;
		*outptr = (JSAMPLE) ((membersum + 32768) >> 16);

	}
}
 801020c:	e037883a 	mov	sp,fp
 8010210:	dfc00617 	ldw	ra,24(sp)
 8010214:	df000517 	ldw	fp,20(sp)
 8010218:	dd000417 	ldw	r20,16(sp)
 801021c:	dcc00317 	ldw	r19,12(sp)
 8010220:	dc800217 	ldw	r18,8(sp)
 8010224:	dc400117 	ldw	r17,4(sp)
 8010228:	dc000017 	ldw	r16,0(sp)
 801022c:	dec00704 	addi	sp,sp,28
 8010230:	f800283a 	ret

08010234 <jinit_downsampler>:
* Note that we must select a routine for each component.
*/

GLOBAL(void)
	jinit_downsampler (j_compress_ptr cinfo)
{
 8010234:	defff504 	addi	sp,sp,-44
 8010238:	dfc00a15 	stw	ra,40(sp)
 801023c:	df000915 	stw	fp,36(sp)
 8010240:	df000904 	addi	fp,sp,36
 8010244:	e13fff15 	stw	r4,-4(fp)
	my_downsample_ptr downsample;
	int ci;
	jpeg_component_info * compptr;
	boolean smoothok = TRUE;
 8010248:	00800044 	movi	r2,1
 801024c:	e0bff905 	stb	r2,-28(fp)
	int h_in_group, v_in_group, h_out_group, v_out_group;

	downsample = (my_downsample_ptr)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8010250:	e0bfff17 	ldw	r2,-4(fp)
 8010254:	10800117 	ldw	r2,4(r2)
 8010258:	10800017 	ldw	r2,0(r2)
	int ci;
	jpeg_component_info * compptr;
	boolean smoothok = TRUE;
	int h_in_group, v_in_group, h_out_group, v_out_group;

	downsample = (my_downsample_ptr)
 801025c:	e13fff17 	ldw	r4,-4(fp)
 8010260:	01400044 	movi	r5,1
 8010264:	01801c04 	movi	r6,112
 8010268:	103ee83a 	callr	r2
 801026c:	e0bffa15 	stw	r2,-24(fp)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
		SIZEOF(my_downsampler));
	cinfo->downsample = (struct jpeg_downsampler *) downsample;
 8010270:	e0bfff17 	ldw	r2,-4(fp)
 8010274:	e0fffa17 	ldw	r3,-24(fp)
 8010278:	10c06215 	stw	r3,392(r2)
	downsample->pub.start_pass = start_pass_downsample;
 801027c:	e0bffa17 	ldw	r2,-24(fp)
 8010280:	00c20074 	movhi	r3,2049
 8010284:	18fc5904 	addi	r3,r3,-3740
 8010288:	10c00015 	stw	r3,0(r2)
	downsample->pub.downsample = sep_downsample;
 801028c:	e0bffa17 	ldw	r2,-24(fp)
 8010290:	00c20074 	movhi	r3,2049
 8010294:	18fc8f04 	addi	r3,r3,-3524
 8010298:	10c00115 	stw	r3,4(r2)
	downsample->pub.need_context_rows = FALSE;
 801029c:	e0bffa17 	ldw	r2,-24(fp)
 80102a0:	10000205 	stb	zero,8(r2)

	if (cinfo->CCIR601_sampling)
 80102a4:	e0bfff17 	ldw	r2,-4(fp)
 80102a8:	108033c3 	ldbu	r2,207(r2)
 80102ac:	10803fcc 	andi	r2,r2,255
 80102b0:	10000926 	beq	r2,zero,80102d8 <jinit_downsampler+0xa4>
		ERREXIT(cinfo, JERR_CCIR601_NOTIMPL);
 80102b4:	e0bfff17 	ldw	r2,-4(fp)
 80102b8:	10800017 	ldw	r2,0(r2)
 80102bc:	00c00684 	movi	r3,26
 80102c0:	10c00515 	stw	r3,20(r2)
 80102c4:	e0bfff17 	ldw	r2,-4(fp)
 80102c8:	10800017 	ldw	r2,0(r2)
 80102cc:	10800017 	ldw	r2,0(r2)
 80102d0:	e13fff17 	ldw	r4,-4(fp)
 80102d4:	103ee83a 	callr	r2

	/* Verify we can handle the sampling factors, and set up method pointers */
	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 80102d8:	e03ff715 	stw	zero,-36(fp)
 80102dc:	e0bfff17 	ldw	r2,-4(fp)
 80102e0:	10801417 	ldw	r2,80(r2)
 80102e4:	e0bff815 	stw	r2,-32(fp)
 80102e8:	0000b706 	br	80105c8 <jinit_downsampler+0x394>
		ci++, compptr++) {
			/* Compute size of an "output group" for DCT scaling.  This many samples
			* are to be converted from max_h_samp_factor * max_v_samp_factor pixels.
			*/
			h_out_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 80102ec:	e0bff817 	ldw	r2,-32(fp)
 80102f0:	10c00217 	ldw	r3,8(r2)
 80102f4:	e0bff817 	ldw	r2,-32(fp)
 80102f8:	10800917 	ldw	r2,36(r2)
 80102fc:	1809883a 	mov	r4,r3
 8010300:	100b883a 	mov	r5,r2
 8010304:	802c2180 	call	802c218 <__mulsi3>
 8010308:	1007883a 	mov	r3,r2
				cinfo->min_DCT_h_scaled_size;
 801030c:	e0bfff17 	ldw	r2,-4(fp)
 8010310:	10804017 	ldw	r2,256(r2)
	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
		ci++, compptr++) {
			/* Compute size of an "output group" for DCT scaling.  This many samples
			* are to be converted from max_h_samp_factor * max_v_samp_factor pixels.
			*/
			h_out_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 8010314:	1809883a 	mov	r4,r3
 8010318:	100b883a 	mov	r5,r2
 801031c:	802c15c0 	call	802c15c <__divsi3>
 8010320:	e0bffb15 	stw	r2,-20(fp)
				cinfo->min_DCT_h_scaled_size;
			v_out_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 8010324:	e0bff817 	ldw	r2,-32(fp)
 8010328:	10c00317 	ldw	r3,12(r2)
 801032c:	e0bff817 	ldw	r2,-32(fp)
 8010330:	10800a17 	ldw	r2,40(r2)
 8010334:	1809883a 	mov	r4,r3
 8010338:	100b883a 	mov	r5,r2
 801033c:	802c2180 	call	802c218 <__mulsi3>
 8010340:	1007883a 	mov	r3,r2
				cinfo->min_DCT_v_scaled_size;
 8010344:	e0bfff17 	ldw	r2,-4(fp)
 8010348:	10804117 	ldw	r2,260(r2)
			/* Compute size of an "output group" for DCT scaling.  This many samples
			* are to be converted from max_h_samp_factor * max_v_samp_factor pixels.
			*/
			h_out_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
				cinfo->min_DCT_h_scaled_size;
			v_out_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 801034c:	1809883a 	mov	r4,r3
 8010350:	100b883a 	mov	r5,r2
 8010354:	802c15c0 	call	802c15c <__divsi3>
 8010358:	e0bffc15 	stw	r2,-16(fp)
				cinfo->min_DCT_v_scaled_size;
			h_in_group = cinfo->max_h_samp_factor;
 801035c:	e0bfff17 	ldw	r2,-4(fp)
 8010360:	10803e17 	ldw	r2,248(r2)
 8010364:	e0bffd15 	stw	r2,-12(fp)
			v_in_group = cinfo->max_v_samp_factor;
 8010368:	e0bfff17 	ldw	r2,-4(fp)
 801036c:	10803f17 	ldw	r2,252(r2)
 8010370:	e0bffe15 	stw	r2,-8(fp)
			downsample->rowgroup_height[ci] = v_out_group; /* save for use later */
 8010374:	e0fffa17 	ldw	r3,-24(fp)
 8010378:	e0bff717 	ldw	r2,-36(fp)
 801037c:	10800344 	addi	r2,r2,13
 8010380:	1085883a 	add	r2,r2,r2
 8010384:	1085883a 	add	r2,r2,r2
 8010388:	1885883a 	add	r2,r3,r2
 801038c:	e0fffc17 	ldw	r3,-16(fp)
 8010390:	10c00015 	stw	r3,0(r2)
			if (h_in_group == h_out_group && v_in_group == v_out_group) {
 8010394:	e0fffd17 	ldw	r3,-12(fp)
 8010398:	e0bffb17 	ldw	r2,-20(fp)
 801039c:	18801d1e 	bne	r3,r2,8010414 <jinit_downsampler+0x1e0>
 80103a0:	e0fffe17 	ldw	r3,-8(fp)
 80103a4:	e0bffc17 	ldw	r2,-16(fp)
 80103a8:	18801a1e 	bne	r3,r2,8010414 <jinit_downsampler+0x1e0>
#ifdef INPUT_SMOOTHING_SUPPORTED
				if (cinfo->smoothing_factor) {
 80103ac:	e0bfff17 	ldw	r2,-4(fp)
 80103b0:	10803517 	ldw	r2,212(r2)
 80103b4:	10000d26 	beq	r2,zero,80103ec <jinit_downsampler+0x1b8>
					downsample->methods[ci] = fullsize_smooth_downsample;
 80103b8:	e0fffa17 	ldw	r3,-24(fp)
 80103bc:	e0bff717 	ldw	r2,-36(fp)
 80103c0:	108000c4 	addi	r2,r2,3
 80103c4:	1085883a 	add	r2,r2,r2
 80103c8:	1085883a 	add	r2,r2,r2
 80103cc:	1885883a 	add	r2,r3,r2
 80103d0:	00c20074 	movhi	r3,2049
 80103d4:	18ffb704 	addi	r3,r3,-292
 80103d8:	10c00015 	stw	r3,0(r2)
					downsample->pub.need_context_rows = TRUE;
 80103dc:	e0bffa17 	ldw	r2,-24(fp)
 80103e0:	00c00044 	movi	r3,1
 80103e4:	10c00205 	stb	r3,8(r2)
			h_in_group = cinfo->max_h_samp_factor;
			v_in_group = cinfo->max_v_samp_factor;
			downsample->rowgroup_height[ci] = v_out_group; /* save for use later */
			if (h_in_group == h_out_group && v_in_group == v_out_group) {
#ifdef INPUT_SMOOTHING_SUPPORTED
				if (cinfo->smoothing_factor) {
 80103e8:	00007106 	br	80105b0 <jinit_downsampler+0x37c>
					downsample->methods[ci] = fullsize_smooth_downsample;
					downsample->pub.need_context_rows = TRUE;
				} else
#endif
					downsample->methods[ci] = fullsize_downsample;
 80103ec:	e0fffa17 	ldw	r3,-24(fp)
 80103f0:	e0bff717 	ldw	r2,-36(fp)
 80103f4:	108000c4 	addi	r2,r2,3
 80103f8:	1085883a 	add	r2,r2,r2
 80103fc:	1085883a 	add	r2,r2,r2
 8010400:	1885883a 	add	r2,r3,r2
 8010404:	00c20074 	movhi	r3,2049
 8010408:	18fd7104 	addi	r3,r3,-2620
 801040c:	10c00015 	stw	r3,0(r2)
			h_in_group = cinfo->max_h_samp_factor;
			v_in_group = cinfo->max_v_samp_factor;
			downsample->rowgroup_height[ci] = v_out_group; /* save for use later */
			if (h_in_group == h_out_group && v_in_group == v_out_group) {
#ifdef INPUT_SMOOTHING_SUPPORTED
				if (cinfo->smoothing_factor) {
 8010410:	00006706 	br	80105b0 <jinit_downsampler+0x37c>
					downsample->methods[ci] = fullsize_smooth_downsample;
					downsample->pub.need_context_rows = TRUE;
				} else
#endif
					downsample->methods[ci] = fullsize_downsample;
			} else if (h_in_group == h_out_group * 2 &&
 8010414:	e0bffb17 	ldw	r2,-20(fp)
 8010418:	1085883a 	add	r2,r2,r2
 801041c:	1007883a 	mov	r3,r2
 8010420:	e0bffd17 	ldw	r2,-12(fp)
 8010424:	18800e1e 	bne	r3,r2,8010460 <jinit_downsampler+0x22c>
 8010428:	e0fffe17 	ldw	r3,-8(fp)
 801042c:	e0bffc17 	ldw	r2,-16(fp)
 8010430:	18800b1e 	bne	r3,r2,8010460 <jinit_downsampler+0x22c>
				v_in_group == v_out_group) {
					smoothok = FALSE;
 8010434:	e03ff905 	stb	zero,-28(fp)
					downsample->methods[ci] = h2v1_downsample;
 8010438:	e0fffa17 	ldw	r3,-24(fp)
 801043c:	e0bff717 	ldw	r2,-36(fp)
 8010440:	108000c4 	addi	r2,r2,3
 8010444:	1085883a 	add	r2,r2,r2
 8010448:	1085883a 	add	r2,r2,r2
 801044c:	1885883a 	add	r2,r3,r2
 8010450:	00c20074 	movhi	r3,2049
 8010454:	18fd9d04 	addi	r3,r3,-2444
 8010458:	10c00015 	stw	r3,0(r2)
 801045c:	00005406 	br	80105b0 <jinit_downsampler+0x37c>
			} else if (h_in_group == h_out_group * 2 &&
 8010460:	e0bffb17 	ldw	r2,-20(fp)
 8010464:	1085883a 	add	r2,r2,r2
 8010468:	1007883a 	mov	r3,r2
 801046c:	e0bffd17 	ldw	r2,-12(fp)
 8010470:	18801f1e 	bne	r3,r2,80104f0 <jinit_downsampler+0x2bc>
				v_in_group == v_out_group * 2) {
 8010474:	e0bffc17 	ldw	r2,-16(fp)
 8010478:	1085883a 	add	r2,r2,r2
 801047c:	1007883a 	mov	r3,r2
					downsample->methods[ci] = fullsize_downsample;
			} else if (h_in_group == h_out_group * 2 &&
				v_in_group == v_out_group) {
					smoothok = FALSE;
					downsample->methods[ci] = h2v1_downsample;
			} else if (h_in_group == h_out_group * 2 &&
 8010480:	e0bffe17 	ldw	r2,-8(fp)
 8010484:	18801a1e 	bne	r3,r2,80104f0 <jinit_downsampler+0x2bc>
				v_in_group == v_out_group * 2) {
#ifdef INPUT_SMOOTHING_SUPPORTED
					if (cinfo->smoothing_factor) {
 8010488:	e0bfff17 	ldw	r2,-4(fp)
 801048c:	10803517 	ldw	r2,212(r2)
 8010490:	10000d26 	beq	r2,zero,80104c8 <jinit_downsampler+0x294>
						downsample->methods[ci] = h2v2_smooth_downsample;
 8010494:	e0fffa17 	ldw	r3,-24(fp)
 8010498:	e0bff717 	ldw	r2,-36(fp)
 801049c:	108000c4 	addi	r2,r2,3
 80104a0:	1085883a 	add	r2,r2,r2
 80104a4:	1085883a 	add	r2,r2,r2
 80104a8:	1885883a 	add	r2,r3,r2
 80104ac:	00c20074 	movhi	r3,2049
 80104b0:	18fe5104 	addi	r3,r3,-1724
 80104b4:	10c00015 	stw	r3,0(r2)
						downsample->pub.need_context_rows = TRUE;
 80104b8:	e0bffa17 	ldw	r2,-24(fp)
 80104bc:	00c00044 	movi	r3,1
 80104c0:	10c00205 	stb	r3,8(r2)
					smoothok = FALSE;
					downsample->methods[ci] = h2v1_downsample;
			} else if (h_in_group == h_out_group * 2 &&
				v_in_group == v_out_group * 2) {
#ifdef INPUT_SMOOTHING_SUPPORTED
					if (cinfo->smoothing_factor) {
 80104c4:	00003a06 	br	80105b0 <jinit_downsampler+0x37c>
						downsample->methods[ci] = h2v2_smooth_downsample;
						downsample->pub.need_context_rows = TRUE;
					} else
#endif
						downsample->methods[ci] = h2v2_downsample;
 80104c8:	e0fffa17 	ldw	r3,-24(fp)
 80104cc:	e0bff717 	ldw	r2,-36(fp)
 80104d0:	108000c4 	addi	r2,r2,3
 80104d4:	1085883a 	add	r2,r2,r2
 80104d8:	1085883a 	add	r2,r2,r2
 80104dc:	1885883a 	add	r2,r3,r2
 80104e0:	00c20074 	movhi	r3,2049
 80104e4:	18fdec04 	addi	r3,r3,-2128
 80104e8:	10c00015 	stw	r3,0(r2)
					smoothok = FALSE;
					downsample->methods[ci] = h2v1_downsample;
			} else if (h_in_group == h_out_group * 2 &&
				v_in_group == v_out_group * 2) {
#ifdef INPUT_SMOOTHING_SUPPORTED
					if (cinfo->smoothing_factor) {
 80104ec:	00003006 	br	80105b0 <jinit_downsampler+0x37c>
						downsample->methods[ci] = h2v2_smooth_downsample;
						downsample->pub.need_context_rows = TRUE;
					} else
#endif
						downsample->methods[ci] = h2v2_downsample;
			} else if ((h_in_group % h_out_group) == 0 &&
 80104f0:	e0bffd17 	ldw	r2,-12(fp)
 80104f4:	1009883a 	mov	r4,r2
 80104f8:	e17ffb17 	ldw	r5,-20(fp)
 80104fc:	802c1ac0 	call	802c1ac <__modsi3>
 8010500:	1000221e 	bne	r2,zero,801058c <jinit_downsampler+0x358>
				(v_in_group % v_out_group) == 0) {
 8010504:	e0bffe17 	ldw	r2,-8(fp)
 8010508:	1009883a 	mov	r4,r2
 801050c:	e17ffc17 	ldw	r5,-16(fp)
 8010510:	802c1ac0 	call	802c1ac <__modsi3>
						downsample->methods[ci] = h2v2_smooth_downsample;
						downsample->pub.need_context_rows = TRUE;
					} else
#endif
						downsample->methods[ci] = h2v2_downsample;
			} else if ((h_in_group % h_out_group) == 0 &&
 8010514:	10001d1e 	bne	r2,zero,801058c <jinit_downsampler+0x358>
				(v_in_group % v_out_group) == 0) {
					smoothok = FALSE;
 8010518:	e03ff905 	stb	zero,-28(fp)
					downsample->methods[ci] = int_downsample;
 801051c:	e0fffa17 	ldw	r3,-24(fp)
 8010520:	e0bff717 	ldw	r2,-36(fp)
 8010524:	108000c4 	addi	r2,r2,3
 8010528:	1085883a 	add	r2,r2,r2
 801052c:	1085883a 	add	r2,r2,r2
 8010530:	1885883a 	add	r2,r3,r2
 8010534:	00c20074 	movhi	r3,2049
 8010538:	18fcdb04 	addi	r3,r3,-3220
 801053c:	10c00015 	stw	r3,0(r2)
					downsample->h_expand[ci] = (UINT8) (h_in_group / h_out_group);
 8010540:	e13ffd17 	ldw	r4,-12(fp)
 8010544:	e17ffb17 	ldw	r5,-20(fp)
 8010548:	802c15c0 	call	802c15c <__divsi3>
 801054c:	1007883a 	mov	r3,r2
 8010550:	e13ffa17 	ldw	r4,-24(fp)
 8010554:	e0bff717 	ldw	r2,-36(fp)
 8010558:	2085883a 	add	r2,r4,r2
 801055c:	10801704 	addi	r2,r2,92
 8010560:	10c00005 	stb	r3,0(r2)
					downsample->v_expand[ci] = (UINT8) (v_in_group / v_out_group);
 8010564:	e13ffe17 	ldw	r4,-8(fp)
 8010568:	e17ffc17 	ldw	r5,-16(fp)
 801056c:	802c15c0 	call	802c15c <__divsi3>
 8010570:	1007883a 	mov	r3,r2
 8010574:	e13ffa17 	ldw	r4,-24(fp)
 8010578:	e0bff717 	ldw	r2,-36(fp)
 801057c:	2085883a 	add	r2,r4,r2
 8010580:	10801904 	addi	r2,r2,100
 8010584:	10c00085 	stb	r3,2(r2)
 8010588:	00000906 	br	80105b0 <jinit_downsampler+0x37c>
			} else
				ERREXIT(cinfo, JERR_FRACT_SAMPLE_NOTIMPL);
 801058c:	e0bfff17 	ldw	r2,-4(fp)
 8010590:	10800017 	ldw	r2,0(r2)
 8010594:	00c009c4 	movi	r3,39
 8010598:	10c00515 	stw	r3,20(r2)
 801059c:	e0bfff17 	ldw	r2,-4(fp)
 80105a0:	10800017 	ldw	r2,0(r2)
 80105a4:	10800017 	ldw	r2,0(r2)
 80105a8:	e13fff17 	ldw	r4,-4(fp)
 80105ac:	103ee83a 	callr	r2
	if (cinfo->CCIR601_sampling)
		ERREXIT(cinfo, JERR_CCIR601_NOTIMPL);

	/* Verify we can handle the sampling factors, and set up method pointers */
	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
		ci++, compptr++) {
 80105b0:	e0bff717 	ldw	r2,-36(fp)
 80105b4:	10800044 	addi	r2,r2,1
 80105b8:	e0bff715 	stw	r2,-36(fp)
 80105bc:	e0bff817 	ldw	r2,-32(fp)
 80105c0:	10801604 	addi	r2,r2,88
 80105c4:	e0bff815 	stw	r2,-32(fp)

	if (cinfo->CCIR601_sampling)
		ERREXIT(cinfo, JERR_CCIR601_NOTIMPL);

	/* Verify we can handle the sampling factors, and set up method pointers */
	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 80105c8:	e0bfff17 	ldw	r2,-4(fp)
 80105cc:	10801217 	ldw	r2,72(r2)
 80105d0:	e0fff717 	ldw	r3,-36(fp)
 80105d4:	18bf4516 	blt	r3,r2,80102ec <jinit_downsampler+0xb8>
			} else
				ERREXIT(cinfo, JERR_FRACT_SAMPLE_NOTIMPL);
	}

#ifdef INPUT_SMOOTHING_SUPPORTED
	if (cinfo->smoothing_factor && !smoothok)
 80105d8:	e0bfff17 	ldw	r2,-4(fp)
 80105dc:	10803517 	ldw	r2,212(r2)
 80105e0:	10000c26 	beq	r2,zero,8010614 <jinit_downsampler+0x3e0>
 80105e4:	e0bff903 	ldbu	r2,-28(fp)
 80105e8:	10000a1e 	bne	r2,zero,8010614 <jinit_downsampler+0x3e0>
		TRACEMS(cinfo, 0, JTRC_SMOOTH_NOTIMPL);
 80105ec:	e0bfff17 	ldw	r2,-4(fp)
 80105f0:	10800017 	ldw	r2,0(r2)
 80105f4:	00c01944 	movi	r3,101
 80105f8:	10c00515 	stw	r3,20(r2)
 80105fc:	e0bfff17 	ldw	r2,-4(fp)
 8010600:	10800017 	ldw	r2,0(r2)
 8010604:	10800117 	ldw	r2,4(r2)
 8010608:	e13fff17 	ldw	r4,-4(fp)
 801060c:	000b883a 	mov	r5,zero
 8010610:	103ee83a 	callr	r2
#endif
}
 8010614:	e037883a 	mov	sp,fp
 8010618:	dfc00117 	ldw	ra,4(sp)
 801061c:	df000017 	ldw	fp,0(sp)
 8010620:	dec00204 	addi	sp,sp,8
 8010624:	f800283a 	ret

08010628 <jpeg_write_coefficients>:
* typically will be realized during this routine and filled afterwards.
*/

GLOBAL(void)
	jpeg_write_coefficients (j_compress_ptr cinfo, jvirt_barray_ptr * coef_arrays)
{
 8010628:	defffc04 	addi	sp,sp,-16
 801062c:	dfc00315 	stw	ra,12(sp)
 8010630:	df000215 	stw	fp,8(sp)
 8010634:	df000204 	addi	fp,sp,8
 8010638:	e13ffe15 	stw	r4,-8(fp)
 801063c:	e17fff15 	stw	r5,-4(fp)
	if (cinfo->global_state != CSTATE_START)
 8010640:	e0bffe17 	ldw	r2,-8(fp)
 8010644:	10800517 	ldw	r2,20(r2)
 8010648:	10801920 	cmpeqi	r2,r2,100
 801064c:	10000e1e 	bne	r2,zero,8010688 <jpeg_write_coefficients+0x60>
		ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8010650:	e0bffe17 	ldw	r2,-8(fp)
 8010654:	10800017 	ldw	r2,0(r2)
 8010658:	00c00544 	movi	r3,21
 801065c:	10c00515 	stw	r3,20(r2)
 8010660:	e0bffe17 	ldw	r2,-8(fp)
 8010664:	10800017 	ldw	r2,0(r2)
 8010668:	e0fffe17 	ldw	r3,-8(fp)
 801066c:	18c00517 	ldw	r3,20(r3)
 8010670:	10c00615 	stw	r3,24(r2)
 8010674:	e0bffe17 	ldw	r2,-8(fp)
 8010678:	10800017 	ldw	r2,0(r2)
 801067c:	10800017 	ldw	r2,0(r2)
 8010680:	e13ffe17 	ldw	r4,-8(fp)
 8010684:	103ee83a 	callr	r2
	/* Mark all tables to be written */
	jpeg_suppress_tables(cinfo, FALSE);
 8010688:	e13ffe17 	ldw	r4,-8(fp)
 801068c:	000b883a 	mov	r5,zero
 8010690:	8000c400 	call	8000c40 <jpeg_suppress_tables>
	/* (Re)initialize error mgr and destination modules */
	(*cinfo->err->reset_error_mgr) ((j_common_ptr) cinfo);
 8010694:	e0bffe17 	ldw	r2,-8(fp)
 8010698:	10800017 	ldw	r2,0(r2)
 801069c:	10800417 	ldw	r2,16(r2)
 80106a0:	e13ffe17 	ldw	r4,-8(fp)
 80106a4:	103ee83a 	callr	r2
	(*cinfo->dest->init_destination) (cinfo);
 80106a8:	e0bffe17 	ldw	r2,-8(fp)
 80106ac:	10800617 	ldw	r2,24(r2)
 80106b0:	10800217 	ldw	r2,8(r2)
 80106b4:	e13ffe17 	ldw	r4,-8(fp)
 80106b8:	103ee83a 	callr	r2
	/* Perform master selection of active modules */
	transencode_master_selection(cinfo, coef_arrays);
 80106bc:	e13ffe17 	ldw	r4,-8(fp)
 80106c0:	e17fff17 	ldw	r5,-4(fp)
 80106c4:	8010b880 	call	8010b88 <transencode_master_selection>
	/* Wait for jpeg_finish_compress() call */
	cinfo->next_scanline = 0;	/* so jpeg_write_marker works */
 80106c8:	e0bffe17 	ldw	r2,-8(fp)
 80106cc:	10003c15 	stw	zero,240(r2)
	cinfo->global_state = CSTATE_WRCOEFS;
 80106d0:	e0bffe17 	ldw	r2,-8(fp)
 80106d4:	00c019c4 	movi	r3,103
 80106d8:	10c00515 	stw	r3,20(r2)
}
 80106dc:	e037883a 	mov	sp,fp
 80106e0:	dfc00117 	ldw	ra,4(sp)
 80106e4:	df000017 	ldw	fp,0(sp)
 80106e8:	dec00204 	addi	sp,sp,8
 80106ec:	f800283a 	ret

080106f0 <jpeg_copy_critical_parameters>:
*/

GLOBAL(void)
	jpeg_copy_critical_parameters (j_decompress_ptr srcinfo,
	j_compress_ptr dstinfo)
{
 80106f0:	defff404 	addi	sp,sp,-48
 80106f4:	dfc00b15 	stw	ra,44(sp)
 80106f8:	df000a15 	stw	fp,40(sp)
 80106fc:	df000a04 	addi	fp,sp,40
 8010700:	e13ffe15 	stw	r4,-8(fp)
 8010704:	e17fff15 	stw	r5,-4(fp)
	jpeg_component_info *incomp, *outcomp;
	JQUANT_TBL *c_quant, *slot_quant;
	int tblno, ci, coefi;

	/* Safety check to ensure start_compress not called yet. */
	if (dstinfo->global_state != CSTATE_START)
 8010708:	e0bfff17 	ldw	r2,-4(fp)
 801070c:	10800517 	ldw	r2,20(r2)
 8010710:	10801920 	cmpeqi	r2,r2,100
 8010714:	10000e1e 	bne	r2,zero,8010750 <jpeg_copy_critical_parameters+0x60>
		ERREXIT1(dstinfo, JERR_BAD_STATE, dstinfo->global_state);
 8010718:	e0bfff17 	ldw	r2,-4(fp)
 801071c:	10800017 	ldw	r2,0(r2)
 8010720:	00c00544 	movi	r3,21
 8010724:	10c00515 	stw	r3,20(r2)
 8010728:	e0bfff17 	ldw	r2,-4(fp)
 801072c:	10800017 	ldw	r2,0(r2)
 8010730:	e0ffff17 	ldw	r3,-4(fp)
 8010734:	18c00517 	ldw	r3,20(r3)
 8010738:	10c00615 	stw	r3,24(r2)
 801073c:	e0bfff17 	ldw	r2,-4(fp)
 8010740:	10800017 	ldw	r2,0(r2)
 8010744:	10800017 	ldw	r2,0(r2)
 8010748:	e13fff17 	ldw	r4,-4(fp)
 801074c:	103ee83a 	callr	r2
	/* Copy fundamental image dimensions */
	dstinfo->image_width = srcinfo->image_width;
 8010750:	e0bffe17 	ldw	r2,-8(fp)
 8010754:	10c00717 	ldw	r3,28(r2)
 8010758:	e0bfff17 	ldw	r2,-4(fp)
 801075c:	10c00715 	stw	r3,28(r2)
	dstinfo->image_height = srcinfo->image_height;
 8010760:	e0bffe17 	ldw	r2,-8(fp)
 8010764:	10c00817 	ldw	r3,32(r2)
 8010768:	e0bfff17 	ldw	r2,-4(fp)
 801076c:	10c00815 	stw	r3,32(r2)
	dstinfo->input_components = srcinfo->num_components;
 8010770:	e0bffe17 	ldw	r2,-8(fp)
 8010774:	10c00917 	ldw	r3,36(r2)
 8010778:	e0bfff17 	ldw	r2,-4(fp)
 801077c:	10c00915 	stw	r3,36(r2)
	dstinfo->in_color_space = srcinfo->jpeg_color_space;
 8010780:	e0bffe17 	ldw	r2,-8(fp)
 8010784:	10c00a17 	ldw	r3,40(r2)
 8010788:	e0bfff17 	ldw	r2,-4(fp)
 801078c:	10c00a15 	stw	r3,40(r2)
	dstinfo->jpeg_width = srcinfo->output_width;
 8010790:	e0bffe17 	ldw	r2,-8(fp)
 8010794:	10c01717 	ldw	r3,92(r2)
 8010798:	e0bfff17 	ldw	r2,-4(fp)
 801079c:	10c00f15 	stw	r3,60(r2)
	dstinfo->jpeg_height = srcinfo->output_height;
 80107a0:	e0bffe17 	ldw	r2,-8(fp)
 80107a4:	10c01817 	ldw	r3,96(r2)
 80107a8:	e0bfff17 	ldw	r2,-4(fp)
 80107ac:	10c01015 	stw	r3,64(r2)
	dstinfo->min_DCT_h_scaled_size = srcinfo->min_DCT_h_scaled_size;
 80107b0:	e0bffe17 	ldw	r2,-8(fp)
 80107b4:	10c04617 	ldw	r3,280(r2)
 80107b8:	e0bfff17 	ldw	r2,-4(fp)
 80107bc:	10c04015 	stw	r3,256(r2)
	dstinfo->min_DCT_v_scaled_size = srcinfo->min_DCT_v_scaled_size;
 80107c0:	e0bffe17 	ldw	r2,-8(fp)
 80107c4:	10c04717 	ldw	r3,284(r2)
 80107c8:	e0bfff17 	ldw	r2,-4(fp)
 80107cc:	10c04115 	stw	r3,260(r2)
	/* Initialize all parameters to default values */
	jpeg_set_defaults(dstinfo);
 80107d0:	e13fff17 	ldw	r4,-4(fp)
 80107d4:	800d5880 	call	800d588 <jpeg_set_defaults>
	/* jpeg_set_defaults may choose wrong colorspace, eg YCbCr if input is RGB.
	* Fix it to get the right header markers for the image colorspace.
	*/
	jpeg_set_colorspace(dstinfo, srcinfo->jpeg_color_space);
 80107d8:	e0bffe17 	ldw	r2,-8(fp)
 80107dc:	10800a17 	ldw	r2,40(r2)
 80107e0:	e13fff17 	ldw	r4,-4(fp)
 80107e4:	100b883a 	mov	r5,r2
 80107e8:	800d8740 	call	800d874 <jpeg_set_colorspace>
	dstinfo->data_precision = srcinfo->data_precision;
 80107ec:	e0bffe17 	ldw	r2,-8(fp)
 80107f0:	10c03017 	ldw	r3,192(r2)
 80107f4:	e0bfff17 	ldw	r2,-4(fp)
 80107f8:	10c01115 	stw	r3,68(r2)
	dstinfo->CCIR601_sampling = srcinfo->CCIR601_sampling;
 80107fc:	e0bffe17 	ldw	r2,-8(fp)
 8010800:	10c04283 	ldbu	r3,266(r2)
 8010804:	e0bfff17 	ldw	r2,-4(fp)
 8010808:	10c033c5 	stb	r3,207(r2)
	/* Copy the source's quantization tables. */
	for (tblno = 0; tblno < NUM_QUANT_TBLS; tblno++) {
 801080c:	e03ff815 	stw	zero,-32(fp)
 8010810:	00002a06 	br	80108bc <jpeg_copy_critical_parameters+0x1cc>
		if (srcinfo->quant_tbl_ptrs[tblno] != NULL) {
 8010814:	e0fffe17 	ldw	r3,-8(fp)
 8010818:	e0bff817 	ldw	r2,-32(fp)
 801081c:	10800904 	addi	r2,r2,36
 8010820:	1085883a 	add	r2,r2,r2
 8010824:	1085883a 	add	r2,r2,r2
 8010828:	1885883a 	add	r2,r3,r2
 801082c:	10800017 	ldw	r2,0(r2)
 8010830:	10001f26 	beq	r2,zero,80108b0 <jpeg_copy_critical_parameters+0x1c0>
			qtblptr = & dstinfo->quant_tbl_ptrs[tblno];
 8010834:	e0bff817 	ldw	r2,-32(fp)
 8010838:	10800544 	addi	r2,r2,21
 801083c:	1085883a 	add	r2,r2,r2
 8010840:	1085883a 	add	r2,r2,r2
 8010844:	e0ffff17 	ldw	r3,-4(fp)
 8010848:	1885883a 	add	r2,r3,r2
 801084c:	e0bffb15 	stw	r2,-20(fp)
			if (*qtblptr == NULL)
 8010850:	e0bffb17 	ldw	r2,-20(fp)
 8010854:	10800017 	ldw	r2,0(r2)
 8010858:	1000041e 	bne	r2,zero,801086c <jpeg_copy_critical_parameters+0x17c>
				*qtblptr = jpeg_alloc_quant_table((j_common_ptr) dstinfo);
 801085c:	e13fff17 	ldw	r4,-4(fp)
 8010860:	800cf800 	call	800cf80 <jpeg_alloc_quant_table>
 8010864:	e0fffb17 	ldw	r3,-20(fp)
 8010868:	18800015 	stw	r2,0(r3)
			MEMCOPY((*qtblptr)->quantval,
 801086c:	e0bffb17 	ldw	r2,-20(fp)
 8010870:	10800017 	ldw	r2,0(r2)
 8010874:	1007883a 	mov	r3,r2
 8010878:	e13ffe17 	ldw	r4,-8(fp)
 801087c:	e0bff817 	ldw	r2,-32(fp)
 8010880:	10800904 	addi	r2,r2,36
 8010884:	1085883a 	add	r2,r2,r2
 8010888:	1085883a 	add	r2,r2,r2
 801088c:	2085883a 	add	r2,r4,r2
 8010890:	10800017 	ldw	r2,0(r2)
 8010894:	1809883a 	mov	r4,r3
 8010898:	100b883a 	mov	r5,r2
 801089c:	01802004 	movi	r6,128
 80108a0:	802ebb00 	call	802ebb0 <memcpy>
				srcinfo->quant_tbl_ptrs[tblno]->quantval,
				SIZEOF((*qtblptr)->quantval));
			(*qtblptr)->sent_table = FALSE;
 80108a4:	e0bffb17 	ldw	r2,-20(fp)
 80108a8:	10800017 	ldw	r2,0(r2)
 80108ac:	10002005 	stb	zero,128(r2)
	*/
	jpeg_set_colorspace(dstinfo, srcinfo->jpeg_color_space);
	dstinfo->data_precision = srcinfo->data_precision;
	dstinfo->CCIR601_sampling = srcinfo->CCIR601_sampling;
	/* Copy the source's quantization tables. */
	for (tblno = 0; tblno < NUM_QUANT_TBLS; tblno++) {
 80108b0:	e0bff817 	ldw	r2,-32(fp)
 80108b4:	10800044 	addi	r2,r2,1
 80108b8:	e0bff815 	stw	r2,-32(fp)
 80108bc:	e0bff817 	ldw	r2,-32(fp)
 80108c0:	10800110 	cmplti	r2,r2,4
 80108c4:	103fd31e 	bne	r2,zero,8010814 <jpeg_copy_critical_parameters+0x124>
		}
	}
	/* Copy the source's per-component info.
	* Note we assume jpeg_set_defaults has allocated the dest comp_info array.
	*/
	dstinfo->num_components = srcinfo->num_components;
 80108c8:	e0bffe17 	ldw	r2,-8(fp)
 80108cc:	10c00917 	ldw	r3,36(r2)
 80108d0:	e0bfff17 	ldw	r2,-4(fp)
 80108d4:	10c01215 	stw	r3,72(r2)
	if (dstinfo->num_components < 1 || dstinfo->num_components > MAX_COMPONENTS)
 80108d8:	e0bfff17 	ldw	r2,-4(fp)
 80108dc:	10801217 	ldw	r2,72(r2)
 80108e0:	0080040e 	bge	zero,r2,80108f4 <jpeg_copy_critical_parameters+0x204>
 80108e4:	e0bfff17 	ldw	r2,-4(fp)
 80108e8:	10801217 	ldw	r2,72(r2)
 80108ec:	108002d0 	cmplti	r2,r2,11
 80108f0:	1000121e 	bne	r2,zero,801093c <jpeg_copy_critical_parameters+0x24c>
		ERREXIT2(dstinfo, JERR_COMPONENT_COUNT, dstinfo->num_components,
 80108f4:	e0bfff17 	ldw	r2,-4(fp)
 80108f8:	10800017 	ldw	r2,0(r2)
 80108fc:	00c006c4 	movi	r3,27
 8010900:	10c00515 	stw	r3,20(r2)
 8010904:	e0bfff17 	ldw	r2,-4(fp)
 8010908:	10800017 	ldw	r2,0(r2)
 801090c:	e0ffff17 	ldw	r3,-4(fp)
 8010910:	18c01217 	ldw	r3,72(r3)
 8010914:	10c00615 	stw	r3,24(r2)
 8010918:	e0bfff17 	ldw	r2,-4(fp)
 801091c:	10800017 	ldw	r2,0(r2)
 8010920:	00c00284 	movi	r3,10
 8010924:	10c00715 	stw	r3,28(r2)
 8010928:	e0bfff17 	ldw	r2,-4(fp)
 801092c:	10800017 	ldw	r2,0(r2)
 8010930:	10800017 	ldw	r2,0(r2)
 8010934:	e13fff17 	ldw	r4,-4(fp)
 8010938:	103ee83a 	callr	r2
		MAX_COMPONENTS);
	for (ci = 0, incomp = srcinfo->comp_info, outcomp = dstinfo->comp_info;
 801093c:	e03ff915 	stw	zero,-28(fp)
 8010940:	e0bffe17 	ldw	r2,-8(fp)
 8010944:	10803117 	ldw	r2,196(r2)
 8010948:	e0bff615 	stw	r2,-40(fp)
 801094c:	e0bfff17 	ldw	r2,-4(fp)
 8010950:	10801417 	ldw	r2,80(r2)
 8010954:	e0bff715 	stw	r2,-36(fp)
 8010958:	00006506 	br	8010af0 <jpeg_copy_critical_parameters+0x400>
		ci < dstinfo->num_components; ci++, incomp++, outcomp++) {
			outcomp->component_id = incomp->component_id;
 801095c:	e0bff617 	ldw	r2,-40(fp)
 8010960:	10c00017 	ldw	r3,0(r2)
 8010964:	e0bff717 	ldw	r2,-36(fp)
 8010968:	10c00015 	stw	r3,0(r2)
			outcomp->h_samp_factor = incomp->h_samp_factor;
 801096c:	e0bff617 	ldw	r2,-40(fp)
 8010970:	10c00217 	ldw	r3,8(r2)
 8010974:	e0bff717 	ldw	r2,-36(fp)
 8010978:	10c00215 	stw	r3,8(r2)
			outcomp->v_samp_factor = incomp->v_samp_factor;
 801097c:	e0bff617 	ldw	r2,-40(fp)
 8010980:	10c00317 	ldw	r3,12(r2)
 8010984:	e0bff717 	ldw	r2,-36(fp)
 8010988:	10c00315 	stw	r3,12(r2)
			outcomp->quant_tbl_no = incomp->quant_tbl_no;
 801098c:	e0bff617 	ldw	r2,-40(fp)
 8010990:	10c00417 	ldw	r3,16(r2)
 8010994:	e0bff717 	ldw	r2,-36(fp)
 8010998:	10c00415 	stw	r3,16(r2)
			/* Make sure saved quantization table for component matches the qtable
			* slot.  If not, the input file re-used this qtable slot.
			* IJG encoder currently cannot duplicate this.
			*/
			tblno = outcomp->quant_tbl_no;
 801099c:	e0bff717 	ldw	r2,-36(fp)
 80109a0:	10800417 	ldw	r2,16(r2)
 80109a4:	e0bff815 	stw	r2,-32(fp)
			if (tblno < 0 || tblno >= NUM_QUANT_TBLS ||
 80109a8:	e0bff817 	ldw	r2,-32(fp)
 80109ac:	10000b16 	blt	r2,zero,80109dc <jpeg_copy_critical_parameters+0x2ec>
 80109b0:	e0bff817 	ldw	r2,-32(fp)
 80109b4:	10800108 	cmpgei	r2,r2,4
 80109b8:	1000081e 	bne	r2,zero,80109dc <jpeg_copy_critical_parameters+0x2ec>
				srcinfo->quant_tbl_ptrs[tblno] == NULL)
 80109bc:	e0fffe17 	ldw	r3,-8(fp)
 80109c0:	e0bff817 	ldw	r2,-32(fp)
 80109c4:	10800904 	addi	r2,r2,36
 80109c8:	1085883a 	add	r2,r2,r2
 80109cc:	1085883a 	add	r2,r2,r2
 80109d0:	1885883a 	add	r2,r3,r2
 80109d4:	10800017 	ldw	r2,0(r2)
			/* Make sure saved quantization table for component matches the qtable
			* slot.  If not, the input file re-used this qtable slot.
			* IJG encoder currently cannot duplicate this.
			*/
			tblno = outcomp->quant_tbl_no;
			if (tblno < 0 || tblno >= NUM_QUANT_TBLS ||
 80109d8:	10000d1e 	bne	r2,zero,8010a10 <jpeg_copy_critical_parameters+0x320>
				srcinfo->quant_tbl_ptrs[tblno] == NULL)
				ERREXIT1(dstinfo, JERR_NO_QUANT_TABLE, tblno);
 80109dc:	e0bfff17 	ldw	r2,-4(fp)
 80109e0:	10800017 	ldw	r2,0(r2)
 80109e4:	00c00d84 	movi	r3,54
 80109e8:	10c00515 	stw	r3,20(r2)
 80109ec:	e0bfff17 	ldw	r2,-4(fp)
 80109f0:	10800017 	ldw	r2,0(r2)
 80109f4:	e0fff817 	ldw	r3,-32(fp)
 80109f8:	10c00615 	stw	r3,24(r2)
 80109fc:	e0bfff17 	ldw	r2,-4(fp)
 8010a00:	10800017 	ldw	r2,0(r2)
 8010a04:	10800017 	ldw	r2,0(r2)
 8010a08:	e13fff17 	ldw	r4,-4(fp)
 8010a0c:	103ee83a 	callr	r2
			slot_quant = srcinfo->quant_tbl_ptrs[tblno];
 8010a10:	e0fffe17 	ldw	r3,-8(fp)
 8010a14:	e0bff817 	ldw	r2,-32(fp)
 8010a18:	10800904 	addi	r2,r2,36
 8010a1c:	1085883a 	add	r2,r2,r2
 8010a20:	1085883a 	add	r2,r2,r2
 8010a24:	1885883a 	add	r2,r3,r2
 8010a28:	10800017 	ldw	r2,0(r2)
 8010a2c:	e0bffc15 	stw	r2,-16(fp)
			c_quant = incomp->quant_table;
 8010a30:	e0bff617 	ldw	r2,-40(fp)
 8010a34:	10801417 	ldw	r2,80(r2)
 8010a38:	e0bffd15 	stw	r2,-12(fp)
			if (c_quant != NULL) {
 8010a3c:	e0bffd17 	ldw	r2,-12(fp)
 8010a40:	10002226 	beq	r2,zero,8010acc <jpeg_copy_critical_parameters+0x3dc>
				for (coefi = 0; coefi < DCTSIZE2; coefi++) {
 8010a44:	e03ffa15 	stw	zero,-24(fp)
 8010a48:	00001d06 	br	8010ac0 <jpeg_copy_critical_parameters+0x3d0>
					if (c_quant->quantval[coefi] != slot_quant->quantval[coefi])
 8010a4c:	e0fffd17 	ldw	r3,-12(fp)
 8010a50:	e0bffa17 	ldw	r2,-24(fp)
 8010a54:	1085883a 	add	r2,r2,r2
 8010a58:	1885883a 	add	r2,r3,r2
 8010a5c:	10c0000b 	ldhu	r3,0(r2)
 8010a60:	e13ffc17 	ldw	r4,-16(fp)
 8010a64:	e0bffa17 	ldw	r2,-24(fp)
 8010a68:	1085883a 	add	r2,r2,r2
 8010a6c:	2085883a 	add	r2,r4,r2
 8010a70:	1080000b 	ldhu	r2,0(r2)
 8010a74:	18ffffcc 	andi	r3,r3,65535
 8010a78:	10bfffcc 	andi	r2,r2,65535
 8010a7c:	18800d26 	beq	r3,r2,8010ab4 <jpeg_copy_critical_parameters+0x3c4>
						ERREXIT1(dstinfo, JERR_MISMATCHED_QUANT_TABLE, tblno);
 8010a80:	e0bfff17 	ldw	r2,-4(fp)
 8010a84:	10800017 	ldw	r2,0(r2)
 8010a88:	00c00b44 	movi	r3,45
 8010a8c:	10c00515 	stw	r3,20(r2)
 8010a90:	e0bfff17 	ldw	r2,-4(fp)
 8010a94:	10800017 	ldw	r2,0(r2)
 8010a98:	e0fff817 	ldw	r3,-32(fp)
 8010a9c:	10c00615 	stw	r3,24(r2)
 8010aa0:	e0bfff17 	ldw	r2,-4(fp)
 8010aa4:	10800017 	ldw	r2,0(r2)
 8010aa8:	10800017 	ldw	r2,0(r2)
 8010aac:	e13fff17 	ldw	r4,-4(fp)
 8010ab0:	103ee83a 	callr	r2
				srcinfo->quant_tbl_ptrs[tblno] == NULL)
				ERREXIT1(dstinfo, JERR_NO_QUANT_TABLE, tblno);
			slot_quant = srcinfo->quant_tbl_ptrs[tblno];
			c_quant = incomp->quant_table;
			if (c_quant != NULL) {
				for (coefi = 0; coefi < DCTSIZE2; coefi++) {
 8010ab4:	e0bffa17 	ldw	r2,-24(fp)
 8010ab8:	10800044 	addi	r2,r2,1
 8010abc:	e0bffa15 	stw	r2,-24(fp)
 8010ac0:	e0bffa17 	ldw	r2,-24(fp)
 8010ac4:	10801010 	cmplti	r2,r2,64
 8010ac8:	103fe01e 	bne	r2,zero,8010a4c <jpeg_copy_critical_parameters+0x35c>
	dstinfo->num_components = srcinfo->num_components;
	if (dstinfo->num_components < 1 || dstinfo->num_components > MAX_COMPONENTS)
		ERREXIT2(dstinfo, JERR_COMPONENT_COUNT, dstinfo->num_components,
		MAX_COMPONENTS);
	for (ci = 0, incomp = srcinfo->comp_info, outcomp = dstinfo->comp_info;
		ci < dstinfo->num_components; ci++, incomp++, outcomp++) {
 8010acc:	e0bff917 	ldw	r2,-28(fp)
 8010ad0:	10800044 	addi	r2,r2,1
 8010ad4:	e0bff915 	stw	r2,-28(fp)
 8010ad8:	e0bff617 	ldw	r2,-40(fp)
 8010adc:	10801604 	addi	r2,r2,88
 8010ae0:	e0bff615 	stw	r2,-40(fp)
 8010ae4:	e0bff717 	ldw	r2,-36(fp)
 8010ae8:	10801604 	addi	r2,r2,88
 8010aec:	e0bff715 	stw	r2,-36(fp)
 8010af0:	e0bfff17 	ldw	r2,-4(fp)
 8010af4:	10801217 	ldw	r2,72(r2)
	*/
	dstinfo->num_components = srcinfo->num_components;
	if (dstinfo->num_components < 1 || dstinfo->num_components > MAX_COMPONENTS)
		ERREXIT2(dstinfo, JERR_COMPONENT_COUNT, dstinfo->num_components,
		MAX_COMPONENTS);
	for (ci = 0, incomp = srcinfo->comp_info, outcomp = dstinfo->comp_info;
 8010af8:	e0fff917 	ldw	r3,-28(fp)
 8010afc:	18bf9716 	blt	r3,r2,801095c <jpeg_copy_critical_parameters+0x26c>
	* if the application chooses to copy JFIF 1.02 extension markers from
	* the source file, we need to copy the version to make sure we don't
	* emit a file that has 1.02 extensions but a claimed version of 1.01.
	* We will *not*, however, copy version info from mislabeled "2.01" files.
	*/
	if (srcinfo->saw_JFIF_marker) {
 8010b00:	e0bffe17 	ldw	r2,-8(fp)
 8010b04:	10804003 	ldbu	r2,256(r2)
 8010b08:	10803fcc 	andi	r2,r2,255
 8010b0c:	10001926 	beq	r2,zero,8010b74 <jpeg_copy_critical_parameters+0x484>
		if (srcinfo->JFIF_major_version == 1) {
 8010b10:	e0bffe17 	ldw	r2,-8(fp)
 8010b14:	10804043 	ldbu	r2,257(r2)
 8010b18:	10803fcc 	andi	r2,r2,255
 8010b1c:	10800058 	cmpnei	r2,r2,1
 8010b20:	1000081e 	bne	r2,zero,8010b44 <jpeg_copy_critical_parameters+0x454>
			dstinfo->JFIF_major_version = srcinfo->JFIF_major_version;
 8010b24:	e0bffe17 	ldw	r2,-8(fp)
 8010b28:	10c04043 	ldbu	r3,257(r2)
 8010b2c:	e0bfff17 	ldw	r2,-4(fp)
 8010b30:	10c03945 	stb	r3,229(r2)
			dstinfo->JFIF_minor_version = srcinfo->JFIF_minor_version;
 8010b34:	e0bffe17 	ldw	r2,-8(fp)
 8010b38:	10c04083 	ldbu	r3,258(r2)
 8010b3c:	e0bfff17 	ldw	r2,-4(fp)
 8010b40:	10c03985 	stb	r3,230(r2)
		}
		dstinfo->density_unit = srcinfo->density_unit;
 8010b44:	e0bffe17 	ldw	r2,-8(fp)
 8010b48:	10c040c3 	ldbu	r3,259(r2)
 8010b4c:	e0bfff17 	ldw	r2,-4(fp)
 8010b50:	10c039c5 	stb	r3,231(r2)
		dstinfo->X_density = srcinfo->X_density;
 8010b54:	e0bffe17 	ldw	r2,-8(fp)
 8010b58:	10c0410b 	ldhu	r3,260(r2)
 8010b5c:	e0bfff17 	ldw	r2,-4(fp)
 8010b60:	10c03a0d 	sth	r3,232(r2)
		dstinfo->Y_density = srcinfo->Y_density;
 8010b64:	e0bffe17 	ldw	r2,-8(fp)
 8010b68:	10c0418b 	ldhu	r3,262(r2)
 8010b6c:	e0bfff17 	ldw	r2,-4(fp)
 8010b70:	10c03a8d 	sth	r3,234(r2)
	}
}
 8010b74:	e037883a 	mov	sp,fp
 8010b78:	dfc00117 	ldw	ra,4(sp)
 8010b7c:	df000017 	ldw	fp,0(sp)
 8010b80:	dec00204 	addi	sp,sp,8
 8010b84:	f800283a 	ret

08010b88 <transencode_master_selection>:
*/

LOCAL(void)
	transencode_master_selection (j_compress_ptr cinfo,
	jvirt_barray_ptr * coef_arrays)
{
 8010b88:	defffc04 	addi	sp,sp,-16
 8010b8c:	dfc00315 	stw	ra,12(sp)
 8010b90:	df000215 	stw	fp,8(sp)
 8010b94:	df000204 	addi	fp,sp,8
 8010b98:	e13ffe15 	stw	r4,-8(fp)
 8010b9c:	e17fff15 	stw	r5,-4(fp)
	/* Initialize master control (includes parameter checking/processing) */
	jinit_c_master_control(cinfo, TRUE /* transcode only */);
 8010ba0:	e13ffe17 	ldw	r4,-8(fp)
 8010ba4:	01400044 	movi	r5,1
 8010ba8:	800ccd00 	call	800ccd0 <jinit_c_master_control>

	/* Entropy encoding: either Huffman or arithmetic coding. */
	if (cinfo->arith_code)
 8010bac:	e0bffe17 	ldw	r2,-8(fp)
 8010bb0:	10803343 	ldbu	r2,205(r2)
 8010bb4:	10803fcc 	andi	r2,r2,255
 8010bb8:	10000326 	beq	r2,zero,8010bc8 <transencode_master_selection+0x40>
		jinit_arith_encoder(cinfo);
 8010bbc:	e13ffe17 	ldw	r4,-8(fp)
 8010bc0:	80039900 	call	8003990 <jinit_arith_encoder>
 8010bc4:	00000206 	br	8010bd0 <transencode_master_selection+0x48>
	else {
		jinit_huff_encoder(cinfo);
 8010bc8:	e13ffe17 	ldw	r4,-8(fp)
 8010bcc:	80097080 	call	8009708 <jinit_huff_encoder>
	}

	/* We need a special coefficient buffer controller. */
	transencode_coef_controller(cinfo, coef_arrays);
 8010bd0:	e13ffe17 	ldw	r4,-8(fp)
 8010bd4:	e17fff17 	ldw	r5,-4(fp)
 8010bd8:	80111580 	call	8011158 <transencode_coef_controller>

	jinit_marker_writer(cinfo);
 8010bdc:	e13ffe17 	ldw	r4,-8(fp)
 8010be0:	800b0480 	call	800b048 <jinit_marker_writer>

	/* We can now tell the memory manager to allocate virtual arrays. */
	(*cinfo->mem->realize_virt_arrays) ((j_common_ptr) cinfo);
 8010be4:	e0bffe17 	ldw	r2,-8(fp)
 8010be8:	10800117 	ldw	r2,4(r2)
 8010bec:	10800617 	ldw	r2,24(r2)
 8010bf0:	e13ffe17 	ldw	r4,-8(fp)
 8010bf4:	103ee83a 	callr	r2

	/* Write the datastream header (SOI, JFIF) immediately.
	* Frame and scan headers are postponed till later.
	* This lets application insert special markers after the SOI.
	*/
	(*cinfo->marker->write_file_header) (cinfo);
 8010bf8:	e0bffe17 	ldw	r2,-8(fp)
 8010bfc:	10806017 	ldw	r2,384(r2)
 8010c00:	10800017 	ldw	r2,0(r2)
 8010c04:	e13ffe17 	ldw	r4,-8(fp)
 8010c08:	103ee83a 	callr	r2
}
 8010c0c:	e037883a 	mov	sp,fp
 8010c10:	dfc00117 	ldw	ra,4(sp)
 8010c14:	df000017 	ldw	fp,0(sp)
 8010c18:	dec00204 	addi	sp,sp,8
 8010c1c:	f800283a 	ret

08010c20 <start_iMCU_row>:


LOCAL(void)
	start_iMCU_row (j_compress_ptr cinfo)
	/* Reset within-iMCU-row counters for a new row */
{
 8010c20:	defffd04 	addi	sp,sp,-12
 8010c24:	df000215 	stw	fp,8(sp)
 8010c28:	df000204 	addi	fp,sp,8
 8010c2c:	e13fff15 	stw	r4,-4(fp)
	my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 8010c30:	e0bfff17 	ldw	r2,-4(fp)
 8010c34:	10805f17 	ldw	r2,380(r2)
 8010c38:	e0bffe15 	stw	r2,-8(fp)

	/* In an interleaved scan, an MCU row is the same as an iMCU row.
	* In a noninterleaved scan, an iMCU row has v_samp_factor MCU rows.
	* But at the bottom of the image, process only what's left.
	*/
	if (cinfo->comps_in_scan > 1) {
 8010c3c:	e0bfff17 	ldw	r2,-4(fp)
 8010c40:	10804317 	ldw	r2,268(r2)
 8010c44:	10800090 	cmplti	r2,r2,2
 8010c48:	1000041e 	bne	r2,zero,8010c5c <start_iMCU_row+0x3c>
		coef->MCU_rows_per_iMCU_row = 1;
 8010c4c:	e0bffe17 	ldw	r2,-8(fp)
 8010c50:	00c00044 	movi	r3,1
 8010c54:	10c00515 	stw	r3,20(r2)
 8010c58:	00001106 	br	8010ca0 <start_iMCU_row+0x80>
	} else {
		if (coef->iMCU_row_num < (cinfo->total_iMCU_rows-1))
 8010c5c:	e0bffe17 	ldw	r2,-8(fp)
 8010c60:	10c00217 	ldw	r3,8(r2)
 8010c64:	e0bfff17 	ldw	r2,-4(fp)
 8010c68:	10804217 	ldw	r2,264(r2)
 8010c6c:	10bfffc4 	addi	r2,r2,-1
 8010c70:	1880062e 	bgeu	r3,r2,8010c8c <start_iMCU_row+0x6c>
			coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
 8010c74:	e0bfff17 	ldw	r2,-4(fp)
 8010c78:	10804417 	ldw	r2,272(r2)
 8010c7c:	10c00317 	ldw	r3,12(r2)
 8010c80:	e0bffe17 	ldw	r2,-8(fp)
 8010c84:	10c00515 	stw	r3,20(r2)
 8010c88:	00000506 	br	8010ca0 <start_iMCU_row+0x80>
		else
			coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->last_row_height;
 8010c8c:	e0bfff17 	ldw	r2,-4(fp)
 8010c90:	10804417 	ldw	r2,272(r2)
 8010c94:	10c01317 	ldw	r3,76(r2)
 8010c98:	e0bffe17 	ldw	r2,-8(fp)
 8010c9c:	10c00515 	stw	r3,20(r2)
	}

	coef->mcu_ctr = 0;
 8010ca0:	e0bffe17 	ldw	r2,-8(fp)
 8010ca4:	10000315 	stw	zero,12(r2)
	coef->MCU_vert_offset = 0;
 8010ca8:	e0bffe17 	ldw	r2,-8(fp)
 8010cac:	10000415 	stw	zero,16(r2)
}
 8010cb0:	e037883a 	mov	sp,fp
 8010cb4:	df000017 	ldw	fp,0(sp)
 8010cb8:	dec00104 	addi	sp,sp,4
 8010cbc:	f800283a 	ret

08010cc0 <start_pass_coef>:
* Initialize for a processing pass.
*/

METHODDEF(void)
	start_pass_coef (j_compress_ptr cinfo, J_BUF_MODE pass_mode)
{
 8010cc0:	defffb04 	addi	sp,sp,-20
 8010cc4:	dfc00415 	stw	ra,16(sp)
 8010cc8:	df000315 	stw	fp,12(sp)
 8010ccc:	df000304 	addi	fp,sp,12
 8010cd0:	e13ffe15 	stw	r4,-8(fp)
 8010cd4:	e17fff15 	stw	r5,-4(fp)
	my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 8010cd8:	e0bffe17 	ldw	r2,-8(fp)
 8010cdc:	10805f17 	ldw	r2,380(r2)
 8010ce0:	e0bffd15 	stw	r2,-12(fp)

	if (pass_mode != JBUF_CRANK_DEST)
 8010ce4:	e0bfff17 	ldw	r2,-4(fp)
 8010ce8:	108000a0 	cmpeqi	r2,r2,2
 8010cec:	1000091e 	bne	r2,zero,8010d14 <start_pass_coef+0x54>
		ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 8010cf0:	e0bffe17 	ldw	r2,-8(fp)
 8010cf4:	10800017 	ldw	r2,0(r2)
 8010cf8:	00c000c4 	movi	r3,3
 8010cfc:	10c00515 	stw	r3,20(r2)
 8010d00:	e0bffe17 	ldw	r2,-8(fp)
 8010d04:	10800017 	ldw	r2,0(r2)
 8010d08:	10800017 	ldw	r2,0(r2)
 8010d0c:	e13ffe17 	ldw	r4,-8(fp)
 8010d10:	103ee83a 	callr	r2

	coef->iMCU_row_num = 0;
 8010d14:	e0bffd17 	ldw	r2,-12(fp)
 8010d18:	10000215 	stw	zero,8(r2)
	start_iMCU_row(cinfo);
 8010d1c:	e13ffe17 	ldw	r4,-8(fp)
 8010d20:	8010c200 	call	8010c20 <start_iMCU_row>
}
 8010d24:	e037883a 	mov	sp,fp
 8010d28:	dfc00117 	ldw	ra,4(sp)
 8010d2c:	df000017 	ldw	fp,0(sp)
 8010d30:	dec00204 	addi	sp,sp,8
 8010d34:	f800283a 	ret

08010d38 <compress_output>:
* NB: input_buf is ignored; it is likely to be a NULL pointer.
*/

METHODDEF(boolean)
	compress_output (j_compress_ptr cinfo, JSAMPIMAGE input_buf)
{
 8010d38:	deffde04 	addi	sp,sp,-136
 8010d3c:	dfc02115 	stw	ra,132(sp)
 8010d40:	df002015 	stw	fp,128(sp)
 8010d44:	dc401f15 	stw	r17,124(sp)
 8010d48:	dc001e15 	stw	r16,120(sp)
 8010d4c:	df001e04 	addi	fp,sp,120
 8010d50:	e13ffe15 	stw	r4,-8(fp)
 8010d54:	e17fff15 	stw	r5,-4(fp)
	my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 8010d58:	e0bffe17 	ldw	r2,-8(fp)
 8010d5c:	10805f17 	ldw	r2,380(r2)
 8010d60:	e0bfea15 	stw	r2,-88(fp)
	JDIMENSION MCU_col_num;	/* index of current MCU within row */
	JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 8010d64:	e0bffe17 	ldw	r2,-8(fp)
 8010d68:	10804817 	ldw	r2,288(r2)
 8010d6c:	10bfffc4 	addi	r2,r2,-1
 8010d70:	e0bfeb15 	stw	r2,-84(fp)
	JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 8010d74:	e0bffe17 	ldw	r2,-8(fp)
 8010d78:	10804217 	ldw	r2,264(r2)
 8010d7c:	10bfffc4 	addi	r2,r2,-1
 8010d80:	e0bfec15 	stw	r2,-80(fp)
	JBLOCKROW MCU_buffer[C_MAX_BLOCKS_IN_MCU];
	JBLOCKROW buffer_ptr;
	jpeg_component_info *compptr;

	/* Align the virtual buffers for the components used in this scan. */
	for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8010d84:	e03fe515 	stw	zero,-108(fp)
 8010d88:	00002e06 	br	8010e44 <compress_output+0x10c>
		compptr = cinfo->cur_comp_info[ci];
 8010d8c:	e0fffe17 	ldw	r3,-8(fp)
 8010d90:	e0bfe517 	ldw	r2,-108(fp)
 8010d94:	10801104 	addi	r2,r2,68
 8010d98:	1085883a 	add	r2,r2,r2
 8010d9c:	1085883a 	add	r2,r2,r2
 8010da0:	1885883a 	add	r2,r3,r2
 8010da4:	10800017 	ldw	r2,0(r2)
 8010da8:	e0bfed15 	stw	r2,-76(fp)
		buffer[ci] = (*cinfo->mem->access_virt_barray)
 8010dac:	e0bffe17 	ldw	r2,-8(fp)
 8010db0:	10800117 	ldw	r2,4(r2)
			((j_common_ptr) cinfo, coef->whole_image[compptr->component_index],
 8010db4:	14400817 	ldw	r17,32(r2)
 8010db8:	e0bfea17 	ldw	r2,-88(fp)
 8010dbc:	10c00617 	ldw	r3,24(r2)
 8010dc0:	e0bfed17 	ldw	r2,-76(fp)
 8010dc4:	10800117 	ldw	r2,4(r2)
 8010dc8:	1085883a 	add	r2,r2,r2
 8010dcc:	1085883a 	add	r2,r2,r2
 8010dd0:	1885883a 	add	r2,r3,r2
 8010dd4:	14000017 	ldw	r16,0(r2)
			coef->iMCU_row_num * compptr->v_samp_factor,
 8010dd8:	e0bfea17 	ldw	r2,-88(fp)
 8010ddc:	10c00217 	ldw	r3,8(r2)
 8010de0:	e0bfed17 	ldw	r2,-76(fp)
 8010de4:	10800317 	ldw	r2,12(r2)

	/* Align the virtual buffers for the components used in this scan. */
	for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
		compptr = cinfo->cur_comp_info[ci];
		buffer[ci] = (*cinfo->mem->access_virt_barray)
			((j_common_ptr) cinfo, coef->whole_image[compptr->component_index],
 8010de8:	1809883a 	mov	r4,r3
 8010dec:	100b883a 	mov	r5,r2
 8010df0:	802c2180 	call	802c218 <__mulsi3>
 8010df4:	1007883a 	mov	r3,r2
			coef->iMCU_row_num * compptr->v_samp_factor,
			(JDIMENSION) compptr->v_samp_factor, FALSE);
 8010df8:	e0bfed17 	ldw	r2,-76(fp)
 8010dfc:	10800317 	ldw	r2,12(r2)

	/* Align the virtual buffers for the components used in this scan. */
	for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
		compptr = cinfo->cur_comp_info[ci];
		buffer[ci] = (*cinfo->mem->access_virt_barray)
			((j_common_ptr) cinfo, coef->whole_image[compptr->component_index],
 8010e00:	d8000015 	stw	zero,0(sp)
 8010e04:	e13ffe17 	ldw	r4,-8(fp)
 8010e08:	800b883a 	mov	r5,r16
 8010e0c:	180d883a 	mov	r6,r3
 8010e10:	100f883a 	mov	r7,r2
 8010e14:	883ee83a 	callr	r17
 8010e18:	1007883a 	mov	r3,r2
	jpeg_component_info *compptr;

	/* Align the virtual buffers for the components used in this scan. */
	for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
		compptr = cinfo->cur_comp_info[ci];
		buffer[ci] = (*cinfo->mem->access_virt_barray)
 8010e1c:	e0bfe517 	ldw	r2,-108(fp)
 8010e20:	1085883a 	add	r2,r2,r2
 8010e24:	1085883a 	add	r2,r2,r2
 8010e28:	e13fe304 	addi	r4,fp,-116
 8010e2c:	2085883a 	add	r2,r4,r2
 8010e30:	10800d04 	addi	r2,r2,52
 8010e34:	10c00015 	stw	r3,0(r2)
	JBLOCKROW MCU_buffer[C_MAX_BLOCKS_IN_MCU];
	JBLOCKROW buffer_ptr;
	jpeg_component_info *compptr;

	/* Align the virtual buffers for the components used in this scan. */
	for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8010e38:	e0bfe517 	ldw	r2,-108(fp)
 8010e3c:	10800044 	addi	r2,r2,1
 8010e40:	e0bfe515 	stw	r2,-108(fp)
 8010e44:	e0bffe17 	ldw	r2,-8(fp)
 8010e48:	10804317 	ldw	r2,268(r2)
 8010e4c:	e0ffe517 	ldw	r3,-108(fp)
 8010e50:	18bfce16 	blt	r3,r2,8010d8c <compress_output+0x54>
			coef->iMCU_row_num * compptr->v_samp_factor,
			(JDIMENSION) compptr->v_samp_factor, FALSE);
	}

	/* Loop to process one whole iMCU row */
	for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 8010e54:	e0bfea17 	ldw	r2,-88(fp)
 8010e58:	10800417 	ldw	r2,16(r2)
 8010e5c:	e0bfe815 	stw	r2,-96(fp)
 8010e60:	0000aa06 	br	801110c <compress_output+0x3d4>
		yoffset++) {
			for (MCU_col_num = coef->mcu_ctr; MCU_col_num < cinfo->MCUs_per_row;
 8010e64:	e0bfea17 	ldw	r2,-88(fp)
 8010e68:	10800317 	ldw	r2,12(r2)
 8010e6c:	e0bfe315 	stw	r2,-116(fp)
 8010e70:	00009d06 	br	80110e8 <compress_output+0x3b0>
				MCU_col_num++) {
					/* Construct list of pointers to DCT blocks belonging to this MCU */
					blkn = 0;			/* index of current DCT block within MCU */
 8010e74:	e03fe415 	stw	zero,-112(fp)
					for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8010e78:	e03fe515 	stw	zero,-108(fp)
 8010e7c:	00008206 	br	8011088 <compress_output+0x350>
						compptr = cinfo->cur_comp_info[ci];
 8010e80:	e0fffe17 	ldw	r3,-8(fp)
 8010e84:	e0bfe517 	ldw	r2,-108(fp)
 8010e88:	10801104 	addi	r2,r2,68
 8010e8c:	1085883a 	add	r2,r2,r2
 8010e90:	1085883a 	add	r2,r2,r2
 8010e94:	1885883a 	add	r2,r3,r2
 8010e98:	10800017 	ldw	r2,0(r2)
 8010e9c:	e0bfed15 	stw	r2,-76(fp)
						start_col = MCU_col_num * compptr->MCU_width;
 8010ea0:	e0bfed17 	ldw	r2,-76(fp)
 8010ea4:	10800e17 	ldw	r2,56(r2)
 8010ea8:	1009883a 	mov	r4,r2
 8010eac:	e17fe317 	ldw	r5,-116(fp)
 8010eb0:	802c2180 	call	802c218 <__mulsi3>
 8010eb4:	e0bfee15 	stw	r2,-72(fp)
						blockcnt = (MCU_col_num < last_MCU_col) ? compptr->MCU_width
							: compptr->last_col_width;
 8010eb8:	e0ffe317 	ldw	r3,-116(fp)
 8010ebc:	e0bfeb17 	ldw	r2,-84(fp)
 8010ec0:	1880032e 	bgeu	r3,r2,8010ed0 <compress_output+0x198>
					/* Construct list of pointers to DCT blocks belonging to this MCU */
					blkn = 0;			/* index of current DCT block within MCU */
					for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
						compptr = cinfo->cur_comp_info[ci];
						start_col = MCU_col_num * compptr->MCU_width;
						blockcnt = (MCU_col_num < last_MCU_col) ? compptr->MCU_width
 8010ec4:	e0bfed17 	ldw	r2,-76(fp)
							: compptr->last_col_width;
 8010ec8:	10800e17 	ldw	r2,56(r2)
 8010ecc:	00000206 	br	8010ed8 <compress_output+0x1a0>
 8010ed0:	e0bfed17 	ldw	r2,-76(fp)
 8010ed4:	10801217 	ldw	r2,72(r2)
					/* Construct list of pointers to DCT blocks belonging to this MCU */
					blkn = 0;			/* index of current DCT block within MCU */
					for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
						compptr = cinfo->cur_comp_info[ci];
						start_col = MCU_col_num * compptr->MCU_width;
						blockcnt = (MCU_col_num < last_MCU_col) ? compptr->MCU_width
 8010ed8:	e0bfef15 	stw	r2,-68(fp)
							: compptr->last_col_width;
						for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 8010edc:	e03fe715 	stw	zero,-100(fp)
 8010ee0:	00006206 	br	801106c <compress_output+0x334>
							if (coef->iMCU_row_num < last_iMCU_row ||
 8010ee4:	e0bfea17 	ldw	r2,-88(fp)
 8010ee8:	10c00217 	ldw	r3,8(r2)
 8010eec:	e0bfec17 	ldw	r2,-80(fp)
 8010ef0:	18800636 	bltu	r3,r2,8010f0c <compress_output+0x1d4>
								yindex+yoffset < compptr->last_row_height) {
 8010ef4:	e0ffe717 	ldw	r3,-100(fp)
 8010ef8:	e0bfe817 	ldw	r2,-96(fp)
 8010efc:	1887883a 	add	r3,r3,r2
 8010f00:	e0bfed17 	ldw	r2,-76(fp)
 8010f04:	10801317 	ldw	r2,76(r2)
						compptr = cinfo->cur_comp_info[ci];
						start_col = MCU_col_num * compptr->MCU_width;
						blockcnt = (MCU_col_num < last_MCU_col) ? compptr->MCU_width
							: compptr->last_col_width;
						for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
							if (coef->iMCU_row_num < last_iMCU_row ||
 8010f08:	1880290e 	bge	r3,r2,8010fb0 <compress_output+0x278>
								yindex+yoffset < compptr->last_row_height) {
									/* Fill in pointers to real blocks in this row */
									buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 8010f0c:	e0bfe517 	ldw	r2,-108(fp)
 8010f10:	1085883a 	add	r2,r2,r2
 8010f14:	1085883a 	add	r2,r2,r2
 8010f18:	e0ffe304 	addi	r3,fp,-116
 8010f1c:	1885883a 	add	r2,r3,r2
 8010f20:	10800d04 	addi	r2,r2,52
 8010f24:	10c00017 	ldw	r3,0(r2)
 8010f28:	e13fe717 	ldw	r4,-100(fp)
 8010f2c:	e0bfe817 	ldw	r2,-96(fp)
 8010f30:	2085883a 	add	r2,r4,r2
 8010f34:	1085883a 	add	r2,r2,r2
 8010f38:	1085883a 	add	r2,r2,r2
 8010f3c:	1885883a 	add	r2,r3,r2
 8010f40:	10c00017 	ldw	r3,0(r2)
 8010f44:	e0bfee17 	ldw	r2,-72(fp)
 8010f48:	100491fa 	slli	r2,r2,7
 8010f4c:	1885883a 	add	r2,r3,r2
 8010f50:	e0bfe915 	stw	r2,-92(fp)
									for (xindex = 0; xindex < blockcnt; xindex++)
 8010f54:	e03fe615 	stw	zero,-104(fp)
 8010f58:	00001106 	br	8010fa0 <compress_output+0x268>
										MCU_buffer[blkn++] = buffer_ptr++;
 8010f5c:	e0bfe417 	ldw	r2,-112(fp)
 8010f60:	1085883a 	add	r2,r2,r2
 8010f64:	1085883a 	add	r2,r2,r2
 8010f68:	e13fe304 	addi	r4,fp,-116
 8010f6c:	2085883a 	add	r2,r4,r2
 8010f70:	10801104 	addi	r2,r2,68
 8010f74:	e0ffe917 	ldw	r3,-92(fp)
 8010f78:	10c00015 	stw	r3,0(r2)
 8010f7c:	e0bfe417 	ldw	r2,-112(fp)
 8010f80:	10800044 	addi	r2,r2,1
 8010f84:	e0bfe415 	stw	r2,-112(fp)
 8010f88:	e0bfe917 	ldw	r2,-92(fp)
 8010f8c:	10802004 	addi	r2,r2,128
 8010f90:	e0bfe915 	stw	r2,-92(fp)
						for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
							if (coef->iMCU_row_num < last_iMCU_row ||
								yindex+yoffset < compptr->last_row_height) {
									/* Fill in pointers to real blocks in this row */
									buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
									for (xindex = 0; xindex < blockcnt; xindex++)
 8010f94:	e0bfe617 	ldw	r2,-104(fp)
 8010f98:	10800044 	addi	r2,r2,1
 8010f9c:	e0bfe615 	stw	r2,-104(fp)
 8010fa0:	e0ffe617 	ldw	r3,-104(fp)
 8010fa4:	e0bfef17 	ldw	r2,-68(fp)
 8010fa8:	18bfec16 	blt	r3,r2,8010f5c <compress_output+0x224>
						compptr = cinfo->cur_comp_info[ci];
						start_col = MCU_col_num * compptr->MCU_width;
						blockcnt = (MCU_col_num < last_MCU_col) ? compptr->MCU_width
							: compptr->last_col_width;
						for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
							if (coef->iMCU_row_num < last_iMCU_row ||
 8010fac:	00000206 	br	8010fb8 <compress_output+0x280>
									buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
									for (xindex = 0; xindex < blockcnt; xindex++)
										MCU_buffer[blkn++] = buffer_ptr++;
							} else {
								/* At bottom of image, need a whole row of dummy blocks */
								xindex = 0;
 8010fb0:	e03fe615 	stw	zero,-104(fp)
							* Dummy blocks are filled in the same way as in jccoefct.c:
							* all zeroes in the AC entries, DC entries equal to previous
							* block's DC value.  The init routine has already zeroed the
							* AC entries, so we need only set the DC entries correctly.
							*/
							for (; xindex < compptr->MCU_width; xindex++) {
 8010fb4:	00002606 	br	8011050 <compress_output+0x318>
 8010fb8:	00002506 	br	8011050 <compress_output+0x318>
								MCU_buffer[blkn] = coef->dummy_buffer[blkn];
 8010fbc:	e0ffea17 	ldw	r3,-88(fp)
 8010fc0:	e0bfe417 	ldw	r2,-112(fp)
 8010fc4:	108001c4 	addi	r2,r2,7
 8010fc8:	1085883a 	add	r2,r2,r2
 8010fcc:	1085883a 	add	r2,r2,r2
 8010fd0:	1885883a 	add	r2,r3,r2
 8010fd4:	10c00017 	ldw	r3,0(r2)
 8010fd8:	e0bfe417 	ldw	r2,-112(fp)
 8010fdc:	1085883a 	add	r2,r2,r2
 8010fe0:	1085883a 	add	r2,r2,r2
 8010fe4:	e13fe304 	addi	r4,fp,-116
 8010fe8:	2085883a 	add	r2,r4,r2
 8010fec:	10801104 	addi	r2,r2,68
 8010ff0:	10c00015 	stw	r3,0(r2)
								MCU_buffer[blkn][0][0] = MCU_buffer[blkn-1][0][0];
 8010ff4:	e0bfe417 	ldw	r2,-112(fp)
 8010ff8:	1085883a 	add	r2,r2,r2
 8010ffc:	1085883a 	add	r2,r2,r2
 8011000:	e0ffe304 	addi	r3,fp,-116
 8011004:	1885883a 	add	r2,r3,r2
 8011008:	10801104 	addi	r2,r2,68
 801100c:	10c00017 	ldw	r3,0(r2)
 8011010:	e0bfe417 	ldw	r2,-112(fp)
 8011014:	10bfffc4 	addi	r2,r2,-1
 8011018:	1085883a 	add	r2,r2,r2
 801101c:	1085883a 	add	r2,r2,r2
 8011020:	e13fe304 	addi	r4,fp,-116
 8011024:	2085883a 	add	r2,r4,r2
 8011028:	10801104 	addi	r2,r2,68
 801102c:	10800017 	ldw	r2,0(r2)
 8011030:	1080000b 	ldhu	r2,0(r2)
 8011034:	1880000d 	sth	r2,0(r3)
								blkn++;
 8011038:	e0bfe417 	ldw	r2,-112(fp)
 801103c:	10800044 	addi	r2,r2,1
 8011040:	e0bfe415 	stw	r2,-112(fp)
							* Dummy blocks are filled in the same way as in jccoefct.c:
							* all zeroes in the AC entries, DC entries equal to previous
							* block's DC value.  The init routine has already zeroed the
							* AC entries, so we need only set the DC entries correctly.
							*/
							for (; xindex < compptr->MCU_width; xindex++) {
 8011044:	e0bfe617 	ldw	r2,-104(fp)
 8011048:	10800044 	addi	r2,r2,1
 801104c:	e0bfe615 	stw	r2,-104(fp)
 8011050:	e0bfed17 	ldw	r2,-76(fp)
 8011054:	10800e17 	ldw	r2,56(r2)
 8011058:	e0ffe617 	ldw	r3,-104(fp)
 801105c:	18bfd716 	blt	r3,r2,8010fbc <compress_output+0x284>
					for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
						compptr = cinfo->cur_comp_info[ci];
						start_col = MCU_col_num * compptr->MCU_width;
						blockcnt = (MCU_col_num < last_MCU_col) ? compptr->MCU_width
							: compptr->last_col_width;
						for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 8011060:	e0bfe717 	ldw	r2,-100(fp)
 8011064:	10800044 	addi	r2,r2,1
 8011068:	e0bfe715 	stw	r2,-100(fp)
 801106c:	e0bfed17 	ldw	r2,-76(fp)
 8011070:	10800f17 	ldw	r2,60(r2)
 8011074:	e0ffe717 	ldw	r3,-100(fp)
 8011078:	18bf9a16 	blt	r3,r2,8010ee4 <compress_output+0x1ac>
		yoffset++) {
			for (MCU_col_num = coef->mcu_ctr; MCU_col_num < cinfo->MCUs_per_row;
				MCU_col_num++) {
					/* Construct list of pointers to DCT blocks belonging to this MCU */
					blkn = 0;			/* index of current DCT block within MCU */
					for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 801107c:	e0bfe517 	ldw	r2,-108(fp)
 8011080:	10800044 	addi	r2,r2,1
 8011084:	e0bfe515 	stw	r2,-108(fp)
 8011088:	e0bffe17 	ldw	r2,-8(fp)
 801108c:	10804317 	ldw	r2,268(r2)
 8011090:	e0ffe517 	ldw	r3,-108(fp)
 8011094:	18bf7a16 	blt	r3,r2,8010e80 <compress_output+0x148>
								blkn++;
							}
						}
					}
					/* Try to write the MCU. */
					if (! (*cinfo->entropy->encode_mcu) (cinfo, MCU_buffer)) {
 8011098:	e0bffe17 	ldw	r2,-8(fp)
 801109c:	10806417 	ldw	r2,400(r2)
 80110a0:	10c00117 	ldw	r3,4(r2)
 80110a4:	e0bff404 	addi	r2,fp,-48
 80110a8:	e13ffe17 	ldw	r4,-8(fp)
 80110ac:	100b883a 	mov	r5,r2
 80110b0:	183ee83a 	callr	r3
 80110b4:	10803fcc 	andi	r2,r2,255
 80110b8:	1000081e 	bne	r2,zero,80110dc <compress_output+0x3a4>
						/* Suspension forced; update state counters and exit */
						coef->MCU_vert_offset = yoffset;
 80110bc:	e0bfea17 	ldw	r2,-88(fp)
 80110c0:	e0ffe817 	ldw	r3,-96(fp)
 80110c4:	10c00415 	stw	r3,16(r2)
						coef->mcu_ctr = MCU_col_num;
 80110c8:	e0bfea17 	ldw	r2,-88(fp)
 80110cc:	e0ffe317 	ldw	r3,-116(fp)
 80110d0:	10c00315 	stw	r3,12(r2)
						return FALSE;
 80110d4:	0005883a 	mov	r2,zero
 80110d8:	00001806 	br	801113c <compress_output+0x404>

	/* Loop to process one whole iMCU row */
	for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
		yoffset++) {
			for (MCU_col_num = coef->mcu_ctr; MCU_col_num < cinfo->MCUs_per_row;
				MCU_col_num++) {
 80110dc:	e0bfe317 	ldw	r2,-116(fp)
 80110e0:	10800044 	addi	r2,r2,1
 80110e4:	e0bfe315 	stw	r2,-116(fp)
	}

	/* Loop to process one whole iMCU row */
	for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
		yoffset++) {
			for (MCU_col_num = coef->mcu_ctr; MCU_col_num < cinfo->MCUs_per_row;
 80110e8:	e0bffe17 	ldw	r2,-8(fp)
 80110ec:	10804817 	ldw	r2,288(r2)
 80110f0:	e0ffe317 	ldw	r3,-116(fp)
 80110f4:	18bf5f36 	bltu	r3,r2,8010e74 <compress_output+0x13c>
						coef->mcu_ctr = MCU_col_num;
						return FALSE;
					}
			}
			/* Completed an MCU row, but perhaps not an iMCU row */
			coef->mcu_ctr = 0;
 80110f8:	e0bfea17 	ldw	r2,-88(fp)
 80110fc:	10000315 	stw	zero,12(r2)
			(JDIMENSION) compptr->v_samp_factor, FALSE);
	}

	/* Loop to process one whole iMCU row */
	for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
		yoffset++) {
 8011100:	e0bfe817 	ldw	r2,-96(fp)
 8011104:	10800044 	addi	r2,r2,1
 8011108:	e0bfe815 	stw	r2,-96(fp)
			coef->iMCU_row_num * compptr->v_samp_factor,
			(JDIMENSION) compptr->v_samp_factor, FALSE);
	}

	/* Loop to process one whole iMCU row */
	for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 801110c:	e0bfea17 	ldw	r2,-88(fp)
 8011110:	10800517 	ldw	r2,20(r2)
 8011114:	e0ffe817 	ldw	r3,-96(fp)
 8011118:	18bf5216 	blt	r3,r2,8010e64 <compress_output+0x12c>
			}
			/* Completed an MCU row, but perhaps not an iMCU row */
			coef->mcu_ctr = 0;
	}
	/* Completed the iMCU row, advance counters for next one */
	coef->iMCU_row_num++;
 801111c:	e0bfea17 	ldw	r2,-88(fp)
 8011120:	10800217 	ldw	r2,8(r2)
 8011124:	10c00044 	addi	r3,r2,1
 8011128:	e0bfea17 	ldw	r2,-88(fp)
 801112c:	10c00215 	stw	r3,8(r2)
	start_iMCU_row(cinfo);
 8011130:	e13ffe17 	ldw	r4,-8(fp)
 8011134:	8010c200 	call	8010c20 <start_iMCU_row>
	return TRUE;
 8011138:	00800044 	movi	r2,1
}
 801113c:	e037883a 	mov	sp,fp
 8011140:	dfc00317 	ldw	ra,12(sp)
 8011144:	df000217 	ldw	fp,8(sp)
 8011148:	dc400117 	ldw	r17,4(sp)
 801114c:	dc000017 	ldw	r16,0(sp)
 8011150:	dec00404 	addi	sp,sp,16
 8011154:	f800283a 	ret

08011158 <transencode_coef_controller>:
*/

LOCAL(void)
	transencode_coef_controller (j_compress_ptr cinfo,
	jvirt_barray_ptr * coef_arrays)
{
 8011158:	defff904 	addi	sp,sp,-28
 801115c:	dfc00615 	stw	ra,24(sp)
 8011160:	df000515 	stw	fp,20(sp)
 8011164:	df000504 	addi	fp,sp,20
 8011168:	e13ffe15 	stw	r4,-8(fp)
 801116c:	e17fff15 	stw	r5,-4(fp)
	my_coef_ptr coef;
	JBLOCKROW buffer;
	int i;

	coef = (my_coef_ptr)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8011170:	e0bffe17 	ldw	r2,-8(fp)
 8011174:	10800117 	ldw	r2,4(r2)
 8011178:	10800017 	ldw	r2,0(r2)
{
	my_coef_ptr coef;
	JBLOCKROW buffer;
	int i;

	coef = (my_coef_ptr)
 801117c:	e13ffe17 	ldw	r4,-8(fp)
 8011180:	01400044 	movi	r5,1
 8011184:	01801104 	movi	r6,68
 8011188:	103ee83a 	callr	r2
 801118c:	e0bffc15 	stw	r2,-16(fp)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
		SIZEOF(my_coef_controller));
	cinfo->coef = (struct jpeg_c_coef_controller *) coef;
 8011190:	e0bffe17 	ldw	r2,-8(fp)
 8011194:	e0fffc17 	ldw	r3,-16(fp)
 8011198:	10c05f15 	stw	r3,380(r2)
	coef->pub.start_pass = start_pass_coef;
 801119c:	e0bffc17 	ldw	r2,-16(fp)
 80111a0:	00c20074 	movhi	r3,2049
 80111a4:	18c33004 	addi	r3,r3,3264
 80111a8:	10c00015 	stw	r3,0(r2)
	coef->pub.compress_data = compress_output;
 80111ac:	e0bffc17 	ldw	r2,-16(fp)
 80111b0:	00c20074 	movhi	r3,2049
 80111b4:	18c34e04 	addi	r3,r3,3384
 80111b8:	10c00115 	stw	r3,4(r2)

	/* Save pointer to virtual arrays */
	coef->whole_image = coef_arrays;
 80111bc:	e0bffc17 	ldw	r2,-16(fp)
 80111c0:	e0ffff17 	ldw	r3,-4(fp)
 80111c4:	10c00615 	stw	r3,24(r2)

	/* Allocate and pre-zero space for dummy DCT blocks. */
	buffer = (JBLOCKROW)
		(*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80111c8:	e0bffe17 	ldw	r2,-8(fp)
 80111cc:	10800117 	ldw	r2,4(r2)
 80111d0:	10800117 	ldw	r2,4(r2)

	/* Save pointer to virtual arrays */
	coef->whole_image = coef_arrays;

	/* Allocate and pre-zero space for dummy DCT blocks. */
	buffer = (JBLOCKROW)
 80111d4:	e13ffe17 	ldw	r4,-8(fp)
 80111d8:	01400044 	movi	r5,1
 80111dc:	01814004 	movi	r6,1280
 80111e0:	103ee83a 	callr	r2
 80111e4:	e0bffd15 	stw	r2,-12(fp)
		(*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
		C_MAX_BLOCKS_IN_MCU * SIZEOF(JBLOCK));
	jzero_far((void FAR *) buffer, C_MAX_BLOCKS_IN_MCU * SIZEOF(JBLOCK));
 80111e8:	e13ffd17 	ldw	r4,-12(fp)
 80111ec:	01414004 	movi	r5,1280
 80111f0:	802b23c0 	call	802b23c <jzero_far>
	for (i = 0; i < C_MAX_BLOCKS_IN_MCU; i++) {
 80111f4:	e03ffb15 	stw	zero,-20(fp)
 80111f8:	00000e06 	br	8011234 <transencode_coef_controller+0xdc>
		coef->dummy_buffer[i] = buffer + i;
 80111fc:	e0bffb17 	ldw	r2,-20(fp)
 8011200:	100491fa 	slli	r2,r2,7
 8011204:	e0fffd17 	ldw	r3,-12(fp)
 8011208:	1887883a 	add	r3,r3,r2
 801120c:	e13ffc17 	ldw	r4,-16(fp)
 8011210:	e0bffb17 	ldw	r2,-20(fp)
 8011214:	108001c4 	addi	r2,r2,7
 8011218:	1085883a 	add	r2,r2,r2
 801121c:	1085883a 	add	r2,r2,r2
 8011220:	2085883a 	add	r2,r4,r2
 8011224:	10c00015 	stw	r3,0(r2)
	/* Allocate and pre-zero space for dummy DCT blocks. */
	buffer = (JBLOCKROW)
		(*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
		C_MAX_BLOCKS_IN_MCU * SIZEOF(JBLOCK));
	jzero_far((void FAR *) buffer, C_MAX_BLOCKS_IN_MCU * SIZEOF(JBLOCK));
	for (i = 0; i < C_MAX_BLOCKS_IN_MCU; i++) {
 8011228:	e0bffb17 	ldw	r2,-20(fp)
 801122c:	10800044 	addi	r2,r2,1
 8011230:	e0bffb15 	stw	r2,-20(fp)
 8011234:	e0bffb17 	ldw	r2,-20(fp)
 8011238:	10800290 	cmplti	r2,r2,10
 801123c:	103fef1e 	bne	r2,zero,80111fc <transencode_coef_controller+0xa4>
		coef->dummy_buffer[i] = buffer + i;
	}
}
 8011240:	e037883a 	mov	sp,fp
 8011244:	dfc00117 	ldw	ra,4(sp)
 8011248:	df000017 	ldw	fp,0(sp)
 801124c:	dec00204 	addi	sp,sp,8
 8011250:	f800283a 	ret

08011254 <init_destination>:
* before any data is actually written.
*/

METHODDEF(void)
	init_destination (j_compress_ptr cinfo)
{
 8011254:	defffc04 	addi	sp,sp,-16
 8011258:	dfc00315 	stw	ra,12(sp)
 801125c:	df000215 	stw	fp,8(sp)
 8011260:	df000204 	addi	fp,sp,8
 8011264:	e13fff15 	stw	r4,-4(fp)
	my_dest_ptr dest = (my_dest_ptr) cinfo->dest;
 8011268:	e0bfff17 	ldw	r2,-4(fp)
 801126c:	10800617 	ldw	r2,24(r2)
 8011270:	e0bffe15 	stw	r2,-8(fp)

	/* Allocate the output buffer --- it will be released when done with image */
	dest->buffer = (JOCTET *)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8011274:	e0bfff17 	ldw	r2,-4(fp)
 8011278:	10800117 	ldw	r2,4(r2)
 801127c:	10800017 	ldw	r2,0(r2)
 8011280:	e13fff17 	ldw	r4,-4(fp)
 8011284:	01400044 	movi	r5,1
 8011288:	01840004 	movi	r6,4096
 801128c:	103ee83a 	callr	r2
	init_destination (j_compress_ptr cinfo)
{
	my_dest_ptr dest = (my_dest_ptr) cinfo->dest;

	/* Allocate the output buffer --- it will be released when done with image */
	dest->buffer = (JOCTET *)
 8011290:	e0fffe17 	ldw	r3,-8(fp)
 8011294:	18800615 	stw	r2,24(r3)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
		OUTPUT_BUF_SIZE * SIZEOF(JOCTET));

	dest->pub.next_output_byte = dest->buffer;
 8011298:	e0bffe17 	ldw	r2,-8(fp)
 801129c:	10c00617 	ldw	r3,24(r2)
 80112a0:	e0bffe17 	ldw	r2,-8(fp)
 80112a4:	10c00015 	stw	r3,0(r2)
	dest->pub.free_in_buffer = OUTPUT_BUF_SIZE;
 80112a8:	e0bffe17 	ldw	r2,-8(fp)
 80112ac:	00c40004 	movi	r3,4096
 80112b0:	10c00115 	stw	r3,4(r2)
}
 80112b4:	e037883a 	mov	sp,fp
 80112b8:	dfc00117 	ldw	ra,4(sp)
 80112bc:	df000017 	ldw	fp,0(sp)
 80112c0:	dec00204 	addi	sp,sp,8
 80112c4:	f800283a 	ret

080112c8 <init_mem_destination>:

METHODDEF(void)
	init_mem_destination (j_compress_ptr cinfo)
{
 80112c8:	defffe04 	addi	sp,sp,-8
 80112cc:	df000115 	stw	fp,4(sp)
 80112d0:	df000104 	addi	fp,sp,4
 80112d4:	e13fff15 	stw	r4,-4(fp)
	/* no work necessary here */
}
 80112d8:	e037883a 	mov	sp,fp
 80112dc:	df000017 	ldw	fp,0(sp)
 80112e0:	dec00104 	addi	sp,sp,4
 80112e4:	f800283a 	ret

080112e8 <empty_output_buffer>:
* write it out when emptying the buffer externally.
*/

METHODDEF(boolean)
	empty_output_buffer (j_compress_ptr cinfo)
{
 80112e8:	defffc04 	addi	sp,sp,-16
 80112ec:	dfc00315 	stw	ra,12(sp)
 80112f0:	df000215 	stw	fp,8(sp)
 80112f4:	df000204 	addi	fp,sp,8
 80112f8:	e13fff15 	stw	r4,-4(fp)
	my_dest_ptr dest = (my_dest_ptr) cinfo->dest;
 80112fc:	e0bfff17 	ldw	r2,-4(fp)
 8011300:	10800617 	ldw	r2,24(r2)
 8011304:	e0bffe15 	stw	r2,-8(fp)

	if (JFWRITE(dest->outfile, dest->buffer, OUTPUT_BUF_SIZE) !=
 8011308:	e0bffe17 	ldw	r2,-8(fp)
 801130c:	10c00617 	ldw	r3,24(r2)
 8011310:	e0bffe17 	ldw	r2,-8(fp)
 8011314:	10800517 	ldw	r2,20(r2)
 8011318:	1809883a 	mov	r4,r3
 801131c:	01400044 	movi	r5,1
 8011320:	01840004 	movi	r6,4096
 8011324:	100f883a 	mov	r7,r2
 8011328:	802e0ac0 	call	802e0ac <fwrite>
 801132c:	10840020 	cmpeqi	r2,r2,4096
 8011330:	1000091e 	bne	r2,zero,8011358 <empty_output_buffer+0x70>
		(size_t) OUTPUT_BUF_SIZE)
		ERREXIT(cinfo, JERR_FILE_WRITE);
 8011334:	e0bfff17 	ldw	r2,-4(fp)
 8011338:	10800017 	ldw	r2,0(r2)
 801133c:	00c00984 	movi	r3,38
 8011340:	10c00515 	stw	r3,20(r2)
 8011344:	e0bfff17 	ldw	r2,-4(fp)
 8011348:	10800017 	ldw	r2,0(r2)
 801134c:	10800017 	ldw	r2,0(r2)
 8011350:	e13fff17 	ldw	r4,-4(fp)
 8011354:	103ee83a 	callr	r2

	dest->pub.next_output_byte = dest->buffer;
 8011358:	e0bffe17 	ldw	r2,-8(fp)
 801135c:	10c00617 	ldw	r3,24(r2)
 8011360:	e0bffe17 	ldw	r2,-8(fp)
 8011364:	10c00015 	stw	r3,0(r2)
	dest->pub.free_in_buffer = OUTPUT_BUF_SIZE;
 8011368:	e0bffe17 	ldw	r2,-8(fp)
 801136c:	00c40004 	movi	r3,4096
 8011370:	10c00115 	stw	r3,4(r2)

	return TRUE;
 8011374:	00800044 	movi	r2,1
}
 8011378:	e037883a 	mov	sp,fp
 801137c:	dfc00117 	ldw	ra,4(sp)
 8011380:	df000017 	ldw	fp,0(sp)
 8011384:	dec00204 	addi	sp,sp,8
 8011388:	f800283a 	ret

0801138c <empty_mem_output_buffer>:

METHODDEF(boolean)
	empty_mem_output_buffer (j_compress_ptr cinfo)
{
 801138c:	defffa04 	addi	sp,sp,-24
 8011390:	dfc00515 	stw	ra,20(sp)
 8011394:	df000415 	stw	fp,16(sp)
 8011398:	df000404 	addi	fp,sp,16
 801139c:	e13fff15 	stw	r4,-4(fp)
	size_t nextsize;
	JOCTET * nextbuffer;
	my_mem_dest_ptr dest = (my_mem_dest_ptr) cinfo->dest;
 80113a0:	e0bfff17 	ldw	r2,-4(fp)
 80113a4:	10800617 	ldw	r2,24(r2)
 80113a8:	e0bffc15 	stw	r2,-16(fp)

	/* Try to allocate new buffer with double size */
	nextsize = dest->bufsize * 2;
 80113ac:	e0bffc17 	ldw	r2,-16(fp)
 80113b0:	10800917 	ldw	r2,36(r2)
 80113b4:	1085883a 	add	r2,r2,r2
 80113b8:	e0bffd15 	stw	r2,-12(fp)
	nextbuffer = (JOCTET *)malloc(nextsize);
 80113bc:	e13ffd17 	ldw	r4,-12(fp)
 80113c0:	802e4040 	call	802e404 <malloc>
 80113c4:	e0bffe15 	stw	r2,-8(fp)

	if (nextbuffer == NULL)
 80113c8:	e0bffe17 	ldw	r2,-8(fp)
 80113cc:	10000d1e 	bne	r2,zero,8011404 <empty_mem_output_buffer+0x78>
		ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, 10);
 80113d0:	e0bfff17 	ldw	r2,-4(fp)
 80113d4:	10800017 	ldw	r2,0(r2)
 80113d8:	00c00e04 	movi	r3,56
 80113dc:	10c00515 	stw	r3,20(r2)
 80113e0:	e0bfff17 	ldw	r2,-4(fp)
 80113e4:	10800017 	ldw	r2,0(r2)
 80113e8:	00c00284 	movi	r3,10
 80113ec:	10c00615 	stw	r3,24(r2)
 80113f0:	e0bfff17 	ldw	r2,-4(fp)
 80113f4:	10800017 	ldw	r2,0(r2)
 80113f8:	10800017 	ldw	r2,0(r2)
 80113fc:	e13fff17 	ldw	r4,-4(fp)
 8011400:	103ee83a 	callr	r2

	MEMCOPY(nextbuffer, dest->buffer, dest->bufsize);
 8011404:	e0bffc17 	ldw	r2,-16(fp)
 8011408:	10c00817 	ldw	r3,32(r2)
 801140c:	e0bffc17 	ldw	r2,-16(fp)
 8011410:	10800917 	ldw	r2,36(r2)
 8011414:	e13ffe17 	ldw	r4,-8(fp)
 8011418:	180b883a 	mov	r5,r3
 801141c:	100d883a 	mov	r6,r2
 8011420:	802ebb00 	call	802ebb0 <memcpy>

	if (dest->newbuffer != NULL)
 8011424:	e0bffc17 	ldw	r2,-16(fp)
 8011428:	10800717 	ldw	r2,28(r2)
 801142c:	10000426 	beq	r2,zero,8011440 <empty_mem_output_buffer+0xb4>
		free(dest->newbuffer);
 8011430:	e0bffc17 	ldw	r2,-16(fp)
 8011434:	10800717 	ldw	r2,28(r2)
 8011438:	1009883a 	mov	r4,r2
 801143c:	802e4180 	call	802e418 <free>

	dest->newbuffer = nextbuffer;
 8011440:	e0bffc17 	ldw	r2,-16(fp)
 8011444:	e0fffe17 	ldw	r3,-8(fp)
 8011448:	10c00715 	stw	r3,28(r2)

	dest->pub.next_output_byte = nextbuffer + dest->bufsize;
 801144c:	e0bffc17 	ldw	r2,-16(fp)
 8011450:	10800917 	ldw	r2,36(r2)
 8011454:	e0fffe17 	ldw	r3,-8(fp)
 8011458:	1887883a 	add	r3,r3,r2
 801145c:	e0bffc17 	ldw	r2,-16(fp)
 8011460:	10c00015 	stw	r3,0(r2)
	dest->pub.free_in_buffer = dest->bufsize;
 8011464:	e0bffc17 	ldw	r2,-16(fp)
 8011468:	10c00917 	ldw	r3,36(r2)
 801146c:	e0bffc17 	ldw	r2,-16(fp)
 8011470:	10c00115 	stw	r3,4(r2)

	dest->buffer = nextbuffer;
 8011474:	e0bffc17 	ldw	r2,-16(fp)
 8011478:	e0fffe17 	ldw	r3,-8(fp)
 801147c:	10c00815 	stw	r3,32(r2)
	dest->bufsize = nextsize;
 8011480:	e0bffc17 	ldw	r2,-16(fp)
 8011484:	e0fffd17 	ldw	r3,-12(fp)
 8011488:	10c00915 	stw	r3,36(r2)

	return TRUE;
 801148c:	00800044 	movi	r2,1
}
 8011490:	e037883a 	mov	sp,fp
 8011494:	dfc00117 	ldw	ra,4(sp)
 8011498:	df000017 	ldw	fp,0(sp)
 801149c:	dec00204 	addi	sp,sp,8
 80114a0:	f800283a 	ret

080114a4 <term_destination>:
* for error exit.
*/

METHODDEF(void)
	term_destination (j_compress_ptr cinfo)
{
 80114a4:	defffb04 	addi	sp,sp,-20
 80114a8:	dfc00415 	stw	ra,16(sp)
 80114ac:	df000315 	stw	fp,12(sp)
 80114b0:	df000304 	addi	fp,sp,12
 80114b4:	e13fff15 	stw	r4,-4(fp)
	my_dest_ptr dest = (my_dest_ptr) cinfo->dest;
 80114b8:	e0bfff17 	ldw	r2,-4(fp)
 80114bc:	10800617 	ldw	r2,24(r2)
 80114c0:	e0bffd15 	stw	r2,-12(fp)
	size_t datacount = OUTPUT_BUF_SIZE - dest->pub.free_in_buffer;
 80114c4:	e0bffd17 	ldw	r2,-12(fp)
 80114c8:	10800117 	ldw	r2,4(r2)
 80114cc:	00c40004 	movi	r3,4096
 80114d0:	1885c83a 	sub	r2,r3,r2
 80114d4:	e0bffe15 	stw	r2,-8(fp)

	/* Write any data remaining in the buffer */
	if (datacount > 0) {
 80114d8:	e0bffe17 	ldw	r2,-8(fp)
 80114dc:	10001426 	beq	r2,zero,8011530 <term_destination+0x8c>
		if (JFWRITE(dest->outfile, dest->buffer, datacount) != datacount)
 80114e0:	e0bffd17 	ldw	r2,-12(fp)
 80114e4:	10c00617 	ldw	r3,24(r2)
 80114e8:	e0bffd17 	ldw	r2,-12(fp)
 80114ec:	10800517 	ldw	r2,20(r2)
 80114f0:	1809883a 	mov	r4,r3
 80114f4:	01400044 	movi	r5,1
 80114f8:	e1bffe17 	ldw	r6,-8(fp)
 80114fc:	100f883a 	mov	r7,r2
 8011500:	802e0ac0 	call	802e0ac <fwrite>
 8011504:	e0fffe17 	ldw	r3,-8(fp)
 8011508:	10c00926 	beq	r2,r3,8011530 <term_destination+0x8c>
			ERREXIT(cinfo, JERR_FILE_WRITE);
 801150c:	e0bfff17 	ldw	r2,-4(fp)
 8011510:	10800017 	ldw	r2,0(r2)
 8011514:	00c00984 	movi	r3,38
 8011518:	10c00515 	stw	r3,20(r2)
 801151c:	e0bfff17 	ldw	r2,-4(fp)
 8011520:	10800017 	ldw	r2,0(r2)
 8011524:	10800017 	ldw	r2,0(r2)
 8011528:	e13fff17 	ldw	r4,-4(fp)
 801152c:	103ee83a 	callr	r2
	}
	fflush(dest->outfile);
 8011530:	e0bffd17 	ldw	r2,-12(fp)
 8011534:	10800517 	ldw	r2,20(r2)
 8011538:	1009883a 	mov	r4,r2
 801153c:	802cd3c0 	call	802cd3c <fflush>
	/* Make sure we wrote the output file OK */
	if (ferror(dest->outfile))
 8011540:	e0bffd17 	ldw	r2,-12(fp)
 8011544:	10800517 	ldw	r2,20(r2)
 8011548:	1080030b 	ldhu	r2,12(r2)
 801154c:	10bfffcc 	andi	r2,r2,65535
 8011550:	1080100c 	andi	r2,r2,64
 8011554:	10000926 	beq	r2,zero,801157c <term_destination+0xd8>
		ERREXIT(cinfo, JERR_FILE_WRITE);
 8011558:	e0bfff17 	ldw	r2,-4(fp)
 801155c:	10800017 	ldw	r2,0(r2)
 8011560:	00c00984 	movi	r3,38
 8011564:	10c00515 	stw	r3,20(r2)
 8011568:	e0bfff17 	ldw	r2,-4(fp)
 801156c:	10800017 	ldw	r2,0(r2)
 8011570:	10800017 	ldw	r2,0(r2)
 8011574:	e13fff17 	ldw	r4,-4(fp)
 8011578:	103ee83a 	callr	r2
}
 801157c:	e037883a 	mov	sp,fp
 8011580:	dfc00117 	ldw	ra,4(sp)
 8011584:	df000017 	ldw	fp,0(sp)
 8011588:	dec00204 	addi	sp,sp,8
 801158c:	f800283a 	ret

08011590 <term_mem_destination>:

METHODDEF(void)
	term_mem_destination (j_compress_ptr cinfo)
{
 8011590:	defffd04 	addi	sp,sp,-12
 8011594:	df000215 	stw	fp,8(sp)
 8011598:	df000204 	addi	fp,sp,8
 801159c:	e13fff15 	stw	r4,-4(fp)
	my_mem_dest_ptr dest = (my_mem_dest_ptr) cinfo->dest;
 80115a0:	e0bfff17 	ldw	r2,-4(fp)
 80115a4:	10800617 	ldw	r2,24(r2)
 80115a8:	e0bffe15 	stw	r2,-8(fp)

	*dest->outbuffer = dest->buffer;
 80115ac:	e0bffe17 	ldw	r2,-8(fp)
 80115b0:	10800517 	ldw	r2,20(r2)
 80115b4:	e0fffe17 	ldw	r3,-8(fp)
 80115b8:	18c00817 	ldw	r3,32(r3)
 80115bc:	10c00015 	stw	r3,0(r2)
	*dest->outsize = dest->bufsize - dest->pub.free_in_buffer;
 80115c0:	e0bffe17 	ldw	r2,-8(fp)
 80115c4:	10800617 	ldw	r2,24(r2)
 80115c8:	e0fffe17 	ldw	r3,-8(fp)
 80115cc:	19000917 	ldw	r4,36(r3)
 80115d0:	e0fffe17 	ldw	r3,-8(fp)
 80115d4:	18c00117 	ldw	r3,4(r3)
 80115d8:	20c7c83a 	sub	r3,r4,r3
 80115dc:	10c00015 	stw	r3,0(r2)
}
 80115e0:	e037883a 	mov	sp,fp
 80115e4:	df000017 	ldw	fp,0(sp)
 80115e8:	dec00104 	addi	sp,sp,4
 80115ec:	f800283a 	ret

080115f0 <jpeg_stdio_dest>:
* for closing it after finishing compression.
*/

GLOBAL(void)
	jpeg_stdio_dest (j_compress_ptr cinfo, FILE * outfile)
{
 80115f0:	defffb04 	addi	sp,sp,-20
 80115f4:	dfc00415 	stw	ra,16(sp)
 80115f8:	df000315 	stw	fp,12(sp)
 80115fc:	df000304 	addi	fp,sp,12
 8011600:	e13ffe15 	stw	r4,-8(fp)
 8011604:	e17fff15 	stw	r5,-4(fp)
	* can be written to the same file without re-executing jpeg_stdio_dest.
	* This makes it dangerous to use this manager and a different destination
	* manager serially with the same JPEG object, because their private object
	* sizes may be different.  Caveat programmer.
	*/
	if (cinfo->dest == NULL) {	/* first time for this JPEG object? */
 8011608:	e0bffe17 	ldw	r2,-8(fp)
 801160c:	10800617 	ldw	r2,24(r2)
 8011610:	1000091e 	bne	r2,zero,8011638 <jpeg_stdio_dest+0x48>
		cinfo->dest = (struct jpeg_destination_mgr *)
			(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 8011614:	e0bffe17 	ldw	r2,-8(fp)
 8011618:	10800117 	ldw	r2,4(r2)
 801161c:	10800017 	ldw	r2,0(r2)
 8011620:	e13ffe17 	ldw	r4,-8(fp)
 8011624:	000b883a 	mov	r5,zero
 8011628:	01800704 	movi	r6,28
 801162c:	103ee83a 	callr	r2
	* This makes it dangerous to use this manager and a different destination
	* manager serially with the same JPEG object, because their private object
	* sizes may be different.  Caveat programmer.
	*/
	if (cinfo->dest == NULL) {	/* first time for this JPEG object? */
		cinfo->dest = (struct jpeg_destination_mgr *)
 8011630:	e0fffe17 	ldw	r3,-8(fp)
 8011634:	18800615 	stw	r2,24(r3)
			(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
			SIZEOF(my_destination_mgr));
	}

	dest = (my_dest_ptr) cinfo->dest;
 8011638:	e0bffe17 	ldw	r2,-8(fp)
 801163c:	10800617 	ldw	r2,24(r2)
 8011640:	e0bffd15 	stw	r2,-12(fp)
	dest->pub.init_destination = init_destination;
 8011644:	e0bffd17 	ldw	r2,-12(fp)
 8011648:	00c20074 	movhi	r3,2049
 801164c:	18c49504 	addi	r3,r3,4692
 8011650:	10c00215 	stw	r3,8(r2)
	dest->pub.empty_output_buffer = empty_output_buffer;
 8011654:	e0bffd17 	ldw	r2,-12(fp)
 8011658:	00c20074 	movhi	r3,2049
 801165c:	18c4ba04 	addi	r3,r3,4840
 8011660:	10c00315 	stw	r3,12(r2)
	dest->pub.term_destination = term_destination;
 8011664:	e0bffd17 	ldw	r2,-12(fp)
 8011668:	00c20074 	movhi	r3,2049
 801166c:	18c52904 	addi	r3,r3,5284
 8011670:	10c00415 	stw	r3,16(r2)
	dest->outfile = outfile;
 8011674:	e0bffd17 	ldw	r2,-12(fp)
 8011678:	e0ffff17 	ldw	r3,-4(fp)
 801167c:	10c00515 	stw	r3,20(r2)
}
 8011680:	e037883a 	mov	sp,fp
 8011684:	dfc00117 	ldw	ra,4(sp)
 8011688:	df000017 	ldw	fp,0(sp)
 801168c:	dec00204 	addi	sp,sp,8
 8011690:	f800283a 	ret

08011694 <jpeg_mem_dest>:
*/

GLOBAL(void)
	jpeg_mem_dest (j_compress_ptr cinfo,
	unsigned char ** outbuffer, unsigned long * outsize)
{
 8011694:	defffa04 	addi	sp,sp,-24
 8011698:	dfc00515 	stw	ra,20(sp)
 801169c:	df000415 	stw	fp,16(sp)
 80116a0:	df000404 	addi	fp,sp,16
 80116a4:	e13ffd15 	stw	r4,-12(fp)
 80116a8:	e17ffe15 	stw	r5,-8(fp)
 80116ac:	e1bfff15 	stw	r6,-4(fp)
	my_mem_dest_ptr dest;

	if (outbuffer == NULL || outsize == NULL)	/* sanity check */
 80116b0:	e0bffe17 	ldw	r2,-8(fp)
 80116b4:	10000226 	beq	r2,zero,80116c0 <jpeg_mem_dest+0x2c>
 80116b8:	e0bfff17 	ldw	r2,-4(fp)
 80116bc:	1000091e 	bne	r2,zero,80116e4 <jpeg_mem_dest+0x50>
		ERREXIT(cinfo, JERR_BUFFER_SIZE);
 80116c0:	e0bffd17 	ldw	r2,-12(fp)
 80116c4:	10800017 	ldw	r2,0(r2)
 80116c8:	00c00604 	movi	r3,24
 80116cc:	10c00515 	stw	r3,20(r2)
 80116d0:	e0bffd17 	ldw	r2,-12(fp)
 80116d4:	10800017 	ldw	r2,0(r2)
 80116d8:	10800017 	ldw	r2,0(r2)
 80116dc:	e13ffd17 	ldw	r4,-12(fp)
 80116e0:	103ee83a 	callr	r2

	/* The destination object is made permanent so that multiple JPEG images
	* can be written to the same buffer without re-executing jpeg_mem_dest.
	*/
	if (cinfo->dest == NULL) {	/* first time for this JPEG object? */
 80116e4:	e0bffd17 	ldw	r2,-12(fp)
 80116e8:	10800617 	ldw	r2,24(r2)
 80116ec:	1000091e 	bne	r2,zero,8011714 <jpeg_mem_dest+0x80>
		cinfo->dest = (struct jpeg_destination_mgr *)
			(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 80116f0:	e0bffd17 	ldw	r2,-12(fp)
 80116f4:	10800117 	ldw	r2,4(r2)
 80116f8:	10800017 	ldw	r2,0(r2)
 80116fc:	e13ffd17 	ldw	r4,-12(fp)
 8011700:	000b883a 	mov	r5,zero
 8011704:	01800a04 	movi	r6,40
 8011708:	103ee83a 	callr	r2

	/* The destination object is made permanent so that multiple JPEG images
	* can be written to the same buffer without re-executing jpeg_mem_dest.
	*/
	if (cinfo->dest == NULL) {	/* first time for this JPEG object? */
		cinfo->dest = (struct jpeg_destination_mgr *)
 801170c:	e0fffd17 	ldw	r3,-12(fp)
 8011710:	18800615 	stw	r2,24(r3)
			(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
			SIZEOF(my_mem_destination_mgr));
	}

	dest = (my_mem_dest_ptr) cinfo->dest;
 8011714:	e0bffd17 	ldw	r2,-12(fp)
 8011718:	10800617 	ldw	r2,24(r2)
 801171c:	e0bffc15 	stw	r2,-16(fp)
	dest->pub.init_destination = init_mem_destination;
 8011720:	e0bffc17 	ldw	r2,-16(fp)
 8011724:	00c20074 	movhi	r3,2049
 8011728:	18c4b204 	addi	r3,r3,4808
 801172c:	10c00215 	stw	r3,8(r2)
	dest->pub.empty_output_buffer = empty_mem_output_buffer;
 8011730:	e0bffc17 	ldw	r2,-16(fp)
 8011734:	00c20074 	movhi	r3,2049
 8011738:	18c4e304 	addi	r3,r3,5004
 801173c:	10c00315 	stw	r3,12(r2)
	dest->pub.term_destination = term_mem_destination;
 8011740:	e0bffc17 	ldw	r2,-16(fp)
 8011744:	00c20074 	movhi	r3,2049
 8011748:	18c56404 	addi	r3,r3,5520
 801174c:	10c00415 	stw	r3,16(r2)
	dest->outbuffer = outbuffer;
 8011750:	e0bffc17 	ldw	r2,-16(fp)
 8011754:	e0fffe17 	ldw	r3,-8(fp)
 8011758:	10c00515 	stw	r3,20(r2)
	dest->outsize = outsize;
 801175c:	e0bffc17 	ldw	r2,-16(fp)
 8011760:	e0ffff17 	ldw	r3,-4(fp)
 8011764:	10c00615 	stw	r3,24(r2)
	dest->newbuffer = NULL;
 8011768:	e0bffc17 	ldw	r2,-16(fp)
 801176c:	10000715 	stw	zero,28(r2)

	if (*outbuffer == NULL || *outsize == 0) {
 8011770:	e0bffe17 	ldw	r2,-8(fp)
 8011774:	10800017 	ldw	r2,0(r2)
 8011778:	10000326 	beq	r2,zero,8011788 <jpeg_mem_dest+0xf4>
 801177c:	e0bfff17 	ldw	r2,-4(fp)
 8011780:	10800017 	ldw	r2,0(r2)
 8011784:	10001c1e 	bne	r2,zero,80117f8 <jpeg_mem_dest+0x164>
		/* Allocate initial buffer */
		dest->newbuffer = *outbuffer = malloc(OUTPUT_BUF_SIZE);
 8011788:	01040004 	movi	r4,4096
 801178c:	802e4040 	call	802e404 <malloc>
 8011790:	1007883a 	mov	r3,r2
 8011794:	e0bffe17 	ldw	r2,-8(fp)
 8011798:	10c00015 	stw	r3,0(r2)
 801179c:	e0bffe17 	ldw	r2,-8(fp)
 80117a0:	10c00017 	ldw	r3,0(r2)
 80117a4:	e0bffc17 	ldw	r2,-16(fp)
 80117a8:	10c00715 	stw	r3,28(r2)
		if (dest->newbuffer == NULL)
 80117ac:	e0bffc17 	ldw	r2,-16(fp)
 80117b0:	10800717 	ldw	r2,28(r2)
 80117b4:	10000d1e 	bne	r2,zero,80117ec <jpeg_mem_dest+0x158>
			ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, 10);
 80117b8:	e0bffd17 	ldw	r2,-12(fp)
 80117bc:	10800017 	ldw	r2,0(r2)
 80117c0:	00c00e04 	movi	r3,56
 80117c4:	10c00515 	stw	r3,20(r2)
 80117c8:	e0bffd17 	ldw	r2,-12(fp)
 80117cc:	10800017 	ldw	r2,0(r2)
 80117d0:	00c00284 	movi	r3,10
 80117d4:	10c00615 	stw	r3,24(r2)
 80117d8:	e0bffd17 	ldw	r2,-12(fp)
 80117dc:	10800017 	ldw	r2,0(r2)
 80117e0:	10800017 	ldw	r2,0(r2)
 80117e4:	e13ffd17 	ldw	r4,-12(fp)
 80117e8:	103ee83a 	callr	r2
		*outsize = OUTPUT_BUF_SIZE;
 80117ec:	e0bfff17 	ldw	r2,-4(fp)
 80117f0:	00c40004 	movi	r3,4096
 80117f4:	10c00015 	stw	r3,0(r2)
	}

	dest->pub.next_output_byte = dest->buffer = *outbuffer;
 80117f8:	e0bffe17 	ldw	r2,-8(fp)
 80117fc:	10c00017 	ldw	r3,0(r2)
 8011800:	e0bffc17 	ldw	r2,-16(fp)
 8011804:	10c00815 	stw	r3,32(r2)
 8011808:	e0bffc17 	ldw	r2,-16(fp)
 801180c:	10c00817 	ldw	r3,32(r2)
 8011810:	e0bffc17 	ldw	r2,-16(fp)
 8011814:	10c00015 	stw	r3,0(r2)
	dest->pub.free_in_buffer = dest->bufsize = *outsize;
 8011818:	e0bfff17 	ldw	r2,-4(fp)
 801181c:	10c00017 	ldw	r3,0(r2)
 8011820:	e0bffc17 	ldw	r2,-16(fp)
 8011824:	10c00915 	stw	r3,36(r2)
 8011828:	e0bffc17 	ldw	r2,-16(fp)
 801182c:	10c00917 	ldw	r3,36(r2)
 8011830:	e0bffc17 	ldw	r2,-16(fp)
 8011834:	10c00115 	stw	r3,4(r2)
}
 8011838:	e037883a 	mov	sp,fp
 801183c:	dfc00117 	ldw	ra,4(sp)
 8011840:	df000017 	ldw	fp,0(sp)
 8011844:	dec00204 	addi	sp,sp,8
 8011848:	f800283a 	ret

0801184c <error_exit>:
* or jpeg_destroy) at some point.
*/

METHODDEF(void)
	error_exit (j_common_ptr cinfo)
{
 801184c:	defffd04 	addi	sp,sp,-12
 8011850:	dfc00215 	stw	ra,8(sp)
 8011854:	df000115 	stw	fp,4(sp)
 8011858:	df000104 	addi	fp,sp,4
 801185c:	e13fff15 	stw	r4,-4(fp)
	/* Always display the message */
	(*cinfo->err->output_message) (cinfo);
 8011860:	e0bfff17 	ldw	r2,-4(fp)
 8011864:	10800017 	ldw	r2,0(r2)
 8011868:	10800217 	ldw	r2,8(r2)
 801186c:	e13fff17 	ldw	r4,-4(fp)
 8011870:	103ee83a 	callr	r2

	/* Let the memory manager delete any temp files before we die */
	jpeg_destroy(cinfo);
 8011874:	e13fff17 	ldw	r4,-4(fp)
 8011878:	800cf280 	call	800cf28 <jpeg_destroy>

	exit(EXIT_FAILURE);
 801187c:	01000044 	movi	r4,1
 8011880:	802c9cc0 	call	802c9cc <exit>

08011884 <output_message>:
* not just not use this routine.
*/

METHODDEF(void)
	output_message (j_common_ptr cinfo)
{
 8011884:	deffcb04 	addi	sp,sp,-212
 8011888:	dfc03415 	stw	ra,208(sp)
 801188c:	df003315 	stw	fp,204(sp)
 8011890:	df003304 	addi	fp,sp,204
 8011894:	e13fff15 	stw	r4,-4(fp)
	char buffer[JMSG_LENGTH_MAX];

	/* Create the message */
	(*cinfo->err->format_message) (cinfo, buffer);
 8011898:	e0bfff17 	ldw	r2,-4(fp)
 801189c:	10800017 	ldw	r2,0(r2)
 80118a0:	10800317 	ldw	r2,12(r2)
 80118a4:	e13fff17 	ldw	r4,-4(fp)
 80118a8:	e17fcd04 	addi	r5,fp,-204
 80118ac:	103ee83a 	callr	r2
	/* Display it in a message dialog box */
	MessageBox(GetActiveWindow(), buffer, "JPEG Library Error",
		MB_OK | MB_ICONERROR);
#else
	/* Send it to stderr, adding a newline */
	fprintf(stderr, "%s\n", buffer);
 80118b0:	00820134 	movhi	r2,2052
 80118b4:	108c4504 	addi	r2,r2,12564
 80118b8:	10800017 	ldw	r2,0(r2)
 80118bc:	10800317 	ldw	r2,12(r2)
 80118c0:	1009883a 	mov	r4,r2
 80118c4:	01420134 	movhi	r5,2052
 80118c8:	29427a04 	addi	r5,r5,2536
 80118cc:	e1bfcd04 	addi	r6,fp,-204
 80118d0:	802d1cc0 	call	802d1cc <fprintf>
#endif
}
 80118d4:	e037883a 	mov	sp,fp
 80118d8:	dfc00117 	ldw	ra,4(sp)
 80118dc:	df000017 	ldw	fp,0(sp)
 80118e0:	dec00204 	addi	sp,sp,8
 80118e4:	f800283a 	ret

080118e8 <emit_message>:
* or change the policy about which messages to display.
*/

METHODDEF(void)
	emit_message (j_common_ptr cinfo, int msg_level)
{
 80118e8:	defffb04 	addi	sp,sp,-20
 80118ec:	dfc00415 	stw	ra,16(sp)
 80118f0:	df000315 	stw	fp,12(sp)
 80118f4:	df000304 	addi	fp,sp,12
 80118f8:	e13ffe15 	stw	r4,-8(fp)
 80118fc:	e17fff15 	stw	r5,-4(fp)
	struct jpeg_error_mgr * err = cinfo->err;
 8011900:	e0bffe17 	ldw	r2,-8(fp)
 8011904:	10800017 	ldw	r2,0(r2)
 8011908:	e0bffd15 	stw	r2,-12(fp)

	if (msg_level < 0) {
 801190c:	e0bfff17 	ldw	r2,-4(fp)
 8011910:	1000110e 	bge	r2,zero,8011958 <emit_message+0x70>
		/* It's a warning message.  Since corrupt files may generate many warnings,
		* the policy implemented here is to show only the first warning,
		* unless trace_level >= 3.
		*/
		if (err->num_warnings == 0 || err->trace_level >= 3)
 8011914:	e0bffd17 	ldw	r2,-12(fp)
 8011918:	10801b17 	ldw	r2,108(r2)
 801191c:	10000426 	beq	r2,zero,8011930 <emit_message+0x48>
 8011920:	e0bffd17 	ldw	r2,-12(fp)
 8011924:	10801a17 	ldw	r2,104(r2)
 8011928:	108000d0 	cmplti	r2,r2,3
 801192c:	1000041e 	bne	r2,zero,8011940 <emit_message+0x58>
			(*err->output_message) (cinfo);
 8011930:	e0bffd17 	ldw	r2,-12(fp)
 8011934:	10800217 	ldw	r2,8(r2)
 8011938:	e13ffe17 	ldw	r4,-8(fp)
 801193c:	103ee83a 	callr	r2
		/* Always count warnings in num_warnings. */
		err->num_warnings++;
 8011940:	e0bffd17 	ldw	r2,-12(fp)
 8011944:	10801b17 	ldw	r2,108(r2)
 8011948:	10c00044 	addi	r3,r2,1
 801194c:	e0bffd17 	ldw	r2,-12(fp)
 8011950:	10c01b15 	stw	r3,108(r2)
 8011954:	00000806 	br	8011978 <emit_message+0x90>
	} else {
		/* It's a trace message.  Show it if trace_level >= msg_level. */
		if (err->trace_level >= msg_level)
 8011958:	e0bffd17 	ldw	r2,-12(fp)
 801195c:	10c01a17 	ldw	r3,104(r2)
 8011960:	e0bfff17 	ldw	r2,-4(fp)
 8011964:	18800416 	blt	r3,r2,8011978 <emit_message+0x90>
			(*err->output_message) (cinfo);
 8011968:	e0bffd17 	ldw	r2,-12(fp)
 801196c:	10800217 	ldw	r2,8(r2)
 8011970:	e13ffe17 	ldw	r4,-8(fp)
 8011974:	103ee83a 	callr	r2
	}
}
 8011978:	e037883a 	mov	sp,fp
 801197c:	dfc00117 	ldw	ra,4(sp)
 8011980:	df000017 	ldw	fp,0(sp)
 8011984:	dec00204 	addi	sp,sp,8
 8011988:	f800283a 	ret

0801198c <format_message>:
* Few applications should need to override this method.
*/

METHODDEF(void)
	format_message (j_common_ptr cinfo, char * buffer)
{
 801198c:	defff004 	addi	sp,sp,-64
 8011990:	dfc00f15 	stw	ra,60(sp)
 8011994:	df000e15 	stw	fp,56(sp)
 8011998:	df000e04 	addi	fp,sp,56
 801199c:	e13ffe15 	stw	r4,-8(fp)
 80119a0:	e17fff15 	stw	r5,-4(fp)
	struct jpeg_error_mgr * err = cinfo->err;
 80119a4:	e0bffe17 	ldw	r2,-8(fp)
 80119a8:	10800017 	ldw	r2,0(r2)
 80119ac:	e0bffb15 	stw	r2,-20(fp)
	int msg_code = err->msg_code;
 80119b0:	e0bffb17 	ldw	r2,-20(fp)
 80119b4:	10800517 	ldw	r2,20(r2)
 80119b8:	e0bffc15 	stw	r2,-16(fp)
	const char * msgtext = NULL;
 80119bc:	e03ff815 	stw	zero,-32(fp)
	const char * msgptr;
	char ch;
	boolean isstring;

	/* Look up message string in proper table */
	if (msg_code > 0 && msg_code <= err->last_jpeg_message) {
 80119c0:	e0bffc17 	ldw	r2,-16(fp)
 80119c4:	00800d0e 	bge	zero,r2,80119fc <format_message+0x70>
 80119c8:	e0bffb17 	ldw	r2,-20(fp)
 80119cc:	10c01d17 	ldw	r3,116(r2)
 80119d0:	e0bffc17 	ldw	r2,-16(fp)
 80119d4:	18800916 	blt	r3,r2,80119fc <format_message+0x70>
		msgtext = err->jpeg_message_table[msg_code];
 80119d8:	e0bffb17 	ldw	r2,-20(fp)
 80119dc:	10c01c17 	ldw	r3,112(r2)
 80119e0:	e0bffc17 	ldw	r2,-16(fp)
 80119e4:	1085883a 	add	r2,r2,r2
 80119e8:	1085883a 	add	r2,r2,r2
 80119ec:	1885883a 	add	r2,r3,r2
 80119f0:	10800017 	ldw	r2,0(r2)
 80119f4:	e0bff815 	stw	r2,-32(fp)
 80119f8:	00001606 	br	8011a54 <format_message+0xc8>
	} else if (err->addon_message_table != NULL &&
 80119fc:	e0bffb17 	ldw	r2,-20(fp)
 8011a00:	10801e17 	ldw	r2,120(r2)
 8011a04:	10001326 	beq	r2,zero,8011a54 <format_message+0xc8>
		msg_code >= err->first_addon_message &&
 8011a08:	e0bffb17 	ldw	r2,-20(fp)
 8011a0c:	10801f17 	ldw	r2,124(r2)
	boolean isstring;

	/* Look up message string in proper table */
	if (msg_code > 0 && msg_code <= err->last_jpeg_message) {
		msgtext = err->jpeg_message_table[msg_code];
	} else if (err->addon_message_table != NULL &&
 8011a10:	e0fffc17 	ldw	r3,-16(fp)
 8011a14:	18800f16 	blt	r3,r2,8011a54 <format_message+0xc8>
		msg_code >= err->first_addon_message &&
		msg_code <= err->last_addon_message) {
 8011a18:	e0bffb17 	ldw	r2,-20(fp)
 8011a1c:	10c02017 	ldw	r3,128(r2)

	/* Look up message string in proper table */
	if (msg_code > 0 && msg_code <= err->last_jpeg_message) {
		msgtext = err->jpeg_message_table[msg_code];
	} else if (err->addon_message_table != NULL &&
		msg_code >= err->first_addon_message &&
 8011a20:	e0bffc17 	ldw	r2,-16(fp)
 8011a24:	18800b16 	blt	r3,r2,8011a54 <format_message+0xc8>
		msg_code <= err->last_addon_message) {
			msgtext = err->addon_message_table[msg_code - err->first_addon_message];
 8011a28:	e0bffb17 	ldw	r2,-20(fp)
 8011a2c:	10c01e17 	ldw	r3,120(r2)
 8011a30:	e0bffb17 	ldw	r2,-20(fp)
 8011a34:	10801f17 	ldw	r2,124(r2)
 8011a38:	e13ffc17 	ldw	r4,-16(fp)
 8011a3c:	2085c83a 	sub	r2,r4,r2
 8011a40:	1085883a 	add	r2,r2,r2
 8011a44:	1085883a 	add	r2,r2,r2
 8011a48:	1885883a 	add	r2,r3,r2
 8011a4c:	10800017 	ldw	r2,0(r2)
 8011a50:	e0bff815 	stw	r2,-32(fp)
	}

	/* Defend against bogus message number */
	if (msgtext == NULL) {
 8011a54:	e0bff817 	ldw	r2,-32(fp)
 8011a58:	1000071e 	bne	r2,zero,8011a78 <format_message+0xec>
		err->msg_parm.i[0] = msg_code;
 8011a5c:	e0bffb17 	ldw	r2,-20(fp)
 8011a60:	e0fffc17 	ldw	r3,-16(fp)
 8011a64:	10c00615 	stw	r3,24(r2)
		msgtext = err->jpeg_message_table[0];
 8011a68:	e0bffb17 	ldw	r2,-20(fp)
 8011a6c:	10801c17 	ldw	r2,112(r2)
 8011a70:	10800017 	ldw	r2,0(r2)
 8011a74:	e0bff815 	stw	r2,-32(fp)
	}

	/* Check for string parameter, as indicated by %s in the message text */
	isstring = FALSE;
 8011a78:	e03ffa05 	stb	zero,-24(fp)
	msgptr = msgtext;
 8011a7c:	e0bff817 	ldw	r2,-32(fp)
 8011a80:	e0bff915 	stw	r2,-28(fp)
	while ((ch = *msgptr++) != '\0') {
 8011a84:	00000d06 	br	8011abc <format_message+0x130>
		if (ch == '%') {
 8011a88:	e0bffd07 	ldb	r2,-12(fp)
 8011a8c:	10800958 	cmpnei	r2,r2,37
 8011a90:	10000a1e 	bne	r2,zero,8011abc <format_message+0x130>
			if (*msgptr == 's') isstring = TRUE;
 8011a94:	e0bff917 	ldw	r2,-28(fp)
 8011a98:	10800003 	ldbu	r2,0(r2)
 8011a9c:	10803fcc 	andi	r2,r2,255
 8011aa0:	1080201c 	xori	r2,r2,128
 8011aa4:	10bfe004 	addi	r2,r2,-128
 8011aa8:	10801cd8 	cmpnei	r2,r2,115
 8011aac:	10000e1e 	bne	r2,zero,8011ae8 <format_message+0x15c>
 8011ab0:	00800044 	movi	r2,1
 8011ab4:	e0bffa05 	stb	r2,-24(fp)
			break;
 8011ab8:	00000b06 	br	8011ae8 <format_message+0x15c>
	}

	/* Check for string parameter, as indicated by %s in the message text */
	isstring = FALSE;
	msgptr = msgtext;
	while ((ch = *msgptr++) != '\0') {
 8011abc:	e0bff917 	ldw	r2,-28(fp)
 8011ac0:	10800003 	ldbu	r2,0(r2)
 8011ac4:	e0bffd05 	stb	r2,-12(fp)
 8011ac8:	e0bffd07 	ldb	r2,-12(fp)
 8011acc:	1004c03a 	cmpne	r2,r2,zero
 8011ad0:	e0fff917 	ldw	r3,-28(fp)
 8011ad4:	18c00044 	addi	r3,r3,1
 8011ad8:	e0fff915 	stw	r3,-28(fp)
 8011adc:	10803fcc 	andi	r2,r2,255
 8011ae0:	103fe91e 	bne	r2,zero,8011a88 <format_message+0xfc>
 8011ae4:	00000106 	br	8011aec <format_message+0x160>
		if (ch == '%') {
			if (*msgptr == 's') isstring = TRUE;
			break;
 8011ae8:	0001883a 	nop
		}
	}

	/* Format the message into the passed buffer */
	if (isstring)
 8011aec:	e0bffa03 	ldbu	r2,-24(fp)
 8011af0:	10000726 	beq	r2,zero,8011b10 <format_message+0x184>
		sprintf(buffer, msgtext, err->msg_parm.s);
 8011af4:	e0bffb17 	ldw	r2,-20(fp)
 8011af8:	10800604 	addi	r2,r2,24
 8011afc:	e13fff17 	ldw	r4,-4(fp)
 8011b00:	e17ff817 	ldw	r5,-32(fp)
 8011b04:	100d883a 	mov	r6,r2
 8011b08:	802f2b40 	call	802f2b4 <sprintf>
 8011b0c:	00001b06 	br	8011b7c <format_message+0x1f0>
	else
		sprintf(buffer, msgtext,
		err->msg_parm.i[0], err->msg_parm.i[1],
 8011b10:	e0bffb17 	ldw	r2,-20(fp)

	/* Format the message into the passed buffer */
	if (isstring)
		sprintf(buffer, msgtext, err->msg_parm.s);
	else
		sprintf(buffer, msgtext,
 8011b14:	10c00617 	ldw	r3,24(r2)
		err->msg_parm.i[0], err->msg_parm.i[1],
 8011b18:	e0bffb17 	ldw	r2,-20(fp)

	/* Format the message into the passed buffer */
	if (isstring)
		sprintf(buffer, msgtext, err->msg_parm.s);
	else
		sprintf(buffer, msgtext,
 8011b1c:	10800717 	ldw	r2,28(r2)
		err->msg_parm.i[0], err->msg_parm.i[1],
		err->msg_parm.i[2], err->msg_parm.i[3],
 8011b20:	e13ffb17 	ldw	r4,-20(fp)

	/* Format the message into the passed buffer */
	if (isstring)
		sprintf(buffer, msgtext, err->msg_parm.s);
	else
		sprintf(buffer, msgtext,
 8011b24:	22400817 	ldw	r9,32(r4)
		err->msg_parm.i[0], err->msg_parm.i[1],
		err->msg_parm.i[2], err->msg_parm.i[3],
 8011b28:	e13ffb17 	ldw	r4,-20(fp)

	/* Format the message into the passed buffer */
	if (isstring)
		sprintf(buffer, msgtext, err->msg_parm.s);
	else
		sprintf(buffer, msgtext,
 8011b2c:	22000917 	ldw	r8,36(r4)
		err->msg_parm.i[0], err->msg_parm.i[1],
		err->msg_parm.i[2], err->msg_parm.i[3],
		err->msg_parm.i[4], err->msg_parm.i[5],
 8011b30:	e13ffb17 	ldw	r4,-20(fp)

	/* Format the message into the passed buffer */
	if (isstring)
		sprintf(buffer, msgtext, err->msg_parm.s);
	else
		sprintf(buffer, msgtext,
 8011b34:	21c00a17 	ldw	r7,40(r4)
		err->msg_parm.i[0], err->msg_parm.i[1],
		err->msg_parm.i[2], err->msg_parm.i[3],
		err->msg_parm.i[4], err->msg_parm.i[5],
 8011b38:	e13ffb17 	ldw	r4,-20(fp)

	/* Format the message into the passed buffer */
	if (isstring)
		sprintf(buffer, msgtext, err->msg_parm.s);
	else
		sprintf(buffer, msgtext,
 8011b3c:	21800b17 	ldw	r6,44(r4)
		err->msg_parm.i[0], err->msg_parm.i[1],
		err->msg_parm.i[2], err->msg_parm.i[3],
		err->msg_parm.i[4], err->msg_parm.i[5],
		err->msg_parm.i[6], err->msg_parm.i[7]);
 8011b40:	e13ffb17 	ldw	r4,-20(fp)

	/* Format the message into the passed buffer */
	if (isstring)
		sprintf(buffer, msgtext, err->msg_parm.s);
	else
		sprintf(buffer, msgtext,
 8011b44:	21400c17 	ldw	r5,48(r4)
		err->msg_parm.i[0], err->msg_parm.i[1],
		err->msg_parm.i[2], err->msg_parm.i[3],
		err->msg_parm.i[4], err->msg_parm.i[5],
		err->msg_parm.i[6], err->msg_parm.i[7]);
 8011b48:	e13ffb17 	ldw	r4,-20(fp)

	/* Format the message into the passed buffer */
	if (isstring)
		sprintf(buffer, msgtext, err->msg_parm.s);
	else
		sprintf(buffer, msgtext,
 8011b4c:	21000d17 	ldw	r4,52(r4)
 8011b50:	da400015 	stw	r9,0(sp)
 8011b54:	da000115 	stw	r8,4(sp)
 8011b58:	d9c00215 	stw	r7,8(sp)
 8011b5c:	d9800315 	stw	r6,12(sp)
 8011b60:	d9400415 	stw	r5,16(sp)
 8011b64:	d9000515 	stw	r4,20(sp)
 8011b68:	e13fff17 	ldw	r4,-4(fp)
 8011b6c:	e17ff817 	ldw	r5,-32(fp)
 8011b70:	180d883a 	mov	r6,r3
 8011b74:	100f883a 	mov	r7,r2
 8011b78:	802f2b40 	call	802f2b4 <sprintf>
		err->msg_parm.i[0], err->msg_parm.i[1],
		err->msg_parm.i[2], err->msg_parm.i[3],
		err->msg_parm.i[4], err->msg_parm.i[5],
		err->msg_parm.i[6], err->msg_parm.i[7]);
}
 8011b7c:	e037883a 	mov	sp,fp
 8011b80:	dfc00117 	ldw	ra,4(sp)
 8011b84:	df000017 	ldw	fp,0(sp)
 8011b88:	dec00204 	addi	sp,sp,8
 8011b8c:	f800283a 	ret

08011b90 <reset_error_mgr>:
* this method if it has additional error processing state.
*/

METHODDEF(void)
	reset_error_mgr (j_common_ptr cinfo)
{
 8011b90:	defffe04 	addi	sp,sp,-8
 8011b94:	df000115 	stw	fp,4(sp)
 8011b98:	df000104 	addi	fp,sp,4
 8011b9c:	e13fff15 	stw	r4,-4(fp)
	cinfo->err->num_warnings = 0;
 8011ba0:	e0bfff17 	ldw	r2,-4(fp)
 8011ba4:	10800017 	ldw	r2,0(r2)
 8011ba8:	10001b15 	stw	zero,108(r2)
	/* trace_level is not reset since it is an application-supplied parameter */
	cinfo->err->msg_code = 0;	/* may be useful as a flag for "no error" */
 8011bac:	e0bfff17 	ldw	r2,-4(fp)
 8011bb0:	10800017 	ldw	r2,0(r2)
 8011bb4:	10000515 	stw	zero,20(r2)
}
 8011bb8:	e037883a 	mov	sp,fp
 8011bbc:	df000017 	ldw	fp,0(sp)
 8011bc0:	dec00104 	addi	sp,sp,4
 8011bc4:	f800283a 	ret

08011bc8 <jpeg_std_error>:
* after which the application may override some of the methods.
*/

GLOBAL(struct jpeg_error_mgr *)
	jpeg_std_error (struct jpeg_error_mgr * err)
{
 8011bc8:	defffe04 	addi	sp,sp,-8
 8011bcc:	df000115 	stw	fp,4(sp)
 8011bd0:	df000104 	addi	fp,sp,4
 8011bd4:	e13fff15 	stw	r4,-4(fp)
	err->error_exit = error_exit;
 8011bd8:	e0bfff17 	ldw	r2,-4(fp)
 8011bdc:	00c20074 	movhi	r3,2049
 8011be0:	18c61304 	addi	r3,r3,6220
 8011be4:	10c00015 	stw	r3,0(r2)
	err->emit_message = emit_message;
 8011be8:	e0bfff17 	ldw	r2,-4(fp)
 8011bec:	00c20074 	movhi	r3,2049
 8011bf0:	18c63a04 	addi	r3,r3,6376
 8011bf4:	10c00115 	stw	r3,4(r2)
	err->output_message = output_message;
 8011bf8:	e0bfff17 	ldw	r2,-4(fp)
 8011bfc:	00c20074 	movhi	r3,2049
 8011c00:	18c62104 	addi	r3,r3,6276
 8011c04:	10c00215 	stw	r3,8(r2)
	err->format_message = format_message;
 8011c08:	e0bfff17 	ldw	r2,-4(fp)
 8011c0c:	00c20074 	movhi	r3,2049
 8011c10:	18c66304 	addi	r3,r3,6540
 8011c14:	10c00315 	stw	r3,12(r2)
	err->reset_error_mgr = reset_error_mgr;
 8011c18:	e0bfff17 	ldw	r2,-4(fp)
 8011c1c:	00c20074 	movhi	r3,2049
 8011c20:	18c6e404 	addi	r3,r3,7056
 8011c24:	10c00415 	stw	r3,16(r2)

	err->trace_level = 0;		/* default = no tracing */
 8011c28:	e0bfff17 	ldw	r2,-4(fp)
 8011c2c:	10001a15 	stw	zero,104(r2)
	err->num_warnings = 0;	/* no warnings emitted yet */
 8011c30:	e0bfff17 	ldw	r2,-4(fp)
 8011c34:	10001b15 	stw	zero,108(r2)
	err->msg_code = 0;		/* may be useful as a flag for "no error" */
 8011c38:	e0bfff17 	ldw	r2,-4(fp)
 8011c3c:	10000515 	stw	zero,20(r2)

	/* Initialize message table pointers */
	err->jpeg_message_table = jpeg_std_message_table;
 8011c40:	e0bfff17 	ldw	r2,-4(fp)
 8011c44:	00c20134 	movhi	r3,2052
 8011c48:	18c1fa04 	addi	r3,r3,2024
 8011c4c:	10c01c15 	stw	r3,112(r2)
	err->last_jpeg_message = (int) JMSG_LASTMSGCODE - 1;
 8011c50:	e0bfff17 	ldw	r2,-4(fp)
 8011c54:	00c01f84 	movi	r3,126
 8011c58:	10c01d15 	stw	r3,116(r2)

	err->addon_message_table = NULL;
 8011c5c:	e0bfff17 	ldw	r2,-4(fp)
 8011c60:	10001e15 	stw	zero,120(r2)
	err->first_addon_message = 0;	/* for safety */
 8011c64:	e0bfff17 	ldw	r2,-4(fp)
 8011c68:	10001f15 	stw	zero,124(r2)
	err->last_addon_message = 0;
 8011c6c:	e0bfff17 	ldw	r2,-4(fp)
 8011c70:	10002015 	stw	zero,128(r2)

	return err;
 8011c74:	e0bfff17 	ldw	r2,-4(fp)
}
 8011c78:	e037883a 	mov	sp,fp
 8011c7c:	df000017 	ldw	fp,0(sp)
 8011c80:	dec00104 	addi	sp,sp,4
 8011c84:	f800283a 	ret

08011c88 <jpeg_fdct_float>:
	* Perform the forward DCT on one block of samples.
	*/

	GLOBAL(void)
	jpeg_fdct_float (FAST_FLOAT * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 8011c88:	deffe404 	addi	sp,sp,-112
 8011c8c:	dfc01b15 	stw	ra,108(sp)
 8011c90:	df001a15 	stw	fp,104(sp)
 8011c94:	dc001915 	stw	r16,100(sp)
 8011c98:	df001904 	addi	fp,sp,100
 8011c9c:	e13ffd15 	stw	r4,-12(fp)
 8011ca0:	e17ffe15 	stw	r5,-8(fp)
 8011ca4:	e1bfff15 	stw	r6,-4(fp)
	JSAMPROW elemptr;
	int ctr;

	/* Pass 1: process rows. */

	dataptr = data;
 8011ca8:	e0bffd17 	ldw	r2,-12(fp)
 8011cac:	e0bfe715 	stw	r2,-100(fp)
	for (ctr = 0; ctr < DCTSIZE; ctr++) {
 8011cb0:	e03fe815 	stw	zero,-96(fp)
 8011cb4:	00011806 	br	8012118 <jpeg_fdct_float+0x490>
		elemptr = sample_data[ctr] + start_col;
 8011cb8:	e0bfe817 	ldw	r2,-96(fp)
 8011cbc:	1085883a 	add	r2,r2,r2
 8011cc0:	1085883a 	add	r2,r2,r2
 8011cc4:	e0fffe17 	ldw	r3,-8(fp)
 8011cc8:	1885883a 	add	r2,r3,r2
 8011ccc:	10c00017 	ldw	r3,0(r2)
 8011cd0:	e0bfff17 	ldw	r2,-4(fp)
 8011cd4:	1885883a 	add	r2,r3,r2
 8011cd8:	e0bfe915 	stw	r2,-92(fp)

		/* Load data into workspace */
		tmp0 = (FAST_FLOAT) (GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[7]));
 8011cdc:	e0bfe917 	ldw	r2,-92(fp)
 8011ce0:	10800003 	ldbu	r2,0(r2)
 8011ce4:	10c03fcc 	andi	r3,r2,255
 8011ce8:	e0bfe917 	ldw	r2,-92(fp)
 8011cec:	108001c4 	addi	r2,r2,7
 8011cf0:	10800003 	ldbu	r2,0(r2)
 8011cf4:	10803fcc 	andi	r2,r2,255
 8011cf8:	1885883a 	add	r2,r3,r2
 8011cfc:	1009883a 	mov	r4,r2
 8011d00:	802b98c0 	call	802b98c <__floatsisf>
 8011d04:	1007883a 	mov	r3,r2
 8011d08:	e0ffea15 	stw	r3,-88(fp)
		tmp7 = (FAST_FLOAT) (GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[7]));
 8011d0c:	e0bfe917 	ldw	r2,-92(fp)
 8011d10:	10800003 	ldbu	r2,0(r2)
 8011d14:	10c03fcc 	andi	r3,r2,255
 8011d18:	e0bfe917 	ldw	r2,-92(fp)
 8011d1c:	108001c4 	addi	r2,r2,7
 8011d20:	10800003 	ldbu	r2,0(r2)
 8011d24:	10803fcc 	andi	r2,r2,255
 8011d28:	1885c83a 	sub	r2,r3,r2
 8011d2c:	1009883a 	mov	r4,r2
 8011d30:	802b98c0 	call	802b98c <__floatsisf>
 8011d34:	1007883a 	mov	r3,r2
 8011d38:	e0ffeb15 	stw	r3,-84(fp)
		tmp1 = (FAST_FLOAT) (GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[6]));
 8011d3c:	e0bfe917 	ldw	r2,-92(fp)
 8011d40:	10800044 	addi	r2,r2,1
 8011d44:	10800003 	ldbu	r2,0(r2)
 8011d48:	10c03fcc 	andi	r3,r2,255
 8011d4c:	e0bfe917 	ldw	r2,-92(fp)
 8011d50:	10800184 	addi	r2,r2,6
 8011d54:	10800003 	ldbu	r2,0(r2)
 8011d58:	10803fcc 	andi	r2,r2,255
 8011d5c:	1885883a 	add	r2,r3,r2
 8011d60:	1009883a 	mov	r4,r2
 8011d64:	802b98c0 	call	802b98c <__floatsisf>
 8011d68:	1007883a 	mov	r3,r2
 8011d6c:	e0ffec15 	stw	r3,-80(fp)
		tmp6 = (FAST_FLOAT) (GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[6]));
 8011d70:	e0bfe917 	ldw	r2,-92(fp)
 8011d74:	10800044 	addi	r2,r2,1
 8011d78:	10800003 	ldbu	r2,0(r2)
 8011d7c:	10c03fcc 	andi	r3,r2,255
 8011d80:	e0bfe917 	ldw	r2,-92(fp)
 8011d84:	10800184 	addi	r2,r2,6
 8011d88:	10800003 	ldbu	r2,0(r2)
 8011d8c:	10803fcc 	andi	r2,r2,255
 8011d90:	1885c83a 	sub	r2,r3,r2
 8011d94:	1009883a 	mov	r4,r2
 8011d98:	802b98c0 	call	802b98c <__floatsisf>
 8011d9c:	1007883a 	mov	r3,r2
 8011da0:	e0ffed15 	stw	r3,-76(fp)
		tmp2 = (FAST_FLOAT) (GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[5]));
 8011da4:	e0bfe917 	ldw	r2,-92(fp)
 8011da8:	10800084 	addi	r2,r2,2
 8011dac:	10800003 	ldbu	r2,0(r2)
 8011db0:	10c03fcc 	andi	r3,r2,255
 8011db4:	e0bfe917 	ldw	r2,-92(fp)
 8011db8:	10800144 	addi	r2,r2,5
 8011dbc:	10800003 	ldbu	r2,0(r2)
 8011dc0:	10803fcc 	andi	r2,r2,255
 8011dc4:	1885883a 	add	r2,r3,r2
 8011dc8:	1009883a 	mov	r4,r2
 8011dcc:	802b98c0 	call	802b98c <__floatsisf>
 8011dd0:	1007883a 	mov	r3,r2
 8011dd4:	e0ffee15 	stw	r3,-72(fp)
		tmp5 = (FAST_FLOAT) (GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[5]));
 8011dd8:	e0bfe917 	ldw	r2,-92(fp)
 8011ddc:	10800084 	addi	r2,r2,2
 8011de0:	10800003 	ldbu	r2,0(r2)
 8011de4:	10c03fcc 	andi	r3,r2,255
 8011de8:	e0bfe917 	ldw	r2,-92(fp)
 8011dec:	10800144 	addi	r2,r2,5
 8011df0:	10800003 	ldbu	r2,0(r2)
 8011df4:	10803fcc 	andi	r2,r2,255
 8011df8:	1885c83a 	sub	r2,r3,r2
 8011dfc:	1009883a 	mov	r4,r2
 8011e00:	802b98c0 	call	802b98c <__floatsisf>
 8011e04:	1007883a 	mov	r3,r2
 8011e08:	e0ffef15 	stw	r3,-68(fp)
		tmp3 = (FAST_FLOAT) (GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[4]));
 8011e0c:	e0bfe917 	ldw	r2,-92(fp)
 8011e10:	108000c4 	addi	r2,r2,3
 8011e14:	10800003 	ldbu	r2,0(r2)
 8011e18:	10c03fcc 	andi	r3,r2,255
 8011e1c:	e0bfe917 	ldw	r2,-92(fp)
 8011e20:	10800104 	addi	r2,r2,4
 8011e24:	10800003 	ldbu	r2,0(r2)
 8011e28:	10803fcc 	andi	r2,r2,255
 8011e2c:	1885883a 	add	r2,r3,r2
 8011e30:	1009883a 	mov	r4,r2
 8011e34:	802b98c0 	call	802b98c <__floatsisf>
 8011e38:	1007883a 	mov	r3,r2
 8011e3c:	e0fff015 	stw	r3,-64(fp)
		tmp4 = (FAST_FLOAT) (GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[4]));
 8011e40:	e0bfe917 	ldw	r2,-92(fp)
 8011e44:	108000c4 	addi	r2,r2,3
 8011e48:	10800003 	ldbu	r2,0(r2)
 8011e4c:	10c03fcc 	andi	r3,r2,255
 8011e50:	e0bfe917 	ldw	r2,-92(fp)
 8011e54:	10800104 	addi	r2,r2,4
 8011e58:	10800003 	ldbu	r2,0(r2)
 8011e5c:	10803fcc 	andi	r2,r2,255
 8011e60:	1885c83a 	sub	r2,r3,r2
 8011e64:	1009883a 	mov	r4,r2
 8011e68:	802b98c0 	call	802b98c <__floatsisf>
 8011e6c:	1007883a 	mov	r3,r2
 8011e70:	e0fff115 	stw	r3,-60(fp)

		/* Even part */

		tmp10 = tmp0 + tmp3;	/* phase 2 */
 8011e74:	e13fea17 	ldw	r4,-88(fp)
 8011e78:	e17ff017 	ldw	r5,-64(fp)
 8011e7c:	802b7580 	call	802b758 <__addsf3>
 8011e80:	1007883a 	mov	r3,r2
 8011e84:	e0fff215 	stw	r3,-56(fp)
		tmp13 = tmp0 - tmp3;
 8011e88:	e13fea17 	ldw	r4,-88(fp)
 8011e8c:	e17ff017 	ldw	r5,-64(fp)
 8011e90:	802b7a40 	call	802b7a4 <__subsf3>
 8011e94:	1007883a 	mov	r3,r2
 8011e98:	e0fff315 	stw	r3,-52(fp)
		tmp11 = tmp1 + tmp2;
 8011e9c:	e13fec17 	ldw	r4,-80(fp)
 8011ea0:	e17fee17 	ldw	r5,-72(fp)
 8011ea4:	802b7580 	call	802b758 <__addsf3>
 8011ea8:	1007883a 	mov	r3,r2
 8011eac:	e0fff415 	stw	r3,-48(fp)
		tmp12 = tmp1 - tmp2;
 8011eb0:	e13fec17 	ldw	r4,-80(fp)
 8011eb4:	e17fee17 	ldw	r5,-72(fp)
 8011eb8:	802b7a40 	call	802b7a4 <__subsf3>
 8011ebc:	1007883a 	mov	r3,r2
 8011ec0:	e0fff515 	stw	r3,-44(fp)

		/* Apply unsigned->signed conversion */
		dataptr[0] = tmp10 + tmp11 - 8 * CENTERJSAMPLE; /* phase 3 */
 8011ec4:	e13ff217 	ldw	r4,-56(fp)
 8011ec8:	e17ff417 	ldw	r5,-48(fp)
 8011ecc:	802b7580 	call	802b758 <__addsf3>
 8011ed0:	1007883a 	mov	r3,r2
 8011ed4:	1805883a 	mov	r2,r3
 8011ed8:	1009883a 	mov	r4,r2
 8011edc:	01512034 	movhi	r5,17536
 8011ee0:	802b7a40 	call	802b7a4 <__subsf3>
 8011ee4:	1009883a 	mov	r4,r2
 8011ee8:	2007883a 	mov	r3,r4
 8011eec:	e0bfe717 	ldw	r2,-100(fp)
 8011ef0:	10c00015 	stw	r3,0(r2)
		dataptr[4] = tmp10 - tmp11;
 8011ef4:	e0bfe717 	ldw	r2,-100(fp)
 8011ef8:	14000404 	addi	r16,r2,16
 8011efc:	e13ff217 	ldw	r4,-56(fp)
 8011f00:	e17ff417 	ldw	r5,-48(fp)
 8011f04:	802b7a40 	call	802b7a4 <__subsf3>
 8011f08:	1007883a 	mov	r3,r2
 8011f0c:	1805883a 	mov	r2,r3
 8011f10:	80800015 	stw	r2,0(r16)

		z1 = (tmp12 + tmp13) * ((FAST_FLOAT) 0.707106781); /* c4 */
 8011f14:	e13ff517 	ldw	r4,-44(fp)
 8011f18:	e17ff317 	ldw	r5,-52(fp)
 8011f1c:	802b7580 	call	802b758 <__addsf3>
 8011f20:	1007883a 	mov	r3,r2
 8011f24:	1805883a 	mov	r2,r3
 8011f28:	1009883a 	mov	r4,r2
 8011f2c:	014fcd74 	movhi	r5,16181
 8011f30:	29413cc4 	addi	r5,r5,1267
 8011f34:	802b7fc0 	call	802b7fc <__mulsf3>
 8011f38:	1007883a 	mov	r3,r2
 8011f3c:	e0fff615 	stw	r3,-40(fp)
		dataptr[2] = tmp13 + z1;	/* phase 5 */
 8011f40:	e0bfe717 	ldw	r2,-100(fp)
 8011f44:	14000204 	addi	r16,r2,8
 8011f48:	e13ff317 	ldw	r4,-52(fp)
 8011f4c:	e17ff617 	ldw	r5,-40(fp)
 8011f50:	802b7580 	call	802b758 <__addsf3>
 8011f54:	1007883a 	mov	r3,r2
 8011f58:	1805883a 	mov	r2,r3
 8011f5c:	80800015 	stw	r2,0(r16)
		dataptr[6] = tmp13 - z1;
 8011f60:	e0bfe717 	ldw	r2,-100(fp)
 8011f64:	14000604 	addi	r16,r2,24
 8011f68:	e13ff317 	ldw	r4,-52(fp)
 8011f6c:	e17ff617 	ldw	r5,-40(fp)
 8011f70:	802b7a40 	call	802b7a4 <__subsf3>
 8011f74:	1007883a 	mov	r3,r2
 8011f78:	1805883a 	mov	r2,r3
 8011f7c:	80800015 	stw	r2,0(r16)

		/* Odd part */

		tmp10 = tmp4 + tmp5;	/* phase 2 */
 8011f80:	e13ff117 	ldw	r4,-60(fp)
 8011f84:	e17fef17 	ldw	r5,-68(fp)
 8011f88:	802b7580 	call	802b758 <__addsf3>
 8011f8c:	1007883a 	mov	r3,r2
 8011f90:	e0fff215 	stw	r3,-56(fp)
		tmp11 = tmp5 + tmp6;
 8011f94:	e13fef17 	ldw	r4,-68(fp)
 8011f98:	e17fed17 	ldw	r5,-76(fp)
 8011f9c:	802b7580 	call	802b758 <__addsf3>
 8011fa0:	1007883a 	mov	r3,r2
 8011fa4:	e0fff415 	stw	r3,-48(fp)
		tmp12 = tmp6 + tmp7;
 8011fa8:	e13fed17 	ldw	r4,-76(fp)
 8011fac:	e17feb17 	ldw	r5,-84(fp)
 8011fb0:	802b7580 	call	802b758 <__addsf3>
 8011fb4:	1007883a 	mov	r3,r2
 8011fb8:	e0fff515 	stw	r3,-44(fp)

		/* The rotator is modified from fig 4-8 to avoid extra negations. */
		z5 = (tmp10 - tmp12) * ((FAST_FLOAT) 0.382683433); /* c6 */
 8011fbc:	e13ff217 	ldw	r4,-56(fp)
 8011fc0:	e17ff517 	ldw	r5,-44(fp)
 8011fc4:	802b7a40 	call	802b7a4 <__subsf3>
 8011fc8:	1007883a 	mov	r3,r2
 8011fcc:	1805883a 	mov	r2,r3
 8011fd0:	1009883a 	mov	r4,r2
 8011fd4:	014fb134 	movhi	r5,16068
 8011fd8:	297bc544 	addi	r5,r5,-4331
 8011fdc:	802b7fc0 	call	802b7fc <__mulsf3>
 8011fe0:	1007883a 	mov	r3,r2
 8011fe4:	e0fff715 	stw	r3,-36(fp)
		z2 = ((FAST_FLOAT) 0.541196100) * tmp10 + z5; /* c2-c6 */
 8011fe8:	e13ff217 	ldw	r4,-56(fp)
 8011fec:	014fc2f4 	movhi	r5,16139
 8011ff0:	2962f504 	addi	r5,r5,-29740
 8011ff4:	802b7fc0 	call	802b7fc <__mulsf3>
 8011ff8:	1007883a 	mov	r3,r2
 8011ffc:	1805883a 	mov	r2,r3
 8012000:	1009883a 	mov	r4,r2
 8012004:	e17ff717 	ldw	r5,-36(fp)
 8012008:	802b7580 	call	802b758 <__addsf3>
 801200c:	1007883a 	mov	r3,r2
 8012010:	e0fff815 	stw	r3,-32(fp)
		z4 = ((FAST_FLOAT) 1.306562965) * tmp12 + z5; /* c2+c6 */
 8012014:	e13ff517 	ldw	r4,-44(fp)
 8012018:	014fe9f4 	movhi	r5,16295
 801201c:	294f5d44 	addi	r5,r5,15733
 8012020:	802b7fc0 	call	802b7fc <__mulsf3>
 8012024:	1007883a 	mov	r3,r2
 8012028:	1805883a 	mov	r2,r3
 801202c:	1009883a 	mov	r4,r2
 8012030:	e17ff717 	ldw	r5,-36(fp)
 8012034:	802b7580 	call	802b758 <__addsf3>
 8012038:	1007883a 	mov	r3,r2
 801203c:	e0fff915 	stw	r3,-28(fp)
		z3 = tmp11 * ((FAST_FLOAT) 0.707106781); /* c4 */
 8012040:	e13ff417 	ldw	r4,-48(fp)
 8012044:	014fcd74 	movhi	r5,16181
 8012048:	29413cc4 	addi	r5,r5,1267
 801204c:	802b7fc0 	call	802b7fc <__mulsf3>
 8012050:	1007883a 	mov	r3,r2
 8012054:	e0fffa15 	stw	r3,-24(fp)

		z11 = tmp7 + z3;		/* phase 5 */
 8012058:	e13feb17 	ldw	r4,-84(fp)
 801205c:	e17ffa17 	ldw	r5,-24(fp)
 8012060:	802b7580 	call	802b758 <__addsf3>
 8012064:	1007883a 	mov	r3,r2
 8012068:	e0fffb15 	stw	r3,-20(fp)
		z13 = tmp7 - z3;
 801206c:	e13feb17 	ldw	r4,-84(fp)
 8012070:	e17ffa17 	ldw	r5,-24(fp)
 8012074:	802b7a40 	call	802b7a4 <__subsf3>
 8012078:	1007883a 	mov	r3,r2
 801207c:	e0fffc15 	stw	r3,-16(fp)

		dataptr[5] = z13 + z2;	/* phase 6 */
 8012080:	e0bfe717 	ldw	r2,-100(fp)
 8012084:	14000504 	addi	r16,r2,20
 8012088:	e13ffc17 	ldw	r4,-16(fp)
 801208c:	e17ff817 	ldw	r5,-32(fp)
 8012090:	802b7580 	call	802b758 <__addsf3>
 8012094:	1007883a 	mov	r3,r2
 8012098:	1805883a 	mov	r2,r3
 801209c:	80800015 	stw	r2,0(r16)
		dataptr[3] = z13 - z2;
 80120a0:	e0bfe717 	ldw	r2,-100(fp)
 80120a4:	14000304 	addi	r16,r2,12
 80120a8:	e13ffc17 	ldw	r4,-16(fp)
 80120ac:	e17ff817 	ldw	r5,-32(fp)
 80120b0:	802b7a40 	call	802b7a4 <__subsf3>
 80120b4:	1007883a 	mov	r3,r2
 80120b8:	1805883a 	mov	r2,r3
 80120bc:	80800015 	stw	r2,0(r16)
		dataptr[1] = z11 + z4;
 80120c0:	e0bfe717 	ldw	r2,-100(fp)
 80120c4:	14000104 	addi	r16,r2,4
 80120c8:	e13ffb17 	ldw	r4,-20(fp)
 80120cc:	e17ff917 	ldw	r5,-28(fp)
 80120d0:	802b7580 	call	802b758 <__addsf3>
 80120d4:	1007883a 	mov	r3,r2
 80120d8:	1805883a 	mov	r2,r3
 80120dc:	80800015 	stw	r2,0(r16)
		dataptr[7] = z11 - z4;
 80120e0:	e0bfe717 	ldw	r2,-100(fp)
 80120e4:	14000704 	addi	r16,r2,28
 80120e8:	e13ffb17 	ldw	r4,-20(fp)
 80120ec:	e17ff917 	ldw	r5,-28(fp)
 80120f0:	802b7a40 	call	802b7a4 <__subsf3>
 80120f4:	1007883a 	mov	r3,r2
 80120f8:	1805883a 	mov	r2,r3
 80120fc:	80800015 	stw	r2,0(r16)

		dataptr += DCTSIZE;		/* advance pointer to next row */
 8012100:	e0bfe717 	ldw	r2,-100(fp)
 8012104:	10800804 	addi	r2,r2,32
 8012108:	e0bfe715 	stw	r2,-100(fp)
	int ctr;

	/* Pass 1: process rows. */

	dataptr = data;
	for (ctr = 0; ctr < DCTSIZE; ctr++) {
 801210c:	e0bfe817 	ldw	r2,-96(fp)
 8012110:	10800044 	addi	r2,r2,1
 8012114:	e0bfe815 	stw	r2,-96(fp)
 8012118:	e0bfe817 	ldw	r2,-96(fp)
 801211c:	10800210 	cmplti	r2,r2,8
 8012120:	103ee51e 	bne	r2,zero,8011cb8 <jpeg_fdct_float+0x30>
		dataptr += DCTSIZE;		/* advance pointer to next row */
	}

	/* Pass 2: process columns. */

	dataptr = data;
 8012124:	e0bffd17 	ldw	r2,-12(fp)
 8012128:	e0bfe715 	stw	r2,-100(fp)
	for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 801212c:	008001c4 	movi	r2,7
 8012130:	e0bfe815 	stw	r2,-96(fp)
 8012134:	0000fa06 	br	8012520 <jpeg_fdct_float+0x898>
		tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*7];
 8012138:	e0bfe717 	ldw	r2,-100(fp)
 801213c:	10c00017 	ldw	r3,0(r2)
 8012140:	e0bfe717 	ldw	r2,-100(fp)
 8012144:	11003804 	addi	r4,r2,224
 8012148:	20800017 	ldw	r2,0(r4)
 801214c:	1809883a 	mov	r4,r3
 8012150:	100b883a 	mov	r5,r2
 8012154:	802b7580 	call	802b758 <__addsf3>
 8012158:	1007883a 	mov	r3,r2
 801215c:	e0ffea15 	stw	r3,-88(fp)
		tmp7 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*7];
 8012160:	e0bfe717 	ldw	r2,-100(fp)
 8012164:	10c00017 	ldw	r3,0(r2)
 8012168:	e0bfe717 	ldw	r2,-100(fp)
 801216c:	11003804 	addi	r4,r2,224
 8012170:	20800017 	ldw	r2,0(r4)
 8012174:	1809883a 	mov	r4,r3
 8012178:	100b883a 	mov	r5,r2
 801217c:	802b7a40 	call	802b7a4 <__subsf3>
 8012180:	1007883a 	mov	r3,r2
 8012184:	e0ffeb15 	stw	r3,-84(fp)
		tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*6];
 8012188:	e0bfe717 	ldw	r2,-100(fp)
 801218c:	10800804 	addi	r2,r2,32
 8012190:	10c00017 	ldw	r3,0(r2)
 8012194:	e0bfe717 	ldw	r2,-100(fp)
 8012198:	11003004 	addi	r4,r2,192
 801219c:	20800017 	ldw	r2,0(r4)
 80121a0:	1809883a 	mov	r4,r3
 80121a4:	100b883a 	mov	r5,r2
 80121a8:	802b7580 	call	802b758 <__addsf3>
 80121ac:	1007883a 	mov	r3,r2
 80121b0:	e0ffec15 	stw	r3,-80(fp)
		tmp6 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*6];
 80121b4:	e0bfe717 	ldw	r2,-100(fp)
 80121b8:	10800804 	addi	r2,r2,32
 80121bc:	10c00017 	ldw	r3,0(r2)
 80121c0:	e0bfe717 	ldw	r2,-100(fp)
 80121c4:	11003004 	addi	r4,r2,192
 80121c8:	20800017 	ldw	r2,0(r4)
 80121cc:	1809883a 	mov	r4,r3
 80121d0:	100b883a 	mov	r5,r2
 80121d4:	802b7a40 	call	802b7a4 <__subsf3>
 80121d8:	1007883a 	mov	r3,r2
 80121dc:	e0ffed15 	stw	r3,-76(fp)
		tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*5];
 80121e0:	e0bfe717 	ldw	r2,-100(fp)
 80121e4:	10801004 	addi	r2,r2,64
 80121e8:	10c00017 	ldw	r3,0(r2)
 80121ec:	e0bfe717 	ldw	r2,-100(fp)
 80121f0:	11002804 	addi	r4,r2,160
 80121f4:	20800017 	ldw	r2,0(r4)
 80121f8:	1809883a 	mov	r4,r3
 80121fc:	100b883a 	mov	r5,r2
 8012200:	802b7580 	call	802b758 <__addsf3>
 8012204:	1007883a 	mov	r3,r2
 8012208:	e0ffee15 	stw	r3,-72(fp)
		tmp5 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*5];
 801220c:	e0bfe717 	ldw	r2,-100(fp)
 8012210:	10801004 	addi	r2,r2,64
 8012214:	10c00017 	ldw	r3,0(r2)
 8012218:	e0bfe717 	ldw	r2,-100(fp)
 801221c:	11002804 	addi	r4,r2,160
 8012220:	20800017 	ldw	r2,0(r4)
 8012224:	1809883a 	mov	r4,r3
 8012228:	100b883a 	mov	r5,r2
 801222c:	802b7a40 	call	802b7a4 <__subsf3>
 8012230:	1007883a 	mov	r3,r2
 8012234:	e0ffef15 	stw	r3,-68(fp)
		tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*4];
 8012238:	e0bfe717 	ldw	r2,-100(fp)
 801223c:	10801804 	addi	r2,r2,96
 8012240:	10c00017 	ldw	r3,0(r2)
 8012244:	e0bfe717 	ldw	r2,-100(fp)
 8012248:	11002004 	addi	r4,r2,128
 801224c:	20800017 	ldw	r2,0(r4)
 8012250:	1809883a 	mov	r4,r3
 8012254:	100b883a 	mov	r5,r2
 8012258:	802b7580 	call	802b758 <__addsf3>
 801225c:	1007883a 	mov	r3,r2
 8012260:	e0fff015 	stw	r3,-64(fp)
		tmp4 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*4];
 8012264:	e0bfe717 	ldw	r2,-100(fp)
 8012268:	10801804 	addi	r2,r2,96
 801226c:	10c00017 	ldw	r3,0(r2)
 8012270:	e0bfe717 	ldw	r2,-100(fp)
 8012274:	11002004 	addi	r4,r2,128
 8012278:	20800017 	ldw	r2,0(r4)
 801227c:	1809883a 	mov	r4,r3
 8012280:	100b883a 	mov	r5,r2
 8012284:	802b7a40 	call	802b7a4 <__subsf3>
 8012288:	1007883a 	mov	r3,r2
 801228c:	e0fff115 	stw	r3,-60(fp)

		/* Even part */

		tmp10 = tmp0 + tmp3;	/* phase 2 */
 8012290:	e13fea17 	ldw	r4,-88(fp)
 8012294:	e17ff017 	ldw	r5,-64(fp)
 8012298:	802b7580 	call	802b758 <__addsf3>
 801229c:	1007883a 	mov	r3,r2
 80122a0:	e0fff215 	stw	r3,-56(fp)
		tmp13 = tmp0 - tmp3;
 80122a4:	e13fea17 	ldw	r4,-88(fp)
 80122a8:	e17ff017 	ldw	r5,-64(fp)
 80122ac:	802b7a40 	call	802b7a4 <__subsf3>
 80122b0:	1007883a 	mov	r3,r2
 80122b4:	e0fff315 	stw	r3,-52(fp)
		tmp11 = tmp1 + tmp2;
 80122b8:	e13fec17 	ldw	r4,-80(fp)
 80122bc:	e17fee17 	ldw	r5,-72(fp)
 80122c0:	802b7580 	call	802b758 <__addsf3>
 80122c4:	1007883a 	mov	r3,r2
 80122c8:	e0fff415 	stw	r3,-48(fp)
		tmp12 = tmp1 - tmp2;
 80122cc:	e13fec17 	ldw	r4,-80(fp)
 80122d0:	e17fee17 	ldw	r5,-72(fp)
 80122d4:	802b7a40 	call	802b7a4 <__subsf3>
 80122d8:	1007883a 	mov	r3,r2
 80122dc:	e0fff515 	stw	r3,-44(fp)

		dataptr[DCTSIZE*0] = tmp10 + tmp11; /* phase 3 */
 80122e0:	e13ff217 	ldw	r4,-56(fp)
 80122e4:	e17ff417 	ldw	r5,-48(fp)
 80122e8:	802b7580 	call	802b758 <__addsf3>
 80122ec:	1009883a 	mov	r4,r2
 80122f0:	2007883a 	mov	r3,r4
 80122f4:	e0bfe717 	ldw	r2,-100(fp)
 80122f8:	10c00015 	stw	r3,0(r2)
		dataptr[DCTSIZE*4] = tmp10 - tmp11;
 80122fc:	e0bfe717 	ldw	r2,-100(fp)
 8012300:	14002004 	addi	r16,r2,128
 8012304:	e13ff217 	ldw	r4,-56(fp)
 8012308:	e17ff417 	ldw	r5,-48(fp)
 801230c:	802b7a40 	call	802b7a4 <__subsf3>
 8012310:	1007883a 	mov	r3,r2
 8012314:	1805883a 	mov	r2,r3
 8012318:	80800015 	stw	r2,0(r16)

		z1 = (tmp12 + tmp13) * ((FAST_FLOAT) 0.707106781); /* c4 */
 801231c:	e13ff517 	ldw	r4,-44(fp)
 8012320:	e17ff317 	ldw	r5,-52(fp)
 8012324:	802b7580 	call	802b758 <__addsf3>
 8012328:	1007883a 	mov	r3,r2
 801232c:	1805883a 	mov	r2,r3
 8012330:	1009883a 	mov	r4,r2
 8012334:	014fcd74 	movhi	r5,16181
 8012338:	29413cc4 	addi	r5,r5,1267
 801233c:	802b7fc0 	call	802b7fc <__mulsf3>
 8012340:	1007883a 	mov	r3,r2
 8012344:	e0fff615 	stw	r3,-40(fp)
		dataptr[DCTSIZE*2] = tmp13 + z1; /* phase 5 */
 8012348:	e0bfe717 	ldw	r2,-100(fp)
 801234c:	14001004 	addi	r16,r2,64
 8012350:	e13ff317 	ldw	r4,-52(fp)
 8012354:	e17ff617 	ldw	r5,-40(fp)
 8012358:	802b7580 	call	802b758 <__addsf3>
 801235c:	1007883a 	mov	r3,r2
 8012360:	1805883a 	mov	r2,r3
 8012364:	80800015 	stw	r2,0(r16)
		dataptr[DCTSIZE*6] = tmp13 - z1;
 8012368:	e0bfe717 	ldw	r2,-100(fp)
 801236c:	14003004 	addi	r16,r2,192
 8012370:	e13ff317 	ldw	r4,-52(fp)
 8012374:	e17ff617 	ldw	r5,-40(fp)
 8012378:	802b7a40 	call	802b7a4 <__subsf3>
 801237c:	1007883a 	mov	r3,r2
 8012380:	1805883a 	mov	r2,r3
 8012384:	80800015 	stw	r2,0(r16)

		/* Odd part */

		tmp10 = tmp4 + tmp5;	/* phase 2 */
 8012388:	e13ff117 	ldw	r4,-60(fp)
 801238c:	e17fef17 	ldw	r5,-68(fp)
 8012390:	802b7580 	call	802b758 <__addsf3>
 8012394:	1007883a 	mov	r3,r2
 8012398:	e0fff215 	stw	r3,-56(fp)
		tmp11 = tmp5 + tmp6;
 801239c:	e13fef17 	ldw	r4,-68(fp)
 80123a0:	e17fed17 	ldw	r5,-76(fp)
 80123a4:	802b7580 	call	802b758 <__addsf3>
 80123a8:	1007883a 	mov	r3,r2
 80123ac:	e0fff415 	stw	r3,-48(fp)
		tmp12 = tmp6 + tmp7;
 80123b0:	e13fed17 	ldw	r4,-76(fp)
 80123b4:	e17feb17 	ldw	r5,-84(fp)
 80123b8:	802b7580 	call	802b758 <__addsf3>
 80123bc:	1007883a 	mov	r3,r2
 80123c0:	e0fff515 	stw	r3,-44(fp)

		/* The rotator is modified from fig 4-8 to avoid extra negations. */
		z5 = (tmp10 - tmp12) * ((FAST_FLOAT) 0.382683433); /* c6 */
 80123c4:	e13ff217 	ldw	r4,-56(fp)
 80123c8:	e17ff517 	ldw	r5,-44(fp)
 80123cc:	802b7a40 	call	802b7a4 <__subsf3>
 80123d0:	1007883a 	mov	r3,r2
 80123d4:	1805883a 	mov	r2,r3
 80123d8:	1009883a 	mov	r4,r2
 80123dc:	014fb134 	movhi	r5,16068
 80123e0:	297bc544 	addi	r5,r5,-4331
 80123e4:	802b7fc0 	call	802b7fc <__mulsf3>
 80123e8:	1007883a 	mov	r3,r2
 80123ec:	e0fff715 	stw	r3,-36(fp)
		z2 = ((FAST_FLOAT) 0.541196100) * tmp10 + z5; /* c2-c6 */
 80123f0:	e13ff217 	ldw	r4,-56(fp)
 80123f4:	014fc2f4 	movhi	r5,16139
 80123f8:	2962f504 	addi	r5,r5,-29740
 80123fc:	802b7fc0 	call	802b7fc <__mulsf3>
 8012400:	1007883a 	mov	r3,r2
 8012404:	1805883a 	mov	r2,r3
 8012408:	1009883a 	mov	r4,r2
 801240c:	e17ff717 	ldw	r5,-36(fp)
 8012410:	802b7580 	call	802b758 <__addsf3>
 8012414:	1007883a 	mov	r3,r2
 8012418:	e0fff815 	stw	r3,-32(fp)
		z4 = ((FAST_FLOAT) 1.306562965) * tmp12 + z5; /* c2+c6 */
 801241c:	e13ff517 	ldw	r4,-44(fp)
 8012420:	014fe9f4 	movhi	r5,16295
 8012424:	294f5d44 	addi	r5,r5,15733
 8012428:	802b7fc0 	call	802b7fc <__mulsf3>
 801242c:	1007883a 	mov	r3,r2
 8012430:	1805883a 	mov	r2,r3
 8012434:	1009883a 	mov	r4,r2
 8012438:	e17ff717 	ldw	r5,-36(fp)
 801243c:	802b7580 	call	802b758 <__addsf3>
 8012440:	1007883a 	mov	r3,r2
 8012444:	e0fff915 	stw	r3,-28(fp)
		z3 = tmp11 * ((FAST_FLOAT) 0.707106781); /* c4 */
 8012448:	e13ff417 	ldw	r4,-48(fp)
 801244c:	014fcd74 	movhi	r5,16181
 8012450:	29413cc4 	addi	r5,r5,1267
 8012454:	802b7fc0 	call	802b7fc <__mulsf3>
 8012458:	1007883a 	mov	r3,r2
 801245c:	e0fffa15 	stw	r3,-24(fp)

		z11 = tmp7 + z3;		/* phase 5 */
 8012460:	e13feb17 	ldw	r4,-84(fp)
 8012464:	e17ffa17 	ldw	r5,-24(fp)
 8012468:	802b7580 	call	802b758 <__addsf3>
 801246c:	1007883a 	mov	r3,r2
 8012470:	e0fffb15 	stw	r3,-20(fp)
		z13 = tmp7 - z3;
 8012474:	e13feb17 	ldw	r4,-84(fp)
 8012478:	e17ffa17 	ldw	r5,-24(fp)
 801247c:	802b7a40 	call	802b7a4 <__subsf3>
 8012480:	1007883a 	mov	r3,r2
 8012484:	e0fffc15 	stw	r3,-16(fp)

		dataptr[DCTSIZE*5] = z13 + z2; /* phase 6 */
 8012488:	e0bfe717 	ldw	r2,-100(fp)
 801248c:	14002804 	addi	r16,r2,160
 8012490:	e13ffc17 	ldw	r4,-16(fp)
 8012494:	e17ff817 	ldw	r5,-32(fp)
 8012498:	802b7580 	call	802b758 <__addsf3>
 801249c:	1007883a 	mov	r3,r2
 80124a0:	1805883a 	mov	r2,r3
 80124a4:	80800015 	stw	r2,0(r16)
		dataptr[DCTSIZE*3] = z13 - z2;
 80124a8:	e0bfe717 	ldw	r2,-100(fp)
 80124ac:	14001804 	addi	r16,r2,96
 80124b0:	e13ffc17 	ldw	r4,-16(fp)
 80124b4:	e17ff817 	ldw	r5,-32(fp)
 80124b8:	802b7a40 	call	802b7a4 <__subsf3>
 80124bc:	1007883a 	mov	r3,r2
 80124c0:	1805883a 	mov	r2,r3
 80124c4:	80800015 	stw	r2,0(r16)
		dataptr[DCTSIZE*1] = z11 + z4;
 80124c8:	e0bfe717 	ldw	r2,-100(fp)
 80124cc:	14000804 	addi	r16,r2,32
 80124d0:	e13ffb17 	ldw	r4,-20(fp)
 80124d4:	e17ff917 	ldw	r5,-28(fp)
 80124d8:	802b7580 	call	802b758 <__addsf3>
 80124dc:	1007883a 	mov	r3,r2
 80124e0:	1805883a 	mov	r2,r3
 80124e4:	80800015 	stw	r2,0(r16)
		dataptr[DCTSIZE*7] = z11 - z4;
 80124e8:	e0bfe717 	ldw	r2,-100(fp)
 80124ec:	14003804 	addi	r16,r2,224
 80124f0:	e13ffb17 	ldw	r4,-20(fp)
 80124f4:	e17ff917 	ldw	r5,-28(fp)
 80124f8:	802b7a40 	call	802b7a4 <__subsf3>
 80124fc:	1007883a 	mov	r3,r2
 8012500:	1805883a 	mov	r2,r3
 8012504:	80800015 	stw	r2,0(r16)

		dataptr++;			/* advance pointer to next column */
 8012508:	e0bfe717 	ldw	r2,-100(fp)
 801250c:	10800104 	addi	r2,r2,4
 8012510:	e0bfe715 	stw	r2,-100(fp)
	}

	/* Pass 2: process columns. */

	dataptr = data;
	for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 8012514:	e0bfe817 	ldw	r2,-96(fp)
 8012518:	10bfffc4 	addi	r2,r2,-1
 801251c:	e0bfe815 	stw	r2,-96(fp)
 8012520:	e0bfe817 	ldw	r2,-96(fp)
 8012524:	103f040e 	bge	r2,zero,8012138 <jpeg_fdct_float+0x4b0>
		dataptr[DCTSIZE*1] = z11 + z4;
		dataptr[DCTSIZE*7] = z11 - z4;

		dataptr++;			/* advance pointer to next column */
	}
}
 8012528:	e037883a 	mov	sp,fp
 801252c:	dfc00217 	ldw	ra,8(sp)
 8012530:	df000117 	ldw	fp,4(sp)
 8012534:	dc000017 	ldw	r16,0(sp)
 8012538:	dec00304 	addi	sp,sp,12
 801253c:	f800283a 	ret

08012540 <jpeg_fdct_ifast>:
	* Perform the forward DCT on one block of samples.
	*/

	GLOBAL(void)
	jpeg_fdct_ifast (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 8012540:	deffe504 	addi	sp,sp,-108
 8012544:	dfc01a15 	stw	ra,104(sp)
 8012548:	df001915 	stw	fp,100(sp)
 801254c:	df001904 	addi	fp,sp,100
 8012550:	e13ffd15 	stw	r4,-12(fp)
 8012554:	e17ffe15 	stw	r5,-8(fp)
 8012558:	e1bfff15 	stw	r6,-4(fp)
	int ctr;
	SHIFT_TEMPS

		/* Pass 1: process rows. */

		dataptr = data;
 801255c:	e0bffd17 	ldw	r2,-12(fp)
 8012560:	e0bfe715 	stw	r2,-100(fp)
	for (ctr = 0; ctr < DCTSIZE; ctr++) {
 8012564:	e03fe815 	stw	zero,-96(fp)
 8012568:	0000d406 	br	80128bc <jpeg_fdct_ifast+0x37c>
		elemptr = sample_data[ctr] + start_col;
 801256c:	e0bfe817 	ldw	r2,-96(fp)
 8012570:	1085883a 	add	r2,r2,r2
 8012574:	1085883a 	add	r2,r2,r2
 8012578:	e0fffe17 	ldw	r3,-8(fp)
 801257c:	1885883a 	add	r2,r3,r2
 8012580:	10c00017 	ldw	r3,0(r2)
 8012584:	e0bfff17 	ldw	r2,-4(fp)
 8012588:	1885883a 	add	r2,r3,r2
 801258c:	e0bfe915 	stw	r2,-92(fp)

		/* Load data into workspace */
		tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[7]);
 8012590:	e0bfe917 	ldw	r2,-92(fp)
 8012594:	10800003 	ldbu	r2,0(r2)
 8012598:	10c03fcc 	andi	r3,r2,255
 801259c:	e0bfe917 	ldw	r2,-92(fp)
 80125a0:	108001c4 	addi	r2,r2,7
 80125a4:	10800003 	ldbu	r2,0(r2)
 80125a8:	10803fcc 	andi	r2,r2,255
 80125ac:	1885883a 	add	r2,r3,r2
 80125b0:	e0bfea15 	stw	r2,-88(fp)
		tmp7 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[7]);
 80125b4:	e0bfe917 	ldw	r2,-92(fp)
 80125b8:	10800003 	ldbu	r2,0(r2)
 80125bc:	10c03fcc 	andi	r3,r2,255
 80125c0:	e0bfe917 	ldw	r2,-92(fp)
 80125c4:	108001c4 	addi	r2,r2,7
 80125c8:	10800003 	ldbu	r2,0(r2)
 80125cc:	10803fcc 	andi	r2,r2,255
 80125d0:	1885c83a 	sub	r2,r3,r2
 80125d4:	e0bfeb15 	stw	r2,-84(fp)
		tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[6]);
 80125d8:	e0bfe917 	ldw	r2,-92(fp)
 80125dc:	10800044 	addi	r2,r2,1
 80125e0:	10800003 	ldbu	r2,0(r2)
 80125e4:	10c03fcc 	andi	r3,r2,255
 80125e8:	e0bfe917 	ldw	r2,-92(fp)
 80125ec:	10800184 	addi	r2,r2,6
 80125f0:	10800003 	ldbu	r2,0(r2)
 80125f4:	10803fcc 	andi	r2,r2,255
 80125f8:	1885883a 	add	r2,r3,r2
 80125fc:	e0bfec15 	stw	r2,-80(fp)
		tmp6 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[6]);
 8012600:	e0bfe917 	ldw	r2,-92(fp)
 8012604:	10800044 	addi	r2,r2,1
 8012608:	10800003 	ldbu	r2,0(r2)
 801260c:	10c03fcc 	andi	r3,r2,255
 8012610:	e0bfe917 	ldw	r2,-92(fp)
 8012614:	10800184 	addi	r2,r2,6
 8012618:	10800003 	ldbu	r2,0(r2)
 801261c:	10803fcc 	andi	r2,r2,255
 8012620:	1885c83a 	sub	r2,r3,r2
 8012624:	e0bfed15 	stw	r2,-76(fp)
		tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[5]);
 8012628:	e0bfe917 	ldw	r2,-92(fp)
 801262c:	10800084 	addi	r2,r2,2
 8012630:	10800003 	ldbu	r2,0(r2)
 8012634:	10c03fcc 	andi	r3,r2,255
 8012638:	e0bfe917 	ldw	r2,-92(fp)
 801263c:	10800144 	addi	r2,r2,5
 8012640:	10800003 	ldbu	r2,0(r2)
 8012644:	10803fcc 	andi	r2,r2,255
 8012648:	1885883a 	add	r2,r3,r2
 801264c:	e0bfee15 	stw	r2,-72(fp)
		tmp5 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[5]);
 8012650:	e0bfe917 	ldw	r2,-92(fp)
 8012654:	10800084 	addi	r2,r2,2
 8012658:	10800003 	ldbu	r2,0(r2)
 801265c:	10c03fcc 	andi	r3,r2,255
 8012660:	e0bfe917 	ldw	r2,-92(fp)
 8012664:	10800144 	addi	r2,r2,5
 8012668:	10800003 	ldbu	r2,0(r2)
 801266c:	10803fcc 	andi	r2,r2,255
 8012670:	1885c83a 	sub	r2,r3,r2
 8012674:	e0bfef15 	stw	r2,-68(fp)
		tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[4]);
 8012678:	e0bfe917 	ldw	r2,-92(fp)
 801267c:	108000c4 	addi	r2,r2,3
 8012680:	10800003 	ldbu	r2,0(r2)
 8012684:	10c03fcc 	andi	r3,r2,255
 8012688:	e0bfe917 	ldw	r2,-92(fp)
 801268c:	10800104 	addi	r2,r2,4
 8012690:	10800003 	ldbu	r2,0(r2)
 8012694:	10803fcc 	andi	r2,r2,255
 8012698:	1885883a 	add	r2,r3,r2
 801269c:	e0bff015 	stw	r2,-64(fp)
		tmp4 = GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[4]);
 80126a0:	e0bfe917 	ldw	r2,-92(fp)
 80126a4:	108000c4 	addi	r2,r2,3
 80126a8:	10800003 	ldbu	r2,0(r2)
 80126ac:	10c03fcc 	andi	r3,r2,255
 80126b0:	e0bfe917 	ldw	r2,-92(fp)
 80126b4:	10800104 	addi	r2,r2,4
 80126b8:	10800003 	ldbu	r2,0(r2)
 80126bc:	10803fcc 	andi	r2,r2,255
 80126c0:	1885c83a 	sub	r2,r3,r2
 80126c4:	e0bff115 	stw	r2,-60(fp)

		/* Even part */

		tmp10 = tmp0 + tmp3;	/* phase 2 */
 80126c8:	e0ffea17 	ldw	r3,-88(fp)
 80126cc:	e0bff017 	ldw	r2,-64(fp)
 80126d0:	1885883a 	add	r2,r3,r2
 80126d4:	e0bff215 	stw	r2,-56(fp)
		tmp13 = tmp0 - tmp3;
 80126d8:	e0ffea17 	ldw	r3,-88(fp)
 80126dc:	e0bff017 	ldw	r2,-64(fp)
 80126e0:	1885c83a 	sub	r2,r3,r2
 80126e4:	e0bff315 	stw	r2,-52(fp)
		tmp11 = tmp1 + tmp2;
 80126e8:	e0ffec17 	ldw	r3,-80(fp)
 80126ec:	e0bfee17 	ldw	r2,-72(fp)
 80126f0:	1885883a 	add	r2,r3,r2
 80126f4:	e0bff415 	stw	r2,-48(fp)
		tmp12 = tmp1 - tmp2;
 80126f8:	e0ffec17 	ldw	r3,-80(fp)
 80126fc:	e0bfee17 	ldw	r2,-72(fp)
 8012700:	1885c83a 	sub	r2,r3,r2
 8012704:	e0bff515 	stw	r2,-44(fp)

		/* Apply unsigned->signed conversion */
		dataptr[0] = tmp10 + tmp11 - 8 * CENTERJSAMPLE; /* phase 3 */
 8012708:	e0fff217 	ldw	r3,-56(fp)
 801270c:	e0bff417 	ldw	r2,-48(fp)
 8012710:	1885883a 	add	r2,r3,r2
 8012714:	10ff0004 	addi	r3,r2,-1024
 8012718:	e0bfe717 	ldw	r2,-100(fp)
 801271c:	10c00015 	stw	r3,0(r2)
		dataptr[4] = tmp10 - tmp11;
 8012720:	e0bfe717 	ldw	r2,-100(fp)
 8012724:	10800404 	addi	r2,r2,16
 8012728:	e13ff217 	ldw	r4,-56(fp)
 801272c:	e0fff417 	ldw	r3,-48(fp)
 8012730:	20c7c83a 	sub	r3,r4,r3
 8012734:	10c00015 	stw	r3,0(r2)

		z1 = MULTIPLY(tmp12 + tmp13, FIX_0_707106781); /* c4 */
 8012738:	e0fff517 	ldw	r3,-44(fp)
 801273c:	e0bff317 	ldw	r2,-52(fp)
 8012740:	1885883a 	add	r2,r3,r2
 8012744:	1009883a 	mov	r4,r2
 8012748:	01402d44 	movi	r5,181
 801274c:	802c2180 	call	802c218 <__mulsi3>
 8012750:	1005d23a 	srai	r2,r2,8
 8012754:	e0bff615 	stw	r2,-40(fp)
		dataptr[2] = tmp13 + z1;	/* phase 5 */
 8012758:	e0bfe717 	ldw	r2,-100(fp)
 801275c:	10800204 	addi	r2,r2,8
 8012760:	e13ff317 	ldw	r4,-52(fp)
 8012764:	e0fff617 	ldw	r3,-40(fp)
 8012768:	20c7883a 	add	r3,r4,r3
 801276c:	10c00015 	stw	r3,0(r2)
		dataptr[6] = tmp13 - z1;
 8012770:	e0bfe717 	ldw	r2,-100(fp)
 8012774:	10800604 	addi	r2,r2,24
 8012778:	e13ff317 	ldw	r4,-52(fp)
 801277c:	e0fff617 	ldw	r3,-40(fp)
 8012780:	20c7c83a 	sub	r3,r4,r3
 8012784:	10c00015 	stw	r3,0(r2)

		/* Odd part */

		tmp10 = tmp4 + tmp5;	/* phase 2 */
 8012788:	e0fff117 	ldw	r3,-60(fp)
 801278c:	e0bfef17 	ldw	r2,-68(fp)
 8012790:	1885883a 	add	r2,r3,r2
 8012794:	e0bff215 	stw	r2,-56(fp)
		tmp11 = tmp5 + tmp6;
 8012798:	e0ffef17 	ldw	r3,-68(fp)
 801279c:	e0bfed17 	ldw	r2,-76(fp)
 80127a0:	1885883a 	add	r2,r3,r2
 80127a4:	e0bff415 	stw	r2,-48(fp)
		tmp12 = tmp6 + tmp7;
 80127a8:	e0ffed17 	ldw	r3,-76(fp)
 80127ac:	e0bfeb17 	ldw	r2,-84(fp)
 80127b0:	1885883a 	add	r2,r3,r2
 80127b4:	e0bff515 	stw	r2,-44(fp)

		/* The rotator is modified from fig 4-8 to avoid extra negations. */
		z5 = MULTIPLY(tmp10 - tmp12, FIX_0_382683433); /* c6 */
 80127b8:	e0fff217 	ldw	r3,-56(fp)
 80127bc:	e0bff517 	ldw	r2,-44(fp)
 80127c0:	1885c83a 	sub	r2,r3,r2
 80127c4:	1009883a 	mov	r4,r2
 80127c8:	01401884 	movi	r5,98
 80127cc:	802c2180 	call	802c218 <__mulsi3>
 80127d0:	1005d23a 	srai	r2,r2,8
 80127d4:	e0bff715 	stw	r2,-36(fp)
		z2 = MULTIPLY(tmp10, FIX_0_541196100) + z5; /* c2-c6 */
 80127d8:	e13ff217 	ldw	r4,-56(fp)
 80127dc:	014022c4 	movi	r5,139
 80127e0:	802c2180 	call	802c218 <__mulsi3>
 80127e4:	1007d23a 	srai	r3,r2,8
 80127e8:	e0bff717 	ldw	r2,-36(fp)
 80127ec:	1885883a 	add	r2,r3,r2
 80127f0:	e0bff815 	stw	r2,-32(fp)
		z4 = MULTIPLY(tmp12, FIX_1_306562965) + z5; /* c2+c6 */
 80127f4:	e13ff517 	ldw	r4,-44(fp)
 80127f8:	01405384 	movi	r5,334
 80127fc:	802c2180 	call	802c218 <__mulsi3>
 8012800:	1007d23a 	srai	r3,r2,8
 8012804:	e0bff717 	ldw	r2,-36(fp)
 8012808:	1885883a 	add	r2,r3,r2
 801280c:	e0bff915 	stw	r2,-28(fp)
		z3 = MULTIPLY(tmp11, FIX_0_707106781); /* c4 */
 8012810:	e13ff417 	ldw	r4,-48(fp)
 8012814:	01402d44 	movi	r5,181
 8012818:	802c2180 	call	802c218 <__mulsi3>
 801281c:	1005d23a 	srai	r2,r2,8
 8012820:	e0bffa15 	stw	r2,-24(fp)

		z11 = tmp7 + z3;		/* phase 5 */
 8012824:	e0ffeb17 	ldw	r3,-84(fp)
 8012828:	e0bffa17 	ldw	r2,-24(fp)
 801282c:	1885883a 	add	r2,r3,r2
 8012830:	e0bffb15 	stw	r2,-20(fp)
		z13 = tmp7 - z3;
 8012834:	e0ffeb17 	ldw	r3,-84(fp)
 8012838:	e0bffa17 	ldw	r2,-24(fp)
 801283c:	1885c83a 	sub	r2,r3,r2
 8012840:	e0bffc15 	stw	r2,-16(fp)

		dataptr[5] = z13 + z2;	/* phase 6 */
 8012844:	e0bfe717 	ldw	r2,-100(fp)
 8012848:	10800504 	addi	r2,r2,20
 801284c:	e13ffc17 	ldw	r4,-16(fp)
 8012850:	e0fff817 	ldw	r3,-32(fp)
 8012854:	20c7883a 	add	r3,r4,r3
 8012858:	10c00015 	stw	r3,0(r2)
		dataptr[3] = z13 - z2;
 801285c:	e0bfe717 	ldw	r2,-100(fp)
 8012860:	10800304 	addi	r2,r2,12
 8012864:	e13ffc17 	ldw	r4,-16(fp)
 8012868:	e0fff817 	ldw	r3,-32(fp)
 801286c:	20c7c83a 	sub	r3,r4,r3
 8012870:	10c00015 	stw	r3,0(r2)
		dataptr[1] = z11 + z4;
 8012874:	e0bfe717 	ldw	r2,-100(fp)
 8012878:	10800104 	addi	r2,r2,4
 801287c:	e13ffb17 	ldw	r4,-20(fp)
 8012880:	e0fff917 	ldw	r3,-28(fp)
 8012884:	20c7883a 	add	r3,r4,r3
 8012888:	10c00015 	stw	r3,0(r2)
		dataptr[7] = z11 - z4;
 801288c:	e0bfe717 	ldw	r2,-100(fp)
 8012890:	10800704 	addi	r2,r2,28
 8012894:	e13ffb17 	ldw	r4,-20(fp)
 8012898:	e0fff917 	ldw	r3,-28(fp)
 801289c:	20c7c83a 	sub	r3,r4,r3
 80128a0:	10c00015 	stw	r3,0(r2)

		dataptr += DCTSIZE;		/* advance pointer to next row */
 80128a4:	e0bfe717 	ldw	r2,-100(fp)
 80128a8:	10800804 	addi	r2,r2,32
 80128ac:	e0bfe715 	stw	r2,-100(fp)
	SHIFT_TEMPS

		/* Pass 1: process rows. */

		dataptr = data;
	for (ctr = 0; ctr < DCTSIZE; ctr++) {
 80128b0:	e0bfe817 	ldw	r2,-96(fp)
 80128b4:	10800044 	addi	r2,r2,1
 80128b8:	e0bfe815 	stw	r2,-96(fp)
 80128bc:	e0bfe817 	ldw	r2,-96(fp)
 80128c0:	10800210 	cmplti	r2,r2,8
 80128c4:	103f291e 	bne	r2,zero,801256c <jpeg_fdct_ifast+0x2c>
		dataptr += DCTSIZE;		/* advance pointer to next row */
	}

	/* Pass 2: process columns. */

	dataptr = data;
 80128c8:	e0bffd17 	ldw	r2,-12(fp)
 80128cc:	e0bfe715 	stw	r2,-100(fp)
	for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 80128d0:	008001c4 	movi	r2,7
 80128d4:	e0bfe815 	stw	r2,-96(fp)
 80128d8:	0000ba06 	br	8012bc4 <jpeg_fdct_ifast+0x684>
		tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*7];
 80128dc:	e0bfe717 	ldw	r2,-100(fp)
 80128e0:	10c00017 	ldw	r3,0(r2)
 80128e4:	e0bfe717 	ldw	r2,-100(fp)
 80128e8:	10803804 	addi	r2,r2,224
 80128ec:	10800017 	ldw	r2,0(r2)
 80128f0:	1885883a 	add	r2,r3,r2
 80128f4:	e0bfea15 	stw	r2,-88(fp)
		tmp7 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*7];
 80128f8:	e0bfe717 	ldw	r2,-100(fp)
 80128fc:	10c00017 	ldw	r3,0(r2)
 8012900:	e0bfe717 	ldw	r2,-100(fp)
 8012904:	10803804 	addi	r2,r2,224
 8012908:	10800017 	ldw	r2,0(r2)
 801290c:	1885c83a 	sub	r2,r3,r2
 8012910:	e0bfeb15 	stw	r2,-84(fp)
		tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*6];
 8012914:	e0bfe717 	ldw	r2,-100(fp)
 8012918:	10800804 	addi	r2,r2,32
 801291c:	10c00017 	ldw	r3,0(r2)
 8012920:	e0bfe717 	ldw	r2,-100(fp)
 8012924:	10803004 	addi	r2,r2,192
 8012928:	10800017 	ldw	r2,0(r2)
 801292c:	1885883a 	add	r2,r3,r2
 8012930:	e0bfec15 	stw	r2,-80(fp)
		tmp6 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*6];
 8012934:	e0bfe717 	ldw	r2,-100(fp)
 8012938:	10800804 	addi	r2,r2,32
 801293c:	10c00017 	ldw	r3,0(r2)
 8012940:	e0bfe717 	ldw	r2,-100(fp)
 8012944:	10803004 	addi	r2,r2,192
 8012948:	10800017 	ldw	r2,0(r2)
 801294c:	1885c83a 	sub	r2,r3,r2
 8012950:	e0bfed15 	stw	r2,-76(fp)
		tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*5];
 8012954:	e0bfe717 	ldw	r2,-100(fp)
 8012958:	10801004 	addi	r2,r2,64
 801295c:	10c00017 	ldw	r3,0(r2)
 8012960:	e0bfe717 	ldw	r2,-100(fp)
 8012964:	10802804 	addi	r2,r2,160
 8012968:	10800017 	ldw	r2,0(r2)
 801296c:	1885883a 	add	r2,r3,r2
 8012970:	e0bfee15 	stw	r2,-72(fp)
		tmp5 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*5];
 8012974:	e0bfe717 	ldw	r2,-100(fp)
 8012978:	10801004 	addi	r2,r2,64
 801297c:	10c00017 	ldw	r3,0(r2)
 8012980:	e0bfe717 	ldw	r2,-100(fp)
 8012984:	10802804 	addi	r2,r2,160
 8012988:	10800017 	ldw	r2,0(r2)
 801298c:	1885c83a 	sub	r2,r3,r2
 8012990:	e0bfef15 	stw	r2,-68(fp)
		tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*4];
 8012994:	e0bfe717 	ldw	r2,-100(fp)
 8012998:	10801804 	addi	r2,r2,96
 801299c:	10c00017 	ldw	r3,0(r2)
 80129a0:	e0bfe717 	ldw	r2,-100(fp)
 80129a4:	10802004 	addi	r2,r2,128
 80129a8:	10800017 	ldw	r2,0(r2)
 80129ac:	1885883a 	add	r2,r3,r2
 80129b0:	e0bff015 	stw	r2,-64(fp)
		tmp4 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*4];
 80129b4:	e0bfe717 	ldw	r2,-100(fp)
 80129b8:	10801804 	addi	r2,r2,96
 80129bc:	10c00017 	ldw	r3,0(r2)
 80129c0:	e0bfe717 	ldw	r2,-100(fp)
 80129c4:	10802004 	addi	r2,r2,128
 80129c8:	10800017 	ldw	r2,0(r2)
 80129cc:	1885c83a 	sub	r2,r3,r2
 80129d0:	e0bff115 	stw	r2,-60(fp)

		/* Even part */

		tmp10 = tmp0 + tmp3;	/* phase 2 */
 80129d4:	e0ffea17 	ldw	r3,-88(fp)
 80129d8:	e0bff017 	ldw	r2,-64(fp)
 80129dc:	1885883a 	add	r2,r3,r2
 80129e0:	e0bff215 	stw	r2,-56(fp)
		tmp13 = tmp0 - tmp3;
 80129e4:	e0ffea17 	ldw	r3,-88(fp)
 80129e8:	e0bff017 	ldw	r2,-64(fp)
 80129ec:	1885c83a 	sub	r2,r3,r2
 80129f0:	e0bff315 	stw	r2,-52(fp)
		tmp11 = tmp1 + tmp2;
 80129f4:	e0ffec17 	ldw	r3,-80(fp)
 80129f8:	e0bfee17 	ldw	r2,-72(fp)
 80129fc:	1885883a 	add	r2,r3,r2
 8012a00:	e0bff415 	stw	r2,-48(fp)
		tmp12 = tmp1 - tmp2;
 8012a04:	e0ffec17 	ldw	r3,-80(fp)
 8012a08:	e0bfee17 	ldw	r2,-72(fp)
 8012a0c:	1885c83a 	sub	r2,r3,r2
 8012a10:	e0bff515 	stw	r2,-44(fp)

		dataptr[DCTSIZE*0] = tmp10 + tmp11; /* phase 3 */
 8012a14:	e0fff217 	ldw	r3,-56(fp)
 8012a18:	e0bff417 	ldw	r2,-48(fp)
 8012a1c:	1887883a 	add	r3,r3,r2
 8012a20:	e0bfe717 	ldw	r2,-100(fp)
 8012a24:	10c00015 	stw	r3,0(r2)
		dataptr[DCTSIZE*4] = tmp10 - tmp11;
 8012a28:	e0bfe717 	ldw	r2,-100(fp)
 8012a2c:	10802004 	addi	r2,r2,128
 8012a30:	e13ff217 	ldw	r4,-56(fp)
 8012a34:	e0fff417 	ldw	r3,-48(fp)
 8012a38:	20c7c83a 	sub	r3,r4,r3
 8012a3c:	10c00015 	stw	r3,0(r2)

		z1 = MULTIPLY(tmp12 + tmp13, FIX_0_707106781); /* c4 */
 8012a40:	e0fff517 	ldw	r3,-44(fp)
 8012a44:	e0bff317 	ldw	r2,-52(fp)
 8012a48:	1885883a 	add	r2,r3,r2
 8012a4c:	1009883a 	mov	r4,r2
 8012a50:	01402d44 	movi	r5,181
 8012a54:	802c2180 	call	802c218 <__mulsi3>
 8012a58:	1005d23a 	srai	r2,r2,8
 8012a5c:	e0bff615 	stw	r2,-40(fp)
		dataptr[DCTSIZE*2] = tmp13 + z1; /* phase 5 */
 8012a60:	e0bfe717 	ldw	r2,-100(fp)
 8012a64:	10801004 	addi	r2,r2,64
 8012a68:	e13ff317 	ldw	r4,-52(fp)
 8012a6c:	e0fff617 	ldw	r3,-40(fp)
 8012a70:	20c7883a 	add	r3,r4,r3
 8012a74:	10c00015 	stw	r3,0(r2)
		dataptr[DCTSIZE*6] = tmp13 - z1;
 8012a78:	e0bfe717 	ldw	r2,-100(fp)
 8012a7c:	10803004 	addi	r2,r2,192
 8012a80:	e13ff317 	ldw	r4,-52(fp)
 8012a84:	e0fff617 	ldw	r3,-40(fp)
 8012a88:	20c7c83a 	sub	r3,r4,r3
 8012a8c:	10c00015 	stw	r3,0(r2)

		/* Odd part */

		tmp10 = tmp4 + tmp5;	/* phase 2 */
 8012a90:	e0fff117 	ldw	r3,-60(fp)
 8012a94:	e0bfef17 	ldw	r2,-68(fp)
 8012a98:	1885883a 	add	r2,r3,r2
 8012a9c:	e0bff215 	stw	r2,-56(fp)
		tmp11 = tmp5 + tmp6;
 8012aa0:	e0ffef17 	ldw	r3,-68(fp)
 8012aa4:	e0bfed17 	ldw	r2,-76(fp)
 8012aa8:	1885883a 	add	r2,r3,r2
 8012aac:	e0bff415 	stw	r2,-48(fp)
		tmp12 = tmp6 + tmp7;
 8012ab0:	e0ffed17 	ldw	r3,-76(fp)
 8012ab4:	e0bfeb17 	ldw	r2,-84(fp)
 8012ab8:	1885883a 	add	r2,r3,r2
 8012abc:	e0bff515 	stw	r2,-44(fp)

		/* The rotator is modified from fig 4-8 to avoid extra negations. */
		z5 = MULTIPLY(tmp10 - tmp12, FIX_0_382683433); /* c6 */
 8012ac0:	e0fff217 	ldw	r3,-56(fp)
 8012ac4:	e0bff517 	ldw	r2,-44(fp)
 8012ac8:	1885c83a 	sub	r2,r3,r2
 8012acc:	1009883a 	mov	r4,r2
 8012ad0:	01401884 	movi	r5,98
 8012ad4:	802c2180 	call	802c218 <__mulsi3>
 8012ad8:	1005d23a 	srai	r2,r2,8
 8012adc:	e0bff715 	stw	r2,-36(fp)
		z2 = MULTIPLY(tmp10, FIX_0_541196100) + z5; /* c2-c6 */
 8012ae0:	e13ff217 	ldw	r4,-56(fp)
 8012ae4:	014022c4 	movi	r5,139
 8012ae8:	802c2180 	call	802c218 <__mulsi3>
 8012aec:	1007d23a 	srai	r3,r2,8
 8012af0:	e0bff717 	ldw	r2,-36(fp)
 8012af4:	1885883a 	add	r2,r3,r2
 8012af8:	e0bff815 	stw	r2,-32(fp)
		z4 = MULTIPLY(tmp12, FIX_1_306562965) + z5; /* c2+c6 */
 8012afc:	e13ff517 	ldw	r4,-44(fp)
 8012b00:	01405384 	movi	r5,334
 8012b04:	802c2180 	call	802c218 <__mulsi3>
 8012b08:	1007d23a 	srai	r3,r2,8
 8012b0c:	e0bff717 	ldw	r2,-36(fp)
 8012b10:	1885883a 	add	r2,r3,r2
 8012b14:	e0bff915 	stw	r2,-28(fp)
		z3 = MULTIPLY(tmp11, FIX_0_707106781); /* c4 */
 8012b18:	e13ff417 	ldw	r4,-48(fp)
 8012b1c:	01402d44 	movi	r5,181
 8012b20:	802c2180 	call	802c218 <__mulsi3>
 8012b24:	1005d23a 	srai	r2,r2,8
 8012b28:	e0bffa15 	stw	r2,-24(fp)

		z11 = tmp7 + z3;		/* phase 5 */
 8012b2c:	e0ffeb17 	ldw	r3,-84(fp)
 8012b30:	e0bffa17 	ldw	r2,-24(fp)
 8012b34:	1885883a 	add	r2,r3,r2
 8012b38:	e0bffb15 	stw	r2,-20(fp)
		z13 = tmp7 - z3;
 8012b3c:	e0ffeb17 	ldw	r3,-84(fp)
 8012b40:	e0bffa17 	ldw	r2,-24(fp)
 8012b44:	1885c83a 	sub	r2,r3,r2
 8012b48:	e0bffc15 	stw	r2,-16(fp)

		dataptr[DCTSIZE*5] = z13 + z2; /* phase 6 */
 8012b4c:	e0bfe717 	ldw	r2,-100(fp)
 8012b50:	10802804 	addi	r2,r2,160
 8012b54:	e13ffc17 	ldw	r4,-16(fp)
 8012b58:	e0fff817 	ldw	r3,-32(fp)
 8012b5c:	20c7883a 	add	r3,r4,r3
 8012b60:	10c00015 	stw	r3,0(r2)
		dataptr[DCTSIZE*3] = z13 - z2;
 8012b64:	e0bfe717 	ldw	r2,-100(fp)
 8012b68:	10801804 	addi	r2,r2,96
 8012b6c:	e13ffc17 	ldw	r4,-16(fp)
 8012b70:	e0fff817 	ldw	r3,-32(fp)
 8012b74:	20c7c83a 	sub	r3,r4,r3
 8012b78:	10c00015 	stw	r3,0(r2)
		dataptr[DCTSIZE*1] = z11 + z4;
 8012b7c:	e0bfe717 	ldw	r2,-100(fp)
 8012b80:	10800804 	addi	r2,r2,32
 8012b84:	e13ffb17 	ldw	r4,-20(fp)
 8012b88:	e0fff917 	ldw	r3,-28(fp)
 8012b8c:	20c7883a 	add	r3,r4,r3
 8012b90:	10c00015 	stw	r3,0(r2)
		dataptr[DCTSIZE*7] = z11 - z4;
 8012b94:	e0bfe717 	ldw	r2,-100(fp)
 8012b98:	10803804 	addi	r2,r2,224
 8012b9c:	e13ffb17 	ldw	r4,-20(fp)
 8012ba0:	e0fff917 	ldw	r3,-28(fp)
 8012ba4:	20c7c83a 	sub	r3,r4,r3
 8012ba8:	10c00015 	stw	r3,0(r2)

		dataptr++;			/* advance pointer to next column */
 8012bac:	e0bfe717 	ldw	r2,-100(fp)
 8012bb0:	10800104 	addi	r2,r2,4
 8012bb4:	e0bfe715 	stw	r2,-100(fp)
	}

	/* Pass 2: process columns. */

	dataptr = data;
	for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 8012bb8:	e0bfe817 	ldw	r2,-96(fp)
 8012bbc:	10bfffc4 	addi	r2,r2,-1
 8012bc0:	e0bfe815 	stw	r2,-96(fp)
 8012bc4:	e0bfe817 	ldw	r2,-96(fp)
 8012bc8:	103f440e 	bge	r2,zero,80128dc <jpeg_fdct_ifast+0x39c>
		dataptr[DCTSIZE*1] = z11 + z4;
		dataptr[DCTSIZE*7] = z11 - z4;

		dataptr++;			/* advance pointer to next column */
	}
}
 8012bcc:	e037883a 	mov	sp,fp
 8012bd0:	dfc00117 	ldw	ra,4(sp)
 8012bd4:	df000017 	ldw	fp,0(sp)
 8012bd8:	dec00204 	addi	sp,sp,8
 8012bdc:	f800283a 	ret

08012be0 <jpeg_fdct_islow>:
	* Perform the forward DCT on one block of samples.
	*/

GLOBAL(void)
	jpeg_fdct_islow (DCTELEM * data, JSAMPARRAY sample_data, JDIMENSION start_col)
{
 8012be0:	deffee04 	addi	sp,sp,-72
 8012be4:	dfc01115 	stw	ra,68(sp)
 8012be8:	df001015 	stw	fp,64(sp)
 8012bec:	dc000f15 	stw	r16,60(sp)
 8012bf0:	df000f04 	addi	fp,sp,60
 8012bf4:	e13ffd15 	stw	r4,-12(fp)
 8012bf8:	e17ffe15 	stw	r5,-8(fp)
 8012bfc:	e1bfff15 	stw	r6,-4(fp)

		/* Pass 1: process rows. */
		/* Note results are scaled up by sqrt(8) compared to a true DCT; */
		/* furthermore, we scale the results by 2**PASS1_BITS. */

	dataptr = data;
 8012c00:	e0bffd17 	ldw	r2,-12(fp)
 8012c04:	e0bff115 	stw	r2,-60(fp)
	for (ctr = 0; ctr < DCTSIZE; ctr++) {
 8012c08:	e03ff215 	stw	zero,-56(fp)
 8012c0c:	00010206 	br	8013018 <jpeg_fdct_islow+0x438>
		elemptr = sample_data[ctr] + start_col;
 8012c10:	e0bff217 	ldw	r2,-56(fp)
 8012c14:	1085883a 	add	r2,r2,r2
 8012c18:	1085883a 	add	r2,r2,r2
 8012c1c:	e0fffe17 	ldw	r3,-8(fp)
 8012c20:	1885883a 	add	r2,r3,r2
 8012c24:	10c00017 	ldw	r3,0(r2)
 8012c28:	e0bfff17 	ldw	r2,-4(fp)
 8012c2c:	1885883a 	add	r2,r3,r2
 8012c30:	e0bff315 	stw	r2,-52(fp)

		/* Even part per LL&M figure 1 --- note that published figure is faulty;
		* rotator "sqrt(2)*c1" should be "sqrt(2)*c6".
		*/

		tmp0 = GETJSAMPLE(elemptr[0]) + GETJSAMPLE(elemptr[7]);
 8012c34:	e0bff317 	ldw	r2,-52(fp)
 8012c38:	10800003 	ldbu	r2,0(r2)
 8012c3c:	10c03fcc 	andi	r3,r2,255
 8012c40:	e0bff317 	ldw	r2,-52(fp)
 8012c44:	108001c4 	addi	r2,r2,7
 8012c48:	10800003 	ldbu	r2,0(r2)
 8012c4c:	10803fcc 	andi	r2,r2,255
 8012c50:	1885883a 	add	r2,r3,r2
 8012c54:	e0bff415 	stw	r2,-48(fp)
		tmp1 = GETJSAMPLE(elemptr[1]) + GETJSAMPLE(elemptr[6]);
 8012c58:	e0bff317 	ldw	r2,-52(fp)
 8012c5c:	10800044 	addi	r2,r2,1
 8012c60:	10800003 	ldbu	r2,0(r2)
 8012c64:	10c03fcc 	andi	r3,r2,255
 8012c68:	e0bff317 	ldw	r2,-52(fp)
 8012c6c:	10800184 	addi	r2,r2,6
 8012c70:	10800003 	ldbu	r2,0(r2)
 8012c74:	10803fcc 	andi	r2,r2,255
 8012c78:	1885883a 	add	r2,r3,r2
 8012c7c:	e0bff515 	stw	r2,-44(fp)
		tmp2 = GETJSAMPLE(elemptr[2]) + GETJSAMPLE(elemptr[5]);
 8012c80:	e0bff317 	ldw	r2,-52(fp)
 8012c84:	10800084 	addi	r2,r2,2
 8012c88:	10800003 	ldbu	r2,0(r2)
 8012c8c:	10c03fcc 	andi	r3,r2,255
 8012c90:	e0bff317 	ldw	r2,-52(fp)
 8012c94:	10800144 	addi	r2,r2,5
 8012c98:	10800003 	ldbu	r2,0(r2)
 8012c9c:	10803fcc 	andi	r2,r2,255
 8012ca0:	1885883a 	add	r2,r3,r2
 8012ca4:	e0bff615 	stw	r2,-40(fp)
		tmp3 = GETJSAMPLE(elemptr[3]) + GETJSAMPLE(elemptr[4]);
 8012ca8:	e0bff317 	ldw	r2,-52(fp)
 8012cac:	108000c4 	addi	r2,r2,3
 8012cb0:	10800003 	ldbu	r2,0(r2)
 8012cb4:	10c03fcc 	andi	r3,r2,255
 8012cb8:	e0bff317 	ldw	r2,-52(fp)
 8012cbc:	10800104 	addi	r2,r2,4
 8012cc0:	10800003 	ldbu	r2,0(r2)
 8012cc4:	10803fcc 	andi	r2,r2,255
 8012cc8:	1885883a 	add	r2,r3,r2
 8012ccc:	e0bff715 	stw	r2,-36(fp)

		tmp10 = tmp0 + tmp3;
 8012cd0:	e0fff417 	ldw	r3,-48(fp)
 8012cd4:	e0bff717 	ldw	r2,-36(fp)
 8012cd8:	1885883a 	add	r2,r3,r2
 8012cdc:	e0bff815 	stw	r2,-32(fp)
		tmp12 = tmp0 - tmp3;
 8012ce0:	e0fff417 	ldw	r3,-48(fp)
 8012ce4:	e0bff717 	ldw	r2,-36(fp)
 8012ce8:	1885c83a 	sub	r2,r3,r2
 8012cec:	e0bff915 	stw	r2,-28(fp)
		tmp11 = tmp1 + tmp2;
 8012cf0:	e0fff517 	ldw	r3,-44(fp)
 8012cf4:	e0bff617 	ldw	r2,-40(fp)
 8012cf8:	1885883a 	add	r2,r3,r2
 8012cfc:	e0bffa15 	stw	r2,-24(fp)
		tmp13 = tmp1 - tmp2;
 8012d00:	e0fff517 	ldw	r3,-44(fp)
 8012d04:	e0bff617 	ldw	r2,-40(fp)
 8012d08:	1885c83a 	sub	r2,r3,r2
 8012d0c:	e0bffb15 	stw	r2,-20(fp)

		tmp0 = GETJSAMPLE(elemptr[0]) - GETJSAMPLE(elemptr[7]);
 8012d10:	e0bff317 	ldw	r2,-52(fp)
 8012d14:	10800003 	ldbu	r2,0(r2)
 8012d18:	10c03fcc 	andi	r3,r2,255
 8012d1c:	e0bff317 	ldw	r2,-52(fp)
 8012d20:	108001c4 	addi	r2,r2,7
 8012d24:	10800003 	ldbu	r2,0(r2)
 8012d28:	10803fcc 	andi	r2,r2,255
 8012d2c:	1885c83a 	sub	r2,r3,r2
 8012d30:	e0bff415 	stw	r2,-48(fp)
		tmp1 = GETJSAMPLE(elemptr[1]) - GETJSAMPLE(elemptr[6]);
 8012d34:	e0bff317 	ldw	r2,-52(fp)
 8012d38:	10800044 	addi	r2,r2,1
 8012d3c:	10800003 	ldbu	r2,0(r2)
 8012d40:	10c03fcc 	andi	r3,r2,255
 8012d44:	e0bff317 	ldw	r2,-52(fp)
 8012d48:	10800184 	addi	r2,r2,6
 8012d4c:	10800003 	ldbu	r2,0(r2)
 8012d50:	10803fcc 	andi	r2,r2,255
 8012d54:	1885c83a 	sub	r2,r3,r2
 8012d58:	e0bff515 	stw	r2,-44(fp)
		tmp2 = GETJSAMPLE(elemptr[2]) - GETJSAMPLE(elemptr[5]);
 8012d5c:	e0bff317 	ldw	r2,-52(fp)
 8012d60:	10800084 	addi	r2,r2,2
 8012d64:	10800003 	ldbu	r2,0(r2)
 8012d68:	10c03fcc 	andi	r3,r2,255
 8012d6c:	e0bff317 	ldw	r2,-52(fp)
 8012d70:	10800144 	addi	r2,r2,5
 8012d74:	10800003 	ldbu	r2,0(r2)
 8012d78:	10803fcc 	andi	r2,r2,255
 8012d7c:	1885c83a 	sub	r2,r3,r2
 8012d80:	e0bff615 	stw	r2,-40(fp)
		tmp3 = GETJSAMPLE(elemptr[3]) - GETJSAMPLE(elemptr[4]);
 8012d84:	e0bff317 	ldw	r2,-52(fp)
 8012d88:	108000c4 	addi	r2,r2,3
 8012d8c:	10800003 	ldbu	r2,0(r2)
 8012d90:	10c03fcc 	andi	r3,r2,255
 8012d94:	e0bff317 	ldw	r2,-52(fp)
 8012d98:	10800104 	addi	r2,r2,4
 8012d9c:	10800003 	ldbu	r2,0(r2)
 8012da0:	10803fcc 	andi	r2,r2,255
 8012da4:	1885c83a 	sub	r2,r3,r2
 8012da8:	e0bff715 	stw	r2,-36(fp)

		/* Apply unsigned->signed conversion */
		dataptr[0] = (DCTELEM) ((tmp10 + tmp11 - 8 * CENTERJSAMPLE) << PASS1_BITS);
 8012dac:	e0fff817 	ldw	r3,-32(fp)
 8012db0:	e0bffa17 	ldw	r2,-24(fp)
 8012db4:	1885883a 	add	r2,r3,r2
 8012db8:	10bf0004 	addi	r2,r2,-1024
 8012dbc:	1085883a 	add	r2,r2,r2
 8012dc0:	1085883a 	add	r2,r2,r2
 8012dc4:	1007883a 	mov	r3,r2
 8012dc8:	e0bff117 	ldw	r2,-60(fp)
 8012dcc:	10c00015 	stw	r3,0(r2)
		dataptr[4] = (DCTELEM) ((tmp10 - tmp11) << PASS1_BITS);
 8012dd0:	e0bff117 	ldw	r2,-60(fp)
 8012dd4:	10c00404 	addi	r3,r2,16
 8012dd8:	e13ff817 	ldw	r4,-32(fp)
 8012ddc:	e0bffa17 	ldw	r2,-24(fp)
 8012de0:	2085c83a 	sub	r2,r4,r2
 8012de4:	1085883a 	add	r2,r2,r2
 8012de8:	1085883a 	add	r2,r2,r2
 8012dec:	18800015 	stw	r2,0(r3)

		z1 = MULTIPLY(tmp12 + tmp13, FIX_0_541196100);
 8012df0:	e0fff917 	ldw	r3,-28(fp)
 8012df4:	e0bffb17 	ldw	r2,-20(fp)
 8012df8:	1885883a 	add	r2,r3,r2
 8012dfc:	1009883a 	mov	r4,r2
 8012e00:	01445444 	movi	r5,4433
 8012e04:	802c2180 	call	802c218 <__mulsi3>
 8012e08:	e0bffc15 	stw	r2,-16(fp)
		/* Add fudge factor here for final descale. */
		z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8012e0c:	e0bffc17 	ldw	r2,-16(fp)
 8012e10:	10810004 	addi	r2,r2,1024
 8012e14:	e0bffc15 	stw	r2,-16(fp)
		dataptr[2] = (DCTELEM) RIGHT_SHIFT(z1 + MULTIPLY(tmp12, FIX_0_765366865),
 8012e18:	e0bff117 	ldw	r2,-60(fp)
 8012e1c:	14000204 	addi	r16,r2,8
 8012e20:	e13ff917 	ldw	r4,-28(fp)
 8012e24:	01461f84 	movi	r5,6270
 8012e28:	802c2180 	call	802c218 <__mulsi3>
 8012e2c:	1007883a 	mov	r3,r2
 8012e30:	e0bffc17 	ldw	r2,-16(fp)
 8012e34:	1885883a 	add	r2,r3,r2
 8012e38:	1005d2fa 	srai	r2,r2,11
 8012e3c:	80800015 	stw	r2,0(r16)
			CONST_BITS-PASS1_BITS);
		dataptr[6] = (DCTELEM) RIGHT_SHIFT(z1 - MULTIPLY(tmp13, FIX_1_847759065),
 8012e40:	e0bff117 	ldw	r2,-60(fp)
 8012e44:	14000604 	addi	r16,r2,24
 8012e48:	e13ffb17 	ldw	r4,-20(fp)
 8012e4c:	017137c4 	movi	r5,-15137
 8012e50:	802c2180 	call	802c218 <__mulsi3>
 8012e54:	1007883a 	mov	r3,r2
 8012e58:	e0bffc17 	ldw	r2,-16(fp)
 8012e5c:	1885883a 	add	r2,r3,r2
 8012e60:	1005d2fa 	srai	r2,r2,11
 8012e64:	80800015 	stw	r2,0(r16)
		/* Odd part per figure 8 --- note paper omits factor of sqrt(2).
		* cK represents sqrt(2) * cos(K*pi/16).
		* i0..i3 in the paper are tmp0..tmp3 here.
		*/

		tmp10 = tmp0 + tmp3;
 8012e68:	e0fff417 	ldw	r3,-48(fp)
 8012e6c:	e0bff717 	ldw	r2,-36(fp)
 8012e70:	1885883a 	add	r2,r3,r2
 8012e74:	e0bff815 	stw	r2,-32(fp)
		tmp11 = tmp1 + tmp2;
 8012e78:	e0fff517 	ldw	r3,-44(fp)
 8012e7c:	e0bff617 	ldw	r2,-40(fp)
 8012e80:	1885883a 	add	r2,r3,r2
 8012e84:	e0bffa15 	stw	r2,-24(fp)
		tmp12 = tmp0 + tmp2;
 8012e88:	e0fff417 	ldw	r3,-48(fp)
 8012e8c:	e0bff617 	ldw	r2,-40(fp)
 8012e90:	1885883a 	add	r2,r3,r2
 8012e94:	e0bff915 	stw	r2,-28(fp)
		tmp13 = tmp1 + tmp3;
 8012e98:	e0fff517 	ldw	r3,-44(fp)
 8012e9c:	e0bff717 	ldw	r2,-36(fp)
 8012ea0:	1885883a 	add	r2,r3,r2
 8012ea4:	e0bffb15 	stw	r2,-20(fp)
		z1 = MULTIPLY(tmp12 + tmp13, FIX_1_175875602); /*  c3 */
 8012ea8:	e0fff917 	ldw	r3,-28(fp)
 8012eac:	e0bffb17 	ldw	r2,-20(fp)
 8012eb0:	1885883a 	add	r2,r3,r2
 8012eb4:	1009883a 	mov	r4,r2
 8012eb8:	01496844 	movi	r5,9633
 8012ebc:	802c2180 	call	802c218 <__mulsi3>
 8012ec0:	e0bffc15 	stw	r2,-16(fp)
		/* Add fudge factor here for final descale. */
		z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8012ec4:	e0bffc17 	ldw	r2,-16(fp)
 8012ec8:	10810004 	addi	r2,r2,1024
 8012ecc:	e0bffc15 	stw	r2,-16(fp)

		tmp0  = MULTIPLY(tmp0,    FIX_1_501321110);    /*  c1+c3-c5-c7 */
 8012ed0:	e13ff417 	ldw	r4,-48(fp)
 8012ed4:	014c02c4 	movi	r5,12299
 8012ed8:	802c2180 	call	802c218 <__mulsi3>
 8012edc:	e0bff415 	stw	r2,-48(fp)
		tmp1  = MULTIPLY(tmp1,    FIX_3_072711026);    /*  c1+c3+c5-c7 */
 8012ee0:	e13ff517 	ldw	r4,-44(fp)
 8012ee4:	01589504 	movi	r5,25172
 8012ee8:	802c2180 	call	802c218 <__mulsi3>
 8012eec:	e0bff515 	stw	r2,-44(fp)
		tmp2  = MULTIPLY(tmp2,    FIX_2_053119869);    /*  c1+c3-c5+c7 */
 8012ef0:	e13ff617 	ldw	r4,-40(fp)
 8012ef4:	01506cc4 	movi	r5,16819
 8012ef8:	802c2180 	call	802c218 <__mulsi3>
 8012efc:	e0bff615 	stw	r2,-40(fp)
		tmp3  = MULTIPLY(tmp3,    FIX_0_298631336);    /* -c1+c3+c5-c7 */
 8012f00:	e13ff717 	ldw	r4,-36(fp)
 8012f04:	01426384 	movi	r5,2446
 8012f08:	802c2180 	call	802c218 <__mulsi3>
 8012f0c:	e0bff715 	stw	r2,-36(fp)
		tmp10 = MULTIPLY(tmp10, - FIX_0_899976223);    /*  c7-c3 */
 8012f10:	e13ff817 	ldw	r4,-32(fp)
 8012f14:	0178ccc4 	movi	r5,-7373
 8012f18:	802c2180 	call	802c218 <__mulsi3>
 8012f1c:	e0bff815 	stw	r2,-32(fp)
		tmp11 = MULTIPLY(tmp11, - FIX_2_562915447);    /* -c1-c3 */
 8012f20:	e13ffa17 	ldw	r4,-24(fp)
 8012f24:	016b7f44 	movi	r5,-20995
 8012f28:	802c2180 	call	802c218 <__mulsi3>
 8012f2c:	e0bffa15 	stw	r2,-24(fp)
		tmp12 = MULTIPLY(tmp12, - FIX_0_390180644);    /*  c5-c3 */
 8012f30:	e13ff917 	ldw	r4,-28(fp)
 8012f34:	017ce104 	movi	r5,-3196
 8012f38:	802c2180 	call	802c218 <__mulsi3>
 8012f3c:	e0bff915 	stw	r2,-28(fp)
		tmp13 = MULTIPLY(tmp13, - FIX_1_961570560);    /* -c3-c5 */
 8012f40:	e13ffb17 	ldw	r4,-20(fp)
 8012f44:	01704ec4 	movi	r5,-16069
 8012f48:	802c2180 	call	802c218 <__mulsi3>
 8012f4c:	e0bffb15 	stw	r2,-20(fp)

		tmp12 += z1;
 8012f50:	e0fff917 	ldw	r3,-28(fp)
 8012f54:	e0bffc17 	ldw	r2,-16(fp)
 8012f58:	1885883a 	add	r2,r3,r2
 8012f5c:	e0bff915 	stw	r2,-28(fp)
		tmp13 += z1;
 8012f60:	e0fffb17 	ldw	r3,-20(fp)
 8012f64:	e0bffc17 	ldw	r2,-16(fp)
 8012f68:	1885883a 	add	r2,r3,r2
 8012f6c:	e0bffb15 	stw	r2,-20(fp)

		dataptr[1] = (DCTELEM)
 8012f70:	e0bff117 	ldw	r2,-60(fp)
 8012f74:	10800104 	addi	r2,r2,4
			RIGHT_SHIFT(tmp0 + tmp10 + tmp12, CONST_BITS-PASS1_BITS);
 8012f78:	e13ff417 	ldw	r4,-48(fp)
 8012f7c:	e0fff817 	ldw	r3,-32(fp)
 8012f80:	20c9883a 	add	r4,r4,r3
 8012f84:	e0fff917 	ldw	r3,-28(fp)
 8012f88:	20c7883a 	add	r3,r4,r3
 8012f8c:	1807d2fa 	srai	r3,r3,11
		tmp13 = MULTIPLY(tmp13, - FIX_1_961570560);    /* -c3-c5 */

		tmp12 += z1;
		tmp13 += z1;

		dataptr[1] = (DCTELEM)
 8012f90:	10c00015 	stw	r3,0(r2)
			RIGHT_SHIFT(tmp0 + tmp10 + tmp12, CONST_BITS-PASS1_BITS);
		dataptr[3] = (DCTELEM)
 8012f94:	e0bff117 	ldw	r2,-60(fp)
 8012f98:	10800304 	addi	r2,r2,12
			RIGHT_SHIFT(tmp1 + tmp11 + tmp13, CONST_BITS-PASS1_BITS);
 8012f9c:	e13ff517 	ldw	r4,-44(fp)
 8012fa0:	e0fffa17 	ldw	r3,-24(fp)
 8012fa4:	20c9883a 	add	r4,r4,r3
 8012fa8:	e0fffb17 	ldw	r3,-20(fp)
 8012fac:	20c7883a 	add	r3,r4,r3
 8012fb0:	1807d2fa 	srai	r3,r3,11
		tmp12 += z1;
		tmp13 += z1;

		dataptr[1] = (DCTELEM)
			RIGHT_SHIFT(tmp0 + tmp10 + tmp12, CONST_BITS-PASS1_BITS);
		dataptr[3] = (DCTELEM)
 8012fb4:	10c00015 	stw	r3,0(r2)
			RIGHT_SHIFT(tmp1 + tmp11 + tmp13, CONST_BITS-PASS1_BITS);
		dataptr[5] = (DCTELEM)
 8012fb8:	e0bff117 	ldw	r2,-60(fp)
 8012fbc:	10800504 	addi	r2,r2,20
			RIGHT_SHIFT(tmp2 + tmp11 + tmp12, CONST_BITS-PASS1_BITS);
 8012fc0:	e13ff617 	ldw	r4,-40(fp)
 8012fc4:	e0fffa17 	ldw	r3,-24(fp)
 8012fc8:	20c9883a 	add	r4,r4,r3
 8012fcc:	e0fff917 	ldw	r3,-28(fp)
 8012fd0:	20c7883a 	add	r3,r4,r3
 8012fd4:	1807d2fa 	srai	r3,r3,11

		dataptr[1] = (DCTELEM)
			RIGHT_SHIFT(tmp0 + tmp10 + tmp12, CONST_BITS-PASS1_BITS);
		dataptr[3] = (DCTELEM)
			RIGHT_SHIFT(tmp1 + tmp11 + tmp13, CONST_BITS-PASS1_BITS);
		dataptr[5] = (DCTELEM)
 8012fd8:	10c00015 	stw	r3,0(r2)
			RIGHT_SHIFT(tmp2 + tmp11 + tmp12, CONST_BITS-PASS1_BITS);
		dataptr[7] = (DCTELEM)
 8012fdc:	e0bff117 	ldw	r2,-60(fp)
 8012fe0:	10800704 	addi	r2,r2,28
			RIGHT_SHIFT(tmp3 + tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 8012fe4:	e13ff717 	ldw	r4,-36(fp)
 8012fe8:	e0fff817 	ldw	r3,-32(fp)
 8012fec:	20c9883a 	add	r4,r4,r3
 8012ff0:	e0fffb17 	ldw	r3,-20(fp)
 8012ff4:	20c7883a 	add	r3,r4,r3
 8012ff8:	1807d2fa 	srai	r3,r3,11
			RIGHT_SHIFT(tmp0 + tmp10 + tmp12, CONST_BITS-PASS1_BITS);
		dataptr[3] = (DCTELEM)
			RIGHT_SHIFT(tmp1 + tmp11 + tmp13, CONST_BITS-PASS1_BITS);
		dataptr[5] = (DCTELEM)
			RIGHT_SHIFT(tmp2 + tmp11 + tmp12, CONST_BITS-PASS1_BITS);
		dataptr[7] = (DCTELEM)
 8012ffc:	10c00015 	stw	r3,0(r2)
			RIGHT_SHIFT(tmp3 + tmp10 + tmp13, CONST_BITS-PASS1_BITS);

		dataptr += DCTSIZE;		/* advance pointer to next row */
 8013000:	e0bff117 	ldw	r2,-60(fp)
 8013004:	10800804 	addi	r2,r2,32
 8013008:	e0bff115 	stw	r2,-60(fp)
		/* Pass 1: process rows. */
		/* Note results are scaled up by sqrt(8) compared to a true DCT; */
		/* furthermore, we scale the results by 2**PASS1_BITS. */

	dataptr = data;
	for (ctr = 0; ctr < DCTSIZE; ctr++) {
 801300c:	e0bff217 	ldw	r2,-56(fp)
 8013010:	10800044 	addi	r2,r2,1
 8013014:	e0bff215 	stw	r2,-56(fp)
 8013018:	e0bff217 	ldw	r2,-56(fp)
 801301c:	10800210 	cmplti	r2,r2,8
 8013020:	103efb1e 	bne	r2,zero,8012c10 <jpeg_fdct_islow+0x30>
	/* Pass 2: process columns.
	* We remove the PASS1_BITS scaling, but leave the results scaled up
	* by an overall factor of 8.
	*/

	dataptr = data;
 8013024:	e0bffd17 	ldw	r2,-12(fp)
 8013028:	e0bff115 	stw	r2,-60(fp)
	for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 801302c:	008001c4 	movi	r2,7
 8013030:	e0bff215 	stw	r2,-56(fp)
 8013034:	0000e606 	br	80133d0 <jpeg_fdct_islow+0x7f0>
		/* Even part per LL&M figure 1 --- note that published figure is faulty;
		* rotator "sqrt(2)*c1" should be "sqrt(2)*c6".
		*/

		tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*7];
 8013038:	e0bff117 	ldw	r2,-60(fp)
 801303c:	10c00017 	ldw	r3,0(r2)
 8013040:	e0bff117 	ldw	r2,-60(fp)
 8013044:	10803804 	addi	r2,r2,224
 8013048:	10800017 	ldw	r2,0(r2)
 801304c:	1885883a 	add	r2,r3,r2
 8013050:	e0bff415 	stw	r2,-48(fp)
		tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*6];
 8013054:	e0bff117 	ldw	r2,-60(fp)
 8013058:	10800804 	addi	r2,r2,32
 801305c:	10c00017 	ldw	r3,0(r2)
 8013060:	e0bff117 	ldw	r2,-60(fp)
 8013064:	10803004 	addi	r2,r2,192
 8013068:	10800017 	ldw	r2,0(r2)
 801306c:	1885883a 	add	r2,r3,r2
 8013070:	e0bff515 	stw	r2,-44(fp)
		tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*5];
 8013074:	e0bff117 	ldw	r2,-60(fp)
 8013078:	10801004 	addi	r2,r2,64
 801307c:	10c00017 	ldw	r3,0(r2)
 8013080:	e0bff117 	ldw	r2,-60(fp)
 8013084:	10802804 	addi	r2,r2,160
 8013088:	10800017 	ldw	r2,0(r2)
 801308c:	1885883a 	add	r2,r3,r2
 8013090:	e0bff615 	stw	r2,-40(fp)
		tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*4];
 8013094:	e0bff117 	ldw	r2,-60(fp)
 8013098:	10801804 	addi	r2,r2,96
 801309c:	10c00017 	ldw	r3,0(r2)
 80130a0:	e0bff117 	ldw	r2,-60(fp)
 80130a4:	10802004 	addi	r2,r2,128
 80130a8:	10800017 	ldw	r2,0(r2)
 80130ac:	1885883a 	add	r2,r3,r2
 80130b0:	e0bff715 	stw	r2,-36(fp)

		/* Add fudge factor here for final descale. */
		tmp10 = tmp0 + tmp3 + (ONE << (PASS1_BITS-1));
 80130b4:	e0fff417 	ldw	r3,-48(fp)
 80130b8:	e0bff717 	ldw	r2,-36(fp)
 80130bc:	1885883a 	add	r2,r3,r2
 80130c0:	10800084 	addi	r2,r2,2
 80130c4:	e0bff815 	stw	r2,-32(fp)
		tmp12 = tmp0 - tmp3;
 80130c8:	e0fff417 	ldw	r3,-48(fp)
 80130cc:	e0bff717 	ldw	r2,-36(fp)
 80130d0:	1885c83a 	sub	r2,r3,r2
 80130d4:	e0bff915 	stw	r2,-28(fp)
		tmp11 = tmp1 + tmp2;
 80130d8:	e0fff517 	ldw	r3,-44(fp)
 80130dc:	e0bff617 	ldw	r2,-40(fp)
 80130e0:	1885883a 	add	r2,r3,r2
 80130e4:	e0bffa15 	stw	r2,-24(fp)
		tmp13 = tmp1 - tmp2;
 80130e8:	e0fff517 	ldw	r3,-44(fp)
 80130ec:	e0bff617 	ldw	r2,-40(fp)
 80130f0:	1885c83a 	sub	r2,r3,r2
 80130f4:	e0bffb15 	stw	r2,-20(fp)

		tmp0 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*7];
 80130f8:	e0bff117 	ldw	r2,-60(fp)
 80130fc:	10c00017 	ldw	r3,0(r2)
 8013100:	e0bff117 	ldw	r2,-60(fp)
 8013104:	10803804 	addi	r2,r2,224
 8013108:	10800017 	ldw	r2,0(r2)
 801310c:	1885c83a 	sub	r2,r3,r2
 8013110:	e0bff415 	stw	r2,-48(fp)
		tmp1 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*6];
 8013114:	e0bff117 	ldw	r2,-60(fp)
 8013118:	10800804 	addi	r2,r2,32
 801311c:	10c00017 	ldw	r3,0(r2)
 8013120:	e0bff117 	ldw	r2,-60(fp)
 8013124:	10803004 	addi	r2,r2,192
 8013128:	10800017 	ldw	r2,0(r2)
 801312c:	1885c83a 	sub	r2,r3,r2
 8013130:	e0bff515 	stw	r2,-44(fp)
		tmp2 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*5];
 8013134:	e0bff117 	ldw	r2,-60(fp)
 8013138:	10801004 	addi	r2,r2,64
 801313c:	10c00017 	ldw	r3,0(r2)
 8013140:	e0bff117 	ldw	r2,-60(fp)
 8013144:	10802804 	addi	r2,r2,160
 8013148:	10800017 	ldw	r2,0(r2)
 801314c:	1885c83a 	sub	r2,r3,r2
 8013150:	e0bff615 	stw	r2,-40(fp)
		tmp3 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*4];
 8013154:	e0bff117 	ldw	r2,-60(fp)
 8013158:	10801804 	addi	r2,r2,96
 801315c:	10c00017 	ldw	r3,0(r2)
 8013160:	e0bff117 	ldw	r2,-60(fp)
 8013164:	10802004 	addi	r2,r2,128
 8013168:	10800017 	ldw	r2,0(r2)
 801316c:	1885c83a 	sub	r2,r3,r2
 8013170:	e0bff715 	stw	r2,-36(fp)

		dataptr[DCTSIZE*0] = (DCTELEM) RIGHT_SHIFT(tmp10 + tmp11, PASS1_BITS);
 8013174:	e0fff817 	ldw	r3,-32(fp)
 8013178:	e0bffa17 	ldw	r2,-24(fp)
 801317c:	1885883a 	add	r2,r3,r2
 8013180:	1007d0ba 	srai	r3,r2,2
 8013184:	e0bff117 	ldw	r2,-60(fp)
 8013188:	10c00015 	stw	r3,0(r2)
		dataptr[DCTSIZE*4] = (DCTELEM) RIGHT_SHIFT(tmp10 - tmp11, PASS1_BITS);
 801318c:	e0bff117 	ldw	r2,-60(fp)
 8013190:	10802004 	addi	r2,r2,128
 8013194:	e13ff817 	ldw	r4,-32(fp)
 8013198:	e0fffa17 	ldw	r3,-24(fp)
 801319c:	20c7c83a 	sub	r3,r4,r3
 80131a0:	1807d0ba 	srai	r3,r3,2
 80131a4:	10c00015 	stw	r3,0(r2)

		z1 = MULTIPLY(tmp12 + tmp13, FIX_0_541196100);
 80131a8:	e0fff917 	ldw	r3,-28(fp)
 80131ac:	e0bffb17 	ldw	r2,-20(fp)
 80131b0:	1885883a 	add	r2,r3,r2
 80131b4:	1009883a 	mov	r4,r2
 80131b8:	01445444 	movi	r5,4433
 80131bc:	802c2180 	call	802c218 <__mulsi3>
 80131c0:	e0bffc15 	stw	r2,-16(fp)
		/* Add fudge factor here for final descale. */
		z1 += ONE << (CONST_BITS+PASS1_BITS-1);
 80131c4:	e0bffc17 	ldw	r2,-16(fp)
 80131c8:	10900004 	addi	r2,r2,16384
 80131cc:	e0bffc15 	stw	r2,-16(fp)
		dataptr[DCTSIZE*2] = (DCTELEM)
 80131d0:	e0bff117 	ldw	r2,-60(fp)
 80131d4:	14001004 	addi	r16,r2,64
			RIGHT_SHIFT(z1 + MULTIPLY(tmp12, FIX_0_765366865), CONST_BITS+PASS1_BITS);
 80131d8:	e13ff917 	ldw	r4,-28(fp)
 80131dc:	01461f84 	movi	r5,6270
 80131e0:	802c2180 	call	802c218 <__mulsi3>
 80131e4:	1007883a 	mov	r3,r2
 80131e8:	e0bffc17 	ldw	r2,-16(fp)
 80131ec:	1885883a 	add	r2,r3,r2
 80131f0:	1005d3fa 	srai	r2,r2,15
		dataptr[DCTSIZE*4] = (DCTELEM) RIGHT_SHIFT(tmp10 - tmp11, PASS1_BITS);

		z1 = MULTIPLY(tmp12 + tmp13, FIX_0_541196100);
		/* Add fudge factor here for final descale. */
		z1 += ONE << (CONST_BITS+PASS1_BITS-1);
		dataptr[DCTSIZE*2] = (DCTELEM)
 80131f4:	80800015 	stw	r2,0(r16)
			RIGHT_SHIFT(z1 + MULTIPLY(tmp12, FIX_0_765366865), CONST_BITS+PASS1_BITS);
		dataptr[DCTSIZE*6] = (DCTELEM)
 80131f8:	e0bff117 	ldw	r2,-60(fp)
 80131fc:	14003004 	addi	r16,r2,192
			RIGHT_SHIFT(z1 - MULTIPLY(tmp13, FIX_1_847759065), CONST_BITS+PASS1_BITS);
 8013200:	e13ffb17 	ldw	r4,-20(fp)
 8013204:	017137c4 	movi	r5,-15137
 8013208:	802c2180 	call	802c218 <__mulsi3>
 801320c:	1007883a 	mov	r3,r2
 8013210:	e0bffc17 	ldw	r2,-16(fp)
 8013214:	1885883a 	add	r2,r3,r2
 8013218:	1005d3fa 	srai	r2,r2,15
		z1 = MULTIPLY(tmp12 + tmp13, FIX_0_541196100);
		/* Add fudge factor here for final descale. */
		z1 += ONE << (CONST_BITS+PASS1_BITS-1);
		dataptr[DCTSIZE*2] = (DCTELEM)
			RIGHT_SHIFT(z1 + MULTIPLY(tmp12, FIX_0_765366865), CONST_BITS+PASS1_BITS);
		dataptr[DCTSIZE*6] = (DCTELEM)
 801321c:	80800015 	stw	r2,0(r16)
		/* Odd part per figure 8 --- note paper omits factor of sqrt(2).
		* cK represents sqrt(2) * cos(K*pi/16).
		* i0..i3 in the paper are tmp0..tmp3 here.
		*/

		tmp10 = tmp0 + tmp3;
 8013220:	e0fff417 	ldw	r3,-48(fp)
 8013224:	e0bff717 	ldw	r2,-36(fp)
 8013228:	1885883a 	add	r2,r3,r2
 801322c:	e0bff815 	stw	r2,-32(fp)
		tmp11 = tmp1 + tmp2;
 8013230:	e0fff517 	ldw	r3,-44(fp)
 8013234:	e0bff617 	ldw	r2,-40(fp)
 8013238:	1885883a 	add	r2,r3,r2
 801323c:	e0bffa15 	stw	r2,-24(fp)
		tmp12 = tmp0 + tmp2;
 8013240:	e0fff417 	ldw	r3,-48(fp)
 8013244:	e0bff617 	ldw	r2,-40(fp)
 8013248:	1885883a 	add	r2,r3,r2
 801324c:	e0bff915 	stw	r2,-28(fp)
		tmp13 = tmp1 + tmp3;
 8013250:	e0fff517 	ldw	r3,-44(fp)
 8013254:	e0bff717 	ldw	r2,-36(fp)
 8013258:	1885883a 	add	r2,r3,r2
 801325c:	e0bffb15 	stw	r2,-20(fp)
		z1 = MULTIPLY(tmp12 + tmp13, FIX_1_175875602); /*  c3 */
 8013260:	e0fff917 	ldw	r3,-28(fp)
 8013264:	e0bffb17 	ldw	r2,-20(fp)
 8013268:	1885883a 	add	r2,r3,r2
 801326c:	1009883a 	mov	r4,r2
 8013270:	01496844 	movi	r5,9633
 8013274:	802c2180 	call	802c218 <__mulsi3>
 8013278:	e0bffc15 	stw	r2,-16(fp)
		/* Add fudge factor here for final descale. */
		z1 += ONE << (CONST_BITS+PASS1_BITS-1);
 801327c:	e0bffc17 	ldw	r2,-16(fp)
 8013280:	10900004 	addi	r2,r2,16384
 8013284:	e0bffc15 	stw	r2,-16(fp)

		tmp0  = MULTIPLY(tmp0,    FIX_1_501321110);    /*  c1+c3-c5-c7 */
 8013288:	e13ff417 	ldw	r4,-48(fp)
 801328c:	014c02c4 	movi	r5,12299
 8013290:	802c2180 	call	802c218 <__mulsi3>
 8013294:	e0bff415 	stw	r2,-48(fp)
		tmp1  = MULTIPLY(tmp1,    FIX_3_072711026);    /*  c1+c3+c5-c7 */
 8013298:	e13ff517 	ldw	r4,-44(fp)
 801329c:	01589504 	movi	r5,25172
 80132a0:	802c2180 	call	802c218 <__mulsi3>
 80132a4:	e0bff515 	stw	r2,-44(fp)
		tmp2  = MULTIPLY(tmp2,    FIX_2_053119869);    /*  c1+c3-c5+c7 */
 80132a8:	e13ff617 	ldw	r4,-40(fp)
 80132ac:	01506cc4 	movi	r5,16819
 80132b0:	802c2180 	call	802c218 <__mulsi3>
 80132b4:	e0bff615 	stw	r2,-40(fp)
		tmp3  = MULTIPLY(tmp3,    FIX_0_298631336);    /* -c1+c3+c5-c7 */
 80132b8:	e13ff717 	ldw	r4,-36(fp)
 80132bc:	01426384 	movi	r5,2446
 80132c0:	802c2180 	call	802c218 <__mulsi3>
 80132c4:	e0bff715 	stw	r2,-36(fp)
		tmp10 = MULTIPLY(tmp10, - FIX_0_899976223);    /*  c7-c3 */
 80132c8:	e13ff817 	ldw	r4,-32(fp)
 80132cc:	0178ccc4 	movi	r5,-7373
 80132d0:	802c2180 	call	802c218 <__mulsi3>
 80132d4:	e0bff815 	stw	r2,-32(fp)
		tmp11 = MULTIPLY(tmp11, - FIX_2_562915447);    /* -c1-c3 */
 80132d8:	e13ffa17 	ldw	r4,-24(fp)
 80132dc:	016b7f44 	movi	r5,-20995
 80132e0:	802c2180 	call	802c218 <__mulsi3>
 80132e4:	e0bffa15 	stw	r2,-24(fp)
		tmp12 = MULTIPLY(tmp12, - FIX_0_390180644);    /*  c5-c3 */
 80132e8:	e13ff917 	ldw	r4,-28(fp)
 80132ec:	017ce104 	movi	r5,-3196
 80132f0:	802c2180 	call	802c218 <__mulsi3>
 80132f4:	e0bff915 	stw	r2,-28(fp)
		tmp13 = MULTIPLY(tmp13, - FIX_1_961570560);    /* -c3-c5 */
 80132f8:	e13ffb17 	ldw	r4,-20(fp)
 80132fc:	01704ec4 	movi	r5,-16069
 8013300:	802c2180 	call	802c218 <__mulsi3>
 8013304:	e0bffb15 	stw	r2,-20(fp)

		tmp12 += z1;
 8013308:	e0fff917 	ldw	r3,-28(fp)
 801330c:	e0bffc17 	ldw	r2,-16(fp)
 8013310:	1885883a 	add	r2,r3,r2
 8013314:	e0bff915 	stw	r2,-28(fp)
		tmp13 += z1;
 8013318:	e0fffb17 	ldw	r3,-20(fp)
 801331c:	e0bffc17 	ldw	r2,-16(fp)
 8013320:	1885883a 	add	r2,r3,r2
 8013324:	e0bffb15 	stw	r2,-20(fp)

		dataptr[DCTSIZE*1] = (DCTELEM)
 8013328:	e0bff117 	ldw	r2,-60(fp)
 801332c:	10800804 	addi	r2,r2,32
			RIGHT_SHIFT(tmp0 + tmp10 + tmp12, CONST_BITS+PASS1_BITS);
 8013330:	e13ff417 	ldw	r4,-48(fp)
 8013334:	e0fff817 	ldw	r3,-32(fp)
 8013338:	20c9883a 	add	r4,r4,r3
 801333c:	e0fff917 	ldw	r3,-28(fp)
 8013340:	20c7883a 	add	r3,r4,r3
 8013344:	1807d3fa 	srai	r3,r3,15
		tmp13 = MULTIPLY(tmp13, - FIX_1_961570560);    /* -c3-c5 */

		tmp12 += z1;
		tmp13 += z1;

		dataptr[DCTSIZE*1] = (DCTELEM)
 8013348:	10c00015 	stw	r3,0(r2)
			RIGHT_SHIFT(tmp0 + tmp10 + tmp12, CONST_BITS+PASS1_BITS);
		dataptr[DCTSIZE*3] = (DCTELEM)
 801334c:	e0bff117 	ldw	r2,-60(fp)
 8013350:	10801804 	addi	r2,r2,96
			RIGHT_SHIFT(tmp1 + tmp11 + tmp13, CONST_BITS+PASS1_BITS);
 8013354:	e13ff517 	ldw	r4,-44(fp)
 8013358:	e0fffa17 	ldw	r3,-24(fp)
 801335c:	20c9883a 	add	r4,r4,r3
 8013360:	e0fffb17 	ldw	r3,-20(fp)
 8013364:	20c7883a 	add	r3,r4,r3
 8013368:	1807d3fa 	srai	r3,r3,15
		tmp12 += z1;
		tmp13 += z1;

		dataptr[DCTSIZE*1] = (DCTELEM)
			RIGHT_SHIFT(tmp0 + tmp10 + tmp12, CONST_BITS+PASS1_BITS);
		dataptr[DCTSIZE*3] = (DCTELEM)
 801336c:	10c00015 	stw	r3,0(r2)
			RIGHT_SHIFT(tmp1 + tmp11 + tmp13, CONST_BITS+PASS1_BITS);
		dataptr[DCTSIZE*5] = (DCTELEM)
 8013370:	e0bff117 	ldw	r2,-60(fp)
 8013374:	10802804 	addi	r2,r2,160
			RIGHT_SHIFT(tmp2 + tmp11 + tmp12, CONST_BITS+PASS1_BITS);
 8013378:	e13ff617 	ldw	r4,-40(fp)
 801337c:	e0fffa17 	ldw	r3,-24(fp)
 8013380:	20c9883a 	add	r4,r4,r3
 8013384:	e0fff917 	ldw	r3,-28(fp)
 8013388:	20c7883a 	add	r3,r4,r3
 801338c:	1807d3fa 	srai	r3,r3,15

		dataptr[DCTSIZE*1] = (DCTELEM)
			RIGHT_SHIFT(tmp0 + tmp10 + tmp12, CONST_BITS+PASS1_BITS);
		dataptr[DCTSIZE*3] = (DCTELEM)
			RIGHT_SHIFT(tmp1 + tmp11 + tmp13, CONST_BITS+PASS1_BITS);
		dataptr[DCTSIZE*5] = (DCTELEM)
 8013390:	10c00015 	stw	r3,0(r2)
			RIGHT_SHIFT(tmp2 + tmp11 + tmp12, CONST_BITS+PASS1_BITS);
		dataptr[DCTSIZE*7] = (DCTELEM)
 8013394:	e0bff117 	ldw	r2,-60(fp)
 8013398:	10803804 	addi	r2,r2,224
			RIGHT_SHIFT(tmp3 + tmp10 + tmp13, CONST_BITS+PASS1_BITS);
 801339c:	e13ff717 	ldw	r4,-36(fp)
 80133a0:	e0fff817 	ldw	r3,-32(fp)
 80133a4:	20c9883a 	add	r4,r4,r3
 80133a8:	e0fffb17 	ldw	r3,-20(fp)
 80133ac:	20c7883a 	add	r3,r4,r3
 80133b0:	1807d3fa 	srai	r3,r3,15
			RIGHT_SHIFT(tmp0 + tmp10 + tmp12, CONST_BITS+PASS1_BITS);
		dataptr[DCTSIZE*3] = (DCTELEM)
			RIGHT_SHIFT(tmp1 + tmp11 + tmp13, CONST_BITS+PASS1_BITS);
		dataptr[DCTSIZE*5] = (DCTELEM)
			RIGHT_SHIFT(tmp2 + tmp11 + tmp12, CONST_BITS+PASS1_BITS);
		dataptr[DCTSIZE*7] = (DCTELEM)
 80133b4:	10c00015 	stw	r3,0(r2)
			RIGHT_SHIFT(tmp3 + tmp10 + tmp13, CONST_BITS+PASS1_BITS);

		dataptr++;			/* advance pointer to next column */
 80133b8:	e0bff117 	ldw	r2,-60(fp)
 80133bc:	10800104 	addi	r2,r2,4
 80133c0:	e0bff115 	stw	r2,-60(fp)
	* We remove the PASS1_BITS scaling, but leave the results scaled up
	* by an overall factor of 8.
	*/

	dataptr = data;
	for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
 80133c4:	e0bff217 	ldw	r2,-56(fp)
 80133c8:	10bfffc4 	addi	r2,r2,-1
 80133cc:	e0bff215 	stw	r2,-56(fp)
 80133d0:	e0bff217 	ldw	r2,-56(fp)
 80133d4:	103f180e 	bge	r2,zero,8013038 <jpeg_fdct_islow+0x458>
		dataptr[DCTSIZE*7] = (DCTELEM)
			RIGHT_SHIFT(tmp3 + tmp10 + tmp13, CONST_BITS+PASS1_BITS);

		dataptr++;			/* advance pointer to next column */
	}
}
 80133d8:	e037883a 	mov	sp,fp
 80133dc:	dfc00217 	ldw	ra,8(sp)
 80133e0:	df000117 	ldw	fp,4(sp)
 80133e4:	dc000017 	ldw	r16,0(sp)
 80133e8:	dec00304 	addi	sp,sp,12
 80133ec:	f800283a 	ret

080133f0 <jpeg_idct_float>:

	GLOBAL(void)
	jpeg_idct_float (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80133f0:	deffa104 	addi	sp,sp,-380
 80133f4:	dfc05e15 	stw	ra,376(sp)
 80133f8:	df005d15 	stw	fp,372(sp)
 80133fc:	dc005c15 	stw	r16,368(sp)
 8013400:	df005c04 	addi	fp,sp,368
 8013404:	e13ffc15 	stw	r4,-16(fp)
 8013408:	e17ffd15 	stw	r5,-12(fp)
 801340c:	e1bffe15 	stw	r6,-8(fp)
 8013410:	e1ffff15 	stw	r7,-4(fp)
	FAST_FLOAT z5, z10, z11, z12, z13;
	JCOEFPTR inptr;
	FLOAT_MULT_TYPE * quantptr;
	FAST_FLOAT * wsptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = cinfo->sample_range_limit;
 8013414:	e0bffc17 	ldw	r2,-16(fp)
 8013418:	10804917 	ldw	r2,292(r2)
 801341c:	e0bfa815 	stw	r2,-352(fp)
	int ctr;
	FAST_FLOAT workspace[DCTSIZE2]; /* buffers data between passes */

	/* Pass 1: process columns from input, store into work array. */

	inptr = coef_block;
 8013420:	e0bffe17 	ldw	r2,-8(fp)
 8013424:	e0bfa415 	stw	r2,-368(fp)
	quantptr = (FLOAT_MULT_TYPE *) compptr->dct_table;
 8013428:	e0bffd17 	ldw	r2,-12(fp)
 801342c:	10801517 	ldw	r2,84(r2)
 8013430:	e0bfa515 	stw	r2,-364(fp)
	wsptr = workspace;
 8013434:	e0bfbc04 	addi	r2,fp,-272
 8013438:	e0bfa615 	stw	r2,-360(fp)
	for (ctr = DCTSIZE; ctr > 0; ctr--) {
 801343c:	00800204 	movi	r2,8
 8013440:	e0bfa715 	stw	r2,-356(fp)
 8013444:	0001c106 	br	8013b4c <jpeg_idct_float+0x75c>
		* DC coefficient (with scale factor as needed).
		* With typical images and quantization tables, half or more of the
		* column DCT calculations can be simplified this way.
		*/

		if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8013448:	e0bfa417 	ldw	r2,-368(fp)
 801344c:	10800404 	addi	r2,r2,16
 8013450:	1080000b 	ldhu	r2,0(r2)
 8013454:	10bfffcc 	andi	r2,r2,65535
 8013458:	10a0001c 	xori	r2,r2,32768
 801345c:	10a00004 	addi	r2,r2,-32768
 8013460:	1000621e 	bne	r2,zero,80135ec <jpeg_idct_float+0x1fc>
 8013464:	e0bfa417 	ldw	r2,-368(fp)
 8013468:	10800804 	addi	r2,r2,32
 801346c:	1080000b 	ldhu	r2,0(r2)
 8013470:	10bfffcc 	andi	r2,r2,65535
 8013474:	10a0001c 	xori	r2,r2,32768
 8013478:	10a00004 	addi	r2,r2,-32768
 801347c:	10005b1e 	bne	r2,zero,80135ec <jpeg_idct_float+0x1fc>
			inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 8013480:	e0bfa417 	ldw	r2,-368(fp)
 8013484:	10800c04 	addi	r2,r2,48
 8013488:	1080000b 	ldhu	r2,0(r2)
		* DC coefficient (with scale factor as needed).
		* With typical images and quantization tables, half or more of the
		* column DCT calculations can be simplified this way.
		*/

		if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 801348c:	10bfffcc 	andi	r2,r2,65535
 8013490:	10a0001c 	xori	r2,r2,32768
 8013494:	10a00004 	addi	r2,r2,-32768
 8013498:	1000541e 	bne	r2,zero,80135ec <jpeg_idct_float+0x1fc>
			inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 801349c:	e0bfa417 	ldw	r2,-368(fp)
 80134a0:	10801004 	addi	r2,r2,64
 80134a4:	1080000b 	ldhu	r2,0(r2)
 80134a8:	10bfffcc 	andi	r2,r2,65535
 80134ac:	10a0001c 	xori	r2,r2,32768
 80134b0:	10a00004 	addi	r2,r2,-32768
 80134b4:	10004d1e 	bne	r2,zero,80135ec <jpeg_idct_float+0x1fc>
			inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 80134b8:	e0bfa417 	ldw	r2,-368(fp)
 80134bc:	10801404 	addi	r2,r2,80
 80134c0:	1080000b 	ldhu	r2,0(r2)
		* With typical images and quantization tables, half or more of the
		* column DCT calculations can be simplified this way.
		*/

		if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
			inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 80134c4:	10bfffcc 	andi	r2,r2,65535
 80134c8:	10a0001c 	xori	r2,r2,32768
 80134cc:	10a00004 	addi	r2,r2,-32768
 80134d0:	1000461e 	bne	r2,zero,80135ec <jpeg_idct_float+0x1fc>
			inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 80134d4:	e0bfa417 	ldw	r2,-368(fp)
 80134d8:	10801804 	addi	r2,r2,96
 80134dc:	1080000b 	ldhu	r2,0(r2)
 80134e0:	10bfffcc 	andi	r2,r2,65535
 80134e4:	10a0001c 	xori	r2,r2,32768
 80134e8:	10a00004 	addi	r2,r2,-32768
 80134ec:	10003f1e 	bne	r2,zero,80135ec <jpeg_idct_float+0x1fc>
			inptr[DCTSIZE*7] == 0) {
 80134f0:	e0bfa417 	ldw	r2,-368(fp)
 80134f4:	10801c04 	addi	r2,r2,112
 80134f8:	1080000b 	ldhu	r2,0(r2)
		* column DCT calculations can be simplified this way.
		*/

		if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
			inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
			inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 80134fc:	10bfffcc 	andi	r2,r2,65535
 8013500:	10a0001c 	xori	r2,r2,32768
 8013504:	10a00004 	addi	r2,r2,-32768
 8013508:	1000381e 	bne	r2,zero,80135ec <jpeg_idct_float+0x1fc>
			inptr[DCTSIZE*7] == 0) {
				/* AC terms all zero */
				FAST_FLOAT dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801350c:	e0bfa417 	ldw	r2,-368(fp)
 8013510:	1080000b 	ldhu	r2,0(r2)
 8013514:	10bfffcc 	andi	r2,r2,65535
 8013518:	10a0001c 	xori	r2,r2,32768
 801351c:	10a00004 	addi	r2,r2,-32768
 8013520:	1009883a 	mov	r4,r2
 8013524:	802b98c0 	call	802b98c <__floatsisf>
 8013528:	1007883a 	mov	r3,r2
 801352c:	e13fa517 	ldw	r4,-364(fp)
 8013530:	20800017 	ldw	r2,0(r4)
 8013534:	1809883a 	mov	r4,r3
 8013538:	100b883a 	mov	r5,r2
 801353c:	802b7fc0 	call	802b7fc <__mulsf3>
 8013540:	1007883a 	mov	r3,r2
 8013544:	e0ffa915 	stw	r3,-348(fp)

				wsptr[DCTSIZE*0] = dcval;
 8013548:	e0bfa617 	ldw	r2,-360(fp)
 801354c:	e0ffa917 	ldw	r3,-348(fp)
 8013550:	10c00015 	stw	r3,0(r2)
				wsptr[DCTSIZE*1] = dcval;
 8013554:	e0bfa617 	ldw	r2,-360(fp)
 8013558:	10800804 	addi	r2,r2,32
 801355c:	e0ffa917 	ldw	r3,-348(fp)
 8013560:	10c00015 	stw	r3,0(r2)
				wsptr[DCTSIZE*2] = dcval;
 8013564:	e0bfa617 	ldw	r2,-360(fp)
 8013568:	10801004 	addi	r2,r2,64
 801356c:	e0ffa917 	ldw	r3,-348(fp)
 8013570:	10c00015 	stw	r3,0(r2)
				wsptr[DCTSIZE*3] = dcval;
 8013574:	e0bfa617 	ldw	r2,-360(fp)
 8013578:	10801804 	addi	r2,r2,96
 801357c:	e0ffa917 	ldw	r3,-348(fp)
 8013580:	10c00015 	stw	r3,0(r2)
				wsptr[DCTSIZE*4] = dcval;
 8013584:	e0bfa617 	ldw	r2,-360(fp)
 8013588:	10802004 	addi	r2,r2,128
 801358c:	e0ffa917 	ldw	r3,-348(fp)
 8013590:	10c00015 	stw	r3,0(r2)
				wsptr[DCTSIZE*5] = dcval;
 8013594:	e0bfa617 	ldw	r2,-360(fp)
 8013598:	10802804 	addi	r2,r2,160
 801359c:	e0ffa917 	ldw	r3,-348(fp)
 80135a0:	10c00015 	stw	r3,0(r2)
				wsptr[DCTSIZE*6] = dcval;
 80135a4:	e0bfa617 	ldw	r2,-360(fp)
 80135a8:	10803004 	addi	r2,r2,192
 80135ac:	e0ffa917 	ldw	r3,-348(fp)
 80135b0:	10c00015 	stw	r3,0(r2)
				wsptr[DCTSIZE*7] = dcval;
 80135b4:	e0bfa617 	ldw	r2,-360(fp)
 80135b8:	10803804 	addi	r2,r2,224
 80135bc:	e0ffa917 	ldw	r3,-348(fp)
 80135c0:	10c00015 	stw	r3,0(r2)

				inptr++;			/* advance pointers to next column */
 80135c4:	e0bfa417 	ldw	r2,-368(fp)
 80135c8:	10800084 	addi	r2,r2,2
 80135cc:	e0bfa415 	stw	r2,-368(fp)
				quantptr++;
 80135d0:	e0bfa517 	ldw	r2,-364(fp)
 80135d4:	10800104 	addi	r2,r2,4
 80135d8:	e0bfa515 	stw	r2,-364(fp)
				wsptr++;
 80135dc:	e0bfa617 	ldw	r2,-360(fp)
 80135e0:	10800104 	addi	r2,r2,4
 80135e4:	e0bfa615 	stw	r2,-360(fp)
				continue;
 80135e8:	00015506 	br	8013b40 <jpeg_idct_float+0x750>
		}

		/* Even part */

		tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80135ec:	e0bfa417 	ldw	r2,-368(fp)
 80135f0:	1080000b 	ldhu	r2,0(r2)
 80135f4:	10bfffcc 	andi	r2,r2,65535
 80135f8:	10a0001c 	xori	r2,r2,32768
 80135fc:	10a00004 	addi	r2,r2,-32768
 8013600:	1009883a 	mov	r4,r2
 8013604:	802b98c0 	call	802b98c <__floatsisf>
 8013608:	1007883a 	mov	r3,r2
 801360c:	e13fa517 	ldw	r4,-364(fp)
 8013610:	20800017 	ldw	r2,0(r4)
 8013614:	1809883a 	mov	r4,r3
 8013618:	100b883a 	mov	r5,r2
 801361c:	802b7fc0 	call	802b7fc <__mulsf3>
 8013620:	1007883a 	mov	r3,r2
 8013624:	e0ffaa15 	stw	r3,-344(fp)
		tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013628:	e0bfa417 	ldw	r2,-368(fp)
 801362c:	10800804 	addi	r2,r2,32
 8013630:	1080000b 	ldhu	r2,0(r2)
 8013634:	10bfffcc 	andi	r2,r2,65535
 8013638:	10a0001c 	xori	r2,r2,32768
 801363c:	10a00004 	addi	r2,r2,-32768
 8013640:	1009883a 	mov	r4,r2
 8013644:	802b98c0 	call	802b98c <__floatsisf>
 8013648:	1007883a 	mov	r3,r2
 801364c:	e0bfa517 	ldw	r2,-364(fp)
 8013650:	11001004 	addi	r4,r2,64
 8013654:	20800017 	ldw	r2,0(r4)
 8013658:	1809883a 	mov	r4,r3
 801365c:	100b883a 	mov	r5,r2
 8013660:	802b7fc0 	call	802b7fc <__mulsf3>
 8013664:	1007883a 	mov	r3,r2
 8013668:	e0ffab15 	stw	r3,-340(fp)
		tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801366c:	e0bfa417 	ldw	r2,-368(fp)
 8013670:	10801004 	addi	r2,r2,64
 8013674:	1080000b 	ldhu	r2,0(r2)
 8013678:	10bfffcc 	andi	r2,r2,65535
 801367c:	10a0001c 	xori	r2,r2,32768
 8013680:	10a00004 	addi	r2,r2,-32768
 8013684:	1009883a 	mov	r4,r2
 8013688:	802b98c0 	call	802b98c <__floatsisf>
 801368c:	1007883a 	mov	r3,r2
 8013690:	e0bfa517 	ldw	r2,-364(fp)
 8013694:	11002004 	addi	r4,r2,128
 8013698:	20800017 	ldw	r2,0(r4)
 801369c:	1809883a 	mov	r4,r3
 80136a0:	100b883a 	mov	r5,r2
 80136a4:	802b7fc0 	call	802b7fc <__mulsf3>
 80136a8:	1007883a 	mov	r3,r2
 80136ac:	e0ffac15 	stw	r3,-336(fp)
		tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80136b0:	e0bfa417 	ldw	r2,-368(fp)
 80136b4:	10801804 	addi	r2,r2,96
 80136b8:	1080000b 	ldhu	r2,0(r2)
 80136bc:	10bfffcc 	andi	r2,r2,65535
 80136c0:	10a0001c 	xori	r2,r2,32768
 80136c4:	10a00004 	addi	r2,r2,-32768
 80136c8:	1009883a 	mov	r4,r2
 80136cc:	802b98c0 	call	802b98c <__floatsisf>
 80136d0:	1007883a 	mov	r3,r2
 80136d4:	e0bfa517 	ldw	r2,-364(fp)
 80136d8:	11003004 	addi	r4,r2,192
 80136dc:	20800017 	ldw	r2,0(r4)
 80136e0:	1809883a 	mov	r4,r3
 80136e4:	100b883a 	mov	r5,r2
 80136e8:	802b7fc0 	call	802b7fc <__mulsf3>
 80136ec:	1007883a 	mov	r3,r2
 80136f0:	e0ffad15 	stw	r3,-332(fp)

		tmp10 = tmp0 + tmp2;	/* phase 3 */
 80136f4:	e13faa17 	ldw	r4,-344(fp)
 80136f8:	e17fac17 	ldw	r5,-336(fp)
 80136fc:	802b7580 	call	802b758 <__addsf3>
 8013700:	1007883a 	mov	r3,r2
 8013704:	e0ffae15 	stw	r3,-328(fp)
		tmp11 = tmp0 - tmp2;
 8013708:	e13faa17 	ldw	r4,-344(fp)
 801370c:	e17fac17 	ldw	r5,-336(fp)
 8013710:	802b7a40 	call	802b7a4 <__subsf3>
 8013714:	1007883a 	mov	r3,r2
 8013718:	e0ffaf15 	stw	r3,-324(fp)

		tmp13 = tmp1 + tmp3;	/* phases 5-3 */
 801371c:	e13fab17 	ldw	r4,-340(fp)
 8013720:	e17fad17 	ldw	r5,-332(fp)
 8013724:	802b7580 	call	802b758 <__addsf3>
 8013728:	1007883a 	mov	r3,r2
 801372c:	e0ffb015 	stw	r3,-320(fp)
		tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 8013730:	e13fab17 	ldw	r4,-340(fp)
 8013734:	e17fad17 	ldw	r5,-332(fp)
 8013738:	802b7a40 	call	802b7a4 <__subsf3>
 801373c:	1007883a 	mov	r3,r2
 8013740:	1805883a 	mov	r2,r3
 8013744:	1009883a 	mov	r4,r2
 8013748:	014fed74 	movhi	r5,16309
 801374c:	29413cc4 	addi	r5,r5,1267
 8013750:	802b7fc0 	call	802b7fc <__mulsf3>
 8013754:	1007883a 	mov	r3,r2
 8013758:	1805883a 	mov	r2,r3
 801375c:	1009883a 	mov	r4,r2
 8013760:	e17fb017 	ldw	r5,-320(fp)
 8013764:	802b7a40 	call	802b7a4 <__subsf3>
 8013768:	1007883a 	mov	r3,r2
 801376c:	e0ffb115 	stw	r3,-316(fp)

		tmp0 = tmp10 + tmp13;	/* phase 2 */
 8013770:	e13fae17 	ldw	r4,-328(fp)
 8013774:	e17fb017 	ldw	r5,-320(fp)
 8013778:	802b7580 	call	802b758 <__addsf3>
 801377c:	1007883a 	mov	r3,r2
 8013780:	e0ffaa15 	stw	r3,-344(fp)
		tmp3 = tmp10 - tmp13;
 8013784:	e13fae17 	ldw	r4,-328(fp)
 8013788:	e17fb017 	ldw	r5,-320(fp)
 801378c:	802b7a40 	call	802b7a4 <__subsf3>
 8013790:	1007883a 	mov	r3,r2
 8013794:	e0ffad15 	stw	r3,-332(fp)
		tmp1 = tmp11 + tmp12;
 8013798:	e13faf17 	ldw	r4,-324(fp)
 801379c:	e17fb117 	ldw	r5,-316(fp)
 80137a0:	802b7580 	call	802b758 <__addsf3>
 80137a4:	1007883a 	mov	r3,r2
 80137a8:	e0ffab15 	stw	r3,-340(fp)
		tmp2 = tmp11 - tmp12;
 80137ac:	e13faf17 	ldw	r4,-324(fp)
 80137b0:	e17fb117 	ldw	r5,-316(fp)
 80137b4:	802b7a40 	call	802b7a4 <__subsf3>
 80137b8:	1007883a 	mov	r3,r2
 80137bc:	e0ffac15 	stw	r3,-336(fp)

		/* Odd part */

		tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80137c0:	e0bfa417 	ldw	r2,-368(fp)
 80137c4:	10800404 	addi	r2,r2,16
 80137c8:	1080000b 	ldhu	r2,0(r2)
 80137cc:	10bfffcc 	andi	r2,r2,65535
 80137d0:	10a0001c 	xori	r2,r2,32768
 80137d4:	10a00004 	addi	r2,r2,-32768
 80137d8:	1009883a 	mov	r4,r2
 80137dc:	802b98c0 	call	802b98c <__floatsisf>
 80137e0:	1007883a 	mov	r3,r2
 80137e4:	e0bfa517 	ldw	r2,-364(fp)
 80137e8:	11000804 	addi	r4,r2,32
 80137ec:	20800017 	ldw	r2,0(r4)
 80137f0:	1809883a 	mov	r4,r3
 80137f4:	100b883a 	mov	r5,r2
 80137f8:	802b7fc0 	call	802b7fc <__mulsf3>
 80137fc:	1007883a 	mov	r3,r2
 8013800:	e0ffb215 	stw	r3,-312(fp)
		tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013804:	e0bfa417 	ldw	r2,-368(fp)
 8013808:	10800c04 	addi	r2,r2,48
 801380c:	1080000b 	ldhu	r2,0(r2)
 8013810:	10bfffcc 	andi	r2,r2,65535
 8013814:	10a0001c 	xori	r2,r2,32768
 8013818:	10a00004 	addi	r2,r2,-32768
 801381c:	1009883a 	mov	r4,r2
 8013820:	802b98c0 	call	802b98c <__floatsisf>
 8013824:	1007883a 	mov	r3,r2
 8013828:	e0bfa517 	ldw	r2,-364(fp)
 801382c:	11001804 	addi	r4,r2,96
 8013830:	20800017 	ldw	r2,0(r4)
 8013834:	1809883a 	mov	r4,r3
 8013838:	100b883a 	mov	r5,r2
 801383c:	802b7fc0 	call	802b7fc <__mulsf3>
 8013840:	1007883a 	mov	r3,r2
 8013844:	e0ffb315 	stw	r3,-308(fp)
		tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013848:	e0bfa417 	ldw	r2,-368(fp)
 801384c:	10801404 	addi	r2,r2,80
 8013850:	1080000b 	ldhu	r2,0(r2)
 8013854:	10bfffcc 	andi	r2,r2,65535
 8013858:	10a0001c 	xori	r2,r2,32768
 801385c:	10a00004 	addi	r2,r2,-32768
 8013860:	1009883a 	mov	r4,r2
 8013864:	802b98c0 	call	802b98c <__floatsisf>
 8013868:	1007883a 	mov	r3,r2
 801386c:	e0bfa517 	ldw	r2,-364(fp)
 8013870:	11002804 	addi	r4,r2,160
 8013874:	20800017 	ldw	r2,0(r4)
 8013878:	1809883a 	mov	r4,r3
 801387c:	100b883a 	mov	r5,r2
 8013880:	802b7fc0 	call	802b7fc <__mulsf3>
 8013884:	1007883a 	mov	r3,r2
 8013888:	e0ffb415 	stw	r3,-304(fp)
		tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801388c:	e0bfa417 	ldw	r2,-368(fp)
 8013890:	10801c04 	addi	r2,r2,112
 8013894:	1080000b 	ldhu	r2,0(r2)
 8013898:	10bfffcc 	andi	r2,r2,65535
 801389c:	10a0001c 	xori	r2,r2,32768
 80138a0:	10a00004 	addi	r2,r2,-32768
 80138a4:	1009883a 	mov	r4,r2
 80138a8:	802b98c0 	call	802b98c <__floatsisf>
 80138ac:	1007883a 	mov	r3,r2
 80138b0:	e0bfa517 	ldw	r2,-364(fp)
 80138b4:	11003804 	addi	r4,r2,224
 80138b8:	20800017 	ldw	r2,0(r4)
 80138bc:	1809883a 	mov	r4,r3
 80138c0:	100b883a 	mov	r5,r2
 80138c4:	802b7fc0 	call	802b7fc <__mulsf3>
 80138c8:	1007883a 	mov	r3,r2
 80138cc:	e0ffb515 	stw	r3,-300(fp)

		z13 = tmp6 + tmp5;		/* phase 6 */
 80138d0:	e13fb417 	ldw	r4,-304(fp)
 80138d4:	e17fb317 	ldw	r5,-308(fp)
 80138d8:	802b7580 	call	802b758 <__addsf3>
 80138dc:	1007883a 	mov	r3,r2
 80138e0:	e0ffb615 	stw	r3,-296(fp)
		z10 = tmp6 - tmp5;
 80138e4:	e13fb417 	ldw	r4,-304(fp)
 80138e8:	e17fb317 	ldw	r5,-308(fp)
 80138ec:	802b7a40 	call	802b7a4 <__subsf3>
 80138f0:	1007883a 	mov	r3,r2
 80138f4:	e0ffb715 	stw	r3,-292(fp)
		z11 = tmp4 + tmp7;
 80138f8:	e13fb217 	ldw	r4,-312(fp)
 80138fc:	e17fb517 	ldw	r5,-300(fp)
 8013900:	802b7580 	call	802b758 <__addsf3>
 8013904:	1007883a 	mov	r3,r2
 8013908:	e0ffb815 	stw	r3,-288(fp)
		z12 = tmp4 - tmp7;
 801390c:	e13fb217 	ldw	r4,-312(fp)
 8013910:	e17fb517 	ldw	r5,-300(fp)
 8013914:	802b7a40 	call	802b7a4 <__subsf3>
 8013918:	1007883a 	mov	r3,r2
 801391c:	e0ffb915 	stw	r3,-284(fp)

		tmp7 = z11 + z13;		/* phase 5 */
 8013920:	e13fb817 	ldw	r4,-288(fp)
 8013924:	e17fb617 	ldw	r5,-296(fp)
 8013928:	802b7580 	call	802b758 <__addsf3>
 801392c:	1007883a 	mov	r3,r2
 8013930:	e0ffb515 	stw	r3,-300(fp)
		tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562); /* 2*c4 */
 8013934:	e13fb817 	ldw	r4,-288(fp)
 8013938:	e17fb617 	ldw	r5,-296(fp)
 801393c:	802b7a40 	call	802b7a4 <__subsf3>
 8013940:	1007883a 	mov	r3,r2
 8013944:	1805883a 	mov	r2,r3
 8013948:	1009883a 	mov	r4,r2
 801394c:	014fed74 	movhi	r5,16309
 8013950:	29413cc4 	addi	r5,r5,1267
 8013954:	802b7fc0 	call	802b7fc <__mulsf3>
 8013958:	1007883a 	mov	r3,r2
 801395c:	e0ffaf15 	stw	r3,-324(fp)

		z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
 8013960:	e13fb717 	ldw	r4,-292(fp)
 8013964:	e17fb917 	ldw	r5,-284(fp)
 8013968:	802b7580 	call	802b758 <__addsf3>
 801396c:	1007883a 	mov	r3,r2
 8013970:	1805883a 	mov	r2,r3
 8013974:	1009883a 	mov	r4,r2
 8013978:	014ffb74 	movhi	r5,16365
 801397c:	2960d784 	addi	r5,r5,-31906
 8013980:	802b7fc0 	call	802b7fc <__mulsf3>
 8013984:	1007883a 	mov	r3,r2
 8013988:	e0ffba15 	stw	r3,-280(fp)
		tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 801398c:	e13fb917 	ldw	r4,-284(fp)
 8013990:	014fe2f4 	movhi	r5,16267
 8013994:	2962f504 	addi	r5,r5,-29740
 8013998:	802b7fc0 	call	802b7fc <__mulsf3>
 801399c:	1007883a 	mov	r3,r2
 80139a0:	1805883a 	mov	r2,r3
 80139a4:	e13fba17 	ldw	r4,-280(fp)
 80139a8:	100b883a 	mov	r5,r2
 80139ac:	802b7a40 	call	802b7a4 <__subsf3>
 80139b0:	1007883a 	mov	r3,r2
 80139b4:	e0ffae15 	stw	r3,-328(fp)
		tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 80139b8:	e13fb717 	ldw	r4,-292(fp)
 80139bc:	015009f4 	movhi	r5,16423
 80139c0:	294f5d44 	addi	r5,r5,15733
 80139c4:	802b7fc0 	call	802b7fc <__mulsf3>
 80139c8:	1007883a 	mov	r3,r2
 80139cc:	1805883a 	mov	r2,r3
 80139d0:	e13fba17 	ldw	r4,-280(fp)
 80139d4:	100b883a 	mov	r5,r2
 80139d8:	802b7a40 	call	802b7a4 <__subsf3>
 80139dc:	1007883a 	mov	r3,r2
 80139e0:	e0ffb115 	stw	r3,-316(fp)

		tmp6 = tmp12 - tmp7;	/* phase 2 */
 80139e4:	e13fb117 	ldw	r4,-316(fp)
 80139e8:	e17fb517 	ldw	r5,-300(fp)
 80139ec:	802b7a40 	call	802b7a4 <__subsf3>
 80139f0:	1007883a 	mov	r3,r2
 80139f4:	e0ffb415 	stw	r3,-304(fp)
		tmp5 = tmp11 - tmp6;
 80139f8:	e13faf17 	ldw	r4,-324(fp)
 80139fc:	e17fb417 	ldw	r5,-304(fp)
 8013a00:	802b7a40 	call	802b7a4 <__subsf3>
 8013a04:	1007883a 	mov	r3,r2
 8013a08:	e0ffb315 	stw	r3,-308(fp)
		tmp4 = tmp10 - tmp5;
 8013a0c:	e13fae17 	ldw	r4,-328(fp)
 8013a10:	e17fb317 	ldw	r5,-308(fp)
 8013a14:	802b7a40 	call	802b7a4 <__subsf3>
 8013a18:	1007883a 	mov	r3,r2
 8013a1c:	e0ffb215 	stw	r3,-312(fp)

		wsptr[DCTSIZE*0] = tmp0 + tmp7;
 8013a20:	e13faa17 	ldw	r4,-344(fp)
 8013a24:	e17fb517 	ldw	r5,-300(fp)
 8013a28:	802b7580 	call	802b758 <__addsf3>
 8013a2c:	1009883a 	mov	r4,r2
 8013a30:	2007883a 	mov	r3,r4
 8013a34:	e0bfa617 	ldw	r2,-360(fp)
 8013a38:	10c00015 	stw	r3,0(r2)
		wsptr[DCTSIZE*7] = tmp0 - tmp7;
 8013a3c:	e0bfa617 	ldw	r2,-360(fp)
 8013a40:	14003804 	addi	r16,r2,224
 8013a44:	e13faa17 	ldw	r4,-344(fp)
 8013a48:	e17fb517 	ldw	r5,-300(fp)
 8013a4c:	802b7a40 	call	802b7a4 <__subsf3>
 8013a50:	1007883a 	mov	r3,r2
 8013a54:	1805883a 	mov	r2,r3
 8013a58:	80800015 	stw	r2,0(r16)
		wsptr[DCTSIZE*1] = tmp1 + tmp6;
 8013a5c:	e0bfa617 	ldw	r2,-360(fp)
 8013a60:	14000804 	addi	r16,r2,32
 8013a64:	e13fab17 	ldw	r4,-340(fp)
 8013a68:	e17fb417 	ldw	r5,-304(fp)
 8013a6c:	802b7580 	call	802b758 <__addsf3>
 8013a70:	1007883a 	mov	r3,r2
 8013a74:	1805883a 	mov	r2,r3
 8013a78:	80800015 	stw	r2,0(r16)
		wsptr[DCTSIZE*6] = tmp1 - tmp6;
 8013a7c:	e0bfa617 	ldw	r2,-360(fp)
 8013a80:	14003004 	addi	r16,r2,192
 8013a84:	e13fab17 	ldw	r4,-340(fp)
 8013a88:	e17fb417 	ldw	r5,-304(fp)
 8013a8c:	802b7a40 	call	802b7a4 <__subsf3>
 8013a90:	1007883a 	mov	r3,r2
 8013a94:	1805883a 	mov	r2,r3
 8013a98:	80800015 	stw	r2,0(r16)
		wsptr[DCTSIZE*2] = tmp2 + tmp5;
 8013a9c:	e0bfa617 	ldw	r2,-360(fp)
 8013aa0:	14001004 	addi	r16,r2,64
 8013aa4:	e13fac17 	ldw	r4,-336(fp)
 8013aa8:	e17fb317 	ldw	r5,-308(fp)
 8013aac:	802b7580 	call	802b758 <__addsf3>
 8013ab0:	1007883a 	mov	r3,r2
 8013ab4:	1805883a 	mov	r2,r3
 8013ab8:	80800015 	stw	r2,0(r16)
		wsptr[DCTSIZE*5] = tmp2 - tmp5;
 8013abc:	e0bfa617 	ldw	r2,-360(fp)
 8013ac0:	14002804 	addi	r16,r2,160
 8013ac4:	e13fac17 	ldw	r4,-336(fp)
 8013ac8:	e17fb317 	ldw	r5,-308(fp)
 8013acc:	802b7a40 	call	802b7a4 <__subsf3>
 8013ad0:	1007883a 	mov	r3,r2
 8013ad4:	1805883a 	mov	r2,r3
 8013ad8:	80800015 	stw	r2,0(r16)
		wsptr[DCTSIZE*3] = tmp3 + tmp4;
 8013adc:	e0bfa617 	ldw	r2,-360(fp)
 8013ae0:	14001804 	addi	r16,r2,96
 8013ae4:	e13fad17 	ldw	r4,-332(fp)
 8013ae8:	e17fb217 	ldw	r5,-312(fp)
 8013aec:	802b7580 	call	802b758 <__addsf3>
 8013af0:	1007883a 	mov	r3,r2
 8013af4:	1805883a 	mov	r2,r3
 8013af8:	80800015 	stw	r2,0(r16)
		wsptr[DCTSIZE*4] = tmp3 - tmp4;
 8013afc:	e0bfa617 	ldw	r2,-360(fp)
 8013b00:	14002004 	addi	r16,r2,128
 8013b04:	e13fad17 	ldw	r4,-332(fp)
 8013b08:	e17fb217 	ldw	r5,-312(fp)
 8013b0c:	802b7a40 	call	802b7a4 <__subsf3>
 8013b10:	1007883a 	mov	r3,r2
 8013b14:	1805883a 	mov	r2,r3
 8013b18:	80800015 	stw	r2,0(r16)

		inptr++;			/* advance pointers to next column */
 8013b1c:	e0bfa417 	ldw	r2,-368(fp)
 8013b20:	10800084 	addi	r2,r2,2
 8013b24:	e0bfa415 	stw	r2,-368(fp)
		quantptr++;
 8013b28:	e0bfa517 	ldw	r2,-364(fp)
 8013b2c:	10800104 	addi	r2,r2,4
 8013b30:	e0bfa515 	stw	r2,-364(fp)
		wsptr++;
 8013b34:	e0bfa617 	ldw	r2,-360(fp)
 8013b38:	10800104 	addi	r2,r2,4
 8013b3c:	e0bfa615 	stw	r2,-360(fp)
	/* Pass 1: process columns from input, store into work array. */

	inptr = coef_block;
	quantptr = (FLOAT_MULT_TYPE *) compptr->dct_table;
	wsptr = workspace;
	for (ctr = DCTSIZE; ctr > 0; ctr--) {
 8013b40:	e0bfa717 	ldw	r2,-356(fp)
 8013b44:	10bfffc4 	addi	r2,r2,-1
 8013b48:	e0bfa715 	stw	r2,-356(fp)
 8013b4c:	e0bfa717 	ldw	r2,-356(fp)
 8013b50:	00be3d16 	blt	zero,r2,8013448 <jpeg_idct_float+0x58>
		wsptr++;
	}

	/* Pass 2: process rows from work array, store into output array. */

	wsptr = workspace;
 8013b54:	e0bfbc04 	addi	r2,fp,-272
 8013b58:	e0bfa615 	stw	r2,-360(fp)
	for (ctr = 0; ctr < DCTSIZE; ctr++) {
 8013b5c:	e03fa715 	stw	zero,-356(fp)
 8013b60:	00013706 	br	8014040 <jpeg_idct_float+0xc50>
		outptr = output_buf[ctr] + output_col;
 8013b64:	e0bfa717 	ldw	r2,-356(fp)
 8013b68:	1085883a 	add	r2,r2,r2
 8013b6c:	1085883a 	add	r2,r2,r2
 8013b70:	e0ffff17 	ldw	r3,-4(fp)
 8013b74:	1885883a 	add	r2,r3,r2
 8013b78:	10c00017 	ldw	r3,0(r2)
 8013b7c:	e0800317 	ldw	r2,12(fp)
 8013b80:	1885883a 	add	r2,r3,r2
 8013b84:	e0bfbb15 	stw	r2,-276(fp)
		*/

		/* Even part */

		/* Apply signed->unsigned and prepare float->int conversion */
		z5 = wsptr[0] + ((FAST_FLOAT) CENTERJSAMPLE + (FAST_FLOAT) 0.5);
 8013b88:	e0ffa617 	ldw	r3,-360(fp)
 8013b8c:	18800017 	ldw	r2,0(r3)
 8013b90:	1009883a 	mov	r4,r2
 8013b94:	0150c074 	movhi	r5,17153
 8013b98:	29600004 	addi	r5,r5,-32768
 8013b9c:	802b7580 	call	802b758 <__addsf3>
 8013ba0:	1007883a 	mov	r3,r2
 8013ba4:	e0ffba15 	stw	r3,-280(fp)
		tmp10 = z5 + wsptr[4];
 8013ba8:	e0bfa617 	ldw	r2,-360(fp)
 8013bac:	10c00404 	addi	r3,r2,16
 8013bb0:	18800017 	ldw	r2,0(r3)
 8013bb4:	1009883a 	mov	r4,r2
 8013bb8:	e17fba17 	ldw	r5,-280(fp)
 8013bbc:	802b7580 	call	802b758 <__addsf3>
 8013bc0:	1007883a 	mov	r3,r2
 8013bc4:	e0ffae15 	stw	r3,-328(fp)
		tmp11 = z5 - wsptr[4];
 8013bc8:	e0bfa617 	ldw	r2,-360(fp)
 8013bcc:	10c00404 	addi	r3,r2,16
 8013bd0:	18800017 	ldw	r2,0(r3)
 8013bd4:	e13fba17 	ldw	r4,-280(fp)
 8013bd8:	100b883a 	mov	r5,r2
 8013bdc:	802b7a40 	call	802b7a4 <__subsf3>
 8013be0:	1007883a 	mov	r3,r2
 8013be4:	e0ffaf15 	stw	r3,-324(fp)

		tmp13 = wsptr[2] + wsptr[6];
 8013be8:	e0bfa617 	ldw	r2,-360(fp)
 8013bec:	10800204 	addi	r2,r2,8
 8013bf0:	10c00017 	ldw	r3,0(r2)
 8013bf4:	e0bfa617 	ldw	r2,-360(fp)
 8013bf8:	11000604 	addi	r4,r2,24
 8013bfc:	20800017 	ldw	r2,0(r4)
 8013c00:	1809883a 	mov	r4,r3
 8013c04:	100b883a 	mov	r5,r2
 8013c08:	802b7580 	call	802b758 <__addsf3>
 8013c0c:	1007883a 	mov	r3,r2
 8013c10:	e0ffb015 	stw	r3,-320(fp)
		tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;
 8013c14:	e0bfa617 	ldw	r2,-360(fp)
 8013c18:	10800204 	addi	r2,r2,8
 8013c1c:	10c00017 	ldw	r3,0(r2)
 8013c20:	e0bfa617 	ldw	r2,-360(fp)
 8013c24:	11000604 	addi	r4,r2,24
 8013c28:	20800017 	ldw	r2,0(r4)
 8013c2c:	1809883a 	mov	r4,r3
 8013c30:	100b883a 	mov	r5,r2
 8013c34:	802b7a40 	call	802b7a4 <__subsf3>
 8013c38:	1007883a 	mov	r3,r2
 8013c3c:	1805883a 	mov	r2,r3
 8013c40:	1009883a 	mov	r4,r2
 8013c44:	014fed74 	movhi	r5,16309
 8013c48:	29413cc4 	addi	r5,r5,1267
 8013c4c:	802b7fc0 	call	802b7fc <__mulsf3>
 8013c50:	1007883a 	mov	r3,r2
 8013c54:	1805883a 	mov	r2,r3
 8013c58:	1009883a 	mov	r4,r2
 8013c5c:	e17fb017 	ldw	r5,-320(fp)
 8013c60:	802b7a40 	call	802b7a4 <__subsf3>
 8013c64:	1007883a 	mov	r3,r2
 8013c68:	e0ffb115 	stw	r3,-316(fp)

		tmp0 = tmp10 + tmp13;
 8013c6c:	e13fae17 	ldw	r4,-328(fp)
 8013c70:	e17fb017 	ldw	r5,-320(fp)
 8013c74:	802b7580 	call	802b758 <__addsf3>
 8013c78:	1007883a 	mov	r3,r2
 8013c7c:	e0ffaa15 	stw	r3,-344(fp)
		tmp3 = tmp10 - tmp13;
 8013c80:	e13fae17 	ldw	r4,-328(fp)
 8013c84:	e17fb017 	ldw	r5,-320(fp)
 8013c88:	802b7a40 	call	802b7a4 <__subsf3>
 8013c8c:	1007883a 	mov	r3,r2
 8013c90:	e0ffad15 	stw	r3,-332(fp)
		tmp1 = tmp11 + tmp12;
 8013c94:	e13faf17 	ldw	r4,-324(fp)
 8013c98:	e17fb117 	ldw	r5,-316(fp)
 8013c9c:	802b7580 	call	802b758 <__addsf3>
 8013ca0:	1007883a 	mov	r3,r2
 8013ca4:	e0ffab15 	stw	r3,-340(fp)
		tmp2 = tmp11 - tmp12;
 8013ca8:	e13faf17 	ldw	r4,-324(fp)
 8013cac:	e17fb117 	ldw	r5,-316(fp)
 8013cb0:	802b7a40 	call	802b7a4 <__subsf3>
 8013cb4:	1007883a 	mov	r3,r2
 8013cb8:	e0ffac15 	stw	r3,-336(fp)

		/* Odd part */

		z13 = wsptr[5] + wsptr[3];
 8013cbc:	e0bfa617 	ldw	r2,-360(fp)
 8013cc0:	10800504 	addi	r2,r2,20
 8013cc4:	10c00017 	ldw	r3,0(r2)
 8013cc8:	e0bfa617 	ldw	r2,-360(fp)
 8013ccc:	11000304 	addi	r4,r2,12
 8013cd0:	20800017 	ldw	r2,0(r4)
 8013cd4:	1809883a 	mov	r4,r3
 8013cd8:	100b883a 	mov	r5,r2
 8013cdc:	802b7580 	call	802b758 <__addsf3>
 8013ce0:	1007883a 	mov	r3,r2
 8013ce4:	e0ffb615 	stw	r3,-296(fp)
		z10 = wsptr[5] - wsptr[3];
 8013ce8:	e0bfa617 	ldw	r2,-360(fp)
 8013cec:	10800504 	addi	r2,r2,20
 8013cf0:	10c00017 	ldw	r3,0(r2)
 8013cf4:	e0bfa617 	ldw	r2,-360(fp)
 8013cf8:	11000304 	addi	r4,r2,12
 8013cfc:	20800017 	ldw	r2,0(r4)
 8013d00:	1809883a 	mov	r4,r3
 8013d04:	100b883a 	mov	r5,r2
 8013d08:	802b7a40 	call	802b7a4 <__subsf3>
 8013d0c:	1007883a 	mov	r3,r2
 8013d10:	e0ffb715 	stw	r3,-292(fp)
		z11 = wsptr[1] + wsptr[7];
 8013d14:	e0bfa617 	ldw	r2,-360(fp)
 8013d18:	10800104 	addi	r2,r2,4
 8013d1c:	10c00017 	ldw	r3,0(r2)
 8013d20:	e0bfa617 	ldw	r2,-360(fp)
 8013d24:	11000704 	addi	r4,r2,28
 8013d28:	20800017 	ldw	r2,0(r4)
 8013d2c:	1809883a 	mov	r4,r3
 8013d30:	100b883a 	mov	r5,r2
 8013d34:	802b7580 	call	802b758 <__addsf3>
 8013d38:	1007883a 	mov	r3,r2
 8013d3c:	e0ffb815 	stw	r3,-288(fp)
		z12 = wsptr[1] - wsptr[7];
 8013d40:	e0bfa617 	ldw	r2,-360(fp)
 8013d44:	10800104 	addi	r2,r2,4
 8013d48:	10c00017 	ldw	r3,0(r2)
 8013d4c:	e0bfa617 	ldw	r2,-360(fp)
 8013d50:	11000704 	addi	r4,r2,28
 8013d54:	20800017 	ldw	r2,0(r4)
 8013d58:	1809883a 	mov	r4,r3
 8013d5c:	100b883a 	mov	r5,r2
 8013d60:	802b7a40 	call	802b7a4 <__subsf3>
 8013d64:	1007883a 	mov	r3,r2
 8013d68:	e0ffb915 	stw	r3,-284(fp)

		tmp7 = z11 + z13;
 8013d6c:	e13fb817 	ldw	r4,-288(fp)
 8013d70:	e17fb617 	ldw	r5,-296(fp)
 8013d74:	802b7580 	call	802b758 <__addsf3>
 8013d78:	1007883a 	mov	r3,r2
 8013d7c:	e0ffb515 	stw	r3,-300(fp)
		tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562);
 8013d80:	e13fb817 	ldw	r4,-288(fp)
 8013d84:	e17fb617 	ldw	r5,-296(fp)
 8013d88:	802b7a40 	call	802b7a4 <__subsf3>
 8013d8c:	1007883a 	mov	r3,r2
 8013d90:	1805883a 	mov	r2,r3
 8013d94:	1009883a 	mov	r4,r2
 8013d98:	014fed74 	movhi	r5,16309
 8013d9c:	29413cc4 	addi	r5,r5,1267
 8013da0:	802b7fc0 	call	802b7fc <__mulsf3>
 8013da4:	1007883a 	mov	r3,r2
 8013da8:	e0ffaf15 	stw	r3,-324(fp)

		z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
 8013dac:	e13fb717 	ldw	r4,-292(fp)
 8013db0:	e17fb917 	ldw	r5,-284(fp)
 8013db4:	802b7580 	call	802b758 <__addsf3>
 8013db8:	1007883a 	mov	r3,r2
 8013dbc:	1805883a 	mov	r2,r3
 8013dc0:	1009883a 	mov	r4,r2
 8013dc4:	014ffb74 	movhi	r5,16365
 8013dc8:	2960d784 	addi	r5,r5,-31906
 8013dcc:	802b7fc0 	call	802b7fc <__mulsf3>
 8013dd0:	1007883a 	mov	r3,r2
 8013dd4:	e0ffba15 	stw	r3,-280(fp)
		tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 8013dd8:	e13fb917 	ldw	r4,-284(fp)
 8013ddc:	014fe2f4 	movhi	r5,16267
 8013de0:	2962f504 	addi	r5,r5,-29740
 8013de4:	802b7fc0 	call	802b7fc <__mulsf3>
 8013de8:	1007883a 	mov	r3,r2
 8013dec:	1805883a 	mov	r2,r3
 8013df0:	e13fba17 	ldw	r4,-280(fp)
 8013df4:	100b883a 	mov	r5,r2
 8013df8:	802b7a40 	call	802b7a4 <__subsf3>
 8013dfc:	1007883a 	mov	r3,r2
 8013e00:	e0ffae15 	stw	r3,-328(fp)
		tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 8013e04:	e13fb717 	ldw	r4,-292(fp)
 8013e08:	015009f4 	movhi	r5,16423
 8013e0c:	294f5d44 	addi	r5,r5,15733
 8013e10:	802b7fc0 	call	802b7fc <__mulsf3>
 8013e14:	1007883a 	mov	r3,r2
 8013e18:	1805883a 	mov	r2,r3
 8013e1c:	e13fba17 	ldw	r4,-280(fp)
 8013e20:	100b883a 	mov	r5,r2
 8013e24:	802b7a40 	call	802b7a4 <__subsf3>
 8013e28:	1007883a 	mov	r3,r2
 8013e2c:	e0ffb115 	stw	r3,-316(fp)

		tmp6 = tmp12 - tmp7;
 8013e30:	e13fb117 	ldw	r4,-316(fp)
 8013e34:	e17fb517 	ldw	r5,-300(fp)
 8013e38:	802b7a40 	call	802b7a4 <__subsf3>
 8013e3c:	1007883a 	mov	r3,r2
 8013e40:	e0ffb415 	stw	r3,-304(fp)
		tmp5 = tmp11 - tmp6;
 8013e44:	e13faf17 	ldw	r4,-324(fp)
 8013e48:	e17fb417 	ldw	r5,-304(fp)
 8013e4c:	802b7a40 	call	802b7a4 <__subsf3>
 8013e50:	1007883a 	mov	r3,r2
 8013e54:	e0ffb315 	stw	r3,-308(fp)
		tmp4 = tmp10 - tmp5;
 8013e58:	e13fae17 	ldw	r4,-328(fp)
 8013e5c:	e17fb317 	ldw	r5,-308(fp)
 8013e60:	802b7a40 	call	802b7a4 <__subsf3>
 8013e64:	1007883a 	mov	r3,r2
 8013e68:	e0ffb215 	stw	r3,-312(fp)

		/* Final output stage: float->int conversion and range-limit */

		outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 8013e6c:	e13faa17 	ldw	r4,-344(fp)
 8013e70:	e17fb517 	ldw	r5,-300(fp)
 8013e74:	802b7580 	call	802b758 <__addsf3>
 8013e78:	1007883a 	mov	r3,r2
 8013e7c:	1805883a 	mov	r2,r3
 8013e80:	1009883a 	mov	r4,r2
 8013e84:	802ba300 	call	802ba30 <__fixsfsi>
 8013e88:	1080ffcc 	andi	r2,r2,1023
 8013e8c:	e0ffa817 	ldw	r3,-352(fp)
 8013e90:	1885883a 	add	r2,r3,r2
 8013e94:	10c00003 	ldbu	r3,0(r2)
 8013e98:	e0bfbb17 	ldw	r2,-276(fp)
 8013e9c:	10c00005 	stb	r3,0(r2)
		outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 8013ea0:	e0bfbb17 	ldw	r2,-276(fp)
 8013ea4:	140001c4 	addi	r16,r2,7
 8013ea8:	e13faa17 	ldw	r4,-344(fp)
 8013eac:	e17fb517 	ldw	r5,-300(fp)
 8013eb0:	802b7a40 	call	802b7a4 <__subsf3>
 8013eb4:	1007883a 	mov	r3,r2
 8013eb8:	1805883a 	mov	r2,r3
 8013ebc:	1009883a 	mov	r4,r2
 8013ec0:	802ba300 	call	802ba30 <__fixsfsi>
 8013ec4:	1080ffcc 	andi	r2,r2,1023
 8013ec8:	e0ffa817 	ldw	r3,-352(fp)
 8013ecc:	1885883a 	add	r2,r3,r2
 8013ed0:	10800003 	ldbu	r2,0(r2)
 8013ed4:	80800005 	stb	r2,0(r16)
		outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 8013ed8:	e0bfbb17 	ldw	r2,-276(fp)
 8013edc:	14000044 	addi	r16,r2,1
 8013ee0:	e13fab17 	ldw	r4,-340(fp)
 8013ee4:	e17fb417 	ldw	r5,-304(fp)
 8013ee8:	802b7580 	call	802b758 <__addsf3>
 8013eec:	1007883a 	mov	r3,r2
 8013ef0:	1805883a 	mov	r2,r3
 8013ef4:	1009883a 	mov	r4,r2
 8013ef8:	802ba300 	call	802ba30 <__fixsfsi>
 8013efc:	1080ffcc 	andi	r2,r2,1023
 8013f00:	e0ffa817 	ldw	r3,-352(fp)
 8013f04:	1885883a 	add	r2,r3,r2
 8013f08:	10800003 	ldbu	r2,0(r2)
 8013f0c:	80800005 	stb	r2,0(r16)
		outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 8013f10:	e0bfbb17 	ldw	r2,-276(fp)
 8013f14:	14000184 	addi	r16,r2,6
 8013f18:	e13fab17 	ldw	r4,-340(fp)
 8013f1c:	e17fb417 	ldw	r5,-304(fp)
 8013f20:	802b7a40 	call	802b7a4 <__subsf3>
 8013f24:	1007883a 	mov	r3,r2
 8013f28:	1805883a 	mov	r2,r3
 8013f2c:	1009883a 	mov	r4,r2
 8013f30:	802ba300 	call	802ba30 <__fixsfsi>
 8013f34:	1080ffcc 	andi	r2,r2,1023
 8013f38:	e0ffa817 	ldw	r3,-352(fp)
 8013f3c:	1885883a 	add	r2,r3,r2
 8013f40:	10800003 	ldbu	r2,0(r2)
 8013f44:	80800005 	stb	r2,0(r16)
		outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 8013f48:	e0bfbb17 	ldw	r2,-276(fp)
 8013f4c:	14000084 	addi	r16,r2,2
 8013f50:	e13fac17 	ldw	r4,-336(fp)
 8013f54:	e17fb317 	ldw	r5,-308(fp)
 8013f58:	802b7580 	call	802b758 <__addsf3>
 8013f5c:	1007883a 	mov	r3,r2
 8013f60:	1805883a 	mov	r2,r3
 8013f64:	1009883a 	mov	r4,r2
 8013f68:	802ba300 	call	802ba30 <__fixsfsi>
 8013f6c:	1080ffcc 	andi	r2,r2,1023
 8013f70:	e0ffa817 	ldw	r3,-352(fp)
 8013f74:	1885883a 	add	r2,r3,r2
 8013f78:	10800003 	ldbu	r2,0(r2)
 8013f7c:	80800005 	stb	r2,0(r16)
		outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 8013f80:	e0bfbb17 	ldw	r2,-276(fp)
 8013f84:	14000144 	addi	r16,r2,5
 8013f88:	e13fac17 	ldw	r4,-336(fp)
 8013f8c:	e17fb317 	ldw	r5,-308(fp)
 8013f90:	802b7a40 	call	802b7a4 <__subsf3>
 8013f94:	1007883a 	mov	r3,r2
 8013f98:	1805883a 	mov	r2,r3
 8013f9c:	1009883a 	mov	r4,r2
 8013fa0:	802ba300 	call	802ba30 <__fixsfsi>
 8013fa4:	1080ffcc 	andi	r2,r2,1023
 8013fa8:	e0ffa817 	ldw	r3,-352(fp)
 8013fac:	1885883a 	add	r2,r3,r2
 8013fb0:	10800003 	ldbu	r2,0(r2)
 8013fb4:	80800005 	stb	r2,0(r16)
		outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 8013fb8:	e0bfbb17 	ldw	r2,-276(fp)
 8013fbc:	140000c4 	addi	r16,r2,3
 8013fc0:	e13fad17 	ldw	r4,-332(fp)
 8013fc4:	e17fb217 	ldw	r5,-312(fp)
 8013fc8:	802b7580 	call	802b758 <__addsf3>
 8013fcc:	1007883a 	mov	r3,r2
 8013fd0:	1805883a 	mov	r2,r3
 8013fd4:	1009883a 	mov	r4,r2
 8013fd8:	802ba300 	call	802ba30 <__fixsfsi>
 8013fdc:	1080ffcc 	andi	r2,r2,1023
 8013fe0:	e0ffa817 	ldw	r3,-352(fp)
 8013fe4:	1885883a 	add	r2,r3,r2
 8013fe8:	10800003 	ldbu	r2,0(r2)
 8013fec:	80800005 	stb	r2,0(r16)
		outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
 8013ff0:	e0bfbb17 	ldw	r2,-276(fp)
 8013ff4:	14000104 	addi	r16,r2,4
 8013ff8:	e13fad17 	ldw	r4,-332(fp)
 8013ffc:	e17fb217 	ldw	r5,-312(fp)
 8014000:	802b7a40 	call	802b7a4 <__subsf3>
 8014004:	1007883a 	mov	r3,r2
 8014008:	1805883a 	mov	r2,r3
 801400c:	1009883a 	mov	r4,r2
 8014010:	802ba300 	call	802ba30 <__fixsfsi>
 8014014:	1080ffcc 	andi	r2,r2,1023
 8014018:	e0ffa817 	ldw	r3,-352(fp)
 801401c:	1885883a 	add	r2,r3,r2
 8014020:	10800003 	ldbu	r2,0(r2)
 8014024:	80800005 	stb	r2,0(r16)

		wsptr += DCTSIZE;		/* advance pointer to next row */
 8014028:	e0bfa617 	ldw	r2,-360(fp)
 801402c:	10800804 	addi	r2,r2,32
 8014030:	e0bfa615 	stw	r2,-360(fp)
	}

	/* Pass 2: process rows from work array, store into output array. */

	wsptr = workspace;
	for (ctr = 0; ctr < DCTSIZE; ctr++) {
 8014034:	e0bfa717 	ldw	r2,-356(fp)
 8014038:	10800044 	addi	r2,r2,1
 801403c:	e0bfa715 	stw	r2,-356(fp)
 8014040:	e0bfa717 	ldw	r2,-356(fp)
 8014044:	10800210 	cmplti	r2,r2,8
 8014048:	103ec61e 	bne	r2,zero,8013b64 <jpeg_idct_float+0x774>
		outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
		outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];

		wsptr += DCTSIZE;		/* advance pointer to next row */
	}
}
 801404c:	e037883a 	mov	sp,fp
 8014050:	dfc00217 	ldw	ra,8(sp)
 8014054:	df000117 	ldw	fp,4(sp)
 8014058:	dc000017 	ldw	r16,0(sp)
 801405c:	dec00304 	addi	sp,sp,12
 8014060:	f800283a 	ret

08014064 <jpeg_idct_ifast>:

	GLOBAL(void)
	jpeg_idct_ifast (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014064:	deffa104 	addi	sp,sp,-380
 8014068:	dfc05e15 	stw	ra,376(sp)
 801406c:	df005d15 	stw	fp,372(sp)
 8014070:	df005d04 	addi	fp,sp,372
 8014074:	e13ffc15 	stw	r4,-16(fp)
 8014078:	e17ffd15 	stw	r5,-12(fp)
 801407c:	e1bffe15 	stw	r6,-8(fp)
 8014080:	e1ffff15 	stw	r7,-4(fp)
	DCTELEM z5, z10, z11, z12, z13;
	JCOEFPTR inptr;
	IFAST_MULT_TYPE * quantptr;
	int * wsptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014084:	e0bffc17 	ldw	r2,-16(fp)
 8014088:	10804917 	ldw	r2,292(r2)
 801408c:	10802004 	addi	r2,r2,128
 8014090:	e0bfa715 	stw	r2,-356(fp)
	SHIFT_TEMPS			/* for DESCALE */
		ISHIFT_TEMPS			/* for IDESCALE */

		/* Pass 1: process columns from input, store into work array. */

		inptr = coef_block;
 8014094:	e0bffe17 	ldw	r2,-8(fp)
 8014098:	e0bfa315 	stw	r2,-372(fp)
	quantptr = (IFAST_MULT_TYPE *) compptr->dct_table;
 801409c:	e0bffd17 	ldw	r2,-12(fp)
 80140a0:	10801517 	ldw	r2,84(r2)
 80140a4:	e0bfa415 	stw	r2,-368(fp)
	wsptr = workspace;
 80140a8:	e0bfbc04 	addi	r2,fp,-272
 80140ac:	e0bfa515 	stw	r2,-364(fp)
	for (ctr = DCTSIZE; ctr > 0; ctr--) {
 80140b0:	00800204 	movi	r2,8
 80140b4:	e0bfa615 	stw	r2,-360(fp)
 80140b8:	00016a06 	br	8014664 <jpeg_idct_ifast+0x600>
		* DC coefficient (with scale factor as needed).
		* With typical images and quantization tables, half or more of the
		* column DCT calculations can be simplified this way.
		*/

		if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 80140bc:	e0bfa317 	ldw	r2,-372(fp)
 80140c0:	10800404 	addi	r2,r2,16
 80140c4:	1080000b 	ldhu	r2,0(r2)
 80140c8:	10bfffcc 	andi	r2,r2,65535
 80140cc:	10a0001c 	xori	r2,r2,32768
 80140d0:	10a00004 	addi	r2,r2,-32768
 80140d4:	10005e1e 	bne	r2,zero,8014250 <jpeg_idct_ifast+0x1ec>
 80140d8:	e0bfa317 	ldw	r2,-372(fp)
 80140dc:	10800804 	addi	r2,r2,32
 80140e0:	1080000b 	ldhu	r2,0(r2)
 80140e4:	10bfffcc 	andi	r2,r2,65535
 80140e8:	10a0001c 	xori	r2,r2,32768
 80140ec:	10a00004 	addi	r2,r2,-32768
 80140f0:	1000571e 	bne	r2,zero,8014250 <jpeg_idct_ifast+0x1ec>
			inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 80140f4:	e0bfa317 	ldw	r2,-372(fp)
 80140f8:	10800c04 	addi	r2,r2,48
 80140fc:	1080000b 	ldhu	r2,0(r2)
		* DC coefficient (with scale factor as needed).
		* With typical images and quantization tables, half or more of the
		* column DCT calculations can be simplified this way.
		*/

		if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8014100:	10bfffcc 	andi	r2,r2,65535
 8014104:	10a0001c 	xori	r2,r2,32768
 8014108:	10a00004 	addi	r2,r2,-32768
 801410c:	1000501e 	bne	r2,zero,8014250 <jpeg_idct_ifast+0x1ec>
			inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 8014110:	e0bfa317 	ldw	r2,-372(fp)
 8014114:	10801004 	addi	r2,r2,64
 8014118:	1080000b 	ldhu	r2,0(r2)
 801411c:	10bfffcc 	andi	r2,r2,65535
 8014120:	10a0001c 	xori	r2,r2,32768
 8014124:	10a00004 	addi	r2,r2,-32768
 8014128:	1000491e 	bne	r2,zero,8014250 <jpeg_idct_ifast+0x1ec>
			inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 801412c:	e0bfa317 	ldw	r2,-372(fp)
 8014130:	10801404 	addi	r2,r2,80
 8014134:	1080000b 	ldhu	r2,0(r2)
		* With typical images and quantization tables, half or more of the
		* column DCT calculations can be simplified this way.
		*/

		if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
			inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 8014138:	10bfffcc 	andi	r2,r2,65535
 801413c:	10a0001c 	xori	r2,r2,32768
 8014140:	10a00004 	addi	r2,r2,-32768
 8014144:	1000421e 	bne	r2,zero,8014250 <jpeg_idct_ifast+0x1ec>
			inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8014148:	e0bfa317 	ldw	r2,-372(fp)
 801414c:	10801804 	addi	r2,r2,96
 8014150:	1080000b 	ldhu	r2,0(r2)
 8014154:	10bfffcc 	andi	r2,r2,65535
 8014158:	10a0001c 	xori	r2,r2,32768
 801415c:	10a00004 	addi	r2,r2,-32768
 8014160:	10003b1e 	bne	r2,zero,8014250 <jpeg_idct_ifast+0x1ec>
			inptr[DCTSIZE*7] == 0) {
 8014164:	e0bfa317 	ldw	r2,-372(fp)
 8014168:	10801c04 	addi	r2,r2,112
 801416c:	1080000b 	ldhu	r2,0(r2)
		* column DCT calculations can be simplified this way.
		*/

		if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
			inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
			inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8014170:	10bfffcc 	andi	r2,r2,65535
 8014174:	10a0001c 	xori	r2,r2,32768
 8014178:	10a00004 	addi	r2,r2,-32768
 801417c:	1000341e 	bne	r2,zero,8014250 <jpeg_idct_ifast+0x1ec>
			inptr[DCTSIZE*7] == 0) {
				/* AC terms all zero */
				int dcval = (int) DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014180:	e0bfa317 	ldw	r2,-372(fp)
 8014184:	1080000b 	ldhu	r2,0(r2)
 8014188:	10ffffcc 	andi	r3,r2,65535
 801418c:	18e0001c 	xori	r3,r3,32768
 8014190:	18e00004 	addi	r3,r3,-32768
 8014194:	e0bfa417 	ldw	r2,-368(fp)
 8014198:	10800017 	ldw	r2,0(r2)
 801419c:	1809883a 	mov	r4,r3
 80141a0:	100b883a 	mov	r5,r2
 80141a4:	802c2180 	call	802c218 <__mulsi3>
 80141a8:	e0bfa815 	stw	r2,-352(fp)

				wsptr[DCTSIZE*0] = dcval;
 80141ac:	e0bfa517 	ldw	r2,-364(fp)
 80141b0:	e0ffa817 	ldw	r3,-352(fp)
 80141b4:	10c00015 	stw	r3,0(r2)
				wsptr[DCTSIZE*1] = dcval;
 80141b8:	e0bfa517 	ldw	r2,-364(fp)
 80141bc:	10800804 	addi	r2,r2,32
 80141c0:	e0ffa817 	ldw	r3,-352(fp)
 80141c4:	10c00015 	stw	r3,0(r2)
				wsptr[DCTSIZE*2] = dcval;
 80141c8:	e0bfa517 	ldw	r2,-364(fp)
 80141cc:	10801004 	addi	r2,r2,64
 80141d0:	e0ffa817 	ldw	r3,-352(fp)
 80141d4:	10c00015 	stw	r3,0(r2)
				wsptr[DCTSIZE*3] = dcval;
 80141d8:	e0bfa517 	ldw	r2,-364(fp)
 80141dc:	10801804 	addi	r2,r2,96
 80141e0:	e0ffa817 	ldw	r3,-352(fp)
 80141e4:	10c00015 	stw	r3,0(r2)
				wsptr[DCTSIZE*4] = dcval;
 80141e8:	e0bfa517 	ldw	r2,-364(fp)
 80141ec:	10802004 	addi	r2,r2,128
 80141f0:	e0ffa817 	ldw	r3,-352(fp)
 80141f4:	10c00015 	stw	r3,0(r2)
				wsptr[DCTSIZE*5] = dcval;
 80141f8:	e0bfa517 	ldw	r2,-364(fp)
 80141fc:	10802804 	addi	r2,r2,160
 8014200:	e0ffa817 	ldw	r3,-352(fp)
 8014204:	10c00015 	stw	r3,0(r2)
				wsptr[DCTSIZE*6] = dcval;
 8014208:	e0bfa517 	ldw	r2,-364(fp)
 801420c:	10803004 	addi	r2,r2,192
 8014210:	e0ffa817 	ldw	r3,-352(fp)
 8014214:	10c00015 	stw	r3,0(r2)
				wsptr[DCTSIZE*7] = dcval;
 8014218:	e0bfa517 	ldw	r2,-364(fp)
 801421c:	10803804 	addi	r2,r2,224
 8014220:	e0ffa817 	ldw	r3,-352(fp)
 8014224:	10c00015 	stw	r3,0(r2)

				inptr++;			/* advance pointers to next column */
 8014228:	e0bfa317 	ldw	r2,-372(fp)
 801422c:	10800084 	addi	r2,r2,2
 8014230:	e0bfa315 	stw	r2,-372(fp)
				quantptr++;
 8014234:	e0bfa417 	ldw	r2,-368(fp)
 8014238:	10800104 	addi	r2,r2,4
 801423c:	e0bfa415 	stw	r2,-368(fp)
				wsptr++;
 8014240:	e0bfa517 	ldw	r2,-364(fp)
 8014244:	10800104 	addi	r2,r2,4
 8014248:	e0bfa515 	stw	r2,-364(fp)
				continue;
 801424c:	00010206 	br	8014658 <jpeg_idct_ifast+0x5f4>
		}

		/* Even part */

		tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014250:	e0bfa317 	ldw	r2,-372(fp)
 8014254:	1080000b 	ldhu	r2,0(r2)
 8014258:	10ffffcc 	andi	r3,r2,65535
 801425c:	18e0001c 	xori	r3,r3,32768
 8014260:	18e00004 	addi	r3,r3,-32768
 8014264:	e0bfa417 	ldw	r2,-368(fp)
 8014268:	10800017 	ldw	r2,0(r2)
 801426c:	1809883a 	mov	r4,r3
 8014270:	100b883a 	mov	r5,r2
 8014274:	802c2180 	call	802c218 <__mulsi3>
 8014278:	e0bfa915 	stw	r2,-348(fp)
		tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801427c:	e0bfa317 	ldw	r2,-372(fp)
 8014280:	10800804 	addi	r2,r2,32
 8014284:	1080000b 	ldhu	r2,0(r2)
 8014288:	10ffffcc 	andi	r3,r2,65535
 801428c:	18e0001c 	xori	r3,r3,32768
 8014290:	18e00004 	addi	r3,r3,-32768
 8014294:	e0bfa417 	ldw	r2,-368(fp)
 8014298:	10801004 	addi	r2,r2,64
 801429c:	10800017 	ldw	r2,0(r2)
 80142a0:	1809883a 	mov	r4,r3
 80142a4:	100b883a 	mov	r5,r2
 80142a8:	802c2180 	call	802c218 <__mulsi3>
 80142ac:	e0bfaa15 	stw	r2,-344(fp)
		tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80142b0:	e0bfa317 	ldw	r2,-372(fp)
 80142b4:	10801004 	addi	r2,r2,64
 80142b8:	1080000b 	ldhu	r2,0(r2)
 80142bc:	10ffffcc 	andi	r3,r2,65535
 80142c0:	18e0001c 	xori	r3,r3,32768
 80142c4:	18e00004 	addi	r3,r3,-32768
 80142c8:	e0bfa417 	ldw	r2,-368(fp)
 80142cc:	10802004 	addi	r2,r2,128
 80142d0:	10800017 	ldw	r2,0(r2)
 80142d4:	1809883a 	mov	r4,r3
 80142d8:	100b883a 	mov	r5,r2
 80142dc:	802c2180 	call	802c218 <__mulsi3>
 80142e0:	e0bfab15 	stw	r2,-340(fp)
		tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80142e4:	e0bfa317 	ldw	r2,-372(fp)
 80142e8:	10801804 	addi	r2,r2,96
 80142ec:	1080000b 	ldhu	r2,0(r2)
 80142f0:	10ffffcc 	andi	r3,r2,65535
 80142f4:	18e0001c 	xori	r3,r3,32768
 80142f8:	18e00004 	addi	r3,r3,-32768
 80142fc:	e0bfa417 	ldw	r2,-368(fp)
 8014300:	10803004 	addi	r2,r2,192
 8014304:	10800017 	ldw	r2,0(r2)
 8014308:	1809883a 	mov	r4,r3
 801430c:	100b883a 	mov	r5,r2
 8014310:	802c2180 	call	802c218 <__mulsi3>
 8014314:	e0bfac15 	stw	r2,-336(fp)

		tmp10 = tmp0 + tmp2;	/* phase 3 */
 8014318:	e0ffa917 	ldw	r3,-348(fp)
 801431c:	e0bfab17 	ldw	r2,-340(fp)
 8014320:	1885883a 	add	r2,r3,r2
 8014324:	e0bfad15 	stw	r2,-332(fp)
		tmp11 = tmp0 - tmp2;
 8014328:	e0ffa917 	ldw	r3,-348(fp)
 801432c:	e0bfab17 	ldw	r2,-340(fp)
 8014330:	1885c83a 	sub	r2,r3,r2
 8014334:	e0bfae15 	stw	r2,-328(fp)

		tmp13 = tmp1 + tmp3;	/* phases 5-3 */
 8014338:	e0ffaa17 	ldw	r3,-344(fp)
 801433c:	e0bfac17 	ldw	r2,-336(fp)
 8014340:	1885883a 	add	r2,r3,r2
 8014344:	e0bfaf15 	stw	r2,-324(fp)
		tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
 8014348:	e0ffaa17 	ldw	r3,-344(fp)
 801434c:	e0bfac17 	ldw	r2,-336(fp)
 8014350:	1885c83a 	sub	r2,r3,r2
 8014354:	1009883a 	mov	r4,r2
 8014358:	01405a84 	movi	r5,362
 801435c:	802c2180 	call	802c218 <__mulsi3>
 8014360:	1007d23a 	srai	r3,r2,8
 8014364:	e0bfaf17 	ldw	r2,-324(fp)
 8014368:	1885c83a 	sub	r2,r3,r2
 801436c:	e0bfb015 	stw	r2,-320(fp)

		tmp0 = tmp10 + tmp13;	/* phase 2 */
 8014370:	e0ffad17 	ldw	r3,-332(fp)
 8014374:	e0bfaf17 	ldw	r2,-324(fp)
 8014378:	1885883a 	add	r2,r3,r2
 801437c:	e0bfa915 	stw	r2,-348(fp)
		tmp3 = tmp10 - tmp13;
 8014380:	e0ffad17 	ldw	r3,-332(fp)
 8014384:	e0bfaf17 	ldw	r2,-324(fp)
 8014388:	1885c83a 	sub	r2,r3,r2
 801438c:	e0bfac15 	stw	r2,-336(fp)
		tmp1 = tmp11 + tmp12;
 8014390:	e0ffae17 	ldw	r3,-328(fp)
 8014394:	e0bfb017 	ldw	r2,-320(fp)
 8014398:	1885883a 	add	r2,r3,r2
 801439c:	e0bfaa15 	stw	r2,-344(fp)
		tmp2 = tmp11 - tmp12;
 80143a0:	e0ffae17 	ldw	r3,-328(fp)
 80143a4:	e0bfb017 	ldw	r2,-320(fp)
 80143a8:	1885c83a 	sub	r2,r3,r2
 80143ac:	e0bfab15 	stw	r2,-340(fp)

		/* Odd part */

		tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80143b0:	e0bfa317 	ldw	r2,-372(fp)
 80143b4:	10800404 	addi	r2,r2,16
 80143b8:	1080000b 	ldhu	r2,0(r2)
 80143bc:	10ffffcc 	andi	r3,r2,65535
 80143c0:	18e0001c 	xori	r3,r3,32768
 80143c4:	18e00004 	addi	r3,r3,-32768
 80143c8:	e0bfa417 	ldw	r2,-368(fp)
 80143cc:	10800804 	addi	r2,r2,32
 80143d0:	10800017 	ldw	r2,0(r2)
 80143d4:	1809883a 	mov	r4,r3
 80143d8:	100b883a 	mov	r5,r2
 80143dc:	802c2180 	call	802c218 <__mulsi3>
 80143e0:	e0bfb115 	stw	r2,-316(fp)
		tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80143e4:	e0bfa317 	ldw	r2,-372(fp)
 80143e8:	10800c04 	addi	r2,r2,48
 80143ec:	1080000b 	ldhu	r2,0(r2)
 80143f0:	10ffffcc 	andi	r3,r2,65535
 80143f4:	18e0001c 	xori	r3,r3,32768
 80143f8:	18e00004 	addi	r3,r3,-32768
 80143fc:	e0bfa417 	ldw	r2,-368(fp)
 8014400:	10801804 	addi	r2,r2,96
 8014404:	10800017 	ldw	r2,0(r2)
 8014408:	1809883a 	mov	r4,r3
 801440c:	100b883a 	mov	r5,r2
 8014410:	802c2180 	call	802c218 <__mulsi3>
 8014414:	e0bfb215 	stw	r2,-312(fp)
		tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014418:	e0bfa317 	ldw	r2,-372(fp)
 801441c:	10801404 	addi	r2,r2,80
 8014420:	1080000b 	ldhu	r2,0(r2)
 8014424:	10ffffcc 	andi	r3,r2,65535
 8014428:	18e0001c 	xori	r3,r3,32768
 801442c:	18e00004 	addi	r3,r3,-32768
 8014430:	e0bfa417 	ldw	r2,-368(fp)
 8014434:	10802804 	addi	r2,r2,160
 8014438:	10800017 	ldw	r2,0(r2)
 801443c:	1809883a 	mov	r4,r3
 8014440:	100b883a 	mov	r5,r2
 8014444:	802c2180 	call	802c218 <__mulsi3>
 8014448:	e0bfb315 	stw	r2,-308(fp)
		tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801444c:	e0bfa317 	ldw	r2,-372(fp)
 8014450:	10801c04 	addi	r2,r2,112
 8014454:	1080000b 	ldhu	r2,0(r2)
 8014458:	10ffffcc 	andi	r3,r2,65535
 801445c:	18e0001c 	xori	r3,r3,32768
 8014460:	18e00004 	addi	r3,r3,-32768
 8014464:	e0bfa417 	ldw	r2,-368(fp)
 8014468:	10803804 	addi	r2,r2,224
 801446c:	10800017 	ldw	r2,0(r2)
 8014470:	1809883a 	mov	r4,r3
 8014474:	100b883a 	mov	r5,r2
 8014478:	802c2180 	call	802c218 <__mulsi3>
 801447c:	e0bfb415 	stw	r2,-304(fp)

		z13 = tmp6 + tmp5;		/* phase 6 */
 8014480:	e0ffb317 	ldw	r3,-308(fp)
 8014484:	e0bfb217 	ldw	r2,-312(fp)
 8014488:	1885883a 	add	r2,r3,r2
 801448c:	e0bfb515 	stw	r2,-300(fp)
		z10 = tmp6 - tmp5;
 8014490:	e0ffb317 	ldw	r3,-308(fp)
 8014494:	e0bfb217 	ldw	r2,-312(fp)
 8014498:	1885c83a 	sub	r2,r3,r2
 801449c:	e0bfb615 	stw	r2,-296(fp)
		z11 = tmp4 + tmp7;
 80144a0:	e0ffb117 	ldw	r3,-316(fp)
 80144a4:	e0bfb417 	ldw	r2,-304(fp)
 80144a8:	1885883a 	add	r2,r3,r2
 80144ac:	e0bfb715 	stw	r2,-292(fp)
		z12 = tmp4 - tmp7;
 80144b0:	e0ffb117 	ldw	r3,-316(fp)
 80144b4:	e0bfb417 	ldw	r2,-304(fp)
 80144b8:	1885c83a 	sub	r2,r3,r2
 80144bc:	e0bfb815 	stw	r2,-288(fp)

		tmp7 = z11 + z13;		/* phase 5 */
 80144c0:	e0ffb717 	ldw	r3,-292(fp)
 80144c4:	e0bfb517 	ldw	r2,-300(fp)
 80144c8:	1885883a 	add	r2,r3,r2
 80144cc:	e0bfb415 	stw	r2,-304(fp)
		tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 80144d0:	e0ffb717 	ldw	r3,-292(fp)
 80144d4:	e0bfb517 	ldw	r2,-300(fp)
 80144d8:	1885c83a 	sub	r2,r3,r2
 80144dc:	1009883a 	mov	r4,r2
 80144e0:	01405a84 	movi	r5,362
 80144e4:	802c2180 	call	802c218 <__mulsi3>
 80144e8:	1005d23a 	srai	r2,r2,8
 80144ec:	e0bfae15 	stw	r2,-328(fp)

		z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 80144f0:	e0ffb617 	ldw	r3,-296(fp)
 80144f4:	e0bfb817 	ldw	r2,-288(fp)
 80144f8:	1885883a 	add	r2,r3,r2
 80144fc:	1009883a 	mov	r4,r2
 8014500:	01407644 	movi	r5,473
 8014504:	802c2180 	call	802c218 <__mulsi3>
 8014508:	1005d23a 	srai	r2,r2,8
 801450c:	e0bfb915 	stw	r2,-284(fp)
		tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 8014510:	e13fb817 	ldw	r4,-288(fp)
 8014514:	01404544 	movi	r5,277
 8014518:	802c2180 	call	802c218 <__mulsi3>
 801451c:	1007d23a 	srai	r3,r2,8
 8014520:	e0bfb917 	ldw	r2,-284(fp)
 8014524:	1885c83a 	sub	r2,r3,r2
 8014528:	e0bfad15 	stw	r2,-332(fp)
		tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 801452c:	e13fb617 	ldw	r4,-296(fp)
 8014530:	017f58c4 	movi	r5,-669
 8014534:	802c2180 	call	802c218 <__mulsi3>
 8014538:	1007d23a 	srai	r3,r2,8
 801453c:	e0bfb917 	ldw	r2,-284(fp)
 8014540:	1885883a 	add	r2,r3,r2
 8014544:	e0bfb015 	stw	r2,-320(fp)

		tmp6 = tmp12 - tmp7;	/* phase 2 */
 8014548:	e0ffb017 	ldw	r3,-320(fp)
 801454c:	e0bfb417 	ldw	r2,-304(fp)
 8014550:	1885c83a 	sub	r2,r3,r2
 8014554:	e0bfb315 	stw	r2,-308(fp)
		tmp5 = tmp11 - tmp6;
 8014558:	e0ffae17 	ldw	r3,-328(fp)
 801455c:	e0bfb317 	ldw	r2,-308(fp)
 8014560:	1885c83a 	sub	r2,r3,r2
 8014564:	e0bfb215 	stw	r2,-312(fp)
		tmp4 = tmp10 + tmp5;
 8014568:	e0ffad17 	ldw	r3,-332(fp)
 801456c:	e0bfb217 	ldw	r2,-312(fp)
 8014570:	1885883a 	add	r2,r3,r2
 8014574:	e0bfb115 	stw	r2,-316(fp)

		wsptr[DCTSIZE*0] = (int) (tmp0 + tmp7);
 8014578:	e0ffa917 	ldw	r3,-348(fp)
 801457c:	e0bfb417 	ldw	r2,-304(fp)
 8014580:	1887883a 	add	r3,r3,r2
 8014584:	e0bfa517 	ldw	r2,-364(fp)
 8014588:	10c00015 	stw	r3,0(r2)
		wsptr[DCTSIZE*7] = (int) (tmp0 - tmp7);
 801458c:	e0bfa517 	ldw	r2,-364(fp)
 8014590:	10803804 	addi	r2,r2,224
 8014594:	e13fa917 	ldw	r4,-348(fp)
 8014598:	e0ffb417 	ldw	r3,-304(fp)
 801459c:	20c7c83a 	sub	r3,r4,r3
 80145a0:	10c00015 	stw	r3,0(r2)
		wsptr[DCTSIZE*1] = (int) (tmp1 + tmp6);
 80145a4:	e0bfa517 	ldw	r2,-364(fp)
 80145a8:	10800804 	addi	r2,r2,32
 80145ac:	e13faa17 	ldw	r4,-344(fp)
 80145b0:	e0ffb317 	ldw	r3,-308(fp)
 80145b4:	20c7883a 	add	r3,r4,r3
 80145b8:	10c00015 	stw	r3,0(r2)
		wsptr[DCTSIZE*6] = (int) (tmp1 - tmp6);
 80145bc:	e0bfa517 	ldw	r2,-364(fp)
 80145c0:	10803004 	addi	r2,r2,192
 80145c4:	e13faa17 	ldw	r4,-344(fp)
 80145c8:	e0ffb317 	ldw	r3,-308(fp)
 80145cc:	20c7c83a 	sub	r3,r4,r3
 80145d0:	10c00015 	stw	r3,0(r2)
		wsptr[DCTSIZE*2] = (int) (tmp2 + tmp5);
 80145d4:	e0bfa517 	ldw	r2,-364(fp)
 80145d8:	10801004 	addi	r2,r2,64
 80145dc:	e13fab17 	ldw	r4,-340(fp)
 80145e0:	e0ffb217 	ldw	r3,-312(fp)
 80145e4:	20c7883a 	add	r3,r4,r3
 80145e8:	10c00015 	stw	r3,0(r2)
		wsptr[DCTSIZE*5] = (int) (tmp2 - tmp5);
 80145ec:	e0bfa517 	ldw	r2,-364(fp)
 80145f0:	10802804 	addi	r2,r2,160
 80145f4:	e13fab17 	ldw	r4,-340(fp)
 80145f8:	e0ffb217 	ldw	r3,-312(fp)
 80145fc:	20c7c83a 	sub	r3,r4,r3
 8014600:	10c00015 	stw	r3,0(r2)
		wsptr[DCTSIZE*4] = (int) (tmp3 + tmp4);
 8014604:	e0bfa517 	ldw	r2,-364(fp)
 8014608:	10802004 	addi	r2,r2,128
 801460c:	e13fac17 	ldw	r4,-336(fp)
 8014610:	e0ffb117 	ldw	r3,-316(fp)
 8014614:	20c7883a 	add	r3,r4,r3
 8014618:	10c00015 	stw	r3,0(r2)
		wsptr[DCTSIZE*3] = (int) (tmp3 - tmp4);
 801461c:	e0bfa517 	ldw	r2,-364(fp)
 8014620:	10801804 	addi	r2,r2,96
 8014624:	e13fac17 	ldw	r4,-336(fp)
 8014628:	e0ffb117 	ldw	r3,-316(fp)
 801462c:	20c7c83a 	sub	r3,r4,r3
 8014630:	10c00015 	stw	r3,0(r2)

		inptr++;			/* advance pointers to next column */
 8014634:	e0bfa317 	ldw	r2,-372(fp)
 8014638:	10800084 	addi	r2,r2,2
 801463c:	e0bfa315 	stw	r2,-372(fp)
		quantptr++;
 8014640:	e0bfa417 	ldw	r2,-368(fp)
 8014644:	10800104 	addi	r2,r2,4
 8014648:	e0bfa415 	stw	r2,-368(fp)
		wsptr++;
 801464c:	e0bfa517 	ldw	r2,-364(fp)
 8014650:	10800104 	addi	r2,r2,4
 8014654:	e0bfa515 	stw	r2,-364(fp)
		/* Pass 1: process columns from input, store into work array. */

		inptr = coef_block;
	quantptr = (IFAST_MULT_TYPE *) compptr->dct_table;
	wsptr = workspace;
	for (ctr = DCTSIZE; ctr > 0; ctr--) {
 8014658:	e0bfa617 	ldw	r2,-360(fp)
 801465c:	10bfffc4 	addi	r2,r2,-1
 8014660:	e0bfa615 	stw	r2,-360(fp)
 8014664:	e0bfa617 	ldw	r2,-360(fp)
 8014668:	00be9416 	blt	zero,r2,80140bc <jpeg_idct_ifast+0x58>

	/* Pass 2: process rows from work array, store into output array. */
	/* Note that we must descale the results by a factor of 8 == 2**3, */
	/* and also undo the PASS1_BITS scaling. */

	wsptr = workspace;
 801466c:	e0bfbc04 	addi	r2,fp,-272
 8014670:	e0bfa515 	stw	r2,-364(fp)
	for (ctr = 0; ctr < DCTSIZE; ctr++) {
 8014674:	e03fa615 	stw	zero,-360(fp)
 8014678:	00012f06 	br	8014b38 <jpeg_idct_ifast+0xad4>
		outptr = output_buf[ctr] + output_col;
 801467c:	e0bfa617 	ldw	r2,-360(fp)
 8014680:	1085883a 	add	r2,r2,r2
 8014684:	1085883a 	add	r2,r2,r2
 8014688:	e0ffff17 	ldw	r3,-4(fp)
 801468c:	1885883a 	add	r2,r3,r2
 8014690:	10c00017 	ldw	r3,0(r2)
 8014694:	e0800217 	ldw	r2,8(fp)
 8014698:	1885883a 	add	r2,r3,r2
 801469c:	e0bfba15 	stw	r2,-280(fp)
		* test takes more time than it's worth.  In that case this section
		* may be commented out.
		*/

#ifndef NO_ZERO_ROW_TEST
		if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 80146a0:	e0bfa517 	ldw	r2,-364(fp)
 80146a4:	10800104 	addi	r2,r2,4
 80146a8:	10800017 	ldw	r2,0(r2)
 80146ac:	1000431e 	bne	r2,zero,80147bc <jpeg_idct_ifast+0x758>
 80146b0:	e0bfa517 	ldw	r2,-364(fp)
 80146b4:	10800204 	addi	r2,r2,8
 80146b8:	10800017 	ldw	r2,0(r2)
 80146bc:	10003f1e 	bne	r2,zero,80147bc <jpeg_idct_ifast+0x758>
 80146c0:	e0bfa517 	ldw	r2,-364(fp)
 80146c4:	10800304 	addi	r2,r2,12
 80146c8:	10800017 	ldw	r2,0(r2)
 80146cc:	10003b1e 	bne	r2,zero,80147bc <jpeg_idct_ifast+0x758>
 80146d0:	e0bfa517 	ldw	r2,-364(fp)
 80146d4:	10800404 	addi	r2,r2,16
 80146d8:	10800017 	ldw	r2,0(r2)
 80146dc:	1000371e 	bne	r2,zero,80147bc <jpeg_idct_ifast+0x758>
			wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 80146e0:	e0bfa517 	ldw	r2,-364(fp)
 80146e4:	10800504 	addi	r2,r2,20
 80146e8:	10800017 	ldw	r2,0(r2)
		* test takes more time than it's worth.  In that case this section
		* may be commented out.
		*/

#ifndef NO_ZERO_ROW_TEST
		if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 80146ec:	1000331e 	bne	r2,zero,80147bc <jpeg_idct_ifast+0x758>
			wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 80146f0:	e0bfa517 	ldw	r2,-364(fp)
 80146f4:	10800604 	addi	r2,r2,24
 80146f8:	10800017 	ldw	r2,0(r2)
 80146fc:	10002f1e 	bne	r2,zero,80147bc <jpeg_idct_ifast+0x758>
 8014700:	e0bfa517 	ldw	r2,-364(fp)
 8014704:	10800704 	addi	r2,r2,28
 8014708:	10800017 	ldw	r2,0(r2)
 801470c:	10002b1e 	bne	r2,zero,80147bc <jpeg_idct_ifast+0x758>
				/* AC terms all zero */
				JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
 8014710:	e0bfa517 	ldw	r2,-364(fp)
 8014714:	10800017 	ldw	r2,0(r2)
 8014718:	1005d17a 	srai	r2,r2,5
 801471c:	1080ffcc 	andi	r2,r2,1023
 8014720:	e0ffa717 	ldw	r3,-356(fp)
 8014724:	1885883a 	add	r2,r3,r2
 8014728:	10800003 	ldbu	r2,0(r2)
 801472c:	e0bfbb05 	stb	r2,-276(fp)
					& RANGE_MASK];

				outptr[0] = dcval;
 8014730:	e0bfba17 	ldw	r2,-280(fp)
 8014734:	e0ffbb03 	ldbu	r3,-276(fp)
 8014738:	10c00005 	stb	r3,0(r2)
				outptr[1] = dcval;
 801473c:	e0bfba17 	ldw	r2,-280(fp)
 8014740:	10800044 	addi	r2,r2,1
 8014744:	e0ffbb03 	ldbu	r3,-276(fp)
 8014748:	10c00005 	stb	r3,0(r2)
				outptr[2] = dcval;
 801474c:	e0bfba17 	ldw	r2,-280(fp)
 8014750:	10800084 	addi	r2,r2,2
 8014754:	e0ffbb03 	ldbu	r3,-276(fp)
 8014758:	10c00005 	stb	r3,0(r2)
				outptr[3] = dcval;
 801475c:	e0bfba17 	ldw	r2,-280(fp)
 8014760:	108000c4 	addi	r2,r2,3
 8014764:	e0ffbb03 	ldbu	r3,-276(fp)
 8014768:	10c00005 	stb	r3,0(r2)
				outptr[4] = dcval;
 801476c:	e0bfba17 	ldw	r2,-280(fp)
 8014770:	10800104 	addi	r2,r2,4
 8014774:	e0ffbb03 	ldbu	r3,-276(fp)
 8014778:	10c00005 	stb	r3,0(r2)
				outptr[5] = dcval;
 801477c:	e0bfba17 	ldw	r2,-280(fp)
 8014780:	10800144 	addi	r2,r2,5
 8014784:	e0ffbb03 	ldbu	r3,-276(fp)
 8014788:	10c00005 	stb	r3,0(r2)
				outptr[6] = dcval;
 801478c:	e0bfba17 	ldw	r2,-280(fp)
 8014790:	10800184 	addi	r2,r2,6
 8014794:	e0ffbb03 	ldbu	r3,-276(fp)
 8014798:	10c00005 	stb	r3,0(r2)
				outptr[7] = dcval;
 801479c:	e0bfba17 	ldw	r2,-280(fp)
 80147a0:	108001c4 	addi	r2,r2,7
 80147a4:	e0ffbb03 	ldbu	r3,-276(fp)
 80147a8:	10c00005 	stb	r3,0(r2)

				wsptr += DCTSIZE;		/* advance pointer to next row */
 80147ac:	e0bfa517 	ldw	r2,-364(fp)
 80147b0:	10800804 	addi	r2,r2,32
 80147b4:	e0bfa515 	stw	r2,-364(fp)
				continue;
 80147b8:	0000dc06 	br	8014b2c <jpeg_idct_ifast+0xac8>
		}
#endif

		/* Even part */

		tmp10 = ((DCTELEM) wsptr[0] + (DCTELEM) wsptr[4]);
 80147bc:	e0bfa517 	ldw	r2,-364(fp)
 80147c0:	10c00017 	ldw	r3,0(r2)
 80147c4:	e0bfa517 	ldw	r2,-364(fp)
 80147c8:	10800404 	addi	r2,r2,16
 80147cc:	10800017 	ldw	r2,0(r2)
 80147d0:	1885883a 	add	r2,r3,r2
 80147d4:	e0bfad15 	stw	r2,-332(fp)
		tmp11 = ((DCTELEM) wsptr[0] - (DCTELEM) wsptr[4]);
 80147d8:	e0bfa517 	ldw	r2,-364(fp)
 80147dc:	10c00017 	ldw	r3,0(r2)
 80147e0:	e0bfa517 	ldw	r2,-364(fp)
 80147e4:	10800404 	addi	r2,r2,16
 80147e8:	10800017 	ldw	r2,0(r2)
 80147ec:	1885c83a 	sub	r2,r3,r2
 80147f0:	e0bfae15 	stw	r2,-328(fp)

		tmp13 = ((DCTELEM) wsptr[2] + (DCTELEM) wsptr[6]);
 80147f4:	e0bfa517 	ldw	r2,-364(fp)
 80147f8:	10800204 	addi	r2,r2,8
 80147fc:	10c00017 	ldw	r3,0(r2)
 8014800:	e0bfa517 	ldw	r2,-364(fp)
 8014804:	10800604 	addi	r2,r2,24
 8014808:	10800017 	ldw	r2,0(r2)
 801480c:	1885883a 	add	r2,r3,r2
 8014810:	e0bfaf15 	stw	r2,-324(fp)
		tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 8014814:	e0bfa517 	ldw	r2,-364(fp)
 8014818:	10800204 	addi	r2,r2,8
 801481c:	10c00017 	ldw	r3,0(r2)
 8014820:	e0bfa517 	ldw	r2,-364(fp)
 8014824:	10800604 	addi	r2,r2,24
 8014828:	10800017 	ldw	r2,0(r2)
 801482c:	1885c83a 	sub	r2,r3,r2
 8014830:	1009883a 	mov	r4,r2
 8014834:	01405a84 	movi	r5,362
 8014838:	802c2180 	call	802c218 <__mulsi3>
 801483c:	1007d23a 	srai	r3,r2,8
 8014840:	e0bfaf17 	ldw	r2,-324(fp)
 8014844:	1885c83a 	sub	r2,r3,r2
 8014848:	e0bfb015 	stw	r2,-320(fp)
			- tmp13;

		tmp0 = tmp10 + tmp13;
 801484c:	e0ffad17 	ldw	r3,-332(fp)
 8014850:	e0bfaf17 	ldw	r2,-324(fp)
 8014854:	1885883a 	add	r2,r3,r2
 8014858:	e0bfa915 	stw	r2,-348(fp)
		tmp3 = tmp10 - tmp13;
 801485c:	e0ffad17 	ldw	r3,-332(fp)
 8014860:	e0bfaf17 	ldw	r2,-324(fp)
 8014864:	1885c83a 	sub	r2,r3,r2
 8014868:	e0bfac15 	stw	r2,-336(fp)
		tmp1 = tmp11 + tmp12;
 801486c:	e0ffae17 	ldw	r3,-328(fp)
 8014870:	e0bfb017 	ldw	r2,-320(fp)
 8014874:	1885883a 	add	r2,r3,r2
 8014878:	e0bfaa15 	stw	r2,-344(fp)
		tmp2 = tmp11 - tmp12;
 801487c:	e0ffae17 	ldw	r3,-328(fp)
 8014880:	e0bfb017 	ldw	r2,-320(fp)
 8014884:	1885c83a 	sub	r2,r3,r2
 8014888:	e0bfab15 	stw	r2,-340(fp)

		/* Odd part */

		z13 = (DCTELEM) wsptr[5] + (DCTELEM) wsptr[3];
 801488c:	e0bfa517 	ldw	r2,-364(fp)
 8014890:	10800504 	addi	r2,r2,20
 8014894:	10c00017 	ldw	r3,0(r2)
 8014898:	e0bfa517 	ldw	r2,-364(fp)
 801489c:	10800304 	addi	r2,r2,12
 80148a0:	10800017 	ldw	r2,0(r2)
 80148a4:	1885883a 	add	r2,r3,r2
 80148a8:	e0bfb515 	stw	r2,-300(fp)
		z10 = (DCTELEM) wsptr[5] - (DCTELEM) wsptr[3];
 80148ac:	e0bfa517 	ldw	r2,-364(fp)
 80148b0:	10800504 	addi	r2,r2,20
 80148b4:	10c00017 	ldw	r3,0(r2)
 80148b8:	e0bfa517 	ldw	r2,-364(fp)
 80148bc:	10800304 	addi	r2,r2,12
 80148c0:	10800017 	ldw	r2,0(r2)
 80148c4:	1885c83a 	sub	r2,r3,r2
 80148c8:	e0bfb615 	stw	r2,-296(fp)
		z11 = (DCTELEM) wsptr[1] + (DCTELEM) wsptr[7];
 80148cc:	e0bfa517 	ldw	r2,-364(fp)
 80148d0:	10800104 	addi	r2,r2,4
 80148d4:	10c00017 	ldw	r3,0(r2)
 80148d8:	e0bfa517 	ldw	r2,-364(fp)
 80148dc:	10800704 	addi	r2,r2,28
 80148e0:	10800017 	ldw	r2,0(r2)
 80148e4:	1885883a 	add	r2,r3,r2
 80148e8:	e0bfb715 	stw	r2,-292(fp)
		z12 = (DCTELEM) wsptr[1] - (DCTELEM) wsptr[7];
 80148ec:	e0bfa517 	ldw	r2,-364(fp)
 80148f0:	10800104 	addi	r2,r2,4
 80148f4:	10c00017 	ldw	r3,0(r2)
 80148f8:	e0bfa517 	ldw	r2,-364(fp)
 80148fc:	10800704 	addi	r2,r2,28
 8014900:	10800017 	ldw	r2,0(r2)
 8014904:	1885c83a 	sub	r2,r3,r2
 8014908:	e0bfb815 	stw	r2,-288(fp)

		tmp7 = z11 + z13;		/* phase 5 */
 801490c:	e0ffb717 	ldw	r3,-292(fp)
 8014910:	e0bfb517 	ldw	r2,-300(fp)
 8014914:	1885883a 	add	r2,r3,r2
 8014918:	e0bfb415 	stw	r2,-304(fp)
		tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 801491c:	e0ffb717 	ldw	r3,-292(fp)
 8014920:	e0bfb517 	ldw	r2,-300(fp)
 8014924:	1885c83a 	sub	r2,r3,r2
 8014928:	1009883a 	mov	r4,r2
 801492c:	01405a84 	movi	r5,362
 8014930:	802c2180 	call	802c218 <__mulsi3>
 8014934:	1005d23a 	srai	r2,r2,8
 8014938:	e0bfae15 	stw	r2,-328(fp)

		z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 801493c:	e0ffb617 	ldw	r3,-296(fp)
 8014940:	e0bfb817 	ldw	r2,-288(fp)
 8014944:	1885883a 	add	r2,r3,r2
 8014948:	1009883a 	mov	r4,r2
 801494c:	01407644 	movi	r5,473
 8014950:	802c2180 	call	802c218 <__mulsi3>
 8014954:	1005d23a 	srai	r2,r2,8
 8014958:	e0bfb915 	stw	r2,-284(fp)
		tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 801495c:	e13fb817 	ldw	r4,-288(fp)
 8014960:	01404544 	movi	r5,277
 8014964:	802c2180 	call	802c218 <__mulsi3>
 8014968:	1007d23a 	srai	r3,r2,8
 801496c:	e0bfb917 	ldw	r2,-284(fp)
 8014970:	1885c83a 	sub	r2,r3,r2
 8014974:	e0bfad15 	stw	r2,-332(fp)
		tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 8014978:	e13fb617 	ldw	r4,-296(fp)
 801497c:	017f58c4 	movi	r5,-669
 8014980:	802c2180 	call	802c218 <__mulsi3>
 8014984:	1007d23a 	srai	r3,r2,8
 8014988:	e0bfb917 	ldw	r2,-284(fp)
 801498c:	1885883a 	add	r2,r3,r2
 8014990:	e0bfb015 	stw	r2,-320(fp)

		tmp6 = tmp12 - tmp7;	/* phase 2 */
 8014994:	e0ffb017 	ldw	r3,-320(fp)
 8014998:	e0bfb417 	ldw	r2,-304(fp)
 801499c:	1885c83a 	sub	r2,r3,r2
 80149a0:	e0bfb315 	stw	r2,-308(fp)
		tmp5 = tmp11 - tmp6;
 80149a4:	e0ffae17 	ldw	r3,-328(fp)
 80149a8:	e0bfb317 	ldw	r2,-308(fp)
 80149ac:	1885c83a 	sub	r2,r3,r2
 80149b0:	e0bfb215 	stw	r2,-312(fp)
		tmp4 = tmp10 + tmp5;
 80149b4:	e0ffad17 	ldw	r3,-332(fp)
 80149b8:	e0bfb217 	ldw	r2,-312(fp)
 80149bc:	1885883a 	add	r2,r3,r2
 80149c0:	e0bfb115 	stw	r2,-316(fp)

		/* Final output stage: scale down by a factor of 8 and range-limit */

		outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
 80149c4:	e0ffa917 	ldw	r3,-348(fp)
 80149c8:	e0bfb417 	ldw	r2,-304(fp)
 80149cc:	1885883a 	add	r2,r3,r2
 80149d0:	1005d17a 	srai	r2,r2,5
 80149d4:	1080ffcc 	andi	r2,r2,1023
 80149d8:	e0ffa717 	ldw	r3,-356(fp)
 80149dc:	1885883a 	add	r2,r3,r2
 80149e0:	10c00003 	ldbu	r3,0(r2)
 80149e4:	e0bfba17 	ldw	r2,-280(fp)
 80149e8:	10c00005 	stb	r3,0(r2)
			& RANGE_MASK];
		outptr[7] = range_limit[IDESCALE(tmp0 - tmp7, PASS1_BITS+3)
 80149ec:	e0bfba17 	ldw	r2,-280(fp)
 80149f0:	108001c4 	addi	r2,r2,7
 80149f4:	e13fa917 	ldw	r4,-348(fp)
 80149f8:	e0ffb417 	ldw	r3,-304(fp)
 80149fc:	20c7c83a 	sub	r3,r4,r3
 8014a00:	1807d17a 	srai	r3,r3,5
 8014a04:	18c0ffcc 	andi	r3,r3,1023
 8014a08:	e13fa717 	ldw	r4,-356(fp)
 8014a0c:	20c7883a 	add	r3,r4,r3
 8014a10:	18c00003 	ldbu	r3,0(r3)
 8014a14:	10c00005 	stb	r3,0(r2)
			& RANGE_MASK];
		outptr[1] = range_limit[IDESCALE(tmp1 + tmp6, PASS1_BITS+3)
 8014a18:	e0bfba17 	ldw	r2,-280(fp)
 8014a1c:	10800044 	addi	r2,r2,1
 8014a20:	e13faa17 	ldw	r4,-344(fp)
 8014a24:	e0ffb317 	ldw	r3,-308(fp)
 8014a28:	20c7883a 	add	r3,r4,r3
 8014a2c:	1807d17a 	srai	r3,r3,5
 8014a30:	18c0ffcc 	andi	r3,r3,1023
 8014a34:	e13fa717 	ldw	r4,-356(fp)
 8014a38:	20c7883a 	add	r3,r4,r3
 8014a3c:	18c00003 	ldbu	r3,0(r3)
 8014a40:	10c00005 	stb	r3,0(r2)
			& RANGE_MASK];
		outptr[6] = range_limit[IDESCALE(tmp1 - tmp6, PASS1_BITS+3)
 8014a44:	e0bfba17 	ldw	r2,-280(fp)
 8014a48:	10800184 	addi	r2,r2,6
 8014a4c:	e13faa17 	ldw	r4,-344(fp)
 8014a50:	e0ffb317 	ldw	r3,-308(fp)
 8014a54:	20c7c83a 	sub	r3,r4,r3
 8014a58:	1807d17a 	srai	r3,r3,5
 8014a5c:	18c0ffcc 	andi	r3,r3,1023
 8014a60:	e13fa717 	ldw	r4,-356(fp)
 8014a64:	20c7883a 	add	r3,r4,r3
 8014a68:	18c00003 	ldbu	r3,0(r3)
 8014a6c:	10c00005 	stb	r3,0(r2)
			& RANGE_MASK];
		outptr[2] = range_limit[IDESCALE(tmp2 + tmp5, PASS1_BITS+3)
 8014a70:	e0bfba17 	ldw	r2,-280(fp)
 8014a74:	10800084 	addi	r2,r2,2
 8014a78:	e13fab17 	ldw	r4,-340(fp)
 8014a7c:	e0ffb217 	ldw	r3,-312(fp)
 8014a80:	20c7883a 	add	r3,r4,r3
 8014a84:	1807d17a 	srai	r3,r3,5
 8014a88:	18c0ffcc 	andi	r3,r3,1023
 8014a8c:	e13fa717 	ldw	r4,-356(fp)
 8014a90:	20c7883a 	add	r3,r4,r3
 8014a94:	18c00003 	ldbu	r3,0(r3)
 8014a98:	10c00005 	stb	r3,0(r2)
			& RANGE_MASK];
		outptr[5] = range_limit[IDESCALE(tmp2 - tmp5, PASS1_BITS+3)
 8014a9c:	e0bfba17 	ldw	r2,-280(fp)
 8014aa0:	10800144 	addi	r2,r2,5
 8014aa4:	e13fab17 	ldw	r4,-340(fp)
 8014aa8:	e0ffb217 	ldw	r3,-312(fp)
 8014aac:	20c7c83a 	sub	r3,r4,r3
 8014ab0:	1807d17a 	srai	r3,r3,5
 8014ab4:	18c0ffcc 	andi	r3,r3,1023
 8014ab8:	e13fa717 	ldw	r4,-356(fp)
 8014abc:	20c7883a 	add	r3,r4,r3
 8014ac0:	18c00003 	ldbu	r3,0(r3)
 8014ac4:	10c00005 	stb	r3,0(r2)
			& RANGE_MASK];
		outptr[4] = range_limit[IDESCALE(tmp3 + tmp4, PASS1_BITS+3)
 8014ac8:	e0bfba17 	ldw	r2,-280(fp)
 8014acc:	10800104 	addi	r2,r2,4
 8014ad0:	e13fac17 	ldw	r4,-336(fp)
 8014ad4:	e0ffb117 	ldw	r3,-316(fp)
 8014ad8:	20c7883a 	add	r3,r4,r3
 8014adc:	1807d17a 	srai	r3,r3,5
 8014ae0:	18c0ffcc 	andi	r3,r3,1023
 8014ae4:	e13fa717 	ldw	r4,-356(fp)
 8014ae8:	20c7883a 	add	r3,r4,r3
 8014aec:	18c00003 	ldbu	r3,0(r3)
 8014af0:	10c00005 	stb	r3,0(r2)
			& RANGE_MASK];
		outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
 8014af4:	e0bfba17 	ldw	r2,-280(fp)
 8014af8:	108000c4 	addi	r2,r2,3
 8014afc:	e13fac17 	ldw	r4,-336(fp)
 8014b00:	e0ffb117 	ldw	r3,-316(fp)
 8014b04:	20c7c83a 	sub	r3,r4,r3
 8014b08:	1807d17a 	srai	r3,r3,5
 8014b0c:	18c0ffcc 	andi	r3,r3,1023
 8014b10:	e13fa717 	ldw	r4,-356(fp)
 8014b14:	20c7883a 	add	r3,r4,r3
 8014b18:	18c00003 	ldbu	r3,0(r3)
 8014b1c:	10c00005 	stb	r3,0(r2)
			& RANGE_MASK];

		wsptr += DCTSIZE;		/* advance pointer to next row */
 8014b20:	e0bfa517 	ldw	r2,-364(fp)
 8014b24:	10800804 	addi	r2,r2,32
 8014b28:	e0bfa515 	stw	r2,-364(fp)
	/* Pass 2: process rows from work array, store into output array. */
	/* Note that we must descale the results by a factor of 8 == 2**3, */
	/* and also undo the PASS1_BITS scaling. */

	wsptr = workspace;
	for (ctr = 0; ctr < DCTSIZE; ctr++) {
 8014b2c:	e0bfa617 	ldw	r2,-360(fp)
 8014b30:	10800044 	addi	r2,r2,1
 8014b34:	e0bfa615 	stw	r2,-360(fp)
 8014b38:	e0bfa617 	ldw	r2,-360(fp)
 8014b3c:	10800210 	cmplti	r2,r2,8
 8014b40:	103ece1e 	bne	r2,zero,801467c <jpeg_idct_ifast+0x618>
		outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += DCTSIZE;		/* advance pointer to next row */
	}
}
 8014b44:	e037883a 	mov	sp,fp
 8014b48:	dfc00117 	ldw	ra,4(sp)
 8014b4c:	df000017 	ldw	fp,0(sp)
 8014b50:	dec00204 	addi	sp,sp,8
 8014b54:	f800283a 	ret

08014b58 <jpeg_idct_islow>:

	GLOBAL(void)
	jpeg_idct_islow (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014b58:	deffa704 	addi	sp,sp,-356
 8014b5c:	dfc05815 	stw	ra,352(sp)
 8014b60:	df005715 	stw	fp,348(sp)
 8014b64:	df005704 	addi	fp,sp,348
 8014b68:	e13ffc15 	stw	r4,-16(fp)
 8014b6c:	e17ffd15 	stw	r5,-12(fp)
 8014b70:	e1bffe15 	stw	r6,-8(fp)
 8014b74:	e1ffff15 	stw	r7,-4(fp)
	INT32 z1, z2, z3;
	JCOEFPTR inptr;
	ISLOW_MULT_TYPE * quantptr;
	int * wsptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014b78:	e0bffc17 	ldw	r2,-16(fp)
 8014b7c:	10804917 	ldw	r2,292(r2)
 8014b80:	10802004 	addi	r2,r2,128
 8014b84:	e0bfad15 	stw	r2,-332(fp)

		/* Pass 1: process columns from input, store into work array. */
		/* Note results are scaled up by sqrt(8) compared to a true IDCT; */
		/* furthermore, we scale the results by 2**PASS1_BITS. */

		inptr = coef_block;
 8014b88:	e0bffe17 	ldw	r2,-8(fp)
 8014b8c:	e0bfa915 	stw	r2,-348(fp)
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8014b90:	e0bffd17 	ldw	r2,-12(fp)
 8014b94:	10801517 	ldw	r2,84(r2)
 8014b98:	e0bfaa15 	stw	r2,-344(fp)
	wsptr = workspace;
 8014b9c:	e0bfbc04 	addi	r2,fp,-272
 8014ba0:	e0bfab15 	stw	r2,-340(fp)
	for (ctr = DCTSIZE; ctr > 0; ctr--) {
 8014ba4:	00800204 	movi	r2,8
 8014ba8:	e0bfac15 	stw	r2,-336(fp)
 8014bac:	00019b06 	br	801521c <jpeg_idct_islow+0x6c4>
		* DC coefficient (with scale factor as needed).
		* With typical images and quantization tables, half or more of the
		* column DCT calculations can be simplified this way.
		*/

		if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8014bb0:	e0bfa917 	ldw	r2,-348(fp)
 8014bb4:	10800404 	addi	r2,r2,16
 8014bb8:	1080000b 	ldhu	r2,0(r2)
 8014bbc:	10bfffcc 	andi	r2,r2,65535
 8014bc0:	10a0001c 	xori	r2,r2,32768
 8014bc4:	10a00004 	addi	r2,r2,-32768
 8014bc8:	1000601e 	bne	r2,zero,8014d4c <jpeg_idct_islow+0x1f4>
 8014bcc:	e0bfa917 	ldw	r2,-348(fp)
 8014bd0:	10800804 	addi	r2,r2,32
 8014bd4:	1080000b 	ldhu	r2,0(r2)
 8014bd8:	10bfffcc 	andi	r2,r2,65535
 8014bdc:	10a0001c 	xori	r2,r2,32768
 8014be0:	10a00004 	addi	r2,r2,-32768
 8014be4:	1000591e 	bne	r2,zero,8014d4c <jpeg_idct_islow+0x1f4>
			inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 8014be8:	e0bfa917 	ldw	r2,-348(fp)
 8014bec:	10800c04 	addi	r2,r2,48
 8014bf0:	1080000b 	ldhu	r2,0(r2)
		* DC coefficient (with scale factor as needed).
		* With typical images and quantization tables, half or more of the
		* column DCT calculations can be simplified this way.
		*/

		if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8014bf4:	10bfffcc 	andi	r2,r2,65535
 8014bf8:	10a0001c 	xori	r2,r2,32768
 8014bfc:	10a00004 	addi	r2,r2,-32768
 8014c00:	1000521e 	bne	r2,zero,8014d4c <jpeg_idct_islow+0x1f4>
			inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 8014c04:	e0bfa917 	ldw	r2,-348(fp)
 8014c08:	10801004 	addi	r2,r2,64
 8014c0c:	1080000b 	ldhu	r2,0(r2)
 8014c10:	10bfffcc 	andi	r2,r2,65535
 8014c14:	10a0001c 	xori	r2,r2,32768
 8014c18:	10a00004 	addi	r2,r2,-32768
 8014c1c:	10004b1e 	bne	r2,zero,8014d4c <jpeg_idct_islow+0x1f4>
			inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8014c20:	e0bfa917 	ldw	r2,-348(fp)
 8014c24:	10801404 	addi	r2,r2,80
 8014c28:	1080000b 	ldhu	r2,0(r2)
		* With typical images and quantization tables, half or more of the
		* column DCT calculations can be simplified this way.
		*/

		if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
			inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 8014c2c:	10bfffcc 	andi	r2,r2,65535
 8014c30:	10a0001c 	xori	r2,r2,32768
 8014c34:	10a00004 	addi	r2,r2,-32768
 8014c38:	1000441e 	bne	r2,zero,8014d4c <jpeg_idct_islow+0x1f4>
			inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8014c3c:	e0bfa917 	ldw	r2,-348(fp)
 8014c40:	10801804 	addi	r2,r2,96
 8014c44:	1080000b 	ldhu	r2,0(r2)
 8014c48:	10bfffcc 	andi	r2,r2,65535
 8014c4c:	10a0001c 	xori	r2,r2,32768
 8014c50:	10a00004 	addi	r2,r2,-32768
 8014c54:	10003d1e 	bne	r2,zero,8014d4c <jpeg_idct_islow+0x1f4>
			inptr[DCTSIZE*7] == 0) {
 8014c58:	e0bfa917 	ldw	r2,-348(fp)
 8014c5c:	10801c04 	addi	r2,r2,112
 8014c60:	1080000b 	ldhu	r2,0(r2)
		* column DCT calculations can be simplified this way.
		*/

		if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
			inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
			inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8014c64:	10bfffcc 	andi	r2,r2,65535
 8014c68:	10a0001c 	xori	r2,r2,32768
 8014c6c:	10a00004 	addi	r2,r2,-32768
 8014c70:	1000361e 	bne	r2,zero,8014d4c <jpeg_idct_islow+0x1f4>
			inptr[DCTSIZE*7] == 0) {
				/* AC terms all zero */
				int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 8014c74:	e0bfa917 	ldw	r2,-348(fp)
 8014c78:	1080000b 	ldhu	r2,0(r2)
 8014c7c:	10ffffcc 	andi	r3,r2,65535
 8014c80:	18e0001c 	xori	r3,r3,32768
 8014c84:	18e00004 	addi	r3,r3,-32768
 8014c88:	e0bfaa17 	ldw	r2,-344(fp)
 8014c8c:	10800017 	ldw	r2,0(r2)
 8014c90:	1809883a 	mov	r4,r3
 8014c94:	100b883a 	mov	r5,r2
 8014c98:	802c2180 	call	802c218 <__mulsi3>
 8014c9c:	1085883a 	add	r2,r2,r2
 8014ca0:	1085883a 	add	r2,r2,r2
 8014ca4:	e0bfae15 	stw	r2,-328(fp)

				wsptr[DCTSIZE*0] = dcval;
 8014ca8:	e0bfab17 	ldw	r2,-340(fp)
 8014cac:	e0ffae17 	ldw	r3,-328(fp)
 8014cb0:	10c00015 	stw	r3,0(r2)
				wsptr[DCTSIZE*1] = dcval;
 8014cb4:	e0bfab17 	ldw	r2,-340(fp)
 8014cb8:	10800804 	addi	r2,r2,32
 8014cbc:	e0ffae17 	ldw	r3,-328(fp)
 8014cc0:	10c00015 	stw	r3,0(r2)
				wsptr[DCTSIZE*2] = dcval;
 8014cc4:	e0bfab17 	ldw	r2,-340(fp)
 8014cc8:	10801004 	addi	r2,r2,64
 8014ccc:	e0ffae17 	ldw	r3,-328(fp)
 8014cd0:	10c00015 	stw	r3,0(r2)
				wsptr[DCTSIZE*3] = dcval;
 8014cd4:	e0bfab17 	ldw	r2,-340(fp)
 8014cd8:	10801804 	addi	r2,r2,96
 8014cdc:	e0ffae17 	ldw	r3,-328(fp)
 8014ce0:	10c00015 	stw	r3,0(r2)
				wsptr[DCTSIZE*4] = dcval;
 8014ce4:	e0bfab17 	ldw	r2,-340(fp)
 8014ce8:	10802004 	addi	r2,r2,128
 8014cec:	e0ffae17 	ldw	r3,-328(fp)
 8014cf0:	10c00015 	stw	r3,0(r2)
				wsptr[DCTSIZE*5] = dcval;
 8014cf4:	e0bfab17 	ldw	r2,-340(fp)
 8014cf8:	10802804 	addi	r2,r2,160
 8014cfc:	e0ffae17 	ldw	r3,-328(fp)
 8014d00:	10c00015 	stw	r3,0(r2)
				wsptr[DCTSIZE*6] = dcval;
 8014d04:	e0bfab17 	ldw	r2,-340(fp)
 8014d08:	10803004 	addi	r2,r2,192
 8014d0c:	e0ffae17 	ldw	r3,-328(fp)
 8014d10:	10c00015 	stw	r3,0(r2)
				wsptr[DCTSIZE*7] = dcval;
 8014d14:	e0bfab17 	ldw	r2,-340(fp)
 8014d18:	10803804 	addi	r2,r2,224
 8014d1c:	e0ffae17 	ldw	r3,-328(fp)
 8014d20:	10c00015 	stw	r3,0(r2)

				inptr++;			/* advance pointers to next column */
 8014d24:	e0bfa917 	ldw	r2,-348(fp)
 8014d28:	10800084 	addi	r2,r2,2
 8014d2c:	e0bfa915 	stw	r2,-348(fp)
				quantptr++;
 8014d30:	e0bfaa17 	ldw	r2,-344(fp)
 8014d34:	10800104 	addi	r2,r2,4
 8014d38:	e0bfaa15 	stw	r2,-344(fp)
				wsptr++;
 8014d3c:	e0bfab17 	ldw	r2,-340(fp)
 8014d40:	10800104 	addi	r2,r2,4
 8014d44:	e0bfab15 	stw	r2,-340(fp)
				continue;
 8014d48:	00013106 	br	8015210 <jpeg_idct_islow+0x6b8>
		}

		/* Even part: reverse the even part of the forward DCT. */
		/* The rotator is sqrt(2)*c(-6). */

		z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014d4c:	e0bfa917 	ldw	r2,-348(fp)
 8014d50:	10800804 	addi	r2,r2,32
 8014d54:	1080000b 	ldhu	r2,0(r2)
 8014d58:	10ffffcc 	andi	r3,r2,65535
 8014d5c:	18e0001c 	xori	r3,r3,32768
 8014d60:	18e00004 	addi	r3,r3,-32768
 8014d64:	e0bfaa17 	ldw	r2,-344(fp)
 8014d68:	10801004 	addi	r2,r2,64
 8014d6c:	10800017 	ldw	r2,0(r2)
 8014d70:	1809883a 	mov	r4,r3
 8014d74:	100b883a 	mov	r5,r2
 8014d78:	802c2180 	call	802c218 <__mulsi3>
 8014d7c:	e0bfaf15 	stw	r2,-324(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8014d80:	e0bfa917 	ldw	r2,-348(fp)
 8014d84:	10801804 	addi	r2,r2,96
 8014d88:	1080000b 	ldhu	r2,0(r2)
 8014d8c:	10ffffcc 	andi	r3,r2,65535
 8014d90:	18e0001c 	xori	r3,r3,32768
 8014d94:	18e00004 	addi	r3,r3,-32768
 8014d98:	e0bfaa17 	ldw	r2,-344(fp)
 8014d9c:	10803004 	addi	r2,r2,192
 8014da0:	10800017 	ldw	r2,0(r2)
 8014da4:	1809883a 	mov	r4,r3
 8014da8:	100b883a 	mov	r5,r2
 8014dac:	802c2180 	call	802c218 <__mulsi3>
 8014db0:	e0bfb015 	stw	r2,-320(fp)

		z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8014db4:	e0ffaf17 	ldw	r3,-324(fp)
 8014db8:	e0bfb017 	ldw	r2,-320(fp)
 8014dbc:	1885883a 	add	r2,r3,r2
 8014dc0:	1009883a 	mov	r4,r2
 8014dc4:	01445444 	movi	r5,4433
 8014dc8:	802c2180 	call	802c218 <__mulsi3>
 8014dcc:	e0bfb115 	stw	r2,-316(fp)
		tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8014dd0:	e13faf17 	ldw	r4,-324(fp)
 8014dd4:	01461f84 	movi	r5,6270
 8014dd8:	802c2180 	call	802c218 <__mulsi3>
 8014ddc:	1007883a 	mov	r3,r2
 8014de0:	e0bfb117 	ldw	r2,-316(fp)
 8014de4:	1885883a 	add	r2,r3,r2
 8014de8:	e0bfb215 	stw	r2,-312(fp)
		tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8014dec:	e13fb017 	ldw	r4,-320(fp)
 8014df0:	017137c4 	movi	r5,-15137
 8014df4:	802c2180 	call	802c218 <__mulsi3>
 8014df8:	1007883a 	mov	r3,r2
 8014dfc:	e0bfb117 	ldw	r2,-316(fp)
 8014e00:	1885883a 	add	r2,r3,r2
 8014e04:	e0bfb315 	stw	r2,-308(fp)

		z2 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014e08:	e0bfa917 	ldw	r2,-348(fp)
 8014e0c:	1080000b 	ldhu	r2,0(r2)
 8014e10:	10ffffcc 	andi	r3,r2,65535
 8014e14:	18e0001c 	xori	r3,r3,32768
 8014e18:	18e00004 	addi	r3,r3,-32768
 8014e1c:	e0bfaa17 	ldw	r2,-344(fp)
 8014e20:	10800017 	ldw	r2,0(r2)
 8014e24:	1809883a 	mov	r4,r3
 8014e28:	100b883a 	mov	r5,r2
 8014e2c:	802c2180 	call	802c218 <__mulsi3>
 8014e30:	e0bfaf15 	stw	r2,-324(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014e34:	e0bfa917 	ldw	r2,-348(fp)
 8014e38:	10801004 	addi	r2,r2,64
 8014e3c:	1080000b 	ldhu	r2,0(r2)
 8014e40:	10ffffcc 	andi	r3,r2,65535
 8014e44:	18e0001c 	xori	r3,r3,32768
 8014e48:	18e00004 	addi	r3,r3,-32768
 8014e4c:	e0bfaa17 	ldw	r2,-344(fp)
 8014e50:	10802004 	addi	r2,r2,128
 8014e54:	10800017 	ldw	r2,0(r2)
 8014e58:	1809883a 	mov	r4,r3
 8014e5c:	100b883a 	mov	r5,r2
 8014e60:	802c2180 	call	802c218 <__mulsi3>
 8014e64:	e0bfb015 	stw	r2,-320(fp)
		z2 <<= CONST_BITS;
 8014e68:	e0bfaf17 	ldw	r2,-324(fp)
 8014e6c:	1004937a 	slli	r2,r2,13
 8014e70:	e0bfaf15 	stw	r2,-324(fp)
		z3 <<= CONST_BITS;
 8014e74:	e0bfb017 	ldw	r2,-320(fp)
 8014e78:	1004937a 	slli	r2,r2,13
 8014e7c:	e0bfb015 	stw	r2,-320(fp)
		/* Add fudge factor here for final descale. */
		z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 8014e80:	e0bfaf17 	ldw	r2,-324(fp)
 8014e84:	10810004 	addi	r2,r2,1024
 8014e88:	e0bfaf15 	stw	r2,-324(fp)

		tmp0 = z2 + z3;
 8014e8c:	e0ffaf17 	ldw	r3,-324(fp)
 8014e90:	e0bfb017 	ldw	r2,-320(fp)
 8014e94:	1885883a 	add	r2,r3,r2
 8014e98:	e0bfb415 	stw	r2,-304(fp)
		tmp1 = z2 - z3;
 8014e9c:	e0ffaf17 	ldw	r3,-324(fp)
 8014ea0:	e0bfb017 	ldw	r2,-320(fp)
 8014ea4:	1885c83a 	sub	r2,r3,r2
 8014ea8:	e0bfb515 	stw	r2,-300(fp)

		tmp10 = tmp0 + tmp2;
 8014eac:	e0ffb417 	ldw	r3,-304(fp)
 8014eb0:	e0bfb217 	ldw	r2,-312(fp)
 8014eb4:	1885883a 	add	r2,r3,r2
 8014eb8:	e0bfb615 	stw	r2,-296(fp)
		tmp13 = tmp0 - tmp2;
 8014ebc:	e0ffb417 	ldw	r3,-304(fp)
 8014ec0:	e0bfb217 	ldw	r2,-312(fp)
 8014ec4:	1885c83a 	sub	r2,r3,r2
 8014ec8:	e0bfb715 	stw	r2,-292(fp)
		tmp11 = tmp1 + tmp3;
 8014ecc:	e0ffb517 	ldw	r3,-300(fp)
 8014ed0:	e0bfb317 	ldw	r2,-308(fp)
 8014ed4:	1885883a 	add	r2,r3,r2
 8014ed8:	e0bfb815 	stw	r2,-288(fp)
		tmp12 = tmp1 - tmp3;
 8014edc:	e0ffb517 	ldw	r3,-300(fp)
 8014ee0:	e0bfb317 	ldw	r2,-308(fp)
 8014ee4:	1885c83a 	sub	r2,r3,r2
 8014ee8:	e0bfb915 	stw	r2,-284(fp)

		/* Odd part per figure 8; the matrix is unitary and hence its
		* transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
		*/

		tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8014eec:	e0bfa917 	ldw	r2,-348(fp)
 8014ef0:	10801c04 	addi	r2,r2,112
 8014ef4:	1080000b 	ldhu	r2,0(r2)
 8014ef8:	10ffffcc 	andi	r3,r2,65535
 8014efc:	18e0001c 	xori	r3,r3,32768
 8014f00:	18e00004 	addi	r3,r3,-32768
 8014f04:	e0bfaa17 	ldw	r2,-344(fp)
 8014f08:	10803804 	addi	r2,r2,224
 8014f0c:	10800017 	ldw	r2,0(r2)
 8014f10:	1809883a 	mov	r4,r3
 8014f14:	100b883a 	mov	r5,r2
 8014f18:	802c2180 	call	802c218 <__mulsi3>
 8014f1c:	e0bfb415 	stw	r2,-304(fp)
		tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014f20:	e0bfa917 	ldw	r2,-348(fp)
 8014f24:	10801404 	addi	r2,r2,80
 8014f28:	1080000b 	ldhu	r2,0(r2)
 8014f2c:	10ffffcc 	andi	r3,r2,65535
 8014f30:	18e0001c 	xori	r3,r3,32768
 8014f34:	18e00004 	addi	r3,r3,-32768
 8014f38:	e0bfaa17 	ldw	r2,-344(fp)
 8014f3c:	10802804 	addi	r2,r2,160
 8014f40:	10800017 	ldw	r2,0(r2)
 8014f44:	1809883a 	mov	r4,r3
 8014f48:	100b883a 	mov	r5,r2
 8014f4c:	802c2180 	call	802c218 <__mulsi3>
 8014f50:	e0bfb515 	stw	r2,-300(fp)
		tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014f54:	e0bfa917 	ldw	r2,-348(fp)
 8014f58:	10800c04 	addi	r2,r2,48
 8014f5c:	1080000b 	ldhu	r2,0(r2)
 8014f60:	10ffffcc 	andi	r3,r2,65535
 8014f64:	18e0001c 	xori	r3,r3,32768
 8014f68:	18e00004 	addi	r3,r3,-32768
 8014f6c:	e0bfaa17 	ldw	r2,-344(fp)
 8014f70:	10801804 	addi	r2,r2,96
 8014f74:	10800017 	ldw	r2,0(r2)
 8014f78:	1809883a 	mov	r4,r3
 8014f7c:	100b883a 	mov	r5,r2
 8014f80:	802c2180 	call	802c218 <__mulsi3>
 8014f84:	e0bfb215 	stw	r2,-312(fp)
		tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014f88:	e0bfa917 	ldw	r2,-348(fp)
 8014f8c:	10800404 	addi	r2,r2,16
 8014f90:	1080000b 	ldhu	r2,0(r2)
 8014f94:	10ffffcc 	andi	r3,r2,65535
 8014f98:	18e0001c 	xori	r3,r3,32768
 8014f9c:	18e00004 	addi	r3,r3,-32768
 8014fa0:	e0bfaa17 	ldw	r2,-344(fp)
 8014fa4:	10800804 	addi	r2,r2,32
 8014fa8:	10800017 	ldw	r2,0(r2)
 8014fac:	1809883a 	mov	r4,r3
 8014fb0:	100b883a 	mov	r5,r2
 8014fb4:	802c2180 	call	802c218 <__mulsi3>
 8014fb8:	e0bfb315 	stw	r2,-308(fp)

		z2 = tmp0 + tmp2;
 8014fbc:	e0ffb417 	ldw	r3,-304(fp)
 8014fc0:	e0bfb217 	ldw	r2,-312(fp)
 8014fc4:	1885883a 	add	r2,r3,r2
 8014fc8:	e0bfaf15 	stw	r2,-324(fp)
		z3 = tmp1 + tmp3;
 8014fcc:	e0ffb517 	ldw	r3,-300(fp)
 8014fd0:	e0bfb317 	ldw	r2,-308(fp)
 8014fd4:	1885883a 	add	r2,r3,r2
 8014fd8:	e0bfb015 	stw	r2,-320(fp)

		z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8014fdc:	e0ffaf17 	ldw	r3,-324(fp)
 8014fe0:	e0bfb017 	ldw	r2,-320(fp)
 8014fe4:	1885883a 	add	r2,r3,r2
 8014fe8:	1009883a 	mov	r4,r2
 8014fec:	01496844 	movi	r5,9633
 8014ff0:	802c2180 	call	802c218 <__mulsi3>
 8014ff4:	e0bfb115 	stw	r2,-316(fp)
		z2 = MULTIPLY(z2, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
 8014ff8:	e13faf17 	ldw	r4,-324(fp)
 8014ffc:	01704ec4 	movi	r5,-16069
 8015000:	802c2180 	call	802c218 <__mulsi3>
 8015004:	e0bfaf15 	stw	r2,-324(fp)
		z3 = MULTIPLY(z3, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
 8015008:	e13fb017 	ldw	r4,-320(fp)
 801500c:	017ce104 	movi	r5,-3196
 8015010:	802c2180 	call	802c218 <__mulsi3>
 8015014:	e0bfb015 	stw	r2,-320(fp)
		z2 += z1;
 8015018:	e0ffaf17 	ldw	r3,-324(fp)
 801501c:	e0bfb117 	ldw	r2,-316(fp)
 8015020:	1885883a 	add	r2,r3,r2
 8015024:	e0bfaf15 	stw	r2,-324(fp)
		z3 += z1;
 8015028:	e0ffb017 	ldw	r3,-320(fp)
 801502c:	e0bfb117 	ldw	r2,-316(fp)
 8015030:	1885883a 	add	r2,r3,r2
 8015034:	e0bfb015 	stw	r2,-320(fp)

		z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8015038:	e0ffb417 	ldw	r3,-304(fp)
 801503c:	e0bfb317 	ldw	r2,-308(fp)
 8015040:	1885883a 	add	r2,r3,r2
 8015044:	1009883a 	mov	r4,r2
 8015048:	0178ccc4 	movi	r5,-7373
 801504c:	802c2180 	call	802c218 <__mulsi3>
 8015050:	e0bfb115 	stw	r2,-316(fp)
		tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
 8015054:	e13fb417 	ldw	r4,-304(fp)
 8015058:	01426384 	movi	r5,2446
 801505c:	802c2180 	call	802c218 <__mulsi3>
 8015060:	e0bfb415 	stw	r2,-304(fp)
		tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
 8015064:	e13fb317 	ldw	r4,-308(fp)
 8015068:	014c02c4 	movi	r5,12299
 801506c:	802c2180 	call	802c218 <__mulsi3>
 8015070:	e0bfb315 	stw	r2,-308(fp)
		tmp0 += z1 + z2;
 8015074:	e0ffb117 	ldw	r3,-316(fp)
 8015078:	e0bfaf17 	ldw	r2,-324(fp)
 801507c:	1885883a 	add	r2,r3,r2
 8015080:	e0ffb417 	ldw	r3,-304(fp)
 8015084:	1885883a 	add	r2,r3,r2
 8015088:	e0bfb415 	stw	r2,-304(fp)
		tmp3 += z1 + z3;
 801508c:	e0ffb117 	ldw	r3,-316(fp)
 8015090:	e0bfb017 	ldw	r2,-320(fp)
 8015094:	1885883a 	add	r2,r3,r2
 8015098:	e0ffb317 	ldw	r3,-308(fp)
 801509c:	1885883a 	add	r2,r3,r2
 80150a0:	e0bfb315 	stw	r2,-308(fp)

		z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 80150a4:	e0ffb517 	ldw	r3,-300(fp)
 80150a8:	e0bfb217 	ldw	r2,-312(fp)
 80150ac:	1885883a 	add	r2,r3,r2
 80150b0:	1009883a 	mov	r4,r2
 80150b4:	016b7f44 	movi	r5,-20995
 80150b8:	802c2180 	call	802c218 <__mulsi3>
 80150bc:	e0bfb115 	stw	r2,-316(fp)
		tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
 80150c0:	e13fb517 	ldw	r4,-300(fp)
 80150c4:	01506cc4 	movi	r5,16819
 80150c8:	802c2180 	call	802c218 <__mulsi3>
 80150cc:	e0bfb515 	stw	r2,-300(fp)
		tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
 80150d0:	e13fb217 	ldw	r4,-312(fp)
 80150d4:	01589504 	movi	r5,25172
 80150d8:	802c2180 	call	802c218 <__mulsi3>
 80150dc:	e0bfb215 	stw	r2,-312(fp)
		tmp1 += z1 + z3;
 80150e0:	e0ffb117 	ldw	r3,-316(fp)
 80150e4:	e0bfb017 	ldw	r2,-320(fp)
 80150e8:	1885883a 	add	r2,r3,r2
 80150ec:	e0ffb517 	ldw	r3,-300(fp)
 80150f0:	1885883a 	add	r2,r3,r2
 80150f4:	e0bfb515 	stw	r2,-300(fp)
		tmp2 += z1 + z2;
 80150f8:	e0ffb117 	ldw	r3,-316(fp)
 80150fc:	e0bfaf17 	ldw	r2,-324(fp)
 8015100:	1885883a 	add	r2,r3,r2
 8015104:	e0ffb217 	ldw	r3,-312(fp)
 8015108:	1885883a 	add	r2,r3,r2
 801510c:	e0bfb215 	stw	r2,-312(fp)

		/* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */

		wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8015110:	e0ffb617 	ldw	r3,-296(fp)
 8015114:	e0bfb317 	ldw	r2,-308(fp)
 8015118:	1885883a 	add	r2,r3,r2
 801511c:	1007d2fa 	srai	r3,r2,11
 8015120:	e0bfab17 	ldw	r2,-340(fp)
 8015124:	10c00015 	stw	r3,0(r2)
		wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8015128:	e0bfab17 	ldw	r2,-340(fp)
 801512c:	10803804 	addi	r2,r2,224
 8015130:	e13fb617 	ldw	r4,-296(fp)
 8015134:	e0ffb317 	ldw	r3,-308(fp)
 8015138:	20c7c83a 	sub	r3,r4,r3
 801513c:	1807d2fa 	srai	r3,r3,11
 8015140:	10c00015 	stw	r3,0(r2)
		wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8015144:	e0bfab17 	ldw	r2,-340(fp)
 8015148:	10800804 	addi	r2,r2,32
 801514c:	e13fb817 	ldw	r4,-288(fp)
 8015150:	e0ffb217 	ldw	r3,-312(fp)
 8015154:	20c7883a 	add	r3,r4,r3
 8015158:	1807d2fa 	srai	r3,r3,11
 801515c:	10c00015 	stw	r3,0(r2)
		wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8015160:	e0bfab17 	ldw	r2,-340(fp)
 8015164:	10803004 	addi	r2,r2,192
 8015168:	e13fb817 	ldw	r4,-288(fp)
 801516c:	e0ffb217 	ldw	r3,-312(fp)
 8015170:	20c7c83a 	sub	r3,r4,r3
 8015174:	1807d2fa 	srai	r3,r3,11
 8015178:	10c00015 	stw	r3,0(r2)
		wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 801517c:	e0bfab17 	ldw	r2,-340(fp)
 8015180:	10801004 	addi	r2,r2,64
 8015184:	e13fb917 	ldw	r4,-284(fp)
 8015188:	e0ffb517 	ldw	r3,-300(fp)
 801518c:	20c7883a 	add	r3,r4,r3
 8015190:	1807d2fa 	srai	r3,r3,11
 8015194:	10c00015 	stw	r3,0(r2)
		wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8015198:	e0bfab17 	ldw	r2,-340(fp)
 801519c:	10802804 	addi	r2,r2,160
 80151a0:	e13fb917 	ldw	r4,-284(fp)
 80151a4:	e0ffb517 	ldw	r3,-300(fp)
 80151a8:	20c7c83a 	sub	r3,r4,r3
 80151ac:	1807d2fa 	srai	r3,r3,11
 80151b0:	10c00015 	stw	r3,0(r2)
		wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 80151b4:	e0bfab17 	ldw	r2,-340(fp)
 80151b8:	10801804 	addi	r2,r2,96
 80151bc:	e13fb717 	ldw	r4,-292(fp)
 80151c0:	e0ffb417 	ldw	r3,-304(fp)
 80151c4:	20c7883a 	add	r3,r4,r3
 80151c8:	1807d2fa 	srai	r3,r3,11
 80151cc:	10c00015 	stw	r3,0(r2)
		wsptr[DCTSIZE*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 80151d0:	e0bfab17 	ldw	r2,-340(fp)
 80151d4:	10802004 	addi	r2,r2,128
 80151d8:	e13fb717 	ldw	r4,-292(fp)
 80151dc:	e0ffb417 	ldw	r3,-304(fp)
 80151e0:	20c7c83a 	sub	r3,r4,r3
 80151e4:	1807d2fa 	srai	r3,r3,11
 80151e8:	10c00015 	stw	r3,0(r2)

		inptr++;			/* advance pointers to next column */
 80151ec:	e0bfa917 	ldw	r2,-348(fp)
 80151f0:	10800084 	addi	r2,r2,2
 80151f4:	e0bfa915 	stw	r2,-348(fp)
		quantptr++;
 80151f8:	e0bfaa17 	ldw	r2,-344(fp)
 80151fc:	10800104 	addi	r2,r2,4
 8015200:	e0bfaa15 	stw	r2,-344(fp)
		wsptr++;
 8015204:	e0bfab17 	ldw	r2,-340(fp)
 8015208:	10800104 	addi	r2,r2,4
 801520c:	e0bfab15 	stw	r2,-340(fp)
		/* furthermore, we scale the results by 2**PASS1_BITS. */

		inptr = coef_block;
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
	wsptr = workspace;
	for (ctr = DCTSIZE; ctr > 0; ctr--) {
 8015210:	e0bfac17 	ldw	r2,-336(fp)
 8015214:	10bfffc4 	addi	r2,r2,-1
 8015218:	e0bfac15 	stw	r2,-336(fp)
 801521c:	e0bfac17 	ldw	r2,-336(fp)
 8015220:	00be6316 	blt	zero,r2,8014bb0 <jpeg_idct_islow+0x58>

	/* Pass 2: process rows from work array, store into output array. */
	/* Note that we must descale the results by a factor of 8 == 2**3, */
	/* and also undo the PASS1_BITS scaling. */

	wsptr = workspace;
 8015224:	e0bfbc04 	addi	r2,fp,-272
 8015228:	e0bfab15 	stw	r2,-340(fp)
	for (ctr = 0; ctr < DCTSIZE; ctr++) {
 801522c:	e03fac15 	stw	zero,-336(fp)
 8015230:	00015206 	br	801577c <jpeg_idct_islow+0xc24>
		outptr = output_buf[ctr] + output_col;
 8015234:	e0bfac17 	ldw	r2,-336(fp)
 8015238:	1085883a 	add	r2,r2,r2
 801523c:	1085883a 	add	r2,r2,r2
 8015240:	e0ffff17 	ldw	r3,-4(fp)
 8015244:	1885883a 	add	r2,r3,r2
 8015248:	10c00017 	ldw	r3,0(r2)
 801524c:	e0800217 	ldw	r2,8(fp)
 8015250:	1885883a 	add	r2,r3,r2
 8015254:	e0bfba15 	stw	r2,-280(fp)
		* test takes more time than it's worth.  In that case this section
		* may be commented out.
		*/

#ifndef NO_ZERO_ROW_TEST
		if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 8015258:	e0bfab17 	ldw	r2,-340(fp)
 801525c:	10800104 	addi	r2,r2,4
 8015260:	10800017 	ldw	r2,0(r2)
 8015264:	1000441e 	bne	r2,zero,8015378 <jpeg_idct_islow+0x820>
 8015268:	e0bfab17 	ldw	r2,-340(fp)
 801526c:	10800204 	addi	r2,r2,8
 8015270:	10800017 	ldw	r2,0(r2)
 8015274:	1000401e 	bne	r2,zero,8015378 <jpeg_idct_islow+0x820>
 8015278:	e0bfab17 	ldw	r2,-340(fp)
 801527c:	10800304 	addi	r2,r2,12
 8015280:	10800017 	ldw	r2,0(r2)
 8015284:	10003c1e 	bne	r2,zero,8015378 <jpeg_idct_islow+0x820>
 8015288:	e0bfab17 	ldw	r2,-340(fp)
 801528c:	10800404 	addi	r2,r2,16
 8015290:	10800017 	ldw	r2,0(r2)
 8015294:	1000381e 	bne	r2,zero,8015378 <jpeg_idct_islow+0x820>
			wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 8015298:	e0bfab17 	ldw	r2,-340(fp)
 801529c:	10800504 	addi	r2,r2,20
 80152a0:	10800017 	ldw	r2,0(r2)
		* test takes more time than it's worth.  In that case this section
		* may be commented out.
		*/

#ifndef NO_ZERO_ROW_TEST
		if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 80152a4:	1000341e 	bne	r2,zero,8015378 <jpeg_idct_islow+0x820>
			wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 80152a8:	e0bfab17 	ldw	r2,-340(fp)
 80152ac:	10800604 	addi	r2,r2,24
 80152b0:	10800017 	ldw	r2,0(r2)
 80152b4:	1000301e 	bne	r2,zero,8015378 <jpeg_idct_islow+0x820>
 80152b8:	e0bfab17 	ldw	r2,-340(fp)
 80152bc:	10800704 	addi	r2,r2,28
 80152c0:	10800017 	ldw	r2,0(r2)
 80152c4:	10002c1e 	bne	r2,zero,8015378 <jpeg_idct_islow+0x820>
				/* AC terms all zero */
				JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 80152c8:	e0bfab17 	ldw	r2,-340(fp)
 80152cc:	10800017 	ldw	r2,0(r2)
 80152d0:	10800404 	addi	r2,r2,16
 80152d4:	1005d17a 	srai	r2,r2,5
 80152d8:	1080ffcc 	andi	r2,r2,1023
 80152dc:	e0ffad17 	ldw	r3,-332(fp)
 80152e0:	1885883a 	add	r2,r3,r2
 80152e4:	10800003 	ldbu	r2,0(r2)
 80152e8:	e0bfbb05 	stb	r2,-276(fp)
					& RANGE_MASK];

				outptr[0] = dcval;
 80152ec:	e0bfba17 	ldw	r2,-280(fp)
 80152f0:	e0ffbb03 	ldbu	r3,-276(fp)
 80152f4:	10c00005 	stb	r3,0(r2)
				outptr[1] = dcval;
 80152f8:	e0bfba17 	ldw	r2,-280(fp)
 80152fc:	10800044 	addi	r2,r2,1
 8015300:	e0ffbb03 	ldbu	r3,-276(fp)
 8015304:	10c00005 	stb	r3,0(r2)
				outptr[2] = dcval;
 8015308:	e0bfba17 	ldw	r2,-280(fp)
 801530c:	10800084 	addi	r2,r2,2
 8015310:	e0ffbb03 	ldbu	r3,-276(fp)
 8015314:	10c00005 	stb	r3,0(r2)
				outptr[3] = dcval;
 8015318:	e0bfba17 	ldw	r2,-280(fp)
 801531c:	108000c4 	addi	r2,r2,3
 8015320:	e0ffbb03 	ldbu	r3,-276(fp)
 8015324:	10c00005 	stb	r3,0(r2)
				outptr[4] = dcval;
 8015328:	e0bfba17 	ldw	r2,-280(fp)
 801532c:	10800104 	addi	r2,r2,4
 8015330:	e0ffbb03 	ldbu	r3,-276(fp)
 8015334:	10c00005 	stb	r3,0(r2)
				outptr[5] = dcval;
 8015338:	e0bfba17 	ldw	r2,-280(fp)
 801533c:	10800144 	addi	r2,r2,5
 8015340:	e0ffbb03 	ldbu	r3,-276(fp)
 8015344:	10c00005 	stb	r3,0(r2)
				outptr[6] = dcval;
 8015348:	e0bfba17 	ldw	r2,-280(fp)
 801534c:	10800184 	addi	r2,r2,6
 8015350:	e0ffbb03 	ldbu	r3,-276(fp)
 8015354:	10c00005 	stb	r3,0(r2)
				outptr[7] = dcval;
 8015358:	e0bfba17 	ldw	r2,-280(fp)
 801535c:	108001c4 	addi	r2,r2,7
 8015360:	e0ffbb03 	ldbu	r3,-276(fp)
 8015364:	10c00005 	stb	r3,0(r2)

				wsptr += DCTSIZE;		/* advance pointer to next row */
 8015368:	e0bfab17 	ldw	r2,-340(fp)
 801536c:	10800804 	addi	r2,r2,32
 8015370:	e0bfab15 	stw	r2,-340(fp)
				continue;
 8015374:	0000fe06 	br	8015770 <jpeg_idct_islow+0xc18>
#endif

		/* Even part: reverse the even part of the forward DCT. */
		/* The rotator is sqrt(2)*c(-6). */

		z2 = (INT32) wsptr[2];
 8015378:	e0bfab17 	ldw	r2,-340(fp)
 801537c:	10800204 	addi	r2,r2,8
 8015380:	10800017 	ldw	r2,0(r2)
 8015384:	e0bfaf15 	stw	r2,-324(fp)
		z3 = (INT32) wsptr[6];
 8015388:	e0bfab17 	ldw	r2,-340(fp)
 801538c:	10800604 	addi	r2,r2,24
 8015390:	10800017 	ldw	r2,0(r2)
 8015394:	e0bfb015 	stw	r2,-320(fp)

		z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8015398:	e0ffaf17 	ldw	r3,-324(fp)
 801539c:	e0bfb017 	ldw	r2,-320(fp)
 80153a0:	1885883a 	add	r2,r3,r2
 80153a4:	1009883a 	mov	r4,r2
 80153a8:	01445444 	movi	r5,4433
 80153ac:	802c2180 	call	802c218 <__mulsi3>
 80153b0:	e0bfb115 	stw	r2,-316(fp)
		tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 80153b4:	e13faf17 	ldw	r4,-324(fp)
 80153b8:	01461f84 	movi	r5,6270
 80153bc:	802c2180 	call	802c218 <__mulsi3>
 80153c0:	1007883a 	mov	r3,r2
 80153c4:	e0bfb117 	ldw	r2,-316(fp)
 80153c8:	1885883a 	add	r2,r3,r2
 80153cc:	e0bfb215 	stw	r2,-312(fp)
		tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 80153d0:	e13fb017 	ldw	r4,-320(fp)
 80153d4:	017137c4 	movi	r5,-15137
 80153d8:	802c2180 	call	802c218 <__mulsi3>
 80153dc:	1007883a 	mov	r3,r2
 80153e0:	e0bfb117 	ldw	r2,-316(fp)
 80153e4:	1885883a 	add	r2,r3,r2
 80153e8:	e0bfb315 	stw	r2,-308(fp)

		/* Add fudge factor here for final descale. */
		z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80153ec:	e0bfab17 	ldw	r2,-340(fp)
 80153f0:	10800017 	ldw	r2,0(r2)
 80153f4:	10800404 	addi	r2,r2,16
 80153f8:	e0bfaf15 	stw	r2,-324(fp)
		z3 = (INT32) wsptr[4];
 80153fc:	e0bfab17 	ldw	r2,-340(fp)
 8015400:	10800404 	addi	r2,r2,16
 8015404:	10800017 	ldw	r2,0(r2)
 8015408:	e0bfb015 	stw	r2,-320(fp)

		tmp0 = (z2 + z3) << CONST_BITS;
 801540c:	e0ffaf17 	ldw	r3,-324(fp)
 8015410:	e0bfb017 	ldw	r2,-320(fp)
 8015414:	1885883a 	add	r2,r3,r2
 8015418:	1004937a 	slli	r2,r2,13
 801541c:	e0bfb415 	stw	r2,-304(fp)
		tmp1 = (z2 - z3) << CONST_BITS;
 8015420:	e0ffaf17 	ldw	r3,-324(fp)
 8015424:	e0bfb017 	ldw	r2,-320(fp)
 8015428:	1885c83a 	sub	r2,r3,r2
 801542c:	1004937a 	slli	r2,r2,13
 8015430:	e0bfb515 	stw	r2,-300(fp)

		tmp10 = tmp0 + tmp2;
 8015434:	e0ffb417 	ldw	r3,-304(fp)
 8015438:	e0bfb217 	ldw	r2,-312(fp)
 801543c:	1885883a 	add	r2,r3,r2
 8015440:	e0bfb615 	stw	r2,-296(fp)
		tmp13 = tmp0 - tmp2;
 8015444:	e0ffb417 	ldw	r3,-304(fp)
 8015448:	e0bfb217 	ldw	r2,-312(fp)
 801544c:	1885c83a 	sub	r2,r3,r2
 8015450:	e0bfb715 	stw	r2,-292(fp)
		tmp11 = tmp1 + tmp3;
 8015454:	e0ffb517 	ldw	r3,-300(fp)
 8015458:	e0bfb317 	ldw	r2,-308(fp)
 801545c:	1885883a 	add	r2,r3,r2
 8015460:	e0bfb815 	stw	r2,-288(fp)
		tmp12 = tmp1 - tmp3;
 8015464:	e0ffb517 	ldw	r3,-300(fp)
 8015468:	e0bfb317 	ldw	r2,-308(fp)
 801546c:	1885c83a 	sub	r2,r3,r2
 8015470:	e0bfb915 	stw	r2,-284(fp)

		/* Odd part per figure 8; the matrix is unitary and hence its
		* transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
		*/

		tmp0 = (INT32) wsptr[7];
 8015474:	e0bfab17 	ldw	r2,-340(fp)
 8015478:	10800704 	addi	r2,r2,28
 801547c:	10800017 	ldw	r2,0(r2)
 8015480:	e0bfb415 	stw	r2,-304(fp)
		tmp1 = (INT32) wsptr[5];
 8015484:	e0bfab17 	ldw	r2,-340(fp)
 8015488:	10800504 	addi	r2,r2,20
 801548c:	10800017 	ldw	r2,0(r2)
 8015490:	e0bfb515 	stw	r2,-300(fp)
		tmp2 = (INT32) wsptr[3];
 8015494:	e0bfab17 	ldw	r2,-340(fp)
 8015498:	10800304 	addi	r2,r2,12
 801549c:	10800017 	ldw	r2,0(r2)
 80154a0:	e0bfb215 	stw	r2,-312(fp)
		tmp3 = (INT32) wsptr[1];
 80154a4:	e0bfab17 	ldw	r2,-340(fp)
 80154a8:	10800104 	addi	r2,r2,4
 80154ac:	10800017 	ldw	r2,0(r2)
 80154b0:	e0bfb315 	stw	r2,-308(fp)

		z2 = tmp0 + tmp2;
 80154b4:	e0ffb417 	ldw	r3,-304(fp)
 80154b8:	e0bfb217 	ldw	r2,-312(fp)
 80154bc:	1885883a 	add	r2,r3,r2
 80154c0:	e0bfaf15 	stw	r2,-324(fp)
		z3 = tmp1 + tmp3;
 80154c4:	e0ffb517 	ldw	r3,-300(fp)
 80154c8:	e0bfb317 	ldw	r2,-308(fp)
 80154cc:	1885883a 	add	r2,r3,r2
 80154d0:	e0bfb015 	stw	r2,-320(fp)

		z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 80154d4:	e0ffaf17 	ldw	r3,-324(fp)
 80154d8:	e0bfb017 	ldw	r2,-320(fp)
 80154dc:	1885883a 	add	r2,r3,r2
 80154e0:	1009883a 	mov	r4,r2
 80154e4:	01496844 	movi	r5,9633
 80154e8:	802c2180 	call	802c218 <__mulsi3>
 80154ec:	e0bfb115 	stw	r2,-316(fp)
		z2 = MULTIPLY(z2, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
 80154f0:	e13faf17 	ldw	r4,-324(fp)
 80154f4:	01704ec4 	movi	r5,-16069
 80154f8:	802c2180 	call	802c218 <__mulsi3>
 80154fc:	e0bfaf15 	stw	r2,-324(fp)
		z3 = MULTIPLY(z3, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
 8015500:	e13fb017 	ldw	r4,-320(fp)
 8015504:	017ce104 	movi	r5,-3196
 8015508:	802c2180 	call	802c218 <__mulsi3>
 801550c:	e0bfb015 	stw	r2,-320(fp)
		z2 += z1;
 8015510:	e0ffaf17 	ldw	r3,-324(fp)
 8015514:	e0bfb117 	ldw	r2,-316(fp)
 8015518:	1885883a 	add	r2,r3,r2
 801551c:	e0bfaf15 	stw	r2,-324(fp)
		z3 += z1;
 8015520:	e0ffb017 	ldw	r3,-320(fp)
 8015524:	e0bfb117 	ldw	r2,-316(fp)
 8015528:	1885883a 	add	r2,r3,r2
 801552c:	e0bfb015 	stw	r2,-320(fp)

		z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8015530:	e0ffb417 	ldw	r3,-304(fp)
 8015534:	e0bfb317 	ldw	r2,-308(fp)
 8015538:	1885883a 	add	r2,r3,r2
 801553c:	1009883a 	mov	r4,r2
 8015540:	0178ccc4 	movi	r5,-7373
 8015544:	802c2180 	call	802c218 <__mulsi3>
 8015548:	e0bfb115 	stw	r2,-316(fp)
		tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
 801554c:	e13fb417 	ldw	r4,-304(fp)
 8015550:	01426384 	movi	r5,2446
 8015554:	802c2180 	call	802c218 <__mulsi3>
 8015558:	e0bfb415 	stw	r2,-304(fp)
		tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
 801555c:	e13fb317 	ldw	r4,-308(fp)
 8015560:	014c02c4 	movi	r5,12299
 8015564:	802c2180 	call	802c218 <__mulsi3>
 8015568:	e0bfb315 	stw	r2,-308(fp)
		tmp0 += z1 + z2;
 801556c:	e0ffb117 	ldw	r3,-316(fp)
 8015570:	e0bfaf17 	ldw	r2,-324(fp)
 8015574:	1885883a 	add	r2,r3,r2
 8015578:	e0ffb417 	ldw	r3,-304(fp)
 801557c:	1885883a 	add	r2,r3,r2
 8015580:	e0bfb415 	stw	r2,-304(fp)
		tmp3 += z1 + z3;
 8015584:	e0ffb117 	ldw	r3,-316(fp)
 8015588:	e0bfb017 	ldw	r2,-320(fp)
 801558c:	1885883a 	add	r2,r3,r2
 8015590:	e0ffb317 	ldw	r3,-308(fp)
 8015594:	1885883a 	add	r2,r3,r2
 8015598:	e0bfb315 	stw	r2,-308(fp)

		z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 801559c:	e0ffb517 	ldw	r3,-300(fp)
 80155a0:	e0bfb217 	ldw	r2,-312(fp)
 80155a4:	1885883a 	add	r2,r3,r2
 80155a8:	1009883a 	mov	r4,r2
 80155ac:	016b7f44 	movi	r5,-20995
 80155b0:	802c2180 	call	802c218 <__mulsi3>
 80155b4:	e0bfb115 	stw	r2,-316(fp)
		tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
 80155b8:	e13fb517 	ldw	r4,-300(fp)
 80155bc:	01506cc4 	movi	r5,16819
 80155c0:	802c2180 	call	802c218 <__mulsi3>
 80155c4:	e0bfb515 	stw	r2,-300(fp)
		tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
 80155c8:	e13fb217 	ldw	r4,-312(fp)
 80155cc:	01589504 	movi	r5,25172
 80155d0:	802c2180 	call	802c218 <__mulsi3>
 80155d4:	e0bfb215 	stw	r2,-312(fp)
		tmp1 += z1 + z3;
 80155d8:	e0ffb117 	ldw	r3,-316(fp)
 80155dc:	e0bfb017 	ldw	r2,-320(fp)
 80155e0:	1885883a 	add	r2,r3,r2
 80155e4:	e0ffb517 	ldw	r3,-300(fp)
 80155e8:	1885883a 	add	r2,r3,r2
 80155ec:	e0bfb515 	stw	r2,-300(fp)
		tmp2 += z1 + z2;
 80155f0:	e0ffb117 	ldw	r3,-316(fp)
 80155f4:	e0bfaf17 	ldw	r2,-324(fp)
 80155f8:	1885883a 	add	r2,r3,r2
 80155fc:	e0ffb217 	ldw	r3,-312(fp)
 8015600:	1885883a 	add	r2,r3,r2
 8015604:	e0bfb215 	stw	r2,-312(fp)

		/* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */

		outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8015608:	e0ffb617 	ldw	r3,-296(fp)
 801560c:	e0bfb317 	ldw	r2,-308(fp)
 8015610:	1885883a 	add	r2,r3,r2
 8015614:	1005d4ba 	srai	r2,r2,18
 8015618:	1080ffcc 	andi	r2,r2,1023
 801561c:	e0ffad17 	ldw	r3,-332(fp)
 8015620:	1885883a 	add	r2,r3,r2
 8015624:	10c00003 	ldbu	r3,0(r2)
 8015628:	e0bfba17 	ldw	r2,-280(fp)
 801562c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8015630:	e0bfba17 	ldw	r2,-280(fp)
 8015634:	108001c4 	addi	r2,r2,7
 8015638:	e13fb617 	ldw	r4,-296(fp)
 801563c:	e0ffb317 	ldw	r3,-308(fp)
 8015640:	20c7c83a 	sub	r3,r4,r3
 8015644:	1807d4ba 	srai	r3,r3,18
 8015648:	18c0ffcc 	andi	r3,r3,1023
 801564c:	e13fad17 	ldw	r4,-332(fp)
 8015650:	20c7883a 	add	r3,r4,r3
 8015654:	18c00003 	ldbu	r3,0(r3)
 8015658:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 801565c:	e0bfba17 	ldw	r2,-280(fp)
 8015660:	10800044 	addi	r2,r2,1
 8015664:	e13fb817 	ldw	r4,-288(fp)
 8015668:	e0ffb217 	ldw	r3,-312(fp)
 801566c:	20c7883a 	add	r3,r4,r3
 8015670:	1807d4ba 	srai	r3,r3,18
 8015674:	18c0ffcc 	andi	r3,r3,1023
 8015678:	e13fad17 	ldw	r4,-332(fp)
 801567c:	20c7883a 	add	r3,r4,r3
 8015680:	18c00003 	ldbu	r3,0(r3)
 8015684:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8015688:	e0bfba17 	ldw	r2,-280(fp)
 801568c:	10800184 	addi	r2,r2,6
 8015690:	e13fb817 	ldw	r4,-288(fp)
 8015694:	e0ffb217 	ldw	r3,-312(fp)
 8015698:	20c7c83a 	sub	r3,r4,r3
 801569c:	1807d4ba 	srai	r3,r3,18
 80156a0:	18c0ffcc 	andi	r3,r3,1023
 80156a4:	e13fad17 	ldw	r4,-332(fp)
 80156a8:	20c7883a 	add	r3,r4,r3
 80156ac:	18c00003 	ldbu	r3,0(r3)
 80156b0:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 80156b4:	e0bfba17 	ldw	r2,-280(fp)
 80156b8:	10800084 	addi	r2,r2,2
 80156bc:	e13fb917 	ldw	r4,-284(fp)
 80156c0:	e0ffb517 	ldw	r3,-300(fp)
 80156c4:	20c7883a 	add	r3,r4,r3
 80156c8:	1807d4ba 	srai	r3,r3,18
 80156cc:	18c0ffcc 	andi	r3,r3,1023
 80156d0:	e13fad17 	ldw	r4,-332(fp)
 80156d4:	20c7883a 	add	r3,r4,r3
 80156d8:	18c00003 	ldbu	r3,0(r3)
 80156dc:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 80156e0:	e0bfba17 	ldw	r2,-280(fp)
 80156e4:	10800144 	addi	r2,r2,5
 80156e8:	e13fb917 	ldw	r4,-284(fp)
 80156ec:	e0ffb517 	ldw	r3,-300(fp)
 80156f0:	20c7c83a 	sub	r3,r4,r3
 80156f4:	1807d4ba 	srai	r3,r3,18
 80156f8:	18c0ffcc 	andi	r3,r3,1023
 80156fc:	e13fad17 	ldw	r4,-332(fp)
 8015700:	20c7883a 	add	r3,r4,r3
 8015704:	18c00003 	ldbu	r3,0(r3)
 8015708:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 801570c:	e0bfba17 	ldw	r2,-280(fp)
 8015710:	108000c4 	addi	r2,r2,3
 8015714:	e13fb717 	ldw	r4,-292(fp)
 8015718:	e0ffb417 	ldw	r3,-304(fp)
 801571c:	20c7883a 	add	r3,r4,r3
 8015720:	1807d4ba 	srai	r3,r3,18
 8015724:	18c0ffcc 	andi	r3,r3,1023
 8015728:	e13fad17 	ldw	r4,-332(fp)
 801572c:	20c7883a 	add	r3,r4,r3
 8015730:	18c00003 	ldbu	r3,0(r3)
 8015734:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8015738:	e0bfba17 	ldw	r2,-280(fp)
 801573c:	10800104 	addi	r2,r2,4
 8015740:	e13fb717 	ldw	r4,-292(fp)
 8015744:	e0ffb417 	ldw	r3,-304(fp)
 8015748:	20c7c83a 	sub	r3,r4,r3
 801574c:	1807d4ba 	srai	r3,r3,18
 8015750:	18c0ffcc 	andi	r3,r3,1023
 8015754:	e13fad17 	ldw	r4,-332(fp)
 8015758:	20c7883a 	add	r3,r4,r3
 801575c:	18c00003 	ldbu	r3,0(r3)
 8015760:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += DCTSIZE;		/* advance pointer to next row */
 8015764:	e0bfab17 	ldw	r2,-340(fp)
 8015768:	10800804 	addi	r2,r2,32
 801576c:	e0bfab15 	stw	r2,-340(fp)
	/* Pass 2: process rows from work array, store into output array. */
	/* Note that we must descale the results by a factor of 8 == 2**3, */
	/* and also undo the PASS1_BITS scaling. */

	wsptr = workspace;
	for (ctr = 0; ctr < DCTSIZE; ctr++) {
 8015770:	e0bfac17 	ldw	r2,-336(fp)
 8015774:	10800044 	addi	r2,r2,1
 8015778:	e0bfac15 	stw	r2,-336(fp)
 801577c:	e0bfac17 	ldw	r2,-336(fp)
 8015780:	10800210 	cmplti	r2,r2,8
 8015784:	103eab1e 	bne	r2,zero,8015234 <jpeg_idct_islow+0x6dc>
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += DCTSIZE;		/* advance pointer to next row */
	}
}
 8015788:	e037883a 	mov	sp,fp
 801578c:	dfc00117 	ldw	ra,4(sp)
 8015790:	df000017 	ldw	fp,0(sp)
 8015794:	dec00204 	addi	sp,sp,8
 8015798:	f800283a 	ret

0801579c <jpeg_idct_7x7>:

GLOBAL(void)
	jpeg_idct_7x7 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801579c:	deffb804 	addi	sp,sp,-288
 80157a0:	dfc04715 	stw	ra,284(sp)
 80157a4:	df004615 	stw	fp,280(sp)
 80157a8:	dc004515 	stw	r16,276(sp)
 80157ac:	df004504 	addi	fp,sp,276
 80157b0:	e13ffc15 	stw	r4,-16(fp)
 80157b4:	e17ffd15 	stw	r5,-12(fp)
 80157b8:	e1bffe15 	stw	r6,-8(fp)
 80157bc:	e1ffff15 	stw	r7,-4(fp)
	INT32 z1, z2, z3;
	JCOEFPTR inptr;
	ISLOW_MULT_TYPE * quantptr;
	int * wsptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80157c0:	e0bffc17 	ldw	r2,-16(fp)
 80157c4:	10804917 	ldw	r2,292(r2)
 80157c8:	10802004 	addi	r2,r2,128
 80157cc:	e0bfbf15 	stw	r2,-260(fp)
	int workspace[7*7];	/* buffers data between passes */
	SHIFT_TEMPS

		/* Pass 1: process columns from input, store into work array. */

		inptr = coef_block;
 80157d0:	e0bffe17 	ldw	r2,-8(fp)
 80157d4:	e0bfbb15 	stw	r2,-276(fp)
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 80157d8:	e0bffd17 	ldw	r2,-12(fp)
 80157dc:	10801517 	ldw	r2,84(r2)
 80157e0:	e0bfbc15 	stw	r2,-272(fp)
	wsptr = workspace;
 80157e4:	e0bfcb04 	addi	r2,fp,-212
 80157e8:	e0bfbd15 	stw	r2,-268(fp)
	for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 80157ec:	e03fbe15 	stw	zero,-264(fp)
 80157f0:	00010d06 	br	8015c28 <jpeg_idct_7x7+0x48c>
		/* Even part */

		tmp13 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80157f4:	e0bfbb17 	ldw	r2,-276(fp)
 80157f8:	1080000b 	ldhu	r2,0(r2)
 80157fc:	10ffffcc 	andi	r3,r2,65535
 8015800:	18e0001c 	xori	r3,r3,32768
 8015804:	18e00004 	addi	r3,r3,-32768
 8015808:	e0bfbc17 	ldw	r2,-272(fp)
 801580c:	10800017 	ldw	r2,0(r2)
 8015810:	1809883a 	mov	r4,r3
 8015814:	100b883a 	mov	r5,r2
 8015818:	802c2180 	call	802c218 <__mulsi3>
 801581c:	e0bfc015 	stw	r2,-256(fp)
		tmp13 <<= CONST_BITS;
 8015820:	e0bfc017 	ldw	r2,-256(fp)
 8015824:	1004937a 	slli	r2,r2,13
 8015828:	e0bfc015 	stw	r2,-256(fp)
		/* Add fudge factor here for final descale. */
		tmp13 += ONE << (CONST_BITS-PASS1_BITS-1);
 801582c:	e0bfc017 	ldw	r2,-256(fp)
 8015830:	10810004 	addi	r2,r2,1024
 8015834:	e0bfc015 	stw	r2,-256(fp)

		z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8015838:	e0bfbb17 	ldw	r2,-276(fp)
 801583c:	10800804 	addi	r2,r2,32
 8015840:	1080000b 	ldhu	r2,0(r2)
 8015844:	10ffffcc 	andi	r3,r2,65535
 8015848:	18e0001c 	xori	r3,r3,32768
 801584c:	18e00004 	addi	r3,r3,-32768
 8015850:	e0bfbc17 	ldw	r2,-272(fp)
 8015854:	10801004 	addi	r2,r2,64
 8015858:	10800017 	ldw	r2,0(r2)
 801585c:	1809883a 	mov	r4,r3
 8015860:	100b883a 	mov	r5,r2
 8015864:	802c2180 	call	802c218 <__mulsi3>
 8015868:	e0bfc115 	stw	r2,-252(fp)
		z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801586c:	e0bfbb17 	ldw	r2,-276(fp)
 8015870:	10801004 	addi	r2,r2,64
 8015874:	1080000b 	ldhu	r2,0(r2)
 8015878:	10ffffcc 	andi	r3,r2,65535
 801587c:	18e0001c 	xori	r3,r3,32768
 8015880:	18e00004 	addi	r3,r3,-32768
 8015884:	e0bfbc17 	ldw	r2,-272(fp)
 8015888:	10802004 	addi	r2,r2,128
 801588c:	10800017 	ldw	r2,0(r2)
 8015890:	1809883a 	mov	r4,r3
 8015894:	100b883a 	mov	r5,r2
 8015898:	802c2180 	call	802c218 <__mulsi3>
 801589c:	e0bfc215 	stw	r2,-248(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80158a0:	e0bfbb17 	ldw	r2,-276(fp)
 80158a4:	10801804 	addi	r2,r2,96
 80158a8:	1080000b 	ldhu	r2,0(r2)
 80158ac:	10ffffcc 	andi	r3,r2,65535
 80158b0:	18e0001c 	xori	r3,r3,32768
 80158b4:	18e00004 	addi	r3,r3,-32768
 80158b8:	e0bfbc17 	ldw	r2,-272(fp)
 80158bc:	10803004 	addi	r2,r2,192
 80158c0:	10800017 	ldw	r2,0(r2)
 80158c4:	1809883a 	mov	r4,r3
 80158c8:	100b883a 	mov	r5,r2
 80158cc:	802c2180 	call	802c218 <__mulsi3>
 80158d0:	e0bfc315 	stw	r2,-244(fp)

		tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 80158d4:	e0ffc217 	ldw	r3,-248(fp)
 80158d8:	e0bfc317 	ldw	r2,-244(fp)
 80158dc:	1885c83a 	sub	r2,r3,r2
 80158e0:	1009883a 	mov	r4,r2
 80158e4:	01470dc4 	movi	r5,7223
 80158e8:	802c2180 	call	802c218 <__mulsi3>
 80158ec:	e0bfc415 	stw	r2,-240(fp)
		tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 80158f0:	e0ffc117 	ldw	r3,-252(fp)
 80158f4:	e0bfc217 	ldw	r2,-248(fp)
 80158f8:	1885c83a 	sub	r2,r3,r2
 80158fc:	1009883a 	mov	r4,r2
 8015900:	01428484 	movi	r5,2578
 8015904:	802c2180 	call	802c218 <__mulsi3>
 8015908:	e0bfc515 	stw	r2,-236(fp)
		tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 801590c:	e0ffc417 	ldw	r3,-240(fp)
 8015910:	e0bfc517 	ldw	r2,-236(fp)
 8015914:	1887883a 	add	r3,r3,r2
 8015918:	e0bfc017 	ldw	r2,-256(fp)
 801591c:	18a1883a 	add	r16,r3,r2
 8015920:	e13fc217 	ldw	r4,-248(fp)
 8015924:	01714544 	movi	r5,-15083
 8015928:	802c2180 	call	802c218 <__mulsi3>
 801592c:	8085883a 	add	r2,r16,r2
 8015930:	e0bfc615 	stw	r2,-232(fp)
		tmp0 = z1 + z3;
 8015934:	e0ffc117 	ldw	r3,-252(fp)
 8015938:	e0bfc317 	ldw	r2,-244(fp)
 801593c:	1885883a 	add	r2,r3,r2
 8015940:	e0bfc715 	stw	r2,-228(fp)
		z2 -= tmp0;
 8015944:	e0ffc217 	ldw	r3,-248(fp)
 8015948:	e0bfc717 	ldw	r2,-228(fp)
 801594c:	1885c83a 	sub	r2,r3,r2
 8015950:	e0bfc215 	stw	r2,-248(fp)
		tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 8015954:	e13fc717 	ldw	r4,-228(fp)
 8015958:	014a3184 	movi	r5,10438
 801595c:	802c2180 	call	802c218 <__mulsi3>
 8015960:	1007883a 	mov	r3,r2
 8015964:	e0bfc017 	ldw	r2,-256(fp)
 8015968:	1885883a 	add	r2,r3,r2
 801596c:	e0bfc715 	stw	r2,-228(fp)
		tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 8015970:	e13fc317 	ldw	r4,-244(fp)
 8015974:	017f60c4 	movi	r5,-637
 8015978:	802c2180 	call	802c218 <__mulsi3>
 801597c:	1007883a 	mov	r3,r2
 8015980:	e0bfc717 	ldw	r2,-228(fp)
 8015984:	1885883a 	add	r2,r3,r2
 8015988:	e0ffc417 	ldw	r3,-240(fp)
 801598c:	1885883a 	add	r2,r3,r2
 8015990:	e0bfc415 	stw	r2,-240(fp)
		tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 8015994:	e13fc117 	ldw	r4,-252(fp)
 8015998:	016c3c44 	movi	r5,-20239
 801599c:	802c2180 	call	802c218 <__mulsi3>
 80159a0:	1007883a 	mov	r3,r2
 80159a4:	e0bfc717 	ldw	r2,-228(fp)
 80159a8:	1885883a 	add	r2,r3,r2
 80159ac:	e0ffc517 	ldw	r3,-236(fp)
 80159b0:	1885883a 	add	r2,r3,r2
 80159b4:	e0bfc515 	stw	r2,-236(fp)
		tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 80159b8:	e13fc217 	ldw	r4,-248(fp)
 80159bc:	014b5044 	movi	r5,11585
 80159c0:	802c2180 	call	802c218 <__mulsi3>
 80159c4:	e0ffc017 	ldw	r3,-256(fp)
 80159c8:	1885883a 	add	r2,r3,r2
 80159cc:	e0bfc015 	stw	r2,-256(fp)

		/* Odd part */

		z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80159d0:	e0bfbb17 	ldw	r2,-276(fp)
 80159d4:	10800404 	addi	r2,r2,16
 80159d8:	1080000b 	ldhu	r2,0(r2)
 80159dc:	10ffffcc 	andi	r3,r2,65535
 80159e0:	18e0001c 	xori	r3,r3,32768
 80159e4:	18e00004 	addi	r3,r3,-32768
 80159e8:	e0bfbc17 	ldw	r2,-272(fp)
 80159ec:	10800804 	addi	r2,r2,32
 80159f0:	10800017 	ldw	r2,0(r2)
 80159f4:	1809883a 	mov	r4,r3
 80159f8:	100b883a 	mov	r5,r2
 80159fc:	802c2180 	call	802c218 <__mulsi3>
 8015a00:	e0bfc115 	stw	r2,-252(fp)
		z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8015a04:	e0bfbb17 	ldw	r2,-276(fp)
 8015a08:	10800c04 	addi	r2,r2,48
 8015a0c:	1080000b 	ldhu	r2,0(r2)
 8015a10:	10ffffcc 	andi	r3,r2,65535
 8015a14:	18e0001c 	xori	r3,r3,32768
 8015a18:	18e00004 	addi	r3,r3,-32768
 8015a1c:	e0bfbc17 	ldw	r2,-272(fp)
 8015a20:	10801804 	addi	r2,r2,96
 8015a24:	10800017 	ldw	r2,0(r2)
 8015a28:	1809883a 	mov	r4,r3
 8015a2c:	100b883a 	mov	r5,r2
 8015a30:	802c2180 	call	802c218 <__mulsi3>
 8015a34:	e0bfc215 	stw	r2,-248(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8015a38:	e0bfbb17 	ldw	r2,-276(fp)
 8015a3c:	10801404 	addi	r2,r2,80
 8015a40:	1080000b 	ldhu	r2,0(r2)
 8015a44:	10ffffcc 	andi	r3,r2,65535
 8015a48:	18e0001c 	xori	r3,r3,32768
 8015a4c:	18e00004 	addi	r3,r3,-32768
 8015a50:	e0bfbc17 	ldw	r2,-272(fp)
 8015a54:	10802804 	addi	r2,r2,160
 8015a58:	10800017 	ldw	r2,0(r2)
 8015a5c:	1809883a 	mov	r4,r3
 8015a60:	100b883a 	mov	r5,r2
 8015a64:	802c2180 	call	802c218 <__mulsi3>
 8015a68:	e0bfc315 	stw	r2,-244(fp)

		tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 8015a6c:	e0ffc117 	ldw	r3,-252(fp)
 8015a70:	e0bfc217 	ldw	r2,-248(fp)
 8015a74:	1885883a 	add	r2,r3,r2
 8015a78:	1009883a 	mov	r4,r2
 8015a7c:	01477bc4 	movi	r5,7663
 8015a80:	802c2180 	call	802c218 <__mulsi3>
 8015a84:	e0bfc815 	stw	r2,-224(fp)
		tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 8015a88:	e0ffc117 	ldw	r3,-252(fp)
 8015a8c:	e0bfc217 	ldw	r2,-248(fp)
 8015a90:	1885c83a 	sub	r2,r3,r2
 8015a94:	1009883a 	mov	r4,r2
 8015a98:	01415cc4 	movi	r5,1395
 8015a9c:	802c2180 	call	802c218 <__mulsi3>
 8015aa0:	e0bfc915 	stw	r2,-220(fp)
		tmp0 = tmp1 - tmp2;
 8015aa4:	e0ffc817 	ldw	r3,-224(fp)
 8015aa8:	e0bfc917 	ldw	r2,-220(fp)
 8015aac:	1885c83a 	sub	r2,r3,r2
 8015ab0:	e0bfc715 	stw	r2,-228(fp)
		tmp1 += tmp2;
 8015ab4:	e0ffc817 	ldw	r3,-224(fp)
 8015ab8:	e0bfc917 	ldw	r2,-220(fp)
 8015abc:	1885883a 	add	r2,r3,r2
 8015ac0:	e0bfc815 	stw	r2,-224(fp)
		tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 8015ac4:	e0ffc217 	ldw	r3,-248(fp)
 8015ac8:	e0bfc317 	ldw	r2,-244(fp)
 8015acc:	1885883a 	add	r2,r3,r2
 8015ad0:	1009883a 	mov	r4,r2
 8015ad4:	0174f844 	movi	r5,-11295
 8015ad8:	802c2180 	call	802c218 <__mulsi3>
 8015adc:	e0bfc915 	stw	r2,-220(fp)
		tmp1 += tmp2;
 8015ae0:	e0ffc817 	ldw	r3,-224(fp)
 8015ae4:	e0bfc917 	ldw	r2,-220(fp)
 8015ae8:	1885883a 	add	r2,r3,r2
 8015aec:	e0bfc815 	stw	r2,-224(fp)
		z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 8015af0:	e0ffc117 	ldw	r3,-252(fp)
 8015af4:	e0bfc317 	ldw	r2,-244(fp)
 8015af8:	1885883a 	add	r2,r3,r2
 8015afc:	1009883a 	mov	r4,r2
 8015b00:	0144e8c4 	movi	r5,5027
 8015b04:	802c2180 	call	802c218 <__mulsi3>
 8015b08:	e0bfc215 	stw	r2,-248(fp)
		tmp0 += z2;
 8015b0c:	e0ffc717 	ldw	r3,-228(fp)
 8015b10:	e0bfc217 	ldw	r2,-248(fp)
 8015b14:	1885883a 	add	r2,r3,r2
 8015b18:	e0bfc715 	stw	r2,-228(fp)
		tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 8015b1c:	e13fc317 	ldw	r4,-244(fp)
 8015b20:	014ef784 	movi	r5,15326
 8015b24:	802c2180 	call	802c218 <__mulsi3>
 8015b28:	1007883a 	mov	r3,r2
 8015b2c:	e0bfc217 	ldw	r2,-248(fp)
 8015b30:	1885883a 	add	r2,r3,r2
 8015b34:	e0ffc917 	ldw	r3,-220(fp)
 8015b38:	1885883a 	add	r2,r3,r2
 8015b3c:	e0bfc915 	stw	r2,-220(fp)

		/* Final output stage */

		wsptr[7*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8015b40:	e0ffc417 	ldw	r3,-240(fp)
 8015b44:	e0bfc717 	ldw	r2,-228(fp)
 8015b48:	1885883a 	add	r2,r3,r2
 8015b4c:	1007d2fa 	srai	r3,r2,11
 8015b50:	e0bfbd17 	ldw	r2,-268(fp)
 8015b54:	10c00015 	stw	r3,0(r2)
		wsptr[7*6] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8015b58:	e0bfbd17 	ldw	r2,-268(fp)
 8015b5c:	10802a04 	addi	r2,r2,168
 8015b60:	e13fc417 	ldw	r4,-240(fp)
 8015b64:	e0ffc717 	ldw	r3,-228(fp)
 8015b68:	20c7c83a 	sub	r3,r4,r3
 8015b6c:	1807d2fa 	srai	r3,r3,11
 8015b70:	10c00015 	stw	r3,0(r2)
		wsptr[7*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8015b74:	e0bfbd17 	ldw	r2,-268(fp)
 8015b78:	10800704 	addi	r2,r2,28
 8015b7c:	e13fc617 	ldw	r4,-232(fp)
 8015b80:	e0ffc817 	ldw	r3,-224(fp)
 8015b84:	20c7883a 	add	r3,r4,r3
 8015b88:	1807d2fa 	srai	r3,r3,11
 8015b8c:	10c00015 	stw	r3,0(r2)
		wsptr[7*5] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8015b90:	e0bfbd17 	ldw	r2,-268(fp)
 8015b94:	10802304 	addi	r2,r2,140
 8015b98:	e13fc617 	ldw	r4,-232(fp)
 8015b9c:	e0ffc817 	ldw	r3,-224(fp)
 8015ba0:	20c7c83a 	sub	r3,r4,r3
 8015ba4:	1807d2fa 	srai	r3,r3,11
 8015ba8:	10c00015 	stw	r3,0(r2)
		wsptr[7*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8015bac:	e0bfbd17 	ldw	r2,-268(fp)
 8015bb0:	10800e04 	addi	r2,r2,56
 8015bb4:	e13fc517 	ldw	r4,-236(fp)
 8015bb8:	e0ffc917 	ldw	r3,-220(fp)
 8015bbc:	20c7883a 	add	r3,r4,r3
 8015bc0:	1807d2fa 	srai	r3,r3,11
 8015bc4:	10c00015 	stw	r3,0(r2)
		wsptr[7*4] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8015bc8:	e0bfbd17 	ldw	r2,-268(fp)
 8015bcc:	10801c04 	addi	r2,r2,112
 8015bd0:	e13fc517 	ldw	r4,-236(fp)
 8015bd4:	e0ffc917 	ldw	r3,-220(fp)
 8015bd8:	20c7c83a 	sub	r3,r4,r3
 8015bdc:	1807d2fa 	srai	r3,r3,11
 8015be0:	10c00015 	stw	r3,0(r2)
		wsptr[7*3] = (int) RIGHT_SHIFT(tmp13, CONST_BITS-PASS1_BITS);
 8015be4:	e0bfbd17 	ldw	r2,-268(fp)
 8015be8:	10801504 	addi	r2,r2,84
 8015bec:	e0ffc017 	ldw	r3,-256(fp)
 8015bf0:	1807d2fa 	srai	r3,r3,11
 8015bf4:	10c00015 	stw	r3,0(r2)
		/* Pass 1: process columns from input, store into work array. */

		inptr = coef_block;
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
	wsptr = workspace;
	for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 8015bf8:	e0bfbe17 	ldw	r2,-264(fp)
 8015bfc:	10800044 	addi	r2,r2,1
 8015c00:	e0bfbe15 	stw	r2,-264(fp)
 8015c04:	e0bfbb17 	ldw	r2,-276(fp)
 8015c08:	10800084 	addi	r2,r2,2
 8015c0c:	e0bfbb15 	stw	r2,-276(fp)
 8015c10:	e0bfbc17 	ldw	r2,-272(fp)
 8015c14:	10800104 	addi	r2,r2,4
 8015c18:	e0bfbc15 	stw	r2,-272(fp)
 8015c1c:	e0bfbd17 	ldw	r2,-268(fp)
 8015c20:	10800104 	addi	r2,r2,4
 8015c24:	e0bfbd15 	stw	r2,-268(fp)
 8015c28:	e0bfbe17 	ldw	r2,-264(fp)
 8015c2c:	108001d0 	cmplti	r2,r2,7
 8015c30:	103ef01e 	bne	r2,zero,80157f4 <jpeg_idct_7x7+0x58>
		wsptr[7*3] = (int) RIGHT_SHIFT(tmp13, CONST_BITS-PASS1_BITS);
	}

	/* Pass 2: process 7 rows from work array, store into output array. */

	wsptr = workspace;
 8015c34:	e0bfcb04 	addi	r2,fp,-212
 8015c38:	e0bfbd15 	stw	r2,-268(fp)
	for (ctr = 0; ctr < 7; ctr++) {
 8015c3c:	e03fbe15 	stw	zero,-264(fp)
 8015c40:	0000ec06 	br	8015ff4 <jpeg_idct_7x7+0x858>
		outptr = output_buf[ctr] + output_col;
 8015c44:	e0bfbe17 	ldw	r2,-264(fp)
 8015c48:	1085883a 	add	r2,r2,r2
 8015c4c:	1085883a 	add	r2,r2,r2
 8015c50:	e0ffff17 	ldw	r3,-4(fp)
 8015c54:	1885883a 	add	r2,r3,r2
 8015c58:	10c00017 	ldw	r3,0(r2)
 8015c5c:	e0800317 	ldw	r2,12(fp)
 8015c60:	1885883a 	add	r2,r3,r2
 8015c64:	e0bfca15 	stw	r2,-216(fp)

		/* Even part */

		/* Add fudge factor here for final descale. */
		tmp13 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8015c68:	e0bfbd17 	ldw	r2,-268(fp)
 8015c6c:	10800017 	ldw	r2,0(r2)
 8015c70:	10800404 	addi	r2,r2,16
 8015c74:	e0bfc015 	stw	r2,-256(fp)
		tmp13 <<= CONST_BITS;
 8015c78:	e0bfc017 	ldw	r2,-256(fp)
 8015c7c:	1004937a 	slli	r2,r2,13
 8015c80:	e0bfc015 	stw	r2,-256(fp)

		z1 = (INT32) wsptr[2];
 8015c84:	e0bfbd17 	ldw	r2,-268(fp)
 8015c88:	10800204 	addi	r2,r2,8
 8015c8c:	10800017 	ldw	r2,0(r2)
 8015c90:	e0bfc115 	stw	r2,-252(fp)
		z2 = (INT32) wsptr[4];
 8015c94:	e0bfbd17 	ldw	r2,-268(fp)
 8015c98:	10800404 	addi	r2,r2,16
 8015c9c:	10800017 	ldw	r2,0(r2)
 8015ca0:	e0bfc215 	stw	r2,-248(fp)
		z3 = (INT32) wsptr[6];
 8015ca4:	e0bfbd17 	ldw	r2,-268(fp)
 8015ca8:	10800604 	addi	r2,r2,24
 8015cac:	10800017 	ldw	r2,0(r2)
 8015cb0:	e0bfc315 	stw	r2,-244(fp)

		tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 8015cb4:	e0ffc217 	ldw	r3,-248(fp)
 8015cb8:	e0bfc317 	ldw	r2,-244(fp)
 8015cbc:	1885c83a 	sub	r2,r3,r2
 8015cc0:	1009883a 	mov	r4,r2
 8015cc4:	01470dc4 	movi	r5,7223
 8015cc8:	802c2180 	call	802c218 <__mulsi3>
 8015ccc:	e0bfc415 	stw	r2,-240(fp)
		tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 8015cd0:	e0ffc117 	ldw	r3,-252(fp)
 8015cd4:	e0bfc217 	ldw	r2,-248(fp)
 8015cd8:	1885c83a 	sub	r2,r3,r2
 8015cdc:	1009883a 	mov	r4,r2
 8015ce0:	01428484 	movi	r5,2578
 8015ce4:	802c2180 	call	802c218 <__mulsi3>
 8015ce8:	e0bfc515 	stw	r2,-236(fp)
		tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8015cec:	e0ffc417 	ldw	r3,-240(fp)
 8015cf0:	e0bfc517 	ldw	r2,-236(fp)
 8015cf4:	1887883a 	add	r3,r3,r2
 8015cf8:	e0bfc017 	ldw	r2,-256(fp)
 8015cfc:	18a1883a 	add	r16,r3,r2
 8015d00:	e13fc217 	ldw	r4,-248(fp)
 8015d04:	01714544 	movi	r5,-15083
 8015d08:	802c2180 	call	802c218 <__mulsi3>
 8015d0c:	8085883a 	add	r2,r16,r2
 8015d10:	e0bfc615 	stw	r2,-232(fp)
		tmp0 = z1 + z3;
 8015d14:	e0ffc117 	ldw	r3,-252(fp)
 8015d18:	e0bfc317 	ldw	r2,-244(fp)
 8015d1c:	1885883a 	add	r2,r3,r2
 8015d20:	e0bfc715 	stw	r2,-228(fp)
		z2 -= tmp0;
 8015d24:	e0ffc217 	ldw	r3,-248(fp)
 8015d28:	e0bfc717 	ldw	r2,-228(fp)
 8015d2c:	1885c83a 	sub	r2,r3,r2
 8015d30:	e0bfc215 	stw	r2,-248(fp)
		tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 8015d34:	e13fc717 	ldw	r4,-228(fp)
 8015d38:	014a3184 	movi	r5,10438
 8015d3c:	802c2180 	call	802c218 <__mulsi3>
 8015d40:	1007883a 	mov	r3,r2
 8015d44:	e0bfc017 	ldw	r2,-256(fp)
 8015d48:	1885883a 	add	r2,r3,r2
 8015d4c:	e0bfc715 	stw	r2,-228(fp)
		tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 8015d50:	e13fc317 	ldw	r4,-244(fp)
 8015d54:	017f60c4 	movi	r5,-637
 8015d58:	802c2180 	call	802c218 <__mulsi3>
 8015d5c:	1007883a 	mov	r3,r2
 8015d60:	e0bfc717 	ldw	r2,-228(fp)
 8015d64:	1885883a 	add	r2,r3,r2
 8015d68:	e0ffc417 	ldw	r3,-240(fp)
 8015d6c:	1885883a 	add	r2,r3,r2
 8015d70:	e0bfc415 	stw	r2,-240(fp)
		tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 8015d74:	e13fc117 	ldw	r4,-252(fp)
 8015d78:	016c3c44 	movi	r5,-20239
 8015d7c:	802c2180 	call	802c218 <__mulsi3>
 8015d80:	1007883a 	mov	r3,r2
 8015d84:	e0bfc717 	ldw	r2,-228(fp)
 8015d88:	1885883a 	add	r2,r3,r2
 8015d8c:	e0ffc517 	ldw	r3,-236(fp)
 8015d90:	1885883a 	add	r2,r3,r2
 8015d94:	e0bfc515 	stw	r2,-236(fp)
		tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 8015d98:	e13fc217 	ldw	r4,-248(fp)
 8015d9c:	014b5044 	movi	r5,11585
 8015da0:	802c2180 	call	802c218 <__mulsi3>
 8015da4:	e0ffc017 	ldw	r3,-256(fp)
 8015da8:	1885883a 	add	r2,r3,r2
 8015dac:	e0bfc015 	stw	r2,-256(fp)

		/* Odd part */

		z1 = (INT32) wsptr[1];
 8015db0:	e0bfbd17 	ldw	r2,-268(fp)
 8015db4:	10800104 	addi	r2,r2,4
 8015db8:	10800017 	ldw	r2,0(r2)
 8015dbc:	e0bfc115 	stw	r2,-252(fp)
		z2 = (INT32) wsptr[3];
 8015dc0:	e0bfbd17 	ldw	r2,-268(fp)
 8015dc4:	10800304 	addi	r2,r2,12
 8015dc8:	10800017 	ldw	r2,0(r2)
 8015dcc:	e0bfc215 	stw	r2,-248(fp)
		z3 = (INT32) wsptr[5];
 8015dd0:	e0bfbd17 	ldw	r2,-268(fp)
 8015dd4:	10800504 	addi	r2,r2,20
 8015dd8:	10800017 	ldw	r2,0(r2)
 8015ddc:	e0bfc315 	stw	r2,-244(fp)

		tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 8015de0:	e0ffc117 	ldw	r3,-252(fp)
 8015de4:	e0bfc217 	ldw	r2,-248(fp)
 8015de8:	1885883a 	add	r2,r3,r2
 8015dec:	1009883a 	mov	r4,r2
 8015df0:	01477bc4 	movi	r5,7663
 8015df4:	802c2180 	call	802c218 <__mulsi3>
 8015df8:	e0bfc815 	stw	r2,-224(fp)
		tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 8015dfc:	e0ffc117 	ldw	r3,-252(fp)
 8015e00:	e0bfc217 	ldw	r2,-248(fp)
 8015e04:	1885c83a 	sub	r2,r3,r2
 8015e08:	1009883a 	mov	r4,r2
 8015e0c:	01415cc4 	movi	r5,1395
 8015e10:	802c2180 	call	802c218 <__mulsi3>
 8015e14:	e0bfc915 	stw	r2,-220(fp)
		tmp0 = tmp1 - tmp2;
 8015e18:	e0ffc817 	ldw	r3,-224(fp)
 8015e1c:	e0bfc917 	ldw	r2,-220(fp)
 8015e20:	1885c83a 	sub	r2,r3,r2
 8015e24:	e0bfc715 	stw	r2,-228(fp)
		tmp1 += tmp2;
 8015e28:	e0ffc817 	ldw	r3,-224(fp)
 8015e2c:	e0bfc917 	ldw	r2,-220(fp)
 8015e30:	1885883a 	add	r2,r3,r2
 8015e34:	e0bfc815 	stw	r2,-224(fp)
		tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 8015e38:	e0ffc217 	ldw	r3,-248(fp)
 8015e3c:	e0bfc317 	ldw	r2,-244(fp)
 8015e40:	1885883a 	add	r2,r3,r2
 8015e44:	1009883a 	mov	r4,r2
 8015e48:	0174f844 	movi	r5,-11295
 8015e4c:	802c2180 	call	802c218 <__mulsi3>
 8015e50:	e0bfc915 	stw	r2,-220(fp)
		tmp1 += tmp2;
 8015e54:	e0ffc817 	ldw	r3,-224(fp)
 8015e58:	e0bfc917 	ldw	r2,-220(fp)
 8015e5c:	1885883a 	add	r2,r3,r2
 8015e60:	e0bfc815 	stw	r2,-224(fp)
		z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 8015e64:	e0ffc117 	ldw	r3,-252(fp)
 8015e68:	e0bfc317 	ldw	r2,-244(fp)
 8015e6c:	1885883a 	add	r2,r3,r2
 8015e70:	1009883a 	mov	r4,r2
 8015e74:	0144e8c4 	movi	r5,5027
 8015e78:	802c2180 	call	802c218 <__mulsi3>
 8015e7c:	e0bfc215 	stw	r2,-248(fp)
		tmp0 += z2;
 8015e80:	e0ffc717 	ldw	r3,-228(fp)
 8015e84:	e0bfc217 	ldw	r2,-248(fp)
 8015e88:	1885883a 	add	r2,r3,r2
 8015e8c:	e0bfc715 	stw	r2,-228(fp)
		tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 8015e90:	e13fc317 	ldw	r4,-244(fp)
 8015e94:	014ef784 	movi	r5,15326
 8015e98:	802c2180 	call	802c218 <__mulsi3>
 8015e9c:	1007883a 	mov	r3,r2
 8015ea0:	e0bfc217 	ldw	r2,-248(fp)
 8015ea4:	1885883a 	add	r2,r3,r2
 8015ea8:	e0ffc917 	ldw	r3,-220(fp)
 8015eac:	1885883a 	add	r2,r3,r2
 8015eb0:	e0bfc915 	stw	r2,-220(fp)

		/* Final output stage */

		outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8015eb4:	e0ffc417 	ldw	r3,-240(fp)
 8015eb8:	e0bfc717 	ldw	r2,-228(fp)
 8015ebc:	1885883a 	add	r2,r3,r2
 8015ec0:	1005d4ba 	srai	r2,r2,18
 8015ec4:	1080ffcc 	andi	r2,r2,1023
 8015ec8:	e0ffbf17 	ldw	r3,-260(fp)
 8015ecc:	1885883a 	add	r2,r3,r2
 8015ed0:	10c00003 	ldbu	r3,0(r2)
 8015ed4:	e0bfca17 	ldw	r2,-216(fp)
 8015ed8:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8015edc:	e0bfca17 	ldw	r2,-216(fp)
 8015ee0:	10800184 	addi	r2,r2,6
 8015ee4:	e13fc417 	ldw	r4,-240(fp)
 8015ee8:	e0ffc717 	ldw	r3,-228(fp)
 8015eec:	20c7c83a 	sub	r3,r4,r3
 8015ef0:	1807d4ba 	srai	r3,r3,18
 8015ef4:	18c0ffcc 	andi	r3,r3,1023
 8015ef8:	e13fbf17 	ldw	r4,-260(fp)
 8015efc:	20c7883a 	add	r3,r4,r3
 8015f00:	18c00003 	ldbu	r3,0(r3)
 8015f04:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8015f08:	e0bfca17 	ldw	r2,-216(fp)
 8015f0c:	10800044 	addi	r2,r2,1
 8015f10:	e13fc617 	ldw	r4,-232(fp)
 8015f14:	e0ffc817 	ldw	r3,-224(fp)
 8015f18:	20c7883a 	add	r3,r4,r3
 8015f1c:	1807d4ba 	srai	r3,r3,18
 8015f20:	18c0ffcc 	andi	r3,r3,1023
 8015f24:	e13fbf17 	ldw	r4,-260(fp)
 8015f28:	20c7883a 	add	r3,r4,r3
 8015f2c:	18c00003 	ldbu	r3,0(r3)
 8015f30:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8015f34:	e0bfca17 	ldw	r2,-216(fp)
 8015f38:	10800144 	addi	r2,r2,5
 8015f3c:	e13fc617 	ldw	r4,-232(fp)
 8015f40:	e0ffc817 	ldw	r3,-224(fp)
 8015f44:	20c7c83a 	sub	r3,r4,r3
 8015f48:	1807d4ba 	srai	r3,r3,18
 8015f4c:	18c0ffcc 	andi	r3,r3,1023
 8015f50:	e13fbf17 	ldw	r4,-260(fp)
 8015f54:	20c7883a 	add	r3,r4,r3
 8015f58:	18c00003 	ldbu	r3,0(r3)
 8015f5c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8015f60:	e0bfca17 	ldw	r2,-216(fp)
 8015f64:	10800084 	addi	r2,r2,2
 8015f68:	e13fc517 	ldw	r4,-236(fp)
 8015f6c:	e0ffc917 	ldw	r3,-220(fp)
 8015f70:	20c7883a 	add	r3,r4,r3
 8015f74:	1807d4ba 	srai	r3,r3,18
 8015f78:	18c0ffcc 	andi	r3,r3,1023
 8015f7c:	e13fbf17 	ldw	r4,-260(fp)
 8015f80:	20c7883a 	add	r3,r4,r3
 8015f84:	18c00003 	ldbu	r3,0(r3)
 8015f88:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8015f8c:	e0bfca17 	ldw	r2,-216(fp)
 8015f90:	10800104 	addi	r2,r2,4
 8015f94:	e13fc517 	ldw	r4,-236(fp)
 8015f98:	e0ffc917 	ldw	r3,-220(fp)
 8015f9c:	20c7c83a 	sub	r3,r4,r3
 8015fa0:	1807d4ba 	srai	r3,r3,18
 8015fa4:	18c0ffcc 	andi	r3,r3,1023
 8015fa8:	e13fbf17 	ldw	r4,-260(fp)
 8015fac:	20c7883a 	add	r3,r4,r3
 8015fb0:	18c00003 	ldbu	r3,0(r3)
 8015fb4:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13,
 8015fb8:	e0bfca17 	ldw	r2,-216(fp)
 8015fbc:	108000c4 	addi	r2,r2,3
 8015fc0:	e0ffc017 	ldw	r3,-256(fp)
 8015fc4:	1807d4ba 	srai	r3,r3,18
 8015fc8:	18c0ffcc 	andi	r3,r3,1023
 8015fcc:	e13fbf17 	ldw	r4,-260(fp)
 8015fd0:	20c7883a 	add	r3,r4,r3
 8015fd4:	18c00003 	ldbu	r3,0(r3)
 8015fd8:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 7;		/* advance pointer to next row */
 8015fdc:	e0bfbd17 	ldw	r2,-268(fp)
 8015fe0:	10800704 	addi	r2,r2,28
 8015fe4:	e0bfbd15 	stw	r2,-268(fp)
	}

	/* Pass 2: process 7 rows from work array, store into output array. */

	wsptr = workspace;
	for (ctr = 0; ctr < 7; ctr++) {
 8015fe8:	e0bfbe17 	ldw	r2,-264(fp)
 8015fec:	10800044 	addi	r2,r2,1
 8015ff0:	e0bfbe15 	stw	r2,-264(fp)
 8015ff4:	e0bfbe17 	ldw	r2,-264(fp)
 8015ff8:	108001d0 	cmplti	r2,r2,7
 8015ffc:	103f111e 	bne	r2,zero,8015c44 <jpeg_idct_7x7+0x4a8>
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 7;		/* advance pointer to next row */
	}
}
 8016000:	e037883a 	mov	sp,fp
 8016004:	dfc00217 	ldw	ra,8(sp)
 8016008:	df000117 	ldw	fp,4(sp)
 801600c:	dc000017 	ldw	r16,0(sp)
 8016010:	dec00304 	addi	sp,sp,12
 8016014:	f800283a 	ret

08016018 <jpeg_idct_6x6>:

GLOBAL(void)
	jpeg_idct_6x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8016018:	deffc704 	addi	sp,sp,-228
 801601c:	dfc03815 	stw	ra,224(sp)
 8016020:	df003715 	stw	fp,220(sp)
 8016024:	df003704 	addi	fp,sp,220
 8016028:	e13ffc15 	stw	r4,-16(fp)
 801602c:	e17ffd15 	stw	r5,-12(fp)
 8016030:	e1bffe15 	stw	r6,-8(fp)
 8016034:	e1ffff15 	stw	r7,-4(fp)
	INT32 z1, z2, z3;
	JCOEFPTR inptr;
	ISLOW_MULT_TYPE * quantptr;
	int * wsptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8016038:	e0bffc17 	ldw	r2,-16(fp)
 801603c:	10804917 	ldw	r2,292(r2)
 8016040:	10802004 	addi	r2,r2,128
 8016044:	e0bfcd15 	stw	r2,-204(fp)
	int workspace[6*6];	/* buffers data between passes */
	SHIFT_TEMPS

		/* Pass 1: process columns from input, store into work array. */

		inptr = coef_block;
 8016048:	e0bffe17 	ldw	r2,-8(fp)
 801604c:	e0bfc915 	stw	r2,-220(fp)
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8016050:	e0bffd17 	ldw	r2,-12(fp)
 8016054:	10801517 	ldw	r2,84(r2)
 8016058:	e0bfca15 	stw	r2,-216(fp)
	wsptr = workspace;
 801605c:	e0bfd804 	addi	r2,fp,-160
 8016060:	e0bfcb15 	stw	r2,-212(fp)
	for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8016064:	e03fcc15 	stw	zero,-208(fp)
 8016068:	0000bd06 	br	8016360 <jpeg_idct_6x6+0x348>
		/* Even part */

		tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801606c:	e0bfc917 	ldw	r2,-220(fp)
 8016070:	1080000b 	ldhu	r2,0(r2)
 8016074:	10ffffcc 	andi	r3,r2,65535
 8016078:	18e0001c 	xori	r3,r3,32768
 801607c:	18e00004 	addi	r3,r3,-32768
 8016080:	e0bfca17 	ldw	r2,-216(fp)
 8016084:	10800017 	ldw	r2,0(r2)
 8016088:	1809883a 	mov	r4,r3
 801608c:	100b883a 	mov	r5,r2
 8016090:	802c2180 	call	802c218 <__mulsi3>
 8016094:	e0bfce15 	stw	r2,-200(fp)
		tmp0 <<= CONST_BITS;
 8016098:	e0bfce17 	ldw	r2,-200(fp)
 801609c:	1004937a 	slli	r2,r2,13
 80160a0:	e0bfce15 	stw	r2,-200(fp)
		/* Add fudge factor here for final descale. */
		tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 80160a4:	e0bfce17 	ldw	r2,-200(fp)
 80160a8:	10810004 	addi	r2,r2,1024
 80160ac:	e0bfce15 	stw	r2,-200(fp)
		tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80160b0:	e0bfc917 	ldw	r2,-220(fp)
 80160b4:	10801004 	addi	r2,r2,64
 80160b8:	1080000b 	ldhu	r2,0(r2)
 80160bc:	10ffffcc 	andi	r3,r2,65535
 80160c0:	18e0001c 	xori	r3,r3,32768
 80160c4:	18e00004 	addi	r3,r3,-32768
 80160c8:	e0bfca17 	ldw	r2,-216(fp)
 80160cc:	10802004 	addi	r2,r2,128
 80160d0:	10800017 	ldw	r2,0(r2)
 80160d4:	1809883a 	mov	r4,r3
 80160d8:	100b883a 	mov	r5,r2
 80160dc:	802c2180 	call	802c218 <__mulsi3>
 80160e0:	e0bfcf15 	stw	r2,-196(fp)
		tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 80160e4:	e13fcf17 	ldw	r4,-196(fp)
 80160e8:	0145a844 	movi	r5,5793
 80160ec:	802c2180 	call	802c218 <__mulsi3>
 80160f0:	e0bfd015 	stw	r2,-192(fp)
		tmp1 = tmp0 + tmp10;
 80160f4:	e0ffce17 	ldw	r3,-200(fp)
 80160f8:	e0bfd017 	ldw	r2,-192(fp)
 80160fc:	1885883a 	add	r2,r3,r2
 8016100:	e0bfd115 	stw	r2,-188(fp)
		tmp11 = RIGHT_SHIFT(tmp0 - tmp10 - tmp10, CONST_BITS-PASS1_BITS);
 8016104:	e0ffce17 	ldw	r3,-200(fp)
 8016108:	e0bfd017 	ldw	r2,-192(fp)
 801610c:	1887c83a 	sub	r3,r3,r2
 8016110:	e0bfd017 	ldw	r2,-192(fp)
 8016114:	1885c83a 	sub	r2,r3,r2
 8016118:	1005d2fa 	srai	r2,r2,11
 801611c:	e0bfd215 	stw	r2,-184(fp)
		tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8016120:	e0bfc917 	ldw	r2,-220(fp)
 8016124:	10800804 	addi	r2,r2,32
 8016128:	1080000b 	ldhu	r2,0(r2)
 801612c:	10ffffcc 	andi	r3,r2,65535
 8016130:	18e0001c 	xori	r3,r3,32768
 8016134:	18e00004 	addi	r3,r3,-32768
 8016138:	e0bfca17 	ldw	r2,-216(fp)
 801613c:	10801004 	addi	r2,r2,64
 8016140:	10800017 	ldw	r2,0(r2)
 8016144:	1809883a 	mov	r4,r3
 8016148:	100b883a 	mov	r5,r2
 801614c:	802c2180 	call	802c218 <__mulsi3>
 8016150:	e0bfd015 	stw	r2,-192(fp)
		tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8016154:	e13fd017 	ldw	r4,-192(fp)
 8016158:	0149cc44 	movi	r5,10033
 801615c:	802c2180 	call	802c218 <__mulsi3>
 8016160:	e0bfce15 	stw	r2,-200(fp)
		tmp10 = tmp1 + tmp0;
 8016164:	e0ffd117 	ldw	r3,-188(fp)
 8016168:	e0bfce17 	ldw	r2,-200(fp)
 801616c:	1885883a 	add	r2,r3,r2
 8016170:	e0bfd015 	stw	r2,-192(fp)
		tmp12 = tmp1 - tmp0;
 8016174:	e0ffd117 	ldw	r3,-188(fp)
 8016178:	e0bfce17 	ldw	r2,-200(fp)
 801617c:	1885c83a 	sub	r2,r3,r2
 8016180:	e0bfd315 	stw	r2,-180(fp)

		/* Odd part */

		z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8016184:	e0bfc917 	ldw	r2,-220(fp)
 8016188:	10800404 	addi	r2,r2,16
 801618c:	1080000b 	ldhu	r2,0(r2)
 8016190:	10ffffcc 	andi	r3,r2,65535
 8016194:	18e0001c 	xori	r3,r3,32768
 8016198:	18e00004 	addi	r3,r3,-32768
 801619c:	e0bfca17 	ldw	r2,-216(fp)
 80161a0:	10800804 	addi	r2,r2,32
 80161a4:	10800017 	ldw	r2,0(r2)
 80161a8:	1809883a 	mov	r4,r3
 80161ac:	100b883a 	mov	r5,r2
 80161b0:	802c2180 	call	802c218 <__mulsi3>
 80161b4:	e0bfd415 	stw	r2,-176(fp)
		z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80161b8:	e0bfc917 	ldw	r2,-220(fp)
 80161bc:	10800c04 	addi	r2,r2,48
 80161c0:	1080000b 	ldhu	r2,0(r2)
 80161c4:	10ffffcc 	andi	r3,r2,65535
 80161c8:	18e0001c 	xori	r3,r3,32768
 80161cc:	18e00004 	addi	r3,r3,-32768
 80161d0:	e0bfca17 	ldw	r2,-216(fp)
 80161d4:	10801804 	addi	r2,r2,96
 80161d8:	10800017 	ldw	r2,0(r2)
 80161dc:	1809883a 	mov	r4,r3
 80161e0:	100b883a 	mov	r5,r2
 80161e4:	802c2180 	call	802c218 <__mulsi3>
 80161e8:	e0bfd515 	stw	r2,-172(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80161ec:	e0bfc917 	ldw	r2,-220(fp)
 80161f0:	10801404 	addi	r2,r2,80
 80161f4:	1080000b 	ldhu	r2,0(r2)
 80161f8:	10ffffcc 	andi	r3,r2,65535
 80161fc:	18e0001c 	xori	r3,r3,32768
 8016200:	18e00004 	addi	r3,r3,-32768
 8016204:	e0bfca17 	ldw	r2,-216(fp)
 8016208:	10802804 	addi	r2,r2,160
 801620c:	10800017 	ldw	r2,0(r2)
 8016210:	1809883a 	mov	r4,r3
 8016214:	100b883a 	mov	r5,r2
 8016218:	802c2180 	call	802c218 <__mulsi3>
 801621c:	e0bfd615 	stw	r2,-168(fp)
		tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8016220:	e0ffd417 	ldw	r3,-176(fp)
 8016224:	e0bfd617 	ldw	r2,-168(fp)
 8016228:	1885883a 	add	r2,r3,r2
 801622c:	1009883a 	mov	r4,r2
 8016230:	0142ed84 	movi	r5,2998
 8016234:	802c2180 	call	802c218 <__mulsi3>
 8016238:	e0bfd115 	stw	r2,-188(fp)
		tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 801623c:	e0ffd417 	ldw	r3,-176(fp)
 8016240:	e0bfd517 	ldw	r2,-172(fp)
 8016244:	1885883a 	add	r2,r3,r2
 8016248:	1006937a 	slli	r3,r2,13
 801624c:	e0bfd117 	ldw	r2,-188(fp)
 8016250:	1885883a 	add	r2,r3,r2
 8016254:	e0bfce15 	stw	r2,-200(fp)
		tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8016258:	e0ffd617 	ldw	r3,-168(fp)
 801625c:	e0bfd517 	ldw	r2,-172(fp)
 8016260:	1885c83a 	sub	r2,r3,r2
 8016264:	1006937a 	slli	r3,r2,13
 8016268:	e0bfd117 	ldw	r2,-188(fp)
 801626c:	1885883a 	add	r2,r3,r2
 8016270:	e0bfcf15 	stw	r2,-196(fp)
		tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 8016274:	e0ffd417 	ldw	r3,-176(fp)
 8016278:	e0bfd517 	ldw	r2,-172(fp)
 801627c:	1887c83a 	sub	r3,r3,r2
 8016280:	e0bfd617 	ldw	r2,-168(fp)
 8016284:	1885c83a 	sub	r2,r3,r2
 8016288:	1085883a 	add	r2,r2,r2
 801628c:	1085883a 	add	r2,r2,r2
 8016290:	e0bfd115 	stw	r2,-188(fp)

		/* Final output stage */

		wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8016294:	e0ffd017 	ldw	r3,-192(fp)
 8016298:	e0bfce17 	ldw	r2,-200(fp)
 801629c:	1885883a 	add	r2,r3,r2
 80162a0:	1007d2fa 	srai	r3,r2,11
 80162a4:	e0bfcb17 	ldw	r2,-212(fp)
 80162a8:	10c00015 	stw	r3,0(r2)
		wsptr[6*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80162ac:	e0bfcb17 	ldw	r2,-212(fp)
 80162b0:	10801e04 	addi	r2,r2,120
 80162b4:	e13fd017 	ldw	r4,-192(fp)
 80162b8:	e0ffce17 	ldw	r3,-200(fp)
 80162bc:	20c7c83a 	sub	r3,r4,r3
 80162c0:	1807d2fa 	srai	r3,r3,11
 80162c4:	10c00015 	stw	r3,0(r2)
		wsptr[6*1] = (int) (tmp11 + tmp1);
 80162c8:	e0bfcb17 	ldw	r2,-212(fp)
 80162cc:	10800604 	addi	r2,r2,24
 80162d0:	e13fd217 	ldw	r4,-184(fp)
 80162d4:	e0ffd117 	ldw	r3,-188(fp)
 80162d8:	20c7883a 	add	r3,r4,r3
 80162dc:	10c00015 	stw	r3,0(r2)
		wsptr[6*4] = (int) (tmp11 - tmp1);
 80162e0:	e0bfcb17 	ldw	r2,-212(fp)
 80162e4:	10801804 	addi	r2,r2,96
 80162e8:	e13fd217 	ldw	r4,-184(fp)
 80162ec:	e0ffd117 	ldw	r3,-188(fp)
 80162f0:	20c7c83a 	sub	r3,r4,r3
 80162f4:	10c00015 	stw	r3,0(r2)
		wsptr[6*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 80162f8:	e0bfcb17 	ldw	r2,-212(fp)
 80162fc:	10800c04 	addi	r2,r2,48
 8016300:	e13fd317 	ldw	r4,-180(fp)
 8016304:	e0ffcf17 	ldw	r3,-196(fp)
 8016308:	20c7883a 	add	r3,r4,r3
 801630c:	1807d2fa 	srai	r3,r3,11
 8016310:	10c00015 	stw	r3,0(r2)
		wsptr[6*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8016314:	e0bfcb17 	ldw	r2,-212(fp)
 8016318:	10801204 	addi	r2,r2,72
 801631c:	e13fd317 	ldw	r4,-180(fp)
 8016320:	e0ffcf17 	ldw	r3,-196(fp)
 8016324:	20c7c83a 	sub	r3,r4,r3
 8016328:	1807d2fa 	srai	r3,r3,11
 801632c:	10c00015 	stw	r3,0(r2)
		/* Pass 1: process columns from input, store into work array. */

		inptr = coef_block;
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
	wsptr = workspace;
	for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8016330:	e0bfcc17 	ldw	r2,-208(fp)
 8016334:	10800044 	addi	r2,r2,1
 8016338:	e0bfcc15 	stw	r2,-208(fp)
 801633c:	e0bfc917 	ldw	r2,-220(fp)
 8016340:	10800084 	addi	r2,r2,2
 8016344:	e0bfc915 	stw	r2,-220(fp)
 8016348:	e0bfca17 	ldw	r2,-216(fp)
 801634c:	10800104 	addi	r2,r2,4
 8016350:	e0bfca15 	stw	r2,-216(fp)
 8016354:	e0bfcb17 	ldw	r2,-212(fp)
 8016358:	10800104 	addi	r2,r2,4
 801635c:	e0bfcb15 	stw	r2,-212(fp)
 8016360:	e0bfcc17 	ldw	r2,-208(fp)
 8016364:	10800190 	cmplti	r2,r2,6
 8016368:	103f401e 	bne	r2,zero,801606c <jpeg_idct_6x6+0x54>
		wsptr[6*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
	}

	/* Pass 2: process 6 rows from work array, store into output array. */

	wsptr = workspace;
 801636c:	e0bfd804 	addi	r2,fp,-160
 8016370:	e0bfcb15 	stw	r2,-212(fp)
	for (ctr = 0; ctr < 6; ctr++) {
 8016374:	e03fcc15 	stw	zero,-208(fp)
 8016378:	0000a106 	br	8016600 <jpeg_idct_6x6+0x5e8>
		outptr = output_buf[ctr] + output_col;
 801637c:	e0bfcc17 	ldw	r2,-208(fp)
 8016380:	1085883a 	add	r2,r2,r2
 8016384:	1085883a 	add	r2,r2,r2
 8016388:	e0ffff17 	ldw	r3,-4(fp)
 801638c:	1885883a 	add	r2,r3,r2
 8016390:	10c00017 	ldw	r3,0(r2)
 8016394:	e0800217 	ldw	r2,8(fp)
 8016398:	1885883a 	add	r2,r3,r2
 801639c:	e0bfd715 	stw	r2,-164(fp)

		/* Even part */

		/* Add fudge factor here for final descale. */
		tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80163a0:	e0bfcb17 	ldw	r2,-212(fp)
 80163a4:	10800017 	ldw	r2,0(r2)
 80163a8:	10800404 	addi	r2,r2,16
 80163ac:	e0bfce15 	stw	r2,-200(fp)
		tmp0 <<= CONST_BITS;
 80163b0:	e0bfce17 	ldw	r2,-200(fp)
 80163b4:	1004937a 	slli	r2,r2,13
 80163b8:	e0bfce15 	stw	r2,-200(fp)
		tmp2 = (INT32) wsptr[4];
 80163bc:	e0bfcb17 	ldw	r2,-212(fp)
 80163c0:	10800404 	addi	r2,r2,16
 80163c4:	10800017 	ldw	r2,0(r2)
 80163c8:	e0bfcf15 	stw	r2,-196(fp)
		tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 80163cc:	e13fcf17 	ldw	r4,-196(fp)
 80163d0:	0145a844 	movi	r5,5793
 80163d4:	802c2180 	call	802c218 <__mulsi3>
 80163d8:	e0bfd015 	stw	r2,-192(fp)
		tmp1 = tmp0 + tmp10;
 80163dc:	e0ffce17 	ldw	r3,-200(fp)
 80163e0:	e0bfd017 	ldw	r2,-192(fp)
 80163e4:	1885883a 	add	r2,r3,r2
 80163e8:	e0bfd115 	stw	r2,-188(fp)
		tmp11 = tmp0 - tmp10 - tmp10;
 80163ec:	e0ffce17 	ldw	r3,-200(fp)
 80163f0:	e0bfd017 	ldw	r2,-192(fp)
 80163f4:	1887c83a 	sub	r3,r3,r2
 80163f8:	e0bfd017 	ldw	r2,-192(fp)
 80163fc:	1885c83a 	sub	r2,r3,r2
 8016400:	e0bfd215 	stw	r2,-184(fp)
		tmp10 = (INT32) wsptr[2];
 8016404:	e0bfcb17 	ldw	r2,-212(fp)
 8016408:	10800204 	addi	r2,r2,8
 801640c:	10800017 	ldw	r2,0(r2)
 8016410:	e0bfd015 	stw	r2,-192(fp)
		tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8016414:	e13fd017 	ldw	r4,-192(fp)
 8016418:	0149cc44 	movi	r5,10033
 801641c:	802c2180 	call	802c218 <__mulsi3>
 8016420:	e0bfce15 	stw	r2,-200(fp)
		tmp10 = tmp1 + tmp0;
 8016424:	e0ffd117 	ldw	r3,-188(fp)
 8016428:	e0bfce17 	ldw	r2,-200(fp)
 801642c:	1885883a 	add	r2,r3,r2
 8016430:	e0bfd015 	stw	r2,-192(fp)
		tmp12 = tmp1 - tmp0;
 8016434:	e0ffd117 	ldw	r3,-188(fp)
 8016438:	e0bfce17 	ldw	r2,-200(fp)
 801643c:	1885c83a 	sub	r2,r3,r2
 8016440:	e0bfd315 	stw	r2,-180(fp)

		/* Odd part */

		z1 = (INT32) wsptr[1];
 8016444:	e0bfcb17 	ldw	r2,-212(fp)
 8016448:	10800104 	addi	r2,r2,4
 801644c:	10800017 	ldw	r2,0(r2)
 8016450:	e0bfd415 	stw	r2,-176(fp)
		z2 = (INT32) wsptr[3];
 8016454:	e0bfcb17 	ldw	r2,-212(fp)
 8016458:	10800304 	addi	r2,r2,12
 801645c:	10800017 	ldw	r2,0(r2)
 8016460:	e0bfd515 	stw	r2,-172(fp)
		z3 = (INT32) wsptr[5];
 8016464:	e0bfcb17 	ldw	r2,-212(fp)
 8016468:	10800504 	addi	r2,r2,20
 801646c:	10800017 	ldw	r2,0(r2)
 8016470:	e0bfd615 	stw	r2,-168(fp)
		tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8016474:	e0ffd417 	ldw	r3,-176(fp)
 8016478:	e0bfd617 	ldw	r2,-168(fp)
 801647c:	1885883a 	add	r2,r3,r2
 8016480:	1009883a 	mov	r4,r2
 8016484:	0142ed84 	movi	r5,2998
 8016488:	802c2180 	call	802c218 <__mulsi3>
 801648c:	e0bfd115 	stw	r2,-188(fp)
		tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8016490:	e0ffd417 	ldw	r3,-176(fp)
 8016494:	e0bfd517 	ldw	r2,-172(fp)
 8016498:	1885883a 	add	r2,r3,r2
 801649c:	1006937a 	slli	r3,r2,13
 80164a0:	e0bfd117 	ldw	r2,-188(fp)
 80164a4:	1885883a 	add	r2,r3,r2
 80164a8:	e0bfce15 	stw	r2,-200(fp)
		tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 80164ac:	e0ffd617 	ldw	r3,-168(fp)
 80164b0:	e0bfd517 	ldw	r2,-172(fp)
 80164b4:	1885c83a 	sub	r2,r3,r2
 80164b8:	1006937a 	slli	r3,r2,13
 80164bc:	e0bfd117 	ldw	r2,-188(fp)
 80164c0:	1885883a 	add	r2,r3,r2
 80164c4:	e0bfcf15 	stw	r2,-196(fp)
		tmp1 = (z1 - z2 - z3) << CONST_BITS;
 80164c8:	e0ffd417 	ldw	r3,-176(fp)
 80164cc:	e0bfd517 	ldw	r2,-172(fp)
 80164d0:	1887c83a 	sub	r3,r3,r2
 80164d4:	e0bfd617 	ldw	r2,-168(fp)
 80164d8:	1885c83a 	sub	r2,r3,r2
 80164dc:	1004937a 	slli	r2,r2,13
 80164e0:	e0bfd115 	stw	r2,-188(fp)

		/* Final output stage */

		outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80164e4:	e0ffd017 	ldw	r3,-192(fp)
 80164e8:	e0bfce17 	ldw	r2,-200(fp)
 80164ec:	1885883a 	add	r2,r3,r2
 80164f0:	1005d4ba 	srai	r2,r2,18
 80164f4:	1080ffcc 	andi	r2,r2,1023
 80164f8:	e0ffcd17 	ldw	r3,-204(fp)
 80164fc:	1885883a 	add	r2,r3,r2
 8016500:	10c00003 	ldbu	r3,0(r2)
 8016504:	e0bfd717 	ldw	r2,-164(fp)
 8016508:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801650c:	e0bfd717 	ldw	r2,-164(fp)
 8016510:	10800144 	addi	r2,r2,5
 8016514:	e13fd017 	ldw	r4,-192(fp)
 8016518:	e0ffce17 	ldw	r3,-200(fp)
 801651c:	20c7c83a 	sub	r3,r4,r3
 8016520:	1807d4ba 	srai	r3,r3,18
 8016524:	18c0ffcc 	andi	r3,r3,1023
 8016528:	e13fcd17 	ldw	r4,-204(fp)
 801652c:	20c7883a 	add	r3,r4,r3
 8016530:	18c00003 	ldbu	r3,0(r3)
 8016534:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8016538:	e0bfd717 	ldw	r2,-164(fp)
 801653c:	10800044 	addi	r2,r2,1
 8016540:	e13fd217 	ldw	r4,-184(fp)
 8016544:	e0ffd117 	ldw	r3,-188(fp)
 8016548:	20c7883a 	add	r3,r4,r3
 801654c:	1807d4ba 	srai	r3,r3,18
 8016550:	18c0ffcc 	andi	r3,r3,1023
 8016554:	e13fcd17 	ldw	r4,-204(fp)
 8016558:	20c7883a 	add	r3,r4,r3
 801655c:	18c00003 	ldbu	r3,0(r3)
 8016560:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8016564:	e0bfd717 	ldw	r2,-164(fp)
 8016568:	10800104 	addi	r2,r2,4
 801656c:	e13fd217 	ldw	r4,-184(fp)
 8016570:	e0ffd117 	ldw	r3,-188(fp)
 8016574:	20c7c83a 	sub	r3,r4,r3
 8016578:	1807d4ba 	srai	r3,r3,18
 801657c:	18c0ffcc 	andi	r3,r3,1023
 8016580:	e13fcd17 	ldw	r4,-204(fp)
 8016584:	20c7883a 	add	r3,r4,r3
 8016588:	18c00003 	ldbu	r3,0(r3)
 801658c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8016590:	e0bfd717 	ldw	r2,-164(fp)
 8016594:	10800084 	addi	r2,r2,2
 8016598:	e13fd317 	ldw	r4,-180(fp)
 801659c:	e0ffcf17 	ldw	r3,-196(fp)
 80165a0:	20c7883a 	add	r3,r4,r3
 80165a4:	1807d4ba 	srai	r3,r3,18
 80165a8:	18c0ffcc 	andi	r3,r3,1023
 80165ac:	e13fcd17 	ldw	r4,-204(fp)
 80165b0:	20c7883a 	add	r3,r4,r3
 80165b4:	18c00003 	ldbu	r3,0(r3)
 80165b8:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80165bc:	e0bfd717 	ldw	r2,-164(fp)
 80165c0:	108000c4 	addi	r2,r2,3
 80165c4:	e13fd317 	ldw	r4,-180(fp)
 80165c8:	e0ffcf17 	ldw	r3,-196(fp)
 80165cc:	20c7c83a 	sub	r3,r4,r3
 80165d0:	1807d4ba 	srai	r3,r3,18
 80165d4:	18c0ffcc 	andi	r3,r3,1023
 80165d8:	e13fcd17 	ldw	r4,-204(fp)
 80165dc:	20c7883a 	add	r3,r4,r3
 80165e0:	18c00003 	ldbu	r3,0(r3)
 80165e4:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 6;		/* advance pointer to next row */
 80165e8:	e0bfcb17 	ldw	r2,-212(fp)
 80165ec:	10800604 	addi	r2,r2,24
 80165f0:	e0bfcb15 	stw	r2,-212(fp)
	}

	/* Pass 2: process 6 rows from work array, store into output array. */

	wsptr = workspace;
	for (ctr = 0; ctr < 6; ctr++) {
 80165f4:	e0bfcc17 	ldw	r2,-208(fp)
 80165f8:	10800044 	addi	r2,r2,1
 80165fc:	e0bfcc15 	stw	r2,-208(fp)
 8016600:	e0bfcc17 	ldw	r2,-208(fp)
 8016604:	10800190 	cmplti	r2,r2,6
 8016608:	103f5c1e 	bne	r2,zero,801637c <jpeg_idct_6x6+0x364>
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 6;		/* advance pointer to next row */
	}
}
 801660c:	e037883a 	mov	sp,fp
 8016610:	dfc00117 	ldw	ra,4(sp)
 8016614:	df000017 	ldw	fp,0(sp)
 8016618:	dec00204 	addi	sp,sp,8
 801661c:	f800283a 	ret

08016620 <jpeg_idct_5x5>:

GLOBAL(void)
	jpeg_idct_5x5 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8016620:	deffd304 	addi	sp,sp,-180
 8016624:	dfc02c15 	stw	ra,176(sp)
 8016628:	df002b15 	stw	fp,172(sp)
 801662c:	df002b04 	addi	fp,sp,172
 8016630:	e13ffc15 	stw	r4,-16(fp)
 8016634:	e17ffd15 	stw	r5,-12(fp)
 8016638:	e1bffe15 	stw	r6,-8(fp)
 801663c:	e1ffff15 	stw	r7,-4(fp)
	INT32 z1, z2, z3;
	JCOEFPTR inptr;
	ISLOW_MULT_TYPE * quantptr;
	int * wsptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8016640:	e0bffc17 	ldw	r2,-16(fp)
 8016644:	10804917 	ldw	r2,292(r2)
 8016648:	10802004 	addi	r2,r2,128
 801664c:	e0bfd915 	stw	r2,-156(fp)
	int workspace[5*5];	/* buffers data between passes */
	SHIFT_TEMPS

		/* Pass 1: process columns from input, store into work array. */

		inptr = coef_block;
 8016650:	e0bffe17 	ldw	r2,-8(fp)
 8016654:	e0bfd515 	stw	r2,-172(fp)
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8016658:	e0bffd17 	ldw	r2,-12(fp)
 801665c:	10801517 	ldw	r2,84(r2)
 8016660:	e0bfd615 	stw	r2,-168(fp)
	wsptr = workspace;
 8016664:	e0bfe304 	addi	r2,fp,-116
 8016668:	e0bfd715 	stw	r2,-164(fp)
	for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 801666c:	e03fd815 	stw	zero,-160(fp)
 8016670:	0000a606 	br	801690c <jpeg_idct_5x5+0x2ec>
		/* Even part */

		tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8016674:	e0bfd517 	ldw	r2,-172(fp)
 8016678:	1080000b 	ldhu	r2,0(r2)
 801667c:	10ffffcc 	andi	r3,r2,65535
 8016680:	18e0001c 	xori	r3,r3,32768
 8016684:	18e00004 	addi	r3,r3,-32768
 8016688:	e0bfd617 	ldw	r2,-168(fp)
 801668c:	10800017 	ldw	r2,0(r2)
 8016690:	1809883a 	mov	r4,r3
 8016694:	100b883a 	mov	r5,r2
 8016698:	802c2180 	call	802c218 <__mulsi3>
 801669c:	e0bfda15 	stw	r2,-152(fp)
		tmp12 <<= CONST_BITS;
 80166a0:	e0bfda17 	ldw	r2,-152(fp)
 80166a4:	1004937a 	slli	r2,r2,13
 80166a8:	e0bfda15 	stw	r2,-152(fp)
		/* Add fudge factor here for final descale. */
		tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
 80166ac:	e0bfda17 	ldw	r2,-152(fp)
 80166b0:	10810004 	addi	r2,r2,1024
 80166b4:	e0bfda15 	stw	r2,-152(fp)
		tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80166b8:	e0bfd517 	ldw	r2,-172(fp)
 80166bc:	10800804 	addi	r2,r2,32
 80166c0:	1080000b 	ldhu	r2,0(r2)
 80166c4:	10ffffcc 	andi	r3,r2,65535
 80166c8:	18e0001c 	xori	r3,r3,32768
 80166cc:	18e00004 	addi	r3,r3,-32768
 80166d0:	e0bfd617 	ldw	r2,-168(fp)
 80166d4:	10801004 	addi	r2,r2,64
 80166d8:	10800017 	ldw	r2,0(r2)
 80166dc:	1809883a 	mov	r4,r3
 80166e0:	100b883a 	mov	r5,r2
 80166e4:	802c2180 	call	802c218 <__mulsi3>
 80166e8:	e0bfdb15 	stw	r2,-148(fp)
		tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80166ec:	e0bfd517 	ldw	r2,-172(fp)
 80166f0:	10801004 	addi	r2,r2,64
 80166f4:	1080000b 	ldhu	r2,0(r2)
 80166f8:	10ffffcc 	andi	r3,r2,65535
 80166fc:	18e0001c 	xori	r3,r3,32768
 8016700:	18e00004 	addi	r3,r3,-32768
 8016704:	e0bfd617 	ldw	r2,-168(fp)
 8016708:	10802004 	addi	r2,r2,128
 801670c:	10800017 	ldw	r2,0(r2)
 8016710:	1809883a 	mov	r4,r3
 8016714:	100b883a 	mov	r5,r2
 8016718:	802c2180 	call	802c218 <__mulsi3>
 801671c:	e0bfdc15 	stw	r2,-144(fp)
		z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 8016720:	e0ffdb17 	ldw	r3,-148(fp)
 8016724:	e0bfdc17 	ldw	r2,-144(fp)
 8016728:	1885883a 	add	r2,r3,r2
 801672c:	1009883a 	mov	r4,r2
 8016730:	01465304 	movi	r5,6476
 8016734:	802c2180 	call	802c218 <__mulsi3>
 8016738:	e0bfdd15 	stw	r2,-140(fp)
		z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 801673c:	e0ffdb17 	ldw	r3,-148(fp)
 8016740:	e0bfdc17 	ldw	r2,-144(fp)
 8016744:	1885c83a 	sub	r2,r3,r2
 8016748:	1009883a 	mov	r4,r2
 801674c:	0142d404 	movi	r5,2896
 8016750:	802c2180 	call	802c218 <__mulsi3>
 8016754:	e0bfde15 	stw	r2,-136(fp)
		z3 = tmp12 + z2;
 8016758:	e0ffda17 	ldw	r3,-152(fp)
 801675c:	e0bfde17 	ldw	r2,-136(fp)
 8016760:	1885883a 	add	r2,r3,r2
 8016764:	e0bfdf15 	stw	r2,-132(fp)
		tmp10 = z3 + z1;
 8016768:	e0ffdf17 	ldw	r3,-132(fp)
 801676c:	e0bfdd17 	ldw	r2,-140(fp)
 8016770:	1885883a 	add	r2,r3,r2
 8016774:	e0bfe015 	stw	r2,-128(fp)
		tmp11 = z3 - z1;
 8016778:	e0ffdf17 	ldw	r3,-132(fp)
 801677c:	e0bfdd17 	ldw	r2,-140(fp)
 8016780:	1885c83a 	sub	r2,r3,r2
 8016784:	e0bfe115 	stw	r2,-124(fp)
		tmp12 -= z2 << 2;
 8016788:	e0bfde17 	ldw	r2,-136(fp)
 801678c:	1085883a 	add	r2,r2,r2
 8016790:	1085883a 	add	r2,r2,r2
 8016794:	e0ffda17 	ldw	r3,-152(fp)
 8016798:	1885c83a 	sub	r2,r3,r2
 801679c:	e0bfda15 	stw	r2,-152(fp)

		/* Odd part */

		z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80167a0:	e0bfd517 	ldw	r2,-172(fp)
 80167a4:	10800404 	addi	r2,r2,16
 80167a8:	1080000b 	ldhu	r2,0(r2)
 80167ac:	10ffffcc 	andi	r3,r2,65535
 80167b0:	18e0001c 	xori	r3,r3,32768
 80167b4:	18e00004 	addi	r3,r3,-32768
 80167b8:	e0bfd617 	ldw	r2,-168(fp)
 80167bc:	10800804 	addi	r2,r2,32
 80167c0:	10800017 	ldw	r2,0(r2)
 80167c4:	1809883a 	mov	r4,r3
 80167c8:	100b883a 	mov	r5,r2
 80167cc:	802c2180 	call	802c218 <__mulsi3>
 80167d0:	e0bfde15 	stw	r2,-136(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80167d4:	e0bfd517 	ldw	r2,-172(fp)
 80167d8:	10800c04 	addi	r2,r2,48
 80167dc:	1080000b 	ldhu	r2,0(r2)
 80167e0:	10ffffcc 	andi	r3,r2,65535
 80167e4:	18e0001c 	xori	r3,r3,32768
 80167e8:	18e00004 	addi	r3,r3,-32768
 80167ec:	e0bfd617 	ldw	r2,-168(fp)
 80167f0:	10801804 	addi	r2,r2,96
 80167f4:	10800017 	ldw	r2,0(r2)
 80167f8:	1809883a 	mov	r4,r3
 80167fc:	100b883a 	mov	r5,r2
 8016800:	802c2180 	call	802c218 <__mulsi3>
 8016804:	e0bfdf15 	stw	r2,-132(fp)

		z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 8016808:	e0ffde17 	ldw	r3,-136(fp)
 801680c:	e0bfdf17 	ldw	r2,-132(fp)
 8016810:	1885883a 	add	r2,r3,r2
 8016814:	1009883a 	mov	r4,r2
 8016818:	0146a684 	movi	r5,6810
 801681c:	802c2180 	call	802c218 <__mulsi3>
 8016820:	e0bfdd15 	stw	r2,-140(fp)
		tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 8016824:	e13fde17 	ldw	r4,-136(fp)
 8016828:	01441c44 	movi	r5,4209
 801682c:	802c2180 	call	802c218 <__mulsi3>
 8016830:	1007883a 	mov	r3,r2
 8016834:	e0bfdd17 	ldw	r2,-140(fp)
 8016838:	1885883a 	add	r2,r3,r2
 801683c:	e0bfdb15 	stw	r2,-148(fp)
		tmp1 = z1 - MULTIPLY(z3, FIX(2.176250899));   /* c1+c3 */
 8016840:	e13fdf17 	ldw	r4,-132(fp)
 8016844:	016e9704 	movi	r5,-17828
 8016848:	802c2180 	call	802c218 <__mulsi3>
 801684c:	1007883a 	mov	r3,r2
 8016850:	e0bfdd17 	ldw	r2,-140(fp)
 8016854:	1885883a 	add	r2,r3,r2
 8016858:	e0bfdc15 	stw	r2,-144(fp)

		/* Final output stage */

		wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 801685c:	e0ffe017 	ldw	r3,-128(fp)
 8016860:	e0bfdb17 	ldw	r2,-148(fp)
 8016864:	1885883a 	add	r2,r3,r2
 8016868:	1007d2fa 	srai	r3,r2,11
 801686c:	e0bfd717 	ldw	r2,-164(fp)
 8016870:	10c00015 	stw	r3,0(r2)
		wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8016874:	e0bfd717 	ldw	r2,-164(fp)
 8016878:	10801404 	addi	r2,r2,80
 801687c:	e13fe017 	ldw	r4,-128(fp)
 8016880:	e0ffdb17 	ldw	r3,-148(fp)
 8016884:	20c7c83a 	sub	r3,r4,r3
 8016888:	1807d2fa 	srai	r3,r3,11
 801688c:	10c00015 	stw	r3,0(r2)
		wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8016890:	e0bfd717 	ldw	r2,-164(fp)
 8016894:	10800504 	addi	r2,r2,20
 8016898:	e13fe117 	ldw	r4,-124(fp)
 801689c:	e0ffdc17 	ldw	r3,-144(fp)
 80168a0:	20c7883a 	add	r3,r4,r3
 80168a4:	1807d2fa 	srai	r3,r3,11
 80168a8:	10c00015 	stw	r3,0(r2)
		wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 80168ac:	e0bfd717 	ldw	r2,-164(fp)
 80168b0:	10800f04 	addi	r2,r2,60
 80168b4:	e13fe117 	ldw	r4,-124(fp)
 80168b8:	e0ffdc17 	ldw	r3,-144(fp)
 80168bc:	20c7c83a 	sub	r3,r4,r3
 80168c0:	1807d2fa 	srai	r3,r3,11
 80168c4:	10c00015 	stw	r3,0(r2)
		wsptr[5*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 80168c8:	e0bfd717 	ldw	r2,-164(fp)
 80168cc:	10800a04 	addi	r2,r2,40
 80168d0:	e0ffda17 	ldw	r3,-152(fp)
 80168d4:	1807d2fa 	srai	r3,r3,11
 80168d8:	10c00015 	stw	r3,0(r2)
		/* Pass 1: process columns from input, store into work array. */

		inptr = coef_block;
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
	wsptr = workspace;
	for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 80168dc:	e0bfd817 	ldw	r2,-160(fp)
 80168e0:	10800044 	addi	r2,r2,1
 80168e4:	e0bfd815 	stw	r2,-160(fp)
 80168e8:	e0bfd517 	ldw	r2,-172(fp)
 80168ec:	10800084 	addi	r2,r2,2
 80168f0:	e0bfd515 	stw	r2,-172(fp)
 80168f4:	e0bfd617 	ldw	r2,-168(fp)
 80168f8:	10800104 	addi	r2,r2,4
 80168fc:	e0bfd615 	stw	r2,-168(fp)
 8016900:	e0bfd717 	ldw	r2,-164(fp)
 8016904:	10800104 	addi	r2,r2,4
 8016908:	e0bfd715 	stw	r2,-164(fp)
 801690c:	e0bfd817 	ldw	r2,-160(fp)
 8016910:	10800150 	cmplti	r2,r2,5
 8016914:	103f571e 	bne	r2,zero,8016674 <jpeg_idct_5x5+0x54>
		wsptr[5*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
	}

	/* Pass 2: process 5 rows from work array, store into output array. */

	wsptr = workspace;
 8016918:	e0bfe304 	addi	r2,fp,-116
 801691c:	e0bfd715 	stw	r2,-164(fp)
	for (ctr = 0; ctr < 5; ctr++) {
 8016920:	e03fd815 	stw	zero,-160(fp)
 8016924:	00008f06 	br	8016b64 <jpeg_idct_5x5+0x544>
		outptr = output_buf[ctr] + output_col;
 8016928:	e0bfd817 	ldw	r2,-160(fp)
 801692c:	1085883a 	add	r2,r2,r2
 8016930:	1085883a 	add	r2,r2,r2
 8016934:	e0ffff17 	ldw	r3,-4(fp)
 8016938:	1885883a 	add	r2,r3,r2
 801693c:	10c00017 	ldw	r3,0(r2)
 8016940:	e0800217 	ldw	r2,8(fp)
 8016944:	1885883a 	add	r2,r3,r2
 8016948:	e0bfe215 	stw	r2,-120(fp)

		/* Even part */

		/* Add fudge factor here for final descale. */
		tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801694c:	e0bfd717 	ldw	r2,-164(fp)
 8016950:	10800017 	ldw	r2,0(r2)
 8016954:	10800404 	addi	r2,r2,16
 8016958:	e0bfda15 	stw	r2,-152(fp)
		tmp12 <<= CONST_BITS;
 801695c:	e0bfda17 	ldw	r2,-152(fp)
 8016960:	1004937a 	slli	r2,r2,13
 8016964:	e0bfda15 	stw	r2,-152(fp)
		tmp0 = (INT32) wsptr[2];
 8016968:	e0bfd717 	ldw	r2,-164(fp)
 801696c:	10800204 	addi	r2,r2,8
 8016970:	10800017 	ldw	r2,0(r2)
 8016974:	e0bfdb15 	stw	r2,-148(fp)
		tmp1 = (INT32) wsptr[4];
 8016978:	e0bfd717 	ldw	r2,-164(fp)
 801697c:	10800404 	addi	r2,r2,16
 8016980:	10800017 	ldw	r2,0(r2)
 8016984:	e0bfdc15 	stw	r2,-144(fp)
		z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 8016988:	e0ffdb17 	ldw	r3,-148(fp)
 801698c:	e0bfdc17 	ldw	r2,-144(fp)
 8016990:	1885883a 	add	r2,r3,r2
 8016994:	1009883a 	mov	r4,r2
 8016998:	01465304 	movi	r5,6476
 801699c:	802c2180 	call	802c218 <__mulsi3>
 80169a0:	e0bfdd15 	stw	r2,-140(fp)
		z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 80169a4:	e0ffdb17 	ldw	r3,-148(fp)
 80169a8:	e0bfdc17 	ldw	r2,-144(fp)
 80169ac:	1885c83a 	sub	r2,r3,r2
 80169b0:	1009883a 	mov	r4,r2
 80169b4:	0142d404 	movi	r5,2896
 80169b8:	802c2180 	call	802c218 <__mulsi3>
 80169bc:	e0bfde15 	stw	r2,-136(fp)
		z3 = tmp12 + z2;
 80169c0:	e0ffda17 	ldw	r3,-152(fp)
 80169c4:	e0bfde17 	ldw	r2,-136(fp)
 80169c8:	1885883a 	add	r2,r3,r2
 80169cc:	e0bfdf15 	stw	r2,-132(fp)
		tmp10 = z3 + z1;
 80169d0:	e0ffdf17 	ldw	r3,-132(fp)
 80169d4:	e0bfdd17 	ldw	r2,-140(fp)
 80169d8:	1885883a 	add	r2,r3,r2
 80169dc:	e0bfe015 	stw	r2,-128(fp)
		tmp11 = z3 - z1;
 80169e0:	e0ffdf17 	ldw	r3,-132(fp)
 80169e4:	e0bfdd17 	ldw	r2,-140(fp)
 80169e8:	1885c83a 	sub	r2,r3,r2
 80169ec:	e0bfe115 	stw	r2,-124(fp)
		tmp12 -= z2 << 2;
 80169f0:	e0bfde17 	ldw	r2,-136(fp)
 80169f4:	1085883a 	add	r2,r2,r2
 80169f8:	1085883a 	add	r2,r2,r2
 80169fc:	e0ffda17 	ldw	r3,-152(fp)
 8016a00:	1885c83a 	sub	r2,r3,r2
 8016a04:	e0bfda15 	stw	r2,-152(fp)

		/* Odd part */

		z2 = (INT32) wsptr[1];
 8016a08:	e0bfd717 	ldw	r2,-164(fp)
 8016a0c:	10800104 	addi	r2,r2,4
 8016a10:	10800017 	ldw	r2,0(r2)
 8016a14:	e0bfde15 	stw	r2,-136(fp)
		z3 = (INT32) wsptr[3];
 8016a18:	e0bfd717 	ldw	r2,-164(fp)
 8016a1c:	10800304 	addi	r2,r2,12
 8016a20:	10800017 	ldw	r2,0(r2)
 8016a24:	e0bfdf15 	stw	r2,-132(fp)

		z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 8016a28:	e0ffde17 	ldw	r3,-136(fp)
 8016a2c:	e0bfdf17 	ldw	r2,-132(fp)
 8016a30:	1885883a 	add	r2,r3,r2
 8016a34:	1009883a 	mov	r4,r2
 8016a38:	0146a684 	movi	r5,6810
 8016a3c:	802c2180 	call	802c218 <__mulsi3>
 8016a40:	e0bfdd15 	stw	r2,-140(fp)
		tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 8016a44:	e13fde17 	ldw	r4,-136(fp)
 8016a48:	01441c44 	movi	r5,4209
 8016a4c:	802c2180 	call	802c218 <__mulsi3>
 8016a50:	1007883a 	mov	r3,r2
 8016a54:	e0bfdd17 	ldw	r2,-140(fp)
 8016a58:	1885883a 	add	r2,r3,r2
 8016a5c:	e0bfdb15 	stw	r2,-148(fp)
		tmp1 = z1 - MULTIPLY(z3, FIX(2.176250899));   /* c1+c3 */
 8016a60:	e13fdf17 	ldw	r4,-132(fp)
 8016a64:	016e9704 	movi	r5,-17828
 8016a68:	802c2180 	call	802c218 <__mulsi3>
 8016a6c:	1007883a 	mov	r3,r2
 8016a70:	e0bfdd17 	ldw	r2,-140(fp)
 8016a74:	1885883a 	add	r2,r3,r2
 8016a78:	e0bfdc15 	stw	r2,-144(fp)

		/* Final output stage */

		outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8016a7c:	e0ffe017 	ldw	r3,-128(fp)
 8016a80:	e0bfdb17 	ldw	r2,-148(fp)
 8016a84:	1885883a 	add	r2,r3,r2
 8016a88:	1005d4ba 	srai	r2,r2,18
 8016a8c:	1080ffcc 	andi	r2,r2,1023
 8016a90:	e0ffd917 	ldw	r3,-156(fp)
 8016a94:	1885883a 	add	r2,r3,r2
 8016a98:	10c00003 	ldbu	r3,0(r2)
 8016a9c:	e0bfe217 	ldw	r2,-120(fp)
 8016aa0:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8016aa4:	e0bfe217 	ldw	r2,-120(fp)
 8016aa8:	10800104 	addi	r2,r2,4
 8016aac:	e13fe017 	ldw	r4,-128(fp)
 8016ab0:	e0ffdb17 	ldw	r3,-148(fp)
 8016ab4:	20c7c83a 	sub	r3,r4,r3
 8016ab8:	1807d4ba 	srai	r3,r3,18
 8016abc:	18c0ffcc 	andi	r3,r3,1023
 8016ac0:	e13fd917 	ldw	r4,-156(fp)
 8016ac4:	20c7883a 	add	r3,r4,r3
 8016ac8:	18c00003 	ldbu	r3,0(r3)
 8016acc:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8016ad0:	e0bfe217 	ldw	r2,-120(fp)
 8016ad4:	10800044 	addi	r2,r2,1
 8016ad8:	e13fe117 	ldw	r4,-124(fp)
 8016adc:	e0ffdc17 	ldw	r3,-144(fp)
 8016ae0:	20c7883a 	add	r3,r4,r3
 8016ae4:	1807d4ba 	srai	r3,r3,18
 8016ae8:	18c0ffcc 	andi	r3,r3,1023
 8016aec:	e13fd917 	ldw	r4,-156(fp)
 8016af0:	20c7883a 	add	r3,r4,r3
 8016af4:	18c00003 	ldbu	r3,0(r3)
 8016af8:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8016afc:	e0bfe217 	ldw	r2,-120(fp)
 8016b00:	108000c4 	addi	r2,r2,3
 8016b04:	e13fe117 	ldw	r4,-124(fp)
 8016b08:	e0ffdc17 	ldw	r3,-144(fp)
 8016b0c:	20c7c83a 	sub	r3,r4,r3
 8016b10:	1807d4ba 	srai	r3,r3,18
 8016b14:	18c0ffcc 	andi	r3,r3,1023
 8016b18:	e13fd917 	ldw	r4,-156(fp)
 8016b1c:	20c7883a 	add	r3,r4,r3
 8016b20:	18c00003 	ldbu	r3,0(r3)
 8016b24:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 8016b28:	e0bfe217 	ldw	r2,-120(fp)
 8016b2c:	10800084 	addi	r2,r2,2
 8016b30:	e0ffda17 	ldw	r3,-152(fp)
 8016b34:	1807d4ba 	srai	r3,r3,18
 8016b38:	18c0ffcc 	andi	r3,r3,1023
 8016b3c:	e13fd917 	ldw	r4,-156(fp)
 8016b40:	20c7883a 	add	r3,r4,r3
 8016b44:	18c00003 	ldbu	r3,0(r3)
 8016b48:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 5;		/* advance pointer to next row */
 8016b4c:	e0bfd717 	ldw	r2,-164(fp)
 8016b50:	10800504 	addi	r2,r2,20
 8016b54:	e0bfd715 	stw	r2,-164(fp)
	}

	/* Pass 2: process 5 rows from work array, store into output array. */

	wsptr = workspace;
	for (ctr = 0; ctr < 5; ctr++) {
 8016b58:	e0bfd817 	ldw	r2,-160(fp)
 8016b5c:	10800044 	addi	r2,r2,1
 8016b60:	e0bfd815 	stw	r2,-160(fp)
 8016b64:	e0bfd817 	ldw	r2,-160(fp)
 8016b68:	10800150 	cmplti	r2,r2,5
 8016b6c:	103f6e1e 	bne	r2,zero,8016928 <jpeg_idct_5x5+0x308>
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 5;		/* advance pointer to next row */
	}
}
 8016b70:	e037883a 	mov	sp,fp
 8016b74:	dfc00117 	ldw	ra,4(sp)
 8016b78:	df000017 	ldw	fp,0(sp)
 8016b7c:	dec00204 	addi	sp,sp,8
 8016b80:	f800283a 	ret

08016b84 <jpeg_idct_4x4>:

GLOBAL(void)
	jpeg_idct_4x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8016b84:	deffdd04 	addi	sp,sp,-140
 8016b88:	dfc02215 	stw	ra,136(sp)
 8016b8c:	df002115 	stw	fp,132(sp)
 8016b90:	df002104 	addi	fp,sp,132
 8016b94:	e13ffc15 	stw	r4,-16(fp)
 8016b98:	e17ffd15 	stw	r5,-12(fp)
 8016b9c:	e1bffe15 	stw	r6,-8(fp)
 8016ba0:	e1ffff15 	stw	r7,-4(fp)
	INT32 z1, z2, z3;
	JCOEFPTR inptr;
	ISLOW_MULT_TYPE * quantptr;
	int * wsptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8016ba4:	e0bffc17 	ldw	r2,-16(fp)
 8016ba8:	10804917 	ldw	r2,292(r2)
 8016bac:	10802004 	addi	r2,r2,128
 8016bb0:	e0bfe315 	stw	r2,-116(fp)
	int workspace[4*4];	/* buffers data between passes */
	SHIFT_TEMPS

		/* Pass 1: process columns from input, store into work array. */

		inptr = coef_block;
 8016bb4:	e0bffe17 	ldw	r2,-8(fp)
 8016bb8:	e0bfdf15 	stw	r2,-132(fp)
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8016bbc:	e0bffd17 	ldw	r2,-12(fp)
 8016bc0:	10801517 	ldw	r2,84(r2)
 8016bc4:	e0bfe015 	stw	r2,-128(fp)
	wsptr = workspace;
 8016bc8:	e0bfec04 	addi	r2,fp,-80
 8016bcc:	e0bfe115 	stw	r2,-124(fp)
	for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8016bd0:	e03fe215 	stw	zero,-120(fp)
 8016bd4:	00007b06 	br	8016dc4 <jpeg_idct_4x4+0x240>
		/* Even part */

		tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8016bd8:	e0bfdf17 	ldw	r2,-132(fp)
 8016bdc:	1080000b 	ldhu	r2,0(r2)
 8016be0:	10ffffcc 	andi	r3,r2,65535
 8016be4:	18e0001c 	xori	r3,r3,32768
 8016be8:	18e00004 	addi	r3,r3,-32768
 8016bec:	e0bfe017 	ldw	r2,-128(fp)
 8016bf0:	10800017 	ldw	r2,0(r2)
 8016bf4:	1809883a 	mov	r4,r3
 8016bf8:	100b883a 	mov	r5,r2
 8016bfc:	802c2180 	call	802c218 <__mulsi3>
 8016c00:	e0bfe415 	stw	r2,-112(fp)
		tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8016c04:	e0bfdf17 	ldw	r2,-132(fp)
 8016c08:	10800804 	addi	r2,r2,32
 8016c0c:	1080000b 	ldhu	r2,0(r2)
 8016c10:	10ffffcc 	andi	r3,r2,65535
 8016c14:	18e0001c 	xori	r3,r3,32768
 8016c18:	18e00004 	addi	r3,r3,-32768
 8016c1c:	e0bfe017 	ldw	r2,-128(fp)
 8016c20:	10801004 	addi	r2,r2,64
 8016c24:	10800017 	ldw	r2,0(r2)
 8016c28:	1809883a 	mov	r4,r3
 8016c2c:	100b883a 	mov	r5,r2
 8016c30:	802c2180 	call	802c218 <__mulsi3>
 8016c34:	e0bfe515 	stw	r2,-108(fp)

		tmp10 = (tmp0 + tmp2) << PASS1_BITS;
 8016c38:	e0ffe417 	ldw	r3,-112(fp)
 8016c3c:	e0bfe517 	ldw	r2,-108(fp)
 8016c40:	1885883a 	add	r2,r3,r2
 8016c44:	1085883a 	add	r2,r2,r2
 8016c48:	1085883a 	add	r2,r2,r2
 8016c4c:	e0bfe615 	stw	r2,-104(fp)
		tmp12 = (tmp0 - tmp2) << PASS1_BITS;
 8016c50:	e0ffe417 	ldw	r3,-112(fp)
 8016c54:	e0bfe517 	ldw	r2,-108(fp)
 8016c58:	1885c83a 	sub	r2,r3,r2
 8016c5c:	1085883a 	add	r2,r2,r2
 8016c60:	1085883a 	add	r2,r2,r2
 8016c64:	e0bfe715 	stw	r2,-100(fp)

		/* Odd part */
		/* Same rotation as in the even part of the 8x8 LL&M IDCT */

		z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8016c68:	e0bfdf17 	ldw	r2,-132(fp)
 8016c6c:	10800404 	addi	r2,r2,16
 8016c70:	1080000b 	ldhu	r2,0(r2)
 8016c74:	10ffffcc 	andi	r3,r2,65535
 8016c78:	18e0001c 	xori	r3,r3,32768
 8016c7c:	18e00004 	addi	r3,r3,-32768
 8016c80:	e0bfe017 	ldw	r2,-128(fp)
 8016c84:	10800804 	addi	r2,r2,32
 8016c88:	10800017 	ldw	r2,0(r2)
 8016c8c:	1809883a 	mov	r4,r3
 8016c90:	100b883a 	mov	r5,r2
 8016c94:	802c2180 	call	802c218 <__mulsi3>
 8016c98:	e0bfe815 	stw	r2,-96(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8016c9c:	e0bfdf17 	ldw	r2,-132(fp)
 8016ca0:	10800c04 	addi	r2,r2,48
 8016ca4:	1080000b 	ldhu	r2,0(r2)
 8016ca8:	10ffffcc 	andi	r3,r2,65535
 8016cac:	18e0001c 	xori	r3,r3,32768
 8016cb0:	18e00004 	addi	r3,r3,-32768
 8016cb4:	e0bfe017 	ldw	r2,-128(fp)
 8016cb8:	10801804 	addi	r2,r2,96
 8016cbc:	10800017 	ldw	r2,0(r2)
 8016cc0:	1809883a 	mov	r4,r3
 8016cc4:	100b883a 	mov	r5,r2
 8016cc8:	802c2180 	call	802c218 <__mulsi3>
 8016ccc:	e0bfe915 	stw	r2,-92(fp)

		z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 8016cd0:	e0ffe817 	ldw	r3,-96(fp)
 8016cd4:	e0bfe917 	ldw	r2,-92(fp)
 8016cd8:	1885883a 	add	r2,r3,r2
 8016cdc:	1009883a 	mov	r4,r2
 8016ce0:	01445444 	movi	r5,4433
 8016ce4:	802c2180 	call	802c218 <__mulsi3>
 8016ce8:	e0bfea15 	stw	r2,-88(fp)
		/* Add fudge factor here for final descale. */
		z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8016cec:	e0bfea17 	ldw	r2,-88(fp)
 8016cf0:	10810004 	addi	r2,r2,1024
 8016cf4:	e0bfea15 	stw	r2,-88(fp)
		tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 8016cf8:	e13fe817 	ldw	r4,-96(fp)
 8016cfc:	01461f84 	movi	r5,6270
 8016d00:	802c2180 	call	802c218 <__mulsi3>
 8016d04:	1007883a 	mov	r3,r2
 8016d08:	e0bfea17 	ldw	r2,-88(fp)
 8016d0c:	1885883a 	add	r2,r3,r2
 8016d10:	1005d2fa 	srai	r2,r2,11
 8016d14:	e0bfe415 	stw	r2,-112(fp)
			CONST_BITS-PASS1_BITS);
		tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 8016d18:	e13fe917 	ldw	r4,-92(fp)
 8016d1c:	017137c4 	movi	r5,-15137
 8016d20:	802c2180 	call	802c218 <__mulsi3>
 8016d24:	1007883a 	mov	r3,r2
 8016d28:	e0bfea17 	ldw	r2,-88(fp)
 8016d2c:	1885883a 	add	r2,r3,r2
 8016d30:	1005d2fa 	srai	r2,r2,11
 8016d34:	e0bfe515 	stw	r2,-108(fp)
			CONST_BITS-PASS1_BITS);

		/* Final output stage */

		wsptr[4*0] = (int) (tmp10 + tmp0);
 8016d38:	e0ffe617 	ldw	r3,-104(fp)
 8016d3c:	e0bfe417 	ldw	r2,-112(fp)
 8016d40:	1887883a 	add	r3,r3,r2
 8016d44:	e0bfe117 	ldw	r2,-124(fp)
 8016d48:	10c00015 	stw	r3,0(r2)
		wsptr[4*3] = (int) (tmp10 - tmp0);
 8016d4c:	e0bfe117 	ldw	r2,-124(fp)
 8016d50:	10800c04 	addi	r2,r2,48
 8016d54:	e13fe617 	ldw	r4,-104(fp)
 8016d58:	e0ffe417 	ldw	r3,-112(fp)
 8016d5c:	20c7c83a 	sub	r3,r4,r3
 8016d60:	10c00015 	stw	r3,0(r2)
		wsptr[4*1] = (int) (tmp12 + tmp2);
 8016d64:	e0bfe117 	ldw	r2,-124(fp)
 8016d68:	10800404 	addi	r2,r2,16
 8016d6c:	e13fe717 	ldw	r4,-100(fp)
 8016d70:	e0ffe517 	ldw	r3,-108(fp)
 8016d74:	20c7883a 	add	r3,r4,r3
 8016d78:	10c00015 	stw	r3,0(r2)
		wsptr[4*2] = (int) (tmp12 - tmp2);
 8016d7c:	e0bfe117 	ldw	r2,-124(fp)
 8016d80:	10800804 	addi	r2,r2,32
 8016d84:	e13fe717 	ldw	r4,-100(fp)
 8016d88:	e0ffe517 	ldw	r3,-108(fp)
 8016d8c:	20c7c83a 	sub	r3,r4,r3
 8016d90:	10c00015 	stw	r3,0(r2)
		/* Pass 1: process columns from input, store into work array. */

		inptr = coef_block;
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
	wsptr = workspace;
	for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8016d94:	e0bfe217 	ldw	r2,-120(fp)
 8016d98:	10800044 	addi	r2,r2,1
 8016d9c:	e0bfe215 	stw	r2,-120(fp)
 8016da0:	e0bfdf17 	ldw	r2,-132(fp)
 8016da4:	10800084 	addi	r2,r2,2
 8016da8:	e0bfdf15 	stw	r2,-132(fp)
 8016dac:	e0bfe017 	ldw	r2,-128(fp)
 8016db0:	10800104 	addi	r2,r2,4
 8016db4:	e0bfe015 	stw	r2,-128(fp)
 8016db8:	e0bfe117 	ldw	r2,-124(fp)
 8016dbc:	10800104 	addi	r2,r2,4
 8016dc0:	e0bfe115 	stw	r2,-124(fp)
 8016dc4:	e0bfe217 	ldw	r2,-120(fp)
 8016dc8:	10800110 	cmplti	r2,r2,4
 8016dcc:	103f821e 	bne	r2,zero,8016bd8 <jpeg_idct_4x4+0x54>
		wsptr[4*2] = (int) (tmp12 - tmp2);
	}

	/* Pass 2: process 4 rows from work array, store into output array. */

	wsptr = workspace;
 8016dd0:	e0bfec04 	addi	r2,fp,-80
 8016dd4:	e0bfe115 	stw	r2,-124(fp)
	for (ctr = 0; ctr < 4; ctr++) {
 8016dd8:	e03fe215 	stw	zero,-120(fp)
 8016ddc:	00006906 	br	8016f84 <jpeg_idct_4x4+0x400>
		outptr = output_buf[ctr] + output_col;
 8016de0:	e0bfe217 	ldw	r2,-120(fp)
 8016de4:	1085883a 	add	r2,r2,r2
 8016de8:	1085883a 	add	r2,r2,r2
 8016dec:	e0ffff17 	ldw	r3,-4(fp)
 8016df0:	1885883a 	add	r2,r3,r2
 8016df4:	10c00017 	ldw	r3,0(r2)
 8016df8:	e0800217 	ldw	r2,8(fp)
 8016dfc:	1885883a 	add	r2,r3,r2
 8016e00:	e0bfeb15 	stw	r2,-84(fp)

		/* Even part */

		/* Add fudge factor here for final descale. */
		tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8016e04:	e0bfe117 	ldw	r2,-124(fp)
 8016e08:	10800017 	ldw	r2,0(r2)
 8016e0c:	10800404 	addi	r2,r2,16
 8016e10:	e0bfe415 	stw	r2,-112(fp)
		tmp2 = (INT32) wsptr[2];
 8016e14:	e0bfe117 	ldw	r2,-124(fp)
 8016e18:	10800204 	addi	r2,r2,8
 8016e1c:	10800017 	ldw	r2,0(r2)
 8016e20:	e0bfe515 	stw	r2,-108(fp)

		tmp10 = (tmp0 + tmp2) << CONST_BITS;
 8016e24:	e0ffe417 	ldw	r3,-112(fp)
 8016e28:	e0bfe517 	ldw	r2,-108(fp)
 8016e2c:	1885883a 	add	r2,r3,r2
 8016e30:	1004937a 	slli	r2,r2,13
 8016e34:	e0bfe615 	stw	r2,-104(fp)
		tmp12 = (tmp0 - tmp2) << CONST_BITS;
 8016e38:	e0ffe417 	ldw	r3,-112(fp)
 8016e3c:	e0bfe517 	ldw	r2,-108(fp)
 8016e40:	1885c83a 	sub	r2,r3,r2
 8016e44:	1004937a 	slli	r2,r2,13
 8016e48:	e0bfe715 	stw	r2,-100(fp)

		/* Odd part */
		/* Same rotation as in the even part of the 8x8 LL&M IDCT */

		z2 = (INT32) wsptr[1];
 8016e4c:	e0bfe117 	ldw	r2,-124(fp)
 8016e50:	10800104 	addi	r2,r2,4
 8016e54:	10800017 	ldw	r2,0(r2)
 8016e58:	e0bfe815 	stw	r2,-96(fp)
		z3 = (INT32) wsptr[3];
 8016e5c:	e0bfe117 	ldw	r2,-124(fp)
 8016e60:	10800304 	addi	r2,r2,12
 8016e64:	10800017 	ldw	r2,0(r2)
 8016e68:	e0bfe915 	stw	r2,-92(fp)

		z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8016e6c:	e0ffe817 	ldw	r3,-96(fp)
 8016e70:	e0bfe917 	ldw	r2,-92(fp)
 8016e74:	1885883a 	add	r2,r3,r2
 8016e78:	1009883a 	mov	r4,r2
 8016e7c:	01445444 	movi	r5,4433
 8016e80:	802c2180 	call	802c218 <__mulsi3>
 8016e84:	e0bfea15 	stw	r2,-88(fp)
		tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8016e88:	e13fe817 	ldw	r4,-96(fp)
 8016e8c:	01461f84 	movi	r5,6270
 8016e90:	802c2180 	call	802c218 <__mulsi3>
 8016e94:	1007883a 	mov	r3,r2
 8016e98:	e0bfea17 	ldw	r2,-88(fp)
 8016e9c:	1885883a 	add	r2,r3,r2
 8016ea0:	e0bfe415 	stw	r2,-112(fp)
		tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8016ea4:	e13fe917 	ldw	r4,-92(fp)
 8016ea8:	017137c4 	movi	r5,-15137
 8016eac:	802c2180 	call	802c218 <__mulsi3>
 8016eb0:	1007883a 	mov	r3,r2
 8016eb4:	e0bfea17 	ldw	r2,-88(fp)
 8016eb8:	1885883a 	add	r2,r3,r2
 8016ebc:	e0bfe515 	stw	r2,-108(fp)

		/* Final output stage */

		outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8016ec0:	e0ffe617 	ldw	r3,-104(fp)
 8016ec4:	e0bfe417 	ldw	r2,-112(fp)
 8016ec8:	1885883a 	add	r2,r3,r2
 8016ecc:	1005d4ba 	srai	r2,r2,18
 8016ed0:	1080ffcc 	andi	r2,r2,1023
 8016ed4:	e0ffe317 	ldw	r3,-116(fp)
 8016ed8:	1885883a 	add	r2,r3,r2
 8016edc:	10c00003 	ldbu	r3,0(r2)
 8016ee0:	e0bfeb17 	ldw	r2,-84(fp)
 8016ee4:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8016ee8:	e0bfeb17 	ldw	r2,-84(fp)
 8016eec:	108000c4 	addi	r2,r2,3
 8016ef0:	e13fe617 	ldw	r4,-104(fp)
 8016ef4:	e0ffe417 	ldw	r3,-112(fp)
 8016ef8:	20c7c83a 	sub	r3,r4,r3
 8016efc:	1807d4ba 	srai	r3,r3,18
 8016f00:	18c0ffcc 	andi	r3,r3,1023
 8016f04:	e13fe317 	ldw	r4,-116(fp)
 8016f08:	20c7883a 	add	r3,r4,r3
 8016f0c:	18c00003 	ldbu	r3,0(r3)
 8016f10:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8016f14:	e0bfeb17 	ldw	r2,-84(fp)
 8016f18:	10800044 	addi	r2,r2,1
 8016f1c:	e13fe717 	ldw	r4,-100(fp)
 8016f20:	e0ffe517 	ldw	r3,-108(fp)
 8016f24:	20c7883a 	add	r3,r4,r3
 8016f28:	1807d4ba 	srai	r3,r3,18
 8016f2c:	18c0ffcc 	andi	r3,r3,1023
 8016f30:	e13fe317 	ldw	r4,-116(fp)
 8016f34:	20c7883a 	add	r3,r4,r3
 8016f38:	18c00003 	ldbu	r3,0(r3)
 8016f3c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8016f40:	e0bfeb17 	ldw	r2,-84(fp)
 8016f44:	10800084 	addi	r2,r2,2
 8016f48:	e13fe717 	ldw	r4,-100(fp)
 8016f4c:	e0ffe517 	ldw	r3,-108(fp)
 8016f50:	20c7c83a 	sub	r3,r4,r3
 8016f54:	1807d4ba 	srai	r3,r3,18
 8016f58:	18c0ffcc 	andi	r3,r3,1023
 8016f5c:	e13fe317 	ldw	r4,-116(fp)
 8016f60:	20c7883a 	add	r3,r4,r3
 8016f64:	18c00003 	ldbu	r3,0(r3)
 8016f68:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 4;		/* advance pointer to next row */
 8016f6c:	e0bfe117 	ldw	r2,-124(fp)
 8016f70:	10800404 	addi	r2,r2,16
 8016f74:	e0bfe115 	stw	r2,-124(fp)
	}

	/* Pass 2: process 4 rows from work array, store into output array. */

	wsptr = workspace;
	for (ctr = 0; ctr < 4; ctr++) {
 8016f78:	e0bfe217 	ldw	r2,-120(fp)
 8016f7c:	10800044 	addi	r2,r2,1
 8016f80:	e0bfe215 	stw	r2,-120(fp)
 8016f84:	e0bfe217 	ldw	r2,-120(fp)
 8016f88:	10800110 	cmplti	r2,r2,4
 8016f8c:	103f941e 	bne	r2,zero,8016de0 <jpeg_idct_4x4+0x25c>
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 4;		/* advance pointer to next row */
	}
}
 8016f90:	e037883a 	mov	sp,fp
 8016f94:	dfc00117 	ldw	ra,4(sp)
 8016f98:	df000017 	ldw	fp,0(sp)
 8016f9c:	dec00204 	addi	sp,sp,8
 8016fa0:	f800283a 	ret

08016fa4 <jpeg_idct_3x3>:

GLOBAL(void)
	jpeg_idct_3x3 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8016fa4:	deffe704 	addi	sp,sp,-100
 8016fa8:	dfc01815 	stw	ra,96(sp)
 8016fac:	df001715 	stw	fp,92(sp)
 8016fb0:	df001704 	addi	fp,sp,92
 8016fb4:	e13ffc15 	stw	r4,-16(fp)
 8016fb8:	e17ffd15 	stw	r5,-12(fp)
 8016fbc:	e1bffe15 	stw	r6,-8(fp)
 8016fc0:	e1ffff15 	stw	r7,-4(fp)
	INT32 tmp0, tmp2, tmp10, tmp12;
	JCOEFPTR inptr;
	ISLOW_MULT_TYPE * quantptr;
	int * wsptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8016fc4:	e0bffc17 	ldw	r2,-16(fp)
 8016fc8:	10804917 	ldw	r2,292(r2)
 8016fcc:	10802004 	addi	r2,r2,128
 8016fd0:	e0bfed15 	stw	r2,-76(fp)
	int workspace[3*3];	/* buffers data between passes */
	SHIFT_TEMPS

		/* Pass 1: process columns from input, store into work array. */

		inptr = coef_block;
 8016fd4:	e0bffe17 	ldw	r2,-8(fp)
 8016fd8:	e0bfe915 	stw	r2,-92(fp)
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8016fdc:	e0bffd17 	ldw	r2,-12(fp)
 8016fe0:	10801517 	ldw	r2,84(r2)
 8016fe4:	e0bfea15 	stw	r2,-88(fp)
	wsptr = workspace;
 8016fe8:	e0bff304 	addi	r2,fp,-52
 8016fec:	e0bfeb15 	stw	r2,-84(fp)
	for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8016ff0:	e03fec15 	stw	zero,-80(fp)
 8016ff4:	00005b06 	br	8017164 <jpeg_idct_3x3+0x1c0>
		/* Even part */

		tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8016ff8:	e0bfe917 	ldw	r2,-92(fp)
 8016ffc:	1080000b 	ldhu	r2,0(r2)
 8017000:	10ffffcc 	andi	r3,r2,65535
 8017004:	18e0001c 	xori	r3,r3,32768
 8017008:	18e00004 	addi	r3,r3,-32768
 801700c:	e0bfea17 	ldw	r2,-88(fp)
 8017010:	10800017 	ldw	r2,0(r2)
 8017014:	1809883a 	mov	r4,r3
 8017018:	100b883a 	mov	r5,r2
 801701c:	802c2180 	call	802c218 <__mulsi3>
 8017020:	e0bfee15 	stw	r2,-72(fp)
		tmp0 <<= CONST_BITS;
 8017024:	e0bfee17 	ldw	r2,-72(fp)
 8017028:	1004937a 	slli	r2,r2,13
 801702c:	e0bfee15 	stw	r2,-72(fp)
		/* Add fudge factor here for final descale. */
		tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8017030:	e0bfee17 	ldw	r2,-72(fp)
 8017034:	10810004 	addi	r2,r2,1024
 8017038:	e0bfee15 	stw	r2,-72(fp)
		tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801703c:	e0bfe917 	ldw	r2,-92(fp)
 8017040:	10800804 	addi	r2,r2,32
 8017044:	1080000b 	ldhu	r2,0(r2)
 8017048:	10ffffcc 	andi	r3,r2,65535
 801704c:	18e0001c 	xori	r3,r3,32768
 8017050:	18e00004 	addi	r3,r3,-32768
 8017054:	e0bfea17 	ldw	r2,-88(fp)
 8017058:	10801004 	addi	r2,r2,64
 801705c:	10800017 	ldw	r2,0(r2)
 8017060:	1809883a 	mov	r4,r3
 8017064:	100b883a 	mov	r5,r2
 8017068:	802c2180 	call	802c218 <__mulsi3>
 801706c:	e0bfef15 	stw	r2,-68(fp)
		tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8017070:	e13fef17 	ldw	r4,-68(fp)
 8017074:	0145a844 	movi	r5,5793
 8017078:	802c2180 	call	802c218 <__mulsi3>
 801707c:	e0bff015 	stw	r2,-64(fp)
		tmp10 = tmp0 + tmp12;
 8017080:	e0ffee17 	ldw	r3,-72(fp)
 8017084:	e0bff017 	ldw	r2,-64(fp)
 8017088:	1885883a 	add	r2,r3,r2
 801708c:	e0bff115 	stw	r2,-60(fp)
		tmp2 = tmp0 - tmp12 - tmp12;
 8017090:	e0ffee17 	ldw	r3,-72(fp)
 8017094:	e0bff017 	ldw	r2,-64(fp)
 8017098:	1887c83a 	sub	r3,r3,r2
 801709c:	e0bff017 	ldw	r2,-64(fp)
 80170a0:	1885c83a 	sub	r2,r3,r2
 80170a4:	e0bfef15 	stw	r2,-68(fp)

		/* Odd part */

		tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80170a8:	e0bfe917 	ldw	r2,-92(fp)
 80170ac:	10800404 	addi	r2,r2,16
 80170b0:	1080000b 	ldhu	r2,0(r2)
 80170b4:	10ffffcc 	andi	r3,r2,65535
 80170b8:	18e0001c 	xori	r3,r3,32768
 80170bc:	18e00004 	addi	r3,r3,-32768
 80170c0:	e0bfea17 	ldw	r2,-88(fp)
 80170c4:	10800804 	addi	r2,r2,32
 80170c8:	10800017 	ldw	r2,0(r2)
 80170cc:	1809883a 	mov	r4,r3
 80170d0:	100b883a 	mov	r5,r2
 80170d4:	802c2180 	call	802c218 <__mulsi3>
 80170d8:	e0bff015 	stw	r2,-64(fp)
		tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 80170dc:	e13ff017 	ldw	r4,-64(fp)
 80170e0:	0149cc44 	movi	r5,10033
 80170e4:	802c2180 	call	802c218 <__mulsi3>
 80170e8:	e0bfee15 	stw	r2,-72(fp)

		/* Final output stage */

		wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80170ec:	e0fff117 	ldw	r3,-60(fp)
 80170f0:	e0bfee17 	ldw	r2,-72(fp)
 80170f4:	1885883a 	add	r2,r3,r2
 80170f8:	1007d2fa 	srai	r3,r2,11
 80170fc:	e0bfeb17 	ldw	r2,-84(fp)
 8017100:	10c00015 	stw	r3,0(r2)
		wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8017104:	e0bfeb17 	ldw	r2,-84(fp)
 8017108:	10800604 	addi	r2,r2,24
 801710c:	e13ff117 	ldw	r4,-60(fp)
 8017110:	e0ffee17 	ldw	r3,-72(fp)
 8017114:	20c7c83a 	sub	r3,r4,r3
 8017118:	1807d2fa 	srai	r3,r3,11
 801711c:	10c00015 	stw	r3,0(r2)
		wsptr[3*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 8017120:	e0bfeb17 	ldw	r2,-84(fp)
 8017124:	10800304 	addi	r2,r2,12
 8017128:	e0ffef17 	ldw	r3,-68(fp)
 801712c:	1807d2fa 	srai	r3,r3,11
 8017130:	10c00015 	stw	r3,0(r2)
		/* Pass 1: process columns from input, store into work array. */

		inptr = coef_block;
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
	wsptr = workspace;
	for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8017134:	e0bfec17 	ldw	r2,-80(fp)
 8017138:	10800044 	addi	r2,r2,1
 801713c:	e0bfec15 	stw	r2,-80(fp)
 8017140:	e0bfe917 	ldw	r2,-92(fp)
 8017144:	10800084 	addi	r2,r2,2
 8017148:	e0bfe915 	stw	r2,-92(fp)
 801714c:	e0bfea17 	ldw	r2,-88(fp)
 8017150:	10800104 	addi	r2,r2,4
 8017154:	e0bfea15 	stw	r2,-88(fp)
 8017158:	e0bfeb17 	ldw	r2,-84(fp)
 801715c:	10800104 	addi	r2,r2,4
 8017160:	e0bfeb15 	stw	r2,-84(fp)
 8017164:	e0bfec17 	ldw	r2,-80(fp)
 8017168:	108000d0 	cmplti	r2,r2,3
 801716c:	103fa21e 	bne	r2,zero,8016ff8 <jpeg_idct_3x3+0x54>
		wsptr[3*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
	}

	/* Pass 2: process 3 rows from work array, store into output array. */

	wsptr = workspace;
 8017170:	e0bff304 	addi	r2,fp,-52
 8017174:	e0bfeb15 	stw	r2,-84(fp)
	for (ctr = 0; ctr < 3; ctr++) {
 8017178:	e03fec15 	stw	zero,-80(fp)
 801717c:	00004e06 	br	80172b8 <jpeg_idct_3x3+0x314>
		outptr = output_buf[ctr] + output_col;
 8017180:	e0bfec17 	ldw	r2,-80(fp)
 8017184:	1085883a 	add	r2,r2,r2
 8017188:	1085883a 	add	r2,r2,r2
 801718c:	e0ffff17 	ldw	r3,-4(fp)
 8017190:	1885883a 	add	r2,r3,r2
 8017194:	10c00017 	ldw	r3,0(r2)
 8017198:	e0800217 	ldw	r2,8(fp)
 801719c:	1885883a 	add	r2,r3,r2
 80171a0:	e0bff215 	stw	r2,-56(fp)

		/* Even part */

		/* Add fudge factor here for final descale. */
		tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80171a4:	e0bfeb17 	ldw	r2,-84(fp)
 80171a8:	10800017 	ldw	r2,0(r2)
 80171ac:	10800404 	addi	r2,r2,16
 80171b0:	e0bfee15 	stw	r2,-72(fp)
		tmp0 <<= CONST_BITS;
 80171b4:	e0bfee17 	ldw	r2,-72(fp)
 80171b8:	1004937a 	slli	r2,r2,13
 80171bc:	e0bfee15 	stw	r2,-72(fp)
		tmp2 = (INT32) wsptr[2];
 80171c0:	e0bfeb17 	ldw	r2,-84(fp)
 80171c4:	10800204 	addi	r2,r2,8
 80171c8:	10800017 	ldw	r2,0(r2)
 80171cc:	e0bfef15 	stw	r2,-68(fp)
		tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 80171d0:	e13fef17 	ldw	r4,-68(fp)
 80171d4:	0145a844 	movi	r5,5793
 80171d8:	802c2180 	call	802c218 <__mulsi3>
 80171dc:	e0bff015 	stw	r2,-64(fp)
		tmp10 = tmp0 + tmp12;
 80171e0:	e0ffee17 	ldw	r3,-72(fp)
 80171e4:	e0bff017 	ldw	r2,-64(fp)
 80171e8:	1885883a 	add	r2,r3,r2
 80171ec:	e0bff115 	stw	r2,-60(fp)
		tmp2 = tmp0 - tmp12 - tmp12;
 80171f0:	e0ffee17 	ldw	r3,-72(fp)
 80171f4:	e0bff017 	ldw	r2,-64(fp)
 80171f8:	1887c83a 	sub	r3,r3,r2
 80171fc:	e0bff017 	ldw	r2,-64(fp)
 8017200:	1885c83a 	sub	r2,r3,r2
 8017204:	e0bfef15 	stw	r2,-68(fp)

		/* Odd part */

		tmp12 = (INT32) wsptr[1];
 8017208:	e0bfeb17 	ldw	r2,-84(fp)
 801720c:	10800104 	addi	r2,r2,4
 8017210:	10800017 	ldw	r2,0(r2)
 8017214:	e0bff015 	stw	r2,-64(fp)
		tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8017218:	e13ff017 	ldw	r4,-64(fp)
 801721c:	0149cc44 	movi	r5,10033
 8017220:	802c2180 	call	802c218 <__mulsi3>
 8017224:	e0bfee15 	stw	r2,-72(fp)

		/* Final output stage */

		outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8017228:	e0fff117 	ldw	r3,-60(fp)
 801722c:	e0bfee17 	ldw	r2,-72(fp)
 8017230:	1885883a 	add	r2,r3,r2
 8017234:	1005d4ba 	srai	r2,r2,18
 8017238:	1080ffcc 	andi	r2,r2,1023
 801723c:	e0ffed17 	ldw	r3,-76(fp)
 8017240:	1885883a 	add	r2,r3,r2
 8017244:	10c00003 	ldbu	r3,0(r2)
 8017248:	e0bff217 	ldw	r2,-56(fp)
 801724c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8017250:	e0bff217 	ldw	r2,-56(fp)
 8017254:	10800084 	addi	r2,r2,2
 8017258:	e13ff117 	ldw	r4,-60(fp)
 801725c:	e0ffee17 	ldw	r3,-72(fp)
 8017260:	20c7c83a 	sub	r3,r4,r3
 8017264:	1807d4ba 	srai	r3,r3,18
 8017268:	18c0ffcc 	andi	r3,r3,1023
 801726c:	e13fed17 	ldw	r4,-76(fp)
 8017270:	20c7883a 	add	r3,r4,r3
 8017274:	18c00003 	ldbu	r3,0(r3)
 8017278:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
 801727c:	e0bff217 	ldw	r2,-56(fp)
 8017280:	10800044 	addi	r2,r2,1
 8017284:	e0ffef17 	ldw	r3,-68(fp)
 8017288:	1807d4ba 	srai	r3,r3,18
 801728c:	18c0ffcc 	andi	r3,r3,1023
 8017290:	e13fed17 	ldw	r4,-76(fp)
 8017294:	20c7883a 	add	r3,r4,r3
 8017298:	18c00003 	ldbu	r3,0(r3)
 801729c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 3;		/* advance pointer to next row */
 80172a0:	e0bfeb17 	ldw	r2,-84(fp)
 80172a4:	10800304 	addi	r2,r2,12
 80172a8:	e0bfeb15 	stw	r2,-84(fp)
	}

	/* Pass 2: process 3 rows from work array, store into output array. */

	wsptr = workspace;
	for (ctr = 0; ctr < 3; ctr++) {
 80172ac:	e0bfec17 	ldw	r2,-80(fp)
 80172b0:	10800044 	addi	r2,r2,1
 80172b4:	e0bfec15 	stw	r2,-80(fp)
 80172b8:	e0bfec17 	ldw	r2,-80(fp)
 80172bc:	108000d0 	cmplti	r2,r2,3
 80172c0:	103faf1e 	bne	r2,zero,8017180 <jpeg_idct_3x3+0x1dc>
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 3;		/* advance pointer to next row */
	}
}
 80172c4:	e037883a 	mov	sp,fp
 80172c8:	dfc00117 	ldw	ra,4(sp)
 80172cc:	df000017 	ldw	fp,0(sp)
 80172d0:	dec00204 	addi	sp,sp,8
 80172d4:	f800283a 	ret

080172d8 <jpeg_idct_2x2>:

GLOBAL(void)
	jpeg_idct_2x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80172d8:	defff104 	addi	sp,sp,-60
 80172dc:	dfc00e15 	stw	ra,56(sp)
 80172e0:	df000d15 	stw	fp,52(sp)
 80172e4:	df000d04 	addi	fp,sp,52
 80172e8:	e13ffc15 	stw	r4,-16(fp)
 80172ec:	e17ffd15 	stw	r5,-12(fp)
 80172f0:	e1bffe15 	stw	r6,-8(fp)
 80172f4:	e1ffff15 	stw	r7,-4(fp)
	INT32 tmp0, tmp1, tmp2, tmp3, tmp4, tmp5;
	ISLOW_MULT_TYPE * quantptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80172f8:	e0bffc17 	ldw	r2,-16(fp)
 80172fc:	10804917 	ldw	r2,292(r2)
 8017300:	10802004 	addi	r2,r2,128
 8017304:	e0bff315 	stw	r2,-52(fp)
	SHIFT_TEMPS

		/* Pass 1: process columns from input. */

		quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8017308:	e0bffd17 	ldw	r2,-12(fp)
 801730c:	10801517 	ldw	r2,84(r2)
 8017310:	e0bff415 	stw	r2,-48(fp)

	/* Column 0 */
	tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8017314:	e0bffe17 	ldw	r2,-8(fp)
 8017318:	1080000b 	ldhu	r2,0(r2)
 801731c:	10ffffcc 	andi	r3,r2,65535
 8017320:	18e0001c 	xori	r3,r3,32768
 8017324:	18e00004 	addi	r3,r3,-32768
 8017328:	e0bff417 	ldw	r2,-48(fp)
 801732c:	10800017 	ldw	r2,0(r2)
 8017330:	1809883a 	mov	r4,r3
 8017334:	100b883a 	mov	r5,r2
 8017338:	802c2180 	call	802c218 <__mulsi3>
 801733c:	e0bff515 	stw	r2,-44(fp)
	tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8017340:	e0bffe17 	ldw	r2,-8(fp)
 8017344:	10800404 	addi	r2,r2,16
 8017348:	1080000b 	ldhu	r2,0(r2)
 801734c:	10ffffcc 	andi	r3,r2,65535
 8017350:	18e0001c 	xori	r3,r3,32768
 8017354:	18e00004 	addi	r3,r3,-32768
 8017358:	e0bff417 	ldw	r2,-48(fp)
 801735c:	10800804 	addi	r2,r2,32
 8017360:	10800017 	ldw	r2,0(r2)
 8017364:	1809883a 	mov	r4,r3
 8017368:	100b883a 	mov	r5,r2
 801736c:	802c2180 	call	802c218 <__mulsi3>
 8017370:	e0bff615 	stw	r2,-40(fp)
	/* Add fudge factor here for final descale. */
	tmp4 += ONE << 2;
 8017374:	e0bff517 	ldw	r2,-44(fp)
 8017378:	10800104 	addi	r2,r2,4
 801737c:	e0bff515 	stw	r2,-44(fp)

	tmp0 = tmp4 + tmp5;
 8017380:	e0fff517 	ldw	r3,-44(fp)
 8017384:	e0bff617 	ldw	r2,-40(fp)
 8017388:	1885883a 	add	r2,r3,r2
 801738c:	e0bff715 	stw	r2,-36(fp)
	tmp2 = tmp4 - tmp5;
 8017390:	e0fff517 	ldw	r3,-44(fp)
 8017394:	e0bff617 	ldw	r2,-40(fp)
 8017398:	1885c83a 	sub	r2,r3,r2
 801739c:	e0bff815 	stw	r2,-32(fp)

	/* Column 1 */
	tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0+1], quantptr[DCTSIZE*0+1]);
 80173a0:	e0bffe17 	ldw	r2,-8(fp)
 80173a4:	10800084 	addi	r2,r2,2
 80173a8:	1080000b 	ldhu	r2,0(r2)
 80173ac:	10ffffcc 	andi	r3,r2,65535
 80173b0:	18e0001c 	xori	r3,r3,32768
 80173b4:	18e00004 	addi	r3,r3,-32768
 80173b8:	e0bff417 	ldw	r2,-48(fp)
 80173bc:	10800104 	addi	r2,r2,4
 80173c0:	10800017 	ldw	r2,0(r2)
 80173c4:	1809883a 	mov	r4,r3
 80173c8:	100b883a 	mov	r5,r2
 80173cc:	802c2180 	call	802c218 <__mulsi3>
 80173d0:	e0bff515 	stw	r2,-44(fp)
	tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1+1], quantptr[DCTSIZE*1+1]);
 80173d4:	e0bffe17 	ldw	r2,-8(fp)
 80173d8:	10800484 	addi	r2,r2,18
 80173dc:	1080000b 	ldhu	r2,0(r2)
 80173e0:	10ffffcc 	andi	r3,r2,65535
 80173e4:	18e0001c 	xori	r3,r3,32768
 80173e8:	18e00004 	addi	r3,r3,-32768
 80173ec:	e0bff417 	ldw	r2,-48(fp)
 80173f0:	10800904 	addi	r2,r2,36
 80173f4:	10800017 	ldw	r2,0(r2)
 80173f8:	1809883a 	mov	r4,r3
 80173fc:	100b883a 	mov	r5,r2
 8017400:	802c2180 	call	802c218 <__mulsi3>
 8017404:	e0bff615 	stw	r2,-40(fp)

	tmp1 = tmp4 + tmp5;
 8017408:	e0fff517 	ldw	r3,-44(fp)
 801740c:	e0bff617 	ldw	r2,-40(fp)
 8017410:	1885883a 	add	r2,r3,r2
 8017414:	e0bff915 	stw	r2,-28(fp)
	tmp3 = tmp4 - tmp5;
 8017418:	e0fff517 	ldw	r3,-44(fp)
 801741c:	e0bff617 	ldw	r2,-40(fp)
 8017420:	1885c83a 	sub	r2,r3,r2
 8017424:	e0bffa15 	stw	r2,-24(fp)

	/* Pass 2: process 2 rows, store into output array. */

	/* Row 0 */
	outptr = output_buf[0] + output_col;
 8017428:	e0bfff17 	ldw	r2,-4(fp)
 801742c:	10c00017 	ldw	r3,0(r2)
 8017430:	e0800217 	ldw	r2,8(fp)
 8017434:	1885883a 	add	r2,r3,r2
 8017438:	e0bffb15 	stw	r2,-20(fp)

	outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp0 + tmp1, 3) & RANGE_MASK];
 801743c:	e0fff717 	ldw	r3,-36(fp)
 8017440:	e0bff917 	ldw	r2,-28(fp)
 8017444:	1885883a 	add	r2,r3,r2
 8017448:	1005d0fa 	srai	r2,r2,3
 801744c:	1080ffcc 	andi	r2,r2,1023
 8017450:	e0fff317 	ldw	r3,-52(fp)
 8017454:	1885883a 	add	r2,r3,r2
 8017458:	10c00003 	ldbu	r3,0(r2)
 801745c:	e0bffb17 	ldw	r2,-20(fp)
 8017460:	10c00005 	stb	r3,0(r2)
	outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp0 - tmp1, 3) & RANGE_MASK];
 8017464:	e0bffb17 	ldw	r2,-20(fp)
 8017468:	10800044 	addi	r2,r2,1
 801746c:	e13ff717 	ldw	r4,-36(fp)
 8017470:	e0fff917 	ldw	r3,-28(fp)
 8017474:	20c7c83a 	sub	r3,r4,r3
 8017478:	1807d0fa 	srai	r3,r3,3
 801747c:	18c0ffcc 	andi	r3,r3,1023
 8017480:	e13ff317 	ldw	r4,-52(fp)
 8017484:	20c7883a 	add	r3,r4,r3
 8017488:	18c00003 	ldbu	r3,0(r3)
 801748c:	10c00005 	stb	r3,0(r2)

	/* Row 1 */
	outptr = output_buf[1] + output_col;
 8017490:	e0bfff17 	ldw	r2,-4(fp)
 8017494:	10800104 	addi	r2,r2,4
 8017498:	10c00017 	ldw	r3,0(r2)
 801749c:	e0800217 	ldw	r2,8(fp)
 80174a0:	1885883a 	add	r2,r3,r2
 80174a4:	e0bffb15 	stw	r2,-20(fp)

	outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 80174a8:	e0fff817 	ldw	r3,-32(fp)
 80174ac:	e0bffa17 	ldw	r2,-24(fp)
 80174b0:	1885883a 	add	r2,r3,r2
 80174b4:	1005d0fa 	srai	r2,r2,3
 80174b8:	1080ffcc 	andi	r2,r2,1023
 80174bc:	e0fff317 	ldw	r3,-52(fp)
 80174c0:	1885883a 	add	r2,r3,r2
 80174c4:	10c00003 	ldbu	r3,0(r2)
 80174c8:	e0bffb17 	ldw	r2,-20(fp)
 80174cc:	10c00005 	stb	r3,0(r2)
	outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2 - tmp3, 3) & RANGE_MASK];
 80174d0:	e0bffb17 	ldw	r2,-20(fp)
 80174d4:	10800044 	addi	r2,r2,1
 80174d8:	e13ff817 	ldw	r4,-32(fp)
 80174dc:	e0fffa17 	ldw	r3,-24(fp)
 80174e0:	20c7c83a 	sub	r3,r4,r3
 80174e4:	1807d0fa 	srai	r3,r3,3
 80174e8:	18c0ffcc 	andi	r3,r3,1023
 80174ec:	e13ff317 	ldw	r4,-52(fp)
 80174f0:	20c7883a 	add	r3,r4,r3
 80174f4:	18c00003 	ldbu	r3,0(r3)
 80174f8:	10c00005 	stb	r3,0(r2)
}
 80174fc:	e037883a 	mov	sp,fp
 8017500:	dfc00117 	ldw	ra,4(sp)
 8017504:	df000017 	ldw	fp,0(sp)
 8017508:	dec00204 	addi	sp,sp,8
 801750c:	f800283a 	ret

08017510 <jpeg_idct_1x1>:

GLOBAL(void)
	jpeg_idct_1x1 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8017510:	defff704 	addi	sp,sp,-36
 8017514:	dfc00815 	stw	ra,32(sp)
 8017518:	df000715 	stw	fp,28(sp)
 801751c:	df000704 	addi	fp,sp,28
 8017520:	e13ffc15 	stw	r4,-16(fp)
 8017524:	e17ffd15 	stw	r5,-12(fp)
 8017528:	e1bffe15 	stw	r6,-8(fp)
 801752c:	e1ffff15 	stw	r7,-4(fp)
	int dcval;
	ISLOW_MULT_TYPE * quantptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8017530:	e0bffc17 	ldw	r2,-16(fp)
 8017534:	10804917 	ldw	r2,292(r2)
 8017538:	10802004 	addi	r2,r2,128
 801753c:	e0bff915 	stw	r2,-28(fp)
	SHIFT_TEMPS

		/* 1x1 is trivial: just take the DC coefficient divided by 8. */
		quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8017540:	e0bffd17 	ldw	r2,-12(fp)
 8017544:	10801517 	ldw	r2,84(r2)
 8017548:	e0bffa15 	stw	r2,-24(fp)
	dcval = DEQUANTIZE(coef_block[0], quantptr[0]);
 801754c:	e0bffe17 	ldw	r2,-8(fp)
 8017550:	1080000b 	ldhu	r2,0(r2)
 8017554:	10ffffcc 	andi	r3,r2,65535
 8017558:	18e0001c 	xori	r3,r3,32768
 801755c:	18e00004 	addi	r3,r3,-32768
 8017560:	e0bffa17 	ldw	r2,-24(fp)
 8017564:	10800017 	ldw	r2,0(r2)
 8017568:	1809883a 	mov	r4,r3
 801756c:	100b883a 	mov	r5,r2
 8017570:	802c2180 	call	802c218 <__mulsi3>
 8017574:	e0bffb15 	stw	r2,-20(fp)
	dcval = (int) DESCALE((INT32) dcval, 3);
 8017578:	e0bffb17 	ldw	r2,-20(fp)
 801757c:	10800104 	addi	r2,r2,4
 8017580:	1005d0fa 	srai	r2,r2,3
 8017584:	e0bffb15 	stw	r2,-20(fp)

	output_buf[0][output_col] = range_limit[dcval & RANGE_MASK];
 8017588:	e0bfff17 	ldw	r2,-4(fp)
 801758c:	10c00017 	ldw	r3,0(r2)
 8017590:	e0800217 	ldw	r2,8(fp)
 8017594:	1885883a 	add	r2,r3,r2
 8017598:	e0fffb17 	ldw	r3,-20(fp)
 801759c:	18c0ffcc 	andi	r3,r3,1023
 80175a0:	e13ff917 	ldw	r4,-28(fp)
 80175a4:	20c7883a 	add	r3,r4,r3
 80175a8:	18c00003 	ldbu	r3,0(r3)
 80175ac:	10c00005 	stb	r3,0(r2)
}
 80175b0:	e037883a 	mov	sp,fp
 80175b4:	dfc00117 	ldw	ra,4(sp)
 80175b8:	df000017 	ldw	fp,0(sp)
 80175bc:	dec00204 	addi	sp,sp,8
 80175c0:	f800283a 	ret

080175c4 <jpeg_idct_9x9>:

GLOBAL(void)
	jpeg_idct_9x9 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80175c4:	deff9f04 	addi	sp,sp,-388
 80175c8:	dfc06015 	stw	ra,384(sp)
 80175cc:	df005f15 	stw	fp,380(sp)
 80175d0:	df005f04 	addi	fp,sp,380
 80175d4:	e13ffc15 	stw	r4,-16(fp)
 80175d8:	e17ffd15 	stw	r5,-12(fp)
 80175dc:	e1bffe15 	stw	r6,-8(fp)
 80175e0:	e1ffff15 	stw	r7,-4(fp)
	INT32 z1, z2, z3, z4;
	JCOEFPTR inptr;
	ISLOW_MULT_TYPE * quantptr;
	int * wsptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80175e4:	e0bffc17 	ldw	r2,-16(fp)
 80175e8:	10804917 	ldw	r2,292(r2)
 80175ec:	10802004 	addi	r2,r2,128
 80175f0:	e0bfa515 	stw	r2,-364(fp)
	int workspace[8*9];	/* buffers data between passes */
	SHIFT_TEMPS

		/* Pass 1: process columns from input, store into work array. */

		inptr = coef_block;
 80175f4:	e0bffe17 	ldw	r2,-8(fp)
 80175f8:	e0bfa115 	stw	r2,-380(fp)
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 80175fc:	e0bffd17 	ldw	r2,-12(fp)
 8017600:	10801517 	ldw	r2,84(r2)
 8017604:	e0bfa215 	stw	r2,-376(fp)
	wsptr = workspace;
 8017608:	e0bfb404 	addi	r2,fp,-304
 801760c:	e0bfa315 	stw	r2,-372(fp)
	for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8017610:	e03fa415 	stw	zero,-368(fp)
 8017614:	00012806 	br	8017ab8 <jpeg_idct_9x9+0x4f4>
		/* Even part */

		tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8017618:	e0bfa117 	ldw	r2,-380(fp)
 801761c:	1080000b 	ldhu	r2,0(r2)
 8017620:	10ffffcc 	andi	r3,r2,65535
 8017624:	18e0001c 	xori	r3,r3,32768
 8017628:	18e00004 	addi	r3,r3,-32768
 801762c:	e0bfa217 	ldw	r2,-376(fp)
 8017630:	10800017 	ldw	r2,0(r2)
 8017634:	1809883a 	mov	r4,r3
 8017638:	100b883a 	mov	r5,r2
 801763c:	802c2180 	call	802c218 <__mulsi3>
 8017640:	e0bfa615 	stw	r2,-360(fp)
		tmp0 <<= CONST_BITS;
 8017644:	e0bfa617 	ldw	r2,-360(fp)
 8017648:	1004937a 	slli	r2,r2,13
 801764c:	e0bfa615 	stw	r2,-360(fp)
		/* Add fudge factor here for final descale. */
		tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8017650:	e0bfa617 	ldw	r2,-360(fp)
 8017654:	10810004 	addi	r2,r2,1024
 8017658:	e0bfa615 	stw	r2,-360(fp)

		z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801765c:	e0bfa117 	ldw	r2,-380(fp)
 8017660:	10800804 	addi	r2,r2,32
 8017664:	1080000b 	ldhu	r2,0(r2)
 8017668:	10ffffcc 	andi	r3,r2,65535
 801766c:	18e0001c 	xori	r3,r3,32768
 8017670:	18e00004 	addi	r3,r3,-32768
 8017674:	e0bfa217 	ldw	r2,-376(fp)
 8017678:	10801004 	addi	r2,r2,64
 801767c:	10800017 	ldw	r2,0(r2)
 8017680:	1809883a 	mov	r4,r3
 8017684:	100b883a 	mov	r5,r2
 8017688:	802c2180 	call	802c218 <__mulsi3>
 801768c:	e0bfa715 	stw	r2,-356(fp)
		z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8017690:	e0bfa117 	ldw	r2,-380(fp)
 8017694:	10801004 	addi	r2,r2,64
 8017698:	1080000b 	ldhu	r2,0(r2)
 801769c:	10ffffcc 	andi	r3,r2,65535
 80176a0:	18e0001c 	xori	r3,r3,32768
 80176a4:	18e00004 	addi	r3,r3,-32768
 80176a8:	e0bfa217 	ldw	r2,-376(fp)
 80176ac:	10802004 	addi	r2,r2,128
 80176b0:	10800017 	ldw	r2,0(r2)
 80176b4:	1809883a 	mov	r4,r3
 80176b8:	100b883a 	mov	r5,r2
 80176bc:	802c2180 	call	802c218 <__mulsi3>
 80176c0:	e0bfa815 	stw	r2,-352(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80176c4:	e0bfa117 	ldw	r2,-380(fp)
 80176c8:	10801804 	addi	r2,r2,96
 80176cc:	1080000b 	ldhu	r2,0(r2)
 80176d0:	10ffffcc 	andi	r3,r2,65535
 80176d4:	18e0001c 	xori	r3,r3,32768
 80176d8:	18e00004 	addi	r3,r3,-32768
 80176dc:	e0bfa217 	ldw	r2,-376(fp)
 80176e0:	10803004 	addi	r2,r2,192
 80176e4:	10800017 	ldw	r2,0(r2)
 80176e8:	1809883a 	mov	r4,r3
 80176ec:	100b883a 	mov	r5,r2
 80176f0:	802c2180 	call	802c218 <__mulsi3>
 80176f4:	e0bfa915 	stw	r2,-348(fp)

		tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 80176f8:	e13fa917 	ldw	r4,-348(fp)
 80176fc:	0145a844 	movi	r5,5793
 8017700:	802c2180 	call	802c218 <__mulsi3>
 8017704:	e0bfaa15 	stw	r2,-344(fp)
		tmp1 = tmp0 + tmp3;
 8017708:	e0ffa617 	ldw	r3,-360(fp)
 801770c:	e0bfaa17 	ldw	r2,-344(fp)
 8017710:	1885883a 	add	r2,r3,r2
 8017714:	e0bfab15 	stw	r2,-340(fp)
		tmp2 = tmp0 - tmp3 - tmp3;
 8017718:	e0ffa617 	ldw	r3,-360(fp)
 801771c:	e0bfaa17 	ldw	r2,-344(fp)
 8017720:	1887c83a 	sub	r3,r3,r2
 8017724:	e0bfaa17 	ldw	r2,-344(fp)
 8017728:	1885c83a 	sub	r2,r3,r2
 801772c:	e0bfac15 	stw	r2,-336(fp)

		tmp0 = MULTIPLY(z1 - z2, FIX(0.707106781)); /* c6 */
 8017730:	e0ffa717 	ldw	r3,-356(fp)
 8017734:	e0bfa817 	ldw	r2,-352(fp)
 8017738:	1885c83a 	sub	r2,r3,r2
 801773c:	1009883a 	mov	r4,r2
 8017740:	0145a844 	movi	r5,5793
 8017744:	802c2180 	call	802c218 <__mulsi3>
 8017748:	e0bfa615 	stw	r2,-360(fp)
		tmp11 = tmp2 + tmp0;
 801774c:	e0ffac17 	ldw	r3,-336(fp)
 8017750:	e0bfa617 	ldw	r2,-360(fp)
 8017754:	1885883a 	add	r2,r3,r2
 8017758:	e0bfad15 	stw	r2,-332(fp)
		tmp14 = tmp2 - tmp0 - tmp0;
 801775c:	e0ffac17 	ldw	r3,-336(fp)
 8017760:	e0bfa617 	ldw	r2,-360(fp)
 8017764:	1887c83a 	sub	r3,r3,r2
 8017768:	e0bfa617 	ldw	r2,-360(fp)
 801776c:	1885c83a 	sub	r2,r3,r2
 8017770:	e0bfae15 	stw	r2,-328(fp)

		tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
 8017774:	e0ffa717 	ldw	r3,-356(fp)
 8017778:	e0bfa817 	ldw	r2,-352(fp)
 801777c:	1885883a 	add	r2,r3,r2
 8017780:	1009883a 	mov	r4,r2
 8017784:	014aa1c4 	movi	r5,10887
 8017788:	802c2180 	call	802c218 <__mulsi3>
 801778c:	e0bfa615 	stw	r2,-360(fp)
		tmp2 = MULTIPLY(z1, FIX(1.083350441));      /* c4 */
 8017790:	e13fa717 	ldw	r4,-356(fp)
 8017794:	0148aac4 	movi	r5,8875
 8017798:	802c2180 	call	802c218 <__mulsi3>
 801779c:	e0bfac15 	stw	r2,-336(fp)
		tmp3 = MULTIPLY(z2, FIX(0.245575608));      /* c8 */
 80177a0:	e13fa817 	ldw	r4,-352(fp)
 80177a4:	0141f704 	movi	r5,2012
 80177a8:	802c2180 	call	802c218 <__mulsi3>
 80177ac:	e0bfaa15 	stw	r2,-344(fp)

		tmp10 = tmp1 + tmp0 - tmp3;
 80177b0:	e0ffab17 	ldw	r3,-340(fp)
 80177b4:	e0bfa617 	ldw	r2,-360(fp)
 80177b8:	1887883a 	add	r3,r3,r2
 80177bc:	e0bfaa17 	ldw	r2,-344(fp)
 80177c0:	1885c83a 	sub	r2,r3,r2
 80177c4:	e0bfaf15 	stw	r2,-324(fp)
		tmp12 = tmp1 - tmp0 + tmp2;
 80177c8:	e0ffab17 	ldw	r3,-340(fp)
 80177cc:	e0bfa617 	ldw	r2,-360(fp)
 80177d0:	1887c83a 	sub	r3,r3,r2
 80177d4:	e0bfac17 	ldw	r2,-336(fp)
 80177d8:	1885883a 	add	r2,r3,r2
 80177dc:	e0bfb015 	stw	r2,-320(fp)
		tmp13 = tmp1 - tmp2 + tmp3;
 80177e0:	e0ffab17 	ldw	r3,-340(fp)
 80177e4:	e0bfac17 	ldw	r2,-336(fp)
 80177e8:	1887c83a 	sub	r3,r3,r2
 80177ec:	e0bfaa17 	ldw	r2,-344(fp)
 80177f0:	1885883a 	add	r2,r3,r2
 80177f4:	e0bfb115 	stw	r2,-316(fp)

		/* Odd part */

		z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80177f8:	e0bfa117 	ldw	r2,-380(fp)
 80177fc:	10800404 	addi	r2,r2,16
 8017800:	1080000b 	ldhu	r2,0(r2)
 8017804:	10ffffcc 	andi	r3,r2,65535
 8017808:	18e0001c 	xori	r3,r3,32768
 801780c:	18e00004 	addi	r3,r3,-32768
 8017810:	e0bfa217 	ldw	r2,-376(fp)
 8017814:	10800804 	addi	r2,r2,32
 8017818:	10800017 	ldw	r2,0(r2)
 801781c:	1809883a 	mov	r4,r3
 8017820:	100b883a 	mov	r5,r2
 8017824:	802c2180 	call	802c218 <__mulsi3>
 8017828:	e0bfa715 	stw	r2,-356(fp)
		z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801782c:	e0bfa117 	ldw	r2,-380(fp)
 8017830:	10800c04 	addi	r2,r2,48
 8017834:	1080000b 	ldhu	r2,0(r2)
 8017838:	10ffffcc 	andi	r3,r2,65535
 801783c:	18e0001c 	xori	r3,r3,32768
 8017840:	18e00004 	addi	r3,r3,-32768
 8017844:	e0bfa217 	ldw	r2,-376(fp)
 8017848:	10801804 	addi	r2,r2,96
 801784c:	10800017 	ldw	r2,0(r2)
 8017850:	1809883a 	mov	r4,r3
 8017854:	100b883a 	mov	r5,r2
 8017858:	802c2180 	call	802c218 <__mulsi3>
 801785c:	e0bfa815 	stw	r2,-352(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8017860:	e0bfa117 	ldw	r2,-380(fp)
 8017864:	10801404 	addi	r2,r2,80
 8017868:	1080000b 	ldhu	r2,0(r2)
 801786c:	10ffffcc 	andi	r3,r2,65535
 8017870:	18e0001c 	xori	r3,r3,32768
 8017874:	18e00004 	addi	r3,r3,-32768
 8017878:	e0bfa217 	ldw	r2,-376(fp)
 801787c:	10802804 	addi	r2,r2,160
 8017880:	10800017 	ldw	r2,0(r2)
 8017884:	1809883a 	mov	r4,r3
 8017888:	100b883a 	mov	r5,r2
 801788c:	802c2180 	call	802c218 <__mulsi3>
 8017890:	e0bfa915 	stw	r2,-348(fp)
		z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8017894:	e0bfa117 	ldw	r2,-380(fp)
 8017898:	10801c04 	addi	r2,r2,112
 801789c:	1080000b 	ldhu	r2,0(r2)
 80178a0:	10ffffcc 	andi	r3,r2,65535
 80178a4:	18e0001c 	xori	r3,r3,32768
 80178a8:	18e00004 	addi	r3,r3,-32768
 80178ac:	e0bfa217 	ldw	r2,-376(fp)
 80178b0:	10803804 	addi	r2,r2,224
 80178b4:	10800017 	ldw	r2,0(r2)
 80178b8:	1809883a 	mov	r4,r3
 80178bc:	100b883a 	mov	r5,r2
 80178c0:	802c2180 	call	802c218 <__mulsi3>
 80178c4:	e0bfb215 	stw	r2,-312(fp)

		z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 80178c8:	e13fa817 	ldw	r4,-352(fp)
 80178cc:	017633c4 	movi	r5,-10033
 80178d0:	802c2180 	call	802c218 <__mulsi3>
 80178d4:	e0bfa815 	stw	r2,-352(fp)

		tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 80178d8:	e0ffa717 	ldw	r3,-356(fp)
 80178dc:	e0bfa917 	ldw	r2,-348(fp)
 80178e0:	1885883a 	add	r2,r3,r2
 80178e4:	1009883a 	mov	r4,r2
 80178e8:	014745c4 	movi	r5,7447
 80178ec:	802c2180 	call	802c218 <__mulsi3>
 80178f0:	e0bfac15 	stw	r2,-336(fp)
		tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 80178f4:	e0ffa717 	ldw	r3,-356(fp)
 80178f8:	e0bfb217 	ldw	r2,-312(fp)
 80178fc:	1885883a 	add	r2,r3,r2
 8017900:	1009883a 	mov	r4,r2
 8017904:	0143de84 	movi	r5,3962
 8017908:	802c2180 	call	802c218 <__mulsi3>
 801790c:	e0bfaa15 	stw	r2,-344(fp)
		tmp0 = tmp2 + tmp3 - z2;
 8017910:	e0ffac17 	ldw	r3,-336(fp)
 8017914:	e0bfaa17 	ldw	r2,-344(fp)
 8017918:	1887883a 	add	r3,r3,r2
 801791c:	e0bfa817 	ldw	r2,-352(fp)
 8017920:	1885c83a 	sub	r2,r3,r2
 8017924:	e0bfa615 	stw	r2,-360(fp)
		tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8017928:	e0ffa917 	ldw	r3,-348(fp)
 801792c:	e0bfb217 	ldw	r2,-312(fp)
 8017930:	1885c83a 	sub	r2,r3,r2
 8017934:	1009883a 	mov	r4,r2
 8017938:	014b2444 	movi	r5,11409
 801793c:	802c2180 	call	802c218 <__mulsi3>
 8017940:	e0bfab15 	stw	r2,-340(fp)
		tmp2 += z2 - tmp1;
 8017944:	e0ffa817 	ldw	r3,-352(fp)
 8017948:	e0bfab17 	ldw	r2,-340(fp)
 801794c:	1885c83a 	sub	r2,r3,r2
 8017950:	e0ffac17 	ldw	r3,-336(fp)
 8017954:	1885883a 	add	r2,r3,r2
 8017958:	e0bfac15 	stw	r2,-336(fp)
		tmp3 += z2 + tmp1;
 801795c:	e0ffa817 	ldw	r3,-352(fp)
 8017960:	e0bfab17 	ldw	r2,-340(fp)
 8017964:	1885883a 	add	r2,r3,r2
 8017968:	e0ffaa17 	ldw	r3,-344(fp)
 801796c:	1885883a 	add	r2,r3,r2
 8017970:	e0bfaa15 	stw	r2,-344(fp)
		tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8017974:	e0ffa717 	ldw	r3,-356(fp)
 8017978:	e0bfa917 	ldw	r2,-348(fp)
 801797c:	1887c83a 	sub	r3,r3,r2
 8017980:	e0bfb217 	ldw	r2,-312(fp)
 8017984:	1885c83a 	sub	r2,r3,r2
 8017988:	1009883a 	mov	r4,r2
 801798c:	0149cc44 	movi	r5,10033
 8017990:	802c2180 	call	802c218 <__mulsi3>
 8017994:	e0bfab15 	stw	r2,-340(fp)

		/* Final output stage */

		wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8017998:	e0ffaf17 	ldw	r3,-324(fp)
 801799c:	e0bfa617 	ldw	r2,-360(fp)
 80179a0:	1885883a 	add	r2,r3,r2
 80179a4:	1007d2fa 	srai	r3,r2,11
 80179a8:	e0bfa317 	ldw	r2,-372(fp)
 80179ac:	10c00015 	stw	r3,0(r2)
		wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80179b0:	e0bfa317 	ldw	r2,-372(fp)
 80179b4:	10804004 	addi	r2,r2,256
 80179b8:	e13faf17 	ldw	r4,-324(fp)
 80179bc:	e0ffa617 	ldw	r3,-360(fp)
 80179c0:	20c7c83a 	sub	r3,r4,r3
 80179c4:	1807d2fa 	srai	r3,r3,11
 80179c8:	10c00015 	stw	r3,0(r2)
		wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 80179cc:	e0bfa317 	ldw	r2,-372(fp)
 80179d0:	10800804 	addi	r2,r2,32
 80179d4:	e13fad17 	ldw	r4,-332(fp)
 80179d8:	e0ffab17 	ldw	r3,-340(fp)
 80179dc:	20c7883a 	add	r3,r4,r3
 80179e0:	1807d2fa 	srai	r3,r3,11
 80179e4:	10c00015 	stw	r3,0(r2)
		wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 80179e8:	e0bfa317 	ldw	r2,-372(fp)
 80179ec:	10803804 	addi	r2,r2,224
 80179f0:	e13fad17 	ldw	r4,-332(fp)
 80179f4:	e0ffab17 	ldw	r3,-340(fp)
 80179f8:	20c7c83a 	sub	r3,r4,r3
 80179fc:	1807d2fa 	srai	r3,r3,11
 8017a00:	10c00015 	stw	r3,0(r2)
		wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8017a04:	e0bfa317 	ldw	r2,-372(fp)
 8017a08:	10801004 	addi	r2,r2,64
 8017a0c:	e13fb017 	ldw	r4,-320(fp)
 8017a10:	e0ffac17 	ldw	r3,-336(fp)
 8017a14:	20c7883a 	add	r3,r4,r3
 8017a18:	1807d2fa 	srai	r3,r3,11
 8017a1c:	10c00015 	stw	r3,0(r2)
		wsptr[8*6] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8017a20:	e0bfa317 	ldw	r2,-372(fp)
 8017a24:	10803004 	addi	r2,r2,192
 8017a28:	e13fb017 	ldw	r4,-320(fp)
 8017a2c:	e0ffac17 	ldw	r3,-336(fp)
 8017a30:	20c7c83a 	sub	r3,r4,r3
 8017a34:	1807d2fa 	srai	r3,r3,11
 8017a38:	10c00015 	stw	r3,0(r2)
		wsptr[8*3] = (int) RIGHT_SHIFT(tmp13 + tmp3, CONST_BITS-PASS1_BITS);
 8017a3c:	e0bfa317 	ldw	r2,-372(fp)
 8017a40:	10801804 	addi	r2,r2,96
 8017a44:	e13fb117 	ldw	r4,-316(fp)
 8017a48:	e0ffaa17 	ldw	r3,-344(fp)
 8017a4c:	20c7883a 	add	r3,r4,r3
 8017a50:	1807d2fa 	srai	r3,r3,11
 8017a54:	10c00015 	stw	r3,0(r2)
		wsptr[8*5] = (int) RIGHT_SHIFT(tmp13 - tmp3, CONST_BITS-PASS1_BITS);
 8017a58:	e0bfa317 	ldw	r2,-372(fp)
 8017a5c:	10802804 	addi	r2,r2,160
 8017a60:	e13fb117 	ldw	r4,-316(fp)
 8017a64:	e0ffaa17 	ldw	r3,-344(fp)
 8017a68:	20c7c83a 	sub	r3,r4,r3
 8017a6c:	1807d2fa 	srai	r3,r3,11
 8017a70:	10c00015 	stw	r3,0(r2)
		wsptr[8*4] = (int) RIGHT_SHIFT(tmp14, CONST_BITS-PASS1_BITS);
 8017a74:	e0bfa317 	ldw	r2,-372(fp)
 8017a78:	10802004 	addi	r2,r2,128
 8017a7c:	e0ffae17 	ldw	r3,-328(fp)
 8017a80:	1807d2fa 	srai	r3,r3,11
 8017a84:	10c00015 	stw	r3,0(r2)
		/* Pass 1: process columns from input, store into work array. */

		inptr = coef_block;
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
	wsptr = workspace;
	for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8017a88:	e0bfa417 	ldw	r2,-368(fp)
 8017a8c:	10800044 	addi	r2,r2,1
 8017a90:	e0bfa415 	stw	r2,-368(fp)
 8017a94:	e0bfa117 	ldw	r2,-380(fp)
 8017a98:	10800084 	addi	r2,r2,2
 8017a9c:	e0bfa115 	stw	r2,-380(fp)
 8017aa0:	e0bfa217 	ldw	r2,-376(fp)
 8017aa4:	10800104 	addi	r2,r2,4
 8017aa8:	e0bfa215 	stw	r2,-376(fp)
 8017aac:	e0bfa317 	ldw	r2,-372(fp)
 8017ab0:	10800104 	addi	r2,r2,4
 8017ab4:	e0bfa315 	stw	r2,-372(fp)
 8017ab8:	e0bfa417 	ldw	r2,-368(fp)
 8017abc:	10800210 	cmplti	r2,r2,8
 8017ac0:	103ed51e 	bne	r2,zero,8017618 <jpeg_idct_9x9+0x54>
		wsptr[8*4] = (int) RIGHT_SHIFT(tmp14, CONST_BITS-PASS1_BITS);
	}

	/* Pass 2: process 9 rows from work array, store into output array. */

	wsptr = workspace;
 8017ac4:	e0bfb404 	addi	r2,fp,-304
 8017ac8:	e0bfa315 	stw	r2,-372(fp)
	for (ctr = 0; ctr < 9; ctr++) {
 8017acc:	e03fa415 	stw	zero,-368(fp)
 8017ad0:	00010606 	br	8017eec <jpeg_idct_9x9+0x928>
		outptr = output_buf[ctr] + output_col;
 8017ad4:	e0bfa417 	ldw	r2,-368(fp)
 8017ad8:	1085883a 	add	r2,r2,r2
 8017adc:	1085883a 	add	r2,r2,r2
 8017ae0:	e0ffff17 	ldw	r3,-4(fp)
 8017ae4:	1885883a 	add	r2,r3,r2
 8017ae8:	10c00017 	ldw	r3,0(r2)
 8017aec:	e0800217 	ldw	r2,8(fp)
 8017af0:	1885883a 	add	r2,r3,r2
 8017af4:	e0bfb315 	stw	r2,-308(fp)

		/* Even part */

		/* Add fudge factor here for final descale. */
		tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8017af8:	e0bfa317 	ldw	r2,-372(fp)
 8017afc:	10800017 	ldw	r2,0(r2)
 8017b00:	10800404 	addi	r2,r2,16
 8017b04:	e0bfa615 	stw	r2,-360(fp)
		tmp0 <<= CONST_BITS;
 8017b08:	e0bfa617 	ldw	r2,-360(fp)
 8017b0c:	1004937a 	slli	r2,r2,13
 8017b10:	e0bfa615 	stw	r2,-360(fp)

		z1 = (INT32) wsptr[2];
 8017b14:	e0bfa317 	ldw	r2,-372(fp)
 8017b18:	10800204 	addi	r2,r2,8
 8017b1c:	10800017 	ldw	r2,0(r2)
 8017b20:	e0bfa715 	stw	r2,-356(fp)
		z2 = (INT32) wsptr[4];
 8017b24:	e0bfa317 	ldw	r2,-372(fp)
 8017b28:	10800404 	addi	r2,r2,16
 8017b2c:	10800017 	ldw	r2,0(r2)
 8017b30:	e0bfa815 	stw	r2,-352(fp)
		z3 = (INT32) wsptr[6];
 8017b34:	e0bfa317 	ldw	r2,-372(fp)
 8017b38:	10800604 	addi	r2,r2,24
 8017b3c:	10800017 	ldw	r2,0(r2)
 8017b40:	e0bfa915 	stw	r2,-348(fp)

		tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 8017b44:	e13fa917 	ldw	r4,-348(fp)
 8017b48:	0145a844 	movi	r5,5793
 8017b4c:	802c2180 	call	802c218 <__mulsi3>
 8017b50:	e0bfaa15 	stw	r2,-344(fp)
		tmp1 = tmp0 + tmp3;
 8017b54:	e0ffa617 	ldw	r3,-360(fp)
 8017b58:	e0bfaa17 	ldw	r2,-344(fp)
 8017b5c:	1885883a 	add	r2,r3,r2
 8017b60:	e0bfab15 	stw	r2,-340(fp)
		tmp2 = tmp0 - tmp3 - tmp3;
 8017b64:	e0ffa617 	ldw	r3,-360(fp)
 8017b68:	e0bfaa17 	ldw	r2,-344(fp)
 8017b6c:	1887c83a 	sub	r3,r3,r2
 8017b70:	e0bfaa17 	ldw	r2,-344(fp)
 8017b74:	1885c83a 	sub	r2,r3,r2
 8017b78:	e0bfac15 	stw	r2,-336(fp)

		tmp0 = MULTIPLY(z1 - z2, FIX(0.707106781)); /* c6 */
 8017b7c:	e0ffa717 	ldw	r3,-356(fp)
 8017b80:	e0bfa817 	ldw	r2,-352(fp)
 8017b84:	1885c83a 	sub	r2,r3,r2
 8017b88:	1009883a 	mov	r4,r2
 8017b8c:	0145a844 	movi	r5,5793
 8017b90:	802c2180 	call	802c218 <__mulsi3>
 8017b94:	e0bfa615 	stw	r2,-360(fp)
		tmp11 = tmp2 + tmp0;
 8017b98:	e0ffac17 	ldw	r3,-336(fp)
 8017b9c:	e0bfa617 	ldw	r2,-360(fp)
 8017ba0:	1885883a 	add	r2,r3,r2
 8017ba4:	e0bfad15 	stw	r2,-332(fp)
		tmp14 = tmp2 - tmp0 - tmp0;
 8017ba8:	e0ffac17 	ldw	r3,-336(fp)
 8017bac:	e0bfa617 	ldw	r2,-360(fp)
 8017bb0:	1887c83a 	sub	r3,r3,r2
 8017bb4:	e0bfa617 	ldw	r2,-360(fp)
 8017bb8:	1885c83a 	sub	r2,r3,r2
 8017bbc:	e0bfae15 	stw	r2,-328(fp)

		tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
 8017bc0:	e0ffa717 	ldw	r3,-356(fp)
 8017bc4:	e0bfa817 	ldw	r2,-352(fp)
 8017bc8:	1885883a 	add	r2,r3,r2
 8017bcc:	1009883a 	mov	r4,r2
 8017bd0:	014aa1c4 	movi	r5,10887
 8017bd4:	802c2180 	call	802c218 <__mulsi3>
 8017bd8:	e0bfa615 	stw	r2,-360(fp)
		tmp2 = MULTIPLY(z1, FIX(1.083350441));      /* c4 */
 8017bdc:	e13fa717 	ldw	r4,-356(fp)
 8017be0:	0148aac4 	movi	r5,8875
 8017be4:	802c2180 	call	802c218 <__mulsi3>
 8017be8:	e0bfac15 	stw	r2,-336(fp)
		tmp3 = MULTIPLY(z2, FIX(0.245575608));      /* c8 */
 8017bec:	e13fa817 	ldw	r4,-352(fp)
 8017bf0:	0141f704 	movi	r5,2012
 8017bf4:	802c2180 	call	802c218 <__mulsi3>
 8017bf8:	e0bfaa15 	stw	r2,-344(fp)

		tmp10 = tmp1 + tmp0 - tmp3;
 8017bfc:	e0ffab17 	ldw	r3,-340(fp)
 8017c00:	e0bfa617 	ldw	r2,-360(fp)
 8017c04:	1887883a 	add	r3,r3,r2
 8017c08:	e0bfaa17 	ldw	r2,-344(fp)
 8017c0c:	1885c83a 	sub	r2,r3,r2
 8017c10:	e0bfaf15 	stw	r2,-324(fp)
		tmp12 = tmp1 - tmp0 + tmp2;
 8017c14:	e0ffab17 	ldw	r3,-340(fp)
 8017c18:	e0bfa617 	ldw	r2,-360(fp)
 8017c1c:	1887c83a 	sub	r3,r3,r2
 8017c20:	e0bfac17 	ldw	r2,-336(fp)
 8017c24:	1885883a 	add	r2,r3,r2
 8017c28:	e0bfb015 	stw	r2,-320(fp)
		tmp13 = tmp1 - tmp2 + tmp3;
 8017c2c:	e0ffab17 	ldw	r3,-340(fp)
 8017c30:	e0bfac17 	ldw	r2,-336(fp)
 8017c34:	1887c83a 	sub	r3,r3,r2
 8017c38:	e0bfaa17 	ldw	r2,-344(fp)
 8017c3c:	1885883a 	add	r2,r3,r2
 8017c40:	e0bfb115 	stw	r2,-316(fp)

		/* Odd part */

		z1 = (INT32) wsptr[1];
 8017c44:	e0bfa317 	ldw	r2,-372(fp)
 8017c48:	10800104 	addi	r2,r2,4
 8017c4c:	10800017 	ldw	r2,0(r2)
 8017c50:	e0bfa715 	stw	r2,-356(fp)
		z2 = (INT32) wsptr[3];
 8017c54:	e0bfa317 	ldw	r2,-372(fp)
 8017c58:	10800304 	addi	r2,r2,12
 8017c5c:	10800017 	ldw	r2,0(r2)
 8017c60:	e0bfa815 	stw	r2,-352(fp)
		z3 = (INT32) wsptr[5];
 8017c64:	e0bfa317 	ldw	r2,-372(fp)
 8017c68:	10800504 	addi	r2,r2,20
 8017c6c:	10800017 	ldw	r2,0(r2)
 8017c70:	e0bfa915 	stw	r2,-348(fp)
		z4 = (INT32) wsptr[7];
 8017c74:	e0bfa317 	ldw	r2,-372(fp)
 8017c78:	10800704 	addi	r2,r2,28
 8017c7c:	10800017 	ldw	r2,0(r2)
 8017c80:	e0bfb215 	stw	r2,-312(fp)

		z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 8017c84:	e13fa817 	ldw	r4,-352(fp)
 8017c88:	017633c4 	movi	r5,-10033
 8017c8c:	802c2180 	call	802c218 <__mulsi3>
 8017c90:	e0bfa815 	stw	r2,-352(fp)

		tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 8017c94:	e0ffa717 	ldw	r3,-356(fp)
 8017c98:	e0bfa917 	ldw	r2,-348(fp)
 8017c9c:	1885883a 	add	r2,r3,r2
 8017ca0:	1009883a 	mov	r4,r2
 8017ca4:	014745c4 	movi	r5,7447
 8017ca8:	802c2180 	call	802c218 <__mulsi3>
 8017cac:	e0bfac15 	stw	r2,-336(fp)
		tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 8017cb0:	e0ffa717 	ldw	r3,-356(fp)
 8017cb4:	e0bfb217 	ldw	r2,-312(fp)
 8017cb8:	1885883a 	add	r2,r3,r2
 8017cbc:	1009883a 	mov	r4,r2
 8017cc0:	0143de84 	movi	r5,3962
 8017cc4:	802c2180 	call	802c218 <__mulsi3>
 8017cc8:	e0bfaa15 	stw	r2,-344(fp)
		tmp0 = tmp2 + tmp3 - z2;
 8017ccc:	e0ffac17 	ldw	r3,-336(fp)
 8017cd0:	e0bfaa17 	ldw	r2,-344(fp)
 8017cd4:	1887883a 	add	r3,r3,r2
 8017cd8:	e0bfa817 	ldw	r2,-352(fp)
 8017cdc:	1885c83a 	sub	r2,r3,r2
 8017ce0:	e0bfa615 	stw	r2,-360(fp)
		tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8017ce4:	e0ffa917 	ldw	r3,-348(fp)
 8017ce8:	e0bfb217 	ldw	r2,-312(fp)
 8017cec:	1885c83a 	sub	r2,r3,r2
 8017cf0:	1009883a 	mov	r4,r2
 8017cf4:	014b2444 	movi	r5,11409
 8017cf8:	802c2180 	call	802c218 <__mulsi3>
 8017cfc:	e0bfab15 	stw	r2,-340(fp)
		tmp2 += z2 - tmp1;
 8017d00:	e0ffa817 	ldw	r3,-352(fp)
 8017d04:	e0bfab17 	ldw	r2,-340(fp)
 8017d08:	1885c83a 	sub	r2,r3,r2
 8017d0c:	e0ffac17 	ldw	r3,-336(fp)
 8017d10:	1885883a 	add	r2,r3,r2
 8017d14:	e0bfac15 	stw	r2,-336(fp)
		tmp3 += z2 + tmp1;
 8017d18:	e0ffa817 	ldw	r3,-352(fp)
 8017d1c:	e0bfab17 	ldw	r2,-340(fp)
 8017d20:	1885883a 	add	r2,r3,r2
 8017d24:	e0ffaa17 	ldw	r3,-344(fp)
 8017d28:	1885883a 	add	r2,r3,r2
 8017d2c:	e0bfaa15 	stw	r2,-344(fp)
		tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8017d30:	e0ffa717 	ldw	r3,-356(fp)
 8017d34:	e0bfa917 	ldw	r2,-348(fp)
 8017d38:	1887c83a 	sub	r3,r3,r2
 8017d3c:	e0bfb217 	ldw	r2,-312(fp)
 8017d40:	1885c83a 	sub	r2,r3,r2
 8017d44:	1009883a 	mov	r4,r2
 8017d48:	0149cc44 	movi	r5,10033
 8017d4c:	802c2180 	call	802c218 <__mulsi3>
 8017d50:	e0bfab15 	stw	r2,-340(fp)

		/* Final output stage */

		outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8017d54:	e0ffaf17 	ldw	r3,-324(fp)
 8017d58:	e0bfa617 	ldw	r2,-360(fp)
 8017d5c:	1885883a 	add	r2,r3,r2
 8017d60:	1005d4ba 	srai	r2,r2,18
 8017d64:	1080ffcc 	andi	r2,r2,1023
 8017d68:	e0ffa517 	ldw	r3,-364(fp)
 8017d6c:	1885883a 	add	r2,r3,r2
 8017d70:	10c00003 	ldbu	r3,0(r2)
 8017d74:	e0bfb317 	ldw	r2,-308(fp)
 8017d78:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8017d7c:	e0bfb317 	ldw	r2,-308(fp)
 8017d80:	10800204 	addi	r2,r2,8
 8017d84:	e13faf17 	ldw	r4,-324(fp)
 8017d88:	e0ffa617 	ldw	r3,-360(fp)
 8017d8c:	20c7c83a 	sub	r3,r4,r3
 8017d90:	1807d4ba 	srai	r3,r3,18
 8017d94:	18c0ffcc 	andi	r3,r3,1023
 8017d98:	e13fa517 	ldw	r4,-364(fp)
 8017d9c:	20c7883a 	add	r3,r4,r3
 8017da0:	18c00003 	ldbu	r3,0(r3)
 8017da4:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8017da8:	e0bfb317 	ldw	r2,-308(fp)
 8017dac:	10800044 	addi	r2,r2,1
 8017db0:	e13fad17 	ldw	r4,-332(fp)
 8017db4:	e0ffab17 	ldw	r3,-340(fp)
 8017db8:	20c7883a 	add	r3,r4,r3
 8017dbc:	1807d4ba 	srai	r3,r3,18
 8017dc0:	18c0ffcc 	andi	r3,r3,1023
 8017dc4:	e13fa517 	ldw	r4,-364(fp)
 8017dc8:	20c7883a 	add	r3,r4,r3
 8017dcc:	18c00003 	ldbu	r3,0(r3)
 8017dd0:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8017dd4:	e0bfb317 	ldw	r2,-308(fp)
 8017dd8:	108001c4 	addi	r2,r2,7
 8017ddc:	e13fad17 	ldw	r4,-332(fp)
 8017de0:	e0ffab17 	ldw	r3,-340(fp)
 8017de4:	20c7c83a 	sub	r3,r4,r3
 8017de8:	1807d4ba 	srai	r3,r3,18
 8017dec:	18c0ffcc 	andi	r3,r3,1023
 8017df0:	e13fa517 	ldw	r4,-364(fp)
 8017df4:	20c7883a 	add	r3,r4,r3
 8017df8:	18c00003 	ldbu	r3,0(r3)
 8017dfc:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8017e00:	e0bfb317 	ldw	r2,-308(fp)
 8017e04:	10800084 	addi	r2,r2,2
 8017e08:	e13fb017 	ldw	r4,-320(fp)
 8017e0c:	e0ffac17 	ldw	r3,-336(fp)
 8017e10:	20c7883a 	add	r3,r4,r3
 8017e14:	1807d4ba 	srai	r3,r3,18
 8017e18:	18c0ffcc 	andi	r3,r3,1023
 8017e1c:	e13fa517 	ldw	r4,-364(fp)
 8017e20:	20c7883a 	add	r3,r4,r3
 8017e24:	18c00003 	ldbu	r3,0(r3)
 8017e28:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8017e2c:	e0bfb317 	ldw	r2,-308(fp)
 8017e30:	10800184 	addi	r2,r2,6
 8017e34:	e13fb017 	ldw	r4,-320(fp)
 8017e38:	e0ffac17 	ldw	r3,-336(fp)
 8017e3c:	20c7c83a 	sub	r3,r4,r3
 8017e40:	1807d4ba 	srai	r3,r3,18
 8017e44:	18c0ffcc 	andi	r3,r3,1023
 8017e48:	e13fa517 	ldw	r4,-364(fp)
 8017e4c:	20c7883a 	add	r3,r4,r3
 8017e50:	18c00003 	ldbu	r3,0(r3)
 8017e54:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp3,
 8017e58:	e0bfb317 	ldw	r2,-308(fp)
 8017e5c:	108000c4 	addi	r2,r2,3
 8017e60:	e13fb117 	ldw	r4,-316(fp)
 8017e64:	e0ffaa17 	ldw	r3,-344(fp)
 8017e68:	20c7883a 	add	r3,r4,r3
 8017e6c:	1807d4ba 	srai	r3,r3,18
 8017e70:	18c0ffcc 	andi	r3,r3,1023
 8017e74:	e13fa517 	ldw	r4,-364(fp)
 8017e78:	20c7883a 	add	r3,r4,r3
 8017e7c:	18c00003 	ldbu	r3,0(r3)
 8017e80:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp3,
 8017e84:	e0bfb317 	ldw	r2,-308(fp)
 8017e88:	10800144 	addi	r2,r2,5
 8017e8c:	e13fb117 	ldw	r4,-316(fp)
 8017e90:	e0ffaa17 	ldw	r3,-344(fp)
 8017e94:	20c7c83a 	sub	r3,r4,r3
 8017e98:	1807d4ba 	srai	r3,r3,18
 8017e9c:	18c0ffcc 	andi	r3,r3,1023
 8017ea0:	e13fa517 	ldw	r4,-364(fp)
 8017ea4:	20c7883a 	add	r3,r4,r3
 8017ea8:	18c00003 	ldbu	r3,0(r3)
 8017eac:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp14,
 8017eb0:	e0bfb317 	ldw	r2,-308(fp)
 8017eb4:	10800104 	addi	r2,r2,4
 8017eb8:	e0ffae17 	ldw	r3,-328(fp)
 8017ebc:	1807d4ba 	srai	r3,r3,18
 8017ec0:	18c0ffcc 	andi	r3,r3,1023
 8017ec4:	e13fa517 	ldw	r4,-364(fp)
 8017ec8:	20c7883a 	add	r3,r4,r3
 8017ecc:	18c00003 	ldbu	r3,0(r3)
 8017ed0:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 8;		/* advance pointer to next row */
 8017ed4:	e0bfa317 	ldw	r2,-372(fp)
 8017ed8:	10800804 	addi	r2,r2,32
 8017edc:	e0bfa315 	stw	r2,-372(fp)
	}

	/* Pass 2: process 9 rows from work array, store into output array. */

	wsptr = workspace;
	for (ctr = 0; ctr < 9; ctr++) {
 8017ee0:	e0bfa417 	ldw	r2,-368(fp)
 8017ee4:	10800044 	addi	r2,r2,1
 8017ee8:	e0bfa415 	stw	r2,-368(fp)
 8017eec:	e0bfa417 	ldw	r2,-368(fp)
 8017ef0:	10800250 	cmplti	r2,r2,9
 8017ef4:	103ef71e 	bne	r2,zero,8017ad4 <jpeg_idct_9x9+0x510>
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 8;		/* advance pointer to next row */
	}
}
 8017ef8:	e037883a 	mov	sp,fp
 8017efc:	dfc00117 	ldw	ra,4(sp)
 8017f00:	df000017 	ldw	fp,0(sp)
 8017f04:	dec00204 	addi	sp,sp,8
 8017f08:	f800283a 	ret

08017f0c <jpeg_idct_10x10>:

GLOBAL(void)
	jpeg_idct_10x10 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8017f0c:	deff9504 	addi	sp,sp,-428
 8017f10:	dfc06a15 	stw	ra,424(sp)
 8017f14:	df006915 	stw	fp,420(sp)
 8017f18:	df006904 	addi	fp,sp,420
 8017f1c:	e13ffc15 	stw	r4,-16(fp)
 8017f20:	e17ffd15 	stw	r5,-12(fp)
 8017f24:	e1bffe15 	stw	r6,-8(fp)
 8017f28:	e1ffff15 	stw	r7,-4(fp)
	INT32 z1, z2, z3, z4, z5;
	JCOEFPTR inptr;
	ISLOW_MULT_TYPE * quantptr;
	int * wsptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8017f2c:	e0bffc17 	ldw	r2,-16(fp)
 8017f30:	10804917 	ldw	r2,292(r2)
 8017f34:	10802004 	addi	r2,r2,128
 8017f38:	e0bf9b15 	stw	r2,-404(fp)
	int workspace[8*10];	/* buffers data between passes */
	SHIFT_TEMPS

		/* Pass 1: process columns from input, store into work array. */

		inptr = coef_block;
 8017f3c:	e0bffe17 	ldw	r2,-8(fp)
 8017f40:	e0bf9715 	stw	r2,-420(fp)
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8017f44:	e0bffd17 	ldw	r2,-12(fp)
 8017f48:	10801517 	ldw	r2,84(r2)
 8017f4c:	e0bf9815 	stw	r2,-416(fp)
	wsptr = workspace;
 8017f50:	e0bfac04 	addi	r2,fp,-336
 8017f54:	e0bf9915 	stw	r2,-412(fp)
	for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8017f58:	e03f9a15 	stw	zero,-408(fp)
 8017f5c:	00014606 	br	8018478 <jpeg_idct_10x10+0x56c>
		/* Even part */

		z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8017f60:	e0bf9717 	ldw	r2,-420(fp)
 8017f64:	1080000b 	ldhu	r2,0(r2)
 8017f68:	10ffffcc 	andi	r3,r2,65535
 8017f6c:	18e0001c 	xori	r3,r3,32768
 8017f70:	18e00004 	addi	r3,r3,-32768
 8017f74:	e0bf9817 	ldw	r2,-416(fp)
 8017f78:	10800017 	ldw	r2,0(r2)
 8017f7c:	1809883a 	mov	r4,r3
 8017f80:	100b883a 	mov	r5,r2
 8017f84:	802c2180 	call	802c218 <__mulsi3>
 8017f88:	e0bf9c15 	stw	r2,-400(fp)
		z3 <<= CONST_BITS;
 8017f8c:	e0bf9c17 	ldw	r2,-400(fp)
 8017f90:	1004937a 	slli	r2,r2,13
 8017f94:	e0bf9c15 	stw	r2,-400(fp)
		/* Add fudge factor here for final descale. */
		z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 8017f98:	e0bf9c17 	ldw	r2,-400(fp)
 8017f9c:	10810004 	addi	r2,r2,1024
 8017fa0:	e0bf9c15 	stw	r2,-400(fp)
		z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8017fa4:	e0bf9717 	ldw	r2,-420(fp)
 8017fa8:	10801004 	addi	r2,r2,64
 8017fac:	1080000b 	ldhu	r2,0(r2)
 8017fb0:	10ffffcc 	andi	r3,r2,65535
 8017fb4:	18e0001c 	xori	r3,r3,32768
 8017fb8:	18e00004 	addi	r3,r3,-32768
 8017fbc:	e0bf9817 	ldw	r2,-416(fp)
 8017fc0:	10802004 	addi	r2,r2,128
 8017fc4:	10800017 	ldw	r2,0(r2)
 8017fc8:	1809883a 	mov	r4,r3
 8017fcc:	100b883a 	mov	r5,r2
 8017fd0:	802c2180 	call	802c218 <__mulsi3>
 8017fd4:	e0bf9d15 	stw	r2,-396(fp)
		z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8017fd8:	e13f9d17 	ldw	r4,-396(fp)
 8017fdc:	01492744 	movi	r5,9373
 8017fe0:	802c2180 	call	802c218 <__mulsi3>
 8017fe4:	e0bf9e15 	stw	r2,-392(fp)
		z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8017fe8:	e13f9d17 	ldw	r4,-396(fp)
 8017fec:	01437f04 	movi	r5,3580
 8017ff0:	802c2180 	call	802c218 <__mulsi3>
 8017ff4:	e0bf9f15 	stw	r2,-388(fp)
		tmp10 = z3 + z1;
 8017ff8:	e0ff9c17 	ldw	r3,-400(fp)
 8017ffc:	e0bf9e17 	ldw	r2,-392(fp)
 8018000:	1885883a 	add	r2,r3,r2
 8018004:	e0bfa015 	stw	r2,-384(fp)
		tmp11 = z3 - z2;
 8018008:	e0ff9c17 	ldw	r3,-400(fp)
 801800c:	e0bf9f17 	ldw	r2,-388(fp)
 8018010:	1885c83a 	sub	r2,r3,r2
 8018014:	e0bfa115 	stw	r2,-380(fp)

		tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8018018:	e0ff9e17 	ldw	r3,-392(fp)
 801801c:	e0bf9f17 	ldw	r2,-388(fp)
 8018020:	1885c83a 	sub	r2,r3,r2
 8018024:	1085883a 	add	r2,r2,r2
 8018028:	e0ff9c17 	ldw	r3,-400(fp)
 801802c:	1885c83a 	sub	r2,r3,r2
 8018030:	1005d2fa 	srai	r2,r2,11
 8018034:	e0bfa215 	stw	r2,-376(fp)
			CONST_BITS-PASS1_BITS);

		z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8018038:	e0bf9717 	ldw	r2,-420(fp)
 801803c:	10800804 	addi	r2,r2,32
 8018040:	1080000b 	ldhu	r2,0(r2)
 8018044:	10ffffcc 	andi	r3,r2,65535
 8018048:	18e0001c 	xori	r3,r3,32768
 801804c:	18e00004 	addi	r3,r3,-32768
 8018050:	e0bf9817 	ldw	r2,-416(fp)
 8018054:	10801004 	addi	r2,r2,64
 8018058:	10800017 	ldw	r2,0(r2)
 801805c:	1809883a 	mov	r4,r3
 8018060:	100b883a 	mov	r5,r2
 8018064:	802c2180 	call	802c218 <__mulsi3>
 8018068:	e0bf9f15 	stw	r2,-388(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801806c:	e0bf9717 	ldw	r2,-420(fp)
 8018070:	10801804 	addi	r2,r2,96
 8018074:	1080000b 	ldhu	r2,0(r2)
 8018078:	10ffffcc 	andi	r3,r2,65535
 801807c:	18e0001c 	xori	r3,r3,32768
 8018080:	18e00004 	addi	r3,r3,-32768
 8018084:	e0bf9817 	ldw	r2,-416(fp)
 8018088:	10803004 	addi	r2,r2,192
 801808c:	10800017 	ldw	r2,0(r2)
 8018090:	1809883a 	mov	r4,r3
 8018094:	100b883a 	mov	r5,r2
 8018098:	802c2180 	call	802c218 <__mulsi3>
 801809c:	e0bf9c15 	stw	r2,-400(fp)

		z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 80180a0:	e0ff9f17 	ldw	r3,-388(fp)
 80180a4:	e0bf9c17 	ldw	r2,-400(fp)
 80180a8:	1885883a 	add	r2,r3,r2
 80180ac:	1009883a 	mov	r4,r2
 80180b0:	0146a684 	movi	r5,6810
 80180b4:	802c2180 	call	802c218 <__mulsi3>
 80180b8:	e0bf9e15 	stw	r2,-392(fp)
		tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 80180bc:	e13f9f17 	ldw	r4,-388(fp)
 80180c0:	01441c44 	movi	r5,4209
 80180c4:	802c2180 	call	802c218 <__mulsi3>
 80180c8:	1007883a 	mov	r3,r2
 80180cc:	e0bf9e17 	ldw	r2,-392(fp)
 80180d0:	1885883a 	add	r2,r3,r2
 80180d4:	e0bfa315 	stw	r2,-372(fp)
		tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 80180d8:	e13f9c17 	ldw	r4,-400(fp)
 80180dc:	016e9704 	movi	r5,-17828
 80180e0:	802c2180 	call	802c218 <__mulsi3>
 80180e4:	1007883a 	mov	r3,r2
 80180e8:	e0bf9e17 	ldw	r2,-392(fp)
 80180ec:	1885883a 	add	r2,r3,r2
 80180f0:	e0bfa415 	stw	r2,-368(fp)

		tmp20 = tmp10 + tmp12;
 80180f4:	e0ffa017 	ldw	r3,-384(fp)
 80180f8:	e0bfa317 	ldw	r2,-372(fp)
 80180fc:	1885883a 	add	r2,r3,r2
 8018100:	e0bfa515 	stw	r2,-364(fp)
		tmp24 = tmp10 - tmp12;
 8018104:	e0ffa017 	ldw	r3,-384(fp)
 8018108:	e0bfa317 	ldw	r2,-372(fp)
 801810c:	1885c83a 	sub	r2,r3,r2
 8018110:	e0bfa615 	stw	r2,-360(fp)
		tmp21 = tmp11 + tmp13;
 8018114:	e0ffa117 	ldw	r3,-380(fp)
 8018118:	e0bfa417 	ldw	r2,-368(fp)
 801811c:	1885883a 	add	r2,r3,r2
 8018120:	e0bfa715 	stw	r2,-356(fp)
		tmp23 = tmp11 - tmp13;
 8018124:	e0ffa117 	ldw	r3,-380(fp)
 8018128:	e0bfa417 	ldw	r2,-368(fp)
 801812c:	1885c83a 	sub	r2,r3,r2
 8018130:	e0bfa815 	stw	r2,-352(fp)

		/* Odd part */

		z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8018134:	e0bf9717 	ldw	r2,-420(fp)
 8018138:	10800404 	addi	r2,r2,16
 801813c:	1080000b 	ldhu	r2,0(r2)
 8018140:	10ffffcc 	andi	r3,r2,65535
 8018144:	18e0001c 	xori	r3,r3,32768
 8018148:	18e00004 	addi	r3,r3,-32768
 801814c:	e0bf9817 	ldw	r2,-416(fp)
 8018150:	10800804 	addi	r2,r2,32
 8018154:	10800017 	ldw	r2,0(r2)
 8018158:	1809883a 	mov	r4,r3
 801815c:	100b883a 	mov	r5,r2
 8018160:	802c2180 	call	802c218 <__mulsi3>
 8018164:	e0bf9e15 	stw	r2,-392(fp)
		z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8018168:	e0bf9717 	ldw	r2,-420(fp)
 801816c:	10800c04 	addi	r2,r2,48
 8018170:	1080000b 	ldhu	r2,0(r2)
 8018174:	10ffffcc 	andi	r3,r2,65535
 8018178:	18e0001c 	xori	r3,r3,32768
 801817c:	18e00004 	addi	r3,r3,-32768
 8018180:	e0bf9817 	ldw	r2,-416(fp)
 8018184:	10801804 	addi	r2,r2,96
 8018188:	10800017 	ldw	r2,0(r2)
 801818c:	1809883a 	mov	r4,r3
 8018190:	100b883a 	mov	r5,r2
 8018194:	802c2180 	call	802c218 <__mulsi3>
 8018198:	e0bf9f15 	stw	r2,-388(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801819c:	e0bf9717 	ldw	r2,-420(fp)
 80181a0:	10801404 	addi	r2,r2,80
 80181a4:	1080000b 	ldhu	r2,0(r2)
 80181a8:	10ffffcc 	andi	r3,r2,65535
 80181ac:	18e0001c 	xori	r3,r3,32768
 80181b0:	18e00004 	addi	r3,r3,-32768
 80181b4:	e0bf9817 	ldw	r2,-416(fp)
 80181b8:	10802804 	addi	r2,r2,160
 80181bc:	10800017 	ldw	r2,0(r2)
 80181c0:	1809883a 	mov	r4,r3
 80181c4:	100b883a 	mov	r5,r2
 80181c8:	802c2180 	call	802c218 <__mulsi3>
 80181cc:	e0bf9c15 	stw	r2,-400(fp)
		z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80181d0:	e0bf9717 	ldw	r2,-420(fp)
 80181d4:	10801c04 	addi	r2,r2,112
 80181d8:	1080000b 	ldhu	r2,0(r2)
 80181dc:	10ffffcc 	andi	r3,r2,65535
 80181e0:	18e0001c 	xori	r3,r3,32768
 80181e4:	18e00004 	addi	r3,r3,-32768
 80181e8:	e0bf9817 	ldw	r2,-416(fp)
 80181ec:	10803804 	addi	r2,r2,224
 80181f0:	10800017 	ldw	r2,0(r2)
 80181f4:	1809883a 	mov	r4,r3
 80181f8:	100b883a 	mov	r5,r2
 80181fc:	802c2180 	call	802c218 <__mulsi3>
 8018200:	e0bf9d15 	stw	r2,-396(fp)

		tmp11 = z2 + z4;
 8018204:	e0ff9f17 	ldw	r3,-388(fp)
 8018208:	e0bf9d17 	ldw	r2,-396(fp)
 801820c:	1885883a 	add	r2,r3,r2
 8018210:	e0bfa115 	stw	r2,-380(fp)
		tmp13 = z2 - z4;
 8018214:	e0ff9f17 	ldw	r3,-388(fp)
 8018218:	e0bf9d17 	ldw	r2,-396(fp)
 801821c:	1885c83a 	sub	r2,r3,r2
 8018220:	e0bfa415 	stw	r2,-368(fp)

		tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8018224:	e13fa417 	ldw	r4,-368(fp)
 8018228:	014278c4 	movi	r5,2531
 801822c:	802c2180 	call	802c218 <__mulsi3>
 8018230:	e0bfa315 	stw	r2,-372(fp)
		z5 = z3 << CONST_BITS;
 8018234:	e0bf9c17 	ldw	r2,-400(fp)
 8018238:	1004937a 	slli	r2,r2,13
 801823c:	e0bfa915 	stw	r2,-348(fp)

		z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8018240:	e13fa117 	ldw	r4,-380(fp)
 8018244:	01479bc4 	movi	r5,7791
 8018248:	802c2180 	call	802c218 <__mulsi3>
 801824c:	e0bf9f15 	stw	r2,-388(fp)
		z4 = z5 + tmp12;
 8018250:	e0ffa917 	ldw	r3,-348(fp)
 8018254:	e0bfa317 	ldw	r2,-372(fp)
 8018258:	1885883a 	add	r2,r3,r2
 801825c:	e0bf9d15 	stw	r2,-396(fp)

		tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8018260:	e13f9e17 	ldw	r4,-392(fp)
 8018264:	014b2cc4 	movi	r5,11443
 8018268:	802c2180 	call	802c218 <__mulsi3>
 801826c:	1007883a 	mov	r3,r2
 8018270:	e0bf9f17 	ldw	r2,-388(fp)
 8018274:	1887883a 	add	r3,r3,r2
 8018278:	e0bf9d17 	ldw	r2,-396(fp)
 801827c:	1885883a 	add	r2,r3,r2
 8018280:	e0bfa015 	stw	r2,-384(fp)
		tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8018284:	e13f9e17 	ldw	r4,-392(fp)
 8018288:	0141c504 	movi	r5,1812
 801828c:	802c2180 	call	802c218 <__mulsi3>
 8018290:	1007883a 	mov	r3,r2
 8018294:	e0bf9f17 	ldw	r2,-388(fp)
 8018298:	1887c83a 	sub	r3,r3,r2
 801829c:	e0bf9d17 	ldw	r2,-396(fp)
 80182a0:	1885883a 	add	r2,r3,r2
 80182a4:	e0bfaa15 	stw	r2,-344(fp)

		z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 80182a8:	e13fa117 	ldw	r4,-380(fp)
 80182ac:	0144b3c4 	movi	r5,4815
 80182b0:	802c2180 	call	802c218 <__mulsi3>
 80182b4:	e0bf9f15 	stw	r2,-388(fp)
		z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 80182b8:	e0ffa917 	ldw	r3,-348(fp)
 80182bc:	e0bfa317 	ldw	r2,-372(fp)
 80182c0:	1887c83a 	sub	r3,r3,r2
 80182c4:	e0bfa417 	ldw	r2,-368(fp)
 80182c8:	1004933a 	slli	r2,r2,12
 80182cc:	1885c83a 	sub	r2,r3,r2
 80182d0:	e0bf9d15 	stw	r2,-396(fp)

		tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 80182d4:	e0ff9e17 	ldw	r3,-392(fp)
 80182d8:	e0bfa417 	ldw	r2,-368(fp)
 80182dc:	1887c83a 	sub	r3,r3,r2
 80182e0:	e0bf9c17 	ldw	r2,-400(fp)
 80182e4:	1885c83a 	sub	r2,r3,r2
 80182e8:	1085883a 	add	r2,r2,r2
 80182ec:	1085883a 	add	r2,r2,r2
 80182f0:	e0bfa315 	stw	r2,-372(fp)

		tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 80182f4:	e13f9e17 	ldw	r4,-392(fp)
 80182f8:	014a14c4 	movi	r5,10323
 80182fc:	802c2180 	call	802c218 <__mulsi3>
 8018300:	1007883a 	mov	r3,r2
 8018304:	e0bf9f17 	ldw	r2,-388(fp)
 8018308:	1887c83a 	sub	r3,r3,r2
 801830c:	e0bf9d17 	ldw	r2,-396(fp)
 8018310:	1885c83a 	sub	r2,r3,r2
 8018314:	e0bfa115 	stw	r2,-380(fp)
		tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8018318:	e13f9e17 	ldw	r4,-392(fp)
 801831c:	01452304 	movi	r5,5260
 8018320:	802c2180 	call	802c218 <__mulsi3>
 8018324:	1007883a 	mov	r3,r2
 8018328:	e0bf9f17 	ldw	r2,-388(fp)
 801832c:	1887c83a 	sub	r3,r3,r2
 8018330:	e0bf9d17 	ldw	r2,-396(fp)
 8018334:	1885883a 	add	r2,r3,r2
 8018338:	e0bfa415 	stw	r2,-368(fp)

		/* Final output stage */

		wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801833c:	e0ffa517 	ldw	r3,-364(fp)
 8018340:	e0bfa017 	ldw	r2,-384(fp)
 8018344:	1885883a 	add	r2,r3,r2
 8018348:	1007d2fa 	srai	r3,r2,11
 801834c:	e0bf9917 	ldw	r2,-412(fp)
 8018350:	10c00015 	stw	r3,0(r2)
		wsptr[8*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8018354:	e0bf9917 	ldw	r2,-412(fp)
 8018358:	10804804 	addi	r2,r2,288
 801835c:	e13fa517 	ldw	r4,-364(fp)
 8018360:	e0ffa017 	ldw	r3,-384(fp)
 8018364:	20c7c83a 	sub	r3,r4,r3
 8018368:	1807d2fa 	srai	r3,r3,11
 801836c:	10c00015 	stw	r3,0(r2)
		wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8018370:	e0bf9917 	ldw	r2,-412(fp)
 8018374:	10800804 	addi	r2,r2,32
 8018378:	e13fa717 	ldw	r4,-356(fp)
 801837c:	e0ffa117 	ldw	r3,-380(fp)
 8018380:	20c7883a 	add	r3,r4,r3
 8018384:	1807d2fa 	srai	r3,r3,11
 8018388:	10c00015 	stw	r3,0(r2)
		wsptr[8*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801838c:	e0bf9917 	ldw	r2,-412(fp)
 8018390:	10804004 	addi	r2,r2,256
 8018394:	e13fa717 	ldw	r4,-356(fp)
 8018398:	e0ffa117 	ldw	r3,-380(fp)
 801839c:	20c7c83a 	sub	r3,r4,r3
 80183a0:	1807d2fa 	srai	r3,r3,11
 80183a4:	10c00015 	stw	r3,0(r2)
		wsptr[8*2] = (int) (tmp22 + tmp12);
 80183a8:	e0bf9917 	ldw	r2,-412(fp)
 80183ac:	10801004 	addi	r2,r2,64
 80183b0:	e13fa217 	ldw	r4,-376(fp)
 80183b4:	e0ffa317 	ldw	r3,-372(fp)
 80183b8:	20c7883a 	add	r3,r4,r3
 80183bc:	10c00015 	stw	r3,0(r2)
		wsptr[8*7] = (int) (tmp22 - tmp12);
 80183c0:	e0bf9917 	ldw	r2,-412(fp)
 80183c4:	10803804 	addi	r2,r2,224
 80183c8:	e13fa217 	ldw	r4,-376(fp)
 80183cc:	e0ffa317 	ldw	r3,-372(fp)
 80183d0:	20c7c83a 	sub	r3,r4,r3
 80183d4:	10c00015 	stw	r3,0(r2)
		wsptr[8*3] = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80183d8:	e0bf9917 	ldw	r2,-412(fp)
 80183dc:	10801804 	addi	r2,r2,96
 80183e0:	e13fa817 	ldw	r4,-352(fp)
 80183e4:	e0ffa417 	ldw	r3,-368(fp)
 80183e8:	20c7883a 	add	r3,r4,r3
 80183ec:	1807d2fa 	srai	r3,r3,11
 80183f0:	10c00015 	stw	r3,0(r2)
		wsptr[8*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80183f4:	e0bf9917 	ldw	r2,-412(fp)
 80183f8:	10803004 	addi	r2,r2,192
 80183fc:	e13fa817 	ldw	r4,-352(fp)
 8018400:	e0ffa417 	ldw	r3,-368(fp)
 8018404:	20c7c83a 	sub	r3,r4,r3
 8018408:	1807d2fa 	srai	r3,r3,11
 801840c:	10c00015 	stw	r3,0(r2)
		wsptr[8*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8018410:	e0bf9917 	ldw	r2,-412(fp)
 8018414:	10802004 	addi	r2,r2,128
 8018418:	e13fa617 	ldw	r4,-360(fp)
 801841c:	e0ffaa17 	ldw	r3,-344(fp)
 8018420:	20c7883a 	add	r3,r4,r3
 8018424:	1807d2fa 	srai	r3,r3,11
 8018428:	10c00015 	stw	r3,0(r2)
		wsptr[8*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 801842c:	e0bf9917 	ldw	r2,-412(fp)
 8018430:	10802804 	addi	r2,r2,160
 8018434:	e13fa617 	ldw	r4,-360(fp)
 8018438:	e0ffaa17 	ldw	r3,-344(fp)
 801843c:	20c7c83a 	sub	r3,r4,r3
 8018440:	1807d2fa 	srai	r3,r3,11
 8018444:	10c00015 	stw	r3,0(r2)
		/* Pass 1: process columns from input, store into work array. */

		inptr = coef_block;
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
	wsptr = workspace;
	for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8018448:	e0bf9a17 	ldw	r2,-408(fp)
 801844c:	10800044 	addi	r2,r2,1
 8018450:	e0bf9a15 	stw	r2,-408(fp)
 8018454:	e0bf9717 	ldw	r2,-420(fp)
 8018458:	10800084 	addi	r2,r2,2
 801845c:	e0bf9715 	stw	r2,-420(fp)
 8018460:	e0bf9817 	ldw	r2,-416(fp)
 8018464:	10800104 	addi	r2,r2,4
 8018468:	e0bf9815 	stw	r2,-416(fp)
 801846c:	e0bf9917 	ldw	r2,-412(fp)
 8018470:	10800104 	addi	r2,r2,4
 8018474:	e0bf9915 	stw	r2,-412(fp)
 8018478:	e0bf9a17 	ldw	r2,-408(fp)
 801847c:	10800210 	cmplti	r2,r2,8
 8018480:	103eb71e 	bne	r2,zero,8017f60 <jpeg_idct_10x10+0x54>
		wsptr[8*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
	}

	/* Pass 2: process 10 rows from work array, store into output array. */

	wsptr = workspace;
 8018484:	e0bfac04 	addi	r2,fp,-336
 8018488:	e0bf9915 	stw	r2,-412(fp)
	for (ctr = 0; ctr < 10; ctr++) {
 801848c:	e03f9a15 	stw	zero,-408(fp)
 8018490:	00012806 	br	8018934 <jpeg_idct_10x10+0xa28>
		outptr = output_buf[ctr] + output_col;
 8018494:	e0bf9a17 	ldw	r2,-408(fp)
 8018498:	1085883a 	add	r2,r2,r2
 801849c:	1085883a 	add	r2,r2,r2
 80184a0:	e0ffff17 	ldw	r3,-4(fp)
 80184a4:	1885883a 	add	r2,r3,r2
 80184a8:	10c00017 	ldw	r3,0(r2)
 80184ac:	e0800217 	ldw	r2,8(fp)
 80184b0:	1885883a 	add	r2,r3,r2
 80184b4:	e0bfab15 	stw	r2,-340(fp)

		/* Even part */

		/* Add fudge factor here for final descale. */
		z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80184b8:	e0bf9917 	ldw	r2,-412(fp)
 80184bc:	10800017 	ldw	r2,0(r2)
 80184c0:	10800404 	addi	r2,r2,16
 80184c4:	e0bf9c15 	stw	r2,-400(fp)
		z3 <<= CONST_BITS;
 80184c8:	e0bf9c17 	ldw	r2,-400(fp)
 80184cc:	1004937a 	slli	r2,r2,13
 80184d0:	e0bf9c15 	stw	r2,-400(fp)
		z4 = (INT32) wsptr[4];
 80184d4:	e0bf9917 	ldw	r2,-412(fp)
 80184d8:	10800404 	addi	r2,r2,16
 80184dc:	10800017 	ldw	r2,0(r2)
 80184e0:	e0bf9d15 	stw	r2,-396(fp)
		z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 80184e4:	e13f9d17 	ldw	r4,-396(fp)
 80184e8:	01492744 	movi	r5,9373
 80184ec:	802c2180 	call	802c218 <__mulsi3>
 80184f0:	e0bf9e15 	stw	r2,-392(fp)
		z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 80184f4:	e13f9d17 	ldw	r4,-396(fp)
 80184f8:	01437f04 	movi	r5,3580
 80184fc:	802c2180 	call	802c218 <__mulsi3>
 8018500:	e0bf9f15 	stw	r2,-388(fp)
		tmp10 = z3 + z1;
 8018504:	e0ff9c17 	ldw	r3,-400(fp)
 8018508:	e0bf9e17 	ldw	r2,-392(fp)
 801850c:	1885883a 	add	r2,r3,r2
 8018510:	e0bfa015 	stw	r2,-384(fp)
		tmp11 = z3 - z2;
 8018514:	e0ff9c17 	ldw	r3,-400(fp)
 8018518:	e0bf9f17 	ldw	r2,-388(fp)
 801851c:	1885c83a 	sub	r2,r3,r2
 8018520:	e0bfa115 	stw	r2,-380(fp)

		tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 8018524:	e0ff9e17 	ldw	r3,-392(fp)
 8018528:	e0bf9f17 	ldw	r2,-388(fp)
 801852c:	1885c83a 	sub	r2,r3,r2
 8018530:	1085883a 	add	r2,r2,r2
 8018534:	e0ff9c17 	ldw	r3,-400(fp)
 8018538:	1885c83a 	sub	r2,r3,r2
 801853c:	e0bfa215 	stw	r2,-376(fp)

		z2 = (INT32) wsptr[2];
 8018540:	e0bf9917 	ldw	r2,-412(fp)
 8018544:	10800204 	addi	r2,r2,8
 8018548:	10800017 	ldw	r2,0(r2)
 801854c:	e0bf9f15 	stw	r2,-388(fp)
		z3 = (INT32) wsptr[6];
 8018550:	e0bf9917 	ldw	r2,-412(fp)
 8018554:	10800604 	addi	r2,r2,24
 8018558:	10800017 	ldw	r2,0(r2)
 801855c:	e0bf9c15 	stw	r2,-400(fp)

		z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8018560:	e0ff9f17 	ldw	r3,-388(fp)
 8018564:	e0bf9c17 	ldw	r2,-400(fp)
 8018568:	1885883a 	add	r2,r3,r2
 801856c:	1009883a 	mov	r4,r2
 8018570:	0146a684 	movi	r5,6810
 8018574:	802c2180 	call	802c218 <__mulsi3>
 8018578:	e0bf9e15 	stw	r2,-392(fp)
		tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 801857c:	e13f9f17 	ldw	r4,-388(fp)
 8018580:	01441c44 	movi	r5,4209
 8018584:	802c2180 	call	802c218 <__mulsi3>
 8018588:	1007883a 	mov	r3,r2
 801858c:	e0bf9e17 	ldw	r2,-392(fp)
 8018590:	1885883a 	add	r2,r3,r2
 8018594:	e0bfa315 	stw	r2,-372(fp)
		tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 8018598:	e13f9c17 	ldw	r4,-400(fp)
 801859c:	016e9704 	movi	r5,-17828
 80185a0:	802c2180 	call	802c218 <__mulsi3>
 80185a4:	1007883a 	mov	r3,r2
 80185a8:	e0bf9e17 	ldw	r2,-392(fp)
 80185ac:	1885883a 	add	r2,r3,r2
 80185b0:	e0bfa415 	stw	r2,-368(fp)

		tmp20 = tmp10 + tmp12;
 80185b4:	e0ffa017 	ldw	r3,-384(fp)
 80185b8:	e0bfa317 	ldw	r2,-372(fp)
 80185bc:	1885883a 	add	r2,r3,r2
 80185c0:	e0bfa515 	stw	r2,-364(fp)
		tmp24 = tmp10 - tmp12;
 80185c4:	e0ffa017 	ldw	r3,-384(fp)
 80185c8:	e0bfa317 	ldw	r2,-372(fp)
 80185cc:	1885c83a 	sub	r2,r3,r2
 80185d0:	e0bfa615 	stw	r2,-360(fp)
		tmp21 = tmp11 + tmp13;
 80185d4:	e0ffa117 	ldw	r3,-380(fp)
 80185d8:	e0bfa417 	ldw	r2,-368(fp)
 80185dc:	1885883a 	add	r2,r3,r2
 80185e0:	e0bfa715 	stw	r2,-356(fp)
		tmp23 = tmp11 - tmp13;
 80185e4:	e0ffa117 	ldw	r3,-380(fp)
 80185e8:	e0bfa417 	ldw	r2,-368(fp)
 80185ec:	1885c83a 	sub	r2,r3,r2
 80185f0:	e0bfa815 	stw	r2,-352(fp)

		/* Odd part */

		z1 = (INT32) wsptr[1];
 80185f4:	e0bf9917 	ldw	r2,-412(fp)
 80185f8:	10800104 	addi	r2,r2,4
 80185fc:	10800017 	ldw	r2,0(r2)
 8018600:	e0bf9e15 	stw	r2,-392(fp)
		z2 = (INT32) wsptr[3];
 8018604:	e0bf9917 	ldw	r2,-412(fp)
 8018608:	10800304 	addi	r2,r2,12
 801860c:	10800017 	ldw	r2,0(r2)
 8018610:	e0bf9f15 	stw	r2,-388(fp)
		z3 = (INT32) wsptr[5];
 8018614:	e0bf9917 	ldw	r2,-412(fp)
 8018618:	10800504 	addi	r2,r2,20
 801861c:	10800017 	ldw	r2,0(r2)
 8018620:	e0bf9c15 	stw	r2,-400(fp)
		z3 <<= CONST_BITS;
 8018624:	e0bf9c17 	ldw	r2,-400(fp)
 8018628:	1004937a 	slli	r2,r2,13
 801862c:	e0bf9c15 	stw	r2,-400(fp)
		z4 = (INT32) wsptr[7];
 8018630:	e0bf9917 	ldw	r2,-412(fp)
 8018634:	10800704 	addi	r2,r2,28
 8018638:	10800017 	ldw	r2,0(r2)
 801863c:	e0bf9d15 	stw	r2,-396(fp)

		tmp11 = z2 + z4;
 8018640:	e0ff9f17 	ldw	r3,-388(fp)
 8018644:	e0bf9d17 	ldw	r2,-396(fp)
 8018648:	1885883a 	add	r2,r3,r2
 801864c:	e0bfa115 	stw	r2,-380(fp)
		tmp13 = z2 - z4;
 8018650:	e0ff9f17 	ldw	r3,-388(fp)
 8018654:	e0bf9d17 	ldw	r2,-396(fp)
 8018658:	1885c83a 	sub	r2,r3,r2
 801865c:	e0bfa415 	stw	r2,-368(fp)

		tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8018660:	e13fa417 	ldw	r4,-368(fp)
 8018664:	014278c4 	movi	r5,2531
 8018668:	802c2180 	call	802c218 <__mulsi3>
 801866c:	e0bfa315 	stw	r2,-372(fp)

		z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8018670:	e13fa117 	ldw	r4,-380(fp)
 8018674:	01479bc4 	movi	r5,7791
 8018678:	802c2180 	call	802c218 <__mulsi3>
 801867c:	e0bf9f15 	stw	r2,-388(fp)
		z4 = z3 + tmp12;
 8018680:	e0ff9c17 	ldw	r3,-400(fp)
 8018684:	e0bfa317 	ldw	r2,-372(fp)
 8018688:	1885883a 	add	r2,r3,r2
 801868c:	e0bf9d15 	stw	r2,-396(fp)

		tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8018690:	e13f9e17 	ldw	r4,-392(fp)
 8018694:	014b2cc4 	movi	r5,11443
 8018698:	802c2180 	call	802c218 <__mulsi3>
 801869c:	1007883a 	mov	r3,r2
 80186a0:	e0bf9f17 	ldw	r2,-388(fp)
 80186a4:	1887883a 	add	r3,r3,r2
 80186a8:	e0bf9d17 	ldw	r2,-396(fp)
 80186ac:	1885883a 	add	r2,r3,r2
 80186b0:	e0bfa015 	stw	r2,-384(fp)
		tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 80186b4:	e13f9e17 	ldw	r4,-392(fp)
 80186b8:	0141c504 	movi	r5,1812
 80186bc:	802c2180 	call	802c218 <__mulsi3>
 80186c0:	1007883a 	mov	r3,r2
 80186c4:	e0bf9f17 	ldw	r2,-388(fp)
 80186c8:	1887c83a 	sub	r3,r3,r2
 80186cc:	e0bf9d17 	ldw	r2,-396(fp)
 80186d0:	1885883a 	add	r2,r3,r2
 80186d4:	e0bfaa15 	stw	r2,-344(fp)

		z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 80186d8:	e13fa117 	ldw	r4,-380(fp)
 80186dc:	0144b3c4 	movi	r5,4815
 80186e0:	802c2180 	call	802c218 <__mulsi3>
 80186e4:	e0bf9f15 	stw	r2,-388(fp)
		z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 80186e8:	e0ff9c17 	ldw	r3,-400(fp)
 80186ec:	e0bfa317 	ldw	r2,-372(fp)
 80186f0:	1887c83a 	sub	r3,r3,r2
 80186f4:	e0bfa417 	ldw	r2,-368(fp)
 80186f8:	1004933a 	slli	r2,r2,12
 80186fc:	1885c83a 	sub	r2,r3,r2
 8018700:	e0bf9d15 	stw	r2,-396(fp)

		tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 8018704:	e0ff9e17 	ldw	r3,-392(fp)
 8018708:	e0bfa417 	ldw	r2,-368(fp)
 801870c:	1885c83a 	sub	r2,r3,r2
 8018710:	1006937a 	slli	r3,r2,13
 8018714:	e0bf9c17 	ldw	r2,-400(fp)
 8018718:	1885c83a 	sub	r2,r3,r2
 801871c:	e0bfa315 	stw	r2,-372(fp)

		tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8018720:	e13f9e17 	ldw	r4,-392(fp)
 8018724:	014a14c4 	movi	r5,10323
 8018728:	802c2180 	call	802c218 <__mulsi3>
 801872c:	1007883a 	mov	r3,r2
 8018730:	e0bf9f17 	ldw	r2,-388(fp)
 8018734:	1887c83a 	sub	r3,r3,r2
 8018738:	e0bf9d17 	ldw	r2,-396(fp)
 801873c:	1885c83a 	sub	r2,r3,r2
 8018740:	e0bfa115 	stw	r2,-380(fp)
		tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8018744:	e13f9e17 	ldw	r4,-392(fp)
 8018748:	01452304 	movi	r5,5260
 801874c:	802c2180 	call	802c218 <__mulsi3>
 8018750:	1007883a 	mov	r3,r2
 8018754:	e0bf9f17 	ldw	r2,-388(fp)
 8018758:	1887c83a 	sub	r3,r3,r2
 801875c:	e0bf9d17 	ldw	r2,-396(fp)
 8018760:	1885883a 	add	r2,r3,r2
 8018764:	e0bfa415 	stw	r2,-368(fp)

		/* Final output stage */

		outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8018768:	e0ffa517 	ldw	r3,-364(fp)
 801876c:	e0bfa017 	ldw	r2,-384(fp)
 8018770:	1885883a 	add	r2,r3,r2
 8018774:	1005d4ba 	srai	r2,r2,18
 8018778:	1080ffcc 	andi	r2,r2,1023
 801877c:	e0ff9b17 	ldw	r3,-404(fp)
 8018780:	1885883a 	add	r2,r3,r2
 8018784:	10c00003 	ldbu	r3,0(r2)
 8018788:	e0bfab17 	ldw	r2,-340(fp)
 801878c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8018790:	e0bfab17 	ldw	r2,-340(fp)
 8018794:	10800244 	addi	r2,r2,9
 8018798:	e13fa517 	ldw	r4,-364(fp)
 801879c:	e0ffa017 	ldw	r3,-384(fp)
 80187a0:	20c7c83a 	sub	r3,r4,r3
 80187a4:	1807d4ba 	srai	r3,r3,18
 80187a8:	18c0ffcc 	andi	r3,r3,1023
 80187ac:	e13f9b17 	ldw	r4,-404(fp)
 80187b0:	20c7883a 	add	r3,r4,r3
 80187b4:	18c00003 	ldbu	r3,0(r3)
 80187b8:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80187bc:	e0bfab17 	ldw	r2,-340(fp)
 80187c0:	10800044 	addi	r2,r2,1
 80187c4:	e13fa717 	ldw	r4,-356(fp)
 80187c8:	e0ffa117 	ldw	r3,-380(fp)
 80187cc:	20c7883a 	add	r3,r4,r3
 80187d0:	1807d4ba 	srai	r3,r3,18
 80187d4:	18c0ffcc 	andi	r3,r3,1023
 80187d8:	e13f9b17 	ldw	r4,-404(fp)
 80187dc:	20c7883a 	add	r3,r4,r3
 80187e0:	18c00003 	ldbu	r3,0(r3)
 80187e4:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80187e8:	e0bfab17 	ldw	r2,-340(fp)
 80187ec:	10800204 	addi	r2,r2,8
 80187f0:	e13fa717 	ldw	r4,-356(fp)
 80187f4:	e0ffa117 	ldw	r3,-380(fp)
 80187f8:	20c7c83a 	sub	r3,r4,r3
 80187fc:	1807d4ba 	srai	r3,r3,18
 8018800:	18c0ffcc 	andi	r3,r3,1023
 8018804:	e13f9b17 	ldw	r4,-404(fp)
 8018808:	20c7883a 	add	r3,r4,r3
 801880c:	18c00003 	ldbu	r3,0(r3)
 8018810:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8018814:	e0bfab17 	ldw	r2,-340(fp)
 8018818:	10800084 	addi	r2,r2,2
 801881c:	e13fa217 	ldw	r4,-376(fp)
 8018820:	e0ffa317 	ldw	r3,-372(fp)
 8018824:	20c7883a 	add	r3,r4,r3
 8018828:	1807d4ba 	srai	r3,r3,18
 801882c:	18c0ffcc 	andi	r3,r3,1023
 8018830:	e13f9b17 	ldw	r4,-404(fp)
 8018834:	20c7883a 	add	r3,r4,r3
 8018838:	18c00003 	ldbu	r3,0(r3)
 801883c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8018840:	e0bfab17 	ldw	r2,-340(fp)
 8018844:	108001c4 	addi	r2,r2,7
 8018848:	e13fa217 	ldw	r4,-376(fp)
 801884c:	e0ffa317 	ldw	r3,-372(fp)
 8018850:	20c7c83a 	sub	r3,r4,r3
 8018854:	1807d4ba 	srai	r3,r3,18
 8018858:	18c0ffcc 	andi	r3,r3,1023
 801885c:	e13f9b17 	ldw	r4,-404(fp)
 8018860:	20c7883a 	add	r3,r4,r3
 8018864:	18c00003 	ldbu	r3,0(r3)
 8018868:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801886c:	e0bfab17 	ldw	r2,-340(fp)
 8018870:	108000c4 	addi	r2,r2,3
 8018874:	e13fa817 	ldw	r4,-352(fp)
 8018878:	e0ffa417 	ldw	r3,-368(fp)
 801887c:	20c7883a 	add	r3,r4,r3
 8018880:	1807d4ba 	srai	r3,r3,18
 8018884:	18c0ffcc 	andi	r3,r3,1023
 8018888:	e13f9b17 	ldw	r4,-404(fp)
 801888c:	20c7883a 	add	r3,r4,r3
 8018890:	18c00003 	ldbu	r3,0(r3)
 8018894:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8018898:	e0bfab17 	ldw	r2,-340(fp)
 801889c:	10800184 	addi	r2,r2,6
 80188a0:	e13fa817 	ldw	r4,-352(fp)
 80188a4:	e0ffa417 	ldw	r3,-368(fp)
 80188a8:	20c7c83a 	sub	r3,r4,r3
 80188ac:	1807d4ba 	srai	r3,r3,18
 80188b0:	18c0ffcc 	andi	r3,r3,1023
 80188b4:	e13f9b17 	ldw	r4,-404(fp)
 80188b8:	20c7883a 	add	r3,r4,r3
 80188bc:	18c00003 	ldbu	r3,0(r3)
 80188c0:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80188c4:	e0bfab17 	ldw	r2,-340(fp)
 80188c8:	10800104 	addi	r2,r2,4
 80188cc:	e13fa617 	ldw	r4,-360(fp)
 80188d0:	e0ffaa17 	ldw	r3,-344(fp)
 80188d4:	20c7883a 	add	r3,r4,r3
 80188d8:	1807d4ba 	srai	r3,r3,18
 80188dc:	18c0ffcc 	andi	r3,r3,1023
 80188e0:	e13f9b17 	ldw	r4,-404(fp)
 80188e4:	20c7883a 	add	r3,r4,r3
 80188e8:	18c00003 	ldbu	r3,0(r3)
 80188ec:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80188f0:	e0bfab17 	ldw	r2,-340(fp)
 80188f4:	10800144 	addi	r2,r2,5
 80188f8:	e13fa617 	ldw	r4,-360(fp)
 80188fc:	e0ffaa17 	ldw	r3,-344(fp)
 8018900:	20c7c83a 	sub	r3,r4,r3
 8018904:	1807d4ba 	srai	r3,r3,18
 8018908:	18c0ffcc 	andi	r3,r3,1023
 801890c:	e13f9b17 	ldw	r4,-404(fp)
 8018910:	20c7883a 	add	r3,r4,r3
 8018914:	18c00003 	ldbu	r3,0(r3)
 8018918:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 8;		/* advance pointer to next row */
 801891c:	e0bf9917 	ldw	r2,-412(fp)
 8018920:	10800804 	addi	r2,r2,32
 8018924:	e0bf9915 	stw	r2,-412(fp)
	}

	/* Pass 2: process 10 rows from work array, store into output array. */

	wsptr = workspace;
	for (ctr = 0; ctr < 10; ctr++) {
 8018928:	e0bf9a17 	ldw	r2,-408(fp)
 801892c:	10800044 	addi	r2,r2,1
 8018930:	e0bf9a15 	stw	r2,-408(fp)
 8018934:	e0bf9a17 	ldw	r2,-408(fp)
 8018938:	10800290 	cmplti	r2,r2,10
 801893c:	103ed51e 	bne	r2,zero,8018494 <jpeg_idct_10x10+0x588>
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 8;		/* advance pointer to next row */
	}
}
 8018940:	e037883a 	mov	sp,fp
 8018944:	dfc00117 	ldw	ra,4(sp)
 8018948:	df000017 	ldw	fp,0(sp)
 801894c:	dec00204 	addi	sp,sp,8
 8018950:	f800283a 	ret

08018954 <jpeg_idct_11x11>:

GLOBAL(void)
	jpeg_idct_11x11 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8018954:	deff8c04 	addi	sp,sp,-464
 8018958:	dfc07315 	stw	ra,460(sp)
 801895c:	df007215 	stw	fp,456(sp)
 8018960:	dc007115 	stw	r16,452(sp)
 8018964:	df007104 	addi	fp,sp,452
 8018968:	e13ffc15 	stw	r4,-16(fp)
 801896c:	e17ffd15 	stw	r5,-12(fp)
 8018970:	e1bffe15 	stw	r6,-8(fp)
 8018974:	e1ffff15 	stw	r7,-4(fp)
	INT32 z1, z2, z3, z4;
	JCOEFPTR inptr;
	ISLOW_MULT_TYPE * quantptr;
	int * wsptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8018978:	e0bffc17 	ldw	r2,-16(fp)
 801897c:	10804917 	ldw	r2,292(r2)
 8018980:	10802004 	addi	r2,r2,128
 8018984:	e0bf9315 	stw	r2,-436(fp)
	int workspace[8*11];	/* buffers data between passes */
	SHIFT_TEMPS

		/* Pass 1: process columns from input, store into work array. */

		inptr = coef_block;
 8018988:	e0bffe17 	ldw	r2,-8(fp)
 801898c:	e0bf8f15 	stw	r2,-452(fp)
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8018990:	e0bffd17 	ldw	r2,-12(fp)
 8018994:	10801517 	ldw	r2,84(r2)
 8018998:	e0bf9015 	stw	r2,-448(fp)
	wsptr = workspace;
 801899c:	e0bfa404 	addi	r2,fp,-368
 80189a0:	e0bf9115 	stw	r2,-444(fp)
	for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80189a4:	e03f9215 	stw	zero,-440(fp)
 80189a8:	00018706 	br	8018fc8 <jpeg_idct_11x11+0x674>
		/* Even part */

		tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80189ac:	e0bf8f17 	ldw	r2,-452(fp)
 80189b0:	1080000b 	ldhu	r2,0(r2)
 80189b4:	10ffffcc 	andi	r3,r2,65535
 80189b8:	18e0001c 	xori	r3,r3,32768
 80189bc:	18e00004 	addi	r3,r3,-32768
 80189c0:	e0bf9017 	ldw	r2,-448(fp)
 80189c4:	10800017 	ldw	r2,0(r2)
 80189c8:	1809883a 	mov	r4,r3
 80189cc:	100b883a 	mov	r5,r2
 80189d0:	802c2180 	call	802c218 <__mulsi3>
 80189d4:	e0bf9415 	stw	r2,-432(fp)
		tmp10 <<= CONST_BITS;
 80189d8:	e0bf9417 	ldw	r2,-432(fp)
 80189dc:	1004937a 	slli	r2,r2,13
 80189e0:	e0bf9415 	stw	r2,-432(fp)
		/* Add fudge factor here for final descale. */
		tmp10 += ONE << (CONST_BITS-PASS1_BITS-1);
 80189e4:	e0bf9417 	ldw	r2,-432(fp)
 80189e8:	10810004 	addi	r2,r2,1024
 80189ec:	e0bf9415 	stw	r2,-432(fp)

		z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80189f0:	e0bf8f17 	ldw	r2,-452(fp)
 80189f4:	10800804 	addi	r2,r2,32
 80189f8:	1080000b 	ldhu	r2,0(r2)
 80189fc:	10ffffcc 	andi	r3,r2,65535
 8018a00:	18e0001c 	xori	r3,r3,32768
 8018a04:	18e00004 	addi	r3,r3,-32768
 8018a08:	e0bf9017 	ldw	r2,-448(fp)
 8018a0c:	10801004 	addi	r2,r2,64
 8018a10:	10800017 	ldw	r2,0(r2)
 8018a14:	1809883a 	mov	r4,r3
 8018a18:	100b883a 	mov	r5,r2
 8018a1c:	802c2180 	call	802c218 <__mulsi3>
 8018a20:	e0bf9515 	stw	r2,-428(fp)
		z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8018a24:	e0bf8f17 	ldw	r2,-452(fp)
 8018a28:	10801004 	addi	r2,r2,64
 8018a2c:	1080000b 	ldhu	r2,0(r2)
 8018a30:	10ffffcc 	andi	r3,r2,65535
 8018a34:	18e0001c 	xori	r3,r3,32768
 8018a38:	18e00004 	addi	r3,r3,-32768
 8018a3c:	e0bf9017 	ldw	r2,-448(fp)
 8018a40:	10802004 	addi	r2,r2,128
 8018a44:	10800017 	ldw	r2,0(r2)
 8018a48:	1809883a 	mov	r4,r3
 8018a4c:	100b883a 	mov	r5,r2
 8018a50:	802c2180 	call	802c218 <__mulsi3>
 8018a54:	e0bf9615 	stw	r2,-424(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8018a58:	e0bf8f17 	ldw	r2,-452(fp)
 8018a5c:	10801804 	addi	r2,r2,96
 8018a60:	1080000b 	ldhu	r2,0(r2)
 8018a64:	10ffffcc 	andi	r3,r2,65535
 8018a68:	18e0001c 	xori	r3,r3,32768
 8018a6c:	18e00004 	addi	r3,r3,-32768
 8018a70:	e0bf9017 	ldw	r2,-448(fp)
 8018a74:	10803004 	addi	r2,r2,192
 8018a78:	10800017 	ldw	r2,0(r2)
 8018a7c:	1809883a 	mov	r4,r3
 8018a80:	100b883a 	mov	r5,r2
 8018a84:	802c2180 	call	802c218 <__mulsi3>
 8018a88:	e0bf9715 	stw	r2,-420(fp)

		tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 8018a8c:	e0ff9617 	ldw	r3,-424(fp)
 8018a90:	e0bf9717 	ldw	r2,-420(fp)
 8018a94:	1885c83a 	sub	r2,r3,r2
 8018a98:	1009883a 	mov	r4,r2
 8018a9c:	01545f84 	movi	r5,20862
 8018aa0:	802c2180 	call	802c218 <__mulsi3>
 8018aa4:	e0bf9815 	stw	r2,-416(fp)
		tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 8018aa8:	e0ff9617 	ldw	r3,-424(fp)
 8018aac:	e0bf9517 	ldw	r2,-428(fp)
 8018ab0:	1885c83a 	sub	r2,r3,r2
 8018ab4:	1009883a 	mov	r4,r2
 8018ab8:	01437244 	movi	r5,3529
 8018abc:	802c2180 	call	802c218 <__mulsi3>
 8018ac0:	e0bf9915 	stw	r2,-412(fp)
		z4 = z1 + z3;
 8018ac4:	e0ff9517 	ldw	r3,-428(fp)
 8018ac8:	e0bf9717 	ldw	r2,-420(fp)
 8018acc:	1885883a 	add	r2,r3,r2
 8018ad0:	e0bf9a15 	stw	r2,-408(fp)
		tmp24 = MULTIPLY(z4, - FIX(1.155664402));        /* -(c2-c10) */
 8018ad4:	e13f9a17 	ldw	r4,-408(fp)
 8018ad8:	0176c144 	movi	r5,-9467
 8018adc:	802c2180 	call	802c218 <__mulsi3>
 8018ae0:	e0bf9b15 	stw	r2,-404(fp)
		z4 -= z2;
 8018ae4:	e0ff9a17 	ldw	r3,-408(fp)
 8018ae8:	e0bf9617 	ldw	r2,-424(fp)
 8018aec:	1885c83a 	sub	r2,r3,r2
 8018af0:	e0bf9a15 	stw	r2,-408(fp)
		tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 8018af4:	e13f9a17 	ldw	r4,-408(fp)
 8018af8:	014adb04 	movi	r5,11116
 8018afc:	802c2180 	call	802c218 <__mulsi3>
 8018b00:	1007883a 	mov	r3,r2
 8018b04:	e0bf9417 	ldw	r2,-432(fp)
 8018b08:	1885883a 	add	r2,r3,r2
 8018b0c:	e0bf9c15 	stw	r2,-400(fp)
		tmp21 = tmp20 + tmp23 + tmp25 -
 8018b10:	e0ff9817 	ldw	r3,-416(fp)
 8018b14:	e0bf9917 	ldw	r2,-412(fp)
 8018b18:	1887883a 	add	r3,r3,r2
 8018b1c:	e0bf9c17 	ldw	r2,-400(fp)
 8018b20:	18a1883a 	add	r16,r3,r2
			MULTIPLY(z2, FIX(1.821790775));          /* c2+c4+c10-c6 */
 8018b24:	e13f9617 	ldw	r4,-424(fp)
 8018b28:	01716d04 	movi	r5,-14924
 8018b2c:	802c2180 	call	802c218 <__mulsi3>
		tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
		z4 = z1 + z3;
		tmp24 = MULTIPLY(z4, - FIX(1.155664402));        /* -(c2-c10) */
		z4 -= z2;
		tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
		tmp21 = tmp20 + tmp23 + tmp25 -
 8018b30:	8085883a 	add	r2,r16,r2
 8018b34:	e0bf9d15 	stw	r2,-396(fp)
			MULTIPLY(z2, FIX(1.821790775));          /* c2+c4+c10-c6 */
		tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 8018b38:	e13f9717 	ldw	r4,-420(fp)
 8018b3c:	0150ed44 	movi	r5,17333
 8018b40:	802c2180 	call	802c218 <__mulsi3>
 8018b44:	1007883a 	mov	r3,r2
 8018b48:	e0bf9c17 	ldw	r2,-400(fp)
 8018b4c:	1885883a 	add	r2,r3,r2
 8018b50:	e0ff9817 	ldw	r3,-416(fp)
 8018b54:	1885883a 	add	r2,r3,r2
 8018b58:	e0bf9815 	stw	r2,-416(fp)
		tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 8018b5c:	e13f9517 	ldw	r4,-428(fp)
 8018b60:	0173e444 	movi	r5,-12399
 8018b64:	802c2180 	call	802c218 <__mulsi3>
 8018b68:	1007883a 	mov	r3,r2
 8018b6c:	e0bf9c17 	ldw	r2,-400(fp)
 8018b70:	1885883a 	add	r2,r3,r2
 8018b74:	e0ff9917 	ldw	r3,-412(fp)
 8018b78:	1885883a 	add	r2,r3,r2
 8018b7c:	e0bf9915 	stw	r2,-412(fp)
		tmp24 += tmp25;
 8018b80:	e0ff9b17 	ldw	r3,-404(fp)
 8018b84:	e0bf9c17 	ldw	r2,-400(fp)
 8018b88:	1885883a 	add	r2,r3,r2
 8018b8c:	e0bf9b15 	stw	r2,-404(fp)
		tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 8018b90:	e13f9717 	ldw	r4,-420(fp)
 8018b94:	0179b0c4 	movi	r5,-6461
 8018b98:	802c2180 	call	802c218 <__mulsi3>
 8018b9c:	1007883a 	mov	r3,r2
 8018ba0:	e0bf9b17 	ldw	r2,-404(fp)
 8018ba4:	1885883a 	add	r2,r3,r2
 8018ba8:	e0bf9e15 	stw	r2,-392(fp)
		tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 8018bac:	e13f9617 	ldw	r4,-424(fp)
 8018bb0:	014f8e44 	movi	r5,15929
 8018bb4:	802c2180 	call	802c218 <__mulsi3>
 8018bb8:	1021883a 	mov	r16,r2
			MULTIPLY(z1, FIX(1.390975730));         /* c4+c10 */
 8018bbc:	e13f9517 	ldw	r4,-428(fp)
 8018bc0:	0174df44 	movi	r5,-11395
 8018bc4:	802c2180 	call	802c218 <__mulsi3>
			MULTIPLY(z2, FIX(1.821790775));          /* c2+c4+c10-c6 */
		tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
		tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
		tmp24 += tmp25;
		tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
		tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 8018bc8:	8085883a 	add	r2,r16,r2
 8018bcc:	e0ff9b17 	ldw	r3,-404(fp)
 8018bd0:	1885883a 	add	r2,r3,r2
 8018bd4:	e0bf9b15 	stw	r2,-404(fp)
			MULTIPLY(z1, FIX(1.390975730));         /* c4+c10 */
		tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 8018bd8:	e13f9a17 	ldw	r4,-408(fp)
 8018bdc:	0174afc4 	movi	r5,-11585
 8018be0:	802c2180 	call	802c218 <__mulsi3>
 8018be4:	1007883a 	mov	r3,r2
 8018be8:	e0bf9417 	ldw	r2,-432(fp)
 8018bec:	1885883a 	add	r2,r3,r2
 8018bf0:	e0bf9c15 	stw	r2,-400(fp)

		/* Odd part */

		z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8018bf4:	e0bf8f17 	ldw	r2,-452(fp)
 8018bf8:	10800404 	addi	r2,r2,16
 8018bfc:	1080000b 	ldhu	r2,0(r2)
 8018c00:	10ffffcc 	andi	r3,r2,65535
 8018c04:	18e0001c 	xori	r3,r3,32768
 8018c08:	18e00004 	addi	r3,r3,-32768
 8018c0c:	e0bf9017 	ldw	r2,-448(fp)
 8018c10:	10800804 	addi	r2,r2,32
 8018c14:	10800017 	ldw	r2,0(r2)
 8018c18:	1809883a 	mov	r4,r3
 8018c1c:	100b883a 	mov	r5,r2
 8018c20:	802c2180 	call	802c218 <__mulsi3>
 8018c24:	e0bf9515 	stw	r2,-428(fp)
		z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8018c28:	e0bf8f17 	ldw	r2,-452(fp)
 8018c2c:	10800c04 	addi	r2,r2,48
 8018c30:	1080000b 	ldhu	r2,0(r2)
 8018c34:	10ffffcc 	andi	r3,r2,65535
 8018c38:	18e0001c 	xori	r3,r3,32768
 8018c3c:	18e00004 	addi	r3,r3,-32768
 8018c40:	e0bf9017 	ldw	r2,-448(fp)
 8018c44:	10801804 	addi	r2,r2,96
 8018c48:	10800017 	ldw	r2,0(r2)
 8018c4c:	1809883a 	mov	r4,r3
 8018c50:	100b883a 	mov	r5,r2
 8018c54:	802c2180 	call	802c218 <__mulsi3>
 8018c58:	e0bf9615 	stw	r2,-424(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8018c5c:	e0bf8f17 	ldw	r2,-452(fp)
 8018c60:	10801404 	addi	r2,r2,80
 8018c64:	1080000b 	ldhu	r2,0(r2)
 8018c68:	10ffffcc 	andi	r3,r2,65535
 8018c6c:	18e0001c 	xori	r3,r3,32768
 8018c70:	18e00004 	addi	r3,r3,-32768
 8018c74:	e0bf9017 	ldw	r2,-448(fp)
 8018c78:	10802804 	addi	r2,r2,160
 8018c7c:	10800017 	ldw	r2,0(r2)
 8018c80:	1809883a 	mov	r4,r3
 8018c84:	100b883a 	mov	r5,r2
 8018c88:	802c2180 	call	802c218 <__mulsi3>
 8018c8c:	e0bf9715 	stw	r2,-420(fp)
		z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8018c90:	e0bf8f17 	ldw	r2,-452(fp)
 8018c94:	10801c04 	addi	r2,r2,112
 8018c98:	1080000b 	ldhu	r2,0(r2)
 8018c9c:	10ffffcc 	andi	r3,r2,65535
 8018ca0:	18e0001c 	xori	r3,r3,32768
 8018ca4:	18e00004 	addi	r3,r3,-32768
 8018ca8:	e0bf9017 	ldw	r2,-448(fp)
 8018cac:	10803804 	addi	r2,r2,224
 8018cb0:	10800017 	ldw	r2,0(r2)
 8018cb4:	1809883a 	mov	r4,r3
 8018cb8:	100b883a 	mov	r5,r2
 8018cbc:	802c2180 	call	802c218 <__mulsi3>
 8018cc0:	e0bf9a15 	stw	r2,-408(fp)

		tmp11 = z1 + z2;
 8018cc4:	e0ff9517 	ldw	r3,-428(fp)
 8018cc8:	e0bf9617 	ldw	r2,-424(fp)
 8018ccc:	1885883a 	add	r2,r3,r2
 8018cd0:	e0bf9f15 	stw	r2,-388(fp)
		tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 8018cd4:	e0ff9f17 	ldw	r3,-388(fp)
 8018cd8:	e0bf9717 	ldw	r2,-420(fp)
 8018cdc:	1887883a 	add	r3,r3,r2
 8018ce0:	e0bf9a17 	ldw	r2,-408(fp)
 8018ce4:	1885883a 	add	r2,r3,r2
 8018ce8:	1009883a 	mov	r4,r2
 8018cec:	01433004 	movi	r5,3264
 8018cf0:	802c2180 	call	802c218 <__mulsi3>
 8018cf4:	e0bfa015 	stw	r2,-384(fp)
		tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
 8018cf8:	e13f9f17 	ldw	r4,-388(fp)
 8018cfc:	01471a84 	movi	r5,7274
 8018d00:	802c2180 	call	802c218 <__mulsi3>
 8018d04:	e0bf9f15 	stw	r2,-388(fp)
		tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 8018d08:	e0ff9517 	ldw	r3,-428(fp)
 8018d0c:	e0bf9717 	ldw	r2,-420(fp)
 8018d10:	1885883a 	add	r2,r3,r2
 8018d14:	1009883a 	mov	r4,r2
 8018d18:	01455d04 	movi	r5,5492
 8018d1c:	802c2180 	call	802c218 <__mulsi3>
 8018d20:	e0bfa115 	stw	r2,-380(fp)
		tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 8018d24:	e0ff9517 	ldw	r3,-428(fp)
 8018d28:	e0bf9a17 	ldw	r2,-408(fp)
 8018d2c:	1885883a 	add	r2,r3,r2
 8018d30:	1009883a 	mov	r4,r2
 8018d34:	0142ee04 	movi	r5,3000
 8018d38:	802c2180 	call	802c218 <__mulsi3>
 8018d3c:	1007883a 	mov	r3,r2
 8018d40:	e0bfa017 	ldw	r2,-384(fp)
 8018d44:	1885883a 	add	r2,r3,r2
 8018d48:	e0bfa215 	stw	r2,-376(fp)
		tmp10 = tmp11 + tmp12 + tmp13 -
 8018d4c:	e0ff9f17 	ldw	r3,-388(fp)
 8018d50:	e0bfa117 	ldw	r2,-380(fp)
 8018d54:	1887883a 	add	r3,r3,r2
 8018d58:	e0bfa217 	ldw	r2,-376(fp)
 8018d5c:	18a1883a 	add	r16,r3,r2
			MULTIPLY(z1, FIX(0.923107866));              /* c7+c5+c3-c1-2*c9 */
 8018d60:	e13f9517 	ldw	r4,-428(fp)
 8018d64:	01789d84 	movi	r5,-7562
 8018d68:	802c2180 	call	802c218 <__mulsi3>
		tmp11 = z1 + z2;
		tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
		tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
		tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
		tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
		tmp10 = tmp11 + tmp12 + tmp13 -
 8018d6c:	8085883a 	add	r2,r16,r2
 8018d70:	e0bf9415 	stw	r2,-432(fp)
			MULTIPLY(z1, FIX(0.923107866));              /* c7+c5+c3-c1-2*c9 */
		z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
 8018d74:	e0ff9617 	ldw	r3,-424(fp)
 8018d78:	e0bf9717 	ldw	r2,-420(fp)
 8018d7c:	1885883a 	add	r2,r3,r2
 8018d80:	1009883a 	mov	r4,r2
 8018d84:	0176b244 	movi	r5,-9527
 8018d88:	802c2180 	call	802c218 <__mulsi3>
 8018d8c:	1007883a 	mov	r3,r2
 8018d90:	e0bfa017 	ldw	r2,-384(fp)
 8018d94:	1885883a 	add	r2,r3,r2
 8018d98:	e0bf9515 	stw	r2,-428(fp)
		tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 8018d9c:	e13f9617 	ldw	r4,-424(fp)
 8018da0:	01509604 	movi	r5,16984
 8018da4:	802c2180 	call	802c218 <__mulsi3>
 8018da8:	1007883a 	mov	r3,r2
 8018dac:	e0bf9517 	ldw	r2,-428(fp)
 8018db0:	1885883a 	add	r2,r3,r2
 8018db4:	e0ff9f17 	ldw	r3,-388(fp)
 8018db8:	1885883a 	add	r2,r3,r2
 8018dbc:	e0bf9f15 	stw	r2,-388(fp)
		tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 8018dc0:	e13f9717 	ldw	r4,-420(fp)
 8018dc4:	01767684 	movi	r5,-9766
 8018dc8:	802c2180 	call	802c218 <__mulsi3>
 8018dcc:	1007883a 	mov	r3,r2
 8018dd0:	e0bf9517 	ldw	r2,-428(fp)
 8018dd4:	1885883a 	add	r2,r3,r2
 8018dd8:	e0ffa117 	ldw	r3,-380(fp)
 8018ddc:	1885883a 	add	r2,r3,r2
 8018de0:	e0bfa115 	stw	r2,-380(fp)
		z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 8018de4:	e0ff9617 	ldw	r3,-424(fp)
 8018de8:	e0bf9a17 	ldw	r2,-408(fp)
 8018dec:	1885883a 	add	r2,r3,r2
 8018df0:	1009883a 	mov	r4,r2
 8018df4:	01719d44 	movi	r5,-14731
 8018df8:	802c2180 	call	802c218 <__mulsi3>
 8018dfc:	e0bf9515 	stw	r2,-428(fp)
		tmp11 += z1;
 8018e00:	e0ff9f17 	ldw	r3,-388(fp)
 8018e04:	e0bf9517 	ldw	r2,-428(fp)
 8018e08:	1885883a 	add	r2,r3,r2
 8018e0c:	e0bf9f15 	stw	r2,-388(fp)
		tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 8018e10:	e13f9a17 	ldw	r4,-408(fp)
 8018e14:	0150d1c4 	movi	r5,17223
 8018e18:	802c2180 	call	802c218 <__mulsi3>
 8018e1c:	1007883a 	mov	r3,r2
 8018e20:	e0bf9517 	ldw	r2,-428(fp)
 8018e24:	1885883a 	add	r2,r3,r2
 8018e28:	e0ffa217 	ldw	r3,-376(fp)
 8018e2c:	1885883a 	add	r2,r3,r2
 8018e30:	e0bfa215 	stw	r2,-376(fp)
		tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 8018e34:	e13f9617 	ldw	r4,-424(fp)
 8018e38:	01744344 	movi	r5,-12019
 8018e3c:	802c2180 	call	802c218 <__mulsi3>
 8018e40:	1021883a 	mov	r16,r2
			MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 8018e44:	e13f9717 	ldw	r4,-420(fp)
 8018e48:	014802c4 	movi	r5,8203
 8018e4c:	802c2180 	call	802c218 <__mulsi3>
		tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
		tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
		z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
		tmp11 += z1;
		tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
		tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 8018e50:	80a1883a 	add	r16,r16,r2
			MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
			MULTIPLY(z4, FIX(1.684843907));             /* c3+c9 */
 8018e54:	e13f9a17 	ldw	r4,-408(fp)
 8018e58:	01728584 	movi	r5,-13802
 8018e5c:	802c2180 	call	802c218 <__mulsi3>
		tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
		z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
		tmp11 += z1;
		tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
		tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
			MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 8018e60:	8085883a 	add	r2,r16,r2
		tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
		tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
		z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
		tmp11 += z1;
		tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
		tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 8018e64:	e0ffa017 	ldw	r3,-384(fp)
 8018e68:	1885883a 	add	r2,r3,r2
 8018e6c:	e0bfa015 	stw	r2,-384(fp)
			MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
			MULTIPLY(z4, FIX(1.684843907));             /* c3+c9 */

		/* Final output stage */

		wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8018e70:	e0ff9817 	ldw	r3,-416(fp)
 8018e74:	e0bf9417 	ldw	r2,-432(fp)
 8018e78:	1885883a 	add	r2,r3,r2
 8018e7c:	1007d2fa 	srai	r3,r2,11
 8018e80:	e0bf9117 	ldw	r2,-444(fp)
 8018e84:	10c00015 	stw	r3,0(r2)
		wsptr[8*10] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8018e88:	e0bf9117 	ldw	r2,-444(fp)
 8018e8c:	10805004 	addi	r2,r2,320
 8018e90:	e13f9817 	ldw	r4,-416(fp)
 8018e94:	e0ff9417 	ldw	r3,-432(fp)
 8018e98:	20c7c83a 	sub	r3,r4,r3
 8018e9c:	1807d2fa 	srai	r3,r3,11
 8018ea0:	10c00015 	stw	r3,0(r2)
		wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8018ea4:	e0bf9117 	ldw	r2,-444(fp)
 8018ea8:	10800804 	addi	r2,r2,32
 8018eac:	e13f9d17 	ldw	r4,-396(fp)
 8018eb0:	e0ff9f17 	ldw	r3,-388(fp)
 8018eb4:	20c7883a 	add	r3,r4,r3
 8018eb8:	1807d2fa 	srai	r3,r3,11
 8018ebc:	10c00015 	stw	r3,0(r2)
		wsptr[8*9]  = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8018ec0:	e0bf9117 	ldw	r2,-444(fp)
 8018ec4:	10804804 	addi	r2,r2,288
 8018ec8:	e13f9d17 	ldw	r4,-396(fp)
 8018ecc:	e0ff9f17 	ldw	r3,-388(fp)
 8018ed0:	20c7c83a 	sub	r3,r4,r3
 8018ed4:	1807d2fa 	srai	r3,r3,11
 8018ed8:	10c00015 	stw	r3,0(r2)
		wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8018edc:	e0bf9117 	ldw	r2,-444(fp)
 8018ee0:	10801004 	addi	r2,r2,64
 8018ee4:	e13f9e17 	ldw	r4,-392(fp)
 8018ee8:	e0ffa117 	ldw	r3,-380(fp)
 8018eec:	20c7883a 	add	r3,r4,r3
 8018ef0:	1807d2fa 	srai	r3,r3,11
 8018ef4:	10c00015 	stw	r3,0(r2)
		wsptr[8*8]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8018ef8:	e0bf9117 	ldw	r2,-444(fp)
 8018efc:	10804004 	addi	r2,r2,256
 8018f00:	e13f9e17 	ldw	r4,-392(fp)
 8018f04:	e0ffa117 	ldw	r3,-380(fp)
 8018f08:	20c7c83a 	sub	r3,r4,r3
 8018f0c:	1807d2fa 	srai	r3,r3,11
 8018f10:	10c00015 	stw	r3,0(r2)
		wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8018f14:	e0bf9117 	ldw	r2,-444(fp)
 8018f18:	10801804 	addi	r2,r2,96
 8018f1c:	e13f9917 	ldw	r4,-412(fp)
 8018f20:	e0ffa217 	ldw	r3,-376(fp)
 8018f24:	20c7883a 	add	r3,r4,r3
 8018f28:	1807d2fa 	srai	r3,r3,11
 8018f2c:	10c00015 	stw	r3,0(r2)
		wsptr[8*7]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8018f30:	e0bf9117 	ldw	r2,-444(fp)
 8018f34:	10803804 	addi	r2,r2,224
 8018f38:	e13f9917 	ldw	r4,-412(fp)
 8018f3c:	e0ffa217 	ldw	r3,-376(fp)
 8018f40:	20c7c83a 	sub	r3,r4,r3
 8018f44:	1807d2fa 	srai	r3,r3,11
 8018f48:	10c00015 	stw	r3,0(r2)
		wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8018f4c:	e0bf9117 	ldw	r2,-444(fp)
 8018f50:	10802004 	addi	r2,r2,128
 8018f54:	e13f9b17 	ldw	r4,-404(fp)
 8018f58:	e0ffa017 	ldw	r3,-384(fp)
 8018f5c:	20c7883a 	add	r3,r4,r3
 8018f60:	1807d2fa 	srai	r3,r3,11
 8018f64:	10c00015 	stw	r3,0(r2)
		wsptr[8*6]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8018f68:	e0bf9117 	ldw	r2,-444(fp)
 8018f6c:	10803004 	addi	r2,r2,192
 8018f70:	e13f9b17 	ldw	r4,-404(fp)
 8018f74:	e0ffa017 	ldw	r3,-384(fp)
 8018f78:	20c7c83a 	sub	r3,r4,r3
 8018f7c:	1807d2fa 	srai	r3,r3,11
 8018f80:	10c00015 	stw	r3,0(r2)
		wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25, CONST_BITS-PASS1_BITS);
 8018f84:	e0bf9117 	ldw	r2,-444(fp)
 8018f88:	10802804 	addi	r2,r2,160
 8018f8c:	e0ff9c17 	ldw	r3,-400(fp)
 8018f90:	1807d2fa 	srai	r3,r3,11
 8018f94:	10c00015 	stw	r3,0(r2)
		/* Pass 1: process columns from input, store into work array. */

		inptr = coef_block;
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
	wsptr = workspace;
	for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8018f98:	e0bf9217 	ldw	r2,-440(fp)
 8018f9c:	10800044 	addi	r2,r2,1
 8018fa0:	e0bf9215 	stw	r2,-440(fp)
 8018fa4:	e0bf8f17 	ldw	r2,-452(fp)
 8018fa8:	10800084 	addi	r2,r2,2
 8018fac:	e0bf8f15 	stw	r2,-452(fp)
 8018fb0:	e0bf9017 	ldw	r2,-448(fp)
 8018fb4:	10800104 	addi	r2,r2,4
 8018fb8:	e0bf9015 	stw	r2,-448(fp)
 8018fbc:	e0bf9117 	ldw	r2,-444(fp)
 8018fc0:	10800104 	addi	r2,r2,4
 8018fc4:	e0bf9115 	stw	r2,-444(fp)
 8018fc8:	e0bf9217 	ldw	r2,-440(fp)
 8018fcc:	10800210 	cmplti	r2,r2,8
 8018fd0:	103e761e 	bne	r2,zero,80189ac <jpeg_idct_11x11+0x58>
		wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25, CONST_BITS-PASS1_BITS);
	}

	/* Pass 2: process 11 rows from work array, store into output array. */

	wsptr = workspace;
 8018fd4:	e0bfa404 	addi	r2,fp,-368
 8018fd8:	e0bf9115 	stw	r2,-444(fp)
	for (ctr = 0; ctr < 11; ctr++) {
 8018fdc:	e03f9215 	stw	zero,-440(fp)
 8018fe0:	00016d06 	br	8019598 <jpeg_idct_11x11+0xc44>
		outptr = output_buf[ctr] + output_col;
 8018fe4:	e0bf9217 	ldw	r2,-440(fp)
 8018fe8:	1085883a 	add	r2,r2,r2
 8018fec:	1085883a 	add	r2,r2,r2
 8018ff0:	e0ffff17 	ldw	r3,-4(fp)
 8018ff4:	1885883a 	add	r2,r3,r2
 8018ff8:	10c00017 	ldw	r3,0(r2)
 8018ffc:	e0800317 	ldw	r2,12(fp)
 8019000:	1885883a 	add	r2,r3,r2
 8019004:	e0bfa315 	stw	r2,-372(fp)

		/* Even part */

		/* Add fudge factor here for final descale. */
		tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8019008:	e0bf9117 	ldw	r2,-444(fp)
 801900c:	10800017 	ldw	r2,0(r2)
 8019010:	10800404 	addi	r2,r2,16
 8019014:	e0bf9415 	stw	r2,-432(fp)
		tmp10 <<= CONST_BITS;
 8019018:	e0bf9417 	ldw	r2,-432(fp)
 801901c:	1004937a 	slli	r2,r2,13
 8019020:	e0bf9415 	stw	r2,-432(fp)

		z1 = (INT32) wsptr[2];
 8019024:	e0bf9117 	ldw	r2,-444(fp)
 8019028:	10800204 	addi	r2,r2,8
 801902c:	10800017 	ldw	r2,0(r2)
 8019030:	e0bf9515 	stw	r2,-428(fp)
		z2 = (INT32) wsptr[4];
 8019034:	e0bf9117 	ldw	r2,-444(fp)
 8019038:	10800404 	addi	r2,r2,16
 801903c:	10800017 	ldw	r2,0(r2)
 8019040:	e0bf9615 	stw	r2,-424(fp)
		z3 = (INT32) wsptr[6];
 8019044:	e0bf9117 	ldw	r2,-444(fp)
 8019048:	10800604 	addi	r2,r2,24
 801904c:	10800017 	ldw	r2,0(r2)
 8019050:	e0bf9715 	stw	r2,-420(fp)

		tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 8019054:	e0ff9617 	ldw	r3,-424(fp)
 8019058:	e0bf9717 	ldw	r2,-420(fp)
 801905c:	1885c83a 	sub	r2,r3,r2
 8019060:	1009883a 	mov	r4,r2
 8019064:	01545f84 	movi	r5,20862
 8019068:	802c2180 	call	802c218 <__mulsi3>
 801906c:	e0bf9815 	stw	r2,-416(fp)
		tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 8019070:	e0ff9617 	ldw	r3,-424(fp)
 8019074:	e0bf9517 	ldw	r2,-428(fp)
 8019078:	1885c83a 	sub	r2,r3,r2
 801907c:	1009883a 	mov	r4,r2
 8019080:	01437244 	movi	r5,3529
 8019084:	802c2180 	call	802c218 <__mulsi3>
 8019088:	e0bf9915 	stw	r2,-412(fp)
		z4 = z1 + z3;
 801908c:	e0ff9517 	ldw	r3,-428(fp)
 8019090:	e0bf9717 	ldw	r2,-420(fp)
 8019094:	1885883a 	add	r2,r3,r2
 8019098:	e0bf9a15 	stw	r2,-408(fp)
		tmp24 = MULTIPLY(z4, - FIX(1.155664402));        /* -(c2-c10) */
 801909c:	e13f9a17 	ldw	r4,-408(fp)
 80190a0:	0176c144 	movi	r5,-9467
 80190a4:	802c2180 	call	802c218 <__mulsi3>
 80190a8:	e0bf9b15 	stw	r2,-404(fp)
		z4 -= z2;
 80190ac:	e0ff9a17 	ldw	r3,-408(fp)
 80190b0:	e0bf9617 	ldw	r2,-424(fp)
 80190b4:	1885c83a 	sub	r2,r3,r2
 80190b8:	e0bf9a15 	stw	r2,-408(fp)
		tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 80190bc:	e13f9a17 	ldw	r4,-408(fp)
 80190c0:	014adb04 	movi	r5,11116
 80190c4:	802c2180 	call	802c218 <__mulsi3>
 80190c8:	1007883a 	mov	r3,r2
 80190cc:	e0bf9417 	ldw	r2,-432(fp)
 80190d0:	1885883a 	add	r2,r3,r2
 80190d4:	e0bf9c15 	stw	r2,-400(fp)
		tmp21 = tmp20 + tmp23 + tmp25 -
 80190d8:	e0ff9817 	ldw	r3,-416(fp)
 80190dc:	e0bf9917 	ldw	r2,-412(fp)
 80190e0:	1887883a 	add	r3,r3,r2
 80190e4:	e0bf9c17 	ldw	r2,-400(fp)
 80190e8:	18a1883a 	add	r16,r3,r2
			MULTIPLY(z2, FIX(1.821790775));          /* c2+c4+c10-c6 */
 80190ec:	e13f9617 	ldw	r4,-424(fp)
 80190f0:	01716d04 	movi	r5,-14924
 80190f4:	802c2180 	call	802c218 <__mulsi3>
		tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
		z4 = z1 + z3;
		tmp24 = MULTIPLY(z4, - FIX(1.155664402));        /* -(c2-c10) */
		z4 -= z2;
		tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
		tmp21 = tmp20 + tmp23 + tmp25 -
 80190f8:	8085883a 	add	r2,r16,r2
 80190fc:	e0bf9d15 	stw	r2,-396(fp)
			MULTIPLY(z2, FIX(1.821790775));          /* c2+c4+c10-c6 */
		tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 8019100:	e13f9717 	ldw	r4,-420(fp)
 8019104:	0150ed44 	movi	r5,17333
 8019108:	802c2180 	call	802c218 <__mulsi3>
 801910c:	1007883a 	mov	r3,r2
 8019110:	e0bf9c17 	ldw	r2,-400(fp)
 8019114:	1885883a 	add	r2,r3,r2
 8019118:	e0ff9817 	ldw	r3,-416(fp)
 801911c:	1885883a 	add	r2,r3,r2
 8019120:	e0bf9815 	stw	r2,-416(fp)
		tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 8019124:	e13f9517 	ldw	r4,-428(fp)
 8019128:	0173e444 	movi	r5,-12399
 801912c:	802c2180 	call	802c218 <__mulsi3>
 8019130:	1007883a 	mov	r3,r2
 8019134:	e0bf9c17 	ldw	r2,-400(fp)
 8019138:	1885883a 	add	r2,r3,r2
 801913c:	e0ff9917 	ldw	r3,-412(fp)
 8019140:	1885883a 	add	r2,r3,r2
 8019144:	e0bf9915 	stw	r2,-412(fp)
		tmp24 += tmp25;
 8019148:	e0ff9b17 	ldw	r3,-404(fp)
 801914c:	e0bf9c17 	ldw	r2,-400(fp)
 8019150:	1885883a 	add	r2,r3,r2
 8019154:	e0bf9b15 	stw	r2,-404(fp)
		tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 8019158:	e13f9717 	ldw	r4,-420(fp)
 801915c:	0179b0c4 	movi	r5,-6461
 8019160:	802c2180 	call	802c218 <__mulsi3>
 8019164:	1007883a 	mov	r3,r2
 8019168:	e0bf9b17 	ldw	r2,-404(fp)
 801916c:	1885883a 	add	r2,r3,r2
 8019170:	e0bf9e15 	stw	r2,-392(fp)
		tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 8019174:	e13f9617 	ldw	r4,-424(fp)
 8019178:	014f8e44 	movi	r5,15929
 801917c:	802c2180 	call	802c218 <__mulsi3>
 8019180:	1021883a 	mov	r16,r2
			MULTIPLY(z1, FIX(1.390975730));         /* c4+c10 */
 8019184:	e13f9517 	ldw	r4,-428(fp)
 8019188:	0174df44 	movi	r5,-11395
 801918c:	802c2180 	call	802c218 <__mulsi3>
			MULTIPLY(z2, FIX(1.821790775));          /* c2+c4+c10-c6 */
		tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
		tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
		tmp24 += tmp25;
		tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
		tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 8019190:	8085883a 	add	r2,r16,r2
 8019194:	e0ff9b17 	ldw	r3,-404(fp)
 8019198:	1885883a 	add	r2,r3,r2
 801919c:	e0bf9b15 	stw	r2,-404(fp)
			MULTIPLY(z1, FIX(1.390975730));         /* c4+c10 */
		tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 80191a0:	e13f9a17 	ldw	r4,-408(fp)
 80191a4:	0174afc4 	movi	r5,-11585
 80191a8:	802c2180 	call	802c218 <__mulsi3>
 80191ac:	1007883a 	mov	r3,r2
 80191b0:	e0bf9417 	ldw	r2,-432(fp)
 80191b4:	1885883a 	add	r2,r3,r2
 80191b8:	e0bf9c15 	stw	r2,-400(fp)

		/* Odd part */

		z1 = (INT32) wsptr[1];
 80191bc:	e0bf9117 	ldw	r2,-444(fp)
 80191c0:	10800104 	addi	r2,r2,4
 80191c4:	10800017 	ldw	r2,0(r2)
 80191c8:	e0bf9515 	stw	r2,-428(fp)
		z2 = (INT32) wsptr[3];
 80191cc:	e0bf9117 	ldw	r2,-444(fp)
 80191d0:	10800304 	addi	r2,r2,12
 80191d4:	10800017 	ldw	r2,0(r2)
 80191d8:	e0bf9615 	stw	r2,-424(fp)
		z3 = (INT32) wsptr[5];
 80191dc:	e0bf9117 	ldw	r2,-444(fp)
 80191e0:	10800504 	addi	r2,r2,20
 80191e4:	10800017 	ldw	r2,0(r2)
 80191e8:	e0bf9715 	stw	r2,-420(fp)
		z4 = (INT32) wsptr[7];
 80191ec:	e0bf9117 	ldw	r2,-444(fp)
 80191f0:	10800704 	addi	r2,r2,28
 80191f4:	10800017 	ldw	r2,0(r2)
 80191f8:	e0bf9a15 	stw	r2,-408(fp)

		tmp11 = z1 + z2;
 80191fc:	e0ff9517 	ldw	r3,-428(fp)
 8019200:	e0bf9617 	ldw	r2,-424(fp)
 8019204:	1885883a 	add	r2,r3,r2
 8019208:	e0bf9f15 	stw	r2,-388(fp)
		tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 801920c:	e0ff9f17 	ldw	r3,-388(fp)
 8019210:	e0bf9717 	ldw	r2,-420(fp)
 8019214:	1887883a 	add	r3,r3,r2
 8019218:	e0bf9a17 	ldw	r2,-408(fp)
 801921c:	1885883a 	add	r2,r3,r2
 8019220:	1009883a 	mov	r4,r2
 8019224:	01433004 	movi	r5,3264
 8019228:	802c2180 	call	802c218 <__mulsi3>
 801922c:	e0bfa015 	stw	r2,-384(fp)
		tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
 8019230:	e13f9f17 	ldw	r4,-388(fp)
 8019234:	01471a84 	movi	r5,7274
 8019238:	802c2180 	call	802c218 <__mulsi3>
 801923c:	e0bf9f15 	stw	r2,-388(fp)
		tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 8019240:	e0ff9517 	ldw	r3,-428(fp)
 8019244:	e0bf9717 	ldw	r2,-420(fp)
 8019248:	1885883a 	add	r2,r3,r2
 801924c:	1009883a 	mov	r4,r2
 8019250:	01455d04 	movi	r5,5492
 8019254:	802c2180 	call	802c218 <__mulsi3>
 8019258:	e0bfa115 	stw	r2,-380(fp)
		tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 801925c:	e0ff9517 	ldw	r3,-428(fp)
 8019260:	e0bf9a17 	ldw	r2,-408(fp)
 8019264:	1885883a 	add	r2,r3,r2
 8019268:	1009883a 	mov	r4,r2
 801926c:	0142ee04 	movi	r5,3000
 8019270:	802c2180 	call	802c218 <__mulsi3>
 8019274:	1007883a 	mov	r3,r2
 8019278:	e0bfa017 	ldw	r2,-384(fp)
 801927c:	1885883a 	add	r2,r3,r2
 8019280:	e0bfa215 	stw	r2,-376(fp)
		tmp10 = tmp11 + tmp12 + tmp13 -
 8019284:	e0ff9f17 	ldw	r3,-388(fp)
 8019288:	e0bfa117 	ldw	r2,-380(fp)
 801928c:	1887883a 	add	r3,r3,r2
 8019290:	e0bfa217 	ldw	r2,-376(fp)
 8019294:	18a1883a 	add	r16,r3,r2
			MULTIPLY(z1, FIX(0.923107866));              /* c7+c5+c3-c1-2*c9 */
 8019298:	e13f9517 	ldw	r4,-428(fp)
 801929c:	01789d84 	movi	r5,-7562
 80192a0:	802c2180 	call	802c218 <__mulsi3>
		tmp11 = z1 + z2;
		tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
		tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
		tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
		tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
		tmp10 = tmp11 + tmp12 + tmp13 -
 80192a4:	8085883a 	add	r2,r16,r2
 80192a8:	e0bf9415 	stw	r2,-432(fp)
			MULTIPLY(z1, FIX(0.923107866));              /* c7+c5+c3-c1-2*c9 */
		z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
 80192ac:	e0ff9617 	ldw	r3,-424(fp)
 80192b0:	e0bf9717 	ldw	r2,-420(fp)
 80192b4:	1885883a 	add	r2,r3,r2
 80192b8:	1009883a 	mov	r4,r2
 80192bc:	0176b244 	movi	r5,-9527
 80192c0:	802c2180 	call	802c218 <__mulsi3>
 80192c4:	1007883a 	mov	r3,r2
 80192c8:	e0bfa017 	ldw	r2,-384(fp)
 80192cc:	1885883a 	add	r2,r3,r2
 80192d0:	e0bf9515 	stw	r2,-428(fp)
		tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 80192d4:	e13f9617 	ldw	r4,-424(fp)
 80192d8:	01509604 	movi	r5,16984
 80192dc:	802c2180 	call	802c218 <__mulsi3>
 80192e0:	1007883a 	mov	r3,r2
 80192e4:	e0bf9517 	ldw	r2,-428(fp)
 80192e8:	1885883a 	add	r2,r3,r2
 80192ec:	e0ff9f17 	ldw	r3,-388(fp)
 80192f0:	1885883a 	add	r2,r3,r2
 80192f4:	e0bf9f15 	stw	r2,-388(fp)
		tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 80192f8:	e13f9717 	ldw	r4,-420(fp)
 80192fc:	01767684 	movi	r5,-9766
 8019300:	802c2180 	call	802c218 <__mulsi3>
 8019304:	1007883a 	mov	r3,r2
 8019308:	e0bf9517 	ldw	r2,-428(fp)
 801930c:	1885883a 	add	r2,r3,r2
 8019310:	e0ffa117 	ldw	r3,-380(fp)
 8019314:	1885883a 	add	r2,r3,r2
 8019318:	e0bfa115 	stw	r2,-380(fp)
		z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 801931c:	e0ff9617 	ldw	r3,-424(fp)
 8019320:	e0bf9a17 	ldw	r2,-408(fp)
 8019324:	1885883a 	add	r2,r3,r2
 8019328:	1009883a 	mov	r4,r2
 801932c:	01719d44 	movi	r5,-14731
 8019330:	802c2180 	call	802c218 <__mulsi3>
 8019334:	e0bf9515 	stw	r2,-428(fp)
		tmp11 += z1;
 8019338:	e0ff9f17 	ldw	r3,-388(fp)
 801933c:	e0bf9517 	ldw	r2,-428(fp)
 8019340:	1885883a 	add	r2,r3,r2
 8019344:	e0bf9f15 	stw	r2,-388(fp)
		tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 8019348:	e13f9a17 	ldw	r4,-408(fp)
 801934c:	0150d1c4 	movi	r5,17223
 8019350:	802c2180 	call	802c218 <__mulsi3>
 8019354:	1007883a 	mov	r3,r2
 8019358:	e0bf9517 	ldw	r2,-428(fp)
 801935c:	1885883a 	add	r2,r3,r2
 8019360:	e0ffa217 	ldw	r3,-376(fp)
 8019364:	1885883a 	add	r2,r3,r2
 8019368:	e0bfa215 	stw	r2,-376(fp)
		tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 801936c:	e13f9617 	ldw	r4,-424(fp)
 8019370:	01744344 	movi	r5,-12019
 8019374:	802c2180 	call	802c218 <__mulsi3>
 8019378:	1021883a 	mov	r16,r2
			MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 801937c:	e13f9717 	ldw	r4,-420(fp)
 8019380:	014802c4 	movi	r5,8203
 8019384:	802c2180 	call	802c218 <__mulsi3>
		tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
		tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
		z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
		tmp11 += z1;
		tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
		tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 8019388:	80a1883a 	add	r16,r16,r2
			MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
			MULTIPLY(z4, FIX(1.684843907));             /* c3+c9 */
 801938c:	e13f9a17 	ldw	r4,-408(fp)
 8019390:	01728584 	movi	r5,-13802
 8019394:	802c2180 	call	802c218 <__mulsi3>
		tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
		z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
		tmp11 += z1;
		tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
		tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
			MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 8019398:	8085883a 	add	r2,r16,r2
		tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
		tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
		z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
		tmp11 += z1;
		tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
		tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 801939c:	e0ffa017 	ldw	r3,-384(fp)
 80193a0:	1885883a 	add	r2,r3,r2
 80193a4:	e0bfa015 	stw	r2,-384(fp)
			MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
			MULTIPLY(z4, FIX(1.684843907));             /* c3+c9 */

		/* Final output stage */

		outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80193a8:	e0ff9817 	ldw	r3,-416(fp)
 80193ac:	e0bf9417 	ldw	r2,-432(fp)
 80193b0:	1885883a 	add	r2,r3,r2
 80193b4:	1005d4ba 	srai	r2,r2,18
 80193b8:	1080ffcc 	andi	r2,r2,1023
 80193bc:	e0ff9317 	ldw	r3,-436(fp)
 80193c0:	1885883a 	add	r2,r3,r2
 80193c4:	10c00003 	ldbu	r3,0(r2)
 80193c8:	e0bfa317 	ldw	r2,-372(fp)
 80193cc:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80193d0:	e0bfa317 	ldw	r2,-372(fp)
 80193d4:	10800284 	addi	r2,r2,10
 80193d8:	e13f9817 	ldw	r4,-416(fp)
 80193dc:	e0ff9417 	ldw	r3,-432(fp)
 80193e0:	20c7c83a 	sub	r3,r4,r3
 80193e4:	1807d4ba 	srai	r3,r3,18
 80193e8:	18c0ffcc 	andi	r3,r3,1023
 80193ec:	e13f9317 	ldw	r4,-436(fp)
 80193f0:	20c7883a 	add	r3,r4,r3
 80193f4:	18c00003 	ldbu	r3,0(r3)
 80193f8:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80193fc:	e0bfa317 	ldw	r2,-372(fp)
 8019400:	10800044 	addi	r2,r2,1
 8019404:	e13f9d17 	ldw	r4,-396(fp)
 8019408:	e0ff9f17 	ldw	r3,-388(fp)
 801940c:	20c7883a 	add	r3,r4,r3
 8019410:	1807d4ba 	srai	r3,r3,18
 8019414:	18c0ffcc 	andi	r3,r3,1023
 8019418:	e13f9317 	ldw	r4,-436(fp)
 801941c:	20c7883a 	add	r3,r4,r3
 8019420:	18c00003 	ldbu	r3,0(r3)
 8019424:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8019428:	e0bfa317 	ldw	r2,-372(fp)
 801942c:	10800244 	addi	r2,r2,9
 8019430:	e13f9d17 	ldw	r4,-396(fp)
 8019434:	e0ff9f17 	ldw	r3,-388(fp)
 8019438:	20c7c83a 	sub	r3,r4,r3
 801943c:	1807d4ba 	srai	r3,r3,18
 8019440:	18c0ffcc 	andi	r3,r3,1023
 8019444:	e13f9317 	ldw	r4,-436(fp)
 8019448:	20c7883a 	add	r3,r4,r3
 801944c:	18c00003 	ldbu	r3,0(r3)
 8019450:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8019454:	e0bfa317 	ldw	r2,-372(fp)
 8019458:	10800084 	addi	r2,r2,2
 801945c:	e13f9e17 	ldw	r4,-392(fp)
 8019460:	e0ffa117 	ldw	r3,-380(fp)
 8019464:	20c7883a 	add	r3,r4,r3
 8019468:	1807d4ba 	srai	r3,r3,18
 801946c:	18c0ffcc 	andi	r3,r3,1023
 8019470:	e13f9317 	ldw	r4,-436(fp)
 8019474:	20c7883a 	add	r3,r4,r3
 8019478:	18c00003 	ldbu	r3,0(r3)
 801947c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8019480:	e0bfa317 	ldw	r2,-372(fp)
 8019484:	10800204 	addi	r2,r2,8
 8019488:	e13f9e17 	ldw	r4,-392(fp)
 801948c:	e0ffa117 	ldw	r3,-380(fp)
 8019490:	20c7c83a 	sub	r3,r4,r3
 8019494:	1807d4ba 	srai	r3,r3,18
 8019498:	18c0ffcc 	andi	r3,r3,1023
 801949c:	e13f9317 	ldw	r4,-436(fp)
 80194a0:	20c7883a 	add	r3,r4,r3
 80194a4:	18c00003 	ldbu	r3,0(r3)
 80194a8:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80194ac:	e0bfa317 	ldw	r2,-372(fp)
 80194b0:	108000c4 	addi	r2,r2,3
 80194b4:	e13f9917 	ldw	r4,-412(fp)
 80194b8:	e0ffa217 	ldw	r3,-376(fp)
 80194bc:	20c7883a 	add	r3,r4,r3
 80194c0:	1807d4ba 	srai	r3,r3,18
 80194c4:	18c0ffcc 	andi	r3,r3,1023
 80194c8:	e13f9317 	ldw	r4,-436(fp)
 80194cc:	20c7883a 	add	r3,r4,r3
 80194d0:	18c00003 	ldbu	r3,0(r3)
 80194d4:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80194d8:	e0bfa317 	ldw	r2,-372(fp)
 80194dc:	108001c4 	addi	r2,r2,7
 80194e0:	e13f9917 	ldw	r4,-412(fp)
 80194e4:	e0ffa217 	ldw	r3,-376(fp)
 80194e8:	20c7c83a 	sub	r3,r4,r3
 80194ec:	1807d4ba 	srai	r3,r3,18
 80194f0:	18c0ffcc 	andi	r3,r3,1023
 80194f4:	e13f9317 	ldw	r4,-436(fp)
 80194f8:	20c7883a 	add	r3,r4,r3
 80194fc:	18c00003 	ldbu	r3,0(r3)
 8019500:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8019504:	e0bfa317 	ldw	r2,-372(fp)
 8019508:	10800104 	addi	r2,r2,4
 801950c:	e13f9b17 	ldw	r4,-404(fp)
 8019510:	e0ffa017 	ldw	r3,-384(fp)
 8019514:	20c7883a 	add	r3,r4,r3
 8019518:	1807d4ba 	srai	r3,r3,18
 801951c:	18c0ffcc 	andi	r3,r3,1023
 8019520:	e13f9317 	ldw	r4,-436(fp)
 8019524:	20c7883a 	add	r3,r4,r3
 8019528:	18c00003 	ldbu	r3,0(r3)
 801952c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8019530:	e0bfa317 	ldw	r2,-372(fp)
 8019534:	10800184 	addi	r2,r2,6
 8019538:	e13f9b17 	ldw	r4,-404(fp)
 801953c:	e0ffa017 	ldw	r3,-384(fp)
 8019540:	20c7c83a 	sub	r3,r4,r3
 8019544:	1807d4ba 	srai	r3,r3,18
 8019548:	18c0ffcc 	andi	r3,r3,1023
 801954c:	e13f9317 	ldw	r4,-436(fp)
 8019550:	20c7883a 	add	r3,r4,r3
 8019554:	18c00003 	ldbu	r3,0(r3)
 8019558:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25,
 801955c:	e0bfa317 	ldw	r2,-372(fp)
 8019560:	10800144 	addi	r2,r2,5
 8019564:	e0ff9c17 	ldw	r3,-400(fp)
 8019568:	1807d4ba 	srai	r3,r3,18
 801956c:	18c0ffcc 	andi	r3,r3,1023
 8019570:	e13f9317 	ldw	r4,-436(fp)
 8019574:	20c7883a 	add	r3,r4,r3
 8019578:	18c00003 	ldbu	r3,0(r3)
 801957c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 8;		/* advance pointer to next row */
 8019580:	e0bf9117 	ldw	r2,-444(fp)
 8019584:	10800804 	addi	r2,r2,32
 8019588:	e0bf9115 	stw	r2,-444(fp)
	}

	/* Pass 2: process 11 rows from work array, store into output array. */

	wsptr = workspace;
	for (ctr = 0; ctr < 11; ctr++) {
 801958c:	e0bf9217 	ldw	r2,-440(fp)
 8019590:	10800044 	addi	r2,r2,1
 8019594:	e0bf9215 	stw	r2,-440(fp)
 8019598:	e0bf9217 	ldw	r2,-440(fp)
 801959c:	108002d0 	cmplti	r2,r2,11
 80195a0:	103e901e 	bne	r2,zero,8018fe4 <jpeg_idct_11x11+0x690>
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 8;		/* advance pointer to next row */
	}
}
 80195a4:	e037883a 	mov	sp,fp
 80195a8:	dfc00217 	ldw	ra,8(sp)
 80195ac:	df000117 	ldw	fp,4(sp)
 80195b0:	dc000017 	ldw	r16,0(sp)
 80195b4:	dec00304 	addi	sp,sp,12
 80195b8:	f800283a 	ret

080195bc <jpeg_idct_12x12>:

GLOBAL(void)
	jpeg_idct_12x12 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80195bc:	deff8304 	addi	sp,sp,-500
 80195c0:	dfc07c15 	stw	ra,496(sp)
 80195c4:	df007b15 	stw	fp,492(sp)
 80195c8:	dc007a15 	stw	r16,488(sp)
 80195cc:	df007a04 	addi	fp,sp,488
 80195d0:	e13ffc15 	stw	r4,-16(fp)
 80195d4:	e17ffd15 	stw	r5,-12(fp)
 80195d8:	e1bffe15 	stw	r6,-8(fp)
 80195dc:	e1ffff15 	stw	r7,-4(fp)
	INT32 z1, z2, z3, z4;
	JCOEFPTR inptr;
	ISLOW_MULT_TYPE * quantptr;
	int * wsptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80195e0:	e0bffc17 	ldw	r2,-16(fp)
 80195e4:	10804917 	ldw	r2,292(r2)
 80195e8:	10802004 	addi	r2,r2,128
 80195ec:	e0bf8a15 	stw	r2,-472(fp)
	int workspace[8*12];	/* buffers data between passes */
	SHIFT_TEMPS

		/* Pass 1: process columns from input, store into work array. */

		inptr = coef_block;
 80195f0:	e0bffe17 	ldw	r2,-8(fp)
 80195f4:	e0bf8615 	stw	r2,-488(fp)
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 80195f8:	e0bffd17 	ldw	r2,-12(fp)
 80195fc:	10801517 	ldw	r2,84(r2)
 8019600:	e0bf8715 	stw	r2,-484(fp)
	wsptr = workspace;
 8019604:	e0bf9c04 	addi	r2,fp,-400
 8019608:	e0bf8815 	stw	r2,-480(fp)
	for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801960c:	e03f8915 	stw	zero,-476(fp)
 8019610:	00016e06 	br	8019bcc <jpeg_idct_12x12+0x610>
		/* Even part */

		z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8019614:	e0bf8617 	ldw	r2,-488(fp)
 8019618:	1080000b 	ldhu	r2,0(r2)
 801961c:	10ffffcc 	andi	r3,r2,65535
 8019620:	18e0001c 	xori	r3,r3,32768
 8019624:	18e00004 	addi	r3,r3,-32768
 8019628:	e0bf8717 	ldw	r2,-484(fp)
 801962c:	10800017 	ldw	r2,0(r2)
 8019630:	1809883a 	mov	r4,r3
 8019634:	100b883a 	mov	r5,r2
 8019638:	802c2180 	call	802c218 <__mulsi3>
 801963c:	e0bf8b15 	stw	r2,-468(fp)
		z3 <<= CONST_BITS;
 8019640:	e0bf8b17 	ldw	r2,-468(fp)
 8019644:	1004937a 	slli	r2,r2,13
 8019648:	e0bf8b15 	stw	r2,-468(fp)
		/* Add fudge factor here for final descale. */
		z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 801964c:	e0bf8b17 	ldw	r2,-468(fp)
 8019650:	10810004 	addi	r2,r2,1024
 8019654:	e0bf8b15 	stw	r2,-468(fp)

		z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8019658:	e0bf8617 	ldw	r2,-488(fp)
 801965c:	10801004 	addi	r2,r2,64
 8019660:	1080000b 	ldhu	r2,0(r2)
 8019664:	10ffffcc 	andi	r3,r2,65535
 8019668:	18e0001c 	xori	r3,r3,32768
 801966c:	18e00004 	addi	r3,r3,-32768
 8019670:	e0bf8717 	ldw	r2,-484(fp)
 8019674:	10802004 	addi	r2,r2,128
 8019678:	10800017 	ldw	r2,0(r2)
 801967c:	1809883a 	mov	r4,r3
 8019680:	100b883a 	mov	r5,r2
 8019684:	802c2180 	call	802c218 <__mulsi3>
 8019688:	e0bf8c15 	stw	r2,-464(fp)
		z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 801968c:	e13f8c17 	ldw	r4,-464(fp)
 8019690:	0149cc44 	movi	r5,10033
 8019694:	802c2180 	call	802c218 <__mulsi3>
 8019698:	e0bf8c15 	stw	r2,-464(fp)

		tmp10 = z3 + z4;
 801969c:	e0ff8b17 	ldw	r3,-468(fp)
 80196a0:	e0bf8c17 	ldw	r2,-464(fp)
 80196a4:	1885883a 	add	r2,r3,r2
 80196a8:	e0bf8d15 	stw	r2,-460(fp)
		tmp11 = z3 - z4;
 80196ac:	e0ff8b17 	ldw	r3,-468(fp)
 80196b0:	e0bf8c17 	ldw	r2,-464(fp)
 80196b4:	1885c83a 	sub	r2,r3,r2
 80196b8:	e0bf8e15 	stw	r2,-456(fp)

		z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80196bc:	e0bf8617 	ldw	r2,-488(fp)
 80196c0:	10800804 	addi	r2,r2,32
 80196c4:	1080000b 	ldhu	r2,0(r2)
 80196c8:	10ffffcc 	andi	r3,r2,65535
 80196cc:	18e0001c 	xori	r3,r3,32768
 80196d0:	18e00004 	addi	r3,r3,-32768
 80196d4:	e0bf8717 	ldw	r2,-484(fp)
 80196d8:	10801004 	addi	r2,r2,64
 80196dc:	10800017 	ldw	r2,0(r2)
 80196e0:	1809883a 	mov	r4,r3
 80196e4:	100b883a 	mov	r5,r2
 80196e8:	802c2180 	call	802c218 <__mulsi3>
 80196ec:	e0bf8f15 	stw	r2,-452(fp)
		z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 80196f0:	e13f8f17 	ldw	r4,-452(fp)
 80196f4:	014aed84 	movi	r5,11190
 80196f8:	802c2180 	call	802c218 <__mulsi3>
 80196fc:	e0bf8c15 	stw	r2,-464(fp)
		z1 <<= CONST_BITS;
 8019700:	e0bf8f17 	ldw	r2,-452(fp)
 8019704:	1004937a 	slli	r2,r2,13
 8019708:	e0bf8f15 	stw	r2,-452(fp)
		z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801970c:	e0bf8617 	ldw	r2,-488(fp)
 8019710:	10801804 	addi	r2,r2,96
 8019714:	1080000b 	ldhu	r2,0(r2)
 8019718:	10ffffcc 	andi	r3,r2,65535
 801971c:	18e0001c 	xori	r3,r3,32768
 8019720:	18e00004 	addi	r3,r3,-32768
 8019724:	e0bf8717 	ldw	r2,-484(fp)
 8019728:	10803004 	addi	r2,r2,192
 801972c:	10800017 	ldw	r2,0(r2)
 8019730:	1809883a 	mov	r4,r3
 8019734:	100b883a 	mov	r5,r2
 8019738:	802c2180 	call	802c218 <__mulsi3>
 801973c:	e0bf9015 	stw	r2,-448(fp)
		z2 <<= CONST_BITS;
 8019740:	e0bf9017 	ldw	r2,-448(fp)
 8019744:	1004937a 	slli	r2,r2,13
 8019748:	e0bf9015 	stw	r2,-448(fp)

		tmp12 = z1 - z2;
 801974c:	e0ff8f17 	ldw	r3,-452(fp)
 8019750:	e0bf9017 	ldw	r2,-448(fp)
 8019754:	1885c83a 	sub	r2,r3,r2
 8019758:	e0bf9115 	stw	r2,-444(fp)

		tmp21 = z3 + tmp12;
 801975c:	e0ff8b17 	ldw	r3,-468(fp)
 8019760:	e0bf9117 	ldw	r2,-444(fp)
 8019764:	1885883a 	add	r2,r3,r2
 8019768:	e0bf9215 	stw	r2,-440(fp)
		tmp24 = z3 - tmp12;
 801976c:	e0ff8b17 	ldw	r3,-468(fp)
 8019770:	e0bf9117 	ldw	r2,-444(fp)
 8019774:	1885c83a 	sub	r2,r3,r2
 8019778:	e0bf9315 	stw	r2,-436(fp)

		tmp12 = z4 + z2;
 801977c:	e0ff8c17 	ldw	r3,-464(fp)
 8019780:	e0bf9017 	ldw	r2,-448(fp)
 8019784:	1885883a 	add	r2,r3,r2
 8019788:	e0bf9115 	stw	r2,-444(fp)

		tmp20 = tmp10 + tmp12;
 801978c:	e0ff8d17 	ldw	r3,-460(fp)
 8019790:	e0bf9117 	ldw	r2,-444(fp)
 8019794:	1885883a 	add	r2,r3,r2
 8019798:	e0bf9415 	stw	r2,-432(fp)
		tmp25 = tmp10 - tmp12;
 801979c:	e0ff8d17 	ldw	r3,-460(fp)
 80197a0:	e0bf9117 	ldw	r2,-444(fp)
 80197a4:	1885c83a 	sub	r2,r3,r2
 80197a8:	e0bf9515 	stw	r2,-428(fp)

		tmp12 = z4 - z1 - z2;
 80197ac:	e0ff8c17 	ldw	r3,-464(fp)
 80197b0:	e0bf8f17 	ldw	r2,-452(fp)
 80197b4:	1887c83a 	sub	r3,r3,r2
 80197b8:	e0bf9017 	ldw	r2,-448(fp)
 80197bc:	1885c83a 	sub	r2,r3,r2
 80197c0:	e0bf9115 	stw	r2,-444(fp)

		tmp22 = tmp11 + tmp12;
 80197c4:	e0ff8e17 	ldw	r3,-456(fp)
 80197c8:	e0bf9117 	ldw	r2,-444(fp)
 80197cc:	1885883a 	add	r2,r3,r2
 80197d0:	e0bf9615 	stw	r2,-424(fp)
		tmp23 = tmp11 - tmp12;
 80197d4:	e0ff8e17 	ldw	r3,-456(fp)
 80197d8:	e0bf9117 	ldw	r2,-444(fp)
 80197dc:	1885c83a 	sub	r2,r3,r2
 80197e0:	e0bf9715 	stw	r2,-420(fp)

		/* Odd part */

		z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80197e4:	e0bf8617 	ldw	r2,-488(fp)
 80197e8:	10800404 	addi	r2,r2,16
 80197ec:	1080000b 	ldhu	r2,0(r2)
 80197f0:	10ffffcc 	andi	r3,r2,65535
 80197f4:	18e0001c 	xori	r3,r3,32768
 80197f8:	18e00004 	addi	r3,r3,-32768
 80197fc:	e0bf8717 	ldw	r2,-484(fp)
 8019800:	10800804 	addi	r2,r2,32
 8019804:	10800017 	ldw	r2,0(r2)
 8019808:	1809883a 	mov	r4,r3
 801980c:	100b883a 	mov	r5,r2
 8019810:	802c2180 	call	802c218 <__mulsi3>
 8019814:	e0bf8f15 	stw	r2,-452(fp)
		z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8019818:	e0bf8617 	ldw	r2,-488(fp)
 801981c:	10800c04 	addi	r2,r2,48
 8019820:	1080000b 	ldhu	r2,0(r2)
 8019824:	10ffffcc 	andi	r3,r2,65535
 8019828:	18e0001c 	xori	r3,r3,32768
 801982c:	18e00004 	addi	r3,r3,-32768
 8019830:	e0bf8717 	ldw	r2,-484(fp)
 8019834:	10801804 	addi	r2,r2,96
 8019838:	10800017 	ldw	r2,0(r2)
 801983c:	1809883a 	mov	r4,r3
 8019840:	100b883a 	mov	r5,r2
 8019844:	802c2180 	call	802c218 <__mulsi3>
 8019848:	e0bf9015 	stw	r2,-448(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801984c:	e0bf8617 	ldw	r2,-488(fp)
 8019850:	10801404 	addi	r2,r2,80
 8019854:	1080000b 	ldhu	r2,0(r2)
 8019858:	10ffffcc 	andi	r3,r2,65535
 801985c:	18e0001c 	xori	r3,r3,32768
 8019860:	18e00004 	addi	r3,r3,-32768
 8019864:	e0bf8717 	ldw	r2,-484(fp)
 8019868:	10802804 	addi	r2,r2,160
 801986c:	10800017 	ldw	r2,0(r2)
 8019870:	1809883a 	mov	r4,r3
 8019874:	100b883a 	mov	r5,r2
 8019878:	802c2180 	call	802c218 <__mulsi3>
 801987c:	e0bf8b15 	stw	r2,-468(fp)
		z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8019880:	e0bf8617 	ldw	r2,-488(fp)
 8019884:	10801c04 	addi	r2,r2,112
 8019888:	1080000b 	ldhu	r2,0(r2)
 801988c:	10ffffcc 	andi	r3,r2,65535
 8019890:	18e0001c 	xori	r3,r3,32768
 8019894:	18e00004 	addi	r3,r3,-32768
 8019898:	e0bf8717 	ldw	r2,-484(fp)
 801989c:	10803804 	addi	r2,r2,224
 80198a0:	10800017 	ldw	r2,0(r2)
 80198a4:	1809883a 	mov	r4,r3
 80198a8:	100b883a 	mov	r5,r2
 80198ac:	802c2180 	call	802c218 <__mulsi3>
 80198b0:	e0bf8c15 	stw	r2,-464(fp)

		tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 80198b4:	e13f9017 	ldw	r4,-448(fp)
 80198b8:	014a73c4 	movi	r5,10703
 80198bc:	802c2180 	call	802c218 <__mulsi3>
 80198c0:	e0bf8e15 	stw	r2,-456(fp)
		tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 80198c4:	e13f9017 	ldw	r4,-448(fp)
 80198c8:	017babc4 	movi	r5,-4433
 80198cc:	802c2180 	call	802c218 <__mulsi3>
 80198d0:	e0bf9815 	stw	r2,-416(fp)

		tmp10 = z1 + z3;
 80198d4:	e0ff8f17 	ldw	r3,-452(fp)
 80198d8:	e0bf8b17 	ldw	r2,-468(fp)
 80198dc:	1885883a 	add	r2,r3,r2
 80198e0:	e0bf8d15 	stw	r2,-460(fp)
		tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 80198e4:	e0ff8d17 	ldw	r3,-460(fp)
 80198e8:	e0bf8c17 	ldw	r2,-464(fp)
 80198ec:	1885883a 	add	r2,r3,r2
 80198f0:	1009883a 	mov	r4,r2
 80198f4:	0146e344 	movi	r5,7053
 80198f8:	802c2180 	call	802c218 <__mulsi3>
 80198fc:	e0bf9915 	stw	r2,-412(fp)
		tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 8019900:	e13f8d17 	ldw	r4,-460(fp)
 8019904:	014216c4 	movi	r5,2139
 8019908:	802c2180 	call	802c218 <__mulsi3>
 801990c:	1007883a 	mov	r3,r2
 8019910:	e0bf9917 	ldw	r2,-412(fp)
 8019914:	1885883a 	add	r2,r3,r2
 8019918:	e0bf9115 	stw	r2,-444(fp)
		tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 801991c:	e0ff9117 	ldw	r3,-444(fp)
 8019920:	e0bf8e17 	ldw	r2,-456(fp)
 8019924:	18a1883a 	add	r16,r3,r2
 8019928:	e13f8f17 	ldw	r4,-452(fp)
 801992c:	01423dc4 	movi	r5,2295
 8019930:	802c2180 	call	802c218 <__mulsi3>
 8019934:	8085883a 	add	r2,r16,r2
 8019938:	e0bf8d15 	stw	r2,-460(fp)
		tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 801993c:	e0ff8b17 	ldw	r3,-468(fp)
 8019940:	e0bf8c17 	ldw	r2,-464(fp)
 8019944:	1885883a 	add	r2,r3,r2
 8019948:	1009883a 	mov	r4,r2
 801994c:	0177a2c4 	movi	r5,-8565
 8019950:	802c2180 	call	802c218 <__mulsi3>
 8019954:	e0bf9a15 	stw	r2,-408(fp)
		tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8019958:	e0ff9a17 	ldw	r3,-408(fp)
 801995c:	e0bf9817 	ldw	r2,-416(fp)
 8019960:	18a1883a 	add	r16,r3,r2
 8019964:	e13f8b17 	ldw	r4,-468(fp)
 8019968:	01742c04 	movi	r5,-12112
 801996c:	802c2180 	call	802c218 <__mulsi3>
 8019970:	8085883a 	add	r2,r16,r2
 8019974:	e0ff9117 	ldw	r3,-444(fp)
 8019978:	1885883a 	add	r2,r3,r2
 801997c:	e0bf9115 	stw	r2,-444(fp)
		tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8019980:	e0ff9917 	ldw	r3,-412(fp)
 8019984:	e0bf8e17 	ldw	r2,-456(fp)
 8019988:	18a1c83a 	sub	r16,r3,r2
 801998c:	e13f8c17 	ldw	r4,-464(fp)
 8019990:	014cb184 	movi	r5,12998
 8019994:	802c2180 	call	802c218 <__mulsi3>
 8019998:	8085883a 	add	r2,r16,r2
 801999c:	e0ff9a17 	ldw	r3,-408(fp)
 80199a0:	1885883a 	add	r2,r3,r2
 80199a4:	e0bf9a15 	stw	r2,-408(fp)
		tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80199a8:	e13f8f17 	ldw	r4,-452(fp)
 80199ac:	017a9704 	movi	r5,-5540
 80199b0:	802c2180 	call	802c218 <__mulsi3>
 80199b4:	1007883a 	mov	r3,r2
 80199b8:	e0bf9817 	ldw	r2,-416(fp)
 80199bc:	18a1883a 	add	r16,r3,r2
			MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */
 80199c0:	e13f8c17 	ldw	r4,-464(fp)
 80199c4:	01702304 	movi	r5,-16244
 80199c8:	802c2180 	call	802c218 <__mulsi3>
		tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
		tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
		tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
		tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
		tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
		tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80199cc:	8085883a 	add	r2,r16,r2
 80199d0:	e0ff9917 	ldw	r3,-412(fp)
 80199d4:	1885883a 	add	r2,r3,r2
 80199d8:	e0bf9915 	stw	r2,-412(fp)
			MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */

		z1 -= z4;
 80199dc:	e0ff8f17 	ldw	r3,-452(fp)
 80199e0:	e0bf8c17 	ldw	r2,-464(fp)
 80199e4:	1885c83a 	sub	r2,r3,r2
 80199e8:	e0bf8f15 	stw	r2,-452(fp)
		z2 -= z3;
 80199ec:	e0ff9017 	ldw	r3,-448(fp)
 80199f0:	e0bf8b17 	ldw	r2,-468(fp)
 80199f4:	1885c83a 	sub	r2,r3,r2
 80199f8:	e0bf9015 	stw	r2,-448(fp)
		z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 80199fc:	e0ff8f17 	ldw	r3,-452(fp)
 8019a00:	e0bf9017 	ldw	r2,-448(fp)
 8019a04:	1885883a 	add	r2,r3,r2
 8019a08:	1009883a 	mov	r4,r2
 8019a0c:	01445444 	movi	r5,4433
 8019a10:	802c2180 	call	802c218 <__mulsi3>
 8019a14:	e0bf8b15 	stw	r2,-468(fp)
		tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8019a18:	e13f8f17 	ldw	r4,-452(fp)
 8019a1c:	01461f84 	movi	r5,6270
 8019a20:	802c2180 	call	802c218 <__mulsi3>
 8019a24:	1007883a 	mov	r3,r2
 8019a28:	e0bf8b17 	ldw	r2,-468(fp)
 8019a2c:	1885883a 	add	r2,r3,r2
 8019a30:	e0bf8e15 	stw	r2,-456(fp)
		tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8019a34:	e13f9017 	ldw	r4,-448(fp)
 8019a38:	017137c4 	movi	r5,-15137
 8019a3c:	802c2180 	call	802c218 <__mulsi3>
 8019a40:	1007883a 	mov	r3,r2
 8019a44:	e0bf8b17 	ldw	r2,-468(fp)
 8019a48:	1885883a 	add	r2,r3,r2
 8019a4c:	e0bf9815 	stw	r2,-416(fp)

		/* Final output stage */

		wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8019a50:	e0ff9417 	ldw	r3,-432(fp)
 8019a54:	e0bf8d17 	ldw	r2,-460(fp)
 8019a58:	1885883a 	add	r2,r3,r2
 8019a5c:	1007d2fa 	srai	r3,r2,11
 8019a60:	e0bf8817 	ldw	r2,-480(fp)
 8019a64:	10c00015 	stw	r3,0(r2)
		wsptr[8*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8019a68:	e0bf8817 	ldw	r2,-480(fp)
 8019a6c:	10805804 	addi	r2,r2,352
 8019a70:	e13f9417 	ldw	r4,-432(fp)
 8019a74:	e0ff8d17 	ldw	r3,-460(fp)
 8019a78:	20c7c83a 	sub	r3,r4,r3
 8019a7c:	1807d2fa 	srai	r3,r3,11
 8019a80:	10c00015 	stw	r3,0(r2)
		wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8019a84:	e0bf8817 	ldw	r2,-480(fp)
 8019a88:	10800804 	addi	r2,r2,32
 8019a8c:	e13f9217 	ldw	r4,-440(fp)
 8019a90:	e0ff8e17 	ldw	r3,-456(fp)
 8019a94:	20c7883a 	add	r3,r4,r3
 8019a98:	1807d2fa 	srai	r3,r3,11
 8019a9c:	10c00015 	stw	r3,0(r2)
		wsptr[8*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8019aa0:	e0bf8817 	ldw	r2,-480(fp)
 8019aa4:	10805004 	addi	r2,r2,320
 8019aa8:	e13f9217 	ldw	r4,-440(fp)
 8019aac:	e0ff8e17 	ldw	r3,-456(fp)
 8019ab0:	20c7c83a 	sub	r3,r4,r3
 8019ab4:	1807d2fa 	srai	r3,r3,11
 8019ab8:	10c00015 	stw	r3,0(r2)
		wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8019abc:	e0bf8817 	ldw	r2,-480(fp)
 8019ac0:	10801004 	addi	r2,r2,64
 8019ac4:	e13f9617 	ldw	r4,-424(fp)
 8019ac8:	e0ff9117 	ldw	r3,-444(fp)
 8019acc:	20c7883a 	add	r3,r4,r3
 8019ad0:	1807d2fa 	srai	r3,r3,11
 8019ad4:	10c00015 	stw	r3,0(r2)
		wsptr[8*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8019ad8:	e0bf8817 	ldw	r2,-480(fp)
 8019adc:	10804804 	addi	r2,r2,288
 8019ae0:	e13f9617 	ldw	r4,-424(fp)
 8019ae4:	e0ff9117 	ldw	r3,-444(fp)
 8019ae8:	20c7c83a 	sub	r3,r4,r3
 8019aec:	1807d2fa 	srai	r3,r3,11
 8019af0:	10c00015 	stw	r3,0(r2)
		wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8019af4:	e0bf8817 	ldw	r2,-480(fp)
 8019af8:	10801804 	addi	r2,r2,96
 8019afc:	e13f9717 	ldw	r4,-420(fp)
 8019b00:	e0ff9a17 	ldw	r3,-408(fp)
 8019b04:	20c7883a 	add	r3,r4,r3
 8019b08:	1807d2fa 	srai	r3,r3,11
 8019b0c:	10c00015 	stw	r3,0(r2)
		wsptr[8*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8019b10:	e0bf8817 	ldw	r2,-480(fp)
 8019b14:	10804004 	addi	r2,r2,256
 8019b18:	e13f9717 	ldw	r4,-420(fp)
 8019b1c:	e0ff9a17 	ldw	r3,-408(fp)
 8019b20:	20c7c83a 	sub	r3,r4,r3
 8019b24:	1807d2fa 	srai	r3,r3,11
 8019b28:	10c00015 	stw	r3,0(r2)
		wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8019b2c:	e0bf8817 	ldw	r2,-480(fp)
 8019b30:	10802004 	addi	r2,r2,128
 8019b34:	e13f9317 	ldw	r4,-436(fp)
 8019b38:	e0ff9817 	ldw	r3,-416(fp)
 8019b3c:	20c7883a 	add	r3,r4,r3
 8019b40:	1807d2fa 	srai	r3,r3,11
 8019b44:	10c00015 	stw	r3,0(r2)
		wsptr[8*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8019b48:	e0bf8817 	ldw	r2,-480(fp)
 8019b4c:	10803804 	addi	r2,r2,224
 8019b50:	e13f9317 	ldw	r4,-436(fp)
 8019b54:	e0ff9817 	ldw	r3,-416(fp)
 8019b58:	20c7c83a 	sub	r3,r4,r3
 8019b5c:	1807d2fa 	srai	r3,r3,11
 8019b60:	10c00015 	stw	r3,0(r2)
		wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8019b64:	e0bf8817 	ldw	r2,-480(fp)
 8019b68:	10802804 	addi	r2,r2,160
 8019b6c:	e13f9517 	ldw	r4,-428(fp)
 8019b70:	e0ff9917 	ldw	r3,-412(fp)
 8019b74:	20c7883a 	add	r3,r4,r3
 8019b78:	1807d2fa 	srai	r3,r3,11
 8019b7c:	10c00015 	stw	r3,0(r2)
		wsptr[8*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8019b80:	e0bf8817 	ldw	r2,-480(fp)
 8019b84:	10803004 	addi	r2,r2,192
 8019b88:	e13f9517 	ldw	r4,-428(fp)
 8019b8c:	e0ff9917 	ldw	r3,-412(fp)
 8019b90:	20c7c83a 	sub	r3,r4,r3
 8019b94:	1807d2fa 	srai	r3,r3,11
 8019b98:	10c00015 	stw	r3,0(r2)
		/* Pass 1: process columns from input, store into work array. */

		inptr = coef_block;
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
	wsptr = workspace;
	for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8019b9c:	e0bf8917 	ldw	r2,-476(fp)
 8019ba0:	10800044 	addi	r2,r2,1
 8019ba4:	e0bf8915 	stw	r2,-476(fp)
 8019ba8:	e0bf8617 	ldw	r2,-488(fp)
 8019bac:	10800084 	addi	r2,r2,2
 8019bb0:	e0bf8615 	stw	r2,-488(fp)
 8019bb4:	e0bf8717 	ldw	r2,-484(fp)
 8019bb8:	10800104 	addi	r2,r2,4
 8019bbc:	e0bf8715 	stw	r2,-484(fp)
 8019bc0:	e0bf8817 	ldw	r2,-480(fp)
 8019bc4:	10800104 	addi	r2,r2,4
 8019bc8:	e0bf8815 	stw	r2,-480(fp)
 8019bcc:	e0bf8917 	ldw	r2,-476(fp)
 8019bd0:	10800210 	cmplti	r2,r2,8
 8019bd4:	103e8f1e 	bne	r2,zero,8019614 <jpeg_idct_12x12+0x58>
		wsptr[8*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
	}

	/* Pass 2: process 12 rows from work array, store into output array. */

	wsptr = workspace;
 8019bd8:	e0bf9c04 	addi	r2,fp,-400
 8019bdc:	e0bf8815 	stw	r2,-480(fp)
	for (ctr = 0; ctr < 12; ctr++) {
 8019be0:	e03f8915 	stw	zero,-476(fp)
 8019be4:	00015806 	br	801a148 <jpeg_idct_12x12+0xb8c>
		outptr = output_buf[ctr] + output_col;
 8019be8:	e0bf8917 	ldw	r2,-476(fp)
 8019bec:	1085883a 	add	r2,r2,r2
 8019bf0:	1085883a 	add	r2,r2,r2
 8019bf4:	e0ffff17 	ldw	r3,-4(fp)
 8019bf8:	1885883a 	add	r2,r3,r2
 8019bfc:	10c00017 	ldw	r3,0(r2)
 8019c00:	e0800317 	ldw	r2,12(fp)
 8019c04:	1885883a 	add	r2,r3,r2
 8019c08:	e0bf9b15 	stw	r2,-404(fp)

		/* Even part */

		/* Add fudge factor here for final descale. */
		z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8019c0c:	e0bf8817 	ldw	r2,-480(fp)
 8019c10:	10800017 	ldw	r2,0(r2)
 8019c14:	10800404 	addi	r2,r2,16
 8019c18:	e0bf8b15 	stw	r2,-468(fp)
		z3 <<= CONST_BITS;
 8019c1c:	e0bf8b17 	ldw	r2,-468(fp)
 8019c20:	1004937a 	slli	r2,r2,13
 8019c24:	e0bf8b15 	stw	r2,-468(fp)

		z4 = (INT32) wsptr[4];
 8019c28:	e0bf8817 	ldw	r2,-480(fp)
 8019c2c:	10800404 	addi	r2,r2,16
 8019c30:	10800017 	ldw	r2,0(r2)
 8019c34:	e0bf8c15 	stw	r2,-464(fp)
		z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8019c38:	e13f8c17 	ldw	r4,-464(fp)
 8019c3c:	0149cc44 	movi	r5,10033
 8019c40:	802c2180 	call	802c218 <__mulsi3>
 8019c44:	e0bf8c15 	stw	r2,-464(fp)

		tmp10 = z3 + z4;
 8019c48:	e0ff8b17 	ldw	r3,-468(fp)
 8019c4c:	e0bf8c17 	ldw	r2,-464(fp)
 8019c50:	1885883a 	add	r2,r3,r2
 8019c54:	e0bf8d15 	stw	r2,-460(fp)
		tmp11 = z3 - z4;
 8019c58:	e0ff8b17 	ldw	r3,-468(fp)
 8019c5c:	e0bf8c17 	ldw	r2,-464(fp)
 8019c60:	1885c83a 	sub	r2,r3,r2
 8019c64:	e0bf8e15 	stw	r2,-456(fp)

		z1 = (INT32) wsptr[2];
 8019c68:	e0bf8817 	ldw	r2,-480(fp)
 8019c6c:	10800204 	addi	r2,r2,8
 8019c70:	10800017 	ldw	r2,0(r2)
 8019c74:	e0bf8f15 	stw	r2,-452(fp)
		z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8019c78:	e13f8f17 	ldw	r4,-452(fp)
 8019c7c:	014aed84 	movi	r5,11190
 8019c80:	802c2180 	call	802c218 <__mulsi3>
 8019c84:	e0bf8c15 	stw	r2,-464(fp)
		z1 <<= CONST_BITS;
 8019c88:	e0bf8f17 	ldw	r2,-452(fp)
 8019c8c:	1004937a 	slli	r2,r2,13
 8019c90:	e0bf8f15 	stw	r2,-452(fp)
		z2 = (INT32) wsptr[6];
 8019c94:	e0bf8817 	ldw	r2,-480(fp)
 8019c98:	10800604 	addi	r2,r2,24
 8019c9c:	10800017 	ldw	r2,0(r2)
 8019ca0:	e0bf9015 	stw	r2,-448(fp)
		z2 <<= CONST_BITS;
 8019ca4:	e0bf9017 	ldw	r2,-448(fp)
 8019ca8:	1004937a 	slli	r2,r2,13
 8019cac:	e0bf9015 	stw	r2,-448(fp)

		tmp12 = z1 - z2;
 8019cb0:	e0ff8f17 	ldw	r3,-452(fp)
 8019cb4:	e0bf9017 	ldw	r2,-448(fp)
 8019cb8:	1885c83a 	sub	r2,r3,r2
 8019cbc:	e0bf9115 	stw	r2,-444(fp)

		tmp21 = z3 + tmp12;
 8019cc0:	e0ff8b17 	ldw	r3,-468(fp)
 8019cc4:	e0bf9117 	ldw	r2,-444(fp)
 8019cc8:	1885883a 	add	r2,r3,r2
 8019ccc:	e0bf9215 	stw	r2,-440(fp)
		tmp24 = z3 - tmp12;
 8019cd0:	e0ff8b17 	ldw	r3,-468(fp)
 8019cd4:	e0bf9117 	ldw	r2,-444(fp)
 8019cd8:	1885c83a 	sub	r2,r3,r2
 8019cdc:	e0bf9315 	stw	r2,-436(fp)

		tmp12 = z4 + z2;
 8019ce0:	e0ff8c17 	ldw	r3,-464(fp)
 8019ce4:	e0bf9017 	ldw	r2,-448(fp)
 8019ce8:	1885883a 	add	r2,r3,r2
 8019cec:	e0bf9115 	stw	r2,-444(fp)

		tmp20 = tmp10 + tmp12;
 8019cf0:	e0ff8d17 	ldw	r3,-460(fp)
 8019cf4:	e0bf9117 	ldw	r2,-444(fp)
 8019cf8:	1885883a 	add	r2,r3,r2
 8019cfc:	e0bf9415 	stw	r2,-432(fp)
		tmp25 = tmp10 - tmp12;
 8019d00:	e0ff8d17 	ldw	r3,-460(fp)
 8019d04:	e0bf9117 	ldw	r2,-444(fp)
 8019d08:	1885c83a 	sub	r2,r3,r2
 8019d0c:	e0bf9515 	stw	r2,-428(fp)

		tmp12 = z4 - z1 - z2;
 8019d10:	e0ff8c17 	ldw	r3,-464(fp)
 8019d14:	e0bf8f17 	ldw	r2,-452(fp)
 8019d18:	1887c83a 	sub	r3,r3,r2
 8019d1c:	e0bf9017 	ldw	r2,-448(fp)
 8019d20:	1885c83a 	sub	r2,r3,r2
 8019d24:	e0bf9115 	stw	r2,-444(fp)

		tmp22 = tmp11 + tmp12;
 8019d28:	e0ff8e17 	ldw	r3,-456(fp)
 8019d2c:	e0bf9117 	ldw	r2,-444(fp)
 8019d30:	1885883a 	add	r2,r3,r2
 8019d34:	e0bf9615 	stw	r2,-424(fp)
		tmp23 = tmp11 - tmp12;
 8019d38:	e0ff8e17 	ldw	r3,-456(fp)
 8019d3c:	e0bf9117 	ldw	r2,-444(fp)
 8019d40:	1885c83a 	sub	r2,r3,r2
 8019d44:	e0bf9715 	stw	r2,-420(fp)

		/* Odd part */

		z1 = (INT32) wsptr[1];
 8019d48:	e0bf8817 	ldw	r2,-480(fp)
 8019d4c:	10800104 	addi	r2,r2,4
 8019d50:	10800017 	ldw	r2,0(r2)
 8019d54:	e0bf8f15 	stw	r2,-452(fp)
		z2 = (INT32) wsptr[3];
 8019d58:	e0bf8817 	ldw	r2,-480(fp)
 8019d5c:	10800304 	addi	r2,r2,12
 8019d60:	10800017 	ldw	r2,0(r2)
 8019d64:	e0bf9015 	stw	r2,-448(fp)
		z3 = (INT32) wsptr[5];
 8019d68:	e0bf8817 	ldw	r2,-480(fp)
 8019d6c:	10800504 	addi	r2,r2,20
 8019d70:	10800017 	ldw	r2,0(r2)
 8019d74:	e0bf8b15 	stw	r2,-468(fp)
		z4 = (INT32) wsptr[7];
 8019d78:	e0bf8817 	ldw	r2,-480(fp)
 8019d7c:	10800704 	addi	r2,r2,28
 8019d80:	10800017 	ldw	r2,0(r2)
 8019d84:	e0bf8c15 	stw	r2,-464(fp)

		tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8019d88:	e13f9017 	ldw	r4,-448(fp)
 8019d8c:	014a73c4 	movi	r5,10703
 8019d90:	802c2180 	call	802c218 <__mulsi3>
 8019d94:	e0bf8e15 	stw	r2,-456(fp)
		tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 8019d98:	e13f9017 	ldw	r4,-448(fp)
 8019d9c:	017babc4 	movi	r5,-4433
 8019da0:	802c2180 	call	802c218 <__mulsi3>
 8019da4:	e0bf9815 	stw	r2,-416(fp)

		tmp10 = z1 + z3;
 8019da8:	e0ff8f17 	ldw	r3,-452(fp)
 8019dac:	e0bf8b17 	ldw	r2,-468(fp)
 8019db0:	1885883a 	add	r2,r3,r2
 8019db4:	e0bf8d15 	stw	r2,-460(fp)
		tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8019db8:	e0ff8d17 	ldw	r3,-460(fp)
 8019dbc:	e0bf8c17 	ldw	r2,-464(fp)
 8019dc0:	1885883a 	add	r2,r3,r2
 8019dc4:	1009883a 	mov	r4,r2
 8019dc8:	0146e344 	movi	r5,7053
 8019dcc:	802c2180 	call	802c218 <__mulsi3>
 8019dd0:	e0bf9915 	stw	r2,-412(fp)
		tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 8019dd4:	e13f8d17 	ldw	r4,-460(fp)
 8019dd8:	014216c4 	movi	r5,2139
 8019ddc:	802c2180 	call	802c218 <__mulsi3>
 8019de0:	1007883a 	mov	r3,r2
 8019de4:	e0bf9917 	ldw	r2,-412(fp)
 8019de8:	1885883a 	add	r2,r3,r2
 8019dec:	e0bf9115 	stw	r2,-444(fp)
		tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8019df0:	e0ff9117 	ldw	r3,-444(fp)
 8019df4:	e0bf8e17 	ldw	r2,-456(fp)
 8019df8:	18a1883a 	add	r16,r3,r2
 8019dfc:	e13f8f17 	ldw	r4,-452(fp)
 8019e00:	01423dc4 	movi	r5,2295
 8019e04:	802c2180 	call	802c218 <__mulsi3>
 8019e08:	8085883a 	add	r2,r16,r2
 8019e0c:	e0bf8d15 	stw	r2,-460(fp)
		tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8019e10:	e0ff8b17 	ldw	r3,-468(fp)
 8019e14:	e0bf8c17 	ldw	r2,-464(fp)
 8019e18:	1885883a 	add	r2,r3,r2
 8019e1c:	1009883a 	mov	r4,r2
 8019e20:	0177a2c4 	movi	r5,-8565
 8019e24:	802c2180 	call	802c218 <__mulsi3>
 8019e28:	e0bf9a15 	stw	r2,-408(fp)
		tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8019e2c:	e0ff9a17 	ldw	r3,-408(fp)
 8019e30:	e0bf9817 	ldw	r2,-416(fp)
 8019e34:	18a1883a 	add	r16,r3,r2
 8019e38:	e13f8b17 	ldw	r4,-468(fp)
 8019e3c:	01742c04 	movi	r5,-12112
 8019e40:	802c2180 	call	802c218 <__mulsi3>
 8019e44:	8085883a 	add	r2,r16,r2
 8019e48:	e0ff9117 	ldw	r3,-444(fp)
 8019e4c:	1885883a 	add	r2,r3,r2
 8019e50:	e0bf9115 	stw	r2,-444(fp)
		tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8019e54:	e0ff9917 	ldw	r3,-412(fp)
 8019e58:	e0bf8e17 	ldw	r2,-456(fp)
 8019e5c:	18a1c83a 	sub	r16,r3,r2
 8019e60:	e13f8c17 	ldw	r4,-464(fp)
 8019e64:	014cb184 	movi	r5,12998
 8019e68:	802c2180 	call	802c218 <__mulsi3>
 8019e6c:	8085883a 	add	r2,r16,r2
 8019e70:	e0ff9a17 	ldw	r3,-408(fp)
 8019e74:	1885883a 	add	r2,r3,r2
 8019e78:	e0bf9a15 	stw	r2,-408(fp)
		tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8019e7c:	e13f8f17 	ldw	r4,-452(fp)
 8019e80:	017a9704 	movi	r5,-5540
 8019e84:	802c2180 	call	802c218 <__mulsi3>
 8019e88:	1007883a 	mov	r3,r2
 8019e8c:	e0bf9817 	ldw	r2,-416(fp)
 8019e90:	18a1883a 	add	r16,r3,r2
			MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */
 8019e94:	e13f8c17 	ldw	r4,-464(fp)
 8019e98:	01702304 	movi	r5,-16244
 8019e9c:	802c2180 	call	802c218 <__mulsi3>
		tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
		tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
		tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
		tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
		tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
		tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8019ea0:	8085883a 	add	r2,r16,r2
 8019ea4:	e0ff9917 	ldw	r3,-412(fp)
 8019ea8:	1885883a 	add	r2,r3,r2
 8019eac:	e0bf9915 	stw	r2,-412(fp)
			MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */

		z1 -= z4;
 8019eb0:	e0ff8f17 	ldw	r3,-452(fp)
 8019eb4:	e0bf8c17 	ldw	r2,-464(fp)
 8019eb8:	1885c83a 	sub	r2,r3,r2
 8019ebc:	e0bf8f15 	stw	r2,-452(fp)
		z2 -= z3;
 8019ec0:	e0ff9017 	ldw	r3,-448(fp)
 8019ec4:	e0bf8b17 	ldw	r2,-468(fp)
 8019ec8:	1885c83a 	sub	r2,r3,r2
 8019ecc:	e0bf9015 	stw	r2,-448(fp)
		z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8019ed0:	e0ff8f17 	ldw	r3,-452(fp)
 8019ed4:	e0bf9017 	ldw	r2,-448(fp)
 8019ed8:	1885883a 	add	r2,r3,r2
 8019edc:	1009883a 	mov	r4,r2
 8019ee0:	01445444 	movi	r5,4433
 8019ee4:	802c2180 	call	802c218 <__mulsi3>
 8019ee8:	e0bf8b15 	stw	r2,-468(fp)
		tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8019eec:	e13f8f17 	ldw	r4,-452(fp)
 8019ef0:	01461f84 	movi	r5,6270
 8019ef4:	802c2180 	call	802c218 <__mulsi3>
 8019ef8:	1007883a 	mov	r3,r2
 8019efc:	e0bf8b17 	ldw	r2,-468(fp)
 8019f00:	1885883a 	add	r2,r3,r2
 8019f04:	e0bf8e15 	stw	r2,-456(fp)
		tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8019f08:	e13f9017 	ldw	r4,-448(fp)
 8019f0c:	017137c4 	movi	r5,-15137
 8019f10:	802c2180 	call	802c218 <__mulsi3>
 8019f14:	1007883a 	mov	r3,r2
 8019f18:	e0bf8b17 	ldw	r2,-468(fp)
 8019f1c:	1885883a 	add	r2,r3,r2
 8019f20:	e0bf9815 	stw	r2,-416(fp)

		/* Final output stage */

		outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8019f24:	e0ff9417 	ldw	r3,-432(fp)
 8019f28:	e0bf8d17 	ldw	r2,-460(fp)
 8019f2c:	1885883a 	add	r2,r3,r2
 8019f30:	1005d4ba 	srai	r2,r2,18
 8019f34:	1080ffcc 	andi	r2,r2,1023
 8019f38:	e0ff8a17 	ldw	r3,-472(fp)
 8019f3c:	1885883a 	add	r2,r3,r2
 8019f40:	10c00003 	ldbu	r3,0(r2)
 8019f44:	e0bf9b17 	ldw	r2,-404(fp)
 8019f48:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8019f4c:	e0bf9b17 	ldw	r2,-404(fp)
 8019f50:	108002c4 	addi	r2,r2,11
 8019f54:	e13f9417 	ldw	r4,-432(fp)
 8019f58:	e0ff8d17 	ldw	r3,-460(fp)
 8019f5c:	20c7c83a 	sub	r3,r4,r3
 8019f60:	1807d4ba 	srai	r3,r3,18
 8019f64:	18c0ffcc 	andi	r3,r3,1023
 8019f68:	e13f8a17 	ldw	r4,-472(fp)
 8019f6c:	20c7883a 	add	r3,r4,r3
 8019f70:	18c00003 	ldbu	r3,0(r3)
 8019f74:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8019f78:	e0bf9b17 	ldw	r2,-404(fp)
 8019f7c:	10800044 	addi	r2,r2,1
 8019f80:	e13f9217 	ldw	r4,-440(fp)
 8019f84:	e0ff8e17 	ldw	r3,-456(fp)
 8019f88:	20c7883a 	add	r3,r4,r3
 8019f8c:	1807d4ba 	srai	r3,r3,18
 8019f90:	18c0ffcc 	andi	r3,r3,1023
 8019f94:	e13f8a17 	ldw	r4,-472(fp)
 8019f98:	20c7883a 	add	r3,r4,r3
 8019f9c:	18c00003 	ldbu	r3,0(r3)
 8019fa0:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8019fa4:	e0bf9b17 	ldw	r2,-404(fp)
 8019fa8:	10800284 	addi	r2,r2,10
 8019fac:	e13f9217 	ldw	r4,-440(fp)
 8019fb0:	e0ff8e17 	ldw	r3,-456(fp)
 8019fb4:	20c7c83a 	sub	r3,r4,r3
 8019fb8:	1807d4ba 	srai	r3,r3,18
 8019fbc:	18c0ffcc 	andi	r3,r3,1023
 8019fc0:	e13f8a17 	ldw	r4,-472(fp)
 8019fc4:	20c7883a 	add	r3,r4,r3
 8019fc8:	18c00003 	ldbu	r3,0(r3)
 8019fcc:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8019fd0:	e0bf9b17 	ldw	r2,-404(fp)
 8019fd4:	10800084 	addi	r2,r2,2
 8019fd8:	e13f9617 	ldw	r4,-424(fp)
 8019fdc:	e0ff9117 	ldw	r3,-444(fp)
 8019fe0:	20c7883a 	add	r3,r4,r3
 8019fe4:	1807d4ba 	srai	r3,r3,18
 8019fe8:	18c0ffcc 	andi	r3,r3,1023
 8019fec:	e13f8a17 	ldw	r4,-472(fp)
 8019ff0:	20c7883a 	add	r3,r4,r3
 8019ff4:	18c00003 	ldbu	r3,0(r3)
 8019ff8:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8019ffc:	e0bf9b17 	ldw	r2,-404(fp)
 801a000:	10800244 	addi	r2,r2,9
 801a004:	e13f9617 	ldw	r4,-424(fp)
 801a008:	e0ff9117 	ldw	r3,-444(fp)
 801a00c:	20c7c83a 	sub	r3,r4,r3
 801a010:	1807d4ba 	srai	r3,r3,18
 801a014:	18c0ffcc 	andi	r3,r3,1023
 801a018:	e13f8a17 	ldw	r4,-472(fp)
 801a01c:	20c7883a 	add	r3,r4,r3
 801a020:	18c00003 	ldbu	r3,0(r3)
 801a024:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801a028:	e0bf9b17 	ldw	r2,-404(fp)
 801a02c:	108000c4 	addi	r2,r2,3
 801a030:	e13f9717 	ldw	r4,-420(fp)
 801a034:	e0ff9a17 	ldw	r3,-408(fp)
 801a038:	20c7883a 	add	r3,r4,r3
 801a03c:	1807d4ba 	srai	r3,r3,18
 801a040:	18c0ffcc 	andi	r3,r3,1023
 801a044:	e13f8a17 	ldw	r4,-472(fp)
 801a048:	20c7883a 	add	r3,r4,r3
 801a04c:	18c00003 	ldbu	r3,0(r3)
 801a050:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801a054:	e0bf9b17 	ldw	r2,-404(fp)
 801a058:	10800204 	addi	r2,r2,8
 801a05c:	e13f9717 	ldw	r4,-420(fp)
 801a060:	e0ff9a17 	ldw	r3,-408(fp)
 801a064:	20c7c83a 	sub	r3,r4,r3
 801a068:	1807d4ba 	srai	r3,r3,18
 801a06c:	18c0ffcc 	andi	r3,r3,1023
 801a070:	e13f8a17 	ldw	r4,-472(fp)
 801a074:	20c7883a 	add	r3,r4,r3
 801a078:	18c00003 	ldbu	r3,0(r3)
 801a07c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801a080:	e0bf9b17 	ldw	r2,-404(fp)
 801a084:	10800104 	addi	r2,r2,4
 801a088:	e13f9317 	ldw	r4,-436(fp)
 801a08c:	e0ff9817 	ldw	r3,-416(fp)
 801a090:	20c7883a 	add	r3,r4,r3
 801a094:	1807d4ba 	srai	r3,r3,18
 801a098:	18c0ffcc 	andi	r3,r3,1023
 801a09c:	e13f8a17 	ldw	r4,-472(fp)
 801a0a0:	20c7883a 	add	r3,r4,r3
 801a0a4:	18c00003 	ldbu	r3,0(r3)
 801a0a8:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801a0ac:	e0bf9b17 	ldw	r2,-404(fp)
 801a0b0:	108001c4 	addi	r2,r2,7
 801a0b4:	e13f9317 	ldw	r4,-436(fp)
 801a0b8:	e0ff9817 	ldw	r3,-416(fp)
 801a0bc:	20c7c83a 	sub	r3,r4,r3
 801a0c0:	1807d4ba 	srai	r3,r3,18
 801a0c4:	18c0ffcc 	andi	r3,r3,1023
 801a0c8:	e13f8a17 	ldw	r4,-472(fp)
 801a0cc:	20c7883a 	add	r3,r4,r3
 801a0d0:	18c00003 	ldbu	r3,0(r3)
 801a0d4:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 801a0d8:	e0bf9b17 	ldw	r2,-404(fp)
 801a0dc:	10800144 	addi	r2,r2,5
 801a0e0:	e13f9517 	ldw	r4,-428(fp)
 801a0e4:	e0ff9917 	ldw	r3,-412(fp)
 801a0e8:	20c7883a 	add	r3,r4,r3
 801a0ec:	1807d4ba 	srai	r3,r3,18
 801a0f0:	18c0ffcc 	andi	r3,r3,1023
 801a0f4:	e13f8a17 	ldw	r4,-472(fp)
 801a0f8:	20c7883a 	add	r3,r4,r3
 801a0fc:	18c00003 	ldbu	r3,0(r3)
 801a100:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801a104:	e0bf9b17 	ldw	r2,-404(fp)
 801a108:	10800184 	addi	r2,r2,6
 801a10c:	e13f9517 	ldw	r4,-428(fp)
 801a110:	e0ff9917 	ldw	r3,-412(fp)
 801a114:	20c7c83a 	sub	r3,r4,r3
 801a118:	1807d4ba 	srai	r3,r3,18
 801a11c:	18c0ffcc 	andi	r3,r3,1023
 801a120:	e13f8a17 	ldw	r4,-472(fp)
 801a124:	20c7883a 	add	r3,r4,r3
 801a128:	18c00003 	ldbu	r3,0(r3)
 801a12c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 8;		/* advance pointer to next row */
 801a130:	e0bf8817 	ldw	r2,-480(fp)
 801a134:	10800804 	addi	r2,r2,32
 801a138:	e0bf8815 	stw	r2,-480(fp)
	}

	/* Pass 2: process 12 rows from work array, store into output array. */

	wsptr = workspace;
	for (ctr = 0; ctr < 12; ctr++) {
 801a13c:	e0bf8917 	ldw	r2,-476(fp)
 801a140:	10800044 	addi	r2,r2,1
 801a144:	e0bf8915 	stw	r2,-476(fp)
 801a148:	e0bf8917 	ldw	r2,-476(fp)
 801a14c:	10800310 	cmplti	r2,r2,12
 801a150:	103ea51e 	bne	r2,zero,8019be8 <jpeg_idct_12x12+0x62c>
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 8;		/* advance pointer to next row */
	}
}
 801a154:	e037883a 	mov	sp,fp
 801a158:	dfc00217 	ldw	ra,8(sp)
 801a15c:	df000117 	ldw	fp,4(sp)
 801a160:	dc000017 	ldw	r16,0(sp)
 801a164:	dec00304 	addi	sp,sp,12
 801a168:	f800283a 	ret

0801a16c <jpeg_idct_13x13>:

GLOBAL(void)
	jpeg_idct_13x13 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801a16c:	deff7a04 	addi	sp,sp,-536
 801a170:	dfc08515 	stw	ra,532(sp)
 801a174:	df008415 	stw	fp,528(sp)
 801a178:	dc008315 	stw	r16,524(sp)
 801a17c:	df008304 	addi	fp,sp,524
 801a180:	e13ffc15 	stw	r4,-16(fp)
 801a184:	e17ffd15 	stw	r5,-12(fp)
 801a188:	e1bffe15 	stw	r6,-8(fp)
 801a18c:	e1ffff15 	stw	r7,-4(fp)
	INT32 z1, z2, z3, z4;
	JCOEFPTR inptr;
	ISLOW_MULT_TYPE * quantptr;
	int * wsptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801a190:	e0bffc17 	ldw	r2,-16(fp)
 801a194:	10804917 	ldw	r2,292(r2)
 801a198:	10802004 	addi	r2,r2,128
 801a19c:	e0bf8115 	stw	r2,-508(fp)
	int workspace[8*13];	/* buffers data between passes */
	SHIFT_TEMPS

		/* Pass 1: process columns from input, store into work array. */

		inptr = coef_block;
 801a1a0:	e0bffe17 	ldw	r2,-8(fp)
 801a1a4:	e0bf7d15 	stw	r2,-524(fp)
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801a1a8:	e0bffd17 	ldw	r2,-12(fp)
 801a1ac:	10801517 	ldw	r2,84(r2)
 801a1b0:	e0bf7e15 	stw	r2,-520(fp)
	wsptr = workspace;
 801a1b4:	e0bf9404 	addi	r2,fp,-432
 801a1b8:	e0bf7f15 	stw	r2,-516(fp)
	for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801a1bc:	e03f8015 	stw	zero,-512(fp)
 801a1c0:	0001bc06 	br	801a8b4 <jpeg_idct_13x13+0x748>
		/* Even part */

		z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801a1c4:	e0bf7d17 	ldw	r2,-524(fp)
 801a1c8:	1080000b 	ldhu	r2,0(r2)
 801a1cc:	10ffffcc 	andi	r3,r2,65535
 801a1d0:	18e0001c 	xori	r3,r3,32768
 801a1d4:	18e00004 	addi	r3,r3,-32768
 801a1d8:	e0bf7e17 	ldw	r2,-520(fp)
 801a1dc:	10800017 	ldw	r2,0(r2)
 801a1e0:	1809883a 	mov	r4,r3
 801a1e4:	100b883a 	mov	r5,r2
 801a1e8:	802c2180 	call	802c218 <__mulsi3>
 801a1ec:	e0bf8215 	stw	r2,-504(fp)
		z1 <<= CONST_BITS;
 801a1f0:	e0bf8217 	ldw	r2,-504(fp)
 801a1f4:	1004937a 	slli	r2,r2,13
 801a1f8:	e0bf8215 	stw	r2,-504(fp)
		/* Add fudge factor here for final descale. */
		z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 801a1fc:	e0bf8217 	ldw	r2,-504(fp)
 801a200:	10810004 	addi	r2,r2,1024
 801a204:	e0bf8215 	stw	r2,-504(fp)

		z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801a208:	e0bf7d17 	ldw	r2,-524(fp)
 801a20c:	10800804 	addi	r2,r2,32
 801a210:	1080000b 	ldhu	r2,0(r2)
 801a214:	10ffffcc 	andi	r3,r2,65535
 801a218:	18e0001c 	xori	r3,r3,32768
 801a21c:	18e00004 	addi	r3,r3,-32768
 801a220:	e0bf7e17 	ldw	r2,-520(fp)
 801a224:	10801004 	addi	r2,r2,64
 801a228:	10800017 	ldw	r2,0(r2)
 801a22c:	1809883a 	mov	r4,r3
 801a230:	100b883a 	mov	r5,r2
 801a234:	802c2180 	call	802c218 <__mulsi3>
 801a238:	e0bf8315 	stw	r2,-500(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801a23c:	e0bf7d17 	ldw	r2,-524(fp)
 801a240:	10801004 	addi	r2,r2,64
 801a244:	1080000b 	ldhu	r2,0(r2)
 801a248:	10ffffcc 	andi	r3,r2,65535
 801a24c:	18e0001c 	xori	r3,r3,32768
 801a250:	18e00004 	addi	r3,r3,-32768
 801a254:	e0bf7e17 	ldw	r2,-520(fp)
 801a258:	10802004 	addi	r2,r2,128
 801a25c:	10800017 	ldw	r2,0(r2)
 801a260:	1809883a 	mov	r4,r3
 801a264:	100b883a 	mov	r5,r2
 801a268:	802c2180 	call	802c218 <__mulsi3>
 801a26c:	e0bf8415 	stw	r2,-496(fp)
		z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801a270:	e0bf7d17 	ldw	r2,-524(fp)
 801a274:	10801804 	addi	r2,r2,96
 801a278:	1080000b 	ldhu	r2,0(r2)
 801a27c:	10ffffcc 	andi	r3,r2,65535
 801a280:	18e0001c 	xori	r3,r3,32768
 801a284:	18e00004 	addi	r3,r3,-32768
 801a288:	e0bf7e17 	ldw	r2,-520(fp)
 801a28c:	10803004 	addi	r2,r2,192
 801a290:	10800017 	ldw	r2,0(r2)
 801a294:	1809883a 	mov	r4,r3
 801a298:	100b883a 	mov	r5,r2
 801a29c:	802c2180 	call	802c218 <__mulsi3>
 801a2a0:	e0bf8515 	stw	r2,-492(fp)

		tmp10 = z3 + z4;
 801a2a4:	e0ff8417 	ldw	r3,-496(fp)
 801a2a8:	e0bf8517 	ldw	r2,-492(fp)
 801a2ac:	1885883a 	add	r2,r3,r2
 801a2b0:	e0bf8615 	stw	r2,-488(fp)
		tmp11 = z3 - z4;
 801a2b4:	e0ff8417 	ldw	r3,-496(fp)
 801a2b8:	e0bf8517 	ldw	r2,-492(fp)
 801a2bc:	1885c83a 	sub	r2,r3,r2
 801a2c0:	e0bf8715 	stw	r2,-484(fp)

		tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 801a2c4:	e13f8617 	ldw	r4,-488(fp)
 801a2c8:	01493e44 	movi	r5,9465
 801a2cc:	802c2180 	call	802c218 <__mulsi3>
 801a2d0:	e0bf8815 	stw	r2,-480(fp)
		tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 801a2d4:	e13f8717 	ldw	r4,-484(fp)
 801a2d8:	0140c644 	movi	r5,793
 801a2dc:	802c2180 	call	802c218 <__mulsi3>
 801a2e0:	1007883a 	mov	r3,r2
 801a2e4:	e0bf8217 	ldw	r2,-504(fp)
 801a2e8:	1885883a 	add	r2,r3,r2
 801a2ec:	e0bf8915 	stw	r2,-476(fp)

		tmp20 = MULTIPLY(z2, FIX(1.373119086)) + tmp12 + tmp13;   /* c2 */
 801a2f0:	e13f8317 	ldw	r4,-500(fp)
 801a2f4:	014afc44 	movi	r5,11249
 801a2f8:	802c2180 	call	802c218 <__mulsi3>
 801a2fc:	1007883a 	mov	r3,r2
 801a300:	e0bf8817 	ldw	r2,-480(fp)
 801a304:	1887883a 	add	r3,r3,r2
 801a308:	e0bf8917 	ldw	r2,-476(fp)
 801a30c:	1885883a 	add	r2,r3,r2
 801a310:	e0bf8a15 	stw	r2,-472(fp)
		tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 801a314:	e13f8317 	ldw	r4,-500(fp)
 801a318:	01440304 	movi	r5,4108
 801a31c:	802c2180 	call	802c218 <__mulsi3>
 801a320:	1007883a 	mov	r3,r2
 801a324:	e0bf8817 	ldw	r2,-480(fp)
 801a328:	1887c83a 	sub	r3,r3,r2
 801a32c:	e0bf8917 	ldw	r2,-476(fp)
 801a330:	1885883a 	add	r2,r3,r2
 801a334:	e0bf8b15 	stw	r2,-468(fp)

		tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 801a338:	e13f8617 	ldw	r4,-488(fp)
 801a33c:	01428804 	movi	r5,2592
 801a340:	802c2180 	call	802c218 <__mulsi3>
 801a344:	e0bf8815 	stw	r2,-480(fp)
		tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 801a348:	e13f8717 	ldw	r4,-484(fp)
 801a34c:	0143e544 	movi	r5,3989
 801a350:	802c2180 	call	802c218 <__mulsi3>
 801a354:	1007883a 	mov	r3,r2
 801a358:	e0bf8217 	ldw	r2,-504(fp)
 801a35c:	1885883a 	add	r2,r3,r2
 801a360:	e0bf8915 	stw	r2,-476(fp)

		tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 801a364:	e13f8317 	ldw	r4,-500(fp)
 801a368:	01487804 	movi	r5,8672
 801a36c:	802c2180 	call	802c218 <__mulsi3>
 801a370:	1007883a 	mov	r3,r2
 801a374:	e0bf8817 	ldw	r2,-480(fp)
 801a378:	1887c83a 	sub	r3,r3,r2
 801a37c:	e0bf8917 	ldw	r2,-476(fp)
 801a380:	1885883a 	add	r2,r3,r2
 801a384:	e0bf8c15 	stw	r2,-464(fp)
		tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 801a388:	e13f8317 	ldw	r4,-500(fp)
 801a38c:	0175fb84 	movi	r5,-10258
 801a390:	802c2180 	call	802c218 <__mulsi3>
 801a394:	1007883a 	mov	r3,r2
 801a398:	e0bf8817 	ldw	r2,-480(fp)
 801a39c:	1887883a 	add	r3,r3,r2
 801a3a0:	e0bf8917 	ldw	r2,-476(fp)
 801a3a4:	1885883a 	add	r2,r3,r2
 801a3a8:	e0bf8d15 	stw	r2,-460(fp)

		tmp12 = MULTIPLY(tmp10, FIX(0.435816023));                /* (c2-c10)/2 */
 801a3ac:	e13f8617 	ldw	r4,-488(fp)
 801a3b0:	01437c84 	movi	r5,3570
 801a3b4:	802c2180 	call	802c218 <__mulsi3>
 801a3b8:	e0bf8815 	stw	r2,-480(fp)
		tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 801a3bc:	e13f8717 	ldw	r4,-484(fp)
 801a3c0:	01477f84 	movi	r5,7678
 801a3c4:	802c2180 	call	802c218 <__mulsi3>
 801a3c8:	1007883a 	mov	r3,r2
 801a3cc:	e0bf8217 	ldw	r2,-504(fp)
 801a3d0:	1885c83a 	sub	r2,r3,r2
 801a3d4:	e0bf8915 	stw	r2,-476(fp)

		tmp23 = MULTIPLY(z2, - FIX(0.170464608)) - tmp12 - tmp13; /* c12 */
 801a3d8:	e13f8317 	ldw	r4,-500(fp)
 801a3dc:	017ea304 	movi	r5,-1396
 801a3e0:	802c2180 	call	802c218 <__mulsi3>
 801a3e4:	1007883a 	mov	r3,r2
 801a3e8:	e0bf8817 	ldw	r2,-480(fp)
 801a3ec:	1887c83a 	sub	r3,r3,r2
 801a3f0:	e0bf8917 	ldw	r2,-476(fp)
 801a3f4:	1885c83a 	sub	r2,r3,r2
 801a3f8:	e0bf8e15 	stw	r2,-456(fp)
		tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 801a3fc:	e13f8317 	ldw	r4,-500(fp)
 801a400:	017992c4 	movi	r5,-6581
 801a404:	802c2180 	call	802c218 <__mulsi3>
 801a408:	1007883a 	mov	r3,r2
 801a40c:	e0bf8817 	ldw	r2,-480(fp)
 801a410:	1887883a 	add	r3,r3,r2
 801a414:	e0bf8917 	ldw	r2,-476(fp)
 801a418:	1885c83a 	sub	r2,r3,r2
 801a41c:	e0bf8f15 	stw	r2,-452(fp)

		tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 801a420:	e0ff8717 	ldw	r3,-484(fp)
 801a424:	e0bf8317 	ldw	r2,-500(fp)
 801a428:	1885c83a 	sub	r2,r3,r2
 801a42c:	1009883a 	mov	r4,r2
 801a430:	014b5044 	movi	r5,11585
 801a434:	802c2180 	call	802c218 <__mulsi3>
 801a438:	1007883a 	mov	r3,r2
 801a43c:	e0bf8217 	ldw	r2,-504(fp)
 801a440:	1885883a 	add	r2,r3,r2
 801a444:	e0bf9015 	stw	r2,-448(fp)

		/* Odd part */

		z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801a448:	e0bf7d17 	ldw	r2,-524(fp)
 801a44c:	10800404 	addi	r2,r2,16
 801a450:	1080000b 	ldhu	r2,0(r2)
 801a454:	10ffffcc 	andi	r3,r2,65535
 801a458:	18e0001c 	xori	r3,r3,32768
 801a45c:	18e00004 	addi	r3,r3,-32768
 801a460:	e0bf7e17 	ldw	r2,-520(fp)
 801a464:	10800804 	addi	r2,r2,32
 801a468:	10800017 	ldw	r2,0(r2)
 801a46c:	1809883a 	mov	r4,r3
 801a470:	100b883a 	mov	r5,r2
 801a474:	802c2180 	call	802c218 <__mulsi3>
 801a478:	e0bf8215 	stw	r2,-504(fp)
		z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801a47c:	e0bf7d17 	ldw	r2,-524(fp)
 801a480:	10800c04 	addi	r2,r2,48
 801a484:	1080000b 	ldhu	r2,0(r2)
 801a488:	10ffffcc 	andi	r3,r2,65535
 801a48c:	18e0001c 	xori	r3,r3,32768
 801a490:	18e00004 	addi	r3,r3,-32768
 801a494:	e0bf7e17 	ldw	r2,-520(fp)
 801a498:	10801804 	addi	r2,r2,96
 801a49c:	10800017 	ldw	r2,0(r2)
 801a4a0:	1809883a 	mov	r4,r3
 801a4a4:	100b883a 	mov	r5,r2
 801a4a8:	802c2180 	call	802c218 <__mulsi3>
 801a4ac:	e0bf8315 	stw	r2,-500(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801a4b0:	e0bf7d17 	ldw	r2,-524(fp)
 801a4b4:	10801404 	addi	r2,r2,80
 801a4b8:	1080000b 	ldhu	r2,0(r2)
 801a4bc:	10ffffcc 	andi	r3,r2,65535
 801a4c0:	18e0001c 	xori	r3,r3,32768
 801a4c4:	18e00004 	addi	r3,r3,-32768
 801a4c8:	e0bf7e17 	ldw	r2,-520(fp)
 801a4cc:	10802804 	addi	r2,r2,160
 801a4d0:	10800017 	ldw	r2,0(r2)
 801a4d4:	1809883a 	mov	r4,r3
 801a4d8:	100b883a 	mov	r5,r2
 801a4dc:	802c2180 	call	802c218 <__mulsi3>
 801a4e0:	e0bf8415 	stw	r2,-496(fp)
		z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801a4e4:	e0bf7d17 	ldw	r2,-524(fp)
 801a4e8:	10801c04 	addi	r2,r2,112
 801a4ec:	1080000b 	ldhu	r2,0(r2)
 801a4f0:	10ffffcc 	andi	r3,r2,65535
 801a4f4:	18e0001c 	xori	r3,r3,32768
 801a4f8:	18e00004 	addi	r3,r3,-32768
 801a4fc:	e0bf7e17 	ldw	r2,-520(fp)
 801a500:	10803804 	addi	r2,r2,224
 801a504:	10800017 	ldw	r2,0(r2)
 801a508:	1809883a 	mov	r4,r3
 801a50c:	100b883a 	mov	r5,r2
 801a510:	802c2180 	call	802c218 <__mulsi3>
 801a514:	e0bf8515 	stw	r2,-492(fp)

		tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 801a518:	e0ff8217 	ldw	r3,-504(fp)
 801a51c:	e0bf8317 	ldw	r2,-500(fp)
 801a520:	1885883a 	add	r2,r3,r2
 801a524:	1009883a 	mov	r4,r2
 801a528:	014a9404 	movi	r5,10832
 801a52c:	802c2180 	call	802c218 <__mulsi3>
 801a530:	e0bf8715 	stw	r2,-484(fp)
		tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 801a534:	e0ff8217 	ldw	r3,-504(fp)
 801a538:	e0bf8417 	ldw	r2,-496(fp)
 801a53c:	1885883a 	add	r2,r3,r2
 801a540:	1009883a 	mov	r4,r2
 801a544:	01494f84 	movi	r5,9534
 801a548:	802c2180 	call	802c218 <__mulsi3>
 801a54c:	e0bf8815 	stw	r2,-480(fp)
		tmp15 = z1 + z4;
 801a550:	e0ff8217 	ldw	r3,-504(fp)
 801a554:	e0bf8517 	ldw	r2,-492(fp)
 801a558:	1885883a 	add	r2,r3,r2
 801a55c:	e0bf9115 	stw	r2,-444(fp)
		tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 801a560:	e13f9117 	ldw	r4,-444(fp)
 801a564:	01478084 	movi	r5,7682
 801a568:	802c2180 	call	802c218 <__mulsi3>
 801a56c:	e0bf8915 	stw	r2,-476(fp)
		tmp10 = tmp11 + tmp12 + tmp13 -
 801a570:	e0ff8717 	ldw	r3,-484(fp)
 801a574:	e0bf8817 	ldw	r2,-480(fp)
 801a578:	1887883a 	add	r3,r3,r2
 801a57c:	e0bf8917 	ldw	r2,-476(fp)
 801a580:	18a1883a 	add	r16,r3,r2
			MULTIPLY(z1, FIX(2.020082300));          /* c7+c5+c3-c1 */
 801a584:	e13f8217 	ldw	r4,-504(fp)
 801a588:	016fd6c4 	movi	r5,-16549
 801a58c:	802c2180 	call	802c218 <__mulsi3>

		tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
		tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
		tmp15 = z1 + z4;
		tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
		tmp10 = tmp11 + tmp12 + tmp13 -
 801a590:	8085883a 	add	r2,r16,r2
 801a594:	e0bf8615 	stw	r2,-488(fp)
			MULTIPLY(z1, FIX(2.020082300));          /* c7+c5+c3-c1 */
		tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 801a598:	e0ff8317 	ldw	r3,-500(fp)
 801a59c:	e0bf8417 	ldw	r2,-496(fp)
 801a5a0:	1885883a 	add	r2,r3,r2
 801a5a4:	1009883a 	mov	r4,r2
 801a5a8:	017d4ac4 	movi	r5,-2773
 801a5ac:	802c2180 	call	802c218 <__mulsi3>
 801a5b0:	e0bf9215 	stw	r2,-440(fp)
		tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 801a5b4:	e13f8317 	ldw	r4,-500(fp)
 801a5b8:	0146b2c4 	movi	r5,6859
 801a5bc:	802c2180 	call	802c218 <__mulsi3>
 801a5c0:	1007883a 	mov	r3,r2
 801a5c4:	e0bf9217 	ldw	r2,-440(fp)
 801a5c8:	1885883a 	add	r2,r3,r2
 801a5cc:	e0ff8717 	ldw	r3,-484(fp)
 801a5d0:	1885883a 	add	r2,r3,r2
 801a5d4:	e0bf8715 	stw	r2,-484(fp)
		tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 801a5d8:	e13f8417 	ldw	r4,-496(fp)
 801a5dc:	01736c44 	movi	r5,-12879
 801a5e0:	802c2180 	call	802c218 <__mulsi3>
 801a5e4:	1007883a 	mov	r3,r2
 801a5e8:	e0bf9217 	ldw	r2,-440(fp)
 801a5ec:	1885883a 	add	r2,r3,r2
 801a5f0:	e0ff8817 	ldw	r3,-480(fp)
 801a5f4:	1885883a 	add	r2,r3,r2
 801a5f8:	e0bf8815 	stw	r2,-480(fp)
		tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 801a5fc:	e0ff8317 	ldw	r3,-500(fp)
 801a600:	e0bf8517 	ldw	r2,-492(fp)
 801a604:	1885883a 	add	r2,r3,r2
 801a608:	1009883a 	mov	r4,r2
 801a60c:	0176b084 	movi	r5,-9534
 801a610:	802c2180 	call	802c218 <__mulsi3>
 801a614:	e0bf9215 	stw	r2,-440(fp)
		tmp11 += tmp14;
 801a618:	e0ff8717 	ldw	r3,-484(fp)
 801a61c:	e0bf9217 	ldw	r2,-440(fp)
 801a620:	1885883a 	add	r2,r3,r2
 801a624:	e0bf8715 	stw	r2,-484(fp)
		tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 801a628:	e13f8517 	ldw	r4,-492(fp)
 801a62c:	0151a504 	movi	r5,18068
 801a630:	802c2180 	call	802c218 <__mulsi3>
 801a634:	1007883a 	mov	r3,r2
 801a638:	e0bf9217 	ldw	r2,-440(fp)
 801a63c:	1885883a 	add	r2,r3,r2
 801a640:	e0ff8917 	ldw	r3,-476(fp)
 801a644:	1885883a 	add	r2,r3,r2
 801a648:	e0bf8915 	stw	r2,-476(fp)
		tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 801a64c:	e0ff8417 	ldw	r3,-496(fp)
 801a650:	e0bf8517 	ldw	r2,-492(fp)
 801a654:	1885883a 	add	r2,r3,r2
 801a658:	1009883a 	mov	r4,r2
 801a65c:	017abe04 	movi	r5,-5384
 801a660:	802c2180 	call	802c218 <__mulsi3>
 801a664:	e0bf9215 	stw	r2,-440(fp)
		tmp12 += tmp14;
 801a668:	e0ff8817 	ldw	r3,-480(fp)
 801a66c:	e0bf9217 	ldw	r2,-440(fp)
 801a670:	1885883a 	add	r2,r3,r2
 801a674:	e0bf8815 	stw	r2,-480(fp)
		tmp13 += tmp14;
 801a678:	e0ff8917 	ldw	r3,-476(fp)
 801a67c:	e0bf9217 	ldw	r2,-440(fp)
 801a680:	1885883a 	add	r2,r3,r2
 801a684:	e0bf8915 	stw	r2,-476(fp)
		tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
 801a688:	e13f9117 	ldw	r4,-444(fp)
 801a68c:	0142b544 	movi	r5,2773
 801a690:	802c2180 	call	802c218 <__mulsi3>
 801a694:	e0bf9115 	stw	r2,-444(fp)
		tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 801a698:	e13f8217 	ldw	r4,-504(fp)
 801a69c:	01428cc4 	movi	r5,2611
 801a6a0:	802c2180 	call	802c218 <__mulsi3>
 801a6a4:	1007883a 	mov	r3,r2
 801a6a8:	e0bf9117 	ldw	r2,-444(fp)
 801a6ac:	18a1883a 	add	r16,r3,r2
			MULTIPLY(z2, FIX(0.466105296));          /* c1-c7 */
 801a6b0:	e13f8317 	ldw	r4,-500(fp)
 801a6b4:	017c4584 	movi	r5,-3818
 801a6b8:	802c2180 	call	802c218 <__mulsi3>
		tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
		tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
		tmp12 += tmp14;
		tmp13 += tmp14;
		tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
		tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 801a6bc:	8085883a 	add	r2,r16,r2
 801a6c0:	e0bf9215 	stw	r2,-440(fp)
			MULTIPLY(z2, FIX(0.466105296));          /* c1-c7 */
		z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
 801a6c4:	e0ff8417 	ldw	r3,-496(fp)
 801a6c8:	e0bf8317 	ldw	r2,-500(fp)
 801a6cc:	1885c83a 	sub	r2,r3,r2
 801a6d0:	1009883a 	mov	r4,r2
 801a6d4:	01478084 	movi	r5,7682
 801a6d8:	802c2180 	call	802c218 <__mulsi3>
 801a6dc:	e0bf8215 	stw	r2,-504(fp)
		tmp14 += z1;
 801a6e0:	e0ff9217 	ldw	r3,-440(fp)
 801a6e4:	e0bf8217 	ldw	r2,-504(fp)
 801a6e8:	1885883a 	add	r2,r3,r2
 801a6ec:	e0bf9215 	stw	r2,-440(fp)
		tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 801a6f0:	e13f8417 	ldw	r4,-496(fp)
 801a6f4:	01431384 	movi	r5,3150
 801a6f8:	802c2180 	call	802c218 <__mulsi3>
 801a6fc:	1007883a 	mov	r3,r2
 801a700:	e0bf8217 	ldw	r2,-504(fp)
 801a704:	18a1883a 	add	r16,r3,r2
			MULTIPLY(z4, FIX(1.742345811));         /* c1+c11 */
 801a708:	e13f8517 	ldw	r4,-492(fp)
 801a70c:	01720fc4 	movi	r5,-14273
 801a710:	802c2180 	call	802c218 <__mulsi3>
		tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
		tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
			MULTIPLY(z2, FIX(0.466105296));          /* c1-c7 */
		z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
		tmp14 += z1;
		tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 801a714:	8085883a 	add	r2,r16,r2
 801a718:	e0ff9117 	ldw	r3,-444(fp)
 801a71c:	1885883a 	add	r2,r3,r2
 801a720:	e0bf9115 	stw	r2,-444(fp)
			MULTIPLY(z4, FIX(1.742345811));         /* c1+c11 */

		/* Final output stage */

		wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801a724:	e0ff8a17 	ldw	r3,-472(fp)
 801a728:	e0bf8617 	ldw	r2,-488(fp)
 801a72c:	1885883a 	add	r2,r3,r2
 801a730:	1007d2fa 	srai	r3,r2,11
 801a734:	e0bf7f17 	ldw	r2,-516(fp)
 801a738:	10c00015 	stw	r3,0(r2)
		wsptr[8*12] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801a73c:	e0bf7f17 	ldw	r2,-516(fp)
 801a740:	10806004 	addi	r2,r2,384
 801a744:	e13f8a17 	ldw	r4,-472(fp)
 801a748:	e0ff8617 	ldw	r3,-488(fp)
 801a74c:	20c7c83a 	sub	r3,r4,r3
 801a750:	1807d2fa 	srai	r3,r3,11
 801a754:	10c00015 	stw	r3,0(r2)
		wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801a758:	e0bf7f17 	ldw	r2,-516(fp)
 801a75c:	10800804 	addi	r2,r2,32
 801a760:	e13f8c17 	ldw	r4,-464(fp)
 801a764:	e0ff8717 	ldw	r3,-484(fp)
 801a768:	20c7883a 	add	r3,r4,r3
 801a76c:	1807d2fa 	srai	r3,r3,11
 801a770:	10c00015 	stw	r3,0(r2)
		wsptr[8*11] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801a774:	e0bf7f17 	ldw	r2,-516(fp)
 801a778:	10805804 	addi	r2,r2,352
 801a77c:	e13f8c17 	ldw	r4,-464(fp)
 801a780:	e0ff8717 	ldw	r3,-484(fp)
 801a784:	20c7c83a 	sub	r3,r4,r3
 801a788:	1807d2fa 	srai	r3,r3,11
 801a78c:	10c00015 	stw	r3,0(r2)
		wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801a790:	e0bf7f17 	ldw	r2,-516(fp)
 801a794:	10801004 	addi	r2,r2,64
 801a798:	e13f8b17 	ldw	r4,-468(fp)
 801a79c:	e0ff8817 	ldw	r3,-480(fp)
 801a7a0:	20c7883a 	add	r3,r4,r3
 801a7a4:	1807d2fa 	srai	r3,r3,11
 801a7a8:	10c00015 	stw	r3,0(r2)
		wsptr[8*10] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801a7ac:	e0bf7f17 	ldw	r2,-516(fp)
 801a7b0:	10805004 	addi	r2,r2,320
 801a7b4:	e13f8b17 	ldw	r4,-468(fp)
 801a7b8:	e0ff8817 	ldw	r3,-480(fp)
 801a7bc:	20c7c83a 	sub	r3,r4,r3
 801a7c0:	1807d2fa 	srai	r3,r3,11
 801a7c4:	10c00015 	stw	r3,0(r2)
		wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 801a7c8:	e0bf7f17 	ldw	r2,-516(fp)
 801a7cc:	10801804 	addi	r2,r2,96
 801a7d0:	e13f8e17 	ldw	r4,-456(fp)
 801a7d4:	e0ff8917 	ldw	r3,-476(fp)
 801a7d8:	20c7883a 	add	r3,r4,r3
 801a7dc:	1807d2fa 	srai	r3,r3,11
 801a7e0:	10c00015 	stw	r3,0(r2)
		wsptr[8*9]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 801a7e4:	e0bf7f17 	ldw	r2,-516(fp)
 801a7e8:	10804804 	addi	r2,r2,288
 801a7ec:	e13f8e17 	ldw	r4,-456(fp)
 801a7f0:	e0ff8917 	ldw	r3,-476(fp)
 801a7f4:	20c7c83a 	sub	r3,r4,r3
 801a7f8:	1807d2fa 	srai	r3,r3,11
 801a7fc:	10c00015 	stw	r3,0(r2)
		wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 801a800:	e0bf7f17 	ldw	r2,-516(fp)
 801a804:	10802004 	addi	r2,r2,128
 801a808:	e13f8f17 	ldw	r4,-452(fp)
 801a80c:	e0ff9217 	ldw	r3,-440(fp)
 801a810:	20c7883a 	add	r3,r4,r3
 801a814:	1807d2fa 	srai	r3,r3,11
 801a818:	10c00015 	stw	r3,0(r2)
		wsptr[8*8]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 801a81c:	e0bf7f17 	ldw	r2,-516(fp)
 801a820:	10804004 	addi	r2,r2,256
 801a824:	e13f8f17 	ldw	r4,-452(fp)
 801a828:	e0ff9217 	ldw	r3,-440(fp)
 801a82c:	20c7c83a 	sub	r3,r4,r3
 801a830:	1807d2fa 	srai	r3,r3,11
 801a834:	10c00015 	stw	r3,0(r2)
		wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 801a838:	e0bf7f17 	ldw	r2,-516(fp)
 801a83c:	10802804 	addi	r2,r2,160
 801a840:	e13f8d17 	ldw	r4,-460(fp)
 801a844:	e0ff9117 	ldw	r3,-444(fp)
 801a848:	20c7883a 	add	r3,r4,r3
 801a84c:	1807d2fa 	srai	r3,r3,11
 801a850:	10c00015 	stw	r3,0(r2)
		wsptr[8*7]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 801a854:	e0bf7f17 	ldw	r2,-516(fp)
 801a858:	10803804 	addi	r2,r2,224
 801a85c:	e13f8d17 	ldw	r4,-460(fp)
 801a860:	e0ff9117 	ldw	r3,-444(fp)
 801a864:	20c7c83a 	sub	r3,r4,r3
 801a868:	1807d2fa 	srai	r3,r3,11
 801a86c:	10c00015 	stw	r3,0(r2)
		wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26, CONST_BITS-PASS1_BITS);
 801a870:	e0bf7f17 	ldw	r2,-516(fp)
 801a874:	10803004 	addi	r2,r2,192
 801a878:	e0ff9017 	ldw	r3,-448(fp)
 801a87c:	1807d2fa 	srai	r3,r3,11
 801a880:	10c00015 	stw	r3,0(r2)
		/* Pass 1: process columns from input, store into work array. */

		inptr = coef_block;
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
	wsptr = workspace;
	for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801a884:	e0bf8017 	ldw	r2,-512(fp)
 801a888:	10800044 	addi	r2,r2,1
 801a88c:	e0bf8015 	stw	r2,-512(fp)
 801a890:	e0bf7d17 	ldw	r2,-524(fp)
 801a894:	10800084 	addi	r2,r2,2
 801a898:	e0bf7d15 	stw	r2,-524(fp)
 801a89c:	e0bf7e17 	ldw	r2,-520(fp)
 801a8a0:	10800104 	addi	r2,r2,4
 801a8a4:	e0bf7e15 	stw	r2,-520(fp)
 801a8a8:	e0bf7f17 	ldw	r2,-516(fp)
 801a8ac:	10800104 	addi	r2,r2,4
 801a8b0:	e0bf7f15 	stw	r2,-516(fp)
 801a8b4:	e0bf8017 	ldw	r2,-512(fp)
 801a8b8:	10800210 	cmplti	r2,r2,8
 801a8bc:	103e411e 	bne	r2,zero,801a1c4 <jpeg_idct_13x13+0x58>
		wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26, CONST_BITS-PASS1_BITS);
	}

	/* Pass 2: process 13 rows from work array, store into output array. */

	wsptr = workspace;
 801a8c0:	e0bf9404 	addi	r2,fp,-432
 801a8c4:	e0bf7f15 	stw	r2,-516(fp)
	for (ctr = 0; ctr < 13; ctr++) {
 801a8c8:	e03f8015 	stw	zero,-512(fp)
 801a8cc:	0001aa06 	br	801af78 <jpeg_idct_13x13+0xe0c>
		outptr = output_buf[ctr] + output_col;
 801a8d0:	e0bf8017 	ldw	r2,-512(fp)
 801a8d4:	1085883a 	add	r2,r2,r2
 801a8d8:	1085883a 	add	r2,r2,r2
 801a8dc:	e0ffff17 	ldw	r3,-4(fp)
 801a8e0:	1885883a 	add	r2,r3,r2
 801a8e4:	10c00017 	ldw	r3,0(r2)
 801a8e8:	e0800317 	ldw	r2,12(fp)
 801a8ec:	1885883a 	add	r2,r3,r2
 801a8f0:	e0bf9315 	stw	r2,-436(fp)

		/* Even part */

		/* Add fudge factor here for final descale. */
		z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801a8f4:	e0bf7f17 	ldw	r2,-516(fp)
 801a8f8:	10800017 	ldw	r2,0(r2)
 801a8fc:	10800404 	addi	r2,r2,16
 801a900:	e0bf8215 	stw	r2,-504(fp)
		z1 <<= CONST_BITS;
 801a904:	e0bf8217 	ldw	r2,-504(fp)
 801a908:	1004937a 	slli	r2,r2,13
 801a90c:	e0bf8215 	stw	r2,-504(fp)

		z2 = (INT32) wsptr[2];
 801a910:	e0bf7f17 	ldw	r2,-516(fp)
 801a914:	10800204 	addi	r2,r2,8
 801a918:	10800017 	ldw	r2,0(r2)
 801a91c:	e0bf8315 	stw	r2,-500(fp)
		z3 = (INT32) wsptr[4];
 801a920:	e0bf7f17 	ldw	r2,-516(fp)
 801a924:	10800404 	addi	r2,r2,16
 801a928:	10800017 	ldw	r2,0(r2)
 801a92c:	e0bf8415 	stw	r2,-496(fp)
		z4 = (INT32) wsptr[6];
 801a930:	e0bf7f17 	ldw	r2,-516(fp)
 801a934:	10800604 	addi	r2,r2,24
 801a938:	10800017 	ldw	r2,0(r2)
 801a93c:	e0bf8515 	stw	r2,-492(fp)

		tmp10 = z3 + z4;
 801a940:	e0ff8417 	ldw	r3,-496(fp)
 801a944:	e0bf8517 	ldw	r2,-492(fp)
 801a948:	1885883a 	add	r2,r3,r2
 801a94c:	e0bf8615 	stw	r2,-488(fp)
		tmp11 = z3 - z4;
 801a950:	e0ff8417 	ldw	r3,-496(fp)
 801a954:	e0bf8517 	ldw	r2,-492(fp)
 801a958:	1885c83a 	sub	r2,r3,r2
 801a95c:	e0bf8715 	stw	r2,-484(fp)

		tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 801a960:	e13f8617 	ldw	r4,-488(fp)
 801a964:	01493e44 	movi	r5,9465
 801a968:	802c2180 	call	802c218 <__mulsi3>
 801a96c:	e0bf8815 	stw	r2,-480(fp)
		tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 801a970:	e13f8717 	ldw	r4,-484(fp)
 801a974:	0140c644 	movi	r5,793
 801a978:	802c2180 	call	802c218 <__mulsi3>
 801a97c:	1007883a 	mov	r3,r2
 801a980:	e0bf8217 	ldw	r2,-504(fp)
 801a984:	1885883a 	add	r2,r3,r2
 801a988:	e0bf8915 	stw	r2,-476(fp)

		tmp20 = MULTIPLY(z2, FIX(1.373119086)) + tmp12 + tmp13;   /* c2 */
 801a98c:	e13f8317 	ldw	r4,-500(fp)
 801a990:	014afc44 	movi	r5,11249
 801a994:	802c2180 	call	802c218 <__mulsi3>
 801a998:	1007883a 	mov	r3,r2
 801a99c:	e0bf8817 	ldw	r2,-480(fp)
 801a9a0:	1887883a 	add	r3,r3,r2
 801a9a4:	e0bf8917 	ldw	r2,-476(fp)
 801a9a8:	1885883a 	add	r2,r3,r2
 801a9ac:	e0bf8a15 	stw	r2,-472(fp)
		tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 801a9b0:	e13f8317 	ldw	r4,-500(fp)
 801a9b4:	01440304 	movi	r5,4108
 801a9b8:	802c2180 	call	802c218 <__mulsi3>
 801a9bc:	1007883a 	mov	r3,r2
 801a9c0:	e0bf8817 	ldw	r2,-480(fp)
 801a9c4:	1887c83a 	sub	r3,r3,r2
 801a9c8:	e0bf8917 	ldw	r2,-476(fp)
 801a9cc:	1885883a 	add	r2,r3,r2
 801a9d0:	e0bf8b15 	stw	r2,-468(fp)

		tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 801a9d4:	e13f8617 	ldw	r4,-488(fp)
 801a9d8:	01428804 	movi	r5,2592
 801a9dc:	802c2180 	call	802c218 <__mulsi3>
 801a9e0:	e0bf8815 	stw	r2,-480(fp)
		tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 801a9e4:	e13f8717 	ldw	r4,-484(fp)
 801a9e8:	0143e544 	movi	r5,3989
 801a9ec:	802c2180 	call	802c218 <__mulsi3>
 801a9f0:	1007883a 	mov	r3,r2
 801a9f4:	e0bf8217 	ldw	r2,-504(fp)
 801a9f8:	1885883a 	add	r2,r3,r2
 801a9fc:	e0bf8915 	stw	r2,-476(fp)

		tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 801aa00:	e13f8317 	ldw	r4,-500(fp)
 801aa04:	01487804 	movi	r5,8672
 801aa08:	802c2180 	call	802c218 <__mulsi3>
 801aa0c:	1007883a 	mov	r3,r2
 801aa10:	e0bf8817 	ldw	r2,-480(fp)
 801aa14:	1887c83a 	sub	r3,r3,r2
 801aa18:	e0bf8917 	ldw	r2,-476(fp)
 801aa1c:	1885883a 	add	r2,r3,r2
 801aa20:	e0bf8c15 	stw	r2,-464(fp)
		tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 801aa24:	e13f8317 	ldw	r4,-500(fp)
 801aa28:	0175fb84 	movi	r5,-10258
 801aa2c:	802c2180 	call	802c218 <__mulsi3>
 801aa30:	1007883a 	mov	r3,r2
 801aa34:	e0bf8817 	ldw	r2,-480(fp)
 801aa38:	1887883a 	add	r3,r3,r2
 801aa3c:	e0bf8917 	ldw	r2,-476(fp)
 801aa40:	1885883a 	add	r2,r3,r2
 801aa44:	e0bf8d15 	stw	r2,-460(fp)

		tmp12 = MULTIPLY(tmp10, FIX(0.435816023));                /* (c2-c10)/2 */
 801aa48:	e13f8617 	ldw	r4,-488(fp)
 801aa4c:	01437c84 	movi	r5,3570
 801aa50:	802c2180 	call	802c218 <__mulsi3>
 801aa54:	e0bf8815 	stw	r2,-480(fp)
		tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 801aa58:	e13f8717 	ldw	r4,-484(fp)
 801aa5c:	01477f84 	movi	r5,7678
 801aa60:	802c2180 	call	802c218 <__mulsi3>
 801aa64:	1007883a 	mov	r3,r2
 801aa68:	e0bf8217 	ldw	r2,-504(fp)
 801aa6c:	1885c83a 	sub	r2,r3,r2
 801aa70:	e0bf8915 	stw	r2,-476(fp)

		tmp23 = MULTIPLY(z2, - FIX(0.170464608)) - tmp12 - tmp13; /* c12 */
 801aa74:	e13f8317 	ldw	r4,-500(fp)
 801aa78:	017ea304 	movi	r5,-1396
 801aa7c:	802c2180 	call	802c218 <__mulsi3>
 801aa80:	1007883a 	mov	r3,r2
 801aa84:	e0bf8817 	ldw	r2,-480(fp)
 801aa88:	1887c83a 	sub	r3,r3,r2
 801aa8c:	e0bf8917 	ldw	r2,-476(fp)
 801aa90:	1885c83a 	sub	r2,r3,r2
 801aa94:	e0bf8e15 	stw	r2,-456(fp)
		tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 801aa98:	e13f8317 	ldw	r4,-500(fp)
 801aa9c:	017992c4 	movi	r5,-6581
 801aaa0:	802c2180 	call	802c218 <__mulsi3>
 801aaa4:	1007883a 	mov	r3,r2
 801aaa8:	e0bf8817 	ldw	r2,-480(fp)
 801aaac:	1887883a 	add	r3,r3,r2
 801aab0:	e0bf8917 	ldw	r2,-476(fp)
 801aab4:	1885c83a 	sub	r2,r3,r2
 801aab8:	e0bf8f15 	stw	r2,-452(fp)

		tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 801aabc:	e0ff8717 	ldw	r3,-484(fp)
 801aac0:	e0bf8317 	ldw	r2,-500(fp)
 801aac4:	1885c83a 	sub	r2,r3,r2
 801aac8:	1009883a 	mov	r4,r2
 801aacc:	014b5044 	movi	r5,11585
 801aad0:	802c2180 	call	802c218 <__mulsi3>
 801aad4:	1007883a 	mov	r3,r2
 801aad8:	e0bf8217 	ldw	r2,-504(fp)
 801aadc:	1885883a 	add	r2,r3,r2
 801aae0:	e0bf9015 	stw	r2,-448(fp)

		/* Odd part */

		z1 = (INT32) wsptr[1];
 801aae4:	e0bf7f17 	ldw	r2,-516(fp)
 801aae8:	10800104 	addi	r2,r2,4
 801aaec:	10800017 	ldw	r2,0(r2)
 801aaf0:	e0bf8215 	stw	r2,-504(fp)
		z2 = (INT32) wsptr[3];
 801aaf4:	e0bf7f17 	ldw	r2,-516(fp)
 801aaf8:	10800304 	addi	r2,r2,12
 801aafc:	10800017 	ldw	r2,0(r2)
 801ab00:	e0bf8315 	stw	r2,-500(fp)
		z3 = (INT32) wsptr[5];
 801ab04:	e0bf7f17 	ldw	r2,-516(fp)
 801ab08:	10800504 	addi	r2,r2,20
 801ab0c:	10800017 	ldw	r2,0(r2)
 801ab10:	e0bf8415 	stw	r2,-496(fp)
		z4 = (INT32) wsptr[7];
 801ab14:	e0bf7f17 	ldw	r2,-516(fp)
 801ab18:	10800704 	addi	r2,r2,28
 801ab1c:	10800017 	ldw	r2,0(r2)
 801ab20:	e0bf8515 	stw	r2,-492(fp)

		tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 801ab24:	e0ff8217 	ldw	r3,-504(fp)
 801ab28:	e0bf8317 	ldw	r2,-500(fp)
 801ab2c:	1885883a 	add	r2,r3,r2
 801ab30:	1009883a 	mov	r4,r2
 801ab34:	014a9404 	movi	r5,10832
 801ab38:	802c2180 	call	802c218 <__mulsi3>
 801ab3c:	e0bf8715 	stw	r2,-484(fp)
		tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 801ab40:	e0ff8217 	ldw	r3,-504(fp)
 801ab44:	e0bf8417 	ldw	r2,-496(fp)
 801ab48:	1885883a 	add	r2,r3,r2
 801ab4c:	1009883a 	mov	r4,r2
 801ab50:	01494f84 	movi	r5,9534
 801ab54:	802c2180 	call	802c218 <__mulsi3>
 801ab58:	e0bf8815 	stw	r2,-480(fp)
		tmp15 = z1 + z4;
 801ab5c:	e0ff8217 	ldw	r3,-504(fp)
 801ab60:	e0bf8517 	ldw	r2,-492(fp)
 801ab64:	1885883a 	add	r2,r3,r2
 801ab68:	e0bf9115 	stw	r2,-444(fp)
		tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 801ab6c:	e13f9117 	ldw	r4,-444(fp)
 801ab70:	01478084 	movi	r5,7682
 801ab74:	802c2180 	call	802c218 <__mulsi3>
 801ab78:	e0bf8915 	stw	r2,-476(fp)
		tmp10 = tmp11 + tmp12 + tmp13 -
 801ab7c:	e0ff8717 	ldw	r3,-484(fp)
 801ab80:	e0bf8817 	ldw	r2,-480(fp)
 801ab84:	1887883a 	add	r3,r3,r2
 801ab88:	e0bf8917 	ldw	r2,-476(fp)
 801ab8c:	18a1883a 	add	r16,r3,r2
			MULTIPLY(z1, FIX(2.020082300));          /* c7+c5+c3-c1 */
 801ab90:	e13f8217 	ldw	r4,-504(fp)
 801ab94:	016fd6c4 	movi	r5,-16549
 801ab98:	802c2180 	call	802c218 <__mulsi3>

		tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
		tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
		tmp15 = z1 + z4;
		tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
		tmp10 = tmp11 + tmp12 + tmp13 -
 801ab9c:	8085883a 	add	r2,r16,r2
 801aba0:	e0bf8615 	stw	r2,-488(fp)
			MULTIPLY(z1, FIX(2.020082300));          /* c7+c5+c3-c1 */
		tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 801aba4:	e0ff8317 	ldw	r3,-500(fp)
 801aba8:	e0bf8417 	ldw	r2,-496(fp)
 801abac:	1885883a 	add	r2,r3,r2
 801abb0:	1009883a 	mov	r4,r2
 801abb4:	017d4ac4 	movi	r5,-2773
 801abb8:	802c2180 	call	802c218 <__mulsi3>
 801abbc:	e0bf9215 	stw	r2,-440(fp)
		tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 801abc0:	e13f8317 	ldw	r4,-500(fp)
 801abc4:	0146b2c4 	movi	r5,6859
 801abc8:	802c2180 	call	802c218 <__mulsi3>
 801abcc:	1007883a 	mov	r3,r2
 801abd0:	e0bf9217 	ldw	r2,-440(fp)
 801abd4:	1885883a 	add	r2,r3,r2
 801abd8:	e0ff8717 	ldw	r3,-484(fp)
 801abdc:	1885883a 	add	r2,r3,r2
 801abe0:	e0bf8715 	stw	r2,-484(fp)
		tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 801abe4:	e13f8417 	ldw	r4,-496(fp)
 801abe8:	01736c44 	movi	r5,-12879
 801abec:	802c2180 	call	802c218 <__mulsi3>
 801abf0:	1007883a 	mov	r3,r2
 801abf4:	e0bf9217 	ldw	r2,-440(fp)
 801abf8:	1885883a 	add	r2,r3,r2
 801abfc:	e0ff8817 	ldw	r3,-480(fp)
 801ac00:	1885883a 	add	r2,r3,r2
 801ac04:	e0bf8815 	stw	r2,-480(fp)
		tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 801ac08:	e0ff8317 	ldw	r3,-500(fp)
 801ac0c:	e0bf8517 	ldw	r2,-492(fp)
 801ac10:	1885883a 	add	r2,r3,r2
 801ac14:	1009883a 	mov	r4,r2
 801ac18:	0176b084 	movi	r5,-9534
 801ac1c:	802c2180 	call	802c218 <__mulsi3>
 801ac20:	e0bf9215 	stw	r2,-440(fp)
		tmp11 += tmp14;
 801ac24:	e0ff8717 	ldw	r3,-484(fp)
 801ac28:	e0bf9217 	ldw	r2,-440(fp)
 801ac2c:	1885883a 	add	r2,r3,r2
 801ac30:	e0bf8715 	stw	r2,-484(fp)
		tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 801ac34:	e13f8517 	ldw	r4,-492(fp)
 801ac38:	0151a504 	movi	r5,18068
 801ac3c:	802c2180 	call	802c218 <__mulsi3>
 801ac40:	1007883a 	mov	r3,r2
 801ac44:	e0bf9217 	ldw	r2,-440(fp)
 801ac48:	1885883a 	add	r2,r3,r2
 801ac4c:	e0ff8917 	ldw	r3,-476(fp)
 801ac50:	1885883a 	add	r2,r3,r2
 801ac54:	e0bf8915 	stw	r2,-476(fp)
		tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 801ac58:	e0ff8417 	ldw	r3,-496(fp)
 801ac5c:	e0bf8517 	ldw	r2,-492(fp)
 801ac60:	1885883a 	add	r2,r3,r2
 801ac64:	1009883a 	mov	r4,r2
 801ac68:	017abe04 	movi	r5,-5384
 801ac6c:	802c2180 	call	802c218 <__mulsi3>
 801ac70:	e0bf9215 	stw	r2,-440(fp)
		tmp12 += tmp14;
 801ac74:	e0ff8817 	ldw	r3,-480(fp)
 801ac78:	e0bf9217 	ldw	r2,-440(fp)
 801ac7c:	1885883a 	add	r2,r3,r2
 801ac80:	e0bf8815 	stw	r2,-480(fp)
		tmp13 += tmp14;
 801ac84:	e0ff8917 	ldw	r3,-476(fp)
 801ac88:	e0bf9217 	ldw	r2,-440(fp)
 801ac8c:	1885883a 	add	r2,r3,r2
 801ac90:	e0bf8915 	stw	r2,-476(fp)
		tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
 801ac94:	e13f9117 	ldw	r4,-444(fp)
 801ac98:	0142b544 	movi	r5,2773
 801ac9c:	802c2180 	call	802c218 <__mulsi3>
 801aca0:	e0bf9115 	stw	r2,-444(fp)
		tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 801aca4:	e13f8217 	ldw	r4,-504(fp)
 801aca8:	01428cc4 	movi	r5,2611
 801acac:	802c2180 	call	802c218 <__mulsi3>
 801acb0:	1007883a 	mov	r3,r2
 801acb4:	e0bf9117 	ldw	r2,-444(fp)
 801acb8:	18a1883a 	add	r16,r3,r2
			MULTIPLY(z2, FIX(0.466105296));          /* c1-c7 */
 801acbc:	e13f8317 	ldw	r4,-500(fp)
 801acc0:	017c4584 	movi	r5,-3818
 801acc4:	802c2180 	call	802c218 <__mulsi3>
		tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
		tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
		tmp12 += tmp14;
		tmp13 += tmp14;
		tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
		tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 801acc8:	8085883a 	add	r2,r16,r2
 801accc:	e0bf9215 	stw	r2,-440(fp)
			MULTIPLY(z2, FIX(0.466105296));          /* c1-c7 */
		z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
 801acd0:	e0ff8417 	ldw	r3,-496(fp)
 801acd4:	e0bf8317 	ldw	r2,-500(fp)
 801acd8:	1885c83a 	sub	r2,r3,r2
 801acdc:	1009883a 	mov	r4,r2
 801ace0:	01478084 	movi	r5,7682
 801ace4:	802c2180 	call	802c218 <__mulsi3>
 801ace8:	e0bf8215 	stw	r2,-504(fp)
		tmp14 += z1;
 801acec:	e0ff9217 	ldw	r3,-440(fp)
 801acf0:	e0bf8217 	ldw	r2,-504(fp)
 801acf4:	1885883a 	add	r2,r3,r2
 801acf8:	e0bf9215 	stw	r2,-440(fp)
		tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 801acfc:	e13f8417 	ldw	r4,-496(fp)
 801ad00:	01431384 	movi	r5,3150
 801ad04:	802c2180 	call	802c218 <__mulsi3>
 801ad08:	1007883a 	mov	r3,r2
 801ad0c:	e0bf8217 	ldw	r2,-504(fp)
 801ad10:	18a1883a 	add	r16,r3,r2
			MULTIPLY(z4, FIX(1.742345811));         /* c1+c11 */
 801ad14:	e13f8517 	ldw	r4,-492(fp)
 801ad18:	01720fc4 	movi	r5,-14273
 801ad1c:	802c2180 	call	802c218 <__mulsi3>
		tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
		tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
			MULTIPLY(z2, FIX(0.466105296));          /* c1-c7 */
		z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
		tmp14 += z1;
		tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 801ad20:	8085883a 	add	r2,r16,r2
 801ad24:	e0ff9117 	ldw	r3,-444(fp)
 801ad28:	1885883a 	add	r2,r3,r2
 801ad2c:	e0bf9115 	stw	r2,-444(fp)
			MULTIPLY(z4, FIX(1.742345811));         /* c1+c11 */

		/* Final output stage */

		outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801ad30:	e0ff8a17 	ldw	r3,-472(fp)
 801ad34:	e0bf8617 	ldw	r2,-488(fp)
 801ad38:	1885883a 	add	r2,r3,r2
 801ad3c:	1005d4ba 	srai	r2,r2,18
 801ad40:	1080ffcc 	andi	r2,r2,1023
 801ad44:	e0ff8117 	ldw	r3,-508(fp)
 801ad48:	1885883a 	add	r2,r3,r2
 801ad4c:	10c00003 	ldbu	r3,0(r2)
 801ad50:	e0bf9317 	ldw	r2,-436(fp)
 801ad54:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801ad58:	e0bf9317 	ldw	r2,-436(fp)
 801ad5c:	10800304 	addi	r2,r2,12
 801ad60:	e13f8a17 	ldw	r4,-472(fp)
 801ad64:	e0ff8617 	ldw	r3,-488(fp)
 801ad68:	20c7c83a 	sub	r3,r4,r3
 801ad6c:	1807d4ba 	srai	r3,r3,18
 801ad70:	18c0ffcc 	andi	r3,r3,1023
 801ad74:	e13f8117 	ldw	r4,-508(fp)
 801ad78:	20c7883a 	add	r3,r4,r3
 801ad7c:	18c00003 	ldbu	r3,0(r3)
 801ad80:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801ad84:	e0bf9317 	ldw	r2,-436(fp)
 801ad88:	10800044 	addi	r2,r2,1
 801ad8c:	e13f8c17 	ldw	r4,-464(fp)
 801ad90:	e0ff8717 	ldw	r3,-484(fp)
 801ad94:	20c7883a 	add	r3,r4,r3
 801ad98:	1807d4ba 	srai	r3,r3,18
 801ad9c:	18c0ffcc 	andi	r3,r3,1023
 801ada0:	e13f8117 	ldw	r4,-508(fp)
 801ada4:	20c7883a 	add	r3,r4,r3
 801ada8:	18c00003 	ldbu	r3,0(r3)
 801adac:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801adb0:	e0bf9317 	ldw	r2,-436(fp)
 801adb4:	108002c4 	addi	r2,r2,11
 801adb8:	e13f8c17 	ldw	r4,-464(fp)
 801adbc:	e0ff8717 	ldw	r3,-484(fp)
 801adc0:	20c7c83a 	sub	r3,r4,r3
 801adc4:	1807d4ba 	srai	r3,r3,18
 801adc8:	18c0ffcc 	andi	r3,r3,1023
 801adcc:	e13f8117 	ldw	r4,-508(fp)
 801add0:	20c7883a 	add	r3,r4,r3
 801add4:	18c00003 	ldbu	r3,0(r3)
 801add8:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801addc:	e0bf9317 	ldw	r2,-436(fp)
 801ade0:	10800084 	addi	r2,r2,2
 801ade4:	e13f8b17 	ldw	r4,-468(fp)
 801ade8:	e0ff8817 	ldw	r3,-480(fp)
 801adec:	20c7883a 	add	r3,r4,r3
 801adf0:	1807d4ba 	srai	r3,r3,18
 801adf4:	18c0ffcc 	andi	r3,r3,1023
 801adf8:	e13f8117 	ldw	r4,-508(fp)
 801adfc:	20c7883a 	add	r3,r4,r3
 801ae00:	18c00003 	ldbu	r3,0(r3)
 801ae04:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801ae08:	e0bf9317 	ldw	r2,-436(fp)
 801ae0c:	10800284 	addi	r2,r2,10
 801ae10:	e13f8b17 	ldw	r4,-468(fp)
 801ae14:	e0ff8817 	ldw	r3,-480(fp)
 801ae18:	20c7c83a 	sub	r3,r4,r3
 801ae1c:	1807d4ba 	srai	r3,r3,18
 801ae20:	18c0ffcc 	andi	r3,r3,1023
 801ae24:	e13f8117 	ldw	r4,-508(fp)
 801ae28:	20c7883a 	add	r3,r4,r3
 801ae2c:	18c00003 	ldbu	r3,0(r3)
 801ae30:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801ae34:	e0bf9317 	ldw	r2,-436(fp)
 801ae38:	108000c4 	addi	r2,r2,3
 801ae3c:	e13f8e17 	ldw	r4,-456(fp)
 801ae40:	e0ff8917 	ldw	r3,-476(fp)
 801ae44:	20c7883a 	add	r3,r4,r3
 801ae48:	1807d4ba 	srai	r3,r3,18
 801ae4c:	18c0ffcc 	andi	r3,r3,1023
 801ae50:	e13f8117 	ldw	r4,-508(fp)
 801ae54:	20c7883a 	add	r3,r4,r3
 801ae58:	18c00003 	ldbu	r3,0(r3)
 801ae5c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801ae60:	e0bf9317 	ldw	r2,-436(fp)
 801ae64:	10800244 	addi	r2,r2,9
 801ae68:	e13f8e17 	ldw	r4,-456(fp)
 801ae6c:	e0ff8917 	ldw	r3,-476(fp)
 801ae70:	20c7c83a 	sub	r3,r4,r3
 801ae74:	1807d4ba 	srai	r3,r3,18
 801ae78:	18c0ffcc 	andi	r3,r3,1023
 801ae7c:	e13f8117 	ldw	r4,-508(fp)
 801ae80:	20c7883a 	add	r3,r4,r3
 801ae84:	18c00003 	ldbu	r3,0(r3)
 801ae88:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801ae8c:	e0bf9317 	ldw	r2,-436(fp)
 801ae90:	10800104 	addi	r2,r2,4
 801ae94:	e13f8f17 	ldw	r4,-452(fp)
 801ae98:	e0ff9217 	ldw	r3,-440(fp)
 801ae9c:	20c7883a 	add	r3,r4,r3
 801aea0:	1807d4ba 	srai	r3,r3,18
 801aea4:	18c0ffcc 	andi	r3,r3,1023
 801aea8:	e13f8117 	ldw	r4,-508(fp)
 801aeac:	20c7883a 	add	r3,r4,r3
 801aeb0:	18c00003 	ldbu	r3,0(r3)
 801aeb4:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801aeb8:	e0bf9317 	ldw	r2,-436(fp)
 801aebc:	10800204 	addi	r2,r2,8
 801aec0:	e13f8f17 	ldw	r4,-452(fp)
 801aec4:	e0ff9217 	ldw	r3,-440(fp)
 801aec8:	20c7c83a 	sub	r3,r4,r3
 801aecc:	1807d4ba 	srai	r3,r3,18
 801aed0:	18c0ffcc 	andi	r3,r3,1023
 801aed4:	e13f8117 	ldw	r4,-508(fp)
 801aed8:	20c7883a 	add	r3,r4,r3
 801aedc:	18c00003 	ldbu	r3,0(r3)
 801aee0:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 801aee4:	e0bf9317 	ldw	r2,-436(fp)
 801aee8:	10800144 	addi	r2,r2,5
 801aeec:	e13f8d17 	ldw	r4,-460(fp)
 801aef0:	e0ff9117 	ldw	r3,-444(fp)
 801aef4:	20c7883a 	add	r3,r4,r3
 801aef8:	1807d4ba 	srai	r3,r3,18
 801aefc:	18c0ffcc 	andi	r3,r3,1023
 801af00:	e13f8117 	ldw	r4,-508(fp)
 801af04:	20c7883a 	add	r3,r4,r3
 801af08:	18c00003 	ldbu	r3,0(r3)
 801af0c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801af10:	e0bf9317 	ldw	r2,-436(fp)
 801af14:	108001c4 	addi	r2,r2,7
 801af18:	e13f8d17 	ldw	r4,-460(fp)
 801af1c:	e0ff9117 	ldw	r3,-444(fp)
 801af20:	20c7c83a 	sub	r3,r4,r3
 801af24:	1807d4ba 	srai	r3,r3,18
 801af28:	18c0ffcc 	andi	r3,r3,1023
 801af2c:	e13f8117 	ldw	r4,-508(fp)
 801af30:	20c7883a 	add	r3,r4,r3
 801af34:	18c00003 	ldbu	r3,0(r3)
 801af38:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26,
 801af3c:	e0bf9317 	ldw	r2,-436(fp)
 801af40:	10800184 	addi	r2,r2,6
 801af44:	e0ff9017 	ldw	r3,-448(fp)
 801af48:	1807d4ba 	srai	r3,r3,18
 801af4c:	18c0ffcc 	andi	r3,r3,1023
 801af50:	e13f8117 	ldw	r4,-508(fp)
 801af54:	20c7883a 	add	r3,r4,r3
 801af58:	18c00003 	ldbu	r3,0(r3)
 801af5c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 8;		/* advance pointer to next row */
 801af60:	e0bf7f17 	ldw	r2,-516(fp)
 801af64:	10800804 	addi	r2,r2,32
 801af68:	e0bf7f15 	stw	r2,-516(fp)
	}

	/* Pass 2: process 13 rows from work array, store into output array. */

	wsptr = workspace;
	for (ctr = 0; ctr < 13; ctr++) {
 801af6c:	e0bf8017 	ldw	r2,-512(fp)
 801af70:	10800044 	addi	r2,r2,1
 801af74:	e0bf8015 	stw	r2,-512(fp)
 801af78:	e0bf8017 	ldw	r2,-512(fp)
 801af7c:	10800350 	cmplti	r2,r2,13
 801af80:	103e531e 	bne	r2,zero,801a8d0 <jpeg_idct_13x13+0x764>
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 8;		/* advance pointer to next row */
	}
}
 801af84:	e037883a 	mov	sp,fp
 801af88:	dfc00217 	ldw	ra,8(sp)
 801af8c:	df000117 	ldw	fp,4(sp)
 801af90:	dc000017 	ldw	r16,0(sp)
 801af94:	dec00304 	addi	sp,sp,12
 801af98:	f800283a 	ret

0801af9c <jpeg_idct_14x14>:

GLOBAL(void)
	jpeg_idct_14x14 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801af9c:	deff7104 	addi	sp,sp,-572
 801afa0:	dfc08e15 	stw	ra,568(sp)
 801afa4:	df008d15 	stw	fp,564(sp)
 801afa8:	dc008c15 	stw	r16,560(sp)
 801afac:	df008c04 	addi	fp,sp,560
 801afb0:	e13ffc15 	stw	r4,-16(fp)
 801afb4:	e17ffd15 	stw	r5,-12(fp)
 801afb8:	e1bffe15 	stw	r6,-8(fp)
 801afbc:	e1ffff15 	stw	r7,-4(fp)
	INT32 z1, z2, z3, z4;
	JCOEFPTR inptr;
	ISLOW_MULT_TYPE * quantptr;
	int * wsptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801afc0:	e0bffc17 	ldw	r2,-16(fp)
 801afc4:	10804917 	ldw	r2,292(r2)
 801afc8:	10802004 	addi	r2,r2,128
 801afcc:	e0bf7815 	stw	r2,-544(fp)
	int workspace[8*14];	/* buffers data between passes */
	SHIFT_TEMPS

		/* Pass 1: process columns from input, store into work array. */

		inptr = coef_block;
 801afd0:	e0bffe17 	ldw	r2,-8(fp)
 801afd4:	e0bf7415 	stw	r2,-560(fp)
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801afd8:	e0bffd17 	ldw	r2,-12(fp)
 801afdc:	10801517 	ldw	r2,84(r2)
 801afe0:	e0bf7515 	stw	r2,-556(fp)
	wsptr = workspace;
 801afe4:	e0bf8c04 	addi	r2,fp,-464
 801afe8:	e0bf7615 	stw	r2,-552(fp)
	for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801afec:	e03f7715 	stw	zero,-548(fp)
 801aff0:	0001a506 	br	801b688 <jpeg_idct_14x14+0x6ec>
		/* Even part */

		z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801aff4:	e0bf7417 	ldw	r2,-560(fp)
 801aff8:	1080000b 	ldhu	r2,0(r2)
 801affc:	10ffffcc 	andi	r3,r2,65535
 801b000:	18e0001c 	xori	r3,r3,32768
 801b004:	18e00004 	addi	r3,r3,-32768
 801b008:	e0bf7517 	ldw	r2,-556(fp)
 801b00c:	10800017 	ldw	r2,0(r2)
 801b010:	1809883a 	mov	r4,r3
 801b014:	100b883a 	mov	r5,r2
 801b018:	802c2180 	call	802c218 <__mulsi3>
 801b01c:	e0bf7915 	stw	r2,-540(fp)
		z1 <<= CONST_BITS;
 801b020:	e0bf7917 	ldw	r2,-540(fp)
 801b024:	1004937a 	slli	r2,r2,13
 801b028:	e0bf7915 	stw	r2,-540(fp)
		/* Add fudge factor here for final descale. */
		z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 801b02c:	e0bf7917 	ldw	r2,-540(fp)
 801b030:	10810004 	addi	r2,r2,1024
 801b034:	e0bf7915 	stw	r2,-540(fp)
		z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801b038:	e0bf7417 	ldw	r2,-560(fp)
 801b03c:	10801004 	addi	r2,r2,64
 801b040:	1080000b 	ldhu	r2,0(r2)
 801b044:	10ffffcc 	andi	r3,r2,65535
 801b048:	18e0001c 	xori	r3,r3,32768
 801b04c:	18e00004 	addi	r3,r3,-32768
 801b050:	e0bf7517 	ldw	r2,-556(fp)
 801b054:	10802004 	addi	r2,r2,128
 801b058:	10800017 	ldw	r2,0(r2)
 801b05c:	1809883a 	mov	r4,r3
 801b060:	100b883a 	mov	r5,r2
 801b064:	802c2180 	call	802c218 <__mulsi3>
 801b068:	e0bf7a15 	stw	r2,-536(fp)
		z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 801b06c:	e13f7a17 	ldw	r4,-536(fp)
 801b070:	014a3184 	movi	r5,10438
 801b074:	802c2180 	call	802c218 <__mulsi3>
 801b078:	e0bf7b15 	stw	r2,-532(fp)
		z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 801b07c:	e13f7a17 	ldw	r4,-536(fp)
 801b080:	01428484 	movi	r5,2578
 801b084:	802c2180 	call	802c218 <__mulsi3>
 801b088:	e0bf7c15 	stw	r2,-528(fp)
		z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 801b08c:	e13f7a17 	ldw	r4,-536(fp)
 801b090:	01470dc4 	movi	r5,7223
 801b094:	802c2180 	call	802c218 <__mulsi3>
 801b098:	e0bf7a15 	stw	r2,-536(fp)

		tmp10 = z1 + z2;
 801b09c:	e0ff7917 	ldw	r3,-540(fp)
 801b0a0:	e0bf7b17 	ldw	r2,-532(fp)
 801b0a4:	1885883a 	add	r2,r3,r2
 801b0a8:	e0bf7d15 	stw	r2,-524(fp)
		tmp11 = z1 + z3;
 801b0ac:	e0ff7917 	ldw	r3,-540(fp)
 801b0b0:	e0bf7c17 	ldw	r2,-528(fp)
 801b0b4:	1885883a 	add	r2,r3,r2
 801b0b8:	e0bf7e15 	stw	r2,-520(fp)
		tmp12 = z1 - z4;
 801b0bc:	e0ff7917 	ldw	r3,-540(fp)
 801b0c0:	e0bf7a17 	ldw	r2,-536(fp)
 801b0c4:	1885c83a 	sub	r2,r3,r2
 801b0c8:	e0bf7f15 	stw	r2,-516(fp)

		tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 801b0cc:	e0ff7b17 	ldw	r3,-532(fp)
 801b0d0:	e0bf7c17 	ldw	r2,-528(fp)
 801b0d4:	1887883a 	add	r3,r3,r2
 801b0d8:	e0bf7a17 	ldw	r2,-536(fp)
 801b0dc:	1885c83a 	sub	r2,r3,r2
 801b0e0:	1085883a 	add	r2,r2,r2
 801b0e4:	e0ff7917 	ldw	r3,-540(fp)
 801b0e8:	1885c83a 	sub	r2,r3,r2
 801b0ec:	1005d2fa 	srai	r2,r2,11
 801b0f0:	e0bf8015 	stw	r2,-512(fp)
			CONST_BITS-PASS1_BITS);

		z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801b0f4:	e0bf7417 	ldw	r2,-560(fp)
 801b0f8:	10800804 	addi	r2,r2,32
 801b0fc:	1080000b 	ldhu	r2,0(r2)
 801b100:	10ffffcc 	andi	r3,r2,65535
 801b104:	18e0001c 	xori	r3,r3,32768
 801b108:	18e00004 	addi	r3,r3,-32768
 801b10c:	e0bf7517 	ldw	r2,-556(fp)
 801b110:	10801004 	addi	r2,r2,64
 801b114:	10800017 	ldw	r2,0(r2)
 801b118:	1809883a 	mov	r4,r3
 801b11c:	100b883a 	mov	r5,r2
 801b120:	802c2180 	call	802c218 <__mulsi3>
 801b124:	e0bf7915 	stw	r2,-540(fp)
		z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801b128:	e0bf7417 	ldw	r2,-560(fp)
 801b12c:	10801804 	addi	r2,r2,96
 801b130:	1080000b 	ldhu	r2,0(r2)
 801b134:	10ffffcc 	andi	r3,r2,65535
 801b138:	18e0001c 	xori	r3,r3,32768
 801b13c:	18e00004 	addi	r3,r3,-32768
 801b140:	e0bf7517 	ldw	r2,-556(fp)
 801b144:	10803004 	addi	r2,r2,192
 801b148:	10800017 	ldw	r2,0(r2)
 801b14c:	1809883a 	mov	r4,r3
 801b150:	100b883a 	mov	r5,r2
 801b154:	802c2180 	call	802c218 <__mulsi3>
 801b158:	e0bf7b15 	stw	r2,-532(fp)

		z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 801b15c:	e0ff7917 	ldw	r3,-540(fp)
 801b160:	e0bf7b17 	ldw	r2,-532(fp)
 801b164:	1885883a 	add	r2,r3,r2
 801b168:	1009883a 	mov	r4,r2
 801b16c:	0148d884 	movi	r5,9058
 801b170:	802c2180 	call	802c218 <__mulsi3>
 801b174:	e0bf7c15 	stw	r2,-528(fp)

		tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 801b178:	e13f7917 	ldw	r4,-540(fp)
 801b17c:	01422f44 	movi	r5,2237
 801b180:	802c2180 	call	802c218 <__mulsi3>
 801b184:	1007883a 	mov	r3,r2
 801b188:	e0bf7c17 	ldw	r2,-528(fp)
 801b18c:	1885883a 	add	r2,r3,r2
 801b190:	e0bf8115 	stw	r2,-508(fp)
		tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 801b194:	e13f7b17 	ldw	r4,-532(fp)
 801b198:	01723f04 	movi	r5,-14084
 801b19c:	802c2180 	call	802c218 <__mulsi3>
 801b1a0:	1007883a 	mov	r3,r2
 801b1a4:	e0bf7c17 	ldw	r2,-528(fp)
 801b1a8:	1885883a 	add	r2,r3,r2
 801b1ac:	e0bf8215 	stw	r2,-504(fp)
		tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 801b1b0:	e13f7917 	ldw	r4,-540(fp)
 801b1b4:	0144e8c4 	movi	r5,5027
 801b1b8:	802c2180 	call	802c218 <__mulsi3>
 801b1bc:	1021883a 	mov	r16,r2
			MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 801b1c0:	e13f7b17 	ldw	r4,-532(fp)
 801b1c4:	0174f844 	movi	r5,-11295
 801b1c8:	802c2180 	call	802c218 <__mulsi3>

		z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

		tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
		tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
		tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 801b1cc:	8085883a 	add	r2,r16,r2
 801b1d0:	e0bf8315 	stw	r2,-500(fp)
			MULTIPLY(z2, FIX(1.378756276));      /* c2 */

		tmp20 = tmp10 + tmp13;
 801b1d4:	e0ff7d17 	ldw	r3,-524(fp)
 801b1d8:	e0bf8117 	ldw	r2,-508(fp)
 801b1dc:	1885883a 	add	r2,r3,r2
 801b1e0:	e0bf8415 	stw	r2,-496(fp)
		tmp26 = tmp10 - tmp13;
 801b1e4:	e0ff7d17 	ldw	r3,-524(fp)
 801b1e8:	e0bf8117 	ldw	r2,-508(fp)
 801b1ec:	1885c83a 	sub	r2,r3,r2
 801b1f0:	e0bf8515 	stw	r2,-492(fp)
		tmp21 = tmp11 + tmp14;
 801b1f4:	e0ff7e17 	ldw	r3,-520(fp)
 801b1f8:	e0bf8217 	ldw	r2,-504(fp)
 801b1fc:	1885883a 	add	r2,r3,r2
 801b200:	e0bf8615 	stw	r2,-488(fp)
		tmp25 = tmp11 - tmp14;
 801b204:	e0ff7e17 	ldw	r3,-520(fp)
 801b208:	e0bf8217 	ldw	r2,-504(fp)
 801b20c:	1885c83a 	sub	r2,r3,r2
 801b210:	e0bf8715 	stw	r2,-484(fp)
		tmp22 = tmp12 + tmp15;
 801b214:	e0ff7f17 	ldw	r3,-516(fp)
 801b218:	e0bf8317 	ldw	r2,-500(fp)
 801b21c:	1885883a 	add	r2,r3,r2
 801b220:	e0bf8815 	stw	r2,-480(fp)
		tmp24 = tmp12 - tmp15;
 801b224:	e0ff7f17 	ldw	r3,-516(fp)
 801b228:	e0bf8317 	ldw	r2,-500(fp)
 801b22c:	1885c83a 	sub	r2,r3,r2
 801b230:	e0bf8915 	stw	r2,-476(fp)

		/* Odd part */

		z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801b234:	e0bf7417 	ldw	r2,-560(fp)
 801b238:	10800404 	addi	r2,r2,16
 801b23c:	1080000b 	ldhu	r2,0(r2)
 801b240:	10ffffcc 	andi	r3,r2,65535
 801b244:	18e0001c 	xori	r3,r3,32768
 801b248:	18e00004 	addi	r3,r3,-32768
 801b24c:	e0bf7517 	ldw	r2,-556(fp)
 801b250:	10800804 	addi	r2,r2,32
 801b254:	10800017 	ldw	r2,0(r2)
 801b258:	1809883a 	mov	r4,r3
 801b25c:	100b883a 	mov	r5,r2
 801b260:	802c2180 	call	802c218 <__mulsi3>
 801b264:	e0bf7915 	stw	r2,-540(fp)
		z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801b268:	e0bf7417 	ldw	r2,-560(fp)
 801b26c:	10800c04 	addi	r2,r2,48
 801b270:	1080000b 	ldhu	r2,0(r2)
 801b274:	10ffffcc 	andi	r3,r2,65535
 801b278:	18e0001c 	xori	r3,r3,32768
 801b27c:	18e00004 	addi	r3,r3,-32768
 801b280:	e0bf7517 	ldw	r2,-556(fp)
 801b284:	10801804 	addi	r2,r2,96
 801b288:	10800017 	ldw	r2,0(r2)
 801b28c:	1809883a 	mov	r4,r3
 801b290:	100b883a 	mov	r5,r2
 801b294:	802c2180 	call	802c218 <__mulsi3>
 801b298:	e0bf7b15 	stw	r2,-532(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801b29c:	e0bf7417 	ldw	r2,-560(fp)
 801b2a0:	10801404 	addi	r2,r2,80
 801b2a4:	1080000b 	ldhu	r2,0(r2)
 801b2a8:	10ffffcc 	andi	r3,r2,65535
 801b2ac:	18e0001c 	xori	r3,r3,32768
 801b2b0:	18e00004 	addi	r3,r3,-32768
 801b2b4:	e0bf7517 	ldw	r2,-556(fp)
 801b2b8:	10802804 	addi	r2,r2,160
 801b2bc:	10800017 	ldw	r2,0(r2)
 801b2c0:	1809883a 	mov	r4,r3
 801b2c4:	100b883a 	mov	r5,r2
 801b2c8:	802c2180 	call	802c218 <__mulsi3>
 801b2cc:	e0bf7c15 	stw	r2,-528(fp)
		z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801b2d0:	e0bf7417 	ldw	r2,-560(fp)
 801b2d4:	10801c04 	addi	r2,r2,112
 801b2d8:	1080000b 	ldhu	r2,0(r2)
 801b2dc:	10ffffcc 	andi	r3,r2,65535
 801b2e0:	18e0001c 	xori	r3,r3,32768
 801b2e4:	18e00004 	addi	r3,r3,-32768
 801b2e8:	e0bf7517 	ldw	r2,-556(fp)
 801b2ec:	10803804 	addi	r2,r2,224
 801b2f0:	10800017 	ldw	r2,0(r2)
 801b2f4:	1809883a 	mov	r4,r3
 801b2f8:	100b883a 	mov	r5,r2
 801b2fc:	802c2180 	call	802c218 <__mulsi3>
 801b300:	e0bf7a15 	stw	r2,-536(fp)
		tmp13 = z4 << CONST_BITS;
 801b304:	e0bf7a17 	ldw	r2,-536(fp)
 801b308:	1004937a 	slli	r2,r2,13
 801b30c:	e0bf8115 	stw	r2,-508(fp)

		tmp14 = z1 + z3;
 801b310:	e0ff7917 	ldw	r3,-540(fp)
 801b314:	e0bf7c17 	ldw	r2,-528(fp)
 801b318:	1885883a 	add	r2,r3,r2
 801b31c:	e0bf8215 	stw	r2,-504(fp)
		tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 801b320:	e0ff7917 	ldw	r3,-540(fp)
 801b324:	e0bf7b17 	ldw	r2,-532(fp)
 801b328:	1885883a 	add	r2,r3,r2
 801b32c:	1009883a 	mov	r4,r2
 801b330:	014aadc4 	movi	r5,10935
 801b334:	802c2180 	call	802c218 <__mulsi3>
 801b338:	e0bf7e15 	stw	r2,-520(fp)
		tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 801b33c:	e13f8217 	ldw	r4,-504(fp)
 801b340:	01499484 	movi	r5,9810
 801b344:	802c2180 	call	802c218 <__mulsi3>
 801b348:	e0bf7f15 	stw	r2,-516(fp)
		tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 801b34c:	e0ff7e17 	ldw	r3,-520(fp)
 801b350:	e0bf7f17 	ldw	r2,-516(fp)
 801b354:	1887883a 	add	r3,r3,r2
 801b358:	e0bf8117 	ldw	r2,-508(fp)
 801b35c:	18a1883a 	add	r16,r3,r2
 801b360:	e13f7917 	ldw	r4,-540(fp)
 801b364:	0176fc04 	movi	r5,-9232
 801b368:	802c2180 	call	802c218 <__mulsi3>
 801b36c:	8085883a 	add	r2,r16,r2
 801b370:	e0bf7d15 	stw	r2,-524(fp)
		tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 801b374:	e13f8217 	ldw	r4,-504(fp)
 801b378:	01460504 	movi	r5,6164
 801b37c:	802c2180 	call	802c218 <__mulsi3>
 801b380:	e0bf8215 	stw	r2,-504(fp)
		tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 801b384:	e13f7917 	ldw	r4,-540(fp)
 801b388:	017782c4 	movi	r5,-8693
 801b38c:	802c2180 	call	802c218 <__mulsi3>
 801b390:	1007883a 	mov	r3,r2
 801b394:	e0bf8217 	ldw	r2,-504(fp)
 801b398:	1885883a 	add	r2,r3,r2
 801b39c:	e0bf8a15 	stw	r2,-472(fp)
		z1    -= z2;
 801b3a0:	e0ff7917 	ldw	r3,-540(fp)
 801b3a4:	e0bf7b17 	ldw	r2,-532(fp)
 801b3a8:	1885c83a 	sub	r2,r3,r2
 801b3ac:	e0bf7915 	stw	r2,-540(fp)
		tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 801b3b0:	e13f7917 	ldw	r4,-540(fp)
 801b3b4:	0143bc84 	movi	r5,3826
 801b3b8:	802c2180 	call	802c218 <__mulsi3>
 801b3bc:	1007883a 	mov	r3,r2
 801b3c0:	e0bf8117 	ldw	r2,-508(fp)
 801b3c4:	1885c83a 	sub	r2,r3,r2
 801b3c8:	e0bf8315 	stw	r2,-500(fp)
		tmp16 += tmp15;
 801b3cc:	e0ff8a17 	ldw	r3,-472(fp)
 801b3d0:	e0bf8317 	ldw	r2,-500(fp)
 801b3d4:	1885883a 	add	r2,r3,r2
 801b3d8:	e0bf8a15 	stw	r2,-472(fp)
		z1    += z4;
 801b3dc:	e0ff7917 	ldw	r3,-540(fp)
 801b3e0:	e0bf7a17 	ldw	r2,-536(fp)
 801b3e4:	1885883a 	add	r2,r3,r2
 801b3e8:	e0bf7915 	stw	r2,-540(fp)
		z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 801b3ec:	e0ff7b17 	ldw	r3,-532(fp)
 801b3f0:	e0bf7c17 	ldw	r2,-528(fp)
 801b3f4:	1885883a 	add	r2,r3,r2
 801b3f8:	1009883a 	mov	r4,r2
 801b3fc:	017ebbc4 	movi	r5,-1297
 801b400:	802c2180 	call	802c218 <__mulsi3>
 801b404:	1007883a 	mov	r3,r2
 801b408:	e0bf8117 	ldw	r2,-508(fp)
 801b40c:	1885c83a 	sub	r2,r3,r2
 801b410:	e0bf7a15 	stw	r2,-536(fp)
		tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 801b414:	e13f7b17 	ldw	r4,-532(fp)
 801b418:	017c9b84 	movi	r5,-3474
 801b41c:	802c2180 	call	802c218 <__mulsi3>
 801b420:	1007883a 	mov	r3,r2
 801b424:	e0bf7a17 	ldw	r2,-536(fp)
 801b428:	1885883a 	add	r2,r3,r2
 801b42c:	e0ff7e17 	ldw	r3,-520(fp)
 801b430:	1885883a 	add	r2,r3,r2
 801b434:	e0bf7e15 	stw	r2,-520(fp)
		tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 801b438:	e13f7c17 	ldw	r4,-528(fp)
 801b43c:	016d0244 	movi	r5,-19447
 801b440:	802c2180 	call	802c218 <__mulsi3>
 801b444:	1007883a 	mov	r3,r2
 801b448:	e0bf7a17 	ldw	r2,-536(fp)
 801b44c:	1885883a 	add	r2,r3,r2
 801b450:	e0ff7f17 	ldw	r3,-516(fp)
 801b454:	1885883a 	add	r2,r3,r2
 801b458:	e0bf7f15 	stw	r2,-516(fp)
		z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 801b45c:	e0ff7c17 	ldw	r3,-528(fp)
 801b460:	e0bf7b17 	ldw	r2,-532(fp)
 801b464:	1885c83a 	sub	r2,r3,r2
 801b468:	1009883a 	mov	r4,r2
 801b46c:	014b3e04 	movi	r5,11512
 801b470:	802c2180 	call	802c218 <__mulsi3>
 801b474:	e0bf7a15 	stw	r2,-536(fp)
		tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 801b478:	e0ff7a17 	ldw	r3,-536(fp)
 801b47c:	e0bf8117 	ldw	r2,-508(fp)
 801b480:	18a1883a 	add	r16,r3,r2
 801b484:	e13f7c17 	ldw	r4,-528(fp)
 801b488:	01727984 	movi	r5,-13850
 801b48c:	802c2180 	call	802c218 <__mulsi3>
 801b490:	8085883a 	add	r2,r16,r2
 801b494:	e0ff8217 	ldw	r3,-504(fp)
 801b498:	1885883a 	add	r2,r3,r2
 801b49c:	e0bf8215 	stw	r2,-504(fp)
		tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 801b4a0:	e13f7b17 	ldw	r4,-532(fp)
 801b4a4:	01456644 	movi	r5,5529
 801b4a8:	802c2180 	call	802c218 <__mulsi3>
 801b4ac:	1007883a 	mov	r3,r2
 801b4b0:	e0bf7a17 	ldw	r2,-536(fp)
 801b4b4:	1885883a 	add	r2,r3,r2
 801b4b8:	e0ff8317 	ldw	r3,-500(fp)
 801b4bc:	1885883a 	add	r2,r3,r2
 801b4c0:	e0bf8315 	stw	r2,-500(fp)

		tmp13 = (z1 - z3) << PASS1_BITS;
 801b4c4:	e0ff7917 	ldw	r3,-540(fp)
 801b4c8:	e0bf7c17 	ldw	r2,-528(fp)
 801b4cc:	1885c83a 	sub	r2,r3,r2
 801b4d0:	1085883a 	add	r2,r2,r2
 801b4d4:	1085883a 	add	r2,r2,r2
 801b4d8:	e0bf8115 	stw	r2,-508(fp)

		/* Final output stage */

		wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801b4dc:	e0ff8417 	ldw	r3,-496(fp)
 801b4e0:	e0bf7d17 	ldw	r2,-524(fp)
 801b4e4:	1885883a 	add	r2,r3,r2
 801b4e8:	1007d2fa 	srai	r3,r2,11
 801b4ec:	e0bf7617 	ldw	r2,-552(fp)
 801b4f0:	10c00015 	stw	r3,0(r2)
		wsptr[8*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801b4f4:	e0bf7617 	ldw	r2,-552(fp)
 801b4f8:	10806804 	addi	r2,r2,416
 801b4fc:	e13f8417 	ldw	r4,-496(fp)
 801b500:	e0ff7d17 	ldw	r3,-524(fp)
 801b504:	20c7c83a 	sub	r3,r4,r3
 801b508:	1807d2fa 	srai	r3,r3,11
 801b50c:	10c00015 	stw	r3,0(r2)
		wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801b510:	e0bf7617 	ldw	r2,-552(fp)
 801b514:	10800804 	addi	r2,r2,32
 801b518:	e13f8617 	ldw	r4,-488(fp)
 801b51c:	e0ff7e17 	ldw	r3,-520(fp)
 801b520:	20c7883a 	add	r3,r4,r3
 801b524:	1807d2fa 	srai	r3,r3,11
 801b528:	10c00015 	stw	r3,0(r2)
		wsptr[8*12] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801b52c:	e0bf7617 	ldw	r2,-552(fp)
 801b530:	10806004 	addi	r2,r2,384
 801b534:	e13f8617 	ldw	r4,-488(fp)
 801b538:	e0ff7e17 	ldw	r3,-520(fp)
 801b53c:	20c7c83a 	sub	r3,r4,r3
 801b540:	1807d2fa 	srai	r3,r3,11
 801b544:	10c00015 	stw	r3,0(r2)
		wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801b548:	e0bf7617 	ldw	r2,-552(fp)
 801b54c:	10801004 	addi	r2,r2,64
 801b550:	e13f8817 	ldw	r4,-480(fp)
 801b554:	e0ff7f17 	ldw	r3,-516(fp)
 801b558:	20c7883a 	add	r3,r4,r3
 801b55c:	1807d2fa 	srai	r3,r3,11
 801b560:	10c00015 	stw	r3,0(r2)
		wsptr[8*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801b564:	e0bf7617 	ldw	r2,-552(fp)
 801b568:	10805804 	addi	r2,r2,352
 801b56c:	e13f8817 	ldw	r4,-480(fp)
 801b570:	e0ff7f17 	ldw	r3,-516(fp)
 801b574:	20c7c83a 	sub	r3,r4,r3
 801b578:	1807d2fa 	srai	r3,r3,11
 801b57c:	10c00015 	stw	r3,0(r2)
		wsptr[8*3]  = (int) (tmp23 + tmp13);
 801b580:	e0bf7617 	ldw	r2,-552(fp)
 801b584:	10801804 	addi	r2,r2,96
 801b588:	e13f8017 	ldw	r4,-512(fp)
 801b58c:	e0ff8117 	ldw	r3,-508(fp)
 801b590:	20c7883a 	add	r3,r4,r3
 801b594:	10c00015 	stw	r3,0(r2)
		wsptr[8*10] = (int) (tmp23 - tmp13);
 801b598:	e0bf7617 	ldw	r2,-552(fp)
 801b59c:	10805004 	addi	r2,r2,320
 801b5a0:	e13f8017 	ldw	r4,-512(fp)
 801b5a4:	e0ff8117 	ldw	r3,-508(fp)
 801b5a8:	20c7c83a 	sub	r3,r4,r3
 801b5ac:	10c00015 	stw	r3,0(r2)
		wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 801b5b0:	e0bf7617 	ldw	r2,-552(fp)
 801b5b4:	10802004 	addi	r2,r2,128
 801b5b8:	e13f8917 	ldw	r4,-476(fp)
 801b5bc:	e0ff8217 	ldw	r3,-504(fp)
 801b5c0:	20c7883a 	add	r3,r4,r3
 801b5c4:	1807d2fa 	srai	r3,r3,11
 801b5c8:	10c00015 	stw	r3,0(r2)
		wsptr[8*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 801b5cc:	e0bf7617 	ldw	r2,-552(fp)
 801b5d0:	10804804 	addi	r2,r2,288
 801b5d4:	e13f8917 	ldw	r4,-476(fp)
 801b5d8:	e0ff8217 	ldw	r3,-504(fp)
 801b5dc:	20c7c83a 	sub	r3,r4,r3
 801b5e0:	1807d2fa 	srai	r3,r3,11
 801b5e4:	10c00015 	stw	r3,0(r2)
		wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 801b5e8:	e0bf7617 	ldw	r2,-552(fp)
 801b5ec:	10802804 	addi	r2,r2,160
 801b5f0:	e13f8717 	ldw	r4,-484(fp)
 801b5f4:	e0ff8317 	ldw	r3,-500(fp)
 801b5f8:	20c7883a 	add	r3,r4,r3
 801b5fc:	1807d2fa 	srai	r3,r3,11
 801b600:	10c00015 	stw	r3,0(r2)
		wsptr[8*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 801b604:	e0bf7617 	ldw	r2,-552(fp)
 801b608:	10804004 	addi	r2,r2,256
 801b60c:	e13f8717 	ldw	r4,-484(fp)
 801b610:	e0ff8317 	ldw	r3,-500(fp)
 801b614:	20c7c83a 	sub	r3,r4,r3
 801b618:	1807d2fa 	srai	r3,r3,11
 801b61c:	10c00015 	stw	r3,0(r2)
		wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 801b620:	e0bf7617 	ldw	r2,-552(fp)
 801b624:	10803004 	addi	r2,r2,192
 801b628:	e13f8517 	ldw	r4,-492(fp)
 801b62c:	e0ff8a17 	ldw	r3,-472(fp)
 801b630:	20c7883a 	add	r3,r4,r3
 801b634:	1807d2fa 	srai	r3,r3,11
 801b638:	10c00015 	stw	r3,0(r2)
		wsptr[8*7]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 801b63c:	e0bf7617 	ldw	r2,-552(fp)
 801b640:	10803804 	addi	r2,r2,224
 801b644:	e13f8517 	ldw	r4,-492(fp)
 801b648:	e0ff8a17 	ldw	r3,-472(fp)
 801b64c:	20c7c83a 	sub	r3,r4,r3
 801b650:	1807d2fa 	srai	r3,r3,11
 801b654:	10c00015 	stw	r3,0(r2)
		/* Pass 1: process columns from input, store into work array. */

		inptr = coef_block;
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
	wsptr = workspace;
	for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801b658:	e0bf7717 	ldw	r2,-548(fp)
 801b65c:	10800044 	addi	r2,r2,1
 801b660:	e0bf7715 	stw	r2,-548(fp)
 801b664:	e0bf7417 	ldw	r2,-560(fp)
 801b668:	10800084 	addi	r2,r2,2
 801b66c:	e0bf7415 	stw	r2,-560(fp)
 801b670:	e0bf7517 	ldw	r2,-556(fp)
 801b674:	10800104 	addi	r2,r2,4
 801b678:	e0bf7515 	stw	r2,-556(fp)
 801b67c:	e0bf7617 	ldw	r2,-552(fp)
 801b680:	10800104 	addi	r2,r2,4
 801b684:	e0bf7615 	stw	r2,-552(fp)
 801b688:	e0bf7717 	ldw	r2,-548(fp)
 801b68c:	10800210 	cmplti	r2,r2,8
 801b690:	103e581e 	bne	r2,zero,801aff4 <jpeg_idct_14x14+0x58>
		wsptr[8*7]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
	}

	/* Pass 2: process 14 rows from work array, store into output array. */

	wsptr = workspace;
 801b694:	e0bf8c04 	addi	r2,fp,-464
 801b698:	e0bf7615 	stw	r2,-552(fp)
	for (ctr = 0; ctr < 14; ctr++) {
 801b69c:	e03f7715 	stw	zero,-548(fp)
 801b6a0:	00019506 	br	801bcf8 <jpeg_idct_14x14+0xd5c>
		outptr = output_buf[ctr] + output_col;
 801b6a4:	e0bf7717 	ldw	r2,-548(fp)
 801b6a8:	1085883a 	add	r2,r2,r2
 801b6ac:	1085883a 	add	r2,r2,r2
 801b6b0:	e0ffff17 	ldw	r3,-4(fp)
 801b6b4:	1885883a 	add	r2,r3,r2
 801b6b8:	10c00017 	ldw	r3,0(r2)
 801b6bc:	e0800317 	ldw	r2,12(fp)
 801b6c0:	1885883a 	add	r2,r3,r2
 801b6c4:	e0bf8b15 	stw	r2,-468(fp)

		/* Even part */

		/* Add fudge factor here for final descale. */
		z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801b6c8:	e0bf7617 	ldw	r2,-552(fp)
 801b6cc:	10800017 	ldw	r2,0(r2)
 801b6d0:	10800404 	addi	r2,r2,16
 801b6d4:	e0bf7915 	stw	r2,-540(fp)
		z1 <<= CONST_BITS;
 801b6d8:	e0bf7917 	ldw	r2,-540(fp)
 801b6dc:	1004937a 	slli	r2,r2,13
 801b6e0:	e0bf7915 	stw	r2,-540(fp)
		z4 = (INT32) wsptr[4];
 801b6e4:	e0bf7617 	ldw	r2,-552(fp)
 801b6e8:	10800404 	addi	r2,r2,16
 801b6ec:	10800017 	ldw	r2,0(r2)
 801b6f0:	e0bf7a15 	stw	r2,-536(fp)
		z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 801b6f4:	e13f7a17 	ldw	r4,-536(fp)
 801b6f8:	014a3184 	movi	r5,10438
 801b6fc:	802c2180 	call	802c218 <__mulsi3>
 801b700:	e0bf7b15 	stw	r2,-532(fp)
		z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 801b704:	e13f7a17 	ldw	r4,-536(fp)
 801b708:	01428484 	movi	r5,2578
 801b70c:	802c2180 	call	802c218 <__mulsi3>
 801b710:	e0bf7c15 	stw	r2,-528(fp)
		z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 801b714:	e13f7a17 	ldw	r4,-536(fp)
 801b718:	01470dc4 	movi	r5,7223
 801b71c:	802c2180 	call	802c218 <__mulsi3>
 801b720:	e0bf7a15 	stw	r2,-536(fp)

		tmp10 = z1 + z2;
 801b724:	e0ff7917 	ldw	r3,-540(fp)
 801b728:	e0bf7b17 	ldw	r2,-532(fp)
 801b72c:	1885883a 	add	r2,r3,r2
 801b730:	e0bf7d15 	stw	r2,-524(fp)
		tmp11 = z1 + z3;
 801b734:	e0ff7917 	ldw	r3,-540(fp)
 801b738:	e0bf7c17 	ldw	r2,-528(fp)
 801b73c:	1885883a 	add	r2,r3,r2
 801b740:	e0bf7e15 	stw	r2,-520(fp)
		tmp12 = z1 - z4;
 801b744:	e0ff7917 	ldw	r3,-540(fp)
 801b748:	e0bf7a17 	ldw	r2,-536(fp)
 801b74c:	1885c83a 	sub	r2,r3,r2
 801b750:	e0bf7f15 	stw	r2,-516(fp)

		tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 801b754:	e0ff7b17 	ldw	r3,-532(fp)
 801b758:	e0bf7c17 	ldw	r2,-528(fp)
 801b75c:	1887883a 	add	r3,r3,r2
 801b760:	e0bf7a17 	ldw	r2,-536(fp)
 801b764:	1885c83a 	sub	r2,r3,r2
 801b768:	1085883a 	add	r2,r2,r2
 801b76c:	e0ff7917 	ldw	r3,-540(fp)
 801b770:	1885c83a 	sub	r2,r3,r2
 801b774:	e0bf8015 	stw	r2,-512(fp)

		z1 = (INT32) wsptr[2];
 801b778:	e0bf7617 	ldw	r2,-552(fp)
 801b77c:	10800204 	addi	r2,r2,8
 801b780:	10800017 	ldw	r2,0(r2)
 801b784:	e0bf7915 	stw	r2,-540(fp)
		z2 = (INT32) wsptr[6];
 801b788:	e0bf7617 	ldw	r2,-552(fp)
 801b78c:	10800604 	addi	r2,r2,24
 801b790:	10800017 	ldw	r2,0(r2)
 801b794:	e0bf7b15 	stw	r2,-532(fp)

		z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 801b798:	e0ff7917 	ldw	r3,-540(fp)
 801b79c:	e0bf7b17 	ldw	r2,-532(fp)
 801b7a0:	1885883a 	add	r2,r3,r2
 801b7a4:	1009883a 	mov	r4,r2
 801b7a8:	0148d884 	movi	r5,9058
 801b7ac:	802c2180 	call	802c218 <__mulsi3>
 801b7b0:	e0bf7c15 	stw	r2,-528(fp)

		tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 801b7b4:	e13f7917 	ldw	r4,-540(fp)
 801b7b8:	01422f44 	movi	r5,2237
 801b7bc:	802c2180 	call	802c218 <__mulsi3>
 801b7c0:	1007883a 	mov	r3,r2
 801b7c4:	e0bf7c17 	ldw	r2,-528(fp)
 801b7c8:	1885883a 	add	r2,r3,r2
 801b7cc:	e0bf8115 	stw	r2,-508(fp)
		tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 801b7d0:	e13f7b17 	ldw	r4,-532(fp)
 801b7d4:	01723f04 	movi	r5,-14084
 801b7d8:	802c2180 	call	802c218 <__mulsi3>
 801b7dc:	1007883a 	mov	r3,r2
 801b7e0:	e0bf7c17 	ldw	r2,-528(fp)
 801b7e4:	1885883a 	add	r2,r3,r2
 801b7e8:	e0bf8215 	stw	r2,-504(fp)
		tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 801b7ec:	e13f7917 	ldw	r4,-540(fp)
 801b7f0:	0144e8c4 	movi	r5,5027
 801b7f4:	802c2180 	call	802c218 <__mulsi3>
 801b7f8:	1021883a 	mov	r16,r2
			MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 801b7fc:	e13f7b17 	ldw	r4,-532(fp)
 801b800:	0174f844 	movi	r5,-11295
 801b804:	802c2180 	call	802c218 <__mulsi3>

		z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

		tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
		tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
		tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 801b808:	8085883a 	add	r2,r16,r2
 801b80c:	e0bf8315 	stw	r2,-500(fp)
			MULTIPLY(z2, FIX(1.378756276));      /* c2 */

		tmp20 = tmp10 + tmp13;
 801b810:	e0ff7d17 	ldw	r3,-524(fp)
 801b814:	e0bf8117 	ldw	r2,-508(fp)
 801b818:	1885883a 	add	r2,r3,r2
 801b81c:	e0bf8415 	stw	r2,-496(fp)
		tmp26 = tmp10 - tmp13;
 801b820:	e0ff7d17 	ldw	r3,-524(fp)
 801b824:	e0bf8117 	ldw	r2,-508(fp)
 801b828:	1885c83a 	sub	r2,r3,r2
 801b82c:	e0bf8515 	stw	r2,-492(fp)
		tmp21 = tmp11 + tmp14;
 801b830:	e0ff7e17 	ldw	r3,-520(fp)
 801b834:	e0bf8217 	ldw	r2,-504(fp)
 801b838:	1885883a 	add	r2,r3,r2
 801b83c:	e0bf8615 	stw	r2,-488(fp)
		tmp25 = tmp11 - tmp14;
 801b840:	e0ff7e17 	ldw	r3,-520(fp)
 801b844:	e0bf8217 	ldw	r2,-504(fp)
 801b848:	1885c83a 	sub	r2,r3,r2
 801b84c:	e0bf8715 	stw	r2,-484(fp)
		tmp22 = tmp12 + tmp15;
 801b850:	e0ff7f17 	ldw	r3,-516(fp)
 801b854:	e0bf8317 	ldw	r2,-500(fp)
 801b858:	1885883a 	add	r2,r3,r2
 801b85c:	e0bf8815 	stw	r2,-480(fp)
		tmp24 = tmp12 - tmp15;
 801b860:	e0ff7f17 	ldw	r3,-516(fp)
 801b864:	e0bf8317 	ldw	r2,-500(fp)
 801b868:	1885c83a 	sub	r2,r3,r2
 801b86c:	e0bf8915 	stw	r2,-476(fp)

		/* Odd part */

		z1 = (INT32) wsptr[1];
 801b870:	e0bf7617 	ldw	r2,-552(fp)
 801b874:	10800104 	addi	r2,r2,4
 801b878:	10800017 	ldw	r2,0(r2)
 801b87c:	e0bf7915 	stw	r2,-540(fp)
		z2 = (INT32) wsptr[3];
 801b880:	e0bf7617 	ldw	r2,-552(fp)
 801b884:	10800304 	addi	r2,r2,12
 801b888:	10800017 	ldw	r2,0(r2)
 801b88c:	e0bf7b15 	stw	r2,-532(fp)
		z3 = (INT32) wsptr[5];
 801b890:	e0bf7617 	ldw	r2,-552(fp)
 801b894:	10800504 	addi	r2,r2,20
 801b898:	10800017 	ldw	r2,0(r2)
 801b89c:	e0bf7c15 	stw	r2,-528(fp)
		z4 = (INT32) wsptr[7];
 801b8a0:	e0bf7617 	ldw	r2,-552(fp)
 801b8a4:	10800704 	addi	r2,r2,28
 801b8a8:	10800017 	ldw	r2,0(r2)
 801b8ac:	e0bf7a15 	stw	r2,-536(fp)
		z4 <<= CONST_BITS;
 801b8b0:	e0bf7a17 	ldw	r2,-536(fp)
 801b8b4:	1004937a 	slli	r2,r2,13
 801b8b8:	e0bf7a15 	stw	r2,-536(fp)

		tmp14 = z1 + z3;
 801b8bc:	e0ff7917 	ldw	r3,-540(fp)
 801b8c0:	e0bf7c17 	ldw	r2,-528(fp)
 801b8c4:	1885883a 	add	r2,r3,r2
 801b8c8:	e0bf8215 	stw	r2,-504(fp)
		tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 801b8cc:	e0ff7917 	ldw	r3,-540(fp)
 801b8d0:	e0bf7b17 	ldw	r2,-532(fp)
 801b8d4:	1885883a 	add	r2,r3,r2
 801b8d8:	1009883a 	mov	r4,r2
 801b8dc:	014aadc4 	movi	r5,10935
 801b8e0:	802c2180 	call	802c218 <__mulsi3>
 801b8e4:	e0bf7e15 	stw	r2,-520(fp)
		tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 801b8e8:	e13f8217 	ldw	r4,-504(fp)
 801b8ec:	01499484 	movi	r5,9810
 801b8f0:	802c2180 	call	802c218 <__mulsi3>
 801b8f4:	e0bf7f15 	stw	r2,-516(fp)
		tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 801b8f8:	e0ff7e17 	ldw	r3,-520(fp)
 801b8fc:	e0bf7f17 	ldw	r2,-516(fp)
 801b900:	1887883a 	add	r3,r3,r2
 801b904:	e0bf7a17 	ldw	r2,-536(fp)
 801b908:	18a1883a 	add	r16,r3,r2
 801b90c:	e13f7917 	ldw	r4,-540(fp)
 801b910:	0176fc04 	movi	r5,-9232
 801b914:	802c2180 	call	802c218 <__mulsi3>
 801b918:	8085883a 	add	r2,r16,r2
 801b91c:	e0bf7d15 	stw	r2,-524(fp)
		tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 801b920:	e13f8217 	ldw	r4,-504(fp)
 801b924:	01460504 	movi	r5,6164
 801b928:	802c2180 	call	802c218 <__mulsi3>
 801b92c:	e0bf8215 	stw	r2,-504(fp)
		tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 801b930:	e13f7917 	ldw	r4,-540(fp)
 801b934:	017782c4 	movi	r5,-8693
 801b938:	802c2180 	call	802c218 <__mulsi3>
 801b93c:	1007883a 	mov	r3,r2
 801b940:	e0bf8217 	ldw	r2,-504(fp)
 801b944:	1885883a 	add	r2,r3,r2
 801b948:	e0bf8a15 	stw	r2,-472(fp)
		z1    -= z2;
 801b94c:	e0ff7917 	ldw	r3,-540(fp)
 801b950:	e0bf7b17 	ldw	r2,-532(fp)
 801b954:	1885c83a 	sub	r2,r3,r2
 801b958:	e0bf7915 	stw	r2,-540(fp)
		tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 801b95c:	e13f7917 	ldw	r4,-540(fp)
 801b960:	0143bc84 	movi	r5,3826
 801b964:	802c2180 	call	802c218 <__mulsi3>
 801b968:	1007883a 	mov	r3,r2
 801b96c:	e0bf7a17 	ldw	r2,-536(fp)
 801b970:	1885c83a 	sub	r2,r3,r2
 801b974:	e0bf8315 	stw	r2,-500(fp)
		tmp16 += tmp15;
 801b978:	e0ff8a17 	ldw	r3,-472(fp)
 801b97c:	e0bf8317 	ldw	r2,-500(fp)
 801b980:	1885883a 	add	r2,r3,r2
 801b984:	e0bf8a15 	stw	r2,-472(fp)
		tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 801b988:	e0ff7b17 	ldw	r3,-532(fp)
 801b98c:	e0bf7c17 	ldw	r2,-528(fp)
 801b990:	1885883a 	add	r2,r3,r2
 801b994:	1009883a 	mov	r4,r2
 801b998:	017ebbc4 	movi	r5,-1297
 801b99c:	802c2180 	call	802c218 <__mulsi3>
 801b9a0:	1007883a 	mov	r3,r2
 801b9a4:	e0bf7a17 	ldw	r2,-536(fp)
 801b9a8:	1885c83a 	sub	r2,r3,r2
 801b9ac:	e0bf8115 	stw	r2,-508(fp)
		tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 801b9b0:	e13f7b17 	ldw	r4,-532(fp)
 801b9b4:	017c9b84 	movi	r5,-3474
 801b9b8:	802c2180 	call	802c218 <__mulsi3>
 801b9bc:	1007883a 	mov	r3,r2
 801b9c0:	e0bf8117 	ldw	r2,-508(fp)
 801b9c4:	1885883a 	add	r2,r3,r2
 801b9c8:	e0ff7e17 	ldw	r3,-520(fp)
 801b9cc:	1885883a 	add	r2,r3,r2
 801b9d0:	e0bf7e15 	stw	r2,-520(fp)
		tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 801b9d4:	e13f7c17 	ldw	r4,-528(fp)
 801b9d8:	016d0244 	movi	r5,-19447
 801b9dc:	802c2180 	call	802c218 <__mulsi3>
 801b9e0:	1007883a 	mov	r3,r2
 801b9e4:	e0bf8117 	ldw	r2,-508(fp)
 801b9e8:	1885883a 	add	r2,r3,r2
 801b9ec:	e0ff7f17 	ldw	r3,-516(fp)
 801b9f0:	1885883a 	add	r2,r3,r2
 801b9f4:	e0bf7f15 	stw	r2,-516(fp)
		tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 801b9f8:	e0ff7c17 	ldw	r3,-528(fp)
 801b9fc:	e0bf7b17 	ldw	r2,-532(fp)
 801ba00:	1885c83a 	sub	r2,r3,r2
 801ba04:	1009883a 	mov	r4,r2
 801ba08:	014b3e04 	movi	r5,11512
 801ba0c:	802c2180 	call	802c218 <__mulsi3>
 801ba10:	e0bf8115 	stw	r2,-508(fp)
		tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 801ba14:	e0ff8117 	ldw	r3,-508(fp)
 801ba18:	e0bf7a17 	ldw	r2,-536(fp)
 801ba1c:	18a1883a 	add	r16,r3,r2
 801ba20:	e13f7c17 	ldw	r4,-528(fp)
 801ba24:	01727984 	movi	r5,-13850
 801ba28:	802c2180 	call	802c218 <__mulsi3>
 801ba2c:	8085883a 	add	r2,r16,r2
 801ba30:	e0ff8217 	ldw	r3,-504(fp)
 801ba34:	1885883a 	add	r2,r3,r2
 801ba38:	e0bf8215 	stw	r2,-504(fp)
		tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 801ba3c:	e13f7b17 	ldw	r4,-532(fp)
 801ba40:	01456644 	movi	r5,5529
 801ba44:	802c2180 	call	802c218 <__mulsi3>
 801ba48:	1007883a 	mov	r3,r2
 801ba4c:	e0bf8117 	ldw	r2,-508(fp)
 801ba50:	1885883a 	add	r2,r3,r2
 801ba54:	e0ff8317 	ldw	r3,-500(fp)
 801ba58:	1885883a 	add	r2,r3,r2
 801ba5c:	e0bf8315 	stw	r2,-500(fp)

		tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 801ba60:	e0ff7917 	ldw	r3,-540(fp)
 801ba64:	e0bf7c17 	ldw	r2,-528(fp)
 801ba68:	1885c83a 	sub	r2,r3,r2
 801ba6c:	1006937a 	slli	r3,r2,13
 801ba70:	e0bf7a17 	ldw	r2,-536(fp)
 801ba74:	1885883a 	add	r2,r3,r2
 801ba78:	e0bf8115 	stw	r2,-508(fp)

		/* Final output stage */

		outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801ba7c:	e0ff8417 	ldw	r3,-496(fp)
 801ba80:	e0bf7d17 	ldw	r2,-524(fp)
 801ba84:	1885883a 	add	r2,r3,r2
 801ba88:	1005d4ba 	srai	r2,r2,18
 801ba8c:	1080ffcc 	andi	r2,r2,1023
 801ba90:	e0ff7817 	ldw	r3,-544(fp)
 801ba94:	1885883a 	add	r2,r3,r2
 801ba98:	10c00003 	ldbu	r3,0(r2)
 801ba9c:	e0bf8b17 	ldw	r2,-468(fp)
 801baa0:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801baa4:	e0bf8b17 	ldw	r2,-468(fp)
 801baa8:	10800344 	addi	r2,r2,13
 801baac:	e13f8417 	ldw	r4,-496(fp)
 801bab0:	e0ff7d17 	ldw	r3,-524(fp)
 801bab4:	20c7c83a 	sub	r3,r4,r3
 801bab8:	1807d4ba 	srai	r3,r3,18
 801babc:	18c0ffcc 	andi	r3,r3,1023
 801bac0:	e13f7817 	ldw	r4,-544(fp)
 801bac4:	20c7883a 	add	r3,r4,r3
 801bac8:	18c00003 	ldbu	r3,0(r3)
 801bacc:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801bad0:	e0bf8b17 	ldw	r2,-468(fp)
 801bad4:	10800044 	addi	r2,r2,1
 801bad8:	e13f8617 	ldw	r4,-488(fp)
 801badc:	e0ff7e17 	ldw	r3,-520(fp)
 801bae0:	20c7883a 	add	r3,r4,r3
 801bae4:	1807d4ba 	srai	r3,r3,18
 801bae8:	18c0ffcc 	andi	r3,r3,1023
 801baec:	e13f7817 	ldw	r4,-544(fp)
 801baf0:	20c7883a 	add	r3,r4,r3
 801baf4:	18c00003 	ldbu	r3,0(r3)
 801baf8:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801bafc:	e0bf8b17 	ldw	r2,-468(fp)
 801bb00:	10800304 	addi	r2,r2,12
 801bb04:	e13f8617 	ldw	r4,-488(fp)
 801bb08:	e0ff7e17 	ldw	r3,-520(fp)
 801bb0c:	20c7c83a 	sub	r3,r4,r3
 801bb10:	1807d4ba 	srai	r3,r3,18
 801bb14:	18c0ffcc 	andi	r3,r3,1023
 801bb18:	e13f7817 	ldw	r4,-544(fp)
 801bb1c:	20c7883a 	add	r3,r4,r3
 801bb20:	18c00003 	ldbu	r3,0(r3)
 801bb24:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801bb28:	e0bf8b17 	ldw	r2,-468(fp)
 801bb2c:	10800084 	addi	r2,r2,2
 801bb30:	e13f8817 	ldw	r4,-480(fp)
 801bb34:	e0ff7f17 	ldw	r3,-516(fp)
 801bb38:	20c7883a 	add	r3,r4,r3
 801bb3c:	1807d4ba 	srai	r3,r3,18
 801bb40:	18c0ffcc 	andi	r3,r3,1023
 801bb44:	e13f7817 	ldw	r4,-544(fp)
 801bb48:	20c7883a 	add	r3,r4,r3
 801bb4c:	18c00003 	ldbu	r3,0(r3)
 801bb50:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801bb54:	e0bf8b17 	ldw	r2,-468(fp)
 801bb58:	108002c4 	addi	r2,r2,11
 801bb5c:	e13f8817 	ldw	r4,-480(fp)
 801bb60:	e0ff7f17 	ldw	r3,-516(fp)
 801bb64:	20c7c83a 	sub	r3,r4,r3
 801bb68:	1807d4ba 	srai	r3,r3,18
 801bb6c:	18c0ffcc 	andi	r3,r3,1023
 801bb70:	e13f7817 	ldw	r4,-544(fp)
 801bb74:	20c7883a 	add	r3,r4,r3
 801bb78:	18c00003 	ldbu	r3,0(r3)
 801bb7c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801bb80:	e0bf8b17 	ldw	r2,-468(fp)
 801bb84:	108000c4 	addi	r2,r2,3
 801bb88:	e13f8017 	ldw	r4,-512(fp)
 801bb8c:	e0ff8117 	ldw	r3,-508(fp)
 801bb90:	20c7883a 	add	r3,r4,r3
 801bb94:	1807d4ba 	srai	r3,r3,18
 801bb98:	18c0ffcc 	andi	r3,r3,1023
 801bb9c:	e13f7817 	ldw	r4,-544(fp)
 801bba0:	20c7883a 	add	r3,r4,r3
 801bba4:	18c00003 	ldbu	r3,0(r3)
 801bba8:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801bbac:	e0bf8b17 	ldw	r2,-468(fp)
 801bbb0:	10800284 	addi	r2,r2,10
 801bbb4:	e13f8017 	ldw	r4,-512(fp)
 801bbb8:	e0ff8117 	ldw	r3,-508(fp)
 801bbbc:	20c7c83a 	sub	r3,r4,r3
 801bbc0:	1807d4ba 	srai	r3,r3,18
 801bbc4:	18c0ffcc 	andi	r3,r3,1023
 801bbc8:	e13f7817 	ldw	r4,-544(fp)
 801bbcc:	20c7883a 	add	r3,r4,r3
 801bbd0:	18c00003 	ldbu	r3,0(r3)
 801bbd4:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801bbd8:	e0bf8b17 	ldw	r2,-468(fp)
 801bbdc:	10800104 	addi	r2,r2,4
 801bbe0:	e13f8917 	ldw	r4,-476(fp)
 801bbe4:	e0ff8217 	ldw	r3,-504(fp)
 801bbe8:	20c7883a 	add	r3,r4,r3
 801bbec:	1807d4ba 	srai	r3,r3,18
 801bbf0:	18c0ffcc 	andi	r3,r3,1023
 801bbf4:	e13f7817 	ldw	r4,-544(fp)
 801bbf8:	20c7883a 	add	r3,r4,r3
 801bbfc:	18c00003 	ldbu	r3,0(r3)
 801bc00:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801bc04:	e0bf8b17 	ldw	r2,-468(fp)
 801bc08:	10800244 	addi	r2,r2,9
 801bc0c:	e13f8917 	ldw	r4,-476(fp)
 801bc10:	e0ff8217 	ldw	r3,-504(fp)
 801bc14:	20c7c83a 	sub	r3,r4,r3
 801bc18:	1807d4ba 	srai	r3,r3,18
 801bc1c:	18c0ffcc 	andi	r3,r3,1023
 801bc20:	e13f7817 	ldw	r4,-544(fp)
 801bc24:	20c7883a 	add	r3,r4,r3
 801bc28:	18c00003 	ldbu	r3,0(r3)
 801bc2c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 801bc30:	e0bf8b17 	ldw	r2,-468(fp)
 801bc34:	10800144 	addi	r2,r2,5
 801bc38:	e13f8717 	ldw	r4,-484(fp)
 801bc3c:	e0ff8317 	ldw	r3,-500(fp)
 801bc40:	20c7883a 	add	r3,r4,r3
 801bc44:	1807d4ba 	srai	r3,r3,18
 801bc48:	18c0ffcc 	andi	r3,r3,1023
 801bc4c:	e13f7817 	ldw	r4,-544(fp)
 801bc50:	20c7883a 	add	r3,r4,r3
 801bc54:	18c00003 	ldbu	r3,0(r3)
 801bc58:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801bc5c:	e0bf8b17 	ldw	r2,-468(fp)
 801bc60:	10800204 	addi	r2,r2,8
 801bc64:	e13f8717 	ldw	r4,-484(fp)
 801bc68:	e0ff8317 	ldw	r3,-500(fp)
 801bc6c:	20c7c83a 	sub	r3,r4,r3
 801bc70:	1807d4ba 	srai	r3,r3,18
 801bc74:	18c0ffcc 	andi	r3,r3,1023
 801bc78:	e13f7817 	ldw	r4,-544(fp)
 801bc7c:	20c7883a 	add	r3,r4,r3
 801bc80:	18c00003 	ldbu	r3,0(r3)
 801bc84:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 801bc88:	e0bf8b17 	ldw	r2,-468(fp)
 801bc8c:	10800184 	addi	r2,r2,6
 801bc90:	e13f8517 	ldw	r4,-492(fp)
 801bc94:	e0ff8a17 	ldw	r3,-472(fp)
 801bc98:	20c7883a 	add	r3,r4,r3
 801bc9c:	1807d4ba 	srai	r3,r3,18
 801bca0:	18c0ffcc 	andi	r3,r3,1023
 801bca4:	e13f7817 	ldw	r4,-544(fp)
 801bca8:	20c7883a 	add	r3,r4,r3
 801bcac:	18c00003 	ldbu	r3,0(r3)
 801bcb0:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 801bcb4:	e0bf8b17 	ldw	r2,-468(fp)
 801bcb8:	108001c4 	addi	r2,r2,7
 801bcbc:	e13f8517 	ldw	r4,-492(fp)
 801bcc0:	e0ff8a17 	ldw	r3,-472(fp)
 801bcc4:	20c7c83a 	sub	r3,r4,r3
 801bcc8:	1807d4ba 	srai	r3,r3,18
 801bccc:	18c0ffcc 	andi	r3,r3,1023
 801bcd0:	e13f7817 	ldw	r4,-544(fp)
 801bcd4:	20c7883a 	add	r3,r4,r3
 801bcd8:	18c00003 	ldbu	r3,0(r3)
 801bcdc:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 8;		/* advance pointer to next row */
 801bce0:	e0bf7617 	ldw	r2,-552(fp)
 801bce4:	10800804 	addi	r2,r2,32
 801bce8:	e0bf7615 	stw	r2,-552(fp)
	}

	/* Pass 2: process 14 rows from work array, store into output array. */

	wsptr = workspace;
	for (ctr = 0; ctr < 14; ctr++) {
 801bcec:	e0bf7717 	ldw	r2,-548(fp)
 801bcf0:	10800044 	addi	r2,r2,1
 801bcf4:	e0bf7715 	stw	r2,-548(fp)
 801bcf8:	e0bf7717 	ldw	r2,-548(fp)
 801bcfc:	10800390 	cmplti	r2,r2,14
 801bd00:	103e681e 	bne	r2,zero,801b6a4 <jpeg_idct_14x14+0x708>
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 8;		/* advance pointer to next row */
	}
}
 801bd04:	e037883a 	mov	sp,fp
 801bd08:	dfc00217 	ldw	ra,8(sp)
 801bd0c:	df000117 	ldw	fp,4(sp)
 801bd10:	dc000017 	ldw	r16,0(sp)
 801bd14:	dec00304 	addi	sp,sp,12
 801bd18:	f800283a 	ret

0801bd1c <jpeg_idct_15x15>:

GLOBAL(void)
	jpeg_idct_15x15 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801bd1c:	deff6904 	addi	sp,sp,-604
 801bd20:	dfc09615 	stw	ra,600(sp)
 801bd24:	df009515 	stw	fp,596(sp)
 801bd28:	df009504 	addi	fp,sp,596
 801bd2c:	e13ffc15 	stw	r4,-16(fp)
 801bd30:	e17ffd15 	stw	r5,-12(fp)
 801bd34:	e1bffe15 	stw	r6,-8(fp)
 801bd38:	e1ffff15 	stw	r7,-4(fp)
	INT32 z1, z2, z3, z4;
	JCOEFPTR inptr;
	ISLOW_MULT_TYPE * quantptr;
	int * wsptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801bd3c:	e0bffc17 	ldw	r2,-16(fp)
 801bd40:	10804917 	ldw	r2,292(r2)
 801bd44:	10802004 	addi	r2,r2,128
 801bd48:	e0bf6f15 	stw	r2,-580(fp)
	int workspace[8*15];	/* buffers data between passes */
	SHIFT_TEMPS

		/* Pass 1: process columns from input, store into work array. */

		inptr = coef_block;
 801bd4c:	e0bffe17 	ldw	r2,-8(fp)
 801bd50:	e0bf6b15 	stw	r2,-596(fp)
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801bd54:	e0bffd17 	ldw	r2,-12(fp)
 801bd58:	10801517 	ldw	r2,84(r2)
 801bd5c:	e0bf6c15 	stw	r2,-592(fp)
	wsptr = workspace;
 801bd60:	e0bf8404 	addi	r2,fp,-496
 801bd64:	e0bf6d15 	stw	r2,-588(fp)
	for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801bd68:	e03f6e15 	stw	zero,-584(fp)
 801bd6c:	0001b506 	br	801c444 <jpeg_idct_15x15+0x728>
		/* Even part */

		z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801bd70:	e0bf6b17 	ldw	r2,-596(fp)
 801bd74:	1080000b 	ldhu	r2,0(r2)
 801bd78:	10ffffcc 	andi	r3,r2,65535
 801bd7c:	18e0001c 	xori	r3,r3,32768
 801bd80:	18e00004 	addi	r3,r3,-32768
 801bd84:	e0bf6c17 	ldw	r2,-592(fp)
 801bd88:	10800017 	ldw	r2,0(r2)
 801bd8c:	1809883a 	mov	r4,r3
 801bd90:	100b883a 	mov	r5,r2
 801bd94:	802c2180 	call	802c218 <__mulsi3>
 801bd98:	e0bf7015 	stw	r2,-576(fp)
		z1 <<= CONST_BITS;
 801bd9c:	e0bf7017 	ldw	r2,-576(fp)
 801bda0:	1004937a 	slli	r2,r2,13
 801bda4:	e0bf7015 	stw	r2,-576(fp)
		/* Add fudge factor here for final descale. */
		z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 801bda8:	e0bf7017 	ldw	r2,-576(fp)
 801bdac:	10810004 	addi	r2,r2,1024
 801bdb0:	e0bf7015 	stw	r2,-576(fp)

		z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801bdb4:	e0bf6b17 	ldw	r2,-596(fp)
 801bdb8:	10800804 	addi	r2,r2,32
 801bdbc:	1080000b 	ldhu	r2,0(r2)
 801bdc0:	10ffffcc 	andi	r3,r2,65535
 801bdc4:	18e0001c 	xori	r3,r3,32768
 801bdc8:	18e00004 	addi	r3,r3,-32768
 801bdcc:	e0bf6c17 	ldw	r2,-592(fp)
 801bdd0:	10801004 	addi	r2,r2,64
 801bdd4:	10800017 	ldw	r2,0(r2)
 801bdd8:	1809883a 	mov	r4,r3
 801bddc:	100b883a 	mov	r5,r2
 801bde0:	802c2180 	call	802c218 <__mulsi3>
 801bde4:	e0bf7115 	stw	r2,-572(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801bde8:	e0bf6b17 	ldw	r2,-596(fp)
 801bdec:	10801004 	addi	r2,r2,64
 801bdf0:	1080000b 	ldhu	r2,0(r2)
 801bdf4:	10ffffcc 	andi	r3,r2,65535
 801bdf8:	18e0001c 	xori	r3,r3,32768
 801bdfc:	18e00004 	addi	r3,r3,-32768
 801be00:	e0bf6c17 	ldw	r2,-592(fp)
 801be04:	10802004 	addi	r2,r2,128
 801be08:	10800017 	ldw	r2,0(r2)
 801be0c:	1809883a 	mov	r4,r3
 801be10:	100b883a 	mov	r5,r2
 801be14:	802c2180 	call	802c218 <__mulsi3>
 801be18:	e0bf7215 	stw	r2,-568(fp)
		z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801be1c:	e0bf6b17 	ldw	r2,-596(fp)
 801be20:	10801804 	addi	r2,r2,96
 801be24:	1080000b 	ldhu	r2,0(r2)
 801be28:	10ffffcc 	andi	r3,r2,65535
 801be2c:	18e0001c 	xori	r3,r3,32768
 801be30:	18e00004 	addi	r3,r3,-32768
 801be34:	e0bf6c17 	ldw	r2,-592(fp)
 801be38:	10803004 	addi	r2,r2,192
 801be3c:	10800017 	ldw	r2,0(r2)
 801be40:	1809883a 	mov	r4,r3
 801be44:	100b883a 	mov	r5,r2
 801be48:	802c2180 	call	802c218 <__mulsi3>
 801be4c:	e0bf7315 	stw	r2,-564(fp)

		tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 801be50:	e13f7317 	ldw	r4,-564(fp)
 801be54:	01437f04 	movi	r5,3580
 801be58:	802c2180 	call	802c218 <__mulsi3>
 801be5c:	e0bf7415 	stw	r2,-560(fp)
		tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
 801be60:	e13f7317 	ldw	r4,-564(fp)
 801be64:	01492744 	movi	r5,9373
 801be68:	802c2180 	call	802c218 <__mulsi3>
 801be6c:	e0bf7515 	stw	r2,-556(fp)

		tmp12 = z1 - tmp10;
 801be70:	e0ff7017 	ldw	r3,-576(fp)
 801be74:	e0bf7417 	ldw	r2,-560(fp)
 801be78:	1885c83a 	sub	r2,r3,r2
 801be7c:	e0bf7615 	stw	r2,-552(fp)
		tmp13 = z1 + tmp11;
 801be80:	e0ff7017 	ldw	r3,-576(fp)
 801be84:	e0bf7517 	ldw	r2,-556(fp)
 801be88:	1885883a 	add	r2,r3,r2
 801be8c:	e0bf7715 	stw	r2,-548(fp)
		z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 801be90:	e0ff7517 	ldw	r3,-556(fp)
 801be94:	e0bf7417 	ldw	r2,-560(fp)
 801be98:	1885c83a 	sub	r2,r3,r2
 801be9c:	1085883a 	add	r2,r2,r2
 801bea0:	e0ff7017 	ldw	r3,-576(fp)
 801bea4:	1885c83a 	sub	r2,r3,r2
 801bea8:	e0bf7015 	stw	r2,-576(fp)

		z4 = z2 - z3;
 801beac:	e0ff7117 	ldw	r3,-572(fp)
 801beb0:	e0bf7217 	ldw	r2,-568(fp)
 801beb4:	1885c83a 	sub	r2,r3,r2
 801beb8:	e0bf7315 	stw	r2,-564(fp)
		z3 += z2;
 801bebc:	e0ff7217 	ldw	r3,-568(fp)
 801bec0:	e0bf7117 	ldw	r2,-572(fp)
 801bec4:	1885883a 	add	r2,r3,r2
 801bec8:	e0bf7215 	stw	r2,-568(fp)
		tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 801becc:	e13f7217 	ldw	r4,-568(fp)
 801bed0:	014ab384 	movi	r5,10958
 801bed4:	802c2180 	call	802c218 <__mulsi3>
 801bed8:	e0bf7415 	stw	r2,-560(fp)
		tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 801bedc:	e13f7317 	ldw	r4,-564(fp)
 801bee0:	01405d84 	movi	r5,374
 801bee4:	802c2180 	call	802c218 <__mulsi3>
 801bee8:	e0bf7515 	stw	r2,-556(fp)
		z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 801beec:	e13f7117 	ldw	r4,-572(fp)
 801bef0:	014b84c4 	movi	r5,11795
 801bef4:	802c2180 	call	802c218 <__mulsi3>
 801bef8:	e0bf7115 	stw	r2,-572(fp)

		tmp20 = tmp13 + tmp10 + tmp11;
 801befc:	e0ff7717 	ldw	r3,-548(fp)
 801bf00:	e0bf7417 	ldw	r2,-560(fp)
 801bf04:	1887883a 	add	r3,r3,r2
 801bf08:	e0bf7517 	ldw	r2,-556(fp)
 801bf0c:	1885883a 	add	r2,r3,r2
 801bf10:	e0bf7815 	stw	r2,-544(fp)
		tmp23 = tmp12 - tmp10 + tmp11 + z2;
 801bf14:	e0ff7617 	ldw	r3,-552(fp)
 801bf18:	e0bf7417 	ldw	r2,-560(fp)
 801bf1c:	1887c83a 	sub	r3,r3,r2
 801bf20:	e0bf7517 	ldw	r2,-556(fp)
 801bf24:	1887883a 	add	r3,r3,r2
 801bf28:	e0bf7117 	ldw	r2,-572(fp)
 801bf2c:	1885883a 	add	r2,r3,r2
 801bf30:	e0bf7915 	stw	r2,-540(fp)

		tmp10 = MULTIPLY(z3, FIX(0.547059574)); /* (c8+c14)/2 */
 801bf34:	e13f7217 	ldw	r4,-568(fp)
 801bf38:	01446084 	movi	r5,4482
 801bf3c:	802c2180 	call	802c218 <__mulsi3>
 801bf40:	e0bf7415 	stw	r2,-560(fp)
		tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 801bf44:	e13f7317 	ldw	r4,-564(fp)
 801bf48:	014331c4 	movi	r5,3271
 801bf4c:	802c2180 	call	802c218 <__mulsi3>
 801bf50:	e0bf7515 	stw	r2,-556(fp)

		tmp25 = tmp13 - tmp10 - tmp11;
 801bf54:	e0ff7717 	ldw	r3,-548(fp)
 801bf58:	e0bf7417 	ldw	r2,-560(fp)
 801bf5c:	1887c83a 	sub	r3,r3,r2
 801bf60:	e0bf7517 	ldw	r2,-556(fp)
 801bf64:	1885c83a 	sub	r2,r3,r2
 801bf68:	e0bf7a15 	stw	r2,-536(fp)
		tmp26 = tmp12 + tmp10 - tmp11 - z2;
 801bf6c:	e0ff7617 	ldw	r3,-552(fp)
 801bf70:	e0bf7417 	ldw	r2,-560(fp)
 801bf74:	1887883a 	add	r3,r3,r2
 801bf78:	e0bf7517 	ldw	r2,-556(fp)
 801bf7c:	1887c83a 	sub	r3,r3,r2
 801bf80:	e0bf7117 	ldw	r2,-572(fp)
 801bf84:	1885c83a 	sub	r2,r3,r2
 801bf88:	e0bf7b15 	stw	r2,-532(fp)

		tmp10 = MULTIPLY(z3, FIX(0.790569415)); /* (c6+c12)/2 */
 801bf8c:	e13f7217 	ldw	r4,-568(fp)
 801bf90:	01465304 	movi	r5,6476
 801bf94:	802c2180 	call	802c218 <__mulsi3>
 801bf98:	e0bf7415 	stw	r2,-560(fp)
		tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 801bf9c:	e13f7317 	ldw	r4,-564(fp)
 801bfa0:	0142d404 	movi	r5,2896
 801bfa4:	802c2180 	call	802c218 <__mulsi3>
 801bfa8:	e0bf7515 	stw	r2,-556(fp)

		tmp21 = tmp12 + tmp10 + tmp11;
 801bfac:	e0ff7617 	ldw	r3,-552(fp)
 801bfb0:	e0bf7417 	ldw	r2,-560(fp)
 801bfb4:	1887883a 	add	r3,r3,r2
 801bfb8:	e0bf7517 	ldw	r2,-556(fp)
 801bfbc:	1885883a 	add	r2,r3,r2
 801bfc0:	e0bf7c15 	stw	r2,-528(fp)
		tmp24 = tmp13 - tmp10 + tmp11;
 801bfc4:	e0ff7717 	ldw	r3,-548(fp)
 801bfc8:	e0bf7417 	ldw	r2,-560(fp)
 801bfcc:	1887c83a 	sub	r3,r3,r2
 801bfd0:	e0bf7517 	ldw	r2,-556(fp)
 801bfd4:	1885883a 	add	r2,r3,r2
 801bfd8:	e0bf7d15 	stw	r2,-524(fp)
		tmp11 += tmp11;
 801bfdc:	e0ff7517 	ldw	r3,-556(fp)
 801bfe0:	e0bf7517 	ldw	r2,-556(fp)
 801bfe4:	1885883a 	add	r2,r3,r2
 801bfe8:	e0bf7515 	stw	r2,-556(fp)
		tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
 801bfec:	e0ff7017 	ldw	r3,-576(fp)
 801bff0:	e0bf7517 	ldw	r2,-556(fp)
 801bff4:	1885883a 	add	r2,r3,r2
 801bff8:	e0bf7e15 	stw	r2,-520(fp)
		tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 801bffc:	e0ff7017 	ldw	r3,-576(fp)
 801c000:	e0bf7517 	ldw	r2,-556(fp)
 801c004:	1887c83a 	sub	r3,r3,r2
 801c008:	e0bf7517 	ldw	r2,-556(fp)
 801c00c:	1885c83a 	sub	r2,r3,r2
 801c010:	e0bf7f15 	stw	r2,-516(fp)

		/* Odd part */

		z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801c014:	e0bf6b17 	ldw	r2,-596(fp)
 801c018:	10800404 	addi	r2,r2,16
 801c01c:	1080000b 	ldhu	r2,0(r2)
 801c020:	10ffffcc 	andi	r3,r2,65535
 801c024:	18e0001c 	xori	r3,r3,32768
 801c028:	18e00004 	addi	r3,r3,-32768
 801c02c:	e0bf6c17 	ldw	r2,-592(fp)
 801c030:	10800804 	addi	r2,r2,32
 801c034:	10800017 	ldw	r2,0(r2)
 801c038:	1809883a 	mov	r4,r3
 801c03c:	100b883a 	mov	r5,r2
 801c040:	802c2180 	call	802c218 <__mulsi3>
 801c044:	e0bf7015 	stw	r2,-576(fp)
		z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801c048:	e0bf6b17 	ldw	r2,-596(fp)
 801c04c:	10800c04 	addi	r2,r2,48
 801c050:	1080000b 	ldhu	r2,0(r2)
 801c054:	10ffffcc 	andi	r3,r2,65535
 801c058:	18e0001c 	xori	r3,r3,32768
 801c05c:	18e00004 	addi	r3,r3,-32768
 801c060:	e0bf6c17 	ldw	r2,-592(fp)
 801c064:	10801804 	addi	r2,r2,96
 801c068:	10800017 	ldw	r2,0(r2)
 801c06c:	1809883a 	mov	r4,r3
 801c070:	100b883a 	mov	r5,r2
 801c074:	802c2180 	call	802c218 <__mulsi3>
 801c078:	e0bf7115 	stw	r2,-572(fp)
		z4 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801c07c:	e0bf6b17 	ldw	r2,-596(fp)
 801c080:	10801404 	addi	r2,r2,80
 801c084:	1080000b 	ldhu	r2,0(r2)
 801c088:	10ffffcc 	andi	r3,r2,65535
 801c08c:	18e0001c 	xori	r3,r3,32768
 801c090:	18e00004 	addi	r3,r3,-32768
 801c094:	e0bf6c17 	ldw	r2,-592(fp)
 801c098:	10802804 	addi	r2,r2,160
 801c09c:	10800017 	ldw	r2,0(r2)
 801c0a0:	1809883a 	mov	r4,r3
 801c0a4:	100b883a 	mov	r5,r2
 801c0a8:	802c2180 	call	802c218 <__mulsi3>
 801c0ac:	e0bf7315 	stw	r2,-564(fp)
		z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 801c0b0:	e13f7317 	ldw	r4,-564(fp)
 801c0b4:	0149cc44 	movi	r5,10033
 801c0b8:	802c2180 	call	802c218 <__mulsi3>
 801c0bc:	e0bf7215 	stw	r2,-568(fp)
		z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801c0c0:	e0bf6b17 	ldw	r2,-596(fp)
 801c0c4:	10801c04 	addi	r2,r2,112
 801c0c8:	1080000b 	ldhu	r2,0(r2)
 801c0cc:	10ffffcc 	andi	r3,r2,65535
 801c0d0:	18e0001c 	xori	r3,r3,32768
 801c0d4:	18e00004 	addi	r3,r3,-32768
 801c0d8:	e0bf6c17 	ldw	r2,-592(fp)
 801c0dc:	10803804 	addi	r2,r2,224
 801c0e0:	10800017 	ldw	r2,0(r2)
 801c0e4:	1809883a 	mov	r4,r3
 801c0e8:	100b883a 	mov	r5,r2
 801c0ec:	802c2180 	call	802c218 <__mulsi3>
 801c0f0:	e0bf7315 	stw	r2,-564(fp)

		tmp13 = z2 - z4;
 801c0f4:	e0ff7117 	ldw	r3,-572(fp)
 801c0f8:	e0bf7317 	ldw	r2,-564(fp)
 801c0fc:	1885c83a 	sub	r2,r3,r2
 801c100:	e0bf7715 	stw	r2,-548(fp)
		tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 801c104:	e0ff7017 	ldw	r3,-576(fp)
 801c108:	e0bf7717 	ldw	r2,-548(fp)
 801c10c:	1885883a 	add	r2,r3,r2
 801c110:	1009883a 	mov	r4,r2
 801c114:	0146a684 	movi	r5,6810
 801c118:	802c2180 	call	802c218 <__mulsi3>
 801c11c:	e0bf8015 	stw	r2,-512(fp)
		tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 801c120:	e13f7017 	ldw	r4,-576(fp)
 801c124:	01441c44 	movi	r5,4209
 801c128:	802c2180 	call	802c218 <__mulsi3>
 801c12c:	1007883a 	mov	r3,r2
 801c130:	e0bf8017 	ldw	r2,-512(fp)
 801c134:	1885883a 	add	r2,r3,r2
 801c138:	e0bf7515 	stw	r2,-556(fp)
		tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 801c13c:	e13f7717 	ldw	r4,-548(fp)
 801c140:	016e9704 	movi	r5,-17828
 801c144:	802c2180 	call	802c218 <__mulsi3>
 801c148:	1007883a 	mov	r3,r2
 801c14c:	e0bf8017 	ldw	r2,-512(fp)
 801c150:	1885883a 	add	r2,r3,r2
 801c154:	e0bf8115 	stw	r2,-508(fp)

		tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 801c158:	e13f7117 	ldw	r4,-572(fp)
 801c15c:	01795984 	movi	r5,-6810
 801c160:	802c2180 	call	802c218 <__mulsi3>
 801c164:	e0bf7715 	stw	r2,-548(fp)
		tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
 801c168:	e13f7117 	ldw	r4,-572(fp)
 801c16c:	01753d84 	movi	r5,-11018
 801c170:	802c2180 	call	802c218 <__mulsi3>
 801c174:	e0bf8015 	stw	r2,-512(fp)
		z2 = z1 - z4;
 801c178:	e0ff7017 	ldw	r3,-576(fp)
 801c17c:	e0bf7317 	ldw	r2,-564(fp)
 801c180:	1885c83a 	sub	r2,r3,r2
 801c184:	e0bf7115 	stw	r2,-572(fp)
		tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
 801c188:	e13f7117 	ldw	r4,-572(fp)
 801c18c:	014b4084 	movi	r5,11522
 801c190:	802c2180 	call	802c218 <__mulsi3>
 801c194:	1007883a 	mov	r3,r2
 801c198:	e0bf7217 	ldw	r2,-568(fp)
 801c19c:	1885883a 	add	r2,r3,r2
 801c1a0:	e0bf7615 	stw	r2,-552(fp)

		tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 801c1a4:	e13f7317 	ldw	r4,-564(fp)
 801c1a8:	0153a8c4 	movi	r5,20131
 801c1ac:	802c2180 	call	802c218 <__mulsi3>
 801c1b0:	1007883a 	mov	r3,r2
 801c1b4:	e0bf7617 	ldw	r2,-552(fp)
 801c1b8:	1887883a 	add	r3,r3,r2
 801c1bc:	e0bf8017 	ldw	r2,-512(fp)
 801c1c0:	1885c83a 	sub	r2,r3,r2
 801c1c4:	e0bf7415 	stw	r2,-560(fp)
		tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 801c1c8:	e13f7017 	ldw	r4,-576(fp)
 801c1cc:	017719c4 	movi	r5,-9113
 801c1d0:	802c2180 	call	802c218 <__mulsi3>
 801c1d4:	1007883a 	mov	r3,r2
 801c1d8:	e0bf7617 	ldw	r2,-552(fp)
 801c1dc:	1887883a 	add	r3,r3,r2
 801c1e0:	e0bf7717 	ldw	r2,-548(fp)
 801c1e4:	1885883a 	add	r2,r3,r2
 801c1e8:	e0bf8215 	stw	r2,-504(fp)
		tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 801c1ec:	e13f7117 	ldw	r4,-572(fp)
 801c1f0:	0149cc44 	movi	r5,10033
 801c1f4:	802c2180 	call	802c218 <__mulsi3>
 801c1f8:	1007883a 	mov	r3,r2
 801c1fc:	e0bf7217 	ldw	r2,-568(fp)
 801c200:	1885c83a 	sub	r2,r3,r2
 801c204:	e0bf7615 	stw	r2,-552(fp)
		z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 801c208:	e0ff7017 	ldw	r3,-576(fp)
 801c20c:	e0bf7317 	ldw	r2,-564(fp)
 801c210:	1885883a 	add	r2,r3,r2
 801c214:	1009883a 	mov	r4,r2
 801c218:	01449a04 	movi	r5,4712
 801c21c:	802c2180 	call	802c218 <__mulsi3>
 801c220:	e0bf7115 	stw	r2,-572(fp)
		tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 801c224:	e13f7017 	ldw	r4,-576(fp)
 801c228:	0143ce44 	movi	r5,3897
 801c22c:	802c2180 	call	802c218 <__mulsi3>
 801c230:	1007883a 	mov	r3,r2
 801c234:	e0bf7117 	ldw	r2,-572(fp)
 801c238:	1887883a 	add	r3,r3,r2
 801c23c:	e0bf7217 	ldw	r2,-568(fp)
 801c240:	1885c83a 	sub	r2,r3,r2
 801c244:	e0ff7717 	ldw	r3,-548(fp)
 801c248:	1885883a 	add	r2,r3,r2
 801c24c:	e0bf7715 	stw	r2,-548(fp)
		tmp15 += z2 - MULTIPLY(z4, FIX(0.869244010)) + z3;      /* c11+c13 */
 801c250:	e13f7317 	ldw	r4,-564(fp)
 801c254:	01790bc4 	movi	r5,-7121
 801c258:	802c2180 	call	802c218 <__mulsi3>
 801c25c:	1007883a 	mov	r3,r2
 801c260:	e0bf7117 	ldw	r2,-572(fp)
 801c264:	1887883a 	add	r3,r3,r2
 801c268:	e0bf7217 	ldw	r2,-568(fp)
 801c26c:	1885883a 	add	r2,r3,r2
 801c270:	e0ff8017 	ldw	r3,-512(fp)
 801c274:	1885883a 	add	r2,r3,r2
 801c278:	e0bf8015 	stw	r2,-512(fp)

		/* Final output stage */

		wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801c27c:	e0ff7817 	ldw	r3,-544(fp)
 801c280:	e0bf7417 	ldw	r2,-560(fp)
 801c284:	1885883a 	add	r2,r3,r2
 801c288:	1007d2fa 	srai	r3,r2,11
 801c28c:	e0bf6d17 	ldw	r2,-588(fp)
 801c290:	10c00015 	stw	r3,0(r2)
		wsptr[8*14] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801c294:	e0bf6d17 	ldw	r2,-588(fp)
 801c298:	10807004 	addi	r2,r2,448
 801c29c:	e13f7817 	ldw	r4,-544(fp)
 801c2a0:	e0ff7417 	ldw	r3,-560(fp)
 801c2a4:	20c7c83a 	sub	r3,r4,r3
 801c2a8:	1807d2fa 	srai	r3,r3,11
 801c2ac:	10c00015 	stw	r3,0(r2)
		wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801c2b0:	e0bf6d17 	ldw	r2,-588(fp)
 801c2b4:	10800804 	addi	r2,r2,32
 801c2b8:	e13f7c17 	ldw	r4,-528(fp)
 801c2bc:	e0ff7517 	ldw	r3,-556(fp)
 801c2c0:	20c7883a 	add	r3,r4,r3
 801c2c4:	1807d2fa 	srai	r3,r3,11
 801c2c8:	10c00015 	stw	r3,0(r2)
		wsptr[8*13] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801c2cc:	e0bf6d17 	ldw	r2,-588(fp)
 801c2d0:	10806804 	addi	r2,r2,416
 801c2d4:	e13f7c17 	ldw	r4,-528(fp)
 801c2d8:	e0ff7517 	ldw	r3,-556(fp)
 801c2dc:	20c7c83a 	sub	r3,r4,r3
 801c2e0:	1807d2fa 	srai	r3,r3,11
 801c2e4:	10c00015 	stw	r3,0(r2)
		wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801c2e8:	e0bf6d17 	ldw	r2,-588(fp)
 801c2ec:	10801004 	addi	r2,r2,64
 801c2f0:	e13f7e17 	ldw	r4,-520(fp)
 801c2f4:	e0ff7617 	ldw	r3,-552(fp)
 801c2f8:	20c7883a 	add	r3,r4,r3
 801c2fc:	1807d2fa 	srai	r3,r3,11
 801c300:	10c00015 	stw	r3,0(r2)
		wsptr[8*12] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801c304:	e0bf6d17 	ldw	r2,-588(fp)
 801c308:	10806004 	addi	r2,r2,384
 801c30c:	e13f7e17 	ldw	r4,-520(fp)
 801c310:	e0ff7617 	ldw	r3,-552(fp)
 801c314:	20c7c83a 	sub	r3,r4,r3
 801c318:	1807d2fa 	srai	r3,r3,11
 801c31c:	10c00015 	stw	r3,0(r2)
		wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 801c320:	e0bf6d17 	ldw	r2,-588(fp)
 801c324:	10801804 	addi	r2,r2,96
 801c328:	e13f7917 	ldw	r4,-540(fp)
 801c32c:	e0ff7717 	ldw	r3,-548(fp)
 801c330:	20c7883a 	add	r3,r4,r3
 801c334:	1807d2fa 	srai	r3,r3,11
 801c338:	10c00015 	stw	r3,0(r2)
		wsptr[8*11] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 801c33c:	e0bf6d17 	ldw	r2,-588(fp)
 801c340:	10805804 	addi	r2,r2,352
 801c344:	e13f7917 	ldw	r4,-540(fp)
 801c348:	e0ff7717 	ldw	r3,-548(fp)
 801c34c:	20c7c83a 	sub	r3,r4,r3
 801c350:	1807d2fa 	srai	r3,r3,11
 801c354:	10c00015 	stw	r3,0(r2)
		wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 801c358:	e0bf6d17 	ldw	r2,-588(fp)
 801c35c:	10802004 	addi	r2,r2,128
 801c360:	e13f7d17 	ldw	r4,-524(fp)
 801c364:	e0ff8117 	ldw	r3,-508(fp)
 801c368:	20c7883a 	add	r3,r4,r3
 801c36c:	1807d2fa 	srai	r3,r3,11
 801c370:	10c00015 	stw	r3,0(r2)
		wsptr[8*10] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 801c374:	e0bf6d17 	ldw	r2,-588(fp)
 801c378:	10805004 	addi	r2,r2,320
 801c37c:	e13f7d17 	ldw	r4,-524(fp)
 801c380:	e0ff8117 	ldw	r3,-508(fp)
 801c384:	20c7c83a 	sub	r3,r4,r3
 801c388:	1807d2fa 	srai	r3,r3,11
 801c38c:	10c00015 	stw	r3,0(r2)
		wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 801c390:	e0bf6d17 	ldw	r2,-588(fp)
 801c394:	10802804 	addi	r2,r2,160
 801c398:	e13f7a17 	ldw	r4,-536(fp)
 801c39c:	e0ff8017 	ldw	r3,-512(fp)
 801c3a0:	20c7883a 	add	r3,r4,r3
 801c3a4:	1807d2fa 	srai	r3,r3,11
 801c3a8:	10c00015 	stw	r3,0(r2)
		wsptr[8*9]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 801c3ac:	e0bf6d17 	ldw	r2,-588(fp)
 801c3b0:	10804804 	addi	r2,r2,288
 801c3b4:	e13f7a17 	ldw	r4,-536(fp)
 801c3b8:	e0ff8017 	ldw	r3,-512(fp)
 801c3bc:	20c7c83a 	sub	r3,r4,r3
 801c3c0:	1807d2fa 	srai	r3,r3,11
 801c3c4:	10c00015 	stw	r3,0(r2)
		wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 801c3c8:	e0bf6d17 	ldw	r2,-588(fp)
 801c3cc:	10803004 	addi	r2,r2,192
 801c3d0:	e13f7b17 	ldw	r4,-532(fp)
 801c3d4:	e0ff8217 	ldw	r3,-504(fp)
 801c3d8:	20c7883a 	add	r3,r4,r3
 801c3dc:	1807d2fa 	srai	r3,r3,11
 801c3e0:	10c00015 	stw	r3,0(r2)
		wsptr[8*8]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 801c3e4:	e0bf6d17 	ldw	r2,-588(fp)
 801c3e8:	10804004 	addi	r2,r2,256
 801c3ec:	e13f7b17 	ldw	r4,-532(fp)
 801c3f0:	e0ff8217 	ldw	r3,-504(fp)
 801c3f4:	20c7c83a 	sub	r3,r4,r3
 801c3f8:	1807d2fa 	srai	r3,r3,11
 801c3fc:	10c00015 	stw	r3,0(r2)
		wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27, CONST_BITS-PASS1_BITS);
 801c400:	e0bf6d17 	ldw	r2,-588(fp)
 801c404:	10803804 	addi	r2,r2,224
 801c408:	e0ff7f17 	ldw	r3,-516(fp)
 801c40c:	1807d2fa 	srai	r3,r3,11
 801c410:	10c00015 	stw	r3,0(r2)
		/* Pass 1: process columns from input, store into work array. */

		inptr = coef_block;
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
	wsptr = workspace;
	for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801c414:	e0bf6e17 	ldw	r2,-584(fp)
 801c418:	10800044 	addi	r2,r2,1
 801c41c:	e0bf6e15 	stw	r2,-584(fp)
 801c420:	e0bf6b17 	ldw	r2,-596(fp)
 801c424:	10800084 	addi	r2,r2,2
 801c428:	e0bf6b15 	stw	r2,-596(fp)
 801c42c:	e0bf6c17 	ldw	r2,-592(fp)
 801c430:	10800104 	addi	r2,r2,4
 801c434:	e0bf6c15 	stw	r2,-592(fp)
 801c438:	e0bf6d17 	ldw	r2,-588(fp)
 801c43c:	10800104 	addi	r2,r2,4
 801c440:	e0bf6d15 	stw	r2,-588(fp)
 801c444:	e0bf6e17 	ldw	r2,-584(fp)
 801c448:	10800210 	cmplti	r2,r2,8
 801c44c:	103e481e 	bne	r2,zero,801bd70 <jpeg_idct_15x15+0x54>
		wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27, CONST_BITS-PASS1_BITS);
	}

	/* Pass 2: process 15 rows from work array, store into output array. */

	wsptr = workspace;
 801c450:	e0bf8404 	addi	r2,fp,-496
 801c454:	e0bf6d15 	stw	r2,-588(fp)
	for (ctr = 0; ctr < 15; ctr++) {
 801c458:	e03f6e15 	stw	zero,-584(fp)
 801c45c:	0001ab06 	br	801cb0c <jpeg_idct_15x15+0xdf0>
		outptr = output_buf[ctr] + output_col;
 801c460:	e0bf6e17 	ldw	r2,-584(fp)
 801c464:	1085883a 	add	r2,r2,r2
 801c468:	1085883a 	add	r2,r2,r2
 801c46c:	e0ffff17 	ldw	r3,-4(fp)
 801c470:	1885883a 	add	r2,r3,r2
 801c474:	10c00017 	ldw	r3,0(r2)
 801c478:	e0800217 	ldw	r2,8(fp)
 801c47c:	1885883a 	add	r2,r3,r2
 801c480:	e0bf8315 	stw	r2,-500(fp)

		/* Even part */

		/* Add fudge factor here for final descale. */
		z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801c484:	e0bf6d17 	ldw	r2,-588(fp)
 801c488:	10800017 	ldw	r2,0(r2)
 801c48c:	10800404 	addi	r2,r2,16
 801c490:	e0bf7015 	stw	r2,-576(fp)
		z1 <<= CONST_BITS;
 801c494:	e0bf7017 	ldw	r2,-576(fp)
 801c498:	1004937a 	slli	r2,r2,13
 801c49c:	e0bf7015 	stw	r2,-576(fp)

		z2 = (INT32) wsptr[2];
 801c4a0:	e0bf6d17 	ldw	r2,-588(fp)
 801c4a4:	10800204 	addi	r2,r2,8
 801c4a8:	10800017 	ldw	r2,0(r2)
 801c4ac:	e0bf7115 	stw	r2,-572(fp)
		z3 = (INT32) wsptr[4];
 801c4b0:	e0bf6d17 	ldw	r2,-588(fp)
 801c4b4:	10800404 	addi	r2,r2,16
 801c4b8:	10800017 	ldw	r2,0(r2)
 801c4bc:	e0bf7215 	stw	r2,-568(fp)
		z4 = (INT32) wsptr[6];
 801c4c0:	e0bf6d17 	ldw	r2,-588(fp)
 801c4c4:	10800604 	addi	r2,r2,24
 801c4c8:	10800017 	ldw	r2,0(r2)
 801c4cc:	e0bf7315 	stw	r2,-564(fp)

		tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 801c4d0:	e13f7317 	ldw	r4,-564(fp)
 801c4d4:	01437f04 	movi	r5,3580
 801c4d8:	802c2180 	call	802c218 <__mulsi3>
 801c4dc:	e0bf7415 	stw	r2,-560(fp)
		tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
 801c4e0:	e13f7317 	ldw	r4,-564(fp)
 801c4e4:	01492744 	movi	r5,9373
 801c4e8:	802c2180 	call	802c218 <__mulsi3>
 801c4ec:	e0bf7515 	stw	r2,-556(fp)

		tmp12 = z1 - tmp10;
 801c4f0:	e0ff7017 	ldw	r3,-576(fp)
 801c4f4:	e0bf7417 	ldw	r2,-560(fp)
 801c4f8:	1885c83a 	sub	r2,r3,r2
 801c4fc:	e0bf7615 	stw	r2,-552(fp)
		tmp13 = z1 + tmp11;
 801c500:	e0ff7017 	ldw	r3,-576(fp)
 801c504:	e0bf7517 	ldw	r2,-556(fp)
 801c508:	1885883a 	add	r2,r3,r2
 801c50c:	e0bf7715 	stw	r2,-548(fp)
		z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 801c510:	e0ff7517 	ldw	r3,-556(fp)
 801c514:	e0bf7417 	ldw	r2,-560(fp)
 801c518:	1885c83a 	sub	r2,r3,r2
 801c51c:	1085883a 	add	r2,r2,r2
 801c520:	e0ff7017 	ldw	r3,-576(fp)
 801c524:	1885c83a 	sub	r2,r3,r2
 801c528:	e0bf7015 	stw	r2,-576(fp)

		z4 = z2 - z3;
 801c52c:	e0ff7117 	ldw	r3,-572(fp)
 801c530:	e0bf7217 	ldw	r2,-568(fp)
 801c534:	1885c83a 	sub	r2,r3,r2
 801c538:	e0bf7315 	stw	r2,-564(fp)
		z3 += z2;
 801c53c:	e0ff7217 	ldw	r3,-568(fp)
 801c540:	e0bf7117 	ldw	r2,-572(fp)
 801c544:	1885883a 	add	r2,r3,r2
 801c548:	e0bf7215 	stw	r2,-568(fp)
		tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 801c54c:	e13f7217 	ldw	r4,-568(fp)
 801c550:	014ab384 	movi	r5,10958
 801c554:	802c2180 	call	802c218 <__mulsi3>
 801c558:	e0bf7415 	stw	r2,-560(fp)
		tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 801c55c:	e13f7317 	ldw	r4,-564(fp)
 801c560:	01405d84 	movi	r5,374
 801c564:	802c2180 	call	802c218 <__mulsi3>
 801c568:	e0bf7515 	stw	r2,-556(fp)
		z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 801c56c:	e13f7117 	ldw	r4,-572(fp)
 801c570:	014b84c4 	movi	r5,11795
 801c574:	802c2180 	call	802c218 <__mulsi3>
 801c578:	e0bf7115 	stw	r2,-572(fp)

		tmp20 = tmp13 + tmp10 + tmp11;
 801c57c:	e0ff7717 	ldw	r3,-548(fp)
 801c580:	e0bf7417 	ldw	r2,-560(fp)
 801c584:	1887883a 	add	r3,r3,r2
 801c588:	e0bf7517 	ldw	r2,-556(fp)
 801c58c:	1885883a 	add	r2,r3,r2
 801c590:	e0bf7815 	stw	r2,-544(fp)
		tmp23 = tmp12 - tmp10 + tmp11 + z2;
 801c594:	e0ff7617 	ldw	r3,-552(fp)
 801c598:	e0bf7417 	ldw	r2,-560(fp)
 801c59c:	1887c83a 	sub	r3,r3,r2
 801c5a0:	e0bf7517 	ldw	r2,-556(fp)
 801c5a4:	1887883a 	add	r3,r3,r2
 801c5a8:	e0bf7117 	ldw	r2,-572(fp)
 801c5ac:	1885883a 	add	r2,r3,r2
 801c5b0:	e0bf7915 	stw	r2,-540(fp)

		tmp10 = MULTIPLY(z3, FIX(0.547059574)); /* (c8+c14)/2 */
 801c5b4:	e13f7217 	ldw	r4,-568(fp)
 801c5b8:	01446084 	movi	r5,4482
 801c5bc:	802c2180 	call	802c218 <__mulsi3>
 801c5c0:	e0bf7415 	stw	r2,-560(fp)
		tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 801c5c4:	e13f7317 	ldw	r4,-564(fp)
 801c5c8:	014331c4 	movi	r5,3271
 801c5cc:	802c2180 	call	802c218 <__mulsi3>
 801c5d0:	e0bf7515 	stw	r2,-556(fp)

		tmp25 = tmp13 - tmp10 - tmp11;
 801c5d4:	e0ff7717 	ldw	r3,-548(fp)
 801c5d8:	e0bf7417 	ldw	r2,-560(fp)
 801c5dc:	1887c83a 	sub	r3,r3,r2
 801c5e0:	e0bf7517 	ldw	r2,-556(fp)
 801c5e4:	1885c83a 	sub	r2,r3,r2
 801c5e8:	e0bf7a15 	stw	r2,-536(fp)
		tmp26 = tmp12 + tmp10 - tmp11 - z2;
 801c5ec:	e0ff7617 	ldw	r3,-552(fp)
 801c5f0:	e0bf7417 	ldw	r2,-560(fp)
 801c5f4:	1887883a 	add	r3,r3,r2
 801c5f8:	e0bf7517 	ldw	r2,-556(fp)
 801c5fc:	1887c83a 	sub	r3,r3,r2
 801c600:	e0bf7117 	ldw	r2,-572(fp)
 801c604:	1885c83a 	sub	r2,r3,r2
 801c608:	e0bf7b15 	stw	r2,-532(fp)

		tmp10 = MULTIPLY(z3, FIX(0.790569415)); /* (c6+c12)/2 */
 801c60c:	e13f7217 	ldw	r4,-568(fp)
 801c610:	01465304 	movi	r5,6476
 801c614:	802c2180 	call	802c218 <__mulsi3>
 801c618:	e0bf7415 	stw	r2,-560(fp)
		tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 801c61c:	e13f7317 	ldw	r4,-564(fp)
 801c620:	0142d404 	movi	r5,2896
 801c624:	802c2180 	call	802c218 <__mulsi3>
 801c628:	e0bf7515 	stw	r2,-556(fp)

		tmp21 = tmp12 + tmp10 + tmp11;
 801c62c:	e0ff7617 	ldw	r3,-552(fp)
 801c630:	e0bf7417 	ldw	r2,-560(fp)
 801c634:	1887883a 	add	r3,r3,r2
 801c638:	e0bf7517 	ldw	r2,-556(fp)
 801c63c:	1885883a 	add	r2,r3,r2
 801c640:	e0bf7c15 	stw	r2,-528(fp)
		tmp24 = tmp13 - tmp10 + tmp11;
 801c644:	e0ff7717 	ldw	r3,-548(fp)
 801c648:	e0bf7417 	ldw	r2,-560(fp)
 801c64c:	1887c83a 	sub	r3,r3,r2
 801c650:	e0bf7517 	ldw	r2,-556(fp)
 801c654:	1885883a 	add	r2,r3,r2
 801c658:	e0bf7d15 	stw	r2,-524(fp)
		tmp11 += tmp11;
 801c65c:	e0ff7517 	ldw	r3,-556(fp)
 801c660:	e0bf7517 	ldw	r2,-556(fp)
 801c664:	1885883a 	add	r2,r3,r2
 801c668:	e0bf7515 	stw	r2,-556(fp)
		tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
 801c66c:	e0ff7017 	ldw	r3,-576(fp)
 801c670:	e0bf7517 	ldw	r2,-556(fp)
 801c674:	1885883a 	add	r2,r3,r2
 801c678:	e0bf7e15 	stw	r2,-520(fp)
		tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 801c67c:	e0ff7017 	ldw	r3,-576(fp)
 801c680:	e0bf7517 	ldw	r2,-556(fp)
 801c684:	1887c83a 	sub	r3,r3,r2
 801c688:	e0bf7517 	ldw	r2,-556(fp)
 801c68c:	1885c83a 	sub	r2,r3,r2
 801c690:	e0bf7f15 	stw	r2,-516(fp)

		/* Odd part */

		z1 = (INT32) wsptr[1];
 801c694:	e0bf6d17 	ldw	r2,-588(fp)
 801c698:	10800104 	addi	r2,r2,4
 801c69c:	10800017 	ldw	r2,0(r2)
 801c6a0:	e0bf7015 	stw	r2,-576(fp)
		z2 = (INT32) wsptr[3];
 801c6a4:	e0bf6d17 	ldw	r2,-588(fp)
 801c6a8:	10800304 	addi	r2,r2,12
 801c6ac:	10800017 	ldw	r2,0(r2)
 801c6b0:	e0bf7115 	stw	r2,-572(fp)
		z4 = (INT32) wsptr[5];
 801c6b4:	e0bf6d17 	ldw	r2,-588(fp)
 801c6b8:	10800504 	addi	r2,r2,20
 801c6bc:	10800017 	ldw	r2,0(r2)
 801c6c0:	e0bf7315 	stw	r2,-564(fp)
		z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 801c6c4:	e13f7317 	ldw	r4,-564(fp)
 801c6c8:	0149cc44 	movi	r5,10033
 801c6cc:	802c2180 	call	802c218 <__mulsi3>
 801c6d0:	e0bf7215 	stw	r2,-568(fp)
		z4 = (INT32) wsptr[7];
 801c6d4:	e0bf6d17 	ldw	r2,-588(fp)
 801c6d8:	10800704 	addi	r2,r2,28
 801c6dc:	10800017 	ldw	r2,0(r2)
 801c6e0:	e0bf7315 	stw	r2,-564(fp)

		tmp13 = z2 - z4;
 801c6e4:	e0ff7117 	ldw	r3,-572(fp)
 801c6e8:	e0bf7317 	ldw	r2,-564(fp)
 801c6ec:	1885c83a 	sub	r2,r3,r2
 801c6f0:	e0bf7715 	stw	r2,-548(fp)
		tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 801c6f4:	e0ff7017 	ldw	r3,-576(fp)
 801c6f8:	e0bf7717 	ldw	r2,-548(fp)
 801c6fc:	1885883a 	add	r2,r3,r2
 801c700:	1009883a 	mov	r4,r2
 801c704:	0146a684 	movi	r5,6810
 801c708:	802c2180 	call	802c218 <__mulsi3>
 801c70c:	e0bf8015 	stw	r2,-512(fp)
		tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 801c710:	e13f7017 	ldw	r4,-576(fp)
 801c714:	01441c44 	movi	r5,4209
 801c718:	802c2180 	call	802c218 <__mulsi3>
 801c71c:	1007883a 	mov	r3,r2
 801c720:	e0bf8017 	ldw	r2,-512(fp)
 801c724:	1885883a 	add	r2,r3,r2
 801c728:	e0bf7515 	stw	r2,-556(fp)
		tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 801c72c:	e13f7717 	ldw	r4,-548(fp)
 801c730:	016e9704 	movi	r5,-17828
 801c734:	802c2180 	call	802c218 <__mulsi3>
 801c738:	1007883a 	mov	r3,r2
 801c73c:	e0bf8017 	ldw	r2,-512(fp)
 801c740:	1885883a 	add	r2,r3,r2
 801c744:	e0bf8115 	stw	r2,-508(fp)

		tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 801c748:	e13f7117 	ldw	r4,-572(fp)
 801c74c:	01795984 	movi	r5,-6810
 801c750:	802c2180 	call	802c218 <__mulsi3>
 801c754:	e0bf7715 	stw	r2,-548(fp)
		tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
 801c758:	e13f7117 	ldw	r4,-572(fp)
 801c75c:	01753d84 	movi	r5,-11018
 801c760:	802c2180 	call	802c218 <__mulsi3>
 801c764:	e0bf8015 	stw	r2,-512(fp)
		z2 = z1 - z4;
 801c768:	e0ff7017 	ldw	r3,-576(fp)
 801c76c:	e0bf7317 	ldw	r2,-564(fp)
 801c770:	1885c83a 	sub	r2,r3,r2
 801c774:	e0bf7115 	stw	r2,-572(fp)
		tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
 801c778:	e13f7117 	ldw	r4,-572(fp)
 801c77c:	014b4084 	movi	r5,11522
 801c780:	802c2180 	call	802c218 <__mulsi3>
 801c784:	1007883a 	mov	r3,r2
 801c788:	e0bf7217 	ldw	r2,-568(fp)
 801c78c:	1885883a 	add	r2,r3,r2
 801c790:	e0bf7615 	stw	r2,-552(fp)

		tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 801c794:	e13f7317 	ldw	r4,-564(fp)
 801c798:	0153a8c4 	movi	r5,20131
 801c79c:	802c2180 	call	802c218 <__mulsi3>
 801c7a0:	1007883a 	mov	r3,r2
 801c7a4:	e0bf7617 	ldw	r2,-552(fp)
 801c7a8:	1887883a 	add	r3,r3,r2
 801c7ac:	e0bf8017 	ldw	r2,-512(fp)
 801c7b0:	1885c83a 	sub	r2,r3,r2
 801c7b4:	e0bf7415 	stw	r2,-560(fp)
		tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 801c7b8:	e13f7017 	ldw	r4,-576(fp)
 801c7bc:	017719c4 	movi	r5,-9113
 801c7c0:	802c2180 	call	802c218 <__mulsi3>
 801c7c4:	1007883a 	mov	r3,r2
 801c7c8:	e0bf7617 	ldw	r2,-552(fp)
 801c7cc:	1887883a 	add	r3,r3,r2
 801c7d0:	e0bf7717 	ldw	r2,-548(fp)
 801c7d4:	1885883a 	add	r2,r3,r2
 801c7d8:	e0bf8215 	stw	r2,-504(fp)
		tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 801c7dc:	e13f7117 	ldw	r4,-572(fp)
 801c7e0:	0149cc44 	movi	r5,10033
 801c7e4:	802c2180 	call	802c218 <__mulsi3>
 801c7e8:	1007883a 	mov	r3,r2
 801c7ec:	e0bf7217 	ldw	r2,-568(fp)
 801c7f0:	1885c83a 	sub	r2,r3,r2
 801c7f4:	e0bf7615 	stw	r2,-552(fp)
		z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 801c7f8:	e0ff7017 	ldw	r3,-576(fp)
 801c7fc:	e0bf7317 	ldw	r2,-564(fp)
 801c800:	1885883a 	add	r2,r3,r2
 801c804:	1009883a 	mov	r4,r2
 801c808:	01449a04 	movi	r5,4712
 801c80c:	802c2180 	call	802c218 <__mulsi3>
 801c810:	e0bf7115 	stw	r2,-572(fp)
		tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 801c814:	e13f7017 	ldw	r4,-576(fp)
 801c818:	0143ce44 	movi	r5,3897
 801c81c:	802c2180 	call	802c218 <__mulsi3>
 801c820:	1007883a 	mov	r3,r2
 801c824:	e0bf7117 	ldw	r2,-572(fp)
 801c828:	1887883a 	add	r3,r3,r2
 801c82c:	e0bf7217 	ldw	r2,-568(fp)
 801c830:	1885c83a 	sub	r2,r3,r2
 801c834:	e0ff7717 	ldw	r3,-548(fp)
 801c838:	1885883a 	add	r2,r3,r2
 801c83c:	e0bf7715 	stw	r2,-548(fp)
		tmp15 += z2 - MULTIPLY(z4, FIX(0.869244010)) + z3;      /* c11+c13 */
 801c840:	e13f7317 	ldw	r4,-564(fp)
 801c844:	01790bc4 	movi	r5,-7121
 801c848:	802c2180 	call	802c218 <__mulsi3>
 801c84c:	1007883a 	mov	r3,r2
 801c850:	e0bf7117 	ldw	r2,-572(fp)
 801c854:	1887883a 	add	r3,r3,r2
 801c858:	e0bf7217 	ldw	r2,-568(fp)
 801c85c:	1885883a 	add	r2,r3,r2
 801c860:	e0ff8017 	ldw	r3,-512(fp)
 801c864:	1885883a 	add	r2,r3,r2
 801c868:	e0bf8015 	stw	r2,-512(fp)

		/* Final output stage */

		outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801c86c:	e0ff7817 	ldw	r3,-544(fp)
 801c870:	e0bf7417 	ldw	r2,-560(fp)
 801c874:	1885883a 	add	r2,r3,r2
 801c878:	1005d4ba 	srai	r2,r2,18
 801c87c:	1080ffcc 	andi	r2,r2,1023
 801c880:	e0ff6f17 	ldw	r3,-580(fp)
 801c884:	1885883a 	add	r2,r3,r2
 801c888:	10c00003 	ldbu	r3,0(r2)
 801c88c:	e0bf8317 	ldw	r2,-500(fp)
 801c890:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801c894:	e0bf8317 	ldw	r2,-500(fp)
 801c898:	10800384 	addi	r2,r2,14
 801c89c:	e13f7817 	ldw	r4,-544(fp)
 801c8a0:	e0ff7417 	ldw	r3,-560(fp)
 801c8a4:	20c7c83a 	sub	r3,r4,r3
 801c8a8:	1807d4ba 	srai	r3,r3,18
 801c8ac:	18c0ffcc 	andi	r3,r3,1023
 801c8b0:	e13f6f17 	ldw	r4,-580(fp)
 801c8b4:	20c7883a 	add	r3,r4,r3
 801c8b8:	18c00003 	ldbu	r3,0(r3)
 801c8bc:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801c8c0:	e0bf8317 	ldw	r2,-500(fp)
 801c8c4:	10800044 	addi	r2,r2,1
 801c8c8:	e13f7c17 	ldw	r4,-528(fp)
 801c8cc:	e0ff7517 	ldw	r3,-556(fp)
 801c8d0:	20c7883a 	add	r3,r4,r3
 801c8d4:	1807d4ba 	srai	r3,r3,18
 801c8d8:	18c0ffcc 	andi	r3,r3,1023
 801c8dc:	e13f6f17 	ldw	r4,-580(fp)
 801c8e0:	20c7883a 	add	r3,r4,r3
 801c8e4:	18c00003 	ldbu	r3,0(r3)
 801c8e8:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801c8ec:	e0bf8317 	ldw	r2,-500(fp)
 801c8f0:	10800344 	addi	r2,r2,13
 801c8f4:	e13f7c17 	ldw	r4,-528(fp)
 801c8f8:	e0ff7517 	ldw	r3,-556(fp)
 801c8fc:	20c7c83a 	sub	r3,r4,r3
 801c900:	1807d4ba 	srai	r3,r3,18
 801c904:	18c0ffcc 	andi	r3,r3,1023
 801c908:	e13f6f17 	ldw	r4,-580(fp)
 801c90c:	20c7883a 	add	r3,r4,r3
 801c910:	18c00003 	ldbu	r3,0(r3)
 801c914:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801c918:	e0bf8317 	ldw	r2,-500(fp)
 801c91c:	10800084 	addi	r2,r2,2
 801c920:	e13f7e17 	ldw	r4,-520(fp)
 801c924:	e0ff7617 	ldw	r3,-552(fp)
 801c928:	20c7883a 	add	r3,r4,r3
 801c92c:	1807d4ba 	srai	r3,r3,18
 801c930:	18c0ffcc 	andi	r3,r3,1023
 801c934:	e13f6f17 	ldw	r4,-580(fp)
 801c938:	20c7883a 	add	r3,r4,r3
 801c93c:	18c00003 	ldbu	r3,0(r3)
 801c940:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801c944:	e0bf8317 	ldw	r2,-500(fp)
 801c948:	10800304 	addi	r2,r2,12
 801c94c:	e13f7e17 	ldw	r4,-520(fp)
 801c950:	e0ff7617 	ldw	r3,-552(fp)
 801c954:	20c7c83a 	sub	r3,r4,r3
 801c958:	1807d4ba 	srai	r3,r3,18
 801c95c:	18c0ffcc 	andi	r3,r3,1023
 801c960:	e13f6f17 	ldw	r4,-580(fp)
 801c964:	20c7883a 	add	r3,r4,r3
 801c968:	18c00003 	ldbu	r3,0(r3)
 801c96c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801c970:	e0bf8317 	ldw	r2,-500(fp)
 801c974:	108000c4 	addi	r2,r2,3
 801c978:	e13f7917 	ldw	r4,-540(fp)
 801c97c:	e0ff7717 	ldw	r3,-548(fp)
 801c980:	20c7883a 	add	r3,r4,r3
 801c984:	1807d4ba 	srai	r3,r3,18
 801c988:	18c0ffcc 	andi	r3,r3,1023
 801c98c:	e13f6f17 	ldw	r4,-580(fp)
 801c990:	20c7883a 	add	r3,r4,r3
 801c994:	18c00003 	ldbu	r3,0(r3)
 801c998:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801c99c:	e0bf8317 	ldw	r2,-500(fp)
 801c9a0:	108002c4 	addi	r2,r2,11
 801c9a4:	e13f7917 	ldw	r4,-540(fp)
 801c9a8:	e0ff7717 	ldw	r3,-548(fp)
 801c9ac:	20c7c83a 	sub	r3,r4,r3
 801c9b0:	1807d4ba 	srai	r3,r3,18
 801c9b4:	18c0ffcc 	andi	r3,r3,1023
 801c9b8:	e13f6f17 	ldw	r4,-580(fp)
 801c9bc:	20c7883a 	add	r3,r4,r3
 801c9c0:	18c00003 	ldbu	r3,0(r3)
 801c9c4:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801c9c8:	e0bf8317 	ldw	r2,-500(fp)
 801c9cc:	10800104 	addi	r2,r2,4
 801c9d0:	e13f7d17 	ldw	r4,-524(fp)
 801c9d4:	e0ff8117 	ldw	r3,-508(fp)
 801c9d8:	20c7883a 	add	r3,r4,r3
 801c9dc:	1807d4ba 	srai	r3,r3,18
 801c9e0:	18c0ffcc 	andi	r3,r3,1023
 801c9e4:	e13f6f17 	ldw	r4,-580(fp)
 801c9e8:	20c7883a 	add	r3,r4,r3
 801c9ec:	18c00003 	ldbu	r3,0(r3)
 801c9f0:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801c9f4:	e0bf8317 	ldw	r2,-500(fp)
 801c9f8:	10800284 	addi	r2,r2,10
 801c9fc:	e13f7d17 	ldw	r4,-524(fp)
 801ca00:	e0ff8117 	ldw	r3,-508(fp)
 801ca04:	20c7c83a 	sub	r3,r4,r3
 801ca08:	1807d4ba 	srai	r3,r3,18
 801ca0c:	18c0ffcc 	andi	r3,r3,1023
 801ca10:	e13f6f17 	ldw	r4,-580(fp)
 801ca14:	20c7883a 	add	r3,r4,r3
 801ca18:	18c00003 	ldbu	r3,0(r3)
 801ca1c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 801ca20:	e0bf8317 	ldw	r2,-500(fp)
 801ca24:	10800144 	addi	r2,r2,5
 801ca28:	e13f7a17 	ldw	r4,-536(fp)
 801ca2c:	e0ff8017 	ldw	r3,-512(fp)
 801ca30:	20c7883a 	add	r3,r4,r3
 801ca34:	1807d4ba 	srai	r3,r3,18
 801ca38:	18c0ffcc 	andi	r3,r3,1023
 801ca3c:	e13f6f17 	ldw	r4,-580(fp)
 801ca40:	20c7883a 	add	r3,r4,r3
 801ca44:	18c00003 	ldbu	r3,0(r3)
 801ca48:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801ca4c:	e0bf8317 	ldw	r2,-500(fp)
 801ca50:	10800244 	addi	r2,r2,9
 801ca54:	e13f7a17 	ldw	r4,-536(fp)
 801ca58:	e0ff8017 	ldw	r3,-512(fp)
 801ca5c:	20c7c83a 	sub	r3,r4,r3
 801ca60:	1807d4ba 	srai	r3,r3,18
 801ca64:	18c0ffcc 	andi	r3,r3,1023
 801ca68:	e13f6f17 	ldw	r4,-580(fp)
 801ca6c:	20c7883a 	add	r3,r4,r3
 801ca70:	18c00003 	ldbu	r3,0(r3)
 801ca74:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 801ca78:	e0bf8317 	ldw	r2,-500(fp)
 801ca7c:	10800184 	addi	r2,r2,6
 801ca80:	e13f7b17 	ldw	r4,-532(fp)
 801ca84:	e0ff8217 	ldw	r3,-504(fp)
 801ca88:	20c7883a 	add	r3,r4,r3
 801ca8c:	1807d4ba 	srai	r3,r3,18
 801ca90:	18c0ffcc 	andi	r3,r3,1023
 801ca94:	e13f6f17 	ldw	r4,-580(fp)
 801ca98:	20c7883a 	add	r3,r4,r3
 801ca9c:	18c00003 	ldbu	r3,0(r3)
 801caa0:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 801caa4:	e0bf8317 	ldw	r2,-500(fp)
 801caa8:	10800204 	addi	r2,r2,8
 801caac:	e13f7b17 	ldw	r4,-532(fp)
 801cab0:	e0ff8217 	ldw	r3,-504(fp)
 801cab4:	20c7c83a 	sub	r3,r4,r3
 801cab8:	1807d4ba 	srai	r3,r3,18
 801cabc:	18c0ffcc 	andi	r3,r3,1023
 801cac0:	e13f6f17 	ldw	r4,-580(fp)
 801cac4:	20c7883a 	add	r3,r4,r3
 801cac8:	18c00003 	ldbu	r3,0(r3)
 801cacc:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27,
 801cad0:	e0bf8317 	ldw	r2,-500(fp)
 801cad4:	108001c4 	addi	r2,r2,7
 801cad8:	e0ff7f17 	ldw	r3,-516(fp)
 801cadc:	1807d4ba 	srai	r3,r3,18
 801cae0:	18c0ffcc 	andi	r3,r3,1023
 801cae4:	e13f6f17 	ldw	r4,-580(fp)
 801cae8:	20c7883a 	add	r3,r4,r3
 801caec:	18c00003 	ldbu	r3,0(r3)
 801caf0:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 8;		/* advance pointer to next row */
 801caf4:	e0bf6d17 	ldw	r2,-588(fp)
 801caf8:	10800804 	addi	r2,r2,32
 801cafc:	e0bf6d15 	stw	r2,-588(fp)
	}

	/* Pass 2: process 15 rows from work array, store into output array. */

	wsptr = workspace;
	for (ctr = 0; ctr < 15; ctr++) {
 801cb00:	e0bf6e17 	ldw	r2,-584(fp)
 801cb04:	10800044 	addi	r2,r2,1
 801cb08:	e0bf6e15 	stw	r2,-584(fp)
 801cb0c:	e0bf6e17 	ldw	r2,-584(fp)
 801cb10:	108003d0 	cmplti	r2,r2,15
 801cb14:	103e521e 	bne	r2,zero,801c460 <jpeg_idct_15x15+0x744>
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 8;		/* advance pointer to next row */
	}
}
 801cb18:	e037883a 	mov	sp,fp
 801cb1c:	dfc00117 	ldw	ra,4(sp)
 801cb20:	df000017 	ldw	fp,0(sp)
 801cb24:	dec00204 	addi	sp,sp,8
 801cb28:	f800283a 	ret

0801cb2c <jpeg_idct_16x16>:

GLOBAL(void)
	jpeg_idct_16x16 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801cb2c:	deff5f04 	addi	sp,sp,-644
 801cb30:	dfc0a015 	stw	ra,640(sp)
 801cb34:	df009f15 	stw	fp,636(sp)
 801cb38:	dc009e15 	stw	r16,632(sp)
 801cb3c:	df009e04 	addi	fp,sp,632
 801cb40:	e13ffc15 	stw	r4,-16(fp)
 801cb44:	e17ffd15 	stw	r5,-12(fp)
 801cb48:	e1bffe15 	stw	r6,-8(fp)
 801cb4c:	e1ffff15 	stw	r7,-4(fp)
	INT32 z1, z2, z3, z4;
	JCOEFPTR inptr;
	ISLOW_MULT_TYPE * quantptr;
	int * wsptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801cb50:	e0bffc17 	ldw	r2,-16(fp)
 801cb54:	10804917 	ldw	r2,292(r2)
 801cb58:	10802004 	addi	r2,r2,128
 801cb5c:	e0bf6615 	stw	r2,-616(fp)
	int workspace[8*16];	/* buffers data between passes */
	SHIFT_TEMPS

		/* Pass 1: process columns from input, store into work array. */

		inptr = coef_block;
 801cb60:	e0bffe17 	ldw	r2,-8(fp)
 801cb64:	e0bf6215 	stw	r2,-632(fp)
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801cb68:	e0bffd17 	ldw	r2,-12(fp)
 801cb6c:	10801517 	ldw	r2,84(r2)
 801cb70:	e0bf6315 	stw	r2,-628(fp)
	wsptr = workspace;
 801cb74:	e0bf7c04 	addi	r2,fp,-528
 801cb78:	e0bf6415 	stw	r2,-624(fp)
	for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801cb7c:	e03f6515 	stw	zero,-620(fp)
 801cb80:	0001f906 	br	801d368 <jpeg_idct_16x16+0x83c>
		/* Even part */

		tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801cb84:	e0bf6217 	ldw	r2,-632(fp)
 801cb88:	1080000b 	ldhu	r2,0(r2)
 801cb8c:	10ffffcc 	andi	r3,r2,65535
 801cb90:	18e0001c 	xori	r3,r3,32768
 801cb94:	18e00004 	addi	r3,r3,-32768
 801cb98:	e0bf6317 	ldw	r2,-628(fp)
 801cb9c:	10800017 	ldw	r2,0(r2)
 801cba0:	1809883a 	mov	r4,r3
 801cba4:	100b883a 	mov	r5,r2
 801cba8:	802c2180 	call	802c218 <__mulsi3>
 801cbac:	e0bf6715 	stw	r2,-612(fp)
		tmp0 <<= CONST_BITS;
 801cbb0:	e0bf6717 	ldw	r2,-612(fp)
 801cbb4:	1004937a 	slli	r2,r2,13
 801cbb8:	e0bf6715 	stw	r2,-612(fp)
		/* Add fudge factor here for final descale. */
		tmp0 += 1 << (CONST_BITS-PASS1_BITS-1);
 801cbbc:	e0bf6717 	ldw	r2,-612(fp)
 801cbc0:	10810004 	addi	r2,r2,1024
 801cbc4:	e0bf6715 	stw	r2,-612(fp)

		z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801cbc8:	e0bf6217 	ldw	r2,-632(fp)
 801cbcc:	10801004 	addi	r2,r2,64
 801cbd0:	1080000b 	ldhu	r2,0(r2)
 801cbd4:	10ffffcc 	andi	r3,r2,65535
 801cbd8:	18e0001c 	xori	r3,r3,32768
 801cbdc:	18e00004 	addi	r3,r3,-32768
 801cbe0:	e0bf6317 	ldw	r2,-628(fp)
 801cbe4:	10802004 	addi	r2,r2,128
 801cbe8:	10800017 	ldw	r2,0(r2)
 801cbec:	1809883a 	mov	r4,r3
 801cbf0:	100b883a 	mov	r5,r2
 801cbf4:	802c2180 	call	802c218 <__mulsi3>
 801cbf8:	e0bf6815 	stw	r2,-608(fp)
		tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 801cbfc:	e13f6817 	ldw	r4,-608(fp)
 801cc00:	014a73c4 	movi	r5,10703
 801cc04:	802c2180 	call	802c218 <__mulsi3>
 801cc08:	e0bf6915 	stw	r2,-604(fp)
		tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 801cc0c:	e13f6817 	ldw	r4,-608(fp)
 801cc10:	01445444 	movi	r5,4433
 801cc14:	802c2180 	call	802c218 <__mulsi3>
 801cc18:	e0bf6a15 	stw	r2,-600(fp)

		tmp10 = tmp0 + tmp1;
 801cc1c:	e0ff6717 	ldw	r3,-612(fp)
 801cc20:	e0bf6917 	ldw	r2,-604(fp)
 801cc24:	1885883a 	add	r2,r3,r2
 801cc28:	e0bf6b15 	stw	r2,-596(fp)
		tmp11 = tmp0 - tmp1;
 801cc2c:	e0ff6717 	ldw	r3,-612(fp)
 801cc30:	e0bf6917 	ldw	r2,-604(fp)
 801cc34:	1885c83a 	sub	r2,r3,r2
 801cc38:	e0bf6c15 	stw	r2,-592(fp)
		tmp12 = tmp0 + tmp2;
 801cc3c:	e0ff6717 	ldw	r3,-612(fp)
 801cc40:	e0bf6a17 	ldw	r2,-600(fp)
 801cc44:	1885883a 	add	r2,r3,r2
 801cc48:	e0bf6d15 	stw	r2,-588(fp)
		tmp13 = tmp0 - tmp2;
 801cc4c:	e0ff6717 	ldw	r3,-612(fp)
 801cc50:	e0bf6a17 	ldw	r2,-600(fp)
 801cc54:	1885c83a 	sub	r2,r3,r2
 801cc58:	e0bf6e15 	stw	r2,-584(fp)

		z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801cc5c:	e0bf6217 	ldw	r2,-632(fp)
 801cc60:	10800804 	addi	r2,r2,32
 801cc64:	1080000b 	ldhu	r2,0(r2)
 801cc68:	10ffffcc 	andi	r3,r2,65535
 801cc6c:	18e0001c 	xori	r3,r3,32768
 801cc70:	18e00004 	addi	r3,r3,-32768
 801cc74:	e0bf6317 	ldw	r2,-628(fp)
 801cc78:	10801004 	addi	r2,r2,64
 801cc7c:	10800017 	ldw	r2,0(r2)
 801cc80:	1809883a 	mov	r4,r3
 801cc84:	100b883a 	mov	r5,r2
 801cc88:	802c2180 	call	802c218 <__mulsi3>
 801cc8c:	e0bf6815 	stw	r2,-608(fp)
		z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801cc90:	e0bf6217 	ldw	r2,-632(fp)
 801cc94:	10801804 	addi	r2,r2,96
 801cc98:	1080000b 	ldhu	r2,0(r2)
 801cc9c:	10ffffcc 	andi	r3,r2,65535
 801cca0:	18e0001c 	xori	r3,r3,32768
 801cca4:	18e00004 	addi	r3,r3,-32768
 801cca8:	e0bf6317 	ldw	r2,-628(fp)
 801ccac:	10803004 	addi	r2,r2,192
 801ccb0:	10800017 	ldw	r2,0(r2)
 801ccb4:	1809883a 	mov	r4,r3
 801ccb8:	100b883a 	mov	r5,r2
 801ccbc:	802c2180 	call	802c218 <__mulsi3>
 801ccc0:	e0bf6f15 	stw	r2,-580(fp)
		z3 = z1 - z2;
 801ccc4:	e0ff6817 	ldw	r3,-608(fp)
 801ccc8:	e0bf6f17 	ldw	r2,-580(fp)
 801cccc:	1885c83a 	sub	r2,r3,r2
 801ccd0:	e0bf7015 	stw	r2,-576(fp)
		z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 801ccd4:	e13f7017 	ldw	r4,-576(fp)
 801ccd8:	01423504 	movi	r5,2260
 801ccdc:	802c2180 	call	802c218 <__mulsi3>
 801cce0:	e0bf7115 	stw	r2,-572(fp)
		z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 801cce4:	e13f7017 	ldw	r4,-576(fp)
 801cce8:	014b18c4 	movi	r5,11363
 801ccec:	802c2180 	call	802c218 <__mulsi3>
 801ccf0:	e0bf7015 	stw	r2,-576(fp)

		tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 801ccf4:	e13f6f17 	ldw	r4,-580(fp)
 801ccf8:	015480c4 	movi	r5,20995
 801ccfc:	802c2180 	call	802c218 <__mulsi3>
 801cd00:	1007883a 	mov	r3,r2
 801cd04:	e0bf7017 	ldw	r2,-576(fp)
 801cd08:	1885883a 	add	r2,r3,r2
 801cd0c:	e0bf6715 	stw	r2,-612(fp)
		tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 801cd10:	e13f6817 	ldw	r4,-608(fp)
 801cd14:	01473344 	movi	r5,7373
 801cd18:	802c2180 	call	802c218 <__mulsi3>
 801cd1c:	1007883a 	mov	r3,r2
 801cd20:	e0bf7117 	ldw	r2,-572(fp)
 801cd24:	1885883a 	add	r2,r3,r2
 801cd28:	e0bf6915 	stw	r2,-604(fp)
		tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 801cd2c:	e13f6817 	ldw	r4,-608(fp)
 801cd30:	017b3084 	movi	r5,-4926
 801cd34:	802c2180 	call	802c218 <__mulsi3>
 801cd38:	1007883a 	mov	r3,r2
 801cd3c:	e0bf7017 	ldw	r2,-576(fp)
 801cd40:	1885883a 	add	r2,r3,r2
 801cd44:	e0bf6a15 	stw	r2,-600(fp)
		tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 801cd48:	e13f6f17 	ldw	r4,-580(fp)
 801cd4c:	017bec04 	movi	r5,-4176
 801cd50:	802c2180 	call	802c218 <__mulsi3>
 801cd54:	1007883a 	mov	r3,r2
 801cd58:	e0bf7117 	ldw	r2,-572(fp)
 801cd5c:	1885883a 	add	r2,r3,r2
 801cd60:	e0bf7215 	stw	r2,-568(fp)

		tmp20 = tmp10 + tmp0;
 801cd64:	e0ff6b17 	ldw	r3,-596(fp)
 801cd68:	e0bf6717 	ldw	r2,-612(fp)
 801cd6c:	1885883a 	add	r2,r3,r2
 801cd70:	e0bf7315 	stw	r2,-564(fp)
		tmp27 = tmp10 - tmp0;
 801cd74:	e0ff6b17 	ldw	r3,-596(fp)
 801cd78:	e0bf6717 	ldw	r2,-612(fp)
 801cd7c:	1885c83a 	sub	r2,r3,r2
 801cd80:	e0bf7415 	stw	r2,-560(fp)
		tmp21 = tmp12 + tmp1;
 801cd84:	e0ff6d17 	ldw	r3,-588(fp)
 801cd88:	e0bf6917 	ldw	r2,-604(fp)
 801cd8c:	1885883a 	add	r2,r3,r2
 801cd90:	e0bf7515 	stw	r2,-556(fp)
		tmp26 = tmp12 - tmp1;
 801cd94:	e0ff6d17 	ldw	r3,-588(fp)
 801cd98:	e0bf6917 	ldw	r2,-604(fp)
 801cd9c:	1885c83a 	sub	r2,r3,r2
 801cda0:	e0bf7615 	stw	r2,-552(fp)
		tmp22 = tmp13 + tmp2;
 801cda4:	e0ff6e17 	ldw	r3,-584(fp)
 801cda8:	e0bf6a17 	ldw	r2,-600(fp)
 801cdac:	1885883a 	add	r2,r3,r2
 801cdb0:	e0bf7715 	stw	r2,-548(fp)
		tmp25 = tmp13 - tmp2;
 801cdb4:	e0ff6e17 	ldw	r3,-584(fp)
 801cdb8:	e0bf6a17 	ldw	r2,-600(fp)
 801cdbc:	1885c83a 	sub	r2,r3,r2
 801cdc0:	e0bf7815 	stw	r2,-544(fp)
		tmp23 = tmp11 + tmp3;
 801cdc4:	e0ff6c17 	ldw	r3,-592(fp)
 801cdc8:	e0bf7217 	ldw	r2,-568(fp)
 801cdcc:	1885883a 	add	r2,r3,r2
 801cdd0:	e0bf7915 	stw	r2,-540(fp)
		tmp24 = tmp11 - tmp3;
 801cdd4:	e0ff6c17 	ldw	r3,-592(fp)
 801cdd8:	e0bf7217 	ldw	r2,-568(fp)
 801cddc:	1885c83a 	sub	r2,r3,r2
 801cde0:	e0bf7a15 	stw	r2,-536(fp)

		/* Odd part */

		z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801cde4:	e0bf6217 	ldw	r2,-632(fp)
 801cde8:	10800404 	addi	r2,r2,16
 801cdec:	1080000b 	ldhu	r2,0(r2)
 801cdf0:	10ffffcc 	andi	r3,r2,65535
 801cdf4:	18e0001c 	xori	r3,r3,32768
 801cdf8:	18e00004 	addi	r3,r3,-32768
 801cdfc:	e0bf6317 	ldw	r2,-628(fp)
 801ce00:	10800804 	addi	r2,r2,32
 801ce04:	10800017 	ldw	r2,0(r2)
 801ce08:	1809883a 	mov	r4,r3
 801ce0c:	100b883a 	mov	r5,r2
 801ce10:	802c2180 	call	802c218 <__mulsi3>
 801ce14:	e0bf6815 	stw	r2,-608(fp)
		z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801ce18:	e0bf6217 	ldw	r2,-632(fp)
 801ce1c:	10800c04 	addi	r2,r2,48
 801ce20:	1080000b 	ldhu	r2,0(r2)
 801ce24:	10ffffcc 	andi	r3,r2,65535
 801ce28:	18e0001c 	xori	r3,r3,32768
 801ce2c:	18e00004 	addi	r3,r3,-32768
 801ce30:	e0bf6317 	ldw	r2,-628(fp)
 801ce34:	10801804 	addi	r2,r2,96
 801ce38:	10800017 	ldw	r2,0(r2)
 801ce3c:	1809883a 	mov	r4,r3
 801ce40:	100b883a 	mov	r5,r2
 801ce44:	802c2180 	call	802c218 <__mulsi3>
 801ce48:	e0bf6f15 	stw	r2,-580(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801ce4c:	e0bf6217 	ldw	r2,-632(fp)
 801ce50:	10801404 	addi	r2,r2,80
 801ce54:	1080000b 	ldhu	r2,0(r2)
 801ce58:	10ffffcc 	andi	r3,r2,65535
 801ce5c:	18e0001c 	xori	r3,r3,32768
 801ce60:	18e00004 	addi	r3,r3,-32768
 801ce64:	e0bf6317 	ldw	r2,-628(fp)
 801ce68:	10802804 	addi	r2,r2,160
 801ce6c:	10800017 	ldw	r2,0(r2)
 801ce70:	1809883a 	mov	r4,r3
 801ce74:	100b883a 	mov	r5,r2
 801ce78:	802c2180 	call	802c218 <__mulsi3>
 801ce7c:	e0bf7015 	stw	r2,-576(fp)
		z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801ce80:	e0bf6217 	ldw	r2,-632(fp)
 801ce84:	10801c04 	addi	r2,r2,112
 801ce88:	1080000b 	ldhu	r2,0(r2)
 801ce8c:	10ffffcc 	andi	r3,r2,65535
 801ce90:	18e0001c 	xori	r3,r3,32768
 801ce94:	18e00004 	addi	r3,r3,-32768
 801ce98:	e0bf6317 	ldw	r2,-628(fp)
 801ce9c:	10803804 	addi	r2,r2,224
 801cea0:	10800017 	ldw	r2,0(r2)
 801cea4:	1809883a 	mov	r4,r3
 801cea8:	100b883a 	mov	r5,r2
 801ceac:	802c2180 	call	802c218 <__mulsi3>
 801ceb0:	e0bf7115 	stw	r2,-572(fp)

		tmp11 = z1 + z3;
 801ceb4:	e0ff6817 	ldw	r3,-608(fp)
 801ceb8:	e0bf7017 	ldw	r2,-576(fp)
 801cebc:	1885883a 	add	r2,r3,r2
 801cec0:	e0bf6c15 	stw	r2,-592(fp)

		tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 801cec4:	e0ff6817 	ldw	r3,-608(fp)
 801cec8:	e0bf6f17 	ldw	r2,-580(fp)
 801cecc:	1885883a 	add	r2,r3,r2
 801ced0:	1009883a 	mov	r4,r2
 801ced4:	014ad384 	movi	r5,11086
 801ced8:	802c2180 	call	802c218 <__mulsi3>
 801cedc:	e0bf6915 	stw	r2,-604(fp)
		tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 801cee0:	e13f6c17 	ldw	r4,-592(fp)
 801cee4:	0149fa44 	movi	r5,10217
 801cee8:	802c2180 	call	802c218 <__mulsi3>
 801ceec:	e0bf6a15 	stw	r2,-600(fp)
		tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 801cef0:	e0ff6817 	ldw	r3,-608(fp)
 801cef4:	e0bf7117 	ldw	r2,-572(fp)
 801cef8:	1885883a 	add	r2,r3,r2
 801cefc:	1009883a 	mov	r4,r2
 801cf00:	0148bf04 	movi	r5,8956
 801cf04:	802c2180 	call	802c218 <__mulsi3>
 801cf08:	e0bf7215 	stw	r2,-568(fp)
		tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 801cf0c:	e0ff6817 	ldw	r3,-608(fp)
 801cf10:	e0bf7117 	ldw	r2,-572(fp)
 801cf14:	1885c83a 	sub	r2,r3,r2
 801cf18:	1009883a 	mov	r4,r2
 801cf1c:	01472d84 	movi	r5,7350
 801cf20:	802c2180 	call	802c218 <__mulsi3>
 801cf24:	e0bf6b15 	stw	r2,-596(fp)
		tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 801cf28:	e13f6c17 	ldw	r4,-592(fp)
 801cf2c:	01455544 	movi	r5,5461
 801cf30:	802c2180 	call	802c218 <__mulsi3>
 801cf34:	e0bf6c15 	stw	r2,-592(fp)
		tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 801cf38:	e0ff6817 	ldw	r3,-608(fp)
 801cf3c:	e0bf6f17 	ldw	r2,-580(fp)
 801cf40:	1885c83a 	sub	r2,r3,r2
 801cf44:	1009883a 	mov	r4,r2
 801cf48:	014348c4 	movi	r5,3363
 801cf4c:	802c2180 	call	802c218 <__mulsi3>
 801cf50:	e0bf6d15 	stw	r2,-588(fp)
		tmp0  = tmp1 + tmp2 + tmp3 -
 801cf54:	e0ff6917 	ldw	r3,-604(fp)
 801cf58:	e0bf6a17 	ldw	r2,-600(fp)
 801cf5c:	1887883a 	add	r3,r3,r2
 801cf60:	e0bf7217 	ldw	r2,-568(fp)
 801cf64:	18a1883a 	add	r16,r3,r2
			MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
 801cf68:	e13f6817 	ldw	r4,-608(fp)
 801cf6c:	016db584 	movi	r5,-18730
 801cf70:	802c2180 	call	802c218 <__mulsi3>
		tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
		tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
		tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
		tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
		tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
		tmp0  = tmp1 + tmp2 + tmp3 -
 801cf74:	8085883a 	add	r2,r16,r2
 801cf78:	e0bf6715 	stw	r2,-612(fp)
			MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
		tmp13 = tmp10 + tmp11 + tmp12 -
 801cf7c:	e0ff6b17 	ldw	r3,-596(fp)
 801cf80:	e0bf6c17 	ldw	r2,-592(fp)
 801cf84:	1887883a 	add	r3,r3,r2
 801cf88:	e0bf6d17 	ldw	r2,-588(fp)
 801cf8c:	18a1883a 	add	r16,r3,r2
			MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
 801cf90:	e13f6817 	ldw	r4,-608(fp)
 801cf94:	01715084 	movi	r5,-15038
 801cf98:	802c2180 	call	802c218 <__mulsi3>
		tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
		tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
		tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
		tmp0  = tmp1 + tmp2 + tmp3 -
			MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
		tmp13 = tmp10 + tmp11 + tmp12 -
 801cf9c:	8085883a 	add	r2,r16,r2
 801cfa0:	e0bf6e15 	stw	r2,-584(fp)
			MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
		z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 801cfa4:	e0ff6f17 	ldw	r3,-580(fp)
 801cfa8:	e0bf7017 	ldw	r2,-576(fp)
 801cfac:	1885883a 	add	r2,r3,r2
 801cfb0:	1009883a 	mov	r4,r2
 801cfb4:	01411c04 	movi	r5,1136
 801cfb8:	802c2180 	call	802c218 <__mulsi3>
 801cfbc:	e0bf6815 	stw	r2,-608(fp)
		tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 801cfc0:	e13f6f17 	ldw	r4,-580(fp)
 801cfc4:	01409344 	movi	r5,589
 801cfc8:	802c2180 	call	802c218 <__mulsi3>
 801cfcc:	1007883a 	mov	r3,r2
 801cfd0:	e0bf6817 	ldw	r2,-608(fp)
 801cfd4:	1885883a 	add	r2,r3,r2
 801cfd8:	e0ff6917 	ldw	r3,-604(fp)
 801cfdc:	1885883a 	add	r2,r3,r2
 801cfe0:	e0bf6915 	stw	r2,-604(fp)
		tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 801cfe4:	e13f7017 	ldw	r4,-576(fp)
 801cfe8:	0176fe84 	movi	r5,-9222
 801cfec:	802c2180 	call	802c218 <__mulsi3>
 801cff0:	1007883a 	mov	r3,r2
 801cff4:	e0bf6817 	ldw	r2,-608(fp)
 801cff8:	1885883a 	add	r2,r3,r2
 801cffc:	e0ff6a17 	ldw	r3,-600(fp)
 801d000:	1885883a 	add	r2,r3,r2
 801d004:	e0bf6a15 	stw	r2,-600(fp)
		z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 801d008:	e0ff7017 	ldw	r3,-576(fp)
 801d00c:	e0bf6f17 	ldw	r2,-580(fp)
 801d010:	1885c83a 	sub	r2,r3,r2
 801d014:	1009883a 	mov	r4,r2
 801d018:	014b4244 	movi	r5,11529
 801d01c:	802c2180 	call	802c218 <__mulsi3>
 801d020:	e0bf6815 	stw	r2,-608(fp)
		tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 801d024:	e13f7017 	ldw	r4,-576(fp)
 801d028:	0179de84 	movi	r5,-6278
 801d02c:	802c2180 	call	802c218 <__mulsi3>
 801d030:	1007883a 	mov	r3,r2
 801d034:	e0bf6817 	ldw	r2,-608(fp)
 801d038:	1885883a 	add	r2,r3,r2
 801d03c:	e0ff6c17 	ldw	r3,-592(fp)
 801d040:	1885883a 	add	r2,r3,r2
 801d044:	e0bf6c15 	stw	r2,-592(fp)
		tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 801d048:	e13f6f17 	ldw	r4,-580(fp)
 801d04c:	014fc684 	movi	r5,16154
 801d050:	802c2180 	call	802c218 <__mulsi3>
 801d054:	1007883a 	mov	r3,r2
 801d058:	e0bf6817 	ldw	r2,-608(fp)
 801d05c:	1885883a 	add	r2,r3,r2
 801d060:	e0ff6d17 	ldw	r3,-588(fp)
 801d064:	1885883a 	add	r2,r3,r2
 801d068:	e0bf6d15 	stw	r2,-588(fp)
		z2    += z4;
 801d06c:	e0ff6f17 	ldw	r3,-580(fp)
 801d070:	e0bf7117 	ldw	r2,-572(fp)
 801d074:	1885883a 	add	r2,r3,r2
 801d078:	e0bf6f15 	stw	r2,-580(fp)
		z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 801d07c:	e13f6f17 	ldw	r4,-580(fp)
 801d080:	017aaac4 	movi	r5,-5461
 801d084:	802c2180 	call	802c218 <__mulsi3>
 801d088:	e0bf6815 	stw	r2,-608(fp)
		tmp1  += z1;
 801d08c:	e0ff6917 	ldw	r3,-604(fp)
 801d090:	e0bf6817 	ldw	r2,-608(fp)
 801d094:	1885883a 	add	r2,r3,r2
 801d098:	e0bf6915 	stw	r2,-604(fp)
		tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 801d09c:	e13f7117 	ldw	r4,-572(fp)
 801d0a0:	01488604 	movi	r5,8728
 801d0a4:	802c2180 	call	802c218 <__mulsi3>
 801d0a8:	1007883a 	mov	r3,r2
 801d0ac:	e0bf6817 	ldw	r2,-608(fp)
 801d0b0:	1885883a 	add	r2,r3,r2
 801d0b4:	e0ff7217 	ldw	r3,-568(fp)
 801d0b8:	1885883a 	add	r2,r3,r2
 801d0bc:	e0bf7215 	stw	r2,-568(fp)
		z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 801d0c0:	e13f6f17 	ldw	r4,-580(fp)
 801d0c4:	017605c4 	movi	r5,-10217
 801d0c8:	802c2180 	call	802c218 <__mulsi3>
 801d0cc:	e0bf6f15 	stw	r2,-580(fp)
		tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 801d0d0:	e13f7117 	ldw	r4,-572(fp)
 801d0d4:	01592144 	movi	r5,25733
 801d0d8:	802c2180 	call	802c218 <__mulsi3>
 801d0dc:	1007883a 	mov	r3,r2
 801d0e0:	e0bf6f17 	ldw	r2,-580(fp)
 801d0e4:	1885883a 	add	r2,r3,r2
 801d0e8:	e0ff6b17 	ldw	r3,-596(fp)
 801d0ec:	1885883a 	add	r2,r3,r2
 801d0f0:	e0bf6b15 	stw	r2,-596(fp)
		tmp12 += z2;
 801d0f4:	e0ff6d17 	ldw	r3,-588(fp)
 801d0f8:	e0bf6f17 	ldw	r2,-580(fp)
 801d0fc:	1885883a 	add	r2,r3,r2
 801d100:	e0bf6d15 	stw	r2,-588(fp)
		z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 801d104:	e0ff7017 	ldw	r3,-576(fp)
 801d108:	e0bf7117 	ldw	r2,-572(fp)
 801d10c:	1885883a 	add	r2,r3,r2
 801d110:	1009883a 	mov	r4,r2
 801d114:	01752c84 	movi	r5,-11086
 801d118:	802c2180 	call	802c218 <__mulsi3>
 801d11c:	e0bf6f15 	stw	r2,-580(fp)
		tmp2  += z2;
 801d120:	e0ff6a17 	ldw	r3,-600(fp)
 801d124:	e0bf6f17 	ldw	r2,-580(fp)
 801d128:	1885883a 	add	r2,r3,r2
 801d12c:	e0bf6a15 	stw	r2,-600(fp)
		tmp3  += z2;
 801d130:	e0ff7217 	ldw	r3,-568(fp)
 801d134:	e0bf6f17 	ldw	r2,-580(fp)
 801d138:	1885883a 	add	r2,r3,r2
 801d13c:	e0bf7215 	stw	r2,-568(fp)
		z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 801d140:	e0ff7117 	ldw	r3,-572(fp)
 801d144:	e0bf7017 	ldw	r2,-576(fp)
 801d148:	1885c83a 	sub	r2,r3,r2
 801d14c:	1009883a 	mov	r4,r2
 801d150:	014348c4 	movi	r5,3363
 801d154:	802c2180 	call	802c218 <__mulsi3>
 801d158:	e0bf6f15 	stw	r2,-580(fp)
		tmp10 += z2;
 801d15c:	e0ff6b17 	ldw	r3,-596(fp)
 801d160:	e0bf6f17 	ldw	r2,-580(fp)
 801d164:	1885883a 	add	r2,r3,r2
 801d168:	e0bf6b15 	stw	r2,-596(fp)
		tmp11 += z2;
 801d16c:	e0ff6c17 	ldw	r3,-592(fp)
 801d170:	e0bf6f17 	ldw	r2,-580(fp)
 801d174:	1885883a 	add	r2,r3,r2
 801d178:	e0bf6c15 	stw	r2,-592(fp)

		/* Final output stage */

		wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 801d17c:	e0ff7317 	ldw	r3,-564(fp)
 801d180:	e0bf6717 	ldw	r2,-612(fp)
 801d184:	1885883a 	add	r2,r3,r2
 801d188:	1007d2fa 	srai	r3,r2,11
 801d18c:	e0bf6417 	ldw	r2,-624(fp)
 801d190:	10c00015 	stw	r3,0(r2)
		wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 801d194:	e0bf6417 	ldw	r2,-624(fp)
 801d198:	10807804 	addi	r2,r2,480
 801d19c:	e13f7317 	ldw	r4,-564(fp)
 801d1a0:	e0ff6717 	ldw	r3,-612(fp)
 801d1a4:	20c7c83a 	sub	r3,r4,r3
 801d1a8:	1807d2fa 	srai	r3,r3,11
 801d1ac:	10c00015 	stw	r3,0(r2)
		wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 801d1b0:	e0bf6417 	ldw	r2,-624(fp)
 801d1b4:	10800804 	addi	r2,r2,32
 801d1b8:	e13f7517 	ldw	r4,-556(fp)
 801d1bc:	e0ff6917 	ldw	r3,-604(fp)
 801d1c0:	20c7883a 	add	r3,r4,r3
 801d1c4:	1807d2fa 	srai	r3,r3,11
 801d1c8:	10c00015 	stw	r3,0(r2)
		wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 801d1cc:	e0bf6417 	ldw	r2,-624(fp)
 801d1d0:	10807004 	addi	r2,r2,448
 801d1d4:	e13f7517 	ldw	r4,-556(fp)
 801d1d8:	e0ff6917 	ldw	r3,-604(fp)
 801d1dc:	20c7c83a 	sub	r3,r4,r3
 801d1e0:	1807d2fa 	srai	r3,r3,11
 801d1e4:	10c00015 	stw	r3,0(r2)
		wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 801d1e8:	e0bf6417 	ldw	r2,-624(fp)
 801d1ec:	10801004 	addi	r2,r2,64
 801d1f0:	e13f7717 	ldw	r4,-548(fp)
 801d1f4:	e0ff6a17 	ldw	r3,-600(fp)
 801d1f8:	20c7883a 	add	r3,r4,r3
 801d1fc:	1807d2fa 	srai	r3,r3,11
 801d200:	10c00015 	stw	r3,0(r2)
		wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 801d204:	e0bf6417 	ldw	r2,-624(fp)
 801d208:	10806804 	addi	r2,r2,416
 801d20c:	e13f7717 	ldw	r4,-548(fp)
 801d210:	e0ff6a17 	ldw	r3,-600(fp)
 801d214:	20c7c83a 	sub	r3,r4,r3
 801d218:	1807d2fa 	srai	r3,r3,11
 801d21c:	10c00015 	stw	r3,0(r2)
		wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 801d220:	e0bf6417 	ldw	r2,-624(fp)
 801d224:	10801804 	addi	r2,r2,96
 801d228:	e13f7917 	ldw	r4,-540(fp)
 801d22c:	e0ff7217 	ldw	r3,-568(fp)
 801d230:	20c7883a 	add	r3,r4,r3
 801d234:	1807d2fa 	srai	r3,r3,11
 801d238:	10c00015 	stw	r3,0(r2)
		wsptr[8*12] = (int) RIGHT_SHIFT(tmp23 - tmp3,  CONST_BITS-PASS1_BITS);
 801d23c:	e0bf6417 	ldw	r2,-624(fp)
 801d240:	10806004 	addi	r2,r2,384
 801d244:	e13f7917 	ldw	r4,-540(fp)
 801d248:	e0ff7217 	ldw	r3,-568(fp)
 801d24c:	20c7c83a 	sub	r3,r4,r3
 801d250:	1807d2fa 	srai	r3,r3,11
 801d254:	10c00015 	stw	r3,0(r2)
		wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp10, CONST_BITS-PASS1_BITS);
 801d258:	e0bf6417 	ldw	r2,-624(fp)
 801d25c:	10802004 	addi	r2,r2,128
 801d260:	e13f7a17 	ldw	r4,-536(fp)
 801d264:	e0ff6b17 	ldw	r3,-596(fp)
 801d268:	20c7883a 	add	r3,r4,r3
 801d26c:	1807d2fa 	srai	r3,r3,11
 801d270:	10c00015 	stw	r3,0(r2)
		wsptr[8*11] = (int) RIGHT_SHIFT(tmp24 - tmp10, CONST_BITS-PASS1_BITS);
 801d274:	e0bf6417 	ldw	r2,-624(fp)
 801d278:	10805804 	addi	r2,r2,352
 801d27c:	e13f7a17 	ldw	r4,-536(fp)
 801d280:	e0ff6b17 	ldw	r3,-596(fp)
 801d284:	20c7c83a 	sub	r3,r4,r3
 801d288:	1807d2fa 	srai	r3,r3,11
 801d28c:	10c00015 	stw	r3,0(r2)
		wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp11, CONST_BITS-PASS1_BITS);
 801d290:	e0bf6417 	ldw	r2,-624(fp)
 801d294:	10802804 	addi	r2,r2,160
 801d298:	e13f7817 	ldw	r4,-544(fp)
 801d29c:	e0ff6c17 	ldw	r3,-592(fp)
 801d2a0:	20c7883a 	add	r3,r4,r3
 801d2a4:	1807d2fa 	srai	r3,r3,11
 801d2a8:	10c00015 	stw	r3,0(r2)
		wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 801d2ac:	e0bf6417 	ldw	r2,-624(fp)
 801d2b0:	10805004 	addi	r2,r2,320
 801d2b4:	e13f7817 	ldw	r4,-544(fp)
 801d2b8:	e0ff6c17 	ldw	r3,-592(fp)
 801d2bc:	20c7c83a 	sub	r3,r4,r3
 801d2c0:	1807d2fa 	srai	r3,r3,11
 801d2c4:	10c00015 	stw	r3,0(r2)
		wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 801d2c8:	e0bf6417 	ldw	r2,-624(fp)
 801d2cc:	10803004 	addi	r2,r2,192
 801d2d0:	e13f7617 	ldw	r4,-552(fp)
 801d2d4:	e0ff6d17 	ldw	r3,-588(fp)
 801d2d8:	20c7883a 	add	r3,r4,r3
 801d2dc:	1807d2fa 	srai	r3,r3,11
 801d2e0:	10c00015 	stw	r3,0(r2)
		wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 801d2e4:	e0bf6417 	ldw	r2,-624(fp)
 801d2e8:	10804804 	addi	r2,r2,288
 801d2ec:	e13f7617 	ldw	r4,-552(fp)
 801d2f0:	e0ff6d17 	ldw	r3,-588(fp)
 801d2f4:	20c7c83a 	sub	r3,r4,r3
 801d2f8:	1807d2fa 	srai	r3,r3,11
 801d2fc:	10c00015 	stw	r3,0(r2)
		wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 801d300:	e0bf6417 	ldw	r2,-624(fp)
 801d304:	10803804 	addi	r2,r2,224
 801d308:	e13f7417 	ldw	r4,-560(fp)
 801d30c:	e0ff6e17 	ldw	r3,-584(fp)
 801d310:	20c7883a 	add	r3,r4,r3
 801d314:	1807d2fa 	srai	r3,r3,11
 801d318:	10c00015 	stw	r3,0(r2)
		wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 801d31c:	e0bf6417 	ldw	r2,-624(fp)
 801d320:	10804004 	addi	r2,r2,256
 801d324:	e13f7417 	ldw	r4,-560(fp)
 801d328:	e0ff6e17 	ldw	r3,-584(fp)
 801d32c:	20c7c83a 	sub	r3,r4,r3
 801d330:	1807d2fa 	srai	r3,r3,11
 801d334:	10c00015 	stw	r3,0(r2)
		/* Pass 1: process columns from input, store into work array. */

		inptr = coef_block;
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
	wsptr = workspace;
	for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801d338:	e0bf6517 	ldw	r2,-620(fp)
 801d33c:	10800044 	addi	r2,r2,1
 801d340:	e0bf6515 	stw	r2,-620(fp)
 801d344:	e0bf6217 	ldw	r2,-632(fp)
 801d348:	10800084 	addi	r2,r2,2
 801d34c:	e0bf6215 	stw	r2,-632(fp)
 801d350:	e0bf6317 	ldw	r2,-628(fp)
 801d354:	10800104 	addi	r2,r2,4
 801d358:	e0bf6315 	stw	r2,-628(fp)
 801d35c:	e0bf6417 	ldw	r2,-624(fp)
 801d360:	10800104 	addi	r2,r2,4
 801d364:	e0bf6415 	stw	r2,-624(fp)
 801d368:	e0bf6517 	ldw	r2,-620(fp)
 801d36c:	10800210 	cmplti	r2,r2,8
 801d370:	103e041e 	bne	r2,zero,801cb84 <jpeg_idct_16x16+0x58>
		wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
	}

	/* Pass 2: process 16 rows from work array, store into output array. */

	wsptr = workspace;
 801d374:	e0bf7c04 	addi	r2,fp,-528
 801d378:	e0bf6415 	stw	r2,-624(fp)
	for (ctr = 0; ctr < 16; ctr++) {
 801d37c:	e03f6515 	stw	zero,-620(fp)
 801d380:	0001f306 	br	801db50 <jpeg_idct_16x16+0x1024>
		outptr = output_buf[ctr] + output_col;
 801d384:	e0bf6517 	ldw	r2,-620(fp)
 801d388:	1085883a 	add	r2,r2,r2
 801d38c:	1085883a 	add	r2,r2,r2
 801d390:	e0ffff17 	ldw	r3,-4(fp)
 801d394:	1885883a 	add	r2,r3,r2
 801d398:	10c00017 	ldw	r3,0(r2)
 801d39c:	e0800317 	ldw	r2,12(fp)
 801d3a0:	1885883a 	add	r2,r3,r2
 801d3a4:	e0bf7b15 	stw	r2,-532(fp)

		/* Even part */

		/* Add fudge factor here for final descale. */
		tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801d3a8:	e0bf6417 	ldw	r2,-624(fp)
 801d3ac:	10800017 	ldw	r2,0(r2)
 801d3b0:	10800404 	addi	r2,r2,16
 801d3b4:	e0bf6715 	stw	r2,-612(fp)
		tmp0 <<= CONST_BITS;
 801d3b8:	e0bf6717 	ldw	r2,-612(fp)
 801d3bc:	1004937a 	slli	r2,r2,13
 801d3c0:	e0bf6715 	stw	r2,-612(fp)

		z1 = (INT32) wsptr[4];
 801d3c4:	e0bf6417 	ldw	r2,-624(fp)
 801d3c8:	10800404 	addi	r2,r2,16
 801d3cc:	10800017 	ldw	r2,0(r2)
 801d3d0:	e0bf6815 	stw	r2,-608(fp)
		tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 801d3d4:	e13f6817 	ldw	r4,-608(fp)
 801d3d8:	014a73c4 	movi	r5,10703
 801d3dc:	802c2180 	call	802c218 <__mulsi3>
 801d3e0:	e0bf6915 	stw	r2,-604(fp)
		tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 801d3e4:	e13f6817 	ldw	r4,-608(fp)
 801d3e8:	01445444 	movi	r5,4433
 801d3ec:	802c2180 	call	802c218 <__mulsi3>
 801d3f0:	e0bf6a15 	stw	r2,-600(fp)

		tmp10 = tmp0 + tmp1;
 801d3f4:	e0ff6717 	ldw	r3,-612(fp)
 801d3f8:	e0bf6917 	ldw	r2,-604(fp)
 801d3fc:	1885883a 	add	r2,r3,r2
 801d400:	e0bf6b15 	stw	r2,-596(fp)
		tmp11 = tmp0 - tmp1;
 801d404:	e0ff6717 	ldw	r3,-612(fp)
 801d408:	e0bf6917 	ldw	r2,-604(fp)
 801d40c:	1885c83a 	sub	r2,r3,r2
 801d410:	e0bf6c15 	stw	r2,-592(fp)
		tmp12 = tmp0 + tmp2;
 801d414:	e0ff6717 	ldw	r3,-612(fp)
 801d418:	e0bf6a17 	ldw	r2,-600(fp)
 801d41c:	1885883a 	add	r2,r3,r2
 801d420:	e0bf6d15 	stw	r2,-588(fp)
		tmp13 = tmp0 - tmp2;
 801d424:	e0ff6717 	ldw	r3,-612(fp)
 801d428:	e0bf6a17 	ldw	r2,-600(fp)
 801d42c:	1885c83a 	sub	r2,r3,r2
 801d430:	e0bf6e15 	stw	r2,-584(fp)

		z1 = (INT32) wsptr[2];
 801d434:	e0bf6417 	ldw	r2,-624(fp)
 801d438:	10800204 	addi	r2,r2,8
 801d43c:	10800017 	ldw	r2,0(r2)
 801d440:	e0bf6815 	stw	r2,-608(fp)
		z2 = (INT32) wsptr[6];
 801d444:	e0bf6417 	ldw	r2,-624(fp)
 801d448:	10800604 	addi	r2,r2,24
 801d44c:	10800017 	ldw	r2,0(r2)
 801d450:	e0bf6f15 	stw	r2,-580(fp)
		z3 = z1 - z2;
 801d454:	e0ff6817 	ldw	r3,-608(fp)
 801d458:	e0bf6f17 	ldw	r2,-580(fp)
 801d45c:	1885c83a 	sub	r2,r3,r2
 801d460:	e0bf7015 	stw	r2,-576(fp)
		z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 801d464:	e13f7017 	ldw	r4,-576(fp)
 801d468:	01423504 	movi	r5,2260
 801d46c:	802c2180 	call	802c218 <__mulsi3>
 801d470:	e0bf7115 	stw	r2,-572(fp)
		z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 801d474:	e13f7017 	ldw	r4,-576(fp)
 801d478:	014b18c4 	movi	r5,11363
 801d47c:	802c2180 	call	802c218 <__mulsi3>
 801d480:	e0bf7015 	stw	r2,-576(fp)

		tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 801d484:	e13f6f17 	ldw	r4,-580(fp)
 801d488:	015480c4 	movi	r5,20995
 801d48c:	802c2180 	call	802c218 <__mulsi3>
 801d490:	1007883a 	mov	r3,r2
 801d494:	e0bf7017 	ldw	r2,-576(fp)
 801d498:	1885883a 	add	r2,r3,r2
 801d49c:	e0bf6715 	stw	r2,-612(fp)
		tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 801d4a0:	e13f6817 	ldw	r4,-608(fp)
 801d4a4:	01473344 	movi	r5,7373
 801d4a8:	802c2180 	call	802c218 <__mulsi3>
 801d4ac:	1007883a 	mov	r3,r2
 801d4b0:	e0bf7117 	ldw	r2,-572(fp)
 801d4b4:	1885883a 	add	r2,r3,r2
 801d4b8:	e0bf6915 	stw	r2,-604(fp)
		tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 801d4bc:	e13f6817 	ldw	r4,-608(fp)
 801d4c0:	017b3084 	movi	r5,-4926
 801d4c4:	802c2180 	call	802c218 <__mulsi3>
 801d4c8:	1007883a 	mov	r3,r2
 801d4cc:	e0bf7017 	ldw	r2,-576(fp)
 801d4d0:	1885883a 	add	r2,r3,r2
 801d4d4:	e0bf6a15 	stw	r2,-600(fp)
		tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 801d4d8:	e13f6f17 	ldw	r4,-580(fp)
 801d4dc:	017bec04 	movi	r5,-4176
 801d4e0:	802c2180 	call	802c218 <__mulsi3>
 801d4e4:	1007883a 	mov	r3,r2
 801d4e8:	e0bf7117 	ldw	r2,-572(fp)
 801d4ec:	1885883a 	add	r2,r3,r2
 801d4f0:	e0bf7215 	stw	r2,-568(fp)

		tmp20 = tmp10 + tmp0;
 801d4f4:	e0ff6b17 	ldw	r3,-596(fp)
 801d4f8:	e0bf6717 	ldw	r2,-612(fp)
 801d4fc:	1885883a 	add	r2,r3,r2
 801d500:	e0bf7315 	stw	r2,-564(fp)
		tmp27 = tmp10 - tmp0;
 801d504:	e0ff6b17 	ldw	r3,-596(fp)
 801d508:	e0bf6717 	ldw	r2,-612(fp)
 801d50c:	1885c83a 	sub	r2,r3,r2
 801d510:	e0bf7415 	stw	r2,-560(fp)
		tmp21 = tmp12 + tmp1;
 801d514:	e0ff6d17 	ldw	r3,-588(fp)
 801d518:	e0bf6917 	ldw	r2,-604(fp)
 801d51c:	1885883a 	add	r2,r3,r2
 801d520:	e0bf7515 	stw	r2,-556(fp)
		tmp26 = tmp12 - tmp1;
 801d524:	e0ff6d17 	ldw	r3,-588(fp)
 801d528:	e0bf6917 	ldw	r2,-604(fp)
 801d52c:	1885c83a 	sub	r2,r3,r2
 801d530:	e0bf7615 	stw	r2,-552(fp)
		tmp22 = tmp13 + tmp2;
 801d534:	e0ff6e17 	ldw	r3,-584(fp)
 801d538:	e0bf6a17 	ldw	r2,-600(fp)
 801d53c:	1885883a 	add	r2,r3,r2
 801d540:	e0bf7715 	stw	r2,-548(fp)
		tmp25 = tmp13 - tmp2;
 801d544:	e0ff6e17 	ldw	r3,-584(fp)
 801d548:	e0bf6a17 	ldw	r2,-600(fp)
 801d54c:	1885c83a 	sub	r2,r3,r2
 801d550:	e0bf7815 	stw	r2,-544(fp)
		tmp23 = tmp11 + tmp3;
 801d554:	e0ff6c17 	ldw	r3,-592(fp)
 801d558:	e0bf7217 	ldw	r2,-568(fp)
 801d55c:	1885883a 	add	r2,r3,r2
 801d560:	e0bf7915 	stw	r2,-540(fp)
		tmp24 = tmp11 - tmp3;
 801d564:	e0ff6c17 	ldw	r3,-592(fp)
 801d568:	e0bf7217 	ldw	r2,-568(fp)
 801d56c:	1885c83a 	sub	r2,r3,r2
 801d570:	e0bf7a15 	stw	r2,-536(fp)

		/* Odd part */

		z1 = (INT32) wsptr[1];
 801d574:	e0bf6417 	ldw	r2,-624(fp)
 801d578:	10800104 	addi	r2,r2,4
 801d57c:	10800017 	ldw	r2,0(r2)
 801d580:	e0bf6815 	stw	r2,-608(fp)
		z2 = (INT32) wsptr[3];
 801d584:	e0bf6417 	ldw	r2,-624(fp)
 801d588:	10800304 	addi	r2,r2,12
 801d58c:	10800017 	ldw	r2,0(r2)
 801d590:	e0bf6f15 	stw	r2,-580(fp)
		z3 = (INT32) wsptr[5];
 801d594:	e0bf6417 	ldw	r2,-624(fp)
 801d598:	10800504 	addi	r2,r2,20
 801d59c:	10800017 	ldw	r2,0(r2)
 801d5a0:	e0bf7015 	stw	r2,-576(fp)
		z4 = (INT32) wsptr[7];
 801d5a4:	e0bf6417 	ldw	r2,-624(fp)
 801d5a8:	10800704 	addi	r2,r2,28
 801d5ac:	10800017 	ldw	r2,0(r2)
 801d5b0:	e0bf7115 	stw	r2,-572(fp)

		tmp11 = z1 + z3;
 801d5b4:	e0ff6817 	ldw	r3,-608(fp)
 801d5b8:	e0bf7017 	ldw	r2,-576(fp)
 801d5bc:	1885883a 	add	r2,r3,r2
 801d5c0:	e0bf6c15 	stw	r2,-592(fp)

		tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 801d5c4:	e0ff6817 	ldw	r3,-608(fp)
 801d5c8:	e0bf6f17 	ldw	r2,-580(fp)
 801d5cc:	1885883a 	add	r2,r3,r2
 801d5d0:	1009883a 	mov	r4,r2
 801d5d4:	014ad384 	movi	r5,11086
 801d5d8:	802c2180 	call	802c218 <__mulsi3>
 801d5dc:	e0bf6915 	stw	r2,-604(fp)
		tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 801d5e0:	e13f6c17 	ldw	r4,-592(fp)
 801d5e4:	0149fa44 	movi	r5,10217
 801d5e8:	802c2180 	call	802c218 <__mulsi3>
 801d5ec:	e0bf6a15 	stw	r2,-600(fp)
		tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 801d5f0:	e0ff6817 	ldw	r3,-608(fp)
 801d5f4:	e0bf7117 	ldw	r2,-572(fp)
 801d5f8:	1885883a 	add	r2,r3,r2
 801d5fc:	1009883a 	mov	r4,r2
 801d600:	0148bf04 	movi	r5,8956
 801d604:	802c2180 	call	802c218 <__mulsi3>
 801d608:	e0bf7215 	stw	r2,-568(fp)
		tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 801d60c:	e0ff6817 	ldw	r3,-608(fp)
 801d610:	e0bf7117 	ldw	r2,-572(fp)
 801d614:	1885c83a 	sub	r2,r3,r2
 801d618:	1009883a 	mov	r4,r2
 801d61c:	01472d84 	movi	r5,7350
 801d620:	802c2180 	call	802c218 <__mulsi3>
 801d624:	e0bf6b15 	stw	r2,-596(fp)
		tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 801d628:	e13f6c17 	ldw	r4,-592(fp)
 801d62c:	01455544 	movi	r5,5461
 801d630:	802c2180 	call	802c218 <__mulsi3>
 801d634:	e0bf6c15 	stw	r2,-592(fp)
		tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 801d638:	e0ff6817 	ldw	r3,-608(fp)
 801d63c:	e0bf6f17 	ldw	r2,-580(fp)
 801d640:	1885c83a 	sub	r2,r3,r2
 801d644:	1009883a 	mov	r4,r2
 801d648:	014348c4 	movi	r5,3363
 801d64c:	802c2180 	call	802c218 <__mulsi3>
 801d650:	e0bf6d15 	stw	r2,-588(fp)
		tmp0  = tmp1 + tmp2 + tmp3 -
 801d654:	e0ff6917 	ldw	r3,-604(fp)
 801d658:	e0bf6a17 	ldw	r2,-600(fp)
 801d65c:	1887883a 	add	r3,r3,r2
 801d660:	e0bf7217 	ldw	r2,-568(fp)
 801d664:	18a1883a 	add	r16,r3,r2
			MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
 801d668:	e13f6817 	ldw	r4,-608(fp)
 801d66c:	016db584 	movi	r5,-18730
 801d670:	802c2180 	call	802c218 <__mulsi3>
		tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
		tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
		tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
		tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
		tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
		tmp0  = tmp1 + tmp2 + tmp3 -
 801d674:	8085883a 	add	r2,r16,r2
 801d678:	e0bf6715 	stw	r2,-612(fp)
			MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
		tmp13 = tmp10 + tmp11 + tmp12 -
 801d67c:	e0ff6b17 	ldw	r3,-596(fp)
 801d680:	e0bf6c17 	ldw	r2,-592(fp)
 801d684:	1887883a 	add	r3,r3,r2
 801d688:	e0bf6d17 	ldw	r2,-588(fp)
 801d68c:	18a1883a 	add	r16,r3,r2
			MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
 801d690:	e13f6817 	ldw	r4,-608(fp)
 801d694:	01715084 	movi	r5,-15038
 801d698:	802c2180 	call	802c218 <__mulsi3>
		tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
		tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
		tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
		tmp0  = tmp1 + tmp2 + tmp3 -
			MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
		tmp13 = tmp10 + tmp11 + tmp12 -
 801d69c:	8085883a 	add	r2,r16,r2
 801d6a0:	e0bf6e15 	stw	r2,-584(fp)
			MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
		z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 801d6a4:	e0ff6f17 	ldw	r3,-580(fp)
 801d6a8:	e0bf7017 	ldw	r2,-576(fp)
 801d6ac:	1885883a 	add	r2,r3,r2
 801d6b0:	1009883a 	mov	r4,r2
 801d6b4:	01411c04 	movi	r5,1136
 801d6b8:	802c2180 	call	802c218 <__mulsi3>
 801d6bc:	e0bf6815 	stw	r2,-608(fp)
		tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 801d6c0:	e13f6f17 	ldw	r4,-580(fp)
 801d6c4:	01409344 	movi	r5,589
 801d6c8:	802c2180 	call	802c218 <__mulsi3>
 801d6cc:	1007883a 	mov	r3,r2
 801d6d0:	e0bf6817 	ldw	r2,-608(fp)
 801d6d4:	1885883a 	add	r2,r3,r2
 801d6d8:	e0ff6917 	ldw	r3,-604(fp)
 801d6dc:	1885883a 	add	r2,r3,r2
 801d6e0:	e0bf6915 	stw	r2,-604(fp)
		tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 801d6e4:	e13f7017 	ldw	r4,-576(fp)
 801d6e8:	0176fe84 	movi	r5,-9222
 801d6ec:	802c2180 	call	802c218 <__mulsi3>
 801d6f0:	1007883a 	mov	r3,r2
 801d6f4:	e0bf6817 	ldw	r2,-608(fp)
 801d6f8:	1885883a 	add	r2,r3,r2
 801d6fc:	e0ff6a17 	ldw	r3,-600(fp)
 801d700:	1885883a 	add	r2,r3,r2
 801d704:	e0bf6a15 	stw	r2,-600(fp)
		z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 801d708:	e0ff7017 	ldw	r3,-576(fp)
 801d70c:	e0bf6f17 	ldw	r2,-580(fp)
 801d710:	1885c83a 	sub	r2,r3,r2
 801d714:	1009883a 	mov	r4,r2
 801d718:	014b4244 	movi	r5,11529
 801d71c:	802c2180 	call	802c218 <__mulsi3>
 801d720:	e0bf6815 	stw	r2,-608(fp)
		tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 801d724:	e13f7017 	ldw	r4,-576(fp)
 801d728:	0179de84 	movi	r5,-6278
 801d72c:	802c2180 	call	802c218 <__mulsi3>
 801d730:	1007883a 	mov	r3,r2
 801d734:	e0bf6817 	ldw	r2,-608(fp)
 801d738:	1885883a 	add	r2,r3,r2
 801d73c:	e0ff6c17 	ldw	r3,-592(fp)
 801d740:	1885883a 	add	r2,r3,r2
 801d744:	e0bf6c15 	stw	r2,-592(fp)
		tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 801d748:	e13f6f17 	ldw	r4,-580(fp)
 801d74c:	014fc684 	movi	r5,16154
 801d750:	802c2180 	call	802c218 <__mulsi3>
 801d754:	1007883a 	mov	r3,r2
 801d758:	e0bf6817 	ldw	r2,-608(fp)
 801d75c:	1885883a 	add	r2,r3,r2
 801d760:	e0ff6d17 	ldw	r3,-588(fp)
 801d764:	1885883a 	add	r2,r3,r2
 801d768:	e0bf6d15 	stw	r2,-588(fp)
		z2    += z4;
 801d76c:	e0ff6f17 	ldw	r3,-580(fp)
 801d770:	e0bf7117 	ldw	r2,-572(fp)
 801d774:	1885883a 	add	r2,r3,r2
 801d778:	e0bf6f15 	stw	r2,-580(fp)
		z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 801d77c:	e13f6f17 	ldw	r4,-580(fp)
 801d780:	017aaac4 	movi	r5,-5461
 801d784:	802c2180 	call	802c218 <__mulsi3>
 801d788:	e0bf6815 	stw	r2,-608(fp)
		tmp1  += z1;
 801d78c:	e0ff6917 	ldw	r3,-604(fp)
 801d790:	e0bf6817 	ldw	r2,-608(fp)
 801d794:	1885883a 	add	r2,r3,r2
 801d798:	e0bf6915 	stw	r2,-604(fp)
		tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 801d79c:	e13f7117 	ldw	r4,-572(fp)
 801d7a0:	01488604 	movi	r5,8728
 801d7a4:	802c2180 	call	802c218 <__mulsi3>
 801d7a8:	1007883a 	mov	r3,r2
 801d7ac:	e0bf6817 	ldw	r2,-608(fp)
 801d7b0:	1885883a 	add	r2,r3,r2
 801d7b4:	e0ff7217 	ldw	r3,-568(fp)
 801d7b8:	1885883a 	add	r2,r3,r2
 801d7bc:	e0bf7215 	stw	r2,-568(fp)
		z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 801d7c0:	e13f6f17 	ldw	r4,-580(fp)
 801d7c4:	017605c4 	movi	r5,-10217
 801d7c8:	802c2180 	call	802c218 <__mulsi3>
 801d7cc:	e0bf6f15 	stw	r2,-580(fp)
		tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 801d7d0:	e13f7117 	ldw	r4,-572(fp)
 801d7d4:	01592144 	movi	r5,25733
 801d7d8:	802c2180 	call	802c218 <__mulsi3>
 801d7dc:	1007883a 	mov	r3,r2
 801d7e0:	e0bf6f17 	ldw	r2,-580(fp)
 801d7e4:	1885883a 	add	r2,r3,r2
 801d7e8:	e0ff6b17 	ldw	r3,-596(fp)
 801d7ec:	1885883a 	add	r2,r3,r2
 801d7f0:	e0bf6b15 	stw	r2,-596(fp)
		tmp12 += z2;
 801d7f4:	e0ff6d17 	ldw	r3,-588(fp)
 801d7f8:	e0bf6f17 	ldw	r2,-580(fp)
 801d7fc:	1885883a 	add	r2,r3,r2
 801d800:	e0bf6d15 	stw	r2,-588(fp)
		z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 801d804:	e0ff7017 	ldw	r3,-576(fp)
 801d808:	e0bf7117 	ldw	r2,-572(fp)
 801d80c:	1885883a 	add	r2,r3,r2
 801d810:	1009883a 	mov	r4,r2
 801d814:	01752c84 	movi	r5,-11086
 801d818:	802c2180 	call	802c218 <__mulsi3>
 801d81c:	e0bf6f15 	stw	r2,-580(fp)
		tmp2  += z2;
 801d820:	e0ff6a17 	ldw	r3,-600(fp)
 801d824:	e0bf6f17 	ldw	r2,-580(fp)
 801d828:	1885883a 	add	r2,r3,r2
 801d82c:	e0bf6a15 	stw	r2,-600(fp)
		tmp3  += z2;
 801d830:	e0ff7217 	ldw	r3,-568(fp)
 801d834:	e0bf6f17 	ldw	r2,-580(fp)
 801d838:	1885883a 	add	r2,r3,r2
 801d83c:	e0bf7215 	stw	r2,-568(fp)
		z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 801d840:	e0ff7117 	ldw	r3,-572(fp)
 801d844:	e0bf7017 	ldw	r2,-576(fp)
 801d848:	1885c83a 	sub	r2,r3,r2
 801d84c:	1009883a 	mov	r4,r2
 801d850:	014348c4 	movi	r5,3363
 801d854:	802c2180 	call	802c218 <__mulsi3>
 801d858:	e0bf6f15 	stw	r2,-580(fp)
		tmp10 += z2;
 801d85c:	e0ff6b17 	ldw	r3,-596(fp)
 801d860:	e0bf6f17 	ldw	r2,-580(fp)
 801d864:	1885883a 	add	r2,r3,r2
 801d868:	e0bf6b15 	stw	r2,-596(fp)
		tmp11 += z2;
 801d86c:	e0ff6c17 	ldw	r3,-592(fp)
 801d870:	e0bf6f17 	ldw	r2,-580(fp)
 801d874:	1885883a 	add	r2,r3,r2
 801d878:	e0bf6c15 	stw	r2,-592(fp)

		/* Final output stage */

		outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 801d87c:	e0ff7317 	ldw	r3,-564(fp)
 801d880:	e0bf6717 	ldw	r2,-612(fp)
 801d884:	1885883a 	add	r2,r3,r2
 801d888:	1005d4ba 	srai	r2,r2,18
 801d88c:	1080ffcc 	andi	r2,r2,1023
 801d890:	e0ff6617 	ldw	r3,-616(fp)
 801d894:	1885883a 	add	r2,r3,r2
 801d898:	10c00003 	ldbu	r3,0(r2)
 801d89c:	e0bf7b17 	ldw	r2,-532(fp)
 801d8a0:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 801d8a4:	e0bf7b17 	ldw	r2,-532(fp)
 801d8a8:	108003c4 	addi	r2,r2,15
 801d8ac:	e13f7317 	ldw	r4,-564(fp)
 801d8b0:	e0ff6717 	ldw	r3,-612(fp)
 801d8b4:	20c7c83a 	sub	r3,r4,r3
 801d8b8:	1807d4ba 	srai	r3,r3,18
 801d8bc:	18c0ffcc 	andi	r3,r3,1023
 801d8c0:	e13f6617 	ldw	r4,-616(fp)
 801d8c4:	20c7883a 	add	r3,r4,r3
 801d8c8:	18c00003 	ldbu	r3,0(r3)
 801d8cc:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 801d8d0:	e0bf7b17 	ldw	r2,-532(fp)
 801d8d4:	10800044 	addi	r2,r2,1
 801d8d8:	e13f7517 	ldw	r4,-556(fp)
 801d8dc:	e0ff6917 	ldw	r3,-604(fp)
 801d8e0:	20c7883a 	add	r3,r4,r3
 801d8e4:	1807d4ba 	srai	r3,r3,18
 801d8e8:	18c0ffcc 	andi	r3,r3,1023
 801d8ec:	e13f6617 	ldw	r4,-616(fp)
 801d8f0:	20c7883a 	add	r3,r4,r3
 801d8f4:	18c00003 	ldbu	r3,0(r3)
 801d8f8:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 801d8fc:	e0bf7b17 	ldw	r2,-532(fp)
 801d900:	10800384 	addi	r2,r2,14
 801d904:	e13f7517 	ldw	r4,-556(fp)
 801d908:	e0ff6917 	ldw	r3,-604(fp)
 801d90c:	20c7c83a 	sub	r3,r4,r3
 801d910:	1807d4ba 	srai	r3,r3,18
 801d914:	18c0ffcc 	andi	r3,r3,1023
 801d918:	e13f6617 	ldw	r4,-616(fp)
 801d91c:	20c7883a 	add	r3,r4,r3
 801d920:	18c00003 	ldbu	r3,0(r3)
 801d924:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 801d928:	e0bf7b17 	ldw	r2,-532(fp)
 801d92c:	10800084 	addi	r2,r2,2
 801d930:	e13f7717 	ldw	r4,-548(fp)
 801d934:	e0ff6a17 	ldw	r3,-600(fp)
 801d938:	20c7883a 	add	r3,r4,r3
 801d93c:	1807d4ba 	srai	r3,r3,18
 801d940:	18c0ffcc 	andi	r3,r3,1023
 801d944:	e13f6617 	ldw	r4,-616(fp)
 801d948:	20c7883a 	add	r3,r4,r3
 801d94c:	18c00003 	ldbu	r3,0(r3)
 801d950:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 801d954:	e0bf7b17 	ldw	r2,-532(fp)
 801d958:	10800344 	addi	r2,r2,13
 801d95c:	e13f7717 	ldw	r4,-548(fp)
 801d960:	e0ff6a17 	ldw	r3,-600(fp)
 801d964:	20c7c83a 	sub	r3,r4,r3
 801d968:	1807d4ba 	srai	r3,r3,18
 801d96c:	18c0ffcc 	andi	r3,r3,1023
 801d970:	e13f6617 	ldw	r4,-616(fp)
 801d974:	20c7883a 	add	r3,r4,r3
 801d978:	18c00003 	ldbu	r3,0(r3)
 801d97c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 801d980:	e0bf7b17 	ldw	r2,-532(fp)
 801d984:	108000c4 	addi	r2,r2,3
 801d988:	e13f7917 	ldw	r4,-540(fp)
 801d98c:	e0ff7217 	ldw	r3,-568(fp)
 801d990:	20c7883a 	add	r3,r4,r3
 801d994:	1807d4ba 	srai	r3,r3,18
 801d998:	18c0ffcc 	andi	r3,r3,1023
 801d99c:	e13f6617 	ldw	r4,-616(fp)
 801d9a0:	20c7883a 	add	r3,r4,r3
 801d9a4:	18c00003 	ldbu	r3,0(r3)
 801d9a8:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 801d9ac:	e0bf7b17 	ldw	r2,-532(fp)
 801d9b0:	10800304 	addi	r2,r2,12
 801d9b4:	e13f7917 	ldw	r4,-540(fp)
 801d9b8:	e0ff7217 	ldw	r3,-568(fp)
 801d9bc:	20c7c83a 	sub	r3,r4,r3
 801d9c0:	1807d4ba 	srai	r3,r3,18
 801d9c4:	18c0ffcc 	andi	r3,r3,1023
 801d9c8:	e13f6617 	ldw	r4,-616(fp)
 801d9cc:	20c7883a 	add	r3,r4,r3
 801d9d0:	18c00003 	ldbu	r3,0(r3)
 801d9d4:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 801d9d8:	e0bf7b17 	ldw	r2,-532(fp)
 801d9dc:	10800104 	addi	r2,r2,4
 801d9e0:	e13f7a17 	ldw	r4,-536(fp)
 801d9e4:	e0ff6b17 	ldw	r3,-596(fp)
 801d9e8:	20c7883a 	add	r3,r4,r3
 801d9ec:	1807d4ba 	srai	r3,r3,18
 801d9f0:	18c0ffcc 	andi	r3,r3,1023
 801d9f4:	e13f6617 	ldw	r4,-616(fp)
 801d9f8:	20c7883a 	add	r3,r4,r3
 801d9fc:	18c00003 	ldbu	r3,0(r3)
 801da00:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 801da04:	e0bf7b17 	ldw	r2,-532(fp)
 801da08:	108002c4 	addi	r2,r2,11
 801da0c:	e13f7a17 	ldw	r4,-536(fp)
 801da10:	e0ff6b17 	ldw	r3,-596(fp)
 801da14:	20c7c83a 	sub	r3,r4,r3
 801da18:	1807d4ba 	srai	r3,r3,18
 801da1c:	18c0ffcc 	andi	r3,r3,1023
 801da20:	e13f6617 	ldw	r4,-616(fp)
 801da24:	20c7883a 	add	r3,r4,r3
 801da28:	18c00003 	ldbu	r3,0(r3)
 801da2c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 801da30:	e0bf7b17 	ldw	r2,-532(fp)
 801da34:	10800144 	addi	r2,r2,5
 801da38:	e13f7817 	ldw	r4,-544(fp)
 801da3c:	e0ff6c17 	ldw	r3,-592(fp)
 801da40:	20c7883a 	add	r3,r4,r3
 801da44:	1807d4ba 	srai	r3,r3,18
 801da48:	18c0ffcc 	andi	r3,r3,1023
 801da4c:	e13f6617 	ldw	r4,-616(fp)
 801da50:	20c7883a 	add	r3,r4,r3
 801da54:	18c00003 	ldbu	r3,0(r3)
 801da58:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 801da5c:	e0bf7b17 	ldw	r2,-532(fp)
 801da60:	10800284 	addi	r2,r2,10
 801da64:	e13f7817 	ldw	r4,-544(fp)
 801da68:	e0ff6c17 	ldw	r3,-592(fp)
 801da6c:	20c7c83a 	sub	r3,r4,r3
 801da70:	1807d4ba 	srai	r3,r3,18
 801da74:	18c0ffcc 	andi	r3,r3,1023
 801da78:	e13f6617 	ldw	r4,-616(fp)
 801da7c:	20c7883a 	add	r3,r4,r3
 801da80:	18c00003 	ldbu	r3,0(r3)
 801da84:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 801da88:	e0bf7b17 	ldw	r2,-532(fp)
 801da8c:	10800184 	addi	r2,r2,6
 801da90:	e13f7617 	ldw	r4,-552(fp)
 801da94:	e0ff6d17 	ldw	r3,-588(fp)
 801da98:	20c7883a 	add	r3,r4,r3
 801da9c:	1807d4ba 	srai	r3,r3,18
 801daa0:	18c0ffcc 	andi	r3,r3,1023
 801daa4:	e13f6617 	ldw	r4,-616(fp)
 801daa8:	20c7883a 	add	r3,r4,r3
 801daac:	18c00003 	ldbu	r3,0(r3)
 801dab0:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 801dab4:	e0bf7b17 	ldw	r2,-532(fp)
 801dab8:	10800244 	addi	r2,r2,9
 801dabc:	e13f7617 	ldw	r4,-552(fp)
 801dac0:	e0ff6d17 	ldw	r3,-588(fp)
 801dac4:	20c7c83a 	sub	r3,r4,r3
 801dac8:	1807d4ba 	srai	r3,r3,18
 801dacc:	18c0ffcc 	andi	r3,r3,1023
 801dad0:	e13f6617 	ldw	r4,-616(fp)
 801dad4:	20c7883a 	add	r3,r4,r3
 801dad8:	18c00003 	ldbu	r3,0(r3)
 801dadc:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 801dae0:	e0bf7b17 	ldw	r2,-532(fp)
 801dae4:	108001c4 	addi	r2,r2,7
 801dae8:	e13f7417 	ldw	r4,-560(fp)
 801daec:	e0ff6e17 	ldw	r3,-584(fp)
 801daf0:	20c7883a 	add	r3,r4,r3
 801daf4:	1807d4ba 	srai	r3,r3,18
 801daf8:	18c0ffcc 	andi	r3,r3,1023
 801dafc:	e13f6617 	ldw	r4,-616(fp)
 801db00:	20c7883a 	add	r3,r4,r3
 801db04:	18c00003 	ldbu	r3,0(r3)
 801db08:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 801db0c:	e0bf7b17 	ldw	r2,-532(fp)
 801db10:	10800204 	addi	r2,r2,8
 801db14:	e13f7417 	ldw	r4,-560(fp)
 801db18:	e0ff6e17 	ldw	r3,-584(fp)
 801db1c:	20c7c83a 	sub	r3,r4,r3
 801db20:	1807d4ba 	srai	r3,r3,18
 801db24:	18c0ffcc 	andi	r3,r3,1023
 801db28:	e13f6617 	ldw	r4,-616(fp)
 801db2c:	20c7883a 	add	r3,r4,r3
 801db30:	18c00003 	ldbu	r3,0(r3)
 801db34:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 8;		/* advance pointer to next row */
 801db38:	e0bf6417 	ldw	r2,-624(fp)
 801db3c:	10800804 	addi	r2,r2,32
 801db40:	e0bf6415 	stw	r2,-624(fp)
	}

	/* Pass 2: process 16 rows from work array, store into output array. */

	wsptr = workspace;
	for (ctr = 0; ctr < 16; ctr++) {
 801db44:	e0bf6517 	ldw	r2,-620(fp)
 801db48:	10800044 	addi	r2,r2,1
 801db4c:	e0bf6515 	stw	r2,-620(fp)
 801db50:	e0bf6517 	ldw	r2,-620(fp)
 801db54:	10800410 	cmplti	r2,r2,16
 801db58:	103e0a1e 	bne	r2,zero,801d384 <jpeg_idct_16x16+0x858>
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 8;		/* advance pointer to next row */
	}
}
 801db5c:	e037883a 	mov	sp,fp
 801db60:	dfc00217 	ldw	ra,8(sp)
 801db64:	df000117 	ldw	fp,4(sp)
 801db68:	dc000017 	ldw	r16,0(sp)
 801db6c:	dec00304 	addi	sp,sp,12
 801db70:	f800283a 	ret

0801db74 <jpeg_idct_16x8>:

GLOBAL(void)
	jpeg_idct_16x8 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801db74:	deff9e04 	addi	sp,sp,-392
 801db78:	dfc06115 	stw	ra,388(sp)
 801db7c:	df006015 	stw	fp,384(sp)
 801db80:	dc005f15 	stw	r16,380(sp)
 801db84:	df005f04 	addi	fp,sp,380
 801db88:	e13ffc15 	stw	r4,-16(fp)
 801db8c:	e17ffd15 	stw	r5,-12(fp)
 801db90:	e1bffe15 	stw	r6,-8(fp)
 801db94:	e1ffff15 	stw	r7,-4(fp)
	INT32 z1, z2, z3, z4;
	JCOEFPTR inptr;
	ISLOW_MULT_TYPE * quantptr;
	int * wsptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801db98:	e0bffc17 	ldw	r2,-16(fp)
 801db9c:	10804917 	ldw	r2,292(r2)
 801dba0:	10802004 	addi	r2,r2,128
 801dba4:	e0bfa515 	stw	r2,-364(fp)

		/* Pass 1: process columns from input, store into work array. */
		/* Note results are scaled up by sqrt(8) compared to a true IDCT; */
		/* furthermore, we scale the results by 2**PASS1_BITS. */

		inptr = coef_block;
 801dba8:	e0bffe17 	ldw	r2,-8(fp)
 801dbac:	e0bfa115 	stw	r2,-380(fp)
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801dbb0:	e0bffd17 	ldw	r2,-12(fp)
 801dbb4:	10801517 	ldw	r2,84(r2)
 801dbb8:	e0bfa215 	stw	r2,-376(fp)
	wsptr = workspace;
 801dbbc:	e0bfbc04 	addi	r2,fp,-272
 801dbc0:	e0bfa315 	stw	r2,-372(fp)
	for (ctr = DCTSIZE; ctr > 0; ctr--) {
 801dbc4:	00800204 	movi	r2,8
 801dbc8:	e0bfa415 	stw	r2,-368(fp)
 801dbcc:	00019b06 	br	801e23c <jpeg_idct_16x8+0x6c8>
		* DC coefficient (with scale factor as needed).
		* With typical images and quantization tables, half or more of the
		* column DCT calculations can be simplified this way.
		*/

		if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 801dbd0:	e0bfa117 	ldw	r2,-380(fp)
 801dbd4:	10800404 	addi	r2,r2,16
 801dbd8:	1080000b 	ldhu	r2,0(r2)
 801dbdc:	10bfffcc 	andi	r2,r2,65535
 801dbe0:	10a0001c 	xori	r2,r2,32768
 801dbe4:	10a00004 	addi	r2,r2,-32768
 801dbe8:	1000601e 	bne	r2,zero,801dd6c <jpeg_idct_16x8+0x1f8>
 801dbec:	e0bfa117 	ldw	r2,-380(fp)
 801dbf0:	10800804 	addi	r2,r2,32
 801dbf4:	1080000b 	ldhu	r2,0(r2)
 801dbf8:	10bfffcc 	andi	r2,r2,65535
 801dbfc:	10a0001c 	xori	r2,r2,32768
 801dc00:	10a00004 	addi	r2,r2,-32768
 801dc04:	1000591e 	bne	r2,zero,801dd6c <jpeg_idct_16x8+0x1f8>
			inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 801dc08:	e0bfa117 	ldw	r2,-380(fp)
 801dc0c:	10800c04 	addi	r2,r2,48
 801dc10:	1080000b 	ldhu	r2,0(r2)
		* DC coefficient (with scale factor as needed).
		* With typical images and quantization tables, half or more of the
		* column DCT calculations can be simplified this way.
		*/

		if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 801dc14:	10bfffcc 	andi	r2,r2,65535
 801dc18:	10a0001c 	xori	r2,r2,32768
 801dc1c:	10a00004 	addi	r2,r2,-32768
 801dc20:	1000521e 	bne	r2,zero,801dd6c <jpeg_idct_16x8+0x1f8>
			inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 801dc24:	e0bfa117 	ldw	r2,-380(fp)
 801dc28:	10801004 	addi	r2,r2,64
 801dc2c:	1080000b 	ldhu	r2,0(r2)
 801dc30:	10bfffcc 	andi	r2,r2,65535
 801dc34:	10a0001c 	xori	r2,r2,32768
 801dc38:	10a00004 	addi	r2,r2,-32768
 801dc3c:	10004b1e 	bne	r2,zero,801dd6c <jpeg_idct_16x8+0x1f8>
			inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 801dc40:	e0bfa117 	ldw	r2,-380(fp)
 801dc44:	10801404 	addi	r2,r2,80
 801dc48:	1080000b 	ldhu	r2,0(r2)
		* With typical images and quantization tables, half or more of the
		* column DCT calculations can be simplified this way.
		*/

		if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
			inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 801dc4c:	10bfffcc 	andi	r2,r2,65535
 801dc50:	10a0001c 	xori	r2,r2,32768
 801dc54:	10a00004 	addi	r2,r2,-32768
 801dc58:	1000441e 	bne	r2,zero,801dd6c <jpeg_idct_16x8+0x1f8>
			inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 801dc5c:	e0bfa117 	ldw	r2,-380(fp)
 801dc60:	10801804 	addi	r2,r2,96
 801dc64:	1080000b 	ldhu	r2,0(r2)
 801dc68:	10bfffcc 	andi	r2,r2,65535
 801dc6c:	10a0001c 	xori	r2,r2,32768
 801dc70:	10a00004 	addi	r2,r2,-32768
 801dc74:	10003d1e 	bne	r2,zero,801dd6c <jpeg_idct_16x8+0x1f8>
			inptr[DCTSIZE*7] == 0) {
 801dc78:	e0bfa117 	ldw	r2,-380(fp)
 801dc7c:	10801c04 	addi	r2,r2,112
 801dc80:	1080000b 	ldhu	r2,0(r2)
		* column DCT calculations can be simplified this way.
		*/

		if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
			inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
			inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 801dc84:	10bfffcc 	andi	r2,r2,65535
 801dc88:	10a0001c 	xori	r2,r2,32768
 801dc8c:	10a00004 	addi	r2,r2,-32768
 801dc90:	1000361e 	bne	r2,zero,801dd6c <jpeg_idct_16x8+0x1f8>
			inptr[DCTSIZE*7] == 0) {
				/* AC terms all zero */
				int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 801dc94:	e0bfa117 	ldw	r2,-380(fp)
 801dc98:	1080000b 	ldhu	r2,0(r2)
 801dc9c:	10ffffcc 	andi	r3,r2,65535
 801dca0:	18e0001c 	xori	r3,r3,32768
 801dca4:	18e00004 	addi	r3,r3,-32768
 801dca8:	e0bfa217 	ldw	r2,-376(fp)
 801dcac:	10800017 	ldw	r2,0(r2)
 801dcb0:	1809883a 	mov	r4,r3
 801dcb4:	100b883a 	mov	r5,r2
 801dcb8:	802c2180 	call	802c218 <__mulsi3>
 801dcbc:	1085883a 	add	r2,r2,r2
 801dcc0:	1085883a 	add	r2,r2,r2
 801dcc4:	e0bfa615 	stw	r2,-360(fp)

				wsptr[DCTSIZE*0] = dcval;
 801dcc8:	e0bfa317 	ldw	r2,-372(fp)
 801dccc:	e0ffa617 	ldw	r3,-360(fp)
 801dcd0:	10c00015 	stw	r3,0(r2)
				wsptr[DCTSIZE*1] = dcval;
 801dcd4:	e0bfa317 	ldw	r2,-372(fp)
 801dcd8:	10800804 	addi	r2,r2,32
 801dcdc:	e0ffa617 	ldw	r3,-360(fp)
 801dce0:	10c00015 	stw	r3,0(r2)
				wsptr[DCTSIZE*2] = dcval;
 801dce4:	e0bfa317 	ldw	r2,-372(fp)
 801dce8:	10801004 	addi	r2,r2,64
 801dcec:	e0ffa617 	ldw	r3,-360(fp)
 801dcf0:	10c00015 	stw	r3,0(r2)
				wsptr[DCTSIZE*3] = dcval;
 801dcf4:	e0bfa317 	ldw	r2,-372(fp)
 801dcf8:	10801804 	addi	r2,r2,96
 801dcfc:	e0ffa617 	ldw	r3,-360(fp)
 801dd00:	10c00015 	stw	r3,0(r2)
				wsptr[DCTSIZE*4] = dcval;
 801dd04:	e0bfa317 	ldw	r2,-372(fp)
 801dd08:	10802004 	addi	r2,r2,128
 801dd0c:	e0ffa617 	ldw	r3,-360(fp)
 801dd10:	10c00015 	stw	r3,0(r2)
				wsptr[DCTSIZE*5] = dcval;
 801dd14:	e0bfa317 	ldw	r2,-372(fp)
 801dd18:	10802804 	addi	r2,r2,160
 801dd1c:	e0ffa617 	ldw	r3,-360(fp)
 801dd20:	10c00015 	stw	r3,0(r2)
				wsptr[DCTSIZE*6] = dcval;
 801dd24:	e0bfa317 	ldw	r2,-372(fp)
 801dd28:	10803004 	addi	r2,r2,192
 801dd2c:	e0ffa617 	ldw	r3,-360(fp)
 801dd30:	10c00015 	stw	r3,0(r2)
				wsptr[DCTSIZE*7] = dcval;
 801dd34:	e0bfa317 	ldw	r2,-372(fp)
 801dd38:	10803804 	addi	r2,r2,224
 801dd3c:	e0ffa617 	ldw	r3,-360(fp)
 801dd40:	10c00015 	stw	r3,0(r2)

				inptr++;			/* advance pointers to next column */
 801dd44:	e0bfa117 	ldw	r2,-380(fp)
 801dd48:	10800084 	addi	r2,r2,2
 801dd4c:	e0bfa115 	stw	r2,-380(fp)
				quantptr++;
 801dd50:	e0bfa217 	ldw	r2,-376(fp)
 801dd54:	10800104 	addi	r2,r2,4
 801dd58:	e0bfa215 	stw	r2,-376(fp)
				wsptr++;
 801dd5c:	e0bfa317 	ldw	r2,-372(fp)
 801dd60:	10800104 	addi	r2,r2,4
 801dd64:	e0bfa315 	stw	r2,-372(fp)
				continue;
 801dd68:	00013106 	br	801e230 <jpeg_idct_16x8+0x6bc>
		}

		/* Even part: reverse the even part of the forward DCT. */
		/* The rotator is sqrt(2)*c(-6). */

		z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801dd6c:	e0bfa117 	ldw	r2,-380(fp)
 801dd70:	10800804 	addi	r2,r2,32
 801dd74:	1080000b 	ldhu	r2,0(r2)
 801dd78:	10ffffcc 	andi	r3,r2,65535
 801dd7c:	18e0001c 	xori	r3,r3,32768
 801dd80:	18e00004 	addi	r3,r3,-32768
 801dd84:	e0bfa217 	ldw	r2,-376(fp)
 801dd88:	10801004 	addi	r2,r2,64
 801dd8c:	10800017 	ldw	r2,0(r2)
 801dd90:	1809883a 	mov	r4,r3
 801dd94:	100b883a 	mov	r5,r2
 801dd98:	802c2180 	call	802c218 <__mulsi3>
 801dd9c:	e0bfa715 	stw	r2,-356(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801dda0:	e0bfa117 	ldw	r2,-380(fp)
 801dda4:	10801804 	addi	r2,r2,96
 801dda8:	1080000b 	ldhu	r2,0(r2)
 801ddac:	10ffffcc 	andi	r3,r2,65535
 801ddb0:	18e0001c 	xori	r3,r3,32768
 801ddb4:	18e00004 	addi	r3,r3,-32768
 801ddb8:	e0bfa217 	ldw	r2,-376(fp)
 801ddbc:	10803004 	addi	r2,r2,192
 801ddc0:	10800017 	ldw	r2,0(r2)
 801ddc4:	1809883a 	mov	r4,r3
 801ddc8:	100b883a 	mov	r5,r2
 801ddcc:	802c2180 	call	802c218 <__mulsi3>
 801ddd0:	e0bfa815 	stw	r2,-352(fp)

		z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 801ddd4:	e0ffa717 	ldw	r3,-356(fp)
 801ddd8:	e0bfa817 	ldw	r2,-352(fp)
 801dddc:	1885883a 	add	r2,r3,r2
 801dde0:	1009883a 	mov	r4,r2
 801dde4:	01445444 	movi	r5,4433
 801dde8:	802c2180 	call	802c218 <__mulsi3>
 801ddec:	e0bfa915 	stw	r2,-348(fp)
		tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 801ddf0:	e13fa717 	ldw	r4,-356(fp)
 801ddf4:	01461f84 	movi	r5,6270
 801ddf8:	802c2180 	call	802c218 <__mulsi3>
 801ddfc:	1007883a 	mov	r3,r2
 801de00:	e0bfa917 	ldw	r2,-348(fp)
 801de04:	1885883a 	add	r2,r3,r2
 801de08:	e0bfaa15 	stw	r2,-344(fp)
		tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 801de0c:	e13fa817 	ldw	r4,-352(fp)
 801de10:	017137c4 	movi	r5,-15137
 801de14:	802c2180 	call	802c218 <__mulsi3>
 801de18:	1007883a 	mov	r3,r2
 801de1c:	e0bfa917 	ldw	r2,-348(fp)
 801de20:	1885883a 	add	r2,r3,r2
 801de24:	e0bfab15 	stw	r2,-340(fp)

		z2 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801de28:	e0bfa117 	ldw	r2,-380(fp)
 801de2c:	1080000b 	ldhu	r2,0(r2)
 801de30:	10ffffcc 	andi	r3,r2,65535
 801de34:	18e0001c 	xori	r3,r3,32768
 801de38:	18e00004 	addi	r3,r3,-32768
 801de3c:	e0bfa217 	ldw	r2,-376(fp)
 801de40:	10800017 	ldw	r2,0(r2)
 801de44:	1809883a 	mov	r4,r3
 801de48:	100b883a 	mov	r5,r2
 801de4c:	802c2180 	call	802c218 <__mulsi3>
 801de50:	e0bfa715 	stw	r2,-356(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801de54:	e0bfa117 	ldw	r2,-380(fp)
 801de58:	10801004 	addi	r2,r2,64
 801de5c:	1080000b 	ldhu	r2,0(r2)
 801de60:	10ffffcc 	andi	r3,r2,65535
 801de64:	18e0001c 	xori	r3,r3,32768
 801de68:	18e00004 	addi	r3,r3,-32768
 801de6c:	e0bfa217 	ldw	r2,-376(fp)
 801de70:	10802004 	addi	r2,r2,128
 801de74:	10800017 	ldw	r2,0(r2)
 801de78:	1809883a 	mov	r4,r3
 801de7c:	100b883a 	mov	r5,r2
 801de80:	802c2180 	call	802c218 <__mulsi3>
 801de84:	e0bfa815 	stw	r2,-352(fp)
		z2 <<= CONST_BITS;
 801de88:	e0bfa717 	ldw	r2,-356(fp)
 801de8c:	1004937a 	slli	r2,r2,13
 801de90:	e0bfa715 	stw	r2,-356(fp)
		z3 <<= CONST_BITS;
 801de94:	e0bfa817 	ldw	r2,-352(fp)
 801de98:	1004937a 	slli	r2,r2,13
 801de9c:	e0bfa815 	stw	r2,-352(fp)
		/* Add fudge factor here for final descale. */
		z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 801dea0:	e0bfa717 	ldw	r2,-356(fp)
 801dea4:	10810004 	addi	r2,r2,1024
 801dea8:	e0bfa715 	stw	r2,-356(fp)

		tmp0 = z2 + z3;
 801deac:	e0ffa717 	ldw	r3,-356(fp)
 801deb0:	e0bfa817 	ldw	r2,-352(fp)
 801deb4:	1885883a 	add	r2,r3,r2
 801deb8:	e0bfac15 	stw	r2,-336(fp)
		tmp1 = z2 - z3;
 801debc:	e0ffa717 	ldw	r3,-356(fp)
 801dec0:	e0bfa817 	ldw	r2,-352(fp)
 801dec4:	1885c83a 	sub	r2,r3,r2
 801dec8:	e0bfad15 	stw	r2,-332(fp)

		tmp10 = tmp0 + tmp2;
 801decc:	e0ffac17 	ldw	r3,-336(fp)
 801ded0:	e0bfaa17 	ldw	r2,-344(fp)
 801ded4:	1885883a 	add	r2,r3,r2
 801ded8:	e0bfae15 	stw	r2,-328(fp)
		tmp13 = tmp0 - tmp2;
 801dedc:	e0ffac17 	ldw	r3,-336(fp)
 801dee0:	e0bfaa17 	ldw	r2,-344(fp)
 801dee4:	1885c83a 	sub	r2,r3,r2
 801dee8:	e0bfaf15 	stw	r2,-324(fp)
		tmp11 = tmp1 + tmp3;
 801deec:	e0ffad17 	ldw	r3,-332(fp)
 801def0:	e0bfab17 	ldw	r2,-340(fp)
 801def4:	1885883a 	add	r2,r3,r2
 801def8:	e0bfb015 	stw	r2,-320(fp)
		tmp12 = tmp1 - tmp3;
 801defc:	e0ffad17 	ldw	r3,-332(fp)
 801df00:	e0bfab17 	ldw	r2,-340(fp)
 801df04:	1885c83a 	sub	r2,r3,r2
 801df08:	e0bfb115 	stw	r2,-316(fp)

		/* Odd part per figure 8; the matrix is unitary and hence its
		* transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
		*/

		tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801df0c:	e0bfa117 	ldw	r2,-380(fp)
 801df10:	10801c04 	addi	r2,r2,112
 801df14:	1080000b 	ldhu	r2,0(r2)
 801df18:	10ffffcc 	andi	r3,r2,65535
 801df1c:	18e0001c 	xori	r3,r3,32768
 801df20:	18e00004 	addi	r3,r3,-32768
 801df24:	e0bfa217 	ldw	r2,-376(fp)
 801df28:	10803804 	addi	r2,r2,224
 801df2c:	10800017 	ldw	r2,0(r2)
 801df30:	1809883a 	mov	r4,r3
 801df34:	100b883a 	mov	r5,r2
 801df38:	802c2180 	call	802c218 <__mulsi3>
 801df3c:	e0bfac15 	stw	r2,-336(fp)
		tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801df40:	e0bfa117 	ldw	r2,-380(fp)
 801df44:	10801404 	addi	r2,r2,80
 801df48:	1080000b 	ldhu	r2,0(r2)
 801df4c:	10ffffcc 	andi	r3,r2,65535
 801df50:	18e0001c 	xori	r3,r3,32768
 801df54:	18e00004 	addi	r3,r3,-32768
 801df58:	e0bfa217 	ldw	r2,-376(fp)
 801df5c:	10802804 	addi	r2,r2,160
 801df60:	10800017 	ldw	r2,0(r2)
 801df64:	1809883a 	mov	r4,r3
 801df68:	100b883a 	mov	r5,r2
 801df6c:	802c2180 	call	802c218 <__mulsi3>
 801df70:	e0bfad15 	stw	r2,-332(fp)
		tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801df74:	e0bfa117 	ldw	r2,-380(fp)
 801df78:	10800c04 	addi	r2,r2,48
 801df7c:	1080000b 	ldhu	r2,0(r2)
 801df80:	10ffffcc 	andi	r3,r2,65535
 801df84:	18e0001c 	xori	r3,r3,32768
 801df88:	18e00004 	addi	r3,r3,-32768
 801df8c:	e0bfa217 	ldw	r2,-376(fp)
 801df90:	10801804 	addi	r2,r2,96
 801df94:	10800017 	ldw	r2,0(r2)
 801df98:	1809883a 	mov	r4,r3
 801df9c:	100b883a 	mov	r5,r2
 801dfa0:	802c2180 	call	802c218 <__mulsi3>
 801dfa4:	e0bfaa15 	stw	r2,-344(fp)
		tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801dfa8:	e0bfa117 	ldw	r2,-380(fp)
 801dfac:	10800404 	addi	r2,r2,16
 801dfb0:	1080000b 	ldhu	r2,0(r2)
 801dfb4:	10ffffcc 	andi	r3,r2,65535
 801dfb8:	18e0001c 	xori	r3,r3,32768
 801dfbc:	18e00004 	addi	r3,r3,-32768
 801dfc0:	e0bfa217 	ldw	r2,-376(fp)
 801dfc4:	10800804 	addi	r2,r2,32
 801dfc8:	10800017 	ldw	r2,0(r2)
 801dfcc:	1809883a 	mov	r4,r3
 801dfd0:	100b883a 	mov	r5,r2
 801dfd4:	802c2180 	call	802c218 <__mulsi3>
 801dfd8:	e0bfab15 	stw	r2,-340(fp)

		z2 = tmp0 + tmp2;
 801dfdc:	e0ffac17 	ldw	r3,-336(fp)
 801dfe0:	e0bfaa17 	ldw	r2,-344(fp)
 801dfe4:	1885883a 	add	r2,r3,r2
 801dfe8:	e0bfa715 	stw	r2,-356(fp)
		z3 = tmp1 + tmp3;
 801dfec:	e0ffad17 	ldw	r3,-332(fp)
 801dff0:	e0bfab17 	ldw	r2,-340(fp)
 801dff4:	1885883a 	add	r2,r3,r2
 801dff8:	e0bfa815 	stw	r2,-352(fp)

		z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 801dffc:	e0ffa717 	ldw	r3,-356(fp)
 801e000:	e0bfa817 	ldw	r2,-352(fp)
 801e004:	1885883a 	add	r2,r3,r2
 801e008:	1009883a 	mov	r4,r2
 801e00c:	01496844 	movi	r5,9633
 801e010:	802c2180 	call	802c218 <__mulsi3>
 801e014:	e0bfa915 	stw	r2,-348(fp)
		z2 = MULTIPLY(z2, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
 801e018:	e13fa717 	ldw	r4,-356(fp)
 801e01c:	01704ec4 	movi	r5,-16069
 801e020:	802c2180 	call	802c218 <__mulsi3>
 801e024:	e0bfa715 	stw	r2,-356(fp)
		z3 = MULTIPLY(z3, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
 801e028:	e13fa817 	ldw	r4,-352(fp)
 801e02c:	017ce104 	movi	r5,-3196
 801e030:	802c2180 	call	802c218 <__mulsi3>
 801e034:	e0bfa815 	stw	r2,-352(fp)
		z2 += z1;
 801e038:	e0ffa717 	ldw	r3,-356(fp)
 801e03c:	e0bfa917 	ldw	r2,-348(fp)
 801e040:	1885883a 	add	r2,r3,r2
 801e044:	e0bfa715 	stw	r2,-356(fp)
		z3 += z1;
 801e048:	e0ffa817 	ldw	r3,-352(fp)
 801e04c:	e0bfa917 	ldw	r2,-348(fp)
 801e050:	1885883a 	add	r2,r3,r2
 801e054:	e0bfa815 	stw	r2,-352(fp)

		z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 801e058:	e0ffac17 	ldw	r3,-336(fp)
 801e05c:	e0bfab17 	ldw	r2,-340(fp)
 801e060:	1885883a 	add	r2,r3,r2
 801e064:	1009883a 	mov	r4,r2
 801e068:	0178ccc4 	movi	r5,-7373
 801e06c:	802c2180 	call	802c218 <__mulsi3>
 801e070:	e0bfa915 	stw	r2,-348(fp)
		tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
 801e074:	e13fac17 	ldw	r4,-336(fp)
 801e078:	01426384 	movi	r5,2446
 801e07c:	802c2180 	call	802c218 <__mulsi3>
 801e080:	e0bfac15 	stw	r2,-336(fp)
		tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
 801e084:	e13fab17 	ldw	r4,-340(fp)
 801e088:	014c02c4 	movi	r5,12299
 801e08c:	802c2180 	call	802c218 <__mulsi3>
 801e090:	e0bfab15 	stw	r2,-340(fp)
		tmp0 += z1 + z2;
 801e094:	e0ffa917 	ldw	r3,-348(fp)
 801e098:	e0bfa717 	ldw	r2,-356(fp)
 801e09c:	1885883a 	add	r2,r3,r2
 801e0a0:	e0ffac17 	ldw	r3,-336(fp)
 801e0a4:	1885883a 	add	r2,r3,r2
 801e0a8:	e0bfac15 	stw	r2,-336(fp)
		tmp3 += z1 + z3;
 801e0ac:	e0ffa917 	ldw	r3,-348(fp)
 801e0b0:	e0bfa817 	ldw	r2,-352(fp)
 801e0b4:	1885883a 	add	r2,r3,r2
 801e0b8:	e0ffab17 	ldw	r3,-340(fp)
 801e0bc:	1885883a 	add	r2,r3,r2
 801e0c0:	e0bfab15 	stw	r2,-340(fp)

		z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 801e0c4:	e0ffad17 	ldw	r3,-332(fp)
 801e0c8:	e0bfaa17 	ldw	r2,-344(fp)
 801e0cc:	1885883a 	add	r2,r3,r2
 801e0d0:	1009883a 	mov	r4,r2
 801e0d4:	016b7f44 	movi	r5,-20995
 801e0d8:	802c2180 	call	802c218 <__mulsi3>
 801e0dc:	e0bfa915 	stw	r2,-348(fp)
		tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
 801e0e0:	e13fad17 	ldw	r4,-332(fp)
 801e0e4:	01506cc4 	movi	r5,16819
 801e0e8:	802c2180 	call	802c218 <__mulsi3>
 801e0ec:	e0bfad15 	stw	r2,-332(fp)
		tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
 801e0f0:	e13faa17 	ldw	r4,-344(fp)
 801e0f4:	01589504 	movi	r5,25172
 801e0f8:	802c2180 	call	802c218 <__mulsi3>
 801e0fc:	e0bfaa15 	stw	r2,-344(fp)
		tmp1 += z1 + z3;
 801e100:	e0ffa917 	ldw	r3,-348(fp)
 801e104:	e0bfa817 	ldw	r2,-352(fp)
 801e108:	1885883a 	add	r2,r3,r2
 801e10c:	e0ffad17 	ldw	r3,-332(fp)
 801e110:	1885883a 	add	r2,r3,r2
 801e114:	e0bfad15 	stw	r2,-332(fp)
		tmp2 += z1 + z2;
 801e118:	e0ffa917 	ldw	r3,-348(fp)
 801e11c:	e0bfa717 	ldw	r2,-356(fp)
 801e120:	1885883a 	add	r2,r3,r2
 801e124:	e0ffaa17 	ldw	r3,-344(fp)
 801e128:	1885883a 	add	r2,r3,r2
 801e12c:	e0bfaa15 	stw	r2,-344(fp)

		/* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */

		wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 801e130:	e0ffae17 	ldw	r3,-328(fp)
 801e134:	e0bfab17 	ldw	r2,-340(fp)
 801e138:	1885883a 	add	r2,r3,r2
 801e13c:	1007d2fa 	srai	r3,r2,11
 801e140:	e0bfa317 	ldw	r2,-372(fp)
 801e144:	10c00015 	stw	r3,0(r2)
		wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 801e148:	e0bfa317 	ldw	r2,-372(fp)
 801e14c:	10803804 	addi	r2,r2,224
 801e150:	e13fae17 	ldw	r4,-328(fp)
 801e154:	e0ffab17 	ldw	r3,-340(fp)
 801e158:	20c7c83a 	sub	r3,r4,r3
 801e15c:	1807d2fa 	srai	r3,r3,11
 801e160:	10c00015 	stw	r3,0(r2)
		wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 801e164:	e0bfa317 	ldw	r2,-372(fp)
 801e168:	10800804 	addi	r2,r2,32
 801e16c:	e13fb017 	ldw	r4,-320(fp)
 801e170:	e0ffaa17 	ldw	r3,-344(fp)
 801e174:	20c7883a 	add	r3,r4,r3
 801e178:	1807d2fa 	srai	r3,r3,11
 801e17c:	10c00015 	stw	r3,0(r2)
		wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 801e180:	e0bfa317 	ldw	r2,-372(fp)
 801e184:	10803004 	addi	r2,r2,192
 801e188:	e13fb017 	ldw	r4,-320(fp)
 801e18c:	e0ffaa17 	ldw	r3,-344(fp)
 801e190:	20c7c83a 	sub	r3,r4,r3
 801e194:	1807d2fa 	srai	r3,r3,11
 801e198:	10c00015 	stw	r3,0(r2)
		wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 801e19c:	e0bfa317 	ldw	r2,-372(fp)
 801e1a0:	10801004 	addi	r2,r2,64
 801e1a4:	e13fb117 	ldw	r4,-316(fp)
 801e1a8:	e0ffad17 	ldw	r3,-332(fp)
 801e1ac:	20c7883a 	add	r3,r4,r3
 801e1b0:	1807d2fa 	srai	r3,r3,11
 801e1b4:	10c00015 	stw	r3,0(r2)
		wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 801e1b8:	e0bfa317 	ldw	r2,-372(fp)
 801e1bc:	10802804 	addi	r2,r2,160
 801e1c0:	e13fb117 	ldw	r4,-316(fp)
 801e1c4:	e0ffad17 	ldw	r3,-332(fp)
 801e1c8:	20c7c83a 	sub	r3,r4,r3
 801e1cc:	1807d2fa 	srai	r3,r3,11
 801e1d0:	10c00015 	stw	r3,0(r2)
		wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 801e1d4:	e0bfa317 	ldw	r2,-372(fp)
 801e1d8:	10801804 	addi	r2,r2,96
 801e1dc:	e13faf17 	ldw	r4,-324(fp)
 801e1e0:	e0ffac17 	ldw	r3,-336(fp)
 801e1e4:	20c7883a 	add	r3,r4,r3
 801e1e8:	1807d2fa 	srai	r3,r3,11
 801e1ec:	10c00015 	stw	r3,0(r2)
		wsptr[DCTSIZE*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 801e1f0:	e0bfa317 	ldw	r2,-372(fp)
 801e1f4:	10802004 	addi	r2,r2,128
 801e1f8:	e13faf17 	ldw	r4,-324(fp)
 801e1fc:	e0ffac17 	ldw	r3,-336(fp)
 801e200:	20c7c83a 	sub	r3,r4,r3
 801e204:	1807d2fa 	srai	r3,r3,11
 801e208:	10c00015 	stw	r3,0(r2)

		inptr++;			/* advance pointers to next column */
 801e20c:	e0bfa117 	ldw	r2,-380(fp)
 801e210:	10800084 	addi	r2,r2,2
 801e214:	e0bfa115 	stw	r2,-380(fp)
		quantptr++;
 801e218:	e0bfa217 	ldw	r2,-376(fp)
 801e21c:	10800104 	addi	r2,r2,4
 801e220:	e0bfa215 	stw	r2,-376(fp)
		wsptr++;
 801e224:	e0bfa317 	ldw	r2,-372(fp)
 801e228:	10800104 	addi	r2,r2,4
 801e22c:	e0bfa315 	stw	r2,-372(fp)
		/* furthermore, we scale the results by 2**PASS1_BITS. */

		inptr = coef_block;
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
	wsptr = workspace;
	for (ctr = DCTSIZE; ctr > 0; ctr--) {
 801e230:	e0bfa417 	ldw	r2,-368(fp)
 801e234:	10bfffc4 	addi	r2,r2,-1
 801e238:	e0bfa415 	stw	r2,-368(fp)
 801e23c:	e0bfa417 	ldw	r2,-368(fp)
 801e240:	00be6316 	blt	zero,r2,801dbd0 <jpeg_idct_16x8+0x5c>
	}

	/* Pass 2: process 8 rows from work array, store into output array.
	* 16-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/32).
	*/
	wsptr = workspace;
 801e244:	e0bfbc04 	addi	r2,fp,-272
 801e248:	e0bfa315 	stw	r2,-372(fp)
	for (ctr = 0; ctr < 8; ctr++) {
 801e24c:	e03fa415 	stw	zero,-368(fp)
 801e250:	0001f306 	br	801ea20 <jpeg_idct_16x8+0xeac>
		outptr = output_buf[ctr] + output_col;
 801e254:	e0bfa417 	ldw	r2,-368(fp)
 801e258:	1085883a 	add	r2,r2,r2
 801e25c:	1085883a 	add	r2,r2,r2
 801e260:	e0ffff17 	ldw	r3,-4(fp)
 801e264:	1885883a 	add	r2,r3,r2
 801e268:	10c00017 	ldw	r3,0(r2)
 801e26c:	e0800317 	ldw	r2,12(fp)
 801e270:	1885883a 	add	r2,r3,r2
 801e274:	e0bfb215 	stw	r2,-312(fp)

		/* Even part */

		/* Add fudge factor here for final descale. */
		tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801e278:	e0bfa317 	ldw	r2,-372(fp)
 801e27c:	10800017 	ldw	r2,0(r2)
 801e280:	10800404 	addi	r2,r2,16
 801e284:	e0bfac15 	stw	r2,-336(fp)
		tmp0 <<= CONST_BITS;
 801e288:	e0bfac17 	ldw	r2,-336(fp)
 801e28c:	1004937a 	slli	r2,r2,13
 801e290:	e0bfac15 	stw	r2,-336(fp)

		z1 = (INT32) wsptr[4];
 801e294:	e0bfa317 	ldw	r2,-372(fp)
 801e298:	10800404 	addi	r2,r2,16
 801e29c:	10800017 	ldw	r2,0(r2)
 801e2a0:	e0bfa915 	stw	r2,-348(fp)
		tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 801e2a4:	e13fa917 	ldw	r4,-348(fp)
 801e2a8:	014a73c4 	movi	r5,10703
 801e2ac:	802c2180 	call	802c218 <__mulsi3>
 801e2b0:	e0bfad15 	stw	r2,-332(fp)
		tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 801e2b4:	e13fa917 	ldw	r4,-348(fp)
 801e2b8:	01445444 	movi	r5,4433
 801e2bc:	802c2180 	call	802c218 <__mulsi3>
 801e2c0:	e0bfaa15 	stw	r2,-344(fp)

		tmp10 = tmp0 + tmp1;
 801e2c4:	e0ffac17 	ldw	r3,-336(fp)
 801e2c8:	e0bfad17 	ldw	r2,-332(fp)
 801e2cc:	1885883a 	add	r2,r3,r2
 801e2d0:	e0bfae15 	stw	r2,-328(fp)
		tmp11 = tmp0 - tmp1;
 801e2d4:	e0ffac17 	ldw	r3,-336(fp)
 801e2d8:	e0bfad17 	ldw	r2,-332(fp)
 801e2dc:	1885c83a 	sub	r2,r3,r2
 801e2e0:	e0bfb015 	stw	r2,-320(fp)
		tmp12 = tmp0 + tmp2;
 801e2e4:	e0ffac17 	ldw	r3,-336(fp)
 801e2e8:	e0bfaa17 	ldw	r2,-344(fp)
 801e2ec:	1885883a 	add	r2,r3,r2
 801e2f0:	e0bfb115 	stw	r2,-316(fp)
		tmp13 = tmp0 - tmp2;
 801e2f4:	e0ffac17 	ldw	r3,-336(fp)
 801e2f8:	e0bfaa17 	ldw	r2,-344(fp)
 801e2fc:	1885c83a 	sub	r2,r3,r2
 801e300:	e0bfaf15 	stw	r2,-324(fp)

		z1 = (INT32) wsptr[2];
 801e304:	e0bfa317 	ldw	r2,-372(fp)
 801e308:	10800204 	addi	r2,r2,8
 801e30c:	10800017 	ldw	r2,0(r2)
 801e310:	e0bfa915 	stw	r2,-348(fp)
		z2 = (INT32) wsptr[6];
 801e314:	e0bfa317 	ldw	r2,-372(fp)
 801e318:	10800604 	addi	r2,r2,24
 801e31c:	10800017 	ldw	r2,0(r2)
 801e320:	e0bfa715 	stw	r2,-356(fp)
		z3 = z1 - z2;
 801e324:	e0ffa917 	ldw	r3,-348(fp)
 801e328:	e0bfa717 	ldw	r2,-356(fp)
 801e32c:	1885c83a 	sub	r2,r3,r2
 801e330:	e0bfa815 	stw	r2,-352(fp)
		z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 801e334:	e13fa817 	ldw	r4,-352(fp)
 801e338:	01423504 	movi	r5,2260
 801e33c:	802c2180 	call	802c218 <__mulsi3>
 801e340:	e0bfb315 	stw	r2,-308(fp)
		z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 801e344:	e13fa817 	ldw	r4,-352(fp)
 801e348:	014b18c4 	movi	r5,11363
 801e34c:	802c2180 	call	802c218 <__mulsi3>
 801e350:	e0bfa815 	stw	r2,-352(fp)

		tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 801e354:	e13fa717 	ldw	r4,-356(fp)
 801e358:	015480c4 	movi	r5,20995
 801e35c:	802c2180 	call	802c218 <__mulsi3>
 801e360:	1007883a 	mov	r3,r2
 801e364:	e0bfa817 	ldw	r2,-352(fp)
 801e368:	1885883a 	add	r2,r3,r2
 801e36c:	e0bfac15 	stw	r2,-336(fp)
		tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 801e370:	e13fa917 	ldw	r4,-348(fp)
 801e374:	01473344 	movi	r5,7373
 801e378:	802c2180 	call	802c218 <__mulsi3>
 801e37c:	1007883a 	mov	r3,r2
 801e380:	e0bfb317 	ldw	r2,-308(fp)
 801e384:	1885883a 	add	r2,r3,r2
 801e388:	e0bfad15 	stw	r2,-332(fp)
		tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 801e38c:	e13fa917 	ldw	r4,-348(fp)
 801e390:	017b3084 	movi	r5,-4926
 801e394:	802c2180 	call	802c218 <__mulsi3>
 801e398:	1007883a 	mov	r3,r2
 801e39c:	e0bfa817 	ldw	r2,-352(fp)
 801e3a0:	1885883a 	add	r2,r3,r2
 801e3a4:	e0bfaa15 	stw	r2,-344(fp)
		tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 801e3a8:	e13fa717 	ldw	r4,-356(fp)
 801e3ac:	017bec04 	movi	r5,-4176
 801e3b0:	802c2180 	call	802c218 <__mulsi3>
 801e3b4:	1007883a 	mov	r3,r2
 801e3b8:	e0bfb317 	ldw	r2,-308(fp)
 801e3bc:	1885883a 	add	r2,r3,r2
 801e3c0:	e0bfab15 	stw	r2,-340(fp)

		tmp20 = tmp10 + tmp0;
 801e3c4:	e0ffae17 	ldw	r3,-328(fp)
 801e3c8:	e0bfac17 	ldw	r2,-336(fp)
 801e3cc:	1885883a 	add	r2,r3,r2
 801e3d0:	e0bfb415 	stw	r2,-304(fp)
		tmp27 = tmp10 - tmp0;
 801e3d4:	e0ffae17 	ldw	r3,-328(fp)
 801e3d8:	e0bfac17 	ldw	r2,-336(fp)
 801e3dc:	1885c83a 	sub	r2,r3,r2
 801e3e0:	e0bfb515 	stw	r2,-300(fp)
		tmp21 = tmp12 + tmp1;
 801e3e4:	e0ffb117 	ldw	r3,-316(fp)
 801e3e8:	e0bfad17 	ldw	r2,-332(fp)
 801e3ec:	1885883a 	add	r2,r3,r2
 801e3f0:	e0bfb615 	stw	r2,-296(fp)
		tmp26 = tmp12 - tmp1;
 801e3f4:	e0ffb117 	ldw	r3,-316(fp)
 801e3f8:	e0bfad17 	ldw	r2,-332(fp)
 801e3fc:	1885c83a 	sub	r2,r3,r2
 801e400:	e0bfb715 	stw	r2,-292(fp)
		tmp22 = tmp13 + tmp2;
 801e404:	e0ffaf17 	ldw	r3,-324(fp)
 801e408:	e0bfaa17 	ldw	r2,-344(fp)
 801e40c:	1885883a 	add	r2,r3,r2
 801e410:	e0bfb815 	stw	r2,-288(fp)
		tmp25 = tmp13 - tmp2;
 801e414:	e0ffaf17 	ldw	r3,-324(fp)
 801e418:	e0bfaa17 	ldw	r2,-344(fp)
 801e41c:	1885c83a 	sub	r2,r3,r2
 801e420:	e0bfb915 	stw	r2,-284(fp)
		tmp23 = tmp11 + tmp3;
 801e424:	e0ffb017 	ldw	r3,-320(fp)
 801e428:	e0bfab17 	ldw	r2,-340(fp)
 801e42c:	1885883a 	add	r2,r3,r2
 801e430:	e0bfba15 	stw	r2,-280(fp)
		tmp24 = tmp11 - tmp3;
 801e434:	e0ffb017 	ldw	r3,-320(fp)
 801e438:	e0bfab17 	ldw	r2,-340(fp)
 801e43c:	1885c83a 	sub	r2,r3,r2
 801e440:	e0bfbb15 	stw	r2,-276(fp)

		/* Odd part */

		z1 = (INT32) wsptr[1];
 801e444:	e0bfa317 	ldw	r2,-372(fp)
 801e448:	10800104 	addi	r2,r2,4
 801e44c:	10800017 	ldw	r2,0(r2)
 801e450:	e0bfa915 	stw	r2,-348(fp)
		z2 = (INT32) wsptr[3];
 801e454:	e0bfa317 	ldw	r2,-372(fp)
 801e458:	10800304 	addi	r2,r2,12
 801e45c:	10800017 	ldw	r2,0(r2)
 801e460:	e0bfa715 	stw	r2,-356(fp)
		z3 = (INT32) wsptr[5];
 801e464:	e0bfa317 	ldw	r2,-372(fp)
 801e468:	10800504 	addi	r2,r2,20
 801e46c:	10800017 	ldw	r2,0(r2)
 801e470:	e0bfa815 	stw	r2,-352(fp)
		z4 = (INT32) wsptr[7];
 801e474:	e0bfa317 	ldw	r2,-372(fp)
 801e478:	10800704 	addi	r2,r2,28
 801e47c:	10800017 	ldw	r2,0(r2)
 801e480:	e0bfb315 	stw	r2,-308(fp)

		tmp11 = z1 + z3;
 801e484:	e0ffa917 	ldw	r3,-348(fp)
 801e488:	e0bfa817 	ldw	r2,-352(fp)
 801e48c:	1885883a 	add	r2,r3,r2
 801e490:	e0bfb015 	stw	r2,-320(fp)

		tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 801e494:	e0ffa917 	ldw	r3,-348(fp)
 801e498:	e0bfa717 	ldw	r2,-356(fp)
 801e49c:	1885883a 	add	r2,r3,r2
 801e4a0:	1009883a 	mov	r4,r2
 801e4a4:	014ad384 	movi	r5,11086
 801e4a8:	802c2180 	call	802c218 <__mulsi3>
 801e4ac:	e0bfad15 	stw	r2,-332(fp)
		tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 801e4b0:	e13fb017 	ldw	r4,-320(fp)
 801e4b4:	0149fa44 	movi	r5,10217
 801e4b8:	802c2180 	call	802c218 <__mulsi3>
 801e4bc:	e0bfaa15 	stw	r2,-344(fp)
		tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 801e4c0:	e0ffa917 	ldw	r3,-348(fp)
 801e4c4:	e0bfb317 	ldw	r2,-308(fp)
 801e4c8:	1885883a 	add	r2,r3,r2
 801e4cc:	1009883a 	mov	r4,r2
 801e4d0:	0148bf04 	movi	r5,8956
 801e4d4:	802c2180 	call	802c218 <__mulsi3>
 801e4d8:	e0bfab15 	stw	r2,-340(fp)
		tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 801e4dc:	e0ffa917 	ldw	r3,-348(fp)
 801e4e0:	e0bfb317 	ldw	r2,-308(fp)
 801e4e4:	1885c83a 	sub	r2,r3,r2
 801e4e8:	1009883a 	mov	r4,r2
 801e4ec:	01472d84 	movi	r5,7350
 801e4f0:	802c2180 	call	802c218 <__mulsi3>
 801e4f4:	e0bfae15 	stw	r2,-328(fp)
		tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 801e4f8:	e13fb017 	ldw	r4,-320(fp)
 801e4fc:	01455544 	movi	r5,5461
 801e500:	802c2180 	call	802c218 <__mulsi3>
 801e504:	e0bfb015 	stw	r2,-320(fp)
		tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 801e508:	e0ffa917 	ldw	r3,-348(fp)
 801e50c:	e0bfa717 	ldw	r2,-356(fp)
 801e510:	1885c83a 	sub	r2,r3,r2
 801e514:	1009883a 	mov	r4,r2
 801e518:	014348c4 	movi	r5,3363
 801e51c:	802c2180 	call	802c218 <__mulsi3>
 801e520:	e0bfb115 	stw	r2,-316(fp)
		tmp0  = tmp1 + tmp2 + tmp3 -
 801e524:	e0ffad17 	ldw	r3,-332(fp)
 801e528:	e0bfaa17 	ldw	r2,-344(fp)
 801e52c:	1887883a 	add	r3,r3,r2
 801e530:	e0bfab17 	ldw	r2,-340(fp)
 801e534:	18a1883a 	add	r16,r3,r2
			MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
 801e538:	e13fa917 	ldw	r4,-348(fp)
 801e53c:	016db584 	movi	r5,-18730
 801e540:	802c2180 	call	802c218 <__mulsi3>
		tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
		tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
		tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
		tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
		tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
		tmp0  = tmp1 + tmp2 + tmp3 -
 801e544:	8085883a 	add	r2,r16,r2
 801e548:	e0bfac15 	stw	r2,-336(fp)
			MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
		tmp13 = tmp10 + tmp11 + tmp12 -
 801e54c:	e0ffae17 	ldw	r3,-328(fp)
 801e550:	e0bfb017 	ldw	r2,-320(fp)
 801e554:	1887883a 	add	r3,r3,r2
 801e558:	e0bfb117 	ldw	r2,-316(fp)
 801e55c:	18a1883a 	add	r16,r3,r2
			MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
 801e560:	e13fa917 	ldw	r4,-348(fp)
 801e564:	01715084 	movi	r5,-15038
 801e568:	802c2180 	call	802c218 <__mulsi3>
		tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
		tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
		tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
		tmp0  = tmp1 + tmp2 + tmp3 -
			MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
		tmp13 = tmp10 + tmp11 + tmp12 -
 801e56c:	8085883a 	add	r2,r16,r2
 801e570:	e0bfaf15 	stw	r2,-324(fp)
			MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
		z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 801e574:	e0ffa717 	ldw	r3,-356(fp)
 801e578:	e0bfa817 	ldw	r2,-352(fp)
 801e57c:	1885883a 	add	r2,r3,r2
 801e580:	1009883a 	mov	r4,r2
 801e584:	01411c04 	movi	r5,1136
 801e588:	802c2180 	call	802c218 <__mulsi3>
 801e58c:	e0bfa915 	stw	r2,-348(fp)
		tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 801e590:	e13fa717 	ldw	r4,-356(fp)
 801e594:	01409344 	movi	r5,589
 801e598:	802c2180 	call	802c218 <__mulsi3>
 801e59c:	1007883a 	mov	r3,r2
 801e5a0:	e0bfa917 	ldw	r2,-348(fp)
 801e5a4:	1885883a 	add	r2,r3,r2
 801e5a8:	e0ffad17 	ldw	r3,-332(fp)
 801e5ac:	1885883a 	add	r2,r3,r2
 801e5b0:	e0bfad15 	stw	r2,-332(fp)
		tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 801e5b4:	e13fa817 	ldw	r4,-352(fp)
 801e5b8:	0176fe84 	movi	r5,-9222
 801e5bc:	802c2180 	call	802c218 <__mulsi3>
 801e5c0:	1007883a 	mov	r3,r2
 801e5c4:	e0bfa917 	ldw	r2,-348(fp)
 801e5c8:	1885883a 	add	r2,r3,r2
 801e5cc:	e0ffaa17 	ldw	r3,-344(fp)
 801e5d0:	1885883a 	add	r2,r3,r2
 801e5d4:	e0bfaa15 	stw	r2,-344(fp)
		z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 801e5d8:	e0ffa817 	ldw	r3,-352(fp)
 801e5dc:	e0bfa717 	ldw	r2,-356(fp)
 801e5e0:	1885c83a 	sub	r2,r3,r2
 801e5e4:	1009883a 	mov	r4,r2
 801e5e8:	014b4244 	movi	r5,11529
 801e5ec:	802c2180 	call	802c218 <__mulsi3>
 801e5f0:	e0bfa915 	stw	r2,-348(fp)
		tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 801e5f4:	e13fa817 	ldw	r4,-352(fp)
 801e5f8:	0179de84 	movi	r5,-6278
 801e5fc:	802c2180 	call	802c218 <__mulsi3>
 801e600:	1007883a 	mov	r3,r2
 801e604:	e0bfa917 	ldw	r2,-348(fp)
 801e608:	1885883a 	add	r2,r3,r2
 801e60c:	e0ffb017 	ldw	r3,-320(fp)
 801e610:	1885883a 	add	r2,r3,r2
 801e614:	e0bfb015 	stw	r2,-320(fp)
		tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 801e618:	e13fa717 	ldw	r4,-356(fp)
 801e61c:	014fc684 	movi	r5,16154
 801e620:	802c2180 	call	802c218 <__mulsi3>
 801e624:	1007883a 	mov	r3,r2
 801e628:	e0bfa917 	ldw	r2,-348(fp)
 801e62c:	1885883a 	add	r2,r3,r2
 801e630:	e0ffb117 	ldw	r3,-316(fp)
 801e634:	1885883a 	add	r2,r3,r2
 801e638:	e0bfb115 	stw	r2,-316(fp)
		z2    += z4;
 801e63c:	e0ffa717 	ldw	r3,-356(fp)
 801e640:	e0bfb317 	ldw	r2,-308(fp)
 801e644:	1885883a 	add	r2,r3,r2
 801e648:	e0bfa715 	stw	r2,-356(fp)
		z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 801e64c:	e13fa717 	ldw	r4,-356(fp)
 801e650:	017aaac4 	movi	r5,-5461
 801e654:	802c2180 	call	802c218 <__mulsi3>
 801e658:	e0bfa915 	stw	r2,-348(fp)
		tmp1  += z1;
 801e65c:	e0ffad17 	ldw	r3,-332(fp)
 801e660:	e0bfa917 	ldw	r2,-348(fp)
 801e664:	1885883a 	add	r2,r3,r2
 801e668:	e0bfad15 	stw	r2,-332(fp)
		tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 801e66c:	e13fb317 	ldw	r4,-308(fp)
 801e670:	01488604 	movi	r5,8728
 801e674:	802c2180 	call	802c218 <__mulsi3>
 801e678:	1007883a 	mov	r3,r2
 801e67c:	e0bfa917 	ldw	r2,-348(fp)
 801e680:	1885883a 	add	r2,r3,r2
 801e684:	e0ffab17 	ldw	r3,-340(fp)
 801e688:	1885883a 	add	r2,r3,r2
 801e68c:	e0bfab15 	stw	r2,-340(fp)
		z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 801e690:	e13fa717 	ldw	r4,-356(fp)
 801e694:	017605c4 	movi	r5,-10217
 801e698:	802c2180 	call	802c218 <__mulsi3>
 801e69c:	e0bfa715 	stw	r2,-356(fp)
		tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 801e6a0:	e13fb317 	ldw	r4,-308(fp)
 801e6a4:	01592144 	movi	r5,25733
 801e6a8:	802c2180 	call	802c218 <__mulsi3>
 801e6ac:	1007883a 	mov	r3,r2
 801e6b0:	e0bfa717 	ldw	r2,-356(fp)
 801e6b4:	1885883a 	add	r2,r3,r2
 801e6b8:	e0ffae17 	ldw	r3,-328(fp)
 801e6bc:	1885883a 	add	r2,r3,r2
 801e6c0:	e0bfae15 	stw	r2,-328(fp)
		tmp12 += z2;
 801e6c4:	e0ffb117 	ldw	r3,-316(fp)
 801e6c8:	e0bfa717 	ldw	r2,-356(fp)
 801e6cc:	1885883a 	add	r2,r3,r2
 801e6d0:	e0bfb115 	stw	r2,-316(fp)
		z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 801e6d4:	e0ffa817 	ldw	r3,-352(fp)
 801e6d8:	e0bfb317 	ldw	r2,-308(fp)
 801e6dc:	1885883a 	add	r2,r3,r2
 801e6e0:	1009883a 	mov	r4,r2
 801e6e4:	01752c84 	movi	r5,-11086
 801e6e8:	802c2180 	call	802c218 <__mulsi3>
 801e6ec:	e0bfa715 	stw	r2,-356(fp)
		tmp2  += z2;
 801e6f0:	e0ffaa17 	ldw	r3,-344(fp)
 801e6f4:	e0bfa717 	ldw	r2,-356(fp)
 801e6f8:	1885883a 	add	r2,r3,r2
 801e6fc:	e0bfaa15 	stw	r2,-344(fp)
		tmp3  += z2;
 801e700:	e0ffab17 	ldw	r3,-340(fp)
 801e704:	e0bfa717 	ldw	r2,-356(fp)
 801e708:	1885883a 	add	r2,r3,r2
 801e70c:	e0bfab15 	stw	r2,-340(fp)
		z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 801e710:	e0ffb317 	ldw	r3,-308(fp)
 801e714:	e0bfa817 	ldw	r2,-352(fp)
 801e718:	1885c83a 	sub	r2,r3,r2
 801e71c:	1009883a 	mov	r4,r2
 801e720:	014348c4 	movi	r5,3363
 801e724:	802c2180 	call	802c218 <__mulsi3>
 801e728:	e0bfa715 	stw	r2,-356(fp)
		tmp10 += z2;
 801e72c:	e0ffae17 	ldw	r3,-328(fp)
 801e730:	e0bfa717 	ldw	r2,-356(fp)
 801e734:	1885883a 	add	r2,r3,r2
 801e738:	e0bfae15 	stw	r2,-328(fp)
		tmp11 += z2;
 801e73c:	e0ffb017 	ldw	r3,-320(fp)
 801e740:	e0bfa717 	ldw	r2,-356(fp)
 801e744:	1885883a 	add	r2,r3,r2
 801e748:	e0bfb015 	stw	r2,-320(fp)

		/* Final output stage */

		outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 801e74c:	e0ffb417 	ldw	r3,-304(fp)
 801e750:	e0bfac17 	ldw	r2,-336(fp)
 801e754:	1885883a 	add	r2,r3,r2
 801e758:	1005d4ba 	srai	r2,r2,18
 801e75c:	1080ffcc 	andi	r2,r2,1023
 801e760:	e0ffa517 	ldw	r3,-364(fp)
 801e764:	1885883a 	add	r2,r3,r2
 801e768:	10c00003 	ldbu	r3,0(r2)
 801e76c:	e0bfb217 	ldw	r2,-312(fp)
 801e770:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 801e774:	e0bfb217 	ldw	r2,-312(fp)
 801e778:	108003c4 	addi	r2,r2,15
 801e77c:	e13fb417 	ldw	r4,-304(fp)
 801e780:	e0ffac17 	ldw	r3,-336(fp)
 801e784:	20c7c83a 	sub	r3,r4,r3
 801e788:	1807d4ba 	srai	r3,r3,18
 801e78c:	18c0ffcc 	andi	r3,r3,1023
 801e790:	e13fa517 	ldw	r4,-364(fp)
 801e794:	20c7883a 	add	r3,r4,r3
 801e798:	18c00003 	ldbu	r3,0(r3)
 801e79c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 801e7a0:	e0bfb217 	ldw	r2,-312(fp)
 801e7a4:	10800044 	addi	r2,r2,1
 801e7a8:	e13fb617 	ldw	r4,-296(fp)
 801e7ac:	e0ffad17 	ldw	r3,-332(fp)
 801e7b0:	20c7883a 	add	r3,r4,r3
 801e7b4:	1807d4ba 	srai	r3,r3,18
 801e7b8:	18c0ffcc 	andi	r3,r3,1023
 801e7bc:	e13fa517 	ldw	r4,-364(fp)
 801e7c0:	20c7883a 	add	r3,r4,r3
 801e7c4:	18c00003 	ldbu	r3,0(r3)
 801e7c8:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 801e7cc:	e0bfb217 	ldw	r2,-312(fp)
 801e7d0:	10800384 	addi	r2,r2,14
 801e7d4:	e13fb617 	ldw	r4,-296(fp)
 801e7d8:	e0ffad17 	ldw	r3,-332(fp)
 801e7dc:	20c7c83a 	sub	r3,r4,r3
 801e7e0:	1807d4ba 	srai	r3,r3,18
 801e7e4:	18c0ffcc 	andi	r3,r3,1023
 801e7e8:	e13fa517 	ldw	r4,-364(fp)
 801e7ec:	20c7883a 	add	r3,r4,r3
 801e7f0:	18c00003 	ldbu	r3,0(r3)
 801e7f4:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 801e7f8:	e0bfb217 	ldw	r2,-312(fp)
 801e7fc:	10800084 	addi	r2,r2,2
 801e800:	e13fb817 	ldw	r4,-288(fp)
 801e804:	e0ffaa17 	ldw	r3,-344(fp)
 801e808:	20c7883a 	add	r3,r4,r3
 801e80c:	1807d4ba 	srai	r3,r3,18
 801e810:	18c0ffcc 	andi	r3,r3,1023
 801e814:	e13fa517 	ldw	r4,-364(fp)
 801e818:	20c7883a 	add	r3,r4,r3
 801e81c:	18c00003 	ldbu	r3,0(r3)
 801e820:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 801e824:	e0bfb217 	ldw	r2,-312(fp)
 801e828:	10800344 	addi	r2,r2,13
 801e82c:	e13fb817 	ldw	r4,-288(fp)
 801e830:	e0ffaa17 	ldw	r3,-344(fp)
 801e834:	20c7c83a 	sub	r3,r4,r3
 801e838:	1807d4ba 	srai	r3,r3,18
 801e83c:	18c0ffcc 	andi	r3,r3,1023
 801e840:	e13fa517 	ldw	r4,-364(fp)
 801e844:	20c7883a 	add	r3,r4,r3
 801e848:	18c00003 	ldbu	r3,0(r3)
 801e84c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 801e850:	e0bfb217 	ldw	r2,-312(fp)
 801e854:	108000c4 	addi	r2,r2,3
 801e858:	e13fba17 	ldw	r4,-280(fp)
 801e85c:	e0ffab17 	ldw	r3,-340(fp)
 801e860:	20c7883a 	add	r3,r4,r3
 801e864:	1807d4ba 	srai	r3,r3,18
 801e868:	18c0ffcc 	andi	r3,r3,1023
 801e86c:	e13fa517 	ldw	r4,-364(fp)
 801e870:	20c7883a 	add	r3,r4,r3
 801e874:	18c00003 	ldbu	r3,0(r3)
 801e878:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 801e87c:	e0bfb217 	ldw	r2,-312(fp)
 801e880:	10800304 	addi	r2,r2,12
 801e884:	e13fba17 	ldw	r4,-280(fp)
 801e888:	e0ffab17 	ldw	r3,-340(fp)
 801e88c:	20c7c83a 	sub	r3,r4,r3
 801e890:	1807d4ba 	srai	r3,r3,18
 801e894:	18c0ffcc 	andi	r3,r3,1023
 801e898:	e13fa517 	ldw	r4,-364(fp)
 801e89c:	20c7883a 	add	r3,r4,r3
 801e8a0:	18c00003 	ldbu	r3,0(r3)
 801e8a4:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 801e8a8:	e0bfb217 	ldw	r2,-312(fp)
 801e8ac:	10800104 	addi	r2,r2,4
 801e8b0:	e13fbb17 	ldw	r4,-276(fp)
 801e8b4:	e0ffae17 	ldw	r3,-328(fp)
 801e8b8:	20c7883a 	add	r3,r4,r3
 801e8bc:	1807d4ba 	srai	r3,r3,18
 801e8c0:	18c0ffcc 	andi	r3,r3,1023
 801e8c4:	e13fa517 	ldw	r4,-364(fp)
 801e8c8:	20c7883a 	add	r3,r4,r3
 801e8cc:	18c00003 	ldbu	r3,0(r3)
 801e8d0:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 801e8d4:	e0bfb217 	ldw	r2,-312(fp)
 801e8d8:	108002c4 	addi	r2,r2,11
 801e8dc:	e13fbb17 	ldw	r4,-276(fp)
 801e8e0:	e0ffae17 	ldw	r3,-328(fp)
 801e8e4:	20c7c83a 	sub	r3,r4,r3
 801e8e8:	1807d4ba 	srai	r3,r3,18
 801e8ec:	18c0ffcc 	andi	r3,r3,1023
 801e8f0:	e13fa517 	ldw	r4,-364(fp)
 801e8f4:	20c7883a 	add	r3,r4,r3
 801e8f8:	18c00003 	ldbu	r3,0(r3)
 801e8fc:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 801e900:	e0bfb217 	ldw	r2,-312(fp)
 801e904:	10800144 	addi	r2,r2,5
 801e908:	e13fb917 	ldw	r4,-284(fp)
 801e90c:	e0ffb017 	ldw	r3,-320(fp)
 801e910:	20c7883a 	add	r3,r4,r3
 801e914:	1807d4ba 	srai	r3,r3,18
 801e918:	18c0ffcc 	andi	r3,r3,1023
 801e91c:	e13fa517 	ldw	r4,-364(fp)
 801e920:	20c7883a 	add	r3,r4,r3
 801e924:	18c00003 	ldbu	r3,0(r3)
 801e928:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 801e92c:	e0bfb217 	ldw	r2,-312(fp)
 801e930:	10800284 	addi	r2,r2,10
 801e934:	e13fb917 	ldw	r4,-284(fp)
 801e938:	e0ffb017 	ldw	r3,-320(fp)
 801e93c:	20c7c83a 	sub	r3,r4,r3
 801e940:	1807d4ba 	srai	r3,r3,18
 801e944:	18c0ffcc 	andi	r3,r3,1023
 801e948:	e13fa517 	ldw	r4,-364(fp)
 801e94c:	20c7883a 	add	r3,r4,r3
 801e950:	18c00003 	ldbu	r3,0(r3)
 801e954:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 801e958:	e0bfb217 	ldw	r2,-312(fp)
 801e95c:	10800184 	addi	r2,r2,6
 801e960:	e13fb717 	ldw	r4,-292(fp)
 801e964:	e0ffb117 	ldw	r3,-316(fp)
 801e968:	20c7883a 	add	r3,r4,r3
 801e96c:	1807d4ba 	srai	r3,r3,18
 801e970:	18c0ffcc 	andi	r3,r3,1023
 801e974:	e13fa517 	ldw	r4,-364(fp)
 801e978:	20c7883a 	add	r3,r4,r3
 801e97c:	18c00003 	ldbu	r3,0(r3)
 801e980:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 801e984:	e0bfb217 	ldw	r2,-312(fp)
 801e988:	10800244 	addi	r2,r2,9
 801e98c:	e13fb717 	ldw	r4,-292(fp)
 801e990:	e0ffb117 	ldw	r3,-316(fp)
 801e994:	20c7c83a 	sub	r3,r4,r3
 801e998:	1807d4ba 	srai	r3,r3,18
 801e99c:	18c0ffcc 	andi	r3,r3,1023
 801e9a0:	e13fa517 	ldw	r4,-364(fp)
 801e9a4:	20c7883a 	add	r3,r4,r3
 801e9a8:	18c00003 	ldbu	r3,0(r3)
 801e9ac:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 801e9b0:	e0bfb217 	ldw	r2,-312(fp)
 801e9b4:	108001c4 	addi	r2,r2,7
 801e9b8:	e13fb517 	ldw	r4,-300(fp)
 801e9bc:	e0ffaf17 	ldw	r3,-324(fp)
 801e9c0:	20c7883a 	add	r3,r4,r3
 801e9c4:	1807d4ba 	srai	r3,r3,18
 801e9c8:	18c0ffcc 	andi	r3,r3,1023
 801e9cc:	e13fa517 	ldw	r4,-364(fp)
 801e9d0:	20c7883a 	add	r3,r4,r3
 801e9d4:	18c00003 	ldbu	r3,0(r3)
 801e9d8:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 801e9dc:	e0bfb217 	ldw	r2,-312(fp)
 801e9e0:	10800204 	addi	r2,r2,8
 801e9e4:	e13fb517 	ldw	r4,-300(fp)
 801e9e8:	e0ffaf17 	ldw	r3,-324(fp)
 801e9ec:	20c7c83a 	sub	r3,r4,r3
 801e9f0:	1807d4ba 	srai	r3,r3,18
 801e9f4:	18c0ffcc 	andi	r3,r3,1023
 801e9f8:	e13fa517 	ldw	r4,-364(fp)
 801e9fc:	20c7883a 	add	r3,r4,r3
 801ea00:	18c00003 	ldbu	r3,0(r3)
 801ea04:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 8;		/* advance pointer to next row */
 801ea08:	e0bfa317 	ldw	r2,-372(fp)
 801ea0c:	10800804 	addi	r2,r2,32
 801ea10:	e0bfa315 	stw	r2,-372(fp)

	/* Pass 2: process 8 rows from work array, store into output array.
	* 16-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/32).
	*/
	wsptr = workspace;
	for (ctr = 0; ctr < 8; ctr++) {
 801ea14:	e0bfa417 	ldw	r2,-368(fp)
 801ea18:	10800044 	addi	r2,r2,1
 801ea1c:	e0bfa415 	stw	r2,-368(fp)
 801ea20:	e0bfa417 	ldw	r2,-368(fp)
 801ea24:	10800210 	cmplti	r2,r2,8
 801ea28:	103e0a1e 	bne	r2,zero,801e254 <jpeg_idct_16x8+0x6e0>
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 8;		/* advance pointer to next row */
	}
}
 801ea2c:	e037883a 	mov	sp,fp
 801ea30:	dfc00217 	ldw	ra,8(sp)
 801ea34:	df000117 	ldw	fp,4(sp)
 801ea38:	dc000017 	ldw	r16,0(sp)
 801ea3c:	dec00304 	addi	sp,sp,12
 801ea40:	f800283a 	ret

0801ea44 <jpeg_idct_14x7>:

GLOBAL(void)
	jpeg_idct_14x7 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801ea44:	deffa904 	addi	sp,sp,-348
 801ea48:	dfc05615 	stw	ra,344(sp)
 801ea4c:	df005515 	stw	fp,340(sp)
 801ea50:	dc005415 	stw	r16,336(sp)
 801ea54:	df005404 	addi	fp,sp,336
 801ea58:	e13ffc15 	stw	r4,-16(fp)
 801ea5c:	e17ffd15 	stw	r5,-12(fp)
 801ea60:	e1bffe15 	stw	r6,-8(fp)
 801ea64:	e1ffff15 	stw	r7,-4(fp)
	INT32 z1, z2, z3, z4;
	JCOEFPTR inptr;
	ISLOW_MULT_TYPE * quantptr;
	int * wsptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801ea68:	e0bffc17 	ldw	r2,-16(fp)
 801ea6c:	10804917 	ldw	r2,292(r2)
 801ea70:	10802004 	addi	r2,r2,128
 801ea74:	e0bfb015 	stw	r2,-320(fp)
	SHIFT_TEMPS

		/* Pass 1: process columns from input, store into work array.
		* 7-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/14).
		*/
		inptr = coef_block;
 801ea78:	e0bffe17 	ldw	r2,-8(fp)
 801ea7c:	e0bfac15 	stw	r2,-336(fp)
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801ea80:	e0bffd17 	ldw	r2,-12(fp)
 801ea84:	10801517 	ldw	r2,84(r2)
 801ea88:	e0bfad15 	stw	r2,-332(fp)
	wsptr = workspace;
 801ea8c:	e0bfc404 	addi	r2,fp,-240
 801ea90:	e0bfae15 	stw	r2,-328(fp)
	for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801ea94:	e03faf15 	stw	zero,-324(fp)
 801ea98:	00010d06 	br	801eed0 <jpeg_idct_14x7+0x48c>
		/* Even part */

		tmp23 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801ea9c:	e0bfac17 	ldw	r2,-336(fp)
 801eaa0:	1080000b 	ldhu	r2,0(r2)
 801eaa4:	10ffffcc 	andi	r3,r2,65535
 801eaa8:	18e0001c 	xori	r3,r3,32768
 801eaac:	18e00004 	addi	r3,r3,-32768
 801eab0:	e0bfad17 	ldw	r2,-332(fp)
 801eab4:	10800017 	ldw	r2,0(r2)
 801eab8:	1809883a 	mov	r4,r3
 801eabc:	100b883a 	mov	r5,r2
 801eac0:	802c2180 	call	802c218 <__mulsi3>
 801eac4:	e0bfb115 	stw	r2,-316(fp)
		tmp23 <<= CONST_BITS;
 801eac8:	e0bfb117 	ldw	r2,-316(fp)
 801eacc:	1004937a 	slli	r2,r2,13
 801ead0:	e0bfb115 	stw	r2,-316(fp)
		/* Add fudge factor here for final descale. */
		tmp23 += ONE << (CONST_BITS-PASS1_BITS-1);
 801ead4:	e0bfb117 	ldw	r2,-316(fp)
 801ead8:	10810004 	addi	r2,r2,1024
 801eadc:	e0bfb115 	stw	r2,-316(fp)

		z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801eae0:	e0bfac17 	ldw	r2,-336(fp)
 801eae4:	10800804 	addi	r2,r2,32
 801eae8:	1080000b 	ldhu	r2,0(r2)
 801eaec:	10ffffcc 	andi	r3,r2,65535
 801eaf0:	18e0001c 	xori	r3,r3,32768
 801eaf4:	18e00004 	addi	r3,r3,-32768
 801eaf8:	e0bfad17 	ldw	r2,-332(fp)
 801eafc:	10801004 	addi	r2,r2,64
 801eb00:	10800017 	ldw	r2,0(r2)
 801eb04:	1809883a 	mov	r4,r3
 801eb08:	100b883a 	mov	r5,r2
 801eb0c:	802c2180 	call	802c218 <__mulsi3>
 801eb10:	e0bfb215 	stw	r2,-312(fp)
		z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801eb14:	e0bfac17 	ldw	r2,-336(fp)
 801eb18:	10801004 	addi	r2,r2,64
 801eb1c:	1080000b 	ldhu	r2,0(r2)
 801eb20:	10ffffcc 	andi	r3,r2,65535
 801eb24:	18e0001c 	xori	r3,r3,32768
 801eb28:	18e00004 	addi	r3,r3,-32768
 801eb2c:	e0bfad17 	ldw	r2,-332(fp)
 801eb30:	10802004 	addi	r2,r2,128
 801eb34:	10800017 	ldw	r2,0(r2)
 801eb38:	1809883a 	mov	r4,r3
 801eb3c:	100b883a 	mov	r5,r2
 801eb40:	802c2180 	call	802c218 <__mulsi3>
 801eb44:	e0bfb315 	stw	r2,-308(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801eb48:	e0bfac17 	ldw	r2,-336(fp)
 801eb4c:	10801804 	addi	r2,r2,96
 801eb50:	1080000b 	ldhu	r2,0(r2)
 801eb54:	10ffffcc 	andi	r3,r2,65535
 801eb58:	18e0001c 	xori	r3,r3,32768
 801eb5c:	18e00004 	addi	r3,r3,-32768
 801eb60:	e0bfad17 	ldw	r2,-332(fp)
 801eb64:	10803004 	addi	r2,r2,192
 801eb68:	10800017 	ldw	r2,0(r2)
 801eb6c:	1809883a 	mov	r4,r3
 801eb70:	100b883a 	mov	r5,r2
 801eb74:	802c2180 	call	802c218 <__mulsi3>
 801eb78:	e0bfb415 	stw	r2,-304(fp)

		tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 801eb7c:	e0ffb317 	ldw	r3,-308(fp)
 801eb80:	e0bfb417 	ldw	r2,-304(fp)
 801eb84:	1885c83a 	sub	r2,r3,r2
 801eb88:	1009883a 	mov	r4,r2
 801eb8c:	01470dc4 	movi	r5,7223
 801eb90:	802c2180 	call	802c218 <__mulsi3>
 801eb94:	e0bfb515 	stw	r2,-300(fp)
		tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 801eb98:	e0ffb217 	ldw	r3,-312(fp)
 801eb9c:	e0bfb317 	ldw	r2,-308(fp)
 801eba0:	1885c83a 	sub	r2,r3,r2
 801eba4:	1009883a 	mov	r4,r2
 801eba8:	01428484 	movi	r5,2578
 801ebac:	802c2180 	call	802c218 <__mulsi3>
 801ebb0:	e0bfb615 	stw	r2,-296(fp)
		tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 801ebb4:	e0ffb517 	ldw	r3,-300(fp)
 801ebb8:	e0bfb617 	ldw	r2,-296(fp)
 801ebbc:	1887883a 	add	r3,r3,r2
 801ebc0:	e0bfb117 	ldw	r2,-316(fp)
 801ebc4:	18a1883a 	add	r16,r3,r2
 801ebc8:	e13fb317 	ldw	r4,-308(fp)
 801ebcc:	01714544 	movi	r5,-15083
 801ebd0:	802c2180 	call	802c218 <__mulsi3>
 801ebd4:	8085883a 	add	r2,r16,r2
 801ebd8:	e0bfb715 	stw	r2,-292(fp)
		tmp10 = z1 + z3;
 801ebdc:	e0ffb217 	ldw	r3,-312(fp)
 801ebe0:	e0bfb417 	ldw	r2,-304(fp)
 801ebe4:	1885883a 	add	r2,r3,r2
 801ebe8:	e0bfb815 	stw	r2,-288(fp)
		z2 -= tmp10;
 801ebec:	e0ffb317 	ldw	r3,-308(fp)
 801ebf0:	e0bfb817 	ldw	r2,-288(fp)
 801ebf4:	1885c83a 	sub	r2,r3,r2
 801ebf8:	e0bfb315 	stw	r2,-308(fp)
		tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 801ebfc:	e13fb817 	ldw	r4,-288(fp)
 801ec00:	014a3184 	movi	r5,10438
 801ec04:	802c2180 	call	802c218 <__mulsi3>
 801ec08:	1007883a 	mov	r3,r2
 801ec0c:	e0bfb117 	ldw	r2,-316(fp)
 801ec10:	1885883a 	add	r2,r3,r2
 801ec14:	e0bfb815 	stw	r2,-288(fp)
		tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 801ec18:	e13fb417 	ldw	r4,-304(fp)
 801ec1c:	017f60c4 	movi	r5,-637
 801ec20:	802c2180 	call	802c218 <__mulsi3>
 801ec24:	1007883a 	mov	r3,r2
 801ec28:	e0bfb817 	ldw	r2,-288(fp)
 801ec2c:	1885883a 	add	r2,r3,r2
 801ec30:	e0ffb517 	ldw	r3,-300(fp)
 801ec34:	1885883a 	add	r2,r3,r2
 801ec38:	e0bfb515 	stw	r2,-300(fp)
		tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 801ec3c:	e13fb217 	ldw	r4,-312(fp)
 801ec40:	016c3c44 	movi	r5,-20239
 801ec44:	802c2180 	call	802c218 <__mulsi3>
 801ec48:	1007883a 	mov	r3,r2
 801ec4c:	e0bfb817 	ldw	r2,-288(fp)
 801ec50:	1885883a 	add	r2,r3,r2
 801ec54:	e0ffb617 	ldw	r3,-296(fp)
 801ec58:	1885883a 	add	r2,r3,r2
 801ec5c:	e0bfb615 	stw	r2,-296(fp)
		tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 801ec60:	e13fb317 	ldw	r4,-308(fp)
 801ec64:	014b5044 	movi	r5,11585
 801ec68:	802c2180 	call	802c218 <__mulsi3>
 801ec6c:	e0ffb117 	ldw	r3,-316(fp)
 801ec70:	1885883a 	add	r2,r3,r2
 801ec74:	e0bfb115 	stw	r2,-316(fp)

		/* Odd part */

		z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801ec78:	e0bfac17 	ldw	r2,-336(fp)
 801ec7c:	10800404 	addi	r2,r2,16
 801ec80:	1080000b 	ldhu	r2,0(r2)
 801ec84:	10ffffcc 	andi	r3,r2,65535
 801ec88:	18e0001c 	xori	r3,r3,32768
 801ec8c:	18e00004 	addi	r3,r3,-32768
 801ec90:	e0bfad17 	ldw	r2,-332(fp)
 801ec94:	10800804 	addi	r2,r2,32
 801ec98:	10800017 	ldw	r2,0(r2)
 801ec9c:	1809883a 	mov	r4,r3
 801eca0:	100b883a 	mov	r5,r2
 801eca4:	802c2180 	call	802c218 <__mulsi3>
 801eca8:	e0bfb215 	stw	r2,-312(fp)
		z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801ecac:	e0bfac17 	ldw	r2,-336(fp)
 801ecb0:	10800c04 	addi	r2,r2,48
 801ecb4:	1080000b 	ldhu	r2,0(r2)
 801ecb8:	10ffffcc 	andi	r3,r2,65535
 801ecbc:	18e0001c 	xori	r3,r3,32768
 801ecc0:	18e00004 	addi	r3,r3,-32768
 801ecc4:	e0bfad17 	ldw	r2,-332(fp)
 801ecc8:	10801804 	addi	r2,r2,96
 801eccc:	10800017 	ldw	r2,0(r2)
 801ecd0:	1809883a 	mov	r4,r3
 801ecd4:	100b883a 	mov	r5,r2
 801ecd8:	802c2180 	call	802c218 <__mulsi3>
 801ecdc:	e0bfb315 	stw	r2,-308(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801ece0:	e0bfac17 	ldw	r2,-336(fp)
 801ece4:	10801404 	addi	r2,r2,80
 801ece8:	1080000b 	ldhu	r2,0(r2)
 801ecec:	10ffffcc 	andi	r3,r2,65535
 801ecf0:	18e0001c 	xori	r3,r3,32768
 801ecf4:	18e00004 	addi	r3,r3,-32768
 801ecf8:	e0bfad17 	ldw	r2,-332(fp)
 801ecfc:	10802804 	addi	r2,r2,160
 801ed00:	10800017 	ldw	r2,0(r2)
 801ed04:	1809883a 	mov	r4,r3
 801ed08:	100b883a 	mov	r5,r2
 801ed0c:	802c2180 	call	802c218 <__mulsi3>
 801ed10:	e0bfb415 	stw	r2,-304(fp)

		tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 801ed14:	e0ffb217 	ldw	r3,-312(fp)
 801ed18:	e0bfb317 	ldw	r2,-308(fp)
 801ed1c:	1885883a 	add	r2,r3,r2
 801ed20:	1009883a 	mov	r4,r2
 801ed24:	01477bc4 	movi	r5,7663
 801ed28:	802c2180 	call	802c218 <__mulsi3>
 801ed2c:	e0bfb915 	stw	r2,-284(fp)
		tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 801ed30:	e0ffb217 	ldw	r3,-312(fp)
 801ed34:	e0bfb317 	ldw	r2,-308(fp)
 801ed38:	1885c83a 	sub	r2,r3,r2
 801ed3c:	1009883a 	mov	r4,r2
 801ed40:	01415cc4 	movi	r5,1395
 801ed44:	802c2180 	call	802c218 <__mulsi3>
 801ed48:	e0bfba15 	stw	r2,-280(fp)
		tmp10 = tmp11 - tmp12;
 801ed4c:	e0ffb917 	ldw	r3,-284(fp)
 801ed50:	e0bfba17 	ldw	r2,-280(fp)
 801ed54:	1885c83a 	sub	r2,r3,r2
 801ed58:	e0bfb815 	stw	r2,-288(fp)
		tmp11 += tmp12;
 801ed5c:	e0ffb917 	ldw	r3,-284(fp)
 801ed60:	e0bfba17 	ldw	r2,-280(fp)
 801ed64:	1885883a 	add	r2,r3,r2
 801ed68:	e0bfb915 	stw	r2,-284(fp)
		tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 801ed6c:	e0ffb317 	ldw	r3,-308(fp)
 801ed70:	e0bfb417 	ldw	r2,-304(fp)
 801ed74:	1885883a 	add	r2,r3,r2
 801ed78:	1009883a 	mov	r4,r2
 801ed7c:	0174f844 	movi	r5,-11295
 801ed80:	802c2180 	call	802c218 <__mulsi3>
 801ed84:	e0bfba15 	stw	r2,-280(fp)
		tmp11 += tmp12;
 801ed88:	e0ffb917 	ldw	r3,-284(fp)
 801ed8c:	e0bfba17 	ldw	r2,-280(fp)
 801ed90:	1885883a 	add	r2,r3,r2
 801ed94:	e0bfb915 	stw	r2,-284(fp)
		z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 801ed98:	e0ffb217 	ldw	r3,-312(fp)
 801ed9c:	e0bfb417 	ldw	r2,-304(fp)
 801eda0:	1885883a 	add	r2,r3,r2
 801eda4:	1009883a 	mov	r4,r2
 801eda8:	0144e8c4 	movi	r5,5027
 801edac:	802c2180 	call	802c218 <__mulsi3>
 801edb0:	e0bfb315 	stw	r2,-308(fp)
		tmp10 += z2;
 801edb4:	e0ffb817 	ldw	r3,-288(fp)
 801edb8:	e0bfb317 	ldw	r2,-308(fp)
 801edbc:	1885883a 	add	r2,r3,r2
 801edc0:	e0bfb815 	stw	r2,-288(fp)
		tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 801edc4:	e13fb417 	ldw	r4,-304(fp)
 801edc8:	014ef784 	movi	r5,15326
 801edcc:	802c2180 	call	802c218 <__mulsi3>
 801edd0:	1007883a 	mov	r3,r2
 801edd4:	e0bfb317 	ldw	r2,-308(fp)
 801edd8:	1885883a 	add	r2,r3,r2
 801eddc:	e0ffba17 	ldw	r3,-280(fp)
 801ede0:	1885883a 	add	r2,r3,r2
 801ede4:	e0bfba15 	stw	r2,-280(fp)

		/* Final output stage */

		wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801ede8:	e0ffb517 	ldw	r3,-300(fp)
 801edec:	e0bfb817 	ldw	r2,-288(fp)
 801edf0:	1885883a 	add	r2,r3,r2
 801edf4:	1007d2fa 	srai	r3,r2,11
 801edf8:	e0bfae17 	ldw	r2,-328(fp)
 801edfc:	10c00015 	stw	r3,0(r2)
		wsptr[8*6] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801ee00:	e0bfae17 	ldw	r2,-328(fp)
 801ee04:	10803004 	addi	r2,r2,192
 801ee08:	e13fb517 	ldw	r4,-300(fp)
 801ee0c:	e0ffb817 	ldw	r3,-288(fp)
 801ee10:	20c7c83a 	sub	r3,r4,r3
 801ee14:	1807d2fa 	srai	r3,r3,11
 801ee18:	10c00015 	stw	r3,0(r2)
		wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801ee1c:	e0bfae17 	ldw	r2,-328(fp)
 801ee20:	10800804 	addi	r2,r2,32
 801ee24:	e13fb717 	ldw	r4,-292(fp)
 801ee28:	e0ffb917 	ldw	r3,-284(fp)
 801ee2c:	20c7883a 	add	r3,r4,r3
 801ee30:	1807d2fa 	srai	r3,r3,11
 801ee34:	10c00015 	stw	r3,0(r2)
		wsptr[8*5] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801ee38:	e0bfae17 	ldw	r2,-328(fp)
 801ee3c:	10802804 	addi	r2,r2,160
 801ee40:	e13fb717 	ldw	r4,-292(fp)
 801ee44:	e0ffb917 	ldw	r3,-284(fp)
 801ee48:	20c7c83a 	sub	r3,r4,r3
 801ee4c:	1807d2fa 	srai	r3,r3,11
 801ee50:	10c00015 	stw	r3,0(r2)
		wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801ee54:	e0bfae17 	ldw	r2,-328(fp)
 801ee58:	10801004 	addi	r2,r2,64
 801ee5c:	e13fb617 	ldw	r4,-296(fp)
 801ee60:	e0ffba17 	ldw	r3,-280(fp)
 801ee64:	20c7883a 	add	r3,r4,r3
 801ee68:	1807d2fa 	srai	r3,r3,11
 801ee6c:	10c00015 	stw	r3,0(r2)
		wsptr[8*4] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801ee70:	e0bfae17 	ldw	r2,-328(fp)
 801ee74:	10802004 	addi	r2,r2,128
 801ee78:	e13fb617 	ldw	r4,-296(fp)
 801ee7c:	e0ffba17 	ldw	r3,-280(fp)
 801ee80:	20c7c83a 	sub	r3,r4,r3
 801ee84:	1807d2fa 	srai	r3,r3,11
 801ee88:	10c00015 	stw	r3,0(r2)
		wsptr[8*3] = (int) RIGHT_SHIFT(tmp23, CONST_BITS-PASS1_BITS);
 801ee8c:	e0bfae17 	ldw	r2,-328(fp)
 801ee90:	10801804 	addi	r2,r2,96
 801ee94:	e0ffb117 	ldw	r3,-316(fp)
 801ee98:	1807d2fa 	srai	r3,r3,11
 801ee9c:	10c00015 	stw	r3,0(r2)
		* 7-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/14).
		*/
		inptr = coef_block;
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
	wsptr = workspace;
	for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801eea0:	e0bfaf17 	ldw	r2,-324(fp)
 801eea4:	10800044 	addi	r2,r2,1
 801eea8:	e0bfaf15 	stw	r2,-324(fp)
 801eeac:	e0bfac17 	ldw	r2,-336(fp)
 801eeb0:	10800084 	addi	r2,r2,2
 801eeb4:	e0bfac15 	stw	r2,-336(fp)
 801eeb8:	e0bfad17 	ldw	r2,-332(fp)
 801eebc:	10800104 	addi	r2,r2,4
 801eec0:	e0bfad15 	stw	r2,-332(fp)
 801eec4:	e0bfae17 	ldw	r2,-328(fp)
 801eec8:	10800104 	addi	r2,r2,4
 801eecc:	e0bfae15 	stw	r2,-328(fp)
 801eed0:	e0bfaf17 	ldw	r2,-324(fp)
 801eed4:	10800210 	cmplti	r2,r2,8
 801eed8:	103ef01e 	bne	r2,zero,801ea9c <jpeg_idct_14x7+0x58>
	}

	/* Pass 2: process 7 rows from work array, store into output array.
	* 14-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/28).
	*/
	wsptr = workspace;
 801eedc:	e0bfc404 	addi	r2,fp,-240
 801eee0:	e0bfae15 	stw	r2,-328(fp)
	for (ctr = 0; ctr < 7; ctr++) {
 801eee4:	e03faf15 	stw	zero,-324(fp)
 801eee8:	00019506 	br	801f540 <jpeg_idct_14x7+0xafc>
		outptr = output_buf[ctr] + output_col;
 801eeec:	e0bfaf17 	ldw	r2,-324(fp)
 801eef0:	1085883a 	add	r2,r2,r2
 801eef4:	1085883a 	add	r2,r2,r2
 801eef8:	e0ffff17 	ldw	r3,-4(fp)
 801eefc:	1885883a 	add	r2,r3,r2
 801ef00:	10c00017 	ldw	r3,0(r2)
 801ef04:	e0800317 	ldw	r2,12(fp)
 801ef08:	1885883a 	add	r2,r3,r2
 801ef0c:	e0bfbb15 	stw	r2,-276(fp)

		/* Even part */

		/* Add fudge factor here for final descale. */
		z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801ef10:	e0bfae17 	ldw	r2,-328(fp)
 801ef14:	10800017 	ldw	r2,0(r2)
 801ef18:	10800404 	addi	r2,r2,16
 801ef1c:	e0bfb215 	stw	r2,-312(fp)
		z1 <<= CONST_BITS;
 801ef20:	e0bfb217 	ldw	r2,-312(fp)
 801ef24:	1004937a 	slli	r2,r2,13
 801ef28:	e0bfb215 	stw	r2,-312(fp)
		z4 = (INT32) wsptr[4];
 801ef2c:	e0bfae17 	ldw	r2,-328(fp)
 801ef30:	10800404 	addi	r2,r2,16
 801ef34:	10800017 	ldw	r2,0(r2)
 801ef38:	e0bfbc15 	stw	r2,-272(fp)
		z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 801ef3c:	e13fbc17 	ldw	r4,-272(fp)
 801ef40:	014a3184 	movi	r5,10438
 801ef44:	802c2180 	call	802c218 <__mulsi3>
 801ef48:	e0bfb315 	stw	r2,-308(fp)
		z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 801ef4c:	e13fbc17 	ldw	r4,-272(fp)
 801ef50:	01428484 	movi	r5,2578
 801ef54:	802c2180 	call	802c218 <__mulsi3>
 801ef58:	e0bfb415 	stw	r2,-304(fp)
		z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 801ef5c:	e13fbc17 	ldw	r4,-272(fp)
 801ef60:	01470dc4 	movi	r5,7223
 801ef64:	802c2180 	call	802c218 <__mulsi3>
 801ef68:	e0bfbc15 	stw	r2,-272(fp)

		tmp10 = z1 + z2;
 801ef6c:	e0ffb217 	ldw	r3,-312(fp)
 801ef70:	e0bfb317 	ldw	r2,-308(fp)
 801ef74:	1885883a 	add	r2,r3,r2
 801ef78:	e0bfb815 	stw	r2,-288(fp)
		tmp11 = z1 + z3;
 801ef7c:	e0ffb217 	ldw	r3,-312(fp)
 801ef80:	e0bfb417 	ldw	r2,-304(fp)
 801ef84:	1885883a 	add	r2,r3,r2
 801ef88:	e0bfb915 	stw	r2,-284(fp)
		tmp12 = z1 - z4;
 801ef8c:	e0ffb217 	ldw	r3,-312(fp)
 801ef90:	e0bfbc17 	ldw	r2,-272(fp)
 801ef94:	1885c83a 	sub	r2,r3,r2
 801ef98:	e0bfba15 	stw	r2,-280(fp)

		tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 801ef9c:	e0ffb317 	ldw	r3,-308(fp)
 801efa0:	e0bfb417 	ldw	r2,-304(fp)
 801efa4:	1887883a 	add	r3,r3,r2
 801efa8:	e0bfbc17 	ldw	r2,-272(fp)
 801efac:	1885c83a 	sub	r2,r3,r2
 801efb0:	1085883a 	add	r2,r2,r2
 801efb4:	e0ffb217 	ldw	r3,-312(fp)
 801efb8:	1885c83a 	sub	r2,r3,r2
 801efbc:	e0bfb115 	stw	r2,-316(fp)

		z1 = (INT32) wsptr[2];
 801efc0:	e0bfae17 	ldw	r2,-328(fp)
 801efc4:	10800204 	addi	r2,r2,8
 801efc8:	10800017 	ldw	r2,0(r2)
 801efcc:	e0bfb215 	stw	r2,-312(fp)
		z2 = (INT32) wsptr[6];
 801efd0:	e0bfae17 	ldw	r2,-328(fp)
 801efd4:	10800604 	addi	r2,r2,24
 801efd8:	10800017 	ldw	r2,0(r2)
 801efdc:	e0bfb315 	stw	r2,-308(fp)

		z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 801efe0:	e0ffb217 	ldw	r3,-312(fp)
 801efe4:	e0bfb317 	ldw	r2,-308(fp)
 801efe8:	1885883a 	add	r2,r3,r2
 801efec:	1009883a 	mov	r4,r2
 801eff0:	0148d884 	movi	r5,9058
 801eff4:	802c2180 	call	802c218 <__mulsi3>
 801eff8:	e0bfb415 	stw	r2,-304(fp)

		tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 801effc:	e13fb217 	ldw	r4,-312(fp)
 801f000:	01422f44 	movi	r5,2237
 801f004:	802c2180 	call	802c218 <__mulsi3>
 801f008:	1007883a 	mov	r3,r2
 801f00c:	e0bfb417 	ldw	r2,-304(fp)
 801f010:	1885883a 	add	r2,r3,r2
 801f014:	e0bfbd15 	stw	r2,-268(fp)
		tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 801f018:	e13fb317 	ldw	r4,-308(fp)
 801f01c:	01723f04 	movi	r5,-14084
 801f020:	802c2180 	call	802c218 <__mulsi3>
 801f024:	1007883a 	mov	r3,r2
 801f028:	e0bfb417 	ldw	r2,-304(fp)
 801f02c:	1885883a 	add	r2,r3,r2
 801f030:	e0bfbe15 	stw	r2,-264(fp)
		tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 801f034:	e13fb217 	ldw	r4,-312(fp)
 801f038:	0144e8c4 	movi	r5,5027
 801f03c:	802c2180 	call	802c218 <__mulsi3>
 801f040:	1021883a 	mov	r16,r2
			MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 801f044:	e13fb317 	ldw	r4,-308(fp)
 801f048:	0174f844 	movi	r5,-11295
 801f04c:	802c2180 	call	802c218 <__mulsi3>

		z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

		tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
		tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
		tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 801f050:	8085883a 	add	r2,r16,r2
 801f054:	e0bfbf15 	stw	r2,-260(fp)
			MULTIPLY(z2, FIX(1.378756276));      /* c2 */

		tmp20 = tmp10 + tmp13;
 801f058:	e0ffb817 	ldw	r3,-288(fp)
 801f05c:	e0bfbd17 	ldw	r2,-268(fp)
 801f060:	1885883a 	add	r2,r3,r2
 801f064:	e0bfb515 	stw	r2,-300(fp)
		tmp26 = tmp10 - tmp13;
 801f068:	e0ffb817 	ldw	r3,-288(fp)
 801f06c:	e0bfbd17 	ldw	r2,-268(fp)
 801f070:	1885c83a 	sub	r2,r3,r2
 801f074:	e0bfc015 	stw	r2,-256(fp)
		tmp21 = tmp11 + tmp14;
 801f078:	e0ffb917 	ldw	r3,-284(fp)
 801f07c:	e0bfbe17 	ldw	r2,-264(fp)
 801f080:	1885883a 	add	r2,r3,r2
 801f084:	e0bfb715 	stw	r2,-292(fp)
		tmp25 = tmp11 - tmp14;
 801f088:	e0ffb917 	ldw	r3,-284(fp)
 801f08c:	e0bfbe17 	ldw	r2,-264(fp)
 801f090:	1885c83a 	sub	r2,r3,r2
 801f094:	e0bfc115 	stw	r2,-252(fp)
		tmp22 = tmp12 + tmp15;
 801f098:	e0ffba17 	ldw	r3,-280(fp)
 801f09c:	e0bfbf17 	ldw	r2,-260(fp)
 801f0a0:	1885883a 	add	r2,r3,r2
 801f0a4:	e0bfb615 	stw	r2,-296(fp)
		tmp24 = tmp12 - tmp15;
 801f0a8:	e0ffba17 	ldw	r3,-280(fp)
 801f0ac:	e0bfbf17 	ldw	r2,-260(fp)
 801f0b0:	1885c83a 	sub	r2,r3,r2
 801f0b4:	e0bfc215 	stw	r2,-248(fp)

		/* Odd part */

		z1 = (INT32) wsptr[1];
 801f0b8:	e0bfae17 	ldw	r2,-328(fp)
 801f0bc:	10800104 	addi	r2,r2,4
 801f0c0:	10800017 	ldw	r2,0(r2)
 801f0c4:	e0bfb215 	stw	r2,-312(fp)
		z2 = (INT32) wsptr[3];
 801f0c8:	e0bfae17 	ldw	r2,-328(fp)
 801f0cc:	10800304 	addi	r2,r2,12
 801f0d0:	10800017 	ldw	r2,0(r2)
 801f0d4:	e0bfb315 	stw	r2,-308(fp)
		z3 = (INT32) wsptr[5];
 801f0d8:	e0bfae17 	ldw	r2,-328(fp)
 801f0dc:	10800504 	addi	r2,r2,20
 801f0e0:	10800017 	ldw	r2,0(r2)
 801f0e4:	e0bfb415 	stw	r2,-304(fp)
		z4 = (INT32) wsptr[7];
 801f0e8:	e0bfae17 	ldw	r2,-328(fp)
 801f0ec:	10800704 	addi	r2,r2,28
 801f0f0:	10800017 	ldw	r2,0(r2)
 801f0f4:	e0bfbc15 	stw	r2,-272(fp)
		z4 <<= CONST_BITS;
 801f0f8:	e0bfbc17 	ldw	r2,-272(fp)
 801f0fc:	1004937a 	slli	r2,r2,13
 801f100:	e0bfbc15 	stw	r2,-272(fp)

		tmp14 = z1 + z3;
 801f104:	e0ffb217 	ldw	r3,-312(fp)
 801f108:	e0bfb417 	ldw	r2,-304(fp)
 801f10c:	1885883a 	add	r2,r3,r2
 801f110:	e0bfbe15 	stw	r2,-264(fp)
		tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 801f114:	e0ffb217 	ldw	r3,-312(fp)
 801f118:	e0bfb317 	ldw	r2,-308(fp)
 801f11c:	1885883a 	add	r2,r3,r2
 801f120:	1009883a 	mov	r4,r2
 801f124:	014aadc4 	movi	r5,10935
 801f128:	802c2180 	call	802c218 <__mulsi3>
 801f12c:	e0bfb915 	stw	r2,-284(fp)
		tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 801f130:	e13fbe17 	ldw	r4,-264(fp)
 801f134:	01499484 	movi	r5,9810
 801f138:	802c2180 	call	802c218 <__mulsi3>
 801f13c:	e0bfba15 	stw	r2,-280(fp)
		tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 801f140:	e0ffb917 	ldw	r3,-284(fp)
 801f144:	e0bfba17 	ldw	r2,-280(fp)
 801f148:	1887883a 	add	r3,r3,r2
 801f14c:	e0bfbc17 	ldw	r2,-272(fp)
 801f150:	18a1883a 	add	r16,r3,r2
 801f154:	e13fb217 	ldw	r4,-312(fp)
 801f158:	0176fc04 	movi	r5,-9232
 801f15c:	802c2180 	call	802c218 <__mulsi3>
 801f160:	8085883a 	add	r2,r16,r2
 801f164:	e0bfb815 	stw	r2,-288(fp)
		tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 801f168:	e13fbe17 	ldw	r4,-264(fp)
 801f16c:	01460504 	movi	r5,6164
 801f170:	802c2180 	call	802c218 <__mulsi3>
 801f174:	e0bfbe15 	stw	r2,-264(fp)
		tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 801f178:	e13fb217 	ldw	r4,-312(fp)
 801f17c:	017782c4 	movi	r5,-8693
 801f180:	802c2180 	call	802c218 <__mulsi3>
 801f184:	1007883a 	mov	r3,r2
 801f188:	e0bfbe17 	ldw	r2,-264(fp)
 801f18c:	1885883a 	add	r2,r3,r2
 801f190:	e0bfc315 	stw	r2,-244(fp)
		z1    -= z2;
 801f194:	e0ffb217 	ldw	r3,-312(fp)
 801f198:	e0bfb317 	ldw	r2,-308(fp)
 801f19c:	1885c83a 	sub	r2,r3,r2
 801f1a0:	e0bfb215 	stw	r2,-312(fp)
		tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 801f1a4:	e13fb217 	ldw	r4,-312(fp)
 801f1a8:	0143bc84 	movi	r5,3826
 801f1ac:	802c2180 	call	802c218 <__mulsi3>
 801f1b0:	1007883a 	mov	r3,r2
 801f1b4:	e0bfbc17 	ldw	r2,-272(fp)
 801f1b8:	1885c83a 	sub	r2,r3,r2
 801f1bc:	e0bfbf15 	stw	r2,-260(fp)
		tmp16 += tmp15;
 801f1c0:	e0ffc317 	ldw	r3,-244(fp)
 801f1c4:	e0bfbf17 	ldw	r2,-260(fp)
 801f1c8:	1885883a 	add	r2,r3,r2
 801f1cc:	e0bfc315 	stw	r2,-244(fp)
		tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 801f1d0:	e0ffb317 	ldw	r3,-308(fp)
 801f1d4:	e0bfb417 	ldw	r2,-304(fp)
 801f1d8:	1885883a 	add	r2,r3,r2
 801f1dc:	1009883a 	mov	r4,r2
 801f1e0:	017ebbc4 	movi	r5,-1297
 801f1e4:	802c2180 	call	802c218 <__mulsi3>
 801f1e8:	1007883a 	mov	r3,r2
 801f1ec:	e0bfbc17 	ldw	r2,-272(fp)
 801f1f0:	1885c83a 	sub	r2,r3,r2
 801f1f4:	e0bfbd15 	stw	r2,-268(fp)
		tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 801f1f8:	e13fb317 	ldw	r4,-308(fp)
 801f1fc:	017c9b84 	movi	r5,-3474
 801f200:	802c2180 	call	802c218 <__mulsi3>
 801f204:	1007883a 	mov	r3,r2
 801f208:	e0bfbd17 	ldw	r2,-268(fp)
 801f20c:	1885883a 	add	r2,r3,r2
 801f210:	e0ffb917 	ldw	r3,-284(fp)
 801f214:	1885883a 	add	r2,r3,r2
 801f218:	e0bfb915 	stw	r2,-284(fp)
		tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 801f21c:	e13fb417 	ldw	r4,-304(fp)
 801f220:	016d0244 	movi	r5,-19447
 801f224:	802c2180 	call	802c218 <__mulsi3>
 801f228:	1007883a 	mov	r3,r2
 801f22c:	e0bfbd17 	ldw	r2,-268(fp)
 801f230:	1885883a 	add	r2,r3,r2
 801f234:	e0ffba17 	ldw	r3,-280(fp)
 801f238:	1885883a 	add	r2,r3,r2
 801f23c:	e0bfba15 	stw	r2,-280(fp)
		tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 801f240:	e0ffb417 	ldw	r3,-304(fp)
 801f244:	e0bfb317 	ldw	r2,-308(fp)
 801f248:	1885c83a 	sub	r2,r3,r2
 801f24c:	1009883a 	mov	r4,r2
 801f250:	014b3e04 	movi	r5,11512
 801f254:	802c2180 	call	802c218 <__mulsi3>
 801f258:	e0bfbd15 	stw	r2,-268(fp)
		tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 801f25c:	e0ffbd17 	ldw	r3,-268(fp)
 801f260:	e0bfbc17 	ldw	r2,-272(fp)
 801f264:	18a1883a 	add	r16,r3,r2
 801f268:	e13fb417 	ldw	r4,-304(fp)
 801f26c:	01727984 	movi	r5,-13850
 801f270:	802c2180 	call	802c218 <__mulsi3>
 801f274:	8085883a 	add	r2,r16,r2
 801f278:	e0ffbe17 	ldw	r3,-264(fp)
 801f27c:	1885883a 	add	r2,r3,r2
 801f280:	e0bfbe15 	stw	r2,-264(fp)
		tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 801f284:	e13fb317 	ldw	r4,-308(fp)
 801f288:	01456644 	movi	r5,5529
 801f28c:	802c2180 	call	802c218 <__mulsi3>
 801f290:	1007883a 	mov	r3,r2
 801f294:	e0bfbd17 	ldw	r2,-268(fp)
 801f298:	1885883a 	add	r2,r3,r2
 801f29c:	e0ffbf17 	ldw	r3,-260(fp)
 801f2a0:	1885883a 	add	r2,r3,r2
 801f2a4:	e0bfbf15 	stw	r2,-260(fp)

		tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 801f2a8:	e0ffb217 	ldw	r3,-312(fp)
 801f2ac:	e0bfb417 	ldw	r2,-304(fp)
 801f2b0:	1885c83a 	sub	r2,r3,r2
 801f2b4:	1006937a 	slli	r3,r2,13
 801f2b8:	e0bfbc17 	ldw	r2,-272(fp)
 801f2bc:	1885883a 	add	r2,r3,r2
 801f2c0:	e0bfbd15 	stw	r2,-268(fp)

		/* Final output stage */

		outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801f2c4:	e0ffb517 	ldw	r3,-300(fp)
 801f2c8:	e0bfb817 	ldw	r2,-288(fp)
 801f2cc:	1885883a 	add	r2,r3,r2
 801f2d0:	1005d4ba 	srai	r2,r2,18
 801f2d4:	1080ffcc 	andi	r2,r2,1023
 801f2d8:	e0ffb017 	ldw	r3,-320(fp)
 801f2dc:	1885883a 	add	r2,r3,r2
 801f2e0:	10c00003 	ldbu	r3,0(r2)
 801f2e4:	e0bfbb17 	ldw	r2,-276(fp)
 801f2e8:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801f2ec:	e0bfbb17 	ldw	r2,-276(fp)
 801f2f0:	10800344 	addi	r2,r2,13
 801f2f4:	e13fb517 	ldw	r4,-300(fp)
 801f2f8:	e0ffb817 	ldw	r3,-288(fp)
 801f2fc:	20c7c83a 	sub	r3,r4,r3
 801f300:	1807d4ba 	srai	r3,r3,18
 801f304:	18c0ffcc 	andi	r3,r3,1023
 801f308:	e13fb017 	ldw	r4,-320(fp)
 801f30c:	20c7883a 	add	r3,r4,r3
 801f310:	18c00003 	ldbu	r3,0(r3)
 801f314:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801f318:	e0bfbb17 	ldw	r2,-276(fp)
 801f31c:	10800044 	addi	r2,r2,1
 801f320:	e13fb717 	ldw	r4,-292(fp)
 801f324:	e0ffb917 	ldw	r3,-284(fp)
 801f328:	20c7883a 	add	r3,r4,r3
 801f32c:	1807d4ba 	srai	r3,r3,18
 801f330:	18c0ffcc 	andi	r3,r3,1023
 801f334:	e13fb017 	ldw	r4,-320(fp)
 801f338:	20c7883a 	add	r3,r4,r3
 801f33c:	18c00003 	ldbu	r3,0(r3)
 801f340:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801f344:	e0bfbb17 	ldw	r2,-276(fp)
 801f348:	10800304 	addi	r2,r2,12
 801f34c:	e13fb717 	ldw	r4,-292(fp)
 801f350:	e0ffb917 	ldw	r3,-284(fp)
 801f354:	20c7c83a 	sub	r3,r4,r3
 801f358:	1807d4ba 	srai	r3,r3,18
 801f35c:	18c0ffcc 	andi	r3,r3,1023
 801f360:	e13fb017 	ldw	r4,-320(fp)
 801f364:	20c7883a 	add	r3,r4,r3
 801f368:	18c00003 	ldbu	r3,0(r3)
 801f36c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801f370:	e0bfbb17 	ldw	r2,-276(fp)
 801f374:	10800084 	addi	r2,r2,2
 801f378:	e13fb617 	ldw	r4,-296(fp)
 801f37c:	e0ffba17 	ldw	r3,-280(fp)
 801f380:	20c7883a 	add	r3,r4,r3
 801f384:	1807d4ba 	srai	r3,r3,18
 801f388:	18c0ffcc 	andi	r3,r3,1023
 801f38c:	e13fb017 	ldw	r4,-320(fp)
 801f390:	20c7883a 	add	r3,r4,r3
 801f394:	18c00003 	ldbu	r3,0(r3)
 801f398:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801f39c:	e0bfbb17 	ldw	r2,-276(fp)
 801f3a0:	108002c4 	addi	r2,r2,11
 801f3a4:	e13fb617 	ldw	r4,-296(fp)
 801f3a8:	e0ffba17 	ldw	r3,-280(fp)
 801f3ac:	20c7c83a 	sub	r3,r4,r3
 801f3b0:	1807d4ba 	srai	r3,r3,18
 801f3b4:	18c0ffcc 	andi	r3,r3,1023
 801f3b8:	e13fb017 	ldw	r4,-320(fp)
 801f3bc:	20c7883a 	add	r3,r4,r3
 801f3c0:	18c00003 	ldbu	r3,0(r3)
 801f3c4:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801f3c8:	e0bfbb17 	ldw	r2,-276(fp)
 801f3cc:	108000c4 	addi	r2,r2,3
 801f3d0:	e13fb117 	ldw	r4,-316(fp)
 801f3d4:	e0ffbd17 	ldw	r3,-268(fp)
 801f3d8:	20c7883a 	add	r3,r4,r3
 801f3dc:	1807d4ba 	srai	r3,r3,18
 801f3e0:	18c0ffcc 	andi	r3,r3,1023
 801f3e4:	e13fb017 	ldw	r4,-320(fp)
 801f3e8:	20c7883a 	add	r3,r4,r3
 801f3ec:	18c00003 	ldbu	r3,0(r3)
 801f3f0:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801f3f4:	e0bfbb17 	ldw	r2,-276(fp)
 801f3f8:	10800284 	addi	r2,r2,10
 801f3fc:	e13fb117 	ldw	r4,-316(fp)
 801f400:	e0ffbd17 	ldw	r3,-268(fp)
 801f404:	20c7c83a 	sub	r3,r4,r3
 801f408:	1807d4ba 	srai	r3,r3,18
 801f40c:	18c0ffcc 	andi	r3,r3,1023
 801f410:	e13fb017 	ldw	r4,-320(fp)
 801f414:	20c7883a 	add	r3,r4,r3
 801f418:	18c00003 	ldbu	r3,0(r3)
 801f41c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801f420:	e0bfbb17 	ldw	r2,-276(fp)
 801f424:	10800104 	addi	r2,r2,4
 801f428:	e13fc217 	ldw	r4,-248(fp)
 801f42c:	e0ffbe17 	ldw	r3,-264(fp)
 801f430:	20c7883a 	add	r3,r4,r3
 801f434:	1807d4ba 	srai	r3,r3,18
 801f438:	18c0ffcc 	andi	r3,r3,1023
 801f43c:	e13fb017 	ldw	r4,-320(fp)
 801f440:	20c7883a 	add	r3,r4,r3
 801f444:	18c00003 	ldbu	r3,0(r3)
 801f448:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801f44c:	e0bfbb17 	ldw	r2,-276(fp)
 801f450:	10800244 	addi	r2,r2,9
 801f454:	e13fc217 	ldw	r4,-248(fp)
 801f458:	e0ffbe17 	ldw	r3,-264(fp)
 801f45c:	20c7c83a 	sub	r3,r4,r3
 801f460:	1807d4ba 	srai	r3,r3,18
 801f464:	18c0ffcc 	andi	r3,r3,1023
 801f468:	e13fb017 	ldw	r4,-320(fp)
 801f46c:	20c7883a 	add	r3,r4,r3
 801f470:	18c00003 	ldbu	r3,0(r3)
 801f474:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 801f478:	e0bfbb17 	ldw	r2,-276(fp)
 801f47c:	10800144 	addi	r2,r2,5
 801f480:	e13fc117 	ldw	r4,-252(fp)
 801f484:	e0ffbf17 	ldw	r3,-260(fp)
 801f488:	20c7883a 	add	r3,r4,r3
 801f48c:	1807d4ba 	srai	r3,r3,18
 801f490:	18c0ffcc 	andi	r3,r3,1023
 801f494:	e13fb017 	ldw	r4,-320(fp)
 801f498:	20c7883a 	add	r3,r4,r3
 801f49c:	18c00003 	ldbu	r3,0(r3)
 801f4a0:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801f4a4:	e0bfbb17 	ldw	r2,-276(fp)
 801f4a8:	10800204 	addi	r2,r2,8
 801f4ac:	e13fc117 	ldw	r4,-252(fp)
 801f4b0:	e0ffbf17 	ldw	r3,-260(fp)
 801f4b4:	20c7c83a 	sub	r3,r4,r3
 801f4b8:	1807d4ba 	srai	r3,r3,18
 801f4bc:	18c0ffcc 	andi	r3,r3,1023
 801f4c0:	e13fb017 	ldw	r4,-320(fp)
 801f4c4:	20c7883a 	add	r3,r4,r3
 801f4c8:	18c00003 	ldbu	r3,0(r3)
 801f4cc:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 801f4d0:	e0bfbb17 	ldw	r2,-276(fp)
 801f4d4:	10800184 	addi	r2,r2,6
 801f4d8:	e13fc017 	ldw	r4,-256(fp)
 801f4dc:	e0ffc317 	ldw	r3,-244(fp)
 801f4e0:	20c7883a 	add	r3,r4,r3
 801f4e4:	1807d4ba 	srai	r3,r3,18
 801f4e8:	18c0ffcc 	andi	r3,r3,1023
 801f4ec:	e13fb017 	ldw	r4,-320(fp)
 801f4f0:	20c7883a 	add	r3,r4,r3
 801f4f4:	18c00003 	ldbu	r3,0(r3)
 801f4f8:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 801f4fc:	e0bfbb17 	ldw	r2,-276(fp)
 801f500:	108001c4 	addi	r2,r2,7
 801f504:	e13fc017 	ldw	r4,-256(fp)
 801f508:	e0ffc317 	ldw	r3,-244(fp)
 801f50c:	20c7c83a 	sub	r3,r4,r3
 801f510:	1807d4ba 	srai	r3,r3,18
 801f514:	18c0ffcc 	andi	r3,r3,1023
 801f518:	e13fb017 	ldw	r4,-320(fp)
 801f51c:	20c7883a 	add	r3,r4,r3
 801f520:	18c00003 	ldbu	r3,0(r3)
 801f524:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 8;		/* advance pointer to next row */
 801f528:	e0bfae17 	ldw	r2,-328(fp)
 801f52c:	10800804 	addi	r2,r2,32
 801f530:	e0bfae15 	stw	r2,-328(fp)

	/* Pass 2: process 7 rows from work array, store into output array.
	* 14-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/28).
	*/
	wsptr = workspace;
	for (ctr = 0; ctr < 7; ctr++) {
 801f534:	e0bfaf17 	ldw	r2,-324(fp)
 801f538:	10800044 	addi	r2,r2,1
 801f53c:	e0bfaf15 	stw	r2,-324(fp)
 801f540:	e0bfaf17 	ldw	r2,-324(fp)
 801f544:	108001d0 	cmplti	r2,r2,7
 801f548:	103e681e 	bne	r2,zero,801eeec <jpeg_idct_14x7+0x4a8>
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 8;		/* advance pointer to next row */
	}
}
 801f54c:	e037883a 	mov	sp,fp
 801f550:	dfc00217 	ldw	ra,8(sp)
 801f554:	df000117 	ldw	fp,4(sp)
 801f558:	dc000017 	ldw	r16,0(sp)
 801f55c:	dec00304 	addi	sp,sp,12
 801f560:	f800283a 	ret

0801f564 <jpeg_idct_12x6>:

GLOBAL(void)
	jpeg_idct_12x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801f564:	deffb304 	addi	sp,sp,-308
 801f568:	dfc04c15 	stw	ra,304(sp)
 801f56c:	df004b15 	stw	fp,300(sp)
 801f570:	dc004a15 	stw	r16,296(sp)
 801f574:	df004a04 	addi	fp,sp,296
 801f578:	e13ffc15 	stw	r4,-16(fp)
 801f57c:	e17ffd15 	stw	r5,-12(fp)
 801f580:	e1bffe15 	stw	r6,-8(fp)
 801f584:	e1ffff15 	stw	r7,-4(fp)
	INT32 z1, z2, z3, z4;
	JCOEFPTR inptr;
	ISLOW_MULT_TYPE * quantptr;
	int * wsptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801f588:	e0bffc17 	ldw	r2,-16(fp)
 801f58c:	10804917 	ldw	r2,292(r2)
 801f590:	10802004 	addi	r2,r2,128
 801f594:	e0bfba15 	stw	r2,-280(fp)
	SHIFT_TEMPS

		/* Pass 1: process columns from input, store into work array.
		* 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
		*/
		inptr = coef_block;
 801f598:	e0bffe17 	ldw	r2,-8(fp)
 801f59c:	e0bfb615 	stw	r2,-296(fp)
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801f5a0:	e0bffd17 	ldw	r2,-12(fp)
 801f5a4:	10801517 	ldw	r2,84(r2)
 801f5a8:	e0bfb715 	stw	r2,-292(fp)
	wsptr = workspace;
 801f5ac:	e0bfcc04 	addi	r2,fp,-208
 801f5b0:	e0bfb815 	stw	r2,-288(fp)
	for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801f5b4:	e03fb915 	stw	zero,-284(fp)
 801f5b8:	0000bd06 	br	801f8b0 <jpeg_idct_12x6+0x34c>
		/* Even part */

		tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801f5bc:	e0bfb617 	ldw	r2,-296(fp)
 801f5c0:	1080000b 	ldhu	r2,0(r2)
 801f5c4:	10ffffcc 	andi	r3,r2,65535
 801f5c8:	18e0001c 	xori	r3,r3,32768
 801f5cc:	18e00004 	addi	r3,r3,-32768
 801f5d0:	e0bfb717 	ldw	r2,-292(fp)
 801f5d4:	10800017 	ldw	r2,0(r2)
 801f5d8:	1809883a 	mov	r4,r3
 801f5dc:	100b883a 	mov	r5,r2
 801f5e0:	802c2180 	call	802c218 <__mulsi3>
 801f5e4:	e0bfbb15 	stw	r2,-276(fp)
		tmp10 <<= CONST_BITS;
 801f5e8:	e0bfbb17 	ldw	r2,-276(fp)
 801f5ec:	1004937a 	slli	r2,r2,13
 801f5f0:	e0bfbb15 	stw	r2,-276(fp)
		/* Add fudge factor here for final descale. */
		tmp10 += ONE << (CONST_BITS-PASS1_BITS-1);
 801f5f4:	e0bfbb17 	ldw	r2,-276(fp)
 801f5f8:	10810004 	addi	r2,r2,1024
 801f5fc:	e0bfbb15 	stw	r2,-276(fp)
		tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801f600:	e0bfb617 	ldw	r2,-296(fp)
 801f604:	10801004 	addi	r2,r2,64
 801f608:	1080000b 	ldhu	r2,0(r2)
 801f60c:	10ffffcc 	andi	r3,r2,65535
 801f610:	18e0001c 	xori	r3,r3,32768
 801f614:	18e00004 	addi	r3,r3,-32768
 801f618:	e0bfb717 	ldw	r2,-292(fp)
 801f61c:	10802004 	addi	r2,r2,128
 801f620:	10800017 	ldw	r2,0(r2)
 801f624:	1809883a 	mov	r4,r3
 801f628:	100b883a 	mov	r5,r2
 801f62c:	802c2180 	call	802c218 <__mulsi3>
 801f630:	e0bfbc15 	stw	r2,-272(fp)
		tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 801f634:	e13fbc17 	ldw	r4,-272(fp)
 801f638:	0145a844 	movi	r5,5793
 801f63c:	802c2180 	call	802c218 <__mulsi3>
 801f640:	e0bfbd15 	stw	r2,-268(fp)
		tmp11 = tmp10 + tmp20;
 801f644:	e0ffbb17 	ldw	r3,-276(fp)
 801f648:	e0bfbd17 	ldw	r2,-268(fp)
 801f64c:	1885883a 	add	r2,r3,r2
 801f650:	e0bfbe15 	stw	r2,-264(fp)
		tmp21 = RIGHT_SHIFT(tmp10 - tmp20 - tmp20, CONST_BITS-PASS1_BITS);
 801f654:	e0ffbb17 	ldw	r3,-276(fp)
 801f658:	e0bfbd17 	ldw	r2,-268(fp)
 801f65c:	1887c83a 	sub	r3,r3,r2
 801f660:	e0bfbd17 	ldw	r2,-268(fp)
 801f664:	1885c83a 	sub	r2,r3,r2
 801f668:	1005d2fa 	srai	r2,r2,11
 801f66c:	e0bfbf15 	stw	r2,-260(fp)
		tmp20 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801f670:	e0bfb617 	ldw	r2,-296(fp)
 801f674:	10800804 	addi	r2,r2,32
 801f678:	1080000b 	ldhu	r2,0(r2)
 801f67c:	10ffffcc 	andi	r3,r2,65535
 801f680:	18e0001c 	xori	r3,r3,32768
 801f684:	18e00004 	addi	r3,r3,-32768
 801f688:	e0bfb717 	ldw	r2,-292(fp)
 801f68c:	10801004 	addi	r2,r2,64
 801f690:	10800017 	ldw	r2,0(r2)
 801f694:	1809883a 	mov	r4,r3
 801f698:	100b883a 	mov	r5,r2
 801f69c:	802c2180 	call	802c218 <__mulsi3>
 801f6a0:	e0bfbd15 	stw	r2,-268(fp)
		tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 801f6a4:	e13fbd17 	ldw	r4,-268(fp)
 801f6a8:	0149cc44 	movi	r5,10033
 801f6ac:	802c2180 	call	802c218 <__mulsi3>
 801f6b0:	e0bfbb15 	stw	r2,-276(fp)
		tmp20 = tmp11 + tmp10;
 801f6b4:	e0ffbe17 	ldw	r3,-264(fp)
 801f6b8:	e0bfbb17 	ldw	r2,-276(fp)
 801f6bc:	1885883a 	add	r2,r3,r2
 801f6c0:	e0bfbd15 	stw	r2,-268(fp)
		tmp22 = tmp11 - tmp10;
 801f6c4:	e0ffbe17 	ldw	r3,-264(fp)
 801f6c8:	e0bfbb17 	ldw	r2,-276(fp)
 801f6cc:	1885c83a 	sub	r2,r3,r2
 801f6d0:	e0bfc015 	stw	r2,-256(fp)

		/* Odd part */

		z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801f6d4:	e0bfb617 	ldw	r2,-296(fp)
 801f6d8:	10800404 	addi	r2,r2,16
 801f6dc:	1080000b 	ldhu	r2,0(r2)
 801f6e0:	10ffffcc 	andi	r3,r2,65535
 801f6e4:	18e0001c 	xori	r3,r3,32768
 801f6e8:	18e00004 	addi	r3,r3,-32768
 801f6ec:	e0bfb717 	ldw	r2,-292(fp)
 801f6f0:	10800804 	addi	r2,r2,32
 801f6f4:	10800017 	ldw	r2,0(r2)
 801f6f8:	1809883a 	mov	r4,r3
 801f6fc:	100b883a 	mov	r5,r2
 801f700:	802c2180 	call	802c218 <__mulsi3>
 801f704:	e0bfc115 	stw	r2,-252(fp)
		z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801f708:	e0bfb617 	ldw	r2,-296(fp)
 801f70c:	10800c04 	addi	r2,r2,48
 801f710:	1080000b 	ldhu	r2,0(r2)
 801f714:	10ffffcc 	andi	r3,r2,65535
 801f718:	18e0001c 	xori	r3,r3,32768
 801f71c:	18e00004 	addi	r3,r3,-32768
 801f720:	e0bfb717 	ldw	r2,-292(fp)
 801f724:	10801804 	addi	r2,r2,96
 801f728:	10800017 	ldw	r2,0(r2)
 801f72c:	1809883a 	mov	r4,r3
 801f730:	100b883a 	mov	r5,r2
 801f734:	802c2180 	call	802c218 <__mulsi3>
 801f738:	e0bfc215 	stw	r2,-248(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801f73c:	e0bfb617 	ldw	r2,-296(fp)
 801f740:	10801404 	addi	r2,r2,80
 801f744:	1080000b 	ldhu	r2,0(r2)
 801f748:	10ffffcc 	andi	r3,r2,65535
 801f74c:	18e0001c 	xori	r3,r3,32768
 801f750:	18e00004 	addi	r3,r3,-32768
 801f754:	e0bfb717 	ldw	r2,-292(fp)
 801f758:	10802804 	addi	r2,r2,160
 801f75c:	10800017 	ldw	r2,0(r2)
 801f760:	1809883a 	mov	r4,r3
 801f764:	100b883a 	mov	r5,r2
 801f768:	802c2180 	call	802c218 <__mulsi3>
 801f76c:	e0bfc315 	stw	r2,-244(fp)
		tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 801f770:	e0ffc117 	ldw	r3,-252(fp)
 801f774:	e0bfc317 	ldw	r2,-244(fp)
 801f778:	1885883a 	add	r2,r3,r2
 801f77c:	1009883a 	mov	r4,r2
 801f780:	0142ed84 	movi	r5,2998
 801f784:	802c2180 	call	802c218 <__mulsi3>
 801f788:	e0bfbe15 	stw	r2,-264(fp)
		tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 801f78c:	e0ffc117 	ldw	r3,-252(fp)
 801f790:	e0bfc217 	ldw	r2,-248(fp)
 801f794:	1885883a 	add	r2,r3,r2
 801f798:	1006937a 	slli	r3,r2,13
 801f79c:	e0bfbe17 	ldw	r2,-264(fp)
 801f7a0:	1885883a 	add	r2,r3,r2
 801f7a4:	e0bfbb15 	stw	r2,-276(fp)
		tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 801f7a8:	e0ffc317 	ldw	r3,-244(fp)
 801f7ac:	e0bfc217 	ldw	r2,-248(fp)
 801f7b0:	1885c83a 	sub	r2,r3,r2
 801f7b4:	1006937a 	slli	r3,r2,13
 801f7b8:	e0bfbe17 	ldw	r2,-264(fp)
 801f7bc:	1885883a 	add	r2,r3,r2
 801f7c0:	e0bfbc15 	stw	r2,-272(fp)
		tmp11 = (z1 - z2 - z3) << PASS1_BITS;
 801f7c4:	e0ffc117 	ldw	r3,-252(fp)
 801f7c8:	e0bfc217 	ldw	r2,-248(fp)
 801f7cc:	1887c83a 	sub	r3,r3,r2
 801f7d0:	e0bfc317 	ldw	r2,-244(fp)
 801f7d4:	1885c83a 	sub	r2,r3,r2
 801f7d8:	1085883a 	add	r2,r2,r2
 801f7dc:	1085883a 	add	r2,r2,r2
 801f7e0:	e0bfbe15 	stw	r2,-264(fp)

		/* Final output stage */

		wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801f7e4:	e0ffbd17 	ldw	r3,-268(fp)
 801f7e8:	e0bfbb17 	ldw	r2,-276(fp)
 801f7ec:	1885883a 	add	r2,r3,r2
 801f7f0:	1007d2fa 	srai	r3,r2,11
 801f7f4:	e0bfb817 	ldw	r2,-288(fp)
 801f7f8:	10c00015 	stw	r3,0(r2)
		wsptr[8*5] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801f7fc:	e0bfb817 	ldw	r2,-288(fp)
 801f800:	10802804 	addi	r2,r2,160
 801f804:	e13fbd17 	ldw	r4,-268(fp)
 801f808:	e0ffbb17 	ldw	r3,-276(fp)
 801f80c:	20c7c83a 	sub	r3,r4,r3
 801f810:	1807d2fa 	srai	r3,r3,11
 801f814:	10c00015 	stw	r3,0(r2)
		wsptr[8*1] = (int) (tmp21 + tmp11);
 801f818:	e0bfb817 	ldw	r2,-288(fp)
 801f81c:	10800804 	addi	r2,r2,32
 801f820:	e13fbf17 	ldw	r4,-260(fp)
 801f824:	e0ffbe17 	ldw	r3,-264(fp)
 801f828:	20c7883a 	add	r3,r4,r3
 801f82c:	10c00015 	stw	r3,0(r2)
		wsptr[8*4] = (int) (tmp21 - tmp11);
 801f830:	e0bfb817 	ldw	r2,-288(fp)
 801f834:	10802004 	addi	r2,r2,128
 801f838:	e13fbf17 	ldw	r4,-260(fp)
 801f83c:	e0ffbe17 	ldw	r3,-264(fp)
 801f840:	20c7c83a 	sub	r3,r4,r3
 801f844:	10c00015 	stw	r3,0(r2)
		wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801f848:	e0bfb817 	ldw	r2,-288(fp)
 801f84c:	10801004 	addi	r2,r2,64
 801f850:	e13fc017 	ldw	r4,-256(fp)
 801f854:	e0ffbc17 	ldw	r3,-272(fp)
 801f858:	20c7883a 	add	r3,r4,r3
 801f85c:	1807d2fa 	srai	r3,r3,11
 801f860:	10c00015 	stw	r3,0(r2)
		wsptr[8*3] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801f864:	e0bfb817 	ldw	r2,-288(fp)
 801f868:	10801804 	addi	r2,r2,96
 801f86c:	e13fc017 	ldw	r4,-256(fp)
 801f870:	e0ffbc17 	ldw	r3,-272(fp)
 801f874:	20c7c83a 	sub	r3,r4,r3
 801f878:	1807d2fa 	srai	r3,r3,11
 801f87c:	10c00015 	stw	r3,0(r2)
		* 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
		*/
		inptr = coef_block;
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
	wsptr = workspace;
	for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801f880:	e0bfb917 	ldw	r2,-284(fp)
 801f884:	10800044 	addi	r2,r2,1
 801f888:	e0bfb915 	stw	r2,-284(fp)
 801f88c:	e0bfb617 	ldw	r2,-296(fp)
 801f890:	10800084 	addi	r2,r2,2
 801f894:	e0bfb615 	stw	r2,-296(fp)
 801f898:	e0bfb717 	ldw	r2,-292(fp)
 801f89c:	10800104 	addi	r2,r2,4
 801f8a0:	e0bfb715 	stw	r2,-292(fp)
 801f8a4:	e0bfb817 	ldw	r2,-288(fp)
 801f8a8:	10800104 	addi	r2,r2,4
 801f8ac:	e0bfb815 	stw	r2,-288(fp)
 801f8b0:	e0bfb917 	ldw	r2,-284(fp)
 801f8b4:	10800210 	cmplti	r2,r2,8
 801f8b8:	103f401e 	bne	r2,zero,801f5bc <jpeg_idct_12x6+0x58>
	}

	/* Pass 2: process 6 rows from work array, store into output array.
	* 12-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/24).
	*/
	wsptr = workspace;
 801f8bc:	e0bfcc04 	addi	r2,fp,-208
 801f8c0:	e0bfb815 	stw	r2,-288(fp)
	for (ctr = 0; ctr < 6; ctr++) {
 801f8c4:	e03fb915 	stw	zero,-284(fp)
 801f8c8:	00015806 	br	801fe2c <jpeg_idct_12x6+0x8c8>
		outptr = output_buf[ctr] + output_col;
 801f8cc:	e0bfb917 	ldw	r2,-284(fp)
 801f8d0:	1085883a 	add	r2,r2,r2
 801f8d4:	1085883a 	add	r2,r2,r2
 801f8d8:	e0ffff17 	ldw	r3,-4(fp)
 801f8dc:	1885883a 	add	r2,r3,r2
 801f8e0:	10c00017 	ldw	r3,0(r2)
 801f8e4:	e0800317 	ldw	r2,12(fp)
 801f8e8:	1885883a 	add	r2,r3,r2
 801f8ec:	e0bfc415 	stw	r2,-240(fp)

		/* Even part */

		/* Add fudge factor here for final descale. */
		z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801f8f0:	e0bfb817 	ldw	r2,-288(fp)
 801f8f4:	10800017 	ldw	r2,0(r2)
 801f8f8:	10800404 	addi	r2,r2,16
 801f8fc:	e0bfc315 	stw	r2,-244(fp)
		z3 <<= CONST_BITS;
 801f900:	e0bfc317 	ldw	r2,-244(fp)
 801f904:	1004937a 	slli	r2,r2,13
 801f908:	e0bfc315 	stw	r2,-244(fp)

		z4 = (INT32) wsptr[4];
 801f90c:	e0bfb817 	ldw	r2,-288(fp)
 801f910:	10800404 	addi	r2,r2,16
 801f914:	10800017 	ldw	r2,0(r2)
 801f918:	e0bfc515 	stw	r2,-236(fp)
		z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 801f91c:	e13fc517 	ldw	r4,-236(fp)
 801f920:	0149cc44 	movi	r5,10033
 801f924:	802c2180 	call	802c218 <__mulsi3>
 801f928:	e0bfc515 	stw	r2,-236(fp)

		tmp10 = z3 + z4;
 801f92c:	e0ffc317 	ldw	r3,-244(fp)
 801f930:	e0bfc517 	ldw	r2,-236(fp)
 801f934:	1885883a 	add	r2,r3,r2
 801f938:	e0bfbb15 	stw	r2,-276(fp)
		tmp11 = z3 - z4;
 801f93c:	e0ffc317 	ldw	r3,-244(fp)
 801f940:	e0bfc517 	ldw	r2,-236(fp)
 801f944:	1885c83a 	sub	r2,r3,r2
 801f948:	e0bfbe15 	stw	r2,-264(fp)

		z1 = (INT32) wsptr[2];
 801f94c:	e0bfb817 	ldw	r2,-288(fp)
 801f950:	10800204 	addi	r2,r2,8
 801f954:	10800017 	ldw	r2,0(r2)
 801f958:	e0bfc115 	stw	r2,-252(fp)
		z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 801f95c:	e13fc117 	ldw	r4,-252(fp)
 801f960:	014aed84 	movi	r5,11190
 801f964:	802c2180 	call	802c218 <__mulsi3>
 801f968:	e0bfc515 	stw	r2,-236(fp)
		z1 <<= CONST_BITS;
 801f96c:	e0bfc117 	ldw	r2,-252(fp)
 801f970:	1004937a 	slli	r2,r2,13
 801f974:	e0bfc115 	stw	r2,-252(fp)
		z2 = (INT32) wsptr[6];
 801f978:	e0bfb817 	ldw	r2,-288(fp)
 801f97c:	10800604 	addi	r2,r2,24
 801f980:	10800017 	ldw	r2,0(r2)
 801f984:	e0bfc215 	stw	r2,-248(fp)
		z2 <<= CONST_BITS;
 801f988:	e0bfc217 	ldw	r2,-248(fp)
 801f98c:	1004937a 	slli	r2,r2,13
 801f990:	e0bfc215 	stw	r2,-248(fp)

		tmp12 = z1 - z2;
 801f994:	e0ffc117 	ldw	r3,-252(fp)
 801f998:	e0bfc217 	ldw	r2,-248(fp)
 801f99c:	1885c83a 	sub	r2,r3,r2
 801f9a0:	e0bfbc15 	stw	r2,-272(fp)

		tmp21 = z3 + tmp12;
 801f9a4:	e0ffc317 	ldw	r3,-244(fp)
 801f9a8:	e0bfbc17 	ldw	r2,-272(fp)
 801f9ac:	1885883a 	add	r2,r3,r2
 801f9b0:	e0bfbf15 	stw	r2,-260(fp)
		tmp24 = z3 - tmp12;
 801f9b4:	e0ffc317 	ldw	r3,-244(fp)
 801f9b8:	e0bfbc17 	ldw	r2,-272(fp)
 801f9bc:	1885c83a 	sub	r2,r3,r2
 801f9c0:	e0bfc615 	stw	r2,-232(fp)

		tmp12 = z4 + z2;
 801f9c4:	e0ffc517 	ldw	r3,-236(fp)
 801f9c8:	e0bfc217 	ldw	r2,-248(fp)
 801f9cc:	1885883a 	add	r2,r3,r2
 801f9d0:	e0bfbc15 	stw	r2,-272(fp)

		tmp20 = tmp10 + tmp12;
 801f9d4:	e0ffbb17 	ldw	r3,-276(fp)
 801f9d8:	e0bfbc17 	ldw	r2,-272(fp)
 801f9dc:	1885883a 	add	r2,r3,r2
 801f9e0:	e0bfbd15 	stw	r2,-268(fp)
		tmp25 = tmp10 - tmp12;
 801f9e4:	e0ffbb17 	ldw	r3,-276(fp)
 801f9e8:	e0bfbc17 	ldw	r2,-272(fp)
 801f9ec:	1885c83a 	sub	r2,r3,r2
 801f9f0:	e0bfc715 	stw	r2,-228(fp)

		tmp12 = z4 - z1 - z2;
 801f9f4:	e0ffc517 	ldw	r3,-236(fp)
 801f9f8:	e0bfc117 	ldw	r2,-252(fp)
 801f9fc:	1887c83a 	sub	r3,r3,r2
 801fa00:	e0bfc217 	ldw	r2,-248(fp)
 801fa04:	1885c83a 	sub	r2,r3,r2
 801fa08:	e0bfbc15 	stw	r2,-272(fp)

		tmp22 = tmp11 + tmp12;
 801fa0c:	e0ffbe17 	ldw	r3,-264(fp)
 801fa10:	e0bfbc17 	ldw	r2,-272(fp)
 801fa14:	1885883a 	add	r2,r3,r2
 801fa18:	e0bfc015 	stw	r2,-256(fp)
		tmp23 = tmp11 - tmp12;
 801fa1c:	e0ffbe17 	ldw	r3,-264(fp)
 801fa20:	e0bfbc17 	ldw	r2,-272(fp)
 801fa24:	1885c83a 	sub	r2,r3,r2
 801fa28:	e0bfc815 	stw	r2,-224(fp)

		/* Odd part */

		z1 = (INT32) wsptr[1];
 801fa2c:	e0bfb817 	ldw	r2,-288(fp)
 801fa30:	10800104 	addi	r2,r2,4
 801fa34:	10800017 	ldw	r2,0(r2)
 801fa38:	e0bfc115 	stw	r2,-252(fp)
		z2 = (INT32) wsptr[3];
 801fa3c:	e0bfb817 	ldw	r2,-288(fp)
 801fa40:	10800304 	addi	r2,r2,12
 801fa44:	10800017 	ldw	r2,0(r2)
 801fa48:	e0bfc215 	stw	r2,-248(fp)
		z3 = (INT32) wsptr[5];
 801fa4c:	e0bfb817 	ldw	r2,-288(fp)
 801fa50:	10800504 	addi	r2,r2,20
 801fa54:	10800017 	ldw	r2,0(r2)
 801fa58:	e0bfc315 	stw	r2,-244(fp)
		z4 = (INT32) wsptr[7];
 801fa5c:	e0bfb817 	ldw	r2,-288(fp)
 801fa60:	10800704 	addi	r2,r2,28
 801fa64:	10800017 	ldw	r2,0(r2)
 801fa68:	e0bfc515 	stw	r2,-236(fp)

		tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 801fa6c:	e13fc217 	ldw	r4,-248(fp)
 801fa70:	014a73c4 	movi	r5,10703
 801fa74:	802c2180 	call	802c218 <__mulsi3>
 801fa78:	e0bfbe15 	stw	r2,-264(fp)
		tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 801fa7c:	e13fc217 	ldw	r4,-248(fp)
 801fa80:	017babc4 	movi	r5,-4433
 801fa84:	802c2180 	call	802c218 <__mulsi3>
 801fa88:	e0bfc915 	stw	r2,-220(fp)

		tmp10 = z1 + z3;
 801fa8c:	e0ffc117 	ldw	r3,-252(fp)
 801fa90:	e0bfc317 	ldw	r2,-244(fp)
 801fa94:	1885883a 	add	r2,r3,r2
 801fa98:	e0bfbb15 	stw	r2,-276(fp)
		tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 801fa9c:	e0ffbb17 	ldw	r3,-276(fp)
 801faa0:	e0bfc517 	ldw	r2,-236(fp)
 801faa4:	1885883a 	add	r2,r3,r2
 801faa8:	1009883a 	mov	r4,r2
 801faac:	0146e344 	movi	r5,7053
 801fab0:	802c2180 	call	802c218 <__mulsi3>
 801fab4:	e0bfca15 	stw	r2,-216(fp)
		tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 801fab8:	e13fbb17 	ldw	r4,-276(fp)
 801fabc:	014216c4 	movi	r5,2139
 801fac0:	802c2180 	call	802c218 <__mulsi3>
 801fac4:	1007883a 	mov	r3,r2
 801fac8:	e0bfca17 	ldw	r2,-216(fp)
 801facc:	1885883a 	add	r2,r3,r2
 801fad0:	e0bfbc15 	stw	r2,-272(fp)
		tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 801fad4:	e0ffbc17 	ldw	r3,-272(fp)
 801fad8:	e0bfbe17 	ldw	r2,-264(fp)
 801fadc:	18a1883a 	add	r16,r3,r2
 801fae0:	e13fc117 	ldw	r4,-252(fp)
 801fae4:	01423dc4 	movi	r5,2295
 801fae8:	802c2180 	call	802c218 <__mulsi3>
 801faec:	8085883a 	add	r2,r16,r2
 801faf0:	e0bfbb15 	stw	r2,-276(fp)
		tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 801faf4:	e0ffc317 	ldw	r3,-244(fp)
 801faf8:	e0bfc517 	ldw	r2,-236(fp)
 801fafc:	1885883a 	add	r2,r3,r2
 801fb00:	1009883a 	mov	r4,r2
 801fb04:	0177a2c4 	movi	r5,-8565
 801fb08:	802c2180 	call	802c218 <__mulsi3>
 801fb0c:	e0bfcb15 	stw	r2,-212(fp)
		tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 801fb10:	e0ffcb17 	ldw	r3,-212(fp)
 801fb14:	e0bfc917 	ldw	r2,-220(fp)
 801fb18:	18a1883a 	add	r16,r3,r2
 801fb1c:	e13fc317 	ldw	r4,-244(fp)
 801fb20:	01742c04 	movi	r5,-12112
 801fb24:	802c2180 	call	802c218 <__mulsi3>
 801fb28:	8085883a 	add	r2,r16,r2
 801fb2c:	e0ffbc17 	ldw	r3,-272(fp)
 801fb30:	1885883a 	add	r2,r3,r2
 801fb34:	e0bfbc15 	stw	r2,-272(fp)
		tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 801fb38:	e0ffca17 	ldw	r3,-216(fp)
 801fb3c:	e0bfbe17 	ldw	r2,-264(fp)
 801fb40:	18a1c83a 	sub	r16,r3,r2
 801fb44:	e13fc517 	ldw	r4,-236(fp)
 801fb48:	014cb184 	movi	r5,12998
 801fb4c:	802c2180 	call	802c218 <__mulsi3>
 801fb50:	8085883a 	add	r2,r16,r2
 801fb54:	e0ffcb17 	ldw	r3,-212(fp)
 801fb58:	1885883a 	add	r2,r3,r2
 801fb5c:	e0bfcb15 	stw	r2,-212(fp)
		tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 801fb60:	e13fc117 	ldw	r4,-252(fp)
 801fb64:	017a9704 	movi	r5,-5540
 801fb68:	802c2180 	call	802c218 <__mulsi3>
 801fb6c:	1007883a 	mov	r3,r2
 801fb70:	e0bfc917 	ldw	r2,-220(fp)
 801fb74:	18a1883a 	add	r16,r3,r2
			MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */
 801fb78:	e13fc517 	ldw	r4,-236(fp)
 801fb7c:	01702304 	movi	r5,-16244
 801fb80:	802c2180 	call	802c218 <__mulsi3>
		tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
		tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
		tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
		tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
		tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
		tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 801fb84:	8085883a 	add	r2,r16,r2
 801fb88:	e0ffca17 	ldw	r3,-216(fp)
 801fb8c:	1885883a 	add	r2,r3,r2
 801fb90:	e0bfca15 	stw	r2,-216(fp)
			MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */

		z1 -= z4;
 801fb94:	e0ffc117 	ldw	r3,-252(fp)
 801fb98:	e0bfc517 	ldw	r2,-236(fp)
 801fb9c:	1885c83a 	sub	r2,r3,r2
 801fba0:	e0bfc115 	stw	r2,-252(fp)
		z2 -= z3;
 801fba4:	e0ffc217 	ldw	r3,-248(fp)
 801fba8:	e0bfc317 	ldw	r2,-244(fp)
 801fbac:	1885c83a 	sub	r2,r3,r2
 801fbb0:	e0bfc215 	stw	r2,-248(fp)
		z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 801fbb4:	e0ffc117 	ldw	r3,-252(fp)
 801fbb8:	e0bfc217 	ldw	r2,-248(fp)
 801fbbc:	1885883a 	add	r2,r3,r2
 801fbc0:	1009883a 	mov	r4,r2
 801fbc4:	01445444 	movi	r5,4433
 801fbc8:	802c2180 	call	802c218 <__mulsi3>
 801fbcc:	e0bfc315 	stw	r2,-244(fp)
		tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 801fbd0:	e13fc117 	ldw	r4,-252(fp)
 801fbd4:	01461f84 	movi	r5,6270
 801fbd8:	802c2180 	call	802c218 <__mulsi3>
 801fbdc:	1007883a 	mov	r3,r2
 801fbe0:	e0bfc317 	ldw	r2,-244(fp)
 801fbe4:	1885883a 	add	r2,r3,r2
 801fbe8:	e0bfbe15 	stw	r2,-264(fp)
		tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 801fbec:	e13fc217 	ldw	r4,-248(fp)
 801fbf0:	017137c4 	movi	r5,-15137
 801fbf4:	802c2180 	call	802c218 <__mulsi3>
 801fbf8:	1007883a 	mov	r3,r2
 801fbfc:	e0bfc317 	ldw	r2,-244(fp)
 801fc00:	1885883a 	add	r2,r3,r2
 801fc04:	e0bfc915 	stw	r2,-220(fp)

		/* Final output stage */

		outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801fc08:	e0ffbd17 	ldw	r3,-268(fp)
 801fc0c:	e0bfbb17 	ldw	r2,-276(fp)
 801fc10:	1885883a 	add	r2,r3,r2
 801fc14:	1005d4ba 	srai	r2,r2,18
 801fc18:	1080ffcc 	andi	r2,r2,1023
 801fc1c:	e0ffba17 	ldw	r3,-280(fp)
 801fc20:	1885883a 	add	r2,r3,r2
 801fc24:	10c00003 	ldbu	r3,0(r2)
 801fc28:	e0bfc417 	ldw	r2,-240(fp)
 801fc2c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801fc30:	e0bfc417 	ldw	r2,-240(fp)
 801fc34:	108002c4 	addi	r2,r2,11
 801fc38:	e13fbd17 	ldw	r4,-268(fp)
 801fc3c:	e0ffbb17 	ldw	r3,-276(fp)
 801fc40:	20c7c83a 	sub	r3,r4,r3
 801fc44:	1807d4ba 	srai	r3,r3,18
 801fc48:	18c0ffcc 	andi	r3,r3,1023
 801fc4c:	e13fba17 	ldw	r4,-280(fp)
 801fc50:	20c7883a 	add	r3,r4,r3
 801fc54:	18c00003 	ldbu	r3,0(r3)
 801fc58:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801fc5c:	e0bfc417 	ldw	r2,-240(fp)
 801fc60:	10800044 	addi	r2,r2,1
 801fc64:	e13fbf17 	ldw	r4,-260(fp)
 801fc68:	e0ffbe17 	ldw	r3,-264(fp)
 801fc6c:	20c7883a 	add	r3,r4,r3
 801fc70:	1807d4ba 	srai	r3,r3,18
 801fc74:	18c0ffcc 	andi	r3,r3,1023
 801fc78:	e13fba17 	ldw	r4,-280(fp)
 801fc7c:	20c7883a 	add	r3,r4,r3
 801fc80:	18c00003 	ldbu	r3,0(r3)
 801fc84:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801fc88:	e0bfc417 	ldw	r2,-240(fp)
 801fc8c:	10800284 	addi	r2,r2,10
 801fc90:	e13fbf17 	ldw	r4,-260(fp)
 801fc94:	e0ffbe17 	ldw	r3,-264(fp)
 801fc98:	20c7c83a 	sub	r3,r4,r3
 801fc9c:	1807d4ba 	srai	r3,r3,18
 801fca0:	18c0ffcc 	andi	r3,r3,1023
 801fca4:	e13fba17 	ldw	r4,-280(fp)
 801fca8:	20c7883a 	add	r3,r4,r3
 801fcac:	18c00003 	ldbu	r3,0(r3)
 801fcb0:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801fcb4:	e0bfc417 	ldw	r2,-240(fp)
 801fcb8:	10800084 	addi	r2,r2,2
 801fcbc:	e13fc017 	ldw	r4,-256(fp)
 801fcc0:	e0ffbc17 	ldw	r3,-272(fp)
 801fcc4:	20c7883a 	add	r3,r4,r3
 801fcc8:	1807d4ba 	srai	r3,r3,18
 801fccc:	18c0ffcc 	andi	r3,r3,1023
 801fcd0:	e13fba17 	ldw	r4,-280(fp)
 801fcd4:	20c7883a 	add	r3,r4,r3
 801fcd8:	18c00003 	ldbu	r3,0(r3)
 801fcdc:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801fce0:	e0bfc417 	ldw	r2,-240(fp)
 801fce4:	10800244 	addi	r2,r2,9
 801fce8:	e13fc017 	ldw	r4,-256(fp)
 801fcec:	e0ffbc17 	ldw	r3,-272(fp)
 801fcf0:	20c7c83a 	sub	r3,r4,r3
 801fcf4:	1807d4ba 	srai	r3,r3,18
 801fcf8:	18c0ffcc 	andi	r3,r3,1023
 801fcfc:	e13fba17 	ldw	r4,-280(fp)
 801fd00:	20c7883a 	add	r3,r4,r3
 801fd04:	18c00003 	ldbu	r3,0(r3)
 801fd08:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801fd0c:	e0bfc417 	ldw	r2,-240(fp)
 801fd10:	108000c4 	addi	r2,r2,3
 801fd14:	e13fc817 	ldw	r4,-224(fp)
 801fd18:	e0ffcb17 	ldw	r3,-212(fp)
 801fd1c:	20c7883a 	add	r3,r4,r3
 801fd20:	1807d4ba 	srai	r3,r3,18
 801fd24:	18c0ffcc 	andi	r3,r3,1023
 801fd28:	e13fba17 	ldw	r4,-280(fp)
 801fd2c:	20c7883a 	add	r3,r4,r3
 801fd30:	18c00003 	ldbu	r3,0(r3)
 801fd34:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801fd38:	e0bfc417 	ldw	r2,-240(fp)
 801fd3c:	10800204 	addi	r2,r2,8
 801fd40:	e13fc817 	ldw	r4,-224(fp)
 801fd44:	e0ffcb17 	ldw	r3,-212(fp)
 801fd48:	20c7c83a 	sub	r3,r4,r3
 801fd4c:	1807d4ba 	srai	r3,r3,18
 801fd50:	18c0ffcc 	andi	r3,r3,1023
 801fd54:	e13fba17 	ldw	r4,-280(fp)
 801fd58:	20c7883a 	add	r3,r4,r3
 801fd5c:	18c00003 	ldbu	r3,0(r3)
 801fd60:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801fd64:	e0bfc417 	ldw	r2,-240(fp)
 801fd68:	10800104 	addi	r2,r2,4
 801fd6c:	e13fc617 	ldw	r4,-232(fp)
 801fd70:	e0ffc917 	ldw	r3,-220(fp)
 801fd74:	20c7883a 	add	r3,r4,r3
 801fd78:	1807d4ba 	srai	r3,r3,18
 801fd7c:	18c0ffcc 	andi	r3,r3,1023
 801fd80:	e13fba17 	ldw	r4,-280(fp)
 801fd84:	20c7883a 	add	r3,r4,r3
 801fd88:	18c00003 	ldbu	r3,0(r3)
 801fd8c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801fd90:	e0bfc417 	ldw	r2,-240(fp)
 801fd94:	108001c4 	addi	r2,r2,7
 801fd98:	e13fc617 	ldw	r4,-232(fp)
 801fd9c:	e0ffc917 	ldw	r3,-220(fp)
 801fda0:	20c7c83a 	sub	r3,r4,r3
 801fda4:	1807d4ba 	srai	r3,r3,18
 801fda8:	18c0ffcc 	andi	r3,r3,1023
 801fdac:	e13fba17 	ldw	r4,-280(fp)
 801fdb0:	20c7883a 	add	r3,r4,r3
 801fdb4:	18c00003 	ldbu	r3,0(r3)
 801fdb8:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 801fdbc:	e0bfc417 	ldw	r2,-240(fp)
 801fdc0:	10800144 	addi	r2,r2,5
 801fdc4:	e13fc717 	ldw	r4,-228(fp)
 801fdc8:	e0ffca17 	ldw	r3,-216(fp)
 801fdcc:	20c7883a 	add	r3,r4,r3
 801fdd0:	1807d4ba 	srai	r3,r3,18
 801fdd4:	18c0ffcc 	andi	r3,r3,1023
 801fdd8:	e13fba17 	ldw	r4,-280(fp)
 801fddc:	20c7883a 	add	r3,r4,r3
 801fde0:	18c00003 	ldbu	r3,0(r3)
 801fde4:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801fde8:	e0bfc417 	ldw	r2,-240(fp)
 801fdec:	10800184 	addi	r2,r2,6
 801fdf0:	e13fc717 	ldw	r4,-228(fp)
 801fdf4:	e0ffca17 	ldw	r3,-216(fp)
 801fdf8:	20c7c83a 	sub	r3,r4,r3
 801fdfc:	1807d4ba 	srai	r3,r3,18
 801fe00:	18c0ffcc 	andi	r3,r3,1023
 801fe04:	e13fba17 	ldw	r4,-280(fp)
 801fe08:	20c7883a 	add	r3,r4,r3
 801fe0c:	18c00003 	ldbu	r3,0(r3)
 801fe10:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 8;		/* advance pointer to next row */
 801fe14:	e0bfb817 	ldw	r2,-288(fp)
 801fe18:	10800804 	addi	r2,r2,32
 801fe1c:	e0bfb815 	stw	r2,-288(fp)

	/* Pass 2: process 6 rows from work array, store into output array.
	* 12-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/24).
	*/
	wsptr = workspace;
	for (ctr = 0; ctr < 6; ctr++) {
 801fe20:	e0bfb917 	ldw	r2,-284(fp)
 801fe24:	10800044 	addi	r2,r2,1
 801fe28:	e0bfb915 	stw	r2,-284(fp)
 801fe2c:	e0bfb917 	ldw	r2,-284(fp)
 801fe30:	10800190 	cmplti	r2,r2,6
 801fe34:	103ea51e 	bne	r2,zero,801f8cc <jpeg_idct_12x6+0x368>
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 8;		/* advance pointer to next row */
	}
}
 801fe38:	e037883a 	mov	sp,fp
 801fe3c:	dfc00217 	ldw	ra,8(sp)
 801fe40:	df000117 	ldw	fp,4(sp)
 801fe44:	dc000017 	ldw	r16,0(sp)
 801fe48:	dec00304 	addi	sp,sp,12
 801fe4c:	f800283a 	ret

0801fe50 <jpeg_idct_10x5>:

GLOBAL(void)
	jpeg_idct_10x5 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801fe50:	deffbe04 	addi	sp,sp,-264
 801fe54:	dfc04115 	stw	ra,260(sp)
 801fe58:	df004015 	stw	fp,256(sp)
 801fe5c:	df004004 	addi	fp,sp,256
 801fe60:	e13ffc15 	stw	r4,-16(fp)
 801fe64:	e17ffd15 	stw	r5,-12(fp)
 801fe68:	e1bffe15 	stw	r6,-8(fp)
 801fe6c:	e1ffff15 	stw	r7,-4(fp)
	INT32 z1, z2, z3, z4;
	JCOEFPTR inptr;
	ISLOW_MULT_TYPE * quantptr;
	int * wsptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801fe70:	e0bffc17 	ldw	r2,-16(fp)
 801fe74:	10804917 	ldw	r2,292(r2)
 801fe78:	10802004 	addi	r2,r2,128
 801fe7c:	e0bfc415 	stw	r2,-240(fp)
	SHIFT_TEMPS

		/* Pass 1: process columns from input, store into work array.
		* 5-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/10).
		*/
		inptr = coef_block;
 801fe80:	e0bffe17 	ldw	r2,-8(fp)
 801fe84:	e0bfc015 	stw	r2,-256(fp)
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801fe88:	e0bffd17 	ldw	r2,-12(fp)
 801fe8c:	10801517 	ldw	r2,84(r2)
 801fe90:	e0bfc115 	stw	r2,-252(fp)
	wsptr = workspace;
 801fe94:	e0bfd404 	addi	r2,fp,-176
 801fe98:	e0bfc215 	stw	r2,-248(fp)
	for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801fe9c:	e03fc315 	stw	zero,-244(fp)
 801fea0:	0000a606 	br	802013c <jpeg_idct_10x5+0x2ec>
		/* Even part */

		tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801fea4:	e0bfc017 	ldw	r2,-256(fp)
 801fea8:	1080000b 	ldhu	r2,0(r2)
 801feac:	10ffffcc 	andi	r3,r2,65535
 801feb0:	18e0001c 	xori	r3,r3,32768
 801feb4:	18e00004 	addi	r3,r3,-32768
 801feb8:	e0bfc117 	ldw	r2,-252(fp)
 801febc:	10800017 	ldw	r2,0(r2)
 801fec0:	1809883a 	mov	r4,r3
 801fec4:	100b883a 	mov	r5,r2
 801fec8:	802c2180 	call	802c218 <__mulsi3>
 801fecc:	e0bfc515 	stw	r2,-236(fp)
		tmp12 <<= CONST_BITS;
 801fed0:	e0bfc517 	ldw	r2,-236(fp)
 801fed4:	1004937a 	slli	r2,r2,13
 801fed8:	e0bfc515 	stw	r2,-236(fp)
		/* Add fudge factor here for final descale. */
		tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
 801fedc:	e0bfc517 	ldw	r2,-236(fp)
 801fee0:	10810004 	addi	r2,r2,1024
 801fee4:	e0bfc515 	stw	r2,-236(fp)
		tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801fee8:	e0bfc017 	ldw	r2,-256(fp)
 801feec:	10800804 	addi	r2,r2,32
 801fef0:	1080000b 	ldhu	r2,0(r2)
 801fef4:	10ffffcc 	andi	r3,r2,65535
 801fef8:	18e0001c 	xori	r3,r3,32768
 801fefc:	18e00004 	addi	r3,r3,-32768
 801ff00:	e0bfc117 	ldw	r2,-252(fp)
 801ff04:	10801004 	addi	r2,r2,64
 801ff08:	10800017 	ldw	r2,0(r2)
 801ff0c:	1809883a 	mov	r4,r3
 801ff10:	100b883a 	mov	r5,r2
 801ff14:	802c2180 	call	802c218 <__mulsi3>
 801ff18:	e0bfc615 	stw	r2,-232(fp)
		tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801ff1c:	e0bfc017 	ldw	r2,-256(fp)
 801ff20:	10801004 	addi	r2,r2,64
 801ff24:	1080000b 	ldhu	r2,0(r2)
 801ff28:	10ffffcc 	andi	r3,r2,65535
 801ff2c:	18e0001c 	xori	r3,r3,32768
 801ff30:	18e00004 	addi	r3,r3,-32768
 801ff34:	e0bfc117 	ldw	r2,-252(fp)
 801ff38:	10802004 	addi	r2,r2,128
 801ff3c:	10800017 	ldw	r2,0(r2)
 801ff40:	1809883a 	mov	r4,r3
 801ff44:	100b883a 	mov	r5,r2
 801ff48:	802c2180 	call	802c218 <__mulsi3>
 801ff4c:	e0bfc715 	stw	r2,-228(fp)
		z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 801ff50:	e0ffc617 	ldw	r3,-232(fp)
 801ff54:	e0bfc717 	ldw	r2,-228(fp)
 801ff58:	1885883a 	add	r2,r3,r2
 801ff5c:	1009883a 	mov	r4,r2
 801ff60:	01465304 	movi	r5,6476
 801ff64:	802c2180 	call	802c218 <__mulsi3>
 801ff68:	e0bfc815 	stw	r2,-224(fp)
		z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 801ff6c:	e0ffc617 	ldw	r3,-232(fp)
 801ff70:	e0bfc717 	ldw	r2,-228(fp)
 801ff74:	1885c83a 	sub	r2,r3,r2
 801ff78:	1009883a 	mov	r4,r2
 801ff7c:	0142d404 	movi	r5,2896
 801ff80:	802c2180 	call	802c218 <__mulsi3>
 801ff84:	e0bfc915 	stw	r2,-220(fp)
		z3 = tmp12 + z2;
 801ff88:	e0ffc517 	ldw	r3,-236(fp)
 801ff8c:	e0bfc917 	ldw	r2,-220(fp)
 801ff90:	1885883a 	add	r2,r3,r2
 801ff94:	e0bfca15 	stw	r2,-216(fp)
		tmp10 = z3 + z1;
 801ff98:	e0ffca17 	ldw	r3,-216(fp)
 801ff9c:	e0bfc817 	ldw	r2,-224(fp)
 801ffa0:	1885883a 	add	r2,r3,r2
 801ffa4:	e0bfcb15 	stw	r2,-212(fp)
		tmp11 = z3 - z1;
 801ffa8:	e0ffca17 	ldw	r3,-216(fp)
 801ffac:	e0bfc817 	ldw	r2,-224(fp)
 801ffb0:	1885c83a 	sub	r2,r3,r2
 801ffb4:	e0bfcc15 	stw	r2,-208(fp)
		tmp12 -= z2 << 2;
 801ffb8:	e0bfc917 	ldw	r2,-220(fp)
 801ffbc:	1085883a 	add	r2,r2,r2
 801ffc0:	1085883a 	add	r2,r2,r2
 801ffc4:	e0ffc517 	ldw	r3,-236(fp)
 801ffc8:	1885c83a 	sub	r2,r3,r2
 801ffcc:	e0bfc515 	stw	r2,-236(fp)

		/* Odd part */

		z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801ffd0:	e0bfc017 	ldw	r2,-256(fp)
 801ffd4:	10800404 	addi	r2,r2,16
 801ffd8:	1080000b 	ldhu	r2,0(r2)
 801ffdc:	10ffffcc 	andi	r3,r2,65535
 801ffe0:	18e0001c 	xori	r3,r3,32768
 801ffe4:	18e00004 	addi	r3,r3,-32768
 801ffe8:	e0bfc117 	ldw	r2,-252(fp)
 801ffec:	10800804 	addi	r2,r2,32
 801fff0:	10800017 	ldw	r2,0(r2)
 801fff4:	1809883a 	mov	r4,r3
 801fff8:	100b883a 	mov	r5,r2
 801fffc:	802c2180 	call	802c218 <__mulsi3>
 8020000:	e0bfc915 	stw	r2,-220(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8020004:	e0bfc017 	ldw	r2,-256(fp)
 8020008:	10800c04 	addi	r2,r2,48
 802000c:	1080000b 	ldhu	r2,0(r2)
 8020010:	10ffffcc 	andi	r3,r2,65535
 8020014:	18e0001c 	xori	r3,r3,32768
 8020018:	18e00004 	addi	r3,r3,-32768
 802001c:	e0bfc117 	ldw	r2,-252(fp)
 8020020:	10801804 	addi	r2,r2,96
 8020024:	10800017 	ldw	r2,0(r2)
 8020028:	1809883a 	mov	r4,r3
 802002c:	100b883a 	mov	r5,r2
 8020030:	802c2180 	call	802c218 <__mulsi3>
 8020034:	e0bfca15 	stw	r2,-216(fp)

		z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 8020038:	e0ffc917 	ldw	r3,-220(fp)
 802003c:	e0bfca17 	ldw	r2,-216(fp)
 8020040:	1885883a 	add	r2,r3,r2
 8020044:	1009883a 	mov	r4,r2
 8020048:	0146a684 	movi	r5,6810
 802004c:	802c2180 	call	802c218 <__mulsi3>
 8020050:	e0bfc815 	stw	r2,-224(fp)
		tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 8020054:	e13fc917 	ldw	r4,-220(fp)
 8020058:	01441c44 	movi	r5,4209
 802005c:	802c2180 	call	802c218 <__mulsi3>
 8020060:	1007883a 	mov	r3,r2
 8020064:	e0bfc817 	ldw	r2,-224(fp)
 8020068:	1885883a 	add	r2,r3,r2
 802006c:	e0bfc615 	stw	r2,-232(fp)
		tmp14 = z1 - MULTIPLY(z3, FIX(2.176250899));    /* c1+c3 */
 8020070:	e13fca17 	ldw	r4,-216(fp)
 8020074:	016e9704 	movi	r5,-17828
 8020078:	802c2180 	call	802c218 <__mulsi3>
 802007c:	1007883a 	mov	r3,r2
 8020080:	e0bfc817 	ldw	r2,-224(fp)
 8020084:	1885883a 	add	r2,r3,r2
 8020088:	e0bfc715 	stw	r2,-228(fp)

		/* Final output stage */

		wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 802008c:	e0ffcb17 	ldw	r3,-212(fp)
 8020090:	e0bfc617 	ldw	r2,-232(fp)
 8020094:	1885883a 	add	r2,r3,r2
 8020098:	1007d2fa 	srai	r3,r2,11
 802009c:	e0bfc217 	ldw	r2,-248(fp)
 80200a0:	10c00015 	stw	r3,0(r2)
		wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
 80200a4:	e0bfc217 	ldw	r2,-248(fp)
 80200a8:	10802004 	addi	r2,r2,128
 80200ac:	e13fcb17 	ldw	r4,-212(fp)
 80200b0:	e0ffc617 	ldw	r3,-232(fp)
 80200b4:	20c7c83a 	sub	r3,r4,r3
 80200b8:	1807d2fa 	srai	r3,r3,11
 80200bc:	10c00015 	stw	r3,0(r2)
		wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
 80200c0:	e0bfc217 	ldw	r2,-248(fp)
 80200c4:	10800804 	addi	r2,r2,32
 80200c8:	e13fcc17 	ldw	r4,-208(fp)
 80200cc:	e0ffc717 	ldw	r3,-228(fp)
 80200d0:	20c7883a 	add	r3,r4,r3
 80200d4:	1807d2fa 	srai	r3,r3,11
 80200d8:	10c00015 	stw	r3,0(r2)
		wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
 80200dc:	e0bfc217 	ldw	r2,-248(fp)
 80200e0:	10801804 	addi	r2,r2,96
 80200e4:	e13fcc17 	ldw	r4,-208(fp)
 80200e8:	e0ffc717 	ldw	r3,-228(fp)
 80200ec:	20c7c83a 	sub	r3,r4,r3
 80200f0:	1807d2fa 	srai	r3,r3,11
 80200f4:	10c00015 	stw	r3,0(r2)
		wsptr[8*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 80200f8:	e0bfc217 	ldw	r2,-248(fp)
 80200fc:	10801004 	addi	r2,r2,64
 8020100:	e0ffc517 	ldw	r3,-236(fp)
 8020104:	1807d2fa 	srai	r3,r3,11
 8020108:	10c00015 	stw	r3,0(r2)
		* 5-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/10).
		*/
		inptr = coef_block;
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
	wsptr = workspace;
	for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 802010c:	e0bfc317 	ldw	r2,-244(fp)
 8020110:	10800044 	addi	r2,r2,1
 8020114:	e0bfc315 	stw	r2,-244(fp)
 8020118:	e0bfc017 	ldw	r2,-256(fp)
 802011c:	10800084 	addi	r2,r2,2
 8020120:	e0bfc015 	stw	r2,-256(fp)
 8020124:	e0bfc117 	ldw	r2,-252(fp)
 8020128:	10800104 	addi	r2,r2,4
 802012c:	e0bfc115 	stw	r2,-252(fp)
 8020130:	e0bfc217 	ldw	r2,-248(fp)
 8020134:	10800104 	addi	r2,r2,4
 8020138:	e0bfc215 	stw	r2,-248(fp)
 802013c:	e0bfc317 	ldw	r2,-244(fp)
 8020140:	10800210 	cmplti	r2,r2,8
 8020144:	103f571e 	bne	r2,zero,801fea4 <jpeg_idct_10x5+0x54>
	}

	/* Pass 2: process 5 rows from work array, store into output array.
	* 10-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/20).
	*/
	wsptr = workspace;
 8020148:	e0bfd404 	addi	r2,fp,-176
 802014c:	e0bfc215 	stw	r2,-248(fp)
	for (ctr = 0; ctr < 5; ctr++) {
 8020150:	e03fc315 	stw	zero,-244(fp)
 8020154:	00012806 	br	80205f8 <jpeg_idct_10x5+0x7a8>
		outptr = output_buf[ctr] + output_col;
 8020158:	e0bfc317 	ldw	r2,-244(fp)
 802015c:	1085883a 	add	r2,r2,r2
 8020160:	1085883a 	add	r2,r2,r2
 8020164:	e0ffff17 	ldw	r3,-4(fp)
 8020168:	1885883a 	add	r2,r3,r2
 802016c:	10c00017 	ldw	r3,0(r2)
 8020170:	e0800217 	ldw	r2,8(fp)
 8020174:	1885883a 	add	r2,r3,r2
 8020178:	e0bfcd15 	stw	r2,-204(fp)

		/* Even part */

		/* Add fudge factor here for final descale. */
		z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 802017c:	e0bfc217 	ldw	r2,-248(fp)
 8020180:	10800017 	ldw	r2,0(r2)
 8020184:	10800404 	addi	r2,r2,16
 8020188:	e0bfca15 	stw	r2,-216(fp)
		z3 <<= CONST_BITS;
 802018c:	e0bfca17 	ldw	r2,-216(fp)
 8020190:	1004937a 	slli	r2,r2,13
 8020194:	e0bfca15 	stw	r2,-216(fp)
		z4 = (INT32) wsptr[4];
 8020198:	e0bfc217 	ldw	r2,-248(fp)
 802019c:	10800404 	addi	r2,r2,16
 80201a0:	10800017 	ldw	r2,0(r2)
 80201a4:	e0bfce15 	stw	r2,-200(fp)
		z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 80201a8:	e13fce17 	ldw	r4,-200(fp)
 80201ac:	01492744 	movi	r5,9373
 80201b0:	802c2180 	call	802c218 <__mulsi3>
 80201b4:	e0bfc815 	stw	r2,-224(fp)
		z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 80201b8:	e13fce17 	ldw	r4,-200(fp)
 80201bc:	01437f04 	movi	r5,3580
 80201c0:	802c2180 	call	802c218 <__mulsi3>
 80201c4:	e0bfc915 	stw	r2,-220(fp)
		tmp10 = z3 + z1;
 80201c8:	e0ffca17 	ldw	r3,-216(fp)
 80201cc:	e0bfc817 	ldw	r2,-224(fp)
 80201d0:	1885883a 	add	r2,r3,r2
 80201d4:	e0bfcb15 	stw	r2,-212(fp)
		tmp11 = z3 - z2;
 80201d8:	e0ffca17 	ldw	r3,-216(fp)
 80201dc:	e0bfc917 	ldw	r2,-220(fp)
 80201e0:	1885c83a 	sub	r2,r3,r2
 80201e4:	e0bfcc15 	stw	r2,-208(fp)

		tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 80201e8:	e0ffc817 	ldw	r3,-224(fp)
 80201ec:	e0bfc917 	ldw	r2,-220(fp)
 80201f0:	1885c83a 	sub	r2,r3,r2
 80201f4:	1085883a 	add	r2,r2,r2
 80201f8:	e0ffca17 	ldw	r3,-216(fp)
 80201fc:	1885c83a 	sub	r2,r3,r2
 8020200:	e0bfcf15 	stw	r2,-196(fp)

		z2 = (INT32) wsptr[2];
 8020204:	e0bfc217 	ldw	r2,-248(fp)
 8020208:	10800204 	addi	r2,r2,8
 802020c:	10800017 	ldw	r2,0(r2)
 8020210:	e0bfc915 	stw	r2,-220(fp)
		z3 = (INT32) wsptr[6];
 8020214:	e0bfc217 	ldw	r2,-248(fp)
 8020218:	10800604 	addi	r2,r2,24
 802021c:	10800017 	ldw	r2,0(r2)
 8020220:	e0bfca15 	stw	r2,-216(fp)

		z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8020224:	e0ffc917 	ldw	r3,-220(fp)
 8020228:	e0bfca17 	ldw	r2,-216(fp)
 802022c:	1885883a 	add	r2,r3,r2
 8020230:	1009883a 	mov	r4,r2
 8020234:	0146a684 	movi	r5,6810
 8020238:	802c2180 	call	802c218 <__mulsi3>
 802023c:	e0bfc815 	stw	r2,-224(fp)
		tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 8020240:	e13fc917 	ldw	r4,-220(fp)
 8020244:	01441c44 	movi	r5,4209
 8020248:	802c2180 	call	802c218 <__mulsi3>
 802024c:	1007883a 	mov	r3,r2
 8020250:	e0bfc817 	ldw	r2,-224(fp)
 8020254:	1885883a 	add	r2,r3,r2
 8020258:	e0bfc515 	stw	r2,-236(fp)
		tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 802025c:	e13fca17 	ldw	r4,-216(fp)
 8020260:	016e9704 	movi	r5,-17828
 8020264:	802c2180 	call	802c218 <__mulsi3>
 8020268:	1007883a 	mov	r3,r2
 802026c:	e0bfc817 	ldw	r2,-224(fp)
 8020270:	1885883a 	add	r2,r3,r2
 8020274:	e0bfc615 	stw	r2,-232(fp)

		tmp20 = tmp10 + tmp12;
 8020278:	e0ffcb17 	ldw	r3,-212(fp)
 802027c:	e0bfc517 	ldw	r2,-236(fp)
 8020280:	1885883a 	add	r2,r3,r2
 8020284:	e0bfd015 	stw	r2,-192(fp)
		tmp24 = tmp10 - tmp12;
 8020288:	e0ffcb17 	ldw	r3,-212(fp)
 802028c:	e0bfc517 	ldw	r2,-236(fp)
 8020290:	1885c83a 	sub	r2,r3,r2
 8020294:	e0bfd115 	stw	r2,-188(fp)
		tmp21 = tmp11 + tmp13;
 8020298:	e0ffcc17 	ldw	r3,-208(fp)
 802029c:	e0bfc617 	ldw	r2,-232(fp)
 80202a0:	1885883a 	add	r2,r3,r2
 80202a4:	e0bfd215 	stw	r2,-184(fp)
		tmp23 = tmp11 - tmp13;
 80202a8:	e0ffcc17 	ldw	r3,-208(fp)
 80202ac:	e0bfc617 	ldw	r2,-232(fp)
 80202b0:	1885c83a 	sub	r2,r3,r2
 80202b4:	e0bfd315 	stw	r2,-180(fp)

		/* Odd part */

		z1 = (INT32) wsptr[1];
 80202b8:	e0bfc217 	ldw	r2,-248(fp)
 80202bc:	10800104 	addi	r2,r2,4
 80202c0:	10800017 	ldw	r2,0(r2)
 80202c4:	e0bfc815 	stw	r2,-224(fp)
		z2 = (INT32) wsptr[3];
 80202c8:	e0bfc217 	ldw	r2,-248(fp)
 80202cc:	10800304 	addi	r2,r2,12
 80202d0:	10800017 	ldw	r2,0(r2)
 80202d4:	e0bfc915 	stw	r2,-220(fp)
		z3 = (INT32) wsptr[5];
 80202d8:	e0bfc217 	ldw	r2,-248(fp)
 80202dc:	10800504 	addi	r2,r2,20
 80202e0:	10800017 	ldw	r2,0(r2)
 80202e4:	e0bfca15 	stw	r2,-216(fp)
		z3 <<= CONST_BITS;
 80202e8:	e0bfca17 	ldw	r2,-216(fp)
 80202ec:	1004937a 	slli	r2,r2,13
 80202f0:	e0bfca15 	stw	r2,-216(fp)
		z4 = (INT32) wsptr[7];
 80202f4:	e0bfc217 	ldw	r2,-248(fp)
 80202f8:	10800704 	addi	r2,r2,28
 80202fc:	10800017 	ldw	r2,0(r2)
 8020300:	e0bfce15 	stw	r2,-200(fp)

		tmp11 = z2 + z4;
 8020304:	e0ffc917 	ldw	r3,-220(fp)
 8020308:	e0bfce17 	ldw	r2,-200(fp)
 802030c:	1885883a 	add	r2,r3,r2
 8020310:	e0bfcc15 	stw	r2,-208(fp)
		tmp13 = z2 - z4;
 8020314:	e0ffc917 	ldw	r3,-220(fp)
 8020318:	e0bfce17 	ldw	r2,-200(fp)
 802031c:	1885c83a 	sub	r2,r3,r2
 8020320:	e0bfc615 	stw	r2,-232(fp)

		tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8020324:	e13fc617 	ldw	r4,-232(fp)
 8020328:	014278c4 	movi	r5,2531
 802032c:	802c2180 	call	802c218 <__mulsi3>
 8020330:	e0bfc515 	stw	r2,-236(fp)

		z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8020334:	e13fcc17 	ldw	r4,-208(fp)
 8020338:	01479bc4 	movi	r5,7791
 802033c:	802c2180 	call	802c218 <__mulsi3>
 8020340:	e0bfc915 	stw	r2,-220(fp)
		z4 = z3 + tmp12;
 8020344:	e0ffca17 	ldw	r3,-216(fp)
 8020348:	e0bfc517 	ldw	r2,-236(fp)
 802034c:	1885883a 	add	r2,r3,r2
 8020350:	e0bfce15 	stw	r2,-200(fp)

		tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8020354:	e13fc817 	ldw	r4,-224(fp)
 8020358:	014b2cc4 	movi	r5,11443
 802035c:	802c2180 	call	802c218 <__mulsi3>
 8020360:	1007883a 	mov	r3,r2
 8020364:	e0bfc917 	ldw	r2,-220(fp)
 8020368:	1887883a 	add	r3,r3,r2
 802036c:	e0bfce17 	ldw	r2,-200(fp)
 8020370:	1885883a 	add	r2,r3,r2
 8020374:	e0bfcb15 	stw	r2,-212(fp)
		tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8020378:	e13fc817 	ldw	r4,-224(fp)
 802037c:	0141c504 	movi	r5,1812
 8020380:	802c2180 	call	802c218 <__mulsi3>
 8020384:	1007883a 	mov	r3,r2
 8020388:	e0bfc917 	ldw	r2,-220(fp)
 802038c:	1887c83a 	sub	r3,r3,r2
 8020390:	e0bfce17 	ldw	r2,-200(fp)
 8020394:	1885883a 	add	r2,r3,r2
 8020398:	e0bfc715 	stw	r2,-228(fp)

		z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 802039c:	e13fcc17 	ldw	r4,-208(fp)
 80203a0:	0144b3c4 	movi	r5,4815
 80203a4:	802c2180 	call	802c218 <__mulsi3>
 80203a8:	e0bfc915 	stw	r2,-220(fp)
		z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 80203ac:	e0ffca17 	ldw	r3,-216(fp)
 80203b0:	e0bfc517 	ldw	r2,-236(fp)
 80203b4:	1887c83a 	sub	r3,r3,r2
 80203b8:	e0bfc617 	ldw	r2,-232(fp)
 80203bc:	1004933a 	slli	r2,r2,12
 80203c0:	1885c83a 	sub	r2,r3,r2
 80203c4:	e0bfce15 	stw	r2,-200(fp)

		tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 80203c8:	e0ffc817 	ldw	r3,-224(fp)
 80203cc:	e0bfc617 	ldw	r2,-232(fp)
 80203d0:	1885c83a 	sub	r2,r3,r2
 80203d4:	1006937a 	slli	r3,r2,13
 80203d8:	e0bfca17 	ldw	r2,-216(fp)
 80203dc:	1885c83a 	sub	r2,r3,r2
 80203e0:	e0bfc515 	stw	r2,-236(fp)

		tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 80203e4:	e13fc817 	ldw	r4,-224(fp)
 80203e8:	014a14c4 	movi	r5,10323
 80203ec:	802c2180 	call	802c218 <__mulsi3>
 80203f0:	1007883a 	mov	r3,r2
 80203f4:	e0bfc917 	ldw	r2,-220(fp)
 80203f8:	1887c83a 	sub	r3,r3,r2
 80203fc:	e0bfce17 	ldw	r2,-200(fp)
 8020400:	1885c83a 	sub	r2,r3,r2
 8020404:	e0bfcc15 	stw	r2,-208(fp)
		tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8020408:	e13fc817 	ldw	r4,-224(fp)
 802040c:	01452304 	movi	r5,5260
 8020410:	802c2180 	call	802c218 <__mulsi3>
 8020414:	1007883a 	mov	r3,r2
 8020418:	e0bfc917 	ldw	r2,-220(fp)
 802041c:	1887c83a 	sub	r3,r3,r2
 8020420:	e0bfce17 	ldw	r2,-200(fp)
 8020424:	1885883a 	add	r2,r3,r2
 8020428:	e0bfc615 	stw	r2,-232(fp)

		/* Final output stage */

		outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 802042c:	e0ffd017 	ldw	r3,-192(fp)
 8020430:	e0bfcb17 	ldw	r2,-212(fp)
 8020434:	1885883a 	add	r2,r3,r2
 8020438:	1005d4ba 	srai	r2,r2,18
 802043c:	1080ffcc 	andi	r2,r2,1023
 8020440:	e0ffc417 	ldw	r3,-240(fp)
 8020444:	1885883a 	add	r2,r3,r2
 8020448:	10c00003 	ldbu	r3,0(r2)
 802044c:	e0bfcd17 	ldw	r2,-204(fp)
 8020450:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8020454:	e0bfcd17 	ldw	r2,-204(fp)
 8020458:	10800244 	addi	r2,r2,9
 802045c:	e13fd017 	ldw	r4,-192(fp)
 8020460:	e0ffcb17 	ldw	r3,-212(fp)
 8020464:	20c7c83a 	sub	r3,r4,r3
 8020468:	1807d4ba 	srai	r3,r3,18
 802046c:	18c0ffcc 	andi	r3,r3,1023
 8020470:	e13fc417 	ldw	r4,-240(fp)
 8020474:	20c7883a 	add	r3,r4,r3
 8020478:	18c00003 	ldbu	r3,0(r3)
 802047c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8020480:	e0bfcd17 	ldw	r2,-204(fp)
 8020484:	10800044 	addi	r2,r2,1
 8020488:	e13fd217 	ldw	r4,-184(fp)
 802048c:	e0ffcc17 	ldw	r3,-208(fp)
 8020490:	20c7883a 	add	r3,r4,r3
 8020494:	1807d4ba 	srai	r3,r3,18
 8020498:	18c0ffcc 	andi	r3,r3,1023
 802049c:	e13fc417 	ldw	r4,-240(fp)
 80204a0:	20c7883a 	add	r3,r4,r3
 80204a4:	18c00003 	ldbu	r3,0(r3)
 80204a8:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80204ac:	e0bfcd17 	ldw	r2,-204(fp)
 80204b0:	10800204 	addi	r2,r2,8
 80204b4:	e13fd217 	ldw	r4,-184(fp)
 80204b8:	e0ffcc17 	ldw	r3,-208(fp)
 80204bc:	20c7c83a 	sub	r3,r4,r3
 80204c0:	1807d4ba 	srai	r3,r3,18
 80204c4:	18c0ffcc 	andi	r3,r3,1023
 80204c8:	e13fc417 	ldw	r4,-240(fp)
 80204cc:	20c7883a 	add	r3,r4,r3
 80204d0:	18c00003 	ldbu	r3,0(r3)
 80204d4:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80204d8:	e0bfcd17 	ldw	r2,-204(fp)
 80204dc:	10800084 	addi	r2,r2,2
 80204e0:	e13fcf17 	ldw	r4,-196(fp)
 80204e4:	e0ffc517 	ldw	r3,-236(fp)
 80204e8:	20c7883a 	add	r3,r4,r3
 80204ec:	1807d4ba 	srai	r3,r3,18
 80204f0:	18c0ffcc 	andi	r3,r3,1023
 80204f4:	e13fc417 	ldw	r4,-240(fp)
 80204f8:	20c7883a 	add	r3,r4,r3
 80204fc:	18c00003 	ldbu	r3,0(r3)
 8020500:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8020504:	e0bfcd17 	ldw	r2,-204(fp)
 8020508:	108001c4 	addi	r2,r2,7
 802050c:	e13fcf17 	ldw	r4,-196(fp)
 8020510:	e0ffc517 	ldw	r3,-236(fp)
 8020514:	20c7c83a 	sub	r3,r4,r3
 8020518:	1807d4ba 	srai	r3,r3,18
 802051c:	18c0ffcc 	andi	r3,r3,1023
 8020520:	e13fc417 	ldw	r4,-240(fp)
 8020524:	20c7883a 	add	r3,r4,r3
 8020528:	18c00003 	ldbu	r3,0(r3)
 802052c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8020530:	e0bfcd17 	ldw	r2,-204(fp)
 8020534:	108000c4 	addi	r2,r2,3
 8020538:	e13fd317 	ldw	r4,-180(fp)
 802053c:	e0ffc617 	ldw	r3,-232(fp)
 8020540:	20c7883a 	add	r3,r4,r3
 8020544:	1807d4ba 	srai	r3,r3,18
 8020548:	18c0ffcc 	andi	r3,r3,1023
 802054c:	e13fc417 	ldw	r4,-240(fp)
 8020550:	20c7883a 	add	r3,r4,r3
 8020554:	18c00003 	ldbu	r3,0(r3)
 8020558:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 802055c:	e0bfcd17 	ldw	r2,-204(fp)
 8020560:	10800184 	addi	r2,r2,6
 8020564:	e13fd317 	ldw	r4,-180(fp)
 8020568:	e0ffc617 	ldw	r3,-232(fp)
 802056c:	20c7c83a 	sub	r3,r4,r3
 8020570:	1807d4ba 	srai	r3,r3,18
 8020574:	18c0ffcc 	andi	r3,r3,1023
 8020578:	e13fc417 	ldw	r4,-240(fp)
 802057c:	20c7883a 	add	r3,r4,r3
 8020580:	18c00003 	ldbu	r3,0(r3)
 8020584:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8020588:	e0bfcd17 	ldw	r2,-204(fp)
 802058c:	10800104 	addi	r2,r2,4
 8020590:	e13fd117 	ldw	r4,-188(fp)
 8020594:	e0ffc717 	ldw	r3,-228(fp)
 8020598:	20c7883a 	add	r3,r4,r3
 802059c:	1807d4ba 	srai	r3,r3,18
 80205a0:	18c0ffcc 	andi	r3,r3,1023
 80205a4:	e13fc417 	ldw	r4,-240(fp)
 80205a8:	20c7883a 	add	r3,r4,r3
 80205ac:	18c00003 	ldbu	r3,0(r3)
 80205b0:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80205b4:	e0bfcd17 	ldw	r2,-204(fp)
 80205b8:	10800144 	addi	r2,r2,5
 80205bc:	e13fd117 	ldw	r4,-188(fp)
 80205c0:	e0ffc717 	ldw	r3,-228(fp)
 80205c4:	20c7c83a 	sub	r3,r4,r3
 80205c8:	1807d4ba 	srai	r3,r3,18
 80205cc:	18c0ffcc 	andi	r3,r3,1023
 80205d0:	e13fc417 	ldw	r4,-240(fp)
 80205d4:	20c7883a 	add	r3,r4,r3
 80205d8:	18c00003 	ldbu	r3,0(r3)
 80205dc:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 8;		/* advance pointer to next row */
 80205e0:	e0bfc217 	ldw	r2,-248(fp)
 80205e4:	10800804 	addi	r2,r2,32
 80205e8:	e0bfc215 	stw	r2,-248(fp)

	/* Pass 2: process 5 rows from work array, store into output array.
	* 10-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/20).
	*/
	wsptr = workspace;
	for (ctr = 0; ctr < 5; ctr++) {
 80205ec:	e0bfc317 	ldw	r2,-244(fp)
 80205f0:	10800044 	addi	r2,r2,1
 80205f4:	e0bfc315 	stw	r2,-244(fp)
 80205f8:	e0bfc317 	ldw	r2,-244(fp)
 80205fc:	10800150 	cmplti	r2,r2,5
 8020600:	103ed51e 	bne	r2,zero,8020158 <jpeg_idct_10x5+0x308>
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 8;		/* advance pointer to next row */
	}
}
 8020604:	e037883a 	mov	sp,fp
 8020608:	dfc00117 	ldw	ra,4(sp)
 802060c:	df000017 	ldw	fp,0(sp)
 8020610:	dec00204 	addi	sp,sp,8
 8020614:	f800283a 	ret

08020618 <jpeg_idct_8x4>:

GLOBAL(void)
	jpeg_idct_8x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8020618:	deffc904 	addi	sp,sp,-220
 802061c:	dfc03615 	stw	ra,216(sp)
 8020620:	df003515 	stw	fp,212(sp)
 8020624:	df003504 	addi	fp,sp,212
 8020628:	e13ffc15 	stw	r4,-16(fp)
 802062c:	e17ffd15 	stw	r5,-12(fp)
 8020630:	e1bffe15 	stw	r6,-8(fp)
 8020634:	e1ffff15 	stw	r7,-4(fp)
	INT32 z1, z2, z3;
	JCOEFPTR inptr;
	ISLOW_MULT_TYPE * quantptr;
	int * wsptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8020638:	e0bffc17 	ldw	r2,-16(fp)
 802063c:	10804917 	ldw	r2,292(r2)
 8020640:	10802004 	addi	r2,r2,128
 8020644:	e0bfcf15 	stw	r2,-196(fp)
	SHIFT_TEMPS

		/* Pass 1: process columns from input, store into work array.
		* 4-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/16).
		*/
		inptr = coef_block;
 8020648:	e0bffe17 	ldw	r2,-8(fp)
 802064c:	e0bfcb15 	stw	r2,-212(fp)
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8020650:	e0bffd17 	ldw	r2,-12(fp)
 8020654:	10801517 	ldw	r2,84(r2)
 8020658:	e0bfcc15 	stw	r2,-208(fp)
	wsptr = workspace;
 802065c:	e0bfdc04 	addi	r2,fp,-144
 8020660:	e0bfcd15 	stw	r2,-204(fp)
	for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8020664:	e03fce15 	stw	zero,-200(fp)
 8020668:	00007b06 	br	8020858 <jpeg_idct_8x4+0x240>
		/* Even part */

		tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 802066c:	e0bfcb17 	ldw	r2,-212(fp)
 8020670:	1080000b 	ldhu	r2,0(r2)
 8020674:	10ffffcc 	andi	r3,r2,65535
 8020678:	18e0001c 	xori	r3,r3,32768
 802067c:	18e00004 	addi	r3,r3,-32768
 8020680:	e0bfcc17 	ldw	r2,-208(fp)
 8020684:	10800017 	ldw	r2,0(r2)
 8020688:	1809883a 	mov	r4,r3
 802068c:	100b883a 	mov	r5,r2
 8020690:	802c2180 	call	802c218 <__mulsi3>
 8020694:	e0bfd015 	stw	r2,-192(fp)
		tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8020698:	e0bfcb17 	ldw	r2,-212(fp)
 802069c:	10800804 	addi	r2,r2,32
 80206a0:	1080000b 	ldhu	r2,0(r2)
 80206a4:	10ffffcc 	andi	r3,r2,65535
 80206a8:	18e0001c 	xori	r3,r3,32768
 80206ac:	18e00004 	addi	r3,r3,-32768
 80206b0:	e0bfcc17 	ldw	r2,-208(fp)
 80206b4:	10801004 	addi	r2,r2,64
 80206b8:	10800017 	ldw	r2,0(r2)
 80206bc:	1809883a 	mov	r4,r3
 80206c0:	100b883a 	mov	r5,r2
 80206c4:	802c2180 	call	802c218 <__mulsi3>
 80206c8:	e0bfd115 	stw	r2,-188(fp)

		tmp10 = (tmp0 + tmp2) << PASS1_BITS;
 80206cc:	e0ffd017 	ldw	r3,-192(fp)
 80206d0:	e0bfd117 	ldw	r2,-188(fp)
 80206d4:	1885883a 	add	r2,r3,r2
 80206d8:	1085883a 	add	r2,r2,r2
 80206dc:	1085883a 	add	r2,r2,r2
 80206e0:	e0bfd215 	stw	r2,-184(fp)
		tmp12 = (tmp0 - tmp2) << PASS1_BITS;
 80206e4:	e0ffd017 	ldw	r3,-192(fp)
 80206e8:	e0bfd117 	ldw	r2,-188(fp)
 80206ec:	1885c83a 	sub	r2,r3,r2
 80206f0:	1085883a 	add	r2,r2,r2
 80206f4:	1085883a 	add	r2,r2,r2
 80206f8:	e0bfd315 	stw	r2,-180(fp)

		/* Odd part */
		/* Same rotation as in the even part of the 8x8 LL&M IDCT */

		z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80206fc:	e0bfcb17 	ldw	r2,-212(fp)
 8020700:	10800404 	addi	r2,r2,16
 8020704:	1080000b 	ldhu	r2,0(r2)
 8020708:	10ffffcc 	andi	r3,r2,65535
 802070c:	18e0001c 	xori	r3,r3,32768
 8020710:	18e00004 	addi	r3,r3,-32768
 8020714:	e0bfcc17 	ldw	r2,-208(fp)
 8020718:	10800804 	addi	r2,r2,32
 802071c:	10800017 	ldw	r2,0(r2)
 8020720:	1809883a 	mov	r4,r3
 8020724:	100b883a 	mov	r5,r2
 8020728:	802c2180 	call	802c218 <__mulsi3>
 802072c:	e0bfd415 	stw	r2,-176(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8020730:	e0bfcb17 	ldw	r2,-212(fp)
 8020734:	10800c04 	addi	r2,r2,48
 8020738:	1080000b 	ldhu	r2,0(r2)
 802073c:	10ffffcc 	andi	r3,r2,65535
 8020740:	18e0001c 	xori	r3,r3,32768
 8020744:	18e00004 	addi	r3,r3,-32768
 8020748:	e0bfcc17 	ldw	r2,-208(fp)
 802074c:	10801804 	addi	r2,r2,96
 8020750:	10800017 	ldw	r2,0(r2)
 8020754:	1809883a 	mov	r4,r3
 8020758:	100b883a 	mov	r5,r2
 802075c:	802c2180 	call	802c218 <__mulsi3>
 8020760:	e0bfd515 	stw	r2,-172(fp)

		z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 8020764:	e0ffd417 	ldw	r3,-176(fp)
 8020768:	e0bfd517 	ldw	r2,-172(fp)
 802076c:	1885883a 	add	r2,r3,r2
 8020770:	1009883a 	mov	r4,r2
 8020774:	01445444 	movi	r5,4433
 8020778:	802c2180 	call	802c218 <__mulsi3>
 802077c:	e0bfd615 	stw	r2,-168(fp)
		/* Add fudge factor here for final descale. */
		z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8020780:	e0bfd617 	ldw	r2,-168(fp)
 8020784:	10810004 	addi	r2,r2,1024
 8020788:	e0bfd615 	stw	r2,-168(fp)
		tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 802078c:	e13fd417 	ldw	r4,-176(fp)
 8020790:	01461f84 	movi	r5,6270
 8020794:	802c2180 	call	802c218 <__mulsi3>
 8020798:	1007883a 	mov	r3,r2
 802079c:	e0bfd617 	ldw	r2,-168(fp)
 80207a0:	1885883a 	add	r2,r3,r2
 80207a4:	1005d2fa 	srai	r2,r2,11
 80207a8:	e0bfd015 	stw	r2,-192(fp)
			CONST_BITS-PASS1_BITS);
		tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 80207ac:	e13fd517 	ldw	r4,-172(fp)
 80207b0:	017137c4 	movi	r5,-15137
 80207b4:	802c2180 	call	802c218 <__mulsi3>
 80207b8:	1007883a 	mov	r3,r2
 80207bc:	e0bfd617 	ldw	r2,-168(fp)
 80207c0:	1885883a 	add	r2,r3,r2
 80207c4:	1005d2fa 	srai	r2,r2,11
 80207c8:	e0bfd115 	stw	r2,-188(fp)
			CONST_BITS-PASS1_BITS);

		/* Final output stage */

		wsptr[8*0] = (int) (tmp10 + tmp0);
 80207cc:	e0ffd217 	ldw	r3,-184(fp)
 80207d0:	e0bfd017 	ldw	r2,-192(fp)
 80207d4:	1887883a 	add	r3,r3,r2
 80207d8:	e0bfcd17 	ldw	r2,-204(fp)
 80207dc:	10c00015 	stw	r3,0(r2)
		wsptr[8*3] = (int) (tmp10 - tmp0);
 80207e0:	e0bfcd17 	ldw	r2,-204(fp)
 80207e4:	10801804 	addi	r2,r2,96
 80207e8:	e13fd217 	ldw	r4,-184(fp)
 80207ec:	e0ffd017 	ldw	r3,-192(fp)
 80207f0:	20c7c83a 	sub	r3,r4,r3
 80207f4:	10c00015 	stw	r3,0(r2)
		wsptr[8*1] = (int) (tmp12 + tmp2);
 80207f8:	e0bfcd17 	ldw	r2,-204(fp)
 80207fc:	10800804 	addi	r2,r2,32
 8020800:	e13fd317 	ldw	r4,-180(fp)
 8020804:	e0ffd117 	ldw	r3,-188(fp)
 8020808:	20c7883a 	add	r3,r4,r3
 802080c:	10c00015 	stw	r3,0(r2)
		wsptr[8*2] = (int) (tmp12 - tmp2);
 8020810:	e0bfcd17 	ldw	r2,-204(fp)
 8020814:	10801004 	addi	r2,r2,64
 8020818:	e13fd317 	ldw	r4,-180(fp)
 802081c:	e0ffd117 	ldw	r3,-188(fp)
 8020820:	20c7c83a 	sub	r3,r4,r3
 8020824:	10c00015 	stw	r3,0(r2)
		* 4-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/16).
		*/
		inptr = coef_block;
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
	wsptr = workspace;
	for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8020828:	e0bfce17 	ldw	r2,-200(fp)
 802082c:	10800044 	addi	r2,r2,1
 8020830:	e0bfce15 	stw	r2,-200(fp)
 8020834:	e0bfcb17 	ldw	r2,-212(fp)
 8020838:	10800084 	addi	r2,r2,2
 802083c:	e0bfcb15 	stw	r2,-212(fp)
 8020840:	e0bfcc17 	ldw	r2,-208(fp)
 8020844:	10800104 	addi	r2,r2,4
 8020848:	e0bfcc15 	stw	r2,-208(fp)
 802084c:	e0bfcd17 	ldw	r2,-204(fp)
 8020850:	10800104 	addi	r2,r2,4
 8020854:	e0bfcd15 	stw	r2,-204(fp)
 8020858:	e0bfce17 	ldw	r2,-200(fp)
 802085c:	10800210 	cmplti	r2,r2,8
 8020860:	103f821e 	bne	r2,zero,802066c <jpeg_idct_8x4+0x54>

	/* Pass 2: process rows from work array, store into output array. */
	/* Note that we must descale the results by a factor of 8 == 2**3, */
	/* and also undo the PASS1_BITS scaling. */

	wsptr = workspace;
 8020864:	e0bfdc04 	addi	r2,fp,-144
 8020868:	e0bfcd15 	stw	r2,-204(fp)
	for (ctr = 0; ctr < 4; ctr++) {
 802086c:	e03fce15 	stw	zero,-200(fp)
 8020870:	00010a06 	br	8020c9c <jpeg_idct_8x4+0x684>
		outptr = output_buf[ctr] + output_col;
 8020874:	e0bfce17 	ldw	r2,-200(fp)
 8020878:	1085883a 	add	r2,r2,r2
 802087c:	1085883a 	add	r2,r2,r2
 8020880:	e0ffff17 	ldw	r3,-4(fp)
 8020884:	1885883a 	add	r2,r3,r2
 8020888:	10c00017 	ldw	r3,0(r2)
 802088c:	e0800217 	ldw	r2,8(fp)
 8020890:	1885883a 	add	r2,r3,r2
 8020894:	e0bfd715 	stw	r2,-164(fp)

		/* Even part: reverse the even part of the forward DCT. */
		/* The rotator is sqrt(2)*c(-6). */

		z2 = (INT32) wsptr[2];
 8020898:	e0bfcd17 	ldw	r2,-204(fp)
 802089c:	10800204 	addi	r2,r2,8
 80208a0:	10800017 	ldw	r2,0(r2)
 80208a4:	e0bfd415 	stw	r2,-176(fp)
		z3 = (INT32) wsptr[6];
 80208a8:	e0bfcd17 	ldw	r2,-204(fp)
 80208ac:	10800604 	addi	r2,r2,24
 80208b0:	10800017 	ldw	r2,0(r2)
 80208b4:	e0bfd515 	stw	r2,-172(fp)

		z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 80208b8:	e0ffd417 	ldw	r3,-176(fp)
 80208bc:	e0bfd517 	ldw	r2,-172(fp)
 80208c0:	1885883a 	add	r2,r3,r2
 80208c4:	1009883a 	mov	r4,r2
 80208c8:	01445444 	movi	r5,4433
 80208cc:	802c2180 	call	802c218 <__mulsi3>
 80208d0:	e0bfd615 	stw	r2,-168(fp)
		tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 80208d4:	e13fd417 	ldw	r4,-176(fp)
 80208d8:	01461f84 	movi	r5,6270
 80208dc:	802c2180 	call	802c218 <__mulsi3>
 80208e0:	1007883a 	mov	r3,r2
 80208e4:	e0bfd617 	ldw	r2,-168(fp)
 80208e8:	1885883a 	add	r2,r3,r2
 80208ec:	e0bfd115 	stw	r2,-188(fp)
		tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 80208f0:	e13fd517 	ldw	r4,-172(fp)
 80208f4:	017137c4 	movi	r5,-15137
 80208f8:	802c2180 	call	802c218 <__mulsi3>
 80208fc:	1007883a 	mov	r3,r2
 8020900:	e0bfd617 	ldw	r2,-168(fp)
 8020904:	1885883a 	add	r2,r3,r2
 8020908:	e0bfd815 	stw	r2,-160(fp)

		/* Add fudge factor here for final descale. */
		z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 802090c:	e0bfcd17 	ldw	r2,-204(fp)
 8020910:	10800017 	ldw	r2,0(r2)
 8020914:	10800404 	addi	r2,r2,16
 8020918:	e0bfd415 	stw	r2,-176(fp)
		z3 = (INT32) wsptr[4];
 802091c:	e0bfcd17 	ldw	r2,-204(fp)
 8020920:	10800404 	addi	r2,r2,16
 8020924:	10800017 	ldw	r2,0(r2)
 8020928:	e0bfd515 	stw	r2,-172(fp)

		tmp0 = (z2 + z3) << CONST_BITS;
 802092c:	e0ffd417 	ldw	r3,-176(fp)
 8020930:	e0bfd517 	ldw	r2,-172(fp)
 8020934:	1885883a 	add	r2,r3,r2
 8020938:	1004937a 	slli	r2,r2,13
 802093c:	e0bfd015 	stw	r2,-192(fp)
		tmp1 = (z2 - z3) << CONST_BITS;
 8020940:	e0ffd417 	ldw	r3,-176(fp)
 8020944:	e0bfd517 	ldw	r2,-172(fp)
 8020948:	1885c83a 	sub	r2,r3,r2
 802094c:	1004937a 	slli	r2,r2,13
 8020950:	e0bfd915 	stw	r2,-156(fp)

		tmp10 = tmp0 + tmp2;
 8020954:	e0ffd017 	ldw	r3,-192(fp)
 8020958:	e0bfd117 	ldw	r2,-188(fp)
 802095c:	1885883a 	add	r2,r3,r2
 8020960:	e0bfd215 	stw	r2,-184(fp)
		tmp13 = tmp0 - tmp2;
 8020964:	e0ffd017 	ldw	r3,-192(fp)
 8020968:	e0bfd117 	ldw	r2,-188(fp)
 802096c:	1885c83a 	sub	r2,r3,r2
 8020970:	e0bfda15 	stw	r2,-152(fp)
		tmp11 = tmp1 + tmp3;
 8020974:	e0ffd917 	ldw	r3,-156(fp)
 8020978:	e0bfd817 	ldw	r2,-160(fp)
 802097c:	1885883a 	add	r2,r3,r2
 8020980:	e0bfdb15 	stw	r2,-148(fp)
		tmp12 = tmp1 - tmp3;
 8020984:	e0ffd917 	ldw	r3,-156(fp)
 8020988:	e0bfd817 	ldw	r2,-160(fp)
 802098c:	1885c83a 	sub	r2,r3,r2
 8020990:	e0bfd315 	stw	r2,-180(fp)

		/* Odd part per figure 8; the matrix is unitary and hence its
		* transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
		*/

		tmp0 = (INT32) wsptr[7];
 8020994:	e0bfcd17 	ldw	r2,-204(fp)
 8020998:	10800704 	addi	r2,r2,28
 802099c:	10800017 	ldw	r2,0(r2)
 80209a0:	e0bfd015 	stw	r2,-192(fp)
		tmp1 = (INT32) wsptr[5];
 80209a4:	e0bfcd17 	ldw	r2,-204(fp)
 80209a8:	10800504 	addi	r2,r2,20
 80209ac:	10800017 	ldw	r2,0(r2)
 80209b0:	e0bfd915 	stw	r2,-156(fp)
		tmp2 = (INT32) wsptr[3];
 80209b4:	e0bfcd17 	ldw	r2,-204(fp)
 80209b8:	10800304 	addi	r2,r2,12
 80209bc:	10800017 	ldw	r2,0(r2)
 80209c0:	e0bfd115 	stw	r2,-188(fp)
		tmp3 = (INT32) wsptr[1];
 80209c4:	e0bfcd17 	ldw	r2,-204(fp)
 80209c8:	10800104 	addi	r2,r2,4
 80209cc:	10800017 	ldw	r2,0(r2)
 80209d0:	e0bfd815 	stw	r2,-160(fp)

		z2 = tmp0 + tmp2;
 80209d4:	e0ffd017 	ldw	r3,-192(fp)
 80209d8:	e0bfd117 	ldw	r2,-188(fp)
 80209dc:	1885883a 	add	r2,r3,r2
 80209e0:	e0bfd415 	stw	r2,-176(fp)
		z3 = tmp1 + tmp3;
 80209e4:	e0ffd917 	ldw	r3,-156(fp)
 80209e8:	e0bfd817 	ldw	r2,-160(fp)
 80209ec:	1885883a 	add	r2,r3,r2
 80209f0:	e0bfd515 	stw	r2,-172(fp)

		z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 80209f4:	e0ffd417 	ldw	r3,-176(fp)
 80209f8:	e0bfd517 	ldw	r2,-172(fp)
 80209fc:	1885883a 	add	r2,r3,r2
 8020a00:	1009883a 	mov	r4,r2
 8020a04:	01496844 	movi	r5,9633
 8020a08:	802c2180 	call	802c218 <__mulsi3>
 8020a0c:	e0bfd615 	stw	r2,-168(fp)
		z2 = MULTIPLY(z2, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
 8020a10:	e13fd417 	ldw	r4,-176(fp)
 8020a14:	01704ec4 	movi	r5,-16069
 8020a18:	802c2180 	call	802c218 <__mulsi3>
 8020a1c:	e0bfd415 	stw	r2,-176(fp)
		z3 = MULTIPLY(z3, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
 8020a20:	e13fd517 	ldw	r4,-172(fp)
 8020a24:	017ce104 	movi	r5,-3196
 8020a28:	802c2180 	call	802c218 <__mulsi3>
 8020a2c:	e0bfd515 	stw	r2,-172(fp)
		z2 += z1;
 8020a30:	e0ffd417 	ldw	r3,-176(fp)
 8020a34:	e0bfd617 	ldw	r2,-168(fp)
 8020a38:	1885883a 	add	r2,r3,r2
 8020a3c:	e0bfd415 	stw	r2,-176(fp)
		z3 += z1;
 8020a40:	e0ffd517 	ldw	r3,-172(fp)
 8020a44:	e0bfd617 	ldw	r2,-168(fp)
 8020a48:	1885883a 	add	r2,r3,r2
 8020a4c:	e0bfd515 	stw	r2,-172(fp)

		z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8020a50:	e0ffd017 	ldw	r3,-192(fp)
 8020a54:	e0bfd817 	ldw	r2,-160(fp)
 8020a58:	1885883a 	add	r2,r3,r2
 8020a5c:	1009883a 	mov	r4,r2
 8020a60:	0178ccc4 	movi	r5,-7373
 8020a64:	802c2180 	call	802c218 <__mulsi3>
 8020a68:	e0bfd615 	stw	r2,-168(fp)
		tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
 8020a6c:	e13fd017 	ldw	r4,-192(fp)
 8020a70:	01426384 	movi	r5,2446
 8020a74:	802c2180 	call	802c218 <__mulsi3>
 8020a78:	e0bfd015 	stw	r2,-192(fp)
		tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
 8020a7c:	e13fd817 	ldw	r4,-160(fp)
 8020a80:	014c02c4 	movi	r5,12299
 8020a84:	802c2180 	call	802c218 <__mulsi3>
 8020a88:	e0bfd815 	stw	r2,-160(fp)
		tmp0 += z1 + z2;
 8020a8c:	e0ffd617 	ldw	r3,-168(fp)
 8020a90:	e0bfd417 	ldw	r2,-176(fp)
 8020a94:	1885883a 	add	r2,r3,r2
 8020a98:	e0ffd017 	ldw	r3,-192(fp)
 8020a9c:	1885883a 	add	r2,r3,r2
 8020aa0:	e0bfd015 	stw	r2,-192(fp)
		tmp3 += z1 + z3;
 8020aa4:	e0ffd617 	ldw	r3,-168(fp)
 8020aa8:	e0bfd517 	ldw	r2,-172(fp)
 8020aac:	1885883a 	add	r2,r3,r2
 8020ab0:	e0ffd817 	ldw	r3,-160(fp)
 8020ab4:	1885883a 	add	r2,r3,r2
 8020ab8:	e0bfd815 	stw	r2,-160(fp)

		z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8020abc:	e0ffd917 	ldw	r3,-156(fp)
 8020ac0:	e0bfd117 	ldw	r2,-188(fp)
 8020ac4:	1885883a 	add	r2,r3,r2
 8020ac8:	1009883a 	mov	r4,r2
 8020acc:	016b7f44 	movi	r5,-20995
 8020ad0:	802c2180 	call	802c218 <__mulsi3>
 8020ad4:	e0bfd615 	stw	r2,-168(fp)
		tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
 8020ad8:	e13fd917 	ldw	r4,-156(fp)
 8020adc:	01506cc4 	movi	r5,16819
 8020ae0:	802c2180 	call	802c218 <__mulsi3>
 8020ae4:	e0bfd915 	stw	r2,-156(fp)
		tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
 8020ae8:	e13fd117 	ldw	r4,-188(fp)
 8020aec:	01589504 	movi	r5,25172
 8020af0:	802c2180 	call	802c218 <__mulsi3>
 8020af4:	e0bfd115 	stw	r2,-188(fp)
		tmp1 += z1 + z3;
 8020af8:	e0ffd617 	ldw	r3,-168(fp)
 8020afc:	e0bfd517 	ldw	r2,-172(fp)
 8020b00:	1885883a 	add	r2,r3,r2
 8020b04:	e0ffd917 	ldw	r3,-156(fp)
 8020b08:	1885883a 	add	r2,r3,r2
 8020b0c:	e0bfd915 	stw	r2,-156(fp)
		tmp2 += z1 + z2;
 8020b10:	e0ffd617 	ldw	r3,-168(fp)
 8020b14:	e0bfd417 	ldw	r2,-176(fp)
 8020b18:	1885883a 	add	r2,r3,r2
 8020b1c:	e0ffd117 	ldw	r3,-188(fp)
 8020b20:	1885883a 	add	r2,r3,r2
 8020b24:	e0bfd115 	stw	r2,-188(fp)

		/* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */

		outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8020b28:	e0ffd217 	ldw	r3,-184(fp)
 8020b2c:	e0bfd817 	ldw	r2,-160(fp)
 8020b30:	1885883a 	add	r2,r3,r2
 8020b34:	1005d4ba 	srai	r2,r2,18
 8020b38:	1080ffcc 	andi	r2,r2,1023
 8020b3c:	e0ffcf17 	ldw	r3,-196(fp)
 8020b40:	1885883a 	add	r2,r3,r2
 8020b44:	10c00003 	ldbu	r3,0(r2)
 8020b48:	e0bfd717 	ldw	r2,-164(fp)
 8020b4c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8020b50:	e0bfd717 	ldw	r2,-164(fp)
 8020b54:	108001c4 	addi	r2,r2,7
 8020b58:	e13fd217 	ldw	r4,-184(fp)
 8020b5c:	e0ffd817 	ldw	r3,-160(fp)
 8020b60:	20c7c83a 	sub	r3,r4,r3
 8020b64:	1807d4ba 	srai	r3,r3,18
 8020b68:	18c0ffcc 	andi	r3,r3,1023
 8020b6c:	e13fcf17 	ldw	r4,-196(fp)
 8020b70:	20c7883a 	add	r3,r4,r3
 8020b74:	18c00003 	ldbu	r3,0(r3)
 8020b78:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8020b7c:	e0bfd717 	ldw	r2,-164(fp)
 8020b80:	10800044 	addi	r2,r2,1
 8020b84:	e13fdb17 	ldw	r4,-148(fp)
 8020b88:	e0ffd117 	ldw	r3,-188(fp)
 8020b8c:	20c7883a 	add	r3,r4,r3
 8020b90:	1807d4ba 	srai	r3,r3,18
 8020b94:	18c0ffcc 	andi	r3,r3,1023
 8020b98:	e13fcf17 	ldw	r4,-196(fp)
 8020b9c:	20c7883a 	add	r3,r4,r3
 8020ba0:	18c00003 	ldbu	r3,0(r3)
 8020ba4:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8020ba8:	e0bfd717 	ldw	r2,-164(fp)
 8020bac:	10800184 	addi	r2,r2,6
 8020bb0:	e13fdb17 	ldw	r4,-148(fp)
 8020bb4:	e0ffd117 	ldw	r3,-188(fp)
 8020bb8:	20c7c83a 	sub	r3,r4,r3
 8020bbc:	1807d4ba 	srai	r3,r3,18
 8020bc0:	18c0ffcc 	andi	r3,r3,1023
 8020bc4:	e13fcf17 	ldw	r4,-196(fp)
 8020bc8:	20c7883a 	add	r3,r4,r3
 8020bcc:	18c00003 	ldbu	r3,0(r3)
 8020bd0:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8020bd4:	e0bfd717 	ldw	r2,-164(fp)
 8020bd8:	10800084 	addi	r2,r2,2
 8020bdc:	e13fd317 	ldw	r4,-180(fp)
 8020be0:	e0ffd917 	ldw	r3,-156(fp)
 8020be4:	20c7883a 	add	r3,r4,r3
 8020be8:	1807d4ba 	srai	r3,r3,18
 8020bec:	18c0ffcc 	andi	r3,r3,1023
 8020bf0:	e13fcf17 	ldw	r4,-196(fp)
 8020bf4:	20c7883a 	add	r3,r4,r3
 8020bf8:	18c00003 	ldbu	r3,0(r3)
 8020bfc:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8020c00:	e0bfd717 	ldw	r2,-164(fp)
 8020c04:	10800144 	addi	r2,r2,5
 8020c08:	e13fd317 	ldw	r4,-180(fp)
 8020c0c:	e0ffd917 	ldw	r3,-156(fp)
 8020c10:	20c7c83a 	sub	r3,r4,r3
 8020c14:	1807d4ba 	srai	r3,r3,18
 8020c18:	18c0ffcc 	andi	r3,r3,1023
 8020c1c:	e13fcf17 	ldw	r4,-196(fp)
 8020c20:	20c7883a 	add	r3,r4,r3
 8020c24:	18c00003 	ldbu	r3,0(r3)
 8020c28:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8020c2c:	e0bfd717 	ldw	r2,-164(fp)
 8020c30:	108000c4 	addi	r2,r2,3
 8020c34:	e13fda17 	ldw	r4,-152(fp)
 8020c38:	e0ffd017 	ldw	r3,-192(fp)
 8020c3c:	20c7883a 	add	r3,r4,r3
 8020c40:	1807d4ba 	srai	r3,r3,18
 8020c44:	18c0ffcc 	andi	r3,r3,1023
 8020c48:	e13fcf17 	ldw	r4,-196(fp)
 8020c4c:	20c7883a 	add	r3,r4,r3
 8020c50:	18c00003 	ldbu	r3,0(r3)
 8020c54:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8020c58:	e0bfd717 	ldw	r2,-164(fp)
 8020c5c:	10800104 	addi	r2,r2,4
 8020c60:	e13fda17 	ldw	r4,-152(fp)
 8020c64:	e0ffd017 	ldw	r3,-192(fp)
 8020c68:	20c7c83a 	sub	r3,r4,r3
 8020c6c:	1807d4ba 	srai	r3,r3,18
 8020c70:	18c0ffcc 	andi	r3,r3,1023
 8020c74:	e13fcf17 	ldw	r4,-196(fp)
 8020c78:	20c7883a 	add	r3,r4,r3
 8020c7c:	18c00003 	ldbu	r3,0(r3)
 8020c80:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += DCTSIZE;		/* advance pointer to next row */
 8020c84:	e0bfcd17 	ldw	r2,-204(fp)
 8020c88:	10800804 	addi	r2,r2,32
 8020c8c:	e0bfcd15 	stw	r2,-204(fp)
	/* Pass 2: process rows from work array, store into output array. */
	/* Note that we must descale the results by a factor of 8 == 2**3, */
	/* and also undo the PASS1_BITS scaling. */

	wsptr = workspace;
	for (ctr = 0; ctr < 4; ctr++) {
 8020c90:	e0bfce17 	ldw	r2,-200(fp)
 8020c94:	10800044 	addi	r2,r2,1
 8020c98:	e0bfce15 	stw	r2,-200(fp)
 8020c9c:	e0bfce17 	ldw	r2,-200(fp)
 8020ca0:	10800110 	cmplti	r2,r2,4
 8020ca4:	103ef31e 	bne	r2,zero,8020874 <jpeg_idct_8x4+0x25c>
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += DCTSIZE;		/* advance pointer to next row */
	}
}
 8020ca8:	e037883a 	mov	sp,fp
 8020cac:	dfc00117 	ldw	ra,4(sp)
 8020cb0:	df000017 	ldw	fp,0(sp)
 8020cb4:	dec00204 	addi	sp,sp,8
 8020cb8:	f800283a 	ret

08020cbc <jpeg_idct_6x3>:

GLOBAL(void)
	jpeg_idct_6x3 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8020cbc:	deffd904 	addi	sp,sp,-156
 8020cc0:	dfc02615 	stw	ra,152(sp)
 8020cc4:	df002515 	stw	fp,148(sp)
 8020cc8:	df002504 	addi	fp,sp,148
 8020ccc:	e13ffc15 	stw	r4,-16(fp)
 8020cd0:	e17ffd15 	stw	r5,-12(fp)
 8020cd4:	e1bffe15 	stw	r6,-8(fp)
 8020cd8:	e1ffff15 	stw	r7,-4(fp)
	INT32 z1, z2, z3;
	JCOEFPTR inptr;
	ISLOW_MULT_TYPE * quantptr;
	int * wsptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8020cdc:	e0bffc17 	ldw	r2,-16(fp)
 8020ce0:	10804917 	ldw	r2,292(r2)
 8020ce4:	10802004 	addi	r2,r2,128
 8020ce8:	e0bfdf15 	stw	r2,-132(fp)
	SHIFT_TEMPS

		/* Pass 1: process columns from input, store into work array.
		* 3-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/6).
		*/
		inptr = coef_block;
 8020cec:	e0bffe17 	ldw	r2,-8(fp)
 8020cf0:	e0bfdb15 	stw	r2,-148(fp)
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8020cf4:	e0bffd17 	ldw	r2,-12(fp)
 8020cf8:	10801517 	ldw	r2,84(r2)
 8020cfc:	e0bfdc15 	stw	r2,-144(fp)
	wsptr = workspace;
 8020d00:	e0bfea04 	addi	r2,fp,-88
 8020d04:	e0bfdd15 	stw	r2,-140(fp)
	for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8020d08:	e03fde15 	stw	zero,-136(fp)
 8020d0c:	00005b06 	br	8020e7c <jpeg_idct_6x3+0x1c0>
		/* Even part */

		tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8020d10:	e0bfdb17 	ldw	r2,-148(fp)
 8020d14:	1080000b 	ldhu	r2,0(r2)
 8020d18:	10ffffcc 	andi	r3,r2,65535
 8020d1c:	18e0001c 	xori	r3,r3,32768
 8020d20:	18e00004 	addi	r3,r3,-32768
 8020d24:	e0bfdc17 	ldw	r2,-144(fp)
 8020d28:	10800017 	ldw	r2,0(r2)
 8020d2c:	1809883a 	mov	r4,r3
 8020d30:	100b883a 	mov	r5,r2
 8020d34:	802c2180 	call	802c218 <__mulsi3>
 8020d38:	e0bfe015 	stw	r2,-128(fp)
		tmp0 <<= CONST_BITS;
 8020d3c:	e0bfe017 	ldw	r2,-128(fp)
 8020d40:	1004937a 	slli	r2,r2,13
 8020d44:	e0bfe015 	stw	r2,-128(fp)
		/* Add fudge factor here for final descale. */
		tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8020d48:	e0bfe017 	ldw	r2,-128(fp)
 8020d4c:	10810004 	addi	r2,r2,1024
 8020d50:	e0bfe015 	stw	r2,-128(fp)
		tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8020d54:	e0bfdb17 	ldw	r2,-148(fp)
 8020d58:	10800804 	addi	r2,r2,32
 8020d5c:	1080000b 	ldhu	r2,0(r2)
 8020d60:	10ffffcc 	andi	r3,r2,65535
 8020d64:	18e0001c 	xori	r3,r3,32768
 8020d68:	18e00004 	addi	r3,r3,-32768
 8020d6c:	e0bfdc17 	ldw	r2,-144(fp)
 8020d70:	10801004 	addi	r2,r2,64
 8020d74:	10800017 	ldw	r2,0(r2)
 8020d78:	1809883a 	mov	r4,r3
 8020d7c:	100b883a 	mov	r5,r2
 8020d80:	802c2180 	call	802c218 <__mulsi3>
 8020d84:	e0bfe115 	stw	r2,-124(fp)
		tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8020d88:	e13fe117 	ldw	r4,-124(fp)
 8020d8c:	0145a844 	movi	r5,5793
 8020d90:	802c2180 	call	802c218 <__mulsi3>
 8020d94:	e0bfe215 	stw	r2,-120(fp)
		tmp10 = tmp0 + tmp12;
 8020d98:	e0ffe017 	ldw	r3,-128(fp)
 8020d9c:	e0bfe217 	ldw	r2,-120(fp)
 8020da0:	1885883a 	add	r2,r3,r2
 8020da4:	e0bfe315 	stw	r2,-116(fp)
		tmp2 = tmp0 - tmp12 - tmp12;
 8020da8:	e0ffe017 	ldw	r3,-128(fp)
 8020dac:	e0bfe217 	ldw	r2,-120(fp)
 8020db0:	1887c83a 	sub	r3,r3,r2
 8020db4:	e0bfe217 	ldw	r2,-120(fp)
 8020db8:	1885c83a 	sub	r2,r3,r2
 8020dbc:	e0bfe115 	stw	r2,-124(fp)

		/* Odd part */

		tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8020dc0:	e0bfdb17 	ldw	r2,-148(fp)
 8020dc4:	10800404 	addi	r2,r2,16
 8020dc8:	1080000b 	ldhu	r2,0(r2)
 8020dcc:	10ffffcc 	andi	r3,r2,65535
 8020dd0:	18e0001c 	xori	r3,r3,32768
 8020dd4:	18e00004 	addi	r3,r3,-32768
 8020dd8:	e0bfdc17 	ldw	r2,-144(fp)
 8020ddc:	10800804 	addi	r2,r2,32
 8020de0:	10800017 	ldw	r2,0(r2)
 8020de4:	1809883a 	mov	r4,r3
 8020de8:	100b883a 	mov	r5,r2
 8020dec:	802c2180 	call	802c218 <__mulsi3>
 8020df0:	e0bfe215 	stw	r2,-120(fp)
		tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8020df4:	e13fe217 	ldw	r4,-120(fp)
 8020df8:	0149cc44 	movi	r5,10033
 8020dfc:	802c2180 	call	802c218 <__mulsi3>
 8020e00:	e0bfe015 	stw	r2,-128(fp)

		/* Final output stage */

		wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8020e04:	e0ffe317 	ldw	r3,-116(fp)
 8020e08:	e0bfe017 	ldw	r2,-128(fp)
 8020e0c:	1885883a 	add	r2,r3,r2
 8020e10:	1007d2fa 	srai	r3,r2,11
 8020e14:	e0bfdd17 	ldw	r2,-140(fp)
 8020e18:	10c00015 	stw	r3,0(r2)
		wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8020e1c:	e0bfdd17 	ldw	r2,-140(fp)
 8020e20:	10800c04 	addi	r2,r2,48
 8020e24:	e13fe317 	ldw	r4,-116(fp)
 8020e28:	e0ffe017 	ldw	r3,-128(fp)
 8020e2c:	20c7c83a 	sub	r3,r4,r3
 8020e30:	1807d2fa 	srai	r3,r3,11
 8020e34:	10c00015 	stw	r3,0(r2)
		wsptr[6*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 8020e38:	e0bfdd17 	ldw	r2,-140(fp)
 8020e3c:	10800604 	addi	r2,r2,24
 8020e40:	e0ffe117 	ldw	r3,-124(fp)
 8020e44:	1807d2fa 	srai	r3,r3,11
 8020e48:	10c00015 	stw	r3,0(r2)
		* 3-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/6).
		*/
		inptr = coef_block;
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
	wsptr = workspace;
	for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8020e4c:	e0bfde17 	ldw	r2,-136(fp)
 8020e50:	10800044 	addi	r2,r2,1
 8020e54:	e0bfde15 	stw	r2,-136(fp)
 8020e58:	e0bfdb17 	ldw	r2,-148(fp)
 8020e5c:	10800084 	addi	r2,r2,2
 8020e60:	e0bfdb15 	stw	r2,-148(fp)
 8020e64:	e0bfdc17 	ldw	r2,-144(fp)
 8020e68:	10800104 	addi	r2,r2,4
 8020e6c:	e0bfdc15 	stw	r2,-144(fp)
 8020e70:	e0bfdd17 	ldw	r2,-140(fp)
 8020e74:	10800104 	addi	r2,r2,4
 8020e78:	e0bfdd15 	stw	r2,-140(fp)
 8020e7c:	e0bfde17 	ldw	r2,-136(fp)
 8020e80:	10800190 	cmplti	r2,r2,6
 8020e84:	103fa21e 	bne	r2,zero,8020d10 <jpeg_idct_6x3+0x54>
	}

	/* Pass 2: process 3 rows from work array, store into output array.
	* 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
	*/
	wsptr = workspace;
 8020e88:	e0bfea04 	addi	r2,fp,-88
 8020e8c:	e0bfdd15 	stw	r2,-140(fp)
	for (ctr = 0; ctr < 3; ctr++) {
 8020e90:	e03fde15 	stw	zero,-136(fp)
 8020e94:	0000a106 	br	802111c <jpeg_idct_6x3+0x460>
		outptr = output_buf[ctr] + output_col;
 8020e98:	e0bfde17 	ldw	r2,-136(fp)
 8020e9c:	1085883a 	add	r2,r2,r2
 8020ea0:	1085883a 	add	r2,r2,r2
 8020ea4:	e0ffff17 	ldw	r3,-4(fp)
 8020ea8:	1885883a 	add	r2,r3,r2
 8020eac:	10c00017 	ldw	r3,0(r2)
 8020eb0:	e0800217 	ldw	r2,8(fp)
 8020eb4:	1885883a 	add	r2,r3,r2
 8020eb8:	e0bfe415 	stw	r2,-112(fp)

		/* Even part */

		/* Add fudge factor here for final descale. */
		tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8020ebc:	e0bfdd17 	ldw	r2,-140(fp)
 8020ec0:	10800017 	ldw	r2,0(r2)
 8020ec4:	10800404 	addi	r2,r2,16
 8020ec8:	e0bfe015 	stw	r2,-128(fp)
		tmp0 <<= CONST_BITS;
 8020ecc:	e0bfe017 	ldw	r2,-128(fp)
 8020ed0:	1004937a 	slli	r2,r2,13
 8020ed4:	e0bfe015 	stw	r2,-128(fp)
		tmp2 = (INT32) wsptr[4];
 8020ed8:	e0bfdd17 	ldw	r2,-140(fp)
 8020edc:	10800404 	addi	r2,r2,16
 8020ee0:	10800017 	ldw	r2,0(r2)
 8020ee4:	e0bfe115 	stw	r2,-124(fp)
		tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8020ee8:	e13fe117 	ldw	r4,-124(fp)
 8020eec:	0145a844 	movi	r5,5793
 8020ef0:	802c2180 	call	802c218 <__mulsi3>
 8020ef4:	e0bfe315 	stw	r2,-116(fp)
		tmp1 = tmp0 + tmp10;
 8020ef8:	e0ffe017 	ldw	r3,-128(fp)
 8020efc:	e0bfe317 	ldw	r2,-116(fp)
 8020f00:	1885883a 	add	r2,r3,r2
 8020f04:	e0bfe515 	stw	r2,-108(fp)
		tmp11 = tmp0 - tmp10 - tmp10;
 8020f08:	e0ffe017 	ldw	r3,-128(fp)
 8020f0c:	e0bfe317 	ldw	r2,-116(fp)
 8020f10:	1887c83a 	sub	r3,r3,r2
 8020f14:	e0bfe317 	ldw	r2,-116(fp)
 8020f18:	1885c83a 	sub	r2,r3,r2
 8020f1c:	e0bfe615 	stw	r2,-104(fp)
		tmp10 = (INT32) wsptr[2];
 8020f20:	e0bfdd17 	ldw	r2,-140(fp)
 8020f24:	10800204 	addi	r2,r2,8
 8020f28:	10800017 	ldw	r2,0(r2)
 8020f2c:	e0bfe315 	stw	r2,-116(fp)
		tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8020f30:	e13fe317 	ldw	r4,-116(fp)
 8020f34:	0149cc44 	movi	r5,10033
 8020f38:	802c2180 	call	802c218 <__mulsi3>
 8020f3c:	e0bfe015 	stw	r2,-128(fp)
		tmp10 = tmp1 + tmp0;
 8020f40:	e0ffe517 	ldw	r3,-108(fp)
 8020f44:	e0bfe017 	ldw	r2,-128(fp)
 8020f48:	1885883a 	add	r2,r3,r2
 8020f4c:	e0bfe315 	stw	r2,-116(fp)
		tmp12 = tmp1 - tmp0;
 8020f50:	e0ffe517 	ldw	r3,-108(fp)
 8020f54:	e0bfe017 	ldw	r2,-128(fp)
 8020f58:	1885c83a 	sub	r2,r3,r2
 8020f5c:	e0bfe215 	stw	r2,-120(fp)

		/* Odd part */

		z1 = (INT32) wsptr[1];
 8020f60:	e0bfdd17 	ldw	r2,-140(fp)
 8020f64:	10800104 	addi	r2,r2,4
 8020f68:	10800017 	ldw	r2,0(r2)
 8020f6c:	e0bfe715 	stw	r2,-100(fp)
		z2 = (INT32) wsptr[3];
 8020f70:	e0bfdd17 	ldw	r2,-140(fp)
 8020f74:	10800304 	addi	r2,r2,12
 8020f78:	10800017 	ldw	r2,0(r2)
 8020f7c:	e0bfe815 	stw	r2,-96(fp)
		z3 = (INT32) wsptr[5];
 8020f80:	e0bfdd17 	ldw	r2,-140(fp)
 8020f84:	10800504 	addi	r2,r2,20
 8020f88:	10800017 	ldw	r2,0(r2)
 8020f8c:	e0bfe915 	stw	r2,-92(fp)
		tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8020f90:	e0ffe717 	ldw	r3,-100(fp)
 8020f94:	e0bfe917 	ldw	r2,-92(fp)
 8020f98:	1885883a 	add	r2,r3,r2
 8020f9c:	1009883a 	mov	r4,r2
 8020fa0:	0142ed84 	movi	r5,2998
 8020fa4:	802c2180 	call	802c218 <__mulsi3>
 8020fa8:	e0bfe515 	stw	r2,-108(fp)
		tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8020fac:	e0ffe717 	ldw	r3,-100(fp)
 8020fb0:	e0bfe817 	ldw	r2,-96(fp)
 8020fb4:	1885883a 	add	r2,r3,r2
 8020fb8:	1006937a 	slli	r3,r2,13
 8020fbc:	e0bfe517 	ldw	r2,-108(fp)
 8020fc0:	1885883a 	add	r2,r3,r2
 8020fc4:	e0bfe015 	stw	r2,-128(fp)
		tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8020fc8:	e0ffe917 	ldw	r3,-92(fp)
 8020fcc:	e0bfe817 	ldw	r2,-96(fp)
 8020fd0:	1885c83a 	sub	r2,r3,r2
 8020fd4:	1006937a 	slli	r3,r2,13
 8020fd8:	e0bfe517 	ldw	r2,-108(fp)
 8020fdc:	1885883a 	add	r2,r3,r2
 8020fe0:	e0bfe115 	stw	r2,-124(fp)
		tmp1 = (z1 - z2 - z3) << CONST_BITS;
 8020fe4:	e0ffe717 	ldw	r3,-100(fp)
 8020fe8:	e0bfe817 	ldw	r2,-96(fp)
 8020fec:	1887c83a 	sub	r3,r3,r2
 8020ff0:	e0bfe917 	ldw	r2,-92(fp)
 8020ff4:	1885c83a 	sub	r2,r3,r2
 8020ff8:	1004937a 	slli	r2,r2,13
 8020ffc:	e0bfe515 	stw	r2,-108(fp)

		/* Final output stage */

		outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8021000:	e0ffe317 	ldw	r3,-116(fp)
 8021004:	e0bfe017 	ldw	r2,-128(fp)
 8021008:	1885883a 	add	r2,r3,r2
 802100c:	1005d4ba 	srai	r2,r2,18
 8021010:	1080ffcc 	andi	r2,r2,1023
 8021014:	e0ffdf17 	ldw	r3,-132(fp)
 8021018:	1885883a 	add	r2,r3,r2
 802101c:	10c00003 	ldbu	r3,0(r2)
 8021020:	e0bfe417 	ldw	r2,-112(fp)
 8021024:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8021028:	e0bfe417 	ldw	r2,-112(fp)
 802102c:	10800144 	addi	r2,r2,5
 8021030:	e13fe317 	ldw	r4,-116(fp)
 8021034:	e0ffe017 	ldw	r3,-128(fp)
 8021038:	20c7c83a 	sub	r3,r4,r3
 802103c:	1807d4ba 	srai	r3,r3,18
 8021040:	18c0ffcc 	andi	r3,r3,1023
 8021044:	e13fdf17 	ldw	r4,-132(fp)
 8021048:	20c7883a 	add	r3,r4,r3
 802104c:	18c00003 	ldbu	r3,0(r3)
 8021050:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8021054:	e0bfe417 	ldw	r2,-112(fp)
 8021058:	10800044 	addi	r2,r2,1
 802105c:	e13fe617 	ldw	r4,-104(fp)
 8021060:	e0ffe517 	ldw	r3,-108(fp)
 8021064:	20c7883a 	add	r3,r4,r3
 8021068:	1807d4ba 	srai	r3,r3,18
 802106c:	18c0ffcc 	andi	r3,r3,1023
 8021070:	e13fdf17 	ldw	r4,-132(fp)
 8021074:	20c7883a 	add	r3,r4,r3
 8021078:	18c00003 	ldbu	r3,0(r3)
 802107c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8021080:	e0bfe417 	ldw	r2,-112(fp)
 8021084:	10800104 	addi	r2,r2,4
 8021088:	e13fe617 	ldw	r4,-104(fp)
 802108c:	e0ffe517 	ldw	r3,-108(fp)
 8021090:	20c7c83a 	sub	r3,r4,r3
 8021094:	1807d4ba 	srai	r3,r3,18
 8021098:	18c0ffcc 	andi	r3,r3,1023
 802109c:	e13fdf17 	ldw	r4,-132(fp)
 80210a0:	20c7883a 	add	r3,r4,r3
 80210a4:	18c00003 	ldbu	r3,0(r3)
 80210a8:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80210ac:	e0bfe417 	ldw	r2,-112(fp)
 80210b0:	10800084 	addi	r2,r2,2
 80210b4:	e13fe217 	ldw	r4,-120(fp)
 80210b8:	e0ffe117 	ldw	r3,-124(fp)
 80210bc:	20c7883a 	add	r3,r4,r3
 80210c0:	1807d4ba 	srai	r3,r3,18
 80210c4:	18c0ffcc 	andi	r3,r3,1023
 80210c8:	e13fdf17 	ldw	r4,-132(fp)
 80210cc:	20c7883a 	add	r3,r4,r3
 80210d0:	18c00003 	ldbu	r3,0(r3)
 80210d4:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80210d8:	e0bfe417 	ldw	r2,-112(fp)
 80210dc:	108000c4 	addi	r2,r2,3
 80210e0:	e13fe217 	ldw	r4,-120(fp)
 80210e4:	e0ffe117 	ldw	r3,-124(fp)
 80210e8:	20c7c83a 	sub	r3,r4,r3
 80210ec:	1807d4ba 	srai	r3,r3,18
 80210f0:	18c0ffcc 	andi	r3,r3,1023
 80210f4:	e13fdf17 	ldw	r4,-132(fp)
 80210f8:	20c7883a 	add	r3,r4,r3
 80210fc:	18c00003 	ldbu	r3,0(r3)
 8021100:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 6;		/* advance pointer to next row */
 8021104:	e0bfdd17 	ldw	r2,-140(fp)
 8021108:	10800604 	addi	r2,r2,24
 802110c:	e0bfdd15 	stw	r2,-140(fp)

	/* Pass 2: process 3 rows from work array, store into output array.
	* 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
	*/
	wsptr = workspace;
	for (ctr = 0; ctr < 3; ctr++) {
 8021110:	e0bfde17 	ldw	r2,-136(fp)
 8021114:	10800044 	addi	r2,r2,1
 8021118:	e0bfde15 	stw	r2,-136(fp)
 802111c:	e0bfde17 	ldw	r2,-136(fp)
 8021120:	108000d0 	cmplti	r2,r2,3
 8021124:	103f5c1e 	bne	r2,zero,8020e98 <jpeg_idct_6x3+0x1dc>
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 6;		/* advance pointer to next row */
	}
}
 8021128:	e037883a 	mov	sp,fp
 802112c:	dfc00117 	ldw	ra,4(sp)
 8021130:	df000017 	ldw	fp,0(sp)
 8021134:	dec00204 	addi	sp,sp,8
 8021138:	f800283a 	ret

0802113c <jpeg_idct_4x2>:

GLOBAL(void)
	jpeg_idct_4x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
 802113c:	deffe504 	addi	sp,sp,-108
 8021140:	dfc01a15 	stw	ra,104(sp)
 8021144:	df001915 	stw	fp,100(sp)
 8021148:	df001904 	addi	fp,sp,100
 802114c:	e13ffc15 	stw	r4,-16(fp)
 8021150:	e17ffd15 	stw	r5,-12(fp)
 8021154:	e1bffe15 	stw	r6,-8(fp)
 8021158:	e1ffff15 	stw	r7,-4(fp)
	INT32 z1, z2, z3;
	JCOEFPTR inptr;
	ISLOW_MULT_TYPE * quantptr;
	INT32 * wsptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 802115c:	e0bffc17 	ldw	r2,-16(fp)
 8021160:	10804917 	ldw	r2,292(r2)
 8021164:	10802004 	addi	r2,r2,128
 8021168:	e0bfeb15 	stw	r2,-84(fp)
	INT32 workspace[4*2];	/* buffers data between passes */
	SHIFT_TEMPS

		/* Pass 1: process columns from input, store into work array. */

		inptr = coef_block;
 802116c:	e0bffe17 	ldw	r2,-8(fp)
 8021170:	e0bfe715 	stw	r2,-100(fp)
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8021174:	e0bffd17 	ldw	r2,-12(fp)
 8021178:	10801517 	ldw	r2,84(r2)
 802117c:	e0bfe815 	stw	r2,-96(fp)
	wsptr = workspace;
 8021180:	e0bff404 	addi	r2,fp,-48
 8021184:	e0bfe915 	stw	r2,-92(fp)
	for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8021188:	e03fea15 	stw	zero,-88(fp)
 802118c:	00002f06 	br	802124c <jpeg_idct_4x2+0x110>
		/* Even part */

		tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8021190:	e0bfe717 	ldw	r2,-100(fp)
 8021194:	1080000b 	ldhu	r2,0(r2)
 8021198:	10ffffcc 	andi	r3,r2,65535
 802119c:	18e0001c 	xori	r3,r3,32768
 80211a0:	18e00004 	addi	r3,r3,-32768
 80211a4:	e0bfe817 	ldw	r2,-96(fp)
 80211a8:	10800017 	ldw	r2,0(r2)
 80211ac:	1809883a 	mov	r4,r3
 80211b0:	100b883a 	mov	r5,r2
 80211b4:	802c2180 	call	802c218 <__mulsi3>
 80211b8:	e0bfec15 	stw	r2,-80(fp)

		/* Odd part */

		tmp0 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80211bc:	e0bfe717 	ldw	r2,-100(fp)
 80211c0:	10800404 	addi	r2,r2,16
 80211c4:	1080000b 	ldhu	r2,0(r2)
 80211c8:	10ffffcc 	andi	r3,r2,65535
 80211cc:	18e0001c 	xori	r3,r3,32768
 80211d0:	18e00004 	addi	r3,r3,-32768
 80211d4:	e0bfe817 	ldw	r2,-96(fp)
 80211d8:	10800804 	addi	r2,r2,32
 80211dc:	10800017 	ldw	r2,0(r2)
 80211e0:	1809883a 	mov	r4,r3
 80211e4:	100b883a 	mov	r5,r2
 80211e8:	802c2180 	call	802c218 <__mulsi3>
 80211ec:	e0bfed15 	stw	r2,-76(fp)

		/* Final output stage */

		wsptr[4*0] = tmp10 + tmp0;
 80211f0:	e0ffec17 	ldw	r3,-80(fp)
 80211f4:	e0bfed17 	ldw	r2,-76(fp)
 80211f8:	1887883a 	add	r3,r3,r2
 80211fc:	e0bfe917 	ldw	r2,-92(fp)
 8021200:	10c00015 	stw	r3,0(r2)
		wsptr[4*1] = tmp10 - tmp0;
 8021204:	e0bfe917 	ldw	r2,-92(fp)
 8021208:	10800404 	addi	r2,r2,16
 802120c:	e13fec17 	ldw	r4,-80(fp)
 8021210:	e0ffed17 	ldw	r3,-76(fp)
 8021214:	20c7c83a 	sub	r3,r4,r3
 8021218:	10c00015 	stw	r3,0(r2)
		/* Pass 1: process columns from input, store into work array. */

		inptr = coef_block;
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
	wsptr = workspace;
	for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 802121c:	e0bfea17 	ldw	r2,-88(fp)
 8021220:	10800044 	addi	r2,r2,1
 8021224:	e0bfea15 	stw	r2,-88(fp)
 8021228:	e0bfe717 	ldw	r2,-100(fp)
 802122c:	10800084 	addi	r2,r2,2
 8021230:	e0bfe715 	stw	r2,-100(fp)
 8021234:	e0bfe817 	ldw	r2,-96(fp)
 8021238:	10800104 	addi	r2,r2,4
 802123c:	e0bfe815 	stw	r2,-96(fp)
 8021240:	e0bfe917 	ldw	r2,-92(fp)
 8021244:	10800104 	addi	r2,r2,4
 8021248:	e0bfe915 	stw	r2,-92(fp)
 802124c:	e0bfea17 	ldw	r2,-88(fp)
 8021250:	10800110 	cmplti	r2,r2,4
 8021254:	103fce1e 	bne	r2,zero,8021190 <jpeg_idct_4x2+0x54>

	/* Pass 2: process 2 rows from work array, store into output array.
	* 4-point IDCT kernel,
	* cK represents sqrt(2) * cos(K*pi/16) [refers to 8-point IDCT].
	*/
	wsptr = workspace;
 8021258:	e0bff404 	addi	r2,fp,-48
 802125c:	e0bfe915 	stw	r2,-92(fp)
	for (ctr = 0; ctr < 2; ctr++) {
 8021260:	e03fea15 	stw	zero,-88(fp)
 8021264:	00006606 	br	8021400 <jpeg_idct_4x2+0x2c4>
		outptr = output_buf[ctr] + output_col;
 8021268:	e0bfea17 	ldw	r2,-88(fp)
 802126c:	1085883a 	add	r2,r2,r2
 8021270:	1085883a 	add	r2,r2,r2
 8021274:	e0ffff17 	ldw	r3,-4(fp)
 8021278:	1885883a 	add	r2,r3,r2
 802127c:	10c00017 	ldw	r3,0(r2)
 8021280:	e0800217 	ldw	r2,8(fp)
 8021284:	1885883a 	add	r2,r3,r2
 8021288:	e0bfee15 	stw	r2,-72(fp)

		/* Even part */

		/* Add fudge factor here for final descale. */
		tmp0 = wsptr[0] + (ONE << 2);
 802128c:	e0bfe917 	ldw	r2,-92(fp)
 8021290:	10800017 	ldw	r2,0(r2)
 8021294:	10800104 	addi	r2,r2,4
 8021298:	e0bfed15 	stw	r2,-76(fp)
		tmp2 = wsptr[2];
 802129c:	e0bfe917 	ldw	r2,-92(fp)
 80212a0:	10800217 	ldw	r2,8(r2)
 80212a4:	e0bfef15 	stw	r2,-68(fp)

		tmp10 = (tmp0 + tmp2) << CONST_BITS;
 80212a8:	e0ffed17 	ldw	r3,-76(fp)
 80212ac:	e0bfef17 	ldw	r2,-68(fp)
 80212b0:	1885883a 	add	r2,r3,r2
 80212b4:	1004937a 	slli	r2,r2,13
 80212b8:	e0bfec15 	stw	r2,-80(fp)
		tmp12 = (tmp0 - tmp2) << CONST_BITS;
 80212bc:	e0ffed17 	ldw	r3,-76(fp)
 80212c0:	e0bfef17 	ldw	r2,-68(fp)
 80212c4:	1885c83a 	sub	r2,r3,r2
 80212c8:	1004937a 	slli	r2,r2,13
 80212cc:	e0bff015 	stw	r2,-64(fp)

		/* Odd part */
		/* Same rotation as in the even part of the 8x8 LL&M IDCT */

		z2 = wsptr[1];
 80212d0:	e0bfe917 	ldw	r2,-92(fp)
 80212d4:	10800117 	ldw	r2,4(r2)
 80212d8:	e0bff115 	stw	r2,-60(fp)
		z3 = wsptr[3];
 80212dc:	e0bfe917 	ldw	r2,-92(fp)
 80212e0:	10800317 	ldw	r2,12(r2)
 80212e4:	e0bff215 	stw	r2,-56(fp)

		z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 80212e8:	e0fff117 	ldw	r3,-60(fp)
 80212ec:	e0bff217 	ldw	r2,-56(fp)
 80212f0:	1885883a 	add	r2,r3,r2
 80212f4:	1009883a 	mov	r4,r2
 80212f8:	01445444 	movi	r5,4433
 80212fc:	802c2180 	call	802c218 <__mulsi3>
 8021300:	e0bff315 	stw	r2,-52(fp)
		tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8021304:	e13ff117 	ldw	r4,-60(fp)
 8021308:	01461f84 	movi	r5,6270
 802130c:	802c2180 	call	802c218 <__mulsi3>
 8021310:	1007883a 	mov	r3,r2
 8021314:	e0bff317 	ldw	r2,-52(fp)
 8021318:	1885883a 	add	r2,r3,r2
 802131c:	e0bfed15 	stw	r2,-76(fp)
		tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8021320:	e13ff217 	ldw	r4,-56(fp)
 8021324:	017137c4 	movi	r5,-15137
 8021328:	802c2180 	call	802c218 <__mulsi3>
 802132c:	1007883a 	mov	r3,r2
 8021330:	e0bff317 	ldw	r2,-52(fp)
 8021334:	1885883a 	add	r2,r3,r2
 8021338:	e0bfef15 	stw	r2,-68(fp)

		/* Final output stage */

		outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 802133c:	e0ffec17 	ldw	r3,-80(fp)
 8021340:	e0bfed17 	ldw	r2,-76(fp)
 8021344:	1885883a 	add	r2,r3,r2
 8021348:	1005d43a 	srai	r2,r2,16
 802134c:	1080ffcc 	andi	r2,r2,1023
 8021350:	e0ffeb17 	ldw	r3,-84(fp)
 8021354:	1885883a 	add	r2,r3,r2
 8021358:	10c00003 	ldbu	r3,0(r2)
 802135c:	e0bfee17 	ldw	r2,-72(fp)
 8021360:	10c00005 	stb	r3,0(r2)
			CONST_BITS+3)
			& RANGE_MASK];
		outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8021364:	e0bfee17 	ldw	r2,-72(fp)
 8021368:	108000c4 	addi	r2,r2,3
 802136c:	e13fec17 	ldw	r4,-80(fp)
 8021370:	e0ffed17 	ldw	r3,-76(fp)
 8021374:	20c7c83a 	sub	r3,r4,r3
 8021378:	1807d43a 	srai	r3,r3,16
 802137c:	18c0ffcc 	andi	r3,r3,1023
 8021380:	e13feb17 	ldw	r4,-84(fp)
 8021384:	20c7883a 	add	r3,r4,r3
 8021388:	18c00003 	ldbu	r3,0(r3)
 802138c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+3)
			& RANGE_MASK];
		outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8021390:	e0bfee17 	ldw	r2,-72(fp)
 8021394:	10800044 	addi	r2,r2,1
 8021398:	e13ff017 	ldw	r4,-64(fp)
 802139c:	e0ffef17 	ldw	r3,-68(fp)
 80213a0:	20c7883a 	add	r3,r4,r3
 80213a4:	1807d43a 	srai	r3,r3,16
 80213a8:	18c0ffcc 	andi	r3,r3,1023
 80213ac:	e13feb17 	ldw	r4,-84(fp)
 80213b0:	20c7883a 	add	r3,r4,r3
 80213b4:	18c00003 	ldbu	r3,0(r3)
 80213b8:	10c00005 	stb	r3,0(r2)
			CONST_BITS+3)
			& RANGE_MASK];
		outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80213bc:	e0bfee17 	ldw	r2,-72(fp)
 80213c0:	10800084 	addi	r2,r2,2
 80213c4:	e13ff017 	ldw	r4,-64(fp)
 80213c8:	e0ffef17 	ldw	r3,-68(fp)
 80213cc:	20c7c83a 	sub	r3,r4,r3
 80213d0:	1807d43a 	srai	r3,r3,16
 80213d4:	18c0ffcc 	andi	r3,r3,1023
 80213d8:	e13feb17 	ldw	r4,-84(fp)
 80213dc:	20c7883a 	add	r3,r4,r3
 80213e0:	18c00003 	ldbu	r3,0(r3)
 80213e4:	10c00005 	stb	r3,0(r2)
			CONST_BITS+3)
			& RANGE_MASK];

		wsptr += 4;		/* advance pointer to next row */
 80213e8:	e0bfe917 	ldw	r2,-92(fp)
 80213ec:	10800404 	addi	r2,r2,16
 80213f0:	e0bfe915 	stw	r2,-92(fp)
	/* Pass 2: process 2 rows from work array, store into output array.
	* 4-point IDCT kernel,
	* cK represents sqrt(2) * cos(K*pi/16) [refers to 8-point IDCT].
	*/
	wsptr = workspace;
	for (ctr = 0; ctr < 2; ctr++) {
 80213f4:	e0bfea17 	ldw	r2,-88(fp)
 80213f8:	10800044 	addi	r2,r2,1
 80213fc:	e0bfea15 	stw	r2,-88(fp)
 8021400:	e0bfea17 	ldw	r2,-88(fp)
 8021404:	10800090 	cmplti	r2,r2,2
 8021408:	103f971e 	bne	r2,zero,8021268 <jpeg_idct_4x2+0x12c>
			CONST_BITS+3)
			& RANGE_MASK];

		wsptr += 4;		/* advance pointer to next row */
	}
}
 802140c:	e037883a 	mov	sp,fp
 8021410:	dfc00117 	ldw	ra,4(sp)
 8021414:	df000017 	ldw	fp,0(sp)
 8021418:	dec00204 	addi	sp,sp,8
 802141c:	f800283a 	ret

08021420 <jpeg_idct_2x1>:

GLOBAL(void)
	jpeg_idct_2x1 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8021420:	defff504 	addi	sp,sp,-44
 8021424:	dfc00a15 	stw	ra,40(sp)
 8021428:	df000915 	stw	fp,36(sp)
 802142c:	df000904 	addi	fp,sp,36
 8021430:	e13ffc15 	stw	r4,-16(fp)
 8021434:	e17ffd15 	stw	r5,-12(fp)
 8021438:	e1bffe15 	stw	r6,-8(fp)
 802143c:	e1ffff15 	stw	r7,-4(fp)
	INT32 tmp0, tmp10;
	ISLOW_MULT_TYPE * quantptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8021440:	e0bffc17 	ldw	r2,-16(fp)
 8021444:	10804917 	ldw	r2,292(r2)
 8021448:	10802004 	addi	r2,r2,128
 802144c:	e0bff715 	stw	r2,-36(fp)

		/* Pass 1: empty. */

		/* Pass 2: process 1 row from input, store into output array. */

		quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8021450:	e0bffd17 	ldw	r2,-12(fp)
 8021454:	10801517 	ldw	r2,84(r2)
 8021458:	e0bff815 	stw	r2,-32(fp)
	outptr = output_buf[0] + output_col;
 802145c:	e0bfff17 	ldw	r2,-4(fp)
 8021460:	10c00017 	ldw	r3,0(r2)
 8021464:	e0800217 	ldw	r2,8(fp)
 8021468:	1885883a 	add	r2,r3,r2
 802146c:	e0bff915 	stw	r2,-28(fp)

	/* Even part */

	tmp10 = DEQUANTIZE(coef_block[0], quantptr[0]);
 8021470:	e0bffe17 	ldw	r2,-8(fp)
 8021474:	1080000b 	ldhu	r2,0(r2)
 8021478:	10ffffcc 	andi	r3,r2,65535
 802147c:	18e0001c 	xori	r3,r3,32768
 8021480:	18e00004 	addi	r3,r3,-32768
 8021484:	e0bff817 	ldw	r2,-32(fp)
 8021488:	10800017 	ldw	r2,0(r2)
 802148c:	1809883a 	mov	r4,r3
 8021490:	100b883a 	mov	r5,r2
 8021494:	802c2180 	call	802c218 <__mulsi3>
 8021498:	e0bffa15 	stw	r2,-24(fp)
	/* Add fudge factor here for final descale. */
	tmp10 += ONE << 2;
 802149c:	e0bffa17 	ldw	r2,-24(fp)
 80214a0:	10800104 	addi	r2,r2,4
 80214a4:	e0bffa15 	stw	r2,-24(fp)

	/* Odd part */

	tmp0 = DEQUANTIZE(coef_block[1], quantptr[1]);
 80214a8:	e0bffe17 	ldw	r2,-8(fp)
 80214ac:	10800084 	addi	r2,r2,2
 80214b0:	1080000b 	ldhu	r2,0(r2)
 80214b4:	10ffffcc 	andi	r3,r2,65535
 80214b8:	18e0001c 	xori	r3,r3,32768
 80214bc:	18e00004 	addi	r3,r3,-32768
 80214c0:	e0bff817 	ldw	r2,-32(fp)
 80214c4:	10800104 	addi	r2,r2,4
 80214c8:	10800017 	ldw	r2,0(r2)
 80214cc:	1809883a 	mov	r4,r3
 80214d0:	100b883a 	mov	r5,r2
 80214d4:	802c2180 	call	802c218 <__mulsi3>
 80214d8:	e0bffb15 	stw	r2,-20(fp)

	/* Final output stage */

	outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3) & RANGE_MASK];
 80214dc:	e0fffa17 	ldw	r3,-24(fp)
 80214e0:	e0bffb17 	ldw	r2,-20(fp)
 80214e4:	1885883a 	add	r2,r3,r2
 80214e8:	1005d0fa 	srai	r2,r2,3
 80214ec:	1080ffcc 	andi	r2,r2,1023
 80214f0:	e0fff717 	ldw	r3,-36(fp)
 80214f4:	1885883a 	add	r2,r3,r2
 80214f8:	10c00003 	ldbu	r3,0(r2)
 80214fc:	e0bff917 	ldw	r2,-28(fp)
 8021500:	10c00005 	stb	r3,0(r2)
	outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3) & RANGE_MASK];
 8021504:	e0bff917 	ldw	r2,-28(fp)
 8021508:	10800044 	addi	r2,r2,1
 802150c:	e13ffa17 	ldw	r4,-24(fp)
 8021510:	e0fffb17 	ldw	r3,-20(fp)
 8021514:	20c7c83a 	sub	r3,r4,r3
 8021518:	1807d0fa 	srai	r3,r3,3
 802151c:	18c0ffcc 	andi	r3,r3,1023
 8021520:	e13ff717 	ldw	r4,-36(fp)
 8021524:	20c7883a 	add	r3,r4,r3
 8021528:	18c00003 	ldbu	r3,0(r3)
 802152c:	10c00005 	stb	r3,0(r2)
}
 8021530:	e037883a 	mov	sp,fp
 8021534:	dfc00117 	ldw	ra,4(sp)
 8021538:	df000017 	ldw	fp,0(sp)
 802153c:	dec00204 	addi	sp,sp,8
 8021540:	f800283a 	ret

08021544 <jpeg_idct_8x16>:

GLOBAL(void)
	jpeg_idct_8x16 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8021544:	deff5f04 	addi	sp,sp,-644
 8021548:	dfc0a015 	stw	ra,640(sp)
 802154c:	df009f15 	stw	fp,636(sp)
 8021550:	dc009e15 	stw	r16,632(sp)
 8021554:	df009e04 	addi	fp,sp,632
 8021558:	e13ffc15 	stw	r4,-16(fp)
 802155c:	e17ffd15 	stw	r5,-12(fp)
 8021560:	e1bffe15 	stw	r6,-8(fp)
 8021564:	e1ffff15 	stw	r7,-4(fp)
	INT32 z1, z2, z3, z4;
	JCOEFPTR inptr;
	ISLOW_MULT_TYPE * quantptr;
	int * wsptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8021568:	e0bffc17 	ldw	r2,-16(fp)
 802156c:	10804917 	ldw	r2,292(r2)
 8021570:	10802004 	addi	r2,r2,128
 8021574:	e0bf6615 	stw	r2,-616(fp)
	SHIFT_TEMPS

		/* Pass 1: process columns from input, store into work array.
		* 16-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/32).
		*/
		inptr = coef_block;
 8021578:	e0bffe17 	ldw	r2,-8(fp)
 802157c:	e0bf6215 	stw	r2,-632(fp)
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8021580:	e0bffd17 	ldw	r2,-12(fp)
 8021584:	10801517 	ldw	r2,84(r2)
 8021588:	e0bf6315 	stw	r2,-628(fp)
	wsptr = workspace;
 802158c:	e0bf7c04 	addi	r2,fp,-528
 8021590:	e0bf6415 	stw	r2,-624(fp)
	for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8021594:	e03f6515 	stw	zero,-620(fp)
 8021598:	0001f906 	br	8021d80 <jpeg_idct_8x16+0x83c>
		/* Even part */

		tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 802159c:	e0bf6217 	ldw	r2,-632(fp)
 80215a0:	1080000b 	ldhu	r2,0(r2)
 80215a4:	10ffffcc 	andi	r3,r2,65535
 80215a8:	18e0001c 	xori	r3,r3,32768
 80215ac:	18e00004 	addi	r3,r3,-32768
 80215b0:	e0bf6317 	ldw	r2,-628(fp)
 80215b4:	10800017 	ldw	r2,0(r2)
 80215b8:	1809883a 	mov	r4,r3
 80215bc:	100b883a 	mov	r5,r2
 80215c0:	802c2180 	call	802c218 <__mulsi3>
 80215c4:	e0bf6715 	stw	r2,-612(fp)
		tmp0 <<= CONST_BITS;
 80215c8:	e0bf6717 	ldw	r2,-612(fp)
 80215cc:	1004937a 	slli	r2,r2,13
 80215d0:	e0bf6715 	stw	r2,-612(fp)
		/* Add fudge factor here for final descale. */
		tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 80215d4:	e0bf6717 	ldw	r2,-612(fp)
 80215d8:	10810004 	addi	r2,r2,1024
 80215dc:	e0bf6715 	stw	r2,-612(fp)

		z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80215e0:	e0bf6217 	ldw	r2,-632(fp)
 80215e4:	10801004 	addi	r2,r2,64
 80215e8:	1080000b 	ldhu	r2,0(r2)
 80215ec:	10ffffcc 	andi	r3,r2,65535
 80215f0:	18e0001c 	xori	r3,r3,32768
 80215f4:	18e00004 	addi	r3,r3,-32768
 80215f8:	e0bf6317 	ldw	r2,-628(fp)
 80215fc:	10802004 	addi	r2,r2,128
 8021600:	10800017 	ldw	r2,0(r2)
 8021604:	1809883a 	mov	r4,r3
 8021608:	100b883a 	mov	r5,r2
 802160c:	802c2180 	call	802c218 <__mulsi3>
 8021610:	e0bf6815 	stw	r2,-608(fp)
		tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8021614:	e13f6817 	ldw	r4,-608(fp)
 8021618:	014a73c4 	movi	r5,10703
 802161c:	802c2180 	call	802c218 <__mulsi3>
 8021620:	e0bf6915 	stw	r2,-604(fp)
		tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8021624:	e13f6817 	ldw	r4,-608(fp)
 8021628:	01445444 	movi	r5,4433
 802162c:	802c2180 	call	802c218 <__mulsi3>
 8021630:	e0bf6a15 	stw	r2,-600(fp)

		tmp10 = tmp0 + tmp1;
 8021634:	e0ff6717 	ldw	r3,-612(fp)
 8021638:	e0bf6917 	ldw	r2,-604(fp)
 802163c:	1885883a 	add	r2,r3,r2
 8021640:	e0bf6b15 	stw	r2,-596(fp)
		tmp11 = tmp0 - tmp1;
 8021644:	e0ff6717 	ldw	r3,-612(fp)
 8021648:	e0bf6917 	ldw	r2,-604(fp)
 802164c:	1885c83a 	sub	r2,r3,r2
 8021650:	e0bf6c15 	stw	r2,-592(fp)
		tmp12 = tmp0 + tmp2;
 8021654:	e0ff6717 	ldw	r3,-612(fp)
 8021658:	e0bf6a17 	ldw	r2,-600(fp)
 802165c:	1885883a 	add	r2,r3,r2
 8021660:	e0bf6d15 	stw	r2,-588(fp)
		tmp13 = tmp0 - tmp2;
 8021664:	e0ff6717 	ldw	r3,-612(fp)
 8021668:	e0bf6a17 	ldw	r2,-600(fp)
 802166c:	1885c83a 	sub	r2,r3,r2
 8021670:	e0bf6e15 	stw	r2,-584(fp)

		z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8021674:	e0bf6217 	ldw	r2,-632(fp)
 8021678:	10800804 	addi	r2,r2,32
 802167c:	1080000b 	ldhu	r2,0(r2)
 8021680:	10ffffcc 	andi	r3,r2,65535
 8021684:	18e0001c 	xori	r3,r3,32768
 8021688:	18e00004 	addi	r3,r3,-32768
 802168c:	e0bf6317 	ldw	r2,-628(fp)
 8021690:	10801004 	addi	r2,r2,64
 8021694:	10800017 	ldw	r2,0(r2)
 8021698:	1809883a 	mov	r4,r3
 802169c:	100b883a 	mov	r5,r2
 80216a0:	802c2180 	call	802c218 <__mulsi3>
 80216a4:	e0bf6815 	stw	r2,-608(fp)
		z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80216a8:	e0bf6217 	ldw	r2,-632(fp)
 80216ac:	10801804 	addi	r2,r2,96
 80216b0:	1080000b 	ldhu	r2,0(r2)
 80216b4:	10ffffcc 	andi	r3,r2,65535
 80216b8:	18e0001c 	xori	r3,r3,32768
 80216bc:	18e00004 	addi	r3,r3,-32768
 80216c0:	e0bf6317 	ldw	r2,-628(fp)
 80216c4:	10803004 	addi	r2,r2,192
 80216c8:	10800017 	ldw	r2,0(r2)
 80216cc:	1809883a 	mov	r4,r3
 80216d0:	100b883a 	mov	r5,r2
 80216d4:	802c2180 	call	802c218 <__mulsi3>
 80216d8:	e0bf6f15 	stw	r2,-580(fp)
		z3 = z1 - z2;
 80216dc:	e0ff6817 	ldw	r3,-608(fp)
 80216e0:	e0bf6f17 	ldw	r2,-580(fp)
 80216e4:	1885c83a 	sub	r2,r3,r2
 80216e8:	e0bf7015 	stw	r2,-576(fp)
		z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 80216ec:	e13f7017 	ldw	r4,-576(fp)
 80216f0:	01423504 	movi	r5,2260
 80216f4:	802c2180 	call	802c218 <__mulsi3>
 80216f8:	e0bf7115 	stw	r2,-572(fp)
		z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 80216fc:	e13f7017 	ldw	r4,-576(fp)
 8021700:	014b18c4 	movi	r5,11363
 8021704:	802c2180 	call	802c218 <__mulsi3>
 8021708:	e0bf7015 	stw	r2,-576(fp)

		tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 802170c:	e13f6f17 	ldw	r4,-580(fp)
 8021710:	015480c4 	movi	r5,20995
 8021714:	802c2180 	call	802c218 <__mulsi3>
 8021718:	1007883a 	mov	r3,r2
 802171c:	e0bf7017 	ldw	r2,-576(fp)
 8021720:	1885883a 	add	r2,r3,r2
 8021724:	e0bf6715 	stw	r2,-612(fp)
		tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8021728:	e13f6817 	ldw	r4,-608(fp)
 802172c:	01473344 	movi	r5,7373
 8021730:	802c2180 	call	802c218 <__mulsi3>
 8021734:	1007883a 	mov	r3,r2
 8021738:	e0bf7117 	ldw	r2,-572(fp)
 802173c:	1885883a 	add	r2,r3,r2
 8021740:	e0bf6915 	stw	r2,-604(fp)
		tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8021744:	e13f6817 	ldw	r4,-608(fp)
 8021748:	017b3084 	movi	r5,-4926
 802174c:	802c2180 	call	802c218 <__mulsi3>
 8021750:	1007883a 	mov	r3,r2
 8021754:	e0bf7017 	ldw	r2,-576(fp)
 8021758:	1885883a 	add	r2,r3,r2
 802175c:	e0bf6a15 	stw	r2,-600(fp)
		tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8021760:	e13f6f17 	ldw	r4,-580(fp)
 8021764:	017bec04 	movi	r5,-4176
 8021768:	802c2180 	call	802c218 <__mulsi3>
 802176c:	1007883a 	mov	r3,r2
 8021770:	e0bf7117 	ldw	r2,-572(fp)
 8021774:	1885883a 	add	r2,r3,r2
 8021778:	e0bf7215 	stw	r2,-568(fp)

		tmp20 = tmp10 + tmp0;
 802177c:	e0ff6b17 	ldw	r3,-596(fp)
 8021780:	e0bf6717 	ldw	r2,-612(fp)
 8021784:	1885883a 	add	r2,r3,r2
 8021788:	e0bf7315 	stw	r2,-564(fp)
		tmp27 = tmp10 - tmp0;
 802178c:	e0ff6b17 	ldw	r3,-596(fp)
 8021790:	e0bf6717 	ldw	r2,-612(fp)
 8021794:	1885c83a 	sub	r2,r3,r2
 8021798:	e0bf7415 	stw	r2,-560(fp)
		tmp21 = tmp12 + tmp1;
 802179c:	e0ff6d17 	ldw	r3,-588(fp)
 80217a0:	e0bf6917 	ldw	r2,-604(fp)
 80217a4:	1885883a 	add	r2,r3,r2
 80217a8:	e0bf7515 	stw	r2,-556(fp)
		tmp26 = tmp12 - tmp1;
 80217ac:	e0ff6d17 	ldw	r3,-588(fp)
 80217b0:	e0bf6917 	ldw	r2,-604(fp)
 80217b4:	1885c83a 	sub	r2,r3,r2
 80217b8:	e0bf7615 	stw	r2,-552(fp)
		tmp22 = tmp13 + tmp2;
 80217bc:	e0ff6e17 	ldw	r3,-584(fp)
 80217c0:	e0bf6a17 	ldw	r2,-600(fp)
 80217c4:	1885883a 	add	r2,r3,r2
 80217c8:	e0bf7715 	stw	r2,-548(fp)
		tmp25 = tmp13 - tmp2;
 80217cc:	e0ff6e17 	ldw	r3,-584(fp)
 80217d0:	e0bf6a17 	ldw	r2,-600(fp)
 80217d4:	1885c83a 	sub	r2,r3,r2
 80217d8:	e0bf7815 	stw	r2,-544(fp)
		tmp23 = tmp11 + tmp3;
 80217dc:	e0ff6c17 	ldw	r3,-592(fp)
 80217e0:	e0bf7217 	ldw	r2,-568(fp)
 80217e4:	1885883a 	add	r2,r3,r2
 80217e8:	e0bf7915 	stw	r2,-540(fp)
		tmp24 = tmp11 - tmp3;
 80217ec:	e0ff6c17 	ldw	r3,-592(fp)
 80217f0:	e0bf7217 	ldw	r2,-568(fp)
 80217f4:	1885c83a 	sub	r2,r3,r2
 80217f8:	e0bf7a15 	stw	r2,-536(fp)

		/* Odd part */

		z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80217fc:	e0bf6217 	ldw	r2,-632(fp)
 8021800:	10800404 	addi	r2,r2,16
 8021804:	1080000b 	ldhu	r2,0(r2)
 8021808:	10ffffcc 	andi	r3,r2,65535
 802180c:	18e0001c 	xori	r3,r3,32768
 8021810:	18e00004 	addi	r3,r3,-32768
 8021814:	e0bf6317 	ldw	r2,-628(fp)
 8021818:	10800804 	addi	r2,r2,32
 802181c:	10800017 	ldw	r2,0(r2)
 8021820:	1809883a 	mov	r4,r3
 8021824:	100b883a 	mov	r5,r2
 8021828:	802c2180 	call	802c218 <__mulsi3>
 802182c:	e0bf6815 	stw	r2,-608(fp)
		z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8021830:	e0bf6217 	ldw	r2,-632(fp)
 8021834:	10800c04 	addi	r2,r2,48
 8021838:	1080000b 	ldhu	r2,0(r2)
 802183c:	10ffffcc 	andi	r3,r2,65535
 8021840:	18e0001c 	xori	r3,r3,32768
 8021844:	18e00004 	addi	r3,r3,-32768
 8021848:	e0bf6317 	ldw	r2,-628(fp)
 802184c:	10801804 	addi	r2,r2,96
 8021850:	10800017 	ldw	r2,0(r2)
 8021854:	1809883a 	mov	r4,r3
 8021858:	100b883a 	mov	r5,r2
 802185c:	802c2180 	call	802c218 <__mulsi3>
 8021860:	e0bf6f15 	stw	r2,-580(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8021864:	e0bf6217 	ldw	r2,-632(fp)
 8021868:	10801404 	addi	r2,r2,80
 802186c:	1080000b 	ldhu	r2,0(r2)
 8021870:	10ffffcc 	andi	r3,r2,65535
 8021874:	18e0001c 	xori	r3,r3,32768
 8021878:	18e00004 	addi	r3,r3,-32768
 802187c:	e0bf6317 	ldw	r2,-628(fp)
 8021880:	10802804 	addi	r2,r2,160
 8021884:	10800017 	ldw	r2,0(r2)
 8021888:	1809883a 	mov	r4,r3
 802188c:	100b883a 	mov	r5,r2
 8021890:	802c2180 	call	802c218 <__mulsi3>
 8021894:	e0bf7015 	stw	r2,-576(fp)
		z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8021898:	e0bf6217 	ldw	r2,-632(fp)
 802189c:	10801c04 	addi	r2,r2,112
 80218a0:	1080000b 	ldhu	r2,0(r2)
 80218a4:	10ffffcc 	andi	r3,r2,65535
 80218a8:	18e0001c 	xori	r3,r3,32768
 80218ac:	18e00004 	addi	r3,r3,-32768
 80218b0:	e0bf6317 	ldw	r2,-628(fp)
 80218b4:	10803804 	addi	r2,r2,224
 80218b8:	10800017 	ldw	r2,0(r2)
 80218bc:	1809883a 	mov	r4,r3
 80218c0:	100b883a 	mov	r5,r2
 80218c4:	802c2180 	call	802c218 <__mulsi3>
 80218c8:	e0bf7115 	stw	r2,-572(fp)

		tmp11 = z1 + z3;
 80218cc:	e0ff6817 	ldw	r3,-608(fp)
 80218d0:	e0bf7017 	ldw	r2,-576(fp)
 80218d4:	1885883a 	add	r2,r3,r2
 80218d8:	e0bf6c15 	stw	r2,-592(fp)

		tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 80218dc:	e0ff6817 	ldw	r3,-608(fp)
 80218e0:	e0bf6f17 	ldw	r2,-580(fp)
 80218e4:	1885883a 	add	r2,r3,r2
 80218e8:	1009883a 	mov	r4,r2
 80218ec:	014ad384 	movi	r5,11086
 80218f0:	802c2180 	call	802c218 <__mulsi3>
 80218f4:	e0bf6915 	stw	r2,-604(fp)
		tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 80218f8:	e13f6c17 	ldw	r4,-592(fp)
 80218fc:	0149fa44 	movi	r5,10217
 8021900:	802c2180 	call	802c218 <__mulsi3>
 8021904:	e0bf6a15 	stw	r2,-600(fp)
		tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8021908:	e0ff6817 	ldw	r3,-608(fp)
 802190c:	e0bf7117 	ldw	r2,-572(fp)
 8021910:	1885883a 	add	r2,r3,r2
 8021914:	1009883a 	mov	r4,r2
 8021918:	0148bf04 	movi	r5,8956
 802191c:	802c2180 	call	802c218 <__mulsi3>
 8021920:	e0bf7215 	stw	r2,-568(fp)
		tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8021924:	e0ff6817 	ldw	r3,-608(fp)
 8021928:	e0bf7117 	ldw	r2,-572(fp)
 802192c:	1885c83a 	sub	r2,r3,r2
 8021930:	1009883a 	mov	r4,r2
 8021934:	01472d84 	movi	r5,7350
 8021938:	802c2180 	call	802c218 <__mulsi3>
 802193c:	e0bf6b15 	stw	r2,-596(fp)
		tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8021940:	e13f6c17 	ldw	r4,-592(fp)
 8021944:	01455544 	movi	r5,5461
 8021948:	802c2180 	call	802c218 <__mulsi3>
 802194c:	e0bf6c15 	stw	r2,-592(fp)
		tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8021950:	e0ff6817 	ldw	r3,-608(fp)
 8021954:	e0bf6f17 	ldw	r2,-580(fp)
 8021958:	1885c83a 	sub	r2,r3,r2
 802195c:	1009883a 	mov	r4,r2
 8021960:	014348c4 	movi	r5,3363
 8021964:	802c2180 	call	802c218 <__mulsi3>
 8021968:	e0bf6d15 	stw	r2,-588(fp)
		tmp0  = tmp1 + tmp2 + tmp3 -
 802196c:	e0ff6917 	ldw	r3,-604(fp)
 8021970:	e0bf6a17 	ldw	r2,-600(fp)
 8021974:	1887883a 	add	r3,r3,r2
 8021978:	e0bf7217 	ldw	r2,-568(fp)
 802197c:	18a1883a 	add	r16,r3,r2
			MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
 8021980:	e13f6817 	ldw	r4,-608(fp)
 8021984:	016db584 	movi	r5,-18730
 8021988:	802c2180 	call	802c218 <__mulsi3>
		tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
		tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
		tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
		tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
		tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
		tmp0  = tmp1 + tmp2 + tmp3 -
 802198c:	8085883a 	add	r2,r16,r2
 8021990:	e0bf6715 	stw	r2,-612(fp)
			MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
		tmp13 = tmp10 + tmp11 + tmp12 -
 8021994:	e0ff6b17 	ldw	r3,-596(fp)
 8021998:	e0bf6c17 	ldw	r2,-592(fp)
 802199c:	1887883a 	add	r3,r3,r2
 80219a0:	e0bf6d17 	ldw	r2,-588(fp)
 80219a4:	18a1883a 	add	r16,r3,r2
			MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
 80219a8:	e13f6817 	ldw	r4,-608(fp)
 80219ac:	01715084 	movi	r5,-15038
 80219b0:	802c2180 	call	802c218 <__mulsi3>
		tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
		tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
		tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
		tmp0  = tmp1 + tmp2 + tmp3 -
			MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
		tmp13 = tmp10 + tmp11 + tmp12 -
 80219b4:	8085883a 	add	r2,r16,r2
 80219b8:	e0bf6e15 	stw	r2,-584(fp)
			MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
		z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 80219bc:	e0ff6f17 	ldw	r3,-580(fp)
 80219c0:	e0bf7017 	ldw	r2,-576(fp)
 80219c4:	1885883a 	add	r2,r3,r2
 80219c8:	1009883a 	mov	r4,r2
 80219cc:	01411c04 	movi	r5,1136
 80219d0:	802c2180 	call	802c218 <__mulsi3>
 80219d4:	e0bf6815 	stw	r2,-608(fp)
		tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 80219d8:	e13f6f17 	ldw	r4,-580(fp)
 80219dc:	01409344 	movi	r5,589
 80219e0:	802c2180 	call	802c218 <__mulsi3>
 80219e4:	1007883a 	mov	r3,r2
 80219e8:	e0bf6817 	ldw	r2,-608(fp)
 80219ec:	1885883a 	add	r2,r3,r2
 80219f0:	e0ff6917 	ldw	r3,-604(fp)
 80219f4:	1885883a 	add	r2,r3,r2
 80219f8:	e0bf6915 	stw	r2,-604(fp)
		tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 80219fc:	e13f7017 	ldw	r4,-576(fp)
 8021a00:	0176fe84 	movi	r5,-9222
 8021a04:	802c2180 	call	802c218 <__mulsi3>
 8021a08:	1007883a 	mov	r3,r2
 8021a0c:	e0bf6817 	ldw	r2,-608(fp)
 8021a10:	1885883a 	add	r2,r3,r2
 8021a14:	e0ff6a17 	ldw	r3,-600(fp)
 8021a18:	1885883a 	add	r2,r3,r2
 8021a1c:	e0bf6a15 	stw	r2,-600(fp)
		z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8021a20:	e0ff7017 	ldw	r3,-576(fp)
 8021a24:	e0bf6f17 	ldw	r2,-580(fp)
 8021a28:	1885c83a 	sub	r2,r3,r2
 8021a2c:	1009883a 	mov	r4,r2
 8021a30:	014b4244 	movi	r5,11529
 8021a34:	802c2180 	call	802c218 <__mulsi3>
 8021a38:	e0bf6815 	stw	r2,-608(fp)
		tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8021a3c:	e13f7017 	ldw	r4,-576(fp)
 8021a40:	0179de84 	movi	r5,-6278
 8021a44:	802c2180 	call	802c218 <__mulsi3>
 8021a48:	1007883a 	mov	r3,r2
 8021a4c:	e0bf6817 	ldw	r2,-608(fp)
 8021a50:	1885883a 	add	r2,r3,r2
 8021a54:	e0ff6c17 	ldw	r3,-592(fp)
 8021a58:	1885883a 	add	r2,r3,r2
 8021a5c:	e0bf6c15 	stw	r2,-592(fp)
		tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8021a60:	e13f6f17 	ldw	r4,-580(fp)
 8021a64:	014fc684 	movi	r5,16154
 8021a68:	802c2180 	call	802c218 <__mulsi3>
 8021a6c:	1007883a 	mov	r3,r2
 8021a70:	e0bf6817 	ldw	r2,-608(fp)
 8021a74:	1885883a 	add	r2,r3,r2
 8021a78:	e0ff6d17 	ldw	r3,-588(fp)
 8021a7c:	1885883a 	add	r2,r3,r2
 8021a80:	e0bf6d15 	stw	r2,-588(fp)
		z2    += z4;
 8021a84:	e0ff6f17 	ldw	r3,-580(fp)
 8021a88:	e0bf7117 	ldw	r2,-572(fp)
 8021a8c:	1885883a 	add	r2,r3,r2
 8021a90:	e0bf6f15 	stw	r2,-580(fp)
		z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8021a94:	e13f6f17 	ldw	r4,-580(fp)
 8021a98:	017aaac4 	movi	r5,-5461
 8021a9c:	802c2180 	call	802c218 <__mulsi3>
 8021aa0:	e0bf6815 	stw	r2,-608(fp)
		tmp1  += z1;
 8021aa4:	e0ff6917 	ldw	r3,-604(fp)
 8021aa8:	e0bf6817 	ldw	r2,-608(fp)
 8021aac:	1885883a 	add	r2,r3,r2
 8021ab0:	e0bf6915 	stw	r2,-604(fp)
		tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8021ab4:	e13f7117 	ldw	r4,-572(fp)
 8021ab8:	01488604 	movi	r5,8728
 8021abc:	802c2180 	call	802c218 <__mulsi3>
 8021ac0:	1007883a 	mov	r3,r2
 8021ac4:	e0bf6817 	ldw	r2,-608(fp)
 8021ac8:	1885883a 	add	r2,r3,r2
 8021acc:	e0ff7217 	ldw	r3,-568(fp)
 8021ad0:	1885883a 	add	r2,r3,r2
 8021ad4:	e0bf7215 	stw	r2,-568(fp)
		z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 8021ad8:	e13f6f17 	ldw	r4,-580(fp)
 8021adc:	017605c4 	movi	r5,-10217
 8021ae0:	802c2180 	call	802c218 <__mulsi3>
 8021ae4:	e0bf6f15 	stw	r2,-580(fp)
		tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8021ae8:	e13f7117 	ldw	r4,-572(fp)
 8021aec:	01592144 	movi	r5,25733
 8021af0:	802c2180 	call	802c218 <__mulsi3>
 8021af4:	1007883a 	mov	r3,r2
 8021af8:	e0bf6f17 	ldw	r2,-580(fp)
 8021afc:	1885883a 	add	r2,r3,r2
 8021b00:	e0ff6b17 	ldw	r3,-596(fp)
 8021b04:	1885883a 	add	r2,r3,r2
 8021b08:	e0bf6b15 	stw	r2,-596(fp)
		tmp12 += z2;
 8021b0c:	e0ff6d17 	ldw	r3,-588(fp)
 8021b10:	e0bf6f17 	ldw	r2,-580(fp)
 8021b14:	1885883a 	add	r2,r3,r2
 8021b18:	e0bf6d15 	stw	r2,-588(fp)
		z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8021b1c:	e0ff7017 	ldw	r3,-576(fp)
 8021b20:	e0bf7117 	ldw	r2,-572(fp)
 8021b24:	1885883a 	add	r2,r3,r2
 8021b28:	1009883a 	mov	r4,r2
 8021b2c:	01752c84 	movi	r5,-11086
 8021b30:	802c2180 	call	802c218 <__mulsi3>
 8021b34:	e0bf6f15 	stw	r2,-580(fp)
		tmp2  += z2;
 8021b38:	e0ff6a17 	ldw	r3,-600(fp)
 8021b3c:	e0bf6f17 	ldw	r2,-580(fp)
 8021b40:	1885883a 	add	r2,r3,r2
 8021b44:	e0bf6a15 	stw	r2,-600(fp)
		tmp3  += z2;
 8021b48:	e0ff7217 	ldw	r3,-568(fp)
 8021b4c:	e0bf6f17 	ldw	r2,-580(fp)
 8021b50:	1885883a 	add	r2,r3,r2
 8021b54:	e0bf7215 	stw	r2,-568(fp)
		z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8021b58:	e0ff7117 	ldw	r3,-572(fp)
 8021b5c:	e0bf7017 	ldw	r2,-576(fp)
 8021b60:	1885c83a 	sub	r2,r3,r2
 8021b64:	1009883a 	mov	r4,r2
 8021b68:	014348c4 	movi	r5,3363
 8021b6c:	802c2180 	call	802c218 <__mulsi3>
 8021b70:	e0bf6f15 	stw	r2,-580(fp)
		tmp10 += z2;
 8021b74:	e0ff6b17 	ldw	r3,-596(fp)
 8021b78:	e0bf6f17 	ldw	r2,-580(fp)
 8021b7c:	1885883a 	add	r2,r3,r2
 8021b80:	e0bf6b15 	stw	r2,-596(fp)
		tmp11 += z2;
 8021b84:	e0ff6c17 	ldw	r3,-592(fp)
 8021b88:	e0bf6f17 	ldw	r2,-580(fp)
 8021b8c:	1885883a 	add	r2,r3,r2
 8021b90:	e0bf6c15 	stw	r2,-592(fp)

		/* Final output stage */

		wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8021b94:	e0ff7317 	ldw	r3,-564(fp)
 8021b98:	e0bf6717 	ldw	r2,-612(fp)
 8021b9c:	1885883a 	add	r2,r3,r2
 8021ba0:	1007d2fa 	srai	r3,r2,11
 8021ba4:	e0bf6417 	ldw	r2,-624(fp)
 8021ba8:	10c00015 	stw	r3,0(r2)
		wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 8021bac:	e0bf6417 	ldw	r2,-624(fp)
 8021bb0:	10807804 	addi	r2,r2,480
 8021bb4:	e13f7317 	ldw	r4,-564(fp)
 8021bb8:	e0ff6717 	ldw	r3,-612(fp)
 8021bbc:	20c7c83a 	sub	r3,r4,r3
 8021bc0:	1807d2fa 	srai	r3,r3,11
 8021bc4:	10c00015 	stw	r3,0(r2)
		wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 8021bc8:	e0bf6417 	ldw	r2,-624(fp)
 8021bcc:	10800804 	addi	r2,r2,32
 8021bd0:	e13f7517 	ldw	r4,-556(fp)
 8021bd4:	e0ff6917 	ldw	r3,-604(fp)
 8021bd8:	20c7883a 	add	r3,r4,r3
 8021bdc:	1807d2fa 	srai	r3,r3,11
 8021be0:	10c00015 	stw	r3,0(r2)
		wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 8021be4:	e0bf6417 	ldw	r2,-624(fp)
 8021be8:	10807004 	addi	r2,r2,448
 8021bec:	e13f7517 	ldw	r4,-556(fp)
 8021bf0:	e0ff6917 	ldw	r3,-604(fp)
 8021bf4:	20c7c83a 	sub	r3,r4,r3
 8021bf8:	1807d2fa 	srai	r3,r3,11
 8021bfc:	10c00015 	stw	r3,0(r2)
		wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 8021c00:	e0bf6417 	ldw	r2,-624(fp)
 8021c04:	10801004 	addi	r2,r2,64
 8021c08:	e13f7717 	ldw	r4,-548(fp)
 8021c0c:	e0ff6a17 	ldw	r3,-600(fp)
 8021c10:	20c7883a 	add	r3,r4,r3
 8021c14:	1807d2fa 	srai	r3,r3,11
 8021c18:	10c00015 	stw	r3,0(r2)
		wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 8021c1c:	e0bf6417 	ldw	r2,-624(fp)
 8021c20:	10806804 	addi	r2,r2,416
 8021c24:	e13f7717 	ldw	r4,-548(fp)
 8021c28:	e0ff6a17 	ldw	r3,-600(fp)
 8021c2c:	20c7c83a 	sub	r3,r4,r3
 8021c30:	1807d2fa 	srai	r3,r3,11
 8021c34:	10c00015 	stw	r3,0(r2)
		wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 8021c38:	e0bf6417 	ldw	r2,-624(fp)
 8021c3c:	10801804 	addi	r2,r2,96
 8021c40:	e13f7917 	ldw	r4,-540(fp)
 8021c44:	e0ff7217 	ldw	r3,-568(fp)
 8021c48:	20c7883a 	add	r3,r4,r3
 8021c4c:	1807d2fa 	srai	r3,r3,11
 8021c50:	10c00015 	stw	r3,0(r2)
		wsptr[8*12] = (int) RIGHT_SHIFT(tmp23 - tmp3,  CONST_BITS-PASS1_BITS);
 8021c54:	e0bf6417 	ldw	r2,-624(fp)
 8021c58:	10806004 	addi	r2,r2,384
 8021c5c:	e13f7917 	ldw	r4,-540(fp)
 8021c60:	e0ff7217 	ldw	r3,-568(fp)
 8021c64:	20c7c83a 	sub	r3,r4,r3
 8021c68:	1807d2fa 	srai	r3,r3,11
 8021c6c:	10c00015 	stw	r3,0(r2)
		wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp10, CONST_BITS-PASS1_BITS);
 8021c70:	e0bf6417 	ldw	r2,-624(fp)
 8021c74:	10802004 	addi	r2,r2,128
 8021c78:	e13f7a17 	ldw	r4,-536(fp)
 8021c7c:	e0ff6b17 	ldw	r3,-596(fp)
 8021c80:	20c7883a 	add	r3,r4,r3
 8021c84:	1807d2fa 	srai	r3,r3,11
 8021c88:	10c00015 	stw	r3,0(r2)
		wsptr[8*11] = (int) RIGHT_SHIFT(tmp24 - tmp10, CONST_BITS-PASS1_BITS);
 8021c8c:	e0bf6417 	ldw	r2,-624(fp)
 8021c90:	10805804 	addi	r2,r2,352
 8021c94:	e13f7a17 	ldw	r4,-536(fp)
 8021c98:	e0ff6b17 	ldw	r3,-596(fp)
 8021c9c:	20c7c83a 	sub	r3,r4,r3
 8021ca0:	1807d2fa 	srai	r3,r3,11
 8021ca4:	10c00015 	stw	r3,0(r2)
		wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp11, CONST_BITS-PASS1_BITS);
 8021ca8:	e0bf6417 	ldw	r2,-624(fp)
 8021cac:	10802804 	addi	r2,r2,160
 8021cb0:	e13f7817 	ldw	r4,-544(fp)
 8021cb4:	e0ff6c17 	ldw	r3,-592(fp)
 8021cb8:	20c7883a 	add	r3,r4,r3
 8021cbc:	1807d2fa 	srai	r3,r3,11
 8021cc0:	10c00015 	stw	r3,0(r2)
		wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 8021cc4:	e0bf6417 	ldw	r2,-624(fp)
 8021cc8:	10805004 	addi	r2,r2,320
 8021ccc:	e13f7817 	ldw	r4,-544(fp)
 8021cd0:	e0ff6c17 	ldw	r3,-592(fp)
 8021cd4:	20c7c83a 	sub	r3,r4,r3
 8021cd8:	1807d2fa 	srai	r3,r3,11
 8021cdc:	10c00015 	stw	r3,0(r2)
		wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 8021ce0:	e0bf6417 	ldw	r2,-624(fp)
 8021ce4:	10803004 	addi	r2,r2,192
 8021ce8:	e13f7617 	ldw	r4,-552(fp)
 8021cec:	e0ff6d17 	ldw	r3,-588(fp)
 8021cf0:	20c7883a 	add	r3,r4,r3
 8021cf4:	1807d2fa 	srai	r3,r3,11
 8021cf8:	10c00015 	stw	r3,0(r2)
		wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 8021cfc:	e0bf6417 	ldw	r2,-624(fp)
 8021d00:	10804804 	addi	r2,r2,288
 8021d04:	e13f7617 	ldw	r4,-552(fp)
 8021d08:	e0ff6d17 	ldw	r3,-588(fp)
 8021d0c:	20c7c83a 	sub	r3,r4,r3
 8021d10:	1807d2fa 	srai	r3,r3,11
 8021d14:	10c00015 	stw	r3,0(r2)
		wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 8021d18:	e0bf6417 	ldw	r2,-624(fp)
 8021d1c:	10803804 	addi	r2,r2,224
 8021d20:	e13f7417 	ldw	r4,-560(fp)
 8021d24:	e0ff6e17 	ldw	r3,-584(fp)
 8021d28:	20c7883a 	add	r3,r4,r3
 8021d2c:	1807d2fa 	srai	r3,r3,11
 8021d30:	10c00015 	stw	r3,0(r2)
		wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 8021d34:	e0bf6417 	ldw	r2,-624(fp)
 8021d38:	10804004 	addi	r2,r2,256
 8021d3c:	e13f7417 	ldw	r4,-560(fp)
 8021d40:	e0ff6e17 	ldw	r3,-584(fp)
 8021d44:	20c7c83a 	sub	r3,r4,r3
 8021d48:	1807d2fa 	srai	r3,r3,11
 8021d4c:	10c00015 	stw	r3,0(r2)
		* 16-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/32).
		*/
		inptr = coef_block;
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
	wsptr = workspace;
	for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8021d50:	e0bf6517 	ldw	r2,-620(fp)
 8021d54:	10800044 	addi	r2,r2,1
 8021d58:	e0bf6515 	stw	r2,-620(fp)
 8021d5c:	e0bf6217 	ldw	r2,-632(fp)
 8021d60:	10800084 	addi	r2,r2,2
 8021d64:	e0bf6215 	stw	r2,-632(fp)
 8021d68:	e0bf6317 	ldw	r2,-628(fp)
 8021d6c:	10800104 	addi	r2,r2,4
 8021d70:	e0bf6315 	stw	r2,-628(fp)
 8021d74:	e0bf6417 	ldw	r2,-624(fp)
 8021d78:	10800104 	addi	r2,r2,4
 8021d7c:	e0bf6415 	stw	r2,-624(fp)
 8021d80:	e0bf6517 	ldw	r2,-620(fp)
 8021d84:	10800210 	cmplti	r2,r2,8
 8021d88:	103e041e 	bne	r2,zero,802159c <jpeg_idct_8x16+0x58>

	/* Pass 2: process rows from work array, store into output array. */
	/* Note that we must descale the results by a factor of 8 == 2**3, */
	/* and also undo the PASS1_BITS scaling. */

	wsptr = workspace;
 8021d8c:	e0bf7c04 	addi	r2,fp,-528
 8021d90:	e0bf6415 	stw	r2,-624(fp)
	for (ctr = 0; ctr < 16; ctr++) {
 8021d94:	e03f6515 	stw	zero,-620(fp)
 8021d98:	00010a06 	br	80221c4 <jpeg_idct_8x16+0xc80>
		outptr = output_buf[ctr] + output_col;
 8021d9c:	e0bf6517 	ldw	r2,-620(fp)
 8021da0:	1085883a 	add	r2,r2,r2
 8021da4:	1085883a 	add	r2,r2,r2
 8021da8:	e0ffff17 	ldw	r3,-4(fp)
 8021dac:	1885883a 	add	r2,r3,r2
 8021db0:	10c00017 	ldw	r3,0(r2)
 8021db4:	e0800317 	ldw	r2,12(fp)
 8021db8:	1885883a 	add	r2,r3,r2
 8021dbc:	e0bf7b15 	stw	r2,-532(fp)

		/* Even part: reverse the even part of the forward DCT. */
		/* The rotator is sqrt(2)*c(-6). */

		z2 = (INT32) wsptr[2];
 8021dc0:	e0bf6417 	ldw	r2,-624(fp)
 8021dc4:	10800204 	addi	r2,r2,8
 8021dc8:	10800017 	ldw	r2,0(r2)
 8021dcc:	e0bf6f15 	stw	r2,-580(fp)
		z3 = (INT32) wsptr[6];
 8021dd0:	e0bf6417 	ldw	r2,-624(fp)
 8021dd4:	10800604 	addi	r2,r2,24
 8021dd8:	10800017 	ldw	r2,0(r2)
 8021ddc:	e0bf7015 	stw	r2,-576(fp)

		z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8021de0:	e0ff6f17 	ldw	r3,-580(fp)
 8021de4:	e0bf7017 	ldw	r2,-576(fp)
 8021de8:	1885883a 	add	r2,r3,r2
 8021dec:	1009883a 	mov	r4,r2
 8021df0:	01445444 	movi	r5,4433
 8021df4:	802c2180 	call	802c218 <__mulsi3>
 8021df8:	e0bf6815 	stw	r2,-608(fp)
		tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8021dfc:	e13f6f17 	ldw	r4,-580(fp)
 8021e00:	01461f84 	movi	r5,6270
 8021e04:	802c2180 	call	802c218 <__mulsi3>
 8021e08:	1007883a 	mov	r3,r2
 8021e0c:	e0bf6817 	ldw	r2,-608(fp)
 8021e10:	1885883a 	add	r2,r3,r2
 8021e14:	e0bf6a15 	stw	r2,-600(fp)
		tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8021e18:	e13f7017 	ldw	r4,-576(fp)
 8021e1c:	017137c4 	movi	r5,-15137
 8021e20:	802c2180 	call	802c218 <__mulsi3>
 8021e24:	1007883a 	mov	r3,r2
 8021e28:	e0bf6817 	ldw	r2,-608(fp)
 8021e2c:	1885883a 	add	r2,r3,r2
 8021e30:	e0bf7215 	stw	r2,-568(fp)

		/* Add fudge factor here for final descale. */
		z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8021e34:	e0bf6417 	ldw	r2,-624(fp)
 8021e38:	10800017 	ldw	r2,0(r2)
 8021e3c:	10800404 	addi	r2,r2,16
 8021e40:	e0bf6f15 	stw	r2,-580(fp)
		z3 = (INT32) wsptr[4];
 8021e44:	e0bf6417 	ldw	r2,-624(fp)
 8021e48:	10800404 	addi	r2,r2,16
 8021e4c:	10800017 	ldw	r2,0(r2)
 8021e50:	e0bf7015 	stw	r2,-576(fp)

		tmp0 = (z2 + z3) << CONST_BITS;
 8021e54:	e0ff6f17 	ldw	r3,-580(fp)
 8021e58:	e0bf7017 	ldw	r2,-576(fp)
 8021e5c:	1885883a 	add	r2,r3,r2
 8021e60:	1004937a 	slli	r2,r2,13
 8021e64:	e0bf6715 	stw	r2,-612(fp)
		tmp1 = (z2 - z3) << CONST_BITS;
 8021e68:	e0ff6f17 	ldw	r3,-580(fp)
 8021e6c:	e0bf7017 	ldw	r2,-576(fp)
 8021e70:	1885c83a 	sub	r2,r3,r2
 8021e74:	1004937a 	slli	r2,r2,13
 8021e78:	e0bf6915 	stw	r2,-604(fp)

		tmp10 = tmp0 + tmp2;
 8021e7c:	e0ff6717 	ldw	r3,-612(fp)
 8021e80:	e0bf6a17 	ldw	r2,-600(fp)
 8021e84:	1885883a 	add	r2,r3,r2
 8021e88:	e0bf6b15 	stw	r2,-596(fp)
		tmp13 = tmp0 - tmp2;
 8021e8c:	e0ff6717 	ldw	r3,-612(fp)
 8021e90:	e0bf6a17 	ldw	r2,-600(fp)
 8021e94:	1885c83a 	sub	r2,r3,r2
 8021e98:	e0bf6e15 	stw	r2,-584(fp)
		tmp11 = tmp1 + tmp3;
 8021e9c:	e0ff6917 	ldw	r3,-604(fp)
 8021ea0:	e0bf7217 	ldw	r2,-568(fp)
 8021ea4:	1885883a 	add	r2,r3,r2
 8021ea8:	e0bf6c15 	stw	r2,-592(fp)
		tmp12 = tmp1 - tmp3;
 8021eac:	e0ff6917 	ldw	r3,-604(fp)
 8021eb0:	e0bf7217 	ldw	r2,-568(fp)
 8021eb4:	1885c83a 	sub	r2,r3,r2
 8021eb8:	e0bf6d15 	stw	r2,-588(fp)

		/* Odd part per figure 8; the matrix is unitary and hence its
		* transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
		*/

		tmp0 = (INT32) wsptr[7];
 8021ebc:	e0bf6417 	ldw	r2,-624(fp)
 8021ec0:	10800704 	addi	r2,r2,28
 8021ec4:	10800017 	ldw	r2,0(r2)
 8021ec8:	e0bf6715 	stw	r2,-612(fp)
		tmp1 = (INT32) wsptr[5];
 8021ecc:	e0bf6417 	ldw	r2,-624(fp)
 8021ed0:	10800504 	addi	r2,r2,20
 8021ed4:	10800017 	ldw	r2,0(r2)
 8021ed8:	e0bf6915 	stw	r2,-604(fp)
		tmp2 = (INT32) wsptr[3];
 8021edc:	e0bf6417 	ldw	r2,-624(fp)
 8021ee0:	10800304 	addi	r2,r2,12
 8021ee4:	10800017 	ldw	r2,0(r2)
 8021ee8:	e0bf6a15 	stw	r2,-600(fp)
		tmp3 = (INT32) wsptr[1];
 8021eec:	e0bf6417 	ldw	r2,-624(fp)
 8021ef0:	10800104 	addi	r2,r2,4
 8021ef4:	10800017 	ldw	r2,0(r2)
 8021ef8:	e0bf7215 	stw	r2,-568(fp)

		z2 = tmp0 + tmp2;
 8021efc:	e0ff6717 	ldw	r3,-612(fp)
 8021f00:	e0bf6a17 	ldw	r2,-600(fp)
 8021f04:	1885883a 	add	r2,r3,r2
 8021f08:	e0bf6f15 	stw	r2,-580(fp)
		z3 = tmp1 + tmp3;
 8021f0c:	e0ff6917 	ldw	r3,-604(fp)
 8021f10:	e0bf7217 	ldw	r2,-568(fp)
 8021f14:	1885883a 	add	r2,r3,r2
 8021f18:	e0bf7015 	stw	r2,-576(fp)

		z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8021f1c:	e0ff6f17 	ldw	r3,-580(fp)
 8021f20:	e0bf7017 	ldw	r2,-576(fp)
 8021f24:	1885883a 	add	r2,r3,r2
 8021f28:	1009883a 	mov	r4,r2
 8021f2c:	01496844 	movi	r5,9633
 8021f30:	802c2180 	call	802c218 <__mulsi3>
 8021f34:	e0bf6815 	stw	r2,-608(fp)
		z2 = MULTIPLY(z2, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
 8021f38:	e13f6f17 	ldw	r4,-580(fp)
 8021f3c:	01704ec4 	movi	r5,-16069
 8021f40:	802c2180 	call	802c218 <__mulsi3>
 8021f44:	e0bf6f15 	stw	r2,-580(fp)
		z3 = MULTIPLY(z3, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
 8021f48:	e13f7017 	ldw	r4,-576(fp)
 8021f4c:	017ce104 	movi	r5,-3196
 8021f50:	802c2180 	call	802c218 <__mulsi3>
 8021f54:	e0bf7015 	stw	r2,-576(fp)
		z2 += z1;
 8021f58:	e0ff6f17 	ldw	r3,-580(fp)
 8021f5c:	e0bf6817 	ldw	r2,-608(fp)
 8021f60:	1885883a 	add	r2,r3,r2
 8021f64:	e0bf6f15 	stw	r2,-580(fp)
		z3 += z1;
 8021f68:	e0ff7017 	ldw	r3,-576(fp)
 8021f6c:	e0bf6817 	ldw	r2,-608(fp)
 8021f70:	1885883a 	add	r2,r3,r2
 8021f74:	e0bf7015 	stw	r2,-576(fp)

		z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8021f78:	e0ff6717 	ldw	r3,-612(fp)
 8021f7c:	e0bf7217 	ldw	r2,-568(fp)
 8021f80:	1885883a 	add	r2,r3,r2
 8021f84:	1009883a 	mov	r4,r2
 8021f88:	0178ccc4 	movi	r5,-7373
 8021f8c:	802c2180 	call	802c218 <__mulsi3>
 8021f90:	e0bf6815 	stw	r2,-608(fp)
		tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
 8021f94:	e13f6717 	ldw	r4,-612(fp)
 8021f98:	01426384 	movi	r5,2446
 8021f9c:	802c2180 	call	802c218 <__mulsi3>
 8021fa0:	e0bf6715 	stw	r2,-612(fp)
		tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
 8021fa4:	e13f7217 	ldw	r4,-568(fp)
 8021fa8:	014c02c4 	movi	r5,12299
 8021fac:	802c2180 	call	802c218 <__mulsi3>
 8021fb0:	e0bf7215 	stw	r2,-568(fp)
		tmp0 += z1 + z2;
 8021fb4:	e0ff6817 	ldw	r3,-608(fp)
 8021fb8:	e0bf6f17 	ldw	r2,-580(fp)
 8021fbc:	1885883a 	add	r2,r3,r2
 8021fc0:	e0ff6717 	ldw	r3,-612(fp)
 8021fc4:	1885883a 	add	r2,r3,r2
 8021fc8:	e0bf6715 	stw	r2,-612(fp)
		tmp3 += z1 + z3;
 8021fcc:	e0ff6817 	ldw	r3,-608(fp)
 8021fd0:	e0bf7017 	ldw	r2,-576(fp)
 8021fd4:	1885883a 	add	r2,r3,r2
 8021fd8:	e0ff7217 	ldw	r3,-568(fp)
 8021fdc:	1885883a 	add	r2,r3,r2
 8021fe0:	e0bf7215 	stw	r2,-568(fp)

		z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8021fe4:	e0ff6917 	ldw	r3,-604(fp)
 8021fe8:	e0bf6a17 	ldw	r2,-600(fp)
 8021fec:	1885883a 	add	r2,r3,r2
 8021ff0:	1009883a 	mov	r4,r2
 8021ff4:	016b7f44 	movi	r5,-20995
 8021ff8:	802c2180 	call	802c218 <__mulsi3>
 8021ffc:	e0bf6815 	stw	r2,-608(fp)
		tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
 8022000:	e13f6917 	ldw	r4,-604(fp)
 8022004:	01506cc4 	movi	r5,16819
 8022008:	802c2180 	call	802c218 <__mulsi3>
 802200c:	e0bf6915 	stw	r2,-604(fp)
		tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
 8022010:	e13f6a17 	ldw	r4,-600(fp)
 8022014:	01589504 	movi	r5,25172
 8022018:	802c2180 	call	802c218 <__mulsi3>
 802201c:	e0bf6a15 	stw	r2,-600(fp)
		tmp1 += z1 + z3;
 8022020:	e0ff6817 	ldw	r3,-608(fp)
 8022024:	e0bf7017 	ldw	r2,-576(fp)
 8022028:	1885883a 	add	r2,r3,r2
 802202c:	e0ff6917 	ldw	r3,-604(fp)
 8022030:	1885883a 	add	r2,r3,r2
 8022034:	e0bf6915 	stw	r2,-604(fp)
		tmp2 += z1 + z2;
 8022038:	e0ff6817 	ldw	r3,-608(fp)
 802203c:	e0bf6f17 	ldw	r2,-580(fp)
 8022040:	1885883a 	add	r2,r3,r2
 8022044:	e0ff6a17 	ldw	r3,-600(fp)
 8022048:	1885883a 	add	r2,r3,r2
 802204c:	e0bf6a15 	stw	r2,-600(fp)

		/* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */

		outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8022050:	e0ff6b17 	ldw	r3,-596(fp)
 8022054:	e0bf7217 	ldw	r2,-568(fp)
 8022058:	1885883a 	add	r2,r3,r2
 802205c:	1005d4ba 	srai	r2,r2,18
 8022060:	1080ffcc 	andi	r2,r2,1023
 8022064:	e0ff6617 	ldw	r3,-616(fp)
 8022068:	1885883a 	add	r2,r3,r2
 802206c:	10c00003 	ldbu	r3,0(r2)
 8022070:	e0bf7b17 	ldw	r2,-532(fp)
 8022074:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8022078:	e0bf7b17 	ldw	r2,-532(fp)
 802207c:	108001c4 	addi	r2,r2,7
 8022080:	e13f6b17 	ldw	r4,-596(fp)
 8022084:	e0ff7217 	ldw	r3,-568(fp)
 8022088:	20c7c83a 	sub	r3,r4,r3
 802208c:	1807d4ba 	srai	r3,r3,18
 8022090:	18c0ffcc 	andi	r3,r3,1023
 8022094:	e13f6617 	ldw	r4,-616(fp)
 8022098:	20c7883a 	add	r3,r4,r3
 802209c:	18c00003 	ldbu	r3,0(r3)
 80220a0:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 80220a4:	e0bf7b17 	ldw	r2,-532(fp)
 80220a8:	10800044 	addi	r2,r2,1
 80220ac:	e13f6c17 	ldw	r4,-592(fp)
 80220b0:	e0ff6a17 	ldw	r3,-600(fp)
 80220b4:	20c7883a 	add	r3,r4,r3
 80220b8:	1807d4ba 	srai	r3,r3,18
 80220bc:	18c0ffcc 	andi	r3,r3,1023
 80220c0:	e13f6617 	ldw	r4,-616(fp)
 80220c4:	20c7883a 	add	r3,r4,r3
 80220c8:	18c00003 	ldbu	r3,0(r3)
 80220cc:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 80220d0:	e0bf7b17 	ldw	r2,-532(fp)
 80220d4:	10800184 	addi	r2,r2,6
 80220d8:	e13f6c17 	ldw	r4,-592(fp)
 80220dc:	e0ff6a17 	ldw	r3,-600(fp)
 80220e0:	20c7c83a 	sub	r3,r4,r3
 80220e4:	1807d4ba 	srai	r3,r3,18
 80220e8:	18c0ffcc 	andi	r3,r3,1023
 80220ec:	e13f6617 	ldw	r4,-616(fp)
 80220f0:	20c7883a 	add	r3,r4,r3
 80220f4:	18c00003 	ldbu	r3,0(r3)
 80220f8:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 80220fc:	e0bf7b17 	ldw	r2,-532(fp)
 8022100:	10800084 	addi	r2,r2,2
 8022104:	e13f6d17 	ldw	r4,-588(fp)
 8022108:	e0ff6917 	ldw	r3,-604(fp)
 802210c:	20c7883a 	add	r3,r4,r3
 8022110:	1807d4ba 	srai	r3,r3,18
 8022114:	18c0ffcc 	andi	r3,r3,1023
 8022118:	e13f6617 	ldw	r4,-616(fp)
 802211c:	20c7883a 	add	r3,r4,r3
 8022120:	18c00003 	ldbu	r3,0(r3)
 8022124:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8022128:	e0bf7b17 	ldw	r2,-532(fp)
 802212c:	10800144 	addi	r2,r2,5
 8022130:	e13f6d17 	ldw	r4,-588(fp)
 8022134:	e0ff6917 	ldw	r3,-604(fp)
 8022138:	20c7c83a 	sub	r3,r4,r3
 802213c:	1807d4ba 	srai	r3,r3,18
 8022140:	18c0ffcc 	andi	r3,r3,1023
 8022144:	e13f6617 	ldw	r4,-616(fp)
 8022148:	20c7883a 	add	r3,r4,r3
 802214c:	18c00003 	ldbu	r3,0(r3)
 8022150:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8022154:	e0bf7b17 	ldw	r2,-532(fp)
 8022158:	108000c4 	addi	r2,r2,3
 802215c:	e13f6e17 	ldw	r4,-584(fp)
 8022160:	e0ff6717 	ldw	r3,-612(fp)
 8022164:	20c7883a 	add	r3,r4,r3
 8022168:	1807d4ba 	srai	r3,r3,18
 802216c:	18c0ffcc 	andi	r3,r3,1023
 8022170:	e13f6617 	ldw	r4,-616(fp)
 8022174:	20c7883a 	add	r3,r4,r3
 8022178:	18c00003 	ldbu	r3,0(r3)
 802217c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8022180:	e0bf7b17 	ldw	r2,-532(fp)
 8022184:	10800104 	addi	r2,r2,4
 8022188:	e13f6e17 	ldw	r4,-584(fp)
 802218c:	e0ff6717 	ldw	r3,-612(fp)
 8022190:	20c7c83a 	sub	r3,r4,r3
 8022194:	1807d4ba 	srai	r3,r3,18
 8022198:	18c0ffcc 	andi	r3,r3,1023
 802219c:	e13f6617 	ldw	r4,-616(fp)
 80221a0:	20c7883a 	add	r3,r4,r3
 80221a4:	18c00003 	ldbu	r3,0(r3)
 80221a8:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += DCTSIZE;		/* advance pointer to next row */
 80221ac:	e0bf6417 	ldw	r2,-624(fp)
 80221b0:	10800804 	addi	r2,r2,32
 80221b4:	e0bf6415 	stw	r2,-624(fp)
	/* Pass 2: process rows from work array, store into output array. */
	/* Note that we must descale the results by a factor of 8 == 2**3, */
	/* and also undo the PASS1_BITS scaling. */

	wsptr = workspace;
	for (ctr = 0; ctr < 16; ctr++) {
 80221b8:	e0bf6517 	ldw	r2,-620(fp)
 80221bc:	10800044 	addi	r2,r2,1
 80221c0:	e0bf6515 	stw	r2,-620(fp)
 80221c4:	e0bf6517 	ldw	r2,-620(fp)
 80221c8:	10800410 	cmplti	r2,r2,16
 80221cc:	103ef31e 	bne	r2,zero,8021d9c <jpeg_idct_8x16+0x858>
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += DCTSIZE;		/* advance pointer to next row */
	}
}
 80221d0:	e037883a 	mov	sp,fp
 80221d4:	dfc00217 	ldw	ra,8(sp)
 80221d8:	df000117 	ldw	fp,4(sp)
 80221dc:	dc000017 	ldw	r16,0(sp)
 80221e0:	dec00304 	addi	sp,sp,12
 80221e4:	f800283a 	ret

080221e8 <jpeg_idct_7x14>:

GLOBAL(void)
	jpeg_idct_7x14 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80221e8:	deff7f04 	addi	sp,sp,-516
 80221ec:	dfc08015 	stw	ra,512(sp)
 80221f0:	df007f15 	stw	fp,508(sp)
 80221f4:	dc007e15 	stw	r16,504(sp)
 80221f8:	df007e04 	addi	fp,sp,504
 80221fc:	e13ffc15 	stw	r4,-16(fp)
 8022200:	e17ffd15 	stw	r5,-12(fp)
 8022204:	e1bffe15 	stw	r6,-8(fp)
 8022208:	e1ffff15 	stw	r7,-4(fp)
	INT32 z1, z2, z3, z4;
	JCOEFPTR inptr;
	ISLOW_MULT_TYPE * quantptr;
	int * wsptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 802220c:	e0bffc17 	ldw	r2,-16(fp)
 8022210:	10804917 	ldw	r2,292(r2)
 8022214:	10802004 	addi	r2,r2,128
 8022218:	e0bf8615 	stw	r2,-488(fp)
	SHIFT_TEMPS

		/* Pass 1: process columns from input, store into work array.
		* 14-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/28).
		*/
		inptr = coef_block;
 802221c:	e0bffe17 	ldw	r2,-8(fp)
 8022220:	e0bf8215 	stw	r2,-504(fp)
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8022224:	e0bffd17 	ldw	r2,-12(fp)
 8022228:	10801517 	ldw	r2,84(r2)
 802222c:	e0bf8315 	stw	r2,-500(fp)
	wsptr = workspace;
 8022230:	e0bf9a04 	addi	r2,fp,-408
 8022234:	e0bf8415 	stw	r2,-496(fp)
	for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 8022238:	e03f8515 	stw	zero,-492(fp)
 802223c:	0001a506 	br	80228d4 <jpeg_idct_7x14+0x6ec>
		/* Even part */

		z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8022240:	e0bf8217 	ldw	r2,-504(fp)
 8022244:	1080000b 	ldhu	r2,0(r2)
 8022248:	10ffffcc 	andi	r3,r2,65535
 802224c:	18e0001c 	xori	r3,r3,32768
 8022250:	18e00004 	addi	r3,r3,-32768
 8022254:	e0bf8317 	ldw	r2,-500(fp)
 8022258:	10800017 	ldw	r2,0(r2)
 802225c:	1809883a 	mov	r4,r3
 8022260:	100b883a 	mov	r5,r2
 8022264:	802c2180 	call	802c218 <__mulsi3>
 8022268:	e0bf8715 	stw	r2,-484(fp)
		z1 <<= CONST_BITS;
 802226c:	e0bf8717 	ldw	r2,-484(fp)
 8022270:	1004937a 	slli	r2,r2,13
 8022274:	e0bf8715 	stw	r2,-484(fp)
		/* Add fudge factor here for final descale. */
		z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8022278:	e0bf8717 	ldw	r2,-484(fp)
 802227c:	10810004 	addi	r2,r2,1024
 8022280:	e0bf8715 	stw	r2,-484(fp)
		z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8022284:	e0bf8217 	ldw	r2,-504(fp)
 8022288:	10801004 	addi	r2,r2,64
 802228c:	1080000b 	ldhu	r2,0(r2)
 8022290:	10ffffcc 	andi	r3,r2,65535
 8022294:	18e0001c 	xori	r3,r3,32768
 8022298:	18e00004 	addi	r3,r3,-32768
 802229c:	e0bf8317 	ldw	r2,-500(fp)
 80222a0:	10802004 	addi	r2,r2,128
 80222a4:	10800017 	ldw	r2,0(r2)
 80222a8:	1809883a 	mov	r4,r3
 80222ac:	100b883a 	mov	r5,r2
 80222b0:	802c2180 	call	802c218 <__mulsi3>
 80222b4:	e0bf8815 	stw	r2,-480(fp)
		z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 80222b8:	e13f8817 	ldw	r4,-480(fp)
 80222bc:	014a3184 	movi	r5,10438
 80222c0:	802c2180 	call	802c218 <__mulsi3>
 80222c4:	e0bf8915 	stw	r2,-476(fp)
		z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 80222c8:	e13f8817 	ldw	r4,-480(fp)
 80222cc:	01428484 	movi	r5,2578
 80222d0:	802c2180 	call	802c218 <__mulsi3>
 80222d4:	e0bf8a15 	stw	r2,-472(fp)
		z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 80222d8:	e13f8817 	ldw	r4,-480(fp)
 80222dc:	01470dc4 	movi	r5,7223
 80222e0:	802c2180 	call	802c218 <__mulsi3>
 80222e4:	e0bf8815 	stw	r2,-480(fp)

		tmp10 = z1 + z2;
 80222e8:	e0ff8717 	ldw	r3,-484(fp)
 80222ec:	e0bf8917 	ldw	r2,-476(fp)
 80222f0:	1885883a 	add	r2,r3,r2
 80222f4:	e0bf8b15 	stw	r2,-468(fp)
		tmp11 = z1 + z3;
 80222f8:	e0ff8717 	ldw	r3,-484(fp)
 80222fc:	e0bf8a17 	ldw	r2,-472(fp)
 8022300:	1885883a 	add	r2,r3,r2
 8022304:	e0bf8c15 	stw	r2,-464(fp)
		tmp12 = z1 - z4;
 8022308:	e0ff8717 	ldw	r3,-484(fp)
 802230c:	e0bf8817 	ldw	r2,-480(fp)
 8022310:	1885c83a 	sub	r2,r3,r2
 8022314:	e0bf8d15 	stw	r2,-460(fp)

		tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8022318:	e0ff8917 	ldw	r3,-476(fp)
 802231c:	e0bf8a17 	ldw	r2,-472(fp)
 8022320:	1887883a 	add	r3,r3,r2
 8022324:	e0bf8817 	ldw	r2,-480(fp)
 8022328:	1885c83a 	sub	r2,r3,r2
 802232c:	1085883a 	add	r2,r2,r2
 8022330:	e0ff8717 	ldw	r3,-484(fp)
 8022334:	1885c83a 	sub	r2,r3,r2
 8022338:	1005d2fa 	srai	r2,r2,11
 802233c:	e0bf8e15 	stw	r2,-456(fp)
			CONST_BITS-PASS1_BITS);

		z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8022340:	e0bf8217 	ldw	r2,-504(fp)
 8022344:	10800804 	addi	r2,r2,32
 8022348:	1080000b 	ldhu	r2,0(r2)
 802234c:	10ffffcc 	andi	r3,r2,65535
 8022350:	18e0001c 	xori	r3,r3,32768
 8022354:	18e00004 	addi	r3,r3,-32768
 8022358:	e0bf8317 	ldw	r2,-500(fp)
 802235c:	10801004 	addi	r2,r2,64
 8022360:	10800017 	ldw	r2,0(r2)
 8022364:	1809883a 	mov	r4,r3
 8022368:	100b883a 	mov	r5,r2
 802236c:	802c2180 	call	802c218 <__mulsi3>
 8022370:	e0bf8715 	stw	r2,-484(fp)
		z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8022374:	e0bf8217 	ldw	r2,-504(fp)
 8022378:	10801804 	addi	r2,r2,96
 802237c:	1080000b 	ldhu	r2,0(r2)
 8022380:	10ffffcc 	andi	r3,r2,65535
 8022384:	18e0001c 	xori	r3,r3,32768
 8022388:	18e00004 	addi	r3,r3,-32768
 802238c:	e0bf8317 	ldw	r2,-500(fp)
 8022390:	10803004 	addi	r2,r2,192
 8022394:	10800017 	ldw	r2,0(r2)
 8022398:	1809883a 	mov	r4,r3
 802239c:	100b883a 	mov	r5,r2
 80223a0:	802c2180 	call	802c218 <__mulsi3>
 80223a4:	e0bf8915 	stw	r2,-476(fp)

		z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 80223a8:	e0ff8717 	ldw	r3,-484(fp)
 80223ac:	e0bf8917 	ldw	r2,-476(fp)
 80223b0:	1885883a 	add	r2,r3,r2
 80223b4:	1009883a 	mov	r4,r2
 80223b8:	0148d884 	movi	r5,9058
 80223bc:	802c2180 	call	802c218 <__mulsi3>
 80223c0:	e0bf8a15 	stw	r2,-472(fp)

		tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 80223c4:	e13f8717 	ldw	r4,-484(fp)
 80223c8:	01422f44 	movi	r5,2237
 80223cc:	802c2180 	call	802c218 <__mulsi3>
 80223d0:	1007883a 	mov	r3,r2
 80223d4:	e0bf8a17 	ldw	r2,-472(fp)
 80223d8:	1885883a 	add	r2,r3,r2
 80223dc:	e0bf8f15 	stw	r2,-452(fp)
		tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 80223e0:	e13f8917 	ldw	r4,-476(fp)
 80223e4:	01723f04 	movi	r5,-14084
 80223e8:	802c2180 	call	802c218 <__mulsi3>
 80223ec:	1007883a 	mov	r3,r2
 80223f0:	e0bf8a17 	ldw	r2,-472(fp)
 80223f4:	1885883a 	add	r2,r3,r2
 80223f8:	e0bf9015 	stw	r2,-448(fp)
		tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 80223fc:	e13f8717 	ldw	r4,-484(fp)
 8022400:	0144e8c4 	movi	r5,5027
 8022404:	802c2180 	call	802c218 <__mulsi3>
 8022408:	1021883a 	mov	r16,r2
			MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 802240c:	e13f8917 	ldw	r4,-476(fp)
 8022410:	0174f844 	movi	r5,-11295
 8022414:	802c2180 	call	802c218 <__mulsi3>

		z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

		tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
		tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
		tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8022418:	8085883a 	add	r2,r16,r2
 802241c:	e0bf9115 	stw	r2,-444(fp)
			MULTIPLY(z2, FIX(1.378756276));      /* c2 */

		tmp20 = tmp10 + tmp13;
 8022420:	e0ff8b17 	ldw	r3,-468(fp)
 8022424:	e0bf8f17 	ldw	r2,-452(fp)
 8022428:	1885883a 	add	r2,r3,r2
 802242c:	e0bf9215 	stw	r2,-440(fp)
		tmp26 = tmp10 - tmp13;
 8022430:	e0ff8b17 	ldw	r3,-468(fp)
 8022434:	e0bf8f17 	ldw	r2,-452(fp)
 8022438:	1885c83a 	sub	r2,r3,r2
 802243c:	e0bf9315 	stw	r2,-436(fp)
		tmp21 = tmp11 + tmp14;
 8022440:	e0ff8c17 	ldw	r3,-464(fp)
 8022444:	e0bf9017 	ldw	r2,-448(fp)
 8022448:	1885883a 	add	r2,r3,r2
 802244c:	e0bf9415 	stw	r2,-432(fp)
		tmp25 = tmp11 - tmp14;
 8022450:	e0ff8c17 	ldw	r3,-464(fp)
 8022454:	e0bf9017 	ldw	r2,-448(fp)
 8022458:	1885c83a 	sub	r2,r3,r2
 802245c:	e0bf9515 	stw	r2,-428(fp)
		tmp22 = tmp12 + tmp15;
 8022460:	e0ff8d17 	ldw	r3,-460(fp)
 8022464:	e0bf9117 	ldw	r2,-444(fp)
 8022468:	1885883a 	add	r2,r3,r2
 802246c:	e0bf9615 	stw	r2,-424(fp)
		tmp24 = tmp12 - tmp15;
 8022470:	e0ff8d17 	ldw	r3,-460(fp)
 8022474:	e0bf9117 	ldw	r2,-444(fp)
 8022478:	1885c83a 	sub	r2,r3,r2
 802247c:	e0bf9715 	stw	r2,-420(fp)

		/* Odd part */

		z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8022480:	e0bf8217 	ldw	r2,-504(fp)
 8022484:	10800404 	addi	r2,r2,16
 8022488:	1080000b 	ldhu	r2,0(r2)
 802248c:	10ffffcc 	andi	r3,r2,65535
 8022490:	18e0001c 	xori	r3,r3,32768
 8022494:	18e00004 	addi	r3,r3,-32768
 8022498:	e0bf8317 	ldw	r2,-500(fp)
 802249c:	10800804 	addi	r2,r2,32
 80224a0:	10800017 	ldw	r2,0(r2)
 80224a4:	1809883a 	mov	r4,r3
 80224a8:	100b883a 	mov	r5,r2
 80224ac:	802c2180 	call	802c218 <__mulsi3>
 80224b0:	e0bf8715 	stw	r2,-484(fp)
		z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80224b4:	e0bf8217 	ldw	r2,-504(fp)
 80224b8:	10800c04 	addi	r2,r2,48
 80224bc:	1080000b 	ldhu	r2,0(r2)
 80224c0:	10ffffcc 	andi	r3,r2,65535
 80224c4:	18e0001c 	xori	r3,r3,32768
 80224c8:	18e00004 	addi	r3,r3,-32768
 80224cc:	e0bf8317 	ldw	r2,-500(fp)
 80224d0:	10801804 	addi	r2,r2,96
 80224d4:	10800017 	ldw	r2,0(r2)
 80224d8:	1809883a 	mov	r4,r3
 80224dc:	100b883a 	mov	r5,r2
 80224e0:	802c2180 	call	802c218 <__mulsi3>
 80224e4:	e0bf8915 	stw	r2,-476(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80224e8:	e0bf8217 	ldw	r2,-504(fp)
 80224ec:	10801404 	addi	r2,r2,80
 80224f0:	1080000b 	ldhu	r2,0(r2)
 80224f4:	10ffffcc 	andi	r3,r2,65535
 80224f8:	18e0001c 	xori	r3,r3,32768
 80224fc:	18e00004 	addi	r3,r3,-32768
 8022500:	e0bf8317 	ldw	r2,-500(fp)
 8022504:	10802804 	addi	r2,r2,160
 8022508:	10800017 	ldw	r2,0(r2)
 802250c:	1809883a 	mov	r4,r3
 8022510:	100b883a 	mov	r5,r2
 8022514:	802c2180 	call	802c218 <__mulsi3>
 8022518:	e0bf8a15 	stw	r2,-472(fp)
		z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 802251c:	e0bf8217 	ldw	r2,-504(fp)
 8022520:	10801c04 	addi	r2,r2,112
 8022524:	1080000b 	ldhu	r2,0(r2)
 8022528:	10ffffcc 	andi	r3,r2,65535
 802252c:	18e0001c 	xori	r3,r3,32768
 8022530:	18e00004 	addi	r3,r3,-32768
 8022534:	e0bf8317 	ldw	r2,-500(fp)
 8022538:	10803804 	addi	r2,r2,224
 802253c:	10800017 	ldw	r2,0(r2)
 8022540:	1809883a 	mov	r4,r3
 8022544:	100b883a 	mov	r5,r2
 8022548:	802c2180 	call	802c218 <__mulsi3>
 802254c:	e0bf8815 	stw	r2,-480(fp)
		tmp13 = z4 << CONST_BITS;
 8022550:	e0bf8817 	ldw	r2,-480(fp)
 8022554:	1004937a 	slli	r2,r2,13
 8022558:	e0bf8f15 	stw	r2,-452(fp)

		tmp14 = z1 + z3;
 802255c:	e0ff8717 	ldw	r3,-484(fp)
 8022560:	e0bf8a17 	ldw	r2,-472(fp)
 8022564:	1885883a 	add	r2,r3,r2
 8022568:	e0bf9015 	stw	r2,-448(fp)
		tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 802256c:	e0ff8717 	ldw	r3,-484(fp)
 8022570:	e0bf8917 	ldw	r2,-476(fp)
 8022574:	1885883a 	add	r2,r3,r2
 8022578:	1009883a 	mov	r4,r2
 802257c:	014aadc4 	movi	r5,10935
 8022580:	802c2180 	call	802c218 <__mulsi3>
 8022584:	e0bf8c15 	stw	r2,-464(fp)
		tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8022588:	e13f9017 	ldw	r4,-448(fp)
 802258c:	01499484 	movi	r5,9810
 8022590:	802c2180 	call	802c218 <__mulsi3>
 8022594:	e0bf8d15 	stw	r2,-460(fp)
		tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 8022598:	e0ff8c17 	ldw	r3,-464(fp)
 802259c:	e0bf8d17 	ldw	r2,-460(fp)
 80225a0:	1887883a 	add	r3,r3,r2
 80225a4:	e0bf8f17 	ldw	r2,-452(fp)
 80225a8:	18a1883a 	add	r16,r3,r2
 80225ac:	e13f8717 	ldw	r4,-484(fp)
 80225b0:	0176fc04 	movi	r5,-9232
 80225b4:	802c2180 	call	802c218 <__mulsi3>
 80225b8:	8085883a 	add	r2,r16,r2
 80225bc:	e0bf8b15 	stw	r2,-468(fp)
		tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 80225c0:	e13f9017 	ldw	r4,-448(fp)
 80225c4:	01460504 	movi	r5,6164
 80225c8:	802c2180 	call	802c218 <__mulsi3>
 80225cc:	e0bf9015 	stw	r2,-448(fp)
		tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 80225d0:	e13f8717 	ldw	r4,-484(fp)
 80225d4:	017782c4 	movi	r5,-8693
 80225d8:	802c2180 	call	802c218 <__mulsi3>
 80225dc:	1007883a 	mov	r3,r2
 80225e0:	e0bf9017 	ldw	r2,-448(fp)
 80225e4:	1885883a 	add	r2,r3,r2
 80225e8:	e0bf9815 	stw	r2,-416(fp)
		z1    -= z2;
 80225ec:	e0ff8717 	ldw	r3,-484(fp)
 80225f0:	e0bf8917 	ldw	r2,-476(fp)
 80225f4:	1885c83a 	sub	r2,r3,r2
 80225f8:	e0bf8715 	stw	r2,-484(fp)
		tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 80225fc:	e13f8717 	ldw	r4,-484(fp)
 8022600:	0143bc84 	movi	r5,3826
 8022604:	802c2180 	call	802c218 <__mulsi3>
 8022608:	1007883a 	mov	r3,r2
 802260c:	e0bf8f17 	ldw	r2,-452(fp)
 8022610:	1885c83a 	sub	r2,r3,r2
 8022614:	e0bf9115 	stw	r2,-444(fp)
		tmp16 += tmp15;
 8022618:	e0ff9817 	ldw	r3,-416(fp)
 802261c:	e0bf9117 	ldw	r2,-444(fp)
 8022620:	1885883a 	add	r2,r3,r2
 8022624:	e0bf9815 	stw	r2,-416(fp)
		z1    += z4;
 8022628:	e0ff8717 	ldw	r3,-484(fp)
 802262c:	e0bf8817 	ldw	r2,-480(fp)
 8022630:	1885883a 	add	r2,r3,r2
 8022634:	e0bf8715 	stw	r2,-484(fp)
		z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 8022638:	e0ff8917 	ldw	r3,-476(fp)
 802263c:	e0bf8a17 	ldw	r2,-472(fp)
 8022640:	1885883a 	add	r2,r3,r2
 8022644:	1009883a 	mov	r4,r2
 8022648:	017ebbc4 	movi	r5,-1297
 802264c:	802c2180 	call	802c218 <__mulsi3>
 8022650:	1007883a 	mov	r3,r2
 8022654:	e0bf8f17 	ldw	r2,-452(fp)
 8022658:	1885c83a 	sub	r2,r3,r2
 802265c:	e0bf8815 	stw	r2,-480(fp)
		tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8022660:	e13f8917 	ldw	r4,-476(fp)
 8022664:	017c9b84 	movi	r5,-3474
 8022668:	802c2180 	call	802c218 <__mulsi3>
 802266c:	1007883a 	mov	r3,r2
 8022670:	e0bf8817 	ldw	r2,-480(fp)
 8022674:	1885883a 	add	r2,r3,r2
 8022678:	e0ff8c17 	ldw	r3,-464(fp)
 802267c:	1885883a 	add	r2,r3,r2
 8022680:	e0bf8c15 	stw	r2,-464(fp)
		tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 8022684:	e13f8a17 	ldw	r4,-472(fp)
 8022688:	016d0244 	movi	r5,-19447
 802268c:	802c2180 	call	802c218 <__mulsi3>
 8022690:	1007883a 	mov	r3,r2
 8022694:	e0bf8817 	ldw	r2,-480(fp)
 8022698:	1885883a 	add	r2,r3,r2
 802269c:	e0ff8d17 	ldw	r3,-460(fp)
 80226a0:	1885883a 	add	r2,r3,r2
 80226a4:	e0bf8d15 	stw	r2,-460(fp)
		z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 80226a8:	e0ff8a17 	ldw	r3,-472(fp)
 80226ac:	e0bf8917 	ldw	r2,-476(fp)
 80226b0:	1885c83a 	sub	r2,r3,r2
 80226b4:	1009883a 	mov	r4,r2
 80226b8:	014b3e04 	movi	r5,11512
 80226bc:	802c2180 	call	802c218 <__mulsi3>
 80226c0:	e0bf8815 	stw	r2,-480(fp)
		tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 80226c4:	e0ff8817 	ldw	r3,-480(fp)
 80226c8:	e0bf8f17 	ldw	r2,-452(fp)
 80226cc:	18a1883a 	add	r16,r3,r2
 80226d0:	e13f8a17 	ldw	r4,-472(fp)
 80226d4:	01727984 	movi	r5,-13850
 80226d8:	802c2180 	call	802c218 <__mulsi3>
 80226dc:	8085883a 	add	r2,r16,r2
 80226e0:	e0ff9017 	ldw	r3,-448(fp)
 80226e4:	1885883a 	add	r2,r3,r2
 80226e8:	e0bf9015 	stw	r2,-448(fp)
		tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 80226ec:	e13f8917 	ldw	r4,-476(fp)
 80226f0:	01456644 	movi	r5,5529
 80226f4:	802c2180 	call	802c218 <__mulsi3>
 80226f8:	1007883a 	mov	r3,r2
 80226fc:	e0bf8817 	ldw	r2,-480(fp)
 8022700:	1885883a 	add	r2,r3,r2
 8022704:	e0ff9117 	ldw	r3,-444(fp)
 8022708:	1885883a 	add	r2,r3,r2
 802270c:	e0bf9115 	stw	r2,-444(fp)

		tmp13 = (z1 - z3) << PASS1_BITS;
 8022710:	e0ff8717 	ldw	r3,-484(fp)
 8022714:	e0bf8a17 	ldw	r2,-472(fp)
 8022718:	1885c83a 	sub	r2,r3,r2
 802271c:	1085883a 	add	r2,r2,r2
 8022720:	1085883a 	add	r2,r2,r2
 8022724:	e0bf8f15 	stw	r2,-452(fp)

		/* Final output stage */

		wsptr[7*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8022728:	e0ff9217 	ldw	r3,-440(fp)
 802272c:	e0bf8b17 	ldw	r2,-468(fp)
 8022730:	1885883a 	add	r2,r3,r2
 8022734:	1007d2fa 	srai	r3,r2,11
 8022738:	e0bf8417 	ldw	r2,-496(fp)
 802273c:	10c00015 	stw	r3,0(r2)
		wsptr[7*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8022740:	e0bf8417 	ldw	r2,-496(fp)
 8022744:	10805b04 	addi	r2,r2,364
 8022748:	e13f9217 	ldw	r4,-440(fp)
 802274c:	e0ff8b17 	ldw	r3,-468(fp)
 8022750:	20c7c83a 	sub	r3,r4,r3
 8022754:	1807d2fa 	srai	r3,r3,11
 8022758:	10c00015 	stw	r3,0(r2)
		wsptr[7*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 802275c:	e0bf8417 	ldw	r2,-496(fp)
 8022760:	10800704 	addi	r2,r2,28
 8022764:	e13f9417 	ldw	r4,-432(fp)
 8022768:	e0ff8c17 	ldw	r3,-464(fp)
 802276c:	20c7883a 	add	r3,r4,r3
 8022770:	1807d2fa 	srai	r3,r3,11
 8022774:	10c00015 	stw	r3,0(r2)
		wsptr[7*12] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8022778:	e0bf8417 	ldw	r2,-496(fp)
 802277c:	10805404 	addi	r2,r2,336
 8022780:	e13f9417 	ldw	r4,-432(fp)
 8022784:	e0ff8c17 	ldw	r3,-464(fp)
 8022788:	20c7c83a 	sub	r3,r4,r3
 802278c:	1807d2fa 	srai	r3,r3,11
 8022790:	10c00015 	stw	r3,0(r2)
		wsptr[7*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8022794:	e0bf8417 	ldw	r2,-496(fp)
 8022798:	10800e04 	addi	r2,r2,56
 802279c:	e13f9617 	ldw	r4,-424(fp)
 80227a0:	e0ff8d17 	ldw	r3,-460(fp)
 80227a4:	20c7883a 	add	r3,r4,r3
 80227a8:	1807d2fa 	srai	r3,r3,11
 80227ac:	10c00015 	stw	r3,0(r2)
		wsptr[7*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80227b0:	e0bf8417 	ldw	r2,-496(fp)
 80227b4:	10804d04 	addi	r2,r2,308
 80227b8:	e13f9617 	ldw	r4,-424(fp)
 80227bc:	e0ff8d17 	ldw	r3,-460(fp)
 80227c0:	20c7c83a 	sub	r3,r4,r3
 80227c4:	1807d2fa 	srai	r3,r3,11
 80227c8:	10c00015 	stw	r3,0(r2)
		wsptr[7*3]  = (int) (tmp23 + tmp13);
 80227cc:	e0bf8417 	ldw	r2,-496(fp)
 80227d0:	10801504 	addi	r2,r2,84
 80227d4:	e13f8e17 	ldw	r4,-456(fp)
 80227d8:	e0ff8f17 	ldw	r3,-452(fp)
 80227dc:	20c7883a 	add	r3,r4,r3
 80227e0:	10c00015 	stw	r3,0(r2)
		wsptr[7*10] = (int) (tmp23 - tmp13);
 80227e4:	e0bf8417 	ldw	r2,-496(fp)
 80227e8:	10804604 	addi	r2,r2,280
 80227ec:	e13f8e17 	ldw	r4,-456(fp)
 80227f0:	e0ff8f17 	ldw	r3,-452(fp)
 80227f4:	20c7c83a 	sub	r3,r4,r3
 80227f8:	10c00015 	stw	r3,0(r2)
		wsptr[7*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80227fc:	e0bf8417 	ldw	r2,-496(fp)
 8022800:	10801c04 	addi	r2,r2,112
 8022804:	e13f9717 	ldw	r4,-420(fp)
 8022808:	e0ff9017 	ldw	r3,-448(fp)
 802280c:	20c7883a 	add	r3,r4,r3
 8022810:	1807d2fa 	srai	r3,r3,11
 8022814:	10c00015 	stw	r3,0(r2)
		wsptr[7*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8022818:	e0bf8417 	ldw	r2,-496(fp)
 802281c:	10803f04 	addi	r2,r2,252
 8022820:	e13f9717 	ldw	r4,-420(fp)
 8022824:	e0ff9017 	ldw	r3,-448(fp)
 8022828:	20c7c83a 	sub	r3,r4,r3
 802282c:	1807d2fa 	srai	r3,r3,11
 8022830:	10c00015 	stw	r3,0(r2)
		wsptr[7*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8022834:	e0bf8417 	ldw	r2,-496(fp)
 8022838:	10802304 	addi	r2,r2,140
 802283c:	e13f9517 	ldw	r4,-428(fp)
 8022840:	e0ff9117 	ldw	r3,-444(fp)
 8022844:	20c7883a 	add	r3,r4,r3
 8022848:	1807d2fa 	srai	r3,r3,11
 802284c:	10c00015 	stw	r3,0(r2)
		wsptr[7*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8022850:	e0bf8417 	ldw	r2,-496(fp)
 8022854:	10803804 	addi	r2,r2,224
 8022858:	e13f9517 	ldw	r4,-428(fp)
 802285c:	e0ff9117 	ldw	r3,-444(fp)
 8022860:	20c7c83a 	sub	r3,r4,r3
 8022864:	1807d2fa 	srai	r3,r3,11
 8022868:	10c00015 	stw	r3,0(r2)
		wsptr[7*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 802286c:	e0bf8417 	ldw	r2,-496(fp)
 8022870:	10802a04 	addi	r2,r2,168
 8022874:	e13f9317 	ldw	r4,-436(fp)
 8022878:	e0ff9817 	ldw	r3,-416(fp)
 802287c:	20c7883a 	add	r3,r4,r3
 8022880:	1807d2fa 	srai	r3,r3,11
 8022884:	10c00015 	stw	r3,0(r2)
		wsptr[7*7]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 8022888:	e0bf8417 	ldw	r2,-496(fp)
 802288c:	10803104 	addi	r2,r2,196
 8022890:	e13f9317 	ldw	r4,-436(fp)
 8022894:	e0ff9817 	ldw	r3,-416(fp)
 8022898:	20c7c83a 	sub	r3,r4,r3
 802289c:	1807d2fa 	srai	r3,r3,11
 80228a0:	10c00015 	stw	r3,0(r2)
		* 14-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/28).
		*/
		inptr = coef_block;
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
	wsptr = workspace;
	for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 80228a4:	e0bf8517 	ldw	r2,-492(fp)
 80228a8:	10800044 	addi	r2,r2,1
 80228ac:	e0bf8515 	stw	r2,-492(fp)
 80228b0:	e0bf8217 	ldw	r2,-504(fp)
 80228b4:	10800084 	addi	r2,r2,2
 80228b8:	e0bf8215 	stw	r2,-504(fp)
 80228bc:	e0bf8317 	ldw	r2,-500(fp)
 80228c0:	10800104 	addi	r2,r2,4
 80228c4:	e0bf8315 	stw	r2,-500(fp)
 80228c8:	e0bf8417 	ldw	r2,-496(fp)
 80228cc:	10800104 	addi	r2,r2,4
 80228d0:	e0bf8415 	stw	r2,-496(fp)
 80228d4:	e0bf8517 	ldw	r2,-492(fp)
 80228d8:	108001d0 	cmplti	r2,r2,7
 80228dc:	103e581e 	bne	r2,zero,8022240 <jpeg_idct_7x14+0x58>
	}

	/* Pass 2: process 14 rows from work array, store into output array.
	* 7-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/14).
	*/
	wsptr = workspace;
 80228e0:	e0bf9a04 	addi	r2,fp,-408
 80228e4:	e0bf8415 	stw	r2,-496(fp)
	for (ctr = 0; ctr < 14; ctr++) {
 80228e8:	e03f8515 	stw	zero,-492(fp)
 80228ec:	0000ec06 	br	8022ca0 <jpeg_idct_7x14+0xab8>
		outptr = output_buf[ctr] + output_col;
 80228f0:	e0bf8517 	ldw	r2,-492(fp)
 80228f4:	1085883a 	add	r2,r2,r2
 80228f8:	1085883a 	add	r2,r2,r2
 80228fc:	e0ffff17 	ldw	r3,-4(fp)
 8022900:	1885883a 	add	r2,r3,r2
 8022904:	10c00017 	ldw	r3,0(r2)
 8022908:	e0800317 	ldw	r2,12(fp)
 802290c:	1885883a 	add	r2,r3,r2
 8022910:	e0bf9915 	stw	r2,-412(fp)

		/* Even part */

		/* Add fudge factor here for final descale. */
		tmp23 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8022914:	e0bf8417 	ldw	r2,-496(fp)
 8022918:	10800017 	ldw	r2,0(r2)
 802291c:	10800404 	addi	r2,r2,16
 8022920:	e0bf8e15 	stw	r2,-456(fp)
		tmp23 <<= CONST_BITS;
 8022924:	e0bf8e17 	ldw	r2,-456(fp)
 8022928:	1004937a 	slli	r2,r2,13
 802292c:	e0bf8e15 	stw	r2,-456(fp)

		z1 = (INT32) wsptr[2];
 8022930:	e0bf8417 	ldw	r2,-496(fp)
 8022934:	10800204 	addi	r2,r2,8
 8022938:	10800017 	ldw	r2,0(r2)
 802293c:	e0bf8715 	stw	r2,-484(fp)
		z2 = (INT32) wsptr[4];
 8022940:	e0bf8417 	ldw	r2,-496(fp)
 8022944:	10800404 	addi	r2,r2,16
 8022948:	10800017 	ldw	r2,0(r2)
 802294c:	e0bf8915 	stw	r2,-476(fp)
		z3 = (INT32) wsptr[6];
 8022950:	e0bf8417 	ldw	r2,-496(fp)
 8022954:	10800604 	addi	r2,r2,24
 8022958:	10800017 	ldw	r2,0(r2)
 802295c:	e0bf8a15 	stw	r2,-472(fp)

		tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 8022960:	e0ff8917 	ldw	r3,-476(fp)
 8022964:	e0bf8a17 	ldw	r2,-472(fp)
 8022968:	1885c83a 	sub	r2,r3,r2
 802296c:	1009883a 	mov	r4,r2
 8022970:	01470dc4 	movi	r5,7223
 8022974:	802c2180 	call	802c218 <__mulsi3>
 8022978:	e0bf9215 	stw	r2,-440(fp)
		tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 802297c:	e0ff8717 	ldw	r3,-484(fp)
 8022980:	e0bf8917 	ldw	r2,-476(fp)
 8022984:	1885c83a 	sub	r2,r3,r2
 8022988:	1009883a 	mov	r4,r2
 802298c:	01428484 	movi	r5,2578
 8022990:	802c2180 	call	802c218 <__mulsi3>
 8022994:	e0bf9615 	stw	r2,-424(fp)
		tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8022998:	e0ff9217 	ldw	r3,-440(fp)
 802299c:	e0bf9617 	ldw	r2,-424(fp)
 80229a0:	1887883a 	add	r3,r3,r2
 80229a4:	e0bf8e17 	ldw	r2,-456(fp)
 80229a8:	18a1883a 	add	r16,r3,r2
 80229ac:	e13f8917 	ldw	r4,-476(fp)
 80229b0:	01714544 	movi	r5,-15083
 80229b4:	802c2180 	call	802c218 <__mulsi3>
 80229b8:	8085883a 	add	r2,r16,r2
 80229bc:	e0bf9415 	stw	r2,-432(fp)
		tmp10 = z1 + z3;
 80229c0:	e0ff8717 	ldw	r3,-484(fp)
 80229c4:	e0bf8a17 	ldw	r2,-472(fp)
 80229c8:	1885883a 	add	r2,r3,r2
 80229cc:	e0bf8b15 	stw	r2,-468(fp)
		z2 -= tmp10;
 80229d0:	e0ff8917 	ldw	r3,-476(fp)
 80229d4:	e0bf8b17 	ldw	r2,-468(fp)
 80229d8:	1885c83a 	sub	r2,r3,r2
 80229dc:	e0bf8915 	stw	r2,-476(fp)
		tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 80229e0:	e13f8b17 	ldw	r4,-468(fp)
 80229e4:	014a3184 	movi	r5,10438
 80229e8:	802c2180 	call	802c218 <__mulsi3>
 80229ec:	1007883a 	mov	r3,r2
 80229f0:	e0bf8e17 	ldw	r2,-456(fp)
 80229f4:	1885883a 	add	r2,r3,r2
 80229f8:	e0bf8b15 	stw	r2,-468(fp)
		tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 80229fc:	e13f8a17 	ldw	r4,-472(fp)
 8022a00:	017f60c4 	movi	r5,-637
 8022a04:	802c2180 	call	802c218 <__mulsi3>
 8022a08:	1007883a 	mov	r3,r2
 8022a0c:	e0bf8b17 	ldw	r2,-468(fp)
 8022a10:	1885883a 	add	r2,r3,r2
 8022a14:	e0ff9217 	ldw	r3,-440(fp)
 8022a18:	1885883a 	add	r2,r3,r2
 8022a1c:	e0bf9215 	stw	r2,-440(fp)
		tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 8022a20:	e13f8717 	ldw	r4,-484(fp)
 8022a24:	016c3c44 	movi	r5,-20239
 8022a28:	802c2180 	call	802c218 <__mulsi3>
 8022a2c:	1007883a 	mov	r3,r2
 8022a30:	e0bf8b17 	ldw	r2,-468(fp)
 8022a34:	1885883a 	add	r2,r3,r2
 8022a38:	e0ff9617 	ldw	r3,-424(fp)
 8022a3c:	1885883a 	add	r2,r3,r2
 8022a40:	e0bf9615 	stw	r2,-424(fp)
		tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 8022a44:	e13f8917 	ldw	r4,-476(fp)
 8022a48:	014b5044 	movi	r5,11585
 8022a4c:	802c2180 	call	802c218 <__mulsi3>
 8022a50:	e0ff8e17 	ldw	r3,-456(fp)
 8022a54:	1885883a 	add	r2,r3,r2
 8022a58:	e0bf8e15 	stw	r2,-456(fp)

		/* Odd part */

		z1 = (INT32) wsptr[1];
 8022a5c:	e0bf8417 	ldw	r2,-496(fp)
 8022a60:	10800104 	addi	r2,r2,4
 8022a64:	10800017 	ldw	r2,0(r2)
 8022a68:	e0bf8715 	stw	r2,-484(fp)
		z2 = (INT32) wsptr[3];
 8022a6c:	e0bf8417 	ldw	r2,-496(fp)
 8022a70:	10800304 	addi	r2,r2,12
 8022a74:	10800017 	ldw	r2,0(r2)
 8022a78:	e0bf8915 	stw	r2,-476(fp)
		z3 = (INT32) wsptr[5];
 8022a7c:	e0bf8417 	ldw	r2,-496(fp)
 8022a80:	10800504 	addi	r2,r2,20
 8022a84:	10800017 	ldw	r2,0(r2)
 8022a88:	e0bf8a15 	stw	r2,-472(fp)

		tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 8022a8c:	e0ff8717 	ldw	r3,-484(fp)
 8022a90:	e0bf8917 	ldw	r2,-476(fp)
 8022a94:	1885883a 	add	r2,r3,r2
 8022a98:	1009883a 	mov	r4,r2
 8022a9c:	01477bc4 	movi	r5,7663
 8022aa0:	802c2180 	call	802c218 <__mulsi3>
 8022aa4:	e0bf8c15 	stw	r2,-464(fp)
		tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 8022aa8:	e0ff8717 	ldw	r3,-484(fp)
 8022aac:	e0bf8917 	ldw	r2,-476(fp)
 8022ab0:	1885c83a 	sub	r2,r3,r2
 8022ab4:	1009883a 	mov	r4,r2
 8022ab8:	01415cc4 	movi	r5,1395
 8022abc:	802c2180 	call	802c218 <__mulsi3>
 8022ac0:	e0bf8d15 	stw	r2,-460(fp)
		tmp10 = tmp11 - tmp12;
 8022ac4:	e0ff8c17 	ldw	r3,-464(fp)
 8022ac8:	e0bf8d17 	ldw	r2,-460(fp)
 8022acc:	1885c83a 	sub	r2,r3,r2
 8022ad0:	e0bf8b15 	stw	r2,-468(fp)
		tmp11 += tmp12;
 8022ad4:	e0ff8c17 	ldw	r3,-464(fp)
 8022ad8:	e0bf8d17 	ldw	r2,-460(fp)
 8022adc:	1885883a 	add	r2,r3,r2
 8022ae0:	e0bf8c15 	stw	r2,-464(fp)
		tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 8022ae4:	e0ff8917 	ldw	r3,-476(fp)
 8022ae8:	e0bf8a17 	ldw	r2,-472(fp)
 8022aec:	1885883a 	add	r2,r3,r2
 8022af0:	1009883a 	mov	r4,r2
 8022af4:	0174f844 	movi	r5,-11295
 8022af8:	802c2180 	call	802c218 <__mulsi3>
 8022afc:	e0bf8d15 	stw	r2,-460(fp)
		tmp11 += tmp12;
 8022b00:	e0ff8c17 	ldw	r3,-464(fp)
 8022b04:	e0bf8d17 	ldw	r2,-460(fp)
 8022b08:	1885883a 	add	r2,r3,r2
 8022b0c:	e0bf8c15 	stw	r2,-464(fp)
		z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 8022b10:	e0ff8717 	ldw	r3,-484(fp)
 8022b14:	e0bf8a17 	ldw	r2,-472(fp)
 8022b18:	1885883a 	add	r2,r3,r2
 8022b1c:	1009883a 	mov	r4,r2
 8022b20:	0144e8c4 	movi	r5,5027
 8022b24:	802c2180 	call	802c218 <__mulsi3>
 8022b28:	e0bf8915 	stw	r2,-476(fp)
		tmp10 += z2;
 8022b2c:	e0ff8b17 	ldw	r3,-468(fp)
 8022b30:	e0bf8917 	ldw	r2,-476(fp)
 8022b34:	1885883a 	add	r2,r3,r2
 8022b38:	e0bf8b15 	stw	r2,-468(fp)
		tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 8022b3c:	e13f8a17 	ldw	r4,-472(fp)
 8022b40:	014ef784 	movi	r5,15326
 8022b44:	802c2180 	call	802c218 <__mulsi3>
 8022b48:	1007883a 	mov	r3,r2
 8022b4c:	e0bf8917 	ldw	r2,-476(fp)
 8022b50:	1885883a 	add	r2,r3,r2
 8022b54:	e0ff8d17 	ldw	r3,-460(fp)
 8022b58:	1885883a 	add	r2,r3,r2
 8022b5c:	e0bf8d15 	stw	r2,-460(fp)

		/* Final output stage */

		outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8022b60:	e0ff9217 	ldw	r3,-440(fp)
 8022b64:	e0bf8b17 	ldw	r2,-468(fp)
 8022b68:	1885883a 	add	r2,r3,r2
 8022b6c:	1005d4ba 	srai	r2,r2,18
 8022b70:	1080ffcc 	andi	r2,r2,1023
 8022b74:	e0ff8617 	ldw	r3,-488(fp)
 8022b78:	1885883a 	add	r2,r3,r2
 8022b7c:	10c00003 	ldbu	r3,0(r2)
 8022b80:	e0bf9917 	ldw	r2,-412(fp)
 8022b84:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8022b88:	e0bf9917 	ldw	r2,-412(fp)
 8022b8c:	10800184 	addi	r2,r2,6
 8022b90:	e13f9217 	ldw	r4,-440(fp)
 8022b94:	e0ff8b17 	ldw	r3,-468(fp)
 8022b98:	20c7c83a 	sub	r3,r4,r3
 8022b9c:	1807d4ba 	srai	r3,r3,18
 8022ba0:	18c0ffcc 	andi	r3,r3,1023
 8022ba4:	e13f8617 	ldw	r4,-488(fp)
 8022ba8:	20c7883a 	add	r3,r4,r3
 8022bac:	18c00003 	ldbu	r3,0(r3)
 8022bb0:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8022bb4:	e0bf9917 	ldw	r2,-412(fp)
 8022bb8:	10800044 	addi	r2,r2,1
 8022bbc:	e13f9417 	ldw	r4,-432(fp)
 8022bc0:	e0ff8c17 	ldw	r3,-464(fp)
 8022bc4:	20c7883a 	add	r3,r4,r3
 8022bc8:	1807d4ba 	srai	r3,r3,18
 8022bcc:	18c0ffcc 	andi	r3,r3,1023
 8022bd0:	e13f8617 	ldw	r4,-488(fp)
 8022bd4:	20c7883a 	add	r3,r4,r3
 8022bd8:	18c00003 	ldbu	r3,0(r3)
 8022bdc:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8022be0:	e0bf9917 	ldw	r2,-412(fp)
 8022be4:	10800144 	addi	r2,r2,5
 8022be8:	e13f9417 	ldw	r4,-432(fp)
 8022bec:	e0ff8c17 	ldw	r3,-464(fp)
 8022bf0:	20c7c83a 	sub	r3,r4,r3
 8022bf4:	1807d4ba 	srai	r3,r3,18
 8022bf8:	18c0ffcc 	andi	r3,r3,1023
 8022bfc:	e13f8617 	ldw	r4,-488(fp)
 8022c00:	20c7883a 	add	r3,r4,r3
 8022c04:	18c00003 	ldbu	r3,0(r3)
 8022c08:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8022c0c:	e0bf9917 	ldw	r2,-412(fp)
 8022c10:	10800084 	addi	r2,r2,2
 8022c14:	e13f9617 	ldw	r4,-424(fp)
 8022c18:	e0ff8d17 	ldw	r3,-460(fp)
 8022c1c:	20c7883a 	add	r3,r4,r3
 8022c20:	1807d4ba 	srai	r3,r3,18
 8022c24:	18c0ffcc 	andi	r3,r3,1023
 8022c28:	e13f8617 	ldw	r4,-488(fp)
 8022c2c:	20c7883a 	add	r3,r4,r3
 8022c30:	18c00003 	ldbu	r3,0(r3)
 8022c34:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8022c38:	e0bf9917 	ldw	r2,-412(fp)
 8022c3c:	10800104 	addi	r2,r2,4
 8022c40:	e13f9617 	ldw	r4,-424(fp)
 8022c44:	e0ff8d17 	ldw	r3,-460(fp)
 8022c48:	20c7c83a 	sub	r3,r4,r3
 8022c4c:	1807d4ba 	srai	r3,r3,18
 8022c50:	18c0ffcc 	andi	r3,r3,1023
 8022c54:	e13f8617 	ldw	r4,-488(fp)
 8022c58:	20c7883a 	add	r3,r4,r3
 8022c5c:	18c00003 	ldbu	r3,0(r3)
 8022c60:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23,
 8022c64:	e0bf9917 	ldw	r2,-412(fp)
 8022c68:	108000c4 	addi	r2,r2,3
 8022c6c:	e0ff8e17 	ldw	r3,-456(fp)
 8022c70:	1807d4ba 	srai	r3,r3,18
 8022c74:	18c0ffcc 	andi	r3,r3,1023
 8022c78:	e13f8617 	ldw	r4,-488(fp)
 8022c7c:	20c7883a 	add	r3,r4,r3
 8022c80:	18c00003 	ldbu	r3,0(r3)
 8022c84:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 7;		/* advance pointer to next row */
 8022c88:	e0bf8417 	ldw	r2,-496(fp)
 8022c8c:	10800704 	addi	r2,r2,28
 8022c90:	e0bf8415 	stw	r2,-496(fp)

	/* Pass 2: process 14 rows from work array, store into output array.
	* 7-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/14).
	*/
	wsptr = workspace;
	for (ctr = 0; ctr < 14; ctr++) {
 8022c94:	e0bf8517 	ldw	r2,-492(fp)
 8022c98:	10800044 	addi	r2,r2,1
 8022c9c:	e0bf8515 	stw	r2,-492(fp)
 8022ca0:	e0bf8517 	ldw	r2,-492(fp)
 8022ca4:	10800390 	cmplti	r2,r2,14
 8022ca8:	103f111e 	bne	r2,zero,80228f0 <jpeg_idct_7x14+0x708>
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 7;		/* advance pointer to next row */
	}
}
 8022cac:	e037883a 	mov	sp,fp
 8022cb0:	dfc00217 	ldw	ra,8(sp)
 8022cb4:	df000117 	ldw	fp,4(sp)
 8022cb8:	dc000017 	ldw	r16,0(sp)
 8022cbc:	dec00304 	addi	sp,sp,12
 8022cc0:	f800283a 	ret

08022cc4 <jpeg_idct_6x12>:

GLOBAL(void)
	jpeg_idct_6x12 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8022cc4:	deff9b04 	addi	sp,sp,-404
 8022cc8:	dfc06415 	stw	ra,400(sp)
 8022ccc:	df006315 	stw	fp,396(sp)
 8022cd0:	dc006215 	stw	r16,392(sp)
 8022cd4:	df006204 	addi	fp,sp,392
 8022cd8:	e13ffc15 	stw	r4,-16(fp)
 8022cdc:	e17ffd15 	stw	r5,-12(fp)
 8022ce0:	e1bffe15 	stw	r6,-8(fp)
 8022ce4:	e1ffff15 	stw	r7,-4(fp)
	INT32 z1, z2, z3, z4;
	JCOEFPTR inptr;
	ISLOW_MULT_TYPE * quantptr;
	int * wsptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8022ce8:	e0bffc17 	ldw	r2,-16(fp)
 8022cec:	10804917 	ldw	r2,292(r2)
 8022cf0:	10802004 	addi	r2,r2,128
 8022cf4:	e0bfa215 	stw	r2,-376(fp)
	SHIFT_TEMPS

		/* Pass 1: process columns from input, store into work array.
		* 12-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/24).
		*/
		inptr = coef_block;
 8022cf8:	e0bffe17 	ldw	r2,-8(fp)
 8022cfc:	e0bf9e15 	stw	r2,-392(fp)
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8022d00:	e0bffd17 	ldw	r2,-12(fp)
 8022d04:	10801517 	ldw	r2,84(r2)
 8022d08:	e0bf9f15 	stw	r2,-388(fp)
	wsptr = workspace;
 8022d0c:	e0bfb404 	addi	r2,fp,-304
 8022d10:	e0bfa015 	stw	r2,-384(fp)
	for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8022d14:	e03fa115 	stw	zero,-380(fp)
 8022d18:	00016e06 	br	80232d4 <jpeg_idct_6x12+0x610>
		/* Even part */

		z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8022d1c:	e0bf9e17 	ldw	r2,-392(fp)
 8022d20:	1080000b 	ldhu	r2,0(r2)
 8022d24:	10ffffcc 	andi	r3,r2,65535
 8022d28:	18e0001c 	xori	r3,r3,32768
 8022d2c:	18e00004 	addi	r3,r3,-32768
 8022d30:	e0bf9f17 	ldw	r2,-388(fp)
 8022d34:	10800017 	ldw	r2,0(r2)
 8022d38:	1809883a 	mov	r4,r3
 8022d3c:	100b883a 	mov	r5,r2
 8022d40:	802c2180 	call	802c218 <__mulsi3>
 8022d44:	e0bfa315 	stw	r2,-372(fp)
		z3 <<= CONST_BITS;
 8022d48:	e0bfa317 	ldw	r2,-372(fp)
 8022d4c:	1004937a 	slli	r2,r2,13
 8022d50:	e0bfa315 	stw	r2,-372(fp)
		/* Add fudge factor here for final descale. */
		z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 8022d54:	e0bfa317 	ldw	r2,-372(fp)
 8022d58:	10810004 	addi	r2,r2,1024
 8022d5c:	e0bfa315 	stw	r2,-372(fp)

		z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8022d60:	e0bf9e17 	ldw	r2,-392(fp)
 8022d64:	10801004 	addi	r2,r2,64
 8022d68:	1080000b 	ldhu	r2,0(r2)
 8022d6c:	10ffffcc 	andi	r3,r2,65535
 8022d70:	18e0001c 	xori	r3,r3,32768
 8022d74:	18e00004 	addi	r3,r3,-32768
 8022d78:	e0bf9f17 	ldw	r2,-388(fp)
 8022d7c:	10802004 	addi	r2,r2,128
 8022d80:	10800017 	ldw	r2,0(r2)
 8022d84:	1809883a 	mov	r4,r3
 8022d88:	100b883a 	mov	r5,r2
 8022d8c:	802c2180 	call	802c218 <__mulsi3>
 8022d90:	e0bfa415 	stw	r2,-368(fp)
		z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8022d94:	e13fa417 	ldw	r4,-368(fp)
 8022d98:	0149cc44 	movi	r5,10033
 8022d9c:	802c2180 	call	802c218 <__mulsi3>
 8022da0:	e0bfa415 	stw	r2,-368(fp)

		tmp10 = z3 + z4;
 8022da4:	e0ffa317 	ldw	r3,-372(fp)
 8022da8:	e0bfa417 	ldw	r2,-368(fp)
 8022dac:	1885883a 	add	r2,r3,r2
 8022db0:	e0bfa515 	stw	r2,-364(fp)
		tmp11 = z3 - z4;
 8022db4:	e0ffa317 	ldw	r3,-372(fp)
 8022db8:	e0bfa417 	ldw	r2,-368(fp)
 8022dbc:	1885c83a 	sub	r2,r3,r2
 8022dc0:	e0bfa615 	stw	r2,-360(fp)

		z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8022dc4:	e0bf9e17 	ldw	r2,-392(fp)
 8022dc8:	10800804 	addi	r2,r2,32
 8022dcc:	1080000b 	ldhu	r2,0(r2)
 8022dd0:	10ffffcc 	andi	r3,r2,65535
 8022dd4:	18e0001c 	xori	r3,r3,32768
 8022dd8:	18e00004 	addi	r3,r3,-32768
 8022ddc:	e0bf9f17 	ldw	r2,-388(fp)
 8022de0:	10801004 	addi	r2,r2,64
 8022de4:	10800017 	ldw	r2,0(r2)
 8022de8:	1809883a 	mov	r4,r3
 8022dec:	100b883a 	mov	r5,r2
 8022df0:	802c2180 	call	802c218 <__mulsi3>
 8022df4:	e0bfa715 	stw	r2,-356(fp)
		z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8022df8:	e13fa717 	ldw	r4,-356(fp)
 8022dfc:	014aed84 	movi	r5,11190
 8022e00:	802c2180 	call	802c218 <__mulsi3>
 8022e04:	e0bfa415 	stw	r2,-368(fp)
		z1 <<= CONST_BITS;
 8022e08:	e0bfa717 	ldw	r2,-356(fp)
 8022e0c:	1004937a 	slli	r2,r2,13
 8022e10:	e0bfa715 	stw	r2,-356(fp)
		z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8022e14:	e0bf9e17 	ldw	r2,-392(fp)
 8022e18:	10801804 	addi	r2,r2,96
 8022e1c:	1080000b 	ldhu	r2,0(r2)
 8022e20:	10ffffcc 	andi	r3,r2,65535
 8022e24:	18e0001c 	xori	r3,r3,32768
 8022e28:	18e00004 	addi	r3,r3,-32768
 8022e2c:	e0bf9f17 	ldw	r2,-388(fp)
 8022e30:	10803004 	addi	r2,r2,192
 8022e34:	10800017 	ldw	r2,0(r2)
 8022e38:	1809883a 	mov	r4,r3
 8022e3c:	100b883a 	mov	r5,r2
 8022e40:	802c2180 	call	802c218 <__mulsi3>
 8022e44:	e0bfa815 	stw	r2,-352(fp)
		z2 <<= CONST_BITS;
 8022e48:	e0bfa817 	ldw	r2,-352(fp)
 8022e4c:	1004937a 	slli	r2,r2,13
 8022e50:	e0bfa815 	stw	r2,-352(fp)

		tmp12 = z1 - z2;
 8022e54:	e0ffa717 	ldw	r3,-356(fp)
 8022e58:	e0bfa817 	ldw	r2,-352(fp)
 8022e5c:	1885c83a 	sub	r2,r3,r2
 8022e60:	e0bfa915 	stw	r2,-348(fp)

		tmp21 = z3 + tmp12;
 8022e64:	e0ffa317 	ldw	r3,-372(fp)
 8022e68:	e0bfa917 	ldw	r2,-348(fp)
 8022e6c:	1885883a 	add	r2,r3,r2
 8022e70:	e0bfaa15 	stw	r2,-344(fp)
		tmp24 = z3 - tmp12;
 8022e74:	e0ffa317 	ldw	r3,-372(fp)
 8022e78:	e0bfa917 	ldw	r2,-348(fp)
 8022e7c:	1885c83a 	sub	r2,r3,r2
 8022e80:	e0bfab15 	stw	r2,-340(fp)

		tmp12 = z4 + z2;
 8022e84:	e0ffa417 	ldw	r3,-368(fp)
 8022e88:	e0bfa817 	ldw	r2,-352(fp)
 8022e8c:	1885883a 	add	r2,r3,r2
 8022e90:	e0bfa915 	stw	r2,-348(fp)

		tmp20 = tmp10 + tmp12;
 8022e94:	e0ffa517 	ldw	r3,-364(fp)
 8022e98:	e0bfa917 	ldw	r2,-348(fp)
 8022e9c:	1885883a 	add	r2,r3,r2
 8022ea0:	e0bfac15 	stw	r2,-336(fp)
		tmp25 = tmp10 - tmp12;
 8022ea4:	e0ffa517 	ldw	r3,-364(fp)
 8022ea8:	e0bfa917 	ldw	r2,-348(fp)
 8022eac:	1885c83a 	sub	r2,r3,r2
 8022eb0:	e0bfad15 	stw	r2,-332(fp)

		tmp12 = z4 - z1 - z2;
 8022eb4:	e0ffa417 	ldw	r3,-368(fp)
 8022eb8:	e0bfa717 	ldw	r2,-356(fp)
 8022ebc:	1887c83a 	sub	r3,r3,r2
 8022ec0:	e0bfa817 	ldw	r2,-352(fp)
 8022ec4:	1885c83a 	sub	r2,r3,r2
 8022ec8:	e0bfa915 	stw	r2,-348(fp)

		tmp22 = tmp11 + tmp12;
 8022ecc:	e0ffa617 	ldw	r3,-360(fp)
 8022ed0:	e0bfa917 	ldw	r2,-348(fp)
 8022ed4:	1885883a 	add	r2,r3,r2
 8022ed8:	e0bfae15 	stw	r2,-328(fp)
		tmp23 = tmp11 - tmp12;
 8022edc:	e0ffa617 	ldw	r3,-360(fp)
 8022ee0:	e0bfa917 	ldw	r2,-348(fp)
 8022ee4:	1885c83a 	sub	r2,r3,r2
 8022ee8:	e0bfaf15 	stw	r2,-324(fp)

		/* Odd part */

		z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8022eec:	e0bf9e17 	ldw	r2,-392(fp)
 8022ef0:	10800404 	addi	r2,r2,16
 8022ef4:	1080000b 	ldhu	r2,0(r2)
 8022ef8:	10ffffcc 	andi	r3,r2,65535
 8022efc:	18e0001c 	xori	r3,r3,32768
 8022f00:	18e00004 	addi	r3,r3,-32768
 8022f04:	e0bf9f17 	ldw	r2,-388(fp)
 8022f08:	10800804 	addi	r2,r2,32
 8022f0c:	10800017 	ldw	r2,0(r2)
 8022f10:	1809883a 	mov	r4,r3
 8022f14:	100b883a 	mov	r5,r2
 8022f18:	802c2180 	call	802c218 <__mulsi3>
 8022f1c:	e0bfa715 	stw	r2,-356(fp)
		z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8022f20:	e0bf9e17 	ldw	r2,-392(fp)
 8022f24:	10800c04 	addi	r2,r2,48
 8022f28:	1080000b 	ldhu	r2,0(r2)
 8022f2c:	10ffffcc 	andi	r3,r2,65535
 8022f30:	18e0001c 	xori	r3,r3,32768
 8022f34:	18e00004 	addi	r3,r3,-32768
 8022f38:	e0bf9f17 	ldw	r2,-388(fp)
 8022f3c:	10801804 	addi	r2,r2,96
 8022f40:	10800017 	ldw	r2,0(r2)
 8022f44:	1809883a 	mov	r4,r3
 8022f48:	100b883a 	mov	r5,r2
 8022f4c:	802c2180 	call	802c218 <__mulsi3>
 8022f50:	e0bfa815 	stw	r2,-352(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8022f54:	e0bf9e17 	ldw	r2,-392(fp)
 8022f58:	10801404 	addi	r2,r2,80
 8022f5c:	1080000b 	ldhu	r2,0(r2)
 8022f60:	10ffffcc 	andi	r3,r2,65535
 8022f64:	18e0001c 	xori	r3,r3,32768
 8022f68:	18e00004 	addi	r3,r3,-32768
 8022f6c:	e0bf9f17 	ldw	r2,-388(fp)
 8022f70:	10802804 	addi	r2,r2,160
 8022f74:	10800017 	ldw	r2,0(r2)
 8022f78:	1809883a 	mov	r4,r3
 8022f7c:	100b883a 	mov	r5,r2
 8022f80:	802c2180 	call	802c218 <__mulsi3>
 8022f84:	e0bfa315 	stw	r2,-372(fp)
		z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8022f88:	e0bf9e17 	ldw	r2,-392(fp)
 8022f8c:	10801c04 	addi	r2,r2,112
 8022f90:	1080000b 	ldhu	r2,0(r2)
 8022f94:	10ffffcc 	andi	r3,r2,65535
 8022f98:	18e0001c 	xori	r3,r3,32768
 8022f9c:	18e00004 	addi	r3,r3,-32768
 8022fa0:	e0bf9f17 	ldw	r2,-388(fp)
 8022fa4:	10803804 	addi	r2,r2,224
 8022fa8:	10800017 	ldw	r2,0(r2)
 8022fac:	1809883a 	mov	r4,r3
 8022fb0:	100b883a 	mov	r5,r2
 8022fb4:	802c2180 	call	802c218 <__mulsi3>
 8022fb8:	e0bfa415 	stw	r2,-368(fp)

		tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8022fbc:	e13fa817 	ldw	r4,-352(fp)
 8022fc0:	014a73c4 	movi	r5,10703
 8022fc4:	802c2180 	call	802c218 <__mulsi3>
 8022fc8:	e0bfa615 	stw	r2,-360(fp)
		tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 8022fcc:	e13fa817 	ldw	r4,-352(fp)
 8022fd0:	017babc4 	movi	r5,-4433
 8022fd4:	802c2180 	call	802c218 <__mulsi3>
 8022fd8:	e0bfb015 	stw	r2,-320(fp)

		tmp10 = z1 + z3;
 8022fdc:	e0ffa717 	ldw	r3,-356(fp)
 8022fe0:	e0bfa317 	ldw	r2,-372(fp)
 8022fe4:	1885883a 	add	r2,r3,r2
 8022fe8:	e0bfa515 	stw	r2,-364(fp)
		tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8022fec:	e0ffa517 	ldw	r3,-364(fp)
 8022ff0:	e0bfa417 	ldw	r2,-368(fp)
 8022ff4:	1885883a 	add	r2,r3,r2
 8022ff8:	1009883a 	mov	r4,r2
 8022ffc:	0146e344 	movi	r5,7053
 8023000:	802c2180 	call	802c218 <__mulsi3>
 8023004:	e0bfb115 	stw	r2,-316(fp)
		tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 8023008:	e13fa517 	ldw	r4,-364(fp)
 802300c:	014216c4 	movi	r5,2139
 8023010:	802c2180 	call	802c218 <__mulsi3>
 8023014:	1007883a 	mov	r3,r2
 8023018:	e0bfb117 	ldw	r2,-316(fp)
 802301c:	1885883a 	add	r2,r3,r2
 8023020:	e0bfa915 	stw	r2,-348(fp)
		tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8023024:	e0ffa917 	ldw	r3,-348(fp)
 8023028:	e0bfa617 	ldw	r2,-360(fp)
 802302c:	18a1883a 	add	r16,r3,r2
 8023030:	e13fa717 	ldw	r4,-356(fp)
 8023034:	01423dc4 	movi	r5,2295
 8023038:	802c2180 	call	802c218 <__mulsi3>
 802303c:	8085883a 	add	r2,r16,r2
 8023040:	e0bfa515 	stw	r2,-364(fp)
		tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8023044:	e0ffa317 	ldw	r3,-372(fp)
 8023048:	e0bfa417 	ldw	r2,-368(fp)
 802304c:	1885883a 	add	r2,r3,r2
 8023050:	1009883a 	mov	r4,r2
 8023054:	0177a2c4 	movi	r5,-8565
 8023058:	802c2180 	call	802c218 <__mulsi3>
 802305c:	e0bfb215 	stw	r2,-312(fp)
		tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8023060:	e0ffb217 	ldw	r3,-312(fp)
 8023064:	e0bfb017 	ldw	r2,-320(fp)
 8023068:	18a1883a 	add	r16,r3,r2
 802306c:	e13fa317 	ldw	r4,-372(fp)
 8023070:	01742c04 	movi	r5,-12112
 8023074:	802c2180 	call	802c218 <__mulsi3>
 8023078:	8085883a 	add	r2,r16,r2
 802307c:	e0ffa917 	ldw	r3,-348(fp)
 8023080:	1885883a 	add	r2,r3,r2
 8023084:	e0bfa915 	stw	r2,-348(fp)
		tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8023088:	e0ffb117 	ldw	r3,-316(fp)
 802308c:	e0bfa617 	ldw	r2,-360(fp)
 8023090:	18a1c83a 	sub	r16,r3,r2
 8023094:	e13fa417 	ldw	r4,-368(fp)
 8023098:	014cb184 	movi	r5,12998
 802309c:	802c2180 	call	802c218 <__mulsi3>
 80230a0:	8085883a 	add	r2,r16,r2
 80230a4:	e0ffb217 	ldw	r3,-312(fp)
 80230a8:	1885883a 	add	r2,r3,r2
 80230ac:	e0bfb215 	stw	r2,-312(fp)
		tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80230b0:	e13fa717 	ldw	r4,-356(fp)
 80230b4:	017a9704 	movi	r5,-5540
 80230b8:	802c2180 	call	802c218 <__mulsi3>
 80230bc:	1007883a 	mov	r3,r2
 80230c0:	e0bfb017 	ldw	r2,-320(fp)
 80230c4:	18a1883a 	add	r16,r3,r2
			MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */
 80230c8:	e13fa417 	ldw	r4,-368(fp)
 80230cc:	01702304 	movi	r5,-16244
 80230d0:	802c2180 	call	802c218 <__mulsi3>
		tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
		tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
		tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
		tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
		tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
		tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80230d4:	8085883a 	add	r2,r16,r2
 80230d8:	e0ffb117 	ldw	r3,-316(fp)
 80230dc:	1885883a 	add	r2,r3,r2
 80230e0:	e0bfb115 	stw	r2,-316(fp)
			MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */

		z1 -= z4;
 80230e4:	e0ffa717 	ldw	r3,-356(fp)
 80230e8:	e0bfa417 	ldw	r2,-368(fp)
 80230ec:	1885c83a 	sub	r2,r3,r2
 80230f0:	e0bfa715 	stw	r2,-356(fp)
		z2 -= z3;
 80230f4:	e0ffa817 	ldw	r3,-352(fp)
 80230f8:	e0bfa317 	ldw	r2,-372(fp)
 80230fc:	1885c83a 	sub	r2,r3,r2
 8023100:	e0bfa815 	stw	r2,-352(fp)
		z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8023104:	e0ffa717 	ldw	r3,-356(fp)
 8023108:	e0bfa817 	ldw	r2,-352(fp)
 802310c:	1885883a 	add	r2,r3,r2
 8023110:	1009883a 	mov	r4,r2
 8023114:	01445444 	movi	r5,4433
 8023118:	802c2180 	call	802c218 <__mulsi3>
 802311c:	e0bfa315 	stw	r2,-372(fp)
		tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8023120:	e13fa717 	ldw	r4,-356(fp)
 8023124:	01461f84 	movi	r5,6270
 8023128:	802c2180 	call	802c218 <__mulsi3>
 802312c:	1007883a 	mov	r3,r2
 8023130:	e0bfa317 	ldw	r2,-372(fp)
 8023134:	1885883a 	add	r2,r3,r2
 8023138:	e0bfa615 	stw	r2,-360(fp)
		tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 802313c:	e13fa817 	ldw	r4,-352(fp)
 8023140:	017137c4 	movi	r5,-15137
 8023144:	802c2180 	call	802c218 <__mulsi3>
 8023148:	1007883a 	mov	r3,r2
 802314c:	e0bfa317 	ldw	r2,-372(fp)
 8023150:	1885883a 	add	r2,r3,r2
 8023154:	e0bfb015 	stw	r2,-320(fp)

		/* Final output stage */

		wsptr[6*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8023158:	e0ffac17 	ldw	r3,-336(fp)
 802315c:	e0bfa517 	ldw	r2,-364(fp)
 8023160:	1885883a 	add	r2,r3,r2
 8023164:	1007d2fa 	srai	r3,r2,11
 8023168:	e0bfa017 	ldw	r2,-384(fp)
 802316c:	10c00015 	stw	r3,0(r2)
		wsptr[6*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8023170:	e0bfa017 	ldw	r2,-384(fp)
 8023174:	10804204 	addi	r2,r2,264
 8023178:	e13fac17 	ldw	r4,-336(fp)
 802317c:	e0ffa517 	ldw	r3,-364(fp)
 8023180:	20c7c83a 	sub	r3,r4,r3
 8023184:	1807d2fa 	srai	r3,r3,11
 8023188:	10c00015 	stw	r3,0(r2)
		wsptr[6*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 802318c:	e0bfa017 	ldw	r2,-384(fp)
 8023190:	10800604 	addi	r2,r2,24
 8023194:	e13faa17 	ldw	r4,-344(fp)
 8023198:	e0ffa617 	ldw	r3,-360(fp)
 802319c:	20c7883a 	add	r3,r4,r3
 80231a0:	1807d2fa 	srai	r3,r3,11
 80231a4:	10c00015 	stw	r3,0(r2)
		wsptr[6*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80231a8:	e0bfa017 	ldw	r2,-384(fp)
 80231ac:	10803c04 	addi	r2,r2,240
 80231b0:	e13faa17 	ldw	r4,-344(fp)
 80231b4:	e0ffa617 	ldw	r3,-360(fp)
 80231b8:	20c7c83a 	sub	r3,r4,r3
 80231bc:	1807d2fa 	srai	r3,r3,11
 80231c0:	10c00015 	stw	r3,0(r2)
		wsptr[6*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80231c4:	e0bfa017 	ldw	r2,-384(fp)
 80231c8:	10800c04 	addi	r2,r2,48
 80231cc:	e13fae17 	ldw	r4,-328(fp)
 80231d0:	e0ffa917 	ldw	r3,-348(fp)
 80231d4:	20c7883a 	add	r3,r4,r3
 80231d8:	1807d2fa 	srai	r3,r3,11
 80231dc:	10c00015 	stw	r3,0(r2)
		wsptr[6*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80231e0:	e0bfa017 	ldw	r2,-384(fp)
 80231e4:	10803604 	addi	r2,r2,216
 80231e8:	e13fae17 	ldw	r4,-328(fp)
 80231ec:	e0ffa917 	ldw	r3,-348(fp)
 80231f0:	20c7c83a 	sub	r3,r4,r3
 80231f4:	1807d2fa 	srai	r3,r3,11
 80231f8:	10c00015 	stw	r3,0(r2)
		wsptr[6*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80231fc:	e0bfa017 	ldw	r2,-384(fp)
 8023200:	10801204 	addi	r2,r2,72
 8023204:	e13faf17 	ldw	r4,-324(fp)
 8023208:	e0ffb217 	ldw	r3,-312(fp)
 802320c:	20c7883a 	add	r3,r4,r3
 8023210:	1807d2fa 	srai	r3,r3,11
 8023214:	10c00015 	stw	r3,0(r2)
		wsptr[6*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8023218:	e0bfa017 	ldw	r2,-384(fp)
 802321c:	10803004 	addi	r2,r2,192
 8023220:	e13faf17 	ldw	r4,-324(fp)
 8023224:	e0ffb217 	ldw	r3,-312(fp)
 8023228:	20c7c83a 	sub	r3,r4,r3
 802322c:	1807d2fa 	srai	r3,r3,11
 8023230:	10c00015 	stw	r3,0(r2)
		wsptr[6*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8023234:	e0bfa017 	ldw	r2,-384(fp)
 8023238:	10801804 	addi	r2,r2,96
 802323c:	e13fab17 	ldw	r4,-340(fp)
 8023240:	e0ffb017 	ldw	r3,-320(fp)
 8023244:	20c7883a 	add	r3,r4,r3
 8023248:	1807d2fa 	srai	r3,r3,11
 802324c:	10c00015 	stw	r3,0(r2)
		wsptr[6*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8023250:	e0bfa017 	ldw	r2,-384(fp)
 8023254:	10802a04 	addi	r2,r2,168
 8023258:	e13fab17 	ldw	r4,-340(fp)
 802325c:	e0ffb017 	ldw	r3,-320(fp)
 8023260:	20c7c83a 	sub	r3,r4,r3
 8023264:	1807d2fa 	srai	r3,r3,11
 8023268:	10c00015 	stw	r3,0(r2)
		wsptr[6*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 802326c:	e0bfa017 	ldw	r2,-384(fp)
 8023270:	10801e04 	addi	r2,r2,120
 8023274:	e13fad17 	ldw	r4,-332(fp)
 8023278:	e0ffb117 	ldw	r3,-316(fp)
 802327c:	20c7883a 	add	r3,r4,r3
 8023280:	1807d2fa 	srai	r3,r3,11
 8023284:	10c00015 	stw	r3,0(r2)
		wsptr[6*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8023288:	e0bfa017 	ldw	r2,-384(fp)
 802328c:	10802404 	addi	r2,r2,144
 8023290:	e13fad17 	ldw	r4,-332(fp)
 8023294:	e0ffb117 	ldw	r3,-316(fp)
 8023298:	20c7c83a 	sub	r3,r4,r3
 802329c:	1807d2fa 	srai	r3,r3,11
 80232a0:	10c00015 	stw	r3,0(r2)
		* 12-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/24).
		*/
		inptr = coef_block;
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
	wsptr = workspace;
	for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 80232a4:	e0bfa117 	ldw	r2,-380(fp)
 80232a8:	10800044 	addi	r2,r2,1
 80232ac:	e0bfa115 	stw	r2,-380(fp)
 80232b0:	e0bf9e17 	ldw	r2,-392(fp)
 80232b4:	10800084 	addi	r2,r2,2
 80232b8:	e0bf9e15 	stw	r2,-392(fp)
 80232bc:	e0bf9f17 	ldw	r2,-388(fp)
 80232c0:	10800104 	addi	r2,r2,4
 80232c4:	e0bf9f15 	stw	r2,-388(fp)
 80232c8:	e0bfa017 	ldw	r2,-384(fp)
 80232cc:	10800104 	addi	r2,r2,4
 80232d0:	e0bfa015 	stw	r2,-384(fp)
 80232d4:	e0bfa117 	ldw	r2,-380(fp)
 80232d8:	10800190 	cmplti	r2,r2,6
 80232dc:	103e8f1e 	bne	r2,zero,8022d1c <jpeg_idct_6x12+0x58>
	}

	/* Pass 2: process 12 rows from work array, store into output array.
	* 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
	*/
	wsptr = workspace;
 80232e0:	e0bfb404 	addi	r2,fp,-304
 80232e4:	e0bfa015 	stw	r2,-384(fp)
	for (ctr = 0; ctr < 12; ctr++) {
 80232e8:	e03fa115 	stw	zero,-380(fp)
 80232ec:	0000a106 	br	8023574 <jpeg_idct_6x12+0x8b0>
		outptr = output_buf[ctr] + output_col;
 80232f0:	e0bfa117 	ldw	r2,-380(fp)
 80232f4:	1085883a 	add	r2,r2,r2
 80232f8:	1085883a 	add	r2,r2,r2
 80232fc:	e0ffff17 	ldw	r3,-4(fp)
 8023300:	1885883a 	add	r2,r3,r2
 8023304:	10c00017 	ldw	r3,0(r2)
 8023308:	e0800317 	ldw	r2,12(fp)
 802330c:	1885883a 	add	r2,r3,r2
 8023310:	e0bfb315 	stw	r2,-308(fp)

		/* Even part */

		/* Add fudge factor here for final descale. */
		tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8023314:	e0bfa017 	ldw	r2,-384(fp)
 8023318:	10800017 	ldw	r2,0(r2)
 802331c:	10800404 	addi	r2,r2,16
 8023320:	e0bfa515 	stw	r2,-364(fp)
		tmp10 <<= CONST_BITS;
 8023324:	e0bfa517 	ldw	r2,-364(fp)
 8023328:	1004937a 	slli	r2,r2,13
 802332c:	e0bfa515 	stw	r2,-364(fp)
		tmp12 = (INT32) wsptr[4];
 8023330:	e0bfa017 	ldw	r2,-384(fp)
 8023334:	10800404 	addi	r2,r2,16
 8023338:	10800017 	ldw	r2,0(r2)
 802333c:	e0bfa915 	stw	r2,-348(fp)
		tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 8023340:	e13fa917 	ldw	r4,-348(fp)
 8023344:	0145a844 	movi	r5,5793
 8023348:	802c2180 	call	802c218 <__mulsi3>
 802334c:	e0bfac15 	stw	r2,-336(fp)
		tmp11 = tmp10 + tmp20;
 8023350:	e0ffa517 	ldw	r3,-364(fp)
 8023354:	e0bfac17 	ldw	r2,-336(fp)
 8023358:	1885883a 	add	r2,r3,r2
 802335c:	e0bfa615 	stw	r2,-360(fp)
		tmp21 = tmp10 - tmp20 - tmp20;
 8023360:	e0ffa517 	ldw	r3,-364(fp)
 8023364:	e0bfac17 	ldw	r2,-336(fp)
 8023368:	1887c83a 	sub	r3,r3,r2
 802336c:	e0bfac17 	ldw	r2,-336(fp)
 8023370:	1885c83a 	sub	r2,r3,r2
 8023374:	e0bfaa15 	stw	r2,-344(fp)
		tmp20 = (INT32) wsptr[2];
 8023378:	e0bfa017 	ldw	r2,-384(fp)
 802337c:	10800204 	addi	r2,r2,8
 8023380:	10800017 	ldw	r2,0(r2)
 8023384:	e0bfac15 	stw	r2,-336(fp)
		tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 8023388:	e13fac17 	ldw	r4,-336(fp)
 802338c:	0149cc44 	movi	r5,10033
 8023390:	802c2180 	call	802c218 <__mulsi3>
 8023394:	e0bfa515 	stw	r2,-364(fp)
		tmp20 = tmp11 + tmp10;
 8023398:	e0ffa617 	ldw	r3,-360(fp)
 802339c:	e0bfa517 	ldw	r2,-364(fp)
 80233a0:	1885883a 	add	r2,r3,r2
 80233a4:	e0bfac15 	stw	r2,-336(fp)
		tmp22 = tmp11 - tmp10;
 80233a8:	e0ffa617 	ldw	r3,-360(fp)
 80233ac:	e0bfa517 	ldw	r2,-364(fp)
 80233b0:	1885c83a 	sub	r2,r3,r2
 80233b4:	e0bfae15 	stw	r2,-328(fp)

		/* Odd part */

		z1 = (INT32) wsptr[1];
 80233b8:	e0bfa017 	ldw	r2,-384(fp)
 80233bc:	10800104 	addi	r2,r2,4
 80233c0:	10800017 	ldw	r2,0(r2)
 80233c4:	e0bfa715 	stw	r2,-356(fp)
		z2 = (INT32) wsptr[3];
 80233c8:	e0bfa017 	ldw	r2,-384(fp)
 80233cc:	10800304 	addi	r2,r2,12
 80233d0:	10800017 	ldw	r2,0(r2)
 80233d4:	e0bfa815 	stw	r2,-352(fp)
		z3 = (INT32) wsptr[5];
 80233d8:	e0bfa017 	ldw	r2,-384(fp)
 80233dc:	10800504 	addi	r2,r2,20
 80233e0:	10800017 	ldw	r2,0(r2)
 80233e4:	e0bfa315 	stw	r2,-372(fp)
		tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80233e8:	e0ffa717 	ldw	r3,-356(fp)
 80233ec:	e0bfa317 	ldw	r2,-372(fp)
 80233f0:	1885883a 	add	r2,r3,r2
 80233f4:	1009883a 	mov	r4,r2
 80233f8:	0142ed84 	movi	r5,2998
 80233fc:	802c2180 	call	802c218 <__mulsi3>
 8023400:	e0bfa615 	stw	r2,-360(fp)
		tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 8023404:	e0ffa717 	ldw	r3,-356(fp)
 8023408:	e0bfa817 	ldw	r2,-352(fp)
 802340c:	1885883a 	add	r2,r3,r2
 8023410:	1006937a 	slli	r3,r2,13
 8023414:	e0bfa617 	ldw	r2,-360(fp)
 8023418:	1885883a 	add	r2,r3,r2
 802341c:	e0bfa515 	stw	r2,-364(fp)
		tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 8023420:	e0ffa317 	ldw	r3,-372(fp)
 8023424:	e0bfa817 	ldw	r2,-352(fp)
 8023428:	1885c83a 	sub	r2,r3,r2
 802342c:	1006937a 	slli	r3,r2,13
 8023430:	e0bfa617 	ldw	r2,-360(fp)
 8023434:	1885883a 	add	r2,r3,r2
 8023438:	e0bfa915 	stw	r2,-348(fp)
		tmp11 = (z1 - z2 - z3) << CONST_BITS;
 802343c:	e0ffa717 	ldw	r3,-356(fp)
 8023440:	e0bfa817 	ldw	r2,-352(fp)
 8023444:	1887c83a 	sub	r3,r3,r2
 8023448:	e0bfa317 	ldw	r2,-372(fp)
 802344c:	1885c83a 	sub	r2,r3,r2
 8023450:	1004937a 	slli	r2,r2,13
 8023454:	e0bfa615 	stw	r2,-360(fp)

		/* Final output stage */

		outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8023458:	e0ffac17 	ldw	r3,-336(fp)
 802345c:	e0bfa517 	ldw	r2,-364(fp)
 8023460:	1885883a 	add	r2,r3,r2
 8023464:	1005d4ba 	srai	r2,r2,18
 8023468:	1080ffcc 	andi	r2,r2,1023
 802346c:	e0ffa217 	ldw	r3,-376(fp)
 8023470:	1885883a 	add	r2,r3,r2
 8023474:	10c00003 	ldbu	r3,0(r2)
 8023478:	e0bfb317 	ldw	r2,-308(fp)
 802347c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8023480:	e0bfb317 	ldw	r2,-308(fp)
 8023484:	10800144 	addi	r2,r2,5
 8023488:	e13fac17 	ldw	r4,-336(fp)
 802348c:	e0ffa517 	ldw	r3,-364(fp)
 8023490:	20c7c83a 	sub	r3,r4,r3
 8023494:	1807d4ba 	srai	r3,r3,18
 8023498:	18c0ffcc 	andi	r3,r3,1023
 802349c:	e13fa217 	ldw	r4,-376(fp)
 80234a0:	20c7883a 	add	r3,r4,r3
 80234a4:	18c00003 	ldbu	r3,0(r3)
 80234a8:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80234ac:	e0bfb317 	ldw	r2,-308(fp)
 80234b0:	10800044 	addi	r2,r2,1
 80234b4:	e13faa17 	ldw	r4,-344(fp)
 80234b8:	e0ffa617 	ldw	r3,-360(fp)
 80234bc:	20c7883a 	add	r3,r4,r3
 80234c0:	1807d4ba 	srai	r3,r3,18
 80234c4:	18c0ffcc 	andi	r3,r3,1023
 80234c8:	e13fa217 	ldw	r4,-376(fp)
 80234cc:	20c7883a 	add	r3,r4,r3
 80234d0:	18c00003 	ldbu	r3,0(r3)
 80234d4:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80234d8:	e0bfb317 	ldw	r2,-308(fp)
 80234dc:	10800104 	addi	r2,r2,4
 80234e0:	e13faa17 	ldw	r4,-344(fp)
 80234e4:	e0ffa617 	ldw	r3,-360(fp)
 80234e8:	20c7c83a 	sub	r3,r4,r3
 80234ec:	1807d4ba 	srai	r3,r3,18
 80234f0:	18c0ffcc 	andi	r3,r3,1023
 80234f4:	e13fa217 	ldw	r4,-376(fp)
 80234f8:	20c7883a 	add	r3,r4,r3
 80234fc:	18c00003 	ldbu	r3,0(r3)
 8023500:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8023504:	e0bfb317 	ldw	r2,-308(fp)
 8023508:	10800084 	addi	r2,r2,2
 802350c:	e13fae17 	ldw	r4,-328(fp)
 8023510:	e0ffa917 	ldw	r3,-348(fp)
 8023514:	20c7883a 	add	r3,r4,r3
 8023518:	1807d4ba 	srai	r3,r3,18
 802351c:	18c0ffcc 	andi	r3,r3,1023
 8023520:	e13fa217 	ldw	r4,-376(fp)
 8023524:	20c7883a 	add	r3,r4,r3
 8023528:	18c00003 	ldbu	r3,0(r3)
 802352c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8023530:	e0bfb317 	ldw	r2,-308(fp)
 8023534:	108000c4 	addi	r2,r2,3
 8023538:	e13fae17 	ldw	r4,-328(fp)
 802353c:	e0ffa917 	ldw	r3,-348(fp)
 8023540:	20c7c83a 	sub	r3,r4,r3
 8023544:	1807d4ba 	srai	r3,r3,18
 8023548:	18c0ffcc 	andi	r3,r3,1023
 802354c:	e13fa217 	ldw	r4,-376(fp)
 8023550:	20c7883a 	add	r3,r4,r3
 8023554:	18c00003 	ldbu	r3,0(r3)
 8023558:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 6;		/* advance pointer to next row */
 802355c:	e0bfa017 	ldw	r2,-384(fp)
 8023560:	10800604 	addi	r2,r2,24
 8023564:	e0bfa015 	stw	r2,-384(fp)

	/* Pass 2: process 12 rows from work array, store into output array.
	* 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
	*/
	wsptr = workspace;
	for (ctr = 0; ctr < 12; ctr++) {
 8023568:	e0bfa117 	ldw	r2,-380(fp)
 802356c:	10800044 	addi	r2,r2,1
 8023570:	e0bfa115 	stw	r2,-380(fp)
 8023574:	e0bfa117 	ldw	r2,-380(fp)
 8023578:	10800310 	cmplti	r2,r2,12
 802357c:	103f5c1e 	bne	r2,zero,80232f0 <jpeg_idct_6x12+0x62c>
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 6;		/* advance pointer to next row */
	}
}
 8023580:	e037883a 	mov	sp,fp
 8023584:	dfc00217 	ldw	ra,8(sp)
 8023588:	df000117 	ldw	fp,4(sp)
 802358c:	dc000017 	ldw	r16,0(sp)
 8023590:	dec00304 	addi	sp,sp,12
 8023594:	f800283a 	ret

08023598 <jpeg_idct_5x10>:

GLOBAL(void)
	jpeg_idct_5x10 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8023598:	deffb304 	addi	sp,sp,-308
 802359c:	dfc04c15 	stw	ra,304(sp)
 80235a0:	df004b15 	stw	fp,300(sp)
 80235a4:	df004b04 	addi	fp,sp,300
 80235a8:	e13ffc15 	stw	r4,-16(fp)
 80235ac:	e17ffd15 	stw	r5,-12(fp)
 80235b0:	e1bffe15 	stw	r6,-8(fp)
 80235b4:	e1ffff15 	stw	r7,-4(fp)
	INT32 z1, z2, z3, z4, z5;
	JCOEFPTR inptr;
	ISLOW_MULT_TYPE * quantptr;
	int * wsptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80235b8:	e0bffc17 	ldw	r2,-16(fp)
 80235bc:	10804917 	ldw	r2,292(r2)
 80235c0:	10802004 	addi	r2,r2,128
 80235c4:	e0bfb915 	stw	r2,-284(fp)
	SHIFT_TEMPS

		/* Pass 1: process columns from input, store into work array.
		* 10-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/20).
		*/
		inptr = coef_block;
 80235c8:	e0bffe17 	ldw	r2,-8(fp)
 80235cc:	e0bfb515 	stw	r2,-300(fp)
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 80235d0:	e0bffd17 	ldw	r2,-12(fp)
 80235d4:	10801517 	ldw	r2,84(r2)
 80235d8:	e0bfb615 	stw	r2,-296(fp)
	wsptr = workspace;
 80235dc:	e0bfca04 	addi	r2,fp,-216
 80235e0:	e0bfb715 	stw	r2,-292(fp)
	for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 80235e4:	e03fb815 	stw	zero,-288(fp)
 80235e8:	00014606 	br	8023b04 <jpeg_idct_5x10+0x56c>
		/* Even part */

		z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80235ec:	e0bfb517 	ldw	r2,-300(fp)
 80235f0:	1080000b 	ldhu	r2,0(r2)
 80235f4:	10ffffcc 	andi	r3,r2,65535
 80235f8:	18e0001c 	xori	r3,r3,32768
 80235fc:	18e00004 	addi	r3,r3,-32768
 8023600:	e0bfb617 	ldw	r2,-296(fp)
 8023604:	10800017 	ldw	r2,0(r2)
 8023608:	1809883a 	mov	r4,r3
 802360c:	100b883a 	mov	r5,r2
 8023610:	802c2180 	call	802c218 <__mulsi3>
 8023614:	e0bfba15 	stw	r2,-280(fp)
		z3 <<= CONST_BITS;
 8023618:	e0bfba17 	ldw	r2,-280(fp)
 802361c:	1004937a 	slli	r2,r2,13
 8023620:	e0bfba15 	stw	r2,-280(fp)
		/* Add fudge factor here for final descale. */
		z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 8023624:	e0bfba17 	ldw	r2,-280(fp)
 8023628:	10810004 	addi	r2,r2,1024
 802362c:	e0bfba15 	stw	r2,-280(fp)
		z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8023630:	e0bfb517 	ldw	r2,-300(fp)
 8023634:	10801004 	addi	r2,r2,64
 8023638:	1080000b 	ldhu	r2,0(r2)
 802363c:	10ffffcc 	andi	r3,r2,65535
 8023640:	18e0001c 	xori	r3,r3,32768
 8023644:	18e00004 	addi	r3,r3,-32768
 8023648:	e0bfb617 	ldw	r2,-296(fp)
 802364c:	10802004 	addi	r2,r2,128
 8023650:	10800017 	ldw	r2,0(r2)
 8023654:	1809883a 	mov	r4,r3
 8023658:	100b883a 	mov	r5,r2
 802365c:	802c2180 	call	802c218 <__mulsi3>
 8023660:	e0bfbb15 	stw	r2,-276(fp)
		z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8023664:	e13fbb17 	ldw	r4,-276(fp)
 8023668:	01492744 	movi	r5,9373
 802366c:	802c2180 	call	802c218 <__mulsi3>
 8023670:	e0bfbc15 	stw	r2,-272(fp)
		z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8023674:	e13fbb17 	ldw	r4,-276(fp)
 8023678:	01437f04 	movi	r5,3580
 802367c:	802c2180 	call	802c218 <__mulsi3>
 8023680:	e0bfbd15 	stw	r2,-268(fp)
		tmp10 = z3 + z1;
 8023684:	e0ffba17 	ldw	r3,-280(fp)
 8023688:	e0bfbc17 	ldw	r2,-272(fp)
 802368c:	1885883a 	add	r2,r3,r2
 8023690:	e0bfbe15 	stw	r2,-264(fp)
		tmp11 = z3 - z2;
 8023694:	e0ffba17 	ldw	r3,-280(fp)
 8023698:	e0bfbd17 	ldw	r2,-268(fp)
 802369c:	1885c83a 	sub	r2,r3,r2
 80236a0:	e0bfbf15 	stw	r2,-260(fp)

		tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 80236a4:	e0ffbc17 	ldw	r3,-272(fp)
 80236a8:	e0bfbd17 	ldw	r2,-268(fp)
 80236ac:	1885c83a 	sub	r2,r3,r2
 80236b0:	1085883a 	add	r2,r2,r2
 80236b4:	e0ffba17 	ldw	r3,-280(fp)
 80236b8:	1885c83a 	sub	r2,r3,r2
 80236bc:	1005d2fa 	srai	r2,r2,11
 80236c0:	e0bfc015 	stw	r2,-256(fp)
			CONST_BITS-PASS1_BITS);

		z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80236c4:	e0bfb517 	ldw	r2,-300(fp)
 80236c8:	10800804 	addi	r2,r2,32
 80236cc:	1080000b 	ldhu	r2,0(r2)
 80236d0:	10ffffcc 	andi	r3,r2,65535
 80236d4:	18e0001c 	xori	r3,r3,32768
 80236d8:	18e00004 	addi	r3,r3,-32768
 80236dc:	e0bfb617 	ldw	r2,-296(fp)
 80236e0:	10801004 	addi	r2,r2,64
 80236e4:	10800017 	ldw	r2,0(r2)
 80236e8:	1809883a 	mov	r4,r3
 80236ec:	100b883a 	mov	r5,r2
 80236f0:	802c2180 	call	802c218 <__mulsi3>
 80236f4:	e0bfbd15 	stw	r2,-268(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80236f8:	e0bfb517 	ldw	r2,-300(fp)
 80236fc:	10801804 	addi	r2,r2,96
 8023700:	1080000b 	ldhu	r2,0(r2)
 8023704:	10ffffcc 	andi	r3,r2,65535
 8023708:	18e0001c 	xori	r3,r3,32768
 802370c:	18e00004 	addi	r3,r3,-32768
 8023710:	e0bfb617 	ldw	r2,-296(fp)
 8023714:	10803004 	addi	r2,r2,192
 8023718:	10800017 	ldw	r2,0(r2)
 802371c:	1809883a 	mov	r4,r3
 8023720:	100b883a 	mov	r5,r2
 8023724:	802c2180 	call	802c218 <__mulsi3>
 8023728:	e0bfba15 	stw	r2,-280(fp)

		z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 802372c:	e0ffbd17 	ldw	r3,-268(fp)
 8023730:	e0bfba17 	ldw	r2,-280(fp)
 8023734:	1885883a 	add	r2,r3,r2
 8023738:	1009883a 	mov	r4,r2
 802373c:	0146a684 	movi	r5,6810
 8023740:	802c2180 	call	802c218 <__mulsi3>
 8023744:	e0bfbc15 	stw	r2,-272(fp)
		tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 8023748:	e13fbd17 	ldw	r4,-268(fp)
 802374c:	01441c44 	movi	r5,4209
 8023750:	802c2180 	call	802c218 <__mulsi3>
 8023754:	1007883a 	mov	r3,r2
 8023758:	e0bfbc17 	ldw	r2,-272(fp)
 802375c:	1885883a 	add	r2,r3,r2
 8023760:	e0bfc115 	stw	r2,-252(fp)
		tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 8023764:	e13fba17 	ldw	r4,-280(fp)
 8023768:	016e9704 	movi	r5,-17828
 802376c:	802c2180 	call	802c218 <__mulsi3>
 8023770:	1007883a 	mov	r3,r2
 8023774:	e0bfbc17 	ldw	r2,-272(fp)
 8023778:	1885883a 	add	r2,r3,r2
 802377c:	e0bfc215 	stw	r2,-248(fp)

		tmp20 = tmp10 + tmp12;
 8023780:	e0ffbe17 	ldw	r3,-264(fp)
 8023784:	e0bfc117 	ldw	r2,-252(fp)
 8023788:	1885883a 	add	r2,r3,r2
 802378c:	e0bfc315 	stw	r2,-244(fp)
		tmp24 = tmp10 - tmp12;
 8023790:	e0ffbe17 	ldw	r3,-264(fp)
 8023794:	e0bfc117 	ldw	r2,-252(fp)
 8023798:	1885c83a 	sub	r2,r3,r2
 802379c:	e0bfc415 	stw	r2,-240(fp)
		tmp21 = tmp11 + tmp13;
 80237a0:	e0ffbf17 	ldw	r3,-260(fp)
 80237a4:	e0bfc217 	ldw	r2,-248(fp)
 80237a8:	1885883a 	add	r2,r3,r2
 80237ac:	e0bfc515 	stw	r2,-236(fp)
		tmp23 = tmp11 - tmp13;
 80237b0:	e0ffbf17 	ldw	r3,-260(fp)
 80237b4:	e0bfc217 	ldw	r2,-248(fp)
 80237b8:	1885c83a 	sub	r2,r3,r2
 80237bc:	e0bfc615 	stw	r2,-232(fp)

		/* Odd part */

		z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80237c0:	e0bfb517 	ldw	r2,-300(fp)
 80237c4:	10800404 	addi	r2,r2,16
 80237c8:	1080000b 	ldhu	r2,0(r2)
 80237cc:	10ffffcc 	andi	r3,r2,65535
 80237d0:	18e0001c 	xori	r3,r3,32768
 80237d4:	18e00004 	addi	r3,r3,-32768
 80237d8:	e0bfb617 	ldw	r2,-296(fp)
 80237dc:	10800804 	addi	r2,r2,32
 80237e0:	10800017 	ldw	r2,0(r2)
 80237e4:	1809883a 	mov	r4,r3
 80237e8:	100b883a 	mov	r5,r2
 80237ec:	802c2180 	call	802c218 <__mulsi3>
 80237f0:	e0bfbc15 	stw	r2,-272(fp)
		z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80237f4:	e0bfb517 	ldw	r2,-300(fp)
 80237f8:	10800c04 	addi	r2,r2,48
 80237fc:	1080000b 	ldhu	r2,0(r2)
 8023800:	10ffffcc 	andi	r3,r2,65535
 8023804:	18e0001c 	xori	r3,r3,32768
 8023808:	18e00004 	addi	r3,r3,-32768
 802380c:	e0bfb617 	ldw	r2,-296(fp)
 8023810:	10801804 	addi	r2,r2,96
 8023814:	10800017 	ldw	r2,0(r2)
 8023818:	1809883a 	mov	r4,r3
 802381c:	100b883a 	mov	r5,r2
 8023820:	802c2180 	call	802c218 <__mulsi3>
 8023824:	e0bfbd15 	stw	r2,-268(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8023828:	e0bfb517 	ldw	r2,-300(fp)
 802382c:	10801404 	addi	r2,r2,80
 8023830:	1080000b 	ldhu	r2,0(r2)
 8023834:	10ffffcc 	andi	r3,r2,65535
 8023838:	18e0001c 	xori	r3,r3,32768
 802383c:	18e00004 	addi	r3,r3,-32768
 8023840:	e0bfb617 	ldw	r2,-296(fp)
 8023844:	10802804 	addi	r2,r2,160
 8023848:	10800017 	ldw	r2,0(r2)
 802384c:	1809883a 	mov	r4,r3
 8023850:	100b883a 	mov	r5,r2
 8023854:	802c2180 	call	802c218 <__mulsi3>
 8023858:	e0bfba15 	stw	r2,-280(fp)
		z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 802385c:	e0bfb517 	ldw	r2,-300(fp)
 8023860:	10801c04 	addi	r2,r2,112
 8023864:	1080000b 	ldhu	r2,0(r2)
 8023868:	10ffffcc 	andi	r3,r2,65535
 802386c:	18e0001c 	xori	r3,r3,32768
 8023870:	18e00004 	addi	r3,r3,-32768
 8023874:	e0bfb617 	ldw	r2,-296(fp)
 8023878:	10803804 	addi	r2,r2,224
 802387c:	10800017 	ldw	r2,0(r2)
 8023880:	1809883a 	mov	r4,r3
 8023884:	100b883a 	mov	r5,r2
 8023888:	802c2180 	call	802c218 <__mulsi3>
 802388c:	e0bfbb15 	stw	r2,-276(fp)

		tmp11 = z2 + z4;
 8023890:	e0ffbd17 	ldw	r3,-268(fp)
 8023894:	e0bfbb17 	ldw	r2,-276(fp)
 8023898:	1885883a 	add	r2,r3,r2
 802389c:	e0bfbf15 	stw	r2,-260(fp)
		tmp13 = z2 - z4;
 80238a0:	e0ffbd17 	ldw	r3,-268(fp)
 80238a4:	e0bfbb17 	ldw	r2,-276(fp)
 80238a8:	1885c83a 	sub	r2,r3,r2
 80238ac:	e0bfc215 	stw	r2,-248(fp)

		tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 80238b0:	e13fc217 	ldw	r4,-248(fp)
 80238b4:	014278c4 	movi	r5,2531
 80238b8:	802c2180 	call	802c218 <__mulsi3>
 80238bc:	e0bfc115 	stw	r2,-252(fp)
		z5 = z3 << CONST_BITS;
 80238c0:	e0bfba17 	ldw	r2,-280(fp)
 80238c4:	1004937a 	slli	r2,r2,13
 80238c8:	e0bfc715 	stw	r2,-228(fp)

		z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 80238cc:	e13fbf17 	ldw	r4,-260(fp)
 80238d0:	01479bc4 	movi	r5,7791
 80238d4:	802c2180 	call	802c218 <__mulsi3>
 80238d8:	e0bfbd15 	stw	r2,-268(fp)
		z4 = z5 + tmp12;
 80238dc:	e0ffc717 	ldw	r3,-228(fp)
 80238e0:	e0bfc117 	ldw	r2,-252(fp)
 80238e4:	1885883a 	add	r2,r3,r2
 80238e8:	e0bfbb15 	stw	r2,-276(fp)

		tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 80238ec:	e13fbc17 	ldw	r4,-272(fp)
 80238f0:	014b2cc4 	movi	r5,11443
 80238f4:	802c2180 	call	802c218 <__mulsi3>
 80238f8:	1007883a 	mov	r3,r2
 80238fc:	e0bfbd17 	ldw	r2,-268(fp)
 8023900:	1887883a 	add	r3,r3,r2
 8023904:	e0bfbb17 	ldw	r2,-276(fp)
 8023908:	1885883a 	add	r2,r3,r2
 802390c:	e0bfbe15 	stw	r2,-264(fp)
		tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8023910:	e13fbc17 	ldw	r4,-272(fp)
 8023914:	0141c504 	movi	r5,1812
 8023918:	802c2180 	call	802c218 <__mulsi3>
 802391c:	1007883a 	mov	r3,r2
 8023920:	e0bfbd17 	ldw	r2,-268(fp)
 8023924:	1887c83a 	sub	r3,r3,r2
 8023928:	e0bfbb17 	ldw	r2,-276(fp)
 802392c:	1885883a 	add	r2,r3,r2
 8023930:	e0bfc815 	stw	r2,-224(fp)

		z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8023934:	e13fbf17 	ldw	r4,-260(fp)
 8023938:	0144b3c4 	movi	r5,4815
 802393c:	802c2180 	call	802c218 <__mulsi3>
 8023940:	e0bfbd15 	stw	r2,-268(fp)
		z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8023944:	e0ffc717 	ldw	r3,-228(fp)
 8023948:	e0bfc117 	ldw	r2,-252(fp)
 802394c:	1887c83a 	sub	r3,r3,r2
 8023950:	e0bfc217 	ldw	r2,-248(fp)
 8023954:	1004933a 	slli	r2,r2,12
 8023958:	1885c83a 	sub	r2,r3,r2
 802395c:	e0bfbb15 	stw	r2,-276(fp)

		tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 8023960:	e0ffbc17 	ldw	r3,-272(fp)
 8023964:	e0bfc217 	ldw	r2,-248(fp)
 8023968:	1887c83a 	sub	r3,r3,r2
 802396c:	e0bfba17 	ldw	r2,-280(fp)
 8023970:	1885c83a 	sub	r2,r3,r2
 8023974:	1085883a 	add	r2,r2,r2
 8023978:	1085883a 	add	r2,r2,r2
 802397c:	e0bfc115 	stw	r2,-252(fp)

		tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8023980:	e13fbc17 	ldw	r4,-272(fp)
 8023984:	014a14c4 	movi	r5,10323
 8023988:	802c2180 	call	802c218 <__mulsi3>
 802398c:	1007883a 	mov	r3,r2
 8023990:	e0bfbd17 	ldw	r2,-268(fp)
 8023994:	1887c83a 	sub	r3,r3,r2
 8023998:	e0bfbb17 	ldw	r2,-276(fp)
 802399c:	1885c83a 	sub	r2,r3,r2
 80239a0:	e0bfbf15 	stw	r2,-260(fp)
		tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 80239a4:	e13fbc17 	ldw	r4,-272(fp)
 80239a8:	01452304 	movi	r5,5260
 80239ac:	802c2180 	call	802c218 <__mulsi3>
 80239b0:	1007883a 	mov	r3,r2
 80239b4:	e0bfbd17 	ldw	r2,-268(fp)
 80239b8:	1887c83a 	sub	r3,r3,r2
 80239bc:	e0bfbb17 	ldw	r2,-276(fp)
 80239c0:	1885883a 	add	r2,r3,r2
 80239c4:	e0bfc215 	stw	r2,-248(fp)

		/* Final output stage */

		wsptr[5*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80239c8:	e0ffc317 	ldw	r3,-244(fp)
 80239cc:	e0bfbe17 	ldw	r2,-264(fp)
 80239d0:	1885883a 	add	r2,r3,r2
 80239d4:	1007d2fa 	srai	r3,r2,11
 80239d8:	e0bfb717 	ldw	r2,-292(fp)
 80239dc:	10c00015 	stw	r3,0(r2)
		wsptr[5*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80239e0:	e0bfb717 	ldw	r2,-292(fp)
 80239e4:	10802d04 	addi	r2,r2,180
 80239e8:	e13fc317 	ldw	r4,-244(fp)
 80239ec:	e0ffbe17 	ldw	r3,-264(fp)
 80239f0:	20c7c83a 	sub	r3,r4,r3
 80239f4:	1807d2fa 	srai	r3,r3,11
 80239f8:	10c00015 	stw	r3,0(r2)
		wsptr[5*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80239fc:	e0bfb717 	ldw	r2,-292(fp)
 8023a00:	10800504 	addi	r2,r2,20
 8023a04:	e13fc517 	ldw	r4,-236(fp)
 8023a08:	e0ffbf17 	ldw	r3,-260(fp)
 8023a0c:	20c7883a 	add	r3,r4,r3
 8023a10:	1807d2fa 	srai	r3,r3,11
 8023a14:	10c00015 	stw	r3,0(r2)
		wsptr[5*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8023a18:	e0bfb717 	ldw	r2,-292(fp)
 8023a1c:	10802804 	addi	r2,r2,160
 8023a20:	e13fc517 	ldw	r4,-236(fp)
 8023a24:	e0ffbf17 	ldw	r3,-260(fp)
 8023a28:	20c7c83a 	sub	r3,r4,r3
 8023a2c:	1807d2fa 	srai	r3,r3,11
 8023a30:	10c00015 	stw	r3,0(r2)
		wsptr[5*2] = (int) (tmp22 + tmp12);
 8023a34:	e0bfb717 	ldw	r2,-292(fp)
 8023a38:	10800a04 	addi	r2,r2,40
 8023a3c:	e13fc017 	ldw	r4,-256(fp)
 8023a40:	e0ffc117 	ldw	r3,-252(fp)
 8023a44:	20c7883a 	add	r3,r4,r3
 8023a48:	10c00015 	stw	r3,0(r2)
		wsptr[5*7] = (int) (tmp22 - tmp12);
 8023a4c:	e0bfb717 	ldw	r2,-292(fp)
 8023a50:	10802304 	addi	r2,r2,140
 8023a54:	e13fc017 	ldw	r4,-256(fp)
 8023a58:	e0ffc117 	ldw	r3,-252(fp)
 8023a5c:	20c7c83a 	sub	r3,r4,r3
 8023a60:	10c00015 	stw	r3,0(r2)
		wsptr[5*3] = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8023a64:	e0bfb717 	ldw	r2,-292(fp)
 8023a68:	10800f04 	addi	r2,r2,60
 8023a6c:	e13fc617 	ldw	r4,-232(fp)
 8023a70:	e0ffc217 	ldw	r3,-248(fp)
 8023a74:	20c7883a 	add	r3,r4,r3
 8023a78:	1807d2fa 	srai	r3,r3,11
 8023a7c:	10c00015 	stw	r3,0(r2)
		wsptr[5*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8023a80:	e0bfb717 	ldw	r2,-292(fp)
 8023a84:	10801e04 	addi	r2,r2,120
 8023a88:	e13fc617 	ldw	r4,-232(fp)
 8023a8c:	e0ffc217 	ldw	r3,-248(fp)
 8023a90:	20c7c83a 	sub	r3,r4,r3
 8023a94:	1807d2fa 	srai	r3,r3,11
 8023a98:	10c00015 	stw	r3,0(r2)
		wsptr[5*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8023a9c:	e0bfb717 	ldw	r2,-292(fp)
 8023aa0:	10801404 	addi	r2,r2,80
 8023aa4:	e13fc417 	ldw	r4,-240(fp)
 8023aa8:	e0ffc817 	ldw	r3,-224(fp)
 8023aac:	20c7883a 	add	r3,r4,r3
 8023ab0:	1807d2fa 	srai	r3,r3,11
 8023ab4:	10c00015 	stw	r3,0(r2)
		wsptr[5*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8023ab8:	e0bfb717 	ldw	r2,-292(fp)
 8023abc:	10801904 	addi	r2,r2,100
 8023ac0:	e13fc417 	ldw	r4,-240(fp)
 8023ac4:	e0ffc817 	ldw	r3,-224(fp)
 8023ac8:	20c7c83a 	sub	r3,r4,r3
 8023acc:	1807d2fa 	srai	r3,r3,11
 8023ad0:	10c00015 	stw	r3,0(r2)
		* 10-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/20).
		*/
		inptr = coef_block;
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
	wsptr = workspace;
	for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8023ad4:	e0bfb817 	ldw	r2,-288(fp)
 8023ad8:	10800044 	addi	r2,r2,1
 8023adc:	e0bfb815 	stw	r2,-288(fp)
 8023ae0:	e0bfb517 	ldw	r2,-300(fp)
 8023ae4:	10800084 	addi	r2,r2,2
 8023ae8:	e0bfb515 	stw	r2,-300(fp)
 8023aec:	e0bfb617 	ldw	r2,-296(fp)
 8023af0:	10800104 	addi	r2,r2,4
 8023af4:	e0bfb615 	stw	r2,-296(fp)
 8023af8:	e0bfb717 	ldw	r2,-292(fp)
 8023afc:	10800104 	addi	r2,r2,4
 8023b00:	e0bfb715 	stw	r2,-292(fp)
 8023b04:	e0bfb817 	ldw	r2,-288(fp)
 8023b08:	10800150 	cmplti	r2,r2,5
 8023b0c:	103eb71e 	bne	r2,zero,80235ec <jpeg_idct_5x10+0x54>
	}

	/* Pass 2: process 10 rows from work array, store into output array.
	* 5-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/10).
	*/
	wsptr = workspace;
 8023b10:	e0bfca04 	addi	r2,fp,-216
 8023b14:	e0bfb715 	stw	r2,-292(fp)
	for (ctr = 0; ctr < 10; ctr++) {
 8023b18:	e03fb815 	stw	zero,-288(fp)
 8023b1c:	00008f06 	br	8023d5c <jpeg_idct_5x10+0x7c4>
		outptr = output_buf[ctr] + output_col;
 8023b20:	e0bfb817 	ldw	r2,-288(fp)
 8023b24:	1085883a 	add	r2,r2,r2
 8023b28:	1085883a 	add	r2,r2,r2
 8023b2c:	e0ffff17 	ldw	r3,-4(fp)
 8023b30:	1885883a 	add	r2,r3,r2
 8023b34:	10c00017 	ldw	r3,0(r2)
 8023b38:	e0800217 	ldw	r2,8(fp)
 8023b3c:	1885883a 	add	r2,r3,r2
 8023b40:	e0bfc915 	stw	r2,-220(fp)

		/* Even part */

		/* Add fudge factor here for final descale. */
		tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8023b44:	e0bfb717 	ldw	r2,-292(fp)
 8023b48:	10800017 	ldw	r2,0(r2)
 8023b4c:	10800404 	addi	r2,r2,16
 8023b50:	e0bfc115 	stw	r2,-252(fp)
		tmp12 <<= CONST_BITS;
 8023b54:	e0bfc117 	ldw	r2,-252(fp)
 8023b58:	1004937a 	slli	r2,r2,13
 8023b5c:	e0bfc115 	stw	r2,-252(fp)
		tmp13 = (INT32) wsptr[2];
 8023b60:	e0bfb717 	ldw	r2,-292(fp)
 8023b64:	10800204 	addi	r2,r2,8
 8023b68:	10800017 	ldw	r2,0(r2)
 8023b6c:	e0bfc215 	stw	r2,-248(fp)
		tmp14 = (INT32) wsptr[4];
 8023b70:	e0bfb717 	ldw	r2,-292(fp)
 8023b74:	10800404 	addi	r2,r2,16
 8023b78:	10800017 	ldw	r2,0(r2)
 8023b7c:	e0bfc815 	stw	r2,-224(fp)
		z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8023b80:	e0ffc217 	ldw	r3,-248(fp)
 8023b84:	e0bfc817 	ldw	r2,-224(fp)
 8023b88:	1885883a 	add	r2,r3,r2
 8023b8c:	1009883a 	mov	r4,r2
 8023b90:	01465304 	movi	r5,6476
 8023b94:	802c2180 	call	802c218 <__mulsi3>
 8023b98:	e0bfbc15 	stw	r2,-272(fp)
		z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8023b9c:	e0ffc217 	ldw	r3,-248(fp)
 8023ba0:	e0bfc817 	ldw	r2,-224(fp)
 8023ba4:	1885c83a 	sub	r2,r3,r2
 8023ba8:	1009883a 	mov	r4,r2
 8023bac:	0142d404 	movi	r5,2896
 8023bb0:	802c2180 	call	802c218 <__mulsi3>
 8023bb4:	e0bfbd15 	stw	r2,-268(fp)
		z3 = tmp12 + z2;
 8023bb8:	e0ffc117 	ldw	r3,-252(fp)
 8023bbc:	e0bfbd17 	ldw	r2,-268(fp)
 8023bc0:	1885883a 	add	r2,r3,r2
 8023bc4:	e0bfba15 	stw	r2,-280(fp)
		tmp10 = z3 + z1;
 8023bc8:	e0ffba17 	ldw	r3,-280(fp)
 8023bcc:	e0bfbc17 	ldw	r2,-272(fp)
 8023bd0:	1885883a 	add	r2,r3,r2
 8023bd4:	e0bfbe15 	stw	r2,-264(fp)
		tmp11 = z3 - z1;
 8023bd8:	e0ffba17 	ldw	r3,-280(fp)
 8023bdc:	e0bfbc17 	ldw	r2,-272(fp)
 8023be0:	1885c83a 	sub	r2,r3,r2
 8023be4:	e0bfbf15 	stw	r2,-260(fp)
		tmp12 -= z2 << 2;
 8023be8:	e0bfbd17 	ldw	r2,-268(fp)
 8023bec:	1085883a 	add	r2,r2,r2
 8023bf0:	1085883a 	add	r2,r2,r2
 8023bf4:	e0ffc117 	ldw	r3,-252(fp)
 8023bf8:	1885c83a 	sub	r2,r3,r2
 8023bfc:	e0bfc115 	stw	r2,-252(fp)

		/* Odd part */

		z2 = (INT32) wsptr[1];
 8023c00:	e0bfb717 	ldw	r2,-292(fp)
 8023c04:	10800104 	addi	r2,r2,4
 8023c08:	10800017 	ldw	r2,0(r2)
 8023c0c:	e0bfbd15 	stw	r2,-268(fp)
		z3 = (INT32) wsptr[3];
 8023c10:	e0bfb717 	ldw	r2,-292(fp)
 8023c14:	10800304 	addi	r2,r2,12
 8023c18:	10800017 	ldw	r2,0(r2)
 8023c1c:	e0bfba15 	stw	r2,-280(fp)

		z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 8023c20:	e0ffbd17 	ldw	r3,-268(fp)
 8023c24:	e0bfba17 	ldw	r2,-280(fp)
 8023c28:	1885883a 	add	r2,r3,r2
 8023c2c:	1009883a 	mov	r4,r2
 8023c30:	0146a684 	movi	r5,6810
 8023c34:	802c2180 	call	802c218 <__mulsi3>
 8023c38:	e0bfbc15 	stw	r2,-272(fp)
		tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 8023c3c:	e13fbd17 	ldw	r4,-268(fp)
 8023c40:	01441c44 	movi	r5,4209
 8023c44:	802c2180 	call	802c218 <__mulsi3>
 8023c48:	1007883a 	mov	r3,r2
 8023c4c:	e0bfbc17 	ldw	r2,-272(fp)
 8023c50:	1885883a 	add	r2,r3,r2
 8023c54:	e0bfc215 	stw	r2,-248(fp)
		tmp14 = z1 - MULTIPLY(z3, FIX(2.176250899));    /* c1+c3 */
 8023c58:	e13fba17 	ldw	r4,-280(fp)
 8023c5c:	016e9704 	movi	r5,-17828
 8023c60:	802c2180 	call	802c218 <__mulsi3>
 8023c64:	1007883a 	mov	r3,r2
 8023c68:	e0bfbc17 	ldw	r2,-272(fp)
 8023c6c:	1885883a 	add	r2,r3,r2
 8023c70:	e0bfc815 	stw	r2,-224(fp)

		/* Final output stage */

		outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp13,
 8023c74:	e0ffbe17 	ldw	r3,-264(fp)
 8023c78:	e0bfc217 	ldw	r2,-248(fp)
 8023c7c:	1885883a 	add	r2,r3,r2
 8023c80:	1005d4ba 	srai	r2,r2,18
 8023c84:	1080ffcc 	andi	r2,r2,1023
 8023c88:	e0ffb917 	ldw	r3,-284(fp)
 8023c8c:	1885883a 	add	r2,r3,r2
 8023c90:	10c00003 	ldbu	r3,0(r2)
 8023c94:	e0bfc917 	ldw	r2,-220(fp)
 8023c98:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp13,
 8023c9c:	e0bfc917 	ldw	r2,-220(fp)
 8023ca0:	10800104 	addi	r2,r2,4
 8023ca4:	e13fbe17 	ldw	r4,-264(fp)
 8023ca8:	e0ffc217 	ldw	r3,-248(fp)
 8023cac:	20c7c83a 	sub	r3,r4,r3
 8023cb0:	1807d4ba 	srai	r3,r3,18
 8023cb4:	18c0ffcc 	andi	r3,r3,1023
 8023cb8:	e13fb917 	ldw	r4,-284(fp)
 8023cbc:	20c7883a 	add	r3,r4,r3
 8023cc0:	18c00003 	ldbu	r3,0(r3)
 8023cc4:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp14,
 8023cc8:	e0bfc917 	ldw	r2,-220(fp)
 8023ccc:	10800044 	addi	r2,r2,1
 8023cd0:	e13fbf17 	ldw	r4,-260(fp)
 8023cd4:	e0ffc817 	ldw	r3,-224(fp)
 8023cd8:	20c7883a 	add	r3,r4,r3
 8023cdc:	1807d4ba 	srai	r3,r3,18
 8023ce0:	18c0ffcc 	andi	r3,r3,1023
 8023ce4:	e13fb917 	ldw	r4,-284(fp)
 8023ce8:	20c7883a 	add	r3,r4,r3
 8023cec:	18c00003 	ldbu	r3,0(r3)
 8023cf0:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp14,
 8023cf4:	e0bfc917 	ldw	r2,-220(fp)
 8023cf8:	108000c4 	addi	r2,r2,3
 8023cfc:	e13fbf17 	ldw	r4,-260(fp)
 8023d00:	e0ffc817 	ldw	r3,-224(fp)
 8023d04:	20c7c83a 	sub	r3,r4,r3
 8023d08:	1807d4ba 	srai	r3,r3,18
 8023d0c:	18c0ffcc 	andi	r3,r3,1023
 8023d10:	e13fb917 	ldw	r4,-284(fp)
 8023d14:	20c7883a 	add	r3,r4,r3
 8023d18:	18c00003 	ldbu	r3,0(r3)
 8023d1c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 8023d20:	e0bfc917 	ldw	r2,-220(fp)
 8023d24:	10800084 	addi	r2,r2,2
 8023d28:	e0ffc117 	ldw	r3,-252(fp)
 8023d2c:	1807d4ba 	srai	r3,r3,18
 8023d30:	18c0ffcc 	andi	r3,r3,1023
 8023d34:	e13fb917 	ldw	r4,-284(fp)
 8023d38:	20c7883a 	add	r3,r4,r3
 8023d3c:	18c00003 	ldbu	r3,0(r3)
 8023d40:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 5;		/* advance pointer to next row */
 8023d44:	e0bfb717 	ldw	r2,-292(fp)
 8023d48:	10800504 	addi	r2,r2,20
 8023d4c:	e0bfb715 	stw	r2,-292(fp)

	/* Pass 2: process 10 rows from work array, store into output array.
	* 5-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/10).
	*/
	wsptr = workspace;
	for (ctr = 0; ctr < 10; ctr++) {
 8023d50:	e0bfb817 	ldw	r2,-288(fp)
 8023d54:	10800044 	addi	r2,r2,1
 8023d58:	e0bfb815 	stw	r2,-288(fp)
 8023d5c:	e0bfb817 	ldw	r2,-288(fp)
 8023d60:	10800290 	cmplti	r2,r2,10
 8023d64:	103f6e1e 	bne	r2,zero,8023b20 <jpeg_idct_5x10+0x588>
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 5;		/* advance pointer to next row */
	}
}
 8023d68:	e037883a 	mov	sp,fp
 8023d6c:	dfc00117 	ldw	ra,4(sp)
 8023d70:	df000017 	ldw	fp,0(sp)
 8023d74:	dec00204 	addi	sp,sp,8
 8023d78:	f800283a 	ret

08023d7c <jpeg_idct_4x8>:

GLOBAL(void)
	jpeg_idct_4x8 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8023d7c:	deffc804 	addi	sp,sp,-224
 8023d80:	dfc03715 	stw	ra,220(sp)
 8023d84:	df003615 	stw	fp,216(sp)
 8023d88:	df003604 	addi	fp,sp,216
 8023d8c:	e13ffc15 	stw	r4,-16(fp)
 8023d90:	e17ffd15 	stw	r5,-12(fp)
 8023d94:	e1bffe15 	stw	r6,-8(fp)
 8023d98:	e1ffff15 	stw	r7,-4(fp)
	INT32 z1, z2, z3;
	JCOEFPTR inptr;
	ISLOW_MULT_TYPE * quantptr;
	int * wsptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8023d9c:	e0bffc17 	ldw	r2,-16(fp)
 8023da0:	10804917 	ldw	r2,292(r2)
 8023da4:	10802004 	addi	r2,r2,128
 8023da8:	e0bfce15 	stw	r2,-200(fp)

		/* Pass 1: process columns from input, store into work array. */
		/* Note results are scaled up by sqrt(8) compared to a true IDCT; */
		/* furthermore, we scale the results by 2**PASS1_BITS. */

		inptr = coef_block;
 8023dac:	e0bffe17 	ldw	r2,-8(fp)
 8023db0:	e0bfca15 	stw	r2,-216(fp)
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8023db4:	e0bffd17 	ldw	r2,-12(fp)
 8023db8:	10801517 	ldw	r2,84(r2)
 8023dbc:	e0bfcb15 	stw	r2,-212(fp)
	wsptr = workspace;
 8023dc0:	e0bfdc04 	addi	r2,fp,-144
 8023dc4:	e0bfcc15 	stw	r2,-208(fp)
	for (ctr = 4; ctr > 0; ctr--) {
 8023dc8:	00800104 	movi	r2,4
 8023dcc:	e0bfcd15 	stw	r2,-204(fp)
 8023dd0:	00019b06 	br	8024440 <jpeg_idct_4x8+0x6c4>
		* DC coefficient (with scale factor as needed).
		* With typical images and quantization tables, half or more of the
		* column DCT calculations can be simplified this way.
		*/

		if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8023dd4:	e0bfca17 	ldw	r2,-216(fp)
 8023dd8:	10800404 	addi	r2,r2,16
 8023ddc:	1080000b 	ldhu	r2,0(r2)
 8023de0:	10bfffcc 	andi	r2,r2,65535
 8023de4:	10a0001c 	xori	r2,r2,32768
 8023de8:	10a00004 	addi	r2,r2,-32768
 8023dec:	1000601e 	bne	r2,zero,8023f70 <jpeg_idct_4x8+0x1f4>
 8023df0:	e0bfca17 	ldw	r2,-216(fp)
 8023df4:	10800804 	addi	r2,r2,32
 8023df8:	1080000b 	ldhu	r2,0(r2)
 8023dfc:	10bfffcc 	andi	r2,r2,65535
 8023e00:	10a0001c 	xori	r2,r2,32768
 8023e04:	10a00004 	addi	r2,r2,-32768
 8023e08:	1000591e 	bne	r2,zero,8023f70 <jpeg_idct_4x8+0x1f4>
			inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 8023e0c:	e0bfca17 	ldw	r2,-216(fp)
 8023e10:	10800c04 	addi	r2,r2,48
 8023e14:	1080000b 	ldhu	r2,0(r2)
		* DC coefficient (with scale factor as needed).
		* With typical images and quantization tables, half or more of the
		* column DCT calculations can be simplified this way.
		*/

		if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8023e18:	10bfffcc 	andi	r2,r2,65535
 8023e1c:	10a0001c 	xori	r2,r2,32768
 8023e20:	10a00004 	addi	r2,r2,-32768
 8023e24:	1000521e 	bne	r2,zero,8023f70 <jpeg_idct_4x8+0x1f4>
			inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 8023e28:	e0bfca17 	ldw	r2,-216(fp)
 8023e2c:	10801004 	addi	r2,r2,64
 8023e30:	1080000b 	ldhu	r2,0(r2)
 8023e34:	10bfffcc 	andi	r2,r2,65535
 8023e38:	10a0001c 	xori	r2,r2,32768
 8023e3c:	10a00004 	addi	r2,r2,-32768
 8023e40:	10004b1e 	bne	r2,zero,8023f70 <jpeg_idct_4x8+0x1f4>
			inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8023e44:	e0bfca17 	ldw	r2,-216(fp)
 8023e48:	10801404 	addi	r2,r2,80
 8023e4c:	1080000b 	ldhu	r2,0(r2)
		* With typical images and quantization tables, half or more of the
		* column DCT calculations can be simplified this way.
		*/

		if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
			inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 8023e50:	10bfffcc 	andi	r2,r2,65535
 8023e54:	10a0001c 	xori	r2,r2,32768
 8023e58:	10a00004 	addi	r2,r2,-32768
 8023e5c:	1000441e 	bne	r2,zero,8023f70 <jpeg_idct_4x8+0x1f4>
			inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8023e60:	e0bfca17 	ldw	r2,-216(fp)
 8023e64:	10801804 	addi	r2,r2,96
 8023e68:	1080000b 	ldhu	r2,0(r2)
 8023e6c:	10bfffcc 	andi	r2,r2,65535
 8023e70:	10a0001c 	xori	r2,r2,32768
 8023e74:	10a00004 	addi	r2,r2,-32768
 8023e78:	10003d1e 	bne	r2,zero,8023f70 <jpeg_idct_4x8+0x1f4>
			inptr[DCTSIZE*7] == 0) {
 8023e7c:	e0bfca17 	ldw	r2,-216(fp)
 8023e80:	10801c04 	addi	r2,r2,112
 8023e84:	1080000b 	ldhu	r2,0(r2)
		* column DCT calculations can be simplified this way.
		*/

		if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
			inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
			inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8023e88:	10bfffcc 	andi	r2,r2,65535
 8023e8c:	10a0001c 	xori	r2,r2,32768
 8023e90:	10a00004 	addi	r2,r2,-32768
 8023e94:	1000361e 	bne	r2,zero,8023f70 <jpeg_idct_4x8+0x1f4>
			inptr[DCTSIZE*7] == 0) {
				/* AC terms all zero */
				int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 8023e98:	e0bfca17 	ldw	r2,-216(fp)
 8023e9c:	1080000b 	ldhu	r2,0(r2)
 8023ea0:	10ffffcc 	andi	r3,r2,65535
 8023ea4:	18e0001c 	xori	r3,r3,32768
 8023ea8:	18e00004 	addi	r3,r3,-32768
 8023eac:	e0bfcb17 	ldw	r2,-212(fp)
 8023eb0:	10800017 	ldw	r2,0(r2)
 8023eb4:	1809883a 	mov	r4,r3
 8023eb8:	100b883a 	mov	r5,r2
 8023ebc:	802c2180 	call	802c218 <__mulsi3>
 8023ec0:	1085883a 	add	r2,r2,r2
 8023ec4:	1085883a 	add	r2,r2,r2
 8023ec8:	e0bfcf15 	stw	r2,-196(fp)

				wsptr[4*0] = dcval;
 8023ecc:	e0bfcc17 	ldw	r2,-208(fp)
 8023ed0:	e0ffcf17 	ldw	r3,-196(fp)
 8023ed4:	10c00015 	stw	r3,0(r2)
				wsptr[4*1] = dcval;
 8023ed8:	e0bfcc17 	ldw	r2,-208(fp)
 8023edc:	10800404 	addi	r2,r2,16
 8023ee0:	e0ffcf17 	ldw	r3,-196(fp)
 8023ee4:	10c00015 	stw	r3,0(r2)
				wsptr[4*2] = dcval;
 8023ee8:	e0bfcc17 	ldw	r2,-208(fp)
 8023eec:	10800804 	addi	r2,r2,32
 8023ef0:	e0ffcf17 	ldw	r3,-196(fp)
 8023ef4:	10c00015 	stw	r3,0(r2)
				wsptr[4*3] = dcval;
 8023ef8:	e0bfcc17 	ldw	r2,-208(fp)
 8023efc:	10800c04 	addi	r2,r2,48
 8023f00:	e0ffcf17 	ldw	r3,-196(fp)
 8023f04:	10c00015 	stw	r3,0(r2)
				wsptr[4*4] = dcval;
 8023f08:	e0bfcc17 	ldw	r2,-208(fp)
 8023f0c:	10801004 	addi	r2,r2,64
 8023f10:	e0ffcf17 	ldw	r3,-196(fp)
 8023f14:	10c00015 	stw	r3,0(r2)
				wsptr[4*5] = dcval;
 8023f18:	e0bfcc17 	ldw	r2,-208(fp)
 8023f1c:	10801404 	addi	r2,r2,80
 8023f20:	e0ffcf17 	ldw	r3,-196(fp)
 8023f24:	10c00015 	stw	r3,0(r2)
				wsptr[4*6] = dcval;
 8023f28:	e0bfcc17 	ldw	r2,-208(fp)
 8023f2c:	10801804 	addi	r2,r2,96
 8023f30:	e0ffcf17 	ldw	r3,-196(fp)
 8023f34:	10c00015 	stw	r3,0(r2)
				wsptr[4*7] = dcval;
 8023f38:	e0bfcc17 	ldw	r2,-208(fp)
 8023f3c:	10801c04 	addi	r2,r2,112
 8023f40:	e0ffcf17 	ldw	r3,-196(fp)
 8023f44:	10c00015 	stw	r3,0(r2)

				inptr++;			/* advance pointers to next column */
 8023f48:	e0bfca17 	ldw	r2,-216(fp)
 8023f4c:	10800084 	addi	r2,r2,2
 8023f50:	e0bfca15 	stw	r2,-216(fp)
				quantptr++;
 8023f54:	e0bfcb17 	ldw	r2,-212(fp)
 8023f58:	10800104 	addi	r2,r2,4
 8023f5c:	e0bfcb15 	stw	r2,-212(fp)
				wsptr++;
 8023f60:	e0bfcc17 	ldw	r2,-208(fp)
 8023f64:	10800104 	addi	r2,r2,4
 8023f68:	e0bfcc15 	stw	r2,-208(fp)
				continue;
 8023f6c:	00013106 	br	8024434 <jpeg_idct_4x8+0x6b8>
		}

		/* Even part: reverse the even part of the forward DCT. */
		/* The rotator is sqrt(2)*c(-6). */

		z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8023f70:	e0bfca17 	ldw	r2,-216(fp)
 8023f74:	10800804 	addi	r2,r2,32
 8023f78:	1080000b 	ldhu	r2,0(r2)
 8023f7c:	10ffffcc 	andi	r3,r2,65535
 8023f80:	18e0001c 	xori	r3,r3,32768
 8023f84:	18e00004 	addi	r3,r3,-32768
 8023f88:	e0bfcb17 	ldw	r2,-212(fp)
 8023f8c:	10801004 	addi	r2,r2,64
 8023f90:	10800017 	ldw	r2,0(r2)
 8023f94:	1809883a 	mov	r4,r3
 8023f98:	100b883a 	mov	r5,r2
 8023f9c:	802c2180 	call	802c218 <__mulsi3>
 8023fa0:	e0bfd015 	stw	r2,-192(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8023fa4:	e0bfca17 	ldw	r2,-216(fp)
 8023fa8:	10801804 	addi	r2,r2,96
 8023fac:	1080000b 	ldhu	r2,0(r2)
 8023fb0:	10ffffcc 	andi	r3,r2,65535
 8023fb4:	18e0001c 	xori	r3,r3,32768
 8023fb8:	18e00004 	addi	r3,r3,-32768
 8023fbc:	e0bfcb17 	ldw	r2,-212(fp)
 8023fc0:	10803004 	addi	r2,r2,192
 8023fc4:	10800017 	ldw	r2,0(r2)
 8023fc8:	1809883a 	mov	r4,r3
 8023fcc:	100b883a 	mov	r5,r2
 8023fd0:	802c2180 	call	802c218 <__mulsi3>
 8023fd4:	e0bfd115 	stw	r2,-188(fp)

		z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8023fd8:	e0ffd017 	ldw	r3,-192(fp)
 8023fdc:	e0bfd117 	ldw	r2,-188(fp)
 8023fe0:	1885883a 	add	r2,r3,r2
 8023fe4:	1009883a 	mov	r4,r2
 8023fe8:	01445444 	movi	r5,4433
 8023fec:	802c2180 	call	802c218 <__mulsi3>
 8023ff0:	e0bfd215 	stw	r2,-184(fp)
		tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8023ff4:	e13fd017 	ldw	r4,-192(fp)
 8023ff8:	01461f84 	movi	r5,6270
 8023ffc:	802c2180 	call	802c218 <__mulsi3>
 8024000:	1007883a 	mov	r3,r2
 8024004:	e0bfd217 	ldw	r2,-184(fp)
 8024008:	1885883a 	add	r2,r3,r2
 802400c:	e0bfd315 	stw	r2,-180(fp)
		tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8024010:	e13fd117 	ldw	r4,-188(fp)
 8024014:	017137c4 	movi	r5,-15137
 8024018:	802c2180 	call	802c218 <__mulsi3>
 802401c:	1007883a 	mov	r3,r2
 8024020:	e0bfd217 	ldw	r2,-184(fp)
 8024024:	1885883a 	add	r2,r3,r2
 8024028:	e0bfd415 	stw	r2,-176(fp)

		z2 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 802402c:	e0bfca17 	ldw	r2,-216(fp)
 8024030:	1080000b 	ldhu	r2,0(r2)
 8024034:	10ffffcc 	andi	r3,r2,65535
 8024038:	18e0001c 	xori	r3,r3,32768
 802403c:	18e00004 	addi	r3,r3,-32768
 8024040:	e0bfcb17 	ldw	r2,-212(fp)
 8024044:	10800017 	ldw	r2,0(r2)
 8024048:	1809883a 	mov	r4,r3
 802404c:	100b883a 	mov	r5,r2
 8024050:	802c2180 	call	802c218 <__mulsi3>
 8024054:	e0bfd015 	stw	r2,-192(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8024058:	e0bfca17 	ldw	r2,-216(fp)
 802405c:	10801004 	addi	r2,r2,64
 8024060:	1080000b 	ldhu	r2,0(r2)
 8024064:	10ffffcc 	andi	r3,r2,65535
 8024068:	18e0001c 	xori	r3,r3,32768
 802406c:	18e00004 	addi	r3,r3,-32768
 8024070:	e0bfcb17 	ldw	r2,-212(fp)
 8024074:	10802004 	addi	r2,r2,128
 8024078:	10800017 	ldw	r2,0(r2)
 802407c:	1809883a 	mov	r4,r3
 8024080:	100b883a 	mov	r5,r2
 8024084:	802c2180 	call	802c218 <__mulsi3>
 8024088:	e0bfd115 	stw	r2,-188(fp)
		z2 <<= CONST_BITS;
 802408c:	e0bfd017 	ldw	r2,-192(fp)
 8024090:	1004937a 	slli	r2,r2,13
 8024094:	e0bfd015 	stw	r2,-192(fp)
		z3 <<= CONST_BITS;
 8024098:	e0bfd117 	ldw	r2,-188(fp)
 802409c:	1004937a 	slli	r2,r2,13
 80240a0:	e0bfd115 	stw	r2,-188(fp)
		/* Add fudge factor here for final descale. */
		z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 80240a4:	e0bfd017 	ldw	r2,-192(fp)
 80240a8:	10810004 	addi	r2,r2,1024
 80240ac:	e0bfd015 	stw	r2,-192(fp)

		tmp0 = z2 + z3;
 80240b0:	e0ffd017 	ldw	r3,-192(fp)
 80240b4:	e0bfd117 	ldw	r2,-188(fp)
 80240b8:	1885883a 	add	r2,r3,r2
 80240bc:	e0bfd515 	stw	r2,-172(fp)
		tmp1 = z2 - z3;
 80240c0:	e0ffd017 	ldw	r3,-192(fp)
 80240c4:	e0bfd117 	ldw	r2,-188(fp)
 80240c8:	1885c83a 	sub	r2,r3,r2
 80240cc:	e0bfd615 	stw	r2,-168(fp)

		tmp10 = tmp0 + tmp2;
 80240d0:	e0ffd517 	ldw	r3,-172(fp)
 80240d4:	e0bfd317 	ldw	r2,-180(fp)
 80240d8:	1885883a 	add	r2,r3,r2
 80240dc:	e0bfd715 	stw	r2,-164(fp)
		tmp13 = tmp0 - tmp2;
 80240e0:	e0ffd517 	ldw	r3,-172(fp)
 80240e4:	e0bfd317 	ldw	r2,-180(fp)
 80240e8:	1885c83a 	sub	r2,r3,r2
 80240ec:	e0bfd815 	stw	r2,-160(fp)
		tmp11 = tmp1 + tmp3;
 80240f0:	e0ffd617 	ldw	r3,-168(fp)
 80240f4:	e0bfd417 	ldw	r2,-176(fp)
 80240f8:	1885883a 	add	r2,r3,r2
 80240fc:	e0bfd915 	stw	r2,-156(fp)
		tmp12 = tmp1 - tmp3;
 8024100:	e0ffd617 	ldw	r3,-168(fp)
 8024104:	e0bfd417 	ldw	r2,-176(fp)
 8024108:	1885c83a 	sub	r2,r3,r2
 802410c:	e0bfda15 	stw	r2,-152(fp)

		/* Odd part per figure 8; the matrix is unitary and hence its
		* transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
		*/

		tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8024110:	e0bfca17 	ldw	r2,-216(fp)
 8024114:	10801c04 	addi	r2,r2,112
 8024118:	1080000b 	ldhu	r2,0(r2)
 802411c:	10ffffcc 	andi	r3,r2,65535
 8024120:	18e0001c 	xori	r3,r3,32768
 8024124:	18e00004 	addi	r3,r3,-32768
 8024128:	e0bfcb17 	ldw	r2,-212(fp)
 802412c:	10803804 	addi	r2,r2,224
 8024130:	10800017 	ldw	r2,0(r2)
 8024134:	1809883a 	mov	r4,r3
 8024138:	100b883a 	mov	r5,r2
 802413c:	802c2180 	call	802c218 <__mulsi3>
 8024140:	e0bfd515 	stw	r2,-172(fp)
		tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8024144:	e0bfca17 	ldw	r2,-216(fp)
 8024148:	10801404 	addi	r2,r2,80
 802414c:	1080000b 	ldhu	r2,0(r2)
 8024150:	10ffffcc 	andi	r3,r2,65535
 8024154:	18e0001c 	xori	r3,r3,32768
 8024158:	18e00004 	addi	r3,r3,-32768
 802415c:	e0bfcb17 	ldw	r2,-212(fp)
 8024160:	10802804 	addi	r2,r2,160
 8024164:	10800017 	ldw	r2,0(r2)
 8024168:	1809883a 	mov	r4,r3
 802416c:	100b883a 	mov	r5,r2
 8024170:	802c2180 	call	802c218 <__mulsi3>
 8024174:	e0bfd615 	stw	r2,-168(fp)
		tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8024178:	e0bfca17 	ldw	r2,-216(fp)
 802417c:	10800c04 	addi	r2,r2,48
 8024180:	1080000b 	ldhu	r2,0(r2)
 8024184:	10ffffcc 	andi	r3,r2,65535
 8024188:	18e0001c 	xori	r3,r3,32768
 802418c:	18e00004 	addi	r3,r3,-32768
 8024190:	e0bfcb17 	ldw	r2,-212(fp)
 8024194:	10801804 	addi	r2,r2,96
 8024198:	10800017 	ldw	r2,0(r2)
 802419c:	1809883a 	mov	r4,r3
 80241a0:	100b883a 	mov	r5,r2
 80241a4:	802c2180 	call	802c218 <__mulsi3>
 80241a8:	e0bfd315 	stw	r2,-180(fp)
		tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80241ac:	e0bfca17 	ldw	r2,-216(fp)
 80241b0:	10800404 	addi	r2,r2,16
 80241b4:	1080000b 	ldhu	r2,0(r2)
 80241b8:	10ffffcc 	andi	r3,r2,65535
 80241bc:	18e0001c 	xori	r3,r3,32768
 80241c0:	18e00004 	addi	r3,r3,-32768
 80241c4:	e0bfcb17 	ldw	r2,-212(fp)
 80241c8:	10800804 	addi	r2,r2,32
 80241cc:	10800017 	ldw	r2,0(r2)
 80241d0:	1809883a 	mov	r4,r3
 80241d4:	100b883a 	mov	r5,r2
 80241d8:	802c2180 	call	802c218 <__mulsi3>
 80241dc:	e0bfd415 	stw	r2,-176(fp)

		z2 = tmp0 + tmp2;
 80241e0:	e0ffd517 	ldw	r3,-172(fp)
 80241e4:	e0bfd317 	ldw	r2,-180(fp)
 80241e8:	1885883a 	add	r2,r3,r2
 80241ec:	e0bfd015 	stw	r2,-192(fp)
		z3 = tmp1 + tmp3;
 80241f0:	e0ffd617 	ldw	r3,-168(fp)
 80241f4:	e0bfd417 	ldw	r2,-176(fp)
 80241f8:	1885883a 	add	r2,r3,r2
 80241fc:	e0bfd115 	stw	r2,-188(fp)

		z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8024200:	e0ffd017 	ldw	r3,-192(fp)
 8024204:	e0bfd117 	ldw	r2,-188(fp)
 8024208:	1885883a 	add	r2,r3,r2
 802420c:	1009883a 	mov	r4,r2
 8024210:	01496844 	movi	r5,9633
 8024214:	802c2180 	call	802c218 <__mulsi3>
 8024218:	e0bfd215 	stw	r2,-184(fp)
		z2 = MULTIPLY(z2, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
 802421c:	e13fd017 	ldw	r4,-192(fp)
 8024220:	01704ec4 	movi	r5,-16069
 8024224:	802c2180 	call	802c218 <__mulsi3>
 8024228:	e0bfd015 	stw	r2,-192(fp)
		z3 = MULTIPLY(z3, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
 802422c:	e13fd117 	ldw	r4,-188(fp)
 8024230:	017ce104 	movi	r5,-3196
 8024234:	802c2180 	call	802c218 <__mulsi3>
 8024238:	e0bfd115 	stw	r2,-188(fp)
		z2 += z1;
 802423c:	e0ffd017 	ldw	r3,-192(fp)
 8024240:	e0bfd217 	ldw	r2,-184(fp)
 8024244:	1885883a 	add	r2,r3,r2
 8024248:	e0bfd015 	stw	r2,-192(fp)
		z3 += z1;
 802424c:	e0ffd117 	ldw	r3,-188(fp)
 8024250:	e0bfd217 	ldw	r2,-184(fp)
 8024254:	1885883a 	add	r2,r3,r2
 8024258:	e0bfd115 	stw	r2,-188(fp)

		z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 802425c:	e0ffd517 	ldw	r3,-172(fp)
 8024260:	e0bfd417 	ldw	r2,-176(fp)
 8024264:	1885883a 	add	r2,r3,r2
 8024268:	1009883a 	mov	r4,r2
 802426c:	0178ccc4 	movi	r5,-7373
 8024270:	802c2180 	call	802c218 <__mulsi3>
 8024274:	e0bfd215 	stw	r2,-184(fp)
		tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
 8024278:	e13fd517 	ldw	r4,-172(fp)
 802427c:	01426384 	movi	r5,2446
 8024280:	802c2180 	call	802c218 <__mulsi3>
 8024284:	e0bfd515 	stw	r2,-172(fp)
		tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
 8024288:	e13fd417 	ldw	r4,-176(fp)
 802428c:	014c02c4 	movi	r5,12299
 8024290:	802c2180 	call	802c218 <__mulsi3>
 8024294:	e0bfd415 	stw	r2,-176(fp)
		tmp0 += z1 + z2;
 8024298:	e0ffd217 	ldw	r3,-184(fp)
 802429c:	e0bfd017 	ldw	r2,-192(fp)
 80242a0:	1885883a 	add	r2,r3,r2
 80242a4:	e0ffd517 	ldw	r3,-172(fp)
 80242a8:	1885883a 	add	r2,r3,r2
 80242ac:	e0bfd515 	stw	r2,-172(fp)
		tmp3 += z1 + z3;
 80242b0:	e0ffd217 	ldw	r3,-184(fp)
 80242b4:	e0bfd117 	ldw	r2,-188(fp)
 80242b8:	1885883a 	add	r2,r3,r2
 80242bc:	e0ffd417 	ldw	r3,-176(fp)
 80242c0:	1885883a 	add	r2,r3,r2
 80242c4:	e0bfd415 	stw	r2,-176(fp)

		z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 80242c8:	e0ffd617 	ldw	r3,-168(fp)
 80242cc:	e0bfd317 	ldw	r2,-180(fp)
 80242d0:	1885883a 	add	r2,r3,r2
 80242d4:	1009883a 	mov	r4,r2
 80242d8:	016b7f44 	movi	r5,-20995
 80242dc:	802c2180 	call	802c218 <__mulsi3>
 80242e0:	e0bfd215 	stw	r2,-184(fp)
		tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
 80242e4:	e13fd617 	ldw	r4,-168(fp)
 80242e8:	01506cc4 	movi	r5,16819
 80242ec:	802c2180 	call	802c218 <__mulsi3>
 80242f0:	e0bfd615 	stw	r2,-168(fp)
		tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
 80242f4:	e13fd317 	ldw	r4,-180(fp)
 80242f8:	01589504 	movi	r5,25172
 80242fc:	802c2180 	call	802c218 <__mulsi3>
 8024300:	e0bfd315 	stw	r2,-180(fp)
		tmp1 += z1 + z3;
 8024304:	e0ffd217 	ldw	r3,-184(fp)
 8024308:	e0bfd117 	ldw	r2,-188(fp)
 802430c:	1885883a 	add	r2,r3,r2
 8024310:	e0ffd617 	ldw	r3,-168(fp)
 8024314:	1885883a 	add	r2,r3,r2
 8024318:	e0bfd615 	stw	r2,-168(fp)
		tmp2 += z1 + z2;
 802431c:	e0ffd217 	ldw	r3,-184(fp)
 8024320:	e0bfd017 	ldw	r2,-192(fp)
 8024324:	1885883a 	add	r2,r3,r2
 8024328:	e0ffd317 	ldw	r3,-180(fp)
 802432c:	1885883a 	add	r2,r3,r2
 8024330:	e0bfd315 	stw	r2,-180(fp)

		/* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */

		wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8024334:	e0ffd717 	ldw	r3,-164(fp)
 8024338:	e0bfd417 	ldw	r2,-176(fp)
 802433c:	1885883a 	add	r2,r3,r2
 8024340:	1007d2fa 	srai	r3,r2,11
 8024344:	e0bfcc17 	ldw	r2,-208(fp)
 8024348:	10c00015 	stw	r3,0(r2)
		wsptr[4*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 802434c:	e0bfcc17 	ldw	r2,-208(fp)
 8024350:	10801c04 	addi	r2,r2,112
 8024354:	e13fd717 	ldw	r4,-164(fp)
 8024358:	e0ffd417 	ldw	r3,-176(fp)
 802435c:	20c7c83a 	sub	r3,r4,r3
 8024360:	1807d2fa 	srai	r3,r3,11
 8024364:	10c00015 	stw	r3,0(r2)
		wsptr[4*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8024368:	e0bfcc17 	ldw	r2,-208(fp)
 802436c:	10800404 	addi	r2,r2,16
 8024370:	e13fd917 	ldw	r4,-156(fp)
 8024374:	e0ffd317 	ldw	r3,-180(fp)
 8024378:	20c7883a 	add	r3,r4,r3
 802437c:	1807d2fa 	srai	r3,r3,11
 8024380:	10c00015 	stw	r3,0(r2)
		wsptr[4*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8024384:	e0bfcc17 	ldw	r2,-208(fp)
 8024388:	10801804 	addi	r2,r2,96
 802438c:	e13fd917 	ldw	r4,-156(fp)
 8024390:	e0ffd317 	ldw	r3,-180(fp)
 8024394:	20c7c83a 	sub	r3,r4,r3
 8024398:	1807d2fa 	srai	r3,r3,11
 802439c:	10c00015 	stw	r3,0(r2)
		wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 80243a0:	e0bfcc17 	ldw	r2,-208(fp)
 80243a4:	10800804 	addi	r2,r2,32
 80243a8:	e13fda17 	ldw	r4,-152(fp)
 80243ac:	e0ffd617 	ldw	r3,-168(fp)
 80243b0:	20c7883a 	add	r3,r4,r3
 80243b4:	1807d2fa 	srai	r3,r3,11
 80243b8:	10c00015 	stw	r3,0(r2)
		wsptr[4*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 80243bc:	e0bfcc17 	ldw	r2,-208(fp)
 80243c0:	10801404 	addi	r2,r2,80
 80243c4:	e13fda17 	ldw	r4,-152(fp)
 80243c8:	e0ffd617 	ldw	r3,-168(fp)
 80243cc:	20c7c83a 	sub	r3,r4,r3
 80243d0:	1807d2fa 	srai	r3,r3,11
 80243d4:	10c00015 	stw	r3,0(r2)
		wsptr[4*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 80243d8:	e0bfcc17 	ldw	r2,-208(fp)
 80243dc:	10800c04 	addi	r2,r2,48
 80243e0:	e13fd817 	ldw	r4,-160(fp)
 80243e4:	e0ffd517 	ldw	r3,-172(fp)
 80243e8:	20c7883a 	add	r3,r4,r3
 80243ec:	1807d2fa 	srai	r3,r3,11
 80243f0:	10c00015 	stw	r3,0(r2)
		wsptr[4*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 80243f4:	e0bfcc17 	ldw	r2,-208(fp)
 80243f8:	10801004 	addi	r2,r2,64
 80243fc:	e13fd817 	ldw	r4,-160(fp)
 8024400:	e0ffd517 	ldw	r3,-172(fp)
 8024404:	20c7c83a 	sub	r3,r4,r3
 8024408:	1807d2fa 	srai	r3,r3,11
 802440c:	10c00015 	stw	r3,0(r2)

		inptr++;			/* advance pointers to next column */
 8024410:	e0bfca17 	ldw	r2,-216(fp)
 8024414:	10800084 	addi	r2,r2,2
 8024418:	e0bfca15 	stw	r2,-216(fp)
		quantptr++;
 802441c:	e0bfcb17 	ldw	r2,-212(fp)
 8024420:	10800104 	addi	r2,r2,4
 8024424:	e0bfcb15 	stw	r2,-212(fp)
		wsptr++;
 8024428:	e0bfcc17 	ldw	r2,-208(fp)
 802442c:	10800104 	addi	r2,r2,4
 8024430:	e0bfcc15 	stw	r2,-208(fp)
		/* furthermore, we scale the results by 2**PASS1_BITS. */

		inptr = coef_block;
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
	wsptr = workspace;
	for (ctr = 4; ctr > 0; ctr--) {
 8024434:	e0bfcd17 	ldw	r2,-204(fp)
 8024438:	10bfffc4 	addi	r2,r2,-1
 802443c:	e0bfcd15 	stw	r2,-204(fp)
 8024440:	e0bfcd17 	ldw	r2,-204(fp)
 8024444:	00be6316 	blt	zero,r2,8023dd4 <jpeg_idct_4x8+0x58>
	}

	/* Pass 2: process 8 rows from work array, store into output array.
	* 4-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/16).
	*/
	wsptr = workspace;
 8024448:	e0bfdc04 	addi	r2,fp,-144
 802444c:	e0bfcc15 	stw	r2,-208(fp)
	for (ctr = 0; ctr < 8; ctr++) {
 8024450:	e03fcd15 	stw	zero,-204(fp)
 8024454:	00006906 	br	80245fc <jpeg_idct_4x8+0x880>
		outptr = output_buf[ctr] + output_col;
 8024458:	e0bfcd17 	ldw	r2,-204(fp)
 802445c:	1085883a 	add	r2,r2,r2
 8024460:	1085883a 	add	r2,r2,r2
 8024464:	e0ffff17 	ldw	r3,-4(fp)
 8024468:	1885883a 	add	r2,r3,r2
 802446c:	10c00017 	ldw	r3,0(r2)
 8024470:	e0800217 	ldw	r2,8(fp)
 8024474:	1885883a 	add	r2,r3,r2
 8024478:	e0bfdb15 	stw	r2,-148(fp)

		/* Even part */

		/* Add fudge factor here for final descale. */
		tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 802447c:	e0bfcc17 	ldw	r2,-208(fp)
 8024480:	10800017 	ldw	r2,0(r2)
 8024484:	10800404 	addi	r2,r2,16
 8024488:	e0bfd515 	stw	r2,-172(fp)
		tmp2 = (INT32) wsptr[2];
 802448c:	e0bfcc17 	ldw	r2,-208(fp)
 8024490:	10800204 	addi	r2,r2,8
 8024494:	10800017 	ldw	r2,0(r2)
 8024498:	e0bfd315 	stw	r2,-180(fp)

		tmp10 = (tmp0 + tmp2) << CONST_BITS;
 802449c:	e0ffd517 	ldw	r3,-172(fp)
 80244a0:	e0bfd317 	ldw	r2,-180(fp)
 80244a4:	1885883a 	add	r2,r3,r2
 80244a8:	1004937a 	slli	r2,r2,13
 80244ac:	e0bfd715 	stw	r2,-164(fp)
		tmp12 = (tmp0 - tmp2) << CONST_BITS;
 80244b0:	e0ffd517 	ldw	r3,-172(fp)
 80244b4:	e0bfd317 	ldw	r2,-180(fp)
 80244b8:	1885c83a 	sub	r2,r3,r2
 80244bc:	1004937a 	slli	r2,r2,13
 80244c0:	e0bfda15 	stw	r2,-152(fp)

		/* Odd part */
		/* Same rotation as in the even part of the 8x8 LL&M IDCT */

		z2 = (INT32) wsptr[1];
 80244c4:	e0bfcc17 	ldw	r2,-208(fp)
 80244c8:	10800104 	addi	r2,r2,4
 80244cc:	10800017 	ldw	r2,0(r2)
 80244d0:	e0bfd015 	stw	r2,-192(fp)
		z3 = (INT32) wsptr[3];
 80244d4:	e0bfcc17 	ldw	r2,-208(fp)
 80244d8:	10800304 	addi	r2,r2,12
 80244dc:	10800017 	ldw	r2,0(r2)
 80244e0:	e0bfd115 	stw	r2,-188(fp)

		z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 80244e4:	e0ffd017 	ldw	r3,-192(fp)
 80244e8:	e0bfd117 	ldw	r2,-188(fp)
 80244ec:	1885883a 	add	r2,r3,r2
 80244f0:	1009883a 	mov	r4,r2
 80244f4:	01445444 	movi	r5,4433
 80244f8:	802c2180 	call	802c218 <__mulsi3>
 80244fc:	e0bfd215 	stw	r2,-184(fp)
		tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8024500:	e13fd017 	ldw	r4,-192(fp)
 8024504:	01461f84 	movi	r5,6270
 8024508:	802c2180 	call	802c218 <__mulsi3>
 802450c:	1007883a 	mov	r3,r2
 8024510:	e0bfd217 	ldw	r2,-184(fp)
 8024514:	1885883a 	add	r2,r3,r2
 8024518:	e0bfd515 	stw	r2,-172(fp)
		tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 802451c:	e13fd117 	ldw	r4,-188(fp)
 8024520:	017137c4 	movi	r5,-15137
 8024524:	802c2180 	call	802c218 <__mulsi3>
 8024528:	1007883a 	mov	r3,r2
 802452c:	e0bfd217 	ldw	r2,-184(fp)
 8024530:	1885883a 	add	r2,r3,r2
 8024534:	e0bfd315 	stw	r2,-180(fp)

		/* Final output stage */

		outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8024538:	e0ffd717 	ldw	r3,-164(fp)
 802453c:	e0bfd517 	ldw	r2,-172(fp)
 8024540:	1885883a 	add	r2,r3,r2
 8024544:	1005d4ba 	srai	r2,r2,18
 8024548:	1080ffcc 	andi	r2,r2,1023
 802454c:	e0ffce17 	ldw	r3,-200(fp)
 8024550:	1885883a 	add	r2,r3,r2
 8024554:	10c00003 	ldbu	r3,0(r2)
 8024558:	e0bfdb17 	ldw	r2,-148(fp)
 802455c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8024560:	e0bfdb17 	ldw	r2,-148(fp)
 8024564:	108000c4 	addi	r2,r2,3
 8024568:	e13fd717 	ldw	r4,-164(fp)
 802456c:	e0ffd517 	ldw	r3,-172(fp)
 8024570:	20c7c83a 	sub	r3,r4,r3
 8024574:	1807d4ba 	srai	r3,r3,18
 8024578:	18c0ffcc 	andi	r3,r3,1023
 802457c:	e13fce17 	ldw	r4,-200(fp)
 8024580:	20c7883a 	add	r3,r4,r3
 8024584:	18c00003 	ldbu	r3,0(r3)
 8024588:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 802458c:	e0bfdb17 	ldw	r2,-148(fp)
 8024590:	10800044 	addi	r2,r2,1
 8024594:	e13fda17 	ldw	r4,-152(fp)
 8024598:	e0ffd317 	ldw	r3,-180(fp)
 802459c:	20c7883a 	add	r3,r4,r3
 80245a0:	1807d4ba 	srai	r3,r3,18
 80245a4:	18c0ffcc 	andi	r3,r3,1023
 80245a8:	e13fce17 	ldw	r4,-200(fp)
 80245ac:	20c7883a 	add	r3,r4,r3
 80245b0:	18c00003 	ldbu	r3,0(r3)
 80245b4:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80245b8:	e0bfdb17 	ldw	r2,-148(fp)
 80245bc:	10800084 	addi	r2,r2,2
 80245c0:	e13fda17 	ldw	r4,-152(fp)
 80245c4:	e0ffd317 	ldw	r3,-180(fp)
 80245c8:	20c7c83a 	sub	r3,r4,r3
 80245cc:	1807d4ba 	srai	r3,r3,18
 80245d0:	18c0ffcc 	andi	r3,r3,1023
 80245d4:	e13fce17 	ldw	r4,-200(fp)
 80245d8:	20c7883a 	add	r3,r4,r3
 80245dc:	18c00003 	ldbu	r3,0(r3)
 80245e0:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 4;		/* advance pointer to next row */
 80245e4:	e0bfcc17 	ldw	r2,-208(fp)
 80245e8:	10800404 	addi	r2,r2,16
 80245ec:	e0bfcc15 	stw	r2,-208(fp)

	/* Pass 2: process 8 rows from work array, store into output array.
	* 4-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/16).
	*/
	wsptr = workspace;
	for (ctr = 0; ctr < 8; ctr++) {
 80245f0:	e0bfcd17 	ldw	r2,-204(fp)
 80245f4:	10800044 	addi	r2,r2,1
 80245f8:	e0bfcd15 	stw	r2,-204(fp)
 80245fc:	e0bfcd17 	ldw	r2,-204(fp)
 8024600:	10800210 	cmplti	r2,r2,8
 8024604:	103f941e 	bne	r2,zero,8024458 <jpeg_idct_4x8+0x6dc>
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 4;		/* advance pointer to next row */
	}
}
 8024608:	e037883a 	mov	sp,fp
 802460c:	dfc00117 	ldw	ra,4(sp)
 8024610:	df000017 	ldw	fp,0(sp)
 8024614:	dec00204 	addi	sp,sp,8
 8024618:	f800283a 	ret

0802461c <jpeg_idct_3x6>:

GLOBAL(void)
	jpeg_idct_3x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
 802461c:	deffd904 	addi	sp,sp,-156
 8024620:	dfc02615 	stw	ra,152(sp)
 8024624:	df002515 	stw	fp,148(sp)
 8024628:	df002504 	addi	fp,sp,148
 802462c:	e13ffc15 	stw	r4,-16(fp)
 8024630:	e17ffd15 	stw	r5,-12(fp)
 8024634:	e1bffe15 	stw	r6,-8(fp)
 8024638:	e1ffff15 	stw	r7,-4(fp)
	INT32 z1, z2, z3;
	JCOEFPTR inptr;
	ISLOW_MULT_TYPE * quantptr;
	int * wsptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 802463c:	e0bffc17 	ldw	r2,-16(fp)
 8024640:	10804917 	ldw	r2,292(r2)
 8024644:	10802004 	addi	r2,r2,128
 8024648:	e0bfdf15 	stw	r2,-132(fp)
	SHIFT_TEMPS

		/* Pass 1: process columns from input, store into work array.
		* 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
		*/
		inptr = coef_block;
 802464c:	e0bffe17 	ldw	r2,-8(fp)
 8024650:	e0bfdb15 	stw	r2,-148(fp)
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8024654:	e0bffd17 	ldw	r2,-12(fp)
 8024658:	10801517 	ldw	r2,84(r2)
 802465c:	e0bfdc15 	stw	r2,-144(fp)
	wsptr = workspace;
 8024660:	e0bfea04 	addi	r2,fp,-88
 8024664:	e0bfdd15 	stw	r2,-140(fp)
	for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8024668:	e03fde15 	stw	zero,-136(fp)
 802466c:	0000bd06 	br	8024964 <jpeg_idct_3x6+0x348>
		/* Even part */

		tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8024670:	e0bfdb17 	ldw	r2,-148(fp)
 8024674:	1080000b 	ldhu	r2,0(r2)
 8024678:	10ffffcc 	andi	r3,r2,65535
 802467c:	18e0001c 	xori	r3,r3,32768
 8024680:	18e00004 	addi	r3,r3,-32768
 8024684:	e0bfdc17 	ldw	r2,-144(fp)
 8024688:	10800017 	ldw	r2,0(r2)
 802468c:	1809883a 	mov	r4,r3
 8024690:	100b883a 	mov	r5,r2
 8024694:	802c2180 	call	802c218 <__mulsi3>
 8024698:	e0bfe015 	stw	r2,-128(fp)
		tmp0 <<= CONST_BITS;
 802469c:	e0bfe017 	ldw	r2,-128(fp)
 80246a0:	1004937a 	slli	r2,r2,13
 80246a4:	e0bfe015 	stw	r2,-128(fp)
		/* Add fudge factor here for final descale. */
		tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 80246a8:	e0bfe017 	ldw	r2,-128(fp)
 80246ac:	10810004 	addi	r2,r2,1024
 80246b0:	e0bfe015 	stw	r2,-128(fp)
		tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80246b4:	e0bfdb17 	ldw	r2,-148(fp)
 80246b8:	10801004 	addi	r2,r2,64
 80246bc:	1080000b 	ldhu	r2,0(r2)
 80246c0:	10ffffcc 	andi	r3,r2,65535
 80246c4:	18e0001c 	xori	r3,r3,32768
 80246c8:	18e00004 	addi	r3,r3,-32768
 80246cc:	e0bfdc17 	ldw	r2,-144(fp)
 80246d0:	10802004 	addi	r2,r2,128
 80246d4:	10800017 	ldw	r2,0(r2)
 80246d8:	1809883a 	mov	r4,r3
 80246dc:	100b883a 	mov	r5,r2
 80246e0:	802c2180 	call	802c218 <__mulsi3>
 80246e4:	e0bfe115 	stw	r2,-124(fp)
		tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 80246e8:	e13fe117 	ldw	r4,-124(fp)
 80246ec:	0145a844 	movi	r5,5793
 80246f0:	802c2180 	call	802c218 <__mulsi3>
 80246f4:	e0bfe215 	stw	r2,-120(fp)
		tmp1 = tmp0 + tmp10;
 80246f8:	e0ffe017 	ldw	r3,-128(fp)
 80246fc:	e0bfe217 	ldw	r2,-120(fp)
 8024700:	1885883a 	add	r2,r3,r2
 8024704:	e0bfe315 	stw	r2,-116(fp)
		tmp11 = RIGHT_SHIFT(tmp0 - tmp10 - tmp10, CONST_BITS-PASS1_BITS);
 8024708:	e0ffe017 	ldw	r3,-128(fp)
 802470c:	e0bfe217 	ldw	r2,-120(fp)
 8024710:	1887c83a 	sub	r3,r3,r2
 8024714:	e0bfe217 	ldw	r2,-120(fp)
 8024718:	1885c83a 	sub	r2,r3,r2
 802471c:	1005d2fa 	srai	r2,r2,11
 8024720:	e0bfe415 	stw	r2,-112(fp)
		tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8024724:	e0bfdb17 	ldw	r2,-148(fp)
 8024728:	10800804 	addi	r2,r2,32
 802472c:	1080000b 	ldhu	r2,0(r2)
 8024730:	10ffffcc 	andi	r3,r2,65535
 8024734:	18e0001c 	xori	r3,r3,32768
 8024738:	18e00004 	addi	r3,r3,-32768
 802473c:	e0bfdc17 	ldw	r2,-144(fp)
 8024740:	10801004 	addi	r2,r2,64
 8024744:	10800017 	ldw	r2,0(r2)
 8024748:	1809883a 	mov	r4,r3
 802474c:	100b883a 	mov	r5,r2
 8024750:	802c2180 	call	802c218 <__mulsi3>
 8024754:	e0bfe215 	stw	r2,-120(fp)
		tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8024758:	e13fe217 	ldw	r4,-120(fp)
 802475c:	0149cc44 	movi	r5,10033
 8024760:	802c2180 	call	802c218 <__mulsi3>
 8024764:	e0bfe015 	stw	r2,-128(fp)
		tmp10 = tmp1 + tmp0;
 8024768:	e0ffe317 	ldw	r3,-116(fp)
 802476c:	e0bfe017 	ldw	r2,-128(fp)
 8024770:	1885883a 	add	r2,r3,r2
 8024774:	e0bfe215 	stw	r2,-120(fp)
		tmp12 = tmp1 - tmp0;
 8024778:	e0ffe317 	ldw	r3,-116(fp)
 802477c:	e0bfe017 	ldw	r2,-128(fp)
 8024780:	1885c83a 	sub	r2,r3,r2
 8024784:	e0bfe515 	stw	r2,-108(fp)

		/* Odd part */

		z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8024788:	e0bfdb17 	ldw	r2,-148(fp)
 802478c:	10800404 	addi	r2,r2,16
 8024790:	1080000b 	ldhu	r2,0(r2)
 8024794:	10ffffcc 	andi	r3,r2,65535
 8024798:	18e0001c 	xori	r3,r3,32768
 802479c:	18e00004 	addi	r3,r3,-32768
 80247a0:	e0bfdc17 	ldw	r2,-144(fp)
 80247a4:	10800804 	addi	r2,r2,32
 80247a8:	10800017 	ldw	r2,0(r2)
 80247ac:	1809883a 	mov	r4,r3
 80247b0:	100b883a 	mov	r5,r2
 80247b4:	802c2180 	call	802c218 <__mulsi3>
 80247b8:	e0bfe615 	stw	r2,-104(fp)
		z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80247bc:	e0bfdb17 	ldw	r2,-148(fp)
 80247c0:	10800c04 	addi	r2,r2,48
 80247c4:	1080000b 	ldhu	r2,0(r2)
 80247c8:	10ffffcc 	andi	r3,r2,65535
 80247cc:	18e0001c 	xori	r3,r3,32768
 80247d0:	18e00004 	addi	r3,r3,-32768
 80247d4:	e0bfdc17 	ldw	r2,-144(fp)
 80247d8:	10801804 	addi	r2,r2,96
 80247dc:	10800017 	ldw	r2,0(r2)
 80247e0:	1809883a 	mov	r4,r3
 80247e4:	100b883a 	mov	r5,r2
 80247e8:	802c2180 	call	802c218 <__mulsi3>
 80247ec:	e0bfe715 	stw	r2,-100(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80247f0:	e0bfdb17 	ldw	r2,-148(fp)
 80247f4:	10801404 	addi	r2,r2,80
 80247f8:	1080000b 	ldhu	r2,0(r2)
 80247fc:	10ffffcc 	andi	r3,r2,65535
 8024800:	18e0001c 	xori	r3,r3,32768
 8024804:	18e00004 	addi	r3,r3,-32768
 8024808:	e0bfdc17 	ldw	r2,-144(fp)
 802480c:	10802804 	addi	r2,r2,160
 8024810:	10800017 	ldw	r2,0(r2)
 8024814:	1809883a 	mov	r4,r3
 8024818:	100b883a 	mov	r5,r2
 802481c:	802c2180 	call	802c218 <__mulsi3>
 8024820:	e0bfe815 	stw	r2,-96(fp)
		tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8024824:	e0ffe617 	ldw	r3,-104(fp)
 8024828:	e0bfe817 	ldw	r2,-96(fp)
 802482c:	1885883a 	add	r2,r3,r2
 8024830:	1009883a 	mov	r4,r2
 8024834:	0142ed84 	movi	r5,2998
 8024838:	802c2180 	call	802c218 <__mulsi3>
 802483c:	e0bfe315 	stw	r2,-116(fp)
		tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8024840:	e0ffe617 	ldw	r3,-104(fp)
 8024844:	e0bfe717 	ldw	r2,-100(fp)
 8024848:	1885883a 	add	r2,r3,r2
 802484c:	1006937a 	slli	r3,r2,13
 8024850:	e0bfe317 	ldw	r2,-116(fp)
 8024854:	1885883a 	add	r2,r3,r2
 8024858:	e0bfe015 	stw	r2,-128(fp)
		tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 802485c:	e0ffe817 	ldw	r3,-96(fp)
 8024860:	e0bfe717 	ldw	r2,-100(fp)
 8024864:	1885c83a 	sub	r2,r3,r2
 8024868:	1006937a 	slli	r3,r2,13
 802486c:	e0bfe317 	ldw	r2,-116(fp)
 8024870:	1885883a 	add	r2,r3,r2
 8024874:	e0bfe115 	stw	r2,-124(fp)
		tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 8024878:	e0ffe617 	ldw	r3,-104(fp)
 802487c:	e0bfe717 	ldw	r2,-100(fp)
 8024880:	1887c83a 	sub	r3,r3,r2
 8024884:	e0bfe817 	ldw	r2,-96(fp)
 8024888:	1885c83a 	sub	r2,r3,r2
 802488c:	1085883a 	add	r2,r2,r2
 8024890:	1085883a 	add	r2,r2,r2
 8024894:	e0bfe315 	stw	r2,-116(fp)

		/* Final output stage */

		wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8024898:	e0ffe217 	ldw	r3,-120(fp)
 802489c:	e0bfe017 	ldw	r2,-128(fp)
 80248a0:	1885883a 	add	r2,r3,r2
 80248a4:	1007d2fa 	srai	r3,r2,11
 80248a8:	e0bfdd17 	ldw	r2,-140(fp)
 80248ac:	10c00015 	stw	r3,0(r2)
		wsptr[3*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80248b0:	e0bfdd17 	ldw	r2,-140(fp)
 80248b4:	10800f04 	addi	r2,r2,60
 80248b8:	e13fe217 	ldw	r4,-120(fp)
 80248bc:	e0ffe017 	ldw	r3,-128(fp)
 80248c0:	20c7c83a 	sub	r3,r4,r3
 80248c4:	1807d2fa 	srai	r3,r3,11
 80248c8:	10c00015 	stw	r3,0(r2)
		wsptr[3*1] = (int) (tmp11 + tmp1);
 80248cc:	e0bfdd17 	ldw	r2,-140(fp)
 80248d0:	10800304 	addi	r2,r2,12
 80248d4:	e13fe417 	ldw	r4,-112(fp)
 80248d8:	e0ffe317 	ldw	r3,-116(fp)
 80248dc:	20c7883a 	add	r3,r4,r3
 80248e0:	10c00015 	stw	r3,0(r2)
		wsptr[3*4] = (int) (tmp11 - tmp1);
 80248e4:	e0bfdd17 	ldw	r2,-140(fp)
 80248e8:	10800c04 	addi	r2,r2,48
 80248ec:	e13fe417 	ldw	r4,-112(fp)
 80248f0:	e0ffe317 	ldw	r3,-116(fp)
 80248f4:	20c7c83a 	sub	r3,r4,r3
 80248f8:	10c00015 	stw	r3,0(r2)
		wsptr[3*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 80248fc:	e0bfdd17 	ldw	r2,-140(fp)
 8024900:	10800604 	addi	r2,r2,24
 8024904:	e13fe517 	ldw	r4,-108(fp)
 8024908:	e0ffe117 	ldw	r3,-124(fp)
 802490c:	20c7883a 	add	r3,r4,r3
 8024910:	1807d2fa 	srai	r3,r3,11
 8024914:	10c00015 	stw	r3,0(r2)
		wsptr[3*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8024918:	e0bfdd17 	ldw	r2,-140(fp)
 802491c:	10800904 	addi	r2,r2,36
 8024920:	e13fe517 	ldw	r4,-108(fp)
 8024924:	e0ffe117 	ldw	r3,-124(fp)
 8024928:	20c7c83a 	sub	r3,r4,r3
 802492c:	1807d2fa 	srai	r3,r3,11
 8024930:	10c00015 	stw	r3,0(r2)
		* 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
		*/
		inptr = coef_block;
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
	wsptr = workspace;
	for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8024934:	e0bfde17 	ldw	r2,-136(fp)
 8024938:	10800044 	addi	r2,r2,1
 802493c:	e0bfde15 	stw	r2,-136(fp)
 8024940:	e0bfdb17 	ldw	r2,-148(fp)
 8024944:	10800084 	addi	r2,r2,2
 8024948:	e0bfdb15 	stw	r2,-148(fp)
 802494c:	e0bfdc17 	ldw	r2,-144(fp)
 8024950:	10800104 	addi	r2,r2,4
 8024954:	e0bfdc15 	stw	r2,-144(fp)
 8024958:	e0bfdd17 	ldw	r2,-140(fp)
 802495c:	10800104 	addi	r2,r2,4
 8024960:	e0bfdd15 	stw	r2,-140(fp)
 8024964:	e0bfde17 	ldw	r2,-136(fp)
 8024968:	108000d0 	cmplti	r2,r2,3
 802496c:	103f401e 	bne	r2,zero,8024670 <jpeg_idct_3x6+0x54>
	}

	/* Pass 2: process 6 rows from work array, store into output array.
	* 3-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/6).
	*/
	wsptr = workspace;
 8024970:	e0bfea04 	addi	r2,fp,-88
 8024974:	e0bfdd15 	stw	r2,-140(fp)
	for (ctr = 0; ctr < 6; ctr++) {
 8024978:	e03fde15 	stw	zero,-136(fp)
 802497c:	00004e06 	br	8024ab8 <jpeg_idct_3x6+0x49c>
		outptr = output_buf[ctr] + output_col;
 8024980:	e0bfde17 	ldw	r2,-136(fp)
 8024984:	1085883a 	add	r2,r2,r2
 8024988:	1085883a 	add	r2,r2,r2
 802498c:	e0ffff17 	ldw	r3,-4(fp)
 8024990:	1885883a 	add	r2,r3,r2
 8024994:	10c00017 	ldw	r3,0(r2)
 8024998:	e0800217 	ldw	r2,8(fp)
 802499c:	1885883a 	add	r2,r3,r2
 80249a0:	e0bfe915 	stw	r2,-92(fp)

		/* Even part */

		/* Add fudge factor here for final descale. */
		tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80249a4:	e0bfdd17 	ldw	r2,-140(fp)
 80249a8:	10800017 	ldw	r2,0(r2)
 80249ac:	10800404 	addi	r2,r2,16
 80249b0:	e0bfe015 	stw	r2,-128(fp)
		tmp0 <<= CONST_BITS;
 80249b4:	e0bfe017 	ldw	r2,-128(fp)
 80249b8:	1004937a 	slli	r2,r2,13
 80249bc:	e0bfe015 	stw	r2,-128(fp)
		tmp2 = (INT32) wsptr[2];
 80249c0:	e0bfdd17 	ldw	r2,-140(fp)
 80249c4:	10800204 	addi	r2,r2,8
 80249c8:	10800017 	ldw	r2,0(r2)
 80249cc:	e0bfe115 	stw	r2,-124(fp)
		tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 80249d0:	e13fe117 	ldw	r4,-124(fp)
 80249d4:	0145a844 	movi	r5,5793
 80249d8:	802c2180 	call	802c218 <__mulsi3>
 80249dc:	e0bfe515 	stw	r2,-108(fp)
		tmp10 = tmp0 + tmp12;
 80249e0:	e0ffe017 	ldw	r3,-128(fp)
 80249e4:	e0bfe517 	ldw	r2,-108(fp)
 80249e8:	1885883a 	add	r2,r3,r2
 80249ec:	e0bfe215 	stw	r2,-120(fp)
		tmp2 = tmp0 - tmp12 - tmp12;
 80249f0:	e0ffe017 	ldw	r3,-128(fp)
 80249f4:	e0bfe517 	ldw	r2,-108(fp)
 80249f8:	1887c83a 	sub	r3,r3,r2
 80249fc:	e0bfe517 	ldw	r2,-108(fp)
 8024a00:	1885c83a 	sub	r2,r3,r2
 8024a04:	e0bfe115 	stw	r2,-124(fp)

		/* Odd part */

		tmp12 = (INT32) wsptr[1];
 8024a08:	e0bfdd17 	ldw	r2,-140(fp)
 8024a0c:	10800104 	addi	r2,r2,4
 8024a10:	10800017 	ldw	r2,0(r2)
 8024a14:	e0bfe515 	stw	r2,-108(fp)
		tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8024a18:	e13fe517 	ldw	r4,-108(fp)
 8024a1c:	0149cc44 	movi	r5,10033
 8024a20:	802c2180 	call	802c218 <__mulsi3>
 8024a24:	e0bfe015 	stw	r2,-128(fp)

		/* Final output stage */

		outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8024a28:	e0ffe217 	ldw	r3,-120(fp)
 8024a2c:	e0bfe017 	ldw	r2,-128(fp)
 8024a30:	1885883a 	add	r2,r3,r2
 8024a34:	1005d4ba 	srai	r2,r2,18
 8024a38:	1080ffcc 	andi	r2,r2,1023
 8024a3c:	e0ffdf17 	ldw	r3,-132(fp)
 8024a40:	1885883a 	add	r2,r3,r2
 8024a44:	10c00003 	ldbu	r3,0(r2)
 8024a48:	e0bfe917 	ldw	r2,-92(fp)
 8024a4c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8024a50:	e0bfe917 	ldw	r2,-92(fp)
 8024a54:	10800084 	addi	r2,r2,2
 8024a58:	e13fe217 	ldw	r4,-120(fp)
 8024a5c:	e0ffe017 	ldw	r3,-128(fp)
 8024a60:	20c7c83a 	sub	r3,r4,r3
 8024a64:	1807d4ba 	srai	r3,r3,18
 8024a68:	18c0ffcc 	andi	r3,r3,1023
 8024a6c:	e13fdf17 	ldw	r4,-132(fp)
 8024a70:	20c7883a 	add	r3,r4,r3
 8024a74:	18c00003 	ldbu	r3,0(r3)
 8024a78:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];
		outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
 8024a7c:	e0bfe917 	ldw	r2,-92(fp)
 8024a80:	10800044 	addi	r2,r2,1
 8024a84:	e0ffe117 	ldw	r3,-124(fp)
 8024a88:	1807d4ba 	srai	r3,r3,18
 8024a8c:	18c0ffcc 	andi	r3,r3,1023
 8024a90:	e13fdf17 	ldw	r4,-132(fp)
 8024a94:	20c7883a 	add	r3,r4,r3
 8024a98:	18c00003 	ldbu	r3,0(r3)
 8024a9c:	10c00005 	stb	r3,0(r2)
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 3;		/* advance pointer to next row */
 8024aa0:	e0bfdd17 	ldw	r2,-140(fp)
 8024aa4:	10800304 	addi	r2,r2,12
 8024aa8:	e0bfdd15 	stw	r2,-140(fp)

	/* Pass 2: process 6 rows from work array, store into output array.
	* 3-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/6).
	*/
	wsptr = workspace;
	for (ctr = 0; ctr < 6; ctr++) {
 8024aac:	e0bfde17 	ldw	r2,-136(fp)
 8024ab0:	10800044 	addi	r2,r2,1
 8024ab4:	e0bfde15 	stw	r2,-136(fp)
 8024ab8:	e0bfde17 	ldw	r2,-136(fp)
 8024abc:	10800190 	cmplti	r2,r2,6
 8024ac0:	103faf1e 	bne	r2,zero,8024980 <jpeg_idct_3x6+0x364>
			CONST_BITS+PASS1_BITS+3)
			& RANGE_MASK];

		wsptr += 3;		/* advance pointer to next row */
	}
}
 8024ac4:	e037883a 	mov	sp,fp
 8024ac8:	dfc00117 	ldw	ra,4(sp)
 8024acc:	df000017 	ldw	fp,0(sp)
 8024ad0:	dec00204 	addi	sp,sp,8
 8024ad4:	f800283a 	ret

08024ad8 <jpeg_idct_2x4>:

GLOBAL(void)
	jpeg_idct_2x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8024ad8:	deffe504 	addi	sp,sp,-108
 8024adc:	dfc01a15 	stw	ra,104(sp)
 8024ae0:	df001915 	stw	fp,100(sp)
 8024ae4:	df001904 	addi	fp,sp,100
 8024ae8:	e13ffc15 	stw	r4,-16(fp)
 8024aec:	e17ffd15 	stw	r5,-12(fp)
 8024af0:	e1bffe15 	stw	r6,-8(fp)
 8024af4:	e1ffff15 	stw	r7,-4(fp)
	INT32 z1, z2, z3;
	JCOEFPTR inptr;
	ISLOW_MULT_TYPE * quantptr;
	INT32 * wsptr;
	JSAMPROW outptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8024af8:	e0bffc17 	ldw	r2,-16(fp)
 8024afc:	10804917 	ldw	r2,292(r2)
 8024b00:	10802004 	addi	r2,r2,128
 8024b04:	e0bfeb15 	stw	r2,-84(fp)

		/* Pass 1: process columns from input, store into work array.
		* 4-point IDCT kernel,
		* cK represents sqrt(2) * cos(K*pi/16) [refers to 8-point IDCT].
		*/
		inptr = coef_block;
 8024b08:	e0bffe17 	ldw	r2,-8(fp)
 8024b0c:	e0bfe715 	stw	r2,-100(fp)
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8024b10:	e0bffd17 	ldw	r2,-12(fp)
 8024b14:	10801517 	ldw	r2,84(r2)
 8024b18:	e0bfe815 	stw	r2,-96(fp)
	wsptr = workspace;
 8024b1c:	e0bff404 	addi	r2,fp,-48
 8024b20:	e0bfe915 	stw	r2,-92(fp)
	for (ctr = 0; ctr < 2; ctr++, inptr++, quantptr++, wsptr++) {
 8024b24:	e03fea15 	stw	zero,-88(fp)
 8024b28:	00007406 	br	8024cfc <jpeg_idct_2x4+0x224>
		/* Even part */

		tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8024b2c:	e0bfe717 	ldw	r2,-100(fp)
 8024b30:	1080000b 	ldhu	r2,0(r2)
 8024b34:	10ffffcc 	andi	r3,r2,65535
 8024b38:	18e0001c 	xori	r3,r3,32768
 8024b3c:	18e00004 	addi	r3,r3,-32768
 8024b40:	e0bfe817 	ldw	r2,-96(fp)
 8024b44:	10800017 	ldw	r2,0(r2)
 8024b48:	1809883a 	mov	r4,r3
 8024b4c:	100b883a 	mov	r5,r2
 8024b50:	802c2180 	call	802c218 <__mulsi3>
 8024b54:	e0bfec15 	stw	r2,-80(fp)
		tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8024b58:	e0bfe717 	ldw	r2,-100(fp)
 8024b5c:	10800804 	addi	r2,r2,32
 8024b60:	1080000b 	ldhu	r2,0(r2)
 8024b64:	10ffffcc 	andi	r3,r2,65535
 8024b68:	18e0001c 	xori	r3,r3,32768
 8024b6c:	18e00004 	addi	r3,r3,-32768
 8024b70:	e0bfe817 	ldw	r2,-96(fp)
 8024b74:	10801004 	addi	r2,r2,64
 8024b78:	10800017 	ldw	r2,0(r2)
 8024b7c:	1809883a 	mov	r4,r3
 8024b80:	100b883a 	mov	r5,r2
 8024b84:	802c2180 	call	802c218 <__mulsi3>
 8024b88:	e0bfed15 	stw	r2,-76(fp)

		tmp10 = (tmp0 + tmp2) << CONST_BITS;
 8024b8c:	e0ffec17 	ldw	r3,-80(fp)
 8024b90:	e0bfed17 	ldw	r2,-76(fp)
 8024b94:	1885883a 	add	r2,r3,r2
 8024b98:	1004937a 	slli	r2,r2,13
 8024b9c:	e0bfee15 	stw	r2,-72(fp)
		tmp12 = (tmp0 - tmp2) << CONST_BITS;
 8024ba0:	e0ffec17 	ldw	r3,-80(fp)
 8024ba4:	e0bfed17 	ldw	r2,-76(fp)
 8024ba8:	1885c83a 	sub	r2,r3,r2
 8024bac:	1004937a 	slli	r2,r2,13
 8024bb0:	e0bfef15 	stw	r2,-68(fp)

		/* Odd part */
		/* Same rotation as in the even part of the 8x8 LL&M IDCT */

		z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8024bb4:	e0bfe717 	ldw	r2,-100(fp)
 8024bb8:	10800404 	addi	r2,r2,16
 8024bbc:	1080000b 	ldhu	r2,0(r2)
 8024bc0:	10ffffcc 	andi	r3,r2,65535
 8024bc4:	18e0001c 	xori	r3,r3,32768
 8024bc8:	18e00004 	addi	r3,r3,-32768
 8024bcc:	e0bfe817 	ldw	r2,-96(fp)
 8024bd0:	10800804 	addi	r2,r2,32
 8024bd4:	10800017 	ldw	r2,0(r2)
 8024bd8:	1809883a 	mov	r4,r3
 8024bdc:	100b883a 	mov	r5,r2
 8024be0:	802c2180 	call	802c218 <__mulsi3>
 8024be4:	e0bff015 	stw	r2,-64(fp)
		z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8024be8:	e0bfe717 	ldw	r2,-100(fp)
 8024bec:	10800c04 	addi	r2,r2,48
 8024bf0:	1080000b 	ldhu	r2,0(r2)
 8024bf4:	10ffffcc 	andi	r3,r2,65535
 8024bf8:	18e0001c 	xori	r3,r3,32768
 8024bfc:	18e00004 	addi	r3,r3,-32768
 8024c00:	e0bfe817 	ldw	r2,-96(fp)
 8024c04:	10801804 	addi	r2,r2,96
 8024c08:	10800017 	ldw	r2,0(r2)
 8024c0c:	1809883a 	mov	r4,r3
 8024c10:	100b883a 	mov	r5,r2
 8024c14:	802c2180 	call	802c218 <__mulsi3>
 8024c18:	e0bff115 	stw	r2,-60(fp)

		z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8024c1c:	e0fff017 	ldw	r3,-64(fp)
 8024c20:	e0bff117 	ldw	r2,-60(fp)
 8024c24:	1885883a 	add	r2,r3,r2
 8024c28:	1009883a 	mov	r4,r2
 8024c2c:	01445444 	movi	r5,4433
 8024c30:	802c2180 	call	802c218 <__mulsi3>
 8024c34:	e0bff215 	stw	r2,-56(fp)
		tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8024c38:	e13ff017 	ldw	r4,-64(fp)
 8024c3c:	01461f84 	movi	r5,6270
 8024c40:	802c2180 	call	802c218 <__mulsi3>
 8024c44:	1007883a 	mov	r3,r2
 8024c48:	e0bff217 	ldw	r2,-56(fp)
 8024c4c:	1885883a 	add	r2,r3,r2
 8024c50:	e0bfec15 	stw	r2,-80(fp)
		tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8024c54:	e13ff117 	ldw	r4,-60(fp)
 8024c58:	017137c4 	movi	r5,-15137
 8024c5c:	802c2180 	call	802c218 <__mulsi3>
 8024c60:	1007883a 	mov	r3,r2
 8024c64:	e0bff217 	ldw	r2,-56(fp)
 8024c68:	1885883a 	add	r2,r3,r2
 8024c6c:	e0bfed15 	stw	r2,-76(fp)

		/* Final output stage */

		wsptr[2*0] = tmp10 + tmp0;
 8024c70:	e0ffee17 	ldw	r3,-72(fp)
 8024c74:	e0bfec17 	ldw	r2,-80(fp)
 8024c78:	1887883a 	add	r3,r3,r2
 8024c7c:	e0bfe917 	ldw	r2,-92(fp)
 8024c80:	10c00015 	stw	r3,0(r2)
		wsptr[2*3] = tmp10 - tmp0;
 8024c84:	e0bfe917 	ldw	r2,-92(fp)
 8024c88:	10800604 	addi	r2,r2,24
 8024c8c:	e13fee17 	ldw	r4,-72(fp)
 8024c90:	e0ffec17 	ldw	r3,-80(fp)
 8024c94:	20c7c83a 	sub	r3,r4,r3
 8024c98:	10c00015 	stw	r3,0(r2)
		wsptr[2*1] = tmp12 + tmp2;
 8024c9c:	e0bfe917 	ldw	r2,-92(fp)
 8024ca0:	10800204 	addi	r2,r2,8
 8024ca4:	e13fef17 	ldw	r4,-68(fp)
 8024ca8:	e0ffed17 	ldw	r3,-76(fp)
 8024cac:	20c7883a 	add	r3,r4,r3
 8024cb0:	10c00015 	stw	r3,0(r2)
		wsptr[2*2] = tmp12 - tmp2;
 8024cb4:	e0bfe917 	ldw	r2,-92(fp)
 8024cb8:	10800404 	addi	r2,r2,16
 8024cbc:	e13fef17 	ldw	r4,-68(fp)
 8024cc0:	e0ffed17 	ldw	r3,-76(fp)
 8024cc4:	20c7c83a 	sub	r3,r4,r3
 8024cc8:	10c00015 	stw	r3,0(r2)
		* cK represents sqrt(2) * cos(K*pi/16) [refers to 8-point IDCT].
		*/
		inptr = coef_block;
	quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
	wsptr = workspace;
	for (ctr = 0; ctr < 2; ctr++, inptr++, quantptr++, wsptr++) {
 8024ccc:	e0bfea17 	ldw	r2,-88(fp)
 8024cd0:	10800044 	addi	r2,r2,1
 8024cd4:	e0bfea15 	stw	r2,-88(fp)
 8024cd8:	e0bfe717 	ldw	r2,-100(fp)
 8024cdc:	10800084 	addi	r2,r2,2
 8024ce0:	e0bfe715 	stw	r2,-100(fp)
 8024ce4:	e0bfe817 	ldw	r2,-96(fp)
 8024ce8:	10800104 	addi	r2,r2,4
 8024cec:	e0bfe815 	stw	r2,-96(fp)
 8024cf0:	e0bfe917 	ldw	r2,-92(fp)
 8024cf4:	10800104 	addi	r2,r2,4
 8024cf8:	e0bfe915 	stw	r2,-92(fp)
 8024cfc:	e0bfea17 	ldw	r2,-88(fp)
 8024d00:	10800090 	cmplti	r2,r2,2
 8024d04:	103f891e 	bne	r2,zero,8024b2c <jpeg_idct_2x4+0x54>
		wsptr[2*2] = tmp12 - tmp2;
	}

	/* Pass 2: process 4 rows from work array, store into output array. */

	wsptr = workspace;
 8024d08:	e0bff404 	addi	r2,fp,-48
 8024d0c:	e0bfe915 	stw	r2,-92(fp)
	for (ctr = 0; ctr < 4; ctr++) {
 8024d10:	e03fea15 	stw	zero,-88(fp)
 8024d14:	00002c06 	br	8024dc8 <jpeg_idct_2x4+0x2f0>
		outptr = output_buf[ctr] + output_col;
 8024d18:	e0bfea17 	ldw	r2,-88(fp)
 8024d1c:	1085883a 	add	r2,r2,r2
 8024d20:	1085883a 	add	r2,r2,r2
 8024d24:	e0ffff17 	ldw	r3,-4(fp)
 8024d28:	1885883a 	add	r2,r3,r2
 8024d2c:	10c00017 	ldw	r3,0(r2)
 8024d30:	e0800217 	ldw	r2,8(fp)
 8024d34:	1885883a 	add	r2,r3,r2
 8024d38:	e0bff315 	stw	r2,-52(fp)

		/* Even part */

		/* Add fudge factor here for final descale. */
		tmp10 = wsptr[0] + (ONE << (CONST_BITS+2));
 8024d3c:	e0bfe917 	ldw	r2,-92(fp)
 8024d40:	10c00017 	ldw	r3,0(r2)
 8024d44:	00a00014 	movui	r2,32768
 8024d48:	1885883a 	add	r2,r3,r2
 8024d4c:	e0bfee15 	stw	r2,-72(fp)

		/* Odd part */

		tmp0 = wsptr[1];
 8024d50:	e0bfe917 	ldw	r2,-92(fp)
 8024d54:	10800117 	ldw	r2,4(r2)
 8024d58:	e0bfec15 	stw	r2,-80(fp)

		/* Final output stage */

		outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
 8024d5c:	e0ffee17 	ldw	r3,-72(fp)
 8024d60:	e0bfec17 	ldw	r2,-80(fp)
 8024d64:	1885883a 	add	r2,r3,r2
 8024d68:	1005d43a 	srai	r2,r2,16
 8024d6c:	1080ffcc 	andi	r2,r2,1023
 8024d70:	e0ffeb17 	ldw	r3,-84(fp)
 8024d74:	1885883a 	add	r2,r3,r2
 8024d78:	10c00003 	ldbu	r3,0(r2)
 8024d7c:	e0bff317 	ldw	r2,-52(fp)
 8024d80:	10c00005 	stb	r3,0(r2)
			& RANGE_MASK];
		outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS+3)
 8024d84:	e0bff317 	ldw	r2,-52(fp)
 8024d88:	10800044 	addi	r2,r2,1
 8024d8c:	e13fee17 	ldw	r4,-72(fp)
 8024d90:	e0ffec17 	ldw	r3,-80(fp)
 8024d94:	20c7c83a 	sub	r3,r4,r3
 8024d98:	1807d43a 	srai	r3,r3,16
 8024d9c:	18c0ffcc 	andi	r3,r3,1023
 8024da0:	e13feb17 	ldw	r4,-84(fp)
 8024da4:	20c7883a 	add	r3,r4,r3
 8024da8:	18c00003 	ldbu	r3,0(r3)
 8024dac:	10c00005 	stb	r3,0(r2)
			& RANGE_MASK];

		wsptr += 2;		/* advance pointer to next row */
 8024db0:	e0bfe917 	ldw	r2,-92(fp)
 8024db4:	10800204 	addi	r2,r2,8
 8024db8:	e0bfe915 	stw	r2,-92(fp)
	}

	/* Pass 2: process 4 rows from work array, store into output array. */

	wsptr = workspace;
	for (ctr = 0; ctr < 4; ctr++) {
 8024dbc:	e0bfea17 	ldw	r2,-88(fp)
 8024dc0:	10800044 	addi	r2,r2,1
 8024dc4:	e0bfea15 	stw	r2,-88(fp)
 8024dc8:	e0bfea17 	ldw	r2,-88(fp)
 8024dcc:	10800110 	cmplti	r2,r2,4
 8024dd0:	103fd11e 	bne	r2,zero,8024d18 <jpeg_idct_2x4+0x240>
		outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS+3)
			& RANGE_MASK];

		wsptr += 2;		/* advance pointer to next row */
	}
}
 8024dd4:	e037883a 	mov	sp,fp
 8024dd8:	dfc00117 	ldw	ra,4(sp)
 8024ddc:	df000017 	ldw	fp,0(sp)
 8024de0:	dec00204 	addi	sp,sp,8
 8024de4:	f800283a 	ret

08024de8 <jpeg_idct_1x2>:

GLOBAL(void)
	jpeg_idct_1x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	JCOEFPTR coef_block,
	JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8024de8:	defff604 	addi	sp,sp,-40
 8024dec:	dfc00915 	stw	ra,36(sp)
 8024df0:	df000815 	stw	fp,32(sp)
 8024df4:	df000804 	addi	fp,sp,32
 8024df8:	e13ffc15 	stw	r4,-16(fp)
 8024dfc:	e17ffd15 	stw	r5,-12(fp)
 8024e00:	e1bffe15 	stw	r6,-8(fp)
 8024e04:	e1ffff15 	stw	r7,-4(fp)
	INT32 tmp0, tmp10;
	ISLOW_MULT_TYPE * quantptr;
	JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8024e08:	e0bffc17 	ldw	r2,-16(fp)
 8024e0c:	10804917 	ldw	r2,292(r2)
 8024e10:	10802004 	addi	r2,r2,128
 8024e14:	e0bff815 	stw	r2,-32(fp)
	SHIFT_TEMPS

		/* Process 1 column from input, store into output array. */

		quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8024e18:	e0bffd17 	ldw	r2,-12(fp)
 8024e1c:	10801517 	ldw	r2,84(r2)
 8024e20:	e0bff915 	stw	r2,-28(fp)

	/* Even part */

	tmp10 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8024e24:	e0bffe17 	ldw	r2,-8(fp)
 8024e28:	1080000b 	ldhu	r2,0(r2)
 8024e2c:	10ffffcc 	andi	r3,r2,65535
 8024e30:	18e0001c 	xori	r3,r3,32768
 8024e34:	18e00004 	addi	r3,r3,-32768
 8024e38:	e0bff917 	ldw	r2,-28(fp)
 8024e3c:	10800017 	ldw	r2,0(r2)
 8024e40:	1809883a 	mov	r4,r3
 8024e44:	100b883a 	mov	r5,r2
 8024e48:	802c2180 	call	802c218 <__mulsi3>
 8024e4c:	e0bffa15 	stw	r2,-24(fp)
	/* Add fudge factor here for final descale. */
	tmp10 += ONE << 2;
 8024e50:	e0bffa17 	ldw	r2,-24(fp)
 8024e54:	10800104 	addi	r2,r2,4
 8024e58:	e0bffa15 	stw	r2,-24(fp)

	/* Odd part */

	tmp0 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8024e5c:	e0bffe17 	ldw	r2,-8(fp)
 8024e60:	10800404 	addi	r2,r2,16
 8024e64:	1080000b 	ldhu	r2,0(r2)
 8024e68:	10ffffcc 	andi	r3,r2,65535
 8024e6c:	18e0001c 	xori	r3,r3,32768
 8024e70:	18e00004 	addi	r3,r3,-32768
 8024e74:	e0bff917 	ldw	r2,-28(fp)
 8024e78:	10800804 	addi	r2,r2,32
 8024e7c:	10800017 	ldw	r2,0(r2)
 8024e80:	1809883a 	mov	r4,r3
 8024e84:	100b883a 	mov	r5,r2
 8024e88:	802c2180 	call	802c218 <__mulsi3>
 8024e8c:	e0bffb15 	stw	r2,-20(fp)

	/* Final output stage */

	output_buf[0][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3)
 8024e90:	e0bfff17 	ldw	r2,-4(fp)
 8024e94:	10c00017 	ldw	r3,0(r2)
 8024e98:	e0800217 	ldw	r2,8(fp)
 8024e9c:	1885883a 	add	r2,r3,r2
 8024ea0:	e13ffa17 	ldw	r4,-24(fp)
 8024ea4:	e0fffb17 	ldw	r3,-20(fp)
 8024ea8:	20c7883a 	add	r3,r4,r3
 8024eac:	1807d0fa 	srai	r3,r3,3
 8024eb0:	18c0ffcc 	andi	r3,r3,1023
 8024eb4:	e13ff817 	ldw	r4,-32(fp)
 8024eb8:	20c7883a 	add	r3,r4,r3
 8024ebc:	18c00003 	ldbu	r3,0(r3)
 8024ec0:	10c00005 	stb	r3,0(r2)
		& RANGE_MASK];
	output_buf[1][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3)
 8024ec4:	e0bfff17 	ldw	r2,-4(fp)
 8024ec8:	10800104 	addi	r2,r2,4
 8024ecc:	10c00017 	ldw	r3,0(r2)
 8024ed0:	e0800217 	ldw	r2,8(fp)
 8024ed4:	1885883a 	add	r2,r3,r2
 8024ed8:	e13ffa17 	ldw	r4,-24(fp)
 8024edc:	e0fffb17 	ldw	r3,-20(fp)
 8024ee0:	20c7c83a 	sub	r3,r4,r3
 8024ee4:	1807d0fa 	srai	r3,r3,3
 8024ee8:	18c0ffcc 	andi	r3,r3,1023
 8024eec:	e13ff817 	ldw	r4,-32(fp)
 8024ef0:	20c7883a 	add	r3,r4,r3
 8024ef4:	18c00003 	ldbu	r3,0(r3)
 8024ef8:	10c00005 	stb	r3,0(r2)
		& RANGE_MASK];
}
 8024efc:	e037883a 	mov	sp,fp
 8024f00:	dfc00117 	ldw	ra,4(sp)
 8024f04:	df000017 	ldw	fp,0(sp)
 8024f08:	dec00204 	addi	sp,sp,8
 8024f0c:	f800283a 	ret

08024f10 <jpeg_get_small>:
* routines malloc() and free().
*/

GLOBAL(void *)
	jpeg_get_small (j_common_ptr cinfo, size_t sizeofobject)
{
 8024f10:	defffc04 	addi	sp,sp,-16
 8024f14:	dfc00315 	stw	ra,12(sp)
 8024f18:	df000215 	stw	fp,8(sp)
 8024f1c:	df000204 	addi	fp,sp,8
 8024f20:	e13ffe15 	stw	r4,-8(fp)
 8024f24:	e17fff15 	stw	r5,-4(fp)
	return (void *) malloc(sizeofobject);
 8024f28:	e13fff17 	ldw	r4,-4(fp)
 8024f2c:	802e4040 	call	802e404 <malloc>
}
 8024f30:	e037883a 	mov	sp,fp
 8024f34:	dfc00117 	ldw	ra,4(sp)
 8024f38:	df000017 	ldw	fp,0(sp)
 8024f3c:	dec00204 	addi	sp,sp,8
 8024f40:	f800283a 	ret

08024f44 <jpeg_free_small>:

GLOBAL(void)
	jpeg_free_small (j_common_ptr cinfo, void * object, size_t sizeofobject)
{
 8024f44:	defffb04 	addi	sp,sp,-20
 8024f48:	dfc00415 	stw	ra,16(sp)
 8024f4c:	df000315 	stw	fp,12(sp)
 8024f50:	df000304 	addi	fp,sp,12
 8024f54:	e13ffd15 	stw	r4,-12(fp)
 8024f58:	e17ffe15 	stw	r5,-8(fp)
 8024f5c:	e1bfff15 	stw	r6,-4(fp)
	free(object);
 8024f60:	e13ffe17 	ldw	r4,-8(fp)
 8024f64:	802e4180 	call	802e418 <free>
}
 8024f68:	e037883a 	mov	sp,fp
 8024f6c:	dfc00117 	ldw	ra,4(sp)
 8024f70:	df000017 	ldw	fp,0(sp)
 8024f74:	dec00204 	addi	sp,sp,8
 8024f78:	f800283a 	ret

08024f7c <jpeg_get_large>:
* you probably won't be able to process useful-size images in only 64KB.
*/

GLOBAL(void FAR *)
	jpeg_get_large (j_common_ptr cinfo, size_t sizeofobject)
{
 8024f7c:	defffc04 	addi	sp,sp,-16
 8024f80:	dfc00315 	stw	ra,12(sp)
 8024f84:	df000215 	stw	fp,8(sp)
 8024f88:	df000204 	addi	fp,sp,8
 8024f8c:	e13ffe15 	stw	r4,-8(fp)
 8024f90:	e17fff15 	stw	r5,-4(fp)
	return (void FAR *) malloc(sizeofobject);
 8024f94:	e13fff17 	ldw	r4,-4(fp)
 8024f98:	802e4040 	call	802e404 <malloc>
}
 8024f9c:	e037883a 	mov	sp,fp
 8024fa0:	dfc00117 	ldw	ra,4(sp)
 8024fa4:	df000017 	ldw	fp,0(sp)
 8024fa8:	dec00204 	addi	sp,sp,8
 8024fac:	f800283a 	ret

08024fb0 <jpeg_free_large>:

GLOBAL(void)
	jpeg_free_large (j_common_ptr cinfo, void FAR * object, size_t sizeofobject)
{
 8024fb0:	defffb04 	addi	sp,sp,-20
 8024fb4:	dfc00415 	stw	ra,16(sp)
 8024fb8:	df000315 	stw	fp,12(sp)
 8024fbc:	df000304 	addi	fp,sp,12
 8024fc0:	e13ffd15 	stw	r4,-12(fp)
 8024fc4:	e17ffe15 	stw	r5,-8(fp)
 8024fc8:	e1bfff15 	stw	r6,-4(fp)
	free(object);
 8024fcc:	e13ffe17 	ldw	r4,-8(fp)
 8024fd0:	802e4180 	call	802e418 <free>
}
 8024fd4:	e037883a 	mov	sp,fp
 8024fd8:	dfc00117 	ldw	ra,4(sp)
 8024fdc:	df000017 	ldw	fp,0(sp)
 8024fe0:	dec00204 	addi	sp,sp,8
 8024fe4:	f800283a 	ret

08024fe8 <jpeg_mem_available>:
#endif

GLOBAL(long)
	jpeg_mem_available (j_common_ptr cinfo, long min_bytes_needed,
	long max_bytes_needed, long already_allocated)
{
 8024fe8:	defffb04 	addi	sp,sp,-20
 8024fec:	df000415 	stw	fp,16(sp)
 8024ff0:	df000404 	addi	fp,sp,16
 8024ff4:	e13ffc15 	stw	r4,-16(fp)
 8024ff8:	e17ffd15 	stw	r5,-12(fp)
 8024ffc:	e1bffe15 	stw	r6,-8(fp)
 8025000:	e1ffff15 	stw	r7,-4(fp)
	return cinfo->mem->max_memory_to_use - already_allocated;
 8025004:	e0bffc17 	ldw	r2,-16(fp)
 8025008:	10800117 	ldw	r2,4(r2)
 802500c:	10c00b17 	ldw	r3,44(r2)
 8025010:	e0bfff17 	ldw	r2,-4(fp)
 8025014:	1885c83a 	sub	r2,r3,r2
}
 8025018:	e037883a 	mov	sp,fp
 802501c:	df000017 	ldw	fp,0(sp)
 8025020:	dec00104 	addi	sp,sp,4
 8025024:	f800283a 	ret

08025028 <read_backing_store>:

METHODDEF(void)
	read_backing_store (j_common_ptr cinfo, backing_store_ptr info,
	void FAR * buffer_address,
	long file_offset, long byte_count)
{
 8025028:	defffa04 	addi	sp,sp,-24
 802502c:	dfc00515 	stw	ra,20(sp)
 8025030:	df000415 	stw	fp,16(sp)
 8025034:	df000404 	addi	fp,sp,16
 8025038:	e13ffc15 	stw	r4,-16(fp)
 802503c:	e17ffd15 	stw	r5,-12(fp)
 8025040:	e1bffe15 	stw	r6,-8(fp)
 8025044:	e1ffff15 	stw	r7,-4(fp)
	if (fseek(info->temp_file, file_offset, SEEK_SET))
 8025048:	e0bffd17 	ldw	r2,-12(fp)
 802504c:	10800317 	ldw	r2,12(r2)
 8025050:	1009883a 	mov	r4,r2
 8025054:	e17fff17 	ldw	r5,-4(fp)
 8025058:	000d883a 	mov	r6,zero
 802505c:	802dcec0 	call	802dcec <fseek>
 8025060:	10000926 	beq	r2,zero,8025088 <read_backing_store+0x60>
		ERREXIT(cinfo, JERR_TFILE_SEEK);
 8025064:	e0bffc17 	ldw	r2,-16(fp)
 8025068:	10800017 	ldw	r2,0(r2)
 802506c:	00c010c4 	movi	r3,67
 8025070:	10c00515 	stw	r3,20(r2)
 8025074:	e0bffc17 	ldw	r2,-16(fp)
 8025078:	10800017 	ldw	r2,0(r2)
 802507c:	10800017 	ldw	r2,0(r2)
 8025080:	e13ffc17 	ldw	r4,-16(fp)
 8025084:	103ee83a 	callr	r2
	if (JFREAD(info->temp_file, buffer_address, byte_count)
 8025088:	e0c00217 	ldw	r3,8(fp)
 802508c:	e0bffd17 	ldw	r2,-12(fp)
 8025090:	10800317 	ldw	r2,12(r2)
 8025094:	e13ffe17 	ldw	r4,-8(fp)
 8025098:	01400044 	movi	r5,1
 802509c:	180d883a 	mov	r6,r3
 80250a0:	100f883a 	mov	r7,r2
 80250a4:	802d42c0 	call	802d42c <fread>
		!= (size_t) byte_count)
 80250a8:	e0c00217 	ldw	r3,8(fp)
	void FAR * buffer_address,
	long file_offset, long byte_count)
{
	if (fseek(info->temp_file, file_offset, SEEK_SET))
		ERREXIT(cinfo, JERR_TFILE_SEEK);
	if (JFREAD(info->temp_file, buffer_address, byte_count)
 80250ac:	10c00926 	beq	r2,r3,80250d4 <read_backing_store+0xac>
		!= (size_t) byte_count)
		ERREXIT(cinfo, JERR_TFILE_READ);
 80250b0:	e0bffc17 	ldw	r2,-16(fp)
 80250b4:	10800017 	ldw	r2,0(r2)
 80250b8:	00c01084 	movi	r3,66
 80250bc:	10c00515 	stw	r3,20(r2)
 80250c0:	e0bffc17 	ldw	r2,-16(fp)
 80250c4:	10800017 	ldw	r2,0(r2)
 80250c8:	10800017 	ldw	r2,0(r2)
 80250cc:	e13ffc17 	ldw	r4,-16(fp)
 80250d0:	103ee83a 	callr	r2
}
 80250d4:	e037883a 	mov	sp,fp
 80250d8:	dfc00117 	ldw	ra,4(sp)
 80250dc:	df000017 	ldw	fp,0(sp)
 80250e0:	dec00204 	addi	sp,sp,8
 80250e4:	f800283a 	ret

080250e8 <write_backing_store>:

METHODDEF(void)
	write_backing_store (j_common_ptr cinfo, backing_store_ptr info,
	void FAR * buffer_address,
	long file_offset, long byte_count)
{
 80250e8:	defffa04 	addi	sp,sp,-24
 80250ec:	dfc00515 	stw	ra,20(sp)
 80250f0:	df000415 	stw	fp,16(sp)
 80250f4:	df000404 	addi	fp,sp,16
 80250f8:	e13ffc15 	stw	r4,-16(fp)
 80250fc:	e17ffd15 	stw	r5,-12(fp)
 8025100:	e1bffe15 	stw	r6,-8(fp)
 8025104:	e1ffff15 	stw	r7,-4(fp)
	if (fseek(info->temp_file, file_offset, SEEK_SET))
 8025108:	e0bffd17 	ldw	r2,-12(fp)
 802510c:	10800317 	ldw	r2,12(r2)
 8025110:	1009883a 	mov	r4,r2
 8025114:	e17fff17 	ldw	r5,-4(fp)
 8025118:	000d883a 	mov	r6,zero
 802511c:	802dcec0 	call	802dcec <fseek>
 8025120:	10000926 	beq	r2,zero,8025148 <write_backing_store+0x60>
		ERREXIT(cinfo, JERR_TFILE_SEEK);
 8025124:	e0bffc17 	ldw	r2,-16(fp)
 8025128:	10800017 	ldw	r2,0(r2)
 802512c:	00c010c4 	movi	r3,67
 8025130:	10c00515 	stw	r3,20(r2)
 8025134:	e0bffc17 	ldw	r2,-16(fp)
 8025138:	10800017 	ldw	r2,0(r2)
 802513c:	10800017 	ldw	r2,0(r2)
 8025140:	e13ffc17 	ldw	r4,-16(fp)
 8025144:	103ee83a 	callr	r2
	if (JFWRITE(info->temp_file, buffer_address, byte_count)
 8025148:	e0c00217 	ldw	r3,8(fp)
 802514c:	e0bffd17 	ldw	r2,-12(fp)
 8025150:	10800317 	ldw	r2,12(r2)
 8025154:	e13ffe17 	ldw	r4,-8(fp)
 8025158:	01400044 	movi	r5,1
 802515c:	180d883a 	mov	r6,r3
 8025160:	100f883a 	mov	r7,r2
 8025164:	802e0ac0 	call	802e0ac <fwrite>
		!= (size_t) byte_count)
 8025168:	e0c00217 	ldw	r3,8(fp)
	void FAR * buffer_address,
	long file_offset, long byte_count)
{
	if (fseek(info->temp_file, file_offset, SEEK_SET))
		ERREXIT(cinfo, JERR_TFILE_SEEK);
	if (JFWRITE(info->temp_file, buffer_address, byte_count)
 802516c:	10c00926 	beq	r2,r3,8025194 <write_backing_store+0xac>
		!= (size_t) byte_count)
		ERREXIT(cinfo, JERR_TFILE_WRITE);
 8025170:	e0bffc17 	ldw	r2,-16(fp)
 8025174:	10800017 	ldw	r2,0(r2)
 8025178:	00c01104 	movi	r3,68
 802517c:	10c00515 	stw	r3,20(r2)
 8025180:	e0bffc17 	ldw	r2,-16(fp)
 8025184:	10800017 	ldw	r2,0(r2)
 8025188:	10800017 	ldw	r2,0(r2)
 802518c:	e13ffc17 	ldw	r4,-16(fp)
 8025190:	103ee83a 	callr	r2
}
 8025194:	e037883a 	mov	sp,fp
 8025198:	dfc00117 	ldw	ra,4(sp)
 802519c:	df000017 	ldw	fp,0(sp)
 80251a0:	dec00204 	addi	sp,sp,8
 80251a4:	f800283a 	ret

080251a8 <close_backing_store>:


METHODDEF(void)
	close_backing_store (j_common_ptr cinfo, backing_store_ptr info)
{
 80251a8:	defffc04 	addi	sp,sp,-16
 80251ac:	dfc00315 	stw	ra,12(sp)
 80251b0:	df000215 	stw	fp,8(sp)
 80251b4:	df000204 	addi	fp,sp,8
 80251b8:	e13ffe15 	stw	r4,-8(fp)
 80251bc:	e17fff15 	stw	r5,-4(fp)
	fclose(info->temp_file);
 80251c0:	e0bfff17 	ldw	r2,-4(fp)
 80251c4:	10800317 	ldw	r2,12(r2)
 80251c8:	1009883a 	mov	r4,r2
 80251cc:	802cb400 	call	802cb40 <fclose>
	/* Since this implementation uses tmpfile() to create the file,
	* no explicit file deletion is needed.
	*/
}
 80251d0:	e037883a 	mov	sp,fp
 80251d4:	dfc00117 	ldw	ra,4(sp)
 80251d8:	df000017 	ldw	fp,0(sp)
 80251dc:	dec00204 	addi	sp,sp,8
 80251e0:	f800283a 	ret

080251e4 <jpeg_open_backing_store>:
*/

GLOBAL(void)
	jpeg_open_backing_store (j_common_ptr cinfo, backing_store_ptr info,
	long total_bytes_needed)
{
 80251e4:	defffb04 	addi	sp,sp,-20
 80251e8:	dfc00415 	stw	ra,16(sp)
 80251ec:	df000315 	stw	fp,12(sp)
 80251f0:	df000304 	addi	fp,sp,12
 80251f4:	e13ffd15 	stw	r4,-12(fp)
 80251f8:	e17ffe15 	stw	r5,-8(fp)
 80251fc:	e1bfff15 	stw	r6,-4(fp)
	if ((info->temp_file = tmpfile()) == NULL)
 8025200:	802fa340 	call	802fa34 <tmpfile>
 8025204:	e0fffe17 	ldw	r3,-8(fp)
 8025208:	18800315 	stw	r2,12(r3)
 802520c:	e0bffe17 	ldw	r2,-8(fp)
 8025210:	10800317 	ldw	r2,12(r2)
 8025214:	1000111e 	bne	r2,zero,802525c <jpeg_open_backing_store+0x78>
		ERREXITS(cinfo, JERR_TFILE_CREATE, "");
 8025218:	e0bffd17 	ldw	r2,-12(fp)
 802521c:	10800017 	ldw	r2,0(r2)
 8025220:	00c01044 	movi	r3,65
 8025224:	10c00515 	stw	r3,20(r2)
 8025228:	e0bffd17 	ldw	r2,-12(fp)
 802522c:	10800017 	ldw	r2,0(r2)
 8025230:	10800604 	addi	r2,r2,24
 8025234:	1009883a 	mov	r4,r2
 8025238:	01420134 	movhi	r5,2052
 802523c:	29427b04 	addi	r5,r5,2540
 8025240:	01801404 	movi	r6,80
 8025244:	802f8b40 	call	802f8b4 <strncpy>
 8025248:	e0bffd17 	ldw	r2,-12(fp)
 802524c:	10800017 	ldw	r2,0(r2)
 8025250:	10800017 	ldw	r2,0(r2)
 8025254:	e13ffd17 	ldw	r4,-12(fp)
 8025258:	103ee83a 	callr	r2
	info->read_backing_store = read_backing_store;
 802525c:	e0bffe17 	ldw	r2,-8(fp)
 8025260:	00c200b4 	movhi	r3,2050
 8025264:	18d40a04 	addi	r3,r3,20520
 8025268:	10c00015 	stw	r3,0(r2)
	info->write_backing_store = write_backing_store;
 802526c:	e0bffe17 	ldw	r2,-8(fp)
 8025270:	00c200b4 	movhi	r3,2050
 8025274:	18d43a04 	addi	r3,r3,20712
 8025278:	10c00115 	stw	r3,4(r2)
	info->close_backing_store = close_backing_store;
 802527c:	e0bffe17 	ldw	r2,-8(fp)
 8025280:	00c200b4 	movhi	r3,2050
 8025284:	18d46a04 	addi	r3,r3,20904
 8025288:	10c00215 	stw	r3,8(r2)
}
 802528c:	e037883a 	mov	sp,fp
 8025290:	dfc00117 	ldw	ra,4(sp)
 8025294:	df000017 	ldw	fp,0(sp)
 8025298:	dec00204 	addi	sp,sp,8
 802529c:	f800283a 	ret

080252a0 <jpeg_mem_init>:
* cleanup required.
*/

GLOBAL(long)
	jpeg_mem_init (j_common_ptr cinfo)
{
 80252a0:	defffe04 	addi	sp,sp,-8
 80252a4:	df000115 	stw	fp,4(sp)
 80252a8:	df000104 	addi	fp,sp,4
 80252ac:	e13fff15 	stw	r4,-4(fp)
	return DEFAULT_MAX_MEM;	/* default for max_memory_to_use */
 80252b0:	00802674 	movhi	r2,153
 80252b4:	10a5a004 	addi	r2,r2,-27008
}
 80252b8:	e037883a 	mov	sp,fp
 80252bc:	df000017 	ldw	fp,0(sp)
 80252c0:	dec00104 	addi	sp,sp,4
 80252c4:	f800283a 	ret

080252c8 <jpeg_mem_term>:

GLOBAL(void)
	jpeg_mem_term (j_common_ptr cinfo)
{
 80252c8:	defffe04 	addi	sp,sp,-8
 80252cc:	df000115 	stw	fp,4(sp)
 80252d0:	df000104 	addi	fp,sp,4
 80252d4:	e13fff15 	stw	r4,-4(fp)
	/* no work */
}
 80252d8:	e037883a 	mov	sp,fp
 80252dc:	df000017 	ldw	fp,0(sp)
 80252e0:	dec00104 	addi	sp,sp,4
 80252e4:	f800283a 	ret

080252e8 <out_of_memory>:

LOCAL(void)
	out_of_memory (j_common_ptr cinfo, int which)
	/* Report an out-of-memory error and stop execution */
	/* If we compiled MEM_STATS support, report alloc requests before dying */
{
 80252e8:	defffc04 	addi	sp,sp,-16
 80252ec:	dfc00315 	stw	ra,12(sp)
 80252f0:	df000215 	stw	fp,8(sp)
 80252f4:	df000204 	addi	fp,sp,8
 80252f8:	e13ffe15 	stw	r4,-8(fp)
 80252fc:	e17fff15 	stw	r5,-4(fp)
#ifdef MEM_STATS
	cinfo->err->trace_level = 2;	/* force self_destruct to report stats */
#endif
	ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, which);
 8025300:	e0bffe17 	ldw	r2,-8(fp)
 8025304:	10800017 	ldw	r2,0(r2)
 8025308:	00c00e04 	movi	r3,56
 802530c:	10c00515 	stw	r3,20(r2)
 8025310:	e0bffe17 	ldw	r2,-8(fp)
 8025314:	10800017 	ldw	r2,0(r2)
 8025318:	e0ffff17 	ldw	r3,-4(fp)
 802531c:	10c00615 	stw	r3,24(r2)
 8025320:	e0bffe17 	ldw	r2,-8(fp)
 8025324:	10800017 	ldw	r2,0(r2)
 8025328:	10800017 	ldw	r2,0(r2)
 802532c:	e13ffe17 	ldw	r4,-8(fp)
 8025330:	103ee83a 	callr	r2
}
 8025334:	e037883a 	mov	sp,fp
 8025338:	dfc00117 	ldw	ra,4(sp)
 802533c:	df000017 	ldw	fp,0(sp)
 8025340:	dec00204 	addi	sp,sp,8
 8025344:	f800283a 	ret

08025348 <alloc_small>:


METHODDEF(void *)
	alloc_small (j_common_ptr cinfo, int pool_id, size_t sizeofobject)
	/* Allocate a "small" object */
{
 8025348:	defff404 	addi	sp,sp,-48
 802534c:	dfc00b15 	stw	ra,44(sp)
 8025350:	df000a15 	stw	fp,40(sp)
 8025354:	df000a04 	addi	fp,sp,40
 8025358:	e13ffd15 	stw	r4,-12(fp)
 802535c:	e17ffe15 	stw	r5,-8(fp)
 8025360:	e1bfff15 	stw	r6,-4(fp)
	my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8025364:	e0bffd17 	ldw	r2,-12(fp)
 8025368:	10800117 	ldw	r2,4(r2)
 802536c:	e0bff915 	stw	r2,-28(fp)
	small_pool_ptr hdr_ptr, prev_hdr_ptr;
	char * data_ptr;
	size_t odd_bytes, min_request, slop;

	/* Check for unsatisfiable request (do now to ensure no overflow below) */
	if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 8025370:	e0bfff17 	ldw	r2,-4(fp)
 8025374:	00cee6f4 	movhi	r3,15259
 8025378:	18f27d04 	addi	r3,r3,-13836
 802537c:	1880032e 	bgeu	r3,r2,802538c <alloc_small+0x44>
		out_of_memory(cinfo, 1);	/* request exceeds malloc's ability */
 8025380:	e13ffd17 	ldw	r4,-12(fp)
 8025384:	01400044 	movi	r5,1
 8025388:	80252e80 	call	80252e8 <out_of_memory>

	/* Round up the requested size to a multiple of SIZEOF(ALIGN_TYPE) */
	odd_bytes = sizeofobject % SIZEOF(ALIGN_TYPE);
 802538c:	e0bfff17 	ldw	r2,-4(fp)
 8025390:	108001cc 	andi	r2,r2,7
 8025394:	e0bffa15 	stw	r2,-24(fp)
	if (odd_bytes > 0)
 8025398:	e0bffa17 	ldw	r2,-24(fp)
 802539c:	10000526 	beq	r2,zero,80253b4 <alloc_small+0x6c>
		sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;
 80253a0:	e0ffff17 	ldw	r3,-4(fp)
 80253a4:	e0bffa17 	ldw	r2,-24(fp)
 80253a8:	1885c83a 	sub	r2,r3,r2
 80253ac:	10800204 	addi	r2,r2,8
 80253b0:	e0bfff15 	stw	r2,-4(fp)

	/* See if space is available in any existing pool */
	if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 80253b4:	e0bffe17 	ldw	r2,-8(fp)
 80253b8:	10000316 	blt	r2,zero,80253c8 <alloc_small+0x80>
 80253bc:	e0bffe17 	ldw	r2,-8(fp)
 80253c0:	10800090 	cmplti	r2,r2,2
 80253c4:	10000d1e 	bne	r2,zero,80253fc <alloc_small+0xb4>
		ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 80253c8:	e0bffd17 	ldw	r2,-12(fp)
 80253cc:	10800017 	ldw	r2,0(r2)
 80253d0:	00c003c4 	movi	r3,15
 80253d4:	10c00515 	stw	r3,20(r2)
 80253d8:	e0bffd17 	ldw	r2,-12(fp)
 80253dc:	10800017 	ldw	r2,0(r2)
 80253e0:	e0fffe17 	ldw	r3,-8(fp)
 80253e4:	10c00615 	stw	r3,24(r2)
 80253e8:	e0bffd17 	ldw	r2,-12(fp)
 80253ec:	10800017 	ldw	r2,0(r2)
 80253f0:	10800017 	ldw	r2,0(r2)
 80253f4:	e13ffd17 	ldw	r4,-12(fp)
 80253f8:	103ee83a 	callr	r2
	prev_hdr_ptr = NULL;
 80253fc:	e03ff715 	stw	zero,-36(fp)
	hdr_ptr = mem->small_list[pool_id];
 8025400:	e0fff917 	ldw	r3,-28(fp)
 8025404:	e0bffe17 	ldw	r2,-8(fp)
 8025408:	10800344 	addi	r2,r2,13
 802540c:	1085883a 	add	r2,r2,r2
 8025410:	1085883a 	add	r2,r2,r2
 8025414:	1885883a 	add	r2,r3,r2
 8025418:	10800017 	ldw	r2,0(r2)
 802541c:	e0bff615 	stw	r2,-40(fp)
	while (hdr_ptr != NULL) {
 8025420:	00000906 	br	8025448 <alloc_small+0x100>
		if (hdr_ptr->hdr.bytes_left >= sizeofobject)
 8025424:	e0bff617 	ldw	r2,-40(fp)
 8025428:	10c00217 	ldw	r3,8(r2)
 802542c:	e0bfff17 	ldw	r2,-4(fp)
 8025430:	1880082e 	bgeu	r3,r2,8025454 <alloc_small+0x10c>
			break;			/* found pool with enough space */
		prev_hdr_ptr = hdr_ptr;
 8025434:	e0bff617 	ldw	r2,-40(fp)
 8025438:	e0bff715 	stw	r2,-36(fp)
		hdr_ptr = hdr_ptr->hdr.next;
 802543c:	e0bff617 	ldw	r2,-40(fp)
 8025440:	10800017 	ldw	r2,0(r2)
 8025444:	e0bff615 	stw	r2,-40(fp)
	/* See if space is available in any existing pool */
	if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
		ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
	prev_hdr_ptr = NULL;
	hdr_ptr = mem->small_list[pool_id];
	while (hdr_ptr != NULL) {
 8025448:	e0bff617 	ldw	r2,-40(fp)
 802544c:	103ff51e 	bne	r2,zero,8025424 <alloc_small+0xdc>
 8025450:	00000106 	br	8025458 <alloc_small+0x110>
		if (hdr_ptr->hdr.bytes_left >= sizeofobject)
			break;			/* found pool with enough space */
 8025454:	0001883a 	nop
		prev_hdr_ptr = hdr_ptr;
		hdr_ptr = hdr_ptr->hdr.next;
	}

	/* Time to make a new pool? */
	if (hdr_ptr == NULL) {
 8025458:	e0bff617 	ldw	r2,-40(fp)
 802545c:	1000561e 	bne	r2,zero,80255b8 <alloc_small+0x270>
		/* min_request is what we need now, slop is what will be leftover */
		min_request = sizeofobject + SIZEOF(small_pool_hdr);
 8025460:	e0bfff17 	ldw	r2,-4(fp)
 8025464:	10800304 	addi	r2,r2,12
 8025468:	e0bffb15 	stw	r2,-20(fp)
		if (prev_hdr_ptr == NULL)	/* first pool in class? */
 802546c:	e0bff717 	ldw	r2,-36(fp)
 8025470:	1000081e 	bne	r2,zero,8025494 <alloc_small+0x14c>
			slop = first_pool_slop[pool_id];
 8025474:	e0bffe17 	ldw	r2,-8(fp)
 8025478:	1085883a 	add	r2,r2,r2
 802547c:	1087883a 	add	r3,r2,r2
 8025480:	d0a00004 	addi	r2,gp,-32768
 8025484:	1885883a 	add	r2,r3,r2
 8025488:	10800017 	ldw	r2,0(r2)
 802548c:	e0bff815 	stw	r2,-32(fp)
 8025490:	00000706 	br	80254b0 <alloc_small+0x168>
		else
			slop = extra_pool_slop[pool_id];
 8025494:	e0bffe17 	ldw	r2,-8(fp)
 8025498:	1085883a 	add	r2,r2,r2
 802549c:	1087883a 	add	r3,r2,r2
 80254a0:	d0a00204 	addi	r2,gp,-32760
 80254a4:	1885883a 	add	r2,r3,r2
 80254a8:	10800017 	ldw	r2,0(r2)
 80254ac:	e0bff815 	stw	r2,-32(fp)
		/* Don't ask for more than MAX_ALLOC_CHUNK */
		if (slop > (size_t) (MAX_ALLOC_CHUNK-min_request))
 80254b0:	00cee6f4 	movhi	r3,15259
 80254b4:	18f28004 	addi	r3,r3,-13824
 80254b8:	e0bffb17 	ldw	r2,-20(fp)
 80254bc:	1887c83a 	sub	r3,r3,r2
 80254c0:	e0bff817 	ldw	r2,-32(fp)
 80254c4:	1880072e 	bgeu	r3,r2,80254e4 <alloc_small+0x19c>
			slop = (size_t) (MAX_ALLOC_CHUNK-min_request);
 80254c8:	00cee6f4 	movhi	r3,15259
 80254cc:	18f28004 	addi	r3,r3,-13824
 80254d0:	e0bffb17 	ldw	r2,-20(fp)
 80254d4:	1885c83a 	sub	r2,r3,r2
 80254d8:	e0bff815 	stw	r2,-32(fp)
 80254dc:	00000106 	br	80254e4 <alloc_small+0x19c>
			if (hdr_ptr != NULL)
				break;
			slop /= 2;
			if (slop < MIN_SLOP)	/* give up when it gets real small */
				out_of_memory(cinfo, 2); /* jpeg_get_small failed */
		}
 80254e0:	0001883a 	nop
		/* Don't ask for more than MAX_ALLOC_CHUNK */
		if (slop > (size_t) (MAX_ALLOC_CHUNK-min_request))
			slop = (size_t) (MAX_ALLOC_CHUNK-min_request);
		/* Try to get space, if fail reduce slop and try again */
		for (;;) {
			hdr_ptr = (small_pool_ptr) jpeg_get_small(cinfo, min_request + slop);
 80254e4:	e0fffb17 	ldw	r3,-20(fp)
 80254e8:	e0bff817 	ldw	r2,-32(fp)
 80254ec:	1885883a 	add	r2,r3,r2
 80254f0:	e13ffd17 	ldw	r4,-12(fp)
 80254f4:	100b883a 	mov	r5,r2
 80254f8:	8024f100 	call	8024f10 <jpeg_get_small>
 80254fc:	e0bff615 	stw	r2,-40(fp)
			if (hdr_ptr != NULL)
 8025500:	e0bff617 	ldw	r2,-40(fp)
 8025504:	10000a1e 	bne	r2,zero,8025530 <alloc_small+0x1e8>
				break;
			slop /= 2;
 8025508:	e0bff817 	ldw	r2,-32(fp)
 802550c:	1004d07a 	srli	r2,r2,1
 8025510:	e0bff815 	stw	r2,-32(fp)
			if (slop < MIN_SLOP)	/* give up when it gets real small */
 8025514:	e0bff817 	ldw	r2,-32(fp)
 8025518:	10800ca8 	cmpgeui	r2,r2,50
 802551c:	103ff01e 	bne	r2,zero,80254e0 <alloc_small+0x198>
				out_of_memory(cinfo, 2); /* jpeg_get_small failed */
 8025520:	e13ffd17 	ldw	r4,-12(fp)
 8025524:	01400084 	movi	r5,2
 8025528:	80252e80 	call	80252e8 <out_of_memory>
		}
 802552c:	003fec06 	br	80254e0 <alloc_small+0x198>
			slop = (size_t) (MAX_ALLOC_CHUNK-min_request);
		/* Try to get space, if fail reduce slop and try again */
		for (;;) {
			hdr_ptr = (small_pool_ptr) jpeg_get_small(cinfo, min_request + slop);
			if (hdr_ptr != NULL)
				break;
 8025530:	0001883a 	nop
			slop /= 2;
			if (slop < MIN_SLOP)	/* give up when it gets real small */
				out_of_memory(cinfo, 2); /* jpeg_get_small failed */
		}
		mem->total_space_allocated += min_request + slop;
 8025534:	e0bff917 	ldw	r2,-28(fp)
 8025538:	10801317 	ldw	r2,76(r2)
 802553c:	1007883a 	mov	r3,r2
 8025540:	e13ffb17 	ldw	r4,-20(fp)
 8025544:	e0bff817 	ldw	r2,-32(fp)
 8025548:	2085883a 	add	r2,r4,r2
 802554c:	1885883a 	add	r2,r3,r2
 8025550:	1007883a 	mov	r3,r2
 8025554:	e0bff917 	ldw	r2,-28(fp)
 8025558:	10c01315 	stw	r3,76(r2)
		/* Success, initialize the new pool header and add to end of list */
		hdr_ptr->hdr.next = NULL;
 802555c:	e0bff617 	ldw	r2,-40(fp)
 8025560:	10000015 	stw	zero,0(r2)
		hdr_ptr->hdr.bytes_used = 0;
 8025564:	e0bff617 	ldw	r2,-40(fp)
 8025568:	10000115 	stw	zero,4(r2)
		hdr_ptr->hdr.bytes_left = sizeofobject + slop;
 802556c:	e0ffff17 	ldw	r3,-4(fp)
 8025570:	e0bff817 	ldw	r2,-32(fp)
 8025574:	1887883a 	add	r3,r3,r2
 8025578:	e0bff617 	ldw	r2,-40(fp)
 802557c:	10c00215 	stw	r3,8(r2)
		if (prev_hdr_ptr == NULL)	/* first pool in class? */
 8025580:	e0bff717 	ldw	r2,-36(fp)
 8025584:	1000091e 	bne	r2,zero,80255ac <alloc_small+0x264>
			mem->small_list[pool_id] = hdr_ptr;
 8025588:	e0fff917 	ldw	r3,-28(fp)
 802558c:	e0bffe17 	ldw	r2,-8(fp)
 8025590:	10800344 	addi	r2,r2,13
 8025594:	1085883a 	add	r2,r2,r2
 8025598:	1085883a 	add	r2,r2,r2
 802559c:	1885883a 	add	r2,r3,r2
 80255a0:	e0fff617 	ldw	r3,-40(fp)
 80255a4:	10c00015 	stw	r3,0(r2)
 80255a8:	00000306 	br	80255b8 <alloc_small+0x270>
		else
			prev_hdr_ptr->hdr.next = hdr_ptr;
 80255ac:	e0bff717 	ldw	r2,-36(fp)
 80255b0:	e0fff617 	ldw	r3,-40(fp)
 80255b4:	10c00015 	stw	r3,0(r2)
	}

	/* OK, allocate the object from the current pool */
	data_ptr = (char *) (hdr_ptr + 1); /* point to first data byte in pool */
 80255b8:	e0bff617 	ldw	r2,-40(fp)
 80255bc:	10800304 	addi	r2,r2,12
 80255c0:	e0bffc15 	stw	r2,-16(fp)
	data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 80255c4:	e0bff617 	ldw	r2,-40(fp)
 80255c8:	10800117 	ldw	r2,4(r2)
 80255cc:	e0fffc17 	ldw	r3,-16(fp)
 80255d0:	1885883a 	add	r2,r3,r2
 80255d4:	e0bffc15 	stw	r2,-16(fp)
	hdr_ptr->hdr.bytes_used += sizeofobject;
 80255d8:	e0bff617 	ldw	r2,-40(fp)
 80255dc:	10c00117 	ldw	r3,4(r2)
 80255e0:	e0bfff17 	ldw	r2,-4(fp)
 80255e4:	1887883a 	add	r3,r3,r2
 80255e8:	e0bff617 	ldw	r2,-40(fp)
 80255ec:	10c00115 	stw	r3,4(r2)
	hdr_ptr->hdr.bytes_left -= sizeofobject;
 80255f0:	e0bff617 	ldw	r2,-40(fp)
 80255f4:	10c00217 	ldw	r3,8(r2)
 80255f8:	e0bfff17 	ldw	r2,-4(fp)
 80255fc:	1887c83a 	sub	r3,r3,r2
 8025600:	e0bff617 	ldw	r2,-40(fp)
 8025604:	10c00215 	stw	r3,8(r2)

	return (void *) data_ptr;
 8025608:	e0bffc17 	ldw	r2,-16(fp)
}
 802560c:	e037883a 	mov	sp,fp
 8025610:	dfc00117 	ldw	ra,4(sp)
 8025614:	df000017 	ldw	fp,0(sp)
 8025618:	dec00204 	addi	sp,sp,8
 802561c:	f800283a 	ret

08025620 <alloc_large>:
*/

METHODDEF(void FAR *)
	alloc_large (j_common_ptr cinfo, int pool_id, size_t sizeofobject)
	/* Allocate a "large" object */
{
 8025620:	defff804 	addi	sp,sp,-32
 8025624:	dfc00715 	stw	ra,28(sp)
 8025628:	df000615 	stw	fp,24(sp)
 802562c:	df000604 	addi	fp,sp,24
 8025630:	e13ffd15 	stw	r4,-12(fp)
 8025634:	e17ffe15 	stw	r5,-8(fp)
 8025638:	e1bfff15 	stw	r6,-4(fp)
	my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 802563c:	e0bffd17 	ldw	r2,-12(fp)
 8025640:	10800117 	ldw	r2,4(r2)
 8025644:	e0bffa15 	stw	r2,-24(fp)
	large_pool_ptr hdr_ptr;
	size_t odd_bytes;

	/* Check for unsatisfiable request (do now to ensure no overflow below) */
	if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)))
 8025648:	e0bfff17 	ldw	r2,-4(fp)
 802564c:	00cee6f4 	movhi	r3,15259
 8025650:	18f27d04 	addi	r3,r3,-13836
 8025654:	1880032e 	bgeu	r3,r2,8025664 <alloc_large+0x44>
		out_of_memory(cinfo, 3);	/* request exceeds malloc's ability */
 8025658:	e13ffd17 	ldw	r4,-12(fp)
 802565c:	014000c4 	movi	r5,3
 8025660:	80252e80 	call	80252e8 <out_of_memory>

	/* Round up the requested size to a multiple of SIZEOF(ALIGN_TYPE) */
	odd_bytes = sizeofobject % SIZEOF(ALIGN_TYPE);
 8025664:	e0bfff17 	ldw	r2,-4(fp)
 8025668:	108001cc 	andi	r2,r2,7
 802566c:	e0bffb15 	stw	r2,-20(fp)
	if (odd_bytes > 0)
 8025670:	e0bffb17 	ldw	r2,-20(fp)
 8025674:	10000526 	beq	r2,zero,802568c <alloc_large+0x6c>
		sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;
 8025678:	e0ffff17 	ldw	r3,-4(fp)
 802567c:	e0bffb17 	ldw	r2,-20(fp)
 8025680:	1885c83a 	sub	r2,r3,r2
 8025684:	10800204 	addi	r2,r2,8
 8025688:	e0bfff15 	stw	r2,-4(fp)

	/* Always make a new pool */
	if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 802568c:	e0bffe17 	ldw	r2,-8(fp)
 8025690:	10000316 	blt	r2,zero,80256a0 <alloc_large+0x80>
 8025694:	e0bffe17 	ldw	r2,-8(fp)
 8025698:	10800090 	cmplti	r2,r2,2
 802569c:	10000d1e 	bne	r2,zero,80256d4 <alloc_large+0xb4>
		ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 80256a0:	e0bffd17 	ldw	r2,-12(fp)
 80256a4:	10800017 	ldw	r2,0(r2)
 80256a8:	00c003c4 	movi	r3,15
 80256ac:	10c00515 	stw	r3,20(r2)
 80256b0:	e0bffd17 	ldw	r2,-12(fp)
 80256b4:	10800017 	ldw	r2,0(r2)
 80256b8:	e0fffe17 	ldw	r3,-8(fp)
 80256bc:	10c00615 	stw	r3,24(r2)
 80256c0:	e0bffd17 	ldw	r2,-12(fp)
 80256c4:	10800017 	ldw	r2,0(r2)
 80256c8:	10800017 	ldw	r2,0(r2)
 80256cc:	e13ffd17 	ldw	r4,-12(fp)
 80256d0:	103ee83a 	callr	r2

	hdr_ptr = (large_pool_ptr) jpeg_get_large(cinfo, sizeofobject +
 80256d4:	e0bfff17 	ldw	r2,-4(fp)
 80256d8:	10800304 	addi	r2,r2,12
 80256dc:	e13ffd17 	ldw	r4,-12(fp)
 80256e0:	100b883a 	mov	r5,r2
 80256e4:	8024f7c0 	call	8024f7c <jpeg_get_large>
 80256e8:	e0bffc15 	stw	r2,-16(fp)
		SIZEOF(large_pool_hdr));
	if (hdr_ptr == NULL)
 80256ec:	e0bffc17 	ldw	r2,-16(fp)
 80256f0:	1000031e 	bne	r2,zero,8025700 <alloc_large+0xe0>
		out_of_memory(cinfo, 4);	/* jpeg_get_large failed */
 80256f4:	e13ffd17 	ldw	r4,-12(fp)
 80256f8:	01400104 	movi	r5,4
 80256fc:	80252e80 	call	80252e8 <out_of_memory>
	mem->total_space_allocated += sizeofobject + SIZEOF(large_pool_hdr);
 8025700:	e0bffa17 	ldw	r2,-24(fp)
 8025704:	10801317 	ldw	r2,76(r2)
 8025708:	1007883a 	mov	r3,r2
 802570c:	e0bfff17 	ldw	r2,-4(fp)
 8025710:	1885883a 	add	r2,r3,r2
 8025714:	10800304 	addi	r2,r2,12
 8025718:	1007883a 	mov	r3,r2
 802571c:	e0bffa17 	ldw	r2,-24(fp)
 8025720:	10c01315 	stw	r3,76(r2)

	/* Success, initialize the new pool header and add to list */
	hdr_ptr->hdr.next = mem->large_list[pool_id];
 8025724:	e0fffa17 	ldw	r3,-24(fp)
 8025728:	e0bffe17 	ldw	r2,-8(fp)
 802572c:	108003c4 	addi	r2,r2,15
 8025730:	1085883a 	add	r2,r2,r2
 8025734:	1085883a 	add	r2,r2,r2
 8025738:	1885883a 	add	r2,r3,r2
 802573c:	10c00017 	ldw	r3,0(r2)
 8025740:	e0bffc17 	ldw	r2,-16(fp)
 8025744:	10c00015 	stw	r3,0(r2)
	/* We maintain space counts in each pool header for statistical purposes,
	* even though they are not needed for allocation.
	*/
	hdr_ptr->hdr.bytes_used = sizeofobject;
 8025748:	e0bffc17 	ldw	r2,-16(fp)
 802574c:	e0ffff17 	ldw	r3,-4(fp)
 8025750:	10c00115 	stw	r3,4(r2)
	hdr_ptr->hdr.bytes_left = 0;
 8025754:	e0bffc17 	ldw	r2,-16(fp)
 8025758:	10000215 	stw	zero,8(r2)
	mem->large_list[pool_id] = hdr_ptr;
 802575c:	e0fffa17 	ldw	r3,-24(fp)
 8025760:	e0bffe17 	ldw	r2,-8(fp)
 8025764:	108003c4 	addi	r2,r2,15
 8025768:	1085883a 	add	r2,r2,r2
 802576c:	1085883a 	add	r2,r2,r2
 8025770:	1885883a 	add	r2,r3,r2
 8025774:	e0fffc17 	ldw	r3,-16(fp)
 8025778:	10c00015 	stw	r3,0(r2)

	return (void FAR *) (hdr_ptr + 1); /* point to first data byte in pool */
 802577c:	e0bffc17 	ldw	r2,-16(fp)
 8025780:	10800304 	addi	r2,r2,12
}
 8025784:	e037883a 	mov	sp,fp
 8025788:	dfc00117 	ldw	ra,4(sp)
 802578c:	df000017 	ldw	fp,0(sp)
 8025790:	dec00204 	addi	sp,sp,8
 8025794:	f800283a 	ret

08025798 <alloc_sarray>:

METHODDEF(JSAMPARRAY)
	alloc_sarray (j_common_ptr cinfo, int pool_id,
	JDIMENSION samplesperrow, JDIMENSION numrows)
	/* Allocate a 2-D sample array */
{
 8025798:	defff304 	addi	sp,sp,-52
 802579c:	dfc00c15 	stw	ra,48(sp)
 80257a0:	df000b15 	stw	fp,44(sp)
 80257a4:	df000b04 	addi	fp,sp,44
 80257a8:	e13ffc15 	stw	r4,-16(fp)
 80257ac:	e17ffd15 	stw	r5,-12(fp)
 80257b0:	e1bffe15 	stw	r6,-8(fp)
 80257b4:	e1ffff15 	stw	r7,-4(fp)
	my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 80257b8:	e0bffc17 	ldw	r2,-16(fp)
 80257bc:	10800117 	ldw	r2,4(r2)
 80257c0:	e0bff915 	stw	r2,-28(fp)
	JSAMPROW workspace;
	JDIMENSION rowsperchunk, currow, i;
	long ltemp;

	/* Calculate max # of rows allowed in one allocation chunk */
	ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 80257c4:	010ee6f4 	movhi	r4,15259
 80257c8:	21327d04 	addi	r4,r4,-13836
 80257cc:	e17ffe17 	ldw	r5,-8(fp)
 80257d0:	802c2080 	call	802c208 <__udivsi3>
 80257d4:	e0bffa15 	stw	r2,-24(fp)
		((long) samplesperrow * SIZEOF(JSAMPLE));
	if (ltemp <= 0)
 80257d8:	e0bffa17 	ldw	r2,-24(fp)
 80257dc:	00800916 	blt	zero,r2,8025804 <alloc_sarray+0x6c>
		ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 80257e0:	e0bffc17 	ldw	r2,-16(fp)
 80257e4:	10800017 	ldw	r2,0(r2)
 80257e8:	00c01204 	movi	r3,72
 80257ec:	10c00515 	stw	r3,20(r2)
 80257f0:	e0bffc17 	ldw	r2,-16(fp)
 80257f4:	10800017 	ldw	r2,0(r2)
 80257f8:	10800017 	ldw	r2,0(r2)
 80257fc:	e13ffc17 	ldw	r4,-16(fp)
 8025800:	103ee83a 	callr	r2
	if (ltemp < (long) numrows)
 8025804:	e0bfff17 	ldw	r2,-4(fp)
 8025808:	e0fffa17 	ldw	r3,-24(fp)
 802580c:	1880030e 	bge	r3,r2,802581c <alloc_sarray+0x84>
		rowsperchunk = (JDIMENSION) ltemp;
 8025810:	e0bffa17 	ldw	r2,-24(fp)
 8025814:	e0bff615 	stw	r2,-40(fp)
 8025818:	00000206 	br	8025824 <alloc_sarray+0x8c>
	else
		rowsperchunk = numrows;
 802581c:	e0bfff17 	ldw	r2,-4(fp)
 8025820:	e0bff615 	stw	r2,-40(fp)
	mem->last_rowsperchunk = rowsperchunk;
 8025824:	e0bff917 	ldw	r2,-28(fp)
 8025828:	e0fff617 	ldw	r3,-40(fp)
 802582c:	10c01415 	stw	r3,80(r2)

	/* Get space for row pointers (small object) */
	result = (JSAMPARRAY) alloc_small(cinfo, pool_id,
 8025830:	e0bfff17 	ldw	r2,-4(fp)
 8025834:	1085883a 	add	r2,r2,r2
 8025838:	1085883a 	add	r2,r2,r2
 802583c:	e13ffc17 	ldw	r4,-16(fp)
 8025840:	e17ffd17 	ldw	r5,-12(fp)
 8025844:	100d883a 	mov	r6,r2
 8025848:	80253480 	call	8025348 <alloc_small>
 802584c:	e0bffb15 	stw	r2,-20(fp)
		(size_t) (numrows * SIZEOF(JSAMPROW)));

	/* Get the rows themselves (large objects) */
	currow = 0;
 8025850:	e03ff715 	stw	zero,-36(fp)
	while (currow < numrows) {
 8025854:	00002506 	br	80258ec <alloc_sarray+0x154>
		rowsperchunk = MIN(rowsperchunk, numrows - currow);
 8025858:	e0ffff17 	ldw	r3,-4(fp)
 802585c:	e0bff717 	ldw	r2,-36(fp)
 8025860:	1885c83a 	sub	r2,r3,r2
 8025864:	e0fff617 	ldw	r3,-40(fp)
 8025868:	1880012e 	bgeu	r3,r2,8025870 <alloc_sarray+0xd8>
 802586c:	1805883a 	mov	r2,r3
 8025870:	e0bff615 	stw	r2,-40(fp)
		workspace = (JSAMPROW) alloc_large(cinfo, pool_id,
 8025874:	e13ff617 	ldw	r4,-40(fp)
 8025878:	e17ffe17 	ldw	r5,-8(fp)
 802587c:	802c2180 	call	802c218 <__mulsi3>
 8025880:	e13ffc17 	ldw	r4,-16(fp)
 8025884:	e17ffd17 	ldw	r5,-12(fp)
 8025888:	100d883a 	mov	r6,r2
 802588c:	80256200 	call	8025620 <alloc_large>
 8025890:	e0bff515 	stw	r2,-44(fp)
			(size_t) ((size_t) rowsperchunk * (size_t) samplesperrow
			* SIZEOF(JSAMPLE)));
		for (i = rowsperchunk; i > 0; i--) {
 8025894:	e0bff617 	ldw	r2,-40(fp)
 8025898:	e0bff815 	stw	r2,-32(fp)
 802589c:	00001106 	br	80258e4 <alloc_sarray+0x14c>
			result[currow++] = workspace;
 80258a0:	e0bff717 	ldw	r2,-36(fp)
 80258a4:	1085883a 	add	r2,r2,r2
 80258a8:	1085883a 	add	r2,r2,r2
 80258ac:	e0fffb17 	ldw	r3,-20(fp)
 80258b0:	1885883a 	add	r2,r3,r2
 80258b4:	e0fff517 	ldw	r3,-44(fp)
 80258b8:	10c00015 	stw	r3,0(r2)
 80258bc:	e0bff717 	ldw	r2,-36(fp)
 80258c0:	10800044 	addi	r2,r2,1
 80258c4:	e0bff715 	stw	r2,-36(fp)
			workspace += samplesperrow;
 80258c8:	e0fff517 	ldw	r3,-44(fp)
 80258cc:	e0bffe17 	ldw	r2,-8(fp)
 80258d0:	1885883a 	add	r2,r3,r2
 80258d4:	e0bff515 	stw	r2,-44(fp)
	while (currow < numrows) {
		rowsperchunk = MIN(rowsperchunk, numrows - currow);
		workspace = (JSAMPROW) alloc_large(cinfo, pool_id,
			(size_t) ((size_t) rowsperchunk * (size_t) samplesperrow
			* SIZEOF(JSAMPLE)));
		for (i = rowsperchunk; i > 0; i--) {
 80258d8:	e0bff817 	ldw	r2,-32(fp)
 80258dc:	10bfffc4 	addi	r2,r2,-1
 80258e0:	e0bff815 	stw	r2,-32(fp)
 80258e4:	e0bff817 	ldw	r2,-32(fp)
 80258e8:	103fed1e 	bne	r2,zero,80258a0 <alloc_sarray+0x108>
	result = (JSAMPARRAY) alloc_small(cinfo, pool_id,
		(size_t) (numrows * SIZEOF(JSAMPROW)));

	/* Get the rows themselves (large objects) */
	currow = 0;
	while (currow < numrows) {
 80258ec:	e0fff717 	ldw	r3,-36(fp)
 80258f0:	e0bfff17 	ldw	r2,-4(fp)
 80258f4:	18bfd836 	bltu	r3,r2,8025858 <alloc_sarray+0xc0>
			result[currow++] = workspace;
			workspace += samplesperrow;
		}
	}

	return result;
 80258f8:	e0bffb17 	ldw	r2,-20(fp)
}
 80258fc:	e037883a 	mov	sp,fp
 8025900:	dfc00117 	ldw	ra,4(sp)
 8025904:	df000017 	ldw	fp,0(sp)
 8025908:	dec00204 	addi	sp,sp,8
 802590c:	f800283a 	ret

08025910 <alloc_barray>:

METHODDEF(JBLOCKARRAY)
	alloc_barray (j_common_ptr cinfo, int pool_id,
	JDIMENSION blocksperrow, JDIMENSION numrows)
	/* Allocate a 2-D coefficient-block array */
{
 8025910:	defff304 	addi	sp,sp,-52
 8025914:	dfc00c15 	stw	ra,48(sp)
 8025918:	df000b15 	stw	fp,44(sp)
 802591c:	df000b04 	addi	fp,sp,44
 8025920:	e13ffc15 	stw	r4,-16(fp)
 8025924:	e17ffd15 	stw	r5,-12(fp)
 8025928:	e1bffe15 	stw	r6,-8(fp)
 802592c:	e1ffff15 	stw	r7,-4(fp)
	my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8025930:	e0bffc17 	ldw	r2,-16(fp)
 8025934:	10800117 	ldw	r2,4(r2)
 8025938:	e0bff915 	stw	r2,-28(fp)
	JDIMENSION rowsperchunk, currow, i;
	long ltemp;

	/* Calculate max # of rows allowed in one allocation chunk */
	ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
		((long) blocksperrow * SIZEOF(JBLOCK));
 802593c:	e0bffe17 	ldw	r2,-8(fp)
 8025940:	100491fa 	slli	r2,r2,7
	JBLOCKROW workspace;
	JDIMENSION rowsperchunk, currow, i;
	long ltemp;

	/* Calculate max # of rows allowed in one allocation chunk */
	ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 8025944:	010ee6f4 	movhi	r4,15259
 8025948:	21327d04 	addi	r4,r4,-13836
 802594c:	100b883a 	mov	r5,r2
 8025950:	802c2080 	call	802c208 <__udivsi3>
 8025954:	e0bffa15 	stw	r2,-24(fp)
		((long) blocksperrow * SIZEOF(JBLOCK));
	if (ltemp <= 0)
 8025958:	e0bffa17 	ldw	r2,-24(fp)
 802595c:	00800916 	blt	zero,r2,8025984 <alloc_barray+0x74>
		ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 8025960:	e0bffc17 	ldw	r2,-16(fp)
 8025964:	10800017 	ldw	r2,0(r2)
 8025968:	00c01204 	movi	r3,72
 802596c:	10c00515 	stw	r3,20(r2)
 8025970:	e0bffc17 	ldw	r2,-16(fp)
 8025974:	10800017 	ldw	r2,0(r2)
 8025978:	10800017 	ldw	r2,0(r2)
 802597c:	e13ffc17 	ldw	r4,-16(fp)
 8025980:	103ee83a 	callr	r2
	if (ltemp < (long) numrows)
 8025984:	e0bfff17 	ldw	r2,-4(fp)
 8025988:	e0fffa17 	ldw	r3,-24(fp)
 802598c:	1880030e 	bge	r3,r2,802599c <alloc_barray+0x8c>
		rowsperchunk = (JDIMENSION) ltemp;
 8025990:	e0bffa17 	ldw	r2,-24(fp)
 8025994:	e0bff615 	stw	r2,-40(fp)
 8025998:	00000206 	br	80259a4 <alloc_barray+0x94>
	else
		rowsperchunk = numrows;
 802599c:	e0bfff17 	ldw	r2,-4(fp)
 80259a0:	e0bff615 	stw	r2,-40(fp)
	mem->last_rowsperchunk = rowsperchunk;
 80259a4:	e0bff917 	ldw	r2,-28(fp)
 80259a8:	e0fff617 	ldw	r3,-40(fp)
 80259ac:	10c01415 	stw	r3,80(r2)

	/* Get space for row pointers (small object) */
	result = (JBLOCKARRAY) alloc_small(cinfo, pool_id,
 80259b0:	e0bfff17 	ldw	r2,-4(fp)
 80259b4:	1085883a 	add	r2,r2,r2
 80259b8:	1085883a 	add	r2,r2,r2
 80259bc:	e13ffc17 	ldw	r4,-16(fp)
 80259c0:	e17ffd17 	ldw	r5,-12(fp)
 80259c4:	100d883a 	mov	r6,r2
 80259c8:	80253480 	call	8025348 <alloc_small>
 80259cc:	e0bffb15 	stw	r2,-20(fp)
		(size_t) (numrows * SIZEOF(JBLOCKROW)));

	/* Get the rows themselves (large objects) */
	currow = 0;
 80259d0:	e03ff715 	stw	zero,-36(fp)
	while (currow < numrows) {
 80259d4:	00002706 	br	8025a74 <alloc_barray+0x164>
		rowsperchunk = MIN(rowsperchunk, numrows - currow);
 80259d8:	e0ffff17 	ldw	r3,-4(fp)
 80259dc:	e0bff717 	ldw	r2,-36(fp)
 80259e0:	1885c83a 	sub	r2,r3,r2
 80259e4:	e0fff617 	ldw	r3,-40(fp)
 80259e8:	1880012e 	bgeu	r3,r2,80259f0 <alloc_barray+0xe0>
 80259ec:	1805883a 	mov	r2,r3
 80259f0:	e0bff615 	stw	r2,-40(fp)
		workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
			(size_t) ((size_t) rowsperchunk * (size_t) blocksperrow
 80259f4:	e13ff617 	ldw	r4,-40(fp)
 80259f8:	e17ffe17 	ldw	r5,-8(fp)
 80259fc:	802c2180 	call	802c218 <__mulsi3>

	/* Get the rows themselves (large objects) */
	currow = 0;
	while (currow < numrows) {
		rowsperchunk = MIN(rowsperchunk, numrows - currow);
		workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
 8025a00:	100491fa 	slli	r2,r2,7
 8025a04:	e13ffc17 	ldw	r4,-16(fp)
 8025a08:	e17ffd17 	ldw	r5,-12(fp)
 8025a0c:	100d883a 	mov	r6,r2
 8025a10:	80256200 	call	8025620 <alloc_large>
 8025a14:	e0bff515 	stw	r2,-44(fp)
			(size_t) ((size_t) rowsperchunk * (size_t) blocksperrow
			* SIZEOF(JBLOCK)));
		for (i = rowsperchunk; i > 0; i--) {
 8025a18:	e0bff617 	ldw	r2,-40(fp)
 8025a1c:	e0bff815 	stw	r2,-32(fp)
 8025a20:	00001206 	br	8025a6c <alloc_barray+0x15c>
			result[currow++] = workspace;
 8025a24:	e0bff717 	ldw	r2,-36(fp)
 8025a28:	1085883a 	add	r2,r2,r2
 8025a2c:	1085883a 	add	r2,r2,r2
 8025a30:	e0fffb17 	ldw	r3,-20(fp)
 8025a34:	1885883a 	add	r2,r3,r2
 8025a38:	e0fff517 	ldw	r3,-44(fp)
 8025a3c:	10c00015 	stw	r3,0(r2)
 8025a40:	e0bff717 	ldw	r2,-36(fp)
 8025a44:	10800044 	addi	r2,r2,1
 8025a48:	e0bff715 	stw	r2,-36(fp)
			workspace += blocksperrow;
 8025a4c:	e0bffe17 	ldw	r2,-8(fp)
 8025a50:	100491fa 	slli	r2,r2,7
 8025a54:	e0fff517 	ldw	r3,-44(fp)
 8025a58:	1885883a 	add	r2,r3,r2
 8025a5c:	e0bff515 	stw	r2,-44(fp)
	while (currow < numrows) {
		rowsperchunk = MIN(rowsperchunk, numrows - currow);
		workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
			(size_t) ((size_t) rowsperchunk * (size_t) blocksperrow
			* SIZEOF(JBLOCK)));
		for (i = rowsperchunk; i > 0; i--) {
 8025a60:	e0bff817 	ldw	r2,-32(fp)
 8025a64:	10bfffc4 	addi	r2,r2,-1
 8025a68:	e0bff815 	stw	r2,-32(fp)
 8025a6c:	e0bff817 	ldw	r2,-32(fp)
 8025a70:	103fec1e 	bne	r2,zero,8025a24 <alloc_barray+0x114>
	result = (JBLOCKARRAY) alloc_small(cinfo, pool_id,
		(size_t) (numrows * SIZEOF(JBLOCKROW)));

	/* Get the rows themselves (large objects) */
	currow = 0;
	while (currow < numrows) {
 8025a74:	e0fff717 	ldw	r3,-36(fp)
 8025a78:	e0bfff17 	ldw	r2,-4(fp)
 8025a7c:	18bfd636 	bltu	r3,r2,80259d8 <alloc_barray+0xc8>
			result[currow++] = workspace;
			workspace += blocksperrow;
		}
	}

	return result;
 8025a80:	e0bffb17 	ldw	r2,-20(fp)
}
 8025a84:	e037883a 	mov	sp,fp
 8025a88:	dfc00117 	ldw	ra,4(sp)
 8025a8c:	df000017 	ldw	fp,0(sp)
 8025a90:	dec00204 	addi	sp,sp,8
 8025a94:	f800283a 	ret

08025a98 <request_virt_sarray>:
METHODDEF(jvirt_sarray_ptr)
	request_virt_sarray (j_common_ptr cinfo, int pool_id, boolean pre_zero,
	JDIMENSION samplesperrow, JDIMENSION numrows,
	JDIMENSION maxaccess)
	/* Request a virtual 2-D sample array */
{
 8025a98:	defff804 	addi	sp,sp,-32
 8025a9c:	dfc00715 	stw	ra,28(sp)
 8025aa0:	df000615 	stw	fp,24(sp)
 8025aa4:	df000604 	addi	fp,sp,24
 8025aa8:	e13ffc15 	stw	r4,-16(fp)
 8025aac:	e17ffd15 	stw	r5,-12(fp)
 8025ab0:	3005883a 	mov	r2,r6
 8025ab4:	e1ffff15 	stw	r7,-4(fp)
 8025ab8:	e0bffe05 	stb	r2,-8(fp)
	my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8025abc:	e0bffc17 	ldw	r2,-16(fp)
 8025ac0:	10800117 	ldw	r2,4(r2)
 8025ac4:	e0bffa15 	stw	r2,-24(fp)
	jvirt_sarray_ptr result;

	/* Only IMAGE-lifetime virtual arrays are currently supported */
	if (pool_id != JPOOL_IMAGE)
 8025ac8:	e0bffd17 	ldw	r2,-12(fp)
 8025acc:	10800060 	cmpeqi	r2,r2,1
 8025ad0:	10000d1e 	bne	r2,zero,8025b08 <request_virt_sarray+0x70>
		ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8025ad4:	e0bffc17 	ldw	r2,-16(fp)
 8025ad8:	10800017 	ldw	r2,0(r2)
 8025adc:	00c003c4 	movi	r3,15
 8025ae0:	10c00515 	stw	r3,20(r2)
 8025ae4:	e0bffc17 	ldw	r2,-16(fp)
 8025ae8:	10800017 	ldw	r2,0(r2)
 8025aec:	e0fffd17 	ldw	r3,-12(fp)
 8025af0:	10c00615 	stw	r3,24(r2)
 8025af4:	e0bffc17 	ldw	r2,-16(fp)
 8025af8:	10800017 	ldw	r2,0(r2)
 8025afc:	10800017 	ldw	r2,0(r2)
 8025b00:	e13ffc17 	ldw	r4,-16(fp)
 8025b04:	103ee83a 	callr	r2

	/* get control block */
	result = (jvirt_sarray_ptr) alloc_small(cinfo, pool_id,
 8025b08:	e13ffc17 	ldw	r4,-16(fp)
 8025b0c:	e17ffd17 	ldw	r5,-12(fp)
 8025b10:	01801e04 	movi	r6,120
 8025b14:	80253480 	call	8025348 <alloc_small>
 8025b18:	e0bffb15 	stw	r2,-20(fp)
		SIZEOF(struct jvirt_sarray_control));

	result->mem_buffer = NULL;	/* marks array not yet realized */
 8025b1c:	e0bffb17 	ldw	r2,-20(fp)
 8025b20:	10000015 	stw	zero,0(r2)
	result->rows_in_array = numrows;
 8025b24:	e0bffb17 	ldw	r2,-20(fp)
 8025b28:	e0c00217 	ldw	r3,8(fp)
 8025b2c:	10c00115 	stw	r3,4(r2)
	result->samplesperrow = samplesperrow;
 8025b30:	e0bffb17 	ldw	r2,-20(fp)
 8025b34:	e0ffff17 	ldw	r3,-4(fp)
 8025b38:	10c00215 	stw	r3,8(r2)
	result->maxaccess = maxaccess;
 8025b3c:	e0bffb17 	ldw	r2,-20(fp)
 8025b40:	e0c00317 	ldw	r3,12(fp)
 8025b44:	10c00315 	stw	r3,12(r2)
	result->pre_zero = pre_zero;
 8025b48:	e0bffb17 	ldw	r2,-20(fp)
 8025b4c:	e0fffe03 	ldbu	r3,-8(fp)
 8025b50:	10c00805 	stb	r3,32(r2)
	result->b_s_open = FALSE;	/* no associated backing-store object */
 8025b54:	e0bffb17 	ldw	r2,-20(fp)
 8025b58:	10000885 	stb	zero,34(r2)
	result->next = mem->virt_sarray_list; /* add to list of virtual arrays */
 8025b5c:	e0bffa17 	ldw	r2,-24(fp)
 8025b60:	10c01117 	ldw	r3,68(r2)
 8025b64:	e0bffb17 	ldw	r2,-20(fp)
 8025b68:	10c00915 	stw	r3,36(r2)
	mem->virt_sarray_list = result;
 8025b6c:	e0bffa17 	ldw	r2,-24(fp)
 8025b70:	e0fffb17 	ldw	r3,-20(fp)
 8025b74:	10c01115 	stw	r3,68(r2)

	return result;
 8025b78:	e0bffb17 	ldw	r2,-20(fp)
}
 8025b7c:	e037883a 	mov	sp,fp
 8025b80:	dfc00117 	ldw	ra,4(sp)
 8025b84:	df000017 	ldw	fp,0(sp)
 8025b88:	dec00204 	addi	sp,sp,8
 8025b8c:	f800283a 	ret

08025b90 <request_virt_barray>:
METHODDEF(jvirt_barray_ptr)
	request_virt_barray (j_common_ptr cinfo, int pool_id, boolean pre_zero,
	JDIMENSION blocksperrow, JDIMENSION numrows,
	JDIMENSION maxaccess)
	/* Request a virtual 2-D coefficient-block array */
{
 8025b90:	defff804 	addi	sp,sp,-32
 8025b94:	dfc00715 	stw	ra,28(sp)
 8025b98:	df000615 	stw	fp,24(sp)
 8025b9c:	df000604 	addi	fp,sp,24
 8025ba0:	e13ffc15 	stw	r4,-16(fp)
 8025ba4:	e17ffd15 	stw	r5,-12(fp)
 8025ba8:	3005883a 	mov	r2,r6
 8025bac:	e1ffff15 	stw	r7,-4(fp)
 8025bb0:	e0bffe05 	stb	r2,-8(fp)
	my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8025bb4:	e0bffc17 	ldw	r2,-16(fp)
 8025bb8:	10800117 	ldw	r2,4(r2)
 8025bbc:	e0bffa15 	stw	r2,-24(fp)
	jvirt_barray_ptr result;

	/* Only IMAGE-lifetime virtual arrays are currently supported */
	if (pool_id != JPOOL_IMAGE)
 8025bc0:	e0bffd17 	ldw	r2,-12(fp)
 8025bc4:	10800060 	cmpeqi	r2,r2,1
 8025bc8:	10000d1e 	bne	r2,zero,8025c00 <request_virt_barray+0x70>
		ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8025bcc:	e0bffc17 	ldw	r2,-16(fp)
 8025bd0:	10800017 	ldw	r2,0(r2)
 8025bd4:	00c003c4 	movi	r3,15
 8025bd8:	10c00515 	stw	r3,20(r2)
 8025bdc:	e0bffc17 	ldw	r2,-16(fp)
 8025be0:	10800017 	ldw	r2,0(r2)
 8025be4:	e0fffd17 	ldw	r3,-12(fp)
 8025be8:	10c00615 	stw	r3,24(r2)
 8025bec:	e0bffc17 	ldw	r2,-16(fp)
 8025bf0:	10800017 	ldw	r2,0(r2)
 8025bf4:	10800017 	ldw	r2,0(r2)
 8025bf8:	e13ffc17 	ldw	r4,-16(fp)
 8025bfc:	103ee83a 	callr	r2

	/* get control block */
	result = (jvirt_barray_ptr) alloc_small(cinfo, pool_id,
 8025c00:	e13ffc17 	ldw	r4,-16(fp)
 8025c04:	e17ffd17 	ldw	r5,-12(fp)
 8025c08:	01801e04 	movi	r6,120
 8025c0c:	80253480 	call	8025348 <alloc_small>
 8025c10:	e0bffb15 	stw	r2,-20(fp)
		SIZEOF(struct jvirt_barray_control));

	result->mem_buffer = NULL;	/* marks array not yet realized */
 8025c14:	e0bffb17 	ldw	r2,-20(fp)
 8025c18:	10000015 	stw	zero,0(r2)
	result->rows_in_array = numrows;
 8025c1c:	e0bffb17 	ldw	r2,-20(fp)
 8025c20:	e0c00217 	ldw	r3,8(fp)
 8025c24:	10c00115 	stw	r3,4(r2)
	result->blocksperrow = blocksperrow;
 8025c28:	e0bffb17 	ldw	r2,-20(fp)
 8025c2c:	e0ffff17 	ldw	r3,-4(fp)
 8025c30:	10c00215 	stw	r3,8(r2)
	result->maxaccess = maxaccess;
 8025c34:	e0bffb17 	ldw	r2,-20(fp)
 8025c38:	e0c00317 	ldw	r3,12(fp)
 8025c3c:	10c00315 	stw	r3,12(r2)
	result->pre_zero = pre_zero;
 8025c40:	e0bffb17 	ldw	r2,-20(fp)
 8025c44:	e0fffe03 	ldbu	r3,-8(fp)
 8025c48:	10c00805 	stb	r3,32(r2)
	result->b_s_open = FALSE;	/* no associated backing-store object */
 8025c4c:	e0bffb17 	ldw	r2,-20(fp)
 8025c50:	10000885 	stb	zero,34(r2)
	result->next = mem->virt_barray_list; /* add to list of virtual arrays */
 8025c54:	e0bffa17 	ldw	r2,-24(fp)
 8025c58:	10c01217 	ldw	r3,72(r2)
 8025c5c:	e0bffb17 	ldw	r2,-20(fp)
 8025c60:	10c00915 	stw	r3,36(r2)
	mem->virt_barray_list = result;
 8025c64:	e0bffa17 	ldw	r2,-24(fp)
 8025c68:	e0fffb17 	ldw	r3,-20(fp)
 8025c6c:	10c01215 	stw	r3,72(r2)

	return result;
 8025c70:	e0bffb17 	ldw	r2,-20(fp)
}
 8025c74:	e037883a 	mov	sp,fp
 8025c78:	dfc00117 	ldw	ra,4(sp)
 8025c7c:	df000017 	ldw	fp,0(sp)
 8025c80:	dec00204 	addi	sp,sp,8
 8025c84:	f800283a 	ret

08025c88 <realize_virt_arrays>:


METHODDEF(void)
	realize_virt_arrays (j_common_ptr cinfo)
	/* Allocate the in-memory buffers for any unrealized virtual arrays */
{
 8025c88:	defff404 	addi	sp,sp,-48
 8025c8c:	dfc00b15 	stw	ra,44(sp)
 8025c90:	df000a15 	stw	fp,40(sp)
 8025c94:	dc000915 	stw	r16,36(sp)
 8025c98:	df000904 	addi	fp,sp,36
 8025c9c:	e13fff15 	stw	r4,-4(fp)
	my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8025ca0:	e0bfff17 	ldw	r2,-4(fp)
 8025ca4:	10800117 	ldw	r2,4(r2)
 8025ca8:	e0bffc15 	stw	r2,-16(fp)

	/* Compute the minimum space needed (maxaccess rows in each buffer)
	* and the maximum space needed (full image height in each buffer).
	* These may be of use to the system-dependent jpeg_mem_available routine.
	*/
	space_per_minheight = 0;
 8025cac:	e03ff715 	stw	zero,-36(fp)
	maximum_space = 0;
 8025cb0:	e03ff815 	stw	zero,-32(fp)
	for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8025cb4:	e0bffc17 	ldw	r2,-16(fp)
 8025cb8:	10801117 	ldw	r2,68(r2)
 8025cbc:	e0bffa15 	stw	r2,-24(fp)
 8025cc0:	00001e06 	br	8025d3c <realize_virt_arrays+0xb4>
		if (sptr->mem_buffer == NULL) { /* if not realized yet */
 8025cc4:	e0bffa17 	ldw	r2,-24(fp)
 8025cc8:	10800017 	ldw	r2,0(r2)
 8025ccc:	1000181e 	bne	r2,zero,8025d30 <realize_virt_arrays+0xa8>
			space_per_minheight += (long) sptr->maxaccess *
 8025cd0:	e0bffa17 	ldw	r2,-24(fp)
 8025cd4:	10800317 	ldw	r2,12(r2)
 8025cd8:	1007883a 	mov	r3,r2
				(long) sptr->samplesperrow * SIZEOF(JSAMPLE);
 8025cdc:	e0bffa17 	ldw	r2,-24(fp)
 8025ce0:	10800217 	ldw	r2,8(r2)
	*/
	space_per_minheight = 0;
	maximum_space = 0;
	for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
		if (sptr->mem_buffer == NULL) { /* if not realized yet */
			space_per_minheight += (long) sptr->maxaccess *
 8025ce4:	1809883a 	mov	r4,r3
 8025ce8:	100b883a 	mov	r5,r2
 8025cec:	802c2180 	call	802c218 <__mulsi3>
				(long) sptr->samplesperrow * SIZEOF(JSAMPLE);
 8025cf0:	1007883a 	mov	r3,r2
	*/
	space_per_minheight = 0;
	maximum_space = 0;
	for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
		if (sptr->mem_buffer == NULL) { /* if not realized yet */
			space_per_minheight += (long) sptr->maxaccess *
 8025cf4:	e0bff717 	ldw	r2,-36(fp)
 8025cf8:	1885883a 	add	r2,r3,r2
 8025cfc:	e0bff715 	stw	r2,-36(fp)
				(long) sptr->samplesperrow * SIZEOF(JSAMPLE);
			maximum_space += (long) sptr->rows_in_array *
 8025d00:	e0bffa17 	ldw	r2,-24(fp)
 8025d04:	10800117 	ldw	r2,4(r2)
 8025d08:	1007883a 	mov	r3,r2
				(long) sptr->samplesperrow * SIZEOF(JSAMPLE);
 8025d0c:	e0bffa17 	ldw	r2,-24(fp)
 8025d10:	10800217 	ldw	r2,8(r2)
	maximum_space = 0;
	for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
		if (sptr->mem_buffer == NULL) { /* if not realized yet */
			space_per_minheight += (long) sptr->maxaccess *
				(long) sptr->samplesperrow * SIZEOF(JSAMPLE);
			maximum_space += (long) sptr->rows_in_array *
 8025d14:	1809883a 	mov	r4,r3
 8025d18:	100b883a 	mov	r5,r2
 8025d1c:	802c2180 	call	802c218 <__mulsi3>
				(long) sptr->samplesperrow * SIZEOF(JSAMPLE);
 8025d20:	1007883a 	mov	r3,r2
	maximum_space = 0;
	for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
		if (sptr->mem_buffer == NULL) { /* if not realized yet */
			space_per_minheight += (long) sptr->maxaccess *
				(long) sptr->samplesperrow * SIZEOF(JSAMPLE);
			maximum_space += (long) sptr->rows_in_array *
 8025d24:	e0bff817 	ldw	r2,-32(fp)
 8025d28:	1885883a 	add	r2,r3,r2
 8025d2c:	e0bff815 	stw	r2,-32(fp)
	* and the maximum space needed (full image height in each buffer).
	* These may be of use to the system-dependent jpeg_mem_available routine.
	*/
	space_per_minheight = 0;
	maximum_space = 0;
	for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8025d30:	e0bffa17 	ldw	r2,-24(fp)
 8025d34:	10800917 	ldw	r2,36(r2)
 8025d38:	e0bffa15 	stw	r2,-24(fp)
 8025d3c:	e0bffa17 	ldw	r2,-24(fp)
 8025d40:	103fe01e 	bne	r2,zero,8025cc4 <realize_virt_arrays+0x3c>
				(long) sptr->samplesperrow * SIZEOF(JSAMPLE);
			maximum_space += (long) sptr->rows_in_array *
				(long) sptr->samplesperrow * SIZEOF(JSAMPLE);
		}
	}
	for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8025d44:	e0bffc17 	ldw	r2,-16(fp)
 8025d48:	10801217 	ldw	r2,72(r2)
 8025d4c:	e0bffb15 	stw	r2,-20(fp)
 8025d50:	00001e06 	br	8025dcc <realize_virt_arrays+0x144>
		if (bptr->mem_buffer == NULL) { /* if not realized yet */
 8025d54:	e0bffb17 	ldw	r2,-20(fp)
 8025d58:	10800017 	ldw	r2,0(r2)
 8025d5c:	1000181e 	bne	r2,zero,8025dc0 <realize_virt_arrays+0x138>
			space_per_minheight += (long) bptr->maxaccess *
 8025d60:	e0bffb17 	ldw	r2,-20(fp)
 8025d64:	10800317 	ldw	r2,12(r2)
 8025d68:	1007883a 	mov	r3,r2
				(long) bptr->blocksperrow * SIZEOF(JBLOCK);
 8025d6c:	e0bffb17 	ldw	r2,-20(fp)
 8025d70:	10800217 	ldw	r2,8(r2)
				(long) sptr->samplesperrow * SIZEOF(JSAMPLE);
		}
	}
	for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
		if (bptr->mem_buffer == NULL) { /* if not realized yet */
			space_per_minheight += (long) bptr->maxaccess *
 8025d74:	1809883a 	mov	r4,r3
 8025d78:	100b883a 	mov	r5,r2
 8025d7c:	802c2180 	call	802c218 <__mulsi3>
				(long) bptr->blocksperrow * SIZEOF(JBLOCK);
 8025d80:	100691fa 	slli	r3,r2,7
				(long) sptr->samplesperrow * SIZEOF(JSAMPLE);
		}
	}
	for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
		if (bptr->mem_buffer == NULL) { /* if not realized yet */
			space_per_minheight += (long) bptr->maxaccess *
 8025d84:	e0bff717 	ldw	r2,-36(fp)
 8025d88:	1885883a 	add	r2,r3,r2
 8025d8c:	e0bff715 	stw	r2,-36(fp)
				(long) bptr->blocksperrow * SIZEOF(JBLOCK);
			maximum_space += (long) bptr->rows_in_array *
 8025d90:	e0bffb17 	ldw	r2,-20(fp)
 8025d94:	10800117 	ldw	r2,4(r2)
 8025d98:	1007883a 	mov	r3,r2
				(long) bptr->blocksperrow * SIZEOF(JBLOCK);
 8025d9c:	e0bffb17 	ldw	r2,-20(fp)
 8025da0:	10800217 	ldw	r2,8(r2)
	}
	for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
		if (bptr->mem_buffer == NULL) { /* if not realized yet */
			space_per_minheight += (long) bptr->maxaccess *
				(long) bptr->blocksperrow * SIZEOF(JBLOCK);
			maximum_space += (long) bptr->rows_in_array *
 8025da4:	1809883a 	mov	r4,r3
 8025da8:	100b883a 	mov	r5,r2
 8025dac:	802c2180 	call	802c218 <__mulsi3>
				(long) bptr->blocksperrow * SIZEOF(JBLOCK);
 8025db0:	100691fa 	slli	r3,r2,7
	}
	for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
		if (bptr->mem_buffer == NULL) { /* if not realized yet */
			space_per_minheight += (long) bptr->maxaccess *
				(long) bptr->blocksperrow * SIZEOF(JBLOCK);
			maximum_space += (long) bptr->rows_in_array *
 8025db4:	e0bff817 	ldw	r2,-32(fp)
 8025db8:	1885883a 	add	r2,r3,r2
 8025dbc:	e0bff815 	stw	r2,-32(fp)
				(long) sptr->samplesperrow * SIZEOF(JSAMPLE);
			maximum_space += (long) sptr->rows_in_array *
				(long) sptr->samplesperrow * SIZEOF(JSAMPLE);
		}
	}
	for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8025dc0:	e0bffb17 	ldw	r2,-20(fp)
 8025dc4:	10800917 	ldw	r2,36(r2)
 8025dc8:	e0bffb15 	stw	r2,-20(fp)
 8025dcc:	e0bffb17 	ldw	r2,-20(fp)
 8025dd0:	103fe01e 	bne	r2,zero,8025d54 <realize_virt_arrays+0xcc>
			maximum_space += (long) bptr->rows_in_array *
				(long) bptr->blocksperrow * SIZEOF(JBLOCK);
		}
	}

	if (space_per_minheight <= 0)
 8025dd4:	e0bff717 	ldw	r2,-36(fp)
 8025dd8:	0080b50e 	bge	zero,r2,80260b0 <realize_virt_arrays+0x428>
		return;			/* no unrealized arrays, no work */

	/* Determine amount of memory to actually use; this is system-dependent. */
	avail_mem = jpeg_mem_available(cinfo, space_per_minheight, maximum_space,
		mem->total_space_allocated);
 8025ddc:	e0bffc17 	ldw	r2,-16(fp)

	if (space_per_minheight <= 0)
		return;			/* no unrealized arrays, no work */

	/* Determine amount of memory to actually use; this is system-dependent. */
	avail_mem = jpeg_mem_available(cinfo, space_per_minheight, maximum_space,
 8025de0:	10801317 	ldw	r2,76(r2)
 8025de4:	e13fff17 	ldw	r4,-4(fp)
 8025de8:	e17ff717 	ldw	r5,-36(fp)
 8025dec:	e1bff817 	ldw	r6,-32(fp)
 8025df0:	100f883a 	mov	r7,r2
 8025df4:	8024fe80 	call	8024fe8 <jpeg_mem_available>
 8025df8:	e0bffd15 	stw	r2,-12(fp)

	/* If the maximum space needed is available, make all the buffers full
	* height; otherwise parcel it out with the same number of minheights
	* in each buffer.
	*/
	if (avail_mem >= maximum_space)
 8025dfc:	e0fffd17 	ldw	r3,-12(fp)
 8025e00:	e0bff817 	ldw	r2,-32(fp)
 8025e04:	18800416 	blt	r3,r2,8025e18 <realize_virt_arrays+0x190>
		max_minheights = 1000000000L;
 8025e08:	008ee6f4 	movhi	r2,15259
 8025e0c:	10b28004 	addi	r2,r2,-13824
 8025e10:	e0bff915 	stw	r2,-28(fp)
 8025e14:	00000806 	br	8025e38 <realize_virt_arrays+0x1b0>
	else {
		max_minheights = avail_mem / space_per_minheight;
 8025e18:	e13ffd17 	ldw	r4,-12(fp)
 8025e1c:	e17ff717 	ldw	r5,-36(fp)
 8025e20:	802c15c0 	call	802c15c <__divsi3>
 8025e24:	e0bff915 	stw	r2,-28(fp)
		/* If there doesn't seem to be enough space, try to get the minimum
		* anyway.  This allows a "stub" implementation of jpeg_mem_available().
		*/
		if (max_minheights <= 0)
 8025e28:	e0bff917 	ldw	r2,-28(fp)
 8025e2c:	00800216 	blt	zero,r2,8025e38 <realize_virt_arrays+0x1b0>
			max_minheights = 1;
 8025e30:	00800044 	movi	r2,1
 8025e34:	e0bff915 	stw	r2,-28(fp)
	}

	/* Allocate the in-memory buffers and initialize backing store as needed. */

	for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8025e38:	e0bffc17 	ldw	r2,-16(fp)
 8025e3c:	10801117 	ldw	r2,68(r2)
 8025e40:	e0bffa15 	stw	r2,-24(fp)
 8025e44:	00004806 	br	8025f68 <realize_virt_arrays+0x2e0>
		if (sptr->mem_buffer == NULL) { /* if not realized yet */
 8025e48:	e0bffa17 	ldw	r2,-24(fp)
 8025e4c:	10800017 	ldw	r2,0(r2)
 8025e50:	1000421e 	bne	r2,zero,8025f5c <realize_virt_arrays+0x2d4>
			minheights = ((long) sptr->rows_in_array - 1L) / sptr->maxaccess + 1L;
 8025e54:	e0bffa17 	ldw	r2,-24(fp)
 8025e58:	10800117 	ldw	r2,4(r2)
 8025e5c:	10bfffc4 	addi	r2,r2,-1
 8025e60:	1007883a 	mov	r3,r2
 8025e64:	e0bffa17 	ldw	r2,-24(fp)
 8025e68:	10800317 	ldw	r2,12(r2)
 8025e6c:	1809883a 	mov	r4,r3
 8025e70:	100b883a 	mov	r5,r2
 8025e74:	802c2080 	call	802c208 <__udivsi3>
 8025e78:	10800044 	addi	r2,r2,1
 8025e7c:	e0bffe15 	stw	r2,-8(fp)
			if (minheights <= max_minheights) {
 8025e80:	e0bffe17 	ldw	r2,-8(fp)
 8025e84:	e0fff917 	ldw	r3,-28(fp)
 8025e88:	18800516 	blt	r3,r2,8025ea0 <realize_virt_arrays+0x218>
				/* This buffer fits in memory */
				sptr->rows_in_mem = sptr->rows_in_array;
 8025e8c:	e0bffa17 	ldw	r2,-24(fp)
 8025e90:	10c00117 	ldw	r3,4(r2)
 8025e94:	e0bffa17 	ldw	r2,-24(fp)
 8025e98:	10c00415 	stw	r3,16(r2)
 8025e9c:	00001a06 	br	8025f08 <realize_virt_arrays+0x280>
			} else {
				/* It doesn't fit in memory, create backing store. */
				sptr->rows_in_mem = (JDIMENSION) (max_minheights * sptr->maxaccess);
 8025ea0:	e0bffa17 	ldw	r2,-24(fp)
 8025ea4:	10c00317 	ldw	r3,12(r2)
 8025ea8:	e0bff917 	ldw	r2,-28(fp)
 8025eac:	1809883a 	mov	r4,r3
 8025eb0:	100b883a 	mov	r5,r2
 8025eb4:	802c2180 	call	802c218 <__mulsi3>
 8025eb8:	1007883a 	mov	r3,r2
 8025ebc:	e0bffa17 	ldw	r2,-24(fp)
 8025ec0:	10c00415 	stw	r3,16(r2)
				jpeg_open_backing_store(cinfo, & sptr->b_s_info,
 8025ec4:	e0bffa17 	ldw	r2,-24(fp)
 8025ec8:	14000a04 	addi	r16,r2,40
					(long) sptr->rows_in_array *
 8025ecc:	e0bffa17 	ldw	r2,-24(fp)
 8025ed0:	10800117 	ldw	r2,4(r2)
 8025ed4:	1007883a 	mov	r3,r2
					(long) sptr->samplesperrow *
 8025ed8:	e0bffa17 	ldw	r2,-24(fp)
 8025edc:	10800217 	ldw	r2,8(r2)
				/* This buffer fits in memory */
				sptr->rows_in_mem = sptr->rows_in_array;
			} else {
				/* It doesn't fit in memory, create backing store. */
				sptr->rows_in_mem = (JDIMENSION) (max_minheights * sptr->maxaccess);
				jpeg_open_backing_store(cinfo, & sptr->b_s_info,
 8025ee0:	1809883a 	mov	r4,r3
 8025ee4:	100b883a 	mov	r5,r2
 8025ee8:	802c2180 	call	802c218 <__mulsi3>
 8025eec:	e13fff17 	ldw	r4,-4(fp)
 8025ef0:	800b883a 	mov	r5,r16
 8025ef4:	100d883a 	mov	r6,r2
 8025ef8:	80251e40 	call	80251e4 <jpeg_open_backing_store>
					(long) sptr->rows_in_array *
					(long) sptr->samplesperrow *
					(long) SIZEOF(JSAMPLE));
				sptr->b_s_open = TRUE;
 8025efc:	e0bffa17 	ldw	r2,-24(fp)
 8025f00:	00c00044 	movi	r3,1
 8025f04:	10c00885 	stb	r3,34(r2)
			}
			sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
				sptr->samplesperrow, sptr->rows_in_mem);
 8025f08:	e0bffa17 	ldw	r2,-24(fp)
					(long) sptr->rows_in_array *
					(long) sptr->samplesperrow *
					(long) SIZEOF(JSAMPLE));
				sptr->b_s_open = TRUE;
			}
			sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
 8025f0c:	10c00217 	ldw	r3,8(r2)
				sptr->samplesperrow, sptr->rows_in_mem);
 8025f10:	e0bffa17 	ldw	r2,-24(fp)
					(long) sptr->rows_in_array *
					(long) sptr->samplesperrow *
					(long) SIZEOF(JSAMPLE));
				sptr->b_s_open = TRUE;
			}
			sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
 8025f14:	10800417 	ldw	r2,16(r2)
 8025f18:	e13fff17 	ldw	r4,-4(fp)
 8025f1c:	01400044 	movi	r5,1
 8025f20:	180d883a 	mov	r6,r3
 8025f24:	100f883a 	mov	r7,r2
 8025f28:	80257980 	call	8025798 <alloc_sarray>
 8025f2c:	e0fffa17 	ldw	r3,-24(fp)
 8025f30:	18800015 	stw	r2,0(r3)
				sptr->samplesperrow, sptr->rows_in_mem);
			sptr->rowsperchunk = mem->last_rowsperchunk;
 8025f34:	e0bffc17 	ldw	r2,-16(fp)
 8025f38:	10c01417 	ldw	r3,80(r2)
 8025f3c:	e0bffa17 	ldw	r2,-24(fp)
 8025f40:	10c00515 	stw	r3,20(r2)
			sptr->cur_start_row = 0;
 8025f44:	e0bffa17 	ldw	r2,-24(fp)
 8025f48:	10000615 	stw	zero,24(r2)
			sptr->first_undef_row = 0;
 8025f4c:	e0bffa17 	ldw	r2,-24(fp)
 8025f50:	10000715 	stw	zero,28(r2)
			sptr->dirty = FALSE;
 8025f54:	e0bffa17 	ldw	r2,-24(fp)
 8025f58:	10000845 	stb	zero,33(r2)
			max_minheights = 1;
	}

	/* Allocate the in-memory buffers and initialize backing store as needed. */

	for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8025f5c:	e0bffa17 	ldw	r2,-24(fp)
 8025f60:	10800917 	ldw	r2,36(r2)
 8025f64:	e0bffa15 	stw	r2,-24(fp)
 8025f68:	e0bffa17 	ldw	r2,-24(fp)
 8025f6c:	103fb61e 	bne	r2,zero,8025e48 <realize_virt_arrays+0x1c0>
			sptr->first_undef_row = 0;
			sptr->dirty = FALSE;
		}
	}

	for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8025f70:	e0bffc17 	ldw	r2,-16(fp)
 8025f74:	10801217 	ldw	r2,72(r2)
 8025f78:	e0bffb15 	stw	r2,-20(fp)
 8025f7c:	00004906 	br	80260a4 <realize_virt_arrays+0x41c>
		if (bptr->mem_buffer == NULL) { /* if not realized yet */
 8025f80:	e0bffb17 	ldw	r2,-20(fp)
 8025f84:	10800017 	ldw	r2,0(r2)
 8025f88:	1000431e 	bne	r2,zero,8026098 <realize_virt_arrays+0x410>
			minheights = ((long) bptr->rows_in_array - 1L) / bptr->maxaccess + 1L;
 8025f8c:	e0bffb17 	ldw	r2,-20(fp)
 8025f90:	10800117 	ldw	r2,4(r2)
 8025f94:	10bfffc4 	addi	r2,r2,-1
 8025f98:	1007883a 	mov	r3,r2
 8025f9c:	e0bffb17 	ldw	r2,-20(fp)
 8025fa0:	10800317 	ldw	r2,12(r2)
 8025fa4:	1809883a 	mov	r4,r3
 8025fa8:	100b883a 	mov	r5,r2
 8025fac:	802c2080 	call	802c208 <__udivsi3>
 8025fb0:	10800044 	addi	r2,r2,1
 8025fb4:	e0bffe15 	stw	r2,-8(fp)
			if (minheights <= max_minheights) {
 8025fb8:	e0bffe17 	ldw	r2,-8(fp)
 8025fbc:	e0fff917 	ldw	r3,-28(fp)
 8025fc0:	18800516 	blt	r3,r2,8025fd8 <realize_virt_arrays+0x350>
				/* This buffer fits in memory */
				bptr->rows_in_mem = bptr->rows_in_array;
 8025fc4:	e0bffb17 	ldw	r2,-20(fp)
 8025fc8:	10c00117 	ldw	r3,4(r2)
 8025fcc:	e0bffb17 	ldw	r2,-20(fp)
 8025fd0:	10c00415 	stw	r3,16(r2)
 8025fd4:	00001b06 	br	8026044 <realize_virt_arrays+0x3bc>
			} else {
				/* It doesn't fit in memory, create backing store. */
				bptr->rows_in_mem = (JDIMENSION) (max_minheights * bptr->maxaccess);
 8025fd8:	e0bffb17 	ldw	r2,-20(fp)
 8025fdc:	10c00317 	ldw	r3,12(r2)
 8025fe0:	e0bff917 	ldw	r2,-28(fp)
 8025fe4:	1809883a 	mov	r4,r3
 8025fe8:	100b883a 	mov	r5,r2
 8025fec:	802c2180 	call	802c218 <__mulsi3>
 8025ff0:	1007883a 	mov	r3,r2
 8025ff4:	e0bffb17 	ldw	r2,-20(fp)
 8025ff8:	10c00415 	stw	r3,16(r2)
				jpeg_open_backing_store(cinfo, & bptr->b_s_info,
 8025ffc:	e0bffb17 	ldw	r2,-20(fp)
 8026000:	14000a04 	addi	r16,r2,40
					(long) bptr->rows_in_array *
 8026004:	e0bffb17 	ldw	r2,-20(fp)
 8026008:	10800117 	ldw	r2,4(r2)
 802600c:	1007883a 	mov	r3,r2
					(long) bptr->blocksperrow *
 8026010:	e0bffb17 	ldw	r2,-20(fp)
 8026014:	10800217 	ldw	r2,8(r2)
				bptr->rows_in_mem = bptr->rows_in_array;
			} else {
				/* It doesn't fit in memory, create backing store. */
				bptr->rows_in_mem = (JDIMENSION) (max_minheights * bptr->maxaccess);
				jpeg_open_backing_store(cinfo, & bptr->b_s_info,
					(long) bptr->rows_in_array *
 8026018:	1809883a 	mov	r4,r3
 802601c:	100b883a 	mov	r5,r2
 8026020:	802c2180 	call	802c218 <__mulsi3>
				/* This buffer fits in memory */
				bptr->rows_in_mem = bptr->rows_in_array;
			} else {
				/* It doesn't fit in memory, create backing store. */
				bptr->rows_in_mem = (JDIMENSION) (max_minheights * bptr->maxaccess);
				jpeg_open_backing_store(cinfo, & bptr->b_s_info,
 8026024:	100491fa 	slli	r2,r2,7
 8026028:	e13fff17 	ldw	r4,-4(fp)
 802602c:	800b883a 	mov	r5,r16
 8026030:	100d883a 	mov	r6,r2
 8026034:	80251e40 	call	80251e4 <jpeg_open_backing_store>
					(long) bptr->rows_in_array *
					(long) bptr->blocksperrow *
					(long) SIZEOF(JBLOCK));
				bptr->b_s_open = TRUE;
 8026038:	e0bffb17 	ldw	r2,-20(fp)
 802603c:	00c00044 	movi	r3,1
 8026040:	10c00885 	stb	r3,34(r2)
			}
			bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
				bptr->blocksperrow, bptr->rows_in_mem);
 8026044:	e0bffb17 	ldw	r2,-20(fp)
					(long) bptr->rows_in_array *
					(long) bptr->blocksperrow *
					(long) SIZEOF(JBLOCK));
				bptr->b_s_open = TRUE;
			}
			bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
 8026048:	10c00217 	ldw	r3,8(r2)
				bptr->blocksperrow, bptr->rows_in_mem);
 802604c:	e0bffb17 	ldw	r2,-20(fp)
					(long) bptr->rows_in_array *
					(long) bptr->blocksperrow *
					(long) SIZEOF(JBLOCK));
				bptr->b_s_open = TRUE;
			}
			bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
 8026050:	10800417 	ldw	r2,16(r2)
 8026054:	e13fff17 	ldw	r4,-4(fp)
 8026058:	01400044 	movi	r5,1
 802605c:	180d883a 	mov	r6,r3
 8026060:	100f883a 	mov	r7,r2
 8026064:	80259100 	call	8025910 <alloc_barray>
 8026068:	e0fffb17 	ldw	r3,-20(fp)
 802606c:	18800015 	stw	r2,0(r3)
				bptr->blocksperrow, bptr->rows_in_mem);
			bptr->rowsperchunk = mem->last_rowsperchunk;
 8026070:	e0bffc17 	ldw	r2,-16(fp)
 8026074:	10c01417 	ldw	r3,80(r2)
 8026078:	e0bffb17 	ldw	r2,-20(fp)
 802607c:	10c00515 	stw	r3,20(r2)
			bptr->cur_start_row = 0;
 8026080:	e0bffb17 	ldw	r2,-20(fp)
 8026084:	10000615 	stw	zero,24(r2)
			bptr->first_undef_row = 0;
 8026088:	e0bffb17 	ldw	r2,-20(fp)
 802608c:	10000715 	stw	zero,28(r2)
			bptr->dirty = FALSE;
 8026090:	e0bffb17 	ldw	r2,-20(fp)
 8026094:	10000845 	stb	zero,33(r2)
			sptr->first_undef_row = 0;
			sptr->dirty = FALSE;
		}
	}

	for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8026098:	e0bffb17 	ldw	r2,-20(fp)
 802609c:	10800917 	ldw	r2,36(r2)
 80260a0:	e0bffb15 	stw	r2,-20(fp)
 80260a4:	e0bffb17 	ldw	r2,-20(fp)
 80260a8:	103fb51e 	bne	r2,zero,8025f80 <realize_virt_arrays+0x2f8>
 80260ac:	00000106 	br	80260b4 <realize_virt_arrays+0x42c>
				(long) bptr->blocksperrow * SIZEOF(JBLOCK);
		}
	}

	if (space_per_minheight <= 0)
		return;			/* no unrealized arrays, no work */
 80260b0:	0001883a 	nop
			bptr->cur_start_row = 0;
			bptr->first_undef_row = 0;
			bptr->dirty = FALSE;
		}
	}
}
 80260b4:	e037883a 	mov	sp,fp
 80260b8:	dfc00217 	ldw	ra,8(sp)
 80260bc:	df000117 	ldw	fp,4(sp)
 80260c0:	dc000017 	ldw	r16,0(sp)
 80260c4:	dec00304 	addi	sp,sp,12
 80260c8:	f800283a 	ret

080260cc <do_sarray_io>:


LOCAL(void)
	do_sarray_io (j_common_ptr cinfo, jvirt_sarray_ptr ptr, boolean writing)
	/* Do backing store read or write of a virtual sample array */
{
 80260cc:	defff404 	addi	sp,sp,-48
 80260d0:	dfc00b15 	stw	ra,44(sp)
 80260d4:	df000a15 	stw	fp,40(sp)
 80260d8:	df000a04 	addi	fp,sp,40
 80260dc:	e13ffd15 	stw	r4,-12(fp)
 80260e0:	e17ffe15 	stw	r5,-8(fp)
 80260e4:	3005883a 	mov	r2,r6
 80260e8:	e0bfff05 	stb	r2,-4(fp)
	long bytesperrow, file_offset, byte_count, rows, thisrow, i;

	bytesperrow = (long) ptr->samplesperrow * SIZEOF(JSAMPLE);
 80260ec:	e0bffe17 	ldw	r2,-8(fp)
 80260f0:	10800217 	ldw	r2,8(r2)
 80260f4:	e0bff915 	stw	r2,-28(fp)
	file_offset = ptr->cur_start_row * bytesperrow;
 80260f8:	e0bffe17 	ldw	r2,-8(fp)
 80260fc:	10c00617 	ldw	r3,24(r2)
 8026100:	e0bff917 	ldw	r2,-28(fp)
 8026104:	1809883a 	mov	r4,r3
 8026108:	100b883a 	mov	r5,r2
 802610c:	802c2180 	call	802c218 <__mulsi3>
 8026110:	e0bff715 	stw	r2,-36(fp)
	/* Loop to read or write each allocation chunk in mem_buffer */
	for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8026114:	e03ff815 	stw	zero,-32(fp)
 8026118:	00005806 	br	802627c <do_sarray_io+0x1b0>
		/* One chunk, but check for short chunk at end of buffer */
		rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 802611c:	e0bffe17 	ldw	r2,-8(fp)
 8026120:	10800417 	ldw	r2,16(r2)
 8026124:	1007883a 	mov	r3,r2
 8026128:	e0bff817 	ldw	r2,-32(fp)
 802612c:	1885c83a 	sub	r2,r3,r2
 8026130:	e0fffe17 	ldw	r3,-8(fp)
 8026134:	18c00517 	ldw	r3,20(r3)
 8026138:	1880010e 	bge	r3,r2,8026140 <do_sarray_io+0x74>
 802613c:	1805883a 	mov	r2,r3
 8026140:	e0bffa15 	stw	r2,-24(fp)
		/* Transfer no more than is currently defined */
		thisrow = (long) ptr->cur_start_row + i;
 8026144:	e0bffe17 	ldw	r2,-8(fp)
 8026148:	10800617 	ldw	r2,24(r2)
 802614c:	1007883a 	mov	r3,r2
 8026150:	e0bff817 	ldw	r2,-32(fp)
 8026154:	1885883a 	add	r2,r3,r2
 8026158:	e0bffb15 	stw	r2,-20(fp)
		rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 802615c:	e0bffe17 	ldw	r2,-8(fp)
 8026160:	10800717 	ldw	r2,28(r2)
 8026164:	1007883a 	mov	r3,r2
 8026168:	e0bffb17 	ldw	r2,-20(fp)
 802616c:	1885c83a 	sub	r2,r3,r2
 8026170:	e0fffa17 	ldw	r3,-24(fp)
 8026174:	1880010e 	bge	r3,r2,802617c <do_sarray_io+0xb0>
 8026178:	1805883a 	mov	r2,r3
 802617c:	e0bffa15 	stw	r2,-24(fp)
		/* Transfer no more than fits in file */
		rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 8026180:	e0bffe17 	ldw	r2,-8(fp)
 8026184:	10800117 	ldw	r2,4(r2)
 8026188:	1007883a 	mov	r3,r2
 802618c:	e0bffb17 	ldw	r2,-20(fp)
 8026190:	1885c83a 	sub	r2,r3,r2
 8026194:	e0fffa17 	ldw	r3,-24(fp)
 8026198:	1880010e 	bge	r3,r2,80261a0 <do_sarray_io+0xd4>
 802619c:	1805883a 	mov	r2,r3
 80261a0:	e0bffa15 	stw	r2,-24(fp)
		if (rows <= 0)		/* this chunk might be past end of file! */
 80261a4:	e0bffa17 	ldw	r2,-24(fp)
 80261a8:	0080390e 	bge	zero,r2,8026290 <do_sarray_io+0x1c4>
			break;
		byte_count = rows * bytesperrow;
 80261ac:	e13ffa17 	ldw	r4,-24(fp)
 80261b0:	e17ff917 	ldw	r5,-28(fp)
 80261b4:	802c2180 	call	802c218 <__mulsi3>
 80261b8:	e0bffc15 	stw	r2,-16(fp)
		if (writing)
 80261bc:	e0bfff03 	ldbu	r2,-4(fp)
 80261c0:	10001326 	beq	r2,zero,8026210 <do_sarray_io+0x144>
			(*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 80261c4:	e0bffe17 	ldw	r2,-8(fp)
 80261c8:	12000b17 	ldw	r8,44(r2)
 80261cc:	e0bffe17 	ldw	r2,-8(fp)
 80261d0:	10c00a04 	addi	r3,r2,40
			(void FAR *) ptr->mem_buffer[i],
 80261d4:	e0bffe17 	ldw	r2,-8(fp)
 80261d8:	11000017 	ldw	r4,0(r2)
 80261dc:	e0bff817 	ldw	r2,-32(fp)
 80261e0:	1085883a 	add	r2,r2,r2
 80261e4:	1085883a 	add	r2,r2,r2
 80261e8:	2085883a 	add	r2,r4,r2
		rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
		if (rows <= 0)		/* this chunk might be past end of file! */
			break;
		byte_count = rows * bytesperrow;
		if (writing)
			(*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 80261ec:	10800017 	ldw	r2,0(r2)
 80261f0:	e13ffc17 	ldw	r4,-16(fp)
 80261f4:	d9000015 	stw	r4,0(sp)
 80261f8:	e13ffd17 	ldw	r4,-12(fp)
 80261fc:	180b883a 	mov	r5,r3
 8026200:	100d883a 	mov	r6,r2
 8026204:	e1fff717 	ldw	r7,-36(fp)
 8026208:	403ee83a 	callr	r8
 802620c:	00001206 	br	8026258 <do_sarray_io+0x18c>
			(void FAR *) ptr->mem_buffer[i],
			file_offset, byte_count);
		else
			(*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 8026210:	e0bffe17 	ldw	r2,-8(fp)
 8026214:	12000a17 	ldw	r8,40(r2)
 8026218:	e0bffe17 	ldw	r2,-8(fp)
 802621c:	10c00a04 	addi	r3,r2,40
			(void FAR *) ptr->mem_buffer[i],
 8026220:	e0bffe17 	ldw	r2,-8(fp)
 8026224:	11000017 	ldw	r4,0(r2)
 8026228:	e0bff817 	ldw	r2,-32(fp)
 802622c:	1085883a 	add	r2,r2,r2
 8026230:	1085883a 	add	r2,r2,r2
 8026234:	2085883a 	add	r2,r4,r2
		if (writing)
			(*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
			(void FAR *) ptr->mem_buffer[i],
			file_offset, byte_count);
		else
			(*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 8026238:	10800017 	ldw	r2,0(r2)
 802623c:	e13ffc17 	ldw	r4,-16(fp)
 8026240:	d9000015 	stw	r4,0(sp)
 8026244:	e13ffd17 	ldw	r4,-12(fp)
 8026248:	180b883a 	mov	r5,r3
 802624c:	100d883a 	mov	r6,r2
 8026250:	e1fff717 	ldw	r7,-36(fp)
 8026254:	403ee83a 	callr	r8
			(void FAR *) ptr->mem_buffer[i],
			file_offset, byte_count);
		file_offset += byte_count;
 8026258:	e0fff717 	ldw	r3,-36(fp)
 802625c:	e0bffc17 	ldw	r2,-16(fp)
 8026260:	1885883a 	add	r2,r3,r2
 8026264:	e0bff715 	stw	r2,-36(fp)
	long bytesperrow, file_offset, byte_count, rows, thisrow, i;

	bytesperrow = (long) ptr->samplesperrow * SIZEOF(JSAMPLE);
	file_offset = ptr->cur_start_row * bytesperrow;
	/* Loop to read or write each allocation chunk in mem_buffer */
	for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8026268:	e0bffe17 	ldw	r2,-8(fp)
 802626c:	10c00517 	ldw	r3,20(r2)
 8026270:	e0bff817 	ldw	r2,-32(fp)
 8026274:	1885883a 	add	r2,r3,r2
 8026278:	e0bff815 	stw	r2,-32(fp)
 802627c:	e0bffe17 	ldw	r2,-8(fp)
 8026280:	10800417 	ldw	r2,16(r2)
 8026284:	e0fff817 	ldw	r3,-32(fp)
 8026288:	18bfa416 	blt	r3,r2,802611c <do_sarray_io+0x50>
 802628c:	00000106 	br	8026294 <do_sarray_io+0x1c8>
		thisrow = (long) ptr->cur_start_row + i;
		rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
		/* Transfer no more than fits in file */
		rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
		if (rows <= 0)		/* this chunk might be past end of file! */
			break;
 8026290:	0001883a 	nop
			(*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
			(void FAR *) ptr->mem_buffer[i],
			file_offset, byte_count);
		file_offset += byte_count;
	}
}
 8026294:	e037883a 	mov	sp,fp
 8026298:	dfc00117 	ldw	ra,4(sp)
 802629c:	df000017 	ldw	fp,0(sp)
 80262a0:	dec00204 	addi	sp,sp,8
 80262a4:	f800283a 	ret

080262a8 <do_barray_io>:


LOCAL(void)
	do_barray_io (j_common_ptr cinfo, jvirt_barray_ptr ptr, boolean writing)
	/* Do backing store read or write of a virtual coefficient-block array */
{
 80262a8:	defff404 	addi	sp,sp,-48
 80262ac:	dfc00b15 	stw	ra,44(sp)
 80262b0:	df000a15 	stw	fp,40(sp)
 80262b4:	df000a04 	addi	fp,sp,40
 80262b8:	e13ffd15 	stw	r4,-12(fp)
 80262bc:	e17ffe15 	stw	r5,-8(fp)
 80262c0:	3005883a 	mov	r2,r6
 80262c4:	e0bfff05 	stb	r2,-4(fp)
	long bytesperrow, file_offset, byte_count, rows, thisrow, i;

	bytesperrow = (long) ptr->blocksperrow * SIZEOF(JBLOCK);
 80262c8:	e0bffe17 	ldw	r2,-8(fp)
 80262cc:	10800217 	ldw	r2,8(r2)
 80262d0:	100491fa 	slli	r2,r2,7
 80262d4:	e0bff915 	stw	r2,-28(fp)
	file_offset = ptr->cur_start_row * bytesperrow;
 80262d8:	e0bffe17 	ldw	r2,-8(fp)
 80262dc:	10c00617 	ldw	r3,24(r2)
 80262e0:	e0bff917 	ldw	r2,-28(fp)
 80262e4:	1809883a 	mov	r4,r3
 80262e8:	100b883a 	mov	r5,r2
 80262ec:	802c2180 	call	802c218 <__mulsi3>
 80262f0:	e0bff715 	stw	r2,-36(fp)
	/* Loop to read or write each allocation chunk in mem_buffer */
	for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80262f4:	e03ff815 	stw	zero,-32(fp)
 80262f8:	00005806 	br	802645c <do_barray_io+0x1b4>
		/* One chunk, but check for short chunk at end of buffer */
		rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 80262fc:	e0bffe17 	ldw	r2,-8(fp)
 8026300:	10800417 	ldw	r2,16(r2)
 8026304:	1007883a 	mov	r3,r2
 8026308:	e0bff817 	ldw	r2,-32(fp)
 802630c:	1885c83a 	sub	r2,r3,r2
 8026310:	e0fffe17 	ldw	r3,-8(fp)
 8026314:	18c00517 	ldw	r3,20(r3)
 8026318:	1880010e 	bge	r3,r2,8026320 <do_barray_io+0x78>
 802631c:	1805883a 	mov	r2,r3
 8026320:	e0bffa15 	stw	r2,-24(fp)
		/* Transfer no more than is currently defined */
		thisrow = (long) ptr->cur_start_row + i;
 8026324:	e0bffe17 	ldw	r2,-8(fp)
 8026328:	10800617 	ldw	r2,24(r2)
 802632c:	1007883a 	mov	r3,r2
 8026330:	e0bff817 	ldw	r2,-32(fp)
 8026334:	1885883a 	add	r2,r3,r2
 8026338:	e0bffb15 	stw	r2,-20(fp)
		rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 802633c:	e0bffe17 	ldw	r2,-8(fp)
 8026340:	10800717 	ldw	r2,28(r2)
 8026344:	1007883a 	mov	r3,r2
 8026348:	e0bffb17 	ldw	r2,-20(fp)
 802634c:	1885c83a 	sub	r2,r3,r2
 8026350:	e0fffa17 	ldw	r3,-24(fp)
 8026354:	1880010e 	bge	r3,r2,802635c <do_barray_io+0xb4>
 8026358:	1805883a 	mov	r2,r3
 802635c:	e0bffa15 	stw	r2,-24(fp)
		/* Transfer no more than fits in file */
		rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 8026360:	e0bffe17 	ldw	r2,-8(fp)
 8026364:	10800117 	ldw	r2,4(r2)
 8026368:	1007883a 	mov	r3,r2
 802636c:	e0bffb17 	ldw	r2,-20(fp)
 8026370:	1885c83a 	sub	r2,r3,r2
 8026374:	e0fffa17 	ldw	r3,-24(fp)
 8026378:	1880010e 	bge	r3,r2,8026380 <do_barray_io+0xd8>
 802637c:	1805883a 	mov	r2,r3
 8026380:	e0bffa15 	stw	r2,-24(fp)
		if (rows <= 0)		/* this chunk might be past end of file! */
 8026384:	e0bffa17 	ldw	r2,-24(fp)
 8026388:	0080390e 	bge	zero,r2,8026470 <do_barray_io+0x1c8>
			break;
		byte_count = rows * bytesperrow;
 802638c:	e13ffa17 	ldw	r4,-24(fp)
 8026390:	e17ff917 	ldw	r5,-28(fp)
 8026394:	802c2180 	call	802c218 <__mulsi3>
 8026398:	e0bffc15 	stw	r2,-16(fp)
		if (writing)
 802639c:	e0bfff03 	ldbu	r2,-4(fp)
 80263a0:	10001326 	beq	r2,zero,80263f0 <do_barray_io+0x148>
			(*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 80263a4:	e0bffe17 	ldw	r2,-8(fp)
 80263a8:	12000b17 	ldw	r8,44(r2)
 80263ac:	e0bffe17 	ldw	r2,-8(fp)
 80263b0:	10c00a04 	addi	r3,r2,40
			(void FAR *) ptr->mem_buffer[i],
 80263b4:	e0bffe17 	ldw	r2,-8(fp)
 80263b8:	11000017 	ldw	r4,0(r2)
 80263bc:	e0bff817 	ldw	r2,-32(fp)
 80263c0:	1085883a 	add	r2,r2,r2
 80263c4:	1085883a 	add	r2,r2,r2
 80263c8:	2085883a 	add	r2,r4,r2
		rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
		if (rows <= 0)		/* this chunk might be past end of file! */
			break;
		byte_count = rows * bytesperrow;
		if (writing)
			(*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 80263cc:	10800017 	ldw	r2,0(r2)
 80263d0:	e13ffc17 	ldw	r4,-16(fp)
 80263d4:	d9000015 	stw	r4,0(sp)
 80263d8:	e13ffd17 	ldw	r4,-12(fp)
 80263dc:	180b883a 	mov	r5,r3
 80263e0:	100d883a 	mov	r6,r2
 80263e4:	e1fff717 	ldw	r7,-36(fp)
 80263e8:	403ee83a 	callr	r8
 80263ec:	00001206 	br	8026438 <do_barray_io+0x190>
			(void FAR *) ptr->mem_buffer[i],
			file_offset, byte_count);
		else
			(*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 80263f0:	e0bffe17 	ldw	r2,-8(fp)
 80263f4:	12000a17 	ldw	r8,40(r2)
 80263f8:	e0bffe17 	ldw	r2,-8(fp)
 80263fc:	10c00a04 	addi	r3,r2,40
			(void FAR *) ptr->mem_buffer[i],
 8026400:	e0bffe17 	ldw	r2,-8(fp)
 8026404:	11000017 	ldw	r4,0(r2)
 8026408:	e0bff817 	ldw	r2,-32(fp)
 802640c:	1085883a 	add	r2,r2,r2
 8026410:	1085883a 	add	r2,r2,r2
 8026414:	2085883a 	add	r2,r4,r2
		if (writing)
			(*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
			(void FAR *) ptr->mem_buffer[i],
			file_offset, byte_count);
		else
			(*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 8026418:	10800017 	ldw	r2,0(r2)
 802641c:	e13ffc17 	ldw	r4,-16(fp)
 8026420:	d9000015 	stw	r4,0(sp)
 8026424:	e13ffd17 	ldw	r4,-12(fp)
 8026428:	180b883a 	mov	r5,r3
 802642c:	100d883a 	mov	r6,r2
 8026430:	e1fff717 	ldw	r7,-36(fp)
 8026434:	403ee83a 	callr	r8
			(void FAR *) ptr->mem_buffer[i],
			file_offset, byte_count);
		file_offset += byte_count;
 8026438:	e0fff717 	ldw	r3,-36(fp)
 802643c:	e0bffc17 	ldw	r2,-16(fp)
 8026440:	1885883a 	add	r2,r3,r2
 8026444:	e0bff715 	stw	r2,-36(fp)
	long bytesperrow, file_offset, byte_count, rows, thisrow, i;

	bytesperrow = (long) ptr->blocksperrow * SIZEOF(JBLOCK);
	file_offset = ptr->cur_start_row * bytesperrow;
	/* Loop to read or write each allocation chunk in mem_buffer */
	for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8026448:	e0bffe17 	ldw	r2,-8(fp)
 802644c:	10c00517 	ldw	r3,20(r2)
 8026450:	e0bff817 	ldw	r2,-32(fp)
 8026454:	1885883a 	add	r2,r3,r2
 8026458:	e0bff815 	stw	r2,-32(fp)
 802645c:	e0bffe17 	ldw	r2,-8(fp)
 8026460:	10800417 	ldw	r2,16(r2)
 8026464:	e0fff817 	ldw	r3,-32(fp)
 8026468:	18bfa416 	blt	r3,r2,80262fc <do_barray_io+0x54>
 802646c:	00000106 	br	8026474 <do_barray_io+0x1cc>
		thisrow = (long) ptr->cur_start_row + i;
		rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
		/* Transfer no more than fits in file */
		rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
		if (rows <= 0)		/* this chunk might be past end of file! */
			break;
 8026470:	0001883a 	nop
			(*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
			(void FAR *) ptr->mem_buffer[i],
			file_offset, byte_count);
		file_offset += byte_count;
	}
}
 8026474:	e037883a 	mov	sp,fp
 8026478:	dfc00117 	ldw	ra,4(sp)
 802647c:	df000017 	ldw	fp,0(sp)
 8026480:	dec00204 	addi	sp,sp,8
 8026484:	f800283a 	ret

08026488 <access_virt_sarray>:
	JDIMENSION start_row, JDIMENSION num_rows,
	boolean writable)
	/* Access the part of a virtual sample array starting at start_row */
	/* and extending for num_rows rows.  writable is true if  */
	/* caller intends to modify the accessed area. */
{
 8026488:	defff504 	addi	sp,sp,-44
 802648c:	dfc00a15 	stw	ra,40(sp)
 8026490:	df000915 	stw	fp,36(sp)
 8026494:	df000904 	addi	fp,sp,36
 8026498:	e13ffb15 	stw	r4,-20(fp)
 802649c:	e17ffc15 	stw	r5,-16(fp)
 80264a0:	e1bffd15 	stw	r6,-12(fp)
 80264a4:	e1fffe15 	stw	r7,-8(fp)
 80264a8:	e0800217 	ldw	r2,8(fp)
 80264ac:	e0bfff05 	stb	r2,-4(fp)
	JDIMENSION end_row = start_row + num_rows;
 80264b0:	e0fffd17 	ldw	r3,-12(fp)
 80264b4:	e0bffe17 	ldw	r2,-8(fp)
 80264b8:	1885883a 	add	r2,r3,r2
 80264bc:	e0bff915 	stw	r2,-28(fp)
	JDIMENSION undef_row;

	/* debugging check */
	if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 80264c0:	e0bffc17 	ldw	r2,-16(fp)
 80264c4:	10c00117 	ldw	r3,4(r2)
 80264c8:	e0bff917 	ldw	r2,-28(fp)
 80264cc:	18800736 	bltu	r3,r2,80264ec <access_virt_sarray+0x64>
 80264d0:	e0bffc17 	ldw	r2,-16(fp)
 80264d4:	10c00317 	ldw	r3,12(r2)
 80264d8:	e0bffe17 	ldw	r2,-8(fp)
 80264dc:	18800336 	bltu	r3,r2,80264ec <access_virt_sarray+0x64>
		ptr->mem_buffer == NULL)
 80264e0:	e0bffc17 	ldw	r2,-16(fp)
 80264e4:	10800017 	ldw	r2,0(r2)
{
	JDIMENSION end_row = start_row + num_rows;
	JDIMENSION undef_row;

	/* debugging check */
	if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 80264e8:	1000091e 	bne	r2,zero,8026510 <access_virt_sarray+0x88>
		ptr->mem_buffer == NULL)
		ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 80264ec:	e0bffb17 	ldw	r2,-20(fp)
 80264f0:	10800017 	ldw	r2,0(r2)
 80264f4:	00c005c4 	movi	r3,23
 80264f8:	10c00515 	stw	r3,20(r2)
 80264fc:	e0bffb17 	ldw	r2,-20(fp)
 8026500:	10800017 	ldw	r2,0(r2)
 8026504:	10800017 	ldw	r2,0(r2)
 8026508:	e13ffb17 	ldw	r4,-20(fp)
 802650c:	103ee83a 	callr	r2

	/* Make the desired part of the virtual array accessible */
	if (start_row < ptr->cur_start_row ||
 8026510:	e0bffc17 	ldw	r2,-16(fp)
 8026514:	10800617 	ldw	r2,24(r2)
 8026518:	e0fffd17 	ldw	r3,-12(fp)
 802651c:	18800736 	bltu	r3,r2,802653c <access_virt_sarray+0xb4>
		end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 8026520:	e0bffc17 	ldw	r2,-16(fp)
 8026524:	10c00617 	ldw	r3,24(r2)
 8026528:	e0bffc17 	ldw	r2,-16(fp)
 802652c:	10800417 	ldw	r2,16(r2)
 8026530:	1887883a 	add	r3,r3,r2
	if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
		ptr->mem_buffer == NULL)
		ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);

	/* Make the desired part of the virtual array accessible */
	if (start_row < ptr->cur_start_row ||
 8026534:	e0bff917 	ldw	r2,-28(fp)
 8026538:	18802e2e 	bgeu	r3,r2,80265f4 <access_virt_sarray+0x16c>
		end_row > ptr->cur_start_row+ptr->rows_in_mem) {
			if (! ptr->b_s_open)
 802653c:	e0bffc17 	ldw	r2,-16(fp)
 8026540:	10800883 	ldbu	r2,34(r2)
 8026544:	10803fcc 	andi	r2,r2,255
 8026548:	1000091e 	bne	r2,zero,8026570 <access_virt_sarray+0xe8>
				ERREXIT(cinfo, JERR_VIRTUAL_BUG);
 802654c:	e0bffb17 	ldw	r2,-20(fp)
 8026550:	10800017 	ldw	r2,0(r2)
 8026554:	00c011c4 	movi	r3,71
 8026558:	10c00515 	stw	r3,20(r2)
 802655c:	e0bffb17 	ldw	r2,-20(fp)
 8026560:	10800017 	ldw	r2,0(r2)
 8026564:	10800017 	ldw	r2,0(r2)
 8026568:	e13ffb17 	ldw	r4,-20(fp)
 802656c:	103ee83a 	callr	r2
			/* Flush old buffer contents if necessary */
			if (ptr->dirty) {
 8026570:	e0bffc17 	ldw	r2,-16(fp)
 8026574:	10800843 	ldbu	r2,33(r2)
 8026578:	10803fcc 	andi	r2,r2,255
 802657c:	10000626 	beq	r2,zero,8026598 <access_virt_sarray+0x110>
				do_sarray_io(cinfo, ptr, TRUE);
 8026580:	e13ffb17 	ldw	r4,-20(fp)
 8026584:	e17ffc17 	ldw	r5,-16(fp)
 8026588:	01800044 	movi	r6,1
 802658c:	80260cc0 	call	80260cc <do_sarray_io>
				ptr->dirty = FALSE;
 8026590:	e0bffc17 	ldw	r2,-16(fp)
 8026594:	10000845 	stb	zero,33(r2)
			* load starting at target address.  If target address < current window,
			* assume backward scan, load so that target area is top of window.
			* Note that when switching from forward write to forward read, will have
			* start_row = 0, so the limiting case applies and we load from 0 anyway.
			*/
			if (start_row > ptr->cur_start_row) {
 8026598:	e0bffc17 	ldw	r2,-16(fp)
 802659c:	10c00617 	ldw	r3,24(r2)
 80265a0:	e0bffd17 	ldw	r2,-12(fp)
 80265a4:	1880042e 	bgeu	r3,r2,80265b8 <access_virt_sarray+0x130>
				ptr->cur_start_row = start_row;
 80265a8:	e0bffc17 	ldw	r2,-16(fp)
 80265ac:	e0fffd17 	ldw	r3,-12(fp)
 80265b0:	10c00615 	stw	r3,24(r2)
 80265b4:	00000b06 	br	80265e4 <access_virt_sarray+0x15c>
			} else {
				/* use long arithmetic here to avoid overflow & unsigned problems */
				long ltemp;

				ltemp = (long) end_row - (long) ptr->rows_in_mem;
 80265b8:	e0fff917 	ldw	r3,-28(fp)
 80265bc:	e0bffc17 	ldw	r2,-16(fp)
 80265c0:	10800417 	ldw	r2,16(r2)
 80265c4:	1885c83a 	sub	r2,r3,r2
 80265c8:	e0bff815 	stw	r2,-32(fp)
				if (ltemp < 0)
 80265cc:	e0bff817 	ldw	r2,-32(fp)
 80265d0:	1000010e 	bge	r2,zero,80265d8 <access_virt_sarray+0x150>
					ltemp = 0;		/* don't fall off front end of file */
 80265d4:	e03ff815 	stw	zero,-32(fp)
				ptr->cur_start_row = (JDIMENSION) ltemp;
 80265d8:	e0fff817 	ldw	r3,-32(fp)
 80265dc:	e0bffc17 	ldw	r2,-16(fp)
 80265e0:	10c00615 	stw	r3,24(r2)
			}
			/* Read in the selected part of the array.
			* During the initial write pass, we will do no actual read
			* because the selected part is all undefined.
			*/
			do_sarray_io(cinfo, ptr, FALSE);
 80265e4:	e13ffb17 	ldw	r4,-20(fp)
 80265e8:	e17ffc17 	ldw	r5,-16(fp)
 80265ec:	000d883a 	mov	r6,zero
 80265f0:	80260cc0 	call	80260cc <do_sarray_io>
	}
	/* Ensure the accessed part of the array is defined; prezero if needed.
	* To improve locality of access, we only prezero the part of the array
	* that the caller is about to access, not the entire in-memory array.
	*/
	if (ptr->first_undef_row < end_row) {
 80265f4:	e0bffc17 	ldw	r2,-16(fp)
 80265f8:	10c00717 	ldw	r3,28(r2)
 80265fc:	e0bff917 	ldw	r2,-28(fp)
 8026600:	1880482e 	bgeu	r3,r2,8026724 <access_virt_sarray+0x29c>
		if (ptr->first_undef_row < start_row) {
 8026604:	e0bffc17 	ldw	r2,-16(fp)
 8026608:	10c00717 	ldw	r3,28(r2)
 802660c:	e0bffd17 	ldw	r2,-12(fp)
 8026610:	18800e2e 	bgeu	r3,r2,802664c <access_virt_sarray+0x1c4>
			if (writable)		/* writer skipped over a section of array */
 8026614:	e0bfff03 	ldbu	r2,-4(fp)
 8026618:	10000926 	beq	r2,zero,8026640 <access_virt_sarray+0x1b8>
				ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 802661c:	e0bffb17 	ldw	r2,-20(fp)
 8026620:	10800017 	ldw	r2,0(r2)
 8026624:	00c005c4 	movi	r3,23
 8026628:	10c00515 	stw	r3,20(r2)
 802662c:	e0bffb17 	ldw	r2,-20(fp)
 8026630:	10800017 	ldw	r2,0(r2)
 8026634:	10800017 	ldw	r2,0(r2)
 8026638:	e13ffb17 	ldw	r4,-20(fp)
 802663c:	103ee83a 	callr	r2
			undef_row = start_row;	/* but reader is allowed to read ahead */
 8026640:	e0bffd17 	ldw	r2,-12(fp)
 8026644:	e0bff715 	stw	r2,-36(fp)
 8026648:	00000306 	br	8026658 <access_virt_sarray+0x1d0>
		} else {
			undef_row = ptr->first_undef_row;
 802664c:	e0bffc17 	ldw	r2,-16(fp)
 8026650:	10800717 	ldw	r2,28(r2)
 8026654:	e0bff715 	stw	r2,-36(fp)
		}
		if (writable)
 8026658:	e0bfff03 	ldbu	r2,-4(fp)
 802665c:	10000326 	beq	r2,zero,802666c <access_virt_sarray+0x1e4>
			ptr->first_undef_row = end_row;
 8026660:	e0bffc17 	ldw	r2,-16(fp)
 8026664:	e0fff917 	ldw	r3,-28(fp)
 8026668:	10c00715 	stw	r3,28(r2)
		if (ptr->pre_zero) {
 802666c:	e0bffc17 	ldw	r2,-16(fp)
 8026670:	10800803 	ldbu	r2,32(r2)
 8026674:	10803fcc 	andi	r2,r2,255
 8026678:	10001f26 	beq	r2,zero,80266f8 <access_virt_sarray+0x270>
			size_t bytesperrow = (size_t) ptr->samplesperrow * SIZEOF(JSAMPLE);
 802667c:	e0bffc17 	ldw	r2,-16(fp)
 8026680:	10800217 	ldw	r2,8(r2)
 8026684:	e0bffa15 	stw	r2,-24(fp)
			undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 8026688:	e0bffc17 	ldw	r2,-16(fp)
 802668c:	10800617 	ldw	r2,24(r2)
 8026690:	e0fff717 	ldw	r3,-36(fp)
 8026694:	1885c83a 	sub	r2,r3,r2
 8026698:	e0bff715 	stw	r2,-36(fp)
			end_row -= ptr->cur_start_row;
 802669c:	e0bffc17 	ldw	r2,-16(fp)
 80266a0:	10800617 	ldw	r2,24(r2)
 80266a4:	e0fff917 	ldw	r3,-28(fp)
 80266a8:	1885c83a 	sub	r2,r3,r2
 80266ac:	e0bff915 	stw	r2,-28(fp)
			while (undef_row < end_row) {
 80266b0:	00000d06 	br	80266e8 <access_virt_sarray+0x260>
				jzero_far((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 80266b4:	e0bffc17 	ldw	r2,-16(fp)
 80266b8:	10c00017 	ldw	r3,0(r2)
 80266bc:	e0bff717 	ldw	r2,-36(fp)
 80266c0:	1085883a 	add	r2,r2,r2
 80266c4:	1085883a 	add	r2,r2,r2
 80266c8:	1885883a 	add	r2,r3,r2
 80266cc:	10800017 	ldw	r2,0(r2)
 80266d0:	1009883a 	mov	r4,r2
 80266d4:	e17ffa17 	ldw	r5,-24(fp)
 80266d8:	802b23c0 	call	802b23c <jzero_far>
				undef_row++;
 80266dc:	e0bff717 	ldw	r2,-36(fp)
 80266e0:	10800044 	addi	r2,r2,1
 80266e4:	e0bff715 	stw	r2,-36(fp)
			ptr->first_undef_row = end_row;
		if (ptr->pre_zero) {
			size_t bytesperrow = (size_t) ptr->samplesperrow * SIZEOF(JSAMPLE);
			undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
			end_row -= ptr->cur_start_row;
			while (undef_row < end_row) {
 80266e8:	e0fff717 	ldw	r3,-36(fp)
 80266ec:	e0bff917 	ldw	r2,-28(fp)
 80266f0:	18bff036 	bltu	r3,r2,80266b4 <access_virt_sarray+0x22c>
 80266f4:	00000b06 	br	8026724 <access_virt_sarray+0x29c>
				jzero_far((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
				undef_row++;
			}
		} else {
			if (! writable)		/* reader looking at undefined data */
 80266f8:	e0bfff03 	ldbu	r2,-4(fp)
 80266fc:	1000091e 	bne	r2,zero,8026724 <access_virt_sarray+0x29c>
				ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8026700:	e0bffb17 	ldw	r2,-20(fp)
 8026704:	10800017 	ldw	r2,0(r2)
 8026708:	00c005c4 	movi	r3,23
 802670c:	10c00515 	stw	r3,20(r2)
 8026710:	e0bffb17 	ldw	r2,-20(fp)
 8026714:	10800017 	ldw	r2,0(r2)
 8026718:	10800017 	ldw	r2,0(r2)
 802671c:	e13ffb17 	ldw	r4,-20(fp)
 8026720:	103ee83a 	callr	r2
		}
	}
	/* Flag the buffer dirty if caller will write in it */
	if (writable)
 8026724:	e0bfff03 	ldbu	r2,-4(fp)
 8026728:	10000326 	beq	r2,zero,8026738 <access_virt_sarray+0x2b0>
		ptr->dirty = TRUE;
 802672c:	e0bffc17 	ldw	r2,-16(fp)
 8026730:	00c00044 	movi	r3,1
 8026734:	10c00845 	stb	r3,33(r2)
	/* Return address of proper part of the buffer */
	return ptr->mem_buffer + (start_row - ptr->cur_start_row);
 8026738:	e0bffc17 	ldw	r2,-16(fp)
 802673c:	10c00017 	ldw	r3,0(r2)
 8026740:	e0bffc17 	ldw	r2,-16(fp)
 8026744:	10800617 	ldw	r2,24(r2)
 8026748:	e13ffd17 	ldw	r4,-12(fp)
 802674c:	2085c83a 	sub	r2,r4,r2
 8026750:	1085883a 	add	r2,r2,r2
 8026754:	1085883a 	add	r2,r2,r2
 8026758:	1885883a 	add	r2,r3,r2
}
 802675c:	e037883a 	mov	sp,fp
 8026760:	dfc00117 	ldw	ra,4(sp)
 8026764:	df000017 	ldw	fp,0(sp)
 8026768:	dec00204 	addi	sp,sp,8
 802676c:	f800283a 	ret

08026770 <access_virt_barray>:
	JDIMENSION start_row, JDIMENSION num_rows,
	boolean writable)
	/* Access the part of a virtual block array starting at start_row */
	/* and extending for num_rows rows.  writable is true if  */
	/* caller intends to modify the accessed area. */
{
 8026770:	defff504 	addi	sp,sp,-44
 8026774:	dfc00a15 	stw	ra,40(sp)
 8026778:	df000915 	stw	fp,36(sp)
 802677c:	df000904 	addi	fp,sp,36
 8026780:	e13ffb15 	stw	r4,-20(fp)
 8026784:	e17ffc15 	stw	r5,-16(fp)
 8026788:	e1bffd15 	stw	r6,-12(fp)
 802678c:	e1fffe15 	stw	r7,-8(fp)
 8026790:	e0800217 	ldw	r2,8(fp)
 8026794:	e0bfff05 	stb	r2,-4(fp)
	JDIMENSION end_row = start_row + num_rows;
 8026798:	e0fffd17 	ldw	r3,-12(fp)
 802679c:	e0bffe17 	ldw	r2,-8(fp)
 80267a0:	1885883a 	add	r2,r3,r2
 80267a4:	e0bff915 	stw	r2,-28(fp)
	JDIMENSION undef_row;

	/* debugging check */
	if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 80267a8:	e0bffc17 	ldw	r2,-16(fp)
 80267ac:	10c00117 	ldw	r3,4(r2)
 80267b0:	e0bff917 	ldw	r2,-28(fp)
 80267b4:	18800736 	bltu	r3,r2,80267d4 <access_virt_barray+0x64>
 80267b8:	e0bffc17 	ldw	r2,-16(fp)
 80267bc:	10c00317 	ldw	r3,12(r2)
 80267c0:	e0bffe17 	ldw	r2,-8(fp)
 80267c4:	18800336 	bltu	r3,r2,80267d4 <access_virt_barray+0x64>
		ptr->mem_buffer == NULL)
 80267c8:	e0bffc17 	ldw	r2,-16(fp)
 80267cc:	10800017 	ldw	r2,0(r2)
{
	JDIMENSION end_row = start_row + num_rows;
	JDIMENSION undef_row;

	/* debugging check */
	if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 80267d0:	1000091e 	bne	r2,zero,80267f8 <access_virt_barray+0x88>
		ptr->mem_buffer == NULL)
		ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 80267d4:	e0bffb17 	ldw	r2,-20(fp)
 80267d8:	10800017 	ldw	r2,0(r2)
 80267dc:	00c005c4 	movi	r3,23
 80267e0:	10c00515 	stw	r3,20(r2)
 80267e4:	e0bffb17 	ldw	r2,-20(fp)
 80267e8:	10800017 	ldw	r2,0(r2)
 80267ec:	10800017 	ldw	r2,0(r2)
 80267f0:	e13ffb17 	ldw	r4,-20(fp)
 80267f4:	103ee83a 	callr	r2

	/* Make the desired part of the virtual array accessible */
	if (start_row < ptr->cur_start_row ||
 80267f8:	e0bffc17 	ldw	r2,-16(fp)
 80267fc:	10800617 	ldw	r2,24(r2)
 8026800:	e0fffd17 	ldw	r3,-12(fp)
 8026804:	18800736 	bltu	r3,r2,8026824 <access_virt_barray+0xb4>
		end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 8026808:	e0bffc17 	ldw	r2,-16(fp)
 802680c:	10c00617 	ldw	r3,24(r2)
 8026810:	e0bffc17 	ldw	r2,-16(fp)
 8026814:	10800417 	ldw	r2,16(r2)
 8026818:	1887883a 	add	r3,r3,r2
	if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
		ptr->mem_buffer == NULL)
		ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);

	/* Make the desired part of the virtual array accessible */
	if (start_row < ptr->cur_start_row ||
 802681c:	e0bff917 	ldw	r2,-28(fp)
 8026820:	18802e2e 	bgeu	r3,r2,80268dc <access_virt_barray+0x16c>
		end_row > ptr->cur_start_row+ptr->rows_in_mem) {
			if (! ptr->b_s_open)
 8026824:	e0bffc17 	ldw	r2,-16(fp)
 8026828:	10800883 	ldbu	r2,34(r2)
 802682c:	10803fcc 	andi	r2,r2,255
 8026830:	1000091e 	bne	r2,zero,8026858 <access_virt_barray+0xe8>
				ERREXIT(cinfo, JERR_VIRTUAL_BUG);
 8026834:	e0bffb17 	ldw	r2,-20(fp)
 8026838:	10800017 	ldw	r2,0(r2)
 802683c:	00c011c4 	movi	r3,71
 8026840:	10c00515 	stw	r3,20(r2)
 8026844:	e0bffb17 	ldw	r2,-20(fp)
 8026848:	10800017 	ldw	r2,0(r2)
 802684c:	10800017 	ldw	r2,0(r2)
 8026850:	e13ffb17 	ldw	r4,-20(fp)
 8026854:	103ee83a 	callr	r2
			/* Flush old buffer contents if necessary */
			if (ptr->dirty) {
 8026858:	e0bffc17 	ldw	r2,-16(fp)
 802685c:	10800843 	ldbu	r2,33(r2)
 8026860:	10803fcc 	andi	r2,r2,255
 8026864:	10000626 	beq	r2,zero,8026880 <access_virt_barray+0x110>
				do_barray_io(cinfo, ptr, TRUE);
 8026868:	e13ffb17 	ldw	r4,-20(fp)
 802686c:	e17ffc17 	ldw	r5,-16(fp)
 8026870:	01800044 	movi	r6,1
 8026874:	80262a80 	call	80262a8 <do_barray_io>
				ptr->dirty = FALSE;
 8026878:	e0bffc17 	ldw	r2,-16(fp)
 802687c:	10000845 	stb	zero,33(r2)
			* load starting at target address.  If target address < current window,
			* assume backward scan, load so that target area is top of window.
			* Note that when switching from forward write to forward read, will have
			* start_row = 0, so the limiting case applies and we load from 0 anyway.
			*/
			if (start_row > ptr->cur_start_row) {
 8026880:	e0bffc17 	ldw	r2,-16(fp)
 8026884:	10c00617 	ldw	r3,24(r2)
 8026888:	e0bffd17 	ldw	r2,-12(fp)
 802688c:	1880042e 	bgeu	r3,r2,80268a0 <access_virt_barray+0x130>
				ptr->cur_start_row = start_row;
 8026890:	e0bffc17 	ldw	r2,-16(fp)
 8026894:	e0fffd17 	ldw	r3,-12(fp)
 8026898:	10c00615 	stw	r3,24(r2)
 802689c:	00000b06 	br	80268cc <access_virt_barray+0x15c>
			} else {
				/* use long arithmetic here to avoid overflow & unsigned problems */
				long ltemp;

				ltemp = (long) end_row - (long) ptr->rows_in_mem;
 80268a0:	e0fff917 	ldw	r3,-28(fp)
 80268a4:	e0bffc17 	ldw	r2,-16(fp)
 80268a8:	10800417 	ldw	r2,16(r2)
 80268ac:	1885c83a 	sub	r2,r3,r2
 80268b0:	e0bff815 	stw	r2,-32(fp)
				if (ltemp < 0)
 80268b4:	e0bff817 	ldw	r2,-32(fp)
 80268b8:	1000010e 	bge	r2,zero,80268c0 <access_virt_barray+0x150>
					ltemp = 0;		/* don't fall off front end of file */
 80268bc:	e03ff815 	stw	zero,-32(fp)
				ptr->cur_start_row = (JDIMENSION) ltemp;
 80268c0:	e0fff817 	ldw	r3,-32(fp)
 80268c4:	e0bffc17 	ldw	r2,-16(fp)
 80268c8:	10c00615 	stw	r3,24(r2)
			}
			/* Read in the selected part of the array.
			* During the initial write pass, we will do no actual read
			* because the selected part is all undefined.
			*/
			do_barray_io(cinfo, ptr, FALSE);
 80268cc:	e13ffb17 	ldw	r4,-20(fp)
 80268d0:	e17ffc17 	ldw	r5,-16(fp)
 80268d4:	000d883a 	mov	r6,zero
 80268d8:	80262a80 	call	80262a8 <do_barray_io>
	}
	/* Ensure the accessed part of the array is defined; prezero if needed.
	* To improve locality of access, we only prezero the part of the array
	* that the caller is about to access, not the entire in-memory array.
	*/
	if (ptr->first_undef_row < end_row) {
 80268dc:	e0bffc17 	ldw	r2,-16(fp)
 80268e0:	10c00717 	ldw	r3,28(r2)
 80268e4:	e0bff917 	ldw	r2,-28(fp)
 80268e8:	1880492e 	bgeu	r3,r2,8026a10 <access_virt_barray+0x2a0>
		if (ptr->first_undef_row < start_row) {
 80268ec:	e0bffc17 	ldw	r2,-16(fp)
 80268f0:	10c00717 	ldw	r3,28(r2)
 80268f4:	e0bffd17 	ldw	r2,-12(fp)
 80268f8:	18800e2e 	bgeu	r3,r2,8026934 <access_virt_barray+0x1c4>
			if (writable)		/* writer skipped over a section of array */
 80268fc:	e0bfff03 	ldbu	r2,-4(fp)
 8026900:	10000926 	beq	r2,zero,8026928 <access_virt_barray+0x1b8>
				ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8026904:	e0bffb17 	ldw	r2,-20(fp)
 8026908:	10800017 	ldw	r2,0(r2)
 802690c:	00c005c4 	movi	r3,23
 8026910:	10c00515 	stw	r3,20(r2)
 8026914:	e0bffb17 	ldw	r2,-20(fp)
 8026918:	10800017 	ldw	r2,0(r2)
 802691c:	10800017 	ldw	r2,0(r2)
 8026920:	e13ffb17 	ldw	r4,-20(fp)
 8026924:	103ee83a 	callr	r2
			undef_row = start_row;	/* but reader is allowed to read ahead */
 8026928:	e0bffd17 	ldw	r2,-12(fp)
 802692c:	e0bff715 	stw	r2,-36(fp)
 8026930:	00000306 	br	8026940 <access_virt_barray+0x1d0>
		} else {
			undef_row = ptr->first_undef_row;
 8026934:	e0bffc17 	ldw	r2,-16(fp)
 8026938:	10800717 	ldw	r2,28(r2)
 802693c:	e0bff715 	stw	r2,-36(fp)
		}
		if (writable)
 8026940:	e0bfff03 	ldbu	r2,-4(fp)
 8026944:	10000326 	beq	r2,zero,8026954 <access_virt_barray+0x1e4>
			ptr->first_undef_row = end_row;
 8026948:	e0bffc17 	ldw	r2,-16(fp)
 802694c:	e0fff917 	ldw	r3,-28(fp)
 8026950:	10c00715 	stw	r3,28(r2)
		if (ptr->pre_zero) {
 8026954:	e0bffc17 	ldw	r2,-16(fp)
 8026958:	10800803 	ldbu	r2,32(r2)
 802695c:	10803fcc 	andi	r2,r2,255
 8026960:	10002026 	beq	r2,zero,80269e4 <access_virt_barray+0x274>
			size_t bytesperrow = (size_t) ptr->blocksperrow * SIZEOF(JBLOCK);
 8026964:	e0bffc17 	ldw	r2,-16(fp)
 8026968:	10800217 	ldw	r2,8(r2)
 802696c:	100491fa 	slli	r2,r2,7
 8026970:	e0bffa15 	stw	r2,-24(fp)
			undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 8026974:	e0bffc17 	ldw	r2,-16(fp)
 8026978:	10800617 	ldw	r2,24(r2)
 802697c:	e0fff717 	ldw	r3,-36(fp)
 8026980:	1885c83a 	sub	r2,r3,r2
 8026984:	e0bff715 	stw	r2,-36(fp)
			end_row -= ptr->cur_start_row;
 8026988:	e0bffc17 	ldw	r2,-16(fp)
 802698c:	10800617 	ldw	r2,24(r2)
 8026990:	e0fff917 	ldw	r3,-28(fp)
 8026994:	1885c83a 	sub	r2,r3,r2
 8026998:	e0bff915 	stw	r2,-28(fp)
			while (undef_row < end_row) {
 802699c:	00000d06 	br	80269d4 <access_virt_barray+0x264>
				jzero_far((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 80269a0:	e0bffc17 	ldw	r2,-16(fp)
 80269a4:	10c00017 	ldw	r3,0(r2)
 80269a8:	e0bff717 	ldw	r2,-36(fp)
 80269ac:	1085883a 	add	r2,r2,r2
 80269b0:	1085883a 	add	r2,r2,r2
 80269b4:	1885883a 	add	r2,r3,r2
 80269b8:	10800017 	ldw	r2,0(r2)
 80269bc:	1009883a 	mov	r4,r2
 80269c0:	e17ffa17 	ldw	r5,-24(fp)
 80269c4:	802b23c0 	call	802b23c <jzero_far>
				undef_row++;
 80269c8:	e0bff717 	ldw	r2,-36(fp)
 80269cc:	10800044 	addi	r2,r2,1
 80269d0:	e0bff715 	stw	r2,-36(fp)
			ptr->first_undef_row = end_row;
		if (ptr->pre_zero) {
			size_t bytesperrow = (size_t) ptr->blocksperrow * SIZEOF(JBLOCK);
			undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
			end_row -= ptr->cur_start_row;
			while (undef_row < end_row) {
 80269d4:	e0fff717 	ldw	r3,-36(fp)
 80269d8:	e0bff917 	ldw	r2,-28(fp)
 80269dc:	18bff036 	bltu	r3,r2,80269a0 <access_virt_barray+0x230>
 80269e0:	00000b06 	br	8026a10 <access_virt_barray+0x2a0>
				jzero_far((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
				undef_row++;
			}
		} else {
			if (! writable)		/* reader looking at undefined data */
 80269e4:	e0bfff03 	ldbu	r2,-4(fp)
 80269e8:	1000091e 	bne	r2,zero,8026a10 <access_virt_barray+0x2a0>
				ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 80269ec:	e0bffb17 	ldw	r2,-20(fp)
 80269f0:	10800017 	ldw	r2,0(r2)
 80269f4:	00c005c4 	movi	r3,23
 80269f8:	10c00515 	stw	r3,20(r2)
 80269fc:	e0bffb17 	ldw	r2,-20(fp)
 8026a00:	10800017 	ldw	r2,0(r2)
 8026a04:	10800017 	ldw	r2,0(r2)
 8026a08:	e13ffb17 	ldw	r4,-20(fp)
 8026a0c:	103ee83a 	callr	r2
		}
	}
	/* Flag the buffer dirty if caller will write in it */
	if (writable)
 8026a10:	e0bfff03 	ldbu	r2,-4(fp)
 8026a14:	10000326 	beq	r2,zero,8026a24 <access_virt_barray+0x2b4>
		ptr->dirty = TRUE;
 8026a18:	e0bffc17 	ldw	r2,-16(fp)
 8026a1c:	00c00044 	movi	r3,1
 8026a20:	10c00845 	stb	r3,33(r2)
	/* Return address of proper part of the buffer */
	return ptr->mem_buffer + (start_row - ptr->cur_start_row);
 8026a24:	e0bffc17 	ldw	r2,-16(fp)
 8026a28:	10c00017 	ldw	r3,0(r2)
 8026a2c:	e0bffc17 	ldw	r2,-16(fp)
 8026a30:	10800617 	ldw	r2,24(r2)
 8026a34:	e13ffd17 	ldw	r4,-12(fp)
 8026a38:	2085c83a 	sub	r2,r4,r2
 8026a3c:	1085883a 	add	r2,r2,r2
 8026a40:	1085883a 	add	r2,r2,r2
 8026a44:	1885883a 	add	r2,r3,r2
}
 8026a48:	e037883a 	mov	sp,fp
 8026a4c:	dfc00117 	ldw	ra,4(sp)
 8026a50:	df000017 	ldw	fp,0(sp)
 8026a54:	dec00204 	addi	sp,sp,8
 8026a58:	f800283a 	ret

08026a5c <free_pool>:
* Release all objects belonging to a specified pool.
*/

METHODDEF(void)
	free_pool (j_common_ptr cinfo, int pool_id)
{
 8026a5c:	defff404 	addi	sp,sp,-48
 8026a60:	dfc00b15 	stw	ra,44(sp)
 8026a64:	df000a15 	stw	fp,40(sp)
 8026a68:	df000a04 	addi	fp,sp,40
 8026a6c:	e13ffe15 	stw	r4,-8(fp)
 8026a70:	e17fff15 	stw	r5,-4(fp)
	my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8026a74:	e0bffe17 	ldw	r2,-8(fp)
 8026a78:	10800117 	ldw	r2,4(r2)
 8026a7c:	e0bffa15 	stw	r2,-24(fp)
	small_pool_ptr shdr_ptr;
	large_pool_ptr lhdr_ptr;
	size_t space_freed;

	if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 8026a80:	e0bfff17 	ldw	r2,-4(fp)
 8026a84:	10000316 	blt	r2,zero,8026a94 <free_pool+0x38>
 8026a88:	e0bfff17 	ldw	r2,-4(fp)
 8026a8c:	10800090 	cmplti	r2,r2,2
 8026a90:	10000d1e 	bne	r2,zero,8026ac8 <free_pool+0x6c>
		ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8026a94:	e0bffe17 	ldw	r2,-8(fp)
 8026a98:	10800017 	ldw	r2,0(r2)
 8026a9c:	00c003c4 	movi	r3,15
 8026aa0:	10c00515 	stw	r3,20(r2)
 8026aa4:	e0bffe17 	ldw	r2,-8(fp)
 8026aa8:	10800017 	ldw	r2,0(r2)
 8026aac:	e0ffff17 	ldw	r3,-4(fp)
 8026ab0:	10c00615 	stw	r3,24(r2)
 8026ab4:	e0bffe17 	ldw	r2,-8(fp)
 8026ab8:	10800017 	ldw	r2,0(r2)
 8026abc:	10800017 	ldw	r2,0(r2)
 8026ac0:	e13ffe17 	ldw	r4,-8(fp)
 8026ac4:	103ee83a 	callr	r2
	if (cinfo->err->trace_level > 1)
		print_mem_stats(cinfo, pool_id); /* print pool's memory usage statistics */
#endif

	/* If freeing IMAGE pool, close any virtual arrays first */
	if (pool_id == JPOOL_IMAGE) {
 8026ac8:	e0bfff17 	ldw	r2,-4(fp)
 8026acc:	10800058 	cmpnei	r2,r2,1
 8026ad0:	1000301e 	bne	r2,zero,8026b94 <free_pool+0x138>
		jvirt_sarray_ptr sptr;
		jvirt_barray_ptr bptr;

		for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8026ad4:	e0bffa17 	ldw	r2,-24(fp)
 8026ad8:	10801117 	ldw	r2,68(r2)
 8026adc:	e0bff815 	stw	r2,-32(fp)
 8026ae0:	00001006 	br	8026b24 <free_pool+0xc8>
			if (sptr->b_s_open) {	/* there may be no backing store */
 8026ae4:	e0bff817 	ldw	r2,-32(fp)
 8026ae8:	10800883 	ldbu	r2,34(r2)
 8026aec:	10803fcc 	andi	r2,r2,255
 8026af0:	10000926 	beq	r2,zero,8026b18 <free_pool+0xbc>
				sptr->b_s_open = FALSE;	/* prevent recursive close if error */
 8026af4:	e0bff817 	ldw	r2,-32(fp)
 8026af8:	10000885 	stb	zero,34(r2)
				(*sptr->b_s_info.close_backing_store) (cinfo, & sptr->b_s_info);
 8026afc:	e0bff817 	ldw	r2,-32(fp)
 8026b00:	10c00c17 	ldw	r3,48(r2)
 8026b04:	e0bff817 	ldw	r2,-32(fp)
 8026b08:	10800a04 	addi	r2,r2,40
 8026b0c:	e13ffe17 	ldw	r4,-8(fp)
 8026b10:	100b883a 	mov	r5,r2
 8026b14:	183ee83a 	callr	r3
	/* If freeing IMAGE pool, close any virtual arrays first */
	if (pool_id == JPOOL_IMAGE) {
		jvirt_sarray_ptr sptr;
		jvirt_barray_ptr bptr;

		for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8026b18:	e0bff817 	ldw	r2,-32(fp)
 8026b1c:	10800917 	ldw	r2,36(r2)
 8026b20:	e0bff815 	stw	r2,-32(fp)
 8026b24:	e0bff817 	ldw	r2,-32(fp)
 8026b28:	103fee1e 	bne	r2,zero,8026ae4 <free_pool+0x88>
			if (sptr->b_s_open) {	/* there may be no backing store */
				sptr->b_s_open = FALSE;	/* prevent recursive close if error */
				(*sptr->b_s_info.close_backing_store) (cinfo, & sptr->b_s_info);
			}
		}
		mem->virt_sarray_list = NULL;
 8026b2c:	e0bffa17 	ldw	r2,-24(fp)
 8026b30:	10001115 	stw	zero,68(r2)
		for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8026b34:	e0bffa17 	ldw	r2,-24(fp)
 8026b38:	10801217 	ldw	r2,72(r2)
 8026b3c:	e0bff915 	stw	r2,-28(fp)
 8026b40:	00001006 	br	8026b84 <free_pool+0x128>
			if (bptr->b_s_open) {	/* there may be no backing store */
 8026b44:	e0bff917 	ldw	r2,-28(fp)
 8026b48:	10800883 	ldbu	r2,34(r2)
 8026b4c:	10803fcc 	andi	r2,r2,255
 8026b50:	10000926 	beq	r2,zero,8026b78 <free_pool+0x11c>
				bptr->b_s_open = FALSE;	/* prevent recursive close if error */
 8026b54:	e0bff917 	ldw	r2,-28(fp)
 8026b58:	10000885 	stb	zero,34(r2)
				(*bptr->b_s_info.close_backing_store) (cinfo, & bptr->b_s_info);
 8026b5c:	e0bff917 	ldw	r2,-28(fp)
 8026b60:	10c00c17 	ldw	r3,48(r2)
 8026b64:	e0bff917 	ldw	r2,-28(fp)
 8026b68:	10800a04 	addi	r2,r2,40
 8026b6c:	e13ffe17 	ldw	r4,-8(fp)
 8026b70:	100b883a 	mov	r5,r2
 8026b74:	183ee83a 	callr	r3
				sptr->b_s_open = FALSE;	/* prevent recursive close if error */
				(*sptr->b_s_info.close_backing_store) (cinfo, & sptr->b_s_info);
			}
		}
		mem->virt_sarray_list = NULL;
		for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8026b78:	e0bff917 	ldw	r2,-28(fp)
 8026b7c:	10800917 	ldw	r2,36(r2)
 8026b80:	e0bff915 	stw	r2,-28(fp)
 8026b84:	e0bff917 	ldw	r2,-28(fp)
 8026b88:	103fee1e 	bne	r2,zero,8026b44 <free_pool+0xe8>
			if (bptr->b_s_open) {	/* there may be no backing store */
				bptr->b_s_open = FALSE;	/* prevent recursive close if error */
				(*bptr->b_s_info.close_backing_store) (cinfo, & bptr->b_s_info);
			}
		}
		mem->virt_barray_list = NULL;
 8026b8c:	e0bffa17 	ldw	r2,-24(fp)
 8026b90:	10001215 	stw	zero,72(r2)
	}

	/* Release large objects */
	lhdr_ptr = mem->large_list[pool_id];
 8026b94:	e0fffa17 	ldw	r3,-24(fp)
 8026b98:	e0bfff17 	ldw	r2,-4(fp)
 8026b9c:	108003c4 	addi	r2,r2,15
 8026ba0:	1085883a 	add	r2,r2,r2
 8026ba4:	1085883a 	add	r2,r2,r2
 8026ba8:	1885883a 	add	r2,r3,r2
 8026bac:	10800017 	ldw	r2,0(r2)
 8026bb0:	e0bff715 	stw	r2,-36(fp)
	mem->large_list[pool_id] = NULL;
 8026bb4:	e0fffa17 	ldw	r3,-24(fp)
 8026bb8:	e0bfff17 	ldw	r2,-4(fp)
 8026bbc:	108003c4 	addi	r2,r2,15
 8026bc0:	1085883a 	add	r2,r2,r2
 8026bc4:	1085883a 	add	r2,r2,r2
 8026bc8:	1885883a 	add	r2,r3,r2
 8026bcc:	10000015 	stw	zero,0(r2)

	while (lhdr_ptr != NULL) {
 8026bd0:	00001806 	br	8026c34 <free_pool+0x1d8>
		large_pool_ptr next_lhdr_ptr = lhdr_ptr->hdr.next;
 8026bd4:	e0bff717 	ldw	r2,-36(fp)
 8026bd8:	10800017 	ldw	r2,0(r2)
 8026bdc:	e0bffb15 	stw	r2,-20(fp)
		space_freed = lhdr_ptr->hdr.bytes_used +
 8026be0:	e0bff717 	ldw	r2,-36(fp)
 8026be4:	10c00117 	ldw	r3,4(r2)
			lhdr_ptr->hdr.bytes_left +
 8026be8:	e0bff717 	ldw	r2,-36(fp)
 8026bec:	10800217 	ldw	r2,8(r2)
	lhdr_ptr = mem->large_list[pool_id];
	mem->large_list[pool_id] = NULL;

	while (lhdr_ptr != NULL) {
		large_pool_ptr next_lhdr_ptr = lhdr_ptr->hdr.next;
		space_freed = lhdr_ptr->hdr.bytes_used +
 8026bf0:	1885883a 	add	r2,r3,r2
 8026bf4:	10800304 	addi	r2,r2,12
 8026bf8:	e0bffc15 	stw	r2,-16(fp)
			lhdr_ptr->hdr.bytes_left +
			SIZEOF(large_pool_hdr);
		jpeg_free_large(cinfo, (void FAR *) lhdr_ptr, space_freed);
 8026bfc:	e13ffe17 	ldw	r4,-8(fp)
 8026c00:	e17ff717 	ldw	r5,-36(fp)
 8026c04:	e1bffc17 	ldw	r6,-16(fp)
 8026c08:	8024fb00 	call	8024fb0 <jpeg_free_large>
		mem->total_space_allocated -= space_freed;
 8026c0c:	e0bffa17 	ldw	r2,-24(fp)
 8026c10:	10801317 	ldw	r2,76(r2)
 8026c14:	1007883a 	mov	r3,r2
 8026c18:	e0bffc17 	ldw	r2,-16(fp)
 8026c1c:	1885c83a 	sub	r2,r3,r2
 8026c20:	1007883a 	mov	r3,r2
 8026c24:	e0bffa17 	ldw	r2,-24(fp)
 8026c28:	10c01315 	stw	r3,76(r2)
		lhdr_ptr = next_lhdr_ptr;
 8026c2c:	e0bffb17 	ldw	r2,-20(fp)
 8026c30:	e0bff715 	stw	r2,-36(fp)

	/* Release large objects */
	lhdr_ptr = mem->large_list[pool_id];
	mem->large_list[pool_id] = NULL;

	while (lhdr_ptr != NULL) {
 8026c34:	e0bff717 	ldw	r2,-36(fp)
 8026c38:	103fe61e 	bne	r2,zero,8026bd4 <free_pool+0x178>
		mem->total_space_allocated -= space_freed;
		lhdr_ptr = next_lhdr_ptr;
	}

	/* Release small objects */
	shdr_ptr = mem->small_list[pool_id];
 8026c3c:	e0fffa17 	ldw	r3,-24(fp)
 8026c40:	e0bfff17 	ldw	r2,-4(fp)
 8026c44:	10800344 	addi	r2,r2,13
 8026c48:	1085883a 	add	r2,r2,r2
 8026c4c:	1085883a 	add	r2,r2,r2
 8026c50:	1885883a 	add	r2,r3,r2
 8026c54:	10800017 	ldw	r2,0(r2)
 8026c58:	e0bff615 	stw	r2,-40(fp)
	mem->small_list[pool_id] = NULL;
 8026c5c:	e0fffa17 	ldw	r3,-24(fp)
 8026c60:	e0bfff17 	ldw	r2,-4(fp)
 8026c64:	10800344 	addi	r2,r2,13
 8026c68:	1085883a 	add	r2,r2,r2
 8026c6c:	1085883a 	add	r2,r2,r2
 8026c70:	1885883a 	add	r2,r3,r2
 8026c74:	10000015 	stw	zero,0(r2)

	while (shdr_ptr != NULL) {
 8026c78:	00001806 	br	8026cdc <free_pool+0x280>
		small_pool_ptr next_shdr_ptr = shdr_ptr->hdr.next;
 8026c7c:	e0bff617 	ldw	r2,-40(fp)
 8026c80:	10800017 	ldw	r2,0(r2)
 8026c84:	e0bffd15 	stw	r2,-12(fp)
		space_freed = shdr_ptr->hdr.bytes_used +
 8026c88:	e0bff617 	ldw	r2,-40(fp)
 8026c8c:	10c00117 	ldw	r3,4(r2)
			shdr_ptr->hdr.bytes_left +
 8026c90:	e0bff617 	ldw	r2,-40(fp)
 8026c94:	10800217 	ldw	r2,8(r2)
	shdr_ptr = mem->small_list[pool_id];
	mem->small_list[pool_id] = NULL;

	while (shdr_ptr != NULL) {
		small_pool_ptr next_shdr_ptr = shdr_ptr->hdr.next;
		space_freed = shdr_ptr->hdr.bytes_used +
 8026c98:	1885883a 	add	r2,r3,r2
 8026c9c:	10800304 	addi	r2,r2,12
 8026ca0:	e0bffc15 	stw	r2,-16(fp)
			shdr_ptr->hdr.bytes_left +
			SIZEOF(small_pool_hdr);
		jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
 8026ca4:	e13ffe17 	ldw	r4,-8(fp)
 8026ca8:	e17ff617 	ldw	r5,-40(fp)
 8026cac:	e1bffc17 	ldw	r6,-16(fp)
 8026cb0:	8024f440 	call	8024f44 <jpeg_free_small>
		mem->total_space_allocated -= space_freed;
 8026cb4:	e0bffa17 	ldw	r2,-24(fp)
 8026cb8:	10801317 	ldw	r2,76(r2)
 8026cbc:	1007883a 	mov	r3,r2
 8026cc0:	e0bffc17 	ldw	r2,-16(fp)
 8026cc4:	1885c83a 	sub	r2,r3,r2
 8026cc8:	1007883a 	mov	r3,r2
 8026ccc:	e0bffa17 	ldw	r2,-24(fp)
 8026cd0:	10c01315 	stw	r3,76(r2)
		shdr_ptr = next_shdr_ptr;
 8026cd4:	e0bffd17 	ldw	r2,-12(fp)
 8026cd8:	e0bff615 	stw	r2,-40(fp)

	/* Release small objects */
	shdr_ptr = mem->small_list[pool_id];
	mem->small_list[pool_id] = NULL;

	while (shdr_ptr != NULL) {
 8026cdc:	e0bff617 	ldw	r2,-40(fp)
 8026ce0:	103fe61e 	bne	r2,zero,8026c7c <free_pool+0x220>
			SIZEOF(small_pool_hdr);
		jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
		mem->total_space_allocated -= space_freed;
		shdr_ptr = next_shdr_ptr;
	}
}
 8026ce4:	e037883a 	mov	sp,fp
 8026ce8:	dfc00117 	ldw	ra,4(sp)
 8026cec:	df000017 	ldw	fp,0(sp)
 8026cf0:	dec00204 	addi	sp,sp,8
 8026cf4:	f800283a 	ret

08026cf8 <self_destruct>:
* Note that this cannot be called unless cinfo->mem is non-NULL.
*/

METHODDEF(void)
	self_destruct (j_common_ptr cinfo)
{
 8026cf8:	defffc04 	addi	sp,sp,-16
 8026cfc:	dfc00315 	stw	ra,12(sp)
 8026d00:	df000215 	stw	fp,8(sp)
 8026d04:	df000204 	addi	fp,sp,8
 8026d08:	e13fff15 	stw	r4,-4(fp)

	/* Close all backing store, release all memory.
	* Releasing pools in reverse order might help avoid fragmentation
	* with some (brain-damaged) malloc libraries.
	*/
	for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
 8026d0c:	00800044 	movi	r2,1
 8026d10:	e0bffe15 	stw	r2,-8(fp)
 8026d14:	00000606 	br	8026d30 <self_destruct+0x38>
		free_pool(cinfo, pool);
 8026d18:	e13fff17 	ldw	r4,-4(fp)
 8026d1c:	e17ffe17 	ldw	r5,-8(fp)
 8026d20:	8026a5c0 	call	8026a5c <free_pool>

	/* Close all backing store, release all memory.
	* Releasing pools in reverse order might help avoid fragmentation
	* with some (brain-damaged) malloc libraries.
	*/
	for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
 8026d24:	e0bffe17 	ldw	r2,-8(fp)
 8026d28:	10bfffc4 	addi	r2,r2,-1
 8026d2c:	e0bffe15 	stw	r2,-8(fp)
 8026d30:	e0bffe17 	ldw	r2,-8(fp)
 8026d34:	103ff80e 	bge	r2,zero,8026d18 <self_destruct+0x20>
		free_pool(cinfo, pool);
	}

	/* Release the memory manager control block too. */
	jpeg_free_small(cinfo, (void *) cinfo->mem, SIZEOF(my_memory_mgr));
 8026d38:	e0bfff17 	ldw	r2,-4(fp)
 8026d3c:	10800117 	ldw	r2,4(r2)
 8026d40:	e13fff17 	ldw	r4,-4(fp)
 8026d44:	100b883a 	mov	r5,r2
 8026d48:	01801504 	movi	r6,84
 8026d4c:	8024f440 	call	8024f44 <jpeg_free_small>
	cinfo->mem = NULL;		/* ensures I will be called only once */
 8026d50:	e0bfff17 	ldw	r2,-4(fp)
 8026d54:	10000115 	stw	zero,4(r2)

	jpeg_mem_term(cinfo);		/* system-dependent cleanup */
 8026d58:	e13fff17 	ldw	r4,-4(fp)
 8026d5c:	80252c80 	call	80252c8 <jpeg_mem_term>
}
 8026d60:	e037883a 	mov	sp,fp
 8026d64:	dfc00117 	ldw	ra,4(sp)
 8026d68:	df000017 	ldw	fp,0(sp)
 8026d6c:	dec00204 	addi	sp,sp,8
 8026d70:	f800283a 	ret

08026d74 <jinit_memory_mgr>:
* When this is called, only the error manager pointer is valid in cinfo!
*/

GLOBAL(void)
	jinit_memory_mgr (j_common_ptr cinfo)
{
 8026d74:	defff704 	addi	sp,sp,-36
 8026d78:	dfc00815 	stw	ra,32(sp)
 8026d7c:	df000715 	stw	fp,28(sp)
 8026d80:	df000704 	addi	fp,sp,28
 8026d84:	e13fff15 	stw	r4,-4(fp)
	my_mem_ptr mem;
	long max_to_use;
	int pool;
	size_t test_mac;

	cinfo->mem = NULL;		/* for safety if init fails */
 8026d88:	e0bfff17 	ldw	r2,-4(fp)
 8026d8c:	10000115 	stw	zero,4(r2)
	/* MAX_ALLOC_CHUNK must be representable as type size_t, and must be
	* a multiple of SIZEOF(ALIGN_TYPE).
	* Again, an "unreachable code" warning may be ignored here.
	* But a "constant too large" warning means you need to fix MAX_ALLOC_CHUNK.
	*/
	test_mac = (size_t) MAX_ALLOC_CHUNK;
 8026d90:	008ee6f4 	movhi	r2,15259
 8026d94:	10b28004 	addi	r2,r2,-13824
 8026d98:	e0bffa15 	stw	r2,-24(fp)
	if ((long) test_mac != MAX_ALLOC_CHUNK ||
 8026d9c:	e0fffa17 	ldw	r3,-24(fp)
 8026da0:	008ee6f4 	movhi	r2,15259
 8026da4:	10b28004 	addi	r2,r2,-13824
 8026da8:	18800926 	beq	r3,r2,8026dd0 <jinit_memory_mgr+0x5c>
		(MAX_ALLOC_CHUNK % SIZEOF(ALIGN_TYPE)) != 0)
		ERREXIT(cinfo, JERR_BAD_ALLOC_CHUNK);
 8026dac:	e0bfff17 	ldw	r2,-4(fp)
 8026db0:	10800017 	ldw	r2,0(r2)
 8026db4:	00c00084 	movi	r3,2
 8026db8:	10c00515 	stw	r3,20(r2)
 8026dbc:	e0bfff17 	ldw	r2,-4(fp)
 8026dc0:	10800017 	ldw	r2,0(r2)
 8026dc4:	10800017 	ldw	r2,0(r2)
 8026dc8:	e13fff17 	ldw	r4,-4(fp)
 8026dcc:	103ee83a 	callr	r2

	max_to_use = jpeg_mem_init(cinfo); /* system-dependent initialization */
 8026dd0:	e13fff17 	ldw	r4,-4(fp)
 8026dd4:	80252a00 	call	80252a0 <jpeg_mem_init>
 8026dd8:	e0bffd15 	stw	r2,-12(fp)

	/* Attempt to allocate memory manager's control block */
	mem = (my_mem_ptr) jpeg_get_small(cinfo, SIZEOF(my_memory_mgr));
 8026ddc:	e13fff17 	ldw	r4,-4(fp)
 8026de0:	01401504 	movi	r5,84
 8026de4:	8024f100 	call	8024f10 <jpeg_get_small>
 8026de8:	e0bffb15 	stw	r2,-20(fp)

	if (mem == NULL) {
 8026dec:	e0bffb17 	ldw	r2,-20(fp)
 8026df0:	10000e1e 	bne	r2,zero,8026e2c <jinit_memory_mgr+0xb8>
		jpeg_mem_term(cinfo);	/* system-dependent cleanup */
 8026df4:	e13fff17 	ldw	r4,-4(fp)
 8026df8:	80252c80 	call	80252c8 <jpeg_mem_term>
		ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, 0);
 8026dfc:	e0bfff17 	ldw	r2,-4(fp)
 8026e00:	10800017 	ldw	r2,0(r2)
 8026e04:	00c00e04 	movi	r3,56
 8026e08:	10c00515 	stw	r3,20(r2)
 8026e0c:	e0bfff17 	ldw	r2,-4(fp)
 8026e10:	10800017 	ldw	r2,0(r2)
 8026e14:	10000615 	stw	zero,24(r2)
 8026e18:	e0bfff17 	ldw	r2,-4(fp)
 8026e1c:	10800017 	ldw	r2,0(r2)
 8026e20:	10800017 	ldw	r2,0(r2)
 8026e24:	e13fff17 	ldw	r4,-4(fp)
 8026e28:	103ee83a 	callr	r2
	}

	/* OK, fill in the method pointers */
	mem->pub.alloc_small = alloc_small;
 8026e2c:	e0bffb17 	ldw	r2,-20(fp)
 8026e30:	00c200b4 	movhi	r3,2050
 8026e34:	18d4d204 	addi	r3,r3,21320
 8026e38:	10c00015 	stw	r3,0(r2)
	mem->pub.alloc_large = alloc_large;
 8026e3c:	e0bffb17 	ldw	r2,-20(fp)
 8026e40:	00c200b4 	movhi	r3,2050
 8026e44:	18d58804 	addi	r3,r3,22048
 8026e48:	10c00115 	stw	r3,4(r2)
	mem->pub.alloc_sarray = alloc_sarray;
 8026e4c:	e0bffb17 	ldw	r2,-20(fp)
 8026e50:	00c200b4 	movhi	r3,2050
 8026e54:	18d5e604 	addi	r3,r3,22424
 8026e58:	10c00215 	stw	r3,8(r2)
	mem->pub.alloc_barray = alloc_barray;
 8026e5c:	e0bffb17 	ldw	r2,-20(fp)
 8026e60:	00c200b4 	movhi	r3,2050
 8026e64:	18d64404 	addi	r3,r3,22800
 8026e68:	10c00315 	stw	r3,12(r2)
	mem->pub.request_virt_sarray = request_virt_sarray;
 8026e6c:	e0bffb17 	ldw	r2,-20(fp)
 8026e70:	00c200b4 	movhi	r3,2050
 8026e74:	18d6a604 	addi	r3,r3,23192
 8026e78:	10c00415 	stw	r3,16(r2)
	mem->pub.request_virt_barray = request_virt_barray;
 8026e7c:	e0bffb17 	ldw	r2,-20(fp)
 8026e80:	00c200b4 	movhi	r3,2050
 8026e84:	18d6e404 	addi	r3,r3,23440
 8026e88:	10c00515 	stw	r3,20(r2)
	mem->pub.realize_virt_arrays = realize_virt_arrays;
 8026e8c:	e0bffb17 	ldw	r2,-20(fp)
 8026e90:	00c200b4 	movhi	r3,2050
 8026e94:	18d72204 	addi	r3,r3,23688
 8026e98:	10c00615 	stw	r3,24(r2)
	mem->pub.access_virt_sarray = access_virt_sarray;
 8026e9c:	e0bffb17 	ldw	r2,-20(fp)
 8026ea0:	00c200b4 	movhi	r3,2050
 8026ea4:	18d92204 	addi	r3,r3,25736
 8026ea8:	10c00715 	stw	r3,28(r2)
	mem->pub.access_virt_barray = access_virt_barray;
 8026eac:	e0bffb17 	ldw	r2,-20(fp)
 8026eb0:	00c200b4 	movhi	r3,2050
 8026eb4:	18d9dc04 	addi	r3,r3,26480
 8026eb8:	10c00815 	stw	r3,32(r2)
	mem->pub.free_pool = free_pool;
 8026ebc:	e0bffb17 	ldw	r2,-20(fp)
 8026ec0:	00c200b4 	movhi	r3,2050
 8026ec4:	18da9704 	addi	r3,r3,27228
 8026ec8:	10c00915 	stw	r3,36(r2)
	mem->pub.self_destruct = self_destruct;
 8026ecc:	e0bffb17 	ldw	r2,-20(fp)
 8026ed0:	00c200b4 	movhi	r3,2050
 8026ed4:	18db3e04 	addi	r3,r3,27896
 8026ed8:	10c00a15 	stw	r3,40(r2)

	/* Make MAX_ALLOC_CHUNK accessible to other modules */
	mem->pub.max_alloc_chunk = MAX_ALLOC_CHUNK;
 8026edc:	e0bffb17 	ldw	r2,-20(fp)
 8026ee0:	00cee6f4 	movhi	r3,15259
 8026ee4:	18f28004 	addi	r3,r3,-13824
 8026ee8:	10c00c15 	stw	r3,48(r2)

	/* Initialize working state */
	mem->pub.max_memory_to_use = max_to_use;
 8026eec:	e0fffd17 	ldw	r3,-12(fp)
 8026ef0:	e0bffb17 	ldw	r2,-20(fp)
 8026ef4:	10c00b15 	stw	r3,44(r2)

	for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
 8026ef8:	00800044 	movi	r2,1
 8026efc:	e0bff915 	stw	r2,-28(fp)
 8026f00:	00001106 	br	8026f48 <jinit_memory_mgr+0x1d4>
		mem->small_list[pool] = NULL;
 8026f04:	e0fffb17 	ldw	r3,-20(fp)
 8026f08:	e0bff917 	ldw	r2,-28(fp)
 8026f0c:	10800344 	addi	r2,r2,13
 8026f10:	1085883a 	add	r2,r2,r2
 8026f14:	1085883a 	add	r2,r2,r2
 8026f18:	1885883a 	add	r2,r3,r2
 8026f1c:	10000015 	stw	zero,0(r2)
		mem->large_list[pool] = NULL;
 8026f20:	e0fffb17 	ldw	r3,-20(fp)
 8026f24:	e0bff917 	ldw	r2,-28(fp)
 8026f28:	108003c4 	addi	r2,r2,15
 8026f2c:	1085883a 	add	r2,r2,r2
 8026f30:	1085883a 	add	r2,r2,r2
 8026f34:	1885883a 	add	r2,r3,r2
 8026f38:	10000015 	stw	zero,0(r2)
	mem->pub.max_alloc_chunk = MAX_ALLOC_CHUNK;

	/* Initialize working state */
	mem->pub.max_memory_to_use = max_to_use;

	for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
 8026f3c:	e0bff917 	ldw	r2,-28(fp)
 8026f40:	10bfffc4 	addi	r2,r2,-1
 8026f44:	e0bff915 	stw	r2,-28(fp)
 8026f48:	e0bff917 	ldw	r2,-28(fp)
 8026f4c:	103fed0e 	bge	r2,zero,8026f04 <jinit_memory_mgr+0x190>
		mem->small_list[pool] = NULL;
		mem->large_list[pool] = NULL;
	}
	mem->virt_sarray_list = NULL;
 8026f50:	e0bffb17 	ldw	r2,-20(fp)
 8026f54:	10001115 	stw	zero,68(r2)
	mem->virt_barray_list = NULL;
 8026f58:	e0bffb17 	ldw	r2,-20(fp)
 8026f5c:	10001215 	stw	zero,72(r2)

	mem->total_space_allocated = SIZEOF(my_memory_mgr);
 8026f60:	e0bffb17 	ldw	r2,-20(fp)
 8026f64:	00c01504 	movi	r3,84
 8026f68:	10c01315 	stw	r3,76(r2)

	/* Declare ourselves open for business */
	cinfo->mem = & mem->pub;
 8026f6c:	e0fffb17 	ldw	r3,-20(fp)
 8026f70:	e0bfff17 	ldw	r2,-4(fp)
 8026f74:	10c00115 	stw	r3,4(r2)
	* this feature.
	*/
#ifndef NO_GETENV
	{ char * memenv;

	if ((memenv = getenv("JPEGMEM")) != NULL) {
 8026f78:	01020134 	movhi	r4,2052
 8026f7c:	21027c04 	addi	r4,r4,2544
 8026f80:	802e1080 	call	802e108 <getenv>
 8026f84:	e0bffc15 	stw	r2,-16(fp)
 8026f88:	e0bffc17 	ldw	r2,-16(fp)
 8026f8c:	10002326 	beq	r2,zero,802701c <jinit_memory_mgr+0x2a8>
		char ch = 'x';
 8026f90:	00801e04 	movi	r2,120
 8026f94:	e0bffe05 	stb	r2,-8(fp)

		if (sscanf(memenv, "%ld%c", &max_to_use, &ch) > 0) {
 8026f98:	e0fffd04 	addi	r3,fp,-12
 8026f9c:	e0bffe04 	addi	r2,fp,-8
 8026fa0:	e13ffc17 	ldw	r4,-16(fp)
 8026fa4:	01420134 	movhi	r5,2052
 8026fa8:	29427e04 	addi	r5,r5,2552
 8026fac:	180d883a 	mov	r6,r3
 8026fb0:	100f883a 	mov	r7,r2
 8026fb4:	802f3280 	call	802f328 <sscanf>
 8026fb8:	0080180e 	bge	zero,r2,802701c <jinit_memory_mgr+0x2a8>
			if (ch == 'm' || ch == 'M')
 8026fbc:	e0bffe03 	ldbu	r2,-8(fp)
 8026fc0:	10803fcc 	andi	r2,r2,255
 8026fc4:	1080201c 	xori	r2,r2,128
 8026fc8:	10bfe004 	addi	r2,r2,-128
 8026fcc:	10801b60 	cmpeqi	r2,r2,109
 8026fd0:	1000061e 	bne	r2,zero,8026fec <jinit_memory_mgr+0x278>
 8026fd4:	e0bffe03 	ldbu	r2,-8(fp)
 8026fd8:	10803fcc 	andi	r2,r2,255
 8026fdc:	1080201c 	xori	r2,r2,128
 8026fe0:	10bfe004 	addi	r2,r2,-128
 8026fe4:	10801358 	cmpnei	r2,r2,77
 8026fe8:	1000051e 	bne	r2,zero,8027000 <jinit_memory_mgr+0x28c>
				max_to_use *= 1000L;
 8026fec:	e0bffd17 	ldw	r2,-12(fp)
 8026ff0:	1009883a 	mov	r4,r2
 8026ff4:	0140fa04 	movi	r5,1000
 8026ff8:	802c2180 	call	802c218 <__mulsi3>
 8026ffc:	e0bffd15 	stw	r2,-12(fp)
			mem->pub.max_memory_to_use = max_to_use * 1000L;
 8027000:	e0bffd17 	ldw	r2,-12(fp)
 8027004:	1009883a 	mov	r4,r2
 8027008:	0140fa04 	movi	r5,1000
 802700c:	802c2180 	call	802c218 <__mulsi3>
 8027010:	1007883a 	mov	r3,r2
 8027014:	e0bffb17 	ldw	r2,-20(fp)
 8027018:	10c00b15 	stw	r3,44(r2)
		}
	}
	}
#endif

}
 802701c:	e037883a 	mov	sp,fp
 8027020:	dfc00117 	ldw	ra,4(sp)
 8027024:	df000017 	ldw	fp,0(sp)
 8027028:	dec00204 	addi	sp,sp,8
 802702c:	f800283a 	ret

08027030 <select_ncolors>:
LOCAL(int)
	select_ncolors (j_decompress_ptr cinfo, int Ncolors[])
	/* Determine allocation of desired colors to components, */
	/* and fill in Ncolors[] array to indicate choice. */
	/* Return value is total number of colors (product of Ncolors[] values). */
{
 8027030:	defff404 	addi	sp,sp,-48
 8027034:	dfc00b15 	stw	ra,44(sp)
 8027038:	df000a15 	stw	fp,40(sp)
 802703c:	df000a04 	addi	fp,sp,40
 8027040:	e13ffe15 	stw	r4,-8(fp)
 8027044:	e17fff15 	stw	r5,-4(fp)
	int nc = cinfo->out_color_components; /* number of color components */
 8027048:	e0bffe17 	ldw	r2,-8(fp)
 802704c:	10801917 	ldw	r2,100(r2)
 8027050:	e0bffb15 	stw	r2,-20(fp)
	int max_colors = cinfo->desired_number_of_colors;
 8027054:	e0bffe17 	ldw	r2,-8(fp)
 8027058:	10801517 	ldw	r2,84(r2)
 802705c:	e0bffc15 	stw	r2,-16(fp)
	long temp;
	static const int RGB_order[3] = { RGB_GREEN, RGB_RED, RGB_BLUE };

	/* We can allocate at least the nc'th root of max_colors per component. */
	/* Compute floor(nc'th root of max_colors). */
	iroot = 1;
 8027060:	00800044 	movi	r2,1
 8027064:	e0bff715 	stw	r2,-36(fp)
	do {
		iroot++;
 8027068:	e0bff717 	ldw	r2,-36(fp)
 802706c:	10800044 	addi	r2,r2,1
 8027070:	e0bff715 	stw	r2,-36(fp)
		temp = iroot;		/* set temp = iroot ** nc */
 8027074:	e0bff717 	ldw	r2,-36(fp)
 8027078:	e0bffa15 	stw	r2,-24(fp)
		for (i = 1; i < nc; i++)
 802707c:	00800044 	movi	r2,1
 8027080:	e0bff815 	stw	r2,-32(fp)
 8027084:	00000706 	br	80270a4 <select_ncolors+0x74>
			temp *= iroot;
 8027088:	e13ffa17 	ldw	r4,-24(fp)
 802708c:	e17ff717 	ldw	r5,-36(fp)
 8027090:	802c2180 	call	802c218 <__mulsi3>
 8027094:	e0bffa15 	stw	r2,-24(fp)
	/* Compute floor(nc'th root of max_colors). */
	iroot = 1;
	do {
		iroot++;
		temp = iroot;		/* set temp = iroot ** nc */
		for (i = 1; i < nc; i++)
 8027098:	e0bff817 	ldw	r2,-32(fp)
 802709c:	10800044 	addi	r2,r2,1
 80270a0:	e0bff815 	stw	r2,-32(fp)
 80270a4:	e0fff817 	ldw	r3,-32(fp)
 80270a8:	e0bffb17 	ldw	r2,-20(fp)
 80270ac:	18bff616 	blt	r3,r2,8027088 <select_ncolors+0x58>
			temp *= iroot;
	} while (temp <= (long) max_colors); /* repeat till iroot exceeds root */
 80270b0:	e0bffa17 	ldw	r2,-24(fp)
 80270b4:	e0fffc17 	ldw	r3,-16(fp)
 80270b8:	18bfeb0e 	bge	r3,r2,8027068 <select_ncolors+0x38>
	iroot--;			/* now iroot = floor(root) */
 80270bc:	e0bff717 	ldw	r2,-36(fp)
 80270c0:	10bfffc4 	addi	r2,r2,-1
 80270c4:	e0bff715 	stw	r2,-36(fp)

	/* Must have at least 2 color values per component */
	if (iroot < 2)
 80270c8:	e0bff717 	ldw	r2,-36(fp)
 80270cc:	10800088 	cmpgei	r2,r2,2
 80270d0:	10000d1e 	bne	r2,zero,8027108 <select_ncolors+0xd8>
		ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, (int) temp);
 80270d4:	e0bffe17 	ldw	r2,-8(fp)
 80270d8:	10800017 	ldw	r2,0(r2)
 80270dc:	00c00e84 	movi	r3,58
 80270e0:	10c00515 	stw	r3,20(r2)
 80270e4:	e0bffe17 	ldw	r2,-8(fp)
 80270e8:	10800017 	ldw	r2,0(r2)
 80270ec:	e0fffa17 	ldw	r3,-24(fp)
 80270f0:	10c00615 	stw	r3,24(r2)
 80270f4:	e0bffe17 	ldw	r2,-8(fp)
 80270f8:	10800017 	ldw	r2,0(r2)
 80270fc:	10800017 	ldw	r2,0(r2)
 8027100:	e13ffe17 	ldw	r4,-8(fp)
 8027104:	103ee83a 	callr	r2

	/* Initialize to iroot color values for each component */
	total_colors = 1;
 8027108:	00800044 	movi	r2,1
 802710c:	e0bff615 	stw	r2,-40(fp)
	for (i = 0; i < nc; i++) {
 8027110:	e03ff815 	stw	zero,-32(fp)
 8027114:	00000e06 	br	8027150 <select_ncolors+0x120>
		Ncolors[i] = iroot;
 8027118:	e0bff817 	ldw	r2,-32(fp)
 802711c:	1085883a 	add	r2,r2,r2
 8027120:	1085883a 	add	r2,r2,r2
 8027124:	e0ffff17 	ldw	r3,-4(fp)
 8027128:	1885883a 	add	r2,r3,r2
 802712c:	e0fff717 	ldw	r3,-36(fp)
 8027130:	10c00015 	stw	r3,0(r2)
		total_colors *= iroot;
 8027134:	e13ff617 	ldw	r4,-40(fp)
 8027138:	e17ff717 	ldw	r5,-36(fp)
 802713c:	802c2180 	call	802c218 <__mulsi3>
 8027140:	e0bff615 	stw	r2,-40(fp)
	if (iroot < 2)
		ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, (int) temp);

	/* Initialize to iroot color values for each component */
	total_colors = 1;
	for (i = 0; i < nc; i++) {
 8027144:	e0bff817 	ldw	r2,-32(fp)
 8027148:	10800044 	addi	r2,r2,1
 802714c:	e0bff815 	stw	r2,-32(fp)
 8027150:	e0fff817 	ldw	r3,-32(fp)
 8027154:	e0bffb17 	ldw	r2,-20(fp)
 8027158:	18bfef16 	blt	r3,r2,8027118 <select_ncolors+0xe8>
	* Sometimes, the first component can be incremented more than once!
	* (Example: for 16 colors, we start at 2*2*2, go to 3*2*2, then 4*2*2.)
	* In RGB colorspace, try to increment G first, then R, then B.
	*/
	do {
		changed = FALSE;
 802715c:	e03ff905 	stb	zero,-28(fp)
		for (i = 0; i < nc; i++) {
 8027160:	e03ff815 	stw	zero,-32(fp)
 8027164:	00003506 	br	802723c <select_ncolors+0x20c>
			j = (cinfo->out_color_space == JCS_RGB ? RGB_order[i] : i);
 8027168:	e0bffe17 	ldw	r2,-8(fp)
 802716c:	10800b17 	ldw	r2,44(r2)
 8027170:	10800098 	cmpnei	r2,r2,2
 8027174:	1000081e 	bne	r2,zero,8027198 <select_ncolors+0x168>
 8027178:	00c20134 	movhi	r3,2052
 802717c:	18c2c004 	addi	r3,r3,2816
 8027180:	e0bff817 	ldw	r2,-32(fp)
 8027184:	1085883a 	add	r2,r2,r2
 8027188:	1085883a 	add	r2,r2,r2
 802718c:	1885883a 	add	r2,r3,r2
 8027190:	10800017 	ldw	r2,0(r2)
 8027194:	00000106 	br	802719c <select_ncolors+0x16c>
 8027198:	e0bff817 	ldw	r2,-32(fp)
 802719c:	e0bffd15 	stw	r2,-12(fp)
			/* calculate new total_colors if Ncolors[j] is incremented */
			temp = total_colors / Ncolors[j];
 80271a0:	e0bffd17 	ldw	r2,-12(fp)
 80271a4:	1085883a 	add	r2,r2,r2
 80271a8:	1085883a 	add	r2,r2,r2
 80271ac:	e0ffff17 	ldw	r3,-4(fp)
 80271b0:	1885883a 	add	r2,r3,r2
 80271b4:	10800017 	ldw	r2,0(r2)
 80271b8:	e13ff617 	ldw	r4,-40(fp)
 80271bc:	100b883a 	mov	r5,r2
 80271c0:	802c15c0 	call	802c15c <__divsi3>
 80271c4:	e0bffa15 	stw	r2,-24(fp)
			temp *= Ncolors[j]+1;	/* done in long arith to avoid oflo */
 80271c8:	e0bffd17 	ldw	r2,-12(fp)
 80271cc:	1085883a 	add	r2,r2,r2
 80271d0:	1085883a 	add	r2,r2,r2
 80271d4:	e0ffff17 	ldw	r3,-4(fp)
 80271d8:	1885883a 	add	r2,r3,r2
 80271dc:	10800017 	ldw	r2,0(r2)
 80271e0:	10800044 	addi	r2,r2,1
 80271e4:	e13ffa17 	ldw	r4,-24(fp)
 80271e8:	100b883a 	mov	r5,r2
 80271ec:	802c2180 	call	802c218 <__mulsi3>
 80271f0:	e0bffa15 	stw	r2,-24(fp)
			if (temp > (long) max_colors)
 80271f4:	e0bffa17 	ldw	r2,-24(fp)
 80271f8:	e0fffc17 	ldw	r3,-16(fp)
 80271fc:	18801316 	blt	r3,r2,802724c <select_ncolors+0x21c>
				break;			/* won't fit, done with this pass */
			Ncolors[j]++;		/* OK, apply the increment */
 8027200:	e0bffd17 	ldw	r2,-12(fp)
 8027204:	1085883a 	add	r2,r2,r2
 8027208:	1085883a 	add	r2,r2,r2
 802720c:	e0ffff17 	ldw	r3,-4(fp)
 8027210:	1885883a 	add	r2,r3,r2
 8027214:	10c00017 	ldw	r3,0(r2)
 8027218:	18c00044 	addi	r3,r3,1
 802721c:	10c00015 	stw	r3,0(r2)
			total_colors = (int) temp;
 8027220:	e0bffa17 	ldw	r2,-24(fp)
 8027224:	e0bff615 	stw	r2,-40(fp)
			changed = TRUE;
 8027228:	00800044 	movi	r2,1
 802722c:	e0bff905 	stb	r2,-28(fp)
	* (Example: for 16 colors, we start at 2*2*2, go to 3*2*2, then 4*2*2.)
	* In RGB colorspace, try to increment G first, then R, then B.
	*/
	do {
		changed = FALSE;
		for (i = 0; i < nc; i++) {
 8027230:	e0bff817 	ldw	r2,-32(fp)
 8027234:	10800044 	addi	r2,r2,1
 8027238:	e0bff815 	stw	r2,-32(fp)
 802723c:	e0fff817 	ldw	r3,-32(fp)
 8027240:	e0bffb17 	ldw	r2,-20(fp)
 8027244:	18bfc816 	blt	r3,r2,8027168 <select_ncolors+0x138>
 8027248:	00000106 	br	8027250 <select_ncolors+0x220>
			j = (cinfo->out_color_space == JCS_RGB ? RGB_order[i] : i);
			/* calculate new total_colors if Ncolors[j] is incremented */
			temp = total_colors / Ncolors[j];
			temp *= Ncolors[j]+1;	/* done in long arith to avoid oflo */
			if (temp > (long) max_colors)
				break;			/* won't fit, done with this pass */
 802724c:	0001883a 	nop
			Ncolors[j]++;		/* OK, apply the increment */
			total_colors = (int) temp;
			changed = TRUE;
		}
	} while (changed);
 8027250:	e0bff903 	ldbu	r2,-28(fp)
 8027254:	103fc11e 	bne	r2,zero,802715c <select_ncolors+0x12c>

	return total_colors;
 8027258:	e0bff617 	ldw	r2,-40(fp)
}
 802725c:	e037883a 	mov	sp,fp
 8027260:	dfc00117 	ldw	ra,4(sp)
 8027264:	df000017 	ldw	fp,0(sp)
 8027268:	dec00204 	addi	sp,sp,8
 802726c:	f800283a 	ret

08027270 <output_value>:

LOCAL(int)
	output_value (j_decompress_ptr cinfo, int ci, int j, int maxj)
	/* Return j'th output value, where j will range from 0 to maxj */
	/* The output values must fall in 0..MAXJSAMPLE in increasing order */
{
 8027270:	defffa04 	addi	sp,sp,-24
 8027274:	dfc00515 	stw	ra,20(sp)
 8027278:	df000415 	stw	fp,16(sp)
 802727c:	df000404 	addi	fp,sp,16
 8027280:	e13ffc15 	stw	r4,-16(fp)
 8027284:	e17ffd15 	stw	r5,-12(fp)
 8027288:	e1bffe15 	stw	r6,-8(fp)
 802728c:	e1ffff15 	stw	r7,-4(fp)
	/* We always provide values 0 and MAXJSAMPLE for each component;
	* any additional values are equally spaced between these limits.
	* (Forcing the upper and lower values to the limits ensures that
	* dithering can't produce a color outside the selected gamut.)
	*/
	return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 8027290:	e13ffe17 	ldw	r4,-8(fp)
 8027294:	01403fc4 	movi	r5,255
 8027298:	802c2180 	call	802c218 <__mulsi3>
 802729c:	1007883a 	mov	r3,r2
 80272a0:	e0bfff17 	ldw	r2,-4(fp)
 80272a4:	1008d7fa 	srli	r4,r2,31
 80272a8:	2085883a 	add	r2,r4,r2
 80272ac:	1005d07a 	srai	r2,r2,1
 80272b0:	1885883a 	add	r2,r3,r2
 80272b4:	1009883a 	mov	r4,r2
 80272b8:	e17fff17 	ldw	r5,-4(fp)
 80272bc:	802c15c0 	call	802c15c <__divsi3>
}
 80272c0:	e037883a 	mov	sp,fp
 80272c4:	dfc00117 	ldw	ra,4(sp)
 80272c8:	df000017 	ldw	fp,0(sp)
 80272cc:	dec00204 	addi	sp,sp,8
 80272d0:	f800283a 	ret

080272d4 <largest_input_value>:

LOCAL(int)
	largest_input_value (j_decompress_ptr cinfo, int ci, int j, int maxj)
	/* Return largest input value that should map to j'th output value */
	/* Must have largest(j=0) >= 0, and largest(j=maxj) >= MAXJSAMPLE */
{
 80272d4:	defffa04 	addi	sp,sp,-24
 80272d8:	dfc00515 	stw	ra,20(sp)
 80272dc:	df000415 	stw	fp,16(sp)
 80272e0:	df000404 	addi	fp,sp,16
 80272e4:	e13ffc15 	stw	r4,-16(fp)
 80272e8:	e17ffd15 	stw	r5,-12(fp)
 80272ec:	e1bffe15 	stw	r6,-8(fp)
 80272f0:	e1ffff15 	stw	r7,-4(fp)
	/* Breakpoints are halfway between values returned by output_value */
	return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 80272f4:	e13ffe17 	ldw	r4,-8(fp)
 80272f8:	01407f84 	movi	r5,510
 80272fc:	802c2180 	call	802c218 <__mulsi3>
 8027300:	10c03fc4 	addi	r3,r2,255
 8027304:	e0bfff17 	ldw	r2,-4(fp)
 8027308:	1887883a 	add	r3,r3,r2
 802730c:	e0bfff17 	ldw	r2,-4(fp)
 8027310:	1085883a 	add	r2,r2,r2
 8027314:	1809883a 	mov	r4,r3
 8027318:	100b883a 	mov	r5,r2
 802731c:	802c15c0 	call	802c15c <__divsi3>
}
 8027320:	e037883a 	mov	sp,fp
 8027324:	dfc00117 	ldw	ra,4(sp)
 8027328:	df000017 	ldw	fp,0(sp)
 802732c:	dec00204 	addi	sp,sp,8
 8027330:	f800283a 	ret

08027334 <create_colormap>:
* Create the colormap.
*/

LOCAL(void)
	create_colormap (j_decompress_ptr cinfo)
{
 8027334:	defff104 	addi	sp,sp,-60
 8027338:	dfc00e15 	stw	ra,56(sp)
 802733c:	df000d15 	stw	fp,52(sp)
 8027340:	df000d04 	addi	fp,sp,52
 8027344:	e13fff15 	stw	r4,-4(fp)
	my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8027348:	e0bfff17 	ldw	r2,-4(fp)
 802734c:	10806e17 	ldw	r2,440(r2)
 8027350:	e0bff815 	stw	r2,-32(fp)
	JSAMPARRAY colormap;		/* Created colormap */
	int total_colors;		/* Number of distinct output colors */
	int i,j,k, nci, blksize, blkdist, ptr, val;

	/* Select number of colors for each component */
	total_colors = select_ncolors(cinfo, cquantize->Ncolors);
 8027354:	e0bff817 	ldw	r2,-32(fp)
 8027358:	10800804 	addi	r2,r2,32
 802735c:	e13fff17 	ldw	r4,-4(fp)
 8027360:	100b883a 	mov	r5,r2
 8027364:	80270300 	call	8027030 <select_ncolors>
 8027368:	e0bff915 	stw	r2,-28(fp)

	/* Report selected color counts */
	if (cinfo->out_color_components == 3)
 802736c:	e0bfff17 	ldw	r2,-4(fp)
 8027370:	10801917 	ldw	r2,100(r2)
 8027374:	108000d8 	cmpnei	r2,r2,3
 8027378:	1000211e 	bne	r2,zero,8027400 <create_colormap+0xcc>
		TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
 802737c:	e0bfff17 	ldw	r2,-4(fp)
 8027380:	10800017 	ldw	r2,0(r2)
 8027384:	10800604 	addi	r2,r2,24
 8027388:	e0bffa15 	stw	r2,-24(fp)
 802738c:	e0bffa17 	ldw	r2,-24(fp)
 8027390:	e0fff917 	ldw	r3,-28(fp)
 8027394:	10c00015 	stw	r3,0(r2)
 8027398:	e0bffa17 	ldw	r2,-24(fp)
 802739c:	10800104 	addi	r2,r2,4
 80273a0:	e0fff817 	ldw	r3,-32(fp)
 80273a4:	18c00817 	ldw	r3,32(r3)
 80273a8:	10c00015 	stw	r3,0(r2)
 80273ac:	e0bffa17 	ldw	r2,-24(fp)
 80273b0:	10800204 	addi	r2,r2,8
 80273b4:	e0fff817 	ldw	r3,-32(fp)
 80273b8:	18c00917 	ldw	r3,36(r3)
 80273bc:	10c00015 	stw	r3,0(r2)
 80273c0:	e0bffa17 	ldw	r2,-24(fp)
 80273c4:	10800304 	addi	r2,r2,12
 80273c8:	e0fff817 	ldw	r3,-32(fp)
 80273cc:	18c00a17 	ldw	r3,40(r3)
 80273d0:	10c00015 	stw	r3,0(r2)
 80273d4:	e0bfff17 	ldw	r2,-4(fp)
 80273d8:	10800017 	ldw	r2,0(r2)
 80273dc:	00c01804 	movi	r3,96
 80273e0:	10c00515 	stw	r3,20(r2)
 80273e4:	e0bfff17 	ldw	r2,-4(fp)
 80273e8:	10800017 	ldw	r2,0(r2)
 80273ec:	10800117 	ldw	r2,4(r2)
 80273f0:	e13fff17 	ldw	r4,-4(fp)
 80273f4:	01400044 	movi	r5,1
 80273f8:	103ee83a 	callr	r2
 80273fc:	00000e06 	br	8027438 <create_colormap+0x104>
		total_colors, cquantize->Ncolors[0],
		cquantize->Ncolors[1], cquantize->Ncolors[2]);
	else
		TRACEMS1(cinfo, 1, JTRC_QUANT_NCOLORS, total_colors);
 8027400:	e0bfff17 	ldw	r2,-4(fp)
 8027404:	10800017 	ldw	r2,0(r2)
 8027408:	00c01844 	movi	r3,97
 802740c:	10c00515 	stw	r3,20(r2)
 8027410:	e0bfff17 	ldw	r2,-4(fp)
 8027414:	10800017 	ldw	r2,0(r2)
 8027418:	e0fff917 	ldw	r3,-28(fp)
 802741c:	10c00615 	stw	r3,24(r2)
 8027420:	e0bfff17 	ldw	r2,-4(fp)
 8027424:	10800017 	ldw	r2,0(r2)
 8027428:	10800117 	ldw	r2,4(r2)
 802742c:	e13fff17 	ldw	r4,-4(fp)
 8027430:	01400044 	movi	r5,1
 8027434:	103ee83a 	callr	r2

	/* Allocate and fill in the colormap. */
	/* The colors are ordered in the map in standard row-major order, */
	/* i.e. rightmost (highest-indexed) color changes most rapidly. */

	colormap = (*cinfo->mem->alloc_sarray)
 8027438:	e0bfff17 	ldw	r2,-4(fp)
 802743c:	10800117 	ldw	r2,4(r2)
		((j_common_ptr) cinfo, JPOOL_IMAGE,
 8027440:	12000217 	ldw	r8,8(r2)
 8027444:	e0fff917 	ldw	r3,-28(fp)
		(JDIMENSION) total_colors, (JDIMENSION) cinfo->out_color_components);
 8027448:	e0bfff17 	ldw	r2,-4(fp)
 802744c:	10801917 	ldw	r2,100(r2)

	/* Allocate and fill in the colormap. */
	/* The colors are ordered in the map in standard row-major order, */
	/* i.e. rightmost (highest-indexed) color changes most rapidly. */

	colormap = (*cinfo->mem->alloc_sarray)
 8027450:	e13fff17 	ldw	r4,-4(fp)
 8027454:	01400044 	movi	r5,1
 8027458:	180d883a 	mov	r6,r3
 802745c:	100f883a 	mov	r7,r2
 8027460:	403ee83a 	callr	r8
 8027464:	e0bffb15 	stw	r2,-20(fp)
		((j_common_ptr) cinfo, JPOOL_IMAGE,
		(JDIMENSION) total_colors, (JDIMENSION) cinfo->out_color_components);

	/* blksize is number of adjacent repeated entries for a component */
	/* blkdist is distance between groups of identical entries for a component */
	blkdist = total_colors;
 8027468:	e0bff917 	ldw	r2,-28(fp)
 802746c:	e0bff615 	stw	r2,-40(fp)

	for (i = 0; i < cinfo->out_color_components; i++) {
 8027470:	e03ff315 	stw	zero,-52(fp)
 8027474:	00004106 	br	802757c <create_colormap+0x248>
		/* fill in colormap entries for i'th color component */
		nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 8027478:	e0fff817 	ldw	r3,-32(fp)
 802747c:	e0bff317 	ldw	r2,-52(fp)
 8027480:	10800204 	addi	r2,r2,8
 8027484:	1085883a 	add	r2,r2,r2
 8027488:	1085883a 	add	r2,r2,r2
 802748c:	1885883a 	add	r2,r3,r2
 8027490:	10800017 	ldw	r2,0(r2)
 8027494:	e0bffc15 	stw	r2,-16(fp)
		blksize = blkdist / nci;
 8027498:	e13ff617 	ldw	r4,-40(fp)
 802749c:	e17ffc17 	ldw	r5,-16(fp)
 80274a0:	802c15c0 	call	802c15c <__divsi3>
 80274a4:	e0bffd15 	stw	r2,-12(fp)
		for (j = 0; j < nci; j++) {
 80274a8:	e03ff415 	stw	zero,-48(fp)
 80274ac:	00002b06 	br	802755c <create_colormap+0x228>
			/* Compute j'th output value (out of nci) for component */
			val = output_value(cinfo, i, j, nci-1);
 80274b0:	e0bffc17 	ldw	r2,-16(fp)
 80274b4:	10bfffc4 	addi	r2,r2,-1
 80274b8:	e13fff17 	ldw	r4,-4(fp)
 80274bc:	e17ff317 	ldw	r5,-52(fp)
 80274c0:	e1bff417 	ldw	r6,-48(fp)
 80274c4:	100f883a 	mov	r7,r2
 80274c8:	80272700 	call	8027270 <output_value>
 80274cc:	e0bffe15 	stw	r2,-8(fp)
			/* Fill in all colormap entries that have this value of this component */
			for (ptr = j * blksize; ptr < total_colors; ptr += blkdist) {
 80274d0:	e13ff417 	ldw	r4,-48(fp)
 80274d4:	e17ffd17 	ldw	r5,-12(fp)
 80274d8:	802c2180 	call	802c218 <__mulsi3>
 80274dc:	e0bff715 	stw	r2,-36(fp)
 80274e0:	00001806 	br	8027544 <create_colormap+0x210>
				/* fill in blksize entries beginning at ptr */
				for (k = 0; k < blksize; k++)
 80274e4:	e03ff515 	stw	zero,-44(fp)
 80274e8:	00000f06 	br	8027528 <create_colormap+0x1f4>
					colormap[i][ptr+k] = (JSAMPLE) val;
 80274ec:	e0bff317 	ldw	r2,-52(fp)
 80274f0:	1085883a 	add	r2,r2,r2
 80274f4:	1085883a 	add	r2,r2,r2
 80274f8:	e0fffb17 	ldw	r3,-20(fp)
 80274fc:	1885883a 	add	r2,r3,r2
 8027500:	10c00017 	ldw	r3,0(r2)
 8027504:	e13ff717 	ldw	r4,-36(fp)
 8027508:	e0bff517 	ldw	r2,-44(fp)
 802750c:	2085883a 	add	r2,r4,r2
 8027510:	1885883a 	add	r2,r3,r2
 8027514:	e0fffe17 	ldw	r3,-8(fp)
 8027518:	10c00005 	stb	r3,0(r2)
			/* Compute j'th output value (out of nci) for component */
			val = output_value(cinfo, i, j, nci-1);
			/* Fill in all colormap entries that have this value of this component */
			for (ptr = j * blksize; ptr < total_colors; ptr += blkdist) {
				/* fill in blksize entries beginning at ptr */
				for (k = 0; k < blksize; k++)
 802751c:	e0bff517 	ldw	r2,-44(fp)
 8027520:	10800044 	addi	r2,r2,1
 8027524:	e0bff515 	stw	r2,-44(fp)
 8027528:	e0fff517 	ldw	r3,-44(fp)
 802752c:	e0bffd17 	ldw	r2,-12(fp)
 8027530:	18bfee16 	blt	r3,r2,80274ec <create_colormap+0x1b8>
		blksize = blkdist / nci;
		for (j = 0; j < nci; j++) {
			/* Compute j'th output value (out of nci) for component */
			val = output_value(cinfo, i, j, nci-1);
			/* Fill in all colormap entries that have this value of this component */
			for (ptr = j * blksize; ptr < total_colors; ptr += blkdist) {
 8027534:	e0fff717 	ldw	r3,-36(fp)
 8027538:	e0bff617 	ldw	r2,-40(fp)
 802753c:	1885883a 	add	r2,r3,r2
 8027540:	e0bff715 	stw	r2,-36(fp)
 8027544:	e0fff717 	ldw	r3,-36(fp)
 8027548:	e0bff917 	ldw	r2,-28(fp)
 802754c:	18bfe516 	blt	r3,r2,80274e4 <create_colormap+0x1b0>

	for (i = 0; i < cinfo->out_color_components; i++) {
		/* fill in colormap entries for i'th color component */
		nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
		blksize = blkdist / nci;
		for (j = 0; j < nci; j++) {
 8027550:	e0bff417 	ldw	r2,-48(fp)
 8027554:	10800044 	addi	r2,r2,1
 8027558:	e0bff415 	stw	r2,-48(fp)
 802755c:	e0fff417 	ldw	r3,-48(fp)
 8027560:	e0bffc17 	ldw	r2,-16(fp)
 8027564:	18bfd216 	blt	r3,r2,80274b0 <create_colormap+0x17c>
				/* fill in blksize entries beginning at ptr */
				for (k = 0; k < blksize; k++)
					colormap[i][ptr+k] = (JSAMPLE) val;
			}
		}
		blkdist = blksize;		/* blksize of this color is blkdist of next */
 8027568:	e0bffd17 	ldw	r2,-12(fp)
 802756c:	e0bff615 	stw	r2,-40(fp)

	/* blksize is number of adjacent repeated entries for a component */
	/* blkdist is distance between groups of identical entries for a component */
	blkdist = total_colors;

	for (i = 0; i < cinfo->out_color_components; i++) {
 8027570:	e0bff317 	ldw	r2,-52(fp)
 8027574:	10800044 	addi	r2,r2,1
 8027578:	e0bff315 	stw	r2,-52(fp)
 802757c:	e0bfff17 	ldw	r2,-4(fp)
 8027580:	10801917 	ldw	r2,100(r2)
 8027584:	e0fff317 	ldw	r3,-52(fp)
 8027588:	18bfbb16 	blt	r3,r2,8027478 <create_colormap+0x144>
	}

	/* Save the colormap in private storage,
	* where it will survive color quantization mode changes.
	*/
	cquantize->sv_colormap = colormap;
 802758c:	e0bff817 	ldw	r2,-32(fp)
 8027590:	e0fffb17 	ldw	r3,-20(fp)
 8027594:	10c00415 	stw	r3,16(r2)
	cquantize->sv_actual = total_colors;
 8027598:	e0bff817 	ldw	r2,-32(fp)
 802759c:	e0fff917 	ldw	r3,-28(fp)
 80275a0:	10c00515 	stw	r3,20(r2)
}
 80275a4:	e037883a 	mov	sp,fp
 80275a8:	dfc00117 	ldw	ra,4(sp)
 80275ac:	df000017 	ldw	fp,0(sp)
 80275b0:	dec00204 	addi	sp,sp,8
 80275b4:	f800283a 	ret

080275b8 <create_colorindex>:
* Create the color index table.
*/

LOCAL(void)
	create_colorindex (j_decompress_ptr cinfo)
{
 80275b8:	defff304 	addi	sp,sp,-52
 80275bc:	dfc00c15 	stw	ra,48(sp)
 80275c0:	df000b15 	stw	fp,44(sp)
 80275c4:	dc000a15 	stw	r16,40(sp)
 80275c8:	df000a04 	addi	fp,sp,40
 80275cc:	e13fff15 	stw	r4,-4(fp)
	my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 80275d0:	e0bfff17 	ldw	r2,-4(fp)
 80275d4:	10806e17 	ldw	r2,440(r2)
 80275d8:	e0bffc15 	stw	r2,-16(fp)
	/* For ordered dither, we pad the color index tables by MAXJSAMPLE in
	* each direction (input index values can be -MAXJSAMPLE .. 2*MAXJSAMPLE).
	* This is not necessary in the other dithering modes.  However, we
	* flag whether it was done in case user changes dithering mode.
	*/
	if (cinfo->dither_mode == JDITHER_ORDERED) {
 80275dc:	e0bfff17 	ldw	r2,-4(fp)
 80275e0:	10801317 	ldw	r2,76(r2)
 80275e4:	10800058 	cmpnei	r2,r2,1
 80275e8:	1000061e 	bne	r2,zero,8027604 <create_colorindex+0x4c>
		pad = MAXJSAMPLE*2;
 80275ec:	00807f84 	movi	r2,510
 80275f0:	e0bffb15 	stw	r2,-20(fp)
		cquantize->is_padded = TRUE;
 80275f4:	e0bffc17 	ldw	r2,-16(fp)
 80275f8:	00c00044 	movi	r3,1
 80275fc:	10c00705 	stb	r3,28(r2)
 8027600:	00000306 	br	8027610 <create_colorindex+0x58>
	} else {
		pad = 0;
 8027604:	e03ffb15 	stw	zero,-20(fp)
		cquantize->is_padded = FALSE;
 8027608:	e0bffc17 	ldw	r2,-16(fp)
 802760c:	10000705 	stb	zero,28(r2)
	}

	cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 8027610:	e0bfff17 	ldw	r2,-4(fp)
 8027614:	10800117 	ldw	r2,4(r2)
		((j_common_ptr) cinfo, JPOOL_IMAGE,
 8027618:	12000217 	ldw	r8,8(r2)
		(JDIMENSION) (MAXJSAMPLE+1 + pad),
 802761c:	e0bffb17 	ldw	r2,-20(fp)
 8027620:	10804004 	addi	r2,r2,256
		pad = 0;
		cquantize->is_padded = FALSE;
	}

	cquantize->colorindex = (*cinfo->mem->alloc_sarray)
		((j_common_ptr) cinfo, JPOOL_IMAGE,
 8027624:	1007883a 	mov	r3,r2
		(JDIMENSION) (MAXJSAMPLE+1 + pad),
		(JDIMENSION) cinfo->out_color_components);
 8027628:	e0bfff17 	ldw	r2,-4(fp)
 802762c:	10801917 	ldw	r2,100(r2)
		pad = 0;
		cquantize->is_padded = FALSE;
	}

	cquantize->colorindex = (*cinfo->mem->alloc_sarray)
		((j_common_ptr) cinfo, JPOOL_IMAGE,
 8027630:	e13fff17 	ldw	r4,-4(fp)
 8027634:	01400044 	movi	r5,1
 8027638:	180d883a 	mov	r6,r3
 802763c:	100f883a 	mov	r7,r2
 8027640:	403ee83a 	callr	r8
	} else {
		pad = 0;
		cquantize->is_padded = FALSE;
	}

	cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 8027644:	e0fffc17 	ldw	r3,-16(fp)
 8027648:	18800615 	stw	r2,24(r3)
		((j_common_ptr) cinfo, JPOOL_IMAGE,
		(JDIMENSION) (MAXJSAMPLE+1 + pad),
		(JDIMENSION) cinfo->out_color_components);

	/* blksize is number of adjacent repeated entries for a component */
	blksize = cquantize->sv_actual;
 802764c:	e0bffc17 	ldw	r2,-16(fp)
 8027650:	10800517 	ldw	r2,20(r2)
 8027654:	e0bff915 	stw	r2,-28(fp)

	for (i = 0; i < cinfo->out_color_components; i++) {
 8027658:	e03ff615 	stw	zero,-40(fp)
 802765c:	00006a06 	br	8027808 <create_colorindex+0x250>
		/* fill in colorindex entries for i'th color component */
		nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 8027660:	e0fffc17 	ldw	r3,-16(fp)
 8027664:	e0bff617 	ldw	r2,-40(fp)
 8027668:	10800204 	addi	r2,r2,8
 802766c:	1085883a 	add	r2,r2,r2
 8027670:	1085883a 	add	r2,r2,r2
 8027674:	1885883a 	add	r2,r3,r2
 8027678:	10800017 	ldw	r2,0(r2)
 802767c:	e0bffd15 	stw	r2,-12(fp)
		blksize = blksize / nci;
 8027680:	e13ff917 	ldw	r4,-28(fp)
 8027684:	e17ffd17 	ldw	r5,-12(fp)
 8027688:	802c15c0 	call	802c15c <__divsi3>
 802768c:	e0bff915 	stw	r2,-28(fp)

		/* adjust colorindex pointers to provide padding at negative indexes. */
		if (pad)
 8027690:	e0bffb17 	ldw	r2,-20(fp)
 8027694:	10000f26 	beq	r2,zero,80276d4 <create_colorindex+0x11c>
			cquantize->colorindex[i] += MAXJSAMPLE;
 8027698:	e0bffc17 	ldw	r2,-16(fp)
 802769c:	10c00617 	ldw	r3,24(r2)
 80276a0:	e0bff617 	ldw	r2,-40(fp)
 80276a4:	1085883a 	add	r2,r2,r2
 80276a8:	1085883a 	add	r2,r2,r2
 80276ac:	1887883a 	add	r3,r3,r2
 80276b0:	e0bffc17 	ldw	r2,-16(fp)
 80276b4:	11000617 	ldw	r4,24(r2)
 80276b8:	e0bff617 	ldw	r2,-40(fp)
 80276bc:	1085883a 	add	r2,r2,r2
 80276c0:	1085883a 	add	r2,r2,r2
 80276c4:	2085883a 	add	r2,r4,r2
 80276c8:	10800017 	ldw	r2,0(r2)
 80276cc:	10803fc4 	addi	r2,r2,255
 80276d0:	18800015 	stw	r2,0(r3)

		/* in loop, val = index of current output value, */
		/* and k = largest j that maps to current val */
		indexptr = cquantize->colorindex[i];
 80276d4:	e0bffc17 	ldw	r2,-16(fp)
 80276d8:	10c00617 	ldw	r3,24(r2)
 80276dc:	e0bff617 	ldw	r2,-40(fp)
 80276e0:	1085883a 	add	r2,r2,r2
 80276e4:	1085883a 	add	r2,r2,r2
 80276e8:	1885883a 	add	r2,r3,r2
 80276ec:	10800017 	ldw	r2,0(r2)
 80276f0:	e0bffe15 	stw	r2,-8(fp)
		val = 0;
 80276f4:	e03ffa15 	stw	zero,-24(fp)
		k = largest_input_value(cinfo, i, 0, nci-1);
 80276f8:	e0bffd17 	ldw	r2,-12(fp)
 80276fc:	10bfffc4 	addi	r2,r2,-1
 8027700:	e13fff17 	ldw	r4,-4(fp)
 8027704:	e17ff617 	ldw	r5,-40(fp)
 8027708:	000d883a 	mov	r6,zero
 802770c:	100f883a 	mov	r7,r2
 8027710:	80272d40 	call	80272d4 <largest_input_value>
 8027714:	e0bff815 	stw	r2,-32(fp)
		for (j = 0; j <= MAXJSAMPLE; j++) {
 8027718:	e03ff715 	stw	zero,-36(fp)
 802771c:	00001b06 	br	802778c <create_colorindex+0x1d4>
			while (j > k)		/* advance val if past boundary */
				k = largest_input_value(cinfo, i, ++val, nci-1);
 8027720:	e0bffa17 	ldw	r2,-24(fp)
 8027724:	10800044 	addi	r2,r2,1
 8027728:	e0bffa15 	stw	r2,-24(fp)
 802772c:	e0bffd17 	ldw	r2,-12(fp)
 8027730:	10bfffc4 	addi	r2,r2,-1
 8027734:	e13fff17 	ldw	r4,-4(fp)
 8027738:	e17ff617 	ldw	r5,-40(fp)
 802773c:	e1bffa17 	ldw	r6,-24(fp)
 8027740:	100f883a 	mov	r7,r2
 8027744:	80272d40 	call	80272d4 <largest_input_value>
 8027748:	e0bff815 	stw	r2,-32(fp)
		/* and k = largest j that maps to current val */
		indexptr = cquantize->colorindex[i];
		val = 0;
		k = largest_input_value(cinfo, i, 0, nci-1);
		for (j = 0; j <= MAXJSAMPLE; j++) {
			while (j > k)		/* advance val if past boundary */
 802774c:	e0bff717 	ldw	r2,-36(fp)
 8027750:	e0fff817 	ldw	r3,-32(fp)
 8027754:	18bff216 	blt	r3,r2,8027720 <create_colorindex+0x168>
				k = largest_input_value(cinfo, i, ++val, nci-1);
			/* premultiply so that no multiplication needed in main processing */
			indexptr[j] = (JSAMPLE) (val * blksize);
 8027758:	e0bff717 	ldw	r2,-36(fp)
 802775c:	e0fffe17 	ldw	r3,-8(fp)
 8027760:	18a1883a 	add	r16,r3,r2
 8027764:	e0bffa17 	ldw	r2,-24(fp)
 8027768:	1007883a 	mov	r3,r2
 802776c:	e0bff917 	ldw	r2,-28(fp)
 8027770:	1809883a 	mov	r4,r3
 8027774:	100b883a 	mov	r5,r2
 8027778:	802c2180 	call	802c218 <__mulsi3>
 802777c:	80800005 	stb	r2,0(r16)
		/* in loop, val = index of current output value, */
		/* and k = largest j that maps to current val */
		indexptr = cquantize->colorindex[i];
		val = 0;
		k = largest_input_value(cinfo, i, 0, nci-1);
		for (j = 0; j <= MAXJSAMPLE; j++) {
 8027780:	e0bff717 	ldw	r2,-36(fp)
 8027784:	10800044 	addi	r2,r2,1
 8027788:	e0bff715 	stw	r2,-36(fp)
 802778c:	e0bff717 	ldw	r2,-36(fp)
 8027790:	10804010 	cmplti	r2,r2,256
 8027794:	103fed1e 	bne	r2,zero,802774c <create_colorindex+0x194>
				k = largest_input_value(cinfo, i, ++val, nci-1);
			/* premultiply so that no multiplication needed in main processing */
			indexptr[j] = (JSAMPLE) (val * blksize);
		}
		/* Pad at both ends if necessary */
		if (pad)
 8027798:	e0bffb17 	ldw	r2,-20(fp)
 802779c:	10001726 	beq	r2,zero,80277fc <create_colorindex+0x244>
			for (j = 1; j <= MAXJSAMPLE; j++) {
 80277a0:	00800044 	movi	r2,1
 80277a4:	e0bff715 	stw	r2,-36(fp)
 80277a8:	00001106 	br	80277f0 <create_colorindex+0x238>
				indexptr[-j] = indexptr[0];
 80277ac:	e0bff717 	ldw	r2,-36(fp)
 80277b0:	0085c83a 	sub	r2,zero,r2
 80277b4:	e0fffe17 	ldw	r3,-8(fp)
 80277b8:	1885883a 	add	r2,r3,r2
 80277bc:	e0fffe17 	ldw	r3,-8(fp)
 80277c0:	18c00003 	ldbu	r3,0(r3)
 80277c4:	10c00005 	stb	r3,0(r2)
				indexptr[MAXJSAMPLE+j] = indexptr[MAXJSAMPLE];
 80277c8:	e0bff717 	ldw	r2,-36(fp)
 80277cc:	10803fc4 	addi	r2,r2,255
 80277d0:	e0fffe17 	ldw	r3,-8(fp)
 80277d4:	1885883a 	add	r2,r3,r2
 80277d8:	e0fffe17 	ldw	r3,-8(fp)
 80277dc:	18c03fc3 	ldbu	r3,255(r3)
 80277e0:	10c00005 	stb	r3,0(r2)
			/* premultiply so that no multiplication needed in main processing */
			indexptr[j] = (JSAMPLE) (val * blksize);
		}
		/* Pad at both ends if necessary */
		if (pad)
			for (j = 1; j <= MAXJSAMPLE; j++) {
 80277e4:	e0bff717 	ldw	r2,-36(fp)
 80277e8:	10800044 	addi	r2,r2,1
 80277ec:	e0bff715 	stw	r2,-36(fp)
 80277f0:	e0bff717 	ldw	r2,-36(fp)
 80277f4:	10804010 	cmplti	r2,r2,256
 80277f8:	103fec1e 	bne	r2,zero,80277ac <create_colorindex+0x1f4>
		(JDIMENSION) cinfo->out_color_components);

	/* blksize is number of adjacent repeated entries for a component */
	blksize = cquantize->sv_actual;

	for (i = 0; i < cinfo->out_color_components; i++) {
 80277fc:	e0bff617 	ldw	r2,-40(fp)
 8027800:	10800044 	addi	r2,r2,1
 8027804:	e0bff615 	stw	r2,-40(fp)
 8027808:	e0bfff17 	ldw	r2,-4(fp)
 802780c:	10801917 	ldw	r2,100(r2)
 8027810:	e0fff617 	ldw	r3,-40(fp)
 8027814:	18bf9216 	blt	r3,r2,8027660 <create_colorindex+0xa8>
			for (j = 1; j <= MAXJSAMPLE; j++) {
				indexptr[-j] = indexptr[0];
				indexptr[MAXJSAMPLE+j] = indexptr[MAXJSAMPLE];
			}
	}
}
 8027818:	e037883a 	mov	sp,fp
 802781c:	dfc00217 	ldw	ra,8(sp)
 8027820:	df000117 	ldw	fp,4(sp)
 8027824:	dc000017 	ldw	r16,0(sp)
 8027828:	dec00304 	addi	sp,sp,12
 802782c:	f800283a 	ret

08027830 <make_odither_array>:
* distinct output values.
*/

LOCAL(ODITHER_MATRIX_PTR)
	make_odither_array (j_decompress_ptr cinfo, int ncolors)
{
 8027830:	defff604 	addi	sp,sp,-40
 8027834:	dfc00915 	stw	ra,36(sp)
 8027838:	df000815 	stw	fp,32(sp)
 802783c:	dc000715 	stw	r16,28(sp)
 8027840:	df000704 	addi	fp,sp,28
 8027844:	e13ffe15 	stw	r4,-8(fp)
 8027848:	e17fff15 	stw	r5,-4(fp)
	ODITHER_MATRIX_PTR odither;
	int j,k;
	INT32 num,den;

	odither = (ODITHER_MATRIX_PTR)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 802784c:	e0bffe17 	ldw	r2,-8(fp)
 8027850:	10800117 	ldw	r2,4(r2)
 8027854:	10800017 	ldw	r2,0(r2)
{
	ODITHER_MATRIX_PTR odither;
	int j,k;
	INT32 num,den;

	odither = (ODITHER_MATRIX_PTR)
 8027858:	e13ffe17 	ldw	r4,-8(fp)
 802785c:	01400044 	movi	r5,1
 8027860:	01810004 	movi	r6,1024
 8027864:	103ee83a 	callr	r2
 8027868:	e0bffb15 	stw	r2,-20(fp)
	/* The inter-value distance for this color is MAXJSAMPLE/(ncolors-1).
	* Hence the dither value for the matrix cell with fill order f
	* (f=0..N-1) should be (N-1-2*f)/(2*N) * MAXJSAMPLE/(ncolors-1).
	* On 16-bit-int machine, be careful to avoid overflow.
	*/
	den = 2 * ODITHER_CELLS * ((INT32) (ncolors - 1));
 802786c:	e0bfff17 	ldw	r2,-4(fp)
 8027870:	10bfffc4 	addi	r2,r2,-1
 8027874:	1004927a 	slli	r2,r2,9
 8027878:	e0bffc15 	stw	r2,-16(fp)
	for (j = 0; j < ODITHER_SIZE; j++) {
 802787c:	e03ff915 	stw	zero,-28(fp)
 8027880:	00003006 	br	8027944 <make_odither_array+0x114>
		for (k = 0; k < ODITHER_SIZE; k++) {
 8027884:	e03ffa15 	stw	zero,-24(fp)
 8027888:	00002806 	br	802792c <make_odither_array+0xfc>
			num = ((INT32) (ODITHER_CELLS-1 - 2*((int)base_dither_matrix[j][k])))
 802788c:	00c20134 	movhi	r3,2052
 8027890:	18c28004 	addi	r3,r3,2560
 8027894:	e0bff917 	ldw	r2,-28(fp)
 8027898:	1008913a 	slli	r4,r2,4
 802789c:	e0bffa17 	ldw	r2,-24(fp)
 80278a0:	2085883a 	add	r2,r4,r2
 80278a4:	1885883a 	add	r2,r3,r2
 80278a8:	10800003 	ldbu	r2,0(r2)
 80278ac:	10803fcc 	andi	r2,r2,255
				* MAXJSAMPLE;
 80278b0:	1009883a 	mov	r4,r2
 80278b4:	017f8084 	movi	r5,-510
 80278b8:	802c2180 	call	802c218 <__mulsi3>
 80278bc:	1007883a 	mov	r3,r2
	* On 16-bit-int machine, be careful to avoid overflow.
	*/
	den = 2 * ODITHER_CELLS * ((INT32) (ncolors - 1));
	for (j = 0; j < ODITHER_SIZE; j++) {
		for (k = 0; k < ODITHER_SIZE; k++) {
			num = ((INT32) (ODITHER_CELLS-1 - 2*((int)base_dither_matrix[j][k])))
 80278c0:	00bf8054 	movui	r2,65025
 80278c4:	1885883a 	add	r2,r3,r2
 80278c8:	e0bffd15 	stw	r2,-12(fp)
				* MAXJSAMPLE;
			/* Ensure round towards zero despite C's lack of consistency
			* about rounding negative values in integer division...
			*/
			odither[j][k] = (int) (num<0 ? -((-num)/den) : num/den);
 80278cc:	e0bff917 	ldw	r2,-28(fp)
 80278d0:	100491ba 	slli	r2,r2,6
 80278d4:	e0fffb17 	ldw	r3,-20(fp)
 80278d8:	18a1883a 	add	r16,r3,r2
 80278dc:	e0bffd17 	ldw	r2,-12(fp)
 80278e0:	1000070e 	bge	r2,zero,8027900 <make_odither_array+0xd0>
 80278e4:	e0bffd17 	ldw	r2,-12(fp)
 80278e8:	0085c83a 	sub	r2,zero,r2
 80278ec:	1009883a 	mov	r4,r2
 80278f0:	e17ffc17 	ldw	r5,-16(fp)
 80278f4:	802c15c0 	call	802c15c <__divsi3>
 80278f8:	0085c83a 	sub	r2,zero,r2
 80278fc:	00000306 	br	802790c <make_odither_array+0xdc>
 8027900:	e13ffd17 	ldw	r4,-12(fp)
 8027904:	e17ffc17 	ldw	r5,-16(fp)
 8027908:	802c15c0 	call	802c15c <__divsi3>
 802790c:	e0fffa17 	ldw	r3,-24(fp)
 8027910:	18c7883a 	add	r3,r3,r3
 8027914:	18c7883a 	add	r3,r3,r3
 8027918:	80c7883a 	add	r3,r16,r3
 802791c:	18800015 	stw	r2,0(r3)
	* (f=0..N-1) should be (N-1-2*f)/(2*N) * MAXJSAMPLE/(ncolors-1).
	* On 16-bit-int machine, be careful to avoid overflow.
	*/
	den = 2 * ODITHER_CELLS * ((INT32) (ncolors - 1));
	for (j = 0; j < ODITHER_SIZE; j++) {
		for (k = 0; k < ODITHER_SIZE; k++) {
 8027920:	e0bffa17 	ldw	r2,-24(fp)
 8027924:	10800044 	addi	r2,r2,1
 8027928:	e0bffa15 	stw	r2,-24(fp)
 802792c:	e0bffa17 	ldw	r2,-24(fp)
 8027930:	10800410 	cmplti	r2,r2,16
 8027934:	103fd51e 	bne	r2,zero,802788c <make_odither_array+0x5c>
	* Hence the dither value for the matrix cell with fill order f
	* (f=0..N-1) should be (N-1-2*f)/(2*N) * MAXJSAMPLE/(ncolors-1).
	* On 16-bit-int machine, be careful to avoid overflow.
	*/
	den = 2 * ODITHER_CELLS * ((INT32) (ncolors - 1));
	for (j = 0; j < ODITHER_SIZE; j++) {
 8027938:	e0bff917 	ldw	r2,-28(fp)
 802793c:	10800044 	addi	r2,r2,1
 8027940:	e0bff915 	stw	r2,-28(fp)
 8027944:	e0bff917 	ldw	r2,-28(fp)
 8027948:	10800410 	cmplti	r2,r2,16
 802794c:	103fcd1e 	bne	r2,zero,8027884 <make_odither_array+0x54>
			* about rounding negative values in integer division...
			*/
			odither[j][k] = (int) (num<0 ? -((-num)/den) : num/den);
		}
	}
	return odither;
 8027950:	e0bffb17 	ldw	r2,-20(fp)
}
 8027954:	e037883a 	mov	sp,fp
 8027958:	dfc00217 	ldw	ra,8(sp)
 802795c:	df000117 	ldw	fp,4(sp)
 8027960:	dc000017 	ldw	r16,0(sp)
 8027964:	dec00304 	addi	sp,sp,12
 8027968:	f800283a 	ret

0802796c <create_odither_tables>:
* share a dither table.
*/

LOCAL(void)
	create_odither_tables (j_decompress_ptr cinfo)
{
 802796c:	defff804 	addi	sp,sp,-32
 8027970:	dfc00715 	stw	ra,28(sp)
 8027974:	df000615 	stw	fp,24(sp)
 8027978:	df000604 	addi	fp,sp,24
 802797c:	e13fff15 	stw	r4,-4(fp)
	my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8027980:	e0bfff17 	ldw	r2,-4(fp)
 8027984:	10806e17 	ldw	r2,440(r2)
 8027988:	e0bffd15 	stw	r2,-12(fp)
	ODITHER_MATRIX_PTR odither;
	int i, j, nci;

	for (i = 0; i < cinfo->out_color_components; i++) {
 802798c:	e03ffb15 	stw	zero,-20(fp)
 8027990:	00003406 	br	8027a64 <create_odither_tables+0xf8>
		nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 8027994:	e0fffd17 	ldw	r3,-12(fp)
 8027998:	e0bffb17 	ldw	r2,-20(fp)
 802799c:	10800204 	addi	r2,r2,8
 80279a0:	1085883a 	add	r2,r2,r2
 80279a4:	1085883a 	add	r2,r2,r2
 80279a8:	1885883a 	add	r2,r3,r2
 80279ac:	10800017 	ldw	r2,0(r2)
 80279b0:	e0bffe15 	stw	r2,-8(fp)
		odither = NULL;		/* search for matching prior component */
 80279b4:	e03ffa15 	stw	zero,-24(fp)
		for (j = 0; j < i; j++) {
 80279b8:	e03ffc15 	stw	zero,-16(fp)
 80279bc:	00001506 	br	8027a14 <create_odither_tables+0xa8>
			if (nci == cquantize->Ncolors[j]) {
 80279c0:	e0fffd17 	ldw	r3,-12(fp)
 80279c4:	e0bffc17 	ldw	r2,-16(fp)
 80279c8:	10800204 	addi	r2,r2,8
 80279cc:	1085883a 	add	r2,r2,r2
 80279d0:	1085883a 	add	r2,r2,r2
 80279d4:	1885883a 	add	r2,r3,r2
 80279d8:	10c00017 	ldw	r3,0(r2)
 80279dc:	e0bffe17 	ldw	r2,-8(fp)
 80279e0:	1880091e 	bne	r3,r2,8027a08 <create_odither_tables+0x9c>
				odither = cquantize->odither[j];
 80279e4:	e0fffd17 	ldw	r3,-12(fp)
 80279e8:	e0bffc17 	ldw	r2,-16(fp)
 80279ec:	10800344 	addi	r2,r2,13
 80279f0:	1085883a 	add	r2,r2,r2
 80279f4:	1085883a 	add	r2,r2,r2
 80279f8:	1885883a 	add	r2,r3,r2
 80279fc:	10800017 	ldw	r2,0(r2)
 8027a00:	e0bffa15 	stw	r2,-24(fp)
				break;
 8027a04:	00000606 	br	8027a20 <create_odither_tables+0xb4>
	int i, j, nci;

	for (i = 0; i < cinfo->out_color_components; i++) {
		nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
		odither = NULL;		/* search for matching prior component */
		for (j = 0; j < i; j++) {
 8027a08:	e0bffc17 	ldw	r2,-16(fp)
 8027a0c:	10800044 	addi	r2,r2,1
 8027a10:	e0bffc15 	stw	r2,-16(fp)
 8027a14:	e0fffc17 	ldw	r3,-16(fp)
 8027a18:	e0bffb17 	ldw	r2,-20(fp)
 8027a1c:	18bfe816 	blt	r3,r2,80279c0 <create_odither_tables+0x54>
			if (nci == cquantize->Ncolors[j]) {
				odither = cquantize->odither[j];
				break;
			}
		}
		if (odither == NULL)	/* need a new table? */
 8027a20:	e0bffa17 	ldw	r2,-24(fp)
 8027a24:	1000041e 	bne	r2,zero,8027a38 <create_odither_tables+0xcc>
			odither = make_odither_array(cinfo, nci);
 8027a28:	e13fff17 	ldw	r4,-4(fp)
 8027a2c:	e17ffe17 	ldw	r5,-8(fp)
 8027a30:	80278300 	call	8027830 <make_odither_array>
 8027a34:	e0bffa15 	stw	r2,-24(fp)
		cquantize->odither[i] = odither;
 8027a38:	e0fffd17 	ldw	r3,-12(fp)
 8027a3c:	e0bffb17 	ldw	r2,-20(fp)
 8027a40:	10800344 	addi	r2,r2,13
 8027a44:	1085883a 	add	r2,r2,r2
 8027a48:	1085883a 	add	r2,r2,r2
 8027a4c:	1885883a 	add	r2,r3,r2
 8027a50:	e0fffa17 	ldw	r3,-24(fp)
 8027a54:	10c00015 	stw	r3,0(r2)
{
	my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
	ODITHER_MATRIX_PTR odither;
	int i, j, nci;

	for (i = 0; i < cinfo->out_color_components; i++) {
 8027a58:	e0bffb17 	ldw	r2,-20(fp)
 8027a5c:	10800044 	addi	r2,r2,1
 8027a60:	e0bffb15 	stw	r2,-20(fp)
 8027a64:	e0bfff17 	ldw	r2,-4(fp)
 8027a68:	10801917 	ldw	r2,100(r2)
 8027a6c:	e0fffb17 	ldw	r3,-20(fp)
 8027a70:	18bfc816 	blt	r3,r2,8027994 <create_odither_tables+0x28>
		}
		if (odither == NULL)	/* need a new table? */
			odither = make_odither_array(cinfo, nci);
		cquantize->odither[i] = odither;
	}
}
 8027a74:	e037883a 	mov	sp,fp
 8027a78:	dfc00117 	ldw	ra,4(sp)
 8027a7c:	df000017 	ldw	fp,0(sp)
 8027a80:	dec00204 	addi	sp,sp,8
 8027a84:	f800283a 	ret

08027a88 <color_quantize>:

METHODDEF(void)
	color_quantize (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
	JSAMPARRAY output_buf, int num_rows)
	/* General case, no dithering */
{
 8027a88:	defff104 	addi	sp,sp,-60
 8027a8c:	df000e15 	stw	fp,56(sp)
 8027a90:	dd000d15 	stw	r20,52(sp)
 8027a94:	dcc00c15 	stw	r19,48(sp)
 8027a98:	dc800b15 	stw	r18,44(sp)
 8027a9c:	dc400a15 	stw	r17,40(sp)
 8027aa0:	dc000915 	stw	r16,36(sp)
 8027aa4:	df000904 	addi	fp,sp,36
 8027aa8:	e13ffc15 	stw	r4,-16(fp)
 8027aac:	e17ffd15 	stw	r5,-12(fp)
 8027ab0:	e1bffe15 	stw	r6,-8(fp)
 8027ab4:	e1ffff15 	stw	r7,-4(fp)
	my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8027ab8:	e0bffc17 	ldw	r2,-16(fp)
 8027abc:	10806e17 	ldw	r2,440(r2)
 8027ac0:	e0bff915 	stw	r2,-28(fp)
	JSAMPARRAY colorindex = cquantize->colorindex;
 8027ac4:	e0bff917 	ldw	r2,-28(fp)
 8027ac8:	10800617 	ldw	r2,24(r2)
 8027acc:	e0bffa15 	stw	r2,-24(fp)
	register int pixcode, ci;
	register JSAMPROW ptrin, ptrout;
	int row;
	JDIMENSION col;
	JDIMENSION width = cinfo->output_width;
 8027ad0:	e0bffc17 	ldw	r2,-16(fp)
 8027ad4:	10801717 	ldw	r2,92(r2)
 8027ad8:	e0bffb15 	stw	r2,-20(fp)
	register int nc = cinfo->out_color_components;
 8027adc:	e0bffc17 	ldw	r2,-16(fp)
 8027ae0:	15001917 	ldw	r20,100(r2)

	for (row = 0; row < num_rows; row++) {
 8027ae4:	e03ff715 	stw	zero,-36(fp)
 8027ae8:	00002c06 	br	8027b9c <color_quantize+0x114>
		ptrin = input_buf[row];
 8027aec:	e0bff717 	ldw	r2,-36(fp)
 8027af0:	1085883a 	add	r2,r2,r2
 8027af4:	1085883a 	add	r2,r2,r2
 8027af8:	e0fffd17 	ldw	r3,-12(fp)
 8027afc:	1885883a 	add	r2,r3,r2
 8027b00:	14400017 	ldw	r17,0(r2)
		ptrout = output_buf[row];
 8027b04:	e0bff717 	ldw	r2,-36(fp)
 8027b08:	1085883a 	add	r2,r2,r2
 8027b0c:	1085883a 	add	r2,r2,r2
 8027b10:	e0fffe17 	ldw	r3,-8(fp)
 8027b14:	1885883a 	add	r2,r3,r2
 8027b18:	14800017 	ldw	r18,0(r2)
		for (col = width; col > 0; col--) {
 8027b1c:	e0bffb17 	ldw	r2,-20(fp)
 8027b20:	e0bff815 	stw	r2,-32(fp)
 8027b24:	00001806 	br	8027b88 <color_quantize+0x100>
			pixcode = 0;
 8027b28:	0027883a 	mov	r19,zero
			for (ci = 0; ci < nc; ci++) {
 8027b2c:	0021883a 	mov	r16,zero
 8027b30:	00000e06 	br	8027b6c <color_quantize+0xe4>
				pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
 8027b34:	8005883a 	mov	r2,r16
 8027b38:	1085883a 	add	r2,r2,r2
 8027b3c:	1085883a 	add	r2,r2,r2
 8027b40:	e0fffa17 	ldw	r3,-24(fp)
 8027b44:	1885883a 	add	r2,r3,r2
 8027b48:	10c00017 	ldw	r3,0(r2)
 8027b4c:	88800003 	ldbu	r2,0(r17)
 8027b50:	10803fcc 	andi	r2,r2,255
 8027b54:	1885883a 	add	r2,r3,r2
 8027b58:	10800003 	ldbu	r2,0(r2)
 8027b5c:	10803fcc 	andi	r2,r2,255
 8027b60:	98a7883a 	add	r19,r19,r2
 8027b64:	8c400044 	addi	r17,r17,1
	for (row = 0; row < num_rows; row++) {
		ptrin = input_buf[row];
		ptrout = output_buf[row];
		for (col = width; col > 0; col--) {
			pixcode = 0;
			for (ci = 0; ci < nc; ci++) {
 8027b68:	84000044 	addi	r16,r16,1
 8027b6c:	853ff116 	blt	r16,r20,8027b34 <color_quantize+0xac>
				pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
			}
			*ptrout++ = (JSAMPLE) pixcode;
 8027b70:	9805883a 	mov	r2,r19
 8027b74:	90800005 	stb	r2,0(r18)
 8027b78:	94800044 	addi	r18,r18,1
	register int nc = cinfo->out_color_components;

	for (row = 0; row < num_rows; row++) {
		ptrin = input_buf[row];
		ptrout = output_buf[row];
		for (col = width; col > 0; col--) {
 8027b7c:	e0bff817 	ldw	r2,-32(fp)
 8027b80:	10bfffc4 	addi	r2,r2,-1
 8027b84:	e0bff815 	stw	r2,-32(fp)
 8027b88:	e0bff817 	ldw	r2,-32(fp)
 8027b8c:	103fe61e 	bne	r2,zero,8027b28 <color_quantize+0xa0>
	int row;
	JDIMENSION col;
	JDIMENSION width = cinfo->output_width;
	register int nc = cinfo->out_color_components;

	for (row = 0; row < num_rows; row++) {
 8027b90:	e0bff717 	ldw	r2,-36(fp)
 8027b94:	10800044 	addi	r2,r2,1
 8027b98:	e0bff715 	stw	r2,-36(fp)
 8027b9c:	e0fff717 	ldw	r3,-36(fp)
 8027ba0:	e0bfff17 	ldw	r2,-4(fp)
 8027ba4:	18bfd116 	blt	r3,r2,8027aec <color_quantize+0x64>
				pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
			}
			*ptrout++ = (JSAMPLE) pixcode;
		}
	}
}
 8027ba8:	e037883a 	mov	sp,fp
 8027bac:	df000517 	ldw	fp,20(sp)
 8027bb0:	dd000417 	ldw	r20,16(sp)
 8027bb4:	dcc00317 	ldw	r19,12(sp)
 8027bb8:	dc800217 	ldw	r18,8(sp)
 8027bbc:	dc400117 	ldw	r17,4(sp)
 8027bc0:	dc000017 	ldw	r16,0(sp)
 8027bc4:	dec00604 	addi	sp,sp,24
 8027bc8:	f800283a 	ret

08027bcc <color_quantize3>:

METHODDEF(void)
	color_quantize3 (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
	JSAMPARRAY output_buf, int num_rows)
	/* Fast path for out_color_components==3, no dithering */
{
 8027bcc:	defff104 	addi	sp,sp,-60
 8027bd0:	df000e15 	stw	fp,56(sp)
 8027bd4:	dc800d15 	stw	r18,52(sp)
 8027bd8:	dc400c15 	stw	r17,48(sp)
 8027bdc:	dc000b15 	stw	r16,44(sp)
 8027be0:	df000b04 	addi	fp,sp,44
 8027be4:	e13ffc15 	stw	r4,-16(fp)
 8027be8:	e17ffd15 	stw	r5,-12(fp)
 8027bec:	e1bffe15 	stw	r6,-8(fp)
 8027bf0:	e1ffff15 	stw	r7,-4(fp)
	my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8027bf4:	e0bffc17 	ldw	r2,-16(fp)
 8027bf8:	10806e17 	ldw	r2,440(r2)
 8027bfc:	e0bff715 	stw	r2,-36(fp)
	register int pixcode;
	register JSAMPROW ptrin, ptrout;
	JSAMPROW colorindex0 = cquantize->colorindex[0];
 8027c00:	e0bff717 	ldw	r2,-36(fp)
 8027c04:	10800617 	ldw	r2,24(r2)
 8027c08:	10800017 	ldw	r2,0(r2)
 8027c0c:	e0bff815 	stw	r2,-32(fp)
	JSAMPROW colorindex1 = cquantize->colorindex[1];
 8027c10:	e0bff717 	ldw	r2,-36(fp)
 8027c14:	10800617 	ldw	r2,24(r2)
 8027c18:	10800117 	ldw	r2,4(r2)
 8027c1c:	e0bff915 	stw	r2,-28(fp)
	JSAMPROW colorindex2 = cquantize->colorindex[2];
 8027c20:	e0bff717 	ldw	r2,-36(fp)
 8027c24:	10800617 	ldw	r2,24(r2)
 8027c28:	10800217 	ldw	r2,8(r2)
 8027c2c:	e0bffa15 	stw	r2,-24(fp)
	int row;
	JDIMENSION col;
	JDIMENSION width = cinfo->output_width;
 8027c30:	e0bffc17 	ldw	r2,-16(fp)
 8027c34:	10801717 	ldw	r2,92(r2)
 8027c38:	e0bffb15 	stw	r2,-20(fp)

	for (row = 0; row < num_rows; row++) {
 8027c3c:	e03ff515 	stw	zero,-44(fp)
 8027c40:	00003106 	br	8027d08 <color_quantize3+0x13c>
		ptrin = input_buf[row];
 8027c44:	e0bff517 	ldw	r2,-44(fp)
 8027c48:	1085883a 	add	r2,r2,r2
 8027c4c:	1085883a 	add	r2,r2,r2
 8027c50:	e0fffd17 	ldw	r3,-12(fp)
 8027c54:	1885883a 	add	r2,r3,r2
 8027c58:	14000017 	ldw	r16,0(r2)
		ptrout = output_buf[row];
 8027c5c:	e0bff517 	ldw	r2,-44(fp)
 8027c60:	1085883a 	add	r2,r2,r2
 8027c64:	1085883a 	add	r2,r2,r2
 8027c68:	e0fffe17 	ldw	r3,-8(fp)
 8027c6c:	1885883a 	add	r2,r3,r2
 8027c70:	14800017 	ldw	r18,0(r2)
		for (col = width; col > 0; col--) {
 8027c74:	e0bffb17 	ldw	r2,-20(fp)
 8027c78:	e0bff615 	stw	r2,-40(fp)
 8027c7c:	00001d06 	br	8027cf4 <color_quantize3+0x128>
			pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*ptrin++)]);
 8027c80:	80800003 	ldbu	r2,0(r16)
 8027c84:	10803fcc 	andi	r2,r2,255
 8027c88:	e0fff817 	ldw	r3,-32(fp)
 8027c8c:	1885883a 	add	r2,r3,r2
 8027c90:	10800003 	ldbu	r2,0(r2)
 8027c94:	14403fcc 	andi	r17,r2,255
 8027c98:	84000044 	addi	r16,r16,1
			pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*ptrin++)]);
 8027c9c:	80800003 	ldbu	r2,0(r16)
 8027ca0:	10803fcc 	andi	r2,r2,255
 8027ca4:	e0fff917 	ldw	r3,-28(fp)
 8027ca8:	1885883a 	add	r2,r3,r2
 8027cac:	10800003 	ldbu	r2,0(r2)
 8027cb0:	10803fcc 	andi	r2,r2,255
 8027cb4:	88a3883a 	add	r17,r17,r2
 8027cb8:	84000044 	addi	r16,r16,1
			pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*ptrin++)]);
 8027cbc:	80800003 	ldbu	r2,0(r16)
 8027cc0:	10803fcc 	andi	r2,r2,255
 8027cc4:	e0fffa17 	ldw	r3,-24(fp)
 8027cc8:	1885883a 	add	r2,r3,r2
 8027ccc:	10800003 	ldbu	r2,0(r2)
 8027cd0:	10803fcc 	andi	r2,r2,255
 8027cd4:	88a3883a 	add	r17,r17,r2
 8027cd8:	84000044 	addi	r16,r16,1
			*ptrout++ = (JSAMPLE) pixcode;
 8027cdc:	8805883a 	mov	r2,r17
 8027ce0:	90800005 	stb	r2,0(r18)
 8027ce4:	94800044 	addi	r18,r18,1
	JDIMENSION width = cinfo->output_width;

	for (row = 0; row < num_rows; row++) {
		ptrin = input_buf[row];
		ptrout = output_buf[row];
		for (col = width; col > 0; col--) {
 8027ce8:	e0bff617 	ldw	r2,-40(fp)
 8027cec:	10bfffc4 	addi	r2,r2,-1
 8027cf0:	e0bff615 	stw	r2,-40(fp)
 8027cf4:	e0bff617 	ldw	r2,-40(fp)
 8027cf8:	103fe11e 	bne	r2,zero,8027c80 <color_quantize3+0xb4>
	JSAMPROW colorindex2 = cquantize->colorindex[2];
	int row;
	JDIMENSION col;
	JDIMENSION width = cinfo->output_width;

	for (row = 0; row < num_rows; row++) {
 8027cfc:	e0bff517 	ldw	r2,-44(fp)
 8027d00:	10800044 	addi	r2,r2,1
 8027d04:	e0bff515 	stw	r2,-44(fp)
 8027d08:	e0fff517 	ldw	r3,-44(fp)
 8027d0c:	e0bfff17 	ldw	r2,-4(fp)
 8027d10:	18bfcc16 	blt	r3,r2,8027c44 <color_quantize3+0x78>
			pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*ptrin++)]);
			pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*ptrin++)]);
			*ptrout++ = (JSAMPLE) pixcode;
		}
	}
}
 8027d14:	e037883a 	mov	sp,fp
 8027d18:	df000317 	ldw	fp,12(sp)
 8027d1c:	dc800217 	ldw	r18,8(sp)
 8027d20:	dc400117 	ldw	r17,4(sp)
 8027d24:	dc000017 	ldw	r16,0(sp)
 8027d28:	dec00404 	addi	sp,sp,16
 8027d2c:	f800283a 	ret

08027d30 <quantize_ord_dither>:

METHODDEF(void)
	quantize_ord_dither (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
	JSAMPARRAY output_buf, int num_rows)
	/* General case, with ordered dithering */
{
 8027d30:	deffee04 	addi	sp,sp,-72
 8027d34:	dfc01115 	stw	ra,68(sp)
 8027d38:	df001015 	stw	fp,64(sp)
 8027d3c:	dc400f15 	stw	r17,60(sp)
 8027d40:	dc000e15 	stw	r16,56(sp)
 8027d44:	df000e04 	addi	fp,sp,56
 8027d48:	e13ffc15 	stw	r4,-16(fp)
 8027d4c:	e17ffd15 	stw	r5,-12(fp)
 8027d50:	e1bffe15 	stw	r6,-8(fp)
 8027d54:	e1ffff15 	stw	r7,-4(fp)
	my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8027d58:	e0bffc17 	ldw	r2,-16(fp)
 8027d5c:	10806e17 	ldw	r2,440(r2)
 8027d60:	e0bff615 	stw	r2,-40(fp)
	register JSAMPROW input_ptr;
	register JSAMPROW output_ptr;
	JSAMPROW colorindex_ci;
	int * dither;			/* points to active row of dither matrix */
	int row_index, col_index;	/* current indexes into dither matrix */
	int nc = cinfo->out_color_components;
 8027d64:	e0bffc17 	ldw	r2,-16(fp)
 8027d68:	10801917 	ldw	r2,100(r2)
 8027d6c:	e0bff715 	stw	r2,-36(fp)
	int ci;
	int row;
	JDIMENSION col;
	JDIMENSION width = cinfo->output_width;
 8027d70:	e0bffc17 	ldw	r2,-16(fp)
 8027d74:	10801717 	ldw	r2,92(r2)
 8027d78:	e0bff815 	stw	r2,-32(fp)

	for (row = 0; row < num_rows; row++) {
 8027d7c:	e03ff415 	stw	zero,-48(fp)
 8027d80:	00005e06 	br	8027efc <quantize_ord_dither+0x1cc>
		/* Initialize output values to 0 so can process components separately */
		jzero_far((void FAR *) output_buf[row],
 8027d84:	e0bff417 	ldw	r2,-48(fp)
 8027d88:	1085883a 	add	r2,r2,r2
 8027d8c:	1085883a 	add	r2,r2,r2
 8027d90:	e0fffe17 	ldw	r3,-8(fp)
 8027d94:	1885883a 	add	r2,r3,r2
 8027d98:	10800017 	ldw	r2,0(r2)
 8027d9c:	1009883a 	mov	r4,r2
 8027da0:	e17ff817 	ldw	r5,-32(fp)
 8027da4:	802b23c0 	call	802b23c <jzero_far>
			(size_t) (width * SIZEOF(JSAMPLE)));
		row_index = cquantize->row_index;
 8027da8:	e0bff617 	ldw	r2,-40(fp)
 8027dac:	10800c17 	ldw	r2,48(r2)
 8027db0:	e0bff915 	stw	r2,-28(fp)
		for (ci = 0; ci < nc; ci++) {
 8027db4:	e03ff315 	stw	zero,-52(fp)
 8027db8:	00004306 	br	8027ec8 <quantize_ord_dither+0x198>
			input_ptr = input_buf[row] + ci;
 8027dbc:	e0bff417 	ldw	r2,-48(fp)
 8027dc0:	1085883a 	add	r2,r2,r2
 8027dc4:	1085883a 	add	r2,r2,r2
 8027dc8:	e0fffd17 	ldw	r3,-12(fp)
 8027dcc:	1885883a 	add	r2,r3,r2
 8027dd0:	10c00017 	ldw	r3,0(r2)
 8027dd4:	e0bff317 	ldw	r2,-52(fp)
 8027dd8:	18a3883a 	add	r17,r3,r2
			output_ptr = output_buf[row];
 8027ddc:	e0bff417 	ldw	r2,-48(fp)
 8027de0:	1085883a 	add	r2,r2,r2
 8027de4:	1085883a 	add	r2,r2,r2
 8027de8:	e0fffe17 	ldw	r3,-8(fp)
 8027dec:	1885883a 	add	r2,r3,r2
 8027df0:	14000017 	ldw	r16,0(r2)
			colorindex_ci = cquantize->colorindex[ci];
 8027df4:	e0bff617 	ldw	r2,-40(fp)
 8027df8:	10c00617 	ldw	r3,24(r2)
 8027dfc:	e0bff317 	ldw	r2,-52(fp)
 8027e00:	1085883a 	add	r2,r2,r2
 8027e04:	1085883a 	add	r2,r2,r2
 8027e08:	1885883a 	add	r2,r3,r2
 8027e0c:	10800017 	ldw	r2,0(r2)
 8027e10:	e0bffa15 	stw	r2,-24(fp)
			dither = cquantize->odither[ci][row_index];
 8027e14:	e0fff617 	ldw	r3,-40(fp)
 8027e18:	e0bff317 	ldw	r2,-52(fp)
 8027e1c:	10800344 	addi	r2,r2,13
 8027e20:	1085883a 	add	r2,r2,r2
 8027e24:	1085883a 	add	r2,r2,r2
 8027e28:	1885883a 	add	r2,r3,r2
 8027e2c:	10c00017 	ldw	r3,0(r2)
 8027e30:	e0bff917 	ldw	r2,-28(fp)
 8027e34:	100491ba 	slli	r2,r2,6
 8027e38:	1885883a 	add	r2,r3,r2
 8027e3c:	e0bffb15 	stw	r2,-20(fp)
			col_index = 0;
 8027e40:	e03ff215 	stw	zero,-56(fp)

			for (col = width; col > 0; col--) {
 8027e44:	e0bff817 	ldw	r2,-32(fp)
 8027e48:	e0bff515 	stw	r2,-44(fp)
 8027e4c:	00001906 	br	8027eb4 <quantize_ord_dither+0x184>
				* Range-limiting need not be done explicitly, as we have extended
				* the colorindex table to produce the right answers for out-of-range
				* inputs.  The maximum dither is +- MAXJSAMPLE; this sets the
				* required amount of padding.
				*/
				*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
 8027e50:	80c00003 	ldbu	r3,0(r16)
 8027e54:	88800003 	ldbu	r2,0(r17)
 8027e58:	11003fcc 	andi	r4,r2,255
 8027e5c:	e0bff217 	ldw	r2,-56(fp)
 8027e60:	1085883a 	add	r2,r2,r2
 8027e64:	1085883a 	add	r2,r2,r2
 8027e68:	e17ffb17 	ldw	r5,-20(fp)
 8027e6c:	2885883a 	add	r2,r5,r2
 8027e70:	10800017 	ldw	r2,0(r2)
 8027e74:	2085883a 	add	r2,r4,r2
 8027e78:	e13ffa17 	ldw	r4,-24(fp)
 8027e7c:	2085883a 	add	r2,r4,r2
 8027e80:	10800003 	ldbu	r2,0(r2)
 8027e84:	1885883a 	add	r2,r3,r2
 8027e88:	80800005 	stb	r2,0(r16)
				input_ptr += nc;
 8027e8c:	e0bff717 	ldw	r2,-36(fp)
 8027e90:	88a3883a 	add	r17,r17,r2
				output_ptr++;
 8027e94:	84000044 	addi	r16,r16,1
				col_index = (col_index + 1) & ODITHER_MASK;
 8027e98:	e0bff217 	ldw	r2,-56(fp)
 8027e9c:	10800044 	addi	r2,r2,1
 8027ea0:	108003cc 	andi	r2,r2,15
 8027ea4:	e0bff215 	stw	r2,-56(fp)
			output_ptr = output_buf[row];
			colorindex_ci = cquantize->colorindex[ci];
			dither = cquantize->odither[ci][row_index];
			col_index = 0;

			for (col = width; col > 0; col--) {
 8027ea8:	e0bff517 	ldw	r2,-44(fp)
 8027eac:	10bfffc4 	addi	r2,r2,-1
 8027eb0:	e0bff515 	stw	r2,-44(fp)
 8027eb4:	e0bff517 	ldw	r2,-44(fp)
 8027eb8:	103fe51e 	bne	r2,zero,8027e50 <quantize_ord_dither+0x120>
	for (row = 0; row < num_rows; row++) {
		/* Initialize output values to 0 so can process components separately */
		jzero_far((void FAR *) output_buf[row],
			(size_t) (width * SIZEOF(JSAMPLE)));
		row_index = cquantize->row_index;
		for (ci = 0; ci < nc; ci++) {
 8027ebc:	e0bff317 	ldw	r2,-52(fp)
 8027ec0:	10800044 	addi	r2,r2,1
 8027ec4:	e0bff315 	stw	r2,-52(fp)
 8027ec8:	e0fff317 	ldw	r3,-52(fp)
 8027ecc:	e0bff717 	ldw	r2,-36(fp)
 8027ed0:	18bfba16 	blt	r3,r2,8027dbc <quantize_ord_dither+0x8c>
				output_ptr++;
				col_index = (col_index + 1) & ODITHER_MASK;
			}
		}
		/* Advance row index for next row */
		row_index = (row_index + 1) & ODITHER_MASK;
 8027ed4:	e0bff917 	ldw	r2,-28(fp)
 8027ed8:	10800044 	addi	r2,r2,1
 8027edc:	108003cc 	andi	r2,r2,15
 8027ee0:	e0bff915 	stw	r2,-28(fp)
		cquantize->row_index = row_index;
 8027ee4:	e0bff617 	ldw	r2,-40(fp)
 8027ee8:	e0fff917 	ldw	r3,-28(fp)
 8027eec:	10c00c15 	stw	r3,48(r2)
	int ci;
	int row;
	JDIMENSION col;
	JDIMENSION width = cinfo->output_width;

	for (row = 0; row < num_rows; row++) {
 8027ef0:	e0bff417 	ldw	r2,-48(fp)
 8027ef4:	10800044 	addi	r2,r2,1
 8027ef8:	e0bff415 	stw	r2,-48(fp)
 8027efc:	e0fff417 	ldw	r3,-48(fp)
 8027f00:	e0bfff17 	ldw	r2,-4(fp)
 8027f04:	18bf9f16 	blt	r3,r2,8027d84 <quantize_ord_dither+0x54>
		}
		/* Advance row index for next row */
		row_index = (row_index + 1) & ODITHER_MASK;
		cquantize->row_index = row_index;
	}
}
 8027f08:	e037883a 	mov	sp,fp
 8027f0c:	dfc00317 	ldw	ra,12(sp)
 8027f10:	df000217 	ldw	fp,8(sp)
 8027f14:	dc400117 	ldw	r17,4(sp)
 8027f18:	dc000017 	ldw	r16,0(sp)
 8027f1c:	dec00404 	addi	sp,sp,16
 8027f20:	f800283a 	ret

08027f24 <quantize3_ord_dither>:

METHODDEF(void)
	quantize3_ord_dither (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
	JSAMPARRAY output_buf, int num_rows)
	/* Fast path for out_color_components==3, with ordered dithering */
{
 8027f24:	deffec04 	addi	sp,sp,-80
 8027f28:	df001315 	stw	fp,76(sp)
 8027f2c:	dc801215 	stw	r18,72(sp)
 8027f30:	dc401115 	stw	r17,68(sp)
 8027f34:	dc001015 	stw	r16,64(sp)
 8027f38:	df001004 	addi	fp,sp,64
 8027f3c:	e13ffc15 	stw	r4,-16(fp)
 8027f40:	e17ffd15 	stw	r5,-12(fp)
 8027f44:	e1bffe15 	stw	r6,-8(fp)
 8027f48:	e1ffff15 	stw	r7,-4(fp)
	my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8027f4c:	e0bffc17 	ldw	r2,-16(fp)
 8027f50:	10806e17 	ldw	r2,440(r2)
 8027f54:	e0bff315 	stw	r2,-52(fp)
	register int pixcode;
	register JSAMPROW input_ptr;
	register JSAMPROW output_ptr;
	JSAMPROW colorindex0 = cquantize->colorindex[0];
 8027f58:	e0bff317 	ldw	r2,-52(fp)
 8027f5c:	10800617 	ldw	r2,24(r2)
 8027f60:	10800017 	ldw	r2,0(r2)
 8027f64:	e0bff415 	stw	r2,-48(fp)
	JSAMPROW colorindex1 = cquantize->colorindex[1];
 8027f68:	e0bff317 	ldw	r2,-52(fp)
 8027f6c:	10800617 	ldw	r2,24(r2)
 8027f70:	10800117 	ldw	r2,4(r2)
 8027f74:	e0bff515 	stw	r2,-44(fp)
	JSAMPROW colorindex2 = cquantize->colorindex[2];
 8027f78:	e0bff317 	ldw	r2,-52(fp)
 8027f7c:	10800617 	ldw	r2,24(r2)
 8027f80:	10800217 	ldw	r2,8(r2)
 8027f84:	e0bff615 	stw	r2,-40(fp)
	int * dither1;
	int * dither2;
	int row_index, col_index;	/* current indexes into dither matrix */
	int row;
	JDIMENSION col;
	JDIMENSION width = cinfo->output_width;
 8027f88:	e0bffc17 	ldw	r2,-16(fp)
 8027f8c:	10801717 	ldw	r2,92(r2)
 8027f90:	e0bff715 	stw	r2,-36(fp)

	for (row = 0; row < num_rows; row++) {
 8027f94:	e03ff115 	stw	zero,-60(fp)
 8027f98:	00006706 	br	8028138 <quantize3_ord_dither+0x214>
		row_index = cquantize->row_index;
 8027f9c:	e0bff317 	ldw	r2,-52(fp)
 8027fa0:	10800c17 	ldw	r2,48(r2)
 8027fa4:	e0bff815 	stw	r2,-32(fp)
		input_ptr = input_buf[row];
 8027fa8:	e0bff117 	ldw	r2,-60(fp)
 8027fac:	1085883a 	add	r2,r2,r2
 8027fb0:	1085883a 	add	r2,r2,r2
 8027fb4:	e0fffd17 	ldw	r3,-12(fp)
 8027fb8:	1885883a 	add	r2,r3,r2
 8027fbc:	14000017 	ldw	r16,0(r2)
		output_ptr = output_buf[row];
 8027fc0:	e0bff117 	ldw	r2,-60(fp)
 8027fc4:	1085883a 	add	r2,r2,r2
 8027fc8:	1085883a 	add	r2,r2,r2
 8027fcc:	e0fffe17 	ldw	r3,-8(fp)
 8027fd0:	1885883a 	add	r2,r3,r2
 8027fd4:	14800017 	ldw	r18,0(r2)
		dither0 = cquantize->odither[0][row_index];
 8027fd8:	e0bff317 	ldw	r2,-52(fp)
 8027fdc:	10c00d17 	ldw	r3,52(r2)
 8027fe0:	e0bff817 	ldw	r2,-32(fp)
 8027fe4:	100491ba 	slli	r2,r2,6
 8027fe8:	1885883a 	add	r2,r3,r2
 8027fec:	e0bff915 	stw	r2,-28(fp)
		dither1 = cquantize->odither[1][row_index];
 8027ff0:	e0bff317 	ldw	r2,-52(fp)
 8027ff4:	10c00e17 	ldw	r3,56(r2)
 8027ff8:	e0bff817 	ldw	r2,-32(fp)
 8027ffc:	100491ba 	slli	r2,r2,6
 8028000:	1885883a 	add	r2,r3,r2
 8028004:	e0bffa15 	stw	r2,-24(fp)
		dither2 = cquantize->odither[2][row_index];
 8028008:	e0bff317 	ldw	r2,-52(fp)
 802800c:	10c00f17 	ldw	r3,60(r2)
 8028010:	e0bff817 	ldw	r2,-32(fp)
 8028014:	100491ba 	slli	r2,r2,6
 8028018:	1885883a 	add	r2,r3,r2
 802801c:	e0bffb15 	stw	r2,-20(fp)
		col_index = 0;
 8028020:	e03ff015 	stw	zero,-64(fp)

		for (col = width; col > 0; col--) {
 8028024:	e0bff717 	ldw	r2,-36(fp)
 8028028:	e0bff215 	stw	r2,-56(fp)
 802802c:	00003606 	br	8028108 <quantize3_ord_dither+0x1e4>
			pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 8028030:	80800003 	ldbu	r2,0(r16)
 8028034:	10c03fcc 	andi	r3,r2,255
 8028038:	e0bff017 	ldw	r2,-64(fp)
 802803c:	1085883a 	add	r2,r2,r2
 8028040:	1085883a 	add	r2,r2,r2
 8028044:	e13ff917 	ldw	r4,-28(fp)
 8028048:	2085883a 	add	r2,r4,r2
 802804c:	10800017 	ldw	r2,0(r2)
 8028050:	1885883a 	add	r2,r3,r2
 8028054:	e0fff417 	ldw	r3,-48(fp)
 8028058:	1885883a 	add	r2,r3,r2
 802805c:	10800003 	ldbu	r2,0(r2)
 8028060:	14403fcc 	andi	r17,r2,255
 8028064:	84000044 	addi	r16,r16,1
				dither0[col_index]]);
			pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 8028068:	80800003 	ldbu	r2,0(r16)
 802806c:	10c03fcc 	andi	r3,r2,255
 8028070:	e0bff017 	ldw	r2,-64(fp)
 8028074:	1085883a 	add	r2,r2,r2
 8028078:	1085883a 	add	r2,r2,r2
 802807c:	e13ffa17 	ldw	r4,-24(fp)
 8028080:	2085883a 	add	r2,r4,r2
 8028084:	10800017 	ldw	r2,0(r2)
 8028088:	1885883a 	add	r2,r3,r2
 802808c:	e0fff517 	ldw	r3,-44(fp)
 8028090:	1885883a 	add	r2,r3,r2
 8028094:	10800003 	ldbu	r2,0(r2)
 8028098:	10803fcc 	andi	r2,r2,255
 802809c:	88a3883a 	add	r17,r17,r2
 80280a0:	84000044 	addi	r16,r16,1
				dither1[col_index]]);
			pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
 80280a4:	80800003 	ldbu	r2,0(r16)
 80280a8:	10c03fcc 	andi	r3,r2,255
 80280ac:	e0bff017 	ldw	r2,-64(fp)
 80280b0:	1085883a 	add	r2,r2,r2
 80280b4:	1085883a 	add	r2,r2,r2
 80280b8:	e13ffb17 	ldw	r4,-20(fp)
 80280bc:	2085883a 	add	r2,r4,r2
 80280c0:	10800017 	ldw	r2,0(r2)
 80280c4:	1885883a 	add	r2,r3,r2
 80280c8:	e0fff617 	ldw	r3,-40(fp)
 80280cc:	1885883a 	add	r2,r3,r2
 80280d0:	10800003 	ldbu	r2,0(r2)
 80280d4:	10803fcc 	andi	r2,r2,255
 80280d8:	88a3883a 	add	r17,r17,r2
 80280dc:	84000044 	addi	r16,r16,1
				dither2[col_index]]);
			*output_ptr++ = (JSAMPLE) pixcode;
 80280e0:	8805883a 	mov	r2,r17
 80280e4:	90800005 	stb	r2,0(r18)
 80280e8:	94800044 	addi	r18,r18,1
			col_index = (col_index + 1) & ODITHER_MASK;
 80280ec:	e0bff017 	ldw	r2,-64(fp)
 80280f0:	10800044 	addi	r2,r2,1
 80280f4:	108003cc 	andi	r2,r2,15
 80280f8:	e0bff015 	stw	r2,-64(fp)
		dither0 = cquantize->odither[0][row_index];
		dither1 = cquantize->odither[1][row_index];
		dither2 = cquantize->odither[2][row_index];
		col_index = 0;

		for (col = width; col > 0; col--) {
 80280fc:	e0bff217 	ldw	r2,-56(fp)
 8028100:	10bfffc4 	addi	r2,r2,-1
 8028104:	e0bff215 	stw	r2,-56(fp)
 8028108:	e0bff217 	ldw	r2,-56(fp)
 802810c:	103fc81e 	bne	r2,zero,8028030 <quantize3_ord_dither+0x10c>
			pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
				dither2[col_index]]);
			*output_ptr++ = (JSAMPLE) pixcode;
			col_index = (col_index + 1) & ODITHER_MASK;
		}
		row_index = (row_index + 1) & ODITHER_MASK;
 8028110:	e0bff817 	ldw	r2,-32(fp)
 8028114:	10800044 	addi	r2,r2,1
 8028118:	108003cc 	andi	r2,r2,15
 802811c:	e0bff815 	stw	r2,-32(fp)
		cquantize->row_index = row_index;
 8028120:	e0bff317 	ldw	r2,-52(fp)
 8028124:	e0fff817 	ldw	r3,-32(fp)
 8028128:	10c00c15 	stw	r3,48(r2)
	int row_index, col_index;	/* current indexes into dither matrix */
	int row;
	JDIMENSION col;
	JDIMENSION width = cinfo->output_width;

	for (row = 0; row < num_rows; row++) {
 802812c:	e0bff117 	ldw	r2,-60(fp)
 8028130:	10800044 	addi	r2,r2,1
 8028134:	e0bff115 	stw	r2,-60(fp)
 8028138:	e0fff117 	ldw	r3,-60(fp)
 802813c:	e0bfff17 	ldw	r2,-4(fp)
 8028140:	18bf9616 	blt	r3,r2,8027f9c <quantize3_ord_dither+0x78>
			col_index = (col_index + 1) & ODITHER_MASK;
		}
		row_index = (row_index + 1) & ODITHER_MASK;
		cquantize->row_index = row_index;
	}
}
 8028144:	e037883a 	mov	sp,fp
 8028148:	df000317 	ldw	fp,12(sp)
 802814c:	dc800217 	ldw	r18,8(sp)
 8028150:	dc400117 	ldw	r17,4(sp)
 8028154:	dc000017 	ldw	r16,0(sp)
 8028158:	dec00404 	addi	sp,sp,16
 802815c:	f800283a 	ret

08028160 <quantize_fs_dither>:

METHODDEF(void)
	quantize_fs_dither (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
	JSAMPARRAY output_buf, int num_rows)
	/* General case, with Floyd-Steinberg dithering */
{
 8028160:	deffe604 	addi	sp,sp,-104
 8028164:	dfc01915 	stw	ra,100(sp)
 8028168:	df001815 	stw	fp,96(sp)
 802816c:	dcc01715 	stw	r19,92(sp)
 8028170:	dc801615 	stw	r18,88(sp)
 8028174:	dc401515 	stw	r17,84(sp)
 8028178:	dc001415 	stw	r16,80(sp)
 802817c:	df001404 	addi	fp,sp,80
 8028180:	e13ffc15 	stw	r4,-16(fp)
 8028184:	e17ffd15 	stw	r5,-12(fp)
 8028188:	e1bffe15 	stw	r6,-8(fp)
 802818c:	e1ffff15 	stw	r7,-4(fp)
	my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8028190:	e0bffc17 	ldw	r2,-16(fp)
 8028194:	10806e17 	ldw	r2,440(r2)
 8028198:	e0bff315 	stw	r2,-52(fp)
	register JSAMPROW input_ptr;
	register JSAMPROW output_ptr;
	JSAMPROW colorindex_ci;
	JSAMPROW colormap_ci;
	int pixcode;
	int nc = cinfo->out_color_components;
 802819c:	e0bffc17 	ldw	r2,-16(fp)
 80281a0:	10801917 	ldw	r2,100(r2)
 80281a4:	e0bff415 	stw	r2,-48(fp)
	int dir;			/* 1 for left-to-right, -1 for right-to-left */
	int dirnc;			/* dir * nc */
	int ci;
	int row;
	JDIMENSION col;
	JDIMENSION width = cinfo->output_width;
 80281a8:	e0bffc17 	ldw	r2,-16(fp)
 80281ac:	10801717 	ldw	r2,92(r2)
 80281b0:	e0bff515 	stw	r2,-44(fp)
	JSAMPLE *range_limit = cinfo->sample_range_limit;
 80281b4:	e0bffc17 	ldw	r2,-16(fp)
 80281b8:	10804917 	ldw	r2,292(r2)
 80281bc:	e0bff615 	stw	r2,-40(fp)
	SHIFT_TEMPS

		for (row = 0; row < num_rows; row++) {
 80281c0:	e03ff115 	stw	zero,-60(fp)
 80281c4:	0000ad06 	br	802847c <quantize_fs_dither+0x31c>
			/* Initialize output values to 0 so can process components separately */
			jzero_far((void FAR *) output_buf[row],
 80281c8:	e0bff117 	ldw	r2,-60(fp)
 80281cc:	1085883a 	add	r2,r2,r2
 80281d0:	1085883a 	add	r2,r2,r2
 80281d4:	e0fffe17 	ldw	r3,-8(fp)
 80281d8:	1885883a 	add	r2,r3,r2
 80281dc:	10800017 	ldw	r2,0(r2)
 80281e0:	1009883a 	mov	r4,r2
 80281e4:	e17ff517 	ldw	r5,-44(fp)
 80281e8:	802b23c0 	call	802b23c <jzero_far>
				(size_t) (width * SIZEOF(JSAMPLE)));
			for (ci = 0; ci < nc; ci++) {
 80281ec:	e03ff015 	stw	zero,-64(fp)
 80281f0:	00009506 	br	8028448 <quantize_fs_dither+0x2e8>
				input_ptr = input_buf[row] + ci;
 80281f4:	e0bff117 	ldw	r2,-60(fp)
 80281f8:	1085883a 	add	r2,r2,r2
 80281fc:	1085883a 	add	r2,r2,r2
 8028200:	e0fffd17 	ldw	r3,-12(fp)
 8028204:	1885883a 	add	r2,r3,r2
 8028208:	10c00017 	ldw	r3,0(r2)
 802820c:	e0bff017 	ldw	r2,-64(fp)
 8028210:	18a7883a 	add	r19,r3,r2
				output_ptr = output_buf[row];
 8028214:	e0bff117 	ldw	r2,-60(fp)
 8028218:	1085883a 	add	r2,r2,r2
 802821c:	1085883a 	add	r2,r2,r2
 8028220:	e0fffe17 	ldw	r3,-8(fp)
 8028224:	1885883a 	add	r2,r3,r2
 8028228:	14800017 	ldw	r18,0(r2)
				if (cquantize->on_odd_row) {
 802822c:	e0bff317 	ldw	r2,-52(fp)
 8028230:	10801503 	ldbu	r2,84(r2)
 8028234:	10803fcc 	andi	r2,r2,255
 8028238:	10001b26 	beq	r2,zero,80282a8 <quantize_fs_dither+0x148>
					/* work right to left in this row */
					input_ptr += (width-1) * nc; /* so point to rightmost pixel */
 802823c:	e0bff517 	ldw	r2,-44(fp)
 8028240:	10ffffc4 	addi	r3,r2,-1
 8028244:	e0bff417 	ldw	r2,-48(fp)
 8028248:	1809883a 	mov	r4,r3
 802824c:	100b883a 	mov	r5,r2
 8028250:	802c2180 	call	802c218 <__mulsi3>
 8028254:	98a7883a 	add	r19,r19,r2
					output_ptr += width-1;
 8028258:	e0bff517 	ldw	r2,-44(fp)
 802825c:	10bfffc4 	addi	r2,r2,-1
 8028260:	90a5883a 	add	r18,r18,r2
					dir = -1;
 8028264:	00bfffc4 	movi	r2,-1
 8028268:	e0bfee15 	stw	r2,-72(fp)
					dirnc = -nc;
 802826c:	e0bff417 	ldw	r2,-48(fp)
 8028270:	0085c83a 	sub	r2,zero,r2
 8028274:	e0bfef15 	stw	r2,-68(fp)
					errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
 8028278:	e0fff317 	ldw	r3,-52(fp)
 802827c:	e0bff017 	ldw	r2,-64(fp)
 8028280:	10800444 	addi	r2,r2,17
 8028284:	1085883a 	add	r2,r2,r2
 8028288:	1085883a 	add	r2,r2,r2
 802828c:	1885883a 	add	r2,r3,r2
 8028290:	10c00017 	ldw	r3,0(r2)
 8028294:	e0bff517 	ldw	r2,-44(fp)
 8028298:	10800044 	addi	r2,r2,1
 802829c:	1085883a 	add	r2,r2,r2
 80282a0:	18a3883a 	add	r17,r3,r2
 80282a4:	00000b06 	br	80282d4 <quantize_fs_dither+0x174>
				} else {
					/* work left to right in this row */
					dir = 1;
 80282a8:	00800044 	movi	r2,1
 80282ac:	e0bfee15 	stw	r2,-72(fp)
					dirnc = nc;
 80282b0:	e0bff417 	ldw	r2,-48(fp)
 80282b4:	e0bfef15 	stw	r2,-68(fp)
					errorptr = cquantize->fserrors[ci]; /* => entry before first column */
 80282b8:	e0fff317 	ldw	r3,-52(fp)
 80282bc:	e0bff017 	ldw	r2,-64(fp)
 80282c0:	10800444 	addi	r2,r2,17
 80282c4:	1085883a 	add	r2,r2,r2
 80282c8:	1085883a 	add	r2,r2,r2
 80282cc:	1885883a 	add	r2,r3,r2
 80282d0:	14400017 	ldw	r17,0(r2)
				}
				colorindex_ci = cquantize->colorindex[ci];
 80282d4:	e0bff317 	ldw	r2,-52(fp)
 80282d8:	10c00617 	ldw	r3,24(r2)
 80282dc:	e0bff017 	ldw	r2,-64(fp)
 80282e0:	1085883a 	add	r2,r2,r2
 80282e4:	1085883a 	add	r2,r2,r2
 80282e8:	1885883a 	add	r2,r3,r2
 80282ec:	10800017 	ldw	r2,0(r2)
 80282f0:	e0bff715 	stw	r2,-36(fp)
				colormap_ci = cquantize->sv_colormap[ci];
 80282f4:	e0bff317 	ldw	r2,-52(fp)
 80282f8:	10c00417 	ldw	r3,16(r2)
 80282fc:	e0bff017 	ldw	r2,-64(fp)
 8028300:	1085883a 	add	r2,r2,r2
 8028304:	1085883a 	add	r2,r2,r2
 8028308:	1885883a 	add	r2,r3,r2
 802830c:	10800017 	ldw	r2,0(r2)
 8028310:	e0bff815 	stw	r2,-32(fp)
				/* Preset error values: no error propagated to first pixel from left */
				cur = 0;
 8028314:	0021883a 	mov	r16,zero
				/* and no error propagated to row below yet */
				belowerr = bpreverr = 0;
 8028318:	e03fed15 	stw	zero,-76(fp)
 802831c:	e0bfed17 	ldw	r2,-76(fp)
 8028320:	e0bfec15 	stw	r2,-80(fp)

				for (col = width; col > 0; col--) {
 8028324:	e0bff517 	ldw	r2,-44(fp)
 8028328:	e0bff215 	stw	r2,-56(fp)
 802832c:	00003f06 	br	802842c <quantize_fs_dither+0x2cc>
					* round the error term (which is expressed * 16) to an integer.
					* RIGHT_SHIFT rounds towards minus infinity, so adding 8 is correct
					* for either sign of the error value.
					* Note: errorptr points to *previous* column's array entry.
					*/
					cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 8028330:	e0bfee17 	ldw	r2,-72(fp)
 8028334:	1085883a 	add	r2,r2,r2
 8028338:	8885883a 	add	r2,r17,r2
 802833c:	1080000b 	ldhu	r2,0(r2)
 8028340:	10bfffcc 	andi	r2,r2,65535
 8028344:	10a0001c 	xori	r2,r2,32768
 8028348:	10a00004 	addi	r2,r2,-32768
 802834c:	1405883a 	add	r2,r2,r16
 8028350:	10800204 	addi	r2,r2,8
 8028354:	1021d13a 	srai	r16,r2,4
					/* Form pixel value + error, and range-limit to 0..MAXJSAMPLE.
					* The maximum error is +- MAXJSAMPLE; this sets the required size
					* of the range_limit array.
					*/
					cur += GETJSAMPLE(*input_ptr);
 8028358:	98800003 	ldbu	r2,0(r19)
 802835c:	10803fcc 	andi	r2,r2,255
 8028360:	80a1883a 	add	r16,r16,r2
					cur = GETJSAMPLE(range_limit[cur]);
 8028364:	8005883a 	mov	r2,r16
 8028368:	e0fff617 	ldw	r3,-40(fp)
 802836c:	1885883a 	add	r2,r3,r2
 8028370:	10800003 	ldbu	r2,0(r2)
 8028374:	14003fcc 	andi	r16,r2,255
					/* Select output value, accumulate into output code for this pixel */
					pixcode = GETJSAMPLE(colorindex_ci[cur]);
 8028378:	8005883a 	mov	r2,r16
 802837c:	e0fff717 	ldw	r3,-36(fp)
 8028380:	1885883a 	add	r2,r3,r2
 8028384:	10800003 	ldbu	r2,0(r2)
 8028388:	10803fcc 	andi	r2,r2,255
 802838c:	e0bff915 	stw	r2,-28(fp)
					*output_ptr += (JSAMPLE) pixcode;
 8028390:	90c00003 	ldbu	r3,0(r18)
 8028394:	e0bff917 	ldw	r2,-28(fp)
 8028398:	1885883a 	add	r2,r3,r2
 802839c:	90800005 	stb	r2,0(r18)
					/* Compute actual representation error at this pixel */
					/* Note: we can do this even though we don't have the final */
					/* pixel code, because the colormap is orthogonal. */
					cur -= GETJSAMPLE(colormap_ci[pixcode]);
 80283a0:	e0bff917 	ldw	r2,-28(fp)
 80283a4:	e0fff817 	ldw	r3,-32(fp)
 80283a8:	1885883a 	add	r2,r3,r2
 80283ac:	10800003 	ldbu	r2,0(r2)
 80283b0:	10803fcc 	andi	r2,r2,255
 80283b4:	80a1c83a 	sub	r16,r16,r2
					/* Compute error fractions to be propagated to adjacent pixels.
					* Add these into the running sums, and simultaneously shift the
					* next-line error sums left by 1 column.
					*/
					bnexterr = cur;
 80283b8:	e43ffa15 	stw	r16,-24(fp)
					delta = cur * 2;
 80283bc:	8405883a 	add	r2,r16,r16
 80283c0:	e0bffb15 	stw	r2,-20(fp)
					cur += delta;		/* form error * 3 */
 80283c4:	e0bffb17 	ldw	r2,-20(fp)
 80283c8:	80a1883a 	add	r16,r16,r2
					errorptr[0] = (FSERROR) (bpreverr + cur);
 80283cc:	e0bfed17 	ldw	r2,-76(fp)
 80283d0:	1007883a 	mov	r3,r2
 80283d4:	8005883a 	mov	r2,r16
 80283d8:	1885883a 	add	r2,r3,r2
 80283dc:	8880000d 	sth	r2,0(r17)
					cur += delta;		/* form error * 5 */
 80283e0:	e0bffb17 	ldw	r2,-20(fp)
 80283e4:	80a1883a 	add	r16,r16,r2
					bpreverr = belowerr + cur;
 80283e8:	e0bfec17 	ldw	r2,-80(fp)
 80283ec:	1405883a 	add	r2,r2,r16
 80283f0:	e0bfed15 	stw	r2,-76(fp)
					belowerr = bnexterr;
 80283f4:	e0bffa17 	ldw	r2,-24(fp)
 80283f8:	e0bfec15 	stw	r2,-80(fp)
					cur += delta;		/* form error * 7 */
 80283fc:	e0bffb17 	ldw	r2,-20(fp)
 8028400:	80a1883a 	add	r16,r16,r2
					/* At this point cur contains the 7/16 error value to be propagated
					* to the next pixel on the current line, and all the errors for the
					* next line have been shifted over. We are therefore ready to move on.
					*/
					input_ptr += dirnc;	/* advance input ptr to next column */
 8028404:	e0bfef17 	ldw	r2,-68(fp)
 8028408:	98a7883a 	add	r19,r19,r2
					output_ptr += dir;	/* advance output ptr to next column */
 802840c:	e0bfee17 	ldw	r2,-72(fp)
 8028410:	90a5883a 	add	r18,r18,r2
					errorptr += dir;	/* advance errorptr to current column */
 8028414:	e0bfee17 	ldw	r2,-72(fp)
 8028418:	1085883a 	add	r2,r2,r2
 802841c:	88a3883a 	add	r17,r17,r2
				/* Preset error values: no error propagated to first pixel from left */
				cur = 0;
				/* and no error propagated to row below yet */
				belowerr = bpreverr = 0;

				for (col = width; col > 0; col--) {
 8028420:	e0bff217 	ldw	r2,-56(fp)
 8028424:	10bfffc4 	addi	r2,r2,-1
 8028428:	e0bff215 	stw	r2,-56(fp)
 802842c:	e0bff217 	ldw	r2,-56(fp)
 8028430:	103fbf1e 	bne	r2,zero,8028330 <quantize_fs_dither+0x1d0>
				}
				/* Post-loop cleanup: we must unload the final error value into the
				* final fserrors[] entry.  Note we need not unload belowerr because
				* it is for the dummy column before or after the actual array.
				*/
				errorptr[0] = (FSERROR) bpreverr; /* unload prev err into array */
 8028434:	e0bfed17 	ldw	r2,-76(fp)
 8028438:	8880000d 	sth	r2,0(r17)

		for (row = 0; row < num_rows; row++) {
			/* Initialize output values to 0 so can process components separately */
			jzero_far((void FAR *) output_buf[row],
				(size_t) (width * SIZEOF(JSAMPLE)));
			for (ci = 0; ci < nc; ci++) {
 802843c:	e0bff017 	ldw	r2,-64(fp)
 8028440:	10800044 	addi	r2,r2,1
 8028444:	e0bff015 	stw	r2,-64(fp)
 8028448:	e0fff017 	ldw	r3,-64(fp)
 802844c:	e0bff417 	ldw	r2,-48(fp)
 8028450:	18bf6816 	blt	r3,r2,80281f4 <quantize_fs_dither+0x94>
				* final fserrors[] entry.  Note we need not unload belowerr because
				* it is for the dummy column before or after the actual array.
				*/
				errorptr[0] = (FSERROR) bpreverr; /* unload prev err into array */
			}
			cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
 8028454:	e0bff317 	ldw	r2,-52(fp)
 8028458:	10801503 	ldbu	r2,84(r2)
 802845c:	10803fcc 	andi	r2,r2,255
 8028460:	1005003a 	cmpeq	r2,r2,zero
 8028464:	1007883a 	mov	r3,r2
 8028468:	e0bff317 	ldw	r2,-52(fp)
 802846c:	10c01505 	stb	r3,84(r2)
	JDIMENSION col;
	JDIMENSION width = cinfo->output_width;
	JSAMPLE *range_limit = cinfo->sample_range_limit;
	SHIFT_TEMPS

		for (row = 0; row < num_rows; row++) {
 8028470:	e0bff117 	ldw	r2,-60(fp)
 8028474:	10800044 	addi	r2,r2,1
 8028478:	e0bff115 	stw	r2,-60(fp)
 802847c:	e0fff117 	ldw	r3,-60(fp)
 8028480:	e0bfff17 	ldw	r2,-4(fp)
 8028484:	18bf5016 	blt	r3,r2,80281c8 <quantize_fs_dither+0x68>
				*/
				errorptr[0] = (FSERROR) bpreverr; /* unload prev err into array */
			}
			cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
		}
}
 8028488:	e037883a 	mov	sp,fp
 802848c:	dfc00517 	ldw	ra,20(sp)
 8028490:	df000417 	ldw	fp,16(sp)
 8028494:	dcc00317 	ldw	r19,12(sp)
 8028498:	dc800217 	ldw	r18,8(sp)
 802849c:	dc400117 	ldw	r17,4(sp)
 80284a0:	dc000017 	ldw	r16,0(sp)
 80284a4:	dec00604 	addi	sp,sp,24
 80284a8:	f800283a 	ret

080284ac <alloc_fs_workspace>:
* Allocate workspace for Floyd-Steinberg errors.
*/

LOCAL(void)
	alloc_fs_workspace (j_decompress_ptr cinfo)
{
 80284ac:	defffa04 	addi	sp,sp,-24
 80284b0:	dfc00515 	stw	ra,20(sp)
 80284b4:	df000415 	stw	fp,16(sp)
 80284b8:	df000404 	addi	fp,sp,16
 80284bc:	e13fff15 	stw	r4,-4(fp)
	my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 80284c0:	e0bfff17 	ldw	r2,-4(fp)
 80284c4:	10806e17 	ldw	r2,440(r2)
 80284c8:	e0bffd15 	stw	r2,-12(fp)
	size_t arraysize;
	int i;

	arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 80284cc:	e0bfff17 	ldw	r2,-4(fp)
 80284d0:	10801717 	ldw	r2,92(r2)
 80284d4:	10800084 	addi	r2,r2,2
 80284d8:	1085883a 	add	r2,r2,r2
 80284dc:	e0bffe15 	stw	r2,-8(fp)
	for (i = 0; i < cinfo->out_color_components; i++) {
 80284e0:	e03ffc15 	stw	zero,-16(fp)
 80284e4:	00001206 	br	8028530 <alloc_fs_workspace+0x84>
		cquantize->fserrors[i] = (FSERRPTR)
			(*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
 80284e8:	e0bfff17 	ldw	r2,-4(fp)
 80284ec:	10800117 	ldw	r2,4(r2)
 80284f0:	10800117 	ldw	r2,4(r2)
 80284f4:	e13fff17 	ldw	r4,-4(fp)
 80284f8:	01400044 	movi	r5,1
 80284fc:	e1bffe17 	ldw	r6,-8(fp)
 8028500:	103ee83a 	callr	r2
 8028504:	1007883a 	mov	r3,r2
	size_t arraysize;
	int i;

	arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
	for (i = 0; i < cinfo->out_color_components; i++) {
		cquantize->fserrors[i] = (FSERRPTR)
 8028508:	e13ffd17 	ldw	r4,-12(fp)
 802850c:	e0bffc17 	ldw	r2,-16(fp)
 8028510:	10800444 	addi	r2,r2,17
 8028514:	1085883a 	add	r2,r2,r2
 8028518:	1085883a 	add	r2,r2,r2
 802851c:	2085883a 	add	r2,r4,r2
 8028520:	10c00015 	stw	r3,0(r2)
	my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
	size_t arraysize;
	int i;

	arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
	for (i = 0; i < cinfo->out_color_components; i++) {
 8028524:	e0bffc17 	ldw	r2,-16(fp)
 8028528:	10800044 	addi	r2,r2,1
 802852c:	e0bffc15 	stw	r2,-16(fp)
 8028530:	e0bfff17 	ldw	r2,-4(fp)
 8028534:	10801917 	ldw	r2,100(r2)
 8028538:	e0fffc17 	ldw	r3,-16(fp)
 802853c:	18bfea16 	blt	r3,r2,80284e8 <alloc_fs_workspace+0x3c>
		cquantize->fserrors[i] = (FSERRPTR)
			(*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
	}
}
 8028540:	e037883a 	mov	sp,fp
 8028544:	dfc00117 	ldw	ra,4(sp)
 8028548:	df000017 	ldw	fp,0(sp)
 802854c:	dec00204 	addi	sp,sp,8
 8028550:	f800283a 	ret

08028554 <start_pass_1_quant>:
* Initialize for one-pass color quantization.
*/

METHODDEF(void)
	start_pass_1_quant (j_decompress_ptr cinfo, boolean is_pre_scan)
{
 8028554:	defff904 	addi	sp,sp,-28
 8028558:	dfc00615 	stw	ra,24(sp)
 802855c:	df000515 	stw	fp,20(sp)
 8028560:	df000504 	addi	fp,sp,20
 8028564:	e13ffe15 	stw	r4,-8(fp)
 8028568:	2805883a 	mov	r2,r5
 802856c:	e0bfff05 	stb	r2,-4(fp)
	my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8028570:	e0bffe17 	ldw	r2,-8(fp)
 8028574:	10806e17 	ldw	r2,440(r2)
 8028578:	e0bffc15 	stw	r2,-16(fp)
	size_t arraysize;
	int i;

	/* Install my colormap. */
	cinfo->colormap = cquantize->sv_colormap;
 802857c:	e0bffc17 	ldw	r2,-16(fp)
 8028580:	10c00417 	ldw	r3,16(r2)
 8028584:	e0bffe17 	ldw	r2,-8(fp)
 8028588:	10c01d15 	stw	r3,116(r2)
	cinfo->actual_number_of_colors = cquantize->sv_actual;
 802858c:	e0bffc17 	ldw	r2,-16(fp)
 8028590:	10c00517 	ldw	r3,20(r2)
 8028594:	e0bffe17 	ldw	r2,-8(fp)
 8028598:	10c01c15 	stw	r3,112(r2)

	/* Initialize for desired dithering mode. */
	switch (cinfo->dither_mode) {
 802859c:	e0bffe17 	ldw	r2,-8(fp)
 80285a0:	10801317 	ldw	r2,76(r2)
 80285a4:	10c00060 	cmpeqi	r3,r2,1
 80285a8:	1800121e 	bne	r3,zero,80285f4 <start_pass_1_quant+0xa0>
 80285ac:	0080032e 	bgeu	zero,r2,80285bc <start_pass_1_quant+0x68>
 80285b0:	108000a0 	cmpeqi	r2,r2,2
 80285b4:	10002a1e 	bne	r2,zero,8028660 <start_pass_1_quant+0x10c>
 80285b8:	00004d06 	br	80286f0 <start_pass_1_quant+0x19c>
	case JDITHER_NONE:
		if (cinfo->out_color_components == 3)
 80285bc:	e0bffe17 	ldw	r2,-8(fp)
 80285c0:	10801917 	ldw	r2,100(r2)
 80285c4:	108000d8 	cmpnei	r2,r2,3
 80285c8:	1000051e 	bne	r2,zero,80285e0 <start_pass_1_quant+0x8c>
			cquantize->pub.color_quantize = color_quantize3;
 80285cc:	e0bffc17 	ldw	r2,-16(fp)
 80285d0:	00c200b4 	movhi	r3,2050
 80285d4:	18def304 	addi	r3,r3,31692
 80285d8:	10c00115 	stw	r3,4(r2)
		else
			cquantize->pub.color_quantize = color_quantize;
		break;
 80285dc:	00005006 	br	8028720 <start_pass_1_quant+0x1cc>
	switch (cinfo->dither_mode) {
	case JDITHER_NONE:
		if (cinfo->out_color_components == 3)
			cquantize->pub.color_quantize = color_quantize3;
		else
			cquantize->pub.color_quantize = color_quantize;
 80285e0:	e0bffc17 	ldw	r2,-16(fp)
 80285e4:	00c200b4 	movhi	r3,2050
 80285e8:	18dea204 	addi	r3,r3,31368
 80285ec:	10c00115 	stw	r3,4(r2)
		break;
 80285f0:	00004b06 	br	8028720 <start_pass_1_quant+0x1cc>
	case JDITHER_ORDERED:
		if (cinfo->out_color_components == 3)
 80285f4:	e0bffe17 	ldw	r2,-8(fp)
 80285f8:	10801917 	ldw	r2,100(r2)
 80285fc:	108000d8 	cmpnei	r2,r2,3
 8028600:	1000051e 	bne	r2,zero,8028618 <start_pass_1_quant+0xc4>
			cquantize->pub.color_quantize = quantize3_ord_dither;
 8028604:	e0bffc17 	ldw	r2,-16(fp)
 8028608:	00c200b4 	movhi	r3,2050
 802860c:	18dfc904 	addi	r3,r3,32548
 8028610:	10c00115 	stw	r3,4(r2)
 8028614:	00000406 	br	8028628 <start_pass_1_quant+0xd4>
		else
			cquantize->pub.color_quantize = quantize_ord_dither;
 8028618:	e0bffc17 	ldw	r2,-16(fp)
 802861c:	00c200b4 	movhi	r3,2050
 8028620:	18df4c04 	addi	r3,r3,32048
 8028624:	10c00115 	stw	r3,4(r2)
		cquantize->row_index = 0;	/* initialize state for ordered dither */
 8028628:	e0bffc17 	ldw	r2,-16(fp)
 802862c:	10000c15 	stw	zero,48(r2)
		/* If user changed to ordered dither from another mode,
		* we must recreate the color index table with padding.
		* This will cost extra space, but probably isn't very likely.
		*/
		if (! cquantize->is_padded)
 8028630:	e0bffc17 	ldw	r2,-16(fp)
 8028634:	10800703 	ldbu	r2,28(r2)
 8028638:	10803fcc 	andi	r2,r2,255
 802863c:	1000021e 	bne	r2,zero,8028648 <start_pass_1_quant+0xf4>
			create_colorindex(cinfo);
 8028640:	e13ffe17 	ldw	r4,-8(fp)
 8028644:	80275b80 	call	80275b8 <create_colorindex>
		/* Create ordered-dither tables if we didn't already. */
		if (cquantize->odither[0] == NULL)
 8028648:	e0bffc17 	ldw	r2,-16(fp)
 802864c:	10800d17 	ldw	r2,52(r2)
 8028650:	1000321e 	bne	r2,zero,802871c <start_pass_1_quant+0x1c8>
			create_odither_tables(cinfo);
 8028654:	e13ffe17 	ldw	r4,-8(fp)
 8028658:	802796c0 	call	802796c <create_odither_tables>
		break;
 802865c:	00002f06 	br	802871c <start_pass_1_quant+0x1c8>
	case JDITHER_FS:
		cquantize->pub.color_quantize = quantize_fs_dither;
 8028660:	e0bffc17 	ldw	r2,-16(fp)
 8028664:	00c200f4 	movhi	r3,2051
 8028668:	18e05804 	addi	r3,r3,-32416
 802866c:	10c00115 	stw	r3,4(r2)
		cquantize->on_odd_row = FALSE; /* initialize state for F-S dither */
 8028670:	e0bffc17 	ldw	r2,-16(fp)
 8028674:	10001505 	stb	zero,84(r2)
		/* Allocate Floyd-Steinberg workspace if didn't already. */
		if (cquantize->fserrors[0] == NULL)
 8028678:	e0bffc17 	ldw	r2,-16(fp)
 802867c:	10801117 	ldw	r2,68(r2)
 8028680:	1000021e 	bne	r2,zero,802868c <start_pass_1_quant+0x138>
			alloc_fs_workspace(cinfo);
 8028684:	e13ffe17 	ldw	r4,-8(fp)
 8028688:	80284ac0 	call	80284ac <alloc_fs_workspace>
		/* Initialize the propagated errors to zero. */
		arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 802868c:	e0bffe17 	ldw	r2,-8(fp)
 8028690:	10801717 	ldw	r2,92(r2)
 8028694:	10800084 	addi	r2,r2,2
 8028698:	1085883a 	add	r2,r2,r2
 802869c:	e0bffd15 	stw	r2,-12(fp)
		for (i = 0; i < cinfo->out_color_components; i++)
 80286a0:	e03ffb15 	stw	zero,-20(fp)
 80286a4:	00000d06 	br	80286dc <start_pass_1_quant+0x188>
			jzero_far((void FAR *) cquantize->fserrors[i], arraysize);
 80286a8:	e0fffc17 	ldw	r3,-16(fp)
 80286ac:	e0bffb17 	ldw	r2,-20(fp)
 80286b0:	10800444 	addi	r2,r2,17
 80286b4:	1085883a 	add	r2,r2,r2
 80286b8:	1085883a 	add	r2,r2,r2
 80286bc:	1885883a 	add	r2,r3,r2
 80286c0:	10800017 	ldw	r2,0(r2)
 80286c4:	1009883a 	mov	r4,r2
 80286c8:	e17ffd17 	ldw	r5,-12(fp)
 80286cc:	802b23c0 	call	802b23c <jzero_far>
		/* Allocate Floyd-Steinberg workspace if didn't already. */
		if (cquantize->fserrors[0] == NULL)
			alloc_fs_workspace(cinfo);
		/* Initialize the propagated errors to zero. */
		arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
		for (i = 0; i < cinfo->out_color_components; i++)
 80286d0:	e0bffb17 	ldw	r2,-20(fp)
 80286d4:	10800044 	addi	r2,r2,1
 80286d8:	e0bffb15 	stw	r2,-20(fp)
 80286dc:	e0bffe17 	ldw	r2,-8(fp)
 80286e0:	10801917 	ldw	r2,100(r2)
 80286e4:	e0fffb17 	ldw	r3,-20(fp)
 80286e8:	18bfef16 	blt	r3,r2,80286a8 <start_pass_1_quant+0x154>
			jzero_far((void FAR *) cquantize->fserrors[i], arraysize);
		break;
 80286ec:	00000c06 	br	8028720 <start_pass_1_quant+0x1cc>
	default:
		ERREXIT(cinfo, JERR_NOT_COMPILED);
 80286f0:	e0bffe17 	ldw	r2,-8(fp)
 80286f4:	10800017 	ldw	r2,0(r2)
 80286f8:	00c00c44 	movi	r3,49
 80286fc:	10c00515 	stw	r3,20(r2)
 8028700:	e0bffe17 	ldw	r2,-8(fp)
 8028704:	10800017 	ldw	r2,0(r2)
 8028708:	10800017 	ldw	r2,0(r2)
 802870c:	e13ffe17 	ldw	r4,-8(fp)
 8028710:	103ee83a 	callr	r2
		break;
 8028714:	0001883a 	nop
 8028718:	00000106 	br	8028720 <start_pass_1_quant+0x1cc>
		if (! cquantize->is_padded)
			create_colorindex(cinfo);
		/* Create ordered-dither tables if we didn't already. */
		if (cquantize->odither[0] == NULL)
			create_odither_tables(cinfo);
		break;
 802871c:	0001883a 	nop
		break;
	default:
		ERREXIT(cinfo, JERR_NOT_COMPILED);
		break;
	}
}
 8028720:	e037883a 	mov	sp,fp
 8028724:	dfc00117 	ldw	ra,4(sp)
 8028728:	df000017 	ldw	fp,0(sp)
 802872c:	dec00204 	addi	sp,sp,8
 8028730:	f800283a 	ret

08028734 <finish_pass_1_quant>:
* Finish up at the end of the pass.
*/

METHODDEF(void)
	finish_pass_1_quant (j_decompress_ptr cinfo)
{
 8028734:	defffe04 	addi	sp,sp,-8
 8028738:	df000115 	stw	fp,4(sp)
 802873c:	df000104 	addi	fp,sp,4
 8028740:	e13fff15 	stw	r4,-4(fp)
	/* no work in 1-pass case */
}
 8028744:	e037883a 	mov	sp,fp
 8028748:	df000017 	ldw	fp,0(sp)
 802874c:	dec00104 	addi	sp,sp,4
 8028750:	f800283a 	ret

08028754 <new_color_map_1_quant>:
* Shouldn't get to this module!
*/

METHODDEF(void)
	new_color_map_1_quant (j_decompress_ptr cinfo)
{
 8028754:	defffd04 	addi	sp,sp,-12
 8028758:	dfc00215 	stw	ra,8(sp)
 802875c:	df000115 	stw	fp,4(sp)
 8028760:	df000104 	addi	fp,sp,4
 8028764:	e13fff15 	stw	r4,-4(fp)
	ERREXIT(cinfo, JERR_MODE_CHANGE);
 8028768:	e0bfff17 	ldw	r2,-4(fp)
 802876c:	10800017 	ldw	r2,0(r2)
 8028770:	00c00bc4 	movi	r3,47
 8028774:	10c00515 	stw	r3,20(r2)
 8028778:	e0bfff17 	ldw	r2,-4(fp)
 802877c:	10800017 	ldw	r2,0(r2)
 8028780:	10800017 	ldw	r2,0(r2)
 8028784:	e13fff17 	ldw	r4,-4(fp)
 8028788:	103ee83a 	callr	r2
}
 802878c:	e037883a 	mov	sp,fp
 8028790:	dfc00117 	ldw	ra,4(sp)
 8028794:	df000017 	ldw	fp,0(sp)
 8028798:	dec00204 	addi	sp,sp,8
 802879c:	f800283a 	ret

080287a0 <jinit_1pass_quantizer>:
* Module initialization routine for 1-pass color quantization.
*/

GLOBAL(void)
	jinit_1pass_quantizer (j_decompress_ptr cinfo)
{
 80287a0:	defffc04 	addi	sp,sp,-16
 80287a4:	dfc00315 	stw	ra,12(sp)
 80287a8:	df000215 	stw	fp,8(sp)
 80287ac:	df000204 	addi	fp,sp,8
 80287b0:	e13fff15 	stw	r4,-4(fp)
	my_cquantize_ptr cquantize;

	cquantize = (my_cquantize_ptr)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80287b4:	e0bfff17 	ldw	r2,-4(fp)
 80287b8:	10800117 	ldw	r2,4(r2)
 80287bc:	10800017 	ldw	r2,0(r2)
GLOBAL(void)
	jinit_1pass_quantizer (j_decompress_ptr cinfo)
{
	my_cquantize_ptr cquantize;

	cquantize = (my_cquantize_ptr)
 80287c0:	e13fff17 	ldw	r4,-4(fp)
 80287c4:	01400044 	movi	r5,1
 80287c8:	01801604 	movi	r6,88
 80287cc:	103ee83a 	callr	r2
 80287d0:	e0bffe15 	stw	r2,-8(fp)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
		SIZEOF(my_cquantizer));
	cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
 80287d4:	e0bfff17 	ldw	r2,-4(fp)
 80287d8:	e0fffe17 	ldw	r3,-8(fp)
 80287dc:	10c06e15 	stw	r3,440(r2)
	cquantize->pub.start_pass = start_pass_1_quant;
 80287e0:	e0bffe17 	ldw	r2,-8(fp)
 80287e4:	00c200f4 	movhi	r3,2051
 80287e8:	18e15504 	addi	r3,r3,-31404
 80287ec:	10c00015 	stw	r3,0(r2)
	cquantize->pub.finish_pass = finish_pass_1_quant;
 80287f0:	e0bffe17 	ldw	r2,-8(fp)
 80287f4:	00c200f4 	movhi	r3,2051
 80287f8:	18e1cd04 	addi	r3,r3,-30924
 80287fc:	10c00215 	stw	r3,8(r2)
	cquantize->pub.new_color_map = new_color_map_1_quant;
 8028800:	e0bffe17 	ldw	r2,-8(fp)
 8028804:	00c200f4 	movhi	r3,2051
 8028808:	18e1d504 	addi	r3,r3,-30892
 802880c:	10c00315 	stw	r3,12(r2)
	cquantize->fserrors[0] = NULL; /* Flag FS workspace not allocated */
 8028810:	e0bffe17 	ldw	r2,-8(fp)
 8028814:	10001115 	stw	zero,68(r2)
	cquantize->odither[0] = NULL;	/* Also flag odither arrays not allocated */
 8028818:	e0bffe17 	ldw	r2,-8(fp)
 802881c:	10000d15 	stw	zero,52(r2)

	/* Make sure my internal arrays won't overflow */
	if (cinfo->out_color_components > MAX_Q_COMPS)
 8028820:	e0bfff17 	ldw	r2,-4(fp)
 8028824:	10801917 	ldw	r2,100(r2)
 8028828:	10800150 	cmplti	r2,r2,5
 802882c:	10000d1e 	bne	r2,zero,8028864 <jinit_1pass_quantizer+0xc4>
		ERREXIT1(cinfo, JERR_QUANT_COMPONENTS, MAX_Q_COMPS);
 8028830:	e0bfff17 	ldw	r2,-4(fp)
 8028834:	10800017 	ldw	r2,0(r2)
 8028838:	00c00e44 	movi	r3,57
 802883c:	10c00515 	stw	r3,20(r2)
 8028840:	e0bfff17 	ldw	r2,-4(fp)
 8028844:	10800017 	ldw	r2,0(r2)
 8028848:	00c00104 	movi	r3,4
 802884c:	10c00615 	stw	r3,24(r2)
 8028850:	e0bfff17 	ldw	r2,-4(fp)
 8028854:	10800017 	ldw	r2,0(r2)
 8028858:	10800017 	ldw	r2,0(r2)
 802885c:	e13fff17 	ldw	r4,-4(fp)
 8028860:	103ee83a 	callr	r2
	/* Make sure colormap indexes can be represented by JSAMPLEs */
	if (cinfo->desired_number_of_colors > (MAXJSAMPLE+1))
 8028864:	e0bfff17 	ldw	r2,-4(fp)
 8028868:	10801517 	ldw	r2,84(r2)
 802886c:	10804050 	cmplti	r2,r2,257
 8028870:	10000d1e 	bne	r2,zero,80288a8 <jinit_1pass_quantizer+0x108>
		ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXJSAMPLE+1);
 8028874:	e0bfff17 	ldw	r2,-4(fp)
 8028878:	10800017 	ldw	r2,0(r2)
 802887c:	00c00ec4 	movi	r3,59
 8028880:	10c00515 	stw	r3,20(r2)
 8028884:	e0bfff17 	ldw	r2,-4(fp)
 8028888:	10800017 	ldw	r2,0(r2)
 802888c:	00c04004 	movi	r3,256
 8028890:	10c00615 	stw	r3,24(r2)
 8028894:	e0bfff17 	ldw	r2,-4(fp)
 8028898:	10800017 	ldw	r2,0(r2)
 802889c:	10800017 	ldw	r2,0(r2)
 80288a0:	e13fff17 	ldw	r4,-4(fp)
 80288a4:	103ee83a 	callr	r2

	/* Create the colormap and color index table. */
	create_colormap(cinfo);
 80288a8:	e13fff17 	ldw	r4,-4(fp)
 80288ac:	80273340 	call	8027334 <create_colormap>
	create_colorindex(cinfo);
 80288b0:	e13fff17 	ldw	r4,-4(fp)
 80288b4:	80275b80 	call	80275b8 <create_colorindex>
	* We do this now since it is FAR storage and may affect the memory
	* manager's space calculations.  If the user changes to FS dither
	* mode in a later pass, we will allocate the space then, and will
	* possibly overrun the max_memory_to_use setting.
	*/
	if (cinfo->dither_mode == JDITHER_FS)
 80288b8:	e0bfff17 	ldw	r2,-4(fp)
 80288bc:	10801317 	ldw	r2,76(r2)
 80288c0:	10800098 	cmpnei	r2,r2,2
 80288c4:	1000021e 	bne	r2,zero,80288d0 <jinit_1pass_quantizer+0x130>
		alloc_fs_workspace(cinfo);
 80288c8:	e13fff17 	ldw	r4,-4(fp)
 80288cc:	80284ac0 	call	80284ac <alloc_fs_workspace>
}
 80288d0:	e037883a 	mov	sp,fp
 80288d4:	dfc00117 	ldw	ra,4(sp)
 80288d8:	df000017 	ldw	fp,0(sp)
 80288dc:	dec00204 	addi	sp,sp,8
 80288e0:	f800283a 	ret

080288e4 <prescan_quantize>:
*/

METHODDEF(void)
	prescan_quantize (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
	JSAMPARRAY output_buf, int num_rows)
{
 80288e4:	defff404 	addi	sp,sp,-48
 80288e8:	df000b15 	stw	fp,44(sp)
 80288ec:	dc800a15 	stw	r18,40(sp)
 80288f0:	dc400915 	stw	r17,36(sp)
 80288f4:	dc000815 	stw	r16,32(sp)
 80288f8:	df000804 	addi	fp,sp,32
 80288fc:	e13ffc15 	stw	r4,-16(fp)
 8028900:	e17ffd15 	stw	r5,-12(fp)
 8028904:	e1bffe15 	stw	r6,-8(fp)
 8028908:	e1ffff15 	stw	r7,-4(fp)
	my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 802890c:	e0bffc17 	ldw	r2,-16(fp)
 8028910:	10806e17 	ldw	r2,440(r2)
 8028914:	e0bffa15 	stw	r2,-24(fp)
	register JSAMPROW ptr;
	register histptr histp;
	register hist3d histogram = cquantize->histogram;
 8028918:	e0bffa17 	ldw	r2,-24(fp)
 802891c:	14800617 	ldw	r18,24(r2)
	int row;
	JDIMENSION col;
	JDIMENSION width = cinfo->output_width;
 8028920:	e0bffc17 	ldw	r2,-16(fp)
 8028924:	10801717 	ldw	r2,92(r2)
 8028928:	e0bffb15 	stw	r2,-20(fp)

	for (row = 0; row < num_rows; row++) {
 802892c:	e03ff815 	stw	zero,-32(fp)
 8028930:	00003106 	br	80289f8 <prescan_quantize+0x114>
		ptr = input_buf[row];
 8028934:	e0bff817 	ldw	r2,-32(fp)
 8028938:	1085883a 	add	r2,r2,r2
 802893c:	1085883a 	add	r2,r2,r2
 8028940:	e0fffd17 	ldw	r3,-12(fp)
 8028944:	1885883a 	add	r2,r3,r2
 8028948:	14000017 	ldw	r16,0(r2)
		for (col = width; col > 0; col--) {
 802894c:	e0bffb17 	ldw	r2,-20(fp)
 8028950:	e0bff915 	stw	r2,-28(fp)
 8028954:	00002306 	br	80289e4 <prescan_quantize+0x100>
			/* get pixel value and index into the histogram */
			histp = & histogram[GETJSAMPLE(ptr[0]) >> C0_SHIFT]
 8028958:	80800003 	ldbu	r2,0(r16)
 802895c:	10803fcc 	andi	r2,r2,255
 8028960:	1004d0fa 	srli	r2,r2,3
 8028964:	10803fcc 	andi	r2,r2,255
 8028968:	1085883a 	add	r2,r2,r2
 802896c:	1085883a 	add	r2,r2,r2
 8028970:	9085883a 	add	r2,r18,r2
 8028974:	10c00017 	ldw	r3,0(r2)
			[GETJSAMPLE(ptr[1]) >> C1_SHIFT]
 8028978:	80800044 	addi	r2,r16,1
 802897c:	10800003 	ldbu	r2,0(r2)
 8028980:	10803fcc 	andi	r2,r2,255
 8028984:	1004d0ba 	srli	r2,r2,2
 8028988:	10803fcc 	andi	r2,r2,255
 802898c:	100491ba 	slli	r2,r2,6
 8028990:	1887883a 	add	r3,r3,r2
			[GETJSAMPLE(ptr[2]) >> C2_SHIFT];
 8028994:	80800084 	addi	r2,r16,2
 8028998:	10800003 	ldbu	r2,0(r2)
 802899c:	10803fcc 	andi	r2,r2,255
 80289a0:	1004d0fa 	srli	r2,r2,3
 80289a4:	10803fcc 	andi	r2,r2,255

	for (row = 0; row < num_rows; row++) {
		ptr = input_buf[row];
		for (col = width; col > 0; col--) {
			/* get pixel value and index into the histogram */
			histp = & histogram[GETJSAMPLE(ptr[0]) >> C0_SHIFT]
 80289a8:	1085883a 	add	r2,r2,r2
 80289ac:	18a3883a 	add	r17,r3,r2
			[GETJSAMPLE(ptr[1]) >> C1_SHIFT]
			[GETJSAMPLE(ptr[2]) >> C2_SHIFT];
			/* increment, check for overflow and undo increment if so. */
			if (++(*histp) <= 0)
 80289b0:	8880000b 	ldhu	r2,0(r17)
 80289b4:	10800044 	addi	r2,r2,1
 80289b8:	8880000d 	sth	r2,0(r17)
 80289bc:	8880000b 	ldhu	r2,0(r17)
 80289c0:	10bfffcc 	andi	r2,r2,65535
 80289c4:	1000031e 	bne	r2,zero,80289d4 <prescan_quantize+0xf0>
				(*histp)--;
 80289c8:	8880000b 	ldhu	r2,0(r17)
 80289cc:	10bfffc4 	addi	r2,r2,-1
 80289d0:	8880000d 	sth	r2,0(r17)
			ptr += 3;
 80289d4:	840000c4 	addi	r16,r16,3
	JDIMENSION col;
	JDIMENSION width = cinfo->output_width;

	for (row = 0; row < num_rows; row++) {
		ptr = input_buf[row];
		for (col = width; col > 0; col--) {
 80289d8:	e0bff917 	ldw	r2,-28(fp)
 80289dc:	10bfffc4 	addi	r2,r2,-1
 80289e0:	e0bff915 	stw	r2,-28(fp)
 80289e4:	e0bff917 	ldw	r2,-28(fp)
 80289e8:	103fdb1e 	bne	r2,zero,8028958 <prescan_quantize+0x74>
	register hist3d histogram = cquantize->histogram;
	int row;
	JDIMENSION col;
	JDIMENSION width = cinfo->output_width;

	for (row = 0; row < num_rows; row++) {
 80289ec:	e0bff817 	ldw	r2,-32(fp)
 80289f0:	10800044 	addi	r2,r2,1
 80289f4:	e0bff815 	stw	r2,-32(fp)
 80289f8:	e0fff817 	ldw	r3,-32(fp)
 80289fc:	e0bfff17 	ldw	r2,-4(fp)
 8028a00:	18bfcc16 	blt	r3,r2,8028934 <prescan_quantize+0x50>
			if (++(*histp) <= 0)
				(*histp)--;
			ptr += 3;
		}
	}
}
 8028a04:	e037883a 	mov	sp,fp
 8028a08:	df000317 	ldw	fp,12(sp)
 8028a0c:	dc800217 	ldw	r18,8(sp)
 8028a10:	dc400117 	ldw	r17,4(sp)
 8028a14:	dc000017 	ldw	r16,0(sp)
 8028a18:	dec00404 	addi	sp,sp,16
 8028a1c:	f800283a 	ret

08028a20 <find_biggest_color_pop>:

LOCAL(boxptr)
	find_biggest_color_pop (boxptr boxlist, int numboxes)
	/* Find the splittable box with the largest color population */
	/* Returns NULL if no splittable boxes remain */
{
 8028a20:	defff904 	addi	sp,sp,-28
 8028a24:	df000615 	stw	fp,24(sp)
 8028a28:	dc800515 	stw	r18,20(sp)
 8028a2c:	dc400415 	stw	r17,16(sp)
 8028a30:	dc000315 	stw	r16,12(sp)
 8028a34:	df000304 	addi	fp,sp,12
 8028a38:	e13ffe15 	stw	r4,-8(fp)
 8028a3c:	e17fff15 	stw	r5,-4(fp)
	register boxptr boxp;
	register int i;
	register long maxc = 0;
 8028a40:	0025883a 	mov	r18,zero
	boxptr which = NULL;
 8028a44:	e03ffd15 	stw	zero,-12(fp)

	for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 8028a48:	0023883a 	mov	r17,zero
 8028a4c:	e43ffe17 	ldw	r16,-8(fp)
 8028a50:	00000806 	br	8028a74 <find_biggest_color_pop+0x54>
		if (boxp->colorcount > maxc && boxp->volume > 0) {
 8028a54:	80800717 	ldw	r2,28(r16)
 8028a58:	9080040e 	bge	r18,r2,8028a6c <find_biggest_color_pop+0x4c>
 8028a5c:	80800617 	ldw	r2,24(r16)
 8028a60:	0080020e 	bge	zero,r2,8028a6c <find_biggest_color_pop+0x4c>
			which = boxp;
 8028a64:	e43ffd15 	stw	r16,-12(fp)
			maxc = boxp->colorcount;
 8028a68:	84800717 	ldw	r18,28(r16)
	register boxptr boxp;
	register int i;
	register long maxc = 0;
	boxptr which = NULL;

	for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 8028a6c:	8c400044 	addi	r17,r17,1
 8028a70:	84000804 	addi	r16,r16,32
 8028a74:	e0bfff17 	ldw	r2,-4(fp)
 8028a78:	88bff616 	blt	r17,r2,8028a54 <find_biggest_color_pop+0x34>
		if (boxp->colorcount > maxc && boxp->volume > 0) {
			which = boxp;
			maxc = boxp->colorcount;
		}
	}
	return which;
 8028a7c:	e0bffd17 	ldw	r2,-12(fp)
}
 8028a80:	e037883a 	mov	sp,fp
 8028a84:	df000317 	ldw	fp,12(sp)
 8028a88:	dc800217 	ldw	r18,8(sp)
 8028a8c:	dc400117 	ldw	r17,4(sp)
 8028a90:	dc000017 	ldw	r16,0(sp)
 8028a94:	dec00404 	addi	sp,sp,16
 8028a98:	f800283a 	ret

08028a9c <find_biggest_volume>:

LOCAL(boxptr)
	find_biggest_volume (boxptr boxlist, int numboxes)
	/* Find the splittable box with the largest (scaled) volume */
	/* Returns NULL if no splittable boxes remain */
{
 8028a9c:	defff904 	addi	sp,sp,-28
 8028aa0:	df000615 	stw	fp,24(sp)
 8028aa4:	dc800515 	stw	r18,20(sp)
 8028aa8:	dc400415 	stw	r17,16(sp)
 8028aac:	dc000315 	stw	r16,12(sp)
 8028ab0:	df000304 	addi	fp,sp,12
 8028ab4:	e13ffe15 	stw	r4,-8(fp)
 8028ab8:	e17fff15 	stw	r5,-4(fp)
	register boxptr boxp;
	register int i;
	register INT32 maxv = 0;
 8028abc:	0025883a 	mov	r18,zero
	boxptr which = NULL;
 8028ac0:	e03ffd15 	stw	zero,-12(fp)

	for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 8028ac4:	0023883a 	mov	r17,zero
 8028ac8:	e43ffe17 	ldw	r16,-8(fp)
 8028acc:	00000606 	br	8028ae8 <find_biggest_volume+0x4c>
		if (boxp->volume > maxv) {
 8028ad0:	80800617 	ldw	r2,24(r16)
 8028ad4:	9080020e 	bge	r18,r2,8028ae0 <find_biggest_volume+0x44>
			which = boxp;
 8028ad8:	e43ffd15 	stw	r16,-12(fp)
			maxv = boxp->volume;
 8028adc:	84800617 	ldw	r18,24(r16)
	register boxptr boxp;
	register int i;
	register INT32 maxv = 0;
	boxptr which = NULL;

	for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 8028ae0:	8c400044 	addi	r17,r17,1
 8028ae4:	84000804 	addi	r16,r16,32
 8028ae8:	e0bfff17 	ldw	r2,-4(fp)
 8028aec:	88bff816 	blt	r17,r2,8028ad0 <find_biggest_volume+0x34>
		if (boxp->volume > maxv) {
			which = boxp;
			maxv = boxp->volume;
		}
	}
	return which;
 8028af0:	e0bffd17 	ldw	r2,-12(fp)
}
 8028af4:	e037883a 	mov	sp,fp
 8028af8:	df000317 	ldw	fp,12(sp)
 8028afc:	dc800217 	ldw	r18,8(sp)
 8028b00:	dc400117 	ldw	r17,4(sp)
 8028b04:	dc000017 	ldw	r16,0(sp)
 8028b08:	dec00404 	addi	sp,sp,16
 8028b0c:	f800283a 	ret

08028b10 <update_box>:

LOCAL(void)
	update_box (j_decompress_ptr cinfo, boxptr boxp)
	/* Shrink the min/max bounds of a box to enclose only nonzero elements, */
	/* and recompute its volume and population */
{
 8028b10:	deffeb04 	addi	sp,sp,-84
 8028b14:	dfc01415 	stw	ra,80(sp)
 8028b18:	df001315 	stw	fp,76(sp)
 8028b1c:	dc001215 	stw	r16,72(sp)
 8028b20:	df001204 	addi	fp,sp,72
 8028b24:	e13ffe15 	stw	r4,-8(fp)
 8028b28:	e17fff15 	stw	r5,-4(fp)
	my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8028b2c:	e0bffe17 	ldw	r2,-8(fp)
 8028b30:	10806e17 	ldw	r2,440(r2)
 8028b34:	e0bff915 	stw	r2,-28(fp)
	hist3d histogram = cquantize->histogram;
 8028b38:	e0bff917 	ldw	r2,-28(fp)
 8028b3c:	10800617 	ldw	r2,24(r2)
 8028b40:	e0bffa15 	stw	r2,-24(fp)
	int c0,c1,c2;
	int c0min,c0max,c1min,c1max,c2min,c2max;
	INT32 dist0,dist1,dist2;
	long ccount;

	c0min = boxp->c0min;  c0max = boxp->c0max;
 8028b44:	e0bfff17 	ldw	r2,-4(fp)
 8028b48:	10800017 	ldw	r2,0(r2)
 8028b4c:	e0bff215 	stw	r2,-56(fp)
 8028b50:	e0bfff17 	ldw	r2,-4(fp)
 8028b54:	10800117 	ldw	r2,4(r2)
 8028b58:	e0bff315 	stw	r2,-52(fp)
	c1min = boxp->c1min;  c1max = boxp->c1max;
 8028b5c:	e0bfff17 	ldw	r2,-4(fp)
 8028b60:	10800217 	ldw	r2,8(r2)
 8028b64:	e0bff415 	stw	r2,-48(fp)
 8028b68:	e0bfff17 	ldw	r2,-4(fp)
 8028b6c:	10800317 	ldw	r2,12(r2)
 8028b70:	e0bff515 	stw	r2,-44(fp)
	c2min = boxp->c2min;  c2max = boxp->c2max;
 8028b74:	e0bfff17 	ldw	r2,-4(fp)
 8028b78:	10800417 	ldw	r2,16(r2)
 8028b7c:	e0bff615 	stw	r2,-40(fp)
 8028b80:	e0bfff17 	ldw	r2,-4(fp)
 8028b84:	10800517 	ldw	r2,20(r2)
 8028b88:	e0bff715 	stw	r2,-36(fp)

	if (c0max > c0min)
 8028b8c:	e0bff317 	ldw	r2,-52(fp)
 8028b90:	e0fff217 	ldw	r3,-56(fp)
 8028b94:	1880370e 	bge	r3,r2,8028c74 <update_box+0x164>
		for (c0 = c0min; c0 <= c0max; c0++)
 8028b98:	e0bff217 	ldw	r2,-56(fp)
 8028b9c:	e0bfef15 	stw	r2,-68(fp)
 8028ba0:	00003106 	br	8028c68 <update_box+0x158>
			for (c1 = c1min; c1 <= c1max; c1++) {
 8028ba4:	e0bff417 	ldw	r2,-48(fp)
 8028ba8:	e0bff015 	stw	r2,-64(fp)
 8028bac:	00002806 	br	8028c50 <update_box+0x140>
				histp = & histogram[c0][c1][c2min];
 8028bb0:	e0bfef17 	ldw	r2,-68(fp)
 8028bb4:	1085883a 	add	r2,r2,r2
 8028bb8:	1085883a 	add	r2,r2,r2
 8028bbc:	e0fffa17 	ldw	r3,-24(fp)
 8028bc0:	1885883a 	add	r2,r3,r2
 8028bc4:	10c00017 	ldw	r3,0(r2)
 8028bc8:	e0bff017 	ldw	r2,-64(fp)
 8028bcc:	100491ba 	slli	r2,r2,6
 8028bd0:	1887883a 	add	r3,r3,r2
 8028bd4:	e0bff617 	ldw	r2,-40(fp)
 8028bd8:	1085883a 	add	r2,r2,r2
 8028bdc:	1885883a 	add	r2,r3,r2
 8028be0:	e0bfee15 	stw	r2,-72(fp)
				for (c2 = c2min; c2 <= c2max; c2++)
 8028be4:	e0bff617 	ldw	r2,-40(fp)
 8028be8:	e0bff115 	stw	r2,-60(fp)
 8028bec:	00001206 	br	8028c38 <update_box+0x128>
					if (*histp++ != 0) {
 8028bf0:	e0bfee17 	ldw	r2,-72(fp)
 8028bf4:	1080000b 	ldhu	r2,0(r2)
 8028bf8:	10bfffcc 	andi	r2,r2,65535
 8028bfc:	1004c03a 	cmpne	r2,r2,zero
 8028c00:	e0ffee17 	ldw	r3,-72(fp)
 8028c04:	18c00084 	addi	r3,r3,2
 8028c08:	e0ffee15 	stw	r3,-72(fp)
 8028c0c:	10803fcc 	andi	r2,r2,255
 8028c10:	10000626 	beq	r2,zero,8028c2c <update_box+0x11c>
						boxp->c0min = c0min = c0;
 8028c14:	e0bfef17 	ldw	r2,-68(fp)
 8028c18:	e0bff215 	stw	r2,-56(fp)
 8028c1c:	e0bfff17 	ldw	r2,-4(fp)
 8028c20:	e0fff217 	ldw	r3,-56(fp)
 8028c24:	10c00015 	stw	r3,0(r2)
						goto have_c0min;
 8028c28:	00001206 	br	8028c74 <update_box+0x164>

	if (c0max > c0min)
		for (c0 = c0min; c0 <= c0max; c0++)
			for (c1 = c1min; c1 <= c1max; c1++) {
				histp = & histogram[c0][c1][c2min];
				for (c2 = c2min; c2 <= c2max; c2++)
 8028c2c:	e0bff117 	ldw	r2,-60(fp)
 8028c30:	10800044 	addi	r2,r2,1
 8028c34:	e0bff115 	stw	r2,-60(fp)
 8028c38:	e0bff117 	ldw	r2,-60(fp)
 8028c3c:	e0fff717 	ldw	r3,-36(fp)
 8028c40:	18bfeb0e 	bge	r3,r2,8028bf0 <update_box+0xe0>
	c1min = boxp->c1min;  c1max = boxp->c1max;
	c2min = boxp->c2min;  c2max = boxp->c2max;

	if (c0max > c0min)
		for (c0 = c0min; c0 <= c0max; c0++)
			for (c1 = c1min; c1 <= c1max; c1++) {
 8028c44:	e0bff017 	ldw	r2,-64(fp)
 8028c48:	10800044 	addi	r2,r2,1
 8028c4c:	e0bff015 	stw	r2,-64(fp)
 8028c50:	e0bff017 	ldw	r2,-64(fp)
 8028c54:	e0fff517 	ldw	r3,-44(fp)
 8028c58:	18bfd50e 	bge	r3,r2,8028bb0 <update_box+0xa0>
	c0min = boxp->c0min;  c0max = boxp->c0max;
	c1min = boxp->c1min;  c1max = boxp->c1max;
	c2min = boxp->c2min;  c2max = boxp->c2max;

	if (c0max > c0min)
		for (c0 = c0min; c0 <= c0max; c0++)
 8028c5c:	e0bfef17 	ldw	r2,-68(fp)
 8028c60:	10800044 	addi	r2,r2,1
 8028c64:	e0bfef15 	stw	r2,-68(fp)
 8028c68:	e0bfef17 	ldw	r2,-68(fp)
 8028c6c:	e0fff317 	ldw	r3,-52(fp)
 8028c70:	18bfcc0e 	bge	r3,r2,8028ba4 <update_box+0x94>
						boxp->c0min = c0min = c0;
						goto have_c0min;
					}
			}
have_c0min:
			if (c0max > c0min)
 8028c74:	e0bff317 	ldw	r2,-52(fp)
 8028c78:	e0fff217 	ldw	r3,-56(fp)
 8028c7c:	1880370e 	bge	r3,r2,8028d5c <update_box+0x24c>
				for (c0 = c0max; c0 >= c0min; c0--)
 8028c80:	e0bff317 	ldw	r2,-52(fp)
 8028c84:	e0bfef15 	stw	r2,-68(fp)
 8028c88:	00003106 	br	8028d50 <update_box+0x240>
					for (c1 = c1min; c1 <= c1max; c1++) {
 8028c8c:	e0bff417 	ldw	r2,-48(fp)
 8028c90:	e0bff015 	stw	r2,-64(fp)
 8028c94:	00002806 	br	8028d38 <update_box+0x228>
						histp = & histogram[c0][c1][c2min];
 8028c98:	e0bfef17 	ldw	r2,-68(fp)
 8028c9c:	1085883a 	add	r2,r2,r2
 8028ca0:	1085883a 	add	r2,r2,r2
 8028ca4:	e0fffa17 	ldw	r3,-24(fp)
 8028ca8:	1885883a 	add	r2,r3,r2
 8028cac:	10c00017 	ldw	r3,0(r2)
 8028cb0:	e0bff017 	ldw	r2,-64(fp)
 8028cb4:	100491ba 	slli	r2,r2,6
 8028cb8:	1887883a 	add	r3,r3,r2
 8028cbc:	e0bff617 	ldw	r2,-40(fp)
 8028cc0:	1085883a 	add	r2,r2,r2
 8028cc4:	1885883a 	add	r2,r3,r2
 8028cc8:	e0bfee15 	stw	r2,-72(fp)
						for (c2 = c2min; c2 <= c2max; c2++)
 8028ccc:	e0bff617 	ldw	r2,-40(fp)
 8028cd0:	e0bff115 	stw	r2,-60(fp)
 8028cd4:	00001206 	br	8028d20 <update_box+0x210>
							if (*histp++ != 0) {
 8028cd8:	e0bfee17 	ldw	r2,-72(fp)
 8028cdc:	1080000b 	ldhu	r2,0(r2)
 8028ce0:	10bfffcc 	andi	r2,r2,65535
 8028ce4:	1004c03a 	cmpne	r2,r2,zero
 8028ce8:	e0ffee17 	ldw	r3,-72(fp)
 8028cec:	18c00084 	addi	r3,r3,2
 8028cf0:	e0ffee15 	stw	r3,-72(fp)
 8028cf4:	10803fcc 	andi	r2,r2,255
 8028cf8:	10000626 	beq	r2,zero,8028d14 <update_box+0x204>
								boxp->c0max = c0max = c0;
 8028cfc:	e0bfef17 	ldw	r2,-68(fp)
 8028d00:	e0bff315 	stw	r2,-52(fp)
 8028d04:	e0bfff17 	ldw	r2,-4(fp)
 8028d08:	e0fff317 	ldw	r3,-52(fp)
 8028d0c:	10c00115 	stw	r3,4(r2)
								goto have_c0max;
 8028d10:	00001206 	br	8028d5c <update_box+0x24c>
have_c0min:
			if (c0max > c0min)
				for (c0 = c0max; c0 >= c0min; c0--)
					for (c1 = c1min; c1 <= c1max; c1++) {
						histp = & histogram[c0][c1][c2min];
						for (c2 = c2min; c2 <= c2max; c2++)
 8028d14:	e0bff117 	ldw	r2,-60(fp)
 8028d18:	10800044 	addi	r2,r2,1
 8028d1c:	e0bff115 	stw	r2,-60(fp)
 8028d20:	e0bff117 	ldw	r2,-60(fp)
 8028d24:	e0fff717 	ldw	r3,-36(fp)
 8028d28:	18bfeb0e 	bge	r3,r2,8028cd8 <update_box+0x1c8>
					}
			}
have_c0min:
			if (c0max > c0min)
				for (c0 = c0max; c0 >= c0min; c0--)
					for (c1 = c1min; c1 <= c1max; c1++) {
 8028d2c:	e0bff017 	ldw	r2,-64(fp)
 8028d30:	10800044 	addi	r2,r2,1
 8028d34:	e0bff015 	stw	r2,-64(fp)
 8028d38:	e0bff017 	ldw	r2,-64(fp)
 8028d3c:	e0fff517 	ldw	r3,-44(fp)
 8028d40:	18bfd50e 	bge	r3,r2,8028c98 <update_box+0x188>
						goto have_c0min;
					}
			}
have_c0min:
			if (c0max > c0min)
				for (c0 = c0max; c0 >= c0min; c0--)
 8028d44:	e0bfef17 	ldw	r2,-68(fp)
 8028d48:	10bfffc4 	addi	r2,r2,-1
 8028d4c:	e0bfef15 	stw	r2,-68(fp)
 8028d50:	e0ffef17 	ldw	r3,-68(fp)
 8028d54:	e0bff217 	ldw	r2,-56(fp)
 8028d58:	18bfcc0e 	bge	r3,r2,8028c8c <update_box+0x17c>
								boxp->c0max = c0max = c0;
								goto have_c0max;
							}
					}
have_c0max:
					if (c1max > c1min)
 8028d5c:	e0bff517 	ldw	r2,-44(fp)
 8028d60:	e0fff417 	ldw	r3,-48(fp)
 8028d64:	1880370e 	bge	r3,r2,8028e44 <update_box+0x334>
						for (c1 = c1min; c1 <= c1max; c1++)
 8028d68:	e0bff417 	ldw	r2,-48(fp)
 8028d6c:	e0bff015 	stw	r2,-64(fp)
 8028d70:	00003106 	br	8028e38 <update_box+0x328>
							for (c0 = c0min; c0 <= c0max; c0++) {
 8028d74:	e0bff217 	ldw	r2,-56(fp)
 8028d78:	e0bfef15 	stw	r2,-68(fp)
 8028d7c:	00002806 	br	8028e20 <update_box+0x310>
								histp = & histogram[c0][c1][c2min];
 8028d80:	e0bfef17 	ldw	r2,-68(fp)
 8028d84:	1085883a 	add	r2,r2,r2
 8028d88:	1085883a 	add	r2,r2,r2
 8028d8c:	e0fffa17 	ldw	r3,-24(fp)
 8028d90:	1885883a 	add	r2,r3,r2
 8028d94:	10c00017 	ldw	r3,0(r2)
 8028d98:	e0bff017 	ldw	r2,-64(fp)
 8028d9c:	100491ba 	slli	r2,r2,6
 8028da0:	1887883a 	add	r3,r3,r2
 8028da4:	e0bff617 	ldw	r2,-40(fp)
 8028da8:	1085883a 	add	r2,r2,r2
 8028dac:	1885883a 	add	r2,r3,r2
 8028db0:	e0bfee15 	stw	r2,-72(fp)
								for (c2 = c2min; c2 <= c2max; c2++)
 8028db4:	e0bff617 	ldw	r2,-40(fp)
 8028db8:	e0bff115 	stw	r2,-60(fp)
 8028dbc:	00001206 	br	8028e08 <update_box+0x2f8>
									if (*histp++ != 0) {
 8028dc0:	e0bfee17 	ldw	r2,-72(fp)
 8028dc4:	1080000b 	ldhu	r2,0(r2)
 8028dc8:	10bfffcc 	andi	r2,r2,65535
 8028dcc:	1004c03a 	cmpne	r2,r2,zero
 8028dd0:	e0ffee17 	ldw	r3,-72(fp)
 8028dd4:	18c00084 	addi	r3,r3,2
 8028dd8:	e0ffee15 	stw	r3,-72(fp)
 8028ddc:	10803fcc 	andi	r2,r2,255
 8028de0:	10000626 	beq	r2,zero,8028dfc <update_box+0x2ec>
										boxp->c1min = c1min = c1;
 8028de4:	e0bff017 	ldw	r2,-64(fp)
 8028de8:	e0bff415 	stw	r2,-48(fp)
 8028dec:	e0bfff17 	ldw	r2,-4(fp)
 8028df0:	e0fff417 	ldw	r3,-48(fp)
 8028df4:	10c00215 	stw	r3,8(r2)
										goto have_c1min;
 8028df8:	00001206 	br	8028e44 <update_box+0x334>
have_c0max:
					if (c1max > c1min)
						for (c1 = c1min; c1 <= c1max; c1++)
							for (c0 = c0min; c0 <= c0max; c0++) {
								histp = & histogram[c0][c1][c2min];
								for (c2 = c2min; c2 <= c2max; c2++)
 8028dfc:	e0bff117 	ldw	r2,-60(fp)
 8028e00:	10800044 	addi	r2,r2,1
 8028e04:	e0bff115 	stw	r2,-60(fp)
 8028e08:	e0bff117 	ldw	r2,-60(fp)
 8028e0c:	e0fff717 	ldw	r3,-36(fp)
 8028e10:	18bfeb0e 	bge	r3,r2,8028dc0 <update_box+0x2b0>
							}
					}
have_c0max:
					if (c1max > c1min)
						for (c1 = c1min; c1 <= c1max; c1++)
							for (c0 = c0min; c0 <= c0max; c0++) {
 8028e14:	e0bfef17 	ldw	r2,-68(fp)
 8028e18:	10800044 	addi	r2,r2,1
 8028e1c:	e0bfef15 	stw	r2,-68(fp)
 8028e20:	e0bfef17 	ldw	r2,-68(fp)
 8028e24:	e0fff317 	ldw	r3,-52(fp)
 8028e28:	18bfd50e 	bge	r3,r2,8028d80 <update_box+0x270>
								goto have_c0max;
							}
					}
have_c0max:
					if (c1max > c1min)
						for (c1 = c1min; c1 <= c1max; c1++)
 8028e2c:	e0bff017 	ldw	r2,-64(fp)
 8028e30:	10800044 	addi	r2,r2,1
 8028e34:	e0bff015 	stw	r2,-64(fp)
 8028e38:	e0bff017 	ldw	r2,-64(fp)
 8028e3c:	e0fff517 	ldw	r3,-44(fp)
 8028e40:	18bfcc0e 	bge	r3,r2,8028d74 <update_box+0x264>
										boxp->c1min = c1min = c1;
										goto have_c1min;
									}
							}
have_c1min:
							if (c1max > c1min)
 8028e44:	e0bff517 	ldw	r2,-44(fp)
 8028e48:	e0fff417 	ldw	r3,-48(fp)
 8028e4c:	1880370e 	bge	r3,r2,8028f2c <update_box+0x41c>
								for (c1 = c1max; c1 >= c1min; c1--)
 8028e50:	e0bff517 	ldw	r2,-44(fp)
 8028e54:	e0bff015 	stw	r2,-64(fp)
 8028e58:	00003106 	br	8028f20 <update_box+0x410>
									for (c0 = c0min; c0 <= c0max; c0++) {
 8028e5c:	e0bff217 	ldw	r2,-56(fp)
 8028e60:	e0bfef15 	stw	r2,-68(fp)
 8028e64:	00002806 	br	8028f08 <update_box+0x3f8>
										histp = & histogram[c0][c1][c2min];
 8028e68:	e0bfef17 	ldw	r2,-68(fp)
 8028e6c:	1085883a 	add	r2,r2,r2
 8028e70:	1085883a 	add	r2,r2,r2
 8028e74:	e0fffa17 	ldw	r3,-24(fp)
 8028e78:	1885883a 	add	r2,r3,r2
 8028e7c:	10c00017 	ldw	r3,0(r2)
 8028e80:	e0bff017 	ldw	r2,-64(fp)
 8028e84:	100491ba 	slli	r2,r2,6
 8028e88:	1887883a 	add	r3,r3,r2
 8028e8c:	e0bff617 	ldw	r2,-40(fp)
 8028e90:	1085883a 	add	r2,r2,r2
 8028e94:	1885883a 	add	r2,r3,r2
 8028e98:	e0bfee15 	stw	r2,-72(fp)
										for (c2 = c2min; c2 <= c2max; c2++)
 8028e9c:	e0bff617 	ldw	r2,-40(fp)
 8028ea0:	e0bff115 	stw	r2,-60(fp)
 8028ea4:	00001206 	br	8028ef0 <update_box+0x3e0>
											if (*histp++ != 0) {
 8028ea8:	e0bfee17 	ldw	r2,-72(fp)
 8028eac:	1080000b 	ldhu	r2,0(r2)
 8028eb0:	10bfffcc 	andi	r2,r2,65535
 8028eb4:	1004c03a 	cmpne	r2,r2,zero
 8028eb8:	e0ffee17 	ldw	r3,-72(fp)
 8028ebc:	18c00084 	addi	r3,r3,2
 8028ec0:	e0ffee15 	stw	r3,-72(fp)
 8028ec4:	10803fcc 	andi	r2,r2,255
 8028ec8:	10000626 	beq	r2,zero,8028ee4 <update_box+0x3d4>
												boxp->c1max = c1max = c1;
 8028ecc:	e0bff017 	ldw	r2,-64(fp)
 8028ed0:	e0bff515 	stw	r2,-44(fp)
 8028ed4:	e0bfff17 	ldw	r2,-4(fp)
 8028ed8:	e0fff517 	ldw	r3,-44(fp)
 8028edc:	10c00315 	stw	r3,12(r2)
												goto have_c1max;
 8028ee0:	00001206 	br	8028f2c <update_box+0x41c>
have_c1min:
							if (c1max > c1min)
								for (c1 = c1max; c1 >= c1min; c1--)
									for (c0 = c0min; c0 <= c0max; c0++) {
										histp = & histogram[c0][c1][c2min];
										for (c2 = c2min; c2 <= c2max; c2++)
 8028ee4:	e0bff117 	ldw	r2,-60(fp)
 8028ee8:	10800044 	addi	r2,r2,1
 8028eec:	e0bff115 	stw	r2,-60(fp)
 8028ef0:	e0bff117 	ldw	r2,-60(fp)
 8028ef4:	e0fff717 	ldw	r3,-36(fp)
 8028ef8:	18bfeb0e 	bge	r3,r2,8028ea8 <update_box+0x398>
									}
							}
have_c1min:
							if (c1max > c1min)
								for (c1 = c1max; c1 >= c1min; c1--)
									for (c0 = c0min; c0 <= c0max; c0++) {
 8028efc:	e0bfef17 	ldw	r2,-68(fp)
 8028f00:	10800044 	addi	r2,r2,1
 8028f04:	e0bfef15 	stw	r2,-68(fp)
 8028f08:	e0bfef17 	ldw	r2,-68(fp)
 8028f0c:	e0fff317 	ldw	r3,-52(fp)
 8028f10:	18bfd50e 	bge	r3,r2,8028e68 <update_box+0x358>
										goto have_c1min;
									}
							}
have_c1min:
							if (c1max > c1min)
								for (c1 = c1max; c1 >= c1min; c1--)
 8028f14:	e0bff017 	ldw	r2,-64(fp)
 8028f18:	10bfffc4 	addi	r2,r2,-1
 8028f1c:	e0bff015 	stw	r2,-64(fp)
 8028f20:	e0fff017 	ldw	r3,-64(fp)
 8028f24:	e0bff417 	ldw	r2,-48(fp)
 8028f28:	18bfcc0e 	bge	r3,r2,8028e5c <update_box+0x34c>
												boxp->c1max = c1max = c1;
												goto have_c1max;
											}
									}
have_c1max:
									if (c2max > c2min)
 8028f2c:	e0bff717 	ldw	r2,-36(fp)
 8028f30:	e0fff617 	ldw	r3,-40(fp)
 8028f34:	1880350e 	bge	r3,r2,802900c <update_box+0x4fc>
										for (c2 = c2min; c2 <= c2max; c2++)
 8028f38:	e0bff617 	ldw	r2,-40(fp)
 8028f3c:	e0bff115 	stw	r2,-60(fp)
 8028f40:	00002f06 	br	8029000 <update_box+0x4f0>
											for (c0 = c0min; c0 <= c0max; c0++) {
 8028f44:	e0bff217 	ldw	r2,-56(fp)
 8028f48:	e0bfef15 	stw	r2,-68(fp)
 8028f4c:	00002606 	br	8028fe8 <update_box+0x4d8>
												histp = & histogram[c0][c1min][c2];
 8028f50:	e0bfef17 	ldw	r2,-68(fp)
 8028f54:	1085883a 	add	r2,r2,r2
 8028f58:	1085883a 	add	r2,r2,r2
 8028f5c:	e0fffa17 	ldw	r3,-24(fp)
 8028f60:	1885883a 	add	r2,r3,r2
 8028f64:	10c00017 	ldw	r3,0(r2)
 8028f68:	e0bff417 	ldw	r2,-48(fp)
 8028f6c:	100491ba 	slli	r2,r2,6
 8028f70:	1887883a 	add	r3,r3,r2
 8028f74:	e0bff117 	ldw	r2,-60(fp)
 8028f78:	1085883a 	add	r2,r2,r2
 8028f7c:	1885883a 	add	r2,r3,r2
 8028f80:	e0bfee15 	stw	r2,-72(fp)
												for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8028f84:	e0bff417 	ldw	r2,-48(fp)
 8028f88:	e0bff015 	stw	r2,-64(fp)
 8028f8c:	00001006 	br	8028fd0 <update_box+0x4c0>
													if (*histp != 0) {
 8028f90:	e0bfee17 	ldw	r2,-72(fp)
 8028f94:	1080000b 	ldhu	r2,0(r2)
 8028f98:	10bfffcc 	andi	r2,r2,65535
 8028f9c:	10000626 	beq	r2,zero,8028fb8 <update_box+0x4a8>
														boxp->c2min = c2min = c2;
 8028fa0:	e0bff117 	ldw	r2,-60(fp)
 8028fa4:	e0bff615 	stw	r2,-40(fp)
 8028fa8:	e0bfff17 	ldw	r2,-4(fp)
 8028fac:	e0fff617 	ldw	r3,-40(fp)
 8028fb0:	10c00415 	stw	r3,16(r2)
														goto have_c2min;
 8028fb4:	00001506 	br	802900c <update_box+0x4fc>
have_c1max:
									if (c2max > c2min)
										for (c2 = c2min; c2 <= c2max; c2++)
											for (c0 = c0min; c0 <= c0max; c0++) {
												histp = & histogram[c0][c1min][c2];
												for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8028fb8:	e0bff017 	ldw	r2,-64(fp)
 8028fbc:	10800044 	addi	r2,r2,1
 8028fc0:	e0bff015 	stw	r2,-64(fp)
 8028fc4:	e0bfee17 	ldw	r2,-72(fp)
 8028fc8:	10801004 	addi	r2,r2,64
 8028fcc:	e0bfee15 	stw	r2,-72(fp)
 8028fd0:	e0bff017 	ldw	r2,-64(fp)
 8028fd4:	e0fff517 	ldw	r3,-44(fp)
 8028fd8:	18bfed0e 	bge	r3,r2,8028f90 <update_box+0x480>
											}
									}
have_c1max:
									if (c2max > c2min)
										for (c2 = c2min; c2 <= c2max; c2++)
											for (c0 = c0min; c0 <= c0max; c0++) {
 8028fdc:	e0bfef17 	ldw	r2,-68(fp)
 8028fe0:	10800044 	addi	r2,r2,1
 8028fe4:	e0bfef15 	stw	r2,-68(fp)
 8028fe8:	e0bfef17 	ldw	r2,-68(fp)
 8028fec:	e0fff317 	ldw	r3,-52(fp)
 8028ff0:	18bfd70e 	bge	r3,r2,8028f50 <update_box+0x440>
												goto have_c1max;
											}
									}
have_c1max:
									if (c2max > c2min)
										for (c2 = c2min; c2 <= c2max; c2++)
 8028ff4:	e0bff117 	ldw	r2,-60(fp)
 8028ff8:	10800044 	addi	r2,r2,1
 8028ffc:	e0bff115 	stw	r2,-60(fp)
 8029000:	e0bff117 	ldw	r2,-60(fp)
 8029004:	e0fff717 	ldw	r3,-36(fp)
 8029008:	18bfce0e 	bge	r3,r2,8028f44 <update_box+0x434>
														boxp->c2min = c2min = c2;
														goto have_c2min;
													}
											}
have_c2min:
											if (c2max > c2min)
 802900c:	e0bff717 	ldw	r2,-36(fp)
 8029010:	e0fff617 	ldw	r3,-40(fp)
 8029014:	1880350e 	bge	r3,r2,80290ec <update_box+0x5dc>
												for (c2 = c2max; c2 >= c2min; c2--)
 8029018:	e0bff717 	ldw	r2,-36(fp)
 802901c:	e0bff115 	stw	r2,-60(fp)
 8029020:	00002f06 	br	80290e0 <update_box+0x5d0>
													for (c0 = c0min; c0 <= c0max; c0++) {
 8029024:	e0bff217 	ldw	r2,-56(fp)
 8029028:	e0bfef15 	stw	r2,-68(fp)
 802902c:	00002606 	br	80290c8 <update_box+0x5b8>
														histp = & histogram[c0][c1min][c2];
 8029030:	e0bfef17 	ldw	r2,-68(fp)
 8029034:	1085883a 	add	r2,r2,r2
 8029038:	1085883a 	add	r2,r2,r2
 802903c:	e0fffa17 	ldw	r3,-24(fp)
 8029040:	1885883a 	add	r2,r3,r2
 8029044:	10c00017 	ldw	r3,0(r2)
 8029048:	e0bff417 	ldw	r2,-48(fp)
 802904c:	100491ba 	slli	r2,r2,6
 8029050:	1887883a 	add	r3,r3,r2
 8029054:	e0bff117 	ldw	r2,-60(fp)
 8029058:	1085883a 	add	r2,r2,r2
 802905c:	1885883a 	add	r2,r3,r2
 8029060:	e0bfee15 	stw	r2,-72(fp)
														for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8029064:	e0bff417 	ldw	r2,-48(fp)
 8029068:	e0bff015 	stw	r2,-64(fp)
 802906c:	00001006 	br	80290b0 <update_box+0x5a0>
															if (*histp != 0) {
 8029070:	e0bfee17 	ldw	r2,-72(fp)
 8029074:	1080000b 	ldhu	r2,0(r2)
 8029078:	10bfffcc 	andi	r2,r2,65535
 802907c:	10000626 	beq	r2,zero,8029098 <update_box+0x588>
																boxp->c2max = c2max = c2;
 8029080:	e0bff117 	ldw	r2,-60(fp)
 8029084:	e0bff715 	stw	r2,-36(fp)
 8029088:	e0bfff17 	ldw	r2,-4(fp)
 802908c:	e0fff717 	ldw	r3,-36(fp)
 8029090:	10c00515 	stw	r3,20(r2)
																goto have_c2max;
 8029094:	00001506 	br	80290ec <update_box+0x5dc>
have_c2min:
											if (c2max > c2min)
												for (c2 = c2max; c2 >= c2min; c2--)
													for (c0 = c0min; c0 <= c0max; c0++) {
														histp = & histogram[c0][c1min][c2];
														for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8029098:	e0bff017 	ldw	r2,-64(fp)
 802909c:	10800044 	addi	r2,r2,1
 80290a0:	e0bff015 	stw	r2,-64(fp)
 80290a4:	e0bfee17 	ldw	r2,-72(fp)
 80290a8:	10801004 	addi	r2,r2,64
 80290ac:	e0bfee15 	stw	r2,-72(fp)
 80290b0:	e0bff017 	ldw	r2,-64(fp)
 80290b4:	e0fff517 	ldw	r3,-44(fp)
 80290b8:	18bfed0e 	bge	r3,r2,8029070 <update_box+0x560>
													}
											}
have_c2min:
											if (c2max > c2min)
												for (c2 = c2max; c2 >= c2min; c2--)
													for (c0 = c0min; c0 <= c0max; c0++) {
 80290bc:	e0bfef17 	ldw	r2,-68(fp)
 80290c0:	10800044 	addi	r2,r2,1
 80290c4:	e0bfef15 	stw	r2,-68(fp)
 80290c8:	e0bfef17 	ldw	r2,-68(fp)
 80290cc:	e0fff317 	ldw	r3,-52(fp)
 80290d0:	18bfd70e 	bge	r3,r2,8029030 <update_box+0x520>
														goto have_c2min;
													}
											}
have_c2min:
											if (c2max > c2min)
												for (c2 = c2max; c2 >= c2min; c2--)
 80290d4:	e0bff117 	ldw	r2,-60(fp)
 80290d8:	10bfffc4 	addi	r2,r2,-1
 80290dc:	e0bff115 	stw	r2,-60(fp)
 80290e0:	e0fff117 	ldw	r3,-60(fp)
 80290e4:	e0bff617 	ldw	r2,-40(fp)
 80290e8:	18bfce0e 	bge	r3,r2,8029024 <update_box+0x514>
													* a box is splittable iff norm > 0.
													* Since the differences are expressed in histogram-cell units,
													* we have to shift back to JSAMPLE units to get consistent distances;
													* after which, we scale according to the selected distance scale factors.
													*/
													dist0 = ((c0max - c0min) << C0_SHIFT) * C0_SCALE;
 80290ec:	e0fff317 	ldw	r3,-52(fp)
 80290f0:	e0bff217 	ldw	r2,-56(fp)
 80290f4:	1885c83a 	sub	r2,r3,r2
 80290f8:	100490fa 	slli	r2,r2,3
 80290fc:	1085883a 	add	r2,r2,r2
 8029100:	e0bffb15 	stw	r2,-20(fp)
													dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 8029104:	e0fff517 	ldw	r3,-44(fp)
 8029108:	e0bff417 	ldw	r2,-48(fp)
 802910c:	1885c83a 	sub	r2,r3,r2
 8029110:	1085883a 	add	r2,r2,r2
 8029114:	1085883a 	add	r2,r2,r2
 8029118:	1007883a 	mov	r3,r2
 802911c:	1805883a 	mov	r2,r3
 8029120:	1085883a 	add	r2,r2,r2
 8029124:	10c5883a 	add	r2,r2,r3
 8029128:	e0bffc15 	stw	r2,-16(fp)
													dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
 802912c:	e0fff717 	ldw	r3,-36(fp)
 8029130:	e0bff617 	ldw	r2,-40(fp)
 8029134:	1885c83a 	sub	r2,r3,r2
 8029138:	100490fa 	slli	r2,r2,3
 802913c:	e0bffd15 	stw	r2,-12(fp)
													boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
 8029140:	e13ffb17 	ldw	r4,-20(fp)
 8029144:	e17ffb17 	ldw	r5,-20(fp)
 8029148:	802c2180 	call	802c218 <__mulsi3>
 802914c:	1021883a 	mov	r16,r2
 8029150:	e13ffc17 	ldw	r4,-16(fp)
 8029154:	e17ffc17 	ldw	r5,-16(fp)
 8029158:	802c2180 	call	802c218 <__mulsi3>
 802915c:	80a1883a 	add	r16,r16,r2
 8029160:	e13ffd17 	ldw	r4,-12(fp)
 8029164:	e17ffd17 	ldw	r5,-12(fp)
 8029168:	802c2180 	call	802c218 <__mulsi3>
 802916c:	8087883a 	add	r3,r16,r2
 8029170:	e0bfff17 	ldw	r2,-4(fp)
 8029174:	10c00615 	stw	r3,24(r2)

													/* Now scan remaining volume of box and compute population */
													ccount = 0;
 8029178:	e03ff815 	stw	zero,-32(fp)
													for (c0 = c0min; c0 <= c0max; c0++)
 802917c:	e0bff217 	ldw	r2,-56(fp)
 8029180:	e0bfef15 	stw	r2,-68(fp)
 8029184:	00002c06 	br	8029238 <update_box+0x728>
														for (c1 = c1min; c1 <= c1max; c1++) {
 8029188:	e0bff417 	ldw	r2,-48(fp)
 802918c:	e0bff015 	stw	r2,-64(fp)
 8029190:	00002306 	br	8029220 <update_box+0x710>
															histp = & histogram[c0][c1][c2min];
 8029194:	e0bfef17 	ldw	r2,-68(fp)
 8029198:	1085883a 	add	r2,r2,r2
 802919c:	1085883a 	add	r2,r2,r2
 80291a0:	e0fffa17 	ldw	r3,-24(fp)
 80291a4:	1885883a 	add	r2,r3,r2
 80291a8:	10c00017 	ldw	r3,0(r2)
 80291ac:	e0bff017 	ldw	r2,-64(fp)
 80291b0:	100491ba 	slli	r2,r2,6
 80291b4:	1887883a 	add	r3,r3,r2
 80291b8:	e0bff617 	ldw	r2,-40(fp)
 80291bc:	1085883a 	add	r2,r2,r2
 80291c0:	1885883a 	add	r2,r3,r2
 80291c4:	e0bfee15 	stw	r2,-72(fp)
															for (c2 = c2min; c2 <= c2max; c2++, histp++)
 80291c8:	e0bff617 	ldw	r2,-40(fp)
 80291cc:	e0bff115 	stw	r2,-60(fp)
 80291d0:	00000d06 	br	8029208 <update_box+0x6f8>
																if (*histp != 0) {
 80291d4:	e0bfee17 	ldw	r2,-72(fp)
 80291d8:	1080000b 	ldhu	r2,0(r2)
 80291dc:	10bfffcc 	andi	r2,r2,65535
 80291e0:	10000326 	beq	r2,zero,80291f0 <update_box+0x6e0>
																	ccount++;
 80291e4:	e0bff817 	ldw	r2,-32(fp)
 80291e8:	10800044 	addi	r2,r2,1
 80291ec:	e0bff815 	stw	r2,-32(fp)
													/* Now scan remaining volume of box and compute population */
													ccount = 0;
													for (c0 = c0min; c0 <= c0max; c0++)
														for (c1 = c1min; c1 <= c1max; c1++) {
															histp = & histogram[c0][c1][c2min];
															for (c2 = c2min; c2 <= c2max; c2++, histp++)
 80291f0:	e0bff117 	ldw	r2,-60(fp)
 80291f4:	10800044 	addi	r2,r2,1
 80291f8:	e0bff115 	stw	r2,-60(fp)
 80291fc:	e0bfee17 	ldw	r2,-72(fp)
 8029200:	10800084 	addi	r2,r2,2
 8029204:	e0bfee15 	stw	r2,-72(fp)
 8029208:	e0bff117 	ldw	r2,-60(fp)
 802920c:	e0fff717 	ldw	r3,-36(fp)
 8029210:	18bff00e 	bge	r3,r2,80291d4 <update_box+0x6c4>
													boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;

													/* Now scan remaining volume of box and compute population */
													ccount = 0;
													for (c0 = c0min; c0 <= c0max; c0++)
														for (c1 = c1min; c1 <= c1max; c1++) {
 8029214:	e0bff017 	ldw	r2,-64(fp)
 8029218:	10800044 	addi	r2,r2,1
 802921c:	e0bff015 	stw	r2,-64(fp)
 8029220:	e0bff017 	ldw	r2,-64(fp)
 8029224:	e0fff517 	ldw	r3,-44(fp)
 8029228:	18bfda0e 	bge	r3,r2,8029194 <update_box+0x684>
													dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
													boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;

													/* Now scan remaining volume of box and compute population */
													ccount = 0;
													for (c0 = c0min; c0 <= c0max; c0++)
 802922c:	e0bfef17 	ldw	r2,-68(fp)
 8029230:	10800044 	addi	r2,r2,1
 8029234:	e0bfef15 	stw	r2,-68(fp)
 8029238:	e0bfef17 	ldw	r2,-68(fp)
 802923c:	e0fff317 	ldw	r3,-52(fp)
 8029240:	18bfd10e 	bge	r3,r2,8029188 <update_box+0x678>
															for (c2 = c2min; c2 <= c2max; c2++, histp++)
																if (*histp != 0) {
																	ccount++;
																}
														}
														boxp->colorcount = ccount;
 8029244:	e0bfff17 	ldw	r2,-4(fp)
 8029248:	e0fff817 	ldw	r3,-32(fp)
 802924c:	10c00715 	stw	r3,28(r2)
}
 8029250:	e037883a 	mov	sp,fp
 8029254:	dfc00217 	ldw	ra,8(sp)
 8029258:	df000117 	ldw	fp,4(sp)
 802925c:	dc000017 	ldw	r16,0(sp)
 8029260:	dec00304 	addi	sp,sp,12
 8029264:	f800283a 	ret

08029268 <median_cut>:

LOCAL(int)
	median_cut (j_decompress_ptr cinfo, boxptr boxlist, int numboxes,
	int desired_colors)
	/* Repeatedly select and split the largest box until we have enough boxes */
{
 8029268:	defff204 	addi	sp,sp,-56
 802926c:	dfc00d15 	stw	ra,52(sp)
 8029270:	df000c15 	stw	fp,48(sp)
 8029274:	dc400b15 	stw	r17,44(sp)
 8029278:	dc000a15 	stw	r16,40(sp)
 802927c:	df000a04 	addi	fp,sp,40
 8029280:	e13ffc15 	stw	r4,-16(fp)
 8029284:	e17ffd15 	stw	r5,-12(fp)
 8029288:	e1bffe15 	stw	r6,-8(fp)
 802928c:	e1ffff15 	stw	r7,-4(fp)
	int n,lb;
	int c0,c1,c2,cmax;
	register boxptr b1,b2;

	while (numboxes < desired_colors) {
 8029290:	00007806 	br	8029474 <median_cut+0x20c>
		/* Select box to split.
		* Current algorithm: by population for first half, then by volume.
		*/
		if (numboxes*2 <= desired_colors) {
 8029294:	e0bffe17 	ldw	r2,-8(fp)
 8029298:	1085883a 	add	r2,r2,r2
 802929c:	e0ffff17 	ldw	r3,-4(fp)
 80292a0:	18800516 	blt	r3,r2,80292b8 <median_cut+0x50>
			b1 = find_biggest_color_pop(boxlist, numboxes);
 80292a4:	e13ffd17 	ldw	r4,-12(fp)
 80292a8:	e17ffe17 	ldw	r5,-8(fp)
 80292ac:	8028a200 	call	8028a20 <find_biggest_color_pop>
 80292b0:	1021883a 	mov	r16,r2
 80292b4:	00000406 	br	80292c8 <median_cut+0x60>
		} else {
			b1 = find_biggest_volume(boxlist, numboxes);
 80292b8:	e13ffd17 	ldw	r4,-12(fp)
 80292bc:	e17ffe17 	ldw	r5,-8(fp)
 80292c0:	8028a9c0 	call	8028a9c <find_biggest_volume>
 80292c4:	1021883a 	mov	r16,r2
		}
		if (b1 == NULL)		/* no splittable boxes left! */
 80292c8:	80006e26 	beq	r16,zero,8029484 <median_cut+0x21c>
			break;
		b2 = &boxlist[numboxes];	/* where new box will go */
 80292cc:	e0bffe17 	ldw	r2,-8(fp)
 80292d0:	1004917a 	slli	r2,r2,5
 80292d4:	e0fffd17 	ldw	r3,-12(fp)
 80292d8:	18a3883a 	add	r17,r3,r2
		/* Copy the color bounds to the new box. */
		b2->c0max = b1->c0max; b2->c1max = b1->c1max; b2->c2max = b1->c2max;
 80292dc:	80800117 	ldw	r2,4(r16)
 80292e0:	88800115 	stw	r2,4(r17)
 80292e4:	80800317 	ldw	r2,12(r16)
 80292e8:	88800315 	stw	r2,12(r17)
 80292ec:	80800517 	ldw	r2,20(r16)
 80292f0:	88800515 	stw	r2,20(r17)
		b2->c0min = b1->c0min; b2->c1min = b1->c1min; b2->c2min = b1->c2min;
 80292f4:	80800017 	ldw	r2,0(r16)
 80292f8:	88800015 	stw	r2,0(r17)
 80292fc:	80800217 	ldw	r2,8(r16)
 8029300:	88800215 	stw	r2,8(r17)
 8029304:	80800417 	ldw	r2,16(r16)
 8029308:	88800415 	stw	r2,16(r17)
		/* Choose which axis to split the box on.
		* Current algorithm: longest scaled axis.
		* See notes in update_box about scaling distances.
		*/
		c0 = ((b1->c0max - b1->c0min) << C0_SHIFT) * C0_SCALE;
 802930c:	80c00117 	ldw	r3,4(r16)
 8029310:	80800017 	ldw	r2,0(r16)
 8029314:	1885c83a 	sub	r2,r3,r2
 8029318:	100490fa 	slli	r2,r2,3
 802931c:	1085883a 	add	r2,r2,r2
 8029320:	e0bff815 	stw	r2,-32(fp)
		c1 = ((b1->c1max - b1->c1min) << C1_SHIFT) * C1_SCALE;
 8029324:	80c00317 	ldw	r3,12(r16)
 8029328:	80800217 	ldw	r2,8(r16)
 802932c:	1885c83a 	sub	r2,r3,r2
 8029330:	1085883a 	add	r2,r2,r2
 8029334:	1085883a 	add	r2,r2,r2
 8029338:	1007883a 	mov	r3,r2
 802933c:	1805883a 	mov	r2,r3
 8029340:	1085883a 	add	r2,r2,r2
 8029344:	10c5883a 	add	r2,r2,r3
 8029348:	e0bff915 	stw	r2,-28(fp)
		c2 = ((b1->c2max - b1->c2min) << C2_SHIFT) * C2_SCALE;
 802934c:	80c00517 	ldw	r3,20(r16)
 8029350:	80800417 	ldw	r2,16(r16)
 8029354:	1885c83a 	sub	r2,r3,r2
 8029358:	100490fa 	slli	r2,r2,3
 802935c:	e0bffa15 	stw	r2,-24(fp)
		/* We want to break any ties in favor of green, then red, blue last.
		* This code does the right thing for R,G,B or B,G,R color orders only.
		*/
#if RGB_RED == 0
		cmax = c1; n = 1;
 8029360:	e0bff917 	ldw	r2,-28(fp)
 8029364:	e0bff715 	stw	r2,-36(fp)
 8029368:	00800044 	movi	r2,1
 802936c:	e0bff615 	stw	r2,-40(fp)
		if (c0 > cmax) { cmax = c0; n = 0; }
 8029370:	e0bff817 	ldw	r2,-32(fp)
 8029374:	e0fff717 	ldw	r3,-36(fp)
 8029378:	1880030e 	bge	r3,r2,8029388 <median_cut+0x120>
 802937c:	e0bff817 	ldw	r2,-32(fp)
 8029380:	e0bff715 	stw	r2,-36(fp)
 8029384:	e03ff615 	stw	zero,-40(fp)
		if (c2 > cmax) { n = 2; }
 8029388:	e0bffa17 	ldw	r2,-24(fp)
 802938c:	e0fff717 	ldw	r3,-36(fp)
 8029390:	1880020e 	bge	r3,r2,802939c <median_cut+0x134>
 8029394:	00800084 	movi	r2,2
 8029398:	e0bff615 	stw	r2,-40(fp)
		* Current algorithm: split at halfway point.
		* (Since the box has been shrunk to minimum volume,
		* any split will produce two nonempty subboxes.)
		* Note that lb value is max for lower box, so must be < old max.
		*/
		switch (n) {
 802939c:	e0bff617 	ldw	r2,-40(fp)
 80293a0:	10c00060 	cmpeqi	r3,r2,1
 80293a4:	1800101e 	bne	r3,zero,80293e8 <median_cut+0x180>
 80293a8:	10c000a0 	cmpeqi	r3,r2,2
 80293ac:	18001b1e 	bne	r3,zero,802941c <median_cut+0x1b4>
 80293b0:	1000271e 	bne	r2,zero,8029450 <median_cut+0x1e8>
		case 0:
			lb = (b1->c0max + b1->c0min) / 2;
 80293b4:	80c00117 	ldw	r3,4(r16)
 80293b8:	80800017 	ldw	r2,0(r16)
 80293bc:	1885883a 	add	r2,r3,r2
 80293c0:	1006d7fa 	srli	r3,r2,31
 80293c4:	1885883a 	add	r2,r3,r2
 80293c8:	1005d07a 	srai	r2,r2,1
 80293cc:	e0bffb15 	stw	r2,-20(fp)
			b1->c0max = lb;
 80293d0:	e0bffb17 	ldw	r2,-20(fp)
 80293d4:	80800115 	stw	r2,4(r16)
			b2->c0min = lb+1;
 80293d8:	e0bffb17 	ldw	r2,-20(fp)
 80293dc:	10800044 	addi	r2,r2,1
 80293e0:	88800015 	stw	r2,0(r17)
			break;
 80293e4:	00001a06 	br	8029450 <median_cut+0x1e8>
		case 1:
			lb = (b1->c1max + b1->c1min) / 2;
 80293e8:	80c00317 	ldw	r3,12(r16)
 80293ec:	80800217 	ldw	r2,8(r16)
 80293f0:	1885883a 	add	r2,r3,r2
 80293f4:	1006d7fa 	srli	r3,r2,31
 80293f8:	1885883a 	add	r2,r3,r2
 80293fc:	1005d07a 	srai	r2,r2,1
 8029400:	e0bffb15 	stw	r2,-20(fp)
			b1->c1max = lb;
 8029404:	e0bffb17 	ldw	r2,-20(fp)
 8029408:	80800315 	stw	r2,12(r16)
			b2->c1min = lb+1;
 802940c:	e0bffb17 	ldw	r2,-20(fp)
 8029410:	10800044 	addi	r2,r2,1
 8029414:	88800215 	stw	r2,8(r17)
			break;
 8029418:	00000d06 	br	8029450 <median_cut+0x1e8>
		case 2:
			lb = (b1->c2max + b1->c2min) / 2;
 802941c:	80c00517 	ldw	r3,20(r16)
 8029420:	80800417 	ldw	r2,16(r16)
 8029424:	1885883a 	add	r2,r3,r2
 8029428:	1006d7fa 	srli	r3,r2,31
 802942c:	1885883a 	add	r2,r3,r2
 8029430:	1005d07a 	srai	r2,r2,1
 8029434:	e0bffb15 	stw	r2,-20(fp)
			b1->c2max = lb;
 8029438:	e0bffb17 	ldw	r2,-20(fp)
 802943c:	80800515 	stw	r2,20(r16)
			b2->c2min = lb+1;
 8029440:	e0bffb17 	ldw	r2,-20(fp)
 8029444:	10800044 	addi	r2,r2,1
 8029448:	88800415 	stw	r2,16(r17)
			break;
 802944c:	0001883a 	nop
		}
		/* Update stats for boxes */
		update_box(cinfo, b1);
 8029450:	e13ffc17 	ldw	r4,-16(fp)
 8029454:	800b883a 	mov	r5,r16
 8029458:	8028b100 	call	8028b10 <update_box>
		update_box(cinfo, b2);
 802945c:	e13ffc17 	ldw	r4,-16(fp)
 8029460:	880b883a 	mov	r5,r17
 8029464:	8028b100 	call	8028b10 <update_box>
		numboxes++;
 8029468:	e0bffe17 	ldw	r2,-8(fp)
 802946c:	10800044 	addi	r2,r2,1
 8029470:	e0bffe15 	stw	r2,-8(fp)
{
	int n,lb;
	int c0,c1,c2,cmax;
	register boxptr b1,b2;

	while (numboxes < desired_colors) {
 8029474:	e0fffe17 	ldw	r3,-8(fp)
 8029478:	e0bfff17 	ldw	r2,-4(fp)
 802947c:	18bf8516 	blt	r3,r2,8029294 <median_cut+0x2c>
 8029480:	00000106 	br	8029488 <median_cut+0x220>
			b1 = find_biggest_color_pop(boxlist, numboxes);
		} else {
			b1 = find_biggest_volume(boxlist, numboxes);
		}
		if (b1 == NULL)		/* no splittable boxes left! */
			break;
 8029484:	0001883a 	nop
		/* Update stats for boxes */
		update_box(cinfo, b1);
		update_box(cinfo, b2);
		numboxes++;
	}
	return numboxes;
 8029488:	e0bffe17 	ldw	r2,-8(fp)
}
 802948c:	e037883a 	mov	sp,fp
 8029490:	dfc00317 	ldw	ra,12(sp)
 8029494:	df000217 	ldw	fp,8(sp)
 8029498:	dc400117 	ldw	r17,4(sp)
 802949c:	dc000017 	ldw	r16,0(sp)
 80294a0:	dec00404 	addi	sp,sp,16
 80294a4:	f800283a 	ret

080294a8 <compute_color>:


LOCAL(void)
	compute_color (j_decompress_ptr cinfo, boxptr boxp, int icolor)
	/* Compute representative color for a box, put it in colormap[icolor] */
{
 80294a8:	deffe904 	addi	sp,sp,-92
 80294ac:	dfc01615 	stw	ra,88(sp)
 80294b0:	df001515 	stw	fp,84(sp)
 80294b4:	dc001415 	stw	r16,80(sp)
 80294b8:	df001404 	addi	fp,sp,80
 80294bc:	e13ffd15 	stw	r4,-12(fp)
 80294c0:	e17ffe15 	stw	r5,-8(fp)
 80294c4:	e1bfff15 	stw	r6,-4(fp)
	/* Current algorithm: mean weighted by pixels (not colors) */
	/* Note it is important to get the rounding correct! */
	my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 80294c8:	e0bffd17 	ldw	r2,-12(fp)
 80294cc:	10806e17 	ldw	r2,440(r2)
 80294d0:	e0bff415 	stw	r2,-48(fp)
	hist3d histogram = cquantize->histogram;
 80294d4:	e0bff417 	ldw	r2,-48(fp)
 80294d8:	10800617 	ldw	r2,24(r2)
 80294dc:	e0bff515 	stw	r2,-44(fp)
	histptr histp;
	int c0,c1,c2;
	int c0min,c0max,c1min,c1max,c2min,c2max;
	long count;
	long total = 0;
 80294e0:	e03ff015 	stw	zero,-64(fp)
	long c0total = 0;
 80294e4:	e03ff115 	stw	zero,-60(fp)
	long c1total = 0;
 80294e8:	e03ff215 	stw	zero,-56(fp)
	long c2total = 0;
 80294ec:	e03ff315 	stw	zero,-52(fp)

	c0min = boxp->c0min;  c0max = boxp->c0max;
 80294f0:	e0bffe17 	ldw	r2,-8(fp)
 80294f4:	10800017 	ldw	r2,0(r2)
 80294f8:	e0bff615 	stw	r2,-40(fp)
 80294fc:	e0bffe17 	ldw	r2,-8(fp)
 8029500:	10800117 	ldw	r2,4(r2)
 8029504:	e0bff715 	stw	r2,-36(fp)
	c1min = boxp->c1min;  c1max = boxp->c1max;
 8029508:	e0bffe17 	ldw	r2,-8(fp)
 802950c:	10800217 	ldw	r2,8(r2)
 8029510:	e0bff815 	stw	r2,-32(fp)
 8029514:	e0bffe17 	ldw	r2,-8(fp)
 8029518:	10800317 	ldw	r2,12(r2)
 802951c:	e0bff915 	stw	r2,-28(fp)
	c2min = boxp->c2min;  c2max = boxp->c2max;
 8029520:	e0bffe17 	ldw	r2,-8(fp)
 8029524:	10800417 	ldw	r2,16(r2)
 8029528:	e0bffa15 	stw	r2,-24(fp)
 802952c:	e0bffe17 	ldw	r2,-8(fp)
 8029530:	10800517 	ldw	r2,20(r2)
 8029534:	e0bffb15 	stw	r2,-20(fp)

	for (c0 = c0min; c0 <= c0max; c0++)
 8029538:	e0bff617 	ldw	r2,-40(fp)
 802953c:	e0bfed15 	stw	r2,-76(fp)
 8029540:	00004d06 	br	8029678 <compute_color+0x1d0>
		for (c1 = c1min; c1 <= c1max; c1++) {
 8029544:	e0bff817 	ldw	r2,-32(fp)
 8029548:	e0bfee15 	stw	r2,-72(fp)
 802954c:	00004406 	br	8029660 <compute_color+0x1b8>
			histp = & histogram[c0][c1][c2min];
 8029550:	e0bfed17 	ldw	r2,-76(fp)
 8029554:	1085883a 	add	r2,r2,r2
 8029558:	1085883a 	add	r2,r2,r2
 802955c:	e0fff517 	ldw	r3,-44(fp)
 8029560:	1885883a 	add	r2,r3,r2
 8029564:	10c00017 	ldw	r3,0(r2)
 8029568:	e0bfee17 	ldw	r2,-72(fp)
 802956c:	100491ba 	slli	r2,r2,6
 8029570:	1887883a 	add	r3,r3,r2
 8029574:	e0bffa17 	ldw	r2,-24(fp)
 8029578:	1085883a 	add	r2,r2,r2
 802957c:	1885883a 	add	r2,r3,r2
 8029580:	e0bfec15 	stw	r2,-80(fp)
			for (c2 = c2min; c2 <= c2max; c2++) {
 8029584:	e0bffa17 	ldw	r2,-24(fp)
 8029588:	e0bfef15 	stw	r2,-68(fp)
 802958c:	00002e06 	br	8029648 <compute_color+0x1a0>
				if ((count = *histp++) != 0) {
 8029590:	e0bfec17 	ldw	r2,-80(fp)
 8029594:	1080000b 	ldhu	r2,0(r2)
 8029598:	10bfffcc 	andi	r2,r2,65535
 802959c:	e0bffc15 	stw	r2,-16(fp)
 80295a0:	e0bffc17 	ldw	r2,-16(fp)
 80295a4:	1004c03a 	cmpne	r2,r2,zero
 80295a8:	e0ffec17 	ldw	r3,-80(fp)
 80295ac:	18c00084 	addi	r3,r3,2
 80295b0:	e0ffec15 	stw	r3,-80(fp)
 80295b4:	10803fcc 	andi	r2,r2,255
 80295b8:	10002026 	beq	r2,zero,802963c <compute_color+0x194>
					total += count;
 80295bc:	e0fff017 	ldw	r3,-64(fp)
 80295c0:	e0bffc17 	ldw	r2,-16(fp)
 80295c4:	1885883a 	add	r2,r3,r2
 80295c8:	e0bff015 	stw	r2,-64(fp)
					c0total += ((c0 << C0_SHIFT) + ((1<<C0_SHIFT)>>1)) * count;
 80295cc:	e0bfed17 	ldw	r2,-76(fp)
 80295d0:	100490fa 	slli	r2,r2,3
 80295d4:	10800104 	addi	r2,r2,4
 80295d8:	1009883a 	mov	r4,r2
 80295dc:	e17ffc17 	ldw	r5,-16(fp)
 80295e0:	802c2180 	call	802c218 <__mulsi3>
 80295e4:	e0fff117 	ldw	r3,-60(fp)
 80295e8:	1885883a 	add	r2,r3,r2
 80295ec:	e0bff115 	stw	r2,-60(fp)
					c1total += ((c1 << C1_SHIFT) + ((1<<C1_SHIFT)>>1)) * count;
 80295f0:	e0bfee17 	ldw	r2,-72(fp)
 80295f4:	1085883a 	add	r2,r2,r2
 80295f8:	1085883a 	add	r2,r2,r2
 80295fc:	10800084 	addi	r2,r2,2
 8029600:	1009883a 	mov	r4,r2
 8029604:	e17ffc17 	ldw	r5,-16(fp)
 8029608:	802c2180 	call	802c218 <__mulsi3>
 802960c:	e0fff217 	ldw	r3,-56(fp)
 8029610:	1885883a 	add	r2,r3,r2
 8029614:	e0bff215 	stw	r2,-56(fp)
					c2total += ((c2 << C2_SHIFT) + ((1<<C2_SHIFT)>>1)) * count;
 8029618:	e0bfef17 	ldw	r2,-68(fp)
 802961c:	100490fa 	slli	r2,r2,3
 8029620:	10800104 	addi	r2,r2,4
 8029624:	1009883a 	mov	r4,r2
 8029628:	e17ffc17 	ldw	r5,-16(fp)
 802962c:	802c2180 	call	802c218 <__mulsi3>
 8029630:	e0fff317 	ldw	r3,-52(fp)
 8029634:	1885883a 	add	r2,r3,r2
 8029638:	e0bff315 	stw	r2,-52(fp)
	c2min = boxp->c2min;  c2max = boxp->c2max;

	for (c0 = c0min; c0 <= c0max; c0++)
		for (c1 = c1min; c1 <= c1max; c1++) {
			histp = & histogram[c0][c1][c2min];
			for (c2 = c2min; c2 <= c2max; c2++) {
 802963c:	e0bfef17 	ldw	r2,-68(fp)
 8029640:	10800044 	addi	r2,r2,1
 8029644:	e0bfef15 	stw	r2,-68(fp)
 8029648:	e0bfef17 	ldw	r2,-68(fp)
 802964c:	e0fffb17 	ldw	r3,-20(fp)
 8029650:	18bfcf0e 	bge	r3,r2,8029590 <compute_color+0xe8>
	c0min = boxp->c0min;  c0max = boxp->c0max;
	c1min = boxp->c1min;  c1max = boxp->c1max;
	c2min = boxp->c2min;  c2max = boxp->c2max;

	for (c0 = c0min; c0 <= c0max; c0++)
		for (c1 = c1min; c1 <= c1max; c1++) {
 8029654:	e0bfee17 	ldw	r2,-72(fp)
 8029658:	10800044 	addi	r2,r2,1
 802965c:	e0bfee15 	stw	r2,-72(fp)
 8029660:	e0bfee17 	ldw	r2,-72(fp)
 8029664:	e0fff917 	ldw	r3,-28(fp)
 8029668:	18bfb90e 	bge	r3,r2,8029550 <compute_color+0xa8>

	c0min = boxp->c0min;  c0max = boxp->c0max;
	c1min = boxp->c1min;  c1max = boxp->c1max;
	c2min = boxp->c2min;  c2max = boxp->c2max;

	for (c0 = c0min; c0 <= c0max; c0++)
 802966c:	e0bfed17 	ldw	r2,-76(fp)
 8029670:	10800044 	addi	r2,r2,1
 8029674:	e0bfed15 	stw	r2,-76(fp)
 8029678:	e0bfed17 	ldw	r2,-76(fp)
 802967c:	e0fff717 	ldw	r3,-36(fp)
 8029680:	18bfb00e 	bge	r3,r2,8029544 <compute_color+0x9c>
					c2total += ((c2 << C2_SHIFT) + ((1<<C2_SHIFT)>>1)) * count;
				}
			}
		}

		cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
 8029684:	e0bffd17 	ldw	r2,-12(fp)
 8029688:	10801d17 	ldw	r2,116(r2)
 802968c:	10c00017 	ldw	r3,0(r2)
 8029690:	e0bfff17 	ldw	r2,-4(fp)
 8029694:	18a1883a 	add	r16,r3,r2
 8029698:	e0bff017 	ldw	r2,-64(fp)
 802969c:	1007d07a 	srai	r3,r2,1
 80296a0:	e0bff117 	ldw	r2,-60(fp)
 80296a4:	1885883a 	add	r2,r3,r2
 80296a8:	1009883a 	mov	r4,r2
 80296ac:	e17ff017 	ldw	r5,-64(fp)
 80296b0:	802c15c0 	call	802c15c <__divsi3>
 80296b4:	80800005 	stb	r2,0(r16)
		cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
 80296b8:	e0bffd17 	ldw	r2,-12(fp)
 80296bc:	10801d17 	ldw	r2,116(r2)
 80296c0:	10800104 	addi	r2,r2,4
 80296c4:	10c00017 	ldw	r3,0(r2)
 80296c8:	e0bfff17 	ldw	r2,-4(fp)
 80296cc:	18a1883a 	add	r16,r3,r2
 80296d0:	e0bff017 	ldw	r2,-64(fp)
 80296d4:	1007d07a 	srai	r3,r2,1
 80296d8:	e0bff217 	ldw	r2,-56(fp)
 80296dc:	1885883a 	add	r2,r3,r2
 80296e0:	1009883a 	mov	r4,r2
 80296e4:	e17ff017 	ldw	r5,-64(fp)
 80296e8:	802c15c0 	call	802c15c <__divsi3>
 80296ec:	80800005 	stb	r2,0(r16)
		cinfo->colormap[2][icolor] = (JSAMPLE) ((c2total + (total>>1)) / total);
 80296f0:	e0bffd17 	ldw	r2,-12(fp)
 80296f4:	10801d17 	ldw	r2,116(r2)
 80296f8:	10800204 	addi	r2,r2,8
 80296fc:	10c00017 	ldw	r3,0(r2)
 8029700:	e0bfff17 	ldw	r2,-4(fp)
 8029704:	18a1883a 	add	r16,r3,r2
 8029708:	e0bff017 	ldw	r2,-64(fp)
 802970c:	1007d07a 	srai	r3,r2,1
 8029710:	e0bff317 	ldw	r2,-52(fp)
 8029714:	1885883a 	add	r2,r3,r2
 8029718:	1009883a 	mov	r4,r2
 802971c:	e17ff017 	ldw	r5,-64(fp)
 8029720:	802c15c0 	call	802c15c <__divsi3>
 8029724:	80800005 	stb	r2,0(r16)
}
 8029728:	e037883a 	mov	sp,fp
 802972c:	dfc00217 	ldw	ra,8(sp)
 8029730:	df000117 	ldw	fp,4(sp)
 8029734:	dc000017 	ldw	r16,0(sp)
 8029738:	dec00304 	addi	sp,sp,12
 802973c:	f800283a 	ret

08029740 <select_colors>:


LOCAL(void)
	select_colors (j_decompress_ptr cinfo, int desired_colors)
	/* Master routine for color selection */
{
 8029740:	defff904 	addi	sp,sp,-28
 8029744:	dfc00615 	stw	ra,24(sp)
 8029748:	df000515 	stw	fp,20(sp)
 802974c:	df000504 	addi	fp,sp,20
 8029750:	e13ffe15 	stw	r4,-8(fp)
 8029754:	e17fff15 	stw	r5,-4(fp)
	boxptr boxlist;
	int numboxes;
	int i;

	/* Allocate workspace for box list */
	boxlist = (boxptr) (*cinfo->mem->alloc_small)
 8029758:	e0bffe17 	ldw	r2,-8(fp)
 802975c:	10800117 	ldw	r2,4(r2)
		((j_common_ptr) cinfo, JPOOL_IMAGE, desired_colors * SIZEOF(box));
 8029760:	10c00017 	ldw	r3,0(r2)
 8029764:	e0bfff17 	ldw	r2,-4(fp)
 8029768:	1004917a 	slli	r2,r2,5
	boxptr boxlist;
	int numboxes;
	int i;

	/* Allocate workspace for box list */
	boxlist = (boxptr) (*cinfo->mem->alloc_small)
 802976c:	e13ffe17 	ldw	r4,-8(fp)
 8029770:	01400044 	movi	r5,1
 8029774:	100d883a 	mov	r6,r2
 8029778:	183ee83a 	callr	r3
 802977c:	e0bffc15 	stw	r2,-16(fp)
		((j_common_ptr) cinfo, JPOOL_IMAGE, desired_colors * SIZEOF(box));
	/* Initialize one box containing whole space */
	numboxes = 1;
 8029780:	00800044 	movi	r2,1
 8029784:	e0bffd15 	stw	r2,-12(fp)
	boxlist[0].c0min = 0;
 8029788:	e0bffc17 	ldw	r2,-16(fp)
 802978c:	10000015 	stw	zero,0(r2)
	boxlist[0].c0max = MAXJSAMPLE >> C0_SHIFT;
 8029790:	e0bffc17 	ldw	r2,-16(fp)
 8029794:	00c007c4 	movi	r3,31
 8029798:	10c00115 	stw	r3,4(r2)
	boxlist[0].c1min = 0;
 802979c:	e0bffc17 	ldw	r2,-16(fp)
 80297a0:	10000215 	stw	zero,8(r2)
	boxlist[0].c1max = MAXJSAMPLE >> C1_SHIFT;
 80297a4:	e0bffc17 	ldw	r2,-16(fp)
 80297a8:	00c00fc4 	movi	r3,63
 80297ac:	10c00315 	stw	r3,12(r2)
	boxlist[0].c2min = 0;
 80297b0:	e0bffc17 	ldw	r2,-16(fp)
 80297b4:	10000415 	stw	zero,16(r2)
	boxlist[0].c2max = MAXJSAMPLE >> C2_SHIFT;
 80297b8:	e0bffc17 	ldw	r2,-16(fp)
 80297bc:	00c007c4 	movi	r3,31
 80297c0:	10c00515 	stw	r3,20(r2)
	/* Shrink it to actually-used volume and set its statistics */
	update_box(cinfo, & boxlist[0]);
 80297c4:	e13ffe17 	ldw	r4,-8(fp)
 80297c8:	e17ffc17 	ldw	r5,-16(fp)
 80297cc:	8028b100 	call	8028b10 <update_box>
	/* Perform median-cut to produce final box list */
	numboxes = median_cut(cinfo, boxlist, numboxes, desired_colors);
 80297d0:	e13ffe17 	ldw	r4,-8(fp)
 80297d4:	e17ffc17 	ldw	r5,-16(fp)
 80297d8:	e1bffd17 	ldw	r6,-12(fp)
 80297dc:	e1ffff17 	ldw	r7,-4(fp)
 80297e0:	80292680 	call	8029268 <median_cut>
 80297e4:	e0bffd15 	stw	r2,-12(fp)
	/* Compute the representative color for each box, fill colormap */
	for (i = 0; i < numboxes; i++)
 80297e8:	e03ffb15 	stw	zero,-20(fp)
 80297ec:	00000b06 	br	802981c <select_colors+0xdc>
		compute_color(cinfo, & boxlist[i], i);
 80297f0:	e0bffb17 	ldw	r2,-20(fp)
 80297f4:	1004917a 	slli	r2,r2,5
 80297f8:	e0fffc17 	ldw	r3,-16(fp)
 80297fc:	1885883a 	add	r2,r3,r2
 8029800:	e13ffe17 	ldw	r4,-8(fp)
 8029804:	100b883a 	mov	r5,r2
 8029808:	e1bffb17 	ldw	r6,-20(fp)
 802980c:	80294a80 	call	80294a8 <compute_color>
	/* Shrink it to actually-used volume and set its statistics */
	update_box(cinfo, & boxlist[0]);
	/* Perform median-cut to produce final box list */
	numboxes = median_cut(cinfo, boxlist, numboxes, desired_colors);
	/* Compute the representative color for each box, fill colormap */
	for (i = 0; i < numboxes; i++)
 8029810:	e0bffb17 	ldw	r2,-20(fp)
 8029814:	10800044 	addi	r2,r2,1
 8029818:	e0bffb15 	stw	r2,-20(fp)
 802981c:	e0fffb17 	ldw	r3,-20(fp)
 8029820:	e0bffd17 	ldw	r2,-12(fp)
 8029824:	18bff216 	blt	r3,r2,80297f0 <select_colors+0xb0>
		compute_color(cinfo, & boxlist[i], i);
	cinfo->actual_number_of_colors = numboxes;
 8029828:	e0bffe17 	ldw	r2,-8(fp)
 802982c:	e0fffd17 	ldw	r3,-12(fp)
 8029830:	10c01c15 	stw	r3,112(r2)
	TRACEMS1(cinfo, 1, JTRC_QUANT_SELECTED, numboxes);
 8029834:	e0bffe17 	ldw	r2,-8(fp)
 8029838:	10800017 	ldw	r2,0(r2)
 802983c:	00c01884 	movi	r3,98
 8029840:	10c00515 	stw	r3,20(r2)
 8029844:	e0bffe17 	ldw	r2,-8(fp)
 8029848:	10800017 	ldw	r2,0(r2)
 802984c:	e0fffd17 	ldw	r3,-12(fp)
 8029850:	10c00615 	stw	r3,24(r2)
 8029854:	e0bffe17 	ldw	r2,-8(fp)
 8029858:	10800017 	ldw	r2,0(r2)
 802985c:	10800117 	ldw	r2,4(r2)
 8029860:	e13ffe17 	ldw	r4,-8(fp)
 8029864:	01400044 	movi	r5,1
 8029868:	103ee83a 	callr	r2
}
 802986c:	e037883a 	mov	sp,fp
 8029870:	dfc00117 	ldw	ra,4(sp)
 8029874:	df000017 	ldw	fp,0(sp)
 8029878:	dec00204 	addi	sp,sp,8
 802987c:	f800283a 	ret

08029880 <find_nearby_colors>:
	* candidate colormap entries is returned, and their colormap indexes are
	* placed in colorlist[].
	* This routine uses Heckbert's "locally sorted search" criterion to select
	* the colors that need further consideration.
	*/
{
 8029880:	defeec04 	addi	sp,sp,-1104
 8029884:	dfc11315 	stw	ra,1100(sp)
 8029888:	df011215 	stw	fp,1096(sp)
 802988c:	df011204 	addi	fp,sp,1096
 8029890:	e13ffc15 	stw	r4,-16(fp)
 8029894:	e17ffd15 	stw	r5,-12(fp)
 8029898:	e1bffe15 	stw	r6,-8(fp)
 802989c:	e1ffff15 	stw	r7,-4(fp)
	int numcolors = cinfo->actual_number_of_colors;
 80298a0:	e0bffc17 	ldw	r2,-16(fp)
 80298a4:	10801c17 	ldw	r2,112(r2)
 80298a8:	e0bef315 	stw	r2,-1076(fp)
	* Actually we compute the coordinates of the center of the upper-corner
	* histogram cell, which are the upper bounds of the volume we care about.
	* Note that since ">>" rounds down, the "center" values may be closer to
	* min than to max; hence comparisons to them must be "<=", not "<".
	*/
	maxc0 = minc0 + ((1 << BOX_C0_SHIFT) - (1 << C0_SHIFT));
 80298ac:	e0bffd17 	ldw	r2,-12(fp)
 80298b0:	10800604 	addi	r2,r2,24
 80298b4:	e0bef415 	stw	r2,-1072(fp)
	centerc0 = (minc0 + maxc0) >> 1;
 80298b8:	e0fffd17 	ldw	r3,-12(fp)
 80298bc:	e0bef417 	ldw	r2,-1072(fp)
 80298c0:	1885883a 	add	r2,r3,r2
 80298c4:	1005d07a 	srai	r2,r2,1
 80298c8:	e0bef515 	stw	r2,-1068(fp)
	maxc1 = minc1 + ((1 << BOX_C1_SHIFT) - (1 << C1_SHIFT));
 80298cc:	e0bffe17 	ldw	r2,-8(fp)
 80298d0:	10800704 	addi	r2,r2,28
 80298d4:	e0bef615 	stw	r2,-1064(fp)
	centerc1 = (minc1 + maxc1) >> 1;
 80298d8:	e0fffe17 	ldw	r3,-8(fp)
 80298dc:	e0bef617 	ldw	r2,-1064(fp)
 80298e0:	1885883a 	add	r2,r3,r2
 80298e4:	1005d07a 	srai	r2,r2,1
 80298e8:	e0bef715 	stw	r2,-1060(fp)
	maxc2 = minc2 + ((1 << BOX_C2_SHIFT) - (1 << C2_SHIFT));
 80298ec:	e0bfff17 	ldw	r2,-4(fp)
 80298f0:	10800604 	addi	r2,r2,24
 80298f4:	e0bef815 	stw	r2,-1056(fp)
	centerc2 = (minc2 + maxc2) >> 1;
 80298f8:	e0ffff17 	ldw	r3,-4(fp)
 80298fc:	e0bef817 	ldw	r2,-1056(fp)
 8029900:	1885883a 	add	r2,r3,r2
 8029904:	1005d07a 	srai	r2,r2,1
 8029908:	e0bef915 	stw	r2,-1052(fp)
	*  2. its maximum squared-distance to any point in the update box.
	* Both of these can be found by considering only the corners of the box.
	* We save the minimum distance for each color in mindist[];
	* only the smallest maximum distance is of interest.
	*/
	minmaxdist = 0x7FFFFFFFL;
 802990c:	00a00034 	movhi	r2,32768
 8029910:	10bfffc4 	addi	r2,r2,-1
 8029914:	e0bef015 	stw	r2,-1088(fp)

	for (i = 0; i < numcolors; i++) {
 8029918:	e03eee15 	stw	zero,-1096(fp)
 802991c:	00010f06 	br	8029d5c <find_nearby_colors+0x4dc>
		/* We compute the squared-c0-distance term, then add in the other two. */
		x = GETJSAMPLE(cinfo->colormap[0][i]);
 8029920:	e0bffc17 	ldw	r2,-16(fp)
 8029924:	10801d17 	ldw	r2,116(r2)
 8029928:	10c00017 	ldw	r3,0(r2)
 802992c:	e0beee17 	ldw	r2,-1096(fp)
 8029930:	1885883a 	add	r2,r3,r2
 8029934:	10800003 	ldbu	r2,0(r2)
 8029938:	10803fcc 	andi	r2,r2,255
 802993c:	e0befa15 	stw	r2,-1048(fp)
		if (x < minc0) {
 8029940:	e0fefa17 	ldw	r3,-1048(fp)
 8029944:	e0bffd17 	ldw	r2,-12(fp)
 8029948:	1880130e 	bge	r3,r2,8029998 <find_nearby_colors+0x118>
			tdist = (x - minc0) * C0_SCALE;
 802994c:	e0fefa17 	ldw	r3,-1048(fp)
 8029950:	e0bffd17 	ldw	r2,-12(fp)
 8029954:	1885c83a 	sub	r2,r3,r2
 8029958:	1085883a 	add	r2,r2,r2
 802995c:	e0befb15 	stw	r2,-1044(fp)
			min_dist = tdist*tdist;
 8029960:	e13efb17 	ldw	r4,-1044(fp)
 8029964:	e17efb17 	ldw	r5,-1044(fp)
 8029968:	802c2180 	call	802c218 <__mulsi3>
 802996c:	e0bef115 	stw	r2,-1084(fp)
			tdist = (x - maxc0) * C0_SCALE;
 8029970:	e0fefa17 	ldw	r3,-1048(fp)
 8029974:	e0bef417 	ldw	r2,-1072(fp)
 8029978:	1885c83a 	sub	r2,r3,r2
 802997c:	1085883a 	add	r2,r2,r2
 8029980:	e0befb15 	stw	r2,-1044(fp)
			max_dist = tdist*tdist;
 8029984:	e13efb17 	ldw	r4,-1044(fp)
 8029988:	e17efb17 	ldw	r5,-1044(fp)
 802998c:	802c2180 	call	802c218 <__mulsi3>
 8029990:	e0bef215 	stw	r2,-1080(fp)
 8029994:	00002d06 	br	8029a4c <find_nearby_colors+0x1cc>
		} else if (x > maxc0) {
 8029998:	e0befa17 	ldw	r2,-1048(fp)
 802999c:	e0fef417 	ldw	r3,-1072(fp)
 80299a0:	1880130e 	bge	r3,r2,80299f0 <find_nearby_colors+0x170>
			tdist = (x - maxc0) * C0_SCALE;
 80299a4:	e0fefa17 	ldw	r3,-1048(fp)
 80299a8:	e0bef417 	ldw	r2,-1072(fp)
 80299ac:	1885c83a 	sub	r2,r3,r2
 80299b0:	1085883a 	add	r2,r2,r2
 80299b4:	e0befb15 	stw	r2,-1044(fp)
			min_dist = tdist*tdist;
 80299b8:	e13efb17 	ldw	r4,-1044(fp)
 80299bc:	e17efb17 	ldw	r5,-1044(fp)
 80299c0:	802c2180 	call	802c218 <__mulsi3>
 80299c4:	e0bef115 	stw	r2,-1084(fp)
			tdist = (x - minc0) * C0_SCALE;
 80299c8:	e0fefa17 	ldw	r3,-1048(fp)
 80299cc:	e0bffd17 	ldw	r2,-12(fp)
 80299d0:	1885c83a 	sub	r2,r3,r2
 80299d4:	1085883a 	add	r2,r2,r2
 80299d8:	e0befb15 	stw	r2,-1044(fp)
			max_dist = tdist*tdist;
 80299dc:	e13efb17 	ldw	r4,-1044(fp)
 80299e0:	e17efb17 	ldw	r5,-1044(fp)
 80299e4:	802c2180 	call	802c218 <__mulsi3>
 80299e8:	e0bef215 	stw	r2,-1080(fp)
 80299ec:	00001706 	br	8029a4c <find_nearby_colors+0x1cc>
		} else {
			/* within cell range so no contribution to min_dist */
			min_dist = 0;
 80299f0:	e03ef115 	stw	zero,-1084(fp)
			if (x <= centerc0) {
 80299f4:	e0befa17 	ldw	r2,-1048(fp)
 80299f8:	e0fef517 	ldw	r3,-1068(fp)
 80299fc:	18800a16 	blt	r3,r2,8029a28 <find_nearby_colors+0x1a8>
				tdist = (x - maxc0) * C0_SCALE;
 8029a00:	e0fefa17 	ldw	r3,-1048(fp)
 8029a04:	e0bef417 	ldw	r2,-1072(fp)
 8029a08:	1885c83a 	sub	r2,r3,r2
 8029a0c:	1085883a 	add	r2,r2,r2
 8029a10:	e0befb15 	stw	r2,-1044(fp)
				max_dist = tdist*tdist;
 8029a14:	e13efb17 	ldw	r4,-1044(fp)
 8029a18:	e17efb17 	ldw	r5,-1044(fp)
 8029a1c:	802c2180 	call	802c218 <__mulsi3>
 8029a20:	e0bef215 	stw	r2,-1080(fp)
 8029a24:	00000906 	br	8029a4c <find_nearby_colors+0x1cc>
			} else {
				tdist = (x - minc0) * C0_SCALE;
 8029a28:	e0fefa17 	ldw	r3,-1048(fp)
 8029a2c:	e0bffd17 	ldw	r2,-12(fp)
 8029a30:	1885c83a 	sub	r2,r3,r2
 8029a34:	1085883a 	add	r2,r2,r2
 8029a38:	e0befb15 	stw	r2,-1044(fp)
				max_dist = tdist*tdist;
 8029a3c:	e13efb17 	ldw	r4,-1044(fp)
 8029a40:	e17efb17 	ldw	r5,-1044(fp)
 8029a44:	802c2180 	call	802c218 <__mulsi3>
 8029a48:	e0bef215 	stw	r2,-1080(fp)
			}
		}

		x = GETJSAMPLE(cinfo->colormap[1][i]);
 8029a4c:	e0bffc17 	ldw	r2,-16(fp)
 8029a50:	10801d17 	ldw	r2,116(r2)
 8029a54:	10800104 	addi	r2,r2,4
 8029a58:	10c00017 	ldw	r3,0(r2)
 8029a5c:	e0beee17 	ldw	r2,-1096(fp)
 8029a60:	1885883a 	add	r2,r3,r2
 8029a64:	10800003 	ldbu	r2,0(r2)
 8029a68:	10803fcc 	andi	r2,r2,255
 8029a6c:	e0befa15 	stw	r2,-1048(fp)
		if (x < minc1) {
 8029a70:	e0fefa17 	ldw	r3,-1048(fp)
 8029a74:	e0bffe17 	ldw	r2,-8(fp)
 8029a78:	18801b0e 	bge	r3,r2,8029ae8 <find_nearby_colors+0x268>
			tdist = (x - minc1) * C1_SCALE;
 8029a7c:	e0fefa17 	ldw	r3,-1048(fp)
 8029a80:	e0bffe17 	ldw	r2,-8(fp)
 8029a84:	1887c83a 	sub	r3,r3,r2
 8029a88:	1805883a 	mov	r2,r3
 8029a8c:	1085883a 	add	r2,r2,r2
 8029a90:	10c5883a 	add	r2,r2,r3
 8029a94:	e0befb15 	stw	r2,-1044(fp)
			min_dist += tdist*tdist;
 8029a98:	e13efb17 	ldw	r4,-1044(fp)
 8029a9c:	e17efb17 	ldw	r5,-1044(fp)
 8029aa0:	802c2180 	call	802c218 <__mulsi3>
 8029aa4:	e0fef117 	ldw	r3,-1084(fp)
 8029aa8:	1885883a 	add	r2,r3,r2
 8029aac:	e0bef115 	stw	r2,-1084(fp)
			tdist = (x - maxc1) * C1_SCALE;
 8029ab0:	e0fefa17 	ldw	r3,-1048(fp)
 8029ab4:	e0bef617 	ldw	r2,-1064(fp)
 8029ab8:	1887c83a 	sub	r3,r3,r2
 8029abc:	1805883a 	mov	r2,r3
 8029ac0:	1085883a 	add	r2,r2,r2
 8029ac4:	10c5883a 	add	r2,r2,r3
 8029ac8:	e0befb15 	stw	r2,-1044(fp)
			max_dist += tdist*tdist;
 8029acc:	e13efb17 	ldw	r4,-1044(fp)
 8029ad0:	e17efb17 	ldw	r5,-1044(fp)
 8029ad4:	802c2180 	call	802c218 <__mulsi3>
 8029ad8:	e0fef217 	ldw	r3,-1080(fp)
 8029adc:	1885883a 	add	r2,r3,r2
 8029ae0:	e0bef215 	stw	r2,-1080(fp)
 8029ae4:	00003c06 	br	8029bd8 <find_nearby_colors+0x358>
		} else if (x > maxc1) {
 8029ae8:	e0befa17 	ldw	r2,-1048(fp)
 8029aec:	e0fef617 	ldw	r3,-1064(fp)
 8029af0:	18801b0e 	bge	r3,r2,8029b60 <find_nearby_colors+0x2e0>
			tdist = (x - maxc1) * C1_SCALE;
 8029af4:	e0fefa17 	ldw	r3,-1048(fp)
 8029af8:	e0bef617 	ldw	r2,-1064(fp)
 8029afc:	1887c83a 	sub	r3,r3,r2
 8029b00:	1805883a 	mov	r2,r3
 8029b04:	1085883a 	add	r2,r2,r2
 8029b08:	10c5883a 	add	r2,r2,r3
 8029b0c:	e0befb15 	stw	r2,-1044(fp)
			min_dist += tdist*tdist;
 8029b10:	e13efb17 	ldw	r4,-1044(fp)
 8029b14:	e17efb17 	ldw	r5,-1044(fp)
 8029b18:	802c2180 	call	802c218 <__mulsi3>
 8029b1c:	e0fef117 	ldw	r3,-1084(fp)
 8029b20:	1885883a 	add	r2,r3,r2
 8029b24:	e0bef115 	stw	r2,-1084(fp)
			tdist = (x - minc1) * C1_SCALE;
 8029b28:	e0fefa17 	ldw	r3,-1048(fp)
 8029b2c:	e0bffe17 	ldw	r2,-8(fp)
 8029b30:	1887c83a 	sub	r3,r3,r2
 8029b34:	1805883a 	mov	r2,r3
 8029b38:	1085883a 	add	r2,r2,r2
 8029b3c:	10c5883a 	add	r2,r2,r3
 8029b40:	e0befb15 	stw	r2,-1044(fp)
			max_dist += tdist*tdist;
 8029b44:	e13efb17 	ldw	r4,-1044(fp)
 8029b48:	e17efb17 	ldw	r5,-1044(fp)
 8029b4c:	802c2180 	call	802c218 <__mulsi3>
 8029b50:	e0fef217 	ldw	r3,-1080(fp)
 8029b54:	1885883a 	add	r2,r3,r2
 8029b58:	e0bef215 	stw	r2,-1080(fp)
 8029b5c:	00001e06 	br	8029bd8 <find_nearby_colors+0x358>
		} else {
			/* within cell range so no contribution to min_dist */
			if (x <= centerc1) {
 8029b60:	e0befa17 	ldw	r2,-1048(fp)
 8029b64:	e0fef717 	ldw	r3,-1060(fp)
 8029b68:	18800e16 	blt	r3,r2,8029ba4 <find_nearby_colors+0x324>
				tdist = (x - maxc1) * C1_SCALE;
 8029b6c:	e0fefa17 	ldw	r3,-1048(fp)
 8029b70:	e0bef617 	ldw	r2,-1064(fp)
 8029b74:	1887c83a 	sub	r3,r3,r2
 8029b78:	1805883a 	mov	r2,r3
 8029b7c:	1085883a 	add	r2,r2,r2
 8029b80:	10c5883a 	add	r2,r2,r3
 8029b84:	e0befb15 	stw	r2,-1044(fp)
				max_dist += tdist*tdist;
 8029b88:	e13efb17 	ldw	r4,-1044(fp)
 8029b8c:	e17efb17 	ldw	r5,-1044(fp)
 8029b90:	802c2180 	call	802c218 <__mulsi3>
 8029b94:	e0fef217 	ldw	r3,-1080(fp)
 8029b98:	1885883a 	add	r2,r3,r2
 8029b9c:	e0bef215 	stw	r2,-1080(fp)
 8029ba0:	00000d06 	br	8029bd8 <find_nearby_colors+0x358>
			} else {
				tdist = (x - minc1) * C1_SCALE;
 8029ba4:	e0fefa17 	ldw	r3,-1048(fp)
 8029ba8:	e0bffe17 	ldw	r2,-8(fp)
 8029bac:	1887c83a 	sub	r3,r3,r2
 8029bb0:	1805883a 	mov	r2,r3
 8029bb4:	1085883a 	add	r2,r2,r2
 8029bb8:	10c5883a 	add	r2,r2,r3
 8029bbc:	e0befb15 	stw	r2,-1044(fp)
				max_dist += tdist*tdist;
 8029bc0:	e13efb17 	ldw	r4,-1044(fp)
 8029bc4:	e17efb17 	ldw	r5,-1044(fp)
 8029bc8:	802c2180 	call	802c218 <__mulsi3>
 8029bcc:	e0fef217 	ldw	r3,-1080(fp)
 8029bd0:	1885883a 	add	r2,r3,r2
 8029bd4:	e0bef215 	stw	r2,-1080(fp)
			}
		}

		x = GETJSAMPLE(cinfo->colormap[2][i]);
 8029bd8:	e0bffc17 	ldw	r2,-16(fp)
 8029bdc:	10801d17 	ldw	r2,116(r2)
 8029be0:	10800204 	addi	r2,r2,8
 8029be4:	10c00017 	ldw	r3,0(r2)
 8029be8:	e0beee17 	ldw	r2,-1096(fp)
 8029bec:	1885883a 	add	r2,r3,r2
 8029bf0:	10800003 	ldbu	r2,0(r2)
 8029bf4:	10803fcc 	andi	r2,r2,255
 8029bf8:	e0befa15 	stw	r2,-1048(fp)
		if (x < minc2) {
 8029bfc:	e0fefa17 	ldw	r3,-1048(fp)
 8029c00:	e0bfff17 	ldw	r2,-4(fp)
 8029c04:	1880150e 	bge	r3,r2,8029c5c <find_nearby_colors+0x3dc>
			tdist = (x - minc2) * C2_SCALE;
 8029c08:	e0fefa17 	ldw	r3,-1048(fp)
 8029c0c:	e0bfff17 	ldw	r2,-4(fp)
 8029c10:	1885c83a 	sub	r2,r3,r2
 8029c14:	e0befb15 	stw	r2,-1044(fp)
			min_dist += tdist*tdist;
 8029c18:	e13efb17 	ldw	r4,-1044(fp)
 8029c1c:	e17efb17 	ldw	r5,-1044(fp)
 8029c20:	802c2180 	call	802c218 <__mulsi3>
 8029c24:	e0fef117 	ldw	r3,-1084(fp)
 8029c28:	1885883a 	add	r2,r3,r2
 8029c2c:	e0bef115 	stw	r2,-1084(fp)
			tdist = (x - maxc2) * C2_SCALE;
 8029c30:	e0fefa17 	ldw	r3,-1048(fp)
 8029c34:	e0bef817 	ldw	r2,-1056(fp)
 8029c38:	1885c83a 	sub	r2,r3,r2
 8029c3c:	e0befb15 	stw	r2,-1044(fp)
			max_dist += tdist*tdist;
 8029c40:	e13efb17 	ldw	r4,-1044(fp)
 8029c44:	e17efb17 	ldw	r5,-1044(fp)
 8029c48:	802c2180 	call	802c218 <__mulsi3>
 8029c4c:	e0fef217 	ldw	r3,-1080(fp)
 8029c50:	1885883a 	add	r2,r3,r2
 8029c54:	e0bef215 	stw	r2,-1080(fp)
 8029c58:	00003006 	br	8029d1c <find_nearby_colors+0x49c>
		} else if (x > maxc2) {
 8029c5c:	e0befa17 	ldw	r2,-1048(fp)
 8029c60:	e0fef817 	ldw	r3,-1056(fp)
 8029c64:	1880150e 	bge	r3,r2,8029cbc <find_nearby_colors+0x43c>
			tdist = (x - maxc2) * C2_SCALE;
 8029c68:	e0fefa17 	ldw	r3,-1048(fp)
 8029c6c:	e0bef817 	ldw	r2,-1056(fp)
 8029c70:	1885c83a 	sub	r2,r3,r2
 8029c74:	e0befb15 	stw	r2,-1044(fp)
			min_dist += tdist*tdist;
 8029c78:	e13efb17 	ldw	r4,-1044(fp)
 8029c7c:	e17efb17 	ldw	r5,-1044(fp)
 8029c80:	802c2180 	call	802c218 <__mulsi3>
 8029c84:	e0fef117 	ldw	r3,-1084(fp)
 8029c88:	1885883a 	add	r2,r3,r2
 8029c8c:	e0bef115 	stw	r2,-1084(fp)
			tdist = (x - minc2) * C2_SCALE;
 8029c90:	e0fefa17 	ldw	r3,-1048(fp)
 8029c94:	e0bfff17 	ldw	r2,-4(fp)
 8029c98:	1885c83a 	sub	r2,r3,r2
 8029c9c:	e0befb15 	stw	r2,-1044(fp)
			max_dist += tdist*tdist;
 8029ca0:	e13efb17 	ldw	r4,-1044(fp)
 8029ca4:	e17efb17 	ldw	r5,-1044(fp)
 8029ca8:	802c2180 	call	802c218 <__mulsi3>
 8029cac:	e0fef217 	ldw	r3,-1080(fp)
 8029cb0:	1885883a 	add	r2,r3,r2
 8029cb4:	e0bef215 	stw	r2,-1080(fp)
 8029cb8:	00001806 	br	8029d1c <find_nearby_colors+0x49c>
		} else {
			/* within cell range so no contribution to min_dist */
			if (x <= centerc2) {
 8029cbc:	e0befa17 	ldw	r2,-1048(fp)
 8029cc0:	e0fef917 	ldw	r3,-1052(fp)
 8029cc4:	18800b16 	blt	r3,r2,8029cf4 <find_nearby_colors+0x474>
				tdist = (x - maxc2) * C2_SCALE;
 8029cc8:	e0fefa17 	ldw	r3,-1048(fp)
 8029ccc:	e0bef817 	ldw	r2,-1056(fp)
 8029cd0:	1885c83a 	sub	r2,r3,r2
 8029cd4:	e0befb15 	stw	r2,-1044(fp)
				max_dist += tdist*tdist;
 8029cd8:	e13efb17 	ldw	r4,-1044(fp)
 8029cdc:	e17efb17 	ldw	r5,-1044(fp)
 8029ce0:	802c2180 	call	802c218 <__mulsi3>
 8029ce4:	e0fef217 	ldw	r3,-1080(fp)
 8029ce8:	1885883a 	add	r2,r3,r2
 8029cec:	e0bef215 	stw	r2,-1080(fp)
 8029cf0:	00000a06 	br	8029d1c <find_nearby_colors+0x49c>
			} else {
				tdist = (x - minc2) * C2_SCALE;
 8029cf4:	e0fefa17 	ldw	r3,-1048(fp)
 8029cf8:	e0bfff17 	ldw	r2,-4(fp)
 8029cfc:	1885c83a 	sub	r2,r3,r2
 8029d00:	e0befb15 	stw	r2,-1044(fp)
				max_dist += tdist*tdist;
 8029d04:	e13efb17 	ldw	r4,-1044(fp)
 8029d08:	e17efb17 	ldw	r5,-1044(fp)
 8029d0c:	802c2180 	call	802c218 <__mulsi3>
 8029d10:	e0fef217 	ldw	r3,-1080(fp)
 8029d14:	1885883a 	add	r2,r3,r2
 8029d18:	e0bef215 	stw	r2,-1080(fp)
			}
		}

		mindist[i] = min_dist;	/* save away the results */
 8029d1c:	e0beee17 	ldw	r2,-1096(fp)
 8029d20:	1085883a 	add	r2,r2,r2
 8029d24:	1085883a 	add	r2,r2,r2
 8029d28:	e0feee04 	addi	r3,fp,-1096
 8029d2c:	1885883a 	add	r2,r3,r2
 8029d30:	10800e04 	addi	r2,r2,56
 8029d34:	e0fef117 	ldw	r3,-1084(fp)
 8029d38:	10c00015 	stw	r3,0(r2)
		if (max_dist < minmaxdist)
 8029d3c:	e0fef217 	ldw	r3,-1080(fp)
 8029d40:	e0bef017 	ldw	r2,-1088(fp)
 8029d44:	1880020e 	bge	r3,r2,8029d50 <find_nearby_colors+0x4d0>
			minmaxdist = max_dist;
 8029d48:	e0bef217 	ldw	r2,-1080(fp)
 8029d4c:	e0bef015 	stw	r2,-1088(fp)
	* We save the minimum distance for each color in mindist[];
	* only the smallest maximum distance is of interest.
	*/
	minmaxdist = 0x7FFFFFFFL;

	for (i = 0; i < numcolors; i++) {
 8029d50:	e0beee17 	ldw	r2,-1096(fp)
 8029d54:	10800044 	addi	r2,r2,1
 8029d58:	e0beee15 	stw	r2,-1096(fp)
 8029d5c:	e0feee17 	ldw	r3,-1096(fp)
 8029d60:	e0bef317 	ldw	r2,-1076(fp)
 8029d64:	18beee16 	blt	r3,r2,8029920 <find_nearby_colors+0xa0>

	/* Now we know that no cell in the update box is more than minmaxdist
	* away from some colormap entry.  Therefore, only colors that are
	* within minmaxdist of some part of the box need be considered.
	*/
	ncolors = 0;
 8029d68:	e03eef15 	stw	zero,-1092(fp)
	for (i = 0; i < numcolors; i++) {
 8029d6c:	e03eee15 	stw	zero,-1096(fp)
 8029d70:	00001406 	br	8029dc4 <find_nearby_colors+0x544>
		if (mindist[i] <= minmaxdist)
 8029d74:	e0beee17 	ldw	r2,-1096(fp)
 8029d78:	1085883a 	add	r2,r2,r2
 8029d7c:	1085883a 	add	r2,r2,r2
 8029d80:	e0feee04 	addi	r3,fp,-1096
 8029d84:	1885883a 	add	r2,r3,r2
 8029d88:	10800e04 	addi	r2,r2,56
 8029d8c:	10800017 	ldw	r2,0(r2)
 8029d90:	e0fef017 	ldw	r3,-1088(fp)
 8029d94:	18800816 	blt	r3,r2,8029db8 <find_nearby_colors+0x538>
			colorlist[ncolors++] = (JSAMPLE) i;
 8029d98:	e0beef17 	ldw	r2,-1092(fp)
 8029d9c:	e0c00217 	ldw	r3,8(fp)
 8029da0:	1885883a 	add	r2,r3,r2
 8029da4:	e0feee17 	ldw	r3,-1096(fp)
 8029da8:	10c00005 	stb	r3,0(r2)
 8029dac:	e0beef17 	ldw	r2,-1092(fp)
 8029db0:	10800044 	addi	r2,r2,1
 8029db4:	e0beef15 	stw	r2,-1092(fp)
	/* Now we know that no cell in the update box is more than minmaxdist
	* away from some colormap entry.  Therefore, only colors that are
	* within minmaxdist of some part of the box need be considered.
	*/
	ncolors = 0;
	for (i = 0; i < numcolors; i++) {
 8029db8:	e0beee17 	ldw	r2,-1096(fp)
 8029dbc:	10800044 	addi	r2,r2,1
 8029dc0:	e0beee15 	stw	r2,-1096(fp)
 8029dc4:	e0feee17 	ldw	r3,-1096(fp)
 8029dc8:	e0bef317 	ldw	r2,-1076(fp)
 8029dcc:	18bfe916 	blt	r3,r2,8029d74 <find_nearby_colors+0x4f4>
		if (mindist[i] <= minmaxdist)
			colorlist[ncolors++] = (JSAMPLE) i;
	}
	return ncolors;
 8029dd0:	e0beef17 	ldw	r2,-1092(fp)
}
 8029dd4:	e037883a 	mov	sp,fp
 8029dd8:	dfc00117 	ldw	ra,4(sp)
 8029ddc:	df000017 	ldw	fp,0(sp)
 8029de0:	dec00204 	addi	sp,sp,8
 8029de4:	f800283a 	ret

08029de8 <find_best_colors>:
	* given the list of candidate colors prepared by find_nearby_colors.
	* Return the indexes of the closest entries in the bestcolor[] array.
	* This routine uses Thomas' incremental distance calculation method to
	* find the distance from a colormap entry to successive cells in the box.
	*/
{
 8029de8:	deff6a04 	addi	sp,sp,-600
 8029dec:	dfc09515 	stw	ra,596(sp)
 8029df0:	df009415 	stw	fp,592(sp)
 8029df4:	dc809315 	stw	r18,588(sp)
 8029df8:	dc409215 	stw	r17,584(sp)
 8029dfc:	dc009115 	stw	r16,580(sp)
 8029e00:	df009104 	addi	fp,sp,580
 8029e04:	e13ffc15 	stw	r4,-16(fp)
 8029e08:	e17ffd15 	stw	r5,-12(fp)
 8029e0c:	e1bffe15 	stw	r6,-8(fp)
 8029e10:	e1ffff15 	stw	r7,-4(fp)
	INT32 inc0, inc1, inc2;	/* initial values for increments */
	/* This array holds the distance to the nearest-so-far color for each cell */
	INT32 bestdist[BOX_C0_ELEMS * BOX_C1_ELEMS * BOX_C2_ELEMS];

	/* Initialize best-distance for each cell of the update box */
	bptr = bestdist;
 8029e14:	e43f7c04 	addi	r16,fp,-528
	for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 8029e18:	00801fc4 	movi	r2,127
 8029e1c:	e0bf7215 	stw	r2,-568(fp)
 8029e20:	00000706 	br	8029e40 <find_best_colors+0x58>
		*bptr++ = 0x7FFFFFFFL;
 8029e24:	00a00034 	movhi	r2,32768
 8029e28:	10bfffc4 	addi	r2,r2,-1
 8029e2c:	80800015 	stw	r2,0(r16)
 8029e30:	84000104 	addi	r16,r16,4
	/* This array holds the distance to the nearest-so-far color for each cell */
	INT32 bestdist[BOX_C0_ELEMS * BOX_C1_ELEMS * BOX_C2_ELEMS];

	/* Initialize best-distance for each cell of the update box */
	bptr = bestdist;
	for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 8029e34:	e0bf7217 	ldw	r2,-568(fp)
 8029e38:	10bfffc4 	addi	r2,r2,-1
 8029e3c:	e0bf7215 	stw	r2,-568(fp)
 8029e40:	e0bf7217 	ldw	r2,-568(fp)
 8029e44:	103ff70e 	bge	r2,zero,8029e24 <find_best_colors+0x3c>
	/* Nominal steps between cell centers ("x" in Thomas article) */
#define STEP_C0  ((1 << C0_SHIFT) * C0_SCALE)
#define STEP_C1  ((1 << C1_SHIFT) * C1_SCALE)
#define STEP_C2  ((1 << C2_SHIFT) * C2_SCALE)

	for (i = 0; i < numcolors; i++) {
 8029e48:	e03f7215 	stw	zero,-568(fp)
 8029e4c:	00008806 	br	802a070 <find_best_colors+0x288>
		icolor = GETJSAMPLE(colorlist[i]);
 8029e50:	e0bf7217 	ldw	r2,-568(fp)
 8029e54:	e0c00617 	ldw	r3,24(fp)
 8029e58:	1885883a 	add	r2,r3,r2
 8029e5c:	10800003 	ldbu	r2,0(r2)
 8029e60:	10803fcc 	andi	r2,r2,255
 8029e64:	e0bf7815 	stw	r2,-544(fp)
		/* Compute (square of) distance from minc0/c1/c2 to this color */
		inc0 = (minc0 - GETJSAMPLE(cinfo->colormap[0][icolor])) * C0_SCALE;
 8029e68:	e0bffc17 	ldw	r2,-16(fp)
 8029e6c:	10801d17 	ldw	r2,116(r2)
 8029e70:	10c00017 	ldw	r3,0(r2)
 8029e74:	e0bf7817 	ldw	r2,-544(fp)
 8029e78:	1885883a 	add	r2,r3,r2
 8029e7c:	10800003 	ldbu	r2,0(r2)
 8029e80:	10803fcc 	andi	r2,r2,255
 8029e84:	e0fffd17 	ldw	r3,-12(fp)
 8029e88:	1885c83a 	sub	r2,r3,r2
 8029e8c:	1085883a 	add	r2,r2,r2
 8029e90:	e0bf7915 	stw	r2,-540(fp)
		dist0 = inc0*inc0;
 8029e94:	e13f7917 	ldw	r4,-540(fp)
 8029e98:	e17f7917 	ldw	r5,-540(fp)
 8029e9c:	802c2180 	call	802c218 <__mulsi3>
 8029ea0:	e0bf7415 	stw	r2,-560(fp)
		inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 8029ea4:	e0bffc17 	ldw	r2,-16(fp)
 8029ea8:	10801d17 	ldw	r2,116(r2)
 8029eac:	10800104 	addi	r2,r2,4
 8029eb0:	10c00017 	ldw	r3,0(r2)
 8029eb4:	e0bf7817 	ldw	r2,-544(fp)
 8029eb8:	1885883a 	add	r2,r3,r2
 8029ebc:	10800003 	ldbu	r2,0(r2)
 8029ec0:	10803fcc 	andi	r2,r2,255
 8029ec4:	e0fffe17 	ldw	r3,-8(fp)
 8029ec8:	1887c83a 	sub	r3,r3,r2
 8029ecc:	1805883a 	mov	r2,r3
 8029ed0:	1085883a 	add	r2,r2,r2
 8029ed4:	10c5883a 	add	r2,r2,r3
 8029ed8:	e0bf7a15 	stw	r2,-536(fp)
		dist0 += inc1*inc1;
 8029edc:	e13f7a17 	ldw	r4,-536(fp)
 8029ee0:	e17f7a17 	ldw	r5,-536(fp)
 8029ee4:	802c2180 	call	802c218 <__mulsi3>
 8029ee8:	e0ff7417 	ldw	r3,-560(fp)
 8029eec:	1885883a 	add	r2,r3,r2
 8029ef0:	e0bf7415 	stw	r2,-560(fp)
		inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 8029ef4:	e0bffc17 	ldw	r2,-16(fp)
 8029ef8:	10801d17 	ldw	r2,116(r2)
 8029efc:	10800204 	addi	r2,r2,8
 8029f00:	10c00017 	ldw	r3,0(r2)
 8029f04:	e0bf7817 	ldw	r2,-544(fp)
 8029f08:	1885883a 	add	r2,r3,r2
 8029f0c:	10800003 	ldbu	r2,0(r2)
 8029f10:	10803fcc 	andi	r2,r2,255
 8029f14:	e0ffff17 	ldw	r3,-4(fp)
 8029f18:	1885c83a 	sub	r2,r3,r2
 8029f1c:	e0bf7b15 	stw	r2,-532(fp)
		dist0 += inc2*inc2;
 8029f20:	e13f7b17 	ldw	r4,-532(fp)
 8029f24:	e17f7b17 	ldw	r5,-532(fp)
 8029f28:	802c2180 	call	802c218 <__mulsi3>
 8029f2c:	e0ff7417 	ldw	r3,-560(fp)
 8029f30:	1885883a 	add	r2,r3,r2
 8029f34:	e0bf7415 	stw	r2,-560(fp)
		/* Form the initial difference increments */
		inc0 = inc0 * (2 * STEP_C0) + STEP_C0 * STEP_C0;
 8029f38:	e0bf7917 	ldw	r2,-540(fp)
 8029f3c:	10800204 	addi	r2,r2,8
 8029f40:	1004917a 	slli	r2,r2,5
 8029f44:	e0bf7915 	stw	r2,-540(fp)
		inc1 = inc1 * (2 * STEP_C1) + STEP_C1 * STEP_C1;
 8029f48:	e13f7a17 	ldw	r4,-536(fp)
 8029f4c:	01400604 	movi	r5,24
 8029f50:	802c2180 	call	802c218 <__mulsi3>
 8029f54:	10802404 	addi	r2,r2,144
 8029f58:	e0bf7a15 	stw	r2,-536(fp)
		inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
 8029f5c:	e0bf7b17 	ldw	r2,-532(fp)
 8029f60:	10800104 	addi	r2,r2,4
 8029f64:	1004913a 	slli	r2,r2,4
 8029f68:	e0bf7b15 	stw	r2,-532(fp)
		/* Now loop over all cells in box, updating distance per Thomas method */
		bptr = bestdist;
 8029f6c:	e43f7c04 	addi	r16,fp,-528
		cptr = bestcolor;
 8029f70:	e0800717 	ldw	r2,28(fp)
 8029f74:	e0bf7315 	stw	r2,-564(fp)
		xx0 = inc0;
 8029f78:	e0bf7917 	ldw	r2,-540(fp)
 8029f7c:	e0bf7615 	stw	r2,-552(fp)
		for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 8029f80:	008000c4 	movi	r2,3
 8029f84:	e0bf6f15 	stw	r2,-580(fp)
 8029f88:	00003406 	br	802a05c <find_best_colors+0x274>
			dist1 = dist0;
 8029f8c:	e0bf7417 	ldw	r2,-560(fp)
 8029f90:	e0bf7515 	stw	r2,-556(fp)
			xx1 = inc1;
 8029f94:	e0bf7a17 	ldw	r2,-536(fp)
 8029f98:	e0bf7715 	stw	r2,-548(fp)
			for (ic1 = BOX_C1_ELEMS-1; ic1 >= 0; ic1--) {
 8029f9c:	008001c4 	movi	r2,7
 8029fa0:	e0bf7015 	stw	r2,-576(fp)
 8029fa4:	00002106 	br	802a02c <find_best_colors+0x244>
				dist2 = dist1;
 8029fa8:	e47f7517 	ldw	r17,-556(fp)
				xx2 = inc2;
 8029fac:	e4bf7b17 	ldw	r18,-532(fp)
				for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
 8029fb0:	008000c4 	movi	r2,3
 8029fb4:	e0bf7115 	stw	r2,-572(fp)
 8029fb8:	00001006 	br	8029ffc <find_best_colors+0x214>
					if (dist2 < *bptr) {
 8029fbc:	80800017 	ldw	r2,0(r16)
 8029fc0:	8880050e 	bge	r17,r2,8029fd8 <find_best_colors+0x1f0>
						*bptr = dist2;
 8029fc4:	84400015 	stw	r17,0(r16)
						*cptr = (JSAMPLE) icolor;
 8029fc8:	e0bf7817 	ldw	r2,-544(fp)
 8029fcc:	1007883a 	mov	r3,r2
 8029fd0:	e0bf7317 	ldw	r2,-564(fp)
 8029fd4:	10c00005 	stb	r3,0(r2)
					}
					dist2 += xx2;
 8029fd8:	8ca3883a 	add	r17,r17,r18
					xx2 += 2 * STEP_C2 * STEP_C2;
 8029fdc:	94802004 	addi	r18,r18,128
					bptr++;
 8029fe0:	84000104 	addi	r16,r16,4
					cptr++;
 8029fe4:	e0bf7317 	ldw	r2,-564(fp)
 8029fe8:	10800044 	addi	r2,r2,1
 8029fec:	e0bf7315 	stw	r2,-564(fp)
			dist1 = dist0;
			xx1 = inc1;
			for (ic1 = BOX_C1_ELEMS-1; ic1 >= 0; ic1--) {
				dist2 = dist1;
				xx2 = inc2;
				for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
 8029ff0:	e0bf7117 	ldw	r2,-572(fp)
 8029ff4:	10bfffc4 	addi	r2,r2,-1
 8029ff8:	e0bf7115 	stw	r2,-572(fp)
 8029ffc:	e0bf7117 	ldw	r2,-572(fp)
 802a000:	103fee0e 	bge	r2,zero,8029fbc <find_best_colors+0x1d4>
					dist2 += xx2;
					xx2 += 2 * STEP_C2 * STEP_C2;
					bptr++;
					cptr++;
				}
				dist1 += xx1;
 802a004:	e0ff7517 	ldw	r3,-556(fp)
 802a008:	e0bf7717 	ldw	r2,-548(fp)
 802a00c:	1885883a 	add	r2,r3,r2
 802a010:	e0bf7515 	stw	r2,-556(fp)
				xx1 += 2 * STEP_C1 * STEP_C1;
 802a014:	e0bf7717 	ldw	r2,-548(fp)
 802a018:	10804804 	addi	r2,r2,288
 802a01c:	e0bf7715 	stw	r2,-548(fp)
		cptr = bestcolor;
		xx0 = inc0;
		for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
			dist1 = dist0;
			xx1 = inc1;
			for (ic1 = BOX_C1_ELEMS-1; ic1 >= 0; ic1--) {
 802a020:	e0bf7017 	ldw	r2,-576(fp)
 802a024:	10bfffc4 	addi	r2,r2,-1
 802a028:	e0bf7015 	stw	r2,-576(fp)
 802a02c:	e0bf7017 	ldw	r2,-576(fp)
 802a030:	103fdd0e 	bge	r2,zero,8029fa8 <find_best_colors+0x1c0>
					cptr++;
				}
				dist1 += xx1;
				xx1 += 2 * STEP_C1 * STEP_C1;
			}
			dist0 += xx0;
 802a034:	e0ff7417 	ldw	r3,-560(fp)
 802a038:	e0bf7617 	ldw	r2,-552(fp)
 802a03c:	1885883a 	add	r2,r3,r2
 802a040:	e0bf7415 	stw	r2,-560(fp)
			xx0 += 2 * STEP_C0 * STEP_C0;
 802a044:	e0bf7617 	ldw	r2,-552(fp)
 802a048:	10808004 	addi	r2,r2,512
 802a04c:	e0bf7615 	stw	r2,-552(fp)
		inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
		/* Now loop over all cells in box, updating distance per Thomas method */
		bptr = bestdist;
		cptr = bestcolor;
		xx0 = inc0;
		for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 802a050:	e0bf6f17 	ldw	r2,-580(fp)
 802a054:	10bfffc4 	addi	r2,r2,-1
 802a058:	e0bf6f15 	stw	r2,-580(fp)
 802a05c:	e0bf6f17 	ldw	r2,-580(fp)
 802a060:	103fca0e 	bge	r2,zero,8029f8c <find_best_colors+0x1a4>
	/* Nominal steps between cell centers ("x" in Thomas article) */
#define STEP_C0  ((1 << C0_SHIFT) * C0_SCALE)
#define STEP_C1  ((1 << C1_SHIFT) * C1_SCALE)
#define STEP_C2  ((1 << C2_SHIFT) * C2_SCALE)

	for (i = 0; i < numcolors; i++) {
 802a064:	e0bf7217 	ldw	r2,-568(fp)
 802a068:	10800044 	addi	r2,r2,1
 802a06c:	e0bf7215 	stw	r2,-568(fp)
 802a070:	e0ff7217 	ldw	r3,-568(fp)
 802a074:	e0800517 	ldw	r2,20(fp)
 802a078:	18bf7516 	blt	r3,r2,8029e50 <find_best_colors+0x68>
			}
			dist0 += xx0;
			xx0 += 2 * STEP_C0 * STEP_C0;
		}
	}
}
 802a07c:	e037883a 	mov	sp,fp
 802a080:	dfc00417 	ldw	ra,16(sp)
 802a084:	df000317 	ldw	fp,12(sp)
 802a088:	dc800217 	ldw	r18,8(sp)
 802a08c:	dc400117 	ldw	r17,4(sp)
 802a090:	dc000017 	ldw	r16,0(sp)
 802a094:	dec00504 	addi	sp,sp,20
 802a098:	f800283a 	ret

0802a09c <fill_inverse_cmap>:
LOCAL(void)
	fill_inverse_cmap (j_decompress_ptr cinfo, int c0, int c1, int c2)
	/* Fill the inverse-colormap entries in the update box that contains */
	/* histogram cell c0/c1/c2.  (Only that one cell MUST be filled, but */
	/* we can fill as many others as we wish.) */
{
 802a09c:	deff8c04 	addi	sp,sp,-464
 802a0a0:	dfc07315 	stw	ra,460(sp)
 802a0a4:	df007215 	stw	fp,456(sp)
 802a0a8:	dc407115 	stw	r17,452(sp)
 802a0ac:	dc007015 	stw	r16,448(sp)
 802a0b0:	df007004 	addi	fp,sp,448
 802a0b4:	e13ffc15 	stw	r4,-16(fp)
 802a0b8:	e17ffd15 	stw	r5,-12(fp)
 802a0bc:	e1bffe15 	stw	r6,-8(fp)
 802a0c0:	e1ffff15 	stw	r7,-4(fp)
	my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 802a0c4:	e0bffc17 	ldw	r2,-16(fp)
 802a0c8:	10806e17 	ldw	r2,440(r2)
 802a0cc:	e0bf9615 	stw	r2,-424(fp)
	hist3d histogram = cquantize->histogram;
 802a0d0:	e0bf9617 	ldw	r2,-424(fp)
 802a0d4:	10800617 	ldw	r2,24(r2)
 802a0d8:	e0bf9715 	stw	r2,-420(fp)
	int numcolors;		/* number of candidate colors */
	/* This array holds the actually closest colormap index for each cell. */
	JSAMPLE bestcolor[BOX_C0_ELEMS * BOX_C1_ELEMS * BOX_C2_ELEMS];

	/* Convert cell coordinates to update box ID */
	c0 >>= BOX_C0_LOG;
 802a0dc:	e0bffd17 	ldw	r2,-12(fp)
 802a0e0:	1005d0ba 	srai	r2,r2,2
 802a0e4:	e0bffd15 	stw	r2,-12(fp)
	c1 >>= BOX_C1_LOG;
 802a0e8:	e0bffe17 	ldw	r2,-8(fp)
 802a0ec:	1005d0fa 	srai	r2,r2,3
 802a0f0:	e0bffe15 	stw	r2,-8(fp)
	c2 >>= BOX_C2_LOG;
 802a0f4:	e0bfff17 	ldw	r2,-4(fp)
 802a0f8:	1005d0ba 	srai	r2,r2,2
 802a0fc:	e0bfff15 	stw	r2,-4(fp)

	/* Compute true coordinates of update box's origin corner.
	* Actually we compute the coordinates of the center of the corner
	* histogram cell, which are the lower bounds of the volume we care about.
	*/
	minc0 = (c0 << BOX_C0_SHIFT) + ((1 << C0_SHIFT) >> 1);
 802a100:	e0bffd17 	ldw	r2,-12(fp)
 802a104:	1004917a 	slli	r2,r2,5
 802a108:	10800104 	addi	r2,r2,4
 802a10c:	e0bf9815 	stw	r2,-416(fp)
	minc1 = (c1 << BOX_C1_SHIFT) + ((1 << C1_SHIFT) >> 1);
 802a110:	e0bffe17 	ldw	r2,-8(fp)
 802a114:	1004917a 	slli	r2,r2,5
 802a118:	10800084 	addi	r2,r2,2
 802a11c:	e0bf9915 	stw	r2,-412(fp)
	minc2 = (c2 << BOX_C2_SHIFT) + ((1 << C2_SHIFT) >> 1);
 802a120:	e0bfff17 	ldw	r2,-4(fp)
 802a124:	1004917a 	slli	r2,r2,5
 802a128:	10800104 	addi	r2,r2,4
 802a12c:	e0bf9a15 	stw	r2,-408(fp)

	/* Determine which colormap entries are close enough to be candidates
	* for the nearest entry to some cell in the update box.
	*/
	numcolors = find_nearby_colors(cinfo, minc0, minc1, minc2, colorlist);
 802a130:	e0bf9c04 	addi	r2,fp,-400
 802a134:	d8800015 	stw	r2,0(sp)
 802a138:	e13ffc17 	ldw	r4,-16(fp)
 802a13c:	e17f9817 	ldw	r5,-416(fp)
 802a140:	e1bf9917 	ldw	r6,-412(fp)
 802a144:	e1ff9a17 	ldw	r7,-408(fp)
 802a148:	80298800 	call	8029880 <find_nearby_colors>
 802a14c:	e0bf9b15 	stw	r2,-404(fp)

	/* Determine the actually nearest colors. */
	find_best_colors(cinfo, minc0, minc1, minc2, numcolors, colorlist,
 802a150:	e0bf9b17 	ldw	r2,-404(fp)
 802a154:	d8800015 	stw	r2,0(sp)
 802a158:	e0bf9c04 	addi	r2,fp,-400
 802a15c:	d8800115 	stw	r2,4(sp)
		bestcolor);
 802a160:	e0bfdc04 	addi	r2,fp,-144
	* for the nearest entry to some cell in the update box.
	*/
	numcolors = find_nearby_colors(cinfo, minc0, minc1, minc2, colorlist);

	/* Determine the actually nearest colors. */
	find_best_colors(cinfo, minc0, minc1, minc2, numcolors, colorlist,
 802a164:	d8800215 	stw	r2,8(sp)
 802a168:	e13ffc17 	ldw	r4,-16(fp)
 802a16c:	e17f9817 	ldw	r5,-416(fp)
 802a170:	e1bf9917 	ldw	r6,-412(fp)
 802a174:	e1ff9a17 	ldw	r7,-408(fp)
 802a178:	8029de80 	call	8029de8 <find_best_colors>
		bestcolor);

	/* Save the best color numbers (plus 1) in the main cache array */
	c0 <<= BOX_C0_LOG;		/* convert ID back to base cell indexes */
 802a17c:	e0bffd17 	ldw	r2,-12(fp)
 802a180:	1085883a 	add	r2,r2,r2
 802a184:	1085883a 	add	r2,r2,r2
 802a188:	e0bffd15 	stw	r2,-12(fp)
	c1 <<= BOX_C1_LOG;
 802a18c:	e0bffe17 	ldw	r2,-8(fp)
 802a190:	100490fa 	slli	r2,r2,3
 802a194:	e0bffe15 	stw	r2,-8(fp)
	c2 <<= BOX_C2_LOG;
 802a198:	e0bfff17 	ldw	r2,-4(fp)
 802a19c:	1085883a 	add	r2,r2,r2
 802a1a0:	1085883a 	add	r2,r2,r2
 802a1a4:	e0bfff15 	stw	r2,-4(fp)
	cptr = bestcolor;
 802a1a8:	e43fdc04 	addi	r16,fp,-144
	for (ic0 = 0; ic0 < BOX_C0_ELEMS; ic0++) {
 802a1ac:	e03f9315 	stw	zero,-436(fp)
 802a1b0:	00002906 	br	802a258 <fill_inverse_cmap+0x1bc>
		for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 802a1b4:	e03f9415 	stw	zero,-432(fp)
 802a1b8:	00002106 	br	802a240 <fill_inverse_cmap+0x1a4>
			cachep = & histogram[c0+ic0][c1+ic1][c2];
 802a1bc:	e0fffd17 	ldw	r3,-12(fp)
 802a1c0:	e0bf9317 	ldw	r2,-436(fp)
 802a1c4:	1885883a 	add	r2,r3,r2
 802a1c8:	1085883a 	add	r2,r2,r2
 802a1cc:	1085883a 	add	r2,r2,r2
 802a1d0:	e0ff9717 	ldw	r3,-420(fp)
 802a1d4:	1885883a 	add	r2,r3,r2
 802a1d8:	10c00017 	ldw	r3,0(r2)
 802a1dc:	e13ffe17 	ldw	r4,-8(fp)
 802a1e0:	e0bf9417 	ldw	r2,-432(fp)
 802a1e4:	2085883a 	add	r2,r4,r2
 802a1e8:	100491ba 	slli	r2,r2,6
 802a1ec:	1887883a 	add	r3,r3,r2
 802a1f0:	e0bfff17 	ldw	r2,-4(fp)
 802a1f4:	1085883a 	add	r2,r2,r2
 802a1f8:	18a3883a 	add	r17,r3,r2
			for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 802a1fc:	e03f9515 	stw	zero,-428(fp)
 802a200:	00000906 	br	802a228 <fill_inverse_cmap+0x18c>
				*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
 802a204:	80800003 	ldbu	r2,0(r16)
 802a208:	10803fcc 	andi	r2,r2,255
 802a20c:	10800044 	addi	r2,r2,1
 802a210:	8880000d 	sth	r2,0(r17)
 802a214:	8c400084 	addi	r17,r17,2
 802a218:	84000044 	addi	r16,r16,1
	c2 <<= BOX_C2_LOG;
	cptr = bestcolor;
	for (ic0 = 0; ic0 < BOX_C0_ELEMS; ic0++) {
		for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
			cachep = & histogram[c0+ic0][c1+ic1][c2];
			for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 802a21c:	e0bf9517 	ldw	r2,-428(fp)
 802a220:	10800044 	addi	r2,r2,1
 802a224:	e0bf9515 	stw	r2,-428(fp)
 802a228:	e0bf9517 	ldw	r2,-428(fp)
 802a22c:	10800110 	cmplti	r2,r2,4
 802a230:	103ff41e 	bne	r2,zero,802a204 <fill_inverse_cmap+0x168>
	c0 <<= BOX_C0_LOG;		/* convert ID back to base cell indexes */
	c1 <<= BOX_C1_LOG;
	c2 <<= BOX_C2_LOG;
	cptr = bestcolor;
	for (ic0 = 0; ic0 < BOX_C0_ELEMS; ic0++) {
		for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 802a234:	e0bf9417 	ldw	r2,-432(fp)
 802a238:	10800044 	addi	r2,r2,1
 802a23c:	e0bf9415 	stw	r2,-432(fp)
 802a240:	e0bf9417 	ldw	r2,-432(fp)
 802a244:	10800210 	cmplti	r2,r2,8
 802a248:	103fdc1e 	bne	r2,zero,802a1bc <fill_inverse_cmap+0x120>
	/* Save the best color numbers (plus 1) in the main cache array */
	c0 <<= BOX_C0_LOG;		/* convert ID back to base cell indexes */
	c1 <<= BOX_C1_LOG;
	c2 <<= BOX_C2_LOG;
	cptr = bestcolor;
	for (ic0 = 0; ic0 < BOX_C0_ELEMS; ic0++) {
 802a24c:	e0bf9317 	ldw	r2,-436(fp)
 802a250:	10800044 	addi	r2,r2,1
 802a254:	e0bf9315 	stw	r2,-436(fp)
 802a258:	e0bf9317 	ldw	r2,-436(fp)
 802a25c:	10800110 	cmplti	r2,r2,4
 802a260:	103fd41e 	bne	r2,zero,802a1b4 <fill_inverse_cmap+0x118>
			for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
				*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
			}
		}
	}
}
 802a264:	e037883a 	mov	sp,fp
 802a268:	dfc00317 	ldw	ra,12(sp)
 802a26c:	df000217 	ldw	fp,8(sp)
 802a270:	dc400117 	ldw	r17,4(sp)
 802a274:	dc000017 	ldw	r16,0(sp)
 802a278:	dec00404 	addi	sp,sp,16
 802a27c:	f800283a 	ret

0802a280 <pass2_no_dither>:

METHODDEF(void)
	pass2_no_dither (j_decompress_ptr cinfo,
	JSAMPARRAY input_buf, JSAMPARRAY output_buf, int num_rows)
	/* This version performs no dithering */
{
 802a280:	deffef04 	addi	sp,sp,-68
 802a284:	dfc01015 	stw	ra,64(sp)
 802a288:	df000f15 	stw	fp,60(sp)
 802a28c:	dd400e15 	stw	r21,56(sp)
 802a290:	dd000d15 	stw	r20,52(sp)
 802a294:	dcc00c15 	stw	r19,48(sp)
 802a298:	dc800b15 	stw	r18,44(sp)
 802a29c:	dc400a15 	stw	r17,40(sp)
 802a2a0:	dc000915 	stw	r16,36(sp)
 802a2a4:	df000904 	addi	fp,sp,36
 802a2a8:	e13ffc15 	stw	r4,-16(fp)
 802a2ac:	e17ffd15 	stw	r5,-12(fp)
 802a2b0:	e1bffe15 	stw	r6,-8(fp)
 802a2b4:	e1ffff15 	stw	r7,-4(fp)
	my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 802a2b8:	e0bffc17 	ldw	r2,-16(fp)
 802a2bc:	10806e17 	ldw	r2,440(r2)
 802a2c0:	e0bff915 	stw	r2,-28(fp)
	hist3d histogram = cquantize->histogram;
 802a2c4:	e0bff917 	ldw	r2,-28(fp)
 802a2c8:	10800617 	ldw	r2,24(r2)
 802a2cc:	e0bffa15 	stw	r2,-24(fp)
	register JSAMPROW inptr, outptr;
	register histptr cachep;
	register int c0, c1, c2;
	int row;
	JDIMENSION col;
	JDIMENSION width = cinfo->output_width;
 802a2d0:	e0bffc17 	ldw	r2,-16(fp)
 802a2d4:	10801717 	ldw	r2,92(r2)
 802a2d8:	e0bffb15 	stw	r2,-20(fp)

	for (row = 0; row < num_rows; row++) {
 802a2dc:	e03ff715 	stw	zero,-36(fp)
 802a2e0:	00003d06 	br	802a3d8 <pass2_no_dither+0x158>
		inptr = input_buf[row];
 802a2e4:	e0bff717 	ldw	r2,-36(fp)
 802a2e8:	1085883a 	add	r2,r2,r2
 802a2ec:	1085883a 	add	r2,r2,r2
 802a2f0:	e0fffd17 	ldw	r3,-12(fp)
 802a2f4:	1885883a 	add	r2,r3,r2
 802a2f8:	14000017 	ldw	r16,0(r2)
		outptr = output_buf[row];
 802a2fc:	e0bff717 	ldw	r2,-36(fp)
 802a300:	1085883a 	add	r2,r2,r2
 802a304:	1085883a 	add	r2,r2,r2
 802a308:	e0fffe17 	ldw	r3,-8(fp)
 802a30c:	1885883a 	add	r2,r3,r2
 802a310:	14800017 	ldw	r18,0(r2)
		for (col = width; col > 0; col--) {
 802a314:	e0bffb17 	ldw	r2,-20(fp)
 802a318:	e0bff815 	stw	r2,-32(fp)
 802a31c:	00002906 	br	802a3c4 <pass2_no_dither+0x144>
			/* get pixel value and index into the cache */
			c0 = GETJSAMPLE(*inptr++) >> C0_SHIFT;
 802a320:	80800003 	ldbu	r2,0(r16)
 802a324:	10803fcc 	andi	r2,r2,255
 802a328:	1004d0fa 	srli	r2,r2,3
 802a32c:	15003fcc 	andi	r20,r2,255
 802a330:	84000044 	addi	r16,r16,1
			c1 = GETJSAMPLE(*inptr++) >> C1_SHIFT;
 802a334:	80800003 	ldbu	r2,0(r16)
 802a338:	10803fcc 	andi	r2,r2,255
 802a33c:	1004d0ba 	srli	r2,r2,2
 802a340:	14c03fcc 	andi	r19,r2,255
 802a344:	84000044 	addi	r16,r16,1
			c2 = GETJSAMPLE(*inptr++) >> C2_SHIFT;
 802a348:	80800003 	ldbu	r2,0(r16)
 802a34c:	10803fcc 	andi	r2,r2,255
 802a350:	1004d0fa 	srli	r2,r2,3
 802a354:	14403fcc 	andi	r17,r2,255
 802a358:	84000044 	addi	r16,r16,1
			cachep = & histogram[c0][c1][c2];
 802a35c:	a005883a 	mov	r2,r20
 802a360:	1085883a 	add	r2,r2,r2
 802a364:	1085883a 	add	r2,r2,r2
 802a368:	e0fffa17 	ldw	r3,-24(fp)
 802a36c:	1885883a 	add	r2,r3,r2
 802a370:	10c00017 	ldw	r3,0(r2)
 802a374:	9805883a 	mov	r2,r19
 802a378:	100491ba 	slli	r2,r2,6
 802a37c:	1887883a 	add	r3,r3,r2
 802a380:	8c45883a 	add	r2,r17,r17
 802a384:	18ab883a 	add	r21,r3,r2
			/* If we have not seen this color before, find nearest colormap entry */
			/* and update the cache */
			if (*cachep == 0)
 802a388:	a880000b 	ldhu	r2,0(r21)
 802a38c:	10bfffcc 	andi	r2,r2,65535
 802a390:	1000051e 	bne	r2,zero,802a3a8 <pass2_no_dither+0x128>
				fill_inverse_cmap(cinfo, c0,c1,c2);
 802a394:	e13ffc17 	ldw	r4,-16(fp)
 802a398:	a00b883a 	mov	r5,r20
 802a39c:	980d883a 	mov	r6,r19
 802a3a0:	880f883a 	mov	r7,r17
 802a3a4:	802a09c0 	call	802a09c <fill_inverse_cmap>
			/* Now emit the colormap index for this cell */
			*outptr++ = (JSAMPLE) (*cachep - 1);
 802a3a8:	a880000b 	ldhu	r2,0(r21)
 802a3ac:	10bfffc4 	addi	r2,r2,-1
 802a3b0:	90800005 	stb	r2,0(r18)
 802a3b4:	94800044 	addi	r18,r18,1
	JDIMENSION width = cinfo->output_width;

	for (row = 0; row < num_rows; row++) {
		inptr = input_buf[row];
		outptr = output_buf[row];
		for (col = width; col > 0; col--) {
 802a3b8:	e0bff817 	ldw	r2,-32(fp)
 802a3bc:	10bfffc4 	addi	r2,r2,-1
 802a3c0:	e0bff815 	stw	r2,-32(fp)
 802a3c4:	e0bff817 	ldw	r2,-32(fp)
 802a3c8:	103fd51e 	bne	r2,zero,802a320 <pass2_no_dither+0xa0>
	register int c0, c1, c2;
	int row;
	JDIMENSION col;
	JDIMENSION width = cinfo->output_width;

	for (row = 0; row < num_rows; row++) {
 802a3cc:	e0bff717 	ldw	r2,-36(fp)
 802a3d0:	10800044 	addi	r2,r2,1
 802a3d4:	e0bff715 	stw	r2,-36(fp)
 802a3d8:	e0fff717 	ldw	r3,-36(fp)
 802a3dc:	e0bfff17 	ldw	r2,-4(fp)
 802a3e0:	18bfc016 	blt	r3,r2,802a2e4 <pass2_no_dither+0x64>
				fill_inverse_cmap(cinfo, c0,c1,c2);
			/* Now emit the colormap index for this cell */
			*outptr++ = (JSAMPLE) (*cachep - 1);
		}
	}
}
 802a3e4:	e037883a 	mov	sp,fp
 802a3e8:	dfc00717 	ldw	ra,28(sp)
 802a3ec:	df000617 	ldw	fp,24(sp)
 802a3f0:	dd400517 	ldw	r21,20(sp)
 802a3f4:	dd000417 	ldw	r20,16(sp)
 802a3f8:	dcc00317 	ldw	r19,12(sp)
 802a3fc:	dc800217 	ldw	r18,8(sp)
 802a400:	dc400117 	ldw	r17,4(sp)
 802a404:	dc000017 	ldw	r16,0(sp)
 802a408:	dec00804 	addi	sp,sp,32
 802a40c:	f800283a 	ret

0802a410 <pass2_fs_dither>:

METHODDEF(void)
	pass2_fs_dither (j_decompress_ptr cinfo,
	JSAMPARRAY input_buf, JSAMPARRAY output_buf, int num_rows)
	/* This version performs Floyd-Steinberg dithering */
{
 802a410:	deffdf04 	addi	sp,sp,-132
 802a414:	dfc02015 	stw	ra,128(sp)
 802a418:	df001f15 	stw	fp,124(sp)
 802a41c:	dd401e15 	stw	r21,120(sp)
 802a420:	dd001d15 	stw	r20,116(sp)
 802a424:	dcc01c15 	stw	r19,112(sp)
 802a428:	dc801b15 	stw	r18,108(sp)
 802a42c:	dc401a15 	stw	r17,104(sp)
 802a430:	dc001915 	stw	r16,100(sp)
 802a434:	df001904 	addi	fp,sp,100
 802a438:	e13ffc15 	stw	r4,-16(fp)
 802a43c:	e17ffd15 	stw	r5,-12(fp)
 802a440:	e1bffe15 	stw	r6,-8(fp)
 802a444:	e1ffff15 	stw	r7,-4(fp)
	my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 802a448:	e0bffc17 	ldw	r2,-16(fp)
 802a44c:	10806e17 	ldw	r2,440(r2)
 802a450:	e0bff315 	stw	r2,-52(fp)
	hist3d histogram = cquantize->histogram;
 802a454:	e0bff317 	ldw	r2,-52(fp)
 802a458:	10800617 	ldw	r2,24(r2)
 802a45c:	e0bff415 	stw	r2,-48(fp)
	histptr cachep;
	int dir;			/* +1 or -1 depending on direction */
	int dir3;			/* 3*dir, for advancing inptr & errorptr */
	int row;
	JDIMENSION col;
	JDIMENSION width = cinfo->output_width;
 802a460:	e0bffc17 	ldw	r2,-16(fp)
 802a464:	10801717 	ldw	r2,92(r2)
 802a468:	e0bff515 	stw	r2,-44(fp)
	JSAMPLE *range_limit = cinfo->sample_range_limit;
 802a46c:	e0bffc17 	ldw	r2,-16(fp)
 802a470:	10804917 	ldw	r2,292(r2)
 802a474:	e0bff615 	stw	r2,-40(fp)
	int *error_limit = cquantize->error_limiter;
 802a478:	e0bff317 	ldw	r2,-52(fp)
 802a47c:	10800a17 	ldw	r2,40(r2)
 802a480:	e0bff715 	stw	r2,-36(fp)
	JSAMPROW colormap0 = cinfo->colormap[0];
 802a484:	e0bffc17 	ldw	r2,-16(fp)
 802a488:	10801d17 	ldw	r2,116(r2)
 802a48c:	10800017 	ldw	r2,0(r2)
 802a490:	e0bff815 	stw	r2,-32(fp)
	JSAMPROW colormap1 = cinfo->colormap[1];
 802a494:	e0bffc17 	ldw	r2,-16(fp)
 802a498:	10801d17 	ldw	r2,116(r2)
 802a49c:	10800117 	ldw	r2,4(r2)
 802a4a0:	e0bff915 	stw	r2,-28(fp)
	JSAMPROW colormap2 = cinfo->colormap[2];
 802a4a4:	e0bffc17 	ldw	r2,-16(fp)
 802a4a8:	10801d17 	ldw	r2,116(r2)
 802a4ac:	10800217 	ldw	r2,8(r2)
 802a4b0:	e0bffa15 	stw	r2,-24(fp)
	SHIFT_TEMPS

		for (row = 0; row < num_rows; row++) {
 802a4b4:	e03ff115 	stw	zero,-60(fp)
 802a4b8:	00011106 	br	802a900 <pass2_fs_dither+0x4f0>
			inptr = input_buf[row];
 802a4bc:	e0bff117 	ldw	r2,-60(fp)
 802a4c0:	1085883a 	add	r2,r2,r2
 802a4c4:	1085883a 	add	r2,r2,r2
 802a4c8:	e0fffd17 	ldw	r3,-12(fp)
 802a4cc:	1885883a 	add	r2,r3,r2
 802a4d0:	10800017 	ldw	r2,0(r2)
 802a4d4:	e0bfed15 	stw	r2,-76(fp)
			outptr = output_buf[row];
 802a4d8:	e0bff117 	ldw	r2,-60(fp)
 802a4dc:	1085883a 	add	r2,r2,r2
 802a4e0:	1085883a 	add	r2,r2,r2
 802a4e4:	e0fffe17 	ldw	r3,-8(fp)
 802a4e8:	1885883a 	add	r2,r3,r2
 802a4ec:	10800017 	ldw	r2,0(r2)
 802a4f0:	e0bfee15 	stw	r2,-72(fp)
			if (cquantize->on_odd_row) {
 802a4f4:	e0bff317 	ldw	r2,-52(fp)
 802a4f8:	10800903 	ldbu	r2,36(r2)
 802a4fc:	10803fcc 	andi	r2,r2,255
 802a500:	10001c26 	beq	r2,zero,802a574 <pass2_fs_dither+0x164>
				/* work right to left in this row */
				inptr += (width-1) * 3;	/* so point to rightmost pixel */
 802a504:	e0fff517 	ldw	r3,-44(fp)
 802a508:	1805883a 	mov	r2,r3
 802a50c:	1085883a 	add	r2,r2,r2
 802a510:	10c5883a 	add	r2,r2,r3
 802a514:	10bfff44 	addi	r2,r2,-3
 802a518:	e0ffed17 	ldw	r3,-76(fp)
 802a51c:	1885883a 	add	r2,r3,r2
 802a520:	e0bfed15 	stw	r2,-76(fp)
				outptr += width-1;
 802a524:	e0bff517 	ldw	r2,-44(fp)
 802a528:	10bfffc4 	addi	r2,r2,-1
 802a52c:	e0ffee17 	ldw	r3,-72(fp)
 802a530:	1885883a 	add	r2,r3,r2
 802a534:	e0bfee15 	stw	r2,-72(fp)
				dir = -1;
 802a538:	00bfffc4 	movi	r2,-1
 802a53c:	e0bfef15 	stw	r2,-68(fp)
				dir3 = -3;
 802a540:	00bfff44 	movi	r2,-3
 802a544:	e0bff015 	stw	r2,-64(fp)
				errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 802a548:	e0bff317 	ldw	r2,-52(fp)
 802a54c:	14000817 	ldw	r16,32(r2)
 802a550:	e0bff517 	ldw	r2,-44(fp)
 802a554:	10800044 	addi	r2,r2,1
 802a558:	1009883a 	mov	r4,r2
 802a55c:	01400184 	movi	r5,6
 802a560:	802c2180 	call	802c218 <__mulsi3>
 802a564:	80a7883a 	add	r19,r16,r2
				cquantize->on_odd_row = FALSE; /* flip for next time */
 802a568:	e0bff317 	ldw	r2,-52(fp)
 802a56c:	10000905 	stb	zero,36(r2)
 802a570:	00000906 	br	802a598 <pass2_fs_dither+0x188>
			} else {
				/* work left to right in this row */
				dir = 1;
 802a574:	00800044 	movi	r2,1
 802a578:	e0bfef15 	stw	r2,-68(fp)
				dir3 = 3;
 802a57c:	008000c4 	movi	r2,3
 802a580:	e0bff015 	stw	r2,-64(fp)
				errorptr = cquantize->fserrors; /* => entry before first real column */
 802a584:	e0bff317 	ldw	r2,-52(fp)
 802a588:	14c00817 	ldw	r19,32(r2)
				cquantize->on_odd_row = TRUE; /* flip for next time */
 802a58c:	e0bff317 	ldw	r2,-52(fp)
 802a590:	00c00044 	movi	r3,1
 802a594:	10c00905 	stb	r3,36(r2)
			}
			/* Preset error values: no error propagated to first pixel from left */
			cur0 = cur1 = cur2 = 0;
 802a598:	0023883a 	mov	r17,zero
 802a59c:	8821883a 	mov	r16,r17
 802a5a0:	8025883a 	mov	r18,r16
			/* and no error propagated to row below yet */
			belowerr0 = belowerr1 = belowerr2 = 0;
 802a5a4:	e03fe915 	stw	zero,-92(fp)
 802a5a8:	e0bfe917 	ldw	r2,-92(fp)
 802a5ac:	e0bfe815 	stw	r2,-96(fp)
 802a5b0:	e0bfe817 	ldw	r2,-96(fp)
 802a5b4:	e0bfe715 	stw	r2,-100(fp)
			bpreverr0 = bpreverr1 = bpreverr2 = 0;
 802a5b8:	e03fec15 	stw	zero,-80(fp)
 802a5bc:	e0bfec17 	ldw	r2,-80(fp)
 802a5c0:	e0bfeb15 	stw	r2,-84(fp)
 802a5c4:	e0bfeb17 	ldw	r2,-84(fp)
 802a5c8:	e0bfea15 	stw	r2,-88(fp)

			for (col = width; col > 0; col--) {
 802a5cc:	e0bff517 	ldw	r2,-44(fp)
 802a5d0:	e0bff215 	stw	r2,-56(fp)
 802a5d4:	0000bd06 	br	802a8cc <pass2_fs_dither+0x4bc>
				* round the error term (which is expressed * 16) to an integer.
				* RIGHT_SHIFT rounds towards minus infinity, so adding 8 is correct
				* for either sign of the error value.
				* Note: errorptr points to *previous* column's array entry.
				*/
				cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 802a5d8:	e0bff017 	ldw	r2,-64(fp)
 802a5dc:	1085883a 	add	r2,r2,r2
 802a5e0:	9885883a 	add	r2,r19,r2
 802a5e4:	1080000b 	ldhu	r2,0(r2)
 802a5e8:	10bfffcc 	andi	r2,r2,65535
 802a5ec:	10a0001c 	xori	r2,r2,32768
 802a5f0:	10a00004 	addi	r2,r2,-32768
 802a5f4:	1485883a 	add	r2,r2,r18
 802a5f8:	10800204 	addi	r2,r2,8
 802a5fc:	1025d13a 	srai	r18,r2,4
				cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 802a600:	e0bff017 	ldw	r2,-64(fp)
 802a604:	10800044 	addi	r2,r2,1
 802a608:	1085883a 	add	r2,r2,r2
 802a60c:	9885883a 	add	r2,r19,r2
 802a610:	1080000b 	ldhu	r2,0(r2)
 802a614:	10bfffcc 	andi	r2,r2,65535
 802a618:	10a0001c 	xori	r2,r2,32768
 802a61c:	10a00004 	addi	r2,r2,-32768
 802a620:	1405883a 	add	r2,r2,r16
 802a624:	10800204 	addi	r2,r2,8
 802a628:	1021d13a 	srai	r16,r2,4
				cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 802a62c:	e0bff017 	ldw	r2,-64(fp)
 802a630:	10800084 	addi	r2,r2,2
 802a634:	1085883a 	add	r2,r2,r2
 802a638:	9885883a 	add	r2,r19,r2
 802a63c:	1080000b 	ldhu	r2,0(r2)
 802a640:	10bfffcc 	andi	r2,r2,65535
 802a644:	10a0001c 	xori	r2,r2,32768
 802a648:	10a00004 	addi	r2,r2,-32768
 802a64c:	1445883a 	add	r2,r2,r17
 802a650:	10800204 	addi	r2,r2,8
 802a654:	1023d13a 	srai	r17,r2,4
				/* Limit the error using transfer function set by init_error_limit.
				* See comments with init_error_limit for rationale.
				*/
				cur0 = error_limit[cur0];
 802a658:	9005883a 	mov	r2,r18
 802a65c:	1085883a 	add	r2,r2,r2
 802a660:	1085883a 	add	r2,r2,r2
 802a664:	e0fff717 	ldw	r3,-36(fp)
 802a668:	1885883a 	add	r2,r3,r2
 802a66c:	14800017 	ldw	r18,0(r2)
				cur1 = error_limit[cur1];
 802a670:	8005883a 	mov	r2,r16
 802a674:	1085883a 	add	r2,r2,r2
 802a678:	1085883a 	add	r2,r2,r2
 802a67c:	e0fff717 	ldw	r3,-36(fp)
 802a680:	1885883a 	add	r2,r3,r2
 802a684:	14000017 	ldw	r16,0(r2)
				cur2 = error_limit[cur2];
 802a688:	8805883a 	mov	r2,r17
 802a68c:	1085883a 	add	r2,r2,r2
 802a690:	1085883a 	add	r2,r2,r2
 802a694:	e0fff717 	ldw	r3,-36(fp)
 802a698:	1885883a 	add	r2,r3,r2
 802a69c:	14400017 	ldw	r17,0(r2)
				/* Form pixel value + error, and range-limit to 0..MAXJSAMPLE.
				* The maximum error is +- MAXJSAMPLE (or less with error limiting);
				* this sets the required size of the range_limit array.
				*/
				cur0 += GETJSAMPLE(inptr[0]);
 802a6a0:	e0bfed17 	ldw	r2,-76(fp)
 802a6a4:	10800003 	ldbu	r2,0(r2)
 802a6a8:	10803fcc 	andi	r2,r2,255
 802a6ac:	90a5883a 	add	r18,r18,r2
				cur1 += GETJSAMPLE(inptr[1]);
 802a6b0:	e0bfed17 	ldw	r2,-76(fp)
 802a6b4:	10800044 	addi	r2,r2,1
 802a6b8:	10800003 	ldbu	r2,0(r2)
 802a6bc:	10803fcc 	andi	r2,r2,255
 802a6c0:	80a1883a 	add	r16,r16,r2
				cur2 += GETJSAMPLE(inptr[2]);
 802a6c4:	e0bfed17 	ldw	r2,-76(fp)
 802a6c8:	10800084 	addi	r2,r2,2
 802a6cc:	10800003 	ldbu	r2,0(r2)
 802a6d0:	10803fcc 	andi	r2,r2,255
 802a6d4:	88a3883a 	add	r17,r17,r2
				cur0 = GETJSAMPLE(range_limit[cur0]);
 802a6d8:	9005883a 	mov	r2,r18
 802a6dc:	e0fff617 	ldw	r3,-40(fp)
 802a6e0:	1885883a 	add	r2,r3,r2
 802a6e4:	10800003 	ldbu	r2,0(r2)
 802a6e8:	14803fcc 	andi	r18,r2,255
				cur1 = GETJSAMPLE(range_limit[cur1]);
 802a6ec:	8005883a 	mov	r2,r16
 802a6f0:	e0fff617 	ldw	r3,-40(fp)
 802a6f4:	1885883a 	add	r2,r3,r2
 802a6f8:	10800003 	ldbu	r2,0(r2)
 802a6fc:	14003fcc 	andi	r16,r2,255
				cur2 = GETJSAMPLE(range_limit[cur2]);
 802a700:	8805883a 	mov	r2,r17
 802a704:	e0fff617 	ldw	r3,-40(fp)
 802a708:	1885883a 	add	r2,r3,r2
 802a70c:	10800003 	ldbu	r2,0(r2)
 802a710:	14403fcc 	andi	r17,r2,255
				/* Index into the cache with adjusted pixel value */
				cachep = & histogram[cur0>>C0_SHIFT][cur1>>C1_SHIFT][cur2>>C2_SHIFT];
 802a714:	9005d0fa 	srai	r2,r18,3
 802a718:	1085883a 	add	r2,r2,r2
 802a71c:	1085883a 	add	r2,r2,r2
 802a720:	e0fff417 	ldw	r3,-48(fp)
 802a724:	1885883a 	add	r2,r3,r2
 802a728:	10c00017 	ldw	r3,0(r2)
 802a72c:	8005d0ba 	srai	r2,r16,2
 802a730:	100491ba 	slli	r2,r2,6
 802a734:	1887883a 	add	r3,r3,r2
 802a738:	8805d0fa 	srai	r2,r17,3
 802a73c:	1085883a 	add	r2,r2,r2
 802a740:	1885883a 	add	r2,r3,r2
 802a744:	e0bffb15 	stw	r2,-20(fp)
				/* If we have not seen this color before, find nearest colormap */
				/* entry and update the cache */
				if (*cachep == 0)
 802a748:	e0bffb17 	ldw	r2,-20(fp)
 802a74c:	1080000b 	ldhu	r2,0(r2)
 802a750:	10bfffcc 	andi	r2,r2,65535
 802a754:	1000071e 	bne	r2,zero,802a774 <pass2_fs_dither+0x364>
					fill_inverse_cmap(cinfo, cur0>>C0_SHIFT,cur1>>C1_SHIFT,cur2>>C2_SHIFT);
 802a758:	900bd0fa 	srai	r5,r18,3
 802a75c:	8007d0ba 	srai	r3,r16,2
 802a760:	8805d0fa 	srai	r2,r17,3
 802a764:	e13ffc17 	ldw	r4,-16(fp)
 802a768:	180d883a 	mov	r6,r3
 802a76c:	100f883a 	mov	r7,r2
 802a770:	802a09c0 	call	802a09c <fill_inverse_cmap>
				/* Now emit the colormap index for this cell */
				{ register int pixcode = *cachep - 1;
 802a774:	e0bffb17 	ldw	r2,-20(fp)
 802a778:	1080000b 	ldhu	r2,0(r2)
 802a77c:	10bfffcc 	andi	r2,r2,65535
 802a780:	153fffc4 	addi	r20,r2,-1
				*outptr = (JSAMPLE) pixcode;
 802a784:	a007883a 	mov	r3,r20
 802a788:	e0bfee17 	ldw	r2,-72(fp)
 802a78c:	10c00005 	stb	r3,0(r2)
				/* Compute representation error for this pixel */
				cur0 -= GETJSAMPLE(colormap0[pixcode]);
 802a790:	a005883a 	mov	r2,r20
 802a794:	e0fff817 	ldw	r3,-32(fp)
 802a798:	1885883a 	add	r2,r3,r2
 802a79c:	10800003 	ldbu	r2,0(r2)
 802a7a0:	10803fcc 	andi	r2,r2,255
 802a7a4:	90a5c83a 	sub	r18,r18,r2
				cur1 -= GETJSAMPLE(colormap1[pixcode]);
 802a7a8:	a005883a 	mov	r2,r20
 802a7ac:	e0fff917 	ldw	r3,-28(fp)
 802a7b0:	1885883a 	add	r2,r3,r2
 802a7b4:	10800003 	ldbu	r2,0(r2)
 802a7b8:	10803fcc 	andi	r2,r2,255
 802a7bc:	80a1c83a 	sub	r16,r16,r2
				cur2 -= GETJSAMPLE(colormap2[pixcode]);
 802a7c0:	a005883a 	mov	r2,r20
 802a7c4:	e0fffa17 	ldw	r3,-24(fp)
 802a7c8:	1885883a 	add	r2,r3,r2
 802a7cc:	10800003 	ldbu	r2,0(r2)
 802a7d0:	10803fcc 	andi	r2,r2,255
 802a7d4:	88a3c83a 	sub	r17,r17,r2
				* Add these into the running sums, and simultaneously shift the
				* next-line error sums left by 1 column.
				*/
				{ register LOCFSERROR bnexterr, delta;

				bnexterr = cur0;	/* Process component 0 */
 802a7d8:	902b883a 	mov	r21,r18
				delta = cur0 * 2;
 802a7dc:	9485883a 	add	r2,r18,r18
 802a7e0:	1029883a 	mov	r20,r2
				cur0 += delta;		/* form error * 3 */
 802a7e4:	9525883a 	add	r18,r18,r20
				errorptr[0] = (FSERROR) (bpreverr0 + cur0);
 802a7e8:	e0bfea17 	ldw	r2,-88(fp)
 802a7ec:	1007883a 	mov	r3,r2
 802a7f0:	9005883a 	mov	r2,r18
 802a7f4:	1885883a 	add	r2,r3,r2
 802a7f8:	9880000d 	sth	r2,0(r19)
				cur0 += delta;		/* form error * 5 */
 802a7fc:	9525883a 	add	r18,r18,r20
				bpreverr0 = belowerr0 + cur0;
 802a800:	e0bfe717 	ldw	r2,-100(fp)
 802a804:	1485883a 	add	r2,r2,r18
 802a808:	e0bfea15 	stw	r2,-88(fp)
				belowerr0 = bnexterr;
 802a80c:	e57fe715 	stw	r21,-100(fp)
				cur0 += delta;		/* form error * 7 */
 802a810:	9525883a 	add	r18,r18,r20
				bnexterr = cur1;	/* Process component 1 */
 802a814:	802b883a 	mov	r21,r16
				delta = cur1 * 2;
 802a818:	8405883a 	add	r2,r16,r16
 802a81c:	1029883a 	mov	r20,r2
				cur1 += delta;		/* form error * 3 */
 802a820:	8521883a 	add	r16,r16,r20
				errorptr[1] = (FSERROR) (bpreverr1 + cur1);
 802a824:	98800084 	addi	r2,r19,2
 802a828:	e0ffeb17 	ldw	r3,-84(fp)
 802a82c:	1809883a 	mov	r4,r3
 802a830:	8007883a 	mov	r3,r16
 802a834:	20c7883a 	add	r3,r4,r3
 802a838:	10c0000d 	sth	r3,0(r2)
				cur1 += delta;		/* form error * 5 */
 802a83c:	8521883a 	add	r16,r16,r20
				bpreverr1 = belowerr1 + cur1;
 802a840:	e0bfe817 	ldw	r2,-96(fp)
 802a844:	1405883a 	add	r2,r2,r16
 802a848:	e0bfeb15 	stw	r2,-84(fp)
				belowerr1 = bnexterr;
 802a84c:	e57fe815 	stw	r21,-96(fp)
				cur1 += delta;		/* form error * 7 */
 802a850:	8521883a 	add	r16,r16,r20
				bnexterr = cur2;	/* Process component 2 */
 802a854:	882b883a 	mov	r21,r17
				delta = cur2 * 2;
 802a858:	8c45883a 	add	r2,r17,r17
 802a85c:	1029883a 	mov	r20,r2
				cur2 += delta;		/* form error * 3 */
 802a860:	8d23883a 	add	r17,r17,r20
				errorptr[2] = (FSERROR) (bpreverr2 + cur2);
 802a864:	98800104 	addi	r2,r19,4
 802a868:	e0ffec17 	ldw	r3,-80(fp)
 802a86c:	1809883a 	mov	r4,r3
 802a870:	8807883a 	mov	r3,r17
 802a874:	20c7883a 	add	r3,r4,r3
 802a878:	10c0000d 	sth	r3,0(r2)
				cur2 += delta;		/* form error * 5 */
 802a87c:	8d23883a 	add	r17,r17,r20
				bpreverr2 = belowerr2 + cur2;
 802a880:	e0bfe917 	ldw	r2,-92(fp)
 802a884:	1445883a 	add	r2,r2,r17
 802a888:	e0bfec15 	stw	r2,-80(fp)
				belowerr2 = bnexterr;
 802a88c:	e57fe915 	stw	r21,-92(fp)
				cur2 += delta;		/* form error * 7 */
 802a890:	8d23883a 	add	r17,r17,r20
				}
				/* At this point curN contains the 7/16 error value to be propagated
				* to the next pixel on the current line, and all the errors for the
				* next line have been shifted over.  We are therefore ready to move on.
				*/
				inptr += dir3;		/* Advance pixel pointers to next column */
 802a894:	e0bff017 	ldw	r2,-64(fp)
 802a898:	e0ffed17 	ldw	r3,-76(fp)
 802a89c:	1885883a 	add	r2,r3,r2
 802a8a0:	e0bfed15 	stw	r2,-76(fp)
				outptr += dir;
 802a8a4:	e0bfef17 	ldw	r2,-68(fp)
 802a8a8:	e0ffee17 	ldw	r3,-72(fp)
 802a8ac:	1885883a 	add	r2,r3,r2
 802a8b0:	e0bfee15 	stw	r2,-72(fp)
				errorptr += dir3;		/* advance errorptr to current column */
 802a8b4:	e0bff017 	ldw	r2,-64(fp)
 802a8b8:	1085883a 	add	r2,r2,r2
 802a8bc:	98a7883a 	add	r19,r19,r2
			cur0 = cur1 = cur2 = 0;
			/* and no error propagated to row below yet */
			belowerr0 = belowerr1 = belowerr2 = 0;
			bpreverr0 = bpreverr1 = bpreverr2 = 0;

			for (col = width; col > 0; col--) {
 802a8c0:	e0bff217 	ldw	r2,-56(fp)
 802a8c4:	10bfffc4 	addi	r2,r2,-1
 802a8c8:	e0bff215 	stw	r2,-56(fp)
 802a8cc:	e0bff217 	ldw	r2,-56(fp)
 802a8d0:	103f411e 	bne	r2,zero,802a5d8 <pass2_fs_dither+0x1c8>
			}
			/* Post-loop cleanup: we must unload the final error values into the
			* final fserrors[] entry.  Note we need not unload belowerrN because
			* it is for the dummy column before or after the actual array.
			*/
			errorptr[0] = (FSERROR) bpreverr0; /* unload prev errs into array */
 802a8d4:	e0bfea17 	ldw	r2,-88(fp)
 802a8d8:	9880000d 	sth	r2,0(r19)
			errorptr[1] = (FSERROR) bpreverr1;
 802a8dc:	98800084 	addi	r2,r19,2
 802a8e0:	e0ffeb17 	ldw	r3,-84(fp)
 802a8e4:	10c0000d 	sth	r3,0(r2)
			errorptr[2] = (FSERROR) bpreverr2;
 802a8e8:	98800104 	addi	r2,r19,4
 802a8ec:	e0ffec17 	ldw	r3,-80(fp)
 802a8f0:	10c0000d 	sth	r3,0(r2)
	JSAMPROW colormap0 = cinfo->colormap[0];
	JSAMPROW colormap1 = cinfo->colormap[1];
	JSAMPROW colormap2 = cinfo->colormap[2];
	SHIFT_TEMPS

		for (row = 0; row < num_rows; row++) {
 802a8f4:	e0bff117 	ldw	r2,-60(fp)
 802a8f8:	10800044 	addi	r2,r2,1
 802a8fc:	e0bff115 	stw	r2,-60(fp)
 802a900:	e0fff117 	ldw	r3,-60(fp)
 802a904:	e0bfff17 	ldw	r2,-4(fp)
 802a908:	18beec16 	blt	r3,r2,802a4bc <pass2_fs_dither+0xac>
			*/
			errorptr[0] = (FSERROR) bpreverr0; /* unload prev errs into array */
			errorptr[1] = (FSERROR) bpreverr1;
			errorptr[2] = (FSERROR) bpreverr2;
		}
}
 802a90c:	e037883a 	mov	sp,fp
 802a910:	dfc00717 	ldw	ra,28(sp)
 802a914:	df000617 	ldw	fp,24(sp)
 802a918:	dd400517 	ldw	r21,20(sp)
 802a91c:	dd000417 	ldw	r20,16(sp)
 802a920:	dcc00317 	ldw	r19,12(sp)
 802a924:	dc800217 	ldw	r18,8(sp)
 802a928:	dc400117 	ldw	r17,4(sp)
 802a92c:	dc000017 	ldw	r16,0(sp)
 802a930:	dec00804 	addi	sp,sp,32
 802a934:	f800283a 	ret

0802a938 <init_error_limit>:
*/

LOCAL(void)
	init_error_limit (j_decompress_ptr cinfo)
	/* Allocate and fill in the error_limiter table */
{
 802a938:	defff904 	addi	sp,sp,-28
 802a93c:	dfc00615 	stw	ra,24(sp)
 802a940:	df000515 	stw	fp,20(sp)
 802a944:	df000504 	addi	fp,sp,20
 802a948:	e13fff15 	stw	r4,-4(fp)
	my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 802a94c:	e0bfff17 	ldw	r2,-4(fp)
 802a950:	10806e17 	ldw	r2,440(r2)
 802a954:	e0bffd15 	stw	r2,-12(fp)
	int * table;
	int in, out;

	table = (int *) (*cinfo->mem->alloc_small)
 802a958:	e0bfff17 	ldw	r2,-4(fp)
 802a95c:	10800117 	ldw	r2,4(r2)
		((j_common_ptr) cinfo, JPOOL_IMAGE, (MAXJSAMPLE*2+1) * SIZEOF(int));
 802a960:	10800017 	ldw	r2,0(r2)
{
	my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
	int * table;
	int in, out;

	table = (int *) (*cinfo->mem->alloc_small)
 802a964:	e13fff17 	ldw	r4,-4(fp)
 802a968:	01400044 	movi	r5,1
 802a96c:	0181ff04 	movi	r6,2044
 802a970:	103ee83a 	callr	r2
 802a974:	e0bffe15 	stw	r2,-8(fp)
		((j_common_ptr) cinfo, JPOOL_IMAGE, (MAXJSAMPLE*2+1) * SIZEOF(int));
	table += MAXJSAMPLE;		/* so can index -MAXJSAMPLE .. +MAXJSAMPLE */
 802a978:	e0bffe17 	ldw	r2,-8(fp)
 802a97c:	1080ff04 	addi	r2,r2,1020
 802a980:	e0bffe15 	stw	r2,-8(fp)
	cquantize->error_limiter = table;
 802a984:	e0bffd17 	ldw	r2,-12(fp)
 802a988:	e0fffe17 	ldw	r3,-8(fp)
 802a98c:	10c00a15 	stw	r3,40(r2)

#define STEPSIZE ((MAXJSAMPLE+1)/16)
	/* Map errors 1:1 up to +- MAXJSAMPLE/16 */
	out = 0;
 802a990:	e03ffc15 	stw	zero,-16(fp)
	for (in = 0; in < STEPSIZE; in++, out++) {
 802a994:	e03ffb15 	stw	zero,-20(fp)
 802a998:	00001606 	br	802a9f4 <init_error_limit+0xbc>
		table[in] = out; table[-in] = -out;
 802a99c:	e0bffb17 	ldw	r2,-20(fp)
 802a9a0:	1085883a 	add	r2,r2,r2
 802a9a4:	1085883a 	add	r2,r2,r2
 802a9a8:	e0fffe17 	ldw	r3,-8(fp)
 802a9ac:	1885883a 	add	r2,r3,r2
 802a9b0:	e0fffc17 	ldw	r3,-16(fp)
 802a9b4:	10c00015 	stw	r3,0(r2)
 802a9b8:	e0bffb17 	ldw	r2,-20(fp)
 802a9bc:	1009883a 	mov	r4,r2
 802a9c0:	017fff04 	movi	r5,-4
 802a9c4:	802c2180 	call	802c218 <__mulsi3>
 802a9c8:	e0fffe17 	ldw	r3,-8(fp)
 802a9cc:	1885883a 	add	r2,r3,r2
 802a9d0:	e0fffc17 	ldw	r3,-16(fp)
 802a9d4:	00c7c83a 	sub	r3,zero,r3
 802a9d8:	10c00015 	stw	r3,0(r2)
	cquantize->error_limiter = table;

#define STEPSIZE ((MAXJSAMPLE+1)/16)
	/* Map errors 1:1 up to +- MAXJSAMPLE/16 */
	out = 0;
	for (in = 0; in < STEPSIZE; in++, out++) {
 802a9dc:	e0bffb17 	ldw	r2,-20(fp)
 802a9e0:	10800044 	addi	r2,r2,1
 802a9e4:	e0bffb15 	stw	r2,-20(fp)
 802a9e8:	e0bffc17 	ldw	r2,-16(fp)
 802a9ec:	10800044 	addi	r2,r2,1
 802a9f0:	e0bffc15 	stw	r2,-16(fp)
 802a9f4:	e0bffb17 	ldw	r2,-20(fp)
 802a9f8:	10800410 	cmplti	r2,r2,16
 802a9fc:	103fe71e 	bne	r2,zero,802a99c <init_error_limit+0x64>
		table[in] = out; table[-in] = -out;
	}
	/* Map errors 1:2 up to +- 3*MAXJSAMPLE/16 */
	for (; in < STEPSIZE*3; in++, out += (in&1) ? 0 : 1) {
 802aa00:	00001a06 	br	802aa6c <init_error_limit+0x134>
		table[in] = out; table[-in] = -out;
 802aa04:	e0bffb17 	ldw	r2,-20(fp)
 802aa08:	1085883a 	add	r2,r2,r2
 802aa0c:	1085883a 	add	r2,r2,r2
 802aa10:	e0fffe17 	ldw	r3,-8(fp)
 802aa14:	1885883a 	add	r2,r3,r2
 802aa18:	e0fffc17 	ldw	r3,-16(fp)
 802aa1c:	10c00015 	stw	r3,0(r2)
 802aa20:	e0bffb17 	ldw	r2,-20(fp)
 802aa24:	1009883a 	mov	r4,r2
 802aa28:	017fff04 	movi	r5,-4
 802aa2c:	802c2180 	call	802c218 <__mulsi3>
 802aa30:	e0fffe17 	ldw	r3,-8(fp)
 802aa34:	1885883a 	add	r2,r3,r2
 802aa38:	e0fffc17 	ldw	r3,-16(fp)
 802aa3c:	00c7c83a 	sub	r3,zero,r3
 802aa40:	10c00015 	stw	r3,0(r2)
	out = 0;
	for (in = 0; in < STEPSIZE; in++, out++) {
		table[in] = out; table[-in] = -out;
	}
	/* Map errors 1:2 up to +- 3*MAXJSAMPLE/16 */
	for (; in < STEPSIZE*3; in++, out += (in&1) ? 0 : 1) {
 802aa44:	e0bffb17 	ldw	r2,-20(fp)
 802aa48:	10800044 	addi	r2,r2,1
 802aa4c:	e0bffb15 	stw	r2,-20(fp)
 802aa50:	e0bffb17 	ldw	r2,-20(fp)
 802aa54:	1080004c 	andi	r2,r2,1
 802aa58:	1005003a 	cmpeq	r2,r2,zero
 802aa5c:	10803fcc 	andi	r2,r2,255
 802aa60:	e0fffc17 	ldw	r3,-16(fp)
 802aa64:	1885883a 	add	r2,r3,r2
 802aa68:	e0bffc15 	stw	r2,-16(fp)
 802aa6c:	e0bffb17 	ldw	r2,-20(fp)
 802aa70:	10800c10 	cmplti	r2,r2,48
 802aa74:	103fe31e 	bne	r2,zero,802aa04 <init_error_limit+0xcc>
		table[in] = out; table[-in] = -out;
	}
	/* Clamp the rest to final out value (which is (MAXJSAMPLE+1)/8) */
	for (; in <= MAXJSAMPLE; in++) {
 802aa78:	00001306 	br	802aac8 <init_error_limit+0x190>
		table[in] = out; table[-in] = -out;
 802aa7c:	e0bffb17 	ldw	r2,-20(fp)
 802aa80:	1085883a 	add	r2,r2,r2
 802aa84:	1085883a 	add	r2,r2,r2
 802aa88:	e0fffe17 	ldw	r3,-8(fp)
 802aa8c:	1885883a 	add	r2,r3,r2
 802aa90:	e0fffc17 	ldw	r3,-16(fp)
 802aa94:	10c00015 	stw	r3,0(r2)
 802aa98:	e0bffb17 	ldw	r2,-20(fp)
 802aa9c:	1009883a 	mov	r4,r2
 802aaa0:	017fff04 	movi	r5,-4
 802aaa4:	802c2180 	call	802c218 <__mulsi3>
 802aaa8:	e0fffe17 	ldw	r3,-8(fp)
 802aaac:	1885883a 	add	r2,r3,r2
 802aab0:	e0fffc17 	ldw	r3,-16(fp)
 802aab4:	00c7c83a 	sub	r3,zero,r3
 802aab8:	10c00015 	stw	r3,0(r2)
	/* Map errors 1:2 up to +- 3*MAXJSAMPLE/16 */
	for (; in < STEPSIZE*3; in++, out += (in&1) ? 0 : 1) {
		table[in] = out; table[-in] = -out;
	}
	/* Clamp the rest to final out value (which is (MAXJSAMPLE+1)/8) */
	for (; in <= MAXJSAMPLE; in++) {
 802aabc:	e0bffb17 	ldw	r2,-20(fp)
 802aac0:	10800044 	addi	r2,r2,1
 802aac4:	e0bffb15 	stw	r2,-20(fp)
 802aac8:	e0bffb17 	ldw	r2,-20(fp)
 802aacc:	10804010 	cmplti	r2,r2,256
 802aad0:	103fea1e 	bne	r2,zero,802aa7c <init_error_limit+0x144>
		table[in] = out; table[-in] = -out;
	}
#undef STEPSIZE
}
 802aad4:	e037883a 	mov	sp,fp
 802aad8:	dfc00117 	ldw	ra,4(sp)
 802aadc:	df000017 	ldw	fp,0(sp)
 802aae0:	dec00204 	addi	sp,sp,8
 802aae4:	f800283a 	ret

0802aae8 <finish_pass1>:
* Finish up at the end of each pass.
*/

METHODDEF(void)
	finish_pass1 (j_decompress_ptr cinfo)
{
 802aae8:	defffc04 	addi	sp,sp,-16
 802aaec:	dfc00315 	stw	ra,12(sp)
 802aaf0:	df000215 	stw	fp,8(sp)
 802aaf4:	df000204 	addi	fp,sp,8
 802aaf8:	e13fff15 	stw	r4,-4(fp)
	my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 802aafc:	e0bfff17 	ldw	r2,-4(fp)
 802ab00:	10806e17 	ldw	r2,440(r2)
 802ab04:	e0bffe15 	stw	r2,-8(fp)

	/* Select the representative colors and fill in cinfo->colormap */
	cinfo->colormap = cquantize->sv_colormap;
 802ab08:	e0bffe17 	ldw	r2,-8(fp)
 802ab0c:	10c00417 	ldw	r3,16(r2)
 802ab10:	e0bfff17 	ldw	r2,-4(fp)
 802ab14:	10c01d15 	stw	r3,116(r2)
	select_colors(cinfo, cquantize->desired);
 802ab18:	e0bffe17 	ldw	r2,-8(fp)
 802ab1c:	10800517 	ldw	r2,20(r2)
 802ab20:	e13fff17 	ldw	r4,-4(fp)
 802ab24:	100b883a 	mov	r5,r2
 802ab28:	80297400 	call	8029740 <select_colors>
	/* Force next pass to zero the color index table */
	cquantize->needs_zeroed = TRUE;
 802ab2c:	e0bffe17 	ldw	r2,-8(fp)
 802ab30:	00c00044 	movi	r3,1
 802ab34:	10c00705 	stb	r3,28(r2)
}
 802ab38:	e037883a 	mov	sp,fp
 802ab3c:	dfc00117 	ldw	ra,4(sp)
 802ab40:	df000017 	ldw	fp,0(sp)
 802ab44:	dec00204 	addi	sp,sp,8
 802ab48:	f800283a 	ret

0802ab4c <finish_pass2>:


METHODDEF(void)
	finish_pass2 (j_decompress_ptr cinfo)
{
 802ab4c:	defffe04 	addi	sp,sp,-8
 802ab50:	df000115 	stw	fp,4(sp)
 802ab54:	df000104 	addi	fp,sp,4
 802ab58:	e13fff15 	stw	r4,-4(fp)
	/* no work */
}
 802ab5c:	e037883a 	mov	sp,fp
 802ab60:	df000017 	ldw	fp,0(sp)
 802ab64:	dec00104 	addi	sp,sp,4
 802ab68:	f800283a 	ret

0802ab6c <start_pass_2_quant>:
* Initialize for each processing pass.
*/

METHODDEF(void)
	start_pass_2_quant (j_decompress_ptr cinfo, boolean is_pre_scan)
{
 802ab6c:	defff804 	addi	sp,sp,-32
 802ab70:	dfc00715 	stw	ra,28(sp)
 802ab74:	df000615 	stw	fp,24(sp)
 802ab78:	df000604 	addi	fp,sp,24
 802ab7c:	e13ffe15 	stw	r4,-8(fp)
 802ab80:	2805883a 	mov	r2,r5
 802ab84:	e0bfff05 	stb	r2,-4(fp)
	my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 802ab88:	e0bffe17 	ldw	r2,-8(fp)
 802ab8c:	10806e17 	ldw	r2,440(r2)
 802ab90:	e0bffb15 	stw	r2,-20(fp)
	hist3d histogram = cquantize->histogram;
 802ab94:	e0bffb17 	ldw	r2,-20(fp)
 802ab98:	10800617 	ldw	r2,24(r2)
 802ab9c:	e0bffc15 	stw	r2,-16(fp)
	int i;

	/* Only F-S dithering or no dithering is supported. */
	/* If user asks for ordered dither, give him F-S. */
	if (cinfo->dither_mode != JDITHER_NONE)
 802aba0:	e0bffe17 	ldw	r2,-8(fp)
 802aba4:	10801317 	ldw	r2,76(r2)
 802aba8:	10000326 	beq	r2,zero,802abb8 <start_pass_2_quant+0x4c>
		cinfo->dither_mode = JDITHER_FS;
 802abac:	e0bffe17 	ldw	r2,-8(fp)
 802abb0:	00c00084 	movi	r3,2
 802abb4:	10c01315 	stw	r3,76(r2)

	if (is_pre_scan) {
 802abb8:	e0bfff03 	ldbu	r2,-4(fp)
 802abbc:	10000c26 	beq	r2,zero,802abf0 <start_pass_2_quant+0x84>
		/* Set up method pointers */
		cquantize->pub.color_quantize = prescan_quantize;
 802abc0:	e0bffb17 	ldw	r2,-20(fp)
 802abc4:	00c200f4 	movhi	r3,2051
 802abc8:	18e23904 	addi	r3,r3,-30492
 802abcc:	10c00115 	stw	r3,4(r2)
		cquantize->pub.finish_pass = finish_pass1;
 802abd0:	e0bffb17 	ldw	r2,-20(fp)
 802abd4:	00c200f4 	movhi	r3,2051
 802abd8:	18eaba04 	addi	r3,r3,-21784
 802abdc:	10c00215 	stw	r3,8(r2)
		cquantize->needs_zeroed = TRUE; /* Always zero histogram */
 802abe0:	e0bffb17 	ldw	r2,-20(fp)
 802abe4:	00c00044 	movi	r3,1
 802abe8:	10c00705 	stb	r3,28(r2)
 802abec:	00005606 	br	802ad48 <start_pass_2_quant+0x1dc>
	} else {
		/* Set up method pointers */
		if (cinfo->dither_mode == JDITHER_FS)
 802abf0:	e0bffe17 	ldw	r2,-8(fp)
 802abf4:	10801317 	ldw	r2,76(r2)
 802abf8:	10800098 	cmpnei	r2,r2,2
 802abfc:	1000051e 	bne	r2,zero,802ac14 <start_pass_2_quant+0xa8>
			cquantize->pub.color_quantize = pass2_fs_dither;
 802ac00:	e0bffb17 	ldw	r2,-20(fp)
 802ac04:	00c200f4 	movhi	r3,2051
 802ac08:	18e90404 	addi	r3,r3,-23536
 802ac0c:	10c00115 	stw	r3,4(r2)
 802ac10:	00000406 	br	802ac24 <start_pass_2_quant+0xb8>
		else
			cquantize->pub.color_quantize = pass2_no_dither;
 802ac14:	e0bffb17 	ldw	r2,-20(fp)
 802ac18:	00c200f4 	movhi	r3,2051
 802ac1c:	18e8a004 	addi	r3,r3,-23936
 802ac20:	10c00115 	stw	r3,4(r2)
		cquantize->pub.finish_pass = finish_pass2;
 802ac24:	e0bffb17 	ldw	r2,-20(fp)
 802ac28:	00c200f4 	movhi	r3,2051
 802ac2c:	18ead304 	addi	r3,r3,-21684
 802ac30:	10c00215 	stw	r3,8(r2)

		/* Make sure color count is acceptable */
		i = cinfo->actual_number_of_colors;
 802ac34:	e0bffe17 	ldw	r2,-8(fp)
 802ac38:	10801c17 	ldw	r2,112(r2)
 802ac3c:	e0bffa15 	stw	r2,-24(fp)
		if (i < 1)
 802ac40:	e0bffa17 	ldw	r2,-24(fp)
 802ac44:	00800d16 	blt	zero,r2,802ac7c <start_pass_2_quant+0x110>
			ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 1);
 802ac48:	e0bffe17 	ldw	r2,-8(fp)
 802ac4c:	10800017 	ldw	r2,0(r2)
 802ac50:	00c00e84 	movi	r3,58
 802ac54:	10c00515 	stw	r3,20(r2)
 802ac58:	e0bffe17 	ldw	r2,-8(fp)
 802ac5c:	10800017 	ldw	r2,0(r2)
 802ac60:	00c00044 	movi	r3,1
 802ac64:	10c00615 	stw	r3,24(r2)
 802ac68:	e0bffe17 	ldw	r2,-8(fp)
 802ac6c:	10800017 	ldw	r2,0(r2)
 802ac70:	10800017 	ldw	r2,0(r2)
 802ac74:	e13ffe17 	ldw	r4,-8(fp)
 802ac78:	103ee83a 	callr	r2
		if (i > MAXNUMCOLORS)
 802ac7c:	e0bffa17 	ldw	r2,-24(fp)
 802ac80:	10804050 	cmplti	r2,r2,257
 802ac84:	10000d1e 	bne	r2,zero,802acbc <start_pass_2_quant+0x150>
			ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 802ac88:	e0bffe17 	ldw	r2,-8(fp)
 802ac8c:	10800017 	ldw	r2,0(r2)
 802ac90:	00c00ec4 	movi	r3,59
 802ac94:	10c00515 	stw	r3,20(r2)
 802ac98:	e0bffe17 	ldw	r2,-8(fp)
 802ac9c:	10800017 	ldw	r2,0(r2)
 802aca0:	00c04004 	movi	r3,256
 802aca4:	10c00615 	stw	r3,24(r2)
 802aca8:	e0bffe17 	ldw	r2,-8(fp)
 802acac:	10800017 	ldw	r2,0(r2)
 802acb0:	10800017 	ldw	r2,0(r2)
 802acb4:	e13ffe17 	ldw	r4,-8(fp)
 802acb8:	103ee83a 	callr	r2

		if (cinfo->dither_mode == JDITHER_FS) {
 802acbc:	e0bffe17 	ldw	r2,-8(fp)
 802acc0:	10801317 	ldw	r2,76(r2)
 802acc4:	10800098 	cmpnei	r2,r2,2
 802acc8:	10001f1e 	bne	r2,zero,802ad48 <start_pass_2_quant+0x1dc>
			size_t arraysize = (size_t) ((cinfo->output_width + 2) *
 802accc:	e0bffe17 	ldw	r2,-8(fp)
 802acd0:	10801717 	ldw	r2,92(r2)
 802acd4:	1009883a 	mov	r4,r2
 802acd8:	01400184 	movi	r5,6
 802acdc:	802c2180 	call	802c218 <__mulsi3>
 802ace0:	10800304 	addi	r2,r2,12
 802ace4:	e0bffd15 	stw	r2,-12(fp)
				(3 * SIZEOF(FSERROR)));
			/* Allocate Floyd-Steinberg workspace if we didn't already. */
			if (cquantize->fserrors == NULL)
 802ace8:	e0bffb17 	ldw	r2,-20(fp)
 802acec:	10800817 	ldw	r2,32(r2)
 802acf0:	1000091e 	bne	r2,zero,802ad18 <start_pass_2_quant+0x1ac>
				cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 802acf4:	e0bffe17 	ldw	r2,-8(fp)
 802acf8:	10800117 	ldw	r2,4(r2)
				((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
 802acfc:	10800117 	ldw	r2,4(r2)
 802ad00:	e13ffe17 	ldw	r4,-8(fp)
 802ad04:	01400044 	movi	r5,1
 802ad08:	e1bffd17 	ldw	r6,-12(fp)
 802ad0c:	103ee83a 	callr	r2
		if (cinfo->dither_mode == JDITHER_FS) {
			size_t arraysize = (size_t) ((cinfo->output_width + 2) *
				(3 * SIZEOF(FSERROR)));
			/* Allocate Floyd-Steinberg workspace if we didn't already. */
			if (cquantize->fserrors == NULL)
				cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 802ad10:	e0fffb17 	ldw	r3,-20(fp)
 802ad14:	18800815 	stw	r2,32(r3)
				((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
			/* Initialize the propagated errors to zero. */
			jzero_far((void FAR *) cquantize->fserrors, arraysize);
 802ad18:	e0bffb17 	ldw	r2,-20(fp)
 802ad1c:	10800817 	ldw	r2,32(r2)
 802ad20:	1009883a 	mov	r4,r2
 802ad24:	e17ffd17 	ldw	r5,-12(fp)
 802ad28:	802b23c0 	call	802b23c <jzero_far>
			/* Make the error-limit table if we didn't already. */
			if (cquantize->error_limiter == NULL)
 802ad2c:	e0bffb17 	ldw	r2,-20(fp)
 802ad30:	10800a17 	ldw	r2,40(r2)
 802ad34:	1000021e 	bne	r2,zero,802ad40 <start_pass_2_quant+0x1d4>
				init_error_limit(cinfo);
 802ad38:	e13ffe17 	ldw	r4,-8(fp)
 802ad3c:	802a9380 	call	802a938 <init_error_limit>
			cquantize->on_odd_row = FALSE;
 802ad40:	e0bffb17 	ldw	r2,-20(fp)
 802ad44:	10000905 	stb	zero,36(r2)
		}

	}
	/* Zero the histogram or inverse color map, if necessary */
	if (cquantize->needs_zeroed) {
 802ad48:	e0bffb17 	ldw	r2,-20(fp)
 802ad4c:	10800703 	ldbu	r2,28(r2)
 802ad50:	10803fcc 	andi	r2,r2,255
 802ad54:	10001326 	beq	r2,zero,802ada4 <start_pass_2_quant+0x238>
		for (i = 0; i < HIST_C0_ELEMS; i++) {
 802ad58:	e03ffa15 	stw	zero,-24(fp)
 802ad5c:	00000c06 	br	802ad90 <start_pass_2_quant+0x224>
			jzero_far((void FAR *) histogram[i],
 802ad60:	e0bffa17 	ldw	r2,-24(fp)
 802ad64:	1085883a 	add	r2,r2,r2
 802ad68:	1085883a 	add	r2,r2,r2
 802ad6c:	e0fffc17 	ldw	r3,-16(fp)
 802ad70:	1885883a 	add	r2,r3,r2
 802ad74:	10800017 	ldw	r2,0(r2)
 802ad78:	1009883a 	mov	r4,r2
 802ad7c:	01440004 	movi	r5,4096
 802ad80:	802b23c0 	call	802b23c <jzero_far>
		}

	}
	/* Zero the histogram or inverse color map, if necessary */
	if (cquantize->needs_zeroed) {
		for (i = 0; i < HIST_C0_ELEMS; i++) {
 802ad84:	e0bffa17 	ldw	r2,-24(fp)
 802ad88:	10800044 	addi	r2,r2,1
 802ad8c:	e0bffa15 	stw	r2,-24(fp)
 802ad90:	e0bffa17 	ldw	r2,-24(fp)
 802ad94:	10800810 	cmplti	r2,r2,32
 802ad98:	103ff11e 	bne	r2,zero,802ad60 <start_pass_2_quant+0x1f4>
			jzero_far((void FAR *) histogram[i],
				HIST_C1_ELEMS*HIST_C2_ELEMS * SIZEOF(histcell));
		}
		cquantize->needs_zeroed = FALSE;
 802ad9c:	e0bffb17 	ldw	r2,-20(fp)
 802ada0:	10000705 	stb	zero,28(r2)
	}
}
 802ada4:	e037883a 	mov	sp,fp
 802ada8:	dfc00117 	ldw	ra,4(sp)
 802adac:	df000017 	ldw	fp,0(sp)
 802adb0:	dec00204 	addi	sp,sp,8
 802adb4:	f800283a 	ret

0802adb8 <new_color_map_2_quant>:
* Switch to a new external colormap between output passes.
*/

METHODDEF(void)
	new_color_map_2_quant (j_decompress_ptr cinfo)
{
 802adb8:	defffd04 	addi	sp,sp,-12
 802adbc:	df000215 	stw	fp,8(sp)
 802adc0:	df000204 	addi	fp,sp,8
 802adc4:	e13fff15 	stw	r4,-4(fp)
	my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 802adc8:	e0bfff17 	ldw	r2,-4(fp)
 802adcc:	10806e17 	ldw	r2,440(r2)
 802add0:	e0bffe15 	stw	r2,-8(fp)

	/* Reset the inverse color map */
	cquantize->needs_zeroed = TRUE;
 802add4:	e0bffe17 	ldw	r2,-8(fp)
 802add8:	00c00044 	movi	r3,1
 802addc:	10c00705 	stb	r3,28(r2)
}
 802ade0:	e037883a 	mov	sp,fp
 802ade4:	df000017 	ldw	fp,0(sp)
 802ade8:	dec00104 	addi	sp,sp,4
 802adec:	f800283a 	ret

0802adf0 <jinit_2pass_quantizer>:
* Module initialization routine for 2-pass color quantization.
*/

GLOBAL(void)
	jinit_2pass_quantizer (j_decompress_ptr cinfo)
{
 802adf0:	defff904 	addi	sp,sp,-28
 802adf4:	dfc00615 	stw	ra,24(sp)
 802adf8:	df000515 	stw	fp,20(sp)
 802adfc:	dc000415 	stw	r16,16(sp)
 802ae00:	df000404 	addi	fp,sp,16
 802ae04:	e13fff15 	stw	r4,-4(fp)
	my_cquantize_ptr cquantize;
	int i;

	cquantize = (my_cquantize_ptr)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 802ae08:	e0bfff17 	ldw	r2,-4(fp)
 802ae0c:	10800117 	ldw	r2,4(r2)
 802ae10:	10800017 	ldw	r2,0(r2)
	jinit_2pass_quantizer (j_decompress_ptr cinfo)
{
	my_cquantize_ptr cquantize;
	int i;

	cquantize = (my_cquantize_ptr)
 802ae14:	e13fff17 	ldw	r4,-4(fp)
 802ae18:	01400044 	movi	r5,1
 802ae1c:	01800b04 	movi	r6,44
 802ae20:	103ee83a 	callr	r2
 802ae24:	e0bffd15 	stw	r2,-12(fp)
		(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
		SIZEOF(my_cquantizer));
	cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
 802ae28:	e0bfff17 	ldw	r2,-4(fp)
 802ae2c:	e0fffd17 	ldw	r3,-12(fp)
 802ae30:	10c06e15 	stw	r3,440(r2)
	cquantize->pub.start_pass = start_pass_2_quant;
 802ae34:	e0bffd17 	ldw	r2,-12(fp)
 802ae38:	00c200f4 	movhi	r3,2051
 802ae3c:	18eadb04 	addi	r3,r3,-21652
 802ae40:	10c00015 	stw	r3,0(r2)
	cquantize->pub.new_color_map = new_color_map_2_quant;
 802ae44:	e0bffd17 	ldw	r2,-12(fp)
 802ae48:	00c200f4 	movhi	r3,2051
 802ae4c:	18eb6e04 	addi	r3,r3,-21064
 802ae50:	10c00315 	stw	r3,12(r2)
	cquantize->fserrors = NULL;	/* flag optional arrays not allocated */
 802ae54:	e0bffd17 	ldw	r2,-12(fp)
 802ae58:	10000815 	stw	zero,32(r2)
	cquantize->error_limiter = NULL;
 802ae5c:	e0bffd17 	ldw	r2,-12(fp)
 802ae60:	10000a15 	stw	zero,40(r2)

	/* Make sure jdmaster didn't give me a case I can't handle */
	if (cinfo->out_color_components != 3)
 802ae64:	e0bfff17 	ldw	r2,-4(fp)
 802ae68:	10801917 	ldw	r2,100(r2)
 802ae6c:	108000e0 	cmpeqi	r2,r2,3
 802ae70:	1000091e 	bne	r2,zero,802ae98 <jinit_2pass_quantizer+0xa8>
		ERREXIT(cinfo, JERR_NOTIMPL);
 802ae74:	e0bfff17 	ldw	r2,-4(fp)
 802ae78:	10800017 	ldw	r2,0(r2)
 802ae7c:	00c00c04 	movi	r3,48
 802ae80:	10c00515 	stw	r3,20(r2)
 802ae84:	e0bfff17 	ldw	r2,-4(fp)
 802ae88:	10800017 	ldw	r2,0(r2)
 802ae8c:	10800017 	ldw	r2,0(r2)
 802ae90:	e13fff17 	ldw	r4,-4(fp)
 802ae94:	103ee83a 	callr	r2

	/* Allocate the histogram/inverse colormap storage */
	cquantize->histogram = (hist3d) (*cinfo->mem->alloc_small)
 802ae98:	e0bfff17 	ldw	r2,-4(fp)
 802ae9c:	10800117 	ldw	r2,4(r2)
		((j_common_ptr) cinfo, JPOOL_IMAGE, HIST_C0_ELEMS * SIZEOF(hist2d));
 802aea0:	10800017 	ldw	r2,0(r2)
 802aea4:	e13fff17 	ldw	r4,-4(fp)
 802aea8:	01400044 	movi	r5,1
 802aeac:	01802004 	movi	r6,128
 802aeb0:	103ee83a 	callr	r2
	/* Make sure jdmaster didn't give me a case I can't handle */
	if (cinfo->out_color_components != 3)
		ERREXIT(cinfo, JERR_NOTIMPL);

	/* Allocate the histogram/inverse colormap storage */
	cquantize->histogram = (hist3d) (*cinfo->mem->alloc_small)
 802aeb4:	e0fffd17 	ldw	r3,-12(fp)
 802aeb8:	18800615 	stw	r2,24(r3)
		((j_common_ptr) cinfo, JPOOL_IMAGE, HIST_C0_ELEMS * SIZEOF(hist2d));
	for (i = 0; i < HIST_C0_ELEMS; i++) {
 802aebc:	e03ffc15 	stw	zero,-16(fp)
 802aec0:	00001106 	br	802af08 <jinit_2pass_quantizer+0x118>
		cquantize->histogram[i] = (hist2d) (*cinfo->mem->alloc_large)
 802aec4:	e0bffd17 	ldw	r2,-12(fp)
 802aec8:	10c00617 	ldw	r3,24(r2)
 802aecc:	e0bffc17 	ldw	r2,-16(fp)
 802aed0:	1085883a 	add	r2,r2,r2
 802aed4:	1085883a 	add	r2,r2,r2
 802aed8:	18a1883a 	add	r16,r3,r2
 802aedc:	e0bfff17 	ldw	r2,-4(fp)
 802aee0:	10800117 	ldw	r2,4(r2)
			((j_common_ptr) cinfo, JPOOL_IMAGE,
 802aee4:	10800117 	ldw	r2,4(r2)
 802aee8:	e13fff17 	ldw	r4,-4(fp)
 802aeec:	01400044 	movi	r5,1
 802aef0:	01840004 	movi	r6,4096
 802aef4:	103ee83a 	callr	r2

	/* Allocate the histogram/inverse colormap storage */
	cquantize->histogram = (hist3d) (*cinfo->mem->alloc_small)
		((j_common_ptr) cinfo, JPOOL_IMAGE, HIST_C0_ELEMS * SIZEOF(hist2d));
	for (i = 0; i < HIST_C0_ELEMS; i++) {
		cquantize->histogram[i] = (hist2d) (*cinfo->mem->alloc_large)
 802aef8:	80800015 	stw	r2,0(r16)
		ERREXIT(cinfo, JERR_NOTIMPL);

	/* Allocate the histogram/inverse colormap storage */
	cquantize->histogram = (hist3d) (*cinfo->mem->alloc_small)
		((j_common_ptr) cinfo, JPOOL_IMAGE, HIST_C0_ELEMS * SIZEOF(hist2d));
	for (i = 0; i < HIST_C0_ELEMS; i++) {
 802aefc:	e0bffc17 	ldw	r2,-16(fp)
 802af00:	10800044 	addi	r2,r2,1
 802af04:	e0bffc15 	stw	r2,-16(fp)
 802af08:	e0bffc17 	ldw	r2,-16(fp)
 802af0c:	10800810 	cmplti	r2,r2,32
 802af10:	103fec1e 	bne	r2,zero,802aec4 <jinit_2pass_quantizer+0xd4>
		cquantize->histogram[i] = (hist2d) (*cinfo->mem->alloc_large)
			((j_common_ptr) cinfo, JPOOL_IMAGE,
			HIST_C1_ELEMS*HIST_C2_ELEMS * SIZEOF(histcell));
	}
	cquantize->needs_zeroed = TRUE; /* histogram is garbage now */
 802af14:	e0bffd17 	ldw	r2,-12(fp)
 802af18:	00c00044 	movi	r3,1
 802af1c:	10c00705 	stb	r3,28(r2)

	/* Allocate storage for the completed colormap, if required.
	* We do this now since it is FAR storage and may affect
	* the memory manager's space calculations.
	*/
	if (cinfo->enable_2pass_quant) {
 802af20:	e0bfff17 	ldw	r2,-4(fp)
 802af24:	10801683 	ldbu	r2,90(r2)
 802af28:	10803fcc 	andi	r2,r2,255
 802af2c:	10003226 	beq	r2,zero,802aff8 <jinit_2pass_quantizer+0x208>
		/* Make sure color count is acceptable */
		int desired = cinfo->desired_number_of_colors;
 802af30:	e0bfff17 	ldw	r2,-4(fp)
 802af34:	10801517 	ldw	r2,84(r2)
 802af38:	e0bffe15 	stw	r2,-8(fp)
		/* Lower bound on # of colors ... somewhat arbitrary as long as > 0 */
		if (desired < 8)
 802af3c:	e0bffe17 	ldw	r2,-8(fp)
 802af40:	10800208 	cmpgei	r2,r2,8
 802af44:	10000d1e 	bne	r2,zero,802af7c <jinit_2pass_quantizer+0x18c>
			ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 8);
 802af48:	e0bfff17 	ldw	r2,-4(fp)
 802af4c:	10800017 	ldw	r2,0(r2)
 802af50:	00c00e84 	movi	r3,58
 802af54:	10c00515 	stw	r3,20(r2)
 802af58:	e0bfff17 	ldw	r2,-4(fp)
 802af5c:	10800017 	ldw	r2,0(r2)
 802af60:	00c00204 	movi	r3,8
 802af64:	10c00615 	stw	r3,24(r2)
 802af68:	e0bfff17 	ldw	r2,-4(fp)
 802af6c:	10800017 	ldw	r2,0(r2)
 802af70:	10800017 	ldw	r2,0(r2)
 802af74:	e13fff17 	ldw	r4,-4(fp)
 802af78:	103ee83a 	callr	r2
		/* Make sure colormap indexes can be represented by JSAMPLEs */
		if (desired > MAXNUMCOLORS)
 802af7c:	e0bffe17 	ldw	r2,-8(fp)
 802af80:	10804050 	cmplti	r2,r2,257
 802af84:	10000d1e 	bne	r2,zero,802afbc <jinit_2pass_quantizer+0x1cc>
			ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 802af88:	e0bfff17 	ldw	r2,-4(fp)
 802af8c:	10800017 	ldw	r2,0(r2)
 802af90:	00c00ec4 	movi	r3,59
 802af94:	10c00515 	stw	r3,20(r2)
 802af98:	e0bfff17 	ldw	r2,-4(fp)
 802af9c:	10800017 	ldw	r2,0(r2)
 802afa0:	00c04004 	movi	r3,256
 802afa4:	10c00615 	stw	r3,24(r2)
 802afa8:	e0bfff17 	ldw	r2,-4(fp)
 802afac:	10800017 	ldw	r2,0(r2)
 802afb0:	10800017 	ldw	r2,0(r2)
 802afb4:	e13fff17 	ldw	r4,-4(fp)
 802afb8:	103ee83a 	callr	r2
		cquantize->sv_colormap = (*cinfo->mem->alloc_sarray)
 802afbc:	e0bfff17 	ldw	r2,-4(fp)
 802afc0:	10800117 	ldw	r2,4(r2)
			((j_common_ptr) cinfo,JPOOL_IMAGE, (JDIMENSION) desired, (JDIMENSION) 3);
 802afc4:	10c00217 	ldw	r3,8(r2)
 802afc8:	e0bffe17 	ldw	r2,-8(fp)
 802afcc:	e13fff17 	ldw	r4,-4(fp)
 802afd0:	01400044 	movi	r5,1
 802afd4:	100d883a 	mov	r6,r2
 802afd8:	01c000c4 	movi	r7,3
 802afdc:	183ee83a 	callr	r3
		if (desired < 8)
			ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 8);
		/* Make sure colormap indexes can be represented by JSAMPLEs */
		if (desired > MAXNUMCOLORS)
			ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
		cquantize->sv_colormap = (*cinfo->mem->alloc_sarray)
 802afe0:	e0fffd17 	ldw	r3,-12(fp)
 802afe4:	18800415 	stw	r2,16(r3)
			((j_common_ptr) cinfo,JPOOL_IMAGE, (JDIMENSION) desired, (JDIMENSION) 3);
		cquantize->desired = desired;
 802afe8:	e0bffd17 	ldw	r2,-12(fp)
 802afec:	e0fffe17 	ldw	r3,-8(fp)
 802aff0:	10c00515 	stw	r3,20(r2)
 802aff4:	00000206 	br	802b000 <jinit_2pass_quantizer+0x210>
	} else
		cquantize->sv_colormap = NULL;
 802aff8:	e0bffd17 	ldw	r2,-12(fp)
 802affc:	10000415 	stw	zero,16(r2)

	/* Only F-S dithering or no dithering is supported. */
	/* If user asks for ordered dither, give him F-S. */
	if (cinfo->dither_mode != JDITHER_NONE)
 802b000:	e0bfff17 	ldw	r2,-4(fp)
 802b004:	10801317 	ldw	r2,76(r2)
 802b008:	10000326 	beq	r2,zero,802b018 <jinit_2pass_quantizer+0x228>
		cinfo->dither_mode = JDITHER_FS;
 802b00c:	e0bfff17 	ldw	r2,-4(fp)
 802b010:	00c00084 	movi	r3,2
 802b014:	10c01315 	stw	r3,76(r2)
	/* Allocate Floyd-Steinberg workspace if necessary.
	* This isn't really needed until pass 2, but again it is FAR storage.
	* Although we will cope with a later change in dither_mode,
	* we do not promise to honor max_memory_to_use if dither_mode changes.
	*/
	if (cinfo->dither_mode == JDITHER_FS) {
 802b018:	e0bfff17 	ldw	r2,-4(fp)
 802b01c:	10801317 	ldw	r2,76(r2)
 802b020:	10800098 	cmpnei	r2,r2,2
 802b024:	1000111e 	bne	r2,zero,802b06c <jinit_2pass_quantizer+0x27c>
		cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 802b028:	e0bfff17 	ldw	r2,-4(fp)
 802b02c:	10800117 	ldw	r2,4(r2)
			((j_common_ptr) cinfo, JPOOL_IMAGE,
 802b030:	14000117 	ldw	r16,4(r2)
			(size_t) ((cinfo->output_width + 2) * (3 * SIZEOF(FSERROR))));
 802b034:	e0bfff17 	ldw	r2,-4(fp)
 802b038:	10801717 	ldw	r2,92(r2)
	* Although we will cope with a later change in dither_mode,
	* we do not promise to honor max_memory_to_use if dither_mode changes.
	*/
	if (cinfo->dither_mode == JDITHER_FS) {
		cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
			((j_common_ptr) cinfo, JPOOL_IMAGE,
 802b03c:	1009883a 	mov	r4,r2
 802b040:	01400184 	movi	r5,6
 802b044:	802c2180 	call	802c218 <__mulsi3>
 802b048:	10800304 	addi	r2,r2,12
 802b04c:	e13fff17 	ldw	r4,-4(fp)
 802b050:	01400044 	movi	r5,1
 802b054:	100d883a 	mov	r6,r2
 802b058:	803ee83a 	callr	r16
	* This isn't really needed until pass 2, but again it is FAR storage.
	* Although we will cope with a later change in dither_mode,
	* we do not promise to honor max_memory_to_use if dither_mode changes.
	*/
	if (cinfo->dither_mode == JDITHER_FS) {
		cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 802b05c:	e0fffd17 	ldw	r3,-12(fp)
 802b060:	18800815 	stw	r2,32(r3)
			((j_common_ptr) cinfo, JPOOL_IMAGE,
			(size_t) ((cinfo->output_width + 2) * (3 * SIZEOF(FSERROR))));
		/* Might as well create the error-limiting table too. */
		init_error_limit(cinfo);
 802b064:	e13fff17 	ldw	r4,-4(fp)
 802b068:	802a9380 	call	802a938 <init_error_limit>
	}
}
 802b06c:	e037883a 	mov	sp,fp
 802b070:	dfc00217 	ldw	ra,8(sp)
 802b074:	df000117 	ldw	fp,4(sp)
 802b078:	dc000017 	ldw	r16,0(sp)
 802b07c:	dec00304 	addi	sp,sp,12
 802b080:	f800283a 	ret

0802b084 <jdiv_round_up>:

GLOBAL(long)
	jdiv_round_up (long a, long b)
	/* Compute a/b rounded up to next integer, ie, ceil(a/b) */
	/* Assumes a >= 0, b > 0 */
{
 802b084:	defffc04 	addi	sp,sp,-16
 802b088:	dfc00315 	stw	ra,12(sp)
 802b08c:	df000215 	stw	fp,8(sp)
 802b090:	df000204 	addi	fp,sp,8
 802b094:	e13ffe15 	stw	r4,-8(fp)
 802b098:	e17fff15 	stw	r5,-4(fp)
	return (a + b - 1L) / b;
 802b09c:	e0fffe17 	ldw	r3,-8(fp)
 802b0a0:	e0bfff17 	ldw	r2,-4(fp)
 802b0a4:	1885883a 	add	r2,r3,r2
 802b0a8:	10bfffc4 	addi	r2,r2,-1
 802b0ac:	1009883a 	mov	r4,r2
 802b0b0:	e17fff17 	ldw	r5,-4(fp)
 802b0b4:	802c15c0 	call	802c15c <__divsi3>
}
 802b0b8:	e037883a 	mov	sp,fp
 802b0bc:	dfc00117 	ldw	ra,4(sp)
 802b0c0:	df000017 	ldw	fp,0(sp)
 802b0c4:	dec00204 	addi	sp,sp,8
 802b0c8:	f800283a 	ret

0802b0cc <jround_up>:

GLOBAL(long)
	jround_up (long a, long b)
	/* Compute a rounded up to next multiple of b, ie, ceil(a/b)*b */
	/* Assumes a >= 0, b > 0 */
{
 802b0cc:	defffc04 	addi	sp,sp,-16
 802b0d0:	dfc00315 	stw	ra,12(sp)
 802b0d4:	df000215 	stw	fp,8(sp)
 802b0d8:	df000204 	addi	fp,sp,8
 802b0dc:	e13ffe15 	stw	r4,-8(fp)
 802b0e0:	e17fff15 	stw	r5,-4(fp)
	a += b - 1L;
 802b0e4:	e0bfff17 	ldw	r2,-4(fp)
 802b0e8:	10bfffc4 	addi	r2,r2,-1
 802b0ec:	e0fffe17 	ldw	r3,-8(fp)
 802b0f0:	1885883a 	add	r2,r3,r2
 802b0f4:	e0bffe15 	stw	r2,-8(fp)
	return a - (a % b);
 802b0f8:	e0bffe17 	ldw	r2,-8(fp)
 802b0fc:	1009883a 	mov	r4,r2
 802b100:	e17fff17 	ldw	r5,-4(fp)
 802b104:	802c1ac0 	call	802c1ac <__modsi3>
 802b108:	e0fffe17 	ldw	r3,-8(fp)
 802b10c:	1885c83a 	sub	r2,r3,r2
}
 802b110:	e037883a 	mov	sp,fp
 802b114:	dfc00117 	ldw	ra,4(sp)
 802b118:	df000017 	ldw	fp,0(sp)
 802b11c:	dec00204 	addi	sp,sp,8
 802b120:	f800283a 	ret

0802b124 <jcopy_sample_rows>:
	/* Copy some rows of samples from one place to another.
	* num_rows rows are copied from input_array[source_row++]
	* to output_array[dest_row++]; these areas may overlap for duplication.
	* The source and destination arrays must be at least as wide as num_cols.
	*/
{
 802b124:	defff604 	addi	sp,sp,-40
 802b128:	dfc00915 	stw	ra,36(sp)
 802b12c:	df000815 	stw	fp,32(sp)
 802b130:	dcc00715 	stw	r19,28(sp)
 802b134:	dc800615 	stw	r18,24(sp)
 802b138:	dc400515 	stw	r17,20(sp)
 802b13c:	dc000415 	stw	r16,16(sp)
 802b140:	df000404 	addi	fp,sp,16
 802b144:	e13ffc15 	stw	r4,-16(fp)
 802b148:	e17ffd15 	stw	r5,-12(fp)
 802b14c:	e1bffe15 	stw	r6,-8(fp)
 802b150:	e1ffff15 	stw	r7,-4(fp)
	register JSAMPROW inptr, outptr;
#ifdef FMEMCOPY
	register size_t count = (size_t) (num_cols * SIZEOF(JSAMPLE));
 802b154:	e4c00717 	ldw	r19,28(fp)
#else
	register JDIMENSION count;
#endif
	register int row;

	input_array += source_row;
 802b158:	e0bffd17 	ldw	r2,-12(fp)
 802b15c:	1085883a 	add	r2,r2,r2
 802b160:	1085883a 	add	r2,r2,r2
 802b164:	e0fffc17 	ldw	r3,-16(fp)
 802b168:	1885883a 	add	r2,r3,r2
 802b16c:	e0bffc15 	stw	r2,-16(fp)
	output_array += dest_row;
 802b170:	e0bfff17 	ldw	r2,-4(fp)
 802b174:	1085883a 	add	r2,r2,r2
 802b178:	1085883a 	add	r2,r2,r2
 802b17c:	e0fffe17 	ldw	r3,-8(fp)
 802b180:	1885883a 	add	r2,r3,r2
 802b184:	e0bffe15 	stw	r2,-8(fp)

	for (row = num_rows; row > 0; row--) {
 802b188:	e4000617 	ldw	r16,24(fp)
 802b18c:	00000f06 	br	802b1cc <jcopy_sample_rows+0xa8>
		inptr = *input_array++;
 802b190:	e0bffc17 	ldw	r2,-16(fp)
 802b194:	14400017 	ldw	r17,0(r2)
 802b198:	e0bffc17 	ldw	r2,-16(fp)
 802b19c:	10800104 	addi	r2,r2,4
 802b1a0:	e0bffc15 	stw	r2,-16(fp)
		outptr = *output_array++;
 802b1a4:	e0bffe17 	ldw	r2,-8(fp)
 802b1a8:	14800017 	ldw	r18,0(r2)
 802b1ac:	e0bffe17 	ldw	r2,-8(fp)
 802b1b0:	10800104 	addi	r2,r2,4
 802b1b4:	e0bffe15 	stw	r2,-8(fp)
#ifdef FMEMCOPY
		FMEMCOPY(outptr, inptr, count);
 802b1b8:	9009883a 	mov	r4,r18
 802b1bc:	880b883a 	mov	r5,r17
 802b1c0:	980d883a 	mov	r6,r19
 802b1c4:	802ebb00 	call	802ebb0 <memcpy>
	register int row;

	input_array += source_row;
	output_array += dest_row;

	for (row = num_rows; row > 0; row--) {
 802b1c8:	843fffc4 	addi	r16,r16,-1
 802b1cc:	043ff016 	blt	zero,r16,802b190 <jcopy_sample_rows+0x6c>
#else
		for (count = num_cols; count > 0; count--)
			*outptr++ = *inptr++;	/* needn't bother with GETJSAMPLE() here */
#endif
	}
}
 802b1d0:	e037883a 	mov	sp,fp
 802b1d4:	dfc00517 	ldw	ra,20(sp)
 802b1d8:	df000417 	ldw	fp,16(sp)
 802b1dc:	dcc00317 	ldw	r19,12(sp)
 802b1e0:	dc800217 	ldw	r18,8(sp)
 802b1e4:	dc400117 	ldw	r17,4(sp)
 802b1e8:	dc000017 	ldw	r16,0(sp)
 802b1ec:	dec00604 	addi	sp,sp,24
 802b1f0:	f800283a 	ret

0802b1f4 <jcopy_block_row>:

GLOBAL(void)
	jcopy_block_row (JBLOCKROW input_row, JBLOCKROW output_row,
	JDIMENSION num_blocks)
	/* Copy a row of coefficient blocks from one place to another. */
{
 802b1f4:	defffb04 	addi	sp,sp,-20
 802b1f8:	dfc00415 	stw	ra,16(sp)
 802b1fc:	df000315 	stw	fp,12(sp)
 802b200:	df000304 	addi	fp,sp,12
 802b204:	e13ffd15 	stw	r4,-12(fp)
 802b208:	e17ffe15 	stw	r5,-8(fp)
 802b20c:	e1bfff15 	stw	r6,-4(fp)
#ifdef FMEMCOPY
	FMEMCOPY(output_row, input_row, num_blocks * (DCTSIZE2 * SIZEOF(JCOEF)));
 802b210:	e0bfff17 	ldw	r2,-4(fp)
 802b214:	100491fa 	slli	r2,r2,7
 802b218:	e13ffe17 	ldw	r4,-8(fp)
 802b21c:	e17ffd17 	ldw	r5,-12(fp)
 802b220:	100d883a 	mov	r6,r2
 802b224:	802ebb00 	call	802ebb0 <memcpy>
	outptr = (JCOEFPTR) output_row;
	for (count = (long) num_blocks * DCTSIZE2; count > 0; count--) {
		*outptr++ = *inptr++;
	}
#endif
}
 802b228:	e037883a 	mov	sp,fp
 802b22c:	dfc00117 	ldw	ra,4(sp)
 802b230:	df000017 	ldw	fp,0(sp)
 802b234:	dec00204 	addi	sp,sp,8
 802b238:	f800283a 	ret

0802b23c <jzero_far>:

GLOBAL(void)
	jzero_far (void FAR * target, size_t bytestozero)
	/* Zero out a chunk of FAR memory. */
	/* This might be sample-array data, block-array data, or alloc_large data. */
{
 802b23c:	defffc04 	addi	sp,sp,-16
 802b240:	dfc00315 	stw	ra,12(sp)
 802b244:	df000215 	stw	fp,8(sp)
 802b248:	df000204 	addi	fp,sp,8
 802b24c:	e13ffe15 	stw	r4,-8(fp)
 802b250:	e17fff15 	stw	r5,-4(fp)
#ifdef FMEMZERO
	FMEMZERO(target, bytestozero);
 802b254:	e13ffe17 	ldw	r4,-8(fp)
 802b258:	000b883a 	mov	r5,zero
 802b25c:	e1bfff17 	ldw	r6,-4(fp)
 802b260:	802ecf00 	call	802ecf0 <memset>

	for (count = bytestozero; count > 0; count--) {
		*ptr++ = 0;
	}
#endif
}
 802b264:	e037883a 	mov	sp,fp
 802b268:	dfc00117 	ldw	ra,4(sp)
 802b26c:	df000017 	ldw	fp,0(sp)
 802b270:	dec00204 	addi	sp,sp,8
 802b274:	f800283a 	ret

0802b278 <main>:
static uint8_t count;
static uint8_t countShow;
static uint8_t countItr = 0;

int main()
{
 802b278:	defff904 	addi	sp,sp,-28
 802b27c:	dfc00615 	stw	ra,24(sp)
 802b280:	df000515 	stw	fp,20(sp)
 802b284:	df000504 	addi	fp,sp,20
	char jtag_input[20];

	// Print that welcome message. Programmers looove welcome messages! ;)
	printf("CO503 JPEG Encoder \n\n");
 802b288:	01020134 	movhi	r4,2052
 802b28c:	2103fe04 	addi	r4,r4,4088
 802b290:	802ef240 	call	802ef24 <puts>

	while (countItr < NO_OF_FILES)
 802b294:	00002006 	br	802b318 <main+0xa0>
	{
		printf("Input file: ");
 802b298:	01020134 	movhi	r4,2052
 802b29c:	21040404 	addi	r4,r4,4112
 802b2a0:	802ee640 	call	802ee64 <printf>
		IOWR_8DIRECT(LED_BASE, OFFSET, 0xF0);
 802b2a4:	00fffc04 	movi	r3,-16
 802b2a8:	00844034 	movhi	r2,4352
 802b2ac:	10840404 	addi	r2,r2,4112
 802b2b0:	10c00025 	stbio	r3,0(r2)
		usleep(200000);
 802b2b4:	010000f4 	movhi	r4,3
 802b2b8:	21035004 	addi	r4,r4,3392
 802b2bc:	803cb040 	call	803cb04 <usleep>
		scanf("%s", jtag_input); // Ask for the input BMP file
 802b2c0:	01020134 	movhi	r4,2052
 802b2c4:	21040804 	addi	r4,r4,4128
 802b2c8:	e17ffb04 	addi	r5,fp,-20
 802b2cc:	802f1f00 	call	802f1f0 <scanf>

		// Check if the filename ends in '.bmp'
		if (strcmp(&jtag_input[strlen(jtag_input) - 4], ".bmp") == 0)
 802b2d0:	e13ffb04 	addi	r4,fp,-20
 802b2d4:	802f72c0 	call	802f72c <strlen>
 802b2d8:	10bfff04 	addi	r2,r2,-4
 802b2dc:	e0fffb04 	addi	r3,fp,-20
 802b2e0:	1885883a 	add	r2,r3,r2
 802b2e4:	1009883a 	mov	r4,r2
 802b2e8:	01420134 	movhi	r5,2052
 802b2ec:	29440904 	addi	r5,r5,4132
 802b2f0:	802f5f40 	call	802f5f4 <strcmp>
 802b2f4:	1000021e 	bne	r2,zero,802b300 <main+0x88>
		{

			convert_picture(jtag_input); // See function at the bottom
 802b2f8:	e13ffb04 	addi	r4,fp,-20
 802b2fc:	802b3b40 	call	802b3b4 <convert_picture>
		}
		printf("\n\n");
 802b300:	01020134 	movhi	r4,2052
 802b304:	21040b04 	addi	r4,r4,4140
 802b308:	802ef240 	call	802ef24 <puts>
		countItr++;
 802b30c:	d0a6e983 	ldbu	r2,-25690(gp)
 802b310:	10800044 	addi	r2,r2,1
 802b314:	d0a6e985 	stb	r2,-25690(gp)
	char jtag_input[20];

	// Print that welcome message. Programmers looove welcome messages! ;)
	printf("CO503 JPEG Encoder \n\n");

	while (countItr < NO_OF_FILES)
 802b318:	d0a6e983 	ldbu	r2,-25690(gp)
 802b31c:	10803fcc 	andi	r2,r2,255
 802b320:	108001f0 	cmpltui	r2,r2,7
 802b324:	103fdc1e 	bne	r2,zero,802b298 <main+0x20>
			convert_picture(jtag_input); // See function at the bottom
		}
		printf("\n\n");
		countItr++;
	}
	count = 15;
 802b328:	008003c4 	movi	r2,15
 802b32c:	d0a6e905 	stb	r2,-25692(gp)
	while (count > 1)
 802b330:	00000c06 	br	802b364 <main+0xec>
	{
		usleep(100000); // Wait for about 0.1 seconds
 802b334:	010000b4 	movhi	r4,2
 802b338:	2121a804 	addi	r4,r4,-31072
 802b33c:	803cb040 	call	803cb04 <usleep>

		IOWR_8DIRECT(LED_BASE, OFFSET, count); // Write the value of "count" to the "led_out" PIO device
 802b340:	d0a6e903 	ldbu	r2,-25692(gp)
 802b344:	10c03fcc 	andi	r3,r2,255
 802b348:	00844034 	movhi	r2,4352
 802b34c:	10840404 	addi	r2,r2,4112
 802b350:	10c00025 	stbio	r3,0(r2)
		count /= 2;
 802b354:	d0a6e903 	ldbu	r2,-25692(gp)
 802b358:	10803fcc 	andi	r2,r2,255
 802b35c:	1004d07a 	srli	r2,r2,1
 802b360:	d0a6e905 	stb	r2,-25692(gp)
		}
		printf("\n\n");
		countItr++;
	}
	count = 15;
	while (count > 1)
 802b364:	d0a6e903 	ldbu	r2,-25692(gp)
 802b368:	10803fcc 	andi	r2,r2,255
 802b36c:	108000a8 	cmpgeui	r2,r2,2
 802b370:	103ff01e 	bne	r2,zero,802b334 <main+0xbc>
		IOWR_8DIRECT(LED_BASE, OFFSET, count); // Write the value of "count" to the "led_out" PIO device
		count /= 2;
	}
	while (1)
	{
		IOWR_8DIRECT(LED_BASE, OFFSET, count);
 802b374:	d0a6e903 	ldbu	r2,-25692(gp)
 802b378:	10c03fcc 	andi	r3,r2,255
 802b37c:	00844034 	movhi	r2,4352
 802b380:	10840404 	addi	r2,r2,4112
 802b384:	10c00025 	stbio	r3,0(r2)
		usleep(200000); // Wait for about 0.2 seconds
 802b388:	010000f4 	movhi	r4,3
 802b38c:	21035004 	addi	r4,r4,3392
 802b390:	803cb040 	call	803cb04 <usleep>
		IOWR_8DIRECT(LED_BASE, OFFSET, 0);
 802b394:	0007883a 	mov	r3,zero
 802b398:	00844034 	movhi	r2,4352
 802b39c:	10840404 	addi	r2,r2,4112
 802b3a0:	10c00025 	stbio	r3,0(r2)
		usleep(200000); // Wait for about 0.2 seconds
 802b3a4:	010000f4 	movhi	r4,3
 802b3a8:	21035004 	addi	r4,r4,3392
 802b3ac:	803cb040 	call	803cb04 <usleep>
	}
 802b3b0:	003ff006 	br	802b374 <main+0xfc>

0802b3b4 <convert_picture>:

/*
 * Convert a BMP picture of name <jtag_input> into JPEG.
 */
void convert_picture(const char *jtag_input)
{
 802b3b4:	deffd104 	addi	sp,sp,-188
 802b3b8:	dfc02e15 	stw	ra,184(sp)
 802b3bc:	df002d15 	stw	fp,180(sp)
 802b3c0:	df002d04 	addi	fp,sp,180
 802b3c4:	e13fff15 	stw	r4,-4(fp)
	char file_name[80] = "/mnt/host/files/";
 802b3c8:	009d1bb4 	movhi	r2,29806
 802b3cc:	109b4bc4 	addi	r2,r2,27951
 802b3d0:	e0bfd415 	stw	r2,-176(fp)
 802b3d4:	009cdbf4 	movhi	r2,29551
 802b3d8:	109a0bc4 	addi	r2,r2,26671
 802b3dc:	e0bfd515 	stw	r2,-172(fp)
 802b3e0:	009a59b4 	movhi	r2,26982
 802b3e4:	108bdd04 	addi	r2,r2,12148
 802b3e8:	e0bfd615 	stw	r2,-168(fp)
 802b3ec:	008bdcf4 	movhi	r2,12147
 802b3f0:	10995b04 	addi	r2,r2,25964
 802b3f4:	e0bfd715 	stw	r2,-164(fp)
 802b3f8:	e03fd815 	stw	zero,-160(fp)
 802b3fc:	e0ffd904 	addi	r3,fp,-156
 802b400:	00800f04 	movi	r2,60
 802b404:	1809883a 	mov	r4,r3
 802b408:	000b883a 	mov	r5,zero
 802b40c:	100d883a 	mov	r6,r2
 802b410:	802ecf00 	call	802ecf0 <memset>
	char destination[80] = "/mnt/host/files/";
 802b414:	009d1bb4 	movhi	r2,29806
 802b418:	109b4bc4 	addi	r2,r2,27951
 802b41c:	e0bfe815 	stw	r2,-96(fp)
 802b420:	009cdbf4 	movhi	r2,29551
 802b424:	109a0bc4 	addi	r2,r2,26671
 802b428:	e0bfe915 	stw	r2,-92(fp)
 802b42c:	009a59b4 	movhi	r2,26982
 802b430:	108bdd04 	addi	r2,r2,12148
 802b434:	e0bfea15 	stw	r2,-88(fp)
 802b438:	008bdcf4 	movhi	r2,12147
 802b43c:	10995b04 	addi	r2,r2,25964
 802b440:	e0bfeb15 	stw	r2,-84(fp)
 802b444:	e03fec15 	stw	zero,-80(fp)
 802b448:	e0ffed04 	addi	r3,fp,-76
 802b44c:	00800f04 	movi	r2,60
 802b450:	1809883a 	mov	r4,r3
 802b454:	000b883a 	mov	r5,zero
 802b458:	100d883a 	mov	r6,r2
 802b45c:	802ecf00 	call	802ecf0 <memset>
	Bmp_data pic_data;

	strcat(file_name, jtag_input);
 802b460:	e13fd404 	addi	r4,fp,-176
 802b464:	e17fff17 	ldw	r5,-4(fp)
 802b468:	802f55c0 	call	802f55c <strcat>
	strcat(destination, jtag_input);
 802b46c:	e0bfe804 	addi	r2,fp,-96
 802b470:	1009883a 	mov	r4,r2
 802b474:	e17fff17 	ldw	r5,-4(fp)
 802b478:	802f55c0 	call	802f55c <strcat>

	count = 1;
 802b47c:	00800044 	movi	r2,1
 802b480:	d0a6e905 	stb	r2,-25692(gp)
	countShow = 0;
 802b484:	d026e945 	stb	zero,-25691(gp)
	while (count < 9)
 802b488:	00000f06 	br	802b4c8 <convert_picture+0x114>
	{
		usleep(100000); // Wait for about 0.1 seconds
 802b48c:	010000b4 	movhi	r4,2
 802b490:	2121a804 	addi	r4,r4,-31072
 802b494:	803cb040 	call	803cb04 <usleep>
		countShow += count;
 802b498:	d0e6e943 	ldbu	r3,-25691(gp)
 802b49c:	d0a6e903 	ldbu	r2,-25692(gp)
 802b4a0:	1885883a 	add	r2,r3,r2
 802b4a4:	d0a6e945 	stb	r2,-25691(gp)
		IOWR_8DIRECT(LED_BASE, OFFSET, countShow); // Write the value of "count" to the "led_out" PIO device
 802b4a8:	d0a6e943 	ldbu	r2,-25691(gp)
 802b4ac:	10c03fcc 	andi	r3,r2,255
 802b4b0:	00844034 	movhi	r2,4352
 802b4b4:	10840404 	addi	r2,r2,4112
 802b4b8:	10c00025 	stbio	r3,0(r2)
		count *= 2;
 802b4bc:	d0a6e903 	ldbu	r2,-25692(gp)
 802b4c0:	1085883a 	add	r2,r2,r2
 802b4c4:	d0a6e905 	stb	r2,-25692(gp)
	strcat(file_name, jtag_input);
	strcat(destination, jtag_input);

	count = 1;
	countShow = 0;
	while (count < 9)
 802b4c8:	d0a6e903 	ldbu	r2,-25692(gp)
 802b4cc:	10803fcc 	andi	r2,r2,255
 802b4d0:	10800270 	cmpltui	r2,r2,9
 802b4d4:	103fed1e 	bne	r2,zero,802b48c <convert_picture+0xd8>
		IOWR_8DIRECT(LED_BASE, OFFSET, countShow); // Write the value of "count" to the "led_out" PIO device
		count *= 2;
	}

	// Replace the '.bmp' with '.jpg'
	strcpy(&destination[strlen(destination) - 3], "jpg");
 802b4d8:	e0bfe804 	addi	r2,fp,-96
 802b4dc:	1009883a 	mov	r4,r2
 802b4e0:	802f72c0 	call	802f72c <strlen>
 802b4e4:	10bfff44 	addi	r2,r2,-3
 802b4e8:	e0ffe804 	addi	r3,fp,-96
 802b4ec:	1885883a 	add	r2,r3,r2
 802b4f0:	00c01a84 	movi	r3,106
 802b4f4:	10c00005 	stb	r3,0(r2)
 802b4f8:	00c01c04 	movi	r3,112
 802b4fc:	10c00045 	stb	r3,1(r2)
 802b500:	00c019c4 	movi	r3,103
 802b504:	10c00085 	stb	r3,2(r2)
 802b508:	100000c5 	stb	zero,3(r2)

	if (bmp_extract(file_name, &pic_data) == 0)
 802b50c:	e0bffc04 	addi	r2,fp,-16
 802b510:	e13fd404 	addi	r4,fp,-176
 802b514:	100b883a 	mov	r5,r2
 802b518:	80004fc0 	call	80004fc <bmp_extract>
 802b51c:	10000c1e 	bne	r2,zero,802b550 <convert_picture+0x19c>
	{
		// Convert to JPEG. This is where the magic happens!
		jpeg_encode(destination, pic_data.bitmap, pic_data.header->BMPHeight, pic_data.header->BMPWidth, 90);
 802b520:	e17ffe17 	ldw	r5,-8(fp)
 802b524:	e0bffc17 	ldw	r2,-16(fp)
 802b528:	10800517 	ldw	r2,20(r2)
 802b52c:	1007883a 	mov	r3,r2
 802b530:	e0bffc17 	ldw	r2,-16(fp)
 802b534:	10800417 	ldw	r2,16(r2)
 802b538:	e13fe804 	addi	r4,fp,-96
 802b53c:	01801684 	movi	r6,90
 802b540:	d9800015 	stw	r6,0(sp)
 802b544:	180d883a 	mov	r6,r3
 802b548:	100f883a 	mov	r7,r2
 802b54c:	800068c0 	call	800068c <jpeg_encode>
	}
	else
	{
		// An error has happened
	}
}
 802b550:	e037883a 	mov	sp,fp
 802b554:	dfc00117 	ldw	ra,4(sp)
 802b558:	df000017 	ldw	fp,0(sp)
 802b55c:	dec00204 	addi	sp,sp,8
 802b560:	f800283a 	ret

0802b564 <_fpadd_parts>:
 802b564:	2005883a 	mov	r2,r4
 802b568:	21000017 	ldw	r4,0(r4)
 802b56c:	01c00044 	movi	r7,1
 802b570:	3900332e 	bgeu	r7,r4,802b640 <_fpadd_parts+0xdc>
 802b574:	28c00017 	ldw	r3,0(r5)
 802b578:	38c0642e 	bgeu	r7,r3,802b70c <_fpadd_parts+0x1a8>
 802b57c:	01c00104 	movi	r7,4
 802b580:	21c06e26 	beq	r4,r7,802b73c <_fpadd_parts+0x1d8>
 802b584:	19c06126 	beq	r3,r7,802b70c <_fpadd_parts+0x1a8>
 802b588:	01c00084 	movi	r7,2
 802b58c:	19c04226 	beq	r3,r7,802b698 <_fpadd_parts+0x134>
 802b590:	21c05e26 	beq	r4,r7,802b70c <_fpadd_parts+0x1a8>
 802b594:	11000217 	ldw	r4,8(r2)
 802b598:	2a400217 	ldw	r9,8(r5)
 802b59c:	12800317 	ldw	r10,12(r2)
 802b5a0:	29c00317 	ldw	r7,12(r5)
 802b5a4:	2247c83a 	sub	r3,r4,r9
 802b5a8:	1811883a 	mov	r8,r3
 802b5ac:	18005316 	blt	r3,zero,802b6fc <_fpadd_parts+0x198>
 802b5b0:	02c007c4 	movi	r11,31
 802b5b4:	5a002316 	blt	r11,r8,802b644 <_fpadd_parts+0xe0>
 802b5b8:	00c0560e 	bge	zero,r3,802b714 <_fpadd_parts+0x1b0>
 802b5bc:	00c00044 	movi	r3,1
 802b5c0:	1a06983a 	sll	r3,r3,r8
 802b5c4:	3a10d83a 	srl	r8,r7,r8
 802b5c8:	18ffffc4 	addi	r3,r3,-1
 802b5cc:	19ce703a 	and	r7,r3,r7
 802b5d0:	380ec03a 	cmpne	r7,r7,zero
 802b5d4:	3a0eb03a 	or	r7,r7,r8
 802b5d8:	10c00117 	ldw	r3,4(r2)
 802b5dc:	28800117 	ldw	r2,4(r5)
 802b5e0:	18801d26 	beq	r3,r2,802b658 <_fpadd_parts+0xf4>
 802b5e4:	18003a26 	beq	r3,zero,802b6d0 <_fpadd_parts+0x16c>
 802b5e8:	3a85c83a 	sub	r2,r7,r10
 802b5ec:	10003a16 	blt	r2,zero,802b6d8 <_fpadd_parts+0x174>
 802b5f0:	30000115 	stw	zero,4(r6)
 802b5f4:	31000215 	stw	r4,8(r6)
 802b5f8:	30800315 	stw	r2,12(r6)
 802b5fc:	10ffffc4 	addi	r3,r2,-1
 802b600:	01d00034 	movhi	r7,16384
 802b604:	39ffff84 	addi	r7,r7,-2
 802b608:	38c00936 	bltu	r7,r3,802b630 <_fpadd_parts+0xcc>
 802b60c:	30c00217 	ldw	r3,8(r6)
 802b610:	18ffffc4 	addi	r3,r3,-1
 802b614:	1085883a 	add	r2,r2,r2
 802b618:	113fffc4 	addi	r4,r2,-1
 802b61c:	180b883a 	mov	r5,r3
 802b620:	18ffffc4 	addi	r3,r3,-1
 802b624:	393ffb2e 	bgeu	r7,r4,802b614 <_fpadd_parts+0xb0>
 802b628:	30800315 	stw	r2,12(r6)
 802b62c:	31400215 	stw	r5,8(r6)
 802b630:	00c000c4 	movi	r3,3
 802b634:	30c00015 	stw	r3,0(r6)
 802b638:	10000e16 	blt	r2,zero,802b674 <_fpadd_parts+0x110>
 802b63c:	3005883a 	mov	r2,r6
 802b640:	f800283a 	ret
 802b644:	49002a0e 	bge	r9,r4,802b6f0 <_fpadd_parts+0x18c>
 802b648:	10c00117 	ldw	r3,4(r2)
 802b64c:	28800117 	ldw	r2,4(r5)
 802b650:	000f883a 	mov	r7,zero
 802b654:	18bfe31e 	bne	r3,r2,802b5e4 <_fpadd_parts+0x80>
 802b658:	3a85883a 	add	r2,r7,r10
 802b65c:	30c00115 	stw	r3,4(r6)
 802b660:	00c000c4 	movi	r3,3
 802b664:	31000215 	stw	r4,8(r6)
 802b668:	30800315 	stw	r2,12(r6)
 802b66c:	30c00015 	stw	r3,0(r6)
 802b670:	103ff20e 	bge	r2,zero,802b63c <_fpadd_parts+0xd8>
 802b674:	30c00217 	ldw	r3,8(r6)
 802b678:	1008d07a 	srli	r4,r2,1
 802b67c:	1080004c 	andi	r2,r2,1
 802b680:	18c00044 	addi	r3,r3,1
 802b684:	1104b03a 	or	r2,r2,r4
 802b688:	30800315 	stw	r2,12(r6)
 802b68c:	30c00215 	stw	r3,8(r6)
 802b690:	3005883a 	mov	r2,r6
 802b694:	f800283a 	ret
 802b698:	20ffe91e 	bne	r4,r3,802b640 <_fpadd_parts+0xdc>
 802b69c:	31000015 	stw	r4,0(r6)
 802b6a0:	10c00117 	ldw	r3,4(r2)
 802b6a4:	30c00115 	stw	r3,4(r6)
 802b6a8:	11c00217 	ldw	r7,8(r2)
 802b6ac:	10c00117 	ldw	r3,4(r2)
 802b6b0:	29000117 	ldw	r4,4(r5)
 802b6b4:	31c00215 	stw	r7,8(r6)
 802b6b8:	10800317 	ldw	r2,12(r2)
 802b6bc:	20c6703a 	and	r3,r4,r3
 802b6c0:	30c00115 	stw	r3,4(r6)
 802b6c4:	30800315 	stw	r2,12(r6)
 802b6c8:	3005883a 	mov	r2,r6
 802b6cc:	f800283a 	ret
 802b6d0:	51c5c83a 	sub	r2,r10,r7
 802b6d4:	103fc60e 	bge	r2,zero,802b5f0 <_fpadd_parts+0x8c>
 802b6d8:	0085c83a 	sub	r2,zero,r2
 802b6dc:	00c00044 	movi	r3,1
 802b6e0:	30c00115 	stw	r3,4(r6)
 802b6e4:	31000215 	stw	r4,8(r6)
 802b6e8:	30800315 	stw	r2,12(r6)
 802b6ec:	003fc306 	br	802b5fc <_fpadd_parts+0x98>
 802b6f0:	4809883a 	mov	r4,r9
 802b6f4:	0015883a 	mov	r10,zero
 802b6f8:	003fb706 	br	802b5d8 <_fpadd_parts+0x74>
 802b6fc:	00d1c83a 	sub	r8,zero,r3
 802b700:	02c007c4 	movi	r11,31
 802b704:	5a3fcf16 	blt	r11,r8,802b644 <_fpadd_parts+0xe0>
 802b708:	003fab06 	br	802b5b8 <_fpadd_parts+0x54>
 802b70c:	2805883a 	mov	r2,r5
 802b710:	f800283a 	ret
 802b714:	183fb026 	beq	r3,zero,802b5d8 <_fpadd_parts+0x74>
 802b718:	02400044 	movi	r9,1
 802b71c:	4a12983a 	sll	r9,r9,r8
 802b720:	5206d83a 	srl	r3,r10,r8
 802b724:	2209883a 	add	r4,r4,r8
 802b728:	4a3fffc4 	addi	r8,r9,-1
 802b72c:	4294703a 	and	r10,r8,r10
 802b730:	5014c03a 	cmpne	r10,r10,zero
 802b734:	50d4b03a 	or	r10,r10,r3
 802b738:	003fa706 	br	802b5d8 <_fpadd_parts+0x74>
 802b73c:	193fc01e 	bne	r3,r4,802b640 <_fpadd_parts+0xdc>
 802b740:	11000117 	ldw	r4,4(r2)
 802b744:	28c00117 	ldw	r3,4(r5)
 802b748:	20ffbd26 	beq	r4,r3,802b640 <_fpadd_parts+0xdc>
 802b74c:	00820134 	movhi	r2,2052
 802b750:	10840c04 	addi	r2,r2,4144
 802b754:	f800283a 	ret

0802b758 <__addsf3>:
 802b758:	defff104 	addi	sp,sp,-60
 802b75c:	d9000d15 	stw	r4,52(sp)
 802b760:	d9400c15 	stw	r5,48(sp)
 802b764:	d9000d04 	addi	r4,sp,52
 802b768:	d9400804 	addi	r5,sp,32
 802b76c:	dfc00e15 	stw	ra,56(sp)
 802b770:	802c5280 	call	802c528 <__unpack_f>
 802b774:	d9000c04 	addi	r4,sp,48
 802b778:	d9400404 	addi	r5,sp,16
 802b77c:	802c5280 	call	802c528 <__unpack_f>
 802b780:	d9000804 	addi	r4,sp,32
 802b784:	d9400404 	addi	r5,sp,16
 802b788:	d80d883a 	mov	r6,sp
 802b78c:	802b5640 	call	802b564 <_fpadd_parts>
 802b790:	1009883a 	mov	r4,r2
 802b794:	802c3fc0 	call	802c3fc <__pack_f>
 802b798:	dfc00e17 	ldw	ra,56(sp)
 802b79c:	dec00f04 	addi	sp,sp,60
 802b7a0:	f800283a 	ret

0802b7a4 <__subsf3>:
 802b7a4:	defff104 	addi	sp,sp,-60
 802b7a8:	d9000d15 	stw	r4,52(sp)
 802b7ac:	d9400c15 	stw	r5,48(sp)
 802b7b0:	d9000d04 	addi	r4,sp,52
 802b7b4:	d9400804 	addi	r5,sp,32
 802b7b8:	dfc00e15 	stw	ra,56(sp)
 802b7bc:	802c5280 	call	802c528 <__unpack_f>
 802b7c0:	d9000c04 	addi	r4,sp,48
 802b7c4:	d9400404 	addi	r5,sp,16
 802b7c8:	802c5280 	call	802c528 <__unpack_f>
 802b7cc:	d8800517 	ldw	r2,20(sp)
 802b7d0:	d9000804 	addi	r4,sp,32
 802b7d4:	d9400404 	addi	r5,sp,16
 802b7d8:	d80d883a 	mov	r6,sp
 802b7dc:	1080005c 	xori	r2,r2,1
 802b7e0:	d8800515 	stw	r2,20(sp)
 802b7e4:	802b5640 	call	802b564 <_fpadd_parts>
 802b7e8:	1009883a 	mov	r4,r2
 802b7ec:	802c3fc0 	call	802c3fc <__pack_f>
 802b7f0:	dfc00e17 	ldw	ra,56(sp)
 802b7f4:	dec00f04 	addi	sp,sp,60
 802b7f8:	f800283a 	ret

0802b7fc <__mulsf3>:
 802b7fc:	defff104 	addi	sp,sp,-60
 802b800:	d9000d15 	stw	r4,52(sp)
 802b804:	d9400c15 	stw	r5,48(sp)
 802b808:	d9000d04 	addi	r4,sp,52
 802b80c:	d9400804 	addi	r5,sp,32
 802b810:	dfc00e15 	stw	ra,56(sp)
 802b814:	802c5280 	call	802c528 <__unpack_f>
 802b818:	d9000c04 	addi	r4,sp,48
 802b81c:	d9400404 	addi	r5,sp,16
 802b820:	802c5280 	call	802c528 <__unpack_f>
 802b824:	d8c00817 	ldw	r3,32(sp)
 802b828:	00800044 	movi	r2,1
 802b82c:	10c00936 	bltu	r2,r3,802b854 <__mulsf3+0x58>
 802b830:	d8c00917 	ldw	r3,36(sp)
 802b834:	d8800517 	ldw	r2,20(sp)
 802b838:	d9000804 	addi	r4,sp,32
 802b83c:	1884c03a 	cmpne	r2,r3,r2
 802b840:	d8800915 	stw	r2,36(sp)
 802b844:	802c3fc0 	call	802c3fc <__pack_f>
 802b848:	dfc00e17 	ldw	ra,56(sp)
 802b84c:	dec00f04 	addi	sp,sp,60
 802b850:	f800283a 	ret
 802b854:	d9000417 	ldw	r4,16(sp)
 802b858:	11000936 	bltu	r2,r4,802b880 <__mulsf3+0x84>
 802b85c:	d8800517 	ldw	r2,20(sp)
 802b860:	d8c00917 	ldw	r3,36(sp)
 802b864:	d9000404 	addi	r4,sp,16
 802b868:	1884c03a 	cmpne	r2,r3,r2
 802b86c:	d8800515 	stw	r2,20(sp)
 802b870:	802c3fc0 	call	802c3fc <__pack_f>
 802b874:	dfc00e17 	ldw	ra,56(sp)
 802b878:	dec00f04 	addi	sp,sp,60
 802b87c:	f800283a 	ret
 802b880:	00800104 	movi	r2,4
 802b884:	1880051e 	bne	r3,r2,802b89c <__mulsf3+0xa0>
 802b888:	00800084 	movi	r2,2
 802b88c:	20bfe81e 	bne	r4,r2,802b830 <__mulsf3+0x34>
 802b890:	01020134 	movhi	r4,2052
 802b894:	21040c04 	addi	r4,r4,4144
 802b898:	003fea06 	br	802b844 <__mulsf3+0x48>
 802b89c:	2080031e 	bne	r4,r2,802b8ac <__mulsf3+0xb0>
 802b8a0:	00800084 	movi	r2,2
 802b8a4:	18bffa26 	beq	r3,r2,802b890 <__mulsf3+0x94>
 802b8a8:	003fec06 	br	802b85c <__mulsf3+0x60>
 802b8ac:	00800084 	movi	r2,2
 802b8b0:	18bfdf26 	beq	r3,r2,802b830 <__mulsf3+0x34>
 802b8b4:	20bfe926 	beq	r4,r2,802b85c <__mulsf3+0x60>
 802b8b8:	d9000717 	ldw	r4,28(sp)
 802b8bc:	d9800b17 	ldw	r6,44(sp)
 802b8c0:	000b883a 	mov	r5,zero
 802b8c4:	000f883a 	mov	r7,zero
 802b8c8:	802c2400 	call	802c240 <__muldi3>
 802b8cc:	d9000617 	ldw	r4,24(sp)
 802b8d0:	d9400a17 	ldw	r5,40(sp)
 802b8d4:	d9c00917 	ldw	r7,36(sp)
 802b8d8:	290b883a 	add	r5,r5,r4
 802b8dc:	d9000517 	ldw	r4,20(sp)
 802b8e0:	29800084 	addi	r6,r5,2
 802b8e4:	d9800215 	stw	r6,8(sp)
 802b8e8:	3908c03a 	cmpne	r4,r7,r4
 802b8ec:	d9000115 	stw	r4,4(sp)
 802b8f0:	1809883a 	mov	r4,r3
 802b8f4:	1800070e 	bge	r3,zero,802b914 <__mulsf3+0x118>
 802b8f8:	1900004c 	andi	r4,r3,1
 802b8fc:	294000c4 	addi	r5,r5,3
 802b900:	20000226 	beq	r4,zero,802b90c <__mulsf3+0x110>
 802b904:	1004d07a 	srli	r2,r2,1
 802b908:	10a00034 	orhi	r2,r2,32768
 802b90c:	1808d07a 	srli	r4,r3,1
 802b910:	d9400215 	stw	r5,8(sp)
 802b914:	01900034 	movhi	r6,16384
 802b918:	31bfffc4 	addi	r6,r6,-1
 802b91c:	31000c36 	bltu	r6,r4,802b950 <__mulsf3+0x154>
 802b920:	d8c00217 	ldw	r3,8(sp)
 802b924:	18ffffc4 	addi	r3,r3,-1
 802b928:	00000306 	br	802b938 <__mulsf3+0x13c>
 802b92c:	1085883a 	add	r2,r2,r2
 802b930:	18ffffc4 	addi	r3,r3,-1
 802b934:	31000536 	bltu	r6,r4,802b94c <__mulsf3+0x150>
 802b938:	2109883a 	add	r4,r4,r4
 802b93c:	180b883a 	mov	r5,r3
 802b940:	103ffa0e 	bge	r2,zero,802b92c <__mulsf3+0x130>
 802b944:	21000054 	ori	r4,r4,1
 802b948:	003ff806 	br	802b92c <__mulsf3+0x130>
 802b94c:	d9400215 	stw	r5,8(sp)
 802b950:	21401fcc 	andi	r5,r4,127
 802b954:	00c01004 	movi	r3,64
 802b958:	28c00526 	beq	r5,r3,802b970 <__mulsf3+0x174>
 802b95c:	008000c4 	movi	r2,3
 802b960:	d9000315 	stw	r4,12(sp)
 802b964:	d8800015 	stw	r2,0(sp)
 802b968:	d809883a 	mov	r4,sp
 802b96c:	003fb506 	br	802b844 <__mulsf3+0x48>
 802b970:	20c0200c 	andi	r3,r4,128
 802b974:	183ff91e 	bne	r3,zero,802b95c <__mulsf3+0x160>
 802b978:	103ff826 	beq	r2,zero,802b95c <__mulsf3+0x160>
 802b97c:	21001004 	addi	r4,r4,64
 802b980:	00bfe004 	movi	r2,-128
 802b984:	2088703a 	and	r4,r4,r2
 802b988:	003ff406 	br	802b95c <__mulsf3+0x160>

0802b98c <__floatsisf>:
 802b98c:	2004d7fa 	srli	r2,r4,31
 802b990:	defffa04 	addi	sp,sp,-24
 802b994:	00c000c4 	movi	r3,3
 802b998:	dfc00515 	stw	ra,20(sp)
 802b99c:	dc000415 	stw	r16,16(sp)
 802b9a0:	d8c00015 	stw	r3,0(sp)
 802b9a4:	d8800115 	stw	r2,4(sp)
 802b9a8:	2000081e 	bne	r4,zero,802b9cc <__floatsisf+0x40>
 802b9ac:	00800084 	movi	r2,2
 802b9b0:	d8800015 	stw	r2,0(sp)
 802b9b4:	d809883a 	mov	r4,sp
 802b9b8:	802c3fc0 	call	802c3fc <__pack_f>
 802b9bc:	dfc00517 	ldw	ra,20(sp)
 802b9c0:	dc000417 	ldw	r16,16(sp)
 802b9c4:	dec00604 	addi	sp,sp,24
 802b9c8:	f800283a 	ret
 802b9cc:	00c00784 	movi	r3,30
 802b9d0:	d8c00215 	stw	r3,8(sp)
 802b9d4:	10000b1e 	bne	r2,zero,802ba04 <__floatsisf+0x78>
 802b9d8:	2021883a 	mov	r16,r4
 802b9dc:	8009883a 	mov	r4,r16
 802b9e0:	802c3500 	call	802c350 <__clzsi2>
 802b9e4:	113fffc4 	addi	r4,r2,-1
 802b9e8:	01000d0e 	bge	zero,r4,802ba20 <__floatsisf+0x94>
 802b9ec:	8108983a 	sll	r4,r16,r4
 802b9f0:	00c007c4 	movi	r3,31
 802b9f4:	1885c83a 	sub	r2,r3,r2
 802b9f8:	d9000315 	stw	r4,12(sp)
 802b9fc:	d8800215 	stw	r2,8(sp)
 802ba00:	003fec06 	br	802b9b4 <__floatsisf+0x28>
 802ba04:	00a00034 	movhi	r2,32768
 802ba08:	20800726 	beq	r4,r2,802ba28 <__floatsisf+0x9c>
 802ba0c:	0121c83a 	sub	r16,zero,r4
 802ba10:	8009883a 	mov	r4,r16
 802ba14:	802c3500 	call	802c350 <__clzsi2>
 802ba18:	113fffc4 	addi	r4,r2,-1
 802ba1c:	013ff316 	blt	zero,r4,802b9ec <__floatsisf+0x60>
 802ba20:	dc000315 	stw	r16,12(sp)
 802ba24:	003fe306 	br	802b9b4 <__floatsisf+0x28>
 802ba28:	00b3c034 	movhi	r2,52992
 802ba2c:	003fe306 	br	802b9bc <__floatsisf+0x30>

0802ba30 <__fixsfsi>:
 802ba30:	defffa04 	addi	sp,sp,-24
 802ba34:	d9000415 	stw	r4,16(sp)
 802ba38:	d80b883a 	mov	r5,sp
 802ba3c:	d9000404 	addi	r4,sp,16
 802ba40:	dfc00515 	stw	ra,20(sp)
 802ba44:	802c5280 	call	802c528 <__unpack_f>
 802ba48:	d8800017 	ldw	r2,0(sp)
 802ba4c:	00c00084 	movi	r3,2
 802ba50:	10c01826 	beq	r2,r3,802bab4 <__fixsfsi+0x84>
 802ba54:	00c00044 	movi	r3,1
 802ba58:	1880162e 	bgeu	r3,r2,802bab4 <__fixsfsi+0x84>
 802ba5c:	00c00104 	movi	r3,4
 802ba60:	10c00426 	beq	r2,r3,802ba74 <__fixsfsi+0x44>
 802ba64:	d8800217 	ldw	r2,8(sp)
 802ba68:	10001216 	blt	r2,zero,802bab4 <__fixsfsi+0x84>
 802ba6c:	00c00784 	movi	r3,30
 802ba70:	1880070e 	bge	r3,r2,802ba90 <__fixsfsi+0x60>
 802ba74:	d8800117 	ldw	r2,4(sp)
 802ba78:	1000121e 	bne	r2,zero,802bac4 <__fixsfsi+0x94>
 802ba7c:	00a00034 	movhi	r2,32768
 802ba80:	10bfffc4 	addi	r2,r2,-1
 802ba84:	dfc00517 	ldw	ra,20(sp)
 802ba88:	dec00604 	addi	sp,sp,24
 802ba8c:	f800283a 	ret
 802ba90:	1885c83a 	sub	r2,r3,r2
 802ba94:	d8c00317 	ldw	r3,12(sp)
 802ba98:	1884d83a 	srl	r2,r3,r2
 802ba9c:	d8c00117 	ldw	r3,4(sp)
 802baa0:	183ff826 	beq	r3,zero,802ba84 <__fixsfsi+0x54>
 802baa4:	0085c83a 	sub	r2,zero,r2
 802baa8:	dfc00517 	ldw	ra,20(sp)
 802baac:	dec00604 	addi	sp,sp,24
 802bab0:	f800283a 	ret
 802bab4:	0005883a 	mov	r2,zero
 802bab8:	dfc00517 	ldw	ra,20(sp)
 802babc:	dec00604 	addi	sp,sp,24
 802bac0:	f800283a 	ret
 802bac4:	00a00034 	movhi	r2,32768
 802bac8:	dfc00517 	ldw	ra,20(sp)
 802bacc:	dec00604 	addi	sp,sp,24
 802bad0:	f800283a 	ret

0802bad4 <__muldf3>:
 802bad4:	deffe404 	addi	sp,sp,-112
 802bad8:	d9001115 	stw	r4,68(sp)
 802badc:	d9401215 	stw	r5,72(sp)
 802bae0:	d9001104 	addi	r4,sp,68
 802bae4:	d9400a04 	addi	r5,sp,40
 802bae8:	dfc01b15 	stw	ra,108(sp)
 802baec:	d9800f15 	stw	r6,60(sp)
 802baf0:	d9c01015 	stw	r7,64(sp)
 802baf4:	ddc01a15 	stw	r23,104(sp)
 802baf8:	dd801915 	stw	r22,100(sp)
 802bafc:	dd401815 	stw	r21,96(sp)
 802bb00:	dd001715 	stw	r20,92(sp)
 802bb04:	dcc01615 	stw	r19,88(sp)
 802bb08:	dc801515 	stw	r18,84(sp)
 802bb0c:	dc401415 	stw	r17,80(sp)
 802bb10:	dc001315 	stw	r16,76(sp)
 802bb14:	802c8400 	call	802c840 <__unpack_d>
 802bb18:	d9000f04 	addi	r4,sp,60
 802bb1c:	d9400504 	addi	r5,sp,20
 802bb20:	802c8400 	call	802c840 <__unpack_d>
 802bb24:	d8c00a17 	ldw	r3,40(sp)
 802bb28:	00800044 	movi	r2,1
 802bb2c:	10c01136 	bltu	r2,r3,802bb74 <__muldf3+0xa0>
 802bb30:	d8c00b17 	ldw	r3,44(sp)
 802bb34:	d8800617 	ldw	r2,24(sp)
 802bb38:	d9000a04 	addi	r4,sp,40
 802bb3c:	1884c03a 	cmpne	r2,r3,r2
 802bb40:	d8800b15 	stw	r2,44(sp)
 802bb44:	802c61c0 	call	802c61c <__pack_d>
 802bb48:	dfc01b17 	ldw	ra,108(sp)
 802bb4c:	ddc01a17 	ldw	r23,104(sp)
 802bb50:	dd801917 	ldw	r22,100(sp)
 802bb54:	dd401817 	ldw	r21,96(sp)
 802bb58:	dd001717 	ldw	r20,92(sp)
 802bb5c:	dcc01617 	ldw	r19,88(sp)
 802bb60:	dc801517 	ldw	r18,84(sp)
 802bb64:	dc401417 	ldw	r17,80(sp)
 802bb68:	dc001317 	ldw	r16,76(sp)
 802bb6c:	dec01c04 	addi	sp,sp,112
 802bb70:	f800283a 	ret
 802bb74:	d9000517 	ldw	r4,20(sp)
 802bb78:	11000636 	bltu	r2,r4,802bb94 <__muldf3+0xc0>
 802bb7c:	d8800617 	ldw	r2,24(sp)
 802bb80:	d8c00b17 	ldw	r3,44(sp)
 802bb84:	d9000504 	addi	r4,sp,20
 802bb88:	1884c03a 	cmpne	r2,r3,r2
 802bb8c:	d8800615 	stw	r2,24(sp)
 802bb90:	003fec06 	br	802bb44 <__muldf3+0x70>
 802bb94:	00800104 	movi	r2,4
 802bb98:	1880051e 	bne	r3,r2,802bbb0 <__muldf3+0xdc>
 802bb9c:	00800084 	movi	r2,2
 802bba0:	20bfe31e 	bne	r4,r2,802bb30 <__muldf3+0x5c>
 802bba4:	01020134 	movhi	r4,2052
 802bba8:	21041004 	addi	r4,r4,4160
 802bbac:	003fe506 	br	802bb44 <__muldf3+0x70>
 802bbb0:	2080031e 	bne	r4,r2,802bbc0 <__muldf3+0xec>
 802bbb4:	00800084 	movi	r2,2
 802bbb8:	18bffa26 	beq	r3,r2,802bba4 <__muldf3+0xd0>
 802bbbc:	003fef06 	br	802bb7c <__muldf3+0xa8>
 802bbc0:	00800084 	movi	r2,2
 802bbc4:	18bfda26 	beq	r3,r2,802bb30 <__muldf3+0x5c>
 802bbc8:	20bfec26 	beq	r4,r2,802bb7c <__muldf3+0xa8>
 802bbcc:	dc000d17 	ldw	r16,52(sp)
 802bbd0:	dd000817 	ldw	r20,32(sp)
 802bbd4:	dc800917 	ldw	r18,36(sp)
 802bbd8:	8009883a 	mov	r4,r16
 802bbdc:	000b883a 	mov	r5,zero
 802bbe0:	a00d883a 	mov	r6,r20
 802bbe4:	000f883a 	mov	r7,zero
 802bbe8:	802c2400 	call	802c240 <__muldi3>
 802bbec:	dc400e17 	ldw	r17,56(sp)
 802bbf0:	9009883a 	mov	r4,r18
 802bbf4:	800d883a 	mov	r6,r16
 802bbf8:	000b883a 	mov	r5,zero
 802bbfc:	000f883a 	mov	r7,zero
 802bc00:	102f883a 	mov	r23,r2
 802bc04:	1827883a 	mov	r19,r3
 802bc08:	802c2400 	call	802c240 <__muldi3>
 802bc0c:	900d883a 	mov	r6,r18
 802bc10:	8809883a 	mov	r4,r17
 802bc14:	000b883a 	mov	r5,zero
 802bc18:	000f883a 	mov	r7,zero
 802bc1c:	102b883a 	mov	r21,r2
 802bc20:	1821883a 	mov	r16,r3
 802bc24:	802c2400 	call	802c240 <__muldi3>
 802bc28:	8809883a 	mov	r4,r17
 802bc2c:	000b883a 	mov	r5,zero
 802bc30:	a00d883a 	mov	r6,r20
 802bc34:	000f883a 	mov	r7,zero
 802bc38:	102d883a 	mov	r22,r2
 802bc3c:	1825883a 	mov	r18,r3
 802bc40:	802c2400 	call	802c240 <__muldi3>
 802bc44:	154b883a 	add	r5,r2,r21
 802bc48:	2889803a 	cmpltu	r4,r5,r2
 802bc4c:	1c07883a 	add	r3,r3,r16
 802bc50:	20c9883a 	add	r4,r4,r3
 802bc54:	24004b36 	bltu	r4,r16,802bd84 <__muldf3+0x2b0>
 802bc58:	8100011e 	bne	r16,r4,802bc60 <__muldf3+0x18c>
 802bc5c:	2d404936 	bltu	r5,r21,802bd84 <__muldf3+0x2b0>
 802bc60:	0011883a 	mov	r8,zero
 802bc64:	0007883a 	mov	r3,zero
 802bc68:	2ccb883a 	add	r5,r5,r19
 802bc6c:	b80d883a 	mov	r6,r23
 802bc70:	2cc0012e 	bgeu	r5,r19,802bc78 <__muldf3+0x1a4>
 802bc74:	02000044 	movi	r8,1
 802bc78:	258f883a 	add	r7,r4,r22
 802bc7c:	3909803a 	cmpltu	r4,r7,r4
 802bc80:	da400c17 	ldw	r9,48(sp)
 802bc84:	2489883a 	add	r4,r4,r18
 802bc88:	d8800717 	ldw	r2,28(sp)
 802bc8c:	20c9883a 	add	r4,r4,r3
 802bc90:	da800b17 	ldw	r10,44(sp)
 802bc94:	d8c00617 	ldw	r3,24(sp)
 802bc98:	3a11883a 	add	r8,r7,r8
 802bc9c:	4885883a 	add	r2,r9,r2
 802bca0:	50c6c03a 	cmpne	r3,r10,r3
 802bca4:	41cf803a 	cmpltu	r7,r8,r7
 802bca8:	12400104 	addi	r9,r2,4
 802bcac:	d8c00115 	stw	r3,4(sp)
 802bcb0:	3909883a 	add	r4,r7,r4
 802bcb4:	da400215 	stw	r9,8(sp)
 802bcb8:	03480034 	movhi	r13,8192
 802bcbc:	6b7fffc4 	addi	r13,r13,-1
 802bcc0:	4007883a 	mov	r3,r8
 802bcc4:	6900102e 	bgeu	r13,r4,802bd08 <__muldf3+0x234>
 802bcc8:	10800144 	addi	r2,r2,5
 802bccc:	180ed07a 	srli	r7,r3,1
 802bcd0:	18c0004c 	andi	r3,r3,1
 802bcd4:	201097fa 	slli	r8,r4,31
 802bcd8:	281697fa 	slli	r11,r5,31
 802bcdc:	2008d07a 	srli	r4,r4,1
 802bce0:	3014d07a 	srli	r10,r6,1
 802bce4:	2812d07a 	srli	r9,r5,1
 802bce8:	1019883a 	mov	r12,r2
 802bcec:	18000226 	beq	r3,zero,802bcf8 <__muldf3+0x224>
 802bcf0:	5a8cb03a 	or	r6,r11,r10
 802bcf4:	49600034 	orhi	r5,r9,32768
 802bcf8:	41c6b03a 	or	r3,r8,r7
 802bcfc:	10800044 	addi	r2,r2,1
 802bd00:	693ff236 	bltu	r13,r4,802bccc <__muldf3+0x1f8>
 802bd04:	db000215 	stw	r12,8(sp)
 802bd08:	03440034 	movhi	r13,4096
 802bd0c:	6b7fffc4 	addi	r13,r13,-1
 802bd10:	69001336 	bltu	r13,r4,802bd60 <__muldf3+0x28c>
 802bd14:	d8800217 	ldw	r2,8(sp)
 802bd18:	10bfffc4 	addi	r2,r2,-1
 802bd1c:	18d3883a 	add	r9,r3,r3
 802bd20:	48c7803a 	cmpltu	r3,r9,r3
 802bd24:	2109883a 	add	r4,r4,r4
 802bd28:	190f883a 	add	r7,r3,r4
 802bd2c:	3191883a 	add	r8,r6,r6
 802bd30:	4197803a 	cmpltu	r11,r8,r6
 802bd34:	2955883a 	add	r10,r5,r5
 802bd38:	1019883a 	mov	r12,r2
 802bd3c:	4807883a 	mov	r3,r9
 802bd40:	3809883a 	mov	r4,r7
 802bd44:	2800010e 	bge	r5,zero,802bd4c <__muldf3+0x278>
 802bd48:	48c00054 	ori	r3,r9,1
 802bd4c:	400d883a 	mov	r6,r8
 802bd50:	5a8b883a 	add	r5,r11,r10
 802bd54:	10bfffc4 	addi	r2,r2,-1
 802bd58:	69fff02e 	bgeu	r13,r7,802bd1c <__muldf3+0x248>
 802bd5c:	db000215 	stw	r12,8(sp)
 802bd60:	18803fcc 	andi	r2,r3,255
 802bd64:	01c02004 	movi	r7,128
 802bd68:	11c00926 	beq	r2,r7,802bd90 <__muldf3+0x2bc>
 802bd6c:	008000c4 	movi	r2,3
 802bd70:	d9000415 	stw	r4,16(sp)
 802bd74:	d8c00315 	stw	r3,12(sp)
 802bd78:	d8800015 	stw	r2,0(sp)
 802bd7c:	d809883a 	mov	r4,sp
 802bd80:	003f7006 	br	802bb44 <__muldf3+0x70>
 802bd84:	0011883a 	mov	r8,zero
 802bd88:	00c00044 	movi	r3,1
 802bd8c:	003fb606 	br	802bc68 <__muldf3+0x194>
 802bd90:	19c0400c 	andi	r7,r3,256
 802bd94:	383ff51e 	bne	r7,zero,802bd6c <__muldf3+0x298>
 802bd98:	314ab03a 	or	r5,r6,r5
 802bd9c:	283ff326 	beq	r5,zero,802bd6c <__muldf3+0x298>
 802bda0:	1885883a 	add	r2,r3,r2
 802bda4:	10cb803a 	cmpltu	r5,r2,r3
 802bda8:	00ffc004 	movi	r3,-256
 802bdac:	10c6703a 	and	r3,r2,r3
 802bdb0:	2909883a 	add	r4,r5,r4
 802bdb4:	003fed06 	br	802bd6c <__muldf3+0x298>

0802bdb8 <__divdf3>:
 802bdb8:	defff104 	addi	sp,sp,-60
 802bdbc:	d9000c15 	stw	r4,48(sp)
 802bdc0:	d9400d15 	stw	r5,52(sp)
 802bdc4:	d9000c04 	addi	r4,sp,48
 802bdc8:	d9400504 	addi	r5,sp,20
 802bdcc:	dfc00e15 	stw	ra,56(sp)
 802bdd0:	d9800a15 	stw	r6,40(sp)
 802bdd4:	d9c00b15 	stw	r7,44(sp)
 802bdd8:	802c8400 	call	802c840 <__unpack_d>
 802bddc:	d9000a04 	addi	r4,sp,40
 802bde0:	d80b883a 	mov	r5,sp
 802bde4:	802c8400 	call	802c840 <__unpack_d>
 802bde8:	d8c00517 	ldw	r3,20(sp)
 802bdec:	00800044 	movi	r2,1
 802bdf0:	10c00536 	bltu	r2,r3,802be08 <__divdf3+0x50>
 802bdf4:	d9000504 	addi	r4,sp,20
 802bdf8:	802c61c0 	call	802c61c <__pack_d>
 802bdfc:	dfc00e17 	ldw	ra,56(sp)
 802be00:	dec00f04 	addi	sp,sp,60
 802be04:	f800283a 	ret
 802be08:	d9000017 	ldw	r4,0(sp)
 802be0c:	11000536 	bltu	r2,r4,802be24 <__divdf3+0x6c>
 802be10:	d809883a 	mov	r4,sp
 802be14:	802c61c0 	call	802c61c <__pack_d>
 802be18:	dfc00e17 	ldw	ra,56(sp)
 802be1c:	dec00f04 	addi	sp,sp,60
 802be20:	f800283a 	ret
 802be24:	d9800617 	ldw	r6,24(sp)
 802be28:	d9400117 	ldw	r5,4(sp)
 802be2c:	00800104 	movi	r2,4
 802be30:	314af03a 	xor	r5,r6,r5
 802be34:	d9400615 	stw	r5,24(sp)
 802be38:	18800226 	beq	r3,r2,802be44 <__divdf3+0x8c>
 802be3c:	01400084 	movi	r5,2
 802be40:	1940041e 	bne	r3,r5,802be54 <__divdf3+0x9c>
 802be44:	193feb1e 	bne	r3,r4,802bdf4 <__divdf3+0x3c>
 802be48:	01020134 	movhi	r4,2052
 802be4c:	21041004 	addi	r4,r4,4160
 802be50:	003fe906 	br	802bdf8 <__divdf3+0x40>
 802be54:	20803326 	beq	r4,r2,802bf24 <__divdf3+0x16c>
 802be58:	21403726 	beq	r4,r5,802bf38 <__divdf3+0x180>
 802be5c:	d8800217 	ldw	r2,8(sp)
 802be60:	d9000717 	ldw	r4,28(sp)
 802be64:	d8c00917 	ldw	r3,36(sp)
 802be68:	da000417 	ldw	r8,16(sp)
 802be6c:	2089c83a 	sub	r4,r4,r2
 802be70:	d9000715 	stw	r4,28(sp)
 802be74:	d8800817 	ldw	r2,32(sp)
 802be78:	dbc00317 	ldw	r15,12(sp)
 802be7c:	1a000236 	bltu	r3,r8,802be88 <__divdf3+0xd0>
 802be80:	40c0081e 	bne	r8,r3,802bea4 <__divdf3+0xec>
 802be84:	13c0072e 	bgeu	r2,r15,802bea4 <__divdf3+0xec>
 802be88:	108b883a 	add	r5,r2,r2
 802be8c:	288d803a 	cmpltu	r6,r5,r2
 802be90:	18c7883a 	add	r3,r3,r3
 802be94:	213fffc4 	addi	r4,r4,-1
 802be98:	2805883a 	mov	r2,r5
 802be9c:	30c7883a 	add	r3,r6,r3
 802bea0:	d9000715 	stw	r4,28(sp)
 802bea4:	01400f44 	movi	r5,61
 802bea8:	000f883a 	mov	r7,zero
 802beac:	01040034 	movhi	r4,4096
 802beb0:	0019883a 	mov	r12,zero
 802beb4:	001b883a 	mov	r13,zero
 802beb8:	201697fa 	slli	r11,r4,31
 802bebc:	3814d07a 	srli	r10,r7,1
 802bec0:	297fffc4 	addi	r5,r5,-1
 802bec4:	1a000936 	bltu	r3,r8,802beec <__divdf3+0x134>
 802bec8:	13cdc83a 	sub	r6,r2,r15
 802becc:	1193803a 	cmpltu	r9,r2,r6
 802bed0:	1a1dc83a 	sub	r14,r3,r8
 802bed4:	40c0011e 	bne	r8,r3,802bedc <__divdf3+0x124>
 802bed8:	13c00436 	bltu	r2,r15,802beec <__divdf3+0x134>
 802bedc:	3005883a 	mov	r2,r6
 802bee0:	7247c83a 	sub	r3,r14,r9
 802bee4:	61d8b03a 	or	r12,r12,r7
 802bee8:	691ab03a 	or	r13,r13,r4
 802beec:	108d883a 	add	r6,r2,r2
 802bef0:	3093803a 	cmpltu	r9,r6,r2
 802bef4:	18c7883a 	add	r3,r3,r3
 802bef8:	5a8eb03a 	or	r7,r11,r10
 802befc:	2008d07a 	srli	r4,r4,1
 802bf00:	3005883a 	mov	r2,r6
 802bf04:	48c7883a 	add	r3,r9,r3
 802bf08:	283feb1e 	bne	r5,zero,802beb8 <__divdf3+0x100>
 802bf0c:	61003fcc 	andi	r4,r12,255
 802bf10:	01402004 	movi	r5,128
 802bf14:	21400b26 	beq	r4,r5,802bf44 <__divdf3+0x18c>
 802bf18:	db000815 	stw	r12,32(sp)
 802bf1c:	db400915 	stw	r13,36(sp)
 802bf20:	003fb406 	br	802bdf4 <__divdf3+0x3c>
 802bf24:	d8000815 	stw	zero,32(sp)
 802bf28:	d8000915 	stw	zero,36(sp)
 802bf2c:	d8000715 	stw	zero,28(sp)
 802bf30:	d9000504 	addi	r4,sp,20
 802bf34:	003fb006 	br	802bdf8 <__divdf3+0x40>
 802bf38:	d8800515 	stw	r2,20(sp)
 802bf3c:	d9000504 	addi	r4,sp,20
 802bf40:	003fad06 	br	802bdf8 <__divdf3+0x40>
 802bf44:	6140400c 	andi	r5,r12,256
 802bf48:	283ff31e 	bne	r5,zero,802bf18 <__divdf3+0x160>
 802bf4c:	30c4b03a 	or	r2,r6,r3
 802bf50:	103ff126 	beq	r2,zero,802bf18 <__divdf3+0x160>
 802bf54:	6109883a 	add	r4,r12,r4
 802bf58:	2305803a 	cmpltu	r2,r4,r12
 802bf5c:	033fc004 	movi	r12,-256
 802bf60:	2318703a 	and	r12,r4,r12
 802bf64:	135b883a 	add	r13,r2,r13
 802bf68:	003feb06 	br	802bf18 <__divdf3+0x160>

0802bf6c <__truncdfsf2>:
 802bf6c:	defff804 	addi	sp,sp,-32
 802bf70:	d9000515 	stw	r4,20(sp)
 802bf74:	d9400615 	stw	r5,24(sp)
 802bf78:	d9000504 	addi	r4,sp,20
 802bf7c:	d80b883a 	mov	r5,sp
 802bf80:	dfc00715 	stw	ra,28(sp)
 802bf84:	802c8400 	call	802c840 <__unpack_d>
 802bf88:	d8800317 	ldw	r2,12(sp)
 802bf8c:	d8c00417 	ldw	r3,16(sp)
 802bf90:	01100034 	movhi	r4,16384
 802bf94:	213fffc4 	addi	r4,r4,-1
 802bf98:	100ed7ba 	srli	r7,r2,30
 802bf9c:	180690ba 	slli	r3,r3,2
 802bfa0:	1104703a 	and	r2,r2,r4
 802bfa4:	19ceb03a 	or	r7,r3,r7
 802bfa8:	10000126 	beq	r2,zero,802bfb0 <__truncdfsf2+0x44>
 802bfac:	39c00054 	ori	r7,r7,1
 802bfb0:	d9000017 	ldw	r4,0(sp)
 802bfb4:	d9400117 	ldw	r5,4(sp)
 802bfb8:	d9800217 	ldw	r6,8(sp)
 802bfbc:	802c5f00 	call	802c5f0 <__make_fp>
 802bfc0:	dfc00717 	ldw	ra,28(sp)
 802bfc4:	dec00804 	addi	sp,sp,32
 802bfc8:	f800283a 	ret

0802bfcc <__floatunsidf>:
 802bfcc:	defff904 	addi	sp,sp,-28
 802bfd0:	dc000515 	stw	r16,20(sp)
 802bfd4:	dfc00615 	stw	ra,24(sp)
 802bfd8:	d8000115 	stw	zero,4(sp)
 802bfdc:	2021883a 	mov	r16,r4
 802bfe0:	20001726 	beq	r4,zero,802c040 <__floatunsidf+0x74>
 802bfe4:	008000c4 	movi	r2,3
 802bfe8:	d8800015 	stw	r2,0(sp)
 802bfec:	00800f04 	movi	r2,60
 802bff0:	d8800215 	stw	r2,8(sp)
 802bff4:	802c3500 	call	802c350 <__clzsi2>
 802bff8:	10c00744 	addi	r3,r2,29
 802bffc:	18001816 	blt	r3,zero,802c060 <__floatunsidf+0x94>
 802c000:	18002d26 	beq	r3,zero,802c0b8 <__floatunsidf+0xec>
 802c004:	113fff44 	addi	r4,r2,-3
 802c008:	20002e16 	blt	r4,zero,802c0c4 <__floatunsidf+0xf8>
 802c00c:	8108983a 	sll	r4,r16,r4
 802c010:	0021883a 	mov	r16,zero
 802c014:	014007c4 	movi	r5,31
 802c018:	2885c83a 	sub	r2,r5,r2
 802c01c:	dc000315 	stw	r16,12(sp)
 802c020:	d9000415 	stw	r4,16(sp)
 802c024:	d8800215 	stw	r2,8(sp)
 802c028:	d809883a 	mov	r4,sp
 802c02c:	802c61c0 	call	802c61c <__pack_d>
 802c030:	dfc00617 	ldw	ra,24(sp)
 802c034:	dc000517 	ldw	r16,20(sp)
 802c038:	dec00704 	addi	sp,sp,28
 802c03c:	f800283a 	ret
 802c040:	00800084 	movi	r2,2
 802c044:	d809883a 	mov	r4,sp
 802c048:	d8800015 	stw	r2,0(sp)
 802c04c:	802c61c0 	call	802c61c <__pack_d>
 802c050:	dfc00617 	ldw	ra,24(sp)
 802c054:	dc000517 	ldw	r16,20(sp)
 802c058:	dec00704 	addi	sp,sp,28
 802c05c:	f800283a 	ret
 802c060:	00c7c83a 	sub	r3,zero,r3
 802c064:	193ff804 	addi	r4,r3,-32
 802c068:	20001c16 	blt	r4,zero,802c0dc <__floatunsidf+0x110>
 802c06c:	000b883a 	mov	r5,zero
 802c070:	2009d7fa 	srai	r4,r4,31
 802c074:	80c6d83a 	srl	r3,r16,r3
 802c078:	297fffc4 	addi	r5,r5,-1
 802c07c:	2c20703a 	and	r16,r5,r16
 802c080:	8020c03a 	cmpne	r16,r16,zero
 802c084:	1906703a 	and	r3,r3,r4
 802c088:	010007c4 	movi	r4,31
 802c08c:	80c6b03a 	or	r3,r16,r3
 802c090:	2085c83a 	sub	r2,r4,r2
 802c094:	d809883a 	mov	r4,sp
 802c098:	d8c00315 	stw	r3,12(sp)
 802c09c:	d8000415 	stw	zero,16(sp)
 802c0a0:	d8800215 	stw	r2,8(sp)
 802c0a4:	802c61c0 	call	802c61c <__pack_d>
 802c0a8:	dfc00617 	ldw	ra,24(sp)
 802c0ac:	dc000517 	ldw	r16,20(sp)
 802c0b0:	dec00704 	addi	sp,sp,28
 802c0b4:	f800283a 	ret
 802c0b8:	dc000315 	stw	r16,12(sp)
 802c0bc:	d8000415 	stw	zero,16(sp)
 802c0c0:	003fd906 	br	802c028 <__floatunsidf+0x5c>
 802c0c4:	800ad07a 	srli	r5,r16,1
 802c0c8:	010007c4 	movi	r4,31
 802c0cc:	20c9c83a 	sub	r4,r4,r3
 802c0d0:	2908d83a 	srl	r4,r5,r4
 802c0d4:	80e0983a 	sll	r16,r16,r3
 802c0d8:	003fce06 	br	802c014 <__floatunsidf+0x48>
 802c0dc:	01400044 	movi	r5,1
 802c0e0:	28ca983a 	sll	r5,r5,r3
 802c0e4:	003fe206 	br	802c070 <__floatunsidf+0xa4>

0802c0e8 <udivmodsi4>:
 802c0e8:	2005883a 	mov	r2,r4
 802c0ec:	2900182e 	bgeu	r5,r4,802c150 <udivmodsi4+0x68>
 802c0f0:	28001716 	blt	r5,zero,802c150 <udivmodsi4+0x68>
 802c0f4:	01000804 	movi	r4,32
 802c0f8:	00c00044 	movi	r3,1
 802c0fc:	00000206 	br	802c108 <udivmodsi4+0x20>
 802c100:	20001126 	beq	r4,zero,802c148 <udivmodsi4+0x60>
 802c104:	28000516 	blt	r5,zero,802c11c <udivmodsi4+0x34>
 802c108:	294b883a 	add	r5,r5,r5
 802c10c:	213fffc4 	addi	r4,r4,-1
 802c110:	18c7883a 	add	r3,r3,r3
 802c114:	28bffa36 	bltu	r5,r2,802c100 <udivmodsi4+0x18>
 802c118:	18000b26 	beq	r3,zero,802c148 <udivmodsi4+0x60>
 802c11c:	0009883a 	mov	r4,zero
 802c120:	11400236 	bltu	r2,r5,802c12c <udivmodsi4+0x44>
 802c124:	1145c83a 	sub	r2,r2,r5
 802c128:	20c8b03a 	or	r4,r4,r3
 802c12c:	1806d07a 	srli	r3,r3,1
 802c130:	280ad07a 	srli	r5,r5,1
 802c134:	183ffa1e 	bne	r3,zero,802c120 <udivmodsi4+0x38>
 802c138:	3000021e 	bne	r6,zero,802c144 <udivmodsi4+0x5c>
 802c13c:	2005883a 	mov	r2,r4
 802c140:	f800283a 	ret
 802c144:	f800283a 	ret
 802c148:	0009883a 	mov	r4,zero
 802c14c:	003ffa06 	br	802c138 <udivmodsi4+0x50>
 802c150:	00c00044 	movi	r3,1
 802c154:	0009883a 	mov	r4,zero
 802c158:	003ff106 	br	802c120 <udivmodsi4+0x38>

0802c15c <__divsi3>:
 802c15c:	defffe04 	addi	sp,sp,-8
 802c160:	dfc00115 	stw	ra,4(sp)
 802c164:	dc000015 	stw	r16,0(sp)
 802c168:	20000a16 	blt	r4,zero,802c194 <__divsi3+0x38>
 802c16c:	0021883a 	mov	r16,zero
 802c170:	28000b16 	blt	r5,zero,802c1a0 <__divsi3+0x44>
 802c174:	000d883a 	mov	r6,zero
 802c178:	802c0e80 	call	802c0e8 <udivmodsi4>
 802c17c:	80000126 	beq	r16,zero,802c184 <__divsi3+0x28>
 802c180:	0085c83a 	sub	r2,zero,r2
 802c184:	dfc00117 	ldw	ra,4(sp)
 802c188:	dc000017 	ldw	r16,0(sp)
 802c18c:	dec00204 	addi	sp,sp,8
 802c190:	f800283a 	ret
 802c194:	0109c83a 	sub	r4,zero,r4
 802c198:	04000044 	movi	r16,1
 802c19c:	283ff50e 	bge	r5,zero,802c174 <__divsi3+0x18>
 802c1a0:	014bc83a 	sub	r5,zero,r5
 802c1a4:	8400005c 	xori	r16,r16,1
 802c1a8:	003ff206 	br	802c174 <__divsi3+0x18>

0802c1ac <__modsi3>:
 802c1ac:	deffff04 	addi	sp,sp,-4
 802c1b0:	dfc00015 	stw	ra,0(sp)
 802c1b4:	20000516 	blt	r4,zero,802c1cc <__modsi3+0x20>
 802c1b8:	28000c16 	blt	r5,zero,802c1ec <__modsi3+0x40>
 802c1bc:	01800044 	movi	r6,1
 802c1c0:	dfc00017 	ldw	ra,0(sp)
 802c1c4:	dec00104 	addi	sp,sp,4
 802c1c8:	802c0e81 	jmpi	802c0e8 <udivmodsi4>
 802c1cc:	0109c83a 	sub	r4,zero,r4
 802c1d0:	28000b16 	blt	r5,zero,802c200 <__modsi3+0x54>
 802c1d4:	01800044 	movi	r6,1
 802c1d8:	802c0e80 	call	802c0e8 <udivmodsi4>
 802c1dc:	0085c83a 	sub	r2,zero,r2
 802c1e0:	dfc00017 	ldw	ra,0(sp)
 802c1e4:	dec00104 	addi	sp,sp,4
 802c1e8:	f800283a 	ret
 802c1ec:	014bc83a 	sub	r5,zero,r5
 802c1f0:	01800044 	movi	r6,1
 802c1f4:	dfc00017 	ldw	ra,0(sp)
 802c1f8:	dec00104 	addi	sp,sp,4
 802c1fc:	802c0e81 	jmpi	802c0e8 <udivmodsi4>
 802c200:	014bc83a 	sub	r5,zero,r5
 802c204:	003ff306 	br	802c1d4 <__modsi3+0x28>

0802c208 <__udivsi3>:
 802c208:	000d883a 	mov	r6,zero
 802c20c:	802c0e81 	jmpi	802c0e8 <udivmodsi4>

0802c210 <__umodsi3>:
 802c210:	01800044 	movi	r6,1
 802c214:	802c0e81 	jmpi	802c0e8 <udivmodsi4>

0802c218 <__mulsi3>:
 802c218:	0005883a 	mov	r2,zero
 802c21c:	20000726 	beq	r4,zero,802c23c <__mulsi3+0x24>
 802c220:	20c0004c 	andi	r3,r4,1
 802c224:	2008d07a 	srli	r4,r4,1
 802c228:	18000126 	beq	r3,zero,802c230 <__mulsi3+0x18>
 802c22c:	1145883a 	add	r2,r2,r5
 802c230:	294b883a 	add	r5,r5,r5
 802c234:	203ffa1e 	bne	r4,zero,802c220 <__mulsi3+0x8>
 802c238:	f800283a 	ret
 802c23c:	f800283a 	ret

0802c240 <__muldi3>:
 802c240:	defff604 	addi	sp,sp,-40
 802c244:	dd400515 	stw	r21,20(sp)
 802c248:	dd000415 	stw	r20,16(sp)
 802c24c:	257fffcc 	andi	r21,r4,65535
 802c250:	353fffcc 	andi	r20,r6,65535
 802c254:	dcc00315 	stw	r19,12(sp)
 802c258:	3026d43a 	srli	r19,r6,16
 802c25c:	dd800615 	stw	r22,24(sp)
 802c260:	dc800215 	stw	r18,8(sp)
 802c264:	dc400115 	stw	r17,4(sp)
 802c268:	2024d43a 	srli	r18,r4,16
 802c26c:	2023883a 	mov	r17,r4
 802c270:	282d883a 	mov	r22,r5
 802c274:	a009883a 	mov	r4,r20
 802c278:	a80b883a 	mov	r5,r21
 802c27c:	dfc00915 	stw	ra,36(sp)
 802c280:	df000815 	stw	fp,32(sp)
 802c284:	ddc00715 	stw	r23,28(sp)
 802c288:	3839883a 	mov	fp,r7
 802c28c:	dc000015 	stw	r16,0(sp)
 802c290:	3021883a 	mov	r16,r6
 802c294:	802c2180 	call	802c218 <__mulsi3>
 802c298:	a80b883a 	mov	r5,r21
 802c29c:	9809883a 	mov	r4,r19
 802c2a0:	102f883a 	mov	r23,r2
 802c2a4:	802c2180 	call	802c218 <__mulsi3>
 802c2a8:	a009883a 	mov	r4,r20
 802c2ac:	900b883a 	mov	r5,r18
 802c2b0:	102b883a 	mov	r21,r2
 802c2b4:	802c2180 	call	802c218 <__mulsi3>
 802c2b8:	9809883a 	mov	r4,r19
 802c2bc:	900b883a 	mov	r5,r18
 802c2c0:	1029883a 	mov	r20,r2
 802c2c4:	802c2180 	call	802c218 <__mulsi3>
 802c2c8:	1007883a 	mov	r3,r2
 802c2cc:	b804d43a 	srli	r2,r23,16
 802c2d0:	a549883a 	add	r4,r20,r21
 802c2d4:	2089883a 	add	r4,r4,r2
 802c2d8:	2500022e 	bgeu	r4,r20,802c2e4 <__muldi3+0xa4>
 802c2dc:	00800074 	movhi	r2,1
 802c2e0:	1887883a 	add	r3,r3,r2
 802c2e4:	200cd43a 	srli	r6,r4,16
 802c2e8:	2004943a 	slli	r2,r4,16
 802c2ec:	e00b883a 	mov	r5,fp
 802c2f0:	8809883a 	mov	r4,r17
 802c2f4:	bdffffcc 	andi	r23,r23,65535
 802c2f8:	19a3883a 	add	r17,r3,r6
 802c2fc:	15ef883a 	add	r23,r2,r23
 802c300:	802c2180 	call	802c218 <__mulsi3>
 802c304:	8009883a 	mov	r4,r16
 802c308:	b00b883a 	mov	r5,r22
 802c30c:	1025883a 	mov	r18,r2
 802c310:	802c2180 	call	802c218 <__mulsi3>
 802c314:	9085883a 	add	r2,r18,r2
 802c318:	1447883a 	add	r3,r2,r17
 802c31c:	b805883a 	mov	r2,r23
 802c320:	dfc00917 	ldw	ra,36(sp)
 802c324:	df000817 	ldw	fp,32(sp)
 802c328:	ddc00717 	ldw	r23,28(sp)
 802c32c:	dd800617 	ldw	r22,24(sp)
 802c330:	dd400517 	ldw	r21,20(sp)
 802c334:	dd000417 	ldw	r20,16(sp)
 802c338:	dcc00317 	ldw	r19,12(sp)
 802c33c:	dc800217 	ldw	r18,8(sp)
 802c340:	dc400117 	ldw	r17,4(sp)
 802c344:	dc000017 	ldw	r16,0(sp)
 802c348:	dec00a04 	addi	sp,sp,40
 802c34c:	f800283a 	ret

0802c350 <__clzsi2>:
 802c350:	00bfffd4 	movui	r2,65535
 802c354:	11000b36 	bltu	r2,r4,802c384 <__clzsi2+0x34>
 802c358:	00803fc4 	movi	r2,255
 802c35c:	11001e2e 	bgeu	r2,r4,802c3d8 <__clzsi2+0x88>
 802c360:	00c00204 	movi	r3,8
 802c364:	20c8d83a 	srl	r4,r4,r3
 802c368:	00c20134 	movhi	r3,2052
 802c36c:	18c41504 	addi	r3,r3,4180
 802c370:	00800604 	movi	r2,24
 802c374:	1909883a 	add	r4,r3,r4
 802c378:	20c00003 	ldbu	r3,0(r4)
 802c37c:	10c5c83a 	sub	r2,r2,r3
 802c380:	f800283a 	ret
 802c384:	00804034 	movhi	r2,256
 802c388:	10bfffc4 	addi	r2,r2,-1
 802c38c:	11000936 	bltu	r2,r4,802c3b4 <__clzsi2+0x64>
 802c390:	00800404 	movi	r2,16
 802c394:	1007883a 	mov	r3,r2
 802c398:	20c8d83a 	srl	r4,r4,r3
 802c39c:	00c20134 	movhi	r3,2052
 802c3a0:	18c41504 	addi	r3,r3,4180
 802c3a4:	1909883a 	add	r4,r3,r4
 802c3a8:	20c00003 	ldbu	r3,0(r4)
 802c3ac:	10c5c83a 	sub	r2,r2,r3
 802c3b0:	f800283a 	ret
 802c3b4:	00c00604 	movi	r3,24
 802c3b8:	20c8d83a 	srl	r4,r4,r3
 802c3bc:	00c20134 	movhi	r3,2052
 802c3c0:	18c41504 	addi	r3,r3,4180
 802c3c4:	00800204 	movi	r2,8
 802c3c8:	1909883a 	add	r4,r3,r4
 802c3cc:	20c00003 	ldbu	r3,0(r4)
 802c3d0:	10c5c83a 	sub	r2,r2,r3
 802c3d4:	f800283a 	ret
 802c3d8:	0007883a 	mov	r3,zero
 802c3dc:	20c8d83a 	srl	r4,r4,r3
 802c3e0:	00c20134 	movhi	r3,2052
 802c3e4:	18c41504 	addi	r3,r3,4180
 802c3e8:	00800804 	movi	r2,32
 802c3ec:	1909883a 	add	r4,r3,r4
 802c3f0:	20c00003 	ldbu	r3,0(r4)
 802c3f4:	10c5c83a 	sub	r2,r2,r3
 802c3f8:	f800283a 	ret

0802c3fc <__pack_f>:
 802c3fc:	21400017 	ldw	r5,0(r4)
 802c400:	01800044 	movi	r6,1
 802c404:	20c00317 	ldw	r3,12(r4)
 802c408:	21c00117 	ldw	r7,4(r4)
 802c40c:	3140282e 	bgeu	r6,r5,802c4b0 <__pack_f+0xb4>
 802c410:	00800104 	movi	r2,4
 802c414:	28802326 	beq	r5,r2,802c4a4 <__pack_f+0xa8>
 802c418:	00800084 	movi	r2,2
 802c41c:	28800f26 	beq	r5,r2,802c45c <__pack_f+0x60>
 802c420:	18000e26 	beq	r3,zero,802c45c <__pack_f+0x60>
 802c424:	21000217 	ldw	r4,8(r4)
 802c428:	00bfe084 	movi	r2,-126
 802c42c:	20802616 	blt	r4,r2,802c4c8 <__pack_f+0xcc>
 802c430:	00801fc4 	movi	r2,127
 802c434:	11001b16 	blt	r2,r4,802c4a4 <__pack_f+0xa8>
 802c438:	188a703a 	and	r5,r3,r2
 802c43c:	00801004 	movi	r2,64
 802c440:	28801126 	beq	r5,r2,802c488 <__pack_f+0x8c>
 802c444:	18c00fc4 	addi	r3,r3,63
 802c448:	18001316 	blt	r3,zero,802c498 <__pack_f+0x9c>
 802c44c:	21001fc4 	addi	r4,r4,127
 802c450:	180690ba 	slli	r3,r3,2
 802c454:	1806d27a 	srli	r3,r3,9
 802c458:	00000206 	br	802c464 <__pack_f+0x68>
 802c45c:	0009883a 	mov	r4,zero
 802c460:	0007883a 	mov	r3,zero
 802c464:	21003fcc 	andi	r4,r4,255
 802c468:	200895fa 	slli	r4,r4,23
 802c46c:	380a97fa 	slli	r5,r7,31
 802c470:	00802034 	movhi	r2,128
 802c474:	10bfffc4 	addi	r2,r2,-1
 802c478:	1886703a 	and	r3,r3,r2
 802c47c:	1904b03a 	or	r2,r3,r4
 802c480:	1144b03a 	or	r2,r2,r5
 802c484:	f800283a 	ret
 802c488:	1880200c 	andi	r2,r3,128
 802c48c:	103fee26 	beq	r2,zero,802c448 <__pack_f+0x4c>
 802c490:	18c01004 	addi	r3,r3,64
 802c494:	183fed0e 	bge	r3,zero,802c44c <__pack_f+0x50>
 802c498:	1806d07a 	srli	r3,r3,1
 802c49c:	21002004 	addi	r4,r4,128
 802c4a0:	003feb06 	br	802c450 <__pack_f+0x54>
 802c4a4:	013fffc4 	movi	r4,-1
 802c4a8:	0007883a 	mov	r3,zero
 802c4ac:	003fed06 	br	802c464 <__pack_f+0x68>
 802c4b0:	18c00434 	orhi	r3,r3,16
 802c4b4:	00802034 	movhi	r2,128
 802c4b8:	10bfffc4 	addi	r2,r2,-1
 802c4bc:	1886703a 	and	r3,r3,r2
 802c4c0:	013fffc4 	movi	r4,-1
 802c4c4:	003fe706 	br	802c464 <__pack_f+0x68>
 802c4c8:	1105c83a 	sub	r2,r2,r4
 802c4cc:	01000644 	movi	r4,25
 802c4d0:	20801216 	blt	r4,r2,802c51c <__pack_f+0x120>
 802c4d4:	3088983a 	sll	r4,r6,r2
 802c4d8:	1884d83a 	srl	r2,r3,r2
 802c4dc:	213fffc4 	addi	r4,r4,-1
 802c4e0:	20c6703a 	and	r3,r4,r3
 802c4e4:	1806c03a 	cmpne	r3,r3,zero
 802c4e8:	1884b03a 	or	r2,r3,r2
 802c4ec:	11001fcc 	andi	r4,r2,127
 802c4f0:	00c01004 	movi	r3,64
 802c4f4:	20c00a1e 	bne	r4,r3,802c520 <__pack_f+0x124>
 802c4f8:	10c0200c 	andi	r3,r2,128
 802c4fc:	18000126 	beq	r3,zero,802c504 <__pack_f+0x108>
 802c500:	10801004 	addi	r2,r2,64
 802c504:	100690ba 	slli	r3,r2,2
 802c508:	01100034 	movhi	r4,16384
 802c50c:	1105403a 	cmpgeu	r2,r2,r4
 802c510:	1806d27a 	srli	r3,r3,9
 802c514:	1009883a 	mov	r4,r2
 802c518:	003fd206 	br	802c464 <__pack_f+0x68>
 802c51c:	0005883a 	mov	r2,zero
 802c520:	10800fc4 	addi	r2,r2,63
 802c524:	003ff706 	br	802c504 <__pack_f+0x108>

0802c528 <__unpack_f>:
 802c528:	20c00017 	ldw	r3,0(r4)
 802c52c:	00802034 	movhi	r2,128
 802c530:	10bfffc4 	addi	r2,r2,-1
 802c534:	1808d5fa 	srli	r4,r3,23
 802c538:	180cd7fa 	srli	r6,r3,31
 802c53c:	1884703a 	and	r2,r3,r2
 802c540:	21003fcc 	andi	r4,r4,255
 802c544:	29800115 	stw	r6,4(r5)
 802c548:	2000111e 	bne	r4,zero,802c590 <__unpack_f+0x68>
 802c54c:	10001a26 	beq	r2,zero,802c5b8 <__unpack_f+0x90>
 802c550:	00ffe084 	movi	r3,-126
 802c554:	100491fa 	slli	r2,r2,7
 802c558:	28c00215 	stw	r3,8(r5)
 802c55c:	00c000c4 	movi	r3,3
 802c560:	28c00015 	stw	r3,0(r5)
 802c564:	01900034 	movhi	r6,16384
 802c568:	31bfffc4 	addi	r6,r6,-1
 802c56c:	30801036 	bltu	r6,r2,802c5b0 <__unpack_f+0x88>
 802c570:	00ffe044 	movi	r3,-127
 802c574:	1085883a 	add	r2,r2,r2
 802c578:	1809883a 	mov	r4,r3
 802c57c:	18ffffc4 	addi	r3,r3,-1
 802c580:	30bffc2e 	bgeu	r6,r2,802c574 <__unpack_f+0x4c>
 802c584:	29000215 	stw	r4,8(r5)
 802c588:	28800315 	stw	r2,12(r5)
 802c58c:	f800283a 	ret
 802c590:	01803fc4 	movi	r6,255
 802c594:	21800b26 	beq	r4,r6,802c5c4 <__unpack_f+0x9c>
 802c598:	100491fa 	slli	r2,r2,7
 802c59c:	213fe044 	addi	r4,r4,-127
 802c5a0:	00c000c4 	movi	r3,3
 802c5a4:	10900034 	orhi	r2,r2,16384
 802c5a8:	29000215 	stw	r4,8(r5)
 802c5ac:	28c00015 	stw	r3,0(r5)
 802c5b0:	28800315 	stw	r2,12(r5)
 802c5b4:	f800283a 	ret
 802c5b8:	00800084 	movi	r2,2
 802c5bc:	28800015 	stw	r2,0(r5)
 802c5c0:	f800283a 	ret
 802c5c4:	10000526 	beq	r2,zero,802c5dc <__unpack_f+0xb4>
 802c5c8:	18c0042c 	andhi	r3,r3,16
 802c5cc:	18000626 	beq	r3,zero,802c5e8 <__unpack_f+0xc0>
 802c5d0:	00c00044 	movi	r3,1
 802c5d4:	28c00015 	stw	r3,0(r5)
 802c5d8:	003ff506 	br	802c5b0 <__unpack_f+0x88>
 802c5dc:	00800104 	movi	r2,4
 802c5e0:	28800015 	stw	r2,0(r5)
 802c5e4:	f800283a 	ret
 802c5e8:	28000015 	stw	zero,0(r5)
 802c5ec:	003ff006 	br	802c5b0 <__unpack_f+0x88>

0802c5f0 <__make_fp>:
 802c5f0:	defffb04 	addi	sp,sp,-20
 802c5f4:	d9000015 	stw	r4,0(sp)
 802c5f8:	d809883a 	mov	r4,sp
 802c5fc:	dfc00415 	stw	ra,16(sp)
 802c600:	d9400115 	stw	r5,4(sp)
 802c604:	d9800215 	stw	r6,8(sp)
 802c608:	d9c00315 	stw	r7,12(sp)
 802c60c:	802c3fc0 	call	802c3fc <__pack_f>
 802c610:	dfc00417 	ldw	ra,16(sp)
 802c614:	dec00504 	addi	sp,sp,20
 802c618:	f800283a 	ret

0802c61c <__pack_d>:
 802c61c:	20800017 	ldw	r2,0(r4)
 802c620:	defff804 	addi	sp,sp,-32
 802c624:	dcc00315 	stw	r19,12(sp)
 802c628:	dc800215 	stw	r18,8(sp)
 802c62c:	dfc00715 	stw	ra,28(sp)
 802c630:	dd800615 	stw	r22,24(sp)
 802c634:	dd400515 	stw	r21,20(sp)
 802c638:	dd000415 	stw	r20,16(sp)
 802c63c:	dc400115 	stw	r17,4(sp)
 802c640:	dc000015 	stw	r16,0(sp)
 802c644:	04800044 	movi	r18,1
 802c648:	24400317 	ldw	r17,12(r4)
 802c64c:	24000417 	ldw	r16,16(r4)
 802c650:	24c00117 	ldw	r19,4(r4)
 802c654:	9080422e 	bgeu	r18,r2,802c760 <__pack_d+0x144>
 802c658:	00c00104 	movi	r3,4
 802c65c:	10c03c26 	beq	r2,r3,802c750 <__pack_d+0x134>
 802c660:	00c00084 	movi	r3,2
 802c664:	10c01926 	beq	r2,r3,802c6cc <__pack_d+0xb0>
 802c668:	8c04b03a 	or	r2,r17,r16
 802c66c:	10001726 	beq	r2,zero,802c6cc <__pack_d+0xb0>
 802c670:	21000217 	ldw	r4,8(r4)
 802c674:	00bf0084 	movi	r2,-1022
 802c678:	20804016 	blt	r4,r2,802c77c <__pack_d+0x160>
 802c67c:	0080ffc4 	movi	r2,1023
 802c680:	11003316 	blt	r2,r4,802c750 <__pack_d+0x134>
 802c684:	88803fcc 	andi	r2,r17,255
 802c688:	00c02004 	movi	r3,128
 802c68c:	10c02926 	beq	r2,r3,802c734 <__pack_d+0x118>
 802c690:	88801fc4 	addi	r2,r17,127
 802c694:	1463803a 	cmpltu	r17,r2,r17
 802c698:	8c21883a 	add	r16,r17,r16
 802c69c:	1023883a 	mov	r17,r2
 802c6a0:	00880034 	movhi	r2,8192
 802c6a4:	10bfffc4 	addi	r2,r2,-1
 802c6a8:	14001c36 	bltu	r2,r16,802c71c <__pack_d+0x100>
 802c6ac:	2100ffc4 	addi	r4,r4,1023
 802c6b0:	8006963a 	slli	r3,r16,24
 802c6b4:	8804d23a 	srli	r2,r17,8
 802c6b8:	8020913a 	slli	r16,r16,4
 802c6bc:	2101ffcc 	andi	r4,r4,2047
 802c6c0:	1884b03a 	or	r2,r3,r2
 802c6c4:	8020d33a 	srli	r16,r16,12
 802c6c8:	00000306 	br	802c6d8 <__pack_d+0xbc>
 802c6cc:	0009883a 	mov	r4,zero
 802c6d0:	0005883a 	mov	r2,zero
 802c6d4:	0021883a 	mov	r16,zero
 802c6d8:	2008953a 	slli	r4,r4,20
 802c6dc:	982697fa 	slli	r19,r19,31
 802c6e0:	00c00434 	movhi	r3,16
 802c6e4:	18ffffc4 	addi	r3,r3,-1
 802c6e8:	80e0703a 	and	r16,r16,r3
 802c6ec:	8106b03a 	or	r3,r16,r4
 802c6f0:	1cc6b03a 	or	r3,r3,r19
 802c6f4:	dfc00717 	ldw	ra,28(sp)
 802c6f8:	dd800617 	ldw	r22,24(sp)
 802c6fc:	dd400517 	ldw	r21,20(sp)
 802c700:	dd000417 	ldw	r20,16(sp)
 802c704:	dcc00317 	ldw	r19,12(sp)
 802c708:	dc800217 	ldw	r18,8(sp)
 802c70c:	dc400117 	ldw	r17,4(sp)
 802c710:	dc000017 	ldw	r16,0(sp)
 802c714:	dec00804 	addi	sp,sp,32
 802c718:	f800283a 	ret
 802c71c:	800697fa 	slli	r3,r16,31
 802c720:	8804d07a 	srli	r2,r17,1
 802c724:	21010004 	addi	r4,r4,1024
 802c728:	8020d07a 	srli	r16,r16,1
 802c72c:	18a2b03a 	or	r17,r3,r2
 802c730:	003fdf06 	br	802c6b0 <__pack_d+0x94>
 802c734:	88c0400c 	andi	r3,r17,256
 802c738:	183fd926 	beq	r3,zero,802c6a0 <__pack_d+0x84>
 802c73c:	8885883a 	add	r2,r17,r2
 802c740:	1463803a 	cmpltu	r17,r2,r17
 802c744:	8c21883a 	add	r16,r17,r16
 802c748:	1023883a 	mov	r17,r2
 802c74c:	003fd406 	br	802c6a0 <__pack_d+0x84>
 802c750:	0101ffc4 	movi	r4,2047
 802c754:	0005883a 	mov	r2,zero
 802c758:	0021883a 	mov	r16,zero
 802c75c:	003fde06 	br	802c6d8 <__pack_d+0xbc>
 802c760:	84000234 	orhi	r16,r16,8
 802c764:	00c00434 	movhi	r3,16
 802c768:	18ffffc4 	addi	r3,r3,-1
 802c76c:	8805883a 	mov	r2,r17
 802c770:	80e0703a 	and	r16,r16,r3
 802c774:	0101ffc4 	movi	r4,2047
 802c778:	003fd706 	br	802c6d8 <__pack_d+0xbc>
 802c77c:	1129c83a 	sub	r20,r2,r4
 802c780:	00800e04 	movi	r2,56
 802c784:	15002716 	blt	r2,r20,802c824 <__pack_d+0x208>
 802c788:	800b883a 	mov	r5,r16
 802c78c:	a00d883a 	mov	r6,r20
 802c790:	8809883a 	mov	r4,r17
 802c794:	802c9440 	call	802c944 <__lshrdi3>
 802c798:	9009883a 	mov	r4,r18
 802c79c:	000b883a 	mov	r5,zero
 802c7a0:	a00d883a 	mov	r6,r20
 802c7a4:	102d883a 	mov	r22,r2
 802c7a8:	182b883a 	mov	r21,r3
 802c7ac:	802c9880 	call	802c988 <__ashldi3>
 802c7b0:	1009003a 	cmpeq	r4,r2,zero
 802c7b4:	1907c83a 	sub	r3,r3,r4
 802c7b8:	10bfffc4 	addi	r2,r2,-1
 802c7bc:	1c20703a 	and	r16,r3,r16
 802c7c0:	1444703a 	and	r2,r2,r17
 802c7c4:	1404b03a 	or	r2,r2,r16
 802c7c8:	1004c03a 	cmpne	r2,r2,zero
 802c7cc:	1584b03a 	or	r2,r2,r22
 802c7d0:	11003fcc 	andi	r4,r2,255
 802c7d4:	01402004 	movi	r5,128
 802c7d8:	a807883a 	mov	r3,r21
 802c7dc:	2140131e 	bne	r4,r5,802c82c <__pack_d+0x210>
 802c7e0:	1140400c 	andi	r5,r2,256
 802c7e4:	28000426 	beq	r5,zero,802c7f8 <__pack_d+0x1dc>
 802c7e8:	1109883a 	add	r4,r2,r4
 802c7ec:	2085803a 	cmpltu	r2,r4,r2
 802c7f0:	1547883a 	add	r3,r2,r21
 802c7f4:	2005883a 	mov	r2,r4
 802c7f8:	1808963a 	slli	r4,r3,24
 802c7fc:	1004d23a 	srli	r2,r2,8
 802c800:	1820913a 	slli	r16,r3,4
 802c804:	01440034 	movhi	r5,4096
 802c808:	297fffc4 	addi	r5,r5,-1
 802c80c:	2084b03a 	or	r2,r4,r2
 802c810:	8020d33a 	srli	r16,r16,12
 802c814:	01000044 	movi	r4,1
 802c818:	28ffaf36 	bltu	r5,r3,802c6d8 <__pack_d+0xbc>
 802c81c:	0009883a 	mov	r4,zero
 802c820:	003fad06 	br	802c6d8 <__pack_d+0xbc>
 802c824:	0005883a 	mov	r2,zero
 802c828:	0007883a 	mov	r3,zero
 802c82c:	11001fc4 	addi	r4,r2,127
 802c830:	2085803a 	cmpltu	r2,r4,r2
 802c834:	10c7883a 	add	r3,r2,r3
 802c838:	2005883a 	mov	r2,r4
 802c83c:	003fee06 	br	802c7f8 <__pack_d+0x1dc>

0802c840 <__unpack_d>:
 802c840:	21800117 	ldw	r6,4(r4)
 802c844:	20c00017 	ldw	r3,0(r4)
 802c848:	3004d7fa 	srli	r2,r6,31
 802c84c:	3008d53a 	srli	r4,r6,20
 802c850:	28800115 	stw	r2,4(r5)
 802c854:	2101ffcc 	andi	r4,r4,2047
 802c858:	00800434 	movhi	r2,16
 802c85c:	10bfffc4 	addi	r2,r2,-1
 802c860:	3084703a 	and	r2,r6,r2
 802c864:	20001a1e 	bne	r4,zero,802c8d0 <__unpack_d+0x90>
 802c868:	1888b03a 	or	r4,r3,r2
 802c86c:	20002626 	beq	r4,zero,802c908 <__unpack_d+0xc8>
 802c870:	1808d63a 	srli	r4,r3,24
 802c874:	1004923a 	slli	r2,r2,8
 802c878:	01bf0084 	movi	r6,-1022
 802c87c:	29800215 	stw	r6,8(r5)
 802c880:	2084b03a 	or	r2,r4,r2
 802c884:	010000c4 	movi	r4,3
 802c888:	29000015 	stw	r4,0(r5)
 802c88c:	02040034 	movhi	r8,4096
 802c890:	423fffc4 	addi	r8,r8,-1
 802c894:	1806923a 	slli	r3,r3,8
 802c898:	40801836 	bltu	r8,r2,802c8fc <__unpack_d+0xbc>
 802c89c:	013f0044 	movi	r4,-1023
 802c8a0:	18cd883a 	add	r6,r3,r3
 802c8a4:	30c7803a 	cmpltu	r3,r6,r3
 802c8a8:	1085883a 	add	r2,r2,r2
 802c8ac:	1885883a 	add	r2,r3,r2
 802c8b0:	200f883a 	mov	r7,r4
 802c8b4:	3007883a 	mov	r3,r6
 802c8b8:	213fffc4 	addi	r4,r4,-1
 802c8bc:	40bff82e 	bgeu	r8,r2,802c8a0 <__unpack_d+0x60>
 802c8c0:	29c00215 	stw	r7,8(r5)
 802c8c4:	28c00315 	stw	r3,12(r5)
 802c8c8:	28800415 	stw	r2,16(r5)
 802c8cc:	f800283a 	ret
 802c8d0:	01c1ffc4 	movi	r7,2047
 802c8d4:	21c00f26 	beq	r4,r7,802c914 <__unpack_d+0xd4>
 802c8d8:	180cd63a 	srli	r6,r3,24
 802c8dc:	1004923a 	slli	r2,r2,8
 802c8e0:	213f0044 	addi	r4,r4,-1023
 802c8e4:	1806923a 	slli	r3,r3,8
 802c8e8:	3084b03a 	or	r2,r6,r2
 802c8ec:	29000215 	stw	r4,8(r5)
 802c8f0:	010000c4 	movi	r4,3
 802c8f4:	10840034 	orhi	r2,r2,4096
 802c8f8:	29000015 	stw	r4,0(r5)
 802c8fc:	28c00315 	stw	r3,12(r5)
 802c900:	28800415 	stw	r2,16(r5)
 802c904:	f800283a 	ret
 802c908:	00800084 	movi	r2,2
 802c90c:	28800015 	stw	r2,0(r5)
 802c910:	f800283a 	ret
 802c914:	1888b03a 	or	r4,r3,r2
 802c918:	20000526 	beq	r4,zero,802c930 <__unpack_d+0xf0>
 802c91c:	3180022c 	andhi	r6,r6,8
 802c920:	30000626 	beq	r6,zero,802c93c <__unpack_d+0xfc>
 802c924:	01000044 	movi	r4,1
 802c928:	29000015 	stw	r4,0(r5)
 802c92c:	003ff306 	br	802c8fc <__unpack_d+0xbc>
 802c930:	00800104 	movi	r2,4
 802c934:	28800015 	stw	r2,0(r5)
 802c938:	f800283a 	ret
 802c93c:	28000015 	stw	zero,0(r5)
 802c940:	003fee06 	br	802c8fc <__unpack_d+0xbc>

0802c944 <__lshrdi3>:
 802c944:	2005883a 	mov	r2,r4
 802c948:	2807883a 	mov	r3,r5
 802c94c:	30000826 	beq	r6,zero,802c970 <__lshrdi3+0x2c>
 802c950:	01000804 	movi	r4,32
 802c954:	2189c83a 	sub	r4,r4,r6
 802c958:	0100060e 	bge	zero,r4,802c974 <__lshrdi3+0x30>
 802c95c:	1184d83a 	srl	r2,r2,r6
 802c960:	2908983a 	sll	r4,r5,r4
 802c964:	298cd83a 	srl	r6,r5,r6
 802c968:	2084b03a 	or	r2,r4,r2
 802c96c:	3007883a 	mov	r3,r6
 802c970:	f800283a 	ret
 802c974:	0105c83a 	sub	r2,zero,r4
 802c978:	000d883a 	mov	r6,zero
 802c97c:	2884d83a 	srl	r2,r5,r2
 802c980:	3007883a 	mov	r3,r6
 802c984:	003ffa06 	br	802c970 <__lshrdi3+0x2c>

0802c988 <__ashldi3>:
 802c988:	2005883a 	mov	r2,r4
 802c98c:	2807883a 	mov	r3,r5
 802c990:	30000826 	beq	r6,zero,802c9b4 <__ashldi3+0x2c>
 802c994:	01000804 	movi	r4,32
 802c998:	2189c83a 	sub	r4,r4,r6
 802c99c:	0100060e 	bge	zero,r4,802c9b8 <__ashldi3+0x30>
 802c9a0:	1108d83a 	srl	r4,r2,r4
 802c9a4:	2986983a 	sll	r3,r5,r6
 802c9a8:	118c983a 	sll	r6,r2,r6
 802c9ac:	20c6b03a 	or	r3,r4,r3
 802c9b0:	3005883a 	mov	r2,r6
 802c9b4:	f800283a 	ret
 802c9b8:	0107c83a 	sub	r3,zero,r4
 802c9bc:	000d883a 	mov	r6,zero
 802c9c0:	10c6983a 	sll	r3,r2,r3
 802c9c4:	3005883a 	mov	r2,r6
 802c9c8:	003ffa06 	br	802c9b4 <__ashldi3+0x2c>

0802c9cc <exit>:
 802c9cc:	defffe04 	addi	sp,sp,-8
 802c9d0:	000b883a 	mov	r5,zero
 802c9d4:	dc000015 	stw	r16,0(sp)
 802c9d8:	dfc00115 	stw	ra,4(sp)
 802c9dc:	2021883a 	mov	r16,r4
 802c9e0:	80335200 	call	8033520 <__call_exitprocs>
 802c9e4:	00820134 	movhi	r2,2052
 802c9e8:	108c4404 	addi	r2,r2,12560
 802c9ec:	11000017 	ldw	r4,0(r2)
 802c9f0:	20800f17 	ldw	r2,60(r4)
 802c9f4:	10000126 	beq	r2,zero,802c9fc <exit+0x30>
 802c9f8:	103ee83a 	callr	r2
 802c9fc:	8009883a 	mov	r4,r16
 802ca00:	803bed80 	call	803bed8 <_exit>

0802ca04 <_fclose_r>:
 802ca04:	defffc04 	addi	sp,sp,-16
 802ca08:	dc400115 	stw	r17,4(sp)
 802ca0c:	dc000015 	stw	r16,0(sp)
 802ca10:	dfc00315 	stw	ra,12(sp)
 802ca14:	dc800215 	stw	r18,8(sp)
 802ca18:	2821883a 	mov	r16,r5
 802ca1c:	2023883a 	mov	r17,r4
 802ca20:	28003426 	beq	r5,zero,802caf4 <_fclose_r+0xf0>
 802ca24:	802d0180 	call	802d018 <__sfp_lock_acquire>
 802ca28:	88000226 	beq	r17,zero,802ca34 <_fclose_r+0x30>
 802ca2c:	88800e17 	ldw	r2,56(r17)
 802ca30:	10003826 	beq	r2,zero,802cb14 <_fclose_r+0x110>
 802ca34:	8080030f 	ldh	r2,12(r16)
 802ca38:	10002526 	beq	r2,zero,802cad0 <_fclose_r+0xcc>
 802ca3c:	8809883a 	mov	r4,r17
 802ca40:	800b883a 	mov	r5,r16
 802ca44:	802cb540 	call	802cb54 <_fflush_r>
 802ca48:	1025883a 	mov	r18,r2
 802ca4c:	80800b17 	ldw	r2,44(r16)
 802ca50:	10000426 	beq	r2,zero,802ca64 <_fclose_r+0x60>
 802ca54:	81400717 	ldw	r5,28(r16)
 802ca58:	8809883a 	mov	r4,r17
 802ca5c:	103ee83a 	callr	r2
 802ca60:	10003516 	blt	r2,zero,802cb38 <_fclose_r+0x134>
 802ca64:	8080030b 	ldhu	r2,12(r16)
 802ca68:	1080200c 	andi	r2,r2,128
 802ca6c:	10bfffcc 	andi	r2,r2,65535
 802ca70:	10a0001c 	xori	r2,r2,32768
 802ca74:	10a00004 	addi	r2,r2,-32768
 802ca78:	10002b1e 	bne	r2,zero,802cb28 <_fclose_r+0x124>
 802ca7c:	81400c17 	ldw	r5,48(r16)
 802ca80:	28000526 	beq	r5,zero,802ca98 <_fclose_r+0x94>
 802ca84:	80801004 	addi	r2,r16,64
 802ca88:	28800226 	beq	r5,r2,802ca94 <_fclose_r+0x90>
 802ca8c:	8809883a 	mov	r4,r17
 802ca90:	802d5a80 	call	802d5a8 <_free_r>
 802ca94:	80000c15 	stw	zero,48(r16)
 802ca98:	81401117 	ldw	r5,68(r16)
 802ca9c:	28000326 	beq	r5,zero,802caac <_fclose_r+0xa8>
 802caa0:	8809883a 	mov	r4,r17
 802caa4:	802d5a80 	call	802d5a8 <_free_r>
 802caa8:	80001115 	stw	zero,68(r16)
 802caac:	8000030d 	sth	zero,12(r16)
 802cab0:	802d01c0 	call	802d01c <__sfp_lock_release>
 802cab4:	9005883a 	mov	r2,r18
 802cab8:	dfc00317 	ldw	ra,12(sp)
 802cabc:	dc800217 	ldw	r18,8(sp)
 802cac0:	dc400117 	ldw	r17,4(sp)
 802cac4:	dc000017 	ldw	r16,0(sp)
 802cac8:	dec00404 	addi	sp,sp,16
 802cacc:	f800283a 	ret
 802cad0:	802d01c0 	call	802d01c <__sfp_lock_release>
 802cad4:	0025883a 	mov	r18,zero
 802cad8:	9005883a 	mov	r2,r18
 802cadc:	dfc00317 	ldw	ra,12(sp)
 802cae0:	dc800217 	ldw	r18,8(sp)
 802cae4:	dc400117 	ldw	r17,4(sp)
 802cae8:	dc000017 	ldw	r16,0(sp)
 802caec:	dec00404 	addi	sp,sp,16
 802caf0:	f800283a 	ret
 802caf4:	0025883a 	mov	r18,zero
 802caf8:	9005883a 	mov	r2,r18
 802cafc:	dfc00317 	ldw	ra,12(sp)
 802cb00:	dc800217 	ldw	r18,8(sp)
 802cb04:	dc400117 	ldw	r17,4(sp)
 802cb08:	dc000017 	ldw	r16,0(sp)
 802cb0c:	dec00404 	addi	sp,sp,16
 802cb10:	f800283a 	ret
 802cb14:	8809883a 	mov	r4,r17
 802cb18:	802ce100 	call	802ce10 <__sinit>
 802cb1c:	8080030f 	ldh	r2,12(r16)
 802cb20:	103fc61e 	bne	r2,zero,802ca3c <_fclose_r+0x38>
 802cb24:	003fea06 	br	802cad0 <_fclose_r+0xcc>
 802cb28:	81400417 	ldw	r5,16(r16)
 802cb2c:	8809883a 	mov	r4,r17
 802cb30:	802d5a80 	call	802d5a8 <_free_r>
 802cb34:	003fd106 	br	802ca7c <_fclose_r+0x78>
 802cb38:	04bfffc4 	movi	r18,-1
 802cb3c:	003fc906 	br	802ca64 <_fclose_r+0x60>

0802cb40 <fclose>:
 802cb40:	00820134 	movhi	r2,2052
 802cb44:	108c4504 	addi	r2,r2,12564
 802cb48:	200b883a 	mov	r5,r4
 802cb4c:	11000017 	ldw	r4,0(r2)
 802cb50:	802ca041 	jmpi	802ca04 <_fclose_r>

0802cb54 <_fflush_r>:
 802cb54:	defffb04 	addi	sp,sp,-20
 802cb58:	dcc00315 	stw	r19,12(sp)
 802cb5c:	dc400115 	stw	r17,4(sp)
 802cb60:	dfc00415 	stw	ra,16(sp)
 802cb64:	dc800215 	stw	r18,8(sp)
 802cb68:	dc000015 	stw	r16,0(sp)
 802cb6c:	2027883a 	mov	r19,r4
 802cb70:	2823883a 	mov	r17,r5
 802cb74:	20000226 	beq	r4,zero,802cb80 <_fflush_r+0x2c>
 802cb78:	20800e17 	ldw	r2,56(r4)
 802cb7c:	10005726 	beq	r2,zero,802ccdc <_fflush_r+0x188>
 802cb80:	8880030b 	ldhu	r2,12(r17)
 802cb84:	10c0020c 	andi	r3,r2,8
 802cb88:	18ffffcc 	andi	r3,r3,65535
 802cb8c:	18e0001c 	xori	r3,r3,32768
 802cb90:	18e00004 	addi	r3,r3,-32768
 802cb94:	1800311e 	bne	r3,zero,802cc5c <_fflush_r+0x108>
 802cb98:	89000117 	ldw	r4,4(r17)
 802cb9c:	10c20014 	ori	r3,r2,2048
 802cba0:	88c0030d 	sth	r3,12(r17)
 802cba4:	180b883a 	mov	r5,r3
 802cba8:	0100520e 	bge	zero,r4,802ccf4 <_fflush_r+0x1a0>
 802cbac:	88c00a17 	ldw	r3,40(r17)
 802cbb0:	18002226 	beq	r3,zero,802cc3c <_fflush_r+0xe8>
 802cbb4:	1084000c 	andi	r2,r2,4096
 802cbb8:	10bfffcc 	andi	r2,r2,65535
 802cbbc:	10a0001c 	xori	r2,r2,32768
 802cbc0:	10a00004 	addi	r2,r2,-32768
 802cbc4:	10004e26 	beq	r2,zero,802cd00 <_fflush_r+0x1ac>
 802cbc8:	8c001417 	ldw	r16,80(r17)
 802cbcc:	2940010c 	andi	r5,r5,4
 802cbd0:	297fffcc 	andi	r5,r5,65535
 802cbd4:	2960001c 	xori	r5,r5,32768
 802cbd8:	29600004 	addi	r5,r5,-32768
 802cbdc:	28000626 	beq	r5,zero,802cbf8 <_fflush_r+0xa4>
 802cbe0:	89000117 	ldw	r4,4(r17)
 802cbe4:	88800c17 	ldw	r2,48(r17)
 802cbe8:	8121c83a 	sub	r16,r16,r4
 802cbec:	10000226 	beq	r2,zero,802cbf8 <_fflush_r+0xa4>
 802cbf0:	88800f17 	ldw	r2,60(r17)
 802cbf4:	80a1c83a 	sub	r16,r16,r2
 802cbf8:	89400717 	ldw	r5,28(r17)
 802cbfc:	9809883a 	mov	r4,r19
 802cc00:	800d883a 	mov	r6,r16
 802cc04:	000f883a 	mov	r7,zero
 802cc08:	183ee83a 	callr	r3
 802cc0c:	8080281e 	bne	r16,r2,802ccb0 <_fflush_r+0x15c>
 802cc10:	8880030b 	ldhu	r2,12(r17)
 802cc14:	88c00417 	ldw	r3,16(r17)
 802cc18:	88000115 	stw	zero,4(r17)
 802cc1c:	113dffcc 	andi	r4,r2,63487
 802cc20:	1084000c 	andi	r2,r2,4096
 802cc24:	10bfffcc 	andi	r2,r2,65535
 802cc28:	10a0001c 	xori	r2,r2,32768
 802cc2c:	8900030d 	sth	r4,12(r17)
 802cc30:	88c00015 	stw	r3,0(r17)
 802cc34:	10a00004 	addi	r2,r2,-32768
 802cc38:	10002c1e 	bne	r2,zero,802ccec <_fflush_r+0x198>
 802cc3c:	0005883a 	mov	r2,zero
 802cc40:	dfc00417 	ldw	ra,16(sp)
 802cc44:	dcc00317 	ldw	r19,12(sp)
 802cc48:	dc800217 	ldw	r18,8(sp)
 802cc4c:	dc400117 	ldw	r17,4(sp)
 802cc50:	dc000017 	ldw	r16,0(sp)
 802cc54:	dec00504 	addi	sp,sp,20
 802cc58:	f800283a 	ret
 802cc5c:	8c800417 	ldw	r18,16(r17)
 802cc60:	903ff626 	beq	r18,zero,802cc3c <_fflush_r+0xe8>
 802cc64:	8c000017 	ldw	r16,0(r17)
 802cc68:	108000cc 	andi	r2,r2,3
 802cc6c:	8c800015 	stw	r18,0(r17)
 802cc70:	84a1c83a 	sub	r16,r16,r18
 802cc74:	10001b1e 	bne	r2,zero,802cce4 <_fflush_r+0x190>
 802cc78:	88800517 	ldw	r2,20(r17)
 802cc7c:	88800215 	stw	r2,8(r17)
 802cc80:	04000316 	blt	zero,r16,802cc90 <_fflush_r+0x13c>
 802cc84:	003fed06 	br	802cc3c <_fflush_r+0xe8>
 802cc88:	90a5883a 	add	r18,r18,r2
 802cc8c:	043feb0e 	bge	zero,r16,802cc3c <_fflush_r+0xe8>
 802cc90:	88800917 	ldw	r2,36(r17)
 802cc94:	89400717 	ldw	r5,28(r17)
 802cc98:	800f883a 	mov	r7,r16
 802cc9c:	900d883a 	mov	r6,r18
 802cca0:	9809883a 	mov	r4,r19
 802cca4:	103ee83a 	callr	r2
 802cca8:	80a1c83a 	sub	r16,r16,r2
 802ccac:	00bff616 	blt	zero,r2,802cc88 <_fflush_r+0x134>
 802ccb0:	88c0030b 	ldhu	r3,12(r17)
 802ccb4:	00bfffc4 	movi	r2,-1
 802ccb8:	18c01014 	ori	r3,r3,64
 802ccbc:	88c0030d 	sth	r3,12(r17)
 802ccc0:	dfc00417 	ldw	ra,16(sp)
 802ccc4:	dcc00317 	ldw	r19,12(sp)
 802ccc8:	dc800217 	ldw	r18,8(sp)
 802cccc:	dc400117 	ldw	r17,4(sp)
 802ccd0:	dc000017 	ldw	r16,0(sp)
 802ccd4:	dec00504 	addi	sp,sp,20
 802ccd8:	f800283a 	ret
 802ccdc:	802ce100 	call	802ce10 <__sinit>
 802cce0:	003fa706 	br	802cb80 <_fflush_r+0x2c>
 802cce4:	0005883a 	mov	r2,zero
 802cce8:	003fe406 	br	802cc7c <_fflush_r+0x128>
 802ccec:	8c001415 	stw	r16,80(r17)
 802ccf0:	003fd206 	br	802cc3c <_fflush_r+0xe8>
 802ccf4:	88c00f17 	ldw	r3,60(r17)
 802ccf8:	00ffac16 	blt	zero,r3,802cbac <_fflush_r+0x58>
 802ccfc:	003fcf06 	br	802cc3c <_fflush_r+0xe8>
 802cd00:	89400717 	ldw	r5,28(r17)
 802cd04:	9809883a 	mov	r4,r19
 802cd08:	000d883a 	mov	r6,zero
 802cd0c:	01c00044 	movi	r7,1
 802cd10:	183ee83a 	callr	r3
 802cd14:	1021883a 	mov	r16,r2
 802cd18:	00bfffc4 	movi	r2,-1
 802cd1c:	80800326 	beq	r16,r2,802cd2c <_fflush_r+0x1d8>
 802cd20:	8940030b 	ldhu	r5,12(r17)
 802cd24:	88c00a17 	ldw	r3,40(r17)
 802cd28:	003fa806 	br	802cbcc <_fflush_r+0x78>
 802cd2c:	98c00017 	ldw	r3,0(r19)
 802cd30:	00800744 	movi	r2,29
 802cd34:	18bfde1e 	bne	r3,r2,802ccb0 <_fflush_r+0x15c>
 802cd38:	003fc006 	br	802cc3c <_fflush_r+0xe8>

0802cd3c <fflush>:
 802cd3c:	200b883a 	mov	r5,r4
 802cd40:	20000426 	beq	r4,zero,802cd54 <fflush+0x18>
 802cd44:	00820134 	movhi	r2,2052
 802cd48:	108c4504 	addi	r2,r2,12564
 802cd4c:	11000017 	ldw	r4,0(r2)
 802cd50:	802cb541 	jmpi	802cb54 <_fflush_r>
 802cd54:	00820134 	movhi	r2,2052
 802cd58:	108c4404 	addi	r2,r2,12560
 802cd5c:	11000017 	ldw	r4,0(r2)
 802cd60:	014200f4 	movhi	r5,2051
 802cd64:	2972d504 	addi	r5,r5,-13484
 802cd68:	802df441 	jmpi	802df44 <_fwalk_reent>

0802cd6c <__fp_lock>:
 802cd6c:	0005883a 	mov	r2,zero
 802cd70:	f800283a 	ret

0802cd74 <__fp_unlock>:
 802cd74:	0005883a 	mov	r2,zero
 802cd78:	f800283a 	ret

0802cd7c <_cleanup_r>:
 802cd7c:	014200f4 	movhi	r5,2051
 802cd80:	2972d004 	addi	r5,r5,-13504
 802cd84:	802de9c1 	jmpi	802de9c <_fwalk>

0802cd88 <__sfmoreglue>:
 802cd88:	defffc04 	addi	sp,sp,-16
 802cd8c:	dc800215 	stw	r18,8(sp)
 802cd90:	2825883a 	mov	r18,r5
 802cd94:	dc000015 	stw	r16,0(sp)
 802cd98:	01401704 	movi	r5,92
 802cd9c:	2021883a 	mov	r16,r4
 802cda0:	9009883a 	mov	r4,r18
 802cda4:	dfc00315 	stw	ra,12(sp)
 802cda8:	dc400115 	stw	r17,4(sp)
 802cdac:	802c2180 	call	802c218 <__mulsi3>
 802cdb0:	8009883a 	mov	r4,r16
 802cdb4:	11400304 	addi	r5,r2,12
 802cdb8:	1023883a 	mov	r17,r2
 802cdbc:	802e42c0 	call	802e42c <_malloc_r>
 802cdc0:	1021883a 	mov	r16,r2
 802cdc4:	10000726 	beq	r2,zero,802cde4 <__sfmoreglue+0x5c>
 802cdc8:	11000304 	addi	r4,r2,12
 802cdcc:	10000015 	stw	zero,0(r2)
 802cdd0:	14800115 	stw	r18,4(r2)
 802cdd4:	11000215 	stw	r4,8(r2)
 802cdd8:	000b883a 	mov	r5,zero
 802cddc:	880d883a 	mov	r6,r17
 802cde0:	802ecf00 	call	802ecf0 <memset>
 802cde4:	8005883a 	mov	r2,r16
 802cde8:	dfc00317 	ldw	ra,12(sp)
 802cdec:	dc800217 	ldw	r18,8(sp)
 802cdf0:	dc400117 	ldw	r17,4(sp)
 802cdf4:	dc000017 	ldw	r16,0(sp)
 802cdf8:	dec00404 	addi	sp,sp,16
 802cdfc:	f800283a 	ret

0802ce00 <_cleanup>:
 802ce00:	00820134 	movhi	r2,2052
 802ce04:	108c4404 	addi	r2,r2,12560
 802ce08:	11000017 	ldw	r4,0(r2)
 802ce0c:	802cd7c1 	jmpi	802cd7c <_cleanup_r>

0802ce10 <__sinit>:
 802ce10:	20800e17 	ldw	r2,56(r4)
 802ce14:	1000401e 	bne	r2,zero,802cf18 <__sinit+0x108>
 802ce18:	21400117 	ldw	r5,4(r4)
 802ce1c:	018200f4 	movhi	r6,2051
 802ce20:	31b35f04 	addi	r6,r6,-12932
 802ce24:	20c00217 	ldw	r3,8(r4)
 802ce28:	21800f15 	stw	r6,60(r4)
 802ce2c:	2080bb04 	addi	r2,r4,748
 802ce30:	02400044 	movi	r9,1
 802ce34:	018000c4 	movi	r6,3
 802ce38:	2180b915 	stw	r6,740(r4)
 802ce3c:	2080ba15 	stw	r2,744(r4)
 802ce40:	22400e15 	stw	r9,56(r4)
 802ce44:	20800317 	ldw	r2,12(r4)
 802ce48:	2000b815 	stw	zero,736(r4)
 802ce4c:	020200f4 	movhi	r8,2051
 802ce50:	423d0704 	addi	r8,r8,-3044
 802ce54:	01c200f4 	movhi	r7,2051
 802ce58:	39fd1c04 	addi	r7,r7,-2960
 802ce5c:	018200f4 	movhi	r6,2051
 802ce60:	31bd3e04 	addi	r6,r6,-2824
 802ce64:	010200f4 	movhi	r4,2051
 802ce68:	213d5504 	addi	r4,r4,-2732
 802ce6c:	02800104 	movi	r10,4
 802ce70:	28000015 	stw	zero,0(r5)
 802ce74:	28000115 	stw	zero,4(r5)
 802ce78:	28000215 	stw	zero,8(r5)
 802ce7c:	2a80030d 	sth	r10,12(r5)
 802ce80:	2800038d 	sth	zero,14(r5)
 802ce84:	28000415 	stw	zero,16(r5)
 802ce88:	28000515 	stw	zero,20(r5)
 802ce8c:	28000615 	stw	zero,24(r5)
 802ce90:	29400715 	stw	r5,28(r5)
 802ce94:	2a000815 	stw	r8,32(r5)
 802ce98:	29c00915 	stw	r7,36(r5)
 802ce9c:	29800a15 	stw	r6,40(r5)
 802cea0:	29000b15 	stw	r4,44(r5)
 802cea4:	01400284 	movi	r5,10
 802cea8:	18000015 	stw	zero,0(r3)
 802ceac:	18000115 	stw	zero,4(r3)
 802ceb0:	18000215 	stw	zero,8(r3)
 802ceb4:	1940030d 	sth	r5,12(r3)
 802ceb8:	1a40038d 	sth	r9,14(r3)
 802cebc:	18000415 	stw	zero,16(r3)
 802cec0:	18000515 	stw	zero,20(r3)
 802cec4:	18000615 	stw	zero,24(r3)
 802cec8:	18c00715 	stw	r3,28(r3)
 802cecc:	1a000815 	stw	r8,32(r3)
 802ced0:	19c00915 	stw	r7,36(r3)
 802ced4:	19800a15 	stw	r6,40(r3)
 802ced8:	19000b15 	stw	r4,44(r3)
 802cedc:	00c00484 	movi	r3,18
 802cee0:	10c0030d 	sth	r3,12(r2)
 802cee4:	00c00084 	movi	r3,2
 802cee8:	10000015 	stw	zero,0(r2)
 802ceec:	10000115 	stw	zero,4(r2)
 802cef0:	10000215 	stw	zero,8(r2)
 802cef4:	10c0038d 	sth	r3,14(r2)
 802cef8:	10000415 	stw	zero,16(r2)
 802cefc:	10000515 	stw	zero,20(r2)
 802cf00:	10000615 	stw	zero,24(r2)
 802cf04:	10800715 	stw	r2,28(r2)
 802cf08:	12000815 	stw	r8,32(r2)
 802cf0c:	11c00915 	stw	r7,36(r2)
 802cf10:	11800a15 	stw	r6,40(r2)
 802cf14:	11000b15 	stw	r4,44(r2)
 802cf18:	f800283a 	ret

0802cf1c <__sfp>:
 802cf1c:	defffc04 	addi	sp,sp,-16
 802cf20:	00820134 	movhi	r2,2052
 802cf24:	108c4404 	addi	r2,r2,12560
 802cf28:	dc400115 	stw	r17,4(sp)
 802cf2c:	14400017 	ldw	r17,0(r2)
 802cf30:	dc800215 	stw	r18,8(sp)
 802cf34:	dfc00315 	stw	ra,12(sp)
 802cf38:	88800e17 	ldw	r2,56(r17)
 802cf3c:	dc000015 	stw	r16,0(sp)
 802cf40:	2025883a 	mov	r18,r4
 802cf44:	10002826 	beq	r2,zero,802cfe8 <__sfp+0xcc>
 802cf48:	8c40b804 	addi	r17,r17,736
 802cf4c:	043fffc4 	movi	r16,-1
 802cf50:	89400117 	ldw	r5,4(r17)
 802cf54:	88800217 	ldw	r2,8(r17)
 802cf58:	297fffc4 	addi	r5,r5,-1
 802cf5c:	28000a16 	blt	r5,zero,802cf88 <__sfp+0x6c>
 802cf60:	10c0030f 	ldh	r3,12(r2)
 802cf64:	18000c26 	beq	r3,zero,802cf98 <__sfp+0x7c>
 802cf68:	10c01a04 	addi	r3,r2,104
 802cf6c:	00000206 	br	802cf78 <__sfp+0x5c>
 802cf70:	19bfe90f 	ldh	r6,-92(r3)
 802cf74:	30000826 	beq	r6,zero,802cf98 <__sfp+0x7c>
 802cf78:	297fffc4 	addi	r5,r5,-1
 802cf7c:	18bffd04 	addi	r2,r3,-12
 802cf80:	18c01704 	addi	r3,r3,92
 802cf84:	2c3ffa1e 	bne	r5,r16,802cf70 <__sfp+0x54>
 802cf88:	88800017 	ldw	r2,0(r17)
 802cf8c:	10001926 	beq	r2,zero,802cff4 <__sfp+0xd8>
 802cf90:	1023883a 	mov	r17,r2
 802cf94:	003fee06 	br	802cf50 <__sfp+0x34>
 802cf98:	00ffffc4 	movi	r3,-1
 802cf9c:	10c0038d 	sth	r3,14(r2)
 802cfa0:	00c00044 	movi	r3,1
 802cfa4:	10c0030d 	sth	r3,12(r2)
 802cfa8:	10000015 	stw	zero,0(r2)
 802cfac:	10000215 	stw	zero,8(r2)
 802cfb0:	10000115 	stw	zero,4(r2)
 802cfb4:	10000415 	stw	zero,16(r2)
 802cfb8:	10000515 	stw	zero,20(r2)
 802cfbc:	10000615 	stw	zero,24(r2)
 802cfc0:	10000c15 	stw	zero,48(r2)
 802cfc4:	10000d15 	stw	zero,52(r2)
 802cfc8:	10001115 	stw	zero,68(r2)
 802cfcc:	10001215 	stw	zero,72(r2)
 802cfd0:	dfc00317 	ldw	ra,12(sp)
 802cfd4:	dc800217 	ldw	r18,8(sp)
 802cfd8:	dc400117 	ldw	r17,4(sp)
 802cfdc:	dc000017 	ldw	r16,0(sp)
 802cfe0:	dec00404 	addi	sp,sp,16
 802cfe4:	f800283a 	ret
 802cfe8:	8809883a 	mov	r4,r17
 802cfec:	802ce100 	call	802ce10 <__sinit>
 802cff0:	003fd506 	br	802cf48 <__sfp+0x2c>
 802cff4:	9009883a 	mov	r4,r18
 802cff8:	01400104 	movi	r5,4
 802cffc:	802cd880 	call	802cd88 <__sfmoreglue>
 802d000:	88800015 	stw	r2,0(r17)
 802d004:	103fe21e 	bne	r2,zero,802cf90 <__sfp+0x74>
 802d008:	00800304 	movi	r2,12
 802d00c:	90800015 	stw	r2,0(r18)
 802d010:	0005883a 	mov	r2,zero
 802d014:	003fee06 	br	802cfd0 <__sfp+0xb4>

0802d018 <__sfp_lock_acquire>:
 802d018:	f800283a 	ret

0802d01c <__sfp_lock_release>:
 802d01c:	f800283a 	ret

0802d020 <__sinit_lock_acquire>:
 802d020:	f800283a 	ret

0802d024 <__sinit_lock_release>:
 802d024:	f800283a 	ret

0802d028 <__fp_lock_all>:
 802d028:	00820134 	movhi	r2,2052
 802d02c:	108c4504 	addi	r2,r2,12564
 802d030:	11000017 	ldw	r4,0(r2)
 802d034:	014200f4 	movhi	r5,2051
 802d038:	29735b04 	addi	r5,r5,-12948
 802d03c:	802de9c1 	jmpi	802de9c <_fwalk>

0802d040 <__fp_unlock_all>:
 802d040:	00820134 	movhi	r2,2052
 802d044:	108c4504 	addi	r2,r2,12564
 802d048:	11000017 	ldw	r4,0(r2)
 802d04c:	014200f4 	movhi	r5,2051
 802d050:	29735d04 	addi	r5,r5,-12940
 802d054:	802de9c1 	jmpi	802de9c <_fwalk>

0802d058 <_fopen_r>:
 802d058:	defffa04 	addi	sp,sp,-24
 802d05c:	dcc00415 	stw	r19,16(sp)
 802d060:	2827883a 	mov	r19,r5
 802d064:	300b883a 	mov	r5,r6
 802d068:	d80d883a 	mov	r6,sp
 802d06c:	dc800315 	stw	r18,12(sp)
 802d070:	dc400215 	stw	r17,8(sp)
 802d074:	dfc00515 	stw	ra,20(sp)
 802d078:	dc000115 	stw	r16,4(sp)
 802d07c:	2025883a 	mov	r18,r4
 802d080:	80350500 	call	8035050 <__sflags>
 802d084:	1023883a 	mov	r17,r2
 802d088:	10002926 	beq	r2,zero,802d130 <_fopen_r+0xd8>
 802d08c:	9009883a 	mov	r4,r18
 802d090:	802cf1c0 	call	802cf1c <__sfp>
 802d094:	1021883a 	mov	r16,r2
 802d098:	10002526 	beq	r2,zero,802d130 <_fopen_r+0xd8>
 802d09c:	d9800017 	ldw	r6,0(sp)
 802d0a0:	9009883a 	mov	r4,r18
 802d0a4:	980b883a 	mov	r5,r19
 802d0a8:	01c06d84 	movi	r7,438
 802d0ac:	802edcc0 	call	802edcc <_open_r>
 802d0b0:	10001c16 	blt	r2,zero,802d124 <_fopen_r+0xcc>
 802d0b4:	8080038d 	sth	r2,14(r16)
 802d0b8:	008200f4 	movhi	r2,2051
 802d0bc:	10bd0704 	addi	r2,r2,-3044
 802d0c0:	80800815 	stw	r2,32(r16)
 802d0c4:	008200f4 	movhi	r2,2051
 802d0c8:	10bd1c04 	addi	r2,r2,-2960
 802d0cc:	80800915 	stw	r2,36(r16)
 802d0d0:	008200f4 	movhi	r2,2051
 802d0d4:	10bd3e04 	addi	r2,r2,-2824
 802d0d8:	88c0400c 	andi	r3,r17,256
 802d0dc:	80800a15 	stw	r2,40(r16)
 802d0e0:	008200f4 	movhi	r2,2051
 802d0e4:	10bd5504 	addi	r2,r2,-2732
 802d0e8:	80800b15 	stw	r2,44(r16)
 802d0ec:	18bfffcc 	andi	r2,r3,65535
 802d0f0:	10a0001c 	xori	r2,r2,32768
 802d0f4:	8440030d 	sth	r17,12(r16)
 802d0f8:	84000715 	stw	r16,28(r16)
 802d0fc:	10a00004 	addi	r2,r2,-32768
 802d100:	1000141e 	bne	r2,zero,802d154 <_fopen_r+0xfc>
 802d104:	8005883a 	mov	r2,r16
 802d108:	dfc00517 	ldw	ra,20(sp)
 802d10c:	dcc00417 	ldw	r19,16(sp)
 802d110:	dc800317 	ldw	r18,12(sp)
 802d114:	dc400217 	ldw	r17,8(sp)
 802d118:	dc000117 	ldw	r16,4(sp)
 802d11c:	dec00604 	addi	sp,sp,24
 802d120:	f800283a 	ret
 802d124:	802d0180 	call	802d018 <__sfp_lock_acquire>
 802d128:	8000030d 	sth	zero,12(r16)
 802d12c:	802d01c0 	call	802d01c <__sfp_lock_release>
 802d130:	0021883a 	mov	r16,zero
 802d134:	8005883a 	mov	r2,r16
 802d138:	dfc00517 	ldw	ra,20(sp)
 802d13c:	dcc00417 	ldw	r19,16(sp)
 802d140:	dc800317 	ldw	r18,12(sp)
 802d144:	dc400217 	ldw	r17,8(sp)
 802d148:	dc000117 	ldw	r16,4(sp)
 802d14c:	dec00604 	addi	sp,sp,24
 802d150:	f800283a 	ret
 802d154:	9009883a 	mov	r4,r18
 802d158:	800b883a 	mov	r5,r16
 802d15c:	000d883a 	mov	r6,zero
 802d160:	01c00084 	movi	r7,2
 802d164:	802d8780 	call	802d878 <_fseek_r>
 802d168:	8005883a 	mov	r2,r16
 802d16c:	dfc00517 	ldw	ra,20(sp)
 802d170:	dcc00417 	ldw	r19,16(sp)
 802d174:	dc800317 	ldw	r18,12(sp)
 802d178:	dc400217 	ldw	r17,8(sp)
 802d17c:	dc000117 	ldw	r16,4(sp)
 802d180:	dec00604 	addi	sp,sp,24
 802d184:	f800283a 	ret

0802d188 <fopen>:
 802d188:	00c20134 	movhi	r3,2052
 802d18c:	18cc4504 	addi	r3,r3,12564
 802d190:	2005883a 	mov	r2,r4
 802d194:	19000017 	ldw	r4,0(r3)
 802d198:	280d883a 	mov	r6,r5
 802d19c:	100b883a 	mov	r5,r2
 802d1a0:	802d0581 	jmpi	802d058 <_fopen_r>

0802d1a4 <_fprintf_r>:
 802d1a4:	defffe04 	addi	sp,sp,-8
 802d1a8:	2809883a 	mov	r4,r5
 802d1ac:	dfc00015 	stw	ra,0(sp)
 802d1b0:	d9c00115 	stw	r7,4(sp)
 802d1b4:	300b883a 	mov	r5,r6
 802d1b8:	d9800104 	addi	r6,sp,4
 802d1bc:	8031b940 	call	8031b94 <__vfprintf_internal>
 802d1c0:	dfc00017 	ldw	ra,0(sp)
 802d1c4:	dec00204 	addi	sp,sp,8
 802d1c8:	f800283a 	ret

0802d1cc <fprintf>:
 802d1cc:	defffd04 	addi	sp,sp,-12
 802d1d0:	dfc00015 	stw	ra,0(sp)
 802d1d4:	d9800115 	stw	r6,4(sp)
 802d1d8:	d9c00215 	stw	r7,8(sp)
 802d1dc:	d9800104 	addi	r6,sp,4
 802d1e0:	8031b940 	call	8031b94 <__vfprintf_internal>
 802d1e4:	dfc00017 	ldw	ra,0(sp)
 802d1e8:	dec00304 	addi	sp,sp,12
 802d1ec:	f800283a 	ret

0802d1f0 <_fread_r>:
 802d1f0:	defff504 	addi	sp,sp,-44
 802d1f4:	dd000515 	stw	r20,20(sp)
 802d1f8:	dcc00415 	stw	r19,16(sp)
 802d1fc:	2029883a 	mov	r20,r4
 802d200:	2827883a 	mov	r19,r5
 802d204:	3809883a 	mov	r4,r7
 802d208:	300b883a 	mov	r5,r6
 802d20c:	ddc00815 	stw	r23,32(sp)
 802d210:	dd800715 	stw	r22,28(sp)
 802d214:	dd400615 	stw	r21,24(sp)
 802d218:	dc000115 	stw	r16,4(sp)
 802d21c:	dfc00a15 	stw	ra,40(sp)
 802d220:	df000915 	stw	fp,36(sp)
 802d224:	dc800315 	stw	r18,12(sp)
 802d228:	dc400215 	stw	r17,8(sp)
 802d22c:	302f883a 	mov	r23,r6
 802d230:	382b883a 	mov	r21,r7
 802d234:	802c2180 	call	802c218 <__mulsi3>
 802d238:	102d883a 	mov	r22,r2
 802d23c:	dc000b17 	ldw	r16,44(sp)
 802d240:	10002e26 	beq	r2,zero,802d2fc <_fread_r+0x10c>
 802d244:	a0000226 	beq	r20,zero,802d250 <_fread_r+0x60>
 802d248:	a0800e17 	ldw	r2,56(r20)
 802d24c:	10006726 	beq	r2,zero,802d3ec <_fread_r+0x1fc>
 802d250:	84400117 	ldw	r17,4(r16)
 802d254:	88002b16 	blt	r17,zero,802d304 <_fread_r+0x114>
 802d258:	8080030b 	ldhu	r2,12(r16)
 802d25c:	8807883a 	mov	r3,r17
 802d260:	1080008c 	andi	r2,r2,2
 802d264:	10bfffcc 	andi	r2,r2,65535
 802d268:	10a0001c 	xori	r2,r2,32768
 802d26c:	10a00004 	addi	r2,r2,-32768
 802d270:	10002d1e 	bne	r2,zero,802d328 <_fread_r+0x138>
 802d274:	b025883a 	mov	r18,r22
 802d278:	00000106 	br	802d280 <_fread_r+0x90>
 802d27c:	84400117 	ldw	r17,4(r16)
 802d280:	9809883a 	mov	r4,r19
 802d284:	880d883a 	mov	r6,r17
 802d288:	81400017 	ldw	r5,0(r16)
 802d28c:	8c805c2e 	bgeu	r17,r18,802d400 <_fread_r+0x210>
 802d290:	802ebb00 	call	802ebb0 <memcpy>
 802d294:	80800017 	ldw	r2,0(r16)
 802d298:	9c67883a 	add	r19,r19,r17
 802d29c:	9465c83a 	sub	r18,r18,r17
 802d2a0:	1463883a 	add	r17,r2,r17
 802d2a4:	a009883a 	mov	r4,r20
 802d2a8:	800b883a 	mov	r5,r16
 802d2ac:	84400015 	stw	r17,0(r16)
 802d2b0:	802ef540 	call	802ef54 <__srefill_r>
 802d2b4:	103ff126 	beq	r2,zero,802d27c <_fread_r+0x8c>
 802d2b8:	b489c83a 	sub	r4,r22,r18
 802d2bc:	b80b883a 	mov	r5,r23
 802d2c0:	802c2080 	call	802c208 <__udivsi3>
 802d2c4:	102b883a 	mov	r21,r2
 802d2c8:	a805883a 	mov	r2,r21
 802d2cc:	dfc00a17 	ldw	ra,40(sp)
 802d2d0:	df000917 	ldw	fp,36(sp)
 802d2d4:	ddc00817 	ldw	r23,32(sp)
 802d2d8:	dd800717 	ldw	r22,28(sp)
 802d2dc:	dd400617 	ldw	r21,24(sp)
 802d2e0:	dd000517 	ldw	r20,20(sp)
 802d2e4:	dcc00417 	ldw	r19,16(sp)
 802d2e8:	dc800317 	ldw	r18,12(sp)
 802d2ec:	dc400217 	ldw	r17,8(sp)
 802d2f0:	dc000117 	ldw	r16,4(sp)
 802d2f4:	dec00b04 	addi	sp,sp,44
 802d2f8:	f800283a 	ret
 802d2fc:	002b883a 	mov	r21,zero
 802d300:	003ff106 	br	802d2c8 <_fread_r+0xd8>
 802d304:	8080030b 	ldhu	r2,12(r16)
 802d308:	80000115 	stw	zero,4(r16)
 802d30c:	0007883a 	mov	r3,zero
 802d310:	1080008c 	andi	r2,r2,2
 802d314:	10bfffcc 	andi	r2,r2,65535
 802d318:	10a0001c 	xori	r2,r2,32768
 802d31c:	10a00004 	addi	r2,r2,-32768
 802d320:	0023883a 	mov	r17,zero
 802d324:	103fd326 	beq	r2,zero,802d274 <_fread_r+0x84>
 802d328:	1823883a 	mov	r17,r3
 802d32c:	b0c0012e 	bgeu	r22,r3,802d334 <_fread_r+0x144>
 802d330:	b023883a 	mov	r17,r22
 802d334:	81400017 	ldw	r5,0(r16)
 802d338:	9809883a 	mov	r4,r19
 802d33c:	880d883a 	mov	r6,r17
 802d340:	802ebb00 	call	802ebb0 <memcpy>
 802d344:	80800117 	ldw	r2,4(r16)
 802d348:	84800017 	ldw	r18,0(r16)
 802d34c:	81400c17 	ldw	r5,48(r16)
 802d350:	1445c83a 	sub	r2,r2,r17
 802d354:	9465883a 	add	r18,r18,r17
 802d358:	84800015 	stw	r18,0(r16)
 802d35c:	80800115 	stw	r2,4(r16)
 802d360:	9c67883a 	add	r19,r19,r17
 802d364:	b463c83a 	sub	r17,r22,r17
 802d368:	28002e26 	beq	r5,zero,802d424 <_fread_r+0x234>
 802d36c:	883fd626 	beq	r17,zero,802d2c8 <_fread_r+0xd8>
 802d370:	80801004 	addi	r2,r16,64
 802d374:	28800326 	beq	r5,r2,802d384 <_fread_r+0x194>
 802d378:	a009883a 	mov	r4,r20
 802d37c:	802d5a80 	call	802d5a8 <_free_r>
 802d380:	84800017 	ldw	r18,0(r16)
 802d384:	80000c15 	stw	zero,48(r16)
 802d388:	80c00517 	ldw	r3,20(r16)
 802d38c:	87000417 	ldw	fp,16(r16)
 802d390:	d8c00015 	stw	r3,0(sp)
 802d394:	00000106 	br	802d39c <_fread_r+0x1ac>
 802d398:	883fcb26 	beq	r17,zero,802d2c8 <_fread_r+0xd8>
 802d39c:	84c00415 	stw	r19,16(r16)
 802d3a0:	84400515 	stw	r17,20(r16)
 802d3a4:	84c00015 	stw	r19,0(r16)
 802d3a8:	a009883a 	mov	r4,r20
 802d3ac:	800b883a 	mov	r5,r16
 802d3b0:	802ef540 	call	802ef54 <__srefill_r>
 802d3b4:	d8c00017 	ldw	r3,0(sp)
 802d3b8:	81000117 	ldw	r4,4(r16)
 802d3bc:	87000415 	stw	fp,16(r16)
 802d3c0:	80c00515 	stw	r3,20(r16)
 802d3c4:	84800015 	stw	r18,0(r16)
 802d3c8:	80000115 	stw	zero,4(r16)
 802d3cc:	8923c83a 	sub	r17,r17,r4
 802d3d0:	9927883a 	add	r19,r19,r4
 802d3d4:	103ff026 	beq	r2,zero,802d398 <_fread_r+0x1a8>
 802d3d8:	b449c83a 	sub	r4,r22,r17
 802d3dc:	b80b883a 	mov	r5,r23
 802d3e0:	802c2080 	call	802c208 <__udivsi3>
 802d3e4:	102b883a 	mov	r21,r2
 802d3e8:	003fb706 	br	802d2c8 <_fread_r+0xd8>
 802d3ec:	a009883a 	mov	r4,r20
 802d3f0:	802ce100 	call	802ce10 <__sinit>
 802d3f4:	84400117 	ldw	r17,4(r16)
 802d3f8:	883f970e 	bge	r17,zero,802d258 <_fread_r+0x68>
 802d3fc:	003fc106 	br	802d304 <_fread_r+0x114>
 802d400:	900d883a 	mov	r6,r18
 802d404:	802ebb00 	call	802ebb0 <memcpy>
 802d408:	80800117 	ldw	r2,4(r16)
 802d40c:	80c00017 	ldw	r3,0(r16)
 802d410:	1485c83a 	sub	r2,r2,r18
 802d414:	1ca5883a 	add	r18,r3,r18
 802d418:	80800115 	stw	r2,4(r16)
 802d41c:	84800015 	stw	r18,0(r16)
 802d420:	003fa906 	br	802d2c8 <_fread_r+0xd8>
 802d424:	883fd81e 	bne	r17,zero,802d388 <_fread_r+0x198>
 802d428:	003fa706 	br	802d2c8 <_fread_r+0xd8>

0802d42c <fread>:
 802d42c:	00820134 	movhi	r2,2052
 802d430:	108c4504 	addi	r2,r2,12564
 802d434:	2011883a 	mov	r8,r4
 802d438:	11000017 	ldw	r4,0(r2)
 802d43c:	defffe04 	addi	sp,sp,-8
 802d440:	2807883a 	mov	r3,r5
 802d444:	3005883a 	mov	r2,r6
 802d448:	d9c00015 	stw	r7,0(sp)
 802d44c:	400b883a 	mov	r5,r8
 802d450:	180d883a 	mov	r6,r3
 802d454:	100f883a 	mov	r7,r2
 802d458:	dfc00115 	stw	ra,4(sp)
 802d45c:	802d1f00 	call	802d1f0 <_fread_r>
 802d460:	dfc00117 	ldw	ra,4(sp)
 802d464:	dec00204 	addi	sp,sp,8
 802d468:	f800283a 	ret

0802d46c <_malloc_trim_r>:
 802d46c:	defffb04 	addi	sp,sp,-20
 802d470:	dcc00315 	stw	r19,12(sp)
 802d474:	dc800215 	stw	r18,8(sp)
 802d478:	dc400115 	stw	r17,4(sp)
 802d47c:	dc000015 	stw	r16,0(sp)
 802d480:	2827883a 	mov	r19,r5
 802d484:	dfc00415 	stw	ra,16(sp)
 802d488:	04420134 	movhi	r17,2052
 802d48c:	8c46a404 	addi	r17,r17,6800
 802d490:	2021883a 	mov	r16,r4
 802d494:	803c5300 	call	803c530 <__malloc_lock>
 802d498:	88800217 	ldw	r2,8(r17)
 802d49c:	14800117 	ldw	r18,4(r2)
 802d4a0:	00bfff04 	movi	r2,-4
 802d4a4:	90a4703a 	and	r18,r18,r2
 802d4a8:	9083fbc4 	addi	r2,r18,4079
 802d4ac:	14e7c83a 	sub	r19,r2,r19
 802d4b0:	9826d33a 	srli	r19,r19,12
 802d4b4:	0083ffc4 	movi	r2,4095
 802d4b8:	9cffffc4 	addi	r19,r19,-1
 802d4bc:	9826933a 	slli	r19,r19,12
 802d4c0:	14c0060e 	bge	r2,r19,802d4dc <_malloc_trim_r+0x70>
 802d4c4:	8009883a 	mov	r4,r16
 802d4c8:	000b883a 	mov	r5,zero
 802d4cc:	802f18c0 	call	802f18c <_sbrk_r>
 802d4d0:	88c00217 	ldw	r3,8(r17)
 802d4d4:	1c87883a 	add	r3,r3,r18
 802d4d8:	10c00a26 	beq	r2,r3,802d504 <_malloc_trim_r+0x98>
 802d4dc:	8009883a 	mov	r4,r16
 802d4e0:	803c5500 	call	803c550 <__malloc_unlock>
 802d4e4:	0005883a 	mov	r2,zero
 802d4e8:	dfc00417 	ldw	ra,16(sp)
 802d4ec:	dcc00317 	ldw	r19,12(sp)
 802d4f0:	dc800217 	ldw	r18,8(sp)
 802d4f4:	dc400117 	ldw	r17,4(sp)
 802d4f8:	dc000017 	ldw	r16,0(sp)
 802d4fc:	dec00504 	addi	sp,sp,20
 802d500:	f800283a 	ret
 802d504:	8009883a 	mov	r4,r16
 802d508:	04cbc83a 	sub	r5,zero,r19
 802d50c:	802f18c0 	call	802f18c <_sbrk_r>
 802d510:	00ffffc4 	movi	r3,-1
 802d514:	10c01326 	beq	r2,r3,802d564 <_malloc_trim_r+0xf8>
 802d518:	00820134 	movhi	r2,2052
 802d51c:	10933704 	addi	r2,r2,19676
 802d520:	11000017 	ldw	r4,0(r2)
 802d524:	88c00217 	ldw	r3,8(r17)
 802d528:	94e5c83a 	sub	r18,r18,r19
 802d52c:	94800054 	ori	r18,r18,1
 802d530:	24e7c83a 	sub	r19,r4,r19
 802d534:	1c800115 	stw	r18,4(r3)
 802d538:	8009883a 	mov	r4,r16
 802d53c:	14c00015 	stw	r19,0(r2)
 802d540:	803c5500 	call	803c550 <__malloc_unlock>
 802d544:	00800044 	movi	r2,1
 802d548:	dfc00417 	ldw	ra,16(sp)
 802d54c:	dcc00317 	ldw	r19,12(sp)
 802d550:	dc800217 	ldw	r18,8(sp)
 802d554:	dc400117 	ldw	r17,4(sp)
 802d558:	dc000017 	ldw	r16,0(sp)
 802d55c:	dec00504 	addi	sp,sp,20
 802d560:	f800283a 	ret
 802d564:	8009883a 	mov	r4,r16
 802d568:	000b883a 	mov	r5,zero
 802d56c:	802f18c0 	call	802f18c <_sbrk_r>
 802d570:	88c00217 	ldw	r3,8(r17)
 802d574:	014003c4 	movi	r5,15
 802d578:	10c9c83a 	sub	r4,r2,r3
 802d57c:	293fd70e 	bge	r5,r4,802d4dc <_malloc_trim_r+0x70>
 802d580:	01420134 	movhi	r5,2052
 802d584:	294c4604 	addi	r5,r5,12568
 802d588:	29400017 	ldw	r5,0(r5)
 802d58c:	21000054 	ori	r4,r4,1
 802d590:	19000115 	stw	r4,4(r3)
 802d594:	1145c83a 	sub	r2,r2,r5
 802d598:	01420134 	movhi	r5,2052
 802d59c:	29533704 	addi	r5,r5,19676
 802d5a0:	28800015 	stw	r2,0(r5)
 802d5a4:	003fcd06 	br	802d4dc <_malloc_trim_r+0x70>

0802d5a8 <_free_r>:
 802d5a8:	defffd04 	addi	sp,sp,-12
 802d5ac:	dc400115 	stw	r17,4(sp)
 802d5b0:	dc000015 	stw	r16,0(sp)
 802d5b4:	dfc00215 	stw	ra,8(sp)
 802d5b8:	2821883a 	mov	r16,r5
 802d5bc:	2023883a 	mov	r17,r4
 802d5c0:	28004b26 	beq	r5,zero,802d6f0 <_free_r+0x148>
 802d5c4:	803c5300 	call	803c530 <__malloc_lock>
 802d5c8:	823fff17 	ldw	r8,-4(r16)
 802d5cc:	00bfff84 	movi	r2,-2
 802d5d0:	81bffe04 	addi	r6,r16,-8
 802d5d4:	4084703a 	and	r2,r8,r2
 802d5d8:	3087883a 	add	r3,r6,r2
 802d5dc:	01420134 	movhi	r5,2052
 802d5e0:	2946a404 	addi	r5,r5,6800
 802d5e4:	1a400117 	ldw	r9,4(r3)
 802d5e8:	29000217 	ldw	r4,8(r5)
 802d5ec:	01ffff04 	movi	r7,-4
 802d5f0:	49ce703a 	and	r7,r9,r7
 802d5f4:	20c06526 	beq	r4,r3,802d78c <_free_r+0x1e4>
 802d5f8:	19c00115 	stw	r7,4(r3)
 802d5fc:	4200004c 	andi	r8,r8,1
 802d600:	40003026 	beq	r8,zero,802d6c4 <_free_r+0x11c>
 802d604:	0009883a 	mov	r4,zero
 802d608:	19d1883a 	add	r8,r3,r7
 802d60c:	42000117 	ldw	r8,4(r8)
 802d610:	4200004c 	andi	r8,r8,1
 802d614:	4000061e 	bne	r8,zero,802d630 <_free_r+0x88>
 802d618:	11c5883a 	add	r2,r2,r7
 802d61c:	19c00217 	ldw	r7,8(r3)
 802d620:	20004e26 	beq	r4,zero,802d75c <_free_r+0x1b4>
 802d624:	18c00317 	ldw	r3,12(r3)
 802d628:	38c00315 	stw	r3,12(r7)
 802d62c:	19c00215 	stw	r7,8(r3)
 802d630:	11c00054 	ori	r7,r2,1
 802d634:	3087883a 	add	r3,r6,r2
 802d638:	31c00115 	stw	r7,4(r6)
 802d63c:	18800015 	stw	r2,0(r3)
 802d640:	20001a1e 	bne	r4,zero,802d6ac <_free_r+0x104>
 802d644:	00c07fc4 	movi	r3,511
 802d648:	18802e2e 	bgeu	r3,r2,802d704 <_free_r+0x15c>
 802d64c:	1006d27a 	srli	r3,r2,9
 802d650:	01000104 	movi	r4,4
 802d654:	20c06636 	bltu	r4,r3,802d7f0 <_free_r+0x248>
 802d658:	1008d1ba 	srli	r4,r2,6
 802d65c:	21000e04 	addi	r4,r4,56
 802d660:	210f883a 	add	r7,r4,r4
 802d664:	39cf883a 	add	r7,r7,r7
 802d668:	39cf883a 	add	r7,r7,r7
 802d66c:	29cf883a 	add	r7,r5,r7
 802d670:	38c00217 	ldw	r3,8(r7)
 802d674:	01420134 	movhi	r5,2052
 802d678:	2946a404 	addi	r5,r5,6800
 802d67c:	19c06126 	beq	r3,r7,802d804 <_free_r+0x25c>
 802d680:	013fff04 	movi	r4,-4
 802d684:	19400117 	ldw	r5,4(r3)
 802d688:	290a703a 	and	r5,r5,r4
 802d68c:	1140022e 	bgeu	r2,r5,802d698 <_free_r+0xf0>
 802d690:	18c00217 	ldw	r3,8(r3)
 802d694:	38fffb1e 	bne	r7,r3,802d684 <_free_r+0xdc>
 802d698:	18800317 	ldw	r2,12(r3)
 802d69c:	30800315 	stw	r2,12(r6)
 802d6a0:	30c00215 	stw	r3,8(r6)
 802d6a4:	11800215 	stw	r6,8(r2)
 802d6a8:	19800315 	stw	r6,12(r3)
 802d6ac:	8809883a 	mov	r4,r17
 802d6b0:	dfc00217 	ldw	ra,8(sp)
 802d6b4:	dc400117 	ldw	r17,4(sp)
 802d6b8:	dc000017 	ldw	r16,0(sp)
 802d6bc:	dec00304 	addi	sp,sp,12
 802d6c0:	803c5501 	jmpi	803c550 <__malloc_unlock>
 802d6c4:	813ffe17 	ldw	r4,-8(r16)
 802d6c8:	2a400204 	addi	r9,r5,8
 802d6cc:	310dc83a 	sub	r6,r6,r4
 802d6d0:	32000217 	ldw	r8,8(r6)
 802d6d4:	1105883a 	add	r2,r2,r4
 802d6d8:	42404326 	beq	r8,r9,802d7e8 <_free_r+0x240>
 802d6dc:	32400317 	ldw	r9,12(r6)
 802d6e0:	0009883a 	mov	r4,zero
 802d6e4:	42400315 	stw	r9,12(r8)
 802d6e8:	4a000215 	stw	r8,8(r9)
 802d6ec:	003fc606 	br	802d608 <_free_r+0x60>
 802d6f0:	dfc00217 	ldw	ra,8(sp)
 802d6f4:	dc400117 	ldw	r17,4(sp)
 802d6f8:	dc000017 	ldw	r16,0(sp)
 802d6fc:	dec00304 	addi	sp,sp,12
 802d700:	f800283a 	ret
 802d704:	1004d0fa 	srli	r2,r2,3
 802d708:	02000044 	movi	r8,1
 802d70c:	29c00117 	ldw	r7,4(r5)
 802d710:	1087883a 	add	r3,r2,r2
 802d714:	18c7883a 	add	r3,r3,r3
 802d718:	1005d0ba 	srai	r2,r2,2
 802d71c:	18c7883a 	add	r3,r3,r3
 802d720:	28c7883a 	add	r3,r5,r3
 802d724:	19000217 	ldw	r4,8(r3)
 802d728:	4084983a 	sll	r2,r8,r2
 802d72c:	30c00315 	stw	r3,12(r6)
 802d730:	31000215 	stw	r4,8(r6)
 802d734:	11c4b03a 	or	r2,r2,r7
 802d738:	21800315 	stw	r6,12(r4)
 802d73c:	8809883a 	mov	r4,r17
 802d740:	28800115 	stw	r2,4(r5)
 802d744:	19800215 	stw	r6,8(r3)
 802d748:	dfc00217 	ldw	ra,8(sp)
 802d74c:	dc400117 	ldw	r17,4(sp)
 802d750:	dc000017 	ldw	r16,0(sp)
 802d754:	dec00304 	addi	sp,sp,12
 802d758:	803c5501 	jmpi	803c550 <__malloc_unlock>
 802d75c:	02020134 	movhi	r8,2052
 802d760:	4206a604 	addi	r8,r8,6808
 802d764:	3a3faf1e 	bne	r7,r8,802d624 <_free_r+0x7c>
 802d768:	29800515 	stw	r6,20(r5)
 802d76c:	29800415 	stw	r6,16(r5)
 802d770:	11000054 	ori	r4,r2,1
 802d774:	3087883a 	add	r3,r6,r2
 802d778:	31c00315 	stw	r7,12(r6)
 802d77c:	31c00215 	stw	r7,8(r6)
 802d780:	31000115 	stw	r4,4(r6)
 802d784:	18800015 	stw	r2,0(r3)
 802d788:	003fc806 	br	802d6ac <_free_r+0x104>
 802d78c:	4200004c 	andi	r8,r8,1
 802d790:	3885883a 	add	r2,r7,r2
 802d794:	4000071e 	bne	r8,zero,802d7b4 <_free_r+0x20c>
 802d798:	81fffe17 	ldw	r7,-8(r16)
 802d79c:	31cdc83a 	sub	r6,r6,r7
 802d7a0:	30c00317 	ldw	r3,12(r6)
 802d7a4:	31000217 	ldw	r4,8(r6)
 802d7a8:	11c5883a 	add	r2,r2,r7
 802d7ac:	20c00315 	stw	r3,12(r4)
 802d7b0:	19000215 	stw	r4,8(r3)
 802d7b4:	00c20134 	movhi	r3,2052
 802d7b8:	18cc4704 	addi	r3,r3,12572
 802d7bc:	18c00017 	ldw	r3,0(r3)
 802d7c0:	11000054 	ori	r4,r2,1
 802d7c4:	31000115 	stw	r4,4(r6)
 802d7c8:	29800215 	stw	r6,8(r5)
 802d7cc:	10ffb736 	bltu	r2,r3,802d6ac <_free_r+0x104>
 802d7d0:	00820134 	movhi	r2,2052
 802d7d4:	10932c04 	addi	r2,r2,19632
 802d7d8:	11400017 	ldw	r5,0(r2)
 802d7dc:	8809883a 	mov	r4,r17
 802d7e0:	802d46c0 	call	802d46c <_malloc_trim_r>
 802d7e4:	003fb106 	br	802d6ac <_free_r+0x104>
 802d7e8:	01000044 	movi	r4,1
 802d7ec:	003f8606 	br	802d608 <_free_r+0x60>
 802d7f0:	01000504 	movi	r4,20
 802d7f4:	20c00b36 	bltu	r4,r3,802d824 <_free_r+0x27c>
 802d7f8:	190016c4 	addi	r4,r3,91
 802d7fc:	210f883a 	add	r7,r4,r4
 802d800:	003f9806 	br	802d664 <_free_r+0xbc>
 802d804:	2009d0ba 	srai	r4,r4,2
 802d808:	00800044 	movi	r2,1
 802d80c:	29c00117 	ldw	r7,4(r5)
 802d810:	1108983a 	sll	r4,r2,r4
 802d814:	1805883a 	mov	r2,r3
 802d818:	21c8b03a 	or	r4,r4,r7
 802d81c:	29000115 	stw	r4,4(r5)
 802d820:	003f9e06 	br	802d69c <_free_r+0xf4>
 802d824:	01001504 	movi	r4,84
 802d828:	20c00436 	bltu	r4,r3,802d83c <_free_r+0x294>
 802d82c:	1008d33a 	srli	r4,r2,12
 802d830:	21001b84 	addi	r4,r4,110
 802d834:	210f883a 	add	r7,r4,r4
 802d838:	003f8a06 	br	802d664 <_free_r+0xbc>
 802d83c:	01005504 	movi	r4,340
 802d840:	20c00436 	bltu	r4,r3,802d854 <_free_r+0x2ac>
 802d844:	1008d3fa 	srli	r4,r2,15
 802d848:	21001dc4 	addi	r4,r4,119
 802d84c:	210f883a 	add	r7,r4,r4
 802d850:	003f8406 	br	802d664 <_free_r+0xbc>
 802d854:	01015504 	movi	r4,1364
 802d858:	20c00436 	bltu	r4,r3,802d86c <_free_r+0x2c4>
 802d85c:	1008d4ba 	srli	r4,r2,18
 802d860:	21001f04 	addi	r4,r4,124
 802d864:	210f883a 	add	r7,r4,r4
 802d868:	003f7e06 	br	802d664 <_free_r+0xbc>
 802d86c:	01c03f04 	movi	r7,252
 802d870:	01001f84 	movi	r4,126
 802d874:	003f7b06 	br	802d664 <_free_r+0xbc>

0802d878 <_fseek_r>:
 802d878:	deffe804 	addi	sp,sp,-96
 802d87c:	dd001315 	stw	r20,76(sp)
 802d880:	dc801115 	stw	r18,68(sp)
 802d884:	dc401015 	stw	r17,64(sp)
 802d888:	dc000f15 	stw	r16,60(sp)
 802d88c:	dfc01715 	stw	ra,92(sp)
 802d890:	ddc01615 	stw	r23,88(sp)
 802d894:	dd801515 	stw	r22,84(sp)
 802d898:	dd401415 	stw	r21,80(sp)
 802d89c:	dcc01215 	stw	r19,72(sp)
 802d8a0:	2023883a 	mov	r17,r4
 802d8a4:	2821883a 	mov	r16,r5
 802d8a8:	3029883a 	mov	r20,r6
 802d8ac:	3825883a 	mov	r18,r7
 802d8b0:	20000226 	beq	r4,zero,802d8bc <_fseek_r+0x44>
 802d8b4:	20800e17 	ldw	r2,56(r4)
 802d8b8:	10006226 	beq	r2,zero,802da44 <_fseek_r+0x1cc>
 802d8bc:	80c0030b 	ldhu	r3,12(r16)
 802d8c0:	00804204 	movi	r2,264
 802d8c4:	18c0420c 	andi	r3,r3,264
 802d8c8:	18806326 	beq	r3,r2,802da58 <_fseek_r+0x1e0>
 802d8cc:	84c00a17 	ldw	r19,40(r16)
 802d8d0:	98010226 	beq	r19,zero,802dcdc <_fseek_r+0x464>
 802d8d4:	00800044 	movi	r2,1
 802d8d8:	90803d26 	beq	r18,r2,802d9d0 <_fseek_r+0x158>
 802d8dc:	00800084 	movi	r2,2
 802d8e0:	90800126 	beq	r18,r2,802d8e8 <_fseek_r+0x70>
 802d8e4:	90002c1e 	bne	r18,zero,802d998 <_fseek_r+0x120>
 802d8e8:	80800417 	ldw	r2,16(r16)
 802d8ec:	002d883a 	mov	r22,zero
 802d8f0:	002b883a 	mov	r21,zero
 802d8f4:	1000e526 	beq	r2,zero,802dc8c <_fseek_r+0x414>
 802d8f8:	80c0030b 	ldhu	r3,12(r16)
 802d8fc:	1882068c 	andi	r2,r3,2074
 802d900:	1809883a 	mov	r4,r3
 802d904:	10000a1e 	bne	r2,zero,802d930 <_fseek_r+0xb8>
 802d908:	1881000c 	andi	r2,r3,1024
 802d90c:	10bfffcc 	andi	r2,r2,65535
 802d910:	10a0001c 	xori	r2,r2,32768
 802d914:	10a00004 	addi	r2,r2,-32768
 802d918:	1000631e 	bne	r2,zero,802daa8 <_fseek_r+0x230>
 802d91c:	008200f4 	movhi	r2,2051
 802d920:	10bd3e04 	addi	r2,r2,-2824
 802d924:	98805026 	beq	r19,r2,802da68 <_fseek_r+0x1f0>
 802d928:	18c20014 	ori	r3,r3,2048
 802d92c:	80c0030d 	sth	r3,12(r16)
 802d930:	8809883a 	mov	r4,r17
 802d934:	800b883a 	mov	r5,r16
 802d938:	802cb540 	call	802cb54 <_fflush_r>
 802d93c:	1000181e 	bne	r2,zero,802d9a0 <_fseek_r+0x128>
 802d940:	81400717 	ldw	r5,28(r16)
 802d944:	8809883a 	mov	r4,r17
 802d948:	a00d883a 	mov	r6,r20
 802d94c:	900f883a 	mov	r7,r18
 802d950:	983ee83a 	callr	r19
 802d954:	00ffffc4 	movi	r3,-1
 802d958:	10c01126 	beq	r2,r3,802d9a0 <_fseek_r+0x128>
 802d95c:	81400c17 	ldw	r5,48(r16)
 802d960:	28000526 	beq	r5,zero,802d978 <_fseek_r+0x100>
 802d964:	80801004 	addi	r2,r16,64
 802d968:	28800226 	beq	r5,r2,802d974 <_fseek_r+0xfc>
 802d96c:	8809883a 	mov	r4,r17
 802d970:	802d5a80 	call	802d5a8 <_free_r>
 802d974:	80000c15 	stw	zero,48(r16)
 802d978:	8080030b 	ldhu	r2,12(r16)
 802d97c:	80c00417 	ldw	r3,16(r16)
 802d980:	80000115 	stw	zero,4(r16)
 802d984:	10bdf7cc 	andi	r2,r2,63455
 802d988:	8080030d 	sth	r2,12(r16)
 802d98c:	80c00015 	stw	r3,0(r16)
 802d990:	0005883a 	mov	r2,zero
 802d994:	00000306 	br	802d9a4 <_fseek_r+0x12c>
 802d998:	00800584 	movi	r2,22
 802d99c:	88800015 	stw	r2,0(r17)
 802d9a0:	00bfffc4 	movi	r2,-1
 802d9a4:	dfc01717 	ldw	ra,92(sp)
 802d9a8:	ddc01617 	ldw	r23,88(sp)
 802d9ac:	dd801517 	ldw	r22,84(sp)
 802d9b0:	dd401417 	ldw	r21,80(sp)
 802d9b4:	dd001317 	ldw	r20,76(sp)
 802d9b8:	dcc01217 	ldw	r19,72(sp)
 802d9bc:	dc801117 	ldw	r18,68(sp)
 802d9c0:	dc401017 	ldw	r17,64(sp)
 802d9c4:	dc000f17 	ldw	r16,60(sp)
 802d9c8:	dec01804 	addi	sp,sp,96
 802d9cc:	f800283a 	ret
 802d9d0:	8809883a 	mov	r4,r17
 802d9d4:	800b883a 	mov	r5,r16
 802d9d8:	802cb540 	call	802cb54 <_fflush_r>
 802d9dc:	8080030b 	ldhu	r2,12(r16)
 802d9e0:	10c4000c 	andi	r3,r2,4096
 802d9e4:	18ffffcc 	andi	r3,r3,65535
 802d9e8:	18e0001c 	xori	r3,r3,32768
 802d9ec:	18e00004 	addi	r3,r3,-32768
 802d9f0:	18007d26 	beq	r3,zero,802dbe8 <_fseek_r+0x370>
 802d9f4:	85401417 	ldw	r21,80(r16)
 802d9f8:	10c0010c 	andi	r3,r2,4
 802d9fc:	18ffffcc 	andi	r3,r3,65535
 802da00:	18e0001c 	xori	r3,r3,32768
 802da04:	18e00004 	addi	r3,r3,-32768
 802da08:	18005f1e 	bne	r3,zero,802db88 <_fseek_r+0x310>
 802da0c:	1080020c 	andi	r2,r2,8
 802da10:	10bfffcc 	andi	r2,r2,65535
 802da14:	10a0001c 	xori	r2,r2,32768
 802da18:	10a00004 	addi	r2,r2,-32768
 802da1c:	10007026 	beq	r2,zero,802dbe0 <_fseek_r+0x368>
 802da20:	80c00017 	ldw	r3,0(r16)
 802da24:	80800417 	ldw	r2,16(r16)
 802da28:	18000226 	beq	r3,zero,802da34 <_fseek_r+0x1bc>
 802da2c:	1887c83a 	sub	r3,r3,r2
 802da30:	a8eb883a 	add	r21,r21,r3
 802da34:	a569883a 	add	r20,r20,r21
 802da38:	05800044 	movi	r22,1
 802da3c:	0025883a 	mov	r18,zero
 802da40:	003fac06 	br	802d8f4 <_fseek_r+0x7c>
 802da44:	802ce100 	call	802ce10 <__sinit>
 802da48:	80c0030b 	ldhu	r3,12(r16)
 802da4c:	00804204 	movi	r2,264
 802da50:	18c0420c 	andi	r3,r3,264
 802da54:	18bf9d1e 	bne	r3,r2,802d8cc <_fseek_r+0x54>
 802da58:	8809883a 	mov	r4,r17
 802da5c:	800b883a 	mov	r5,r16
 802da60:	802cb540 	call	802cb54 <_fflush_r>
 802da64:	003f9906 	br	802d8cc <_fseek_r+0x54>
 802da68:	8140038f 	ldh	r5,14(r16)
 802da6c:	283fae16 	blt	r5,zero,802d928 <_fseek_r+0xb0>
 802da70:	8809883a 	mov	r4,r17
 802da74:	d80d883a 	mov	r6,sp
 802da78:	802dd100 	call	802dd10 <_fstat_r>
 802da7c:	1000741e 	bne	r2,zero,802dc50 <_fseek_r+0x3d8>
 802da80:	d8c00117 	ldw	r3,4(sp)
 802da84:	00a00014 	movui	r2,32768
 802da88:	18fc000c 	andi	r3,r3,61440
 802da8c:	1880701e 	bne	r3,r2,802dc50 <_fseek_r+0x3d8>
 802da90:	8100030b 	ldhu	r4,12(r16)
 802da94:	00810004 	movi	r2,1024
 802da98:	80801315 	stw	r2,76(r16)
 802da9c:	2084b03a 	or	r2,r4,r2
 802daa0:	1009883a 	mov	r4,r2
 802daa4:	8080030d 	sth	r2,12(r16)
 802daa8:	90003f1e 	bne	r18,zero,802dba8 <_fseek_r+0x330>
 802daac:	a02f883a 	mov	r23,r20
 802dab0:	b000461e 	bne	r22,zero,802dbcc <_fseek_r+0x354>
 802dab4:	2084000c 	andi	r2,r4,4096
 802dab8:	10bfffcc 	andi	r2,r2,65535
 802dabc:	10a0001c 	xori	r2,r2,32768
 802dac0:	10a00004 	addi	r2,r2,-32768
 802dac4:	10007526 	beq	r2,zero,802dc9c <_fseek_r+0x424>
 802dac8:	80801417 	ldw	r2,80(r16)
 802dacc:	80c00117 	ldw	r3,4(r16)
 802dad0:	81400c17 	ldw	r5,48(r16)
 802dad4:	10ebc83a 	sub	r21,r2,r3
 802dad8:	28007926 	beq	r5,zero,802dcc0 <_fseek_r+0x448>
 802dadc:	81c00f17 	ldw	r7,60(r16)
 802dae0:	a9ebc83a 	sub	r21,r21,r7
 802dae4:	80800e17 	ldw	r2,56(r16)
 802dae8:	81800417 	ldw	r6,16(r16)
 802daec:	a8eb883a 	add	r21,r21,r3
 802daf0:	1185c83a 	sub	r2,r2,r6
 802daf4:	a8abc83a 	sub	r21,r21,r2
 802daf8:	3885883a 	add	r2,r7,r2
 802dafc:	2208000c 	andi	r8,r4,8192
 802db00:	423fffcc 	andi	r8,r8,65535
 802db04:	4220001c 	xori	r8,r8,32768
 802db08:	42200004 	addi	r8,r8,-32768
 802db0c:	4000031e 	bne	r8,zero,802db1c <_fseek_r+0x2a4>
 802db10:	bd400216 	blt	r23,r21,802db1c <_fseek_r+0x2a4>
 802db14:	a887883a 	add	r3,r21,r2
 802db18:	b8c03d36 	bltu	r23,r3,802dc10 <_fseek_r+0x398>
 802db1c:	85401317 	ldw	r21,76(r16)
 802db20:	81400717 	ldw	r5,28(r16)
 802db24:	8809883a 	mov	r4,r17
 802db28:	056bc83a 	sub	r21,zero,r21
 802db2c:	bd6a703a 	and	r21,r23,r21
 802db30:	a80d883a 	mov	r6,r21
 802db34:	000f883a 	mov	r7,zero
 802db38:	983ee83a 	callr	r19
 802db3c:	00ffffc4 	movi	r3,-1
 802db40:	10ff7b26 	beq	r2,r3,802d930 <_fseek_r+0xb8>
 802db44:	80800417 	ldw	r2,16(r16)
 802db48:	81400c17 	ldw	r5,48(r16)
 802db4c:	80000115 	stw	zero,4(r16)
 802db50:	80800015 	stw	r2,0(r16)
 802db54:	28000526 	beq	r5,zero,802db6c <_fseek_r+0x2f4>
 802db58:	80801004 	addi	r2,r16,64
 802db5c:	28800226 	beq	r5,r2,802db68 <_fseek_r+0x2f0>
 802db60:	8809883a 	mov	r4,r17
 802db64:	802d5a80 	call	802d5a8 <_free_r>
 802db68:	80000c15 	stw	zero,48(r16)
 802db6c:	8080030b 	ldhu	r2,12(r16)
 802db70:	bd6fc83a 	sub	r23,r23,r21
 802db74:	10bff7cc 	andi	r2,r2,65503
 802db78:	8080030d 	sth	r2,12(r16)
 802db7c:	b800361e 	bne	r23,zero,802dc58 <_fseek_r+0x3e0>
 802db80:	0005883a 	mov	r2,zero
 802db84:	003f8706 	br	802d9a4 <_fseek_r+0x12c>
 802db88:	80c00117 	ldw	r3,4(r16)
 802db8c:	80800c17 	ldw	r2,48(r16)
 802db90:	a8ebc83a 	sub	r21,r21,r3
 802db94:	10001226 	beq	r2,zero,802dbe0 <_fseek_r+0x368>
 802db98:	80c00f17 	ldw	r3,60(r16)
 802db9c:	80800417 	ldw	r2,16(r16)
 802dba0:	a8ebc83a 	sub	r21,r21,r3
 802dba4:	003fa306 	br	802da34 <_fseek_r+0x1bc>
 802dba8:	8140038f 	ldh	r5,14(r16)
 802dbac:	8809883a 	mov	r4,r17
 802dbb0:	d80d883a 	mov	r6,sp
 802dbb4:	802dd100 	call	802dd10 <_fstat_r>
 802dbb8:	103f5d1e 	bne	r2,zero,802d930 <_fseek_r+0xb8>
 802dbbc:	ddc00417 	ldw	r23,16(sp)
 802dbc0:	8100030b 	ldhu	r4,12(r16)
 802dbc4:	a5ef883a 	add	r23,r20,r23
 802dbc8:	b03fba26 	beq	r22,zero,802dab4 <_fseek_r+0x23c>
 802dbcc:	81400c17 	ldw	r5,48(r16)
 802dbd0:	80c00117 	ldw	r3,4(r16)
 802dbd4:	28003a26 	beq	r5,zero,802dcc0 <_fseek_r+0x448>
 802dbd8:	81c00f17 	ldw	r7,60(r16)
 802dbdc:	003fc106 	br	802dae4 <_fseek_r+0x26c>
 802dbe0:	80800417 	ldw	r2,16(r16)
 802dbe4:	003f9306 	br	802da34 <_fseek_r+0x1bc>
 802dbe8:	81400717 	ldw	r5,28(r16)
 802dbec:	8809883a 	mov	r4,r17
 802dbf0:	000d883a 	mov	r6,zero
 802dbf4:	900f883a 	mov	r7,r18
 802dbf8:	983ee83a 	callr	r19
 802dbfc:	102b883a 	mov	r21,r2
 802dc00:	00bfffc4 	movi	r2,-1
 802dc04:	a8bf6626 	beq	r21,r2,802d9a0 <_fseek_r+0x128>
 802dc08:	8080030b 	ldhu	r2,12(r16)
 802dc0c:	003f7a06 	br	802d9f8 <_fseek_r+0x180>
 802dc10:	bd6bc83a 	sub	r21,r23,r21
 802dc14:	354d883a 	add	r6,r6,r21
 802dc18:	1545c83a 	sub	r2,r2,r21
 802dc1c:	81800015 	stw	r6,0(r16)
 802dc20:	80800115 	stw	r2,4(r16)
 802dc24:	28000626 	beq	r5,zero,802dc40 <_fseek_r+0x3c8>
 802dc28:	80801004 	addi	r2,r16,64
 802dc2c:	28800326 	beq	r5,r2,802dc3c <_fseek_r+0x3c4>
 802dc30:	8809883a 	mov	r4,r17
 802dc34:	802d5a80 	call	802d5a8 <_free_r>
 802dc38:	8100030b 	ldhu	r4,12(r16)
 802dc3c:	80000c15 	stw	zero,48(r16)
 802dc40:	213ff7cc 	andi	r4,r4,65503
 802dc44:	8100030d 	sth	r4,12(r16)
 802dc48:	0005883a 	mov	r2,zero
 802dc4c:	003f5506 	br	802d9a4 <_fseek_r+0x12c>
 802dc50:	80c0030b 	ldhu	r3,12(r16)
 802dc54:	003f3406 	br	802d928 <_fseek_r+0xb0>
 802dc58:	8809883a 	mov	r4,r17
 802dc5c:	800b883a 	mov	r5,r16
 802dc60:	802ef540 	call	802ef54 <__srefill_r>
 802dc64:	103f321e 	bne	r2,zero,802d930 <_fseek_r+0xb8>
 802dc68:	80800117 	ldw	r2,4(r16)
 802dc6c:	15ff3036 	bltu	r2,r23,802d930 <_fseek_r+0xb8>
 802dc70:	80c00017 	ldw	r3,0(r16)
 802dc74:	15c5c83a 	sub	r2,r2,r23
 802dc78:	80800115 	stw	r2,4(r16)
 802dc7c:	1def883a 	add	r23,r3,r23
 802dc80:	85c00015 	stw	r23,0(r16)
 802dc84:	0005883a 	mov	r2,zero
 802dc88:	003f4606 	br	802d9a4 <_fseek_r+0x12c>
 802dc8c:	8809883a 	mov	r4,r17
 802dc90:	800b883a 	mov	r5,r16
 802dc94:	802e25c0 	call	802e25c <__smakebuf_r>
 802dc98:	003f1706 	br	802d8f8 <_fseek_r+0x80>
 802dc9c:	81400717 	ldw	r5,28(r16)
 802dca0:	8809883a 	mov	r4,r17
 802dca4:	000d883a 	mov	r6,zero
 802dca8:	01c00044 	movi	r7,1
 802dcac:	983ee83a 	callr	r19
 802dcb0:	00ffffc4 	movi	r3,-1
 802dcb4:	10ff1e26 	beq	r2,r3,802d930 <_fseek_r+0xb8>
 802dcb8:	8100030b 	ldhu	r4,12(r16)
 802dcbc:	003f8306 	br	802dacc <_fseek_r+0x254>
 802dcc0:	80800017 	ldw	r2,0(r16)
 802dcc4:	81800417 	ldw	r6,16(r16)
 802dcc8:	000b883a 	mov	r5,zero
 802dccc:	1185c83a 	sub	r2,r2,r6
 802dcd0:	a8abc83a 	sub	r21,r21,r2
 802dcd4:	1885883a 	add	r2,r3,r2
 802dcd8:	003f8806 	br	802dafc <_fseek_r+0x284>
 802dcdc:	00800744 	movi	r2,29
 802dce0:	88800015 	stw	r2,0(r17)
 802dce4:	00bfffc4 	movi	r2,-1
 802dce8:	003f2e06 	br	802d9a4 <_fseek_r+0x12c>

0802dcec <fseek>:
 802dcec:	00820134 	movhi	r2,2052
 802dcf0:	108c4504 	addi	r2,r2,12564
 802dcf4:	2007883a 	mov	r3,r4
 802dcf8:	11000017 	ldw	r4,0(r2)
 802dcfc:	2805883a 	mov	r2,r5
 802dd00:	300f883a 	mov	r7,r6
 802dd04:	180b883a 	mov	r5,r3
 802dd08:	100d883a 	mov	r6,r2
 802dd0c:	802d8781 	jmpi	802d878 <_fseek_r>

0802dd10 <_fstat_r>:
 802dd10:	defffd04 	addi	sp,sp,-12
 802dd14:	dc400115 	stw	r17,4(sp)
 802dd18:	dc000015 	stw	r16,0(sp)
 802dd1c:	2023883a 	mov	r17,r4
 802dd20:	04020134 	movhi	r16,2052
 802dd24:	84132904 	addi	r16,r16,19620
 802dd28:	2809883a 	mov	r4,r5
 802dd2c:	300b883a 	mov	r5,r6
 802dd30:	dfc00215 	stw	ra,8(sp)
 802dd34:	80000015 	stw	zero,0(r16)
 802dd38:	803bf640 	call	803bf64 <fstat>
 802dd3c:	00ffffc4 	movi	r3,-1
 802dd40:	10c00526 	beq	r2,r3,802dd58 <_fstat_r+0x48>
 802dd44:	dfc00217 	ldw	ra,8(sp)
 802dd48:	dc400117 	ldw	r17,4(sp)
 802dd4c:	dc000017 	ldw	r16,0(sp)
 802dd50:	dec00304 	addi	sp,sp,12
 802dd54:	f800283a 	ret
 802dd58:	80c00017 	ldw	r3,0(r16)
 802dd5c:	183ff926 	beq	r3,zero,802dd44 <_fstat_r+0x34>
 802dd60:	88c00015 	stw	r3,0(r17)
 802dd64:	dfc00217 	ldw	ra,8(sp)
 802dd68:	dc400117 	ldw	r17,4(sp)
 802dd6c:	dc000017 	ldw	r16,0(sp)
 802dd70:	dec00304 	addi	sp,sp,12
 802dd74:	f800283a 	ret

0802dd78 <_ftell_r>:
 802dd78:	defffd04 	addi	sp,sp,-12
 802dd7c:	dc400115 	stw	r17,4(sp)
 802dd80:	dc000015 	stw	r16,0(sp)
 802dd84:	dfc00215 	stw	ra,8(sp)
 802dd88:	2023883a 	mov	r17,r4
 802dd8c:	2821883a 	mov	r16,r5
 802dd90:	20000226 	beq	r4,zero,802dd9c <_ftell_r+0x24>
 802dd94:	20800e17 	ldw	r2,56(r4)
 802dd98:	10003526 	beq	r2,zero,802de70 <_ftell_r+0xf8>
 802dd9c:	80800a17 	ldw	r2,40(r16)
 802dda0:	10003526 	beq	r2,zero,802de78 <_ftell_r+0x100>
 802dda4:	8809883a 	mov	r4,r17
 802dda8:	800b883a 	mov	r5,r16
 802ddac:	802cb540 	call	802cb54 <_fflush_r>
 802ddb0:	80c0030b 	ldhu	r3,12(r16)
 802ddb4:	1884000c 	andi	r2,r3,4096
 802ddb8:	10bfffcc 	andi	r2,r2,65535
 802ddbc:	10a0001c 	xori	r2,r2,32768
 802ddc0:	10a00004 	addi	r2,r2,-32768
 802ddc4:	10002026 	beq	r2,zero,802de48 <_ftell_r+0xd0>
 802ddc8:	80801417 	ldw	r2,80(r16)
 802ddcc:	1900010c 	andi	r4,r3,4
 802ddd0:	213fffcc 	andi	r4,r4,65535
 802ddd4:	2120001c 	xori	r4,r4,32768
 802ddd8:	21200004 	addi	r4,r4,-32768
 802dddc:	20000b26 	beq	r4,zero,802de0c <_ftell_r+0x94>
 802dde0:	81000117 	ldw	r4,4(r16)
 802dde4:	80c00c17 	ldw	r3,48(r16)
 802dde8:	1105c83a 	sub	r2,r2,r4
 802ddec:	18000226 	beq	r3,zero,802ddf8 <_ftell_r+0x80>
 802ddf0:	80c00f17 	ldw	r3,60(r16)
 802ddf4:	10c5c83a 	sub	r2,r2,r3
 802ddf8:	dfc00217 	ldw	ra,8(sp)
 802ddfc:	dc400117 	ldw	r17,4(sp)
 802de00:	dc000017 	ldw	r16,0(sp)
 802de04:	dec00304 	addi	sp,sp,12
 802de08:	f800283a 	ret
 802de0c:	18c0020c 	andi	r3,r3,8
 802de10:	18ffffcc 	andi	r3,r3,65535
 802de14:	18e0001c 	xori	r3,r3,32768
 802de18:	18e00004 	addi	r3,r3,-32768
 802de1c:	183ff626 	beq	r3,zero,802ddf8 <_ftell_r+0x80>
 802de20:	80c00017 	ldw	r3,0(r16)
 802de24:	183ff426 	beq	r3,zero,802ddf8 <_ftell_r+0x80>
 802de28:	81000417 	ldw	r4,16(r16)
 802de2c:	1907c83a 	sub	r3,r3,r4
 802de30:	10c5883a 	add	r2,r2,r3
 802de34:	dfc00217 	ldw	ra,8(sp)
 802de38:	dc400117 	ldw	r17,4(sp)
 802de3c:	dc000017 	ldw	r16,0(sp)
 802de40:	dec00304 	addi	sp,sp,12
 802de44:	f800283a 	ret
 802de48:	80800a17 	ldw	r2,40(r16)
 802de4c:	81400717 	ldw	r5,28(r16)
 802de50:	8809883a 	mov	r4,r17
 802de54:	000d883a 	mov	r6,zero
 802de58:	01c00044 	movi	r7,1
 802de5c:	103ee83a 	callr	r2
 802de60:	00ffffc4 	movi	r3,-1
 802de64:	10ffe426 	beq	r2,r3,802ddf8 <_ftell_r+0x80>
 802de68:	80c0030b 	ldhu	r3,12(r16)
 802de6c:	003fd706 	br	802ddcc <_ftell_r+0x54>
 802de70:	802ce100 	call	802ce10 <__sinit>
 802de74:	003fc906 	br	802dd9c <_ftell_r+0x24>
 802de78:	00800744 	movi	r2,29
 802de7c:	88800015 	stw	r2,0(r17)
 802de80:	00bfffc4 	movi	r2,-1
 802de84:	003fdc06 	br	802ddf8 <_ftell_r+0x80>

0802de88 <ftell>:
 802de88:	00820134 	movhi	r2,2052
 802de8c:	108c4504 	addi	r2,r2,12564
 802de90:	200b883a 	mov	r5,r4
 802de94:	11000017 	ldw	r4,0(r2)
 802de98:	802dd781 	jmpi	802dd78 <_ftell_r>

0802de9c <_fwalk>:
 802de9c:	defff904 	addi	sp,sp,-28
 802dea0:	dcc00315 	stw	r19,12(sp)
 802dea4:	24c0b804 	addi	r19,r4,736
 802dea8:	dd400515 	stw	r21,20(sp)
 802deac:	dd000415 	stw	r20,16(sp)
 802deb0:	dfc00615 	stw	ra,24(sp)
 802deb4:	dc800215 	stw	r18,8(sp)
 802deb8:	dc400115 	stw	r17,4(sp)
 802debc:	dc000015 	stw	r16,0(sp)
 802dec0:	282b883a 	mov	r21,r5
 802dec4:	0029883a 	mov	r20,zero
 802dec8:	802d0180 	call	802d018 <__sfp_lock_acquire>
 802decc:	98001226 	beq	r19,zero,802df18 <_fwalk+0x7c>
 802ded0:	04bfffc4 	movi	r18,-1
 802ded4:	9c400117 	ldw	r17,4(r19)
 802ded8:	9c000217 	ldw	r16,8(r19)
 802dedc:	8c7fffc4 	addi	r17,r17,-1
 802dee0:	88000b16 	blt	r17,zero,802df10 <_fwalk+0x74>
 802dee4:	84000304 	addi	r16,r16,12
 802dee8:	80c0000f 	ldh	r3,0(r16)
 802deec:	8c7fffc4 	addi	r17,r17,-1
 802def0:	813ffd04 	addi	r4,r16,-12
 802def4:	18000426 	beq	r3,zero,802df08 <_fwalk+0x6c>
 802def8:	80c0008f 	ldh	r3,2(r16)
 802defc:	1c800226 	beq	r3,r18,802df08 <_fwalk+0x6c>
 802df00:	a83ee83a 	callr	r21
 802df04:	a0a8b03a 	or	r20,r20,r2
 802df08:	84001704 	addi	r16,r16,92
 802df0c:	8cbff61e 	bne	r17,r18,802dee8 <_fwalk+0x4c>
 802df10:	9cc00017 	ldw	r19,0(r19)
 802df14:	983fef1e 	bne	r19,zero,802ded4 <_fwalk+0x38>
 802df18:	802d01c0 	call	802d01c <__sfp_lock_release>
 802df1c:	a005883a 	mov	r2,r20
 802df20:	dfc00617 	ldw	ra,24(sp)
 802df24:	dd400517 	ldw	r21,20(sp)
 802df28:	dd000417 	ldw	r20,16(sp)
 802df2c:	dcc00317 	ldw	r19,12(sp)
 802df30:	dc800217 	ldw	r18,8(sp)
 802df34:	dc400117 	ldw	r17,4(sp)
 802df38:	dc000017 	ldw	r16,0(sp)
 802df3c:	dec00704 	addi	sp,sp,28
 802df40:	f800283a 	ret

0802df44 <_fwalk_reent>:
 802df44:	defff804 	addi	sp,sp,-32
 802df48:	dcc00315 	stw	r19,12(sp)
 802df4c:	24c0b804 	addi	r19,r4,736
 802df50:	dd800615 	stw	r22,24(sp)
 802df54:	dd400515 	stw	r21,20(sp)
 802df58:	dd000415 	stw	r20,16(sp)
 802df5c:	dfc00715 	stw	ra,28(sp)
 802df60:	dc800215 	stw	r18,8(sp)
 802df64:	dc400115 	stw	r17,4(sp)
 802df68:	dc000015 	stw	r16,0(sp)
 802df6c:	2029883a 	mov	r20,r4
 802df70:	282b883a 	mov	r21,r5
 802df74:	002d883a 	mov	r22,zero
 802df78:	802d0180 	call	802d018 <__sfp_lock_acquire>
 802df7c:	98001326 	beq	r19,zero,802dfcc <_fwalk_reent+0x88>
 802df80:	04bfffc4 	movi	r18,-1
 802df84:	9c400117 	ldw	r17,4(r19)
 802df88:	9c000217 	ldw	r16,8(r19)
 802df8c:	8c7fffc4 	addi	r17,r17,-1
 802df90:	88000c16 	blt	r17,zero,802dfc4 <_fwalk_reent+0x80>
 802df94:	84000304 	addi	r16,r16,12
 802df98:	80c0000f 	ldh	r3,0(r16)
 802df9c:	8c7fffc4 	addi	r17,r17,-1
 802dfa0:	817ffd04 	addi	r5,r16,-12
 802dfa4:	18000526 	beq	r3,zero,802dfbc <_fwalk_reent+0x78>
 802dfa8:	80c0008f 	ldh	r3,2(r16)
 802dfac:	a009883a 	mov	r4,r20
 802dfb0:	1c800226 	beq	r3,r18,802dfbc <_fwalk_reent+0x78>
 802dfb4:	a83ee83a 	callr	r21
 802dfb8:	b0acb03a 	or	r22,r22,r2
 802dfbc:	84001704 	addi	r16,r16,92
 802dfc0:	8cbff51e 	bne	r17,r18,802df98 <_fwalk_reent+0x54>
 802dfc4:	9cc00017 	ldw	r19,0(r19)
 802dfc8:	983fee1e 	bne	r19,zero,802df84 <_fwalk_reent+0x40>
 802dfcc:	802d01c0 	call	802d01c <__sfp_lock_release>
 802dfd0:	b005883a 	mov	r2,r22
 802dfd4:	dfc00717 	ldw	ra,28(sp)
 802dfd8:	dd800617 	ldw	r22,24(sp)
 802dfdc:	dd400517 	ldw	r21,20(sp)
 802dfe0:	dd000417 	ldw	r20,16(sp)
 802dfe4:	dcc00317 	ldw	r19,12(sp)
 802dfe8:	dc800217 	ldw	r18,8(sp)
 802dfec:	dc400117 	ldw	r17,4(sp)
 802dff0:	dc000017 	ldw	r16,0(sp)
 802dff4:	dec00804 	addi	sp,sp,32
 802dff8:	f800283a 	ret

0802dffc <_fwrite_r>:
 802dffc:	defff604 	addi	sp,sp,-40
 802e000:	dc000515 	stw	r16,20(sp)
 802e004:	d9400315 	stw	r5,12(sp)
 802e008:	2021883a 	mov	r16,r4
 802e00c:	300b883a 	mov	r5,r6
 802e010:	3809883a 	mov	r4,r7
 802e014:	dcc00815 	stw	r19,32(sp)
 802e018:	dc800715 	stw	r18,28(sp)
 802e01c:	dc400615 	stw	r17,24(sp)
 802e020:	dfc00915 	stw	ra,36(sp)
 802e024:	3027883a 	mov	r19,r6
 802e028:	3823883a 	mov	r17,r7
 802e02c:	802c2180 	call	802c218 <__mulsi3>
 802e030:	1025883a 	mov	r18,r2
 802e034:	d8800415 	stw	r2,16(sp)
 802e038:	d8800215 	stw	r2,8(sp)
 802e03c:	d8800304 	addi	r2,sp,12
 802e040:	d8800015 	stw	r2,0(sp)
 802e044:	00800044 	movi	r2,1
 802e048:	d8800115 	stw	r2,4(sp)
 802e04c:	80000226 	beq	r16,zero,802e058 <_fwrite_r+0x5c>
 802e050:	80800e17 	ldw	r2,56(r16)
 802e054:	10001226 	beq	r2,zero,802e0a0 <_fwrite_r+0xa4>
 802e058:	d9400a17 	ldw	r5,40(sp)
 802e05c:	8009883a 	mov	r4,r16
 802e060:	d80d883a 	mov	r6,sp
 802e064:	80350e80 	call	80350e8 <__sfvwrite_r>
 802e068:	10000526 	beq	r2,zero,802e080 <_fwrite_r+0x84>
 802e06c:	d9000217 	ldw	r4,8(sp)
 802e070:	980b883a 	mov	r5,r19
 802e074:	9109c83a 	sub	r4,r18,r4
 802e078:	802c2080 	call	802c208 <__udivsi3>
 802e07c:	1023883a 	mov	r17,r2
 802e080:	8805883a 	mov	r2,r17
 802e084:	dfc00917 	ldw	ra,36(sp)
 802e088:	dcc00817 	ldw	r19,32(sp)
 802e08c:	dc800717 	ldw	r18,28(sp)
 802e090:	dc400617 	ldw	r17,24(sp)
 802e094:	dc000517 	ldw	r16,20(sp)
 802e098:	dec00a04 	addi	sp,sp,40
 802e09c:	f800283a 	ret
 802e0a0:	8009883a 	mov	r4,r16
 802e0a4:	802ce100 	call	802ce10 <__sinit>
 802e0a8:	003feb06 	br	802e058 <_fwrite_r+0x5c>

0802e0ac <fwrite>:
 802e0ac:	00820134 	movhi	r2,2052
 802e0b0:	108c4504 	addi	r2,r2,12564
 802e0b4:	2011883a 	mov	r8,r4
 802e0b8:	11000017 	ldw	r4,0(r2)
 802e0bc:	defffe04 	addi	sp,sp,-8
 802e0c0:	2807883a 	mov	r3,r5
 802e0c4:	3005883a 	mov	r2,r6
 802e0c8:	d9c00015 	stw	r7,0(sp)
 802e0cc:	400b883a 	mov	r5,r8
 802e0d0:	180d883a 	mov	r6,r3
 802e0d4:	100f883a 	mov	r7,r2
 802e0d8:	dfc00115 	stw	ra,4(sp)
 802e0dc:	802dffc0 	call	802dffc <_fwrite_r>
 802e0e0:	dfc00117 	ldw	ra,4(sp)
 802e0e4:	dec00204 	addi	sp,sp,8
 802e0e8:	f800283a 	ret

0802e0ec <_findenv>:
 802e0ec:	00c20134 	movhi	r3,2052
 802e0f0:	18cc4504 	addi	r3,r3,12564
 802e0f4:	2005883a 	mov	r2,r4
 802e0f8:	19000017 	ldw	r4,0(r3)
 802e0fc:	280d883a 	mov	r6,r5
 802e100:	100b883a 	mov	r5,r2
 802e104:	802e1341 	jmpi	802e134 <_findenv_r>

0802e108 <getenv>:
 802e108:	00820134 	movhi	r2,2052
 802e10c:	108c4504 	addi	r2,r2,12564
 802e110:	200b883a 	mov	r5,r4
 802e114:	11000017 	ldw	r4,0(r2)
 802e118:	defffe04 	addi	sp,sp,-8
 802e11c:	d80d883a 	mov	r6,sp
 802e120:	dfc00115 	stw	ra,4(sp)
 802e124:	802e1340 	call	802e134 <_findenv_r>
 802e128:	dfc00117 	ldw	ra,4(sp)
 802e12c:	dec00204 	addi	sp,sp,8
 802e130:	f800283a 	ret

0802e134 <_findenv_r>:
 802e134:	defff704 	addi	sp,sp,-36
 802e138:	dcc00315 	stw	r19,12(sp)
 802e13c:	04c20134 	movhi	r19,2052
 802e140:	9ccc4804 	addi	r19,r19,12576
 802e144:	dd400515 	stw	r21,20(sp)
 802e148:	dd000415 	stw	r20,16(sp)
 802e14c:	dc800215 	stw	r18,8(sp)
 802e150:	dc000015 	stw	r16,0(sp)
 802e154:	dfc00815 	stw	ra,32(sp)
 802e158:	ddc00715 	stw	r23,28(sp)
 802e15c:	dd800615 	stw	r22,24(sp)
 802e160:	dc400115 	stw	r17,4(sp)
 802e164:	2029883a 	mov	r20,r4
 802e168:	2825883a 	mov	r18,r5
 802e16c:	302b883a 	mov	r21,r6
 802e170:	803be980 	call	803be98 <__env_lock>
 802e174:	9c000017 	ldw	r16,0(r19)
 802e178:	80001926 	beq	r16,zero,802e1e0 <_findenv_r+0xac>
 802e17c:	90c00007 	ldb	r3,0(r18)
 802e180:	18002d26 	beq	r3,zero,802e238 <_findenv_r+0x104>
 802e184:	01000f44 	movi	r4,61
 802e188:	9005883a 	mov	r2,r18
 802e18c:	1900021e 	bne	r3,r4,802e198 <_findenv_r+0x64>
 802e190:	00002906 	br	802e238 <_findenv_r+0x104>
 802e194:	19000426 	beq	r3,r4,802e1a8 <_findenv_r+0x74>
 802e198:	10800044 	addi	r2,r2,1
 802e19c:	10c00007 	ldb	r3,0(r2)
 802e1a0:	14a3c83a 	sub	r17,r2,r18
 802e1a4:	183ffb1e 	bne	r3,zero,802e194 <_findenv_r+0x60>
 802e1a8:	81000017 	ldw	r4,0(r16)
 802e1ac:	20000c26 	beq	r4,zero,802e1e0 <_findenv_r+0xac>
 802e1b0:	05c00f44 	movi	r23,61
 802e1b4:	900b883a 	mov	r5,r18
 802e1b8:	880d883a 	mov	r6,r17
 802e1bc:	802f7b80 	call	802f7b8 <strncmp>
 802e1c0:	1000041e 	bne	r2,zero,802e1d4 <_findenv_r+0xa0>
 802e1c4:	85800017 	ldw	r22,0(r16)
 802e1c8:	b46d883a 	add	r22,r22,r17
 802e1cc:	b0800007 	ldb	r2,0(r22)
 802e1d0:	15c01126 	beq	r2,r23,802e218 <_findenv_r+0xe4>
 802e1d4:	84000104 	addi	r16,r16,4
 802e1d8:	81000017 	ldw	r4,0(r16)
 802e1dc:	203ff51e 	bne	r4,zero,802e1b4 <_findenv_r+0x80>
 802e1e0:	a009883a 	mov	r4,r20
 802e1e4:	803beb80 	call	803beb8 <__env_unlock>
 802e1e8:	0005883a 	mov	r2,zero
 802e1ec:	dfc00817 	ldw	ra,32(sp)
 802e1f0:	ddc00717 	ldw	r23,28(sp)
 802e1f4:	dd800617 	ldw	r22,24(sp)
 802e1f8:	dd400517 	ldw	r21,20(sp)
 802e1fc:	dd000417 	ldw	r20,16(sp)
 802e200:	dcc00317 	ldw	r19,12(sp)
 802e204:	dc800217 	ldw	r18,8(sp)
 802e208:	dc400117 	ldw	r17,4(sp)
 802e20c:	dc000017 	ldw	r16,0(sp)
 802e210:	dec00904 	addi	sp,sp,36
 802e214:	f800283a 	ret
 802e218:	98800017 	ldw	r2,0(r19)
 802e21c:	a009883a 	mov	r4,r20
 802e220:	80a1c83a 	sub	r16,r16,r2
 802e224:	8021d0ba 	srai	r16,r16,2
 802e228:	ac000015 	stw	r16,0(r21)
 802e22c:	803beb80 	call	803beb8 <__env_unlock>
 802e230:	b0800044 	addi	r2,r22,1
 802e234:	003fed06 	br	802e1ec <_findenv_r+0xb8>
 802e238:	0023883a 	mov	r17,zero
 802e23c:	003fda06 	br	802e1a8 <_findenv_r+0x74>

0802e240 <_getenv_r>:
 802e240:	defffe04 	addi	sp,sp,-8
 802e244:	d80d883a 	mov	r6,sp
 802e248:	dfc00115 	stw	ra,4(sp)
 802e24c:	802e1340 	call	802e134 <_findenv_r>
 802e250:	dfc00117 	ldw	ra,4(sp)
 802e254:	dec00204 	addi	sp,sp,8
 802e258:	f800283a 	ret

0802e25c <__smakebuf_r>:
 802e25c:	2880030b 	ldhu	r2,12(r5)
 802e260:	deffed04 	addi	sp,sp,-76
 802e264:	dc401015 	stw	r17,64(sp)
 802e268:	10c0008c 	andi	r3,r2,2
 802e26c:	18ffffcc 	andi	r3,r3,65535
 802e270:	18e0001c 	xori	r3,r3,32768
 802e274:	dc000f15 	stw	r16,60(sp)
 802e278:	dfc01215 	stw	ra,72(sp)
 802e27c:	dc801115 	stw	r18,68(sp)
 802e280:	18e00004 	addi	r3,r3,-32768
 802e284:	2821883a 	mov	r16,r5
 802e288:	2023883a 	mov	r17,r4
 802e28c:	1800381e 	bne	r3,zero,802e370 <__smakebuf_r+0x114>
 802e290:	2940038f 	ldh	r5,14(r5)
 802e294:	28002d16 	blt	r5,zero,802e34c <__smakebuf_r+0xf0>
 802e298:	d80d883a 	mov	r6,sp
 802e29c:	802dd100 	call	802dd10 <_fstat_r>
 802e2a0:	10002916 	blt	r2,zero,802e348 <__smakebuf_r+0xec>
 802e2a4:	d8800117 	ldw	r2,4(sp)
 802e2a8:	00e00014 	movui	r3,32768
 802e2ac:	10bc000c 	andi	r2,r2,61440
 802e2b0:	10c03c26 	beq	r2,r3,802e3a4 <__smakebuf_r+0x148>
 802e2b4:	80c0030b 	ldhu	r3,12(r16)
 802e2b8:	18c20014 	ori	r3,r3,2048
 802e2bc:	80c0030d 	sth	r3,12(r16)
 802e2c0:	00c80004 	movi	r3,8192
 802e2c4:	10c00c1e 	bne	r2,r3,802e2f8 <__smakebuf_r+0x9c>
 802e2c8:	8140038f 	ldh	r5,14(r16)
 802e2cc:	8809883a 	mov	r4,r17
 802e2d0:	80355cc0 	call	80355cc <_isatty_r>
 802e2d4:	10000826 	beq	r2,zero,802e2f8 <__smakebuf_r+0x9c>
 802e2d8:	80c0030b 	ldhu	r3,12(r16)
 802e2dc:	808010c4 	addi	r2,r16,67
 802e2e0:	80800015 	stw	r2,0(r16)
 802e2e4:	18c00054 	ori	r3,r3,1
 802e2e8:	80800415 	stw	r2,16(r16)
 802e2ec:	00800044 	movi	r2,1
 802e2f0:	80c0030d 	sth	r3,12(r16)
 802e2f4:	80800515 	stw	r2,20(r16)
 802e2f8:	04810004 	movi	r18,1024
 802e2fc:	8809883a 	mov	r4,r17
 802e300:	900b883a 	mov	r5,r18
 802e304:	802e42c0 	call	802e42c <_malloc_r>
 802e308:	10003026 	beq	r2,zero,802e3cc <__smakebuf_r+0x170>
 802e30c:	80c0030b 	ldhu	r3,12(r16)
 802e310:	010200f4 	movhi	r4,2051
 802e314:	21335f04 	addi	r4,r4,-12932
 802e318:	89000f15 	stw	r4,60(r17)
 802e31c:	18c02014 	ori	r3,r3,128
 802e320:	80c0030d 	sth	r3,12(r16)
 802e324:	80800015 	stw	r2,0(r16)
 802e328:	80800415 	stw	r2,16(r16)
 802e32c:	84800515 	stw	r18,20(r16)
 802e330:	dfc01217 	ldw	ra,72(sp)
 802e334:	dc801117 	ldw	r18,68(sp)
 802e338:	dc401017 	ldw	r17,64(sp)
 802e33c:	dc000f17 	ldw	r16,60(sp)
 802e340:	dec01304 	addi	sp,sp,76
 802e344:	f800283a 	ret
 802e348:	8080030b 	ldhu	r2,12(r16)
 802e34c:	10c0200c 	andi	r3,r2,128
 802e350:	18ffffcc 	andi	r3,r3,65535
 802e354:	18e0001c 	xori	r3,r3,32768
 802e358:	18e00004 	addi	r3,r3,-32768
 802e35c:	18000f1e 	bne	r3,zero,802e39c <__smakebuf_r+0x140>
 802e360:	04810004 	movi	r18,1024
 802e364:	10820014 	ori	r2,r2,2048
 802e368:	8080030d 	sth	r2,12(r16)
 802e36c:	003fe306 	br	802e2fc <__smakebuf_r+0xa0>
 802e370:	288010c4 	addi	r2,r5,67
 802e374:	28800015 	stw	r2,0(r5)
 802e378:	28800415 	stw	r2,16(r5)
 802e37c:	00800044 	movi	r2,1
 802e380:	28800515 	stw	r2,20(r5)
 802e384:	dfc01217 	ldw	ra,72(sp)
 802e388:	dc801117 	ldw	r18,68(sp)
 802e38c:	dc401017 	ldw	r17,64(sp)
 802e390:	dc000f17 	ldw	r16,60(sp)
 802e394:	dec01304 	addi	sp,sp,76
 802e398:	f800283a 	ret
 802e39c:	04801004 	movi	r18,64
 802e3a0:	003ff006 	br	802e364 <__smakebuf_r+0x108>
 802e3a4:	81000a17 	ldw	r4,40(r16)
 802e3a8:	00c200f4 	movhi	r3,2051
 802e3ac:	18fd3e04 	addi	r3,r3,-2824
 802e3b0:	20ffc01e 	bne	r4,r3,802e2b4 <__smakebuf_r+0x58>
 802e3b4:	8080030b 	ldhu	r2,12(r16)
 802e3b8:	00c10004 	movi	r3,1024
 802e3bc:	80c01315 	stw	r3,76(r16)
 802e3c0:	10c4b03a 	or	r2,r2,r3
 802e3c4:	8080030d 	sth	r2,12(r16)
 802e3c8:	003fcb06 	br	802e2f8 <__smakebuf_r+0x9c>
 802e3cc:	8080030b 	ldhu	r2,12(r16)
 802e3d0:	10c0800c 	andi	r3,r2,512
 802e3d4:	18ffffcc 	andi	r3,r3,65535
 802e3d8:	18e0001c 	xori	r3,r3,32768
 802e3dc:	18e00004 	addi	r3,r3,-32768
 802e3e0:	183fd31e 	bne	r3,zero,802e330 <__smakebuf_r+0xd4>
 802e3e4:	10800094 	ori	r2,r2,2
 802e3e8:	80c010c4 	addi	r3,r16,67
 802e3ec:	8080030d 	sth	r2,12(r16)
 802e3f0:	00800044 	movi	r2,1
 802e3f4:	80c00015 	stw	r3,0(r16)
 802e3f8:	80c00415 	stw	r3,16(r16)
 802e3fc:	80800515 	stw	r2,20(r16)
 802e400:	003fcb06 	br	802e330 <__smakebuf_r+0xd4>

0802e404 <malloc>:
 802e404:	00820134 	movhi	r2,2052
 802e408:	108c4504 	addi	r2,r2,12564
 802e40c:	200b883a 	mov	r5,r4
 802e410:	11000017 	ldw	r4,0(r2)
 802e414:	802e42c1 	jmpi	802e42c <_malloc_r>

0802e418 <free>:
 802e418:	00820134 	movhi	r2,2052
 802e41c:	108c4504 	addi	r2,r2,12564
 802e420:	200b883a 	mov	r5,r4
 802e424:	11000017 	ldw	r4,0(r2)
 802e428:	802d5a81 	jmpi	802d5a8 <_free_r>

0802e42c <_malloc_r>:
 802e42c:	defff604 	addi	sp,sp,-40
 802e430:	dc800215 	stw	r18,8(sp)
 802e434:	dfc00915 	stw	ra,36(sp)
 802e438:	df000815 	stw	fp,32(sp)
 802e43c:	ddc00715 	stw	r23,28(sp)
 802e440:	dd800615 	stw	r22,24(sp)
 802e444:	dd400515 	stw	r21,20(sp)
 802e448:	dd000415 	stw	r20,16(sp)
 802e44c:	dcc00315 	stw	r19,12(sp)
 802e450:	dc400115 	stw	r17,4(sp)
 802e454:	dc000015 	stw	r16,0(sp)
 802e458:	288002c4 	addi	r2,r5,11
 802e45c:	00c00584 	movi	r3,22
 802e460:	2025883a 	mov	r18,r4
 802e464:	18802b2e 	bgeu	r3,r2,802e514 <_malloc_r+0xe8>
 802e468:	047ffe04 	movi	r17,-8
 802e46c:	1462703a 	and	r17,r2,r17
 802e470:	88002a16 	blt	r17,zero,802e51c <_malloc_r+0xf0>
 802e474:	89402936 	bltu	r17,r5,802e51c <_malloc_r+0xf0>
 802e478:	9009883a 	mov	r4,r18
 802e47c:	803c5300 	call	803c530 <__malloc_lock>
 802e480:	00807dc4 	movi	r2,503
 802e484:	14402936 	bltu	r2,r17,802e52c <_malloc_r+0x100>
 802e488:	8808d0fa 	srli	r4,r17,3
 802e48c:	04c20134 	movhi	r19,2052
 802e490:	9cc6a404 	addi	r19,r19,6800
 802e494:	2105883a 	add	r2,r4,r4
 802e498:	1085883a 	add	r2,r2,r2
 802e49c:	1085883a 	add	r2,r2,r2
 802e4a0:	9885883a 	add	r2,r19,r2
 802e4a4:	14000317 	ldw	r16,12(r2)
 802e4a8:	80815526 	beq	r16,r2,802ea00 <_malloc_r+0x5d4>
 802e4ac:	81000117 	ldw	r4,4(r16)
 802e4b0:	00bfff04 	movi	r2,-4
 802e4b4:	80c00317 	ldw	r3,12(r16)
 802e4b8:	2084703a 	and	r2,r4,r2
 802e4bc:	8085883a 	add	r2,r16,r2
 802e4c0:	11800117 	ldw	r6,4(r2)
 802e4c4:	81400217 	ldw	r5,8(r16)
 802e4c8:	9009883a 	mov	r4,r18
 802e4cc:	31800054 	ori	r6,r6,1
 802e4d0:	11800115 	stw	r6,4(r2)
 802e4d4:	28c00315 	stw	r3,12(r5)
 802e4d8:	19400215 	stw	r5,8(r3)
 802e4dc:	803c5500 	call	803c550 <__malloc_unlock>
 802e4e0:	80800204 	addi	r2,r16,8
 802e4e4:	dfc00917 	ldw	ra,36(sp)
 802e4e8:	df000817 	ldw	fp,32(sp)
 802e4ec:	ddc00717 	ldw	r23,28(sp)
 802e4f0:	dd800617 	ldw	r22,24(sp)
 802e4f4:	dd400517 	ldw	r21,20(sp)
 802e4f8:	dd000417 	ldw	r20,16(sp)
 802e4fc:	dcc00317 	ldw	r19,12(sp)
 802e500:	dc800217 	ldw	r18,8(sp)
 802e504:	dc400117 	ldw	r17,4(sp)
 802e508:	dc000017 	ldw	r16,0(sp)
 802e50c:	dec00a04 	addi	sp,sp,40
 802e510:	f800283a 	ret
 802e514:	04400404 	movi	r17,16
 802e518:	897fd72e 	bgeu	r17,r5,802e478 <_malloc_r+0x4c>
 802e51c:	00800304 	movi	r2,12
 802e520:	90800015 	stw	r2,0(r18)
 802e524:	0005883a 	mov	r2,zero
 802e528:	003fee06 	br	802e4e4 <_malloc_r+0xb8>
 802e52c:	8808d27a 	srli	r4,r17,9
 802e530:	20007126 	beq	r4,zero,802e6f8 <_malloc_r+0x2cc>
 802e534:	00800104 	movi	r2,4
 802e538:	1100eb36 	bltu	r2,r4,802e8e8 <_malloc_r+0x4bc>
 802e53c:	8808d1ba 	srli	r4,r17,6
 802e540:	21000e04 	addi	r4,r4,56
 802e544:	210b883a 	add	r5,r4,r4
 802e548:	294b883a 	add	r5,r5,r5
 802e54c:	294b883a 	add	r5,r5,r5
 802e550:	04c20134 	movhi	r19,2052
 802e554:	9cc6a404 	addi	r19,r19,6800
 802e558:	994b883a 	add	r5,r19,r5
 802e55c:	2c000317 	ldw	r16,12(r5)
 802e560:	2c000e26 	beq	r5,r16,802e59c <_malloc_r+0x170>
 802e564:	80c00117 	ldw	r3,4(r16)
 802e568:	01ffff04 	movi	r7,-4
 802e56c:	018003c4 	movi	r6,15
 802e570:	19c6703a 	and	r3,r3,r7
 802e574:	1c45c83a 	sub	r2,r3,r17
 802e578:	30800716 	blt	r6,r2,802e598 <_malloc_r+0x16c>
 802e57c:	1000610e 	bge	r2,zero,802e704 <_malloc_r+0x2d8>
 802e580:	84000317 	ldw	r16,12(r16)
 802e584:	2c000526 	beq	r5,r16,802e59c <_malloc_r+0x170>
 802e588:	80c00117 	ldw	r3,4(r16)
 802e58c:	19c6703a 	and	r3,r3,r7
 802e590:	1c45c83a 	sub	r2,r3,r17
 802e594:	30bff90e 	bge	r6,r2,802e57c <_malloc_r+0x150>
 802e598:	213fffc4 	addi	r4,r4,-1
 802e59c:	21000044 	addi	r4,r4,1
 802e5a0:	9c000417 	ldw	r16,16(r19)
 802e5a4:	00c20134 	movhi	r3,2052
 802e5a8:	18c6a404 	addi	r3,r3,6800
 802e5ac:	1a400204 	addi	r9,r3,8
 802e5b0:	8240ff26 	beq	r16,r9,802e9b0 <_malloc_r+0x584>
 802e5b4:	81400117 	ldw	r5,4(r16)
 802e5b8:	00bfff04 	movi	r2,-4
 802e5bc:	018003c4 	movi	r6,15
 802e5c0:	2884703a 	and	r2,r5,r2
 802e5c4:	144bc83a 	sub	r5,r2,r17
 802e5c8:	3140ea16 	blt	r6,r5,802e974 <_malloc_r+0x548>
 802e5cc:	1a400515 	stw	r9,20(r3)
 802e5d0:	1a400415 	stw	r9,16(r3)
 802e5d4:	2800570e 	bge	r5,zero,802e734 <_malloc_r+0x308>
 802e5d8:	01407fc4 	movi	r5,511
 802e5dc:	2880ca36 	bltu	r5,r2,802e908 <_malloc_r+0x4dc>
 802e5e0:	1004d0fa 	srli	r2,r2,3
 802e5e4:	02000044 	movi	r8,1
 802e5e8:	19c00117 	ldw	r7,4(r3)
 802e5ec:	108b883a 	add	r5,r2,r2
 802e5f0:	294b883a 	add	r5,r5,r5
 802e5f4:	1005d0ba 	srai	r2,r2,2
 802e5f8:	294b883a 	add	r5,r5,r5
 802e5fc:	28cb883a 	add	r5,r5,r3
 802e600:	29800217 	ldw	r6,8(r5)
 802e604:	4084983a 	sll	r2,r8,r2
 802e608:	81400315 	stw	r5,12(r16)
 802e60c:	81800215 	stw	r6,8(r16)
 802e610:	11c4b03a 	or	r2,r2,r7
 802e614:	18800115 	stw	r2,4(r3)
 802e618:	2c000215 	stw	r16,8(r5)
 802e61c:	34000315 	stw	r16,12(r6)
 802e620:	200bd0ba 	srai	r5,r4,2
 802e624:	00c00044 	movi	r3,1
 802e628:	194a983a 	sll	r5,r3,r5
 802e62c:	11404936 	bltu	r2,r5,802e754 <_malloc_r+0x328>
 802e630:	1146703a 	and	r3,r2,r5
 802e634:	18000a1e 	bne	r3,zero,802e660 <_malloc_r+0x234>
 802e638:	00ffff04 	movi	r3,-4
 802e63c:	294b883a 	add	r5,r5,r5
 802e640:	20c8703a 	and	r4,r4,r3
 802e644:	1146703a 	and	r3,r2,r5
 802e648:	21000104 	addi	r4,r4,4
 802e64c:	1800041e 	bne	r3,zero,802e660 <_malloc_r+0x234>
 802e650:	294b883a 	add	r5,r5,r5
 802e654:	1146703a 	and	r3,r2,r5
 802e658:	21000104 	addi	r4,r4,4
 802e65c:	183ffc26 	beq	r3,zero,802e650 <_malloc_r+0x224>
 802e660:	023fff04 	movi	r8,-4
 802e664:	01c003c4 	movi	r7,15
 802e668:	2105883a 	add	r2,r4,r4
 802e66c:	1085883a 	add	r2,r2,r2
 802e670:	1085883a 	add	r2,r2,r2
 802e674:	9899883a 	add	r12,r19,r2
 802e678:	62800304 	addi	r10,r12,12
 802e67c:	2017883a 	mov	r11,r4
 802e680:	54000017 	ldw	r16,0(r10)
 802e684:	51bffd04 	addi	r6,r10,-12
 802e688:	8180041e 	bne	r16,r6,802e69c <_malloc_r+0x270>
 802e68c:	0000ca06 	br	802e9b8 <_malloc_r+0x58c>
 802e690:	10001c0e 	bge	r2,zero,802e704 <_malloc_r+0x2d8>
 802e694:	84000317 	ldw	r16,12(r16)
 802e698:	8180c726 	beq	r16,r6,802e9b8 <_malloc_r+0x58c>
 802e69c:	80c00117 	ldw	r3,4(r16)
 802e6a0:	1a06703a 	and	r3,r3,r8
 802e6a4:	1c45c83a 	sub	r2,r3,r17
 802e6a8:	38bff90e 	bge	r7,r2,802e690 <_malloc_r+0x264>
 802e6ac:	81000317 	ldw	r4,12(r16)
 802e6b0:	81400217 	ldw	r5,8(r16)
 802e6b4:	8447883a 	add	r3,r16,r17
 802e6b8:	8c400054 	ori	r17,r17,1
 802e6bc:	29000315 	stw	r4,12(r5)
 802e6c0:	21400215 	stw	r5,8(r4)
 802e6c4:	84400115 	stw	r17,4(r16)
 802e6c8:	1889883a 	add	r4,r3,r2
 802e6cc:	11400054 	ori	r5,r2,1
 802e6d0:	98c00515 	stw	r3,20(r19)
 802e6d4:	98c00415 	stw	r3,16(r19)
 802e6d8:	20800015 	stw	r2,0(r4)
 802e6dc:	1a400315 	stw	r9,12(r3)
 802e6e0:	1a400215 	stw	r9,8(r3)
 802e6e4:	19400115 	stw	r5,4(r3)
 802e6e8:	9009883a 	mov	r4,r18
 802e6ec:	803c5500 	call	803c550 <__malloc_unlock>
 802e6f0:	80800204 	addi	r2,r16,8
 802e6f4:	003f7b06 	br	802e4e4 <_malloc_r+0xb8>
 802e6f8:	8808d0fa 	srli	r4,r17,3
 802e6fc:	210b883a 	add	r5,r4,r4
 802e700:	003f9106 	br	802e548 <_malloc_r+0x11c>
 802e704:	80c7883a 	add	r3,r16,r3
 802e708:	19400117 	ldw	r5,4(r3)
 802e70c:	80800317 	ldw	r2,12(r16)
 802e710:	81000217 	ldw	r4,8(r16)
 802e714:	29400054 	ori	r5,r5,1
 802e718:	19400115 	stw	r5,4(r3)
 802e71c:	20800315 	stw	r2,12(r4)
 802e720:	11000215 	stw	r4,8(r2)
 802e724:	9009883a 	mov	r4,r18
 802e728:	803c5500 	call	803c550 <__malloc_unlock>
 802e72c:	80800204 	addi	r2,r16,8
 802e730:	003f6c06 	br	802e4e4 <_malloc_r+0xb8>
 802e734:	8085883a 	add	r2,r16,r2
 802e738:	10c00117 	ldw	r3,4(r2)
 802e73c:	9009883a 	mov	r4,r18
 802e740:	18c00054 	ori	r3,r3,1
 802e744:	10c00115 	stw	r3,4(r2)
 802e748:	803c5500 	call	803c550 <__malloc_unlock>
 802e74c:	80800204 	addi	r2,r16,8
 802e750:	003f6406 	br	802e4e4 <_malloc_r+0xb8>
 802e754:	9c000217 	ldw	r16,8(r19)
 802e758:	00bfff04 	movi	r2,-4
 802e75c:	85400117 	ldw	r21,4(r16)
 802e760:	a8aa703a 	and	r21,r21,r2
 802e764:	ac400336 	bltu	r21,r17,802e774 <_malloc_r+0x348>
 802e768:	ac45c83a 	sub	r2,r21,r17
 802e76c:	00c003c4 	movi	r3,15
 802e770:	18805316 	blt	r3,r2,802e8c0 <_malloc_r+0x494>
 802e774:	d5e6ed17 	ldw	r23,-25676(gp)
 802e778:	d0e00717 	ldw	r3,-32740(gp)
 802e77c:	00bfffc4 	movi	r2,-1
 802e780:	8579883a 	add	fp,r16,r21
 802e784:	8def883a 	add	r23,r17,r23
 802e788:	1880d226 	beq	r3,r2,802ead4 <_malloc_r+0x6a8>
 802e78c:	bdc403c4 	addi	r23,r23,4111
 802e790:	00bc0004 	movi	r2,-4096
 802e794:	b8ae703a 	and	r23,r23,r2
 802e798:	9009883a 	mov	r4,r18
 802e79c:	b80b883a 	mov	r5,r23
 802e7a0:	802f18c0 	call	802f18c <_sbrk_r>
 802e7a4:	1029883a 	mov	r20,r2
 802e7a8:	00bfffc4 	movi	r2,-1
 802e7ac:	a080d126 	beq	r20,r2,802eaf4 <_malloc_r+0x6c8>
 802e7b0:	a7009f36 	bltu	r20,fp,802ea30 <_malloc_r+0x604>
 802e7b4:	05820134 	movhi	r22,2052
 802e7b8:	b5933704 	addi	r22,r22,19676
 802e7bc:	b0800017 	ldw	r2,0(r22)
 802e7c0:	b885883a 	add	r2,r23,r2
 802e7c4:	b0800015 	stw	r2,0(r22)
 802e7c8:	e500cf26 	beq	fp,r20,802eb08 <_malloc_r+0x6dc>
 802e7cc:	d1200717 	ldw	r4,-32740(gp)
 802e7d0:	00ffffc4 	movi	r3,-1
 802e7d4:	20c0e026 	beq	r4,r3,802eb58 <_malloc_r+0x72c>
 802e7d8:	a739c83a 	sub	fp,r20,fp
 802e7dc:	1705883a 	add	r2,r2,fp
 802e7e0:	b0800015 	stw	r2,0(r22)
 802e7e4:	a08001cc 	andi	r2,r20,7
 802e7e8:	1000a526 	beq	r2,zero,802ea80 <_malloc_r+0x654>
 802e7ec:	a0a9c83a 	sub	r20,r20,r2
 802e7f0:	00c40204 	movi	r3,4104
 802e7f4:	a5000204 	addi	r20,r20,8
 802e7f8:	1885c83a 	sub	r2,r3,r2
 802e7fc:	a5c7883a 	add	r3,r20,r23
 802e800:	18c3ffcc 	andi	r3,r3,4095
 802e804:	10efc83a 	sub	r23,r2,r3
 802e808:	9009883a 	mov	r4,r18
 802e80c:	b80b883a 	mov	r5,r23
 802e810:	802f18c0 	call	802f18c <_sbrk_r>
 802e814:	00ffffc4 	movi	r3,-1
 802e818:	10c0cc26 	beq	r2,r3,802eb4c <_malloc_r+0x720>
 802e81c:	1505c83a 	sub	r2,r2,r20
 802e820:	b887883a 	add	r3,r23,r2
 802e824:	18c00054 	ori	r3,r3,1
 802e828:	b0800017 	ldw	r2,0(r22)
 802e82c:	9d000215 	stw	r20,8(r19)
 802e830:	a0c00115 	stw	r3,4(r20)
 802e834:	b885883a 	add	r2,r23,r2
 802e838:	b0800015 	stw	r2,0(r22)
 802e83c:	84c00e26 	beq	r16,r19,802e878 <_malloc_r+0x44c>
 802e840:	00c003c4 	movi	r3,15
 802e844:	1d40902e 	bgeu	r3,r21,802ea88 <_malloc_r+0x65c>
 802e848:	ad7ffd04 	addi	r21,r21,-12
 802e84c:	013ffe04 	movi	r4,-8
 802e850:	a908703a 	and	r4,r21,r4
 802e854:	810b883a 	add	r5,r16,r4
 802e858:	01800144 	movi	r6,5
 802e85c:	29800115 	stw	r6,4(r5)
 802e860:	29800215 	stw	r6,8(r5)
 802e864:	81400117 	ldw	r5,4(r16)
 802e868:	2940004c 	andi	r5,r5,1
 802e86c:	214ab03a 	or	r5,r4,r5
 802e870:	81400115 	stw	r5,4(r16)
 802e874:	1900ae36 	bltu	r3,r4,802eb30 <_malloc_r+0x704>
 802e878:	d0e6ec17 	ldw	r3,-25680(gp)
 802e87c:	1880012e 	bgeu	r3,r2,802e884 <_malloc_r+0x458>
 802e880:	d0a6ec15 	stw	r2,-25680(gp)
 802e884:	d0e6eb17 	ldw	r3,-25684(gp)
 802e888:	9c000217 	ldw	r16,8(r19)
 802e88c:	1880012e 	bgeu	r3,r2,802e894 <_malloc_r+0x468>
 802e890:	d0a6eb15 	stw	r2,-25684(gp)
 802e894:	80c00117 	ldw	r3,4(r16)
 802e898:	00bfff04 	movi	r2,-4
 802e89c:	1886703a 	and	r3,r3,r2
 802e8a0:	1c45c83a 	sub	r2,r3,r17
 802e8a4:	1c400236 	bltu	r3,r17,802e8b0 <_malloc_r+0x484>
 802e8a8:	00c003c4 	movi	r3,15
 802e8ac:	18800416 	blt	r3,r2,802e8c0 <_malloc_r+0x494>
 802e8b0:	9009883a 	mov	r4,r18
 802e8b4:	803c5500 	call	803c550 <__malloc_unlock>
 802e8b8:	0005883a 	mov	r2,zero
 802e8bc:	003f0906 	br	802e4e4 <_malloc_r+0xb8>
 802e8c0:	88c00054 	ori	r3,r17,1
 802e8c4:	10800054 	ori	r2,r2,1
 802e8c8:	80c00115 	stw	r3,4(r16)
 802e8cc:	8463883a 	add	r17,r16,r17
 802e8d0:	88800115 	stw	r2,4(r17)
 802e8d4:	9009883a 	mov	r4,r18
 802e8d8:	9c400215 	stw	r17,8(r19)
 802e8dc:	803c5500 	call	803c550 <__malloc_unlock>
 802e8e0:	80800204 	addi	r2,r16,8
 802e8e4:	003eff06 	br	802e4e4 <_malloc_r+0xb8>
 802e8e8:	00800504 	movi	r2,20
 802e8ec:	1100492e 	bgeu	r2,r4,802ea14 <_malloc_r+0x5e8>
 802e8f0:	00801504 	movi	r2,84
 802e8f4:	11005c36 	bltu	r2,r4,802ea68 <_malloc_r+0x63c>
 802e8f8:	8808d33a 	srli	r4,r17,12
 802e8fc:	21001b84 	addi	r4,r4,110
 802e900:	210b883a 	add	r5,r4,r4
 802e904:	003f1006 	br	802e548 <_malloc_r+0x11c>
 802e908:	1006d27a 	srli	r3,r2,9
 802e90c:	01400104 	movi	r5,4
 802e910:	28c0432e 	bgeu	r5,r3,802ea20 <_malloc_r+0x5f4>
 802e914:	01400504 	movi	r5,20
 802e918:	28c07036 	bltu	r5,r3,802eadc <_malloc_r+0x6b0>
 802e91c:	194016c4 	addi	r5,r3,91
 802e920:	294d883a 	add	r6,r5,r5
 802e924:	318d883a 	add	r6,r6,r6
 802e928:	318d883a 	add	r6,r6,r6
 802e92c:	998d883a 	add	r6,r19,r6
 802e930:	30c00217 	ldw	r3,8(r6)
 802e934:	01c20134 	movhi	r7,2052
 802e938:	39c6a404 	addi	r7,r7,6800
 802e93c:	19805726 	beq	r3,r6,802ea9c <_malloc_r+0x670>
 802e940:	01ffff04 	movi	r7,-4
 802e944:	19400117 	ldw	r5,4(r3)
 802e948:	29ca703a 	and	r5,r5,r7
 802e94c:	1140022e 	bgeu	r2,r5,802e958 <_malloc_r+0x52c>
 802e950:	18c00217 	ldw	r3,8(r3)
 802e954:	30fffb1e 	bne	r6,r3,802e944 <_malloc_r+0x518>
 802e958:	19400317 	ldw	r5,12(r3)
 802e95c:	98800117 	ldw	r2,4(r19)
 802e960:	81400315 	stw	r5,12(r16)
 802e964:	80c00215 	stw	r3,8(r16)
 802e968:	2c000215 	stw	r16,8(r5)
 802e96c:	1c000315 	stw	r16,12(r3)
 802e970:	003f2b06 	br	802e620 <_malloc_r+0x1f4>
 802e974:	8445883a 	add	r2,r16,r17
 802e978:	8c400054 	ori	r17,r17,1
 802e97c:	18800515 	stw	r2,20(r3)
 802e980:	18800415 	stw	r2,16(r3)
 802e984:	29000054 	ori	r4,r5,1
 802e988:	1147883a 	add	r3,r2,r5
 802e98c:	84400115 	stw	r17,4(r16)
 802e990:	11000115 	stw	r4,4(r2)
 802e994:	12400315 	stw	r9,12(r2)
 802e998:	12400215 	stw	r9,8(r2)
 802e99c:	19400015 	stw	r5,0(r3)
 802e9a0:	9009883a 	mov	r4,r18
 802e9a4:	803c5500 	call	803c550 <__malloc_unlock>
 802e9a8:	80800204 	addi	r2,r16,8
 802e9ac:	003ecd06 	br	802e4e4 <_malloc_r+0xb8>
 802e9b0:	18800117 	ldw	r2,4(r3)
 802e9b4:	003f1a06 	br	802e620 <_malloc_r+0x1f4>
 802e9b8:	5ac00044 	addi	r11,r11,1
 802e9bc:	588000cc 	andi	r2,r11,3
 802e9c0:	52800204 	addi	r10,r10,8
 802e9c4:	103f2e1e 	bne	r2,zero,802e680 <_malloc_r+0x254>
 802e9c8:	20c000cc 	andi	r3,r4,3
 802e9cc:	60bffe04 	addi	r2,r12,-8
 802e9d0:	18006f26 	beq	r3,zero,802eb90 <_malloc_r+0x764>
 802e9d4:	63000017 	ldw	r12,0(r12)
 802e9d8:	213fffc4 	addi	r4,r4,-1
 802e9dc:	60bffa26 	beq	r12,r2,802e9c8 <_malloc_r+0x59c>
 802e9e0:	98800117 	ldw	r2,4(r19)
 802e9e4:	294b883a 	add	r5,r5,r5
 802e9e8:	117f5a36 	bltu	r2,r5,802e754 <_malloc_r+0x328>
 802e9ec:	283f5926 	beq	r5,zero,802e754 <_malloc_r+0x328>
 802e9f0:	1146703a 	and	r3,r2,r5
 802e9f4:	18001626 	beq	r3,zero,802ea50 <_malloc_r+0x624>
 802e9f8:	5809883a 	mov	r4,r11
 802e9fc:	003f1a06 	br	802e668 <_malloc_r+0x23c>
 802ea00:	80800204 	addi	r2,r16,8
 802ea04:	84000517 	ldw	r16,20(r16)
 802ea08:	143ea81e 	bne	r2,r16,802e4ac <_malloc_r+0x80>
 802ea0c:	21000084 	addi	r4,r4,2
 802ea10:	003ee306 	br	802e5a0 <_malloc_r+0x174>
 802ea14:	210016c4 	addi	r4,r4,91
 802ea18:	210b883a 	add	r5,r4,r4
 802ea1c:	003eca06 	br	802e548 <_malloc_r+0x11c>
 802ea20:	100ad1ba 	srli	r5,r2,6
 802ea24:	29400e04 	addi	r5,r5,56
 802ea28:	294d883a 	add	r6,r5,r5
 802ea2c:	003fbd06 	br	802e924 <_malloc_r+0x4f8>
 802ea30:	84ff6026 	beq	r16,r19,802e7b4 <_malloc_r+0x388>
 802ea34:	00820134 	movhi	r2,2052
 802ea38:	1086a404 	addi	r2,r2,6800
 802ea3c:	14000217 	ldw	r16,8(r2)
 802ea40:	00bfff04 	movi	r2,-4
 802ea44:	80c00117 	ldw	r3,4(r16)
 802ea48:	1886703a 	and	r3,r3,r2
 802ea4c:	003f9406 	br	802e8a0 <_malloc_r+0x474>
 802ea50:	294b883a 	add	r5,r5,r5
 802ea54:	1146703a 	and	r3,r2,r5
 802ea58:	5ac00104 	addi	r11,r11,4
 802ea5c:	183ffc26 	beq	r3,zero,802ea50 <_malloc_r+0x624>
 802ea60:	5809883a 	mov	r4,r11
 802ea64:	003f0006 	br	802e668 <_malloc_r+0x23c>
 802ea68:	00805504 	movi	r2,340
 802ea6c:	11001336 	bltu	r2,r4,802eabc <_malloc_r+0x690>
 802ea70:	8808d3fa 	srli	r4,r17,15
 802ea74:	21001dc4 	addi	r4,r4,119
 802ea78:	210b883a 	add	r5,r4,r4
 802ea7c:	003eb206 	br	802e548 <_malloc_r+0x11c>
 802ea80:	00840004 	movi	r2,4096
 802ea84:	003f5d06 	br	802e7fc <_malloc_r+0x3d0>
 802ea88:	00800044 	movi	r2,1
 802ea8c:	a0800115 	stw	r2,4(r20)
 802ea90:	a021883a 	mov	r16,r20
 802ea94:	0007883a 	mov	r3,zero
 802ea98:	003f8106 	br	802e8a0 <_malloc_r+0x474>
 802ea9c:	280bd0ba 	srai	r5,r5,2
 802eaa0:	01800044 	movi	r6,1
 802eaa4:	38800117 	ldw	r2,4(r7)
 802eaa8:	314c983a 	sll	r6,r6,r5
 802eaac:	180b883a 	mov	r5,r3
 802eab0:	3084b03a 	or	r2,r6,r2
 802eab4:	38800115 	stw	r2,4(r7)
 802eab8:	003fa906 	br	802e960 <_malloc_r+0x534>
 802eabc:	00815504 	movi	r2,1364
 802eac0:	11001836 	bltu	r2,r4,802eb24 <_malloc_r+0x6f8>
 802eac4:	8808d4ba 	srli	r4,r17,18
 802eac8:	21001f04 	addi	r4,r4,124
 802eacc:	210b883a 	add	r5,r4,r4
 802ead0:	003e9d06 	br	802e548 <_malloc_r+0x11c>
 802ead4:	bdc00404 	addi	r23,r23,16
 802ead8:	003f2f06 	br	802e798 <_malloc_r+0x36c>
 802eadc:	01401504 	movi	r5,84
 802eae0:	28c01f36 	bltu	r5,r3,802eb60 <_malloc_r+0x734>
 802eae4:	100ad33a 	srli	r5,r2,12
 802eae8:	29401b84 	addi	r5,r5,110
 802eaec:	294d883a 	add	r6,r5,r5
 802eaf0:	003f8c06 	br	802e924 <_malloc_r+0x4f8>
 802eaf4:	9c000217 	ldw	r16,8(r19)
 802eaf8:	00bfff04 	movi	r2,-4
 802eafc:	80c00117 	ldw	r3,4(r16)
 802eb00:	1886703a 	and	r3,r3,r2
 802eb04:	003f6606 	br	802e8a0 <_malloc_r+0x474>
 802eb08:	e0c3ffcc 	andi	r3,fp,4095
 802eb0c:	183f2f1e 	bne	r3,zero,802e7cc <_malloc_r+0x3a0>
 802eb10:	98c00217 	ldw	r3,8(r19)
 802eb14:	bd49883a 	add	r4,r23,r21
 802eb18:	21000054 	ori	r4,r4,1
 802eb1c:	19000115 	stw	r4,4(r3)
 802eb20:	003f5506 	br	802e878 <_malloc_r+0x44c>
 802eb24:	01403f04 	movi	r5,252
 802eb28:	01001f84 	movi	r4,126
 802eb2c:	003e8606 	br	802e548 <_malloc_r+0x11c>
 802eb30:	9009883a 	mov	r4,r18
 802eb34:	81400204 	addi	r5,r16,8
 802eb38:	802d5a80 	call	802d5a8 <_free_r>
 802eb3c:	00820134 	movhi	r2,2052
 802eb40:	10933704 	addi	r2,r2,19676
 802eb44:	10800017 	ldw	r2,0(r2)
 802eb48:	003f4b06 	br	802e878 <_malloc_r+0x44c>
 802eb4c:	00c00044 	movi	r3,1
 802eb50:	002f883a 	mov	r23,zero
 802eb54:	003f3406 	br	802e828 <_malloc_r+0x3fc>
 802eb58:	d5200715 	stw	r20,-32740(gp)
 802eb5c:	003f2106 	br	802e7e4 <_malloc_r+0x3b8>
 802eb60:	01405504 	movi	r5,340
 802eb64:	28c00436 	bltu	r5,r3,802eb78 <_malloc_r+0x74c>
 802eb68:	100ad3fa 	srli	r5,r2,15
 802eb6c:	29401dc4 	addi	r5,r5,119
 802eb70:	294d883a 	add	r6,r5,r5
 802eb74:	003f6b06 	br	802e924 <_malloc_r+0x4f8>
 802eb78:	01415504 	movi	r5,1364
 802eb7c:	28c00936 	bltu	r5,r3,802eba4 <_malloc_r+0x778>
 802eb80:	100ad4ba 	srli	r5,r2,18
 802eb84:	29401f04 	addi	r5,r5,124
 802eb88:	294d883a 	add	r6,r5,r5
 802eb8c:	003f6506 	br	802e924 <_malloc_r+0x4f8>
 802eb90:	98800117 	ldw	r2,4(r19)
 802eb94:	0146303a 	nor	r3,zero,r5
 802eb98:	1884703a 	and	r2,r3,r2
 802eb9c:	98800115 	stw	r2,4(r19)
 802eba0:	003f9006 	br	802e9e4 <_malloc_r+0x5b8>
 802eba4:	01803f04 	movi	r6,252
 802eba8:	01401f84 	movi	r5,126
 802ebac:	003f5d06 	br	802e924 <_malloc_r+0x4f8>

0802ebb0 <memcpy>:
 802ebb0:	defffb04 	addi	sp,sp,-20
 802ebb4:	dc000015 	stw	r16,0(sp)
 802ebb8:	dfc00415 	stw	ra,16(sp)
 802ebbc:	dcc00315 	stw	r19,12(sp)
 802ebc0:	dc800215 	stw	r18,8(sp)
 802ebc4:	dc400115 	stw	r17,4(sp)
 802ebc8:	00c003c4 	movi	r3,15
 802ebcc:	2021883a 	mov	r16,r4
 802ebd0:	3005883a 	mov	r2,r6
 802ebd4:	1980032e 	bgeu	r3,r6,802ebe4 <memcpy+0x34>
 802ebd8:	2906b03a 	or	r3,r5,r4
 802ebdc:	18c000cc 	andi	r3,r3,3
 802ebe0:	18001026 	beq	r3,zero,802ec24 <memcpy+0x74>
 802ebe4:	8007883a 	mov	r3,r16
 802ebe8:	288f883a 	add	r7,r5,r2
 802ebec:	10000526 	beq	r2,zero,802ec04 <memcpy+0x54>
 802ebf0:	29800003 	ldbu	r6,0(r5)
 802ebf4:	18c00044 	addi	r3,r3,1
 802ebf8:	29400044 	addi	r5,r5,1
 802ebfc:	19bfffc5 	stb	r6,-1(r3)
 802ec00:	29fffb1e 	bne	r5,r7,802ebf0 <memcpy+0x40>
 802ec04:	8005883a 	mov	r2,r16
 802ec08:	dfc00417 	ldw	ra,16(sp)
 802ec0c:	dcc00317 	ldw	r19,12(sp)
 802ec10:	dc800217 	ldw	r18,8(sp)
 802ec14:	dc400117 	ldw	r17,4(sp)
 802ec18:	dc000017 	ldw	r16,0(sp)
 802ec1c:	dec00504 	addi	sp,sp,20
 802ec20:	f800283a 	ret
 802ec24:	32bffc04 	addi	r10,r6,-16
 802ec28:	5014d13a 	srli	r10,r10,4
 802ec2c:	20800404 	addi	r2,r4,16
 802ec30:	2007883a 	mov	r3,r4
 802ec34:	5008913a 	slli	r4,r10,4
 802ec38:	280f883a 	mov	r7,r5
 802ec3c:	1105883a 	add	r2,r2,r4
 802ec40:	3a000017 	ldw	r8,0(r7)
 802ec44:	18c00404 	addi	r3,r3,16
 802ec48:	39c00404 	addi	r7,r7,16
 802ec4c:	1a3ffc15 	stw	r8,-16(r3)
 802ec50:	3a3ffd17 	ldw	r8,-12(r7)
 802ec54:	1a3ffd15 	stw	r8,-12(r3)
 802ec58:	3a3ffe17 	ldw	r8,-8(r7)
 802ec5c:	1a3ffe15 	stw	r8,-8(r3)
 802ec60:	3a3fff17 	ldw	r8,-4(r7)
 802ec64:	1a3fff15 	stw	r8,-4(r3)
 802ec68:	18bff51e 	bne	r3,r2,802ec40 <memcpy+0x90>
 802ec6c:	52800044 	addi	r10,r10,1
 802ec70:	5014913a 	slli	r10,r10,4
 802ec74:	308003cc 	andi	r2,r6,15
 802ec78:	010000c4 	movi	r4,3
 802ec7c:	8287883a 	add	r3,r16,r10
 802ec80:	2a95883a 	add	r10,r5,r10
 802ec84:	2080182e 	bgeu	r4,r2,802ece8 <memcpy+0x138>
 802ec88:	147fff04 	addi	r17,r2,-4
 802ec8c:	8808d0ba 	srli	r4,r17,2
 802ec90:	1a400104 	addi	r9,r3,4
 802ec94:	180d883a 	mov	r6,r3
 802ec98:	2105883a 	add	r2,r4,r4
 802ec9c:	1085883a 	add	r2,r2,r2
 802eca0:	4893883a 	add	r9,r9,r2
 802eca4:	500f883a 	mov	r7,r10
 802eca8:	3a000017 	ldw	r8,0(r7)
 802ecac:	31800104 	addi	r6,r6,4
 802ecb0:	39c00104 	addi	r7,r7,4
 802ecb4:	323fff15 	stw	r8,-4(r6)
 802ecb8:	327ffb1e 	bne	r6,r9,802eca8 <memcpy+0xf8>
 802ecbc:	20800044 	addi	r2,r4,1
 802ecc0:	1085883a 	add	r2,r2,r2
 802ecc4:	1085883a 	add	r2,r2,r2
 802ecc8:	017fff04 	movi	r5,-4
 802eccc:	18a5883a 	add	r18,r3,r2
 802ecd0:	50a7883a 	add	r19,r10,r2
 802ecd4:	802c2180 	call	802c218 <__mulsi3>
 802ecd8:	1445883a 	add	r2,r2,r17
 802ecdc:	980b883a 	mov	r5,r19
 802ece0:	9007883a 	mov	r3,r18
 802ece4:	003fc006 	br	802ebe8 <memcpy+0x38>
 802ece8:	500b883a 	mov	r5,r10
 802ecec:	003fbe06 	br	802ebe8 <memcpy+0x38>

0802ecf0 <memset>:
 802ecf0:	00c000c4 	movi	r3,3
 802ecf4:	2005883a 	mov	r2,r4
 802ecf8:	29403fcc 	andi	r5,r5,255
 802ecfc:	19802d2e 	bgeu	r3,r6,802edb4 <memset+0xc4>
 802ed00:	20c6703a 	and	r3,r4,r3
 802ed04:	18002e1e 	bne	r3,zero,802edc0 <memset+0xd0>
 802ed08:	2806923a 	slli	r3,r5,8
 802ed0c:	010003c4 	movi	r4,15
 802ed10:	3011883a 	mov	r8,r6
 802ed14:	1946b03a 	or	r3,r3,r5
 802ed18:	180e943a 	slli	r7,r3,16
 802ed1c:	38ceb03a 	or	r7,r7,r3
 802ed20:	1007883a 	mov	r3,r2
 802ed24:	21800f2e 	bgeu	r4,r6,802ed64 <memset+0x74>
 802ed28:	19c00015 	stw	r7,0(r3)
 802ed2c:	19c00115 	stw	r7,4(r3)
 802ed30:	19c00215 	stw	r7,8(r3)
 802ed34:	19c00315 	stw	r7,12(r3)
 802ed38:	423ffc04 	addi	r8,r8,-16
 802ed3c:	18c00404 	addi	r3,r3,16
 802ed40:	223ff936 	bltu	r4,r8,802ed28 <memset+0x38>
 802ed44:	30fffc04 	addi	r3,r6,-16
 802ed48:	1806d13a 	srli	r3,r3,4
 802ed4c:	318003cc 	andi	r6,r6,15
 802ed50:	010000c4 	movi	r4,3
 802ed54:	18c00044 	addi	r3,r3,1
 802ed58:	1806913a 	slli	r3,r3,4
 802ed5c:	10c7883a 	add	r3,r2,r3
 802ed60:	21800e2e 	bgeu	r4,r6,802ed9c <memset+0xac>
 802ed64:	1813883a 	mov	r9,r3
 802ed68:	3011883a 	mov	r8,r6
 802ed6c:	010000c4 	movi	r4,3
 802ed70:	49c00015 	stw	r7,0(r9)
 802ed74:	423fff04 	addi	r8,r8,-4
 802ed78:	4a400104 	addi	r9,r9,4
 802ed7c:	223ffc36 	bltu	r4,r8,802ed70 <memset+0x80>
 802ed80:	313fff04 	addi	r4,r6,-4
 802ed84:	2008d0ba 	srli	r4,r4,2
 802ed88:	318000cc 	andi	r6,r6,3
 802ed8c:	21000044 	addi	r4,r4,1
 802ed90:	2109883a 	add	r4,r4,r4
 802ed94:	2109883a 	add	r4,r4,r4
 802ed98:	1907883a 	add	r3,r3,r4
 802ed9c:	30000a26 	beq	r6,zero,802edc8 <memset+0xd8>
 802eda0:	198d883a 	add	r6,r3,r6
 802eda4:	19400005 	stb	r5,0(r3)
 802eda8:	18c00044 	addi	r3,r3,1
 802edac:	19bffd1e 	bne	r3,r6,802eda4 <memset+0xb4>
 802edb0:	f800283a 	ret
 802edb4:	2007883a 	mov	r3,r4
 802edb8:	303ff91e 	bne	r6,zero,802eda0 <memset+0xb0>
 802edbc:	00000206 	br	802edc8 <memset+0xd8>
 802edc0:	2007883a 	mov	r3,r4
 802edc4:	003ff606 	br	802eda0 <memset+0xb0>
 802edc8:	f800283a 	ret

0802edcc <_open_r>:
 802edcc:	defffd04 	addi	sp,sp,-12
 802edd0:	dc400115 	stw	r17,4(sp)
 802edd4:	dc000015 	stw	r16,0(sp)
 802edd8:	2023883a 	mov	r17,r4
 802eddc:	04020134 	movhi	r16,2052
 802ede0:	84132904 	addi	r16,r16,19620
 802ede4:	2809883a 	mov	r4,r5
 802ede8:	300b883a 	mov	r5,r6
 802edec:	380d883a 	mov	r6,r7
 802edf0:	dfc00215 	stw	ra,8(sp)
 802edf4:	80000015 	stw	zero,0(r16)
 802edf8:	803c6b00 	call	803c6b0 <open>
 802edfc:	00ffffc4 	movi	r3,-1
 802ee00:	10c00526 	beq	r2,r3,802ee18 <_open_r+0x4c>
 802ee04:	dfc00217 	ldw	ra,8(sp)
 802ee08:	dc400117 	ldw	r17,4(sp)
 802ee0c:	dc000017 	ldw	r16,0(sp)
 802ee10:	dec00304 	addi	sp,sp,12
 802ee14:	f800283a 	ret
 802ee18:	80c00017 	ldw	r3,0(r16)
 802ee1c:	183ff926 	beq	r3,zero,802ee04 <_open_r+0x38>
 802ee20:	88c00015 	stw	r3,0(r17)
 802ee24:	dfc00217 	ldw	ra,8(sp)
 802ee28:	dc400117 	ldw	r17,4(sp)
 802ee2c:	dc000017 	ldw	r16,0(sp)
 802ee30:	dec00304 	addi	sp,sp,12
 802ee34:	f800283a 	ret

0802ee38 <_printf_r>:
 802ee38:	defffd04 	addi	sp,sp,-12
 802ee3c:	dfc00015 	stw	ra,0(sp)
 802ee40:	d9800115 	stw	r6,4(sp)
 802ee44:	d9c00215 	stw	r7,8(sp)
 802ee48:	280d883a 	mov	r6,r5
 802ee4c:	21400217 	ldw	r5,8(r4)
 802ee50:	d9c00104 	addi	r7,sp,4
 802ee54:	802fd180 	call	802fd18 <___vfprintf_internal_r>
 802ee58:	dfc00017 	ldw	ra,0(sp)
 802ee5c:	dec00304 	addi	sp,sp,12
 802ee60:	f800283a 	ret

0802ee64 <printf>:
 802ee64:	defffc04 	addi	sp,sp,-16
 802ee68:	dfc00015 	stw	ra,0(sp)
 802ee6c:	d9400115 	stw	r5,4(sp)
 802ee70:	d9800215 	stw	r6,8(sp)
 802ee74:	d9c00315 	stw	r7,12(sp)
 802ee78:	00820134 	movhi	r2,2052
 802ee7c:	108c4504 	addi	r2,r2,12564
 802ee80:	10800017 	ldw	r2,0(r2)
 802ee84:	200b883a 	mov	r5,r4
 802ee88:	d9800104 	addi	r6,sp,4
 802ee8c:	11000217 	ldw	r4,8(r2)
 802ee90:	8031b940 	call	8031b94 <__vfprintf_internal>
 802ee94:	dfc00017 	ldw	ra,0(sp)
 802ee98:	dec00404 	addi	sp,sp,16
 802ee9c:	f800283a 	ret

0802eea0 <_puts_r>:
 802eea0:	defff604 	addi	sp,sp,-40
 802eea4:	dc400815 	stw	r17,32(sp)
 802eea8:	2023883a 	mov	r17,r4
 802eeac:	2809883a 	mov	r4,r5
 802eeb0:	dc000715 	stw	r16,28(sp)
 802eeb4:	dfc00915 	stw	ra,36(sp)
 802eeb8:	2821883a 	mov	r16,r5
 802eebc:	802f72c0 	call	802f72c <strlen>
 802eec0:	10c00044 	addi	r3,r2,1
 802eec4:	d8800115 	stw	r2,4(sp)
 802eec8:	89400217 	ldw	r5,8(r17)
 802eecc:	00820134 	movhi	r2,2052
 802eed0:	1084f704 	addi	r2,r2,5084
 802eed4:	d8800215 	stw	r2,8(sp)
 802eed8:	00800044 	movi	r2,1
 802eedc:	d8800315 	stw	r2,12(sp)
 802eee0:	8809883a 	mov	r4,r17
 802eee4:	00800084 	movi	r2,2
 802eee8:	d9800404 	addi	r6,sp,16
 802eeec:	dc000015 	stw	r16,0(sp)
 802eef0:	d8c00615 	stw	r3,24(sp)
 802eef4:	dec00415 	stw	sp,16(sp)
 802eef8:	d8800515 	stw	r2,20(sp)
 802eefc:	80350e80 	call	80350e8 <__sfvwrite_r>
 802ef00:	1000061e 	bne	r2,zero,802ef1c <_puts_r+0x7c>
 802ef04:	00800284 	movi	r2,10
 802ef08:	dfc00917 	ldw	ra,36(sp)
 802ef0c:	dc400817 	ldw	r17,32(sp)
 802ef10:	dc000717 	ldw	r16,28(sp)
 802ef14:	dec00a04 	addi	sp,sp,40
 802ef18:	f800283a 	ret
 802ef1c:	00bfffc4 	movi	r2,-1
 802ef20:	003ff906 	br	802ef08 <_puts_r+0x68>

0802ef24 <puts>:
 802ef24:	00820134 	movhi	r2,2052
 802ef28:	108c4504 	addi	r2,r2,12564
 802ef2c:	200b883a 	mov	r5,r4
 802ef30:	11000017 	ldw	r4,0(r2)
 802ef34:	802eea01 	jmpi	802eea0 <_puts_r>

0802ef38 <lflush>:
 802ef38:	20c0030b 	ldhu	r3,12(r4)
 802ef3c:	00800244 	movi	r2,9
 802ef40:	18c0024c 	andi	r3,r3,9
 802ef44:	18800226 	beq	r3,r2,802ef50 <lflush+0x18>
 802ef48:	0005883a 	mov	r2,zero
 802ef4c:	f800283a 	ret
 802ef50:	802cd3c1 	jmpi	802cd3c <fflush>

0802ef54 <__srefill_r>:
 802ef54:	defffd04 	addi	sp,sp,-12
 802ef58:	dc400115 	stw	r17,4(sp)
 802ef5c:	dc000015 	stw	r16,0(sp)
 802ef60:	dfc00215 	stw	ra,8(sp)
 802ef64:	2023883a 	mov	r17,r4
 802ef68:	2821883a 	mov	r16,r5
 802ef6c:	20000226 	beq	r4,zero,802ef78 <__srefill_r+0x24>
 802ef70:	20800e17 	ldw	r2,56(r4)
 802ef74:	10004426 	beq	r2,zero,802f088 <__srefill_r+0x134>
 802ef78:	8080030b 	ldhu	r2,12(r16)
 802ef7c:	80000115 	stw	zero,4(r16)
 802ef80:	10c0080c 	andi	r3,r2,32
 802ef84:	18ffffcc 	andi	r3,r3,65535
 802ef88:	18e0001c 	xori	r3,r3,32768
 802ef8c:	18e00004 	addi	r3,r3,-32768
 802ef90:	1800371e 	bne	r3,zero,802f070 <__srefill_r+0x11c>
 802ef94:	10c0010c 	andi	r3,r2,4
 802ef98:	18ffffcc 	andi	r3,r3,65535
 802ef9c:	18e0001c 	xori	r3,r3,32768
 802efa0:	18e00004 	addi	r3,r3,-32768
 802efa4:	18002226 	beq	r3,zero,802f030 <__srefill_r+0xdc>
 802efa8:	81400c17 	ldw	r5,48(r16)
 802efac:	28000826 	beq	r5,zero,802efd0 <__srefill_r+0x7c>
 802efb0:	80801004 	addi	r2,r16,64
 802efb4:	28800226 	beq	r5,r2,802efc0 <__srefill_r+0x6c>
 802efb8:	8809883a 	mov	r4,r17
 802efbc:	802d5a80 	call	802d5a8 <_free_r>
 802efc0:	80800f17 	ldw	r2,60(r16)
 802efc4:	80000c15 	stw	zero,48(r16)
 802efc8:	80800115 	stw	r2,4(r16)
 802efcc:	1000401e 	bne	r2,zero,802f0d0 <__srefill_r+0x17c>
 802efd0:	80800417 	ldw	r2,16(r16)
 802efd4:	10005026 	beq	r2,zero,802f118 <__srefill_r+0x1c4>
 802efd8:	8080030b 	ldhu	r2,12(r16)
 802efdc:	108000cc 	andi	r2,r2,3
 802efe0:	10002b1e 	bne	r2,zero,802f090 <__srefill_r+0x13c>
 802efe4:	81800417 	ldw	r6,16(r16)
 802efe8:	80800817 	ldw	r2,32(r16)
 802efec:	81400717 	ldw	r5,28(r16)
 802eff0:	81c00517 	ldw	r7,20(r16)
 802eff4:	8809883a 	mov	r4,r17
 802eff8:	81800015 	stw	r6,0(r16)
 802effc:	103ee83a 	callr	r2
 802f000:	8100030b 	ldhu	r4,12(r16)
 802f004:	00f7ffc4 	movi	r3,-8193
 802f008:	80800115 	stw	r2,4(r16)
 802f00c:	20c6703a 	and	r3,r4,r3
 802f010:	80c0030d 	sth	r3,12(r16)
 802f014:	0080130e 	bge	zero,r2,802f064 <__srefill_r+0x110>
 802f018:	0005883a 	mov	r2,zero
 802f01c:	dfc00217 	ldw	ra,8(sp)
 802f020:	dc400117 	ldw	r17,4(sp)
 802f024:	dc000017 	ldw	r16,0(sp)
 802f028:	dec00304 	addi	sp,sp,12
 802f02c:	f800283a 	ret
 802f030:	10c0040c 	andi	r3,r2,16
 802f034:	18ffffcc 	andi	r3,r3,65535
 802f038:	18e0001c 	xori	r3,r3,32768
 802f03c:	18e00004 	addi	r3,r3,-32768
 802f040:	18003926 	beq	r3,zero,802f128 <__srefill_r+0x1d4>
 802f044:	10c0020c 	andi	r3,r2,8
 802f048:	18ffffcc 	andi	r3,r3,65535
 802f04c:	18e0001c 	xori	r3,r3,32768
 802f050:	18e00004 	addi	r3,r3,-32768
 802f054:	1800261e 	bne	r3,zero,802f0f0 <__srefill_r+0x19c>
 802f058:	10800114 	ori	r2,r2,4
 802f05c:	8080030d 	sth	r2,12(r16)
 802f060:	003fdb06 	br	802efd0 <__srefill_r+0x7c>
 802f064:	1000111e 	bne	r2,zero,802f0ac <__srefill_r+0x158>
 802f068:	18c00814 	ori	r3,r3,32
 802f06c:	80c0030d 	sth	r3,12(r16)
 802f070:	00bfffc4 	movi	r2,-1
 802f074:	dfc00217 	ldw	ra,8(sp)
 802f078:	dc400117 	ldw	r17,4(sp)
 802f07c:	dc000017 	ldw	r16,0(sp)
 802f080:	dec00304 	addi	sp,sp,12
 802f084:	f800283a 	ret
 802f088:	802ce100 	call	802ce10 <__sinit>
 802f08c:	003fba06 	br	802ef78 <__srefill_r+0x24>
 802f090:	00820134 	movhi	r2,2052
 802f094:	108c4404 	addi	r2,r2,12560
 802f098:	11000017 	ldw	r4,0(r2)
 802f09c:	014200f4 	movhi	r5,2051
 802f0a0:	297bce04 	addi	r5,r5,-4296
 802f0a4:	802de9c0 	call	802de9c <_fwalk>
 802f0a8:	003fce06 	br	802efe4 <__srefill_r+0x90>
 802f0ac:	18c01014 	ori	r3,r3,64
 802f0b0:	00bfffc4 	movi	r2,-1
 802f0b4:	80000115 	stw	zero,4(r16)
 802f0b8:	80c0030d 	sth	r3,12(r16)
 802f0bc:	dfc00217 	ldw	ra,8(sp)
 802f0c0:	dc400117 	ldw	r17,4(sp)
 802f0c4:	dc000017 	ldw	r16,0(sp)
 802f0c8:	dec00304 	addi	sp,sp,12
 802f0cc:	f800283a 	ret
 802f0d0:	80c00e17 	ldw	r3,56(r16)
 802f0d4:	0005883a 	mov	r2,zero
 802f0d8:	80c00015 	stw	r3,0(r16)
 802f0dc:	dfc00217 	ldw	ra,8(sp)
 802f0e0:	dc400117 	ldw	r17,4(sp)
 802f0e4:	dc000017 	ldw	r16,0(sp)
 802f0e8:	dec00304 	addi	sp,sp,12
 802f0ec:	f800283a 	ret
 802f0f0:	8809883a 	mov	r4,r17
 802f0f4:	800b883a 	mov	r5,r16
 802f0f8:	802cb540 	call	802cb54 <_fflush_r>
 802f0fc:	103fdc1e 	bne	r2,zero,802f070 <__srefill_r+0x11c>
 802f100:	8080030b 	ldhu	r2,12(r16)
 802f104:	00fffdc4 	movi	r3,-9
 802f108:	80000215 	stw	zero,8(r16)
 802f10c:	1884703a 	and	r2,r3,r2
 802f110:	80000615 	stw	zero,24(r16)
 802f114:	003fd006 	br	802f058 <__srefill_r+0x104>
 802f118:	8809883a 	mov	r4,r17
 802f11c:	800b883a 	mov	r5,r16
 802f120:	802e25c0 	call	802e25c <__smakebuf_r>
 802f124:	003fac06 	br	802efd8 <__srefill_r+0x84>
 802f128:	00c00244 	movi	r3,9
 802f12c:	10801014 	ori	r2,r2,64
 802f130:	88c00015 	stw	r3,0(r17)
 802f134:	8080030d 	sth	r2,12(r16)
 802f138:	00bfffc4 	movi	r2,-1
 802f13c:	003fb706 	br	802f01c <__srefill_r+0xc8>

0802f140 <_rewind_r>:
 802f140:	defffe04 	addi	sp,sp,-8
 802f144:	000d883a 	mov	r6,zero
 802f148:	000f883a 	mov	r7,zero
 802f14c:	dc000015 	stw	r16,0(sp)
 802f150:	dfc00115 	stw	ra,4(sp)
 802f154:	2821883a 	mov	r16,r5
 802f158:	802d8780 	call	802d878 <_fseek_r>
 802f15c:	8080030b 	ldhu	r2,12(r16)
 802f160:	10bfe7cc 	andi	r2,r2,65439
 802f164:	8080030d 	sth	r2,12(r16)
 802f168:	dfc00117 	ldw	ra,4(sp)
 802f16c:	dc000017 	ldw	r16,0(sp)
 802f170:	dec00204 	addi	sp,sp,8
 802f174:	f800283a 	ret

0802f178 <rewind>:
 802f178:	00820134 	movhi	r2,2052
 802f17c:	108c4504 	addi	r2,r2,12564
 802f180:	200b883a 	mov	r5,r4
 802f184:	11000017 	ldw	r4,0(r2)
 802f188:	802f1401 	jmpi	802f140 <_rewind_r>

0802f18c <_sbrk_r>:
 802f18c:	defffd04 	addi	sp,sp,-12
 802f190:	dc400115 	stw	r17,4(sp)
 802f194:	dc000015 	stw	r16,0(sp)
 802f198:	2023883a 	mov	r17,r4
 802f19c:	04020134 	movhi	r16,2052
 802f1a0:	84132904 	addi	r16,r16,19620
 802f1a4:	2809883a 	mov	r4,r5
 802f1a8:	dfc00215 	stw	ra,8(sp)
 802f1ac:	80000015 	stw	zero,0(r16)
 802f1b0:	803c9cc0 	call	803c9cc <sbrk>
 802f1b4:	00ffffc4 	movi	r3,-1
 802f1b8:	10c00526 	beq	r2,r3,802f1d0 <_sbrk_r+0x44>
 802f1bc:	dfc00217 	ldw	ra,8(sp)
 802f1c0:	dc400117 	ldw	r17,4(sp)
 802f1c4:	dc000017 	ldw	r16,0(sp)
 802f1c8:	dec00304 	addi	sp,sp,12
 802f1cc:	f800283a 	ret
 802f1d0:	80c00017 	ldw	r3,0(r16)
 802f1d4:	183ff926 	beq	r3,zero,802f1bc <_sbrk_r+0x30>
 802f1d8:	88c00015 	stw	r3,0(r17)
 802f1dc:	dfc00217 	ldw	ra,8(sp)
 802f1e0:	dc400117 	ldw	r17,4(sp)
 802f1e4:	dc000017 	ldw	r16,0(sp)
 802f1e8:	dec00304 	addi	sp,sp,12
 802f1ec:	f800283a 	ret

0802f1f0 <scanf>:
 802f1f0:	defffc04 	addi	sp,sp,-16
 802f1f4:	dfc00015 	stw	ra,0(sp)
 802f1f8:	d9400115 	stw	r5,4(sp)
 802f1fc:	d9800215 	stw	r6,8(sp)
 802f200:	d9c00315 	stw	r7,12(sp)
 802f204:	00820134 	movhi	r2,2052
 802f208:	108c4504 	addi	r2,r2,12564
 802f20c:	10800017 	ldw	r2,0(r2)
 802f210:	200d883a 	mov	r6,r4
 802f214:	d9c00104 	addi	r7,sp,4
 802f218:	11400117 	ldw	r5,4(r2)
 802f21c:	1009883a 	mov	r4,r2
 802f220:	8031bb80 	call	8031bb8 <__svfscanf_r>
 802f224:	dfc00017 	ldw	ra,0(sp)
 802f228:	dec00404 	addi	sp,sp,16
 802f22c:	f800283a 	ret

0802f230 <_scanf_r>:
 802f230:	defffd04 	addi	sp,sp,-12
 802f234:	dfc00015 	stw	ra,0(sp)
 802f238:	d9800115 	stw	r6,4(sp)
 802f23c:	d9c00215 	stw	r7,8(sp)
 802f240:	280d883a 	mov	r6,r5
 802f244:	21400117 	ldw	r5,4(r4)
 802f248:	d9c00104 	addi	r7,sp,4
 802f24c:	8031bb80 	call	8031bb8 <__svfscanf_r>
 802f250:	dfc00017 	ldw	ra,0(sp)
 802f254:	dec00304 	addi	sp,sp,12
 802f258:	f800283a 	ret

0802f25c <_sprintf_r>:
 802f25c:	deffe704 	addi	sp,sp,-100
 802f260:	2807883a 	mov	r3,r5
 802f264:	dfc01715 	stw	ra,92(sp)
 802f268:	d9c01815 	stw	r7,96(sp)
 802f26c:	00a00034 	movhi	r2,32768
 802f270:	10bfffc4 	addi	r2,r2,-1
 802f274:	02008204 	movi	r8,520
 802f278:	d8800215 	stw	r2,8(sp)
 802f27c:	d8800515 	stw	r2,20(sp)
 802f280:	d80b883a 	mov	r5,sp
 802f284:	d9c01804 	addi	r7,sp,96
 802f288:	00bfffc4 	movi	r2,-1
 802f28c:	d8c00015 	stw	r3,0(sp)
 802f290:	d8c00415 	stw	r3,16(sp)
 802f294:	da00030d 	sth	r8,12(sp)
 802f298:	d880038d 	sth	r2,14(sp)
 802f29c:	802fd180 	call	802fd18 <___vfprintf_internal_r>
 802f2a0:	d8c00017 	ldw	r3,0(sp)
 802f2a4:	18000005 	stb	zero,0(r3)
 802f2a8:	dfc01717 	ldw	ra,92(sp)
 802f2ac:	dec01904 	addi	sp,sp,100
 802f2b0:	f800283a 	ret

0802f2b4 <sprintf>:
 802f2b4:	deffe604 	addi	sp,sp,-104
 802f2b8:	2007883a 	mov	r3,r4
 802f2bc:	dfc01715 	stw	ra,92(sp)
 802f2c0:	d9801815 	stw	r6,96(sp)
 802f2c4:	d9c01915 	stw	r7,100(sp)
 802f2c8:	00820134 	movhi	r2,2052
 802f2cc:	108c4504 	addi	r2,r2,12564
 802f2d0:	11000017 	ldw	r4,0(r2)
 802f2d4:	00a00034 	movhi	r2,32768
 802f2d8:	10bfffc4 	addi	r2,r2,-1
 802f2dc:	280d883a 	mov	r6,r5
 802f2e0:	02008204 	movi	r8,520
 802f2e4:	d8800215 	stw	r2,8(sp)
 802f2e8:	d8800515 	stw	r2,20(sp)
 802f2ec:	d80b883a 	mov	r5,sp
 802f2f0:	d9c01804 	addi	r7,sp,96
 802f2f4:	00bfffc4 	movi	r2,-1
 802f2f8:	d8c00015 	stw	r3,0(sp)
 802f2fc:	d8c00415 	stw	r3,16(sp)
 802f300:	da00030d 	sth	r8,12(sp)
 802f304:	d880038d 	sth	r2,14(sp)
 802f308:	802fd180 	call	802fd18 <___vfprintf_internal_r>
 802f30c:	d8c00017 	ldw	r3,0(sp)
 802f310:	18000005 	stb	zero,0(r3)
 802f314:	dfc01717 	ldw	ra,92(sp)
 802f318:	dec01a04 	addi	sp,sp,104
 802f31c:	f800283a 	ret

0802f320 <eofread>:
 802f320:	0005883a 	mov	r2,zero
 802f324:	f800283a 	ret

0802f328 <sscanf>:
 802f328:	deffe504 	addi	sp,sp,-108
 802f32c:	dfc01815 	stw	ra,96(sp)
 802f330:	dc001715 	stw	r16,92(sp)
 802f334:	d9801915 	stw	r6,100(sp)
 802f338:	d9c01a15 	stw	r7,104(sp)
 802f33c:	00c08104 	movi	r3,516
 802f340:	2821883a 	mov	r16,r5
 802f344:	d8c0030d 	sth	r3,12(sp)
 802f348:	d9000015 	stw	r4,0(sp)
 802f34c:	d9000415 	stw	r4,16(sp)
 802f350:	802f72c0 	call	802f72c <strlen>
 802f354:	00c20134 	movhi	r3,2052
 802f358:	18cc4504 	addi	r3,r3,12564
 802f35c:	19000017 	ldw	r4,0(r3)
 802f360:	d8800115 	stw	r2,4(sp)
 802f364:	d8800515 	stw	r2,20(sp)
 802f368:	008200f4 	movhi	r2,2051
 802f36c:	10bcc804 	addi	r2,r2,-3296
 802f370:	d8800815 	stw	r2,32(sp)
 802f374:	d80b883a 	mov	r5,sp
 802f378:	800d883a 	mov	r6,r16
 802f37c:	d9c01904 	addi	r7,sp,100
 802f380:	00bfffc4 	movi	r2,-1
 802f384:	d8000c15 	stw	zero,48(sp)
 802f388:	d8001115 	stw	zero,68(sp)
 802f38c:	d880038d 	sth	r2,14(sp)
 802f390:	8031bb80 	call	8031bb8 <__svfscanf_r>
 802f394:	dfc01817 	ldw	ra,96(sp)
 802f398:	dc001717 	ldw	r16,92(sp)
 802f39c:	dec01b04 	addi	sp,sp,108
 802f3a0:	f800283a 	ret

0802f3a4 <_sscanf_r>:
 802f3a4:	deffe504 	addi	sp,sp,-108
 802f3a8:	dc001815 	stw	r16,96(sp)
 802f3ac:	2021883a 	mov	r16,r4
 802f3b0:	dfc01915 	stw	ra,100(sp)
 802f3b4:	d9c01a15 	stw	r7,104(sp)
 802f3b8:	00808104 	movi	r2,516
 802f3bc:	2809883a 	mov	r4,r5
 802f3c0:	d9400015 	stw	r5,0(sp)
 802f3c4:	d9400415 	stw	r5,16(sp)
 802f3c8:	d9801715 	stw	r6,92(sp)
 802f3cc:	d880030d 	sth	r2,12(sp)
 802f3d0:	802f72c0 	call	802f72c <strlen>
 802f3d4:	d9801717 	ldw	r6,92(sp)
 802f3d8:	d8800115 	stw	r2,4(sp)
 802f3dc:	d8800515 	stw	r2,20(sp)
 802f3e0:	008200f4 	movhi	r2,2051
 802f3e4:	10bcc804 	addi	r2,r2,-3296
 802f3e8:	d8800815 	stw	r2,32(sp)
 802f3ec:	8009883a 	mov	r4,r16
 802f3f0:	d80b883a 	mov	r5,sp
 802f3f4:	d9c01a04 	addi	r7,sp,104
 802f3f8:	00bfffc4 	movi	r2,-1
 802f3fc:	d8000c15 	stw	zero,48(sp)
 802f400:	d8001115 	stw	zero,68(sp)
 802f404:	d880038d 	sth	r2,14(sp)
 802f408:	8031bb80 	call	8031bb8 <__svfscanf_r>
 802f40c:	dfc01917 	ldw	ra,100(sp)
 802f410:	dc001817 	ldw	r16,96(sp)
 802f414:	dec01b04 	addi	sp,sp,108
 802f418:	f800283a 	ret

0802f41c <__sread>:
 802f41c:	defffe04 	addi	sp,sp,-8
 802f420:	dc000015 	stw	r16,0(sp)
 802f424:	2821883a 	mov	r16,r5
 802f428:	2940038f 	ldh	r5,14(r5)
 802f42c:	dfc00115 	stw	ra,4(sp)
 802f430:	8036b6c0 	call	8036b6c <_read_r>
 802f434:	10000716 	blt	r2,zero,802f454 <__sread+0x38>
 802f438:	80c01417 	ldw	r3,80(r16)
 802f43c:	1887883a 	add	r3,r3,r2
 802f440:	80c01415 	stw	r3,80(r16)
 802f444:	dfc00117 	ldw	ra,4(sp)
 802f448:	dc000017 	ldw	r16,0(sp)
 802f44c:	dec00204 	addi	sp,sp,8
 802f450:	f800283a 	ret
 802f454:	80c0030b 	ldhu	r3,12(r16)
 802f458:	18fbffcc 	andi	r3,r3,61439
 802f45c:	80c0030d 	sth	r3,12(r16)
 802f460:	dfc00117 	ldw	ra,4(sp)
 802f464:	dc000017 	ldw	r16,0(sp)
 802f468:	dec00204 	addi	sp,sp,8
 802f46c:	f800283a 	ret

0802f470 <__swrite>:
 802f470:	2880030b 	ldhu	r2,12(r5)
 802f474:	defffb04 	addi	sp,sp,-20
 802f478:	dcc00315 	stw	r19,12(sp)
 802f47c:	10c0400c 	andi	r3,r2,256
 802f480:	18ffffcc 	andi	r3,r3,65535
 802f484:	18e0001c 	xori	r3,r3,32768
 802f488:	dc800215 	stw	r18,8(sp)
 802f48c:	dc400115 	stw	r17,4(sp)
 802f490:	dc000015 	stw	r16,0(sp)
 802f494:	dfc00415 	stw	ra,16(sp)
 802f498:	18e00004 	addi	r3,r3,-32768
 802f49c:	2821883a 	mov	r16,r5
 802f4a0:	2027883a 	mov	r19,r4
 802f4a4:	3025883a 	mov	r18,r6
 802f4a8:	3823883a 	mov	r17,r7
 802f4ac:	18000526 	beq	r3,zero,802f4c4 <__swrite+0x54>
 802f4b0:	2940038f 	ldh	r5,14(r5)
 802f4b4:	000d883a 	mov	r6,zero
 802f4b8:	01c00084 	movi	r7,2
 802f4bc:	80357440 	call	8035744 <_lseek_r>
 802f4c0:	8080030b 	ldhu	r2,12(r16)
 802f4c4:	8140038f 	ldh	r5,14(r16)
 802f4c8:	10bbffcc 	andi	r2,r2,61439
 802f4cc:	9809883a 	mov	r4,r19
 802f4d0:	900d883a 	mov	r6,r18
 802f4d4:	880f883a 	mov	r7,r17
 802f4d8:	8080030d 	sth	r2,12(r16)
 802f4dc:	dfc00417 	ldw	ra,16(sp)
 802f4e0:	dcc00317 	ldw	r19,12(sp)
 802f4e4:	dc800217 	ldw	r18,8(sp)
 802f4e8:	dc400117 	ldw	r17,4(sp)
 802f4ec:	dc000017 	ldw	r16,0(sp)
 802f4f0:	dec00504 	addi	sp,sp,20
 802f4f4:	80333401 	jmpi	8033340 <_write_r>

0802f4f8 <__sseek>:
 802f4f8:	defffe04 	addi	sp,sp,-8
 802f4fc:	dc000015 	stw	r16,0(sp)
 802f500:	2821883a 	mov	r16,r5
 802f504:	2940038f 	ldh	r5,14(r5)
 802f508:	dfc00115 	stw	ra,4(sp)
 802f50c:	80357440 	call	8035744 <_lseek_r>
 802f510:	00ffffc4 	movi	r3,-1
 802f514:	10c00826 	beq	r2,r3,802f538 <__sseek+0x40>
 802f518:	80c0030b 	ldhu	r3,12(r16)
 802f51c:	80801415 	stw	r2,80(r16)
 802f520:	18c40014 	ori	r3,r3,4096
 802f524:	80c0030d 	sth	r3,12(r16)
 802f528:	dfc00117 	ldw	ra,4(sp)
 802f52c:	dc000017 	ldw	r16,0(sp)
 802f530:	dec00204 	addi	sp,sp,8
 802f534:	f800283a 	ret
 802f538:	80c0030b 	ldhu	r3,12(r16)
 802f53c:	18fbffcc 	andi	r3,r3,61439
 802f540:	80c0030d 	sth	r3,12(r16)
 802f544:	dfc00117 	ldw	ra,4(sp)
 802f548:	dc000017 	ldw	r16,0(sp)
 802f54c:	dec00204 	addi	sp,sp,8
 802f550:	f800283a 	ret

0802f554 <__sclose>:
 802f554:	2940038f 	ldh	r5,14(r5)
 802f558:	80336c01 	jmpi	80336c0 <_close_r>

0802f55c <strcat>:
 802f55c:	defffe04 	addi	sp,sp,-8
 802f560:	dc000015 	stw	r16,0(sp)
 802f564:	dfc00115 	stw	ra,4(sp)
 802f568:	208000cc 	andi	r2,r4,3
 802f56c:	2021883a 	mov	r16,r4
 802f570:	1000141e 	bne	r2,zero,802f5c4 <strcat+0x68>
 802f574:	20800017 	ldw	r2,0(r4)
 802f578:	027fbff4 	movhi	r9,65279
 802f57c:	4a7fbfc4 	addi	r9,r9,-257
 802f580:	02202074 	movhi	r8,32897
 802f584:	42202004 	addi	r8,r8,-32640
 802f588:	1247883a 	add	r3,r2,r9
 802f58c:	0084303a 	nor	r2,zero,r2
 802f590:	1884703a 	and	r2,r3,r2
 802f594:	1204703a 	and	r2,r2,r8
 802f598:	2007883a 	mov	r3,r4
 802f59c:	1000091e 	bne	r2,zero,802f5c4 <strcat+0x68>
 802f5a0:	18c00104 	addi	r3,r3,4
 802f5a4:	19800017 	ldw	r6,0(r3)
 802f5a8:	324f883a 	add	r7,r6,r9
 802f5ac:	018c303a 	nor	r6,zero,r6
 802f5b0:	398c703a 	and	r6,r7,r6
 802f5b4:	320c703a 	and	r6,r6,r8
 802f5b8:	303ff926 	beq	r6,zero,802f5a0 <strcat+0x44>
 802f5bc:	1809883a 	mov	r4,r3
 802f5c0:	00000106 	br	802f5c8 <strcat+0x6c>
 802f5c4:	8009883a 	mov	r4,r16
 802f5c8:	20800007 	ldb	r2,0(r4)
 802f5cc:	10000326 	beq	r2,zero,802f5dc <strcat+0x80>
 802f5d0:	21000044 	addi	r4,r4,1
 802f5d4:	20c00007 	ldb	r3,0(r4)
 802f5d8:	183ffd1e 	bne	r3,zero,802f5d0 <strcat+0x74>
 802f5dc:	802f6980 	call	802f698 <strcpy>
 802f5e0:	8005883a 	mov	r2,r16
 802f5e4:	dfc00117 	ldw	ra,4(sp)
 802f5e8:	dc000017 	ldw	r16,0(sp)
 802f5ec:	dec00204 	addi	sp,sp,8
 802f5f0:	f800283a 	ret

0802f5f4 <strcmp>:
 802f5f4:	2904b03a 	or	r2,r5,r4
 802f5f8:	108000cc 	andi	r2,r2,3
 802f5fc:	1000171e 	bne	r2,zero,802f65c <strcmp+0x68>
 802f600:	20800017 	ldw	r2,0(r4)
 802f604:	28c00017 	ldw	r3,0(r5)
 802f608:	10c0141e 	bne	r2,r3,802f65c <strcmp+0x68>
 802f60c:	027fbff4 	movhi	r9,65279
 802f610:	4a7fbfc4 	addi	r9,r9,-257
 802f614:	1247883a 	add	r3,r2,r9
 802f618:	0084303a 	nor	r2,zero,r2
 802f61c:	1884703a 	and	r2,r3,r2
 802f620:	02202074 	movhi	r8,32897
 802f624:	42202004 	addi	r8,r8,-32640
 802f628:	1204703a 	and	r2,r2,r8
 802f62c:	10000226 	beq	r2,zero,802f638 <strcmp+0x44>
 802f630:	00001706 	br	802f690 <strcmp+0x9c>
 802f634:	3000161e 	bne	r6,zero,802f690 <strcmp+0x9c>
 802f638:	21000104 	addi	r4,r4,4
 802f63c:	20800017 	ldw	r2,0(r4)
 802f640:	29400104 	addi	r5,r5,4
 802f644:	28c00017 	ldw	r3,0(r5)
 802f648:	124f883a 	add	r7,r2,r9
 802f64c:	008c303a 	nor	r6,zero,r2
 802f650:	398c703a 	and	r6,r7,r6
 802f654:	320c703a 	and	r6,r6,r8
 802f658:	10fff626 	beq	r2,r3,802f634 <strcmp+0x40>
 802f65c:	20800007 	ldb	r2,0(r4)
 802f660:	1000051e 	bne	r2,zero,802f678 <strcmp+0x84>
 802f664:	00000606 	br	802f680 <strcmp+0x8c>
 802f668:	21000044 	addi	r4,r4,1
 802f66c:	20800007 	ldb	r2,0(r4)
 802f670:	29400044 	addi	r5,r5,1
 802f674:	10000226 	beq	r2,zero,802f680 <strcmp+0x8c>
 802f678:	28c00007 	ldb	r3,0(r5)
 802f67c:	10fffa26 	beq	r2,r3,802f668 <strcmp+0x74>
 802f680:	20c00003 	ldbu	r3,0(r4)
 802f684:	28800003 	ldbu	r2,0(r5)
 802f688:	1885c83a 	sub	r2,r3,r2
 802f68c:	f800283a 	ret
 802f690:	0005883a 	mov	r2,zero
 802f694:	f800283a 	ret

0802f698 <strcpy>:
 802f698:	2906b03a 	or	r3,r5,r4
 802f69c:	18c000cc 	andi	r3,r3,3
 802f6a0:	2005883a 	mov	r2,r4
 802f6a4:	18001a1e 	bne	r3,zero,802f710 <strcpy+0x78>
 802f6a8:	29800017 	ldw	r6,0(r5)
 802f6ac:	02bfbff4 	movhi	r10,65279
 802f6b0:	52bfbfc4 	addi	r10,r10,-257
 802f6b4:	02602074 	movhi	r9,32897
 802f6b8:	4a602004 	addi	r9,r9,-32640
 802f6bc:	0188303a 	nor	r4,zero,r6
 802f6c0:	3287883a 	add	r3,r6,r10
 802f6c4:	20c6703a 	and	r3,r4,r3
 802f6c8:	1a46703a 	and	r3,r3,r9
 802f6cc:	1800101e 	bne	r3,zero,802f710 <strcpy+0x78>
 802f6d0:	1007883a 	mov	r3,r2
 802f6d4:	19800015 	stw	r6,0(r3)
 802f6d8:	29400104 	addi	r5,r5,4
 802f6dc:	29800017 	ldw	r6,0(r5)
 802f6e0:	18c00104 	addi	r3,r3,4
 802f6e4:	0190303a 	nor	r8,zero,r6
 802f6e8:	328f883a 	add	r7,r6,r10
 802f6ec:	41ce703a 	and	r7,r8,r7
 802f6f0:	3a4e703a 	and	r7,r7,r9
 802f6f4:	383ff726 	beq	r7,zero,802f6d4 <strcpy+0x3c>
 802f6f8:	29800007 	ldb	r6,0(r5)
 802f6fc:	18c00044 	addi	r3,r3,1
 802f700:	29400044 	addi	r5,r5,1
 802f704:	19bfffc5 	stb	r6,-1(r3)
 802f708:	3000021e 	bne	r6,zero,802f714 <strcpy+0x7c>
 802f70c:	f800283a 	ret
 802f710:	1007883a 	mov	r3,r2
 802f714:	29800007 	ldb	r6,0(r5)
 802f718:	18c00044 	addi	r3,r3,1
 802f71c:	29400044 	addi	r5,r5,1
 802f720:	19bfffc5 	stb	r6,-1(r3)
 802f724:	303ffb1e 	bne	r6,zero,802f714 <strcpy+0x7c>
 802f728:	f800283a 	ret

0802f72c <strlen>:
 802f72c:	208000cc 	andi	r2,r4,3
 802f730:	10001f1e 	bne	r2,zero,802f7b0 <strlen+0x84>
 802f734:	20800017 	ldw	r2,0(r4)
 802f738:	01ffbff4 	movhi	r7,65279
 802f73c:	39ffbfc4 	addi	r7,r7,-257
 802f740:	01a02074 	movhi	r6,32897
 802f744:	31a02004 	addi	r6,r6,-32640
 802f748:	11c7883a 	add	r3,r2,r7
 802f74c:	0084303a 	nor	r2,zero,r2
 802f750:	1886703a 	and	r3,r3,r2
 802f754:	1986703a 	and	r3,r3,r6
 802f758:	2005883a 	mov	r2,r4
 802f75c:	1800101e 	bne	r3,zero,802f7a0 <strlen+0x74>
 802f760:	10800104 	addi	r2,r2,4
 802f764:	10c00017 	ldw	r3,0(r2)
 802f768:	19cb883a 	add	r5,r3,r7
 802f76c:	00c6303a 	nor	r3,zero,r3
 802f770:	28c6703a 	and	r3,r5,r3
 802f774:	1986703a 	and	r3,r3,r6
 802f778:	1800091e 	bne	r3,zero,802f7a0 <strlen+0x74>
 802f77c:	10800104 	addi	r2,r2,4
 802f780:	10c00017 	ldw	r3,0(r2)
 802f784:	19cb883a 	add	r5,r3,r7
 802f788:	00c6303a 	nor	r3,zero,r3
 802f78c:	28c6703a 	and	r3,r5,r3
 802f790:	1986703a 	and	r3,r3,r6
 802f794:	183ff226 	beq	r3,zero,802f760 <strlen+0x34>
 802f798:	00000106 	br	802f7a0 <strlen+0x74>
 802f79c:	10800044 	addi	r2,r2,1
 802f7a0:	10c00007 	ldb	r3,0(r2)
 802f7a4:	183ffd1e 	bne	r3,zero,802f79c <strlen+0x70>
 802f7a8:	1105c83a 	sub	r2,r2,r4
 802f7ac:	f800283a 	ret
 802f7b0:	2005883a 	mov	r2,r4
 802f7b4:	003ffa06 	br	802f7a0 <strlen+0x74>

0802f7b8 <strncmp>:
 802f7b8:	30001826 	beq	r6,zero,802f81c <strncmp+0x64>
 802f7bc:	2904b03a 	or	r2,r5,r4
 802f7c0:	108000cc 	andi	r2,r2,3
 802f7c4:	10001726 	beq	r2,zero,802f824 <strncmp+0x6c>
 802f7c8:	31bfffc4 	addi	r6,r6,-1
 802f7cc:	20800007 	ldb	r2,0(r4)
 802f7d0:	28c00007 	ldb	r3,0(r5)
 802f7d4:	10c0331e 	bne	r2,r3,802f8a4 <strncmp+0xec>
 802f7d8:	30001026 	beq	r6,zero,802f81c <strncmp+0x64>
 802f7dc:	10000f26 	beq	r2,zero,802f81c <strncmp+0x64>
 802f7e0:	20800044 	addi	r2,r4,1
 802f7e4:	29400044 	addi	r5,r5,1
 802f7e8:	2189883a 	add	r4,r4,r6
 802f7ec:	00000406 	br	802f800 <strncmp+0x48>
 802f7f0:	11000a26 	beq	r2,r4,802f81c <strncmp+0x64>
 802f7f4:	18000926 	beq	r3,zero,802f81c <strncmp+0x64>
 802f7f8:	10800044 	addi	r2,r2,1
 802f7fc:	29400044 	addi	r5,r5,1
 802f800:	10c00007 	ldb	r3,0(r2)
 802f804:	29800007 	ldb	r6,0(r5)
 802f808:	19bff926 	beq	r3,r6,802f7f0 <strncmp+0x38>
 802f80c:	10c00003 	ldbu	r3,0(r2)
 802f810:	28800003 	ldbu	r2,0(r5)
 802f814:	1885c83a 	sub	r2,r3,r2
 802f818:	f800283a 	ret
 802f81c:	0005883a 	mov	r2,zero
 802f820:	f800283a 	ret
 802f824:	024000c4 	movi	r9,3
 802f828:	49bfe72e 	bgeu	r9,r6,802f7c8 <strncmp+0x10>
 802f82c:	20800017 	ldw	r2,0(r4)
 802f830:	28c00017 	ldw	r3,0(r5)
 802f834:	10ffe41e 	bne	r2,r3,802f7c8 <strncmp+0x10>
 802f838:	30ffff04 	addi	r3,r6,-4
 802f83c:	183ff726 	beq	r3,zero,802f81c <strncmp+0x64>
 802f840:	02ffbff4 	movhi	r11,65279
 802f844:	5affbfc4 	addi	r11,r11,-257
 802f848:	12cd883a 	add	r6,r2,r11
 802f84c:	0084303a 	nor	r2,zero,r2
 802f850:	3084703a 	and	r2,r6,r2
 802f854:	02a02074 	movhi	r10,32897
 802f858:	52a02004 	addi	r10,r10,-32640
 802f85c:	1284703a 	and	r2,r2,r10
 802f860:	10000b26 	beq	r2,zero,802f890 <strncmp+0xd8>
 802f864:	003fed06 	br	802f81c <strncmp+0x64>
 802f868:	21800017 	ldw	r6,0(r4)
 802f86c:	28800017 	ldw	r2,0(r5)
 802f870:	32d1883a 	add	r8,r6,r11
 802f874:	018e303a 	nor	r7,zero,r6
 802f878:	41ce703a 	and	r7,r8,r7
 802f87c:	3a8e703a 	and	r7,r7,r10
 802f880:	30800a1e 	bne	r6,r2,802f8ac <strncmp+0xf4>
 802f884:	18ffff04 	addi	r3,r3,-4
 802f888:	183fe426 	beq	r3,zero,802f81c <strncmp+0x64>
 802f88c:	383fe31e 	bne	r7,zero,802f81c <strncmp+0x64>
 802f890:	21000104 	addi	r4,r4,4
 802f894:	29400104 	addi	r5,r5,4
 802f898:	48fff336 	bltu	r9,r3,802f868 <strncmp+0xb0>
 802f89c:	19bfffc4 	addi	r6,r3,-1
 802f8a0:	183fca1e 	bne	r3,zero,802f7cc <strncmp+0x14>
 802f8a4:	2005883a 	mov	r2,r4
 802f8a8:	003fd806 	br	802f80c <strncmp+0x54>
 802f8ac:	19bfffc4 	addi	r6,r3,-1
 802f8b0:	003fc606 	br	802f7cc <strncmp+0x14>

0802f8b4 <strncpy>:
 802f8b4:	2906b03a 	or	r3,r5,r4
 802f8b8:	18c000cc 	andi	r3,r3,3
 802f8bc:	2005883a 	mov	r2,r4
 802f8c0:	1800261e 	bne	r3,zero,802f95c <strncpy+0xa8>
 802f8c4:	02c000c4 	movi	r11,3
 802f8c8:	200f883a 	mov	r7,r4
 802f8cc:	59800f2e 	bgeu	r11,r6,802f90c <strncpy+0x58>
 802f8d0:	02bfbff4 	movhi	r10,65279
 802f8d4:	52bfbfc4 	addi	r10,r10,-257
 802f8d8:	01202074 	movhi	r4,32897
 802f8dc:	21202004 	addi	r4,r4,-32640
 802f8e0:	28c00017 	ldw	r3,0(r5)
 802f8e4:	00d2303a 	nor	r9,zero,r3
 802f8e8:	1a91883a 	add	r8,r3,r10
 802f8ec:	4a10703a 	and	r8,r9,r8
 802f8f0:	4110703a 	and	r8,r8,r4
 802f8f4:	4000051e 	bne	r8,zero,802f90c <strncpy+0x58>
 802f8f8:	38c00015 	stw	r3,0(r7)
 802f8fc:	31bfff04 	addi	r6,r6,-4
 802f900:	39c00104 	addi	r7,r7,4
 802f904:	29400104 	addi	r5,r5,4
 802f908:	59bff536 	bltu	r11,r6,802f8e0 <strncpy+0x2c>
 802f90c:	30001226 	beq	r6,zero,802f958 <strncpy+0xa4>
 802f910:	29000007 	ldb	r4,0(r5)
 802f914:	31bfffc4 	addi	r6,r6,-1
 802f918:	38c00044 	addi	r3,r7,1
 802f91c:	39000005 	stb	r4,0(r7)
 802f920:	29400044 	addi	r5,r5,1
 802f924:	20000726 	beq	r4,zero,802f944 <strncpy+0x90>
 802f928:	30000e26 	beq	r6,zero,802f964 <strncpy+0xb0>
 802f92c:	29c00007 	ldb	r7,0(r5)
 802f930:	18c00044 	addi	r3,r3,1
 802f934:	31bfffc4 	addi	r6,r6,-1
 802f938:	19ffffc5 	stb	r7,-1(r3)
 802f93c:	29400044 	addi	r5,r5,1
 802f940:	383ff91e 	bne	r7,zero,802f928 <strncpy+0x74>
 802f944:	198b883a 	add	r5,r3,r6
 802f948:	30000726 	beq	r6,zero,802f968 <strncpy+0xb4>
 802f94c:	18000005 	stb	zero,0(r3)
 802f950:	18c00044 	addi	r3,r3,1
 802f954:	197ffd1e 	bne	r3,r5,802f94c <strncpy+0x98>
 802f958:	f800283a 	ret
 802f95c:	200f883a 	mov	r7,r4
 802f960:	003fea06 	br	802f90c <strncpy+0x58>
 802f964:	f800283a 	ret
 802f968:	f800283a 	ret

0802f96c <_tmpfile_r>:
 802f96c:	defefa04 	addi	sp,sp,-1048
 802f970:	dcc10315 	stw	r19,1036(sp)
 802f974:	dc010015 	stw	r16,1024(sp)
 802f978:	dfc10515 	stw	ra,1044(sp)
 802f97c:	dd010415 	stw	r20,1040(sp)
 802f980:	dc810215 	stw	r18,1032(sp)
 802f984:	dc410115 	stw	r17,1028(sp)
 802f988:	2021883a 	mov	r16,r4
 802f98c:	04c00444 	movi	r19,17
 802f990:	8009883a 	mov	r4,r16
 802f994:	d80b883a 	mov	r5,sp
 802f998:	802fb240 	call	802fb24 <_tmpnam_r>
 802f99c:	1023883a 	mov	r17,r2
 802f9a0:	8009883a 	mov	r4,r16
 802f9a4:	100b883a 	mov	r5,r2
 802f9a8:	01828084 	movi	r6,2562
 802f9ac:	01c06004 	movi	r7,384
 802f9b0:	10000526 	beq	r2,zero,802f9c8 <_tmpfile_r+0x5c>
 802f9b4:	802edcc0 	call	802edcc <_open_r>
 802f9b8:	1025883a 	mov	r18,r2
 802f9bc:	10000c0e 	bge	r2,zero,802f9f0 <_tmpfile_r+0x84>
 802f9c0:	80800017 	ldw	r2,0(r16)
 802f9c4:	14fff226 	beq	r2,r19,802f990 <_tmpfile_r+0x24>
 802f9c8:	0027883a 	mov	r19,zero
 802f9cc:	9805883a 	mov	r2,r19
 802f9d0:	dfc10517 	ldw	ra,1044(sp)
 802f9d4:	dd010417 	ldw	r20,1040(sp)
 802f9d8:	dcc10317 	ldw	r19,1036(sp)
 802f9dc:	dc810217 	ldw	r18,1032(sp)
 802f9e0:	dc410117 	ldw	r17,1028(sp)
 802f9e4:	dc010017 	ldw	r16,1024(sp)
 802f9e8:	dec10604 	addi	sp,sp,1048
 802f9ec:	f800283a 	ret
 802f9f0:	8009883a 	mov	r4,r16
 802f9f4:	100b883a 	mov	r5,r2
 802f9f8:	01820134 	movhi	r6,2052
 802f9fc:	3184f804 	addi	r6,r6,5088
 802fa00:	8034f7c0 	call	8034f7c <_fdopen_r>
 802fa04:	1027883a 	mov	r19,r2
 802fa08:	85000017 	ldw	r20,0(r16)
 802fa0c:	10000526 	beq	r2,zero,802fa24 <_tmpfile_r+0xb8>
 802fa10:	8009883a 	mov	r4,r16
 802fa14:	880b883a 	mov	r5,r17
 802fa18:	80371d40 	call	80371d4 <_remove_r>
 802fa1c:	85000015 	stw	r20,0(r16)
 802fa20:	003fea06 	br	802f9cc <_tmpfile_r+0x60>
 802fa24:	8009883a 	mov	r4,r16
 802fa28:	900b883a 	mov	r5,r18
 802fa2c:	80336c00 	call	80336c0 <_close_r>
 802fa30:	003ff706 	br	802fa10 <_tmpfile_r+0xa4>

0802fa34 <tmpfile>:
 802fa34:	00820134 	movhi	r2,2052
 802fa38:	108c4504 	addi	r2,r2,12564
 802fa3c:	11000017 	ldw	r4,0(r2)
 802fa40:	802f96c1 	jmpi	802f96c <_tmpfile_r>

0802fa44 <worker>:
 802fa44:	defff504 	addi	sp,sp,-44
 802fa48:	dd800915 	stw	r22,36(sp)
 802fa4c:	dd400815 	stw	r21,32(sp)
 802fa50:	dd000715 	stw	r20,28(sp)
 802fa54:	dcc00615 	stw	r19,24(sp)
 802fa58:	dc800515 	stw	r18,20(sp)
 802fa5c:	dc400415 	stw	r17,16(sp)
 802fa60:	dc000315 	stw	r16,12(sp)
 802fa64:	dfc00a15 	stw	ra,40(sp)
 802fa68:	dd800b17 	ldw	r22,44(sp)
 802fa6c:	dc400c17 	ldw	r17,48(sp)
 802fa70:	2021883a 	mov	r16,r4
 802fa74:	2825883a 	mov	r18,r5
 802fa78:	302b883a 	mov	r21,r6
 802fa7c:	3829883a 	mov	r20,r7
 802fa80:	04ffffc4 	movi	r19,-1
 802fa84:	00000106 	br	802fa8c <worker+0x48>
 802fa88:	80336c00 	call	80336c0 <_close_r>
 802fa8c:	88800017 	ldw	r2,0(r17)
 802fa90:	8009883a 	mov	r4,r16
 802fa94:	900b883a 	mov	r5,r18
 802fa98:	a80f883a 	mov	r7,r21
 802fa9c:	01820134 	movhi	r6,2052
 802faa0:	3184f904 	addi	r6,r6,5092
 802faa4:	dd000015 	stw	r20,0(sp)
 802faa8:	dd800115 	stw	r22,4(sp)
 802faac:	d8800215 	stw	r2,8(sp)
 802fab0:	802f25c0 	call	802f25c <_sprintf_r>
 802fab4:	88800017 	ldw	r2,0(r17)
 802fab8:	8009883a 	mov	r4,r16
 802fabc:	900b883a 	mov	r5,r18
 802fac0:	10800044 	addi	r2,r2,1
 802fac4:	000d883a 	mov	r6,zero
 802fac8:	000f883a 	mov	r7,zero
 802facc:	88800015 	stw	r2,0(r17)
 802fad0:	802edcc0 	call	802edcc <_open_r>
 802fad4:	8009883a 	mov	r4,r16
 802fad8:	100b883a 	mov	r5,r2
 802fadc:	14ffea1e 	bne	r2,r19,802fa88 <worker+0x44>
 802fae0:	80c00017 	ldw	r3,0(r16)
 802fae4:	00801604 	movi	r2,88
 802fae8:	18800b26 	beq	r3,r2,802fb18 <worker+0xd4>
 802faec:	00800044 	movi	r2,1
 802faf0:	dfc00a17 	ldw	ra,40(sp)
 802faf4:	dd800917 	ldw	r22,36(sp)
 802faf8:	dd400817 	ldw	r21,32(sp)
 802fafc:	dd000717 	ldw	r20,28(sp)
 802fb00:	dcc00617 	ldw	r19,24(sp)
 802fb04:	dc800517 	ldw	r18,20(sp)
 802fb08:	dc400417 	ldw	r17,16(sp)
 802fb0c:	dc000317 	ldw	r16,12(sp)
 802fb10:	dec00b04 	addi	sp,sp,44
 802fb14:	f800283a 	ret
 802fb18:	90000005 	stb	zero,0(r18)
 802fb1c:	0005883a 	mov	r2,zero
 802fb20:	003ff306 	br	802faf0 <worker+0xac>

0802fb24 <_tmpnam_r>:
 802fb24:	defffb04 	addi	sp,sp,-20
 802fb28:	dc000215 	stw	r16,8(sp)
 802fb2c:	dfc00415 	stw	ra,16(sp)
 802fb30:	dc400315 	stw	r17,12(sp)
 802fb34:	2021883a 	mov	r16,r4
 802fb38:	28001726 	beq	r5,zero,802fb98 <_tmpnam_r+0x74>
 802fb3c:	2823883a 	mov	r17,r5
 802fb40:	8009883a 	mov	r4,r16
 802fb44:	80373b00 	call	80373b0 <_getpid_r>
 802fb48:	80c00404 	addi	r3,r16,16
 802fb4c:	d8800015 	stw	r2,0(sp)
 802fb50:	d8c00115 	stw	r3,4(sp)
 802fb54:	8009883a 	mov	r4,r16
 802fb58:	880b883a 	mov	r5,r17
 802fb5c:	01820134 	movhi	r6,2052
 802fb60:	3184fc04 	addi	r6,r6,5104
 802fb64:	01c20134 	movhi	r7,2052
 802fb68:	39c4fe04 	addi	r7,r7,5112
 802fb6c:	802fa440 	call	802fa44 <worker>
 802fb70:	10000b26 	beq	r2,zero,802fba0 <_tmpnam_r+0x7c>
 802fb74:	80800417 	ldw	r2,16(r16)
 802fb78:	10800044 	addi	r2,r2,1
 802fb7c:	80800415 	stw	r2,16(r16)
 802fb80:	8805883a 	mov	r2,r17
 802fb84:	dfc00417 	ldw	ra,16(sp)
 802fb88:	dc400317 	ldw	r17,12(sp)
 802fb8c:	dc000217 	ldw	r16,8(sp)
 802fb90:	dec00504 	addi	sp,sp,20
 802fb94:	f800283a 	ret
 802fb98:	24400504 	addi	r17,r4,20
 802fb9c:	003fe806 	br	802fb40 <_tmpnam_r+0x1c>
 802fba0:	0023883a 	mov	r17,zero
 802fba4:	8805883a 	mov	r2,r17
 802fba8:	dfc00417 	ldw	ra,16(sp)
 802fbac:	dc400317 	ldw	r17,12(sp)
 802fbb0:	dc000217 	ldw	r16,8(sp)
 802fbb4:	dec00504 	addi	sp,sp,20
 802fbb8:	f800283a 	ret

0802fbbc <_tempnam_r>:
 802fbbc:	defff904 	addi	sp,sp,-28
 802fbc0:	dc800415 	stw	r18,16(sp)
 802fbc4:	dc000215 	stw	r16,8(sp)
 802fbc8:	dfc00615 	stw	ra,24(sp)
 802fbcc:	dcc00515 	stw	r19,20(sp)
 802fbd0:	dc400315 	stw	r17,12(sp)
 802fbd4:	2021883a 	mov	r16,r4
 802fbd8:	2825883a 	mov	r18,r5
 802fbdc:	30002a26 	beq	r6,zero,802fc88 <_tempnam_r+0xcc>
 802fbe0:	3027883a 	mov	r19,r6
 802fbe4:	90002b26 	beq	r18,zero,802fc94 <_tempnam_r+0xd8>
 802fbe8:	9009883a 	mov	r4,r18
 802fbec:	802f72c0 	call	802f72c <strlen>
 802fbf0:	9809883a 	mov	r4,r19
 802fbf4:	1023883a 	mov	r17,r2
 802fbf8:	802f72c0 	call	802f72c <strlen>
 802fbfc:	8885883a 	add	r2,r17,r2
 802fc00:	8009883a 	mov	r4,r16
 802fc04:	114004c4 	addi	r5,r2,19
 802fc08:	802e42c0 	call	802e42c <_malloc_r>
 802fc0c:	1023883a 	mov	r17,r2
 802fc10:	10001426 	beq	r2,zero,802fc64 <_tempnam_r+0xa8>
 802fc14:	8009883a 	mov	r4,r16
 802fc18:	80373b00 	call	80373b0 <_getpid_r>
 802fc1c:	8084f03a 	xor	r2,r16,r2
 802fc20:	80c00404 	addi	r3,r16,16
 802fc24:	d8800015 	stw	r2,0(sp)
 802fc28:	d8c00115 	stw	r3,4(sp)
 802fc2c:	8009883a 	mov	r4,r16
 802fc30:	880b883a 	mov	r5,r17
 802fc34:	900d883a 	mov	r6,r18
 802fc38:	980f883a 	mov	r7,r19
 802fc3c:	802fa440 	call	802fa44 <worker>
 802fc40:	10000826 	beq	r2,zero,802fc64 <_tempnam_r+0xa8>
 802fc44:	8805883a 	mov	r2,r17
 802fc48:	dfc00617 	ldw	ra,24(sp)
 802fc4c:	dcc00517 	ldw	r19,20(sp)
 802fc50:	dc800417 	ldw	r18,16(sp)
 802fc54:	dc400317 	ldw	r17,12(sp)
 802fc58:	dc000217 	ldw	r16,8(sp)
 802fc5c:	dec00704 	addi	sp,sp,28
 802fc60:	f800283a 	ret
 802fc64:	0023883a 	mov	r17,zero
 802fc68:	8805883a 	mov	r2,r17
 802fc6c:	dfc00617 	ldw	ra,24(sp)
 802fc70:	dcc00517 	ldw	r19,20(sp)
 802fc74:	dc800417 	ldw	r18,16(sp)
 802fc78:	dc400317 	ldw	r17,12(sp)
 802fc7c:	dc000217 	ldw	r16,8(sp)
 802fc80:	dec00704 	addi	sp,sp,28
 802fc84:	f800283a 	ret
 802fc88:	04c20134 	movhi	r19,2052
 802fc8c:	9cc50904 	addi	r19,r19,5156
 802fc90:	003fd406 	br	802fbe4 <_tempnam_r+0x28>
 802fc94:	01020134 	movhi	r4,2052
 802fc98:	2104ff04 	addi	r4,r4,5116
 802fc9c:	802e1080 	call	802e108 <getenv>
 802fca0:	1025883a 	mov	r18,r2
 802fca4:	103fd01e 	bne	r2,zero,802fbe8 <_tempnam_r+0x2c>
 802fca8:	04820134 	movhi	r18,2052
 802fcac:	9484fc04 	addi	r18,r18,5104
 802fcb0:	003fcd06 	br	802fbe8 <_tempnam_r+0x2c>

0802fcb4 <tempnam>:
 802fcb4:	00c20134 	movhi	r3,2052
 802fcb8:	18cc4504 	addi	r3,r3,12564
 802fcbc:	2005883a 	mov	r2,r4
 802fcc0:	19000017 	ldw	r4,0(r3)
 802fcc4:	280d883a 	mov	r6,r5
 802fcc8:	100b883a 	mov	r5,r2
 802fccc:	802fbbc1 	jmpi	802fbbc <_tempnam_r>

0802fcd0 <tmpnam>:
 802fcd0:	00820134 	movhi	r2,2052
 802fcd4:	108c4504 	addi	r2,r2,12564
 802fcd8:	200b883a 	mov	r5,r4
 802fcdc:	11000017 	ldw	r4,0(r2)
 802fce0:	802fb241 	jmpi	802fb24 <_tmpnam_r>

0802fce4 <__sprint_r>:
 802fce4:	30800217 	ldw	r2,8(r6)
 802fce8:	defffe04 	addi	sp,sp,-8
 802fcec:	dc000015 	stw	r16,0(sp)
 802fcf0:	dfc00115 	stw	ra,4(sp)
 802fcf4:	3021883a 	mov	r16,r6
 802fcf8:	10000226 	beq	r2,zero,802fd04 <__sprint_r+0x20>
 802fcfc:	80350e80 	call	80350e8 <__sfvwrite_r>
 802fd00:	80000215 	stw	zero,8(r16)
 802fd04:	80000115 	stw	zero,4(r16)
 802fd08:	dfc00117 	ldw	ra,4(sp)
 802fd0c:	dc000017 	ldw	r16,0(sp)
 802fd10:	dec00204 	addi	sp,sp,8
 802fd14:	f800283a 	ret

0802fd18 <___vfprintf_internal_r>:
 802fd18:	defeb904 	addi	sp,sp,-1308
 802fd1c:	dc013d15 	stw	r16,1268(sp)
 802fd20:	d9013015 	stw	r4,1216(sp)
 802fd24:	dfc14615 	stw	ra,1304(sp)
 802fd28:	df014515 	stw	fp,1300(sp)
 802fd2c:	ddc14415 	stw	r23,1296(sp)
 802fd30:	dd814315 	stw	r22,1292(sp)
 802fd34:	dd414215 	stw	r21,1288(sp)
 802fd38:	dd014115 	stw	r20,1284(sp)
 802fd3c:	dcc14015 	stw	r19,1280(sp)
 802fd40:	dc813f15 	stw	r18,1276(sp)
 802fd44:	dc413e15 	stw	r17,1272(sp)
 802fd48:	d9412915 	stw	r5,1188(sp)
 802fd4c:	3021883a 	mov	r16,r6
 802fd50:	d9c12d15 	stw	r7,1204(sp)
 802fd54:	80357100 	call	8035710 <_localeconv_r>
 802fd58:	10800017 	ldw	r2,0(r2)
 802fd5c:	d9013017 	ldw	r4,1216(sp)
 802fd60:	d8013315 	stw	zero,1228(sp)
 802fd64:	d8813715 	stw	r2,1244(sp)
 802fd68:	d8013415 	stw	zero,1232(sp)
 802fd6c:	20000226 	beq	r4,zero,802fd78 <___vfprintf_internal_r+0x60>
 802fd70:	20800e17 	ldw	r2,56(r4)
 802fd74:	10014b26 	beq	r2,zero,80302a4 <___vfprintf_internal_r+0x58c>
 802fd78:	d8c12917 	ldw	r3,1188(sp)
 802fd7c:	1880030b 	ldhu	r2,12(r3)
 802fd80:	10c0020c 	andi	r3,r2,8
 802fd84:	18ffffcc 	andi	r3,r3,65535
 802fd88:	18e0001c 	xori	r3,r3,32768
 802fd8c:	18e00004 	addi	r3,r3,-32768
 802fd90:	1800ed26 	beq	r3,zero,8030148 <___vfprintf_internal_r+0x430>
 802fd94:	d9012917 	ldw	r4,1188(sp)
 802fd98:	20c00417 	ldw	r3,16(r4)
 802fd9c:	1800ea26 	beq	r3,zero,8030148 <___vfprintf_internal_r+0x430>
 802fda0:	1100068c 	andi	r4,r2,26
 802fda4:	00c00284 	movi	r3,10
 802fda8:	20c0f026 	beq	r4,r3,803016c <___vfprintf_internal_r+0x454>
 802fdac:	d9010dc4 	addi	r4,sp,1079
 802fdb0:	d8810e04 	addi	r2,sp,1080
 802fdb4:	dc413017 	ldw	r17,1216(sp)
 802fdb8:	d8c00404 	addi	r3,sp,16
 802fdbc:	d9012615 	stw	r4,1176(sp)
 802fdc0:	1109c83a 	sub	r4,r2,r4
 802fdc4:	d8812715 	stw	r2,1180(sp)
 802fdc8:	d8c11b15 	stw	r3,1132(sp)
 802fdcc:	d8011d15 	stw	zero,1140(sp)
 802fdd0:	d8011c15 	stw	zero,1136(sp)
 802fdd4:	802b883a 	mov	r21,r16
 802fdd8:	d8013215 	stw	zero,1224(sp)
 802fddc:	d8013615 	stw	zero,1240(sp)
 802fde0:	d8013515 	stw	zero,1236(sp)
 802fde4:	d8012c15 	stw	zero,1200(sp)
 802fde8:	1813883a 	mov	r9,r3
 802fdec:	d9013915 	stw	r4,1252(sp)
 802fdf0:	a8800007 	ldb	r2,0(r21)
 802fdf4:	1002f326 	beq	r2,zero,80309c4 <___vfprintf_internal_r+0xcac>
 802fdf8:	00c00944 	movi	r3,37
 802fdfc:	a825883a 	mov	r18,r21
 802fe00:	10c0021e 	bne	r2,r3,802fe0c <___vfprintf_internal_r+0xf4>
 802fe04:	00001406 	br	802fe58 <___vfprintf_internal_r+0x140>
 802fe08:	10c00326 	beq	r2,r3,802fe18 <___vfprintf_internal_r+0x100>
 802fe0c:	94800044 	addi	r18,r18,1
 802fe10:	90800007 	ldb	r2,0(r18)
 802fe14:	103ffc1e 	bne	r2,zero,802fe08 <___vfprintf_internal_r+0xf0>
 802fe18:	9561c83a 	sub	r16,r18,r21
 802fe1c:	80000e26 	beq	r16,zero,802fe58 <___vfprintf_internal_r+0x140>
 802fe20:	da011d17 	ldw	r8,1140(sp)
 802fe24:	d8c11c17 	ldw	r3,1136(sp)
 802fe28:	4d400015 	stw	r21,0(r9)
 802fe2c:	4c000115 	stw	r16,4(r9)
 802fe30:	4411883a 	add	r8,r8,r16
 802fe34:	18c00044 	addi	r3,r3,1
 802fe38:	da011d15 	stw	r8,1140(sp)
 802fe3c:	d8c11c15 	stw	r3,1136(sp)
 802fe40:	008001c4 	movi	r2,7
 802fe44:	10c11016 	blt	r2,r3,8030288 <___vfprintf_internal_r+0x570>
 802fe48:	4a400204 	addi	r9,r9,8
 802fe4c:	d8812c17 	ldw	r2,1200(sp)
 802fe50:	1405883a 	add	r2,r2,r16
 802fe54:	d8812c15 	stw	r2,1200(sp)
 802fe58:	90800007 	ldb	r2,0(r18)
 802fe5c:	1000ee26 	beq	r2,zero,8030218 <___vfprintf_internal_r+0x500>
 802fe60:	95400044 	addi	r21,r18,1
 802fe64:	94800047 	ldb	r18,1(r18)
 802fe68:	073fffc4 	movi	fp,-1
 802fe6c:	e007883a 	mov	r3,fp
 802fe70:	d8012585 	stb	zero,1174(sp)
 802fe74:	d8012e15 	stw	zero,1208(sp)
 802fe78:	0021883a 	mov	r16,zero
 802fe7c:	05001604 	movi	r20,88
 802fe80:	04c00244 	movi	r19,9
 802fe84:	4839883a 	mov	fp,r9
 802fe88:	ad400044 	addi	r21,r21,1
 802fe8c:	90bff804 	addi	r2,r18,-32
 802fe90:	a080462e 	bgeu	r20,r2,802ffac <___vfprintf_internal_r+0x294>
 802fe94:	e013883a 	mov	r9,fp
 802fe98:	9000df26 	beq	r18,zero,8030218 <___vfprintf_internal_r+0x500>
 802fe9c:	00c00044 	movi	r3,1
 802fea0:	d8c12815 	stw	r3,1184(sp)
 802fea4:	dc810405 	stb	r18,1040(sp)
 802fea8:	d8012585 	stb	zero,1174(sp)
 802feac:	d8c12b15 	stw	r3,1196(sp)
 802feb0:	dcc10404 	addi	r19,sp,1040
 802feb4:	d8013115 	stw	zero,1220(sp)
 802feb8:	80c0008c 	andi	r3,r16,2
 802febc:	d8c12a15 	stw	r3,1192(sp)
 802fec0:	18000326 	beq	r3,zero,802fed0 <___vfprintf_internal_r+0x1b8>
 802fec4:	d8c12817 	ldw	r3,1184(sp)
 802fec8:	18c00084 	addi	r3,r3,2
 802fecc:	d8c12815 	stw	r3,1184(sp)
 802fed0:	80c0210c 	andi	r3,r16,132
 802fed4:	d8c12f15 	stw	r3,1212(sp)
 802fed8:	1802251e 	bne	r3,zero,8030770 <___vfprintf_internal_r+0xa58>
 802fedc:	d9012e17 	ldw	r4,1208(sp)
 802fee0:	d8c12817 	ldw	r3,1184(sp)
 802fee4:	20edc83a 	sub	r22,r4,r3
 802fee8:	0582210e 	bge	zero,r22,8030770 <___vfprintf_internal_r+0xa58>
 802feec:	02800404 	movi	r10,16
 802fef0:	da011d17 	ldw	r8,1140(sp)
 802fef4:	d8c11c17 	ldw	r3,1136(sp)
 802fef8:	05c20134 	movhi	r23,2052
 802fefc:	bdc51184 	addi	r23,r23,5190
 802ff00:	5580200e 	bge	r10,r22,802ff84 <___vfprintf_internal_r+0x26c>
 802ff04:	dc813815 	stw	r18,1248(sp)
 802ff08:	5039883a 	mov	fp,r10
 802ff0c:	b825883a 	mov	r18,r23
 802ff10:	050001c4 	movi	r20,7
 802ff14:	b02f883a 	mov	r23,r22
 802ff18:	802d883a 	mov	r22,r16
 802ff1c:	dc012917 	ldw	r16,1188(sp)
 802ff20:	00000306 	br	802ff30 <___vfprintf_internal_r+0x218>
 802ff24:	bdfffc04 	addi	r23,r23,-16
 802ff28:	4a400204 	addi	r9,r9,8
 802ff2c:	e5c0110e 	bge	fp,r23,802ff74 <___vfprintf_internal_r+0x25c>
 802ff30:	4c800015 	stw	r18,0(r9)
 802ff34:	4f000115 	stw	fp,4(r9)
 802ff38:	42000404 	addi	r8,r8,16
 802ff3c:	18c00044 	addi	r3,r3,1
 802ff40:	da011d15 	stw	r8,1140(sp)
 802ff44:	d8c11c15 	stw	r3,1136(sp)
 802ff48:	a0fff60e 	bge	r20,r3,802ff24 <___vfprintf_internal_r+0x20c>
 802ff4c:	8809883a 	mov	r4,r17
 802ff50:	800b883a 	mov	r5,r16
 802ff54:	d9811b04 	addi	r6,sp,1132
 802ff58:	802fce40 	call	802fce4 <__sprint_r>
 802ff5c:	1000b41e 	bne	r2,zero,8030230 <___vfprintf_internal_r+0x518>
 802ff60:	bdfffc04 	addi	r23,r23,-16
 802ff64:	da011d17 	ldw	r8,1140(sp)
 802ff68:	d8c11c17 	ldw	r3,1136(sp)
 802ff6c:	da400404 	addi	r9,sp,16
 802ff70:	e5ffef16 	blt	fp,r23,802ff30 <___vfprintf_internal_r+0x218>
 802ff74:	b021883a 	mov	r16,r22
 802ff78:	b82d883a 	mov	r22,r23
 802ff7c:	902f883a 	mov	r23,r18
 802ff80:	dc813817 	ldw	r18,1248(sp)
 802ff84:	4dc00015 	stw	r23,0(r9)
 802ff88:	4d800115 	stw	r22,4(r9)
 802ff8c:	4591883a 	add	r8,r8,r22
 802ff90:	18c00044 	addi	r3,r3,1
 802ff94:	da011d15 	stw	r8,1140(sp)
 802ff98:	d8c11c15 	stw	r3,1136(sp)
 802ff9c:	008001c4 	movi	r2,7
 802ffa0:	10c3fe16 	blt	r2,r3,8030f9c <___vfprintf_internal_r+0x1284>
 802ffa4:	4a400204 	addi	r9,r9,8
 802ffa8:	0001f306 	br	8030778 <___vfprintf_internal_r+0xa60>
 802ffac:	1085883a 	add	r2,r2,r2
 802ffb0:	1085883a 	add	r2,r2,r2
 802ffb4:	010200f4 	movhi	r4,2051
 802ffb8:	213ff204 	addi	r4,r4,-56
 802ffbc:	1105883a 	add	r2,r2,r4
 802ffc0:	10800017 	ldw	r2,0(r2)
 802ffc4:	1000683a 	jmp	r2
 802ffc8:	080306a4 	muli	zero,at,3098
 802ffcc:	0802fe94 	ori	zero,at,3066
 802ffd0:	0802fe94 	ori	zero,at,3066
 802ffd4:	080306bc 	xorhi	zero,at,3098
 802ffd8:	0802fe94 	ori	zero,at,3066
 802ffdc:	0802fe94 	ori	zero,at,3066
 802ffe0:	0802fe94 	ori	zero,at,3066
 802ffe4:	0802fe94 	ori	zero,at,3066
 802ffe8:	0802fe94 	ori	zero,at,3066
 802ffec:	0802fe94 	ori	zero,at,3066
 802fff0:	08030574 	orhi	zero,at,3093
 802fff4:	08030708 	cmpgei	zero,at,3100
 802fff8:	0802fe94 	ori	zero,at,3066
 802fffc:	0803013c 	xorhi	zero,at,3076
 8030000:	080304dc 	xori	zero,at,3091
 8030004:	0802fe94 	ori	zero,at,3066
 8030008:	080306c8 	cmpgei	zero,at,3099
 803000c:	080306d4 	ori	zero,at,3099
 8030010:	080306d4 	ori	zero,at,3099
 8030014:	080306d4 	ori	zero,at,3099
 8030018:	080306d4 	ori	zero,at,3099
 803001c:	080306d4 	ori	zero,at,3099
 8030020:	080306d4 	ori	zero,at,3099
 8030024:	080306d4 	ori	zero,at,3099
 8030028:	080306d4 	ori	zero,at,3099
 803002c:	080306d4 	ori	zero,at,3099
 8030030:	0802fe94 	ori	zero,at,3066
 8030034:	0802fe94 	ori	zero,at,3066
 8030038:	0802fe94 	ori	zero,at,3066
 803003c:	0802fe94 	ori	zero,at,3066
 8030040:	0802fe94 	ori	zero,at,3066
 8030044:	0802fe94 	ori	zero,at,3066
 8030048:	0802fe94 	ori	zero,at,3066
 803004c:	0802fe94 	ori	zero,at,3066
 8030050:	0802fe94 	ori	zero,at,3066
 8030054:	0802fe94 	ori	zero,at,3066
 8030058:	080302ac 	andhi	zero,at,3082
 803005c:	0803036c 	andhi	zero,at,3085
 8030060:	0802fe94 	ori	zero,at,3066
 8030064:	0803036c 	andhi	zero,at,3085
 8030068:	0802fe94 	ori	zero,at,3066
 803006c:	0802fe94 	ori	zero,at,3066
 8030070:	0802fe94 	ori	zero,at,3066
 8030074:	0802fe94 	ori	zero,at,3066
 8030078:	08030400 	call	803040 <__alt_mem_sdram-0x77fcfc0>
 803007c:	0802fe94 	ori	zero,at,3066
 8030080:	0802fe94 	ori	zero,at,3066
 8030084:	0803040c 	andi	zero,at,3088
 8030088:	0802fe94 	ori	zero,at,3066
 803008c:	0802fe94 	ori	zero,at,3066
 8030090:	0802fe94 	ori	zero,at,3066
 8030094:	0802fe94 	ori	zero,at,3066
 8030098:	0802fe94 	ori	zero,at,3066
 803009c:	08030444 	addi	zero,at,3089
 80300a0:	0802fe94 	ori	zero,at,3066
 80300a4:	0802fe94 	ori	zero,at,3066
 80300a8:	08030480 	call	803048 <__alt_mem_sdram-0x77fcfb8>
 80300ac:	0802fe94 	ori	zero,at,3066
 80300b0:	0802fe94 	ori	zero,at,3066
 80300b4:	0802fe94 	ori	zero,at,3066
 80300b8:	0802fe94 	ori	zero,at,3066
 80300bc:	0802fe94 	ori	zero,at,3066
 80300c0:	0802fe94 	ori	zero,at,3066
 80300c4:	0802fe94 	ori	zero,at,3066
 80300c8:	0802fe94 	ori	zero,at,3066
 80300cc:	0802fe94 	ori	zero,at,3066
 80300d0:	0802fe94 	ori	zero,at,3066
 80300d4:	08030718 	cmpnei	zero,at,3100
 80300d8:	0803074c 	andi	zero,at,3101
 80300dc:	0803036c 	andhi	zero,at,3085
 80300e0:	0803036c 	andhi	zero,at,3085
 80300e4:	0803036c 	andhi	zero,at,3085
 80300e8:	08030698 	cmpnei	zero,at,3098
 80300ec:	0803074c 	andi	zero,at,3101
 80300f0:	0802fe94 	ori	zero,at,3066
 80300f4:	0802fe94 	ori	zero,at,3066
 80300f8:	08030524 	muli	zero,at,3092
 80300fc:	0802fe94 	ori	zero,at,3066
 8030100:	0803053c 	xorhi	zero,at,3092
 8030104:	08030758 	cmpnei	zero,at,3101
 8030108:	0803059c 	xori	zero,at,3094
 803010c:	080305ec 	andhi	zero,at,3095
 8030110:	0802fe94 	ori	zero,at,3066
 8030114:	080305f8 	rdprs	zero,at,3095
 8030118:	0802fe94 	ori	zero,at,3066
 803011c:	08030764 	muli	zero,at,3101
 8030120:	0802fe94 	ori	zero,at,3066
 8030124:	0802fe94 	ori	zero,at,3066
 8030128:	0803065c 	xori	zero,at,3097
 803012c:	d9012e17 	ldw	r4,1208(sp)
 8030130:	d8812d15 	stw	r2,1204(sp)
 8030134:	0109c83a 	sub	r4,zero,r4
 8030138:	d9012e15 	stw	r4,1208(sp)
 803013c:	84000114 	ori	r16,r16,4
 8030140:	ac800007 	ldb	r18,0(r21)
 8030144:	003f5006 	br	802fe88 <___vfprintf_internal_r+0x170>
 8030148:	d9013017 	ldw	r4,1216(sp)
 803014c:	d9412917 	ldw	r5,1188(sp)
 8030150:	80333ac0 	call	80333ac <__swsetup_r>
 8030154:	10003d1e 	bne	r2,zero,803024c <___vfprintf_internal_r+0x534>
 8030158:	d8c12917 	ldw	r3,1188(sp)
 803015c:	1880030b 	ldhu	r2,12(r3)
 8030160:	00c00284 	movi	r3,10
 8030164:	1100068c 	andi	r4,r2,26
 8030168:	20ff101e 	bne	r4,r3,802fdac <___vfprintf_internal_r+0x94>
 803016c:	d9012917 	ldw	r4,1188(sp)
 8030170:	20c0038b 	ldhu	r3,14(r4)
 8030174:	193fffcc 	andi	r4,r3,65535
 8030178:	2120001c 	xori	r4,r4,32768
 803017c:	21200004 	addi	r4,r4,-32768
 8030180:	203f0a16 	blt	r4,zero,802fdac <___vfprintf_internal_r+0x94>
 8030184:	d9012917 	ldw	r4,1188(sp)
 8030188:	d9c12d17 	ldw	r7,1204(sp)
 803018c:	10bfff4c 	andi	r2,r2,65533
 8030190:	22800717 	ldw	r10,28(r4)
 8030194:	22400917 	ldw	r9,36(r4)
 8030198:	d9013017 	ldw	r4,1216(sp)
 803019c:	02010004 	movi	r8,1024
 80301a0:	d881070d 	sth	r2,1052(sp)
 80301a4:	d9410404 	addi	r5,sp,1040
 80301a8:	d8800404 	addi	r2,sp,16
 80301ac:	800d883a 	mov	r6,r16
 80301b0:	d8c1078d 	sth	r3,1054(sp)
 80301b4:	da810b15 	stw	r10,1068(sp)
 80301b8:	da410d15 	stw	r9,1076(sp)
 80301bc:	d8810415 	stw	r2,1040(sp)
 80301c0:	d8810815 	stw	r2,1056(sp)
 80301c4:	da010615 	stw	r8,1048(sp)
 80301c8:	da010915 	stw	r8,1060(sp)
 80301cc:	d8010a15 	stw	zero,1064(sp)
 80301d0:	802fd180 	call	802fd18 <___vfprintf_internal_r>
 80301d4:	d8812c15 	stw	r2,1200(sp)
 80301d8:	10000416 	blt	r2,zero,80301ec <___vfprintf_internal_r+0x4d4>
 80301dc:	d9013017 	ldw	r4,1216(sp)
 80301e0:	d9410404 	addi	r5,sp,1040
 80301e4:	802cb540 	call	802cb54 <_fflush_r>
 80301e8:	1006501e 	bne	r2,zero,8031b2c <___vfprintf_internal_r+0x1e14>
 80301ec:	d881070b 	ldhu	r2,1052(sp)
 80301f0:	1080100c 	andi	r2,r2,64
 80301f4:	10bfffcc 	andi	r2,r2,65535
 80301f8:	10a0001c 	xori	r2,r2,32768
 80301fc:	10a00004 	addi	r2,r2,-32768
 8030200:	10001426 	beq	r2,zero,8030254 <___vfprintf_internal_r+0x53c>
 8030204:	d8c12917 	ldw	r3,1188(sp)
 8030208:	1880030b 	ldhu	r2,12(r3)
 803020c:	10801014 	ori	r2,r2,64
 8030210:	1880030d 	sth	r2,12(r3)
 8030214:	00000f06 	br	8030254 <___vfprintf_internal_r+0x53c>
 8030218:	d8811d17 	ldw	r2,1140(sp)
 803021c:	10000426 	beq	r2,zero,8030230 <___vfprintf_internal_r+0x518>
 8030220:	d9013017 	ldw	r4,1216(sp)
 8030224:	d9412917 	ldw	r5,1188(sp)
 8030228:	d9811b04 	addi	r6,sp,1132
 803022c:	802fce40 	call	802fce4 <__sprint_r>
 8030230:	d8c12917 	ldw	r3,1188(sp)
 8030234:	1880030b 	ldhu	r2,12(r3)
 8030238:	1080100c 	andi	r2,r2,64
 803023c:	10bfffcc 	andi	r2,r2,65535
 8030240:	10a0001c 	xori	r2,r2,32768
 8030244:	10a00004 	addi	r2,r2,-32768
 8030248:	10000226 	beq	r2,zero,8030254 <___vfprintf_internal_r+0x53c>
 803024c:	00bfffc4 	movi	r2,-1
 8030250:	d8812c15 	stw	r2,1200(sp)
 8030254:	d8812c17 	ldw	r2,1200(sp)
 8030258:	dfc14617 	ldw	ra,1304(sp)
 803025c:	df014517 	ldw	fp,1300(sp)
 8030260:	ddc14417 	ldw	r23,1296(sp)
 8030264:	dd814317 	ldw	r22,1292(sp)
 8030268:	dd414217 	ldw	r21,1288(sp)
 803026c:	dd014117 	ldw	r20,1284(sp)
 8030270:	dcc14017 	ldw	r19,1280(sp)
 8030274:	dc813f17 	ldw	r18,1276(sp)
 8030278:	dc413e17 	ldw	r17,1272(sp)
 803027c:	dc013d17 	ldw	r16,1268(sp)
 8030280:	dec14704 	addi	sp,sp,1308
 8030284:	f800283a 	ret
 8030288:	d9412917 	ldw	r5,1188(sp)
 803028c:	8809883a 	mov	r4,r17
 8030290:	d9811b04 	addi	r6,sp,1132
 8030294:	802fce40 	call	802fce4 <__sprint_r>
 8030298:	103fe51e 	bne	r2,zero,8030230 <___vfprintf_internal_r+0x518>
 803029c:	da400404 	addi	r9,sp,16
 80302a0:	003eea06 	br	802fe4c <___vfprintf_internal_r+0x134>
 80302a4:	802ce100 	call	802ce10 <__sinit>
 80302a8:	003eb306 	br	802fd78 <___vfprintf_internal_r+0x60>
 80302ac:	e013883a 	mov	r9,fp
 80302b0:	84000414 	ori	r16,r16,16
 80302b4:	1839883a 	mov	fp,r3
 80302b8:	8080080c 	andi	r2,r16,32
 80302bc:	10034426 	beq	r2,zero,8030fd0 <___vfprintf_internal_r+0x12b8>
 80302c0:	d8c12d17 	ldw	r3,1204(sp)
 80302c4:	18800117 	ldw	r2,4(r3)
 80302c8:	1dc00017 	ldw	r23,0(r3)
 80302cc:	18c00204 	addi	r3,r3,8
 80302d0:	d8c12d15 	stw	r3,1204(sp)
 80302d4:	102d883a 	mov	r22,r2
 80302d8:	1003020e 	bge	r2,zero,8030ee4 <___vfprintf_internal_r+0x11cc>
 80302dc:	05efc83a 	sub	r23,zero,r23
 80302e0:	b804c03a 	cmpne	r2,r23,zero
 80302e4:	05adc83a 	sub	r22,zero,r22
 80302e8:	b0adc83a 	sub	r22,r22,r2
 80302ec:	00800b44 	movi	r2,45
 80302f0:	d8812585 	stb	r2,1174(sp)
 80302f4:	00c00044 	movi	r3,1
 80302f8:	bd84b03a 	or	r2,r23,r22
 80302fc:	e0000216 	blt	fp,zero,8030308 <___vfprintf_internal_r+0x5f0>
 8030300:	013fdfc4 	movi	r4,-129
 8030304:	8120703a 	and	r16,r16,r4
 8030308:	1001cc1e 	bne	r2,zero,8030a3c <___vfprintf_internal_r+0xd24>
 803030c:	e001cb1e 	bne	fp,zero,8030a3c <___vfprintf_internal_r+0xd24>
 8030310:	18c03fcc 	andi	r3,r3,255
 8030314:	1802ca1e 	bne	r3,zero,8030e40 <___vfprintf_internal_r+0x1128>
 8030318:	8080004c 	andi	r2,r16,1
 803031c:	1002c826 	beq	r2,zero,8030e40 <___vfprintf_internal_r+0x1128>
 8030320:	d8c13917 	ldw	r3,1252(sp)
 8030324:	00800c04 	movi	r2,48
 8030328:	d8810dc5 	stb	r2,1079(sp)
 803032c:	d8c12b15 	stw	r3,1196(sp)
 8030330:	dcc10dc4 	addi	r19,sp,1079
 8030334:	d8812b17 	ldw	r2,1196(sp)
 8030338:	d8812815 	stw	r2,1184(sp)
 803033c:	1700010e 	bge	r2,fp,8030344 <___vfprintf_internal_r+0x62c>
 8030340:	df012815 	stw	fp,1184(sp)
 8030344:	d8812583 	ldbu	r2,1174(sp)
 8030348:	df013115 	stw	fp,1220(sp)
 803034c:	10803fcc 	andi	r2,r2,255
 8030350:	1080201c 	xori	r2,r2,128
 8030354:	10bfe004 	addi	r2,r2,-128
 8030358:	103ed726 	beq	r2,zero,802feb8 <___vfprintf_internal_r+0x1a0>
 803035c:	d8c12817 	ldw	r3,1184(sp)
 8030360:	18c00044 	addi	r3,r3,1
 8030364:	d8c12815 	stw	r3,1184(sp)
 8030368:	003ed306 	br	802feb8 <___vfprintf_internal_r+0x1a0>
 803036c:	8080020c 	andi	r2,r16,8
 8030370:	e013883a 	mov	r9,fp
 8030374:	1839883a 	mov	fp,r3
 8030378:	1003a626 	beq	r2,zero,8031214 <___vfprintf_internal_r+0x14fc>
 803037c:	d9012d17 	ldw	r4,1204(sp)
 8030380:	25800017 	ldw	r22,0(r4)
 8030384:	25000117 	ldw	r20,4(r4)
 8030388:	21000204 	addi	r4,r4,8
 803038c:	d9012d15 	stw	r4,1204(sp)
 8030390:	dd813315 	stw	r22,1228(sp)
 8030394:	dd013415 	stw	r20,1232(sp)
 8030398:	b009883a 	mov	r4,r22
 803039c:	a00b883a 	mov	r5,r20
 80303a0:	da413c15 	stw	r9,1264(sp)
 80303a4:	80372180 	call	8037218 <__isinfd>
 80303a8:	da413c17 	ldw	r9,1264(sp)
 80303ac:	b009883a 	mov	r4,r22
 80303b0:	a00b883a 	mov	r5,r20
 80303b4:	10041d26 	beq	r2,zero,803142c <___vfprintf_internal_r+0x1714>
 80303b8:	000d883a 	mov	r6,zero
 80303bc:	000f883a 	mov	r7,zero
 80303c0:	803b9640 	call	803b964 <__ltdf2>
 80303c4:	da413c17 	ldw	r9,1264(sp)
 80303c8:	1004da16 	blt	r2,zero,8031734 <___vfprintf_internal_r+0x1a1c>
 80303cc:	d8812583 	ldbu	r2,1174(sp)
 80303d0:	00c011c4 	movi	r3,71
 80303d4:	1c83d116 	blt	r3,r18,803131c <___vfprintf_internal_r+0x1604>
 80303d8:	04c20134 	movhi	r19,2052
 80303dc:	9cc50104 	addi	r19,r19,5124
 80303e0:	00c000c4 	movi	r3,3
 80303e4:	d8c12815 	stw	r3,1184(sp)
 80303e8:	00ffdfc4 	movi	r3,-129
 80303ec:	80e0703a 	and	r16,r16,r3
 80303f0:	d8c12817 	ldw	r3,1184(sp)
 80303f4:	d8013115 	stw	zero,1220(sp)
 80303f8:	d8c12b15 	stw	r3,1196(sp)
 80303fc:	003fd306 	br	803034c <___vfprintf_internal_r+0x634>
 8030400:	84000214 	ori	r16,r16,8
 8030404:	ac800007 	ldb	r18,0(r21)
 8030408:	003e9f06 	br	802fe88 <___vfprintf_internal_r+0x170>
 803040c:	e013883a 	mov	r9,fp
 8030410:	84000414 	ori	r16,r16,16
 8030414:	1839883a 	mov	fp,r3
 8030418:	8080080c 	andi	r2,r16,32
 803041c:	10031d26 	beq	r2,zero,8031094 <___vfprintf_internal_r+0x137c>
 8030420:	d8812d17 	ldw	r2,1204(sp)
 8030424:	0007883a 	mov	r3,zero
 8030428:	15c00017 	ldw	r23,0(r2)
 803042c:	15800117 	ldw	r22,4(r2)
 8030430:	10800204 	addi	r2,r2,8
 8030434:	d8812d15 	stw	r2,1204(sp)
 8030438:	d8012585 	stb	zero,1174(sp)
 803043c:	bd84b03a 	or	r2,r23,r22
 8030440:	003fae06 	br	80302fc <___vfprintf_internal_r+0x5e4>
 8030444:	e013883a 	mov	r9,fp
 8030448:	84000414 	ori	r16,r16,16
 803044c:	1839883a 	mov	fp,r3
 8030450:	8080080c 	andi	r2,r16,32
 8030454:	1002e726 	beq	r2,zero,8030ff4 <___vfprintf_internal_r+0x12dc>
 8030458:	d8c12d17 	ldw	r3,1204(sp)
 803045c:	d9012d17 	ldw	r4,1204(sp)
 8030460:	1dc00017 	ldw	r23,0(r3)
 8030464:	1d800117 	ldw	r22,4(r3)
 8030468:	21000204 	addi	r4,r4,8
 803046c:	00c00044 	movi	r3,1
 8030470:	d9012d15 	stw	r4,1204(sp)
 8030474:	bd84b03a 	or	r2,r23,r22
 8030478:	d8012585 	stb	zero,1174(sp)
 803047c:	003f9f06 	br	80302fc <___vfprintf_internal_r+0x5e4>
 8030480:	e013883a 	mov	r9,fp
 8030484:	1839883a 	mov	fp,r3
 8030488:	00c20134 	movhi	r3,2052
 803048c:	18c50504 	addi	r3,r3,5140
 8030490:	d8c13615 	stw	r3,1240(sp)
 8030494:	8080080c 	andi	r2,r16,32
 8030498:	10007726 	beq	r2,zero,8030678 <___vfprintf_internal_r+0x960>
 803049c:	d9012d17 	ldw	r4,1204(sp)
 80304a0:	25c00017 	ldw	r23,0(r4)
 80304a4:	25800117 	ldw	r22,4(r4)
 80304a8:	21000204 	addi	r4,r4,8
 80304ac:	d9012d15 	stw	r4,1204(sp)
 80304b0:	8080004c 	andi	r2,r16,1
 80304b4:	1002c226 	beq	r2,zero,8030fc0 <___vfprintf_internal_r+0x12a8>
 80304b8:	bd84b03a 	or	r2,r23,r22
 80304bc:	10035d26 	beq	r2,zero,8031234 <___vfprintf_internal_r+0x151c>
 80304c0:	00c00c04 	movi	r3,48
 80304c4:	d8c12505 	stb	r3,1172(sp)
 80304c8:	dc812545 	stb	r18,1173(sp)
 80304cc:	84000094 	ori	r16,r16,2
 80304d0:	00c00084 	movi	r3,2
 80304d4:	d8012585 	stb	zero,1174(sp)
 80304d8:	003f8806 	br	80302fc <___vfprintf_internal_r+0x5e4>
 80304dc:	ac800007 	ldb	r18,0(r21)
 80304e0:	00c00a84 	movi	r3,42
 80304e4:	adc00044 	addi	r23,r21,1
 80304e8:	90c57526 	beq	r18,r3,8031ac0 <___vfprintf_internal_r+0x1da8>
 80304ec:	95bff404 	addi	r22,r18,-48
 80304f0:	0009883a 	mov	r4,zero
 80304f4:	9d84ff36 	bltu	r19,r22,80318f4 <___vfprintf_internal_r+0x1bdc>
 80304f8:	01400284 	movi	r5,10
 80304fc:	802c2180 	call	802c218 <__mulsi3>
 8030500:	bc800007 	ldb	r18,0(r23)
 8030504:	b089883a 	add	r4,r22,r2
 8030508:	bdc00044 	addi	r23,r23,1
 803050c:	95bff404 	addi	r22,r18,-48
 8030510:	9dbff92e 	bgeu	r19,r22,80304f8 <___vfprintf_internal_r+0x7e0>
 8030514:	2007883a 	mov	r3,r4
 8030518:	20044316 	blt	r4,zero,8031628 <___vfprintf_internal_r+0x1910>
 803051c:	b82b883a 	mov	r21,r23
 8030520:	003e5a06 	br	802fe8c <___vfprintf_internal_r+0x174>
 8030524:	ac800007 	ldb	r18,0(r21)
 8030528:	01001b04 	movi	r4,108
 803052c:	a805883a 	mov	r2,r21
 8030530:	91045526 	beq	r18,r4,8031688 <___vfprintf_internal_r+0x1970>
 8030534:	84000414 	ori	r16,r16,16
 8030538:	003e5306 	br	802fe88 <___vfprintf_internal_r+0x170>
 803053c:	8080080c 	andi	r2,r16,32
 8030540:	e013883a 	mov	r9,fp
 8030544:	10034026 	beq	r2,zero,8031248 <___vfprintf_internal_r+0x1530>
 8030548:	d9012d17 	ldw	r4,1204(sp)
 803054c:	20800017 	ldw	r2,0(r4)
 8030550:	d9012c17 	ldw	r4,1200(sp)
 8030554:	2007d7fa 	srai	r3,r4,31
 8030558:	d9012d17 	ldw	r4,1204(sp)
 803055c:	10c00115 	stw	r3,4(r2)
 8030560:	21000104 	addi	r4,r4,4
 8030564:	d9012d15 	stw	r4,1204(sp)
 8030568:	d9012c17 	ldw	r4,1200(sp)
 803056c:	11000015 	stw	r4,0(r2)
 8030570:	003e1f06 	br	802fdf0 <___vfprintf_internal_r+0xd8>
 8030574:	d9012d17 	ldw	r4,1204(sp)
 8030578:	21000017 	ldw	r4,0(r4)
 803057c:	d9012e15 	stw	r4,1208(sp)
 8030580:	d9012d17 	ldw	r4,1204(sp)
 8030584:	20800104 	addi	r2,r4,4
 8030588:	d9012e17 	ldw	r4,1208(sp)
 803058c:	203ee716 	blt	r4,zero,803012c <___vfprintf_internal_r+0x414>
 8030590:	d8812d15 	stw	r2,1204(sp)
 8030594:	ac800007 	ldb	r18,0(r21)
 8030598:	003e3b06 	br	802fe88 <___vfprintf_internal_r+0x170>
 803059c:	e013883a 	mov	r9,fp
 80305a0:	1839883a 	mov	fp,r3
 80305a4:	d8c12d17 	ldw	r3,1204(sp)
 80305a8:	00800c04 	movi	r2,48
 80305ac:	01020134 	movhi	r4,2052
 80305b0:	21050a04 	addi	r4,r4,5160
 80305b4:	1dc00017 	ldw	r23,0(r3)
 80305b8:	18c00104 	addi	r3,r3,4
 80305bc:	d8812505 	stb	r2,1172(sp)
 80305c0:	00801e04 	movi	r2,120
 80305c4:	d8812545 	stb	r2,1173(sp)
 80305c8:	d8c12d15 	stw	r3,1204(sp)
 80305cc:	002d883a 	mov	r22,zero
 80305d0:	84000094 	ori	r16,r16,2
 80305d4:	d9013615 	stw	r4,1240(sp)
 80305d8:	00c00084 	movi	r3,2
 80305dc:	04801e04 	movi	r18,120
 80305e0:	b805883a 	mov	r2,r23
 80305e4:	d8012585 	stb	zero,1174(sp)
 80305e8:	003f4406 	br	80302fc <___vfprintf_internal_r+0x5e4>
 80305ec:	84000814 	ori	r16,r16,32
 80305f0:	ac800007 	ldb	r18,0(r21)
 80305f4:	003e2406 	br	802fe88 <___vfprintf_internal_r+0x170>
 80305f8:	d8812d17 	ldw	r2,1204(sp)
 80305fc:	d8012585 	stb	zero,1174(sp)
 8030600:	e013883a 	mov	r9,fp
 8030604:	14c00017 	ldw	r19,0(r2)
 8030608:	1839883a 	mov	fp,r3
 803060c:	15c00104 	addi	r23,r2,4
 8030610:	98045526 	beq	r19,zero,8031768 <___vfprintf_internal_r+0x1a50>
 8030614:	9809883a 	mov	r4,r19
 8030618:	18043116 	blt	r3,zero,80316e0 <___vfprintf_internal_r+0x19c8>
 803061c:	000b883a 	mov	r5,zero
 8030620:	180d883a 	mov	r6,r3
 8030624:	da413c15 	stw	r9,1264(sp)
 8030628:	80358980 	call	8035898 <memchr>
 803062c:	da413c17 	ldw	r9,1264(sp)
 8030630:	10047a26 	beq	r2,zero,803181c <___vfprintf_internal_r+0x1b04>
 8030634:	14c5c83a 	sub	r2,r2,r19
 8030638:	d8812b15 	stw	r2,1196(sp)
 803063c:	e083d40e 	bge	fp,r2,8031590 <___vfprintf_internal_r+0x1878>
 8030640:	df012815 	stw	fp,1184(sp)
 8030644:	e004e416 	blt	fp,zero,80319d8 <___vfprintf_internal_r+0x1cc0>
 8030648:	d8812583 	ldbu	r2,1174(sp)
 803064c:	df012b15 	stw	fp,1196(sp)
 8030650:	ddc12d15 	stw	r23,1204(sp)
 8030654:	d8013115 	stw	zero,1220(sp)
 8030658:	003f3c06 	br	803034c <___vfprintf_internal_r+0x634>
 803065c:	00820134 	movhi	r2,2052
 8030660:	10850a04 	addi	r2,r2,5160
 8030664:	d8813615 	stw	r2,1240(sp)
 8030668:	8080080c 	andi	r2,r16,32
 803066c:	e013883a 	mov	r9,fp
 8030670:	1839883a 	mov	fp,r3
 8030674:	103f891e 	bne	r2,zero,803049c <___vfprintf_internal_r+0x784>
 8030678:	8080040c 	andi	r2,r16,16
 803067c:	1002c326 	beq	r2,zero,803118c <___vfprintf_internal_r+0x1474>
 8030680:	d8812d17 	ldw	r2,1204(sp)
 8030684:	002d883a 	mov	r22,zero
 8030688:	15c00017 	ldw	r23,0(r2)
 803068c:	10800104 	addi	r2,r2,4
 8030690:	d8812d15 	stw	r2,1204(sp)
 8030694:	003f8606 	br	80304b0 <___vfprintf_internal_r+0x798>
 8030698:	84001014 	ori	r16,r16,64
 803069c:	ac800007 	ldb	r18,0(r21)
 80306a0:	003df906 	br	802fe88 <___vfprintf_internal_r+0x170>
 80306a4:	d8812587 	ldb	r2,1174(sp)
 80306a8:	1002e51e 	bne	r2,zero,8031240 <___vfprintf_internal_r+0x1528>
 80306ac:	00800804 	movi	r2,32
 80306b0:	d8812585 	stb	r2,1174(sp)
 80306b4:	ac800007 	ldb	r18,0(r21)
 80306b8:	003df306 	br	802fe88 <___vfprintf_internal_r+0x170>
 80306bc:	84000054 	ori	r16,r16,1
 80306c0:	ac800007 	ldb	r18,0(r21)
 80306c4:	003df006 	br	802fe88 <___vfprintf_internal_r+0x170>
 80306c8:	84002014 	ori	r16,r16,128
 80306cc:	ac800007 	ldb	r18,0(r21)
 80306d0:	003ded06 	br	802fe88 <___vfprintf_internal_r+0x170>
 80306d4:	0009883a 	mov	r4,zero
 80306d8:	95bff404 	addi	r22,r18,-48
 80306dc:	182f883a 	mov	r23,r3
 80306e0:	01400284 	movi	r5,10
 80306e4:	802c2180 	call	802c218 <__mulsi3>
 80306e8:	ac800007 	ldb	r18,0(r21)
 80306ec:	1589883a 	add	r4,r2,r22
 80306f0:	ad400044 	addi	r21,r21,1
 80306f4:	95bff404 	addi	r22,r18,-48
 80306f8:	9dbff92e 	bgeu	r19,r22,80306e0 <___vfprintf_internal_r+0x9c8>
 80306fc:	b807883a 	mov	r3,r23
 8030700:	d9012e15 	stw	r4,1208(sp)
 8030704:	003de106 	br	802fe8c <___vfprintf_internal_r+0x174>
 8030708:	00800ac4 	movi	r2,43
 803070c:	d8812585 	stb	r2,1174(sp)
 8030710:	ac800007 	ldb	r18,0(r21)
 8030714:	003ddc06 	br	802fe88 <___vfprintf_internal_r+0x170>
 8030718:	d8c12d17 	ldw	r3,1204(sp)
 803071c:	d9012d17 	ldw	r4,1204(sp)
 8030720:	e013883a 	mov	r9,fp
 8030724:	18800017 	ldw	r2,0(r3)
 8030728:	21000104 	addi	r4,r4,4
 803072c:	00c00044 	movi	r3,1
 8030730:	d8c12815 	stw	r3,1184(sp)
 8030734:	d8012585 	stb	zero,1174(sp)
 8030738:	d8810405 	stb	r2,1040(sp)
 803073c:	d9012d15 	stw	r4,1204(sp)
 8030740:	d8c12b15 	stw	r3,1196(sp)
 8030744:	dcc10404 	addi	r19,sp,1040
 8030748:	003dda06 	br	802feb4 <___vfprintf_internal_r+0x19c>
 803074c:	e013883a 	mov	r9,fp
 8030750:	1839883a 	mov	fp,r3
 8030754:	003ed806 	br	80302b8 <___vfprintf_internal_r+0x5a0>
 8030758:	e013883a 	mov	r9,fp
 803075c:	1839883a 	mov	fp,r3
 8030760:	003f2d06 	br	8030418 <___vfprintf_internal_r+0x700>
 8030764:	e013883a 	mov	r9,fp
 8030768:	1839883a 	mov	fp,r3
 803076c:	003f3806 	br	8030450 <___vfprintf_internal_r+0x738>
 8030770:	da011d17 	ldw	r8,1140(sp)
 8030774:	d8c11c17 	ldw	r3,1136(sp)
 8030778:	d8812587 	ldb	r2,1174(sp)
 803077c:	10000b26 	beq	r2,zero,80307ac <___vfprintf_internal_r+0xa94>
 8030780:	d8812584 	addi	r2,sp,1174
 8030784:	48800015 	stw	r2,0(r9)
 8030788:	00800044 	movi	r2,1
 803078c:	48800115 	stw	r2,4(r9)
 8030790:	4091883a 	add	r8,r8,r2
 8030794:	1887883a 	add	r3,r3,r2
 8030798:	da011d15 	stw	r8,1140(sp)
 803079c:	d8c11c15 	stw	r3,1136(sp)
 80307a0:	008001c4 	movi	r2,7
 80307a4:	10c18e16 	blt	r2,r3,8030de0 <___vfprintf_internal_r+0x10c8>
 80307a8:	4a400204 	addi	r9,r9,8
 80307ac:	d9012a17 	ldw	r4,1192(sp)
 80307b0:	20000b26 	beq	r4,zero,80307e0 <___vfprintf_internal_r+0xac8>
 80307b4:	d8812504 	addi	r2,sp,1172
 80307b8:	48800015 	stw	r2,0(r9)
 80307bc:	00800084 	movi	r2,2
 80307c0:	48800115 	stw	r2,4(r9)
 80307c4:	4091883a 	add	r8,r8,r2
 80307c8:	18c00044 	addi	r3,r3,1
 80307cc:	da011d15 	stw	r8,1140(sp)
 80307d0:	d8c11c15 	stw	r3,1136(sp)
 80307d4:	008001c4 	movi	r2,7
 80307d8:	10c17816 	blt	r2,r3,8030dbc <___vfprintf_internal_r+0x10a4>
 80307dc:	4a400204 	addi	r9,r9,8
 80307e0:	d9012f17 	ldw	r4,1212(sp)
 80307e4:	00802004 	movi	r2,128
 80307e8:	2080fc26 	beq	r4,r2,8030bdc <___vfprintf_internal_r+0xec4>
 80307ec:	d8813117 	ldw	r2,1220(sp)
 80307f0:	d9012b17 	ldw	r4,1196(sp)
 80307f4:	112fc83a 	sub	r23,r2,r4
 80307f8:	05c02a0e 	bge	zero,r23,80308a4 <___vfprintf_internal_r+0xb8c>
 80307fc:	07000404 	movi	fp,16
 8030800:	05020134 	movhi	r20,2052
 8030804:	a5051584 	addi	r20,r20,5206
 8030808:	e5c01d0e 	bge	fp,r23,8030880 <___vfprintf_internal_r+0xb68>
 803080c:	dc812a15 	stw	r18,1192(sp)
 8030810:	058001c4 	movi	r22,7
 8030814:	a025883a 	mov	r18,r20
 8030818:	8029883a 	mov	r20,r16
 803081c:	dc012917 	ldw	r16,1188(sp)
 8030820:	00000306 	br	8030830 <___vfprintf_internal_r+0xb18>
 8030824:	bdfffc04 	addi	r23,r23,-16
 8030828:	4a400204 	addi	r9,r9,8
 803082c:	e5c0110e 	bge	fp,r23,8030874 <___vfprintf_internal_r+0xb5c>
 8030830:	4c800015 	stw	r18,0(r9)
 8030834:	4f000115 	stw	fp,4(r9)
 8030838:	42000404 	addi	r8,r8,16
 803083c:	18c00044 	addi	r3,r3,1
 8030840:	da011d15 	stw	r8,1140(sp)
 8030844:	d8c11c15 	stw	r3,1136(sp)
 8030848:	b0fff60e 	bge	r22,r3,8030824 <___vfprintf_internal_r+0xb0c>
 803084c:	8809883a 	mov	r4,r17
 8030850:	800b883a 	mov	r5,r16
 8030854:	d9811b04 	addi	r6,sp,1132
 8030858:	802fce40 	call	802fce4 <__sprint_r>
 803085c:	103e741e 	bne	r2,zero,8030230 <___vfprintf_internal_r+0x518>
 8030860:	bdfffc04 	addi	r23,r23,-16
 8030864:	da011d17 	ldw	r8,1140(sp)
 8030868:	d8c11c17 	ldw	r3,1136(sp)
 803086c:	da400404 	addi	r9,sp,16
 8030870:	e5ffef16 	blt	fp,r23,8030830 <___vfprintf_internal_r+0xb18>
 8030874:	a021883a 	mov	r16,r20
 8030878:	9029883a 	mov	r20,r18
 803087c:	dc812a17 	ldw	r18,1192(sp)
 8030880:	4d000015 	stw	r20,0(r9)
 8030884:	4dc00115 	stw	r23,4(r9)
 8030888:	45d1883a 	add	r8,r8,r23
 803088c:	18c00044 	addi	r3,r3,1
 8030890:	da011d15 	stw	r8,1140(sp)
 8030894:	d8c11c15 	stw	r3,1136(sp)
 8030898:	008001c4 	movi	r2,7
 803089c:	10c13e16 	blt	r2,r3,8030d98 <___vfprintf_internal_r+0x1080>
 80308a0:	4a400204 	addi	r9,r9,8
 80308a4:	8080400c 	andi	r2,r16,256
 80308a8:	1000831e 	bne	r2,zero,8030ab8 <___vfprintf_internal_r+0xda0>
 80308ac:	d8812b17 	ldw	r2,1196(sp)
 80308b0:	4cc00015 	stw	r19,0(r9)
 80308b4:	48800115 	stw	r2,4(r9)
 80308b8:	4091883a 	add	r8,r8,r2
 80308bc:	18c00044 	addi	r3,r3,1
 80308c0:	da011d15 	stw	r8,1140(sp)
 80308c4:	d8c11c15 	stw	r3,1136(sp)
 80308c8:	008001c4 	movi	r2,7
 80308cc:	10c05316 	blt	r2,r3,8030a1c <___vfprintf_internal_r+0xd04>
 80308d0:	4a400204 	addi	r9,r9,8
 80308d4:	8400010c 	andi	r16,r16,4
 80308d8:	80002e26 	beq	r16,zero,8030994 <___vfprintf_internal_r+0xc7c>
 80308dc:	d8812e17 	ldw	r2,1208(sp)
 80308e0:	d8c12817 	ldw	r3,1184(sp)
 80308e4:	10e1c83a 	sub	r16,r2,r3
 80308e8:	04002a0e 	bge	zero,r16,8030994 <___vfprintf_internal_r+0xc7c>
 80308ec:	04800404 	movi	r18,16
 80308f0:	d8c11c17 	ldw	r3,1136(sp)
 80308f4:	05c20134 	movhi	r23,2052
 80308f8:	bdc51184 	addi	r23,r23,5190
 80308fc:	9400170e 	bge	r18,r16,803095c <___vfprintf_internal_r+0xc44>
 8030900:	04c001c4 	movi	r19,7
 8030904:	dd012917 	ldw	r20,1188(sp)
 8030908:	00000306 	br	8030918 <___vfprintf_internal_r+0xc00>
 803090c:	843ffc04 	addi	r16,r16,-16
 8030910:	4a400204 	addi	r9,r9,8
 8030914:	9400110e 	bge	r18,r16,803095c <___vfprintf_internal_r+0xc44>
 8030918:	4dc00015 	stw	r23,0(r9)
 803091c:	4c800115 	stw	r18,4(r9)
 8030920:	42000404 	addi	r8,r8,16
 8030924:	18c00044 	addi	r3,r3,1
 8030928:	da011d15 	stw	r8,1140(sp)
 803092c:	d8c11c15 	stw	r3,1136(sp)
 8030930:	98fff60e 	bge	r19,r3,803090c <___vfprintf_internal_r+0xbf4>
 8030934:	8809883a 	mov	r4,r17
 8030938:	a00b883a 	mov	r5,r20
 803093c:	d9811b04 	addi	r6,sp,1132
 8030940:	802fce40 	call	802fce4 <__sprint_r>
 8030944:	103e3a1e 	bne	r2,zero,8030230 <___vfprintf_internal_r+0x518>
 8030948:	843ffc04 	addi	r16,r16,-16
 803094c:	da011d17 	ldw	r8,1140(sp)
 8030950:	d8c11c17 	ldw	r3,1136(sp)
 8030954:	da400404 	addi	r9,sp,16
 8030958:	943fef16 	blt	r18,r16,8030918 <___vfprintf_internal_r+0xc00>
 803095c:	4dc00015 	stw	r23,0(r9)
 8030960:	4c000115 	stw	r16,4(r9)
 8030964:	8211883a 	add	r8,r16,r8
 8030968:	18c00044 	addi	r3,r3,1
 803096c:	da011d15 	stw	r8,1140(sp)
 8030970:	d8c11c15 	stw	r3,1136(sp)
 8030974:	008001c4 	movi	r2,7
 8030978:	10c0060e 	bge	r2,r3,8030994 <___vfprintf_internal_r+0xc7c>
 803097c:	d9412917 	ldw	r5,1188(sp)
 8030980:	8809883a 	mov	r4,r17
 8030984:	d9811b04 	addi	r6,sp,1132
 8030988:	802fce40 	call	802fce4 <__sprint_r>
 803098c:	103e281e 	bne	r2,zero,8030230 <___vfprintf_internal_r+0x518>
 8030990:	da011d17 	ldw	r8,1140(sp)
 8030994:	dd012817 	ldw	r20,1184(sp)
 8030998:	d9012e17 	ldw	r4,1208(sp)
 803099c:	a100010e 	bge	r20,r4,80309a4 <___vfprintf_internal_r+0xc8c>
 80309a0:	2029883a 	mov	r20,r4
 80309a4:	d8812c17 	ldw	r2,1200(sp)
 80309a8:	1505883a 	add	r2,r2,r20
 80309ac:	d8812c15 	stw	r2,1200(sp)
 80309b0:	4000b91e 	bne	r8,zero,8030c98 <___vfprintf_internal_r+0xf80>
 80309b4:	d8011c15 	stw	zero,1136(sp)
 80309b8:	a8800007 	ldb	r2,0(r21)
 80309bc:	da400404 	addi	r9,sp,16
 80309c0:	103d0d1e 	bne	r2,zero,802fdf8 <___vfprintf_internal_r+0xe0>
 80309c4:	a825883a 	mov	r18,r21
 80309c8:	003d2306 	br	802fe58 <___vfprintf_internal_r+0x140>
 80309cc:	d9412917 	ldw	r5,1188(sp)
 80309d0:	8809883a 	mov	r4,r17
 80309d4:	d9811b04 	addi	r6,sp,1132
 80309d8:	802fce40 	call	802fce4 <__sprint_r>
 80309dc:	103e141e 	bne	r2,zero,8030230 <___vfprintf_internal_r+0x518>
 80309e0:	da011d17 	ldw	r8,1140(sp)
 80309e4:	da400404 	addi	r9,sp,16
 80309e8:	8080004c 	andi	r2,r16,1
 80309ec:	103fb926 	beq	r2,zero,80308d4 <___vfprintf_internal_r+0xbbc>
 80309f0:	d8c11c17 	ldw	r3,1136(sp)
 80309f4:	d9013717 	ldw	r4,1244(sp)
 80309f8:	00800044 	movi	r2,1
 80309fc:	48800115 	stw	r2,4(r9)
 8030a00:	49000015 	stw	r4,0(r9)
 8030a04:	4091883a 	add	r8,r8,r2
 8030a08:	1887883a 	add	r3,r3,r2
 8030a0c:	da011d15 	stw	r8,1140(sp)
 8030a10:	d8c11c15 	stw	r3,1136(sp)
 8030a14:	008001c4 	movi	r2,7
 8030a18:	10ffad0e 	bge	r2,r3,80308d0 <___vfprintf_internal_r+0xbb8>
 8030a1c:	d9412917 	ldw	r5,1188(sp)
 8030a20:	8809883a 	mov	r4,r17
 8030a24:	d9811b04 	addi	r6,sp,1132
 8030a28:	802fce40 	call	802fce4 <__sprint_r>
 8030a2c:	103e001e 	bne	r2,zero,8030230 <___vfprintf_internal_r+0x518>
 8030a30:	da400404 	addi	r9,sp,16
 8030a34:	da011d17 	ldw	r8,1140(sp)
 8030a38:	003fa606 	br	80308d4 <___vfprintf_internal_r+0xbbc>
 8030a3c:	18803fcc 	andi	r2,r3,255
 8030a40:	00c00044 	movi	r3,1
 8030a44:	10c10126 	beq	r2,r3,8030e4c <___vfprintf_internal_r+0x1134>
 8030a48:	00c00084 	movi	r3,2
 8030a4c:	10c0ed26 	beq	r2,r3,8030e04 <___vfprintf_internal_r+0x10ec>
 8030a50:	d8c10dc4 	addi	r3,sp,1079
 8030a54:	b808d0fa 	srli	r4,r23,3
 8030a58:	b00a977a 	slli	r5,r22,29
 8030a5c:	b02cd0fa 	srli	r22,r22,3
 8030a60:	bdc001cc 	andi	r23,r23,7
 8030a64:	b8800c04 	addi	r2,r23,48
 8030a68:	292eb03a 	or	r23,r5,r4
 8030a6c:	18800005 	stb	r2,0(r3)
 8030a70:	bd88b03a 	or	r4,r23,r22
 8030a74:	1827883a 	mov	r19,r3
 8030a78:	18ffffc4 	addi	r3,r3,-1
 8030a7c:	203ff51e 	bne	r4,zero,8030a54 <___vfprintf_internal_r+0xd3c>
 8030a80:	8100004c 	andi	r4,r16,1
 8030a84:	980b883a 	mov	r5,r19
 8030a88:	20000726 	beq	r4,zero,8030aa8 <___vfprintf_internal_r+0xd90>
 8030a8c:	10803fcc 	andi	r2,r2,255
 8030a90:	1080201c 	xori	r2,r2,128
 8030a94:	10bfe004 	addi	r2,r2,-128
 8030a98:	01000c04 	movi	r4,48
 8030a9c:	11000226 	beq	r2,r4,8030aa8 <___vfprintf_internal_r+0xd90>
 8030aa0:	1827883a 	mov	r19,r3
 8030aa4:	293fffc5 	stb	r4,-1(r5)
 8030aa8:	d8812717 	ldw	r2,1180(sp)
 8030aac:	14c5c83a 	sub	r2,r2,r19
 8030ab0:	d8812b15 	stw	r2,1196(sp)
 8030ab4:	003e1f06 	br	8030334 <___vfprintf_internal_r+0x61c>
 8030ab8:	00801944 	movi	r2,101
 8030abc:	14807c0e 	bge	r2,r18,8030cb0 <___vfprintf_internal_r+0xf98>
 8030ac0:	d9013317 	ldw	r4,1228(sp)
 8030ac4:	d9413417 	ldw	r5,1232(sp)
 8030ac8:	000d883a 	mov	r6,zero
 8030acc:	000f883a 	mov	r7,zero
 8030ad0:	d8c13b15 	stw	r3,1260(sp)
 8030ad4:	da013a15 	stw	r8,1256(sp)
 8030ad8:	da413c15 	stw	r9,1264(sp)
 8030adc:	803b7e40 	call	803b7e4 <__eqdf2>
 8030ae0:	d8c13b17 	ldw	r3,1260(sp)
 8030ae4:	da013a17 	ldw	r8,1256(sp)
 8030ae8:	da413c17 	ldw	r9,1264(sp)
 8030aec:	1001001e 	bne	r2,zero,8030ef0 <___vfprintf_internal_r+0x11d8>
 8030af0:	00820134 	movhi	r2,2052
 8030af4:	10851104 	addi	r2,r2,5188
 8030af8:	48800015 	stw	r2,0(r9)
 8030afc:	00800044 	movi	r2,1
 8030b00:	48800115 	stw	r2,4(r9)
 8030b04:	4091883a 	add	r8,r8,r2
 8030b08:	1887883a 	add	r3,r3,r2
 8030b0c:	da011d15 	stw	r8,1140(sp)
 8030b10:	d8c11c15 	stw	r3,1136(sp)
 8030b14:	008001c4 	movi	r2,7
 8030b18:	10c20316 	blt	r2,r3,8031328 <___vfprintf_internal_r+0x1610>
 8030b1c:	4a400204 	addi	r9,r9,8
 8030b20:	d8812417 	ldw	r2,1168(sp)
 8030b24:	d8c13217 	ldw	r3,1224(sp)
 8030b28:	10c00216 	blt	r2,r3,8030b34 <___vfprintf_internal_r+0xe1c>
 8030b2c:	8080004c 	andi	r2,r16,1
 8030b30:	103f6826 	beq	r2,zero,80308d4 <___vfprintf_internal_r+0xbbc>
 8030b34:	d8c11c17 	ldw	r3,1136(sp)
 8030b38:	d9013717 	ldw	r4,1244(sp)
 8030b3c:	00800044 	movi	r2,1
 8030b40:	48800115 	stw	r2,4(r9)
 8030b44:	49000015 	stw	r4,0(r9)
 8030b48:	4091883a 	add	r8,r8,r2
 8030b4c:	1887883a 	add	r3,r3,r2
 8030b50:	da011d15 	stw	r8,1140(sp)
 8030b54:	d8c11c15 	stw	r3,1136(sp)
 8030b58:	008001c4 	movi	r2,7
 8030b5c:	10c2ce16 	blt	r2,r3,8031698 <___vfprintf_internal_r+0x1980>
 8030b60:	4a400204 	addi	r9,r9,8
 8030b64:	d8813217 	ldw	r2,1224(sp)
 8030b68:	14bfffc4 	addi	r18,r2,-1
 8030b6c:	04bf590e 	bge	zero,r18,80308d4 <___vfprintf_internal_r+0xbbc>
 8030b70:	04c00404 	movi	r19,16
 8030b74:	d8c11c17 	ldw	r3,1136(sp)
 8030b78:	05020134 	movhi	r20,2052
 8030b7c:	a5051584 	addi	r20,r20,5206
 8030b80:	9c818a0e 	bge	r19,r18,80311ac <___vfprintf_internal_r+0x1494>
 8030b84:	058001c4 	movi	r22,7
 8030b88:	ddc12917 	ldw	r23,1188(sp)
 8030b8c:	00000306 	br	8030b9c <___vfprintf_internal_r+0xe84>
 8030b90:	4a400204 	addi	r9,r9,8
 8030b94:	94bffc04 	addi	r18,r18,-16
 8030b98:	9c81840e 	bge	r19,r18,80311ac <___vfprintf_internal_r+0x1494>
 8030b9c:	4d000015 	stw	r20,0(r9)
 8030ba0:	4cc00115 	stw	r19,4(r9)
 8030ba4:	42000404 	addi	r8,r8,16
 8030ba8:	18c00044 	addi	r3,r3,1
 8030bac:	da011d15 	stw	r8,1140(sp)
 8030bb0:	d8c11c15 	stw	r3,1136(sp)
 8030bb4:	b0fff60e 	bge	r22,r3,8030b90 <___vfprintf_internal_r+0xe78>
 8030bb8:	8809883a 	mov	r4,r17
 8030bbc:	b80b883a 	mov	r5,r23
 8030bc0:	d9811b04 	addi	r6,sp,1132
 8030bc4:	802fce40 	call	802fce4 <__sprint_r>
 8030bc8:	103d991e 	bne	r2,zero,8030230 <___vfprintf_internal_r+0x518>
 8030bcc:	da011d17 	ldw	r8,1140(sp)
 8030bd0:	d8c11c17 	ldw	r3,1136(sp)
 8030bd4:	da400404 	addi	r9,sp,16
 8030bd8:	003fee06 	br	8030b94 <___vfprintf_internal_r+0xe7c>
 8030bdc:	d8812e17 	ldw	r2,1208(sp)
 8030be0:	d9012817 	ldw	r4,1184(sp)
 8030be4:	112fc83a 	sub	r23,r2,r4
 8030be8:	05ff000e 	bge	zero,r23,80307ec <___vfprintf_internal_r+0xad4>
 8030bec:	07000404 	movi	fp,16
 8030bf0:	05020134 	movhi	r20,2052
 8030bf4:	a5051584 	addi	r20,r20,5206
 8030bf8:	e5c01d0e 	bge	fp,r23,8030c70 <___vfprintf_internal_r+0xf58>
 8030bfc:	dc812a15 	stw	r18,1192(sp)
 8030c00:	058001c4 	movi	r22,7
 8030c04:	a025883a 	mov	r18,r20
 8030c08:	8029883a 	mov	r20,r16
 8030c0c:	dc012917 	ldw	r16,1188(sp)
 8030c10:	00000306 	br	8030c20 <___vfprintf_internal_r+0xf08>
 8030c14:	bdfffc04 	addi	r23,r23,-16
 8030c18:	4a400204 	addi	r9,r9,8
 8030c1c:	e5c0110e 	bge	fp,r23,8030c64 <___vfprintf_internal_r+0xf4c>
 8030c20:	4c800015 	stw	r18,0(r9)
 8030c24:	4f000115 	stw	fp,4(r9)
 8030c28:	42000404 	addi	r8,r8,16
 8030c2c:	18c00044 	addi	r3,r3,1
 8030c30:	da011d15 	stw	r8,1140(sp)
 8030c34:	d8c11c15 	stw	r3,1136(sp)
 8030c38:	b0fff60e 	bge	r22,r3,8030c14 <___vfprintf_internal_r+0xefc>
 8030c3c:	8809883a 	mov	r4,r17
 8030c40:	800b883a 	mov	r5,r16
 8030c44:	d9811b04 	addi	r6,sp,1132
 8030c48:	802fce40 	call	802fce4 <__sprint_r>
 8030c4c:	103d781e 	bne	r2,zero,8030230 <___vfprintf_internal_r+0x518>
 8030c50:	bdfffc04 	addi	r23,r23,-16
 8030c54:	da011d17 	ldw	r8,1140(sp)
 8030c58:	d8c11c17 	ldw	r3,1136(sp)
 8030c5c:	da400404 	addi	r9,sp,16
 8030c60:	e5ffef16 	blt	fp,r23,8030c20 <___vfprintf_internal_r+0xf08>
 8030c64:	a021883a 	mov	r16,r20
 8030c68:	9029883a 	mov	r20,r18
 8030c6c:	dc812a17 	ldw	r18,1192(sp)
 8030c70:	4d000015 	stw	r20,0(r9)
 8030c74:	4dc00115 	stw	r23,4(r9)
 8030c78:	45d1883a 	add	r8,r8,r23
 8030c7c:	18c00044 	addi	r3,r3,1
 8030c80:	da011d15 	stw	r8,1140(sp)
 8030c84:	d8c11c15 	stw	r3,1136(sp)
 8030c88:	008001c4 	movi	r2,7
 8030c8c:	10c13616 	blt	r2,r3,8031168 <___vfprintf_internal_r+0x1450>
 8030c90:	4a400204 	addi	r9,r9,8
 8030c94:	003ed506 	br	80307ec <___vfprintf_internal_r+0xad4>
 8030c98:	d9412917 	ldw	r5,1188(sp)
 8030c9c:	8809883a 	mov	r4,r17
 8030ca0:	d9811b04 	addi	r6,sp,1132
 8030ca4:	802fce40 	call	802fce4 <__sprint_r>
 8030ca8:	103f4226 	beq	r2,zero,80309b4 <___vfprintf_internal_r+0xc9c>
 8030cac:	003d6006 	br	8030230 <___vfprintf_internal_r+0x518>
 8030cb0:	d9013217 	ldw	r4,1224(sp)
 8030cb4:	00800044 	movi	r2,1
 8030cb8:	4cc00015 	stw	r19,0(r9)
 8030cbc:	1101000e 	bge	r2,r4,80310c0 <___vfprintf_internal_r+0x13a8>
 8030cc0:	00800044 	movi	r2,1
 8030cc4:	48800115 	stw	r2,4(r9)
 8030cc8:	4091883a 	add	r8,r8,r2
 8030ccc:	1887883a 	add	r3,r3,r2
 8030cd0:	da011d15 	stw	r8,1140(sp)
 8030cd4:	d8c11c15 	stw	r3,1136(sp)
 8030cd8:	008001c4 	movi	r2,7
 8030cdc:	10c10c16 	blt	r2,r3,8031110 <___vfprintf_internal_r+0x13f8>
 8030ce0:	4a400204 	addi	r9,r9,8
 8030ce4:	d8813717 	ldw	r2,1244(sp)
 8030ce8:	48800015 	stw	r2,0(r9)
 8030cec:	00800044 	movi	r2,1
 8030cf0:	48800115 	stw	r2,4(r9)
 8030cf4:	4091883a 	add	r8,r8,r2
 8030cf8:	1887883a 	add	r3,r3,r2
 8030cfc:	da011d15 	stw	r8,1140(sp)
 8030d00:	d8c11c15 	stw	r3,1136(sp)
 8030d04:	008001c4 	movi	r2,7
 8030d08:	10c10a16 	blt	r2,r3,8031134 <___vfprintf_internal_r+0x141c>
 8030d0c:	4c800204 	addi	r18,r9,8
 8030d10:	d9013317 	ldw	r4,1228(sp)
 8030d14:	d9413417 	ldw	r5,1232(sp)
 8030d18:	000d883a 	mov	r6,zero
 8030d1c:	000f883a 	mov	r7,zero
 8030d20:	d8c13b15 	stw	r3,1260(sp)
 8030d24:	da013a15 	stw	r8,1256(sp)
 8030d28:	803b8400 	call	803b840 <__nedf2>
 8030d2c:	d8c13b17 	ldw	r3,1260(sp)
 8030d30:	da013a17 	ldw	r8,1256(sp)
 8030d34:	1000ba26 	beq	r2,zero,8031020 <___vfprintf_internal_r+0x1308>
 8030d38:	d9013217 	ldw	r4,1224(sp)
 8030d3c:	9cc00044 	addi	r19,r19,1
 8030d40:	94c00015 	stw	r19,0(r18)
 8030d44:	20bfffc4 	addi	r2,r4,-1
 8030d48:	90800115 	stw	r2,4(r18)
 8030d4c:	4091883a 	add	r8,r8,r2
 8030d50:	18c00044 	addi	r3,r3,1
 8030d54:	da011d15 	stw	r8,1140(sp)
 8030d58:	d8c11c15 	stw	r3,1136(sp)
 8030d5c:	008001c4 	movi	r2,7
 8030d60:	10c0e216 	blt	r2,r3,80310ec <___vfprintf_internal_r+0x13d4>
 8030d64:	94800204 	addi	r18,r18,8
 8030d68:	d9013517 	ldw	r4,1236(sp)
 8030d6c:	d8811fc4 	addi	r2,sp,1151
 8030d70:	90800015 	stw	r2,0(r18)
 8030d74:	91000115 	stw	r4,4(r18)
 8030d78:	4111883a 	add	r8,r8,r4
 8030d7c:	18c00044 	addi	r3,r3,1
 8030d80:	da011d15 	stw	r8,1140(sp)
 8030d84:	d8c11c15 	stw	r3,1136(sp)
 8030d88:	008001c4 	movi	r2,7
 8030d8c:	10ff2316 	blt	r2,r3,8030a1c <___vfprintf_internal_r+0xd04>
 8030d90:	92400204 	addi	r9,r18,8
 8030d94:	003ecf06 	br	80308d4 <___vfprintf_internal_r+0xbbc>
 8030d98:	d9412917 	ldw	r5,1188(sp)
 8030d9c:	8809883a 	mov	r4,r17
 8030da0:	d9811b04 	addi	r6,sp,1132
 8030da4:	802fce40 	call	802fce4 <__sprint_r>
 8030da8:	103d211e 	bne	r2,zero,8030230 <___vfprintf_internal_r+0x518>
 8030dac:	da011d17 	ldw	r8,1140(sp)
 8030db0:	d8c11c17 	ldw	r3,1136(sp)
 8030db4:	da400404 	addi	r9,sp,16
 8030db8:	003eba06 	br	80308a4 <___vfprintf_internal_r+0xb8c>
 8030dbc:	d9412917 	ldw	r5,1188(sp)
 8030dc0:	8809883a 	mov	r4,r17
 8030dc4:	d9811b04 	addi	r6,sp,1132
 8030dc8:	802fce40 	call	802fce4 <__sprint_r>
 8030dcc:	103d181e 	bne	r2,zero,8030230 <___vfprintf_internal_r+0x518>
 8030dd0:	da011d17 	ldw	r8,1140(sp)
 8030dd4:	d8c11c17 	ldw	r3,1136(sp)
 8030dd8:	da400404 	addi	r9,sp,16
 8030ddc:	003e8006 	br	80307e0 <___vfprintf_internal_r+0xac8>
 8030de0:	d9412917 	ldw	r5,1188(sp)
 8030de4:	8809883a 	mov	r4,r17
 8030de8:	d9811b04 	addi	r6,sp,1132
 8030dec:	802fce40 	call	802fce4 <__sprint_r>
 8030df0:	103d0f1e 	bne	r2,zero,8030230 <___vfprintf_internal_r+0x518>
 8030df4:	da011d17 	ldw	r8,1140(sp)
 8030df8:	d8c11c17 	ldw	r3,1136(sp)
 8030dfc:	da400404 	addi	r9,sp,16
 8030e00:	003e6a06 	br	80307ac <___vfprintf_internal_r+0xa94>
 8030e04:	d9413617 	ldw	r5,1240(sp)
 8030e08:	d8810dc4 	addi	r2,sp,1079
 8030e0c:	b8c003cc 	andi	r3,r23,15
 8030e10:	b008973a 	slli	r4,r22,28
 8030e14:	28c7883a 	add	r3,r5,r3
 8030e18:	b82ed13a 	srli	r23,r23,4
 8030e1c:	18c00003 	ldbu	r3,0(r3)
 8030e20:	b02cd13a 	srli	r22,r22,4
 8030e24:	25eeb03a 	or	r23,r4,r23
 8030e28:	10c00005 	stb	r3,0(r2)
 8030e2c:	bd86b03a 	or	r3,r23,r22
 8030e30:	1027883a 	mov	r19,r2
 8030e34:	10bfffc4 	addi	r2,r2,-1
 8030e38:	183ff41e 	bne	r3,zero,8030e0c <___vfprintf_internal_r+0x10f4>
 8030e3c:	003f1a06 	br	8030aa8 <___vfprintf_internal_r+0xd90>
 8030e40:	d8012b15 	stw	zero,1196(sp)
 8030e44:	dcc10e04 	addi	r19,sp,1080
 8030e48:	003d3a06 	br	8030334 <___vfprintf_internal_r+0x61c>
 8030e4c:	b0025426 	beq	r22,zero,80317a0 <___vfprintf_internal_r+0x1a88>
 8030e50:	b807883a 	mov	r3,r23
 8030e54:	d8810dc4 	addi	r2,sp,1079
 8030e58:	882f883a 	mov	r23,r17
 8030e5c:	04c00244 	movi	r19,9
 8030e60:	8023883a 	mov	r17,r16
 8030e64:	da412815 	stw	r9,1184(sp)
 8030e68:	1821883a 	mov	r16,r3
 8030e6c:	8009883a 	mov	r4,r16
 8030e70:	b00b883a 	mov	r5,r22
 8030e74:	01800284 	movi	r6,10
 8030e78:	000f883a 	mov	r7,zero
 8030e7c:	1029883a 	mov	r20,r2
 8030e80:	803acb00 	call	803acb0 <__umoddi3>
 8030e84:	10800c04 	addi	r2,r2,48
 8030e88:	8009883a 	mov	r4,r16
 8030e8c:	b00b883a 	mov	r5,r22
 8030e90:	a0800005 	stb	r2,0(r20)
 8030e94:	01800284 	movi	r6,10
 8030e98:	000f883a 	mov	r7,zero
 8030e9c:	803a6600 	call	803a660 <__udivdi3>
 8030ea0:	1021883a 	mov	r16,r2
 8030ea4:	182d883a 	mov	r22,r3
 8030ea8:	a0bfffc4 	addi	r2,r20,-1
 8030eac:	183fef1e 	bne	r3,zero,8030e6c <___vfprintf_internal_r+0x1154>
 8030eb0:	9c3fee36 	bltu	r19,r16,8030e6c <___vfprintf_internal_r+0x1154>
 8030eb4:	da412817 	ldw	r9,1184(sp)
 8030eb8:	8005883a 	mov	r2,r16
 8030ebc:	8821883a 	mov	r16,r17
 8030ec0:	b823883a 	mov	r17,r23
 8030ec4:	102f883a 	mov	r23,r2
 8030ec8:	d8812717 	ldw	r2,1180(sp)
 8030ecc:	a4ffffc4 	addi	r19,r20,-1
 8030ed0:	bdc00c04 	addi	r23,r23,48
 8030ed4:	14c5c83a 	sub	r2,r2,r19
 8030ed8:	a5ffffc5 	stb	r23,-1(r20)
 8030edc:	d8812b15 	stw	r2,1196(sp)
 8030ee0:	003d1406 	br	8030334 <___vfprintf_internal_r+0x61c>
 8030ee4:	00c00044 	movi	r3,1
 8030ee8:	bd84b03a 	or	r2,r23,r22
 8030eec:	003d0306 	br	80302fc <___vfprintf_internal_r+0x5e4>
 8030ef0:	dc812417 	ldw	r18,1168(sp)
 8030ef4:	0481140e 	bge	zero,r18,8031348 <___vfprintf_internal_r+0x1630>
 8030ef8:	d9013217 	ldw	r4,1224(sp)
 8030efc:	4cc00015 	stw	r19,0(r9)
 8030f00:	9100ec16 	blt	r18,r4,80312b4 <___vfprintf_internal_r+0x159c>
 8030f04:	49000115 	stw	r4,4(r9)
 8030f08:	4111883a 	add	r8,r8,r4
 8030f0c:	18c00044 	addi	r3,r3,1
 8030f10:	da011d15 	stw	r8,1140(sp)
 8030f14:	d8c11c15 	stw	r3,1136(sp)
 8030f18:	008001c4 	movi	r2,7
 8030f1c:	10c23616 	blt	r2,r3,80317f8 <___vfprintf_internal_r+0x1ae0>
 8030f20:	4a400204 	addi	r9,r9,8
 8030f24:	d8813217 	ldw	r2,1224(sp)
 8030f28:	90a5c83a 	sub	r18,r18,r2
 8030f2c:	04beae0e 	bge	zero,r18,80309e8 <___vfprintf_internal_r+0xcd0>
 8030f30:	04c00404 	movi	r19,16
 8030f34:	d8c11c17 	ldw	r3,1136(sp)
 8030f38:	05020134 	movhi	r20,2052
 8030f3c:	a5051584 	addi	r20,r20,5206
 8030f40:	9c81dd0e 	bge	r19,r18,80316b8 <___vfprintf_internal_r+0x19a0>
 8030f44:	058001c4 	movi	r22,7
 8030f48:	ddc12917 	ldw	r23,1188(sp)
 8030f4c:	00000306 	br	8030f5c <___vfprintf_internal_r+0x1244>
 8030f50:	4a400204 	addi	r9,r9,8
 8030f54:	94bffc04 	addi	r18,r18,-16
 8030f58:	9c81d70e 	bge	r19,r18,80316b8 <___vfprintf_internal_r+0x19a0>
 8030f5c:	4d000015 	stw	r20,0(r9)
 8030f60:	4cc00115 	stw	r19,4(r9)
 8030f64:	42000404 	addi	r8,r8,16
 8030f68:	18c00044 	addi	r3,r3,1
 8030f6c:	da011d15 	stw	r8,1140(sp)
 8030f70:	d8c11c15 	stw	r3,1136(sp)
 8030f74:	b0fff60e 	bge	r22,r3,8030f50 <___vfprintf_internal_r+0x1238>
 8030f78:	8809883a 	mov	r4,r17
 8030f7c:	b80b883a 	mov	r5,r23
 8030f80:	d9811b04 	addi	r6,sp,1132
 8030f84:	802fce40 	call	802fce4 <__sprint_r>
 8030f88:	103ca91e 	bne	r2,zero,8030230 <___vfprintf_internal_r+0x518>
 8030f8c:	da011d17 	ldw	r8,1140(sp)
 8030f90:	d8c11c17 	ldw	r3,1136(sp)
 8030f94:	da400404 	addi	r9,sp,16
 8030f98:	003fee06 	br	8030f54 <___vfprintf_internal_r+0x123c>
 8030f9c:	d9412917 	ldw	r5,1188(sp)
 8030fa0:	8809883a 	mov	r4,r17
 8030fa4:	d9811b04 	addi	r6,sp,1132
 8030fa8:	802fce40 	call	802fce4 <__sprint_r>
 8030fac:	103ca01e 	bne	r2,zero,8030230 <___vfprintf_internal_r+0x518>
 8030fb0:	da011d17 	ldw	r8,1140(sp)
 8030fb4:	d8c11c17 	ldw	r3,1136(sp)
 8030fb8:	da400404 	addi	r9,sp,16
 8030fbc:	003dee06 	br	8030778 <___vfprintf_internal_r+0xa60>
 8030fc0:	00c00084 	movi	r3,2
 8030fc4:	bd84b03a 	or	r2,r23,r22
 8030fc8:	d8012585 	stb	zero,1174(sp)
 8030fcc:	003ccb06 	br	80302fc <___vfprintf_internal_r+0x5e4>
 8030fd0:	8080040c 	andi	r2,r16,16
 8030fd4:	1000ae26 	beq	r2,zero,8031290 <___vfprintf_internal_r+0x1578>
 8030fd8:	d9012d17 	ldw	r4,1204(sp)
 8030fdc:	25c00017 	ldw	r23,0(r4)
 8030fe0:	21000104 	addi	r4,r4,4
 8030fe4:	d9012d15 	stw	r4,1204(sp)
 8030fe8:	b82dd7fa 	srai	r22,r23,31
 8030fec:	b005883a 	mov	r2,r22
 8030ff0:	003cb906 	br	80302d8 <___vfprintf_internal_r+0x5c0>
 8030ff4:	8080040c 	andi	r2,r16,16
 8030ff8:	10007026 	beq	r2,zero,80311bc <___vfprintf_internal_r+0x14a4>
 8030ffc:	d8812d17 	ldw	r2,1204(sp)
 8031000:	002d883a 	mov	r22,zero
 8031004:	00c00044 	movi	r3,1
 8031008:	15c00017 	ldw	r23,0(r2)
 803100c:	10800104 	addi	r2,r2,4
 8031010:	d8812d15 	stw	r2,1204(sp)
 8031014:	d8012585 	stb	zero,1174(sp)
 8031018:	b805883a 	mov	r2,r23
 803101c:	003cb706 	br	80302fc <___vfprintf_internal_r+0x5e4>
 8031020:	d8813217 	ldw	r2,1224(sp)
 8031024:	14ffffc4 	addi	r19,r2,-1
 8031028:	04ff4f0e 	bge	zero,r19,8030d68 <___vfprintf_internal_r+0x1050>
 803102c:	05800404 	movi	r22,16
 8031030:	05020134 	movhi	r20,2052
 8031034:	a5051584 	addi	r20,r20,5206
 8031038:	b4c0470e 	bge	r22,r19,8031158 <___vfprintf_internal_r+0x1440>
 803103c:	05c001c4 	movi	r23,7
 8031040:	df012917 	ldw	fp,1188(sp)
 8031044:	00000306 	br	8031054 <___vfprintf_internal_r+0x133c>
 8031048:	94800204 	addi	r18,r18,8
 803104c:	9cfffc04 	addi	r19,r19,-16
 8031050:	b4c0410e 	bge	r22,r19,8031158 <___vfprintf_internal_r+0x1440>
 8031054:	95000015 	stw	r20,0(r18)
 8031058:	95800115 	stw	r22,4(r18)
 803105c:	42000404 	addi	r8,r8,16
 8031060:	18c00044 	addi	r3,r3,1
 8031064:	da011d15 	stw	r8,1140(sp)
 8031068:	d8c11c15 	stw	r3,1136(sp)
 803106c:	b8fff60e 	bge	r23,r3,8031048 <___vfprintf_internal_r+0x1330>
 8031070:	8809883a 	mov	r4,r17
 8031074:	e00b883a 	mov	r5,fp
 8031078:	d9811b04 	addi	r6,sp,1132
 803107c:	802fce40 	call	802fce4 <__sprint_r>
 8031080:	103c6b1e 	bne	r2,zero,8030230 <___vfprintf_internal_r+0x518>
 8031084:	da011d17 	ldw	r8,1140(sp)
 8031088:	d8c11c17 	ldw	r3,1136(sp)
 803108c:	dc800404 	addi	r18,sp,16
 8031090:	003fee06 	br	803104c <___vfprintf_internal_r+0x1334>
 8031094:	8080040c 	andi	r2,r16,16
 8031098:	10005326 	beq	r2,zero,80311e8 <___vfprintf_internal_r+0x14d0>
 803109c:	d8c12d17 	ldw	r3,1204(sp)
 80310a0:	002d883a 	mov	r22,zero
 80310a4:	1dc00017 	ldw	r23,0(r3)
 80310a8:	18c00104 	addi	r3,r3,4
 80310ac:	d8c12d15 	stw	r3,1204(sp)
 80310b0:	b805883a 	mov	r2,r23
 80310b4:	0007883a 	mov	r3,zero
 80310b8:	d8012585 	stb	zero,1174(sp)
 80310bc:	003c8f06 	br	80302fc <___vfprintf_internal_r+0x5e4>
 80310c0:	8088703a 	and	r4,r16,r2
 80310c4:	203efe1e 	bne	r4,zero,8030cc0 <___vfprintf_internal_r+0xfa8>
 80310c8:	48800115 	stw	r2,4(r9)
 80310cc:	42000044 	addi	r8,r8,1
 80310d0:	18c00044 	addi	r3,r3,1
 80310d4:	da011d15 	stw	r8,1140(sp)
 80310d8:	d8c11c15 	stw	r3,1136(sp)
 80310dc:	008001c4 	movi	r2,7
 80310e0:	10c00216 	blt	r2,r3,80310ec <___vfprintf_internal_r+0x13d4>
 80310e4:	4c800204 	addi	r18,r9,8
 80310e8:	003f1f06 	br	8030d68 <___vfprintf_internal_r+0x1050>
 80310ec:	d9412917 	ldw	r5,1188(sp)
 80310f0:	8809883a 	mov	r4,r17
 80310f4:	d9811b04 	addi	r6,sp,1132
 80310f8:	802fce40 	call	802fce4 <__sprint_r>
 80310fc:	103c4c1e 	bne	r2,zero,8030230 <___vfprintf_internal_r+0x518>
 8031100:	dc800404 	addi	r18,sp,16
 8031104:	da011d17 	ldw	r8,1140(sp)
 8031108:	d8c11c17 	ldw	r3,1136(sp)
 803110c:	003f1606 	br	8030d68 <___vfprintf_internal_r+0x1050>
 8031110:	d9412917 	ldw	r5,1188(sp)
 8031114:	8809883a 	mov	r4,r17
 8031118:	d9811b04 	addi	r6,sp,1132
 803111c:	802fce40 	call	802fce4 <__sprint_r>
 8031120:	103c431e 	bne	r2,zero,8030230 <___vfprintf_internal_r+0x518>
 8031124:	da011d17 	ldw	r8,1140(sp)
 8031128:	d8c11c17 	ldw	r3,1136(sp)
 803112c:	da400404 	addi	r9,sp,16
 8031130:	003eec06 	br	8030ce4 <___vfprintf_internal_r+0xfcc>
 8031134:	d9412917 	ldw	r5,1188(sp)
 8031138:	8809883a 	mov	r4,r17
 803113c:	d9811b04 	addi	r6,sp,1132
 8031140:	802fce40 	call	802fce4 <__sprint_r>
 8031144:	103c3a1e 	bne	r2,zero,8030230 <___vfprintf_internal_r+0x518>
 8031148:	da011d17 	ldw	r8,1140(sp)
 803114c:	d8c11c17 	ldw	r3,1136(sp)
 8031150:	dc800404 	addi	r18,sp,16
 8031154:	003eee06 	br	8030d10 <___vfprintf_internal_r+0xff8>
 8031158:	95000015 	stw	r20,0(r18)
 803115c:	94c00115 	stw	r19,4(r18)
 8031160:	44d1883a 	add	r8,r8,r19
 8031164:	003efa06 	br	8030d50 <___vfprintf_internal_r+0x1038>
 8031168:	d9412917 	ldw	r5,1188(sp)
 803116c:	8809883a 	mov	r4,r17
 8031170:	d9811b04 	addi	r6,sp,1132
 8031174:	802fce40 	call	802fce4 <__sprint_r>
 8031178:	103c2d1e 	bne	r2,zero,8030230 <___vfprintf_internal_r+0x518>
 803117c:	da011d17 	ldw	r8,1140(sp)
 8031180:	d8c11c17 	ldw	r3,1136(sp)
 8031184:	da400404 	addi	r9,sp,16
 8031188:	003d9806 	br	80307ec <___vfprintf_internal_r+0xad4>
 803118c:	8080100c 	andi	r2,r16,64
 8031190:	10011626 	beq	r2,zero,80315ec <___vfprintf_internal_r+0x18d4>
 8031194:	d8c12d17 	ldw	r3,1204(sp)
 8031198:	002d883a 	mov	r22,zero
 803119c:	1dc0000b 	ldhu	r23,0(r3)
 80311a0:	18c00104 	addi	r3,r3,4
 80311a4:	d8c12d15 	stw	r3,1204(sp)
 80311a8:	003cc106 	br	80304b0 <___vfprintf_internal_r+0x798>
 80311ac:	4d000015 	stw	r20,0(r9)
 80311b0:	4c800115 	stw	r18,4(r9)
 80311b4:	4491883a 	add	r8,r8,r18
 80311b8:	003dc006 	br	80308bc <___vfprintf_internal_r+0xba4>
 80311bc:	8080100c 	andi	r2,r16,64
 80311c0:	10010126 	beq	r2,zero,80315c8 <___vfprintf_internal_r+0x18b0>
 80311c4:	d8c12d17 	ldw	r3,1204(sp)
 80311c8:	002d883a 	mov	r22,zero
 80311cc:	1dc0000b 	ldhu	r23,0(r3)
 80311d0:	18c00104 	addi	r3,r3,4
 80311d4:	d8c12d15 	stw	r3,1204(sp)
 80311d8:	b805883a 	mov	r2,r23
 80311dc:	00c00044 	movi	r3,1
 80311e0:	d8012585 	stb	zero,1174(sp)
 80311e4:	003c4506 	br	80302fc <___vfprintf_internal_r+0x5e4>
 80311e8:	8080100c 	andi	r2,r16,64
 80311ec:	10010526 	beq	r2,zero,8031604 <___vfprintf_internal_r+0x18ec>
 80311f0:	d9012d17 	ldw	r4,1204(sp)
 80311f4:	002d883a 	mov	r22,zero
 80311f8:	0007883a 	mov	r3,zero
 80311fc:	25c0000b 	ldhu	r23,0(r4)
 8031200:	21000104 	addi	r4,r4,4
 8031204:	d9012d15 	stw	r4,1204(sp)
 8031208:	b805883a 	mov	r2,r23
 803120c:	d8012585 	stb	zero,1174(sp)
 8031210:	003c3a06 	br	80302fc <___vfprintf_internal_r+0x5e4>
 8031214:	d8812d17 	ldw	r2,1204(sp)
 8031218:	15800017 	ldw	r22,0(r2)
 803121c:	15000117 	ldw	r20,4(r2)
 8031220:	10800204 	addi	r2,r2,8
 8031224:	d8812d15 	stw	r2,1204(sp)
 8031228:	dd813315 	stw	r22,1228(sp)
 803122c:	dd013415 	stw	r20,1232(sp)
 8031230:	003c5906 	br	8030398 <___vfprintf_internal_r+0x680>
 8031234:	00c00084 	movi	r3,2
 8031238:	d8012585 	stb	zero,1174(sp)
 803123c:	003c2f06 	br	80302fc <___vfprintf_internal_r+0x5e4>
 8031240:	ac800007 	ldb	r18,0(r21)
 8031244:	003b1006 	br	802fe88 <___vfprintf_internal_r+0x170>
 8031248:	8080040c 	andi	r2,r16,16
 803124c:	1000091e 	bne	r2,zero,8031274 <___vfprintf_internal_r+0x155c>
 8031250:	8400100c 	andi	r16,r16,64
 8031254:	80000726 	beq	r16,zero,8031274 <___vfprintf_internal_r+0x155c>
 8031258:	d8c12d17 	ldw	r3,1204(sp)
 803125c:	d9012c17 	ldw	r4,1200(sp)
 8031260:	18800017 	ldw	r2,0(r3)
 8031264:	18c00104 	addi	r3,r3,4
 8031268:	d8c12d15 	stw	r3,1204(sp)
 803126c:	1100000d 	sth	r4,0(r2)
 8031270:	003adf06 	br	802fdf0 <___vfprintf_internal_r+0xd8>
 8031274:	d8c12d17 	ldw	r3,1204(sp)
 8031278:	d9012c17 	ldw	r4,1200(sp)
 803127c:	18800017 	ldw	r2,0(r3)
 8031280:	18c00104 	addi	r3,r3,4
 8031284:	d8c12d15 	stw	r3,1204(sp)
 8031288:	11000015 	stw	r4,0(r2)
 803128c:	003ad806 	br	802fdf0 <___vfprintf_internal_r+0xd8>
 8031290:	8080100c 	andi	r2,r16,64
 8031294:	1000c526 	beq	r2,zero,80315ac <___vfprintf_internal_r+0x1894>
 8031298:	d8812d17 	ldw	r2,1204(sp)
 803129c:	15c0000f 	ldh	r23,0(r2)
 80312a0:	10800104 	addi	r2,r2,4
 80312a4:	d8812d15 	stw	r2,1204(sp)
 80312a8:	b82dd7fa 	srai	r22,r23,31
 80312ac:	b005883a 	mov	r2,r22
 80312b0:	003c0906 	br	80302d8 <___vfprintf_internal_r+0x5c0>
 80312b4:	4c800115 	stw	r18,4(r9)
 80312b8:	9211883a 	add	r8,r18,r8
 80312bc:	18c00044 	addi	r3,r3,1
 80312c0:	da011d15 	stw	r8,1140(sp)
 80312c4:	d8c11c15 	stw	r3,1136(sp)
 80312c8:	008001c4 	movi	r2,7
 80312cc:	10c14016 	blt	r2,r3,80317d0 <___vfprintf_internal_r+0x1ab8>
 80312d0:	4a400204 	addi	r9,r9,8
 80312d4:	d8813717 	ldw	r2,1244(sp)
 80312d8:	9ca7883a 	add	r19,r19,r18
 80312dc:	48800015 	stw	r2,0(r9)
 80312e0:	00800044 	movi	r2,1
 80312e4:	48800115 	stw	r2,4(r9)
 80312e8:	4091883a 	add	r8,r8,r2
 80312ec:	1887883a 	add	r3,r3,r2
 80312f0:	da011d15 	stw	r8,1140(sp)
 80312f4:	d8c11c15 	stw	r3,1136(sp)
 80312f8:	008001c4 	movi	r2,7
 80312fc:	10c12c16 	blt	r2,r3,80317b0 <___vfprintf_internal_r+0x1a98>
 8031300:	4a400204 	addi	r9,r9,8
 8031304:	d9013217 	ldw	r4,1224(sp)
 8031308:	da011d17 	ldw	r8,1140(sp)
 803130c:	d8c11c17 	ldw	r3,1136(sp)
 8031310:	24a5c83a 	sub	r18,r4,r18
 8031314:	4cc00015 	stw	r19,0(r9)
 8031318:	003fa506 	br	80311b0 <___vfprintf_internal_r+0x1498>
 803131c:	04c20134 	movhi	r19,2052
 8031320:	9cc50204 	addi	r19,r19,5128
 8031324:	003c2e06 	br	80303e0 <___vfprintf_internal_r+0x6c8>
 8031328:	d9412917 	ldw	r5,1188(sp)
 803132c:	8809883a 	mov	r4,r17
 8031330:	d9811b04 	addi	r6,sp,1132
 8031334:	802fce40 	call	802fce4 <__sprint_r>
 8031338:	103bbd1e 	bne	r2,zero,8030230 <___vfprintf_internal_r+0x518>
 803133c:	da011d17 	ldw	r8,1140(sp)
 8031340:	da400404 	addi	r9,sp,16
 8031344:	003df606 	br	8030b20 <___vfprintf_internal_r+0xe08>
 8031348:	00820134 	movhi	r2,2052
 803134c:	10851104 	addi	r2,r2,5188
 8031350:	48800015 	stw	r2,0(r9)
 8031354:	00800044 	movi	r2,1
 8031358:	48800115 	stw	r2,4(r9)
 803135c:	4091883a 	add	r8,r8,r2
 8031360:	1887883a 	add	r3,r3,r2
 8031364:	da011d15 	stw	r8,1140(sp)
 8031368:	d8c11c15 	stw	r3,1136(sp)
 803136c:	008001c4 	movi	r2,7
 8031370:	10c0bc16 	blt	r2,r3,8031664 <___vfprintf_internal_r+0x194c>
 8031374:	4a400204 	addi	r9,r9,8
 8031378:	9000041e 	bne	r18,zero,803138c <___vfprintf_internal_r+0x1674>
 803137c:	d8c13217 	ldw	r3,1224(sp)
 8031380:	1800021e 	bne	r3,zero,803138c <___vfprintf_internal_r+0x1674>
 8031384:	8080004c 	andi	r2,r16,1
 8031388:	103d5226 	beq	r2,zero,80308d4 <___vfprintf_internal_r+0xbbc>
 803138c:	d8c11c17 	ldw	r3,1136(sp)
 8031390:	d9013717 	ldw	r4,1244(sp)
 8031394:	00800044 	movi	r2,1
 8031398:	48800115 	stw	r2,4(r9)
 803139c:	49000015 	stw	r4,0(r9)
 80313a0:	4091883a 	add	r8,r8,r2
 80313a4:	1887883a 	add	r3,r3,r2
 80313a8:	da011d15 	stw	r8,1140(sp)
 80313ac:	d8c11c15 	stw	r3,1136(sp)
 80313b0:	008001c4 	movi	r2,7
 80313b4:	10c14516 	blt	r2,r3,80318cc <___vfprintf_internal_r+0x1bb4>
 80313b8:	4a400204 	addi	r9,r9,8
 80313bc:	04a5c83a 	sub	r18,zero,r18
 80313c0:	0480d70e 	bge	zero,r18,8031720 <___vfprintf_internal_r+0x1a08>
 80313c4:	05800404 	movi	r22,16
 80313c8:	05020134 	movhi	r20,2052
 80313cc:	a5051584 	addi	r20,r20,5206
 80313d0:	b480db0e 	bge	r22,r18,8031740 <___vfprintf_internal_r+0x1a28>
 80313d4:	05c001c4 	movi	r23,7
 80313d8:	df012917 	ldw	fp,1188(sp)
 80313dc:	00000306 	br	80313ec <___vfprintf_internal_r+0x16d4>
 80313e0:	4a400204 	addi	r9,r9,8
 80313e4:	94bffc04 	addi	r18,r18,-16
 80313e8:	b480d50e 	bge	r22,r18,8031740 <___vfprintf_internal_r+0x1a28>
 80313ec:	4d000015 	stw	r20,0(r9)
 80313f0:	4d800115 	stw	r22,4(r9)
 80313f4:	42000404 	addi	r8,r8,16
 80313f8:	18c00044 	addi	r3,r3,1
 80313fc:	da011d15 	stw	r8,1140(sp)
 8031400:	d8c11c15 	stw	r3,1136(sp)
 8031404:	b8fff60e 	bge	r23,r3,80313e0 <___vfprintf_internal_r+0x16c8>
 8031408:	8809883a 	mov	r4,r17
 803140c:	e00b883a 	mov	r5,fp
 8031410:	d9811b04 	addi	r6,sp,1132
 8031414:	802fce40 	call	802fce4 <__sprint_r>
 8031418:	103b851e 	bne	r2,zero,8030230 <___vfprintf_internal_r+0x518>
 803141c:	da011d17 	ldw	r8,1140(sp)
 8031420:	d8c11c17 	ldw	r3,1136(sp)
 8031424:	da400404 	addi	r9,sp,16
 8031428:	003fee06 	br	80313e4 <___vfprintf_internal_r+0x16cc>
 803142c:	da413c15 	stw	r9,1264(sp)
 8031430:	80372500 	call	8037250 <__isnand>
 8031434:	da413c17 	ldw	r9,1264(sp)
 8031438:	10007e1e 	bne	r2,zero,8031634 <___vfprintf_internal_r+0x191c>
 803143c:	00bfffc4 	movi	r2,-1
 8031440:	e0816a26 	beq	fp,r2,80319ec <___vfprintf_internal_r+0x1cd4>
 8031444:	008019c4 	movi	r2,103
 8031448:	90816526 	beq	r18,r2,80319e0 <___vfprintf_internal_r+0x1cc8>
 803144c:	008011c4 	movi	r2,71
 8031450:	90816326 	beq	r18,r2,80319e0 <___vfprintf_internal_r+0x1cc8>
 8031454:	80c04014 	ori	r3,r16,256
 8031458:	d8c12a15 	stw	r3,1192(sp)
 803145c:	a0016516 	blt	r20,zero,80319f4 <___vfprintf_internal_r+0x1cdc>
 8031460:	d8012f05 	stb	zero,1212(sp)
 8031464:	00801984 	movi	r2,102
 8031468:	9080f226 	beq	r18,r2,8031834 <___vfprintf_internal_r+0x1b1c>
 803146c:	00801184 	movi	r2,70
 8031470:	9080f026 	beq	r18,r2,8031834 <___vfprintf_internal_r+0x1b1c>
 8031474:	00801944 	movi	r2,101
 8031478:	90818d26 	beq	r18,r2,8031ab0 <___vfprintf_internal_r+0x1d98>
 803147c:	00801144 	movi	r2,69
 8031480:	90818b26 	beq	r18,r2,8031ab0 <___vfprintf_internal_r+0x1d98>
 8031484:	e02f883a 	mov	r23,fp
 8031488:	d8812404 	addi	r2,sp,1168
 803148c:	d8800115 	stw	r2,4(sp)
 8031490:	d8812304 	addi	r2,sp,1164
 8031494:	d8800215 	stw	r2,8(sp)
 8031498:	d8812204 	addi	r2,sp,1160
 803149c:	ddc00015 	stw	r23,0(sp)
 80314a0:	d8800315 	stw	r2,12(sp)
 80314a4:	8809883a 	mov	r4,r17
 80314a8:	b00b883a 	mov	r5,r22
 80314ac:	a00d883a 	mov	r6,r20
 80314b0:	01c00084 	movi	r7,2
 80314b4:	da413c15 	stw	r9,1264(sp)
 80314b8:	80339600 	call	8033960 <_dtoa_r>
 80314bc:	1027883a 	mov	r19,r2
 80314c0:	008019c4 	movi	r2,103
 80314c4:	da413c17 	ldw	r9,1264(sp)
 80314c8:	9081951e 	bne	r18,r2,8031b20 <___vfprintf_internal_r+0x1e08>
 80314cc:	8080004c 	andi	r2,r16,1
 80314d0:	10017926 	beq	r2,zero,8031ab8 <___vfprintf_internal_r+0x1da0>
 80314d4:	00801184 	movi	r2,70
 80314d8:	9dc7883a 	add	r3,r19,r23
 80314dc:	9080e626 	beq	r18,r2,8031878 <___vfprintf_internal_r+0x1b60>
 80314e0:	b009883a 	mov	r4,r22
 80314e4:	a00b883a 	mov	r5,r20
 80314e8:	000d883a 	mov	r6,zero
 80314ec:	000f883a 	mov	r7,zero
 80314f0:	d8c13b15 	stw	r3,1260(sp)
 80314f4:	da413c15 	stw	r9,1264(sp)
 80314f8:	803b7e40 	call	803b7e4 <__eqdf2>
 80314fc:	d8c13b17 	ldw	r3,1260(sp)
 8031500:	da413c17 	ldw	r9,1264(sp)
 8031504:	10000726 	beq	r2,zero,8031524 <___vfprintf_internal_r+0x180c>
 8031508:	d8812217 	ldw	r2,1160(sp)
 803150c:	10c18a2e 	bgeu	r2,r3,8031b38 <___vfprintf_internal_r+0x1e20>
 8031510:	01000c04 	movi	r4,48
 8031514:	11000005 	stb	r4,0(r2)
 8031518:	10800044 	addi	r2,r2,1
 803151c:	d8812215 	stw	r2,1160(sp)
 8031520:	10fffc1e 	bne	r2,r3,8031514 <___vfprintf_internal_r+0x17fc>
 8031524:	1cc7c83a 	sub	r3,r3,r19
 8031528:	d8c13215 	stw	r3,1224(sp)
 803152c:	008019c4 	movi	r2,103
 8031530:	9080fa26 	beq	r18,r2,803191c <___vfprintf_internal_r+0x1c04>
 8031534:	008011c4 	movi	r2,71
 8031538:	9080f826 	beq	r18,r2,803191c <___vfprintf_internal_r+0x1c04>
 803153c:	00801984 	movi	r2,102
 8031540:	90818e1e 	bne	r18,r2,8031b7c <___vfprintf_internal_r+0x1e64>
 8031544:	d8812417 	ldw	r2,1168(sp)
 8031548:	d8812b15 	stw	r2,1196(sp)
 803154c:	00817c0e 	bge	zero,r2,8031b40 <___vfprintf_internal_r+0x1e28>
 8031550:	e000021e 	bne	fp,zero,803155c <___vfprintf_internal_r+0x1844>
 8031554:	8400004c 	andi	r16,r16,1
 8031558:	80000426 	beq	r16,zero,803156c <___vfprintf_internal_r+0x1854>
 803155c:	d8812b17 	ldw	r2,1196(sp)
 8031560:	e2000044 	addi	r8,fp,1
 8031564:	1205883a 	add	r2,r2,r8
 8031568:	d8812b15 	stw	r2,1196(sp)
 803156c:	d8812815 	stw	r2,1184(sp)
 8031570:	10010b16 	blt	r2,zero,80319a0 <___vfprintf_internal_r+0x1c88>
 8031574:	ddc12f07 	ldb	r23,1212(sp)
 8031578:	b800e426 	beq	r23,zero,803190c <___vfprintf_internal_r+0x1bf4>
 803157c:	00800b44 	movi	r2,45
 8031580:	d8812585 	stb	r2,1174(sp)
 8031584:	dc012a17 	ldw	r16,1192(sp)
 8031588:	d8013115 	stw	zero,1220(sp)
 803158c:	003b7306 	br	803035c <___vfprintf_internal_r+0x644>
 8031590:	d8812b17 	ldw	r2,1196(sp)
 8031594:	d8812815 	stw	r2,1184(sp)
 8031598:	10005716 	blt	r2,zero,80316f8 <___vfprintf_internal_r+0x19e0>
 803159c:	d8812583 	ldbu	r2,1174(sp)
 80315a0:	ddc12d15 	stw	r23,1204(sp)
 80315a4:	d8013115 	stw	zero,1220(sp)
 80315a8:	003b6806 	br	803034c <___vfprintf_internal_r+0x634>
 80315ac:	d8c12d17 	ldw	r3,1204(sp)
 80315b0:	1dc00017 	ldw	r23,0(r3)
 80315b4:	18c00104 	addi	r3,r3,4
 80315b8:	d8c12d15 	stw	r3,1204(sp)
 80315bc:	b82dd7fa 	srai	r22,r23,31
 80315c0:	b005883a 	mov	r2,r22
 80315c4:	003b4406 	br	80302d8 <___vfprintf_internal_r+0x5c0>
 80315c8:	d9012d17 	ldw	r4,1204(sp)
 80315cc:	002d883a 	mov	r22,zero
 80315d0:	00c00044 	movi	r3,1
 80315d4:	25c00017 	ldw	r23,0(r4)
 80315d8:	21000104 	addi	r4,r4,4
 80315dc:	d9012d15 	stw	r4,1204(sp)
 80315e0:	b805883a 	mov	r2,r23
 80315e4:	d8012585 	stb	zero,1174(sp)
 80315e8:	003b4406 	br	80302fc <___vfprintf_internal_r+0x5e4>
 80315ec:	d9012d17 	ldw	r4,1204(sp)
 80315f0:	002d883a 	mov	r22,zero
 80315f4:	25c00017 	ldw	r23,0(r4)
 80315f8:	21000104 	addi	r4,r4,4
 80315fc:	d9012d15 	stw	r4,1204(sp)
 8031600:	003bab06 	br	80304b0 <___vfprintf_internal_r+0x798>
 8031604:	d8812d17 	ldw	r2,1204(sp)
 8031608:	002d883a 	mov	r22,zero
 803160c:	0007883a 	mov	r3,zero
 8031610:	15c00017 	ldw	r23,0(r2)
 8031614:	10800104 	addi	r2,r2,4
 8031618:	d8812d15 	stw	r2,1204(sp)
 803161c:	d8012585 	stb	zero,1174(sp)
 8031620:	b805883a 	mov	r2,r23
 8031624:	003b3506 	br	80302fc <___vfprintf_internal_r+0x5e4>
 8031628:	00ffffc4 	movi	r3,-1
 803162c:	b82b883a 	mov	r21,r23
 8031630:	003a1606 	br	802fe8c <___vfprintf_internal_r+0x174>
 8031634:	008011c4 	movi	r2,71
 8031638:	1480b116 	blt	r2,r18,8031900 <___vfprintf_internal_r+0x1be8>
 803163c:	04c20134 	movhi	r19,2052
 8031640:	9cc50304 	addi	r19,r19,5132
 8031644:	00c000c4 	movi	r3,3
 8031648:	00bfdfc4 	movi	r2,-129
 803164c:	80a0703a 	and	r16,r16,r2
 8031650:	d8c12815 	stw	r3,1184(sp)
 8031654:	d8812583 	ldbu	r2,1174(sp)
 8031658:	d8c12b15 	stw	r3,1196(sp)
 803165c:	d8013115 	stw	zero,1220(sp)
 8031660:	003b3a06 	br	803034c <___vfprintf_internal_r+0x634>
 8031664:	d9412917 	ldw	r5,1188(sp)
 8031668:	8809883a 	mov	r4,r17
 803166c:	d9811b04 	addi	r6,sp,1132
 8031670:	802fce40 	call	802fce4 <__sprint_r>
 8031674:	103aee1e 	bne	r2,zero,8030230 <___vfprintf_internal_r+0x518>
 8031678:	dc812417 	ldw	r18,1168(sp)
 803167c:	da011d17 	ldw	r8,1140(sp)
 8031680:	da400404 	addi	r9,sp,16
 8031684:	003f3c06 	br	8031378 <___vfprintf_internal_r+0x1660>
 8031688:	ad400044 	addi	r21,r21,1
 803168c:	84000814 	ori	r16,r16,32
 8031690:	14800047 	ldb	r18,1(r2)
 8031694:	0039fc06 	br	802fe88 <___vfprintf_internal_r+0x170>
 8031698:	d9412917 	ldw	r5,1188(sp)
 803169c:	8809883a 	mov	r4,r17
 80316a0:	d9811b04 	addi	r6,sp,1132
 80316a4:	802fce40 	call	802fce4 <__sprint_r>
 80316a8:	103ae11e 	bne	r2,zero,8030230 <___vfprintf_internal_r+0x518>
 80316ac:	da011d17 	ldw	r8,1140(sp)
 80316b0:	da400404 	addi	r9,sp,16
 80316b4:	003d2b06 	br	8030b64 <___vfprintf_internal_r+0xe4c>
 80316b8:	4d000015 	stw	r20,0(r9)
 80316bc:	4c800115 	stw	r18,4(r9)
 80316c0:	4491883a 	add	r8,r8,r18
 80316c4:	18c00044 	addi	r3,r3,1
 80316c8:	da011d15 	stw	r8,1140(sp)
 80316cc:	d8c11c15 	stw	r3,1136(sp)
 80316d0:	008001c4 	movi	r2,7
 80316d4:	10fcbd16 	blt	r2,r3,80309cc <___vfprintf_internal_r+0xcb4>
 80316d8:	4a400204 	addi	r9,r9,8
 80316dc:	003cc206 	br	80309e8 <___vfprintf_internal_r+0xcd0>
 80316e0:	da413c15 	stw	r9,1264(sp)
 80316e4:	802f72c0 	call	802f72c <strlen>
 80316e8:	d8812b15 	stw	r2,1196(sp)
 80316ec:	d8812815 	stw	r2,1184(sp)
 80316f0:	da413c17 	ldw	r9,1264(sp)
 80316f4:	103fa90e 	bge	r2,zero,803159c <___vfprintf_internal_r+0x1884>
 80316f8:	d8012815 	stw	zero,1184(sp)
 80316fc:	003fa706 	br	803159c <___vfprintf_internal_r+0x1884>
 8031700:	d9412917 	ldw	r5,1188(sp)
 8031704:	8809883a 	mov	r4,r17
 8031708:	d9811b04 	addi	r6,sp,1132
 803170c:	802fce40 	call	802fce4 <__sprint_r>
 8031710:	103ac71e 	bne	r2,zero,8030230 <___vfprintf_internal_r+0x518>
 8031714:	da011d17 	ldw	r8,1140(sp)
 8031718:	d8c11c17 	ldw	r3,1136(sp)
 803171c:	da400404 	addi	r9,sp,16
 8031720:	d8813217 	ldw	r2,1224(sp)
 8031724:	4cc00015 	stw	r19,0(r9)
 8031728:	48800115 	stw	r2,4(r9)
 803172c:	4091883a 	add	r8,r8,r2
 8031730:	003c6206 	br	80308bc <___vfprintf_internal_r+0xba4>
 8031734:	00800b44 	movi	r2,45
 8031738:	d8812585 	stb	r2,1174(sp)
 803173c:	003b2406 	br	80303d0 <___vfprintf_internal_r+0x6b8>
 8031740:	4d000015 	stw	r20,0(r9)
 8031744:	4c800115 	stw	r18,4(r9)
 8031748:	4491883a 	add	r8,r8,r18
 803174c:	18c00044 	addi	r3,r3,1
 8031750:	da011d15 	stw	r8,1140(sp)
 8031754:	d8c11c15 	stw	r3,1136(sp)
 8031758:	008001c4 	movi	r2,7
 803175c:	10ffe816 	blt	r2,r3,8031700 <___vfprintf_internal_r+0x19e8>
 8031760:	4a400204 	addi	r9,r9,8
 8031764:	003fee06 	br	8031720 <___vfprintf_internal_r+0x1a08>
 8031768:	d8c12b15 	stw	r3,1196(sp)
 803176c:	00800184 	movi	r2,6
 8031770:	10c0062e 	bgeu	r2,r3,803178c <___vfprintf_internal_r+0x1a74>
 8031774:	d8812b15 	stw	r2,1196(sp)
 8031778:	d8812815 	stw	r2,1184(sp)
 803177c:	ddc12d15 	stw	r23,1204(sp)
 8031780:	04c20134 	movhi	r19,2052
 8031784:	9cc50f04 	addi	r19,r19,5180
 8031788:	0039ca06 	br	802feb4 <___vfprintf_internal_r+0x19c>
 803178c:	d8812b17 	ldw	r2,1196(sp)
 8031790:	d8812815 	stw	r2,1184(sp)
 8031794:	103ff90e 	bge	r2,zero,803177c <___vfprintf_internal_r+0x1a64>
 8031798:	d8012815 	stw	zero,1184(sp)
 803179c:	003ff706 	br	803177c <___vfprintf_internal_r+0x1a64>
 80317a0:	00800244 	movi	r2,9
 80317a4:	15fdaa36 	bltu	r2,r23,8030e50 <___vfprintf_internal_r+0x1138>
 80317a8:	dd010e04 	addi	r20,sp,1080
 80317ac:	003dc606 	br	8030ec8 <___vfprintf_internal_r+0x11b0>
 80317b0:	d9412917 	ldw	r5,1188(sp)
 80317b4:	8809883a 	mov	r4,r17
 80317b8:	d9811b04 	addi	r6,sp,1132
 80317bc:	802fce40 	call	802fce4 <__sprint_r>
 80317c0:	103a9b1e 	bne	r2,zero,8030230 <___vfprintf_internal_r+0x518>
 80317c4:	dc812417 	ldw	r18,1168(sp)
 80317c8:	da400404 	addi	r9,sp,16
 80317cc:	003ecd06 	br	8031304 <___vfprintf_internal_r+0x15ec>
 80317d0:	d9412917 	ldw	r5,1188(sp)
 80317d4:	8809883a 	mov	r4,r17
 80317d8:	d9811b04 	addi	r6,sp,1132
 80317dc:	802fce40 	call	802fce4 <__sprint_r>
 80317e0:	103a931e 	bne	r2,zero,8030230 <___vfprintf_internal_r+0x518>
 80317e4:	dc812417 	ldw	r18,1168(sp)
 80317e8:	da011d17 	ldw	r8,1140(sp)
 80317ec:	d8c11c17 	ldw	r3,1136(sp)
 80317f0:	da400404 	addi	r9,sp,16
 80317f4:	003eb706 	br	80312d4 <___vfprintf_internal_r+0x15bc>
 80317f8:	d9412917 	ldw	r5,1188(sp)
 80317fc:	8809883a 	mov	r4,r17
 8031800:	d9811b04 	addi	r6,sp,1132
 8031804:	802fce40 	call	802fce4 <__sprint_r>
 8031808:	103a891e 	bne	r2,zero,8030230 <___vfprintf_internal_r+0x518>
 803180c:	dc812417 	ldw	r18,1168(sp)
 8031810:	da011d17 	ldw	r8,1140(sp)
 8031814:	da400404 	addi	r9,sp,16
 8031818:	003dc206 	br	8030f24 <___vfprintf_internal_r+0x120c>
 803181c:	df012815 	stw	fp,1184(sp)
 8031820:	d8812583 	ldbu	r2,1174(sp)
 8031824:	df012b15 	stw	fp,1196(sp)
 8031828:	ddc12d15 	stw	r23,1204(sp)
 803182c:	d8013115 	stw	zero,1220(sp)
 8031830:	003ac606 	br	803034c <___vfprintf_internal_r+0x634>
 8031834:	d8812404 	addi	r2,sp,1168
 8031838:	d8800115 	stw	r2,4(sp)
 803183c:	d8812304 	addi	r2,sp,1164
 8031840:	d8800215 	stw	r2,8(sp)
 8031844:	d8812204 	addi	r2,sp,1160
 8031848:	df000015 	stw	fp,0(sp)
 803184c:	d8800315 	stw	r2,12(sp)
 8031850:	8809883a 	mov	r4,r17
 8031854:	b00b883a 	mov	r5,r22
 8031858:	a00d883a 	mov	r6,r20
 803185c:	01c000c4 	movi	r7,3
 8031860:	da413c15 	stw	r9,1264(sp)
 8031864:	80339600 	call	8033960 <_dtoa_r>
 8031868:	da413c17 	ldw	r9,1264(sp)
 803186c:	1027883a 	mov	r19,r2
 8031870:	1707883a 	add	r3,r2,fp
 8031874:	e02f883a 	mov	r23,fp
 8031878:	99000007 	ldb	r4,0(r19)
 803187c:	00800c04 	movi	r2,48
 8031880:	20800326 	beq	r4,r2,8031890 <___vfprintf_internal_r+0x1b78>
 8031884:	da812417 	ldw	r10,1168(sp)
 8031888:	1a87883a 	add	r3,r3,r10
 803188c:	003f1406 	br	80314e0 <___vfprintf_internal_r+0x17c8>
 8031890:	b009883a 	mov	r4,r22
 8031894:	a00b883a 	mov	r5,r20
 8031898:	000d883a 	mov	r6,zero
 803189c:	000f883a 	mov	r7,zero
 80318a0:	d8c13b15 	stw	r3,1260(sp)
 80318a4:	da413c15 	stw	r9,1264(sp)
 80318a8:	803b8400 	call	803b840 <__nedf2>
 80318ac:	d8c13b17 	ldw	r3,1260(sp)
 80318b0:	da413c17 	ldw	r9,1264(sp)
 80318b4:	103ff326 	beq	r2,zero,8031884 <___vfprintf_internal_r+0x1b6c>
 80318b8:	00800044 	movi	r2,1
 80318bc:	15d5c83a 	sub	r10,r2,r23
 80318c0:	da812415 	stw	r10,1168(sp)
 80318c4:	1a87883a 	add	r3,r3,r10
 80318c8:	003f0506 	br	80314e0 <___vfprintf_internal_r+0x17c8>
 80318cc:	d9412917 	ldw	r5,1188(sp)
 80318d0:	8809883a 	mov	r4,r17
 80318d4:	d9811b04 	addi	r6,sp,1132
 80318d8:	802fce40 	call	802fce4 <__sprint_r>
 80318dc:	103a541e 	bne	r2,zero,8030230 <___vfprintf_internal_r+0x518>
 80318e0:	dc812417 	ldw	r18,1168(sp)
 80318e4:	da011d17 	ldw	r8,1140(sp)
 80318e8:	d8c11c17 	ldw	r3,1136(sp)
 80318ec:	da400404 	addi	r9,sp,16
 80318f0:	003eb206 	br	80313bc <___vfprintf_internal_r+0x16a4>
 80318f4:	b82b883a 	mov	r21,r23
 80318f8:	0007883a 	mov	r3,zero
 80318fc:	00396306 	br	802fe8c <___vfprintf_internal_r+0x174>
 8031900:	04c20134 	movhi	r19,2052
 8031904:	9cc50404 	addi	r19,r19,5136
 8031908:	003f4e06 	br	8031644 <___vfprintf_internal_r+0x192c>
 803190c:	d8812583 	ldbu	r2,1174(sp)
 8031910:	dc012a17 	ldw	r16,1192(sp)
 8031914:	d8013115 	stw	zero,1220(sp)
 8031918:	003a8c06 	br	803034c <___vfprintf_internal_r+0x634>
 803191c:	d8812417 	ldw	r2,1168(sp)
 8031920:	d8812b15 	stw	r2,1196(sp)
 8031924:	1029883a 	mov	r20,r2
 8031928:	00bfff44 	movi	r2,-3
 803192c:	a0800116 	blt	r20,r2,8031934 <___vfprintf_internal_r+0x1c1c>
 8031930:	e5001d0e 	bge	fp,r20,80319a8 <___vfprintf_internal_r+0x1c90>
 8031934:	94bfff84 	addi	r18,r18,-2
 8031938:	a53fffc4 	addi	r20,r20,-1
 803193c:	dd012415 	stw	r20,1168(sp)
 8031940:	dc811fc5 	stb	r18,1151(sp)
 8031944:	a0007216 	blt	r20,zero,8031b10 <___vfprintf_internal_r+0x1df8>
 8031948:	00800ac4 	movi	r2,43
 803194c:	d8812005 	stb	r2,1152(sp)
 8031950:	00800244 	movi	r2,9
 8031954:	15003516 	blt	r2,r20,8031a2c <___vfprintf_internal_r+0x1d14>
 8031958:	00800c04 	movi	r2,48
 803195c:	a5000c04 	addi	r20,r20,48
 8031960:	d8812045 	stb	r2,1153(sp)
 8031964:	dd012085 	stb	r20,1154(sp)
 8031968:	d8c120c4 	addi	r3,sp,1155
 803196c:	d8811fc4 	addi	r2,sp,1151
 8031970:	1885c83a 	sub	r2,r3,r2
 8031974:	d8c13217 	ldw	r3,1224(sp)
 8031978:	d8813515 	stw	r2,1236(sp)
 803197c:	1885883a 	add	r2,r3,r2
 8031980:	d8812b15 	stw	r2,1196(sp)
 8031984:	00800044 	movi	r2,1
 8031988:	10c0580e 	bge	r2,r3,8031aec <___vfprintf_internal_r+0x1dd4>
 803198c:	d8812b17 	ldw	r2,1196(sp)
 8031990:	10800044 	addi	r2,r2,1
 8031994:	d8812b15 	stw	r2,1196(sp)
 8031998:	d8812815 	stw	r2,1184(sp)
 803199c:	103ef50e 	bge	r2,zero,8031574 <___vfprintf_internal_r+0x185c>
 80319a0:	d8012815 	stw	zero,1184(sp)
 80319a4:	003ef306 	br	8031574 <___vfprintf_internal_r+0x185c>
 80319a8:	d8812b17 	ldw	r2,1196(sp)
 80319ac:	d8c13217 	ldw	r3,1224(sp)
 80319b0:	10c01416 	blt	r2,r3,8031a04 <___vfprintf_internal_r+0x1cec>
 80319b4:	8400004c 	andi	r16,r16,1
 80319b8:	80000326 	beq	r16,zero,80319c8 <___vfprintf_internal_r+0x1cb0>
 80319bc:	d8812b17 	ldw	r2,1196(sp)
 80319c0:	10800044 	addi	r2,r2,1
 80319c4:	d8812b15 	stw	r2,1196(sp)
 80319c8:	d8812815 	stw	r2,1184(sp)
 80319cc:	10001416 	blt	r2,zero,8031a20 <___vfprintf_internal_r+0x1d08>
 80319d0:	048019c4 	movi	r18,103
 80319d4:	003ee706 	br	8031574 <___vfprintf_internal_r+0x185c>
 80319d8:	d8012815 	stw	zero,1184(sp)
 80319dc:	003b1a06 	br	8030648 <___vfprintf_internal_r+0x930>
 80319e0:	e03e9c1e 	bne	fp,zero,8031454 <___vfprintf_internal_r+0x173c>
 80319e4:	07000044 	movi	fp,1
 80319e8:	003e9a06 	br	8031454 <___vfprintf_internal_r+0x173c>
 80319ec:	07000184 	movi	fp,6
 80319f0:	003e9806 	br	8031454 <___vfprintf_internal_r+0x173c>
 80319f4:	00c00b44 	movi	r3,45
 80319f8:	a520003c 	xorhi	r20,r20,32768
 80319fc:	d8c12f05 	stb	r3,1212(sp)
 8031a00:	003e9806 	br	8031464 <___vfprintf_internal_r+0x174c>
 8031a04:	05003f0e 	bge	zero,r20,8031b04 <___vfprintf_internal_r+0x1dec>
 8031a08:	05000044 	movi	r20,1
 8031a0c:	d8c13217 	ldw	r3,1224(sp)
 8031a10:	a0e9883a 	add	r20,r20,r3
 8031a14:	dd012b15 	stw	r20,1196(sp)
 8031a18:	dd012815 	stw	r20,1184(sp)
 8031a1c:	a03fec0e 	bge	r20,zero,80319d0 <___vfprintf_internal_r+0x1cb8>
 8031a20:	d8012815 	stw	zero,1184(sp)
 8031a24:	048019c4 	movi	r18,103
 8031a28:	003ed206 	br	8031574 <___vfprintf_internal_r+0x185c>
 8031a2c:	d8c11f84 	addi	r3,sp,1150
 8031a30:	102f883a 	mov	r23,r2
 8031a34:	4839883a 	mov	fp,r9
 8031a38:	a009883a 	mov	r4,r20
 8031a3c:	01400284 	movi	r5,10
 8031a40:	182d883a 	mov	r22,r3
 8031a44:	802c1ac0 	call	802c1ac <__modsi3>
 8031a48:	10800c04 	addi	r2,r2,48
 8031a4c:	a009883a 	mov	r4,r20
 8031a50:	b0800005 	stb	r2,0(r22)
 8031a54:	01400284 	movi	r5,10
 8031a58:	802c15c0 	call	802c15c <__divsi3>
 8031a5c:	1029883a 	mov	r20,r2
 8031a60:	b0ffffc4 	addi	r3,r22,-1
 8031a64:	b8bff416 	blt	r23,r2,8031a38 <___vfprintf_internal_r+0x1d20>
 8031a68:	11400c04 	addi	r5,r2,48
 8031a6c:	b17fffc5 	stb	r5,-1(r22)
 8031a70:	d8811fc4 	addi	r2,sp,1151
 8031a74:	e013883a 	mov	r9,fp
 8031a78:	18803e2e 	bgeu	r3,r2,8031b74 <___vfprintf_internal_r+0x1e5c>
 8031a7c:	b007883a 	mov	r3,r22
 8031a80:	d9012044 	addi	r4,sp,1153
 8031a84:	00000206 	br	8031a90 <___vfprintf_internal_r+0x1d78>
 8031a88:	19400003 	ldbu	r5,0(r3)
 8031a8c:	18c00044 	addi	r3,r3,1
 8031a90:	21400005 	stb	r5,0(r4)
 8031a94:	21000044 	addi	r4,r4,1
 8031a98:	10fffb1e 	bne	r2,r3,8031a88 <___vfprintf_internal_r+0x1d70>
 8031a9c:	d8c12004 	addi	r3,sp,1152
 8031aa0:	1d87c83a 	sub	r3,r3,r22
 8031aa4:	d9012044 	addi	r4,sp,1153
 8031aa8:	20c7883a 	add	r3,r4,r3
 8031aac:	003fb006 	br	8031970 <___vfprintf_internal_r+0x1c58>
 8031ab0:	e5c00044 	addi	r23,fp,1
 8031ab4:	003e7406 	br	8031488 <___vfprintf_internal_r+0x1770>
 8031ab8:	d8c12217 	ldw	r3,1160(sp)
 8031abc:	003e9906 	br	8031524 <___vfprintf_internal_r+0x180c>
 8031ac0:	d9012d17 	ldw	r4,1204(sp)
 8031ac4:	ac800043 	ldbu	r18,1(r21)
 8031ac8:	b82b883a 	mov	r21,r23
 8031acc:	20c00017 	ldw	r3,0(r4)
 8031ad0:	20800104 	addi	r2,r4,4
 8031ad4:	d8812d15 	stw	r2,1204(sp)
 8031ad8:	18002116 	blt	r3,zero,8031b60 <___vfprintf_internal_r+0x1e48>
 8031adc:	94803fcc 	andi	r18,r18,255
 8031ae0:	9480201c 	xori	r18,r18,128
 8031ae4:	94bfe004 	addi	r18,r18,-128
 8031ae8:	0038e706 	br	802fe88 <___vfprintf_internal_r+0x170>
 8031aec:	80a0703a 	and	r16,r16,r2
 8031af0:	803fa61e 	bne	r16,zero,803198c <___vfprintf_internal_r+0x1c74>
 8031af4:	d8812b17 	ldw	r2,1196(sp)
 8031af8:	d8812815 	stw	r2,1184(sp)
 8031afc:	103e9d0e 	bge	r2,zero,8031574 <___vfprintf_internal_r+0x185c>
 8031b00:	003fa706 	br	80319a0 <___vfprintf_internal_r+0x1c88>
 8031b04:	00800084 	movi	r2,2
 8031b08:	1529c83a 	sub	r20,r2,r20
 8031b0c:	003fbf06 	br	8031a0c <___vfprintf_internal_r+0x1cf4>
 8031b10:	00800b44 	movi	r2,45
 8031b14:	0529c83a 	sub	r20,zero,r20
 8031b18:	d8812005 	stb	r2,1152(sp)
 8031b1c:	003f8c06 	br	8031950 <___vfprintf_internal_r+0x1c38>
 8031b20:	008011c4 	movi	r2,71
 8031b24:	90be6926 	beq	r18,r2,80314cc <___vfprintf_internal_r+0x17b4>
 8031b28:	003e6a06 	br	80314d4 <___vfprintf_internal_r+0x17bc>
 8031b2c:	00bfffc4 	movi	r2,-1
 8031b30:	d8812c15 	stw	r2,1200(sp)
 8031b34:	0039ad06 	br	80301ec <___vfprintf_internal_r+0x4d4>
 8031b38:	1007883a 	mov	r3,r2
 8031b3c:	003e7906 	br	8031524 <___vfprintf_internal_r+0x180c>
 8031b40:	e000021e 	bne	fp,zero,8031b4c <___vfprintf_internal_r+0x1e34>
 8031b44:	8400004c 	andi	r16,r16,1
 8031b48:	80000e26 	beq	r16,zero,8031b84 <___vfprintf_internal_r+0x1e6c>
 8031b4c:	e7000084 	addi	fp,fp,2
 8031b50:	df012b15 	stw	fp,1196(sp)
 8031b54:	df012815 	stw	fp,1184(sp)
 8031b58:	e03e860e 	bge	fp,zero,8031574 <___vfprintf_internal_r+0x185c>
 8031b5c:	003f9006 	br	80319a0 <___vfprintf_internal_r+0x1c88>
 8031b60:	94803fcc 	andi	r18,r18,255
 8031b64:	9480201c 	xori	r18,r18,128
 8031b68:	00ffffc4 	movi	r3,-1
 8031b6c:	94bfe004 	addi	r18,r18,-128
 8031b70:	0038c506 	br	802fe88 <___vfprintf_internal_r+0x170>
 8031b74:	d8c12044 	addi	r3,sp,1153
 8031b78:	003f7d06 	br	8031970 <___vfprintf_internal_r+0x1c58>
 8031b7c:	dd012417 	ldw	r20,1168(sp)
 8031b80:	003f6d06 	br	8031938 <___vfprintf_internal_r+0x1c20>
 8031b84:	00c00044 	movi	r3,1
 8031b88:	d8c12815 	stw	r3,1184(sp)
 8031b8c:	d8c12b15 	stw	r3,1196(sp)
 8031b90:	003e7806 	br	8031574 <___vfprintf_internal_r+0x185c>

08031b94 <__vfprintf_internal>:
 8031b94:	00820134 	movhi	r2,2052
 8031b98:	108c4504 	addi	r2,r2,12564
 8031b9c:	2007883a 	mov	r3,r4
 8031ba0:	11000017 	ldw	r4,0(r2)
 8031ba4:	2805883a 	mov	r2,r5
 8031ba8:	300f883a 	mov	r7,r6
 8031bac:	180b883a 	mov	r5,r3
 8031bb0:	100d883a 	mov	r6,r2
 8031bb4:	802fd181 	jmpi	802fd18 <___vfprintf_internal_r>

08031bb8 <__svfscanf_r>:
 8031bb8:	deff4c04 	addi	sp,sp,-720
 8031bbc:	ddc0b115 	stw	r23,708(sp)
 8031bc0:	dd00ae15 	stw	r20,696(sp)
 8031bc4:	dcc0ad15 	stw	r19,692(sp)
 8031bc8:	dc80ac15 	stw	r18,688(sp)
 8031bcc:	dc40ab15 	stw	r17,684(sp)
 8031bd0:	dc00aa15 	stw	r16,680(sp)
 8031bd4:	dfc0b315 	stw	ra,716(sp)
 8031bd8:	df00b215 	stw	fp,712(sp)
 8031bdc:	dd80b015 	stw	r22,704(sp)
 8031be0:	dd40af15 	stw	r21,700(sp)
 8031be4:	30800007 	ldb	r2,0(r6)
 8031be8:	002f883a 	mov	r23,zero
 8031bec:	d9c09c15 	stw	r7,624(sp)
 8031bf0:	d800a015 	stw	zero,640(sp)
 8031bf4:	d8009f15 	stw	zero,636(sp)
 8031bf8:	d8009e15 	stw	zero,632(sp)
 8031bfc:	d8809b15 	stw	r2,620(sp)
 8031c00:	2023883a 	mov	r17,r4
 8031c04:	04820134 	movhi	r18,2052
 8031c08:	948c4304 	addi	r18,r18,12556
 8031c0c:	b829883a 	mov	r20,r23
 8031c10:	2827883a 	mov	r19,r5
 8031c14:	34000044 	addi	r16,r6,1
 8031c18:	10002426 	beq	r2,zero,8031cac <__svfscanf_r+0xf4>
 8031c1c:	95400017 	ldw	r21,0(r18)
 8031c20:	a887883a 	add	r3,r21,r2
 8031c24:	18c00003 	ldbu	r3,0(r3)
 8031c28:	18c0020c 	andi	r3,r3,8
 8031c2c:	18c03fcc 	andi	r3,r3,255
 8031c30:	18c0201c 	xori	r3,r3,128
 8031c34:	18ffe004 	addi	r3,r3,-128
 8031c38:	18002926 	beq	r3,zero,8031ce0 <__svfscanf_r+0x128>
 8031c3c:	98800117 	ldw	r2,4(r19)
 8031c40:	0080110e 	bge	zero,r2,8031c88 <__svfscanf_r+0xd0>
 8031c44:	98c00017 	ldw	r3,0(r19)
 8031c48:	91000017 	ldw	r4,0(r18)
 8031c4c:	18800003 	ldbu	r2,0(r3)
 8031c50:	2085883a 	add	r2,r4,r2
 8031c54:	10800003 	ldbu	r2,0(r2)
 8031c58:	1080020c 	andi	r2,r2,8
 8031c5c:	10803fcc 	andi	r2,r2,255
 8031c60:	1080201c 	xori	r2,r2,128
 8031c64:	10bfe004 	addi	r2,r2,-128
 8031c68:	10000b26 	beq	r2,zero,8031c98 <__svfscanf_r+0xe0>
 8031c6c:	98800117 	ldw	r2,4(r19)
 8031c70:	18c00044 	addi	r3,r3,1
 8031c74:	98c00015 	stw	r3,0(r19)
 8031c78:	10bfffc4 	addi	r2,r2,-1
 8031c7c:	98800115 	stw	r2,4(r19)
 8031c80:	a5000044 	addi	r20,r20,1
 8031c84:	00bfef16 	blt	zero,r2,8031c44 <__svfscanf_r+0x8c>
 8031c88:	8809883a 	mov	r4,r17
 8031c8c:	980b883a 	mov	r5,r19
 8031c90:	802ef540 	call	802ef54 <__srefill_r>
 8031c94:	103feb26 	beq	r2,zero,8031c44 <__svfscanf_r+0x8c>
 8031c98:	800d883a 	mov	r6,r16
 8031c9c:	30800007 	ldb	r2,0(r6)
 8031ca0:	34000044 	addi	r16,r6,1
 8031ca4:	d8809b15 	stw	r2,620(sp)
 8031ca8:	103fdc1e 	bne	r2,zero,8031c1c <__svfscanf_r+0x64>
 8031cac:	d8809e17 	ldw	r2,632(sp)
 8031cb0:	dfc0b317 	ldw	ra,716(sp)
 8031cb4:	df00b217 	ldw	fp,712(sp)
 8031cb8:	ddc0b117 	ldw	r23,708(sp)
 8031cbc:	dd80b017 	ldw	r22,704(sp)
 8031cc0:	dd40af17 	ldw	r21,700(sp)
 8031cc4:	dd00ae17 	ldw	r20,696(sp)
 8031cc8:	dcc0ad17 	ldw	r19,692(sp)
 8031ccc:	dc80ac17 	ldw	r18,688(sp)
 8031cd0:	dc40ab17 	ldw	r17,684(sp)
 8031cd4:	dc00aa17 	ldw	r16,680(sp)
 8031cd8:	dec0b404 	addi	sp,sp,720
 8031cdc:	f800283a 	ret
 8031ce0:	00c00944 	movi	r3,37
 8031ce4:	10c00e26 	beq	r2,r3,8031d20 <__svfscanf_r+0x168>
 8031ce8:	98800117 	ldw	r2,4(r19)
 8031cec:	0080e40e 	bge	zero,r2,8032080 <__svfscanf_r+0x4c8>
 8031cf0:	98800017 	ldw	r2,0(r19)
 8031cf4:	80ffffc7 	ldb	r3,-1(r16)
 8031cf8:	11000003 	ldbu	r4,0(r2)
 8031cfc:	20ffeb1e 	bne	r4,r3,8031cac <__svfscanf_r+0xf4>
 8031d00:	98c00117 	ldw	r3,4(r19)
 8031d04:	10800044 	addi	r2,r2,1
 8031d08:	98800015 	stw	r2,0(r19)
 8031d0c:	18bfffc4 	addi	r2,r3,-1
 8031d10:	98800115 	stw	r2,4(r19)
 8031d14:	a5000044 	addi	r20,r20,1
 8031d18:	800d883a 	mov	r6,r16
 8031d1c:	003fdf06 	br	8031c9c <__svfscanf_r+0xe4>
 8031d20:	0039883a 	mov	fp,zero
 8031d24:	35c00043 	ldbu	r23,1(r6)
 8031d28:	002d883a 	mov	r22,zero
 8031d2c:	00c01e04 	movi	r3,120
 8031d30:	01801b04 	movi	r6,108
 8031d34:	e009883a 	mov	r4,fp
 8031d38:	b8803fcc 	andi	r2,r23,255
 8031d3c:	87000044 	addi	fp,r16,1
 8031d40:	18804f2e 	bgeu	r3,r2,8031e80 <__svfscanf_r+0x2c8>
 8031d44:	bdc03fcc 	andi	r23,r23,255
 8031d48:	bdc0201c 	xori	r23,r23,128
 8031d4c:	bdffe004 	addi	r23,r23,-128
 8031d50:	adeb883a 	add	r21,r21,r23
 8031d54:	a8800003 	ldbu	r2,0(r21)
 8031d58:	df009d15 	stw	fp,628(sp)
 8031d5c:	2039883a 	mov	fp,r4
 8031d60:	1080004c 	andi	r2,r2,1
 8031d64:	1002d926 	beq	r2,zero,80328cc <__svfscanf_r+0xd14>
 8031d68:	b5800054 	ori	r22,r22,1
 8031d6c:	00820134 	movhi	r2,2052
 8031d70:	10a28e04 	addi	r2,r2,-30152
 8031d74:	00c00284 	movi	r3,10
 8031d78:	d880a015 	stw	r2,640(sp)
 8031d7c:	d8c09f15 	stw	r3,636(sp)
 8031d80:	040000c4 	movi	r16,3
 8031d84:	98800117 	ldw	r2,4(r19)
 8031d88:	0081bd0e 	bge	zero,r2,8032480 <__svfscanf_r+0x8c8>
 8031d8c:	b080100c 	andi	r2,r22,64
 8031d90:	1000ce26 	beq	r2,zero,80320cc <__svfscanf_r+0x514>
 8031d94:	00800084 	movi	r2,2
 8031d98:	80818426 	beq	r16,r2,80323ac <__svfscanf_r+0x7f4>
 8031d9c:	1400f716 	blt	r2,r16,803217c <__svfscanf_r+0x5c4>
 8031da0:	00800044 	movi	r2,1
 8031da4:	8080dc26 	beq	r16,r2,8032118 <__svfscanf_r+0x560>
 8031da8:	e000011e 	bne	fp,zero,8031db0 <__svfscanf_r+0x1f8>
 8031dac:	07000044 	movi	fp,1
 8031db0:	b080004c 	andi	r2,r22,1
 8031db4:	10022826 	beq	r2,zero,8032658 <__svfscanf_r+0xaa0>
 8031db8:	b5c0040c 	andi	r23,r22,16
 8031dbc:	b804601e 	bne	r23,zero,8032f40 <__svfscanf_r+0x1388>
 8031dc0:	d8c09c17 	ldw	r3,624(sp)
 8031dc4:	1d800017 	ldw	r22,0(r3)
 8031dc8:	18c00104 	addi	r3,r3,4
 8031dcc:	d8c09c15 	stw	r3,624(sp)
 8031dd0:	0021883a 	mov	r16,zero
 8031dd4:	dd409904 	addi	r21,sp,612
 8031dd8:	01020134 	movhi	r4,2052
 8031ddc:	210c4904 	addi	r4,r4,12580
 8031de0:	20800017 	ldw	r2,0(r4)
 8031de4:	8080aa26 	beq	r16,r2,8032090 <__svfscanf_r+0x4d8>
 8031de8:	98800017 	ldw	r2,0(r19)
 8031dec:	9a000117 	ldw	r8,4(r19)
 8031df0:	d9400104 	addi	r5,sp,4
 8031df4:	11c00003 	ldbu	r7,0(r2)
 8031df8:	423fffc4 	addi	r8,r8,-1
 8031dfc:	10800044 	addi	r2,r2,1
 8031e00:	2c07883a 	add	r3,r5,r16
 8031e04:	a809883a 	mov	r4,r21
 8031e08:	000b883a 	mov	r5,zero
 8031e0c:	01800204 	movi	r6,8
 8031e10:	9a000115 	stw	r8,4(r19)
 8031e14:	98800015 	stw	r2,0(r19)
 8031e18:	19c00005 	stb	r7,0(r3)
 8031e1c:	84000044 	addi	r16,r16,1
 8031e20:	802ecf00 	call	802ecf0 <memset>
 8031e24:	8809883a 	mov	r4,r17
 8031e28:	dd400015 	stw	r21,0(sp)
 8031e2c:	b00b883a 	mov	r5,r22
 8031e30:	d9800104 	addi	r6,sp,4
 8031e34:	800f883a 	mov	r7,r16
 8031e38:	80357b00 	call	80357b0 <_mbrtowc_r>
 8031e3c:	00ffffc4 	movi	r3,-1
 8031e40:	10c09326 	beq	r2,r3,8032090 <__svfscanf_r+0x4d8>
 8031e44:	1003281e 	bne	r2,zero,8032ae8 <__svfscanf_r+0xf30>
 8031e48:	b800011e 	bne	r23,zero,8031e50 <__svfscanf_r+0x298>
 8031e4c:	b0000015 	stw	zero,0(r22)
 8031e50:	a429883a 	add	r20,r20,r16
 8031e54:	e73fffc4 	addi	fp,fp,-1
 8031e58:	b803281e 	bne	r23,zero,8032afc <__svfscanf_r+0xf44>
 8031e5c:	b5800104 	addi	r22,r22,4
 8031e60:	0021883a 	mov	r16,zero
 8031e64:	98800117 	ldw	r2,4(r19)
 8031e68:	00820b0e 	bge	zero,r2,8032698 <__svfscanf_r+0xae0>
 8031e6c:	e03fda1e 	bne	fp,zero,8031dd8 <__svfscanf_r+0x220>
 8031e70:	b8012226 	beq	r23,zero,80322fc <__svfscanf_r+0x744>
 8031e74:	dc009d17 	ldw	r16,628(sp)
 8031e78:	800d883a 	mov	r6,r16
 8031e7c:	003f8706 	br	8031c9c <__svfscanf_r+0xe4>
 8031e80:	1085883a 	add	r2,r2,r2
 8031e84:	1085883a 	add	r2,r2,r2
 8031e88:	014200f4 	movhi	r5,2051
 8031e8c:	2947a704 	addi	r5,r5,7836
 8031e90:	1145883a 	add	r2,r2,r5
 8031e94:	10800017 	ldw	r2,0(r2)
 8031e98:	1000683a 	jmp	r2
 8031e9c:	080320b0 	cmpltui	zero,at,3202
 8031ea0:	08031d44 	addi	zero,at,3189
 8031ea4:	08031d44 	addi	zero,at,3189
 8031ea8:	08031d44 	addi	zero,at,3189
 8031eac:	08031d44 	addi	zero,at,3189
 8031eb0:	08031d44 	addi	zero,at,3189
 8031eb4:	08031d44 	addi	zero,at,3189
 8031eb8:	08031d44 	addi	zero,at,3189
 8031ebc:	08031d44 	addi	zero,at,3189
 8031ec0:	08031d44 	addi	zero,at,3189
 8031ec4:	08031d44 	addi	zero,at,3189
 8031ec8:	08031d44 	addi	zero,at,3189
 8031ecc:	08031d44 	addi	zero,at,3189
 8031ed0:	08031d44 	addi	zero,at,3189
 8031ed4:	08031d44 	addi	zero,at,3189
 8031ed8:	08031d44 	addi	zero,at,3189
 8031edc:	08031d44 	addi	zero,at,3189
 8031ee0:	08031d44 	addi	zero,at,3189
 8031ee4:	08031d44 	addi	zero,at,3189
 8031ee8:	08031d44 	addi	zero,at,3189
 8031eec:	08031d44 	addi	zero,at,3189
 8031ef0:	08031d44 	addi	zero,at,3189
 8031ef4:	08031d44 	addi	zero,at,3189
 8031ef8:	08031d44 	addi	zero,at,3189
 8031efc:	08031d44 	addi	zero,at,3189
 8031f00:	08031d44 	addi	zero,at,3189
 8031f04:	08031d44 	addi	zero,at,3189
 8031f08:	08031d44 	addi	zero,at,3189
 8031f0c:	08031d44 	addi	zero,at,3189
 8031f10:	08031d44 	addi	zero,at,3189
 8031f14:	08031d44 	addi	zero,at,3189
 8031f18:	08031d44 	addi	zero,at,3189
 8031f1c:	08031d44 	addi	zero,at,3189
 8031f20:	08031d44 	addi	zero,at,3189
 8031f24:	08031d44 	addi	zero,at,3189
 8031f28:	08031d44 	addi	zero,at,3189
 8031f2c:	08031d44 	addi	zero,at,3189
 8031f30:	08032980 	call	803298 <__alt_mem_sdram-0x77fcd68>
 8031f34:	08031d44 	addi	zero,at,3189
 8031f38:	08031d44 	addi	zero,at,3189
 8031f3c:	08031d44 	addi	zero,at,3189
 8031f40:	08031d44 	addi	zero,at,3189
 8031f44:	0803298c 	andi	zero,at,3238
 8031f48:	08031d44 	addi	zero,at,3189
 8031f4c:	08031d44 	addi	zero,at,3189
 8031f50:	08031d44 	addi	zero,at,3189
 8031f54:	08031d44 	addi	zero,at,3189
 8031f58:	08031d44 	addi	zero,at,3189
 8031f5c:	0803291c 	xori	zero,at,3236
 8031f60:	0803291c 	xori	zero,at,3236
 8031f64:	0803291c 	xori	zero,at,3236
 8031f68:	0803291c 	xori	zero,at,3236
 8031f6c:	0803291c 	xori	zero,at,3236
 8031f70:	0803291c 	xori	zero,at,3236
 8031f74:	0803291c 	xori	zero,at,3236
 8031f78:	0803291c 	xori	zero,at,3236
 8031f7c:	0803291c 	xori	zero,at,3236
 8031f80:	0803291c 	xori	zero,at,3236
 8031f84:	08031d44 	addi	zero,at,3189
 8031f88:	08031d44 	addi	zero,at,3189
 8031f8c:	08031d44 	addi	zero,at,3189
 8031f90:	08031d44 	addi	zero,at,3189
 8031f94:	08031d44 	addi	zero,at,3189
 8031f98:	08031d44 	addi	zero,at,3189
 8031f9c:	08031d44 	addi	zero,at,3189
 8031fa0:	08031d44 	addi	zero,at,3189
 8031fa4:	08031d44 	addi	zero,at,3189
 8031fa8:	08031d44 	addi	zero,at,3189
 8031fac:	08032954 	ori	zero,at,3237
 8031fb0:	08032960 	cmpeqi	zero,at,3237
 8031fb4:	08031d44 	addi	zero,at,3189
 8031fb8:	08032960 	cmpeqi	zero,at,3237
 8031fbc:	08031d44 	addi	zero,at,3189
 8031fc0:	08031d44 	addi	zero,at,3189
 8031fc4:	08031d44 	addi	zero,at,3189
 8031fc8:	08031d44 	addi	zero,at,3189
 8031fcc:	08032970 	cmpltui	zero,at,3237
 8031fd0:	08031d44 	addi	zero,at,3189
 8031fd4:	08031d44 	addi	zero,at,3189
 8031fd8:	0803299c 	xori	zero,at,3238
 8031fdc:	08031d44 	addi	zero,at,3189
 8031fe0:	08031d44 	addi	zero,at,3189
 8031fe4:	08031d44 	addi	zero,at,3189
 8031fe8:	08031d44 	addi	zero,at,3189
 8031fec:	08031d44 	addi	zero,at,3189
 8031ff0:	08031d44 	addi	zero,at,3189
 8031ff4:	08031d44 	addi	zero,at,3189
 8031ff8:	08031d44 	addi	zero,at,3189
 8031ffc:	080329c4 	addi	zero,at,3239
 8032000:	08031d44 	addi	zero,at,3189
 8032004:	08031d44 	addi	zero,at,3189
 8032008:	080329ec 	andhi	zero,at,3239
 803200c:	08031d44 	addi	zero,at,3189
 8032010:	08031d44 	addi	zero,at,3189
 8032014:	08031d44 	addi	zero,at,3189
 8032018:	08031d44 	addi	zero,at,3189
 803201c:	08031d44 	addi	zero,at,3189
 8032020:	08031d44 	addi	zero,at,3189
 8032024:	08031d44 	addi	zero,at,3189
 8032028:	08032a10 	cmplti	zero,at,3240
 803202c:	08032a24 	muli	zero,at,3240
 8032030:	08032960 	cmpeqi	zero,at,3237
 8032034:	08032960 	cmpeqi	zero,at,3237
 8032038:	08032960 	cmpeqi	zero,at,3237
 803203c:	08032a30 	cmpltui	zero,at,3240
 8032040:	08032a40 	call	8032a4 <__alt_mem_sdram-0x77fcd5c>
 8032044:	08031d44 	addi	zero,at,3189
 8032048:	08031d44 	addi	zero,at,3189
 803204c:	08032a60 	cmpeqi	zero,at,3241
 8032050:	08031d44 	addi	zero,at,3189
 8032054:	08032a80 	call	8032a8 <__alt_mem_sdram-0x77fcd58>
 8032058:	08032ab4 	orhi	zero,at,3242
 803205c:	08032ac0 	call	8032ac <__alt_mem_sdram-0x77fcd54>
 8032060:	08031d44 	addi	zero,at,3189
 8032064:	08031d44 	addi	zero,at,3189
 8032068:	080328e8 	cmpgeui	zero,at,3235
 803206c:	08031d44 	addi	zero,at,3189
 8032070:	080328f8 	rdprs	zero,at,3235
 8032074:	08031d44 	addi	zero,at,3189
 8032078:	08031d44 	addi	zero,at,3189
 803207c:	080329c4 	addi	zero,at,3239
 8032080:	8809883a 	mov	r4,r17
 8032084:	980b883a 	mov	r5,r19
 8032088:	802ef540 	call	802ef54 <__srefill_r>
 803208c:	103f1826 	beq	r2,zero,8031cf0 <__svfscanf_r+0x138>
 8032090:	d8809e17 	ldw	r2,632(sp)
 8032094:	10000626 	beq	r2,zero,80320b0 <__svfscanf_r+0x4f8>
 8032098:	9880030b 	ldhu	r2,12(r19)
 803209c:	1080100c 	andi	r2,r2,64
 80320a0:	10bfffcc 	andi	r2,r2,65535
 80320a4:	10a0001c 	xori	r2,r2,32768
 80320a8:	10a00004 	addi	r2,r2,-32768
 80320ac:	103eff26 	beq	r2,zero,8031cac <__svfscanf_r+0xf4>
 80320b0:	00bfffc4 	movi	r2,-1
 80320b4:	d8809e15 	stw	r2,632(sp)
 80320b8:	003efc06 	br	8031cac <__svfscanf_r+0xf4>
 80320bc:	8809883a 	mov	r4,r17
 80320c0:	980b883a 	mov	r5,r19
 80320c4:	802ef540 	call	802ef54 <__srefill_r>
 80320c8:	103ff11e 	bne	r2,zero,8032090 <__svfscanf_r+0x4d8>
 80320cc:	91400017 	ldw	r5,0(r18)
 80320d0:	98800017 	ldw	r2,0(r19)
 80320d4:	00000206 	br	80320e0 <__svfscanf_r+0x528>
 80320d8:	10800044 	addi	r2,r2,1
 80320dc:	98800015 	stw	r2,0(r19)
 80320e0:	10c00003 	ldbu	r3,0(r2)
 80320e4:	28c7883a 	add	r3,r5,r3
 80320e8:	18c00003 	ldbu	r3,0(r3)
 80320ec:	18c0020c 	andi	r3,r3,8
 80320f0:	18c03fcc 	andi	r3,r3,255
 80320f4:	18c0201c 	xori	r3,r3,128
 80320f8:	18ffe004 	addi	r3,r3,-128
 80320fc:	183f2526 	beq	r3,zero,8031d94 <__svfscanf_r+0x1dc>
 8032100:	98c00117 	ldw	r3,4(r19)
 8032104:	a5000044 	addi	r20,r20,1
 8032108:	18ffffc4 	addi	r3,r3,-1
 803210c:	98c00115 	stw	r3,4(r19)
 8032110:	00fff116 	blt	zero,r3,80320d8 <__svfscanf_r+0x520>
 8032114:	003fe906 	br	80320bc <__svfscanf_r+0x504>
 8032118:	e000011e 	bne	fp,zero,8032120 <__svfscanf_r+0x568>
 803211c:	073fffc4 	movi	fp,-1
 8032120:	b580040c 	andi	r22,r22,16
 8032124:	b0016826 	beq	r22,zero,80326c8 <__svfscanf_r+0xb10>
 8032128:	98800017 	ldw	r2,0(r19)
 803212c:	0021883a 	mov	r16,zero
 8032130:	dd805884 	addi	r22,sp,354
 8032134:	10c00003 	ldbu	r3,0(r2)
 8032138:	b0c7883a 	add	r3,r22,r3
 803213c:	18c00007 	ldb	r3,0(r3)
 8032140:	18039726 	beq	r3,zero,8032fa0 <__svfscanf_r+0x13e8>
 8032144:	98c00117 	ldw	r3,4(r19)
 8032148:	10800044 	addi	r2,r2,1
 803214c:	84000044 	addi	r16,r16,1
 8032150:	18ffffc4 	addi	r3,r3,-1
 8032154:	98c00115 	stw	r3,4(r19)
 8032158:	98800015 	stw	r2,0(r19)
 803215c:	e4008f26 	beq	fp,r16,803239c <__svfscanf_r+0x7e4>
 8032160:	00fff416 	blt	zero,r3,8032134 <__svfscanf_r+0x57c>
 8032164:	8809883a 	mov	r4,r17
 8032168:	980b883a 	mov	r5,r19
 803216c:	802ef540 	call	802ef54 <__srefill_r>
 8032170:	10008a1e 	bne	r2,zero,803239c <__svfscanf_r+0x7e4>
 8032174:	98800017 	ldw	r2,0(r19)
 8032178:	003fee06 	br	8032134 <__svfscanf_r+0x57c>
 803217c:	008000c4 	movi	r2,3
 8032180:	80806426 	beq	r16,r2,8032314 <__svfscanf_r+0x75c>
 8032184:	00800104 	movi	r2,4
 8032188:	80bf071e 	bne	r16,r2,8031da8 <__svfscanf_r+0x1f0>
 803218c:	e0bfffc4 	addi	r2,fp,-1
 8032190:	01005704 	movi	r4,348
 8032194:	20814736 	bltu	r4,r2,80326b4 <__svfscanf_r+0xafc>
 8032198:	0017883a 	mov	r11,zero
 803219c:	b581e014 	ori	r22,r22,1920
 80321a0:	0021883a 	mov	r16,zero
 80321a4:	d800a115 	stw	zero,644(sp)
 80321a8:	d800a315 	stw	zero,652(sp)
 80321ac:	002b883a 	mov	r21,zero
 80321b0:	d800a215 	stw	zero,648(sp)
 80321b4:	ddc00104 	addi	r23,sp,4
 80321b8:	000d883a 	mov	r6,zero
 80321bc:	00c01384 	movi	r3,78
 80321c0:	03810004 	movi	r14,1024
 80321c4:	033e1fc4 	movi	r12,-1921
 80321c8:	03ff5fc4 	movi	r15,-641
 80321cc:	99c00017 	ldw	r7,0(r19)
 80321d0:	39400003 	ldbu	r5,0(r7)
 80321d4:	28bff544 	addi	r2,r5,-43
 80321d8:	10803fcc 	andi	r2,r2,255
 80321dc:	1880c82e 	bgeu	r3,r2,8032500 <__svfscanf_r+0x948>
 80321e0:	a8000226 	beq	r21,zero,80321ec <__svfscanf_r+0x634>
 80321e4:	00bfbfc4 	movi	r2,-257
 80321e8:	b0ac703a 	and	r22,r22,r2
 80321ec:	31bfffc4 	addi	r6,r6,-1
 80321f0:	00800044 	movi	r2,1
 80321f4:	1184092e 	bgeu	r2,r6,803321c <__svfscanf_r+0x1664>
 80321f8:	80803fcc 	andi	r2,r16,255
 80321fc:	1080201c 	xori	r2,r2,128
 8032200:	10bfe004 	addi	r2,r2,-128
 8032204:	10ffffc4 	addi	r3,r2,-1
 8032208:	01000184 	movi	r4,6
 803220c:	20c01036 	bltu	r4,r3,8032250 <__svfscanf_r+0x698>
 8032210:	00c00084 	movi	r3,2
 8032214:	1883f50e 	bge	r3,r2,80331ec <__svfscanf_r+0x1634>
 8032218:	00c000c4 	movi	r3,3
 803221c:	10c00c26 	beq	r2,r3,8032250 <__svfscanf_r+0x698>
 8032220:	843fff04 	addi	r16,r16,-4
 8032224:	84003fcc 	andi	r16,r16,255
 8032228:	0438303a 	nor	fp,zero,r16
 803222c:	bf39883a 	add	fp,r23,fp
 8032230:	bdffffc4 	addi	r23,r23,-1
 8032234:	b9400007 	ldb	r5,0(r23)
 8032238:	8809883a 	mov	r4,r17
 803223c:	980d883a 	mov	r6,r19
 8032240:	80397500 	call	8039750 <_ungetc_r>
 8032244:	bf3ffa1e 	bne	r23,fp,8032230 <__svfscanf_r+0x678>
 8032248:	a27fffc4 	addi	r9,r20,-1
 803224c:	4c29c83a 	sub	r20,r9,r16
 8032250:	b080400c 	andi	r2,r22,256
 8032254:	10001326 	beq	r2,zero,80322a4 <__svfscanf_r+0x6ec>
 8032258:	b081000c 	andi	r2,r22,1024
 803225c:	1003d21e 	bne	r2,zero,80331a8 <__svfscanf_r+0x15f0>
 8032260:	b97fffc7 	ldb	r5,-1(r23)
 8032264:	00801944 	movi	r2,101
 8032268:	bc3fffc4 	addi	r16,r23,-1
 803226c:	a53fffc4 	addi	r20,r20,-1
 8032270:	28800826 	beq	r5,r2,8032294 <__svfscanf_r+0x6dc>
 8032274:	00801144 	movi	r2,69
 8032278:	28800626 	beq	r5,r2,8032294 <__svfscanf_r+0x6dc>
 803227c:	8809883a 	mov	r4,r17
 8032280:	980d883a 	mov	r6,r19
 8032284:	80397500 	call	8039750 <_ungetc_r>
 8032288:	b97fff87 	ldb	r5,-2(r23)
 803228c:	bc3fff84 	addi	r16,r23,-2
 8032290:	a53fffc4 	addi	r20,r20,-1
 8032294:	8809883a 	mov	r4,r17
 8032298:	980d883a 	mov	r6,r19
 803229c:	80397500 	call	8039750 <_ungetc_r>
 80322a0:	802f883a 	mov	r23,r16
 80322a4:	b080040c 	andi	r2,r22,16
 80322a8:	103ef21e 	bne	r2,zero,8031e74 <__svfscanf_r+0x2bc>
 80322ac:	b8000005 	stb	zero,0(r23)
 80322b0:	b0c1800c 	andi	r3,r22,1536
 80322b4:	00810004 	movi	r2,1024
 80322b8:	18837726 	beq	r3,r2,8033098 <__svfscanf_r+0x14e0>
 80322bc:	d8c0a317 	ldw	r3,652(sp)
 80322c0:	1803601e 	bne	r3,zero,8033044 <__svfscanf_r+0x148c>
 80322c4:	8809883a 	mov	r4,r17
 80322c8:	d9400104 	addi	r5,sp,4
 80322cc:	000d883a 	mov	r6,zero
 80322d0:	80373b40 	call	80373b4 <_strtod_r>
 80322d4:	102b883a 	mov	r21,r2
 80322d8:	b080004c 	andi	r2,r22,1
 80322dc:	182f883a 	mov	r23,r3
 80322e0:	10031f26 	beq	r2,zero,8032f60 <__svfscanf_r+0x13a8>
 80322e4:	d9409c17 	ldw	r5,624(sp)
 80322e8:	28800017 	ldw	r2,0(r5)
 80322ec:	29400104 	addi	r5,r5,4
 80322f0:	d9409c15 	stw	r5,624(sp)
 80322f4:	15400015 	stw	r21,0(r2)
 80322f8:	10c00115 	stw	r3,4(r2)
 80322fc:	d8809e17 	ldw	r2,632(sp)
 8032300:	dc009d17 	ldw	r16,628(sp)
 8032304:	10800044 	addi	r2,r2,1
 8032308:	d8809e15 	stw	r2,632(sp)
 803230c:	800d883a 	mov	r6,r16
 8032310:	003e6206 	br	8031c9c <__svfscanf_r+0xe4>
 8032314:	e0bfffc4 	addi	r2,fp,-1
 8032318:	01005704 	movi	r4,348
 803231c:	2080e82e 	bgeu	r4,r2,80326c0 <__svfscanf_r+0xb08>
 8032320:	e0ffa8c4 	addi	r3,fp,-349
 8032324:	07005744 	movi	fp,349
 8032328:	da409f17 	ldw	r9,636(sp)
 803232c:	b5836014 	ori	r22,r22,3456
 8032330:	0021883a 	mov	r16,zero
 8032334:	dd400104 	addi	r21,sp,4
 8032338:	05c01344 	movi	r23,77
 803233c:	01c08004 	movi	r7,512
 8032340:	01bf7fc4 	movi	r6,-513
 8032344:	9a000017 	ldw	r8,0(r19)
 8032348:	41400003 	ldbu	r5,0(r8)
 803234c:	28bff544 	addi	r2,r5,-43
 8032350:	10803fcc 	andi	r2,r2,255
 8032354:	b881eb2e 	bgeu	r23,r2,8032b04 <__svfscanf_r+0xf4c>
 8032358:	da409f15 	stw	r9,636(sp)
 803235c:	b080400c 	andi	r2,r22,256
 8032360:	10000926 	beq	r2,zero,8032388 <__svfscanf_r+0x7d0>
 8032364:	d9400104 	addi	r5,sp,4
 8032368:	2d40052e 	bgeu	r5,r21,8032380 <__svfscanf_r+0x7c8>
 803236c:	a97fffc7 	ldb	r5,-1(r21)
 8032370:	8809883a 	mov	r4,r17
 8032374:	980d883a 	mov	r6,r19
 8032378:	ad7fffc4 	addi	r21,r21,-1
 803237c:	80397500 	call	8039750 <_ungetc_r>
 8032380:	d8800104 	addi	r2,sp,4
 8032384:	157e4926 	beq	r2,r21,8031cac <__svfscanf_r+0xf4>
 8032388:	b080040c 	andi	r2,r22,16
 803238c:	1002ac26 	beq	r2,zero,8032e40 <__svfscanf_r+0x1288>
 8032390:	d8c00104 	addi	r3,sp,4
 8032394:	a8ebc83a 	sub	r21,r21,r3
 8032398:	ac21883a 	add	r16,r21,r16
 803239c:	a429883a 	add	r20,r20,r16
 80323a0:	dc009d17 	ldw	r16,628(sp)
 80323a4:	800d883a 	mov	r6,r16
 80323a8:	003e3c06 	br	8031c9c <__svfscanf_r+0xe4>
 80323ac:	e000011e 	bne	fp,zero,80323b4 <__svfscanf_r+0x7fc>
 80323b0:	073fffc4 	movi	fp,-1
 80323b4:	b080004c 	andi	r2,r22,1
 80323b8:	b580040c 	andi	r22,r22,16
 80323bc:	10003526 	beq	r2,zero,8032494 <__svfscanf_r+0x8dc>
 80323c0:	b002dd1e 	bne	r22,zero,8032f38 <__svfscanf_r+0x1380>
 80323c4:	d8c09c17 	ldw	r3,624(sp)
 80323c8:	1d400017 	ldw	r21,0(r3)
 80323cc:	18c00104 	addi	r3,r3,4
 80323d0:	d8c09c15 	stw	r3,624(sp)
 80323d4:	0021883a 	mov	r16,zero
 80323d8:	ddc09904 	addi	r23,sp,612
 80323dc:	98c00017 	ldw	r3,0(r19)
 80323e0:	91400017 	ldw	r5,0(r18)
 80323e4:	18800003 	ldbu	r2,0(r3)
 80323e8:	11003fcc 	andi	r4,r2,255
 80323ec:	2909883a 	add	r4,r5,r4
 80323f0:	21000003 	ldbu	r4,0(r4)
 80323f4:	2100020c 	andi	r4,r4,8
 80323f8:	21003fcc 	andi	r4,r4,255
 80323fc:	2100201c 	xori	r4,r4,128
 8032400:	213fe004 	addi	r4,r4,-128
 8032404:	2002731e 	bne	r4,zero,8032dd4 <__svfscanf_r+0x121c>
 8032408:	e0027226 	beq	fp,zero,8032dd4 <__svfscanf_r+0x121c>
 803240c:	01420134 	movhi	r5,2052
 8032410:	294c4904 	addi	r5,r5,12580
 8032414:	29000017 	ldw	r4,0(r5)
 8032418:	813f1d26 	beq	r16,r4,8032090 <__svfscanf_r+0x4d8>
 803241c:	9a000117 	ldw	r8,4(r19)
 8032420:	18c00044 	addi	r3,r3,1
 8032424:	d9000104 	addi	r4,sp,4
 8032428:	423fffc4 	addi	r8,r8,-1
 803242c:	240f883a 	add	r7,r4,r16
 8032430:	000b883a 	mov	r5,zero
 8032434:	b809883a 	mov	r4,r23
 8032438:	01800204 	movi	r6,8
 803243c:	9a000115 	stw	r8,4(r19)
 8032440:	98c00015 	stw	r3,0(r19)
 8032444:	38800005 	stb	r2,0(r7)
 8032448:	84000044 	addi	r16,r16,1
 803244c:	802ecf00 	call	802ecf0 <memset>
 8032450:	a80b883a 	mov	r5,r21
 8032454:	8809883a 	mov	r4,r17
 8032458:	ddc00015 	stw	r23,0(sp)
 803245c:	d9800104 	addi	r6,sp,4
 8032460:	800f883a 	mov	r7,r16
 8032464:	80357b00 	call	80357b0 <_mbrtowc_r>
 8032468:	017fffc4 	movi	r5,-1
 803246c:	117f0826 	beq	r2,r5,8032090 <__svfscanf_r+0x4d8>
 8032470:	1002de1e 	bne	r2,zero,8032fec <__svfscanf_r+0x1434>
 8032474:	a8000015 	stw	zero,0(r21)
 8032478:	0009883a 	mov	r4,zero
 803247c:	0002de06 	br	8032ff8 <__svfscanf_r+0x1440>
 8032480:	8809883a 	mov	r4,r17
 8032484:	980b883a 	mov	r5,r19
 8032488:	802ef540 	call	802ef54 <__srefill_r>
 803248c:	103e3f26 	beq	r2,zero,8031d8c <__svfscanf_r+0x1d4>
 8032490:	003eff06 	br	8032090 <__svfscanf_r+0x4d8>
 8032494:	b0027e26 	beq	r22,zero,8032e90 <__svfscanf_r+0x12d8>
 8032498:	91400017 	ldw	r5,0(r18)
 803249c:	98800017 	ldw	r2,0(r19)
 80324a0:	0021883a 	mov	r16,zero
 80324a4:	10c00003 	ldbu	r3,0(r2)
 80324a8:	28c7883a 	add	r3,r5,r3
 80324ac:	18c00003 	ldbu	r3,0(r3)
 80324b0:	18c0020c 	andi	r3,r3,8
 80324b4:	18c03fcc 	andi	r3,r3,255
 80324b8:	18c0201c 	xori	r3,r3,128
 80324bc:	18ffe004 	addi	r3,r3,-128
 80324c0:	183fb61e 	bne	r3,zero,803239c <__svfscanf_r+0x7e4>
 80324c4:	98c00117 	ldw	r3,4(r19)
 80324c8:	10800044 	addi	r2,r2,1
 80324cc:	84000044 	addi	r16,r16,1
 80324d0:	18ffffc4 	addi	r3,r3,-1
 80324d4:	98c00115 	stw	r3,4(r19)
 80324d8:	98800015 	stw	r2,0(r19)
 80324dc:	e43faf26 	beq	fp,r16,803239c <__svfscanf_r+0x7e4>
 80324e0:	00fff016 	blt	zero,r3,80324a4 <__svfscanf_r+0x8ec>
 80324e4:	8809883a 	mov	r4,r17
 80324e8:	980b883a 	mov	r5,r19
 80324ec:	802ef540 	call	802ef54 <__srefill_r>
 80324f0:	103faa1e 	bne	r2,zero,803239c <__svfscanf_r+0x7e4>
 80324f4:	91400017 	ldw	r5,0(r18)
 80324f8:	98800017 	ldw	r2,0(r19)
 80324fc:	003fe906 	br	80324a4 <__svfscanf_r+0x8ec>
 8032500:	1085883a 	add	r2,r2,r2
 8032504:	1085883a 	add	r2,r2,r2
 8032508:	010200f4 	movhi	r4,2051
 803250c:	21094704 	addi	r4,r4,9500
 8032510:	1105883a 	add	r2,r2,r4
 8032514:	10800017 	ldw	r2,0(r2)
 8032518:	1000683a 	jmp	r2
 803251c:	080327bc 	xorhi	zero,at,3230
 8032520:	080321e0 	cmpeqi	zero,at,3207
 8032524:	080327bc 	xorhi	zero,at,3230
 8032528:	080327a8 	cmpgeui	zero,at,3230
 803252c:	080321e0 	cmpeqi	zero,at,3207
 8032530:	08032784 	addi	zero,at,3230
 8032534:	08032738 	rdprs	zero,at,3228
 8032538:	08032738 	rdprs	zero,at,3228
 803253c:	08032738 	rdprs	zero,at,3228
 8032540:	08032738 	rdprs	zero,at,3228
 8032544:	08032738 	rdprs	zero,at,3228
 8032548:	08032738 	rdprs	zero,at,3228
 803254c:	08032738 	rdprs	zero,at,3228
 8032550:	08032738 	rdprs	zero,at,3228
 8032554:	08032738 	rdprs	zero,at,3228
 8032558:	080321e0 	cmpeqi	zero,at,3207
 803255c:	080321e0 	cmpeqi	zero,at,3207
 8032560:	080321e0 	cmpeqi	zero,at,3207
 8032564:	080321e0 	cmpeqi	zero,at,3207
 8032568:	080321e0 	cmpeqi	zero,at,3207
 803256c:	080321e0 	cmpeqi	zero,at,3207
 8032570:	080321e0 	cmpeqi	zero,at,3207
 8032574:	080328a0 	cmpeqi	zero,at,3234
 8032578:	080321e0 	cmpeqi	zero,at,3207
 803257c:	080321e0 	cmpeqi	zero,at,3207
 8032580:	080321e0 	cmpeqi	zero,at,3207
 8032584:	08032864 	muli	zero,at,3233
 8032588:	080328b0 	cmpltui	zero,at,3234
 803258c:	080321e0 	cmpeqi	zero,at,3207
 8032590:	080321e0 	cmpeqi	zero,at,3207
 8032594:	0803283c 	xorhi	zero,at,3232
 8032598:	080321e0 	cmpeqi	zero,at,3207
 803259c:	080321e0 	cmpeqi	zero,at,3207
 80325a0:	080321e0 	cmpeqi	zero,at,3207
 80325a4:	080321e0 	cmpeqi	zero,at,3207
 80325a8:	08032808 	cmpgei	zero,at,3232
 80325ac:	080321e0 	cmpeqi	zero,at,3207
 80325b0:	080321e0 	cmpeqi	zero,at,3207
 80325b4:	080321e0 	cmpeqi	zero,at,3207
 80325b8:	080321e0 	cmpeqi	zero,at,3207
 80325bc:	080321e0 	cmpeqi	zero,at,3207
 80325c0:	080327ec 	andhi	zero,at,3231
 80325c4:	080321e0 	cmpeqi	zero,at,3207
 80325c8:	080321e0 	cmpeqi	zero,at,3207
 80325cc:	080321e0 	cmpeqi	zero,at,3207
 80325d0:	080321e0 	cmpeqi	zero,at,3207
 80325d4:	080327d0 	cmplti	zero,at,3231
 80325d8:	080321e0 	cmpeqi	zero,at,3207
 80325dc:	080321e0 	cmpeqi	zero,at,3207
 80325e0:	080321e0 	cmpeqi	zero,at,3207
 80325e4:	080321e0 	cmpeqi	zero,at,3207
 80325e8:	080321e0 	cmpeqi	zero,at,3207
 80325ec:	080321e0 	cmpeqi	zero,at,3207
 80325f0:	080321e0 	cmpeqi	zero,at,3207
 80325f4:	080328a0 	cmpeqi	zero,at,3234
 80325f8:	080321e0 	cmpeqi	zero,at,3207
 80325fc:	080321e0 	cmpeqi	zero,at,3207
 8032600:	080321e0 	cmpeqi	zero,at,3207
 8032604:	08032864 	muli	zero,at,3233
 8032608:	080328b0 	cmpltui	zero,at,3234
 803260c:	080321e0 	cmpeqi	zero,at,3207
 8032610:	080321e0 	cmpeqi	zero,at,3207
 8032614:	0803283c 	xorhi	zero,at,3232
 8032618:	080321e0 	cmpeqi	zero,at,3207
 803261c:	080321e0 	cmpeqi	zero,at,3207
 8032620:	080321e0 	cmpeqi	zero,at,3207
 8032624:	080321e0 	cmpeqi	zero,at,3207
 8032628:	08032808 	cmpgei	zero,at,3232
 803262c:	080321e0 	cmpeqi	zero,at,3207
 8032630:	080321e0 	cmpeqi	zero,at,3207
 8032634:	080321e0 	cmpeqi	zero,at,3207
 8032638:	080321e0 	cmpeqi	zero,at,3207
 803263c:	080321e0 	cmpeqi	zero,at,3207
 8032640:	080327ec 	andhi	zero,at,3231
 8032644:	080321e0 	cmpeqi	zero,at,3207
 8032648:	080321e0 	cmpeqi	zero,at,3207
 803264c:	080321e0 	cmpeqi	zero,at,3207
 8032650:	080321e0 	cmpeqi	zero,at,3207
 8032654:	080327d0 	cmplti	zero,at,3231
 8032658:	b580040c 	andi	r22,r22,16
 803265c:	b0025226 	beq	r22,zero,8032fa8 <__svfscanf_r+0x13f0>
 8032660:	0021883a 	mov	r16,zero
 8032664:	98800117 	ldw	r2,4(r19)
 8032668:	17026f0e 	bge	r2,fp,8033028 <__svfscanf_r+0x1470>
 803266c:	98c00017 	ldw	r3,0(r19)
 8032670:	8809883a 	mov	r4,r17
 8032674:	980b883a 	mov	r5,r19
 8032678:	1887883a 	add	r3,r3,r2
 803267c:	98c00015 	stw	r3,0(r19)
 8032680:	80a1883a 	add	r16,r16,r2
 8032684:	e0b9c83a 	sub	fp,fp,r2
 8032688:	802ef540 	call	802ef54 <__srefill_r>
 803268c:	103ff526 	beq	r2,zero,8032664 <__svfscanf_r+0xaac>
 8032690:	803f421e 	bne	r16,zero,803239c <__svfscanf_r+0x7e4>
 8032694:	003e7e06 	br	8032090 <__svfscanf_r+0x4d8>
 8032698:	8809883a 	mov	r4,r17
 803269c:	980b883a 	mov	r5,r19
 80326a0:	802ef540 	call	802ef54 <__srefill_r>
 80326a4:	103df126 	beq	r2,zero,8031e6c <__svfscanf_r+0x2b4>
 80326a8:	803e791e 	bne	r16,zero,8032090 <__svfscanf_r+0x4d8>
 80326ac:	b83f1326 	beq	r23,zero,80322fc <__svfscanf_r+0x744>
 80326b0:	003df006 	br	8031e74 <__svfscanf_r+0x2bc>
 80326b4:	e2ffa8c4 	addi	r11,fp,-349
 80326b8:	07005744 	movi	fp,349
 80326bc:	003eb706 	br	803219c <__svfscanf_r+0x5e4>
 80326c0:	0007883a 	mov	r3,zero
 80326c4:	003f1806 	br	8032328 <__svfscanf_r+0x770>
 80326c8:	d8c09c17 	ldw	r3,624(sp)
 80326cc:	98800017 	ldw	r2,0(r19)
 80326d0:	dd805884 	addi	r22,sp,354
 80326d4:	1c000017 	ldw	r16,0(r3)
 80326d8:	1dc00104 	addi	r23,r3,4
 80326dc:	802b883a 	mov	r21,r16
 80326e0:	10c00003 	ldbu	r3,0(r2)
 80326e4:	b0c7883a 	add	r3,r22,r3
 80326e8:	18c00007 	ldb	r3,0(r3)
 80326ec:	1801c226 	beq	r3,zero,8032df8 <__svfscanf_r+0x1240>
 80326f0:	98c00117 	ldw	r3,4(r19)
 80326f4:	10800044 	addi	r2,r2,1
 80326f8:	ad400044 	addi	r21,r21,1
 80326fc:	18ffffc4 	addi	r3,r3,-1
 8032700:	98c00115 	stw	r3,4(r19)
 8032704:	10ffffc3 	ldbu	r3,-1(r2)
 8032708:	e73fffc4 	addi	fp,fp,-1
 803270c:	a8ffffc5 	stb	r3,-1(r21)
 8032710:	98800015 	stw	r2,0(r19)
 8032714:	e001b826 	beq	fp,zero,8032df8 <__svfscanf_r+0x1240>
 8032718:	98c00117 	ldw	r3,4(r19)
 803271c:	00fff016 	blt	zero,r3,80326e0 <__svfscanf_r+0xb28>
 8032720:	8809883a 	mov	r4,r17
 8032724:	980b883a 	mov	r5,r19
 8032728:	802ef540 	call	802ef54 <__srefill_r>
 803272c:	1001b11e 	bne	r2,zero,8032df4 <__svfscanf_r+0x123c>
 8032730:	98800017 	ldw	r2,0(r19)
 8032734:	003fea06 	br	80326e0 <__svfscanf_r+0xb28>
 8032738:	80803fcc 	andi	r2,r16,255
 803273c:	1080201c 	xori	r2,r2,128
 8032740:	10bfe004 	addi	r2,r2,-128
 8032744:	3085883a 	add	r2,r6,r2
 8032748:	103ea51e 	bne	r2,zero,80321e0 <__svfscanf_r+0x628>
 803274c:	00bf9fc4 	movi	r2,-385
 8032750:	b0ac703a 	and	r22,r22,r2
 8032754:	b9400005 	stb	r5,0(r23)
 8032758:	bdc00044 	addi	r23,r23,1
 803275c:	98800117 	ldw	r2,4(r19)
 8032760:	e73fffc4 	addi	fp,fp,-1
 8032764:	a5000044 	addi	r20,r20,1
 8032768:	10bfffc4 	addi	r2,r2,-1
 803276c:	98800115 	stw	r2,4(r19)
 8032770:	00816d0e 	bge	zero,r2,8032d28 <__svfscanf_r+0x1170>
 8032774:	39c00044 	addi	r7,r7,1
 8032778:	99c00015 	stw	r7,0(r19)
 803277c:	e03e931e 	bne	fp,zero,80321cc <__svfscanf_r+0x614>
 8032780:	003e9706 	br	80321e0 <__svfscanf_r+0x628>
 8032784:	b080400c 	andi	r2,r22,256
 8032788:	103feb26 	beq	r2,zero,8032738 <__svfscanf_r+0xb80>
 803278c:	00bfdfc4 	movi	r2,-129
 8032790:	b0ac703a 	and	r22,r22,r2
 8032794:	ad400044 	addi	r21,r21,1
 8032798:	583ff026 	beq	r11,zero,803275c <__svfscanf_r+0xba4>
 803279c:	5affffc4 	addi	r11,r11,-1
 80327a0:	e7000044 	addi	fp,fp,1
 80327a4:	003fed06 	br	803275c <__svfscanf_r+0xba4>
 80327a8:	b080800c 	andi	r2,r22,512
 80327ac:	103e8c26 	beq	r2,zero,80321e0 <__svfscanf_r+0x628>
 80327b0:	b3ec703a 	and	r22,r22,r15
 80327b4:	dd40a215 	stw	r21,648(sp)
 80327b8:	003fe606 	br	8032754 <__svfscanf_r+0xb9c>
 80327bc:	b080200c 	andi	r2,r22,128
 80327c0:	103e8726 	beq	r2,zero,80321e0 <__svfscanf_r+0x628>
 80327c4:	00bfdfc4 	movi	r2,-129
 80327c8:	b0ac703a 	and	r22,r22,r2
 80327cc:	003fe106 	br	8032754 <__svfscanf_r+0xb9c>
 80327d0:	81003fcc 	andi	r4,r16,255
 80327d4:	2100201c 	xori	r4,r4,128
 80327d8:	213fe004 	addi	r4,r4,-128
 80327dc:	008001c4 	movi	r2,7
 80327e0:	20be7f1e 	bne	r4,r2,80321e0 <__svfscanf_r+0x628>
 80327e4:	04000204 	movi	r16,8
 80327e8:	003fda06 	br	8032754 <__svfscanf_r+0xb9c>
 80327ec:	81003fcc 	andi	r4,r16,255
 80327f0:	2100201c 	xori	r4,r4,128
 80327f4:	213fe004 	addi	r4,r4,-128
 80327f8:	00800184 	movi	r2,6
 80327fc:	20be781e 	bne	r4,r2,80321e0 <__svfscanf_r+0x628>
 8032800:	040001c4 	movi	r16,7
 8032804:	003fd306 	br	8032754 <__svfscanf_r+0xb9c>
 8032808:	3001891e 	bne	r6,zero,8032e30 <__svfscanf_r+0x1278>
 803280c:	b101c00c 	andi	r4,r22,1792
 8032810:	0081c004 	movi	r2,1792
 8032814:	20821d26 	beq	r4,r2,803308c <__svfscanf_r+0x14d4>
 8032818:	80803fcc 	andi	r2,r16,255
 803281c:	1080201c 	xori	r2,r2,128
 8032820:	10bfe004 	addi	r2,r2,-128
 8032824:	01000044 	movi	r4,1
 8032828:	11000226 	beq	r2,r4,8032834 <__svfscanf_r+0xc7c>
 803282c:	01000104 	movi	r4,4
 8032830:	113e6b1e 	bne	r2,r4,80321e0 <__svfscanf_r+0x628>
 8032834:	84000044 	addi	r16,r16,1
 8032838:	003fc606 	br	8032754 <__svfscanf_r+0xb9c>
 803283c:	80803fcc 	andi	r2,r16,255
 8032840:	1080201c 	xori	r2,r2,128
 8032844:	10bfe004 	addi	r2,r2,-128
 8032848:	1001731e 	bne	r2,zero,8032e18 <__svfscanf_r+0x1260>
 803284c:	b101c00c 	andi	r4,r22,1792
 8032850:	0081c004 	movi	r2,1792
 8032854:	20be621e 	bne	r4,r2,80321e0 <__svfscanf_r+0x628>
 8032858:	b32c703a 	and	r22,r22,r12
 803285c:	04000044 	movi	r16,1
 8032860:	003fbc06 	br	8032754 <__svfscanf_r+0xb9c>
 8032864:	b081400c 	andi	r2,r22,1280
 8032868:	13800326 	beq	r2,r14,8032878 <__svfscanf_r+0xcc0>
 803286c:	b081000c 	andi	r2,r22,1024
 8032870:	103e5b26 	beq	r2,zero,80321e0 <__svfscanf_r+0x628>
 8032874:	a83e5d26 	beq	r21,zero,80321ec <__svfscanf_r+0x634>
 8032878:	b080800c 	andi	r2,r22,512
 803287c:	1000041e 	bne	r2,zero,8032890 <__svfscanf_r+0xcd8>
 8032880:	d880a217 	ldw	r2,648(sp)
 8032884:	ddc0a115 	stw	r23,644(sp)
 8032888:	a8abc83a 	sub	r21,r21,r2
 803288c:	dd40a315 	stw	r21,652(sp)
 8032890:	b32c703a 	and	r22,r22,r12
 8032894:	b5806014 	ori	r22,r22,384
 8032898:	002b883a 	mov	r21,zero
 803289c:	003fad06 	br	8032754 <__svfscanf_r+0xb9c>
 80328a0:	00800044 	movi	r2,1
 80328a4:	30be4e1e 	bne	r6,r2,80321e0 <__svfscanf_r+0x628>
 80328a8:	01800084 	movi	r6,2
 80328ac:	003fa906 	br	8032754 <__svfscanf_r+0xb9c>
 80328b0:	81003fcc 	andi	r4,r16,255
 80328b4:	2100201c 	xori	r4,r4,128
 80328b8:	213fe004 	addi	r4,r4,-128
 80328bc:	00800084 	movi	r2,2
 80328c0:	20be471e 	bne	r4,r2,80321e0 <__svfscanf_r+0x628>
 80328c4:	040000c4 	movi	r16,3
 80328c8:	003fa206 	br	8032754 <__svfscanf_r+0xb9c>
 80328cc:	01420134 	movhi	r5,2052
 80328d0:	29628e04 	addi	r5,r5,-30152
 80328d4:	00800284 	movi	r2,10
 80328d8:	d940a015 	stw	r5,640(sp)
 80328dc:	d8809f15 	stw	r2,636(sp)
 80328e0:	040000c4 	movi	r16,3
 80328e4:	003d2706 	br	8031d84 <__svfscanf_r+0x1cc>
 80328e8:	df009d15 	stw	fp,628(sp)
 80328ec:	04000084 	movi	r16,2
 80328f0:	2039883a 	mov	fp,r4
 80328f4:	003d2306 	br	8031d84 <__svfscanf_r+0x1cc>
 80328f8:	00820134 	movhi	r2,2052
 80328fc:	10a40104 	addi	r2,r2,-28668
 8032900:	00c00284 	movi	r3,10
 8032904:	df009d15 	stw	fp,628(sp)
 8032908:	d880a015 	stw	r2,640(sp)
 803290c:	2039883a 	mov	fp,r4
 8032910:	d8c09f15 	stw	r3,636(sp)
 8032914:	040000c4 	movi	r16,3
 8032918:	003d1a06 	br	8031d84 <__svfscanf_r+0x1cc>
 803291c:	bdc03fcc 	andi	r23,r23,255
 8032920:	01400284 	movi	r5,10
 8032924:	bdc0201c 	xori	r23,r23,128
 8032928:	d8c0a815 	stw	r3,672(sp)
 803292c:	d980a915 	stw	r6,676(sp)
 8032930:	bdffe004 	addi	r23,r23,-128
 8032934:	802c2180 	call	802c218 <__mulsi3>
 8032938:	15c5883a 	add	r2,r2,r23
 803293c:	113ff404 	addi	r4,r2,-48
 8032940:	85c00043 	ldbu	r23,1(r16)
 8032944:	d8c0a817 	ldw	r3,672(sp)
 8032948:	e021883a 	mov	r16,fp
 803294c:	d980a917 	ldw	r6,676(sp)
 8032950:	003cf906 	br	8031d38 <__svfscanf_r+0x180>
 8032954:	df009d15 	stw	fp,628(sp)
 8032958:	2039883a 	mov	fp,r4
 803295c:	003d0206 	br	8031d68 <__svfscanf_r+0x1b0>
 8032960:	df009d15 	stw	fp,628(sp)
 8032964:	04000104 	movi	r16,4
 8032968:	2039883a 	mov	fp,r4
 803296c:	003d0506 	br	8031d84 <__svfscanf_r+0x1cc>
 8032970:	85c00043 	ldbu	r23,1(r16)
 8032974:	b5800094 	ori	r22,r22,2
 8032978:	e021883a 	mov	r16,fp
 803297c:	003cee06 	br	8031d38 <__svfscanf_r+0x180>
 8032980:	df009d15 	stw	fp,628(sp)
 8032984:	e021883a 	mov	r16,fp
 8032988:	003cd706 	br	8031ce8 <__svfscanf_r+0x130>
 803298c:	85c00043 	ldbu	r23,1(r16)
 8032990:	b5800414 	ori	r22,r22,16
 8032994:	e021883a 	mov	r16,fp
 8032998:	003ce706 	br	8031d38 <__svfscanf_r+0x180>
 803299c:	df009d15 	stw	fp,628(sp)
 80329a0:	b5800054 	ori	r22,r22,1
 80329a4:	2039883a 	mov	fp,r4
 80329a8:	01020134 	movhi	r4,2052
 80329ac:	21240104 	addi	r4,r4,-28668
 80329b0:	01400204 	movi	r5,8
 80329b4:	d900a015 	stw	r4,640(sp)
 80329b8:	d9409f15 	stw	r5,636(sp)
 80329bc:	040000c4 	movi	r16,3
 80329c0:	003cf006 	br	8031d84 <__svfscanf_r+0x1cc>
 80329c4:	df009d15 	stw	fp,628(sp)
 80329c8:	01400404 	movi	r5,16
 80329cc:	2039883a 	mov	fp,r4
 80329d0:	01020134 	movhi	r4,2052
 80329d4:	21240104 	addi	r4,r4,-28668
 80329d8:	b5808014 	ori	r22,r22,512
 80329dc:	d900a015 	stw	r4,640(sp)
 80329e0:	d9409f15 	stw	r5,636(sp)
 80329e4:	040000c4 	movi	r16,3
 80329e8:	003ce606 	br	8031d84 <__svfscanf_r+0x1cc>
 80329ec:	df009d15 	stw	fp,628(sp)
 80329f0:	d9409d17 	ldw	r5,628(sp)
 80329f4:	2039883a 	mov	fp,r4
 80329f8:	d9005884 	addi	r4,sp,354
 80329fc:	803727c0 	call	803727c <__sccl>
 8032a00:	d8809d15 	stw	r2,628(sp)
 8032a04:	b5801014 	ori	r22,r22,64
 8032a08:	04000044 	movi	r16,1
 8032a0c:	003cdd06 	br	8031d84 <__svfscanf_r+0x1cc>
 8032a10:	df009d15 	stw	fp,628(sp)
 8032a14:	b5801014 	ori	r22,r22,64
 8032a18:	2039883a 	mov	fp,r4
 8032a1c:	0021883a 	mov	r16,zero
 8032a20:	003cd806 	br	8031d84 <__svfscanf_r+0x1cc>
 8032a24:	df009d15 	stw	fp,628(sp)
 8032a28:	2039883a 	mov	fp,r4
 8032a2c:	003ccf06 	br	8031d6c <__svfscanf_r+0x1b4>
 8032a30:	85c00043 	ldbu	r23,1(r16)
 8032a34:	b5800114 	ori	r22,r22,4
 8032a38:	e021883a 	mov	r16,fp
 8032a3c:	003cbe06 	br	8031d38 <__svfscanf_r+0x180>
 8032a40:	df009d15 	stw	fp,628(sp)
 8032a44:	2039883a 	mov	fp,r4
 8032a48:	01020134 	movhi	r4,2052
 8032a4c:	21228e04 	addi	r4,r4,-30152
 8032a50:	d900a015 	stw	r4,640(sp)
 8032a54:	d8009f15 	stw	zero,636(sp)
 8032a58:	040000c4 	movi	r16,3
 8032a5c:	003cc906 	br	8031d84 <__svfscanf_r+0x1cc>
 8032a60:	85c00043 	ldbu	r23,1(r16)
 8032a64:	b8803fcc 	andi	r2,r23,255
 8032a68:	1080201c 	xori	r2,r2,128
 8032a6c:	10bfe004 	addi	r2,r2,-128
 8032a70:	11818f26 	beq	r2,r6,80330b0 <__svfscanf_r+0x14f8>
 8032a74:	b5800054 	ori	r22,r22,1
 8032a78:	e021883a 	mov	r16,fp
 8032a7c:	003cae06 	br	8031d38 <__svfscanf_r+0x180>
 8032a80:	df009d15 	stw	fp,628(sp)
 8032a84:	b080040c 	andi	r2,r22,16
 8032a88:	103cfa1e 	bne	r2,zero,8031e74 <__svfscanf_r+0x2bc>
 8032a8c:	b080010c 	andi	r2,r22,4
 8032a90:	10018b26 	beq	r2,zero,80330c0 <__svfscanf_r+0x1508>
 8032a94:	d9009c17 	ldw	r4,624(sp)
 8032a98:	e021883a 	mov	r16,fp
 8032a9c:	800d883a 	mov	r6,r16
 8032aa0:	20800017 	ldw	r2,0(r4)
 8032aa4:	21000104 	addi	r4,r4,4
 8032aa8:	d9009c15 	stw	r4,624(sp)
 8032aac:	1500000d 	sth	r20,0(r2)
 8032ab0:	003c7a06 	br	8031c9c <__svfscanf_r+0xe4>
 8032ab4:	df009d15 	stw	fp,628(sp)
 8032ab8:	2039883a 	mov	fp,r4
 8032abc:	003fba06 	br	80329a8 <__svfscanf_r+0xdf0>
 8032ac0:	00820134 	movhi	r2,2052
 8032ac4:	10a40104 	addi	r2,r2,-28668
 8032ac8:	00c00404 	movi	r3,16
 8032acc:	df009d15 	stw	fp,628(sp)
 8032ad0:	b5808814 	ori	r22,r22,544
 8032ad4:	2039883a 	mov	fp,r4
 8032ad8:	d880a015 	stw	r2,640(sp)
 8032adc:	d8c09f15 	stw	r3,636(sp)
 8032ae0:	040000c4 	movi	r16,3
 8032ae4:	003ca706 	br	8031d84 <__svfscanf_r+0x1cc>
 8032ae8:	013fff84 	movi	r4,-2
 8032aec:	113cdd26 	beq	r2,r4,8031e64 <__svfscanf_r+0x2ac>
 8032af0:	a429883a 	add	r20,r20,r16
 8032af4:	e73fffc4 	addi	fp,fp,-1
 8032af8:	b83cd826 	beq	r23,zero,8031e5c <__svfscanf_r+0x2a4>
 8032afc:	0021883a 	mov	r16,zero
 8032b00:	003cd806 	br	8031e64 <__svfscanf_r+0x2ac>
 8032b04:	1085883a 	add	r2,r2,r2
 8032b08:	1085883a 	add	r2,r2,r2
 8032b0c:	010200f4 	movhi	r4,2051
 8032b10:	210ac804 	addi	r4,r4,11040
 8032b14:	1105883a 	add	r2,r2,r4
 8032b18:	10800017 	ldw	r2,0(r2)
 8032b1c:	1000683a 	jmp	r2
 8032b20:	08032d14 	ori	zero,at,3252
 8032b24:	08032358 	cmpnei	zero,at,3213
 8032b28:	08032d14 	ori	zero,at,3252
 8032b2c:	08032358 	cmpnei	zero,at,3213
 8032b30:	08032358 	cmpnei	zero,at,3213
 8032b34:	08032cec 	andhi	zero,at,3251
 8032b38:	08032ccc 	andi	zero,at,3251
 8032b3c:	08032ccc 	andi	zero,at,3251
 8032b40:	08032ccc 	andi	zero,at,3251
 8032b44:	08032ccc 	andi	zero,at,3251
 8032b48:	08032ccc 	andi	zero,at,3251
 8032b4c:	08032ccc 	andi	zero,at,3251
 8032b50:	08032ccc 	andi	zero,at,3251
 8032b54:	08032cac 	andhi	zero,at,3250
 8032b58:	08032cac 	andhi	zero,at,3250
 8032b5c:	08032358 	cmpnei	zero,at,3213
 8032b60:	08032358 	cmpnei	zero,at,3213
 8032b64:	08032358 	cmpnei	zero,at,3213
 8032b68:	08032358 	cmpnei	zero,at,3213
 8032b6c:	08032358 	cmpnei	zero,at,3213
 8032b70:	08032358 	cmpnei	zero,at,3213
 8032b74:	08032358 	cmpnei	zero,at,3213
 8032b78:	08032c98 	cmpnei	zero,at,3250
 8032b7c:	08032c98 	cmpnei	zero,at,3250
 8032b80:	08032c98 	cmpnei	zero,at,3250
 8032b84:	08032c98 	cmpnei	zero,at,3250
 8032b88:	08032c98 	cmpnei	zero,at,3250
 8032b8c:	08032c98 	cmpnei	zero,at,3250
 8032b90:	08032358 	cmpnei	zero,at,3213
 8032b94:	08032358 	cmpnei	zero,at,3213
 8032b98:	08032358 	cmpnei	zero,at,3213
 8032b9c:	08032358 	cmpnei	zero,at,3213
 8032ba0:	08032358 	cmpnei	zero,at,3213
 8032ba4:	08032358 	cmpnei	zero,at,3213
 8032ba8:	08032358 	cmpnei	zero,at,3213
 8032bac:	08032358 	cmpnei	zero,at,3213
 8032bb0:	08032358 	cmpnei	zero,at,3213
 8032bb4:	08032358 	cmpnei	zero,at,3213
 8032bb8:	08032358 	cmpnei	zero,at,3213
 8032bbc:	08032358 	cmpnei	zero,at,3213
 8032bc0:	08032358 	cmpnei	zero,at,3213
 8032bc4:	08032358 	cmpnei	zero,at,3213
 8032bc8:	08032358 	cmpnei	zero,at,3213
 8032bcc:	08032358 	cmpnei	zero,at,3213
 8032bd0:	08032358 	cmpnei	zero,at,3213
 8032bd4:	08032c58 	cmpnei	zero,at,3249
 8032bd8:	08032358 	cmpnei	zero,at,3213
 8032bdc:	08032358 	cmpnei	zero,at,3213
 8032be0:	08032358 	cmpnei	zero,at,3213
 8032be4:	08032358 	cmpnei	zero,at,3213
 8032be8:	08032358 	cmpnei	zero,at,3213
 8032bec:	08032358 	cmpnei	zero,at,3213
 8032bf0:	08032358 	cmpnei	zero,at,3213
 8032bf4:	08032358 	cmpnei	zero,at,3213
 8032bf8:	08032c98 	cmpnei	zero,at,3250
 8032bfc:	08032c98 	cmpnei	zero,at,3250
 8032c00:	08032c98 	cmpnei	zero,at,3250
 8032c04:	08032c98 	cmpnei	zero,at,3250
 8032c08:	08032c98 	cmpnei	zero,at,3250
 8032c0c:	08032c98 	cmpnei	zero,at,3250
 8032c10:	08032358 	cmpnei	zero,at,3213
 8032c14:	08032358 	cmpnei	zero,at,3213
 8032c18:	08032358 	cmpnei	zero,at,3213
 8032c1c:	08032358 	cmpnei	zero,at,3213
 8032c20:	08032358 	cmpnei	zero,at,3213
 8032c24:	08032358 	cmpnei	zero,at,3213
 8032c28:	08032358 	cmpnei	zero,at,3213
 8032c2c:	08032358 	cmpnei	zero,at,3213
 8032c30:	08032358 	cmpnei	zero,at,3213
 8032c34:	08032358 	cmpnei	zero,at,3213
 8032c38:	08032358 	cmpnei	zero,at,3213
 8032c3c:	08032358 	cmpnei	zero,at,3213
 8032c40:	08032358 	cmpnei	zero,at,3213
 8032c44:	08032358 	cmpnei	zero,at,3213
 8032c48:	08032358 	cmpnei	zero,at,3213
 8032c4c:	08032358 	cmpnei	zero,at,3213
 8032c50:	08032358 	cmpnei	zero,at,3213
 8032c54:	08032c58 	cmpnei	zero,at,3249
 8032c58:	b081800c 	andi	r2,r22,1536
 8032c5c:	11fdbe1e 	bne	r2,r7,8032358 <__svfscanf_r+0x7a0>
 8032c60:	b1ac703a 	and	r22,r22,r6
 8032c64:	b5814014 	ori	r22,r22,1280
 8032c68:	02400404 	movi	r9,16
 8032c6c:	a9400005 	stb	r5,0(r21)
 8032c70:	ad400044 	addi	r21,r21,1
 8032c74:	98800117 	ldw	r2,4(r19)
 8032c78:	10bfffc4 	addi	r2,r2,-1
 8032c7c:	98800115 	stw	r2,4(r19)
 8032c80:	00803b0e 	bge	zero,r2,8032d70 <__svfscanf_r+0x11b8>
 8032c84:	42000044 	addi	r8,r8,1
 8032c88:	9a000015 	stw	r8,0(r19)
 8032c8c:	e73fffc4 	addi	fp,fp,-1
 8032c90:	e03dac1e 	bne	fp,zero,8032344 <__svfscanf_r+0x78c>
 8032c94:	003db006 	br	8032358 <__svfscanf_r+0x7a0>
 8032c98:	00800284 	movi	r2,10
 8032c9c:	127dae0e 	bge	r2,r9,8032358 <__svfscanf_r+0x7a0>
 8032ca0:	00bd1fc4 	movi	r2,-2945
 8032ca4:	b0ac703a 	and	r22,r22,r2
 8032ca8:	003ff006 	br	8032c6c <__svfscanf_r+0x10b4>
 8032cac:	4a53883a 	add	r9,r9,r9
 8032cb0:	01020134 	movhi	r4,2052
 8032cb4:	21051b84 	addi	r4,r4,5230
 8032cb8:	2245883a 	add	r2,r4,r9
 8032cbc:	1240000f 	ldh	r9,0(r2)
 8032cc0:	00800204 	movi	r2,8
 8032cc4:	127ff616 	blt	r2,r9,8032ca0 <__svfscanf_r+0x10e8>
 8032cc8:	003da306 	br	8032358 <__svfscanf_r+0x7a0>
 8032ccc:	4a53883a 	add	r9,r9,r9
 8032cd0:	01020134 	movhi	r4,2052
 8032cd4:	21051b84 	addi	r4,r4,5230
 8032cd8:	2245883a 	add	r2,r4,r9
 8032cdc:	1240000f 	ldh	r9,0(r2)
 8032ce0:	00bd1fc4 	movi	r2,-2945
 8032ce4:	b0ac703a 	and	r22,r22,r2
 8032ce8:	003fe006 	br	8032c6c <__svfscanf_r+0x10b4>
 8032cec:	b082000c 	andi	r2,r22,2048
 8032cf0:	103fde26 	beq	r2,zero,8032c6c <__svfscanf_r+0x10b4>
 8032cf4:	4800021e 	bne	r9,zero,8032d00 <__svfscanf_r+0x1148>
 8032cf8:	b5808014 	ori	r22,r22,512
 8032cfc:	02400204 	movi	r9,8
 8032d00:	b081000c 	andi	r2,r22,1024
 8032d04:	10009f26 	beq	r2,zero,8032f84 <__svfscanf_r+0x13cc>
 8032d08:	00be9fc4 	movi	r2,-1409
 8032d0c:	b0ac703a 	and	r22,r22,r2
 8032d10:	003fd606 	br	8032c6c <__svfscanf_r+0x10b4>
 8032d14:	b080200c 	andi	r2,r22,128
 8032d18:	103d8f26 	beq	r2,zero,8032358 <__svfscanf_r+0x7a0>
 8032d1c:	00bfdfc4 	movi	r2,-129
 8032d20:	b0ac703a 	and	r22,r22,r2
 8032d24:	003fd106 	br	8032c6c <__svfscanf_r+0x10b4>
 8032d28:	8809883a 	mov	r4,r17
 8032d2c:	980b883a 	mov	r5,r19
 8032d30:	d8c0a815 	stw	r3,672(sp)
 8032d34:	d980a915 	stw	r6,676(sp)
 8032d38:	dac0a715 	stw	r11,668(sp)
 8032d3c:	db00a515 	stw	r12,660(sp)
 8032d40:	db80a415 	stw	r14,656(sp)
 8032d44:	dbc0a615 	stw	r15,664(sp)
 8032d48:	802ef540 	call	802ef54 <__srefill_r>
 8032d4c:	d8c0a817 	ldw	r3,672(sp)
 8032d50:	d980a917 	ldw	r6,676(sp)
 8032d54:	dac0a717 	ldw	r11,668(sp)
 8032d58:	db00a517 	ldw	r12,660(sp)
 8032d5c:	db80a417 	ldw	r14,656(sp)
 8032d60:	dbc0a617 	ldw	r15,664(sp)
 8032d64:	103d1e1e 	bne	r2,zero,80321e0 <__svfscanf_r+0x628>
 8032d68:	e03d181e 	bne	fp,zero,80321cc <__svfscanf_r+0x614>
 8032d6c:	003d1c06 	br	80321e0 <__svfscanf_r+0x628>
 8032d70:	8809883a 	mov	r4,r17
 8032d74:	980b883a 	mov	r5,r19
 8032d78:	d8c0a815 	stw	r3,672(sp)
 8032d7c:	d980a915 	stw	r6,676(sp)
 8032d80:	d9c0a415 	stw	r7,656(sp)
 8032d84:	da40a515 	stw	r9,660(sp)
 8032d88:	802ef540 	call	802ef54 <__srefill_r>
 8032d8c:	d8c0a817 	ldw	r3,672(sp)
 8032d90:	d980a917 	ldw	r6,676(sp)
 8032d94:	d9c0a417 	ldw	r7,656(sp)
 8032d98:	da40a517 	ldw	r9,660(sp)
 8032d9c:	103fbb26 	beq	r2,zero,8032c8c <__svfscanf_r+0x10d4>
 8032da0:	003d6d06 	br	8032358 <__svfscanf_r+0x7a0>
 8032da4:	a429883a 	add	r20,r20,r16
 8032da8:	e73fffc4 	addi	fp,fp,-1
 8032dac:	b000fc1e 	bne	r22,zero,80331a0 <__svfscanf_r+0x15e8>
 8032db0:	ad400104 	addi	r21,r21,4
 8032db4:	0021883a 	mov	r16,zero
 8032db8:	98800117 	ldw	r2,4(r19)
 8032dbc:	00bd8716 	blt	zero,r2,80323dc <__svfscanf_r+0x824>
 8032dc0:	8809883a 	mov	r4,r17
 8032dc4:	980b883a 	mov	r5,r19
 8032dc8:	802ef540 	call	802ef54 <__srefill_r>
 8032dcc:	103d8326 	beq	r2,zero,80323dc <__svfscanf_r+0x824>
 8032dd0:	803caf1e 	bne	r16,zero,8032090 <__svfscanf_r+0x4d8>
 8032dd4:	b03c271e 	bne	r22,zero,8031e74 <__svfscanf_r+0x2bc>
 8032dd8:	d8809e17 	ldw	r2,632(sp)
 8032ddc:	dc009d17 	ldw	r16,628(sp)
 8032de0:	a8000015 	stw	zero,0(r21)
 8032de4:	10800044 	addi	r2,r2,1
 8032de8:	d8809e15 	stw	r2,632(sp)
 8032dec:	800d883a 	mov	r6,r16
 8032df0:	003baa06 	br	8031c9c <__svfscanf_r+0xe4>
 8032df4:	857ca626 	beq	r16,r21,8032090 <__svfscanf_r+0x4d8>
 8032df8:	ac21c83a 	sub	r16,r21,r16
 8032dfc:	803bab26 	beq	r16,zero,8031cac <__svfscanf_r+0xf4>
 8032e00:	d8809e17 	ldw	r2,632(sp)
 8032e04:	a8000005 	stb	zero,0(r21)
 8032e08:	ddc09c15 	stw	r23,624(sp)
 8032e0c:	10800044 	addi	r2,r2,1
 8032e10:	d8809e15 	stw	r2,632(sp)
 8032e14:	003d6106 	br	803239c <__svfscanf_r+0x7e4>
 8032e18:	010000c4 	movi	r4,3
 8032e1c:	113e8526 	beq	r2,r4,8032834 <__svfscanf_r+0xc7c>
 8032e20:	01000144 	movi	r4,5
 8032e24:	113cee1e 	bne	r2,r4,80321e0 <__svfscanf_r+0x628>
 8032e28:	84000044 	addi	r16,r16,1
 8032e2c:	003e4906 	br	8032754 <__svfscanf_r+0xb9c>
 8032e30:	00800084 	movi	r2,2
 8032e34:	30be781e 	bne	r6,r2,8032818 <__svfscanf_r+0xc60>
 8032e38:	018000c4 	movi	r6,3
 8032e3c:	003e4506 	br	8032754 <__svfscanf_r+0xb9c>
 8032e40:	d8c0a017 	ldw	r3,640(sp)
 8032e44:	d9c09f17 	ldw	r7,636(sp)
 8032e48:	8809883a 	mov	r4,r17
 8032e4c:	d9400104 	addi	r5,sp,4
 8032e50:	000d883a 	mov	r6,zero
 8032e54:	a8000005 	stb	zero,0(r21)
 8032e58:	183ee83a 	callr	r3
 8032e5c:	b0c0080c 	andi	r3,r22,32
 8032e60:	1800391e 	bne	r3,zero,8032f48 <__svfscanf_r+0x1390>
 8032e64:	b0c0010c 	andi	r3,r22,4
 8032e68:	1800ac26 	beq	r3,zero,803311c <__svfscanf_r+0x1564>
 8032e6c:	d9409c17 	ldw	r5,624(sp)
 8032e70:	28c00017 	ldw	r3,0(r5)
 8032e74:	29400104 	addi	r5,r5,4
 8032e78:	d9409c15 	stw	r5,624(sp)
 8032e7c:	1880000d 	sth	r2,0(r3)
 8032e80:	d8809e17 	ldw	r2,632(sp)
 8032e84:	10800044 	addi	r2,r2,1
 8032e88:	d8809e15 	stw	r2,632(sp)
 8032e8c:	003d4006 	br	8032390 <__svfscanf_r+0x7d8>
 8032e90:	d8c09c17 	ldw	r3,624(sp)
 8032e94:	98800017 	ldw	r2,0(r19)
 8032e98:	1d400017 	ldw	r21,0(r3)
 8032e9c:	1d800104 	addi	r22,r3,4
 8032ea0:	a821883a 	mov	r16,r21
 8032ea4:	10c00003 	ldbu	r3,0(r2)
 8032ea8:	91400017 	ldw	r5,0(r18)
 8032eac:	28c7883a 	add	r3,r5,r3
 8032eb0:	18c00003 	ldbu	r3,0(r3)
 8032eb4:	18c0020c 	andi	r3,r3,8
 8032eb8:	18c03fcc 	andi	r3,r3,255
 8032ebc:	18c0201c 	xori	r3,r3,128
 8032ec0:	18ffe004 	addi	r3,r3,-128
 8032ec4:	1800121e 	bne	r3,zero,8032f10 <__svfscanf_r+0x1358>
 8032ec8:	98c00117 	ldw	r3,4(r19)
 8032ecc:	10800044 	addi	r2,r2,1
 8032ed0:	84000044 	addi	r16,r16,1
 8032ed4:	18ffffc4 	addi	r3,r3,-1
 8032ed8:	98c00115 	stw	r3,4(r19)
 8032edc:	10ffffc3 	ldbu	r3,-1(r2)
 8032ee0:	e73fffc4 	addi	fp,fp,-1
 8032ee4:	80ffffc5 	stb	r3,-1(r16)
 8032ee8:	98800015 	stw	r2,0(r19)
 8032eec:	e0000826 	beq	fp,zero,8032f10 <__svfscanf_r+0x1358>
 8032ef0:	98c00117 	ldw	r3,4(r19)
 8032ef4:	00ffeb16 	blt	zero,r3,8032ea4 <__svfscanf_r+0x12ec>
 8032ef8:	8809883a 	mov	r4,r17
 8032efc:	980b883a 	mov	r5,r19
 8032f00:	802ef540 	call	802ef54 <__srefill_r>
 8032f04:	1000021e 	bne	r2,zero,8032f10 <__svfscanf_r+0x1358>
 8032f08:	98800017 	ldw	r2,0(r19)
 8032f0c:	003fe506 	br	8032ea4 <__svfscanf_r+0x12ec>
 8032f10:	d8809e17 	ldw	r2,632(sp)
 8032f14:	856bc83a 	sub	r21,r16,r21
 8032f18:	80000005 	stb	zero,0(r16)
 8032f1c:	dc009d17 	ldw	r16,628(sp)
 8032f20:	10800044 	addi	r2,r2,1
 8032f24:	a569883a 	add	r20,r20,r21
 8032f28:	d8809e15 	stw	r2,632(sp)
 8032f2c:	dd809c15 	stw	r22,624(sp)
 8032f30:	800d883a 	mov	r6,r16
 8032f34:	003b5906 	br	8031c9c <__svfscanf_r+0xe4>
 8032f38:	dd409b04 	addi	r21,sp,620
 8032f3c:	003d2506 	br	80323d4 <__svfscanf_r+0x81c>
 8032f40:	002d883a 	mov	r22,zero
 8032f44:	003ba206 	br	8031dd0 <__svfscanf_r+0x218>
 8032f48:	d9009c17 	ldw	r4,624(sp)
 8032f4c:	20c00017 	ldw	r3,0(r4)
 8032f50:	21000104 	addi	r4,r4,4
 8032f54:	d9009c15 	stw	r4,624(sp)
 8032f58:	18800015 	stw	r2,0(r3)
 8032f5c:	003fc806 	br	8032e80 <__svfscanf_r+0x12c8>
 8032f60:	b280008c 	andi	r10,r22,2
 8032f64:	50008126 	beq	r10,zero,803316c <__svfscanf_r+0x15b4>
 8032f68:	d8c09c17 	ldw	r3,624(sp)
 8032f6c:	18800017 	ldw	r2,0(r3)
 8032f70:	18c00104 	addi	r3,r3,4
 8032f74:	d8c09c15 	stw	r3,624(sp)
 8032f78:	15400015 	stw	r21,0(r2)
 8032f7c:	15c00115 	stw	r23,4(r2)
 8032f80:	003cde06 	br	80322fc <__svfscanf_r+0x744>
 8032f84:	00bf1fc4 	movi	r2,-897
 8032f88:	b0ac703a 	and	r22,r22,r2
 8032f8c:	18000226 	beq	r3,zero,8032f98 <__svfscanf_r+0x13e0>
 8032f90:	18ffffc4 	addi	r3,r3,-1
 8032f94:	e7000044 	addi	fp,fp,1
 8032f98:	84000044 	addi	r16,r16,1
 8032f9c:	003f3506 	br	8032c74 <__svfscanf_r+0x10bc>
 8032fa0:	803cfe1e 	bne	r16,zero,803239c <__svfscanf_r+0x7e4>
 8032fa4:	003b4106 	br	8031cac <__svfscanf_r+0xf4>
 8032fa8:	d8c09c17 	ldw	r3,624(sp)
 8032fac:	01400044 	movi	r5,1
 8032fb0:	e00d883a 	mov	r6,fp
 8032fb4:	19000017 	ldw	r4,0(r3)
 8032fb8:	980f883a 	mov	r7,r19
 8032fbc:	802d42c0 	call	802d42c <fread>
 8032fc0:	d9009c17 	ldw	r4,624(sp)
 8032fc4:	20c00104 	addi	r3,r4,4
 8032fc8:	103c3126 	beq	r2,zero,8032090 <__svfscanf_r+0x4d8>
 8032fcc:	1529883a 	add	r20,r2,r20
 8032fd0:	d8809e17 	ldw	r2,632(sp)
 8032fd4:	dc009d17 	ldw	r16,628(sp)
 8032fd8:	d8c09c15 	stw	r3,624(sp)
 8032fdc:	10800044 	addi	r2,r2,1
 8032fe0:	d8809e15 	stw	r2,632(sp)
 8032fe4:	800d883a 	mov	r6,r16
 8032fe8:	003b2c06 	br	8031c9c <__svfscanf_r+0xe4>
 8032fec:	00ffff84 	movi	r3,-2
 8032ff0:	10ff7126 	beq	r2,r3,8032db8 <__svfscanf_r+0x1200>
 8032ff4:	a9000017 	ldw	r4,0(r21)
 8032ff8:	80356300 	call	8035630 <iswspace>
 8032ffc:	103f6926 	beq	r2,zero,8032da4 <__svfscanf_r+0x11ec>
 8033000:	803f7426 	beq	r16,zero,8032dd4 <__svfscanf_r+0x121c>
 8033004:	843fffc4 	addi	r16,r16,-1
 8033008:	d9000104 	addi	r4,sp,4
 803300c:	2405883a 	add	r2,r4,r16
 8033010:	11400003 	ldbu	r5,0(r2)
 8033014:	8809883a 	mov	r4,r17
 8033018:	980d883a 	mov	r6,r19
 803301c:	80397500 	call	8039750 <_ungetc_r>
 8033020:	803ff81e 	bne	r16,zero,8033004 <__svfscanf_r+0x144c>
 8033024:	003f6b06 	br	8032dd4 <__svfscanf_r+0x121c>
 8033028:	99000017 	ldw	r4,0(r19)
 803302c:	1705c83a 	sub	r2,r2,fp
 8033030:	8721883a 	add	r16,r16,fp
 8033034:	2707883a 	add	r3,r4,fp
 8033038:	98800115 	stw	r2,4(r19)
 803303c:	98c00015 	stw	r3,0(r19)
 8033040:	003cd606 	br	803239c <__svfscanf_r+0x7e4>
 8033044:	d880a117 	ldw	r2,644(sp)
 8033048:	000d883a 	mov	r6,zero
 803304c:	8809883a 	mov	r4,r17
 8033050:	11400044 	addi	r5,r2,1
 8033054:	01c00284 	movi	r7,10
 8033058:	8038a380 	call	8038a38 <_strtol_r>
 803305c:	d8c0a317 	ldw	r3,652(sp)
 8033060:	10cdc83a 	sub	r6,r2,r3
 8033064:	d900a117 	ldw	r4,644(sp)
 8033068:	d88055c4 	addi	r2,sp,343
 803306c:	20800236 	bltu	r4,r2,8033078 <__svfscanf_r+0x14c0>
 8033070:	d9005584 	addi	r4,sp,342
 8033074:	d900a115 	stw	r4,644(sp)
 8033078:	d900a117 	ldw	r4,644(sp)
 803307c:	01420134 	movhi	r5,2052
 8033080:	29451a04 	addi	r5,r5,5224
 8033084:	802f2b40 	call	802f2b4 <sprintf>
 8033088:	003c8e06 	br	80322c4 <__svfscanf_r+0x70c>
 803308c:	b32c703a 	and	r22,r22,r12
 8033090:	01800044 	movi	r6,1
 8033094:	003daf06 	br	8032754 <__svfscanf_r+0xb9c>
 8033098:	d8c0a217 	ldw	r3,648(sp)
 803309c:	a8ebc83a 	sub	r21,r21,r3
 80330a0:	054dc83a 	sub	r6,zero,r21
 80330a4:	a83c8726 	beq	r21,zero,80322c4 <__svfscanf_r+0x70c>
 80330a8:	ddc0a115 	stw	r23,644(sp)
 80330ac:	003fed06 	br	8033064 <__svfscanf_r+0x14ac>
 80330b0:	85c00083 	ldbu	r23,2(r16)
 80330b4:	b5800094 	ori	r22,r22,2
 80330b8:	84000084 	addi	r16,r16,2
 80330bc:	003b1e06 	br	8031d38 <__svfscanf_r+0x180>
 80330c0:	b080004c 	andi	r2,r22,1
 80330c4:	10000d1e 	bne	r2,zero,80330fc <__svfscanf_r+0x1544>
 80330c8:	b580008c 	andi	r22,r22,2
 80330cc:	b0000b26 	beq	r22,zero,80330fc <__svfscanf_r+0x1544>
 80330d0:	d8c09c17 	ldw	r3,624(sp)
 80330d4:	d9009c17 	ldw	r4,624(sp)
 80330d8:	dc009d17 	ldw	r16,628(sp)
 80330dc:	18800017 	ldw	r2,0(r3)
 80330e0:	a007d7fa 	srai	r3,r20,31
 80330e4:	21000104 	addi	r4,r4,4
 80330e8:	15000015 	stw	r20,0(r2)
 80330ec:	10c00115 	stw	r3,4(r2)
 80330f0:	d9009c15 	stw	r4,624(sp)
 80330f4:	800d883a 	mov	r6,r16
 80330f8:	003ae806 	br	8031c9c <__svfscanf_r+0xe4>
 80330fc:	d9409c17 	ldw	r5,624(sp)
 8033100:	dc009d17 	ldw	r16,628(sp)
 8033104:	28800017 	ldw	r2,0(r5)
 8033108:	29400104 	addi	r5,r5,4
 803310c:	d9409c15 	stw	r5,624(sp)
 8033110:	15000015 	stw	r20,0(r2)
 8033114:	800d883a 	mov	r6,r16
 8033118:	003ae006 	br	8031c9c <__svfscanf_r+0xe4>
 803311c:	b0c0004c 	andi	r3,r22,1
 8033120:	183f891e 	bne	r3,zero,8032f48 <__svfscanf_r+0x1390>
 8033124:	b580008c 	andi	r22,r22,2
 8033128:	b03f8726 	beq	r22,zero,8032f48 <__svfscanf_r+0x1390>
 803312c:	d940a017 	ldw	r5,640(sp)
 8033130:	00820134 	movhi	r2,2052
 8033134:	10a40104 	addi	r2,r2,-28668
 8033138:	8809883a 	mov	r4,r17
 803313c:	28802626 	beq	r5,r2,80331d8 <__svfscanf_r+0x1620>
 8033140:	d9c09f17 	ldw	r7,636(sp)
 8033144:	d9400104 	addi	r5,sp,4
 8033148:	000d883a 	mov	r6,zero
 803314c:	8038cd40 	call	8038cd4 <_strtoll_r>
 8033150:	d9409c17 	ldw	r5,624(sp)
 8033154:	29000017 	ldw	r4,0(r5)
 8033158:	29400104 	addi	r5,r5,4
 803315c:	d9409c15 	stw	r5,624(sp)
 8033160:	20800015 	stw	r2,0(r4)
 8033164:	20c00115 	stw	r3,4(r4)
 8033168:	003f4506 	br	8032e80 <__svfscanf_r+0x12c8>
 803316c:	d8809c17 	ldw	r2,624(sp)
 8033170:	a809883a 	mov	r4,r21
 8033174:	180b883a 	mov	r5,r3
 8033178:	14000104 	addi	r16,r2,4
 803317c:	15800017 	ldw	r22,0(r2)
 8033180:	80372500 	call	8037250 <__isnand>
 8033184:	1000311e 	bne	r2,zero,803324c <__svfscanf_r+0x1694>
 8033188:	a809883a 	mov	r4,r21
 803318c:	b80b883a 	mov	r5,r23
 8033190:	802bf6c0 	call	802bf6c <__truncdfsf2>
 8033194:	b0800015 	stw	r2,0(r22)
 8033198:	dc009c15 	stw	r16,624(sp)
 803319c:	003c5706 	br	80322fc <__svfscanf_r+0x744>
 80331a0:	0021883a 	mov	r16,zero
 80331a4:	003f0406 	br	8032db8 <__svfscanf_r+0x1200>
 80331a8:	d9400104 	addi	r5,sp,4
 80331ac:	9821883a 	mov	r16,r19
 80331b0:	2dfabe2e 	bgeu	r5,r23,8031cac <__svfscanf_r+0xf4>
 80331b4:	bcbfffc4 	addi	r18,r23,-1
 80331b8:	dcc000c4 	addi	r19,sp,3
 80331bc:	91400007 	ldb	r5,0(r18)
 80331c0:	8809883a 	mov	r4,r17
 80331c4:	94bfffc4 	addi	r18,r18,-1
 80331c8:	800d883a 	mov	r6,r16
 80331cc:	80397500 	call	8039750 <_ungetc_r>
 80331d0:	94fffa1e 	bne	r18,r19,80331bc <__svfscanf_r+0x1604>
 80331d4:	003ab506 	br	8031cac <__svfscanf_r+0xf4>
 80331d8:	d9c09f17 	ldw	r7,636(sp)
 80331dc:	d9400104 	addi	r5,sp,4
 80331e0:	000d883a 	mov	r6,zero
 80331e4:	80392cc0 	call	80392cc <_strtoull_r>
 80331e8:	003fd906 	br	8033150 <__svfscanf_r+0x1598>
 80331ec:	d9000104 	addi	r4,sp,4
 80331f0:	9821883a 	mov	r16,r19
 80331f4:	25faad2e 	bgeu	r4,r23,8031cac <__svfscanf_r+0xf4>
 80331f8:	bcbfffc4 	addi	r18,r23,-1
 80331fc:	dcc000c4 	addi	r19,sp,3
 8033200:	91400007 	ldb	r5,0(r18)
 8033204:	8809883a 	mov	r4,r17
 8033208:	94bfffc4 	addi	r18,r18,-1
 803320c:	800d883a 	mov	r6,r16
 8033210:	80397500 	call	8039750 <_ungetc_r>
 8033214:	94fffa1e 	bne	r18,r19,8033200 <__svfscanf_r+0x1648>
 8033218:	003aa406 	br	8031cac <__svfscanf_r+0xf4>
 803321c:	d8c00104 	addi	r3,sp,4
 8033220:	9821883a 	mov	r16,r19
 8033224:	1dfaa12e 	bgeu	r3,r23,8031cac <__svfscanf_r+0xf4>
 8033228:	bcbfffc4 	addi	r18,r23,-1
 803322c:	dcc000c4 	addi	r19,sp,3
 8033230:	91400007 	ldb	r5,0(r18)
 8033234:	8809883a 	mov	r4,r17
 8033238:	94bfffc4 	addi	r18,r18,-1
 803323c:	800d883a 	mov	r6,r16
 8033240:	80397500 	call	8039750 <_ungetc_r>
 8033244:	94fffa1e 	bne	r18,r19,8033230 <__svfscanf_r+0x1678>
 8033248:	003a9806 	br	8031cac <__svfscanf_r+0xf4>
 803324c:	0009883a 	mov	r4,zero
 8033250:	80373400 	call	8037340 <nanf>
 8033254:	b0800015 	stw	r2,0(r22)
 8033258:	dc009c15 	stw	r16,624(sp)
 803325c:	003c2706 	br	80322fc <__svfscanf_r+0x744>

08033260 <_vfscanf_r>:
 8033260:	defffb04 	addi	sp,sp,-20
 8033264:	dc000315 	stw	r16,12(sp)
 8033268:	dfc00415 	stw	ra,16(sp)
 803326c:	2021883a 	mov	r16,r4
 8033270:	20000926 	beq	r4,zero,8033298 <_vfscanf_r+0x38>
 8033274:	20800e17 	ldw	r2,56(r4)
 8033278:	1000071e 	bne	r2,zero,8033298 <_vfscanf_r+0x38>
 803327c:	d9400015 	stw	r5,0(sp)
 8033280:	d9800115 	stw	r6,4(sp)
 8033284:	d9c00215 	stw	r7,8(sp)
 8033288:	802ce100 	call	802ce10 <__sinit>
 803328c:	d9c00217 	ldw	r7,8(sp)
 8033290:	d9800117 	ldw	r6,4(sp)
 8033294:	d9400017 	ldw	r5,0(sp)
 8033298:	8009883a 	mov	r4,r16
 803329c:	dfc00417 	ldw	ra,16(sp)
 80332a0:	dc000317 	ldw	r16,12(sp)
 80332a4:	dec00504 	addi	sp,sp,20
 80332a8:	8031bb81 	jmpi	8031bb8 <__svfscanf_r>

080332ac <__svfscanf>:
 80332ac:	00820134 	movhi	r2,2052
 80332b0:	108c4504 	addi	r2,r2,12564
 80332b4:	2007883a 	mov	r3,r4
 80332b8:	11000017 	ldw	r4,0(r2)
 80332bc:	2805883a 	mov	r2,r5
 80332c0:	300f883a 	mov	r7,r6
 80332c4:	180b883a 	mov	r5,r3
 80332c8:	100d883a 	mov	r6,r2
 80332cc:	8031bb81 	jmpi	8031bb8 <__svfscanf_r>

080332d0 <vfscanf>:
 80332d0:	defffb04 	addi	sp,sp,-20
 80332d4:	dc000115 	stw	r16,4(sp)
 80332d8:	04020134 	movhi	r16,2052
 80332dc:	840c4504 	addi	r16,r16,12564
 80332e0:	80800017 	ldw	r2,0(r16)
 80332e4:	dc800315 	stw	r18,12(sp)
 80332e8:	dc400215 	stw	r17,8(sp)
 80332ec:	dfc00415 	stw	ra,16(sp)
 80332f0:	2025883a 	mov	r18,r4
 80332f4:	2823883a 	mov	r17,r5
 80332f8:	300f883a 	mov	r7,r6
 80332fc:	10000726 	beq	r2,zero,803331c <vfscanf+0x4c>
 8033300:	10c00e17 	ldw	r3,56(r2)
 8033304:	1800051e 	bne	r3,zero,803331c <vfscanf+0x4c>
 8033308:	1009883a 	mov	r4,r2
 803330c:	d9800015 	stw	r6,0(sp)
 8033310:	802ce100 	call	802ce10 <__sinit>
 8033314:	80800017 	ldw	r2,0(r16)
 8033318:	d9c00017 	ldw	r7,0(sp)
 803331c:	1009883a 	mov	r4,r2
 8033320:	900b883a 	mov	r5,r18
 8033324:	880d883a 	mov	r6,r17
 8033328:	dfc00417 	ldw	ra,16(sp)
 803332c:	dc800317 	ldw	r18,12(sp)
 8033330:	dc400217 	ldw	r17,8(sp)
 8033334:	dc000117 	ldw	r16,4(sp)
 8033338:	dec00504 	addi	sp,sp,20
 803333c:	8031bb81 	jmpi	8031bb8 <__svfscanf_r>

08033340 <_write_r>:
 8033340:	defffd04 	addi	sp,sp,-12
 8033344:	dc400115 	stw	r17,4(sp)
 8033348:	dc000015 	stw	r16,0(sp)
 803334c:	2023883a 	mov	r17,r4
 8033350:	04020134 	movhi	r16,2052
 8033354:	84132904 	addi	r16,r16,19620
 8033358:	2809883a 	mov	r4,r5
 803335c:	300b883a 	mov	r5,r6
 8033360:	380d883a 	mov	r6,r7
 8033364:	dfc00215 	stw	ra,8(sp)
 8033368:	80000015 	stw	zero,0(r16)
 803336c:	803cb840 	call	803cb84 <write>
 8033370:	00ffffc4 	movi	r3,-1
 8033374:	10c00526 	beq	r2,r3,803338c <_write_r+0x4c>
 8033378:	dfc00217 	ldw	ra,8(sp)
 803337c:	dc400117 	ldw	r17,4(sp)
 8033380:	dc000017 	ldw	r16,0(sp)
 8033384:	dec00304 	addi	sp,sp,12
 8033388:	f800283a 	ret
 803338c:	80c00017 	ldw	r3,0(r16)
 8033390:	183ff926 	beq	r3,zero,8033378 <_write_r+0x38>
 8033394:	88c00015 	stw	r3,0(r17)
 8033398:	dfc00217 	ldw	ra,8(sp)
 803339c:	dc400117 	ldw	r17,4(sp)
 80333a0:	dc000017 	ldw	r16,0(sp)
 80333a4:	dec00304 	addi	sp,sp,12
 80333a8:	f800283a 	ret

080333ac <__swsetup_r>:
 80333ac:	00820134 	movhi	r2,2052
 80333b0:	108c4504 	addi	r2,r2,12564
 80333b4:	10800017 	ldw	r2,0(r2)
 80333b8:	defffd04 	addi	sp,sp,-12
 80333bc:	dc400115 	stw	r17,4(sp)
 80333c0:	dc000015 	stw	r16,0(sp)
 80333c4:	dfc00215 	stw	ra,8(sp)
 80333c8:	2023883a 	mov	r17,r4
 80333cc:	2821883a 	mov	r16,r5
 80333d0:	10000226 	beq	r2,zero,80333dc <__swsetup_r+0x30>
 80333d4:	10c00e17 	ldw	r3,56(r2)
 80333d8:	18003d26 	beq	r3,zero,80334d0 <__swsetup_r+0x124>
 80333dc:	8080030b 	ldhu	r2,12(r16)
 80333e0:	10c0020c 	andi	r3,r2,8
 80333e4:	18ffffcc 	andi	r3,r3,65535
 80333e8:	18e0001c 	xori	r3,r3,32768
 80333ec:	18e00004 	addi	r3,r3,-32768
 80333f0:	18001226 	beq	r3,zero,803343c <__swsetup_r+0x90>
 80333f4:	80c00417 	ldw	r3,16(r16)
 80333f8:	18001f26 	beq	r3,zero,8033478 <__swsetup_r+0xcc>
 80333fc:	1100004c 	andi	r4,r2,1
 8033400:	2000261e 	bne	r4,zero,803349c <__swsetup_r+0xf0>
 8033404:	1080008c 	andi	r2,r2,2
 8033408:	10bfffcc 	andi	r2,r2,65535
 803340c:	10a0001c 	xori	r2,r2,32768
 8033410:	10a00004 	addi	r2,r2,-32768
 8033414:	1000311e 	bne	r2,zero,80334dc <__swsetup_r+0x130>
 8033418:	80800517 	ldw	r2,20(r16)
 803341c:	80800215 	stw	r2,8(r16)
 8033420:	18002326 	beq	r3,zero,80334b0 <__swsetup_r+0x104>
 8033424:	0005883a 	mov	r2,zero
 8033428:	dfc00217 	ldw	ra,8(sp)
 803342c:	dc400117 	ldw	r17,4(sp)
 8033430:	dc000017 	ldw	r16,0(sp)
 8033434:	dec00304 	addi	sp,sp,12
 8033438:	f800283a 	ret
 803343c:	10c0040c 	andi	r3,r2,16
 8033440:	18ffffcc 	andi	r3,r3,65535
 8033444:	18e0001c 	xori	r3,r3,32768
 8033448:	18e00004 	addi	r3,r3,-32768
 803344c:	18001e26 	beq	r3,zero,80334c8 <__swsetup_r+0x11c>
 8033450:	10c0010c 	andi	r3,r2,4
 8033454:	18ffffcc 	andi	r3,r3,65535
 8033458:	18e0001c 	xori	r3,r3,32768
 803345c:	18e00004 	addi	r3,r3,-32768
 8033460:	1800211e 	bne	r3,zero,80334e8 <__swsetup_r+0x13c>
 8033464:	80c00417 	ldw	r3,16(r16)
 8033468:	11400214 	ori	r5,r2,8
 803346c:	8140030d 	sth	r5,12(r16)
 8033470:	2805883a 	mov	r2,r5
 8033474:	183fe11e 	bne	r3,zero,80333fc <__swsetup_r+0x50>
 8033478:	1140a00c 	andi	r5,r2,640
 803347c:	01008004 	movi	r4,512
 8033480:	293fde26 	beq	r5,r4,80333fc <__swsetup_r+0x50>
 8033484:	8809883a 	mov	r4,r17
 8033488:	800b883a 	mov	r5,r16
 803348c:	802e25c0 	call	802e25c <__smakebuf_r>
 8033490:	8080030b 	ldhu	r2,12(r16)
 8033494:	80c00417 	ldw	r3,16(r16)
 8033498:	003fd806 	br	80333fc <__swsetup_r+0x50>
 803349c:	80800517 	ldw	r2,20(r16)
 80334a0:	80000215 	stw	zero,8(r16)
 80334a4:	0085c83a 	sub	r2,zero,r2
 80334a8:	80800615 	stw	r2,24(r16)
 80334ac:	183fdd1e 	bne	r3,zero,8033424 <__swsetup_r+0x78>
 80334b0:	8080030b 	ldhu	r2,12(r16)
 80334b4:	1080200c 	andi	r2,r2,128
 80334b8:	10bfffcc 	andi	r2,r2,65535
 80334bc:	10a0001c 	xori	r2,r2,32768
 80334c0:	10a00004 	addi	r2,r2,-32768
 80334c4:	103fd826 	beq	r2,zero,8033428 <__swsetup_r+0x7c>
 80334c8:	00bfffc4 	movi	r2,-1
 80334cc:	003fd606 	br	8033428 <__swsetup_r+0x7c>
 80334d0:	1009883a 	mov	r4,r2
 80334d4:	802ce100 	call	802ce10 <__sinit>
 80334d8:	003fc006 	br	80333dc <__swsetup_r+0x30>
 80334dc:	0005883a 	mov	r2,zero
 80334e0:	80800215 	stw	r2,8(r16)
 80334e4:	003fce06 	br	8033420 <__swsetup_r+0x74>
 80334e8:	81400c17 	ldw	r5,48(r16)
 80334ec:	28000626 	beq	r5,zero,8033508 <__swsetup_r+0x15c>
 80334f0:	80c01004 	addi	r3,r16,64
 80334f4:	28c00326 	beq	r5,r3,8033504 <__swsetup_r+0x158>
 80334f8:	8809883a 	mov	r4,r17
 80334fc:	802d5a80 	call	802d5a8 <_free_r>
 8033500:	8080030b 	ldhu	r2,12(r16)
 8033504:	80000c15 	stw	zero,48(r16)
 8033508:	80c00417 	ldw	r3,16(r16)
 803350c:	013ff6c4 	movi	r4,-37
 8033510:	2084703a 	and	r2,r4,r2
 8033514:	80000115 	stw	zero,4(r16)
 8033518:	80c00015 	stw	r3,0(r16)
 803351c:	003fd206 	br	8033468 <__swsetup_r+0xbc>

08033520 <__call_exitprocs>:
 8033520:	00820134 	movhi	r2,2052
 8033524:	108c4404 	addi	r2,r2,12560
 8033528:	10800017 	ldw	r2,0(r2)
 803352c:	defff304 	addi	sp,sp,-52
 8033530:	df000b15 	stw	fp,44(sp)
 8033534:	d8800015 	stw	r2,0(sp)
 8033538:	10805204 	addi	r2,r2,328
 803353c:	dd400815 	stw	r21,32(sp)
 8033540:	dfc00c15 	stw	ra,48(sp)
 8033544:	ddc00a15 	stw	r23,40(sp)
 8033548:	dd800915 	stw	r22,36(sp)
 803354c:	dd000715 	stw	r20,28(sp)
 8033550:	dcc00615 	stw	r19,24(sp)
 8033554:	dc800515 	stw	r18,20(sp)
 8033558:	dc400415 	stw	r17,16(sp)
 803355c:	dc000315 	stw	r16,12(sp)
 8033560:	d9000115 	stw	r4,4(sp)
 8033564:	2839883a 	mov	fp,r5
 8033568:	d8800215 	stw	r2,8(sp)
 803356c:	057fffc4 	movi	r21,-1
 8033570:	d8800017 	ldw	r2,0(sp)
 8033574:	ddc00217 	ldw	r23,8(sp)
 8033578:	14805217 	ldw	r18,328(r2)
 803357c:	90001726 	beq	r18,zero,80335dc <__call_exitprocs+0xbc>
 8033580:	94400117 	ldw	r17,4(r18)
 8033584:	8c3fffc4 	addi	r16,r17,-1
 8033588:	80001116 	blt	r16,zero,80335d0 <__call_exitprocs+0xb0>
 803358c:	8c400044 	addi	r17,r17,1
 8033590:	8427883a 	add	r19,r16,r16
 8033594:	8c63883a 	add	r17,r17,r17
 8033598:	95802204 	addi	r22,r18,136
 803359c:	9ce7883a 	add	r19,r19,r19
 80335a0:	8c63883a 	add	r17,r17,r17
 80335a4:	b4e7883a 	add	r19,r22,r19
 80335a8:	9463883a 	add	r17,r18,r17
 80335ac:	e0001726 	beq	fp,zero,803360c <__call_exitprocs+0xec>
 80335b0:	8c87c83a 	sub	r3,r17,r18
 80335b4:	b0c7883a 	add	r3,r22,r3
 80335b8:	18c01e17 	ldw	r3,120(r3)
 80335bc:	1f001326 	beq	r3,fp,803360c <__call_exitprocs+0xec>
 80335c0:	843fffc4 	addi	r16,r16,-1
 80335c4:	9cffff04 	addi	r19,r19,-4
 80335c8:	8c7fff04 	addi	r17,r17,-4
 80335cc:	857ff71e 	bne	r16,r21,80335ac <__call_exitprocs+0x8c>
 80335d0:	008200f4 	movhi	r2,2051
 80335d4:	10b90604 	addi	r2,r2,-7144
 80335d8:	10002a1e 	bne	r2,zero,8033684 <__call_exitprocs+0x164>
 80335dc:	dfc00c17 	ldw	ra,48(sp)
 80335e0:	df000b17 	ldw	fp,44(sp)
 80335e4:	ddc00a17 	ldw	r23,40(sp)
 80335e8:	dd800917 	ldw	r22,36(sp)
 80335ec:	dd400817 	ldw	r21,32(sp)
 80335f0:	dd000717 	ldw	r20,28(sp)
 80335f4:	dcc00617 	ldw	r19,24(sp)
 80335f8:	dc800517 	ldw	r18,20(sp)
 80335fc:	dc400417 	ldw	r17,16(sp)
 8033600:	dc000317 	ldw	r16,12(sp)
 8033604:	dec00d04 	addi	sp,sp,52
 8033608:	f800283a 	ret
 803360c:	91000117 	ldw	r4,4(r18)
 8033610:	88c00017 	ldw	r3,0(r17)
 8033614:	213fffc4 	addi	r4,r4,-1
 8033618:	24001526 	beq	r4,r16,8033670 <__call_exitprocs+0x150>
 803361c:	88000015 	stw	zero,0(r17)
 8033620:	183fe726 	beq	r3,zero,80335c0 <__call_exitprocs+0xa0>
 8033624:	00800044 	movi	r2,1
 8033628:	1408983a 	sll	r4,r2,r16
 803362c:	91406217 	ldw	r5,392(r18)
 8033630:	95000117 	ldw	r20,4(r18)
 8033634:	214a703a 	and	r5,r4,r5
 8033638:	28000b26 	beq	r5,zero,8033668 <__call_exitprocs+0x148>
 803363c:	91406317 	ldw	r5,396(r18)
 8033640:	2148703a 	and	r4,r4,r5
 8033644:	20000c1e 	bne	r4,zero,8033678 <__call_exitprocs+0x158>
 8033648:	99400017 	ldw	r5,0(r19)
 803364c:	d9000117 	ldw	r4,4(sp)
 8033650:	183ee83a 	callr	r3
 8033654:	90c00117 	ldw	r3,4(r18)
 8033658:	1d3fc51e 	bne	r3,r20,8033570 <__call_exitprocs+0x50>
 803365c:	b8c00017 	ldw	r3,0(r23)
 8033660:	1cbfd726 	beq	r3,r18,80335c0 <__call_exitprocs+0xa0>
 8033664:	003fc206 	br	8033570 <__call_exitprocs+0x50>
 8033668:	183ee83a 	callr	r3
 803366c:	003ff906 	br	8033654 <__call_exitprocs+0x134>
 8033670:	94000115 	stw	r16,4(r18)
 8033674:	003fea06 	br	8033620 <__call_exitprocs+0x100>
 8033678:	99000017 	ldw	r4,0(r19)
 803367c:	183ee83a 	callr	r3
 8033680:	003ff406 	br	8033654 <__call_exitprocs+0x134>
 8033684:	90c00117 	ldw	r3,4(r18)
 8033688:	1800071e 	bne	r3,zero,80336a8 <__call_exitprocs+0x188>
 803368c:	90c00017 	ldw	r3,0(r18)
 8033690:	18000926 	beq	r3,zero,80336b8 <__call_exitprocs+0x198>
 8033694:	9009883a 	mov	r4,r18
 8033698:	b8c00015 	stw	r3,0(r23)
 803369c:	802e4180 	call	802e418 <free>
 80336a0:	bc800017 	ldw	r18,0(r23)
 80336a4:	003fb506 	br	803357c <__call_exitprocs+0x5c>
 80336a8:	90c00017 	ldw	r3,0(r18)
 80336ac:	902f883a 	mov	r23,r18
 80336b0:	1825883a 	mov	r18,r3
 80336b4:	003fb106 	br	803357c <__call_exitprocs+0x5c>
 80336b8:	0007883a 	mov	r3,zero
 80336bc:	003ffb06 	br	80336ac <__call_exitprocs+0x18c>

080336c0 <_close_r>:
 80336c0:	defffd04 	addi	sp,sp,-12
 80336c4:	dc400115 	stw	r17,4(sp)
 80336c8:	dc000015 	stw	r16,0(sp)
 80336cc:	2023883a 	mov	r17,r4
 80336d0:	04020134 	movhi	r16,2052
 80336d4:	84132904 	addi	r16,r16,19620
 80336d8:	2809883a 	mov	r4,r5
 80336dc:	dfc00215 	stw	ra,8(sp)
 80336e0:	80000015 	stw	zero,0(r16)
 80336e4:	803bda00 	call	803bda0 <close>
 80336e8:	00ffffc4 	movi	r3,-1
 80336ec:	10c00526 	beq	r2,r3,8033704 <_close_r+0x44>
 80336f0:	dfc00217 	ldw	ra,8(sp)
 80336f4:	dc400117 	ldw	r17,4(sp)
 80336f8:	dc000017 	ldw	r16,0(sp)
 80336fc:	dec00304 	addi	sp,sp,12
 8033700:	f800283a 	ret
 8033704:	80c00017 	ldw	r3,0(r16)
 8033708:	183ff926 	beq	r3,zero,80336f0 <_close_r+0x30>
 803370c:	88c00015 	stw	r3,0(r17)
 8033710:	dfc00217 	ldw	ra,8(sp)
 8033714:	dc400117 	ldw	r17,4(sp)
 8033718:	dc000017 	ldw	r16,0(sp)
 803371c:	dec00304 	addi	sp,sp,12
 8033720:	f800283a 	ret

08033724 <quorem>:
 8033724:	defff204 	addi	sp,sp,-56
 8033728:	dd000815 	stw	r20,32(sp)
 803372c:	20800417 	ldw	r2,16(r4)
 8033730:	2d000417 	ldw	r20,16(r5)
 8033734:	dcc00715 	stw	r19,28(sp)
 8033738:	dfc00d15 	stw	ra,52(sp)
 803373c:	df000c15 	stw	fp,48(sp)
 8033740:	ddc00b15 	stw	r23,44(sp)
 8033744:	dd800a15 	stw	r22,40(sp)
 8033748:	dd400915 	stw	r21,36(sp)
 803374c:	dc800615 	stw	r18,24(sp)
 8033750:	dc400515 	stw	r17,20(sp)
 8033754:	dc000415 	stw	r16,16(sp)
 8033758:	d9400015 	stw	r5,0(sp)
 803375c:	2027883a 	mov	r19,r4
 8033760:	15007d16 	blt	r2,r20,8033958 <quorem+0x234>
 8033764:	a0800104 	addi	r2,r20,4
 8033768:	1085883a 	add	r2,r2,r2
 803376c:	1085883a 	add	r2,r2,r2
 8033770:	28ad883a 	add	r22,r5,r2
 8033774:	2085883a 	add	r2,r4,r2
 8033778:	10800017 	ldw	r2,0(r2)
 803377c:	b1400017 	ldw	r5,0(r22)
 8033780:	a53fffc4 	addi	r20,r20,-1
 8033784:	1009883a 	mov	r4,r2
 8033788:	29400044 	addi	r5,r5,1
 803378c:	d8800115 	stw	r2,4(sp)
 8033790:	802c2080 	call	802c208 <__udivsi3>
 8033794:	1025883a 	mov	r18,r2
 8033798:	d8800017 	ldw	r2,0(sp)
 803379c:	9f000504 	addi	fp,r19,20
 80337a0:	14000504 	addi	r16,r2,20
 80337a4:	90003626 	beq	r18,zero,8033880 <quorem+0x15c>
 80337a8:	802b883a 	mov	r21,r16
 80337ac:	e023883a 	mov	r17,fp
 80337b0:	0007883a 	mov	r3,zero
 80337b4:	002f883a 	mov	r23,zero
 80337b8:	a9800017 	ldw	r6,0(r21)
 80337bc:	900b883a 	mov	r5,r18
 80337c0:	d8c00315 	stw	r3,12(sp)
 80337c4:	313fffcc 	andi	r4,r6,65535
 80337c8:	d9800215 	stw	r6,8(sp)
 80337cc:	802c2180 	call	802c218 <__mulsi3>
 80337d0:	d9800217 	ldw	r6,8(sp)
 80337d4:	d8c00317 	ldw	r3,12(sp)
 80337d8:	900b883a 	mov	r5,r18
 80337dc:	3008d43a 	srli	r4,r6,16
 80337e0:	1887883a 	add	r3,r3,r2
 80337e4:	d8c00315 	stw	r3,12(sp)
 80337e8:	802c2180 	call	802c218 <__mulsi3>
 80337ec:	89400017 	ldw	r5,0(r17)
 80337f0:	d8c00317 	ldw	r3,12(sp)
 80337f4:	ad400104 	addi	r21,r21,4
 80337f8:	293fffcc 	andi	r4,r5,65535
 80337fc:	1810d43a 	srli	r8,r3,16
 8033800:	25c9883a 	add	r4,r4,r23
 8033804:	18ffffcc 	andi	r3,r3,65535
 8033808:	20c9c83a 	sub	r4,r4,r3
 803380c:	280cd43a 	srli	r6,r5,16
 8033810:	4085883a 	add	r2,r8,r2
 8033814:	2007d43a 	srai	r3,r4,16
 8033818:	117fffcc 	andi	r5,r2,65535
 803381c:	314bc83a 	sub	r5,r6,r5
 8033820:	28cb883a 	add	r5,r5,r3
 8033824:	8940008d 	sth	r5,2(r17)
 8033828:	8900000d 	sth	r4,0(r17)
 803382c:	1006d43a 	srli	r3,r2,16
 8033830:	282fd43a 	srai	r23,r5,16
 8033834:	8c400104 	addi	r17,r17,4
 8033838:	b57fdf2e 	bgeu	r22,r21,80337b8 <quorem+0x94>
 803383c:	d8c00117 	ldw	r3,4(sp)
 8033840:	18000f1e 	bne	r3,zero,8033880 <quorem+0x15c>
 8033844:	a0800144 	addi	r2,r20,5
 8033848:	1085883a 	add	r2,r2,r2
 803384c:	1085883a 	add	r2,r2,r2
 8033850:	9887883a 	add	r3,r19,r2
 8033854:	18bfff04 	addi	r2,r3,-4
 8033858:	e080082e 	bgeu	fp,r2,803387c <quorem+0x158>
 803385c:	18ffff17 	ldw	r3,-4(r3)
 8033860:	18000326 	beq	r3,zero,8033870 <quorem+0x14c>
 8033864:	00000506 	br	803387c <quorem+0x158>
 8033868:	10c00017 	ldw	r3,0(r2)
 803386c:	1800031e 	bne	r3,zero,803387c <quorem+0x158>
 8033870:	10bfff04 	addi	r2,r2,-4
 8033874:	a53fffc4 	addi	r20,r20,-1
 8033878:	e0bffb36 	bltu	fp,r2,8033868 <quorem+0x144>
 803387c:	9d000415 	stw	r20,16(r19)
 8033880:	d9400017 	ldw	r5,0(sp)
 8033884:	9809883a 	mov	r4,r19
 8033888:	80364680 	call	8036468 <__mcmp>
 803388c:	10002516 	blt	r2,zero,8033924 <quorem+0x200>
 8033890:	94800044 	addi	r18,r18,1
 8033894:	e007883a 	mov	r3,fp
 8033898:	000d883a 	mov	r6,zero
 803389c:	18800017 	ldw	r2,0(r3)
 80338a0:	82000017 	ldw	r8,0(r16)
 80338a4:	84000104 	addi	r16,r16,4
 80338a8:	11ffffcc 	andi	r7,r2,65535
 80338ac:	413fffcc 	andi	r4,r8,65535
 80338b0:	398d883a 	add	r6,r7,r6
 80338b4:	310fc83a 	sub	r7,r6,r4
 80338b8:	4010d43a 	srli	r8,r8,16
 80338bc:	100cd43a 	srli	r6,r2,16
 80338c0:	3809d43a 	srai	r4,r7,16
 80338c4:	19c0000d 	sth	r7,0(r3)
 80338c8:	320dc83a 	sub	r6,r6,r8
 80338cc:	310d883a 	add	r6,r6,r4
 80338d0:	1980008d 	sth	r6,2(r3)
 80338d4:	300dd43a 	srai	r6,r6,16
 80338d8:	18c00104 	addi	r3,r3,4
 80338dc:	b43fef2e 	bgeu	r22,r16,803389c <quorem+0x178>
 80338e0:	a0800144 	addi	r2,r20,5
 80338e4:	1085883a 	add	r2,r2,r2
 80338e8:	1085883a 	add	r2,r2,r2
 80338ec:	9885883a 	add	r2,r19,r2
 80338f0:	10c00017 	ldw	r3,0(r2)
 80338f4:	18000b1e 	bne	r3,zero,8033924 <quorem+0x200>
 80338f8:	10ffff04 	addi	r3,r2,-4
 80338fc:	e0c0082e 	bgeu	fp,r3,8033920 <quorem+0x1fc>
 8033900:	10bfff17 	ldw	r2,-4(r2)
 8033904:	10000326 	beq	r2,zero,8033914 <quorem+0x1f0>
 8033908:	00000506 	br	8033920 <quorem+0x1fc>
 803390c:	18800017 	ldw	r2,0(r3)
 8033910:	1000031e 	bne	r2,zero,8033920 <quorem+0x1fc>
 8033914:	18ffff04 	addi	r3,r3,-4
 8033918:	a53fffc4 	addi	r20,r20,-1
 803391c:	e0fffb36 	bltu	fp,r3,803390c <quorem+0x1e8>
 8033920:	9d000415 	stw	r20,16(r19)
 8033924:	9005883a 	mov	r2,r18
 8033928:	dfc00d17 	ldw	ra,52(sp)
 803392c:	df000c17 	ldw	fp,48(sp)
 8033930:	ddc00b17 	ldw	r23,44(sp)
 8033934:	dd800a17 	ldw	r22,40(sp)
 8033938:	dd400917 	ldw	r21,36(sp)
 803393c:	dd000817 	ldw	r20,32(sp)
 8033940:	dcc00717 	ldw	r19,28(sp)
 8033944:	dc800617 	ldw	r18,24(sp)
 8033948:	dc400517 	ldw	r17,20(sp)
 803394c:	dc000417 	ldw	r16,16(sp)
 8033950:	dec00e04 	addi	sp,sp,56
 8033954:	f800283a 	ret
 8033958:	0005883a 	mov	r2,zero
 803395c:	003ff206 	br	8033928 <quorem+0x204>

08033960 <_dtoa_r>:
 8033960:	20801017 	ldw	r2,64(r4)
 8033964:	deffdf04 	addi	sp,sp,-132
 8033968:	dcc01a15 	stw	r19,104(sp)
 803396c:	dc801915 	stw	r18,100(sp)
 8033970:	dc401815 	stw	r17,96(sp)
 8033974:	dc001715 	stw	r16,92(sp)
 8033978:	dfc02015 	stw	ra,128(sp)
 803397c:	df001f15 	stw	fp,124(sp)
 8033980:	ddc01e15 	stw	r23,120(sp)
 8033984:	dd801d15 	stw	r22,116(sp)
 8033988:	dd401c15 	stw	r21,112(sp)
 803398c:	dd001b15 	stw	r20,108(sp)
 8033990:	d9400315 	stw	r5,12(sp)
 8033994:	d9c00415 	stw	r7,16(sp)
 8033998:	2021883a 	mov	r16,r4
 803399c:	3025883a 	mov	r18,r6
 80339a0:	dcc02317 	ldw	r19,140(sp)
 80339a4:	3023883a 	mov	r17,r6
 80339a8:	10000826 	beq	r2,zero,80339cc <_dtoa_r+0x6c>
 80339ac:	20c01117 	ldw	r3,68(r4)
 80339b0:	01800044 	movi	r6,1
 80339b4:	100b883a 	mov	r5,r2
 80339b8:	30cc983a 	sll	r6,r6,r3
 80339bc:	10c00115 	stw	r3,4(r2)
 80339c0:	11800215 	stw	r6,8(r2)
 80339c4:	8035bc40 	call	8035bc4 <_Bfree>
 80339c8:	80001015 	stw	zero,64(r16)
 80339cc:	90002f16 	blt	r18,zero,8033a8c <_dtoa_r+0x12c>
 80339d0:	98000015 	stw	zero,0(r19)
 80339d4:	90dffc2c 	andhi	r3,r18,32752
 80339d8:	009ffc34 	movhi	r2,32752
 80339dc:	18801c26 	beq	r3,r2,8033a50 <_dtoa_r+0xf0>
 80339e0:	d9000317 	ldw	r4,12(sp)
 80339e4:	880b883a 	mov	r5,r17
 80339e8:	000d883a 	mov	r6,zero
 80339ec:	000f883a 	mov	r7,zero
 80339f0:	803b7e40 	call	803b7e4 <__eqdf2>
 80339f4:	10002c1e 	bne	r2,zero,8033aa8 <_dtoa_r+0x148>
 80339f8:	d9002217 	ldw	r4,136(sp)
 80339fc:	d9c02417 	ldw	r7,144(sp)
 8033a00:	00800044 	movi	r2,1
 8033a04:	20800015 	stw	r2,0(r4)
 8033a08:	38019426 	beq	r7,zero,803405c <_dtoa_r+0x6fc>
 8033a0c:	00820134 	movhi	r2,2052
 8033a10:	10851144 	addi	r2,r2,5189
 8033a14:	38800015 	stw	r2,0(r7)
 8033a18:	15ffffc4 	addi	r23,r2,-1
 8033a1c:	b805883a 	mov	r2,r23
 8033a20:	dfc02017 	ldw	ra,128(sp)
 8033a24:	df001f17 	ldw	fp,124(sp)
 8033a28:	ddc01e17 	ldw	r23,120(sp)
 8033a2c:	dd801d17 	ldw	r22,116(sp)
 8033a30:	dd401c17 	ldw	r21,112(sp)
 8033a34:	dd001b17 	ldw	r20,108(sp)
 8033a38:	dcc01a17 	ldw	r19,104(sp)
 8033a3c:	dc801917 	ldw	r18,100(sp)
 8033a40:	dc401817 	ldw	r17,96(sp)
 8033a44:	dc001717 	ldw	r16,92(sp)
 8033a48:	dec02104 	addi	sp,sp,132
 8033a4c:	f800283a 	ret
 8033a50:	d8c02217 	ldw	r3,136(sp)
 8033a54:	d9000317 	ldw	r4,12(sp)
 8033a58:	0089c3c4 	movi	r2,9999
 8033a5c:	18800015 	stw	r2,0(r3)
 8033a60:	20016c26 	beq	r4,zero,8034014 <_dtoa_r+0x6b4>
 8033a64:	05c20134 	movhi	r23,2052
 8033a68:	bdc52704 	addi	r23,r23,5276
 8033a6c:	d9c02417 	ldw	r7,144(sp)
 8033a70:	383fea26 	beq	r7,zero,8033a1c <_dtoa_r+0xbc>
 8033a74:	b88000c7 	ldb	r2,3(r23)
 8033a78:	10016d1e 	bne	r2,zero,8034030 <_dtoa_r+0x6d0>
 8033a7c:	b88000c4 	addi	r2,r23,3
 8033a80:	d8c02417 	ldw	r3,144(sp)
 8033a84:	18800015 	stw	r2,0(r3)
 8033a88:	003fe406 	br	8033a1c <_dtoa_r+0xbc>
 8033a8c:	04600034 	movhi	r17,32768
 8033a90:	8c7fffc4 	addi	r17,r17,-1
 8033a94:	9462703a 	and	r17,r18,r17
 8033a98:	00800044 	movi	r2,1
 8033a9c:	98800015 	stw	r2,0(r19)
 8033aa0:	8825883a 	mov	r18,r17
 8033aa4:	003fcb06 	br	80339d4 <_dtoa_r+0x74>
 8033aa8:	d9400317 	ldw	r5,12(sp)
 8033aac:	9028d53a 	srli	r20,r18,20
 8033ab0:	d8800204 	addi	r2,sp,8
 8033ab4:	d8800015 	stw	r2,0(sp)
 8033ab8:	8009883a 	mov	r4,r16
 8033abc:	880d883a 	mov	r6,r17
 8033ac0:	d9c00104 	addi	r7,sp,4
 8033ac4:	80368100 	call	8036810 <__d2b>
 8033ac8:	a501ffcc 	andi	r20,r20,2047
 8033acc:	1039883a 	mov	fp,r2
 8033ad0:	a001591e 	bne	r20,zero,8034038 <_dtoa_r+0x6d8>
 8033ad4:	dd400217 	ldw	r21,8(sp)
 8033ad8:	dd000117 	ldw	r20,4(sp)
 8033adc:	00befbc4 	movi	r2,-1041
 8033ae0:	ad29883a 	add	r20,r21,r20
 8033ae4:	a082d216 	blt	r20,r2,8034630 <_dtoa_r+0xcd0>
 8033ae8:	d8c00317 	ldw	r3,12(sp)
 8033aec:	013f0384 	movi	r4,-1010
 8033af0:	2509c83a 	sub	r4,r4,r20
 8033af4:	a0810484 	addi	r2,r20,1042
 8033af8:	9124983a 	sll	r18,r18,r4
 8033afc:	1884d83a 	srl	r2,r3,r2
 8033b00:	9088b03a 	or	r4,r18,r2
 8033b04:	802bfcc0 	call	802bfcc <__floatunsidf>
 8033b08:	1009883a 	mov	r4,r2
 8033b0c:	017f8434 	movhi	r5,65040
 8033b10:	00800044 	movi	r2,1
 8033b14:	194b883a 	add	r5,r3,r5
 8033b18:	a53fffc4 	addi	r20,r20,-1
 8033b1c:	d8800f15 	stw	r2,60(sp)
 8033b20:	000d883a 	mov	r6,zero
 8033b24:	01cffe34 	movhi	r7,16376
 8033b28:	803b7840 	call	803b784 <__subdf3>
 8033b2c:	1009883a 	mov	r4,r2
 8033b30:	180b883a 	mov	r5,r3
 8033b34:	0198dbf4 	movhi	r6,25455
 8033b38:	3190d844 	addi	r6,r6,17249
 8033b3c:	01cff4f4 	movhi	r7,16339
 8033b40:	39e1e9c4 	addi	r7,r7,-30809
 8033b44:	802bad40 	call	802bad4 <__muldf3>
 8033b48:	180b883a 	mov	r5,r3
 8033b4c:	01a2d874 	movhi	r6,35681
 8033b50:	31b22cc4 	addi	r6,r6,-14157
 8033b54:	01cff1f4 	movhi	r7,16327
 8033b58:	39e28a04 	addi	r7,r7,-30168
 8033b5c:	1009883a 	mov	r4,r2
 8033b60:	803b7300 	call	803b730 <__adddf3>
 8033b64:	a009883a 	mov	r4,r20
 8033b68:	1027883a 	mov	r19,r2
 8033b6c:	1825883a 	mov	r18,r3
 8033b70:	803ba1c0 	call	803ba1c <__floatsidf>
 8033b74:	1009883a 	mov	r4,r2
 8033b78:	180b883a 	mov	r5,r3
 8033b7c:	019427f4 	movhi	r6,20639
 8033b80:	319e7ec4 	addi	r6,r6,31227
 8033b84:	01cff4f4 	movhi	r7,16339
 8033b88:	39d104c4 	addi	r7,r7,17427
 8033b8c:	802bad40 	call	802bad4 <__muldf3>
 8033b90:	9809883a 	mov	r4,r19
 8033b94:	900b883a 	mov	r5,r18
 8033b98:	100d883a 	mov	r6,r2
 8033b9c:	180f883a 	mov	r7,r3
 8033ba0:	803b7300 	call	803b730 <__adddf3>
 8033ba4:	1009883a 	mov	r4,r2
 8033ba8:	180b883a 	mov	r5,r3
 8033bac:	1027883a 	mov	r19,r2
 8033bb0:	1825883a 	mov	r18,r3
 8033bb4:	803baf00 	call	803baf0 <__fixdfsi>
 8033bb8:	9809883a 	mov	r4,r19
 8033bbc:	900b883a 	mov	r5,r18
 8033bc0:	000d883a 	mov	r6,zero
 8033bc4:	000f883a 	mov	r7,zero
 8033bc8:	d8800615 	stw	r2,24(sp)
 8033bcc:	803b9640 	call	803b964 <__ltdf2>
 8033bd0:	10027e16 	blt	r2,zero,80345cc <_dtoa_r+0xc6c>
 8033bd4:	d8c00617 	ldw	r3,24(sp)
 8033bd8:	00800584 	movi	r2,22
 8033bdc:	10c26c36 	bltu	r2,r3,8034590 <_dtoa_r+0xc30>
 8033be0:	180490fa 	slli	r2,r3,3
 8033be4:	00c20134 	movhi	r3,2052
 8033be8:	18c54c04 	addi	r3,r3,5424
 8033bec:	d9800317 	ldw	r6,12(sp)
 8033bf0:	1885883a 	add	r2,r3,r2
 8033bf4:	11000017 	ldw	r4,0(r2)
 8033bf8:	11400117 	ldw	r5,4(r2)
 8033bfc:	880f883a 	mov	r7,r17
 8033c00:	803b89c0 	call	803b89c <__gtdf2>
 8033c04:	00828f0e 	bge	zero,r2,8034644 <_dtoa_r+0xce4>
 8033c08:	d8800617 	ldw	r2,24(sp)
 8033c0c:	d8000d15 	stw	zero,52(sp)
 8033c10:	10bfffc4 	addi	r2,r2,-1
 8033c14:	d8800615 	stw	r2,24(sp)
 8033c18:	ad29c83a 	sub	r20,r21,r20
 8033c1c:	a53fffc4 	addi	r20,r20,-1
 8033c20:	a0026616 	blt	r20,zero,80345bc <_dtoa_r+0xc5c>
 8033c24:	dd000715 	stw	r20,28(sp)
 8033c28:	d8000815 	stw	zero,32(sp)
 8033c2c:	d8800617 	ldw	r2,24(sp)
 8033c30:	10025a16 	blt	r2,zero,803459c <_dtoa_r+0xc3c>
 8033c34:	d8c00717 	ldw	r3,28(sp)
 8033c38:	d8800b15 	stw	r2,44(sp)
 8033c3c:	d8000a15 	stw	zero,40(sp)
 8033c40:	1887883a 	add	r3,r3,r2
 8033c44:	d8c00715 	stw	r3,28(sp)
 8033c48:	d9c00417 	ldw	r7,16(sp)
 8033c4c:	00800244 	movi	r2,9
 8033c50:	11c10536 	bltu	r2,r7,8034068 <_dtoa_r+0x708>
 8033c54:	00800144 	movi	r2,5
 8033c58:	11c4c60e 	bge	r2,r7,8034f74 <_dtoa_r+0x1614>
 8033c5c:	39ffff04 	addi	r7,r7,-4
 8033c60:	d9c00415 	stw	r7,16(sp)
 8033c64:	0027883a 	mov	r19,zero
 8033c68:	d9c00417 	ldw	r7,16(sp)
 8033c6c:	008000c4 	movi	r2,3
 8033c70:	3883a226 	beq	r7,r2,8034afc <_dtoa_r+0x119c>
 8033c74:	11c2bc16 	blt	r2,r7,8034768 <_dtoa_r+0xe08>
 8033c78:	00800084 	movi	r2,2
 8033c7c:	3880fb1e 	bne	r7,r2,803406c <_dtoa_r+0x70c>
 8033c80:	d8000c15 	stw	zero,48(sp)
 8033c84:	d9002117 	ldw	r4,132(sp)
 8033c88:	0103ae0e 	bge	zero,r4,8034b44 <_dtoa_r+0x11e4>
 8033c8c:	2025883a 	mov	r18,r4
 8033c90:	d9000e15 	stw	r4,56(sp)
 8033c94:	d9000915 	stw	r4,36(sp)
 8033c98:	80001115 	stw	zero,68(r16)
 8033c9c:	008005c4 	movi	r2,23
 8033ca0:	1484b22e 	bgeu	r2,r18,8034f6c <_dtoa_r+0x160c>
 8033ca4:	00c00044 	movi	r3,1
 8033ca8:	00800104 	movi	r2,4
 8033cac:	1085883a 	add	r2,r2,r2
 8033cb0:	11000504 	addi	r4,r2,20
 8033cb4:	180b883a 	mov	r5,r3
 8033cb8:	18c00044 	addi	r3,r3,1
 8033cbc:	913ffb2e 	bgeu	r18,r4,8033cac <_dtoa_r+0x34c>
 8033cc0:	81401115 	stw	r5,68(r16)
 8033cc4:	8009883a 	mov	r4,r16
 8033cc8:	8035b1c0 	call	8035b1c <_Balloc>
 8033ccc:	102f883a 	mov	r23,r2
 8033cd0:	80801015 	stw	r2,64(r16)
 8033cd4:	00800384 	movi	r2,14
 8033cd8:	1480f036 	bltu	r2,r18,803409c <_dtoa_r+0x73c>
 8033cdc:	9800ef26 	beq	r19,zero,803409c <_dtoa_r+0x73c>
 8033ce0:	d8800617 	ldw	r2,24(sp)
 8033ce4:	00839c0e 	bge	zero,r2,8034b58 <_dtoa_r+0x11f8>
 8033ce8:	d8c00617 	ldw	r3,24(sp)
 8033cec:	108003cc 	andi	r2,r2,15
 8033cf0:	100490fa 	slli	r2,r2,3
 8033cf4:	182bd13a 	srai	r21,r3,4
 8033cf8:	00c20134 	movhi	r3,2052
 8033cfc:	18c54c04 	addi	r3,r3,5424
 8033d00:	1885883a 	add	r2,r3,r2
 8033d04:	a8c0040c 	andi	r3,r21,16
 8033d08:	12800017 	ldw	r10,0(r2)
 8033d0c:	15800117 	ldw	r22,4(r2)
 8033d10:	18038726 	beq	r3,zero,8034b30 <_dtoa_r+0x11d0>
 8033d14:	00820134 	movhi	r2,2052
 8033d18:	10854204 	addi	r2,r2,5384
 8033d1c:	11800817 	ldw	r6,32(r2)
 8033d20:	11c00917 	ldw	r7,36(r2)
 8033d24:	d9000317 	ldw	r4,12(sp)
 8033d28:	880b883a 	mov	r5,r17
 8033d2c:	da801515 	stw	r10,84(sp)
 8033d30:	802bdb80 	call	802bdb8 <__divdf3>
 8033d34:	da801517 	ldw	r10,84(sp)
 8033d38:	d8801015 	stw	r2,64(sp)
 8033d3c:	1829883a 	mov	r20,r3
 8033d40:	ad4003cc 	andi	r21,r21,15
 8033d44:	048000c4 	movi	r18,3
 8033d48:	a8001126 	beq	r21,zero,8033d90 <_dtoa_r+0x430>
 8033d4c:	04c20134 	movhi	r19,2052
 8033d50:	9cc54204 	addi	r19,r19,5384
 8033d54:	5005883a 	mov	r2,r10
 8033d58:	b007883a 	mov	r3,r22
 8033d5c:	a980004c 	andi	r6,r21,1
 8033d60:	1009883a 	mov	r4,r2
 8033d64:	a82bd07a 	srai	r21,r21,1
 8033d68:	180b883a 	mov	r5,r3
 8033d6c:	30000426 	beq	r6,zero,8033d80 <_dtoa_r+0x420>
 8033d70:	99800017 	ldw	r6,0(r19)
 8033d74:	99c00117 	ldw	r7,4(r19)
 8033d78:	94800044 	addi	r18,r18,1
 8033d7c:	802bad40 	call	802bad4 <__muldf3>
 8033d80:	9cc00204 	addi	r19,r19,8
 8033d84:	a83ff51e 	bne	r21,zero,8033d5c <_dtoa_r+0x3fc>
 8033d88:	1015883a 	mov	r10,r2
 8033d8c:	182d883a 	mov	r22,r3
 8033d90:	d9001017 	ldw	r4,64(sp)
 8033d94:	a00b883a 	mov	r5,r20
 8033d98:	500d883a 	mov	r6,r10
 8033d9c:	b00f883a 	mov	r7,r22
 8033da0:	802bdb80 	call	802bdb8 <__divdf3>
 8033da4:	1027883a 	mov	r19,r2
 8033da8:	1829883a 	mov	r20,r3
 8033dac:	d8c00d17 	ldw	r3,52(sp)
 8033db0:	18000626 	beq	r3,zero,8033dcc <_dtoa_r+0x46c>
 8033db4:	9809883a 	mov	r4,r19
 8033db8:	a00b883a 	mov	r5,r20
 8033dbc:	000d883a 	mov	r6,zero
 8033dc0:	01cffc34 	movhi	r7,16368
 8033dc4:	803b9640 	call	803b964 <__ltdf2>
 8033dc8:	10040e16 	blt	r2,zero,8034e04 <_dtoa_r+0x14a4>
 8033dcc:	9009883a 	mov	r4,r18
 8033dd0:	803ba1c0 	call	803ba1c <__floatsidf>
 8033dd4:	1009883a 	mov	r4,r2
 8033dd8:	180b883a 	mov	r5,r3
 8033ddc:	980d883a 	mov	r6,r19
 8033de0:	a00f883a 	mov	r7,r20
 8033de4:	802bad40 	call	802bad4 <__muldf3>
 8033de8:	1009883a 	mov	r4,r2
 8033dec:	180b883a 	mov	r5,r3
 8033df0:	000d883a 	mov	r6,zero
 8033df4:	01d00734 	movhi	r7,16412
 8033df8:	803b7300 	call	803b730 <__adddf3>
 8033dfc:	057f3034 	movhi	r21,64704
 8033e00:	1d6b883a 	add	r21,r3,r21
 8033e04:	d8c00917 	ldw	r3,36(sp)
 8033e08:	1025883a 	mov	r18,r2
 8033e0c:	18031f26 	beq	r3,zero,8034a8c <_dtoa_r+0x112c>
 8033e10:	d8800617 	ldw	r2,24(sp)
 8033e14:	dac00917 	ldw	r11,36(sp)
 8033e18:	d8801315 	stw	r2,76(sp)
 8033e1c:	d8c00c17 	ldw	r3,48(sp)
 8033e20:	18039026 	beq	r3,zero,8034c64 <_dtoa_r+0x1304>
 8033e24:	58bfffc4 	addi	r2,r11,-1
 8033e28:	100490fa 	slli	r2,r2,3
 8033e2c:	00c20134 	movhi	r3,2052
 8033e30:	18c54c04 	addi	r3,r3,5424
 8033e34:	0009883a 	mov	r4,zero
 8033e38:	1885883a 	add	r2,r3,r2
 8033e3c:	11800017 	ldw	r6,0(r2)
 8033e40:	11c00117 	ldw	r7,4(r2)
 8033e44:	014ff834 	movhi	r5,16352
 8033e48:	dac01615 	stw	r11,88(sp)
 8033e4c:	802bdb80 	call	802bdb8 <__divdf3>
 8033e50:	900d883a 	mov	r6,r18
 8033e54:	a80f883a 	mov	r7,r21
 8033e58:	1009883a 	mov	r4,r2
 8033e5c:	180b883a 	mov	r5,r3
 8033e60:	803b7840 	call	803b784 <__subdf3>
 8033e64:	a00b883a 	mov	r5,r20
 8033e68:	9809883a 	mov	r4,r19
 8033e6c:	182b883a 	mov	r21,r3
 8033e70:	d8801015 	stw	r2,64(sp)
 8033e74:	803baf00 	call	803baf0 <__fixdfsi>
 8033e78:	1009883a 	mov	r4,r2
 8033e7c:	d8801515 	stw	r2,84(sp)
 8033e80:	803ba1c0 	call	803ba1c <__floatsidf>
 8033e84:	9809883a 	mov	r4,r19
 8033e88:	a00b883a 	mov	r5,r20
 8033e8c:	100d883a 	mov	r6,r2
 8033e90:	180f883a 	mov	r7,r3
 8033e94:	803b7840 	call	803b784 <__subdf3>
 8033e98:	da401517 	ldw	r9,84(sp)
 8033e9c:	d9001017 	ldw	r4,64(sp)
 8033ea0:	a80b883a 	mov	r5,r21
 8033ea4:	4d000c04 	addi	r20,r9,48
 8033ea8:	bd000005 	stb	r20,0(r23)
 8033eac:	100d883a 	mov	r6,r2
 8033eb0:	180f883a 	mov	r7,r3
 8033eb4:	bd800044 	addi	r22,r23,1
 8033eb8:	1025883a 	mov	r18,r2
 8033ebc:	1827883a 	mov	r19,r3
 8033ec0:	803b89c0 	call	803b89c <__gtdf2>
 8033ec4:	00842216 	blt	zero,r2,8034f50 <_dtoa_r+0x15f0>
 8033ec8:	0009883a 	mov	r4,zero
 8033ecc:	014ffc34 	movhi	r5,16368
 8033ed0:	900d883a 	mov	r6,r18
 8033ed4:	980f883a 	mov	r7,r19
 8033ed8:	803b7840 	call	803b784 <__subdf3>
 8033edc:	d9001017 	ldw	r4,64(sp)
 8033ee0:	a80b883a 	mov	r5,r21
 8033ee4:	100d883a 	mov	r6,r2
 8033ee8:	180f883a 	mov	r7,r3
 8033eec:	803b89c0 	call	803b89c <__gtdf2>
 8033ef0:	dac01617 	ldw	r11,88(sp)
 8033ef4:	00841316 	blt	zero,r2,8034f44 <_dtoa_r+0x15e4>
 8033ef8:	00800044 	movi	r2,1
 8033efc:	12c0670e 	bge	r2,r11,803409c <_dtoa_r+0x73c>
 8033f00:	bad7883a 	add	r11,r23,r11
 8033f04:	df001115 	stw	fp,68(sp)
 8033f08:	dc401215 	stw	r17,72(sp)
 8033f0c:	5839883a 	mov	fp,r11
 8033f10:	dc401017 	ldw	r17,64(sp)
 8033f14:	00000806 	br	8033f38 <_dtoa_r+0x5d8>
 8033f18:	803b7840 	call	803b784 <__subdf3>
 8033f1c:	1009883a 	mov	r4,r2
 8033f20:	180b883a 	mov	r5,r3
 8033f24:	880d883a 	mov	r6,r17
 8033f28:	a80f883a 	mov	r7,r21
 8033f2c:	803b9640 	call	803b964 <__ltdf2>
 8033f30:	1003ee16 	blt	r2,zero,8034eec <_dtoa_r+0x158c>
 8033f34:	b703f126 	beq	r22,fp,8034efc <_dtoa_r+0x159c>
 8033f38:	8809883a 	mov	r4,r17
 8033f3c:	a80b883a 	mov	r5,r21
 8033f40:	000d883a 	mov	r6,zero
 8033f44:	01d00934 	movhi	r7,16420
 8033f48:	802bad40 	call	802bad4 <__muldf3>
 8033f4c:	000d883a 	mov	r6,zero
 8033f50:	01d00934 	movhi	r7,16420
 8033f54:	9009883a 	mov	r4,r18
 8033f58:	980b883a 	mov	r5,r19
 8033f5c:	1023883a 	mov	r17,r2
 8033f60:	182b883a 	mov	r21,r3
 8033f64:	802bad40 	call	802bad4 <__muldf3>
 8033f68:	180b883a 	mov	r5,r3
 8033f6c:	1009883a 	mov	r4,r2
 8033f70:	1825883a 	mov	r18,r3
 8033f74:	1027883a 	mov	r19,r2
 8033f78:	803baf00 	call	803baf0 <__fixdfsi>
 8033f7c:	1009883a 	mov	r4,r2
 8033f80:	1029883a 	mov	r20,r2
 8033f84:	803ba1c0 	call	803ba1c <__floatsidf>
 8033f88:	9809883a 	mov	r4,r19
 8033f8c:	900b883a 	mov	r5,r18
 8033f90:	100d883a 	mov	r6,r2
 8033f94:	180f883a 	mov	r7,r3
 8033f98:	803b7840 	call	803b784 <__subdf3>
 8033f9c:	a5000c04 	addi	r20,r20,48
 8033fa0:	b5000005 	stb	r20,0(r22)
 8033fa4:	1009883a 	mov	r4,r2
 8033fa8:	180b883a 	mov	r5,r3
 8033fac:	880d883a 	mov	r6,r17
 8033fb0:	a80f883a 	mov	r7,r21
 8033fb4:	1025883a 	mov	r18,r2
 8033fb8:	1827883a 	mov	r19,r3
 8033fbc:	803b9640 	call	803b964 <__ltdf2>
 8033fc0:	b5800044 	addi	r22,r22,1
 8033fc4:	0009883a 	mov	r4,zero
 8033fc8:	014ffc34 	movhi	r5,16368
 8033fcc:	900d883a 	mov	r6,r18
 8033fd0:	980f883a 	mov	r7,r19
 8033fd4:	103fd00e 	bge	r2,zero,8033f18 <_dtoa_r+0x5b8>
 8033fd8:	d9001317 	ldw	r4,76(sp)
 8033fdc:	df001117 	ldw	fp,68(sp)
 8033fe0:	d9000615 	stw	r4,24(sp)
 8033fe4:	8009883a 	mov	r4,r16
 8033fe8:	e00b883a 	mov	r5,fp
 8033fec:	8035bc40 	call	8035bc4 <_Bfree>
 8033ff0:	d9c00617 	ldw	r7,24(sp)
 8033ff4:	d8c02217 	ldw	r3,136(sp)
 8033ff8:	d9002417 	ldw	r4,144(sp)
 8033ffc:	b0000005 	stb	zero,0(r22)
 8034000:	38800044 	addi	r2,r7,1
 8034004:	18800015 	stw	r2,0(r3)
 8034008:	203e8426 	beq	r4,zero,8033a1c <_dtoa_r+0xbc>
 803400c:	25800015 	stw	r22,0(r4)
 8034010:	003e8206 	br	8033a1c <_dtoa_r+0xbc>
 8034014:	00800434 	movhi	r2,16
 8034018:	10bfffc4 	addi	r2,r2,-1
 803401c:	90a4703a 	and	r18,r18,r2
 8034020:	903e901e 	bne	r18,zero,8033a64 <_dtoa_r+0x104>
 8034024:	05c20134 	movhi	r23,2052
 8034028:	bdc52404 	addi	r23,r23,5264
 803402c:	003e8f06 	br	8033a6c <_dtoa_r+0x10c>
 8034030:	b8800204 	addi	r2,r23,8
 8034034:	003e9206 	br	8033a80 <_dtoa_r+0x120>
 8034038:	01400434 	movhi	r5,16
 803403c:	297fffc4 	addi	r5,r5,-1
 8034040:	894a703a 	and	r5,r17,r5
 8034044:	d9000317 	ldw	r4,12(sp)
 8034048:	294ffc34 	orhi	r5,r5,16368
 803404c:	a53f0044 	addi	r20,r20,-1023
 8034050:	dd400217 	ldw	r21,8(sp)
 8034054:	d8000f15 	stw	zero,60(sp)
 8034058:	003eb106 	br	8033b20 <_dtoa_r+0x1c0>
 803405c:	05c20134 	movhi	r23,2052
 8034060:	bdc51104 	addi	r23,r23,5188
 8034064:	003e6d06 	br	8033a1c <_dtoa_r+0xbc>
 8034068:	d8000415 	stw	zero,16(sp)
 803406c:	80001115 	stw	zero,68(r16)
 8034070:	8009883a 	mov	r4,r16
 8034074:	000b883a 	mov	r5,zero
 8034078:	8035b1c0 	call	8035b1c <_Balloc>
 803407c:	01ffffc4 	movi	r7,-1
 8034080:	102f883a 	mov	r23,r2
 8034084:	80801015 	stw	r2,64(r16)
 8034088:	00800044 	movi	r2,1
 803408c:	d9c00915 	stw	r7,36(sp)
 8034090:	d8002115 	stw	zero,132(sp)
 8034094:	d9c00e15 	stw	r7,56(sp)
 8034098:	d8800c15 	stw	r2,48(sp)
 803409c:	d8800117 	ldw	r2,4(sp)
 80340a0:	10008b16 	blt	r2,zero,80342d0 <_dtoa_r+0x970>
 80340a4:	d9000617 	ldw	r4,24(sp)
 80340a8:	00c00384 	movi	r3,14
 80340ac:	19008816 	blt	r3,r4,80342d0 <_dtoa_r+0x970>
 80340b0:	200490fa 	slli	r2,r4,3
 80340b4:	d9c02117 	ldw	r7,132(sp)
 80340b8:	00c20134 	movhi	r3,2052
 80340bc:	18c54c04 	addi	r3,r3,5424
 80340c0:	1885883a 	add	r2,r3,r2
 80340c4:	14800017 	ldw	r18,0(r2)
 80340c8:	14c00117 	ldw	r19,4(r2)
 80340cc:	3801c916 	blt	r7,zero,80347f4 <_dtoa_r+0xe94>
 80340d0:	d9000317 	ldw	r4,12(sp)
 80340d4:	900d883a 	mov	r6,r18
 80340d8:	980f883a 	mov	r7,r19
 80340dc:	880b883a 	mov	r5,r17
 80340e0:	802bdb80 	call	802bdb8 <__divdf3>
 80340e4:	180b883a 	mov	r5,r3
 80340e8:	1009883a 	mov	r4,r2
 80340ec:	803baf00 	call	803baf0 <__fixdfsi>
 80340f0:	1009883a 	mov	r4,r2
 80340f4:	102b883a 	mov	r21,r2
 80340f8:	803ba1c0 	call	803ba1c <__floatsidf>
 80340fc:	1009883a 	mov	r4,r2
 8034100:	180b883a 	mov	r5,r3
 8034104:	900d883a 	mov	r6,r18
 8034108:	980f883a 	mov	r7,r19
 803410c:	802bad40 	call	802bad4 <__muldf3>
 8034110:	d9000317 	ldw	r4,12(sp)
 8034114:	880b883a 	mov	r5,r17
 8034118:	100d883a 	mov	r6,r2
 803411c:	180f883a 	mov	r7,r3
 8034120:	803b7840 	call	803b784 <__subdf3>
 8034124:	d9c00917 	ldw	r7,36(sp)
 8034128:	1009883a 	mov	r4,r2
 803412c:	a8800c04 	addi	r2,r21,48
 8034130:	b8800005 	stb	r2,0(r23)
 8034134:	01800044 	movi	r6,1
 8034138:	180b883a 	mov	r5,r3
 803413c:	2005883a 	mov	r2,r4
 8034140:	bd800044 	addi	r22,r23,1
 8034144:	39803726 	beq	r7,r6,8034224 <_dtoa_r+0x8c4>
 8034148:	000d883a 	mov	r6,zero
 803414c:	01d00934 	movhi	r7,16420
 8034150:	802bad40 	call	802bad4 <__muldf3>
 8034154:	1009883a 	mov	r4,r2
 8034158:	180b883a 	mov	r5,r3
 803415c:	000d883a 	mov	r6,zero
 8034160:	000f883a 	mov	r7,zero
 8034164:	1029883a 	mov	r20,r2
 8034168:	1823883a 	mov	r17,r3
 803416c:	803b7e40 	call	803b7e4 <__eqdf2>
 8034170:	103f9c26 	beq	r2,zero,8033fe4 <_dtoa_r+0x684>
 8034174:	dd400917 	ldw	r21,36(sp)
 8034178:	dc000415 	stw	r16,16(sp)
 803417c:	00000906 	br	80341a4 <_dtoa_r+0x844>
 8034180:	802bad40 	call	802bad4 <__muldf3>
 8034184:	1009883a 	mov	r4,r2
 8034188:	180b883a 	mov	r5,r3
 803418c:	000d883a 	mov	r6,zero
 8034190:	000f883a 	mov	r7,zero
 8034194:	1029883a 	mov	r20,r2
 8034198:	1823883a 	mov	r17,r3
 803419c:	803b7e40 	call	803b7e4 <__eqdf2>
 80341a0:	10022926 	beq	r2,zero,8034a48 <_dtoa_r+0x10e8>
 80341a4:	900d883a 	mov	r6,r18
 80341a8:	980f883a 	mov	r7,r19
 80341ac:	a009883a 	mov	r4,r20
 80341b0:	880b883a 	mov	r5,r17
 80341b4:	802bdb80 	call	802bdb8 <__divdf3>
 80341b8:	180b883a 	mov	r5,r3
 80341bc:	1009883a 	mov	r4,r2
 80341c0:	803baf00 	call	803baf0 <__fixdfsi>
 80341c4:	1009883a 	mov	r4,r2
 80341c8:	1021883a 	mov	r16,r2
 80341cc:	803ba1c0 	call	803ba1c <__floatsidf>
 80341d0:	1009883a 	mov	r4,r2
 80341d4:	180b883a 	mov	r5,r3
 80341d8:	900d883a 	mov	r6,r18
 80341dc:	980f883a 	mov	r7,r19
 80341e0:	802bad40 	call	802bad4 <__muldf3>
 80341e4:	a009883a 	mov	r4,r20
 80341e8:	880b883a 	mov	r5,r17
 80341ec:	100d883a 	mov	r6,r2
 80341f0:	180f883a 	mov	r7,r3
 80341f4:	803b7840 	call	803b784 <__subdf3>
 80341f8:	82400c04 	addi	r9,r16,48
 80341fc:	b2400005 	stb	r9,0(r22)
 8034200:	b5800044 	addi	r22,r22,1
 8034204:	b5d3c83a 	sub	r9,r22,r23
 8034208:	000d883a 	mov	r6,zero
 803420c:	01d00934 	movhi	r7,16420
 8034210:	1009883a 	mov	r4,r2
 8034214:	180b883a 	mov	r5,r3
 8034218:	aa7fd91e 	bne	r21,r9,8034180 <_dtoa_r+0x820>
 803421c:	802b883a 	mov	r21,r16
 8034220:	dc000417 	ldw	r16,16(sp)
 8034224:	1009883a 	mov	r4,r2
 8034228:	180b883a 	mov	r5,r3
 803422c:	100d883a 	mov	r6,r2
 8034230:	180f883a 	mov	r7,r3
 8034234:	803b7300 	call	803b730 <__adddf3>
 8034238:	9009883a 	mov	r4,r18
 803423c:	980b883a 	mov	r5,r19
 8034240:	100d883a 	mov	r6,r2
 8034244:	180f883a 	mov	r7,r3
 8034248:	1023883a 	mov	r17,r2
 803424c:	1829883a 	mov	r20,r3
 8034250:	803b9640 	call	803b964 <__ltdf2>
 8034254:	10000816 	blt	r2,zero,8034278 <_dtoa_r+0x918>
 8034258:	9009883a 	mov	r4,r18
 803425c:	980b883a 	mov	r5,r19
 8034260:	880d883a 	mov	r6,r17
 8034264:	a00f883a 	mov	r7,r20
 8034268:	803b7e40 	call	803b7e4 <__eqdf2>
 803426c:	103f5d1e 	bne	r2,zero,8033fe4 <_dtoa_r+0x684>
 8034270:	ad40004c 	andi	r21,r21,1
 8034274:	a83f5b26 	beq	r21,zero,8033fe4 <_dtoa_r+0x684>
 8034278:	b53fffc3 	ldbu	r20,-1(r22)
 803427c:	b0ffff84 	addi	r3,r22,-2
 8034280:	01400e44 	movi	r5,57
 8034284:	00000306 	br	8034294 <_dtoa_r+0x934>
 8034288:	1d000003 	ldbu	r20,0(r3)
 803428c:	102d883a 	mov	r22,r2
 8034290:	18ffffc4 	addi	r3,r3,-1
 8034294:	a1003fcc 	andi	r4,r20,255
 8034298:	2100201c 	xori	r4,r4,128
 803429c:	213fe004 	addi	r4,r4,-128
 80342a0:	b0bfffc4 	addi	r2,r22,-1
 80342a4:	2142ca1e 	bne	r4,r5,8034dd0 <_dtoa_r+0x1470>
 80342a8:	b8bff71e 	bne	r23,r2,8034288 <_dtoa_r+0x928>
 80342ac:	d8800617 	ldw	r2,24(sp)
 80342b0:	05000c44 	movi	r20,49
 80342b4:	10800044 	addi	r2,r2,1
 80342b8:	d8800615 	stw	r2,24(sp)
 80342bc:	00800c04 	movi	r2,48
 80342c0:	b8800005 	stb	r2,0(r23)
 80342c4:	b805883a 	mov	r2,r23
 80342c8:	15000005 	stb	r20,0(r2)
 80342cc:	003f4506 	br	8033fe4 <_dtoa_r+0x684>
 80342d0:	d9c00c17 	ldw	r7,48(sp)
 80342d4:	3800c926 	beq	r7,zero,80345fc <_dtoa_r+0xc9c>
 80342d8:	d9c00417 	ldw	r7,16(sp)
 80342dc:	00c00044 	movi	r3,1
 80342e0:	19c16c0e 	bge	r3,r7,8034894 <_dtoa_r+0xf34>
 80342e4:	d9000917 	ldw	r4,36(sp)
 80342e8:	d9c00a17 	ldw	r7,40(sp)
 80342ec:	24ffffc4 	addi	r19,r4,-1
 80342f0:	3cc20716 	blt	r7,r19,8034b10 <_dtoa_r+0x11b0>
 80342f4:	3ce7c83a 	sub	r19,r7,r19
 80342f8:	d9c00917 	ldw	r7,36(sp)
 80342fc:	3802ae16 	blt	r7,zero,8034db8 <_dtoa_r+0x1458>
 8034300:	dc800817 	ldw	r18,32(sp)
 8034304:	d8800917 	ldw	r2,36(sp)
 8034308:	d8c00817 	ldw	r3,32(sp)
 803430c:	d9c00717 	ldw	r7,28(sp)
 8034310:	8009883a 	mov	r4,r16
 8034314:	1887883a 	add	r3,r3,r2
 8034318:	388f883a 	add	r7,r7,r2
 803431c:	01400044 	movi	r5,1
 8034320:	d8c00815 	stw	r3,32(sp)
 8034324:	d9c00715 	stw	r7,28(sp)
 8034328:	8035f4c0 	call	8035f4c <__i2b>
 803432c:	102b883a 	mov	r21,r2
 8034330:	90000a26 	beq	r18,zero,803435c <_dtoa_r+0x9fc>
 8034334:	d8800717 	ldw	r2,28(sp)
 8034338:	0080080e 	bge	zero,r2,803435c <_dtoa_r+0x9fc>
 803433c:	90812b16 	blt	r18,r2,80347ec <_dtoa_r+0xe8c>
 8034340:	d8c00817 	ldw	r3,32(sp)
 8034344:	d9000717 	ldw	r4,28(sp)
 8034348:	90a5c83a 	sub	r18,r18,r2
 803434c:	1887c83a 	sub	r3,r3,r2
 8034350:	2089c83a 	sub	r4,r4,r2
 8034354:	d8c00815 	stw	r3,32(sp)
 8034358:	d9000715 	stw	r4,28(sp)
 803435c:	d9c00a17 	ldw	r7,40(sp)
 8034360:	01c0140e 	bge	zero,r7,80343b4 <_dtoa_r+0xa54>
 8034364:	d8800c17 	ldw	r2,48(sp)
 8034368:	1001de26 	beq	r2,zero,8034ae4 <_dtoa_r+0x1184>
 803436c:	04c00e0e 	bge	zero,r19,80343a8 <_dtoa_r+0xa48>
 8034370:	a80b883a 	mov	r5,r21
 8034374:	8009883a 	mov	r4,r16
 8034378:	980d883a 	mov	r6,r19
 803437c:	80361e00 	call	80361e0 <__pow5mult>
 8034380:	e00d883a 	mov	r6,fp
 8034384:	8009883a 	mov	r4,r16
 8034388:	100b883a 	mov	r5,r2
 803438c:	102b883a 	mov	r21,r2
 8034390:	8035f880 	call	8035f88 <__multiply>
 8034394:	1029883a 	mov	r20,r2
 8034398:	e00b883a 	mov	r5,fp
 803439c:	8009883a 	mov	r4,r16
 80343a0:	8035bc40 	call	8035bc4 <_Bfree>
 80343a4:	a039883a 	mov	fp,r20
 80343a8:	d8c00a17 	ldw	r3,40(sp)
 80343ac:	1ccdc83a 	sub	r6,r3,r19
 80343b0:	3001291e 	bne	r6,zero,8034858 <_dtoa_r+0xef8>
 80343b4:	8009883a 	mov	r4,r16
 80343b8:	01400044 	movi	r5,1
 80343bc:	8035f4c0 	call	8035f4c <__i2b>
 80343c0:	d9000b17 	ldw	r4,44(sp)
 80343c4:	1029883a 	mov	r20,r2
 80343c8:	0100050e 	bge	zero,r4,80343e0 <_dtoa_r+0xa80>
 80343cc:	d9800b17 	ldw	r6,44(sp)
 80343d0:	8009883a 	mov	r4,r16
 80343d4:	100b883a 	mov	r5,r2
 80343d8:	80361e00 	call	80361e0 <__pow5mult>
 80343dc:	1029883a 	mov	r20,r2
 80343e0:	d9c00417 	ldw	r7,16(sp)
 80343e4:	00800044 	movi	r2,1
 80343e8:	11c0f00e 	bge	r2,r7,80347ac <_dtoa_r+0xe4c>
 80343ec:	0023883a 	mov	r17,zero
 80343f0:	d8800b17 	ldw	r2,44(sp)
 80343f4:	1001741e 	bne	r2,zero,80349c8 <_dtoa_r+0x1068>
 80343f8:	00800044 	movi	r2,1
 80343fc:	d8c00717 	ldw	r3,28(sp)
 8034400:	10c5883a 	add	r2,r2,r3
 8034404:	108007cc 	andi	r2,r2,31
 8034408:	10008026 	beq	r2,zero,803460c <_dtoa_r+0xcac>
 803440c:	01000804 	movi	r4,32
 8034410:	2089c83a 	sub	r4,r4,r2
 8034414:	00c00104 	movi	r3,4
 8034418:	1902d00e 	bge	r3,r4,8034f5c <_dtoa_r+0x15fc>
 803441c:	d9000817 	ldw	r4,32(sp)
 8034420:	d9c00717 	ldw	r7,28(sp)
 8034424:	00c00704 	movi	r3,28
 8034428:	1885c83a 	sub	r2,r3,r2
 803442c:	2089883a 	add	r4,r4,r2
 8034430:	388f883a 	add	r7,r7,r2
 8034434:	d9000815 	stw	r4,32(sp)
 8034438:	90a5883a 	add	r18,r18,r2
 803443c:	d9c00715 	stw	r7,28(sp)
 8034440:	d9c00817 	ldw	r7,32(sp)
 8034444:	01c0050e 	bge	zero,r7,803445c <_dtoa_r+0xafc>
 8034448:	e00b883a 	mov	r5,fp
 803444c:	8009883a 	mov	r4,r16
 8034450:	380d883a 	mov	r6,r7
 8034454:	803630c0 	call	803630c <__lshift>
 8034458:	1039883a 	mov	fp,r2
 803445c:	d8800717 	ldw	r2,28(sp)
 8034460:	0080050e 	bge	zero,r2,8034478 <_dtoa_r+0xb18>
 8034464:	a00b883a 	mov	r5,r20
 8034468:	8009883a 	mov	r4,r16
 803446c:	100d883a 	mov	r6,r2
 8034470:	803630c0 	call	803630c <__lshift>
 8034474:	1029883a 	mov	r20,r2
 8034478:	d8c00d17 	ldw	r3,52(sp)
 803447c:	1801401e 	bne	r3,zero,8034980 <_dtoa_r+0x1020>
 8034480:	d8800917 	ldw	r2,36(sp)
 8034484:	00815a0e 	bge	zero,r2,80349f0 <_dtoa_r+0x1090>
 8034488:	d8c00c17 	ldw	r3,48(sp)
 803448c:	18006f1e 	bne	r3,zero,803464c <_dtoa_r+0xcec>
 8034490:	b823883a 	mov	r17,r23
 8034494:	dc800917 	ldw	r18,36(sp)
 8034498:	00000206 	br	80344a4 <_dtoa_r+0xb44>
 803449c:	8035bec0 	call	8035bec <__multadd>
 80344a0:	1039883a 	mov	fp,r2
 80344a4:	e009883a 	mov	r4,fp
 80344a8:	a00b883a 	mov	r5,r20
 80344ac:	80337240 	call	8033724 <quorem>
 80344b0:	10800c04 	addi	r2,r2,48
 80344b4:	88800005 	stb	r2,0(r17)
 80344b8:	8c400044 	addi	r17,r17,1
 80344bc:	8dc7c83a 	sub	r3,r17,r23
 80344c0:	8009883a 	mov	r4,r16
 80344c4:	e00b883a 	mov	r5,fp
 80344c8:	01800284 	movi	r6,10
 80344cc:	000f883a 	mov	r7,zero
 80344d0:	1cbff216 	blt	r3,r18,803449c <_dtoa_r+0xb3c>
 80344d4:	dd800917 	ldw	r22,36(sp)
 80344d8:	1007883a 	mov	r3,r2
 80344dc:	05823a0e 	bge	zero,r22,8034dc8 <_dtoa_r+0x1468>
 80344e0:	bdad883a 	add	r22,r23,r22
 80344e4:	0023883a 	mov	r17,zero
 80344e8:	e00b883a 	mov	r5,fp
 80344ec:	01800044 	movi	r6,1
 80344f0:	8009883a 	mov	r4,r16
 80344f4:	d8c01515 	stw	r3,84(sp)
 80344f8:	803630c0 	call	803630c <__lshift>
 80344fc:	1009883a 	mov	r4,r2
 8034500:	a00b883a 	mov	r5,r20
 8034504:	1039883a 	mov	fp,r2
 8034508:	80364680 	call	8036468 <__mcmp>
 803450c:	d8c01517 	ldw	r3,84(sp)
 8034510:	0080d60e 	bge	zero,r2,803486c <_dtoa_r+0xf0c>
 8034514:	b13fffc3 	ldbu	r4,-1(r22)
 8034518:	b0ffff84 	addi	r3,r22,-2
 803451c:	01800e44 	movi	r6,57
 8034520:	00000306 	br	8034530 <_dtoa_r+0xbd0>
 8034524:	19000003 	ldbu	r4,0(r3)
 8034528:	102d883a 	mov	r22,r2
 803452c:	18ffffc4 	addi	r3,r3,-1
 8034530:	21403fcc 	andi	r5,r4,255
 8034534:	2940201c 	xori	r5,r5,128
 8034538:	297fe004 	addi	r5,r5,-128
 803453c:	b0bfffc4 	addi	r2,r22,-1
 8034540:	2981a71e 	bne	r5,r6,8034be0 <_dtoa_r+0x1280>
 8034544:	b8bff71e 	bne	r23,r2,8034524 <_dtoa_r+0xbc4>
 8034548:	d8800617 	ldw	r2,24(sp)
 803454c:	10800044 	addi	r2,r2,1
 8034550:	d8800615 	stw	r2,24(sp)
 8034554:	00800c44 	movi	r2,49
 8034558:	b8800005 	stb	r2,0(r23)
 803455c:	8009883a 	mov	r4,r16
 8034560:	a00b883a 	mov	r5,r20
 8034564:	8035bc40 	call	8035bc4 <_Bfree>
 8034568:	a83e9e26 	beq	r21,zero,8033fe4 <_dtoa_r+0x684>
 803456c:	88000426 	beq	r17,zero,8034580 <_dtoa_r+0xc20>
 8034570:	8d400326 	beq	r17,r21,8034580 <_dtoa_r+0xc20>
 8034574:	8009883a 	mov	r4,r16
 8034578:	880b883a 	mov	r5,r17
 803457c:	8035bc40 	call	8035bc4 <_Bfree>
 8034580:	8009883a 	mov	r4,r16
 8034584:	a80b883a 	mov	r5,r21
 8034588:	8035bc40 	call	8035bc4 <_Bfree>
 803458c:	003e9506 	br	8033fe4 <_dtoa_r+0x684>
 8034590:	00c00044 	movi	r3,1
 8034594:	d8c00d15 	stw	r3,52(sp)
 8034598:	003d9f06 	br	8033c18 <_dtoa_r+0x2b8>
 803459c:	d9000817 	ldw	r4,32(sp)
 80345a0:	d8800617 	ldw	r2,24(sp)
 80345a4:	d8000b15 	stw	zero,44(sp)
 80345a8:	2089c83a 	sub	r4,r4,r2
 80345ac:	0087c83a 	sub	r3,zero,r2
 80345b0:	d9000815 	stw	r4,32(sp)
 80345b4:	d8c00a15 	stw	r3,40(sp)
 80345b8:	003da306 	br	8033c48 <_dtoa_r+0x2e8>
 80345bc:	0529c83a 	sub	r20,zero,r20
 80345c0:	dd000815 	stw	r20,32(sp)
 80345c4:	d8000715 	stw	zero,28(sp)
 80345c8:	003d9806 	br	8033c2c <_dtoa_r+0x2cc>
 80345cc:	d9000617 	ldw	r4,24(sp)
 80345d0:	803ba1c0 	call	803ba1c <__floatsidf>
 80345d4:	1009883a 	mov	r4,r2
 80345d8:	180b883a 	mov	r5,r3
 80345dc:	980d883a 	mov	r6,r19
 80345e0:	900f883a 	mov	r7,r18
 80345e4:	803b8400 	call	803b840 <__nedf2>
 80345e8:	103d7a26 	beq	r2,zero,8033bd4 <_dtoa_r+0x274>
 80345ec:	d8800617 	ldw	r2,24(sp)
 80345f0:	10bfffc4 	addi	r2,r2,-1
 80345f4:	d8800615 	stw	r2,24(sp)
 80345f8:	003d7606 	br	8033bd4 <_dtoa_r+0x274>
 80345fc:	dcc00a17 	ldw	r19,40(sp)
 8034600:	dc800817 	ldw	r18,32(sp)
 8034604:	002b883a 	mov	r21,zero
 8034608:	003f4906 	br	8034330 <_dtoa_r+0x9d0>
 803460c:	00800704 	movi	r2,28
 8034610:	d8c00817 	ldw	r3,32(sp)
 8034614:	d9000717 	ldw	r4,28(sp)
 8034618:	90a5883a 	add	r18,r18,r2
 803461c:	1887883a 	add	r3,r3,r2
 8034620:	2089883a 	add	r4,r4,r2
 8034624:	d8c00815 	stw	r3,32(sp)
 8034628:	d9000715 	stw	r4,28(sp)
 803462c:	003f8406 	br	8034440 <_dtoa_r+0xae0>
 8034630:	d9c00317 	ldw	r7,12(sp)
 8034634:	013efb84 	movi	r4,-1042
 8034638:	2509c83a 	sub	r4,r4,r20
 803463c:	3908983a 	sll	r4,r7,r4
 8034640:	003d3006 	br	8033b04 <_dtoa_r+0x1a4>
 8034644:	d8000d15 	stw	zero,52(sp)
 8034648:	003d7306 	br	8033c18 <_dtoa_r+0x2b8>
 803464c:	0480050e 	bge	zero,r18,8034664 <_dtoa_r+0xd04>
 8034650:	a80b883a 	mov	r5,r21
 8034654:	8009883a 	mov	r4,r16
 8034658:	900d883a 	mov	r6,r18
 803465c:	803630c0 	call	803630c <__lshift>
 8034660:	102b883a 	mov	r21,r2
 8034664:	8801611e 	bne	r17,zero,8034bec <_dtoa_r+0x128c>
 8034668:	a827883a 	mov	r19,r21
 803466c:	d8c00317 	ldw	r3,12(sp)
 8034670:	d9000917 	ldw	r4,36(sp)
 8034674:	b8bfffc4 	addi	r2,r23,-1
 8034678:	18c0004c 	andi	r3,r3,1
 803467c:	1105883a 	add	r2,r2,r4
 8034680:	b825883a 	mov	r18,r23
 8034684:	d8800515 	stw	r2,20(sp)
 8034688:	a823883a 	mov	r17,r21
 803468c:	d8c00315 	stw	r3,12(sp)
 8034690:	ddc00715 	stw	r23,28(sp)
 8034694:	e009883a 	mov	r4,fp
 8034698:	a00b883a 	mov	r5,r20
 803469c:	80337240 	call	8033724 <quorem>
 80346a0:	e009883a 	mov	r4,fp
 80346a4:	880b883a 	mov	r5,r17
 80346a8:	102d883a 	mov	r22,r2
 80346ac:	80364680 	call	8036468 <__mcmp>
 80346b0:	980d883a 	mov	r6,r19
 80346b4:	8009883a 	mov	r4,r16
 80346b8:	a00b883a 	mov	r5,r20
 80346bc:	102b883a 	mov	r21,r2
 80346c0:	80364c00 	call	80364c0 <__mdiff>
 80346c4:	100d883a 	mov	r6,r2
 80346c8:	10800317 	ldw	r2,12(r2)
 80346cc:	b5c00c04 	addi	r23,r22,48
 80346d0:	10008c26 	beq	r2,zero,8034904 <_dtoa_r+0xfa4>
 80346d4:	8009883a 	mov	r4,r16
 80346d8:	300b883a 	mov	r5,r6
 80346dc:	8035bc40 	call	8035bc4 <_Bfree>
 80346e0:	00800044 	movi	r2,1
 80346e4:	a8007116 	blt	r21,zero,80348ac <_dtoa_r+0xf4c>
 80346e8:	a800041e 	bne	r21,zero,80346fc <_dtoa_r+0xd9c>
 80346ec:	d9c00417 	ldw	r7,16(sp)
 80346f0:	3800021e 	bne	r7,zero,80346fc <_dtoa_r+0xd9c>
 80346f4:	d8c00317 	ldw	r3,12(sp)
 80346f8:	18006c26 	beq	r3,zero,80348ac <_dtoa_r+0xf4c>
 80346fc:	00814c16 	blt	zero,r2,8034c30 <_dtoa_r+0x12d0>
 8034700:	d8c00517 	ldw	r3,20(sp)
 8034704:	95400044 	addi	r21,r18,1
 8034708:	95c00005 	stb	r23,0(r18)
 803470c:	a82d883a 	mov	r22,r21
 8034710:	90c14d26 	beq	r18,r3,8034c48 <_dtoa_r+0x12e8>
 8034714:	e00b883a 	mov	r5,fp
 8034718:	8009883a 	mov	r4,r16
 803471c:	01800284 	movi	r6,10
 8034720:	000f883a 	mov	r7,zero
 8034724:	8035bec0 	call	8035bec <__multadd>
 8034728:	1039883a 	mov	fp,r2
 803472c:	8cc08b26 	beq	r17,r19,803495c <_dtoa_r+0xffc>
 8034730:	880b883a 	mov	r5,r17
 8034734:	01800284 	movi	r6,10
 8034738:	000f883a 	mov	r7,zero
 803473c:	8009883a 	mov	r4,r16
 8034740:	8035bec0 	call	8035bec <__multadd>
 8034744:	980b883a 	mov	r5,r19
 8034748:	8009883a 	mov	r4,r16
 803474c:	01800284 	movi	r6,10
 8034750:	000f883a 	mov	r7,zero
 8034754:	1023883a 	mov	r17,r2
 8034758:	8035bec0 	call	8035bec <__multadd>
 803475c:	1027883a 	mov	r19,r2
 8034760:	a825883a 	mov	r18,r21
 8034764:	003fcb06 	br	8034694 <_dtoa_r+0xd34>
 8034768:	d9c00417 	ldw	r7,16(sp)
 803476c:	00800104 	movi	r2,4
 8034770:	3880e426 	beq	r7,r2,8034b04 <_dtoa_r+0x11a4>
 8034774:	00800144 	movi	r2,5
 8034778:	38be3c1e 	bne	r7,r2,803406c <_dtoa_r+0x70c>
 803477c:	00c00044 	movi	r3,1
 8034780:	d8c00c15 	stw	r3,48(sp)
 8034784:	d9c02117 	ldw	r7,132(sp)
 8034788:	d8800617 	ldw	r2,24(sp)
 803478c:	388f883a 	add	r7,r7,r2
 8034790:	3c800044 	addi	r18,r7,1
 8034794:	d9c00e15 	stw	r7,56(sp)
 8034798:	dc800915 	stw	r18,36(sp)
 803479c:	04bd3e16 	blt	zero,r18,8033c98 <_dtoa_r+0x338>
 80347a0:	80001115 	stw	zero,68(r16)
 80347a4:	000b883a 	mov	r5,zero
 80347a8:	003d4606 	br	8033cc4 <_dtoa_r+0x364>
 80347ac:	d8c00317 	ldw	r3,12(sp)
 80347b0:	183f0e1e 	bne	r3,zero,80343ec <_dtoa_r+0xa8c>
 80347b4:	00c00434 	movhi	r3,16
 80347b8:	18ffffc4 	addi	r3,r3,-1
 80347bc:	88c6703a 	and	r3,r17,r3
 80347c0:	183f0a1e 	bne	r3,zero,80343ec <_dtoa_r+0xa8c>
 80347c4:	8c5ffc2c 	andhi	r17,r17,32752
 80347c8:	883f0826 	beq	r17,zero,80343ec <_dtoa_r+0xa8c>
 80347cc:	d9000817 	ldw	r4,32(sp)
 80347d0:	d9c00717 	ldw	r7,28(sp)
 80347d4:	1023883a 	mov	r17,r2
 80347d8:	2089883a 	add	r4,r4,r2
 80347dc:	388f883a 	add	r7,r7,r2
 80347e0:	d9000815 	stw	r4,32(sp)
 80347e4:	d9c00715 	stw	r7,28(sp)
 80347e8:	003f0106 	br	80343f0 <_dtoa_r+0xa90>
 80347ec:	9005883a 	mov	r2,r18
 80347f0:	003ed306 	br	8034340 <_dtoa_r+0x9e0>
 80347f4:	d8800917 	ldw	r2,36(sp)
 80347f8:	00be3516 	blt	zero,r2,80340d0 <_dtoa_r+0x770>
 80347fc:	1000b61e 	bne	r2,zero,8034ad8 <_dtoa_r+0x1178>
 8034800:	9009883a 	mov	r4,r18
 8034804:	980b883a 	mov	r5,r19
 8034808:	000d883a 	mov	r6,zero
 803480c:	01d00534 	movhi	r7,16404
 8034810:	802bad40 	call	802bad4 <__muldf3>
 8034814:	d9800317 	ldw	r6,12(sp)
 8034818:	1009883a 	mov	r4,r2
 803481c:	180b883a 	mov	r5,r3
 8034820:	880f883a 	mov	r7,r17
 8034824:	803b9000 	call	803b900 <__gedf2>
 8034828:	0029883a 	mov	r20,zero
 803482c:	002b883a 	mov	r21,zero
 8034830:	10007e16 	blt	r2,zero,8034a2c <_dtoa_r+0x10cc>
 8034834:	d8802117 	ldw	r2,132(sp)
 8034838:	b82d883a 	mov	r22,r23
 803483c:	0084303a 	nor	r2,zero,r2
 8034840:	d8800615 	stw	r2,24(sp)
 8034844:	8009883a 	mov	r4,r16
 8034848:	a00b883a 	mov	r5,r20
 803484c:	8035bc40 	call	8035bc4 <_Bfree>
 8034850:	a83f4b1e 	bne	r21,zero,8034580 <_dtoa_r+0xc20>
 8034854:	003de306 	br	8033fe4 <_dtoa_r+0x684>
 8034858:	e00b883a 	mov	r5,fp
 803485c:	8009883a 	mov	r4,r16
 8034860:	80361e00 	call	80361e0 <__pow5mult>
 8034864:	1039883a 	mov	fp,r2
 8034868:	003ed206 	br	80343b4 <_dtoa_r+0xa54>
 803486c:	1000021e 	bne	r2,zero,8034878 <_dtoa_r+0xf18>
 8034870:	18c0004c 	andi	r3,r3,1
 8034874:	183f271e 	bne	r3,zero,8034514 <_dtoa_r+0xbb4>
 8034878:	01000c04 	movi	r4,48
 803487c:	00000106 	br	8034884 <_dtoa_r+0xf24>
 8034880:	102d883a 	mov	r22,r2
 8034884:	b0bfffc4 	addi	r2,r22,-1
 8034888:	10c00007 	ldb	r3,0(r2)
 803488c:	193ffc26 	beq	r3,r4,8034880 <_dtoa_r+0xf20>
 8034890:	003f3206 	br	803455c <_dtoa_r+0xbfc>
 8034894:	d8c00f17 	ldw	r3,60(sp)
 8034898:	18015026 	beq	r3,zero,8034ddc <_dtoa_r+0x147c>
 803489c:	10810cc4 	addi	r2,r2,1075
 80348a0:	dcc00a17 	ldw	r19,40(sp)
 80348a4:	dc800817 	ldw	r18,32(sp)
 80348a8:	003e9706 	br	8034308 <_dtoa_r+0x9a8>
 80348ac:	b807883a 	mov	r3,r23
 80348b0:	182b883a 	mov	r21,r3
 80348b4:	ddc00717 	ldw	r23,28(sp)
 80348b8:	00800e0e 	bge	zero,r2,80348f4 <_dtoa_r+0xf94>
 80348bc:	e00b883a 	mov	r5,fp
 80348c0:	01800044 	movi	r6,1
 80348c4:	8009883a 	mov	r4,r16
 80348c8:	d8c01515 	stw	r3,84(sp)
 80348cc:	803630c0 	call	803630c <__lshift>
 80348d0:	1009883a 	mov	r4,r2
 80348d4:	a00b883a 	mov	r5,r20
 80348d8:	1039883a 	mov	fp,r2
 80348dc:	80364680 	call	8036468 <__mcmp>
 80348e0:	d8c01517 	ldw	r3,84(sp)
 80348e4:	0081880e 	bge	zero,r2,8034f08 <_dtoa_r+0x15a8>
 80348e8:	00800e44 	movi	r2,57
 80348ec:	b0c00c44 	addi	r3,r22,49
 80348f0:	a8816326 	beq	r21,r2,8034e80 <_dtoa_r+0x1520>
 80348f4:	90c00005 	stb	r3,0(r18)
 80348f8:	95800044 	addi	r22,r18,1
 80348fc:	982b883a 	mov	r21,r19
 8034900:	003f1606 	br	803455c <_dtoa_r+0xbfc>
 8034904:	300b883a 	mov	r5,r6
 8034908:	e009883a 	mov	r4,fp
 803490c:	d9801515 	stw	r6,84(sp)
 8034910:	80364680 	call	8036468 <__mcmp>
 8034914:	d9801517 	ldw	r6,84(sp)
 8034918:	8009883a 	mov	r4,r16
 803491c:	d8801515 	stw	r2,84(sp)
 8034920:	300b883a 	mov	r5,r6
 8034924:	8035bc40 	call	8035bc4 <_Bfree>
 8034928:	d8801517 	ldw	r2,84(sp)
 803492c:	103f6d1e 	bne	r2,zero,80346e4 <_dtoa_r+0xd84>
 8034930:	d9c00417 	ldw	r7,16(sp)
 8034934:	383f6b1e 	bne	r7,zero,80346e4 <_dtoa_r+0xd84>
 8034938:	d8c00317 	ldw	r3,12(sp)
 803493c:	183f691e 	bne	r3,zero,80346e4 <_dtoa_r+0xd84>
 8034940:	b807883a 	mov	r3,r23
 8034944:	00800e44 	movi	r2,57
 8034948:	ddc00717 	ldw	r23,28(sp)
 803494c:	18814c26 	beq	r3,r2,8034e80 <_dtoa_r+0x1520>
 8034950:	057fe80e 	bge	zero,r21,80348f4 <_dtoa_r+0xf94>
 8034954:	b0c00c44 	addi	r3,r22,49
 8034958:	003fe606 	br	80348f4 <_dtoa_r+0xf94>
 803495c:	880b883a 	mov	r5,r17
 8034960:	8009883a 	mov	r4,r16
 8034964:	01800284 	movi	r6,10
 8034968:	000f883a 	mov	r7,zero
 803496c:	8035bec0 	call	8035bec <__multadd>
 8034970:	1023883a 	mov	r17,r2
 8034974:	1027883a 	mov	r19,r2
 8034978:	a825883a 	mov	r18,r21
 803497c:	003f4506 	br	8034694 <_dtoa_r+0xd34>
 8034980:	e009883a 	mov	r4,fp
 8034984:	a00b883a 	mov	r5,r20
 8034988:	80364680 	call	8036468 <__mcmp>
 803498c:	103ebc0e 	bge	r2,zero,8034480 <_dtoa_r+0xb20>
 8034990:	e00b883a 	mov	r5,fp
 8034994:	8009883a 	mov	r4,r16
 8034998:	01800284 	movi	r6,10
 803499c:	000f883a 	mov	r7,zero
 80349a0:	8035bec0 	call	8035bec <__multadd>
 80349a4:	1039883a 	mov	fp,r2
 80349a8:	d8800617 	ldw	r2,24(sp)
 80349ac:	d8c00c17 	ldw	r3,48(sp)
 80349b0:	10bfffc4 	addi	r2,r2,-1
 80349b4:	d8800615 	stw	r2,24(sp)
 80349b8:	1801571e 	bne	r3,zero,8034f18 <_dtoa_r+0x15b8>
 80349bc:	d9c00e17 	ldw	r7,56(sp)
 80349c0:	d9c00915 	stw	r7,36(sp)
 80349c4:	003eae06 	br	8034480 <_dtoa_r+0xb20>
 80349c8:	a0800417 	ldw	r2,16(r20)
 80349cc:	10800104 	addi	r2,r2,4
 80349d0:	1085883a 	add	r2,r2,r2
 80349d4:	1085883a 	add	r2,r2,r2
 80349d8:	a085883a 	add	r2,r20,r2
 80349dc:	11000017 	ldw	r4,0(r2)
 80349e0:	8035e340 	call	8035e34 <__hi0bits>
 80349e4:	00c00804 	movi	r3,32
 80349e8:	1885c83a 	sub	r2,r3,r2
 80349ec:	003e8306 	br	80343fc <_dtoa_r+0xa9c>
 80349f0:	d9c00417 	ldw	r7,16(sp)
 80349f4:	00800084 	movi	r2,2
 80349f8:	11fea30e 	bge	r2,r7,8034488 <_dtoa_r+0xb28>
 80349fc:	d8800917 	ldw	r2,36(sp)
 8034a00:	103f8c1e 	bne	r2,zero,8034834 <_dtoa_r+0xed4>
 8034a04:	a00b883a 	mov	r5,r20
 8034a08:	8009883a 	mov	r4,r16
 8034a0c:	01800144 	movi	r6,5
 8034a10:	000f883a 	mov	r7,zero
 8034a14:	8035bec0 	call	8035bec <__multadd>
 8034a18:	e009883a 	mov	r4,fp
 8034a1c:	100b883a 	mov	r5,r2
 8034a20:	1029883a 	mov	r20,r2
 8034a24:	80364680 	call	8036468 <__mcmp>
 8034a28:	00bf820e 	bge	zero,r2,8034834 <_dtoa_r+0xed4>
 8034a2c:	00800c44 	movi	r2,49
 8034a30:	b8800005 	stb	r2,0(r23)
 8034a34:	d8800617 	ldw	r2,24(sp)
 8034a38:	bd800044 	addi	r22,r23,1
 8034a3c:	10800044 	addi	r2,r2,1
 8034a40:	d8800615 	stw	r2,24(sp)
 8034a44:	003f7f06 	br	8034844 <_dtoa_r+0xee4>
 8034a48:	dc000417 	ldw	r16,16(sp)
 8034a4c:	003d6506 	br	8033fe4 <_dtoa_r+0x684>
 8034a50:	9009883a 	mov	r4,r18
 8034a54:	803ba1c0 	call	803ba1c <__floatsidf>
 8034a58:	1009883a 	mov	r4,r2
 8034a5c:	180b883a 	mov	r5,r3
 8034a60:	980d883a 	mov	r6,r19
 8034a64:	a00f883a 	mov	r7,r20
 8034a68:	802bad40 	call	802bad4 <__muldf3>
 8034a6c:	1009883a 	mov	r4,r2
 8034a70:	180b883a 	mov	r5,r3
 8034a74:	000d883a 	mov	r6,zero
 8034a78:	01d00734 	movhi	r7,16412
 8034a7c:	803b7300 	call	803b730 <__adddf3>
 8034a80:	057f3034 	movhi	r21,64704
 8034a84:	1025883a 	mov	r18,r2
 8034a88:	1d6b883a 	add	r21,r3,r21
 8034a8c:	9809883a 	mov	r4,r19
 8034a90:	a00b883a 	mov	r5,r20
 8034a94:	000d883a 	mov	r6,zero
 8034a98:	01d00534 	movhi	r7,16404
 8034a9c:	803b7840 	call	803b784 <__subdf3>
 8034aa0:	1009883a 	mov	r4,r2
 8034aa4:	180b883a 	mov	r5,r3
 8034aa8:	900d883a 	mov	r6,r18
 8034aac:	a80f883a 	mov	r7,r21
 8034ab0:	1027883a 	mov	r19,r2
 8034ab4:	1829883a 	mov	r20,r3
 8034ab8:	803b89c0 	call	803b89c <__gtdf2>
 8034abc:	00806616 	blt	zero,r2,8034c58 <_dtoa_r+0x12f8>
 8034ac0:	a9e0003c 	xorhi	r7,r21,32768
 8034ac4:	9809883a 	mov	r4,r19
 8034ac8:	a00b883a 	mov	r5,r20
 8034acc:	900d883a 	mov	r6,r18
 8034ad0:	803b9640 	call	803b964 <__ltdf2>
 8034ad4:	103d710e 	bge	r2,zero,803409c <_dtoa_r+0x73c>
 8034ad8:	0029883a 	mov	r20,zero
 8034adc:	002b883a 	mov	r21,zero
 8034ae0:	003f5406 	br	8034834 <_dtoa_r+0xed4>
 8034ae4:	d9800a17 	ldw	r6,40(sp)
 8034ae8:	e00b883a 	mov	r5,fp
 8034aec:	8009883a 	mov	r4,r16
 8034af0:	80361e00 	call	80361e0 <__pow5mult>
 8034af4:	1039883a 	mov	fp,r2
 8034af8:	003e2e06 	br	80343b4 <_dtoa_r+0xa54>
 8034afc:	d8000c15 	stw	zero,48(sp)
 8034b00:	003f2006 	br	8034784 <_dtoa_r+0xe24>
 8034b04:	00800044 	movi	r2,1
 8034b08:	d8800c15 	stw	r2,48(sp)
 8034b0c:	003c5d06 	br	8033c84 <_dtoa_r+0x324>
 8034b10:	d8c00a17 	ldw	r3,40(sp)
 8034b14:	d9000b17 	ldw	r4,44(sp)
 8034b18:	dcc00a15 	stw	r19,40(sp)
 8034b1c:	98c5c83a 	sub	r2,r19,r3
 8034b20:	2089883a 	add	r4,r4,r2
 8034b24:	d9000b15 	stw	r4,44(sp)
 8034b28:	0027883a 	mov	r19,zero
 8034b2c:	003df206 	br	80342f8 <_dtoa_r+0x998>
 8034b30:	d9000317 	ldw	r4,12(sp)
 8034b34:	8829883a 	mov	r20,r17
 8034b38:	04800084 	movi	r18,2
 8034b3c:	d9001015 	stw	r4,64(sp)
 8034b40:	003c8106 	br	8033d48 <_dtoa_r+0x3e8>
 8034b44:	04800044 	movi	r18,1
 8034b48:	dc800e15 	stw	r18,56(sp)
 8034b4c:	dc800915 	stw	r18,36(sp)
 8034b50:	dc802115 	stw	r18,132(sp)
 8034b54:	003f1206 	br	80347a0 <_dtoa_r+0xe40>
 8034b58:	d8800617 	ldw	r2,24(sp)
 8034b5c:	00abc83a 	sub	r21,zero,r2
 8034b60:	a800a426 	beq	r21,zero,8034df4 <_dtoa_r+0x1494>
 8034b64:	a88003cc 	andi	r2,r21,15
 8034b68:	100490fa 	slli	r2,r2,3
 8034b6c:	00c20134 	movhi	r3,2052
 8034b70:	18c54c04 	addi	r3,r3,5424
 8034b74:	d9000317 	ldw	r4,12(sp)
 8034b78:	1885883a 	add	r2,r3,r2
 8034b7c:	11800017 	ldw	r6,0(r2)
 8034b80:	11c00117 	ldw	r7,4(r2)
 8034b84:	a82bd13a 	srai	r21,r21,4
 8034b88:	880b883a 	mov	r5,r17
 8034b8c:	802bad40 	call	802bad4 <__muldf3>
 8034b90:	1027883a 	mov	r19,r2
 8034b94:	1829883a 	mov	r20,r3
 8034b98:	a800e826 	beq	r21,zero,8034f3c <_dtoa_r+0x15dc>
 8034b9c:	05820134 	movhi	r22,2052
 8034ba0:	b5854204 	addi	r22,r22,5384
 8034ba4:	04800084 	movi	r18,2
 8034ba8:	a980004c 	andi	r6,r21,1
 8034bac:	1009883a 	mov	r4,r2
 8034bb0:	a82bd07a 	srai	r21,r21,1
 8034bb4:	180b883a 	mov	r5,r3
 8034bb8:	30000426 	beq	r6,zero,8034bcc <_dtoa_r+0x126c>
 8034bbc:	b1800017 	ldw	r6,0(r22)
 8034bc0:	b1c00117 	ldw	r7,4(r22)
 8034bc4:	94800044 	addi	r18,r18,1
 8034bc8:	802bad40 	call	802bad4 <__muldf3>
 8034bcc:	b5800204 	addi	r22,r22,8
 8034bd0:	a83ff51e 	bne	r21,zero,8034ba8 <_dtoa_r+0x1248>
 8034bd4:	1027883a 	mov	r19,r2
 8034bd8:	1829883a 	mov	r20,r3
 8034bdc:	003c7306 	br	8033dac <_dtoa_r+0x44c>
 8034be0:	21000044 	addi	r4,r4,1
 8034be4:	11000005 	stb	r4,0(r2)
 8034be8:	003e5c06 	br	803455c <_dtoa_r+0xbfc>
 8034bec:	a9400117 	ldw	r5,4(r21)
 8034bf0:	8009883a 	mov	r4,r16
 8034bf4:	8035b1c0 	call	8035b1c <_Balloc>
 8034bf8:	a9800417 	ldw	r6,16(r21)
 8034bfc:	11000304 	addi	r4,r2,12
 8034c00:	a9400304 	addi	r5,r21,12
 8034c04:	31800084 	addi	r6,r6,2
 8034c08:	318d883a 	add	r6,r6,r6
 8034c0c:	318d883a 	add	r6,r6,r6
 8034c10:	1023883a 	mov	r17,r2
 8034c14:	802ebb00 	call	802ebb0 <memcpy>
 8034c18:	8009883a 	mov	r4,r16
 8034c1c:	880b883a 	mov	r5,r17
 8034c20:	01800044 	movi	r6,1
 8034c24:	803630c0 	call	803630c <__lshift>
 8034c28:	1027883a 	mov	r19,r2
 8034c2c:	003e8f06 	br	803466c <_dtoa_r+0xd0c>
 8034c30:	b807883a 	mov	r3,r23
 8034c34:	00800e44 	movi	r2,57
 8034c38:	ddc00717 	ldw	r23,28(sp)
 8034c3c:	18809026 	beq	r3,r2,8034e80 <_dtoa_r+0x1520>
 8034c40:	18c00044 	addi	r3,r3,1
 8034c44:	003f2b06 	br	80348f4 <_dtoa_r+0xf94>
 8034c48:	b807883a 	mov	r3,r23
 8034c4c:	982b883a 	mov	r21,r19
 8034c50:	ddc00717 	ldw	r23,28(sp)
 8034c54:	003e2406 	br	80344e8 <_dtoa_r+0xb88>
 8034c58:	0029883a 	mov	r20,zero
 8034c5c:	002b883a 	mov	r21,zero
 8034c60:	003f7206 	br	8034a2c <_dtoa_r+0x10cc>
 8034c64:	593fffc4 	addi	r4,r11,-1
 8034c68:	200490fa 	slli	r2,r4,3
 8034c6c:	00c20134 	movhi	r3,2052
 8034c70:	18c54c04 	addi	r3,r3,5424
 8034c74:	d9001015 	stw	r4,64(sp)
 8034c78:	1885883a 	add	r2,r3,r2
 8034c7c:	11000017 	ldw	r4,0(r2)
 8034c80:	11400117 	ldw	r5,4(r2)
 8034c84:	900d883a 	mov	r6,r18
 8034c88:	a80f883a 	mov	r7,r21
 8034c8c:	dac01615 	stw	r11,88(sp)
 8034c90:	802bad40 	call	802bad4 <__muldf3>
 8034c94:	a00b883a 	mov	r5,r20
 8034c98:	9809883a 	mov	r4,r19
 8034c9c:	d8c01215 	stw	r3,72(sp)
 8034ca0:	d8801115 	stw	r2,68(sp)
 8034ca4:	803baf00 	call	803baf0 <__fixdfsi>
 8034ca8:	1009883a 	mov	r4,r2
 8034cac:	1025883a 	mov	r18,r2
 8034cb0:	803ba1c0 	call	803ba1c <__floatsidf>
 8034cb4:	9809883a 	mov	r4,r19
 8034cb8:	a00b883a 	mov	r5,r20
 8034cbc:	100d883a 	mov	r6,r2
 8034cc0:	180f883a 	mov	r7,r3
 8034cc4:	94800c04 	addi	r18,r18,48
 8034cc8:	803b7840 	call	803b784 <__subdf3>
 8034ccc:	bc800005 	stb	r18,0(r23)
 8034cd0:	dac01617 	ldw	r11,88(sp)
 8034cd4:	102b883a 	mov	r21,r2
 8034cd8:	00800044 	movi	r2,1
 8034cdc:	bd800044 	addi	r22,r23,1
 8034ce0:	1815883a 	mov	r10,r3
 8034ce4:	58802226 	beq	r11,r2,8034d70 <_dtoa_r+0x1410>
 8034ce8:	bad7883a 	add	r11,r23,r11
 8034cec:	dc001415 	stw	r16,80(sp)
 8034cf0:	a805883a 	mov	r2,r21
 8034cf4:	b027883a 	mov	r19,r22
 8034cf8:	5821883a 	mov	r16,r11
 8034cfc:	882b883a 	mov	r21,r17
 8034d00:	000d883a 	mov	r6,zero
 8034d04:	01d00934 	movhi	r7,16420
 8034d08:	1009883a 	mov	r4,r2
 8034d0c:	180b883a 	mov	r5,r3
 8034d10:	802bad40 	call	802bad4 <__muldf3>
 8034d14:	180b883a 	mov	r5,r3
 8034d18:	1009883a 	mov	r4,r2
 8034d1c:	1829883a 	mov	r20,r3
 8034d20:	1023883a 	mov	r17,r2
 8034d24:	803baf00 	call	803baf0 <__fixdfsi>
 8034d28:	1009883a 	mov	r4,r2
 8034d2c:	1025883a 	mov	r18,r2
 8034d30:	803ba1c0 	call	803ba1c <__floatsidf>
 8034d34:	8809883a 	mov	r4,r17
 8034d38:	a00b883a 	mov	r5,r20
 8034d3c:	100d883a 	mov	r6,r2
 8034d40:	180f883a 	mov	r7,r3
 8034d44:	94800c04 	addi	r18,r18,48
 8034d48:	803b7840 	call	803b784 <__subdf3>
 8034d4c:	9cc00044 	addi	r19,r19,1
 8034d50:	9cbfffc5 	stb	r18,-1(r19)
 8034d54:	9c3fea1e 	bne	r19,r16,8034d00 <_dtoa_r+0x13a0>
 8034d58:	1815883a 	mov	r10,r3
 8034d5c:	d8c01017 	ldw	r3,64(sp)
 8034d60:	dc001417 	ldw	r16,80(sp)
 8034d64:	a823883a 	mov	r17,r21
 8034d68:	b0ed883a 	add	r22,r22,r3
 8034d6c:	102b883a 	mov	r21,r2
 8034d70:	d9001117 	ldw	r4,68(sp)
 8034d74:	d9401217 	ldw	r5,72(sp)
 8034d78:	000d883a 	mov	r6,zero
 8034d7c:	01cff834 	movhi	r7,16352
 8034d80:	da801515 	stw	r10,84(sp)
 8034d84:	803b7300 	call	803b730 <__adddf3>
 8034d88:	da801517 	ldw	r10,84(sp)
 8034d8c:	1009883a 	mov	r4,r2
 8034d90:	180b883a 	mov	r5,r3
 8034d94:	500f883a 	mov	r7,r10
 8034d98:	a80d883a 	mov	r6,r21
 8034d9c:	803b9640 	call	803b964 <__ltdf2>
 8034da0:	da801517 	ldw	r10,84(sp)
 8034da4:	10003b0e 	bge	r2,zero,8034e94 <_dtoa_r+0x1534>
 8034da8:	d9c01317 	ldw	r7,76(sp)
 8034dac:	b53fffc3 	ldbu	r20,-1(r22)
 8034db0:	d9c00615 	stw	r7,24(sp)
 8034db4:	003d3106 	br	803427c <_dtoa_r+0x91c>
 8034db8:	d8800817 	ldw	r2,32(sp)
 8034dbc:	11e5c83a 	sub	r18,r2,r7
 8034dc0:	0005883a 	mov	r2,zero
 8034dc4:	003d5006 	br	8034308 <_dtoa_r+0x9a8>
 8034dc8:	05800044 	movi	r22,1
 8034dcc:	003dc406 	br	80344e0 <_dtoa_r+0xb80>
 8034dd0:	a5000044 	addi	r20,r20,1
 8034dd4:	15000005 	stb	r20,0(r2)
 8034dd8:	003c8206 	br	8033fe4 <_dtoa_r+0x684>
 8034ddc:	d8800217 	ldw	r2,8(sp)
 8034de0:	00c00d84 	movi	r3,54
 8034de4:	dcc00a17 	ldw	r19,40(sp)
 8034de8:	1885c83a 	sub	r2,r3,r2
 8034dec:	dc800817 	ldw	r18,32(sp)
 8034df0:	003d4506 	br	8034308 <_dtoa_r+0x9a8>
 8034df4:	dcc00317 	ldw	r19,12(sp)
 8034df8:	8829883a 	mov	r20,r17
 8034dfc:	04800084 	movi	r18,2
 8034e00:	003bea06 	br	8033dac <_dtoa_r+0x44c>
 8034e04:	d9000917 	ldw	r4,36(sp)
 8034e08:	203f1126 	beq	r4,zero,8034a50 <_dtoa_r+0x10f0>
 8034e0c:	d9c00e17 	ldw	r7,56(sp)
 8034e10:	01fca20e 	bge	zero,r7,803409c <_dtoa_r+0x73c>
 8034e14:	a00b883a 	mov	r5,r20
 8034e18:	9809883a 	mov	r4,r19
 8034e1c:	000d883a 	mov	r6,zero
 8034e20:	01d00934 	movhi	r7,16420
 8034e24:	802bad40 	call	802bad4 <__muldf3>
 8034e28:	91000044 	addi	r4,r18,1
 8034e2c:	1027883a 	mov	r19,r2
 8034e30:	1829883a 	mov	r20,r3
 8034e34:	803ba1c0 	call	803ba1c <__floatsidf>
 8034e38:	9809883a 	mov	r4,r19
 8034e3c:	a00b883a 	mov	r5,r20
 8034e40:	100d883a 	mov	r6,r2
 8034e44:	180f883a 	mov	r7,r3
 8034e48:	802bad40 	call	802bad4 <__muldf3>
 8034e4c:	1009883a 	mov	r4,r2
 8034e50:	180b883a 	mov	r5,r3
 8034e54:	000d883a 	mov	r6,zero
 8034e58:	01d00734 	movhi	r7,16412
 8034e5c:	803b7300 	call	803b730 <__adddf3>
 8034e60:	1025883a 	mov	r18,r2
 8034e64:	d8800617 	ldw	r2,24(sp)
 8034e68:	057f3034 	movhi	r21,64704
 8034e6c:	1d6b883a 	add	r21,r3,r21
 8034e70:	10bfffc4 	addi	r2,r2,-1
 8034e74:	d8801315 	stw	r2,76(sp)
 8034e78:	dac00e17 	ldw	r11,56(sp)
 8034e7c:	003be706 	br	8033e1c <_dtoa_r+0x4bc>
 8034e80:	01000e44 	movi	r4,57
 8034e84:	91000005 	stb	r4,0(r18)
 8034e88:	95800044 	addi	r22,r18,1
 8034e8c:	982b883a 	mov	r21,r19
 8034e90:	003da106 	br	8034518 <_dtoa_r+0xbb8>
 8034e94:	d9801117 	ldw	r6,68(sp)
 8034e98:	d9c01217 	ldw	r7,72(sp)
 8034e9c:	0009883a 	mov	r4,zero
 8034ea0:	014ff834 	movhi	r5,16352
 8034ea4:	da801515 	stw	r10,84(sp)
 8034ea8:	803b7840 	call	803b784 <__subdf3>
 8034eac:	da801517 	ldw	r10,84(sp)
 8034eb0:	1009883a 	mov	r4,r2
 8034eb4:	180b883a 	mov	r5,r3
 8034eb8:	a80d883a 	mov	r6,r21
 8034ebc:	500f883a 	mov	r7,r10
 8034ec0:	803b89c0 	call	803b89c <__gtdf2>
 8034ec4:	00bc750e 	bge	zero,r2,803409c <_dtoa_r+0x73c>
 8034ec8:	01000c04 	movi	r4,48
 8034ecc:	00000106 	br	8034ed4 <_dtoa_r+0x1574>
 8034ed0:	102d883a 	mov	r22,r2
 8034ed4:	b0bfffc4 	addi	r2,r22,-1
 8034ed8:	10c00007 	ldb	r3,0(r2)
 8034edc:	193ffc26 	beq	r3,r4,8034ed0 <_dtoa_r+0x1570>
 8034ee0:	d8801317 	ldw	r2,76(sp)
 8034ee4:	d8800615 	stw	r2,24(sp)
 8034ee8:	003c3e06 	br	8033fe4 <_dtoa_r+0x684>
 8034eec:	d9001317 	ldw	r4,76(sp)
 8034ef0:	df001117 	ldw	fp,68(sp)
 8034ef4:	d9000615 	stw	r4,24(sp)
 8034ef8:	003ce006 	br	803427c <_dtoa_r+0x91c>
 8034efc:	df001117 	ldw	fp,68(sp)
 8034f00:	dc401217 	ldw	r17,72(sp)
 8034f04:	003c6506 	br	803409c <_dtoa_r+0x73c>
 8034f08:	103e7a1e 	bne	r2,zero,80348f4 <_dtoa_r+0xf94>
 8034f0c:	1880004c 	andi	r2,r3,1
 8034f10:	103e7826 	beq	r2,zero,80348f4 <_dtoa_r+0xf94>
 8034f14:	003e7406 	br	80348e8 <_dtoa_r+0xf88>
 8034f18:	8009883a 	mov	r4,r16
 8034f1c:	a80b883a 	mov	r5,r21
 8034f20:	01800284 	movi	r6,10
 8034f24:	000f883a 	mov	r7,zero
 8034f28:	8035bec0 	call	8035bec <__multadd>
 8034f2c:	d9000e17 	ldw	r4,56(sp)
 8034f30:	102b883a 	mov	r21,r2
 8034f34:	d9000915 	stw	r4,36(sp)
 8034f38:	003d5106 	br	8034480 <_dtoa_r+0xb20>
 8034f3c:	04800084 	movi	r18,2
 8034f40:	003b9a06 	br	8033dac <_dtoa_r+0x44c>
 8034f44:	d8c01317 	ldw	r3,76(sp)
 8034f48:	d8c00615 	stw	r3,24(sp)
 8034f4c:	003ccb06 	br	803427c <_dtoa_r+0x91c>
 8034f50:	d8c01317 	ldw	r3,76(sp)
 8034f54:	d8c00615 	stw	r3,24(sp)
 8034f58:	003c2206 	br	8033fe4 <_dtoa_r+0x684>
 8034f5c:	20fd3826 	beq	r4,r3,8034440 <_dtoa_r+0xae0>
 8034f60:	00c00f04 	movi	r3,60
 8034f64:	1885c83a 	sub	r2,r3,r2
 8034f68:	003da906 	br	8034610 <_dtoa_r+0xcb0>
 8034f6c:	000b883a 	mov	r5,zero
 8034f70:	003b5406 	br	8033cc4 <_dtoa_r+0x364>
 8034f74:	04c00044 	movi	r19,1
 8034f78:	003b3b06 	br	8033c68 <_dtoa_r+0x308>

08034f7c <_fdopen_r>:
 8034f7c:	defffb04 	addi	sp,sp,-20
 8034f80:	dc800315 	stw	r18,12(sp)
 8034f84:	2825883a 	mov	r18,r5
 8034f88:	300b883a 	mov	r5,r6
 8034f8c:	d80d883a 	mov	r6,sp
 8034f90:	dc400215 	stw	r17,8(sp)
 8034f94:	dc000115 	stw	r16,4(sp)
 8034f98:	dfc00415 	stw	ra,16(sp)
 8034f9c:	2023883a 	mov	r17,r4
 8034fa0:	80350500 	call	8035050 <__sflags>
 8034fa4:	1021883a 	mov	r16,r2
 8034fa8:	10001a26 	beq	r2,zero,8035014 <_fdopen_r+0x98>
 8034fac:	8809883a 	mov	r4,r17
 8034fb0:	802cf1c0 	call	802cf1c <__sfp>
 8034fb4:	1007883a 	mov	r3,r2
 8034fb8:	10001626 	beq	r2,zero,8035014 <_fdopen_r+0x98>
 8034fbc:	1400030d 	sth	r16,12(r2)
 8034fc0:	1480038d 	sth	r18,14(r2)
 8034fc4:	18800715 	stw	r2,28(r3)
 8034fc8:	008200f4 	movhi	r2,2051
 8034fcc:	10bd0704 	addi	r2,r2,-3044
 8034fd0:	18800815 	stw	r2,32(r3)
 8034fd4:	008200f4 	movhi	r2,2051
 8034fd8:	10bd1c04 	addi	r2,r2,-2960
 8034fdc:	18800915 	stw	r2,36(r3)
 8034fe0:	008200f4 	movhi	r2,2051
 8034fe4:	10bd3e04 	addi	r2,r2,-2824
 8034fe8:	18800a15 	stw	r2,40(r3)
 8034fec:	008200f4 	movhi	r2,2051
 8034ff0:	10bd5504 	addi	r2,r2,-2732
 8034ff4:	18800b15 	stw	r2,44(r3)
 8034ff8:	1805883a 	mov	r2,r3
 8034ffc:	dfc00417 	ldw	ra,16(sp)
 8035000:	dc800317 	ldw	r18,12(sp)
 8035004:	dc400217 	ldw	r17,8(sp)
 8035008:	dc000117 	ldw	r16,4(sp)
 803500c:	dec00504 	addi	sp,sp,20
 8035010:	f800283a 	ret
 8035014:	0007883a 	mov	r3,zero
 8035018:	1805883a 	mov	r2,r3
 803501c:	dfc00417 	ldw	ra,16(sp)
 8035020:	dc800317 	ldw	r18,12(sp)
 8035024:	dc400217 	ldw	r17,8(sp)
 8035028:	dc000117 	ldw	r16,4(sp)
 803502c:	dec00504 	addi	sp,sp,20
 8035030:	f800283a 	ret

08035034 <fdopen>:
 8035034:	00c20134 	movhi	r3,2052
 8035038:	18cc4504 	addi	r3,r3,12564
 803503c:	2005883a 	mov	r2,r4
 8035040:	19000017 	ldw	r4,0(r3)
 8035044:	280d883a 	mov	r6,r5
 8035048:	100b883a 	mov	r5,r2
 803504c:	8034f7c1 	jmpi	8034f7c <_fdopen_r>

08035050 <__sflags>:
 8035050:	28800007 	ldb	r2,0(r5)
 8035054:	00c01c84 	movi	r3,114
 8035058:	10c01826 	beq	r2,r3,80350bc <__sflags+0x6c>
 803505c:	00c01dc4 	movi	r3,119
 8035060:	10c01226 	beq	r2,r3,80350ac <__sflags+0x5c>
 8035064:	00c01844 	movi	r3,97
 8035068:	10c00426 	beq	r2,r3,803507c <__sflags+0x2c>
 803506c:	00800584 	movi	r2,22
 8035070:	20800015 	stw	r2,0(r4)
 8035074:	0005883a 	mov	r2,zero
 8035078:	f800283a 	ret
 803507c:	01c08204 	movi	r7,520
 8035080:	01000044 	movi	r4,1
 8035084:	00804204 	movi	r2,264
 8035088:	28c00047 	ldb	r3,1(r5)
 803508c:	18000426 	beq	r3,zero,80350a0 <__sflags+0x50>
 8035090:	02000ac4 	movi	r8,43
 8035094:	1a000d26 	beq	r3,r8,80350cc <__sflags+0x7c>
 8035098:	28c00087 	ldb	r3,2(r5)
 803509c:	1a000b26 	beq	r3,r8,80350cc <__sflags+0x7c>
 80350a0:	21c8b03a 	or	r4,r4,r7
 80350a4:	31000015 	stw	r4,0(r6)
 80350a8:	f800283a 	ret
 80350ac:	01c18004 	movi	r7,1536
 80350b0:	01000044 	movi	r4,1
 80350b4:	00800204 	movi	r2,8
 80350b8:	003ff306 	br	8035088 <__sflags+0x38>
 80350bc:	000f883a 	mov	r7,zero
 80350c0:	0009883a 	mov	r4,zero
 80350c4:	00800104 	movi	r2,4
 80350c8:	003fef06 	br	8035088 <__sflags+0x38>
 80350cc:	00fff8c4 	movi	r3,-29
 80350d0:	01000084 	movi	r4,2
 80350d4:	10c4703a 	and	r2,r2,r3
 80350d8:	21c8b03a 	or	r4,r4,r7
 80350dc:	10800414 	ori	r2,r2,16
 80350e0:	31000015 	stw	r4,0(r6)
 80350e4:	f800283a 	ret

080350e8 <__sfvwrite_r>:
 80350e8:	30800217 	ldw	r2,8(r6)
 80350ec:	defff504 	addi	sp,sp,-44
 80350f0:	dd400615 	stw	r21,24(sp)
 80350f4:	dd000515 	stw	r20,20(sp)
 80350f8:	dc000115 	stw	r16,4(sp)
 80350fc:	dfc00a15 	stw	ra,40(sp)
 8035100:	df000915 	stw	fp,36(sp)
 8035104:	ddc00815 	stw	r23,32(sp)
 8035108:	dd800715 	stw	r22,28(sp)
 803510c:	dcc00415 	stw	r19,16(sp)
 8035110:	dc800315 	stw	r18,12(sp)
 8035114:	dc400215 	stw	r17,8(sp)
 8035118:	3029883a 	mov	r20,r6
 803511c:	202b883a 	mov	r21,r4
 8035120:	2821883a 	mov	r16,r5
 8035124:	10002126 	beq	r2,zero,80351ac <__sfvwrite_r+0xc4>
 8035128:	2880030b 	ldhu	r2,12(r5)
 803512c:	10c0020c 	andi	r3,r2,8
 8035130:	18ffffcc 	andi	r3,r3,65535
 8035134:	18e0001c 	xori	r3,r3,32768
 8035138:	18e00004 	addi	r3,r3,-32768
 803513c:	18002826 	beq	r3,zero,80351e0 <__sfvwrite_r+0xf8>
 8035140:	28c00417 	ldw	r3,16(r5)
 8035144:	18002626 	beq	r3,zero,80351e0 <__sfvwrite_r+0xf8>
 8035148:	10c0008c 	andi	r3,r2,2
 803514c:	18ffffcc 	andi	r3,r3,65535
 8035150:	18e0001c 	xori	r3,r3,32768
 8035154:	18e00004 	addi	r3,r3,-32768
 8035158:	a4400017 	ldw	r17,0(r20)
 803515c:	18002b26 	beq	r3,zero,803520c <__sfvwrite_r+0x124>
 8035160:	0027883a 	mov	r19,zero
 8035164:	0025883a 	mov	r18,zero
 8035168:	05810004 	movi	r22,1024
 803516c:	980d883a 	mov	r6,r19
 8035170:	a809883a 	mov	r4,r21
 8035174:	90004f26 	beq	r18,zero,80352b4 <__sfvwrite_r+0x1cc>
 8035178:	900f883a 	mov	r7,r18
 803517c:	81400717 	ldw	r5,28(r16)
 8035180:	b480012e 	bgeu	r22,r18,8035188 <__sfvwrite_r+0xa0>
 8035184:	01c10004 	movi	r7,1024
 8035188:	80800917 	ldw	r2,36(r16)
 803518c:	103ee83a 	callr	r2
 8035190:	0080540e 	bge	zero,r2,80352e4 <__sfvwrite_r+0x1fc>
 8035194:	a0c00217 	ldw	r3,8(r20)
 8035198:	98a7883a 	add	r19,r19,r2
 803519c:	90a5c83a 	sub	r18,r18,r2
 80351a0:	1885c83a 	sub	r2,r3,r2
 80351a4:	a0800215 	stw	r2,8(r20)
 80351a8:	103ff01e 	bne	r2,zero,803516c <__sfvwrite_r+0x84>
 80351ac:	0005883a 	mov	r2,zero
 80351b0:	dfc00a17 	ldw	ra,40(sp)
 80351b4:	df000917 	ldw	fp,36(sp)
 80351b8:	ddc00817 	ldw	r23,32(sp)
 80351bc:	dd800717 	ldw	r22,28(sp)
 80351c0:	dd400617 	ldw	r21,24(sp)
 80351c4:	dd000517 	ldw	r20,20(sp)
 80351c8:	dcc00417 	ldw	r19,16(sp)
 80351cc:	dc800317 	ldw	r18,12(sp)
 80351d0:	dc400217 	ldw	r17,8(sp)
 80351d4:	dc000117 	ldw	r16,4(sp)
 80351d8:	dec00b04 	addi	sp,sp,44
 80351dc:	f800283a 	ret
 80351e0:	a809883a 	mov	r4,r21
 80351e4:	800b883a 	mov	r5,r16
 80351e8:	80333ac0 	call	80333ac <__swsetup_r>
 80351ec:	1000f01e 	bne	r2,zero,80355b0 <__sfvwrite_r+0x4c8>
 80351f0:	8080030b 	ldhu	r2,12(r16)
 80351f4:	a4400017 	ldw	r17,0(r20)
 80351f8:	10c0008c 	andi	r3,r2,2
 80351fc:	18ffffcc 	andi	r3,r3,65535
 8035200:	18e0001c 	xori	r3,r3,32768
 8035204:	18e00004 	addi	r3,r3,-32768
 8035208:	183fd51e 	bne	r3,zero,8035160 <__sfvwrite_r+0x78>
 803520c:	10c0004c 	andi	r3,r2,1
 8035210:	002d883a 	mov	r22,zero
 8035214:	1800381e 	bne	r3,zero,80352f8 <__sfvwrite_r+0x210>
 8035218:	0025883a 	mov	r18,zero
 803521c:	90002126 	beq	r18,zero,80352a4 <__sfvwrite_r+0x1bc>
 8035220:	10c0800c 	andi	r3,r2,512
 8035224:	18ffffcc 	andi	r3,r3,65535
 8035228:	18e0001c 	xori	r3,r3,32768
 803522c:	18e00004 	addi	r3,r3,-32768
 8035230:	84c00217 	ldw	r19,8(r16)
 8035234:	18006b26 	beq	r3,zero,80353e4 <__sfvwrite_r+0x2fc>
 8035238:	980f883a 	mov	r7,r19
 803523c:	94c08636 	bltu	r18,r19,8035458 <__sfvwrite_r+0x370>
 8035240:	10c1200c 	andi	r3,r2,1152
 8035244:	18009f1e 	bne	r3,zero,80354c4 <__sfvwrite_r+0x3dc>
 8035248:	81000017 	ldw	r4,0(r16)
 803524c:	982f883a 	mov	r23,r19
 8035250:	9039883a 	mov	fp,r18
 8035254:	9027883a 	mov	r19,r18
 8035258:	380d883a 	mov	r6,r7
 803525c:	b00b883a 	mov	r5,r22
 8035260:	d9c00015 	stw	r7,0(sp)
 8035264:	80359900 	call	8035990 <memmove>
 8035268:	d9c00017 	ldw	r7,0(sp)
 803526c:	81000217 	ldw	r4,8(r16)
 8035270:	80800017 	ldw	r2,0(r16)
 8035274:	25efc83a 	sub	r23,r4,r23
 8035278:	11cf883a 	add	r7,r2,r7
 803527c:	85c00215 	stw	r23,8(r16)
 8035280:	81c00015 	stw	r7,0(r16)
 8035284:	a0800217 	ldw	r2,8(r20)
 8035288:	b72d883a 	add	r22,r22,fp
 803528c:	9725c83a 	sub	r18,r18,fp
 8035290:	14e7c83a 	sub	r19,r2,r19
 8035294:	a4c00215 	stw	r19,8(r20)
 8035298:	983fc426 	beq	r19,zero,80351ac <__sfvwrite_r+0xc4>
 803529c:	8080030b 	ldhu	r2,12(r16)
 80352a0:	903fdf1e 	bne	r18,zero,8035220 <__sfvwrite_r+0x138>
 80352a4:	8d800017 	ldw	r22,0(r17)
 80352a8:	8c800117 	ldw	r18,4(r17)
 80352ac:	8c400204 	addi	r17,r17,8
 80352b0:	003fda06 	br	803521c <__sfvwrite_r+0x134>
 80352b4:	8cc00017 	ldw	r19,0(r17)
 80352b8:	8c800117 	ldw	r18,4(r17)
 80352bc:	8c400204 	addi	r17,r17,8
 80352c0:	003faa06 	br	803516c <__sfvwrite_r+0x84>
 80352c4:	8036bd80 	call	8036bd8 <_realloc_r>
 80352c8:	102f883a 	mov	r23,r2
 80352cc:	10009f1e 	bne	r2,zero,803554c <__sfvwrite_r+0x464>
 80352d0:	81400417 	ldw	r5,16(r16)
 80352d4:	a809883a 	mov	r4,r21
 80352d8:	802d5a80 	call	802d5a8 <_free_r>
 80352dc:	00800304 	movi	r2,12
 80352e0:	a8800015 	stw	r2,0(r21)
 80352e4:	80c0030b 	ldhu	r3,12(r16)
 80352e8:	00bfffc4 	movi	r2,-1
 80352ec:	18c01014 	ori	r3,r3,64
 80352f0:	80c0030d 	sth	r3,12(r16)
 80352f4:	003fae06 	br	80351b0 <__sfvwrite_r+0xc8>
 80352f8:	0007883a 	mov	r3,zero
 80352fc:	0039883a 	mov	fp,zero
 8035300:	0025883a 	mov	r18,zero
 8035304:	90001e26 	beq	r18,zero,8035380 <__sfvwrite_r+0x298>
 8035308:	18006526 	beq	r3,zero,80354a0 <__sfvwrite_r+0x3b8>
 803530c:	b02f883a 	mov	r23,r22
 8035310:	9580012e 	bgeu	r18,r22,8035318 <__sfvwrite_r+0x230>
 8035314:	902f883a 	mov	r23,r18
 8035318:	81000017 	ldw	r4,0(r16)
 803531c:	80800417 	ldw	r2,16(r16)
 8035320:	84c00217 	ldw	r19,8(r16)
 8035324:	81c00517 	ldw	r7,20(r16)
 8035328:	1100022e 	bgeu	r2,r4,8035334 <__sfvwrite_r+0x24c>
 803532c:	99e7883a 	add	r19,r19,r7
 8035330:	9dc01816 	blt	r19,r23,8035394 <__sfvwrite_r+0x2ac>
 8035334:	b9c03b16 	blt	r23,r7,8035424 <__sfvwrite_r+0x33c>
 8035338:	80800917 	ldw	r2,36(r16)
 803533c:	81400717 	ldw	r5,28(r16)
 8035340:	a809883a 	mov	r4,r21
 8035344:	d8c00015 	stw	r3,0(sp)
 8035348:	e00d883a 	mov	r6,fp
 803534c:	103ee83a 	callr	r2
 8035350:	1027883a 	mov	r19,r2
 8035354:	d8c00017 	ldw	r3,0(sp)
 8035358:	00bfe20e 	bge	zero,r2,80352e4 <__sfvwrite_r+0x1fc>
 803535c:	b4edc83a 	sub	r22,r22,r19
 8035360:	b0001a26 	beq	r22,zero,80353cc <__sfvwrite_r+0x2e4>
 8035364:	a0800217 	ldw	r2,8(r20)
 8035368:	e4f9883a 	add	fp,fp,r19
 803536c:	94e5c83a 	sub	r18,r18,r19
 8035370:	14e7c83a 	sub	r19,r2,r19
 8035374:	a4c00215 	stw	r19,8(r20)
 8035378:	983f8c26 	beq	r19,zero,80351ac <__sfvwrite_r+0xc4>
 803537c:	903fe21e 	bne	r18,zero,8035308 <__sfvwrite_r+0x220>
 8035380:	8f000017 	ldw	fp,0(r17)
 8035384:	8c800117 	ldw	r18,4(r17)
 8035388:	0007883a 	mov	r3,zero
 803538c:	8c400204 	addi	r17,r17,8
 8035390:	003fdc06 	br	8035304 <__sfvwrite_r+0x21c>
 8035394:	e00b883a 	mov	r5,fp
 8035398:	980d883a 	mov	r6,r19
 803539c:	d8c00015 	stw	r3,0(sp)
 80353a0:	80359900 	call	8035990 <memmove>
 80353a4:	80800017 	ldw	r2,0(r16)
 80353a8:	a809883a 	mov	r4,r21
 80353ac:	800b883a 	mov	r5,r16
 80353b0:	14c5883a 	add	r2,r2,r19
 80353b4:	80800015 	stw	r2,0(r16)
 80353b8:	802cb540 	call	802cb54 <_fflush_r>
 80353bc:	d8c00017 	ldw	r3,0(sp)
 80353c0:	103fc81e 	bne	r2,zero,80352e4 <__sfvwrite_r+0x1fc>
 80353c4:	b4edc83a 	sub	r22,r22,r19
 80353c8:	b03fe61e 	bne	r22,zero,8035364 <__sfvwrite_r+0x27c>
 80353cc:	a809883a 	mov	r4,r21
 80353d0:	800b883a 	mov	r5,r16
 80353d4:	802cb540 	call	802cb54 <_fflush_r>
 80353d8:	103fc21e 	bne	r2,zero,80352e4 <__sfvwrite_r+0x1fc>
 80353dc:	0007883a 	mov	r3,zero
 80353e0:	003fe006 	br	8035364 <__sfvwrite_r+0x27c>
 80353e4:	81000017 	ldw	r4,0(r16)
 80353e8:	80800417 	ldw	r2,16(r16)
 80353ec:	1100022e 	bgeu	r2,r4,80353f8 <__sfvwrite_r+0x310>
 80353f0:	9839883a 	mov	fp,r19
 80353f4:	9c806036 	bltu	r19,r18,8035578 <__sfvwrite_r+0x490>
 80353f8:	81c00517 	ldw	r7,20(r16)
 80353fc:	91c01c36 	bltu	r18,r7,8035470 <__sfvwrite_r+0x388>
 8035400:	80800917 	ldw	r2,36(r16)
 8035404:	81400717 	ldw	r5,28(r16)
 8035408:	a809883a 	mov	r4,r21
 803540c:	b00d883a 	mov	r6,r22
 8035410:	103ee83a 	callr	r2
 8035414:	1027883a 	mov	r19,r2
 8035418:	00bfb20e 	bge	zero,r2,80352e4 <__sfvwrite_r+0x1fc>
 803541c:	1039883a 	mov	fp,r2
 8035420:	003f9806 	br	8035284 <__sfvwrite_r+0x19c>
 8035424:	b80d883a 	mov	r6,r23
 8035428:	e00b883a 	mov	r5,fp
 803542c:	d8c00015 	stw	r3,0(sp)
 8035430:	80359900 	call	8035990 <memmove>
 8035434:	80800217 	ldw	r2,8(r16)
 8035438:	81000017 	ldw	r4,0(r16)
 803543c:	b827883a 	mov	r19,r23
 8035440:	15c5c83a 	sub	r2,r2,r23
 8035444:	25ef883a 	add	r23,r4,r23
 8035448:	80800215 	stw	r2,8(r16)
 803544c:	85c00015 	stw	r23,0(r16)
 8035450:	d8c00017 	ldw	r3,0(sp)
 8035454:	003fc106 	br	803535c <__sfvwrite_r+0x274>
 8035458:	81000017 	ldw	r4,0(r16)
 803545c:	902f883a 	mov	r23,r18
 8035460:	9039883a 	mov	fp,r18
 8035464:	9027883a 	mov	r19,r18
 8035468:	900f883a 	mov	r7,r18
 803546c:	003f7a06 	br	8035258 <__sfvwrite_r+0x170>
 8035470:	b00b883a 	mov	r5,r22
 8035474:	900d883a 	mov	r6,r18
 8035478:	80359900 	call	8035990 <memmove>
 803547c:	80c00217 	ldw	r3,8(r16)
 8035480:	80800017 	ldw	r2,0(r16)
 8035484:	9027883a 	mov	r19,r18
 8035488:	1c87c83a 	sub	r3,r3,r18
 803548c:	1485883a 	add	r2,r2,r18
 8035490:	80c00215 	stw	r3,8(r16)
 8035494:	80800015 	stw	r2,0(r16)
 8035498:	9039883a 	mov	fp,r18
 803549c:	003f7906 	br	8035284 <__sfvwrite_r+0x19c>
 80354a0:	e009883a 	mov	r4,fp
 80354a4:	01400284 	movi	r5,10
 80354a8:	900d883a 	mov	r6,r18
 80354ac:	80358980 	call	8035898 <memchr>
 80354b0:	10003c26 	beq	r2,zero,80355a4 <__sfvwrite_r+0x4bc>
 80354b4:	15800044 	addi	r22,r2,1
 80354b8:	b72dc83a 	sub	r22,r22,fp
 80354bc:	00c00044 	movi	r3,1
 80354c0:	003f9206 	br	803530c <__sfvwrite_r+0x224>
 80354c4:	81000517 	ldw	r4,20(r16)
 80354c8:	81400417 	ldw	r5,16(r16)
 80354cc:	80c00017 	ldw	r3,0(r16)
 80354d0:	210d883a 	add	r6,r4,r4
 80354d4:	3109883a 	add	r4,r6,r4
 80354d8:	2026d7fa 	srli	r19,r4,31
 80354dc:	1979c83a 	sub	fp,r3,r5
 80354e0:	e1800044 	addi	r6,fp,1
 80354e4:	9909883a 	add	r4,r19,r4
 80354e8:	2027d07a 	srai	r19,r4,1
 80354ec:	3489883a 	add	r4,r6,r18
 80354f0:	980d883a 	mov	r6,r19
 80354f4:	9900022e 	bgeu	r19,r4,8035500 <__sfvwrite_r+0x418>
 80354f8:	2027883a 	mov	r19,r4
 80354fc:	200d883a 	mov	r6,r4
 8035500:	1081000c 	andi	r2,r2,1024
 8035504:	10bfffcc 	andi	r2,r2,65535
 8035508:	10a0001c 	xori	r2,r2,32768
 803550c:	10a00004 	addi	r2,r2,-32768
 8035510:	a809883a 	mov	r4,r21
 8035514:	103f6b26 	beq	r2,zero,80352c4 <__sfvwrite_r+0x1dc>
 8035518:	300b883a 	mov	r5,r6
 803551c:	802e42c0 	call	802e42c <_malloc_r>
 8035520:	102f883a 	mov	r23,r2
 8035524:	103f6d26 	beq	r2,zero,80352dc <__sfvwrite_r+0x1f4>
 8035528:	81400417 	ldw	r5,16(r16)
 803552c:	1009883a 	mov	r4,r2
 8035530:	e00d883a 	mov	r6,fp
 8035534:	802ebb00 	call	802ebb0 <memcpy>
 8035538:	8080030b 	ldhu	r2,12(r16)
 803553c:	00fedfc4 	movi	r3,-1153
 8035540:	10c4703a 	and	r2,r2,r3
 8035544:	10802014 	ori	r2,r2,128
 8035548:	8080030d 	sth	r2,12(r16)
 803554c:	bf09883a 	add	r4,r23,fp
 8035550:	9f07c83a 	sub	r3,r19,fp
 8035554:	85c00415 	stw	r23,16(r16)
 8035558:	84c00515 	stw	r19,20(r16)
 803555c:	81000015 	stw	r4,0(r16)
 8035560:	902f883a 	mov	r23,r18
 8035564:	80c00215 	stw	r3,8(r16)
 8035568:	9039883a 	mov	fp,r18
 803556c:	9027883a 	mov	r19,r18
 8035570:	900f883a 	mov	r7,r18
 8035574:	003f3806 	br	8035258 <__sfvwrite_r+0x170>
 8035578:	b00b883a 	mov	r5,r22
 803557c:	980d883a 	mov	r6,r19
 8035580:	80359900 	call	8035990 <memmove>
 8035584:	80800017 	ldw	r2,0(r16)
 8035588:	a809883a 	mov	r4,r21
 803558c:	800b883a 	mov	r5,r16
 8035590:	14c5883a 	add	r2,r2,r19
 8035594:	80800015 	stw	r2,0(r16)
 8035598:	802cb540 	call	802cb54 <_fflush_r>
 803559c:	103f3926 	beq	r2,zero,8035284 <__sfvwrite_r+0x19c>
 80355a0:	003f5006 	br	80352e4 <__sfvwrite_r+0x1fc>
 80355a4:	95800044 	addi	r22,r18,1
 80355a8:	00c00044 	movi	r3,1
 80355ac:	003f5706 	br	803530c <__sfvwrite_r+0x224>
 80355b0:	80c0030b 	ldhu	r3,12(r16)
 80355b4:	00bfffc4 	movi	r2,-1
 80355b8:	18c01014 	ori	r3,r3,64
 80355bc:	80c0030d 	sth	r3,12(r16)
 80355c0:	00c00244 	movi	r3,9
 80355c4:	a8c00015 	stw	r3,0(r21)
 80355c8:	003ef906 	br	80351b0 <__sfvwrite_r+0xc8>

080355cc <_isatty_r>:
 80355cc:	defffd04 	addi	sp,sp,-12
 80355d0:	dc400115 	stw	r17,4(sp)
 80355d4:	dc000015 	stw	r16,0(sp)
 80355d8:	2023883a 	mov	r17,r4
 80355dc:	04020134 	movhi	r16,2052
 80355e0:	84132904 	addi	r16,r16,19620
 80355e4:	2809883a 	mov	r4,r5
 80355e8:	dfc00215 	stw	ra,8(sp)
 80355ec:	80000015 	stw	zero,0(r16)
 80355f0:	803c0840 	call	803c084 <isatty>
 80355f4:	00ffffc4 	movi	r3,-1
 80355f8:	10c00526 	beq	r2,r3,8035610 <_isatty_r+0x44>
 80355fc:	dfc00217 	ldw	ra,8(sp)
 8035600:	dc400117 	ldw	r17,4(sp)
 8035604:	dc000017 	ldw	r16,0(sp)
 8035608:	dec00304 	addi	sp,sp,12
 803560c:	f800283a 	ret
 8035610:	80c00017 	ldw	r3,0(r16)
 8035614:	183ff926 	beq	r3,zero,80355fc <_isatty_r+0x30>
 8035618:	88c00015 	stw	r3,0(r17)
 803561c:	dfc00217 	ldw	ra,8(sp)
 8035620:	dc400117 	ldw	r17,4(sp)
 8035624:	dc000017 	ldw	r16,0(sp)
 8035628:	dec00304 	addi	sp,sp,12
 803562c:	f800283a 	ret

08035630 <iswspace>:
 8035630:	00803fc4 	movi	r2,255
 8035634:	11000a36 	bltu	r2,r4,8035660 <iswspace+0x30>
 8035638:	00820134 	movhi	r2,2052
 803563c:	108c4304 	addi	r2,r2,12556
 8035640:	10800017 	ldw	r2,0(r2)
 8035644:	1109883a 	add	r4,r2,r4
 8035648:	20800003 	ldbu	r2,0(r4)
 803564c:	1080020c 	andi	r2,r2,8
 8035650:	10803fcc 	andi	r2,r2,255
 8035654:	1080201c 	xori	r2,r2,128
 8035658:	10bfe004 	addi	r2,r2,-128
 803565c:	f800283a 	ret
 8035660:	0005883a 	mov	r2,zero
 8035664:	f800283a 	ret

08035668 <_setlocale_r>:
 8035668:	defffc04 	addi	sp,sp,-16
 803566c:	dc800215 	stw	r18,8(sp)
 8035670:	dc400115 	stw	r17,4(sp)
 8035674:	dc000015 	stw	r16,0(sp)
 8035678:	dfc00315 	stw	ra,12(sp)
 803567c:	3021883a 	mov	r16,r6
 8035680:	2023883a 	mov	r17,r4
 8035684:	2825883a 	mov	r18,r5
 8035688:	30001626 	beq	r6,zero,80356e4 <_setlocale_r+0x7c>
 803568c:	3009883a 	mov	r4,r6
 8035690:	01420134 	movhi	r5,2052
 8035694:	2944f604 	addi	r5,r5,5080
 8035698:	802f5f40 	call	802f5f4 <strcmp>
 803569c:	10000a1e 	bne	r2,zero,80356c8 <_setlocale_r+0x60>
 80356a0:	8c800c15 	stw	r18,48(r17)
 80356a4:	8c000d15 	stw	r16,52(r17)
 80356a8:	00820134 	movhi	r2,2052
 80356ac:	1084f604 	addi	r2,r2,5080
 80356b0:	dfc00317 	ldw	ra,12(sp)
 80356b4:	dc800217 	ldw	r18,8(sp)
 80356b8:	dc400117 	ldw	r17,4(sp)
 80356bc:	dc000017 	ldw	r16,0(sp)
 80356c0:	dec00404 	addi	sp,sp,16
 80356c4:	f800283a 	ret
 80356c8:	8009883a 	mov	r4,r16
 80356cc:	01420134 	movhi	r5,2052
 80356d0:	29450904 	addi	r5,r5,5156
 80356d4:	802f5f40 	call	802f5f4 <strcmp>
 80356d8:	103ff126 	beq	r2,zero,80356a0 <_setlocale_r+0x38>
 80356dc:	0005883a 	mov	r2,zero
 80356e0:	003ff306 	br	80356b0 <_setlocale_r+0x48>
 80356e4:	00820134 	movhi	r2,2052
 80356e8:	1084f604 	addi	r2,r2,5080
 80356ec:	dfc00317 	ldw	ra,12(sp)
 80356f0:	dc800217 	ldw	r18,8(sp)
 80356f4:	dc400117 	ldw	r17,4(sp)
 80356f8:	dc000017 	ldw	r16,0(sp)
 80356fc:	dec00404 	addi	sp,sp,16
 8035700:	f800283a 	ret

08035704 <__locale_charset>:
 8035704:	00820134 	movhi	r2,2052
 8035708:	10852804 	addi	r2,r2,5280
 803570c:	f800283a 	ret

08035710 <_localeconv_r>:
 8035710:	00820134 	movhi	r2,2052
 8035714:	10852c04 	addi	r2,r2,5296
 8035718:	f800283a 	ret

0803571c <setlocale>:
 803571c:	00c20134 	movhi	r3,2052
 8035720:	18cc4504 	addi	r3,r3,12564
 8035724:	2005883a 	mov	r2,r4
 8035728:	19000017 	ldw	r4,0(r3)
 803572c:	280d883a 	mov	r6,r5
 8035730:	100b883a 	mov	r5,r2
 8035734:	80356681 	jmpi	8035668 <_setlocale_r>

08035738 <localeconv>:
 8035738:	00820134 	movhi	r2,2052
 803573c:	10852c04 	addi	r2,r2,5296
 8035740:	f800283a 	ret

08035744 <_lseek_r>:
 8035744:	defffd04 	addi	sp,sp,-12
 8035748:	dc400115 	stw	r17,4(sp)
 803574c:	dc000015 	stw	r16,0(sp)
 8035750:	2023883a 	mov	r17,r4
 8035754:	04020134 	movhi	r16,2052
 8035758:	84132904 	addi	r16,r16,19620
 803575c:	2809883a 	mov	r4,r5
 8035760:	300b883a 	mov	r5,r6
 8035764:	380d883a 	mov	r6,r7
 8035768:	dfc00215 	stw	ra,8(sp)
 803576c:	80000015 	stw	zero,0(r16)
 8035770:	803c3e40 	call	803c3e4 <lseek>
 8035774:	00ffffc4 	movi	r3,-1
 8035778:	10c00526 	beq	r2,r3,8035790 <_lseek_r+0x4c>
 803577c:	dfc00217 	ldw	ra,8(sp)
 8035780:	dc400117 	ldw	r17,4(sp)
 8035784:	dc000017 	ldw	r16,0(sp)
 8035788:	dec00304 	addi	sp,sp,12
 803578c:	f800283a 	ret
 8035790:	80c00017 	ldw	r3,0(r16)
 8035794:	183ff926 	beq	r3,zero,803577c <_lseek_r+0x38>
 8035798:	88c00015 	stw	r3,0(r17)
 803579c:	dfc00217 	ldw	ra,8(sp)
 80357a0:	dc400117 	ldw	r17,4(sp)
 80357a4:	dc000017 	ldw	r16,0(sp)
 80357a8:	dec00304 	addi	sp,sp,12
 80357ac:	f800283a 	ret

080357b0 <_mbrtowc_r>:
 80357b0:	defffc04 	addi	sp,sp,-16
 80357b4:	dc000115 	stw	r16,4(sp)
 80357b8:	dc000417 	ldw	r16,16(sp)
 80357bc:	dc400215 	stw	r17,8(sp)
 80357c0:	dfc00315 	stw	ra,12(sp)
 80357c4:	dc000015 	stw	r16,0(sp)
 80357c8:	2023883a 	mov	r17,r4
 80357cc:	30000b26 	beq	r6,zero,80357fc <_mbrtowc_r+0x4c>
 80357d0:	80358540 	call	8035854 <_mbtowc_r>
 80357d4:	00ffffc4 	movi	r3,-1
 80357d8:	10c0031e 	bne	r2,r3,80357e8 <_mbrtowc_r+0x38>
 80357dc:	80000015 	stw	zero,0(r16)
 80357e0:	00c02284 	movi	r3,138
 80357e4:	88c00015 	stw	r3,0(r17)
 80357e8:	dfc00317 	ldw	ra,12(sp)
 80357ec:	dc400217 	ldw	r17,8(sp)
 80357f0:	dc000117 	ldw	r16,4(sp)
 80357f4:	dec00404 	addi	sp,sp,16
 80357f8:	f800283a 	ret
 80357fc:	000b883a 	mov	r5,zero
 8035800:	01820134 	movhi	r6,2052
 8035804:	31850904 	addi	r6,r6,5156
 8035808:	01c00044 	movi	r7,1
 803580c:	80358540 	call	8035854 <_mbtowc_r>
 8035810:	003ff006 	br	80357d4 <_mbrtowc_r+0x24>

08035814 <mbrtowc>:
 8035814:	00820134 	movhi	r2,2052
 8035818:	108c4504 	addi	r2,r2,12564
 803581c:	2011883a 	mov	r8,r4
 8035820:	11000017 	ldw	r4,0(r2)
 8035824:	defffe04 	addi	sp,sp,-8
 8035828:	2807883a 	mov	r3,r5
 803582c:	3005883a 	mov	r2,r6
 8035830:	d9c00015 	stw	r7,0(sp)
 8035834:	400b883a 	mov	r5,r8
 8035838:	180d883a 	mov	r6,r3
 803583c:	100f883a 	mov	r7,r2
 8035840:	dfc00115 	stw	ra,4(sp)
 8035844:	80357b00 	call	80357b0 <_mbrtowc_r>
 8035848:	dfc00117 	ldw	ra,4(sp)
 803584c:	dec00204 	addi	sp,sp,8
 8035850:	f800283a 	ret

08035854 <_mbtowc_r>:
 8035854:	deffff04 	addi	sp,sp,-4
 8035858:	28000826 	beq	r5,zero,803587c <_mbtowc_r+0x28>
 803585c:	30000926 	beq	r6,zero,8035884 <_mbtowc_r+0x30>
 8035860:	38000b26 	beq	r7,zero,8035890 <_mbtowc_r+0x3c>
 8035864:	30800003 	ldbu	r2,0(r6)
 8035868:	28800015 	stw	r2,0(r5)
 803586c:	30800003 	ldbu	r2,0(r6)
 8035870:	1004c03a 	cmpne	r2,r2,zero
 8035874:	dec00104 	addi	sp,sp,4
 8035878:	f800283a 	ret
 803587c:	d80b883a 	mov	r5,sp
 8035880:	303ff71e 	bne	r6,zero,8035860 <_mbtowc_r+0xc>
 8035884:	0005883a 	mov	r2,zero
 8035888:	dec00104 	addi	sp,sp,4
 803588c:	f800283a 	ret
 8035890:	00bfff84 	movi	r2,-2
 8035894:	003ff706 	br	8035874 <_mbtowc_r+0x20>

08035898 <memchr>:
 8035898:	008000c4 	movi	r2,3
 803589c:	29403fcc 	andi	r5,r5,255
 80358a0:	1180282e 	bgeu	r2,r6,8035944 <memchr+0xac>
 80358a4:	2086703a 	and	r3,r4,r2
 80358a8:	1800351e 	bne	r3,zero,8035980 <memchr+0xe8>
 80358ac:	2816923a 	slli	r11,r5,8
 80358b0:	2093883a 	add	r9,r4,r2
 80358b4:	22000084 	addi	r8,r4,2
 80358b8:	5957883a 	add	r11,r11,r5
 80358bc:	5816923a 	slli	r11,r11,8
 80358c0:	20c00044 	addi	r3,r4,1
 80358c4:	037fbff4 	movhi	r13,65279
 80358c8:	6b7fbfc4 	addi	r13,r13,-257
 80358cc:	5957883a 	add	r11,r11,r5
 80358d0:	5816923a 	slli	r11,r11,8
 80358d4:	03202074 	movhi	r12,32897
 80358d8:	63202004 	addi	r12,r12,-32640
 80358dc:	101d883a 	mov	r14,r2
 80358e0:	5957883a 	add	r11,r11,r5
 80358e4:	21c00017 	ldw	r7,0(r4)
 80358e8:	31bfff04 	addi	r6,r6,-4
 80358ec:	1805883a 	mov	r2,r3
 80358f0:	3acef03a 	xor	r7,r7,r11
 80358f4:	3b55883a 	add	r10,r7,r13
 80358f8:	01ce303a 	nor	r7,zero,r7
 80358fc:	51ce703a 	and	r7,r10,r7
 8035900:	3b0e703a 	and	r7,r7,r12
 8035904:	38000a26 	beq	r7,zero,8035930 <memchr+0x98>
 8035908:	21c00003 	ldbu	r7,0(r4)
 803590c:	39401e26 	beq	r7,r5,8035988 <memchr+0xf0>
 8035910:	19c00003 	ldbu	r7,0(r3)
 8035914:	39401926 	beq	r7,r5,803597c <memchr+0xe4>
 8035918:	41c00003 	ldbu	r7,0(r8)
 803591c:	4005883a 	mov	r2,r8
 8035920:	39401626 	beq	r7,r5,803597c <memchr+0xe4>
 8035924:	49c00003 	ldbu	r7,0(r9)
 8035928:	4805883a 	mov	r2,r9
 803592c:	39401326 	beq	r7,r5,803597c <memchr+0xe4>
 8035930:	21000104 	addi	r4,r4,4
 8035934:	4a400104 	addi	r9,r9,4
 8035938:	42000104 	addi	r8,r8,4
 803593c:	18c00104 	addi	r3,r3,4
 8035940:	71bfe836 	bltu	r14,r6,80358e4 <memchr+0x4c>
 8035944:	2005883a 	mov	r2,r4
 8035948:	30000a26 	beq	r6,zero,8035974 <memchr+0xdc>
 803594c:	10c00003 	ldbu	r3,0(r2)
 8035950:	19400a26 	beq	r3,r5,803597c <memchr+0xe4>
 8035954:	10c00044 	addi	r3,r2,1
 8035958:	118d883a 	add	r6,r2,r6
 803595c:	00000306 	br	803596c <memchr+0xd4>
 8035960:	11000003 	ldbu	r4,0(r2)
 8035964:	18c00044 	addi	r3,r3,1
 8035968:	21400426 	beq	r4,r5,803597c <memchr+0xe4>
 803596c:	1805883a 	mov	r2,r3
 8035970:	19bffb1e 	bne	r3,r6,8035960 <memchr+0xc8>
 8035974:	0005883a 	mov	r2,zero
 8035978:	f800283a 	ret
 803597c:	f800283a 	ret
 8035980:	2005883a 	mov	r2,r4
 8035984:	003ff106 	br	803594c <memchr+0xb4>
 8035988:	2005883a 	mov	r2,r4
 803598c:	f800283a 	ret

08035990 <memmove>:
 8035990:	defffb04 	addi	sp,sp,-20
 8035994:	dc000015 	stw	r16,0(sp)
 8035998:	dfc00415 	stw	ra,16(sp)
 803599c:	dcc00315 	stw	r19,12(sp)
 80359a0:	dc800215 	stw	r18,8(sp)
 80359a4:	dc400115 	stw	r17,4(sp)
 80359a8:	2021883a 	mov	r16,r4
 80359ac:	300f883a 	mov	r7,r6
 80359b0:	2900122e 	bgeu	r5,r4,80359fc <memmove+0x6c>
 80359b4:	2987883a 	add	r3,r5,r6
 80359b8:	20c0102e 	bgeu	r4,r3,80359fc <memmove+0x6c>
 80359bc:	218b883a 	add	r5,r4,r6
 80359c0:	1989c83a 	sub	r4,r3,r6
 80359c4:	30000526 	beq	r6,zero,80359dc <memmove+0x4c>
 80359c8:	18ffffc4 	addi	r3,r3,-1
 80359cc:	18800003 	ldbu	r2,0(r3)
 80359d0:	297fffc4 	addi	r5,r5,-1
 80359d4:	28800005 	stb	r2,0(r5)
 80359d8:	193ffb1e 	bne	r3,r4,80359c8 <memmove+0x38>
 80359dc:	8005883a 	mov	r2,r16
 80359e0:	dfc00417 	ldw	ra,16(sp)
 80359e4:	dcc00317 	ldw	r19,12(sp)
 80359e8:	dc800217 	ldw	r18,8(sp)
 80359ec:	dc400117 	ldw	r17,4(sp)
 80359f0:	dc000017 	ldw	r16,0(sp)
 80359f4:	dec00504 	addi	sp,sp,20
 80359f8:	f800283a 	ret
 80359fc:	008003c4 	movi	r2,15
 8035a00:	1180422e 	bgeu	r2,r6,8035b0c <memmove+0x17c>
 8035a04:	2c04b03a 	or	r2,r5,r16
 8035a08:	108000cc 	andi	r2,r2,3
 8035a0c:	10003f1e 	bne	r2,zero,8035b0c <memmove+0x17c>
 8035a10:	32bffc04 	addi	r10,r6,-16
 8035a14:	5014d13a 	srli	r10,r10,4
 8035a18:	81000404 	addi	r4,r16,16
 8035a1c:	8007883a 	mov	r3,r16
 8035a20:	5004913a 	slli	r2,r10,4
 8035a24:	280f883a 	mov	r7,r5
 8035a28:	2089883a 	add	r4,r4,r2
 8035a2c:	38800017 	ldw	r2,0(r7)
 8035a30:	18c00404 	addi	r3,r3,16
 8035a34:	39c00404 	addi	r7,r7,16
 8035a38:	18bffc15 	stw	r2,-16(r3)
 8035a3c:	38bffd17 	ldw	r2,-12(r7)
 8035a40:	18bffd15 	stw	r2,-12(r3)
 8035a44:	38bffe17 	ldw	r2,-8(r7)
 8035a48:	18bffe15 	stw	r2,-8(r3)
 8035a4c:	38bfff17 	ldw	r2,-4(r7)
 8035a50:	18bfff15 	stw	r2,-4(r3)
 8035a54:	193ff51e 	bne	r3,r4,8035a2c <memmove+0x9c>
 8035a58:	52800044 	addi	r10,r10,1
 8035a5c:	5014913a 	slli	r10,r10,4
 8035a60:	31c003cc 	andi	r7,r6,15
 8035a64:	008000c4 	movi	r2,3
 8035a68:	8287883a 	add	r3,r16,r10
 8035a6c:	2a95883a 	add	r10,r5,r10
 8035a70:	11c0282e 	bgeu	r2,r7,8035b14 <memmove+0x184>
 8035a74:	3c7fff04 	addi	r17,r7,-4
 8035a78:	8808d0ba 	srli	r4,r17,2
 8035a7c:	1a400104 	addi	r9,r3,4
 8035a80:	180d883a 	mov	r6,r3
 8035a84:	2105883a 	add	r2,r4,r4
 8035a88:	1085883a 	add	r2,r2,r2
 8035a8c:	4893883a 	add	r9,r9,r2
 8035a90:	5005883a 	mov	r2,r10
 8035a94:	12000017 	ldw	r8,0(r2)
 8035a98:	31800104 	addi	r6,r6,4
 8035a9c:	10800104 	addi	r2,r2,4
 8035aa0:	323fff15 	stw	r8,-4(r6)
 8035aa4:	327ffb1e 	bne	r6,r9,8035a94 <memmove+0x104>
 8035aa8:	20800044 	addi	r2,r4,1
 8035aac:	1085883a 	add	r2,r2,r2
 8035ab0:	1085883a 	add	r2,r2,r2
 8035ab4:	017fff04 	movi	r5,-4
 8035ab8:	18a5883a 	add	r18,r3,r2
 8035abc:	50a7883a 	add	r19,r10,r2
 8035ac0:	802c2180 	call	802c218 <__mulsi3>
 8035ac4:	144f883a 	add	r7,r2,r17
 8035ac8:	980b883a 	mov	r5,r19
 8035acc:	9007883a 	mov	r3,r18
 8035ad0:	383fc226 	beq	r7,zero,80359dc <memmove+0x4c>
 8035ad4:	19cf883a 	add	r7,r3,r7
 8035ad8:	29800003 	ldbu	r6,0(r5)
 8035adc:	18c00044 	addi	r3,r3,1
 8035ae0:	29400044 	addi	r5,r5,1
 8035ae4:	19bfffc5 	stb	r6,-1(r3)
 8035ae8:	19fffb1e 	bne	r3,r7,8035ad8 <memmove+0x148>
 8035aec:	8005883a 	mov	r2,r16
 8035af0:	dfc00417 	ldw	ra,16(sp)
 8035af4:	dcc00317 	ldw	r19,12(sp)
 8035af8:	dc800217 	ldw	r18,8(sp)
 8035afc:	dc400117 	ldw	r17,4(sp)
 8035b00:	dc000017 	ldw	r16,0(sp)
 8035b04:	dec00504 	addi	sp,sp,20
 8035b08:	f800283a 	ret
 8035b0c:	8007883a 	mov	r3,r16
 8035b10:	003fef06 	br	8035ad0 <memmove+0x140>
 8035b14:	500b883a 	mov	r5,r10
 8035b18:	003fed06 	br	8035ad0 <memmove+0x140>

08035b1c <_Balloc>:
 8035b1c:	20801317 	ldw	r2,76(r4)
 8035b20:	defffc04 	addi	sp,sp,-16
 8035b24:	dc400115 	stw	r17,4(sp)
 8035b28:	dc000015 	stw	r16,0(sp)
 8035b2c:	dfc00315 	stw	ra,12(sp)
 8035b30:	dc800215 	stw	r18,8(sp)
 8035b34:	2023883a 	mov	r17,r4
 8035b38:	2821883a 	mov	r16,r5
 8035b3c:	10000f26 	beq	r2,zero,8035b7c <_Balloc+0x60>
 8035b40:	8407883a 	add	r3,r16,r16
 8035b44:	18c7883a 	add	r3,r3,r3
 8035b48:	10c7883a 	add	r3,r2,r3
 8035b4c:	18800017 	ldw	r2,0(r3)
 8035b50:	10001126 	beq	r2,zero,8035b98 <_Balloc+0x7c>
 8035b54:	11000017 	ldw	r4,0(r2)
 8035b58:	19000015 	stw	r4,0(r3)
 8035b5c:	10000415 	stw	zero,16(r2)
 8035b60:	10000315 	stw	zero,12(r2)
 8035b64:	dfc00317 	ldw	ra,12(sp)
 8035b68:	dc800217 	ldw	r18,8(sp)
 8035b6c:	dc400117 	ldw	r17,4(sp)
 8035b70:	dc000017 	ldw	r16,0(sp)
 8035b74:	dec00404 	addi	sp,sp,16
 8035b78:	f800283a 	ret
 8035b7c:	01400104 	movi	r5,4
 8035b80:	01800404 	movi	r6,16
 8035b84:	803996c0 	call	803996c <_calloc_r>
 8035b88:	88801315 	stw	r2,76(r17)
 8035b8c:	103fec1e 	bne	r2,zero,8035b40 <_Balloc+0x24>
 8035b90:	0005883a 	mov	r2,zero
 8035b94:	003ff306 	br	8035b64 <_Balloc+0x48>
 8035b98:	01400044 	movi	r5,1
 8035b9c:	2c24983a 	sll	r18,r5,r16
 8035ba0:	8809883a 	mov	r4,r17
 8035ba4:	91800144 	addi	r6,r18,5
 8035ba8:	318d883a 	add	r6,r6,r6
 8035bac:	318d883a 	add	r6,r6,r6
 8035bb0:	803996c0 	call	803996c <_calloc_r>
 8035bb4:	103ff626 	beq	r2,zero,8035b90 <_Balloc+0x74>
 8035bb8:	14000115 	stw	r16,4(r2)
 8035bbc:	14800215 	stw	r18,8(r2)
 8035bc0:	003fe606 	br	8035b5c <_Balloc+0x40>

08035bc4 <_Bfree>:
 8035bc4:	28000826 	beq	r5,zero,8035be8 <_Bfree+0x24>
 8035bc8:	28c00117 	ldw	r3,4(r5)
 8035bcc:	20801317 	ldw	r2,76(r4)
 8035bd0:	18c7883a 	add	r3,r3,r3
 8035bd4:	18c7883a 	add	r3,r3,r3
 8035bd8:	10c5883a 	add	r2,r2,r3
 8035bdc:	10c00017 	ldw	r3,0(r2)
 8035be0:	28c00015 	stw	r3,0(r5)
 8035be4:	11400015 	stw	r5,0(r2)
 8035be8:	f800283a 	ret

08035bec <__multadd>:
 8035bec:	defff604 	addi	sp,sp,-40
 8035bf0:	dd400515 	stw	r21,20(sp)
 8035bf4:	2d400417 	ldw	r21,16(r5)
 8035bf8:	df000815 	stw	fp,32(sp)
 8035bfc:	ddc00715 	stw	r23,28(sp)
 8035c00:	dd800615 	stw	r22,24(sp)
 8035c04:	dd000415 	stw	r20,16(sp)
 8035c08:	dc400115 	stw	r17,4(sp)
 8035c0c:	dc000015 	stw	r16,0(sp)
 8035c10:	dfc00915 	stw	ra,36(sp)
 8035c14:	dcc00315 	stw	r19,12(sp)
 8035c18:	dc800215 	stw	r18,8(sp)
 8035c1c:	282d883a 	mov	r22,r5
 8035c20:	202f883a 	mov	r23,r4
 8035c24:	3029883a 	mov	r20,r6
 8035c28:	3839883a 	mov	fp,r7
 8035c2c:	2c000504 	addi	r16,r5,20
 8035c30:	0023883a 	mov	r17,zero
 8035c34:	84c00017 	ldw	r19,0(r16)
 8035c38:	a00b883a 	mov	r5,r20
 8035c3c:	8c400044 	addi	r17,r17,1
 8035c40:	993fffcc 	andi	r4,r19,65535
 8035c44:	802c2180 	call	802c218 <__mulsi3>
 8035c48:	1725883a 	add	r18,r2,fp
 8035c4c:	9808d43a 	srli	r4,r19,16
 8035c50:	9026d43a 	srli	r19,r18,16
 8035c54:	a00b883a 	mov	r5,r20
 8035c58:	802c2180 	call	802c218 <__mulsi3>
 8035c5c:	988f883a 	add	r7,r19,r2
 8035c60:	3804943a 	slli	r2,r7,16
 8035c64:	94bfffcc 	andi	r18,r18,65535
 8035c68:	3838d43a 	srli	fp,r7,16
 8035c6c:	14a5883a 	add	r18,r2,r18
 8035c70:	84800015 	stw	r18,0(r16)
 8035c74:	84000104 	addi	r16,r16,4
 8035c78:	8d7fee16 	blt	r17,r21,8035c34 <__multadd+0x48>
 8035c7c:	e0000926 	beq	fp,zero,8035ca4 <__multadd+0xb8>
 8035c80:	b0800217 	ldw	r2,8(r22)
 8035c84:	a880140e 	bge	r21,r2,8035cd8 <__multadd+0xec>
 8035c88:	a8800144 	addi	r2,r21,5
 8035c8c:	1085883a 	add	r2,r2,r2
 8035c90:	1085883a 	add	r2,r2,r2
 8035c94:	b085883a 	add	r2,r22,r2
 8035c98:	ad400044 	addi	r21,r21,1
 8035c9c:	17000015 	stw	fp,0(r2)
 8035ca0:	b5400415 	stw	r21,16(r22)
 8035ca4:	b005883a 	mov	r2,r22
 8035ca8:	dfc00917 	ldw	ra,36(sp)
 8035cac:	df000817 	ldw	fp,32(sp)
 8035cb0:	ddc00717 	ldw	r23,28(sp)
 8035cb4:	dd800617 	ldw	r22,24(sp)
 8035cb8:	dd400517 	ldw	r21,20(sp)
 8035cbc:	dd000417 	ldw	r20,16(sp)
 8035cc0:	dcc00317 	ldw	r19,12(sp)
 8035cc4:	dc800217 	ldw	r18,8(sp)
 8035cc8:	dc400117 	ldw	r17,4(sp)
 8035ccc:	dc000017 	ldw	r16,0(sp)
 8035cd0:	dec00a04 	addi	sp,sp,40
 8035cd4:	f800283a 	ret
 8035cd8:	b1400117 	ldw	r5,4(r22)
 8035cdc:	b809883a 	mov	r4,r23
 8035ce0:	29400044 	addi	r5,r5,1
 8035ce4:	8035b1c0 	call	8035b1c <_Balloc>
 8035ce8:	b1800417 	ldw	r6,16(r22)
 8035cec:	b1400304 	addi	r5,r22,12
 8035cf0:	11000304 	addi	r4,r2,12
 8035cf4:	31800084 	addi	r6,r6,2
 8035cf8:	318d883a 	add	r6,r6,r6
 8035cfc:	318d883a 	add	r6,r6,r6
 8035d00:	1021883a 	mov	r16,r2
 8035d04:	802ebb00 	call	802ebb0 <memcpy>
 8035d08:	b0c00117 	ldw	r3,4(r22)
 8035d0c:	b8801317 	ldw	r2,76(r23)
 8035d10:	18c7883a 	add	r3,r3,r3
 8035d14:	18c7883a 	add	r3,r3,r3
 8035d18:	10c5883a 	add	r2,r2,r3
 8035d1c:	10c00017 	ldw	r3,0(r2)
 8035d20:	b0c00015 	stw	r3,0(r22)
 8035d24:	15800015 	stw	r22,0(r2)
 8035d28:	802d883a 	mov	r22,r16
 8035d2c:	003fd606 	br	8035c88 <__multadd+0x9c>

08035d30 <__s2b>:
 8035d30:	defff904 	addi	sp,sp,-28
 8035d34:	dd000415 	stw	r20,16(sp)
 8035d38:	dc400115 	stw	r17,4(sp)
 8035d3c:	2829883a 	mov	r20,r5
 8035d40:	2023883a 	mov	r17,r4
 8035d44:	01400244 	movi	r5,9
 8035d48:	39000204 	addi	r4,r7,8
 8035d4c:	dcc00315 	stw	r19,12(sp)
 8035d50:	dc800215 	stw	r18,8(sp)
 8035d54:	dfc00615 	stw	ra,24(sp)
 8035d58:	dd400515 	stw	r21,20(sp)
 8035d5c:	dc000015 	stw	r16,0(sp)
 8035d60:	3825883a 	mov	r18,r7
 8035d64:	3027883a 	mov	r19,r6
 8035d68:	802c15c0 	call	802c15c <__divsi3>
 8035d6c:	00c00044 	movi	r3,1
 8035d70:	000b883a 	mov	r5,zero
 8035d74:	1880030e 	bge	r3,r2,8035d84 <__s2b+0x54>
 8035d78:	18c7883a 	add	r3,r3,r3
 8035d7c:	29400044 	addi	r5,r5,1
 8035d80:	18bffd16 	blt	r3,r2,8035d78 <__s2b+0x48>
 8035d84:	8809883a 	mov	r4,r17
 8035d88:	8035b1c0 	call	8035b1c <_Balloc>
 8035d8c:	d8c00717 	ldw	r3,28(sp)
 8035d90:	10c00515 	stw	r3,20(r2)
 8035d94:	00c00044 	movi	r3,1
 8035d98:	10c00415 	stw	r3,16(r2)
 8035d9c:	00c00244 	movi	r3,9
 8035da0:	1cc0210e 	bge	r3,r19,8035e28 <__s2b+0xf8>
 8035da4:	a0eb883a 	add	r21,r20,r3
 8035da8:	a821883a 	mov	r16,r21
 8035dac:	a4e9883a 	add	r20,r20,r19
 8035db0:	81c00007 	ldb	r7,0(r16)
 8035db4:	8809883a 	mov	r4,r17
 8035db8:	84000044 	addi	r16,r16,1
 8035dbc:	100b883a 	mov	r5,r2
 8035dc0:	01800284 	movi	r6,10
 8035dc4:	39fff404 	addi	r7,r7,-48
 8035dc8:	8035bec0 	call	8035bec <__multadd>
 8035dcc:	853ff81e 	bne	r16,r20,8035db0 <__s2b+0x80>
 8035dd0:	ace1883a 	add	r16,r21,r19
 8035dd4:	843ffe04 	addi	r16,r16,-8
 8035dd8:	9c800a0e 	bge	r19,r18,8035e04 <__s2b+0xd4>
 8035ddc:	94e5c83a 	sub	r18,r18,r19
 8035de0:	84a5883a 	add	r18,r16,r18
 8035de4:	81c00007 	ldb	r7,0(r16)
 8035de8:	8809883a 	mov	r4,r17
 8035dec:	84000044 	addi	r16,r16,1
 8035df0:	100b883a 	mov	r5,r2
 8035df4:	01800284 	movi	r6,10
 8035df8:	39fff404 	addi	r7,r7,-48
 8035dfc:	8035bec0 	call	8035bec <__multadd>
 8035e00:	84bff81e 	bne	r16,r18,8035de4 <__s2b+0xb4>
 8035e04:	dfc00617 	ldw	ra,24(sp)
 8035e08:	dd400517 	ldw	r21,20(sp)
 8035e0c:	dd000417 	ldw	r20,16(sp)
 8035e10:	dcc00317 	ldw	r19,12(sp)
 8035e14:	dc800217 	ldw	r18,8(sp)
 8035e18:	dc400117 	ldw	r17,4(sp)
 8035e1c:	dc000017 	ldw	r16,0(sp)
 8035e20:	dec00704 	addi	sp,sp,28
 8035e24:	f800283a 	ret
 8035e28:	a4000284 	addi	r16,r20,10
 8035e2c:	1827883a 	mov	r19,r3
 8035e30:	003fe906 	br	8035dd8 <__s2b+0xa8>

08035e34 <__hi0bits>:
 8035e34:	20bfffec 	andhi	r2,r4,65535
 8035e38:	1000141e 	bne	r2,zero,8035e8c <__hi0bits+0x58>
 8035e3c:	2008943a 	slli	r4,r4,16
 8035e40:	00800404 	movi	r2,16
 8035e44:	20ffc02c 	andhi	r3,r4,65280
 8035e48:	1800021e 	bne	r3,zero,8035e54 <__hi0bits+0x20>
 8035e4c:	2008923a 	slli	r4,r4,8
 8035e50:	10800204 	addi	r2,r2,8
 8035e54:	20fc002c 	andhi	r3,r4,61440
 8035e58:	1800021e 	bne	r3,zero,8035e64 <__hi0bits+0x30>
 8035e5c:	2008913a 	slli	r4,r4,4
 8035e60:	10800104 	addi	r2,r2,4
 8035e64:	20f0002c 	andhi	r3,r4,49152
 8035e68:	1800031e 	bne	r3,zero,8035e78 <__hi0bits+0x44>
 8035e6c:	2109883a 	add	r4,r4,r4
 8035e70:	10800084 	addi	r2,r2,2
 8035e74:	2109883a 	add	r4,r4,r4
 8035e78:	20000316 	blt	r4,zero,8035e88 <__hi0bits+0x54>
 8035e7c:	2110002c 	andhi	r4,r4,16384
 8035e80:	2000041e 	bne	r4,zero,8035e94 <__hi0bits+0x60>
 8035e84:	00800804 	movi	r2,32
 8035e88:	f800283a 	ret
 8035e8c:	0005883a 	mov	r2,zero
 8035e90:	003fec06 	br	8035e44 <__hi0bits+0x10>
 8035e94:	10800044 	addi	r2,r2,1
 8035e98:	f800283a 	ret

08035e9c <__lo0bits>:
 8035e9c:	20c00017 	ldw	r3,0(r4)
 8035ea0:	188001cc 	andi	r2,r3,7
 8035ea4:	10000826 	beq	r2,zero,8035ec8 <__lo0bits+0x2c>
 8035ea8:	1880004c 	andi	r2,r3,1
 8035eac:	1000211e 	bne	r2,zero,8035f34 <__lo0bits+0x98>
 8035eb0:	1880008c 	andi	r2,r3,2
 8035eb4:	1000211e 	bne	r2,zero,8035f3c <__lo0bits+0xa0>
 8035eb8:	1806d0ba 	srli	r3,r3,2
 8035ebc:	00800084 	movi	r2,2
 8035ec0:	20c00015 	stw	r3,0(r4)
 8035ec4:	f800283a 	ret
 8035ec8:	18bfffcc 	andi	r2,r3,65535
 8035ecc:	10001326 	beq	r2,zero,8035f1c <__lo0bits+0x80>
 8035ed0:	0005883a 	mov	r2,zero
 8035ed4:	19403fcc 	andi	r5,r3,255
 8035ed8:	2800021e 	bne	r5,zero,8035ee4 <__lo0bits+0x48>
 8035edc:	1806d23a 	srli	r3,r3,8
 8035ee0:	10800204 	addi	r2,r2,8
 8035ee4:	194003cc 	andi	r5,r3,15
 8035ee8:	2800021e 	bne	r5,zero,8035ef4 <__lo0bits+0x58>
 8035eec:	1806d13a 	srli	r3,r3,4
 8035ef0:	10800104 	addi	r2,r2,4
 8035ef4:	194000cc 	andi	r5,r3,3
 8035ef8:	2800021e 	bne	r5,zero,8035f04 <__lo0bits+0x68>
 8035efc:	1806d0ba 	srli	r3,r3,2
 8035f00:	10800084 	addi	r2,r2,2
 8035f04:	1940004c 	andi	r5,r3,1
 8035f08:	2800081e 	bne	r5,zero,8035f2c <__lo0bits+0x90>
 8035f0c:	1806d07a 	srli	r3,r3,1
 8035f10:	1800051e 	bne	r3,zero,8035f28 <__lo0bits+0x8c>
 8035f14:	00800804 	movi	r2,32
 8035f18:	f800283a 	ret
 8035f1c:	1806d43a 	srli	r3,r3,16
 8035f20:	00800404 	movi	r2,16
 8035f24:	003feb06 	br	8035ed4 <__lo0bits+0x38>
 8035f28:	10800044 	addi	r2,r2,1
 8035f2c:	20c00015 	stw	r3,0(r4)
 8035f30:	f800283a 	ret
 8035f34:	0005883a 	mov	r2,zero
 8035f38:	f800283a 	ret
 8035f3c:	1806d07a 	srli	r3,r3,1
 8035f40:	00800044 	movi	r2,1
 8035f44:	20c00015 	stw	r3,0(r4)
 8035f48:	f800283a 	ret

08035f4c <__i2b>:
 8035f4c:	defffd04 	addi	sp,sp,-12
 8035f50:	dc000015 	stw	r16,0(sp)
 8035f54:	04000044 	movi	r16,1
 8035f58:	dc400115 	stw	r17,4(sp)
 8035f5c:	2823883a 	mov	r17,r5
 8035f60:	800b883a 	mov	r5,r16
 8035f64:	dfc00215 	stw	ra,8(sp)
 8035f68:	8035b1c0 	call	8035b1c <_Balloc>
 8035f6c:	14400515 	stw	r17,20(r2)
 8035f70:	14000415 	stw	r16,16(r2)
 8035f74:	dfc00217 	ldw	ra,8(sp)
 8035f78:	dc400117 	ldw	r17,4(sp)
 8035f7c:	dc000017 	ldw	r16,0(sp)
 8035f80:	dec00304 	addi	sp,sp,12
 8035f84:	f800283a 	ret

08035f88 <__multiply>:
 8035f88:	defff004 	addi	sp,sp,-64
 8035f8c:	dc800815 	stw	r18,32(sp)
 8035f90:	dc400715 	stw	r17,28(sp)
 8035f94:	34800417 	ldw	r18,16(r6)
 8035f98:	2c400417 	ldw	r17,16(r5)
 8035f9c:	ddc00d15 	stw	r23,52(sp)
 8035fa0:	dc000615 	stw	r16,24(sp)
 8035fa4:	dfc00f15 	stw	ra,60(sp)
 8035fa8:	df000e15 	stw	fp,56(sp)
 8035fac:	dd800c15 	stw	r22,48(sp)
 8035fb0:	dd400b15 	stw	r21,44(sp)
 8035fb4:	dd000a15 	stw	r20,40(sp)
 8035fb8:	dcc00915 	stw	r19,36(sp)
 8035fbc:	2821883a 	mov	r16,r5
 8035fc0:	302f883a 	mov	r23,r6
 8035fc4:	8c80050e 	bge	r17,r18,8035fdc <__multiply+0x54>
 8035fc8:	8807883a 	mov	r3,r17
 8035fcc:	3021883a 	mov	r16,r6
 8035fd0:	9023883a 	mov	r17,r18
 8035fd4:	282f883a 	mov	r23,r5
 8035fd8:	1825883a 	mov	r18,r3
 8035fdc:	80800217 	ldw	r2,8(r16)
 8035fe0:	8c87883a 	add	r3,r17,r18
 8035fe4:	d8c00115 	stw	r3,4(sp)
 8035fe8:	81400117 	ldw	r5,4(r16)
 8035fec:	10c0010e 	bge	r2,r3,8035ff4 <__multiply+0x6c>
 8035ff0:	29400044 	addi	r5,r5,1
 8035ff4:	8035b1c0 	call	8035b1c <_Balloc>
 8035ff8:	d8c00117 	ldw	r3,4(sp)
 8035ffc:	d8800515 	stw	r2,20(sp)
 8036000:	14c00504 	addi	r19,r2,20
 8036004:	1d400144 	addi	r21,r3,5
 8036008:	ad6b883a 	add	r21,r21,r21
 803600c:	ad6b883a 	add	r21,r21,r21
 8036010:	156b883a 	add	r21,r2,r21
 8036014:	dd400215 	stw	r21,8(sp)
 8036018:	9805883a 	mov	r2,r19
 803601c:	9d40042e 	bgeu	r19,r21,8036030 <__multiply+0xa8>
 8036020:	d8c00217 	ldw	r3,8(sp)
 8036024:	10000015 	stw	zero,0(r2)
 8036028:	10800104 	addi	r2,r2,4
 803602c:	10fffc36 	bltu	r2,r3,8036020 <__multiply+0x98>
 8036030:	94800144 	addi	r18,r18,5
 8036034:	94a5883a 	add	r18,r18,r18
 8036038:	94ad883a 	add	r22,r18,r18
 803603c:	8c400144 	addi	r17,r17,5
 8036040:	8c63883a 	add	r17,r17,r17
 8036044:	bdad883a 	add	r22,r23,r22
 8036048:	80c00504 	addi	r3,r16,20
 803604c:	8c63883a 	add	r17,r17,r17
 8036050:	bc800504 	addi	r18,r23,20
 8036054:	dd800315 	stw	r22,12(sp)
 8036058:	d8c00415 	stw	r3,16(sp)
 803605c:	dcc00015 	stw	r19,0(sp)
 8036060:	8463883a 	add	r17,r16,r17
 8036064:	9580412e 	bgeu	r18,r22,803616c <__multiply+0x1e4>
 8036068:	90800017 	ldw	r2,0(r18)
 803606c:	173fffcc 	andi	fp,r2,65535
 8036070:	e0001a26 	beq	fp,zero,80360dc <__multiply+0x154>
 8036074:	dd000017 	ldw	r20,0(sp)
 8036078:	dd800417 	ldw	r22,16(sp)
 803607c:	002b883a 	mov	r21,zero
 8036080:	b4c00017 	ldw	r19,0(r22)
 8036084:	a4000017 	ldw	r16,0(r20)
 8036088:	e00b883a 	mov	r5,fp
 803608c:	993fffcc 	andi	r4,r19,65535
 8036090:	802c2180 	call	802c218 <__mulsi3>
 8036094:	9808d43a 	srli	r4,r19,16
 8036098:	817fffcc 	andi	r5,r16,65535
 803609c:	1145883a 	add	r2,r2,r5
 80360a0:	e00b883a 	mov	r5,fp
 80360a4:	1567883a 	add	r19,r2,r21
 80360a8:	8020d43a 	srli	r16,r16,16
 80360ac:	802c2180 	call	802c218 <__mulsi3>
 80360b0:	9808d43a 	srli	r4,r19,16
 80360b4:	1405883a 	add	r2,r2,r16
 80360b8:	a4c0000d 	sth	r19,0(r20)
 80360bc:	110f883a 	add	r7,r2,r4
 80360c0:	a1c0008d 	sth	r7,2(r20)
 80360c4:	b5800104 	addi	r22,r22,4
 80360c8:	382ad43a 	srli	r21,r7,16
 80360cc:	a5000104 	addi	r20,r20,4
 80360d0:	b47feb36 	bltu	r22,r17,8036080 <__multiply+0xf8>
 80360d4:	a5400015 	stw	r21,0(r20)
 80360d8:	90800017 	ldw	r2,0(r18)
 80360dc:	1038d43a 	srli	fp,r2,16
 80360e0:	e0001c26 	beq	fp,zero,8036154 <__multiply+0x1cc>
 80360e4:	d8c00017 	ldw	r3,0(sp)
 80360e8:	dd000417 	ldw	r20,16(sp)
 80360ec:	002b883a 	mov	r21,zero
 80360f0:	1d800017 	ldw	r22,0(r3)
 80360f4:	182f883a 	mov	r23,r3
 80360f8:	b021883a 	mov	r16,r22
 80360fc:	a4c00017 	ldw	r19,0(r20)
 8036100:	8020d43a 	srli	r16,r16,16
 8036104:	e00b883a 	mov	r5,fp
 8036108:	993fffcc 	andi	r4,r19,65535
 803610c:	802c2180 	call	802c218 <__mulsi3>
 8036110:	1405883a 	add	r2,r2,r16
 8036114:	9808d43a 	srli	r4,r19,16
 8036118:	156b883a 	add	r21,r2,r21
 803611c:	bdc00104 	addi	r23,r23,4
 8036120:	bdbfff0d 	sth	r22,-4(r23)
 8036124:	bd7fff8d 	sth	r21,-2(r23)
 8036128:	bc000017 	ldw	r16,0(r23)
 803612c:	e00b883a 	mov	r5,fp
 8036130:	802c2180 	call	802c218 <__mulsi3>
 8036134:	a80ed43a 	srli	r7,r21,16
 8036138:	813fffcc 	andi	r4,r16,65535
 803613c:	2085883a 	add	r2,r4,r2
 8036140:	11ed883a 	add	r22,r2,r7
 8036144:	a5000104 	addi	r20,r20,4
 8036148:	b02ad43a 	srli	r21,r22,16
 803614c:	a47feb36 	bltu	r20,r17,80360fc <__multiply+0x174>
 8036150:	bd800015 	stw	r22,0(r23)
 8036154:	d8c00017 	ldw	r3,0(sp)
 8036158:	94800104 	addi	r18,r18,4
 803615c:	18c00104 	addi	r3,r3,4
 8036160:	d8c00015 	stw	r3,0(sp)
 8036164:	d8c00317 	ldw	r3,12(sp)
 8036168:	90ffbf36 	bltu	r18,r3,8036068 <__multiply+0xe0>
 803616c:	d8c00117 	ldw	r3,4(sp)
 8036170:	00c00c0e 	bge	zero,r3,80361a4 <__multiply+0x21c>
 8036174:	d8c00217 	ldw	r3,8(sp)
 8036178:	18bfff17 	ldw	r2,-4(r3)
 803617c:	1d7fff04 	addi	r21,r3,-4
 8036180:	10000326 	beq	r2,zero,8036190 <__multiply+0x208>
 8036184:	00000706 	br	80361a4 <__multiply+0x21c>
 8036188:	a8800017 	ldw	r2,0(r21)
 803618c:	1000051e 	bne	r2,zero,80361a4 <__multiply+0x21c>
 8036190:	d8c00117 	ldw	r3,4(sp)
 8036194:	ad7fff04 	addi	r21,r21,-4
 8036198:	18ffffc4 	addi	r3,r3,-1
 803619c:	d8c00115 	stw	r3,4(sp)
 80361a0:	183ff91e 	bne	r3,zero,8036188 <__multiply+0x200>
 80361a4:	d8800517 	ldw	r2,20(sp)
 80361a8:	d8c00117 	ldw	r3,4(sp)
 80361ac:	10c00415 	stw	r3,16(r2)
 80361b0:	dfc00f17 	ldw	ra,60(sp)
 80361b4:	df000e17 	ldw	fp,56(sp)
 80361b8:	ddc00d17 	ldw	r23,52(sp)
 80361bc:	dd800c17 	ldw	r22,48(sp)
 80361c0:	dd400b17 	ldw	r21,44(sp)
 80361c4:	dd000a17 	ldw	r20,40(sp)
 80361c8:	dcc00917 	ldw	r19,36(sp)
 80361cc:	dc800817 	ldw	r18,32(sp)
 80361d0:	dc400717 	ldw	r17,28(sp)
 80361d4:	dc000617 	ldw	r16,24(sp)
 80361d8:	dec01004 	addi	sp,sp,64
 80361dc:	f800283a 	ret

080361e0 <__pow5mult>:
 80361e0:	defffb04 	addi	sp,sp,-20
 80361e4:	dcc00315 	stw	r19,12(sp)
 80361e8:	dc800215 	stw	r18,8(sp)
 80361ec:	dc000015 	stw	r16,0(sp)
 80361f0:	dfc00415 	stw	ra,16(sp)
 80361f4:	dc400115 	stw	r17,4(sp)
 80361f8:	308000cc 	andi	r2,r6,3
 80361fc:	3021883a 	mov	r16,r6
 8036200:	2027883a 	mov	r19,r4
 8036204:	2825883a 	mov	r18,r5
 8036208:	10002e1e 	bne	r2,zero,80362c4 <__pow5mult+0xe4>
 803620c:	8021d0ba 	srai	r16,r16,2
 8036210:	80001a26 	beq	r16,zero,803627c <__pow5mult+0x9c>
 8036214:	9c401217 	ldw	r17,72(r19)
 8036218:	8800061e 	bne	r17,zero,8036234 <__pow5mult+0x54>
 803621c:	00003406 	br	80362f0 <__pow5mult+0x110>
 8036220:	8021d07a 	srai	r16,r16,1
 8036224:	80001526 	beq	r16,zero,803627c <__pow5mult+0x9c>
 8036228:	88c00017 	ldw	r3,0(r17)
 803622c:	18001b26 	beq	r3,zero,803629c <__pow5mult+0xbc>
 8036230:	1823883a 	mov	r17,r3
 8036234:	80c0004c 	andi	r3,r16,1
 8036238:	183ff926 	beq	r3,zero,8036220 <__pow5mult+0x40>
 803623c:	900b883a 	mov	r5,r18
 8036240:	880d883a 	mov	r6,r17
 8036244:	9809883a 	mov	r4,r19
 8036248:	8035f880 	call	8035f88 <__multiply>
 803624c:	90001b26 	beq	r18,zero,80362bc <__pow5mult+0xdc>
 8036250:	91000117 	ldw	r4,4(r18)
 8036254:	98c01317 	ldw	r3,76(r19)
 8036258:	8021d07a 	srai	r16,r16,1
 803625c:	2109883a 	add	r4,r4,r4
 8036260:	2109883a 	add	r4,r4,r4
 8036264:	1907883a 	add	r3,r3,r4
 8036268:	19000017 	ldw	r4,0(r3)
 803626c:	91000015 	stw	r4,0(r18)
 8036270:	1c800015 	stw	r18,0(r3)
 8036274:	1025883a 	mov	r18,r2
 8036278:	803feb1e 	bne	r16,zero,8036228 <__pow5mult+0x48>
 803627c:	9005883a 	mov	r2,r18
 8036280:	dfc00417 	ldw	ra,16(sp)
 8036284:	dcc00317 	ldw	r19,12(sp)
 8036288:	dc800217 	ldw	r18,8(sp)
 803628c:	dc400117 	ldw	r17,4(sp)
 8036290:	dc000017 	ldw	r16,0(sp)
 8036294:	dec00504 	addi	sp,sp,20
 8036298:	f800283a 	ret
 803629c:	880b883a 	mov	r5,r17
 80362a0:	880d883a 	mov	r6,r17
 80362a4:	9809883a 	mov	r4,r19
 80362a8:	8035f880 	call	8035f88 <__multiply>
 80362ac:	88800015 	stw	r2,0(r17)
 80362b0:	10000015 	stw	zero,0(r2)
 80362b4:	1023883a 	mov	r17,r2
 80362b8:	003fde06 	br	8036234 <__pow5mult+0x54>
 80362bc:	1025883a 	mov	r18,r2
 80362c0:	003fd706 	br	8036220 <__pow5mult+0x40>
 80362c4:	10bfffc4 	addi	r2,r2,-1
 80362c8:	1085883a 	add	r2,r2,r2
 80362cc:	00c20134 	movhi	r3,2052
 80362d0:	18c57e04 	addi	r3,r3,5624
 80362d4:	1085883a 	add	r2,r2,r2
 80362d8:	1885883a 	add	r2,r3,r2
 80362dc:	11800017 	ldw	r6,0(r2)
 80362e0:	000f883a 	mov	r7,zero
 80362e4:	8035bec0 	call	8035bec <__multadd>
 80362e8:	1025883a 	mov	r18,r2
 80362ec:	003fc706 	br	803620c <__pow5mult+0x2c>
 80362f0:	9809883a 	mov	r4,r19
 80362f4:	01409c44 	movi	r5,625
 80362f8:	8035f4c0 	call	8035f4c <__i2b>
 80362fc:	98801215 	stw	r2,72(r19)
 8036300:	1023883a 	mov	r17,r2
 8036304:	10000015 	stw	zero,0(r2)
 8036308:	003fca06 	br	8036234 <__pow5mult+0x54>

0803630c <__lshift>:
 803630c:	defff904 	addi	sp,sp,-28
 8036310:	dd400515 	stw	r21,20(sp)
 8036314:	dc400115 	stw	r17,4(sp)
 8036318:	2d400417 	ldw	r21,16(r5)
 803631c:	3023d17a 	srai	r17,r6,5
 8036320:	28800217 	ldw	r2,8(r5)
 8036324:	dd000415 	stw	r20,16(sp)
 8036328:	8d6b883a 	add	r21,r17,r21
 803632c:	dcc00315 	stw	r19,12(sp)
 8036330:	dc800215 	stw	r18,8(sp)
 8036334:	dc000015 	stw	r16,0(sp)
 8036338:	dfc00615 	stw	ra,24(sp)
 803633c:	ac000044 	addi	r16,r21,1
 8036340:	2825883a 	mov	r18,r5
 8036344:	3029883a 	mov	r20,r6
 8036348:	2027883a 	mov	r19,r4
 803634c:	29400117 	ldw	r5,4(r5)
 8036350:	1400030e 	bge	r2,r16,8036360 <__lshift+0x54>
 8036354:	1085883a 	add	r2,r2,r2
 8036358:	29400044 	addi	r5,r5,1
 803635c:	143ffd16 	blt	r2,r16,8036354 <__lshift+0x48>
 8036360:	9809883a 	mov	r4,r19
 8036364:	8035b1c0 	call	8035b1c <_Balloc>
 8036368:	10c00504 	addi	r3,r2,20
 803636c:	0440090e 	bge	zero,r17,8036394 <__lshift+0x88>
 8036370:	000f883a 	mov	r7,zero
 8036374:	18000015 	stw	zero,0(r3)
 8036378:	39c00044 	addi	r7,r7,1
 803637c:	18c00104 	addi	r3,r3,4
 8036380:	3c7ffc1e 	bne	r7,r17,8036374 <__lshift+0x68>
 8036384:	38c00144 	addi	r3,r7,5
 8036388:	18c7883a 	add	r3,r3,r3
 803638c:	18c7883a 	add	r3,r3,r3
 8036390:	10c7883a 	add	r3,r2,r3
 8036394:	92000417 	ldw	r8,16(r18)
 8036398:	a18007cc 	andi	r6,r20,31
 803639c:	91c00504 	addi	r7,r18,20
 80363a0:	42000144 	addi	r8,r8,5
 80363a4:	4211883a 	add	r8,r8,r8
 80363a8:	4211883a 	add	r8,r8,r8
 80363ac:	9211883a 	add	r8,r18,r8
 80363b0:	30002226 	beq	r6,zero,803643c <__lshift+0x130>
 80363b4:	02800804 	movi	r10,32
 80363b8:	5195c83a 	sub	r10,r10,r6
 80363bc:	000b883a 	mov	r5,zero
 80363c0:	3a400017 	ldw	r9,0(r7)
 80363c4:	18c00104 	addi	r3,r3,4
 80363c8:	39c00104 	addi	r7,r7,4
 80363cc:	4992983a 	sll	r9,r9,r6
 80363d0:	2a4ab03a 	or	r5,r5,r9
 80363d4:	197fff15 	stw	r5,-4(r3)
 80363d8:	397fff17 	ldw	r5,-4(r7)
 80363dc:	2a8ad83a 	srl	r5,r5,r10
 80363e0:	3a3ff736 	bltu	r7,r8,80363c0 <__lshift+0xb4>
 80363e4:	19400015 	stw	r5,0(r3)
 80363e8:	28000126 	beq	r5,zero,80363f0 <__lshift+0xe4>
 80363ec:	ac000084 	addi	r16,r21,2
 80363f0:	91000117 	ldw	r4,4(r18)
 80363f4:	98c01317 	ldw	r3,76(r19)
 80363f8:	843fffc4 	addi	r16,r16,-1
 80363fc:	2109883a 	add	r4,r4,r4
 8036400:	2109883a 	add	r4,r4,r4
 8036404:	1907883a 	add	r3,r3,r4
 8036408:	19000017 	ldw	r4,0(r3)
 803640c:	14000415 	stw	r16,16(r2)
 8036410:	91000015 	stw	r4,0(r18)
 8036414:	1c800015 	stw	r18,0(r3)
 8036418:	dfc00617 	ldw	ra,24(sp)
 803641c:	dd400517 	ldw	r21,20(sp)
 8036420:	dd000417 	ldw	r20,16(sp)
 8036424:	dcc00317 	ldw	r19,12(sp)
 8036428:	dc800217 	ldw	r18,8(sp)
 803642c:	dc400117 	ldw	r17,4(sp)
 8036430:	dc000017 	ldw	r16,0(sp)
 8036434:	dec00704 	addi	sp,sp,28
 8036438:	f800283a 	ret
 803643c:	39400017 	ldw	r5,0(r7)
 8036440:	18c00104 	addi	r3,r3,4
 8036444:	39c00104 	addi	r7,r7,4
 8036448:	197fff15 	stw	r5,-4(r3)
 803644c:	3a3fe82e 	bgeu	r7,r8,80363f0 <__lshift+0xe4>
 8036450:	39400017 	ldw	r5,0(r7)
 8036454:	18c00104 	addi	r3,r3,4
 8036458:	39c00104 	addi	r7,r7,4
 803645c:	197fff15 	stw	r5,-4(r3)
 8036460:	3a3ff636 	bltu	r7,r8,803643c <__lshift+0x130>
 8036464:	003fe206 	br	80363f0 <__lshift+0xe4>

08036468 <__mcmp>:
 8036468:	20800417 	ldw	r2,16(r4)
 803646c:	28c00417 	ldw	r3,16(r5)
 8036470:	10c5c83a 	sub	r2,r2,r3
 8036474:	10000f1e 	bne	r2,zero,80364b4 <__mcmp+0x4c>
 8036478:	18c00144 	addi	r3,r3,5
 803647c:	18c7883a 	add	r3,r3,r3
 8036480:	18c7883a 	add	r3,r3,r3
 8036484:	21c00504 	addi	r7,r4,20
 8036488:	28cb883a 	add	r5,r5,r3
 803648c:	20c9883a 	add	r4,r4,r3
 8036490:	213fff04 	addi	r4,r4,-4
 8036494:	297fff04 	addi	r5,r5,-4
 8036498:	21800017 	ldw	r6,0(r4)
 803649c:	28c00017 	ldw	r3,0(r5)
 80364a0:	30c0021e 	bne	r6,r3,80364ac <__mcmp+0x44>
 80364a4:	393ffa36 	bltu	r7,r4,8036490 <__mcmp+0x28>
 80364a8:	f800283a 	ret
 80364ac:	30c00236 	bltu	r6,r3,80364b8 <__mcmp+0x50>
 80364b0:	00800044 	movi	r2,1
 80364b4:	f800283a 	ret
 80364b8:	00bfffc4 	movi	r2,-1
 80364bc:	f800283a 	ret

080364c0 <__mdiff>:
 80364c0:	defffb04 	addi	sp,sp,-20
 80364c4:	dc000015 	stw	r16,0(sp)
 80364c8:	2821883a 	mov	r16,r5
 80364cc:	dc800215 	stw	r18,8(sp)
 80364d0:	300b883a 	mov	r5,r6
 80364d4:	2025883a 	mov	r18,r4
 80364d8:	8009883a 	mov	r4,r16
 80364dc:	dc400115 	stw	r17,4(sp)
 80364e0:	dfc00415 	stw	ra,16(sp)
 80364e4:	dcc00315 	stw	r19,12(sp)
 80364e8:	3023883a 	mov	r17,r6
 80364ec:	80364680 	call	8036468 <__mcmp>
 80364f0:	10005026 	beq	r2,zero,8036634 <__mdiff+0x174>
 80364f4:	10004a16 	blt	r2,zero,8036620 <__mdiff+0x160>
 80364f8:	0027883a 	mov	r19,zero
 80364fc:	81400117 	ldw	r5,4(r16)
 8036500:	9009883a 	mov	r4,r18
 8036504:	8035b1c0 	call	8035b1c <_Balloc>
 8036508:	82400417 	ldw	r9,16(r16)
 803650c:	89800417 	ldw	r6,16(r17)
 8036510:	14c00315 	stw	r19,12(r2)
 8036514:	4b800144 	addi	r14,r9,5
 8036518:	31800144 	addi	r6,r6,5
 803651c:	739d883a 	add	r14,r14,r14
 8036520:	318d883a 	add	r6,r6,r6
 8036524:	739d883a 	add	r14,r14,r14
 8036528:	318d883a 	add	r6,r6,r6
 803652c:	81c00504 	addi	r7,r16,20
 8036530:	839d883a 	add	r14,r16,r14
 8036534:	8a000504 	addi	r8,r17,20
 8036538:	898d883a 	add	r6,r17,r6
 803653c:	10c00504 	addi	r3,r2,20
 8036540:	0009883a 	mov	r4,zero
 8036544:	3b000017 	ldw	r12,0(r7)
 8036548:	42c00017 	ldw	r11,0(r8)
 803654c:	42000104 	addi	r8,r8,4
 8036550:	62bfffcc 	andi	r10,r12,65535
 8036554:	5b7fffcc 	andi	r13,r11,65535
 8036558:	5109883a 	add	r4,r10,r4
 803655c:	2355c83a 	sub	r10,r4,r13
 8036560:	5816d43a 	srli	r11,r11,16
 8036564:	6008d43a 	srli	r4,r12,16
 8036568:	501bd43a 	srai	r13,r10,16
 803656c:	1a80000d 	sth	r10,0(r3)
 8036570:	22c9c83a 	sub	r4,r4,r11
 8036574:	2349883a 	add	r4,r4,r13
 8036578:	1900008d 	sth	r4,2(r3)
 803657c:	39c00104 	addi	r7,r7,4
 8036580:	2009d43a 	srai	r4,r4,16
 8036584:	18c00104 	addi	r3,r3,4
 8036588:	41bfee36 	bltu	r8,r6,8036544 <__mdiff+0x84>
 803658c:	180b883a 	mov	r5,r3
 8036590:	3815883a 	mov	r10,r7
 8036594:	3b80132e 	bgeu	r7,r14,80365e4 <__mdiff+0x124>
 8036598:	3a000017 	ldw	r8,0(r7)
 803659c:	18c00104 	addi	r3,r3,4
 80365a0:	39c00104 	addi	r7,r7,4
 80365a4:	41bfffcc 	andi	r6,r8,65535
 80365a8:	310d883a 	add	r6,r6,r4
 80365ac:	3009d43a 	srai	r4,r6,16
 80365b0:	4010d43a 	srli	r8,r8,16
 80365b4:	19bfff0d 	sth	r6,-4(r3)
 80365b8:	2209883a 	add	r4,r4,r8
 80365bc:	193fff8d 	sth	r4,-2(r3)
 80365c0:	2009d43a 	srai	r4,r4,16
 80365c4:	3bbff436 	bltu	r7,r14,8036598 <__mdiff+0xd8>
 80365c8:	0286303a 	nor	r3,zero,r10
 80365cc:	1b87883a 	add	r3,r3,r14
 80365d0:	1806d0ba 	srli	r3,r3,2
 80365d4:	18c00044 	addi	r3,r3,1
 80365d8:	18c7883a 	add	r3,r3,r3
 80365dc:	18c7883a 	add	r3,r3,r3
 80365e0:	28c7883a 	add	r3,r5,r3
 80365e4:	193fff17 	ldw	r4,-4(r3)
 80365e8:	18ffff04 	addi	r3,r3,-4
 80365ec:	2000041e 	bne	r4,zero,8036600 <__mdiff+0x140>
 80365f0:	18ffff04 	addi	r3,r3,-4
 80365f4:	19000017 	ldw	r4,0(r3)
 80365f8:	4a7fffc4 	addi	r9,r9,-1
 80365fc:	203ffc26 	beq	r4,zero,80365f0 <__mdiff+0x130>
 8036600:	12400415 	stw	r9,16(r2)
 8036604:	dfc00417 	ldw	ra,16(sp)
 8036608:	dcc00317 	ldw	r19,12(sp)
 803660c:	dc800217 	ldw	r18,8(sp)
 8036610:	dc400117 	ldw	r17,4(sp)
 8036614:	dc000017 	ldw	r16,0(sp)
 8036618:	dec00504 	addi	sp,sp,20
 803661c:	f800283a 	ret
 8036620:	8005883a 	mov	r2,r16
 8036624:	04c00044 	movi	r19,1
 8036628:	8821883a 	mov	r16,r17
 803662c:	1023883a 	mov	r17,r2
 8036630:	003fb206 	br	80364fc <__mdiff+0x3c>
 8036634:	9009883a 	mov	r4,r18
 8036638:	000b883a 	mov	r5,zero
 803663c:	8035b1c0 	call	8035b1c <_Balloc>
 8036640:	00c00044 	movi	r3,1
 8036644:	10c00415 	stw	r3,16(r2)
 8036648:	10000515 	stw	zero,20(r2)
 803664c:	dfc00417 	ldw	ra,16(sp)
 8036650:	dcc00317 	ldw	r19,12(sp)
 8036654:	dc800217 	ldw	r18,8(sp)
 8036658:	dc400117 	ldw	r17,4(sp)
 803665c:	dc000017 	ldw	r16,0(sp)
 8036660:	dec00504 	addi	sp,sp,20
 8036664:	f800283a 	ret

08036668 <__ulp>:
 8036668:	295ffc2c 	andhi	r5,r5,32752
 803666c:	00bf3034 	movhi	r2,64704
 8036670:	2887883a 	add	r3,r5,r2
 8036674:	00c0020e 	bge	zero,r3,8036680 <__ulp+0x18>
 8036678:	0005883a 	mov	r2,zero
 803667c:	f800283a 	ret
 8036680:	00c7c83a 	sub	r3,zero,r3
 8036684:	1805d53a 	srai	r2,r3,20
 8036688:	00c004c4 	movi	r3,19
 803668c:	18800a0e 	bge	r3,r2,80366b8 <__ulp+0x50>
 8036690:	01000c84 	movi	r4,50
 8036694:	0007883a 	mov	r3,zero
 8036698:	20800516 	blt	r4,r2,80366b0 <__ulp+0x48>
 803669c:	01000cc4 	movi	r4,51
 80366a0:	2085c83a 	sub	r2,r4,r2
 80366a4:	01000044 	movi	r4,1
 80366a8:	2084983a 	sll	r2,r4,r2
 80366ac:	f800283a 	ret
 80366b0:	00800044 	movi	r2,1
 80366b4:	f800283a 	ret
 80366b8:	00c00234 	movhi	r3,8
 80366bc:	1887d83a 	sra	r3,r3,r2
 80366c0:	0005883a 	mov	r2,zero
 80366c4:	f800283a 	ret

080366c8 <__b2d>:
 80366c8:	defffa04 	addi	sp,sp,-24
 80366cc:	dc000015 	stw	r16,0(sp)
 80366d0:	24000417 	ldw	r16,16(r4)
 80366d4:	dc400115 	stw	r17,4(sp)
 80366d8:	dcc00315 	stw	r19,12(sp)
 80366dc:	84000144 	addi	r16,r16,5
 80366e0:	8421883a 	add	r16,r16,r16
 80366e4:	8421883a 	add	r16,r16,r16
 80366e8:	2421883a 	add	r16,r4,r16
 80366ec:	847fff17 	ldw	r17,-4(r16)
 80366f0:	24c00504 	addi	r19,r4,20
 80366f4:	dd000415 	stw	r20,16(sp)
 80366f8:	8809883a 	mov	r4,r17
 80366fc:	dc800215 	stw	r18,8(sp)
 8036700:	2829883a 	mov	r20,r5
 8036704:	dfc00515 	stw	ra,20(sp)
 8036708:	8035e340 	call	8035e34 <__hi0bits>
 803670c:	00c00804 	movi	r3,32
 8036710:	1887c83a 	sub	r3,r3,r2
 8036714:	a0c00015 	stw	r3,0(r20)
 8036718:	00c00284 	movi	r3,10
 803671c:	84bfff04 	addi	r18,r16,-4
 8036720:	18801216 	blt	r3,r2,803676c <__b2d+0xa4>
 8036724:	010002c4 	movi	r4,11
 8036728:	2089c83a 	sub	r4,r4,r2
 803672c:	8906d83a 	srl	r3,r17,r4
 8036730:	18cffc34 	orhi	r3,r3,16368
 8036734:	9c80322e 	bgeu	r19,r18,8036800 <__b2d+0x138>
 8036738:	817ffe17 	ldw	r5,-8(r16)
 803673c:	2908d83a 	srl	r4,r5,r4
 8036740:	10800544 	addi	r2,r2,21
 8036744:	88a2983a 	sll	r17,r17,r2
 8036748:	2444b03a 	or	r2,r4,r17
 803674c:	dfc00517 	ldw	ra,20(sp)
 8036750:	dd000417 	ldw	r20,16(sp)
 8036754:	dcc00317 	ldw	r19,12(sp)
 8036758:	dc800217 	ldw	r18,8(sp)
 803675c:	dc400117 	ldw	r17,4(sp)
 8036760:	dc000017 	ldw	r16,0(sp)
 8036764:	dec00604 	addi	sp,sp,24
 8036768:	f800283a 	ret
 803676c:	9c801636 	bltu	r19,r18,80367c8 <__b2d+0x100>
 8036770:	113ffd44 	addi	r4,r2,-11
 8036774:	000b883a 	mov	r5,zero
 8036778:	20001726 	beq	r4,zero,80367d8 <__b2d+0x110>
 803677c:	00c00ac4 	movi	r3,43
 8036780:	1885c83a 	sub	r2,r3,r2
 8036784:	8906983a 	sll	r3,r17,r4
 8036788:	288cd83a 	srl	r6,r5,r2
 803678c:	18cffc34 	orhi	r3,r3,16368
 8036790:	1986b03a 	or	r3,r3,r6
 8036794:	9c801c2e 	bgeu	r19,r18,8036808 <__b2d+0x140>
 8036798:	91bfff17 	ldw	r6,-4(r18)
 803679c:	3084d83a 	srl	r2,r6,r2
 80367a0:	2908983a 	sll	r4,r5,r4
 80367a4:	1104b03a 	or	r2,r2,r4
 80367a8:	dfc00517 	ldw	ra,20(sp)
 80367ac:	dd000417 	ldw	r20,16(sp)
 80367b0:	dcc00317 	ldw	r19,12(sp)
 80367b4:	dc800217 	ldw	r18,8(sp)
 80367b8:	dc400117 	ldw	r17,4(sp)
 80367bc:	dc000017 	ldw	r16,0(sp)
 80367c0:	dec00604 	addi	sp,sp,24
 80367c4:	f800283a 	ret
 80367c8:	113ffd44 	addi	r4,r2,-11
 80367cc:	84bffe04 	addi	r18,r16,-8
 80367d0:	817ffe17 	ldw	r5,-8(r16)
 80367d4:	203fe91e 	bne	r4,zero,803677c <__b2d+0xb4>
 80367d8:	88cffc34 	orhi	r3,r17,16368
 80367dc:	2805883a 	mov	r2,r5
 80367e0:	dfc00517 	ldw	ra,20(sp)
 80367e4:	dd000417 	ldw	r20,16(sp)
 80367e8:	dcc00317 	ldw	r19,12(sp)
 80367ec:	dc800217 	ldw	r18,8(sp)
 80367f0:	dc400117 	ldw	r17,4(sp)
 80367f4:	dc000017 	ldw	r16,0(sp)
 80367f8:	dec00604 	addi	sp,sp,24
 80367fc:	f800283a 	ret
 8036800:	0009883a 	mov	r4,zero
 8036804:	003fce06 	br	8036740 <__b2d+0x78>
 8036808:	0005883a 	mov	r2,zero
 803680c:	003fe406 	br	80367a0 <__b2d+0xd8>

08036810 <__d2b>:
 8036810:	defff804 	addi	sp,sp,-32
 8036814:	dc400315 	stw	r17,12(sp)
 8036818:	3023883a 	mov	r17,r6
 803681c:	dc800415 	stw	r18,16(sp)
 8036820:	8824907a 	slli	r18,r17,1
 8036824:	dcc00515 	stw	r19,20(sp)
 8036828:	2827883a 	mov	r19,r5
 803682c:	9024d57a 	srli	r18,r18,21
 8036830:	01400044 	movi	r5,1
 8036834:	dd000615 	stw	r20,24(sp)
 8036838:	dc000215 	stw	r16,8(sp)
 803683c:	dfc00715 	stw	ra,28(sp)
 8036840:	3829883a 	mov	r20,r7
 8036844:	8035b1c0 	call	8035b1c <_Balloc>
 8036848:	1021883a 	mov	r16,r2
 803684c:	00800434 	movhi	r2,16
 8036850:	10bfffc4 	addi	r2,r2,-1
 8036854:	88a2703a 	and	r17,r17,r2
 8036858:	90000126 	beq	r18,zero,8036860 <__d2b+0x50>
 803685c:	8c400434 	orhi	r17,r17,16
 8036860:	dc400015 	stw	r17,0(sp)
 8036864:	98002226 	beq	r19,zero,80368f0 <__d2b+0xe0>
 8036868:	d9000104 	addi	r4,sp,4
 803686c:	dcc00115 	stw	r19,4(sp)
 8036870:	8035e9c0 	call	8035e9c <__lo0bits>
 8036874:	d8c00017 	ldw	r3,0(sp)
 8036878:	10002d1e 	bne	r2,zero,8036930 <__d2b+0x120>
 803687c:	d9000117 	ldw	r4,4(sp)
 8036880:	81000515 	stw	r4,20(r16)
 8036884:	1823003a 	cmpeq	r17,r3,zero
 8036888:	01000084 	movi	r4,2
 803688c:	2463c83a 	sub	r17,r4,r17
 8036890:	80c00615 	stw	r3,24(r16)
 8036894:	84400415 	stw	r17,16(r16)
 8036898:	90001d1e 	bne	r18,zero,8036910 <__d2b+0x100>
 803689c:	88c00104 	addi	r3,r17,4
 80368a0:	18c7883a 	add	r3,r3,r3
 80368a4:	18c7883a 	add	r3,r3,r3
 80368a8:	80c7883a 	add	r3,r16,r3
 80368ac:	19000017 	ldw	r4,0(r3)
 80368b0:	10bef384 	addi	r2,r2,-1074
 80368b4:	a0800015 	stw	r2,0(r20)
 80368b8:	8035e340 	call	8035e34 <__hi0bits>
 80368bc:	8822917a 	slli	r17,r17,5
 80368c0:	d8c00817 	ldw	r3,32(sp)
 80368c4:	8885c83a 	sub	r2,r17,r2
 80368c8:	18800015 	stw	r2,0(r3)
 80368cc:	8005883a 	mov	r2,r16
 80368d0:	dfc00717 	ldw	ra,28(sp)
 80368d4:	dd000617 	ldw	r20,24(sp)
 80368d8:	dcc00517 	ldw	r19,20(sp)
 80368dc:	dc800417 	ldw	r18,16(sp)
 80368e0:	dc400317 	ldw	r17,12(sp)
 80368e4:	dc000217 	ldw	r16,8(sp)
 80368e8:	dec00804 	addi	sp,sp,32
 80368ec:	f800283a 	ret
 80368f0:	d809883a 	mov	r4,sp
 80368f4:	8035e9c0 	call	8035e9c <__lo0bits>
 80368f8:	d8c00017 	ldw	r3,0(sp)
 80368fc:	04400044 	movi	r17,1
 8036900:	84400415 	stw	r17,16(r16)
 8036904:	80c00515 	stw	r3,20(r16)
 8036908:	10800804 	addi	r2,r2,32
 803690c:	903fe326 	beq	r18,zero,803689c <__d2b+0x8c>
 8036910:	00c00d44 	movi	r3,53
 8036914:	94bef344 	addi	r18,r18,-1075
 8036918:	90a5883a 	add	r18,r18,r2
 803691c:	1885c83a 	sub	r2,r3,r2
 8036920:	d8c00817 	ldw	r3,32(sp)
 8036924:	a4800015 	stw	r18,0(r20)
 8036928:	18800015 	stw	r2,0(r3)
 803692c:	003fe706 	br	80368cc <__d2b+0xbc>
 8036930:	01000804 	movi	r4,32
 8036934:	2089c83a 	sub	r4,r4,r2
 8036938:	1908983a 	sll	r4,r3,r4
 803693c:	d9400117 	ldw	r5,4(sp)
 8036940:	1886d83a 	srl	r3,r3,r2
 8036944:	2148b03a 	or	r4,r4,r5
 8036948:	81000515 	stw	r4,20(r16)
 803694c:	d8c00015 	stw	r3,0(sp)
 8036950:	003fcc06 	br	8036884 <__d2b+0x74>

08036954 <__ratio>:
 8036954:	defff904 	addi	sp,sp,-28
 8036958:	dc400315 	stw	r17,12(sp)
 803695c:	2823883a 	mov	r17,r5
 8036960:	d9400104 	addi	r5,sp,4
 8036964:	dfc00615 	stw	ra,24(sp)
 8036968:	dcc00515 	stw	r19,20(sp)
 803696c:	dc800415 	stw	r18,16(sp)
 8036970:	2027883a 	mov	r19,r4
 8036974:	dc000215 	stw	r16,8(sp)
 8036978:	80366c80 	call	80366c8 <__b2d>
 803697c:	8809883a 	mov	r4,r17
 8036980:	d80b883a 	mov	r5,sp
 8036984:	1025883a 	mov	r18,r2
 8036988:	1821883a 	mov	r16,r3
 803698c:	80366c80 	call	80366c8 <__b2d>
 8036990:	99400417 	ldw	r5,16(r19)
 8036994:	89000417 	ldw	r4,16(r17)
 8036998:	d9800117 	ldw	r6,4(sp)
 803699c:	2909c83a 	sub	r4,r5,r4
 80369a0:	d9400017 	ldw	r5,0(sp)
 80369a4:	2008917a 	slli	r4,r4,5
 80369a8:	314bc83a 	sub	r5,r6,r5
 80369ac:	290b883a 	add	r5,r5,r4
 80369b0:	01400e0e 	bge	zero,r5,80369ec <__ratio+0x98>
 80369b4:	280a953a 	slli	r5,r5,20
 80369b8:	2c21883a 	add	r16,r5,r16
 80369bc:	9009883a 	mov	r4,r18
 80369c0:	800b883a 	mov	r5,r16
 80369c4:	100d883a 	mov	r6,r2
 80369c8:	180f883a 	mov	r7,r3
 80369cc:	802bdb80 	call	802bdb8 <__divdf3>
 80369d0:	dfc00617 	ldw	ra,24(sp)
 80369d4:	dcc00517 	ldw	r19,20(sp)
 80369d8:	dc800417 	ldw	r18,16(sp)
 80369dc:	dc400317 	ldw	r17,12(sp)
 80369e0:	dc000217 	ldw	r16,8(sp)
 80369e4:	dec00704 	addi	sp,sp,28
 80369e8:	f800283a 	ret
 80369ec:	280a953a 	slli	r5,r5,20
 80369f0:	1947c83a 	sub	r3,r3,r5
 80369f4:	003ff106 	br	80369bc <__ratio+0x68>

080369f8 <_mprec_log10>:
 80369f8:	defffe04 	addi	sp,sp,-8
 80369fc:	dc000015 	stw	r16,0(sp)
 8036a00:	dfc00115 	stw	ra,4(sp)
 8036a04:	008005c4 	movi	r2,23
 8036a08:	2021883a 	mov	r16,r4
 8036a0c:	11000d0e 	bge	r2,r4,8036a44 <_mprec_log10+0x4c>
 8036a10:	0005883a 	mov	r2,zero
 8036a14:	00cffc34 	movhi	r3,16368
 8036a18:	843fffc4 	addi	r16,r16,-1
 8036a1c:	1009883a 	mov	r4,r2
 8036a20:	180b883a 	mov	r5,r3
 8036a24:	000d883a 	mov	r6,zero
 8036a28:	01d00934 	movhi	r7,16420
 8036a2c:	802bad40 	call	802bad4 <__muldf3>
 8036a30:	803ff91e 	bne	r16,zero,8036a18 <_mprec_log10+0x20>
 8036a34:	dfc00117 	ldw	ra,4(sp)
 8036a38:	dc000017 	ldw	r16,0(sp)
 8036a3c:	dec00204 	addi	sp,sp,8
 8036a40:	f800283a 	ret
 8036a44:	202090fa 	slli	r16,r4,3
 8036a48:	00820134 	movhi	r2,2052
 8036a4c:	10854c04 	addi	r2,r2,5424
 8036a50:	1421883a 	add	r16,r2,r16
 8036a54:	80800017 	ldw	r2,0(r16)
 8036a58:	80c00117 	ldw	r3,4(r16)
 8036a5c:	dfc00117 	ldw	ra,4(sp)
 8036a60:	dc000017 	ldw	r16,0(sp)
 8036a64:	dec00204 	addi	sp,sp,8
 8036a68:	f800283a 	ret

08036a6c <__copybits>:
 8036a6c:	297fffc4 	addi	r5,r5,-1
 8036a70:	31c00417 	ldw	r7,16(r6)
 8036a74:	2811d17a 	srai	r8,r5,5
 8036a78:	30800504 	addi	r2,r6,20
 8036a7c:	39c00144 	addi	r7,r7,5
 8036a80:	42000044 	addi	r8,r8,1
 8036a84:	39cf883a 	add	r7,r7,r7
 8036a88:	4211883a 	add	r8,r8,r8
 8036a8c:	39cf883a 	add	r7,r7,r7
 8036a90:	4211883a 	add	r8,r8,r8
 8036a94:	31cf883a 	add	r7,r6,r7
 8036a98:	2211883a 	add	r8,r4,r8
 8036a9c:	11c00d2e 	bgeu	r2,r7,8036ad4 <__copybits+0x68>
 8036aa0:	2007883a 	mov	r3,r4
 8036aa4:	11400017 	ldw	r5,0(r2)
 8036aa8:	18c00104 	addi	r3,r3,4
 8036aac:	10800104 	addi	r2,r2,4
 8036ab0:	197fff15 	stw	r5,-4(r3)
 8036ab4:	11fffb36 	bltu	r2,r7,8036aa4 <__copybits+0x38>
 8036ab8:	3985c83a 	sub	r2,r7,r6
 8036abc:	10bffac4 	addi	r2,r2,-21
 8036ac0:	1004d0ba 	srli	r2,r2,2
 8036ac4:	10800044 	addi	r2,r2,1
 8036ac8:	1085883a 	add	r2,r2,r2
 8036acc:	1085883a 	add	r2,r2,r2
 8036ad0:	2089883a 	add	r4,r4,r2
 8036ad4:	2200032e 	bgeu	r4,r8,8036ae4 <__copybits+0x78>
 8036ad8:	20000015 	stw	zero,0(r4)
 8036adc:	21000104 	addi	r4,r4,4
 8036ae0:	223ffd36 	bltu	r4,r8,8036ad8 <__copybits+0x6c>
 8036ae4:	f800283a 	ret

08036ae8 <__any_on>:
 8036ae8:	21800417 	ldw	r6,16(r4)
 8036aec:	2805d17a 	srai	r2,r5,5
 8036af0:	20c00504 	addi	r3,r4,20
 8036af4:	30800f0e 	bge	r6,r2,8036b34 <__any_on+0x4c>
 8036af8:	3005883a 	mov	r2,r6
 8036afc:	10800144 	addi	r2,r2,5
 8036b00:	1085883a 	add	r2,r2,r2
 8036b04:	1085883a 	add	r2,r2,r2
 8036b08:	2089883a 	add	r4,r4,r2
 8036b0c:	1900152e 	bgeu	r3,r4,8036b64 <__any_on+0x7c>
 8036b10:	20bfff17 	ldw	r2,-4(r4)
 8036b14:	213fff04 	addi	r4,r4,-4
 8036b18:	1000041e 	bne	r2,zero,8036b2c <__any_on+0x44>
 8036b1c:	1900112e 	bgeu	r3,r4,8036b64 <__any_on+0x7c>
 8036b20:	213fff04 	addi	r4,r4,-4
 8036b24:	20800017 	ldw	r2,0(r4)
 8036b28:	103ffc26 	beq	r2,zero,8036b1c <__any_on+0x34>
 8036b2c:	00800044 	movi	r2,1
 8036b30:	f800283a 	ret
 8036b34:	11bff10e 	bge	r2,r6,8036afc <__any_on+0x14>
 8036b38:	294007cc 	andi	r5,r5,31
 8036b3c:	283fef26 	beq	r5,zero,8036afc <__any_on+0x14>
 8036b40:	11800144 	addi	r6,r2,5
 8036b44:	318d883a 	add	r6,r6,r6
 8036b48:	318d883a 	add	r6,r6,r6
 8036b4c:	218d883a 	add	r6,r4,r6
 8036b50:	31800017 	ldw	r6,0(r6)
 8036b54:	314ed83a 	srl	r7,r6,r5
 8036b58:	394a983a 	sll	r5,r7,r5
 8036b5c:	29bff31e 	bne	r5,r6,8036b2c <__any_on+0x44>
 8036b60:	003fe606 	br	8036afc <__any_on+0x14>
 8036b64:	0005883a 	mov	r2,zero
 8036b68:	f800283a 	ret

08036b6c <_read_r>:
 8036b6c:	defffd04 	addi	sp,sp,-12
 8036b70:	dc400115 	stw	r17,4(sp)
 8036b74:	dc000015 	stw	r16,0(sp)
 8036b78:	2023883a 	mov	r17,r4
 8036b7c:	04020134 	movhi	r16,2052
 8036b80:	84132904 	addi	r16,r16,19620
 8036b84:	2809883a 	mov	r4,r5
 8036b88:	300b883a 	mov	r5,r6
 8036b8c:	380d883a 	mov	r6,r7
 8036b90:	dfc00215 	stw	ra,8(sp)
 8036b94:	80000015 	stw	zero,0(r16)
 8036b98:	803c8580 	call	803c858 <read>
 8036b9c:	00ffffc4 	movi	r3,-1
 8036ba0:	10c00526 	beq	r2,r3,8036bb8 <_read_r+0x4c>
 8036ba4:	dfc00217 	ldw	ra,8(sp)
 8036ba8:	dc400117 	ldw	r17,4(sp)
 8036bac:	dc000017 	ldw	r16,0(sp)
 8036bb0:	dec00304 	addi	sp,sp,12
 8036bb4:	f800283a 	ret
 8036bb8:	80c00017 	ldw	r3,0(r16)
 8036bbc:	183ff926 	beq	r3,zero,8036ba4 <_read_r+0x38>
 8036bc0:	88c00015 	stw	r3,0(r17)
 8036bc4:	dfc00217 	ldw	ra,8(sp)
 8036bc8:	dc400117 	ldw	r17,4(sp)
 8036bcc:	dc000017 	ldw	r16,0(sp)
 8036bd0:	dec00304 	addi	sp,sp,12
 8036bd4:	f800283a 	ret

08036bd8 <_realloc_r>:
 8036bd8:	defff504 	addi	sp,sp,-44
 8036bdc:	dd400615 	stw	r21,24(sp)
 8036be0:	dc800315 	stw	r18,12(sp)
 8036be4:	dc000115 	stw	r16,4(sp)
 8036be8:	dfc00a15 	stw	ra,40(sp)
 8036bec:	df000915 	stw	fp,36(sp)
 8036bf0:	ddc00815 	stw	r23,32(sp)
 8036bf4:	dd800715 	stw	r22,28(sp)
 8036bf8:	dd000515 	stw	r20,20(sp)
 8036bfc:	dcc00415 	stw	r19,16(sp)
 8036c00:	dc400215 	stw	r17,8(sp)
 8036c04:	2821883a 	mov	r16,r5
 8036c08:	202b883a 	mov	r21,r4
 8036c0c:	3025883a 	mov	r18,r6
 8036c10:	28009626 	beq	r5,zero,8036e6c <_realloc_r+0x294>
 8036c14:	803c5300 	call	803c530 <__malloc_lock>
 8036c18:	80bfff17 	ldw	r2,-4(r16)
 8036c1c:	04ffff04 	movi	r19,-4
 8036c20:	90c002c4 	addi	r3,r18,11
 8036c24:	01000584 	movi	r4,22
 8036c28:	85bffe04 	addi	r22,r16,-8
 8036c2c:	14e6703a 	and	r19,r2,r19
 8036c30:	20c0372e 	bgeu	r4,r3,8036d10 <_realloc_r+0x138>
 8036c34:	047ffe04 	movi	r17,-8
 8036c38:	1c62703a 	and	r17,r3,r17
 8036c3c:	8807883a 	mov	r3,r17
 8036c40:	88005a16 	blt	r17,zero,8036dac <_realloc_r+0x1d4>
 8036c44:	8c805936 	bltu	r17,r18,8036dac <_realloc_r+0x1d4>
 8036c48:	98c0340e 	bge	r19,r3,8036d1c <_realloc_r+0x144>
 8036c4c:	07020134 	movhi	fp,2052
 8036c50:	e706a404 	addi	fp,fp,6800
 8036c54:	e1400217 	ldw	r5,8(fp)
 8036c58:	b4c9883a 	add	r4,r22,r19
 8036c5c:	29009026 	beq	r5,r4,8036ea0 <_realloc_r+0x2c8>
 8036c60:	21800117 	ldw	r6,4(r4)
 8036c64:	01ffff84 	movi	r7,-2
 8036c68:	31ce703a 	and	r7,r6,r7
 8036c6c:	21cf883a 	add	r7,r4,r7
 8036c70:	39c00117 	ldw	r7,4(r7)
 8036c74:	39c0004c 	andi	r7,r7,1
 8036c78:	38004326 	beq	r7,zero,8036d88 <_realloc_r+0x1b0>
 8036c7c:	000d883a 	mov	r6,zero
 8036c80:	0009883a 	mov	r4,zero
 8036c84:	1080004c 	andi	r2,r2,1
 8036c88:	10005a1e 	bne	r2,zero,8036df4 <_realloc_r+0x21c>
 8036c8c:	85fffe17 	ldw	r23,-8(r16)
 8036c90:	00bfff04 	movi	r2,-4
 8036c94:	b5efc83a 	sub	r23,r22,r23
 8036c98:	b9c00117 	ldw	r7,4(r23)
 8036c9c:	388e703a 	and	r7,r7,r2
 8036ca0:	3ccf883a 	add	r7,r7,r19
 8036ca4:	20005226 	beq	r4,zero,8036df0 <_realloc_r+0x218>
 8036ca8:	31e9883a 	add	r20,r6,r7
 8036cac:	2140c726 	beq	r4,r5,8036fcc <_realloc_r+0x3f4>
 8036cb0:	a0c04f16 	blt	r20,r3,8036df0 <_realloc_r+0x218>
 8036cb4:	20800317 	ldw	r2,12(r4)
 8036cb8:	20c00217 	ldw	r3,8(r4)
 8036cbc:	99bfff04 	addi	r6,r19,-4
 8036cc0:	01000904 	movi	r4,36
 8036cc4:	18800315 	stw	r2,12(r3)
 8036cc8:	10c00215 	stw	r3,8(r2)
 8036ccc:	b8c00217 	ldw	r3,8(r23)
 8036cd0:	b8800317 	ldw	r2,12(r23)
 8036cd4:	bc800204 	addi	r18,r23,8
 8036cd8:	18800315 	stw	r2,12(r3)
 8036cdc:	10c00215 	stw	r3,8(r2)
 8036ce0:	2180ed36 	bltu	r4,r6,8037098 <_realloc_r+0x4c0>
 8036ce4:	008004c4 	movi	r2,19
 8036ce8:	11809b2e 	bgeu	r2,r6,8036f58 <_realloc_r+0x380>
 8036cec:	80800017 	ldw	r2,0(r16)
 8036cf0:	b8800215 	stw	r2,8(r23)
 8036cf4:	80800117 	ldw	r2,4(r16)
 8036cf8:	b8800315 	stw	r2,12(r23)
 8036cfc:	008006c4 	movi	r2,27
 8036d00:	1180f936 	bltu	r2,r6,80370e8 <_realloc_r+0x510>
 8036d04:	b8800404 	addi	r2,r23,16
 8036d08:	80c00204 	addi	r3,r16,8
 8036d0c:	00009406 	br	8036f60 <_realloc_r+0x388>
 8036d10:	00c00404 	movi	r3,16
 8036d14:	1823883a 	mov	r17,r3
 8036d18:	003fca06 	br	8036c44 <_realloc_r+0x6c>
 8036d1c:	9829883a 	mov	r20,r19
 8036d20:	a447c83a 	sub	r3,r20,r17
 8036d24:	010003c4 	movi	r4,15
 8036d28:	1080004c 	andi	r2,r2,1
 8036d2c:	20c02336 	bltu	r4,r3,8036dbc <_realloc_r+0x1e4>
 8036d30:	1504b03a 	or	r2,r2,r20
 8036d34:	b0800115 	stw	r2,4(r22)
 8036d38:	b52d883a 	add	r22,r22,r20
 8036d3c:	b0800117 	ldw	r2,4(r22)
 8036d40:	10800054 	ori	r2,r2,1
 8036d44:	b0800115 	stw	r2,4(r22)
 8036d48:	a809883a 	mov	r4,r21
 8036d4c:	803c5500 	call	803c550 <__malloc_unlock>
 8036d50:	8025883a 	mov	r18,r16
 8036d54:	9005883a 	mov	r2,r18
 8036d58:	dfc00a17 	ldw	ra,40(sp)
 8036d5c:	df000917 	ldw	fp,36(sp)
 8036d60:	ddc00817 	ldw	r23,32(sp)
 8036d64:	dd800717 	ldw	r22,28(sp)
 8036d68:	dd400617 	ldw	r21,24(sp)
 8036d6c:	dd000517 	ldw	r20,20(sp)
 8036d70:	dcc00417 	ldw	r19,16(sp)
 8036d74:	dc800317 	ldw	r18,12(sp)
 8036d78:	dc400217 	ldw	r17,8(sp)
 8036d7c:	dc000117 	ldw	r16,4(sp)
 8036d80:	dec00b04 	addi	sp,sp,44
 8036d84:	f800283a 	ret
 8036d88:	01ffff04 	movi	r7,-4
 8036d8c:	31cc703a 	and	r6,r6,r7
 8036d90:	34e9883a 	add	r20,r6,r19
 8036d94:	a0ffbb16 	blt	r20,r3,8036c84 <_realloc_r+0xac>
 8036d98:	20c00317 	ldw	r3,12(r4)
 8036d9c:	21000217 	ldw	r4,8(r4)
 8036da0:	20c00315 	stw	r3,12(r4)
 8036da4:	19000215 	stw	r4,8(r3)
 8036da8:	003fdd06 	br	8036d20 <_realloc_r+0x148>
 8036dac:	00800304 	movi	r2,12
 8036db0:	a8800015 	stw	r2,0(r21)
 8036db4:	0025883a 	mov	r18,zero
 8036db8:	003fe606 	br	8036d54 <_realloc_r+0x17c>
 8036dbc:	1444b03a 	or	r2,r2,r17
 8036dc0:	b0800115 	stw	r2,4(r22)
 8036dc4:	b44b883a 	add	r5,r22,r17
 8036dc8:	18800054 	ori	r2,r3,1
 8036dcc:	28800115 	stw	r2,4(r5)
 8036dd0:	28c7883a 	add	r3,r5,r3
 8036dd4:	18800117 	ldw	r2,4(r3)
 8036dd8:	a809883a 	mov	r4,r21
 8036ddc:	29400204 	addi	r5,r5,8
 8036de0:	10800054 	ori	r2,r2,1
 8036de4:	18800115 	stw	r2,4(r3)
 8036de8:	802d5a80 	call	802d5a8 <_free_r>
 8036dec:	003fd606 	br	8036d48 <_realloc_r+0x170>
 8036df0:	38c0330e 	bge	r7,r3,8036ec0 <_realloc_r+0x2e8>
 8036df4:	900b883a 	mov	r5,r18
 8036df8:	a809883a 	mov	r4,r21
 8036dfc:	802e42c0 	call	802e42c <_malloc_r>
 8036e00:	1025883a 	mov	r18,r2
 8036e04:	10001626 	beq	r2,zero,8036e60 <_realloc_r+0x288>
 8036e08:	80bfff17 	ldw	r2,-4(r16)
 8036e0c:	00ffff84 	movi	r3,-2
 8036e10:	913ffe04 	addi	r4,r18,-8
 8036e14:	10c6703a 	and	r3,r2,r3
 8036e18:	b0c7883a 	add	r3,r22,r3
 8036e1c:	20c09926 	beq	r4,r3,8037084 <_realloc_r+0x4ac>
 8036e20:	99bfff04 	addi	r6,r19,-4
 8036e24:	00800904 	movi	r2,36
 8036e28:	11806436 	bltu	r2,r6,8036fbc <_realloc_r+0x3e4>
 8036e2c:	00c004c4 	movi	r3,19
 8036e30:	19804036 	bltu	r3,r6,8036f34 <_realloc_r+0x35c>
 8036e34:	9005883a 	mov	r2,r18
 8036e38:	8007883a 	mov	r3,r16
 8036e3c:	19000017 	ldw	r4,0(r3)
 8036e40:	11000015 	stw	r4,0(r2)
 8036e44:	19000117 	ldw	r4,4(r3)
 8036e48:	11000115 	stw	r4,4(r2)
 8036e4c:	18c00217 	ldw	r3,8(r3)
 8036e50:	10c00215 	stw	r3,8(r2)
 8036e54:	a809883a 	mov	r4,r21
 8036e58:	800b883a 	mov	r5,r16
 8036e5c:	802d5a80 	call	802d5a8 <_free_r>
 8036e60:	a809883a 	mov	r4,r21
 8036e64:	803c5500 	call	803c550 <__malloc_unlock>
 8036e68:	003fba06 	br	8036d54 <_realloc_r+0x17c>
 8036e6c:	300b883a 	mov	r5,r6
 8036e70:	dfc00a17 	ldw	ra,40(sp)
 8036e74:	df000917 	ldw	fp,36(sp)
 8036e78:	ddc00817 	ldw	r23,32(sp)
 8036e7c:	dd800717 	ldw	r22,28(sp)
 8036e80:	dd400617 	ldw	r21,24(sp)
 8036e84:	dd000517 	ldw	r20,20(sp)
 8036e88:	dcc00417 	ldw	r19,16(sp)
 8036e8c:	dc800317 	ldw	r18,12(sp)
 8036e90:	dc400217 	ldw	r17,8(sp)
 8036e94:	dc000117 	ldw	r16,4(sp)
 8036e98:	dec00b04 	addi	sp,sp,44
 8036e9c:	802e42c1 	jmpi	802e42c <_malloc_r>
 8036ea0:	29800117 	ldw	r6,4(r5)
 8036ea4:	013fff04 	movi	r4,-4
 8036ea8:	89c00404 	addi	r7,r17,16
 8036eac:	310c703a 	and	r6,r6,r4
 8036eb0:	34c9883a 	add	r4,r6,r19
 8036eb4:	21c0340e 	bge	r4,r7,8036f88 <_realloc_r+0x3b0>
 8036eb8:	2809883a 	mov	r4,r5
 8036ebc:	003f7106 	br	8036c84 <_realloc_r+0xac>
 8036ec0:	b8800317 	ldw	r2,12(r23)
 8036ec4:	b8c00217 	ldw	r3,8(r23)
 8036ec8:	99bfff04 	addi	r6,r19,-4
 8036ecc:	01000904 	movi	r4,36
 8036ed0:	18800315 	stw	r2,12(r3)
 8036ed4:	10c00215 	stw	r3,8(r2)
 8036ed8:	bc800204 	addi	r18,r23,8
 8036edc:	21807836 	bltu	r4,r6,80370c0 <_realloc_r+0x4e8>
 8036ee0:	008004c4 	movi	r2,19
 8036ee4:	1180732e 	bgeu	r2,r6,80370b4 <_realloc_r+0x4dc>
 8036ee8:	80800017 	ldw	r2,0(r16)
 8036eec:	b8800215 	stw	r2,8(r23)
 8036ef0:	80800117 	ldw	r2,4(r16)
 8036ef4:	b8800315 	stw	r2,12(r23)
 8036ef8:	008006c4 	movi	r2,27
 8036efc:	11808936 	bltu	r2,r6,8037124 <_realloc_r+0x54c>
 8036f00:	b8800404 	addi	r2,r23,16
 8036f04:	80c00204 	addi	r3,r16,8
 8036f08:	19000017 	ldw	r4,0(r3)
 8036f0c:	9021883a 	mov	r16,r18
 8036f10:	3829883a 	mov	r20,r7
 8036f14:	11000015 	stw	r4,0(r2)
 8036f18:	19000117 	ldw	r4,4(r3)
 8036f1c:	b82d883a 	mov	r22,r23
 8036f20:	11000115 	stw	r4,4(r2)
 8036f24:	18c00217 	ldw	r3,8(r3)
 8036f28:	10c00215 	stw	r3,8(r2)
 8036f2c:	b8800117 	ldw	r2,4(r23)
 8036f30:	003f7b06 	br	8036d20 <_realloc_r+0x148>
 8036f34:	80c00017 	ldw	r3,0(r16)
 8036f38:	90c00015 	stw	r3,0(r18)
 8036f3c:	80c00117 	ldw	r3,4(r16)
 8036f40:	90c00115 	stw	r3,4(r18)
 8036f44:	00c006c4 	movi	r3,27
 8036f48:	19804636 	bltu	r3,r6,8037064 <_realloc_r+0x48c>
 8036f4c:	90800204 	addi	r2,r18,8
 8036f50:	80c00204 	addi	r3,r16,8
 8036f54:	003fb906 	br	8036e3c <_realloc_r+0x264>
 8036f58:	9005883a 	mov	r2,r18
 8036f5c:	8007883a 	mov	r3,r16
 8036f60:	19000017 	ldw	r4,0(r3)
 8036f64:	9021883a 	mov	r16,r18
 8036f68:	b82d883a 	mov	r22,r23
 8036f6c:	11000015 	stw	r4,0(r2)
 8036f70:	19000117 	ldw	r4,4(r3)
 8036f74:	11000115 	stw	r4,4(r2)
 8036f78:	18c00217 	ldw	r3,8(r3)
 8036f7c:	10c00215 	stw	r3,8(r2)
 8036f80:	b8800117 	ldw	r2,4(r23)
 8036f84:	003f6606 	br	8036d20 <_realloc_r+0x148>
 8036f88:	2445c83a 	sub	r2,r4,r17
 8036f8c:	b46d883a 	add	r22,r22,r17
 8036f90:	10800054 	ori	r2,r2,1
 8036f94:	b0800115 	stw	r2,4(r22)
 8036f98:	80bfff17 	ldw	r2,-4(r16)
 8036f9c:	a809883a 	mov	r4,r21
 8036fa0:	e5800215 	stw	r22,8(fp)
 8036fa4:	1080004c 	andi	r2,r2,1
 8036fa8:	88a2b03a 	or	r17,r17,r2
 8036fac:	847fff15 	stw	r17,-4(r16)
 8036fb0:	803c5500 	call	803c550 <__malloc_unlock>
 8036fb4:	8025883a 	mov	r18,r16
 8036fb8:	003f6606 	br	8036d54 <_realloc_r+0x17c>
 8036fbc:	9009883a 	mov	r4,r18
 8036fc0:	800b883a 	mov	r5,r16
 8036fc4:	80359900 	call	8035990 <memmove>
 8036fc8:	003fa206 	br	8036e54 <_realloc_r+0x27c>
 8036fcc:	88800404 	addi	r2,r17,16
 8036fd0:	a0bf8716 	blt	r20,r2,8036df0 <_realloc_r+0x218>
 8036fd4:	b8800317 	ldw	r2,12(r23)
 8036fd8:	b8c00217 	ldw	r3,8(r23)
 8036fdc:	99bfff04 	addi	r6,r19,-4
 8036fe0:	01000904 	movi	r4,36
 8036fe4:	18800315 	stw	r2,12(r3)
 8036fe8:	10c00215 	stw	r3,8(r2)
 8036fec:	bc800204 	addi	r18,r23,8
 8036ff0:	21806536 	bltu	r4,r6,8037188 <_realloc_r+0x5b0>
 8036ff4:	008004c4 	movi	r2,19
 8036ff8:	1180592e 	bgeu	r2,r6,8037160 <_realloc_r+0x588>
 8036ffc:	80800017 	ldw	r2,0(r16)
 8037000:	b8800215 	stw	r2,8(r23)
 8037004:	80800117 	ldw	r2,4(r16)
 8037008:	b8800315 	stw	r2,12(r23)
 803700c:	008006c4 	movi	r2,27
 8037010:	11806136 	bltu	r2,r6,8037198 <_realloc_r+0x5c0>
 8037014:	b8800404 	addi	r2,r23,16
 8037018:	80c00204 	addi	r3,r16,8
 803701c:	19000017 	ldw	r4,0(r3)
 8037020:	11000015 	stw	r4,0(r2)
 8037024:	19000117 	ldw	r4,4(r3)
 8037028:	11000115 	stw	r4,4(r2)
 803702c:	18c00217 	ldw	r3,8(r3)
 8037030:	10c00215 	stw	r3,8(r2)
 8037034:	a447c83a 	sub	r3,r20,r17
 8037038:	bc45883a 	add	r2,r23,r17
 803703c:	18c00054 	ori	r3,r3,1
 8037040:	10c00115 	stw	r3,4(r2)
 8037044:	b8c00117 	ldw	r3,4(r23)
 8037048:	e0800215 	stw	r2,8(fp)
 803704c:	a809883a 	mov	r4,r21
 8037050:	1880004c 	andi	r2,r3,1
 8037054:	88a2b03a 	or	r17,r17,r2
 8037058:	bc400115 	stw	r17,4(r23)
 803705c:	803c5500 	call	803c550 <__malloc_unlock>
 8037060:	003f3c06 	br	8036d54 <_realloc_r+0x17c>
 8037064:	80c00217 	ldw	r3,8(r16)
 8037068:	90c00215 	stw	r3,8(r18)
 803706c:	80c00317 	ldw	r3,12(r16)
 8037070:	90c00315 	stw	r3,12(r18)
 8037074:	30802426 	beq	r6,r2,8037108 <_realloc_r+0x530>
 8037078:	90800404 	addi	r2,r18,16
 803707c:	80c00404 	addi	r3,r16,16
 8037080:	003f6e06 	br	8036e3c <_realloc_r+0x264>
 8037084:	953fff17 	ldw	r20,-4(r18)
 8037088:	00ffff04 	movi	r3,-4
 803708c:	a0e8703a 	and	r20,r20,r3
 8037090:	a4e9883a 	add	r20,r20,r19
 8037094:	003f2206 	br	8036d20 <_realloc_r+0x148>
 8037098:	800b883a 	mov	r5,r16
 803709c:	9009883a 	mov	r4,r18
 80370a0:	80359900 	call	8035990 <memmove>
 80370a4:	9021883a 	mov	r16,r18
 80370a8:	b8800117 	ldw	r2,4(r23)
 80370ac:	b82d883a 	mov	r22,r23
 80370b0:	003f1b06 	br	8036d20 <_realloc_r+0x148>
 80370b4:	9005883a 	mov	r2,r18
 80370b8:	8007883a 	mov	r3,r16
 80370bc:	003f9206 	br	8036f08 <_realloc_r+0x330>
 80370c0:	800b883a 	mov	r5,r16
 80370c4:	9009883a 	mov	r4,r18
 80370c8:	d9c00015 	stw	r7,0(sp)
 80370cc:	80359900 	call	8035990 <memmove>
 80370d0:	d9c00017 	ldw	r7,0(sp)
 80370d4:	9021883a 	mov	r16,r18
 80370d8:	b8800117 	ldw	r2,4(r23)
 80370dc:	3829883a 	mov	r20,r7
 80370e0:	b82d883a 	mov	r22,r23
 80370e4:	003f0e06 	br	8036d20 <_realloc_r+0x148>
 80370e8:	80800217 	ldw	r2,8(r16)
 80370ec:	b8800415 	stw	r2,16(r23)
 80370f0:	80800317 	ldw	r2,12(r16)
 80370f4:	b8800515 	stw	r2,20(r23)
 80370f8:	31001226 	beq	r6,r4,8037144 <_realloc_r+0x56c>
 80370fc:	b8800604 	addi	r2,r23,24
 8037100:	80c00404 	addi	r3,r16,16
 8037104:	003f9606 	br	8036f60 <_realloc_r+0x388>
 8037108:	81000417 	ldw	r4,16(r16)
 803710c:	90800604 	addi	r2,r18,24
 8037110:	80c00604 	addi	r3,r16,24
 8037114:	91000415 	stw	r4,16(r18)
 8037118:	81000517 	ldw	r4,20(r16)
 803711c:	91000515 	stw	r4,20(r18)
 8037120:	003f4606 	br	8036e3c <_realloc_r+0x264>
 8037124:	80800217 	ldw	r2,8(r16)
 8037128:	b8800415 	stw	r2,16(r23)
 803712c:	80800317 	ldw	r2,12(r16)
 8037130:	b8800515 	stw	r2,20(r23)
 8037134:	31000d26 	beq	r6,r4,803716c <_realloc_r+0x594>
 8037138:	b8800604 	addi	r2,r23,24
 803713c:	80c00404 	addi	r3,r16,16
 8037140:	003f7106 	br	8036f08 <_realloc_r+0x330>
 8037144:	81000417 	ldw	r4,16(r16)
 8037148:	b8800804 	addi	r2,r23,32
 803714c:	80c00604 	addi	r3,r16,24
 8037150:	b9000615 	stw	r4,24(r23)
 8037154:	81000517 	ldw	r4,20(r16)
 8037158:	b9000715 	stw	r4,28(r23)
 803715c:	003f8006 	br	8036f60 <_realloc_r+0x388>
 8037160:	9005883a 	mov	r2,r18
 8037164:	8007883a 	mov	r3,r16
 8037168:	003fac06 	br	803701c <_realloc_r+0x444>
 803716c:	81000417 	ldw	r4,16(r16)
 8037170:	b8800804 	addi	r2,r23,32
 8037174:	80c00604 	addi	r3,r16,24
 8037178:	b9000615 	stw	r4,24(r23)
 803717c:	81000517 	ldw	r4,20(r16)
 8037180:	b9000715 	stw	r4,28(r23)
 8037184:	003f6006 	br	8036f08 <_realloc_r+0x330>
 8037188:	9009883a 	mov	r4,r18
 803718c:	800b883a 	mov	r5,r16
 8037190:	80359900 	call	8035990 <memmove>
 8037194:	003fa706 	br	8037034 <_realloc_r+0x45c>
 8037198:	80800217 	ldw	r2,8(r16)
 803719c:	b8800415 	stw	r2,16(r23)
 80371a0:	80800317 	ldw	r2,12(r16)
 80371a4:	b8800515 	stw	r2,20(r23)
 80371a8:	31000326 	beq	r6,r4,80371b8 <_realloc_r+0x5e0>
 80371ac:	b8800604 	addi	r2,r23,24
 80371b0:	80c00404 	addi	r3,r16,16
 80371b4:	003f9906 	br	803701c <_realloc_r+0x444>
 80371b8:	81000417 	ldw	r4,16(r16)
 80371bc:	b8800804 	addi	r2,r23,32
 80371c0:	80c00604 	addi	r3,r16,24
 80371c4:	b9000615 	stw	r4,24(r23)
 80371c8:	81000517 	ldw	r4,20(r16)
 80371cc:	b9000715 	stw	r4,28(r23)
 80371d0:	003f9206 	br	803701c <_realloc_r+0x444>

080371d4 <_remove_r>:
 80371d4:	deffff04 	addi	sp,sp,-4
 80371d8:	dfc00015 	stw	ra,0(sp)
 80371dc:	80399080 	call	8039908 <_unlink_r>
 80371e0:	013fffc4 	movi	r4,-1
 80371e4:	0007883a 	mov	r3,zero
 80371e8:	11000426 	beq	r2,r4,80371fc <_remove_r+0x28>
 80371ec:	1805883a 	mov	r2,r3
 80371f0:	dfc00017 	ldw	ra,0(sp)
 80371f4:	dec00104 	addi	sp,sp,4
 80371f8:	f800283a 	ret
 80371fc:	1007883a 	mov	r3,r2
 8037200:	003ffa06 	br	80371ec <_remove_r+0x18>

08037204 <remove>:
 8037204:	00820134 	movhi	r2,2052
 8037208:	108c4504 	addi	r2,r2,12564
 803720c:	200b883a 	mov	r5,r4
 8037210:	11000017 	ldw	r4,0(r2)
 8037214:	80371d41 	jmpi	80371d4 <_remove_r>

08037218 <__isinfd>:
 8037218:	0105c83a 	sub	r2,zero,r4
 803721c:	1108b03a 	or	r4,r2,r4
 8037220:	2004d7fa 	srli	r2,r4,31
 8037224:	00e00034 	movhi	r3,32768
 8037228:	18ffffc4 	addi	r3,r3,-1
 803722c:	28ca703a 	and	r5,r5,r3
 8037230:	1144b03a 	or	r2,r2,r5
 8037234:	00dffc34 	movhi	r3,32752
 8037238:	1885c83a 	sub	r2,r3,r2
 803723c:	0087c83a 	sub	r3,zero,r2
 8037240:	1884b03a 	or	r2,r3,r2
 8037244:	1005d7fa 	srai	r2,r2,31
 8037248:	10800044 	addi	r2,r2,1
 803724c:	f800283a 	ret

08037250 <__isnand>:
 8037250:	0105c83a 	sub	r2,zero,r4
 8037254:	1108b03a 	or	r4,r2,r4
 8037258:	2004d7fa 	srli	r2,r4,31
 803725c:	00e00034 	movhi	r3,32768
 8037260:	18ffffc4 	addi	r3,r3,-1
 8037264:	28ca703a 	and	r5,r5,r3
 8037268:	1144b03a 	or	r2,r2,r5
 803726c:	00dffc34 	movhi	r3,32752
 8037270:	1885c83a 	sub	r2,r3,r2
 8037274:	1004d7fa 	srli	r2,r2,31
 8037278:	f800283a 	ret

0803727c <__sccl>:
 803727c:	2a400003 	ldbu	r9,0(r5)
 8037280:	00801784 	movi	r2,94
 8037284:	48802626 	beq	r9,r2,8037320 <__sccl+0xa4>
 8037288:	28800044 	addi	r2,r5,1
 803728c:	0011883a 	mov	r8,zero
 8037290:	000b883a 	mov	r5,zero
 8037294:	0007883a 	mov	r3,zero
 8037298:	01c04004 	movi	r7,256
 803729c:	20cd883a 	add	r6,r4,r3
 80372a0:	32000005 	stb	r8,0(r6)
 80372a4:	18c00044 	addi	r3,r3,1
 80372a8:	19fffc1e 	bne	r3,r7,803729c <__sccl+0x20>
 80372ac:	48000f26 	beq	r9,zero,80372ec <__sccl+0x70>
 80372b0:	01800044 	movi	r6,1
 80372b4:	314dc83a 	sub	r6,r6,r5
 80372b8:	02001744 	movi	r8,93
 80372bc:	01400b44 	movi	r5,45
 80372c0:	2247883a 	add	r3,r4,r9
 80372c4:	19800005 	stb	r6,0(r3)
 80372c8:	10c00003 	ldbu	r3,0(r2)
 80372cc:	11c00044 	addi	r7,r2,1
 80372d0:	19400a26 	beq	r3,r5,80372fc <__sccl+0x80>
 80372d4:	1a000726 	beq	r3,r8,80372f4 <__sccl+0x78>
 80372d8:	1800011e 	bne	r3,zero,80372e0 <__sccl+0x64>
 80372dc:	f800283a 	ret
 80372e0:	1813883a 	mov	r9,r3
 80372e4:	3805883a 	mov	r2,r7
 80372e8:	003ff506 	br	80372c0 <__sccl+0x44>
 80372ec:	10bfffc4 	addi	r2,r2,-1
 80372f0:	f800283a 	ret
 80372f4:	3805883a 	mov	r2,r7
 80372f8:	f800283a 	ret
 80372fc:	10c00043 	ldbu	r3,1(r2)
 8037300:	1a000c26 	beq	r3,r8,8037334 <__sccl+0xb8>
 8037304:	1a400b16 	blt	r3,r9,8037334 <__sccl+0xb8>
 8037308:	10800084 	addi	r2,r2,2
 803730c:	4a400044 	addi	r9,r9,1
 8037310:	224f883a 	add	r7,r4,r9
 8037314:	39800005 	stb	r6,0(r7)
 8037318:	48fffc16 	blt	r9,r3,803730c <__sccl+0x90>
 803731c:	003fea06 	br	80372c8 <__sccl+0x4c>
 8037320:	2a400043 	ldbu	r9,1(r5)
 8037324:	28800084 	addi	r2,r5,2
 8037328:	02000044 	movi	r8,1
 803732c:	01400044 	movi	r5,1
 8037330:	003fd806 	br	8037294 <__sccl+0x18>
 8037334:	2813883a 	mov	r9,r5
 8037338:	3805883a 	mov	r2,r7
 803733c:	003fe006 	br	80372c0 <__sccl+0x44>

08037340 <nanf>:
 8037340:	009ff034 	movhi	r2,32704
 8037344:	f800283a 	ret

08037348 <_kill_r>:
 8037348:	defffd04 	addi	sp,sp,-12
 803734c:	dc400115 	stw	r17,4(sp)
 8037350:	dc000015 	stw	r16,0(sp)
 8037354:	2023883a 	mov	r17,r4
 8037358:	04020134 	movhi	r16,2052
 803735c:	84132904 	addi	r16,r16,19620
 8037360:	2809883a 	mov	r4,r5
 8037364:	300b883a 	mov	r5,r6
 8037368:	dfc00215 	stw	ra,8(sp)
 803736c:	80000015 	stw	zero,0(r16)
 8037370:	803c1780 	call	803c178 <kill>
 8037374:	00ffffc4 	movi	r3,-1
 8037378:	10c00526 	beq	r2,r3,8037390 <_kill_r+0x48>
 803737c:	dfc00217 	ldw	ra,8(sp)
 8037380:	dc400117 	ldw	r17,4(sp)
 8037384:	dc000017 	ldw	r16,0(sp)
 8037388:	dec00304 	addi	sp,sp,12
 803738c:	f800283a 	ret
 8037390:	80c00017 	ldw	r3,0(r16)
 8037394:	183ff926 	beq	r3,zero,803737c <_kill_r+0x34>
 8037398:	88c00015 	stw	r3,0(r17)
 803739c:	dfc00217 	ldw	ra,8(sp)
 80373a0:	dc400117 	ldw	r17,4(sp)
 80373a4:	dc000017 	ldw	r16,0(sp)
 80373a8:	dec00304 	addi	sp,sp,12
 80373ac:	f800283a 	ret

080373b0 <_getpid_r>:
 80373b0:	803c0141 	jmpi	803c014 <getpid>

080373b4 <_strtod_r>:
 80373b4:	deffdc04 	addi	sp,sp,-144
 80373b8:	dc001a15 	stw	r16,104(sp)
 80373bc:	d9400e15 	stw	r5,56(sp)
 80373c0:	d9801115 	stw	r6,68(sp)
 80373c4:	d9400c15 	stw	r5,48(sp)
 80373c8:	2805883a 	mov	r2,r5
 80373cc:	dfc02315 	stw	ra,140(sp)
 80373d0:	df002215 	stw	fp,136(sp)
 80373d4:	ddc02115 	stw	r23,132(sp)
 80373d8:	dd802015 	stw	r22,128(sp)
 80373dc:	dd401f15 	stw	r21,124(sp)
 80373e0:	dd001e15 	stw	r20,120(sp)
 80373e4:	dcc01d15 	stw	r19,116(sp)
 80373e8:	dc801c15 	stw	r18,112(sp)
 80373ec:	dc401b15 	stw	r17,108(sp)
 80373f0:	2021883a 	mov	r16,r4
 80373f4:	d8000615 	stw	zero,24(sp)
 80373f8:	d8000715 	stw	zero,28(sp)
 80373fc:	01400b44 	movi	r5,45
 8037400:	018200f4 	movhi	r6,2051
 8037404:	319d5604 	addi	r6,r6,30040
 8037408:	10c00003 	ldbu	r3,0(r2)
 803740c:	19003fcc 	andi	r4,r3,255
 8037410:	29004c2e 	bgeu	r5,r4,8037544 <_strtod_r+0x190>
 8037414:	1c803fcc 	andi	r18,r3,255
 8037418:	9480201c 	xori	r18,r18,128
 803741c:	102d883a 	mov	r22,r2
 8037420:	d8001215 	stw	zero,72(sp)
 8037424:	94bfe004 	addi	r18,r18,-128
 8037428:	00800c04 	movi	r2,48
 803742c:	9080f526 	beq	r18,r2,8037804 <_strtod_r+0x450>
 8037430:	d8001315 	stw	zero,76(sp)
 8037434:	04c00bc4 	movi	r19,47
 8037438:	900f883a 	mov	r7,r18
 803743c:	9c84770e 	bge	r19,r18,803861c <_strtod_r+0x1268>
 8037440:	05c00e44 	movi	r23,57
 8037444:	bc847a16 	blt	r23,r18,8038630 <_strtod_r+0x127c>
 8037448:	0039883a 	mov	fp,zero
 803744c:	b4400044 	addi	r17,r22,1
 8037450:	dd801015 	stw	r22,64(sp)
 8037454:	d8000f15 	stw	zero,60(sp)
 8037458:	e02d883a 	mov	r22,fp
 803745c:	002b883a 	mov	r21,zero
 8037460:	8039883a 	mov	fp,r16
 8037464:	05000204 	movi	r20,8
 8037468:	0021883a 	mov	r16,zero
 803746c:	a5408c16 	blt	r20,r21,80376a0 <_strtod_r+0x2ec>
 8037470:	b009883a 	mov	r4,r22
 8037474:	01400284 	movi	r5,10
 8037478:	802c2180 	call	802c218 <__mulsi3>
 803747c:	1485883a 	add	r2,r2,r18
 8037480:	15bff404 	addi	r22,r2,-48
 8037484:	dc400c15 	stw	r17,48(sp)
 8037488:	8c800007 	ldb	r18,0(r17)
 803748c:	ad400044 	addi	r21,r21,1
 8037490:	880b883a 	mov	r5,r17
 8037494:	900f883a 	mov	r7,r18
 8037498:	9c808e0e 	bge	r19,r18,80376d4 <_strtod_r+0x320>
 803749c:	8c400044 	addi	r17,r17,1
 80374a0:	bcbff20e 	bge	r23,r18,803746c <_strtod_r+0xb8>
 80374a4:	dc000f15 	stw	r16,60(sp)
 80374a8:	e021883a 	mov	r16,fp
 80374ac:	b039883a 	mov	fp,r22
 80374b0:	dd801017 	ldw	r22,64(sp)
 80374b4:	a827883a 	mov	r19,r21
 80374b8:	dd801415 	stw	r22,80(sp)
 80374bc:	000d883a 	mov	r6,zero
 80374c0:	0029883a 	mov	r20,zero
 80374c4:	d8001015 	stw	zero,64(sp)
 80374c8:	00801944 	movi	r2,101
 80374cc:	3880dd26 	beq	r7,r2,8037844 <_strtod_r+0x490>
 80374d0:	00801144 	movi	r2,69
 80374d4:	3880db26 	beq	r7,r2,8037844 <_strtod_r+0x490>
 80374d8:	0009883a 	mov	r4,zero
 80374dc:	a8011d1e 	bne	r21,zero,8037954 <_strtod_r+0x5a0>
 80374e0:	3001591e 	bne	r6,zero,8037a48 <_strtod_r+0x694>
 80374e4:	d8c01317 	ldw	r3,76(sp)
 80374e8:	1801571e 	bne	r3,zero,8037a48 <_strtod_r+0x694>
 80374ec:	d8c01017 	ldw	r3,64(sp)
 80374f0:	1803081e 	bne	r3,zero,8038114 <_strtod_r+0xd60>
 80374f4:	00801384 	movi	r2,78
 80374f8:	38847e26 	beq	r7,r2,80386f4 <_strtod_r+0x1340>
 80374fc:	11c47916 	blt	r2,r7,80386e4 <_strtod_r+0x1330>
 8037500:	00801244 	movi	r2,73
 8037504:	3883031e 	bne	r7,r2,8038114 <_strtod_r+0xd60>
 8037508:	d8800c17 	ldw	r2,48(sp)
 803750c:	01020134 	movhi	r4,2052
 8037510:	21058104 	addi	r4,r4,5636
 8037514:	01801004 	movi	r6,64
 8037518:	01c01684 	movi	r7,90
 803751c:	21400007 	ldb	r5,0(r4)
 8037520:	21000044 	addi	r4,r4,1
 8037524:	2804b426 	beq	r5,zero,80387f8 <_strtod_r+0x1444>
 8037528:	10800044 	addi	r2,r2,1
 803752c:	10c00007 	ldb	r3,0(r2)
 8037530:	30c0020e 	bge	r6,r3,803753c <_strtod_r+0x188>
 8037534:	38c00116 	blt	r7,r3,803753c <_strtod_r+0x188>
 8037538:	18c00804 	addi	r3,r3,32
 803753c:	197ff726 	beq	r3,r5,803751c <_strtod_r+0x168>
 8037540:	0002f406 	br	8038114 <_strtod_r+0xd60>
 8037544:	2109883a 	add	r4,r4,r4
 8037548:	2109883a 	add	r4,r4,r4
 803754c:	2189883a 	add	r4,r4,r6
 8037550:	21000017 	ldw	r4,0(r4)
 8037554:	2000683a 	jmp	r4
 8037558:	08037624 	muli	zero,at,3544
 803755c:	08037414 	ori	zero,at,3536
 8037560:	08037414 	ori	zero,at,3536
 8037564:	08037414 	ori	zero,at,3536
 8037568:	08037414 	ori	zero,at,3536
 803756c:	08037414 	ori	zero,at,3536
 8037570:	08037414 	ori	zero,at,3536
 8037574:	08037414 	ori	zero,at,3536
 8037578:	08037414 	ori	zero,at,3536
 803757c:	08037688 	cmpgei	zero,at,3546
 8037580:	08037688 	cmpgei	zero,at,3546
 8037584:	08037688 	cmpgei	zero,at,3546
 8037588:	08037688 	cmpgei	zero,at,3546
 803758c:	08037688 	cmpgei	zero,at,3546
 8037590:	08037414 	ori	zero,at,3536
 8037594:	08037414 	ori	zero,at,3536
 8037598:	08037414 	ori	zero,at,3536
 803759c:	08037414 	ori	zero,at,3536
 80375a0:	08037414 	ori	zero,at,3536
 80375a4:	08037414 	ori	zero,at,3536
 80375a8:	08037414 	ori	zero,at,3536
 80375ac:	08037414 	ori	zero,at,3536
 80375b0:	08037414 	ori	zero,at,3536
 80375b4:	08037414 	ori	zero,at,3536
 80375b8:	08037414 	ori	zero,at,3536
 80375bc:	08037414 	ori	zero,at,3536
 80375c0:	08037414 	ori	zero,at,3536
 80375c4:	08037414 	ori	zero,at,3536
 80375c8:	08037414 	ori	zero,at,3536
 80375cc:	08037414 	ori	zero,at,3536
 80375d0:	08037414 	ori	zero,at,3536
 80375d4:	08037414 	ori	zero,at,3536
 80375d8:	08037688 	cmpgei	zero,at,3546
 80375dc:	08037414 	ori	zero,at,3536
 80375e0:	08037414 	ori	zero,at,3536
 80375e4:	08037414 	ori	zero,at,3536
 80375e8:	08037414 	ori	zero,at,3536
 80375ec:	08037414 	ori	zero,at,3536
 80375f0:	08037414 	ori	zero,at,3536
 80375f4:	08037414 	ori	zero,at,3536
 80375f8:	08037414 	ori	zero,at,3536
 80375fc:	08037414 	ori	zero,at,3536
 8037600:	08037414 	ori	zero,at,3536
 8037604:	08037610 	cmplti	zero,at,3544
 8037608:	08037414 	ori	zero,at,3536
 803760c:	08037694 	ori	zero,at,3546
 8037610:	d8001215 	stw	zero,72(sp)
 8037614:	15800044 	addi	r22,r2,1
 8037618:	dd800c15 	stw	r22,48(sp)
 803761c:	14800047 	ldb	r18,1(r2)
 8037620:	903f811e 	bne	r18,zero,8037428 <_strtod_r+0x74>
 8037624:	0005883a 	mov	r2,zero
 8037628:	0007883a 	mov	r3,zero
 803762c:	d9400e17 	ldw	r5,56(sp)
 8037630:	d8001215 	stw	zero,72(sp)
 8037634:	d9400c15 	stw	r5,48(sp)
 8037638:	d9001117 	ldw	r4,68(sp)
 803763c:	20000326 	beq	r4,zero,803764c <_strtod_r+0x298>
 8037640:	d9000c17 	ldw	r4,48(sp)
 8037644:	d9401117 	ldw	r5,68(sp)
 8037648:	29000015 	stw	r4,0(r5)
 803764c:	d9001217 	ldw	r4,72(sp)
 8037650:	20000126 	beq	r4,zero,8037658 <_strtod_r+0x2a4>
 8037654:	18e0003c 	xorhi	r3,r3,32768
 8037658:	dfc02317 	ldw	ra,140(sp)
 803765c:	df002217 	ldw	fp,136(sp)
 8037660:	ddc02117 	ldw	r23,132(sp)
 8037664:	dd802017 	ldw	r22,128(sp)
 8037668:	dd401f17 	ldw	r21,124(sp)
 803766c:	dd001e17 	ldw	r20,120(sp)
 8037670:	dcc01d17 	ldw	r19,116(sp)
 8037674:	dc801c17 	ldw	r18,112(sp)
 8037678:	dc401b17 	ldw	r17,108(sp)
 803767c:	dc001a17 	ldw	r16,104(sp)
 8037680:	dec02404 	addi	sp,sp,144
 8037684:	f800283a 	ret
 8037688:	10800044 	addi	r2,r2,1
 803768c:	d8800c15 	stw	r2,48(sp)
 8037690:	003f5d06 	br	8037408 <_strtod_r+0x54>
 8037694:	00c00044 	movi	r3,1
 8037698:	d8c01215 	stw	r3,72(sp)
 803769c:	003fdd06 	br	8037614 <_strtod_r+0x260>
 80376a0:	010003c4 	movi	r4,15
 80376a4:	257f7716 	blt	r4,r21,8037484 <_strtod_r+0xd0>
 80376a8:	8009883a 	mov	r4,r16
 80376ac:	01400284 	movi	r5,10
 80376b0:	802c2180 	call	802c218 <__mulsi3>
 80376b4:	dc400c15 	stw	r17,48(sp)
 80376b8:	1485883a 	add	r2,r2,r18
 80376bc:	8c800007 	ldb	r18,0(r17)
 80376c0:	143ff404 	addi	r16,r2,-48
 80376c4:	ad400044 	addi	r21,r21,1
 80376c8:	880b883a 	mov	r5,r17
 80376cc:	900f883a 	mov	r7,r18
 80376d0:	9cbf7216 	blt	r19,r18,803749c <_strtod_r+0xe8>
 80376d4:	dc000f15 	stw	r16,60(sp)
 80376d8:	e021883a 	mov	r16,fp
 80376dc:	b039883a 	mov	fp,r22
 80376e0:	dd801017 	ldw	r22,64(sp)
 80376e4:	00800b84 	movi	r2,46
 80376e8:	9082561e 	bne	r18,r2,8038044 <_strtod_r+0xc90>
 80376ec:	28800044 	addi	r2,r5,1
 80376f0:	d8800c15 	stw	r2,48(sp)
 80376f4:	29c00047 	ldb	r7,1(r5)
 80376f8:	a802611e 	bne	r21,zero,8038080 <_strtod_r+0xccc>
 80376fc:	00800c04 	movi	r2,48
 8037700:	3884161e 	bne	r7,r2,803875c <_strtod_r+0x13a8>
 8037704:	00800044 	movi	r2,1
 8037708:	3809883a 	mov	r4,r7
 803770c:	100d883a 	mov	r6,r2
 8037710:	10800044 	addi	r2,r2,1
 8037714:	2887883a 	add	r3,r5,r2
 8037718:	d8c00c15 	stw	r3,48(sp)
 803771c:	2987883a 	add	r3,r5,r6
 8037720:	19c00047 	ldb	r7,1(r3)
 8037724:	393ff926 	beq	r7,r4,803770c <_strtod_r+0x358>
 8037728:	38bff3c4 	addi	r2,r7,-49
 803772c:	00c00204 	movi	r3,8
 8037730:	1882ad36 	bltu	r3,r2,80381e8 <_strtod_r+0xe34>
 8037734:	d9400c17 	ldw	r5,48(sp)
 8037738:	3029883a 	mov	r20,r6
 803773c:	002f883a 	mov	r23,zero
 8037740:	d9401415 	stw	r5,80(sp)
 8037744:	2823883a 	mov	r17,r5
 8037748:	01800044 	movi	r6,1
 803774c:	3dbff404 	addi	r22,r7,-48
 8037750:	b0002826 	beq	r22,zero,80377f4 <_strtod_r+0x440>
 8037754:	00800044 	movi	r2,1
 8037758:	a1a9883a 	add	r20,r20,r6
 803775c:	30844826 	beq	r6,r2,8038880 <_strtod_r+0x14cc>
 8037760:	b9a7883a 	add	r19,r23,r6
 8037764:	dc401015 	stw	r17,64(sp)
 8037768:	e023883a 	mov	r17,fp
 803776c:	b039883a 	mov	fp,r22
 8037770:	802d883a 	mov	r22,r16
 8037774:	dc000f17 	ldw	r16,60(sp)
 8037778:	98ffffc4 	addi	r3,r19,-1
 803777c:	dd001615 	stw	r20,88(sp)
 8037780:	04800204 	movi	r18,8
 8037784:	d9801515 	stw	r6,84(sp)
 8037788:	b829883a 	mov	r20,r23
 803778c:	1827883a 	mov	r19,r3
 8037790:	a5000044 	addi	r20,r20,1
 8037794:	a17fffc4 	addi	r5,r20,-1
 8037798:	9142b916 	blt	r18,r5,8038280 <_strtod_r+0xecc>
 803779c:	8809883a 	mov	r4,r17
 80377a0:	01400284 	movi	r5,10
 80377a4:	802c2180 	call	802c218 <__mulsi3>
 80377a8:	1023883a 	mov	r17,r2
 80377ac:	a4fff81e 	bne	r20,r19,8037790 <_strtod_r+0x3dc>
 80377b0:	d9801517 	ldw	r6,84(sp)
 80377b4:	dc000f15 	stw	r16,60(sp)
 80377b8:	dd001617 	ldw	r20,88(sp)
 80377bc:	b021883a 	mov	r16,r22
 80377c0:	e02d883a 	mov	r22,fp
 80377c4:	8839883a 	mov	fp,r17
 80377c8:	dc401017 	ldw	r17,64(sp)
 80377cc:	b985883a 	add	r2,r23,r6
 80377d0:	10bfffc4 	addi	r2,r2,-1
 80377d4:	00c00204 	movi	r3,8
 80377d8:	15c00044 	addi	r23,r2,1
 80377dc:	1883d616 	blt	r3,r2,8038738 <_strtod_r+0x1384>
 80377e0:	e009883a 	mov	r4,fp
 80377e4:	01400284 	movi	r5,10
 80377e8:	802c2180 	call	802c218 <__mulsi3>
 80377ec:	15b9883a 	add	fp,r2,r22
 80377f0:	000d883a 	mov	r6,zero
 80377f4:	88800044 	addi	r2,r17,1
 80377f8:	d8800c15 	stw	r2,48(sp)
 80377fc:	89c00047 	ldb	r7,1(r17)
 8037800:	00022306 	br	8038090 <_strtod_r+0xcdc>
 8037804:	b0800047 	ldb	r2,1(r22)
 8037808:	01001604 	movi	r4,88
 803780c:	1102a326 	beq	r2,r4,803829c <_strtod_r+0xee8>
 8037810:	01001e04 	movi	r4,120
 8037814:	1102a126 	beq	r2,r4,803829c <_strtod_r+0xee8>
 8037818:	b0800044 	addi	r2,r22,1
 803781c:	9009883a 	mov	r4,r18
 8037820:	d8800c15 	stw	r2,48(sp)
 8037824:	14800007 	ldb	r18,0(r2)
 8037828:	102d883a 	mov	r22,r2
 803782c:	10800044 	addi	r2,r2,1
 8037830:	913ffb26 	beq	r18,r4,8037820 <_strtod_r+0x46c>
 8037834:	90022526 	beq	r18,zero,80380cc <_strtod_r+0xd18>
 8037838:	00c00044 	movi	r3,1
 803783c:	d8c01315 	stw	r3,76(sp)
 8037840:	003efc06 	br	8037434 <_strtod_r+0x80>
 8037844:	a800011e 	bne	r21,zero,803784c <_strtod_r+0x498>
 8037848:	30023026 	beq	r6,zero,803810c <_strtod_r+0xd58>
 803784c:	d9400c17 	ldw	r5,48(sp)
 8037850:	28800044 	addi	r2,r5,1
 8037854:	d8800c15 	stw	r2,48(sp)
 8037858:	29c00047 	ldb	r7,1(r5)
 803785c:	d9400e15 	stw	r5,56(sp)
 8037860:	00800ac4 	movi	r2,43
 8037864:	38821026 	beq	r7,r2,80380a8 <_strtod_r+0xcf4>
 8037868:	00800b44 	movi	r2,45
 803786c:	38821426 	beq	r7,r2,80380c0 <_strtod_r+0xd0c>
 8037870:	d8001515 	stw	zero,84(sp)
 8037874:	38bff404 	addi	r2,r7,-48
 8037878:	00c00244 	movi	r3,9
 803787c:	1881fc36 	bltu	r3,r2,8038070 <_strtod_r+0xcbc>
 8037880:	00800c04 	movi	r2,48
 8037884:	3880071e 	bne	r7,r2,80378a4 <_strtod_r+0x4f0>
 8037888:	d8800c17 	ldw	r2,48(sp)
 803788c:	3807883a 	mov	r3,r7
 8037890:	10800044 	addi	r2,r2,1
 8037894:	d8800c15 	stw	r2,48(sp)
 8037898:	11c00007 	ldb	r7,0(r2)
 803789c:	10800044 	addi	r2,r2,1
 80378a0:	38fffc26 	beq	r7,r3,8037894 <_strtod_r+0x4e0>
 80378a4:	38bff3c4 	addi	r2,r7,-49
 80378a8:	00c00204 	movi	r3,8
 80378ac:	18bf0a36 	bltu	r3,r2,80374d8 <_strtod_r+0x124>
 80378b0:	d8c00c17 	ldw	r3,48(sp)
 80378b4:	393ff404 	addi	r4,r7,-48
 80378b8:	05c00bc4 	movi	r23,47
 80378bc:	18800044 	addi	r2,r3,1
 80378c0:	d8800c15 	stw	r2,48(sp)
 80378c4:	19c00047 	ldb	r7,1(r3)
 80378c8:	d8c01615 	stw	r3,88(sp)
 80378cc:	b9c0160e 	bge	r23,r7,8037928 <_strtod_r+0x574>
 80378d0:	00c00e44 	movi	r3,57
 80378d4:	19c01416 	blt	r3,r7,8037928 <_strtod_r+0x574>
 80378d8:	d9401617 	ldw	r5,88(sp)
 80378dc:	dc001715 	stw	r16,92(sp)
 80378e0:	1823883a 	mov	r17,r3
 80378e4:	2d800084 	addi	r22,r5,2
 80378e8:	3025883a 	mov	r18,r6
 80378ec:	3821883a 	mov	r16,r7
 80378f0:	00000206 	br	80378fc <_strtod_r+0x548>
 80378f4:	b5800044 	addi	r22,r22,1
 80378f8:	8c000816 	blt	r17,r16,803791c <_strtod_r+0x568>
 80378fc:	01400284 	movi	r5,10
 8037900:	802c2180 	call	802c218 <__mulsi3>
 8037904:	dd800c15 	stw	r22,48(sp)
 8037908:	1405883a 	add	r2,r2,r16
 803790c:	b4000007 	ldb	r16,0(r22)
 8037910:	113ff404 	addi	r4,r2,-48
 8037914:	b005883a 	mov	r2,r22
 8037918:	bc3ff616 	blt	r23,r16,80378f4 <_strtod_r+0x540>
 803791c:	800f883a 	mov	r7,r16
 8037920:	dc001717 	ldw	r16,92(sp)
 8037924:	900d883a 	mov	r6,r18
 8037928:	d8c01617 	ldw	r3,88(sp)
 803792c:	10c5c83a 	sub	r2,r2,r3
 8037930:	00c00204 	movi	r3,8
 8037934:	18833716 	blt	r3,r2,8038614 <_strtod_r+0x1260>
 8037938:	009387c4 	movi	r2,19999
 803793c:	1100010e 	bge	r2,r4,8037944 <_strtod_r+0x590>
 8037940:	1009883a 	mov	r4,r2
 8037944:	d8c01517 	ldw	r3,84(sp)
 8037948:	183ee426 	beq	r3,zero,80374dc <_strtod_r+0x128>
 803794c:	0109c83a 	sub	r4,zero,r4
 8037950:	a83ee326 	beq	r21,zero,80374e0 <_strtod_r+0x12c>
 8037954:	2529c83a 	sub	r20,r4,r20
 8037958:	dd001015 	stw	r20,64(sp)
 803795c:	9800011e 	bne	r19,zero,8037964 <_strtod_r+0x5b0>
 8037960:	a827883a 	mov	r19,r21
 8037964:	00800404 	movi	r2,16
 8037968:	a823883a 	mov	r17,r21
 803796c:	1540010e 	bge	r2,r21,8037974 <_strtod_r+0x5c0>
 8037970:	1023883a 	mov	r17,r2
 8037974:	e009883a 	mov	r4,fp
 8037978:	802bfcc0 	call	802bfcc <__floatunsidf>
 803797c:	d8800615 	stw	r2,24(sp)
 8037980:	d8c00715 	stw	r3,28(sp)
 8037984:	01000244 	movi	r4,9
 8037988:	2440150e 	bge	r4,r17,80379e0 <_strtod_r+0x62c>
 803798c:	893ffdc4 	addi	r4,r17,-9
 8037990:	200890fa 	slli	r4,r4,3
 8037994:	180b883a 	mov	r5,r3
 8037998:	00c20134 	movhi	r3,2052
 803799c:	18c54c04 	addi	r3,r3,5424
 80379a0:	1907883a 	add	r3,r3,r4
 80379a4:	19800017 	ldw	r6,0(r3)
 80379a8:	19c00117 	ldw	r7,4(r3)
 80379ac:	1009883a 	mov	r4,r2
 80379b0:	802bad40 	call	802bad4 <__muldf3>
 80379b4:	d9000f17 	ldw	r4,60(sp)
 80379b8:	1025883a 	mov	r18,r2
 80379bc:	1829883a 	mov	r20,r3
 80379c0:	802bfcc0 	call	802bfcc <__floatunsidf>
 80379c4:	9009883a 	mov	r4,r18
 80379c8:	a00b883a 	mov	r5,r20
 80379cc:	100d883a 	mov	r6,r2
 80379d0:	180f883a 	mov	r7,r3
 80379d4:	803b7300 	call	803b730 <__adddf3>
 80379d8:	d8800615 	stw	r2,24(sp)
 80379dc:	d8c00715 	stw	r3,28(sp)
 80379e0:	008003c4 	movi	r2,15
 80379e4:	15401b16 	blt	r2,r21,8037a54 <_strtod_r+0x6a0>
 80379e8:	d8c01017 	ldw	r3,64(sp)
 80379ec:	18001626 	beq	r3,zero,8037a48 <_strtod_r+0x694>
 80379f0:	d9001017 	ldw	r4,64(sp)
 80379f4:	01032e0e 	bge	zero,r4,80386b0 <_strtod_r+0x12fc>
 80379f8:	00c00584 	movi	r3,22
 80379fc:	19031016 	blt	r3,r4,8038640 <_strtod_r+0x128c>
 8037a00:	200490fa 	slli	r2,r4,3
 8037a04:	00c20134 	movhi	r3,2052
 8037a08:	18c54c04 	addi	r3,r3,5424
 8037a0c:	d9000617 	ldw	r4,24(sp)
 8037a10:	1885883a 	add	r2,r3,r2
 8037a14:	d9400717 	ldw	r5,28(sp)
 8037a18:	11800017 	ldw	r6,0(r2)
 8037a1c:	11c00117 	ldw	r7,4(r2)
 8037a20:	802bad40 	call	802bad4 <__muldf3>
 8037a24:	003f0406 	br	8037638 <_strtod_r+0x284>
 8037a28:	00dffc34 	movhi	r3,32752
 8037a2c:	d8c00715 	stw	r3,28(sp)
 8037a30:	d8000615 	stw	zero,24(sp)
 8037a34:	1080020c 	andi	r2,r2,8
 8037a38:	10000326 	beq	r2,zero,8037a48 <_strtod_r+0x694>
 8037a3c:	d8800717 	ldw	r2,28(sp)
 8037a40:	10a00034 	orhi	r2,r2,32768
 8037a44:	d8800715 	stw	r2,28(sp)
 8037a48:	d8800617 	ldw	r2,24(sp)
 8037a4c:	d8c00717 	ldw	r3,28(sp)
 8037a50:	003ef906 	br	8037638 <_strtod_r+0x284>
 8037a54:	d8801017 	ldw	r2,64(sp)
 8037a58:	ac63c83a 	sub	r17,r21,r17
 8037a5c:	1463883a 	add	r17,r2,r17
 8037a60:	0442a70e 	bge	zero,r17,8038500 <_strtod_r+0x114c>
 8037a64:	888003cc 	andi	r2,r17,15
 8037a68:	10000b26 	beq	r2,zero,8037a98 <_strtod_r+0x6e4>
 8037a6c:	100490fa 	slli	r2,r2,3
 8037a70:	00c20134 	movhi	r3,2052
 8037a74:	18c54c04 	addi	r3,r3,5424
 8037a78:	d9000617 	ldw	r4,24(sp)
 8037a7c:	1885883a 	add	r2,r3,r2
 8037a80:	d9400717 	ldw	r5,28(sp)
 8037a84:	11800017 	ldw	r6,0(r2)
 8037a88:	11c00117 	ldw	r7,4(r2)
 8037a8c:	802bad40 	call	802bad4 <__muldf3>
 8037a90:	d8800615 	stw	r2,24(sp)
 8037a94:	d8c00715 	stw	r3,28(sp)
 8037a98:	00bffc04 	movi	r2,-16
 8037a9c:	88a2703a 	and	r17,r17,r2
 8037aa0:	8801a41e 	bne	r17,zero,8038134 <_strtod_r+0xd80>
 8037aa4:	0029883a 	mov	r20,zero
 8037aa8:	d9401417 	ldw	r5,80(sp)
 8037aac:	df000015 	stw	fp,0(sp)
 8037ab0:	8009883a 	mov	r4,r16
 8037ab4:	980d883a 	mov	r6,r19
 8037ab8:	a80f883a 	mov	r7,r21
 8037abc:	8035d300 	call	8035d30 <__s2b>
 8037ac0:	d8c01017 	ldw	r3,64(sp)
 8037ac4:	102d883a 	mov	r22,r2
 8037ac8:	b1000304 	addi	r4,r22,12
 8037acc:	1805d7fa 	srai	r2,r3,31
 8037ad0:	00f9c83a 	sub	fp,zero,r3
 8037ad4:	d9001315 	stw	r4,76(sp)
 8037ad8:	e0b8703a 	and	fp,fp,r2
 8037adc:	df000e15 	stw	fp,56(sp)
 8037ae0:	b1400117 	ldw	r5,4(r22)
 8037ae4:	8009883a 	mov	r4,r16
 8037ae8:	0027883a 	mov	r19,zero
 8037aec:	8035b1c0 	call	8035b1c <_Balloc>
 8037af0:	b1800417 	ldw	r6,16(r22)
 8037af4:	d9401317 	ldw	r5,76(sp)
 8037af8:	11000304 	addi	r4,r2,12
 8037afc:	31800084 	addi	r6,r6,2
 8037b00:	318d883a 	add	r6,r6,r6
 8037b04:	318d883a 	add	r6,r6,r6
 8037b08:	1025883a 	mov	r18,r2
 8037b0c:	802ebb00 	call	802ebb0 <memcpy>
 8037b10:	d9400617 	ldw	r5,24(sp)
 8037b14:	d9800717 	ldw	r6,28(sp)
 8037b18:	d8800a04 	addi	r2,sp,40
 8037b1c:	8009883a 	mov	r4,r16
 8037b20:	d9c00d04 	addi	r7,sp,52
 8037b24:	d8800015 	stw	r2,0(sp)
 8037b28:	80368100 	call	8036810 <__d2b>
 8037b2c:	8009883a 	mov	r4,r16
 8037b30:	01400044 	movi	r5,1
 8037b34:	d8800b15 	stw	r2,44(sp)
 8037b38:	8035f4c0 	call	8035f4c <__i2b>
 8037b3c:	d8c01017 	ldw	r3,64(sp)
 8037b40:	1023883a 	mov	r17,r2
 8037b44:	00c0010e 	bge	zero,r3,8037b4c <_strtod_r+0x798>
 8037b48:	1827883a 	mov	r19,r3
 8037b4c:	d8800d17 	ldw	r2,52(sp)
 8037b50:	1000de16 	blt	r2,zero,8037ecc <_strtod_r+0xb18>
 8037b54:	d9000e17 	ldw	r4,56(sp)
 8037b58:	9807883a 	mov	r3,r19
 8037b5c:	20af883a 	add	r23,r4,r2
 8037b60:	d9000a17 	ldw	r4,40(sp)
 8037b64:	1505c83a 	sub	r2,r2,r20
 8037b68:	017f00c4 	movi	r5,-1021
 8037b6c:	110d883a 	add	r6,r2,r4
 8037b70:	31409a0e 	bge	r6,r5,8037ddc <_strtod_r+0xa28>
 8037b74:	10810cc4 	addi	r2,r2,1075
 8037b78:	b8b9883a 	add	fp,r23,r2
 8037b7c:	1885883a 	add	r2,r3,r2
 8037b80:	152b883a 	add	r21,r2,r20
 8037b84:	e005883a 	mov	r2,fp
 8037b88:	bf00010e 	bge	r23,fp,8037b90 <_strtod_r+0x7dc>
 8037b8c:	b805883a 	mov	r2,r23
 8037b90:	a880010e 	bge	r21,r2,8037b98 <_strtod_r+0x7e4>
 8037b94:	a805883a 	mov	r2,r21
 8037b98:	0080030e 	bge	zero,r2,8037ba8 <_strtod_r+0x7f4>
 8037b9c:	e0b9c83a 	sub	fp,fp,r2
 8037ba0:	a8abc83a 	sub	r21,r21,r2
 8037ba4:	b8afc83a 	sub	r23,r23,r2
 8037ba8:	d9400e17 	ldw	r5,56(sp)
 8037bac:	28000f26 	beq	r5,zero,8037bec <_strtod_r+0x838>
 8037bb0:	280d883a 	mov	r6,r5
 8037bb4:	8009883a 	mov	r4,r16
 8037bb8:	880b883a 	mov	r5,r17
 8037bbc:	80361e00 	call	80361e0 <__pow5mult>
 8037bc0:	d9800b17 	ldw	r6,44(sp)
 8037bc4:	8009883a 	mov	r4,r16
 8037bc8:	100b883a 	mov	r5,r2
 8037bcc:	1023883a 	mov	r17,r2
 8037bd0:	8035f880 	call	8035f88 <__multiply>
 8037bd4:	d9400b17 	ldw	r5,44(sp)
 8037bd8:	8009883a 	mov	r4,r16
 8037bdc:	d8801815 	stw	r2,96(sp)
 8037be0:	8035bc40 	call	8035bc4 <_Bfree>
 8037be4:	d8801817 	ldw	r2,96(sp)
 8037be8:	d8800b15 	stw	r2,44(sp)
 8037bec:	0700050e 	bge	zero,fp,8037c04 <_strtod_r+0x850>
 8037bf0:	d9400b17 	ldw	r5,44(sp)
 8037bf4:	8009883a 	mov	r4,r16
 8037bf8:	e00d883a 	mov	r6,fp
 8037bfc:	803630c0 	call	803630c <__lshift>
 8037c00:	d8800b15 	stw	r2,44(sp)
 8037c04:	98000526 	beq	r19,zero,8037c1c <_strtod_r+0x868>
 8037c08:	900b883a 	mov	r5,r18
 8037c0c:	8009883a 	mov	r4,r16
 8037c10:	980d883a 	mov	r6,r19
 8037c14:	80361e00 	call	80361e0 <__pow5mult>
 8037c18:	1025883a 	mov	r18,r2
 8037c1c:	0540050e 	bge	zero,r21,8037c34 <_strtod_r+0x880>
 8037c20:	900b883a 	mov	r5,r18
 8037c24:	8009883a 	mov	r4,r16
 8037c28:	a80d883a 	mov	r6,r21
 8037c2c:	803630c0 	call	803630c <__lshift>
 8037c30:	1025883a 	mov	r18,r2
 8037c34:	05c0050e 	bge	zero,r23,8037c4c <_strtod_r+0x898>
 8037c38:	880b883a 	mov	r5,r17
 8037c3c:	8009883a 	mov	r4,r16
 8037c40:	b80d883a 	mov	r6,r23
 8037c44:	803630c0 	call	803630c <__lshift>
 8037c48:	1023883a 	mov	r17,r2
 8037c4c:	d9400b17 	ldw	r5,44(sp)
 8037c50:	8009883a 	mov	r4,r16
 8037c54:	900d883a 	mov	r6,r18
 8037c58:	80364c00 	call	80364c0 <__mdiff>
 8037c5c:	1027883a 	mov	r19,r2
 8037c60:	10800317 	ldw	r2,12(r2)
 8037c64:	9809883a 	mov	r4,r19
 8037c68:	98000315 	stw	zero,12(r19)
 8037c6c:	880b883a 	mov	r5,r17
 8037c70:	d8800f15 	stw	r2,60(sp)
 8037c74:	80364680 	call	8036468 <__mcmp>
 8037c78:	1001cb16 	blt	r2,zero,80383a8 <_strtod_r+0xff4>
 8037c7c:	1001fa26 	beq	r2,zero,8038468 <_strtod_r+0x10b4>
 8037c80:	9809883a 	mov	r4,r19
 8037c84:	880b883a 	mov	r5,r17
 8037c88:	80369540 	call	8036954 <__ratio>
 8037c8c:	1009883a 	mov	r4,r2
 8037c90:	180b883a 	mov	r5,r3
 8037c94:	000d883a 	mov	r6,zero
 8037c98:	01d00034 	movhi	r7,16384
 8037c9c:	102f883a 	mov	r23,r2
 8037ca0:	1839883a 	mov	fp,r3
 8037ca4:	803b9c00 	call	803b9c0 <__ledf2>
 8037ca8:	00804f16 	blt	zero,r2,8037de8 <_strtod_r+0xa34>
 8037cac:	d9400f17 	ldw	r5,60(sp)
 8037cb0:	28008926 	beq	r5,zero,8037ed8 <_strtod_r+0xb24>
 8037cb4:	da400717 	ldw	r9,28(sp)
 8037cb8:	05cffc34 	movhi	r23,16368
 8037cbc:	d8000815 	stw	zero,32(sp)
 8037cc0:	ddc00915 	stw	r23,36(sp)
 8037cc4:	002b883a 	mov	r21,zero
 8037cc8:	4f1ffc2c 	andhi	fp,r9,32752
 8037ccc:	009ff834 	movhi	r2,32736
 8037cd0:	e0805526 	beq	fp,r2,8037e28 <_strtod_r+0xa74>
 8037cd4:	a0001b26 	beq	r20,zero,8037d44 <_strtod_r+0x990>
 8037cd8:	0081a834 	movhi	r2,1696
 8037cdc:	17001936 	bltu	r2,fp,8037d44 <_strtod_r+0x990>
 8037ce0:	a809883a 	mov	r4,r21
 8037ce4:	b80b883a 	mov	r5,r23
 8037ce8:	01bff034 	movhi	r6,65472
 8037cec:	01d07834 	movhi	r7,16864
 8037cf0:	39ffffc4 	addi	r7,r7,-1
 8037cf4:	803b9c00 	call	803b9c0 <__ledf2>
 8037cf8:	00800d16 	blt	zero,r2,8037d30 <_strtod_r+0x97c>
 8037cfc:	a809883a 	mov	r4,r21
 8037d00:	b80b883a 	mov	r5,r23
 8037d04:	803a5dc0 	call	803a5dc <__fixunsdfsi>
 8037d08:	1000d626 	beq	r2,zero,8038064 <_strtod_r+0xcb0>
 8037d0c:	1009883a 	mov	r4,r2
 8037d10:	802bfcc0 	call	802bfcc <__floatunsidf>
 8037d14:	102b883a 	mov	r21,r2
 8037d18:	182f883a 	mov	r23,r3
 8037d1c:	d9400f17 	ldw	r5,60(sp)
 8037d20:	2800ce1e 	bne	r5,zero,803805c <_strtod_r+0xca8>
 8037d24:	b8a0003c 	xorhi	r2,r23,32768
 8037d28:	dd400815 	stw	r21,32(sp)
 8037d2c:	d8800915 	stw	r2,36(sp)
 8037d30:	d8c00917 	ldw	r3,36(sp)
 8037d34:	0081ac34 	movhi	r2,1712
 8037d38:	1885883a 	add	r2,r3,r2
 8037d3c:	1705c83a 	sub	r2,r2,fp
 8037d40:	d8800915 	stw	r2,36(sp)
 8037d44:	d9000617 	ldw	r4,24(sp)
 8037d48:	d9400717 	ldw	r5,28(sp)
 8037d4c:	80366680 	call	8036668 <__ulp>
 8037d50:	da800617 	ldw	r10,24(sp)
 8037d54:	da400717 	ldw	r9,28(sp)
 8037d58:	d9800817 	ldw	r6,32(sp)
 8037d5c:	d9c00917 	ldw	r7,36(sp)
 8037d60:	1009883a 	mov	r4,r2
 8037d64:	180b883a 	mov	r5,r3
 8037d68:	da401915 	stw	r9,100(sp)
 8037d6c:	da801815 	stw	r10,96(sp)
 8037d70:	802bad40 	call	802bad4 <__muldf3>
 8037d74:	da401917 	ldw	r9,100(sp)
 8037d78:	da801817 	ldw	r10,96(sp)
 8037d7c:	100d883a 	mov	r6,r2
 8037d80:	480b883a 	mov	r5,r9
 8037d84:	5009883a 	mov	r4,r10
 8037d88:	180f883a 	mov	r7,r3
 8037d8c:	803b7300 	call	803b730 <__adddf3>
 8037d90:	d8800615 	stw	r2,24(sp)
 8037d94:	d8c00715 	stw	r3,28(sp)
 8037d98:	1813883a 	mov	r9,r3
 8037d9c:	a000021e 	bne	r20,zero,8037da8 <_strtod_r+0x9f4>
 8037da0:	489ffc2c 	andhi	r2,r9,32752
 8037da4:	e0807226 	beq	fp,r2,8037f70 <_strtod_r+0xbbc>
 8037da8:	d9400b17 	ldw	r5,44(sp)
 8037dac:	8009883a 	mov	r4,r16
 8037db0:	8035bc40 	call	8035bc4 <_Bfree>
 8037db4:	8009883a 	mov	r4,r16
 8037db8:	900b883a 	mov	r5,r18
 8037dbc:	8035bc40 	call	8035bc4 <_Bfree>
 8037dc0:	8009883a 	mov	r4,r16
 8037dc4:	880b883a 	mov	r5,r17
 8037dc8:	8035bc40 	call	8035bc4 <_Bfree>
 8037dcc:	8009883a 	mov	r4,r16
 8037dd0:	980b883a 	mov	r5,r19
 8037dd4:	8035bc40 	call	8035bc4 <_Bfree>
 8037dd8:	003f4106 	br	8037ae0 <_strtod_r+0x72c>
 8037ddc:	00800d84 	movi	r2,54
 8037de0:	1105c83a 	sub	r2,r2,r4
 8037de4:	003f6406 	br	8037b78 <_strtod_r+0x7c4>
 8037de8:	b809883a 	mov	r4,r23
 8037dec:	e00b883a 	mov	r5,fp
 8037df0:	000d883a 	mov	r6,zero
 8037df4:	01cff834 	movhi	r7,16352
 8037df8:	802bad40 	call	802bad4 <__muldf3>
 8037dfc:	d9000f17 	ldw	r4,60(sp)
 8037e00:	102b883a 	mov	r21,r2
 8037e04:	182f883a 	mov	r23,r3
 8037e08:	2000011e 	bne	r4,zero,8037e10 <_strtod_r+0xa5c>
 8037e0c:	18e0003c 	xorhi	r3,r3,32768
 8037e10:	da400717 	ldw	r9,28(sp)
 8037e14:	d8800815 	stw	r2,32(sp)
 8037e18:	d8c00915 	stw	r3,36(sp)
 8037e1c:	4f1ffc2c 	andhi	fp,r9,32752
 8037e20:	009ff834 	movhi	r2,32736
 8037e24:	e0bfab1e 	bne	fp,r2,8037cd4 <_strtod_r+0x920>
 8037e28:	d8800617 	ldw	r2,24(sp)
 8037e2c:	00ff2c34 	movhi	r3,64688
 8037e30:	48d3883a 	add	r9,r9,r3
 8037e34:	1009883a 	mov	r4,r2
 8037e38:	d8800415 	stw	r2,16(sp)
 8037e3c:	d8800717 	ldw	r2,28(sp)
 8037e40:	480b883a 	mov	r5,r9
 8037e44:	da400715 	stw	r9,28(sp)
 8037e48:	d8800515 	stw	r2,20(sp)
 8037e4c:	80366680 	call	8036668 <__ulp>
 8037e50:	da800617 	ldw	r10,24(sp)
 8037e54:	da400717 	ldw	r9,28(sp)
 8037e58:	d9800817 	ldw	r6,32(sp)
 8037e5c:	d9c00917 	ldw	r7,36(sp)
 8037e60:	1009883a 	mov	r4,r2
 8037e64:	180b883a 	mov	r5,r3
 8037e68:	da401915 	stw	r9,100(sp)
 8037e6c:	da801815 	stw	r10,96(sp)
 8037e70:	802bad40 	call	802bad4 <__muldf3>
 8037e74:	da801817 	ldw	r10,96(sp)
 8037e78:	da401917 	ldw	r9,100(sp)
 8037e7c:	100d883a 	mov	r6,r2
 8037e80:	5009883a 	mov	r4,r10
 8037e84:	480b883a 	mov	r5,r9
 8037e88:	180f883a 	mov	r7,r3
 8037e8c:	803b7300 	call	803b730 <__adddf3>
 8037e90:	d8800615 	stw	r2,24(sp)
 8037e94:	015f2834 	movhi	r5,31904
 8037e98:	297fffc4 	addi	r5,r5,-1
 8037e9c:	189ffc2c 	andhi	r2,r3,32752
 8037ea0:	2880642e 	bgeu	r5,r2,8038034 <_strtod_r+0xc80>
 8037ea4:	d8800517 	ldw	r2,20(sp)
 8037ea8:	00dffc34 	movhi	r3,32752
 8037eac:	18ffffc4 	addi	r3,r3,-1
 8037eb0:	10c18526 	beq	r2,r3,80384c8 <_strtod_r+0x1114>
 8037eb4:	011ffc34 	movhi	r4,32752
 8037eb8:	213fffc4 	addi	r4,r4,-1
 8037ebc:	00bfffc4 	movi	r2,-1
 8037ec0:	d9000715 	stw	r4,28(sp)
 8037ec4:	d8800615 	stw	r2,24(sp)
 8037ec8:	003fb706 	br	8037da8 <_strtod_r+0x9f4>
 8037ecc:	9887c83a 	sub	r3,r19,r2
 8037ed0:	ddc00e17 	ldw	r23,56(sp)
 8037ed4:	003f2206 	br	8037b60 <_strtod_r+0x7ac>
 8037ed8:	d8800617 	ldw	r2,24(sp)
 8037edc:	10001a1e 	bne	r2,zero,8037f48 <_strtod_r+0xb94>
 8037ee0:	da400717 	ldw	r9,28(sp)
 8037ee4:	00c00434 	movhi	r3,16
 8037ee8:	18ffffc4 	addi	r3,r3,-1
 8037eec:	48c4703a 	and	r2,r9,r3
 8037ef0:	1000191e 	bne	r2,zero,8037f58 <_strtod_r+0xba4>
 8037ef4:	b809883a 	mov	r4,r23
 8037ef8:	e00b883a 	mov	r5,fp
 8037efc:	000d883a 	mov	r6,zero
 8037f00:	01cffc34 	movhi	r7,16368
 8037f04:	da401915 	stw	r9,100(sp)
 8037f08:	803b9640 	call	803b964 <__ltdf2>
 8037f0c:	da401917 	ldw	r9,100(sp)
 8037f10:	1001bb16 	blt	r2,zero,8038600 <_strtod_r+0x124c>
 8037f14:	b809883a 	mov	r4,r23
 8037f18:	e00b883a 	mov	r5,fp
 8037f1c:	000d883a 	mov	r6,zero
 8037f20:	01cff834 	movhi	r7,16352
 8037f24:	802bad40 	call	802bad4 <__muldf3>
 8037f28:	da401917 	ldw	r9,100(sp)
 8037f2c:	182f883a 	mov	r23,r3
 8037f30:	102b883a 	mov	r21,r2
 8037f34:	1007883a 	mov	r3,r2
 8037f38:	b8a0003c 	xorhi	r2,r23,32768
 8037f3c:	d8c00815 	stw	r3,32(sp)
 8037f40:	d8800915 	stw	r2,36(sp)
 8037f44:	003f6006 	br	8037cc8 <_strtod_r+0x914>
 8037f48:	00c00044 	movi	r3,1
 8037f4c:	da400717 	ldw	r9,28(sp)
 8037f50:	10c0011e 	bne	r2,r3,8037f58 <_strtod_r+0xba4>
 8037f54:	4800c526 	beq	r9,zero,803826c <_strtod_r+0xeb8>
 8037f58:	00affc34 	movhi	r2,49136
 8037f5c:	d8000815 	stw	zero,32(sp)
 8037f60:	d8800915 	stw	r2,36(sp)
 8037f64:	002b883a 	mov	r21,zero
 8037f68:	05cffc34 	movhi	r23,16368
 8037f6c:	003f5606 	br	8037cc8 <_strtod_r+0x914>
 8037f70:	b80b883a 	mov	r5,r23
 8037f74:	a809883a 	mov	r4,r21
 8037f78:	da401915 	stw	r9,100(sp)
 8037f7c:	803baf00 	call	803baf0 <__fixdfsi>
 8037f80:	1009883a 	mov	r4,r2
 8037f84:	803ba1c0 	call	803ba1c <__floatsidf>
 8037f88:	b80b883a 	mov	r5,r23
 8037f8c:	a809883a 	mov	r4,r21
 8037f90:	100d883a 	mov	r6,r2
 8037f94:	180f883a 	mov	r7,r3
 8037f98:	803b7840 	call	803b784 <__subdf3>
 8037f9c:	102f883a 	mov	r23,r2
 8037fa0:	d8800f17 	ldw	r2,60(sp)
 8037fa4:	1839883a 	mov	fp,r3
 8037fa8:	da401917 	ldw	r9,100(sp)
 8037fac:	1000021e 	bne	r2,zero,8037fb8 <_strtod_r+0xc04>
 8037fb0:	d8800617 	ldw	r2,24(sp)
 8037fb4:	10004826 	beq	r2,zero,80380d8 <_strtod_r+0xd24>
 8037fb8:	b809883a 	mov	r4,r23
 8037fbc:	e00b883a 	mov	r5,fp
 8037fc0:	01a52834 	movhi	r6,38048
 8037fc4:	318d6544 	addi	r6,r6,13717
 8037fc8:	01cff834 	movhi	r7,16352
 8037fcc:	39ffffc4 	addi	r7,r7,-1
 8037fd0:	803b9640 	call	803b964 <__ltdf2>
 8037fd4:	10000716 	blt	r2,zero,8037ff4 <_strtod_r+0xc40>
 8037fd8:	b809883a 	mov	r4,r23
 8037fdc:	e00b883a 	mov	r5,fp
 8037fe0:	018d6c34 	movhi	r6,13744
 8037fe4:	31b94d44 	addi	r6,r6,-6859
 8037fe8:	01cff834 	movhi	r7,16352
 8037fec:	803b89c0 	call	803b89c <__gtdf2>
 8037ff0:	00bf6d0e 	bge	zero,r2,8037da8 <_strtod_r+0x9f4>
 8037ff4:	d9400b17 	ldw	r5,44(sp)
 8037ff8:	8009883a 	mov	r4,r16
 8037ffc:	8035bc40 	call	8035bc4 <_Bfree>
 8038000:	8009883a 	mov	r4,r16
 8038004:	900b883a 	mov	r5,r18
 8038008:	8035bc40 	call	8035bc4 <_Bfree>
 803800c:	8009883a 	mov	r4,r16
 8038010:	880b883a 	mov	r5,r17
 8038014:	8035bc40 	call	8035bc4 <_Bfree>
 8038018:	8009883a 	mov	r4,r16
 803801c:	b00b883a 	mov	r5,r22
 8038020:	8035bc40 	call	8035bc4 <_Bfree>
 8038024:	8009883a 	mov	r4,r16
 8038028:	980b883a 	mov	r5,r19
 803802c:	8035bc40 	call	8035bc4 <_Bfree>
 8038030:	003e8506 	br	8037a48 <_strtod_r+0x694>
 8038034:	0240d434 	movhi	r9,848
 8038038:	1a53883a 	add	r9,r3,r9
 803803c:	da400715 	stw	r9,28(sp)
 8038040:	003f5606 	br	8037d9c <_strtod_r+0x9e8>
 8038044:	a827883a 	mov	r19,r21
 8038048:	dd801415 	stw	r22,80(sp)
 803804c:	000d883a 	mov	r6,zero
 8038050:	0029883a 	mov	r20,zero
 8038054:	d8001015 	stw	zero,64(sp)
 8038058:	003d1d06 	br	80374d0 <_strtod_r+0x11c>
 803805c:	b805883a 	mov	r2,r23
 8038060:	003f3106 	br	8037d28 <_strtod_r+0x974>
 8038064:	002b883a 	mov	r21,zero
 8038068:	05cffc34 	movhi	r23,16368
 803806c:	003f2b06 	br	8037d1c <_strtod_r+0x968>
 8038070:	d9400e17 	ldw	r5,56(sp)
 8038074:	0009883a 	mov	r4,zero
 8038078:	d9400c15 	stw	r5,48(sp)
 803807c:	003d1706 	br	80374dc <_strtod_r+0x128>
 8038080:	dd801415 	stw	r22,80(sp)
 8038084:	a82f883a 	mov	r23,r21
 8038088:	000d883a 	mov	r6,zero
 803808c:	0029883a 	mov	r20,zero
 8038090:	3dbff404 	addi	r22,r7,-48
 8038094:	00800244 	movi	r2,9
 8038098:	15802136 	bltu	r2,r22,8038120 <_strtod_r+0xd6c>
 803809c:	31800044 	addi	r6,r6,1
 80380a0:	dc400c17 	ldw	r17,48(sp)
 80380a4:	003daa06 	br	8037750 <_strtod_r+0x39c>
 80380a8:	d8001515 	stw	zero,84(sp)
 80380ac:	d9400e17 	ldw	r5,56(sp)
 80380b0:	28800084 	addi	r2,r5,2
 80380b4:	d8800c15 	stw	r2,48(sp)
 80380b8:	29c00087 	ldb	r7,2(r5)
 80380bc:	003ded06 	br	8037874 <_strtod_r+0x4c0>
 80380c0:	00c00044 	movi	r3,1
 80380c4:	d8c01515 	stw	r3,84(sp)
 80380c8:	003ff806 	br	80380ac <_strtod_r+0xcf8>
 80380cc:	0005883a 	mov	r2,zero
 80380d0:	0007883a 	mov	r3,zero
 80380d4:	003d5806 	br	8037638 <_strtod_r+0x284>
 80380d8:	00c00434 	movhi	r3,16
 80380dc:	18ffffc4 	addi	r3,r3,-1
 80380e0:	48d2703a 	and	r9,r9,r3
 80380e4:	483fb41e 	bne	r9,zero,8037fb8 <_strtod_r+0xc04>
 80380e8:	b809883a 	mov	r4,r23
 80380ec:	e00b883a 	mov	r5,fp
 80380f0:	01a52834 	movhi	r6,38048
 80380f4:	318d6544 	addi	r6,r6,13717
 80380f8:	01cff434 	movhi	r7,16336
 80380fc:	39ffffc4 	addi	r7,r7,-1
 8038100:	803b9640 	call	803b964 <__ltdf2>
 8038104:	103f280e 	bge	r2,zero,8037da8 <_strtod_r+0x9f4>
 8038108:	003fba06 	br	8037ff4 <_strtod_r+0xc40>
 803810c:	d8c01317 	ldw	r3,76(sp)
 8038110:	183dce1e 	bne	r3,zero,803784c <_strtod_r+0x498>
 8038114:	d8800617 	ldw	r2,24(sp)
 8038118:	d8c00717 	ldw	r3,28(sp)
 803811c:	003d4306 	br	803762c <_strtod_r+0x278>
 8038120:	00c00044 	movi	r3,1
 8038124:	a827883a 	mov	r19,r21
 8038128:	d8c01015 	stw	r3,64(sp)
 803812c:	b82b883a 	mov	r21,r23
 8038130:	003ce506 	br	80374c8 <_strtod_r+0x114>
 8038134:	00804d04 	movi	r2,308
 8038138:	1440ec16 	blt	r2,r17,80384ec <_strtod_r+0x1138>
 803813c:	8825d13a 	srai	r18,r17,4
 8038140:	05c00044 	movi	r23,1
 8038144:	bc81ca0e 	bge	r23,r18,8038870 <_strtod_r+0x14bc>
 8038148:	d8800617 	ldw	r2,24(sp)
 803814c:	d8c00717 	ldw	r3,28(sp)
 8038150:	05820134 	movhi	r22,2052
 8038154:	b5854204 	addi	r22,r22,5384
 8038158:	b029883a 	mov	r20,r22
 803815c:	0023883a 	mov	r17,zero
 8038160:	9180004c 	andi	r6,r18,1
 8038164:	30000526 	beq	r6,zero,803817c <_strtod_r+0xdc8>
 8038168:	a1800017 	ldw	r6,0(r20)
 803816c:	a1c00117 	ldw	r7,4(r20)
 8038170:	1009883a 	mov	r4,r2
 8038174:	180b883a 	mov	r5,r3
 8038178:	802bad40 	call	802bad4 <__muldf3>
 803817c:	9025d07a 	srai	r18,r18,1
 8038180:	8c400044 	addi	r17,r17,1
 8038184:	a5000204 	addi	r20,r20,8
 8038188:	bcbff516 	blt	r23,r18,8038160 <_strtod_r+0xdac>
 803818c:	d8800615 	stw	r2,24(sp)
 8038190:	d8c00715 	stw	r3,28(sp)
 8038194:	880490fa 	slli	r2,r17,3
 8038198:	d9400717 	ldw	r5,28(sp)
 803819c:	d9000617 	ldw	r4,24(sp)
 80381a0:	b0a3883a 	add	r17,r22,r2
 80381a4:	89800017 	ldw	r6,0(r17)
 80381a8:	89c00117 	ldw	r7,4(r17)
 80381ac:	00bf2c34 	movhi	r2,64688
 80381b0:	288b883a 	add	r5,r5,r2
 80381b4:	802bad40 	call	802bad4 <__muldf3>
 80381b8:	d8800615 	stw	r2,24(sp)
 80381bc:	011f2834 	movhi	r4,31904
 80381c0:	189ffc2c 	andhi	r2,r3,32752
 80381c4:	2080c936 	bltu	r4,r2,80384ec <_strtod_r+0x1138>
 80381c8:	011f2434 	movhi	r4,31888
 80381cc:	2081652e 	bgeu	r4,r2,8038764 <_strtod_r+0x13b0>
 80381d0:	009ffc34 	movhi	r2,32752
 80381d4:	10bfffc4 	addi	r2,r2,-1
 80381d8:	d8800715 	stw	r2,28(sp)
 80381dc:	00bfffc4 	movi	r2,-1
 80381e0:	d8800615 	stw	r2,24(sp)
 80381e4:	003e2f06 	br	8037aa4 <_strtod_r+0x6f0>
 80381e8:	00c00044 	movi	r3,1
 80381ec:	0027883a 	mov	r19,zero
 80381f0:	dd801415 	stw	r22,80(sp)
 80381f4:	0029883a 	mov	r20,zero
 80381f8:	d8c01015 	stw	r3,64(sp)
 80381fc:	003cb206 	br	80374c8 <_strtod_r+0x114>
 8038200:	d8800717 	ldw	r2,28(sp)
 8038204:	00c00434 	movhi	r3,16
 8038208:	18ffffc4 	addi	r3,r3,-1
 803820c:	10c6703a 	and	r3,r2,r3
 8038210:	1801471e 	bne	r3,zero,8038730 <_strtod_r+0x137c>
 8038214:	d8c00617 	ldw	r3,24(sp)
 8038218:	18007e26 	beq	r3,zero,8038414 <_strtod_r+0x1060>
 803821c:	18c0004c 	andi	r3,r3,1
 8038220:	1800a726 	beq	r3,zero,80384c0 <_strtod_r+0x110c>
 8038224:	ddc00617 	ldw	r23,24(sp)
 8038228:	dd400717 	ldw	r21,28(sp)
 803822c:	b809883a 	mov	r4,r23
 8038230:	a80b883a 	mov	r5,r21
 8038234:	80366680 	call	8036668 <__ulp>
 8038238:	b809883a 	mov	r4,r23
 803823c:	a80b883a 	mov	r5,r21
 8038240:	100d883a 	mov	r6,r2
 8038244:	180f883a 	mov	r7,r3
 8038248:	803b7840 	call	803b784 <__subdf3>
 803824c:	1009883a 	mov	r4,r2
 8038250:	180b883a 	mov	r5,r3
 8038254:	000d883a 	mov	r6,zero
 8038258:	000f883a 	mov	r7,zero
 803825c:	d8800615 	stw	r2,24(sp)
 8038260:	d8c00715 	stw	r3,28(sp)
 8038264:	803b7e40 	call	803b7e4 <__eqdf2>
 8038268:	1000951e 	bne	r2,zero,80384c0 <_strtod_r+0x110c>
 803826c:	d8000615 	stw	zero,24(sp)
 8038270:	d8000715 	stw	zero,28(sp)
 8038274:	00800884 	movi	r2,34
 8038278:	80800015 	stw	r2,0(r16)
 803827c:	003f5d06 	br	8037ff4 <_strtod_r+0xc40>
 8038280:	00800404 	movi	r2,16
 8038284:	153d4916 	blt	r2,r20,80377ac <_strtod_r+0x3f8>
 8038288:	8009883a 	mov	r4,r16
 803828c:	01400284 	movi	r5,10
 8038290:	802c2180 	call	802c218 <__mulsi3>
 8038294:	1021883a 	mov	r16,r2
 8038298:	003d4406 	br	80377ac <_strtod_r+0x3f8>
 803829c:	d9001217 	ldw	r4,72(sp)
 80382a0:	d8800b04 	addi	r2,sp,44
 80382a4:	04c20134 	movhi	r19,2052
 80382a8:	9cc7a904 	addi	r19,r19,7844
 80382ac:	d9000115 	stw	r4,4(sp)
 80382b0:	d8800015 	stw	r2,0(sp)
 80382b4:	8009883a 	mov	r4,r16
 80382b8:	d9400c04 	addi	r5,sp,48
 80382bc:	980d883a 	mov	r6,r19
 80382c0:	d9c00a04 	addi	r7,sp,40
 80382c4:	8039bd80 	call	8039bd8 <__gethex>
 80382c8:	148001cc 	andi	r18,r2,7
 80382cc:	903dde26 	beq	r18,zero,8037a48 <_strtod_r+0x694>
 80382d0:	00c00184 	movi	r3,6
 80382d4:	90c0f226 	beq	r18,r3,80386a0 <_strtod_r+0x12ec>
 80382d8:	d9800b17 	ldw	r6,44(sp)
 80382dc:	30000826 	beq	r6,zero,8038300 <_strtod_r+0xf4c>
 80382e0:	99400017 	ldw	r5,0(r19)
 80382e4:	d9000204 	addi	r4,sp,8
 80382e8:	d8801815 	stw	r2,96(sp)
 80382ec:	8036a6c0 	call	8036a6c <__copybits>
 80382f0:	d9400b17 	ldw	r5,44(sp)
 80382f4:	8009883a 	mov	r4,r16
 80382f8:	8035bc40 	call	8035bc4 <_Bfree>
 80382fc:	d8801817 	ldw	r2,96(sp)
 8038300:	00c00184 	movi	r3,6
 8038304:	d9000a17 	ldw	r4,40(sp)
 8038308:	1cbdca36 	bltu	r3,r18,8037a34 <_strtod_r+0x680>
 803830c:	94a5883a 	add	r18,r18,r18
 8038310:	94a5883a 	add	r18,r18,r18
 8038314:	00c20134 	movhi	r3,2052
 8038318:	18e0ca04 	addi	r3,r3,-31960
 803831c:	90c7883a 	add	r3,r18,r3
 8038320:	18c00017 	ldw	r3,0(r3)
 8038324:	1800683a 	jmp	r3
 8038328:	0803839c 	xori	zero,at,3598
 803832c:	08038358 	cmpnei	zero,at,3597
 8038330:	08038344 	addi	zero,at,3597
 8038334:	08037a28 	cmpgeui	zero,at,3560
 8038338:	08038384 	addi	zero,at,3598
 803833c:	08038358 	cmpnei	zero,at,3597
 8038340:	0803839c 	xori	zero,at,3598
 8038344:	d8c00217 	ldw	r3,8(sp)
 8038348:	d8c00615 	stw	r3,24(sp)
 803834c:	d8c00317 	ldw	r3,12(sp)
 8038350:	d8c00715 	stw	r3,28(sp)
 8038354:	003db706 	br	8037a34 <_strtod_r+0x680>
 8038358:	21010cc4 	addi	r4,r4,1075
 803835c:	d9400317 	ldw	r5,12(sp)
 8038360:	2008953a 	slli	r4,r4,20
 8038364:	00fffc34 	movhi	r3,65520
 8038368:	18ffffc4 	addi	r3,r3,-1
 803836c:	28c6703a 	and	r3,r5,r3
 8038370:	20c6b03a 	or	r3,r4,r3
 8038374:	d9000217 	ldw	r4,8(sp)
 8038378:	d8c00715 	stw	r3,28(sp)
 803837c:	d9000615 	stw	r4,24(sp)
 8038380:	003dac06 	br	8037a34 <_strtod_r+0x680>
 8038384:	00e00034 	movhi	r3,32768
 8038388:	18ffffc4 	addi	r3,r3,-1
 803838c:	d8c00715 	stw	r3,28(sp)
 8038390:	00ffffc4 	movi	r3,-1
 8038394:	d8c00615 	stw	r3,24(sp)
 8038398:	003da606 	br	8037a34 <_strtod_r+0x680>
 803839c:	d8000715 	stw	zero,28(sp)
 80383a0:	d8000615 	stw	zero,24(sp)
 80383a4:	003da306 	br	8037a34 <_strtod_r+0x680>
 80383a8:	d8c00f17 	ldw	r3,60(sp)
 80383ac:	1800441e 	bne	r3,zero,80384c0 <_strtod_r+0x110c>
 80383b0:	d8800617 	ldw	r2,24(sp)
 80383b4:	1000421e 	bne	r2,zero,80384c0 <_strtod_r+0x110c>
 80383b8:	d8800717 	ldw	r2,28(sp)
 80383bc:	00c00434 	movhi	r3,16
 80383c0:	18ffffc4 	addi	r3,r3,-1
 80383c4:	10c6703a 	and	r3,r2,r3
 80383c8:	18003d1e 	bne	r3,zero,80384c0 <_strtod_r+0x110c>
 80383cc:	109ffc2c 	andhi	r2,r2,32752
 80383d0:	00c1ac34 	movhi	r3,1712
 80383d4:	18803a2e 	bgeu	r3,r2,80384c0 <_strtod_r+0x110c>
 80383d8:	98800517 	ldw	r2,20(r19)
 80383dc:	1000031e 	bne	r2,zero,80383ec <_strtod_r+0x1038>
 80383e0:	98800417 	ldw	r2,16(r19)
 80383e4:	00c00044 	movi	r3,1
 80383e8:	1880350e 	bge	r3,r2,80384c0 <_strtod_r+0x110c>
 80383ec:	980b883a 	mov	r5,r19
 80383f0:	8009883a 	mov	r4,r16
 80383f4:	01800044 	movi	r6,1
 80383f8:	803630c0 	call	803630c <__lshift>
 80383fc:	1009883a 	mov	r4,r2
 8038400:	880b883a 	mov	r5,r17
 8038404:	1027883a 	mov	r19,r2
 8038408:	80364680 	call	8036468 <__mcmp>
 803840c:	00802c0e 	bge	zero,r2,80384c0 <_strtod_r+0x110c>
 8038410:	d8800717 	ldw	r2,28(sp)
 8038414:	109ffc2c 	andhi	r2,r2,32752
 8038418:	a000ed26 	beq	r20,zero,80387d0 <_strtod_r+0x141c>
 803841c:	00c1ac34 	movhi	r3,1712
 8038420:	1880eb36 	bltu	r3,r2,80387d0 <_strtod_r+0x141c>
 8038424:	00c0dc34 	movhi	r3,880
 8038428:	18bf902e 	bgeu	r3,r2,803826c <_strtod_r+0xeb8>
 803842c:	d9000617 	ldw	r4,24(sp)
 8038430:	d9400717 	ldw	r5,28(sp)
 8038434:	008e5434 	movhi	r2,14672
 8038438:	000d883a 	mov	r6,zero
 803843c:	100f883a 	mov	r7,r2
 8038440:	d8800515 	stw	r2,20(sp)
 8038444:	d8000415 	stw	zero,16(sp)
 8038448:	802bad40 	call	802bad4 <__muldf3>
 803844c:	d8800615 	stw	r2,24(sp)
 8038450:	d8c00715 	stw	r3,28(sp)
 8038454:	183ee71e 	bne	r3,zero,8037ff4 <_strtod_r+0xc40>
 8038458:	103ee61e 	bne	r2,zero,8037ff4 <_strtod_r+0xc40>
 803845c:	00800884 	movi	r2,34
 8038460:	80800015 	stw	r2,0(r16)
 8038464:	003ee306 	br	8037ff4 <_strtod_r+0xc40>
 8038468:	d9000f17 	ldw	r4,60(sp)
 803846c:	203f6426 	beq	r4,zero,8038200 <_strtod_r+0xe4c>
 8038470:	d8c00717 	ldw	r3,28(sp)
 8038474:	00800434 	movhi	r2,16
 8038478:	10bfffc4 	addi	r2,r2,-1
 803847c:	1888703a 	and	r4,r3,r2
 8038480:	2080bd26 	beq	r4,r2,8038778 <_strtod_r+0x13c4>
 8038484:	d8800617 	ldw	r2,24(sp)
 8038488:	1080004c 	andi	r2,r2,1
 803848c:	10000c26 	beq	r2,zero,80384c0 <_strtod_r+0x110c>
 8038490:	ddc00617 	ldw	r23,24(sp)
 8038494:	dd400717 	ldw	r21,28(sp)
 8038498:	b809883a 	mov	r4,r23
 803849c:	a80b883a 	mov	r5,r21
 80384a0:	80366680 	call	8036668 <__ulp>
 80384a4:	b809883a 	mov	r4,r23
 80384a8:	a80b883a 	mov	r5,r21
 80384ac:	100d883a 	mov	r6,r2
 80384b0:	180f883a 	mov	r7,r3
 80384b4:	803b7300 	call	803b730 <__adddf3>
 80384b8:	d8800615 	stw	r2,24(sp)
 80384bc:	d8c00715 	stw	r3,28(sp)
 80384c0:	a03fda1e 	bne	r20,zero,803842c <_strtod_r+0x1078>
 80384c4:	003ecb06 	br	8037ff4 <_strtod_r+0xc40>
 80384c8:	d8c00417 	ldw	r3,16(sp)
 80384cc:	00bfffc4 	movi	r2,-1
 80384d0:	18be781e 	bne	r3,r2,8037eb4 <_strtod_r+0xb00>
 80384d4:	00800884 	movi	r2,34
 80384d8:	80800015 	stw	r2,0(r16)
 80384dc:	009ffc34 	movhi	r2,32752
 80384e0:	d8800715 	stw	r2,28(sp)
 80384e4:	d8000615 	stw	zero,24(sp)
 80384e8:	003ec206 	br	8037ff4 <_strtod_r+0xc40>
 80384ec:	00800884 	movi	r2,34
 80384f0:	80800015 	stw	r2,0(r16)
 80384f4:	00dffc34 	movhi	r3,32752
 80384f8:	0005883a 	mov	r2,zero
 80384fc:	003c4e06 	br	8037638 <_strtod_r+0x284>
 8038500:	883d6826 	beq	r17,zero,8037aa4 <_strtod_r+0x6f0>
 8038504:	0463c83a 	sub	r17,zero,r17
 8038508:	888003cc 	andi	r2,r17,15
 803850c:	10000b26 	beq	r2,zero,803853c <_strtod_r+0x1188>
 8038510:	100490fa 	slli	r2,r2,3
 8038514:	00c20134 	movhi	r3,2052
 8038518:	18c54c04 	addi	r3,r3,5424
 803851c:	d9000617 	ldw	r4,24(sp)
 8038520:	1885883a 	add	r2,r3,r2
 8038524:	d9400717 	ldw	r5,28(sp)
 8038528:	11800017 	ldw	r6,0(r2)
 803852c:	11c00117 	ldw	r7,4(r2)
 8038530:	802bdb80 	call	802bdb8 <__divdf3>
 8038534:	d8800615 	stw	r2,24(sp)
 8038538:	d8c00715 	stw	r3,28(sp)
 803853c:	8823d13a 	srai	r17,r17,4
 8038540:	883d5826 	beq	r17,zero,8037aa4 <_strtod_r+0x6f0>
 8038544:	008007c4 	movi	r2,31
 8038548:	14402816 	blt	r2,r17,80385ec <_strtod_r+0x1238>
 803854c:	8880040c 	andi	r2,r17,16
 8038550:	1000cf1e 	bne	r2,zero,8038890 <_strtod_r+0x14dc>
 8038554:	0029883a 	mov	r20,zero
 8038558:	0440100e 	bge	zero,r17,803859c <_strtod_r+0x11e8>
 803855c:	d8800617 	ldw	r2,24(sp)
 8038560:	d8c00717 	ldw	r3,28(sp)
 8038564:	04820134 	movhi	r18,2052
 8038568:	94858504 	addi	r18,r18,5652
 803856c:	8980004c 	andi	r6,r17,1
 8038570:	30000526 	beq	r6,zero,8038588 <_strtod_r+0x11d4>
 8038574:	91800017 	ldw	r6,0(r18)
 8038578:	91c00117 	ldw	r7,4(r18)
 803857c:	1009883a 	mov	r4,r2
 8038580:	180b883a 	mov	r5,r3
 8038584:	802bad40 	call	802bad4 <__muldf3>
 8038588:	8823d07a 	srai	r17,r17,1
 803858c:	94800204 	addi	r18,r18,8
 8038590:	883ff61e 	bne	r17,zero,803856c <_strtod_r+0x11b8>
 8038594:	d8800615 	stw	r2,24(sp)
 8038598:	d8c00715 	stw	r3,28(sp)
 803859c:	a0000d26 	beq	r20,zero,80385d4 <_strtod_r+0x1220>
 80385a0:	d8c00717 	ldw	r3,28(sp)
 80385a4:	01001ac4 	movi	r4,107
 80385a8:	189ffc2c 	andhi	r2,r3,32752
 80385ac:	1004d53a 	srli	r2,r2,20
 80385b0:	2085c83a 	sub	r2,r4,r2
 80385b4:	0080070e 	bge	zero,r2,80385d4 <_strtod_r+0x1220>
 80385b8:	010007c4 	movi	r4,31
 80385bc:	2080c30e 	bge	r4,r2,80388cc <_strtod_r+0x1518>
 80385c0:	d8000615 	stw	zero,24(sp)
 80385c4:	01000d04 	movi	r4,52
 80385c8:	2080c60e 	bge	r4,r2,80388e4 <_strtod_r+0x1530>
 80385cc:	0080dc34 	movhi	r2,880
 80385d0:	d8800715 	stw	r2,28(sp)
 80385d4:	d9000617 	ldw	r4,24(sp)
 80385d8:	d9400717 	ldw	r5,28(sp)
 80385dc:	000d883a 	mov	r6,zero
 80385e0:	000f883a 	mov	r7,zero
 80385e4:	803b7e40 	call	803b7e4 <__eqdf2>
 80385e8:	103d2f1e 	bne	r2,zero,8037aa8 <_strtod_r+0x6f4>
 80385ec:	00800884 	movi	r2,34
 80385f0:	80800015 	stw	r2,0(r16)
 80385f4:	0007883a 	mov	r3,zero
 80385f8:	0005883a 	mov	r2,zero
 80385fc:	003c0e06 	br	8037638 <_strtod_r+0x284>
 8038600:	0007883a 	mov	r3,zero
 8038604:	00aff834 	movhi	r2,49120
 8038608:	002b883a 	mov	r21,zero
 803860c:	05cff834 	movhi	r23,16352
 8038610:	003e4a06 	br	8037f3c <_strtod_r+0xb88>
 8038614:	011387c4 	movi	r4,19999
 8038618:	003cca06 	br	8037944 <_strtod_r+0x590>
 803861c:	b00b883a 	mov	r5,r22
 8038620:	d8000f15 	stw	zero,60(sp)
 8038624:	0039883a 	mov	fp,zero
 8038628:	002b883a 	mov	r21,zero
 803862c:	003c2d06 	br	80376e4 <_strtod_r+0x330>
 8038630:	d8000f15 	stw	zero,60(sp)
 8038634:	0039883a 	mov	fp,zero
 8038638:	002b883a 	mov	r21,zero
 803863c:	003b9d06 	br	80374b4 <_strtod_r+0x100>
 8038640:	d9401017 	ldw	r5,64(sp)
 8038644:	00c00944 	movi	r3,37
 8038648:	1d47c83a 	sub	r3,r3,r21
 803864c:	197d0116 	blt	r3,r5,8037a54 <_strtod_r+0x6a0>
 8038650:	1563c83a 	sub	r17,r2,r21
 8038654:	880490fa 	slli	r2,r17,3
 8038658:	04020134 	movhi	r16,2052
 803865c:	84054c04 	addi	r16,r16,5424
 8038660:	d9000617 	ldw	r4,24(sp)
 8038664:	8085883a 	add	r2,r16,r2
 8038668:	d9400717 	ldw	r5,28(sp)
 803866c:	11800017 	ldw	r6,0(r2)
 8038670:	11c00117 	ldw	r7,4(r2)
 8038674:	802bad40 	call	802bad4 <__muldf3>
 8038678:	d9001017 	ldw	r4,64(sp)
 803867c:	180b883a 	mov	r5,r3
 8038680:	244dc83a 	sub	r6,r4,r17
 8038684:	300c90fa 	slli	r6,r6,3
 8038688:	1009883a 	mov	r4,r2
 803868c:	81a1883a 	add	r16,r16,r6
 8038690:	81800017 	ldw	r6,0(r16)
 8038694:	81c00117 	ldw	r7,4(r16)
 8038698:	802bad40 	call	802bad4 <__muldf3>
 803869c:	003be606 	br	8037638 <_strtod_r+0x284>
 80386a0:	d9400e17 	ldw	r5,56(sp)
 80386a4:	d8001215 	stw	zero,72(sp)
 80386a8:	d9400c15 	stw	r5,48(sp)
 80386ac:	003ce606 	br	8037a48 <_strtod_r+0x694>
 80386b0:	d9401017 	ldw	r5,64(sp)
 80386b4:	00bffa84 	movi	r2,-22
 80386b8:	28bce616 	blt	r5,r2,8037a54 <_strtod_r+0x6a0>
 80386bc:	280490fa 	slli	r2,r5,3
 80386c0:	00c20134 	movhi	r3,2052
 80386c4:	18c54c04 	addi	r3,r3,5424
 80386c8:	d9000617 	ldw	r4,24(sp)
 80386cc:	1885c83a 	sub	r2,r3,r2
 80386d0:	d9400717 	ldw	r5,28(sp)
 80386d4:	11800017 	ldw	r6,0(r2)
 80386d8:	11c00117 	ldw	r7,4(r2)
 80386dc:	802bdb80 	call	802bdb8 <__divdf3>
 80386e0:	003bd506 	br	8037638 <_strtod_r+0x284>
 80386e4:	00801a44 	movi	r2,105
 80386e8:	38bb8726 	beq	r7,r2,8037508 <_strtod_r+0x154>
 80386ec:	00801b84 	movi	r2,110
 80386f0:	38be881e 	bne	r7,r2,8038114 <_strtod_r+0xd60>
 80386f4:	d8c00c17 	ldw	r3,48(sp)
 80386f8:	01020134 	movhi	r4,2052
 80386fc:	21058404 	addi	r4,r4,5648
 8038700:	01801004 	movi	r6,64
 8038704:	01c01684 	movi	r7,90
 8038708:	21400007 	ldb	r5,0(r4)
 803870c:	21000044 	addi	r4,r4,1
 8038710:	28004e26 	beq	r5,zero,803884c <_strtod_r+0x1498>
 8038714:	18c00044 	addi	r3,r3,1
 8038718:	18800007 	ldb	r2,0(r3)
 803871c:	3080020e 	bge	r6,r2,8038728 <_strtod_r+0x1374>
 8038720:	38800116 	blt	r7,r2,8038728 <_strtod_r+0x1374>
 8038724:	10800804 	addi	r2,r2,32
 8038728:	117ff726 	beq	r2,r5,8038708 <_strtod_r+0x1354>
 803872c:	003e7906 	br	8038114 <_strtod_r+0xd60>
 8038730:	d8c00617 	ldw	r3,24(sp)
 8038734:	003eb906 	br	803821c <_strtod_r+0xe68>
 8038738:	00800404 	movi	r2,16
 803873c:	15c02216 	blt	r2,r23,80387c8 <_strtod_r+0x1414>
 8038740:	d9000f17 	ldw	r4,60(sp)
 8038744:	01400284 	movi	r5,10
 8038748:	802c2180 	call	802c218 <__mulsi3>
 803874c:	15ad883a 	add	r22,r2,r22
 8038750:	dd800f15 	stw	r22,60(sp)
 8038754:	000d883a 	mov	r6,zero
 8038758:	003c2606 	br	80377f4 <_strtod_r+0x440>
 803875c:	000d883a 	mov	r6,zero
 8038760:	003bf106 	br	8037728 <_strtod_r+0x374>
 8038764:	0080d434 	movhi	r2,848
 8038768:	1887883a 	add	r3,r3,r2
 803876c:	d8c00715 	stw	r3,28(sp)
 8038770:	0029883a 	mov	r20,zero
 8038774:	003ccc06 	br	8037aa8 <_strtod_r+0x6f4>
 8038778:	d8800617 	ldw	r2,24(sp)
 803877c:	a0001026 	beq	r20,zero,80387c0 <_strtod_r+0x140c>
 8038780:	191ffc2c 	andhi	r4,r3,32752
 8038784:	0141a834 	movhi	r5,1696
 8038788:	29000d36 	bltu	r5,r4,80387c0 <_strtod_r+0x140c>
 803878c:	2008d53a 	srli	r4,r4,20
 8038790:	01401ac4 	movi	r5,107
 8038794:	2909c83a 	sub	r4,r5,r4
 8038798:	017fffc4 	movi	r5,-1
 803879c:	2908983a 	sll	r4,r5,r4
 80387a0:	113f391e 	bne	r2,r4,8038488 <_strtod_r+0x10d4>
 80387a4:	18dffc2c 	andhi	r3,r3,32752
 80387a8:	00800434 	movhi	r2,16
 80387ac:	1885883a 	add	r2,r3,r2
 80387b0:	d8800715 	stw	r2,28(sp)
 80387b4:	d8000615 	stw	zero,24(sp)
 80387b8:	a03f1c1e 	bne	r20,zero,803842c <_strtod_r+0x1078>
 80387bc:	003e0d06 	br	8037ff4 <_strtod_r+0xc40>
 80387c0:	013fffc4 	movi	r4,-1
 80387c4:	003ff606 	br	80387a0 <_strtod_r+0x13ec>
 80387c8:	000d883a 	mov	r6,zero
 80387cc:	003c0906 	br	80377f4 <_strtod_r+0x440>
 80387d0:	00fffc34 	movhi	r3,65520
 80387d4:	10c5883a 	add	r2,r2,r3
 80387d8:	00c00434 	movhi	r3,16
 80387dc:	18ffffc4 	addi	r3,r3,-1
 80387e0:	10c4b03a 	or	r2,r2,r3
 80387e4:	d8800715 	stw	r2,28(sp)
 80387e8:	00bfffc4 	movi	r2,-1
 80387ec:	d8800615 	stw	r2,24(sp)
 80387f0:	a03f0e1e 	bne	r20,zero,803842c <_strtod_r+0x1078>
 80387f4:	003dff06 	br	8037ff4 <_strtod_r+0xc40>
 80387f8:	1011883a 	mov	r8,r2
 80387fc:	d8800c15 	stw	r2,48(sp)
 8038800:	01020134 	movhi	r4,2052
 8038804:	21058204 	addi	r4,r4,5640
 8038808:	01801004 	movi	r6,64
 803880c:	01c01684 	movi	r7,90
 8038810:	21400007 	ldb	r5,0(r4)
 8038814:	10800044 	addi	r2,r2,1
 8038818:	21000044 	addi	r4,r4,1
 803881c:	28001a26 	beq	r5,zero,8038888 <_strtod_r+0x14d4>
 8038820:	10c00007 	ldb	r3,0(r2)
 8038824:	30c0020e 	bge	r6,r3,8038830 <_strtod_r+0x147c>
 8038828:	38c00116 	blt	r7,r3,8038830 <_strtod_r+0x147c>
 803882c:	18c00804 	addi	r3,r3,32
 8038830:	197ff726 	beq	r3,r5,8038810 <_strtod_r+0x145c>
 8038834:	40800044 	addi	r2,r8,1
 8038838:	d8800c15 	stw	r2,48(sp)
 803883c:	009ffc34 	movhi	r2,32752
 8038840:	d8800715 	stw	r2,28(sp)
 8038844:	d8000615 	stw	zero,24(sp)
 8038848:	003c7f06 	br	8037a48 <_strtod_r+0x694>
 803884c:	18800044 	addi	r2,r3,1
 8038850:	d8800c15 	stw	r2,48(sp)
 8038854:	18c00047 	ldb	r3,1(r3)
 8038858:	00800a04 	movi	r2,40
 803885c:	18800e26 	beq	r3,r2,8038898 <_strtod_r+0x14e4>
 8038860:	00bffe34 	movhi	r2,65528
 8038864:	d8800715 	stw	r2,28(sp)
 8038868:	d8000615 	stw	zero,24(sp)
 803886c:	003c7606 	br	8037a48 <_strtod_r+0x694>
 8038870:	0023883a 	mov	r17,zero
 8038874:	05820134 	movhi	r22,2052
 8038878:	b5854204 	addi	r22,r22,5384
 803887c:	003e4506 	br	8038194 <_strtod_r+0xde0>
 8038880:	b805883a 	mov	r2,r23
 8038884:	003bd306 	br	80377d4 <_strtod_r+0x420>
 8038888:	d8800c15 	stw	r2,48(sp)
 803888c:	003feb06 	br	803883c <_strtod_r+0x1488>
 8038890:	05001a84 	movi	r20,106
 8038894:	003f3006 	br	8038558 <_strtod_r+0x11a4>
 8038898:	d9000c04 	addi	r4,sp,48
 803889c:	01420134 	movhi	r5,2052
 80388a0:	2947ae04 	addi	r5,r5,7864
 80388a4:	d9800204 	addi	r6,sp,8
 80388a8:	803a3500 	call	803a350 <__hexnan>
 80388ac:	00c00144 	movi	r3,5
 80388b0:	10ffeb1e 	bne	r2,r3,8038860 <_strtod_r+0x14ac>
 80388b4:	d8800317 	ldw	r2,12(sp)
 80388b8:	109ffc34 	orhi	r2,r2,32752
 80388bc:	d8800715 	stw	r2,28(sp)
 80388c0:	d8800217 	ldw	r2,8(sp)
 80388c4:	d8800615 	stw	r2,24(sp)
 80388c8:	003c5f06 	br	8037a48 <_strtod_r+0x694>
 80388cc:	00ffffc4 	movi	r3,-1
 80388d0:	1884983a 	sll	r2,r3,r2
 80388d4:	d8c00617 	ldw	r3,24(sp)
 80388d8:	1884703a 	and	r2,r3,r2
 80388dc:	d8800615 	stw	r2,24(sp)
 80388e0:	003f3c06 	br	80385d4 <_strtod_r+0x1220>
 80388e4:	10bff804 	addi	r2,r2,-32
 80388e8:	013fffc4 	movi	r4,-1
 80388ec:	2084983a 	sll	r2,r4,r2
 80388f0:	10c6703a 	and	r3,r2,r3
 80388f4:	d8c00715 	stw	r3,28(sp)
 80388f8:	003f3606 	br	80385d4 <_strtod_r+0x1220>

080388fc <strtod>:
 80388fc:	00c20134 	movhi	r3,2052
 8038900:	18cc4504 	addi	r3,r3,12564
 8038904:	2005883a 	mov	r2,r4
 8038908:	19000017 	ldw	r4,0(r3)
 803890c:	280d883a 	mov	r6,r5
 8038910:	100b883a 	mov	r5,r2
 8038914:	80373b41 	jmpi	80373b4 <_strtod_r>

08038918 <strtof>:
 8038918:	defffb04 	addi	sp,sp,-20
 803891c:	dcc00315 	stw	r19,12(sp)
 8038920:	04c20134 	movhi	r19,2052
 8038924:	9ccc4504 	addi	r19,r19,12564
 8038928:	2005883a 	mov	r2,r4
 803892c:	99000017 	ldw	r4,0(r19)
 8038930:	280d883a 	mov	r6,r5
 8038934:	100b883a 	mov	r5,r2
 8038938:	dfc00415 	stw	ra,16(sp)
 803893c:	dc800215 	stw	r18,8(sp)
 8038940:	dc400115 	stw	r17,4(sp)
 8038944:	dc000015 	stw	r16,0(sp)
 8038948:	80373b40 	call	80373b4 <_strtod_r>
 803894c:	1009883a 	mov	r4,r2
 8038950:	180b883a 	mov	r5,r3
 8038954:	1025883a 	mov	r18,r2
 8038958:	1823883a 	mov	r17,r3
 803895c:	802bf6c0 	call	802bf6c <__truncdfsf2>
 8038960:	1009883a 	mov	r4,r2
 8038964:	000b883a 	mov	r5,zero
 8038968:	1021883a 	mov	r16,r2
 803896c:	803b2d80 	call	803b2d8 <__eqsf2>
 8038970:	1000111e 	bne	r2,zero,80389b8 <strtof+0xa0>
 8038974:	9009883a 	mov	r4,r18
 8038978:	880b883a 	mov	r5,r17
 803897c:	000d883a 	mov	r6,zero
 8038980:	000f883a 	mov	r7,zero
 8038984:	803b8400 	call	803b840 <__nedf2>
 8038988:	10000b26 	beq	r2,zero,80389b8 <strtof+0xa0>
 803898c:	98800017 	ldw	r2,0(r19)
 8038990:	00c00884 	movi	r3,34
 8038994:	10c00015 	stw	r3,0(r2)
 8038998:	8005883a 	mov	r2,r16
 803899c:	dfc00417 	ldw	ra,16(sp)
 80389a0:	dcc00317 	ldw	r19,12(sp)
 80389a4:	dc800217 	ldw	r18,8(sp)
 80389a8:	dc400117 	ldw	r17,4(sp)
 80389ac:	dc000017 	ldw	r16,0(sp)
 80389b0:	dec00504 	addi	sp,sp,20
 80389b4:	f800283a 	ret
 80389b8:	8009883a 	mov	r4,r16
 80389bc:	015fe034 	movhi	r5,32640
 80389c0:	297fffc4 	addi	r5,r5,-1
 80389c4:	803b32c0 	call	803b32c <__gtsf2>
 80389c8:	0080070e 	bge	zero,r2,80389e8 <strtof+0xd0>
 80389cc:	9009883a 	mov	r4,r18
 80389d0:	880b883a 	mov	r5,r17
 80389d4:	01bfffc4 	movi	r6,-1
 80389d8:	01dffc34 	movhi	r7,32752
 80389dc:	39ffffc4 	addi	r7,r7,-1
 80389e0:	803b89c0 	call	803b89c <__gtdf2>
 80389e4:	00bfe90e 	bge	zero,r2,803898c <strtof+0x74>
 80389e8:	8009883a 	mov	r4,r16
 80389ec:	017fe034 	movhi	r5,65408
 80389f0:	297fffc4 	addi	r5,r5,-1
 80389f4:	803b3880 	call	803b388 <__ltsf2>
 80389f8:	103fe70e 	bge	r2,zero,8038998 <strtof+0x80>
 80389fc:	9009883a 	mov	r4,r18
 8038a00:	880b883a 	mov	r5,r17
 8038a04:	01bfffc4 	movi	r6,-1
 8038a08:	01fffc34 	movhi	r7,65520
 8038a0c:	39ffffc4 	addi	r7,r7,-1
 8038a10:	803b9640 	call	803b964 <__ltdf2>
 8038a14:	103fdd0e 	bge	r2,zero,803898c <strtof+0x74>
 8038a18:	8005883a 	mov	r2,r16
 8038a1c:	dfc00417 	ldw	ra,16(sp)
 8038a20:	dcc00317 	ldw	r19,12(sp)
 8038a24:	dc800217 	ldw	r18,8(sp)
 8038a28:	dc400117 	ldw	r17,4(sp)
 8038a2c:	dc000017 	ldw	r16,0(sp)
 8038a30:	dec00504 	addi	sp,sp,20
 8038a34:	f800283a 	ret

08038a38 <_strtol_r>:
 8038a38:	defff304 	addi	sp,sp,-52
 8038a3c:	00820134 	movhi	r2,2052
 8038a40:	108c4304 	addi	r2,r2,12556
 8038a44:	df000b15 	stw	fp,44(sp)
 8038a48:	17000017 	ldw	fp,0(r2)
 8038a4c:	ddc00a15 	stw	r23,40(sp)
 8038a50:	dd000715 	stw	r20,28(sp)
 8038a54:	dcc00615 	stw	r19,24(sp)
 8038a58:	dc000315 	stw	r16,12(sp)
 8038a5c:	dfc00c15 	stw	ra,48(sp)
 8038a60:	dd800915 	stw	r22,36(sp)
 8038a64:	dd400815 	stw	r21,32(sp)
 8038a68:	dc800515 	stw	r18,20(sp)
 8038a6c:	dc400415 	stw	r17,16(sp)
 8038a70:	2827883a 	mov	r19,r5
 8038a74:	d9000215 	stw	r4,8(sp)
 8038a78:	3029883a 	mov	r20,r6
 8038a7c:	382f883a 	mov	r23,r7
 8038a80:	2821883a 	mov	r16,r5
 8038a84:	84400007 	ldb	r17,0(r16)
 8038a88:	84000044 	addi	r16,r16,1
 8038a8c:	e445883a 	add	r2,fp,r17
 8038a90:	10800003 	ldbu	r2,0(r2)
 8038a94:	1080020c 	andi	r2,r2,8
 8038a98:	10803fcc 	andi	r2,r2,255
 8038a9c:	1080201c 	xori	r2,r2,128
 8038aa0:	10bfe004 	addi	r2,r2,-128
 8038aa4:	103ff71e 	bne	r2,zero,8038a84 <_strtol_r+0x4c>
 8038aa8:	00800b44 	movi	r2,45
 8038aac:	88806d26 	beq	r17,r2,8038c64 <_strtol_r+0x22c>
 8038ab0:	00800ac4 	movi	r2,43
 8038ab4:	88807026 	beq	r17,r2,8038c78 <_strtol_r+0x240>
 8038ab8:	d8000015 	stw	zero,0(sp)
 8038abc:	b800471e 	bne	r23,zero,8038bdc <_strtol_r+0x1a4>
 8038ac0:	00800c04 	movi	r2,48
 8038ac4:	88804926 	beq	r17,r2,8038bec <_strtol_r+0x1b4>
 8038ac8:	05c00284 	movi	r23,10
 8038acc:	b825883a 	mov	r18,r23
 8038ad0:	d9000017 	ldw	r4,0(sp)
 8038ad4:	20006026 	beq	r4,zero,8038c58 <_strtol_r+0x220>
 8038ad8:	05600034 	movhi	r21,32768
 8038adc:	a809883a 	mov	r4,r21
 8038ae0:	900b883a 	mov	r5,r18
 8038ae4:	802c2100 	call	802c210 <__umodsi3>
 8038ae8:	a809883a 	mov	r4,r21
 8038aec:	900b883a 	mov	r5,r18
 8038af0:	d8800115 	stw	r2,4(sp)
 8038af4:	802c2080 	call	802c208 <__udivsi3>
 8038af8:	e447883a 	add	r3,fp,r17
 8038afc:	18c00003 	ldbu	r3,0(r3)
 8038b00:	102b883a 	mov	r21,r2
 8038b04:	000d883a 	mov	r6,zero
 8038b08:	1940010c 	andi	r5,r3,4
 8038b0c:	29403fcc 	andi	r5,r5,255
 8038b10:	2940201c 	xori	r5,r5,128
 8038b14:	297fe004 	addi	r5,r5,-128
 8038b18:	0009883a 	mov	r4,zero
 8038b1c:	05bfffc4 	movi	r22,-1
 8038b20:	28001226 	beq	r5,zero,8038b6c <_strtol_r+0x134>
 8038b24:	8c7ff404 	addi	r17,r17,-48
 8038b28:	8dc0170e 	bge	r17,r23,8038b88 <_strtol_r+0x150>
 8038b2c:	35800626 	beq	r6,r22,8038b48 <_strtol_r+0x110>
 8038b30:	a9003a36 	bltu	r21,r4,8038c1c <_strtol_r+0x1e4>
 8038b34:	25403726 	beq	r4,r21,8038c14 <_strtol_r+0x1dc>
 8038b38:	900b883a 	mov	r5,r18
 8038b3c:	802c2180 	call	802c218 <__mulsi3>
 8038b40:	8889883a 	add	r4,r17,r2
 8038b44:	01800044 	movi	r6,1
 8038b48:	84400007 	ldb	r17,0(r16)
 8038b4c:	84000044 	addi	r16,r16,1
 8038b50:	e447883a 	add	r3,fp,r17
 8038b54:	18c00003 	ldbu	r3,0(r3)
 8038b58:	1940010c 	andi	r5,r3,4
 8038b5c:	29403fcc 	andi	r5,r5,255
 8038b60:	2940201c 	xori	r5,r5,128
 8038b64:	297fe004 	addi	r5,r5,-128
 8038b68:	283fee1e 	bne	r5,zero,8038b24 <_strtol_r+0xec>
 8038b6c:	188000cc 	andi	r2,r3,3
 8038b70:	10000526 	beq	r2,zero,8038b88 <_strtol_r+0x150>
 8038b74:	18c0004c 	andi	r3,r3,1
 8038b78:	18002a26 	beq	r3,zero,8038c24 <_strtol_r+0x1ec>
 8038b7c:	00800dc4 	movi	r2,55
 8038b80:	88a3c83a 	sub	r17,r17,r2
 8038b84:	8dffe916 	blt	r17,r23,8038b2c <_strtol_r+0xf4>
 8038b88:	00bfffc4 	movi	r2,-1
 8038b8c:	30802826 	beq	r6,r2,8038c30 <_strtol_r+0x1f8>
 8038b90:	d8800017 	ldw	r2,0(sp)
 8038b94:	10000126 	beq	r2,zero,8038b9c <_strtol_r+0x164>
 8038b98:	0109c83a 	sub	r4,zero,r4
 8038b9c:	2005883a 	mov	r2,r4
 8038ba0:	a0000226 	beq	r20,zero,8038bac <_strtol_r+0x174>
 8038ba4:	30002a1e 	bne	r6,zero,8038c50 <_strtol_r+0x218>
 8038ba8:	a4c00015 	stw	r19,0(r20)
 8038bac:	dfc00c17 	ldw	ra,48(sp)
 8038bb0:	df000b17 	ldw	fp,44(sp)
 8038bb4:	ddc00a17 	ldw	r23,40(sp)
 8038bb8:	dd800917 	ldw	r22,36(sp)
 8038bbc:	dd400817 	ldw	r21,32(sp)
 8038bc0:	dd000717 	ldw	r20,28(sp)
 8038bc4:	dcc00617 	ldw	r19,24(sp)
 8038bc8:	dc800517 	ldw	r18,20(sp)
 8038bcc:	dc400417 	ldw	r17,16(sp)
 8038bd0:	dc000317 	ldw	r16,12(sp)
 8038bd4:	dec00d04 	addi	sp,sp,52
 8038bd8:	f800283a 	ret
 8038bdc:	00800404 	movi	r2,16
 8038be0:	b8bfba1e 	bne	r23,r2,8038acc <_strtol_r+0x94>
 8038be4:	00800c04 	movi	r2,48
 8038be8:	88bfb81e 	bne	r17,r2,8038acc <_strtol_r+0x94>
 8038bec:	80800007 	ldb	r2,0(r16)
 8038bf0:	00c01e04 	movi	r3,120
 8038bf4:	10c02626 	beq	r2,r3,8038c90 <_strtol_r+0x258>
 8038bf8:	00c01604 	movi	r3,88
 8038bfc:	10c02426 	beq	r2,r3,8038c90 <_strtol_r+0x258>
 8038c00:	b800281e 	bne	r23,zero,8038ca4 <_strtol_r+0x26c>
 8038c04:	04800204 	movi	r18,8
 8038c08:	04400c04 	movi	r17,48
 8038c0c:	902f883a 	mov	r23,r18
 8038c10:	003faf06 	br	8038ad0 <_strtol_r+0x98>
 8038c14:	d8800117 	ldw	r2,4(sp)
 8038c18:	147fc70e 	bge	r2,r17,8038b38 <_strtol_r+0x100>
 8038c1c:	01bfffc4 	movi	r6,-1
 8038c20:	003fc906 	br	8038b48 <_strtol_r+0x110>
 8038c24:	008015c4 	movi	r2,87
 8038c28:	88a3c83a 	sub	r17,r17,r2
 8038c2c:	003fd506 	br	8038b84 <_strtol_r+0x14c>
 8038c30:	d9000017 	ldw	r4,0(sp)
 8038c34:	2000141e 	bne	r4,zero,8038c88 <_strtol_r+0x250>
 8038c38:	00a00034 	movhi	r2,32768
 8038c3c:	10bfffc4 	addi	r2,r2,-1
 8038c40:	d9000217 	ldw	r4,8(sp)
 8038c44:	00c00884 	movi	r3,34
 8038c48:	20c00015 	stw	r3,0(r4)
 8038c4c:	a03fd726 	beq	r20,zero,8038bac <_strtol_r+0x174>
 8038c50:	84ffffc4 	addi	r19,r16,-1
 8038c54:	003fd406 	br	8038ba8 <_strtol_r+0x170>
 8038c58:	05600034 	movhi	r21,32768
 8038c5c:	ad7fffc4 	addi	r21,r21,-1
 8038c60:	003f9e06 	br	8038adc <_strtol_r+0xa4>
 8038c64:	00800044 	movi	r2,1
 8038c68:	84400007 	ldb	r17,0(r16)
 8038c6c:	d8800015 	stw	r2,0(sp)
 8038c70:	80a1883a 	add	r16,r16,r2
 8038c74:	003f9106 	br	8038abc <_strtol_r+0x84>
 8038c78:	84400007 	ldb	r17,0(r16)
 8038c7c:	d8000015 	stw	zero,0(sp)
 8038c80:	84000044 	addi	r16,r16,1
 8038c84:	003f8d06 	br	8038abc <_strtol_r+0x84>
 8038c88:	00a00034 	movhi	r2,32768
 8038c8c:	003fec06 	br	8038c40 <_strtol_r+0x208>
 8038c90:	04800404 	movi	r18,16
 8038c94:	84400047 	ldb	r17,1(r16)
 8038c98:	902f883a 	mov	r23,r18
 8038c9c:	84000084 	addi	r16,r16,2
 8038ca0:	003f8b06 	br	8038ad0 <_strtol_r+0x98>
 8038ca4:	b825883a 	mov	r18,r23
 8038ca8:	04400c04 	movi	r17,48
 8038cac:	003f8806 	br	8038ad0 <_strtol_r+0x98>

08038cb0 <strtol>:
 8038cb0:	00820134 	movhi	r2,2052
 8038cb4:	108c4504 	addi	r2,r2,12564
 8038cb8:	2007883a 	mov	r3,r4
 8038cbc:	11000017 	ldw	r4,0(r2)
 8038cc0:	2805883a 	mov	r2,r5
 8038cc4:	300f883a 	mov	r7,r6
 8038cc8:	180b883a 	mov	r5,r3
 8038ccc:	100d883a 	mov	r6,r2
 8038cd0:	8038a381 	jmpi	8038a38 <_strtol_r>

08038cd4 <_strtoll_r>:
 8038cd4:	defff004 	addi	sp,sp,-64
 8038cd8:	00820134 	movhi	r2,2052
 8038cdc:	108c4304 	addi	r2,r2,12556
 8038ce0:	ddc00d15 	stw	r23,52(sp)
 8038ce4:	15c00017 	ldw	r23,0(r2)
 8038ce8:	df000e15 	stw	fp,56(sp)
 8038cec:	dc000615 	stw	r16,24(sp)
 8038cf0:	dfc00f15 	stw	ra,60(sp)
 8038cf4:	dd800c15 	stw	r22,48(sp)
 8038cf8:	dd400b15 	stw	r21,44(sp)
 8038cfc:	dd000a15 	stw	r20,40(sp)
 8038d00:	dcc00915 	stw	r19,36(sp)
 8038d04:	dc800815 	stw	r18,32(sp)
 8038d08:	dc400715 	stw	r17,28(sp)
 8038d0c:	d9400015 	stw	r5,0(sp)
 8038d10:	d9000415 	stw	r4,16(sp)
 8038d14:	d9800115 	stw	r6,4(sp)
 8038d18:	3839883a 	mov	fp,r7
 8038d1c:	2821883a 	mov	r16,r5
 8038d20:	82000007 	ldb	r8,0(r16)
 8038d24:	84000044 	addi	r16,r16,1
 8038d28:	ba05883a 	add	r2,r23,r8
 8038d2c:	10800003 	ldbu	r2,0(r2)
 8038d30:	1080020c 	andi	r2,r2,8
 8038d34:	10803fcc 	andi	r2,r2,255
 8038d38:	1080201c 	xori	r2,r2,128
 8038d3c:	10bfe004 	addi	r2,r2,-128
 8038d40:	103ff71e 	bne	r2,zero,8038d20 <_strtoll_r+0x4c>
 8038d44:	00800b44 	movi	r2,45
 8038d48:	40807a26 	beq	r8,r2,8038f34 <_strtoll_r+0x260>
 8038d4c:	00800ac4 	movi	r2,43
 8038d50:	40808826 	beq	r8,r2,8038f74 <_strtoll_r+0x2a0>
 8038d54:	d8000215 	stw	zero,8(sp)
 8038d58:	e000061e 	bne	fp,zero,8038d74 <_strtoll_r+0xa0>
 8038d5c:	00800c04 	movi	r2,48
 8038d60:	40808b26 	beq	r8,r2,8038f90 <_strtoll_r+0x2bc>
 8038d64:	04800284 	movi	r18,10
 8038d68:	0027883a 	mov	r19,zero
 8038d6c:	9039883a 	mov	fp,r18
 8038d70:	00000406 	br	8038d84 <_strtoll_r+0xb0>
 8038d74:	00800404 	movi	r2,16
 8038d78:	e0809926 	beq	fp,r2,8038fe0 <_strtoll_r+0x30c>
 8038d7c:	e027d7fa 	srai	r19,fp,31
 8038d80:	e025883a 	mov	r18,fp
 8038d84:	d9000217 	ldw	r4,8(sp)
 8038d88:	20006226 	beq	r4,zero,8038f14 <_strtoll_r+0x240>
 8038d8c:	002b883a 	mov	r21,zero
 8038d90:	04600034 	movhi	r17,32768
 8038d94:	a809883a 	mov	r4,r21
 8038d98:	880b883a 	mov	r5,r17
 8038d9c:	900d883a 	mov	r6,r18
 8038da0:	980f883a 	mov	r7,r19
 8038da4:	da000515 	stw	r8,20(sp)
 8038da8:	803acb00 	call	803acb0 <__umoddi3>
 8038dac:	a809883a 	mov	r4,r21
 8038db0:	880b883a 	mov	r5,r17
 8038db4:	900d883a 	mov	r6,r18
 8038db8:	980f883a 	mov	r7,r19
 8038dbc:	d8800315 	stw	r2,12(sp)
 8038dc0:	803a6600 	call	803a660 <__udivdi3>
 8038dc4:	da000517 	ldw	r8,20(sp)
 8038dc8:	182b883a 	mov	r21,r3
 8038dcc:	1023883a 	mov	r17,r2
 8038dd0:	ba0d883a 	add	r6,r23,r8
 8038dd4:	31800003 	ldbu	r6,0(r6)
 8038dd8:	0007883a 	mov	r3,zero
 8038ddc:	0009883a 	mov	r4,zero
 8038de0:	3240010c 	andi	r9,r6,4
 8038de4:	4a403fcc 	andi	r9,r9,255
 8038de8:	4a40201c 	xori	r9,r9,128
 8038dec:	4a7fe004 	addi	r9,r9,-128
 8038df0:	000b883a 	mov	r5,zero
 8038df4:	05bfffc4 	movi	r22,-1
 8038df8:	48001026 	beq	r9,zero,8038e3c <_strtoll_r+0x168>
 8038dfc:	453ff404 	addi	r20,r8,-48
 8038e00:	a700150e 	bge	r20,fp,8038e58 <_strtoll_r+0x184>
 8038e04:	1d800426 	beq	r3,r22,8038e18 <_strtoll_r+0x144>
 8038e08:	a9400236 	bltu	r21,r5,8038e14 <_strtoll_r+0x140>
 8038e0c:	2d402e1e 	bne	r5,r21,8038ec8 <_strtoll_r+0x1f4>
 8038e10:	89002d2e 	bgeu	r17,r4,8038ec8 <_strtoll_r+0x1f4>
 8038e14:	00ffffc4 	movi	r3,-1
 8038e18:	82000007 	ldb	r8,0(r16)
 8038e1c:	84000044 	addi	r16,r16,1
 8038e20:	ba0d883a 	add	r6,r23,r8
 8038e24:	31800003 	ldbu	r6,0(r6)
 8038e28:	3240010c 	andi	r9,r6,4
 8038e2c:	4a403fcc 	andi	r9,r9,255
 8038e30:	4a40201c 	xori	r9,r9,128
 8038e34:	4a7fe004 	addi	r9,r9,-128
 8038e38:	483ff01e 	bne	r9,zero,8038dfc <_strtoll_r+0x128>
 8038e3c:	308000cc 	andi	r2,r6,3
 8038e40:	10000526 	beq	r2,zero,8038e58 <_strtoll_r+0x184>
 8038e44:	3180004c 	andi	r6,r6,1
 8038e48:	30002b26 	beq	r6,zero,8038ef8 <_strtoll_r+0x224>
 8038e4c:	00800dc4 	movi	r2,55
 8038e50:	40a9c83a 	sub	r20,r8,r2
 8038e54:	a73feb16 	blt	r20,fp,8038e04 <_strtoll_r+0x130>
 8038e58:	00bfffc4 	movi	r2,-1
 8038e5c:	18803a26 	beq	r3,r2,8038f48 <_strtoll_r+0x274>
 8038e60:	d8800217 	ldw	r2,8(sp)
 8038e64:	10000426 	beq	r2,zero,8038e78 <_strtoll_r+0x1a4>
 8038e68:	0109c83a 	sub	r4,zero,r4
 8038e6c:	2004c03a 	cmpne	r2,r4,zero
 8038e70:	014bc83a 	sub	r5,zero,r5
 8038e74:	288bc83a 	sub	r5,r5,r2
 8038e78:	d8800117 	ldw	r2,4(sp)
 8038e7c:	10004f26 	beq	r2,zero,8038fbc <_strtoll_r+0x2e8>
 8038e80:	2005883a 	mov	r2,r4
 8038e84:	1800271e 	bne	r3,zero,8038f24 <_strtoll_r+0x250>
 8038e88:	2807883a 	mov	r3,r5
 8038e8c:	d9400017 	ldw	r5,0(sp)
 8038e90:	d9000117 	ldw	r4,4(sp)
 8038e94:	21400015 	stw	r5,0(r4)
 8038e98:	dfc00f17 	ldw	ra,60(sp)
 8038e9c:	df000e17 	ldw	fp,56(sp)
 8038ea0:	ddc00d17 	ldw	r23,52(sp)
 8038ea4:	dd800c17 	ldw	r22,48(sp)
 8038ea8:	dd400b17 	ldw	r21,44(sp)
 8038eac:	dd000a17 	ldw	r20,40(sp)
 8038eb0:	dcc00917 	ldw	r19,36(sp)
 8038eb4:	dc800817 	ldw	r18,32(sp)
 8038eb8:	dc400717 	ldw	r17,28(sp)
 8038ebc:	dc000617 	ldw	r16,24(sp)
 8038ec0:	dec01004 	addi	sp,sp,64
 8038ec4:	f800283a 	ret
 8038ec8:	24400e26 	beq	r4,r17,8038f04 <_strtoll_r+0x230>
 8038ecc:	900d883a 	mov	r6,r18
 8038ed0:	980f883a 	mov	r7,r19
 8038ed4:	802c2400 	call	802c240 <__muldi3>
 8038ed8:	a00dd7fa 	srai	r6,r20,31
 8038edc:	a085883a 	add	r2,r20,r2
 8038ee0:	1511803a 	cmpltu	r8,r2,r20
 8038ee4:	30c7883a 	add	r3,r6,r3
 8038ee8:	40cb883a 	add	r5,r8,r3
 8038eec:	1009883a 	mov	r4,r2
 8038ef0:	00c00044 	movi	r3,1
 8038ef4:	003fc806 	br	8038e18 <_strtoll_r+0x144>
 8038ef8:	008015c4 	movi	r2,87
 8038efc:	40a9c83a 	sub	r20,r8,r2
 8038f00:	003fd406 	br	8038e54 <_strtoll_r+0x180>
 8038f04:	2d7ff11e 	bne	r5,r21,8038ecc <_strtoll_r+0x1f8>
 8038f08:	d8800317 	ldw	r2,12(sp)
 8038f0c:	153fc116 	blt	r2,r20,8038e14 <_strtoll_r+0x140>
 8038f10:	003fee06 	br	8038ecc <_strtoll_r+0x1f8>
 8038f14:	057fffc4 	movi	r21,-1
 8038f18:	04600034 	movhi	r17,32768
 8038f1c:	8c7fffc4 	addi	r17,r17,-1
 8038f20:	003f9c06 	br	8038d94 <_strtoll_r+0xc0>
 8038f24:	2807883a 	mov	r3,r5
 8038f28:	843fffc4 	addi	r16,r16,-1
 8038f2c:	dc000015 	stw	r16,0(sp)
 8038f30:	003fd606 	br	8038e8c <_strtoll_r+0x1b8>
 8038f34:	00800044 	movi	r2,1
 8038f38:	82000007 	ldb	r8,0(r16)
 8038f3c:	d8800215 	stw	r2,8(sp)
 8038f40:	80a1883a 	add	r16,r16,r2
 8038f44:	003f8406 	br	8038d58 <_strtoll_r+0x84>
 8038f48:	d9000217 	ldw	r4,8(sp)
 8038f4c:	20000d1e 	bne	r4,zero,8038f84 <_strtoll_r+0x2b0>
 8038f50:	1805883a 	mov	r2,r3
 8038f54:	00e00034 	movhi	r3,32768
 8038f58:	18ffffc4 	addi	r3,r3,-1
 8038f5c:	d9400417 	ldw	r5,16(sp)
 8038f60:	01000884 	movi	r4,34
 8038f64:	29000015 	stw	r4,0(r5)
 8038f68:	d9000117 	ldw	r4,4(sp)
 8038f6c:	203fee1e 	bne	r4,zero,8038f28 <_strtoll_r+0x254>
 8038f70:	003fc906 	br	8038e98 <_strtoll_r+0x1c4>
 8038f74:	82000007 	ldb	r8,0(r16)
 8038f78:	d8000215 	stw	zero,8(sp)
 8038f7c:	84000044 	addi	r16,r16,1
 8038f80:	003f7506 	br	8038d58 <_strtoll_r+0x84>
 8038f84:	0005883a 	mov	r2,zero
 8038f88:	00e00034 	movhi	r3,32768
 8038f8c:	003ff306 	br	8038f5c <_strtoll_r+0x288>
 8038f90:	80800007 	ldb	r2,0(r16)
 8038f94:	00c01e04 	movi	r3,120
 8038f98:	10c00b26 	beq	r2,r3,8038fc8 <_strtoll_r+0x2f4>
 8038f9c:	00c01604 	movi	r3,88
 8038fa0:	10c00926 	beq	r2,r3,8038fc8 <_strtoll_r+0x2f4>
 8038fa4:	e000131e 	bne	fp,zero,8038ff4 <_strtoll_r+0x320>
 8038fa8:	04800204 	movi	r18,8
 8038fac:	0027883a 	mov	r19,zero
 8038fb0:	02000c04 	movi	r8,48
 8038fb4:	9039883a 	mov	fp,r18
 8038fb8:	003f7206 	br	8038d84 <_strtoll_r+0xb0>
 8038fbc:	2005883a 	mov	r2,r4
 8038fc0:	2807883a 	mov	r3,r5
 8038fc4:	003fb406 	br	8038e98 <_strtoll_r+0x1c4>
 8038fc8:	04800404 	movi	r18,16
 8038fcc:	82000047 	ldb	r8,1(r16)
 8038fd0:	0027883a 	mov	r19,zero
 8038fd4:	84000084 	addi	r16,r16,2
 8038fd8:	9039883a 	mov	fp,r18
 8038fdc:	003f6906 	br	8038d84 <_strtoll_r+0xb0>
 8038fe0:	00800c04 	movi	r2,48
 8038fe4:	40bfea26 	beq	r8,r2,8038f90 <_strtoll_r+0x2bc>
 8038fe8:	e025883a 	mov	r18,fp
 8038fec:	0027883a 	mov	r19,zero
 8038ff0:	003f6406 	br	8038d84 <_strtoll_r+0xb0>
 8038ff4:	e025883a 	mov	r18,fp
 8038ff8:	e027d7fa 	srai	r19,fp,31
 8038ffc:	02000c04 	movi	r8,48
 8039000:	003f6006 	br	8038d84 <_strtoll_r+0xb0>

08039004 <_strtoul_r>:
 8039004:	defff304 	addi	sp,sp,-52
 8039008:	00820134 	movhi	r2,2052
 803900c:	108c4304 	addi	r2,r2,12556
 8039010:	df000b15 	stw	fp,44(sp)
 8039014:	17000017 	ldw	fp,0(r2)
 8039018:	ddc00a15 	stw	r23,40(sp)
 803901c:	dd000715 	stw	r20,28(sp)
 8039020:	dcc00615 	stw	r19,24(sp)
 8039024:	dc000315 	stw	r16,12(sp)
 8039028:	dfc00c15 	stw	ra,48(sp)
 803902c:	dd800915 	stw	r22,36(sp)
 8039030:	dd400815 	stw	r21,32(sp)
 8039034:	dc800515 	stw	r18,20(sp)
 8039038:	dc400415 	stw	r17,16(sp)
 803903c:	2827883a 	mov	r19,r5
 8039040:	d9000215 	stw	r4,8(sp)
 8039044:	3029883a 	mov	r20,r6
 8039048:	382f883a 	mov	r23,r7
 803904c:	2821883a 	mov	r16,r5
 8039050:	84400007 	ldb	r17,0(r16)
 8039054:	84000044 	addi	r16,r16,1
 8039058:	e445883a 	add	r2,fp,r17
 803905c:	10800003 	ldbu	r2,0(r2)
 8039060:	1080020c 	andi	r2,r2,8
 8039064:	10803fcc 	andi	r2,r2,255
 8039068:	1080201c 	xori	r2,r2,128
 803906c:	10bfe004 	addi	r2,r2,-128
 8039070:	103ff71e 	bne	r2,zero,8039050 <_strtoul_r+0x4c>
 8039074:	00800b44 	movi	r2,45
 8039078:	88805e26 	beq	r17,r2,80391f4 <_strtoul_r+0x1f0>
 803907c:	00800ac4 	movi	r2,43
 8039080:	88806126 	beq	r17,r2,8039208 <_strtoul_r+0x204>
 8039084:	d8000115 	stw	zero,4(sp)
 8039088:	b800091e 	bne	r23,zero,80390b0 <_strtoul_r+0xac>
 803908c:	00800c04 	movi	r2,48
 8039090:	88806326 	beq	r17,r2,8039220 <_strtoul_r+0x21c>
 8039094:	05c00284 	movi	r23,10
 8039098:	00800144 	movi	r2,5
 803909c:	d8800015 	stw	r2,0(sp)
 80390a0:	058666b4 	movhi	r22,6554
 80390a4:	b5a66644 	addi	r22,r22,-26215
 80390a8:	b825883a 	mov	r18,r23
 80390ac:	00000b06 	br	80390dc <_strtoul_r+0xd8>
 80390b0:	00800404 	movi	r2,16
 80390b4:	b8805826 	beq	r23,r2,8039218 <_strtoul_r+0x214>
 80390b8:	013fffc4 	movi	r4,-1
 80390bc:	b80b883a 	mov	r5,r23
 80390c0:	802c2080 	call	802c208 <__udivsi3>
 80390c4:	013fffc4 	movi	r4,-1
 80390c8:	b80b883a 	mov	r5,r23
 80390cc:	102d883a 	mov	r22,r2
 80390d0:	802c2100 	call	802c210 <__umodsi3>
 80390d4:	d8800015 	stw	r2,0(sp)
 80390d8:	b825883a 	mov	r18,r23
 80390dc:	e447883a 	add	r3,fp,r17
 80390e0:	18c00003 	ldbu	r3,0(r3)
 80390e4:	0011883a 	mov	r8,zero
 80390e8:	0009883a 	mov	r4,zero
 80390ec:	1980010c 	andi	r6,r3,4
 80390f0:	31803fcc 	andi	r6,r6,255
 80390f4:	3180201c 	xori	r6,r6,128
 80390f8:	31bfe004 	addi	r6,r6,-128
 80390fc:	057fffc4 	movi	r21,-1
 8039100:	30001226 	beq	r6,zero,803914c <_strtoul_r+0x148>
 8039104:	8c7ff404 	addi	r17,r17,-48
 8039108:	8dc0170e 	bge	r17,r23,8039168 <_strtoul_r+0x164>
 803910c:	45400626 	beq	r8,r21,8039128 <_strtoul_r+0x124>
 8039110:	b1002c36 	bltu	r22,r4,80391c4 <_strtoul_r+0x1c0>
 8039114:	25802926 	beq	r4,r22,80391bc <_strtoul_r+0x1b8>
 8039118:	900b883a 	mov	r5,r18
 803911c:	802c2180 	call	802c218 <__mulsi3>
 8039120:	8889883a 	add	r4,r17,r2
 8039124:	02000044 	movi	r8,1
 8039128:	84400007 	ldb	r17,0(r16)
 803912c:	84000044 	addi	r16,r16,1
 8039130:	e447883a 	add	r3,fp,r17
 8039134:	18c00003 	ldbu	r3,0(r3)
 8039138:	1980010c 	andi	r6,r3,4
 803913c:	31803fcc 	andi	r6,r6,255
 8039140:	3180201c 	xori	r6,r6,128
 8039144:	31bfe004 	addi	r6,r6,-128
 8039148:	303fee1e 	bne	r6,zero,8039104 <_strtoul_r+0x100>
 803914c:	188000cc 	andi	r2,r3,3
 8039150:	10000526 	beq	r2,zero,8039168 <_strtoul_r+0x164>
 8039154:	18c0004c 	andi	r3,r3,1
 8039158:	18001c26 	beq	r3,zero,80391cc <_strtoul_r+0x1c8>
 803915c:	00800dc4 	movi	r2,55
 8039160:	88a3c83a 	sub	r17,r17,r2
 8039164:	8dffe916 	blt	r17,r23,803910c <_strtoul_r+0x108>
 8039168:	00bfffc4 	movi	r2,-1
 803916c:	40801a26 	beq	r8,r2,80391d8 <_strtoul_r+0x1d4>
 8039170:	d8c00117 	ldw	r3,4(sp)
 8039174:	18000126 	beq	r3,zero,803917c <_strtoul_r+0x178>
 8039178:	0109c83a 	sub	r4,zero,r4
 803917c:	a0000226 	beq	r20,zero,8039188 <_strtoul_r+0x184>
 8039180:	40001a1e 	bne	r8,zero,80391ec <_strtoul_r+0x1e8>
 8039184:	a4c00015 	stw	r19,0(r20)
 8039188:	2005883a 	mov	r2,r4
 803918c:	dfc00c17 	ldw	ra,48(sp)
 8039190:	df000b17 	ldw	fp,44(sp)
 8039194:	ddc00a17 	ldw	r23,40(sp)
 8039198:	dd800917 	ldw	r22,36(sp)
 803919c:	dd400817 	ldw	r21,32(sp)
 80391a0:	dd000717 	ldw	r20,28(sp)
 80391a4:	dcc00617 	ldw	r19,24(sp)
 80391a8:	dc800517 	ldw	r18,20(sp)
 80391ac:	dc400417 	ldw	r17,16(sp)
 80391b0:	dc000317 	ldw	r16,12(sp)
 80391b4:	dec00d04 	addi	sp,sp,52
 80391b8:	f800283a 	ret
 80391bc:	d8800017 	ldw	r2,0(sp)
 80391c0:	147fd50e 	bge	r2,r17,8039118 <_strtoul_r+0x114>
 80391c4:	023fffc4 	movi	r8,-1
 80391c8:	003fd706 	br	8039128 <_strtoul_r+0x124>
 80391cc:	008015c4 	movi	r2,87
 80391d0:	88a3c83a 	sub	r17,r17,r2
 80391d4:	003fe306 	br	8039164 <_strtoul_r+0x160>
 80391d8:	d8c00217 	ldw	r3,8(sp)
 80391dc:	00800884 	movi	r2,34
 80391e0:	4009883a 	mov	r4,r8
 80391e4:	18800015 	stw	r2,0(r3)
 80391e8:	a03fe726 	beq	r20,zero,8039188 <_strtoul_r+0x184>
 80391ec:	84ffffc4 	addi	r19,r16,-1
 80391f0:	003fe406 	br	8039184 <_strtoul_r+0x180>
 80391f4:	00c00044 	movi	r3,1
 80391f8:	84400007 	ldb	r17,0(r16)
 80391fc:	d8c00115 	stw	r3,4(sp)
 8039200:	80e1883a 	add	r16,r16,r3
 8039204:	003fa006 	br	8039088 <_strtoul_r+0x84>
 8039208:	84400007 	ldb	r17,0(r16)
 803920c:	d8000115 	stw	zero,4(sp)
 8039210:	84000044 	addi	r16,r16,1
 8039214:	003f9c06 	br	8039088 <_strtoul_r+0x84>
 8039218:	00800c04 	movi	r2,48
 803921c:	88bfa61e 	bne	r17,r2,80390b8 <_strtoul_r+0xb4>
 8039220:	80800007 	ldb	r2,0(r16)
 8039224:	00c01e04 	movi	r3,120
 8039228:	10c00b26 	beq	r2,r3,8039258 <_strtoul_r+0x254>
 803922c:	00c01604 	movi	r3,88
 8039230:	10c00926 	beq	r2,r3,8039258 <_strtoul_r+0x254>
 8039234:	b800111e 	bne	r23,zero,803927c <_strtoul_r+0x278>
 8039238:	04800204 	movi	r18,8
 803923c:	008001c4 	movi	r2,7
 8039240:	d8800015 	stw	r2,0(sp)
 8039244:	05880034 	movhi	r22,8192
 8039248:	b5bfffc4 	addi	r22,r22,-1
 803924c:	04400c04 	movi	r17,48
 8039250:	902f883a 	mov	r23,r18
 8039254:	003fa106 	br	80390dc <_strtoul_r+0xd8>
 8039258:	04800404 	movi	r18,16
 803925c:	008003c4 	movi	r2,15
 8039260:	84400047 	ldb	r17,1(r16)
 8039264:	d8800015 	stw	r2,0(sp)
 8039268:	84000084 	addi	r16,r16,2
 803926c:	05840034 	movhi	r22,4096
 8039270:	b5bfffc4 	addi	r22,r22,-1
 8039274:	902f883a 	mov	r23,r18
 8039278:	003f9806 	br	80390dc <_strtoul_r+0xd8>
 803927c:	013fffc4 	movi	r4,-1
 8039280:	b80b883a 	mov	r5,r23
 8039284:	802c2080 	call	802c208 <__udivsi3>
 8039288:	013fffc4 	movi	r4,-1
 803928c:	b80b883a 	mov	r5,r23
 8039290:	102d883a 	mov	r22,r2
 8039294:	802c2100 	call	802c210 <__umodsi3>
 8039298:	d8800015 	stw	r2,0(sp)
 803929c:	b825883a 	mov	r18,r23
 80392a0:	04400c04 	movi	r17,48
 80392a4:	003f8d06 	br	80390dc <_strtoul_r+0xd8>

080392a8 <strtoul>:
 80392a8:	00820134 	movhi	r2,2052
 80392ac:	108c4504 	addi	r2,r2,12564
 80392b0:	2007883a 	mov	r3,r4
 80392b4:	11000017 	ldw	r4,0(r2)
 80392b8:	2805883a 	mov	r2,r5
 80392bc:	300f883a 	mov	r7,r6
 80392c0:	180b883a 	mov	r5,r3
 80392c4:	100d883a 	mov	r6,r2
 80392c8:	80390041 	jmpi	8039004 <_strtoul_r>

080392cc <_strtoull_r>:
 80392cc:	defff004 	addi	sp,sp,-64
 80392d0:	00820134 	movhi	r2,2052
 80392d4:	108c4304 	addi	r2,r2,12556
 80392d8:	dd800c15 	stw	r22,48(sp)
 80392dc:	15800017 	ldw	r22,0(r2)
 80392e0:	df000e15 	stw	fp,56(sp)
 80392e4:	dc000615 	stw	r16,24(sp)
 80392e8:	dfc00f15 	stw	ra,60(sp)
 80392ec:	ddc00d15 	stw	r23,52(sp)
 80392f0:	dd400b15 	stw	r21,44(sp)
 80392f4:	dd000a15 	stw	r20,40(sp)
 80392f8:	dcc00915 	stw	r19,36(sp)
 80392fc:	dc800815 	stw	r18,32(sp)
 8039300:	dc400715 	stw	r17,28(sp)
 8039304:	d9400015 	stw	r5,0(sp)
 8039308:	d9000415 	stw	r4,16(sp)
 803930c:	d9800115 	stw	r6,4(sp)
 8039310:	3839883a 	mov	fp,r7
 8039314:	2821883a 	mov	r16,r5
 8039318:	82000007 	ldb	r8,0(r16)
 803931c:	84000044 	addi	r16,r16,1
 8039320:	b205883a 	add	r2,r22,r8
 8039324:	10800003 	ldbu	r2,0(r2)
 8039328:	1080020c 	andi	r2,r2,8
 803932c:	10803fcc 	andi	r2,r2,255
 8039330:	1080201c 	xori	r2,r2,128
 8039334:	10bfe004 	addi	r2,r2,-128
 8039338:	103ff71e 	bne	r2,zero,8039318 <_strtoull_r+0x4c>
 803933c:	00800b44 	movi	r2,45
 8039340:	40807e26 	beq	r8,r2,803953c <_strtoull_r+0x270>
 8039344:	00800ac4 	movi	r2,43
 8039348:	40808126 	beq	r8,r2,8039550 <_strtoull_r+0x284>
 803934c:	d8000315 	stw	zero,12(sp)
 8039350:	e0000c1e 	bne	fp,zero,8039384 <_strtoull_r+0xb8>
 8039354:	00800c04 	movi	r2,48
 8039358:	40808126 	beq	r8,r2,8039560 <_strtoull_r+0x294>
 803935c:	04c00284 	movi	r19,10
 8039360:	00800144 	movi	r2,5
 8039364:	d8800215 	stw	r2,8(sp)
 8039368:	046666b4 	movhi	r17,39322
 803936c:	8c666644 	addi	r17,r17,-26215
 8039370:	05c666b4 	movhi	r23,6554
 8039374:	bde66644 	addi	r23,r23,-26215
 8039378:	0025883a 	mov	r18,zero
 803937c:	9839883a 	mov	fp,r19
 8039380:	00001306 	br	80393d0 <_strtoull_r+0x104>
 8039384:	00800404 	movi	r2,16
 8039388:	e0809026 	beq	fp,r2,80395cc <_strtoull_r+0x300>
 803938c:	e025d7fa 	srai	r18,fp,31
 8039390:	013fffc4 	movi	r4,-1
 8039394:	200b883a 	mov	r5,r4
 8039398:	e00d883a 	mov	r6,fp
 803939c:	900f883a 	mov	r7,r18
 80393a0:	da000515 	stw	r8,20(sp)
 80393a4:	803a6600 	call	803a660 <__udivdi3>
 80393a8:	013fffc4 	movi	r4,-1
 80393ac:	200b883a 	mov	r5,r4
 80393b0:	e00d883a 	mov	r6,fp
 80393b4:	900f883a 	mov	r7,r18
 80393b8:	1023883a 	mov	r17,r2
 80393bc:	182f883a 	mov	r23,r3
 80393c0:	803acb00 	call	803acb0 <__umoddi3>
 80393c4:	da000517 	ldw	r8,20(sp)
 80393c8:	d8800215 	stw	r2,8(sp)
 80393cc:	e027883a 	mov	r19,fp
 80393d0:	b20d883a 	add	r6,r22,r8
 80393d4:	32400003 	ldbu	r9,0(r6)
 80393d8:	0007883a 	mov	r3,zero
 80393dc:	0009883a 	mov	r4,zero
 80393e0:	4a80010c 	andi	r10,r9,4
 80393e4:	52803fcc 	andi	r10,r10,255
 80393e8:	5280201c 	xori	r10,r10,128
 80393ec:	52bfe004 	addi	r10,r10,-128
 80393f0:	000b883a 	mov	r5,zero
 80393f4:	057fffc4 	movi	r21,-1
 80393f8:	50001026 	beq	r10,zero,803943c <_strtoull_r+0x170>
 80393fc:	453ff404 	addi	r20,r8,-48
 8039400:	a700150e 	bge	r20,fp,8039458 <_strtoull_r+0x18c>
 8039404:	1d400426 	beq	r3,r21,8039418 <_strtoull_r+0x14c>
 8039408:	b9400236 	bltu	r23,r5,8039414 <_strtoull_r+0x148>
 803940c:	2dc0301e 	bne	r5,r23,80394d0 <_strtoull_r+0x204>
 8039410:	89002f2e 	bgeu	r17,r4,80394d0 <_strtoull_r+0x204>
 8039414:	00ffffc4 	movi	r3,-1
 8039418:	82000007 	ldb	r8,0(r16)
 803941c:	84000044 	addi	r16,r16,1
 8039420:	b20d883a 	add	r6,r22,r8
 8039424:	32400003 	ldbu	r9,0(r6)
 8039428:	4a80010c 	andi	r10,r9,4
 803942c:	52803fcc 	andi	r10,r10,255
 8039430:	5280201c 	xori	r10,r10,128
 8039434:	52bfe004 	addi	r10,r10,-128
 8039438:	503ff01e 	bne	r10,zero,80393fc <_strtoull_r+0x130>
 803943c:	488000cc 	andi	r2,r9,3
 8039440:	10000526 	beq	r2,zero,8039458 <_strtoull_r+0x18c>
 8039444:	4a40004c 	andi	r9,r9,1
 8039448:	48002d26 	beq	r9,zero,8039500 <_strtoull_r+0x234>
 803944c:	00800dc4 	movi	r2,55
 8039450:	40a9c83a 	sub	r20,r8,r2
 8039454:	a73feb16 	blt	r20,fp,8039404 <_strtoull_r+0x138>
 8039458:	00bfffc4 	movi	r2,-1
 803945c:	18802f26 	beq	r3,r2,803951c <_strtoull_r+0x250>
 8039460:	d8800317 	ldw	r2,12(sp)
 8039464:	10000426 	beq	r2,zero,8039478 <_strtoull_r+0x1ac>
 8039468:	0109c83a 	sub	r4,zero,r4
 803946c:	2004c03a 	cmpne	r2,r4,zero
 8039470:	014bc83a 	sub	r5,zero,r5
 8039474:	288bc83a 	sub	r5,r5,r2
 8039478:	d8800117 	ldw	r2,4(sp)
 803947c:	10000626 	beq	r2,zero,8039498 <_strtoull_r+0x1cc>
 8039480:	18000226 	beq	r3,zero,803948c <_strtoull_r+0x1c0>
 8039484:	843fffc4 	addi	r16,r16,-1
 8039488:	dc000015 	stw	r16,0(sp)
 803948c:	d8800017 	ldw	r2,0(sp)
 8039490:	d8c00117 	ldw	r3,4(sp)
 8039494:	18800015 	stw	r2,0(r3)
 8039498:	2005883a 	mov	r2,r4
 803949c:	2807883a 	mov	r3,r5
 80394a0:	dfc00f17 	ldw	ra,60(sp)
 80394a4:	df000e17 	ldw	fp,56(sp)
 80394a8:	ddc00d17 	ldw	r23,52(sp)
 80394ac:	dd800c17 	ldw	r22,48(sp)
 80394b0:	dd400b17 	ldw	r21,44(sp)
 80394b4:	dd000a17 	ldw	r20,40(sp)
 80394b8:	dcc00917 	ldw	r19,36(sp)
 80394bc:	dc800817 	ldw	r18,32(sp)
 80394c0:	dc400717 	ldw	r17,28(sp)
 80394c4:	dc000617 	ldw	r16,24(sp)
 80394c8:	dec01004 	addi	sp,sp,64
 80394cc:	f800283a 	ret
 80394d0:	24400e26 	beq	r4,r17,803950c <_strtoull_r+0x240>
 80394d4:	980d883a 	mov	r6,r19
 80394d8:	900f883a 	mov	r7,r18
 80394dc:	802c2400 	call	802c240 <__muldi3>
 80394e0:	a00dd7fa 	srai	r6,r20,31
 80394e4:	a085883a 	add	r2,r20,r2
 80394e8:	1511803a 	cmpltu	r8,r2,r20
 80394ec:	30c7883a 	add	r3,r6,r3
 80394f0:	40cb883a 	add	r5,r8,r3
 80394f4:	1009883a 	mov	r4,r2
 80394f8:	00c00044 	movi	r3,1
 80394fc:	003fc606 	br	8039418 <_strtoull_r+0x14c>
 8039500:	008015c4 	movi	r2,87
 8039504:	40a9c83a 	sub	r20,r8,r2
 8039508:	003fd206 	br	8039454 <_strtoull_r+0x188>
 803950c:	2dfff11e 	bne	r5,r23,80394d4 <_strtoull_r+0x208>
 8039510:	d8800217 	ldw	r2,8(sp)
 8039514:	153fbf16 	blt	r2,r20,8039414 <_strtoull_r+0x148>
 8039518:	003fee06 	br	80394d4 <_strtoull_r+0x208>
 803951c:	d9000417 	ldw	r4,16(sp)
 8039520:	00800884 	movi	r2,34
 8039524:	180b883a 	mov	r5,r3
 8039528:	20800015 	stw	r2,0(r4)
 803952c:	d8800117 	ldw	r2,4(sp)
 8039530:	1809883a 	mov	r4,r3
 8039534:	103fd31e 	bne	r2,zero,8039484 <_strtoull_r+0x1b8>
 8039538:	003fd706 	br	8039498 <_strtoull_r+0x1cc>
 803953c:	00800044 	movi	r2,1
 8039540:	82000007 	ldb	r8,0(r16)
 8039544:	d8800315 	stw	r2,12(sp)
 8039548:	80a1883a 	add	r16,r16,r2
 803954c:	003f8006 	br	8039350 <_strtoull_r+0x84>
 8039550:	82000007 	ldb	r8,0(r16)
 8039554:	d8000315 	stw	zero,12(sp)
 8039558:	84000044 	addi	r16,r16,1
 803955c:	003f7c06 	br	8039350 <_strtoull_r+0x84>
 8039560:	80800007 	ldb	r2,0(r16)
 8039564:	00c01e04 	movi	r3,120
 8039568:	10c00d26 	beq	r2,r3,80395a0 <_strtoull_r+0x2d4>
 803956c:	00c01604 	movi	r3,88
 8039570:	10c00b26 	beq	r2,r3,80395a0 <_strtoull_r+0x2d4>
 8039574:	e000291e 	bne	fp,zero,803961c <_strtoull_r+0x350>
 8039578:	04c00204 	movi	r19,8
 803957c:	008001c4 	movi	r2,7
 8039580:	d8800215 	stw	r2,8(sp)
 8039584:	047fffc4 	movi	r17,-1
 8039588:	05c80034 	movhi	r23,8192
 803958c:	bdffffc4 	addi	r23,r23,-1
 8039590:	0025883a 	mov	r18,zero
 8039594:	02000c04 	movi	r8,48
 8039598:	9839883a 	mov	fp,r19
 803959c:	003f8c06 	br	80393d0 <_strtoull_r+0x104>
 80395a0:	04c00404 	movi	r19,16
 80395a4:	008003c4 	movi	r2,15
 80395a8:	82000047 	ldb	r8,1(r16)
 80395ac:	d8800215 	stw	r2,8(sp)
 80395b0:	84000084 	addi	r16,r16,2
 80395b4:	047fffc4 	movi	r17,-1
 80395b8:	05c40034 	movhi	r23,4096
 80395bc:	bdffffc4 	addi	r23,r23,-1
 80395c0:	0025883a 	mov	r18,zero
 80395c4:	9839883a 	mov	fp,r19
 80395c8:	003f8106 	br	80393d0 <_strtoull_r+0x104>
 80395cc:	00800c04 	movi	r2,48
 80395d0:	40bfe326 	beq	r8,r2,8039560 <_strtoull_r+0x294>
 80395d4:	013fffc4 	movi	r4,-1
 80395d8:	200b883a 	mov	r5,r4
 80395dc:	e00d883a 	mov	r6,fp
 80395e0:	000f883a 	mov	r7,zero
 80395e4:	da000515 	stw	r8,20(sp)
 80395e8:	803a6600 	call	803a660 <__udivdi3>
 80395ec:	013fffc4 	movi	r4,-1
 80395f0:	200b883a 	mov	r5,r4
 80395f4:	e00d883a 	mov	r6,fp
 80395f8:	000f883a 	mov	r7,zero
 80395fc:	1023883a 	mov	r17,r2
 8039600:	182f883a 	mov	r23,r3
 8039604:	803acb00 	call	803acb0 <__umoddi3>
 8039608:	d8800215 	stw	r2,8(sp)
 803960c:	e027883a 	mov	r19,fp
 8039610:	0025883a 	mov	r18,zero
 8039614:	da000517 	ldw	r8,20(sp)
 8039618:	003f6d06 	br	80393d0 <_strtoull_r+0x104>
 803961c:	e025d7fa 	srai	r18,fp,31
 8039620:	013fffc4 	movi	r4,-1
 8039624:	200b883a 	mov	r5,r4
 8039628:	e00d883a 	mov	r6,fp
 803962c:	900f883a 	mov	r7,r18
 8039630:	803a6600 	call	803a660 <__udivdi3>
 8039634:	013fffc4 	movi	r4,-1
 8039638:	200b883a 	mov	r5,r4
 803963c:	e00d883a 	mov	r6,fp
 8039640:	900f883a 	mov	r7,r18
 8039644:	1023883a 	mov	r17,r2
 8039648:	182f883a 	mov	r23,r3
 803964c:	803acb00 	call	803acb0 <__umoddi3>
 8039650:	d8800215 	stw	r2,8(sp)
 8039654:	e027883a 	mov	r19,fp
 8039658:	02000c04 	movi	r8,48
 803965c:	003f5c06 	br	80393d0 <_strtoull_r+0x104>

08039660 <__submore>:
 8039660:	defffa04 	addi	sp,sp,-24
 8039664:	dc000015 	stw	r16,0(sp)
 8039668:	2821883a 	mov	r16,r5
 803966c:	29400c17 	ldw	r5,48(r5)
 8039670:	dfc00515 	stw	ra,20(sp)
 8039674:	dd000415 	stw	r20,16(sp)
 8039678:	dcc00315 	stw	r19,12(sp)
 803967c:	dc800215 	stw	r18,8(sp)
 8039680:	dc400115 	stw	r17,4(sp)
 8039684:	80801004 	addi	r2,r16,64
 8039688:	28801726 	beq	r5,r2,80396e8 <__submore+0x88>
 803968c:	84400d17 	ldw	r17,52(r16)
 8039690:	8c67883a 	add	r19,r17,r17
 8039694:	980d883a 	mov	r6,r19
 8039698:	8036bd80 	call	8036bd8 <_realloc_r>
 803969c:	1025883a 	mov	r18,r2
 80396a0:	10002926 	beq	r2,zero,8039748 <__submore+0xe8>
 80396a4:	1469883a 	add	r20,r2,r17
 80396a8:	a009883a 	mov	r4,r20
 80396ac:	100b883a 	mov	r5,r2
 80396b0:	880d883a 	mov	r6,r17
 80396b4:	802ebb00 	call	802ebb0 <memcpy>
 80396b8:	0005883a 	mov	r2,zero
 80396bc:	85000015 	stw	r20,0(r16)
 80396c0:	84800c15 	stw	r18,48(r16)
 80396c4:	84c00d15 	stw	r19,52(r16)
 80396c8:	dfc00517 	ldw	ra,20(sp)
 80396cc:	dd000417 	ldw	r20,16(sp)
 80396d0:	dcc00317 	ldw	r19,12(sp)
 80396d4:	dc800217 	ldw	r18,8(sp)
 80396d8:	dc400117 	ldw	r17,4(sp)
 80396dc:	dc000017 	ldw	r16,0(sp)
 80396e0:	dec00604 	addi	sp,sp,24
 80396e4:	f800283a 	ret
 80396e8:	04410004 	movi	r17,1024
 80396ec:	880b883a 	mov	r5,r17
 80396f0:	802e42c0 	call	802e42c <_malloc_r>
 80396f4:	1007883a 	mov	r3,r2
 80396f8:	10001326 	beq	r2,zero,8039748 <__submore+0xe8>
 80396fc:	80801083 	ldbu	r2,66(r16)
 8039700:	80c00c15 	stw	r3,48(r16)
 8039704:	84400d15 	stw	r17,52(r16)
 8039708:	1880ffc5 	stb	r2,1023(r3)
 803970c:	81401043 	ldbu	r5,65(r16)
 8039710:	1900ff44 	addi	r4,r3,1021
 8039714:	0005883a 	mov	r2,zero
 8039718:	1940ff85 	stb	r5,1022(r3)
 803971c:	81401003 	ldbu	r5,64(r16)
 8039720:	1940ff45 	stb	r5,1021(r3)
 8039724:	81000015 	stw	r4,0(r16)
 8039728:	dfc00517 	ldw	ra,20(sp)
 803972c:	dd000417 	ldw	r20,16(sp)
 8039730:	dcc00317 	ldw	r19,12(sp)
 8039734:	dc800217 	ldw	r18,8(sp)
 8039738:	dc400117 	ldw	r17,4(sp)
 803973c:	dc000017 	ldw	r16,0(sp)
 8039740:	dec00604 	addi	sp,sp,24
 8039744:	f800283a 	ret
 8039748:	00bfffc4 	movi	r2,-1
 803974c:	003fde06 	br	80396c8 <__submore+0x68>

08039750 <_ungetc_r>:
 8039750:	defffc04 	addi	sp,sp,-16
 8039754:	dc800215 	stw	r18,8(sp)
 8039758:	dc400115 	stw	r17,4(sp)
 803975c:	dc000015 	stw	r16,0(sp)
 8039760:	dfc00315 	stw	ra,12(sp)
 8039764:	00bfffc4 	movi	r2,-1
 8039768:	2825883a 	mov	r18,r5
 803976c:	2023883a 	mov	r17,r4
 8039770:	3021883a 	mov	r16,r6
 8039774:	28803026 	beq	r5,r2,8039838 <_ungetc_r+0xe8>
 8039778:	20000226 	beq	r4,zero,8039784 <_ungetc_r+0x34>
 803977c:	20800e17 	ldw	r2,56(r4)
 8039780:	10002f26 	beq	r2,zero,8039840 <_ungetc_r+0xf0>
 8039784:	80c0030b 	ldhu	r3,12(r16)
 8039788:	00bff7c4 	movi	r2,-33
 803978c:	1900010c 	andi	r4,r3,4
 8039790:	213fffcc 	andi	r4,r4,65535
 8039794:	1884703a 	and	r2,r3,r2
 8039798:	2120001c 	xori	r4,r4,32768
 803979c:	8080030d 	sth	r2,12(r16)
 80397a0:	21200004 	addi	r4,r4,-32768
 80397a4:	20000c1e 	bne	r4,zero,80397d8 <_ungetc_r+0x88>
 80397a8:	1900040c 	andi	r4,r3,16
 80397ac:	213fffcc 	andi	r4,r4,65535
 80397b0:	2120001c 	xori	r4,r4,32768
 80397b4:	21200004 	addi	r4,r4,-32768
 80397b8:	20001f26 	beq	r4,zero,8039838 <_ungetc_r+0xe8>
 80397bc:	18c0020c 	andi	r3,r3,8
 80397c0:	18ffffcc 	andi	r3,r3,65535
 80397c4:	18e0001c 	xori	r3,r3,32768
 80397c8:	18e00004 	addi	r3,r3,-32768
 80397cc:	1800371e 	bne	r3,zero,80398ac <_ungetc_r+0x15c>
 80397d0:	10800114 	ori	r2,r2,4
 80397d4:	8080030d 	sth	r2,12(r16)
 80397d8:	80800c17 	ldw	r2,48(r16)
 80397dc:	94803fcc 	andi	r18,r18,255
 80397e0:	10001926 	beq	r2,zero,8039848 <_ungetc_r+0xf8>
 80397e4:	80c00117 	ldw	r3,4(r16)
 80397e8:	80800d17 	ldw	r2,52(r16)
 80397ec:	18800e0e 	bge	r3,r2,8039828 <_ungetc_r+0xd8>
 80397f0:	80800017 	ldw	r2,0(r16)
 80397f4:	10ffffc4 	addi	r3,r2,-1
 80397f8:	80c00015 	stw	r3,0(r16)
 80397fc:	14bfffc5 	stb	r18,-1(r2)
 8039800:	80800117 	ldw	r2,4(r16)
 8039804:	10800044 	addi	r2,r2,1
 8039808:	80800115 	stw	r2,4(r16)
 803980c:	9005883a 	mov	r2,r18
 8039810:	dfc00317 	ldw	ra,12(sp)
 8039814:	dc800217 	ldw	r18,8(sp)
 8039818:	dc400117 	ldw	r17,4(sp)
 803981c:	dc000017 	ldw	r16,0(sp)
 8039820:	dec00404 	addi	sp,sp,16
 8039824:	f800283a 	ret
 8039828:	8809883a 	mov	r4,r17
 803982c:	800b883a 	mov	r5,r16
 8039830:	80396600 	call	8039660 <__submore>
 8039834:	103fee26 	beq	r2,zero,80397f0 <_ungetc_r+0xa0>
 8039838:	04bfffc4 	movi	r18,-1
 803983c:	003ff306 	br	803980c <_ungetc_r+0xbc>
 8039840:	802ce100 	call	802ce10 <__sinit>
 8039844:	003fcf06 	br	8039784 <_ungetc_r+0x34>
 8039848:	80c00417 	ldw	r3,16(r16)
 803984c:	80800017 	ldw	r2,0(r16)
 8039850:	18000326 	beq	r3,zero,8039860 <_ungetc_r+0x110>
 8039854:	1880022e 	bgeu	r3,r2,8039860 <_ungetc_r+0x110>
 8039858:	10ffffc3 	ldbu	r3,-1(r2)
 803985c:	1c801d26 	beq	r3,r18,80398d4 <_ungetc_r+0x184>
 8039860:	81400117 	ldw	r5,4(r16)
 8039864:	80800e15 	stw	r2,56(r16)
 8039868:	008000c4 	movi	r2,3
 803986c:	80800d15 	stw	r2,52(r16)
 8039870:	00800044 	movi	r2,1
 8039874:	81001004 	addi	r4,r16,64
 8039878:	80c01084 	addi	r3,r16,66
 803987c:	80800115 	stw	r2,4(r16)
 8039880:	9005883a 	mov	r2,r18
 8039884:	81400f15 	stw	r5,60(r16)
 8039888:	81000c15 	stw	r4,48(r16)
 803988c:	84801085 	stb	r18,66(r16)
 8039890:	80c00015 	stw	r3,0(r16)
 8039894:	dfc00317 	ldw	ra,12(sp)
 8039898:	dc800217 	ldw	r18,8(sp)
 803989c:	dc400117 	ldw	r17,4(sp)
 80398a0:	dc000017 	ldw	r16,0(sp)
 80398a4:	dec00404 	addi	sp,sp,16
 80398a8:	f800283a 	ret
 80398ac:	8809883a 	mov	r4,r17
 80398b0:	800b883a 	mov	r5,r16
 80398b4:	802cb540 	call	802cb54 <_fflush_r>
 80398b8:	103fdf1e 	bne	r2,zero,8039838 <_ungetc_r+0xe8>
 80398bc:	8080030b 	ldhu	r2,12(r16)
 80398c0:	00fffdc4 	movi	r3,-9
 80398c4:	80000215 	stw	zero,8(r16)
 80398c8:	1884703a 	and	r2,r3,r2
 80398cc:	80000615 	stw	zero,24(r16)
 80398d0:	003fbf06 	br	80397d0 <_ungetc_r+0x80>
 80398d4:	80c00117 	ldw	r3,4(r16)
 80398d8:	10bfffc4 	addi	r2,r2,-1
 80398dc:	80800015 	stw	r2,0(r16)
 80398e0:	18800044 	addi	r2,r3,1
 80398e4:	80800115 	stw	r2,4(r16)
 80398e8:	003fc806 	br	803980c <_ungetc_r+0xbc>

080398ec <ungetc>:
 80398ec:	00c20134 	movhi	r3,2052
 80398f0:	18cc4504 	addi	r3,r3,12564
 80398f4:	2005883a 	mov	r2,r4
 80398f8:	19000017 	ldw	r4,0(r3)
 80398fc:	280d883a 	mov	r6,r5
 8039900:	100b883a 	mov	r5,r2
 8039904:	80397501 	jmpi	8039750 <_ungetc_r>

08039908 <_unlink_r>:
 8039908:	defffd04 	addi	sp,sp,-12
 803990c:	dc400115 	stw	r17,4(sp)
 8039910:	dc000015 	stw	r16,0(sp)
 8039914:	2023883a 	mov	r17,r4
 8039918:	04020134 	movhi	r16,2052
 803991c:	84132904 	addi	r16,r16,19620
 8039920:	2809883a 	mov	r4,r5
 8039924:	dfc00215 	stw	ra,8(sp)
 8039928:	80000015 	stw	zero,0(r16)
 803992c:	803cacc0 	call	803cacc <unlink>
 8039930:	00ffffc4 	movi	r3,-1
 8039934:	10c00526 	beq	r2,r3,803994c <_unlink_r+0x44>
 8039938:	dfc00217 	ldw	ra,8(sp)
 803993c:	dc400117 	ldw	r17,4(sp)
 8039940:	dc000017 	ldw	r16,0(sp)
 8039944:	dec00304 	addi	sp,sp,12
 8039948:	f800283a 	ret
 803994c:	80c00017 	ldw	r3,0(r16)
 8039950:	183ff926 	beq	r3,zero,8039938 <_unlink_r+0x30>
 8039954:	88c00015 	stw	r3,0(r17)
 8039958:	dfc00217 	ldw	ra,8(sp)
 803995c:	dc400117 	ldw	r17,4(sp)
 8039960:	dc000017 	ldw	r16,0(sp)
 8039964:	dec00304 	addi	sp,sp,12
 8039968:	f800283a 	ret

0803996c <_calloc_r>:
 803996c:	defffe04 	addi	sp,sp,-8
 8039970:	dc000015 	stw	r16,0(sp)
 8039974:	2021883a 	mov	r16,r4
 8039978:	3009883a 	mov	r4,r6
 803997c:	dfc00115 	stw	ra,4(sp)
 8039980:	802c2180 	call	802c218 <__mulsi3>
 8039984:	8009883a 	mov	r4,r16
 8039988:	100b883a 	mov	r5,r2
 803998c:	802e42c0 	call	802e42c <_malloc_r>
 8039990:	1021883a 	mov	r16,r2
 8039994:	10000c26 	beq	r2,zero,80399c8 <_calloc_r+0x5c>
 8039998:	11bfff17 	ldw	r6,-4(r2)
 803999c:	00ffff04 	movi	r3,-4
 80399a0:	00800904 	movi	r2,36
 80399a4:	30cc703a 	and	r6,r6,r3
 80399a8:	30cd883a 	add	r6,r6,r3
 80399ac:	11801436 	bltu	r2,r6,8039a00 <_calloc_r+0x94>
 80399b0:	00c004c4 	movi	r3,19
 80399b4:	19800936 	bltu	r3,r6,80399dc <_calloc_r+0x70>
 80399b8:	8005883a 	mov	r2,r16
 80399bc:	10000015 	stw	zero,0(r2)
 80399c0:	10000115 	stw	zero,4(r2)
 80399c4:	10000215 	stw	zero,8(r2)
 80399c8:	8005883a 	mov	r2,r16
 80399cc:	dfc00117 	ldw	ra,4(sp)
 80399d0:	dc000017 	ldw	r16,0(sp)
 80399d4:	dec00204 	addi	sp,sp,8
 80399d8:	f800283a 	ret
 80399dc:	80000015 	stw	zero,0(r16)
 80399e0:	80000115 	stw	zero,4(r16)
 80399e4:	00c006c4 	movi	r3,27
 80399e8:	19800d2e 	bgeu	r3,r6,8039a20 <_calloc_r+0xb4>
 80399ec:	80000215 	stw	zero,8(r16)
 80399f0:	80000315 	stw	zero,12(r16)
 80399f4:	30800c26 	beq	r6,r2,8039a28 <_calloc_r+0xbc>
 80399f8:	80800404 	addi	r2,r16,16
 80399fc:	003fef06 	br	80399bc <_calloc_r+0x50>
 8039a00:	8009883a 	mov	r4,r16
 8039a04:	000b883a 	mov	r5,zero
 8039a08:	802ecf00 	call	802ecf0 <memset>
 8039a0c:	8005883a 	mov	r2,r16
 8039a10:	dfc00117 	ldw	ra,4(sp)
 8039a14:	dc000017 	ldw	r16,0(sp)
 8039a18:	dec00204 	addi	sp,sp,8
 8039a1c:	f800283a 	ret
 8039a20:	80800204 	addi	r2,r16,8
 8039a24:	003fe506 	br	80399bc <_calloc_r+0x50>
 8039a28:	80000415 	stw	zero,16(r16)
 8039a2c:	80000515 	stw	zero,20(r16)
 8039a30:	80800604 	addi	r2,r16,24
 8039a34:	003fe106 	br	80399bc <_calloc_r+0x50>

08039a38 <rshift>:
 8039a38:	2805d17a 	srai	r2,r5,5
 8039a3c:	20c00417 	ldw	r3,16(r4)
 8039a40:	22800504 	addi	r10,r4,20
 8039a44:	10c0270e 	bge	r2,r3,8039ae4 <rshift+0xac>
 8039a48:	19800144 	addi	r6,r3,5
 8039a4c:	12c00144 	addi	r11,r2,5
 8039a50:	318d883a 	add	r6,r6,r6
 8039a54:	5ad7883a 	add	r11,r11,r11
 8039a58:	318d883a 	add	r6,r6,r6
 8039a5c:	5ad7883a 	add	r11,r11,r11
 8039a60:	294007cc 	andi	r5,r5,31
 8039a64:	218d883a 	add	r6,r4,r6
 8039a68:	22d7883a 	add	r11,r4,r11
 8039a6c:	28002026 	beq	r5,zero,8039af0 <rshift+0xb8>
 8039a70:	59c00017 	ldw	r7,0(r11)
 8039a74:	02400804 	movi	r9,32
 8039a78:	58800104 	addi	r2,r11,4
 8039a7c:	4953c83a 	sub	r9,r9,r5
 8039a80:	394ed83a 	srl	r7,r7,r5
 8039a84:	11802e2e 	bgeu	r2,r6,8039b40 <rshift+0x108>
 8039a88:	5007883a 	mov	r3,r10
 8039a8c:	12000017 	ldw	r8,0(r2)
 8039a90:	18c00104 	addi	r3,r3,4
 8039a94:	10800104 	addi	r2,r2,4
 8039a98:	4250983a 	sll	r8,r8,r9
 8039a9c:	3a0eb03a 	or	r7,r7,r8
 8039aa0:	19ffff15 	stw	r7,-4(r3)
 8039aa4:	11ffff17 	ldw	r7,-4(r2)
 8039aa8:	394ed83a 	srl	r7,r7,r5
 8039aac:	11bff736 	bltu	r2,r6,8039a8c <rshift+0x54>
 8039ab0:	32c5c83a 	sub	r2,r6,r11
 8039ab4:	10bffec4 	addi	r2,r2,-5
 8039ab8:	1004d0ba 	srli	r2,r2,2
 8039abc:	10800184 	addi	r2,r2,6
 8039ac0:	1085883a 	add	r2,r2,r2
 8039ac4:	1085883a 	add	r2,r2,r2
 8039ac8:	2085883a 	add	r2,r4,r2
 8039acc:	11c00015 	stw	r7,0(r2)
 8039ad0:	38001626 	beq	r7,zero,8039b2c <rshift+0xf4>
 8039ad4:	10800104 	addi	r2,r2,4
 8039ad8:	1295c83a 	sub	r10,r2,r10
 8039adc:	5015d0ba 	srai	r10,r10,2
 8039ae0:	00001406 	br	8039b34 <rshift+0xfc>
 8039ae4:	20000415 	stw	zero,16(r4)
 8039ae8:	20000515 	stw	zero,20(r4)
 8039aec:	f800283a 	ret
 8039af0:	59bffc2e 	bgeu	r11,r6,8039ae4 <rshift+0xac>
 8039af4:	5007883a 	mov	r3,r10
 8039af8:	5805883a 	mov	r2,r11
 8039afc:	11400017 	ldw	r5,0(r2)
 8039b00:	18c00104 	addi	r3,r3,4
 8039b04:	10800104 	addi	r2,r2,4
 8039b08:	197fff15 	stw	r5,-4(r3)
 8039b0c:	11bffb36 	bltu	r2,r6,8039afc <rshift+0xc4>
 8039b10:	02c4303a 	nor	r2,zero,r11
 8039b14:	1185883a 	add	r2,r2,r6
 8039b18:	1004d0ba 	srli	r2,r2,2
 8039b1c:	10800184 	addi	r2,r2,6
 8039b20:	1085883a 	add	r2,r2,r2
 8039b24:	1085883a 	add	r2,r2,r2
 8039b28:	2085883a 	add	r2,r4,r2
 8039b2c:	1295c83a 	sub	r10,r2,r10
 8039b30:	5015d0ba 	srai	r10,r10,2
 8039b34:	22800415 	stw	r10,16(r4)
 8039b38:	503feb26 	beq	r10,zero,8039ae8 <rshift+0xb0>
 8039b3c:	f800283a 	ret
 8039b40:	5005883a 	mov	r2,r10
 8039b44:	003fe106 	br	8039acc <rshift+0x94>

08039b48 <__hexdig_init>:
 8039b48:	01420134 	movhi	r5,2052
 8039b4c:	29459344 	addi	r5,r5,5709
 8039b50:	01000404 	movi	r4,16
 8039b54:	00c00c04 	movi	r3,48
 8039b58:	00830134 	movhi	r2,3076
 8039b5c:	10934e04 	addi	r2,r2,19768
 8039b60:	29800003 	ldbu	r6,0(r5)
 8039b64:	10c7883a 	add	r3,r2,r3
 8039b68:	19000005 	stb	r4,0(r3)
 8039b6c:	29400044 	addi	r5,r5,1
 8039b70:	3007883a 	mov	r3,r6
 8039b74:	21000044 	addi	r4,r4,1
 8039b78:	303ff91e 	bne	r6,zero,8039b60 <__hexdig_init+0x18>
 8039b7c:	01420134 	movhi	r5,2052
 8039b80:	29459144 	addi	r5,r5,5701
 8039b84:	01000684 	movi	r4,26
 8039b88:	00c01844 	movi	r3,97
 8039b8c:	29800003 	ldbu	r6,0(r5)
 8039b90:	10c7883a 	add	r3,r2,r3
 8039b94:	19000005 	stb	r4,0(r3)
 8039b98:	29400044 	addi	r5,r5,1
 8039b9c:	3007883a 	mov	r3,r6
 8039ba0:	21000044 	addi	r4,r4,1
 8039ba4:	303ff91e 	bne	r6,zero,8039b8c <__hexdig_init+0x44>
 8039ba8:	01420134 	movhi	r5,2052
 8039bac:	29458f44 	addi	r5,r5,5693
 8039bb0:	01000684 	movi	r4,26
 8039bb4:	00c01044 	movi	r3,65
 8039bb8:	29800003 	ldbu	r6,0(r5)
 8039bbc:	10c7883a 	add	r3,r2,r3
 8039bc0:	19000005 	stb	r4,0(r3)
 8039bc4:	29400044 	addi	r5,r5,1
 8039bc8:	3007883a 	mov	r3,r6
 8039bcc:	21000044 	addi	r4,r4,1
 8039bd0:	303ff91e 	bne	r6,zero,8039bb8 <__hexdig_init+0x70>
 8039bd4:	f800283a 	ret

08039bd8 <__gethex>:
 8039bd8:	defff204 	addi	sp,sp,-56
 8039bdc:	dc800615 	stw	r18,24(sp)
 8039be0:	04830134 	movhi	r18,3076
 8039be4:	94934e04 	addi	r18,r18,19768
 8039be8:	90800c03 	ldbu	r2,48(r18)
 8039bec:	dd400915 	stw	r21,36(sp)
 8039bf0:	dc400515 	stw	r17,20(sp)
 8039bf4:	dfc00d15 	stw	ra,52(sp)
 8039bf8:	df000c15 	stw	fp,48(sp)
 8039bfc:	ddc00b15 	stw	r23,44(sp)
 8039c00:	dd800a15 	stw	r22,40(sp)
 8039c04:	dd000815 	stw	r20,32(sp)
 8039c08:	dcc00715 	stw	r19,28(sp)
 8039c0c:	dc000415 	stw	r16,16(sp)
 8039c10:	d9000115 	stw	r4,4(sp)
 8039c14:	d9c00215 	stw	r7,8(sp)
 8039c18:	282b883a 	mov	r21,r5
 8039c1c:	3023883a 	mov	r17,r6
 8039c20:	1000b926 	beq	r2,zero,8039f08 <__gethex+0x330>
 8039c24:	a9000017 	ldw	r4,0(r21)
 8039c28:	00800c04 	movi	r2,48
 8039c2c:	20c00083 	ldbu	r3,2(r4)
 8039c30:	24c00084 	addi	r19,r4,2
 8039c34:	1881601e 	bne	r3,r2,803a1b8 <__gethex+0x5e0>
 8039c38:	017fff84 	movi	r5,-2
 8039c3c:	208000c4 	addi	r2,r4,3
 8039c40:	290bc83a 	sub	r5,r5,r4
 8039c44:	1809883a 	mov	r4,r3
 8039c48:	28b9883a 	add	fp,r5,r2
 8039c4c:	1027883a 	mov	r19,r2
 8039c50:	10800044 	addi	r2,r2,1
 8039c54:	10ffffc3 	ldbu	r3,-1(r2)
 8039c58:	193ffb26 	beq	r3,r4,8039c48 <__gethex+0x70>
 8039c5c:	90c5883a 	add	r2,r18,r3
 8039c60:	10800003 	ldbu	r2,0(r2)
 8039c64:	01430134 	movhi	r5,3076
 8039c68:	29534e04 	addi	r5,r5,19768
 8039c6c:	10002b26 	beq	r2,zero,8039d1c <__gethex+0x144>
 8039c70:	98800003 	ldbu	r2,0(r19)
 8039c74:	0009883a 	mov	r4,zero
 8039c78:	288b883a 	add	r5,r5,r2
 8039c7c:	28c00003 	ldbu	r3,0(r5)
 8039c80:	18016826 	beq	r3,zero,803a224 <__gethex+0x64c>
 8039c84:	9821883a 	mov	r16,r19
 8039c88:	84000044 	addi	r16,r16,1
 8039c8c:	80800003 	ldbu	r2,0(r16)
 8039c90:	9087883a 	add	r3,r18,r2
 8039c94:	18c00003 	ldbu	r3,0(r3)
 8039c98:	183ffb1e 	bne	r3,zero,8039c88 <__gethex+0xb0>
 8039c9c:	d8000015 	stw	zero,0(sp)
 8039ca0:	00c00b84 	movi	r3,46
 8039ca4:	10c0f226 	beq	r2,r3,803a070 <__gethex+0x498>
 8039ca8:	80800003 	ldbu	r2,0(r16)
 8039cac:	20014426 	beq	r4,zero,803a1c0 <__gethex+0x5e8>
 8039cb0:	8109c83a 	sub	r4,r16,r4
 8039cb4:	2109883a 	add	r4,r4,r4
 8039cb8:	2109883a 	add	r4,r4,r4
 8039cbc:	0129c83a 	sub	r20,zero,r4
 8039cc0:	00c01404 	movi	r3,80
 8039cc4:	10c01e26 	beq	r2,r3,8039d40 <__gethex+0x168>
 8039cc8:	00c01c04 	movi	r3,112
 8039ccc:	10c01c26 	beq	r2,r3,8039d40 <__gethex+0x168>
 8039cd0:	d8c00017 	ldw	r3,0(sp)
 8039cd4:	802d883a 	mov	r22,r16
 8039cd8:	ad800015 	stw	r22,0(r21)
 8039cdc:	18004026 	beq	r3,zero,8039de0 <__gethex+0x208>
 8039ce0:	e001061e 	bne	fp,zero,803a0fc <__gethex+0x524>
 8039ce4:	04000184 	movi	r16,6
 8039ce8:	8005883a 	mov	r2,r16
 8039cec:	dfc00d17 	ldw	ra,52(sp)
 8039cf0:	df000c17 	ldw	fp,48(sp)
 8039cf4:	ddc00b17 	ldw	r23,44(sp)
 8039cf8:	dd800a17 	ldw	r22,40(sp)
 8039cfc:	dd400917 	ldw	r21,36(sp)
 8039d00:	dd000817 	ldw	r20,32(sp)
 8039d04:	dcc00717 	ldw	r19,28(sp)
 8039d08:	dc800617 	ldw	r18,24(sp)
 8039d0c:	dc400517 	ldw	r17,20(sp)
 8039d10:	dc000417 	ldw	r16,16(sp)
 8039d14:	dec00e04 	addi	sp,sp,56
 8039d18:	f800283a 	ret
 8039d1c:	00800b84 	movi	r2,46
 8039d20:	1880d626 	beq	r3,r2,803a07c <__gethex+0x4a4>
 8039d24:	98800003 	ldbu	r2,0(r19)
 8039d28:	00c00044 	movi	r3,1
 8039d2c:	d8c00015 	stw	r3,0(sp)
 8039d30:	00c01404 	movi	r3,80
 8039d34:	9821883a 	mov	r16,r19
 8039d38:	0029883a 	mov	r20,zero
 8039d3c:	10ffe21e 	bne	r2,r3,8039cc8 <__gethex+0xf0>
 8039d40:	80800043 	ldbu	r2,1(r16)
 8039d44:	00c00ac4 	movi	r3,43
 8039d48:	10c0f326 	beq	r2,r3,803a118 <__gethex+0x540>
 8039d4c:	00c00b44 	movi	r3,45
 8039d50:	10c0ec26 	beq	r2,r3,803a104 <__gethex+0x52c>
 8039d54:	80c00044 	addi	r3,r16,1
 8039d58:	d8000315 	stw	zero,12(sp)
 8039d5c:	9085883a 	add	r2,r18,r2
 8039d60:	11000003 	ldbu	r4,0(r2)
 8039d64:	203fda26 	beq	r4,zero,8039cd0 <__gethex+0xf8>
 8039d68:	01800644 	movi	r6,25
 8039d6c:	313fd816 	blt	r6,r4,8039cd0 <__gethex+0xf8>
 8039d70:	18800043 	ldbu	r2,1(r3)
 8039d74:	01430134 	movhi	r5,3076
 8039d78:	29534e04 	addi	r5,r5,19768
 8039d7c:	213ffc04 	addi	r4,r4,-16
 8039d80:	2885883a 	add	r2,r5,r2
 8039d84:	15c00003 	ldbu	r23,0(r2)
 8039d88:	1d800044 	addi	r22,r3,1
 8039d8c:	b8000d26 	beq	r23,zero,8039dc4 <__gethex+0x1ec>
 8039d90:	35c0030e 	bge	r6,r23,8039da0 <__gethex+0x1c8>
 8039d94:	00000b06 	br	8039dc4 <__gethex+0x1ec>
 8039d98:	00800644 	movi	r2,25
 8039d9c:	15c00916 	blt	r2,r23,8039dc4 <__gethex+0x1ec>
 8039da0:	01400284 	movi	r5,10
 8039da4:	802c2180 	call	802c218 <__mulsi3>
 8039da8:	b5800044 	addi	r22,r22,1
 8039dac:	b1400003 	ldbu	r5,0(r22)
 8039db0:	15c5883a 	add	r2,r2,r23
 8039db4:	113ffc04 	addi	r4,r2,-16
 8039db8:	914b883a 	add	r5,r18,r5
 8039dbc:	2dc00003 	ldbu	r23,0(r5)
 8039dc0:	b83ff51e 	bne	r23,zero,8039d98 <__gethex+0x1c0>
 8039dc4:	d8c00317 	ldw	r3,12(sp)
 8039dc8:	18000126 	beq	r3,zero,8039dd0 <__gethex+0x1f8>
 8039dcc:	0109c83a 	sub	r4,zero,r4
 8039dd0:	d8c00017 	ldw	r3,0(sp)
 8039dd4:	ad800015 	stw	r22,0(r21)
 8039dd8:	a129883a 	add	r20,r20,r4
 8039ddc:	183fc01e 	bne	r3,zero,8039ce0 <__gethex+0x108>
 8039de0:	84c5c83a 	sub	r2,r16,r19
 8039de4:	10bfffc4 	addi	r2,r2,-1
 8039de8:	00c001c4 	movi	r3,7
 8039dec:	000b883a 	mov	r5,zero
 8039df0:	1880030e 	bge	r3,r2,8039e00 <__gethex+0x228>
 8039df4:	1005d07a 	srai	r2,r2,1
 8039df8:	29400044 	addi	r5,r5,1
 8039dfc:	18bffd16 	blt	r3,r2,8039df4 <__gethex+0x21c>
 8039e00:	d9000117 	ldw	r4,4(sp)
 8039e04:	8035b1c0 	call	8035b1c <_Balloc>
 8039e08:	102d883a 	mov	r22,r2
 8039e0c:	15400504 	addi	r21,r2,20
 8039e10:	9c001b2e 	bgeu	r19,r16,8039e80 <__gethex+0x2a8>
 8039e14:	843fffc4 	addi	r16,r16,-1
 8039e18:	98bfffc4 	addi	r2,r19,-1
 8039e1c:	a80b883a 	mov	r5,r21
 8039e20:	0009883a 	mov	r4,zero
 8039e24:	0007883a 	mov	r3,zero
 8039e28:	02800b84 	movi	r10,46
 8039e2c:	02c00804 	movi	r11,32
 8039e30:	00000806 	br	8039e54 <__gethex+0x27c>
 8039e34:	18c00104 	addi	r3,r3,4
 8039e38:	918d883a 	add	r6,r18,r6
 8039e3c:	32400003 	ldbu	r9,0(r6)
 8039e40:	4a4003cc 	andi	r9,r9,15
 8039e44:	49ce983a 	sll	r7,r9,r7
 8039e48:	21c8b03a 	or	r4,r4,r7
 8039e4c:	843fffc4 	addi	r16,r16,-1
 8039e50:	80800d26 	beq	r16,r2,8039e88 <__gethex+0x2b0>
 8039e54:	81800003 	ldbu	r6,0(r16)
 8039e58:	180f883a 	mov	r7,r3
 8039e5c:	32bffb26 	beq	r6,r10,8039e4c <__gethex+0x274>
 8039e60:	1afff41e 	bne	r3,r11,8039e34 <__gethex+0x25c>
 8039e64:	29000015 	stw	r4,0(r5)
 8039e68:	81800003 	ldbu	r6,0(r16)
 8039e6c:	0009883a 	mov	r4,zero
 8039e70:	000f883a 	mov	r7,zero
 8039e74:	29400104 	addi	r5,r5,4
 8039e78:	00c00104 	movi	r3,4
 8039e7c:	003fee06 	br	8039e38 <__gethex+0x260>
 8039e80:	a80b883a 	mov	r5,r21
 8039e84:	0009883a 	mov	r4,zero
 8039e88:	28c00104 	addi	r3,r5,4
 8039e8c:	1d47c83a 	sub	r3,r3,r21
 8039e90:	1807d0ba 	srai	r3,r3,2
 8039e94:	29000015 	stw	r4,0(r5)
 8039e98:	1820917a 	slli	r16,r3,5
 8039e9c:	b0c00415 	stw	r3,16(r22)
 8039ea0:	8035e340 	call	8035e34 <__hi0bits>
 8039ea4:	8dc00017 	ldw	r23,0(r17)
 8039ea8:	8085c83a 	sub	r2,r16,r2
 8039eac:	b8809c16 	blt	r23,r2,803a120 <__gethex+0x548>
 8039eb0:	15c0b716 	blt	r2,r23,803a190 <__gethex+0x5b8>
 8039eb4:	0039883a 	mov	fp,zero
 8039eb8:	88c00217 	ldw	r3,8(r17)
 8039ebc:	1d006516 	blt	r3,r20,803a054 <__gethex+0x47c>
 8039ec0:	88800117 	ldw	r2,4(r17)
 8039ec4:	a080830e 	bge	r20,r2,803a0d4 <__gethex+0x4fc>
 8039ec8:	1529c83a 	sub	r20,r2,r20
 8039ecc:	a5c01016 	blt	r20,r23,8039f10 <__gethex+0x338>
 8039ed0:	88c00317 	ldw	r3,12(r17)
 8039ed4:	01000084 	movi	r4,2
 8039ed8:	1900c726 	beq	r3,r4,803a1f8 <__gethex+0x620>
 8039edc:	010000c4 	movi	r4,3
 8039ee0:	1900f026 	beq	r3,r4,803a2a4 <__gethex+0x6cc>
 8039ee4:	01000044 	movi	r4,1
 8039ee8:	1900e626 	beq	r3,r4,803a284 <__gethex+0x6ac>
 8039eec:	d9000117 	ldw	r4,4(sp)
 8039ef0:	b00b883a 	mov	r5,r22
 8039ef4:	04001404 	movi	r16,80
 8039ef8:	8035bc40 	call	8035bc4 <_Bfree>
 8039efc:	d8c00e17 	ldw	r3,56(sp)
 8039f00:	18000015 	stw	zero,0(r3)
 8039f04:	003f7806 	br	8039ce8 <__gethex+0x110>
 8039f08:	8039b480 	call	8039b48 <__hexdig_init>
 8039f0c:	003f4506 	br	8039c24 <__gethex+0x4c>
 8039f10:	a43fffc4 	addi	r16,r20,-1
 8039f14:	e000b21e 	bne	fp,zero,803a1e0 <__gethex+0x608>
 8039f18:	0400040e 	bge	zero,r16,8039f2c <__gethex+0x354>
 8039f1c:	b009883a 	mov	r4,r22
 8039f20:	800b883a 	mov	r5,r16
 8039f24:	8036ae80 	call	8036ae8 <__any_on>
 8039f28:	1039883a 	mov	fp,r2
 8039f2c:	8005d17a 	srai	r2,r16,5
 8039f30:	00c00044 	movi	r3,1
 8039f34:	840007cc 	andi	r16,r16,31
 8039f38:	1085883a 	add	r2,r2,r2
 8039f3c:	1085883a 	add	r2,r2,r2
 8039f40:	a885883a 	add	r2,r21,r2
 8039f44:	1c06983a 	sll	r3,r3,r16
 8039f48:	10800017 	ldw	r2,0(r2)
 8039f4c:	1884703a 	and	r2,r3,r2
 8039f50:	10000126 	beq	r2,zero,8039f58 <__gethex+0x380>
 8039f54:	e7000094 	ori	fp,fp,2
 8039f58:	a00b883a 	mov	r5,r20
 8039f5c:	b009883a 	mov	r4,r22
 8039f60:	8039a380 	call	8039a38 <rshift>
 8039f64:	bd2fc83a 	sub	r23,r23,r20
 8039f68:	8d000117 	ldw	r20,4(r17)
 8039f6c:	04000084 	movi	r16,2
 8039f70:	e0005d26 	beq	fp,zero,803a0e8 <__gethex+0x510>
 8039f74:	88800317 	ldw	r2,12(r17)
 8039f78:	00c00084 	movi	r3,2
 8039f7c:	10c0b026 	beq	r2,r3,803a240 <__gethex+0x668>
 8039f80:	00c000c4 	movi	r3,3
 8039f84:	10c05526 	beq	r2,r3,803a0dc <__gethex+0x504>
 8039f88:	00c00044 	movi	r3,1
 8039f8c:	10c0551e 	bne	r2,r3,803a0e4 <__gethex+0x50c>
 8039f90:	e080008c 	andi	r2,fp,2
 8039f94:	10005326 	beq	r2,zero,803a0e4 <__gethex+0x50c>
 8039f98:	a8800017 	ldw	r2,0(r21)
 8039f9c:	e084b03a 	or	r2,fp,r2
 8039fa0:	10c4703a 	and	r2,r2,r3
 8039fa4:	10004f26 	beq	r2,zero,803a0e4 <__gethex+0x50c>
 8039fa8:	b7000417 	ldw	fp,16(r22)
 8039fac:	00ffffc4 	movi	r3,-1
 8039fb0:	e1000144 	addi	r4,fp,5
 8039fb4:	2109883a 	add	r4,r4,r4
 8039fb8:	2109883a 	add	r4,r4,r4
 8039fbc:	b109883a 	add	r4,r22,r4
 8039fc0:	a8800017 	ldw	r2,0(r21)
 8039fc4:	10c0ba1e 	bne	r2,r3,803a2b0 <__gethex+0x6d8>
 8039fc8:	a8000015 	stw	zero,0(r21)
 8039fcc:	ad400104 	addi	r21,r21,4
 8039fd0:	a93ffb36 	bltu	r21,r4,8039fc0 <__gethex+0x3e8>
 8039fd4:	b0800217 	ldw	r2,8(r22)
 8039fd8:	e080bd0e 	bge	fp,r2,803a2d0 <__gethex+0x6f8>
 8039fdc:	e005883a 	mov	r2,fp
 8039fe0:	10c00144 	addi	r3,r2,5
 8039fe4:	18c7883a 	add	r3,r3,r3
 8039fe8:	18c7883a 	add	r3,r3,r3
 8039fec:	b0c7883a 	add	r3,r22,r3
 8039ff0:	10800044 	addi	r2,r2,1
 8039ff4:	01000044 	movi	r4,1
 8039ff8:	19000015 	stw	r4,0(r3)
 8039ffc:	b0800415 	stw	r2,16(r22)
 803a000:	00800084 	movi	r2,2
 803a004:	8080ad26 	beq	r16,r2,803a2bc <__gethex+0x6e4>
 803a008:	b0800417 	ldw	r2,16(r22)
 803a00c:	e0800b16 	blt	fp,r2,803a03c <__gethex+0x464>
 803a010:	bdc007cc 	andi	r23,r23,31
 803a014:	b8008626 	beq	r23,zero,803a230 <__gethex+0x658>
 803a018:	e7000104 	addi	fp,fp,4
 803a01c:	e739883a 	add	fp,fp,fp
 803a020:	e739883a 	add	fp,fp,fp
 803a024:	b705883a 	add	r2,r22,fp
 803a028:	11000017 	ldw	r4,0(r2)
 803a02c:	8035e340 	call	8035e34 <__hi0bits>
 803a030:	00c00804 	movi	r3,32
 803a034:	1defc83a 	sub	r23,r3,r23
 803a038:	15c07d0e 	bge	r2,r23,803a230 <__gethex+0x658>
 803a03c:	b009883a 	mov	r4,r22
 803a040:	01400044 	movi	r5,1
 803a044:	8039a380 	call	8039a38 <rshift>
 803a048:	88800217 	ldw	r2,8(r17)
 803a04c:	a5000044 	addi	r20,r20,1
 803a050:	1500770e 	bge	r2,r20,803a230 <__gethex+0x658>
 803a054:	d9000117 	ldw	r4,4(sp)
 803a058:	b00b883a 	mov	r5,r22
 803a05c:	040028c4 	movi	r16,163
 803a060:	8035bc40 	call	8035bc4 <_Bfree>
 803a064:	d8800e17 	ldw	r2,56(sp)
 803a068:	10000015 	stw	zero,0(r2)
 803a06c:	003f1e06 	br	8039ce8 <__gethex+0x110>
 803a070:	20007826 	beq	r4,zero,803a254 <__gethex+0x67c>
 803a074:	80800003 	ldbu	r2,0(r16)
 803a078:	003f0d06 	br	8039cb0 <__gethex+0xd8>
 803a07c:	98800043 	ldbu	r2,1(r19)
 803a080:	9c000044 	addi	r16,r19,1
 803a084:	288b883a 	add	r5,r5,r2
 803a088:	28c00003 	ldbu	r3,0(r5)
 803a08c:	18005026 	beq	r3,zero,803a1d0 <__gethex+0x5f8>
 803a090:	00c00c04 	movi	r3,48
 803a094:	10c0541e 	bne	r2,r3,803a1e8 <__gethex+0x610>
 803a098:	800d883a 	mov	r6,r16
 803a09c:	1007883a 	mov	r3,r2
 803a0a0:	31800044 	addi	r6,r6,1
 803a0a4:	30800003 	ldbu	r2,0(r6)
 803a0a8:	10fffd26 	beq	r2,r3,803a0a0 <__gethex+0x4c8>
 803a0ac:	9087883a 	add	r3,r18,r2
 803a0b0:	18c00003 	ldbu	r3,0(r3)
 803a0b4:	3027883a 	mov	r19,r6
 803a0b8:	18004c1e 	bne	r3,zero,803a1ec <__gethex+0x614>
 803a0bc:	00c00044 	movi	r3,1
 803a0c0:	8009883a 	mov	r4,r16
 803a0c4:	d8c00015 	stw	r3,0(sp)
 803a0c8:	1839883a 	mov	fp,r3
 803a0cc:	3021883a 	mov	r16,r6
 803a0d0:	003ef306 	br	8039ca0 <__gethex+0xc8>
 803a0d4:	04000044 	movi	r16,1
 803a0d8:	003fa506 	br	8039f70 <__gethex+0x398>
 803a0dc:	d8800f17 	ldw	r2,60(sp)
 803a0e0:	103fb11e 	bne	r2,zero,8039fa8 <__gethex+0x3d0>
 803a0e4:	84000414 	ori	r16,r16,16
 803a0e8:	d8800e17 	ldw	r2,56(sp)
 803a0ec:	d8c00217 	ldw	r3,8(sp)
 803a0f0:	15800015 	stw	r22,0(r2)
 803a0f4:	1d000015 	stw	r20,0(r3)
 803a0f8:	003efb06 	br	8039ce8 <__gethex+0x110>
 803a0fc:	0021883a 	mov	r16,zero
 803a100:	003ef906 	br	8039ce8 <__gethex+0x110>
 803a104:	00c00044 	movi	r3,1
 803a108:	d8c00315 	stw	r3,12(sp)
 803a10c:	80800083 	ldbu	r2,2(r16)
 803a110:	80c00084 	addi	r3,r16,2
 803a114:	003f1106 	br	8039d5c <__gethex+0x184>
 803a118:	d8000315 	stw	zero,12(sp)
 803a11c:	003ffb06 	br	803a10c <__gethex+0x534>
 803a120:	15e1c83a 	sub	r16,r2,r23
 803a124:	b009883a 	mov	r4,r22
 803a128:	800b883a 	mov	r5,r16
 803a12c:	8036ae80 	call	8036ae8 <__any_on>
 803a130:	10002526 	beq	r2,zero,803a1c8 <__gethex+0x5f0>
 803a134:	80bfffc4 	addi	r2,r16,-1
 803a138:	1007d17a 	srai	r3,r2,5
 803a13c:	110007cc 	andi	r4,r2,31
 803a140:	07000044 	movi	fp,1
 803a144:	18c00144 	addi	r3,r3,5
 803a148:	18c7883a 	add	r3,r3,r3
 803a14c:	18c7883a 	add	r3,r3,r3
 803a150:	b0c7883a 	add	r3,r22,r3
 803a154:	e108983a 	sll	r4,fp,r4
 803a158:	18c00017 	ldw	r3,0(r3)
 803a15c:	20c6703a 	and	r3,r4,r3
 803a160:	18000626 	beq	r3,zero,803a17c <__gethex+0x5a4>
 803a164:	e080340e 	bge	fp,r2,803a238 <__gethex+0x660>
 803a168:	b009883a 	mov	r4,r22
 803a16c:	817fff84 	addi	r5,r16,-2
 803a170:	8036ae80 	call	8036ae8 <__any_on>
 803a174:	10003026 	beq	r2,zero,803a238 <__gethex+0x660>
 803a178:	070000c4 	movi	fp,3
 803a17c:	b009883a 	mov	r4,r22
 803a180:	800b883a 	mov	r5,r16
 803a184:	8039a380 	call	8039a38 <rshift>
 803a188:	a429883a 	add	r20,r20,r16
 803a18c:	003f4a06 	br	8039eb8 <__gethex+0x2e0>
 803a190:	d9000117 	ldw	r4,4(sp)
 803a194:	b8a1c83a 	sub	r16,r23,r2
 803a198:	b00b883a 	mov	r5,r22
 803a19c:	800d883a 	mov	r6,r16
 803a1a0:	803630c0 	call	803630c <__lshift>
 803a1a4:	102d883a 	mov	r22,r2
 803a1a8:	a429c83a 	sub	r20,r20,r16
 803a1ac:	15400504 	addi	r21,r2,20
 803a1b0:	0039883a 	mov	fp,zero
 803a1b4:	003f4006 	br	8039eb8 <__gethex+0x2e0>
 803a1b8:	0039883a 	mov	fp,zero
 803a1bc:	003ea706 	br	8039c5c <__gethex+0x84>
 803a1c0:	0029883a 	mov	r20,zero
 803a1c4:	003ebe06 	br	8039cc0 <__gethex+0xe8>
 803a1c8:	0039883a 	mov	fp,zero
 803a1cc:	003feb06 	br	803a17c <__gethex+0x5a4>
 803a1d0:	00c00044 	movi	r3,1
 803a1d4:	0029883a 	mov	r20,zero
 803a1d8:	d8c00015 	stw	r3,0(sp)
 803a1dc:	003eb806 	br	8039cc0 <__gethex+0xe8>
 803a1e0:	07000044 	movi	fp,1
 803a1e4:	003f5106 	br	8039f2c <__gethex+0x354>
 803a1e8:	8027883a 	mov	r19,r16
 803a1ec:	8009883a 	mov	r4,r16
 803a1f0:	07000044 	movi	fp,1
 803a1f4:	003ea306 	br	8039c84 <__gethex+0xac>
 803a1f8:	d8c00f17 	ldw	r3,60(sp)
 803a1fc:	183f3b1e 	bne	r3,zero,8039eec <__gethex+0x314>
 803a200:	d8c00217 	ldw	r3,8(sp)
 803a204:	04001884 	movi	r16,98
 803a208:	18800015 	stw	r2,0(r3)
 803a20c:	00800044 	movi	r2,1
 803a210:	b0800415 	stw	r2,16(r22)
 803a214:	a8800015 	stw	r2,0(r21)
 803a218:	d8800e17 	ldw	r2,56(sp)
 803a21c:	15800015 	stw	r22,0(r2)
 803a220:	003eb106 	br	8039ce8 <__gethex+0x110>
 803a224:	9821883a 	mov	r16,r19
 803a228:	d8000015 	stw	zero,0(sp)
 803a22c:	003e9c06 	br	8039ca0 <__gethex+0xc8>
 803a230:	04000844 	movi	r16,33
 803a234:	003fac06 	br	803a0e8 <__gethex+0x510>
 803a238:	07000084 	movi	fp,2
 803a23c:	003fcf06 	br	803a17c <__gethex+0x5a4>
 803a240:	d8c00f17 	ldw	r3,60(sp)
 803a244:	00800044 	movi	r2,1
 803a248:	10c5c83a 	sub	r2,r2,r3
 803a24c:	103fa526 	beq	r2,zero,803a0e4 <__gethex+0x50c>
 803a250:	003f5506 	br	8039fa8 <__gethex+0x3d0>
 803a254:	80800043 	ldbu	r2,1(r16)
 803a258:	81000044 	addi	r4,r16,1
 803a25c:	2021883a 	mov	r16,r4
 803a260:	9087883a 	add	r3,r18,r2
 803a264:	18c00003 	ldbu	r3,0(r3)
 803a268:	183e9026 	beq	r3,zero,8039cac <__gethex+0xd4>
 803a26c:	84000044 	addi	r16,r16,1
 803a270:	80800003 	ldbu	r2,0(r16)
 803a274:	9087883a 	add	r3,r18,r2
 803a278:	18c00003 	ldbu	r3,0(r3)
 803a27c:	183ffb1e 	bne	r3,zero,803a26c <__gethex+0x694>
 803a280:	003e8a06 	br	8039cac <__gethex+0xd4>
 803a284:	a5ff191e 	bne	r20,r23,8039eec <__gethex+0x314>
 803a288:	1dffdd0e 	bge	r3,r23,803a200 <__gethex+0x628>
 803a28c:	b009883a 	mov	r4,r22
 803a290:	b97fffc4 	addi	r5,r23,-1
 803a294:	8036ae80 	call	8036ae8 <__any_on>
 803a298:	103f1426 	beq	r2,zero,8039eec <__gethex+0x314>
 803a29c:	88800117 	ldw	r2,4(r17)
 803a2a0:	003fd706 	br	803a200 <__gethex+0x628>
 803a2a4:	d8c00f17 	ldw	r3,60(sp)
 803a2a8:	183f1026 	beq	r3,zero,8039eec <__gethex+0x314>
 803a2ac:	003fd406 	br	803a200 <__gethex+0x628>
 803a2b0:	10800044 	addi	r2,r2,1
 803a2b4:	a8800015 	stw	r2,0(r21)
 803a2b8:	003f5106 	br	803a000 <__gethex+0x428>
 803a2bc:	88800017 	ldw	r2,0(r17)
 803a2c0:	10bfffc4 	addi	r2,r2,-1
 803a2c4:	15c01426 	beq	r2,r23,803a318 <__gethex+0x740>
 803a2c8:	04000884 	movi	r16,34
 803a2cc:	003f8606 	br	803a0e8 <__gethex+0x510>
 803a2d0:	b1400117 	ldw	r5,4(r22)
 803a2d4:	d9000117 	ldw	r4,4(sp)
 803a2d8:	29400044 	addi	r5,r5,1
 803a2dc:	8035b1c0 	call	8035b1c <_Balloc>
 803a2e0:	b1800417 	ldw	r6,16(r22)
 803a2e4:	b1400304 	addi	r5,r22,12
 803a2e8:	11000304 	addi	r4,r2,12
 803a2ec:	31800084 	addi	r6,r6,2
 803a2f0:	318d883a 	add	r6,r6,r6
 803a2f4:	318d883a 	add	r6,r6,r6
 803a2f8:	102b883a 	mov	r21,r2
 803a2fc:	802ebb00 	call	802ebb0 <memcpy>
 803a300:	d9000117 	ldw	r4,4(sp)
 803a304:	b00b883a 	mov	r5,r22
 803a308:	a82d883a 	mov	r22,r21
 803a30c:	8035bc40 	call	8035bc4 <_Bfree>
 803a310:	a8800417 	ldw	r2,16(r21)
 803a314:	003f3206 	br	8039fe0 <__gethex+0x408>
 803a318:	b805d17a 	srai	r2,r23,5
 803a31c:	04000044 	movi	r16,1
 803a320:	bdc007cc 	andi	r23,r23,31
 803a324:	10800144 	addi	r2,r2,5
 803a328:	1085883a 	add	r2,r2,r2
 803a32c:	1085883a 	add	r2,r2,r2
 803a330:	b085883a 	add	r2,r22,r2
 803a334:	10800017 	ldw	r2,0(r2)
 803a338:	85e0983a 	sll	r16,r16,r23
 803a33c:	80a0703a 	and	r16,r16,r2
 803a340:	8020c03a 	cmpne	r16,r16,zero
 803a344:	00800884 	movi	r2,34
 803a348:	1421c83a 	sub	r16,r2,r16
 803a34c:	003f6606 	br	803a0e8 <__gethex+0x510>

0803a350 <__hexnan>:
 803a350:	defff604 	addi	sp,sp,-40
 803a354:	dc000315 	stw	r16,12(sp)
 803a358:	04030134 	movhi	r16,3076
 803a35c:	84134e04 	addi	r16,r16,19768
 803a360:	80800c03 	ldbu	r2,48(r16)
 803a364:	dfc00915 	stw	ra,36(sp)
 803a368:	dd400815 	stw	r21,32(sp)
 803a36c:	dd000715 	stw	r20,28(sp)
 803a370:	dcc00615 	stw	r19,24(sp)
 803a374:	dc800515 	stw	r18,20(sp)
 803a378:	dc400415 	stw	r17,16(sp)
 803a37c:	10006c26 	beq	r2,zero,803a530 <__hexnan+0x1e0>
 803a380:	2d000017 	ldw	r20,0(r5)
 803a384:	a025d17a 	srai	r18,r20,5
 803a388:	a50007cc 	andi	r20,r20,31
 803a38c:	94a5883a 	add	r18,r18,r18
 803a390:	94a5883a 	add	r18,r18,r18
 803a394:	34a5883a 	add	r18,r6,r18
 803a398:	a0000126 	beq	r20,zero,803a3a0 <__hexnan+0x50>
 803a39c:	94800104 	addi	r18,r18,4
 803a3a0:	20c00017 	ldw	r3,0(r4)
 803a3a4:	903fff15 	stw	zero,-4(r18)
 803a3a8:	947fff04 	addi	r17,r18,-4
 803a3ac:	18800043 	ldbu	r2,1(r3)
 803a3b0:	8817883a 	mov	r11,r17
 803a3b4:	880b883a 	mov	r5,r17
 803a3b8:	0011883a 	mov	r8,zero
 803a3bc:	001b883a 	mov	r13,zero
 803a3c0:	0015883a 	mov	r10,zero
 803a3c4:	03c00204 	movi	r15,8
 803a3c8:	03800804 	movi	r14,32
 803a3cc:	04c001c4 	movi	r19,7
 803a3d0:	10001b26 	beq	r2,zero,803a440 <__hexnan+0xf0>
 803a3d4:	808f883a 	add	r7,r16,r2
 803a3d8:	39c00003 	ldbu	r7,0(r7)
 803a3dc:	3a403fcc 	andi	r9,r7,255
 803a3e0:	4800301e 	bne	r9,zero,803a4a4 <__hexnan+0x154>
 803a3e4:	70804636 	bltu	r14,r2,803a500 <__hexnan+0x1b0>
 803a3e8:	6a80120e 	bge	r13,r10,803a434 <__hexnan+0xe4>
 803a3ec:	2ac00f2e 	bgeu	r5,r11,803a42c <__hexnan+0xdc>
 803a3f0:	9a000e16 	blt	r19,r8,803a42c <__hexnan+0xdc>
 803a3f4:	7a11c83a 	sub	r8,r15,r8
 803a3f8:	4211883a 	add	r8,r8,r8
 803a3fc:	29c00017 	ldw	r7,0(r5)
 803a400:	4211883a 	add	r8,r8,r8
 803a404:	722bc83a 	sub	r21,r14,r8
 803a408:	2805883a 	mov	r2,r5
 803a40c:	12400117 	ldw	r9,4(r2)
 803a410:	10800104 	addi	r2,r2,4
 803a414:	4d58983a 	sll	r12,r9,r21
 803a418:	3b18b03a 	or	r12,r7,r12
 803a41c:	4a0ed83a 	srl	r7,r9,r8
 803a420:	133fff15 	stw	r12,-4(r2)
 803a424:	11c00015 	stw	r7,0(r2)
 803a428:	12fff836 	bltu	r2,r11,803a40c <__hexnan+0xbc>
 803a42c:	31402d36 	bltu	r6,r5,803a4e4 <__hexnan+0x194>
 803a430:	02000204 	movi	r8,8
 803a434:	18c00044 	addi	r3,r3,1
 803a438:	18800043 	ldbu	r2,1(r3)
 803a43c:	103fe51e 	bne	r2,zero,803a3d4 <__hexnan+0x84>
 803a440:	50003126 	beq	r10,zero,803a508 <__hexnan+0x1b8>
 803a444:	2ac0022e 	bgeu	r5,r11,803a450 <__hexnan+0x100>
 803a448:	008001c4 	movi	r2,7
 803a44c:	1200520e 	bge	r2,r8,803a598 <__hexnan+0x248>
 803a450:	31403f2e 	bgeu	r6,r5,803a550 <__hexnan+0x200>
 803a454:	3005883a 	mov	r2,r6
 803a458:	28c00017 	ldw	r3,0(r5)
 803a45c:	10800104 	addi	r2,r2,4
 803a460:	29400104 	addi	r5,r5,4
 803a464:	10ffff15 	stw	r3,-4(r2)
 803a468:	897ffb2e 	bgeu	r17,r5,803a458 <__hexnan+0x108>
 803a46c:	10000015 	stw	zero,0(r2)
 803a470:	10800104 	addi	r2,r2,4
 803a474:	88bffd2e 	bgeu	r17,r2,803a46c <__hexnan+0x11c>
 803a478:	90bfff17 	ldw	r2,-4(r18)
 803a47c:	1000071e 	bne	r2,zero,803a49c <__hexnan+0x14c>
 803a480:	34403c26 	beq	r6,r17,803a574 <__hexnan+0x224>
 803a484:	8805883a 	mov	r2,r17
 803a488:	00000106 	br	803a490 <__hexnan+0x140>
 803a48c:	30803a26 	beq	r6,r2,803a578 <__hexnan+0x228>
 803a490:	10bfff04 	addi	r2,r2,-4
 803a494:	10c00017 	ldw	r3,0(r2)
 803a498:	183ffc26 	beq	r3,zero,803a48c <__hexnan+0x13c>
 803a49c:	00800144 	movi	r2,5
 803a4a0:	00001a06 	br	803a50c <__hexnan+0x1bc>
 803a4a4:	42000044 	addi	r8,r8,1
 803a4a8:	52800044 	addi	r10,r10,1
 803a4ac:	7a000716 	blt	r15,r8,803a4cc <__hexnan+0x17c>
 803a4b0:	28800017 	ldw	r2,0(r5)
 803a4b4:	1004913a 	slli	r2,r2,4
 803a4b8:	39c003cc 	andi	r7,r7,15
 803a4bc:	11ceb03a 	or	r7,r2,r7
 803a4c0:	29c00015 	stw	r7,0(r5)
 803a4c4:	18c00044 	addi	r3,r3,1
 803a4c8:	003fdb06 	br	803a438 <__hexnan+0xe8>
 803a4cc:	317fd92e 	bgeu	r6,r5,803a434 <__hexnan+0xe4>
 803a4d0:	283fff15 	stw	zero,-4(r5)
 803a4d4:	0005883a 	mov	r2,zero
 803a4d8:	297fff04 	addi	r5,r5,-4
 803a4dc:	02000044 	movi	r8,1
 803a4e0:	003ff506 	br	803a4b8 <__hexnan+0x168>
 803a4e4:	283fff15 	stw	zero,-4(r5)
 803a4e8:	297fff04 	addi	r5,r5,-4
 803a4ec:	501b883a 	mov	r13,r10
 803a4f0:	2817883a 	mov	r11,r5
 803a4f4:	0011883a 	mov	r8,zero
 803a4f8:	18c00044 	addi	r3,r3,1
 803a4fc:	003fce06 	br	803a438 <__hexnan+0xe8>
 803a500:	01c00a44 	movi	r7,41
 803a504:	11c02026 	beq	r2,r7,803a588 <__hexnan+0x238>
 803a508:	00800104 	movi	r2,4
 803a50c:	dfc00917 	ldw	ra,36(sp)
 803a510:	dd400817 	ldw	r21,32(sp)
 803a514:	dd000717 	ldw	r20,28(sp)
 803a518:	dcc00617 	ldw	r19,24(sp)
 803a51c:	dc800517 	ldw	r18,20(sp)
 803a520:	dc400417 	ldw	r17,16(sp)
 803a524:	dc000317 	ldw	r16,12(sp)
 803a528:	dec00a04 	addi	sp,sp,40
 803a52c:	f800283a 	ret
 803a530:	d9000015 	stw	r4,0(sp)
 803a534:	d9400115 	stw	r5,4(sp)
 803a538:	d9800215 	stw	r6,8(sp)
 803a53c:	8039b480 	call	8039b48 <__hexdig_init>
 803a540:	d9800217 	ldw	r6,8(sp)
 803a544:	d9400117 	ldw	r5,4(sp)
 803a548:	d9000017 	ldw	r4,0(sp)
 803a54c:	003f8c06 	br	803a380 <__hexnan+0x30>
 803a550:	a03fc926 	beq	r20,zero,803a478 <__hexnan+0x128>
 803a554:	00800804 	movi	r2,32
 803a558:	1529c83a 	sub	r20,r2,r20
 803a55c:	00ffffc4 	movi	r3,-1
 803a560:	90bfff17 	ldw	r2,-4(r18)
 803a564:	1d06d83a 	srl	r3,r3,r20
 803a568:	1884703a 	and	r2,r3,r2
 803a56c:	90bfff15 	stw	r2,-4(r18)
 803a570:	003fc206 	br	803a47c <__hexnan+0x12c>
 803a574:	3005883a 	mov	r2,r6
 803a578:	00c00044 	movi	r3,1
 803a57c:	10c00015 	stw	r3,0(r2)
 803a580:	00800144 	movi	r2,5
 803a584:	003fe106 	br	803a50c <__hexnan+0x1bc>
 803a588:	503fdf26 	beq	r10,zero,803a508 <__hexnan+0x1b8>
 803a58c:	18c00084 	addi	r3,r3,2
 803a590:	20c00015 	stw	r3,0(r4)
 803a594:	003fab06 	br	803a444 <__hexnan+0xf4>
 803a598:	00800204 	movi	r2,8
 803a59c:	1211c83a 	sub	r8,r2,r8
 803a5a0:	4211883a 	add	r8,r8,r8
 803a5a4:	28c00017 	ldw	r3,0(r5)
 803a5a8:	4211883a 	add	r8,r8,r8
 803a5ac:	02400804 	movi	r9,32
 803a5b0:	4a13c83a 	sub	r9,r9,r8
 803a5b4:	2805883a 	mov	r2,r5
 803a5b8:	11000117 	ldw	r4,4(r2)
 803a5bc:	10800104 	addi	r2,r2,4
 803a5c0:	224e983a 	sll	r7,r4,r9
 803a5c4:	19ceb03a 	or	r7,r3,r7
 803a5c8:	2206d83a 	srl	r3,r4,r8
 803a5cc:	11ffff15 	stw	r7,-4(r2)
 803a5d0:	10c00015 	stw	r3,0(r2)
 803a5d4:	12fff836 	bltu	r2,r11,803a5b8 <__hexnan+0x268>
 803a5d8:	003f9d06 	br	803a450 <__hexnan+0x100>

0803a5dc <__fixunsdfsi>:
 803a5dc:	defffd04 	addi	sp,sp,-12
 803a5e0:	000d883a 	mov	r6,zero
 803a5e4:	01d07834 	movhi	r7,16864
 803a5e8:	dc400115 	stw	r17,4(sp)
 803a5ec:	dc000015 	stw	r16,0(sp)
 803a5f0:	dfc00215 	stw	ra,8(sp)
 803a5f4:	2023883a 	mov	r17,r4
 803a5f8:	2821883a 	mov	r16,r5
 803a5fc:	803b9000 	call	803b900 <__gedf2>
 803a600:	1000080e 	bge	r2,zero,803a624 <__fixunsdfsi+0x48>
 803a604:	8809883a 	mov	r4,r17
 803a608:	800b883a 	mov	r5,r16
 803a60c:	803baf00 	call	803baf0 <__fixdfsi>
 803a610:	dfc00217 	ldw	ra,8(sp)
 803a614:	dc400117 	ldw	r17,4(sp)
 803a618:	dc000017 	ldw	r16,0(sp)
 803a61c:	dec00304 	addi	sp,sp,12
 803a620:	f800283a 	ret
 803a624:	000d883a 	mov	r6,zero
 803a628:	01d07834 	movhi	r7,16864
 803a62c:	8809883a 	mov	r4,r17
 803a630:	800b883a 	mov	r5,r16
 803a634:	803b7840 	call	803b784 <__subdf3>
 803a638:	180b883a 	mov	r5,r3
 803a63c:	1009883a 	mov	r4,r2
 803a640:	803baf00 	call	803baf0 <__fixdfsi>
 803a644:	00e00034 	movhi	r3,32768
 803a648:	10c5883a 	add	r2,r2,r3
 803a64c:	dfc00217 	ldw	ra,8(sp)
 803a650:	dc400117 	ldw	r17,4(sp)
 803a654:	dc000017 	ldw	r16,0(sp)
 803a658:	dec00304 	addi	sp,sp,12
 803a65c:	f800283a 	ret

0803a660 <__udivdi3>:
 803a660:	defff504 	addi	sp,sp,-44
 803a664:	dd000515 	stw	r20,20(sp)
 803a668:	dcc00415 	stw	r19,16(sp)
 803a66c:	dc800315 	stw	r18,12(sp)
 803a670:	dc400215 	stw	r17,8(sp)
 803a674:	dc000115 	stw	r16,4(sp)
 803a678:	dfc00a15 	stw	ra,40(sp)
 803a67c:	df000915 	stw	fp,36(sp)
 803a680:	ddc00815 	stw	r23,32(sp)
 803a684:	dd800715 	stw	r22,28(sp)
 803a688:	dd400615 	stw	r21,24(sp)
 803a68c:	2025883a 	mov	r18,r4
 803a690:	2823883a 	mov	r17,r5
 803a694:	3021883a 	mov	r16,r6
 803a698:	2027883a 	mov	r19,r4
 803a69c:	2829883a 	mov	r20,r5
 803a6a0:	3800451e 	bne	r7,zero,803a7b8 <__udivdi3+0x158>
 803a6a4:	2980652e 	bgeu	r5,r6,803a83c <__udivdi3+0x1dc>
 803a6a8:	00bfffd4 	movui	r2,65535
 803a6ac:	1180b436 	bltu	r2,r6,803a980 <__udivdi3+0x320>
 803a6b0:	00803fc4 	movi	r2,255
 803a6b4:	11816636 	bltu	r2,r6,803ac50 <__udivdi3+0x5f0>
 803a6b8:	0005883a 	mov	r2,zero
 803a6bc:	0007883a 	mov	r3,zero
 803a6c0:	3084d83a 	srl	r2,r6,r2
 803a6c4:	01020134 	movhi	r4,2052
 803a6c8:	21041504 	addi	r4,r4,4180
 803a6cc:	2085883a 	add	r2,r4,r2
 803a6d0:	10800003 	ldbu	r2,0(r2)
 803a6d4:	10c7883a 	add	r3,r2,r3
 803a6d8:	00800804 	movi	r2,32
 803a6dc:	10c5c83a 	sub	r2,r2,r3
 803a6e0:	10000526 	beq	r2,zero,803a6f8 <__udivdi3+0x98>
 803a6e4:	88a2983a 	sll	r17,r17,r2
 803a6e8:	90c6d83a 	srl	r3,r18,r3
 803a6ec:	30a0983a 	sll	r16,r6,r2
 803a6f0:	90a6983a 	sll	r19,r18,r2
 803a6f4:	88e8b03a 	or	r20,r17,r3
 803a6f8:	8022d43a 	srli	r17,r16,16
 803a6fc:	a009883a 	mov	r4,r20
 803a700:	857fffcc 	andi	r21,r16,65535
 803a704:	880b883a 	mov	r5,r17
 803a708:	802c2100 	call	802c210 <__umodsi3>
 803a70c:	a009883a 	mov	r4,r20
 803a710:	880b883a 	mov	r5,r17
 803a714:	102d883a 	mov	r22,r2
 803a718:	802c2080 	call	802c208 <__udivsi3>
 803a71c:	1009883a 	mov	r4,r2
 803a720:	a80b883a 	mov	r5,r21
 803a724:	1025883a 	mov	r18,r2
 803a728:	802c2180 	call	802c218 <__mulsi3>
 803a72c:	1009883a 	mov	r4,r2
 803a730:	b006943a 	slli	r3,r22,16
 803a734:	9804d43a 	srli	r2,r19,16
 803a738:	1886b03a 	or	r3,r3,r2
 803a73c:	1900052e 	bgeu	r3,r4,803a754 <__udivdi3+0xf4>
 803a740:	1c07883a 	add	r3,r3,r16
 803a744:	90bfffc4 	addi	r2,r18,-1
 803a748:	1c000136 	bltu	r3,r16,803a750 <__udivdi3+0xf0>
 803a74c:	19015536 	bltu	r3,r4,803aca4 <__udivdi3+0x644>
 803a750:	1025883a 	mov	r18,r2
 803a754:	1929c83a 	sub	r20,r3,r4
 803a758:	880b883a 	mov	r5,r17
 803a75c:	a009883a 	mov	r4,r20
 803a760:	802c2100 	call	802c210 <__umodsi3>
 803a764:	102d883a 	mov	r22,r2
 803a768:	880b883a 	mov	r5,r17
 803a76c:	a009883a 	mov	r4,r20
 803a770:	b02c943a 	slli	r22,r22,16
 803a774:	802c2080 	call	802c208 <__udivsi3>
 803a778:	1009883a 	mov	r4,r2
 803a77c:	a80b883a 	mov	r5,r21
 803a780:	9cffffcc 	andi	r19,r19,65535
 803a784:	1023883a 	mov	r17,r2
 803a788:	b4e6b03a 	or	r19,r22,r19
 803a78c:	802c2180 	call	802c218 <__mulsi3>
 803a790:	9880052e 	bgeu	r19,r2,803a7a8 <__udivdi3+0x148>
 803a794:	9c27883a 	add	r19,r19,r16
 803a798:	88ffffc4 	addi	r3,r17,-1
 803a79c:	9c011436 	bltu	r19,r16,803abf0 <__udivdi3+0x590>
 803a7a0:	9881132e 	bgeu	r19,r2,803abf0 <__udivdi3+0x590>
 803a7a4:	8c7fff84 	addi	r17,r17,-2
 803a7a8:	9004943a 	slli	r2,r18,16
 803a7ac:	0007883a 	mov	r3,zero
 803a7b0:	8884b03a 	or	r2,r17,r2
 803a7b4:	00001506 	br	803a80c <__udivdi3+0x1ac>
 803a7b8:	29c06a36 	bltu	r5,r7,803a964 <__udivdi3+0x304>
 803a7bc:	00bfffd4 	movui	r2,65535
 803a7c0:	11c06a2e 	bgeu	r2,r7,803a96c <__udivdi3+0x30c>
 803a7c4:	00804034 	movhi	r2,256
 803a7c8:	10bfffc4 	addi	r2,r2,-1
 803a7cc:	11c11436 	bltu	r2,r7,803ac20 <__udivdi3+0x5c0>
 803a7d0:	00c00404 	movi	r3,16
 803a7d4:	180b883a 	mov	r5,r3
 803a7d8:	38c6d83a 	srl	r3,r7,r3
 803a7dc:	01020134 	movhi	r4,2052
 803a7e0:	21041504 	addi	r4,r4,4180
 803a7e4:	04000804 	movi	r16,32
 803a7e8:	20c7883a 	add	r3,r4,r3
 803a7ec:	18800003 	ldbu	r2,0(r3)
 803a7f0:	1145883a 	add	r2,r2,r5
 803a7f4:	80a1c83a 	sub	r16,r16,r2
 803a7f8:	80006e1e 	bne	r16,zero,803a9b4 <__udivdi3+0x354>
 803a7fc:	0007883a 	mov	r3,zero
 803a800:	3c406a36 	bltu	r7,r17,803a9ac <__udivdi3+0x34c>
 803a804:	9180692e 	bgeu	r18,r6,803a9ac <__udivdi3+0x34c>
 803a808:	0005883a 	mov	r2,zero
 803a80c:	dfc00a17 	ldw	ra,40(sp)
 803a810:	df000917 	ldw	fp,36(sp)
 803a814:	ddc00817 	ldw	r23,32(sp)
 803a818:	dd800717 	ldw	r22,28(sp)
 803a81c:	dd400617 	ldw	r21,24(sp)
 803a820:	dd000517 	ldw	r20,20(sp)
 803a824:	dcc00417 	ldw	r19,16(sp)
 803a828:	dc800317 	ldw	r18,12(sp)
 803a82c:	dc400217 	ldw	r17,8(sp)
 803a830:	dc000117 	ldw	r16,4(sp)
 803a834:	dec00b04 	addi	sp,sp,44
 803a838:	f800283a 	ret
 803a83c:	3000041e 	bne	r6,zero,803a850 <__udivdi3+0x1f0>
 803a840:	01000044 	movi	r4,1
 803a844:	000b883a 	mov	r5,zero
 803a848:	802c2080 	call	802c208 <__udivsi3>
 803a84c:	1021883a 	mov	r16,r2
 803a850:	00bfffd4 	movui	r2,65535
 803a854:	1400502e 	bgeu	r2,r16,803a998 <__udivdi3+0x338>
 803a858:	00804034 	movhi	r2,256
 803a85c:	10bfffc4 	addi	r2,r2,-1
 803a860:	1400f536 	bltu	r2,r16,803ac38 <__udivdi3+0x5d8>
 803a864:	00800404 	movi	r2,16
 803a868:	1007883a 	mov	r3,r2
 803a86c:	8084d83a 	srl	r2,r16,r2
 803a870:	01020134 	movhi	r4,2052
 803a874:	21041504 	addi	r4,r4,4180
 803a878:	2085883a 	add	r2,r4,r2
 803a87c:	10800003 	ldbu	r2,0(r2)
 803a880:	10c7883a 	add	r3,r2,r3
 803a884:	00800804 	movi	r2,32
 803a888:	10c5c83a 	sub	r2,r2,r3
 803a88c:	1000a01e 	bne	r2,zero,803ab10 <__udivdi3+0x4b0>
 803a890:	8028d43a 	srli	r20,r16,16
 803a894:	8c23c83a 	sub	r17,r17,r16
 803a898:	857fffcc 	andi	r21,r16,65535
 803a89c:	00c00044 	movi	r3,1
 803a8a0:	8809883a 	mov	r4,r17
 803a8a4:	a00b883a 	mov	r5,r20
 803a8a8:	d8c00015 	stw	r3,0(sp)
 803a8ac:	802c2100 	call	802c210 <__umodsi3>
 803a8b0:	8809883a 	mov	r4,r17
 803a8b4:	a00b883a 	mov	r5,r20
 803a8b8:	102d883a 	mov	r22,r2
 803a8bc:	802c2080 	call	802c208 <__udivsi3>
 803a8c0:	1009883a 	mov	r4,r2
 803a8c4:	a80b883a 	mov	r5,r21
 803a8c8:	1025883a 	mov	r18,r2
 803a8cc:	802c2180 	call	802c218 <__mulsi3>
 803a8d0:	1009883a 	mov	r4,r2
 803a8d4:	b00c943a 	slli	r6,r22,16
 803a8d8:	9804d43a 	srli	r2,r19,16
 803a8dc:	d8c00017 	ldw	r3,0(sp)
 803a8e0:	308cb03a 	or	r6,r6,r2
 803a8e4:	3100052e 	bgeu	r6,r4,803a8fc <__udivdi3+0x29c>
 803a8e8:	340d883a 	add	r6,r6,r16
 803a8ec:	90bfffc4 	addi	r2,r18,-1
 803a8f0:	34000136 	bltu	r6,r16,803a8f8 <__udivdi3+0x298>
 803a8f4:	3100e836 	bltu	r6,r4,803ac98 <__udivdi3+0x638>
 803a8f8:	1025883a 	mov	r18,r2
 803a8fc:	3123c83a 	sub	r17,r6,r4
 803a900:	8809883a 	mov	r4,r17
 803a904:	a00b883a 	mov	r5,r20
 803a908:	d8c00015 	stw	r3,0(sp)
 803a90c:	802c2100 	call	802c210 <__umodsi3>
 803a910:	102d883a 	mov	r22,r2
 803a914:	8809883a 	mov	r4,r17
 803a918:	a00b883a 	mov	r5,r20
 803a91c:	b02c943a 	slli	r22,r22,16
 803a920:	802c2080 	call	802c208 <__udivsi3>
 803a924:	1009883a 	mov	r4,r2
 803a928:	a80b883a 	mov	r5,r21
 803a92c:	9cffffcc 	andi	r19,r19,65535
 803a930:	1023883a 	mov	r17,r2
 803a934:	b4e6b03a 	or	r19,r22,r19
 803a938:	802c2180 	call	802c218 <__mulsi3>
 803a93c:	d8c00017 	ldw	r3,0(sp)
 803a940:	9880052e 	bgeu	r19,r2,803a958 <__udivdi3+0x2f8>
 803a944:	9c27883a 	add	r19,r19,r16
 803a948:	893fffc4 	addi	r4,r17,-1
 803a94c:	9c00aa36 	bltu	r19,r16,803abf8 <__udivdi3+0x598>
 803a950:	9880a92e 	bgeu	r19,r2,803abf8 <__udivdi3+0x598>
 803a954:	8c7fff84 	addi	r17,r17,-2
 803a958:	9004943a 	slli	r2,r18,16
 803a95c:	8884b03a 	or	r2,r17,r2
 803a960:	003faa06 	br	803a80c <__udivdi3+0x1ac>
 803a964:	0007883a 	mov	r3,zero
 803a968:	003fa706 	br	803a808 <__udivdi3+0x1a8>
 803a96c:	00803fc4 	movi	r2,255
 803a970:	11c0ae36 	bltu	r2,r7,803ac2c <__udivdi3+0x5cc>
 803a974:	0007883a 	mov	r3,zero
 803a978:	000b883a 	mov	r5,zero
 803a97c:	003f9606 	br	803a7d8 <__udivdi3+0x178>
 803a980:	00804034 	movhi	r2,256
 803a984:	10bfffc4 	addi	r2,r2,-1
 803a988:	1180ae36 	bltu	r2,r6,803ac44 <__udivdi3+0x5e4>
 803a98c:	00800404 	movi	r2,16
 803a990:	1007883a 	mov	r3,r2
 803a994:	003f4a06 	br	803a6c0 <__udivdi3+0x60>
 803a998:	00803fc4 	movi	r2,255
 803a99c:	1400af36 	bltu	r2,r16,803ac5c <__udivdi3+0x5fc>
 803a9a0:	0005883a 	mov	r2,zero
 803a9a4:	0007883a 	mov	r3,zero
 803a9a8:	003fb006 	br	803a86c <__udivdi3+0x20c>
 803a9ac:	00800044 	movi	r2,1
 803a9b0:	003f9606 	br	803a80c <__udivdi3+0x1ac>
 803a9b4:	3c0e983a 	sll	r7,r7,r16
 803a9b8:	3086d83a 	srl	r3,r6,r2
 803a9bc:	88aed83a 	srl	r23,r17,r2
 803a9c0:	9084d83a 	srl	r2,r18,r2
 803a9c4:	38e6b03a 	or	r19,r7,r3
 803a9c8:	9828d43a 	srli	r20,r19,16
 803a9cc:	8c22983a 	sll	r17,r17,r16
 803a9d0:	b809883a 	mov	r4,r23
 803a9d4:	a00b883a 	mov	r5,r20
 803a9d8:	342a983a 	sll	r21,r6,r16
 803a9dc:	88a2b03a 	or	r17,r17,r2
 803a9e0:	802c2100 	call	802c210 <__umodsi3>
 803a9e4:	b809883a 	mov	r4,r23
 803a9e8:	a00b883a 	mov	r5,r20
 803a9ec:	1039883a 	mov	fp,r2
 803a9f0:	9dbfffcc 	andi	r22,r19,65535
 803a9f4:	802c2080 	call	802c208 <__udivsi3>
 803a9f8:	1009883a 	mov	r4,r2
 803a9fc:	b00b883a 	mov	r5,r22
 803aa00:	102f883a 	mov	r23,r2
 803aa04:	802c2180 	call	802c218 <__mulsi3>
 803aa08:	1009883a 	mov	r4,r2
 803aa0c:	e00e943a 	slli	r7,fp,16
 803aa10:	8804d43a 	srli	r2,r17,16
 803aa14:	388eb03a 	or	r7,r7,r2
 803aa18:	3900042e 	bgeu	r7,r4,803aa2c <__udivdi3+0x3cc>
 803aa1c:	3ccf883a 	add	r7,r7,r19
 803aa20:	b8bfffc4 	addi	r2,r23,-1
 803aa24:	3cc0942e 	bgeu	r7,r19,803ac78 <__udivdi3+0x618>
 803aa28:	102f883a 	mov	r23,r2
 803aa2c:	3939c83a 	sub	fp,r7,r4
 803aa30:	a00b883a 	mov	r5,r20
 803aa34:	e009883a 	mov	r4,fp
 803aa38:	802c2100 	call	802c210 <__umodsi3>
 803aa3c:	a00b883a 	mov	r5,r20
 803aa40:	e009883a 	mov	r4,fp
 803aa44:	d8800015 	stw	r2,0(sp)
 803aa48:	802c2080 	call	802c208 <__udivsi3>
 803aa4c:	1009883a 	mov	r4,r2
 803aa50:	b00b883a 	mov	r5,r22
 803aa54:	1029883a 	mov	r20,r2
 803aa58:	802c2180 	call	802c218 <__mulsi3>
 803aa5c:	d8c00017 	ldw	r3,0(sp)
 803aa60:	8c7fffcc 	andi	r17,r17,65535
 803aa64:	1806943a 	slli	r3,r3,16
 803aa68:	1c46b03a 	or	r3,r3,r17
 803aa6c:	1880042e 	bgeu	r3,r2,803aa80 <__udivdi3+0x420>
 803aa70:	1cc7883a 	add	r3,r3,r19
 803aa74:	a13fffc4 	addi	r4,r20,-1
 803aa78:	1cc07b2e 	bgeu	r3,r19,803ac68 <__udivdi3+0x608>
 803aa7c:	2029883a 	mov	r20,r4
 803aa80:	b82e943a 	slli	r23,r23,16
 803aa84:	a822d43a 	srli	r17,r21,16
 803aa88:	ad7fffcc 	andi	r21,r21,65535
 803aa8c:	a5e8b03a 	or	r20,r20,r23
 803aa90:	a5bfffcc 	andi	r22,r20,65535
 803aa94:	b009883a 	mov	r4,r22
 803aa98:	a80b883a 	mov	r5,r21
 803aa9c:	18afc83a 	sub	r23,r3,r2
 803aaa0:	a026d43a 	srli	r19,r20,16
 803aaa4:	802c2180 	call	802c218 <__mulsi3>
 803aaa8:	b009883a 	mov	r4,r22
 803aaac:	880b883a 	mov	r5,r17
 803aab0:	1039883a 	mov	fp,r2
 803aab4:	802c2180 	call	802c218 <__mulsi3>
 803aab8:	a80b883a 	mov	r5,r21
 803aabc:	9809883a 	mov	r4,r19
 803aac0:	102d883a 	mov	r22,r2
 803aac4:	802c2180 	call	802c218 <__mulsi3>
 803aac8:	9809883a 	mov	r4,r19
 803aacc:	880b883a 	mov	r5,r17
 803aad0:	102b883a 	mov	r21,r2
 803aad4:	802c2180 	call	802c218 <__mulsi3>
 803aad8:	100b883a 	mov	r5,r2
 803aadc:	e004d43a 	srli	r2,fp,16
 803aae0:	ad89883a 	add	r4,r21,r22
 803aae4:	2089883a 	add	r4,r4,r2
 803aae8:	2540022e 	bgeu	r4,r21,803aaf4 <__udivdi3+0x494>
 803aaec:	00800074 	movhi	r2,1
 803aaf0:	288b883a 	add	r5,r5,r2
 803aaf4:	2004d43a 	srli	r2,r4,16
 803aaf8:	288b883a 	add	r5,r5,r2
 803aafc:	b9404536 	bltu	r23,r5,803ac14 <__udivdi3+0x5b4>
 803ab00:	b9403f26 	beq	r23,r5,803ac00 <__udivdi3+0x5a0>
 803ab04:	a005883a 	mov	r2,r20
 803ab08:	0007883a 	mov	r3,zero
 803ab0c:	003f3f06 	br	803a80c <__udivdi3+0x1ac>
 803ab10:	80a0983a 	sll	r16,r16,r2
 803ab14:	88eed83a 	srl	r23,r17,r3
 803ab18:	90c6d83a 	srl	r3,r18,r3
 803ab1c:	8028d43a 	srli	r20,r16,16
 803ab20:	88a2983a 	sll	r17,r17,r2
 803ab24:	b809883a 	mov	r4,r23
 803ab28:	a00b883a 	mov	r5,r20
 803ab2c:	88ecb03a 	or	r22,r17,r3
 803ab30:	90a6983a 	sll	r19,r18,r2
 803ab34:	802c2100 	call	802c210 <__umodsi3>
 803ab38:	b809883a 	mov	r4,r23
 803ab3c:	a00b883a 	mov	r5,r20
 803ab40:	1023883a 	mov	r17,r2
 803ab44:	857fffcc 	andi	r21,r16,65535
 803ab48:	802c2080 	call	802c208 <__udivsi3>
 803ab4c:	1009883a 	mov	r4,r2
 803ab50:	a80b883a 	mov	r5,r21
 803ab54:	102f883a 	mov	r23,r2
 803ab58:	802c2180 	call	802c218 <__mulsi3>
 803ab5c:	1009883a 	mov	r4,r2
 803ab60:	880a943a 	slli	r5,r17,16
 803ab64:	b004d43a 	srli	r2,r22,16
 803ab68:	288ab03a 	or	r5,r5,r2
 803ab6c:	2900062e 	bgeu	r5,r4,803ab88 <__udivdi3+0x528>
 803ab70:	2c0b883a 	add	r5,r5,r16
 803ab74:	b8bfffc4 	addi	r2,r23,-1
 803ab78:	2c004536 	bltu	r5,r16,803ac90 <__udivdi3+0x630>
 803ab7c:	2900442e 	bgeu	r5,r4,803ac90 <__udivdi3+0x630>
 803ab80:	bdffff84 	addi	r23,r23,-2
 803ab84:	2c0b883a 	add	r5,r5,r16
 803ab88:	2925c83a 	sub	r18,r5,r4
 803ab8c:	9009883a 	mov	r4,r18
 803ab90:	a00b883a 	mov	r5,r20
 803ab94:	802c2100 	call	802c210 <__umodsi3>
 803ab98:	1023883a 	mov	r17,r2
 803ab9c:	9009883a 	mov	r4,r18
 803aba0:	a00b883a 	mov	r5,r20
 803aba4:	8822943a 	slli	r17,r17,16
 803aba8:	802c2080 	call	802c208 <__udivsi3>
 803abac:	1009883a 	mov	r4,r2
 803abb0:	a80b883a 	mov	r5,r21
 803abb4:	b5bfffcc 	andi	r22,r22,65535
 803abb8:	1025883a 	mov	r18,r2
 803abbc:	8da2b03a 	or	r17,r17,r22
 803abc0:	802c2180 	call	802c218 <__mulsi3>
 803abc4:	8880062e 	bgeu	r17,r2,803abe0 <__udivdi3+0x580>
 803abc8:	8c23883a 	add	r17,r17,r16
 803abcc:	90ffffc4 	addi	r3,r18,-1
 803abd0:	8c002d36 	bltu	r17,r16,803ac88 <__udivdi3+0x628>
 803abd4:	88802c2e 	bgeu	r17,r2,803ac88 <__udivdi3+0x628>
 803abd8:	94bfff84 	addi	r18,r18,-2
 803abdc:	8c23883a 	add	r17,r17,r16
 803abe0:	b806943a 	slli	r3,r23,16
 803abe4:	88a3c83a 	sub	r17,r17,r2
 803abe8:	90c6b03a 	or	r3,r18,r3
 803abec:	003f2c06 	br	803a8a0 <__udivdi3+0x240>
 803abf0:	1823883a 	mov	r17,r3
 803abf4:	003eec06 	br	803a7a8 <__udivdi3+0x148>
 803abf8:	2023883a 	mov	r17,r4
 803abfc:	003f5606 	br	803a958 <__udivdi3+0x2f8>
 803ac00:	2008943a 	slli	r4,r4,16
 803ac04:	9420983a 	sll	r16,r18,r16
 803ac08:	e73fffcc 	andi	fp,fp,65535
 803ac0c:	2709883a 	add	r4,r4,fp
 803ac10:	813fbc2e 	bgeu	r16,r4,803ab04 <__udivdi3+0x4a4>
 803ac14:	a0bfffc4 	addi	r2,r20,-1
 803ac18:	0007883a 	mov	r3,zero
 803ac1c:	003efb06 	br	803a80c <__udivdi3+0x1ac>
 803ac20:	00c00604 	movi	r3,24
 803ac24:	180b883a 	mov	r5,r3
 803ac28:	003eeb06 	br	803a7d8 <__udivdi3+0x178>
 803ac2c:	00c00204 	movi	r3,8
 803ac30:	180b883a 	mov	r5,r3
 803ac34:	003ee806 	br	803a7d8 <__udivdi3+0x178>
 803ac38:	00800604 	movi	r2,24
 803ac3c:	1007883a 	mov	r3,r2
 803ac40:	003f0a06 	br	803a86c <__udivdi3+0x20c>
 803ac44:	00800604 	movi	r2,24
 803ac48:	1007883a 	mov	r3,r2
 803ac4c:	003e9c06 	br	803a6c0 <__udivdi3+0x60>
 803ac50:	00800204 	movi	r2,8
 803ac54:	1007883a 	mov	r3,r2
 803ac58:	003e9906 	br	803a6c0 <__udivdi3+0x60>
 803ac5c:	00800204 	movi	r2,8
 803ac60:	1007883a 	mov	r3,r2
 803ac64:	003f0106 	br	803a86c <__udivdi3+0x20c>
 803ac68:	18bf842e 	bgeu	r3,r2,803aa7c <__udivdi3+0x41c>
 803ac6c:	a53fff84 	addi	r20,r20,-2
 803ac70:	1cc7883a 	add	r3,r3,r19
 803ac74:	003f8206 	br	803aa80 <__udivdi3+0x420>
 803ac78:	393f6b2e 	bgeu	r7,r4,803aa28 <__udivdi3+0x3c8>
 803ac7c:	bdffff84 	addi	r23,r23,-2
 803ac80:	3ccf883a 	add	r7,r7,r19
 803ac84:	003f6906 	br	803aa2c <__udivdi3+0x3cc>
 803ac88:	1825883a 	mov	r18,r3
 803ac8c:	003fd406 	br	803abe0 <__udivdi3+0x580>
 803ac90:	102f883a 	mov	r23,r2
 803ac94:	003fbc06 	br	803ab88 <__udivdi3+0x528>
 803ac98:	94bfff84 	addi	r18,r18,-2
 803ac9c:	340d883a 	add	r6,r6,r16
 803aca0:	003f1606 	br	803a8fc <__udivdi3+0x29c>
 803aca4:	94bfff84 	addi	r18,r18,-2
 803aca8:	1c07883a 	add	r3,r3,r16
 803acac:	003ea906 	br	803a754 <__udivdi3+0xf4>

0803acb0 <__umoddi3>:
 803acb0:	defff304 	addi	sp,sp,-52
 803acb4:	dd000715 	stw	r20,28(sp)
 803acb8:	dcc00615 	stw	r19,24(sp)
 803acbc:	dc800515 	stw	r18,20(sp)
 803acc0:	dc400415 	stw	r17,16(sp)
 803acc4:	dc000315 	stw	r16,12(sp)
 803acc8:	dfc00c15 	stw	ra,48(sp)
 803accc:	df000b15 	stw	fp,44(sp)
 803acd0:	ddc00a15 	stw	r23,40(sp)
 803acd4:	dd800915 	stw	r22,36(sp)
 803acd8:	dd400815 	stw	r21,32(sp)
 803acdc:	2025883a 	mov	r18,r4
 803ace0:	2823883a 	mov	r17,r5
 803ace4:	3021883a 	mov	r16,r6
 803ace8:	2027883a 	mov	r19,r4
 803acec:	2829883a 	mov	r20,r5
 803acf0:	38003a1e 	bne	r7,zero,803addc <__umoddi3+0x12c>
 803acf4:	2980522e 	bgeu	r5,r6,803ae40 <__umoddi3+0x190>
 803acf8:	00bfffd4 	movui	r2,65535
 803acfc:	1180a436 	bltu	r2,r6,803af90 <__umoddi3+0x2e0>
 803ad00:	00803fc4 	movi	r2,255
 803ad04:	11816036 	bltu	r2,r6,803b288 <__umoddi3+0x5d8>
 803ad08:	0005883a 	mov	r2,zero
 803ad0c:	0009883a 	mov	r4,zero
 803ad10:	3084d83a 	srl	r2,r6,r2
 803ad14:	00c20134 	movhi	r3,2052
 803ad18:	18c41504 	addi	r3,r3,4180
 803ad1c:	05400804 	movi	r21,32
 803ad20:	1885883a 	add	r2,r3,r2
 803ad24:	10800003 	ldbu	r2,0(r2)
 803ad28:	1109883a 	add	r4,r2,r4
 803ad2c:	a92bc83a 	sub	r21,r21,r4
 803ad30:	a8010e26 	beq	r21,zero,803b16c <__umoddi3+0x4bc>
 803ad34:	8d62983a 	sll	r17,r17,r21
 803ad38:	9108d83a 	srl	r4,r18,r4
 803ad3c:	3560983a 	sll	r16,r6,r21
 803ad40:	9566983a 	sll	r19,r18,r21
 803ad44:	8928b03a 	or	r20,r17,r4
 803ad48:	8022d43a 	srli	r17,r16,16
 803ad4c:	a009883a 	mov	r4,r20
 803ad50:	84bfffcc 	andi	r18,r16,65535
 803ad54:	880b883a 	mov	r5,r17
 803ad58:	802c2100 	call	802c210 <__umodsi3>
 803ad5c:	a009883a 	mov	r4,r20
 803ad60:	880b883a 	mov	r5,r17
 803ad64:	102d883a 	mov	r22,r2
 803ad68:	802c2080 	call	802c208 <__udivsi3>
 803ad6c:	1009883a 	mov	r4,r2
 803ad70:	900b883a 	mov	r5,r18
 803ad74:	802c2180 	call	802c218 <__mulsi3>
 803ad78:	1009883a 	mov	r4,r2
 803ad7c:	b006943a 	slli	r3,r22,16
 803ad80:	9804d43a 	srli	r2,r19,16
 803ad84:	1886b03a 	or	r3,r3,r2
 803ad88:	1900042e 	bgeu	r3,r4,803ad9c <__umoddi3+0xec>
 803ad8c:	1c07883a 	add	r3,r3,r16
 803ad90:	1c000236 	bltu	r3,r16,803ad9c <__umoddi3+0xec>
 803ad94:	1900012e 	bgeu	r3,r4,803ad9c <__umoddi3+0xec>
 803ad98:	1c07883a 	add	r3,r3,r16
 803ad9c:	1929c83a 	sub	r20,r3,r4
 803ada0:	a009883a 	mov	r4,r20
 803ada4:	880b883a 	mov	r5,r17
 803ada8:	802c2100 	call	802c210 <__umodsi3>
 803adac:	102d883a 	mov	r22,r2
 803adb0:	a009883a 	mov	r4,r20
 803adb4:	880b883a 	mov	r5,r17
 803adb8:	b02c943a 	slli	r22,r22,16
 803adbc:	802c2080 	call	802c208 <__udivsi3>
 803adc0:	1009883a 	mov	r4,r2
 803adc4:	900b883a 	mov	r5,r18
 803adc8:	9cffffcc 	andi	r19,r19,65535
 803adcc:	802c2180 	call	802c218 <__mulsi3>
 803add0:	b4e6b03a 	or	r19,r22,r19
 803add4:	9880572e 	bgeu	r19,r2,803af34 <__umoddi3+0x284>
 803add8:	00005206 	br	803af24 <__umoddi3+0x274>
 803addc:	29c05936 	bltu	r5,r7,803af44 <__umoddi3+0x294>
 803ade0:	00bfffd4 	movui	r2,65535
 803ade4:	11c0652e 	bgeu	r2,r7,803af7c <__umoddi3+0x2cc>
 803ade8:	00804034 	movhi	r2,256
 803adec:	10bfffc4 	addi	r2,r2,-1
 803adf0:	11c11936 	bltu	r2,r7,803b258 <__umoddi3+0x5a8>
 803adf4:	00c00404 	movi	r3,16
 803adf8:	1827883a 	mov	r19,r3
 803adfc:	38c6d83a 	srl	r3,r7,r3
 803ae00:	01020134 	movhi	r4,2052
 803ae04:	21041504 	addi	r4,r4,4180
 803ae08:	04000804 	movi	r16,32
 803ae0c:	20c7883a 	add	r3,r4,r3
 803ae10:	18800003 	ldbu	r2,0(r3)
 803ae14:	14e7883a 	add	r19,r2,r19
 803ae18:	84e1c83a 	sub	r16,r16,r19
 803ae1c:	8000671e 	bne	r16,zero,803afbc <__umoddi3+0x30c>
 803ae20:	3c400136 	bltu	r7,r17,803ae28 <__umoddi3+0x178>
 803ae24:	91812536 	bltu	r18,r6,803b2bc <__umoddi3+0x60c>
 803ae28:	9185c83a 	sub	r2,r18,r6
 803ae2c:	89e3c83a 	sub	r17,r17,r7
 803ae30:	90a5803a 	cmpltu	r18,r18,r2
 803ae34:	8ca9c83a 	sub	r20,r17,r18
 803ae38:	a007883a 	mov	r3,r20
 803ae3c:	00004306 	br	803af4c <__umoddi3+0x29c>
 803ae40:	3000041e 	bne	r6,zero,803ae54 <__umoddi3+0x1a4>
 803ae44:	01000044 	movi	r4,1
 803ae48:	000b883a 	mov	r5,zero
 803ae4c:	802c2080 	call	802c208 <__udivsi3>
 803ae50:	1021883a 	mov	r16,r2
 803ae54:	00bfffd4 	movui	r2,65535
 803ae58:	1400532e 	bgeu	r2,r16,803afa8 <__umoddi3+0x2f8>
 803ae5c:	00804034 	movhi	r2,256
 803ae60:	10bfffc4 	addi	r2,r2,-1
 803ae64:	14010536 	bltu	r2,r16,803b27c <__umoddi3+0x5cc>
 803ae68:	00800404 	movi	r2,16
 803ae6c:	1007883a 	mov	r3,r2
 803ae70:	8084d83a 	srl	r2,r16,r2
 803ae74:	01020134 	movhi	r4,2052
 803ae78:	21041504 	addi	r4,r4,4180
 803ae7c:	05400804 	movi	r21,32
 803ae80:	2085883a 	add	r2,r4,r2
 803ae84:	10800003 	ldbu	r2,0(r2)
 803ae88:	10c7883a 	add	r3,r2,r3
 803ae8c:	a8ebc83a 	sub	r21,r21,r3
 803ae90:	a800b81e 	bne	r21,zero,803b174 <__umoddi3+0x4c4>
 803ae94:	8028d43a 	srli	r20,r16,16
 803ae98:	8c23c83a 	sub	r17,r17,r16
 803ae9c:	85bfffcc 	andi	r22,r16,65535
 803aea0:	8809883a 	mov	r4,r17
 803aea4:	a00b883a 	mov	r5,r20
 803aea8:	802c2100 	call	802c210 <__umodsi3>
 803aeac:	8809883a 	mov	r4,r17
 803aeb0:	a00b883a 	mov	r5,r20
 803aeb4:	1025883a 	mov	r18,r2
 803aeb8:	802c2080 	call	802c208 <__udivsi3>
 803aebc:	1009883a 	mov	r4,r2
 803aec0:	b00b883a 	mov	r5,r22
 803aec4:	802c2180 	call	802c218 <__mulsi3>
 803aec8:	1009883a 	mov	r4,r2
 803aecc:	9006943a 	slli	r3,r18,16
 803aed0:	9804d43a 	srli	r2,r19,16
 803aed4:	1886b03a 	or	r3,r3,r2
 803aed8:	1900032e 	bgeu	r3,r4,803aee8 <__umoddi3+0x238>
 803aedc:	1c07883a 	add	r3,r3,r16
 803aee0:	1c000136 	bltu	r3,r16,803aee8 <__umoddi3+0x238>
 803aee4:	1900f336 	bltu	r3,r4,803b2b4 <__umoddi3+0x604>
 803aee8:	1923c83a 	sub	r17,r3,r4
 803aeec:	8809883a 	mov	r4,r17
 803aef0:	a00b883a 	mov	r5,r20
 803aef4:	802c2100 	call	802c210 <__umodsi3>
 803aef8:	102f883a 	mov	r23,r2
 803aefc:	8809883a 	mov	r4,r17
 803af00:	a00b883a 	mov	r5,r20
 803af04:	b82e943a 	slli	r23,r23,16
 803af08:	802c2080 	call	802c208 <__udivsi3>
 803af0c:	1009883a 	mov	r4,r2
 803af10:	b00b883a 	mov	r5,r22
 803af14:	9cffffcc 	andi	r19,r19,65535
 803af18:	802c2180 	call	802c218 <__mulsi3>
 803af1c:	bce6b03a 	or	r19,r23,r19
 803af20:	9880042e 	bgeu	r19,r2,803af34 <__umoddi3+0x284>
 803af24:	9c27883a 	add	r19,r19,r16
 803af28:	9c000236 	bltu	r19,r16,803af34 <__umoddi3+0x284>
 803af2c:	9880012e 	bgeu	r19,r2,803af34 <__umoddi3+0x284>
 803af30:	9c27883a 	add	r19,r19,r16
 803af34:	9885c83a 	sub	r2,r19,r2
 803af38:	1544d83a 	srl	r2,r2,r21
 803af3c:	0007883a 	mov	r3,zero
 803af40:	00000206 	br	803af4c <__umoddi3+0x29c>
 803af44:	2005883a 	mov	r2,r4
 803af48:	2807883a 	mov	r3,r5
 803af4c:	dfc00c17 	ldw	ra,48(sp)
 803af50:	df000b17 	ldw	fp,44(sp)
 803af54:	ddc00a17 	ldw	r23,40(sp)
 803af58:	dd800917 	ldw	r22,36(sp)
 803af5c:	dd400817 	ldw	r21,32(sp)
 803af60:	dd000717 	ldw	r20,28(sp)
 803af64:	dcc00617 	ldw	r19,24(sp)
 803af68:	dc800517 	ldw	r18,20(sp)
 803af6c:	dc400417 	ldw	r17,16(sp)
 803af70:	dc000317 	ldw	r16,12(sp)
 803af74:	dec00d04 	addi	sp,sp,52
 803af78:	f800283a 	ret
 803af7c:	00803fc4 	movi	r2,255
 803af80:	11c0b236 	bltu	r2,r7,803b24c <__umoddi3+0x59c>
 803af84:	0007883a 	mov	r3,zero
 803af88:	0027883a 	mov	r19,zero
 803af8c:	003f9b06 	br	803adfc <__umoddi3+0x14c>
 803af90:	00804034 	movhi	r2,256
 803af94:	10bfffc4 	addi	r2,r2,-1
 803af98:	1180b236 	bltu	r2,r6,803b264 <__umoddi3+0x5b4>
 803af9c:	00800404 	movi	r2,16
 803afa0:	1009883a 	mov	r4,r2
 803afa4:	003f5a06 	br	803ad10 <__umoddi3+0x60>
 803afa8:	00803fc4 	movi	r2,255
 803afac:	1400b036 	bltu	r2,r16,803b270 <__umoddi3+0x5c0>
 803afb0:	0005883a 	mov	r2,zero
 803afb4:	0007883a 	mov	r3,zero
 803afb8:	003fad06 	br	803ae70 <__umoddi3+0x1c0>
 803afbc:	34c4d83a 	srl	r2,r6,r19
 803afc0:	3c0e983a 	sll	r7,r7,r16
 803afc4:	8cf8d83a 	srl	fp,r17,r19
 803afc8:	8c22983a 	sll	r17,r17,r16
 803afcc:	38a8b03a 	or	r20,r7,r2
 803afd0:	a02ad43a 	srli	r21,r20,16
 803afd4:	94c4d83a 	srl	r2,r18,r19
 803afd8:	e009883a 	mov	r4,fp
 803afdc:	a80b883a 	mov	r5,r21
 803afe0:	342c983a 	sll	r22,r6,r16
 803afe4:	88a2b03a 	or	r17,r17,r2
 803afe8:	802c2100 	call	802c210 <__umodsi3>
 803afec:	e009883a 	mov	r4,fp
 803aff0:	a80b883a 	mov	r5,r21
 803aff4:	a5ffffcc 	andi	r23,r20,65535
 803aff8:	d8800215 	stw	r2,8(sp)
 803affc:	802c2080 	call	802c208 <__udivsi3>
 803b000:	1009883a 	mov	r4,r2
 803b004:	b80b883a 	mov	r5,r23
 803b008:	1039883a 	mov	fp,r2
 803b00c:	802c2180 	call	802c218 <__mulsi3>
 803b010:	d8c00217 	ldw	r3,8(sp)
 803b014:	1009883a 	mov	r4,r2
 803b018:	8804d43a 	srli	r2,r17,16
 803b01c:	1806943a 	slli	r3,r3,16
 803b020:	9424983a 	sll	r18,r18,r16
 803b024:	1886b03a 	or	r3,r3,r2
 803b028:	1900042e 	bgeu	r3,r4,803b03c <__umoddi3+0x38c>
 803b02c:	1d07883a 	add	r3,r3,r20
 803b030:	e0bfffc4 	addi	r2,fp,-1
 803b034:	1d009b2e 	bgeu	r3,r20,803b2a4 <__umoddi3+0x5f4>
 803b038:	1039883a 	mov	fp,r2
 803b03c:	1907c83a 	sub	r3,r3,r4
 803b040:	1809883a 	mov	r4,r3
 803b044:	a80b883a 	mov	r5,r21
 803b048:	d8c00215 	stw	r3,8(sp)
 803b04c:	802c2100 	call	802c210 <__umodsi3>
 803b050:	d8c00217 	ldw	r3,8(sp)
 803b054:	a80b883a 	mov	r5,r21
 803b058:	d8800015 	stw	r2,0(sp)
 803b05c:	1809883a 	mov	r4,r3
 803b060:	802c2080 	call	802c208 <__udivsi3>
 803b064:	1009883a 	mov	r4,r2
 803b068:	b80b883a 	mov	r5,r23
 803b06c:	102b883a 	mov	r21,r2
 803b070:	802c2180 	call	802c218 <__mulsi3>
 803b074:	d9c00017 	ldw	r7,0(sp)
 803b078:	8c7fffcc 	andi	r17,r17,65535
 803b07c:	380e943a 	slli	r7,r7,16
 803b080:	3c4eb03a 	or	r7,r7,r17
 803b084:	3880042e 	bgeu	r7,r2,803b098 <__umoddi3+0x3e8>
 803b088:	3d0f883a 	add	r7,r7,r20
 803b08c:	a8ffffc4 	addi	r3,r21,-1
 803b090:	3d00802e 	bgeu	r7,r20,803b294 <__umoddi3+0x5e4>
 803b094:	182b883a 	mov	r21,r3
 803b098:	e038943a 	slli	fp,fp,16
 803b09c:	b010d43a 	srli	r8,r22,16
 803b0a0:	b1bfffcc 	andi	r6,r22,65535
 803b0a4:	af2ab03a 	or	r21,r21,fp
 803b0a8:	a82ed43a 	srli	r23,r21,16
 803b0ac:	ad7fffcc 	andi	r21,r21,65535
 803b0b0:	300b883a 	mov	r5,r6
 803b0b4:	a809883a 	mov	r4,r21
 803b0b8:	38a3c83a 	sub	r17,r7,r2
 803b0bc:	d9800115 	stw	r6,4(sp)
 803b0c0:	da000015 	stw	r8,0(sp)
 803b0c4:	802c2180 	call	802c218 <__mulsi3>
 803b0c8:	da000017 	ldw	r8,0(sp)
 803b0cc:	a809883a 	mov	r4,r21
 803b0d0:	1039883a 	mov	fp,r2
 803b0d4:	400b883a 	mov	r5,r8
 803b0d8:	da000215 	stw	r8,8(sp)
 803b0dc:	802c2180 	call	802c218 <__mulsi3>
 803b0e0:	d9800117 	ldw	r6,4(sp)
 803b0e4:	b809883a 	mov	r4,r23
 803b0e8:	d8800015 	stw	r2,0(sp)
 803b0ec:	300b883a 	mov	r5,r6
 803b0f0:	802c2180 	call	802c218 <__mulsi3>
 803b0f4:	d8c00217 	ldw	r3,8(sp)
 803b0f8:	b809883a 	mov	r4,r23
 803b0fc:	102b883a 	mov	r21,r2
 803b100:	180b883a 	mov	r5,r3
 803b104:	802c2180 	call	802c218 <__mulsi3>
 803b108:	d9c00017 	ldw	r7,0(sp)
 803b10c:	1007883a 	mov	r3,r2
 803b110:	e004d43a 	srli	r2,fp,16
 803b114:	a9c9883a 	add	r4,r21,r7
 803b118:	2089883a 	add	r4,r4,r2
 803b11c:	2540022e 	bgeu	r4,r21,803b128 <__umoddi3+0x478>
 803b120:	00800074 	movhi	r2,1
 803b124:	1887883a 	add	r3,r3,r2
 803b128:	2004d43a 	srli	r2,r4,16
 803b12c:	2008943a 	slli	r4,r4,16
 803b130:	e73fffcc 	andi	fp,fp,65535
 803b134:	1887883a 	add	r3,r3,r2
 803b138:	2709883a 	add	r4,r4,fp
 803b13c:	88c03d36 	bltu	r17,r3,803b234 <__umoddi3+0x584>
 803b140:	88c06126 	beq	r17,r3,803b2c8 <__umoddi3+0x618>
 803b144:	88c7c83a 	sub	r3,r17,r3
 803b148:	202d883a 	mov	r22,r4
 803b14c:	95adc83a 	sub	r22,r18,r22
 803b150:	95a5803a 	cmpltu	r18,r18,r22
 803b154:	1c87c83a 	sub	r3,r3,r18
 803b158:	1cc4983a 	sll	r2,r3,r19
 803b15c:	b42cd83a 	srl	r22,r22,r16
 803b160:	1c06d83a 	srl	r3,r3,r16
 803b164:	1584b03a 	or	r2,r2,r22
 803b168:	003f7806 	br	803af4c <__umoddi3+0x29c>
 803b16c:	002b883a 	mov	r21,zero
 803b170:	003ef506 	br	803ad48 <__umoddi3+0x98>
 803b174:	8560983a 	sll	r16,r16,r21
 803b178:	88e6d83a 	srl	r19,r17,r3
 803b17c:	90c6d83a 	srl	r3,r18,r3
 803b180:	8028d43a 	srli	r20,r16,16
 803b184:	8d62983a 	sll	r17,r17,r21
 803b188:	9809883a 	mov	r4,r19
 803b18c:	a00b883a 	mov	r5,r20
 803b190:	88eeb03a 	or	r23,r17,r3
 803b194:	802c2100 	call	802c210 <__umodsi3>
 803b198:	9809883a 	mov	r4,r19
 803b19c:	a00b883a 	mov	r5,r20
 803b1a0:	1023883a 	mov	r17,r2
 803b1a4:	85bfffcc 	andi	r22,r16,65535
 803b1a8:	802c2080 	call	802c208 <__udivsi3>
 803b1ac:	1009883a 	mov	r4,r2
 803b1b0:	b00b883a 	mov	r5,r22
 803b1b4:	802c2180 	call	802c218 <__mulsi3>
 803b1b8:	1007883a 	mov	r3,r2
 803b1bc:	8808943a 	slli	r4,r17,16
 803b1c0:	b804d43a 	srli	r2,r23,16
 803b1c4:	9566983a 	sll	r19,r18,r21
 803b1c8:	2088b03a 	or	r4,r4,r2
 803b1cc:	20c0042e 	bgeu	r4,r3,803b1e0 <__umoddi3+0x530>
 803b1d0:	2409883a 	add	r4,r4,r16
 803b1d4:	24000236 	bltu	r4,r16,803b1e0 <__umoddi3+0x530>
 803b1d8:	20c0012e 	bgeu	r4,r3,803b1e0 <__umoddi3+0x530>
 803b1dc:	2409883a 	add	r4,r4,r16
 803b1e0:	20e5c83a 	sub	r18,r4,r3
 803b1e4:	9009883a 	mov	r4,r18
 803b1e8:	a00b883a 	mov	r5,r20
 803b1ec:	802c2100 	call	802c210 <__umodsi3>
 803b1f0:	1023883a 	mov	r17,r2
 803b1f4:	9009883a 	mov	r4,r18
 803b1f8:	a00b883a 	mov	r5,r20
 803b1fc:	8822943a 	slli	r17,r17,16
 803b200:	802c2080 	call	802c208 <__udivsi3>
 803b204:	1009883a 	mov	r4,r2
 803b208:	b00b883a 	mov	r5,r22
 803b20c:	bdffffcc 	andi	r23,r23,65535
 803b210:	802c2180 	call	802c218 <__mulsi3>
 803b214:	8de2b03a 	or	r17,r17,r23
 803b218:	8880042e 	bgeu	r17,r2,803b22c <__umoddi3+0x57c>
 803b21c:	8c23883a 	add	r17,r17,r16
 803b220:	8c000236 	bltu	r17,r16,803b22c <__umoddi3+0x57c>
 803b224:	8880012e 	bgeu	r17,r2,803b22c <__umoddi3+0x57c>
 803b228:	8c23883a 	add	r17,r17,r16
 803b22c:	88a3c83a 	sub	r17,r17,r2
 803b230:	003f1b06 	br	803aea0 <__umoddi3+0x1f0>
 803b234:	25adc83a 	sub	r22,r4,r22
 803b238:	1d07c83a 	sub	r3,r3,r20
 803b23c:	2589803a 	cmpltu	r4,r4,r22
 803b240:	1907c83a 	sub	r3,r3,r4
 803b244:	88c7c83a 	sub	r3,r17,r3
 803b248:	003fc006 	br	803b14c <__umoddi3+0x49c>
 803b24c:	00c00204 	movi	r3,8
 803b250:	1827883a 	mov	r19,r3
 803b254:	003ee906 	br	803adfc <__umoddi3+0x14c>
 803b258:	00c00604 	movi	r3,24
 803b25c:	1827883a 	mov	r19,r3
 803b260:	003ee606 	br	803adfc <__umoddi3+0x14c>
 803b264:	00800604 	movi	r2,24
 803b268:	1009883a 	mov	r4,r2
 803b26c:	003ea806 	br	803ad10 <__umoddi3+0x60>
 803b270:	00800204 	movi	r2,8
 803b274:	1007883a 	mov	r3,r2
 803b278:	003efd06 	br	803ae70 <__umoddi3+0x1c0>
 803b27c:	00800604 	movi	r2,24
 803b280:	1007883a 	mov	r3,r2
 803b284:	003efa06 	br	803ae70 <__umoddi3+0x1c0>
 803b288:	00800204 	movi	r2,8
 803b28c:	1009883a 	mov	r4,r2
 803b290:	003e9f06 	br	803ad10 <__umoddi3+0x60>
 803b294:	38bf7f2e 	bgeu	r7,r2,803b094 <__umoddi3+0x3e4>
 803b298:	ad7fff84 	addi	r21,r21,-2
 803b29c:	3d0f883a 	add	r7,r7,r20
 803b2a0:	003f7d06 	br	803b098 <__umoddi3+0x3e8>
 803b2a4:	193f642e 	bgeu	r3,r4,803b038 <__umoddi3+0x388>
 803b2a8:	e73fff84 	addi	fp,fp,-2
 803b2ac:	1d07883a 	add	r3,r3,r20
 803b2b0:	003f6206 	br	803b03c <__umoddi3+0x38c>
 803b2b4:	1c07883a 	add	r3,r3,r16
 803b2b8:	003f0b06 	br	803aee8 <__umoddi3+0x238>
 803b2bc:	9005883a 	mov	r2,r18
 803b2c0:	a007883a 	mov	r3,r20
 803b2c4:	003f2106 	br	803af4c <__umoddi3+0x29c>
 803b2c8:	913fda36 	bltu	r18,r4,803b234 <__umoddi3+0x584>
 803b2cc:	202d883a 	mov	r22,r4
 803b2d0:	0007883a 	mov	r3,zero
 803b2d4:	003f9d06 	br	803b14c <__umoddi3+0x49c>

0803b2d8 <__eqsf2>:
 803b2d8:	defff504 	addi	sp,sp,-44
 803b2dc:	d9000915 	stw	r4,36(sp)
 803b2e0:	d9400815 	stw	r5,32(sp)
 803b2e4:	d9000904 	addi	r4,sp,36
 803b2e8:	d9400404 	addi	r5,sp,16
 803b2ec:	dfc00a15 	stw	ra,40(sp)
 803b2f0:	802c5280 	call	802c528 <__unpack_f>
 803b2f4:	d9000804 	addi	r4,sp,32
 803b2f8:	d80b883a 	mov	r5,sp
 803b2fc:	802c5280 	call	802c528 <__unpack_f>
 803b300:	d8c00417 	ldw	r3,16(sp)
 803b304:	00800044 	movi	r2,1
 803b308:	10c0052e 	bgeu	r2,r3,803b320 <__eqsf2+0x48>
 803b30c:	d8c00017 	ldw	r3,0(sp)
 803b310:	10c0032e 	bgeu	r2,r3,803b320 <__eqsf2+0x48>
 803b314:	d9000404 	addi	r4,sp,16
 803b318:	d80b883a 	mov	r5,sp
 803b31c:	803bbc40 	call	803bbc4 <__fpcmp_parts_f>
 803b320:	dfc00a17 	ldw	ra,40(sp)
 803b324:	dec00b04 	addi	sp,sp,44
 803b328:	f800283a 	ret

0803b32c <__gtsf2>:
 803b32c:	defff504 	addi	sp,sp,-44
 803b330:	d9000915 	stw	r4,36(sp)
 803b334:	d9400815 	stw	r5,32(sp)
 803b338:	d9000904 	addi	r4,sp,36
 803b33c:	d9400404 	addi	r5,sp,16
 803b340:	dfc00a15 	stw	ra,40(sp)
 803b344:	802c5280 	call	802c528 <__unpack_f>
 803b348:	d9000804 	addi	r4,sp,32
 803b34c:	d80b883a 	mov	r5,sp
 803b350:	802c5280 	call	802c528 <__unpack_f>
 803b354:	d8c00417 	ldw	r3,16(sp)
 803b358:	00800044 	movi	r2,1
 803b35c:	10c0082e 	bgeu	r2,r3,803b380 <__gtsf2+0x54>
 803b360:	d8c00017 	ldw	r3,0(sp)
 803b364:	10c0062e 	bgeu	r2,r3,803b380 <__gtsf2+0x54>
 803b368:	d9000404 	addi	r4,sp,16
 803b36c:	d80b883a 	mov	r5,sp
 803b370:	803bbc40 	call	803bbc4 <__fpcmp_parts_f>
 803b374:	dfc00a17 	ldw	ra,40(sp)
 803b378:	dec00b04 	addi	sp,sp,44
 803b37c:	f800283a 	ret
 803b380:	00bfffc4 	movi	r2,-1
 803b384:	003ffb06 	br	803b374 <__gtsf2+0x48>

0803b388 <__ltsf2>:
 803b388:	defff504 	addi	sp,sp,-44
 803b38c:	d9000915 	stw	r4,36(sp)
 803b390:	d9400815 	stw	r5,32(sp)
 803b394:	d9000904 	addi	r4,sp,36
 803b398:	d9400404 	addi	r5,sp,16
 803b39c:	dfc00a15 	stw	ra,40(sp)
 803b3a0:	802c5280 	call	802c528 <__unpack_f>
 803b3a4:	d9000804 	addi	r4,sp,32
 803b3a8:	d80b883a 	mov	r5,sp
 803b3ac:	802c5280 	call	802c528 <__unpack_f>
 803b3b0:	d8c00417 	ldw	r3,16(sp)
 803b3b4:	00800044 	movi	r2,1
 803b3b8:	10c0052e 	bgeu	r2,r3,803b3d0 <__ltsf2+0x48>
 803b3bc:	d8c00017 	ldw	r3,0(sp)
 803b3c0:	10c0032e 	bgeu	r2,r3,803b3d0 <__ltsf2+0x48>
 803b3c4:	d9000404 	addi	r4,sp,16
 803b3c8:	d80b883a 	mov	r5,sp
 803b3cc:	803bbc40 	call	803bbc4 <__fpcmp_parts_f>
 803b3d0:	dfc00a17 	ldw	ra,40(sp)
 803b3d4:	dec00b04 	addi	sp,sp,44
 803b3d8:	f800283a 	ret

0803b3dc <_fpadd_parts>:
 803b3dc:	2005883a 	mov	r2,r4
 803b3e0:	21000017 	ldw	r4,0(r4)
 803b3e4:	01c00044 	movi	r7,1
 803b3e8:	3900622e 	bgeu	r7,r4,803b574 <_fpadd_parts+0x198>
 803b3ec:	28c00017 	ldw	r3,0(r5)
 803b3f0:	38c05f2e 	bgeu	r7,r3,803b570 <_fpadd_parts+0x194>
 803b3f4:	01c00104 	movi	r7,4
 803b3f8:	21c0c626 	beq	r4,r7,803b714 <_fpadd_parts+0x338>
 803b3fc:	19c05c26 	beq	r3,r7,803b570 <_fpadd_parts+0x194>
 803b400:	01c00084 	movi	r7,2
 803b404:	19c06b26 	beq	r3,r7,803b5b4 <_fpadd_parts+0x1d8>
 803b408:	21c05926 	beq	r4,r7,803b570 <_fpadd_parts+0x194>
 803b40c:	11c00217 	ldw	r7,8(r2)
 803b410:	2ac00217 	ldw	r11,8(r5)
 803b414:	13000317 	ldw	r12,12(r2)
 803b418:	13400417 	ldw	r13,16(r2)
 803b41c:	3ac9c83a 	sub	r4,r7,r11
 803b420:	2a000317 	ldw	r8,12(r5)
 803b424:	2a400417 	ldw	r9,16(r5)
 803b428:	2015883a 	mov	r10,r4
 803b42c:	20007516 	blt	r4,zero,803b604 <_fpadd_parts+0x228>
 803b430:	00c00fc4 	movi	r3,63
 803b434:	1a805016 	blt	r3,r10,803b578 <_fpadd_parts+0x19c>
 803b438:	0100870e 	bge	zero,r4,803b658 <_fpadd_parts+0x27c>
 803b43c:	50fff804 	addi	r3,r10,-32
 803b440:	18009916 	blt	r3,zero,803b6a8 <_fpadd_parts+0x2cc>
 803b444:	48d6d83a 	srl	r11,r9,r3
 803b448:	001d883a 	mov	r14,zero
 803b44c:	18009e16 	blt	r3,zero,803b6c8 <_fpadd_parts+0x2ec>
 803b450:	01000044 	movi	r4,1
 803b454:	20c6983a 	sll	r3,r4,r3
 803b458:	0015883a 	mov	r10,zero
 803b45c:	513fffc4 	addi	r4,r10,-1
 803b460:	2295403a 	cmpgeu	r10,r4,r10
 803b464:	1a87c83a 	sub	r3,r3,r10
 803b468:	1a52703a 	and	r9,r3,r9
 803b46c:	2210703a 	and	r8,r4,r8
 803b470:	4250b03a 	or	r8,r8,r9
 803b474:	4010c03a 	cmpne	r8,r8,zero
 803b478:	42d0b03a 	or	r8,r8,r11
 803b47c:	7013883a 	mov	r9,r14
 803b480:	11000117 	ldw	r4,4(r2)
 803b484:	28800117 	ldw	r2,4(r5)
 803b488:	20804126 	beq	r4,r2,803b590 <_fpadd_parts+0x1b4>
 803b48c:	20006326 	beq	r4,zero,803b61c <_fpadd_parts+0x240>
 803b490:	4305c83a 	sub	r2,r8,r12
 803b494:	4091803a 	cmpltu	r8,r8,r2
 803b498:	4b47c83a 	sub	r3,r9,r13
 803b49c:	1a07c83a 	sub	r3,r3,r8
 803b4a0:	18006316 	blt	r3,zero,803b630 <_fpadd_parts+0x254>
 803b4a4:	30000115 	stw	zero,4(r6)
 803b4a8:	31c00215 	stw	r7,8(r6)
 803b4ac:	30800315 	stw	r2,12(r6)
 803b4b0:	30c00415 	stw	r3,16(r6)
 803b4b4:	11ffffc4 	addi	r7,r2,-1
 803b4b8:	388b403a 	cmpgeu	r5,r7,r2
 803b4bc:	194bc83a 	sub	r5,r3,r5
 803b4c0:	01040034 	movhi	r4,4096
 803b4c4:	213fffc4 	addi	r4,r4,-1
 803b4c8:	21401736 	bltu	r4,r5,803b528 <_fpadd_parts+0x14c>
 803b4cc:	29008226 	beq	r5,r4,803b6d8 <_fpadd_parts+0x2fc>
 803b4d0:	31400217 	ldw	r5,8(r6)
 803b4d4:	02840034 	movhi	r10,4096
 803b4d8:	52bfffc4 	addi	r10,r10,-1
 803b4dc:	033fff84 	movi	r12,-2
 803b4e0:	297fffc4 	addi	r5,r5,-1
 803b4e4:	00000106 	br	803b4ec <_fpadd_parts+0x110>
 803b4e8:	3a804a26 	beq	r7,r10,803b614 <_fpadd_parts+0x238>
 803b4ec:	1089883a 	add	r4,r2,r2
 803b4f0:	2091803a 	cmpltu	r8,r4,r2
 803b4f4:	18c7883a 	add	r3,r3,r3
 803b4f8:	227fffc4 	addi	r9,r4,-1
 803b4fc:	40d1883a 	add	r8,r8,r3
 803b500:	490f403a 	cmpgeu	r7,r9,r4
 803b504:	41cfc83a 	sub	r7,r8,r7
 803b508:	2817883a 	mov	r11,r5
 803b50c:	2005883a 	mov	r2,r4
 803b510:	4007883a 	mov	r3,r8
 803b514:	297fffc4 	addi	r5,r5,-1
 803b518:	51fff32e 	bgeu	r10,r7,803b4e8 <_fpadd_parts+0x10c>
 803b51c:	31000315 	stw	r4,12(r6)
 803b520:	32000415 	stw	r8,16(r6)
 803b524:	32c00215 	stw	r11,8(r6)
 803b528:	010000c4 	movi	r4,3
 803b52c:	31000015 	stw	r4,0(r6)
 803b530:	01080034 	movhi	r4,8192
 803b534:	213fffc4 	addi	r4,r4,-1
 803b538:	20c00b2e 	bgeu	r4,r3,803b568 <_fpadd_parts+0x18c>
 803b53c:	180e97fa 	slli	r7,r3,31
 803b540:	1008d07a 	srli	r4,r2,1
 803b544:	31400217 	ldw	r5,8(r6)
 803b548:	1806d07a 	srli	r3,r3,1
 803b54c:	1080004c 	andi	r2,r2,1
 803b550:	3908b03a 	or	r4,r7,r4
 803b554:	1108b03a 	or	r4,r2,r4
 803b558:	29400044 	addi	r5,r5,1
 803b55c:	31000315 	stw	r4,12(r6)
 803b560:	30c00415 	stw	r3,16(r6)
 803b564:	31400215 	stw	r5,8(r6)
 803b568:	3005883a 	mov	r2,r6
 803b56c:	f800283a 	ret
 803b570:	2805883a 	mov	r2,r5
 803b574:	f800283a 	ret
 803b578:	59c01e0e 	bge	r11,r7,803b5f4 <_fpadd_parts+0x218>
 803b57c:	11000117 	ldw	r4,4(r2)
 803b580:	28800117 	ldw	r2,4(r5)
 803b584:	0011883a 	mov	r8,zero
 803b588:	0013883a 	mov	r9,zero
 803b58c:	20bfbf1e 	bne	r4,r2,803b48c <_fpadd_parts+0xb0>
 803b590:	4305883a 	add	r2,r8,r12
 803b594:	1207803a 	cmpltu	r3,r2,r8
 803b598:	4b53883a 	add	r9,r9,r13
 803b59c:	1a47883a 	add	r3,r3,r9
 803b5a0:	31000115 	stw	r4,4(r6)
 803b5a4:	31c00215 	stw	r7,8(r6)
 803b5a8:	30800315 	stw	r2,12(r6)
 803b5ac:	30c00415 	stw	r3,16(r6)
 803b5b0:	003fdd06 	br	803b528 <_fpadd_parts+0x14c>
 803b5b4:	20ffef1e 	bne	r4,r3,803b574 <_fpadd_parts+0x198>
 803b5b8:	31000015 	stw	r4,0(r6)
 803b5bc:	10c00117 	ldw	r3,4(r2)
 803b5c0:	30c00115 	stw	r3,4(r6)
 803b5c4:	10c00217 	ldw	r3,8(r2)
 803b5c8:	11000117 	ldw	r4,4(r2)
 803b5cc:	29400117 	ldw	r5,4(r5)
 803b5d0:	30c00215 	stw	r3,8(r6)
 803b5d4:	10c00317 	ldw	r3,12(r2)
 803b5d8:	2908703a 	and	r4,r5,r4
 803b5dc:	30c00315 	stw	r3,12(r6)
 803b5e0:	10c00417 	ldw	r3,16(r2)
 803b5e4:	31000115 	stw	r4,4(r6)
 803b5e8:	3005883a 	mov	r2,r6
 803b5ec:	30c00415 	stw	r3,16(r6)
 803b5f0:	f800283a 	ret
 803b5f4:	580f883a 	mov	r7,r11
 803b5f8:	0019883a 	mov	r12,zero
 803b5fc:	001b883a 	mov	r13,zero
 803b600:	003f9f06 	br	803b480 <_fpadd_parts+0xa4>
 803b604:	0115c83a 	sub	r10,zero,r4
 803b608:	00c00fc4 	movi	r3,63
 803b60c:	1abfda16 	blt	r3,r10,803b578 <_fpadd_parts+0x19c>
 803b610:	003f8906 	br	803b438 <_fpadd_parts+0x5c>
 803b614:	627fb52e 	bgeu	r12,r9,803b4ec <_fpadd_parts+0x110>
 803b618:	003fc006 	br	803b51c <_fpadd_parts+0x140>
 803b61c:	6205c83a 	sub	r2,r12,r8
 803b620:	6099803a 	cmpltu	r12,r12,r2
 803b624:	6a47c83a 	sub	r3,r13,r9
 803b628:	1b07c83a 	sub	r3,r3,r12
 803b62c:	183f9d0e 	bge	r3,zero,803b4a4 <_fpadd_parts+0xc8>
 803b630:	0085c83a 	sub	r2,zero,r2
 803b634:	1008c03a 	cmpne	r4,r2,zero
 803b638:	00c7c83a 	sub	r3,zero,r3
 803b63c:	1907c83a 	sub	r3,r3,r4
 803b640:	01000044 	movi	r4,1
 803b644:	31000115 	stw	r4,4(r6)
 803b648:	31c00215 	stw	r7,8(r6)
 803b64c:	30800315 	stw	r2,12(r6)
 803b650:	30c00415 	stw	r3,16(r6)
 803b654:	003f9706 	br	803b4b4 <_fpadd_parts+0xd8>
 803b658:	203f8926 	beq	r4,zero,803b480 <_fpadd_parts+0xa4>
 803b65c:	50fff804 	addi	r3,r10,-32
 803b660:	3a8f883a 	add	r7,r7,r10
 803b664:	18002316 	blt	r3,zero,803b6f4 <_fpadd_parts+0x318>
 803b668:	68d6d83a 	srl	r11,r13,r3
 803b66c:	001d883a 	mov	r14,zero
 803b670:	18001c16 	blt	r3,zero,803b6e4 <_fpadd_parts+0x308>
 803b674:	01000044 	movi	r4,1
 803b678:	20c6983a 	sll	r3,r4,r3
 803b67c:	0015883a 	mov	r10,zero
 803b680:	513fffc4 	addi	r4,r10,-1
 803b684:	2295403a 	cmpgeu	r10,r4,r10
 803b688:	1a87c83a 	sub	r3,r3,r10
 803b68c:	1b5a703a 	and	r13,r3,r13
 803b690:	2318703a 	and	r12,r4,r12
 803b694:	6358b03a 	or	r12,r12,r13
 803b698:	6018c03a 	cmpne	r12,r12,zero
 803b69c:	62d8b03a 	or	r12,r12,r11
 803b6a0:	701b883a 	mov	r13,r14
 803b6a4:	003f7606 	br	803b480 <_fpadd_parts+0xa4>
 803b6a8:	4808907a 	slli	r4,r9,1
 803b6ac:	02c007c4 	movi	r11,31
 803b6b0:	5a97c83a 	sub	r11,r11,r10
 803b6b4:	22c8983a 	sll	r4,r4,r11
 803b6b8:	4296d83a 	srl	r11,r8,r10
 803b6bc:	4a9cd83a 	srl	r14,r9,r10
 803b6c0:	22d6b03a 	or	r11,r4,r11
 803b6c4:	003f6106 	br	803b44c <_fpadd_parts+0x70>
 803b6c8:	00c00044 	movi	r3,1
 803b6cc:	1a94983a 	sll	r10,r3,r10
 803b6d0:	0007883a 	mov	r3,zero
 803b6d4:	003f6106 	br	803b45c <_fpadd_parts+0x80>
 803b6d8:	013fff84 	movi	r4,-2
 803b6dc:	21ff7c2e 	bgeu	r4,r7,803b4d0 <_fpadd_parts+0xf4>
 803b6e0:	003f9106 	br	803b528 <_fpadd_parts+0x14c>
 803b6e4:	00c00044 	movi	r3,1
 803b6e8:	1a94983a 	sll	r10,r3,r10
 803b6ec:	0007883a 	mov	r3,zero
 803b6f0:	003fe306 	br	803b680 <_fpadd_parts+0x2a4>
 803b6f4:	6816907a 	slli	r11,r13,1
 803b6f8:	010007c4 	movi	r4,31
 803b6fc:	2289c83a 	sub	r4,r4,r10
 803b700:	5908983a 	sll	r4,r11,r4
 803b704:	6296d83a 	srl	r11,r12,r10
 803b708:	6a9cd83a 	srl	r14,r13,r10
 803b70c:	22d6b03a 	or	r11,r4,r11
 803b710:	003fd706 	br	803b670 <_fpadd_parts+0x294>
 803b714:	193f971e 	bne	r3,r4,803b574 <_fpadd_parts+0x198>
 803b718:	11000117 	ldw	r4,4(r2)
 803b71c:	28c00117 	ldw	r3,4(r5)
 803b720:	20ff9426 	beq	r4,r3,803b574 <_fpadd_parts+0x198>
 803b724:	00820134 	movhi	r2,2052
 803b728:	10841004 	addi	r2,r2,4160
 803b72c:	f800283a 	ret

0803b730 <__adddf3>:
 803b730:	deffec04 	addi	sp,sp,-80
 803b734:	d9001115 	stw	r4,68(sp)
 803b738:	d9401215 	stw	r5,72(sp)
 803b73c:	d9001104 	addi	r4,sp,68
 803b740:	d9400a04 	addi	r5,sp,40
 803b744:	dfc01315 	stw	ra,76(sp)
 803b748:	d9c01015 	stw	r7,64(sp)
 803b74c:	d9800f15 	stw	r6,60(sp)
 803b750:	802c8400 	call	802c840 <__unpack_d>
 803b754:	d9000f04 	addi	r4,sp,60
 803b758:	d9400504 	addi	r5,sp,20
 803b75c:	802c8400 	call	802c840 <__unpack_d>
 803b760:	d9000a04 	addi	r4,sp,40
 803b764:	d9400504 	addi	r5,sp,20
 803b768:	d80d883a 	mov	r6,sp
 803b76c:	803b3dc0 	call	803b3dc <_fpadd_parts>
 803b770:	1009883a 	mov	r4,r2
 803b774:	802c61c0 	call	802c61c <__pack_d>
 803b778:	dfc01317 	ldw	ra,76(sp)
 803b77c:	dec01404 	addi	sp,sp,80
 803b780:	f800283a 	ret

0803b784 <__subdf3>:
 803b784:	deffec04 	addi	sp,sp,-80
 803b788:	d9001115 	stw	r4,68(sp)
 803b78c:	d9401215 	stw	r5,72(sp)
 803b790:	d9001104 	addi	r4,sp,68
 803b794:	d9400a04 	addi	r5,sp,40
 803b798:	dfc01315 	stw	ra,76(sp)
 803b79c:	d9c01015 	stw	r7,64(sp)
 803b7a0:	d9800f15 	stw	r6,60(sp)
 803b7a4:	802c8400 	call	802c840 <__unpack_d>
 803b7a8:	d9000f04 	addi	r4,sp,60
 803b7ac:	d9400504 	addi	r5,sp,20
 803b7b0:	802c8400 	call	802c840 <__unpack_d>
 803b7b4:	d8800617 	ldw	r2,24(sp)
 803b7b8:	d9000a04 	addi	r4,sp,40
 803b7bc:	d9400504 	addi	r5,sp,20
 803b7c0:	d80d883a 	mov	r6,sp
 803b7c4:	1080005c 	xori	r2,r2,1
 803b7c8:	d8800615 	stw	r2,24(sp)
 803b7cc:	803b3dc0 	call	803b3dc <_fpadd_parts>
 803b7d0:	1009883a 	mov	r4,r2
 803b7d4:	802c61c0 	call	802c61c <__pack_d>
 803b7d8:	dfc01317 	ldw	ra,76(sp)
 803b7dc:	dec01404 	addi	sp,sp,80
 803b7e0:	f800283a 	ret

0803b7e4 <__eqdf2>:
 803b7e4:	defff104 	addi	sp,sp,-60
 803b7e8:	d9000c15 	stw	r4,48(sp)
 803b7ec:	d9400d15 	stw	r5,52(sp)
 803b7f0:	d9000c04 	addi	r4,sp,48
 803b7f4:	d9400504 	addi	r5,sp,20
 803b7f8:	dfc00e15 	stw	ra,56(sp)
 803b7fc:	d9800a15 	stw	r6,40(sp)
 803b800:	d9c00b15 	stw	r7,44(sp)
 803b804:	802c8400 	call	802c840 <__unpack_d>
 803b808:	d9000a04 	addi	r4,sp,40
 803b80c:	d80b883a 	mov	r5,sp
 803b810:	802c8400 	call	802c840 <__unpack_d>
 803b814:	d8c00517 	ldw	r3,20(sp)
 803b818:	00800044 	movi	r2,1
 803b81c:	10c0052e 	bgeu	r2,r3,803b834 <__eqdf2+0x50>
 803b820:	d8c00017 	ldw	r3,0(sp)
 803b824:	10c0032e 	bgeu	r2,r3,803b834 <__eqdf2+0x50>
 803b828:	d9000504 	addi	r4,sp,20
 803b82c:	d80b883a 	mov	r5,sp
 803b830:	803bc800 	call	803bc80 <__fpcmp_parts_d>
 803b834:	dfc00e17 	ldw	ra,56(sp)
 803b838:	dec00f04 	addi	sp,sp,60
 803b83c:	f800283a 	ret

0803b840 <__nedf2>:
 803b840:	defff104 	addi	sp,sp,-60
 803b844:	d9000c15 	stw	r4,48(sp)
 803b848:	d9400d15 	stw	r5,52(sp)
 803b84c:	d9000c04 	addi	r4,sp,48
 803b850:	d9400504 	addi	r5,sp,20
 803b854:	dfc00e15 	stw	ra,56(sp)
 803b858:	d9800a15 	stw	r6,40(sp)
 803b85c:	d9c00b15 	stw	r7,44(sp)
 803b860:	802c8400 	call	802c840 <__unpack_d>
 803b864:	d9000a04 	addi	r4,sp,40
 803b868:	d80b883a 	mov	r5,sp
 803b86c:	802c8400 	call	802c840 <__unpack_d>
 803b870:	d8c00517 	ldw	r3,20(sp)
 803b874:	00800044 	movi	r2,1
 803b878:	10c0052e 	bgeu	r2,r3,803b890 <__nedf2+0x50>
 803b87c:	d8c00017 	ldw	r3,0(sp)
 803b880:	10c0032e 	bgeu	r2,r3,803b890 <__nedf2+0x50>
 803b884:	d9000504 	addi	r4,sp,20
 803b888:	d80b883a 	mov	r5,sp
 803b88c:	803bc800 	call	803bc80 <__fpcmp_parts_d>
 803b890:	dfc00e17 	ldw	ra,56(sp)
 803b894:	dec00f04 	addi	sp,sp,60
 803b898:	f800283a 	ret

0803b89c <__gtdf2>:
 803b89c:	defff104 	addi	sp,sp,-60
 803b8a0:	d9000c15 	stw	r4,48(sp)
 803b8a4:	d9400d15 	stw	r5,52(sp)
 803b8a8:	d9000c04 	addi	r4,sp,48
 803b8ac:	d9400504 	addi	r5,sp,20
 803b8b0:	dfc00e15 	stw	ra,56(sp)
 803b8b4:	d9800a15 	stw	r6,40(sp)
 803b8b8:	d9c00b15 	stw	r7,44(sp)
 803b8bc:	802c8400 	call	802c840 <__unpack_d>
 803b8c0:	d9000a04 	addi	r4,sp,40
 803b8c4:	d80b883a 	mov	r5,sp
 803b8c8:	802c8400 	call	802c840 <__unpack_d>
 803b8cc:	d8c00517 	ldw	r3,20(sp)
 803b8d0:	00800044 	movi	r2,1
 803b8d4:	10c0082e 	bgeu	r2,r3,803b8f8 <__gtdf2+0x5c>
 803b8d8:	d8c00017 	ldw	r3,0(sp)
 803b8dc:	10c0062e 	bgeu	r2,r3,803b8f8 <__gtdf2+0x5c>
 803b8e0:	d9000504 	addi	r4,sp,20
 803b8e4:	d80b883a 	mov	r5,sp
 803b8e8:	803bc800 	call	803bc80 <__fpcmp_parts_d>
 803b8ec:	dfc00e17 	ldw	ra,56(sp)
 803b8f0:	dec00f04 	addi	sp,sp,60
 803b8f4:	f800283a 	ret
 803b8f8:	00bfffc4 	movi	r2,-1
 803b8fc:	003ffb06 	br	803b8ec <__gtdf2+0x50>

0803b900 <__gedf2>:
 803b900:	defff104 	addi	sp,sp,-60
 803b904:	d9000c15 	stw	r4,48(sp)
 803b908:	d9400d15 	stw	r5,52(sp)
 803b90c:	d9000c04 	addi	r4,sp,48
 803b910:	d9400504 	addi	r5,sp,20
 803b914:	dfc00e15 	stw	ra,56(sp)
 803b918:	d9800a15 	stw	r6,40(sp)
 803b91c:	d9c00b15 	stw	r7,44(sp)
 803b920:	802c8400 	call	802c840 <__unpack_d>
 803b924:	d9000a04 	addi	r4,sp,40
 803b928:	d80b883a 	mov	r5,sp
 803b92c:	802c8400 	call	802c840 <__unpack_d>
 803b930:	d8c00517 	ldw	r3,20(sp)
 803b934:	00800044 	movi	r2,1
 803b938:	10c0082e 	bgeu	r2,r3,803b95c <__gedf2+0x5c>
 803b93c:	d8c00017 	ldw	r3,0(sp)
 803b940:	10c0062e 	bgeu	r2,r3,803b95c <__gedf2+0x5c>
 803b944:	d9000504 	addi	r4,sp,20
 803b948:	d80b883a 	mov	r5,sp
 803b94c:	803bc800 	call	803bc80 <__fpcmp_parts_d>
 803b950:	dfc00e17 	ldw	ra,56(sp)
 803b954:	dec00f04 	addi	sp,sp,60
 803b958:	f800283a 	ret
 803b95c:	00bfffc4 	movi	r2,-1
 803b960:	003ffb06 	br	803b950 <__gedf2+0x50>

0803b964 <__ltdf2>:
 803b964:	defff104 	addi	sp,sp,-60
 803b968:	d9000c15 	stw	r4,48(sp)
 803b96c:	d9400d15 	stw	r5,52(sp)
 803b970:	d9000c04 	addi	r4,sp,48
 803b974:	d9400504 	addi	r5,sp,20
 803b978:	dfc00e15 	stw	ra,56(sp)
 803b97c:	d9800a15 	stw	r6,40(sp)
 803b980:	d9c00b15 	stw	r7,44(sp)
 803b984:	802c8400 	call	802c840 <__unpack_d>
 803b988:	d9000a04 	addi	r4,sp,40
 803b98c:	d80b883a 	mov	r5,sp
 803b990:	802c8400 	call	802c840 <__unpack_d>
 803b994:	d8c00517 	ldw	r3,20(sp)
 803b998:	00800044 	movi	r2,1
 803b99c:	10c0052e 	bgeu	r2,r3,803b9b4 <__ltdf2+0x50>
 803b9a0:	d8c00017 	ldw	r3,0(sp)
 803b9a4:	10c0032e 	bgeu	r2,r3,803b9b4 <__ltdf2+0x50>
 803b9a8:	d9000504 	addi	r4,sp,20
 803b9ac:	d80b883a 	mov	r5,sp
 803b9b0:	803bc800 	call	803bc80 <__fpcmp_parts_d>
 803b9b4:	dfc00e17 	ldw	ra,56(sp)
 803b9b8:	dec00f04 	addi	sp,sp,60
 803b9bc:	f800283a 	ret

0803b9c0 <__ledf2>:
 803b9c0:	defff104 	addi	sp,sp,-60
 803b9c4:	d9000c15 	stw	r4,48(sp)
 803b9c8:	d9400d15 	stw	r5,52(sp)
 803b9cc:	d9000c04 	addi	r4,sp,48
 803b9d0:	d9400504 	addi	r5,sp,20
 803b9d4:	dfc00e15 	stw	ra,56(sp)
 803b9d8:	d9800a15 	stw	r6,40(sp)
 803b9dc:	d9c00b15 	stw	r7,44(sp)
 803b9e0:	802c8400 	call	802c840 <__unpack_d>
 803b9e4:	d9000a04 	addi	r4,sp,40
 803b9e8:	d80b883a 	mov	r5,sp
 803b9ec:	802c8400 	call	802c840 <__unpack_d>
 803b9f0:	d8c00517 	ldw	r3,20(sp)
 803b9f4:	00800044 	movi	r2,1
 803b9f8:	10c0052e 	bgeu	r2,r3,803ba10 <__ledf2+0x50>
 803b9fc:	d8c00017 	ldw	r3,0(sp)
 803ba00:	10c0032e 	bgeu	r2,r3,803ba10 <__ledf2+0x50>
 803ba04:	d9000504 	addi	r4,sp,20
 803ba08:	d80b883a 	mov	r5,sp
 803ba0c:	803bc800 	call	803bc80 <__fpcmp_parts_d>
 803ba10:	dfc00e17 	ldw	ra,56(sp)
 803ba14:	dec00f04 	addi	sp,sp,60
 803ba18:	f800283a 	ret

0803ba1c <__floatsidf>:
 803ba1c:	2004d7fa 	srli	r2,r4,31
 803ba20:	defff904 	addi	sp,sp,-28
 803ba24:	00c000c4 	movi	r3,3
 803ba28:	dfc00615 	stw	ra,24(sp)
 803ba2c:	dc000515 	stw	r16,20(sp)
 803ba30:	d8c00015 	stw	r3,0(sp)
 803ba34:	d8800115 	stw	r2,4(sp)
 803ba38:	2000081e 	bne	r4,zero,803ba5c <__floatsidf+0x40>
 803ba3c:	00800084 	movi	r2,2
 803ba40:	d8800015 	stw	r2,0(sp)
 803ba44:	d809883a 	mov	r4,sp
 803ba48:	802c61c0 	call	802c61c <__pack_d>
 803ba4c:	dfc00617 	ldw	ra,24(sp)
 803ba50:	dc000517 	ldw	r16,20(sp)
 803ba54:	dec00704 	addi	sp,sp,28
 803ba58:	f800283a 	ret
 803ba5c:	00c00f04 	movi	r3,60
 803ba60:	d8c00215 	stw	r3,8(sp)
 803ba64:	10000f1e 	bne	r2,zero,803baa4 <__floatsidf+0x88>
 803ba68:	2021883a 	mov	r16,r4
 803ba6c:	8009883a 	mov	r4,r16
 803ba70:	802c3500 	call	802c350 <__clzsi2>
 803ba74:	11000744 	addi	r4,r2,29
 803ba78:	0100110e 	bge	zero,r4,803bac0 <__floatsidf+0xa4>
 803ba7c:	10ffff44 	addi	r3,r2,-3
 803ba80:	18001216 	blt	r3,zero,803bacc <__floatsidf+0xb0>
 803ba84:	80c6983a 	sll	r3,r16,r3
 803ba88:	0009883a 	mov	r4,zero
 803ba8c:	014007c4 	movi	r5,31
 803ba90:	2885c83a 	sub	r2,r5,r2
 803ba94:	d9000315 	stw	r4,12(sp)
 803ba98:	d8c00415 	stw	r3,16(sp)
 803ba9c:	d8800215 	stw	r2,8(sp)
 803baa0:	003fe806 	br	803ba44 <__floatsidf+0x28>
 803baa4:	00a00034 	movhi	r2,32768
 803baa8:	20800e26 	beq	r4,r2,803bae4 <__floatsidf+0xc8>
 803baac:	0121c83a 	sub	r16,zero,r4
 803bab0:	8009883a 	mov	r4,r16
 803bab4:	802c3500 	call	802c350 <__clzsi2>
 803bab8:	11000744 	addi	r4,r2,29
 803babc:	013fef16 	blt	zero,r4,803ba7c <__floatsidf+0x60>
 803bac0:	dc000315 	stw	r16,12(sp)
 803bac4:	d8000415 	stw	zero,16(sp)
 803bac8:	003fde06 	br	803ba44 <__floatsidf+0x28>
 803bacc:	800ad07a 	srli	r5,r16,1
 803bad0:	00c007c4 	movi	r3,31
 803bad4:	1907c83a 	sub	r3,r3,r4
 803bad8:	28c6d83a 	srl	r3,r5,r3
 803badc:	8108983a 	sll	r4,r16,r4
 803bae0:	003fea06 	br	803ba8c <__floatsidf+0x70>
 803bae4:	0005883a 	mov	r2,zero
 803bae8:	00f07834 	movhi	r3,49632
 803baec:	003fd706 	br	803ba4c <__floatsidf+0x30>

0803baf0 <__fixdfsi>:
 803baf0:	defff804 	addi	sp,sp,-32
 803baf4:	d9000515 	stw	r4,20(sp)
 803baf8:	d9400615 	stw	r5,24(sp)
 803bafc:	d9000504 	addi	r4,sp,20
 803bb00:	d80b883a 	mov	r5,sp
 803bb04:	dfc00715 	stw	ra,28(sp)
 803bb08:	802c8400 	call	802c840 <__unpack_d>
 803bb0c:	d8800017 	ldw	r2,0(sp)
 803bb10:	00c00084 	movi	r3,2
 803bb14:	10c01c26 	beq	r2,r3,803bb88 <__fixdfsi+0x98>
 803bb18:	00c00044 	movi	r3,1
 803bb1c:	18801a2e 	bgeu	r3,r2,803bb88 <__fixdfsi+0x98>
 803bb20:	00c00104 	movi	r3,4
 803bb24:	10c01126 	beq	r2,r3,803bb6c <__fixdfsi+0x7c>
 803bb28:	d8800217 	ldw	r2,8(sp)
 803bb2c:	10001616 	blt	r2,zero,803bb88 <__fixdfsi+0x98>
 803bb30:	00c00784 	movi	r3,30
 803bb34:	18800d16 	blt	r3,r2,803bb6c <__fixdfsi+0x7c>
 803bb38:	00c00f04 	movi	r3,60
 803bb3c:	1885c83a 	sub	r2,r3,r2
 803bb40:	10fff804 	addi	r3,r2,-32
 803bb44:	d9400317 	ldw	r5,12(sp)
 803bb48:	d9000417 	ldw	r4,16(sp)
 803bb4c:	18001616 	blt	r3,zero,803bba8 <__fixdfsi+0xb8>
 803bb50:	20c4d83a 	srl	r2,r4,r3
 803bb54:	d8c00117 	ldw	r3,4(sp)
 803bb58:	18000126 	beq	r3,zero,803bb60 <__fixdfsi+0x70>
 803bb5c:	0085c83a 	sub	r2,zero,r2
 803bb60:	dfc00717 	ldw	ra,28(sp)
 803bb64:	dec00804 	addi	sp,sp,32
 803bb68:	f800283a 	ret
 803bb6c:	d8800117 	ldw	r2,4(sp)
 803bb70:	1000091e 	bne	r2,zero,803bb98 <__fixdfsi+0xa8>
 803bb74:	00a00034 	movhi	r2,32768
 803bb78:	10bfffc4 	addi	r2,r2,-1
 803bb7c:	dfc00717 	ldw	ra,28(sp)
 803bb80:	dec00804 	addi	sp,sp,32
 803bb84:	f800283a 	ret
 803bb88:	0005883a 	mov	r2,zero
 803bb8c:	dfc00717 	ldw	ra,28(sp)
 803bb90:	dec00804 	addi	sp,sp,32
 803bb94:	f800283a 	ret
 803bb98:	00a00034 	movhi	r2,32768
 803bb9c:	dfc00717 	ldw	ra,28(sp)
 803bba0:	dec00804 	addi	sp,sp,32
 803bba4:	f800283a 	ret
 803bba8:	2008907a 	slli	r4,r4,1
 803bbac:	018007c4 	movi	r6,31
 803bbb0:	308dc83a 	sub	r6,r6,r2
 803bbb4:	2188983a 	sll	r4,r4,r6
 803bbb8:	2884d83a 	srl	r2,r5,r2
 803bbbc:	2084b03a 	or	r2,r4,r2
 803bbc0:	003fe406 	br	803bb54 <__fixdfsi+0x64>

0803bbc4 <__fpcmp_parts_f>:
 803bbc4:	20c00017 	ldw	r3,0(r4)
 803bbc8:	00800044 	movi	r2,1
 803bbcc:	10c0172e 	bgeu	r2,r3,803bc2c <__fpcmp_parts_f+0x68>
 803bbd0:	29800017 	ldw	r6,0(r5)
 803bbd4:	1180152e 	bgeu	r2,r6,803bc2c <__fpcmp_parts_f+0x68>
 803bbd8:	01c00104 	movi	r7,4
 803bbdc:	19c02326 	beq	r3,r7,803bc6c <__fpcmp_parts_f+0xa8>
 803bbe0:	31c00926 	beq	r6,r7,803bc08 <__fpcmp_parts_f+0x44>
 803bbe4:	01c00084 	movi	r7,2
 803bbe8:	19c00626 	beq	r3,r7,803bc04 <__fpcmp_parts_f+0x40>
 803bbec:	31c01126 	beq	r6,r7,803bc34 <__fpcmp_parts_f+0x70>
 803bbf0:	20c00117 	ldw	r3,4(r4)
 803bbf4:	29800117 	ldw	r6,4(r5)
 803bbf8:	19801226 	beq	r3,r6,803bc44 <__fpcmp_parts_f+0x80>
 803bbfc:	1800041e 	bne	r3,zero,803bc10 <__fpcmp_parts_f+0x4c>
 803bc00:	f800283a 	ret
 803bc04:	30c01526 	beq	r6,r3,803bc5c <__fpcmp_parts_f+0x98>
 803bc08:	28800117 	ldw	r2,4(r5)
 803bc0c:	1000071e 	bne	r2,zero,803bc2c <__fpcmp_parts_f+0x68>
 803bc10:	00bfffc4 	movi	r2,-1
 803bc14:	f800283a 	ret
 803bc18:	39801216 	blt	r7,r6,803bc64 <__fpcmp_parts_f+0xa0>
 803bc1c:	21000317 	ldw	r4,12(r4)
 803bc20:	28800317 	ldw	r2,12(r5)
 803bc24:	11000c2e 	bgeu	r2,r4,803bc58 <__fpcmp_parts_f+0x94>
 803bc28:	183ff91e 	bne	r3,zero,803bc10 <__fpcmp_parts_f+0x4c>
 803bc2c:	00800044 	movi	r2,1
 803bc30:	f800283a 	ret
 803bc34:	20800117 	ldw	r2,4(r4)
 803bc38:	103ff51e 	bne	r2,zero,803bc10 <__fpcmp_parts_f+0x4c>
 803bc3c:	00800044 	movi	r2,1
 803bc40:	f800283a 	ret
 803bc44:	21c00217 	ldw	r7,8(r4)
 803bc48:	29800217 	ldw	r6,8(r5)
 803bc4c:	31fff20e 	bge	r6,r7,803bc18 <__fpcmp_parts_f+0x54>
 803bc50:	183fef1e 	bne	r3,zero,803bc10 <__fpcmp_parts_f+0x4c>
 803bc54:	f800283a 	ret
 803bc58:	20800236 	bltu	r4,r2,803bc64 <__fpcmp_parts_f+0xa0>
 803bc5c:	0005883a 	mov	r2,zero
 803bc60:	f800283a 	ret
 803bc64:	183fea26 	beq	r3,zero,803bc10 <__fpcmp_parts_f+0x4c>
 803bc68:	003ff006 	br	803bc2c <__fpcmp_parts_f+0x68>
 803bc6c:	30fff11e 	bne	r6,r3,803bc34 <__fpcmp_parts_f+0x70>
 803bc70:	28c00117 	ldw	r3,4(r5)
 803bc74:	20800117 	ldw	r2,4(r4)
 803bc78:	1885c83a 	sub	r2,r3,r2
 803bc7c:	f800283a 	ret

0803bc80 <__fpcmp_parts_d>:
 803bc80:	20c00017 	ldw	r3,0(r4)
 803bc84:	00800044 	movi	r2,1
 803bc88:	10c0142e 	bgeu	r2,r3,803bcdc <__fpcmp_parts_d+0x5c>
 803bc8c:	29800017 	ldw	r6,0(r5)
 803bc90:	1180122e 	bgeu	r2,r6,803bcdc <__fpcmp_parts_d+0x5c>
 803bc94:	01c00104 	movi	r7,4
 803bc98:	19c02826 	beq	r3,r7,803bd3c <__fpcmp_parts_d+0xbc>
 803bc9c:	31c00926 	beq	r6,r7,803bcc4 <__fpcmp_parts_d+0x44>
 803bca0:	01c00084 	movi	r7,2
 803bca4:	19c00626 	beq	r3,r7,803bcc0 <__fpcmp_parts_d+0x40>
 803bca8:	31c00a26 	beq	r6,r7,803bcd4 <__fpcmp_parts_d+0x54>
 803bcac:	20c00117 	ldw	r3,4(r4)
 803bcb0:	29800117 	ldw	r6,4(r5)
 803bcb4:	19800b26 	beq	r3,r6,803bce4 <__fpcmp_parts_d+0x64>
 803bcb8:	1800041e 	bne	r3,zero,803bccc <__fpcmp_parts_d+0x4c>
 803bcbc:	f800283a 	ret
 803bcc0:	30c01a26 	beq	r6,r3,803bd2c <__fpcmp_parts_d+0xac>
 803bcc4:	28800117 	ldw	r2,4(r5)
 803bcc8:	1000041e 	bne	r2,zero,803bcdc <__fpcmp_parts_d+0x5c>
 803bccc:	00bfffc4 	movi	r2,-1
 803bcd0:	f800283a 	ret
 803bcd4:	20800117 	ldw	r2,4(r4)
 803bcd8:	103ffc1e 	bne	r2,zero,803bccc <__fpcmp_parts_d+0x4c>
 803bcdc:	00800044 	movi	r2,1
 803bce0:	f800283a 	ret
 803bce4:	21c00217 	ldw	r7,8(r4)
 803bce8:	29800217 	ldw	r6,8(r5)
 803bcec:	31c0020e 	bge	r6,r7,803bcf8 <__fpcmp_parts_d+0x78>
 803bcf0:	183ff61e 	bne	r3,zero,803bccc <__fpcmp_parts_d+0x4c>
 803bcf4:	f800283a 	ret
 803bcf8:	39800a16 	blt	r7,r6,803bd24 <__fpcmp_parts_d+0xa4>
 803bcfc:	20800417 	ldw	r2,16(r4)
 803bd00:	29800417 	ldw	r6,16(r5)
 803bd04:	21c00317 	ldw	r7,12(r4)
 803bd08:	29000317 	ldw	r4,12(r5)
 803bd0c:	30800936 	bltu	r6,r2,803bd34 <__fpcmp_parts_d+0xb4>
 803bd10:	1180011e 	bne	r2,r6,803bd18 <__fpcmp_parts_d+0x98>
 803bd14:	21c00736 	bltu	r4,r7,803bd34 <__fpcmp_parts_d+0xb4>
 803bd18:	11800236 	bltu	r2,r6,803bd24 <__fpcmp_parts_d+0xa4>
 803bd1c:	3080031e 	bne	r6,r2,803bd2c <__fpcmp_parts_d+0xac>
 803bd20:	3900022e 	bgeu	r7,r4,803bd2c <__fpcmp_parts_d+0xac>
 803bd24:	183fe926 	beq	r3,zero,803bccc <__fpcmp_parts_d+0x4c>
 803bd28:	003fec06 	br	803bcdc <__fpcmp_parts_d+0x5c>
 803bd2c:	0005883a 	mov	r2,zero
 803bd30:	f800283a 	ret
 803bd34:	183fe926 	beq	r3,zero,803bcdc <__fpcmp_parts_d+0x5c>
 803bd38:	003fe406 	br	803bccc <__fpcmp_parts_d+0x4c>
 803bd3c:	30ffe51e 	bne	r6,r3,803bcd4 <__fpcmp_parts_d+0x54>
 803bd40:	28c00117 	ldw	r3,4(r5)
 803bd44:	20800117 	ldw	r2,4(r4)
 803bd48:	1885c83a 	sub	r2,r3,r2
 803bd4c:	f800283a 	ret

0803bd50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 803bd50:	defffe04 	addi	sp,sp,-8
 803bd54:	dfc00115 	stw	ra,4(sp)
 803bd58:	df000015 	stw	fp,0(sp)
 803bd5c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 803bd60:	00820134 	movhi	r2,2052
 803bd64:	108c4f04 	addi	r2,r2,12604
 803bd68:	10800017 	ldw	r2,0(r2)
 803bd6c:	10000526 	beq	r2,zero,803bd84 <alt_get_errno+0x34>
 803bd70:	00820134 	movhi	r2,2052
 803bd74:	108c4f04 	addi	r2,r2,12604
 803bd78:	10800017 	ldw	r2,0(r2)
 803bd7c:	103ee83a 	callr	r2
 803bd80:	00000206 	br	803bd8c <alt_get_errno+0x3c>
 803bd84:	00820134 	movhi	r2,2052
 803bd88:	10932904 	addi	r2,r2,19620
}
 803bd8c:	e037883a 	mov	sp,fp
 803bd90:	dfc00117 	ldw	ra,4(sp)
 803bd94:	df000017 	ldw	fp,0(sp)
 803bd98:	dec00204 	addi	sp,sp,8
 803bd9c:	f800283a 	ret

0803bda0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 803bda0:	defffb04 	addi	sp,sp,-20
 803bda4:	dfc00415 	stw	ra,16(sp)
 803bda8:	df000315 	stw	fp,12(sp)
 803bdac:	df000304 	addi	fp,sp,12
 803bdb0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 803bdb4:	e0bfff17 	ldw	r2,-4(fp)
 803bdb8:	10000716 	blt	r2,zero,803bdd8 <close+0x38>
 803bdbc:	e13fff17 	ldw	r4,-4(fp)
 803bdc0:	01400304 	movi	r5,12
 803bdc4:	802c2180 	call	802c218 <__mulsi3>
 803bdc8:	00c20134 	movhi	r3,2052
 803bdcc:	18c7bd04 	addi	r3,r3,7924
 803bdd0:	10c5883a 	add	r2,r2,r3
 803bdd4:	00000106 	br	803bddc <close+0x3c>
 803bdd8:	0005883a 	mov	r2,zero
 803bddc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 803bde0:	e0bffd17 	ldw	r2,-12(fp)
 803bde4:	10001826 	beq	r2,zero,803be48 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 803bde8:	e0bffd17 	ldw	r2,-12(fp)
 803bdec:	10800017 	ldw	r2,0(r2)
 803bdf0:	10800417 	ldw	r2,16(r2)
 803bdf4:	10000626 	beq	r2,zero,803be10 <close+0x70>
 803bdf8:	e0bffd17 	ldw	r2,-12(fp)
 803bdfc:	10800017 	ldw	r2,0(r2)
 803be00:	10800417 	ldw	r2,16(r2)
 803be04:	e13ffd17 	ldw	r4,-12(fp)
 803be08:	103ee83a 	callr	r2
 803be0c:	00000106 	br	803be14 <close+0x74>
 803be10:	0005883a 	mov	r2,zero
 803be14:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 803be18:	e13fff17 	ldw	r4,-4(fp)
 803be1c:	803c94c0 	call	803c94c <alt_release_fd>
    if (rval < 0)
 803be20:	e0bffe17 	ldw	r2,-8(fp)
 803be24:	1000060e 	bge	r2,zero,803be40 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 803be28:	803bd500 	call	803bd50 <alt_get_errno>
 803be2c:	e0fffe17 	ldw	r3,-8(fp)
 803be30:	00c7c83a 	sub	r3,zero,r3
 803be34:	10c00015 	stw	r3,0(r2)
      return -1;
 803be38:	00bfffc4 	movi	r2,-1
 803be3c:	00000606 	br	803be58 <close+0xb8>
    }
    return 0;
 803be40:	0005883a 	mov	r2,zero
 803be44:	00000406 	br	803be58 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 803be48:	803bd500 	call	803bd50 <alt_get_errno>
 803be4c:	00c01444 	movi	r3,81
 803be50:	10c00015 	stw	r3,0(r2)
    return -1;
 803be54:	00bfffc4 	movi	r2,-1
  }
}
 803be58:	e037883a 	mov	sp,fp
 803be5c:	dfc00117 	ldw	ra,4(sp)
 803be60:	df000017 	ldw	fp,0(sp)
 803be64:	dec00204 	addi	sp,sp,8
 803be68:	f800283a 	ret

0803be6c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 803be6c:	defffc04 	addi	sp,sp,-16
 803be70:	df000315 	stw	fp,12(sp)
 803be74:	df000304 	addi	fp,sp,12
 803be78:	e13ffd15 	stw	r4,-12(fp)
 803be7c:	e17ffe15 	stw	r5,-8(fp)
 803be80:	e1bfff15 	stw	r6,-4(fp)
  return len;
 803be84:	e0bfff17 	ldw	r2,-4(fp)
}
 803be88:	e037883a 	mov	sp,fp
 803be8c:	df000017 	ldw	fp,0(sp)
 803be90:	dec00104 	addi	sp,sp,4
 803be94:	f800283a 	ret

0803be98 <__env_lock>:
 * this requires that environment variables are never manipulated by an interrupt 
 * service routine.
 */

void __env_lock ( struct _reent *_r )
{
 803be98:	defffe04 	addi	sp,sp,-8
 803be9c:	df000115 	stw	fp,4(sp)
 803bea0:	df000104 	addi	fp,sp,4
 803bea4:	e13fff15 	stw	r4,-4(fp)
}
 803bea8:	e037883a 	mov	sp,fp
 803beac:	df000017 	ldw	fp,0(sp)
 803beb0:	dec00104 	addi	sp,sp,4
 803beb4:	f800283a 	ret

0803beb8 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
 803beb8:	defffe04 	addi	sp,sp,-8
 803bebc:	df000115 	stw	fp,4(sp)
 803bec0:	df000104 	addi	fp,sp,4
 803bec4:	e13fff15 	stw	r4,-4(fp)
}
 803bec8:	e037883a 	mov	sp,fp
 803becc:	df000017 	ldw	fp,0(sp)
 803bed0:	dec00104 	addi	sp,sp,4
 803bed4:	f800283a 	ret

0803bed8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 803bed8:	defffc04 	addi	sp,sp,-16
 803bedc:	df000315 	stw	fp,12(sp)
 803bee0:	df000304 	addi	fp,sp,12
 803bee4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 803bee8:	0001883a 	nop
 803beec:	e0bfff17 	ldw	r2,-4(fp)
 803bef0:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
 803bef4:	e0bffd17 	ldw	r2,-12(fp)
 803bef8:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 803befc:	e0bffe17 	ldw	r2,-8(fp)
 803bf00:	10000226 	beq	r2,zero,803bf0c <_exit+0x34>
    ALT_SIM_FAIL();
 803bf04:	002af070 	cmpltui	zero,zero,43969
 803bf08:	00000106 	br	803bf10 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
 803bf0c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 803bf10:	003fff06 	br	803bf10 <_exit+0x38>

0803bf14 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 803bf14:	defffe04 	addi	sp,sp,-8
 803bf18:	dfc00115 	stw	ra,4(sp)
 803bf1c:	df000015 	stw	fp,0(sp)
 803bf20:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 803bf24:	00820134 	movhi	r2,2052
 803bf28:	108c4f04 	addi	r2,r2,12604
 803bf2c:	10800017 	ldw	r2,0(r2)
 803bf30:	10000526 	beq	r2,zero,803bf48 <alt_get_errno+0x34>
 803bf34:	00820134 	movhi	r2,2052
 803bf38:	108c4f04 	addi	r2,r2,12604
 803bf3c:	10800017 	ldw	r2,0(r2)
 803bf40:	103ee83a 	callr	r2
 803bf44:	00000206 	br	803bf50 <alt_get_errno+0x3c>
 803bf48:	00820134 	movhi	r2,2052
 803bf4c:	10932904 	addi	r2,r2,19620
}
 803bf50:	e037883a 	mov	sp,fp
 803bf54:	dfc00117 	ldw	ra,4(sp)
 803bf58:	df000017 	ldw	fp,0(sp)
 803bf5c:	dec00204 	addi	sp,sp,8
 803bf60:	f800283a 	ret

0803bf64 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 803bf64:	defffb04 	addi	sp,sp,-20
 803bf68:	dfc00415 	stw	ra,16(sp)
 803bf6c:	df000315 	stw	fp,12(sp)
 803bf70:	df000304 	addi	fp,sp,12
 803bf74:	e13ffe15 	stw	r4,-8(fp)
 803bf78:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 803bf7c:	e0bffe17 	ldw	r2,-8(fp)
 803bf80:	10000716 	blt	r2,zero,803bfa0 <fstat+0x3c>
 803bf84:	e13ffe17 	ldw	r4,-8(fp)
 803bf88:	01400304 	movi	r5,12
 803bf8c:	802c2180 	call	802c218 <__mulsi3>
 803bf90:	00c20134 	movhi	r3,2052
 803bf94:	18c7bd04 	addi	r3,r3,7924
 803bf98:	10c5883a 	add	r2,r2,r3
 803bf9c:	00000106 	br	803bfa4 <fstat+0x40>
 803bfa0:	0005883a 	mov	r2,zero
 803bfa4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 803bfa8:	e0bffd17 	ldw	r2,-12(fp)
 803bfac:	10001026 	beq	r2,zero,803bff0 <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 803bfb0:	e0bffd17 	ldw	r2,-12(fp)
 803bfb4:	10800017 	ldw	r2,0(r2)
 803bfb8:	10800817 	ldw	r2,32(r2)
 803bfbc:	10000726 	beq	r2,zero,803bfdc <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
 803bfc0:	e0bffd17 	ldw	r2,-12(fp)
 803bfc4:	10800017 	ldw	r2,0(r2)
 803bfc8:	10800817 	ldw	r2,32(r2)
 803bfcc:	e13ffd17 	ldw	r4,-12(fp)
 803bfd0:	e17fff17 	ldw	r5,-4(fp)
 803bfd4:	103ee83a 	callr	r2
 803bfd8:	00000906 	br	803c000 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 803bfdc:	e0bfff17 	ldw	r2,-4(fp)
 803bfe0:	00c80004 	movi	r3,8192
 803bfe4:	10c00115 	stw	r3,4(r2)
      return 0;
 803bfe8:	0005883a 	mov	r2,zero
 803bfec:	00000406 	br	803c000 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 803bff0:	803bf140 	call	803bf14 <alt_get_errno>
 803bff4:	00c01444 	movi	r3,81
 803bff8:	10c00015 	stw	r3,0(r2)
    return -1;
 803bffc:	00bfffc4 	movi	r2,-1
  }
}
 803c000:	e037883a 	mov	sp,fp
 803c004:	dfc00117 	ldw	ra,4(sp)
 803c008:	df000017 	ldw	fp,0(sp)
 803c00c:	dec00204 	addi	sp,sp,8
 803c010:	f800283a 	ret

0803c014 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
 803c014:	deffff04 	addi	sp,sp,-4
 803c018:	df000015 	stw	fp,0(sp)
 803c01c:	d839883a 	mov	fp,sp
  return 0;
 803c020:	0005883a 	mov	r2,zero
}
 803c024:	e037883a 	mov	sp,fp
 803c028:	df000017 	ldw	fp,0(sp)
 803c02c:	dec00104 	addi	sp,sp,4
 803c030:	f800283a 	ret

0803c034 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 803c034:	defffe04 	addi	sp,sp,-8
 803c038:	dfc00115 	stw	ra,4(sp)
 803c03c:	df000015 	stw	fp,0(sp)
 803c040:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 803c044:	00820134 	movhi	r2,2052
 803c048:	108c4f04 	addi	r2,r2,12604
 803c04c:	10800017 	ldw	r2,0(r2)
 803c050:	10000526 	beq	r2,zero,803c068 <alt_get_errno+0x34>
 803c054:	00820134 	movhi	r2,2052
 803c058:	108c4f04 	addi	r2,r2,12604
 803c05c:	10800017 	ldw	r2,0(r2)
 803c060:	103ee83a 	callr	r2
 803c064:	00000206 	br	803c070 <alt_get_errno+0x3c>
 803c068:	00820134 	movhi	r2,2052
 803c06c:	10932904 	addi	r2,r2,19620
}
 803c070:	e037883a 	mov	sp,fp
 803c074:	dfc00117 	ldw	ra,4(sp)
 803c078:	df000017 	ldw	fp,0(sp)
 803c07c:	dec00204 	addi	sp,sp,8
 803c080:	f800283a 	ret

0803c084 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 803c084:	deffed04 	addi	sp,sp,-76
 803c088:	dfc01215 	stw	ra,72(sp)
 803c08c:	df001115 	stw	fp,68(sp)
 803c090:	df001104 	addi	fp,sp,68
 803c094:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 803c098:	e0bfff17 	ldw	r2,-4(fp)
 803c09c:	10000716 	blt	r2,zero,803c0bc <isatty+0x38>
 803c0a0:	e13fff17 	ldw	r4,-4(fp)
 803c0a4:	01400304 	movi	r5,12
 803c0a8:	802c2180 	call	802c218 <__mulsi3>
 803c0ac:	00c20134 	movhi	r3,2052
 803c0b0:	18c7bd04 	addi	r3,r3,7924
 803c0b4:	10c5883a 	add	r2,r2,r3
 803c0b8:	00000106 	br	803c0c0 <isatty+0x3c>
 803c0bc:	0005883a 	mov	r2,zero
 803c0c0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 803c0c4:	e0bfef17 	ldw	r2,-68(fp)
 803c0c8:	10000e26 	beq	r2,zero,803c104 <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 803c0cc:	e0bfef17 	ldw	r2,-68(fp)
 803c0d0:	10800017 	ldw	r2,0(r2)
 803c0d4:	10800817 	ldw	r2,32(r2)
 803c0d8:	1000021e 	bne	r2,zero,803c0e4 <isatty+0x60>
    {
      return 1;
 803c0dc:	00800044 	movi	r2,1
 803c0e0:	00000c06 	br	803c114 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 803c0e4:	e0bff004 	addi	r2,fp,-64
 803c0e8:	e13fff17 	ldw	r4,-4(fp)
 803c0ec:	100b883a 	mov	r5,r2
 803c0f0:	803bf640 	call	803bf64 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 803c0f4:	e0bff117 	ldw	r2,-60(fp)
 803c0f8:	10880020 	cmpeqi	r2,r2,8192
 803c0fc:	10803fcc 	andi	r2,r2,255
 803c100:	00000406 	br	803c114 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 803c104:	803c0340 	call	803c034 <alt_get_errno>
 803c108:	00c01444 	movi	r3,81
 803c10c:	10c00015 	stw	r3,0(r2)
    return 0;
 803c110:	0005883a 	mov	r2,zero
  }
}
 803c114:	e037883a 	mov	sp,fp
 803c118:	dfc00117 	ldw	ra,4(sp)
 803c11c:	df000017 	ldw	fp,0(sp)
 803c120:	dec00204 	addi	sp,sp,8
 803c124:	f800283a 	ret

0803c128 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 803c128:	defffe04 	addi	sp,sp,-8
 803c12c:	dfc00115 	stw	ra,4(sp)
 803c130:	df000015 	stw	fp,0(sp)
 803c134:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 803c138:	00820134 	movhi	r2,2052
 803c13c:	108c4f04 	addi	r2,r2,12604
 803c140:	10800017 	ldw	r2,0(r2)
 803c144:	10000526 	beq	r2,zero,803c15c <alt_get_errno+0x34>
 803c148:	00820134 	movhi	r2,2052
 803c14c:	108c4f04 	addi	r2,r2,12604
 803c150:	10800017 	ldw	r2,0(r2)
 803c154:	103ee83a 	callr	r2
 803c158:	00000206 	br	803c164 <alt_get_errno+0x3c>
 803c15c:	00820134 	movhi	r2,2052
 803c160:	10932904 	addi	r2,r2,19620
}
 803c164:	e037883a 	mov	sp,fp
 803c168:	dfc00117 	ldw	ra,4(sp)
 803c16c:	df000017 	ldw	fp,0(sp)
 803c170:	dec00204 	addi	sp,sp,8
 803c174:	f800283a 	ret

0803c178 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
 803c178:	defffb04 	addi	sp,sp,-20
 803c17c:	dfc00415 	stw	ra,16(sp)
 803c180:	df000315 	stw	fp,12(sp)
 803c184:	df000304 	addi	fp,sp,12
 803c188:	e13ffe15 	stw	r4,-8(fp)
 803c18c:	e17fff15 	stw	r5,-4(fp)
  int status = 0;
 803c190:	e03ffd15 	stw	zero,-12(fp)

  if (pid <= 0)
 803c194:	e0bffe17 	ldw	r2,-8(fp)
 803c198:	00803016 	blt	zero,r2,803c25c <kill+0xe4>
  {
    switch (sig)
 803c19c:	e0bfff17 	ldw	r2,-4(fp)
 803c1a0:	10800828 	cmpgeui	r2,r2,32
 803c1a4:	10002a1e 	bne	r2,zero,803c250 <kill+0xd8>
 803c1a8:	e0bfff17 	ldw	r2,-4(fp)
 803c1ac:	1085883a 	add	r2,r2,r2
 803c1b0:	1087883a 	add	r3,r2,r2
 803c1b4:	00820134 	movhi	r2,2052
 803c1b8:	10b07204 	addi	r2,r2,-15928
 803c1bc:	1885883a 	add	r2,r3,r2
 803c1c0:	10800017 	ldw	r2,0(r2)
 803c1c4:	1000683a 	jmp	r2
 803c1c8:	0803c270 	cmpltui	zero,at,3849
 803c1cc:	0803c250 	cmplti	zero,at,3849
 803c1d0:	0803c250 	cmplti	zero,at,3849
 803c1d4:	0803c248 	cmpgei	zero,at,3849
 803c1d8:	0803c248 	cmpgei	zero,at,3849
 803c1dc:	0803c248 	cmpgei	zero,at,3849
 803c1e0:	0803c248 	cmpgei	zero,at,3849
 803c1e4:	0803c250 	cmplti	zero,at,3849
 803c1e8:	0803c248 	cmpgei	zero,at,3849
 803c1ec:	0803c248 	cmpgei	zero,at,3849
 803c1f0:	0803c248 	cmpgei	zero,at,3849
 803c1f4:	0803c248 	cmpgei	zero,at,3849
 803c1f8:	0803c248 	cmpgei	zero,at,3849
 803c1fc:	0803c248 	cmpgei	zero,at,3849
 803c200:	0803c248 	cmpgei	zero,at,3849
 803c204:	0803c248 	cmpgei	zero,at,3849
 803c208:	0803c270 	cmpltui	zero,at,3849
 803c20c:	0803c250 	cmplti	zero,at,3849
 803c210:	0803c250 	cmplti	zero,at,3849
 803c214:	0803c250 	cmplti	zero,at,3849
 803c218:	0803c270 	cmpltui	zero,at,3849
 803c21c:	0803c250 	cmplti	zero,at,3849
 803c220:	0803c250 	cmplti	zero,at,3849
 803c224:	0803c248 	cmpgei	zero,at,3849
 803c228:	0803c248 	cmpgei	zero,at,3849
 803c22c:	0803c248 	cmpgei	zero,at,3849
 803c230:	0803c248 	cmpgei	zero,at,3849
 803c234:	0803c248 	cmpgei	zero,at,3849
 803c238:	0803c250 	cmplti	zero,at,3849
 803c23c:	0803c250 	cmplti	zero,at,3849
 803c240:	0803c248 	cmpgei	zero,at,3849
 803c244:	0803c248 	cmpgei	zero,at,3849
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
 803c248:	0009883a 	mov	r4,zero
 803c24c:	803bed80 	call	803bed8 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
 803c250:	00800584 	movi	r2,22
 803c254:	e0bffd15 	stw	r2,-12(fp)
 803c258:	00000606 	br	803c274 <kill+0xfc>
    }
  }

  else if (pid > 0)
 803c25c:	e0bffe17 	ldw	r2,-8(fp)
 803c260:	0080040e 	bge	zero,r2,803c274 <kill+0xfc>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
 803c264:	008000c4 	movi	r2,3
 803c268:	e0bffd15 	stw	r2,-12(fp)
 803c26c:	00000106 	br	803c274 <kill+0xfc>
    {
    case 0:

      /* The null signal is used to check that a pid is valid. */

      break;
 803c270:	0001883a 	nop
    /* Attempted to signal a non-existant process */

    status = ESRCH;
  }

  if (status)
 803c274:	e0bffd17 	ldw	r2,-12(fp)
 803c278:	10000526 	beq	r2,zero,803c290 <kill+0x118>
  {
    ALT_ERRNO = status;
 803c27c:	803c1280 	call	803c128 <alt_get_errno>
 803c280:	e0fffd17 	ldw	r3,-12(fp)
 803c284:	10c00015 	stw	r3,0(r2)
    return -1;
 803c288:	00bfffc4 	movi	r2,-1
 803c28c:	00000106 	br	803c294 <kill+0x11c>
  }

  return 0;
 803c290:	0005883a 	mov	r2,zero
}
 803c294:	e037883a 	mov	sp,fp
 803c298:	dfc00117 	ldw	ra,4(sp)
 803c29c:	df000017 	ldw	fp,0(sp)
 803c2a0:	dec00204 	addi	sp,sp,8
 803c2a4:	f800283a 	ret

0803c2a8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 803c2a8:	defffc04 	addi	sp,sp,-16
 803c2ac:	df000315 	stw	fp,12(sp)
 803c2b0:	df000304 	addi	fp,sp,12
 803c2b4:	e13ffd15 	stw	r4,-12(fp)
 803c2b8:	e17ffe15 	stw	r5,-8(fp)
 803c2bc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 803c2c0:	e0fffe17 	ldw	r3,-8(fp)
 803c2c4:	e0bffd17 	ldw	r2,-12(fp)
 803c2c8:	18800e26 	beq	r3,r2,803c304 <alt_load_section+0x5c>
  {
    while( to != end )
 803c2cc:	00000a06 	br	803c2f8 <alt_load_section+0x50>
    {
      *to++ = *from++;
 803c2d0:	e0bffd17 	ldw	r2,-12(fp)
 803c2d4:	10c00017 	ldw	r3,0(r2)
 803c2d8:	e0bffe17 	ldw	r2,-8(fp)
 803c2dc:	10c00015 	stw	r3,0(r2)
 803c2e0:	e0bffe17 	ldw	r2,-8(fp)
 803c2e4:	10800104 	addi	r2,r2,4
 803c2e8:	e0bffe15 	stw	r2,-8(fp)
 803c2ec:	e0bffd17 	ldw	r2,-12(fp)
 803c2f0:	10800104 	addi	r2,r2,4
 803c2f4:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 803c2f8:	e0fffe17 	ldw	r3,-8(fp)
 803c2fc:	e0bfff17 	ldw	r2,-4(fp)
 803c300:	18bff31e 	bne	r3,r2,803c2d0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 803c304:	e037883a 	mov	sp,fp
 803c308:	df000017 	ldw	fp,0(sp)
 803c30c:	dec00104 	addi	sp,sp,4
 803c310:	f800283a 	ret

0803c314 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 803c314:	defffe04 	addi	sp,sp,-8
 803c318:	dfc00115 	stw	ra,4(sp)
 803c31c:	df000015 	stw	fp,0(sp)
 803c320:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 803c324:	01020134 	movhi	r4,2052
 803c328:	210c6604 	addi	r4,r4,12696
 803c32c:	01420134 	movhi	r5,2052
 803c330:	2945a404 	addi	r5,r5,5776
 803c334:	01820134 	movhi	r6,2052
 803c338:	318c6604 	addi	r6,r6,12696
 803c33c:	803c2a80 	call	803c2a8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 803c340:	01020034 	movhi	r4,2048
 803c344:	21000804 	addi	r4,r4,32
 803c348:	01420034 	movhi	r5,2048
 803c34c:	29400804 	addi	r5,r5,32
 803c350:	01820034 	movhi	r6,2048
 803c354:	31806e04 	addi	r6,r6,440
 803c358:	803c2a80 	call	803c2a8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 803c35c:	01020134 	movhi	r4,2052
 803c360:	213b7704 	addi	r4,r4,-4644
 803c364:	01420134 	movhi	r5,2052
 803c368:	297b7704 	addi	r5,r5,-4644
 803c36c:	01820134 	movhi	r6,2052
 803c370:	3185a404 	addi	r6,r6,5776
 803c374:	803c2a80 	call	803c2a8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 803c378:	803e1640 	call	803e164 <alt_dcache_flush_all>
  alt_icache_flush_all();
 803c37c:	803e6240 	call	803e624 <alt_icache_flush_all>
}
 803c380:	e037883a 	mov	sp,fp
 803c384:	dfc00117 	ldw	ra,4(sp)
 803c388:	df000017 	ldw	fp,0(sp)
 803c38c:	dec00204 	addi	sp,sp,8
 803c390:	f800283a 	ret

0803c394 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 803c394:	defffe04 	addi	sp,sp,-8
 803c398:	dfc00115 	stw	ra,4(sp)
 803c39c:	df000015 	stw	fp,0(sp)
 803c3a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 803c3a4:	00820134 	movhi	r2,2052
 803c3a8:	108c4f04 	addi	r2,r2,12604
 803c3ac:	10800017 	ldw	r2,0(r2)
 803c3b0:	10000526 	beq	r2,zero,803c3c8 <alt_get_errno+0x34>
 803c3b4:	00820134 	movhi	r2,2052
 803c3b8:	108c4f04 	addi	r2,r2,12604
 803c3bc:	10800017 	ldw	r2,0(r2)
 803c3c0:	103ee83a 	callr	r2
 803c3c4:	00000206 	br	803c3d0 <alt_get_errno+0x3c>
 803c3c8:	00820134 	movhi	r2,2052
 803c3cc:	10932904 	addi	r2,r2,19620
}
 803c3d0:	e037883a 	mov	sp,fp
 803c3d4:	dfc00117 	ldw	ra,4(sp)
 803c3d8:	df000017 	ldw	fp,0(sp)
 803c3dc:	dec00204 	addi	sp,sp,8
 803c3e0:	f800283a 	ret

0803c3e4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 803c3e4:	defff904 	addi	sp,sp,-28
 803c3e8:	dfc00615 	stw	ra,24(sp)
 803c3ec:	df000515 	stw	fp,20(sp)
 803c3f0:	df000504 	addi	fp,sp,20
 803c3f4:	e13ffd15 	stw	r4,-12(fp)
 803c3f8:	e17ffe15 	stw	r5,-8(fp)
 803c3fc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 803c400:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 803c404:	e0bffd17 	ldw	r2,-12(fp)
 803c408:	10000716 	blt	r2,zero,803c428 <lseek+0x44>
 803c40c:	e13ffd17 	ldw	r4,-12(fp)
 803c410:	01400304 	movi	r5,12
 803c414:	802c2180 	call	802c218 <__mulsi3>
 803c418:	00c20134 	movhi	r3,2052
 803c41c:	18c7bd04 	addi	r3,r3,7924
 803c420:	10c5883a 	add	r2,r2,r3
 803c424:	00000106 	br	803c42c <lseek+0x48>
 803c428:	0005883a 	mov	r2,zero
 803c42c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 803c430:	e0bffc17 	ldw	r2,-16(fp)
 803c434:	10001026 	beq	r2,zero,803c478 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 803c438:	e0bffc17 	ldw	r2,-16(fp)
 803c43c:	10800017 	ldw	r2,0(r2)
 803c440:	10800717 	ldw	r2,28(r2)
 803c444:	10000926 	beq	r2,zero,803c46c <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 803c448:	e0bffc17 	ldw	r2,-16(fp)
 803c44c:	10800017 	ldw	r2,0(r2)
 803c450:	10800717 	ldw	r2,28(r2)
 803c454:	e13ffc17 	ldw	r4,-16(fp)
 803c458:	e17ffe17 	ldw	r5,-8(fp)
 803c45c:	e1bfff17 	ldw	r6,-4(fp)
 803c460:	103ee83a 	callr	r2
 803c464:	e0bffb15 	stw	r2,-20(fp)
 803c468:	00000506 	br	803c480 <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 803c46c:	00bfde84 	movi	r2,-134
 803c470:	e0bffb15 	stw	r2,-20(fp)
 803c474:	00000206 	br	803c480 <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
 803c478:	00bfebc4 	movi	r2,-81
 803c47c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 803c480:	e0bffb17 	ldw	r2,-20(fp)
 803c484:	1000060e 	bge	r2,zero,803c4a0 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 803c488:	803c3940 	call	803c394 <alt_get_errno>
 803c48c:	e0fffb17 	ldw	r3,-20(fp)
 803c490:	00c7c83a 	sub	r3,zero,r3
 803c494:	10c00015 	stw	r3,0(r2)
    rc = -1;
 803c498:	00bfffc4 	movi	r2,-1
 803c49c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 803c4a0:	e0bffb17 	ldw	r2,-20(fp)
}
 803c4a4:	e037883a 	mov	sp,fp
 803c4a8:	dfc00117 	ldw	ra,4(sp)
 803c4ac:	df000017 	ldw	fp,0(sp)
 803c4b0:	dec00204 	addi	sp,sp,8
 803c4b4:	f800283a 	ret

0803c4b8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 803c4b8:	defffd04 	addi	sp,sp,-12
 803c4bc:	dfc00215 	stw	ra,8(sp)
 803c4c0:	df000115 	stw	fp,4(sp)
 803c4c4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 803c4c8:	0009883a 	mov	r4,zero
 803c4cc:	803ccac0 	call	803ccac <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 803c4d0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 803c4d4:	803cce00 	call	803cce0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 803c4d8:	01020134 	movhi	r4,2052
 803c4dc:	21059904 	addi	r4,r4,5732
 803c4e0:	01420134 	movhi	r5,2052
 803c4e4:	29459904 	addi	r5,r5,5732
 803c4e8:	01820134 	movhi	r6,2052
 803c4ec:	31859904 	addi	r6,r6,5732
 803c4f0:	803e9e80 	call	803e9e8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 803c4f4:	803e2700 	call	803e270 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 803c4f8:	01020134 	movhi	r4,2052
 803c4fc:	2138b304 	addi	r4,r4,-7476
 803c500:	803ec1c0 	call	803ec1c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 803c504:	d126f217 	ldw	r4,-25656(gp)
 803c508:	d0e6f317 	ldw	r3,-25652(gp)
 803c50c:	d0a6f417 	ldw	r2,-25648(gp)
 803c510:	180b883a 	mov	r5,r3
 803c514:	100d883a 	mov	r6,r2
 803c518:	802b2780 	call	802b278 <main>
 803c51c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 803c520:	01000044 	movi	r4,1
 803c524:	803bda00 	call	803bda0 <close>
  exit (result);
 803c528:	e13fff17 	ldw	r4,-4(fp)
 803c52c:	802c9cc0 	call	802c9cc <exit>

0803c530 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 803c530:	defffe04 	addi	sp,sp,-8
 803c534:	df000115 	stw	fp,4(sp)
 803c538:	df000104 	addi	fp,sp,4
 803c53c:	e13fff15 	stw	r4,-4(fp)
}
 803c540:	e037883a 	mov	sp,fp
 803c544:	df000017 	ldw	fp,0(sp)
 803c548:	dec00104 	addi	sp,sp,4
 803c54c:	f800283a 	ret

0803c550 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 803c550:	defffe04 	addi	sp,sp,-8
 803c554:	df000115 	stw	fp,4(sp)
 803c558:	df000104 	addi	fp,sp,4
 803c55c:	e13fff15 	stw	r4,-4(fp)
}
 803c560:	e037883a 	mov	sp,fp
 803c564:	df000017 	ldw	fp,0(sp)
 803c568:	dec00104 	addi	sp,sp,4
 803c56c:	f800283a 	ret

0803c570 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 803c570:	defffe04 	addi	sp,sp,-8
 803c574:	dfc00115 	stw	ra,4(sp)
 803c578:	df000015 	stw	fp,0(sp)
 803c57c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 803c580:	00820134 	movhi	r2,2052
 803c584:	108c4f04 	addi	r2,r2,12604
 803c588:	10800017 	ldw	r2,0(r2)
 803c58c:	10000526 	beq	r2,zero,803c5a4 <alt_get_errno+0x34>
 803c590:	00820134 	movhi	r2,2052
 803c594:	108c4f04 	addi	r2,r2,12604
 803c598:	10800017 	ldw	r2,0(r2)
 803c59c:	103ee83a 	callr	r2
 803c5a0:	00000206 	br	803c5ac <alt_get_errno+0x3c>
 803c5a4:	00820134 	movhi	r2,2052
 803c5a8:	10932904 	addi	r2,r2,19620
}
 803c5ac:	e037883a 	mov	sp,fp
 803c5b0:	dfc00117 	ldw	ra,4(sp)
 803c5b4:	df000017 	ldw	fp,0(sp)
 803c5b8:	dec00204 	addi	sp,sp,8
 803c5bc:	f800283a 	ret

0803c5c0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 803c5c0:	defffb04 	addi	sp,sp,-20
 803c5c4:	dfc00415 	stw	ra,16(sp)
 803c5c8:	df000315 	stw	fp,12(sp)
 803c5cc:	dc000215 	stw	r16,8(sp)
 803c5d0:	df000204 	addi	fp,sp,8
 803c5d4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 803c5d8:	e0bfff17 	ldw	r2,-4(fp)
 803c5dc:	10800217 	ldw	r2,8(r2)
 803c5e0:	10d00034 	orhi	r3,r2,16384
 803c5e4:	e0bfff17 	ldw	r2,-4(fp)
 803c5e8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 803c5ec:	e03ffe15 	stw	zero,-8(fp)
 803c5f0:	00002206 	br	803c67c <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 803c5f4:	04020134 	movhi	r16,2052
 803c5f8:	8407bd04 	addi	r16,r16,7924
 803c5fc:	e0bffe17 	ldw	r2,-8(fp)
 803c600:	1009883a 	mov	r4,r2
 803c604:	01400304 	movi	r5,12
 803c608:	802c2180 	call	802c218 <__mulsi3>
 803c60c:	8085883a 	add	r2,r16,r2
 803c610:	10c00017 	ldw	r3,0(r2)
 803c614:	e0bfff17 	ldw	r2,-4(fp)
 803c618:	10800017 	ldw	r2,0(r2)
 803c61c:	1880141e 	bne	r3,r2,803c670 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 803c620:	04020134 	movhi	r16,2052
 803c624:	8407bd04 	addi	r16,r16,7924
 803c628:	e0bffe17 	ldw	r2,-8(fp)
 803c62c:	1009883a 	mov	r4,r2
 803c630:	01400304 	movi	r5,12
 803c634:	802c2180 	call	802c218 <__mulsi3>
 803c638:	8085883a 	add	r2,r16,r2
 803c63c:	10800204 	addi	r2,r2,8
 803c640:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 803c644:	10000a0e 	bge	r2,zero,803c670 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 803c648:	e13ffe17 	ldw	r4,-8(fp)
 803c64c:	01400304 	movi	r5,12
 803c650:	802c2180 	call	802c218 <__mulsi3>
 803c654:	00c20134 	movhi	r3,2052
 803c658:	18c7bd04 	addi	r3,r3,7924
 803c65c:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 803c660:	e0bfff17 	ldw	r2,-4(fp)
 803c664:	18800226 	beq	r3,r2,803c670 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 803c668:	00bffcc4 	movi	r2,-13
 803c66c:	00000a06 	br	803c698 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 803c670:	e0bffe17 	ldw	r2,-8(fp)
 803c674:	10800044 	addi	r2,r2,1
 803c678:	e0bffe15 	stw	r2,-8(fp)
 803c67c:	00820134 	movhi	r2,2052
 803c680:	108c4e04 	addi	r2,r2,12600
 803c684:	10800017 	ldw	r2,0(r2)
 803c688:	1007883a 	mov	r3,r2
 803c68c:	e0bffe17 	ldw	r2,-8(fp)
 803c690:	18bfd82e 	bgeu	r3,r2,803c5f4 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 803c694:	0005883a 	mov	r2,zero
}
 803c698:	e037883a 	mov	sp,fp
 803c69c:	dfc00217 	ldw	ra,8(sp)
 803c6a0:	df000117 	ldw	fp,4(sp)
 803c6a4:	dc000017 	ldw	r16,0(sp)
 803c6a8:	dec00304 	addi	sp,sp,12
 803c6ac:	f800283a 	ret

0803c6b0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 803c6b0:	defff604 	addi	sp,sp,-40
 803c6b4:	dfc00915 	stw	ra,36(sp)
 803c6b8:	df000815 	stw	fp,32(sp)
 803c6bc:	df000804 	addi	fp,sp,32
 803c6c0:	e13ffd15 	stw	r4,-12(fp)
 803c6c4:	e17ffe15 	stw	r5,-8(fp)
 803c6c8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 803c6cc:	00bfffc4 	movi	r2,-1
 803c6d0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 803c6d4:	00bffb44 	movi	r2,-19
 803c6d8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 803c6dc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 803c6e0:	e13ffd17 	ldw	r4,-12(fp)
 803c6e4:	01420134 	movhi	r5,2052
 803c6e8:	294c4c04 	addi	r5,r5,12592
 803c6ec:	803e3280 	call	803e328 <alt_find_dev>
 803c6f0:	e0bff815 	stw	r2,-32(fp)
 803c6f4:	e0bff817 	ldw	r2,-32(fp)
 803c6f8:	1000051e 	bne	r2,zero,803c710 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 803c6fc:	e13ffd17 	ldw	r4,-12(fp)
 803c700:	803e3b80 	call	803e3b8 <alt_find_file>
 803c704:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 803c708:	00800044 	movi	r2,1
 803c70c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 803c710:	e0bff817 	ldw	r2,-32(fp)
 803c714:	10002a26 	beq	r2,zero,803c7c0 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 803c718:	e13ff817 	ldw	r4,-32(fp)
 803c71c:	803e5500 	call	803e550 <alt_get_fd>
 803c720:	e0bff915 	stw	r2,-28(fp)
 803c724:	e0bff917 	ldw	r2,-28(fp)
 803c728:	1000030e 	bge	r2,zero,803c738 <open+0x88>
    {
      status = index;
 803c72c:	e0bff917 	ldw	r2,-28(fp)
 803c730:	e0bffa15 	stw	r2,-24(fp)
 803c734:	00002406 	br	803c7c8 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 803c738:	e13ff917 	ldw	r4,-28(fp)
 803c73c:	01400304 	movi	r5,12
 803c740:	802c2180 	call	802c218 <__mulsi3>
 803c744:	00c20134 	movhi	r3,2052
 803c748:	18c7bd04 	addi	r3,r3,7924
 803c74c:	10c5883a 	add	r2,r2,r3
 803c750:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 803c754:	e0fffe17 	ldw	r3,-8(fp)
 803c758:	00900034 	movhi	r2,16384
 803c75c:	10bfffc4 	addi	r2,r2,-1
 803c760:	1886703a 	and	r3,r3,r2
 803c764:	e0bffc17 	ldw	r2,-16(fp)
 803c768:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 803c76c:	e0bffb17 	ldw	r2,-20(fp)
 803c770:	1000051e 	bne	r2,zero,803c788 <open+0xd8>
 803c774:	e13ffc17 	ldw	r4,-16(fp)
 803c778:	803c5c00 	call	803c5c0 <alt_file_locked>
 803c77c:	e0bffa15 	stw	r2,-24(fp)
 803c780:	e0bffa17 	ldw	r2,-24(fp)
 803c784:	10001016 	blt	r2,zero,803c7c8 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 803c788:	e0bff817 	ldw	r2,-32(fp)
 803c78c:	10800317 	ldw	r2,12(r2)
 803c790:	10000826 	beq	r2,zero,803c7b4 <open+0x104>
 803c794:	e0bff817 	ldw	r2,-32(fp)
 803c798:	10800317 	ldw	r2,12(r2)
 803c79c:	e13ffc17 	ldw	r4,-16(fp)
 803c7a0:	e17ffd17 	ldw	r5,-12(fp)
 803c7a4:	e1bffe17 	ldw	r6,-8(fp)
 803c7a8:	e1ffff17 	ldw	r7,-4(fp)
 803c7ac:	103ee83a 	callr	r2
 803c7b0:	00000106 	br	803c7b8 <open+0x108>
 803c7b4:	0005883a 	mov	r2,zero
 803c7b8:	e0bffa15 	stw	r2,-24(fp)
 803c7bc:	00000206 	br	803c7c8 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 803c7c0:	00bffb44 	movi	r2,-19
 803c7c4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 803c7c8:	e0bffa17 	ldw	r2,-24(fp)
 803c7cc:	1000080e 	bge	r2,zero,803c7f0 <open+0x140>
  {
    alt_release_fd (index);  
 803c7d0:	e13ff917 	ldw	r4,-28(fp)
 803c7d4:	803c94c0 	call	803c94c <alt_release_fd>
    ALT_ERRNO = -status;
 803c7d8:	803c5700 	call	803c570 <alt_get_errno>
 803c7dc:	e0fffa17 	ldw	r3,-24(fp)
 803c7e0:	00c7c83a 	sub	r3,zero,r3
 803c7e4:	10c00015 	stw	r3,0(r2)
    return -1;
 803c7e8:	00bfffc4 	movi	r2,-1
 803c7ec:	00000106 	br	803c7f4 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
 803c7f0:	e0bff917 	ldw	r2,-28(fp)
}
 803c7f4:	e037883a 	mov	sp,fp
 803c7f8:	dfc00117 	ldw	ra,4(sp)
 803c7fc:	df000017 	ldw	fp,0(sp)
 803c800:	dec00204 	addi	sp,sp,8
 803c804:	f800283a 	ret

0803c808 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 803c808:	defffe04 	addi	sp,sp,-8
 803c80c:	dfc00115 	stw	ra,4(sp)
 803c810:	df000015 	stw	fp,0(sp)
 803c814:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 803c818:	00820134 	movhi	r2,2052
 803c81c:	108c4f04 	addi	r2,r2,12604
 803c820:	10800017 	ldw	r2,0(r2)
 803c824:	10000526 	beq	r2,zero,803c83c <alt_get_errno+0x34>
 803c828:	00820134 	movhi	r2,2052
 803c82c:	108c4f04 	addi	r2,r2,12604
 803c830:	10800017 	ldw	r2,0(r2)
 803c834:	103ee83a 	callr	r2
 803c838:	00000206 	br	803c844 <alt_get_errno+0x3c>
 803c83c:	00820134 	movhi	r2,2052
 803c840:	10932904 	addi	r2,r2,19620
}
 803c844:	e037883a 	mov	sp,fp
 803c848:	dfc00117 	ldw	ra,4(sp)
 803c84c:	df000017 	ldw	fp,0(sp)
 803c850:	dec00204 	addi	sp,sp,8
 803c854:	f800283a 	ret

0803c858 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 803c858:	defff904 	addi	sp,sp,-28
 803c85c:	dfc00615 	stw	ra,24(sp)
 803c860:	df000515 	stw	fp,20(sp)
 803c864:	df000504 	addi	fp,sp,20
 803c868:	e13ffd15 	stw	r4,-12(fp)
 803c86c:	e17ffe15 	stw	r5,-8(fp)
 803c870:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 803c874:	e0bffd17 	ldw	r2,-12(fp)
 803c878:	10000716 	blt	r2,zero,803c898 <read+0x40>
 803c87c:	e13ffd17 	ldw	r4,-12(fp)
 803c880:	01400304 	movi	r5,12
 803c884:	802c2180 	call	802c218 <__mulsi3>
 803c888:	00c20134 	movhi	r3,2052
 803c88c:	18c7bd04 	addi	r3,r3,7924
 803c890:	10c5883a 	add	r2,r2,r3
 803c894:	00000106 	br	803c89c <read+0x44>
 803c898:	0005883a 	mov	r2,zero
 803c89c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 803c8a0:	e0bffb17 	ldw	r2,-20(fp)
 803c8a4:	10002026 	beq	r2,zero,803c928 <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 803c8a8:	e0bffb17 	ldw	r2,-20(fp)
 803c8ac:	10800217 	ldw	r2,8(r2)
 803c8b0:	108000cc 	andi	r2,r2,3
 803c8b4:	10800060 	cmpeqi	r2,r2,1
 803c8b8:	1000171e 	bne	r2,zero,803c918 <read+0xc0>
        (fd->dev->read))
 803c8bc:	e0bffb17 	ldw	r2,-20(fp)
 803c8c0:	10800017 	ldw	r2,0(r2)
 803c8c4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 803c8c8:	10001326 	beq	r2,zero,803c918 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 803c8cc:	e0bffb17 	ldw	r2,-20(fp)
 803c8d0:	10800017 	ldw	r2,0(r2)
 803c8d4:	10c00517 	ldw	r3,20(r2)
 803c8d8:	e0bfff17 	ldw	r2,-4(fp)
 803c8dc:	e13ffb17 	ldw	r4,-20(fp)
 803c8e0:	e17ffe17 	ldw	r5,-8(fp)
 803c8e4:	100d883a 	mov	r6,r2
 803c8e8:	183ee83a 	callr	r3
 803c8ec:	e0bffc15 	stw	r2,-16(fp)
 803c8f0:	e0bffc17 	ldw	r2,-16(fp)
 803c8f4:	1000060e 	bge	r2,zero,803c910 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 803c8f8:	803c8080 	call	803c808 <alt_get_errno>
 803c8fc:	e0fffc17 	ldw	r3,-16(fp)
 803c900:	00c7c83a 	sub	r3,zero,r3
 803c904:	10c00015 	stw	r3,0(r2)
          return -1;
 803c908:	00bfffc4 	movi	r2,-1
 803c90c:	00000a06 	br	803c938 <read+0xe0>
        }
        return rval;
 803c910:	e0bffc17 	ldw	r2,-16(fp)
 803c914:	00000806 	br	803c938 <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 803c918:	803c8080 	call	803c808 <alt_get_errno>
 803c91c:	00c00344 	movi	r3,13
 803c920:	10c00015 	stw	r3,0(r2)
 803c924:	00000306 	br	803c934 <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 803c928:	803c8080 	call	803c808 <alt_get_errno>
 803c92c:	00c01444 	movi	r3,81
 803c930:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 803c934:	00bfffc4 	movi	r2,-1
}
 803c938:	e037883a 	mov	sp,fp
 803c93c:	dfc00117 	ldw	ra,4(sp)
 803c940:	df000017 	ldw	fp,0(sp)
 803c944:	dec00204 	addi	sp,sp,8
 803c948:	f800283a 	ret

0803c94c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 803c94c:	defffc04 	addi	sp,sp,-16
 803c950:	dfc00315 	stw	ra,12(sp)
 803c954:	df000215 	stw	fp,8(sp)
 803c958:	dc000115 	stw	r16,4(sp)
 803c95c:	df000104 	addi	fp,sp,4
 803c960:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 803c964:	e0bfff17 	ldw	r2,-4(fp)
 803c968:	108000d0 	cmplti	r2,r2,3
 803c96c:	1000111e 	bne	r2,zero,803c9b4 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 803c970:	04020134 	movhi	r16,2052
 803c974:	8407bd04 	addi	r16,r16,7924
 803c978:	e0bfff17 	ldw	r2,-4(fp)
 803c97c:	1009883a 	mov	r4,r2
 803c980:	01400304 	movi	r5,12
 803c984:	802c2180 	call	802c218 <__mulsi3>
 803c988:	8085883a 	add	r2,r16,r2
 803c98c:	10800204 	addi	r2,r2,8
 803c990:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 803c994:	04020134 	movhi	r16,2052
 803c998:	8407bd04 	addi	r16,r16,7924
 803c99c:	e0bfff17 	ldw	r2,-4(fp)
 803c9a0:	1009883a 	mov	r4,r2
 803c9a4:	01400304 	movi	r5,12
 803c9a8:	802c2180 	call	802c218 <__mulsi3>
 803c9ac:	8085883a 	add	r2,r16,r2
 803c9b0:	10000015 	stw	zero,0(r2)
  }
}
 803c9b4:	e037883a 	mov	sp,fp
 803c9b8:	dfc00217 	ldw	ra,8(sp)
 803c9bc:	df000117 	ldw	fp,4(sp)
 803c9c0:	dc000017 	ldw	r16,0(sp)
 803c9c4:	dec00304 	addi	sp,sp,12
 803c9c8:	f800283a 	ret

0803c9cc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 803c9cc:	defff904 	addi	sp,sp,-28
 803c9d0:	df000615 	stw	fp,24(sp)
 803c9d4:	df000604 	addi	fp,sp,24
 803c9d8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 803c9dc:	0005303a 	rdctl	r2,status
 803c9e0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 803c9e4:	e0fffc17 	ldw	r3,-16(fp)
 803c9e8:	00bfff84 	movi	r2,-2
 803c9ec:	1884703a 	and	r2,r3,r2
 803c9f0:	1001703a 	wrctl	status,r2
  
  return context;
 803c9f4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 803c9f8:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 803c9fc:	d0a01117 	ldw	r2,-32700(gp)
 803ca00:	10c000c4 	addi	r3,r2,3
 803ca04:	00bfff04 	movi	r2,-4
 803ca08:	1884703a 	and	r2,r3,r2
 803ca0c:	d0a01115 	stw	r2,-32700(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 803ca10:	d0e01117 	ldw	r3,-32700(gp)
 803ca14:	e0bfff17 	ldw	r2,-4(fp)
 803ca18:	1885883a 	add	r2,r3,r2
 803ca1c:	00c40034 	movhi	r3,4096
 803ca20:	18c00004 	addi	r3,r3,0
 803ca24:	1880062e 	bgeu	r3,r2,803ca40 <sbrk+0x74>
 803ca28:	e0bffa17 	ldw	r2,-24(fp)
 803ca2c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 803ca30:	e0bffd17 	ldw	r2,-12(fp)
 803ca34:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 803ca38:	00bfffc4 	movi	r2,-1
 803ca3c:	00000b06 	br	803ca6c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 803ca40:	d0a01117 	ldw	r2,-32700(gp)
 803ca44:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 803ca48:	d0e01117 	ldw	r3,-32700(gp)
 803ca4c:	e0bfff17 	ldw	r2,-4(fp)
 803ca50:	1885883a 	add	r2,r3,r2
 803ca54:	d0a01115 	stw	r2,-32700(gp)
 803ca58:	e0bffa17 	ldw	r2,-24(fp)
 803ca5c:	e0bffe15 	stw	r2,-8(fp)
 803ca60:	e0bffe17 	ldw	r2,-8(fp)
 803ca64:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 803ca68:	e0bffb17 	ldw	r2,-20(fp)
} 
 803ca6c:	e037883a 	mov	sp,fp
 803ca70:	df000017 	ldw	fp,0(sp)
 803ca74:	dec00104 	addi	sp,sp,4
 803ca78:	f800283a 	ret

0803ca7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 803ca7c:	defffe04 	addi	sp,sp,-8
 803ca80:	dfc00115 	stw	ra,4(sp)
 803ca84:	df000015 	stw	fp,0(sp)
 803ca88:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 803ca8c:	00820134 	movhi	r2,2052
 803ca90:	108c4f04 	addi	r2,r2,12604
 803ca94:	10800017 	ldw	r2,0(r2)
 803ca98:	10000526 	beq	r2,zero,803cab0 <alt_get_errno+0x34>
 803ca9c:	00820134 	movhi	r2,2052
 803caa0:	108c4f04 	addi	r2,r2,12604
 803caa4:	10800017 	ldw	r2,0(r2)
 803caa8:	103ee83a 	callr	r2
 803caac:	00000206 	br	803cab8 <alt_get_errno+0x3c>
 803cab0:	00820134 	movhi	r2,2052
 803cab4:	10932904 	addi	r2,r2,19620
}
 803cab8:	e037883a 	mov	sp,fp
 803cabc:	dfc00117 	ldw	ra,4(sp)
 803cac0:	df000017 	ldw	fp,0(sp)
 803cac4:	dec00204 	addi	sp,sp,8
 803cac8:	f800283a 	ret

0803cacc <unlink>:
 *
 * ALT_UNLINK is mapped onto the unlink() system call in alt_syscall.h
 */
 
int ALT_UNLINK (char *name)
{
 803cacc:	defffd04 	addi	sp,sp,-12
 803cad0:	dfc00215 	stw	ra,8(sp)
 803cad4:	df000115 	stw	fp,4(sp)
 803cad8:	df000104 	addi	fp,sp,4
 803cadc:	e13fff15 	stw	r4,-4(fp)
  
  ALT_STUB_WARNING(unlink);
  
  /* Indicate an error */
  
  ALT_ERRNO = ENOSYS;
 803cae0:	803ca7c0 	call	803ca7c <alt_get_errno>
 803cae4:	00c01604 	movi	r3,88
 803cae8:	10c00015 	stw	r3,0(r2)
  return -1;
 803caec:	00bfffc4 	movi	r2,-1
}
 803caf0:	e037883a 	mov	sp,fp
 803caf4:	dfc00117 	ldw	ra,4(sp)
 803caf8:	df000017 	ldw	fp,0(sp)
 803cafc:	dec00204 	addi	sp,sp,8
 803cb00:	f800283a 	ret

0803cb04 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 803cb04:	defffd04 	addi	sp,sp,-12
 803cb08:	dfc00215 	stw	ra,8(sp)
 803cb0c:	df000115 	stw	fp,4(sp)
 803cb10:	df000104 	addi	fp,sp,4
 803cb14:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 803cb18:	e13fff17 	ldw	r4,-4(fp)
 803cb1c:	803e0100 	call	803e010 <alt_busy_sleep>
}
 803cb20:	e037883a 	mov	sp,fp
 803cb24:	dfc00117 	ldw	ra,4(sp)
 803cb28:	df000017 	ldw	fp,0(sp)
 803cb2c:	dec00204 	addi	sp,sp,8
 803cb30:	f800283a 	ret

0803cb34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 803cb34:	defffe04 	addi	sp,sp,-8
 803cb38:	dfc00115 	stw	ra,4(sp)
 803cb3c:	df000015 	stw	fp,0(sp)
 803cb40:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 803cb44:	00820134 	movhi	r2,2052
 803cb48:	108c4f04 	addi	r2,r2,12604
 803cb4c:	10800017 	ldw	r2,0(r2)
 803cb50:	10000526 	beq	r2,zero,803cb68 <alt_get_errno+0x34>
 803cb54:	00820134 	movhi	r2,2052
 803cb58:	108c4f04 	addi	r2,r2,12604
 803cb5c:	10800017 	ldw	r2,0(r2)
 803cb60:	103ee83a 	callr	r2
 803cb64:	00000206 	br	803cb70 <alt_get_errno+0x3c>
 803cb68:	00820134 	movhi	r2,2052
 803cb6c:	10932904 	addi	r2,r2,19620
}
 803cb70:	e037883a 	mov	sp,fp
 803cb74:	dfc00117 	ldw	ra,4(sp)
 803cb78:	df000017 	ldw	fp,0(sp)
 803cb7c:	dec00204 	addi	sp,sp,8
 803cb80:	f800283a 	ret

0803cb84 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 803cb84:	defff904 	addi	sp,sp,-28
 803cb88:	dfc00615 	stw	ra,24(sp)
 803cb8c:	df000515 	stw	fp,20(sp)
 803cb90:	df000504 	addi	fp,sp,20
 803cb94:	e13ffd15 	stw	r4,-12(fp)
 803cb98:	e17ffe15 	stw	r5,-8(fp)
 803cb9c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 803cba0:	e0bffd17 	ldw	r2,-12(fp)
 803cba4:	10000716 	blt	r2,zero,803cbc4 <write+0x40>
 803cba8:	e13ffd17 	ldw	r4,-12(fp)
 803cbac:	01400304 	movi	r5,12
 803cbb0:	802c2180 	call	802c218 <__mulsi3>
 803cbb4:	00c20134 	movhi	r3,2052
 803cbb8:	18c7bd04 	addi	r3,r3,7924
 803cbbc:	10c5883a 	add	r2,r2,r3
 803cbc0:	00000106 	br	803cbc8 <write+0x44>
 803cbc4:	0005883a 	mov	r2,zero
 803cbc8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 803cbcc:	e0bffb17 	ldw	r2,-20(fp)
 803cbd0:	10001f26 	beq	r2,zero,803cc50 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 803cbd4:	e0bffb17 	ldw	r2,-20(fp)
 803cbd8:	10800217 	ldw	r2,8(r2)
 803cbdc:	108000cc 	andi	r2,r2,3
 803cbe0:	10001726 	beq	r2,zero,803cc40 <write+0xbc>
 803cbe4:	e0bffb17 	ldw	r2,-20(fp)
 803cbe8:	10800017 	ldw	r2,0(r2)
 803cbec:	10800617 	ldw	r2,24(r2)
 803cbf0:	10001326 	beq	r2,zero,803cc40 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 803cbf4:	e0bffb17 	ldw	r2,-20(fp)
 803cbf8:	10800017 	ldw	r2,0(r2)
 803cbfc:	10c00617 	ldw	r3,24(r2)
 803cc00:	e0bfff17 	ldw	r2,-4(fp)
 803cc04:	e13ffb17 	ldw	r4,-20(fp)
 803cc08:	e17ffe17 	ldw	r5,-8(fp)
 803cc0c:	100d883a 	mov	r6,r2
 803cc10:	183ee83a 	callr	r3
 803cc14:	e0bffc15 	stw	r2,-16(fp)
 803cc18:	e0bffc17 	ldw	r2,-16(fp)
 803cc1c:	1000060e 	bge	r2,zero,803cc38 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 803cc20:	803cb340 	call	803cb34 <alt_get_errno>
 803cc24:	e0fffc17 	ldw	r3,-16(fp)
 803cc28:	00c7c83a 	sub	r3,zero,r3
 803cc2c:	10c00015 	stw	r3,0(r2)
        return -1;
 803cc30:	00bfffc4 	movi	r2,-1
 803cc34:	00000a06 	br	803cc60 <write+0xdc>
      }
      return rval;
 803cc38:	e0bffc17 	ldw	r2,-16(fp)
 803cc3c:	00000806 	br	803cc60 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
 803cc40:	803cb340 	call	803cb34 <alt_get_errno>
 803cc44:	00c00344 	movi	r3,13
 803cc48:	10c00015 	stw	r3,0(r2)
 803cc4c:	00000306 	br	803cc5c <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 803cc50:	803cb340 	call	803cb34 <alt_get_errno>
 803cc54:	00c01444 	movi	r3,81
 803cc58:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 803cc5c:	00bfffc4 	movi	r2,-1
}
 803cc60:	e037883a 	mov	sp,fp
 803cc64:	dfc00117 	ldw	ra,4(sp)
 803cc68:	df000017 	ldw	fp,0(sp)
 803cc6c:	dec00204 	addi	sp,sp,8
 803cc70:	f800283a 	ret

0803cc74 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 803cc74:	defffd04 	addi	sp,sp,-12
 803cc78:	dfc00215 	stw	ra,8(sp)
 803cc7c:	df000115 	stw	fp,4(sp)
 803cc80:	df000104 	addi	fp,sp,4
 803cc84:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 803cc88:	e13fff17 	ldw	r4,-4(fp)
 803cc8c:	01420134 	movhi	r5,2052
 803cc90:	294c4c04 	addi	r5,r5,12592
 803cc94:	803e1d00 	call	803e1d0 <alt_dev_llist_insert>
}
 803cc98:	e037883a 	mov	sp,fp
 803cc9c:	dfc00117 	ldw	ra,4(sp)
 803cca0:	df000017 	ldw	fp,0(sp)
 803cca4:	dec00204 	addi	sp,sp,8
 803cca8:	f800283a 	ret

0803ccac <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 803ccac:	defffd04 	addi	sp,sp,-12
 803ccb0:	dfc00215 	stw	ra,8(sp)
 803ccb4:	df000115 	stw	fp,4(sp)
 803ccb8:	df000104 	addi	fp,sp,4
 803ccbc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
 803ccc0:	803ebfc0 	call	803ebfc <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 803ccc4:	00800044 	movi	r2,1
 803ccc8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 803cccc:	e037883a 	mov	sp,fp
 803ccd0:	dfc00117 	ldw	ra,4(sp)
 803ccd4:	df000017 	ldw	fp,0(sp)
 803ccd8:	dec00204 	addi	sp,sp,8
 803ccdc:	f800283a 	ret

0803cce0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 803cce0:	defffe04 	addi	sp,sp,-8
 803cce4:	dfc00115 	stw	ra,4(sp)
 803cce8:	df000015 	stw	fp,0(sp)
 803ccec:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
 803ccf0:	01040034 	movhi	r4,4096
 803ccf4:	000b883a 	mov	r5,zero
 803ccf8:	01800044 	movi	r6,1
 803ccfc:	01c0fa04 	movi	r7,1000
 803cd00:	803d8200 	call	803d820 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 803cd04:	01020134 	movhi	r4,2052
 803cd08:	21082704 	addi	r4,r4,8348
 803cd0c:	000b883a 	mov	r5,zero
 803cd10:	01800404 	movi	r6,16
 803cd14:	803ceac0 	call	803ceac <altera_avalon_jtag_uart_init>
 803cd18:	01020134 	movhi	r4,2052
 803cd1c:	21081d04 	addi	r4,r4,8308
 803cd20:	803cc740 	call	803cc74 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
 803cd24:	0001883a 	nop
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
 803cd28:	01020134 	movhi	r4,2052
 803cd2c:	210c3504 	addi	r4,r4,12500
 803cd30:	803e4cc0 	call	803e4cc <alt_fs_reg>
}
 803cd34:	e037883a 	mov	sp,fp
 803cd38:	dfc00117 	ldw	ra,4(sp)
 803cd3c:	df000017 	ldw	fp,0(sp)
 803cd40:	dec00204 	addi	sp,sp,8
 803cd44:	f800283a 	ret

0803cd48 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 803cd48:	defffa04 	addi	sp,sp,-24
 803cd4c:	dfc00515 	stw	ra,20(sp)
 803cd50:	df000415 	stw	fp,16(sp)
 803cd54:	df000404 	addi	fp,sp,16
 803cd58:	e13ffd15 	stw	r4,-12(fp)
 803cd5c:	e17ffe15 	stw	r5,-8(fp)
 803cd60:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 803cd64:	e0bffd17 	ldw	r2,-12(fp)
 803cd68:	10800017 	ldw	r2,0(r2)
 803cd6c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 803cd70:	e0bffc17 	ldw	r2,-16(fp)
 803cd74:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 803cd78:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 803cd7c:	10800217 	ldw	r2,8(r2)
 803cd80:	1809883a 	mov	r4,r3
 803cd84:	e17ffe17 	ldw	r5,-8(fp)
 803cd88:	e1bfff17 	ldw	r6,-4(fp)
 803cd8c:	100f883a 	mov	r7,r2
 803cd90:	803d3700 	call	803d370 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 803cd94:	e037883a 	mov	sp,fp
 803cd98:	dfc00117 	ldw	ra,4(sp)
 803cd9c:	df000017 	ldw	fp,0(sp)
 803cda0:	dec00204 	addi	sp,sp,8
 803cda4:	f800283a 	ret

0803cda8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 803cda8:	defffa04 	addi	sp,sp,-24
 803cdac:	dfc00515 	stw	ra,20(sp)
 803cdb0:	df000415 	stw	fp,16(sp)
 803cdb4:	df000404 	addi	fp,sp,16
 803cdb8:	e13ffd15 	stw	r4,-12(fp)
 803cdbc:	e17ffe15 	stw	r5,-8(fp)
 803cdc0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 803cdc4:	e0bffd17 	ldw	r2,-12(fp)
 803cdc8:	10800017 	ldw	r2,0(r2)
 803cdcc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 803cdd0:	e0bffc17 	ldw	r2,-16(fp)
 803cdd4:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 803cdd8:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 803cddc:	10800217 	ldw	r2,8(r2)
 803cde0:	1809883a 	mov	r4,r3
 803cde4:	e17ffe17 	ldw	r5,-8(fp)
 803cde8:	e1bfff17 	ldw	r6,-4(fp)
 803cdec:	100f883a 	mov	r7,r2
 803cdf0:	803d5880 	call	803d588 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 803cdf4:	e037883a 	mov	sp,fp
 803cdf8:	dfc00117 	ldw	ra,4(sp)
 803cdfc:	df000017 	ldw	fp,0(sp)
 803ce00:	dec00204 	addi	sp,sp,8
 803ce04:	f800283a 	ret

0803ce08 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 803ce08:	defffc04 	addi	sp,sp,-16
 803ce0c:	dfc00315 	stw	ra,12(sp)
 803ce10:	df000215 	stw	fp,8(sp)
 803ce14:	df000204 	addi	fp,sp,8
 803ce18:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 803ce1c:	e0bfff17 	ldw	r2,-4(fp)
 803ce20:	10800017 	ldw	r2,0(r2)
 803ce24:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 803ce28:	e0bffe17 	ldw	r2,-8(fp)
 803ce2c:	10c00a04 	addi	r3,r2,40
 803ce30:	e0bfff17 	ldw	r2,-4(fp)
 803ce34:	10800217 	ldw	r2,8(r2)
 803ce38:	1809883a 	mov	r4,r3
 803ce3c:	100b883a 	mov	r5,r2
 803ce40:	803d2140 	call	803d214 <altera_avalon_jtag_uart_close>
}
 803ce44:	e037883a 	mov	sp,fp
 803ce48:	dfc00117 	ldw	ra,4(sp)
 803ce4c:	df000017 	ldw	fp,0(sp)
 803ce50:	dec00204 	addi	sp,sp,8
 803ce54:	f800283a 	ret

0803ce58 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 803ce58:	defffa04 	addi	sp,sp,-24
 803ce5c:	dfc00515 	stw	ra,20(sp)
 803ce60:	df000415 	stw	fp,16(sp)
 803ce64:	df000404 	addi	fp,sp,16
 803ce68:	e13ffd15 	stw	r4,-12(fp)
 803ce6c:	e17ffe15 	stw	r5,-8(fp)
 803ce70:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 803ce74:	e0bffd17 	ldw	r2,-12(fp)
 803ce78:	10800017 	ldw	r2,0(r2)
 803ce7c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 803ce80:	e0bffc17 	ldw	r2,-16(fp)
 803ce84:	10800a04 	addi	r2,r2,40
 803ce88:	1009883a 	mov	r4,r2
 803ce8c:	e17ffe17 	ldw	r5,-8(fp)
 803ce90:	e1bfff17 	ldw	r6,-4(fp)
 803ce94:	803d27c0 	call	803d27c <altera_avalon_jtag_uart_ioctl>
}
 803ce98:	e037883a 	mov	sp,fp
 803ce9c:	dfc00117 	ldw	ra,4(sp)
 803cea0:	df000017 	ldw	fp,0(sp)
 803cea4:	dec00204 	addi	sp,sp,8
 803cea8:	f800283a 	ret

0803ceac <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 803ceac:	defffa04 	addi	sp,sp,-24
 803ceb0:	dfc00515 	stw	ra,20(sp)
 803ceb4:	df000415 	stw	fp,16(sp)
 803ceb8:	df000404 	addi	fp,sp,16
 803cebc:	e13ffd15 	stw	r4,-12(fp)
 803cec0:	e17ffe15 	stw	r5,-8(fp)
 803cec4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 803cec8:	e0bffd17 	ldw	r2,-12(fp)
 803cecc:	00c00044 	movi	r3,1
 803ced0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 803ced4:	e0bffd17 	ldw	r2,-12(fp)
 803ced8:	10800017 	ldw	r2,0(r2)
 803cedc:	10800104 	addi	r2,r2,4
 803cee0:	e0fffd17 	ldw	r3,-12(fp)
 803cee4:	18c00817 	ldw	r3,32(r3)
 803cee8:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 803ceec:	e0fffe17 	ldw	r3,-8(fp)
 803cef0:	e0bfff17 	ldw	r2,-4(fp)
 803cef4:	d8000015 	stw	zero,0(sp)
 803cef8:	1809883a 	mov	r4,r3
 803cefc:	100b883a 	mov	r5,r2
 803cf00:	01820134 	movhi	r6,2052
 803cf04:	31b3db04 	addi	r6,r6,-12436
 803cf08:	e1fffd17 	ldw	r7,-12(fp)
 803cf0c:	803e6400 	call	803e640 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 803cf10:	e0bffd17 	ldw	r2,-12(fp)
 803cf14:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 803cf18:	e0bffd17 	ldw	r2,-12(fp)
 803cf1c:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 803cf20:	00820134 	movhi	r2,2052
 803cf24:	10933504 	addi	r2,r2,19668
 803cf28:	10800017 	ldw	r2,0(r2)
 803cf2c:	1809883a 	mov	r4,r3
 803cf30:	100b883a 	mov	r5,r2
 803cf34:	01820134 	movhi	r6,2052
 803cf38:	31b45c04 	addi	r6,r6,-11920
 803cf3c:	e1fffd17 	ldw	r7,-12(fp)
 803cf40:	803ded00 	call	803ded0 <alt_alarm_start>
 803cf44:	1000040e 	bge	r2,zero,803cf58 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 803cf48:	e0bffd17 	ldw	r2,-12(fp)
 803cf4c:	00e00034 	movhi	r3,32768
 803cf50:	18ffffc4 	addi	r3,r3,-1
 803cf54:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 803cf58:	e037883a 	mov	sp,fp
 803cf5c:	dfc00117 	ldw	ra,4(sp)
 803cf60:	df000017 	ldw	fp,0(sp)
 803cf64:	dec00204 	addi	sp,sp,8
 803cf68:	f800283a 	ret

0803cf6c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 803cf6c:	defff804 	addi	sp,sp,-32
 803cf70:	df000715 	stw	fp,28(sp)
 803cf74:	df000704 	addi	fp,sp,28
 803cf78:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 803cf7c:	e0bfff17 	ldw	r2,-4(fp)
 803cf80:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 803cf84:	e0bffb17 	ldw	r2,-20(fp)
 803cf88:	10800017 	ldw	r2,0(r2)
 803cf8c:	e0bffc15 	stw	r2,-16(fp)
 803cf90:	00000106 	br	803cf98 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
 803cf94:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 803cf98:	e0bffc17 	ldw	r2,-16(fp)
 803cf9c:	10800104 	addi	r2,r2,4
 803cfa0:	10800037 	ldwio	r2,0(r2)
 803cfa4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 803cfa8:	e0bffd17 	ldw	r2,-12(fp)
 803cfac:	1080c00c 	andi	r2,r2,768
 803cfb0:	10006a26 	beq	r2,zero,803d15c <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 803cfb4:	e0bffd17 	ldw	r2,-12(fp)
 803cfb8:	1080400c 	andi	r2,r2,256
 803cfbc:	10003326 	beq	r2,zero,803d08c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 803cfc0:	00800074 	movhi	r2,1
 803cfc4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 803cfc8:	e0bffb17 	ldw	r2,-20(fp)
 803cfcc:	10800a17 	ldw	r2,40(r2)
 803cfd0:	10800044 	addi	r2,r2,1
 803cfd4:	1081ffcc 	andi	r2,r2,2047
 803cfd8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 803cfdc:	e0bffb17 	ldw	r2,-20(fp)
 803cfe0:	10c00b17 	ldw	r3,44(r2)
 803cfe4:	e0bffe17 	ldw	r2,-8(fp)
 803cfe8:	18801426 	beq	r3,r2,803d03c <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 803cfec:	e0bffc17 	ldw	r2,-16(fp)
 803cff0:	10800037 	ldwio	r2,0(r2)
 803cff4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 803cff8:	e0bff917 	ldw	r2,-28(fp)
 803cffc:	10a0000c 	andi	r2,r2,32768
 803d000:	10001026 	beq	r2,zero,803d044 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 803d004:	e0bffb17 	ldw	r2,-20(fp)
 803d008:	10800a17 	ldw	r2,40(r2)
 803d00c:	e0fff917 	ldw	r3,-28(fp)
 803d010:	e13ffb17 	ldw	r4,-20(fp)
 803d014:	2085883a 	add	r2,r4,r2
 803d018:	10800e04 	addi	r2,r2,56
 803d01c:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 803d020:	e0bffb17 	ldw	r2,-20(fp)
 803d024:	10800a17 	ldw	r2,40(r2)
 803d028:	10800044 	addi	r2,r2,1
 803d02c:	10c1ffcc 	andi	r3,r2,2047
 803d030:	e0bffb17 	ldw	r2,-20(fp)
 803d034:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 803d038:	003fe306 	br	803cfc8 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 803d03c:	0001883a 	nop
 803d040:	00000106 	br	803d048 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 803d044:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 803d048:	e0bff917 	ldw	r2,-28(fp)
 803d04c:	10bfffec 	andhi	r2,r2,65535
 803d050:	10000e26 	beq	r2,zero,803d08c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 803d054:	e0bffb17 	ldw	r2,-20(fp)
 803d058:	10c00817 	ldw	r3,32(r2)
 803d05c:	00bfff84 	movi	r2,-2
 803d060:	1886703a 	and	r3,r3,r2
 803d064:	e0bffb17 	ldw	r2,-20(fp)
 803d068:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 803d06c:	e0bffc17 	ldw	r2,-16(fp)
 803d070:	10800104 	addi	r2,r2,4
 803d074:	e0fffb17 	ldw	r3,-20(fp)
 803d078:	18c00817 	ldw	r3,32(r3)
 803d07c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 803d080:	e0bffc17 	ldw	r2,-16(fp)
 803d084:	10800104 	addi	r2,r2,4
 803d088:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 803d08c:	e0bffd17 	ldw	r2,-12(fp)
 803d090:	1080800c 	andi	r2,r2,512
 803d094:	103fbf26 	beq	r2,zero,803cf94 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 803d098:	e0bffd17 	ldw	r2,-12(fp)
 803d09c:	1004d43a 	srli	r2,r2,16
 803d0a0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 803d0a4:	00001406 	br	803d0f8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 803d0a8:	e0bffc17 	ldw	r2,-16(fp)
 803d0ac:	e0fffb17 	ldw	r3,-20(fp)
 803d0b0:	18c00d17 	ldw	r3,52(r3)
 803d0b4:	e13ffb17 	ldw	r4,-20(fp)
 803d0b8:	20c7883a 	add	r3,r4,r3
 803d0bc:	18c20e04 	addi	r3,r3,2104
 803d0c0:	18c00003 	ldbu	r3,0(r3)
 803d0c4:	18c03fcc 	andi	r3,r3,255
 803d0c8:	18c0201c 	xori	r3,r3,128
 803d0cc:	18ffe004 	addi	r3,r3,-128
 803d0d0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 803d0d4:	e0bffb17 	ldw	r2,-20(fp)
 803d0d8:	10800d17 	ldw	r2,52(r2)
 803d0dc:	10800044 	addi	r2,r2,1
 803d0e0:	10c1ffcc 	andi	r3,r2,2047
 803d0e4:	e0bffb17 	ldw	r2,-20(fp)
 803d0e8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 803d0ec:	e0bffa17 	ldw	r2,-24(fp)
 803d0f0:	10bfffc4 	addi	r2,r2,-1
 803d0f4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 803d0f8:	e0bffa17 	ldw	r2,-24(fp)
 803d0fc:	10000526 	beq	r2,zero,803d114 <altera_avalon_jtag_uart_irq+0x1a8>
 803d100:	e0bffb17 	ldw	r2,-20(fp)
 803d104:	10c00d17 	ldw	r3,52(r2)
 803d108:	e0bffb17 	ldw	r2,-20(fp)
 803d10c:	10800c17 	ldw	r2,48(r2)
 803d110:	18bfe51e 	bne	r3,r2,803d0a8 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 803d114:	e0bffa17 	ldw	r2,-24(fp)
 803d118:	103f9e26 	beq	r2,zero,803cf94 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 803d11c:	e0bffb17 	ldw	r2,-20(fp)
 803d120:	10c00817 	ldw	r3,32(r2)
 803d124:	00bfff44 	movi	r2,-3
 803d128:	1886703a 	and	r3,r3,r2
 803d12c:	e0bffb17 	ldw	r2,-20(fp)
 803d130:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 803d134:	e0bffb17 	ldw	r2,-20(fp)
 803d138:	10800017 	ldw	r2,0(r2)
 803d13c:	10800104 	addi	r2,r2,4
 803d140:	e0fffb17 	ldw	r3,-20(fp)
 803d144:	18c00817 	ldw	r3,32(r3)
 803d148:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 803d14c:	e0bffc17 	ldw	r2,-16(fp)
 803d150:	10800104 	addi	r2,r2,4
 803d154:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 803d158:	003f8e06 	br	803cf94 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 803d15c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 803d160:	e037883a 	mov	sp,fp
 803d164:	df000017 	ldw	fp,0(sp)
 803d168:	dec00104 	addi	sp,sp,4
 803d16c:	f800283a 	ret

0803d170 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 803d170:	defffc04 	addi	sp,sp,-16
 803d174:	df000315 	stw	fp,12(sp)
 803d178:	df000304 	addi	fp,sp,12
 803d17c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 803d180:	e0bfff17 	ldw	r2,-4(fp)
 803d184:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 803d188:	e0bffd17 	ldw	r2,-12(fp)
 803d18c:	10800017 	ldw	r2,0(r2)
 803d190:	10800104 	addi	r2,r2,4
 803d194:	10800037 	ldwio	r2,0(r2)
 803d198:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 803d19c:	e0bffe17 	ldw	r2,-8(fp)
 803d1a0:	1081000c 	andi	r2,r2,1024
 803d1a4:	10000a26 	beq	r2,zero,803d1d0 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 803d1a8:	e0bffd17 	ldw	r2,-12(fp)
 803d1ac:	10800017 	ldw	r2,0(r2)
 803d1b0:	10800104 	addi	r2,r2,4
 803d1b4:	e0fffd17 	ldw	r3,-12(fp)
 803d1b8:	18c00817 	ldw	r3,32(r3)
 803d1bc:	18c10014 	ori	r3,r3,1024
 803d1c0:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 803d1c4:	e0bffd17 	ldw	r2,-12(fp)
 803d1c8:	10000915 	stw	zero,36(r2)
 803d1cc:	00000a06 	br	803d1f8 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 803d1d0:	e0bffd17 	ldw	r2,-12(fp)
 803d1d4:	10800917 	ldw	r2,36(r2)
 803d1d8:	00e00034 	movhi	r3,32768
 803d1dc:	18ffff04 	addi	r3,r3,-4
 803d1e0:	18800536 	bltu	r3,r2,803d1f8 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
 803d1e4:	e0bffd17 	ldw	r2,-12(fp)
 803d1e8:	10800917 	ldw	r2,36(r2)
 803d1ec:	10c00044 	addi	r3,r2,1
 803d1f0:	e0bffd17 	ldw	r2,-12(fp)
 803d1f4:	10c00915 	stw	r3,36(r2)
 803d1f8:	00820134 	movhi	r2,2052
 803d1fc:	10933504 	addi	r2,r2,19668
 803d200:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 803d204:	e037883a 	mov	sp,fp
 803d208:	df000017 	ldw	fp,0(sp)
 803d20c:	dec00104 	addi	sp,sp,4
 803d210:	f800283a 	ret

0803d214 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 803d214:	defffd04 	addi	sp,sp,-12
 803d218:	df000215 	stw	fp,8(sp)
 803d21c:	df000204 	addi	fp,sp,8
 803d220:	e13ffe15 	stw	r4,-8(fp)
 803d224:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 803d228:	00000506 	br	803d240 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 803d22c:	e0bfff17 	ldw	r2,-4(fp)
 803d230:	1090000c 	andi	r2,r2,16384
 803d234:	10000226 	beq	r2,zero,803d240 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 803d238:	00bffd44 	movi	r2,-11
 803d23c:	00000b06 	br	803d26c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 803d240:	e0bffe17 	ldw	r2,-8(fp)
 803d244:	10c00d17 	ldw	r3,52(r2)
 803d248:	e0bffe17 	ldw	r2,-8(fp)
 803d24c:	10800c17 	ldw	r2,48(r2)
 803d250:	18800526 	beq	r3,r2,803d268 <altera_avalon_jtag_uart_close+0x54>
 803d254:	e0bffe17 	ldw	r2,-8(fp)
 803d258:	10c00917 	ldw	r3,36(r2)
 803d25c:	e0bffe17 	ldw	r2,-8(fp)
 803d260:	10800117 	ldw	r2,4(r2)
 803d264:	18bff136 	bltu	r3,r2,803d22c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 803d268:	0005883a 	mov	r2,zero
}
 803d26c:	e037883a 	mov	sp,fp
 803d270:	df000017 	ldw	fp,0(sp)
 803d274:	dec00104 	addi	sp,sp,4
 803d278:	f800283a 	ret

0803d27c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 803d27c:	defffa04 	addi	sp,sp,-24
 803d280:	df000515 	stw	fp,20(sp)
 803d284:	df000504 	addi	fp,sp,20
 803d288:	e13ffd15 	stw	r4,-12(fp)
 803d28c:	e17ffe15 	stw	r5,-8(fp)
 803d290:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 803d294:	00bff9c4 	movi	r2,-25
 803d298:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 803d29c:	e0bffe17 	ldw	r2,-8(fp)
 803d2a0:	10da8060 	cmpeqi	r3,r2,27137
 803d2a4:	1800031e 	bne	r3,zero,803d2b4 <altera_avalon_jtag_uart_ioctl+0x38>
 803d2a8:	109a80a0 	cmpeqi	r2,r2,27138
 803d2ac:	1000181e 	bne	r2,zero,803d310 <altera_avalon_jtag_uart_ioctl+0x94>
 803d2b0:	00002606 	br	803d34c <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 803d2b4:	e0bffd17 	ldw	r2,-12(fp)
 803d2b8:	10c00117 	ldw	r3,4(r2)
 803d2bc:	00a00034 	movhi	r2,32768
 803d2c0:	10bfffc4 	addi	r2,r2,-1
 803d2c4:	18802226 	beq	r3,r2,803d350 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
 803d2c8:	e0bfff17 	ldw	r2,-4(fp)
 803d2cc:	10800017 	ldw	r2,0(r2)
 803d2d0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 803d2d4:	e0bffc17 	ldw	r2,-16(fp)
 803d2d8:	10800090 	cmplti	r2,r2,2
 803d2dc:	1000061e 	bne	r2,zero,803d2f8 <altera_avalon_jtag_uart_ioctl+0x7c>
 803d2e0:	e0fffc17 	ldw	r3,-16(fp)
 803d2e4:	00a00034 	movhi	r2,32768
 803d2e8:	10bfffc4 	addi	r2,r2,-1
 803d2ec:	18800226 	beq	r3,r2,803d2f8 <altera_avalon_jtag_uart_ioctl+0x7c>
 803d2f0:	e0bffc17 	ldw	r2,-16(fp)
 803d2f4:	00000206 	br	803d300 <altera_avalon_jtag_uart_ioctl+0x84>
 803d2f8:	00a00034 	movhi	r2,32768
 803d2fc:	10bfff84 	addi	r2,r2,-2
 803d300:	e0fffd17 	ldw	r3,-12(fp)
 803d304:	18800115 	stw	r2,4(r3)
      rc = 0;
 803d308:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 803d30c:	00001006 	br	803d350 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 803d310:	e0bffd17 	ldw	r2,-12(fp)
 803d314:	10c00117 	ldw	r3,4(r2)
 803d318:	00a00034 	movhi	r2,32768
 803d31c:	10bfffc4 	addi	r2,r2,-1
 803d320:	18800d26 	beq	r3,r2,803d358 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 803d324:	e0bffd17 	ldw	r2,-12(fp)
 803d328:	10c00917 	ldw	r3,36(r2)
 803d32c:	e0bffd17 	ldw	r2,-12(fp)
 803d330:	10800117 	ldw	r2,4(r2)
 803d334:	1885803a 	cmpltu	r2,r3,r2
 803d338:	10c03fcc 	andi	r3,r2,255
 803d33c:	e0bfff17 	ldw	r2,-4(fp)
 803d340:	10c00015 	stw	r3,0(r2)
      rc = 0;
 803d344:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 803d348:	00000306 	br	803d358 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
 803d34c:	00000306 	br	803d35c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 803d350:	0001883a 	nop
 803d354:	00000106 	br	803d35c <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 803d358:	0001883a 	nop

  default:
    break;
  }

  return rc;
 803d35c:	e0bffb17 	ldw	r2,-20(fp)
}
 803d360:	e037883a 	mov	sp,fp
 803d364:	df000017 	ldw	fp,0(sp)
 803d368:	dec00104 	addi	sp,sp,4
 803d36c:	f800283a 	ret

0803d370 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 803d370:	defff304 	addi	sp,sp,-52
 803d374:	dfc00c15 	stw	ra,48(sp)
 803d378:	df000b15 	stw	fp,44(sp)
 803d37c:	df000b04 	addi	fp,sp,44
 803d380:	e13ffc15 	stw	r4,-16(fp)
 803d384:	e17ffd15 	stw	r5,-12(fp)
 803d388:	e1bffe15 	stw	r6,-8(fp)
 803d38c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 803d390:	e0bffd17 	ldw	r2,-12(fp)
 803d394:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 803d398:	00004706 	br	803d4b8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 803d39c:	e0bffc17 	ldw	r2,-16(fp)
 803d3a0:	10800a17 	ldw	r2,40(r2)
 803d3a4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 803d3a8:	e0bffc17 	ldw	r2,-16(fp)
 803d3ac:	10800b17 	ldw	r2,44(r2)
 803d3b0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 803d3b4:	e0fff717 	ldw	r3,-36(fp)
 803d3b8:	e0bff817 	ldw	r2,-32(fp)
 803d3bc:	18800536 	bltu	r3,r2,803d3d4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 803d3c0:	e0fff717 	ldw	r3,-36(fp)
 803d3c4:	e0bff817 	ldw	r2,-32(fp)
 803d3c8:	1885c83a 	sub	r2,r3,r2
 803d3cc:	e0bff615 	stw	r2,-40(fp)
 803d3d0:	00000406 	br	803d3e4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 803d3d4:	00c20004 	movi	r3,2048
 803d3d8:	e0bff817 	ldw	r2,-32(fp)
 803d3dc:	1885c83a 	sub	r2,r3,r2
 803d3e0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 803d3e4:	e0bff617 	ldw	r2,-40(fp)
 803d3e8:	10001e26 	beq	r2,zero,803d464 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 803d3ec:	e0fffe17 	ldw	r3,-8(fp)
 803d3f0:	e0bff617 	ldw	r2,-40(fp)
 803d3f4:	1880022e 	bgeu	r3,r2,803d400 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 803d3f8:	e0bffe17 	ldw	r2,-8(fp)
 803d3fc:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 803d400:	e0bff817 	ldw	r2,-32(fp)
 803d404:	10800e04 	addi	r2,r2,56
 803d408:	e0fffc17 	ldw	r3,-16(fp)
 803d40c:	1885883a 	add	r2,r3,r2
 803d410:	e13ff517 	ldw	r4,-44(fp)
 803d414:	100b883a 	mov	r5,r2
 803d418:	e1bff617 	ldw	r6,-40(fp)
 803d41c:	802ebb00 	call	802ebb0 <memcpy>
      ptr   += n;
 803d420:	e0fff517 	ldw	r3,-44(fp)
 803d424:	e0bff617 	ldw	r2,-40(fp)
 803d428:	1885883a 	add	r2,r3,r2
 803d42c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 803d430:	e0fffe17 	ldw	r3,-8(fp)
 803d434:	e0bff617 	ldw	r2,-40(fp)
 803d438:	1885c83a 	sub	r2,r3,r2
 803d43c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 803d440:	e0fff817 	ldw	r3,-32(fp)
 803d444:	e0bff617 	ldw	r2,-40(fp)
 803d448:	1885883a 	add	r2,r3,r2
 803d44c:	10c1ffcc 	andi	r3,r2,2047
 803d450:	e0bffc17 	ldw	r2,-16(fp)
 803d454:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 803d458:	e0bffe17 	ldw	r2,-8(fp)
 803d45c:	00bfcf16 	blt	zero,r2,803d39c <altera_avalon_jtag_uart_read+0x2c>
 803d460:	00000106 	br	803d468 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 803d464:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 803d468:	e0fff517 	ldw	r3,-44(fp)
 803d46c:	e0bffd17 	ldw	r2,-12(fp)
 803d470:	1880141e 	bne	r3,r2,803d4c4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 803d474:	e0bfff17 	ldw	r2,-4(fp)
 803d478:	1090000c 	andi	r2,r2,16384
 803d47c:	1000131e 	bne	r2,zero,803d4cc <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 803d480:	0001883a 	nop
 803d484:	e0bffc17 	ldw	r2,-16(fp)
 803d488:	10c00a17 	ldw	r3,40(r2)
 803d48c:	e0bff717 	ldw	r2,-36(fp)
 803d490:	1880051e 	bne	r3,r2,803d4a8 <altera_avalon_jtag_uart_read+0x138>
 803d494:	e0bffc17 	ldw	r2,-16(fp)
 803d498:	10c00917 	ldw	r3,36(r2)
 803d49c:	e0bffc17 	ldw	r2,-16(fp)
 803d4a0:	10800117 	ldw	r2,4(r2)
 803d4a4:	18bff736 	bltu	r3,r2,803d484 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 803d4a8:	e0bffc17 	ldw	r2,-16(fp)
 803d4ac:	10c00a17 	ldw	r3,40(r2)
 803d4b0:	e0bff717 	ldw	r2,-36(fp)
 803d4b4:	18800726 	beq	r3,r2,803d4d4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 803d4b8:	e0bffe17 	ldw	r2,-8(fp)
 803d4bc:	00bfb716 	blt	zero,r2,803d39c <altera_avalon_jtag_uart_read+0x2c>
 803d4c0:	00000506 	br	803d4d8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 803d4c4:	0001883a 	nop
 803d4c8:	00000306 	br	803d4d8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 803d4cc:	0001883a 	nop
 803d4d0:	00000106 	br	803d4d8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 803d4d4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 803d4d8:	e0fff517 	ldw	r3,-44(fp)
 803d4dc:	e0bffd17 	ldw	r2,-12(fp)
 803d4e0:	18801726 	beq	r3,r2,803d540 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 803d4e4:	0005303a 	rdctl	r2,status
 803d4e8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 803d4ec:	e0fffa17 	ldw	r3,-24(fp)
 803d4f0:	00bfff84 	movi	r2,-2
 803d4f4:	1884703a 	and	r2,r3,r2
 803d4f8:	1001703a 	wrctl	status,r2
  
  return context;
 803d4fc:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 803d500:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 803d504:	e0bffc17 	ldw	r2,-16(fp)
 803d508:	10800817 	ldw	r2,32(r2)
 803d50c:	10c00054 	ori	r3,r2,1
 803d510:	e0bffc17 	ldw	r2,-16(fp)
 803d514:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 803d518:	e0bffc17 	ldw	r2,-16(fp)
 803d51c:	10800017 	ldw	r2,0(r2)
 803d520:	10800104 	addi	r2,r2,4
 803d524:	e0fffc17 	ldw	r3,-16(fp)
 803d528:	18c00817 	ldw	r3,32(r3)
 803d52c:	10c00035 	stwio	r3,0(r2)
 803d530:	e0bff917 	ldw	r2,-28(fp)
 803d534:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 803d538:	e0bffb17 	ldw	r2,-20(fp)
 803d53c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 803d540:	e0fff517 	ldw	r3,-44(fp)
 803d544:	e0bffd17 	ldw	r2,-12(fp)
 803d548:	18800426 	beq	r3,r2,803d55c <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
 803d54c:	e0fff517 	ldw	r3,-44(fp)
 803d550:	e0bffd17 	ldw	r2,-12(fp)
 803d554:	1885c83a 	sub	r2,r3,r2
 803d558:	00000606 	br	803d574 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
 803d55c:	e0bfff17 	ldw	r2,-4(fp)
 803d560:	1090000c 	andi	r2,r2,16384
 803d564:	10000226 	beq	r2,zero,803d570 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
 803d568:	00bffd44 	movi	r2,-11
 803d56c:	00000106 	br	803d574 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
 803d570:	00bffec4 	movi	r2,-5
}
 803d574:	e037883a 	mov	sp,fp
 803d578:	dfc00117 	ldw	ra,4(sp)
 803d57c:	df000017 	ldw	fp,0(sp)
 803d580:	dec00204 	addi	sp,sp,8
 803d584:	f800283a 	ret

0803d588 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 803d588:	defff304 	addi	sp,sp,-52
 803d58c:	dfc00c15 	stw	ra,48(sp)
 803d590:	df000b15 	stw	fp,44(sp)
 803d594:	df000b04 	addi	fp,sp,44
 803d598:	e13ffc15 	stw	r4,-16(fp)
 803d59c:	e17ffd15 	stw	r5,-12(fp)
 803d5a0:	e1bffe15 	stw	r6,-8(fp)
 803d5a4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 803d5a8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 803d5ac:	e0bffd17 	ldw	r2,-12(fp)
 803d5b0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 803d5b4:	00003706 	br	803d694 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 803d5b8:	e0bffc17 	ldw	r2,-16(fp)
 803d5bc:	10800c17 	ldw	r2,48(r2)
 803d5c0:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 803d5c4:	e0bffc17 	ldw	r2,-16(fp)
 803d5c8:	10800d17 	ldw	r2,52(r2)
 803d5cc:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 803d5d0:	e0fff817 	ldw	r3,-32(fp)
 803d5d4:	e0bff517 	ldw	r2,-44(fp)
 803d5d8:	1880062e 	bgeu	r3,r2,803d5f4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 803d5dc:	e0fff517 	ldw	r3,-44(fp)
 803d5e0:	e0bff817 	ldw	r2,-32(fp)
 803d5e4:	1885c83a 	sub	r2,r3,r2
 803d5e8:	10bfffc4 	addi	r2,r2,-1
 803d5ec:	e0bff615 	stw	r2,-40(fp)
 803d5f0:	00000b06 	br	803d620 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 803d5f4:	e0bff517 	ldw	r2,-44(fp)
 803d5f8:	10000526 	beq	r2,zero,803d610 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 803d5fc:	00c20004 	movi	r3,2048
 803d600:	e0bff817 	ldw	r2,-32(fp)
 803d604:	1885c83a 	sub	r2,r3,r2
 803d608:	e0bff615 	stw	r2,-40(fp)
 803d60c:	00000406 	br	803d620 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 803d610:	00c1ffc4 	movi	r3,2047
 803d614:	e0bff817 	ldw	r2,-32(fp)
 803d618:	1885c83a 	sub	r2,r3,r2
 803d61c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 803d620:	e0bff617 	ldw	r2,-40(fp)
 803d624:	10001e26 	beq	r2,zero,803d6a0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 803d628:	e0fffe17 	ldw	r3,-8(fp)
 803d62c:	e0bff617 	ldw	r2,-40(fp)
 803d630:	1880022e 	bgeu	r3,r2,803d63c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 803d634:	e0bffe17 	ldw	r2,-8(fp)
 803d638:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 803d63c:	e0bff817 	ldw	r2,-32(fp)
 803d640:	10820e04 	addi	r2,r2,2104
 803d644:	e0fffc17 	ldw	r3,-16(fp)
 803d648:	1885883a 	add	r2,r3,r2
 803d64c:	1009883a 	mov	r4,r2
 803d650:	e17ffd17 	ldw	r5,-12(fp)
 803d654:	e1bff617 	ldw	r6,-40(fp)
 803d658:	802ebb00 	call	802ebb0 <memcpy>
      ptr   += n;
 803d65c:	e0fffd17 	ldw	r3,-12(fp)
 803d660:	e0bff617 	ldw	r2,-40(fp)
 803d664:	1885883a 	add	r2,r3,r2
 803d668:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 803d66c:	e0fffe17 	ldw	r3,-8(fp)
 803d670:	e0bff617 	ldw	r2,-40(fp)
 803d674:	1885c83a 	sub	r2,r3,r2
 803d678:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 803d67c:	e0fff817 	ldw	r3,-32(fp)
 803d680:	e0bff617 	ldw	r2,-40(fp)
 803d684:	1885883a 	add	r2,r3,r2
 803d688:	10c1ffcc 	andi	r3,r2,2047
 803d68c:	e0bffc17 	ldw	r2,-16(fp)
 803d690:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 803d694:	e0bffe17 	ldw	r2,-8(fp)
 803d698:	00bfc716 	blt	zero,r2,803d5b8 <altera_avalon_jtag_uart_write+0x30>
 803d69c:	00000106 	br	803d6a4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 803d6a0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 803d6a4:	0005303a 	rdctl	r2,status
 803d6a8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 803d6ac:	e0fffa17 	ldw	r3,-24(fp)
 803d6b0:	00bfff84 	movi	r2,-2
 803d6b4:	1884703a 	and	r2,r3,r2
 803d6b8:	1001703a 	wrctl	status,r2
  
  return context;
 803d6bc:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 803d6c0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 803d6c4:	e0bffc17 	ldw	r2,-16(fp)
 803d6c8:	10800817 	ldw	r2,32(r2)
 803d6cc:	10c00094 	ori	r3,r2,2
 803d6d0:	e0bffc17 	ldw	r2,-16(fp)
 803d6d4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 803d6d8:	e0bffc17 	ldw	r2,-16(fp)
 803d6dc:	10800017 	ldw	r2,0(r2)
 803d6e0:	10800104 	addi	r2,r2,4
 803d6e4:	e0fffc17 	ldw	r3,-16(fp)
 803d6e8:	18c00817 	ldw	r3,32(r3)
 803d6ec:	10c00035 	stwio	r3,0(r2)
 803d6f0:	e0bff917 	ldw	r2,-28(fp)
 803d6f4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 803d6f8:	e0bffb17 	ldw	r2,-20(fp)
 803d6fc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 803d700:	e0bffe17 	ldw	r2,-8(fp)
 803d704:	0080110e 	bge	zero,r2,803d74c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 803d708:	e0bfff17 	ldw	r2,-4(fp)
 803d70c:	1090000c 	andi	r2,r2,16384
 803d710:	1000111e 	bne	r2,zero,803d758 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 803d714:	0001883a 	nop
 803d718:	e0bffc17 	ldw	r2,-16(fp)
 803d71c:	10c00d17 	ldw	r3,52(r2)
 803d720:	e0bff517 	ldw	r2,-44(fp)
 803d724:	1880051e 	bne	r3,r2,803d73c <altera_avalon_jtag_uart_write+0x1b4>
 803d728:	e0bffc17 	ldw	r2,-16(fp)
 803d72c:	10c00917 	ldw	r3,36(r2)
 803d730:	e0bffc17 	ldw	r2,-16(fp)
 803d734:	10800117 	ldw	r2,4(r2)
 803d738:	18bff736 	bltu	r3,r2,803d718 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 803d73c:	e0bffc17 	ldw	r2,-16(fp)
 803d740:	10c00d17 	ldw	r3,52(r2)
 803d744:	e0bff517 	ldw	r2,-44(fp)
 803d748:	18800526 	beq	r3,r2,803d760 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 803d74c:	e0bffe17 	ldw	r2,-8(fp)
 803d750:	00bfd016 	blt	zero,r2,803d694 <altera_avalon_jtag_uart_write+0x10c>
 803d754:	00000306 	br	803d764 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 803d758:	0001883a 	nop
 803d75c:	00000106 	br	803d764 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
 803d760:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 803d764:	e0fffd17 	ldw	r3,-12(fp)
 803d768:	e0bff717 	ldw	r2,-36(fp)
 803d76c:	18800426 	beq	r3,r2,803d780 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 803d770:	e0fffd17 	ldw	r3,-12(fp)
 803d774:	e0bff717 	ldw	r2,-36(fp)
 803d778:	1885c83a 	sub	r2,r3,r2
 803d77c:	00000606 	br	803d798 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 803d780:	e0bfff17 	ldw	r2,-4(fp)
 803d784:	1090000c 	andi	r2,r2,16384
 803d788:	10000226 	beq	r2,zero,803d794 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 803d78c:	00bffd44 	movi	r2,-11
 803d790:	00000106 	br	803d798 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 803d794:	00bffec4 	movi	r2,-5
}
 803d798:	e037883a 	mov	sp,fp
 803d79c:	dfc00117 	ldw	ra,4(sp)
 803d7a0:	df000017 	ldw	fp,0(sp)
 803d7a4:	dec00204 	addi	sp,sp,8
 803d7a8:	f800283a 	ret

0803d7ac <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 803d7ac:	defffa04 	addi	sp,sp,-24
 803d7b0:	dfc00515 	stw	ra,20(sp)
 803d7b4:	df000415 	stw	fp,16(sp)
 803d7b8:	df000404 	addi	fp,sp,16
 803d7bc:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 803d7c0:	0007883a 	mov	r3,zero
 803d7c4:	e0bfff17 	ldw	r2,-4(fp)
 803d7c8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 803d7cc:	e0bfff17 	ldw	r2,-4(fp)
 803d7d0:	10800104 	addi	r2,r2,4
 803d7d4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 803d7d8:	0005303a 	rdctl	r2,status
 803d7dc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 803d7e0:	e0fffd17 	ldw	r3,-12(fp)
 803d7e4:	00bfff84 	movi	r2,-2
 803d7e8:	1884703a 	and	r2,r3,r2
 803d7ec:	1001703a 	wrctl	status,r2
  
  return context;
 803d7f0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 803d7f4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 803d7f8:	803eaf80 	call	803eaf8 <alt_tick>
 803d7fc:	e0bffc17 	ldw	r2,-16(fp)
 803d800:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 803d804:	e0bffe17 	ldw	r2,-8(fp)
 803d808:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 803d80c:	e037883a 	mov	sp,fp
 803d810:	dfc00117 	ldw	ra,4(sp)
 803d814:	df000017 	ldw	fp,0(sp)
 803d818:	dec00204 	addi	sp,sp,8
 803d81c:	f800283a 	ret

0803d820 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 803d820:	defff804 	addi	sp,sp,-32
 803d824:	dfc00715 	stw	ra,28(sp)
 803d828:	df000615 	stw	fp,24(sp)
 803d82c:	df000604 	addi	fp,sp,24
 803d830:	e13ffc15 	stw	r4,-16(fp)
 803d834:	e17ffd15 	stw	r5,-12(fp)
 803d838:	e1bffe15 	stw	r6,-8(fp)
 803d83c:	e1ffff15 	stw	r7,-4(fp)
 803d840:	e0bfff17 	ldw	r2,-4(fp)
 803d844:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 803d848:	00820134 	movhi	r2,2052
 803d84c:	10933504 	addi	r2,r2,19668
 803d850:	10800017 	ldw	r2,0(r2)
 803d854:	1000041e 	bne	r2,zero,803d868 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
 803d858:	00820134 	movhi	r2,2052
 803d85c:	10933504 	addi	r2,r2,19668
 803d860:	e0fffb17 	ldw	r3,-20(fp)
 803d864:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 803d868:	e0bffc17 	ldw	r2,-16(fp)
 803d86c:	10800104 	addi	r2,r2,4
 803d870:	00c001c4 	movi	r3,7
 803d874:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 803d878:	d8000015 	stw	zero,0(sp)
 803d87c:	e13ffd17 	ldw	r4,-12(fp)
 803d880:	e17ffe17 	ldw	r5,-8(fp)
 803d884:	01820134 	movhi	r6,2052
 803d888:	31b5eb04 	addi	r6,r6,-10324
 803d88c:	e1fffc17 	ldw	r7,-16(fp)
 803d890:	803e6400 	call	803e640 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 803d894:	e037883a 	mov	sp,fp
 803d898:	dfc00117 	ldw	ra,4(sp)
 803d89c:	df000017 	ldw	fp,0(sp)
 803d8a0:	dec00204 	addi	sp,sp,8
 803d8a4:	f800283a 	ret

0803d8a8 <alt_hostfs_open>:
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
 803d8a8:	deffeb04 	addi	sp,sp,-84
 803d8ac:	df001415 	stw	fp,80(sp)
 803d8b0:	dc401315 	stw	r17,76(sp)
 803d8b4:	dc001215 	stw	r16,72(sp)
 803d8b8:	df001204 	addi	fp,sp,72
 803d8bc:	e13ffb15 	stw	r4,-20(fp)
 803d8c0:	e17ffc15 	stw	r5,-16(fp)
 803d8c4:	e1bffd15 	stw	r6,-12(fp)
 803d8c8:	e1fffe15 	stw	r7,-8(fp)
  static const struct HOSTCALL_INFO hcinfo = { 0x0103, "open" };

  alt_hostfs_dev* dev= (alt_hostfs_dev*)fd->dev;
 803d8cc:	e0bffb17 	ldw	r2,-20(fp)
 803d8d0:	10800017 	ldw	r2,0(r2)
 803d8d4:	e0bfee15 	stw	r2,-72(fp)
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
 803d8d8:	e0bfee17 	ldw	r2,-72(fp)
 803d8dc:	10800217 	ldw	r2,8(r2)
 803d8e0:	e0bff715 	stw	r2,-36(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
 803d8e4:	e0bff717 	ldw	r2,-36(fp)
 803d8e8:	10bfffc4 	addi	r2,r2,-1
 803d8ec:	e0bff815 	stw	r2,-32(fp)

  while (*++ptr != 0)
 803d8f0:	e0bff817 	ldw	r2,-32(fp)
 803d8f4:	10800044 	addi	r2,r2,1
 803d8f8:	e0bff815 	stw	r2,-32(fp)
 803d8fc:	e0bff817 	ldw	r2,-32(fp)
 803d900:	10800003 	ldbu	r2,0(r2)
 803d904:	10803fcc 	andi	r2,r2,255
 803d908:	1080201c 	xori	r2,r2,128
 803d90c:	10bfe004 	addi	r2,r2,-128
 803d910:	103ff71e 	bne	r2,zero,803d8f0 <alt_hostfs_open+0x48>
    ;

  return ptr - string;
 803d914:	e0fff817 	ldw	r3,-32(fp)
 803d918:	e0bff717 	ldw	r2,-36(fp)
 803d91c:	1885c83a 	sub	r2,r3,r2
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
 803d920:	10800044 	addi	r2,r2,1
 803d924:	e0fffc17 	ldw	r3,-16(fp)
 803d928:	1885883a 	add	r2,r3,r2
 803d92c:	e0bffc15 	stw	r2,-16(fp)

  r3 = (int)&hcinfo;
 803d930:	d0a02104 	addi	r2,gp,-32636
 803d934:	e0bfef15 	stw	r2,-68(fp)
  r4 = (int)name;
 803d938:	e0bffc17 	ldw	r2,-16(fp)
 803d93c:	e0bff015 	stw	r2,-64(fp)
  r5 = flags;
 803d940:	e0bffd17 	ldw	r2,-12(fp)
 803d944:	e0bff115 	stw	r2,-60(fp)
  r6 = mode;
 803d948:	e0bffe17 	ldw	r2,-8(fp)
 803d94c:	e0bff215 	stw	r2,-56(fp)
 803d950:	e0bffc17 	ldw	r2,-16(fp)
 803d954:	e0bff915 	stw	r2,-28(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
 803d958:	e0bff917 	ldw	r2,-28(fp)
 803d95c:	10bfffc4 	addi	r2,r2,-1
 803d960:	e0bffa15 	stw	r2,-24(fp)

  while (*++ptr != 0)
 803d964:	e0bffa17 	ldw	r2,-24(fp)
 803d968:	10800044 	addi	r2,r2,1
 803d96c:	e0bffa15 	stw	r2,-24(fp)
 803d970:	e0bffa17 	ldw	r2,-24(fp)
 803d974:	10800003 	ldbu	r2,0(r2)
 803d978:	10803fcc 	andi	r2,r2,255
 803d97c:	1080201c 	xori	r2,r2,128
 803d980:	10bfe004 	addi	r2,r2,-128
 803d984:	103ff71e 	bne	r2,zero,803d964 <alt_hostfs_open+0xbc>
    ;

  return ptr - string;
 803d988:	e0fffa17 	ldw	r3,-24(fp)
 803d98c:	e0bff917 	ldw	r2,-28(fp)
 803d990:	1885c83a 	sub	r2,r3,r2

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
 803d994:	e0bff315 	stw	r2,-52(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6), "D07" (r7) : "memory" );
 803d998:	e13ff017 	ldw	r4,-64(fp)
 803d99c:	e13fff15 	stw	r4,-4(fp)
 803d9a0:	e17ff117 	ldw	r5,-60(fp)
 803d9a4:	e1bff217 	ldw	r6,-56(fp)
 803d9a8:	e1fff317 	ldw	r7,-52(fp)
 803d9ac:	e0ffef17 	ldw	r3,-68(fp)
 803d9b0:	1821883a 	mov	r16,r3
 803d9b4:	8007883a 	mov	r3,r16
 803d9b8:	e13fff17 	ldw	r4,-4(fp)
 803d9bc:	003da07a 	break	1
 803d9c0:	1821883a 	mov	r16,r3
 803d9c4:	1023883a 	mov	r17,r2
 803d9c8:	e47ff415 	stw	r17,-48(fp)
 803d9cc:	e43fef15 	stw	r16,-68(fp)

  handle = (void *)r2;
 803d9d0:	e0bff417 	ldw	r2,-48(fp)
 803d9d4:	e0bff515 	stw	r2,-44(fp)
  error = r3;
 803d9d8:	e0bfef17 	ldw	r2,-68(fp)
 803d9dc:	e0bff615 	stw	r2,-40(fp)

  if (error == 0)
 803d9e0:	e0bff617 	ldw	r2,-40(fp)
 803d9e4:	1000031e 	bne	r2,zero,803d9f4 <alt_hostfs_open+0x14c>
    fd->priv = handle;
 803d9e8:	e0bffb17 	ldw	r2,-20(fp)
 803d9ec:	e0fff517 	ldw	r3,-44(fp)
 803d9f0:	10c00115 	stw	r3,4(r2)

  return -error;
 803d9f4:	e0bff617 	ldw	r2,-40(fp)
 803d9f8:	0085c83a 	sub	r2,zero,r2
}
 803d9fc:	e037883a 	mov	sp,fp
 803da00:	df000217 	ldw	fp,8(sp)
 803da04:	dc400117 	ldw	r17,4(sp)
 803da08:	dc000017 	ldw	r16,0(sp)
 803da0c:	dec00304 	addi	sp,sp,12
 803da10:	f800283a 	ret

0803da14 <alt_hostfs_close>:
* alt_hostfs_close
*
* Read the file
*/
int alt_hostfs_close(alt_fd* fd)
{
 803da14:	defffa04 	addi	sp,sp,-24
 803da18:	df000515 	stw	fp,20(sp)
 803da1c:	dc000415 	stw	r16,16(sp)
 803da20:	df000404 	addi	fp,sp,16
 803da24:	e13fff15 	stw	r4,-4(fp)
  int error;

  /* Input and output parameters for the hostcall */
  int r3, r4;

  r3 = (int)&hcinfo;
 803da28:	d0a01e04 	addi	r2,gp,-32648
 803da2c:	e0bffc15 	stw	r2,-16(fp)
  r4 = (int)fd->priv;
 803da30:	e0bfff17 	ldw	r2,-4(fp)
 803da34:	10800117 	ldw	r2,4(r2)
 803da38:	e0bffd15 	stw	r2,-12(fp)

  __asm__ volatile("break 1" : "+D03" (r3) : "D04" (r4) );
 803da3c:	e0bffd17 	ldw	r2,-12(fp)
 803da40:	e0fffc17 	ldw	r3,-16(fp)
 803da44:	1821883a 	mov	r16,r3
 803da48:	8007883a 	mov	r3,r16
 803da4c:	1009883a 	mov	r4,r2
 803da50:	003da07a 	break	1
 803da54:	1821883a 	mov	r16,r3
 803da58:	e43ffc15 	stw	r16,-16(fp)

  error = r3;
 803da5c:	e0bffc17 	ldw	r2,-16(fp)
 803da60:	e0bffe15 	stw	r2,-8(fp)

  return -error;
 803da64:	e0bffe17 	ldw	r2,-8(fp)
 803da68:	0085c83a 	sub	r2,zero,r2
}
 803da6c:	e037883a 	mov	sp,fp
 803da70:	df000117 	ldw	fp,4(sp)
 803da74:	dc000017 	ldw	r16,0(sp)
 803da78:	dec00204 	addi	sp,sp,8
 803da7c:	f800283a 	ret

0803da80 <alt_hostfs_read>:
* alt_hostfs_read
*
* Read the file
*/
int alt_hostfs_read(alt_fd* fd, char * ptr, int len)
{
 803da80:	defff204 	addi	sp,sp,-56
 803da84:	df000d15 	stw	fp,52(sp)
 803da88:	dc400c15 	stw	r17,48(sp)
 803da8c:	dc000b15 	stw	r16,44(sp)
 803da90:	df000b04 	addi	fp,sp,44
 803da94:	e13ffc15 	stw	r4,-16(fp)
 803da98:	e17ffd15 	stw	r5,-12(fp)
 803da9c:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
 803daa0:	d0a01b04 	addi	r2,gp,-32660
 803daa4:	e0bff515 	stw	r2,-44(fp)
  r4 = (int)fd->priv;
 803daa8:	e0bffc17 	ldw	r2,-16(fp)
 803daac:	10800117 	ldw	r2,4(r2)
 803dab0:	e0bff615 	stw	r2,-40(fp)
  r5 = (int)ptr;
 803dab4:	e0bffd17 	ldw	r2,-12(fp)
 803dab8:	e0bff715 	stw	r2,-36(fp)
  r6 = len;
 803dabc:	e0bffe17 	ldw	r2,-8(fp)
 803dac0:	e0bff815 	stw	r2,-32(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
 803dac4:	e13ff617 	ldw	r4,-40(fp)
 803dac8:	e13fff15 	stw	r4,-4(fp)
 803dacc:	e17ff717 	ldw	r5,-36(fp)
 803dad0:	e1bff817 	ldw	r6,-32(fp)
 803dad4:	e0fff517 	ldw	r3,-44(fp)
 803dad8:	1821883a 	mov	r16,r3
 803dadc:	8007883a 	mov	r3,r16
 803dae0:	e13fff17 	ldw	r4,-4(fp)
 803dae4:	003da07a 	break	1
 803dae8:	1821883a 	mov	r16,r3
 803daec:	1023883a 	mov	r17,r2
 803daf0:	e47ff915 	stw	r17,-28(fp)
 803daf4:	e43ff515 	stw	r16,-44(fp)

  rc = r2;
 803daf8:	e0bff917 	ldw	r2,-28(fp)
 803dafc:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
 803db00:	e0bff517 	ldw	r2,-44(fp)
 803db04:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
 803db08:	e0bffb17 	ldw	r2,-20(fp)
 803db0c:	10000326 	beq	r2,zero,803db1c <alt_hostfs_read+0x9c>
 803db10:	e0bffb17 	ldw	r2,-20(fp)
 803db14:	0085c83a 	sub	r2,zero,r2
 803db18:	00000106 	br	803db20 <alt_hostfs_read+0xa0>
 803db1c:	e0bffa17 	ldw	r2,-24(fp)
}
 803db20:	e037883a 	mov	sp,fp
 803db24:	df000217 	ldw	fp,8(sp)
 803db28:	dc400117 	ldw	r17,4(sp)
 803db2c:	dc000017 	ldw	r16,0(sp)
 803db30:	dec00304 	addi	sp,sp,12
 803db34:	f800283a 	ret

0803db38 <alt_hostfs_write>:
* alt_hostfs_write
*
* Read the file
*/
int alt_hostfs_write(alt_fd* fd, const char * ptr, int len)
{
 803db38:	defff204 	addi	sp,sp,-56
 803db3c:	df000d15 	stw	fp,52(sp)
 803db40:	dc400c15 	stw	r17,48(sp)
 803db44:	dc000b15 	stw	r16,44(sp)
 803db48:	df000b04 	addi	fp,sp,44
 803db4c:	e13ffc15 	stw	r4,-16(fp)
 803db50:	e17ffd15 	stw	r5,-12(fp)
 803db54:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
 803db58:	d0a01804 	addi	r2,gp,-32672
 803db5c:	e0bff515 	stw	r2,-44(fp)
  r4 = (int)fd->priv;
 803db60:	e0bffc17 	ldw	r2,-16(fp)
 803db64:	10800117 	ldw	r2,4(r2)
 803db68:	e0bff615 	stw	r2,-40(fp)
  r5 = (int)ptr;
 803db6c:	e0bffd17 	ldw	r2,-12(fp)
 803db70:	e0bff715 	stw	r2,-36(fp)
  r6 = len;
 803db74:	e0bffe17 	ldw	r2,-8(fp)
 803db78:	e0bff815 	stw	r2,-32(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
 803db7c:	e13ff617 	ldw	r4,-40(fp)
 803db80:	e13fff15 	stw	r4,-4(fp)
 803db84:	e17ff717 	ldw	r5,-36(fp)
 803db88:	e1bff817 	ldw	r6,-32(fp)
 803db8c:	e0fff517 	ldw	r3,-44(fp)
 803db90:	1821883a 	mov	r16,r3
 803db94:	8007883a 	mov	r3,r16
 803db98:	e13fff17 	ldw	r4,-4(fp)
 803db9c:	003da07a 	break	1
 803dba0:	1821883a 	mov	r16,r3
 803dba4:	1023883a 	mov	r17,r2
 803dba8:	e47ff915 	stw	r17,-28(fp)
 803dbac:	e43ff515 	stw	r16,-44(fp)

  rc = r2;
 803dbb0:	e0bff917 	ldw	r2,-28(fp)
 803dbb4:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
 803dbb8:	e0bff517 	ldw	r2,-44(fp)
 803dbbc:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
 803dbc0:	e0bffb17 	ldw	r2,-20(fp)
 803dbc4:	10000326 	beq	r2,zero,803dbd4 <alt_hostfs_write+0x9c>
 803dbc8:	e0bffb17 	ldw	r2,-20(fp)
 803dbcc:	0085c83a 	sub	r2,zero,r2
 803dbd0:	00000106 	br	803dbd8 <alt_hostfs_write+0xa0>
 803dbd4:	e0bffa17 	ldw	r2,-24(fp)
}
 803dbd8:	e037883a 	mov	sp,fp
 803dbdc:	df000217 	ldw	fp,8(sp)
 803dbe0:	dc400117 	ldw	r17,4(sp)
 803dbe4:	dc000017 	ldw	r16,0(sp)
 803dbe8:	dec00304 	addi	sp,sp,12
 803dbec:	f800283a 	ret

0803dbf0 <alt_hostfs_seek>:
* Move around within a file
*
* returns -errno for an error or the offset within the file
*/
int alt_hostfs_seek(alt_fd* fd, int ptr, int dir)
{
 803dbf0:	defff204 	addi	sp,sp,-56
 803dbf4:	df000d15 	stw	fp,52(sp)
 803dbf8:	dc400c15 	stw	r17,48(sp)
 803dbfc:	dc000b15 	stw	r16,44(sp)
 803dc00:	df000b04 	addi	fp,sp,44
 803dc04:	e13ffc15 	stw	r4,-16(fp)
 803dc08:	e17ffd15 	stw	r5,-12(fp)
 803dc0c:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
 803dc10:	d0a01504 	addi	r2,gp,-32684
 803dc14:	e0bff515 	stw	r2,-44(fp)
  r4 = (int)fd->priv;
 803dc18:	e0bffc17 	ldw	r2,-16(fp)
 803dc1c:	10800117 	ldw	r2,4(r2)
 803dc20:	e0bff615 	stw	r2,-40(fp)
  r5 = ptr;
 803dc24:	e0bffd17 	ldw	r2,-12(fp)
 803dc28:	e0bff715 	stw	r2,-36(fp)
  r6 = dir;
 803dc2c:	e0bffe17 	ldw	r2,-8(fp)
 803dc30:	e0bff815 	stw	r2,-32(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
 803dc34:	e13ff617 	ldw	r4,-40(fp)
 803dc38:	e13fff15 	stw	r4,-4(fp)
 803dc3c:	e17ff717 	ldw	r5,-36(fp)
 803dc40:	e1bff817 	ldw	r6,-32(fp)
 803dc44:	e0fff517 	ldw	r3,-44(fp)
 803dc48:	1821883a 	mov	r16,r3
 803dc4c:	8007883a 	mov	r3,r16
 803dc50:	e13fff17 	ldw	r4,-4(fp)
 803dc54:	003da07a 	break	1
 803dc58:	1821883a 	mov	r16,r3
 803dc5c:	1023883a 	mov	r17,r2
 803dc60:	e47ff915 	stw	r17,-28(fp)
 803dc64:	e43ff515 	stw	r16,-44(fp)

  rc = r2;
 803dc68:	e0bff917 	ldw	r2,-28(fp)
 803dc6c:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
 803dc70:	e0bff517 	ldw	r2,-44(fp)
 803dc74:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
 803dc78:	e0bffb17 	ldw	r2,-20(fp)
 803dc7c:	10000326 	beq	r2,zero,803dc8c <alt_hostfs_seek+0x9c>
 803dc80:	e0bffb17 	ldw	r2,-20(fp)
 803dc84:	0085c83a 	sub	r2,zero,r2
 803dc88:	00000106 	br	803dc90 <alt_hostfs_seek+0xa0>
 803dc8c:	e0bffa17 	ldw	r2,-24(fp)
}
 803dc90:	e037883a 	mov	sp,fp
 803dc94:	df000217 	ldw	fp,8(sp)
 803dc98:	dc400117 	ldw	r17,4(sp)
 803dc9c:	dc000017 	ldw	r16,0(sp)
 803dca0:	dec00304 	addi	sp,sp,12
 803dca4:	f800283a 	ret

0803dca8 <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
 803dca8:	deffe204 	addi	sp,sp,-120
 803dcac:	df001d15 	stw	fp,116(sp)
 803dcb0:	dc401c15 	stw	r17,112(sp)
 803dcb4:	dc001b15 	stw	r16,108(sp)
 803dcb8:	df001b04 	addi	fp,sp,108
 803dcbc:	e13ffd15 	stw	r4,-12(fp)
 803dcc0:	e17ffe15 	stw	r5,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5;

  r3 = (int)&hcinfo;
 803dcc4:	d0a01204 	addi	r2,gp,-32696
 803dcc8:	e0bfe615 	stw	r2,-104(fp)
  r4 = (int)fd->priv;
 803dccc:	e0bffd17 	ldw	r2,-12(fp)
 803dcd0:	10800117 	ldw	r2,4(r2)
 803dcd4:	e0bfe715 	stw	r2,-100(fp)
  r5 = (int)&hoststat;
 803dcd8:	e0bfed04 	addi	r2,fp,-76
 803dcdc:	e0bfe815 	stw	r2,-96(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5) : "memory" );
 803dce0:	e13fe717 	ldw	r4,-100(fp)
 803dce4:	e13fff15 	stw	r4,-4(fp)
 803dce8:	e17fe817 	ldw	r5,-96(fp)
 803dcec:	e0ffe617 	ldw	r3,-104(fp)
 803dcf0:	1821883a 	mov	r16,r3
 803dcf4:	8007883a 	mov	r3,r16
 803dcf8:	e13fff17 	ldw	r4,-4(fp)
 803dcfc:	003da07a 	break	1
 803dd00:	1821883a 	mov	r16,r3
 803dd04:	1023883a 	mov	r17,r2
 803dd08:	e47fe915 	stw	r17,-92(fp)
 803dd0c:	e43fe615 	stw	r16,-104(fp)

  rc = r2;
 803dd10:	e0bfe917 	ldw	r2,-92(fp)
 803dd14:	e0bfea15 	stw	r2,-88(fp)
  error = r3;
 803dd18:	e0bfe617 	ldw	r2,-104(fp)
 803dd1c:	e0bfeb15 	stw	r2,-84(fp)

  if (error == 0)
 803dd20:	e0bfeb17 	ldw	r2,-84(fp)
 803dd24:	1000621e 	bne	r2,zero,803deb0 <alt_hostfs_fstat+0x208>
     * no change is required.  On a little-endian processor we need to swap
     * the bytes in each word.
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
 803dd28:	e0bfed04 	addi	r2,fp,-76
 803dd2c:	e0bfe515 	stw	r2,-108(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
 803dd30:	e0bfe517 	ldw	r2,-108(fp)
 803dd34:	10801004 	addi	r2,r2,64
 803dd38:	e0bfec15 	stw	r2,-80(fp)
    for ( ; ptr < end ; ptr++)
 803dd3c:	00001606 	br	803dd98 <alt_hostfs_fstat+0xf0>
      *ptr = ((*ptr & 0xFF000000) >> 24) |
 803dd40:	e0bfe517 	ldw	r2,-108(fp)
 803dd44:	10800017 	ldw	r2,0(r2)
 803dd48:	1006d63a 	srli	r3,r2,24
             ((*ptr & 0x00FF0000) >> 8)  |
 803dd4c:	e0bfe517 	ldw	r2,-108(fp)
 803dd50:	10800017 	ldw	r2,0(r2)
 803dd54:	10803fec 	andhi	r2,r2,255
 803dd58:	1004d23a 	srli	r2,r2,8

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
 803dd5c:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
 803dd60:	e0bfe517 	ldw	r2,-108(fp)
 803dd64:	10800017 	ldw	r2,0(r2)
 803dd68:	10bfc00c 	andi	r2,r2,65280
 803dd6c:	1004923a 	slli	r2,r2,8
#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
 803dd70:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
 803dd74:	e0bfe517 	ldw	r2,-108(fp)
 803dd78:	10800017 	ldw	r2,0(r2)
 803dd7c:	1004963a 	slli	r2,r2,24
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
 803dd80:	1886b03a 	or	r3,r3,r2

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
 803dd84:	e0bfe517 	ldw	r2,-108(fp)
 803dd88:	10c00015 	stw	r3,0(r2)
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
 803dd8c:	e0bfe517 	ldw	r2,-108(fp)
 803dd90:	10800104 	addi	r2,r2,4
 803dd94:	e0bfe515 	stw	r2,-108(fp)
 803dd98:	e0ffe517 	ldw	r3,-108(fp)
 803dd9c:	e0bfec17 	ldw	r2,-80(fp)
 803dda0:	18bfe736 	bltu	r3,r2,803dd40 <alt_hostfs_fstat+0x98>
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
 803dda4:	e0bffe17 	ldw	r2,-8(fp)
 803dda8:	e0bfe515 	stw	r2,-108(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
 803ddac:	e0bfe517 	ldw	r2,-108(fp)
 803ddb0:	10800f04 	addi	r2,r2,60
 803ddb4:	e0bfec15 	stw	r2,-80(fp)
    for ( ; ptr < end ; ptr++)
 803ddb8:	00000506 	br	803ddd0 <alt_hostfs_fstat+0x128>
      *ptr = 0;
 803ddbc:	e0bfe517 	ldw	r2,-108(fp)
 803ddc0:	10000015 	stw	zero,0(r2)
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
    for ( ; ptr < end ; ptr++)
 803ddc4:	e0bfe517 	ldw	r2,-108(fp)
 803ddc8:	10800104 	addi	r2,r2,4
 803ddcc:	e0bfe515 	stw	r2,-108(fp)
 803ddd0:	e0ffe517 	ldw	r3,-108(fp)
 803ddd4:	e0bfec17 	ldw	r2,-80(fp)
 803ddd8:	18bff836 	bltu	r3,r2,803ddbc <alt_hostfs_fstat+0x114>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
 803dddc:	e0bfed17 	ldw	r2,-76(fp)
 803dde0:	1007883a 	mov	r3,r2
 803dde4:	e0bffe17 	ldw	r2,-8(fp)
 803dde8:	10c0000d 	sth	r3,0(r2)
    st->st_ino     = hoststat.fst_ino;
 803ddec:	e0bfee17 	ldw	r2,-72(fp)
 803ddf0:	1007883a 	mov	r3,r2
 803ddf4:	e0bffe17 	ldw	r2,-8(fp)
 803ddf8:	10c0008d 	sth	r3,2(r2)
    st->st_mode    = hoststat.fst_mode;
 803ddfc:	e0ffef17 	ldw	r3,-68(fp)
 803de00:	e0bffe17 	ldw	r2,-8(fp)
 803de04:	10c00115 	stw	r3,4(r2)
    st->st_nlink   = hoststat.fst_nlink;
 803de08:	e0bff017 	ldw	r2,-64(fp)
 803de0c:	1007883a 	mov	r3,r2
 803de10:	e0bffe17 	ldw	r2,-8(fp)
 803de14:	10c0020d 	sth	r3,8(r2)
    st->st_uid     = hoststat.fst_uid;
 803de18:	e0bff117 	ldw	r2,-60(fp)
 803de1c:	1007883a 	mov	r3,r2
 803de20:	e0bffe17 	ldw	r2,-8(fp)
 803de24:	10c0028d 	sth	r3,10(r2)
    st->st_gid     = hoststat.fst_gid;
 803de28:	e0bff217 	ldw	r2,-56(fp)
 803de2c:	1007883a 	mov	r3,r2
 803de30:	e0bffe17 	ldw	r2,-8(fp)
 803de34:	10c0030d 	sth	r3,12(r2)
    st->st_rdev    = hoststat.fst_rdev;
 803de38:	e0bff317 	ldw	r2,-52(fp)
 803de3c:	1007883a 	mov	r3,r2
 803de40:	e0bffe17 	ldw	r2,-8(fp)
 803de44:	10c0038d 	sth	r3,14(r2)
    st->st_size    = hoststat.fst_size[1];
 803de48:	e0bff517 	ldw	r2,-44(fp)
 803de4c:	1007883a 	mov	r3,r2
 803de50:	e0bffe17 	ldw	r2,-8(fp)
 803de54:	10c00415 	stw	r3,16(r2)

    st->st_atime   = hoststat.fst_atime;
 803de58:	e0bffa17 	ldw	r2,-24(fp)
 803de5c:	1007883a 	mov	r3,r2
 803de60:	e0bffe17 	ldw	r2,-8(fp)
 803de64:	10c00515 	stw	r3,20(r2)
    st->st_mtime   = hoststat.fst_mtime;
 803de68:	e0bffb17 	ldw	r2,-20(fp)
 803de6c:	1007883a 	mov	r3,r2
 803de70:	e0bffe17 	ldw	r2,-8(fp)
 803de74:	10c00715 	stw	r3,28(r2)
    st->st_ctime   = hoststat.fst_ctime;
 803de78:	e0bffc17 	ldw	r2,-16(fp)
 803de7c:	1007883a 	mov	r3,r2
 803de80:	e0bffe17 	ldw	r2,-8(fp)
 803de84:	10c00915 	stw	r3,36(r2)

    st->st_blksize = hoststat.fst_blksize[1];
 803de88:	e0bff717 	ldw	r2,-36(fp)
 803de8c:	1007883a 	mov	r3,r2
 803de90:	e0bffe17 	ldw	r2,-8(fp)
 803de94:	10c00b15 	stw	r3,44(r2)
    st->st_blocks  = hoststat.fst_blocks[1];
 803de98:	e0bff917 	ldw	r2,-28(fp)
 803de9c:	1007883a 	mov	r3,r2
 803dea0:	e0bffe17 	ldw	r2,-8(fp)
 803dea4:	10c00c15 	stw	r3,48(r2)

    return rc;
 803dea8:	e0bfea17 	ldw	r2,-88(fp)
 803deac:	00000206 	br	803deb8 <alt_hostfs_fstat+0x210>
  }
  else
    return -error;
 803deb0:	e0bfeb17 	ldw	r2,-84(fp)
 803deb4:	0085c83a 	sub	r2,zero,r2
}
 803deb8:	e037883a 	mov	sp,fp
 803debc:	df000217 	ldw	fp,8(sp)
 803dec0:	dc400117 	ldw	r17,4(sp)
 803dec4:	dc000017 	ldw	r16,0(sp)
 803dec8:	dec00304 	addi	sp,sp,12
 803decc:	f800283a 	ret

0803ded0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 803ded0:	defff504 	addi	sp,sp,-44
 803ded4:	df000a15 	stw	fp,40(sp)
 803ded8:	df000a04 	addi	fp,sp,40
 803dedc:	e13ffc15 	stw	r4,-16(fp)
 803dee0:	e17ffd15 	stw	r5,-12(fp)
 803dee4:	e1bffe15 	stw	r6,-8(fp)
 803dee8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 803deec:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 803def0:	00820134 	movhi	r2,2052
 803def4:	10933504 	addi	r2,r2,19668
 803def8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 803defc:	10003f26 	beq	r2,zero,803dffc <alt_alarm_start+0x12c>
  {
    if (alarm)
 803df00:	e0bffc17 	ldw	r2,-16(fp)
 803df04:	10003b26 	beq	r2,zero,803dff4 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 803df08:	e0bffc17 	ldw	r2,-16(fp)
 803df0c:	e0fffe17 	ldw	r3,-8(fp)
 803df10:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 803df14:	e0bffc17 	ldw	r2,-16(fp)
 803df18:	e0ffff17 	ldw	r3,-4(fp)
 803df1c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 803df20:	0005303a 	rdctl	r2,status
 803df24:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 803df28:	e0fff817 	ldw	r3,-32(fp)
 803df2c:	00bfff84 	movi	r2,-2
 803df30:	1884703a 	and	r2,r3,r2
 803df34:	1001703a 	wrctl	status,r2
  
  return context;
 803df38:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 803df3c:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 803df40:	00820134 	movhi	r2,2052
 803df44:	10933604 	addi	r2,r2,19672
 803df48:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 803df4c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 803df50:	e0fffd17 	ldw	r3,-12(fp)
 803df54:	e0bff617 	ldw	r2,-40(fp)
 803df58:	1885883a 	add	r2,r3,r2
 803df5c:	10c00044 	addi	r3,r2,1
 803df60:	e0bffc17 	ldw	r2,-16(fp)
 803df64:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 803df68:	e0bffc17 	ldw	r2,-16(fp)
 803df6c:	10c00217 	ldw	r3,8(r2)
 803df70:	e0bff617 	ldw	r2,-40(fp)
 803df74:	1880042e 	bgeu	r3,r2,803df88 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 803df78:	e0bffc17 	ldw	r2,-16(fp)
 803df7c:	00c00044 	movi	r3,1
 803df80:	10c00405 	stb	r3,16(r2)
 803df84:	00000206 	br	803df90 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 803df88:	e0bffc17 	ldw	r2,-16(fp)
 803df8c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 803df90:	e0bffc17 	ldw	r2,-16(fp)
 803df94:	00c20134 	movhi	r3,2052
 803df98:	18cc6404 	addi	r3,r3,12688
 803df9c:	e0fff915 	stw	r3,-28(fp)
 803dfa0:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 803dfa4:	e0bffa17 	ldw	r2,-24(fp)
 803dfa8:	e0fff917 	ldw	r3,-28(fp)
 803dfac:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 803dfb0:	e0bff917 	ldw	r2,-28(fp)
 803dfb4:	10c00017 	ldw	r3,0(r2)
 803dfb8:	e0bffa17 	ldw	r2,-24(fp)
 803dfbc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 803dfc0:	e0bff917 	ldw	r2,-28(fp)
 803dfc4:	10800017 	ldw	r2,0(r2)
 803dfc8:	e0fffa17 	ldw	r3,-24(fp)
 803dfcc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 803dfd0:	e0bff917 	ldw	r2,-28(fp)
 803dfd4:	e0fffa17 	ldw	r3,-24(fp)
 803dfd8:	10c00015 	stw	r3,0(r2)
 803dfdc:	e0bff717 	ldw	r2,-36(fp)
 803dfe0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 803dfe4:	e0bffb17 	ldw	r2,-20(fp)
 803dfe8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 803dfec:	0005883a 	mov	r2,zero
 803dff0:	00000306 	br	803e000 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 803dff4:	00bffa84 	movi	r2,-22
 803dff8:	00000106 	br	803e000 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 803dffc:	00bfde84 	movi	r2,-134
  }
}
 803e000:	e037883a 	mov	sp,fp
 803e004:	df000017 	ldw	fp,0(sp)
 803e008:	dec00104 	addi	sp,sp,4
 803e00c:	f800283a 	ret

0803e010 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 803e010:	defffa04 	addi	sp,sp,-24
 803e014:	dfc00515 	stw	ra,20(sp)
 803e018:	df000415 	stw	fp,16(sp)
 803e01c:	df000404 	addi	fp,sp,16
 803e020:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 803e024:	00800244 	movi	r2,9
 803e028:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 803e02c:	e13ffd17 	ldw	r4,-12(fp)
 803e030:	014003f4 	movhi	r5,15
 803e034:	29509004 	addi	r5,r5,16960
 803e038:	802c2180 	call	802c218 <__mulsi3>
 803e03c:	01017db4 	movhi	r4,1526
 803e040:	21384004 	addi	r4,r4,-7936
 803e044:	100b883a 	mov	r5,r2
 803e048:	802c2080 	call	802c208 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 803e04c:	01200034 	movhi	r4,32768
 803e050:	213fffc4 	addi	r4,r4,-1
 803e054:	100b883a 	mov	r5,r2
 803e058:	802c2080 	call	802c208 <__udivsi3>
 803e05c:	e13fff17 	ldw	r4,-4(fp)
 803e060:	100b883a 	mov	r5,r2
 803e064:	802c2080 	call	802c208 <__udivsi3>
 803e068:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 803e06c:	e0bffe17 	ldw	r2,-8(fp)
 803e070:	10002926 	beq	r2,zero,803e118 <alt_busy_sleep+0x108>
  {
    for(i=0;i<big_loops;i++)
 803e074:	e03ffc15 	stw	zero,-16(fp)
 803e078:	00001606 	br	803e0d4 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 803e07c:	00a00034 	movhi	r2,32768
 803e080:	10bfffc4 	addi	r2,r2,-1
 803e084:	10bfffc4 	addi	r2,r2,-1
 803e088:	103ffe1e 	bne	r2,zero,803e084 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 803e08c:	e13ffd17 	ldw	r4,-12(fp)
 803e090:	014003f4 	movhi	r5,15
 803e094:	29509004 	addi	r5,r5,16960
 803e098:	802c2180 	call	802c218 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 803e09c:	01017db4 	movhi	r4,1526
 803e0a0:	21384004 	addi	r4,r4,-7936
 803e0a4:	100b883a 	mov	r5,r2
 803e0a8:	802c2080 	call	802c208 <__udivsi3>
 803e0ac:	01200034 	movhi	r4,32768
 803e0b0:	213fffc4 	addi	r4,r4,-1
 803e0b4:	100b883a 	mov	r5,r2
 803e0b8:	802c2080 	call	802c208 <__udivsi3>
 803e0bc:	e0ffff17 	ldw	r3,-4(fp)
 803e0c0:	1885c83a 	sub	r2,r3,r2
 803e0c4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 803e0c8:	e0bffc17 	ldw	r2,-16(fp)
 803e0cc:	10800044 	addi	r2,r2,1
 803e0d0:	e0bffc15 	stw	r2,-16(fp)
 803e0d4:	e0fffc17 	ldw	r3,-16(fp)
 803e0d8:	e0bffe17 	ldw	r2,-8(fp)
 803e0dc:	18bfe716 	blt	r3,r2,803e07c <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 803e0e0:	e13ffd17 	ldw	r4,-12(fp)
 803e0e4:	014003f4 	movhi	r5,15
 803e0e8:	29509004 	addi	r5,r5,16960
 803e0ec:	802c2180 	call	802c218 <__mulsi3>
 803e0f0:	01017db4 	movhi	r4,1526
 803e0f4:	21384004 	addi	r4,r4,-7936
 803e0f8:	100b883a 	mov	r5,r2
 803e0fc:	802c2080 	call	802c208 <__udivsi3>
 803e100:	1009883a 	mov	r4,r2
 803e104:	e17fff17 	ldw	r5,-4(fp)
 803e108:	802c2180 	call	802c218 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 803e10c:	10bfffc4 	addi	r2,r2,-1
 803e110:	103ffe1e 	bne	r2,zero,803e10c <alt_busy_sleep+0xfc>
 803e114:	00000d06 	br	803e14c <alt_busy_sleep+0x13c>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 803e118:	e13ffd17 	ldw	r4,-12(fp)
 803e11c:	014003f4 	movhi	r5,15
 803e120:	29509004 	addi	r5,r5,16960
 803e124:	802c2180 	call	802c218 <__mulsi3>
 803e128:	01017db4 	movhi	r4,1526
 803e12c:	21384004 	addi	r4,r4,-7936
 803e130:	100b883a 	mov	r5,r2
 803e134:	802c2080 	call	802c208 <__udivsi3>
 803e138:	1009883a 	mov	r4,r2
 803e13c:	e17fff17 	ldw	r5,-4(fp)
 803e140:	802c2180 	call	802c218 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 803e144:	10bfffc4 	addi	r2,r2,-1
 803e148:	00bffe16 	blt	zero,r2,803e144 <alt_busy_sleep+0x134>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 803e14c:	0005883a 	mov	r2,zero
}
 803e150:	e037883a 	mov	sp,fp
 803e154:	dfc00117 	ldw	ra,4(sp)
 803e158:	df000017 	ldw	fp,0(sp)
 803e15c:	dec00204 	addi	sp,sp,8
 803e160:	f800283a 	ret

0803e164 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 803e164:	deffff04 	addi	sp,sp,-4
 803e168:	df000015 	stw	fp,0(sp)
 803e16c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 803e170:	e037883a 	mov	sp,fp
 803e174:	df000017 	ldw	fp,0(sp)
 803e178:	dec00104 	addi	sp,sp,4
 803e17c:	f800283a 	ret

0803e180 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 803e180:	defffe04 	addi	sp,sp,-8
 803e184:	dfc00115 	stw	ra,4(sp)
 803e188:	df000015 	stw	fp,0(sp)
 803e18c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 803e190:	00820134 	movhi	r2,2052
 803e194:	108c4f04 	addi	r2,r2,12604
 803e198:	10800017 	ldw	r2,0(r2)
 803e19c:	10000526 	beq	r2,zero,803e1b4 <alt_get_errno+0x34>
 803e1a0:	00820134 	movhi	r2,2052
 803e1a4:	108c4f04 	addi	r2,r2,12604
 803e1a8:	10800017 	ldw	r2,0(r2)
 803e1ac:	103ee83a 	callr	r2
 803e1b0:	00000206 	br	803e1bc <alt_get_errno+0x3c>
 803e1b4:	00820134 	movhi	r2,2052
 803e1b8:	10932904 	addi	r2,r2,19620
}
 803e1bc:	e037883a 	mov	sp,fp
 803e1c0:	dfc00117 	ldw	ra,4(sp)
 803e1c4:	df000017 	ldw	fp,0(sp)
 803e1c8:	dec00204 	addi	sp,sp,8
 803e1cc:	f800283a 	ret

0803e1d0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 803e1d0:	defffa04 	addi	sp,sp,-24
 803e1d4:	dfc00515 	stw	ra,20(sp)
 803e1d8:	df000415 	stw	fp,16(sp)
 803e1dc:	df000404 	addi	fp,sp,16
 803e1e0:	e13ffe15 	stw	r4,-8(fp)
 803e1e4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 803e1e8:	e0bffe17 	ldw	r2,-8(fp)
 803e1ec:	10000326 	beq	r2,zero,803e1fc <alt_dev_llist_insert+0x2c>
 803e1f0:	e0bffe17 	ldw	r2,-8(fp)
 803e1f4:	10800217 	ldw	r2,8(r2)
 803e1f8:	1000051e 	bne	r2,zero,803e210 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
 803e1fc:	803e1800 	call	803e180 <alt_get_errno>
 803e200:	00c00584 	movi	r3,22
 803e204:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 803e208:	00bffa84 	movi	r2,-22
 803e20c:	00001306 	br	803e25c <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 803e210:	e0bffe17 	ldw	r2,-8(fp)
 803e214:	e0ffff17 	ldw	r3,-4(fp)
 803e218:	e0fffc15 	stw	r3,-16(fp)
 803e21c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 803e220:	e0bffd17 	ldw	r2,-12(fp)
 803e224:	e0fffc17 	ldw	r3,-16(fp)
 803e228:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 803e22c:	e0bffc17 	ldw	r2,-16(fp)
 803e230:	10c00017 	ldw	r3,0(r2)
 803e234:	e0bffd17 	ldw	r2,-12(fp)
 803e238:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 803e23c:	e0bffc17 	ldw	r2,-16(fp)
 803e240:	10800017 	ldw	r2,0(r2)
 803e244:	e0fffd17 	ldw	r3,-12(fp)
 803e248:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 803e24c:	e0bffc17 	ldw	r2,-16(fp)
 803e250:	e0fffd17 	ldw	r3,-12(fp)
 803e254:	10c00015 	stw	r3,0(r2)

  return 0;  
 803e258:	0005883a 	mov	r2,zero
}
 803e25c:	e037883a 	mov	sp,fp
 803e260:	dfc00117 	ldw	ra,4(sp)
 803e264:	df000017 	ldw	fp,0(sp)
 803e268:	dec00204 	addi	sp,sp,8
 803e26c:	f800283a 	ret

0803e270 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 803e270:	defffd04 	addi	sp,sp,-12
 803e274:	dfc00215 	stw	ra,8(sp)
 803e278:	df000115 	stw	fp,4(sp)
 803e27c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 803e280:	00820134 	movhi	r2,2052
 803e284:	10bb7604 	addi	r2,r2,-4648
 803e288:	e0bfff15 	stw	r2,-4(fp)
 803e28c:	00000606 	br	803e2a8 <_do_ctors+0x38>
        (*ctor) (); 
 803e290:	e0bfff17 	ldw	r2,-4(fp)
 803e294:	10800017 	ldw	r2,0(r2)
 803e298:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 803e29c:	e0bfff17 	ldw	r2,-4(fp)
 803e2a0:	10bfff04 	addi	r2,r2,-4
 803e2a4:	e0bfff15 	stw	r2,-4(fp)
 803e2a8:	e0ffff17 	ldw	r3,-4(fp)
 803e2ac:	00820134 	movhi	r2,2052
 803e2b0:	10bb7704 	addi	r2,r2,-4644
 803e2b4:	18bff62e 	bgeu	r3,r2,803e290 <_do_ctors+0x20>
        (*ctor) (); 
}
 803e2b8:	e037883a 	mov	sp,fp
 803e2bc:	dfc00117 	ldw	ra,4(sp)
 803e2c0:	df000017 	ldw	fp,0(sp)
 803e2c4:	dec00204 	addi	sp,sp,8
 803e2c8:	f800283a 	ret

0803e2cc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 803e2cc:	defffd04 	addi	sp,sp,-12
 803e2d0:	dfc00215 	stw	ra,8(sp)
 803e2d4:	df000115 	stw	fp,4(sp)
 803e2d8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 803e2dc:	00820134 	movhi	r2,2052
 803e2e0:	10bb7604 	addi	r2,r2,-4648
 803e2e4:	e0bfff15 	stw	r2,-4(fp)
 803e2e8:	00000606 	br	803e304 <_do_dtors+0x38>
        (*dtor) (); 
 803e2ec:	e0bfff17 	ldw	r2,-4(fp)
 803e2f0:	10800017 	ldw	r2,0(r2)
 803e2f4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 803e2f8:	e0bfff17 	ldw	r2,-4(fp)
 803e2fc:	10bfff04 	addi	r2,r2,-4
 803e300:	e0bfff15 	stw	r2,-4(fp)
 803e304:	e0ffff17 	ldw	r3,-4(fp)
 803e308:	00820134 	movhi	r2,2052
 803e30c:	10bb7704 	addi	r2,r2,-4644
 803e310:	18bff62e 	bgeu	r3,r2,803e2ec <_do_dtors+0x20>
        (*dtor) (); 
}
 803e314:	e037883a 	mov	sp,fp
 803e318:	dfc00117 	ldw	ra,4(sp)
 803e31c:	df000017 	ldw	fp,0(sp)
 803e320:	dec00204 	addi	sp,sp,8
 803e324:	f800283a 	ret

0803e328 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 803e328:	defffa04 	addi	sp,sp,-24
 803e32c:	dfc00515 	stw	ra,20(sp)
 803e330:	df000415 	stw	fp,16(sp)
 803e334:	df000404 	addi	fp,sp,16
 803e338:	e13ffe15 	stw	r4,-8(fp)
 803e33c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 803e340:	e0bfff17 	ldw	r2,-4(fp)
 803e344:	10800017 	ldw	r2,0(r2)
 803e348:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 803e34c:	e13ffe17 	ldw	r4,-8(fp)
 803e350:	802f72c0 	call	802f72c <strlen>
 803e354:	10800044 	addi	r2,r2,1
 803e358:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 803e35c:	00000d06 	br	803e394 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 803e360:	e0bffc17 	ldw	r2,-16(fp)
 803e364:	10c00217 	ldw	r3,8(r2)
 803e368:	e0bffd17 	ldw	r2,-12(fp)
 803e36c:	1809883a 	mov	r4,r3
 803e370:	e17ffe17 	ldw	r5,-8(fp)
 803e374:	100d883a 	mov	r6,r2
 803e378:	803ec300 	call	803ec30 <memcmp>
 803e37c:	1000021e 	bne	r2,zero,803e388 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 803e380:	e0bffc17 	ldw	r2,-16(fp)
 803e384:	00000706 	br	803e3a4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 803e388:	e0bffc17 	ldw	r2,-16(fp)
 803e38c:	10800017 	ldw	r2,0(r2)
 803e390:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 803e394:	e0fffc17 	ldw	r3,-16(fp)
 803e398:	e0bfff17 	ldw	r2,-4(fp)
 803e39c:	18bff01e 	bne	r3,r2,803e360 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 803e3a0:	0005883a 	mov	r2,zero
}
 803e3a4:	e037883a 	mov	sp,fp
 803e3a8:	dfc00117 	ldw	ra,4(sp)
 803e3ac:	df000017 	ldw	fp,0(sp)
 803e3b0:	dec00204 	addi	sp,sp,8
 803e3b4:	f800283a 	ret

0803e3b8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 803e3b8:	defffb04 	addi	sp,sp,-20
 803e3bc:	dfc00415 	stw	ra,16(sp)
 803e3c0:	df000315 	stw	fp,12(sp)
 803e3c4:	df000304 	addi	fp,sp,12
 803e3c8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 803e3cc:	00820134 	movhi	r2,2052
 803e3d0:	108c4a04 	addi	r2,r2,12584
 803e3d4:	10800017 	ldw	r2,0(r2)
 803e3d8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 803e3dc:	00003106 	br	803e4a4 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 803e3e0:	e0bffd17 	ldw	r2,-12(fp)
 803e3e4:	10800217 	ldw	r2,8(r2)
 803e3e8:	1009883a 	mov	r4,r2
 803e3ec:	802f72c0 	call	802f72c <strlen>
 803e3f0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 803e3f4:	e0bffd17 	ldw	r2,-12(fp)
 803e3f8:	10c00217 	ldw	r3,8(r2)
 803e3fc:	e0bffe17 	ldw	r2,-8(fp)
 803e400:	10bfffc4 	addi	r2,r2,-1
 803e404:	1885883a 	add	r2,r3,r2
 803e408:	10800003 	ldbu	r2,0(r2)
 803e40c:	10803fcc 	andi	r2,r2,255
 803e410:	1080201c 	xori	r2,r2,128
 803e414:	10bfe004 	addi	r2,r2,-128
 803e418:	10800bd8 	cmpnei	r2,r2,47
 803e41c:	1000031e 	bne	r2,zero,803e42c <alt_find_file+0x74>
    {
      len -= 1;
 803e420:	e0bffe17 	ldw	r2,-8(fp)
 803e424:	10bfffc4 	addi	r2,r2,-1
 803e428:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 803e42c:	e0bffe17 	ldw	r2,-8(fp)
 803e430:	e0ffff17 	ldw	r3,-4(fp)
 803e434:	1885883a 	add	r2,r3,r2
 803e438:	10800003 	ldbu	r2,0(r2)
 803e43c:	10803fcc 	andi	r2,r2,255
 803e440:	1080201c 	xori	r2,r2,128
 803e444:	10bfe004 	addi	r2,r2,-128
 803e448:	10800be0 	cmpeqi	r2,r2,47
 803e44c:	1000081e 	bne	r2,zero,803e470 <alt_find_file+0xb8>
 803e450:	e0bffe17 	ldw	r2,-8(fp)
 803e454:	e0ffff17 	ldw	r3,-4(fp)
 803e458:	1885883a 	add	r2,r3,r2
 803e45c:	10800003 	ldbu	r2,0(r2)
 803e460:	10803fcc 	andi	r2,r2,255
 803e464:	1080201c 	xori	r2,r2,128
 803e468:	10bfe004 	addi	r2,r2,-128
 803e46c:	10000a1e 	bne	r2,zero,803e498 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 803e470:	e0bffd17 	ldw	r2,-12(fp)
 803e474:	10c00217 	ldw	r3,8(r2)
 803e478:	e0bffe17 	ldw	r2,-8(fp)
 803e47c:	1809883a 	mov	r4,r3
 803e480:	e17fff17 	ldw	r5,-4(fp)
 803e484:	100d883a 	mov	r6,r2
 803e488:	803ec300 	call	803ec30 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 803e48c:	1000021e 	bne	r2,zero,803e498 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 803e490:	e0bffd17 	ldw	r2,-12(fp)
 803e494:	00000806 	br	803e4b8 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 803e498:	e0bffd17 	ldw	r2,-12(fp)
 803e49c:	10800017 	ldw	r2,0(r2)
 803e4a0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 803e4a4:	e0fffd17 	ldw	r3,-12(fp)
 803e4a8:	00820134 	movhi	r2,2052
 803e4ac:	108c4a04 	addi	r2,r2,12584
 803e4b0:	18bfcb1e 	bne	r3,r2,803e3e0 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 803e4b4:	0005883a 	mov	r2,zero
}
 803e4b8:	e037883a 	mov	sp,fp
 803e4bc:	dfc00117 	ldw	ra,4(sp)
 803e4c0:	df000017 	ldw	fp,0(sp)
 803e4c4:	dec00204 	addi	sp,sp,8
 803e4c8:	f800283a 	ret

0803e4cc <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
 803e4cc:	defffc04 	addi	sp,sp,-16
 803e4d0:	df000315 	stw	fp,12(sp)
 803e4d4:	df000304 	addi	fp,sp,12
 803e4d8:	e13fff15 	stw	r4,-4(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
 803e4dc:	e0bfff17 	ldw	r2,-4(fp)
 803e4e0:	10800217 	ldw	r2,8(r2)
 803e4e4:	1000021e 	bne	r2,zero,803e4f0 <alt_fs_reg+0x24>
  {
    return -ENODEV;
 803e4e8:	00bffb44 	movi	r2,-19
 803e4ec:	00001406 	br	803e540 <alt_fs_reg+0x74>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
 803e4f0:	e0bfff17 	ldw	r2,-4(fp)
 803e4f4:	00c20134 	movhi	r3,2052
 803e4f8:	18cc4a04 	addi	r3,r3,12584
 803e4fc:	e0fffd15 	stw	r3,-12(fp)
 803e500:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 803e504:	e0bffe17 	ldw	r2,-8(fp)
 803e508:	e0fffd17 	ldw	r3,-12(fp)
 803e50c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 803e510:	e0bffd17 	ldw	r2,-12(fp)
 803e514:	10c00017 	ldw	r3,0(r2)
 803e518:	e0bffe17 	ldw	r2,-8(fp)
 803e51c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 803e520:	e0bffd17 	ldw	r2,-12(fp)
 803e524:	10800017 	ldw	r2,0(r2)
 803e528:	e0fffe17 	ldw	r3,-8(fp)
 803e52c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 803e530:	e0bffd17 	ldw	r2,-12(fp)
 803e534:	e0fffe17 	ldw	r3,-8(fp)
 803e538:	10c00015 	stw	r3,0(r2)

  return 0;
 803e53c:	0005883a 	mov	r2,zero
} 
 803e540:	e037883a 	mov	sp,fp
 803e544:	df000017 	ldw	fp,0(sp)
 803e548:	dec00104 	addi	sp,sp,4
 803e54c:	f800283a 	ret

0803e550 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 803e550:	defffa04 	addi	sp,sp,-24
 803e554:	dfc00515 	stw	ra,20(sp)
 803e558:	df000415 	stw	fp,16(sp)
 803e55c:	dc000315 	stw	r16,12(sp)
 803e560:	df000304 	addi	fp,sp,12
 803e564:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 803e568:	00bffa04 	movi	r2,-24
 803e56c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 803e570:	e03ffd15 	stw	zero,-12(fp)
 803e574:	00002106 	br	803e5fc <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
 803e578:	04020134 	movhi	r16,2052
 803e57c:	8407bd04 	addi	r16,r16,7924
 803e580:	e0bffd17 	ldw	r2,-12(fp)
 803e584:	1009883a 	mov	r4,r2
 803e588:	01400304 	movi	r5,12
 803e58c:	802c2180 	call	802c218 <__mulsi3>
 803e590:	8085883a 	add	r2,r16,r2
 803e594:	10800017 	ldw	r2,0(r2)
 803e598:	1000151e 	bne	r2,zero,803e5f0 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
 803e59c:	04020134 	movhi	r16,2052
 803e5a0:	8407bd04 	addi	r16,r16,7924
 803e5a4:	e0bffd17 	ldw	r2,-12(fp)
 803e5a8:	1009883a 	mov	r4,r2
 803e5ac:	01400304 	movi	r5,12
 803e5b0:	802c2180 	call	802c218 <__mulsi3>
 803e5b4:	8085883a 	add	r2,r16,r2
 803e5b8:	e0ffff17 	ldw	r3,-4(fp)
 803e5bc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 803e5c0:	00820134 	movhi	r2,2052
 803e5c4:	108c4e04 	addi	r2,r2,12600
 803e5c8:	10c00017 	ldw	r3,0(r2)
 803e5cc:	e0bffd17 	ldw	r2,-12(fp)
 803e5d0:	1880040e 	bge	r3,r2,803e5e4 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
 803e5d4:	00820134 	movhi	r2,2052
 803e5d8:	108c4e04 	addi	r2,r2,12600
 803e5dc:	e0fffd17 	ldw	r3,-12(fp)
 803e5e0:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 803e5e4:	e0bffd17 	ldw	r2,-12(fp)
 803e5e8:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 803e5ec:	00000606 	br	803e608 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 803e5f0:	e0bffd17 	ldw	r2,-12(fp)
 803e5f4:	10800044 	addi	r2,r2,1
 803e5f8:	e0bffd15 	stw	r2,-12(fp)
 803e5fc:	e0bffd17 	ldw	r2,-12(fp)
 803e600:	10800810 	cmplti	r2,r2,32
 803e604:	103fdc1e 	bne	r2,zero,803e578 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 803e608:	e0bffe17 	ldw	r2,-8(fp)
}
 803e60c:	e037883a 	mov	sp,fp
 803e610:	dfc00217 	ldw	ra,8(sp)
 803e614:	df000117 	ldw	fp,4(sp)
 803e618:	dc000017 	ldw	r16,0(sp)
 803e61c:	dec00304 	addi	sp,sp,12
 803e620:	f800283a 	ret

0803e624 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 803e624:	deffff04 	addi	sp,sp,-4
 803e628:	df000015 	stw	fp,0(sp)
 803e62c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 803e630:	e037883a 	mov	sp,fp
 803e634:	df000017 	ldw	fp,0(sp)
 803e638:	dec00104 	addi	sp,sp,4
 803e63c:	f800283a 	ret

0803e640 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 803e640:	defff904 	addi	sp,sp,-28
 803e644:	dfc00615 	stw	ra,24(sp)
 803e648:	df000515 	stw	fp,20(sp)
 803e64c:	df000504 	addi	fp,sp,20
 803e650:	e13ffc15 	stw	r4,-16(fp)
 803e654:	e17ffd15 	stw	r5,-12(fp)
 803e658:	e1bffe15 	stw	r6,-8(fp)
 803e65c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 803e660:	e0800217 	ldw	r2,8(fp)
 803e664:	d8800015 	stw	r2,0(sp)
 803e668:	e13ffc17 	ldw	r4,-16(fp)
 803e66c:	e17ffd17 	ldw	r5,-12(fp)
 803e670:	e1bffe17 	ldw	r6,-8(fp)
 803e674:	e1ffff17 	ldw	r7,-4(fp)
 803e678:	803e8180 	call	803e818 <alt_iic_isr_register>
}  
 803e67c:	e037883a 	mov	sp,fp
 803e680:	dfc00117 	ldw	ra,4(sp)
 803e684:	df000017 	ldw	fp,0(sp)
 803e688:	dec00204 	addi	sp,sp,8
 803e68c:	f800283a 	ret

0803e690 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 803e690:	defff904 	addi	sp,sp,-28
 803e694:	df000615 	stw	fp,24(sp)
 803e698:	df000604 	addi	fp,sp,24
 803e69c:	e13ffe15 	stw	r4,-8(fp)
 803e6a0:	e17fff15 	stw	r5,-4(fp)
 803e6a4:	e0bfff17 	ldw	r2,-4(fp)
 803e6a8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 803e6ac:	0005303a 	rdctl	r2,status
 803e6b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 803e6b4:	e0fffb17 	ldw	r3,-20(fp)
 803e6b8:	00bfff84 	movi	r2,-2
 803e6bc:	1884703a 	and	r2,r3,r2
 803e6c0:	1001703a 	wrctl	status,r2
  
  return context;
 803e6c4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 803e6c8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 803e6cc:	e0bffa17 	ldw	r2,-24(fp)
 803e6d0:	00c00044 	movi	r3,1
 803e6d4:	1884983a 	sll	r2,r3,r2
 803e6d8:	1007883a 	mov	r3,r2
 803e6dc:	00820134 	movhi	r2,2052
 803e6e0:	10933404 	addi	r2,r2,19664
 803e6e4:	10800017 	ldw	r2,0(r2)
 803e6e8:	1886b03a 	or	r3,r3,r2
 803e6ec:	00820134 	movhi	r2,2052
 803e6f0:	10933404 	addi	r2,r2,19664
 803e6f4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 803e6f8:	00820134 	movhi	r2,2052
 803e6fc:	10933404 	addi	r2,r2,19664
 803e700:	10800017 	ldw	r2,0(r2)
 803e704:	100170fa 	wrctl	ienable,r2
 803e708:	e0bffc17 	ldw	r2,-16(fp)
 803e70c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 803e710:	e0bffd17 	ldw	r2,-12(fp)
 803e714:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 803e718:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 803e71c:	e037883a 	mov	sp,fp
 803e720:	df000017 	ldw	fp,0(sp)
 803e724:	dec00104 	addi	sp,sp,4
 803e728:	f800283a 	ret

0803e72c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 803e72c:	defff904 	addi	sp,sp,-28
 803e730:	df000615 	stw	fp,24(sp)
 803e734:	df000604 	addi	fp,sp,24
 803e738:	e13ffe15 	stw	r4,-8(fp)
 803e73c:	e17fff15 	stw	r5,-4(fp)
 803e740:	e0bfff17 	ldw	r2,-4(fp)
 803e744:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 803e748:	0005303a 	rdctl	r2,status
 803e74c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 803e750:	e0fffb17 	ldw	r3,-20(fp)
 803e754:	00bfff84 	movi	r2,-2
 803e758:	1884703a 	and	r2,r3,r2
 803e75c:	1001703a 	wrctl	status,r2
  
  return context;
 803e760:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 803e764:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 803e768:	e0bffa17 	ldw	r2,-24(fp)
 803e76c:	00c00044 	movi	r3,1
 803e770:	1884983a 	sll	r2,r3,r2
 803e774:	0084303a 	nor	r2,zero,r2
 803e778:	1007883a 	mov	r3,r2
 803e77c:	00820134 	movhi	r2,2052
 803e780:	10933404 	addi	r2,r2,19664
 803e784:	10800017 	ldw	r2,0(r2)
 803e788:	1886703a 	and	r3,r3,r2
 803e78c:	00820134 	movhi	r2,2052
 803e790:	10933404 	addi	r2,r2,19664
 803e794:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 803e798:	00820134 	movhi	r2,2052
 803e79c:	10933404 	addi	r2,r2,19664
 803e7a0:	10800017 	ldw	r2,0(r2)
 803e7a4:	100170fa 	wrctl	ienable,r2
 803e7a8:	e0bffc17 	ldw	r2,-16(fp)
 803e7ac:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 803e7b0:	e0bffd17 	ldw	r2,-12(fp)
 803e7b4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 803e7b8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 803e7bc:	e037883a 	mov	sp,fp
 803e7c0:	df000017 	ldw	fp,0(sp)
 803e7c4:	dec00104 	addi	sp,sp,4
 803e7c8:	f800283a 	ret

0803e7cc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 803e7cc:	defffc04 	addi	sp,sp,-16
 803e7d0:	df000315 	stw	fp,12(sp)
 803e7d4:	df000304 	addi	fp,sp,12
 803e7d8:	e13ffe15 	stw	r4,-8(fp)
 803e7dc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 803e7e0:	000530fa 	rdctl	r2,ienable
 803e7e4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 803e7e8:	e0bfff17 	ldw	r2,-4(fp)
 803e7ec:	00c00044 	movi	r3,1
 803e7f0:	1884983a 	sll	r2,r3,r2
 803e7f4:	1007883a 	mov	r3,r2
 803e7f8:	e0bffd17 	ldw	r2,-12(fp)
 803e7fc:	1884703a 	and	r2,r3,r2
 803e800:	1004c03a 	cmpne	r2,r2,zero
 803e804:	10803fcc 	andi	r2,r2,255
}
 803e808:	e037883a 	mov	sp,fp
 803e80c:	df000017 	ldw	fp,0(sp)
 803e810:	dec00104 	addi	sp,sp,4
 803e814:	f800283a 	ret

0803e818 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 803e818:	defff504 	addi	sp,sp,-44
 803e81c:	dfc00a15 	stw	ra,40(sp)
 803e820:	df000915 	stw	fp,36(sp)
 803e824:	df000904 	addi	fp,sp,36
 803e828:	e13ffc15 	stw	r4,-16(fp)
 803e82c:	e17ffd15 	stw	r5,-12(fp)
 803e830:	e1bffe15 	stw	r6,-8(fp)
 803e834:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 803e838:	00bffa84 	movi	r2,-22
 803e83c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 803e840:	e0bffd17 	ldw	r2,-12(fp)
 803e844:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 803e848:	e0bff817 	ldw	r2,-32(fp)
 803e84c:	10800808 	cmpgei	r2,r2,32
 803e850:	1000271e 	bne	r2,zero,803e8f0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 803e854:	0005303a 	rdctl	r2,status
 803e858:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 803e85c:	e0fffa17 	ldw	r3,-24(fp)
 803e860:	00bfff84 	movi	r2,-2
 803e864:	1884703a 	and	r2,r3,r2
 803e868:	1001703a 	wrctl	status,r2
  
  return context;
 803e86c:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 803e870:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 803e874:	00c30134 	movhi	r3,3076
 803e878:	18d38e04 	addi	r3,r3,20024
 803e87c:	e0bff817 	ldw	r2,-32(fp)
 803e880:	100490fa 	slli	r2,r2,3
 803e884:	1885883a 	add	r2,r3,r2
 803e888:	e0fffe17 	ldw	r3,-8(fp)
 803e88c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 803e890:	00c30134 	movhi	r3,3076
 803e894:	18d38e04 	addi	r3,r3,20024
 803e898:	e0bff817 	ldw	r2,-32(fp)
 803e89c:	100490fa 	slli	r2,r2,3
 803e8a0:	1885883a 	add	r2,r3,r2
 803e8a4:	10800104 	addi	r2,r2,4
 803e8a8:	e0ffff17 	ldw	r3,-4(fp)
 803e8ac:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 803e8b0:	e0bffe17 	ldw	r2,-8(fp)
 803e8b4:	10000526 	beq	r2,zero,803e8cc <alt_iic_isr_register+0xb4>
 803e8b8:	e0bff817 	ldw	r2,-32(fp)
 803e8bc:	e13ffc17 	ldw	r4,-16(fp)
 803e8c0:	100b883a 	mov	r5,r2
 803e8c4:	803e6900 	call	803e690 <alt_ic_irq_enable>
 803e8c8:	00000406 	br	803e8dc <alt_iic_isr_register+0xc4>
 803e8cc:	e0bff817 	ldw	r2,-32(fp)
 803e8d0:	e13ffc17 	ldw	r4,-16(fp)
 803e8d4:	100b883a 	mov	r5,r2
 803e8d8:	803e72c0 	call	803e72c <alt_ic_irq_disable>
 803e8dc:	e0bff715 	stw	r2,-36(fp)
 803e8e0:	e0bff917 	ldw	r2,-28(fp)
 803e8e4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 803e8e8:	e0bffb17 	ldw	r2,-20(fp)
 803e8ec:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 803e8f0:	e0bff717 	ldw	r2,-36(fp)
}
 803e8f4:	e037883a 	mov	sp,fp
 803e8f8:	dfc00117 	ldw	ra,4(sp)
 803e8fc:	df000017 	ldw	fp,0(sp)
 803e900:	dec00204 	addi	sp,sp,8
 803e904:	f800283a 	ret

0803e908 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 803e908:	defff804 	addi	sp,sp,-32
 803e90c:	dfc00715 	stw	ra,28(sp)
 803e910:	df000615 	stw	fp,24(sp)
 803e914:	dc000515 	stw	r16,20(sp)
 803e918:	df000504 	addi	fp,sp,20
 803e91c:	e13ffc15 	stw	r4,-16(fp)
 803e920:	e17ffd15 	stw	r5,-12(fp)
 803e924:	e1bffe15 	stw	r6,-8(fp)
 803e928:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 803e92c:	e13ffd17 	ldw	r4,-12(fp)
 803e930:	e17ffe17 	ldw	r5,-8(fp)
 803e934:	e1bfff17 	ldw	r6,-4(fp)
 803e938:	803c6b00 	call	803c6b0 <open>
 803e93c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 803e940:	e0bffb17 	ldw	r2,-20(fp)
 803e944:	10002216 	blt	r2,zero,803e9d0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 803e948:	04020134 	movhi	r16,2052
 803e94c:	8407bd04 	addi	r16,r16,7924
 803e950:	e0bffb17 	ldw	r2,-20(fp)
 803e954:	1009883a 	mov	r4,r2
 803e958:	01400304 	movi	r5,12
 803e95c:	802c2180 	call	802c218 <__mulsi3>
 803e960:	8085883a 	add	r2,r16,r2
 803e964:	10c00017 	ldw	r3,0(r2)
 803e968:	e0bffc17 	ldw	r2,-16(fp)
 803e96c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 803e970:	04020134 	movhi	r16,2052
 803e974:	8407bd04 	addi	r16,r16,7924
 803e978:	e0bffb17 	ldw	r2,-20(fp)
 803e97c:	1009883a 	mov	r4,r2
 803e980:	01400304 	movi	r5,12
 803e984:	802c2180 	call	802c218 <__mulsi3>
 803e988:	8085883a 	add	r2,r16,r2
 803e98c:	10800104 	addi	r2,r2,4
 803e990:	10c00017 	ldw	r3,0(r2)
 803e994:	e0bffc17 	ldw	r2,-16(fp)
 803e998:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 803e99c:	04020134 	movhi	r16,2052
 803e9a0:	8407bd04 	addi	r16,r16,7924
 803e9a4:	e0bffb17 	ldw	r2,-20(fp)
 803e9a8:	1009883a 	mov	r4,r2
 803e9ac:	01400304 	movi	r5,12
 803e9b0:	802c2180 	call	802c218 <__mulsi3>
 803e9b4:	8085883a 	add	r2,r16,r2
 803e9b8:	10800204 	addi	r2,r2,8
 803e9bc:	10c00017 	ldw	r3,0(r2)
 803e9c0:	e0bffc17 	ldw	r2,-16(fp)
 803e9c4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 803e9c8:	e13ffb17 	ldw	r4,-20(fp)
 803e9cc:	803c94c0 	call	803c94c <alt_release_fd>
  }
} 
 803e9d0:	e037883a 	mov	sp,fp
 803e9d4:	dfc00217 	ldw	ra,8(sp)
 803e9d8:	df000117 	ldw	fp,4(sp)
 803e9dc:	dc000017 	ldw	r16,0(sp)
 803e9e0:	dec00304 	addi	sp,sp,12
 803e9e4:	f800283a 	ret

0803e9e8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 803e9e8:	defffb04 	addi	sp,sp,-20
 803e9ec:	dfc00415 	stw	ra,16(sp)
 803e9f0:	df000315 	stw	fp,12(sp)
 803e9f4:	df000304 	addi	fp,sp,12
 803e9f8:	e13ffd15 	stw	r4,-12(fp)
 803e9fc:	e17ffe15 	stw	r5,-8(fp)
 803ea00:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 803ea04:	01020134 	movhi	r4,2052
 803ea08:	2107c004 	addi	r4,r4,7936
 803ea0c:	e17ffd17 	ldw	r5,-12(fp)
 803ea10:	01800044 	movi	r6,1
 803ea14:	01c07fc4 	movi	r7,511
 803ea18:	803e9080 	call	803e908 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 803ea1c:	01020134 	movhi	r4,2052
 803ea20:	2107bd04 	addi	r4,r4,7924
 803ea24:	e17ffe17 	ldw	r5,-8(fp)
 803ea28:	000d883a 	mov	r6,zero
 803ea2c:	01c07fc4 	movi	r7,511
 803ea30:	803e9080 	call	803e908 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 803ea34:	01020134 	movhi	r4,2052
 803ea38:	2107c304 	addi	r4,r4,7948
 803ea3c:	e17fff17 	ldw	r5,-4(fp)
 803ea40:	01800044 	movi	r6,1
 803ea44:	01c07fc4 	movi	r7,511
 803ea48:	803e9080 	call	803e908 <alt_open_fd>
}  
 803ea4c:	e037883a 	mov	sp,fp
 803ea50:	dfc00117 	ldw	ra,4(sp)
 803ea54:	df000017 	ldw	fp,0(sp)
 803ea58:	dec00204 	addi	sp,sp,8
 803ea5c:	f800283a 	ret

0803ea60 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 803ea60:	defffa04 	addi	sp,sp,-24
 803ea64:	df000515 	stw	fp,20(sp)
 803ea68:	df000504 	addi	fp,sp,20
 803ea6c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 803ea70:	0005303a 	rdctl	r2,status
 803ea74:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 803ea78:	e0fffc17 	ldw	r3,-16(fp)
 803ea7c:	00bfff84 	movi	r2,-2
 803ea80:	1884703a 	and	r2,r3,r2
 803ea84:	1001703a 	wrctl	status,r2
  
  return context;
 803ea88:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 803ea8c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 803ea90:	e0bfff17 	ldw	r2,-4(fp)
 803ea94:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 803ea98:	e0bffd17 	ldw	r2,-12(fp)
 803ea9c:	10800017 	ldw	r2,0(r2)
 803eaa0:	e0fffd17 	ldw	r3,-12(fp)
 803eaa4:	18c00117 	ldw	r3,4(r3)
 803eaa8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 803eaac:	e0bffd17 	ldw	r2,-12(fp)
 803eab0:	10800117 	ldw	r2,4(r2)
 803eab4:	e0fffd17 	ldw	r3,-12(fp)
 803eab8:	18c00017 	ldw	r3,0(r3)
 803eabc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 803eac0:	e0bffd17 	ldw	r2,-12(fp)
 803eac4:	e0fffd17 	ldw	r3,-12(fp)
 803eac8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 803eacc:	e0bffd17 	ldw	r2,-12(fp)
 803ead0:	e0fffd17 	ldw	r3,-12(fp)
 803ead4:	10c00015 	stw	r3,0(r2)
 803ead8:	e0bffb17 	ldw	r2,-20(fp)
 803eadc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 803eae0:	e0bffe17 	ldw	r2,-8(fp)
 803eae4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 803eae8:	e037883a 	mov	sp,fp
 803eaec:	df000017 	ldw	fp,0(sp)
 803eaf0:	dec00104 	addi	sp,sp,4
 803eaf4:	f800283a 	ret

0803eaf8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 803eaf8:	defffb04 	addi	sp,sp,-20
 803eafc:	dfc00415 	stw	ra,16(sp)
 803eb00:	df000315 	stw	fp,12(sp)
 803eb04:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 803eb08:	d0a02517 	ldw	r2,-32620(gp)
 803eb0c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 803eb10:	d0a6f717 	ldw	r2,-25636(gp)
 803eb14:	10800044 	addi	r2,r2,1
 803eb18:	d0a6f715 	stw	r2,-25636(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 803eb1c:	00002e06 	br	803ebd8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 803eb20:	e0bffd17 	ldw	r2,-12(fp)
 803eb24:	10800017 	ldw	r2,0(r2)
 803eb28:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 803eb2c:	e0bffd17 	ldw	r2,-12(fp)
 803eb30:	10800403 	ldbu	r2,16(r2)
 803eb34:	10803fcc 	andi	r2,r2,255
 803eb38:	10000426 	beq	r2,zero,803eb4c <alt_tick+0x54>
 803eb3c:	d0a6f717 	ldw	r2,-25636(gp)
 803eb40:	1000021e 	bne	r2,zero,803eb4c <alt_tick+0x54>
    {
      alarm->rollover = 0;
 803eb44:	e0bffd17 	ldw	r2,-12(fp)
 803eb48:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 803eb4c:	e0bffd17 	ldw	r2,-12(fp)
 803eb50:	10800217 	ldw	r2,8(r2)
 803eb54:	d0e6f717 	ldw	r3,-25636(gp)
 803eb58:	18801d36 	bltu	r3,r2,803ebd0 <alt_tick+0xd8>
 803eb5c:	e0bffd17 	ldw	r2,-12(fp)
 803eb60:	10800403 	ldbu	r2,16(r2)
 803eb64:	10803fcc 	andi	r2,r2,255
 803eb68:	1000191e 	bne	r2,zero,803ebd0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 803eb6c:	e0bffd17 	ldw	r2,-12(fp)
 803eb70:	10c00317 	ldw	r3,12(r2)
 803eb74:	e0bffd17 	ldw	r2,-12(fp)
 803eb78:	10800517 	ldw	r2,20(r2)
 803eb7c:	1009883a 	mov	r4,r2
 803eb80:	183ee83a 	callr	r3
 803eb84:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 803eb88:	e0bfff17 	ldw	r2,-4(fp)
 803eb8c:	1000031e 	bne	r2,zero,803eb9c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 803eb90:	e13ffd17 	ldw	r4,-12(fp)
 803eb94:	803ea600 	call	803ea60 <alt_alarm_stop>
 803eb98:	00000d06 	br	803ebd0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 803eb9c:	e0bffd17 	ldw	r2,-12(fp)
 803eba0:	10c00217 	ldw	r3,8(r2)
 803eba4:	e0bfff17 	ldw	r2,-4(fp)
 803eba8:	1887883a 	add	r3,r3,r2
 803ebac:	e0bffd17 	ldw	r2,-12(fp)
 803ebb0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 803ebb4:	e0bffd17 	ldw	r2,-12(fp)
 803ebb8:	10c00217 	ldw	r3,8(r2)
 803ebbc:	d0a6f717 	ldw	r2,-25636(gp)
 803ebc0:	1880032e 	bgeu	r3,r2,803ebd0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 803ebc4:	e0bffd17 	ldw	r2,-12(fp)
 803ebc8:	00c00044 	movi	r3,1
 803ebcc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 803ebd0:	e0bffe17 	ldw	r2,-8(fp)
 803ebd4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 803ebd8:	e0fffd17 	ldw	r3,-12(fp)
 803ebdc:	d0a02504 	addi	r2,gp,-32620
 803ebe0:	18bfcf1e 	bne	r3,r2,803eb20 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 803ebe4:	0001883a 	nop
}
 803ebe8:	e037883a 	mov	sp,fp
 803ebec:	dfc00117 	ldw	ra,4(sp)
 803ebf0:	df000017 	ldw	fp,0(sp)
 803ebf4:	dec00204 	addi	sp,sp,8
 803ebf8:	f800283a 	ret

0803ebfc <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 803ebfc:	deffff04 	addi	sp,sp,-4
 803ec00:	df000015 	stw	fp,0(sp)
 803ec04:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 803ec08:	000170fa 	wrctl	ienable,zero
}
 803ec0c:	e037883a 	mov	sp,fp
 803ec10:	df000017 	ldw	fp,0(sp)
 803ec14:	dec00104 	addi	sp,sp,4
 803ec18:	f800283a 	ret

0803ec1c <atexit>:
 803ec1c:	200b883a 	mov	r5,r4
 803ec20:	000d883a 	mov	r6,zero
 803ec24:	0009883a 	mov	r4,zero
 803ec28:	000f883a 	mov	r7,zero
 803ec2c:	803ecac1 	jmpi	803ecac <__register_exitproc>

0803ec30 <memcmp>:
 803ec30:	01c000c4 	movi	r7,3
 803ec34:	3980192e 	bgeu	r7,r6,803ec9c <memcmp+0x6c>
 803ec38:	2904b03a 	or	r2,r5,r4
 803ec3c:	11c4703a 	and	r2,r2,r7
 803ec40:	10000f26 	beq	r2,zero,803ec80 <memcmp+0x50>
 803ec44:	20c00003 	ldbu	r3,0(r4)
 803ec48:	28800003 	ldbu	r2,0(r5)
 803ec4c:	1880151e 	bne	r3,r2,803eca4 <memcmp+0x74>
 803ec50:	31bfff84 	addi	r6,r6,-2
 803ec54:	01ffffc4 	movi	r7,-1
 803ec58:	00000406 	br	803ec6c <memcmp+0x3c>
 803ec5c:	20c00003 	ldbu	r3,0(r4)
 803ec60:	28800003 	ldbu	r2,0(r5)
 803ec64:	31bfffc4 	addi	r6,r6,-1
 803ec68:	18800e1e 	bne	r3,r2,803eca4 <memcmp+0x74>
 803ec6c:	21000044 	addi	r4,r4,1
 803ec70:	29400044 	addi	r5,r5,1
 803ec74:	31fff91e 	bne	r6,r7,803ec5c <memcmp+0x2c>
 803ec78:	0005883a 	mov	r2,zero
 803ec7c:	f800283a 	ret
 803ec80:	20c00017 	ldw	r3,0(r4)
 803ec84:	28800017 	ldw	r2,0(r5)
 803ec88:	1880041e 	bne	r3,r2,803ec9c <memcmp+0x6c>
 803ec8c:	31bfff04 	addi	r6,r6,-4
 803ec90:	21000104 	addi	r4,r4,4
 803ec94:	29400104 	addi	r5,r5,4
 803ec98:	39bff936 	bltu	r7,r6,803ec80 <memcmp+0x50>
 803ec9c:	303fe91e 	bne	r6,zero,803ec44 <memcmp+0x14>
 803eca0:	003ff506 	br	803ec78 <memcmp+0x48>
 803eca4:	1885c83a 	sub	r2,r3,r2
 803eca8:	f800283a 	ret

0803ecac <__register_exitproc>:
 803ecac:	defffa04 	addi	sp,sp,-24
 803ecb0:	00820134 	movhi	r2,2052
 803ecb4:	108c4404 	addi	r2,r2,12560
 803ecb8:	dc000315 	stw	r16,12(sp)
 803ecbc:	14000017 	ldw	r16,0(r2)
 803ecc0:	dc400415 	stw	r17,16(sp)
 803ecc4:	dfc00515 	stw	ra,20(sp)
 803ecc8:	80805217 	ldw	r2,328(r16)
 803eccc:	2023883a 	mov	r17,r4
 803ecd0:	10003e26 	beq	r2,zero,803edcc <__register_exitproc+0x120>
 803ecd4:	10c00117 	ldw	r3,4(r2)
 803ecd8:	020007c4 	movi	r8,31
 803ecdc:	40c0180e 	bge	r8,r3,803ed40 <__register_exitproc+0x94>
 803ece0:	008200f4 	movhi	r2,2051
 803ece4:	10b90104 	addi	r2,r2,-7164
 803ece8:	1000061e 	bne	r2,zero,803ed04 <__register_exitproc+0x58>
 803ecec:	00bfffc4 	movi	r2,-1
 803ecf0:	dfc00517 	ldw	ra,20(sp)
 803ecf4:	dc400417 	ldw	r17,16(sp)
 803ecf8:	dc000317 	ldw	r16,12(sp)
 803ecfc:	dec00604 	addi	sp,sp,24
 803ed00:	f800283a 	ret
 803ed04:	01006404 	movi	r4,400
 803ed08:	d9400015 	stw	r5,0(sp)
 803ed0c:	d9800115 	stw	r6,4(sp)
 803ed10:	d9c00215 	stw	r7,8(sp)
 803ed14:	802e4040 	call	802e404 <malloc>
 803ed18:	d9400017 	ldw	r5,0(sp)
 803ed1c:	d9800117 	ldw	r6,4(sp)
 803ed20:	d9c00217 	ldw	r7,8(sp)
 803ed24:	103ff126 	beq	r2,zero,803ecec <__register_exitproc+0x40>
 803ed28:	80c05217 	ldw	r3,328(r16)
 803ed2c:	10000115 	stw	zero,4(r2)
 803ed30:	10c00015 	stw	r3,0(r2)
 803ed34:	80805215 	stw	r2,328(r16)
 803ed38:	10006215 	stw	zero,392(r2)
 803ed3c:	10006315 	stw	zero,396(r2)
 803ed40:	10c00117 	ldw	r3,4(r2)
 803ed44:	88000d1e 	bne	r17,zero,803ed7c <__register_exitproc+0xd0>
 803ed48:	19000084 	addi	r4,r3,2
 803ed4c:	2109883a 	add	r4,r4,r4
 803ed50:	18c00044 	addi	r3,r3,1
 803ed54:	2109883a 	add	r4,r4,r4
 803ed58:	1109883a 	add	r4,r2,r4
 803ed5c:	10c00115 	stw	r3,4(r2)
 803ed60:	0005883a 	mov	r2,zero
 803ed64:	21400015 	stw	r5,0(r4)
 803ed68:	dfc00517 	ldw	ra,20(sp)
 803ed6c:	dc400417 	ldw	r17,16(sp)
 803ed70:	dc000317 	ldw	r16,12(sp)
 803ed74:	dec00604 	addi	sp,sp,24
 803ed78:	f800283a 	ret
 803ed7c:	02400044 	movi	r9,1
 803ed80:	12806217 	ldw	r10,392(r2)
 803ed84:	48d2983a 	sll	r9,r9,r3
 803ed88:	19000804 	addi	r4,r3,32
 803ed8c:	18d1883a 	add	r8,r3,r3
 803ed90:	2109883a 	add	r4,r4,r4
 803ed94:	4211883a 	add	r8,r8,r8
 803ed98:	2109883a 	add	r4,r4,r4
 803ed9c:	1109883a 	add	r4,r2,r4
 803eda0:	1211883a 	add	r8,r2,r8
 803eda4:	5254b03a 	or	r10,r10,r9
 803eda8:	21c02215 	stw	r7,136(r4)
 803edac:	41802215 	stw	r6,136(r8)
 803edb0:	12806215 	stw	r10,392(r2)
 803edb4:	01000084 	movi	r4,2
 803edb8:	893fe31e 	bne	r17,r4,803ed48 <__register_exitproc+0x9c>
 803edbc:	11006317 	ldw	r4,396(r2)
 803edc0:	2252b03a 	or	r9,r4,r9
 803edc4:	12406315 	stw	r9,396(r2)
 803edc8:	003fdf06 	br	803ed48 <__register_exitproc+0x9c>
 803edcc:	00830134 	movhi	r2,3076
 803edd0:	1093ce04 	addi	r2,r2,20280
 803edd4:	80805215 	stw	r2,328(r16)
 803edd8:	003fbe06 	br	803ecd4 <__register_exitproc+0x28>

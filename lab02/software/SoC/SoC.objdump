
SoC.elf:     file format elf32-littlenios2
SoC.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x0000d620 memsz 0x0000d620 flags r-x
    LOAD off    0x0000e640 vaddr 0x0800d640 paddr 0x0800f098 align 2**12
         filesz 0x00001a58 memsz 0x00001a58 flags rw-
    LOAD off    0x00010af0 vaddr 0x08010af0 paddr 0x08010af0 align 2**12
         filesz 0x00000000 memsz 0x000026f4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000cb30  080001b8  080001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000958  0800cce8  0800cce8  0000dce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a58  0800d640  0800f098  0000e640  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000026f4  08010af0  08010af0  00010af0  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00010098  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000db8  00000000  00000000  000100c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00022d37  00000000  00000000  00010e78  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000090fa  00000000  00000000  00033baf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000a34a  00000000  00000000  0003cca9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000018f0  00000000  00000000  00046ff4  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00002f0f  00000000  00000000  000488e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00010d9b  00000000  00000000  0004b7f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  0005c590  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a98  00000000  00000000  0005c5a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  000600f7  2**0
                  CONTENTS, READONLY
 17 .cpu          00000003  00000000  00000000  000600fa  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  000600fd  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  000600fe  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  000600ff  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00060103  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  00060107  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  0006010b  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  00060114  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  0006011d  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000003  00000000  00000000  00060126  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000031  00000000  00000000  00060129  2**0
                  CONTENTS, READONLY
 28 .jdi          000041dd  00000000  00000000  0006015a  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00059679  00000000  00000000  00064337  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
080001b8 l    d  .text	00000000 .text
0800cce8 l    d  .rodata	00000000 .rodata
0800d640 l    d  .rwdata	00000000 .rwdata
08010af0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../SoC_bsp//obj/HAL/src/crt0.o
080001f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
08000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 ci_crc.c
00000000 l    df *ABS*	00000000 crc.c
080002f4 l     F .text	0000008c reflect
00000000 l    df *ABS*	00000000 crc_main.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
08000cc4 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
0800d640 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
08000fe0 l     F .text	00000034 __sprint_r
0800d36a l     O .rodata	00000010 blanks.3515
0800d37a l     O .rodata	00000010 zeroes.3516
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
080031c8 l     F .text	0000023c quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08004c38 l     F .text	00000008 __fp_lock
08004c40 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
0800d3ac l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0800d4f4 l     O .rodata	0000000c p05.2435
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
0800921c l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0800a598 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0800a6b4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0800a71c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0800a81c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0800a910 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0800a9fc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0800abd8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0800f088 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0800ae4c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0800af8c l     F .text	00000038 alt_dev_reg
0800dffc l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0800b2a0 l     F .text	00000204 altera_avalon_jtag_uart_irq
0800b4a4 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0800bae0 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0800be78 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0800c304 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0800c45c l     F .text	00000050 alt_get_errno
0800c4ac l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 
080076f8 g     F .text	00000074 _mprec_log10
080077e8 g     F .text	00000084 __any_on
08008468 g     F .text	00000064 _isatty_r
0800d3dc g     O .rodata	00000028 __mprec_tinytens
0800ab20 g     F .text	00000078 alt_main
0800a554 g     F .text	00000044 __ashldi3
08000ebc g     F .text	00000084 _puts_r
08012f54 g     O .bss	00000100 alt_irq
080084cc g     F .text	0000006c _lseek_r
0800f098 g       *ABS*	00000000 __flash_rwdata_start
08009abc g     F .text	0000005c __eqdf2
080131e4 g       *ABS*	00000000 __alt_heap_start
08000e80 g     F .text	0000003c printf
0800800c g     F .text	0000005c __sseek
08004cdc g     F .text	0000010c __sinit
08005974 g     F .text	0000009c _setlocale_r
08004c54 g     F .text	00000078 __sfmoreglue
0800abb8 g     F .text	00000020 __malloc_unlock
08010b1c g     O .bss	00000004 altera_avalon_timer_ts_freq
080065b4 g     F .text	0000018c memmove
08004ccc g     F .text	00000010 _cleanup
0800681c g     F .text	000000a8 _Balloc
08009b74 g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
08000000 g     F .entry	0000000c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
08008400 g     F .text	00000068 _fstat_r
08010b08 g     O .bss	00000004 errno
08010b10 g     O .bss	00000004 alt_argv
0801705c g       *ABS*	00000000 _gp
0800de7c g     O .rwdata	00000180 alt_fd_list
0800c8b0 g     F .text	00000090 alt_find_dev
08006474 g     F .text	00000140 memcpy
08004c48 g     F .text	0000000c _cleanup_r
08009c98 g     F .text	000000d4 __floatsidf
0800c3e4 g     F .text	00000078 alt_io_redirect
08009c3c g     F .text	0000005c __ltdf2
0800cce8 g       *ABS*	00000000 __DTOR_END__
08000f40 g     F .text	00000014 puts
08007654 g     F .text	000000a4 __ratio
0800b6a4 g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
08000e54 g     F .text	0000002c _printf_r
08000de4 g     F .text	00000008 __udivsi3
0800a86c g     F .text	000000a4 isatty
0800d42c g     O .rodata	000000c8 __mprec_tens
08005a10 g     F .text	0000000c __locale_charset
08010b04 g     O .bss	00000004 __malloc_top_pad
0800f064 g     O .rwdata	00000004 __mb_cur_max
08005a1c g     F .text	0000000c _localeconv_r
08006c4c g     F .text	0000003c __i2b
08005330 g     F .text	000004e4 __sfvwrite_r
08007ecc g     F .text	00000064 _sbrk_r
08008538 g     F .text	0000006c _read_r
0800da40 g     O .rwdata	0000000c __lc_ctype
0800f080 g     O .rwdata	00000004 alt_max_fd
0800a33c g     F .text	00000104 __unpack_d
080082b0 g     F .text	0000013c _fclose_r
08004c08 g     F .text	00000030 fflush
08010b00 g     O .bss	00000004 __malloc_max_sbrked_mem
08009570 g     F .text	00000054 __adddf3
080073c8 g     F .text	00000148 __b2d
08008bf4 g     F .text	00000628 __umoddi3
0800aa4c g     F .text	000000d4 lseek
0800f05c g     O .rwdata	00000004 _global_impure_ptr
0800786c g     F .text	000005fc _realloc_r
080131e4 g       *ABS*	00000000 __bss_end
0800c214 g     F .text	000000f0 alt_iic_isr_register
0800c78c g     F .text	00000104 alt_tick
080085a4 g     F .text	00000650 __udivdi3
0800d404 g     O .rodata	00000028 __mprec_bigtens
08006a30 g     F .text	00000104 __s2b
08009e40 g     F .text	0000011c __floatunsidf
08007168 g     F .text	00000058 __mcmp
08004ef4 g     F .text	00000018 __fp_lock_all
0800c1c8 g     F .text	0000004c alt_ic_irq_enabled
0800c6f4 g     F .text	00000098 alt_alarm_stop
08010b20 g     O .bss	00000004 alt_irq_active
080000ec g     F .exceptions	000000cc alt_irq_handler
0800de54 g     O .rwdata	00000028 alt_dev_null
0800be5c g     F .text	0000001c alt_dcache_flush_all
08006b34 g     F .text	00000068 __hi0bits
08009d6c g     F .text	000000d4 __fixdfsi
0800f098 g       *ABS*	00000000 __ram_rwdata_end
0800f078 g     O .rwdata	00000008 alt_dev_list
0800ae9c g     F .text	000000f0 write
08000380 g     F .text	000000ec crcSlow
0800bcf4 g     F .text	00000028 alt_timestamp_freq
0800d640 g       *ABS*	00000000 __ram_rodata_end
0800a76c g     F .text	000000b0 fstat
0800a510 g     F .text	00000044 __lshrdi3
08006ee0 g     F .text	0000012c __pow5mult
08010af8 g     O .bss	00000004 __nlocale_changed
08000dec g     F .text	00000008 __umodsi3
080131e4 g       *ABS*	00000000 end
08010f54 g     O .bss	00002000 data_buffer_region
0800b1e0 g     F .text	000000c0 altera_avalon_jtag_uart_init
0800cce8 g       *ABS*	00000000 __CTOR_LIST__
10000000 g       *ABS*	00000000 __alt_stack_pointer
0800bb54 g     F .text	00000088 alt_avalon_timer_sc_init
0800a06c g     F .text	000000ac __clzsi2
0800b8bc g     F .text	00000224 altera_avalon_jtag_uart_write
08004ee4 g     F .text	00000004 __sfp_lock_acquire
0800637c g     F .text	000000f8 memchr
08001014 g     F .text	00001e7c ___vfprintf_internal_r
08005060 g     F .text	000002d0 _free_r
08003028 g     F .text	000001a0 __call_exitprocs
08010af4 g     O .bss	00000004 __mlocale_changed
0800f068 g     O .rwdata	00000004 __malloc_sbrk_base
080001b8 g     F .text	0000003c _start
08010b24 g     O .bss	00000004 _alt_tick_rate
0800700c g     F .text	0000015c __lshift
08010b28 g     O .bss	00000004 _alt_nticks
0800ac28 g     F .text	000000f4 read
0800aff8 g     F .text	00000084 alt_sys_init
0800cbb8 g     F .text	00000130 __register_exitproc
08006c88 g     F .text	00000258 __multiply
0800b548 g     F .text	00000068 altera_avalon_jtag_uart_close
08000df4 g     F .text	00000028 __mulsi3
0800d640 g       *ABS*	00000000 __ram_rwdata_start
0800cce8 g       *ABS*	00000000 __ram_rodata_start
08010b2c g     O .bss	00000028 __malloc_current_mallinfo
08007510 g     F .text	00000144 __d2b
0800b07c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0800ca54 g     F .text	000000d4 alt_get_fd
0800a440 g     F .text	000000d0 __fpcmp_parts_d
0800824c g     F .text	00000064 _close_r
0800cb3c g     F .text	0000007c memcmp
0800b13c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
080131e4 g       *ABS*	00000000 __alt_stack_base
0800b18c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08002eb4 g     F .text	00000174 __swsetup_r
08009908 g     F .text	000001b4 __divdf3
0800046c g     F .text	000000bc crcInit
08004de8 g     F .text	000000fc __sfp
0800776c g     F .text	0000007c __copybits
0800da4c g     O .rwdata	00000408 __malloc_av_
08004ef0 g     F .text	00000004 __sinit_lock_release
08009624 g     F .text	000002e4 __muldf3
08007f30 g     F .text	00000054 __sread
080001f4 g     F .text	00000100 crcCI
0800c940 g     F .text	00000114 alt_find_file
0800bec8 g     F .text	000000a0 alt_dev_llist_insert
0800ab98 g     F .text	00000020 __malloc_lock
0800ad9c g     F .text	000000b0 sbrk
08004a20 g     F .text	000001e8 _fflush_r
08008180 g     F .text	000000cc _calloc_r
08010af0 g       *ABS*	00000000 __bss_start
08006740 g     F .text	000000dc memset
080005ec g     F .text	000006d8 main
08010b14 g     O .bss	00000004 alt_envp
08010afc g     O .bss	00000004 __malloc_max_total_mem
0800b0dc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
08008068 g     F .text	00000008 __sclose
10000000 g       *ABS*	00000000 __alt_heap_limit
080083ec g     F .text	00000014 fclose
0800bbdc g     F .text	00000088 alt_timestamp_start
08013054 g     O .bss	00000190 _atexit0
08003404 g     F .text	0000161c _dtoa_r
08005bf8 g     F .text	00000784 _malloc_r
0800f084 g     O .rwdata	00000004 alt_errno
08005814 g     F .text	000000a8 _fwalk
08000d38 g     F .text	00000050 __divsi3
0800d500 g     O .rodata	00000014 __thenan_df
08004f24 g     F .text	0000013c _malloc_trim_r
0800cce8 g       *ABS*	00000000 __CTOR_END__
08008070 g     F .text	000000a4 strcmp
0800cce8 g       *ABS*	00000000 __flash_rodata_start
0800cce8 g       *ABS*	00000000 __DTOR_LIST__
08009b18 g     F .text	0000005c __nedf2
0800afc4 g     F .text	00000034 alt_irq_init
0800ad1c g     F .text	00000080 alt_release_fd
0800d514 g     O .rodata	00000100 __clz_tab
08010af0 g     O .bss	00000004 _PathLocale
0800cb28 g     F .text	00000014 atexit
08008114 g     F .text	0000006c _write_r
08005a28 g     F .text	0000001c setlocale
0800f060 g     O .rwdata	00000004 _impure_ptr
08010b0c g     O .bss	00000004 alt_argc
08010b18 g     O .bss	00000004 altera_avalon_timer_ts_base
0800bfc4 g     F .text	0000005c _do_dtors
08000528 g     F .text	000000c4 crcFast
08000020 g       .exceptions	00000000 alt_irq_entry
08007368 g     F .text	00000060 __ulp
08007e68 g     F .text	00000038 __isinfd
08004f0c g     F .text	00000018 __fp_unlock_all
0800f070 g     O .rwdata	00000008 alt_fs_list
08000020 g       *ABS*	00000000 __ram_exceptions_start
08005a44 g     F .text	0000000c localeconv
0800bc64 g     F .text	00000090 alt_timestamp
0800c03c g     F .text	00000050 alt_ic_isr_register
0800f098 g       *ABS*	00000000 _edata
080131e4 g       *ABS*	00000000 _end
08010b54 g     O .bss	00000400 crcTable
080001b8 g       *ABS*	00000000 __ram_exceptions_end
0800b5b0 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0800c128 g     F .text	000000a0 alt_ic_irq_disable
08007f84 g     F .text	00000088 __swrite
0800f06c g     O .rwdata	00000004 __malloc_trim_threshold
0800c890 g     F .text	00000020 altera_nios2_qsys_irq_init
08000e1c g     F .text	00000038 exit
080058bc g     F .text	000000b8 _fwalk_reent
080071c0 g     F .text	000001a8 __mdiff
08000d88 g     F .text	0000005c __modsi3
10000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08004ee8 g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
08007ea0 g     F .text	0000002c __isnand
0800a6e0 g     F .text	0000003c _exit
0800bd1c g     F .text	00000140 alt_alarm_start
08009f5c g     F .text	00000110 __muldi3
08005a50 g     F .text	000001a8 __smakebuf_r
08000f54 g     F .text	0000008c strlen
0800c59c g     F .text	00000158 open
08009bd8 g     F .text	00000064 __gedf2
0800c020 g     F .text	0000001c alt_icache_flush_all
0800f08c g     O .rwdata	00000004 alt_priority_mask
0800c08c g     F .text	0000009c alt_ic_irq_enable
08002e90 g     F .text	00000024 __vfprintf_internal
080095c4 g     F .text	00000060 __subdf3
08006b9c g     F .text	000000b0 __lo0bits
0800f090 g     O .rwdata	00000008 alt_alarm_list
0800bf68 g     F .text	0000005c _do_ctors
0800a5e8 g     F .text	000000cc close
0800a97c g     F .text	00000080 alt_load
0800a118 g     F .text	00000224 __pack_d
00000000  w      *UND*	00000000 free
08004eec g     F .text	00000004 __sinit_lock_acquire
080068ec g     F .text	00000144 __multadd
080068c4 g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08406e14 	ori	at,at,440
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000ec0 	call	80000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000306 	br	8000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 800008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)

08000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 8000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 8000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 800009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000e8:	ef80083a 	eret

080000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000ec:	defff904 	addi	sp,sp,-28
 80000f0:	dfc00615 	stw	ra,24(sp)
 80000f4:	df000515 	stw	fp,20(sp)
 80000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 80000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000100:	0005313a 	rdctl	r2,ipending
 8000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000114:	00800044 	movi	r2,1
 8000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800011c:	e0fffb17 	ldw	r3,-20(fp)
 8000120:	e0bffc17 	ldw	r2,-16(fp)
 8000124:	1884703a 	and	r2,r3,r2
 8000128:	10001726 	beq	r2,zero,8000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800012c:	00c20074 	movhi	r3,2049
 8000130:	18cbd504 	addi	r3,r3,12116
 8000134:	e0bffd17 	ldw	r2,-12(fp)
 8000138:	100490fa 	slli	r2,r2,3
 800013c:	1885883a 	add	r2,r3,r2
 8000140:	10c00017 	ldw	r3,0(r2)
 8000144:	01020074 	movhi	r4,2049
 8000148:	210bd504 	addi	r4,r4,12116
 800014c:	e0bffd17 	ldw	r2,-12(fp)
 8000150:	100490fa 	slli	r2,r2,3
 8000154:	2085883a 	add	r2,r4,r2
 8000158:	10800104 	addi	r2,r2,4
 800015c:	10800017 	ldw	r2,0(r2)
 8000160:	1009883a 	mov	r4,r2
 8000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800016c:	0005313a 	rdctl	r2,ipending
 8000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 8000178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 800017c:	e0bffb17 	ldw	r2,-20(fp)
 8000180:	103fe31e 	bne	r2,zero,8000110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 8000184:	00000706 	br	80001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 8000188:	e0bffc17 	ldw	r2,-16(fp)
 800018c:	1085883a 	add	r2,r2,r2
 8000190:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000194:	e0bffd17 	ldw	r2,-12(fp)
 8000198:	10800044 	addi	r2,r2,1
 800019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80001a0:	003fde06 	br	800011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 80001a4:	e037883a 	mov	sp,fp
 80001a8:	dfc00117 	ldw	ra,4(sp)
 80001ac:	df000017 	ldw	fp,0(sp)
 80001b0:	dec00204 	addi	sp,sp,8
 80001b4:	f800283a 	ret

Disassembly of section .text:

080001b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 80001b8:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
 80001bc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 80001c0:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 80001c4:	d69c1714 	ori	gp,gp,28764
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 80001c8:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 80001cc:	1082bc14 	ori	r2,r2,2800

    movhi r3, %hi(__bss_end)
 80001d0:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 80001d4:	18cc7914 	ori	r3,r3,12772

    beq r2, r3, 1f
 80001d8:	10c00326 	beq	r2,r3,80001e8 <_start+0x30>

0:
    stw zero, (r2)
 80001dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 80001e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 80001e4:	10fffd36 	bltu	r2,r3,80001dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 80001e8:	800a97c0 	call	800a97c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 80001ec:	800ab200 	call	800ab20 <alt_main>

080001f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 80001f0:	003fff06 	br	80001f0 <alt_after_alt_main>

080001f4 <crcCI>:
 * n = 6, Read  96 bits data from the custom instruction
 * n = 7, Read 128 bits data from the custom instruction*/
#define CRC_CI_MACRO(n, A)        __builtin_custom_ini(ALT_CI_CRC_0_N + (n & 0x7), (A))

unsigned long crcCI(unsigned char * input_data, unsigned long input_data_length)
{
 80001f4:	defffb04 	addi	sp,sp,-20
 80001f8:	df000415 	stw	fp,16(sp)
 80001fc:	df000404 	addi	fp,sp,16
 8000200:	e13ffe15 	stw	r4,-8(fp)
 8000204:	e17fff15 	stw	r5,-4(fp)
  unsigned long index;
  /* copy of the data buffer pointer so that it can advance by different widths */
  void * input_data_copy = (void *)input_data;
 8000208:	e0bffe17 	ldw	r2,-8(fp)
 800020c:	e0bffd15 	stw	r2,-12(fp)

  /* The custom instruction CRC will initialize to the inital remainder value */    
  CRC_CI_MACRO(0,0);
 8000210:	0005883a 	mov	r2,zero
 8000214:	1005c032 	custom	0,r2,r2,zero
  
  /* Write 32 bit data to the custom instruction.  If the buffer does not end
   * on a 32 bit boundary then the remaining data will be sent to the custom
   * instruction in the 'if' statement below.
   */
  for(index = 0; index < (input_data_length & 0xFFFFFFFC); index+=4)
 8000218:	e03ffc15 	stw	zero,-16(fp)
 800021c:	00000906 	br	8000244 <crcCI+0x50>
  {
    CRC_CI_MACRO(3, *(unsigned long *)input_data_copy);
 8000220:	e0bffd17 	ldw	r2,-12(fp)
 8000224:	10800017 	ldw	r2,0(r2)
 8000228:	1005c0f2 	custom	3,r2,r2,zero
    input_data_copy += 4;  /* void pointer, must move by 4 for each word */
 800022c:	e0bffd17 	ldw	r2,-12(fp)
 8000230:	10800104 	addi	r2,r2,4
 8000234:	e0bffd15 	stw	r2,-12(fp)
  
  /* Write 32 bit data to the custom instruction.  If the buffer does not end
   * on a 32 bit boundary then the remaining data will be sent to the custom
   * instruction in the 'if' statement below.
   */
  for(index = 0; index < (input_data_length & 0xFFFFFFFC); index+=4)
 8000238:	e0bffc17 	ldw	r2,-16(fp)
 800023c:	10800104 	addi	r2,r2,4
 8000240:	e0bffc15 	stw	r2,-16(fp)
 8000244:	e0ffff17 	ldw	r3,-4(fp)
 8000248:	00bfff04 	movi	r2,-4
 800024c:	1884703a 	and	r2,r3,r2
 8000250:	e0fffc17 	ldw	r3,-16(fp)
 8000254:	18bff236 	bltu	r3,r2,8000220 <crcCI+0x2c>
    CRC_CI_MACRO(3, *(unsigned long *)input_data_copy);
    input_data_copy += 4;  /* void pointer, must move by 4 for each word */
  }

  /* Write the remainder of the buffer if it does not end on a word boundary */  
  if((input_data_length & 0x3) == 0x3)  /* 3 bytes left */
 8000258:	e0bfff17 	ldw	r2,-4(fp)
 800025c:	108000cc 	andi	r2,r2,3
 8000260:	108000d8 	cmpnei	r2,r2,3
 8000264:	10000c1e 	bne	r2,zero,8000298 <crcCI+0xa4>
  {
    CRC_CI_MACRO(2, *(unsigned short *)input_data_copy);
 8000268:	e0bffd17 	ldw	r2,-12(fp)
 800026c:	1080000b 	ldhu	r2,0(r2)
 8000270:	10bfffcc 	andi	r2,r2,65535
 8000274:	1005c0b2 	custom	2,r2,r2,zero
    input_data_copy += 2;
 8000278:	e0bffd17 	ldw	r2,-12(fp)
 800027c:	10800084 	addi	r2,r2,2
 8000280:	e0bffd15 	stw	r2,-12(fp)
    CRC_CI_MACRO(1, *(unsigned char *)input_data_copy);
 8000284:	e0bffd17 	ldw	r2,-12(fp)
 8000288:	10800003 	ldbu	r2,0(r2)
 800028c:	10803fcc 	andi	r2,r2,255
 8000290:	1005c072 	custom	1,r2,r2,zero
 8000294:	00001106 	br	80002dc <crcCI+0xe8>
  }
  else if((input_data_length & 0x3) == 0x2) /* 2 bytes left */
 8000298:	e0bfff17 	ldw	r2,-4(fp)
 800029c:	108000cc 	andi	r2,r2,3
 80002a0:	10800098 	cmpnei	r2,r2,2
 80002a4:	1000051e 	bne	r2,zero,80002bc <crcCI+0xc8>
  {
    CRC_CI_MACRO(2, *(unsigned short *)input_data_copy);    
 80002a8:	e0bffd17 	ldw	r2,-12(fp)
 80002ac:	1080000b 	ldhu	r2,0(r2)
 80002b0:	10bfffcc 	andi	r2,r2,65535
 80002b4:	1005c0b2 	custom	2,r2,r2,zero
 80002b8:	00000806 	br	80002dc <crcCI+0xe8>
  }
  else if((input_data_length & 0x3) == 0x1) /* 1 byte left */
 80002bc:	e0bfff17 	ldw	r2,-4(fp)
 80002c0:	108000cc 	andi	r2,r2,3
 80002c4:	10800058 	cmpnei	r2,r2,1
 80002c8:	1000041e 	bne	r2,zero,80002dc <crcCI+0xe8>
  {
    CRC_CI_MACRO(1, *(unsigned char *)input_data_copy);    
 80002cc:	e0bffd17 	ldw	r2,-12(fp)
 80002d0:	10800003 	ldbu	r2,0(r2)
 80002d4:	10803fcc 	andi	r2,r2,255
 80002d8:	1005c072 	custom	1,r2,r2,zero
  
  /* There are 4 registers in the CRC custom instruction.  Since
   * this example uses CRC-32 only the first register must be read
   * in order to receive the full result.
   */
  return CRC_CI_MACRO(4, 0);
 80002dc:	0005883a 	mov	r2,zero
 80002e0:	1005c132 	custom	4,r2,r2,zero
}
 80002e4:	e037883a 	mov	sp,fp
 80002e8:	df000017 	ldw	fp,0(sp)
 80002ec:	dec00104 	addi	sp,sp,4
 80002f0:	f800283a 	ret

080002f4 <reflect>:
 * Returns:   The reflection of the original data.
 *
 *********************************************************************/
static unsigned long
reflect(unsigned long data, unsigned char nBits)
{
 80002f4:	defffb04 	addi	sp,sp,-20
 80002f8:	df000415 	stw	fp,16(sp)
 80002fc:	df000404 	addi	fp,sp,16
 8000300:	e13ffe15 	stw	r4,-8(fp)
 8000304:	2805883a 	mov	r2,r5
 8000308:	e0bfff05 	stb	r2,-4(fp)
  unsigned long  reflection = 0x00000000;
 800030c:	e03ffc15 	stw	zero,-16(fp)
  unsigned char  bit;

  /*
   * Reflect the data about the center bit.
   */
  for (bit = 0; bit < nBits; ++bit)
 8000310:	e03ffd05 	stb	zero,-12(fp)
 8000314:	00001206 	br	8000360 <reflect+0x6c>
  {
    /*
     * If the LSB bit is set, set the reflection of it.
     */
    if (data & 0x01)
 8000318:	e0bffe17 	ldw	r2,-8(fp)
 800031c:	1080004c 	andi	r2,r2,1
 8000320:	10000926 	beq	r2,zero,8000348 <reflect+0x54>
    {
      reflection |= (1 << ((nBits - 1) - bit));
 8000324:	e0bfff03 	ldbu	r2,-4(fp)
 8000328:	10ffffc4 	addi	r3,r2,-1
 800032c:	e0bffd03 	ldbu	r2,-12(fp)
 8000330:	1885c83a 	sub	r2,r3,r2
 8000334:	00c00044 	movi	r3,1
 8000338:	1884983a 	sll	r2,r3,r2
 800033c:	e0fffc17 	ldw	r3,-16(fp)
 8000340:	1884b03a 	or	r2,r3,r2
 8000344:	e0bffc15 	stw	r2,-16(fp)
    }

    data = (data >> 1);
 8000348:	e0bffe17 	ldw	r2,-8(fp)
 800034c:	1004d07a 	srli	r2,r2,1
 8000350:	e0bffe15 	stw	r2,-8(fp)
  unsigned char  bit;

  /*
   * Reflect the data about the center bit.
   */
  for (bit = 0; bit < nBits; ++bit)
 8000354:	e0bffd03 	ldbu	r2,-12(fp)
 8000358:	10800044 	addi	r2,r2,1
 800035c:	e0bffd05 	stb	r2,-12(fp)
 8000360:	e0fffd03 	ldbu	r3,-12(fp)
 8000364:	e0bfff03 	ldbu	r2,-4(fp)
 8000368:	18bfeb36 	bltu	r3,r2,8000318 <reflect+0x24>
    }

    data = (data >> 1);
  }

  return (reflection);
 800036c:	e0bffc17 	ldw	r2,-16(fp)

} /* reflect() */
 8000370:	e037883a 	mov	sp,fp
 8000374:	df000017 	ldw	fp,0(sp)
 8000378:	dec00104 	addi	sp,sp,4
 800037c:	f800283a 	ret

08000380 <crcSlow>:
 * Returns:   The CRC of the message.
 *
 *********************************************************************/
crc
crcSlow(unsigned char const message[], int nBytes)
{
 8000380:	defff904 	addi	sp,sp,-28
 8000384:	dfc00615 	stw	ra,24(sp)
 8000388:	df000515 	stw	fp,20(sp)
 800038c:	df000504 	addi	fp,sp,20
 8000390:	e13ffe15 	stw	r4,-8(fp)
 8000394:	e17fff15 	stw	r5,-4(fp)
    crc            remainder = INITIAL_REMAINDER;
 8000398:	00bfffc4 	movi	r2,-1
 800039c:	e0bffb15 	stw	r2,-20(fp)


    /*
     * Perform modulo-2 division, a byte at a time.
     */
    for (byte = 0; byte < nBytes; ++byte)
 80003a0:	e03ffc15 	stw	zero,-16(fp)
 80003a4:	00002506 	br	800043c <crcSlow+0xbc>
    {
        /*
         * Bring the next byte into the remainder.
         */
        remainder ^= (REFLECT_DATA(message[byte]) << (WIDTH - 8));
 80003a8:	e0bffc17 	ldw	r2,-16(fp)
 80003ac:	e0fffe17 	ldw	r3,-8(fp)
 80003b0:	1885883a 	add	r2,r3,r2
 80003b4:	10800003 	ldbu	r2,0(r2)
 80003b8:	10803fcc 	andi	r2,r2,255
 80003bc:	1009883a 	mov	r4,r2
 80003c0:	01400204 	movi	r5,8
 80003c4:	80002f40 	call	80002f4 <reflect>
 80003c8:	10803fcc 	andi	r2,r2,255
 80003cc:	1004963a 	slli	r2,r2,24
 80003d0:	e0fffb17 	ldw	r3,-20(fp)
 80003d4:	1884f03a 	xor	r2,r3,r2
 80003d8:	e0bffb15 	stw	r2,-20(fp)

        /*
         * Perform modulo-2 division, a bit at a time.
         */
        for (bit = 8; bit > 0; --bit)
 80003dc:	00800204 	movi	r2,8
 80003e0:	e0bffd05 	stb	r2,-12(fp)
 80003e4:	00001006 	br	8000428 <crcSlow+0xa8>
        {
            /*
             * Try to divide the current data bit.
             */
            if (remainder & TOPBIT)
 80003e8:	e0bffb17 	ldw	r2,-20(fp)
 80003ec:	1000080e 	bge	r2,zero,8000410 <crcSlow+0x90>
            {
                remainder = (remainder << 1) ^ POLYNOMIAL;
 80003f0:	e0bffb17 	ldw	r2,-20(fp)
 80003f4:	1085883a 	add	r2,r2,r2
 80003f8:	1007883a 	mov	r3,r2
 80003fc:	00813074 	movhi	r2,1217
 8000400:	10876dc4 	addi	r2,r2,7607
 8000404:	1884f03a 	xor	r2,r3,r2
 8000408:	e0bffb15 	stw	r2,-20(fp)
 800040c:	00000306 	br	800041c <crcSlow+0x9c>
            }
            else
            {
                remainder = (remainder << 1);
 8000410:	e0bffb17 	ldw	r2,-20(fp)
 8000414:	1085883a 	add	r2,r2,r2
 8000418:	e0bffb15 	stw	r2,-20(fp)
        remainder ^= (REFLECT_DATA(message[byte]) << (WIDTH - 8));

        /*
         * Perform modulo-2 division, a bit at a time.
         */
        for (bit = 8; bit > 0; --bit)
 800041c:	e0bffd03 	ldbu	r2,-12(fp)
 8000420:	10bfffc4 	addi	r2,r2,-1
 8000424:	e0bffd05 	stb	r2,-12(fp)
 8000428:	e0bffd03 	ldbu	r2,-12(fp)
 800042c:	103fee1e 	bne	r2,zero,80003e8 <crcSlow+0x68>


    /*
     * Perform modulo-2 division, a byte at a time.
     */
    for (byte = 0; byte < nBytes; ++byte)
 8000430:	e0bffc17 	ldw	r2,-16(fp)
 8000434:	10800044 	addi	r2,r2,1
 8000438:	e0bffc15 	stw	r2,-16(fp)
 800043c:	e0fffc17 	ldw	r3,-16(fp)
 8000440:	e0bfff17 	ldw	r2,-4(fp)
 8000444:	18bfd816 	blt	r3,r2,80003a8 <crcSlow+0x28>
    }

    /*
     * The final remainder is the CRC result.
     */
    return (REFLECT_REMAINDER(remainder) ^ FINAL_XOR_VALUE);
 8000448:	e13ffb17 	ldw	r4,-20(fp)
 800044c:	01400804 	movi	r5,32
 8000450:	80002f40 	call	80002f4 <reflect>
 8000454:	0084303a 	nor	r2,zero,r2

}   /* crcSlow() */
 8000458:	e037883a 	mov	sp,fp
 800045c:	dfc00117 	ldw	ra,4(sp)
 8000460:	df000017 	ldw	fp,0(sp)
 8000464:	dec00204 	addi	sp,sp,8
 8000468:	f800283a 	ret

0800046c <crcInit>:
 * Returns:   None defined.
 *
 *********************************************************************/
void
crcInit(void)
{
 800046c:	defffc04 	addi	sp,sp,-16
 8000470:	df000315 	stw	fp,12(sp)
 8000474:	df000304 	addi	fp,sp,12


    /*
     * Compute the remainder of each possible dividend.
     */
    for (dividend = 0; dividend < 256; ++dividend)
 8000478:	e03ffe15 	stw	zero,-8(fp)
 800047c:	00002306 	br	800050c <crcInit+0xa0>
    {
        /*
         * Start with the dividend followed by zeros.
         */
        remainder = dividend << (WIDTH - 8);
 8000480:	e0bffe17 	ldw	r2,-8(fp)
 8000484:	1004963a 	slli	r2,r2,24
 8000488:	e0bffd15 	stw	r2,-12(fp)

        /*
         * Perform modulo-2 division, a bit at a time.
         */
        for (bit = 8; bit > 0; --bit)
 800048c:	00800204 	movi	r2,8
 8000490:	e0bfff05 	stb	r2,-4(fp)
 8000494:	00001006 	br	80004d8 <crcInit+0x6c>
        {
            /*
             * Try to divide the current data bit.
             */     
            if (remainder & TOPBIT)
 8000498:	e0bffd17 	ldw	r2,-12(fp)
 800049c:	1000080e 	bge	r2,zero,80004c0 <crcInit+0x54>
            {
                remainder = (remainder << 1) ^ POLYNOMIAL;
 80004a0:	e0bffd17 	ldw	r2,-12(fp)
 80004a4:	1085883a 	add	r2,r2,r2
 80004a8:	1007883a 	mov	r3,r2
 80004ac:	00813074 	movhi	r2,1217
 80004b0:	10876dc4 	addi	r2,r2,7607
 80004b4:	1884f03a 	xor	r2,r3,r2
 80004b8:	e0bffd15 	stw	r2,-12(fp)
 80004bc:	00000306 	br	80004cc <crcInit+0x60>
            }
            else
            {
                remainder = (remainder << 1);
 80004c0:	e0bffd17 	ldw	r2,-12(fp)
 80004c4:	1085883a 	add	r2,r2,r2
 80004c8:	e0bffd15 	stw	r2,-12(fp)
        remainder = dividend << (WIDTH - 8);

        /*
         * Perform modulo-2 division, a bit at a time.
         */
        for (bit = 8; bit > 0; --bit)
 80004cc:	e0bfff03 	ldbu	r2,-4(fp)
 80004d0:	10bfffc4 	addi	r2,r2,-1
 80004d4:	e0bfff05 	stb	r2,-4(fp)
 80004d8:	e0bfff03 	ldbu	r2,-4(fp)
 80004dc:	103fee1e 	bne	r2,zero,8000498 <crcInit+0x2c>
        }

        /*
         * Store the result into the table.
         */
        crcTable[dividend] = remainder;
 80004e0:	00c20074 	movhi	r3,2049
 80004e4:	18c2d504 	addi	r3,r3,2900
 80004e8:	e0bffe17 	ldw	r2,-8(fp)
 80004ec:	1085883a 	add	r2,r2,r2
 80004f0:	1085883a 	add	r2,r2,r2
 80004f4:	1885883a 	add	r2,r3,r2
 80004f8:	e0fffd17 	ldw	r3,-12(fp)
 80004fc:	10c00015 	stw	r3,0(r2)


    /*
     * Compute the remainder of each possible dividend.
     */
    for (dividend = 0; dividend < 256; ++dividend)
 8000500:	e0bffe17 	ldw	r2,-8(fp)
 8000504:	10800044 	addi	r2,r2,1
 8000508:	e0bffe15 	stw	r2,-8(fp)
 800050c:	e0bffe17 	ldw	r2,-8(fp)
 8000510:	10804010 	cmplti	r2,r2,256
 8000514:	103fda1e 	bne	r2,zero,8000480 <crcInit+0x14>
         * Store the result into the table.
         */
        crcTable[dividend] = remainder;
    }

}   /* crcInit() */
 8000518:	e037883a 	mov	sp,fp
 800051c:	df000017 	ldw	fp,0(sp)
 8000520:	dec00104 	addi	sp,sp,4
 8000524:	f800283a 	ret

08000528 <crcFast>:
 * Returns:   The CRC of the message.
 *
 *********************************************************************/
crc
crcFast(unsigned char const message[], int nBytes)
{
 8000528:	defff904 	addi	sp,sp,-28
 800052c:	dfc00615 	stw	ra,24(sp)
 8000530:	df000515 	stw	fp,20(sp)
 8000534:	df000504 	addi	fp,sp,20
 8000538:	e13ffe15 	stw	r4,-8(fp)
 800053c:	e17fff15 	stw	r5,-4(fp)
    crc            remainder = INITIAL_REMAINDER;
 8000540:	00bfffc4 	movi	r2,-1
 8000544:	e0bffb15 	stw	r2,-20(fp)


    /*
     * Divide the message by the polynomial, a byte at a time.
     */
    for (byte = 0; byte < nBytes; ++byte)
 8000548:	e03ffc15 	stw	zero,-16(fp)
 800054c:	00001b06 	br	80005bc <crcFast+0x94>
    {
        data = REFLECT_DATA(message[byte]) ^ (remainder >> (WIDTH - 8));
 8000550:	e0bffc17 	ldw	r2,-16(fp)
 8000554:	e0fffe17 	ldw	r3,-8(fp)
 8000558:	1885883a 	add	r2,r3,r2
 800055c:	10800003 	ldbu	r2,0(r2)
 8000560:	10803fcc 	andi	r2,r2,255
 8000564:	1009883a 	mov	r4,r2
 8000568:	01400204 	movi	r5,8
 800056c:	80002f40 	call	80002f4 <reflect>
 8000570:	1007883a 	mov	r3,r2
 8000574:	e0bffb17 	ldw	r2,-20(fp)
 8000578:	1004d63a 	srli	r2,r2,24
 800057c:	1884f03a 	xor	r2,r3,r2
 8000580:	e0bffd05 	stb	r2,-12(fp)
      remainder = crcTable[data] ^ (remainder << 8);
 8000584:	e0bffd03 	ldbu	r2,-12(fp)
 8000588:	00c20074 	movhi	r3,2049
 800058c:	18c2d504 	addi	r3,r3,2900
 8000590:	1085883a 	add	r2,r2,r2
 8000594:	1085883a 	add	r2,r2,r2
 8000598:	1885883a 	add	r2,r3,r2
 800059c:	10c00017 	ldw	r3,0(r2)
 80005a0:	e0bffb17 	ldw	r2,-20(fp)
 80005a4:	1004923a 	slli	r2,r2,8
 80005a8:	1884f03a 	xor	r2,r3,r2
 80005ac:	e0bffb15 	stw	r2,-20(fp)


    /*
     * Divide the message by the polynomial, a byte at a time.
     */
    for (byte = 0; byte < nBytes; ++byte)
 80005b0:	e0bffc17 	ldw	r2,-16(fp)
 80005b4:	10800044 	addi	r2,r2,1
 80005b8:	e0bffc15 	stw	r2,-16(fp)
 80005bc:	e0fffc17 	ldw	r3,-16(fp)
 80005c0:	e0bfff17 	ldw	r2,-4(fp)
 80005c4:	18bfe216 	blt	r3,r2,8000550 <crcFast+0x28>
    }

    /*
     * The final remainder is the CRC.
     */
    return (REFLECT_REMAINDER(remainder) ^ FINAL_XOR_VALUE);
 80005c8:	e13ffb17 	ldw	r4,-20(fp)
 80005cc:	01400804 	movi	r5,32
 80005d0:	80002f40 	call	80002f4 <reflect>
 80005d4:	0084303a 	nor	r2,zero,r2

}   /* crcFast() */
 80005d8:	e037883a 	mov	sp,fp
 80005dc:	dfc00117 	ldw	ra,4(sp)
 80005e0:	df000017 	ldw	fp,0(sp)
 80005e4:	dec00204 	addi	sp,sp,8
 80005e8:	f800283a 	ret

080005ec <main>:
       */
unsigned char data_buffer_region[NUMBER_OF_BUFFERS][BUFFER_SIZE + 4 - (BUFFER_SIZE & 0x3)] __attribute__((aligned(4)));
#endif

int main()
{
 80005ec:	deff9404 	addi	sp,sp,-432
 80005f0:	dfc06b15 	stw	ra,428(sp)
 80005f4:	df006a15 	stw	fp,424(sp)
 80005f8:	dc006915 	stw	r16,420(sp)
 80005fc:	df006904 	addi	fp,sp,420
  unsigned long buffer_counter, data_counter;
  unsigned long sw_slow_results[NUMBER_OF_BUFFERS];
  unsigned long sw_fast_results[NUMBER_OF_BUFFERS];
  unsigned long ci_results[NUMBER_OF_BUFFERS];
  unsigned char random_data = 0x5A;
 8000600:	00801684 	movi	r2,90
 8000604:	e0bf9905 	stb	r2,-412(fp)

  alt_u32 sw_slow_timeA, sw_slow_timeB;
  alt_u32 sw_fast_timeA, sw_fast_timeB;
  alt_u32 ci_timeA, ci_timeB;

  printf("+-----------------------------------------------------------+\n");
 8000608:	01020074 	movhi	r4,2049
 800060c:	21333a04 	addi	r4,r4,-13080
 8000610:	8000f400 	call	8000f40 <puts>
  printf("| Comparison between software and custom instruction CRC32  |\n");
 8000614:	01020074 	movhi	r4,2049
 8000618:	21334a04 	addi	r4,r4,-13016
 800061c:	8000f400 	call	8000f40 <puts>
  printf("+-----------------------------------------------------------+\n\n\n");
 8000620:	01020074 	movhi	r4,2049
 8000624:	21335a04 	addi	r4,r4,-12952
 8000628:	8000f400 	call	8000f40 <puts>

  printf("System specification\n");
 800062c:	01020074 	movhi	r4,2049
 8000630:	21336a04 	addi	r4,r4,-12888
 8000634:	8000f400 	call	8000f40 <puts>
  printf("--------------------\n");
 8000638:	01020074 	movhi	r4,2049
 800063c:	21337004 	addi	r4,r4,-12864
 8000640:	8000f400 	call	8000f40 <puts>

  printf("System clock speed = %lu MHz\n", (unsigned long)ALT_CPU_FREQ / (unsigned long)1000000);
 8000644:	01020074 	movhi	r4,2049
 8000648:	21337604 	addi	r4,r4,-12840
 800064c:	01401904 	movi	r5,100
 8000650:	8000e800 	call	8000e80 <printf>
  printf("Number of buffer locations = %d\n", NUMBER_OF_BUFFERS);
 8000654:	01020074 	movhi	r4,2049
 8000658:	21337e04 	addi	r4,r4,-12808
 800065c:	01400804 	movi	r5,32
 8000660:	8000e800 	call	8000e80 <printf>
  printf("Size of each buffer = %d bytes\n\n\n", BUFFER_SIZE);
 8000664:	01020074 	movhi	r4,2049
 8000668:	21338704 	addi	r4,r4,-12772
 800066c:	01404004 	movi	r5,256
 8000670:	8000e800 	call	8000e80 <printf>

  /* Initializing the data buffers */
  printf("Initializing all of the buffers with pseudo-random data\n");
 8000674:	01020074 	movhi	r4,2049
 8000678:	21339004 	addi	r4,r4,-12736
 800067c:	8000f400 	call	8000f40 <puts>
  printf("-------------------------------------------------------\n");
 8000680:	01020074 	movhi	r4,2049
 8000684:	21339e04 	addi	r4,r4,-12680
 8000688:	8000f400 	call	8000f40 <puts>
  for (buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
 800068c:	e03f9715 	stw	zero,-420(fp)
 8000690:	00001d06 	br	8000708 <main+0x11c>
  {
    for (data_counter = 0; data_counter < BUFFER_SIZE; data_counter++)
 8000694:	e03f9815 	stw	zero,-416(fp)
 8000698:	00001506 	br	80006f0 <main+0x104>
    {
      data_buffer_region[buffer_counter][data_counter] = random_data;
 800069c:	00c20074 	movhi	r3,2049
 80006a0:	18c3d504 	addi	r3,r3,3924
 80006a4:	e0bf9717 	ldw	r2,-420(fp)
 80006a8:	1008923a 	slli	r4,r2,8
 80006ac:	e0bf9817 	ldw	r2,-416(fp)
 80006b0:	2085883a 	add	r2,r4,r2
 80006b4:	1885883a 	add	r2,r3,r2
 80006b8:	e0ff9903 	ldbu	r3,-412(fp)
 80006bc:	10c00005 	stb	r3,0(r2)
      random_data = (random_data >> 4) + (random_data << 4) + (data_counter & 0xFF);
 80006c0:	e0bf9903 	ldbu	r2,-412(fp)
 80006c4:	10c03fcc 	andi	r3,r2,255
 80006c8:	1806d13a 	srli	r3,r3,4
 80006cc:	1004913a 	slli	r2,r2,4
 80006d0:	1884b03a 	or	r2,r3,r2
 80006d4:	1007883a 	mov	r3,r2
 80006d8:	e0bf9817 	ldw	r2,-416(fp)
 80006dc:	1885883a 	add	r2,r3,r2
 80006e0:	e0bf9905 	stb	r2,-412(fp)
  /* Initializing the data buffers */
  printf("Initializing all of the buffers with pseudo-random data\n");
  printf("-------------------------------------------------------\n");
  for (buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
  {
    for (data_counter = 0; data_counter < BUFFER_SIZE; data_counter++)
 80006e4:	e0bf9817 	ldw	r2,-416(fp)
 80006e8:	10800044 	addi	r2,r2,1
 80006ec:	e0bf9815 	stw	r2,-416(fp)
 80006f0:	e0bf9817 	ldw	r2,-416(fp)
 80006f4:	10804030 	cmpltui	r2,r2,256
 80006f8:	103fe81e 	bne	r2,zero,800069c <main+0xb0>
  printf("Size of each buffer = %d bytes\n\n\n", BUFFER_SIZE);

  /* Initializing the data buffers */
  printf("Initializing all of the buffers with pseudo-random data\n");
  printf("-------------------------------------------------------\n");
  for (buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
 80006fc:	e0bf9717 	ldw	r2,-420(fp)
 8000700:	10800044 	addi	r2,r2,1
 8000704:	e0bf9715 	stw	r2,-420(fp)
 8000708:	e0bf9717 	ldw	r2,-420(fp)
 800070c:	10800830 	cmpltui	r2,r2,32
 8000710:	103fe01e 	bne	r2,zero,8000694 <main+0xa8>
    {
      data_buffer_region[buffer_counter][data_counter] = random_data;
      random_data = (random_data >> 4) + (random_data << 4) + (data_counter & 0xFF);
    }
  }
  printf("Initialization completed\n\n\n");
 8000714:	01020074 	movhi	r4,2049
 8000718:	2133ac04 	addi	r4,r4,-12624
 800071c:	8000f400 	call	8000f40 <puts>

  if (alt_timestamp_start() < 0) // starts the timestamp timer
 8000720:	800bbdc0 	call	800bbdc <alt_timestamp_start>
 8000724:	1000050e 	bge	r2,zero,800073c <main+0x150>
  {
    printf("Please add the high resolution timer to the timestamp timer setting in the syslib properties page.\n");
 8000728:	01020074 	movhi	r4,2049
 800072c:	2133b304 	addi	r4,r4,-12596
 8000730:	8000f400 	call	8000f40 <puts>
    exit(1);
 8000734:	01000044 	movi	r4,1
 8000738:	8000e1c0 	call	8000e1c <exit>
  }

  /* Slow software CRC based on a modulo 2 division implementation */
  printf("Running the software CRC\n");
 800073c:	01020074 	movhi	r4,2049
 8000740:	2133cc04 	addi	r4,r4,-12496
 8000744:	8000f400 	call	8000f40 <puts>
  printf("------------------------\n");
 8000748:	01020074 	movhi	r4,2049
 800074c:	2133d304 	addi	r4,r4,-12468
 8000750:	8000f400 	call	8000f40 <puts>
  sw_slow_timeA = alt_timestamp();
 8000754:	800bc640 	call	800bc64 <alt_timestamp>
 8000758:	e0bf9a15 	stw	r2,-408(fp)

  for (buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
 800075c:	e03f9715 	stw	zero,-420(fp)
 8000760:	00001306 	br	80007b0 <main+0x1c4>
  {
    sw_slow_results[buffer_counter] = crcSlow(data_buffer_region[buffer_counter], BUFFER_SIZE);
 8000764:	e0bf9717 	ldw	r2,-420(fp)
 8000768:	1006923a 	slli	r3,r2,8
 800076c:	00820074 	movhi	r2,2049
 8000770:	1083d504 	addi	r2,r2,3924
 8000774:	1885883a 	add	r2,r3,r2
 8000778:	1009883a 	mov	r4,r2
 800077c:	01404004 	movi	r5,256
 8000780:	80003800 	call	8000380 <crcSlow>
 8000784:	1007883a 	mov	r3,r2
 8000788:	e0bf9717 	ldw	r2,-420(fp)
 800078c:	1085883a 	add	r2,r2,r2
 8000790:	1085883a 	add	r2,r2,r2
 8000794:	e13f9704 	addi	r4,fp,-420
 8000798:	2085883a 	add	r2,r4,r2
 800079c:	10800904 	addi	r2,r2,36
 80007a0:	10c00015 	stw	r3,0(r2)
  /* Slow software CRC based on a modulo 2 division implementation */
  printf("Running the software CRC\n");
  printf("------------------------\n");
  sw_slow_timeA = alt_timestamp();

  for (buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
 80007a4:	e0bf9717 	ldw	r2,-420(fp)
 80007a8:	10800044 	addi	r2,r2,1
 80007ac:	e0bf9715 	stw	r2,-420(fp)
 80007b0:	e0bf9717 	ldw	r2,-420(fp)
 80007b4:	10800830 	cmpltui	r2,r2,32
 80007b8:	103fea1e 	bne	r2,zero,8000764 <main+0x178>
  {
    sw_slow_results[buffer_counter] = crcSlow(data_buffer_region[buffer_counter], BUFFER_SIZE);
  }
  sw_slow_timeB = alt_timestamp();
 80007bc:	800bc640 	call	800bc64 <alt_timestamp>
 80007c0:	e0bf9b15 	stw	r2,-404(fp)

  printf("Completed\n\n\n");
 80007c4:	01020074 	movhi	r4,2049
 80007c8:	2133da04 	addi	r4,r4,-12440
 80007cc:	8000f400 	call	8000f40 <puts>

  /* Fast software CRC based on a lookup table implementation */
  crcInit();
 80007d0:	800046c0 	call	800046c <crcInit>
  printf("Running the optimized software CRC\n");
 80007d4:	01020074 	movhi	r4,2049
 80007d8:	2133dd04 	addi	r4,r4,-12428
 80007dc:	8000f400 	call	8000f40 <puts>
  printf("----------------------------------\n");
 80007e0:	01020074 	movhi	r4,2049
 80007e4:	2133e604 	addi	r4,r4,-12392
 80007e8:	8000f400 	call	8000f40 <puts>
  sw_fast_timeA = alt_timestamp();
 80007ec:	800bc640 	call	800bc64 <alt_timestamp>
 80007f0:	e0bf9c15 	stw	r2,-400(fp)
  for (buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
 80007f4:	e03f9715 	stw	zero,-420(fp)
 80007f8:	00001306 	br	8000848 <main+0x25c>
  {
    sw_fast_results[buffer_counter] = crcFast(data_buffer_region[buffer_counter], BUFFER_SIZE);
 80007fc:	e0bf9717 	ldw	r2,-420(fp)
 8000800:	1006923a 	slli	r3,r2,8
 8000804:	00820074 	movhi	r2,2049
 8000808:	1083d504 	addi	r2,r2,3924
 800080c:	1885883a 	add	r2,r3,r2
 8000810:	1009883a 	mov	r4,r2
 8000814:	01404004 	movi	r5,256
 8000818:	80005280 	call	8000528 <crcFast>
 800081c:	1007883a 	mov	r3,r2
 8000820:	e0bf9717 	ldw	r2,-420(fp)
 8000824:	1085883a 	add	r2,r2,r2
 8000828:	1085883a 	add	r2,r2,r2
 800082c:	e17f9704 	addi	r5,fp,-420
 8000830:	2885883a 	add	r2,r5,r2
 8000834:	10802904 	addi	r2,r2,164
 8000838:	10c00015 	stw	r3,0(r2)
  /* Fast software CRC based on a lookup table implementation */
  crcInit();
  printf("Running the optimized software CRC\n");
  printf("----------------------------------\n");
  sw_fast_timeA = alt_timestamp();
  for (buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
 800083c:	e0bf9717 	ldw	r2,-420(fp)
 8000840:	10800044 	addi	r2,r2,1
 8000844:	e0bf9715 	stw	r2,-420(fp)
 8000848:	e0bf9717 	ldw	r2,-420(fp)
 800084c:	10800830 	cmpltui	r2,r2,32
 8000850:	103fea1e 	bne	r2,zero,80007fc <main+0x210>
  {
    sw_fast_results[buffer_counter] = crcFast(data_buffer_region[buffer_counter], BUFFER_SIZE);
  }
  sw_fast_timeB = alt_timestamp();
 8000854:	800bc640 	call	800bc64 <alt_timestamp>
 8000858:	e0bf9d15 	stw	r2,-396(fp)
  // printf("Completed\n\n\n");

  // printf("CRC = 0x%lx, ", crcCI(2, BUFFER_SIZE));

  /* Custom instruction CRC */
  printf("Running the custom instruction CRC\n");
 800085c:	01020074 	movhi	r4,2049
 8000860:	2133ef04 	addi	r4,r4,-12356
 8000864:	8000f400 	call	8000f40 <puts>
  printf("----------------------------------\n");
 8000868:	01020074 	movhi	r4,2049
 800086c:	2133e604 	addi	r4,r4,-12392
 8000870:	8000f400 	call	8000f40 <puts>
  ci_timeA = alt_timestamp();
 8000874:	800bc640 	call	800bc64 <alt_timestamp>
 8000878:	e0bf9e15 	stw	r2,-392(fp)
  for (buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
 800087c:	e03f9715 	stw	zero,-420(fp)
 8000880:	00001306 	br	80008d0 <main+0x2e4>
  {
    ci_results[buffer_counter] = crcCI(data_buffer_region[buffer_counter], BUFFER_SIZE);
 8000884:	e0bf9717 	ldw	r2,-420(fp)
 8000888:	1006923a 	slli	r3,r2,8
 800088c:	00820074 	movhi	r2,2049
 8000890:	1083d504 	addi	r2,r2,3924
 8000894:	1885883a 	add	r2,r3,r2
 8000898:	1009883a 	mov	r4,r2
 800089c:	01404004 	movi	r5,256
 80008a0:	80001f40 	call	80001f4 <crcCI>
 80008a4:	1007883a 	mov	r3,r2
 80008a8:	e0bf9717 	ldw	r2,-420(fp)
 80008ac:	1085883a 	add	r2,r2,r2
 80008b0:	1085883a 	add	r2,r2,r2
 80008b4:	e13f9704 	addi	r4,fp,-420
 80008b8:	2085883a 	add	r2,r4,r2
 80008bc:	10804904 	addi	r2,r2,292
 80008c0:	10c00015 	stw	r3,0(r2)

  /* Custom instruction CRC */
  printf("Running the custom instruction CRC\n");
  printf("----------------------------------\n");
  ci_timeA = alt_timestamp();
  for (buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
 80008c4:	e0bf9717 	ldw	r2,-420(fp)
 80008c8:	10800044 	addi	r2,r2,1
 80008cc:	e0bf9715 	stw	r2,-420(fp)
 80008d0:	e0bf9717 	ldw	r2,-420(fp)
 80008d4:	10800830 	cmpltui	r2,r2,32
 80008d8:	103fea1e 	bne	r2,zero,8000884 <main+0x298>
  {
    ci_results[buffer_counter] = crcCI(data_buffer_region[buffer_counter], BUFFER_SIZE);
  }
  ci_timeB = alt_timestamp();
 80008dc:	800bc640 	call	800bc64 <alt_timestamp>
 80008e0:	e0bf9f15 	stw	r2,-388(fp)
  printf("Completed\n\n\n");
 80008e4:	01020074 	movhi	r4,2049
 80008e8:	2133da04 	addi	r4,r4,-12440
 80008ec:	8000f400 	call	8000f40 <puts>

  /* Validation of results */
  printf("Validating the CRC results from all implementations\n");
 80008f0:	01020074 	movhi	r4,2049
 80008f4:	2133f804 	addi	r4,r4,-12320
 80008f8:	8000f400 	call	8000f40 <puts>
  printf("----------------------------------------------------\n");
 80008fc:	01020074 	movhi	r4,2049
 8000900:	21340504 	addi	r4,r4,-12268
 8000904:	8000f400 	call	8000f40 <puts>
  for (buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
 8000908:	e03f9715 	stw	zero,-420(fp)
 800090c:	00004106 	br	8000a14 <main+0x428>
  {
    /* Test every combination of results to make sure they are consistant */
    if ((sw_slow_results[buffer_counter] != ci_results[buffer_counter]) |
 8000910:	e0bf9717 	ldw	r2,-420(fp)
 8000914:	1085883a 	add	r2,r2,r2
 8000918:	1085883a 	add	r2,r2,r2
 800091c:	e17f9704 	addi	r5,fp,-420
 8000920:	2885883a 	add	r2,r5,r2
 8000924:	10800904 	addi	r2,r2,36
 8000928:	10c00017 	ldw	r3,0(r2)
 800092c:	e0bf9717 	ldw	r2,-420(fp)
 8000930:	1085883a 	add	r2,r2,r2
 8000934:	1085883a 	add	r2,r2,r2
 8000938:	e13f9704 	addi	r4,fp,-420
 800093c:	2085883a 	add	r2,r4,r2
 8000940:	10804904 	addi	r2,r2,292
 8000944:	10800017 	ldw	r2,0(r2)
 8000948:	1884c03a 	cmpne	r2,r3,r2
 800094c:	1007883a 	mov	r3,r2
        (sw_fast_results[buffer_counter] != ci_results[buffer_counter]))
 8000950:	e0bf9717 	ldw	r2,-420(fp)
 8000954:	1085883a 	add	r2,r2,r2
 8000958:	1085883a 	add	r2,r2,r2
 800095c:	e17f9704 	addi	r5,fp,-420
 8000960:	2885883a 	add	r2,r5,r2
 8000964:	10802904 	addi	r2,r2,164
 8000968:	11000017 	ldw	r4,0(r2)
 800096c:	e0bf9717 	ldw	r2,-420(fp)
 8000970:	1085883a 	add	r2,r2,r2
 8000974:	1085883a 	add	r2,r2,r2
 8000978:	e17f9704 	addi	r5,fp,-420
 800097c:	2885883a 	add	r2,r5,r2
 8000980:	10804904 	addi	r2,r2,292
 8000984:	10800017 	ldw	r2,0(r2)
  printf("Validating the CRC results from all implementations\n");
  printf("----------------------------------------------------\n");
  for (buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
  {
    /* Test every combination of results to make sure they are consistant */
    if ((sw_slow_results[buffer_counter] != ci_results[buffer_counter]) |
 8000988:	2084c03a 	cmpne	r2,r4,r2
 800098c:	1884b03a 	or	r2,r3,r2
 8000990:	10803fcc 	andi	r2,r2,255
 8000994:	10001c26 	beq	r2,zero,8000a08 <main+0x41c>
        (sw_fast_results[buffer_counter] != ci_results[buffer_counter]))
    {
      printf("FAILURE!  Software CRC = 0x%lx, Optimized Software CRC = 0x%lx, Custom Instruction CRC = 0x%lx,\n",
 8000998:	e0bf9717 	ldw	r2,-420(fp)
 800099c:	1085883a 	add	r2,r2,r2
 80009a0:	1085883a 	add	r2,r2,r2
 80009a4:	e0ff9704 	addi	r3,fp,-420
 80009a8:	1885883a 	add	r2,r3,r2
 80009ac:	10800904 	addi	r2,r2,36
 80009b0:	11400017 	ldw	r5,0(r2)
 80009b4:	e0bf9717 	ldw	r2,-420(fp)
 80009b8:	1085883a 	add	r2,r2,r2
 80009bc:	1085883a 	add	r2,r2,r2
 80009c0:	e13f9704 	addi	r4,fp,-420
 80009c4:	2085883a 	add	r2,r4,r2
 80009c8:	10802904 	addi	r2,r2,164
 80009cc:	10c00017 	ldw	r3,0(r2)
 80009d0:	e0bf9717 	ldw	r2,-420(fp)
 80009d4:	1085883a 	add	r2,r2,r2
 80009d8:	1085883a 	add	r2,r2,r2
 80009dc:	e13f9704 	addi	r4,fp,-420
 80009e0:	2085883a 	add	r2,r4,r2
 80009e4:	10804904 	addi	r2,r2,292
 80009e8:	10800017 	ldw	r2,0(r2)
 80009ec:	01020074 	movhi	r4,2049
 80009f0:	21341304 	addi	r4,r4,-12212
 80009f4:	180d883a 	mov	r6,r3
 80009f8:	100f883a 	mov	r7,r2
 80009fc:	8000e800 	call	8000e80 <printf>
             sw_slow_results[buffer_counter], sw_fast_results[buffer_counter], ci_results[buffer_counter]);
      exit(1);
 8000a00:	01000044 	movi	r4,1
 8000a04:	8000e1c0 	call	8000e1c <exit>
  printf("Completed\n\n\n");

  /* Validation of results */
  printf("Validating the CRC results from all implementations\n");
  printf("----------------------------------------------------\n");
  for (buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
 8000a08:	e0bf9717 	ldw	r2,-420(fp)
 8000a0c:	10800044 	addi	r2,r2,1
 8000a10:	e0bf9715 	stw	r2,-420(fp)
 8000a14:	e0bf9717 	ldw	r2,-420(fp)
 8000a18:	10800830 	cmpltui	r2,r2,32
 8000a1c:	103fbc1e 	bne	r2,zero,8000910 <main+0x324>
      printf("FAILURE!  Software CRC = 0x%lx, Optimized Software CRC = 0x%lx, Custom Instruction CRC = 0x%lx,\n",
             sw_slow_results[buffer_counter], sw_fast_results[buffer_counter], ci_results[buffer_counter]);
      exit(1);
    }
  }
  printf("All CRC implementations produced the same results\n\n\n");
 8000a20:	01020074 	movhi	r4,2049
 8000a24:	21342c04 	addi	r4,r4,-12112
 8000a28:	8000f400 	call	8000f40 <puts>

  // Report processing times
  printf("Processing time for each implementation\n");
 8000a2c:	01020074 	movhi	r4,2049
 8000a30:	21343904 	addi	r4,r4,-12060
 8000a34:	8000f400 	call	8000f40 <puts>
  printf("---------------------------------------\n");
 8000a38:	01020074 	movhi	r4,2049
 8000a3c:	21344304 	addi	r4,r4,-12020
 8000a40:	8000f400 	call	8000f40 <puts>
  printf("Software CRC = %.2lu ms\n", 1000 * ((unsigned long)(sw_slow_timeB - sw_slow_timeA)) / ((unsigned long)alt_timestamp_freq()));
 8000a44:	e0ff9b17 	ldw	r3,-404(fp)
 8000a48:	e0bf9a17 	ldw	r2,-408(fp)
 8000a4c:	1885c83a 	sub	r2,r3,r2
 8000a50:	1009883a 	mov	r4,r2
 8000a54:	0140fa04 	movi	r5,1000
 8000a58:	8000df40 	call	8000df4 <__mulsi3>
 8000a5c:	1021883a 	mov	r16,r2
 8000a60:	800bcf40 	call	800bcf4 <alt_timestamp_freq>
 8000a64:	8009883a 	mov	r4,r16
 8000a68:	100b883a 	mov	r5,r2
 8000a6c:	8000de40 	call	8000de4 <__udivsi3>
 8000a70:	01020074 	movhi	r4,2049
 8000a74:	21344d04 	addi	r4,r4,-11980
 8000a78:	100b883a 	mov	r5,r2
 8000a7c:	8000e800 	call	8000e80 <printf>
  printf("Optimized software CRC = %.2lu ms\n", 1000 * ((unsigned long)(sw_fast_timeB - sw_fast_timeA)) / ((unsigned long)alt_timestamp_freq()));
 8000a80:	e0ff9d17 	ldw	r3,-396(fp)
 8000a84:	e0bf9c17 	ldw	r2,-400(fp)
 8000a88:	1885c83a 	sub	r2,r3,r2
 8000a8c:	1009883a 	mov	r4,r2
 8000a90:	0140fa04 	movi	r5,1000
 8000a94:	8000df40 	call	8000df4 <__mulsi3>
 8000a98:	1021883a 	mov	r16,r2
 8000a9c:	800bcf40 	call	800bcf4 <alt_timestamp_freq>
 8000aa0:	8009883a 	mov	r4,r16
 8000aa4:	100b883a 	mov	r5,r2
 8000aa8:	8000de40 	call	8000de4 <__udivsi3>
 8000aac:	01020074 	movhi	r4,2049
 8000ab0:	21345404 	addi	r4,r4,-11952
 8000ab4:	100b883a 	mov	r5,r2
 8000ab8:	8000e800 	call	8000e80 <printf>
  printf("Custom instruction CRC = %.2lu ms\n\n\n", 1000 * ((unsigned long)(ci_timeB - ci_timeA)) / ((unsigned long)alt_timestamp_freq()));
 8000abc:	e0ff9f17 	ldw	r3,-388(fp)
 8000ac0:	e0bf9e17 	ldw	r2,-392(fp)
 8000ac4:	1885c83a 	sub	r2,r3,r2
 8000ac8:	1009883a 	mov	r4,r2
 8000acc:	0140fa04 	movi	r5,1000
 8000ad0:	8000df40 	call	8000df4 <__mulsi3>
 8000ad4:	1021883a 	mov	r16,r2
 8000ad8:	800bcf40 	call	800bcf4 <alt_timestamp_freq>
 8000adc:	8009883a 	mov	r4,r16
 8000ae0:	100b883a 	mov	r5,r2
 8000ae4:	8000de40 	call	8000de4 <__udivsi3>
 8000ae8:	01020074 	movhi	r4,2049
 8000aec:	21345d04 	addi	r4,r4,-11916
 8000af0:	100b883a 	mov	r5,r2
 8000af4:	8000e800 	call	8000e80 <printf>

  printf("Processing throughput for each implementation\n"); // throughput = total bits / (time(s) * 1000000)
 8000af8:	01020074 	movhi	r4,2049
 8000afc:	21346704 	addi	r4,r4,-11876
 8000b00:	8000f400 	call	8000f40 <puts>
  printf("---------------------------------------------\n");
 8000b04:	01020074 	movhi	r4,2049
 8000b08:	21347304 	addi	r4,r4,-11828
 8000b0c:	8000f400 	call	8000f40 <puts>
  printf("Software CRC = %.2lu Mbps\n", (8 * NUMBER_OF_BUFFERS * BUFFER_SIZE) / (1000000 * (unsigned long)(sw_slow_timeB - sw_slow_timeA) / ((unsigned long)alt_timestamp_freq())));
 8000b10:	e0ff9b17 	ldw	r3,-404(fp)
 8000b14:	e0bf9a17 	ldw	r2,-408(fp)
 8000b18:	1885c83a 	sub	r2,r3,r2
 8000b1c:	1009883a 	mov	r4,r2
 8000b20:	014003f4 	movhi	r5,15
 8000b24:	29509004 	addi	r5,r5,16960
 8000b28:	8000df40 	call	8000df4 <__mulsi3>
 8000b2c:	1021883a 	mov	r16,r2
 8000b30:	800bcf40 	call	800bcf4 <alt_timestamp_freq>
 8000b34:	8009883a 	mov	r4,r16
 8000b38:	100b883a 	mov	r5,r2
 8000b3c:	8000de40 	call	8000de4 <__udivsi3>
 8000b40:	01000074 	movhi	r4,1
 8000b44:	100b883a 	mov	r5,r2
 8000b48:	8000de40 	call	8000de4 <__udivsi3>
 8000b4c:	01020074 	movhi	r4,2049
 8000b50:	21347f04 	addi	r4,r4,-11780
 8000b54:	100b883a 	mov	r5,r2
 8000b58:	8000e800 	call	8000e80 <printf>
  printf("Optimized software CRC = %.2lu Mbps\n", (8 * NUMBER_OF_BUFFERS * BUFFER_SIZE) / (1000000 * (unsigned long)(sw_fast_timeB - sw_fast_timeA) / ((unsigned long)alt_timestamp_freq())));
 8000b5c:	e0ff9d17 	ldw	r3,-396(fp)
 8000b60:	e0bf9c17 	ldw	r2,-400(fp)
 8000b64:	1885c83a 	sub	r2,r3,r2
 8000b68:	1009883a 	mov	r4,r2
 8000b6c:	014003f4 	movhi	r5,15
 8000b70:	29509004 	addi	r5,r5,16960
 8000b74:	8000df40 	call	8000df4 <__mulsi3>
 8000b78:	1021883a 	mov	r16,r2
 8000b7c:	800bcf40 	call	800bcf4 <alt_timestamp_freq>
 8000b80:	8009883a 	mov	r4,r16
 8000b84:	100b883a 	mov	r5,r2
 8000b88:	8000de40 	call	8000de4 <__udivsi3>
 8000b8c:	01000074 	movhi	r4,1
 8000b90:	100b883a 	mov	r5,r2
 8000b94:	8000de40 	call	8000de4 <__udivsi3>
 8000b98:	01020074 	movhi	r4,2049
 8000b9c:	21348604 	addi	r4,r4,-11752
 8000ba0:	100b883a 	mov	r5,r2
 8000ba4:	8000e800 	call	8000e80 <printf>
  printf("Custom instruction CRC = %.2lu Mbps\n\n\n", (8 * NUMBER_OF_BUFFERS * BUFFER_SIZE) / (1000000 * (unsigned long)(ci_timeB - ci_timeA) / ((unsigned long)alt_timestamp_freq())));
 8000ba8:	e0ff9f17 	ldw	r3,-388(fp)
 8000bac:	e0bf9e17 	ldw	r2,-392(fp)
 8000bb0:	1885c83a 	sub	r2,r3,r2
 8000bb4:	1009883a 	mov	r4,r2
 8000bb8:	014003f4 	movhi	r5,15
 8000bbc:	29509004 	addi	r5,r5,16960
 8000bc0:	8000df40 	call	8000df4 <__mulsi3>
 8000bc4:	1021883a 	mov	r16,r2
 8000bc8:	800bcf40 	call	800bcf4 <alt_timestamp_freq>
 8000bcc:	8009883a 	mov	r4,r16
 8000bd0:	100b883a 	mov	r5,r2
 8000bd4:	8000de40 	call	8000de4 <__udivsi3>
 8000bd8:	01000074 	movhi	r4,1
 8000bdc:	100b883a 	mov	r5,r2
 8000be0:	8000de40 	call	8000de4 <__udivsi3>
 8000be4:	01020074 	movhi	r4,2049
 8000be8:	21349004 	addi	r4,r4,-11712
 8000bec:	100b883a 	mov	r5,r2
 8000bf0:	8000e800 	call	8000e80 <printf>

  printf("Speedup ratio\n");
 8000bf4:	01020074 	movhi	r4,2049
 8000bf8:	21349a04 	addi	r4,r4,-11672
 8000bfc:	8000f400 	call	8000f40 <puts>
  printf("-------------\n");
 8000c00:	01020074 	movhi	r4,2049
 8000c04:	21349e04 	addi	r4,r4,-11656
 8000c08:	8000f400 	call	8000f40 <puts>
  printf("Custom instruction CRC vs software CRC = %lu\n", ((unsigned long)(sw_slow_timeB - sw_slow_timeA)) / ((unsigned long)(ci_timeB - ci_timeA)));
 8000c0c:	e0ff9b17 	ldw	r3,-404(fp)
 8000c10:	e0bf9a17 	ldw	r2,-408(fp)
 8000c14:	1887c83a 	sub	r3,r3,r2
 8000c18:	e13f9f17 	ldw	r4,-388(fp)
 8000c1c:	e0bf9e17 	ldw	r2,-392(fp)
 8000c20:	2085c83a 	sub	r2,r4,r2
 8000c24:	1809883a 	mov	r4,r3
 8000c28:	100b883a 	mov	r5,r2
 8000c2c:	8000de40 	call	8000de4 <__udivsi3>
 8000c30:	01020074 	movhi	r4,2049
 8000c34:	2134a204 	addi	r4,r4,-11640
 8000c38:	100b883a 	mov	r5,r2
 8000c3c:	8000e800 	call	8000e80 <printf>
  printf("Custom instruction CRC vs optimized software CRC = %lu\n", ((unsigned long)(sw_fast_timeB - sw_fast_timeA)) / ((unsigned long)(ci_timeB - ci_timeA)));
 8000c40:	e0ff9d17 	ldw	r3,-396(fp)
 8000c44:	e0bf9c17 	ldw	r2,-400(fp)
 8000c48:	1887c83a 	sub	r3,r3,r2
 8000c4c:	e13f9f17 	ldw	r4,-388(fp)
 8000c50:	e0bf9e17 	ldw	r2,-392(fp)
 8000c54:	2085c83a 	sub	r2,r4,r2
 8000c58:	1809883a 	mov	r4,r3
 8000c5c:	100b883a 	mov	r5,r2
 8000c60:	8000de40 	call	8000de4 <__udivsi3>
 8000c64:	01020074 	movhi	r4,2049
 8000c68:	2134ae04 	addi	r4,r4,-11592
 8000c6c:	100b883a 	mov	r5,r2
 8000c70:	8000e800 	call	8000e80 <printf>
  printf("Optimized software CRC vs software CRC= %lu\n", ((unsigned long)(sw_slow_timeB - sw_slow_timeA)) / ((unsigned long)(sw_fast_timeB - sw_fast_timeA)));
 8000c74:	e0ff9b17 	ldw	r3,-404(fp)
 8000c78:	e0bf9a17 	ldw	r2,-408(fp)
 8000c7c:	1887c83a 	sub	r3,r3,r2
 8000c80:	e13f9d17 	ldw	r4,-396(fp)
 8000c84:	e0bf9c17 	ldw	r2,-400(fp)
 8000c88:	2085c83a 	sub	r2,r4,r2
 8000c8c:	1809883a 	mov	r4,r3
 8000c90:	100b883a 	mov	r5,r2
 8000c94:	8000de40 	call	8000de4 <__udivsi3>
 8000c98:	01020074 	movhi	r4,2049
 8000c9c:	2134bc04 	addi	r4,r4,-11536
 8000ca0:	100b883a 	mov	r5,r2
 8000ca4:	8000e800 	call	8000e80 <printf>
  return 0;
 8000ca8:	0005883a 	mov	r2,zero
}
 8000cac:	e037883a 	mov	sp,fp
 8000cb0:	dfc00217 	ldw	ra,8(sp)
 8000cb4:	df000117 	ldw	fp,4(sp)
 8000cb8:	dc000017 	ldw	r16,0(sp)
 8000cbc:	dec00304 	addi	sp,sp,12
 8000cc0:	f800283a 	ret

08000cc4 <udivmodsi4>:
 8000cc4:	2005883a 	mov	r2,r4
 8000cc8:	2900182e 	bgeu	r5,r4,8000d2c <udivmodsi4+0x68>
 8000ccc:	28001716 	blt	r5,zero,8000d2c <udivmodsi4+0x68>
 8000cd0:	01000804 	movi	r4,32
 8000cd4:	00c00044 	movi	r3,1
 8000cd8:	00000206 	br	8000ce4 <udivmodsi4+0x20>
 8000cdc:	20001126 	beq	r4,zero,8000d24 <udivmodsi4+0x60>
 8000ce0:	28000516 	blt	r5,zero,8000cf8 <udivmodsi4+0x34>
 8000ce4:	294b883a 	add	r5,r5,r5
 8000ce8:	213fffc4 	addi	r4,r4,-1
 8000cec:	18c7883a 	add	r3,r3,r3
 8000cf0:	28bffa36 	bltu	r5,r2,8000cdc <udivmodsi4+0x18>
 8000cf4:	18000b26 	beq	r3,zero,8000d24 <udivmodsi4+0x60>
 8000cf8:	0009883a 	mov	r4,zero
 8000cfc:	11400236 	bltu	r2,r5,8000d08 <udivmodsi4+0x44>
 8000d00:	1145c83a 	sub	r2,r2,r5
 8000d04:	20c8b03a 	or	r4,r4,r3
 8000d08:	1806d07a 	srli	r3,r3,1
 8000d0c:	280ad07a 	srli	r5,r5,1
 8000d10:	183ffa1e 	bne	r3,zero,8000cfc <udivmodsi4+0x38>
 8000d14:	3000021e 	bne	r6,zero,8000d20 <udivmodsi4+0x5c>
 8000d18:	2005883a 	mov	r2,r4
 8000d1c:	f800283a 	ret
 8000d20:	f800283a 	ret
 8000d24:	0009883a 	mov	r4,zero
 8000d28:	003ffa06 	br	8000d14 <udivmodsi4+0x50>
 8000d2c:	00c00044 	movi	r3,1
 8000d30:	0009883a 	mov	r4,zero
 8000d34:	003ff106 	br	8000cfc <udivmodsi4+0x38>

08000d38 <__divsi3>:
 8000d38:	defffe04 	addi	sp,sp,-8
 8000d3c:	dfc00115 	stw	ra,4(sp)
 8000d40:	dc000015 	stw	r16,0(sp)
 8000d44:	20000a16 	blt	r4,zero,8000d70 <__divsi3+0x38>
 8000d48:	0021883a 	mov	r16,zero
 8000d4c:	28000b16 	blt	r5,zero,8000d7c <__divsi3+0x44>
 8000d50:	000d883a 	mov	r6,zero
 8000d54:	8000cc40 	call	8000cc4 <udivmodsi4>
 8000d58:	80000126 	beq	r16,zero,8000d60 <__divsi3+0x28>
 8000d5c:	0085c83a 	sub	r2,zero,r2
 8000d60:	dfc00117 	ldw	ra,4(sp)
 8000d64:	dc000017 	ldw	r16,0(sp)
 8000d68:	dec00204 	addi	sp,sp,8
 8000d6c:	f800283a 	ret
 8000d70:	0109c83a 	sub	r4,zero,r4
 8000d74:	04000044 	movi	r16,1
 8000d78:	283ff50e 	bge	r5,zero,8000d50 <__divsi3+0x18>
 8000d7c:	014bc83a 	sub	r5,zero,r5
 8000d80:	8400005c 	xori	r16,r16,1
 8000d84:	003ff206 	br	8000d50 <__divsi3+0x18>

08000d88 <__modsi3>:
 8000d88:	deffff04 	addi	sp,sp,-4
 8000d8c:	dfc00015 	stw	ra,0(sp)
 8000d90:	20000516 	blt	r4,zero,8000da8 <__modsi3+0x20>
 8000d94:	28000c16 	blt	r5,zero,8000dc8 <__modsi3+0x40>
 8000d98:	01800044 	movi	r6,1
 8000d9c:	dfc00017 	ldw	ra,0(sp)
 8000da0:	dec00104 	addi	sp,sp,4
 8000da4:	8000cc41 	jmpi	8000cc4 <udivmodsi4>
 8000da8:	0109c83a 	sub	r4,zero,r4
 8000dac:	28000b16 	blt	r5,zero,8000ddc <__modsi3+0x54>
 8000db0:	01800044 	movi	r6,1
 8000db4:	8000cc40 	call	8000cc4 <udivmodsi4>
 8000db8:	0085c83a 	sub	r2,zero,r2
 8000dbc:	dfc00017 	ldw	ra,0(sp)
 8000dc0:	dec00104 	addi	sp,sp,4
 8000dc4:	f800283a 	ret
 8000dc8:	014bc83a 	sub	r5,zero,r5
 8000dcc:	01800044 	movi	r6,1
 8000dd0:	dfc00017 	ldw	ra,0(sp)
 8000dd4:	dec00104 	addi	sp,sp,4
 8000dd8:	8000cc41 	jmpi	8000cc4 <udivmodsi4>
 8000ddc:	014bc83a 	sub	r5,zero,r5
 8000de0:	003ff306 	br	8000db0 <__modsi3+0x28>

08000de4 <__udivsi3>:
 8000de4:	000d883a 	mov	r6,zero
 8000de8:	8000cc41 	jmpi	8000cc4 <udivmodsi4>

08000dec <__umodsi3>:
 8000dec:	01800044 	movi	r6,1
 8000df0:	8000cc41 	jmpi	8000cc4 <udivmodsi4>

08000df4 <__mulsi3>:
 8000df4:	0005883a 	mov	r2,zero
 8000df8:	20000726 	beq	r4,zero,8000e18 <__mulsi3+0x24>
 8000dfc:	20c0004c 	andi	r3,r4,1
 8000e00:	2008d07a 	srli	r4,r4,1
 8000e04:	18000126 	beq	r3,zero,8000e0c <__mulsi3+0x18>
 8000e08:	1145883a 	add	r2,r2,r5
 8000e0c:	294b883a 	add	r5,r5,r5
 8000e10:	203ffa1e 	bne	r4,zero,8000dfc <__mulsi3+0x8>
 8000e14:	f800283a 	ret
 8000e18:	f800283a 	ret

08000e1c <exit>:
 8000e1c:	defffe04 	addi	sp,sp,-8
 8000e20:	000b883a 	mov	r5,zero
 8000e24:	dc000015 	stw	r16,0(sp)
 8000e28:	dfc00115 	stw	ra,4(sp)
 8000e2c:	2021883a 	mov	r16,r4
 8000e30:	80030280 	call	8003028 <__call_exitprocs>
 8000e34:	00820074 	movhi	r2,2049
 8000e38:	10bc1704 	addi	r2,r2,-4004
 8000e3c:	11000017 	ldw	r4,0(r2)
 8000e40:	20800f17 	ldw	r2,60(r4)
 8000e44:	10000126 	beq	r2,zero,8000e4c <exit+0x30>
 8000e48:	103ee83a 	callr	r2
 8000e4c:	8009883a 	mov	r4,r16
 8000e50:	800a6e00 	call	800a6e0 <_exit>

08000e54 <_printf_r>:
 8000e54:	defffd04 	addi	sp,sp,-12
 8000e58:	dfc00015 	stw	ra,0(sp)
 8000e5c:	d9800115 	stw	r6,4(sp)
 8000e60:	d9c00215 	stw	r7,8(sp)
 8000e64:	280d883a 	mov	r6,r5
 8000e68:	21400217 	ldw	r5,8(r4)
 8000e6c:	d9c00104 	addi	r7,sp,4
 8000e70:	80010140 	call	8001014 <___vfprintf_internal_r>
 8000e74:	dfc00017 	ldw	ra,0(sp)
 8000e78:	dec00304 	addi	sp,sp,12
 8000e7c:	f800283a 	ret

08000e80 <printf>:
 8000e80:	defffc04 	addi	sp,sp,-16
 8000e84:	dfc00015 	stw	ra,0(sp)
 8000e88:	d9400115 	stw	r5,4(sp)
 8000e8c:	d9800215 	stw	r6,8(sp)
 8000e90:	d9c00315 	stw	r7,12(sp)
 8000e94:	00820074 	movhi	r2,2049
 8000e98:	10bc1804 	addi	r2,r2,-4000
 8000e9c:	10800017 	ldw	r2,0(r2)
 8000ea0:	200b883a 	mov	r5,r4
 8000ea4:	d9800104 	addi	r6,sp,4
 8000ea8:	11000217 	ldw	r4,8(r2)
 8000eac:	8002e900 	call	8002e90 <__vfprintf_internal>
 8000eb0:	dfc00017 	ldw	ra,0(sp)
 8000eb4:	dec00404 	addi	sp,sp,16
 8000eb8:	f800283a 	ret

08000ebc <_puts_r>:
 8000ebc:	defff604 	addi	sp,sp,-40
 8000ec0:	dc400815 	stw	r17,32(sp)
 8000ec4:	2023883a 	mov	r17,r4
 8000ec8:	2809883a 	mov	r4,r5
 8000ecc:	dc000715 	stw	r16,28(sp)
 8000ed0:	dfc00915 	stw	ra,36(sp)
 8000ed4:	2821883a 	mov	r16,r5
 8000ed8:	8000f540 	call	8000f54 <strlen>
 8000edc:	10c00044 	addi	r3,r2,1
 8000ee0:	d8800115 	stw	r2,4(sp)
 8000ee4:	89400217 	ldw	r5,8(r17)
 8000ee8:	00820074 	movhi	r2,2049
 8000eec:	10b4c904 	addi	r2,r2,-11484
 8000ef0:	d8800215 	stw	r2,8(sp)
 8000ef4:	00800044 	movi	r2,1
 8000ef8:	d8800315 	stw	r2,12(sp)
 8000efc:	8809883a 	mov	r4,r17
 8000f00:	00800084 	movi	r2,2
 8000f04:	d9800404 	addi	r6,sp,16
 8000f08:	dc000015 	stw	r16,0(sp)
 8000f0c:	d8c00615 	stw	r3,24(sp)
 8000f10:	dec00415 	stw	sp,16(sp)
 8000f14:	d8800515 	stw	r2,20(sp)
 8000f18:	80053300 	call	8005330 <__sfvwrite_r>
 8000f1c:	1000061e 	bne	r2,zero,8000f38 <_puts_r+0x7c>
 8000f20:	00800284 	movi	r2,10
 8000f24:	dfc00917 	ldw	ra,36(sp)
 8000f28:	dc400817 	ldw	r17,32(sp)
 8000f2c:	dc000717 	ldw	r16,28(sp)
 8000f30:	dec00a04 	addi	sp,sp,40
 8000f34:	f800283a 	ret
 8000f38:	00bfffc4 	movi	r2,-1
 8000f3c:	003ff906 	br	8000f24 <_puts_r+0x68>

08000f40 <puts>:
 8000f40:	00820074 	movhi	r2,2049
 8000f44:	10bc1804 	addi	r2,r2,-4000
 8000f48:	200b883a 	mov	r5,r4
 8000f4c:	11000017 	ldw	r4,0(r2)
 8000f50:	8000ebc1 	jmpi	8000ebc <_puts_r>

08000f54 <strlen>:
 8000f54:	208000cc 	andi	r2,r4,3
 8000f58:	10001f1e 	bne	r2,zero,8000fd8 <strlen+0x84>
 8000f5c:	20800017 	ldw	r2,0(r4)
 8000f60:	01ffbff4 	movhi	r7,65279
 8000f64:	39ffbfc4 	addi	r7,r7,-257
 8000f68:	01a02074 	movhi	r6,32897
 8000f6c:	31a02004 	addi	r6,r6,-32640
 8000f70:	11c7883a 	add	r3,r2,r7
 8000f74:	0084303a 	nor	r2,zero,r2
 8000f78:	1886703a 	and	r3,r3,r2
 8000f7c:	1986703a 	and	r3,r3,r6
 8000f80:	2005883a 	mov	r2,r4
 8000f84:	1800101e 	bne	r3,zero,8000fc8 <strlen+0x74>
 8000f88:	10800104 	addi	r2,r2,4
 8000f8c:	10c00017 	ldw	r3,0(r2)
 8000f90:	19cb883a 	add	r5,r3,r7
 8000f94:	00c6303a 	nor	r3,zero,r3
 8000f98:	28c6703a 	and	r3,r5,r3
 8000f9c:	1986703a 	and	r3,r3,r6
 8000fa0:	1800091e 	bne	r3,zero,8000fc8 <strlen+0x74>
 8000fa4:	10800104 	addi	r2,r2,4
 8000fa8:	10c00017 	ldw	r3,0(r2)
 8000fac:	19cb883a 	add	r5,r3,r7
 8000fb0:	00c6303a 	nor	r3,zero,r3
 8000fb4:	28c6703a 	and	r3,r5,r3
 8000fb8:	1986703a 	and	r3,r3,r6
 8000fbc:	183ff226 	beq	r3,zero,8000f88 <strlen+0x34>
 8000fc0:	00000106 	br	8000fc8 <strlen+0x74>
 8000fc4:	10800044 	addi	r2,r2,1
 8000fc8:	10c00007 	ldb	r3,0(r2)
 8000fcc:	183ffd1e 	bne	r3,zero,8000fc4 <strlen+0x70>
 8000fd0:	1105c83a 	sub	r2,r2,r4
 8000fd4:	f800283a 	ret
 8000fd8:	2005883a 	mov	r2,r4
 8000fdc:	003ffa06 	br	8000fc8 <strlen+0x74>

08000fe0 <__sprint_r>:
 8000fe0:	30800217 	ldw	r2,8(r6)
 8000fe4:	defffe04 	addi	sp,sp,-8
 8000fe8:	dc000015 	stw	r16,0(sp)
 8000fec:	dfc00115 	stw	ra,4(sp)
 8000ff0:	3021883a 	mov	r16,r6
 8000ff4:	10000226 	beq	r2,zero,8001000 <__sprint_r+0x20>
 8000ff8:	80053300 	call	8005330 <__sfvwrite_r>
 8000ffc:	80000215 	stw	zero,8(r16)
 8001000:	80000115 	stw	zero,4(r16)
 8001004:	dfc00117 	ldw	ra,4(sp)
 8001008:	dc000017 	ldw	r16,0(sp)
 800100c:	dec00204 	addi	sp,sp,8
 8001010:	f800283a 	ret

08001014 <___vfprintf_internal_r>:
 8001014:	defeb904 	addi	sp,sp,-1308
 8001018:	dc013d15 	stw	r16,1268(sp)
 800101c:	d9013015 	stw	r4,1216(sp)
 8001020:	dfc14615 	stw	ra,1304(sp)
 8001024:	df014515 	stw	fp,1300(sp)
 8001028:	ddc14415 	stw	r23,1296(sp)
 800102c:	dd814315 	stw	r22,1292(sp)
 8001030:	dd414215 	stw	r21,1288(sp)
 8001034:	dd014115 	stw	r20,1284(sp)
 8001038:	dcc14015 	stw	r19,1280(sp)
 800103c:	dc813f15 	stw	r18,1276(sp)
 8001040:	dc413e15 	stw	r17,1272(sp)
 8001044:	d9412915 	stw	r5,1188(sp)
 8001048:	3021883a 	mov	r16,r6
 800104c:	d9c12d15 	stw	r7,1204(sp)
 8001050:	8005a1c0 	call	8005a1c <_localeconv_r>
 8001054:	10800017 	ldw	r2,0(r2)
 8001058:	d9013017 	ldw	r4,1216(sp)
 800105c:	d8013315 	stw	zero,1228(sp)
 8001060:	d8813715 	stw	r2,1244(sp)
 8001064:	d8013415 	stw	zero,1232(sp)
 8001068:	20000226 	beq	r4,zero,8001074 <___vfprintf_internal_r+0x60>
 800106c:	20800e17 	ldw	r2,56(r4)
 8001070:	10014b26 	beq	r2,zero,80015a0 <___vfprintf_internal_r+0x58c>
 8001074:	d8c12917 	ldw	r3,1188(sp)
 8001078:	1880030b 	ldhu	r2,12(r3)
 800107c:	10c0020c 	andi	r3,r2,8
 8001080:	18ffffcc 	andi	r3,r3,65535
 8001084:	18e0001c 	xori	r3,r3,32768
 8001088:	18e00004 	addi	r3,r3,-32768
 800108c:	1800ed26 	beq	r3,zero,8001444 <___vfprintf_internal_r+0x430>
 8001090:	d9012917 	ldw	r4,1188(sp)
 8001094:	20c00417 	ldw	r3,16(r4)
 8001098:	1800ea26 	beq	r3,zero,8001444 <___vfprintf_internal_r+0x430>
 800109c:	1100068c 	andi	r4,r2,26
 80010a0:	00c00284 	movi	r3,10
 80010a4:	20c0f026 	beq	r4,r3,8001468 <___vfprintf_internal_r+0x454>
 80010a8:	d9010dc4 	addi	r4,sp,1079
 80010ac:	d8810e04 	addi	r2,sp,1080
 80010b0:	dc413017 	ldw	r17,1216(sp)
 80010b4:	d8c00404 	addi	r3,sp,16
 80010b8:	d9012615 	stw	r4,1176(sp)
 80010bc:	1109c83a 	sub	r4,r2,r4
 80010c0:	d8812715 	stw	r2,1180(sp)
 80010c4:	d8c11b15 	stw	r3,1132(sp)
 80010c8:	d8011d15 	stw	zero,1140(sp)
 80010cc:	d8011c15 	stw	zero,1136(sp)
 80010d0:	802b883a 	mov	r21,r16
 80010d4:	d8013215 	stw	zero,1224(sp)
 80010d8:	d8013615 	stw	zero,1240(sp)
 80010dc:	d8013515 	stw	zero,1236(sp)
 80010e0:	d8012c15 	stw	zero,1200(sp)
 80010e4:	1813883a 	mov	r9,r3
 80010e8:	d9013915 	stw	r4,1252(sp)
 80010ec:	a8800007 	ldb	r2,0(r21)
 80010f0:	1002f326 	beq	r2,zero,8001cc0 <___vfprintf_internal_r+0xcac>
 80010f4:	00c00944 	movi	r3,37
 80010f8:	a825883a 	mov	r18,r21
 80010fc:	10c0021e 	bne	r2,r3,8001108 <___vfprintf_internal_r+0xf4>
 8001100:	00001406 	br	8001154 <___vfprintf_internal_r+0x140>
 8001104:	10c00326 	beq	r2,r3,8001114 <___vfprintf_internal_r+0x100>
 8001108:	94800044 	addi	r18,r18,1
 800110c:	90800007 	ldb	r2,0(r18)
 8001110:	103ffc1e 	bne	r2,zero,8001104 <___vfprintf_internal_r+0xf0>
 8001114:	9561c83a 	sub	r16,r18,r21
 8001118:	80000e26 	beq	r16,zero,8001154 <___vfprintf_internal_r+0x140>
 800111c:	da011d17 	ldw	r8,1140(sp)
 8001120:	d8c11c17 	ldw	r3,1136(sp)
 8001124:	4d400015 	stw	r21,0(r9)
 8001128:	4c000115 	stw	r16,4(r9)
 800112c:	4411883a 	add	r8,r8,r16
 8001130:	18c00044 	addi	r3,r3,1
 8001134:	da011d15 	stw	r8,1140(sp)
 8001138:	d8c11c15 	stw	r3,1136(sp)
 800113c:	008001c4 	movi	r2,7
 8001140:	10c11016 	blt	r2,r3,8001584 <___vfprintf_internal_r+0x570>
 8001144:	4a400204 	addi	r9,r9,8
 8001148:	d8812c17 	ldw	r2,1200(sp)
 800114c:	1405883a 	add	r2,r2,r16
 8001150:	d8812c15 	stw	r2,1200(sp)
 8001154:	90800007 	ldb	r2,0(r18)
 8001158:	1000ee26 	beq	r2,zero,8001514 <___vfprintf_internal_r+0x500>
 800115c:	95400044 	addi	r21,r18,1
 8001160:	94800047 	ldb	r18,1(r18)
 8001164:	073fffc4 	movi	fp,-1
 8001168:	e007883a 	mov	r3,fp
 800116c:	d8012585 	stb	zero,1174(sp)
 8001170:	d8012e15 	stw	zero,1208(sp)
 8001174:	0021883a 	mov	r16,zero
 8001178:	05001604 	movi	r20,88
 800117c:	04c00244 	movi	r19,9
 8001180:	4839883a 	mov	fp,r9
 8001184:	ad400044 	addi	r21,r21,1
 8001188:	90bff804 	addi	r2,r18,-32
 800118c:	a080462e 	bgeu	r20,r2,80012a8 <___vfprintf_internal_r+0x294>
 8001190:	e013883a 	mov	r9,fp
 8001194:	9000df26 	beq	r18,zero,8001514 <___vfprintf_internal_r+0x500>
 8001198:	00c00044 	movi	r3,1
 800119c:	d8c12815 	stw	r3,1184(sp)
 80011a0:	dc810405 	stb	r18,1040(sp)
 80011a4:	d8012585 	stb	zero,1174(sp)
 80011a8:	d8c12b15 	stw	r3,1196(sp)
 80011ac:	dcc10404 	addi	r19,sp,1040
 80011b0:	d8013115 	stw	zero,1220(sp)
 80011b4:	80c0008c 	andi	r3,r16,2
 80011b8:	d8c12a15 	stw	r3,1192(sp)
 80011bc:	18000326 	beq	r3,zero,80011cc <___vfprintf_internal_r+0x1b8>
 80011c0:	d8c12817 	ldw	r3,1184(sp)
 80011c4:	18c00084 	addi	r3,r3,2
 80011c8:	d8c12815 	stw	r3,1184(sp)
 80011cc:	80c0210c 	andi	r3,r16,132
 80011d0:	d8c12f15 	stw	r3,1212(sp)
 80011d4:	1802251e 	bne	r3,zero,8001a6c <___vfprintf_internal_r+0xa58>
 80011d8:	d9012e17 	ldw	r4,1208(sp)
 80011dc:	d8c12817 	ldw	r3,1184(sp)
 80011e0:	20edc83a 	sub	r22,r4,r3
 80011e4:	0582210e 	bge	zero,r22,8001a6c <___vfprintf_internal_r+0xa58>
 80011e8:	02800404 	movi	r10,16
 80011ec:	da011d17 	ldw	r8,1140(sp)
 80011f0:	d8c11c17 	ldw	r3,1136(sp)
 80011f4:	05c20074 	movhi	r23,2049
 80011f8:	bdf4da84 	addi	r23,r23,-11414
 80011fc:	5580200e 	bge	r10,r22,8001280 <___vfprintf_internal_r+0x26c>
 8001200:	dc813815 	stw	r18,1248(sp)
 8001204:	5039883a 	mov	fp,r10
 8001208:	b825883a 	mov	r18,r23
 800120c:	050001c4 	movi	r20,7
 8001210:	b02f883a 	mov	r23,r22
 8001214:	802d883a 	mov	r22,r16
 8001218:	dc012917 	ldw	r16,1188(sp)
 800121c:	00000306 	br	800122c <___vfprintf_internal_r+0x218>
 8001220:	bdfffc04 	addi	r23,r23,-16
 8001224:	4a400204 	addi	r9,r9,8
 8001228:	e5c0110e 	bge	fp,r23,8001270 <___vfprintf_internal_r+0x25c>
 800122c:	4c800015 	stw	r18,0(r9)
 8001230:	4f000115 	stw	fp,4(r9)
 8001234:	42000404 	addi	r8,r8,16
 8001238:	18c00044 	addi	r3,r3,1
 800123c:	da011d15 	stw	r8,1140(sp)
 8001240:	d8c11c15 	stw	r3,1136(sp)
 8001244:	a0fff60e 	bge	r20,r3,8001220 <___vfprintf_internal_r+0x20c>
 8001248:	8809883a 	mov	r4,r17
 800124c:	800b883a 	mov	r5,r16
 8001250:	d9811b04 	addi	r6,sp,1132
 8001254:	8000fe00 	call	8000fe0 <__sprint_r>
 8001258:	1000b41e 	bne	r2,zero,800152c <___vfprintf_internal_r+0x518>
 800125c:	bdfffc04 	addi	r23,r23,-16
 8001260:	da011d17 	ldw	r8,1140(sp)
 8001264:	d8c11c17 	ldw	r3,1136(sp)
 8001268:	da400404 	addi	r9,sp,16
 800126c:	e5ffef16 	blt	fp,r23,800122c <___vfprintf_internal_r+0x218>
 8001270:	b021883a 	mov	r16,r22
 8001274:	b82d883a 	mov	r22,r23
 8001278:	902f883a 	mov	r23,r18
 800127c:	dc813817 	ldw	r18,1248(sp)
 8001280:	4dc00015 	stw	r23,0(r9)
 8001284:	4d800115 	stw	r22,4(r9)
 8001288:	4591883a 	add	r8,r8,r22
 800128c:	18c00044 	addi	r3,r3,1
 8001290:	da011d15 	stw	r8,1140(sp)
 8001294:	d8c11c15 	stw	r3,1136(sp)
 8001298:	008001c4 	movi	r2,7
 800129c:	10c3fe16 	blt	r2,r3,8002298 <___vfprintf_internal_r+0x1284>
 80012a0:	4a400204 	addi	r9,r9,8
 80012a4:	0001f306 	br	8001a74 <___vfprintf_internal_r+0xa60>
 80012a8:	1085883a 	add	r2,r2,r2
 80012ac:	1085883a 	add	r2,r2,r2
 80012b0:	01020034 	movhi	r4,2048
 80012b4:	2104b104 	addi	r4,r4,4804
 80012b8:	1105883a 	add	r2,r2,r4
 80012bc:	10800017 	ldw	r2,0(r2)
 80012c0:	1000683a 	jmp	r2
 80012c4:	080019a0 	cmpeqi	zero,at,102
 80012c8:	08001190 	cmplti	zero,at,70
 80012cc:	08001190 	cmplti	zero,at,70
 80012d0:	080019b8 	rdprs	zero,at,102
 80012d4:	08001190 	cmplti	zero,at,70
 80012d8:	08001190 	cmplti	zero,at,70
 80012dc:	08001190 	cmplti	zero,at,70
 80012e0:	08001190 	cmplti	zero,at,70
 80012e4:	08001190 	cmplti	zero,at,70
 80012e8:	08001190 	cmplti	zero,at,70
 80012ec:	08001870 	cmpltui	zero,at,97
 80012f0:	08001a04 	addi	zero,at,104
 80012f4:	08001190 	cmplti	zero,at,70
 80012f8:	08001438 	rdprs	zero,at,80
 80012fc:	080017d8 	cmpnei	zero,at,95
 8001300:	08001190 	cmplti	zero,at,70
 8001304:	080019c4 	addi	zero,at,103
 8001308:	080019d0 	cmplti	zero,at,103
 800130c:	080019d0 	cmplti	zero,at,103
 8001310:	080019d0 	cmplti	zero,at,103
 8001314:	080019d0 	cmplti	zero,at,103
 8001318:	080019d0 	cmplti	zero,at,103
 800131c:	080019d0 	cmplti	zero,at,103
 8001320:	080019d0 	cmplti	zero,at,103
 8001324:	080019d0 	cmplti	zero,at,103
 8001328:	080019d0 	cmplti	zero,at,103
 800132c:	08001190 	cmplti	zero,at,70
 8001330:	08001190 	cmplti	zero,at,70
 8001334:	08001190 	cmplti	zero,at,70
 8001338:	08001190 	cmplti	zero,at,70
 800133c:	08001190 	cmplti	zero,at,70
 8001340:	08001190 	cmplti	zero,at,70
 8001344:	08001190 	cmplti	zero,at,70
 8001348:	08001190 	cmplti	zero,at,70
 800134c:	08001190 	cmplti	zero,at,70
 8001350:	08001190 	cmplti	zero,at,70
 8001354:	080015a8 	cmpgeui	zero,at,86
 8001358:	08001668 	cmpgeui	zero,at,89
 800135c:	08001190 	cmplti	zero,at,70
 8001360:	08001668 	cmpgeui	zero,at,89
 8001364:	08001190 	cmplti	zero,at,70
 8001368:	08001190 	cmplti	zero,at,70
 800136c:	08001190 	cmplti	zero,at,70
 8001370:	08001190 	cmplti	zero,at,70
 8001374:	080016fc 	xorhi	zero,at,91
 8001378:	08001190 	cmplti	zero,at,70
 800137c:	08001190 	cmplti	zero,at,70
 8001380:	08001708 	cmpgei	zero,at,92
 8001384:	08001190 	cmplti	zero,at,70
 8001388:	08001190 	cmplti	zero,at,70
 800138c:	08001190 	cmplti	zero,at,70
 8001390:	08001190 	cmplti	zero,at,70
 8001394:	08001190 	cmplti	zero,at,70
 8001398:	08001740 	call	800174 <__alt_mem_sdram-0x77ffe8c>
 800139c:	08001190 	cmplti	zero,at,70
 80013a0:	08001190 	cmplti	zero,at,70
 80013a4:	0800177c 	xorhi	zero,at,93
 80013a8:	08001190 	cmplti	zero,at,70
 80013ac:	08001190 	cmplti	zero,at,70
 80013b0:	08001190 	cmplti	zero,at,70
 80013b4:	08001190 	cmplti	zero,at,70
 80013b8:	08001190 	cmplti	zero,at,70
 80013bc:	08001190 	cmplti	zero,at,70
 80013c0:	08001190 	cmplti	zero,at,70
 80013c4:	08001190 	cmplti	zero,at,70
 80013c8:	08001190 	cmplti	zero,at,70
 80013cc:	08001190 	cmplti	zero,at,70
 80013d0:	08001a14 	ori	zero,at,104
 80013d4:	08001a48 	cmpgei	zero,at,105
 80013d8:	08001668 	cmpgeui	zero,at,89
 80013dc:	08001668 	cmpgeui	zero,at,89
 80013e0:	08001668 	cmpgeui	zero,at,89
 80013e4:	08001994 	ori	zero,at,102
 80013e8:	08001a48 	cmpgei	zero,at,105
 80013ec:	08001190 	cmplti	zero,at,70
 80013f0:	08001190 	cmplti	zero,at,70
 80013f4:	08001820 	cmpeqi	zero,at,96
 80013f8:	08001190 	cmplti	zero,at,70
 80013fc:	08001838 	rdprs	zero,at,96
 8001400:	08001a54 	ori	zero,at,105
 8001404:	08001898 	cmpnei	zero,at,98
 8001408:	080018e8 	cmpgeui	zero,at,99
 800140c:	08001190 	cmplti	zero,at,70
 8001410:	080018f4 	orhi	zero,at,99
 8001414:	08001190 	cmplti	zero,at,70
 8001418:	08001a60 	cmpeqi	zero,at,105
 800141c:	08001190 	cmplti	zero,at,70
 8001420:	08001190 	cmplti	zero,at,70
 8001424:	08001958 	cmpnei	zero,at,101
 8001428:	d9012e17 	ldw	r4,1208(sp)
 800142c:	d8812d15 	stw	r2,1204(sp)
 8001430:	0109c83a 	sub	r4,zero,r4
 8001434:	d9012e15 	stw	r4,1208(sp)
 8001438:	84000114 	ori	r16,r16,4
 800143c:	ac800007 	ldb	r18,0(r21)
 8001440:	003f5006 	br	8001184 <___vfprintf_internal_r+0x170>
 8001444:	d9013017 	ldw	r4,1216(sp)
 8001448:	d9412917 	ldw	r5,1188(sp)
 800144c:	8002eb40 	call	8002eb4 <__swsetup_r>
 8001450:	10003d1e 	bne	r2,zero,8001548 <___vfprintf_internal_r+0x534>
 8001454:	d8c12917 	ldw	r3,1188(sp)
 8001458:	1880030b 	ldhu	r2,12(r3)
 800145c:	00c00284 	movi	r3,10
 8001460:	1100068c 	andi	r4,r2,26
 8001464:	20ff101e 	bne	r4,r3,80010a8 <___vfprintf_internal_r+0x94>
 8001468:	d9012917 	ldw	r4,1188(sp)
 800146c:	20c0038b 	ldhu	r3,14(r4)
 8001470:	193fffcc 	andi	r4,r3,65535
 8001474:	2120001c 	xori	r4,r4,32768
 8001478:	21200004 	addi	r4,r4,-32768
 800147c:	203f0a16 	blt	r4,zero,80010a8 <___vfprintf_internal_r+0x94>
 8001480:	d9012917 	ldw	r4,1188(sp)
 8001484:	d9c12d17 	ldw	r7,1204(sp)
 8001488:	10bfff4c 	andi	r2,r2,65533
 800148c:	22800717 	ldw	r10,28(r4)
 8001490:	22400917 	ldw	r9,36(r4)
 8001494:	d9013017 	ldw	r4,1216(sp)
 8001498:	02010004 	movi	r8,1024
 800149c:	d881070d 	sth	r2,1052(sp)
 80014a0:	d9410404 	addi	r5,sp,1040
 80014a4:	d8800404 	addi	r2,sp,16
 80014a8:	800d883a 	mov	r6,r16
 80014ac:	d8c1078d 	sth	r3,1054(sp)
 80014b0:	da810b15 	stw	r10,1068(sp)
 80014b4:	da410d15 	stw	r9,1076(sp)
 80014b8:	d8810415 	stw	r2,1040(sp)
 80014bc:	d8810815 	stw	r2,1056(sp)
 80014c0:	da010615 	stw	r8,1048(sp)
 80014c4:	da010915 	stw	r8,1060(sp)
 80014c8:	d8010a15 	stw	zero,1064(sp)
 80014cc:	80010140 	call	8001014 <___vfprintf_internal_r>
 80014d0:	d8812c15 	stw	r2,1200(sp)
 80014d4:	10000416 	blt	r2,zero,80014e8 <___vfprintf_internal_r+0x4d4>
 80014d8:	d9013017 	ldw	r4,1216(sp)
 80014dc:	d9410404 	addi	r5,sp,1040
 80014e0:	8004a200 	call	8004a20 <_fflush_r>
 80014e4:	1006501e 	bne	r2,zero,8002e28 <___vfprintf_internal_r+0x1e14>
 80014e8:	d881070b 	ldhu	r2,1052(sp)
 80014ec:	1080100c 	andi	r2,r2,64
 80014f0:	10bfffcc 	andi	r2,r2,65535
 80014f4:	10a0001c 	xori	r2,r2,32768
 80014f8:	10a00004 	addi	r2,r2,-32768
 80014fc:	10001426 	beq	r2,zero,8001550 <___vfprintf_internal_r+0x53c>
 8001500:	d8c12917 	ldw	r3,1188(sp)
 8001504:	1880030b 	ldhu	r2,12(r3)
 8001508:	10801014 	ori	r2,r2,64
 800150c:	1880030d 	sth	r2,12(r3)
 8001510:	00000f06 	br	8001550 <___vfprintf_internal_r+0x53c>
 8001514:	d8811d17 	ldw	r2,1140(sp)
 8001518:	10000426 	beq	r2,zero,800152c <___vfprintf_internal_r+0x518>
 800151c:	d9013017 	ldw	r4,1216(sp)
 8001520:	d9412917 	ldw	r5,1188(sp)
 8001524:	d9811b04 	addi	r6,sp,1132
 8001528:	8000fe00 	call	8000fe0 <__sprint_r>
 800152c:	d8c12917 	ldw	r3,1188(sp)
 8001530:	1880030b 	ldhu	r2,12(r3)
 8001534:	1080100c 	andi	r2,r2,64
 8001538:	10bfffcc 	andi	r2,r2,65535
 800153c:	10a0001c 	xori	r2,r2,32768
 8001540:	10a00004 	addi	r2,r2,-32768
 8001544:	10000226 	beq	r2,zero,8001550 <___vfprintf_internal_r+0x53c>
 8001548:	00bfffc4 	movi	r2,-1
 800154c:	d8812c15 	stw	r2,1200(sp)
 8001550:	d8812c17 	ldw	r2,1200(sp)
 8001554:	dfc14617 	ldw	ra,1304(sp)
 8001558:	df014517 	ldw	fp,1300(sp)
 800155c:	ddc14417 	ldw	r23,1296(sp)
 8001560:	dd814317 	ldw	r22,1292(sp)
 8001564:	dd414217 	ldw	r21,1288(sp)
 8001568:	dd014117 	ldw	r20,1284(sp)
 800156c:	dcc14017 	ldw	r19,1280(sp)
 8001570:	dc813f17 	ldw	r18,1276(sp)
 8001574:	dc413e17 	ldw	r17,1272(sp)
 8001578:	dc013d17 	ldw	r16,1268(sp)
 800157c:	dec14704 	addi	sp,sp,1308
 8001580:	f800283a 	ret
 8001584:	d9412917 	ldw	r5,1188(sp)
 8001588:	8809883a 	mov	r4,r17
 800158c:	d9811b04 	addi	r6,sp,1132
 8001590:	8000fe00 	call	8000fe0 <__sprint_r>
 8001594:	103fe51e 	bne	r2,zero,800152c <___vfprintf_internal_r+0x518>
 8001598:	da400404 	addi	r9,sp,16
 800159c:	003eea06 	br	8001148 <___vfprintf_internal_r+0x134>
 80015a0:	8004cdc0 	call	8004cdc <__sinit>
 80015a4:	003eb306 	br	8001074 <___vfprintf_internal_r+0x60>
 80015a8:	e013883a 	mov	r9,fp
 80015ac:	84000414 	ori	r16,r16,16
 80015b0:	1839883a 	mov	fp,r3
 80015b4:	8080080c 	andi	r2,r16,32
 80015b8:	10034426 	beq	r2,zero,80022cc <___vfprintf_internal_r+0x12b8>
 80015bc:	d8c12d17 	ldw	r3,1204(sp)
 80015c0:	18800117 	ldw	r2,4(r3)
 80015c4:	1dc00017 	ldw	r23,0(r3)
 80015c8:	18c00204 	addi	r3,r3,8
 80015cc:	d8c12d15 	stw	r3,1204(sp)
 80015d0:	102d883a 	mov	r22,r2
 80015d4:	1003020e 	bge	r2,zero,80021e0 <___vfprintf_internal_r+0x11cc>
 80015d8:	05efc83a 	sub	r23,zero,r23
 80015dc:	b804c03a 	cmpne	r2,r23,zero
 80015e0:	05adc83a 	sub	r22,zero,r22
 80015e4:	b0adc83a 	sub	r22,r22,r2
 80015e8:	00800b44 	movi	r2,45
 80015ec:	d8812585 	stb	r2,1174(sp)
 80015f0:	00c00044 	movi	r3,1
 80015f4:	bd84b03a 	or	r2,r23,r22
 80015f8:	e0000216 	blt	fp,zero,8001604 <___vfprintf_internal_r+0x5f0>
 80015fc:	013fdfc4 	movi	r4,-129
 8001600:	8120703a 	and	r16,r16,r4
 8001604:	1001cc1e 	bne	r2,zero,8001d38 <___vfprintf_internal_r+0xd24>
 8001608:	e001cb1e 	bne	fp,zero,8001d38 <___vfprintf_internal_r+0xd24>
 800160c:	18c03fcc 	andi	r3,r3,255
 8001610:	1802ca1e 	bne	r3,zero,800213c <___vfprintf_internal_r+0x1128>
 8001614:	8080004c 	andi	r2,r16,1
 8001618:	1002c826 	beq	r2,zero,800213c <___vfprintf_internal_r+0x1128>
 800161c:	d8c13917 	ldw	r3,1252(sp)
 8001620:	00800c04 	movi	r2,48
 8001624:	d8810dc5 	stb	r2,1079(sp)
 8001628:	d8c12b15 	stw	r3,1196(sp)
 800162c:	dcc10dc4 	addi	r19,sp,1079
 8001630:	d8812b17 	ldw	r2,1196(sp)
 8001634:	d8812815 	stw	r2,1184(sp)
 8001638:	1700010e 	bge	r2,fp,8001640 <___vfprintf_internal_r+0x62c>
 800163c:	df012815 	stw	fp,1184(sp)
 8001640:	d8812583 	ldbu	r2,1174(sp)
 8001644:	df013115 	stw	fp,1220(sp)
 8001648:	10803fcc 	andi	r2,r2,255
 800164c:	1080201c 	xori	r2,r2,128
 8001650:	10bfe004 	addi	r2,r2,-128
 8001654:	103ed726 	beq	r2,zero,80011b4 <___vfprintf_internal_r+0x1a0>
 8001658:	d8c12817 	ldw	r3,1184(sp)
 800165c:	18c00044 	addi	r3,r3,1
 8001660:	d8c12815 	stw	r3,1184(sp)
 8001664:	003ed306 	br	80011b4 <___vfprintf_internal_r+0x1a0>
 8001668:	8080020c 	andi	r2,r16,8
 800166c:	e013883a 	mov	r9,fp
 8001670:	1839883a 	mov	fp,r3
 8001674:	1003a626 	beq	r2,zero,8002510 <___vfprintf_internal_r+0x14fc>
 8001678:	d9012d17 	ldw	r4,1204(sp)
 800167c:	25800017 	ldw	r22,0(r4)
 8001680:	25000117 	ldw	r20,4(r4)
 8001684:	21000204 	addi	r4,r4,8
 8001688:	d9012d15 	stw	r4,1204(sp)
 800168c:	dd813315 	stw	r22,1228(sp)
 8001690:	dd013415 	stw	r20,1232(sp)
 8001694:	b009883a 	mov	r4,r22
 8001698:	a00b883a 	mov	r5,r20
 800169c:	da413c15 	stw	r9,1264(sp)
 80016a0:	8007e680 	call	8007e68 <__isinfd>
 80016a4:	da413c17 	ldw	r9,1264(sp)
 80016a8:	b009883a 	mov	r4,r22
 80016ac:	a00b883a 	mov	r5,r20
 80016b0:	10041d26 	beq	r2,zero,8002728 <___vfprintf_internal_r+0x1714>
 80016b4:	000d883a 	mov	r6,zero
 80016b8:	000f883a 	mov	r7,zero
 80016bc:	8009c3c0 	call	8009c3c <__ltdf2>
 80016c0:	da413c17 	ldw	r9,1264(sp)
 80016c4:	1004da16 	blt	r2,zero,8002a30 <___vfprintf_internal_r+0x1a1c>
 80016c8:	d8812583 	ldbu	r2,1174(sp)
 80016cc:	00c011c4 	movi	r3,71
 80016d0:	1c83d116 	blt	r3,r18,8002618 <___vfprintf_internal_r+0x1604>
 80016d4:	04c20074 	movhi	r19,2049
 80016d8:	9cf4ca04 	addi	r19,r19,-11480
 80016dc:	00c000c4 	movi	r3,3
 80016e0:	d8c12815 	stw	r3,1184(sp)
 80016e4:	00ffdfc4 	movi	r3,-129
 80016e8:	80e0703a 	and	r16,r16,r3
 80016ec:	d8c12817 	ldw	r3,1184(sp)
 80016f0:	d8013115 	stw	zero,1220(sp)
 80016f4:	d8c12b15 	stw	r3,1196(sp)
 80016f8:	003fd306 	br	8001648 <___vfprintf_internal_r+0x634>
 80016fc:	84000214 	ori	r16,r16,8
 8001700:	ac800007 	ldb	r18,0(r21)
 8001704:	003e9f06 	br	8001184 <___vfprintf_internal_r+0x170>
 8001708:	e013883a 	mov	r9,fp
 800170c:	84000414 	ori	r16,r16,16
 8001710:	1839883a 	mov	fp,r3
 8001714:	8080080c 	andi	r2,r16,32
 8001718:	10031d26 	beq	r2,zero,8002390 <___vfprintf_internal_r+0x137c>
 800171c:	d8812d17 	ldw	r2,1204(sp)
 8001720:	0007883a 	mov	r3,zero
 8001724:	15c00017 	ldw	r23,0(r2)
 8001728:	15800117 	ldw	r22,4(r2)
 800172c:	10800204 	addi	r2,r2,8
 8001730:	d8812d15 	stw	r2,1204(sp)
 8001734:	d8012585 	stb	zero,1174(sp)
 8001738:	bd84b03a 	or	r2,r23,r22
 800173c:	003fae06 	br	80015f8 <___vfprintf_internal_r+0x5e4>
 8001740:	e013883a 	mov	r9,fp
 8001744:	84000414 	ori	r16,r16,16
 8001748:	1839883a 	mov	fp,r3
 800174c:	8080080c 	andi	r2,r16,32
 8001750:	1002e726 	beq	r2,zero,80022f0 <___vfprintf_internal_r+0x12dc>
 8001754:	d8c12d17 	ldw	r3,1204(sp)
 8001758:	d9012d17 	ldw	r4,1204(sp)
 800175c:	1dc00017 	ldw	r23,0(r3)
 8001760:	1d800117 	ldw	r22,4(r3)
 8001764:	21000204 	addi	r4,r4,8
 8001768:	00c00044 	movi	r3,1
 800176c:	d9012d15 	stw	r4,1204(sp)
 8001770:	bd84b03a 	or	r2,r23,r22
 8001774:	d8012585 	stb	zero,1174(sp)
 8001778:	003f9f06 	br	80015f8 <___vfprintf_internal_r+0x5e4>
 800177c:	e013883a 	mov	r9,fp
 8001780:	1839883a 	mov	fp,r3
 8001784:	00c20074 	movhi	r3,2049
 8001788:	18f4ce04 	addi	r3,r3,-11464
 800178c:	d8c13615 	stw	r3,1240(sp)
 8001790:	8080080c 	andi	r2,r16,32
 8001794:	10007726 	beq	r2,zero,8001974 <___vfprintf_internal_r+0x960>
 8001798:	d9012d17 	ldw	r4,1204(sp)
 800179c:	25c00017 	ldw	r23,0(r4)
 80017a0:	25800117 	ldw	r22,4(r4)
 80017a4:	21000204 	addi	r4,r4,8
 80017a8:	d9012d15 	stw	r4,1204(sp)
 80017ac:	8080004c 	andi	r2,r16,1
 80017b0:	1002c226 	beq	r2,zero,80022bc <___vfprintf_internal_r+0x12a8>
 80017b4:	bd84b03a 	or	r2,r23,r22
 80017b8:	10035d26 	beq	r2,zero,8002530 <___vfprintf_internal_r+0x151c>
 80017bc:	00c00c04 	movi	r3,48
 80017c0:	d8c12505 	stb	r3,1172(sp)
 80017c4:	dc812545 	stb	r18,1173(sp)
 80017c8:	84000094 	ori	r16,r16,2
 80017cc:	00c00084 	movi	r3,2
 80017d0:	d8012585 	stb	zero,1174(sp)
 80017d4:	003f8806 	br	80015f8 <___vfprintf_internal_r+0x5e4>
 80017d8:	ac800007 	ldb	r18,0(r21)
 80017dc:	00c00a84 	movi	r3,42
 80017e0:	adc00044 	addi	r23,r21,1
 80017e4:	90c57526 	beq	r18,r3,8002dbc <___vfprintf_internal_r+0x1da8>
 80017e8:	95bff404 	addi	r22,r18,-48
 80017ec:	0009883a 	mov	r4,zero
 80017f0:	9d84ff36 	bltu	r19,r22,8002bf0 <___vfprintf_internal_r+0x1bdc>
 80017f4:	01400284 	movi	r5,10
 80017f8:	8000df40 	call	8000df4 <__mulsi3>
 80017fc:	bc800007 	ldb	r18,0(r23)
 8001800:	b089883a 	add	r4,r22,r2
 8001804:	bdc00044 	addi	r23,r23,1
 8001808:	95bff404 	addi	r22,r18,-48
 800180c:	9dbff92e 	bgeu	r19,r22,80017f4 <___vfprintf_internal_r+0x7e0>
 8001810:	2007883a 	mov	r3,r4
 8001814:	20044316 	blt	r4,zero,8002924 <___vfprintf_internal_r+0x1910>
 8001818:	b82b883a 	mov	r21,r23
 800181c:	003e5a06 	br	8001188 <___vfprintf_internal_r+0x174>
 8001820:	ac800007 	ldb	r18,0(r21)
 8001824:	01001b04 	movi	r4,108
 8001828:	a805883a 	mov	r2,r21
 800182c:	91045526 	beq	r18,r4,8002984 <___vfprintf_internal_r+0x1970>
 8001830:	84000414 	ori	r16,r16,16
 8001834:	003e5306 	br	8001184 <___vfprintf_internal_r+0x170>
 8001838:	8080080c 	andi	r2,r16,32
 800183c:	e013883a 	mov	r9,fp
 8001840:	10034026 	beq	r2,zero,8002544 <___vfprintf_internal_r+0x1530>
 8001844:	d9012d17 	ldw	r4,1204(sp)
 8001848:	20800017 	ldw	r2,0(r4)
 800184c:	d9012c17 	ldw	r4,1200(sp)
 8001850:	2007d7fa 	srai	r3,r4,31
 8001854:	d9012d17 	ldw	r4,1204(sp)
 8001858:	10c00115 	stw	r3,4(r2)
 800185c:	21000104 	addi	r4,r4,4
 8001860:	d9012d15 	stw	r4,1204(sp)
 8001864:	d9012c17 	ldw	r4,1200(sp)
 8001868:	11000015 	stw	r4,0(r2)
 800186c:	003e1f06 	br	80010ec <___vfprintf_internal_r+0xd8>
 8001870:	d9012d17 	ldw	r4,1204(sp)
 8001874:	21000017 	ldw	r4,0(r4)
 8001878:	d9012e15 	stw	r4,1208(sp)
 800187c:	d9012d17 	ldw	r4,1204(sp)
 8001880:	20800104 	addi	r2,r4,4
 8001884:	d9012e17 	ldw	r4,1208(sp)
 8001888:	203ee716 	blt	r4,zero,8001428 <___vfprintf_internal_r+0x414>
 800188c:	d8812d15 	stw	r2,1204(sp)
 8001890:	ac800007 	ldb	r18,0(r21)
 8001894:	003e3b06 	br	8001184 <___vfprintf_internal_r+0x170>
 8001898:	e013883a 	mov	r9,fp
 800189c:	1839883a 	mov	fp,r3
 80018a0:	d8c12d17 	ldw	r3,1204(sp)
 80018a4:	00800c04 	movi	r2,48
 80018a8:	01020074 	movhi	r4,2049
 80018ac:	2134d304 	addi	r4,r4,-11444
 80018b0:	1dc00017 	ldw	r23,0(r3)
 80018b4:	18c00104 	addi	r3,r3,4
 80018b8:	d8812505 	stb	r2,1172(sp)
 80018bc:	00801e04 	movi	r2,120
 80018c0:	d8812545 	stb	r2,1173(sp)
 80018c4:	d8c12d15 	stw	r3,1204(sp)
 80018c8:	002d883a 	mov	r22,zero
 80018cc:	84000094 	ori	r16,r16,2
 80018d0:	d9013615 	stw	r4,1240(sp)
 80018d4:	00c00084 	movi	r3,2
 80018d8:	04801e04 	movi	r18,120
 80018dc:	b805883a 	mov	r2,r23
 80018e0:	d8012585 	stb	zero,1174(sp)
 80018e4:	003f4406 	br	80015f8 <___vfprintf_internal_r+0x5e4>
 80018e8:	84000814 	ori	r16,r16,32
 80018ec:	ac800007 	ldb	r18,0(r21)
 80018f0:	003e2406 	br	8001184 <___vfprintf_internal_r+0x170>
 80018f4:	d8812d17 	ldw	r2,1204(sp)
 80018f8:	d8012585 	stb	zero,1174(sp)
 80018fc:	e013883a 	mov	r9,fp
 8001900:	14c00017 	ldw	r19,0(r2)
 8001904:	1839883a 	mov	fp,r3
 8001908:	15c00104 	addi	r23,r2,4
 800190c:	98045526 	beq	r19,zero,8002a64 <___vfprintf_internal_r+0x1a50>
 8001910:	9809883a 	mov	r4,r19
 8001914:	18043116 	blt	r3,zero,80029dc <___vfprintf_internal_r+0x19c8>
 8001918:	000b883a 	mov	r5,zero
 800191c:	180d883a 	mov	r6,r3
 8001920:	da413c15 	stw	r9,1264(sp)
 8001924:	800637c0 	call	800637c <memchr>
 8001928:	da413c17 	ldw	r9,1264(sp)
 800192c:	10047a26 	beq	r2,zero,8002b18 <___vfprintf_internal_r+0x1b04>
 8001930:	14c5c83a 	sub	r2,r2,r19
 8001934:	d8812b15 	stw	r2,1196(sp)
 8001938:	e083d40e 	bge	fp,r2,800288c <___vfprintf_internal_r+0x1878>
 800193c:	df012815 	stw	fp,1184(sp)
 8001940:	e004e416 	blt	fp,zero,8002cd4 <___vfprintf_internal_r+0x1cc0>
 8001944:	d8812583 	ldbu	r2,1174(sp)
 8001948:	df012b15 	stw	fp,1196(sp)
 800194c:	ddc12d15 	stw	r23,1204(sp)
 8001950:	d8013115 	stw	zero,1220(sp)
 8001954:	003f3c06 	br	8001648 <___vfprintf_internal_r+0x634>
 8001958:	00820074 	movhi	r2,2049
 800195c:	10b4d304 	addi	r2,r2,-11444
 8001960:	d8813615 	stw	r2,1240(sp)
 8001964:	8080080c 	andi	r2,r16,32
 8001968:	e013883a 	mov	r9,fp
 800196c:	1839883a 	mov	fp,r3
 8001970:	103f891e 	bne	r2,zero,8001798 <___vfprintf_internal_r+0x784>
 8001974:	8080040c 	andi	r2,r16,16
 8001978:	1002c326 	beq	r2,zero,8002488 <___vfprintf_internal_r+0x1474>
 800197c:	d8812d17 	ldw	r2,1204(sp)
 8001980:	002d883a 	mov	r22,zero
 8001984:	15c00017 	ldw	r23,0(r2)
 8001988:	10800104 	addi	r2,r2,4
 800198c:	d8812d15 	stw	r2,1204(sp)
 8001990:	003f8606 	br	80017ac <___vfprintf_internal_r+0x798>
 8001994:	84001014 	ori	r16,r16,64
 8001998:	ac800007 	ldb	r18,0(r21)
 800199c:	003df906 	br	8001184 <___vfprintf_internal_r+0x170>
 80019a0:	d8812587 	ldb	r2,1174(sp)
 80019a4:	1002e51e 	bne	r2,zero,800253c <___vfprintf_internal_r+0x1528>
 80019a8:	00800804 	movi	r2,32
 80019ac:	d8812585 	stb	r2,1174(sp)
 80019b0:	ac800007 	ldb	r18,0(r21)
 80019b4:	003df306 	br	8001184 <___vfprintf_internal_r+0x170>
 80019b8:	84000054 	ori	r16,r16,1
 80019bc:	ac800007 	ldb	r18,0(r21)
 80019c0:	003df006 	br	8001184 <___vfprintf_internal_r+0x170>
 80019c4:	84002014 	ori	r16,r16,128
 80019c8:	ac800007 	ldb	r18,0(r21)
 80019cc:	003ded06 	br	8001184 <___vfprintf_internal_r+0x170>
 80019d0:	0009883a 	mov	r4,zero
 80019d4:	95bff404 	addi	r22,r18,-48
 80019d8:	182f883a 	mov	r23,r3
 80019dc:	01400284 	movi	r5,10
 80019e0:	8000df40 	call	8000df4 <__mulsi3>
 80019e4:	ac800007 	ldb	r18,0(r21)
 80019e8:	1589883a 	add	r4,r2,r22
 80019ec:	ad400044 	addi	r21,r21,1
 80019f0:	95bff404 	addi	r22,r18,-48
 80019f4:	9dbff92e 	bgeu	r19,r22,80019dc <___vfprintf_internal_r+0x9c8>
 80019f8:	b807883a 	mov	r3,r23
 80019fc:	d9012e15 	stw	r4,1208(sp)
 8001a00:	003de106 	br	8001188 <___vfprintf_internal_r+0x174>
 8001a04:	00800ac4 	movi	r2,43
 8001a08:	d8812585 	stb	r2,1174(sp)
 8001a0c:	ac800007 	ldb	r18,0(r21)
 8001a10:	003ddc06 	br	8001184 <___vfprintf_internal_r+0x170>
 8001a14:	d8c12d17 	ldw	r3,1204(sp)
 8001a18:	d9012d17 	ldw	r4,1204(sp)
 8001a1c:	e013883a 	mov	r9,fp
 8001a20:	18800017 	ldw	r2,0(r3)
 8001a24:	21000104 	addi	r4,r4,4
 8001a28:	00c00044 	movi	r3,1
 8001a2c:	d8c12815 	stw	r3,1184(sp)
 8001a30:	d8012585 	stb	zero,1174(sp)
 8001a34:	d8810405 	stb	r2,1040(sp)
 8001a38:	d9012d15 	stw	r4,1204(sp)
 8001a3c:	d8c12b15 	stw	r3,1196(sp)
 8001a40:	dcc10404 	addi	r19,sp,1040
 8001a44:	003dda06 	br	80011b0 <___vfprintf_internal_r+0x19c>
 8001a48:	e013883a 	mov	r9,fp
 8001a4c:	1839883a 	mov	fp,r3
 8001a50:	003ed806 	br	80015b4 <___vfprintf_internal_r+0x5a0>
 8001a54:	e013883a 	mov	r9,fp
 8001a58:	1839883a 	mov	fp,r3
 8001a5c:	003f2d06 	br	8001714 <___vfprintf_internal_r+0x700>
 8001a60:	e013883a 	mov	r9,fp
 8001a64:	1839883a 	mov	fp,r3
 8001a68:	003f3806 	br	800174c <___vfprintf_internal_r+0x738>
 8001a6c:	da011d17 	ldw	r8,1140(sp)
 8001a70:	d8c11c17 	ldw	r3,1136(sp)
 8001a74:	d8812587 	ldb	r2,1174(sp)
 8001a78:	10000b26 	beq	r2,zero,8001aa8 <___vfprintf_internal_r+0xa94>
 8001a7c:	d8812584 	addi	r2,sp,1174
 8001a80:	48800015 	stw	r2,0(r9)
 8001a84:	00800044 	movi	r2,1
 8001a88:	48800115 	stw	r2,4(r9)
 8001a8c:	4091883a 	add	r8,r8,r2
 8001a90:	1887883a 	add	r3,r3,r2
 8001a94:	da011d15 	stw	r8,1140(sp)
 8001a98:	d8c11c15 	stw	r3,1136(sp)
 8001a9c:	008001c4 	movi	r2,7
 8001aa0:	10c18e16 	blt	r2,r3,80020dc <___vfprintf_internal_r+0x10c8>
 8001aa4:	4a400204 	addi	r9,r9,8
 8001aa8:	d9012a17 	ldw	r4,1192(sp)
 8001aac:	20000b26 	beq	r4,zero,8001adc <___vfprintf_internal_r+0xac8>
 8001ab0:	d8812504 	addi	r2,sp,1172
 8001ab4:	48800015 	stw	r2,0(r9)
 8001ab8:	00800084 	movi	r2,2
 8001abc:	48800115 	stw	r2,4(r9)
 8001ac0:	4091883a 	add	r8,r8,r2
 8001ac4:	18c00044 	addi	r3,r3,1
 8001ac8:	da011d15 	stw	r8,1140(sp)
 8001acc:	d8c11c15 	stw	r3,1136(sp)
 8001ad0:	008001c4 	movi	r2,7
 8001ad4:	10c17816 	blt	r2,r3,80020b8 <___vfprintf_internal_r+0x10a4>
 8001ad8:	4a400204 	addi	r9,r9,8
 8001adc:	d9012f17 	ldw	r4,1212(sp)
 8001ae0:	00802004 	movi	r2,128
 8001ae4:	2080fc26 	beq	r4,r2,8001ed8 <___vfprintf_internal_r+0xec4>
 8001ae8:	d8813117 	ldw	r2,1220(sp)
 8001aec:	d9012b17 	ldw	r4,1196(sp)
 8001af0:	112fc83a 	sub	r23,r2,r4
 8001af4:	05c02a0e 	bge	zero,r23,8001ba0 <___vfprintf_internal_r+0xb8c>
 8001af8:	07000404 	movi	fp,16
 8001afc:	05020074 	movhi	r20,2049
 8001b00:	a534de84 	addi	r20,r20,-11398
 8001b04:	e5c01d0e 	bge	fp,r23,8001b7c <___vfprintf_internal_r+0xb68>
 8001b08:	dc812a15 	stw	r18,1192(sp)
 8001b0c:	058001c4 	movi	r22,7
 8001b10:	a025883a 	mov	r18,r20
 8001b14:	8029883a 	mov	r20,r16
 8001b18:	dc012917 	ldw	r16,1188(sp)
 8001b1c:	00000306 	br	8001b2c <___vfprintf_internal_r+0xb18>
 8001b20:	bdfffc04 	addi	r23,r23,-16
 8001b24:	4a400204 	addi	r9,r9,8
 8001b28:	e5c0110e 	bge	fp,r23,8001b70 <___vfprintf_internal_r+0xb5c>
 8001b2c:	4c800015 	stw	r18,0(r9)
 8001b30:	4f000115 	stw	fp,4(r9)
 8001b34:	42000404 	addi	r8,r8,16
 8001b38:	18c00044 	addi	r3,r3,1
 8001b3c:	da011d15 	stw	r8,1140(sp)
 8001b40:	d8c11c15 	stw	r3,1136(sp)
 8001b44:	b0fff60e 	bge	r22,r3,8001b20 <___vfprintf_internal_r+0xb0c>
 8001b48:	8809883a 	mov	r4,r17
 8001b4c:	800b883a 	mov	r5,r16
 8001b50:	d9811b04 	addi	r6,sp,1132
 8001b54:	8000fe00 	call	8000fe0 <__sprint_r>
 8001b58:	103e741e 	bne	r2,zero,800152c <___vfprintf_internal_r+0x518>
 8001b5c:	bdfffc04 	addi	r23,r23,-16
 8001b60:	da011d17 	ldw	r8,1140(sp)
 8001b64:	d8c11c17 	ldw	r3,1136(sp)
 8001b68:	da400404 	addi	r9,sp,16
 8001b6c:	e5ffef16 	blt	fp,r23,8001b2c <___vfprintf_internal_r+0xb18>
 8001b70:	a021883a 	mov	r16,r20
 8001b74:	9029883a 	mov	r20,r18
 8001b78:	dc812a17 	ldw	r18,1192(sp)
 8001b7c:	4d000015 	stw	r20,0(r9)
 8001b80:	4dc00115 	stw	r23,4(r9)
 8001b84:	45d1883a 	add	r8,r8,r23
 8001b88:	18c00044 	addi	r3,r3,1
 8001b8c:	da011d15 	stw	r8,1140(sp)
 8001b90:	d8c11c15 	stw	r3,1136(sp)
 8001b94:	008001c4 	movi	r2,7
 8001b98:	10c13e16 	blt	r2,r3,8002094 <___vfprintf_internal_r+0x1080>
 8001b9c:	4a400204 	addi	r9,r9,8
 8001ba0:	8080400c 	andi	r2,r16,256
 8001ba4:	1000831e 	bne	r2,zero,8001db4 <___vfprintf_internal_r+0xda0>
 8001ba8:	d8812b17 	ldw	r2,1196(sp)
 8001bac:	4cc00015 	stw	r19,0(r9)
 8001bb0:	48800115 	stw	r2,4(r9)
 8001bb4:	4091883a 	add	r8,r8,r2
 8001bb8:	18c00044 	addi	r3,r3,1
 8001bbc:	da011d15 	stw	r8,1140(sp)
 8001bc0:	d8c11c15 	stw	r3,1136(sp)
 8001bc4:	008001c4 	movi	r2,7
 8001bc8:	10c05316 	blt	r2,r3,8001d18 <___vfprintf_internal_r+0xd04>
 8001bcc:	4a400204 	addi	r9,r9,8
 8001bd0:	8400010c 	andi	r16,r16,4
 8001bd4:	80002e26 	beq	r16,zero,8001c90 <___vfprintf_internal_r+0xc7c>
 8001bd8:	d8812e17 	ldw	r2,1208(sp)
 8001bdc:	d8c12817 	ldw	r3,1184(sp)
 8001be0:	10e1c83a 	sub	r16,r2,r3
 8001be4:	04002a0e 	bge	zero,r16,8001c90 <___vfprintf_internal_r+0xc7c>
 8001be8:	04800404 	movi	r18,16
 8001bec:	d8c11c17 	ldw	r3,1136(sp)
 8001bf0:	05c20074 	movhi	r23,2049
 8001bf4:	bdf4da84 	addi	r23,r23,-11414
 8001bf8:	9400170e 	bge	r18,r16,8001c58 <___vfprintf_internal_r+0xc44>
 8001bfc:	04c001c4 	movi	r19,7
 8001c00:	dd012917 	ldw	r20,1188(sp)
 8001c04:	00000306 	br	8001c14 <___vfprintf_internal_r+0xc00>
 8001c08:	843ffc04 	addi	r16,r16,-16
 8001c0c:	4a400204 	addi	r9,r9,8
 8001c10:	9400110e 	bge	r18,r16,8001c58 <___vfprintf_internal_r+0xc44>
 8001c14:	4dc00015 	stw	r23,0(r9)
 8001c18:	4c800115 	stw	r18,4(r9)
 8001c1c:	42000404 	addi	r8,r8,16
 8001c20:	18c00044 	addi	r3,r3,1
 8001c24:	da011d15 	stw	r8,1140(sp)
 8001c28:	d8c11c15 	stw	r3,1136(sp)
 8001c2c:	98fff60e 	bge	r19,r3,8001c08 <___vfprintf_internal_r+0xbf4>
 8001c30:	8809883a 	mov	r4,r17
 8001c34:	a00b883a 	mov	r5,r20
 8001c38:	d9811b04 	addi	r6,sp,1132
 8001c3c:	8000fe00 	call	8000fe0 <__sprint_r>
 8001c40:	103e3a1e 	bne	r2,zero,800152c <___vfprintf_internal_r+0x518>
 8001c44:	843ffc04 	addi	r16,r16,-16
 8001c48:	da011d17 	ldw	r8,1140(sp)
 8001c4c:	d8c11c17 	ldw	r3,1136(sp)
 8001c50:	da400404 	addi	r9,sp,16
 8001c54:	943fef16 	blt	r18,r16,8001c14 <___vfprintf_internal_r+0xc00>
 8001c58:	4dc00015 	stw	r23,0(r9)
 8001c5c:	4c000115 	stw	r16,4(r9)
 8001c60:	8211883a 	add	r8,r16,r8
 8001c64:	18c00044 	addi	r3,r3,1
 8001c68:	da011d15 	stw	r8,1140(sp)
 8001c6c:	d8c11c15 	stw	r3,1136(sp)
 8001c70:	008001c4 	movi	r2,7
 8001c74:	10c0060e 	bge	r2,r3,8001c90 <___vfprintf_internal_r+0xc7c>
 8001c78:	d9412917 	ldw	r5,1188(sp)
 8001c7c:	8809883a 	mov	r4,r17
 8001c80:	d9811b04 	addi	r6,sp,1132
 8001c84:	8000fe00 	call	8000fe0 <__sprint_r>
 8001c88:	103e281e 	bne	r2,zero,800152c <___vfprintf_internal_r+0x518>
 8001c8c:	da011d17 	ldw	r8,1140(sp)
 8001c90:	dd012817 	ldw	r20,1184(sp)
 8001c94:	d9012e17 	ldw	r4,1208(sp)
 8001c98:	a100010e 	bge	r20,r4,8001ca0 <___vfprintf_internal_r+0xc8c>
 8001c9c:	2029883a 	mov	r20,r4
 8001ca0:	d8812c17 	ldw	r2,1200(sp)
 8001ca4:	1505883a 	add	r2,r2,r20
 8001ca8:	d8812c15 	stw	r2,1200(sp)
 8001cac:	4000b91e 	bne	r8,zero,8001f94 <___vfprintf_internal_r+0xf80>
 8001cb0:	d8011c15 	stw	zero,1136(sp)
 8001cb4:	a8800007 	ldb	r2,0(r21)
 8001cb8:	da400404 	addi	r9,sp,16
 8001cbc:	103d0d1e 	bne	r2,zero,80010f4 <___vfprintf_internal_r+0xe0>
 8001cc0:	a825883a 	mov	r18,r21
 8001cc4:	003d2306 	br	8001154 <___vfprintf_internal_r+0x140>
 8001cc8:	d9412917 	ldw	r5,1188(sp)
 8001ccc:	8809883a 	mov	r4,r17
 8001cd0:	d9811b04 	addi	r6,sp,1132
 8001cd4:	8000fe00 	call	8000fe0 <__sprint_r>
 8001cd8:	103e141e 	bne	r2,zero,800152c <___vfprintf_internal_r+0x518>
 8001cdc:	da011d17 	ldw	r8,1140(sp)
 8001ce0:	da400404 	addi	r9,sp,16
 8001ce4:	8080004c 	andi	r2,r16,1
 8001ce8:	103fb926 	beq	r2,zero,8001bd0 <___vfprintf_internal_r+0xbbc>
 8001cec:	d8c11c17 	ldw	r3,1136(sp)
 8001cf0:	d9013717 	ldw	r4,1244(sp)
 8001cf4:	00800044 	movi	r2,1
 8001cf8:	48800115 	stw	r2,4(r9)
 8001cfc:	49000015 	stw	r4,0(r9)
 8001d00:	4091883a 	add	r8,r8,r2
 8001d04:	1887883a 	add	r3,r3,r2
 8001d08:	da011d15 	stw	r8,1140(sp)
 8001d0c:	d8c11c15 	stw	r3,1136(sp)
 8001d10:	008001c4 	movi	r2,7
 8001d14:	10ffad0e 	bge	r2,r3,8001bcc <___vfprintf_internal_r+0xbb8>
 8001d18:	d9412917 	ldw	r5,1188(sp)
 8001d1c:	8809883a 	mov	r4,r17
 8001d20:	d9811b04 	addi	r6,sp,1132
 8001d24:	8000fe00 	call	8000fe0 <__sprint_r>
 8001d28:	103e001e 	bne	r2,zero,800152c <___vfprintf_internal_r+0x518>
 8001d2c:	da400404 	addi	r9,sp,16
 8001d30:	da011d17 	ldw	r8,1140(sp)
 8001d34:	003fa606 	br	8001bd0 <___vfprintf_internal_r+0xbbc>
 8001d38:	18803fcc 	andi	r2,r3,255
 8001d3c:	00c00044 	movi	r3,1
 8001d40:	10c10126 	beq	r2,r3,8002148 <___vfprintf_internal_r+0x1134>
 8001d44:	00c00084 	movi	r3,2
 8001d48:	10c0ed26 	beq	r2,r3,8002100 <___vfprintf_internal_r+0x10ec>
 8001d4c:	d8c10dc4 	addi	r3,sp,1079
 8001d50:	b808d0fa 	srli	r4,r23,3
 8001d54:	b00a977a 	slli	r5,r22,29
 8001d58:	b02cd0fa 	srli	r22,r22,3
 8001d5c:	bdc001cc 	andi	r23,r23,7
 8001d60:	b8800c04 	addi	r2,r23,48
 8001d64:	292eb03a 	or	r23,r5,r4
 8001d68:	18800005 	stb	r2,0(r3)
 8001d6c:	bd88b03a 	or	r4,r23,r22
 8001d70:	1827883a 	mov	r19,r3
 8001d74:	18ffffc4 	addi	r3,r3,-1
 8001d78:	203ff51e 	bne	r4,zero,8001d50 <___vfprintf_internal_r+0xd3c>
 8001d7c:	8100004c 	andi	r4,r16,1
 8001d80:	980b883a 	mov	r5,r19
 8001d84:	20000726 	beq	r4,zero,8001da4 <___vfprintf_internal_r+0xd90>
 8001d88:	10803fcc 	andi	r2,r2,255
 8001d8c:	1080201c 	xori	r2,r2,128
 8001d90:	10bfe004 	addi	r2,r2,-128
 8001d94:	01000c04 	movi	r4,48
 8001d98:	11000226 	beq	r2,r4,8001da4 <___vfprintf_internal_r+0xd90>
 8001d9c:	1827883a 	mov	r19,r3
 8001da0:	293fffc5 	stb	r4,-1(r5)
 8001da4:	d8812717 	ldw	r2,1180(sp)
 8001da8:	14c5c83a 	sub	r2,r2,r19
 8001dac:	d8812b15 	stw	r2,1196(sp)
 8001db0:	003e1f06 	br	8001630 <___vfprintf_internal_r+0x61c>
 8001db4:	00801944 	movi	r2,101
 8001db8:	14807c0e 	bge	r2,r18,8001fac <___vfprintf_internal_r+0xf98>
 8001dbc:	d9013317 	ldw	r4,1228(sp)
 8001dc0:	d9413417 	ldw	r5,1232(sp)
 8001dc4:	000d883a 	mov	r6,zero
 8001dc8:	000f883a 	mov	r7,zero
 8001dcc:	d8c13b15 	stw	r3,1260(sp)
 8001dd0:	da013a15 	stw	r8,1256(sp)
 8001dd4:	da413c15 	stw	r9,1264(sp)
 8001dd8:	8009abc0 	call	8009abc <__eqdf2>
 8001ddc:	d8c13b17 	ldw	r3,1260(sp)
 8001de0:	da013a17 	ldw	r8,1256(sp)
 8001de4:	da413c17 	ldw	r9,1264(sp)
 8001de8:	1001001e 	bne	r2,zero,80021ec <___vfprintf_internal_r+0x11d8>
 8001dec:	00820074 	movhi	r2,2049
 8001df0:	10b4da04 	addi	r2,r2,-11416
 8001df4:	48800015 	stw	r2,0(r9)
 8001df8:	00800044 	movi	r2,1
 8001dfc:	48800115 	stw	r2,4(r9)
 8001e00:	4091883a 	add	r8,r8,r2
 8001e04:	1887883a 	add	r3,r3,r2
 8001e08:	da011d15 	stw	r8,1140(sp)
 8001e0c:	d8c11c15 	stw	r3,1136(sp)
 8001e10:	008001c4 	movi	r2,7
 8001e14:	10c20316 	blt	r2,r3,8002624 <___vfprintf_internal_r+0x1610>
 8001e18:	4a400204 	addi	r9,r9,8
 8001e1c:	d8812417 	ldw	r2,1168(sp)
 8001e20:	d8c13217 	ldw	r3,1224(sp)
 8001e24:	10c00216 	blt	r2,r3,8001e30 <___vfprintf_internal_r+0xe1c>
 8001e28:	8080004c 	andi	r2,r16,1
 8001e2c:	103f6826 	beq	r2,zero,8001bd0 <___vfprintf_internal_r+0xbbc>
 8001e30:	d8c11c17 	ldw	r3,1136(sp)
 8001e34:	d9013717 	ldw	r4,1244(sp)
 8001e38:	00800044 	movi	r2,1
 8001e3c:	48800115 	stw	r2,4(r9)
 8001e40:	49000015 	stw	r4,0(r9)
 8001e44:	4091883a 	add	r8,r8,r2
 8001e48:	1887883a 	add	r3,r3,r2
 8001e4c:	da011d15 	stw	r8,1140(sp)
 8001e50:	d8c11c15 	stw	r3,1136(sp)
 8001e54:	008001c4 	movi	r2,7
 8001e58:	10c2ce16 	blt	r2,r3,8002994 <___vfprintf_internal_r+0x1980>
 8001e5c:	4a400204 	addi	r9,r9,8
 8001e60:	d8813217 	ldw	r2,1224(sp)
 8001e64:	14bfffc4 	addi	r18,r2,-1
 8001e68:	04bf590e 	bge	zero,r18,8001bd0 <___vfprintf_internal_r+0xbbc>
 8001e6c:	04c00404 	movi	r19,16
 8001e70:	d8c11c17 	ldw	r3,1136(sp)
 8001e74:	05020074 	movhi	r20,2049
 8001e78:	a534de84 	addi	r20,r20,-11398
 8001e7c:	9c818a0e 	bge	r19,r18,80024a8 <___vfprintf_internal_r+0x1494>
 8001e80:	058001c4 	movi	r22,7
 8001e84:	ddc12917 	ldw	r23,1188(sp)
 8001e88:	00000306 	br	8001e98 <___vfprintf_internal_r+0xe84>
 8001e8c:	4a400204 	addi	r9,r9,8
 8001e90:	94bffc04 	addi	r18,r18,-16
 8001e94:	9c81840e 	bge	r19,r18,80024a8 <___vfprintf_internal_r+0x1494>
 8001e98:	4d000015 	stw	r20,0(r9)
 8001e9c:	4cc00115 	stw	r19,4(r9)
 8001ea0:	42000404 	addi	r8,r8,16
 8001ea4:	18c00044 	addi	r3,r3,1
 8001ea8:	da011d15 	stw	r8,1140(sp)
 8001eac:	d8c11c15 	stw	r3,1136(sp)
 8001eb0:	b0fff60e 	bge	r22,r3,8001e8c <___vfprintf_internal_r+0xe78>
 8001eb4:	8809883a 	mov	r4,r17
 8001eb8:	b80b883a 	mov	r5,r23
 8001ebc:	d9811b04 	addi	r6,sp,1132
 8001ec0:	8000fe00 	call	8000fe0 <__sprint_r>
 8001ec4:	103d991e 	bne	r2,zero,800152c <___vfprintf_internal_r+0x518>
 8001ec8:	da011d17 	ldw	r8,1140(sp)
 8001ecc:	d8c11c17 	ldw	r3,1136(sp)
 8001ed0:	da400404 	addi	r9,sp,16
 8001ed4:	003fee06 	br	8001e90 <___vfprintf_internal_r+0xe7c>
 8001ed8:	d8812e17 	ldw	r2,1208(sp)
 8001edc:	d9012817 	ldw	r4,1184(sp)
 8001ee0:	112fc83a 	sub	r23,r2,r4
 8001ee4:	05ff000e 	bge	zero,r23,8001ae8 <___vfprintf_internal_r+0xad4>
 8001ee8:	07000404 	movi	fp,16
 8001eec:	05020074 	movhi	r20,2049
 8001ef0:	a534de84 	addi	r20,r20,-11398
 8001ef4:	e5c01d0e 	bge	fp,r23,8001f6c <___vfprintf_internal_r+0xf58>
 8001ef8:	dc812a15 	stw	r18,1192(sp)
 8001efc:	058001c4 	movi	r22,7
 8001f00:	a025883a 	mov	r18,r20
 8001f04:	8029883a 	mov	r20,r16
 8001f08:	dc012917 	ldw	r16,1188(sp)
 8001f0c:	00000306 	br	8001f1c <___vfprintf_internal_r+0xf08>
 8001f10:	bdfffc04 	addi	r23,r23,-16
 8001f14:	4a400204 	addi	r9,r9,8
 8001f18:	e5c0110e 	bge	fp,r23,8001f60 <___vfprintf_internal_r+0xf4c>
 8001f1c:	4c800015 	stw	r18,0(r9)
 8001f20:	4f000115 	stw	fp,4(r9)
 8001f24:	42000404 	addi	r8,r8,16
 8001f28:	18c00044 	addi	r3,r3,1
 8001f2c:	da011d15 	stw	r8,1140(sp)
 8001f30:	d8c11c15 	stw	r3,1136(sp)
 8001f34:	b0fff60e 	bge	r22,r3,8001f10 <___vfprintf_internal_r+0xefc>
 8001f38:	8809883a 	mov	r4,r17
 8001f3c:	800b883a 	mov	r5,r16
 8001f40:	d9811b04 	addi	r6,sp,1132
 8001f44:	8000fe00 	call	8000fe0 <__sprint_r>
 8001f48:	103d781e 	bne	r2,zero,800152c <___vfprintf_internal_r+0x518>
 8001f4c:	bdfffc04 	addi	r23,r23,-16
 8001f50:	da011d17 	ldw	r8,1140(sp)
 8001f54:	d8c11c17 	ldw	r3,1136(sp)
 8001f58:	da400404 	addi	r9,sp,16
 8001f5c:	e5ffef16 	blt	fp,r23,8001f1c <___vfprintf_internal_r+0xf08>
 8001f60:	a021883a 	mov	r16,r20
 8001f64:	9029883a 	mov	r20,r18
 8001f68:	dc812a17 	ldw	r18,1192(sp)
 8001f6c:	4d000015 	stw	r20,0(r9)
 8001f70:	4dc00115 	stw	r23,4(r9)
 8001f74:	45d1883a 	add	r8,r8,r23
 8001f78:	18c00044 	addi	r3,r3,1
 8001f7c:	da011d15 	stw	r8,1140(sp)
 8001f80:	d8c11c15 	stw	r3,1136(sp)
 8001f84:	008001c4 	movi	r2,7
 8001f88:	10c13616 	blt	r2,r3,8002464 <___vfprintf_internal_r+0x1450>
 8001f8c:	4a400204 	addi	r9,r9,8
 8001f90:	003ed506 	br	8001ae8 <___vfprintf_internal_r+0xad4>
 8001f94:	d9412917 	ldw	r5,1188(sp)
 8001f98:	8809883a 	mov	r4,r17
 8001f9c:	d9811b04 	addi	r6,sp,1132
 8001fa0:	8000fe00 	call	8000fe0 <__sprint_r>
 8001fa4:	103f4226 	beq	r2,zero,8001cb0 <___vfprintf_internal_r+0xc9c>
 8001fa8:	003d6006 	br	800152c <___vfprintf_internal_r+0x518>
 8001fac:	d9013217 	ldw	r4,1224(sp)
 8001fb0:	00800044 	movi	r2,1
 8001fb4:	4cc00015 	stw	r19,0(r9)
 8001fb8:	1101000e 	bge	r2,r4,80023bc <___vfprintf_internal_r+0x13a8>
 8001fbc:	00800044 	movi	r2,1
 8001fc0:	48800115 	stw	r2,4(r9)
 8001fc4:	4091883a 	add	r8,r8,r2
 8001fc8:	1887883a 	add	r3,r3,r2
 8001fcc:	da011d15 	stw	r8,1140(sp)
 8001fd0:	d8c11c15 	stw	r3,1136(sp)
 8001fd4:	008001c4 	movi	r2,7
 8001fd8:	10c10c16 	blt	r2,r3,800240c <___vfprintf_internal_r+0x13f8>
 8001fdc:	4a400204 	addi	r9,r9,8
 8001fe0:	d8813717 	ldw	r2,1244(sp)
 8001fe4:	48800015 	stw	r2,0(r9)
 8001fe8:	00800044 	movi	r2,1
 8001fec:	48800115 	stw	r2,4(r9)
 8001ff0:	4091883a 	add	r8,r8,r2
 8001ff4:	1887883a 	add	r3,r3,r2
 8001ff8:	da011d15 	stw	r8,1140(sp)
 8001ffc:	d8c11c15 	stw	r3,1136(sp)
 8002000:	008001c4 	movi	r2,7
 8002004:	10c10a16 	blt	r2,r3,8002430 <___vfprintf_internal_r+0x141c>
 8002008:	4c800204 	addi	r18,r9,8
 800200c:	d9013317 	ldw	r4,1228(sp)
 8002010:	d9413417 	ldw	r5,1232(sp)
 8002014:	000d883a 	mov	r6,zero
 8002018:	000f883a 	mov	r7,zero
 800201c:	d8c13b15 	stw	r3,1260(sp)
 8002020:	da013a15 	stw	r8,1256(sp)
 8002024:	8009b180 	call	8009b18 <__nedf2>
 8002028:	d8c13b17 	ldw	r3,1260(sp)
 800202c:	da013a17 	ldw	r8,1256(sp)
 8002030:	1000ba26 	beq	r2,zero,800231c <___vfprintf_internal_r+0x1308>
 8002034:	d9013217 	ldw	r4,1224(sp)
 8002038:	9cc00044 	addi	r19,r19,1
 800203c:	94c00015 	stw	r19,0(r18)
 8002040:	20bfffc4 	addi	r2,r4,-1
 8002044:	90800115 	stw	r2,4(r18)
 8002048:	4091883a 	add	r8,r8,r2
 800204c:	18c00044 	addi	r3,r3,1
 8002050:	da011d15 	stw	r8,1140(sp)
 8002054:	d8c11c15 	stw	r3,1136(sp)
 8002058:	008001c4 	movi	r2,7
 800205c:	10c0e216 	blt	r2,r3,80023e8 <___vfprintf_internal_r+0x13d4>
 8002060:	94800204 	addi	r18,r18,8
 8002064:	d9013517 	ldw	r4,1236(sp)
 8002068:	d8811fc4 	addi	r2,sp,1151
 800206c:	90800015 	stw	r2,0(r18)
 8002070:	91000115 	stw	r4,4(r18)
 8002074:	4111883a 	add	r8,r8,r4
 8002078:	18c00044 	addi	r3,r3,1
 800207c:	da011d15 	stw	r8,1140(sp)
 8002080:	d8c11c15 	stw	r3,1136(sp)
 8002084:	008001c4 	movi	r2,7
 8002088:	10ff2316 	blt	r2,r3,8001d18 <___vfprintf_internal_r+0xd04>
 800208c:	92400204 	addi	r9,r18,8
 8002090:	003ecf06 	br	8001bd0 <___vfprintf_internal_r+0xbbc>
 8002094:	d9412917 	ldw	r5,1188(sp)
 8002098:	8809883a 	mov	r4,r17
 800209c:	d9811b04 	addi	r6,sp,1132
 80020a0:	8000fe00 	call	8000fe0 <__sprint_r>
 80020a4:	103d211e 	bne	r2,zero,800152c <___vfprintf_internal_r+0x518>
 80020a8:	da011d17 	ldw	r8,1140(sp)
 80020ac:	d8c11c17 	ldw	r3,1136(sp)
 80020b0:	da400404 	addi	r9,sp,16
 80020b4:	003eba06 	br	8001ba0 <___vfprintf_internal_r+0xb8c>
 80020b8:	d9412917 	ldw	r5,1188(sp)
 80020bc:	8809883a 	mov	r4,r17
 80020c0:	d9811b04 	addi	r6,sp,1132
 80020c4:	8000fe00 	call	8000fe0 <__sprint_r>
 80020c8:	103d181e 	bne	r2,zero,800152c <___vfprintf_internal_r+0x518>
 80020cc:	da011d17 	ldw	r8,1140(sp)
 80020d0:	d8c11c17 	ldw	r3,1136(sp)
 80020d4:	da400404 	addi	r9,sp,16
 80020d8:	003e8006 	br	8001adc <___vfprintf_internal_r+0xac8>
 80020dc:	d9412917 	ldw	r5,1188(sp)
 80020e0:	8809883a 	mov	r4,r17
 80020e4:	d9811b04 	addi	r6,sp,1132
 80020e8:	8000fe00 	call	8000fe0 <__sprint_r>
 80020ec:	103d0f1e 	bne	r2,zero,800152c <___vfprintf_internal_r+0x518>
 80020f0:	da011d17 	ldw	r8,1140(sp)
 80020f4:	d8c11c17 	ldw	r3,1136(sp)
 80020f8:	da400404 	addi	r9,sp,16
 80020fc:	003e6a06 	br	8001aa8 <___vfprintf_internal_r+0xa94>
 8002100:	d9413617 	ldw	r5,1240(sp)
 8002104:	d8810dc4 	addi	r2,sp,1079
 8002108:	b8c003cc 	andi	r3,r23,15
 800210c:	b008973a 	slli	r4,r22,28
 8002110:	28c7883a 	add	r3,r5,r3
 8002114:	b82ed13a 	srli	r23,r23,4
 8002118:	18c00003 	ldbu	r3,0(r3)
 800211c:	b02cd13a 	srli	r22,r22,4
 8002120:	25eeb03a 	or	r23,r4,r23
 8002124:	10c00005 	stb	r3,0(r2)
 8002128:	bd86b03a 	or	r3,r23,r22
 800212c:	1027883a 	mov	r19,r2
 8002130:	10bfffc4 	addi	r2,r2,-1
 8002134:	183ff41e 	bne	r3,zero,8002108 <___vfprintf_internal_r+0x10f4>
 8002138:	003f1a06 	br	8001da4 <___vfprintf_internal_r+0xd90>
 800213c:	d8012b15 	stw	zero,1196(sp)
 8002140:	dcc10e04 	addi	r19,sp,1080
 8002144:	003d3a06 	br	8001630 <___vfprintf_internal_r+0x61c>
 8002148:	b0025426 	beq	r22,zero,8002a9c <___vfprintf_internal_r+0x1a88>
 800214c:	b807883a 	mov	r3,r23
 8002150:	d8810dc4 	addi	r2,sp,1079
 8002154:	882f883a 	mov	r23,r17
 8002158:	04c00244 	movi	r19,9
 800215c:	8023883a 	mov	r17,r16
 8002160:	da412815 	stw	r9,1184(sp)
 8002164:	1821883a 	mov	r16,r3
 8002168:	8009883a 	mov	r4,r16
 800216c:	b00b883a 	mov	r5,r22
 8002170:	01800284 	movi	r6,10
 8002174:	000f883a 	mov	r7,zero
 8002178:	1029883a 	mov	r20,r2
 800217c:	8008bf40 	call	8008bf4 <__umoddi3>
 8002180:	10800c04 	addi	r2,r2,48
 8002184:	8009883a 	mov	r4,r16
 8002188:	b00b883a 	mov	r5,r22
 800218c:	a0800005 	stb	r2,0(r20)
 8002190:	01800284 	movi	r6,10
 8002194:	000f883a 	mov	r7,zero
 8002198:	80085a40 	call	80085a4 <__udivdi3>
 800219c:	1021883a 	mov	r16,r2
 80021a0:	182d883a 	mov	r22,r3
 80021a4:	a0bfffc4 	addi	r2,r20,-1
 80021a8:	183fef1e 	bne	r3,zero,8002168 <___vfprintf_internal_r+0x1154>
 80021ac:	9c3fee36 	bltu	r19,r16,8002168 <___vfprintf_internal_r+0x1154>
 80021b0:	da412817 	ldw	r9,1184(sp)
 80021b4:	8005883a 	mov	r2,r16
 80021b8:	8821883a 	mov	r16,r17
 80021bc:	b823883a 	mov	r17,r23
 80021c0:	102f883a 	mov	r23,r2
 80021c4:	d8812717 	ldw	r2,1180(sp)
 80021c8:	a4ffffc4 	addi	r19,r20,-1
 80021cc:	bdc00c04 	addi	r23,r23,48
 80021d0:	14c5c83a 	sub	r2,r2,r19
 80021d4:	a5ffffc5 	stb	r23,-1(r20)
 80021d8:	d8812b15 	stw	r2,1196(sp)
 80021dc:	003d1406 	br	8001630 <___vfprintf_internal_r+0x61c>
 80021e0:	00c00044 	movi	r3,1
 80021e4:	bd84b03a 	or	r2,r23,r22
 80021e8:	003d0306 	br	80015f8 <___vfprintf_internal_r+0x5e4>
 80021ec:	dc812417 	ldw	r18,1168(sp)
 80021f0:	0481140e 	bge	zero,r18,8002644 <___vfprintf_internal_r+0x1630>
 80021f4:	d9013217 	ldw	r4,1224(sp)
 80021f8:	4cc00015 	stw	r19,0(r9)
 80021fc:	9100ec16 	blt	r18,r4,80025b0 <___vfprintf_internal_r+0x159c>
 8002200:	49000115 	stw	r4,4(r9)
 8002204:	4111883a 	add	r8,r8,r4
 8002208:	18c00044 	addi	r3,r3,1
 800220c:	da011d15 	stw	r8,1140(sp)
 8002210:	d8c11c15 	stw	r3,1136(sp)
 8002214:	008001c4 	movi	r2,7
 8002218:	10c23616 	blt	r2,r3,8002af4 <___vfprintf_internal_r+0x1ae0>
 800221c:	4a400204 	addi	r9,r9,8
 8002220:	d8813217 	ldw	r2,1224(sp)
 8002224:	90a5c83a 	sub	r18,r18,r2
 8002228:	04beae0e 	bge	zero,r18,8001ce4 <___vfprintf_internal_r+0xcd0>
 800222c:	04c00404 	movi	r19,16
 8002230:	d8c11c17 	ldw	r3,1136(sp)
 8002234:	05020074 	movhi	r20,2049
 8002238:	a534de84 	addi	r20,r20,-11398
 800223c:	9c81dd0e 	bge	r19,r18,80029b4 <___vfprintf_internal_r+0x19a0>
 8002240:	058001c4 	movi	r22,7
 8002244:	ddc12917 	ldw	r23,1188(sp)
 8002248:	00000306 	br	8002258 <___vfprintf_internal_r+0x1244>
 800224c:	4a400204 	addi	r9,r9,8
 8002250:	94bffc04 	addi	r18,r18,-16
 8002254:	9c81d70e 	bge	r19,r18,80029b4 <___vfprintf_internal_r+0x19a0>
 8002258:	4d000015 	stw	r20,0(r9)
 800225c:	4cc00115 	stw	r19,4(r9)
 8002260:	42000404 	addi	r8,r8,16
 8002264:	18c00044 	addi	r3,r3,1
 8002268:	da011d15 	stw	r8,1140(sp)
 800226c:	d8c11c15 	stw	r3,1136(sp)
 8002270:	b0fff60e 	bge	r22,r3,800224c <___vfprintf_internal_r+0x1238>
 8002274:	8809883a 	mov	r4,r17
 8002278:	b80b883a 	mov	r5,r23
 800227c:	d9811b04 	addi	r6,sp,1132
 8002280:	8000fe00 	call	8000fe0 <__sprint_r>
 8002284:	103ca91e 	bne	r2,zero,800152c <___vfprintf_internal_r+0x518>
 8002288:	da011d17 	ldw	r8,1140(sp)
 800228c:	d8c11c17 	ldw	r3,1136(sp)
 8002290:	da400404 	addi	r9,sp,16
 8002294:	003fee06 	br	8002250 <___vfprintf_internal_r+0x123c>
 8002298:	d9412917 	ldw	r5,1188(sp)
 800229c:	8809883a 	mov	r4,r17
 80022a0:	d9811b04 	addi	r6,sp,1132
 80022a4:	8000fe00 	call	8000fe0 <__sprint_r>
 80022a8:	103ca01e 	bne	r2,zero,800152c <___vfprintf_internal_r+0x518>
 80022ac:	da011d17 	ldw	r8,1140(sp)
 80022b0:	d8c11c17 	ldw	r3,1136(sp)
 80022b4:	da400404 	addi	r9,sp,16
 80022b8:	003dee06 	br	8001a74 <___vfprintf_internal_r+0xa60>
 80022bc:	00c00084 	movi	r3,2
 80022c0:	bd84b03a 	or	r2,r23,r22
 80022c4:	d8012585 	stb	zero,1174(sp)
 80022c8:	003ccb06 	br	80015f8 <___vfprintf_internal_r+0x5e4>
 80022cc:	8080040c 	andi	r2,r16,16
 80022d0:	1000ae26 	beq	r2,zero,800258c <___vfprintf_internal_r+0x1578>
 80022d4:	d9012d17 	ldw	r4,1204(sp)
 80022d8:	25c00017 	ldw	r23,0(r4)
 80022dc:	21000104 	addi	r4,r4,4
 80022e0:	d9012d15 	stw	r4,1204(sp)
 80022e4:	b82dd7fa 	srai	r22,r23,31
 80022e8:	b005883a 	mov	r2,r22
 80022ec:	003cb906 	br	80015d4 <___vfprintf_internal_r+0x5c0>
 80022f0:	8080040c 	andi	r2,r16,16
 80022f4:	10007026 	beq	r2,zero,80024b8 <___vfprintf_internal_r+0x14a4>
 80022f8:	d8812d17 	ldw	r2,1204(sp)
 80022fc:	002d883a 	mov	r22,zero
 8002300:	00c00044 	movi	r3,1
 8002304:	15c00017 	ldw	r23,0(r2)
 8002308:	10800104 	addi	r2,r2,4
 800230c:	d8812d15 	stw	r2,1204(sp)
 8002310:	d8012585 	stb	zero,1174(sp)
 8002314:	b805883a 	mov	r2,r23
 8002318:	003cb706 	br	80015f8 <___vfprintf_internal_r+0x5e4>
 800231c:	d8813217 	ldw	r2,1224(sp)
 8002320:	14ffffc4 	addi	r19,r2,-1
 8002324:	04ff4f0e 	bge	zero,r19,8002064 <___vfprintf_internal_r+0x1050>
 8002328:	05800404 	movi	r22,16
 800232c:	05020074 	movhi	r20,2049
 8002330:	a534de84 	addi	r20,r20,-11398
 8002334:	b4c0470e 	bge	r22,r19,8002454 <___vfprintf_internal_r+0x1440>
 8002338:	05c001c4 	movi	r23,7
 800233c:	df012917 	ldw	fp,1188(sp)
 8002340:	00000306 	br	8002350 <___vfprintf_internal_r+0x133c>
 8002344:	94800204 	addi	r18,r18,8
 8002348:	9cfffc04 	addi	r19,r19,-16
 800234c:	b4c0410e 	bge	r22,r19,8002454 <___vfprintf_internal_r+0x1440>
 8002350:	95000015 	stw	r20,0(r18)
 8002354:	95800115 	stw	r22,4(r18)
 8002358:	42000404 	addi	r8,r8,16
 800235c:	18c00044 	addi	r3,r3,1
 8002360:	da011d15 	stw	r8,1140(sp)
 8002364:	d8c11c15 	stw	r3,1136(sp)
 8002368:	b8fff60e 	bge	r23,r3,8002344 <___vfprintf_internal_r+0x1330>
 800236c:	8809883a 	mov	r4,r17
 8002370:	e00b883a 	mov	r5,fp
 8002374:	d9811b04 	addi	r6,sp,1132
 8002378:	8000fe00 	call	8000fe0 <__sprint_r>
 800237c:	103c6b1e 	bne	r2,zero,800152c <___vfprintf_internal_r+0x518>
 8002380:	da011d17 	ldw	r8,1140(sp)
 8002384:	d8c11c17 	ldw	r3,1136(sp)
 8002388:	dc800404 	addi	r18,sp,16
 800238c:	003fee06 	br	8002348 <___vfprintf_internal_r+0x1334>
 8002390:	8080040c 	andi	r2,r16,16
 8002394:	10005326 	beq	r2,zero,80024e4 <___vfprintf_internal_r+0x14d0>
 8002398:	d8c12d17 	ldw	r3,1204(sp)
 800239c:	002d883a 	mov	r22,zero
 80023a0:	1dc00017 	ldw	r23,0(r3)
 80023a4:	18c00104 	addi	r3,r3,4
 80023a8:	d8c12d15 	stw	r3,1204(sp)
 80023ac:	b805883a 	mov	r2,r23
 80023b0:	0007883a 	mov	r3,zero
 80023b4:	d8012585 	stb	zero,1174(sp)
 80023b8:	003c8f06 	br	80015f8 <___vfprintf_internal_r+0x5e4>
 80023bc:	8088703a 	and	r4,r16,r2
 80023c0:	203efe1e 	bne	r4,zero,8001fbc <___vfprintf_internal_r+0xfa8>
 80023c4:	48800115 	stw	r2,4(r9)
 80023c8:	42000044 	addi	r8,r8,1
 80023cc:	18c00044 	addi	r3,r3,1
 80023d0:	da011d15 	stw	r8,1140(sp)
 80023d4:	d8c11c15 	stw	r3,1136(sp)
 80023d8:	008001c4 	movi	r2,7
 80023dc:	10c00216 	blt	r2,r3,80023e8 <___vfprintf_internal_r+0x13d4>
 80023e0:	4c800204 	addi	r18,r9,8
 80023e4:	003f1f06 	br	8002064 <___vfprintf_internal_r+0x1050>
 80023e8:	d9412917 	ldw	r5,1188(sp)
 80023ec:	8809883a 	mov	r4,r17
 80023f0:	d9811b04 	addi	r6,sp,1132
 80023f4:	8000fe00 	call	8000fe0 <__sprint_r>
 80023f8:	103c4c1e 	bne	r2,zero,800152c <___vfprintf_internal_r+0x518>
 80023fc:	dc800404 	addi	r18,sp,16
 8002400:	da011d17 	ldw	r8,1140(sp)
 8002404:	d8c11c17 	ldw	r3,1136(sp)
 8002408:	003f1606 	br	8002064 <___vfprintf_internal_r+0x1050>
 800240c:	d9412917 	ldw	r5,1188(sp)
 8002410:	8809883a 	mov	r4,r17
 8002414:	d9811b04 	addi	r6,sp,1132
 8002418:	8000fe00 	call	8000fe0 <__sprint_r>
 800241c:	103c431e 	bne	r2,zero,800152c <___vfprintf_internal_r+0x518>
 8002420:	da011d17 	ldw	r8,1140(sp)
 8002424:	d8c11c17 	ldw	r3,1136(sp)
 8002428:	da400404 	addi	r9,sp,16
 800242c:	003eec06 	br	8001fe0 <___vfprintf_internal_r+0xfcc>
 8002430:	d9412917 	ldw	r5,1188(sp)
 8002434:	8809883a 	mov	r4,r17
 8002438:	d9811b04 	addi	r6,sp,1132
 800243c:	8000fe00 	call	8000fe0 <__sprint_r>
 8002440:	103c3a1e 	bne	r2,zero,800152c <___vfprintf_internal_r+0x518>
 8002444:	da011d17 	ldw	r8,1140(sp)
 8002448:	d8c11c17 	ldw	r3,1136(sp)
 800244c:	dc800404 	addi	r18,sp,16
 8002450:	003eee06 	br	800200c <___vfprintf_internal_r+0xff8>
 8002454:	95000015 	stw	r20,0(r18)
 8002458:	94c00115 	stw	r19,4(r18)
 800245c:	44d1883a 	add	r8,r8,r19
 8002460:	003efa06 	br	800204c <___vfprintf_internal_r+0x1038>
 8002464:	d9412917 	ldw	r5,1188(sp)
 8002468:	8809883a 	mov	r4,r17
 800246c:	d9811b04 	addi	r6,sp,1132
 8002470:	8000fe00 	call	8000fe0 <__sprint_r>
 8002474:	103c2d1e 	bne	r2,zero,800152c <___vfprintf_internal_r+0x518>
 8002478:	da011d17 	ldw	r8,1140(sp)
 800247c:	d8c11c17 	ldw	r3,1136(sp)
 8002480:	da400404 	addi	r9,sp,16
 8002484:	003d9806 	br	8001ae8 <___vfprintf_internal_r+0xad4>
 8002488:	8080100c 	andi	r2,r16,64
 800248c:	10011626 	beq	r2,zero,80028e8 <___vfprintf_internal_r+0x18d4>
 8002490:	d8c12d17 	ldw	r3,1204(sp)
 8002494:	002d883a 	mov	r22,zero
 8002498:	1dc0000b 	ldhu	r23,0(r3)
 800249c:	18c00104 	addi	r3,r3,4
 80024a0:	d8c12d15 	stw	r3,1204(sp)
 80024a4:	003cc106 	br	80017ac <___vfprintf_internal_r+0x798>
 80024a8:	4d000015 	stw	r20,0(r9)
 80024ac:	4c800115 	stw	r18,4(r9)
 80024b0:	4491883a 	add	r8,r8,r18
 80024b4:	003dc006 	br	8001bb8 <___vfprintf_internal_r+0xba4>
 80024b8:	8080100c 	andi	r2,r16,64
 80024bc:	10010126 	beq	r2,zero,80028c4 <___vfprintf_internal_r+0x18b0>
 80024c0:	d8c12d17 	ldw	r3,1204(sp)
 80024c4:	002d883a 	mov	r22,zero
 80024c8:	1dc0000b 	ldhu	r23,0(r3)
 80024cc:	18c00104 	addi	r3,r3,4
 80024d0:	d8c12d15 	stw	r3,1204(sp)
 80024d4:	b805883a 	mov	r2,r23
 80024d8:	00c00044 	movi	r3,1
 80024dc:	d8012585 	stb	zero,1174(sp)
 80024e0:	003c4506 	br	80015f8 <___vfprintf_internal_r+0x5e4>
 80024e4:	8080100c 	andi	r2,r16,64
 80024e8:	10010526 	beq	r2,zero,8002900 <___vfprintf_internal_r+0x18ec>
 80024ec:	d9012d17 	ldw	r4,1204(sp)
 80024f0:	002d883a 	mov	r22,zero
 80024f4:	0007883a 	mov	r3,zero
 80024f8:	25c0000b 	ldhu	r23,0(r4)
 80024fc:	21000104 	addi	r4,r4,4
 8002500:	d9012d15 	stw	r4,1204(sp)
 8002504:	b805883a 	mov	r2,r23
 8002508:	d8012585 	stb	zero,1174(sp)
 800250c:	003c3a06 	br	80015f8 <___vfprintf_internal_r+0x5e4>
 8002510:	d8812d17 	ldw	r2,1204(sp)
 8002514:	15800017 	ldw	r22,0(r2)
 8002518:	15000117 	ldw	r20,4(r2)
 800251c:	10800204 	addi	r2,r2,8
 8002520:	d8812d15 	stw	r2,1204(sp)
 8002524:	dd813315 	stw	r22,1228(sp)
 8002528:	dd013415 	stw	r20,1232(sp)
 800252c:	003c5906 	br	8001694 <___vfprintf_internal_r+0x680>
 8002530:	00c00084 	movi	r3,2
 8002534:	d8012585 	stb	zero,1174(sp)
 8002538:	003c2f06 	br	80015f8 <___vfprintf_internal_r+0x5e4>
 800253c:	ac800007 	ldb	r18,0(r21)
 8002540:	003b1006 	br	8001184 <___vfprintf_internal_r+0x170>
 8002544:	8080040c 	andi	r2,r16,16
 8002548:	1000091e 	bne	r2,zero,8002570 <___vfprintf_internal_r+0x155c>
 800254c:	8400100c 	andi	r16,r16,64
 8002550:	80000726 	beq	r16,zero,8002570 <___vfprintf_internal_r+0x155c>
 8002554:	d8c12d17 	ldw	r3,1204(sp)
 8002558:	d9012c17 	ldw	r4,1200(sp)
 800255c:	18800017 	ldw	r2,0(r3)
 8002560:	18c00104 	addi	r3,r3,4
 8002564:	d8c12d15 	stw	r3,1204(sp)
 8002568:	1100000d 	sth	r4,0(r2)
 800256c:	003adf06 	br	80010ec <___vfprintf_internal_r+0xd8>
 8002570:	d8c12d17 	ldw	r3,1204(sp)
 8002574:	d9012c17 	ldw	r4,1200(sp)
 8002578:	18800017 	ldw	r2,0(r3)
 800257c:	18c00104 	addi	r3,r3,4
 8002580:	d8c12d15 	stw	r3,1204(sp)
 8002584:	11000015 	stw	r4,0(r2)
 8002588:	003ad806 	br	80010ec <___vfprintf_internal_r+0xd8>
 800258c:	8080100c 	andi	r2,r16,64
 8002590:	1000c526 	beq	r2,zero,80028a8 <___vfprintf_internal_r+0x1894>
 8002594:	d8812d17 	ldw	r2,1204(sp)
 8002598:	15c0000f 	ldh	r23,0(r2)
 800259c:	10800104 	addi	r2,r2,4
 80025a0:	d8812d15 	stw	r2,1204(sp)
 80025a4:	b82dd7fa 	srai	r22,r23,31
 80025a8:	b005883a 	mov	r2,r22
 80025ac:	003c0906 	br	80015d4 <___vfprintf_internal_r+0x5c0>
 80025b0:	4c800115 	stw	r18,4(r9)
 80025b4:	9211883a 	add	r8,r18,r8
 80025b8:	18c00044 	addi	r3,r3,1
 80025bc:	da011d15 	stw	r8,1140(sp)
 80025c0:	d8c11c15 	stw	r3,1136(sp)
 80025c4:	008001c4 	movi	r2,7
 80025c8:	10c14016 	blt	r2,r3,8002acc <___vfprintf_internal_r+0x1ab8>
 80025cc:	4a400204 	addi	r9,r9,8
 80025d0:	d8813717 	ldw	r2,1244(sp)
 80025d4:	9ca7883a 	add	r19,r19,r18
 80025d8:	48800015 	stw	r2,0(r9)
 80025dc:	00800044 	movi	r2,1
 80025e0:	48800115 	stw	r2,4(r9)
 80025e4:	4091883a 	add	r8,r8,r2
 80025e8:	1887883a 	add	r3,r3,r2
 80025ec:	da011d15 	stw	r8,1140(sp)
 80025f0:	d8c11c15 	stw	r3,1136(sp)
 80025f4:	008001c4 	movi	r2,7
 80025f8:	10c12c16 	blt	r2,r3,8002aac <___vfprintf_internal_r+0x1a98>
 80025fc:	4a400204 	addi	r9,r9,8
 8002600:	d9013217 	ldw	r4,1224(sp)
 8002604:	da011d17 	ldw	r8,1140(sp)
 8002608:	d8c11c17 	ldw	r3,1136(sp)
 800260c:	24a5c83a 	sub	r18,r4,r18
 8002610:	4cc00015 	stw	r19,0(r9)
 8002614:	003fa506 	br	80024ac <___vfprintf_internal_r+0x1498>
 8002618:	04c20074 	movhi	r19,2049
 800261c:	9cf4cb04 	addi	r19,r19,-11476
 8002620:	003c2e06 	br	80016dc <___vfprintf_internal_r+0x6c8>
 8002624:	d9412917 	ldw	r5,1188(sp)
 8002628:	8809883a 	mov	r4,r17
 800262c:	d9811b04 	addi	r6,sp,1132
 8002630:	8000fe00 	call	8000fe0 <__sprint_r>
 8002634:	103bbd1e 	bne	r2,zero,800152c <___vfprintf_internal_r+0x518>
 8002638:	da011d17 	ldw	r8,1140(sp)
 800263c:	da400404 	addi	r9,sp,16
 8002640:	003df606 	br	8001e1c <___vfprintf_internal_r+0xe08>
 8002644:	00820074 	movhi	r2,2049
 8002648:	10b4da04 	addi	r2,r2,-11416
 800264c:	48800015 	stw	r2,0(r9)
 8002650:	00800044 	movi	r2,1
 8002654:	48800115 	stw	r2,4(r9)
 8002658:	4091883a 	add	r8,r8,r2
 800265c:	1887883a 	add	r3,r3,r2
 8002660:	da011d15 	stw	r8,1140(sp)
 8002664:	d8c11c15 	stw	r3,1136(sp)
 8002668:	008001c4 	movi	r2,7
 800266c:	10c0bc16 	blt	r2,r3,8002960 <___vfprintf_internal_r+0x194c>
 8002670:	4a400204 	addi	r9,r9,8
 8002674:	9000041e 	bne	r18,zero,8002688 <___vfprintf_internal_r+0x1674>
 8002678:	d8c13217 	ldw	r3,1224(sp)
 800267c:	1800021e 	bne	r3,zero,8002688 <___vfprintf_internal_r+0x1674>
 8002680:	8080004c 	andi	r2,r16,1
 8002684:	103d5226 	beq	r2,zero,8001bd0 <___vfprintf_internal_r+0xbbc>
 8002688:	d8c11c17 	ldw	r3,1136(sp)
 800268c:	d9013717 	ldw	r4,1244(sp)
 8002690:	00800044 	movi	r2,1
 8002694:	48800115 	stw	r2,4(r9)
 8002698:	49000015 	stw	r4,0(r9)
 800269c:	4091883a 	add	r8,r8,r2
 80026a0:	1887883a 	add	r3,r3,r2
 80026a4:	da011d15 	stw	r8,1140(sp)
 80026a8:	d8c11c15 	stw	r3,1136(sp)
 80026ac:	008001c4 	movi	r2,7
 80026b0:	10c14516 	blt	r2,r3,8002bc8 <___vfprintf_internal_r+0x1bb4>
 80026b4:	4a400204 	addi	r9,r9,8
 80026b8:	04a5c83a 	sub	r18,zero,r18
 80026bc:	0480d70e 	bge	zero,r18,8002a1c <___vfprintf_internal_r+0x1a08>
 80026c0:	05800404 	movi	r22,16
 80026c4:	05020074 	movhi	r20,2049
 80026c8:	a534de84 	addi	r20,r20,-11398
 80026cc:	b480db0e 	bge	r22,r18,8002a3c <___vfprintf_internal_r+0x1a28>
 80026d0:	05c001c4 	movi	r23,7
 80026d4:	df012917 	ldw	fp,1188(sp)
 80026d8:	00000306 	br	80026e8 <___vfprintf_internal_r+0x16d4>
 80026dc:	4a400204 	addi	r9,r9,8
 80026e0:	94bffc04 	addi	r18,r18,-16
 80026e4:	b480d50e 	bge	r22,r18,8002a3c <___vfprintf_internal_r+0x1a28>
 80026e8:	4d000015 	stw	r20,0(r9)
 80026ec:	4d800115 	stw	r22,4(r9)
 80026f0:	42000404 	addi	r8,r8,16
 80026f4:	18c00044 	addi	r3,r3,1
 80026f8:	da011d15 	stw	r8,1140(sp)
 80026fc:	d8c11c15 	stw	r3,1136(sp)
 8002700:	b8fff60e 	bge	r23,r3,80026dc <___vfprintf_internal_r+0x16c8>
 8002704:	8809883a 	mov	r4,r17
 8002708:	e00b883a 	mov	r5,fp
 800270c:	d9811b04 	addi	r6,sp,1132
 8002710:	8000fe00 	call	8000fe0 <__sprint_r>
 8002714:	103b851e 	bne	r2,zero,800152c <___vfprintf_internal_r+0x518>
 8002718:	da011d17 	ldw	r8,1140(sp)
 800271c:	d8c11c17 	ldw	r3,1136(sp)
 8002720:	da400404 	addi	r9,sp,16
 8002724:	003fee06 	br	80026e0 <___vfprintf_internal_r+0x16cc>
 8002728:	da413c15 	stw	r9,1264(sp)
 800272c:	8007ea00 	call	8007ea0 <__isnand>
 8002730:	da413c17 	ldw	r9,1264(sp)
 8002734:	10007e1e 	bne	r2,zero,8002930 <___vfprintf_internal_r+0x191c>
 8002738:	00bfffc4 	movi	r2,-1
 800273c:	e0816a26 	beq	fp,r2,8002ce8 <___vfprintf_internal_r+0x1cd4>
 8002740:	008019c4 	movi	r2,103
 8002744:	90816526 	beq	r18,r2,8002cdc <___vfprintf_internal_r+0x1cc8>
 8002748:	008011c4 	movi	r2,71
 800274c:	90816326 	beq	r18,r2,8002cdc <___vfprintf_internal_r+0x1cc8>
 8002750:	80c04014 	ori	r3,r16,256
 8002754:	d8c12a15 	stw	r3,1192(sp)
 8002758:	a0016516 	blt	r20,zero,8002cf0 <___vfprintf_internal_r+0x1cdc>
 800275c:	d8012f05 	stb	zero,1212(sp)
 8002760:	00801984 	movi	r2,102
 8002764:	9080f226 	beq	r18,r2,8002b30 <___vfprintf_internal_r+0x1b1c>
 8002768:	00801184 	movi	r2,70
 800276c:	9080f026 	beq	r18,r2,8002b30 <___vfprintf_internal_r+0x1b1c>
 8002770:	00801944 	movi	r2,101
 8002774:	90818d26 	beq	r18,r2,8002dac <___vfprintf_internal_r+0x1d98>
 8002778:	00801144 	movi	r2,69
 800277c:	90818b26 	beq	r18,r2,8002dac <___vfprintf_internal_r+0x1d98>
 8002780:	e02f883a 	mov	r23,fp
 8002784:	d8812404 	addi	r2,sp,1168
 8002788:	d8800115 	stw	r2,4(sp)
 800278c:	d8812304 	addi	r2,sp,1164
 8002790:	d8800215 	stw	r2,8(sp)
 8002794:	d8812204 	addi	r2,sp,1160
 8002798:	ddc00015 	stw	r23,0(sp)
 800279c:	d8800315 	stw	r2,12(sp)
 80027a0:	8809883a 	mov	r4,r17
 80027a4:	b00b883a 	mov	r5,r22
 80027a8:	a00d883a 	mov	r6,r20
 80027ac:	01c00084 	movi	r7,2
 80027b0:	da413c15 	stw	r9,1264(sp)
 80027b4:	80034040 	call	8003404 <_dtoa_r>
 80027b8:	1027883a 	mov	r19,r2
 80027bc:	008019c4 	movi	r2,103
 80027c0:	da413c17 	ldw	r9,1264(sp)
 80027c4:	9081951e 	bne	r18,r2,8002e1c <___vfprintf_internal_r+0x1e08>
 80027c8:	8080004c 	andi	r2,r16,1
 80027cc:	10017926 	beq	r2,zero,8002db4 <___vfprintf_internal_r+0x1da0>
 80027d0:	00801184 	movi	r2,70
 80027d4:	9dc7883a 	add	r3,r19,r23
 80027d8:	9080e626 	beq	r18,r2,8002b74 <___vfprintf_internal_r+0x1b60>
 80027dc:	b009883a 	mov	r4,r22
 80027e0:	a00b883a 	mov	r5,r20
 80027e4:	000d883a 	mov	r6,zero
 80027e8:	000f883a 	mov	r7,zero
 80027ec:	d8c13b15 	stw	r3,1260(sp)
 80027f0:	da413c15 	stw	r9,1264(sp)
 80027f4:	8009abc0 	call	8009abc <__eqdf2>
 80027f8:	d8c13b17 	ldw	r3,1260(sp)
 80027fc:	da413c17 	ldw	r9,1264(sp)
 8002800:	10000726 	beq	r2,zero,8002820 <___vfprintf_internal_r+0x180c>
 8002804:	d8812217 	ldw	r2,1160(sp)
 8002808:	10c18a2e 	bgeu	r2,r3,8002e34 <___vfprintf_internal_r+0x1e20>
 800280c:	01000c04 	movi	r4,48
 8002810:	11000005 	stb	r4,0(r2)
 8002814:	10800044 	addi	r2,r2,1
 8002818:	d8812215 	stw	r2,1160(sp)
 800281c:	10fffc1e 	bne	r2,r3,8002810 <___vfprintf_internal_r+0x17fc>
 8002820:	1cc7c83a 	sub	r3,r3,r19
 8002824:	d8c13215 	stw	r3,1224(sp)
 8002828:	008019c4 	movi	r2,103
 800282c:	9080fa26 	beq	r18,r2,8002c18 <___vfprintf_internal_r+0x1c04>
 8002830:	008011c4 	movi	r2,71
 8002834:	9080f826 	beq	r18,r2,8002c18 <___vfprintf_internal_r+0x1c04>
 8002838:	00801984 	movi	r2,102
 800283c:	90818e1e 	bne	r18,r2,8002e78 <___vfprintf_internal_r+0x1e64>
 8002840:	d8812417 	ldw	r2,1168(sp)
 8002844:	d8812b15 	stw	r2,1196(sp)
 8002848:	00817c0e 	bge	zero,r2,8002e3c <___vfprintf_internal_r+0x1e28>
 800284c:	e000021e 	bne	fp,zero,8002858 <___vfprintf_internal_r+0x1844>
 8002850:	8400004c 	andi	r16,r16,1
 8002854:	80000426 	beq	r16,zero,8002868 <___vfprintf_internal_r+0x1854>
 8002858:	d8812b17 	ldw	r2,1196(sp)
 800285c:	e2000044 	addi	r8,fp,1
 8002860:	1205883a 	add	r2,r2,r8
 8002864:	d8812b15 	stw	r2,1196(sp)
 8002868:	d8812815 	stw	r2,1184(sp)
 800286c:	10010b16 	blt	r2,zero,8002c9c <___vfprintf_internal_r+0x1c88>
 8002870:	ddc12f07 	ldb	r23,1212(sp)
 8002874:	b800e426 	beq	r23,zero,8002c08 <___vfprintf_internal_r+0x1bf4>
 8002878:	00800b44 	movi	r2,45
 800287c:	d8812585 	stb	r2,1174(sp)
 8002880:	dc012a17 	ldw	r16,1192(sp)
 8002884:	d8013115 	stw	zero,1220(sp)
 8002888:	003b7306 	br	8001658 <___vfprintf_internal_r+0x644>
 800288c:	d8812b17 	ldw	r2,1196(sp)
 8002890:	d8812815 	stw	r2,1184(sp)
 8002894:	10005716 	blt	r2,zero,80029f4 <___vfprintf_internal_r+0x19e0>
 8002898:	d8812583 	ldbu	r2,1174(sp)
 800289c:	ddc12d15 	stw	r23,1204(sp)
 80028a0:	d8013115 	stw	zero,1220(sp)
 80028a4:	003b6806 	br	8001648 <___vfprintf_internal_r+0x634>
 80028a8:	d8c12d17 	ldw	r3,1204(sp)
 80028ac:	1dc00017 	ldw	r23,0(r3)
 80028b0:	18c00104 	addi	r3,r3,4
 80028b4:	d8c12d15 	stw	r3,1204(sp)
 80028b8:	b82dd7fa 	srai	r22,r23,31
 80028bc:	b005883a 	mov	r2,r22
 80028c0:	003b4406 	br	80015d4 <___vfprintf_internal_r+0x5c0>
 80028c4:	d9012d17 	ldw	r4,1204(sp)
 80028c8:	002d883a 	mov	r22,zero
 80028cc:	00c00044 	movi	r3,1
 80028d0:	25c00017 	ldw	r23,0(r4)
 80028d4:	21000104 	addi	r4,r4,4
 80028d8:	d9012d15 	stw	r4,1204(sp)
 80028dc:	b805883a 	mov	r2,r23
 80028e0:	d8012585 	stb	zero,1174(sp)
 80028e4:	003b4406 	br	80015f8 <___vfprintf_internal_r+0x5e4>
 80028e8:	d9012d17 	ldw	r4,1204(sp)
 80028ec:	002d883a 	mov	r22,zero
 80028f0:	25c00017 	ldw	r23,0(r4)
 80028f4:	21000104 	addi	r4,r4,4
 80028f8:	d9012d15 	stw	r4,1204(sp)
 80028fc:	003bab06 	br	80017ac <___vfprintf_internal_r+0x798>
 8002900:	d8812d17 	ldw	r2,1204(sp)
 8002904:	002d883a 	mov	r22,zero
 8002908:	0007883a 	mov	r3,zero
 800290c:	15c00017 	ldw	r23,0(r2)
 8002910:	10800104 	addi	r2,r2,4
 8002914:	d8812d15 	stw	r2,1204(sp)
 8002918:	d8012585 	stb	zero,1174(sp)
 800291c:	b805883a 	mov	r2,r23
 8002920:	003b3506 	br	80015f8 <___vfprintf_internal_r+0x5e4>
 8002924:	00ffffc4 	movi	r3,-1
 8002928:	b82b883a 	mov	r21,r23
 800292c:	003a1606 	br	8001188 <___vfprintf_internal_r+0x174>
 8002930:	008011c4 	movi	r2,71
 8002934:	1480b116 	blt	r2,r18,8002bfc <___vfprintf_internal_r+0x1be8>
 8002938:	04c20074 	movhi	r19,2049
 800293c:	9cf4cc04 	addi	r19,r19,-11472
 8002940:	00c000c4 	movi	r3,3
 8002944:	00bfdfc4 	movi	r2,-129
 8002948:	80a0703a 	and	r16,r16,r2
 800294c:	d8c12815 	stw	r3,1184(sp)
 8002950:	d8812583 	ldbu	r2,1174(sp)
 8002954:	d8c12b15 	stw	r3,1196(sp)
 8002958:	d8013115 	stw	zero,1220(sp)
 800295c:	003b3a06 	br	8001648 <___vfprintf_internal_r+0x634>
 8002960:	d9412917 	ldw	r5,1188(sp)
 8002964:	8809883a 	mov	r4,r17
 8002968:	d9811b04 	addi	r6,sp,1132
 800296c:	8000fe00 	call	8000fe0 <__sprint_r>
 8002970:	103aee1e 	bne	r2,zero,800152c <___vfprintf_internal_r+0x518>
 8002974:	dc812417 	ldw	r18,1168(sp)
 8002978:	da011d17 	ldw	r8,1140(sp)
 800297c:	da400404 	addi	r9,sp,16
 8002980:	003f3c06 	br	8002674 <___vfprintf_internal_r+0x1660>
 8002984:	ad400044 	addi	r21,r21,1
 8002988:	84000814 	ori	r16,r16,32
 800298c:	14800047 	ldb	r18,1(r2)
 8002990:	0039fc06 	br	8001184 <___vfprintf_internal_r+0x170>
 8002994:	d9412917 	ldw	r5,1188(sp)
 8002998:	8809883a 	mov	r4,r17
 800299c:	d9811b04 	addi	r6,sp,1132
 80029a0:	8000fe00 	call	8000fe0 <__sprint_r>
 80029a4:	103ae11e 	bne	r2,zero,800152c <___vfprintf_internal_r+0x518>
 80029a8:	da011d17 	ldw	r8,1140(sp)
 80029ac:	da400404 	addi	r9,sp,16
 80029b0:	003d2b06 	br	8001e60 <___vfprintf_internal_r+0xe4c>
 80029b4:	4d000015 	stw	r20,0(r9)
 80029b8:	4c800115 	stw	r18,4(r9)
 80029bc:	4491883a 	add	r8,r8,r18
 80029c0:	18c00044 	addi	r3,r3,1
 80029c4:	da011d15 	stw	r8,1140(sp)
 80029c8:	d8c11c15 	stw	r3,1136(sp)
 80029cc:	008001c4 	movi	r2,7
 80029d0:	10fcbd16 	blt	r2,r3,8001cc8 <___vfprintf_internal_r+0xcb4>
 80029d4:	4a400204 	addi	r9,r9,8
 80029d8:	003cc206 	br	8001ce4 <___vfprintf_internal_r+0xcd0>
 80029dc:	da413c15 	stw	r9,1264(sp)
 80029e0:	8000f540 	call	8000f54 <strlen>
 80029e4:	d8812b15 	stw	r2,1196(sp)
 80029e8:	d8812815 	stw	r2,1184(sp)
 80029ec:	da413c17 	ldw	r9,1264(sp)
 80029f0:	103fa90e 	bge	r2,zero,8002898 <___vfprintf_internal_r+0x1884>
 80029f4:	d8012815 	stw	zero,1184(sp)
 80029f8:	003fa706 	br	8002898 <___vfprintf_internal_r+0x1884>
 80029fc:	d9412917 	ldw	r5,1188(sp)
 8002a00:	8809883a 	mov	r4,r17
 8002a04:	d9811b04 	addi	r6,sp,1132
 8002a08:	8000fe00 	call	8000fe0 <__sprint_r>
 8002a0c:	103ac71e 	bne	r2,zero,800152c <___vfprintf_internal_r+0x518>
 8002a10:	da011d17 	ldw	r8,1140(sp)
 8002a14:	d8c11c17 	ldw	r3,1136(sp)
 8002a18:	da400404 	addi	r9,sp,16
 8002a1c:	d8813217 	ldw	r2,1224(sp)
 8002a20:	4cc00015 	stw	r19,0(r9)
 8002a24:	48800115 	stw	r2,4(r9)
 8002a28:	4091883a 	add	r8,r8,r2
 8002a2c:	003c6206 	br	8001bb8 <___vfprintf_internal_r+0xba4>
 8002a30:	00800b44 	movi	r2,45
 8002a34:	d8812585 	stb	r2,1174(sp)
 8002a38:	003b2406 	br	80016cc <___vfprintf_internal_r+0x6b8>
 8002a3c:	4d000015 	stw	r20,0(r9)
 8002a40:	4c800115 	stw	r18,4(r9)
 8002a44:	4491883a 	add	r8,r8,r18
 8002a48:	18c00044 	addi	r3,r3,1
 8002a4c:	da011d15 	stw	r8,1140(sp)
 8002a50:	d8c11c15 	stw	r3,1136(sp)
 8002a54:	008001c4 	movi	r2,7
 8002a58:	10ffe816 	blt	r2,r3,80029fc <___vfprintf_internal_r+0x19e8>
 8002a5c:	4a400204 	addi	r9,r9,8
 8002a60:	003fee06 	br	8002a1c <___vfprintf_internal_r+0x1a08>
 8002a64:	d8c12b15 	stw	r3,1196(sp)
 8002a68:	00800184 	movi	r2,6
 8002a6c:	10c0062e 	bgeu	r2,r3,8002a88 <___vfprintf_internal_r+0x1a74>
 8002a70:	d8812b15 	stw	r2,1196(sp)
 8002a74:	d8812815 	stw	r2,1184(sp)
 8002a78:	ddc12d15 	stw	r23,1204(sp)
 8002a7c:	04c20074 	movhi	r19,2049
 8002a80:	9cf4d804 	addi	r19,r19,-11424
 8002a84:	0039ca06 	br	80011b0 <___vfprintf_internal_r+0x19c>
 8002a88:	d8812b17 	ldw	r2,1196(sp)
 8002a8c:	d8812815 	stw	r2,1184(sp)
 8002a90:	103ff90e 	bge	r2,zero,8002a78 <___vfprintf_internal_r+0x1a64>
 8002a94:	d8012815 	stw	zero,1184(sp)
 8002a98:	003ff706 	br	8002a78 <___vfprintf_internal_r+0x1a64>
 8002a9c:	00800244 	movi	r2,9
 8002aa0:	15fdaa36 	bltu	r2,r23,800214c <___vfprintf_internal_r+0x1138>
 8002aa4:	dd010e04 	addi	r20,sp,1080
 8002aa8:	003dc606 	br	80021c4 <___vfprintf_internal_r+0x11b0>
 8002aac:	d9412917 	ldw	r5,1188(sp)
 8002ab0:	8809883a 	mov	r4,r17
 8002ab4:	d9811b04 	addi	r6,sp,1132
 8002ab8:	8000fe00 	call	8000fe0 <__sprint_r>
 8002abc:	103a9b1e 	bne	r2,zero,800152c <___vfprintf_internal_r+0x518>
 8002ac0:	dc812417 	ldw	r18,1168(sp)
 8002ac4:	da400404 	addi	r9,sp,16
 8002ac8:	003ecd06 	br	8002600 <___vfprintf_internal_r+0x15ec>
 8002acc:	d9412917 	ldw	r5,1188(sp)
 8002ad0:	8809883a 	mov	r4,r17
 8002ad4:	d9811b04 	addi	r6,sp,1132
 8002ad8:	8000fe00 	call	8000fe0 <__sprint_r>
 8002adc:	103a931e 	bne	r2,zero,800152c <___vfprintf_internal_r+0x518>
 8002ae0:	dc812417 	ldw	r18,1168(sp)
 8002ae4:	da011d17 	ldw	r8,1140(sp)
 8002ae8:	d8c11c17 	ldw	r3,1136(sp)
 8002aec:	da400404 	addi	r9,sp,16
 8002af0:	003eb706 	br	80025d0 <___vfprintf_internal_r+0x15bc>
 8002af4:	d9412917 	ldw	r5,1188(sp)
 8002af8:	8809883a 	mov	r4,r17
 8002afc:	d9811b04 	addi	r6,sp,1132
 8002b00:	8000fe00 	call	8000fe0 <__sprint_r>
 8002b04:	103a891e 	bne	r2,zero,800152c <___vfprintf_internal_r+0x518>
 8002b08:	dc812417 	ldw	r18,1168(sp)
 8002b0c:	da011d17 	ldw	r8,1140(sp)
 8002b10:	da400404 	addi	r9,sp,16
 8002b14:	003dc206 	br	8002220 <___vfprintf_internal_r+0x120c>
 8002b18:	df012815 	stw	fp,1184(sp)
 8002b1c:	d8812583 	ldbu	r2,1174(sp)
 8002b20:	df012b15 	stw	fp,1196(sp)
 8002b24:	ddc12d15 	stw	r23,1204(sp)
 8002b28:	d8013115 	stw	zero,1220(sp)
 8002b2c:	003ac606 	br	8001648 <___vfprintf_internal_r+0x634>
 8002b30:	d8812404 	addi	r2,sp,1168
 8002b34:	d8800115 	stw	r2,4(sp)
 8002b38:	d8812304 	addi	r2,sp,1164
 8002b3c:	d8800215 	stw	r2,8(sp)
 8002b40:	d8812204 	addi	r2,sp,1160
 8002b44:	df000015 	stw	fp,0(sp)
 8002b48:	d8800315 	stw	r2,12(sp)
 8002b4c:	8809883a 	mov	r4,r17
 8002b50:	b00b883a 	mov	r5,r22
 8002b54:	a00d883a 	mov	r6,r20
 8002b58:	01c000c4 	movi	r7,3
 8002b5c:	da413c15 	stw	r9,1264(sp)
 8002b60:	80034040 	call	8003404 <_dtoa_r>
 8002b64:	da413c17 	ldw	r9,1264(sp)
 8002b68:	1027883a 	mov	r19,r2
 8002b6c:	1707883a 	add	r3,r2,fp
 8002b70:	e02f883a 	mov	r23,fp
 8002b74:	99000007 	ldb	r4,0(r19)
 8002b78:	00800c04 	movi	r2,48
 8002b7c:	20800326 	beq	r4,r2,8002b8c <___vfprintf_internal_r+0x1b78>
 8002b80:	da812417 	ldw	r10,1168(sp)
 8002b84:	1a87883a 	add	r3,r3,r10
 8002b88:	003f1406 	br	80027dc <___vfprintf_internal_r+0x17c8>
 8002b8c:	b009883a 	mov	r4,r22
 8002b90:	a00b883a 	mov	r5,r20
 8002b94:	000d883a 	mov	r6,zero
 8002b98:	000f883a 	mov	r7,zero
 8002b9c:	d8c13b15 	stw	r3,1260(sp)
 8002ba0:	da413c15 	stw	r9,1264(sp)
 8002ba4:	8009b180 	call	8009b18 <__nedf2>
 8002ba8:	d8c13b17 	ldw	r3,1260(sp)
 8002bac:	da413c17 	ldw	r9,1264(sp)
 8002bb0:	103ff326 	beq	r2,zero,8002b80 <___vfprintf_internal_r+0x1b6c>
 8002bb4:	00800044 	movi	r2,1
 8002bb8:	15d5c83a 	sub	r10,r2,r23
 8002bbc:	da812415 	stw	r10,1168(sp)
 8002bc0:	1a87883a 	add	r3,r3,r10
 8002bc4:	003f0506 	br	80027dc <___vfprintf_internal_r+0x17c8>
 8002bc8:	d9412917 	ldw	r5,1188(sp)
 8002bcc:	8809883a 	mov	r4,r17
 8002bd0:	d9811b04 	addi	r6,sp,1132
 8002bd4:	8000fe00 	call	8000fe0 <__sprint_r>
 8002bd8:	103a541e 	bne	r2,zero,800152c <___vfprintf_internal_r+0x518>
 8002bdc:	dc812417 	ldw	r18,1168(sp)
 8002be0:	da011d17 	ldw	r8,1140(sp)
 8002be4:	d8c11c17 	ldw	r3,1136(sp)
 8002be8:	da400404 	addi	r9,sp,16
 8002bec:	003eb206 	br	80026b8 <___vfprintf_internal_r+0x16a4>
 8002bf0:	b82b883a 	mov	r21,r23
 8002bf4:	0007883a 	mov	r3,zero
 8002bf8:	00396306 	br	8001188 <___vfprintf_internal_r+0x174>
 8002bfc:	04c20074 	movhi	r19,2049
 8002c00:	9cf4cd04 	addi	r19,r19,-11468
 8002c04:	003f4e06 	br	8002940 <___vfprintf_internal_r+0x192c>
 8002c08:	d8812583 	ldbu	r2,1174(sp)
 8002c0c:	dc012a17 	ldw	r16,1192(sp)
 8002c10:	d8013115 	stw	zero,1220(sp)
 8002c14:	003a8c06 	br	8001648 <___vfprintf_internal_r+0x634>
 8002c18:	d8812417 	ldw	r2,1168(sp)
 8002c1c:	d8812b15 	stw	r2,1196(sp)
 8002c20:	1029883a 	mov	r20,r2
 8002c24:	00bfff44 	movi	r2,-3
 8002c28:	a0800116 	blt	r20,r2,8002c30 <___vfprintf_internal_r+0x1c1c>
 8002c2c:	e5001d0e 	bge	fp,r20,8002ca4 <___vfprintf_internal_r+0x1c90>
 8002c30:	94bfff84 	addi	r18,r18,-2
 8002c34:	a53fffc4 	addi	r20,r20,-1
 8002c38:	dd012415 	stw	r20,1168(sp)
 8002c3c:	dc811fc5 	stb	r18,1151(sp)
 8002c40:	a0007216 	blt	r20,zero,8002e0c <___vfprintf_internal_r+0x1df8>
 8002c44:	00800ac4 	movi	r2,43
 8002c48:	d8812005 	stb	r2,1152(sp)
 8002c4c:	00800244 	movi	r2,9
 8002c50:	15003516 	blt	r2,r20,8002d28 <___vfprintf_internal_r+0x1d14>
 8002c54:	00800c04 	movi	r2,48
 8002c58:	a5000c04 	addi	r20,r20,48
 8002c5c:	d8812045 	stb	r2,1153(sp)
 8002c60:	dd012085 	stb	r20,1154(sp)
 8002c64:	d8c120c4 	addi	r3,sp,1155
 8002c68:	d8811fc4 	addi	r2,sp,1151
 8002c6c:	1885c83a 	sub	r2,r3,r2
 8002c70:	d8c13217 	ldw	r3,1224(sp)
 8002c74:	d8813515 	stw	r2,1236(sp)
 8002c78:	1885883a 	add	r2,r3,r2
 8002c7c:	d8812b15 	stw	r2,1196(sp)
 8002c80:	00800044 	movi	r2,1
 8002c84:	10c0580e 	bge	r2,r3,8002de8 <___vfprintf_internal_r+0x1dd4>
 8002c88:	d8812b17 	ldw	r2,1196(sp)
 8002c8c:	10800044 	addi	r2,r2,1
 8002c90:	d8812b15 	stw	r2,1196(sp)
 8002c94:	d8812815 	stw	r2,1184(sp)
 8002c98:	103ef50e 	bge	r2,zero,8002870 <___vfprintf_internal_r+0x185c>
 8002c9c:	d8012815 	stw	zero,1184(sp)
 8002ca0:	003ef306 	br	8002870 <___vfprintf_internal_r+0x185c>
 8002ca4:	d8812b17 	ldw	r2,1196(sp)
 8002ca8:	d8c13217 	ldw	r3,1224(sp)
 8002cac:	10c01416 	blt	r2,r3,8002d00 <___vfprintf_internal_r+0x1cec>
 8002cb0:	8400004c 	andi	r16,r16,1
 8002cb4:	80000326 	beq	r16,zero,8002cc4 <___vfprintf_internal_r+0x1cb0>
 8002cb8:	d8812b17 	ldw	r2,1196(sp)
 8002cbc:	10800044 	addi	r2,r2,1
 8002cc0:	d8812b15 	stw	r2,1196(sp)
 8002cc4:	d8812815 	stw	r2,1184(sp)
 8002cc8:	10001416 	blt	r2,zero,8002d1c <___vfprintf_internal_r+0x1d08>
 8002ccc:	048019c4 	movi	r18,103
 8002cd0:	003ee706 	br	8002870 <___vfprintf_internal_r+0x185c>
 8002cd4:	d8012815 	stw	zero,1184(sp)
 8002cd8:	003b1a06 	br	8001944 <___vfprintf_internal_r+0x930>
 8002cdc:	e03e9c1e 	bne	fp,zero,8002750 <___vfprintf_internal_r+0x173c>
 8002ce0:	07000044 	movi	fp,1
 8002ce4:	003e9a06 	br	8002750 <___vfprintf_internal_r+0x173c>
 8002ce8:	07000184 	movi	fp,6
 8002cec:	003e9806 	br	8002750 <___vfprintf_internal_r+0x173c>
 8002cf0:	00c00b44 	movi	r3,45
 8002cf4:	a520003c 	xorhi	r20,r20,32768
 8002cf8:	d8c12f05 	stb	r3,1212(sp)
 8002cfc:	003e9806 	br	8002760 <___vfprintf_internal_r+0x174c>
 8002d00:	05003f0e 	bge	zero,r20,8002e00 <___vfprintf_internal_r+0x1dec>
 8002d04:	05000044 	movi	r20,1
 8002d08:	d8c13217 	ldw	r3,1224(sp)
 8002d0c:	a0e9883a 	add	r20,r20,r3
 8002d10:	dd012b15 	stw	r20,1196(sp)
 8002d14:	dd012815 	stw	r20,1184(sp)
 8002d18:	a03fec0e 	bge	r20,zero,8002ccc <___vfprintf_internal_r+0x1cb8>
 8002d1c:	d8012815 	stw	zero,1184(sp)
 8002d20:	048019c4 	movi	r18,103
 8002d24:	003ed206 	br	8002870 <___vfprintf_internal_r+0x185c>
 8002d28:	d8c11f84 	addi	r3,sp,1150
 8002d2c:	102f883a 	mov	r23,r2
 8002d30:	4839883a 	mov	fp,r9
 8002d34:	a009883a 	mov	r4,r20
 8002d38:	01400284 	movi	r5,10
 8002d3c:	182d883a 	mov	r22,r3
 8002d40:	8000d880 	call	8000d88 <__modsi3>
 8002d44:	10800c04 	addi	r2,r2,48
 8002d48:	a009883a 	mov	r4,r20
 8002d4c:	b0800005 	stb	r2,0(r22)
 8002d50:	01400284 	movi	r5,10
 8002d54:	8000d380 	call	8000d38 <__divsi3>
 8002d58:	1029883a 	mov	r20,r2
 8002d5c:	b0ffffc4 	addi	r3,r22,-1
 8002d60:	b8bff416 	blt	r23,r2,8002d34 <___vfprintf_internal_r+0x1d20>
 8002d64:	11400c04 	addi	r5,r2,48
 8002d68:	b17fffc5 	stb	r5,-1(r22)
 8002d6c:	d8811fc4 	addi	r2,sp,1151
 8002d70:	e013883a 	mov	r9,fp
 8002d74:	18803e2e 	bgeu	r3,r2,8002e70 <___vfprintf_internal_r+0x1e5c>
 8002d78:	b007883a 	mov	r3,r22
 8002d7c:	d9012044 	addi	r4,sp,1153
 8002d80:	00000206 	br	8002d8c <___vfprintf_internal_r+0x1d78>
 8002d84:	19400003 	ldbu	r5,0(r3)
 8002d88:	18c00044 	addi	r3,r3,1
 8002d8c:	21400005 	stb	r5,0(r4)
 8002d90:	21000044 	addi	r4,r4,1
 8002d94:	10fffb1e 	bne	r2,r3,8002d84 <___vfprintf_internal_r+0x1d70>
 8002d98:	d8c12004 	addi	r3,sp,1152
 8002d9c:	1d87c83a 	sub	r3,r3,r22
 8002da0:	d9012044 	addi	r4,sp,1153
 8002da4:	20c7883a 	add	r3,r4,r3
 8002da8:	003fb006 	br	8002c6c <___vfprintf_internal_r+0x1c58>
 8002dac:	e5c00044 	addi	r23,fp,1
 8002db0:	003e7406 	br	8002784 <___vfprintf_internal_r+0x1770>
 8002db4:	d8c12217 	ldw	r3,1160(sp)
 8002db8:	003e9906 	br	8002820 <___vfprintf_internal_r+0x180c>
 8002dbc:	d9012d17 	ldw	r4,1204(sp)
 8002dc0:	ac800043 	ldbu	r18,1(r21)
 8002dc4:	b82b883a 	mov	r21,r23
 8002dc8:	20c00017 	ldw	r3,0(r4)
 8002dcc:	20800104 	addi	r2,r4,4
 8002dd0:	d8812d15 	stw	r2,1204(sp)
 8002dd4:	18002116 	blt	r3,zero,8002e5c <___vfprintf_internal_r+0x1e48>
 8002dd8:	94803fcc 	andi	r18,r18,255
 8002ddc:	9480201c 	xori	r18,r18,128
 8002de0:	94bfe004 	addi	r18,r18,-128
 8002de4:	0038e706 	br	8001184 <___vfprintf_internal_r+0x170>
 8002de8:	80a0703a 	and	r16,r16,r2
 8002dec:	803fa61e 	bne	r16,zero,8002c88 <___vfprintf_internal_r+0x1c74>
 8002df0:	d8812b17 	ldw	r2,1196(sp)
 8002df4:	d8812815 	stw	r2,1184(sp)
 8002df8:	103e9d0e 	bge	r2,zero,8002870 <___vfprintf_internal_r+0x185c>
 8002dfc:	003fa706 	br	8002c9c <___vfprintf_internal_r+0x1c88>
 8002e00:	00800084 	movi	r2,2
 8002e04:	1529c83a 	sub	r20,r2,r20
 8002e08:	003fbf06 	br	8002d08 <___vfprintf_internal_r+0x1cf4>
 8002e0c:	00800b44 	movi	r2,45
 8002e10:	0529c83a 	sub	r20,zero,r20
 8002e14:	d8812005 	stb	r2,1152(sp)
 8002e18:	003f8c06 	br	8002c4c <___vfprintf_internal_r+0x1c38>
 8002e1c:	008011c4 	movi	r2,71
 8002e20:	90be6926 	beq	r18,r2,80027c8 <___vfprintf_internal_r+0x17b4>
 8002e24:	003e6a06 	br	80027d0 <___vfprintf_internal_r+0x17bc>
 8002e28:	00bfffc4 	movi	r2,-1
 8002e2c:	d8812c15 	stw	r2,1200(sp)
 8002e30:	0039ad06 	br	80014e8 <___vfprintf_internal_r+0x4d4>
 8002e34:	1007883a 	mov	r3,r2
 8002e38:	003e7906 	br	8002820 <___vfprintf_internal_r+0x180c>
 8002e3c:	e000021e 	bne	fp,zero,8002e48 <___vfprintf_internal_r+0x1e34>
 8002e40:	8400004c 	andi	r16,r16,1
 8002e44:	80000e26 	beq	r16,zero,8002e80 <___vfprintf_internal_r+0x1e6c>
 8002e48:	e7000084 	addi	fp,fp,2
 8002e4c:	df012b15 	stw	fp,1196(sp)
 8002e50:	df012815 	stw	fp,1184(sp)
 8002e54:	e03e860e 	bge	fp,zero,8002870 <___vfprintf_internal_r+0x185c>
 8002e58:	003f9006 	br	8002c9c <___vfprintf_internal_r+0x1c88>
 8002e5c:	94803fcc 	andi	r18,r18,255
 8002e60:	9480201c 	xori	r18,r18,128
 8002e64:	00ffffc4 	movi	r3,-1
 8002e68:	94bfe004 	addi	r18,r18,-128
 8002e6c:	0038c506 	br	8001184 <___vfprintf_internal_r+0x170>
 8002e70:	d8c12044 	addi	r3,sp,1153
 8002e74:	003f7d06 	br	8002c6c <___vfprintf_internal_r+0x1c58>
 8002e78:	dd012417 	ldw	r20,1168(sp)
 8002e7c:	003f6d06 	br	8002c34 <___vfprintf_internal_r+0x1c20>
 8002e80:	00c00044 	movi	r3,1
 8002e84:	d8c12815 	stw	r3,1184(sp)
 8002e88:	d8c12b15 	stw	r3,1196(sp)
 8002e8c:	003e7806 	br	8002870 <___vfprintf_internal_r+0x185c>

08002e90 <__vfprintf_internal>:
 8002e90:	00820074 	movhi	r2,2049
 8002e94:	10bc1804 	addi	r2,r2,-4000
 8002e98:	2007883a 	mov	r3,r4
 8002e9c:	11000017 	ldw	r4,0(r2)
 8002ea0:	2805883a 	mov	r2,r5
 8002ea4:	300f883a 	mov	r7,r6
 8002ea8:	180b883a 	mov	r5,r3
 8002eac:	100d883a 	mov	r6,r2
 8002eb0:	80010141 	jmpi	8001014 <___vfprintf_internal_r>

08002eb4 <__swsetup_r>:
 8002eb4:	00820074 	movhi	r2,2049
 8002eb8:	10bc1804 	addi	r2,r2,-4000
 8002ebc:	10800017 	ldw	r2,0(r2)
 8002ec0:	defffd04 	addi	sp,sp,-12
 8002ec4:	dc400115 	stw	r17,4(sp)
 8002ec8:	dc000015 	stw	r16,0(sp)
 8002ecc:	dfc00215 	stw	ra,8(sp)
 8002ed0:	2023883a 	mov	r17,r4
 8002ed4:	2821883a 	mov	r16,r5
 8002ed8:	10000226 	beq	r2,zero,8002ee4 <__swsetup_r+0x30>
 8002edc:	10c00e17 	ldw	r3,56(r2)
 8002ee0:	18003d26 	beq	r3,zero,8002fd8 <__swsetup_r+0x124>
 8002ee4:	8080030b 	ldhu	r2,12(r16)
 8002ee8:	10c0020c 	andi	r3,r2,8
 8002eec:	18ffffcc 	andi	r3,r3,65535
 8002ef0:	18e0001c 	xori	r3,r3,32768
 8002ef4:	18e00004 	addi	r3,r3,-32768
 8002ef8:	18001226 	beq	r3,zero,8002f44 <__swsetup_r+0x90>
 8002efc:	80c00417 	ldw	r3,16(r16)
 8002f00:	18001f26 	beq	r3,zero,8002f80 <__swsetup_r+0xcc>
 8002f04:	1100004c 	andi	r4,r2,1
 8002f08:	2000261e 	bne	r4,zero,8002fa4 <__swsetup_r+0xf0>
 8002f0c:	1080008c 	andi	r2,r2,2
 8002f10:	10bfffcc 	andi	r2,r2,65535
 8002f14:	10a0001c 	xori	r2,r2,32768
 8002f18:	10a00004 	addi	r2,r2,-32768
 8002f1c:	1000311e 	bne	r2,zero,8002fe4 <__swsetup_r+0x130>
 8002f20:	80800517 	ldw	r2,20(r16)
 8002f24:	80800215 	stw	r2,8(r16)
 8002f28:	18002326 	beq	r3,zero,8002fb8 <__swsetup_r+0x104>
 8002f2c:	0005883a 	mov	r2,zero
 8002f30:	dfc00217 	ldw	ra,8(sp)
 8002f34:	dc400117 	ldw	r17,4(sp)
 8002f38:	dc000017 	ldw	r16,0(sp)
 8002f3c:	dec00304 	addi	sp,sp,12
 8002f40:	f800283a 	ret
 8002f44:	10c0040c 	andi	r3,r2,16
 8002f48:	18ffffcc 	andi	r3,r3,65535
 8002f4c:	18e0001c 	xori	r3,r3,32768
 8002f50:	18e00004 	addi	r3,r3,-32768
 8002f54:	18001e26 	beq	r3,zero,8002fd0 <__swsetup_r+0x11c>
 8002f58:	10c0010c 	andi	r3,r2,4
 8002f5c:	18ffffcc 	andi	r3,r3,65535
 8002f60:	18e0001c 	xori	r3,r3,32768
 8002f64:	18e00004 	addi	r3,r3,-32768
 8002f68:	1800211e 	bne	r3,zero,8002ff0 <__swsetup_r+0x13c>
 8002f6c:	80c00417 	ldw	r3,16(r16)
 8002f70:	11400214 	ori	r5,r2,8
 8002f74:	8140030d 	sth	r5,12(r16)
 8002f78:	2805883a 	mov	r2,r5
 8002f7c:	183fe11e 	bne	r3,zero,8002f04 <__swsetup_r+0x50>
 8002f80:	1140a00c 	andi	r5,r2,640
 8002f84:	01008004 	movi	r4,512
 8002f88:	293fde26 	beq	r5,r4,8002f04 <__swsetup_r+0x50>
 8002f8c:	8809883a 	mov	r4,r17
 8002f90:	800b883a 	mov	r5,r16
 8002f94:	8005a500 	call	8005a50 <__smakebuf_r>
 8002f98:	8080030b 	ldhu	r2,12(r16)
 8002f9c:	80c00417 	ldw	r3,16(r16)
 8002fa0:	003fd806 	br	8002f04 <__swsetup_r+0x50>
 8002fa4:	80800517 	ldw	r2,20(r16)
 8002fa8:	80000215 	stw	zero,8(r16)
 8002fac:	0085c83a 	sub	r2,zero,r2
 8002fb0:	80800615 	stw	r2,24(r16)
 8002fb4:	183fdd1e 	bne	r3,zero,8002f2c <__swsetup_r+0x78>
 8002fb8:	8080030b 	ldhu	r2,12(r16)
 8002fbc:	1080200c 	andi	r2,r2,128
 8002fc0:	10bfffcc 	andi	r2,r2,65535
 8002fc4:	10a0001c 	xori	r2,r2,32768
 8002fc8:	10a00004 	addi	r2,r2,-32768
 8002fcc:	103fd826 	beq	r2,zero,8002f30 <__swsetup_r+0x7c>
 8002fd0:	00bfffc4 	movi	r2,-1
 8002fd4:	003fd606 	br	8002f30 <__swsetup_r+0x7c>
 8002fd8:	1009883a 	mov	r4,r2
 8002fdc:	8004cdc0 	call	8004cdc <__sinit>
 8002fe0:	003fc006 	br	8002ee4 <__swsetup_r+0x30>
 8002fe4:	0005883a 	mov	r2,zero
 8002fe8:	80800215 	stw	r2,8(r16)
 8002fec:	003fce06 	br	8002f28 <__swsetup_r+0x74>
 8002ff0:	81400c17 	ldw	r5,48(r16)
 8002ff4:	28000626 	beq	r5,zero,8003010 <__swsetup_r+0x15c>
 8002ff8:	80c01004 	addi	r3,r16,64
 8002ffc:	28c00326 	beq	r5,r3,800300c <__swsetup_r+0x158>
 8003000:	8809883a 	mov	r4,r17
 8003004:	80050600 	call	8005060 <_free_r>
 8003008:	8080030b 	ldhu	r2,12(r16)
 800300c:	80000c15 	stw	zero,48(r16)
 8003010:	80c00417 	ldw	r3,16(r16)
 8003014:	013ff6c4 	movi	r4,-37
 8003018:	2084703a 	and	r2,r4,r2
 800301c:	80000115 	stw	zero,4(r16)
 8003020:	80c00015 	stw	r3,0(r16)
 8003024:	003fd206 	br	8002f70 <__swsetup_r+0xbc>

08003028 <__call_exitprocs>:
 8003028:	00820074 	movhi	r2,2049
 800302c:	10bc1704 	addi	r2,r2,-4004
 8003030:	10800017 	ldw	r2,0(r2)
 8003034:	defff304 	addi	sp,sp,-52
 8003038:	df000b15 	stw	fp,44(sp)
 800303c:	d8800015 	stw	r2,0(sp)
 8003040:	10805204 	addi	r2,r2,328
 8003044:	dd400815 	stw	r21,32(sp)
 8003048:	dfc00c15 	stw	ra,48(sp)
 800304c:	ddc00a15 	stw	r23,40(sp)
 8003050:	dd800915 	stw	r22,36(sp)
 8003054:	dd000715 	stw	r20,28(sp)
 8003058:	dcc00615 	stw	r19,24(sp)
 800305c:	dc800515 	stw	r18,20(sp)
 8003060:	dc400415 	stw	r17,16(sp)
 8003064:	dc000315 	stw	r16,12(sp)
 8003068:	d9000115 	stw	r4,4(sp)
 800306c:	2839883a 	mov	fp,r5
 8003070:	d8800215 	stw	r2,8(sp)
 8003074:	057fffc4 	movi	r21,-1
 8003078:	d8800017 	ldw	r2,0(sp)
 800307c:	ddc00217 	ldw	r23,8(sp)
 8003080:	14805217 	ldw	r18,328(r2)
 8003084:	90001726 	beq	r18,zero,80030e4 <__call_exitprocs+0xbc>
 8003088:	94400117 	ldw	r17,4(r18)
 800308c:	8c3fffc4 	addi	r16,r17,-1
 8003090:	80001116 	blt	r16,zero,80030d8 <__call_exitprocs+0xb0>
 8003094:	8c400044 	addi	r17,r17,1
 8003098:	8427883a 	add	r19,r16,r16
 800309c:	8c63883a 	add	r17,r17,r17
 80030a0:	95802204 	addi	r22,r18,136
 80030a4:	9ce7883a 	add	r19,r19,r19
 80030a8:	8c63883a 	add	r17,r17,r17
 80030ac:	b4e7883a 	add	r19,r22,r19
 80030b0:	9463883a 	add	r17,r18,r17
 80030b4:	e0001726 	beq	fp,zero,8003114 <__call_exitprocs+0xec>
 80030b8:	8c87c83a 	sub	r3,r17,r18
 80030bc:	b0c7883a 	add	r3,r22,r3
 80030c0:	18c01e17 	ldw	r3,120(r3)
 80030c4:	1f001326 	beq	r3,fp,8003114 <__call_exitprocs+0xec>
 80030c8:	843fffc4 	addi	r16,r16,-1
 80030cc:	9cffff04 	addi	r19,r19,-4
 80030d0:	8c7fff04 	addi	r17,r17,-4
 80030d4:	857ff71e 	bne	r16,r21,80030b4 <__call_exitprocs+0x8c>
 80030d8:	00800034 	movhi	r2,0
 80030dc:	10800004 	addi	r2,r2,0
 80030e0:	10002a1e 	bne	r2,zero,800318c <__call_exitprocs+0x164>
 80030e4:	dfc00c17 	ldw	ra,48(sp)
 80030e8:	df000b17 	ldw	fp,44(sp)
 80030ec:	ddc00a17 	ldw	r23,40(sp)
 80030f0:	dd800917 	ldw	r22,36(sp)
 80030f4:	dd400817 	ldw	r21,32(sp)
 80030f8:	dd000717 	ldw	r20,28(sp)
 80030fc:	dcc00617 	ldw	r19,24(sp)
 8003100:	dc800517 	ldw	r18,20(sp)
 8003104:	dc400417 	ldw	r17,16(sp)
 8003108:	dc000317 	ldw	r16,12(sp)
 800310c:	dec00d04 	addi	sp,sp,52
 8003110:	f800283a 	ret
 8003114:	91000117 	ldw	r4,4(r18)
 8003118:	88c00017 	ldw	r3,0(r17)
 800311c:	213fffc4 	addi	r4,r4,-1
 8003120:	24001526 	beq	r4,r16,8003178 <__call_exitprocs+0x150>
 8003124:	88000015 	stw	zero,0(r17)
 8003128:	183fe726 	beq	r3,zero,80030c8 <__call_exitprocs+0xa0>
 800312c:	00800044 	movi	r2,1
 8003130:	1408983a 	sll	r4,r2,r16
 8003134:	91406217 	ldw	r5,392(r18)
 8003138:	95000117 	ldw	r20,4(r18)
 800313c:	214a703a 	and	r5,r4,r5
 8003140:	28000b26 	beq	r5,zero,8003170 <__call_exitprocs+0x148>
 8003144:	91406317 	ldw	r5,396(r18)
 8003148:	2148703a 	and	r4,r4,r5
 800314c:	20000c1e 	bne	r4,zero,8003180 <__call_exitprocs+0x158>
 8003150:	99400017 	ldw	r5,0(r19)
 8003154:	d9000117 	ldw	r4,4(sp)
 8003158:	183ee83a 	callr	r3
 800315c:	90c00117 	ldw	r3,4(r18)
 8003160:	1d3fc51e 	bne	r3,r20,8003078 <__call_exitprocs+0x50>
 8003164:	b8c00017 	ldw	r3,0(r23)
 8003168:	1cbfd726 	beq	r3,r18,80030c8 <__call_exitprocs+0xa0>
 800316c:	003fc206 	br	8003078 <__call_exitprocs+0x50>
 8003170:	183ee83a 	callr	r3
 8003174:	003ff906 	br	800315c <__call_exitprocs+0x134>
 8003178:	94000115 	stw	r16,4(r18)
 800317c:	003fea06 	br	8003128 <__call_exitprocs+0x100>
 8003180:	99000017 	ldw	r4,0(r19)
 8003184:	183ee83a 	callr	r3
 8003188:	003ff406 	br	800315c <__call_exitprocs+0x134>
 800318c:	90c00117 	ldw	r3,4(r18)
 8003190:	1800071e 	bne	r3,zero,80031b0 <__call_exitprocs+0x188>
 8003194:	90c00017 	ldw	r3,0(r18)
 8003198:	18000926 	beq	r3,zero,80031c0 <__call_exitprocs+0x198>
 800319c:	9009883a 	mov	r4,r18
 80031a0:	b8c00015 	stw	r3,0(r23)
 80031a4:	00000000 	call	0 <__alt_mem_sdram-0x8000000>
 80031a8:	bc800017 	ldw	r18,0(r23)
 80031ac:	003fb506 	br	8003084 <__call_exitprocs+0x5c>
 80031b0:	90c00017 	ldw	r3,0(r18)
 80031b4:	902f883a 	mov	r23,r18
 80031b8:	1825883a 	mov	r18,r3
 80031bc:	003fb106 	br	8003084 <__call_exitprocs+0x5c>
 80031c0:	0007883a 	mov	r3,zero
 80031c4:	003ffb06 	br	80031b4 <__call_exitprocs+0x18c>

080031c8 <quorem>:
 80031c8:	defff204 	addi	sp,sp,-56
 80031cc:	dd000815 	stw	r20,32(sp)
 80031d0:	20800417 	ldw	r2,16(r4)
 80031d4:	2d000417 	ldw	r20,16(r5)
 80031d8:	dcc00715 	stw	r19,28(sp)
 80031dc:	dfc00d15 	stw	ra,52(sp)
 80031e0:	df000c15 	stw	fp,48(sp)
 80031e4:	ddc00b15 	stw	r23,44(sp)
 80031e8:	dd800a15 	stw	r22,40(sp)
 80031ec:	dd400915 	stw	r21,36(sp)
 80031f0:	dc800615 	stw	r18,24(sp)
 80031f4:	dc400515 	stw	r17,20(sp)
 80031f8:	dc000415 	stw	r16,16(sp)
 80031fc:	d9400015 	stw	r5,0(sp)
 8003200:	2027883a 	mov	r19,r4
 8003204:	15007d16 	blt	r2,r20,80033fc <quorem+0x234>
 8003208:	a0800104 	addi	r2,r20,4
 800320c:	1085883a 	add	r2,r2,r2
 8003210:	1085883a 	add	r2,r2,r2
 8003214:	28ad883a 	add	r22,r5,r2
 8003218:	2085883a 	add	r2,r4,r2
 800321c:	10800017 	ldw	r2,0(r2)
 8003220:	b1400017 	ldw	r5,0(r22)
 8003224:	a53fffc4 	addi	r20,r20,-1
 8003228:	1009883a 	mov	r4,r2
 800322c:	29400044 	addi	r5,r5,1
 8003230:	d8800115 	stw	r2,4(sp)
 8003234:	8000de40 	call	8000de4 <__udivsi3>
 8003238:	1025883a 	mov	r18,r2
 800323c:	d8800017 	ldw	r2,0(sp)
 8003240:	9f000504 	addi	fp,r19,20
 8003244:	14000504 	addi	r16,r2,20
 8003248:	90003626 	beq	r18,zero,8003324 <quorem+0x15c>
 800324c:	802b883a 	mov	r21,r16
 8003250:	e023883a 	mov	r17,fp
 8003254:	0007883a 	mov	r3,zero
 8003258:	002f883a 	mov	r23,zero
 800325c:	a9800017 	ldw	r6,0(r21)
 8003260:	900b883a 	mov	r5,r18
 8003264:	d8c00315 	stw	r3,12(sp)
 8003268:	313fffcc 	andi	r4,r6,65535
 800326c:	d9800215 	stw	r6,8(sp)
 8003270:	8000df40 	call	8000df4 <__mulsi3>
 8003274:	d9800217 	ldw	r6,8(sp)
 8003278:	d8c00317 	ldw	r3,12(sp)
 800327c:	900b883a 	mov	r5,r18
 8003280:	3008d43a 	srli	r4,r6,16
 8003284:	1887883a 	add	r3,r3,r2
 8003288:	d8c00315 	stw	r3,12(sp)
 800328c:	8000df40 	call	8000df4 <__mulsi3>
 8003290:	89400017 	ldw	r5,0(r17)
 8003294:	d8c00317 	ldw	r3,12(sp)
 8003298:	ad400104 	addi	r21,r21,4
 800329c:	293fffcc 	andi	r4,r5,65535
 80032a0:	1810d43a 	srli	r8,r3,16
 80032a4:	25c9883a 	add	r4,r4,r23
 80032a8:	18ffffcc 	andi	r3,r3,65535
 80032ac:	20c9c83a 	sub	r4,r4,r3
 80032b0:	280cd43a 	srli	r6,r5,16
 80032b4:	4085883a 	add	r2,r8,r2
 80032b8:	2007d43a 	srai	r3,r4,16
 80032bc:	117fffcc 	andi	r5,r2,65535
 80032c0:	314bc83a 	sub	r5,r6,r5
 80032c4:	28cb883a 	add	r5,r5,r3
 80032c8:	8940008d 	sth	r5,2(r17)
 80032cc:	8900000d 	sth	r4,0(r17)
 80032d0:	1006d43a 	srli	r3,r2,16
 80032d4:	282fd43a 	srai	r23,r5,16
 80032d8:	8c400104 	addi	r17,r17,4
 80032dc:	b57fdf2e 	bgeu	r22,r21,800325c <quorem+0x94>
 80032e0:	d8c00117 	ldw	r3,4(sp)
 80032e4:	18000f1e 	bne	r3,zero,8003324 <quorem+0x15c>
 80032e8:	a0800144 	addi	r2,r20,5
 80032ec:	1085883a 	add	r2,r2,r2
 80032f0:	1085883a 	add	r2,r2,r2
 80032f4:	9887883a 	add	r3,r19,r2
 80032f8:	18bfff04 	addi	r2,r3,-4
 80032fc:	e080082e 	bgeu	fp,r2,8003320 <quorem+0x158>
 8003300:	18ffff17 	ldw	r3,-4(r3)
 8003304:	18000326 	beq	r3,zero,8003314 <quorem+0x14c>
 8003308:	00000506 	br	8003320 <quorem+0x158>
 800330c:	10c00017 	ldw	r3,0(r2)
 8003310:	1800031e 	bne	r3,zero,8003320 <quorem+0x158>
 8003314:	10bfff04 	addi	r2,r2,-4
 8003318:	a53fffc4 	addi	r20,r20,-1
 800331c:	e0bffb36 	bltu	fp,r2,800330c <quorem+0x144>
 8003320:	9d000415 	stw	r20,16(r19)
 8003324:	d9400017 	ldw	r5,0(sp)
 8003328:	9809883a 	mov	r4,r19
 800332c:	80071680 	call	8007168 <__mcmp>
 8003330:	10002516 	blt	r2,zero,80033c8 <quorem+0x200>
 8003334:	94800044 	addi	r18,r18,1
 8003338:	e007883a 	mov	r3,fp
 800333c:	000d883a 	mov	r6,zero
 8003340:	18800017 	ldw	r2,0(r3)
 8003344:	82000017 	ldw	r8,0(r16)
 8003348:	84000104 	addi	r16,r16,4
 800334c:	11ffffcc 	andi	r7,r2,65535
 8003350:	413fffcc 	andi	r4,r8,65535
 8003354:	398d883a 	add	r6,r7,r6
 8003358:	310fc83a 	sub	r7,r6,r4
 800335c:	4010d43a 	srli	r8,r8,16
 8003360:	100cd43a 	srli	r6,r2,16
 8003364:	3809d43a 	srai	r4,r7,16
 8003368:	19c0000d 	sth	r7,0(r3)
 800336c:	320dc83a 	sub	r6,r6,r8
 8003370:	310d883a 	add	r6,r6,r4
 8003374:	1980008d 	sth	r6,2(r3)
 8003378:	300dd43a 	srai	r6,r6,16
 800337c:	18c00104 	addi	r3,r3,4
 8003380:	b43fef2e 	bgeu	r22,r16,8003340 <quorem+0x178>
 8003384:	a0800144 	addi	r2,r20,5
 8003388:	1085883a 	add	r2,r2,r2
 800338c:	1085883a 	add	r2,r2,r2
 8003390:	9885883a 	add	r2,r19,r2
 8003394:	10c00017 	ldw	r3,0(r2)
 8003398:	18000b1e 	bne	r3,zero,80033c8 <quorem+0x200>
 800339c:	10ffff04 	addi	r3,r2,-4
 80033a0:	e0c0082e 	bgeu	fp,r3,80033c4 <quorem+0x1fc>
 80033a4:	10bfff17 	ldw	r2,-4(r2)
 80033a8:	10000326 	beq	r2,zero,80033b8 <quorem+0x1f0>
 80033ac:	00000506 	br	80033c4 <quorem+0x1fc>
 80033b0:	18800017 	ldw	r2,0(r3)
 80033b4:	1000031e 	bne	r2,zero,80033c4 <quorem+0x1fc>
 80033b8:	18ffff04 	addi	r3,r3,-4
 80033bc:	a53fffc4 	addi	r20,r20,-1
 80033c0:	e0fffb36 	bltu	fp,r3,80033b0 <quorem+0x1e8>
 80033c4:	9d000415 	stw	r20,16(r19)
 80033c8:	9005883a 	mov	r2,r18
 80033cc:	dfc00d17 	ldw	ra,52(sp)
 80033d0:	df000c17 	ldw	fp,48(sp)
 80033d4:	ddc00b17 	ldw	r23,44(sp)
 80033d8:	dd800a17 	ldw	r22,40(sp)
 80033dc:	dd400917 	ldw	r21,36(sp)
 80033e0:	dd000817 	ldw	r20,32(sp)
 80033e4:	dcc00717 	ldw	r19,28(sp)
 80033e8:	dc800617 	ldw	r18,24(sp)
 80033ec:	dc400517 	ldw	r17,20(sp)
 80033f0:	dc000417 	ldw	r16,16(sp)
 80033f4:	dec00e04 	addi	sp,sp,56
 80033f8:	f800283a 	ret
 80033fc:	0005883a 	mov	r2,zero
 8003400:	003ff206 	br	80033cc <quorem+0x204>

08003404 <_dtoa_r>:
 8003404:	20801017 	ldw	r2,64(r4)
 8003408:	deffdf04 	addi	sp,sp,-132
 800340c:	dcc01a15 	stw	r19,104(sp)
 8003410:	dc801915 	stw	r18,100(sp)
 8003414:	dc401815 	stw	r17,96(sp)
 8003418:	dc001715 	stw	r16,92(sp)
 800341c:	dfc02015 	stw	ra,128(sp)
 8003420:	df001f15 	stw	fp,124(sp)
 8003424:	ddc01e15 	stw	r23,120(sp)
 8003428:	dd801d15 	stw	r22,116(sp)
 800342c:	dd401c15 	stw	r21,112(sp)
 8003430:	dd001b15 	stw	r20,108(sp)
 8003434:	d9400315 	stw	r5,12(sp)
 8003438:	d9c00415 	stw	r7,16(sp)
 800343c:	2021883a 	mov	r16,r4
 8003440:	3025883a 	mov	r18,r6
 8003444:	dcc02317 	ldw	r19,140(sp)
 8003448:	3023883a 	mov	r17,r6
 800344c:	10000826 	beq	r2,zero,8003470 <_dtoa_r+0x6c>
 8003450:	20c01117 	ldw	r3,68(r4)
 8003454:	01800044 	movi	r6,1
 8003458:	100b883a 	mov	r5,r2
 800345c:	30cc983a 	sll	r6,r6,r3
 8003460:	10c00115 	stw	r3,4(r2)
 8003464:	11800215 	stw	r6,8(r2)
 8003468:	80068c40 	call	80068c4 <_Bfree>
 800346c:	80001015 	stw	zero,64(r16)
 8003470:	90002f16 	blt	r18,zero,8003530 <_dtoa_r+0x12c>
 8003474:	98000015 	stw	zero,0(r19)
 8003478:	90dffc2c 	andhi	r3,r18,32752
 800347c:	009ffc34 	movhi	r2,32752
 8003480:	18801c26 	beq	r3,r2,80034f4 <_dtoa_r+0xf0>
 8003484:	d9000317 	ldw	r4,12(sp)
 8003488:	880b883a 	mov	r5,r17
 800348c:	000d883a 	mov	r6,zero
 8003490:	000f883a 	mov	r7,zero
 8003494:	8009abc0 	call	8009abc <__eqdf2>
 8003498:	10002c1e 	bne	r2,zero,800354c <_dtoa_r+0x148>
 800349c:	d9002217 	ldw	r4,136(sp)
 80034a0:	d9c02417 	ldw	r7,144(sp)
 80034a4:	00800044 	movi	r2,1
 80034a8:	20800015 	stw	r2,0(r4)
 80034ac:	38019426 	beq	r7,zero,8003b00 <_dtoa_r+0x6fc>
 80034b0:	00820074 	movhi	r2,2049
 80034b4:	10b4da44 	addi	r2,r2,-11415
 80034b8:	38800015 	stw	r2,0(r7)
 80034bc:	15ffffc4 	addi	r23,r2,-1
 80034c0:	b805883a 	mov	r2,r23
 80034c4:	dfc02017 	ldw	ra,128(sp)
 80034c8:	df001f17 	ldw	fp,124(sp)
 80034cc:	ddc01e17 	ldw	r23,120(sp)
 80034d0:	dd801d17 	ldw	r22,116(sp)
 80034d4:	dd401c17 	ldw	r21,112(sp)
 80034d8:	dd001b17 	ldw	r20,108(sp)
 80034dc:	dcc01a17 	ldw	r19,104(sp)
 80034e0:	dc801917 	ldw	r18,100(sp)
 80034e4:	dc401817 	ldw	r17,96(sp)
 80034e8:	dc001717 	ldw	r16,92(sp)
 80034ec:	dec02104 	addi	sp,sp,132
 80034f0:	f800283a 	ret
 80034f4:	d8c02217 	ldw	r3,136(sp)
 80034f8:	d9000317 	ldw	r4,12(sp)
 80034fc:	0089c3c4 	movi	r2,9999
 8003500:	18800015 	stw	r2,0(r3)
 8003504:	20016c26 	beq	r4,zero,8003ab8 <_dtoa_r+0x6b4>
 8003508:	05c20074 	movhi	r23,2049
 800350c:	bdf4e604 	addi	r23,r23,-11368
 8003510:	d9c02417 	ldw	r7,144(sp)
 8003514:	383fea26 	beq	r7,zero,80034c0 <_dtoa_r+0xbc>
 8003518:	b88000c7 	ldb	r2,3(r23)
 800351c:	10016d1e 	bne	r2,zero,8003ad4 <_dtoa_r+0x6d0>
 8003520:	b88000c4 	addi	r2,r23,3
 8003524:	d8c02417 	ldw	r3,144(sp)
 8003528:	18800015 	stw	r2,0(r3)
 800352c:	003fe406 	br	80034c0 <_dtoa_r+0xbc>
 8003530:	04600034 	movhi	r17,32768
 8003534:	8c7fffc4 	addi	r17,r17,-1
 8003538:	9462703a 	and	r17,r18,r17
 800353c:	00800044 	movi	r2,1
 8003540:	98800015 	stw	r2,0(r19)
 8003544:	8825883a 	mov	r18,r17
 8003548:	003fcb06 	br	8003478 <_dtoa_r+0x74>
 800354c:	d9400317 	ldw	r5,12(sp)
 8003550:	9028d53a 	srli	r20,r18,20
 8003554:	d8800204 	addi	r2,sp,8
 8003558:	d8800015 	stw	r2,0(sp)
 800355c:	8009883a 	mov	r4,r16
 8003560:	880d883a 	mov	r6,r17
 8003564:	d9c00104 	addi	r7,sp,4
 8003568:	80075100 	call	8007510 <__d2b>
 800356c:	a501ffcc 	andi	r20,r20,2047
 8003570:	1039883a 	mov	fp,r2
 8003574:	a001591e 	bne	r20,zero,8003adc <_dtoa_r+0x6d8>
 8003578:	dd400217 	ldw	r21,8(sp)
 800357c:	dd000117 	ldw	r20,4(sp)
 8003580:	00befbc4 	movi	r2,-1041
 8003584:	ad29883a 	add	r20,r21,r20
 8003588:	a082d216 	blt	r20,r2,80040d4 <_dtoa_r+0xcd0>
 800358c:	d8c00317 	ldw	r3,12(sp)
 8003590:	013f0384 	movi	r4,-1010
 8003594:	2509c83a 	sub	r4,r4,r20
 8003598:	a0810484 	addi	r2,r20,1042
 800359c:	9124983a 	sll	r18,r18,r4
 80035a0:	1884d83a 	srl	r2,r3,r2
 80035a4:	9088b03a 	or	r4,r18,r2
 80035a8:	8009e400 	call	8009e40 <__floatunsidf>
 80035ac:	1009883a 	mov	r4,r2
 80035b0:	017f8434 	movhi	r5,65040
 80035b4:	00800044 	movi	r2,1
 80035b8:	194b883a 	add	r5,r3,r5
 80035bc:	a53fffc4 	addi	r20,r20,-1
 80035c0:	d8800f15 	stw	r2,60(sp)
 80035c4:	000d883a 	mov	r6,zero
 80035c8:	01cffe34 	movhi	r7,16376
 80035cc:	80095c40 	call	80095c4 <__subdf3>
 80035d0:	1009883a 	mov	r4,r2
 80035d4:	180b883a 	mov	r5,r3
 80035d8:	0198dbf4 	movhi	r6,25455
 80035dc:	3190d844 	addi	r6,r6,17249
 80035e0:	01cff4f4 	movhi	r7,16339
 80035e4:	39e1e9c4 	addi	r7,r7,-30809
 80035e8:	80096240 	call	8009624 <__muldf3>
 80035ec:	180b883a 	mov	r5,r3
 80035f0:	01a2d874 	movhi	r6,35681
 80035f4:	31b22cc4 	addi	r6,r6,-14157
 80035f8:	01cff1f4 	movhi	r7,16327
 80035fc:	39e28a04 	addi	r7,r7,-30168
 8003600:	1009883a 	mov	r4,r2
 8003604:	80095700 	call	8009570 <__adddf3>
 8003608:	a009883a 	mov	r4,r20
 800360c:	1027883a 	mov	r19,r2
 8003610:	1825883a 	mov	r18,r3
 8003614:	8009c980 	call	8009c98 <__floatsidf>
 8003618:	1009883a 	mov	r4,r2
 800361c:	180b883a 	mov	r5,r3
 8003620:	019427f4 	movhi	r6,20639
 8003624:	319e7ec4 	addi	r6,r6,31227
 8003628:	01cff4f4 	movhi	r7,16339
 800362c:	39d104c4 	addi	r7,r7,17427
 8003630:	80096240 	call	8009624 <__muldf3>
 8003634:	9809883a 	mov	r4,r19
 8003638:	900b883a 	mov	r5,r18
 800363c:	100d883a 	mov	r6,r2
 8003640:	180f883a 	mov	r7,r3
 8003644:	80095700 	call	8009570 <__adddf3>
 8003648:	1009883a 	mov	r4,r2
 800364c:	180b883a 	mov	r5,r3
 8003650:	1027883a 	mov	r19,r2
 8003654:	1825883a 	mov	r18,r3
 8003658:	8009d6c0 	call	8009d6c <__fixdfsi>
 800365c:	9809883a 	mov	r4,r19
 8003660:	900b883a 	mov	r5,r18
 8003664:	000d883a 	mov	r6,zero
 8003668:	000f883a 	mov	r7,zero
 800366c:	d8800615 	stw	r2,24(sp)
 8003670:	8009c3c0 	call	8009c3c <__ltdf2>
 8003674:	10027e16 	blt	r2,zero,8004070 <_dtoa_r+0xc6c>
 8003678:	d8c00617 	ldw	r3,24(sp)
 800367c:	00800584 	movi	r2,22
 8003680:	10c26c36 	bltu	r2,r3,8004034 <_dtoa_r+0xc30>
 8003684:	180490fa 	slli	r2,r3,3
 8003688:	00c20074 	movhi	r3,2049
 800368c:	18f50b04 	addi	r3,r3,-11220
 8003690:	d9800317 	ldw	r6,12(sp)
 8003694:	1885883a 	add	r2,r3,r2
 8003698:	11000017 	ldw	r4,0(r2)
 800369c:	11400117 	ldw	r5,4(r2)
 80036a0:	880f883a 	mov	r7,r17
 80036a4:	8009b740 	call	8009b74 <__gtdf2>
 80036a8:	00828f0e 	bge	zero,r2,80040e8 <_dtoa_r+0xce4>
 80036ac:	d8800617 	ldw	r2,24(sp)
 80036b0:	d8000d15 	stw	zero,52(sp)
 80036b4:	10bfffc4 	addi	r2,r2,-1
 80036b8:	d8800615 	stw	r2,24(sp)
 80036bc:	ad29c83a 	sub	r20,r21,r20
 80036c0:	a53fffc4 	addi	r20,r20,-1
 80036c4:	a0026616 	blt	r20,zero,8004060 <_dtoa_r+0xc5c>
 80036c8:	dd000715 	stw	r20,28(sp)
 80036cc:	d8000815 	stw	zero,32(sp)
 80036d0:	d8800617 	ldw	r2,24(sp)
 80036d4:	10025a16 	blt	r2,zero,8004040 <_dtoa_r+0xc3c>
 80036d8:	d8c00717 	ldw	r3,28(sp)
 80036dc:	d8800b15 	stw	r2,44(sp)
 80036e0:	d8000a15 	stw	zero,40(sp)
 80036e4:	1887883a 	add	r3,r3,r2
 80036e8:	d8c00715 	stw	r3,28(sp)
 80036ec:	d9c00417 	ldw	r7,16(sp)
 80036f0:	00800244 	movi	r2,9
 80036f4:	11c10536 	bltu	r2,r7,8003b0c <_dtoa_r+0x708>
 80036f8:	00800144 	movi	r2,5
 80036fc:	11c4c60e 	bge	r2,r7,8004a18 <_dtoa_r+0x1614>
 8003700:	39ffff04 	addi	r7,r7,-4
 8003704:	d9c00415 	stw	r7,16(sp)
 8003708:	0027883a 	mov	r19,zero
 800370c:	d9c00417 	ldw	r7,16(sp)
 8003710:	008000c4 	movi	r2,3
 8003714:	3883a226 	beq	r7,r2,80045a0 <_dtoa_r+0x119c>
 8003718:	11c2bc16 	blt	r2,r7,800420c <_dtoa_r+0xe08>
 800371c:	00800084 	movi	r2,2
 8003720:	3880fb1e 	bne	r7,r2,8003b10 <_dtoa_r+0x70c>
 8003724:	d8000c15 	stw	zero,48(sp)
 8003728:	d9002117 	ldw	r4,132(sp)
 800372c:	0103ae0e 	bge	zero,r4,80045e8 <_dtoa_r+0x11e4>
 8003730:	2025883a 	mov	r18,r4
 8003734:	d9000e15 	stw	r4,56(sp)
 8003738:	d9000915 	stw	r4,36(sp)
 800373c:	80001115 	stw	zero,68(r16)
 8003740:	008005c4 	movi	r2,23
 8003744:	1484b22e 	bgeu	r2,r18,8004a10 <_dtoa_r+0x160c>
 8003748:	00c00044 	movi	r3,1
 800374c:	00800104 	movi	r2,4
 8003750:	1085883a 	add	r2,r2,r2
 8003754:	11000504 	addi	r4,r2,20
 8003758:	180b883a 	mov	r5,r3
 800375c:	18c00044 	addi	r3,r3,1
 8003760:	913ffb2e 	bgeu	r18,r4,8003750 <_dtoa_r+0x34c>
 8003764:	81401115 	stw	r5,68(r16)
 8003768:	8009883a 	mov	r4,r16
 800376c:	800681c0 	call	800681c <_Balloc>
 8003770:	102f883a 	mov	r23,r2
 8003774:	80801015 	stw	r2,64(r16)
 8003778:	00800384 	movi	r2,14
 800377c:	1480f036 	bltu	r2,r18,8003b40 <_dtoa_r+0x73c>
 8003780:	9800ef26 	beq	r19,zero,8003b40 <_dtoa_r+0x73c>
 8003784:	d8800617 	ldw	r2,24(sp)
 8003788:	00839c0e 	bge	zero,r2,80045fc <_dtoa_r+0x11f8>
 800378c:	d8c00617 	ldw	r3,24(sp)
 8003790:	108003cc 	andi	r2,r2,15
 8003794:	100490fa 	slli	r2,r2,3
 8003798:	182bd13a 	srai	r21,r3,4
 800379c:	00c20074 	movhi	r3,2049
 80037a0:	18f50b04 	addi	r3,r3,-11220
 80037a4:	1885883a 	add	r2,r3,r2
 80037a8:	a8c0040c 	andi	r3,r21,16
 80037ac:	12800017 	ldw	r10,0(r2)
 80037b0:	15800117 	ldw	r22,4(r2)
 80037b4:	18038726 	beq	r3,zero,80045d4 <_dtoa_r+0x11d0>
 80037b8:	00820074 	movhi	r2,2049
 80037bc:	10b50104 	addi	r2,r2,-11260
 80037c0:	11800817 	ldw	r6,32(r2)
 80037c4:	11c00917 	ldw	r7,36(r2)
 80037c8:	d9000317 	ldw	r4,12(sp)
 80037cc:	880b883a 	mov	r5,r17
 80037d0:	da801515 	stw	r10,84(sp)
 80037d4:	80099080 	call	8009908 <__divdf3>
 80037d8:	da801517 	ldw	r10,84(sp)
 80037dc:	d8801015 	stw	r2,64(sp)
 80037e0:	1829883a 	mov	r20,r3
 80037e4:	ad4003cc 	andi	r21,r21,15
 80037e8:	048000c4 	movi	r18,3
 80037ec:	a8001126 	beq	r21,zero,8003834 <_dtoa_r+0x430>
 80037f0:	04c20074 	movhi	r19,2049
 80037f4:	9cf50104 	addi	r19,r19,-11260
 80037f8:	5005883a 	mov	r2,r10
 80037fc:	b007883a 	mov	r3,r22
 8003800:	a980004c 	andi	r6,r21,1
 8003804:	1009883a 	mov	r4,r2
 8003808:	a82bd07a 	srai	r21,r21,1
 800380c:	180b883a 	mov	r5,r3
 8003810:	30000426 	beq	r6,zero,8003824 <_dtoa_r+0x420>
 8003814:	99800017 	ldw	r6,0(r19)
 8003818:	99c00117 	ldw	r7,4(r19)
 800381c:	94800044 	addi	r18,r18,1
 8003820:	80096240 	call	8009624 <__muldf3>
 8003824:	9cc00204 	addi	r19,r19,8
 8003828:	a83ff51e 	bne	r21,zero,8003800 <_dtoa_r+0x3fc>
 800382c:	1015883a 	mov	r10,r2
 8003830:	182d883a 	mov	r22,r3
 8003834:	d9001017 	ldw	r4,64(sp)
 8003838:	a00b883a 	mov	r5,r20
 800383c:	500d883a 	mov	r6,r10
 8003840:	b00f883a 	mov	r7,r22
 8003844:	80099080 	call	8009908 <__divdf3>
 8003848:	1027883a 	mov	r19,r2
 800384c:	1829883a 	mov	r20,r3
 8003850:	d8c00d17 	ldw	r3,52(sp)
 8003854:	18000626 	beq	r3,zero,8003870 <_dtoa_r+0x46c>
 8003858:	9809883a 	mov	r4,r19
 800385c:	a00b883a 	mov	r5,r20
 8003860:	000d883a 	mov	r6,zero
 8003864:	01cffc34 	movhi	r7,16368
 8003868:	8009c3c0 	call	8009c3c <__ltdf2>
 800386c:	10040e16 	blt	r2,zero,80048a8 <_dtoa_r+0x14a4>
 8003870:	9009883a 	mov	r4,r18
 8003874:	8009c980 	call	8009c98 <__floatsidf>
 8003878:	1009883a 	mov	r4,r2
 800387c:	180b883a 	mov	r5,r3
 8003880:	980d883a 	mov	r6,r19
 8003884:	a00f883a 	mov	r7,r20
 8003888:	80096240 	call	8009624 <__muldf3>
 800388c:	1009883a 	mov	r4,r2
 8003890:	180b883a 	mov	r5,r3
 8003894:	000d883a 	mov	r6,zero
 8003898:	01d00734 	movhi	r7,16412
 800389c:	80095700 	call	8009570 <__adddf3>
 80038a0:	057f3034 	movhi	r21,64704
 80038a4:	1d6b883a 	add	r21,r3,r21
 80038a8:	d8c00917 	ldw	r3,36(sp)
 80038ac:	1025883a 	mov	r18,r2
 80038b0:	18031f26 	beq	r3,zero,8004530 <_dtoa_r+0x112c>
 80038b4:	d8800617 	ldw	r2,24(sp)
 80038b8:	dac00917 	ldw	r11,36(sp)
 80038bc:	d8801315 	stw	r2,76(sp)
 80038c0:	d8c00c17 	ldw	r3,48(sp)
 80038c4:	18039026 	beq	r3,zero,8004708 <_dtoa_r+0x1304>
 80038c8:	58bfffc4 	addi	r2,r11,-1
 80038cc:	100490fa 	slli	r2,r2,3
 80038d0:	00c20074 	movhi	r3,2049
 80038d4:	18f50b04 	addi	r3,r3,-11220
 80038d8:	0009883a 	mov	r4,zero
 80038dc:	1885883a 	add	r2,r3,r2
 80038e0:	11800017 	ldw	r6,0(r2)
 80038e4:	11c00117 	ldw	r7,4(r2)
 80038e8:	014ff834 	movhi	r5,16352
 80038ec:	dac01615 	stw	r11,88(sp)
 80038f0:	80099080 	call	8009908 <__divdf3>
 80038f4:	900d883a 	mov	r6,r18
 80038f8:	a80f883a 	mov	r7,r21
 80038fc:	1009883a 	mov	r4,r2
 8003900:	180b883a 	mov	r5,r3
 8003904:	80095c40 	call	80095c4 <__subdf3>
 8003908:	a00b883a 	mov	r5,r20
 800390c:	9809883a 	mov	r4,r19
 8003910:	182b883a 	mov	r21,r3
 8003914:	d8801015 	stw	r2,64(sp)
 8003918:	8009d6c0 	call	8009d6c <__fixdfsi>
 800391c:	1009883a 	mov	r4,r2
 8003920:	d8801515 	stw	r2,84(sp)
 8003924:	8009c980 	call	8009c98 <__floatsidf>
 8003928:	9809883a 	mov	r4,r19
 800392c:	a00b883a 	mov	r5,r20
 8003930:	100d883a 	mov	r6,r2
 8003934:	180f883a 	mov	r7,r3
 8003938:	80095c40 	call	80095c4 <__subdf3>
 800393c:	da401517 	ldw	r9,84(sp)
 8003940:	d9001017 	ldw	r4,64(sp)
 8003944:	a80b883a 	mov	r5,r21
 8003948:	4d000c04 	addi	r20,r9,48
 800394c:	bd000005 	stb	r20,0(r23)
 8003950:	100d883a 	mov	r6,r2
 8003954:	180f883a 	mov	r7,r3
 8003958:	bd800044 	addi	r22,r23,1
 800395c:	1025883a 	mov	r18,r2
 8003960:	1827883a 	mov	r19,r3
 8003964:	8009b740 	call	8009b74 <__gtdf2>
 8003968:	00842216 	blt	zero,r2,80049f4 <_dtoa_r+0x15f0>
 800396c:	0009883a 	mov	r4,zero
 8003970:	014ffc34 	movhi	r5,16368
 8003974:	900d883a 	mov	r6,r18
 8003978:	980f883a 	mov	r7,r19
 800397c:	80095c40 	call	80095c4 <__subdf3>
 8003980:	d9001017 	ldw	r4,64(sp)
 8003984:	a80b883a 	mov	r5,r21
 8003988:	100d883a 	mov	r6,r2
 800398c:	180f883a 	mov	r7,r3
 8003990:	8009b740 	call	8009b74 <__gtdf2>
 8003994:	dac01617 	ldw	r11,88(sp)
 8003998:	00841316 	blt	zero,r2,80049e8 <_dtoa_r+0x15e4>
 800399c:	00800044 	movi	r2,1
 80039a0:	12c0670e 	bge	r2,r11,8003b40 <_dtoa_r+0x73c>
 80039a4:	bad7883a 	add	r11,r23,r11
 80039a8:	df001115 	stw	fp,68(sp)
 80039ac:	dc401215 	stw	r17,72(sp)
 80039b0:	5839883a 	mov	fp,r11
 80039b4:	dc401017 	ldw	r17,64(sp)
 80039b8:	00000806 	br	80039dc <_dtoa_r+0x5d8>
 80039bc:	80095c40 	call	80095c4 <__subdf3>
 80039c0:	1009883a 	mov	r4,r2
 80039c4:	180b883a 	mov	r5,r3
 80039c8:	880d883a 	mov	r6,r17
 80039cc:	a80f883a 	mov	r7,r21
 80039d0:	8009c3c0 	call	8009c3c <__ltdf2>
 80039d4:	1003ee16 	blt	r2,zero,8004990 <_dtoa_r+0x158c>
 80039d8:	b703f126 	beq	r22,fp,80049a0 <_dtoa_r+0x159c>
 80039dc:	8809883a 	mov	r4,r17
 80039e0:	a80b883a 	mov	r5,r21
 80039e4:	000d883a 	mov	r6,zero
 80039e8:	01d00934 	movhi	r7,16420
 80039ec:	80096240 	call	8009624 <__muldf3>
 80039f0:	000d883a 	mov	r6,zero
 80039f4:	01d00934 	movhi	r7,16420
 80039f8:	9009883a 	mov	r4,r18
 80039fc:	980b883a 	mov	r5,r19
 8003a00:	1023883a 	mov	r17,r2
 8003a04:	182b883a 	mov	r21,r3
 8003a08:	80096240 	call	8009624 <__muldf3>
 8003a0c:	180b883a 	mov	r5,r3
 8003a10:	1009883a 	mov	r4,r2
 8003a14:	1825883a 	mov	r18,r3
 8003a18:	1027883a 	mov	r19,r2
 8003a1c:	8009d6c0 	call	8009d6c <__fixdfsi>
 8003a20:	1009883a 	mov	r4,r2
 8003a24:	1029883a 	mov	r20,r2
 8003a28:	8009c980 	call	8009c98 <__floatsidf>
 8003a2c:	9809883a 	mov	r4,r19
 8003a30:	900b883a 	mov	r5,r18
 8003a34:	100d883a 	mov	r6,r2
 8003a38:	180f883a 	mov	r7,r3
 8003a3c:	80095c40 	call	80095c4 <__subdf3>
 8003a40:	a5000c04 	addi	r20,r20,48
 8003a44:	b5000005 	stb	r20,0(r22)
 8003a48:	1009883a 	mov	r4,r2
 8003a4c:	180b883a 	mov	r5,r3
 8003a50:	880d883a 	mov	r6,r17
 8003a54:	a80f883a 	mov	r7,r21
 8003a58:	1025883a 	mov	r18,r2
 8003a5c:	1827883a 	mov	r19,r3
 8003a60:	8009c3c0 	call	8009c3c <__ltdf2>
 8003a64:	b5800044 	addi	r22,r22,1
 8003a68:	0009883a 	mov	r4,zero
 8003a6c:	014ffc34 	movhi	r5,16368
 8003a70:	900d883a 	mov	r6,r18
 8003a74:	980f883a 	mov	r7,r19
 8003a78:	103fd00e 	bge	r2,zero,80039bc <_dtoa_r+0x5b8>
 8003a7c:	d9001317 	ldw	r4,76(sp)
 8003a80:	df001117 	ldw	fp,68(sp)
 8003a84:	d9000615 	stw	r4,24(sp)
 8003a88:	8009883a 	mov	r4,r16
 8003a8c:	e00b883a 	mov	r5,fp
 8003a90:	80068c40 	call	80068c4 <_Bfree>
 8003a94:	d9c00617 	ldw	r7,24(sp)
 8003a98:	d8c02217 	ldw	r3,136(sp)
 8003a9c:	d9002417 	ldw	r4,144(sp)
 8003aa0:	b0000005 	stb	zero,0(r22)
 8003aa4:	38800044 	addi	r2,r7,1
 8003aa8:	18800015 	stw	r2,0(r3)
 8003aac:	203e8426 	beq	r4,zero,80034c0 <_dtoa_r+0xbc>
 8003ab0:	25800015 	stw	r22,0(r4)
 8003ab4:	003e8206 	br	80034c0 <_dtoa_r+0xbc>
 8003ab8:	00800434 	movhi	r2,16
 8003abc:	10bfffc4 	addi	r2,r2,-1
 8003ac0:	90a4703a 	and	r18,r18,r2
 8003ac4:	903e901e 	bne	r18,zero,8003508 <_dtoa_r+0x104>
 8003ac8:	05c20074 	movhi	r23,2049
 8003acc:	bdf4e304 	addi	r23,r23,-11380
 8003ad0:	003e8f06 	br	8003510 <_dtoa_r+0x10c>
 8003ad4:	b8800204 	addi	r2,r23,8
 8003ad8:	003e9206 	br	8003524 <_dtoa_r+0x120>
 8003adc:	01400434 	movhi	r5,16
 8003ae0:	297fffc4 	addi	r5,r5,-1
 8003ae4:	894a703a 	and	r5,r17,r5
 8003ae8:	d9000317 	ldw	r4,12(sp)
 8003aec:	294ffc34 	orhi	r5,r5,16368
 8003af0:	a53f0044 	addi	r20,r20,-1023
 8003af4:	dd400217 	ldw	r21,8(sp)
 8003af8:	d8000f15 	stw	zero,60(sp)
 8003afc:	003eb106 	br	80035c4 <_dtoa_r+0x1c0>
 8003b00:	05c20074 	movhi	r23,2049
 8003b04:	bdf4da04 	addi	r23,r23,-11416
 8003b08:	003e6d06 	br	80034c0 <_dtoa_r+0xbc>
 8003b0c:	d8000415 	stw	zero,16(sp)
 8003b10:	80001115 	stw	zero,68(r16)
 8003b14:	8009883a 	mov	r4,r16
 8003b18:	000b883a 	mov	r5,zero
 8003b1c:	800681c0 	call	800681c <_Balloc>
 8003b20:	01ffffc4 	movi	r7,-1
 8003b24:	102f883a 	mov	r23,r2
 8003b28:	80801015 	stw	r2,64(r16)
 8003b2c:	00800044 	movi	r2,1
 8003b30:	d9c00915 	stw	r7,36(sp)
 8003b34:	d8002115 	stw	zero,132(sp)
 8003b38:	d9c00e15 	stw	r7,56(sp)
 8003b3c:	d8800c15 	stw	r2,48(sp)
 8003b40:	d8800117 	ldw	r2,4(sp)
 8003b44:	10008b16 	blt	r2,zero,8003d74 <_dtoa_r+0x970>
 8003b48:	d9000617 	ldw	r4,24(sp)
 8003b4c:	00c00384 	movi	r3,14
 8003b50:	19008816 	blt	r3,r4,8003d74 <_dtoa_r+0x970>
 8003b54:	200490fa 	slli	r2,r4,3
 8003b58:	d9c02117 	ldw	r7,132(sp)
 8003b5c:	00c20074 	movhi	r3,2049
 8003b60:	18f50b04 	addi	r3,r3,-11220
 8003b64:	1885883a 	add	r2,r3,r2
 8003b68:	14800017 	ldw	r18,0(r2)
 8003b6c:	14c00117 	ldw	r19,4(r2)
 8003b70:	3801c916 	blt	r7,zero,8004298 <_dtoa_r+0xe94>
 8003b74:	d9000317 	ldw	r4,12(sp)
 8003b78:	900d883a 	mov	r6,r18
 8003b7c:	980f883a 	mov	r7,r19
 8003b80:	880b883a 	mov	r5,r17
 8003b84:	80099080 	call	8009908 <__divdf3>
 8003b88:	180b883a 	mov	r5,r3
 8003b8c:	1009883a 	mov	r4,r2
 8003b90:	8009d6c0 	call	8009d6c <__fixdfsi>
 8003b94:	1009883a 	mov	r4,r2
 8003b98:	102b883a 	mov	r21,r2
 8003b9c:	8009c980 	call	8009c98 <__floatsidf>
 8003ba0:	1009883a 	mov	r4,r2
 8003ba4:	180b883a 	mov	r5,r3
 8003ba8:	900d883a 	mov	r6,r18
 8003bac:	980f883a 	mov	r7,r19
 8003bb0:	80096240 	call	8009624 <__muldf3>
 8003bb4:	d9000317 	ldw	r4,12(sp)
 8003bb8:	880b883a 	mov	r5,r17
 8003bbc:	100d883a 	mov	r6,r2
 8003bc0:	180f883a 	mov	r7,r3
 8003bc4:	80095c40 	call	80095c4 <__subdf3>
 8003bc8:	d9c00917 	ldw	r7,36(sp)
 8003bcc:	1009883a 	mov	r4,r2
 8003bd0:	a8800c04 	addi	r2,r21,48
 8003bd4:	b8800005 	stb	r2,0(r23)
 8003bd8:	01800044 	movi	r6,1
 8003bdc:	180b883a 	mov	r5,r3
 8003be0:	2005883a 	mov	r2,r4
 8003be4:	bd800044 	addi	r22,r23,1
 8003be8:	39803726 	beq	r7,r6,8003cc8 <_dtoa_r+0x8c4>
 8003bec:	000d883a 	mov	r6,zero
 8003bf0:	01d00934 	movhi	r7,16420
 8003bf4:	80096240 	call	8009624 <__muldf3>
 8003bf8:	1009883a 	mov	r4,r2
 8003bfc:	180b883a 	mov	r5,r3
 8003c00:	000d883a 	mov	r6,zero
 8003c04:	000f883a 	mov	r7,zero
 8003c08:	1029883a 	mov	r20,r2
 8003c0c:	1823883a 	mov	r17,r3
 8003c10:	8009abc0 	call	8009abc <__eqdf2>
 8003c14:	103f9c26 	beq	r2,zero,8003a88 <_dtoa_r+0x684>
 8003c18:	dd400917 	ldw	r21,36(sp)
 8003c1c:	dc000415 	stw	r16,16(sp)
 8003c20:	00000906 	br	8003c48 <_dtoa_r+0x844>
 8003c24:	80096240 	call	8009624 <__muldf3>
 8003c28:	1009883a 	mov	r4,r2
 8003c2c:	180b883a 	mov	r5,r3
 8003c30:	000d883a 	mov	r6,zero
 8003c34:	000f883a 	mov	r7,zero
 8003c38:	1029883a 	mov	r20,r2
 8003c3c:	1823883a 	mov	r17,r3
 8003c40:	8009abc0 	call	8009abc <__eqdf2>
 8003c44:	10022926 	beq	r2,zero,80044ec <_dtoa_r+0x10e8>
 8003c48:	900d883a 	mov	r6,r18
 8003c4c:	980f883a 	mov	r7,r19
 8003c50:	a009883a 	mov	r4,r20
 8003c54:	880b883a 	mov	r5,r17
 8003c58:	80099080 	call	8009908 <__divdf3>
 8003c5c:	180b883a 	mov	r5,r3
 8003c60:	1009883a 	mov	r4,r2
 8003c64:	8009d6c0 	call	8009d6c <__fixdfsi>
 8003c68:	1009883a 	mov	r4,r2
 8003c6c:	1021883a 	mov	r16,r2
 8003c70:	8009c980 	call	8009c98 <__floatsidf>
 8003c74:	1009883a 	mov	r4,r2
 8003c78:	180b883a 	mov	r5,r3
 8003c7c:	900d883a 	mov	r6,r18
 8003c80:	980f883a 	mov	r7,r19
 8003c84:	80096240 	call	8009624 <__muldf3>
 8003c88:	a009883a 	mov	r4,r20
 8003c8c:	880b883a 	mov	r5,r17
 8003c90:	100d883a 	mov	r6,r2
 8003c94:	180f883a 	mov	r7,r3
 8003c98:	80095c40 	call	80095c4 <__subdf3>
 8003c9c:	82400c04 	addi	r9,r16,48
 8003ca0:	b2400005 	stb	r9,0(r22)
 8003ca4:	b5800044 	addi	r22,r22,1
 8003ca8:	b5d3c83a 	sub	r9,r22,r23
 8003cac:	000d883a 	mov	r6,zero
 8003cb0:	01d00934 	movhi	r7,16420
 8003cb4:	1009883a 	mov	r4,r2
 8003cb8:	180b883a 	mov	r5,r3
 8003cbc:	aa7fd91e 	bne	r21,r9,8003c24 <_dtoa_r+0x820>
 8003cc0:	802b883a 	mov	r21,r16
 8003cc4:	dc000417 	ldw	r16,16(sp)
 8003cc8:	1009883a 	mov	r4,r2
 8003ccc:	180b883a 	mov	r5,r3
 8003cd0:	100d883a 	mov	r6,r2
 8003cd4:	180f883a 	mov	r7,r3
 8003cd8:	80095700 	call	8009570 <__adddf3>
 8003cdc:	9009883a 	mov	r4,r18
 8003ce0:	980b883a 	mov	r5,r19
 8003ce4:	100d883a 	mov	r6,r2
 8003ce8:	180f883a 	mov	r7,r3
 8003cec:	1023883a 	mov	r17,r2
 8003cf0:	1829883a 	mov	r20,r3
 8003cf4:	8009c3c0 	call	8009c3c <__ltdf2>
 8003cf8:	10000816 	blt	r2,zero,8003d1c <_dtoa_r+0x918>
 8003cfc:	9009883a 	mov	r4,r18
 8003d00:	980b883a 	mov	r5,r19
 8003d04:	880d883a 	mov	r6,r17
 8003d08:	a00f883a 	mov	r7,r20
 8003d0c:	8009abc0 	call	8009abc <__eqdf2>
 8003d10:	103f5d1e 	bne	r2,zero,8003a88 <_dtoa_r+0x684>
 8003d14:	ad40004c 	andi	r21,r21,1
 8003d18:	a83f5b26 	beq	r21,zero,8003a88 <_dtoa_r+0x684>
 8003d1c:	b53fffc3 	ldbu	r20,-1(r22)
 8003d20:	b0ffff84 	addi	r3,r22,-2
 8003d24:	01400e44 	movi	r5,57
 8003d28:	00000306 	br	8003d38 <_dtoa_r+0x934>
 8003d2c:	1d000003 	ldbu	r20,0(r3)
 8003d30:	102d883a 	mov	r22,r2
 8003d34:	18ffffc4 	addi	r3,r3,-1
 8003d38:	a1003fcc 	andi	r4,r20,255
 8003d3c:	2100201c 	xori	r4,r4,128
 8003d40:	213fe004 	addi	r4,r4,-128
 8003d44:	b0bfffc4 	addi	r2,r22,-1
 8003d48:	2142ca1e 	bne	r4,r5,8004874 <_dtoa_r+0x1470>
 8003d4c:	b8bff71e 	bne	r23,r2,8003d2c <_dtoa_r+0x928>
 8003d50:	d8800617 	ldw	r2,24(sp)
 8003d54:	05000c44 	movi	r20,49
 8003d58:	10800044 	addi	r2,r2,1
 8003d5c:	d8800615 	stw	r2,24(sp)
 8003d60:	00800c04 	movi	r2,48
 8003d64:	b8800005 	stb	r2,0(r23)
 8003d68:	b805883a 	mov	r2,r23
 8003d6c:	15000005 	stb	r20,0(r2)
 8003d70:	003f4506 	br	8003a88 <_dtoa_r+0x684>
 8003d74:	d9c00c17 	ldw	r7,48(sp)
 8003d78:	3800c926 	beq	r7,zero,80040a0 <_dtoa_r+0xc9c>
 8003d7c:	d9c00417 	ldw	r7,16(sp)
 8003d80:	00c00044 	movi	r3,1
 8003d84:	19c16c0e 	bge	r3,r7,8004338 <_dtoa_r+0xf34>
 8003d88:	d9000917 	ldw	r4,36(sp)
 8003d8c:	d9c00a17 	ldw	r7,40(sp)
 8003d90:	24ffffc4 	addi	r19,r4,-1
 8003d94:	3cc20716 	blt	r7,r19,80045b4 <_dtoa_r+0x11b0>
 8003d98:	3ce7c83a 	sub	r19,r7,r19
 8003d9c:	d9c00917 	ldw	r7,36(sp)
 8003da0:	3802ae16 	blt	r7,zero,800485c <_dtoa_r+0x1458>
 8003da4:	dc800817 	ldw	r18,32(sp)
 8003da8:	d8800917 	ldw	r2,36(sp)
 8003dac:	d8c00817 	ldw	r3,32(sp)
 8003db0:	d9c00717 	ldw	r7,28(sp)
 8003db4:	8009883a 	mov	r4,r16
 8003db8:	1887883a 	add	r3,r3,r2
 8003dbc:	388f883a 	add	r7,r7,r2
 8003dc0:	01400044 	movi	r5,1
 8003dc4:	d8c00815 	stw	r3,32(sp)
 8003dc8:	d9c00715 	stw	r7,28(sp)
 8003dcc:	8006c4c0 	call	8006c4c <__i2b>
 8003dd0:	102b883a 	mov	r21,r2
 8003dd4:	90000a26 	beq	r18,zero,8003e00 <_dtoa_r+0x9fc>
 8003dd8:	d8800717 	ldw	r2,28(sp)
 8003ddc:	0080080e 	bge	zero,r2,8003e00 <_dtoa_r+0x9fc>
 8003de0:	90812b16 	blt	r18,r2,8004290 <_dtoa_r+0xe8c>
 8003de4:	d8c00817 	ldw	r3,32(sp)
 8003de8:	d9000717 	ldw	r4,28(sp)
 8003dec:	90a5c83a 	sub	r18,r18,r2
 8003df0:	1887c83a 	sub	r3,r3,r2
 8003df4:	2089c83a 	sub	r4,r4,r2
 8003df8:	d8c00815 	stw	r3,32(sp)
 8003dfc:	d9000715 	stw	r4,28(sp)
 8003e00:	d9c00a17 	ldw	r7,40(sp)
 8003e04:	01c0140e 	bge	zero,r7,8003e58 <_dtoa_r+0xa54>
 8003e08:	d8800c17 	ldw	r2,48(sp)
 8003e0c:	1001de26 	beq	r2,zero,8004588 <_dtoa_r+0x1184>
 8003e10:	04c00e0e 	bge	zero,r19,8003e4c <_dtoa_r+0xa48>
 8003e14:	a80b883a 	mov	r5,r21
 8003e18:	8009883a 	mov	r4,r16
 8003e1c:	980d883a 	mov	r6,r19
 8003e20:	8006ee00 	call	8006ee0 <__pow5mult>
 8003e24:	e00d883a 	mov	r6,fp
 8003e28:	8009883a 	mov	r4,r16
 8003e2c:	100b883a 	mov	r5,r2
 8003e30:	102b883a 	mov	r21,r2
 8003e34:	8006c880 	call	8006c88 <__multiply>
 8003e38:	1029883a 	mov	r20,r2
 8003e3c:	e00b883a 	mov	r5,fp
 8003e40:	8009883a 	mov	r4,r16
 8003e44:	80068c40 	call	80068c4 <_Bfree>
 8003e48:	a039883a 	mov	fp,r20
 8003e4c:	d8c00a17 	ldw	r3,40(sp)
 8003e50:	1ccdc83a 	sub	r6,r3,r19
 8003e54:	3001291e 	bne	r6,zero,80042fc <_dtoa_r+0xef8>
 8003e58:	8009883a 	mov	r4,r16
 8003e5c:	01400044 	movi	r5,1
 8003e60:	8006c4c0 	call	8006c4c <__i2b>
 8003e64:	d9000b17 	ldw	r4,44(sp)
 8003e68:	1029883a 	mov	r20,r2
 8003e6c:	0100050e 	bge	zero,r4,8003e84 <_dtoa_r+0xa80>
 8003e70:	d9800b17 	ldw	r6,44(sp)
 8003e74:	8009883a 	mov	r4,r16
 8003e78:	100b883a 	mov	r5,r2
 8003e7c:	8006ee00 	call	8006ee0 <__pow5mult>
 8003e80:	1029883a 	mov	r20,r2
 8003e84:	d9c00417 	ldw	r7,16(sp)
 8003e88:	00800044 	movi	r2,1
 8003e8c:	11c0f00e 	bge	r2,r7,8004250 <_dtoa_r+0xe4c>
 8003e90:	0023883a 	mov	r17,zero
 8003e94:	d8800b17 	ldw	r2,44(sp)
 8003e98:	1001741e 	bne	r2,zero,800446c <_dtoa_r+0x1068>
 8003e9c:	00800044 	movi	r2,1
 8003ea0:	d8c00717 	ldw	r3,28(sp)
 8003ea4:	10c5883a 	add	r2,r2,r3
 8003ea8:	108007cc 	andi	r2,r2,31
 8003eac:	10008026 	beq	r2,zero,80040b0 <_dtoa_r+0xcac>
 8003eb0:	01000804 	movi	r4,32
 8003eb4:	2089c83a 	sub	r4,r4,r2
 8003eb8:	00c00104 	movi	r3,4
 8003ebc:	1902d00e 	bge	r3,r4,8004a00 <_dtoa_r+0x15fc>
 8003ec0:	d9000817 	ldw	r4,32(sp)
 8003ec4:	d9c00717 	ldw	r7,28(sp)
 8003ec8:	00c00704 	movi	r3,28
 8003ecc:	1885c83a 	sub	r2,r3,r2
 8003ed0:	2089883a 	add	r4,r4,r2
 8003ed4:	388f883a 	add	r7,r7,r2
 8003ed8:	d9000815 	stw	r4,32(sp)
 8003edc:	90a5883a 	add	r18,r18,r2
 8003ee0:	d9c00715 	stw	r7,28(sp)
 8003ee4:	d9c00817 	ldw	r7,32(sp)
 8003ee8:	01c0050e 	bge	zero,r7,8003f00 <_dtoa_r+0xafc>
 8003eec:	e00b883a 	mov	r5,fp
 8003ef0:	8009883a 	mov	r4,r16
 8003ef4:	380d883a 	mov	r6,r7
 8003ef8:	800700c0 	call	800700c <__lshift>
 8003efc:	1039883a 	mov	fp,r2
 8003f00:	d8800717 	ldw	r2,28(sp)
 8003f04:	0080050e 	bge	zero,r2,8003f1c <_dtoa_r+0xb18>
 8003f08:	a00b883a 	mov	r5,r20
 8003f0c:	8009883a 	mov	r4,r16
 8003f10:	100d883a 	mov	r6,r2
 8003f14:	800700c0 	call	800700c <__lshift>
 8003f18:	1029883a 	mov	r20,r2
 8003f1c:	d8c00d17 	ldw	r3,52(sp)
 8003f20:	1801401e 	bne	r3,zero,8004424 <_dtoa_r+0x1020>
 8003f24:	d8800917 	ldw	r2,36(sp)
 8003f28:	00815a0e 	bge	zero,r2,8004494 <_dtoa_r+0x1090>
 8003f2c:	d8c00c17 	ldw	r3,48(sp)
 8003f30:	18006f1e 	bne	r3,zero,80040f0 <_dtoa_r+0xcec>
 8003f34:	b823883a 	mov	r17,r23
 8003f38:	dc800917 	ldw	r18,36(sp)
 8003f3c:	00000206 	br	8003f48 <_dtoa_r+0xb44>
 8003f40:	80068ec0 	call	80068ec <__multadd>
 8003f44:	1039883a 	mov	fp,r2
 8003f48:	e009883a 	mov	r4,fp
 8003f4c:	a00b883a 	mov	r5,r20
 8003f50:	80031c80 	call	80031c8 <quorem>
 8003f54:	10800c04 	addi	r2,r2,48
 8003f58:	88800005 	stb	r2,0(r17)
 8003f5c:	8c400044 	addi	r17,r17,1
 8003f60:	8dc7c83a 	sub	r3,r17,r23
 8003f64:	8009883a 	mov	r4,r16
 8003f68:	e00b883a 	mov	r5,fp
 8003f6c:	01800284 	movi	r6,10
 8003f70:	000f883a 	mov	r7,zero
 8003f74:	1cbff216 	blt	r3,r18,8003f40 <_dtoa_r+0xb3c>
 8003f78:	dd800917 	ldw	r22,36(sp)
 8003f7c:	1007883a 	mov	r3,r2
 8003f80:	05823a0e 	bge	zero,r22,800486c <_dtoa_r+0x1468>
 8003f84:	bdad883a 	add	r22,r23,r22
 8003f88:	0023883a 	mov	r17,zero
 8003f8c:	e00b883a 	mov	r5,fp
 8003f90:	01800044 	movi	r6,1
 8003f94:	8009883a 	mov	r4,r16
 8003f98:	d8c01515 	stw	r3,84(sp)
 8003f9c:	800700c0 	call	800700c <__lshift>
 8003fa0:	1009883a 	mov	r4,r2
 8003fa4:	a00b883a 	mov	r5,r20
 8003fa8:	1039883a 	mov	fp,r2
 8003fac:	80071680 	call	8007168 <__mcmp>
 8003fb0:	d8c01517 	ldw	r3,84(sp)
 8003fb4:	0080d60e 	bge	zero,r2,8004310 <_dtoa_r+0xf0c>
 8003fb8:	b13fffc3 	ldbu	r4,-1(r22)
 8003fbc:	b0ffff84 	addi	r3,r22,-2
 8003fc0:	01800e44 	movi	r6,57
 8003fc4:	00000306 	br	8003fd4 <_dtoa_r+0xbd0>
 8003fc8:	19000003 	ldbu	r4,0(r3)
 8003fcc:	102d883a 	mov	r22,r2
 8003fd0:	18ffffc4 	addi	r3,r3,-1
 8003fd4:	21403fcc 	andi	r5,r4,255
 8003fd8:	2940201c 	xori	r5,r5,128
 8003fdc:	297fe004 	addi	r5,r5,-128
 8003fe0:	b0bfffc4 	addi	r2,r22,-1
 8003fe4:	2981a71e 	bne	r5,r6,8004684 <_dtoa_r+0x1280>
 8003fe8:	b8bff71e 	bne	r23,r2,8003fc8 <_dtoa_r+0xbc4>
 8003fec:	d8800617 	ldw	r2,24(sp)
 8003ff0:	10800044 	addi	r2,r2,1
 8003ff4:	d8800615 	stw	r2,24(sp)
 8003ff8:	00800c44 	movi	r2,49
 8003ffc:	b8800005 	stb	r2,0(r23)
 8004000:	8009883a 	mov	r4,r16
 8004004:	a00b883a 	mov	r5,r20
 8004008:	80068c40 	call	80068c4 <_Bfree>
 800400c:	a83e9e26 	beq	r21,zero,8003a88 <_dtoa_r+0x684>
 8004010:	88000426 	beq	r17,zero,8004024 <_dtoa_r+0xc20>
 8004014:	8d400326 	beq	r17,r21,8004024 <_dtoa_r+0xc20>
 8004018:	8009883a 	mov	r4,r16
 800401c:	880b883a 	mov	r5,r17
 8004020:	80068c40 	call	80068c4 <_Bfree>
 8004024:	8009883a 	mov	r4,r16
 8004028:	a80b883a 	mov	r5,r21
 800402c:	80068c40 	call	80068c4 <_Bfree>
 8004030:	003e9506 	br	8003a88 <_dtoa_r+0x684>
 8004034:	00c00044 	movi	r3,1
 8004038:	d8c00d15 	stw	r3,52(sp)
 800403c:	003d9f06 	br	80036bc <_dtoa_r+0x2b8>
 8004040:	d9000817 	ldw	r4,32(sp)
 8004044:	d8800617 	ldw	r2,24(sp)
 8004048:	d8000b15 	stw	zero,44(sp)
 800404c:	2089c83a 	sub	r4,r4,r2
 8004050:	0087c83a 	sub	r3,zero,r2
 8004054:	d9000815 	stw	r4,32(sp)
 8004058:	d8c00a15 	stw	r3,40(sp)
 800405c:	003da306 	br	80036ec <_dtoa_r+0x2e8>
 8004060:	0529c83a 	sub	r20,zero,r20
 8004064:	dd000815 	stw	r20,32(sp)
 8004068:	d8000715 	stw	zero,28(sp)
 800406c:	003d9806 	br	80036d0 <_dtoa_r+0x2cc>
 8004070:	d9000617 	ldw	r4,24(sp)
 8004074:	8009c980 	call	8009c98 <__floatsidf>
 8004078:	1009883a 	mov	r4,r2
 800407c:	180b883a 	mov	r5,r3
 8004080:	980d883a 	mov	r6,r19
 8004084:	900f883a 	mov	r7,r18
 8004088:	8009b180 	call	8009b18 <__nedf2>
 800408c:	103d7a26 	beq	r2,zero,8003678 <_dtoa_r+0x274>
 8004090:	d8800617 	ldw	r2,24(sp)
 8004094:	10bfffc4 	addi	r2,r2,-1
 8004098:	d8800615 	stw	r2,24(sp)
 800409c:	003d7606 	br	8003678 <_dtoa_r+0x274>
 80040a0:	dcc00a17 	ldw	r19,40(sp)
 80040a4:	dc800817 	ldw	r18,32(sp)
 80040a8:	002b883a 	mov	r21,zero
 80040ac:	003f4906 	br	8003dd4 <_dtoa_r+0x9d0>
 80040b0:	00800704 	movi	r2,28
 80040b4:	d8c00817 	ldw	r3,32(sp)
 80040b8:	d9000717 	ldw	r4,28(sp)
 80040bc:	90a5883a 	add	r18,r18,r2
 80040c0:	1887883a 	add	r3,r3,r2
 80040c4:	2089883a 	add	r4,r4,r2
 80040c8:	d8c00815 	stw	r3,32(sp)
 80040cc:	d9000715 	stw	r4,28(sp)
 80040d0:	003f8406 	br	8003ee4 <_dtoa_r+0xae0>
 80040d4:	d9c00317 	ldw	r7,12(sp)
 80040d8:	013efb84 	movi	r4,-1042
 80040dc:	2509c83a 	sub	r4,r4,r20
 80040e0:	3908983a 	sll	r4,r7,r4
 80040e4:	003d3006 	br	80035a8 <_dtoa_r+0x1a4>
 80040e8:	d8000d15 	stw	zero,52(sp)
 80040ec:	003d7306 	br	80036bc <_dtoa_r+0x2b8>
 80040f0:	0480050e 	bge	zero,r18,8004108 <_dtoa_r+0xd04>
 80040f4:	a80b883a 	mov	r5,r21
 80040f8:	8009883a 	mov	r4,r16
 80040fc:	900d883a 	mov	r6,r18
 8004100:	800700c0 	call	800700c <__lshift>
 8004104:	102b883a 	mov	r21,r2
 8004108:	8801611e 	bne	r17,zero,8004690 <_dtoa_r+0x128c>
 800410c:	a827883a 	mov	r19,r21
 8004110:	d8c00317 	ldw	r3,12(sp)
 8004114:	d9000917 	ldw	r4,36(sp)
 8004118:	b8bfffc4 	addi	r2,r23,-1
 800411c:	18c0004c 	andi	r3,r3,1
 8004120:	1105883a 	add	r2,r2,r4
 8004124:	b825883a 	mov	r18,r23
 8004128:	d8800515 	stw	r2,20(sp)
 800412c:	a823883a 	mov	r17,r21
 8004130:	d8c00315 	stw	r3,12(sp)
 8004134:	ddc00715 	stw	r23,28(sp)
 8004138:	e009883a 	mov	r4,fp
 800413c:	a00b883a 	mov	r5,r20
 8004140:	80031c80 	call	80031c8 <quorem>
 8004144:	e009883a 	mov	r4,fp
 8004148:	880b883a 	mov	r5,r17
 800414c:	102d883a 	mov	r22,r2
 8004150:	80071680 	call	8007168 <__mcmp>
 8004154:	980d883a 	mov	r6,r19
 8004158:	8009883a 	mov	r4,r16
 800415c:	a00b883a 	mov	r5,r20
 8004160:	102b883a 	mov	r21,r2
 8004164:	80071c00 	call	80071c0 <__mdiff>
 8004168:	100d883a 	mov	r6,r2
 800416c:	10800317 	ldw	r2,12(r2)
 8004170:	b5c00c04 	addi	r23,r22,48
 8004174:	10008c26 	beq	r2,zero,80043a8 <_dtoa_r+0xfa4>
 8004178:	8009883a 	mov	r4,r16
 800417c:	300b883a 	mov	r5,r6
 8004180:	80068c40 	call	80068c4 <_Bfree>
 8004184:	00800044 	movi	r2,1
 8004188:	a8007116 	blt	r21,zero,8004350 <_dtoa_r+0xf4c>
 800418c:	a800041e 	bne	r21,zero,80041a0 <_dtoa_r+0xd9c>
 8004190:	d9c00417 	ldw	r7,16(sp)
 8004194:	3800021e 	bne	r7,zero,80041a0 <_dtoa_r+0xd9c>
 8004198:	d8c00317 	ldw	r3,12(sp)
 800419c:	18006c26 	beq	r3,zero,8004350 <_dtoa_r+0xf4c>
 80041a0:	00814c16 	blt	zero,r2,80046d4 <_dtoa_r+0x12d0>
 80041a4:	d8c00517 	ldw	r3,20(sp)
 80041a8:	95400044 	addi	r21,r18,1
 80041ac:	95c00005 	stb	r23,0(r18)
 80041b0:	a82d883a 	mov	r22,r21
 80041b4:	90c14d26 	beq	r18,r3,80046ec <_dtoa_r+0x12e8>
 80041b8:	e00b883a 	mov	r5,fp
 80041bc:	8009883a 	mov	r4,r16
 80041c0:	01800284 	movi	r6,10
 80041c4:	000f883a 	mov	r7,zero
 80041c8:	80068ec0 	call	80068ec <__multadd>
 80041cc:	1039883a 	mov	fp,r2
 80041d0:	8cc08b26 	beq	r17,r19,8004400 <_dtoa_r+0xffc>
 80041d4:	880b883a 	mov	r5,r17
 80041d8:	01800284 	movi	r6,10
 80041dc:	000f883a 	mov	r7,zero
 80041e0:	8009883a 	mov	r4,r16
 80041e4:	80068ec0 	call	80068ec <__multadd>
 80041e8:	980b883a 	mov	r5,r19
 80041ec:	8009883a 	mov	r4,r16
 80041f0:	01800284 	movi	r6,10
 80041f4:	000f883a 	mov	r7,zero
 80041f8:	1023883a 	mov	r17,r2
 80041fc:	80068ec0 	call	80068ec <__multadd>
 8004200:	1027883a 	mov	r19,r2
 8004204:	a825883a 	mov	r18,r21
 8004208:	003fcb06 	br	8004138 <_dtoa_r+0xd34>
 800420c:	d9c00417 	ldw	r7,16(sp)
 8004210:	00800104 	movi	r2,4
 8004214:	3880e426 	beq	r7,r2,80045a8 <_dtoa_r+0x11a4>
 8004218:	00800144 	movi	r2,5
 800421c:	38be3c1e 	bne	r7,r2,8003b10 <_dtoa_r+0x70c>
 8004220:	00c00044 	movi	r3,1
 8004224:	d8c00c15 	stw	r3,48(sp)
 8004228:	d9c02117 	ldw	r7,132(sp)
 800422c:	d8800617 	ldw	r2,24(sp)
 8004230:	388f883a 	add	r7,r7,r2
 8004234:	3c800044 	addi	r18,r7,1
 8004238:	d9c00e15 	stw	r7,56(sp)
 800423c:	dc800915 	stw	r18,36(sp)
 8004240:	04bd3e16 	blt	zero,r18,800373c <_dtoa_r+0x338>
 8004244:	80001115 	stw	zero,68(r16)
 8004248:	000b883a 	mov	r5,zero
 800424c:	003d4606 	br	8003768 <_dtoa_r+0x364>
 8004250:	d8c00317 	ldw	r3,12(sp)
 8004254:	183f0e1e 	bne	r3,zero,8003e90 <_dtoa_r+0xa8c>
 8004258:	00c00434 	movhi	r3,16
 800425c:	18ffffc4 	addi	r3,r3,-1
 8004260:	88c6703a 	and	r3,r17,r3
 8004264:	183f0a1e 	bne	r3,zero,8003e90 <_dtoa_r+0xa8c>
 8004268:	8c5ffc2c 	andhi	r17,r17,32752
 800426c:	883f0826 	beq	r17,zero,8003e90 <_dtoa_r+0xa8c>
 8004270:	d9000817 	ldw	r4,32(sp)
 8004274:	d9c00717 	ldw	r7,28(sp)
 8004278:	1023883a 	mov	r17,r2
 800427c:	2089883a 	add	r4,r4,r2
 8004280:	388f883a 	add	r7,r7,r2
 8004284:	d9000815 	stw	r4,32(sp)
 8004288:	d9c00715 	stw	r7,28(sp)
 800428c:	003f0106 	br	8003e94 <_dtoa_r+0xa90>
 8004290:	9005883a 	mov	r2,r18
 8004294:	003ed306 	br	8003de4 <_dtoa_r+0x9e0>
 8004298:	d8800917 	ldw	r2,36(sp)
 800429c:	00be3516 	blt	zero,r2,8003b74 <_dtoa_r+0x770>
 80042a0:	1000b61e 	bne	r2,zero,800457c <_dtoa_r+0x1178>
 80042a4:	9009883a 	mov	r4,r18
 80042a8:	980b883a 	mov	r5,r19
 80042ac:	000d883a 	mov	r6,zero
 80042b0:	01d00534 	movhi	r7,16404
 80042b4:	80096240 	call	8009624 <__muldf3>
 80042b8:	d9800317 	ldw	r6,12(sp)
 80042bc:	1009883a 	mov	r4,r2
 80042c0:	180b883a 	mov	r5,r3
 80042c4:	880f883a 	mov	r7,r17
 80042c8:	8009bd80 	call	8009bd8 <__gedf2>
 80042cc:	0029883a 	mov	r20,zero
 80042d0:	002b883a 	mov	r21,zero
 80042d4:	10007e16 	blt	r2,zero,80044d0 <_dtoa_r+0x10cc>
 80042d8:	d8802117 	ldw	r2,132(sp)
 80042dc:	b82d883a 	mov	r22,r23
 80042e0:	0084303a 	nor	r2,zero,r2
 80042e4:	d8800615 	stw	r2,24(sp)
 80042e8:	8009883a 	mov	r4,r16
 80042ec:	a00b883a 	mov	r5,r20
 80042f0:	80068c40 	call	80068c4 <_Bfree>
 80042f4:	a83f4b1e 	bne	r21,zero,8004024 <_dtoa_r+0xc20>
 80042f8:	003de306 	br	8003a88 <_dtoa_r+0x684>
 80042fc:	e00b883a 	mov	r5,fp
 8004300:	8009883a 	mov	r4,r16
 8004304:	8006ee00 	call	8006ee0 <__pow5mult>
 8004308:	1039883a 	mov	fp,r2
 800430c:	003ed206 	br	8003e58 <_dtoa_r+0xa54>
 8004310:	1000021e 	bne	r2,zero,800431c <_dtoa_r+0xf18>
 8004314:	18c0004c 	andi	r3,r3,1
 8004318:	183f271e 	bne	r3,zero,8003fb8 <_dtoa_r+0xbb4>
 800431c:	01000c04 	movi	r4,48
 8004320:	00000106 	br	8004328 <_dtoa_r+0xf24>
 8004324:	102d883a 	mov	r22,r2
 8004328:	b0bfffc4 	addi	r2,r22,-1
 800432c:	10c00007 	ldb	r3,0(r2)
 8004330:	193ffc26 	beq	r3,r4,8004324 <_dtoa_r+0xf20>
 8004334:	003f3206 	br	8004000 <_dtoa_r+0xbfc>
 8004338:	d8c00f17 	ldw	r3,60(sp)
 800433c:	18015026 	beq	r3,zero,8004880 <_dtoa_r+0x147c>
 8004340:	10810cc4 	addi	r2,r2,1075
 8004344:	dcc00a17 	ldw	r19,40(sp)
 8004348:	dc800817 	ldw	r18,32(sp)
 800434c:	003e9706 	br	8003dac <_dtoa_r+0x9a8>
 8004350:	b807883a 	mov	r3,r23
 8004354:	182b883a 	mov	r21,r3
 8004358:	ddc00717 	ldw	r23,28(sp)
 800435c:	00800e0e 	bge	zero,r2,8004398 <_dtoa_r+0xf94>
 8004360:	e00b883a 	mov	r5,fp
 8004364:	01800044 	movi	r6,1
 8004368:	8009883a 	mov	r4,r16
 800436c:	d8c01515 	stw	r3,84(sp)
 8004370:	800700c0 	call	800700c <__lshift>
 8004374:	1009883a 	mov	r4,r2
 8004378:	a00b883a 	mov	r5,r20
 800437c:	1039883a 	mov	fp,r2
 8004380:	80071680 	call	8007168 <__mcmp>
 8004384:	d8c01517 	ldw	r3,84(sp)
 8004388:	0081880e 	bge	zero,r2,80049ac <_dtoa_r+0x15a8>
 800438c:	00800e44 	movi	r2,57
 8004390:	b0c00c44 	addi	r3,r22,49
 8004394:	a8816326 	beq	r21,r2,8004924 <_dtoa_r+0x1520>
 8004398:	90c00005 	stb	r3,0(r18)
 800439c:	95800044 	addi	r22,r18,1
 80043a0:	982b883a 	mov	r21,r19
 80043a4:	003f1606 	br	8004000 <_dtoa_r+0xbfc>
 80043a8:	300b883a 	mov	r5,r6
 80043ac:	e009883a 	mov	r4,fp
 80043b0:	d9801515 	stw	r6,84(sp)
 80043b4:	80071680 	call	8007168 <__mcmp>
 80043b8:	d9801517 	ldw	r6,84(sp)
 80043bc:	8009883a 	mov	r4,r16
 80043c0:	d8801515 	stw	r2,84(sp)
 80043c4:	300b883a 	mov	r5,r6
 80043c8:	80068c40 	call	80068c4 <_Bfree>
 80043cc:	d8801517 	ldw	r2,84(sp)
 80043d0:	103f6d1e 	bne	r2,zero,8004188 <_dtoa_r+0xd84>
 80043d4:	d9c00417 	ldw	r7,16(sp)
 80043d8:	383f6b1e 	bne	r7,zero,8004188 <_dtoa_r+0xd84>
 80043dc:	d8c00317 	ldw	r3,12(sp)
 80043e0:	183f691e 	bne	r3,zero,8004188 <_dtoa_r+0xd84>
 80043e4:	b807883a 	mov	r3,r23
 80043e8:	00800e44 	movi	r2,57
 80043ec:	ddc00717 	ldw	r23,28(sp)
 80043f0:	18814c26 	beq	r3,r2,8004924 <_dtoa_r+0x1520>
 80043f4:	057fe80e 	bge	zero,r21,8004398 <_dtoa_r+0xf94>
 80043f8:	b0c00c44 	addi	r3,r22,49
 80043fc:	003fe606 	br	8004398 <_dtoa_r+0xf94>
 8004400:	880b883a 	mov	r5,r17
 8004404:	8009883a 	mov	r4,r16
 8004408:	01800284 	movi	r6,10
 800440c:	000f883a 	mov	r7,zero
 8004410:	80068ec0 	call	80068ec <__multadd>
 8004414:	1023883a 	mov	r17,r2
 8004418:	1027883a 	mov	r19,r2
 800441c:	a825883a 	mov	r18,r21
 8004420:	003f4506 	br	8004138 <_dtoa_r+0xd34>
 8004424:	e009883a 	mov	r4,fp
 8004428:	a00b883a 	mov	r5,r20
 800442c:	80071680 	call	8007168 <__mcmp>
 8004430:	103ebc0e 	bge	r2,zero,8003f24 <_dtoa_r+0xb20>
 8004434:	e00b883a 	mov	r5,fp
 8004438:	8009883a 	mov	r4,r16
 800443c:	01800284 	movi	r6,10
 8004440:	000f883a 	mov	r7,zero
 8004444:	80068ec0 	call	80068ec <__multadd>
 8004448:	1039883a 	mov	fp,r2
 800444c:	d8800617 	ldw	r2,24(sp)
 8004450:	d8c00c17 	ldw	r3,48(sp)
 8004454:	10bfffc4 	addi	r2,r2,-1
 8004458:	d8800615 	stw	r2,24(sp)
 800445c:	1801571e 	bne	r3,zero,80049bc <_dtoa_r+0x15b8>
 8004460:	d9c00e17 	ldw	r7,56(sp)
 8004464:	d9c00915 	stw	r7,36(sp)
 8004468:	003eae06 	br	8003f24 <_dtoa_r+0xb20>
 800446c:	a0800417 	ldw	r2,16(r20)
 8004470:	10800104 	addi	r2,r2,4
 8004474:	1085883a 	add	r2,r2,r2
 8004478:	1085883a 	add	r2,r2,r2
 800447c:	a085883a 	add	r2,r20,r2
 8004480:	11000017 	ldw	r4,0(r2)
 8004484:	8006b340 	call	8006b34 <__hi0bits>
 8004488:	00c00804 	movi	r3,32
 800448c:	1885c83a 	sub	r2,r3,r2
 8004490:	003e8306 	br	8003ea0 <_dtoa_r+0xa9c>
 8004494:	d9c00417 	ldw	r7,16(sp)
 8004498:	00800084 	movi	r2,2
 800449c:	11fea30e 	bge	r2,r7,8003f2c <_dtoa_r+0xb28>
 80044a0:	d8800917 	ldw	r2,36(sp)
 80044a4:	103f8c1e 	bne	r2,zero,80042d8 <_dtoa_r+0xed4>
 80044a8:	a00b883a 	mov	r5,r20
 80044ac:	8009883a 	mov	r4,r16
 80044b0:	01800144 	movi	r6,5
 80044b4:	000f883a 	mov	r7,zero
 80044b8:	80068ec0 	call	80068ec <__multadd>
 80044bc:	e009883a 	mov	r4,fp
 80044c0:	100b883a 	mov	r5,r2
 80044c4:	1029883a 	mov	r20,r2
 80044c8:	80071680 	call	8007168 <__mcmp>
 80044cc:	00bf820e 	bge	zero,r2,80042d8 <_dtoa_r+0xed4>
 80044d0:	00800c44 	movi	r2,49
 80044d4:	b8800005 	stb	r2,0(r23)
 80044d8:	d8800617 	ldw	r2,24(sp)
 80044dc:	bd800044 	addi	r22,r23,1
 80044e0:	10800044 	addi	r2,r2,1
 80044e4:	d8800615 	stw	r2,24(sp)
 80044e8:	003f7f06 	br	80042e8 <_dtoa_r+0xee4>
 80044ec:	dc000417 	ldw	r16,16(sp)
 80044f0:	003d6506 	br	8003a88 <_dtoa_r+0x684>
 80044f4:	9009883a 	mov	r4,r18
 80044f8:	8009c980 	call	8009c98 <__floatsidf>
 80044fc:	1009883a 	mov	r4,r2
 8004500:	180b883a 	mov	r5,r3
 8004504:	980d883a 	mov	r6,r19
 8004508:	a00f883a 	mov	r7,r20
 800450c:	80096240 	call	8009624 <__muldf3>
 8004510:	1009883a 	mov	r4,r2
 8004514:	180b883a 	mov	r5,r3
 8004518:	000d883a 	mov	r6,zero
 800451c:	01d00734 	movhi	r7,16412
 8004520:	80095700 	call	8009570 <__adddf3>
 8004524:	057f3034 	movhi	r21,64704
 8004528:	1025883a 	mov	r18,r2
 800452c:	1d6b883a 	add	r21,r3,r21
 8004530:	9809883a 	mov	r4,r19
 8004534:	a00b883a 	mov	r5,r20
 8004538:	000d883a 	mov	r6,zero
 800453c:	01d00534 	movhi	r7,16404
 8004540:	80095c40 	call	80095c4 <__subdf3>
 8004544:	1009883a 	mov	r4,r2
 8004548:	180b883a 	mov	r5,r3
 800454c:	900d883a 	mov	r6,r18
 8004550:	a80f883a 	mov	r7,r21
 8004554:	1027883a 	mov	r19,r2
 8004558:	1829883a 	mov	r20,r3
 800455c:	8009b740 	call	8009b74 <__gtdf2>
 8004560:	00806616 	blt	zero,r2,80046fc <_dtoa_r+0x12f8>
 8004564:	a9e0003c 	xorhi	r7,r21,32768
 8004568:	9809883a 	mov	r4,r19
 800456c:	a00b883a 	mov	r5,r20
 8004570:	900d883a 	mov	r6,r18
 8004574:	8009c3c0 	call	8009c3c <__ltdf2>
 8004578:	103d710e 	bge	r2,zero,8003b40 <_dtoa_r+0x73c>
 800457c:	0029883a 	mov	r20,zero
 8004580:	002b883a 	mov	r21,zero
 8004584:	003f5406 	br	80042d8 <_dtoa_r+0xed4>
 8004588:	d9800a17 	ldw	r6,40(sp)
 800458c:	e00b883a 	mov	r5,fp
 8004590:	8009883a 	mov	r4,r16
 8004594:	8006ee00 	call	8006ee0 <__pow5mult>
 8004598:	1039883a 	mov	fp,r2
 800459c:	003e2e06 	br	8003e58 <_dtoa_r+0xa54>
 80045a0:	d8000c15 	stw	zero,48(sp)
 80045a4:	003f2006 	br	8004228 <_dtoa_r+0xe24>
 80045a8:	00800044 	movi	r2,1
 80045ac:	d8800c15 	stw	r2,48(sp)
 80045b0:	003c5d06 	br	8003728 <_dtoa_r+0x324>
 80045b4:	d8c00a17 	ldw	r3,40(sp)
 80045b8:	d9000b17 	ldw	r4,44(sp)
 80045bc:	dcc00a15 	stw	r19,40(sp)
 80045c0:	98c5c83a 	sub	r2,r19,r3
 80045c4:	2089883a 	add	r4,r4,r2
 80045c8:	d9000b15 	stw	r4,44(sp)
 80045cc:	0027883a 	mov	r19,zero
 80045d0:	003df206 	br	8003d9c <_dtoa_r+0x998>
 80045d4:	d9000317 	ldw	r4,12(sp)
 80045d8:	8829883a 	mov	r20,r17
 80045dc:	04800084 	movi	r18,2
 80045e0:	d9001015 	stw	r4,64(sp)
 80045e4:	003c8106 	br	80037ec <_dtoa_r+0x3e8>
 80045e8:	04800044 	movi	r18,1
 80045ec:	dc800e15 	stw	r18,56(sp)
 80045f0:	dc800915 	stw	r18,36(sp)
 80045f4:	dc802115 	stw	r18,132(sp)
 80045f8:	003f1206 	br	8004244 <_dtoa_r+0xe40>
 80045fc:	d8800617 	ldw	r2,24(sp)
 8004600:	00abc83a 	sub	r21,zero,r2
 8004604:	a800a426 	beq	r21,zero,8004898 <_dtoa_r+0x1494>
 8004608:	a88003cc 	andi	r2,r21,15
 800460c:	100490fa 	slli	r2,r2,3
 8004610:	00c20074 	movhi	r3,2049
 8004614:	18f50b04 	addi	r3,r3,-11220
 8004618:	d9000317 	ldw	r4,12(sp)
 800461c:	1885883a 	add	r2,r3,r2
 8004620:	11800017 	ldw	r6,0(r2)
 8004624:	11c00117 	ldw	r7,4(r2)
 8004628:	a82bd13a 	srai	r21,r21,4
 800462c:	880b883a 	mov	r5,r17
 8004630:	80096240 	call	8009624 <__muldf3>
 8004634:	1027883a 	mov	r19,r2
 8004638:	1829883a 	mov	r20,r3
 800463c:	a800e826 	beq	r21,zero,80049e0 <_dtoa_r+0x15dc>
 8004640:	05820074 	movhi	r22,2049
 8004644:	b5b50104 	addi	r22,r22,-11260
 8004648:	04800084 	movi	r18,2
 800464c:	a980004c 	andi	r6,r21,1
 8004650:	1009883a 	mov	r4,r2
 8004654:	a82bd07a 	srai	r21,r21,1
 8004658:	180b883a 	mov	r5,r3
 800465c:	30000426 	beq	r6,zero,8004670 <_dtoa_r+0x126c>
 8004660:	b1800017 	ldw	r6,0(r22)
 8004664:	b1c00117 	ldw	r7,4(r22)
 8004668:	94800044 	addi	r18,r18,1
 800466c:	80096240 	call	8009624 <__muldf3>
 8004670:	b5800204 	addi	r22,r22,8
 8004674:	a83ff51e 	bne	r21,zero,800464c <_dtoa_r+0x1248>
 8004678:	1027883a 	mov	r19,r2
 800467c:	1829883a 	mov	r20,r3
 8004680:	003c7306 	br	8003850 <_dtoa_r+0x44c>
 8004684:	21000044 	addi	r4,r4,1
 8004688:	11000005 	stb	r4,0(r2)
 800468c:	003e5c06 	br	8004000 <_dtoa_r+0xbfc>
 8004690:	a9400117 	ldw	r5,4(r21)
 8004694:	8009883a 	mov	r4,r16
 8004698:	800681c0 	call	800681c <_Balloc>
 800469c:	a9800417 	ldw	r6,16(r21)
 80046a0:	11000304 	addi	r4,r2,12
 80046a4:	a9400304 	addi	r5,r21,12
 80046a8:	31800084 	addi	r6,r6,2
 80046ac:	318d883a 	add	r6,r6,r6
 80046b0:	318d883a 	add	r6,r6,r6
 80046b4:	1023883a 	mov	r17,r2
 80046b8:	80064740 	call	8006474 <memcpy>
 80046bc:	8009883a 	mov	r4,r16
 80046c0:	880b883a 	mov	r5,r17
 80046c4:	01800044 	movi	r6,1
 80046c8:	800700c0 	call	800700c <__lshift>
 80046cc:	1027883a 	mov	r19,r2
 80046d0:	003e8f06 	br	8004110 <_dtoa_r+0xd0c>
 80046d4:	b807883a 	mov	r3,r23
 80046d8:	00800e44 	movi	r2,57
 80046dc:	ddc00717 	ldw	r23,28(sp)
 80046e0:	18809026 	beq	r3,r2,8004924 <_dtoa_r+0x1520>
 80046e4:	18c00044 	addi	r3,r3,1
 80046e8:	003f2b06 	br	8004398 <_dtoa_r+0xf94>
 80046ec:	b807883a 	mov	r3,r23
 80046f0:	982b883a 	mov	r21,r19
 80046f4:	ddc00717 	ldw	r23,28(sp)
 80046f8:	003e2406 	br	8003f8c <_dtoa_r+0xb88>
 80046fc:	0029883a 	mov	r20,zero
 8004700:	002b883a 	mov	r21,zero
 8004704:	003f7206 	br	80044d0 <_dtoa_r+0x10cc>
 8004708:	593fffc4 	addi	r4,r11,-1
 800470c:	200490fa 	slli	r2,r4,3
 8004710:	00c20074 	movhi	r3,2049
 8004714:	18f50b04 	addi	r3,r3,-11220
 8004718:	d9001015 	stw	r4,64(sp)
 800471c:	1885883a 	add	r2,r3,r2
 8004720:	11000017 	ldw	r4,0(r2)
 8004724:	11400117 	ldw	r5,4(r2)
 8004728:	900d883a 	mov	r6,r18
 800472c:	a80f883a 	mov	r7,r21
 8004730:	dac01615 	stw	r11,88(sp)
 8004734:	80096240 	call	8009624 <__muldf3>
 8004738:	a00b883a 	mov	r5,r20
 800473c:	9809883a 	mov	r4,r19
 8004740:	d8c01215 	stw	r3,72(sp)
 8004744:	d8801115 	stw	r2,68(sp)
 8004748:	8009d6c0 	call	8009d6c <__fixdfsi>
 800474c:	1009883a 	mov	r4,r2
 8004750:	1025883a 	mov	r18,r2
 8004754:	8009c980 	call	8009c98 <__floatsidf>
 8004758:	9809883a 	mov	r4,r19
 800475c:	a00b883a 	mov	r5,r20
 8004760:	100d883a 	mov	r6,r2
 8004764:	180f883a 	mov	r7,r3
 8004768:	94800c04 	addi	r18,r18,48
 800476c:	80095c40 	call	80095c4 <__subdf3>
 8004770:	bc800005 	stb	r18,0(r23)
 8004774:	dac01617 	ldw	r11,88(sp)
 8004778:	102b883a 	mov	r21,r2
 800477c:	00800044 	movi	r2,1
 8004780:	bd800044 	addi	r22,r23,1
 8004784:	1815883a 	mov	r10,r3
 8004788:	58802226 	beq	r11,r2,8004814 <_dtoa_r+0x1410>
 800478c:	bad7883a 	add	r11,r23,r11
 8004790:	dc001415 	stw	r16,80(sp)
 8004794:	a805883a 	mov	r2,r21
 8004798:	b027883a 	mov	r19,r22
 800479c:	5821883a 	mov	r16,r11
 80047a0:	882b883a 	mov	r21,r17
 80047a4:	000d883a 	mov	r6,zero
 80047a8:	01d00934 	movhi	r7,16420
 80047ac:	1009883a 	mov	r4,r2
 80047b0:	180b883a 	mov	r5,r3
 80047b4:	80096240 	call	8009624 <__muldf3>
 80047b8:	180b883a 	mov	r5,r3
 80047bc:	1009883a 	mov	r4,r2
 80047c0:	1829883a 	mov	r20,r3
 80047c4:	1023883a 	mov	r17,r2
 80047c8:	8009d6c0 	call	8009d6c <__fixdfsi>
 80047cc:	1009883a 	mov	r4,r2
 80047d0:	1025883a 	mov	r18,r2
 80047d4:	8009c980 	call	8009c98 <__floatsidf>
 80047d8:	8809883a 	mov	r4,r17
 80047dc:	a00b883a 	mov	r5,r20
 80047e0:	100d883a 	mov	r6,r2
 80047e4:	180f883a 	mov	r7,r3
 80047e8:	94800c04 	addi	r18,r18,48
 80047ec:	80095c40 	call	80095c4 <__subdf3>
 80047f0:	9cc00044 	addi	r19,r19,1
 80047f4:	9cbfffc5 	stb	r18,-1(r19)
 80047f8:	9c3fea1e 	bne	r19,r16,80047a4 <_dtoa_r+0x13a0>
 80047fc:	1815883a 	mov	r10,r3
 8004800:	d8c01017 	ldw	r3,64(sp)
 8004804:	dc001417 	ldw	r16,80(sp)
 8004808:	a823883a 	mov	r17,r21
 800480c:	b0ed883a 	add	r22,r22,r3
 8004810:	102b883a 	mov	r21,r2
 8004814:	d9001117 	ldw	r4,68(sp)
 8004818:	d9401217 	ldw	r5,72(sp)
 800481c:	000d883a 	mov	r6,zero
 8004820:	01cff834 	movhi	r7,16352
 8004824:	da801515 	stw	r10,84(sp)
 8004828:	80095700 	call	8009570 <__adddf3>
 800482c:	da801517 	ldw	r10,84(sp)
 8004830:	1009883a 	mov	r4,r2
 8004834:	180b883a 	mov	r5,r3
 8004838:	500f883a 	mov	r7,r10
 800483c:	a80d883a 	mov	r6,r21
 8004840:	8009c3c0 	call	8009c3c <__ltdf2>
 8004844:	da801517 	ldw	r10,84(sp)
 8004848:	10003b0e 	bge	r2,zero,8004938 <_dtoa_r+0x1534>
 800484c:	d9c01317 	ldw	r7,76(sp)
 8004850:	b53fffc3 	ldbu	r20,-1(r22)
 8004854:	d9c00615 	stw	r7,24(sp)
 8004858:	003d3106 	br	8003d20 <_dtoa_r+0x91c>
 800485c:	d8800817 	ldw	r2,32(sp)
 8004860:	11e5c83a 	sub	r18,r2,r7
 8004864:	0005883a 	mov	r2,zero
 8004868:	003d5006 	br	8003dac <_dtoa_r+0x9a8>
 800486c:	05800044 	movi	r22,1
 8004870:	003dc406 	br	8003f84 <_dtoa_r+0xb80>
 8004874:	a5000044 	addi	r20,r20,1
 8004878:	15000005 	stb	r20,0(r2)
 800487c:	003c8206 	br	8003a88 <_dtoa_r+0x684>
 8004880:	d8800217 	ldw	r2,8(sp)
 8004884:	00c00d84 	movi	r3,54
 8004888:	dcc00a17 	ldw	r19,40(sp)
 800488c:	1885c83a 	sub	r2,r3,r2
 8004890:	dc800817 	ldw	r18,32(sp)
 8004894:	003d4506 	br	8003dac <_dtoa_r+0x9a8>
 8004898:	dcc00317 	ldw	r19,12(sp)
 800489c:	8829883a 	mov	r20,r17
 80048a0:	04800084 	movi	r18,2
 80048a4:	003bea06 	br	8003850 <_dtoa_r+0x44c>
 80048a8:	d9000917 	ldw	r4,36(sp)
 80048ac:	203f1126 	beq	r4,zero,80044f4 <_dtoa_r+0x10f0>
 80048b0:	d9c00e17 	ldw	r7,56(sp)
 80048b4:	01fca20e 	bge	zero,r7,8003b40 <_dtoa_r+0x73c>
 80048b8:	a00b883a 	mov	r5,r20
 80048bc:	9809883a 	mov	r4,r19
 80048c0:	000d883a 	mov	r6,zero
 80048c4:	01d00934 	movhi	r7,16420
 80048c8:	80096240 	call	8009624 <__muldf3>
 80048cc:	91000044 	addi	r4,r18,1
 80048d0:	1027883a 	mov	r19,r2
 80048d4:	1829883a 	mov	r20,r3
 80048d8:	8009c980 	call	8009c98 <__floatsidf>
 80048dc:	9809883a 	mov	r4,r19
 80048e0:	a00b883a 	mov	r5,r20
 80048e4:	100d883a 	mov	r6,r2
 80048e8:	180f883a 	mov	r7,r3
 80048ec:	80096240 	call	8009624 <__muldf3>
 80048f0:	1009883a 	mov	r4,r2
 80048f4:	180b883a 	mov	r5,r3
 80048f8:	000d883a 	mov	r6,zero
 80048fc:	01d00734 	movhi	r7,16412
 8004900:	80095700 	call	8009570 <__adddf3>
 8004904:	1025883a 	mov	r18,r2
 8004908:	d8800617 	ldw	r2,24(sp)
 800490c:	057f3034 	movhi	r21,64704
 8004910:	1d6b883a 	add	r21,r3,r21
 8004914:	10bfffc4 	addi	r2,r2,-1
 8004918:	d8801315 	stw	r2,76(sp)
 800491c:	dac00e17 	ldw	r11,56(sp)
 8004920:	003be706 	br	80038c0 <_dtoa_r+0x4bc>
 8004924:	01000e44 	movi	r4,57
 8004928:	91000005 	stb	r4,0(r18)
 800492c:	95800044 	addi	r22,r18,1
 8004930:	982b883a 	mov	r21,r19
 8004934:	003da106 	br	8003fbc <_dtoa_r+0xbb8>
 8004938:	d9801117 	ldw	r6,68(sp)
 800493c:	d9c01217 	ldw	r7,72(sp)
 8004940:	0009883a 	mov	r4,zero
 8004944:	014ff834 	movhi	r5,16352
 8004948:	da801515 	stw	r10,84(sp)
 800494c:	80095c40 	call	80095c4 <__subdf3>
 8004950:	da801517 	ldw	r10,84(sp)
 8004954:	1009883a 	mov	r4,r2
 8004958:	180b883a 	mov	r5,r3
 800495c:	a80d883a 	mov	r6,r21
 8004960:	500f883a 	mov	r7,r10
 8004964:	8009b740 	call	8009b74 <__gtdf2>
 8004968:	00bc750e 	bge	zero,r2,8003b40 <_dtoa_r+0x73c>
 800496c:	01000c04 	movi	r4,48
 8004970:	00000106 	br	8004978 <_dtoa_r+0x1574>
 8004974:	102d883a 	mov	r22,r2
 8004978:	b0bfffc4 	addi	r2,r22,-1
 800497c:	10c00007 	ldb	r3,0(r2)
 8004980:	193ffc26 	beq	r3,r4,8004974 <_dtoa_r+0x1570>
 8004984:	d8801317 	ldw	r2,76(sp)
 8004988:	d8800615 	stw	r2,24(sp)
 800498c:	003c3e06 	br	8003a88 <_dtoa_r+0x684>
 8004990:	d9001317 	ldw	r4,76(sp)
 8004994:	df001117 	ldw	fp,68(sp)
 8004998:	d9000615 	stw	r4,24(sp)
 800499c:	003ce006 	br	8003d20 <_dtoa_r+0x91c>
 80049a0:	df001117 	ldw	fp,68(sp)
 80049a4:	dc401217 	ldw	r17,72(sp)
 80049a8:	003c6506 	br	8003b40 <_dtoa_r+0x73c>
 80049ac:	103e7a1e 	bne	r2,zero,8004398 <_dtoa_r+0xf94>
 80049b0:	1880004c 	andi	r2,r3,1
 80049b4:	103e7826 	beq	r2,zero,8004398 <_dtoa_r+0xf94>
 80049b8:	003e7406 	br	800438c <_dtoa_r+0xf88>
 80049bc:	8009883a 	mov	r4,r16
 80049c0:	a80b883a 	mov	r5,r21
 80049c4:	01800284 	movi	r6,10
 80049c8:	000f883a 	mov	r7,zero
 80049cc:	80068ec0 	call	80068ec <__multadd>
 80049d0:	d9000e17 	ldw	r4,56(sp)
 80049d4:	102b883a 	mov	r21,r2
 80049d8:	d9000915 	stw	r4,36(sp)
 80049dc:	003d5106 	br	8003f24 <_dtoa_r+0xb20>
 80049e0:	04800084 	movi	r18,2
 80049e4:	003b9a06 	br	8003850 <_dtoa_r+0x44c>
 80049e8:	d8c01317 	ldw	r3,76(sp)
 80049ec:	d8c00615 	stw	r3,24(sp)
 80049f0:	003ccb06 	br	8003d20 <_dtoa_r+0x91c>
 80049f4:	d8c01317 	ldw	r3,76(sp)
 80049f8:	d8c00615 	stw	r3,24(sp)
 80049fc:	003c2206 	br	8003a88 <_dtoa_r+0x684>
 8004a00:	20fd3826 	beq	r4,r3,8003ee4 <_dtoa_r+0xae0>
 8004a04:	00c00f04 	movi	r3,60
 8004a08:	1885c83a 	sub	r2,r3,r2
 8004a0c:	003da906 	br	80040b4 <_dtoa_r+0xcb0>
 8004a10:	000b883a 	mov	r5,zero
 8004a14:	003b5406 	br	8003768 <_dtoa_r+0x364>
 8004a18:	04c00044 	movi	r19,1
 8004a1c:	003b3b06 	br	800370c <_dtoa_r+0x308>

08004a20 <_fflush_r>:
 8004a20:	defffb04 	addi	sp,sp,-20
 8004a24:	dcc00315 	stw	r19,12(sp)
 8004a28:	dc400115 	stw	r17,4(sp)
 8004a2c:	dfc00415 	stw	ra,16(sp)
 8004a30:	dc800215 	stw	r18,8(sp)
 8004a34:	dc000015 	stw	r16,0(sp)
 8004a38:	2027883a 	mov	r19,r4
 8004a3c:	2823883a 	mov	r17,r5
 8004a40:	20000226 	beq	r4,zero,8004a4c <_fflush_r+0x2c>
 8004a44:	20800e17 	ldw	r2,56(r4)
 8004a48:	10005726 	beq	r2,zero,8004ba8 <_fflush_r+0x188>
 8004a4c:	8880030b 	ldhu	r2,12(r17)
 8004a50:	10c0020c 	andi	r3,r2,8
 8004a54:	18ffffcc 	andi	r3,r3,65535
 8004a58:	18e0001c 	xori	r3,r3,32768
 8004a5c:	18e00004 	addi	r3,r3,-32768
 8004a60:	1800311e 	bne	r3,zero,8004b28 <_fflush_r+0x108>
 8004a64:	89000117 	ldw	r4,4(r17)
 8004a68:	10c20014 	ori	r3,r2,2048
 8004a6c:	88c0030d 	sth	r3,12(r17)
 8004a70:	180b883a 	mov	r5,r3
 8004a74:	0100520e 	bge	zero,r4,8004bc0 <_fflush_r+0x1a0>
 8004a78:	88c00a17 	ldw	r3,40(r17)
 8004a7c:	18002226 	beq	r3,zero,8004b08 <_fflush_r+0xe8>
 8004a80:	1084000c 	andi	r2,r2,4096
 8004a84:	10bfffcc 	andi	r2,r2,65535
 8004a88:	10a0001c 	xori	r2,r2,32768
 8004a8c:	10a00004 	addi	r2,r2,-32768
 8004a90:	10004e26 	beq	r2,zero,8004bcc <_fflush_r+0x1ac>
 8004a94:	8c001417 	ldw	r16,80(r17)
 8004a98:	2940010c 	andi	r5,r5,4
 8004a9c:	297fffcc 	andi	r5,r5,65535
 8004aa0:	2960001c 	xori	r5,r5,32768
 8004aa4:	29600004 	addi	r5,r5,-32768
 8004aa8:	28000626 	beq	r5,zero,8004ac4 <_fflush_r+0xa4>
 8004aac:	89000117 	ldw	r4,4(r17)
 8004ab0:	88800c17 	ldw	r2,48(r17)
 8004ab4:	8121c83a 	sub	r16,r16,r4
 8004ab8:	10000226 	beq	r2,zero,8004ac4 <_fflush_r+0xa4>
 8004abc:	88800f17 	ldw	r2,60(r17)
 8004ac0:	80a1c83a 	sub	r16,r16,r2
 8004ac4:	89400717 	ldw	r5,28(r17)
 8004ac8:	9809883a 	mov	r4,r19
 8004acc:	800d883a 	mov	r6,r16
 8004ad0:	000f883a 	mov	r7,zero
 8004ad4:	183ee83a 	callr	r3
 8004ad8:	8080281e 	bne	r16,r2,8004b7c <_fflush_r+0x15c>
 8004adc:	8880030b 	ldhu	r2,12(r17)
 8004ae0:	88c00417 	ldw	r3,16(r17)
 8004ae4:	88000115 	stw	zero,4(r17)
 8004ae8:	113dffcc 	andi	r4,r2,63487
 8004aec:	1084000c 	andi	r2,r2,4096
 8004af0:	10bfffcc 	andi	r2,r2,65535
 8004af4:	10a0001c 	xori	r2,r2,32768
 8004af8:	8900030d 	sth	r4,12(r17)
 8004afc:	88c00015 	stw	r3,0(r17)
 8004b00:	10a00004 	addi	r2,r2,-32768
 8004b04:	10002c1e 	bne	r2,zero,8004bb8 <_fflush_r+0x198>
 8004b08:	0005883a 	mov	r2,zero
 8004b0c:	dfc00417 	ldw	ra,16(sp)
 8004b10:	dcc00317 	ldw	r19,12(sp)
 8004b14:	dc800217 	ldw	r18,8(sp)
 8004b18:	dc400117 	ldw	r17,4(sp)
 8004b1c:	dc000017 	ldw	r16,0(sp)
 8004b20:	dec00504 	addi	sp,sp,20
 8004b24:	f800283a 	ret
 8004b28:	8c800417 	ldw	r18,16(r17)
 8004b2c:	903ff626 	beq	r18,zero,8004b08 <_fflush_r+0xe8>
 8004b30:	8c000017 	ldw	r16,0(r17)
 8004b34:	108000cc 	andi	r2,r2,3
 8004b38:	8c800015 	stw	r18,0(r17)
 8004b3c:	84a1c83a 	sub	r16,r16,r18
 8004b40:	10001b1e 	bne	r2,zero,8004bb0 <_fflush_r+0x190>
 8004b44:	88800517 	ldw	r2,20(r17)
 8004b48:	88800215 	stw	r2,8(r17)
 8004b4c:	04000316 	blt	zero,r16,8004b5c <_fflush_r+0x13c>
 8004b50:	003fed06 	br	8004b08 <_fflush_r+0xe8>
 8004b54:	90a5883a 	add	r18,r18,r2
 8004b58:	043feb0e 	bge	zero,r16,8004b08 <_fflush_r+0xe8>
 8004b5c:	88800917 	ldw	r2,36(r17)
 8004b60:	89400717 	ldw	r5,28(r17)
 8004b64:	800f883a 	mov	r7,r16
 8004b68:	900d883a 	mov	r6,r18
 8004b6c:	9809883a 	mov	r4,r19
 8004b70:	103ee83a 	callr	r2
 8004b74:	80a1c83a 	sub	r16,r16,r2
 8004b78:	00bff616 	blt	zero,r2,8004b54 <_fflush_r+0x134>
 8004b7c:	88c0030b 	ldhu	r3,12(r17)
 8004b80:	00bfffc4 	movi	r2,-1
 8004b84:	18c01014 	ori	r3,r3,64
 8004b88:	88c0030d 	sth	r3,12(r17)
 8004b8c:	dfc00417 	ldw	ra,16(sp)
 8004b90:	dcc00317 	ldw	r19,12(sp)
 8004b94:	dc800217 	ldw	r18,8(sp)
 8004b98:	dc400117 	ldw	r17,4(sp)
 8004b9c:	dc000017 	ldw	r16,0(sp)
 8004ba0:	dec00504 	addi	sp,sp,20
 8004ba4:	f800283a 	ret
 8004ba8:	8004cdc0 	call	8004cdc <__sinit>
 8004bac:	003fa706 	br	8004a4c <_fflush_r+0x2c>
 8004bb0:	0005883a 	mov	r2,zero
 8004bb4:	003fe406 	br	8004b48 <_fflush_r+0x128>
 8004bb8:	8c001415 	stw	r16,80(r17)
 8004bbc:	003fd206 	br	8004b08 <_fflush_r+0xe8>
 8004bc0:	88c00f17 	ldw	r3,60(r17)
 8004bc4:	00ffac16 	blt	zero,r3,8004a78 <_fflush_r+0x58>
 8004bc8:	003fcf06 	br	8004b08 <_fflush_r+0xe8>
 8004bcc:	89400717 	ldw	r5,28(r17)
 8004bd0:	9809883a 	mov	r4,r19
 8004bd4:	000d883a 	mov	r6,zero
 8004bd8:	01c00044 	movi	r7,1
 8004bdc:	183ee83a 	callr	r3
 8004be0:	1021883a 	mov	r16,r2
 8004be4:	00bfffc4 	movi	r2,-1
 8004be8:	80800326 	beq	r16,r2,8004bf8 <_fflush_r+0x1d8>
 8004bec:	8940030b 	ldhu	r5,12(r17)
 8004bf0:	88c00a17 	ldw	r3,40(r17)
 8004bf4:	003fa806 	br	8004a98 <_fflush_r+0x78>
 8004bf8:	98c00017 	ldw	r3,0(r19)
 8004bfc:	00800744 	movi	r2,29
 8004c00:	18bfde1e 	bne	r3,r2,8004b7c <_fflush_r+0x15c>
 8004c04:	003fc006 	br	8004b08 <_fflush_r+0xe8>

08004c08 <fflush>:
 8004c08:	200b883a 	mov	r5,r4
 8004c0c:	20000426 	beq	r4,zero,8004c20 <fflush+0x18>
 8004c10:	00820074 	movhi	r2,2049
 8004c14:	10bc1804 	addi	r2,r2,-4000
 8004c18:	11000017 	ldw	r4,0(r2)
 8004c1c:	8004a201 	jmpi	8004a20 <_fflush_r>
 8004c20:	00820074 	movhi	r2,2049
 8004c24:	10bc1704 	addi	r2,r2,-4004
 8004c28:	11000017 	ldw	r4,0(r2)
 8004c2c:	01420034 	movhi	r5,2048
 8004c30:	29528804 	addi	r5,r5,18976
 8004c34:	80058bc1 	jmpi	80058bc <_fwalk_reent>

08004c38 <__fp_lock>:
 8004c38:	0005883a 	mov	r2,zero
 8004c3c:	f800283a 	ret

08004c40 <__fp_unlock>:
 8004c40:	0005883a 	mov	r2,zero
 8004c44:	f800283a 	ret

08004c48 <_cleanup_r>:
 8004c48:	01420074 	movhi	r5,2049
 8004c4c:	2960fb04 	addi	r5,r5,-31764
 8004c50:	80058141 	jmpi	8005814 <_fwalk>

08004c54 <__sfmoreglue>:
 8004c54:	defffc04 	addi	sp,sp,-16
 8004c58:	dc800215 	stw	r18,8(sp)
 8004c5c:	2825883a 	mov	r18,r5
 8004c60:	dc000015 	stw	r16,0(sp)
 8004c64:	01401704 	movi	r5,92
 8004c68:	2021883a 	mov	r16,r4
 8004c6c:	9009883a 	mov	r4,r18
 8004c70:	dfc00315 	stw	ra,12(sp)
 8004c74:	dc400115 	stw	r17,4(sp)
 8004c78:	8000df40 	call	8000df4 <__mulsi3>
 8004c7c:	8009883a 	mov	r4,r16
 8004c80:	11400304 	addi	r5,r2,12
 8004c84:	1023883a 	mov	r17,r2
 8004c88:	8005bf80 	call	8005bf8 <_malloc_r>
 8004c8c:	1021883a 	mov	r16,r2
 8004c90:	10000726 	beq	r2,zero,8004cb0 <__sfmoreglue+0x5c>
 8004c94:	11000304 	addi	r4,r2,12
 8004c98:	10000015 	stw	zero,0(r2)
 8004c9c:	14800115 	stw	r18,4(r2)
 8004ca0:	11000215 	stw	r4,8(r2)
 8004ca4:	000b883a 	mov	r5,zero
 8004ca8:	880d883a 	mov	r6,r17
 8004cac:	80067400 	call	8006740 <memset>
 8004cb0:	8005883a 	mov	r2,r16
 8004cb4:	dfc00317 	ldw	ra,12(sp)
 8004cb8:	dc800217 	ldw	r18,8(sp)
 8004cbc:	dc400117 	ldw	r17,4(sp)
 8004cc0:	dc000017 	ldw	r16,0(sp)
 8004cc4:	dec00404 	addi	sp,sp,16
 8004cc8:	f800283a 	ret

08004ccc <_cleanup>:
 8004ccc:	00820074 	movhi	r2,2049
 8004cd0:	10bc1704 	addi	r2,r2,-4004
 8004cd4:	11000017 	ldw	r4,0(r2)
 8004cd8:	8004c481 	jmpi	8004c48 <_cleanup_r>

08004cdc <__sinit>:
 8004cdc:	20800e17 	ldw	r2,56(r4)
 8004ce0:	1000401e 	bne	r2,zero,8004de4 <__sinit+0x108>
 8004ce4:	21400117 	ldw	r5,4(r4)
 8004ce8:	01820034 	movhi	r6,2048
 8004cec:	31931204 	addi	r6,r6,19528
 8004cf0:	20c00217 	ldw	r3,8(r4)
 8004cf4:	21800f15 	stw	r6,60(r4)
 8004cf8:	2080bb04 	addi	r2,r4,748
 8004cfc:	02400044 	movi	r9,1
 8004d00:	018000c4 	movi	r6,3
 8004d04:	2180b915 	stw	r6,740(r4)
 8004d08:	2080ba15 	stw	r2,744(r4)
 8004d0c:	22400e15 	stw	r9,56(r4)
 8004d10:	20800317 	ldw	r2,12(r4)
 8004d14:	2000b815 	stw	zero,736(r4)
 8004d18:	02020034 	movhi	r8,2048
 8004d1c:	421fcc04 	addi	r8,r8,32560
 8004d20:	01c20034 	movhi	r7,2048
 8004d24:	39dfe104 	addi	r7,r7,32644
 8004d28:	01820074 	movhi	r6,2049
 8004d2c:	31a00304 	addi	r6,r6,-32756
 8004d30:	01020074 	movhi	r4,2049
 8004d34:	21201a04 	addi	r4,r4,-32664
 8004d38:	02800104 	movi	r10,4
 8004d3c:	28000015 	stw	zero,0(r5)
 8004d40:	28000115 	stw	zero,4(r5)
 8004d44:	28000215 	stw	zero,8(r5)
 8004d48:	2a80030d 	sth	r10,12(r5)
 8004d4c:	2800038d 	sth	zero,14(r5)
 8004d50:	28000415 	stw	zero,16(r5)
 8004d54:	28000515 	stw	zero,20(r5)
 8004d58:	28000615 	stw	zero,24(r5)
 8004d5c:	29400715 	stw	r5,28(r5)
 8004d60:	2a000815 	stw	r8,32(r5)
 8004d64:	29c00915 	stw	r7,36(r5)
 8004d68:	29800a15 	stw	r6,40(r5)
 8004d6c:	29000b15 	stw	r4,44(r5)
 8004d70:	01400284 	movi	r5,10
 8004d74:	18000015 	stw	zero,0(r3)
 8004d78:	18000115 	stw	zero,4(r3)
 8004d7c:	18000215 	stw	zero,8(r3)
 8004d80:	1940030d 	sth	r5,12(r3)
 8004d84:	1a40038d 	sth	r9,14(r3)
 8004d88:	18000415 	stw	zero,16(r3)
 8004d8c:	18000515 	stw	zero,20(r3)
 8004d90:	18000615 	stw	zero,24(r3)
 8004d94:	18c00715 	stw	r3,28(r3)
 8004d98:	1a000815 	stw	r8,32(r3)
 8004d9c:	19c00915 	stw	r7,36(r3)
 8004da0:	19800a15 	stw	r6,40(r3)
 8004da4:	19000b15 	stw	r4,44(r3)
 8004da8:	00c00484 	movi	r3,18
 8004dac:	10c0030d 	sth	r3,12(r2)
 8004db0:	00c00084 	movi	r3,2
 8004db4:	10000015 	stw	zero,0(r2)
 8004db8:	10000115 	stw	zero,4(r2)
 8004dbc:	10000215 	stw	zero,8(r2)
 8004dc0:	10c0038d 	sth	r3,14(r2)
 8004dc4:	10000415 	stw	zero,16(r2)
 8004dc8:	10000515 	stw	zero,20(r2)
 8004dcc:	10000615 	stw	zero,24(r2)
 8004dd0:	10800715 	stw	r2,28(r2)
 8004dd4:	12000815 	stw	r8,32(r2)
 8004dd8:	11c00915 	stw	r7,36(r2)
 8004ddc:	11800a15 	stw	r6,40(r2)
 8004de0:	11000b15 	stw	r4,44(r2)
 8004de4:	f800283a 	ret

08004de8 <__sfp>:
 8004de8:	defffc04 	addi	sp,sp,-16
 8004dec:	00820074 	movhi	r2,2049
 8004df0:	10bc1704 	addi	r2,r2,-4004
 8004df4:	dc400115 	stw	r17,4(sp)
 8004df8:	14400017 	ldw	r17,0(r2)
 8004dfc:	dc800215 	stw	r18,8(sp)
 8004e00:	dfc00315 	stw	ra,12(sp)
 8004e04:	88800e17 	ldw	r2,56(r17)
 8004e08:	dc000015 	stw	r16,0(sp)
 8004e0c:	2025883a 	mov	r18,r4
 8004e10:	10002826 	beq	r2,zero,8004eb4 <__sfp+0xcc>
 8004e14:	8c40b804 	addi	r17,r17,736
 8004e18:	043fffc4 	movi	r16,-1
 8004e1c:	89400117 	ldw	r5,4(r17)
 8004e20:	88800217 	ldw	r2,8(r17)
 8004e24:	297fffc4 	addi	r5,r5,-1
 8004e28:	28000a16 	blt	r5,zero,8004e54 <__sfp+0x6c>
 8004e2c:	10c0030f 	ldh	r3,12(r2)
 8004e30:	18000c26 	beq	r3,zero,8004e64 <__sfp+0x7c>
 8004e34:	10c01a04 	addi	r3,r2,104
 8004e38:	00000206 	br	8004e44 <__sfp+0x5c>
 8004e3c:	19bfe90f 	ldh	r6,-92(r3)
 8004e40:	30000826 	beq	r6,zero,8004e64 <__sfp+0x7c>
 8004e44:	297fffc4 	addi	r5,r5,-1
 8004e48:	18bffd04 	addi	r2,r3,-12
 8004e4c:	18c01704 	addi	r3,r3,92
 8004e50:	2c3ffa1e 	bne	r5,r16,8004e3c <__sfp+0x54>
 8004e54:	88800017 	ldw	r2,0(r17)
 8004e58:	10001926 	beq	r2,zero,8004ec0 <__sfp+0xd8>
 8004e5c:	1023883a 	mov	r17,r2
 8004e60:	003fee06 	br	8004e1c <__sfp+0x34>
 8004e64:	00ffffc4 	movi	r3,-1
 8004e68:	10c0038d 	sth	r3,14(r2)
 8004e6c:	00c00044 	movi	r3,1
 8004e70:	10c0030d 	sth	r3,12(r2)
 8004e74:	10000015 	stw	zero,0(r2)
 8004e78:	10000215 	stw	zero,8(r2)
 8004e7c:	10000115 	stw	zero,4(r2)
 8004e80:	10000415 	stw	zero,16(r2)
 8004e84:	10000515 	stw	zero,20(r2)
 8004e88:	10000615 	stw	zero,24(r2)
 8004e8c:	10000c15 	stw	zero,48(r2)
 8004e90:	10000d15 	stw	zero,52(r2)
 8004e94:	10001115 	stw	zero,68(r2)
 8004e98:	10001215 	stw	zero,72(r2)
 8004e9c:	dfc00317 	ldw	ra,12(sp)
 8004ea0:	dc800217 	ldw	r18,8(sp)
 8004ea4:	dc400117 	ldw	r17,4(sp)
 8004ea8:	dc000017 	ldw	r16,0(sp)
 8004eac:	dec00404 	addi	sp,sp,16
 8004eb0:	f800283a 	ret
 8004eb4:	8809883a 	mov	r4,r17
 8004eb8:	8004cdc0 	call	8004cdc <__sinit>
 8004ebc:	003fd506 	br	8004e14 <__sfp+0x2c>
 8004ec0:	9009883a 	mov	r4,r18
 8004ec4:	01400104 	movi	r5,4
 8004ec8:	8004c540 	call	8004c54 <__sfmoreglue>
 8004ecc:	88800015 	stw	r2,0(r17)
 8004ed0:	103fe21e 	bne	r2,zero,8004e5c <__sfp+0x74>
 8004ed4:	00800304 	movi	r2,12
 8004ed8:	90800015 	stw	r2,0(r18)
 8004edc:	0005883a 	mov	r2,zero
 8004ee0:	003fee06 	br	8004e9c <__sfp+0xb4>

08004ee4 <__sfp_lock_acquire>:
 8004ee4:	f800283a 	ret

08004ee8 <__sfp_lock_release>:
 8004ee8:	f800283a 	ret

08004eec <__sinit_lock_acquire>:
 8004eec:	f800283a 	ret

08004ef0 <__sinit_lock_release>:
 8004ef0:	f800283a 	ret

08004ef4 <__fp_lock_all>:
 8004ef4:	00820074 	movhi	r2,2049
 8004ef8:	10bc1804 	addi	r2,r2,-4000
 8004efc:	11000017 	ldw	r4,0(r2)
 8004f00:	01420034 	movhi	r5,2048
 8004f04:	29530e04 	addi	r5,r5,19512
 8004f08:	80058141 	jmpi	8005814 <_fwalk>

08004f0c <__fp_unlock_all>:
 8004f0c:	00820074 	movhi	r2,2049
 8004f10:	10bc1804 	addi	r2,r2,-4000
 8004f14:	11000017 	ldw	r4,0(r2)
 8004f18:	01420034 	movhi	r5,2048
 8004f1c:	29531004 	addi	r5,r5,19520
 8004f20:	80058141 	jmpi	8005814 <_fwalk>

08004f24 <_malloc_trim_r>:
 8004f24:	defffb04 	addi	sp,sp,-20
 8004f28:	dcc00315 	stw	r19,12(sp)
 8004f2c:	dc800215 	stw	r18,8(sp)
 8004f30:	dc400115 	stw	r17,4(sp)
 8004f34:	dc000015 	stw	r16,0(sp)
 8004f38:	2827883a 	mov	r19,r5
 8004f3c:	dfc00415 	stw	ra,16(sp)
 8004f40:	04420074 	movhi	r17,2049
 8004f44:	8c769304 	addi	r17,r17,-9652
 8004f48:	2021883a 	mov	r16,r4
 8004f4c:	800ab980 	call	800ab98 <__malloc_lock>
 8004f50:	88800217 	ldw	r2,8(r17)
 8004f54:	14800117 	ldw	r18,4(r2)
 8004f58:	00bfff04 	movi	r2,-4
 8004f5c:	90a4703a 	and	r18,r18,r2
 8004f60:	9083fbc4 	addi	r2,r18,4079
 8004f64:	14e7c83a 	sub	r19,r2,r19
 8004f68:	9826d33a 	srli	r19,r19,12
 8004f6c:	0083ffc4 	movi	r2,4095
 8004f70:	9cffffc4 	addi	r19,r19,-1
 8004f74:	9826933a 	slli	r19,r19,12
 8004f78:	14c0060e 	bge	r2,r19,8004f94 <_malloc_trim_r+0x70>
 8004f7c:	8009883a 	mov	r4,r16
 8004f80:	000b883a 	mov	r5,zero
 8004f84:	8007ecc0 	call	8007ecc <_sbrk_r>
 8004f88:	88c00217 	ldw	r3,8(r17)
 8004f8c:	1c87883a 	add	r3,r3,r18
 8004f90:	10c00a26 	beq	r2,r3,8004fbc <_malloc_trim_r+0x98>
 8004f94:	8009883a 	mov	r4,r16
 8004f98:	800abb80 	call	800abb8 <__malloc_unlock>
 8004f9c:	0005883a 	mov	r2,zero
 8004fa0:	dfc00417 	ldw	ra,16(sp)
 8004fa4:	dcc00317 	ldw	r19,12(sp)
 8004fa8:	dc800217 	ldw	r18,8(sp)
 8004fac:	dc400117 	ldw	r17,4(sp)
 8004fb0:	dc000017 	ldw	r16,0(sp)
 8004fb4:	dec00504 	addi	sp,sp,20
 8004fb8:	f800283a 	ret
 8004fbc:	8009883a 	mov	r4,r16
 8004fc0:	04cbc83a 	sub	r5,zero,r19
 8004fc4:	8007ecc0 	call	8007ecc <_sbrk_r>
 8004fc8:	00ffffc4 	movi	r3,-1
 8004fcc:	10c01326 	beq	r2,r3,800501c <_malloc_trim_r+0xf8>
 8004fd0:	00820074 	movhi	r2,2049
 8004fd4:	1082cb04 	addi	r2,r2,2860
 8004fd8:	11000017 	ldw	r4,0(r2)
 8004fdc:	88c00217 	ldw	r3,8(r17)
 8004fe0:	94e5c83a 	sub	r18,r18,r19
 8004fe4:	94800054 	ori	r18,r18,1
 8004fe8:	24e7c83a 	sub	r19,r4,r19
 8004fec:	1c800115 	stw	r18,4(r3)
 8004ff0:	8009883a 	mov	r4,r16
 8004ff4:	14c00015 	stw	r19,0(r2)
 8004ff8:	800abb80 	call	800abb8 <__malloc_unlock>
 8004ffc:	00800044 	movi	r2,1
 8005000:	dfc00417 	ldw	ra,16(sp)
 8005004:	dcc00317 	ldw	r19,12(sp)
 8005008:	dc800217 	ldw	r18,8(sp)
 800500c:	dc400117 	ldw	r17,4(sp)
 8005010:	dc000017 	ldw	r16,0(sp)
 8005014:	dec00504 	addi	sp,sp,20
 8005018:	f800283a 	ret
 800501c:	8009883a 	mov	r4,r16
 8005020:	000b883a 	mov	r5,zero
 8005024:	8007ecc0 	call	8007ecc <_sbrk_r>
 8005028:	88c00217 	ldw	r3,8(r17)
 800502c:	014003c4 	movi	r5,15
 8005030:	10c9c83a 	sub	r4,r2,r3
 8005034:	293fd70e 	bge	r5,r4,8004f94 <_malloc_trim_r+0x70>
 8005038:	01420074 	movhi	r5,2049
 800503c:	297c1a04 	addi	r5,r5,-3992
 8005040:	29400017 	ldw	r5,0(r5)
 8005044:	21000054 	ori	r4,r4,1
 8005048:	19000115 	stw	r4,4(r3)
 800504c:	1145c83a 	sub	r2,r2,r5
 8005050:	01420074 	movhi	r5,2049
 8005054:	2942cb04 	addi	r5,r5,2860
 8005058:	28800015 	stw	r2,0(r5)
 800505c:	003fcd06 	br	8004f94 <_malloc_trim_r+0x70>

08005060 <_free_r>:
 8005060:	defffd04 	addi	sp,sp,-12
 8005064:	dc400115 	stw	r17,4(sp)
 8005068:	dc000015 	stw	r16,0(sp)
 800506c:	dfc00215 	stw	ra,8(sp)
 8005070:	2821883a 	mov	r16,r5
 8005074:	2023883a 	mov	r17,r4
 8005078:	28004b26 	beq	r5,zero,80051a8 <_free_r+0x148>
 800507c:	800ab980 	call	800ab98 <__malloc_lock>
 8005080:	823fff17 	ldw	r8,-4(r16)
 8005084:	00bfff84 	movi	r2,-2
 8005088:	81bffe04 	addi	r6,r16,-8
 800508c:	4084703a 	and	r2,r8,r2
 8005090:	3087883a 	add	r3,r6,r2
 8005094:	01420074 	movhi	r5,2049
 8005098:	29769304 	addi	r5,r5,-9652
 800509c:	1a400117 	ldw	r9,4(r3)
 80050a0:	29000217 	ldw	r4,8(r5)
 80050a4:	01ffff04 	movi	r7,-4
 80050a8:	49ce703a 	and	r7,r9,r7
 80050ac:	20c06526 	beq	r4,r3,8005244 <_free_r+0x1e4>
 80050b0:	19c00115 	stw	r7,4(r3)
 80050b4:	4200004c 	andi	r8,r8,1
 80050b8:	40003026 	beq	r8,zero,800517c <_free_r+0x11c>
 80050bc:	0009883a 	mov	r4,zero
 80050c0:	19d1883a 	add	r8,r3,r7
 80050c4:	42000117 	ldw	r8,4(r8)
 80050c8:	4200004c 	andi	r8,r8,1
 80050cc:	4000061e 	bne	r8,zero,80050e8 <_free_r+0x88>
 80050d0:	11c5883a 	add	r2,r2,r7
 80050d4:	19c00217 	ldw	r7,8(r3)
 80050d8:	20004e26 	beq	r4,zero,8005214 <_free_r+0x1b4>
 80050dc:	18c00317 	ldw	r3,12(r3)
 80050e0:	38c00315 	stw	r3,12(r7)
 80050e4:	19c00215 	stw	r7,8(r3)
 80050e8:	11c00054 	ori	r7,r2,1
 80050ec:	3087883a 	add	r3,r6,r2
 80050f0:	31c00115 	stw	r7,4(r6)
 80050f4:	18800015 	stw	r2,0(r3)
 80050f8:	20001a1e 	bne	r4,zero,8005164 <_free_r+0x104>
 80050fc:	00c07fc4 	movi	r3,511
 8005100:	18802e2e 	bgeu	r3,r2,80051bc <_free_r+0x15c>
 8005104:	1006d27a 	srli	r3,r2,9
 8005108:	01000104 	movi	r4,4
 800510c:	20c06636 	bltu	r4,r3,80052a8 <_free_r+0x248>
 8005110:	1008d1ba 	srli	r4,r2,6
 8005114:	21000e04 	addi	r4,r4,56
 8005118:	210f883a 	add	r7,r4,r4
 800511c:	39cf883a 	add	r7,r7,r7
 8005120:	39cf883a 	add	r7,r7,r7
 8005124:	29cf883a 	add	r7,r5,r7
 8005128:	38c00217 	ldw	r3,8(r7)
 800512c:	01420074 	movhi	r5,2049
 8005130:	29769304 	addi	r5,r5,-9652
 8005134:	19c06126 	beq	r3,r7,80052bc <_free_r+0x25c>
 8005138:	013fff04 	movi	r4,-4
 800513c:	19400117 	ldw	r5,4(r3)
 8005140:	290a703a 	and	r5,r5,r4
 8005144:	1140022e 	bgeu	r2,r5,8005150 <_free_r+0xf0>
 8005148:	18c00217 	ldw	r3,8(r3)
 800514c:	38fffb1e 	bne	r7,r3,800513c <_free_r+0xdc>
 8005150:	18800317 	ldw	r2,12(r3)
 8005154:	30800315 	stw	r2,12(r6)
 8005158:	30c00215 	stw	r3,8(r6)
 800515c:	11800215 	stw	r6,8(r2)
 8005160:	19800315 	stw	r6,12(r3)
 8005164:	8809883a 	mov	r4,r17
 8005168:	dfc00217 	ldw	ra,8(sp)
 800516c:	dc400117 	ldw	r17,4(sp)
 8005170:	dc000017 	ldw	r16,0(sp)
 8005174:	dec00304 	addi	sp,sp,12
 8005178:	800abb81 	jmpi	800abb8 <__malloc_unlock>
 800517c:	813ffe17 	ldw	r4,-8(r16)
 8005180:	2a400204 	addi	r9,r5,8
 8005184:	310dc83a 	sub	r6,r6,r4
 8005188:	32000217 	ldw	r8,8(r6)
 800518c:	1105883a 	add	r2,r2,r4
 8005190:	42404326 	beq	r8,r9,80052a0 <_free_r+0x240>
 8005194:	32400317 	ldw	r9,12(r6)
 8005198:	0009883a 	mov	r4,zero
 800519c:	42400315 	stw	r9,12(r8)
 80051a0:	4a000215 	stw	r8,8(r9)
 80051a4:	003fc606 	br	80050c0 <_free_r+0x60>
 80051a8:	dfc00217 	ldw	ra,8(sp)
 80051ac:	dc400117 	ldw	r17,4(sp)
 80051b0:	dc000017 	ldw	r16,0(sp)
 80051b4:	dec00304 	addi	sp,sp,12
 80051b8:	f800283a 	ret
 80051bc:	1004d0fa 	srli	r2,r2,3
 80051c0:	02000044 	movi	r8,1
 80051c4:	29c00117 	ldw	r7,4(r5)
 80051c8:	1087883a 	add	r3,r2,r2
 80051cc:	18c7883a 	add	r3,r3,r3
 80051d0:	1005d0ba 	srai	r2,r2,2
 80051d4:	18c7883a 	add	r3,r3,r3
 80051d8:	28c7883a 	add	r3,r5,r3
 80051dc:	19000217 	ldw	r4,8(r3)
 80051e0:	4084983a 	sll	r2,r8,r2
 80051e4:	30c00315 	stw	r3,12(r6)
 80051e8:	31000215 	stw	r4,8(r6)
 80051ec:	11c4b03a 	or	r2,r2,r7
 80051f0:	21800315 	stw	r6,12(r4)
 80051f4:	8809883a 	mov	r4,r17
 80051f8:	28800115 	stw	r2,4(r5)
 80051fc:	19800215 	stw	r6,8(r3)
 8005200:	dfc00217 	ldw	ra,8(sp)
 8005204:	dc400117 	ldw	r17,4(sp)
 8005208:	dc000017 	ldw	r16,0(sp)
 800520c:	dec00304 	addi	sp,sp,12
 8005210:	800abb81 	jmpi	800abb8 <__malloc_unlock>
 8005214:	02020074 	movhi	r8,2049
 8005218:	42369504 	addi	r8,r8,-9644
 800521c:	3a3faf1e 	bne	r7,r8,80050dc <_free_r+0x7c>
 8005220:	29800515 	stw	r6,20(r5)
 8005224:	29800415 	stw	r6,16(r5)
 8005228:	11000054 	ori	r4,r2,1
 800522c:	3087883a 	add	r3,r6,r2
 8005230:	31c00315 	stw	r7,12(r6)
 8005234:	31c00215 	stw	r7,8(r6)
 8005238:	31000115 	stw	r4,4(r6)
 800523c:	18800015 	stw	r2,0(r3)
 8005240:	003fc806 	br	8005164 <_free_r+0x104>
 8005244:	4200004c 	andi	r8,r8,1
 8005248:	3885883a 	add	r2,r7,r2
 800524c:	4000071e 	bne	r8,zero,800526c <_free_r+0x20c>
 8005250:	81fffe17 	ldw	r7,-8(r16)
 8005254:	31cdc83a 	sub	r6,r6,r7
 8005258:	30c00317 	ldw	r3,12(r6)
 800525c:	31000217 	ldw	r4,8(r6)
 8005260:	11c5883a 	add	r2,r2,r7
 8005264:	20c00315 	stw	r3,12(r4)
 8005268:	19000215 	stw	r4,8(r3)
 800526c:	00c20074 	movhi	r3,2049
 8005270:	18fc1b04 	addi	r3,r3,-3988
 8005274:	18c00017 	ldw	r3,0(r3)
 8005278:	11000054 	ori	r4,r2,1
 800527c:	31000115 	stw	r4,4(r6)
 8005280:	29800215 	stw	r6,8(r5)
 8005284:	10ffb736 	bltu	r2,r3,8005164 <_free_r+0x104>
 8005288:	00820074 	movhi	r2,2049
 800528c:	1082c104 	addi	r2,r2,2820
 8005290:	11400017 	ldw	r5,0(r2)
 8005294:	8809883a 	mov	r4,r17
 8005298:	8004f240 	call	8004f24 <_malloc_trim_r>
 800529c:	003fb106 	br	8005164 <_free_r+0x104>
 80052a0:	01000044 	movi	r4,1
 80052a4:	003f8606 	br	80050c0 <_free_r+0x60>
 80052a8:	01000504 	movi	r4,20
 80052ac:	20c00b36 	bltu	r4,r3,80052dc <_free_r+0x27c>
 80052b0:	190016c4 	addi	r4,r3,91
 80052b4:	210f883a 	add	r7,r4,r4
 80052b8:	003f9806 	br	800511c <_free_r+0xbc>
 80052bc:	2009d0ba 	srai	r4,r4,2
 80052c0:	00800044 	movi	r2,1
 80052c4:	29c00117 	ldw	r7,4(r5)
 80052c8:	1108983a 	sll	r4,r2,r4
 80052cc:	1805883a 	mov	r2,r3
 80052d0:	21c8b03a 	or	r4,r4,r7
 80052d4:	29000115 	stw	r4,4(r5)
 80052d8:	003f9e06 	br	8005154 <_free_r+0xf4>
 80052dc:	01001504 	movi	r4,84
 80052e0:	20c00436 	bltu	r4,r3,80052f4 <_free_r+0x294>
 80052e4:	1008d33a 	srli	r4,r2,12
 80052e8:	21001b84 	addi	r4,r4,110
 80052ec:	210f883a 	add	r7,r4,r4
 80052f0:	003f8a06 	br	800511c <_free_r+0xbc>
 80052f4:	01005504 	movi	r4,340
 80052f8:	20c00436 	bltu	r4,r3,800530c <_free_r+0x2ac>
 80052fc:	1008d3fa 	srli	r4,r2,15
 8005300:	21001dc4 	addi	r4,r4,119
 8005304:	210f883a 	add	r7,r4,r4
 8005308:	003f8406 	br	800511c <_free_r+0xbc>
 800530c:	01015504 	movi	r4,1364
 8005310:	20c00436 	bltu	r4,r3,8005324 <_free_r+0x2c4>
 8005314:	1008d4ba 	srli	r4,r2,18
 8005318:	21001f04 	addi	r4,r4,124
 800531c:	210f883a 	add	r7,r4,r4
 8005320:	003f7e06 	br	800511c <_free_r+0xbc>
 8005324:	01c03f04 	movi	r7,252
 8005328:	01001f84 	movi	r4,126
 800532c:	003f7b06 	br	800511c <_free_r+0xbc>

08005330 <__sfvwrite_r>:
 8005330:	30800217 	ldw	r2,8(r6)
 8005334:	defff504 	addi	sp,sp,-44
 8005338:	dd400615 	stw	r21,24(sp)
 800533c:	dd000515 	stw	r20,20(sp)
 8005340:	dc000115 	stw	r16,4(sp)
 8005344:	dfc00a15 	stw	ra,40(sp)
 8005348:	df000915 	stw	fp,36(sp)
 800534c:	ddc00815 	stw	r23,32(sp)
 8005350:	dd800715 	stw	r22,28(sp)
 8005354:	dcc00415 	stw	r19,16(sp)
 8005358:	dc800315 	stw	r18,12(sp)
 800535c:	dc400215 	stw	r17,8(sp)
 8005360:	3029883a 	mov	r20,r6
 8005364:	202b883a 	mov	r21,r4
 8005368:	2821883a 	mov	r16,r5
 800536c:	10002126 	beq	r2,zero,80053f4 <__sfvwrite_r+0xc4>
 8005370:	2880030b 	ldhu	r2,12(r5)
 8005374:	10c0020c 	andi	r3,r2,8
 8005378:	18ffffcc 	andi	r3,r3,65535
 800537c:	18e0001c 	xori	r3,r3,32768
 8005380:	18e00004 	addi	r3,r3,-32768
 8005384:	18002826 	beq	r3,zero,8005428 <__sfvwrite_r+0xf8>
 8005388:	28c00417 	ldw	r3,16(r5)
 800538c:	18002626 	beq	r3,zero,8005428 <__sfvwrite_r+0xf8>
 8005390:	10c0008c 	andi	r3,r2,2
 8005394:	18ffffcc 	andi	r3,r3,65535
 8005398:	18e0001c 	xori	r3,r3,32768
 800539c:	18e00004 	addi	r3,r3,-32768
 80053a0:	a4400017 	ldw	r17,0(r20)
 80053a4:	18002b26 	beq	r3,zero,8005454 <__sfvwrite_r+0x124>
 80053a8:	0027883a 	mov	r19,zero
 80053ac:	0025883a 	mov	r18,zero
 80053b0:	05810004 	movi	r22,1024
 80053b4:	980d883a 	mov	r6,r19
 80053b8:	a809883a 	mov	r4,r21
 80053bc:	90004f26 	beq	r18,zero,80054fc <__sfvwrite_r+0x1cc>
 80053c0:	900f883a 	mov	r7,r18
 80053c4:	81400717 	ldw	r5,28(r16)
 80053c8:	b480012e 	bgeu	r22,r18,80053d0 <__sfvwrite_r+0xa0>
 80053cc:	01c10004 	movi	r7,1024
 80053d0:	80800917 	ldw	r2,36(r16)
 80053d4:	103ee83a 	callr	r2
 80053d8:	0080540e 	bge	zero,r2,800552c <__sfvwrite_r+0x1fc>
 80053dc:	a0c00217 	ldw	r3,8(r20)
 80053e0:	98a7883a 	add	r19,r19,r2
 80053e4:	90a5c83a 	sub	r18,r18,r2
 80053e8:	1885c83a 	sub	r2,r3,r2
 80053ec:	a0800215 	stw	r2,8(r20)
 80053f0:	103ff01e 	bne	r2,zero,80053b4 <__sfvwrite_r+0x84>
 80053f4:	0005883a 	mov	r2,zero
 80053f8:	dfc00a17 	ldw	ra,40(sp)
 80053fc:	df000917 	ldw	fp,36(sp)
 8005400:	ddc00817 	ldw	r23,32(sp)
 8005404:	dd800717 	ldw	r22,28(sp)
 8005408:	dd400617 	ldw	r21,24(sp)
 800540c:	dd000517 	ldw	r20,20(sp)
 8005410:	dcc00417 	ldw	r19,16(sp)
 8005414:	dc800317 	ldw	r18,12(sp)
 8005418:	dc400217 	ldw	r17,8(sp)
 800541c:	dc000117 	ldw	r16,4(sp)
 8005420:	dec00b04 	addi	sp,sp,44
 8005424:	f800283a 	ret
 8005428:	a809883a 	mov	r4,r21
 800542c:	800b883a 	mov	r5,r16
 8005430:	8002eb40 	call	8002eb4 <__swsetup_r>
 8005434:	1000f01e 	bne	r2,zero,80057f8 <__sfvwrite_r+0x4c8>
 8005438:	8080030b 	ldhu	r2,12(r16)
 800543c:	a4400017 	ldw	r17,0(r20)
 8005440:	10c0008c 	andi	r3,r2,2
 8005444:	18ffffcc 	andi	r3,r3,65535
 8005448:	18e0001c 	xori	r3,r3,32768
 800544c:	18e00004 	addi	r3,r3,-32768
 8005450:	183fd51e 	bne	r3,zero,80053a8 <__sfvwrite_r+0x78>
 8005454:	10c0004c 	andi	r3,r2,1
 8005458:	002d883a 	mov	r22,zero
 800545c:	1800381e 	bne	r3,zero,8005540 <__sfvwrite_r+0x210>
 8005460:	0025883a 	mov	r18,zero
 8005464:	90002126 	beq	r18,zero,80054ec <__sfvwrite_r+0x1bc>
 8005468:	10c0800c 	andi	r3,r2,512
 800546c:	18ffffcc 	andi	r3,r3,65535
 8005470:	18e0001c 	xori	r3,r3,32768
 8005474:	18e00004 	addi	r3,r3,-32768
 8005478:	84c00217 	ldw	r19,8(r16)
 800547c:	18006b26 	beq	r3,zero,800562c <__sfvwrite_r+0x2fc>
 8005480:	980f883a 	mov	r7,r19
 8005484:	94c08636 	bltu	r18,r19,80056a0 <__sfvwrite_r+0x370>
 8005488:	10c1200c 	andi	r3,r2,1152
 800548c:	18009f1e 	bne	r3,zero,800570c <__sfvwrite_r+0x3dc>
 8005490:	81000017 	ldw	r4,0(r16)
 8005494:	982f883a 	mov	r23,r19
 8005498:	9039883a 	mov	fp,r18
 800549c:	9027883a 	mov	r19,r18
 80054a0:	380d883a 	mov	r6,r7
 80054a4:	b00b883a 	mov	r5,r22
 80054a8:	d9c00015 	stw	r7,0(sp)
 80054ac:	80065b40 	call	80065b4 <memmove>
 80054b0:	d9c00017 	ldw	r7,0(sp)
 80054b4:	81000217 	ldw	r4,8(r16)
 80054b8:	80800017 	ldw	r2,0(r16)
 80054bc:	25efc83a 	sub	r23,r4,r23
 80054c0:	11cf883a 	add	r7,r2,r7
 80054c4:	85c00215 	stw	r23,8(r16)
 80054c8:	81c00015 	stw	r7,0(r16)
 80054cc:	a0800217 	ldw	r2,8(r20)
 80054d0:	b72d883a 	add	r22,r22,fp
 80054d4:	9725c83a 	sub	r18,r18,fp
 80054d8:	14e7c83a 	sub	r19,r2,r19
 80054dc:	a4c00215 	stw	r19,8(r20)
 80054e0:	983fc426 	beq	r19,zero,80053f4 <__sfvwrite_r+0xc4>
 80054e4:	8080030b 	ldhu	r2,12(r16)
 80054e8:	903fdf1e 	bne	r18,zero,8005468 <__sfvwrite_r+0x138>
 80054ec:	8d800017 	ldw	r22,0(r17)
 80054f0:	8c800117 	ldw	r18,4(r17)
 80054f4:	8c400204 	addi	r17,r17,8
 80054f8:	003fda06 	br	8005464 <__sfvwrite_r+0x134>
 80054fc:	8cc00017 	ldw	r19,0(r17)
 8005500:	8c800117 	ldw	r18,4(r17)
 8005504:	8c400204 	addi	r17,r17,8
 8005508:	003faa06 	br	80053b4 <__sfvwrite_r+0x84>
 800550c:	800786c0 	call	800786c <_realloc_r>
 8005510:	102f883a 	mov	r23,r2
 8005514:	10009f1e 	bne	r2,zero,8005794 <__sfvwrite_r+0x464>
 8005518:	81400417 	ldw	r5,16(r16)
 800551c:	a809883a 	mov	r4,r21
 8005520:	80050600 	call	8005060 <_free_r>
 8005524:	00800304 	movi	r2,12
 8005528:	a8800015 	stw	r2,0(r21)
 800552c:	80c0030b 	ldhu	r3,12(r16)
 8005530:	00bfffc4 	movi	r2,-1
 8005534:	18c01014 	ori	r3,r3,64
 8005538:	80c0030d 	sth	r3,12(r16)
 800553c:	003fae06 	br	80053f8 <__sfvwrite_r+0xc8>
 8005540:	0007883a 	mov	r3,zero
 8005544:	0039883a 	mov	fp,zero
 8005548:	0025883a 	mov	r18,zero
 800554c:	90001e26 	beq	r18,zero,80055c8 <__sfvwrite_r+0x298>
 8005550:	18006526 	beq	r3,zero,80056e8 <__sfvwrite_r+0x3b8>
 8005554:	b02f883a 	mov	r23,r22
 8005558:	9580012e 	bgeu	r18,r22,8005560 <__sfvwrite_r+0x230>
 800555c:	902f883a 	mov	r23,r18
 8005560:	81000017 	ldw	r4,0(r16)
 8005564:	80800417 	ldw	r2,16(r16)
 8005568:	84c00217 	ldw	r19,8(r16)
 800556c:	81c00517 	ldw	r7,20(r16)
 8005570:	1100022e 	bgeu	r2,r4,800557c <__sfvwrite_r+0x24c>
 8005574:	99e7883a 	add	r19,r19,r7
 8005578:	9dc01816 	blt	r19,r23,80055dc <__sfvwrite_r+0x2ac>
 800557c:	b9c03b16 	blt	r23,r7,800566c <__sfvwrite_r+0x33c>
 8005580:	80800917 	ldw	r2,36(r16)
 8005584:	81400717 	ldw	r5,28(r16)
 8005588:	a809883a 	mov	r4,r21
 800558c:	d8c00015 	stw	r3,0(sp)
 8005590:	e00d883a 	mov	r6,fp
 8005594:	103ee83a 	callr	r2
 8005598:	1027883a 	mov	r19,r2
 800559c:	d8c00017 	ldw	r3,0(sp)
 80055a0:	00bfe20e 	bge	zero,r2,800552c <__sfvwrite_r+0x1fc>
 80055a4:	b4edc83a 	sub	r22,r22,r19
 80055a8:	b0001a26 	beq	r22,zero,8005614 <__sfvwrite_r+0x2e4>
 80055ac:	a0800217 	ldw	r2,8(r20)
 80055b0:	e4f9883a 	add	fp,fp,r19
 80055b4:	94e5c83a 	sub	r18,r18,r19
 80055b8:	14e7c83a 	sub	r19,r2,r19
 80055bc:	a4c00215 	stw	r19,8(r20)
 80055c0:	983f8c26 	beq	r19,zero,80053f4 <__sfvwrite_r+0xc4>
 80055c4:	903fe21e 	bne	r18,zero,8005550 <__sfvwrite_r+0x220>
 80055c8:	8f000017 	ldw	fp,0(r17)
 80055cc:	8c800117 	ldw	r18,4(r17)
 80055d0:	0007883a 	mov	r3,zero
 80055d4:	8c400204 	addi	r17,r17,8
 80055d8:	003fdc06 	br	800554c <__sfvwrite_r+0x21c>
 80055dc:	e00b883a 	mov	r5,fp
 80055e0:	980d883a 	mov	r6,r19
 80055e4:	d8c00015 	stw	r3,0(sp)
 80055e8:	80065b40 	call	80065b4 <memmove>
 80055ec:	80800017 	ldw	r2,0(r16)
 80055f0:	a809883a 	mov	r4,r21
 80055f4:	800b883a 	mov	r5,r16
 80055f8:	14c5883a 	add	r2,r2,r19
 80055fc:	80800015 	stw	r2,0(r16)
 8005600:	8004a200 	call	8004a20 <_fflush_r>
 8005604:	d8c00017 	ldw	r3,0(sp)
 8005608:	103fc81e 	bne	r2,zero,800552c <__sfvwrite_r+0x1fc>
 800560c:	b4edc83a 	sub	r22,r22,r19
 8005610:	b03fe61e 	bne	r22,zero,80055ac <__sfvwrite_r+0x27c>
 8005614:	a809883a 	mov	r4,r21
 8005618:	800b883a 	mov	r5,r16
 800561c:	8004a200 	call	8004a20 <_fflush_r>
 8005620:	103fc21e 	bne	r2,zero,800552c <__sfvwrite_r+0x1fc>
 8005624:	0007883a 	mov	r3,zero
 8005628:	003fe006 	br	80055ac <__sfvwrite_r+0x27c>
 800562c:	81000017 	ldw	r4,0(r16)
 8005630:	80800417 	ldw	r2,16(r16)
 8005634:	1100022e 	bgeu	r2,r4,8005640 <__sfvwrite_r+0x310>
 8005638:	9839883a 	mov	fp,r19
 800563c:	9c806036 	bltu	r19,r18,80057c0 <__sfvwrite_r+0x490>
 8005640:	81c00517 	ldw	r7,20(r16)
 8005644:	91c01c36 	bltu	r18,r7,80056b8 <__sfvwrite_r+0x388>
 8005648:	80800917 	ldw	r2,36(r16)
 800564c:	81400717 	ldw	r5,28(r16)
 8005650:	a809883a 	mov	r4,r21
 8005654:	b00d883a 	mov	r6,r22
 8005658:	103ee83a 	callr	r2
 800565c:	1027883a 	mov	r19,r2
 8005660:	00bfb20e 	bge	zero,r2,800552c <__sfvwrite_r+0x1fc>
 8005664:	1039883a 	mov	fp,r2
 8005668:	003f9806 	br	80054cc <__sfvwrite_r+0x19c>
 800566c:	b80d883a 	mov	r6,r23
 8005670:	e00b883a 	mov	r5,fp
 8005674:	d8c00015 	stw	r3,0(sp)
 8005678:	80065b40 	call	80065b4 <memmove>
 800567c:	80800217 	ldw	r2,8(r16)
 8005680:	81000017 	ldw	r4,0(r16)
 8005684:	b827883a 	mov	r19,r23
 8005688:	15c5c83a 	sub	r2,r2,r23
 800568c:	25ef883a 	add	r23,r4,r23
 8005690:	80800215 	stw	r2,8(r16)
 8005694:	85c00015 	stw	r23,0(r16)
 8005698:	d8c00017 	ldw	r3,0(sp)
 800569c:	003fc106 	br	80055a4 <__sfvwrite_r+0x274>
 80056a0:	81000017 	ldw	r4,0(r16)
 80056a4:	902f883a 	mov	r23,r18
 80056a8:	9039883a 	mov	fp,r18
 80056ac:	9027883a 	mov	r19,r18
 80056b0:	900f883a 	mov	r7,r18
 80056b4:	003f7a06 	br	80054a0 <__sfvwrite_r+0x170>
 80056b8:	b00b883a 	mov	r5,r22
 80056bc:	900d883a 	mov	r6,r18
 80056c0:	80065b40 	call	80065b4 <memmove>
 80056c4:	80c00217 	ldw	r3,8(r16)
 80056c8:	80800017 	ldw	r2,0(r16)
 80056cc:	9027883a 	mov	r19,r18
 80056d0:	1c87c83a 	sub	r3,r3,r18
 80056d4:	1485883a 	add	r2,r2,r18
 80056d8:	80c00215 	stw	r3,8(r16)
 80056dc:	80800015 	stw	r2,0(r16)
 80056e0:	9039883a 	mov	fp,r18
 80056e4:	003f7906 	br	80054cc <__sfvwrite_r+0x19c>
 80056e8:	e009883a 	mov	r4,fp
 80056ec:	01400284 	movi	r5,10
 80056f0:	900d883a 	mov	r6,r18
 80056f4:	800637c0 	call	800637c <memchr>
 80056f8:	10003c26 	beq	r2,zero,80057ec <__sfvwrite_r+0x4bc>
 80056fc:	15800044 	addi	r22,r2,1
 8005700:	b72dc83a 	sub	r22,r22,fp
 8005704:	00c00044 	movi	r3,1
 8005708:	003f9206 	br	8005554 <__sfvwrite_r+0x224>
 800570c:	81000517 	ldw	r4,20(r16)
 8005710:	81400417 	ldw	r5,16(r16)
 8005714:	80c00017 	ldw	r3,0(r16)
 8005718:	210d883a 	add	r6,r4,r4
 800571c:	3109883a 	add	r4,r6,r4
 8005720:	2026d7fa 	srli	r19,r4,31
 8005724:	1979c83a 	sub	fp,r3,r5
 8005728:	e1800044 	addi	r6,fp,1
 800572c:	9909883a 	add	r4,r19,r4
 8005730:	2027d07a 	srai	r19,r4,1
 8005734:	3489883a 	add	r4,r6,r18
 8005738:	980d883a 	mov	r6,r19
 800573c:	9900022e 	bgeu	r19,r4,8005748 <__sfvwrite_r+0x418>
 8005740:	2027883a 	mov	r19,r4
 8005744:	200d883a 	mov	r6,r4
 8005748:	1081000c 	andi	r2,r2,1024
 800574c:	10bfffcc 	andi	r2,r2,65535
 8005750:	10a0001c 	xori	r2,r2,32768
 8005754:	10a00004 	addi	r2,r2,-32768
 8005758:	a809883a 	mov	r4,r21
 800575c:	103f6b26 	beq	r2,zero,800550c <__sfvwrite_r+0x1dc>
 8005760:	300b883a 	mov	r5,r6
 8005764:	8005bf80 	call	8005bf8 <_malloc_r>
 8005768:	102f883a 	mov	r23,r2
 800576c:	103f6d26 	beq	r2,zero,8005524 <__sfvwrite_r+0x1f4>
 8005770:	81400417 	ldw	r5,16(r16)
 8005774:	1009883a 	mov	r4,r2
 8005778:	e00d883a 	mov	r6,fp
 800577c:	80064740 	call	8006474 <memcpy>
 8005780:	8080030b 	ldhu	r2,12(r16)
 8005784:	00fedfc4 	movi	r3,-1153
 8005788:	10c4703a 	and	r2,r2,r3
 800578c:	10802014 	ori	r2,r2,128
 8005790:	8080030d 	sth	r2,12(r16)
 8005794:	bf09883a 	add	r4,r23,fp
 8005798:	9f07c83a 	sub	r3,r19,fp
 800579c:	85c00415 	stw	r23,16(r16)
 80057a0:	84c00515 	stw	r19,20(r16)
 80057a4:	81000015 	stw	r4,0(r16)
 80057a8:	902f883a 	mov	r23,r18
 80057ac:	80c00215 	stw	r3,8(r16)
 80057b0:	9039883a 	mov	fp,r18
 80057b4:	9027883a 	mov	r19,r18
 80057b8:	900f883a 	mov	r7,r18
 80057bc:	003f3806 	br	80054a0 <__sfvwrite_r+0x170>
 80057c0:	b00b883a 	mov	r5,r22
 80057c4:	980d883a 	mov	r6,r19
 80057c8:	80065b40 	call	80065b4 <memmove>
 80057cc:	80800017 	ldw	r2,0(r16)
 80057d0:	a809883a 	mov	r4,r21
 80057d4:	800b883a 	mov	r5,r16
 80057d8:	14c5883a 	add	r2,r2,r19
 80057dc:	80800015 	stw	r2,0(r16)
 80057e0:	8004a200 	call	8004a20 <_fflush_r>
 80057e4:	103f3926 	beq	r2,zero,80054cc <__sfvwrite_r+0x19c>
 80057e8:	003f5006 	br	800552c <__sfvwrite_r+0x1fc>
 80057ec:	95800044 	addi	r22,r18,1
 80057f0:	00c00044 	movi	r3,1
 80057f4:	003f5706 	br	8005554 <__sfvwrite_r+0x224>
 80057f8:	80c0030b 	ldhu	r3,12(r16)
 80057fc:	00bfffc4 	movi	r2,-1
 8005800:	18c01014 	ori	r3,r3,64
 8005804:	80c0030d 	sth	r3,12(r16)
 8005808:	00c00244 	movi	r3,9
 800580c:	a8c00015 	stw	r3,0(r21)
 8005810:	003ef906 	br	80053f8 <__sfvwrite_r+0xc8>

08005814 <_fwalk>:
 8005814:	defff904 	addi	sp,sp,-28
 8005818:	dcc00315 	stw	r19,12(sp)
 800581c:	24c0b804 	addi	r19,r4,736
 8005820:	dd400515 	stw	r21,20(sp)
 8005824:	dd000415 	stw	r20,16(sp)
 8005828:	dfc00615 	stw	ra,24(sp)
 800582c:	dc800215 	stw	r18,8(sp)
 8005830:	dc400115 	stw	r17,4(sp)
 8005834:	dc000015 	stw	r16,0(sp)
 8005838:	282b883a 	mov	r21,r5
 800583c:	0029883a 	mov	r20,zero
 8005840:	8004ee40 	call	8004ee4 <__sfp_lock_acquire>
 8005844:	98001226 	beq	r19,zero,8005890 <_fwalk+0x7c>
 8005848:	04bfffc4 	movi	r18,-1
 800584c:	9c400117 	ldw	r17,4(r19)
 8005850:	9c000217 	ldw	r16,8(r19)
 8005854:	8c7fffc4 	addi	r17,r17,-1
 8005858:	88000b16 	blt	r17,zero,8005888 <_fwalk+0x74>
 800585c:	84000304 	addi	r16,r16,12
 8005860:	80c0000f 	ldh	r3,0(r16)
 8005864:	8c7fffc4 	addi	r17,r17,-1
 8005868:	813ffd04 	addi	r4,r16,-12
 800586c:	18000426 	beq	r3,zero,8005880 <_fwalk+0x6c>
 8005870:	80c0008f 	ldh	r3,2(r16)
 8005874:	1c800226 	beq	r3,r18,8005880 <_fwalk+0x6c>
 8005878:	a83ee83a 	callr	r21
 800587c:	a0a8b03a 	or	r20,r20,r2
 8005880:	84001704 	addi	r16,r16,92
 8005884:	8cbff61e 	bne	r17,r18,8005860 <_fwalk+0x4c>
 8005888:	9cc00017 	ldw	r19,0(r19)
 800588c:	983fef1e 	bne	r19,zero,800584c <_fwalk+0x38>
 8005890:	8004ee80 	call	8004ee8 <__sfp_lock_release>
 8005894:	a005883a 	mov	r2,r20
 8005898:	dfc00617 	ldw	ra,24(sp)
 800589c:	dd400517 	ldw	r21,20(sp)
 80058a0:	dd000417 	ldw	r20,16(sp)
 80058a4:	dcc00317 	ldw	r19,12(sp)
 80058a8:	dc800217 	ldw	r18,8(sp)
 80058ac:	dc400117 	ldw	r17,4(sp)
 80058b0:	dc000017 	ldw	r16,0(sp)
 80058b4:	dec00704 	addi	sp,sp,28
 80058b8:	f800283a 	ret

080058bc <_fwalk_reent>:
 80058bc:	defff804 	addi	sp,sp,-32
 80058c0:	dcc00315 	stw	r19,12(sp)
 80058c4:	24c0b804 	addi	r19,r4,736
 80058c8:	dd800615 	stw	r22,24(sp)
 80058cc:	dd400515 	stw	r21,20(sp)
 80058d0:	dd000415 	stw	r20,16(sp)
 80058d4:	dfc00715 	stw	ra,28(sp)
 80058d8:	dc800215 	stw	r18,8(sp)
 80058dc:	dc400115 	stw	r17,4(sp)
 80058e0:	dc000015 	stw	r16,0(sp)
 80058e4:	2029883a 	mov	r20,r4
 80058e8:	282b883a 	mov	r21,r5
 80058ec:	002d883a 	mov	r22,zero
 80058f0:	8004ee40 	call	8004ee4 <__sfp_lock_acquire>
 80058f4:	98001326 	beq	r19,zero,8005944 <_fwalk_reent+0x88>
 80058f8:	04bfffc4 	movi	r18,-1
 80058fc:	9c400117 	ldw	r17,4(r19)
 8005900:	9c000217 	ldw	r16,8(r19)
 8005904:	8c7fffc4 	addi	r17,r17,-1
 8005908:	88000c16 	blt	r17,zero,800593c <_fwalk_reent+0x80>
 800590c:	84000304 	addi	r16,r16,12
 8005910:	80c0000f 	ldh	r3,0(r16)
 8005914:	8c7fffc4 	addi	r17,r17,-1
 8005918:	817ffd04 	addi	r5,r16,-12
 800591c:	18000526 	beq	r3,zero,8005934 <_fwalk_reent+0x78>
 8005920:	80c0008f 	ldh	r3,2(r16)
 8005924:	a009883a 	mov	r4,r20
 8005928:	1c800226 	beq	r3,r18,8005934 <_fwalk_reent+0x78>
 800592c:	a83ee83a 	callr	r21
 8005930:	b0acb03a 	or	r22,r22,r2
 8005934:	84001704 	addi	r16,r16,92
 8005938:	8cbff51e 	bne	r17,r18,8005910 <_fwalk_reent+0x54>
 800593c:	9cc00017 	ldw	r19,0(r19)
 8005940:	983fee1e 	bne	r19,zero,80058fc <_fwalk_reent+0x40>
 8005944:	8004ee80 	call	8004ee8 <__sfp_lock_release>
 8005948:	b005883a 	mov	r2,r22
 800594c:	dfc00717 	ldw	ra,28(sp)
 8005950:	dd800617 	ldw	r22,24(sp)
 8005954:	dd400517 	ldw	r21,20(sp)
 8005958:	dd000417 	ldw	r20,16(sp)
 800595c:	dcc00317 	ldw	r19,12(sp)
 8005960:	dc800217 	ldw	r18,8(sp)
 8005964:	dc400117 	ldw	r17,4(sp)
 8005968:	dc000017 	ldw	r16,0(sp)
 800596c:	dec00804 	addi	sp,sp,32
 8005970:	f800283a 	ret

08005974 <_setlocale_r>:
 8005974:	defffc04 	addi	sp,sp,-16
 8005978:	dc800215 	stw	r18,8(sp)
 800597c:	dc400115 	stw	r17,4(sp)
 8005980:	dc000015 	stw	r16,0(sp)
 8005984:	dfc00315 	stw	ra,12(sp)
 8005988:	3021883a 	mov	r16,r6
 800598c:	2023883a 	mov	r17,r4
 8005990:	2825883a 	mov	r18,r5
 8005994:	30001626 	beq	r6,zero,80059f0 <_setlocale_r+0x7c>
 8005998:	3009883a 	mov	r4,r6
 800599c:	01420074 	movhi	r5,2049
 80059a0:	2974c804 	addi	r5,r5,-11488
 80059a4:	80080700 	call	8008070 <strcmp>
 80059a8:	10000a1e 	bne	r2,zero,80059d4 <_setlocale_r+0x60>
 80059ac:	8c800c15 	stw	r18,48(r17)
 80059b0:	8c000d15 	stw	r16,52(r17)
 80059b4:	00820074 	movhi	r2,2049
 80059b8:	10b4c804 	addi	r2,r2,-11488
 80059bc:	dfc00317 	ldw	ra,12(sp)
 80059c0:	dc800217 	ldw	r18,8(sp)
 80059c4:	dc400117 	ldw	r17,4(sp)
 80059c8:	dc000017 	ldw	r16,0(sp)
 80059cc:	dec00404 	addi	sp,sp,16
 80059d0:	f800283a 	ret
 80059d4:	8009883a 	mov	r4,r16
 80059d8:	01420074 	movhi	r5,2049
 80059dc:	2974d204 	addi	r5,r5,-11448
 80059e0:	80080700 	call	8008070 <strcmp>
 80059e4:	103ff126 	beq	r2,zero,80059ac <_setlocale_r+0x38>
 80059e8:	0005883a 	mov	r2,zero
 80059ec:	003ff306 	br	80059bc <_setlocale_r+0x48>
 80059f0:	00820074 	movhi	r2,2049
 80059f4:	10b4c804 	addi	r2,r2,-11488
 80059f8:	dfc00317 	ldw	ra,12(sp)
 80059fc:	dc800217 	ldw	r18,8(sp)
 8005a00:	dc400117 	ldw	r17,4(sp)
 8005a04:	dc000017 	ldw	r16,0(sp)
 8005a08:	dec00404 	addi	sp,sp,16
 8005a0c:	f800283a 	ret

08005a10 <__locale_charset>:
 8005a10:	00820074 	movhi	r2,2049
 8005a14:	10b4e704 	addi	r2,r2,-11364
 8005a18:	f800283a 	ret

08005a1c <_localeconv_r>:
 8005a1c:	00820074 	movhi	r2,2049
 8005a20:	10b4eb04 	addi	r2,r2,-11348
 8005a24:	f800283a 	ret

08005a28 <setlocale>:
 8005a28:	00c20074 	movhi	r3,2049
 8005a2c:	18fc1804 	addi	r3,r3,-4000
 8005a30:	2005883a 	mov	r2,r4
 8005a34:	19000017 	ldw	r4,0(r3)
 8005a38:	280d883a 	mov	r6,r5
 8005a3c:	100b883a 	mov	r5,r2
 8005a40:	80059741 	jmpi	8005974 <_setlocale_r>

08005a44 <localeconv>:
 8005a44:	00820074 	movhi	r2,2049
 8005a48:	10b4eb04 	addi	r2,r2,-11348
 8005a4c:	f800283a 	ret

08005a50 <__smakebuf_r>:
 8005a50:	2880030b 	ldhu	r2,12(r5)
 8005a54:	deffed04 	addi	sp,sp,-76
 8005a58:	dc401015 	stw	r17,64(sp)
 8005a5c:	10c0008c 	andi	r3,r2,2
 8005a60:	18ffffcc 	andi	r3,r3,65535
 8005a64:	18e0001c 	xori	r3,r3,32768
 8005a68:	dc000f15 	stw	r16,60(sp)
 8005a6c:	dfc01215 	stw	ra,72(sp)
 8005a70:	dc801115 	stw	r18,68(sp)
 8005a74:	18e00004 	addi	r3,r3,-32768
 8005a78:	2821883a 	mov	r16,r5
 8005a7c:	2023883a 	mov	r17,r4
 8005a80:	1800381e 	bne	r3,zero,8005b64 <__smakebuf_r+0x114>
 8005a84:	2940038f 	ldh	r5,14(r5)
 8005a88:	28002d16 	blt	r5,zero,8005b40 <__smakebuf_r+0xf0>
 8005a8c:	d80d883a 	mov	r6,sp
 8005a90:	80084000 	call	8008400 <_fstat_r>
 8005a94:	10002916 	blt	r2,zero,8005b3c <__smakebuf_r+0xec>
 8005a98:	d8800117 	ldw	r2,4(sp)
 8005a9c:	00e00014 	movui	r3,32768
 8005aa0:	10bc000c 	andi	r2,r2,61440
 8005aa4:	10c03c26 	beq	r2,r3,8005b98 <__smakebuf_r+0x148>
 8005aa8:	80c0030b 	ldhu	r3,12(r16)
 8005aac:	18c20014 	ori	r3,r3,2048
 8005ab0:	80c0030d 	sth	r3,12(r16)
 8005ab4:	00c80004 	movi	r3,8192
 8005ab8:	10c00c1e 	bne	r2,r3,8005aec <__smakebuf_r+0x9c>
 8005abc:	8140038f 	ldh	r5,14(r16)
 8005ac0:	8809883a 	mov	r4,r17
 8005ac4:	80084680 	call	8008468 <_isatty_r>
 8005ac8:	10000826 	beq	r2,zero,8005aec <__smakebuf_r+0x9c>
 8005acc:	80c0030b 	ldhu	r3,12(r16)
 8005ad0:	808010c4 	addi	r2,r16,67
 8005ad4:	80800015 	stw	r2,0(r16)
 8005ad8:	18c00054 	ori	r3,r3,1
 8005adc:	80800415 	stw	r2,16(r16)
 8005ae0:	00800044 	movi	r2,1
 8005ae4:	80c0030d 	sth	r3,12(r16)
 8005ae8:	80800515 	stw	r2,20(r16)
 8005aec:	04810004 	movi	r18,1024
 8005af0:	8809883a 	mov	r4,r17
 8005af4:	900b883a 	mov	r5,r18
 8005af8:	8005bf80 	call	8005bf8 <_malloc_r>
 8005afc:	10003026 	beq	r2,zero,8005bc0 <__smakebuf_r+0x170>
 8005b00:	80c0030b 	ldhu	r3,12(r16)
 8005b04:	01020034 	movhi	r4,2048
 8005b08:	21131204 	addi	r4,r4,19528
 8005b0c:	89000f15 	stw	r4,60(r17)
 8005b10:	18c02014 	ori	r3,r3,128
 8005b14:	80c0030d 	sth	r3,12(r16)
 8005b18:	80800015 	stw	r2,0(r16)
 8005b1c:	80800415 	stw	r2,16(r16)
 8005b20:	84800515 	stw	r18,20(r16)
 8005b24:	dfc01217 	ldw	ra,72(sp)
 8005b28:	dc801117 	ldw	r18,68(sp)
 8005b2c:	dc401017 	ldw	r17,64(sp)
 8005b30:	dc000f17 	ldw	r16,60(sp)
 8005b34:	dec01304 	addi	sp,sp,76
 8005b38:	f800283a 	ret
 8005b3c:	8080030b 	ldhu	r2,12(r16)
 8005b40:	10c0200c 	andi	r3,r2,128
 8005b44:	18ffffcc 	andi	r3,r3,65535
 8005b48:	18e0001c 	xori	r3,r3,32768
 8005b4c:	18e00004 	addi	r3,r3,-32768
 8005b50:	18000f1e 	bne	r3,zero,8005b90 <__smakebuf_r+0x140>
 8005b54:	04810004 	movi	r18,1024
 8005b58:	10820014 	ori	r2,r2,2048
 8005b5c:	8080030d 	sth	r2,12(r16)
 8005b60:	003fe306 	br	8005af0 <__smakebuf_r+0xa0>
 8005b64:	288010c4 	addi	r2,r5,67
 8005b68:	28800015 	stw	r2,0(r5)
 8005b6c:	28800415 	stw	r2,16(r5)
 8005b70:	00800044 	movi	r2,1
 8005b74:	28800515 	stw	r2,20(r5)
 8005b78:	dfc01217 	ldw	ra,72(sp)
 8005b7c:	dc801117 	ldw	r18,68(sp)
 8005b80:	dc401017 	ldw	r17,64(sp)
 8005b84:	dc000f17 	ldw	r16,60(sp)
 8005b88:	dec01304 	addi	sp,sp,76
 8005b8c:	f800283a 	ret
 8005b90:	04801004 	movi	r18,64
 8005b94:	003ff006 	br	8005b58 <__smakebuf_r+0x108>
 8005b98:	81000a17 	ldw	r4,40(r16)
 8005b9c:	00c20074 	movhi	r3,2049
 8005ba0:	18e00304 	addi	r3,r3,-32756
 8005ba4:	20ffc01e 	bne	r4,r3,8005aa8 <__smakebuf_r+0x58>
 8005ba8:	8080030b 	ldhu	r2,12(r16)
 8005bac:	00c10004 	movi	r3,1024
 8005bb0:	80c01315 	stw	r3,76(r16)
 8005bb4:	10c4b03a 	or	r2,r2,r3
 8005bb8:	8080030d 	sth	r2,12(r16)
 8005bbc:	003fcb06 	br	8005aec <__smakebuf_r+0x9c>
 8005bc0:	8080030b 	ldhu	r2,12(r16)
 8005bc4:	10c0800c 	andi	r3,r2,512
 8005bc8:	18ffffcc 	andi	r3,r3,65535
 8005bcc:	18e0001c 	xori	r3,r3,32768
 8005bd0:	18e00004 	addi	r3,r3,-32768
 8005bd4:	183fd31e 	bne	r3,zero,8005b24 <__smakebuf_r+0xd4>
 8005bd8:	10800094 	ori	r2,r2,2
 8005bdc:	80c010c4 	addi	r3,r16,67
 8005be0:	8080030d 	sth	r2,12(r16)
 8005be4:	00800044 	movi	r2,1
 8005be8:	80c00015 	stw	r3,0(r16)
 8005bec:	80c00415 	stw	r3,16(r16)
 8005bf0:	80800515 	stw	r2,20(r16)
 8005bf4:	003fcb06 	br	8005b24 <__smakebuf_r+0xd4>

08005bf8 <_malloc_r>:
 8005bf8:	defff604 	addi	sp,sp,-40
 8005bfc:	dc800215 	stw	r18,8(sp)
 8005c00:	dfc00915 	stw	ra,36(sp)
 8005c04:	df000815 	stw	fp,32(sp)
 8005c08:	ddc00715 	stw	r23,28(sp)
 8005c0c:	dd800615 	stw	r22,24(sp)
 8005c10:	dd400515 	stw	r21,20(sp)
 8005c14:	dd000415 	stw	r20,16(sp)
 8005c18:	dcc00315 	stw	r19,12(sp)
 8005c1c:	dc400115 	stw	r17,4(sp)
 8005c20:	dc000015 	stw	r16,0(sp)
 8005c24:	288002c4 	addi	r2,r5,11
 8005c28:	00c00584 	movi	r3,22
 8005c2c:	2025883a 	mov	r18,r4
 8005c30:	18802b2e 	bgeu	r3,r2,8005ce0 <_malloc_r+0xe8>
 8005c34:	047ffe04 	movi	r17,-8
 8005c38:	1462703a 	and	r17,r2,r17
 8005c3c:	88002a16 	blt	r17,zero,8005ce8 <_malloc_r+0xf0>
 8005c40:	89402936 	bltu	r17,r5,8005ce8 <_malloc_r+0xf0>
 8005c44:	9009883a 	mov	r4,r18
 8005c48:	800ab980 	call	800ab98 <__malloc_lock>
 8005c4c:	00807dc4 	movi	r2,503
 8005c50:	14402936 	bltu	r2,r17,8005cf8 <_malloc_r+0x100>
 8005c54:	8808d0fa 	srli	r4,r17,3
 8005c58:	04c20074 	movhi	r19,2049
 8005c5c:	9cf69304 	addi	r19,r19,-9652
 8005c60:	2105883a 	add	r2,r4,r4
 8005c64:	1085883a 	add	r2,r2,r2
 8005c68:	1085883a 	add	r2,r2,r2
 8005c6c:	9885883a 	add	r2,r19,r2
 8005c70:	14000317 	ldw	r16,12(r2)
 8005c74:	80815526 	beq	r16,r2,80061cc <_malloc_r+0x5d4>
 8005c78:	81000117 	ldw	r4,4(r16)
 8005c7c:	00bfff04 	movi	r2,-4
 8005c80:	80c00317 	ldw	r3,12(r16)
 8005c84:	2084703a 	and	r2,r4,r2
 8005c88:	8085883a 	add	r2,r16,r2
 8005c8c:	11800117 	ldw	r6,4(r2)
 8005c90:	81400217 	ldw	r5,8(r16)
 8005c94:	9009883a 	mov	r4,r18
 8005c98:	31800054 	ori	r6,r6,1
 8005c9c:	11800115 	stw	r6,4(r2)
 8005ca0:	28c00315 	stw	r3,12(r5)
 8005ca4:	19400215 	stw	r5,8(r3)
 8005ca8:	800abb80 	call	800abb8 <__malloc_unlock>
 8005cac:	80800204 	addi	r2,r16,8
 8005cb0:	dfc00917 	ldw	ra,36(sp)
 8005cb4:	df000817 	ldw	fp,32(sp)
 8005cb8:	ddc00717 	ldw	r23,28(sp)
 8005cbc:	dd800617 	ldw	r22,24(sp)
 8005cc0:	dd400517 	ldw	r21,20(sp)
 8005cc4:	dd000417 	ldw	r20,16(sp)
 8005cc8:	dcc00317 	ldw	r19,12(sp)
 8005ccc:	dc800217 	ldw	r18,8(sp)
 8005cd0:	dc400117 	ldw	r17,4(sp)
 8005cd4:	dc000017 	ldw	r16,0(sp)
 8005cd8:	dec00a04 	addi	sp,sp,40
 8005cdc:	f800283a 	ret
 8005ce0:	04400404 	movi	r17,16
 8005ce4:	897fd72e 	bgeu	r17,r5,8005c44 <_malloc_r+0x4c>
 8005ce8:	00800304 	movi	r2,12
 8005cec:	90800015 	stw	r2,0(r18)
 8005cf0:	0005883a 	mov	r2,zero
 8005cf4:	003fee06 	br	8005cb0 <_malloc_r+0xb8>
 8005cf8:	8808d27a 	srli	r4,r17,9
 8005cfc:	20007126 	beq	r4,zero,8005ec4 <_malloc_r+0x2cc>
 8005d00:	00800104 	movi	r2,4
 8005d04:	1100eb36 	bltu	r2,r4,80060b4 <_malloc_r+0x4bc>
 8005d08:	8808d1ba 	srli	r4,r17,6
 8005d0c:	21000e04 	addi	r4,r4,56
 8005d10:	210b883a 	add	r5,r4,r4
 8005d14:	294b883a 	add	r5,r5,r5
 8005d18:	294b883a 	add	r5,r5,r5
 8005d1c:	04c20074 	movhi	r19,2049
 8005d20:	9cf69304 	addi	r19,r19,-9652
 8005d24:	994b883a 	add	r5,r19,r5
 8005d28:	2c000317 	ldw	r16,12(r5)
 8005d2c:	2c000e26 	beq	r5,r16,8005d68 <_malloc_r+0x170>
 8005d30:	80c00117 	ldw	r3,4(r16)
 8005d34:	01ffff04 	movi	r7,-4
 8005d38:	018003c4 	movi	r6,15
 8005d3c:	19c6703a 	and	r3,r3,r7
 8005d40:	1c45c83a 	sub	r2,r3,r17
 8005d44:	30800716 	blt	r6,r2,8005d64 <_malloc_r+0x16c>
 8005d48:	1000610e 	bge	r2,zero,8005ed0 <_malloc_r+0x2d8>
 8005d4c:	84000317 	ldw	r16,12(r16)
 8005d50:	2c000526 	beq	r5,r16,8005d68 <_malloc_r+0x170>
 8005d54:	80c00117 	ldw	r3,4(r16)
 8005d58:	19c6703a 	and	r3,r3,r7
 8005d5c:	1c45c83a 	sub	r2,r3,r17
 8005d60:	30bff90e 	bge	r6,r2,8005d48 <_malloc_r+0x150>
 8005d64:	213fffc4 	addi	r4,r4,-1
 8005d68:	21000044 	addi	r4,r4,1
 8005d6c:	9c000417 	ldw	r16,16(r19)
 8005d70:	00c20074 	movhi	r3,2049
 8005d74:	18f69304 	addi	r3,r3,-9652
 8005d78:	1a400204 	addi	r9,r3,8
 8005d7c:	8240ff26 	beq	r16,r9,800617c <_malloc_r+0x584>
 8005d80:	81400117 	ldw	r5,4(r16)
 8005d84:	00bfff04 	movi	r2,-4
 8005d88:	018003c4 	movi	r6,15
 8005d8c:	2884703a 	and	r2,r5,r2
 8005d90:	144bc83a 	sub	r5,r2,r17
 8005d94:	3140ea16 	blt	r6,r5,8006140 <_malloc_r+0x548>
 8005d98:	1a400515 	stw	r9,20(r3)
 8005d9c:	1a400415 	stw	r9,16(r3)
 8005da0:	2800570e 	bge	r5,zero,8005f00 <_malloc_r+0x308>
 8005da4:	01407fc4 	movi	r5,511
 8005da8:	2880ca36 	bltu	r5,r2,80060d4 <_malloc_r+0x4dc>
 8005dac:	1004d0fa 	srli	r2,r2,3
 8005db0:	02000044 	movi	r8,1
 8005db4:	19c00117 	ldw	r7,4(r3)
 8005db8:	108b883a 	add	r5,r2,r2
 8005dbc:	294b883a 	add	r5,r5,r5
 8005dc0:	1005d0ba 	srai	r2,r2,2
 8005dc4:	294b883a 	add	r5,r5,r5
 8005dc8:	28cb883a 	add	r5,r5,r3
 8005dcc:	29800217 	ldw	r6,8(r5)
 8005dd0:	4084983a 	sll	r2,r8,r2
 8005dd4:	81400315 	stw	r5,12(r16)
 8005dd8:	81800215 	stw	r6,8(r16)
 8005ddc:	11c4b03a 	or	r2,r2,r7
 8005de0:	18800115 	stw	r2,4(r3)
 8005de4:	2c000215 	stw	r16,8(r5)
 8005de8:	34000315 	stw	r16,12(r6)
 8005dec:	200bd0ba 	srai	r5,r4,2
 8005df0:	00c00044 	movi	r3,1
 8005df4:	194a983a 	sll	r5,r3,r5
 8005df8:	11404936 	bltu	r2,r5,8005f20 <_malloc_r+0x328>
 8005dfc:	1146703a 	and	r3,r2,r5
 8005e00:	18000a1e 	bne	r3,zero,8005e2c <_malloc_r+0x234>
 8005e04:	00ffff04 	movi	r3,-4
 8005e08:	294b883a 	add	r5,r5,r5
 8005e0c:	20c8703a 	and	r4,r4,r3
 8005e10:	1146703a 	and	r3,r2,r5
 8005e14:	21000104 	addi	r4,r4,4
 8005e18:	1800041e 	bne	r3,zero,8005e2c <_malloc_r+0x234>
 8005e1c:	294b883a 	add	r5,r5,r5
 8005e20:	1146703a 	and	r3,r2,r5
 8005e24:	21000104 	addi	r4,r4,4
 8005e28:	183ffc26 	beq	r3,zero,8005e1c <_malloc_r+0x224>
 8005e2c:	023fff04 	movi	r8,-4
 8005e30:	01c003c4 	movi	r7,15
 8005e34:	2105883a 	add	r2,r4,r4
 8005e38:	1085883a 	add	r2,r2,r2
 8005e3c:	1085883a 	add	r2,r2,r2
 8005e40:	9899883a 	add	r12,r19,r2
 8005e44:	62800304 	addi	r10,r12,12
 8005e48:	2017883a 	mov	r11,r4
 8005e4c:	54000017 	ldw	r16,0(r10)
 8005e50:	51bffd04 	addi	r6,r10,-12
 8005e54:	8180041e 	bne	r16,r6,8005e68 <_malloc_r+0x270>
 8005e58:	0000ca06 	br	8006184 <_malloc_r+0x58c>
 8005e5c:	10001c0e 	bge	r2,zero,8005ed0 <_malloc_r+0x2d8>
 8005e60:	84000317 	ldw	r16,12(r16)
 8005e64:	8180c726 	beq	r16,r6,8006184 <_malloc_r+0x58c>
 8005e68:	80c00117 	ldw	r3,4(r16)
 8005e6c:	1a06703a 	and	r3,r3,r8
 8005e70:	1c45c83a 	sub	r2,r3,r17
 8005e74:	38bff90e 	bge	r7,r2,8005e5c <_malloc_r+0x264>
 8005e78:	81000317 	ldw	r4,12(r16)
 8005e7c:	81400217 	ldw	r5,8(r16)
 8005e80:	8447883a 	add	r3,r16,r17
 8005e84:	8c400054 	ori	r17,r17,1
 8005e88:	29000315 	stw	r4,12(r5)
 8005e8c:	21400215 	stw	r5,8(r4)
 8005e90:	84400115 	stw	r17,4(r16)
 8005e94:	1889883a 	add	r4,r3,r2
 8005e98:	11400054 	ori	r5,r2,1
 8005e9c:	98c00515 	stw	r3,20(r19)
 8005ea0:	98c00415 	stw	r3,16(r19)
 8005ea4:	20800015 	stw	r2,0(r4)
 8005ea8:	1a400315 	stw	r9,12(r3)
 8005eac:	1a400215 	stw	r9,8(r3)
 8005eb0:	19400115 	stw	r5,4(r3)
 8005eb4:	9009883a 	mov	r4,r18
 8005eb8:	800abb80 	call	800abb8 <__malloc_unlock>
 8005ebc:	80800204 	addi	r2,r16,8
 8005ec0:	003f7b06 	br	8005cb0 <_malloc_r+0xb8>
 8005ec4:	8808d0fa 	srli	r4,r17,3
 8005ec8:	210b883a 	add	r5,r4,r4
 8005ecc:	003f9106 	br	8005d14 <_malloc_r+0x11c>
 8005ed0:	80c7883a 	add	r3,r16,r3
 8005ed4:	19400117 	ldw	r5,4(r3)
 8005ed8:	80800317 	ldw	r2,12(r16)
 8005edc:	81000217 	ldw	r4,8(r16)
 8005ee0:	29400054 	ori	r5,r5,1
 8005ee4:	19400115 	stw	r5,4(r3)
 8005ee8:	20800315 	stw	r2,12(r4)
 8005eec:	11000215 	stw	r4,8(r2)
 8005ef0:	9009883a 	mov	r4,r18
 8005ef4:	800abb80 	call	800abb8 <__malloc_unlock>
 8005ef8:	80800204 	addi	r2,r16,8
 8005efc:	003f6c06 	br	8005cb0 <_malloc_r+0xb8>
 8005f00:	8085883a 	add	r2,r16,r2
 8005f04:	10c00117 	ldw	r3,4(r2)
 8005f08:	9009883a 	mov	r4,r18
 8005f0c:	18c00054 	ori	r3,r3,1
 8005f10:	10c00115 	stw	r3,4(r2)
 8005f14:	800abb80 	call	800abb8 <__malloc_unlock>
 8005f18:	80800204 	addi	r2,r16,8
 8005f1c:	003f6406 	br	8005cb0 <_malloc_r+0xb8>
 8005f20:	9c000217 	ldw	r16,8(r19)
 8005f24:	00bfff04 	movi	r2,-4
 8005f28:	85400117 	ldw	r21,4(r16)
 8005f2c:	a8aa703a 	and	r21,r21,r2
 8005f30:	ac400336 	bltu	r21,r17,8005f40 <_malloc_r+0x348>
 8005f34:	ac45c83a 	sub	r2,r21,r17
 8005f38:	00c003c4 	movi	r3,15
 8005f3c:	18805316 	blt	r3,r2,800608c <_malloc_r+0x494>
 8005f40:	d5e6aa17 	ldw	r23,-25944(gp)
 8005f44:	d0e00317 	ldw	r3,-32756(gp)
 8005f48:	00bfffc4 	movi	r2,-1
 8005f4c:	8579883a 	add	fp,r16,r21
 8005f50:	8def883a 	add	r23,r17,r23
 8005f54:	1880d226 	beq	r3,r2,80062a0 <_malloc_r+0x6a8>
 8005f58:	bdc403c4 	addi	r23,r23,4111
 8005f5c:	00bc0004 	movi	r2,-4096
 8005f60:	b8ae703a 	and	r23,r23,r2
 8005f64:	9009883a 	mov	r4,r18
 8005f68:	b80b883a 	mov	r5,r23
 8005f6c:	8007ecc0 	call	8007ecc <_sbrk_r>
 8005f70:	1029883a 	mov	r20,r2
 8005f74:	00bfffc4 	movi	r2,-1
 8005f78:	a080d126 	beq	r20,r2,80062c0 <_malloc_r+0x6c8>
 8005f7c:	a7009f36 	bltu	r20,fp,80061fc <_malloc_r+0x604>
 8005f80:	05820074 	movhi	r22,2049
 8005f84:	b582cb04 	addi	r22,r22,2860
 8005f88:	b0800017 	ldw	r2,0(r22)
 8005f8c:	b885883a 	add	r2,r23,r2
 8005f90:	b0800015 	stw	r2,0(r22)
 8005f94:	e500cf26 	beq	fp,r20,80062d4 <_malloc_r+0x6dc>
 8005f98:	d1200317 	ldw	r4,-32756(gp)
 8005f9c:	00ffffc4 	movi	r3,-1
 8005fa0:	20c0e026 	beq	r4,r3,8006324 <_malloc_r+0x72c>
 8005fa4:	a739c83a 	sub	fp,r20,fp
 8005fa8:	1705883a 	add	r2,r2,fp
 8005fac:	b0800015 	stw	r2,0(r22)
 8005fb0:	a08001cc 	andi	r2,r20,7
 8005fb4:	1000a526 	beq	r2,zero,800624c <_malloc_r+0x654>
 8005fb8:	a0a9c83a 	sub	r20,r20,r2
 8005fbc:	00c40204 	movi	r3,4104
 8005fc0:	a5000204 	addi	r20,r20,8
 8005fc4:	1885c83a 	sub	r2,r3,r2
 8005fc8:	a5c7883a 	add	r3,r20,r23
 8005fcc:	18c3ffcc 	andi	r3,r3,4095
 8005fd0:	10efc83a 	sub	r23,r2,r3
 8005fd4:	9009883a 	mov	r4,r18
 8005fd8:	b80b883a 	mov	r5,r23
 8005fdc:	8007ecc0 	call	8007ecc <_sbrk_r>
 8005fe0:	00ffffc4 	movi	r3,-1
 8005fe4:	10c0cc26 	beq	r2,r3,8006318 <_malloc_r+0x720>
 8005fe8:	1505c83a 	sub	r2,r2,r20
 8005fec:	b887883a 	add	r3,r23,r2
 8005ff0:	18c00054 	ori	r3,r3,1
 8005ff4:	b0800017 	ldw	r2,0(r22)
 8005ff8:	9d000215 	stw	r20,8(r19)
 8005ffc:	a0c00115 	stw	r3,4(r20)
 8006000:	b885883a 	add	r2,r23,r2
 8006004:	b0800015 	stw	r2,0(r22)
 8006008:	84c00e26 	beq	r16,r19,8006044 <_malloc_r+0x44c>
 800600c:	00c003c4 	movi	r3,15
 8006010:	1d40902e 	bgeu	r3,r21,8006254 <_malloc_r+0x65c>
 8006014:	ad7ffd04 	addi	r21,r21,-12
 8006018:	013ffe04 	movi	r4,-8
 800601c:	a908703a 	and	r4,r21,r4
 8006020:	810b883a 	add	r5,r16,r4
 8006024:	01800144 	movi	r6,5
 8006028:	29800115 	stw	r6,4(r5)
 800602c:	29800215 	stw	r6,8(r5)
 8006030:	81400117 	ldw	r5,4(r16)
 8006034:	2940004c 	andi	r5,r5,1
 8006038:	214ab03a 	or	r5,r4,r5
 800603c:	81400115 	stw	r5,4(r16)
 8006040:	1900ae36 	bltu	r3,r4,80062fc <_malloc_r+0x704>
 8006044:	d0e6a917 	ldw	r3,-25948(gp)
 8006048:	1880012e 	bgeu	r3,r2,8006050 <_malloc_r+0x458>
 800604c:	d0a6a915 	stw	r2,-25948(gp)
 8006050:	d0e6a817 	ldw	r3,-25952(gp)
 8006054:	9c000217 	ldw	r16,8(r19)
 8006058:	1880012e 	bgeu	r3,r2,8006060 <_malloc_r+0x468>
 800605c:	d0a6a815 	stw	r2,-25952(gp)
 8006060:	80c00117 	ldw	r3,4(r16)
 8006064:	00bfff04 	movi	r2,-4
 8006068:	1886703a 	and	r3,r3,r2
 800606c:	1c45c83a 	sub	r2,r3,r17
 8006070:	1c400236 	bltu	r3,r17,800607c <_malloc_r+0x484>
 8006074:	00c003c4 	movi	r3,15
 8006078:	18800416 	blt	r3,r2,800608c <_malloc_r+0x494>
 800607c:	9009883a 	mov	r4,r18
 8006080:	800abb80 	call	800abb8 <__malloc_unlock>
 8006084:	0005883a 	mov	r2,zero
 8006088:	003f0906 	br	8005cb0 <_malloc_r+0xb8>
 800608c:	88c00054 	ori	r3,r17,1
 8006090:	10800054 	ori	r2,r2,1
 8006094:	80c00115 	stw	r3,4(r16)
 8006098:	8463883a 	add	r17,r16,r17
 800609c:	88800115 	stw	r2,4(r17)
 80060a0:	9009883a 	mov	r4,r18
 80060a4:	9c400215 	stw	r17,8(r19)
 80060a8:	800abb80 	call	800abb8 <__malloc_unlock>
 80060ac:	80800204 	addi	r2,r16,8
 80060b0:	003eff06 	br	8005cb0 <_malloc_r+0xb8>
 80060b4:	00800504 	movi	r2,20
 80060b8:	1100492e 	bgeu	r2,r4,80061e0 <_malloc_r+0x5e8>
 80060bc:	00801504 	movi	r2,84
 80060c0:	11005c36 	bltu	r2,r4,8006234 <_malloc_r+0x63c>
 80060c4:	8808d33a 	srli	r4,r17,12
 80060c8:	21001b84 	addi	r4,r4,110
 80060cc:	210b883a 	add	r5,r4,r4
 80060d0:	003f1006 	br	8005d14 <_malloc_r+0x11c>
 80060d4:	1006d27a 	srli	r3,r2,9
 80060d8:	01400104 	movi	r5,4
 80060dc:	28c0432e 	bgeu	r5,r3,80061ec <_malloc_r+0x5f4>
 80060e0:	01400504 	movi	r5,20
 80060e4:	28c07036 	bltu	r5,r3,80062a8 <_malloc_r+0x6b0>
 80060e8:	194016c4 	addi	r5,r3,91
 80060ec:	294d883a 	add	r6,r5,r5
 80060f0:	318d883a 	add	r6,r6,r6
 80060f4:	318d883a 	add	r6,r6,r6
 80060f8:	998d883a 	add	r6,r19,r6
 80060fc:	30c00217 	ldw	r3,8(r6)
 8006100:	01c20074 	movhi	r7,2049
 8006104:	39f69304 	addi	r7,r7,-9652
 8006108:	19805726 	beq	r3,r6,8006268 <_malloc_r+0x670>
 800610c:	01ffff04 	movi	r7,-4
 8006110:	19400117 	ldw	r5,4(r3)
 8006114:	29ca703a 	and	r5,r5,r7
 8006118:	1140022e 	bgeu	r2,r5,8006124 <_malloc_r+0x52c>
 800611c:	18c00217 	ldw	r3,8(r3)
 8006120:	30fffb1e 	bne	r6,r3,8006110 <_malloc_r+0x518>
 8006124:	19400317 	ldw	r5,12(r3)
 8006128:	98800117 	ldw	r2,4(r19)
 800612c:	81400315 	stw	r5,12(r16)
 8006130:	80c00215 	stw	r3,8(r16)
 8006134:	2c000215 	stw	r16,8(r5)
 8006138:	1c000315 	stw	r16,12(r3)
 800613c:	003f2b06 	br	8005dec <_malloc_r+0x1f4>
 8006140:	8445883a 	add	r2,r16,r17
 8006144:	8c400054 	ori	r17,r17,1
 8006148:	18800515 	stw	r2,20(r3)
 800614c:	18800415 	stw	r2,16(r3)
 8006150:	29000054 	ori	r4,r5,1
 8006154:	1147883a 	add	r3,r2,r5
 8006158:	84400115 	stw	r17,4(r16)
 800615c:	11000115 	stw	r4,4(r2)
 8006160:	12400315 	stw	r9,12(r2)
 8006164:	12400215 	stw	r9,8(r2)
 8006168:	19400015 	stw	r5,0(r3)
 800616c:	9009883a 	mov	r4,r18
 8006170:	800abb80 	call	800abb8 <__malloc_unlock>
 8006174:	80800204 	addi	r2,r16,8
 8006178:	003ecd06 	br	8005cb0 <_malloc_r+0xb8>
 800617c:	18800117 	ldw	r2,4(r3)
 8006180:	003f1a06 	br	8005dec <_malloc_r+0x1f4>
 8006184:	5ac00044 	addi	r11,r11,1
 8006188:	588000cc 	andi	r2,r11,3
 800618c:	52800204 	addi	r10,r10,8
 8006190:	103f2e1e 	bne	r2,zero,8005e4c <_malloc_r+0x254>
 8006194:	20c000cc 	andi	r3,r4,3
 8006198:	60bffe04 	addi	r2,r12,-8
 800619c:	18006f26 	beq	r3,zero,800635c <_malloc_r+0x764>
 80061a0:	63000017 	ldw	r12,0(r12)
 80061a4:	213fffc4 	addi	r4,r4,-1
 80061a8:	60bffa26 	beq	r12,r2,8006194 <_malloc_r+0x59c>
 80061ac:	98800117 	ldw	r2,4(r19)
 80061b0:	294b883a 	add	r5,r5,r5
 80061b4:	117f5a36 	bltu	r2,r5,8005f20 <_malloc_r+0x328>
 80061b8:	283f5926 	beq	r5,zero,8005f20 <_malloc_r+0x328>
 80061bc:	1146703a 	and	r3,r2,r5
 80061c0:	18001626 	beq	r3,zero,800621c <_malloc_r+0x624>
 80061c4:	5809883a 	mov	r4,r11
 80061c8:	003f1a06 	br	8005e34 <_malloc_r+0x23c>
 80061cc:	80800204 	addi	r2,r16,8
 80061d0:	84000517 	ldw	r16,20(r16)
 80061d4:	143ea81e 	bne	r2,r16,8005c78 <_malloc_r+0x80>
 80061d8:	21000084 	addi	r4,r4,2
 80061dc:	003ee306 	br	8005d6c <_malloc_r+0x174>
 80061e0:	210016c4 	addi	r4,r4,91
 80061e4:	210b883a 	add	r5,r4,r4
 80061e8:	003eca06 	br	8005d14 <_malloc_r+0x11c>
 80061ec:	100ad1ba 	srli	r5,r2,6
 80061f0:	29400e04 	addi	r5,r5,56
 80061f4:	294d883a 	add	r6,r5,r5
 80061f8:	003fbd06 	br	80060f0 <_malloc_r+0x4f8>
 80061fc:	84ff6026 	beq	r16,r19,8005f80 <_malloc_r+0x388>
 8006200:	00820074 	movhi	r2,2049
 8006204:	10b69304 	addi	r2,r2,-9652
 8006208:	14000217 	ldw	r16,8(r2)
 800620c:	00bfff04 	movi	r2,-4
 8006210:	80c00117 	ldw	r3,4(r16)
 8006214:	1886703a 	and	r3,r3,r2
 8006218:	003f9406 	br	800606c <_malloc_r+0x474>
 800621c:	294b883a 	add	r5,r5,r5
 8006220:	1146703a 	and	r3,r2,r5
 8006224:	5ac00104 	addi	r11,r11,4
 8006228:	183ffc26 	beq	r3,zero,800621c <_malloc_r+0x624>
 800622c:	5809883a 	mov	r4,r11
 8006230:	003f0006 	br	8005e34 <_malloc_r+0x23c>
 8006234:	00805504 	movi	r2,340
 8006238:	11001336 	bltu	r2,r4,8006288 <_malloc_r+0x690>
 800623c:	8808d3fa 	srli	r4,r17,15
 8006240:	21001dc4 	addi	r4,r4,119
 8006244:	210b883a 	add	r5,r4,r4
 8006248:	003eb206 	br	8005d14 <_malloc_r+0x11c>
 800624c:	00840004 	movi	r2,4096
 8006250:	003f5d06 	br	8005fc8 <_malloc_r+0x3d0>
 8006254:	00800044 	movi	r2,1
 8006258:	a0800115 	stw	r2,4(r20)
 800625c:	a021883a 	mov	r16,r20
 8006260:	0007883a 	mov	r3,zero
 8006264:	003f8106 	br	800606c <_malloc_r+0x474>
 8006268:	280bd0ba 	srai	r5,r5,2
 800626c:	01800044 	movi	r6,1
 8006270:	38800117 	ldw	r2,4(r7)
 8006274:	314c983a 	sll	r6,r6,r5
 8006278:	180b883a 	mov	r5,r3
 800627c:	3084b03a 	or	r2,r6,r2
 8006280:	38800115 	stw	r2,4(r7)
 8006284:	003fa906 	br	800612c <_malloc_r+0x534>
 8006288:	00815504 	movi	r2,1364
 800628c:	11001836 	bltu	r2,r4,80062f0 <_malloc_r+0x6f8>
 8006290:	8808d4ba 	srli	r4,r17,18
 8006294:	21001f04 	addi	r4,r4,124
 8006298:	210b883a 	add	r5,r4,r4
 800629c:	003e9d06 	br	8005d14 <_malloc_r+0x11c>
 80062a0:	bdc00404 	addi	r23,r23,16
 80062a4:	003f2f06 	br	8005f64 <_malloc_r+0x36c>
 80062a8:	01401504 	movi	r5,84
 80062ac:	28c01f36 	bltu	r5,r3,800632c <_malloc_r+0x734>
 80062b0:	100ad33a 	srli	r5,r2,12
 80062b4:	29401b84 	addi	r5,r5,110
 80062b8:	294d883a 	add	r6,r5,r5
 80062bc:	003f8c06 	br	80060f0 <_malloc_r+0x4f8>
 80062c0:	9c000217 	ldw	r16,8(r19)
 80062c4:	00bfff04 	movi	r2,-4
 80062c8:	80c00117 	ldw	r3,4(r16)
 80062cc:	1886703a 	and	r3,r3,r2
 80062d0:	003f6606 	br	800606c <_malloc_r+0x474>
 80062d4:	e0c3ffcc 	andi	r3,fp,4095
 80062d8:	183f2f1e 	bne	r3,zero,8005f98 <_malloc_r+0x3a0>
 80062dc:	98c00217 	ldw	r3,8(r19)
 80062e0:	bd49883a 	add	r4,r23,r21
 80062e4:	21000054 	ori	r4,r4,1
 80062e8:	19000115 	stw	r4,4(r3)
 80062ec:	003f5506 	br	8006044 <_malloc_r+0x44c>
 80062f0:	01403f04 	movi	r5,252
 80062f4:	01001f84 	movi	r4,126
 80062f8:	003e8606 	br	8005d14 <_malloc_r+0x11c>
 80062fc:	9009883a 	mov	r4,r18
 8006300:	81400204 	addi	r5,r16,8
 8006304:	80050600 	call	8005060 <_free_r>
 8006308:	00820074 	movhi	r2,2049
 800630c:	1082cb04 	addi	r2,r2,2860
 8006310:	10800017 	ldw	r2,0(r2)
 8006314:	003f4b06 	br	8006044 <_malloc_r+0x44c>
 8006318:	00c00044 	movi	r3,1
 800631c:	002f883a 	mov	r23,zero
 8006320:	003f3406 	br	8005ff4 <_malloc_r+0x3fc>
 8006324:	d5200315 	stw	r20,-32756(gp)
 8006328:	003f2106 	br	8005fb0 <_malloc_r+0x3b8>
 800632c:	01405504 	movi	r5,340
 8006330:	28c00436 	bltu	r5,r3,8006344 <_malloc_r+0x74c>
 8006334:	100ad3fa 	srli	r5,r2,15
 8006338:	29401dc4 	addi	r5,r5,119
 800633c:	294d883a 	add	r6,r5,r5
 8006340:	003f6b06 	br	80060f0 <_malloc_r+0x4f8>
 8006344:	01415504 	movi	r5,1364
 8006348:	28c00936 	bltu	r5,r3,8006370 <_malloc_r+0x778>
 800634c:	100ad4ba 	srli	r5,r2,18
 8006350:	29401f04 	addi	r5,r5,124
 8006354:	294d883a 	add	r6,r5,r5
 8006358:	003f6506 	br	80060f0 <_malloc_r+0x4f8>
 800635c:	98800117 	ldw	r2,4(r19)
 8006360:	0146303a 	nor	r3,zero,r5
 8006364:	1884703a 	and	r2,r3,r2
 8006368:	98800115 	stw	r2,4(r19)
 800636c:	003f9006 	br	80061b0 <_malloc_r+0x5b8>
 8006370:	01803f04 	movi	r6,252
 8006374:	01401f84 	movi	r5,126
 8006378:	003f5d06 	br	80060f0 <_malloc_r+0x4f8>

0800637c <memchr>:
 800637c:	008000c4 	movi	r2,3
 8006380:	29403fcc 	andi	r5,r5,255
 8006384:	1180282e 	bgeu	r2,r6,8006428 <memchr+0xac>
 8006388:	2086703a 	and	r3,r4,r2
 800638c:	1800351e 	bne	r3,zero,8006464 <memchr+0xe8>
 8006390:	2816923a 	slli	r11,r5,8
 8006394:	2093883a 	add	r9,r4,r2
 8006398:	22000084 	addi	r8,r4,2
 800639c:	5957883a 	add	r11,r11,r5
 80063a0:	5816923a 	slli	r11,r11,8
 80063a4:	20c00044 	addi	r3,r4,1
 80063a8:	037fbff4 	movhi	r13,65279
 80063ac:	6b7fbfc4 	addi	r13,r13,-257
 80063b0:	5957883a 	add	r11,r11,r5
 80063b4:	5816923a 	slli	r11,r11,8
 80063b8:	03202074 	movhi	r12,32897
 80063bc:	63202004 	addi	r12,r12,-32640
 80063c0:	101d883a 	mov	r14,r2
 80063c4:	5957883a 	add	r11,r11,r5
 80063c8:	21c00017 	ldw	r7,0(r4)
 80063cc:	31bfff04 	addi	r6,r6,-4
 80063d0:	1805883a 	mov	r2,r3
 80063d4:	3acef03a 	xor	r7,r7,r11
 80063d8:	3b55883a 	add	r10,r7,r13
 80063dc:	01ce303a 	nor	r7,zero,r7
 80063e0:	51ce703a 	and	r7,r10,r7
 80063e4:	3b0e703a 	and	r7,r7,r12
 80063e8:	38000a26 	beq	r7,zero,8006414 <memchr+0x98>
 80063ec:	21c00003 	ldbu	r7,0(r4)
 80063f0:	39401e26 	beq	r7,r5,800646c <memchr+0xf0>
 80063f4:	19c00003 	ldbu	r7,0(r3)
 80063f8:	39401926 	beq	r7,r5,8006460 <memchr+0xe4>
 80063fc:	41c00003 	ldbu	r7,0(r8)
 8006400:	4005883a 	mov	r2,r8
 8006404:	39401626 	beq	r7,r5,8006460 <memchr+0xe4>
 8006408:	49c00003 	ldbu	r7,0(r9)
 800640c:	4805883a 	mov	r2,r9
 8006410:	39401326 	beq	r7,r5,8006460 <memchr+0xe4>
 8006414:	21000104 	addi	r4,r4,4
 8006418:	4a400104 	addi	r9,r9,4
 800641c:	42000104 	addi	r8,r8,4
 8006420:	18c00104 	addi	r3,r3,4
 8006424:	71bfe836 	bltu	r14,r6,80063c8 <memchr+0x4c>
 8006428:	2005883a 	mov	r2,r4
 800642c:	30000a26 	beq	r6,zero,8006458 <memchr+0xdc>
 8006430:	10c00003 	ldbu	r3,0(r2)
 8006434:	19400a26 	beq	r3,r5,8006460 <memchr+0xe4>
 8006438:	10c00044 	addi	r3,r2,1
 800643c:	118d883a 	add	r6,r2,r6
 8006440:	00000306 	br	8006450 <memchr+0xd4>
 8006444:	11000003 	ldbu	r4,0(r2)
 8006448:	18c00044 	addi	r3,r3,1
 800644c:	21400426 	beq	r4,r5,8006460 <memchr+0xe4>
 8006450:	1805883a 	mov	r2,r3
 8006454:	19bffb1e 	bne	r3,r6,8006444 <memchr+0xc8>
 8006458:	0005883a 	mov	r2,zero
 800645c:	f800283a 	ret
 8006460:	f800283a 	ret
 8006464:	2005883a 	mov	r2,r4
 8006468:	003ff106 	br	8006430 <memchr+0xb4>
 800646c:	2005883a 	mov	r2,r4
 8006470:	f800283a 	ret

08006474 <memcpy>:
 8006474:	defffb04 	addi	sp,sp,-20
 8006478:	dc000015 	stw	r16,0(sp)
 800647c:	dfc00415 	stw	ra,16(sp)
 8006480:	dcc00315 	stw	r19,12(sp)
 8006484:	dc800215 	stw	r18,8(sp)
 8006488:	dc400115 	stw	r17,4(sp)
 800648c:	00c003c4 	movi	r3,15
 8006490:	2021883a 	mov	r16,r4
 8006494:	3005883a 	mov	r2,r6
 8006498:	1980032e 	bgeu	r3,r6,80064a8 <memcpy+0x34>
 800649c:	2906b03a 	or	r3,r5,r4
 80064a0:	18c000cc 	andi	r3,r3,3
 80064a4:	18001026 	beq	r3,zero,80064e8 <memcpy+0x74>
 80064a8:	8007883a 	mov	r3,r16
 80064ac:	288f883a 	add	r7,r5,r2
 80064b0:	10000526 	beq	r2,zero,80064c8 <memcpy+0x54>
 80064b4:	29800003 	ldbu	r6,0(r5)
 80064b8:	18c00044 	addi	r3,r3,1
 80064bc:	29400044 	addi	r5,r5,1
 80064c0:	19bfffc5 	stb	r6,-1(r3)
 80064c4:	29fffb1e 	bne	r5,r7,80064b4 <memcpy+0x40>
 80064c8:	8005883a 	mov	r2,r16
 80064cc:	dfc00417 	ldw	ra,16(sp)
 80064d0:	dcc00317 	ldw	r19,12(sp)
 80064d4:	dc800217 	ldw	r18,8(sp)
 80064d8:	dc400117 	ldw	r17,4(sp)
 80064dc:	dc000017 	ldw	r16,0(sp)
 80064e0:	dec00504 	addi	sp,sp,20
 80064e4:	f800283a 	ret
 80064e8:	32bffc04 	addi	r10,r6,-16
 80064ec:	5014d13a 	srli	r10,r10,4
 80064f0:	20800404 	addi	r2,r4,16
 80064f4:	2007883a 	mov	r3,r4
 80064f8:	5008913a 	slli	r4,r10,4
 80064fc:	280f883a 	mov	r7,r5
 8006500:	1105883a 	add	r2,r2,r4
 8006504:	3a000017 	ldw	r8,0(r7)
 8006508:	18c00404 	addi	r3,r3,16
 800650c:	39c00404 	addi	r7,r7,16
 8006510:	1a3ffc15 	stw	r8,-16(r3)
 8006514:	3a3ffd17 	ldw	r8,-12(r7)
 8006518:	1a3ffd15 	stw	r8,-12(r3)
 800651c:	3a3ffe17 	ldw	r8,-8(r7)
 8006520:	1a3ffe15 	stw	r8,-8(r3)
 8006524:	3a3fff17 	ldw	r8,-4(r7)
 8006528:	1a3fff15 	stw	r8,-4(r3)
 800652c:	18bff51e 	bne	r3,r2,8006504 <memcpy+0x90>
 8006530:	52800044 	addi	r10,r10,1
 8006534:	5014913a 	slli	r10,r10,4
 8006538:	308003cc 	andi	r2,r6,15
 800653c:	010000c4 	movi	r4,3
 8006540:	8287883a 	add	r3,r16,r10
 8006544:	2a95883a 	add	r10,r5,r10
 8006548:	2080182e 	bgeu	r4,r2,80065ac <memcpy+0x138>
 800654c:	147fff04 	addi	r17,r2,-4
 8006550:	8808d0ba 	srli	r4,r17,2
 8006554:	1a400104 	addi	r9,r3,4
 8006558:	180d883a 	mov	r6,r3
 800655c:	2105883a 	add	r2,r4,r4
 8006560:	1085883a 	add	r2,r2,r2
 8006564:	4893883a 	add	r9,r9,r2
 8006568:	500f883a 	mov	r7,r10
 800656c:	3a000017 	ldw	r8,0(r7)
 8006570:	31800104 	addi	r6,r6,4
 8006574:	39c00104 	addi	r7,r7,4
 8006578:	323fff15 	stw	r8,-4(r6)
 800657c:	327ffb1e 	bne	r6,r9,800656c <memcpy+0xf8>
 8006580:	20800044 	addi	r2,r4,1
 8006584:	1085883a 	add	r2,r2,r2
 8006588:	1085883a 	add	r2,r2,r2
 800658c:	017fff04 	movi	r5,-4
 8006590:	18a5883a 	add	r18,r3,r2
 8006594:	50a7883a 	add	r19,r10,r2
 8006598:	8000df40 	call	8000df4 <__mulsi3>
 800659c:	1445883a 	add	r2,r2,r17
 80065a0:	980b883a 	mov	r5,r19
 80065a4:	9007883a 	mov	r3,r18
 80065a8:	003fc006 	br	80064ac <memcpy+0x38>
 80065ac:	500b883a 	mov	r5,r10
 80065b0:	003fbe06 	br	80064ac <memcpy+0x38>

080065b4 <memmove>:
 80065b4:	defffb04 	addi	sp,sp,-20
 80065b8:	dc000015 	stw	r16,0(sp)
 80065bc:	dfc00415 	stw	ra,16(sp)
 80065c0:	dcc00315 	stw	r19,12(sp)
 80065c4:	dc800215 	stw	r18,8(sp)
 80065c8:	dc400115 	stw	r17,4(sp)
 80065cc:	2021883a 	mov	r16,r4
 80065d0:	300f883a 	mov	r7,r6
 80065d4:	2900122e 	bgeu	r5,r4,8006620 <memmove+0x6c>
 80065d8:	2987883a 	add	r3,r5,r6
 80065dc:	20c0102e 	bgeu	r4,r3,8006620 <memmove+0x6c>
 80065e0:	218b883a 	add	r5,r4,r6
 80065e4:	1989c83a 	sub	r4,r3,r6
 80065e8:	30000526 	beq	r6,zero,8006600 <memmove+0x4c>
 80065ec:	18ffffc4 	addi	r3,r3,-1
 80065f0:	18800003 	ldbu	r2,0(r3)
 80065f4:	297fffc4 	addi	r5,r5,-1
 80065f8:	28800005 	stb	r2,0(r5)
 80065fc:	193ffb1e 	bne	r3,r4,80065ec <memmove+0x38>
 8006600:	8005883a 	mov	r2,r16
 8006604:	dfc00417 	ldw	ra,16(sp)
 8006608:	dcc00317 	ldw	r19,12(sp)
 800660c:	dc800217 	ldw	r18,8(sp)
 8006610:	dc400117 	ldw	r17,4(sp)
 8006614:	dc000017 	ldw	r16,0(sp)
 8006618:	dec00504 	addi	sp,sp,20
 800661c:	f800283a 	ret
 8006620:	008003c4 	movi	r2,15
 8006624:	1180422e 	bgeu	r2,r6,8006730 <memmove+0x17c>
 8006628:	2c04b03a 	or	r2,r5,r16
 800662c:	108000cc 	andi	r2,r2,3
 8006630:	10003f1e 	bne	r2,zero,8006730 <memmove+0x17c>
 8006634:	32bffc04 	addi	r10,r6,-16
 8006638:	5014d13a 	srli	r10,r10,4
 800663c:	81000404 	addi	r4,r16,16
 8006640:	8007883a 	mov	r3,r16
 8006644:	5004913a 	slli	r2,r10,4
 8006648:	280f883a 	mov	r7,r5
 800664c:	2089883a 	add	r4,r4,r2
 8006650:	38800017 	ldw	r2,0(r7)
 8006654:	18c00404 	addi	r3,r3,16
 8006658:	39c00404 	addi	r7,r7,16
 800665c:	18bffc15 	stw	r2,-16(r3)
 8006660:	38bffd17 	ldw	r2,-12(r7)
 8006664:	18bffd15 	stw	r2,-12(r3)
 8006668:	38bffe17 	ldw	r2,-8(r7)
 800666c:	18bffe15 	stw	r2,-8(r3)
 8006670:	38bfff17 	ldw	r2,-4(r7)
 8006674:	18bfff15 	stw	r2,-4(r3)
 8006678:	193ff51e 	bne	r3,r4,8006650 <memmove+0x9c>
 800667c:	52800044 	addi	r10,r10,1
 8006680:	5014913a 	slli	r10,r10,4
 8006684:	31c003cc 	andi	r7,r6,15
 8006688:	008000c4 	movi	r2,3
 800668c:	8287883a 	add	r3,r16,r10
 8006690:	2a95883a 	add	r10,r5,r10
 8006694:	11c0282e 	bgeu	r2,r7,8006738 <memmove+0x184>
 8006698:	3c7fff04 	addi	r17,r7,-4
 800669c:	8808d0ba 	srli	r4,r17,2
 80066a0:	1a400104 	addi	r9,r3,4
 80066a4:	180d883a 	mov	r6,r3
 80066a8:	2105883a 	add	r2,r4,r4
 80066ac:	1085883a 	add	r2,r2,r2
 80066b0:	4893883a 	add	r9,r9,r2
 80066b4:	5005883a 	mov	r2,r10
 80066b8:	12000017 	ldw	r8,0(r2)
 80066bc:	31800104 	addi	r6,r6,4
 80066c0:	10800104 	addi	r2,r2,4
 80066c4:	323fff15 	stw	r8,-4(r6)
 80066c8:	327ffb1e 	bne	r6,r9,80066b8 <memmove+0x104>
 80066cc:	20800044 	addi	r2,r4,1
 80066d0:	1085883a 	add	r2,r2,r2
 80066d4:	1085883a 	add	r2,r2,r2
 80066d8:	017fff04 	movi	r5,-4
 80066dc:	18a5883a 	add	r18,r3,r2
 80066e0:	50a7883a 	add	r19,r10,r2
 80066e4:	8000df40 	call	8000df4 <__mulsi3>
 80066e8:	144f883a 	add	r7,r2,r17
 80066ec:	980b883a 	mov	r5,r19
 80066f0:	9007883a 	mov	r3,r18
 80066f4:	383fc226 	beq	r7,zero,8006600 <memmove+0x4c>
 80066f8:	19cf883a 	add	r7,r3,r7
 80066fc:	29800003 	ldbu	r6,0(r5)
 8006700:	18c00044 	addi	r3,r3,1
 8006704:	29400044 	addi	r5,r5,1
 8006708:	19bfffc5 	stb	r6,-1(r3)
 800670c:	19fffb1e 	bne	r3,r7,80066fc <memmove+0x148>
 8006710:	8005883a 	mov	r2,r16
 8006714:	dfc00417 	ldw	ra,16(sp)
 8006718:	dcc00317 	ldw	r19,12(sp)
 800671c:	dc800217 	ldw	r18,8(sp)
 8006720:	dc400117 	ldw	r17,4(sp)
 8006724:	dc000017 	ldw	r16,0(sp)
 8006728:	dec00504 	addi	sp,sp,20
 800672c:	f800283a 	ret
 8006730:	8007883a 	mov	r3,r16
 8006734:	003fef06 	br	80066f4 <memmove+0x140>
 8006738:	500b883a 	mov	r5,r10
 800673c:	003fed06 	br	80066f4 <memmove+0x140>

08006740 <memset>:
 8006740:	00c000c4 	movi	r3,3
 8006744:	2005883a 	mov	r2,r4
 8006748:	29403fcc 	andi	r5,r5,255
 800674c:	19802d2e 	bgeu	r3,r6,8006804 <memset+0xc4>
 8006750:	20c6703a 	and	r3,r4,r3
 8006754:	18002e1e 	bne	r3,zero,8006810 <memset+0xd0>
 8006758:	2806923a 	slli	r3,r5,8
 800675c:	010003c4 	movi	r4,15
 8006760:	3011883a 	mov	r8,r6
 8006764:	1946b03a 	or	r3,r3,r5
 8006768:	180e943a 	slli	r7,r3,16
 800676c:	38ceb03a 	or	r7,r7,r3
 8006770:	1007883a 	mov	r3,r2
 8006774:	21800f2e 	bgeu	r4,r6,80067b4 <memset+0x74>
 8006778:	19c00015 	stw	r7,0(r3)
 800677c:	19c00115 	stw	r7,4(r3)
 8006780:	19c00215 	stw	r7,8(r3)
 8006784:	19c00315 	stw	r7,12(r3)
 8006788:	423ffc04 	addi	r8,r8,-16
 800678c:	18c00404 	addi	r3,r3,16
 8006790:	223ff936 	bltu	r4,r8,8006778 <memset+0x38>
 8006794:	30fffc04 	addi	r3,r6,-16
 8006798:	1806d13a 	srli	r3,r3,4
 800679c:	318003cc 	andi	r6,r6,15
 80067a0:	010000c4 	movi	r4,3
 80067a4:	18c00044 	addi	r3,r3,1
 80067a8:	1806913a 	slli	r3,r3,4
 80067ac:	10c7883a 	add	r3,r2,r3
 80067b0:	21800e2e 	bgeu	r4,r6,80067ec <memset+0xac>
 80067b4:	1813883a 	mov	r9,r3
 80067b8:	3011883a 	mov	r8,r6
 80067bc:	010000c4 	movi	r4,3
 80067c0:	49c00015 	stw	r7,0(r9)
 80067c4:	423fff04 	addi	r8,r8,-4
 80067c8:	4a400104 	addi	r9,r9,4
 80067cc:	223ffc36 	bltu	r4,r8,80067c0 <memset+0x80>
 80067d0:	313fff04 	addi	r4,r6,-4
 80067d4:	2008d0ba 	srli	r4,r4,2
 80067d8:	318000cc 	andi	r6,r6,3
 80067dc:	21000044 	addi	r4,r4,1
 80067e0:	2109883a 	add	r4,r4,r4
 80067e4:	2109883a 	add	r4,r4,r4
 80067e8:	1907883a 	add	r3,r3,r4
 80067ec:	30000a26 	beq	r6,zero,8006818 <memset+0xd8>
 80067f0:	198d883a 	add	r6,r3,r6
 80067f4:	19400005 	stb	r5,0(r3)
 80067f8:	18c00044 	addi	r3,r3,1
 80067fc:	19bffd1e 	bne	r3,r6,80067f4 <memset+0xb4>
 8006800:	f800283a 	ret
 8006804:	2007883a 	mov	r3,r4
 8006808:	303ff91e 	bne	r6,zero,80067f0 <memset+0xb0>
 800680c:	00000206 	br	8006818 <memset+0xd8>
 8006810:	2007883a 	mov	r3,r4
 8006814:	003ff606 	br	80067f0 <memset+0xb0>
 8006818:	f800283a 	ret

0800681c <_Balloc>:
 800681c:	20801317 	ldw	r2,76(r4)
 8006820:	defffc04 	addi	sp,sp,-16
 8006824:	dc400115 	stw	r17,4(sp)
 8006828:	dc000015 	stw	r16,0(sp)
 800682c:	dfc00315 	stw	ra,12(sp)
 8006830:	dc800215 	stw	r18,8(sp)
 8006834:	2023883a 	mov	r17,r4
 8006838:	2821883a 	mov	r16,r5
 800683c:	10000f26 	beq	r2,zero,800687c <_Balloc+0x60>
 8006840:	8407883a 	add	r3,r16,r16
 8006844:	18c7883a 	add	r3,r3,r3
 8006848:	10c7883a 	add	r3,r2,r3
 800684c:	18800017 	ldw	r2,0(r3)
 8006850:	10001126 	beq	r2,zero,8006898 <_Balloc+0x7c>
 8006854:	11000017 	ldw	r4,0(r2)
 8006858:	19000015 	stw	r4,0(r3)
 800685c:	10000415 	stw	zero,16(r2)
 8006860:	10000315 	stw	zero,12(r2)
 8006864:	dfc00317 	ldw	ra,12(sp)
 8006868:	dc800217 	ldw	r18,8(sp)
 800686c:	dc400117 	ldw	r17,4(sp)
 8006870:	dc000017 	ldw	r16,0(sp)
 8006874:	dec00404 	addi	sp,sp,16
 8006878:	f800283a 	ret
 800687c:	01400104 	movi	r5,4
 8006880:	01800404 	movi	r6,16
 8006884:	80081800 	call	8008180 <_calloc_r>
 8006888:	88801315 	stw	r2,76(r17)
 800688c:	103fec1e 	bne	r2,zero,8006840 <_Balloc+0x24>
 8006890:	0005883a 	mov	r2,zero
 8006894:	003ff306 	br	8006864 <_Balloc+0x48>
 8006898:	01400044 	movi	r5,1
 800689c:	2c24983a 	sll	r18,r5,r16
 80068a0:	8809883a 	mov	r4,r17
 80068a4:	91800144 	addi	r6,r18,5
 80068a8:	318d883a 	add	r6,r6,r6
 80068ac:	318d883a 	add	r6,r6,r6
 80068b0:	80081800 	call	8008180 <_calloc_r>
 80068b4:	103ff626 	beq	r2,zero,8006890 <_Balloc+0x74>
 80068b8:	14000115 	stw	r16,4(r2)
 80068bc:	14800215 	stw	r18,8(r2)
 80068c0:	003fe606 	br	800685c <_Balloc+0x40>

080068c4 <_Bfree>:
 80068c4:	28000826 	beq	r5,zero,80068e8 <_Bfree+0x24>
 80068c8:	28c00117 	ldw	r3,4(r5)
 80068cc:	20801317 	ldw	r2,76(r4)
 80068d0:	18c7883a 	add	r3,r3,r3
 80068d4:	18c7883a 	add	r3,r3,r3
 80068d8:	10c5883a 	add	r2,r2,r3
 80068dc:	10c00017 	ldw	r3,0(r2)
 80068e0:	28c00015 	stw	r3,0(r5)
 80068e4:	11400015 	stw	r5,0(r2)
 80068e8:	f800283a 	ret

080068ec <__multadd>:
 80068ec:	defff604 	addi	sp,sp,-40
 80068f0:	dd400515 	stw	r21,20(sp)
 80068f4:	2d400417 	ldw	r21,16(r5)
 80068f8:	df000815 	stw	fp,32(sp)
 80068fc:	ddc00715 	stw	r23,28(sp)
 8006900:	dd800615 	stw	r22,24(sp)
 8006904:	dd000415 	stw	r20,16(sp)
 8006908:	dc400115 	stw	r17,4(sp)
 800690c:	dc000015 	stw	r16,0(sp)
 8006910:	dfc00915 	stw	ra,36(sp)
 8006914:	dcc00315 	stw	r19,12(sp)
 8006918:	dc800215 	stw	r18,8(sp)
 800691c:	282d883a 	mov	r22,r5
 8006920:	202f883a 	mov	r23,r4
 8006924:	3029883a 	mov	r20,r6
 8006928:	3839883a 	mov	fp,r7
 800692c:	2c000504 	addi	r16,r5,20
 8006930:	0023883a 	mov	r17,zero
 8006934:	84c00017 	ldw	r19,0(r16)
 8006938:	a00b883a 	mov	r5,r20
 800693c:	8c400044 	addi	r17,r17,1
 8006940:	993fffcc 	andi	r4,r19,65535
 8006944:	8000df40 	call	8000df4 <__mulsi3>
 8006948:	1725883a 	add	r18,r2,fp
 800694c:	9808d43a 	srli	r4,r19,16
 8006950:	9026d43a 	srli	r19,r18,16
 8006954:	a00b883a 	mov	r5,r20
 8006958:	8000df40 	call	8000df4 <__mulsi3>
 800695c:	988f883a 	add	r7,r19,r2
 8006960:	3804943a 	slli	r2,r7,16
 8006964:	94bfffcc 	andi	r18,r18,65535
 8006968:	3838d43a 	srli	fp,r7,16
 800696c:	14a5883a 	add	r18,r2,r18
 8006970:	84800015 	stw	r18,0(r16)
 8006974:	84000104 	addi	r16,r16,4
 8006978:	8d7fee16 	blt	r17,r21,8006934 <__multadd+0x48>
 800697c:	e0000926 	beq	fp,zero,80069a4 <__multadd+0xb8>
 8006980:	b0800217 	ldw	r2,8(r22)
 8006984:	a880140e 	bge	r21,r2,80069d8 <__multadd+0xec>
 8006988:	a8800144 	addi	r2,r21,5
 800698c:	1085883a 	add	r2,r2,r2
 8006990:	1085883a 	add	r2,r2,r2
 8006994:	b085883a 	add	r2,r22,r2
 8006998:	ad400044 	addi	r21,r21,1
 800699c:	17000015 	stw	fp,0(r2)
 80069a0:	b5400415 	stw	r21,16(r22)
 80069a4:	b005883a 	mov	r2,r22
 80069a8:	dfc00917 	ldw	ra,36(sp)
 80069ac:	df000817 	ldw	fp,32(sp)
 80069b0:	ddc00717 	ldw	r23,28(sp)
 80069b4:	dd800617 	ldw	r22,24(sp)
 80069b8:	dd400517 	ldw	r21,20(sp)
 80069bc:	dd000417 	ldw	r20,16(sp)
 80069c0:	dcc00317 	ldw	r19,12(sp)
 80069c4:	dc800217 	ldw	r18,8(sp)
 80069c8:	dc400117 	ldw	r17,4(sp)
 80069cc:	dc000017 	ldw	r16,0(sp)
 80069d0:	dec00a04 	addi	sp,sp,40
 80069d4:	f800283a 	ret
 80069d8:	b1400117 	ldw	r5,4(r22)
 80069dc:	b809883a 	mov	r4,r23
 80069e0:	29400044 	addi	r5,r5,1
 80069e4:	800681c0 	call	800681c <_Balloc>
 80069e8:	b1800417 	ldw	r6,16(r22)
 80069ec:	b1400304 	addi	r5,r22,12
 80069f0:	11000304 	addi	r4,r2,12
 80069f4:	31800084 	addi	r6,r6,2
 80069f8:	318d883a 	add	r6,r6,r6
 80069fc:	318d883a 	add	r6,r6,r6
 8006a00:	1021883a 	mov	r16,r2
 8006a04:	80064740 	call	8006474 <memcpy>
 8006a08:	b0c00117 	ldw	r3,4(r22)
 8006a0c:	b8801317 	ldw	r2,76(r23)
 8006a10:	18c7883a 	add	r3,r3,r3
 8006a14:	18c7883a 	add	r3,r3,r3
 8006a18:	10c5883a 	add	r2,r2,r3
 8006a1c:	10c00017 	ldw	r3,0(r2)
 8006a20:	b0c00015 	stw	r3,0(r22)
 8006a24:	15800015 	stw	r22,0(r2)
 8006a28:	802d883a 	mov	r22,r16
 8006a2c:	003fd606 	br	8006988 <__multadd+0x9c>

08006a30 <__s2b>:
 8006a30:	defff904 	addi	sp,sp,-28
 8006a34:	dd000415 	stw	r20,16(sp)
 8006a38:	dc400115 	stw	r17,4(sp)
 8006a3c:	2829883a 	mov	r20,r5
 8006a40:	2023883a 	mov	r17,r4
 8006a44:	01400244 	movi	r5,9
 8006a48:	39000204 	addi	r4,r7,8
 8006a4c:	dcc00315 	stw	r19,12(sp)
 8006a50:	dc800215 	stw	r18,8(sp)
 8006a54:	dfc00615 	stw	ra,24(sp)
 8006a58:	dd400515 	stw	r21,20(sp)
 8006a5c:	dc000015 	stw	r16,0(sp)
 8006a60:	3825883a 	mov	r18,r7
 8006a64:	3027883a 	mov	r19,r6
 8006a68:	8000d380 	call	8000d38 <__divsi3>
 8006a6c:	00c00044 	movi	r3,1
 8006a70:	000b883a 	mov	r5,zero
 8006a74:	1880030e 	bge	r3,r2,8006a84 <__s2b+0x54>
 8006a78:	18c7883a 	add	r3,r3,r3
 8006a7c:	29400044 	addi	r5,r5,1
 8006a80:	18bffd16 	blt	r3,r2,8006a78 <__s2b+0x48>
 8006a84:	8809883a 	mov	r4,r17
 8006a88:	800681c0 	call	800681c <_Balloc>
 8006a8c:	d8c00717 	ldw	r3,28(sp)
 8006a90:	10c00515 	stw	r3,20(r2)
 8006a94:	00c00044 	movi	r3,1
 8006a98:	10c00415 	stw	r3,16(r2)
 8006a9c:	00c00244 	movi	r3,9
 8006aa0:	1cc0210e 	bge	r3,r19,8006b28 <__s2b+0xf8>
 8006aa4:	a0eb883a 	add	r21,r20,r3
 8006aa8:	a821883a 	mov	r16,r21
 8006aac:	a4e9883a 	add	r20,r20,r19
 8006ab0:	81c00007 	ldb	r7,0(r16)
 8006ab4:	8809883a 	mov	r4,r17
 8006ab8:	84000044 	addi	r16,r16,1
 8006abc:	100b883a 	mov	r5,r2
 8006ac0:	01800284 	movi	r6,10
 8006ac4:	39fff404 	addi	r7,r7,-48
 8006ac8:	80068ec0 	call	80068ec <__multadd>
 8006acc:	853ff81e 	bne	r16,r20,8006ab0 <__s2b+0x80>
 8006ad0:	ace1883a 	add	r16,r21,r19
 8006ad4:	843ffe04 	addi	r16,r16,-8
 8006ad8:	9c800a0e 	bge	r19,r18,8006b04 <__s2b+0xd4>
 8006adc:	94e5c83a 	sub	r18,r18,r19
 8006ae0:	84a5883a 	add	r18,r16,r18
 8006ae4:	81c00007 	ldb	r7,0(r16)
 8006ae8:	8809883a 	mov	r4,r17
 8006aec:	84000044 	addi	r16,r16,1
 8006af0:	100b883a 	mov	r5,r2
 8006af4:	01800284 	movi	r6,10
 8006af8:	39fff404 	addi	r7,r7,-48
 8006afc:	80068ec0 	call	80068ec <__multadd>
 8006b00:	84bff81e 	bne	r16,r18,8006ae4 <__s2b+0xb4>
 8006b04:	dfc00617 	ldw	ra,24(sp)
 8006b08:	dd400517 	ldw	r21,20(sp)
 8006b0c:	dd000417 	ldw	r20,16(sp)
 8006b10:	dcc00317 	ldw	r19,12(sp)
 8006b14:	dc800217 	ldw	r18,8(sp)
 8006b18:	dc400117 	ldw	r17,4(sp)
 8006b1c:	dc000017 	ldw	r16,0(sp)
 8006b20:	dec00704 	addi	sp,sp,28
 8006b24:	f800283a 	ret
 8006b28:	a4000284 	addi	r16,r20,10
 8006b2c:	1827883a 	mov	r19,r3
 8006b30:	003fe906 	br	8006ad8 <__s2b+0xa8>

08006b34 <__hi0bits>:
 8006b34:	20bfffec 	andhi	r2,r4,65535
 8006b38:	1000141e 	bne	r2,zero,8006b8c <__hi0bits+0x58>
 8006b3c:	2008943a 	slli	r4,r4,16
 8006b40:	00800404 	movi	r2,16
 8006b44:	20ffc02c 	andhi	r3,r4,65280
 8006b48:	1800021e 	bne	r3,zero,8006b54 <__hi0bits+0x20>
 8006b4c:	2008923a 	slli	r4,r4,8
 8006b50:	10800204 	addi	r2,r2,8
 8006b54:	20fc002c 	andhi	r3,r4,61440
 8006b58:	1800021e 	bne	r3,zero,8006b64 <__hi0bits+0x30>
 8006b5c:	2008913a 	slli	r4,r4,4
 8006b60:	10800104 	addi	r2,r2,4
 8006b64:	20f0002c 	andhi	r3,r4,49152
 8006b68:	1800031e 	bne	r3,zero,8006b78 <__hi0bits+0x44>
 8006b6c:	2109883a 	add	r4,r4,r4
 8006b70:	10800084 	addi	r2,r2,2
 8006b74:	2109883a 	add	r4,r4,r4
 8006b78:	20000316 	blt	r4,zero,8006b88 <__hi0bits+0x54>
 8006b7c:	2110002c 	andhi	r4,r4,16384
 8006b80:	2000041e 	bne	r4,zero,8006b94 <__hi0bits+0x60>
 8006b84:	00800804 	movi	r2,32
 8006b88:	f800283a 	ret
 8006b8c:	0005883a 	mov	r2,zero
 8006b90:	003fec06 	br	8006b44 <__hi0bits+0x10>
 8006b94:	10800044 	addi	r2,r2,1
 8006b98:	f800283a 	ret

08006b9c <__lo0bits>:
 8006b9c:	20c00017 	ldw	r3,0(r4)
 8006ba0:	188001cc 	andi	r2,r3,7
 8006ba4:	10000826 	beq	r2,zero,8006bc8 <__lo0bits+0x2c>
 8006ba8:	1880004c 	andi	r2,r3,1
 8006bac:	1000211e 	bne	r2,zero,8006c34 <__lo0bits+0x98>
 8006bb0:	1880008c 	andi	r2,r3,2
 8006bb4:	1000211e 	bne	r2,zero,8006c3c <__lo0bits+0xa0>
 8006bb8:	1806d0ba 	srli	r3,r3,2
 8006bbc:	00800084 	movi	r2,2
 8006bc0:	20c00015 	stw	r3,0(r4)
 8006bc4:	f800283a 	ret
 8006bc8:	18bfffcc 	andi	r2,r3,65535
 8006bcc:	10001326 	beq	r2,zero,8006c1c <__lo0bits+0x80>
 8006bd0:	0005883a 	mov	r2,zero
 8006bd4:	19403fcc 	andi	r5,r3,255
 8006bd8:	2800021e 	bne	r5,zero,8006be4 <__lo0bits+0x48>
 8006bdc:	1806d23a 	srli	r3,r3,8
 8006be0:	10800204 	addi	r2,r2,8
 8006be4:	194003cc 	andi	r5,r3,15
 8006be8:	2800021e 	bne	r5,zero,8006bf4 <__lo0bits+0x58>
 8006bec:	1806d13a 	srli	r3,r3,4
 8006bf0:	10800104 	addi	r2,r2,4
 8006bf4:	194000cc 	andi	r5,r3,3
 8006bf8:	2800021e 	bne	r5,zero,8006c04 <__lo0bits+0x68>
 8006bfc:	1806d0ba 	srli	r3,r3,2
 8006c00:	10800084 	addi	r2,r2,2
 8006c04:	1940004c 	andi	r5,r3,1
 8006c08:	2800081e 	bne	r5,zero,8006c2c <__lo0bits+0x90>
 8006c0c:	1806d07a 	srli	r3,r3,1
 8006c10:	1800051e 	bne	r3,zero,8006c28 <__lo0bits+0x8c>
 8006c14:	00800804 	movi	r2,32
 8006c18:	f800283a 	ret
 8006c1c:	1806d43a 	srli	r3,r3,16
 8006c20:	00800404 	movi	r2,16
 8006c24:	003feb06 	br	8006bd4 <__lo0bits+0x38>
 8006c28:	10800044 	addi	r2,r2,1
 8006c2c:	20c00015 	stw	r3,0(r4)
 8006c30:	f800283a 	ret
 8006c34:	0005883a 	mov	r2,zero
 8006c38:	f800283a 	ret
 8006c3c:	1806d07a 	srli	r3,r3,1
 8006c40:	00800044 	movi	r2,1
 8006c44:	20c00015 	stw	r3,0(r4)
 8006c48:	f800283a 	ret

08006c4c <__i2b>:
 8006c4c:	defffd04 	addi	sp,sp,-12
 8006c50:	dc000015 	stw	r16,0(sp)
 8006c54:	04000044 	movi	r16,1
 8006c58:	dc400115 	stw	r17,4(sp)
 8006c5c:	2823883a 	mov	r17,r5
 8006c60:	800b883a 	mov	r5,r16
 8006c64:	dfc00215 	stw	ra,8(sp)
 8006c68:	800681c0 	call	800681c <_Balloc>
 8006c6c:	14400515 	stw	r17,20(r2)
 8006c70:	14000415 	stw	r16,16(r2)
 8006c74:	dfc00217 	ldw	ra,8(sp)
 8006c78:	dc400117 	ldw	r17,4(sp)
 8006c7c:	dc000017 	ldw	r16,0(sp)
 8006c80:	dec00304 	addi	sp,sp,12
 8006c84:	f800283a 	ret

08006c88 <__multiply>:
 8006c88:	defff004 	addi	sp,sp,-64
 8006c8c:	dc800815 	stw	r18,32(sp)
 8006c90:	dc400715 	stw	r17,28(sp)
 8006c94:	34800417 	ldw	r18,16(r6)
 8006c98:	2c400417 	ldw	r17,16(r5)
 8006c9c:	ddc00d15 	stw	r23,52(sp)
 8006ca0:	dc000615 	stw	r16,24(sp)
 8006ca4:	dfc00f15 	stw	ra,60(sp)
 8006ca8:	df000e15 	stw	fp,56(sp)
 8006cac:	dd800c15 	stw	r22,48(sp)
 8006cb0:	dd400b15 	stw	r21,44(sp)
 8006cb4:	dd000a15 	stw	r20,40(sp)
 8006cb8:	dcc00915 	stw	r19,36(sp)
 8006cbc:	2821883a 	mov	r16,r5
 8006cc0:	302f883a 	mov	r23,r6
 8006cc4:	8c80050e 	bge	r17,r18,8006cdc <__multiply+0x54>
 8006cc8:	8807883a 	mov	r3,r17
 8006ccc:	3021883a 	mov	r16,r6
 8006cd0:	9023883a 	mov	r17,r18
 8006cd4:	282f883a 	mov	r23,r5
 8006cd8:	1825883a 	mov	r18,r3
 8006cdc:	80800217 	ldw	r2,8(r16)
 8006ce0:	8c87883a 	add	r3,r17,r18
 8006ce4:	d8c00115 	stw	r3,4(sp)
 8006ce8:	81400117 	ldw	r5,4(r16)
 8006cec:	10c0010e 	bge	r2,r3,8006cf4 <__multiply+0x6c>
 8006cf0:	29400044 	addi	r5,r5,1
 8006cf4:	800681c0 	call	800681c <_Balloc>
 8006cf8:	d8c00117 	ldw	r3,4(sp)
 8006cfc:	d8800515 	stw	r2,20(sp)
 8006d00:	14c00504 	addi	r19,r2,20
 8006d04:	1d400144 	addi	r21,r3,5
 8006d08:	ad6b883a 	add	r21,r21,r21
 8006d0c:	ad6b883a 	add	r21,r21,r21
 8006d10:	156b883a 	add	r21,r2,r21
 8006d14:	dd400215 	stw	r21,8(sp)
 8006d18:	9805883a 	mov	r2,r19
 8006d1c:	9d40042e 	bgeu	r19,r21,8006d30 <__multiply+0xa8>
 8006d20:	d8c00217 	ldw	r3,8(sp)
 8006d24:	10000015 	stw	zero,0(r2)
 8006d28:	10800104 	addi	r2,r2,4
 8006d2c:	10fffc36 	bltu	r2,r3,8006d20 <__multiply+0x98>
 8006d30:	94800144 	addi	r18,r18,5
 8006d34:	94a5883a 	add	r18,r18,r18
 8006d38:	94ad883a 	add	r22,r18,r18
 8006d3c:	8c400144 	addi	r17,r17,5
 8006d40:	8c63883a 	add	r17,r17,r17
 8006d44:	bdad883a 	add	r22,r23,r22
 8006d48:	80c00504 	addi	r3,r16,20
 8006d4c:	8c63883a 	add	r17,r17,r17
 8006d50:	bc800504 	addi	r18,r23,20
 8006d54:	dd800315 	stw	r22,12(sp)
 8006d58:	d8c00415 	stw	r3,16(sp)
 8006d5c:	dcc00015 	stw	r19,0(sp)
 8006d60:	8463883a 	add	r17,r16,r17
 8006d64:	9580412e 	bgeu	r18,r22,8006e6c <__multiply+0x1e4>
 8006d68:	90800017 	ldw	r2,0(r18)
 8006d6c:	173fffcc 	andi	fp,r2,65535
 8006d70:	e0001a26 	beq	fp,zero,8006ddc <__multiply+0x154>
 8006d74:	dd000017 	ldw	r20,0(sp)
 8006d78:	dd800417 	ldw	r22,16(sp)
 8006d7c:	002b883a 	mov	r21,zero
 8006d80:	b4c00017 	ldw	r19,0(r22)
 8006d84:	a4000017 	ldw	r16,0(r20)
 8006d88:	e00b883a 	mov	r5,fp
 8006d8c:	993fffcc 	andi	r4,r19,65535
 8006d90:	8000df40 	call	8000df4 <__mulsi3>
 8006d94:	9808d43a 	srli	r4,r19,16
 8006d98:	817fffcc 	andi	r5,r16,65535
 8006d9c:	1145883a 	add	r2,r2,r5
 8006da0:	e00b883a 	mov	r5,fp
 8006da4:	1567883a 	add	r19,r2,r21
 8006da8:	8020d43a 	srli	r16,r16,16
 8006dac:	8000df40 	call	8000df4 <__mulsi3>
 8006db0:	9808d43a 	srli	r4,r19,16
 8006db4:	1405883a 	add	r2,r2,r16
 8006db8:	a4c0000d 	sth	r19,0(r20)
 8006dbc:	110f883a 	add	r7,r2,r4
 8006dc0:	a1c0008d 	sth	r7,2(r20)
 8006dc4:	b5800104 	addi	r22,r22,4
 8006dc8:	382ad43a 	srli	r21,r7,16
 8006dcc:	a5000104 	addi	r20,r20,4
 8006dd0:	b47feb36 	bltu	r22,r17,8006d80 <__multiply+0xf8>
 8006dd4:	a5400015 	stw	r21,0(r20)
 8006dd8:	90800017 	ldw	r2,0(r18)
 8006ddc:	1038d43a 	srli	fp,r2,16
 8006de0:	e0001c26 	beq	fp,zero,8006e54 <__multiply+0x1cc>
 8006de4:	d8c00017 	ldw	r3,0(sp)
 8006de8:	dd000417 	ldw	r20,16(sp)
 8006dec:	002b883a 	mov	r21,zero
 8006df0:	1d800017 	ldw	r22,0(r3)
 8006df4:	182f883a 	mov	r23,r3
 8006df8:	b021883a 	mov	r16,r22
 8006dfc:	a4c00017 	ldw	r19,0(r20)
 8006e00:	8020d43a 	srli	r16,r16,16
 8006e04:	e00b883a 	mov	r5,fp
 8006e08:	993fffcc 	andi	r4,r19,65535
 8006e0c:	8000df40 	call	8000df4 <__mulsi3>
 8006e10:	1405883a 	add	r2,r2,r16
 8006e14:	9808d43a 	srli	r4,r19,16
 8006e18:	156b883a 	add	r21,r2,r21
 8006e1c:	bdc00104 	addi	r23,r23,4
 8006e20:	bdbfff0d 	sth	r22,-4(r23)
 8006e24:	bd7fff8d 	sth	r21,-2(r23)
 8006e28:	bc000017 	ldw	r16,0(r23)
 8006e2c:	e00b883a 	mov	r5,fp
 8006e30:	8000df40 	call	8000df4 <__mulsi3>
 8006e34:	a80ed43a 	srli	r7,r21,16
 8006e38:	813fffcc 	andi	r4,r16,65535
 8006e3c:	2085883a 	add	r2,r4,r2
 8006e40:	11ed883a 	add	r22,r2,r7
 8006e44:	a5000104 	addi	r20,r20,4
 8006e48:	b02ad43a 	srli	r21,r22,16
 8006e4c:	a47feb36 	bltu	r20,r17,8006dfc <__multiply+0x174>
 8006e50:	bd800015 	stw	r22,0(r23)
 8006e54:	d8c00017 	ldw	r3,0(sp)
 8006e58:	94800104 	addi	r18,r18,4
 8006e5c:	18c00104 	addi	r3,r3,4
 8006e60:	d8c00015 	stw	r3,0(sp)
 8006e64:	d8c00317 	ldw	r3,12(sp)
 8006e68:	90ffbf36 	bltu	r18,r3,8006d68 <__multiply+0xe0>
 8006e6c:	d8c00117 	ldw	r3,4(sp)
 8006e70:	00c00c0e 	bge	zero,r3,8006ea4 <__multiply+0x21c>
 8006e74:	d8c00217 	ldw	r3,8(sp)
 8006e78:	18bfff17 	ldw	r2,-4(r3)
 8006e7c:	1d7fff04 	addi	r21,r3,-4
 8006e80:	10000326 	beq	r2,zero,8006e90 <__multiply+0x208>
 8006e84:	00000706 	br	8006ea4 <__multiply+0x21c>
 8006e88:	a8800017 	ldw	r2,0(r21)
 8006e8c:	1000051e 	bne	r2,zero,8006ea4 <__multiply+0x21c>
 8006e90:	d8c00117 	ldw	r3,4(sp)
 8006e94:	ad7fff04 	addi	r21,r21,-4
 8006e98:	18ffffc4 	addi	r3,r3,-1
 8006e9c:	d8c00115 	stw	r3,4(sp)
 8006ea0:	183ff91e 	bne	r3,zero,8006e88 <__multiply+0x200>
 8006ea4:	d8800517 	ldw	r2,20(sp)
 8006ea8:	d8c00117 	ldw	r3,4(sp)
 8006eac:	10c00415 	stw	r3,16(r2)
 8006eb0:	dfc00f17 	ldw	ra,60(sp)
 8006eb4:	df000e17 	ldw	fp,56(sp)
 8006eb8:	ddc00d17 	ldw	r23,52(sp)
 8006ebc:	dd800c17 	ldw	r22,48(sp)
 8006ec0:	dd400b17 	ldw	r21,44(sp)
 8006ec4:	dd000a17 	ldw	r20,40(sp)
 8006ec8:	dcc00917 	ldw	r19,36(sp)
 8006ecc:	dc800817 	ldw	r18,32(sp)
 8006ed0:	dc400717 	ldw	r17,28(sp)
 8006ed4:	dc000617 	ldw	r16,24(sp)
 8006ed8:	dec01004 	addi	sp,sp,64
 8006edc:	f800283a 	ret

08006ee0 <__pow5mult>:
 8006ee0:	defffb04 	addi	sp,sp,-20
 8006ee4:	dcc00315 	stw	r19,12(sp)
 8006ee8:	dc800215 	stw	r18,8(sp)
 8006eec:	dc000015 	stw	r16,0(sp)
 8006ef0:	dfc00415 	stw	ra,16(sp)
 8006ef4:	dc400115 	stw	r17,4(sp)
 8006ef8:	308000cc 	andi	r2,r6,3
 8006efc:	3021883a 	mov	r16,r6
 8006f00:	2027883a 	mov	r19,r4
 8006f04:	2825883a 	mov	r18,r5
 8006f08:	10002e1e 	bne	r2,zero,8006fc4 <__pow5mult+0xe4>
 8006f0c:	8021d0ba 	srai	r16,r16,2
 8006f10:	80001a26 	beq	r16,zero,8006f7c <__pow5mult+0x9c>
 8006f14:	9c401217 	ldw	r17,72(r19)
 8006f18:	8800061e 	bne	r17,zero,8006f34 <__pow5mult+0x54>
 8006f1c:	00003406 	br	8006ff0 <__pow5mult+0x110>
 8006f20:	8021d07a 	srai	r16,r16,1
 8006f24:	80001526 	beq	r16,zero,8006f7c <__pow5mult+0x9c>
 8006f28:	88c00017 	ldw	r3,0(r17)
 8006f2c:	18001b26 	beq	r3,zero,8006f9c <__pow5mult+0xbc>
 8006f30:	1823883a 	mov	r17,r3
 8006f34:	80c0004c 	andi	r3,r16,1
 8006f38:	183ff926 	beq	r3,zero,8006f20 <__pow5mult+0x40>
 8006f3c:	900b883a 	mov	r5,r18
 8006f40:	880d883a 	mov	r6,r17
 8006f44:	9809883a 	mov	r4,r19
 8006f48:	8006c880 	call	8006c88 <__multiply>
 8006f4c:	90001b26 	beq	r18,zero,8006fbc <__pow5mult+0xdc>
 8006f50:	91000117 	ldw	r4,4(r18)
 8006f54:	98c01317 	ldw	r3,76(r19)
 8006f58:	8021d07a 	srai	r16,r16,1
 8006f5c:	2109883a 	add	r4,r4,r4
 8006f60:	2109883a 	add	r4,r4,r4
 8006f64:	1907883a 	add	r3,r3,r4
 8006f68:	19000017 	ldw	r4,0(r3)
 8006f6c:	91000015 	stw	r4,0(r18)
 8006f70:	1c800015 	stw	r18,0(r3)
 8006f74:	1025883a 	mov	r18,r2
 8006f78:	803feb1e 	bne	r16,zero,8006f28 <__pow5mult+0x48>
 8006f7c:	9005883a 	mov	r2,r18
 8006f80:	dfc00417 	ldw	ra,16(sp)
 8006f84:	dcc00317 	ldw	r19,12(sp)
 8006f88:	dc800217 	ldw	r18,8(sp)
 8006f8c:	dc400117 	ldw	r17,4(sp)
 8006f90:	dc000017 	ldw	r16,0(sp)
 8006f94:	dec00504 	addi	sp,sp,20
 8006f98:	f800283a 	ret
 8006f9c:	880b883a 	mov	r5,r17
 8006fa0:	880d883a 	mov	r6,r17
 8006fa4:	9809883a 	mov	r4,r19
 8006fa8:	8006c880 	call	8006c88 <__multiply>
 8006fac:	88800015 	stw	r2,0(r17)
 8006fb0:	10000015 	stw	zero,0(r2)
 8006fb4:	1023883a 	mov	r17,r2
 8006fb8:	003fde06 	br	8006f34 <__pow5mult+0x54>
 8006fbc:	1025883a 	mov	r18,r2
 8006fc0:	003fd706 	br	8006f20 <__pow5mult+0x40>
 8006fc4:	10bfffc4 	addi	r2,r2,-1
 8006fc8:	1085883a 	add	r2,r2,r2
 8006fcc:	00c20074 	movhi	r3,2049
 8006fd0:	18f53d04 	addi	r3,r3,-11020
 8006fd4:	1085883a 	add	r2,r2,r2
 8006fd8:	1885883a 	add	r2,r3,r2
 8006fdc:	11800017 	ldw	r6,0(r2)
 8006fe0:	000f883a 	mov	r7,zero
 8006fe4:	80068ec0 	call	80068ec <__multadd>
 8006fe8:	1025883a 	mov	r18,r2
 8006fec:	003fc706 	br	8006f0c <__pow5mult+0x2c>
 8006ff0:	9809883a 	mov	r4,r19
 8006ff4:	01409c44 	movi	r5,625
 8006ff8:	8006c4c0 	call	8006c4c <__i2b>
 8006ffc:	98801215 	stw	r2,72(r19)
 8007000:	1023883a 	mov	r17,r2
 8007004:	10000015 	stw	zero,0(r2)
 8007008:	003fca06 	br	8006f34 <__pow5mult+0x54>

0800700c <__lshift>:
 800700c:	defff904 	addi	sp,sp,-28
 8007010:	dd400515 	stw	r21,20(sp)
 8007014:	dc400115 	stw	r17,4(sp)
 8007018:	2d400417 	ldw	r21,16(r5)
 800701c:	3023d17a 	srai	r17,r6,5
 8007020:	28800217 	ldw	r2,8(r5)
 8007024:	dd000415 	stw	r20,16(sp)
 8007028:	8d6b883a 	add	r21,r17,r21
 800702c:	dcc00315 	stw	r19,12(sp)
 8007030:	dc800215 	stw	r18,8(sp)
 8007034:	dc000015 	stw	r16,0(sp)
 8007038:	dfc00615 	stw	ra,24(sp)
 800703c:	ac000044 	addi	r16,r21,1
 8007040:	2825883a 	mov	r18,r5
 8007044:	3029883a 	mov	r20,r6
 8007048:	2027883a 	mov	r19,r4
 800704c:	29400117 	ldw	r5,4(r5)
 8007050:	1400030e 	bge	r2,r16,8007060 <__lshift+0x54>
 8007054:	1085883a 	add	r2,r2,r2
 8007058:	29400044 	addi	r5,r5,1
 800705c:	143ffd16 	blt	r2,r16,8007054 <__lshift+0x48>
 8007060:	9809883a 	mov	r4,r19
 8007064:	800681c0 	call	800681c <_Balloc>
 8007068:	10c00504 	addi	r3,r2,20
 800706c:	0440090e 	bge	zero,r17,8007094 <__lshift+0x88>
 8007070:	000f883a 	mov	r7,zero
 8007074:	18000015 	stw	zero,0(r3)
 8007078:	39c00044 	addi	r7,r7,1
 800707c:	18c00104 	addi	r3,r3,4
 8007080:	3c7ffc1e 	bne	r7,r17,8007074 <__lshift+0x68>
 8007084:	38c00144 	addi	r3,r7,5
 8007088:	18c7883a 	add	r3,r3,r3
 800708c:	18c7883a 	add	r3,r3,r3
 8007090:	10c7883a 	add	r3,r2,r3
 8007094:	92000417 	ldw	r8,16(r18)
 8007098:	a18007cc 	andi	r6,r20,31
 800709c:	91c00504 	addi	r7,r18,20
 80070a0:	42000144 	addi	r8,r8,5
 80070a4:	4211883a 	add	r8,r8,r8
 80070a8:	4211883a 	add	r8,r8,r8
 80070ac:	9211883a 	add	r8,r18,r8
 80070b0:	30002226 	beq	r6,zero,800713c <__lshift+0x130>
 80070b4:	02800804 	movi	r10,32
 80070b8:	5195c83a 	sub	r10,r10,r6
 80070bc:	000b883a 	mov	r5,zero
 80070c0:	3a400017 	ldw	r9,0(r7)
 80070c4:	18c00104 	addi	r3,r3,4
 80070c8:	39c00104 	addi	r7,r7,4
 80070cc:	4992983a 	sll	r9,r9,r6
 80070d0:	2a4ab03a 	or	r5,r5,r9
 80070d4:	197fff15 	stw	r5,-4(r3)
 80070d8:	397fff17 	ldw	r5,-4(r7)
 80070dc:	2a8ad83a 	srl	r5,r5,r10
 80070e0:	3a3ff736 	bltu	r7,r8,80070c0 <__lshift+0xb4>
 80070e4:	19400015 	stw	r5,0(r3)
 80070e8:	28000126 	beq	r5,zero,80070f0 <__lshift+0xe4>
 80070ec:	ac000084 	addi	r16,r21,2
 80070f0:	91000117 	ldw	r4,4(r18)
 80070f4:	98c01317 	ldw	r3,76(r19)
 80070f8:	843fffc4 	addi	r16,r16,-1
 80070fc:	2109883a 	add	r4,r4,r4
 8007100:	2109883a 	add	r4,r4,r4
 8007104:	1907883a 	add	r3,r3,r4
 8007108:	19000017 	ldw	r4,0(r3)
 800710c:	14000415 	stw	r16,16(r2)
 8007110:	91000015 	stw	r4,0(r18)
 8007114:	1c800015 	stw	r18,0(r3)
 8007118:	dfc00617 	ldw	ra,24(sp)
 800711c:	dd400517 	ldw	r21,20(sp)
 8007120:	dd000417 	ldw	r20,16(sp)
 8007124:	dcc00317 	ldw	r19,12(sp)
 8007128:	dc800217 	ldw	r18,8(sp)
 800712c:	dc400117 	ldw	r17,4(sp)
 8007130:	dc000017 	ldw	r16,0(sp)
 8007134:	dec00704 	addi	sp,sp,28
 8007138:	f800283a 	ret
 800713c:	39400017 	ldw	r5,0(r7)
 8007140:	18c00104 	addi	r3,r3,4
 8007144:	39c00104 	addi	r7,r7,4
 8007148:	197fff15 	stw	r5,-4(r3)
 800714c:	3a3fe82e 	bgeu	r7,r8,80070f0 <__lshift+0xe4>
 8007150:	39400017 	ldw	r5,0(r7)
 8007154:	18c00104 	addi	r3,r3,4
 8007158:	39c00104 	addi	r7,r7,4
 800715c:	197fff15 	stw	r5,-4(r3)
 8007160:	3a3ff636 	bltu	r7,r8,800713c <__lshift+0x130>
 8007164:	003fe206 	br	80070f0 <__lshift+0xe4>

08007168 <__mcmp>:
 8007168:	20800417 	ldw	r2,16(r4)
 800716c:	28c00417 	ldw	r3,16(r5)
 8007170:	10c5c83a 	sub	r2,r2,r3
 8007174:	10000f1e 	bne	r2,zero,80071b4 <__mcmp+0x4c>
 8007178:	18c00144 	addi	r3,r3,5
 800717c:	18c7883a 	add	r3,r3,r3
 8007180:	18c7883a 	add	r3,r3,r3
 8007184:	21c00504 	addi	r7,r4,20
 8007188:	28cb883a 	add	r5,r5,r3
 800718c:	20c9883a 	add	r4,r4,r3
 8007190:	213fff04 	addi	r4,r4,-4
 8007194:	297fff04 	addi	r5,r5,-4
 8007198:	21800017 	ldw	r6,0(r4)
 800719c:	28c00017 	ldw	r3,0(r5)
 80071a0:	30c0021e 	bne	r6,r3,80071ac <__mcmp+0x44>
 80071a4:	393ffa36 	bltu	r7,r4,8007190 <__mcmp+0x28>
 80071a8:	f800283a 	ret
 80071ac:	30c00236 	bltu	r6,r3,80071b8 <__mcmp+0x50>
 80071b0:	00800044 	movi	r2,1
 80071b4:	f800283a 	ret
 80071b8:	00bfffc4 	movi	r2,-1
 80071bc:	f800283a 	ret

080071c0 <__mdiff>:
 80071c0:	defffb04 	addi	sp,sp,-20
 80071c4:	dc000015 	stw	r16,0(sp)
 80071c8:	2821883a 	mov	r16,r5
 80071cc:	dc800215 	stw	r18,8(sp)
 80071d0:	300b883a 	mov	r5,r6
 80071d4:	2025883a 	mov	r18,r4
 80071d8:	8009883a 	mov	r4,r16
 80071dc:	dc400115 	stw	r17,4(sp)
 80071e0:	dfc00415 	stw	ra,16(sp)
 80071e4:	dcc00315 	stw	r19,12(sp)
 80071e8:	3023883a 	mov	r17,r6
 80071ec:	80071680 	call	8007168 <__mcmp>
 80071f0:	10005026 	beq	r2,zero,8007334 <__mdiff+0x174>
 80071f4:	10004a16 	blt	r2,zero,8007320 <__mdiff+0x160>
 80071f8:	0027883a 	mov	r19,zero
 80071fc:	81400117 	ldw	r5,4(r16)
 8007200:	9009883a 	mov	r4,r18
 8007204:	800681c0 	call	800681c <_Balloc>
 8007208:	82400417 	ldw	r9,16(r16)
 800720c:	89800417 	ldw	r6,16(r17)
 8007210:	14c00315 	stw	r19,12(r2)
 8007214:	4b800144 	addi	r14,r9,5
 8007218:	31800144 	addi	r6,r6,5
 800721c:	739d883a 	add	r14,r14,r14
 8007220:	318d883a 	add	r6,r6,r6
 8007224:	739d883a 	add	r14,r14,r14
 8007228:	318d883a 	add	r6,r6,r6
 800722c:	81c00504 	addi	r7,r16,20
 8007230:	839d883a 	add	r14,r16,r14
 8007234:	8a000504 	addi	r8,r17,20
 8007238:	898d883a 	add	r6,r17,r6
 800723c:	10c00504 	addi	r3,r2,20
 8007240:	0009883a 	mov	r4,zero
 8007244:	3b000017 	ldw	r12,0(r7)
 8007248:	42c00017 	ldw	r11,0(r8)
 800724c:	42000104 	addi	r8,r8,4
 8007250:	62bfffcc 	andi	r10,r12,65535
 8007254:	5b7fffcc 	andi	r13,r11,65535
 8007258:	5109883a 	add	r4,r10,r4
 800725c:	2355c83a 	sub	r10,r4,r13
 8007260:	5816d43a 	srli	r11,r11,16
 8007264:	6008d43a 	srli	r4,r12,16
 8007268:	501bd43a 	srai	r13,r10,16
 800726c:	1a80000d 	sth	r10,0(r3)
 8007270:	22c9c83a 	sub	r4,r4,r11
 8007274:	2349883a 	add	r4,r4,r13
 8007278:	1900008d 	sth	r4,2(r3)
 800727c:	39c00104 	addi	r7,r7,4
 8007280:	2009d43a 	srai	r4,r4,16
 8007284:	18c00104 	addi	r3,r3,4
 8007288:	41bfee36 	bltu	r8,r6,8007244 <__mdiff+0x84>
 800728c:	180b883a 	mov	r5,r3
 8007290:	3815883a 	mov	r10,r7
 8007294:	3b80132e 	bgeu	r7,r14,80072e4 <__mdiff+0x124>
 8007298:	3a000017 	ldw	r8,0(r7)
 800729c:	18c00104 	addi	r3,r3,4
 80072a0:	39c00104 	addi	r7,r7,4
 80072a4:	41bfffcc 	andi	r6,r8,65535
 80072a8:	310d883a 	add	r6,r6,r4
 80072ac:	3009d43a 	srai	r4,r6,16
 80072b0:	4010d43a 	srli	r8,r8,16
 80072b4:	19bfff0d 	sth	r6,-4(r3)
 80072b8:	2209883a 	add	r4,r4,r8
 80072bc:	193fff8d 	sth	r4,-2(r3)
 80072c0:	2009d43a 	srai	r4,r4,16
 80072c4:	3bbff436 	bltu	r7,r14,8007298 <__mdiff+0xd8>
 80072c8:	0286303a 	nor	r3,zero,r10
 80072cc:	1b87883a 	add	r3,r3,r14
 80072d0:	1806d0ba 	srli	r3,r3,2
 80072d4:	18c00044 	addi	r3,r3,1
 80072d8:	18c7883a 	add	r3,r3,r3
 80072dc:	18c7883a 	add	r3,r3,r3
 80072e0:	28c7883a 	add	r3,r5,r3
 80072e4:	193fff17 	ldw	r4,-4(r3)
 80072e8:	18ffff04 	addi	r3,r3,-4
 80072ec:	2000041e 	bne	r4,zero,8007300 <__mdiff+0x140>
 80072f0:	18ffff04 	addi	r3,r3,-4
 80072f4:	19000017 	ldw	r4,0(r3)
 80072f8:	4a7fffc4 	addi	r9,r9,-1
 80072fc:	203ffc26 	beq	r4,zero,80072f0 <__mdiff+0x130>
 8007300:	12400415 	stw	r9,16(r2)
 8007304:	dfc00417 	ldw	ra,16(sp)
 8007308:	dcc00317 	ldw	r19,12(sp)
 800730c:	dc800217 	ldw	r18,8(sp)
 8007310:	dc400117 	ldw	r17,4(sp)
 8007314:	dc000017 	ldw	r16,0(sp)
 8007318:	dec00504 	addi	sp,sp,20
 800731c:	f800283a 	ret
 8007320:	8005883a 	mov	r2,r16
 8007324:	04c00044 	movi	r19,1
 8007328:	8821883a 	mov	r16,r17
 800732c:	1023883a 	mov	r17,r2
 8007330:	003fb206 	br	80071fc <__mdiff+0x3c>
 8007334:	9009883a 	mov	r4,r18
 8007338:	000b883a 	mov	r5,zero
 800733c:	800681c0 	call	800681c <_Balloc>
 8007340:	00c00044 	movi	r3,1
 8007344:	10c00415 	stw	r3,16(r2)
 8007348:	10000515 	stw	zero,20(r2)
 800734c:	dfc00417 	ldw	ra,16(sp)
 8007350:	dcc00317 	ldw	r19,12(sp)
 8007354:	dc800217 	ldw	r18,8(sp)
 8007358:	dc400117 	ldw	r17,4(sp)
 800735c:	dc000017 	ldw	r16,0(sp)
 8007360:	dec00504 	addi	sp,sp,20
 8007364:	f800283a 	ret

08007368 <__ulp>:
 8007368:	295ffc2c 	andhi	r5,r5,32752
 800736c:	00bf3034 	movhi	r2,64704
 8007370:	2887883a 	add	r3,r5,r2
 8007374:	00c0020e 	bge	zero,r3,8007380 <__ulp+0x18>
 8007378:	0005883a 	mov	r2,zero
 800737c:	f800283a 	ret
 8007380:	00c7c83a 	sub	r3,zero,r3
 8007384:	1805d53a 	srai	r2,r3,20
 8007388:	00c004c4 	movi	r3,19
 800738c:	18800a0e 	bge	r3,r2,80073b8 <__ulp+0x50>
 8007390:	01000c84 	movi	r4,50
 8007394:	0007883a 	mov	r3,zero
 8007398:	20800516 	blt	r4,r2,80073b0 <__ulp+0x48>
 800739c:	01000cc4 	movi	r4,51
 80073a0:	2085c83a 	sub	r2,r4,r2
 80073a4:	01000044 	movi	r4,1
 80073a8:	2084983a 	sll	r2,r4,r2
 80073ac:	f800283a 	ret
 80073b0:	00800044 	movi	r2,1
 80073b4:	f800283a 	ret
 80073b8:	00c00234 	movhi	r3,8
 80073bc:	1887d83a 	sra	r3,r3,r2
 80073c0:	0005883a 	mov	r2,zero
 80073c4:	f800283a 	ret

080073c8 <__b2d>:
 80073c8:	defffa04 	addi	sp,sp,-24
 80073cc:	dc000015 	stw	r16,0(sp)
 80073d0:	24000417 	ldw	r16,16(r4)
 80073d4:	dc400115 	stw	r17,4(sp)
 80073d8:	dcc00315 	stw	r19,12(sp)
 80073dc:	84000144 	addi	r16,r16,5
 80073e0:	8421883a 	add	r16,r16,r16
 80073e4:	8421883a 	add	r16,r16,r16
 80073e8:	2421883a 	add	r16,r4,r16
 80073ec:	847fff17 	ldw	r17,-4(r16)
 80073f0:	24c00504 	addi	r19,r4,20
 80073f4:	dd000415 	stw	r20,16(sp)
 80073f8:	8809883a 	mov	r4,r17
 80073fc:	dc800215 	stw	r18,8(sp)
 8007400:	2829883a 	mov	r20,r5
 8007404:	dfc00515 	stw	ra,20(sp)
 8007408:	8006b340 	call	8006b34 <__hi0bits>
 800740c:	00c00804 	movi	r3,32
 8007410:	1887c83a 	sub	r3,r3,r2
 8007414:	a0c00015 	stw	r3,0(r20)
 8007418:	00c00284 	movi	r3,10
 800741c:	84bfff04 	addi	r18,r16,-4
 8007420:	18801216 	blt	r3,r2,800746c <__b2d+0xa4>
 8007424:	010002c4 	movi	r4,11
 8007428:	2089c83a 	sub	r4,r4,r2
 800742c:	8906d83a 	srl	r3,r17,r4
 8007430:	18cffc34 	orhi	r3,r3,16368
 8007434:	9c80322e 	bgeu	r19,r18,8007500 <__b2d+0x138>
 8007438:	817ffe17 	ldw	r5,-8(r16)
 800743c:	2908d83a 	srl	r4,r5,r4
 8007440:	10800544 	addi	r2,r2,21
 8007444:	88a2983a 	sll	r17,r17,r2
 8007448:	2444b03a 	or	r2,r4,r17
 800744c:	dfc00517 	ldw	ra,20(sp)
 8007450:	dd000417 	ldw	r20,16(sp)
 8007454:	dcc00317 	ldw	r19,12(sp)
 8007458:	dc800217 	ldw	r18,8(sp)
 800745c:	dc400117 	ldw	r17,4(sp)
 8007460:	dc000017 	ldw	r16,0(sp)
 8007464:	dec00604 	addi	sp,sp,24
 8007468:	f800283a 	ret
 800746c:	9c801636 	bltu	r19,r18,80074c8 <__b2d+0x100>
 8007470:	113ffd44 	addi	r4,r2,-11
 8007474:	000b883a 	mov	r5,zero
 8007478:	20001726 	beq	r4,zero,80074d8 <__b2d+0x110>
 800747c:	00c00ac4 	movi	r3,43
 8007480:	1885c83a 	sub	r2,r3,r2
 8007484:	8906983a 	sll	r3,r17,r4
 8007488:	288cd83a 	srl	r6,r5,r2
 800748c:	18cffc34 	orhi	r3,r3,16368
 8007490:	1986b03a 	or	r3,r3,r6
 8007494:	9c801c2e 	bgeu	r19,r18,8007508 <__b2d+0x140>
 8007498:	91bfff17 	ldw	r6,-4(r18)
 800749c:	3084d83a 	srl	r2,r6,r2
 80074a0:	2908983a 	sll	r4,r5,r4
 80074a4:	1104b03a 	or	r2,r2,r4
 80074a8:	dfc00517 	ldw	ra,20(sp)
 80074ac:	dd000417 	ldw	r20,16(sp)
 80074b0:	dcc00317 	ldw	r19,12(sp)
 80074b4:	dc800217 	ldw	r18,8(sp)
 80074b8:	dc400117 	ldw	r17,4(sp)
 80074bc:	dc000017 	ldw	r16,0(sp)
 80074c0:	dec00604 	addi	sp,sp,24
 80074c4:	f800283a 	ret
 80074c8:	113ffd44 	addi	r4,r2,-11
 80074cc:	84bffe04 	addi	r18,r16,-8
 80074d0:	817ffe17 	ldw	r5,-8(r16)
 80074d4:	203fe91e 	bne	r4,zero,800747c <__b2d+0xb4>
 80074d8:	88cffc34 	orhi	r3,r17,16368
 80074dc:	2805883a 	mov	r2,r5
 80074e0:	dfc00517 	ldw	ra,20(sp)
 80074e4:	dd000417 	ldw	r20,16(sp)
 80074e8:	dcc00317 	ldw	r19,12(sp)
 80074ec:	dc800217 	ldw	r18,8(sp)
 80074f0:	dc400117 	ldw	r17,4(sp)
 80074f4:	dc000017 	ldw	r16,0(sp)
 80074f8:	dec00604 	addi	sp,sp,24
 80074fc:	f800283a 	ret
 8007500:	0009883a 	mov	r4,zero
 8007504:	003fce06 	br	8007440 <__b2d+0x78>
 8007508:	0005883a 	mov	r2,zero
 800750c:	003fe406 	br	80074a0 <__b2d+0xd8>

08007510 <__d2b>:
 8007510:	defff804 	addi	sp,sp,-32
 8007514:	dc400315 	stw	r17,12(sp)
 8007518:	3023883a 	mov	r17,r6
 800751c:	dc800415 	stw	r18,16(sp)
 8007520:	8824907a 	slli	r18,r17,1
 8007524:	dcc00515 	stw	r19,20(sp)
 8007528:	2827883a 	mov	r19,r5
 800752c:	9024d57a 	srli	r18,r18,21
 8007530:	01400044 	movi	r5,1
 8007534:	dd000615 	stw	r20,24(sp)
 8007538:	dc000215 	stw	r16,8(sp)
 800753c:	dfc00715 	stw	ra,28(sp)
 8007540:	3829883a 	mov	r20,r7
 8007544:	800681c0 	call	800681c <_Balloc>
 8007548:	1021883a 	mov	r16,r2
 800754c:	00800434 	movhi	r2,16
 8007550:	10bfffc4 	addi	r2,r2,-1
 8007554:	88a2703a 	and	r17,r17,r2
 8007558:	90000126 	beq	r18,zero,8007560 <__d2b+0x50>
 800755c:	8c400434 	orhi	r17,r17,16
 8007560:	dc400015 	stw	r17,0(sp)
 8007564:	98002226 	beq	r19,zero,80075f0 <__d2b+0xe0>
 8007568:	d9000104 	addi	r4,sp,4
 800756c:	dcc00115 	stw	r19,4(sp)
 8007570:	8006b9c0 	call	8006b9c <__lo0bits>
 8007574:	d8c00017 	ldw	r3,0(sp)
 8007578:	10002d1e 	bne	r2,zero,8007630 <__d2b+0x120>
 800757c:	d9000117 	ldw	r4,4(sp)
 8007580:	81000515 	stw	r4,20(r16)
 8007584:	1823003a 	cmpeq	r17,r3,zero
 8007588:	01000084 	movi	r4,2
 800758c:	2463c83a 	sub	r17,r4,r17
 8007590:	80c00615 	stw	r3,24(r16)
 8007594:	84400415 	stw	r17,16(r16)
 8007598:	90001d1e 	bne	r18,zero,8007610 <__d2b+0x100>
 800759c:	88c00104 	addi	r3,r17,4
 80075a0:	18c7883a 	add	r3,r3,r3
 80075a4:	18c7883a 	add	r3,r3,r3
 80075a8:	80c7883a 	add	r3,r16,r3
 80075ac:	19000017 	ldw	r4,0(r3)
 80075b0:	10bef384 	addi	r2,r2,-1074
 80075b4:	a0800015 	stw	r2,0(r20)
 80075b8:	8006b340 	call	8006b34 <__hi0bits>
 80075bc:	8822917a 	slli	r17,r17,5
 80075c0:	d8c00817 	ldw	r3,32(sp)
 80075c4:	8885c83a 	sub	r2,r17,r2
 80075c8:	18800015 	stw	r2,0(r3)
 80075cc:	8005883a 	mov	r2,r16
 80075d0:	dfc00717 	ldw	ra,28(sp)
 80075d4:	dd000617 	ldw	r20,24(sp)
 80075d8:	dcc00517 	ldw	r19,20(sp)
 80075dc:	dc800417 	ldw	r18,16(sp)
 80075e0:	dc400317 	ldw	r17,12(sp)
 80075e4:	dc000217 	ldw	r16,8(sp)
 80075e8:	dec00804 	addi	sp,sp,32
 80075ec:	f800283a 	ret
 80075f0:	d809883a 	mov	r4,sp
 80075f4:	8006b9c0 	call	8006b9c <__lo0bits>
 80075f8:	d8c00017 	ldw	r3,0(sp)
 80075fc:	04400044 	movi	r17,1
 8007600:	84400415 	stw	r17,16(r16)
 8007604:	80c00515 	stw	r3,20(r16)
 8007608:	10800804 	addi	r2,r2,32
 800760c:	903fe326 	beq	r18,zero,800759c <__d2b+0x8c>
 8007610:	00c00d44 	movi	r3,53
 8007614:	94bef344 	addi	r18,r18,-1075
 8007618:	90a5883a 	add	r18,r18,r2
 800761c:	1885c83a 	sub	r2,r3,r2
 8007620:	d8c00817 	ldw	r3,32(sp)
 8007624:	a4800015 	stw	r18,0(r20)
 8007628:	18800015 	stw	r2,0(r3)
 800762c:	003fe706 	br	80075cc <__d2b+0xbc>
 8007630:	01000804 	movi	r4,32
 8007634:	2089c83a 	sub	r4,r4,r2
 8007638:	1908983a 	sll	r4,r3,r4
 800763c:	d9400117 	ldw	r5,4(sp)
 8007640:	1886d83a 	srl	r3,r3,r2
 8007644:	2148b03a 	or	r4,r4,r5
 8007648:	81000515 	stw	r4,20(r16)
 800764c:	d8c00015 	stw	r3,0(sp)
 8007650:	003fcc06 	br	8007584 <__d2b+0x74>

08007654 <__ratio>:
 8007654:	defff904 	addi	sp,sp,-28
 8007658:	dc400315 	stw	r17,12(sp)
 800765c:	2823883a 	mov	r17,r5
 8007660:	d9400104 	addi	r5,sp,4
 8007664:	dfc00615 	stw	ra,24(sp)
 8007668:	dcc00515 	stw	r19,20(sp)
 800766c:	dc800415 	stw	r18,16(sp)
 8007670:	2027883a 	mov	r19,r4
 8007674:	dc000215 	stw	r16,8(sp)
 8007678:	80073c80 	call	80073c8 <__b2d>
 800767c:	8809883a 	mov	r4,r17
 8007680:	d80b883a 	mov	r5,sp
 8007684:	1025883a 	mov	r18,r2
 8007688:	1821883a 	mov	r16,r3
 800768c:	80073c80 	call	80073c8 <__b2d>
 8007690:	99400417 	ldw	r5,16(r19)
 8007694:	89000417 	ldw	r4,16(r17)
 8007698:	d9800117 	ldw	r6,4(sp)
 800769c:	2909c83a 	sub	r4,r5,r4
 80076a0:	d9400017 	ldw	r5,0(sp)
 80076a4:	2008917a 	slli	r4,r4,5
 80076a8:	314bc83a 	sub	r5,r6,r5
 80076ac:	290b883a 	add	r5,r5,r4
 80076b0:	01400e0e 	bge	zero,r5,80076ec <__ratio+0x98>
 80076b4:	280a953a 	slli	r5,r5,20
 80076b8:	2c21883a 	add	r16,r5,r16
 80076bc:	9009883a 	mov	r4,r18
 80076c0:	800b883a 	mov	r5,r16
 80076c4:	100d883a 	mov	r6,r2
 80076c8:	180f883a 	mov	r7,r3
 80076cc:	80099080 	call	8009908 <__divdf3>
 80076d0:	dfc00617 	ldw	ra,24(sp)
 80076d4:	dcc00517 	ldw	r19,20(sp)
 80076d8:	dc800417 	ldw	r18,16(sp)
 80076dc:	dc400317 	ldw	r17,12(sp)
 80076e0:	dc000217 	ldw	r16,8(sp)
 80076e4:	dec00704 	addi	sp,sp,28
 80076e8:	f800283a 	ret
 80076ec:	280a953a 	slli	r5,r5,20
 80076f0:	1947c83a 	sub	r3,r3,r5
 80076f4:	003ff106 	br	80076bc <__ratio+0x68>

080076f8 <_mprec_log10>:
 80076f8:	defffe04 	addi	sp,sp,-8
 80076fc:	dc000015 	stw	r16,0(sp)
 8007700:	dfc00115 	stw	ra,4(sp)
 8007704:	008005c4 	movi	r2,23
 8007708:	2021883a 	mov	r16,r4
 800770c:	11000d0e 	bge	r2,r4,8007744 <_mprec_log10+0x4c>
 8007710:	0005883a 	mov	r2,zero
 8007714:	00cffc34 	movhi	r3,16368
 8007718:	843fffc4 	addi	r16,r16,-1
 800771c:	1009883a 	mov	r4,r2
 8007720:	180b883a 	mov	r5,r3
 8007724:	000d883a 	mov	r6,zero
 8007728:	01d00934 	movhi	r7,16420
 800772c:	80096240 	call	8009624 <__muldf3>
 8007730:	803ff91e 	bne	r16,zero,8007718 <_mprec_log10+0x20>
 8007734:	dfc00117 	ldw	ra,4(sp)
 8007738:	dc000017 	ldw	r16,0(sp)
 800773c:	dec00204 	addi	sp,sp,8
 8007740:	f800283a 	ret
 8007744:	202090fa 	slli	r16,r4,3
 8007748:	00820074 	movhi	r2,2049
 800774c:	10b50b04 	addi	r2,r2,-11220
 8007750:	1421883a 	add	r16,r2,r16
 8007754:	80800017 	ldw	r2,0(r16)
 8007758:	80c00117 	ldw	r3,4(r16)
 800775c:	dfc00117 	ldw	ra,4(sp)
 8007760:	dc000017 	ldw	r16,0(sp)
 8007764:	dec00204 	addi	sp,sp,8
 8007768:	f800283a 	ret

0800776c <__copybits>:
 800776c:	297fffc4 	addi	r5,r5,-1
 8007770:	31c00417 	ldw	r7,16(r6)
 8007774:	2811d17a 	srai	r8,r5,5
 8007778:	30800504 	addi	r2,r6,20
 800777c:	39c00144 	addi	r7,r7,5
 8007780:	42000044 	addi	r8,r8,1
 8007784:	39cf883a 	add	r7,r7,r7
 8007788:	4211883a 	add	r8,r8,r8
 800778c:	39cf883a 	add	r7,r7,r7
 8007790:	4211883a 	add	r8,r8,r8
 8007794:	31cf883a 	add	r7,r6,r7
 8007798:	2211883a 	add	r8,r4,r8
 800779c:	11c00d2e 	bgeu	r2,r7,80077d4 <__copybits+0x68>
 80077a0:	2007883a 	mov	r3,r4
 80077a4:	11400017 	ldw	r5,0(r2)
 80077a8:	18c00104 	addi	r3,r3,4
 80077ac:	10800104 	addi	r2,r2,4
 80077b0:	197fff15 	stw	r5,-4(r3)
 80077b4:	11fffb36 	bltu	r2,r7,80077a4 <__copybits+0x38>
 80077b8:	3985c83a 	sub	r2,r7,r6
 80077bc:	10bffac4 	addi	r2,r2,-21
 80077c0:	1004d0ba 	srli	r2,r2,2
 80077c4:	10800044 	addi	r2,r2,1
 80077c8:	1085883a 	add	r2,r2,r2
 80077cc:	1085883a 	add	r2,r2,r2
 80077d0:	2089883a 	add	r4,r4,r2
 80077d4:	2200032e 	bgeu	r4,r8,80077e4 <__copybits+0x78>
 80077d8:	20000015 	stw	zero,0(r4)
 80077dc:	21000104 	addi	r4,r4,4
 80077e0:	223ffd36 	bltu	r4,r8,80077d8 <__copybits+0x6c>
 80077e4:	f800283a 	ret

080077e8 <__any_on>:
 80077e8:	21800417 	ldw	r6,16(r4)
 80077ec:	2805d17a 	srai	r2,r5,5
 80077f0:	20c00504 	addi	r3,r4,20
 80077f4:	30800f0e 	bge	r6,r2,8007834 <__any_on+0x4c>
 80077f8:	3005883a 	mov	r2,r6
 80077fc:	10800144 	addi	r2,r2,5
 8007800:	1085883a 	add	r2,r2,r2
 8007804:	1085883a 	add	r2,r2,r2
 8007808:	2089883a 	add	r4,r4,r2
 800780c:	1900152e 	bgeu	r3,r4,8007864 <__any_on+0x7c>
 8007810:	20bfff17 	ldw	r2,-4(r4)
 8007814:	213fff04 	addi	r4,r4,-4
 8007818:	1000041e 	bne	r2,zero,800782c <__any_on+0x44>
 800781c:	1900112e 	bgeu	r3,r4,8007864 <__any_on+0x7c>
 8007820:	213fff04 	addi	r4,r4,-4
 8007824:	20800017 	ldw	r2,0(r4)
 8007828:	103ffc26 	beq	r2,zero,800781c <__any_on+0x34>
 800782c:	00800044 	movi	r2,1
 8007830:	f800283a 	ret
 8007834:	11bff10e 	bge	r2,r6,80077fc <__any_on+0x14>
 8007838:	294007cc 	andi	r5,r5,31
 800783c:	283fef26 	beq	r5,zero,80077fc <__any_on+0x14>
 8007840:	11800144 	addi	r6,r2,5
 8007844:	318d883a 	add	r6,r6,r6
 8007848:	318d883a 	add	r6,r6,r6
 800784c:	218d883a 	add	r6,r4,r6
 8007850:	31800017 	ldw	r6,0(r6)
 8007854:	314ed83a 	srl	r7,r6,r5
 8007858:	394a983a 	sll	r5,r7,r5
 800785c:	29bff31e 	bne	r5,r6,800782c <__any_on+0x44>
 8007860:	003fe606 	br	80077fc <__any_on+0x14>
 8007864:	0005883a 	mov	r2,zero
 8007868:	f800283a 	ret

0800786c <_realloc_r>:
 800786c:	defff504 	addi	sp,sp,-44
 8007870:	dd400615 	stw	r21,24(sp)
 8007874:	dc800315 	stw	r18,12(sp)
 8007878:	dc000115 	stw	r16,4(sp)
 800787c:	dfc00a15 	stw	ra,40(sp)
 8007880:	df000915 	stw	fp,36(sp)
 8007884:	ddc00815 	stw	r23,32(sp)
 8007888:	dd800715 	stw	r22,28(sp)
 800788c:	dd000515 	stw	r20,20(sp)
 8007890:	dcc00415 	stw	r19,16(sp)
 8007894:	dc400215 	stw	r17,8(sp)
 8007898:	2821883a 	mov	r16,r5
 800789c:	202b883a 	mov	r21,r4
 80078a0:	3025883a 	mov	r18,r6
 80078a4:	28009626 	beq	r5,zero,8007b00 <_realloc_r+0x294>
 80078a8:	800ab980 	call	800ab98 <__malloc_lock>
 80078ac:	80bfff17 	ldw	r2,-4(r16)
 80078b0:	04ffff04 	movi	r19,-4
 80078b4:	90c002c4 	addi	r3,r18,11
 80078b8:	01000584 	movi	r4,22
 80078bc:	85bffe04 	addi	r22,r16,-8
 80078c0:	14e6703a 	and	r19,r2,r19
 80078c4:	20c0372e 	bgeu	r4,r3,80079a4 <_realloc_r+0x138>
 80078c8:	047ffe04 	movi	r17,-8
 80078cc:	1c62703a 	and	r17,r3,r17
 80078d0:	8807883a 	mov	r3,r17
 80078d4:	88005a16 	blt	r17,zero,8007a40 <_realloc_r+0x1d4>
 80078d8:	8c805936 	bltu	r17,r18,8007a40 <_realloc_r+0x1d4>
 80078dc:	98c0340e 	bge	r19,r3,80079b0 <_realloc_r+0x144>
 80078e0:	07020074 	movhi	fp,2049
 80078e4:	e7369304 	addi	fp,fp,-9652
 80078e8:	e1400217 	ldw	r5,8(fp)
 80078ec:	b4c9883a 	add	r4,r22,r19
 80078f0:	29009026 	beq	r5,r4,8007b34 <_realloc_r+0x2c8>
 80078f4:	21800117 	ldw	r6,4(r4)
 80078f8:	01ffff84 	movi	r7,-2
 80078fc:	31ce703a 	and	r7,r6,r7
 8007900:	21cf883a 	add	r7,r4,r7
 8007904:	39c00117 	ldw	r7,4(r7)
 8007908:	39c0004c 	andi	r7,r7,1
 800790c:	38004326 	beq	r7,zero,8007a1c <_realloc_r+0x1b0>
 8007910:	000d883a 	mov	r6,zero
 8007914:	0009883a 	mov	r4,zero
 8007918:	1080004c 	andi	r2,r2,1
 800791c:	10005a1e 	bne	r2,zero,8007a88 <_realloc_r+0x21c>
 8007920:	85fffe17 	ldw	r23,-8(r16)
 8007924:	00bfff04 	movi	r2,-4
 8007928:	b5efc83a 	sub	r23,r22,r23
 800792c:	b9c00117 	ldw	r7,4(r23)
 8007930:	388e703a 	and	r7,r7,r2
 8007934:	3ccf883a 	add	r7,r7,r19
 8007938:	20005226 	beq	r4,zero,8007a84 <_realloc_r+0x218>
 800793c:	31e9883a 	add	r20,r6,r7
 8007940:	2140c726 	beq	r4,r5,8007c60 <_realloc_r+0x3f4>
 8007944:	a0c04f16 	blt	r20,r3,8007a84 <_realloc_r+0x218>
 8007948:	20800317 	ldw	r2,12(r4)
 800794c:	20c00217 	ldw	r3,8(r4)
 8007950:	99bfff04 	addi	r6,r19,-4
 8007954:	01000904 	movi	r4,36
 8007958:	18800315 	stw	r2,12(r3)
 800795c:	10c00215 	stw	r3,8(r2)
 8007960:	b8c00217 	ldw	r3,8(r23)
 8007964:	b8800317 	ldw	r2,12(r23)
 8007968:	bc800204 	addi	r18,r23,8
 800796c:	18800315 	stw	r2,12(r3)
 8007970:	10c00215 	stw	r3,8(r2)
 8007974:	2180ed36 	bltu	r4,r6,8007d2c <_realloc_r+0x4c0>
 8007978:	008004c4 	movi	r2,19
 800797c:	11809b2e 	bgeu	r2,r6,8007bec <_realloc_r+0x380>
 8007980:	80800017 	ldw	r2,0(r16)
 8007984:	b8800215 	stw	r2,8(r23)
 8007988:	80800117 	ldw	r2,4(r16)
 800798c:	b8800315 	stw	r2,12(r23)
 8007990:	008006c4 	movi	r2,27
 8007994:	1180f936 	bltu	r2,r6,8007d7c <_realloc_r+0x510>
 8007998:	b8800404 	addi	r2,r23,16
 800799c:	80c00204 	addi	r3,r16,8
 80079a0:	00009406 	br	8007bf4 <_realloc_r+0x388>
 80079a4:	00c00404 	movi	r3,16
 80079a8:	1823883a 	mov	r17,r3
 80079ac:	003fca06 	br	80078d8 <_realloc_r+0x6c>
 80079b0:	9829883a 	mov	r20,r19
 80079b4:	a447c83a 	sub	r3,r20,r17
 80079b8:	010003c4 	movi	r4,15
 80079bc:	1080004c 	andi	r2,r2,1
 80079c0:	20c02336 	bltu	r4,r3,8007a50 <_realloc_r+0x1e4>
 80079c4:	1504b03a 	or	r2,r2,r20
 80079c8:	b0800115 	stw	r2,4(r22)
 80079cc:	b52d883a 	add	r22,r22,r20
 80079d0:	b0800117 	ldw	r2,4(r22)
 80079d4:	10800054 	ori	r2,r2,1
 80079d8:	b0800115 	stw	r2,4(r22)
 80079dc:	a809883a 	mov	r4,r21
 80079e0:	800abb80 	call	800abb8 <__malloc_unlock>
 80079e4:	8025883a 	mov	r18,r16
 80079e8:	9005883a 	mov	r2,r18
 80079ec:	dfc00a17 	ldw	ra,40(sp)
 80079f0:	df000917 	ldw	fp,36(sp)
 80079f4:	ddc00817 	ldw	r23,32(sp)
 80079f8:	dd800717 	ldw	r22,28(sp)
 80079fc:	dd400617 	ldw	r21,24(sp)
 8007a00:	dd000517 	ldw	r20,20(sp)
 8007a04:	dcc00417 	ldw	r19,16(sp)
 8007a08:	dc800317 	ldw	r18,12(sp)
 8007a0c:	dc400217 	ldw	r17,8(sp)
 8007a10:	dc000117 	ldw	r16,4(sp)
 8007a14:	dec00b04 	addi	sp,sp,44
 8007a18:	f800283a 	ret
 8007a1c:	01ffff04 	movi	r7,-4
 8007a20:	31cc703a 	and	r6,r6,r7
 8007a24:	34e9883a 	add	r20,r6,r19
 8007a28:	a0ffbb16 	blt	r20,r3,8007918 <_realloc_r+0xac>
 8007a2c:	20c00317 	ldw	r3,12(r4)
 8007a30:	21000217 	ldw	r4,8(r4)
 8007a34:	20c00315 	stw	r3,12(r4)
 8007a38:	19000215 	stw	r4,8(r3)
 8007a3c:	003fdd06 	br	80079b4 <_realloc_r+0x148>
 8007a40:	00800304 	movi	r2,12
 8007a44:	a8800015 	stw	r2,0(r21)
 8007a48:	0025883a 	mov	r18,zero
 8007a4c:	003fe606 	br	80079e8 <_realloc_r+0x17c>
 8007a50:	1444b03a 	or	r2,r2,r17
 8007a54:	b0800115 	stw	r2,4(r22)
 8007a58:	b44b883a 	add	r5,r22,r17
 8007a5c:	18800054 	ori	r2,r3,1
 8007a60:	28800115 	stw	r2,4(r5)
 8007a64:	28c7883a 	add	r3,r5,r3
 8007a68:	18800117 	ldw	r2,4(r3)
 8007a6c:	a809883a 	mov	r4,r21
 8007a70:	29400204 	addi	r5,r5,8
 8007a74:	10800054 	ori	r2,r2,1
 8007a78:	18800115 	stw	r2,4(r3)
 8007a7c:	80050600 	call	8005060 <_free_r>
 8007a80:	003fd606 	br	80079dc <_realloc_r+0x170>
 8007a84:	38c0330e 	bge	r7,r3,8007b54 <_realloc_r+0x2e8>
 8007a88:	900b883a 	mov	r5,r18
 8007a8c:	a809883a 	mov	r4,r21
 8007a90:	8005bf80 	call	8005bf8 <_malloc_r>
 8007a94:	1025883a 	mov	r18,r2
 8007a98:	10001626 	beq	r2,zero,8007af4 <_realloc_r+0x288>
 8007a9c:	80bfff17 	ldw	r2,-4(r16)
 8007aa0:	00ffff84 	movi	r3,-2
 8007aa4:	913ffe04 	addi	r4,r18,-8
 8007aa8:	10c6703a 	and	r3,r2,r3
 8007aac:	b0c7883a 	add	r3,r22,r3
 8007ab0:	20c09926 	beq	r4,r3,8007d18 <_realloc_r+0x4ac>
 8007ab4:	99bfff04 	addi	r6,r19,-4
 8007ab8:	00800904 	movi	r2,36
 8007abc:	11806436 	bltu	r2,r6,8007c50 <_realloc_r+0x3e4>
 8007ac0:	00c004c4 	movi	r3,19
 8007ac4:	19804036 	bltu	r3,r6,8007bc8 <_realloc_r+0x35c>
 8007ac8:	9005883a 	mov	r2,r18
 8007acc:	8007883a 	mov	r3,r16
 8007ad0:	19000017 	ldw	r4,0(r3)
 8007ad4:	11000015 	stw	r4,0(r2)
 8007ad8:	19000117 	ldw	r4,4(r3)
 8007adc:	11000115 	stw	r4,4(r2)
 8007ae0:	18c00217 	ldw	r3,8(r3)
 8007ae4:	10c00215 	stw	r3,8(r2)
 8007ae8:	a809883a 	mov	r4,r21
 8007aec:	800b883a 	mov	r5,r16
 8007af0:	80050600 	call	8005060 <_free_r>
 8007af4:	a809883a 	mov	r4,r21
 8007af8:	800abb80 	call	800abb8 <__malloc_unlock>
 8007afc:	003fba06 	br	80079e8 <_realloc_r+0x17c>
 8007b00:	300b883a 	mov	r5,r6
 8007b04:	dfc00a17 	ldw	ra,40(sp)
 8007b08:	df000917 	ldw	fp,36(sp)
 8007b0c:	ddc00817 	ldw	r23,32(sp)
 8007b10:	dd800717 	ldw	r22,28(sp)
 8007b14:	dd400617 	ldw	r21,24(sp)
 8007b18:	dd000517 	ldw	r20,20(sp)
 8007b1c:	dcc00417 	ldw	r19,16(sp)
 8007b20:	dc800317 	ldw	r18,12(sp)
 8007b24:	dc400217 	ldw	r17,8(sp)
 8007b28:	dc000117 	ldw	r16,4(sp)
 8007b2c:	dec00b04 	addi	sp,sp,44
 8007b30:	8005bf81 	jmpi	8005bf8 <_malloc_r>
 8007b34:	29800117 	ldw	r6,4(r5)
 8007b38:	013fff04 	movi	r4,-4
 8007b3c:	89c00404 	addi	r7,r17,16
 8007b40:	310c703a 	and	r6,r6,r4
 8007b44:	34c9883a 	add	r4,r6,r19
 8007b48:	21c0340e 	bge	r4,r7,8007c1c <_realloc_r+0x3b0>
 8007b4c:	2809883a 	mov	r4,r5
 8007b50:	003f7106 	br	8007918 <_realloc_r+0xac>
 8007b54:	b8800317 	ldw	r2,12(r23)
 8007b58:	b8c00217 	ldw	r3,8(r23)
 8007b5c:	99bfff04 	addi	r6,r19,-4
 8007b60:	01000904 	movi	r4,36
 8007b64:	18800315 	stw	r2,12(r3)
 8007b68:	10c00215 	stw	r3,8(r2)
 8007b6c:	bc800204 	addi	r18,r23,8
 8007b70:	21807836 	bltu	r4,r6,8007d54 <_realloc_r+0x4e8>
 8007b74:	008004c4 	movi	r2,19
 8007b78:	1180732e 	bgeu	r2,r6,8007d48 <_realloc_r+0x4dc>
 8007b7c:	80800017 	ldw	r2,0(r16)
 8007b80:	b8800215 	stw	r2,8(r23)
 8007b84:	80800117 	ldw	r2,4(r16)
 8007b88:	b8800315 	stw	r2,12(r23)
 8007b8c:	008006c4 	movi	r2,27
 8007b90:	11808936 	bltu	r2,r6,8007db8 <_realloc_r+0x54c>
 8007b94:	b8800404 	addi	r2,r23,16
 8007b98:	80c00204 	addi	r3,r16,8
 8007b9c:	19000017 	ldw	r4,0(r3)
 8007ba0:	9021883a 	mov	r16,r18
 8007ba4:	3829883a 	mov	r20,r7
 8007ba8:	11000015 	stw	r4,0(r2)
 8007bac:	19000117 	ldw	r4,4(r3)
 8007bb0:	b82d883a 	mov	r22,r23
 8007bb4:	11000115 	stw	r4,4(r2)
 8007bb8:	18c00217 	ldw	r3,8(r3)
 8007bbc:	10c00215 	stw	r3,8(r2)
 8007bc0:	b8800117 	ldw	r2,4(r23)
 8007bc4:	003f7b06 	br	80079b4 <_realloc_r+0x148>
 8007bc8:	80c00017 	ldw	r3,0(r16)
 8007bcc:	90c00015 	stw	r3,0(r18)
 8007bd0:	80c00117 	ldw	r3,4(r16)
 8007bd4:	90c00115 	stw	r3,4(r18)
 8007bd8:	00c006c4 	movi	r3,27
 8007bdc:	19804636 	bltu	r3,r6,8007cf8 <_realloc_r+0x48c>
 8007be0:	90800204 	addi	r2,r18,8
 8007be4:	80c00204 	addi	r3,r16,8
 8007be8:	003fb906 	br	8007ad0 <_realloc_r+0x264>
 8007bec:	9005883a 	mov	r2,r18
 8007bf0:	8007883a 	mov	r3,r16
 8007bf4:	19000017 	ldw	r4,0(r3)
 8007bf8:	9021883a 	mov	r16,r18
 8007bfc:	b82d883a 	mov	r22,r23
 8007c00:	11000015 	stw	r4,0(r2)
 8007c04:	19000117 	ldw	r4,4(r3)
 8007c08:	11000115 	stw	r4,4(r2)
 8007c0c:	18c00217 	ldw	r3,8(r3)
 8007c10:	10c00215 	stw	r3,8(r2)
 8007c14:	b8800117 	ldw	r2,4(r23)
 8007c18:	003f6606 	br	80079b4 <_realloc_r+0x148>
 8007c1c:	2445c83a 	sub	r2,r4,r17
 8007c20:	b46d883a 	add	r22,r22,r17
 8007c24:	10800054 	ori	r2,r2,1
 8007c28:	b0800115 	stw	r2,4(r22)
 8007c2c:	80bfff17 	ldw	r2,-4(r16)
 8007c30:	a809883a 	mov	r4,r21
 8007c34:	e5800215 	stw	r22,8(fp)
 8007c38:	1080004c 	andi	r2,r2,1
 8007c3c:	88a2b03a 	or	r17,r17,r2
 8007c40:	847fff15 	stw	r17,-4(r16)
 8007c44:	800abb80 	call	800abb8 <__malloc_unlock>
 8007c48:	8025883a 	mov	r18,r16
 8007c4c:	003f6606 	br	80079e8 <_realloc_r+0x17c>
 8007c50:	9009883a 	mov	r4,r18
 8007c54:	800b883a 	mov	r5,r16
 8007c58:	80065b40 	call	80065b4 <memmove>
 8007c5c:	003fa206 	br	8007ae8 <_realloc_r+0x27c>
 8007c60:	88800404 	addi	r2,r17,16
 8007c64:	a0bf8716 	blt	r20,r2,8007a84 <_realloc_r+0x218>
 8007c68:	b8800317 	ldw	r2,12(r23)
 8007c6c:	b8c00217 	ldw	r3,8(r23)
 8007c70:	99bfff04 	addi	r6,r19,-4
 8007c74:	01000904 	movi	r4,36
 8007c78:	18800315 	stw	r2,12(r3)
 8007c7c:	10c00215 	stw	r3,8(r2)
 8007c80:	bc800204 	addi	r18,r23,8
 8007c84:	21806536 	bltu	r4,r6,8007e1c <_realloc_r+0x5b0>
 8007c88:	008004c4 	movi	r2,19
 8007c8c:	1180592e 	bgeu	r2,r6,8007df4 <_realloc_r+0x588>
 8007c90:	80800017 	ldw	r2,0(r16)
 8007c94:	b8800215 	stw	r2,8(r23)
 8007c98:	80800117 	ldw	r2,4(r16)
 8007c9c:	b8800315 	stw	r2,12(r23)
 8007ca0:	008006c4 	movi	r2,27
 8007ca4:	11806136 	bltu	r2,r6,8007e2c <_realloc_r+0x5c0>
 8007ca8:	b8800404 	addi	r2,r23,16
 8007cac:	80c00204 	addi	r3,r16,8
 8007cb0:	19000017 	ldw	r4,0(r3)
 8007cb4:	11000015 	stw	r4,0(r2)
 8007cb8:	19000117 	ldw	r4,4(r3)
 8007cbc:	11000115 	stw	r4,4(r2)
 8007cc0:	18c00217 	ldw	r3,8(r3)
 8007cc4:	10c00215 	stw	r3,8(r2)
 8007cc8:	a447c83a 	sub	r3,r20,r17
 8007ccc:	bc45883a 	add	r2,r23,r17
 8007cd0:	18c00054 	ori	r3,r3,1
 8007cd4:	10c00115 	stw	r3,4(r2)
 8007cd8:	b8c00117 	ldw	r3,4(r23)
 8007cdc:	e0800215 	stw	r2,8(fp)
 8007ce0:	a809883a 	mov	r4,r21
 8007ce4:	1880004c 	andi	r2,r3,1
 8007ce8:	88a2b03a 	or	r17,r17,r2
 8007cec:	bc400115 	stw	r17,4(r23)
 8007cf0:	800abb80 	call	800abb8 <__malloc_unlock>
 8007cf4:	003f3c06 	br	80079e8 <_realloc_r+0x17c>
 8007cf8:	80c00217 	ldw	r3,8(r16)
 8007cfc:	90c00215 	stw	r3,8(r18)
 8007d00:	80c00317 	ldw	r3,12(r16)
 8007d04:	90c00315 	stw	r3,12(r18)
 8007d08:	30802426 	beq	r6,r2,8007d9c <_realloc_r+0x530>
 8007d0c:	90800404 	addi	r2,r18,16
 8007d10:	80c00404 	addi	r3,r16,16
 8007d14:	003f6e06 	br	8007ad0 <_realloc_r+0x264>
 8007d18:	953fff17 	ldw	r20,-4(r18)
 8007d1c:	00ffff04 	movi	r3,-4
 8007d20:	a0e8703a 	and	r20,r20,r3
 8007d24:	a4e9883a 	add	r20,r20,r19
 8007d28:	003f2206 	br	80079b4 <_realloc_r+0x148>
 8007d2c:	800b883a 	mov	r5,r16
 8007d30:	9009883a 	mov	r4,r18
 8007d34:	80065b40 	call	80065b4 <memmove>
 8007d38:	9021883a 	mov	r16,r18
 8007d3c:	b8800117 	ldw	r2,4(r23)
 8007d40:	b82d883a 	mov	r22,r23
 8007d44:	003f1b06 	br	80079b4 <_realloc_r+0x148>
 8007d48:	9005883a 	mov	r2,r18
 8007d4c:	8007883a 	mov	r3,r16
 8007d50:	003f9206 	br	8007b9c <_realloc_r+0x330>
 8007d54:	800b883a 	mov	r5,r16
 8007d58:	9009883a 	mov	r4,r18
 8007d5c:	d9c00015 	stw	r7,0(sp)
 8007d60:	80065b40 	call	80065b4 <memmove>
 8007d64:	d9c00017 	ldw	r7,0(sp)
 8007d68:	9021883a 	mov	r16,r18
 8007d6c:	b8800117 	ldw	r2,4(r23)
 8007d70:	3829883a 	mov	r20,r7
 8007d74:	b82d883a 	mov	r22,r23
 8007d78:	003f0e06 	br	80079b4 <_realloc_r+0x148>
 8007d7c:	80800217 	ldw	r2,8(r16)
 8007d80:	b8800415 	stw	r2,16(r23)
 8007d84:	80800317 	ldw	r2,12(r16)
 8007d88:	b8800515 	stw	r2,20(r23)
 8007d8c:	31001226 	beq	r6,r4,8007dd8 <_realloc_r+0x56c>
 8007d90:	b8800604 	addi	r2,r23,24
 8007d94:	80c00404 	addi	r3,r16,16
 8007d98:	003f9606 	br	8007bf4 <_realloc_r+0x388>
 8007d9c:	81000417 	ldw	r4,16(r16)
 8007da0:	90800604 	addi	r2,r18,24
 8007da4:	80c00604 	addi	r3,r16,24
 8007da8:	91000415 	stw	r4,16(r18)
 8007dac:	81000517 	ldw	r4,20(r16)
 8007db0:	91000515 	stw	r4,20(r18)
 8007db4:	003f4606 	br	8007ad0 <_realloc_r+0x264>
 8007db8:	80800217 	ldw	r2,8(r16)
 8007dbc:	b8800415 	stw	r2,16(r23)
 8007dc0:	80800317 	ldw	r2,12(r16)
 8007dc4:	b8800515 	stw	r2,20(r23)
 8007dc8:	31000d26 	beq	r6,r4,8007e00 <_realloc_r+0x594>
 8007dcc:	b8800604 	addi	r2,r23,24
 8007dd0:	80c00404 	addi	r3,r16,16
 8007dd4:	003f7106 	br	8007b9c <_realloc_r+0x330>
 8007dd8:	81000417 	ldw	r4,16(r16)
 8007ddc:	b8800804 	addi	r2,r23,32
 8007de0:	80c00604 	addi	r3,r16,24
 8007de4:	b9000615 	stw	r4,24(r23)
 8007de8:	81000517 	ldw	r4,20(r16)
 8007dec:	b9000715 	stw	r4,28(r23)
 8007df0:	003f8006 	br	8007bf4 <_realloc_r+0x388>
 8007df4:	9005883a 	mov	r2,r18
 8007df8:	8007883a 	mov	r3,r16
 8007dfc:	003fac06 	br	8007cb0 <_realloc_r+0x444>
 8007e00:	81000417 	ldw	r4,16(r16)
 8007e04:	b8800804 	addi	r2,r23,32
 8007e08:	80c00604 	addi	r3,r16,24
 8007e0c:	b9000615 	stw	r4,24(r23)
 8007e10:	81000517 	ldw	r4,20(r16)
 8007e14:	b9000715 	stw	r4,28(r23)
 8007e18:	003f6006 	br	8007b9c <_realloc_r+0x330>
 8007e1c:	9009883a 	mov	r4,r18
 8007e20:	800b883a 	mov	r5,r16
 8007e24:	80065b40 	call	80065b4 <memmove>
 8007e28:	003fa706 	br	8007cc8 <_realloc_r+0x45c>
 8007e2c:	80800217 	ldw	r2,8(r16)
 8007e30:	b8800415 	stw	r2,16(r23)
 8007e34:	80800317 	ldw	r2,12(r16)
 8007e38:	b8800515 	stw	r2,20(r23)
 8007e3c:	31000326 	beq	r6,r4,8007e4c <_realloc_r+0x5e0>
 8007e40:	b8800604 	addi	r2,r23,24
 8007e44:	80c00404 	addi	r3,r16,16
 8007e48:	003f9906 	br	8007cb0 <_realloc_r+0x444>
 8007e4c:	81000417 	ldw	r4,16(r16)
 8007e50:	b8800804 	addi	r2,r23,32
 8007e54:	80c00604 	addi	r3,r16,24
 8007e58:	b9000615 	stw	r4,24(r23)
 8007e5c:	81000517 	ldw	r4,20(r16)
 8007e60:	b9000715 	stw	r4,28(r23)
 8007e64:	003f9206 	br	8007cb0 <_realloc_r+0x444>

08007e68 <__isinfd>:
 8007e68:	0105c83a 	sub	r2,zero,r4
 8007e6c:	1108b03a 	or	r4,r2,r4
 8007e70:	2004d7fa 	srli	r2,r4,31
 8007e74:	00e00034 	movhi	r3,32768
 8007e78:	18ffffc4 	addi	r3,r3,-1
 8007e7c:	28ca703a 	and	r5,r5,r3
 8007e80:	1144b03a 	or	r2,r2,r5
 8007e84:	00dffc34 	movhi	r3,32752
 8007e88:	1885c83a 	sub	r2,r3,r2
 8007e8c:	0087c83a 	sub	r3,zero,r2
 8007e90:	1884b03a 	or	r2,r3,r2
 8007e94:	1005d7fa 	srai	r2,r2,31
 8007e98:	10800044 	addi	r2,r2,1
 8007e9c:	f800283a 	ret

08007ea0 <__isnand>:
 8007ea0:	0105c83a 	sub	r2,zero,r4
 8007ea4:	1108b03a 	or	r4,r2,r4
 8007ea8:	2004d7fa 	srli	r2,r4,31
 8007eac:	00e00034 	movhi	r3,32768
 8007eb0:	18ffffc4 	addi	r3,r3,-1
 8007eb4:	28ca703a 	and	r5,r5,r3
 8007eb8:	1144b03a 	or	r2,r2,r5
 8007ebc:	00dffc34 	movhi	r3,32752
 8007ec0:	1885c83a 	sub	r2,r3,r2
 8007ec4:	1004d7fa 	srli	r2,r2,31
 8007ec8:	f800283a 	ret

08007ecc <_sbrk_r>:
 8007ecc:	defffd04 	addi	sp,sp,-12
 8007ed0:	dc400115 	stw	r17,4(sp)
 8007ed4:	dc000015 	stw	r16,0(sp)
 8007ed8:	2023883a 	mov	r17,r4
 8007edc:	04020074 	movhi	r16,2049
 8007ee0:	8402c204 	addi	r16,r16,2824
 8007ee4:	2809883a 	mov	r4,r5
 8007ee8:	dfc00215 	stw	ra,8(sp)
 8007eec:	80000015 	stw	zero,0(r16)
 8007ef0:	800ad9c0 	call	800ad9c <sbrk>
 8007ef4:	00ffffc4 	movi	r3,-1
 8007ef8:	10c00526 	beq	r2,r3,8007f10 <_sbrk_r+0x44>
 8007efc:	dfc00217 	ldw	ra,8(sp)
 8007f00:	dc400117 	ldw	r17,4(sp)
 8007f04:	dc000017 	ldw	r16,0(sp)
 8007f08:	dec00304 	addi	sp,sp,12
 8007f0c:	f800283a 	ret
 8007f10:	80c00017 	ldw	r3,0(r16)
 8007f14:	183ff926 	beq	r3,zero,8007efc <_sbrk_r+0x30>
 8007f18:	88c00015 	stw	r3,0(r17)
 8007f1c:	dfc00217 	ldw	ra,8(sp)
 8007f20:	dc400117 	ldw	r17,4(sp)
 8007f24:	dc000017 	ldw	r16,0(sp)
 8007f28:	dec00304 	addi	sp,sp,12
 8007f2c:	f800283a 	ret

08007f30 <__sread>:
 8007f30:	defffe04 	addi	sp,sp,-8
 8007f34:	dc000015 	stw	r16,0(sp)
 8007f38:	2821883a 	mov	r16,r5
 8007f3c:	2940038f 	ldh	r5,14(r5)
 8007f40:	dfc00115 	stw	ra,4(sp)
 8007f44:	80085380 	call	8008538 <_read_r>
 8007f48:	10000716 	blt	r2,zero,8007f68 <__sread+0x38>
 8007f4c:	80c01417 	ldw	r3,80(r16)
 8007f50:	1887883a 	add	r3,r3,r2
 8007f54:	80c01415 	stw	r3,80(r16)
 8007f58:	dfc00117 	ldw	ra,4(sp)
 8007f5c:	dc000017 	ldw	r16,0(sp)
 8007f60:	dec00204 	addi	sp,sp,8
 8007f64:	f800283a 	ret
 8007f68:	80c0030b 	ldhu	r3,12(r16)
 8007f6c:	18fbffcc 	andi	r3,r3,61439
 8007f70:	80c0030d 	sth	r3,12(r16)
 8007f74:	dfc00117 	ldw	ra,4(sp)
 8007f78:	dc000017 	ldw	r16,0(sp)
 8007f7c:	dec00204 	addi	sp,sp,8
 8007f80:	f800283a 	ret

08007f84 <__swrite>:
 8007f84:	2880030b 	ldhu	r2,12(r5)
 8007f88:	defffb04 	addi	sp,sp,-20
 8007f8c:	dcc00315 	stw	r19,12(sp)
 8007f90:	10c0400c 	andi	r3,r2,256
 8007f94:	18ffffcc 	andi	r3,r3,65535
 8007f98:	18e0001c 	xori	r3,r3,32768
 8007f9c:	dc800215 	stw	r18,8(sp)
 8007fa0:	dc400115 	stw	r17,4(sp)
 8007fa4:	dc000015 	stw	r16,0(sp)
 8007fa8:	dfc00415 	stw	ra,16(sp)
 8007fac:	18e00004 	addi	r3,r3,-32768
 8007fb0:	2821883a 	mov	r16,r5
 8007fb4:	2027883a 	mov	r19,r4
 8007fb8:	3025883a 	mov	r18,r6
 8007fbc:	3823883a 	mov	r17,r7
 8007fc0:	18000526 	beq	r3,zero,8007fd8 <__swrite+0x54>
 8007fc4:	2940038f 	ldh	r5,14(r5)
 8007fc8:	000d883a 	mov	r6,zero
 8007fcc:	01c00084 	movi	r7,2
 8007fd0:	80084cc0 	call	80084cc <_lseek_r>
 8007fd4:	8080030b 	ldhu	r2,12(r16)
 8007fd8:	8140038f 	ldh	r5,14(r16)
 8007fdc:	10bbffcc 	andi	r2,r2,61439
 8007fe0:	9809883a 	mov	r4,r19
 8007fe4:	900d883a 	mov	r6,r18
 8007fe8:	880f883a 	mov	r7,r17
 8007fec:	8080030d 	sth	r2,12(r16)
 8007ff0:	dfc00417 	ldw	ra,16(sp)
 8007ff4:	dcc00317 	ldw	r19,12(sp)
 8007ff8:	dc800217 	ldw	r18,8(sp)
 8007ffc:	dc400117 	ldw	r17,4(sp)
 8008000:	dc000017 	ldw	r16,0(sp)
 8008004:	dec00504 	addi	sp,sp,20
 8008008:	80081141 	jmpi	8008114 <_write_r>

0800800c <__sseek>:
 800800c:	defffe04 	addi	sp,sp,-8
 8008010:	dc000015 	stw	r16,0(sp)
 8008014:	2821883a 	mov	r16,r5
 8008018:	2940038f 	ldh	r5,14(r5)
 800801c:	dfc00115 	stw	ra,4(sp)
 8008020:	80084cc0 	call	80084cc <_lseek_r>
 8008024:	00ffffc4 	movi	r3,-1
 8008028:	10c00826 	beq	r2,r3,800804c <__sseek+0x40>
 800802c:	80c0030b 	ldhu	r3,12(r16)
 8008030:	80801415 	stw	r2,80(r16)
 8008034:	18c40014 	ori	r3,r3,4096
 8008038:	80c0030d 	sth	r3,12(r16)
 800803c:	dfc00117 	ldw	ra,4(sp)
 8008040:	dc000017 	ldw	r16,0(sp)
 8008044:	dec00204 	addi	sp,sp,8
 8008048:	f800283a 	ret
 800804c:	80c0030b 	ldhu	r3,12(r16)
 8008050:	18fbffcc 	andi	r3,r3,61439
 8008054:	80c0030d 	sth	r3,12(r16)
 8008058:	dfc00117 	ldw	ra,4(sp)
 800805c:	dc000017 	ldw	r16,0(sp)
 8008060:	dec00204 	addi	sp,sp,8
 8008064:	f800283a 	ret

08008068 <__sclose>:
 8008068:	2940038f 	ldh	r5,14(r5)
 800806c:	800824c1 	jmpi	800824c <_close_r>

08008070 <strcmp>:
 8008070:	2904b03a 	or	r2,r5,r4
 8008074:	108000cc 	andi	r2,r2,3
 8008078:	1000171e 	bne	r2,zero,80080d8 <strcmp+0x68>
 800807c:	20800017 	ldw	r2,0(r4)
 8008080:	28c00017 	ldw	r3,0(r5)
 8008084:	10c0141e 	bne	r2,r3,80080d8 <strcmp+0x68>
 8008088:	027fbff4 	movhi	r9,65279
 800808c:	4a7fbfc4 	addi	r9,r9,-257
 8008090:	1247883a 	add	r3,r2,r9
 8008094:	0084303a 	nor	r2,zero,r2
 8008098:	1884703a 	and	r2,r3,r2
 800809c:	02202074 	movhi	r8,32897
 80080a0:	42202004 	addi	r8,r8,-32640
 80080a4:	1204703a 	and	r2,r2,r8
 80080a8:	10000226 	beq	r2,zero,80080b4 <strcmp+0x44>
 80080ac:	00001706 	br	800810c <strcmp+0x9c>
 80080b0:	3000161e 	bne	r6,zero,800810c <strcmp+0x9c>
 80080b4:	21000104 	addi	r4,r4,4
 80080b8:	20800017 	ldw	r2,0(r4)
 80080bc:	29400104 	addi	r5,r5,4
 80080c0:	28c00017 	ldw	r3,0(r5)
 80080c4:	124f883a 	add	r7,r2,r9
 80080c8:	008c303a 	nor	r6,zero,r2
 80080cc:	398c703a 	and	r6,r7,r6
 80080d0:	320c703a 	and	r6,r6,r8
 80080d4:	10fff626 	beq	r2,r3,80080b0 <strcmp+0x40>
 80080d8:	20800007 	ldb	r2,0(r4)
 80080dc:	1000051e 	bne	r2,zero,80080f4 <strcmp+0x84>
 80080e0:	00000606 	br	80080fc <strcmp+0x8c>
 80080e4:	21000044 	addi	r4,r4,1
 80080e8:	20800007 	ldb	r2,0(r4)
 80080ec:	29400044 	addi	r5,r5,1
 80080f0:	10000226 	beq	r2,zero,80080fc <strcmp+0x8c>
 80080f4:	28c00007 	ldb	r3,0(r5)
 80080f8:	10fffa26 	beq	r2,r3,80080e4 <strcmp+0x74>
 80080fc:	20c00003 	ldbu	r3,0(r4)
 8008100:	28800003 	ldbu	r2,0(r5)
 8008104:	1885c83a 	sub	r2,r3,r2
 8008108:	f800283a 	ret
 800810c:	0005883a 	mov	r2,zero
 8008110:	f800283a 	ret

08008114 <_write_r>:
 8008114:	defffd04 	addi	sp,sp,-12
 8008118:	dc400115 	stw	r17,4(sp)
 800811c:	dc000015 	stw	r16,0(sp)
 8008120:	2023883a 	mov	r17,r4
 8008124:	04020074 	movhi	r16,2049
 8008128:	8402c204 	addi	r16,r16,2824
 800812c:	2809883a 	mov	r4,r5
 8008130:	300b883a 	mov	r5,r6
 8008134:	380d883a 	mov	r6,r7
 8008138:	dfc00215 	stw	ra,8(sp)
 800813c:	80000015 	stw	zero,0(r16)
 8008140:	800ae9c0 	call	800ae9c <write>
 8008144:	00ffffc4 	movi	r3,-1
 8008148:	10c00526 	beq	r2,r3,8008160 <_write_r+0x4c>
 800814c:	dfc00217 	ldw	ra,8(sp)
 8008150:	dc400117 	ldw	r17,4(sp)
 8008154:	dc000017 	ldw	r16,0(sp)
 8008158:	dec00304 	addi	sp,sp,12
 800815c:	f800283a 	ret
 8008160:	80c00017 	ldw	r3,0(r16)
 8008164:	183ff926 	beq	r3,zero,800814c <_write_r+0x38>
 8008168:	88c00015 	stw	r3,0(r17)
 800816c:	dfc00217 	ldw	ra,8(sp)
 8008170:	dc400117 	ldw	r17,4(sp)
 8008174:	dc000017 	ldw	r16,0(sp)
 8008178:	dec00304 	addi	sp,sp,12
 800817c:	f800283a 	ret

08008180 <_calloc_r>:
 8008180:	defffe04 	addi	sp,sp,-8
 8008184:	dc000015 	stw	r16,0(sp)
 8008188:	2021883a 	mov	r16,r4
 800818c:	3009883a 	mov	r4,r6
 8008190:	dfc00115 	stw	ra,4(sp)
 8008194:	8000df40 	call	8000df4 <__mulsi3>
 8008198:	8009883a 	mov	r4,r16
 800819c:	100b883a 	mov	r5,r2
 80081a0:	8005bf80 	call	8005bf8 <_malloc_r>
 80081a4:	1021883a 	mov	r16,r2
 80081a8:	10000c26 	beq	r2,zero,80081dc <_calloc_r+0x5c>
 80081ac:	11bfff17 	ldw	r6,-4(r2)
 80081b0:	00ffff04 	movi	r3,-4
 80081b4:	00800904 	movi	r2,36
 80081b8:	30cc703a 	and	r6,r6,r3
 80081bc:	30cd883a 	add	r6,r6,r3
 80081c0:	11801436 	bltu	r2,r6,8008214 <_calloc_r+0x94>
 80081c4:	00c004c4 	movi	r3,19
 80081c8:	19800936 	bltu	r3,r6,80081f0 <_calloc_r+0x70>
 80081cc:	8005883a 	mov	r2,r16
 80081d0:	10000015 	stw	zero,0(r2)
 80081d4:	10000115 	stw	zero,4(r2)
 80081d8:	10000215 	stw	zero,8(r2)
 80081dc:	8005883a 	mov	r2,r16
 80081e0:	dfc00117 	ldw	ra,4(sp)
 80081e4:	dc000017 	ldw	r16,0(sp)
 80081e8:	dec00204 	addi	sp,sp,8
 80081ec:	f800283a 	ret
 80081f0:	80000015 	stw	zero,0(r16)
 80081f4:	80000115 	stw	zero,4(r16)
 80081f8:	00c006c4 	movi	r3,27
 80081fc:	19800d2e 	bgeu	r3,r6,8008234 <_calloc_r+0xb4>
 8008200:	80000215 	stw	zero,8(r16)
 8008204:	80000315 	stw	zero,12(r16)
 8008208:	30800c26 	beq	r6,r2,800823c <_calloc_r+0xbc>
 800820c:	80800404 	addi	r2,r16,16
 8008210:	003fef06 	br	80081d0 <_calloc_r+0x50>
 8008214:	8009883a 	mov	r4,r16
 8008218:	000b883a 	mov	r5,zero
 800821c:	80067400 	call	8006740 <memset>
 8008220:	8005883a 	mov	r2,r16
 8008224:	dfc00117 	ldw	ra,4(sp)
 8008228:	dc000017 	ldw	r16,0(sp)
 800822c:	dec00204 	addi	sp,sp,8
 8008230:	f800283a 	ret
 8008234:	80800204 	addi	r2,r16,8
 8008238:	003fe506 	br	80081d0 <_calloc_r+0x50>
 800823c:	80000415 	stw	zero,16(r16)
 8008240:	80000515 	stw	zero,20(r16)
 8008244:	80800604 	addi	r2,r16,24
 8008248:	003fe106 	br	80081d0 <_calloc_r+0x50>

0800824c <_close_r>:
 800824c:	defffd04 	addi	sp,sp,-12
 8008250:	dc400115 	stw	r17,4(sp)
 8008254:	dc000015 	stw	r16,0(sp)
 8008258:	2023883a 	mov	r17,r4
 800825c:	04020074 	movhi	r16,2049
 8008260:	8402c204 	addi	r16,r16,2824
 8008264:	2809883a 	mov	r4,r5
 8008268:	dfc00215 	stw	ra,8(sp)
 800826c:	80000015 	stw	zero,0(r16)
 8008270:	800a5e80 	call	800a5e8 <close>
 8008274:	00ffffc4 	movi	r3,-1
 8008278:	10c00526 	beq	r2,r3,8008290 <_close_r+0x44>
 800827c:	dfc00217 	ldw	ra,8(sp)
 8008280:	dc400117 	ldw	r17,4(sp)
 8008284:	dc000017 	ldw	r16,0(sp)
 8008288:	dec00304 	addi	sp,sp,12
 800828c:	f800283a 	ret
 8008290:	80c00017 	ldw	r3,0(r16)
 8008294:	183ff926 	beq	r3,zero,800827c <_close_r+0x30>
 8008298:	88c00015 	stw	r3,0(r17)
 800829c:	dfc00217 	ldw	ra,8(sp)
 80082a0:	dc400117 	ldw	r17,4(sp)
 80082a4:	dc000017 	ldw	r16,0(sp)
 80082a8:	dec00304 	addi	sp,sp,12
 80082ac:	f800283a 	ret

080082b0 <_fclose_r>:
 80082b0:	defffc04 	addi	sp,sp,-16
 80082b4:	dc400115 	stw	r17,4(sp)
 80082b8:	dc000015 	stw	r16,0(sp)
 80082bc:	dfc00315 	stw	ra,12(sp)
 80082c0:	dc800215 	stw	r18,8(sp)
 80082c4:	2821883a 	mov	r16,r5
 80082c8:	2023883a 	mov	r17,r4
 80082cc:	28003426 	beq	r5,zero,80083a0 <_fclose_r+0xf0>
 80082d0:	8004ee40 	call	8004ee4 <__sfp_lock_acquire>
 80082d4:	88000226 	beq	r17,zero,80082e0 <_fclose_r+0x30>
 80082d8:	88800e17 	ldw	r2,56(r17)
 80082dc:	10003826 	beq	r2,zero,80083c0 <_fclose_r+0x110>
 80082e0:	8080030f 	ldh	r2,12(r16)
 80082e4:	10002526 	beq	r2,zero,800837c <_fclose_r+0xcc>
 80082e8:	8809883a 	mov	r4,r17
 80082ec:	800b883a 	mov	r5,r16
 80082f0:	8004a200 	call	8004a20 <_fflush_r>
 80082f4:	1025883a 	mov	r18,r2
 80082f8:	80800b17 	ldw	r2,44(r16)
 80082fc:	10000426 	beq	r2,zero,8008310 <_fclose_r+0x60>
 8008300:	81400717 	ldw	r5,28(r16)
 8008304:	8809883a 	mov	r4,r17
 8008308:	103ee83a 	callr	r2
 800830c:	10003516 	blt	r2,zero,80083e4 <_fclose_r+0x134>
 8008310:	8080030b 	ldhu	r2,12(r16)
 8008314:	1080200c 	andi	r2,r2,128
 8008318:	10bfffcc 	andi	r2,r2,65535
 800831c:	10a0001c 	xori	r2,r2,32768
 8008320:	10a00004 	addi	r2,r2,-32768
 8008324:	10002b1e 	bne	r2,zero,80083d4 <_fclose_r+0x124>
 8008328:	81400c17 	ldw	r5,48(r16)
 800832c:	28000526 	beq	r5,zero,8008344 <_fclose_r+0x94>
 8008330:	80801004 	addi	r2,r16,64
 8008334:	28800226 	beq	r5,r2,8008340 <_fclose_r+0x90>
 8008338:	8809883a 	mov	r4,r17
 800833c:	80050600 	call	8005060 <_free_r>
 8008340:	80000c15 	stw	zero,48(r16)
 8008344:	81401117 	ldw	r5,68(r16)
 8008348:	28000326 	beq	r5,zero,8008358 <_fclose_r+0xa8>
 800834c:	8809883a 	mov	r4,r17
 8008350:	80050600 	call	8005060 <_free_r>
 8008354:	80001115 	stw	zero,68(r16)
 8008358:	8000030d 	sth	zero,12(r16)
 800835c:	8004ee80 	call	8004ee8 <__sfp_lock_release>
 8008360:	9005883a 	mov	r2,r18
 8008364:	dfc00317 	ldw	ra,12(sp)
 8008368:	dc800217 	ldw	r18,8(sp)
 800836c:	dc400117 	ldw	r17,4(sp)
 8008370:	dc000017 	ldw	r16,0(sp)
 8008374:	dec00404 	addi	sp,sp,16
 8008378:	f800283a 	ret
 800837c:	8004ee80 	call	8004ee8 <__sfp_lock_release>
 8008380:	0025883a 	mov	r18,zero
 8008384:	9005883a 	mov	r2,r18
 8008388:	dfc00317 	ldw	ra,12(sp)
 800838c:	dc800217 	ldw	r18,8(sp)
 8008390:	dc400117 	ldw	r17,4(sp)
 8008394:	dc000017 	ldw	r16,0(sp)
 8008398:	dec00404 	addi	sp,sp,16
 800839c:	f800283a 	ret
 80083a0:	0025883a 	mov	r18,zero
 80083a4:	9005883a 	mov	r2,r18
 80083a8:	dfc00317 	ldw	ra,12(sp)
 80083ac:	dc800217 	ldw	r18,8(sp)
 80083b0:	dc400117 	ldw	r17,4(sp)
 80083b4:	dc000017 	ldw	r16,0(sp)
 80083b8:	dec00404 	addi	sp,sp,16
 80083bc:	f800283a 	ret
 80083c0:	8809883a 	mov	r4,r17
 80083c4:	8004cdc0 	call	8004cdc <__sinit>
 80083c8:	8080030f 	ldh	r2,12(r16)
 80083cc:	103fc61e 	bne	r2,zero,80082e8 <_fclose_r+0x38>
 80083d0:	003fea06 	br	800837c <_fclose_r+0xcc>
 80083d4:	81400417 	ldw	r5,16(r16)
 80083d8:	8809883a 	mov	r4,r17
 80083dc:	80050600 	call	8005060 <_free_r>
 80083e0:	003fd106 	br	8008328 <_fclose_r+0x78>
 80083e4:	04bfffc4 	movi	r18,-1
 80083e8:	003fc906 	br	8008310 <_fclose_r+0x60>

080083ec <fclose>:
 80083ec:	00820074 	movhi	r2,2049
 80083f0:	10bc1804 	addi	r2,r2,-4000
 80083f4:	200b883a 	mov	r5,r4
 80083f8:	11000017 	ldw	r4,0(r2)
 80083fc:	80082b01 	jmpi	80082b0 <_fclose_r>

08008400 <_fstat_r>:
 8008400:	defffd04 	addi	sp,sp,-12
 8008404:	dc400115 	stw	r17,4(sp)
 8008408:	dc000015 	stw	r16,0(sp)
 800840c:	2023883a 	mov	r17,r4
 8008410:	04020074 	movhi	r16,2049
 8008414:	8402c204 	addi	r16,r16,2824
 8008418:	2809883a 	mov	r4,r5
 800841c:	300b883a 	mov	r5,r6
 8008420:	dfc00215 	stw	ra,8(sp)
 8008424:	80000015 	stw	zero,0(r16)
 8008428:	800a76c0 	call	800a76c <fstat>
 800842c:	00ffffc4 	movi	r3,-1
 8008430:	10c00526 	beq	r2,r3,8008448 <_fstat_r+0x48>
 8008434:	dfc00217 	ldw	ra,8(sp)
 8008438:	dc400117 	ldw	r17,4(sp)
 800843c:	dc000017 	ldw	r16,0(sp)
 8008440:	dec00304 	addi	sp,sp,12
 8008444:	f800283a 	ret
 8008448:	80c00017 	ldw	r3,0(r16)
 800844c:	183ff926 	beq	r3,zero,8008434 <_fstat_r+0x34>
 8008450:	88c00015 	stw	r3,0(r17)
 8008454:	dfc00217 	ldw	ra,8(sp)
 8008458:	dc400117 	ldw	r17,4(sp)
 800845c:	dc000017 	ldw	r16,0(sp)
 8008460:	dec00304 	addi	sp,sp,12
 8008464:	f800283a 	ret

08008468 <_isatty_r>:
 8008468:	defffd04 	addi	sp,sp,-12
 800846c:	dc400115 	stw	r17,4(sp)
 8008470:	dc000015 	stw	r16,0(sp)
 8008474:	2023883a 	mov	r17,r4
 8008478:	04020074 	movhi	r16,2049
 800847c:	8402c204 	addi	r16,r16,2824
 8008480:	2809883a 	mov	r4,r5
 8008484:	dfc00215 	stw	ra,8(sp)
 8008488:	80000015 	stw	zero,0(r16)
 800848c:	800a86c0 	call	800a86c <isatty>
 8008490:	00ffffc4 	movi	r3,-1
 8008494:	10c00526 	beq	r2,r3,80084ac <_isatty_r+0x44>
 8008498:	dfc00217 	ldw	ra,8(sp)
 800849c:	dc400117 	ldw	r17,4(sp)
 80084a0:	dc000017 	ldw	r16,0(sp)
 80084a4:	dec00304 	addi	sp,sp,12
 80084a8:	f800283a 	ret
 80084ac:	80c00017 	ldw	r3,0(r16)
 80084b0:	183ff926 	beq	r3,zero,8008498 <_isatty_r+0x30>
 80084b4:	88c00015 	stw	r3,0(r17)
 80084b8:	dfc00217 	ldw	ra,8(sp)
 80084bc:	dc400117 	ldw	r17,4(sp)
 80084c0:	dc000017 	ldw	r16,0(sp)
 80084c4:	dec00304 	addi	sp,sp,12
 80084c8:	f800283a 	ret

080084cc <_lseek_r>:
 80084cc:	defffd04 	addi	sp,sp,-12
 80084d0:	dc400115 	stw	r17,4(sp)
 80084d4:	dc000015 	stw	r16,0(sp)
 80084d8:	2023883a 	mov	r17,r4
 80084dc:	04020074 	movhi	r16,2049
 80084e0:	8402c204 	addi	r16,r16,2824
 80084e4:	2809883a 	mov	r4,r5
 80084e8:	300b883a 	mov	r5,r6
 80084ec:	380d883a 	mov	r6,r7
 80084f0:	dfc00215 	stw	ra,8(sp)
 80084f4:	80000015 	stw	zero,0(r16)
 80084f8:	800aa4c0 	call	800aa4c <lseek>
 80084fc:	00ffffc4 	movi	r3,-1
 8008500:	10c00526 	beq	r2,r3,8008518 <_lseek_r+0x4c>
 8008504:	dfc00217 	ldw	ra,8(sp)
 8008508:	dc400117 	ldw	r17,4(sp)
 800850c:	dc000017 	ldw	r16,0(sp)
 8008510:	dec00304 	addi	sp,sp,12
 8008514:	f800283a 	ret
 8008518:	80c00017 	ldw	r3,0(r16)
 800851c:	183ff926 	beq	r3,zero,8008504 <_lseek_r+0x38>
 8008520:	88c00015 	stw	r3,0(r17)
 8008524:	dfc00217 	ldw	ra,8(sp)
 8008528:	dc400117 	ldw	r17,4(sp)
 800852c:	dc000017 	ldw	r16,0(sp)
 8008530:	dec00304 	addi	sp,sp,12
 8008534:	f800283a 	ret

08008538 <_read_r>:
 8008538:	defffd04 	addi	sp,sp,-12
 800853c:	dc400115 	stw	r17,4(sp)
 8008540:	dc000015 	stw	r16,0(sp)
 8008544:	2023883a 	mov	r17,r4
 8008548:	04020074 	movhi	r16,2049
 800854c:	8402c204 	addi	r16,r16,2824
 8008550:	2809883a 	mov	r4,r5
 8008554:	300b883a 	mov	r5,r6
 8008558:	380d883a 	mov	r6,r7
 800855c:	dfc00215 	stw	ra,8(sp)
 8008560:	80000015 	stw	zero,0(r16)
 8008564:	800ac280 	call	800ac28 <read>
 8008568:	00ffffc4 	movi	r3,-1
 800856c:	10c00526 	beq	r2,r3,8008584 <_read_r+0x4c>
 8008570:	dfc00217 	ldw	ra,8(sp)
 8008574:	dc400117 	ldw	r17,4(sp)
 8008578:	dc000017 	ldw	r16,0(sp)
 800857c:	dec00304 	addi	sp,sp,12
 8008580:	f800283a 	ret
 8008584:	80c00017 	ldw	r3,0(r16)
 8008588:	183ff926 	beq	r3,zero,8008570 <_read_r+0x38>
 800858c:	88c00015 	stw	r3,0(r17)
 8008590:	dfc00217 	ldw	ra,8(sp)
 8008594:	dc400117 	ldw	r17,4(sp)
 8008598:	dc000017 	ldw	r16,0(sp)
 800859c:	dec00304 	addi	sp,sp,12
 80085a0:	f800283a 	ret

080085a4 <__udivdi3>:
 80085a4:	defff504 	addi	sp,sp,-44
 80085a8:	dd000515 	stw	r20,20(sp)
 80085ac:	dcc00415 	stw	r19,16(sp)
 80085b0:	dc800315 	stw	r18,12(sp)
 80085b4:	dc400215 	stw	r17,8(sp)
 80085b8:	dc000115 	stw	r16,4(sp)
 80085bc:	dfc00a15 	stw	ra,40(sp)
 80085c0:	df000915 	stw	fp,36(sp)
 80085c4:	ddc00815 	stw	r23,32(sp)
 80085c8:	dd800715 	stw	r22,28(sp)
 80085cc:	dd400615 	stw	r21,24(sp)
 80085d0:	2025883a 	mov	r18,r4
 80085d4:	2823883a 	mov	r17,r5
 80085d8:	3021883a 	mov	r16,r6
 80085dc:	2027883a 	mov	r19,r4
 80085e0:	2829883a 	mov	r20,r5
 80085e4:	3800451e 	bne	r7,zero,80086fc <__udivdi3+0x158>
 80085e8:	2980652e 	bgeu	r5,r6,8008780 <__udivdi3+0x1dc>
 80085ec:	00bfffd4 	movui	r2,65535
 80085f0:	1180b436 	bltu	r2,r6,80088c4 <__udivdi3+0x320>
 80085f4:	00803fc4 	movi	r2,255
 80085f8:	11816636 	bltu	r2,r6,8008b94 <__udivdi3+0x5f0>
 80085fc:	0005883a 	mov	r2,zero
 8008600:	0007883a 	mov	r3,zero
 8008604:	3084d83a 	srl	r2,r6,r2
 8008608:	01020074 	movhi	r4,2049
 800860c:	21354504 	addi	r4,r4,-10988
 8008610:	2085883a 	add	r2,r4,r2
 8008614:	10800003 	ldbu	r2,0(r2)
 8008618:	10c7883a 	add	r3,r2,r3
 800861c:	00800804 	movi	r2,32
 8008620:	10c5c83a 	sub	r2,r2,r3
 8008624:	10000526 	beq	r2,zero,800863c <__udivdi3+0x98>
 8008628:	88a2983a 	sll	r17,r17,r2
 800862c:	90c6d83a 	srl	r3,r18,r3
 8008630:	30a0983a 	sll	r16,r6,r2
 8008634:	90a6983a 	sll	r19,r18,r2
 8008638:	88e8b03a 	or	r20,r17,r3
 800863c:	8022d43a 	srli	r17,r16,16
 8008640:	a009883a 	mov	r4,r20
 8008644:	857fffcc 	andi	r21,r16,65535
 8008648:	880b883a 	mov	r5,r17
 800864c:	8000dec0 	call	8000dec <__umodsi3>
 8008650:	a009883a 	mov	r4,r20
 8008654:	880b883a 	mov	r5,r17
 8008658:	102d883a 	mov	r22,r2
 800865c:	8000de40 	call	8000de4 <__udivsi3>
 8008660:	1009883a 	mov	r4,r2
 8008664:	a80b883a 	mov	r5,r21
 8008668:	1025883a 	mov	r18,r2
 800866c:	8000df40 	call	8000df4 <__mulsi3>
 8008670:	1009883a 	mov	r4,r2
 8008674:	b006943a 	slli	r3,r22,16
 8008678:	9804d43a 	srli	r2,r19,16
 800867c:	1886b03a 	or	r3,r3,r2
 8008680:	1900052e 	bgeu	r3,r4,8008698 <__udivdi3+0xf4>
 8008684:	1c07883a 	add	r3,r3,r16
 8008688:	90bfffc4 	addi	r2,r18,-1
 800868c:	1c000136 	bltu	r3,r16,8008694 <__udivdi3+0xf0>
 8008690:	19015536 	bltu	r3,r4,8008be8 <__udivdi3+0x644>
 8008694:	1025883a 	mov	r18,r2
 8008698:	1929c83a 	sub	r20,r3,r4
 800869c:	880b883a 	mov	r5,r17
 80086a0:	a009883a 	mov	r4,r20
 80086a4:	8000dec0 	call	8000dec <__umodsi3>
 80086a8:	102d883a 	mov	r22,r2
 80086ac:	880b883a 	mov	r5,r17
 80086b0:	a009883a 	mov	r4,r20
 80086b4:	b02c943a 	slli	r22,r22,16
 80086b8:	8000de40 	call	8000de4 <__udivsi3>
 80086bc:	1009883a 	mov	r4,r2
 80086c0:	a80b883a 	mov	r5,r21
 80086c4:	9cffffcc 	andi	r19,r19,65535
 80086c8:	1023883a 	mov	r17,r2
 80086cc:	b4e6b03a 	or	r19,r22,r19
 80086d0:	8000df40 	call	8000df4 <__mulsi3>
 80086d4:	9880052e 	bgeu	r19,r2,80086ec <__udivdi3+0x148>
 80086d8:	9c27883a 	add	r19,r19,r16
 80086dc:	88ffffc4 	addi	r3,r17,-1
 80086e0:	9c011436 	bltu	r19,r16,8008b34 <__udivdi3+0x590>
 80086e4:	9881132e 	bgeu	r19,r2,8008b34 <__udivdi3+0x590>
 80086e8:	8c7fff84 	addi	r17,r17,-2
 80086ec:	9004943a 	slli	r2,r18,16
 80086f0:	0007883a 	mov	r3,zero
 80086f4:	8884b03a 	or	r2,r17,r2
 80086f8:	00001506 	br	8008750 <__udivdi3+0x1ac>
 80086fc:	29c06a36 	bltu	r5,r7,80088a8 <__udivdi3+0x304>
 8008700:	00bfffd4 	movui	r2,65535
 8008704:	11c06a2e 	bgeu	r2,r7,80088b0 <__udivdi3+0x30c>
 8008708:	00804034 	movhi	r2,256
 800870c:	10bfffc4 	addi	r2,r2,-1
 8008710:	11c11436 	bltu	r2,r7,8008b64 <__udivdi3+0x5c0>
 8008714:	00c00404 	movi	r3,16
 8008718:	180b883a 	mov	r5,r3
 800871c:	38c6d83a 	srl	r3,r7,r3
 8008720:	01020074 	movhi	r4,2049
 8008724:	21354504 	addi	r4,r4,-10988
 8008728:	04000804 	movi	r16,32
 800872c:	20c7883a 	add	r3,r4,r3
 8008730:	18800003 	ldbu	r2,0(r3)
 8008734:	1145883a 	add	r2,r2,r5
 8008738:	80a1c83a 	sub	r16,r16,r2
 800873c:	80006e1e 	bne	r16,zero,80088f8 <__udivdi3+0x354>
 8008740:	0007883a 	mov	r3,zero
 8008744:	3c406a36 	bltu	r7,r17,80088f0 <__udivdi3+0x34c>
 8008748:	9180692e 	bgeu	r18,r6,80088f0 <__udivdi3+0x34c>
 800874c:	0005883a 	mov	r2,zero
 8008750:	dfc00a17 	ldw	ra,40(sp)
 8008754:	df000917 	ldw	fp,36(sp)
 8008758:	ddc00817 	ldw	r23,32(sp)
 800875c:	dd800717 	ldw	r22,28(sp)
 8008760:	dd400617 	ldw	r21,24(sp)
 8008764:	dd000517 	ldw	r20,20(sp)
 8008768:	dcc00417 	ldw	r19,16(sp)
 800876c:	dc800317 	ldw	r18,12(sp)
 8008770:	dc400217 	ldw	r17,8(sp)
 8008774:	dc000117 	ldw	r16,4(sp)
 8008778:	dec00b04 	addi	sp,sp,44
 800877c:	f800283a 	ret
 8008780:	3000041e 	bne	r6,zero,8008794 <__udivdi3+0x1f0>
 8008784:	01000044 	movi	r4,1
 8008788:	000b883a 	mov	r5,zero
 800878c:	8000de40 	call	8000de4 <__udivsi3>
 8008790:	1021883a 	mov	r16,r2
 8008794:	00bfffd4 	movui	r2,65535
 8008798:	1400502e 	bgeu	r2,r16,80088dc <__udivdi3+0x338>
 800879c:	00804034 	movhi	r2,256
 80087a0:	10bfffc4 	addi	r2,r2,-1
 80087a4:	1400f536 	bltu	r2,r16,8008b7c <__udivdi3+0x5d8>
 80087a8:	00800404 	movi	r2,16
 80087ac:	1007883a 	mov	r3,r2
 80087b0:	8084d83a 	srl	r2,r16,r2
 80087b4:	01020074 	movhi	r4,2049
 80087b8:	21354504 	addi	r4,r4,-10988
 80087bc:	2085883a 	add	r2,r4,r2
 80087c0:	10800003 	ldbu	r2,0(r2)
 80087c4:	10c7883a 	add	r3,r2,r3
 80087c8:	00800804 	movi	r2,32
 80087cc:	10c5c83a 	sub	r2,r2,r3
 80087d0:	1000a01e 	bne	r2,zero,8008a54 <__udivdi3+0x4b0>
 80087d4:	8028d43a 	srli	r20,r16,16
 80087d8:	8c23c83a 	sub	r17,r17,r16
 80087dc:	857fffcc 	andi	r21,r16,65535
 80087e0:	00c00044 	movi	r3,1
 80087e4:	8809883a 	mov	r4,r17
 80087e8:	a00b883a 	mov	r5,r20
 80087ec:	d8c00015 	stw	r3,0(sp)
 80087f0:	8000dec0 	call	8000dec <__umodsi3>
 80087f4:	8809883a 	mov	r4,r17
 80087f8:	a00b883a 	mov	r5,r20
 80087fc:	102d883a 	mov	r22,r2
 8008800:	8000de40 	call	8000de4 <__udivsi3>
 8008804:	1009883a 	mov	r4,r2
 8008808:	a80b883a 	mov	r5,r21
 800880c:	1025883a 	mov	r18,r2
 8008810:	8000df40 	call	8000df4 <__mulsi3>
 8008814:	1009883a 	mov	r4,r2
 8008818:	b00c943a 	slli	r6,r22,16
 800881c:	9804d43a 	srli	r2,r19,16
 8008820:	d8c00017 	ldw	r3,0(sp)
 8008824:	308cb03a 	or	r6,r6,r2
 8008828:	3100052e 	bgeu	r6,r4,8008840 <__udivdi3+0x29c>
 800882c:	340d883a 	add	r6,r6,r16
 8008830:	90bfffc4 	addi	r2,r18,-1
 8008834:	34000136 	bltu	r6,r16,800883c <__udivdi3+0x298>
 8008838:	3100e836 	bltu	r6,r4,8008bdc <__udivdi3+0x638>
 800883c:	1025883a 	mov	r18,r2
 8008840:	3123c83a 	sub	r17,r6,r4
 8008844:	8809883a 	mov	r4,r17
 8008848:	a00b883a 	mov	r5,r20
 800884c:	d8c00015 	stw	r3,0(sp)
 8008850:	8000dec0 	call	8000dec <__umodsi3>
 8008854:	102d883a 	mov	r22,r2
 8008858:	8809883a 	mov	r4,r17
 800885c:	a00b883a 	mov	r5,r20
 8008860:	b02c943a 	slli	r22,r22,16
 8008864:	8000de40 	call	8000de4 <__udivsi3>
 8008868:	1009883a 	mov	r4,r2
 800886c:	a80b883a 	mov	r5,r21
 8008870:	9cffffcc 	andi	r19,r19,65535
 8008874:	1023883a 	mov	r17,r2
 8008878:	b4e6b03a 	or	r19,r22,r19
 800887c:	8000df40 	call	8000df4 <__mulsi3>
 8008880:	d8c00017 	ldw	r3,0(sp)
 8008884:	9880052e 	bgeu	r19,r2,800889c <__udivdi3+0x2f8>
 8008888:	9c27883a 	add	r19,r19,r16
 800888c:	893fffc4 	addi	r4,r17,-1
 8008890:	9c00aa36 	bltu	r19,r16,8008b3c <__udivdi3+0x598>
 8008894:	9880a92e 	bgeu	r19,r2,8008b3c <__udivdi3+0x598>
 8008898:	8c7fff84 	addi	r17,r17,-2
 800889c:	9004943a 	slli	r2,r18,16
 80088a0:	8884b03a 	or	r2,r17,r2
 80088a4:	003faa06 	br	8008750 <__udivdi3+0x1ac>
 80088a8:	0007883a 	mov	r3,zero
 80088ac:	003fa706 	br	800874c <__udivdi3+0x1a8>
 80088b0:	00803fc4 	movi	r2,255
 80088b4:	11c0ae36 	bltu	r2,r7,8008b70 <__udivdi3+0x5cc>
 80088b8:	0007883a 	mov	r3,zero
 80088bc:	000b883a 	mov	r5,zero
 80088c0:	003f9606 	br	800871c <__udivdi3+0x178>
 80088c4:	00804034 	movhi	r2,256
 80088c8:	10bfffc4 	addi	r2,r2,-1
 80088cc:	1180ae36 	bltu	r2,r6,8008b88 <__udivdi3+0x5e4>
 80088d0:	00800404 	movi	r2,16
 80088d4:	1007883a 	mov	r3,r2
 80088d8:	003f4a06 	br	8008604 <__udivdi3+0x60>
 80088dc:	00803fc4 	movi	r2,255
 80088e0:	1400af36 	bltu	r2,r16,8008ba0 <__udivdi3+0x5fc>
 80088e4:	0005883a 	mov	r2,zero
 80088e8:	0007883a 	mov	r3,zero
 80088ec:	003fb006 	br	80087b0 <__udivdi3+0x20c>
 80088f0:	00800044 	movi	r2,1
 80088f4:	003f9606 	br	8008750 <__udivdi3+0x1ac>
 80088f8:	3c0e983a 	sll	r7,r7,r16
 80088fc:	3086d83a 	srl	r3,r6,r2
 8008900:	88aed83a 	srl	r23,r17,r2
 8008904:	9084d83a 	srl	r2,r18,r2
 8008908:	38e6b03a 	or	r19,r7,r3
 800890c:	9828d43a 	srli	r20,r19,16
 8008910:	8c22983a 	sll	r17,r17,r16
 8008914:	b809883a 	mov	r4,r23
 8008918:	a00b883a 	mov	r5,r20
 800891c:	342a983a 	sll	r21,r6,r16
 8008920:	88a2b03a 	or	r17,r17,r2
 8008924:	8000dec0 	call	8000dec <__umodsi3>
 8008928:	b809883a 	mov	r4,r23
 800892c:	a00b883a 	mov	r5,r20
 8008930:	1039883a 	mov	fp,r2
 8008934:	9dbfffcc 	andi	r22,r19,65535
 8008938:	8000de40 	call	8000de4 <__udivsi3>
 800893c:	1009883a 	mov	r4,r2
 8008940:	b00b883a 	mov	r5,r22
 8008944:	102f883a 	mov	r23,r2
 8008948:	8000df40 	call	8000df4 <__mulsi3>
 800894c:	1009883a 	mov	r4,r2
 8008950:	e00e943a 	slli	r7,fp,16
 8008954:	8804d43a 	srli	r2,r17,16
 8008958:	388eb03a 	or	r7,r7,r2
 800895c:	3900042e 	bgeu	r7,r4,8008970 <__udivdi3+0x3cc>
 8008960:	3ccf883a 	add	r7,r7,r19
 8008964:	b8bfffc4 	addi	r2,r23,-1
 8008968:	3cc0942e 	bgeu	r7,r19,8008bbc <__udivdi3+0x618>
 800896c:	102f883a 	mov	r23,r2
 8008970:	3939c83a 	sub	fp,r7,r4
 8008974:	a00b883a 	mov	r5,r20
 8008978:	e009883a 	mov	r4,fp
 800897c:	8000dec0 	call	8000dec <__umodsi3>
 8008980:	a00b883a 	mov	r5,r20
 8008984:	e009883a 	mov	r4,fp
 8008988:	d8800015 	stw	r2,0(sp)
 800898c:	8000de40 	call	8000de4 <__udivsi3>
 8008990:	1009883a 	mov	r4,r2
 8008994:	b00b883a 	mov	r5,r22
 8008998:	1029883a 	mov	r20,r2
 800899c:	8000df40 	call	8000df4 <__mulsi3>
 80089a0:	d8c00017 	ldw	r3,0(sp)
 80089a4:	8c7fffcc 	andi	r17,r17,65535
 80089a8:	1806943a 	slli	r3,r3,16
 80089ac:	1c46b03a 	or	r3,r3,r17
 80089b0:	1880042e 	bgeu	r3,r2,80089c4 <__udivdi3+0x420>
 80089b4:	1cc7883a 	add	r3,r3,r19
 80089b8:	a13fffc4 	addi	r4,r20,-1
 80089bc:	1cc07b2e 	bgeu	r3,r19,8008bac <__udivdi3+0x608>
 80089c0:	2029883a 	mov	r20,r4
 80089c4:	b82e943a 	slli	r23,r23,16
 80089c8:	a822d43a 	srli	r17,r21,16
 80089cc:	ad7fffcc 	andi	r21,r21,65535
 80089d0:	a5e8b03a 	or	r20,r20,r23
 80089d4:	a5bfffcc 	andi	r22,r20,65535
 80089d8:	b009883a 	mov	r4,r22
 80089dc:	a80b883a 	mov	r5,r21
 80089e0:	18afc83a 	sub	r23,r3,r2
 80089e4:	a026d43a 	srli	r19,r20,16
 80089e8:	8000df40 	call	8000df4 <__mulsi3>
 80089ec:	b009883a 	mov	r4,r22
 80089f0:	880b883a 	mov	r5,r17
 80089f4:	1039883a 	mov	fp,r2
 80089f8:	8000df40 	call	8000df4 <__mulsi3>
 80089fc:	a80b883a 	mov	r5,r21
 8008a00:	9809883a 	mov	r4,r19
 8008a04:	102d883a 	mov	r22,r2
 8008a08:	8000df40 	call	8000df4 <__mulsi3>
 8008a0c:	9809883a 	mov	r4,r19
 8008a10:	880b883a 	mov	r5,r17
 8008a14:	102b883a 	mov	r21,r2
 8008a18:	8000df40 	call	8000df4 <__mulsi3>
 8008a1c:	100b883a 	mov	r5,r2
 8008a20:	e004d43a 	srli	r2,fp,16
 8008a24:	ad89883a 	add	r4,r21,r22
 8008a28:	2089883a 	add	r4,r4,r2
 8008a2c:	2540022e 	bgeu	r4,r21,8008a38 <__udivdi3+0x494>
 8008a30:	00800074 	movhi	r2,1
 8008a34:	288b883a 	add	r5,r5,r2
 8008a38:	2004d43a 	srli	r2,r4,16
 8008a3c:	288b883a 	add	r5,r5,r2
 8008a40:	b9404536 	bltu	r23,r5,8008b58 <__udivdi3+0x5b4>
 8008a44:	b9403f26 	beq	r23,r5,8008b44 <__udivdi3+0x5a0>
 8008a48:	a005883a 	mov	r2,r20
 8008a4c:	0007883a 	mov	r3,zero
 8008a50:	003f3f06 	br	8008750 <__udivdi3+0x1ac>
 8008a54:	80a0983a 	sll	r16,r16,r2
 8008a58:	88eed83a 	srl	r23,r17,r3
 8008a5c:	90c6d83a 	srl	r3,r18,r3
 8008a60:	8028d43a 	srli	r20,r16,16
 8008a64:	88a2983a 	sll	r17,r17,r2
 8008a68:	b809883a 	mov	r4,r23
 8008a6c:	a00b883a 	mov	r5,r20
 8008a70:	88ecb03a 	or	r22,r17,r3
 8008a74:	90a6983a 	sll	r19,r18,r2
 8008a78:	8000dec0 	call	8000dec <__umodsi3>
 8008a7c:	b809883a 	mov	r4,r23
 8008a80:	a00b883a 	mov	r5,r20
 8008a84:	1023883a 	mov	r17,r2
 8008a88:	857fffcc 	andi	r21,r16,65535
 8008a8c:	8000de40 	call	8000de4 <__udivsi3>
 8008a90:	1009883a 	mov	r4,r2
 8008a94:	a80b883a 	mov	r5,r21
 8008a98:	102f883a 	mov	r23,r2
 8008a9c:	8000df40 	call	8000df4 <__mulsi3>
 8008aa0:	1009883a 	mov	r4,r2
 8008aa4:	880a943a 	slli	r5,r17,16
 8008aa8:	b004d43a 	srli	r2,r22,16
 8008aac:	288ab03a 	or	r5,r5,r2
 8008ab0:	2900062e 	bgeu	r5,r4,8008acc <__udivdi3+0x528>
 8008ab4:	2c0b883a 	add	r5,r5,r16
 8008ab8:	b8bfffc4 	addi	r2,r23,-1
 8008abc:	2c004536 	bltu	r5,r16,8008bd4 <__udivdi3+0x630>
 8008ac0:	2900442e 	bgeu	r5,r4,8008bd4 <__udivdi3+0x630>
 8008ac4:	bdffff84 	addi	r23,r23,-2
 8008ac8:	2c0b883a 	add	r5,r5,r16
 8008acc:	2925c83a 	sub	r18,r5,r4
 8008ad0:	9009883a 	mov	r4,r18
 8008ad4:	a00b883a 	mov	r5,r20
 8008ad8:	8000dec0 	call	8000dec <__umodsi3>
 8008adc:	1023883a 	mov	r17,r2
 8008ae0:	9009883a 	mov	r4,r18
 8008ae4:	a00b883a 	mov	r5,r20
 8008ae8:	8822943a 	slli	r17,r17,16
 8008aec:	8000de40 	call	8000de4 <__udivsi3>
 8008af0:	1009883a 	mov	r4,r2
 8008af4:	a80b883a 	mov	r5,r21
 8008af8:	b5bfffcc 	andi	r22,r22,65535
 8008afc:	1025883a 	mov	r18,r2
 8008b00:	8da2b03a 	or	r17,r17,r22
 8008b04:	8000df40 	call	8000df4 <__mulsi3>
 8008b08:	8880062e 	bgeu	r17,r2,8008b24 <__udivdi3+0x580>
 8008b0c:	8c23883a 	add	r17,r17,r16
 8008b10:	90ffffc4 	addi	r3,r18,-1
 8008b14:	8c002d36 	bltu	r17,r16,8008bcc <__udivdi3+0x628>
 8008b18:	88802c2e 	bgeu	r17,r2,8008bcc <__udivdi3+0x628>
 8008b1c:	94bfff84 	addi	r18,r18,-2
 8008b20:	8c23883a 	add	r17,r17,r16
 8008b24:	b806943a 	slli	r3,r23,16
 8008b28:	88a3c83a 	sub	r17,r17,r2
 8008b2c:	90c6b03a 	or	r3,r18,r3
 8008b30:	003f2c06 	br	80087e4 <__udivdi3+0x240>
 8008b34:	1823883a 	mov	r17,r3
 8008b38:	003eec06 	br	80086ec <__udivdi3+0x148>
 8008b3c:	2023883a 	mov	r17,r4
 8008b40:	003f5606 	br	800889c <__udivdi3+0x2f8>
 8008b44:	2008943a 	slli	r4,r4,16
 8008b48:	9420983a 	sll	r16,r18,r16
 8008b4c:	e73fffcc 	andi	fp,fp,65535
 8008b50:	2709883a 	add	r4,r4,fp
 8008b54:	813fbc2e 	bgeu	r16,r4,8008a48 <__udivdi3+0x4a4>
 8008b58:	a0bfffc4 	addi	r2,r20,-1
 8008b5c:	0007883a 	mov	r3,zero
 8008b60:	003efb06 	br	8008750 <__udivdi3+0x1ac>
 8008b64:	00c00604 	movi	r3,24
 8008b68:	180b883a 	mov	r5,r3
 8008b6c:	003eeb06 	br	800871c <__udivdi3+0x178>
 8008b70:	00c00204 	movi	r3,8
 8008b74:	180b883a 	mov	r5,r3
 8008b78:	003ee806 	br	800871c <__udivdi3+0x178>
 8008b7c:	00800604 	movi	r2,24
 8008b80:	1007883a 	mov	r3,r2
 8008b84:	003f0a06 	br	80087b0 <__udivdi3+0x20c>
 8008b88:	00800604 	movi	r2,24
 8008b8c:	1007883a 	mov	r3,r2
 8008b90:	003e9c06 	br	8008604 <__udivdi3+0x60>
 8008b94:	00800204 	movi	r2,8
 8008b98:	1007883a 	mov	r3,r2
 8008b9c:	003e9906 	br	8008604 <__udivdi3+0x60>
 8008ba0:	00800204 	movi	r2,8
 8008ba4:	1007883a 	mov	r3,r2
 8008ba8:	003f0106 	br	80087b0 <__udivdi3+0x20c>
 8008bac:	18bf842e 	bgeu	r3,r2,80089c0 <__udivdi3+0x41c>
 8008bb0:	a53fff84 	addi	r20,r20,-2
 8008bb4:	1cc7883a 	add	r3,r3,r19
 8008bb8:	003f8206 	br	80089c4 <__udivdi3+0x420>
 8008bbc:	393f6b2e 	bgeu	r7,r4,800896c <__udivdi3+0x3c8>
 8008bc0:	bdffff84 	addi	r23,r23,-2
 8008bc4:	3ccf883a 	add	r7,r7,r19
 8008bc8:	003f6906 	br	8008970 <__udivdi3+0x3cc>
 8008bcc:	1825883a 	mov	r18,r3
 8008bd0:	003fd406 	br	8008b24 <__udivdi3+0x580>
 8008bd4:	102f883a 	mov	r23,r2
 8008bd8:	003fbc06 	br	8008acc <__udivdi3+0x528>
 8008bdc:	94bfff84 	addi	r18,r18,-2
 8008be0:	340d883a 	add	r6,r6,r16
 8008be4:	003f1606 	br	8008840 <__udivdi3+0x29c>
 8008be8:	94bfff84 	addi	r18,r18,-2
 8008bec:	1c07883a 	add	r3,r3,r16
 8008bf0:	003ea906 	br	8008698 <__udivdi3+0xf4>

08008bf4 <__umoddi3>:
 8008bf4:	defff304 	addi	sp,sp,-52
 8008bf8:	dd000715 	stw	r20,28(sp)
 8008bfc:	dcc00615 	stw	r19,24(sp)
 8008c00:	dc800515 	stw	r18,20(sp)
 8008c04:	dc400415 	stw	r17,16(sp)
 8008c08:	dc000315 	stw	r16,12(sp)
 8008c0c:	dfc00c15 	stw	ra,48(sp)
 8008c10:	df000b15 	stw	fp,44(sp)
 8008c14:	ddc00a15 	stw	r23,40(sp)
 8008c18:	dd800915 	stw	r22,36(sp)
 8008c1c:	dd400815 	stw	r21,32(sp)
 8008c20:	2025883a 	mov	r18,r4
 8008c24:	2823883a 	mov	r17,r5
 8008c28:	3021883a 	mov	r16,r6
 8008c2c:	2027883a 	mov	r19,r4
 8008c30:	2829883a 	mov	r20,r5
 8008c34:	38003a1e 	bne	r7,zero,8008d20 <__umoddi3+0x12c>
 8008c38:	2980522e 	bgeu	r5,r6,8008d84 <__umoddi3+0x190>
 8008c3c:	00bfffd4 	movui	r2,65535
 8008c40:	1180a436 	bltu	r2,r6,8008ed4 <__umoddi3+0x2e0>
 8008c44:	00803fc4 	movi	r2,255
 8008c48:	11816036 	bltu	r2,r6,80091cc <__umoddi3+0x5d8>
 8008c4c:	0005883a 	mov	r2,zero
 8008c50:	0009883a 	mov	r4,zero
 8008c54:	3084d83a 	srl	r2,r6,r2
 8008c58:	00c20074 	movhi	r3,2049
 8008c5c:	18f54504 	addi	r3,r3,-10988
 8008c60:	05400804 	movi	r21,32
 8008c64:	1885883a 	add	r2,r3,r2
 8008c68:	10800003 	ldbu	r2,0(r2)
 8008c6c:	1109883a 	add	r4,r2,r4
 8008c70:	a92bc83a 	sub	r21,r21,r4
 8008c74:	a8010e26 	beq	r21,zero,80090b0 <__umoddi3+0x4bc>
 8008c78:	8d62983a 	sll	r17,r17,r21
 8008c7c:	9108d83a 	srl	r4,r18,r4
 8008c80:	3560983a 	sll	r16,r6,r21
 8008c84:	9566983a 	sll	r19,r18,r21
 8008c88:	8928b03a 	or	r20,r17,r4
 8008c8c:	8022d43a 	srli	r17,r16,16
 8008c90:	a009883a 	mov	r4,r20
 8008c94:	84bfffcc 	andi	r18,r16,65535
 8008c98:	880b883a 	mov	r5,r17
 8008c9c:	8000dec0 	call	8000dec <__umodsi3>
 8008ca0:	a009883a 	mov	r4,r20
 8008ca4:	880b883a 	mov	r5,r17
 8008ca8:	102d883a 	mov	r22,r2
 8008cac:	8000de40 	call	8000de4 <__udivsi3>
 8008cb0:	1009883a 	mov	r4,r2
 8008cb4:	900b883a 	mov	r5,r18
 8008cb8:	8000df40 	call	8000df4 <__mulsi3>
 8008cbc:	1009883a 	mov	r4,r2
 8008cc0:	b006943a 	slli	r3,r22,16
 8008cc4:	9804d43a 	srli	r2,r19,16
 8008cc8:	1886b03a 	or	r3,r3,r2
 8008ccc:	1900042e 	bgeu	r3,r4,8008ce0 <__umoddi3+0xec>
 8008cd0:	1c07883a 	add	r3,r3,r16
 8008cd4:	1c000236 	bltu	r3,r16,8008ce0 <__umoddi3+0xec>
 8008cd8:	1900012e 	bgeu	r3,r4,8008ce0 <__umoddi3+0xec>
 8008cdc:	1c07883a 	add	r3,r3,r16
 8008ce0:	1929c83a 	sub	r20,r3,r4
 8008ce4:	a009883a 	mov	r4,r20
 8008ce8:	880b883a 	mov	r5,r17
 8008cec:	8000dec0 	call	8000dec <__umodsi3>
 8008cf0:	102d883a 	mov	r22,r2
 8008cf4:	a009883a 	mov	r4,r20
 8008cf8:	880b883a 	mov	r5,r17
 8008cfc:	b02c943a 	slli	r22,r22,16
 8008d00:	8000de40 	call	8000de4 <__udivsi3>
 8008d04:	1009883a 	mov	r4,r2
 8008d08:	900b883a 	mov	r5,r18
 8008d0c:	9cffffcc 	andi	r19,r19,65535
 8008d10:	8000df40 	call	8000df4 <__mulsi3>
 8008d14:	b4e6b03a 	or	r19,r22,r19
 8008d18:	9880572e 	bgeu	r19,r2,8008e78 <__umoddi3+0x284>
 8008d1c:	00005206 	br	8008e68 <__umoddi3+0x274>
 8008d20:	29c05936 	bltu	r5,r7,8008e88 <__umoddi3+0x294>
 8008d24:	00bfffd4 	movui	r2,65535
 8008d28:	11c0652e 	bgeu	r2,r7,8008ec0 <__umoddi3+0x2cc>
 8008d2c:	00804034 	movhi	r2,256
 8008d30:	10bfffc4 	addi	r2,r2,-1
 8008d34:	11c11936 	bltu	r2,r7,800919c <__umoddi3+0x5a8>
 8008d38:	00c00404 	movi	r3,16
 8008d3c:	1827883a 	mov	r19,r3
 8008d40:	38c6d83a 	srl	r3,r7,r3
 8008d44:	01020074 	movhi	r4,2049
 8008d48:	21354504 	addi	r4,r4,-10988
 8008d4c:	04000804 	movi	r16,32
 8008d50:	20c7883a 	add	r3,r4,r3
 8008d54:	18800003 	ldbu	r2,0(r3)
 8008d58:	14e7883a 	add	r19,r2,r19
 8008d5c:	84e1c83a 	sub	r16,r16,r19
 8008d60:	8000671e 	bne	r16,zero,8008f00 <__umoddi3+0x30c>
 8008d64:	3c400136 	bltu	r7,r17,8008d6c <__umoddi3+0x178>
 8008d68:	91812536 	bltu	r18,r6,8009200 <__umoddi3+0x60c>
 8008d6c:	9185c83a 	sub	r2,r18,r6
 8008d70:	89e3c83a 	sub	r17,r17,r7
 8008d74:	90a5803a 	cmpltu	r18,r18,r2
 8008d78:	8ca9c83a 	sub	r20,r17,r18
 8008d7c:	a007883a 	mov	r3,r20
 8008d80:	00004306 	br	8008e90 <__umoddi3+0x29c>
 8008d84:	3000041e 	bne	r6,zero,8008d98 <__umoddi3+0x1a4>
 8008d88:	01000044 	movi	r4,1
 8008d8c:	000b883a 	mov	r5,zero
 8008d90:	8000de40 	call	8000de4 <__udivsi3>
 8008d94:	1021883a 	mov	r16,r2
 8008d98:	00bfffd4 	movui	r2,65535
 8008d9c:	1400532e 	bgeu	r2,r16,8008eec <__umoddi3+0x2f8>
 8008da0:	00804034 	movhi	r2,256
 8008da4:	10bfffc4 	addi	r2,r2,-1
 8008da8:	14010536 	bltu	r2,r16,80091c0 <__umoddi3+0x5cc>
 8008dac:	00800404 	movi	r2,16
 8008db0:	1007883a 	mov	r3,r2
 8008db4:	8084d83a 	srl	r2,r16,r2
 8008db8:	01020074 	movhi	r4,2049
 8008dbc:	21354504 	addi	r4,r4,-10988
 8008dc0:	05400804 	movi	r21,32
 8008dc4:	2085883a 	add	r2,r4,r2
 8008dc8:	10800003 	ldbu	r2,0(r2)
 8008dcc:	10c7883a 	add	r3,r2,r3
 8008dd0:	a8ebc83a 	sub	r21,r21,r3
 8008dd4:	a800b81e 	bne	r21,zero,80090b8 <__umoddi3+0x4c4>
 8008dd8:	8028d43a 	srli	r20,r16,16
 8008ddc:	8c23c83a 	sub	r17,r17,r16
 8008de0:	85bfffcc 	andi	r22,r16,65535
 8008de4:	8809883a 	mov	r4,r17
 8008de8:	a00b883a 	mov	r5,r20
 8008dec:	8000dec0 	call	8000dec <__umodsi3>
 8008df0:	8809883a 	mov	r4,r17
 8008df4:	a00b883a 	mov	r5,r20
 8008df8:	1025883a 	mov	r18,r2
 8008dfc:	8000de40 	call	8000de4 <__udivsi3>
 8008e00:	1009883a 	mov	r4,r2
 8008e04:	b00b883a 	mov	r5,r22
 8008e08:	8000df40 	call	8000df4 <__mulsi3>
 8008e0c:	1009883a 	mov	r4,r2
 8008e10:	9006943a 	slli	r3,r18,16
 8008e14:	9804d43a 	srli	r2,r19,16
 8008e18:	1886b03a 	or	r3,r3,r2
 8008e1c:	1900032e 	bgeu	r3,r4,8008e2c <__umoddi3+0x238>
 8008e20:	1c07883a 	add	r3,r3,r16
 8008e24:	1c000136 	bltu	r3,r16,8008e2c <__umoddi3+0x238>
 8008e28:	1900f336 	bltu	r3,r4,80091f8 <__umoddi3+0x604>
 8008e2c:	1923c83a 	sub	r17,r3,r4
 8008e30:	8809883a 	mov	r4,r17
 8008e34:	a00b883a 	mov	r5,r20
 8008e38:	8000dec0 	call	8000dec <__umodsi3>
 8008e3c:	102f883a 	mov	r23,r2
 8008e40:	8809883a 	mov	r4,r17
 8008e44:	a00b883a 	mov	r5,r20
 8008e48:	b82e943a 	slli	r23,r23,16
 8008e4c:	8000de40 	call	8000de4 <__udivsi3>
 8008e50:	1009883a 	mov	r4,r2
 8008e54:	b00b883a 	mov	r5,r22
 8008e58:	9cffffcc 	andi	r19,r19,65535
 8008e5c:	8000df40 	call	8000df4 <__mulsi3>
 8008e60:	bce6b03a 	or	r19,r23,r19
 8008e64:	9880042e 	bgeu	r19,r2,8008e78 <__umoddi3+0x284>
 8008e68:	9c27883a 	add	r19,r19,r16
 8008e6c:	9c000236 	bltu	r19,r16,8008e78 <__umoddi3+0x284>
 8008e70:	9880012e 	bgeu	r19,r2,8008e78 <__umoddi3+0x284>
 8008e74:	9c27883a 	add	r19,r19,r16
 8008e78:	9885c83a 	sub	r2,r19,r2
 8008e7c:	1544d83a 	srl	r2,r2,r21
 8008e80:	0007883a 	mov	r3,zero
 8008e84:	00000206 	br	8008e90 <__umoddi3+0x29c>
 8008e88:	2005883a 	mov	r2,r4
 8008e8c:	2807883a 	mov	r3,r5
 8008e90:	dfc00c17 	ldw	ra,48(sp)
 8008e94:	df000b17 	ldw	fp,44(sp)
 8008e98:	ddc00a17 	ldw	r23,40(sp)
 8008e9c:	dd800917 	ldw	r22,36(sp)
 8008ea0:	dd400817 	ldw	r21,32(sp)
 8008ea4:	dd000717 	ldw	r20,28(sp)
 8008ea8:	dcc00617 	ldw	r19,24(sp)
 8008eac:	dc800517 	ldw	r18,20(sp)
 8008eb0:	dc400417 	ldw	r17,16(sp)
 8008eb4:	dc000317 	ldw	r16,12(sp)
 8008eb8:	dec00d04 	addi	sp,sp,52
 8008ebc:	f800283a 	ret
 8008ec0:	00803fc4 	movi	r2,255
 8008ec4:	11c0b236 	bltu	r2,r7,8009190 <__umoddi3+0x59c>
 8008ec8:	0007883a 	mov	r3,zero
 8008ecc:	0027883a 	mov	r19,zero
 8008ed0:	003f9b06 	br	8008d40 <__umoddi3+0x14c>
 8008ed4:	00804034 	movhi	r2,256
 8008ed8:	10bfffc4 	addi	r2,r2,-1
 8008edc:	1180b236 	bltu	r2,r6,80091a8 <__umoddi3+0x5b4>
 8008ee0:	00800404 	movi	r2,16
 8008ee4:	1009883a 	mov	r4,r2
 8008ee8:	003f5a06 	br	8008c54 <__umoddi3+0x60>
 8008eec:	00803fc4 	movi	r2,255
 8008ef0:	1400b036 	bltu	r2,r16,80091b4 <__umoddi3+0x5c0>
 8008ef4:	0005883a 	mov	r2,zero
 8008ef8:	0007883a 	mov	r3,zero
 8008efc:	003fad06 	br	8008db4 <__umoddi3+0x1c0>
 8008f00:	34c4d83a 	srl	r2,r6,r19
 8008f04:	3c0e983a 	sll	r7,r7,r16
 8008f08:	8cf8d83a 	srl	fp,r17,r19
 8008f0c:	8c22983a 	sll	r17,r17,r16
 8008f10:	38a8b03a 	or	r20,r7,r2
 8008f14:	a02ad43a 	srli	r21,r20,16
 8008f18:	94c4d83a 	srl	r2,r18,r19
 8008f1c:	e009883a 	mov	r4,fp
 8008f20:	a80b883a 	mov	r5,r21
 8008f24:	342c983a 	sll	r22,r6,r16
 8008f28:	88a2b03a 	or	r17,r17,r2
 8008f2c:	8000dec0 	call	8000dec <__umodsi3>
 8008f30:	e009883a 	mov	r4,fp
 8008f34:	a80b883a 	mov	r5,r21
 8008f38:	a5ffffcc 	andi	r23,r20,65535
 8008f3c:	d8800215 	stw	r2,8(sp)
 8008f40:	8000de40 	call	8000de4 <__udivsi3>
 8008f44:	1009883a 	mov	r4,r2
 8008f48:	b80b883a 	mov	r5,r23
 8008f4c:	1039883a 	mov	fp,r2
 8008f50:	8000df40 	call	8000df4 <__mulsi3>
 8008f54:	d8c00217 	ldw	r3,8(sp)
 8008f58:	1009883a 	mov	r4,r2
 8008f5c:	8804d43a 	srli	r2,r17,16
 8008f60:	1806943a 	slli	r3,r3,16
 8008f64:	9424983a 	sll	r18,r18,r16
 8008f68:	1886b03a 	or	r3,r3,r2
 8008f6c:	1900042e 	bgeu	r3,r4,8008f80 <__umoddi3+0x38c>
 8008f70:	1d07883a 	add	r3,r3,r20
 8008f74:	e0bfffc4 	addi	r2,fp,-1
 8008f78:	1d009b2e 	bgeu	r3,r20,80091e8 <__umoddi3+0x5f4>
 8008f7c:	1039883a 	mov	fp,r2
 8008f80:	1907c83a 	sub	r3,r3,r4
 8008f84:	1809883a 	mov	r4,r3
 8008f88:	a80b883a 	mov	r5,r21
 8008f8c:	d8c00215 	stw	r3,8(sp)
 8008f90:	8000dec0 	call	8000dec <__umodsi3>
 8008f94:	d8c00217 	ldw	r3,8(sp)
 8008f98:	a80b883a 	mov	r5,r21
 8008f9c:	d8800015 	stw	r2,0(sp)
 8008fa0:	1809883a 	mov	r4,r3
 8008fa4:	8000de40 	call	8000de4 <__udivsi3>
 8008fa8:	1009883a 	mov	r4,r2
 8008fac:	b80b883a 	mov	r5,r23
 8008fb0:	102b883a 	mov	r21,r2
 8008fb4:	8000df40 	call	8000df4 <__mulsi3>
 8008fb8:	d9c00017 	ldw	r7,0(sp)
 8008fbc:	8c7fffcc 	andi	r17,r17,65535
 8008fc0:	380e943a 	slli	r7,r7,16
 8008fc4:	3c4eb03a 	or	r7,r7,r17
 8008fc8:	3880042e 	bgeu	r7,r2,8008fdc <__umoddi3+0x3e8>
 8008fcc:	3d0f883a 	add	r7,r7,r20
 8008fd0:	a8ffffc4 	addi	r3,r21,-1
 8008fd4:	3d00802e 	bgeu	r7,r20,80091d8 <__umoddi3+0x5e4>
 8008fd8:	182b883a 	mov	r21,r3
 8008fdc:	e038943a 	slli	fp,fp,16
 8008fe0:	b010d43a 	srli	r8,r22,16
 8008fe4:	b1bfffcc 	andi	r6,r22,65535
 8008fe8:	af2ab03a 	or	r21,r21,fp
 8008fec:	a82ed43a 	srli	r23,r21,16
 8008ff0:	ad7fffcc 	andi	r21,r21,65535
 8008ff4:	300b883a 	mov	r5,r6
 8008ff8:	a809883a 	mov	r4,r21
 8008ffc:	38a3c83a 	sub	r17,r7,r2
 8009000:	d9800115 	stw	r6,4(sp)
 8009004:	da000015 	stw	r8,0(sp)
 8009008:	8000df40 	call	8000df4 <__mulsi3>
 800900c:	da000017 	ldw	r8,0(sp)
 8009010:	a809883a 	mov	r4,r21
 8009014:	1039883a 	mov	fp,r2
 8009018:	400b883a 	mov	r5,r8
 800901c:	da000215 	stw	r8,8(sp)
 8009020:	8000df40 	call	8000df4 <__mulsi3>
 8009024:	d9800117 	ldw	r6,4(sp)
 8009028:	b809883a 	mov	r4,r23
 800902c:	d8800015 	stw	r2,0(sp)
 8009030:	300b883a 	mov	r5,r6
 8009034:	8000df40 	call	8000df4 <__mulsi3>
 8009038:	d8c00217 	ldw	r3,8(sp)
 800903c:	b809883a 	mov	r4,r23
 8009040:	102b883a 	mov	r21,r2
 8009044:	180b883a 	mov	r5,r3
 8009048:	8000df40 	call	8000df4 <__mulsi3>
 800904c:	d9c00017 	ldw	r7,0(sp)
 8009050:	1007883a 	mov	r3,r2
 8009054:	e004d43a 	srli	r2,fp,16
 8009058:	a9c9883a 	add	r4,r21,r7
 800905c:	2089883a 	add	r4,r4,r2
 8009060:	2540022e 	bgeu	r4,r21,800906c <__umoddi3+0x478>
 8009064:	00800074 	movhi	r2,1
 8009068:	1887883a 	add	r3,r3,r2
 800906c:	2004d43a 	srli	r2,r4,16
 8009070:	2008943a 	slli	r4,r4,16
 8009074:	e73fffcc 	andi	fp,fp,65535
 8009078:	1887883a 	add	r3,r3,r2
 800907c:	2709883a 	add	r4,r4,fp
 8009080:	88c03d36 	bltu	r17,r3,8009178 <__umoddi3+0x584>
 8009084:	88c06126 	beq	r17,r3,800920c <__umoddi3+0x618>
 8009088:	88c7c83a 	sub	r3,r17,r3
 800908c:	202d883a 	mov	r22,r4
 8009090:	95adc83a 	sub	r22,r18,r22
 8009094:	95a5803a 	cmpltu	r18,r18,r22
 8009098:	1c87c83a 	sub	r3,r3,r18
 800909c:	1cc4983a 	sll	r2,r3,r19
 80090a0:	b42cd83a 	srl	r22,r22,r16
 80090a4:	1c06d83a 	srl	r3,r3,r16
 80090a8:	1584b03a 	or	r2,r2,r22
 80090ac:	003f7806 	br	8008e90 <__umoddi3+0x29c>
 80090b0:	002b883a 	mov	r21,zero
 80090b4:	003ef506 	br	8008c8c <__umoddi3+0x98>
 80090b8:	8560983a 	sll	r16,r16,r21
 80090bc:	88e6d83a 	srl	r19,r17,r3
 80090c0:	90c6d83a 	srl	r3,r18,r3
 80090c4:	8028d43a 	srli	r20,r16,16
 80090c8:	8d62983a 	sll	r17,r17,r21
 80090cc:	9809883a 	mov	r4,r19
 80090d0:	a00b883a 	mov	r5,r20
 80090d4:	88eeb03a 	or	r23,r17,r3
 80090d8:	8000dec0 	call	8000dec <__umodsi3>
 80090dc:	9809883a 	mov	r4,r19
 80090e0:	a00b883a 	mov	r5,r20
 80090e4:	1023883a 	mov	r17,r2
 80090e8:	85bfffcc 	andi	r22,r16,65535
 80090ec:	8000de40 	call	8000de4 <__udivsi3>
 80090f0:	1009883a 	mov	r4,r2
 80090f4:	b00b883a 	mov	r5,r22
 80090f8:	8000df40 	call	8000df4 <__mulsi3>
 80090fc:	1007883a 	mov	r3,r2
 8009100:	8808943a 	slli	r4,r17,16
 8009104:	b804d43a 	srli	r2,r23,16
 8009108:	9566983a 	sll	r19,r18,r21
 800910c:	2088b03a 	or	r4,r4,r2
 8009110:	20c0042e 	bgeu	r4,r3,8009124 <__umoddi3+0x530>
 8009114:	2409883a 	add	r4,r4,r16
 8009118:	24000236 	bltu	r4,r16,8009124 <__umoddi3+0x530>
 800911c:	20c0012e 	bgeu	r4,r3,8009124 <__umoddi3+0x530>
 8009120:	2409883a 	add	r4,r4,r16
 8009124:	20e5c83a 	sub	r18,r4,r3
 8009128:	9009883a 	mov	r4,r18
 800912c:	a00b883a 	mov	r5,r20
 8009130:	8000dec0 	call	8000dec <__umodsi3>
 8009134:	1023883a 	mov	r17,r2
 8009138:	9009883a 	mov	r4,r18
 800913c:	a00b883a 	mov	r5,r20
 8009140:	8822943a 	slli	r17,r17,16
 8009144:	8000de40 	call	8000de4 <__udivsi3>
 8009148:	1009883a 	mov	r4,r2
 800914c:	b00b883a 	mov	r5,r22
 8009150:	bdffffcc 	andi	r23,r23,65535
 8009154:	8000df40 	call	8000df4 <__mulsi3>
 8009158:	8de2b03a 	or	r17,r17,r23
 800915c:	8880042e 	bgeu	r17,r2,8009170 <__umoddi3+0x57c>
 8009160:	8c23883a 	add	r17,r17,r16
 8009164:	8c000236 	bltu	r17,r16,8009170 <__umoddi3+0x57c>
 8009168:	8880012e 	bgeu	r17,r2,8009170 <__umoddi3+0x57c>
 800916c:	8c23883a 	add	r17,r17,r16
 8009170:	88a3c83a 	sub	r17,r17,r2
 8009174:	003f1b06 	br	8008de4 <__umoddi3+0x1f0>
 8009178:	25adc83a 	sub	r22,r4,r22
 800917c:	1d07c83a 	sub	r3,r3,r20
 8009180:	2589803a 	cmpltu	r4,r4,r22
 8009184:	1907c83a 	sub	r3,r3,r4
 8009188:	88c7c83a 	sub	r3,r17,r3
 800918c:	003fc006 	br	8009090 <__umoddi3+0x49c>
 8009190:	00c00204 	movi	r3,8
 8009194:	1827883a 	mov	r19,r3
 8009198:	003ee906 	br	8008d40 <__umoddi3+0x14c>
 800919c:	00c00604 	movi	r3,24
 80091a0:	1827883a 	mov	r19,r3
 80091a4:	003ee606 	br	8008d40 <__umoddi3+0x14c>
 80091a8:	00800604 	movi	r2,24
 80091ac:	1009883a 	mov	r4,r2
 80091b0:	003ea806 	br	8008c54 <__umoddi3+0x60>
 80091b4:	00800204 	movi	r2,8
 80091b8:	1007883a 	mov	r3,r2
 80091bc:	003efd06 	br	8008db4 <__umoddi3+0x1c0>
 80091c0:	00800604 	movi	r2,24
 80091c4:	1007883a 	mov	r3,r2
 80091c8:	003efa06 	br	8008db4 <__umoddi3+0x1c0>
 80091cc:	00800204 	movi	r2,8
 80091d0:	1009883a 	mov	r4,r2
 80091d4:	003e9f06 	br	8008c54 <__umoddi3+0x60>
 80091d8:	38bf7f2e 	bgeu	r7,r2,8008fd8 <__umoddi3+0x3e4>
 80091dc:	ad7fff84 	addi	r21,r21,-2
 80091e0:	3d0f883a 	add	r7,r7,r20
 80091e4:	003f7d06 	br	8008fdc <__umoddi3+0x3e8>
 80091e8:	193f642e 	bgeu	r3,r4,8008f7c <__umoddi3+0x388>
 80091ec:	e73fff84 	addi	fp,fp,-2
 80091f0:	1d07883a 	add	r3,r3,r20
 80091f4:	003f6206 	br	8008f80 <__umoddi3+0x38c>
 80091f8:	1c07883a 	add	r3,r3,r16
 80091fc:	003f0b06 	br	8008e2c <__umoddi3+0x238>
 8009200:	9005883a 	mov	r2,r18
 8009204:	a007883a 	mov	r3,r20
 8009208:	003f2106 	br	8008e90 <__umoddi3+0x29c>
 800920c:	913fda36 	bltu	r18,r4,8009178 <__umoddi3+0x584>
 8009210:	202d883a 	mov	r22,r4
 8009214:	0007883a 	mov	r3,zero
 8009218:	003f9d06 	br	8009090 <__umoddi3+0x49c>

0800921c <_fpadd_parts>:
 800921c:	2005883a 	mov	r2,r4
 8009220:	21000017 	ldw	r4,0(r4)
 8009224:	01c00044 	movi	r7,1
 8009228:	3900622e 	bgeu	r7,r4,80093b4 <_fpadd_parts+0x198>
 800922c:	28c00017 	ldw	r3,0(r5)
 8009230:	38c05f2e 	bgeu	r7,r3,80093b0 <_fpadd_parts+0x194>
 8009234:	01c00104 	movi	r7,4
 8009238:	21c0c626 	beq	r4,r7,8009554 <_fpadd_parts+0x338>
 800923c:	19c05c26 	beq	r3,r7,80093b0 <_fpadd_parts+0x194>
 8009240:	01c00084 	movi	r7,2
 8009244:	19c06b26 	beq	r3,r7,80093f4 <_fpadd_parts+0x1d8>
 8009248:	21c05926 	beq	r4,r7,80093b0 <_fpadd_parts+0x194>
 800924c:	11c00217 	ldw	r7,8(r2)
 8009250:	2ac00217 	ldw	r11,8(r5)
 8009254:	13000317 	ldw	r12,12(r2)
 8009258:	13400417 	ldw	r13,16(r2)
 800925c:	3ac9c83a 	sub	r4,r7,r11
 8009260:	2a000317 	ldw	r8,12(r5)
 8009264:	2a400417 	ldw	r9,16(r5)
 8009268:	2015883a 	mov	r10,r4
 800926c:	20007516 	blt	r4,zero,8009444 <_fpadd_parts+0x228>
 8009270:	00c00fc4 	movi	r3,63
 8009274:	1a805016 	blt	r3,r10,80093b8 <_fpadd_parts+0x19c>
 8009278:	0100870e 	bge	zero,r4,8009498 <_fpadd_parts+0x27c>
 800927c:	50fff804 	addi	r3,r10,-32
 8009280:	18009916 	blt	r3,zero,80094e8 <_fpadd_parts+0x2cc>
 8009284:	48d6d83a 	srl	r11,r9,r3
 8009288:	001d883a 	mov	r14,zero
 800928c:	18009e16 	blt	r3,zero,8009508 <_fpadd_parts+0x2ec>
 8009290:	01000044 	movi	r4,1
 8009294:	20c6983a 	sll	r3,r4,r3
 8009298:	0015883a 	mov	r10,zero
 800929c:	513fffc4 	addi	r4,r10,-1
 80092a0:	2295403a 	cmpgeu	r10,r4,r10
 80092a4:	1a87c83a 	sub	r3,r3,r10
 80092a8:	1a52703a 	and	r9,r3,r9
 80092ac:	2210703a 	and	r8,r4,r8
 80092b0:	4250b03a 	or	r8,r8,r9
 80092b4:	4010c03a 	cmpne	r8,r8,zero
 80092b8:	42d0b03a 	or	r8,r8,r11
 80092bc:	7013883a 	mov	r9,r14
 80092c0:	11000117 	ldw	r4,4(r2)
 80092c4:	28800117 	ldw	r2,4(r5)
 80092c8:	20804126 	beq	r4,r2,80093d0 <_fpadd_parts+0x1b4>
 80092cc:	20006326 	beq	r4,zero,800945c <_fpadd_parts+0x240>
 80092d0:	4305c83a 	sub	r2,r8,r12
 80092d4:	4091803a 	cmpltu	r8,r8,r2
 80092d8:	4b47c83a 	sub	r3,r9,r13
 80092dc:	1a07c83a 	sub	r3,r3,r8
 80092e0:	18006316 	blt	r3,zero,8009470 <_fpadd_parts+0x254>
 80092e4:	30000115 	stw	zero,4(r6)
 80092e8:	31c00215 	stw	r7,8(r6)
 80092ec:	30800315 	stw	r2,12(r6)
 80092f0:	30c00415 	stw	r3,16(r6)
 80092f4:	11ffffc4 	addi	r7,r2,-1
 80092f8:	388b403a 	cmpgeu	r5,r7,r2
 80092fc:	194bc83a 	sub	r5,r3,r5
 8009300:	01040034 	movhi	r4,4096
 8009304:	213fffc4 	addi	r4,r4,-1
 8009308:	21401736 	bltu	r4,r5,8009368 <_fpadd_parts+0x14c>
 800930c:	29008226 	beq	r5,r4,8009518 <_fpadd_parts+0x2fc>
 8009310:	31400217 	ldw	r5,8(r6)
 8009314:	02840034 	movhi	r10,4096
 8009318:	52bfffc4 	addi	r10,r10,-1
 800931c:	033fff84 	movi	r12,-2
 8009320:	297fffc4 	addi	r5,r5,-1
 8009324:	00000106 	br	800932c <_fpadd_parts+0x110>
 8009328:	3a804a26 	beq	r7,r10,8009454 <_fpadd_parts+0x238>
 800932c:	1089883a 	add	r4,r2,r2
 8009330:	2091803a 	cmpltu	r8,r4,r2
 8009334:	18c7883a 	add	r3,r3,r3
 8009338:	227fffc4 	addi	r9,r4,-1
 800933c:	40d1883a 	add	r8,r8,r3
 8009340:	490f403a 	cmpgeu	r7,r9,r4
 8009344:	41cfc83a 	sub	r7,r8,r7
 8009348:	2817883a 	mov	r11,r5
 800934c:	2005883a 	mov	r2,r4
 8009350:	4007883a 	mov	r3,r8
 8009354:	297fffc4 	addi	r5,r5,-1
 8009358:	51fff32e 	bgeu	r10,r7,8009328 <_fpadd_parts+0x10c>
 800935c:	31000315 	stw	r4,12(r6)
 8009360:	32000415 	stw	r8,16(r6)
 8009364:	32c00215 	stw	r11,8(r6)
 8009368:	010000c4 	movi	r4,3
 800936c:	31000015 	stw	r4,0(r6)
 8009370:	01080034 	movhi	r4,8192
 8009374:	213fffc4 	addi	r4,r4,-1
 8009378:	20c00b2e 	bgeu	r4,r3,80093a8 <_fpadd_parts+0x18c>
 800937c:	180e97fa 	slli	r7,r3,31
 8009380:	1008d07a 	srli	r4,r2,1
 8009384:	31400217 	ldw	r5,8(r6)
 8009388:	1806d07a 	srli	r3,r3,1
 800938c:	1080004c 	andi	r2,r2,1
 8009390:	3908b03a 	or	r4,r7,r4
 8009394:	1108b03a 	or	r4,r2,r4
 8009398:	29400044 	addi	r5,r5,1
 800939c:	31000315 	stw	r4,12(r6)
 80093a0:	30c00415 	stw	r3,16(r6)
 80093a4:	31400215 	stw	r5,8(r6)
 80093a8:	3005883a 	mov	r2,r6
 80093ac:	f800283a 	ret
 80093b0:	2805883a 	mov	r2,r5
 80093b4:	f800283a 	ret
 80093b8:	59c01e0e 	bge	r11,r7,8009434 <_fpadd_parts+0x218>
 80093bc:	11000117 	ldw	r4,4(r2)
 80093c0:	28800117 	ldw	r2,4(r5)
 80093c4:	0011883a 	mov	r8,zero
 80093c8:	0013883a 	mov	r9,zero
 80093cc:	20bfbf1e 	bne	r4,r2,80092cc <_fpadd_parts+0xb0>
 80093d0:	4305883a 	add	r2,r8,r12
 80093d4:	1207803a 	cmpltu	r3,r2,r8
 80093d8:	4b53883a 	add	r9,r9,r13
 80093dc:	1a47883a 	add	r3,r3,r9
 80093e0:	31000115 	stw	r4,4(r6)
 80093e4:	31c00215 	stw	r7,8(r6)
 80093e8:	30800315 	stw	r2,12(r6)
 80093ec:	30c00415 	stw	r3,16(r6)
 80093f0:	003fdd06 	br	8009368 <_fpadd_parts+0x14c>
 80093f4:	20ffef1e 	bne	r4,r3,80093b4 <_fpadd_parts+0x198>
 80093f8:	31000015 	stw	r4,0(r6)
 80093fc:	10c00117 	ldw	r3,4(r2)
 8009400:	30c00115 	stw	r3,4(r6)
 8009404:	10c00217 	ldw	r3,8(r2)
 8009408:	11000117 	ldw	r4,4(r2)
 800940c:	29400117 	ldw	r5,4(r5)
 8009410:	30c00215 	stw	r3,8(r6)
 8009414:	10c00317 	ldw	r3,12(r2)
 8009418:	2908703a 	and	r4,r5,r4
 800941c:	30c00315 	stw	r3,12(r6)
 8009420:	10c00417 	ldw	r3,16(r2)
 8009424:	31000115 	stw	r4,4(r6)
 8009428:	3005883a 	mov	r2,r6
 800942c:	30c00415 	stw	r3,16(r6)
 8009430:	f800283a 	ret
 8009434:	580f883a 	mov	r7,r11
 8009438:	0019883a 	mov	r12,zero
 800943c:	001b883a 	mov	r13,zero
 8009440:	003f9f06 	br	80092c0 <_fpadd_parts+0xa4>
 8009444:	0115c83a 	sub	r10,zero,r4
 8009448:	00c00fc4 	movi	r3,63
 800944c:	1abfda16 	blt	r3,r10,80093b8 <_fpadd_parts+0x19c>
 8009450:	003f8906 	br	8009278 <_fpadd_parts+0x5c>
 8009454:	627fb52e 	bgeu	r12,r9,800932c <_fpadd_parts+0x110>
 8009458:	003fc006 	br	800935c <_fpadd_parts+0x140>
 800945c:	6205c83a 	sub	r2,r12,r8
 8009460:	6099803a 	cmpltu	r12,r12,r2
 8009464:	6a47c83a 	sub	r3,r13,r9
 8009468:	1b07c83a 	sub	r3,r3,r12
 800946c:	183f9d0e 	bge	r3,zero,80092e4 <_fpadd_parts+0xc8>
 8009470:	0085c83a 	sub	r2,zero,r2
 8009474:	1008c03a 	cmpne	r4,r2,zero
 8009478:	00c7c83a 	sub	r3,zero,r3
 800947c:	1907c83a 	sub	r3,r3,r4
 8009480:	01000044 	movi	r4,1
 8009484:	31000115 	stw	r4,4(r6)
 8009488:	31c00215 	stw	r7,8(r6)
 800948c:	30800315 	stw	r2,12(r6)
 8009490:	30c00415 	stw	r3,16(r6)
 8009494:	003f9706 	br	80092f4 <_fpadd_parts+0xd8>
 8009498:	203f8926 	beq	r4,zero,80092c0 <_fpadd_parts+0xa4>
 800949c:	50fff804 	addi	r3,r10,-32
 80094a0:	3a8f883a 	add	r7,r7,r10
 80094a4:	18002316 	blt	r3,zero,8009534 <_fpadd_parts+0x318>
 80094a8:	68d6d83a 	srl	r11,r13,r3
 80094ac:	001d883a 	mov	r14,zero
 80094b0:	18001c16 	blt	r3,zero,8009524 <_fpadd_parts+0x308>
 80094b4:	01000044 	movi	r4,1
 80094b8:	20c6983a 	sll	r3,r4,r3
 80094bc:	0015883a 	mov	r10,zero
 80094c0:	513fffc4 	addi	r4,r10,-1
 80094c4:	2295403a 	cmpgeu	r10,r4,r10
 80094c8:	1a87c83a 	sub	r3,r3,r10
 80094cc:	1b5a703a 	and	r13,r3,r13
 80094d0:	2318703a 	and	r12,r4,r12
 80094d4:	6358b03a 	or	r12,r12,r13
 80094d8:	6018c03a 	cmpne	r12,r12,zero
 80094dc:	62d8b03a 	or	r12,r12,r11
 80094e0:	701b883a 	mov	r13,r14
 80094e4:	003f7606 	br	80092c0 <_fpadd_parts+0xa4>
 80094e8:	4808907a 	slli	r4,r9,1
 80094ec:	02c007c4 	movi	r11,31
 80094f0:	5a97c83a 	sub	r11,r11,r10
 80094f4:	22c8983a 	sll	r4,r4,r11
 80094f8:	4296d83a 	srl	r11,r8,r10
 80094fc:	4a9cd83a 	srl	r14,r9,r10
 8009500:	22d6b03a 	or	r11,r4,r11
 8009504:	003f6106 	br	800928c <_fpadd_parts+0x70>
 8009508:	00c00044 	movi	r3,1
 800950c:	1a94983a 	sll	r10,r3,r10
 8009510:	0007883a 	mov	r3,zero
 8009514:	003f6106 	br	800929c <_fpadd_parts+0x80>
 8009518:	013fff84 	movi	r4,-2
 800951c:	21ff7c2e 	bgeu	r4,r7,8009310 <_fpadd_parts+0xf4>
 8009520:	003f9106 	br	8009368 <_fpadd_parts+0x14c>
 8009524:	00c00044 	movi	r3,1
 8009528:	1a94983a 	sll	r10,r3,r10
 800952c:	0007883a 	mov	r3,zero
 8009530:	003fe306 	br	80094c0 <_fpadd_parts+0x2a4>
 8009534:	6816907a 	slli	r11,r13,1
 8009538:	010007c4 	movi	r4,31
 800953c:	2289c83a 	sub	r4,r4,r10
 8009540:	5908983a 	sll	r4,r11,r4
 8009544:	6296d83a 	srl	r11,r12,r10
 8009548:	6a9cd83a 	srl	r14,r13,r10
 800954c:	22d6b03a 	or	r11,r4,r11
 8009550:	003fd706 	br	80094b0 <_fpadd_parts+0x294>
 8009554:	193f971e 	bne	r3,r4,80093b4 <_fpadd_parts+0x198>
 8009558:	11000117 	ldw	r4,4(r2)
 800955c:	28c00117 	ldw	r3,4(r5)
 8009560:	20ff9426 	beq	r4,r3,80093b4 <_fpadd_parts+0x198>
 8009564:	00820074 	movhi	r2,2049
 8009568:	10b54004 	addi	r2,r2,-11008
 800956c:	f800283a 	ret

08009570 <__adddf3>:
 8009570:	deffec04 	addi	sp,sp,-80
 8009574:	d9001115 	stw	r4,68(sp)
 8009578:	d9401215 	stw	r5,72(sp)
 800957c:	d9001104 	addi	r4,sp,68
 8009580:	d9400a04 	addi	r5,sp,40
 8009584:	dfc01315 	stw	ra,76(sp)
 8009588:	d9c01015 	stw	r7,64(sp)
 800958c:	d9800f15 	stw	r6,60(sp)
 8009590:	800a33c0 	call	800a33c <__unpack_d>
 8009594:	d9000f04 	addi	r4,sp,60
 8009598:	d9400504 	addi	r5,sp,20
 800959c:	800a33c0 	call	800a33c <__unpack_d>
 80095a0:	d9000a04 	addi	r4,sp,40
 80095a4:	d9400504 	addi	r5,sp,20
 80095a8:	d80d883a 	mov	r6,sp
 80095ac:	800921c0 	call	800921c <_fpadd_parts>
 80095b0:	1009883a 	mov	r4,r2
 80095b4:	800a1180 	call	800a118 <__pack_d>
 80095b8:	dfc01317 	ldw	ra,76(sp)
 80095bc:	dec01404 	addi	sp,sp,80
 80095c0:	f800283a 	ret

080095c4 <__subdf3>:
 80095c4:	deffec04 	addi	sp,sp,-80
 80095c8:	d9001115 	stw	r4,68(sp)
 80095cc:	d9401215 	stw	r5,72(sp)
 80095d0:	d9001104 	addi	r4,sp,68
 80095d4:	d9400a04 	addi	r5,sp,40
 80095d8:	dfc01315 	stw	ra,76(sp)
 80095dc:	d9c01015 	stw	r7,64(sp)
 80095e0:	d9800f15 	stw	r6,60(sp)
 80095e4:	800a33c0 	call	800a33c <__unpack_d>
 80095e8:	d9000f04 	addi	r4,sp,60
 80095ec:	d9400504 	addi	r5,sp,20
 80095f0:	800a33c0 	call	800a33c <__unpack_d>
 80095f4:	d8800617 	ldw	r2,24(sp)
 80095f8:	d9000a04 	addi	r4,sp,40
 80095fc:	d9400504 	addi	r5,sp,20
 8009600:	d80d883a 	mov	r6,sp
 8009604:	1080005c 	xori	r2,r2,1
 8009608:	d8800615 	stw	r2,24(sp)
 800960c:	800921c0 	call	800921c <_fpadd_parts>
 8009610:	1009883a 	mov	r4,r2
 8009614:	800a1180 	call	800a118 <__pack_d>
 8009618:	dfc01317 	ldw	ra,76(sp)
 800961c:	dec01404 	addi	sp,sp,80
 8009620:	f800283a 	ret

08009624 <__muldf3>:
 8009624:	deffe404 	addi	sp,sp,-112
 8009628:	d9001115 	stw	r4,68(sp)
 800962c:	d9401215 	stw	r5,72(sp)
 8009630:	d9001104 	addi	r4,sp,68
 8009634:	d9400a04 	addi	r5,sp,40
 8009638:	dfc01b15 	stw	ra,108(sp)
 800963c:	d9800f15 	stw	r6,60(sp)
 8009640:	d9c01015 	stw	r7,64(sp)
 8009644:	ddc01a15 	stw	r23,104(sp)
 8009648:	dd801915 	stw	r22,100(sp)
 800964c:	dd401815 	stw	r21,96(sp)
 8009650:	dd001715 	stw	r20,92(sp)
 8009654:	dcc01615 	stw	r19,88(sp)
 8009658:	dc801515 	stw	r18,84(sp)
 800965c:	dc401415 	stw	r17,80(sp)
 8009660:	dc001315 	stw	r16,76(sp)
 8009664:	800a33c0 	call	800a33c <__unpack_d>
 8009668:	d9000f04 	addi	r4,sp,60
 800966c:	d9400504 	addi	r5,sp,20
 8009670:	800a33c0 	call	800a33c <__unpack_d>
 8009674:	d8c00a17 	ldw	r3,40(sp)
 8009678:	00800044 	movi	r2,1
 800967c:	10c01136 	bltu	r2,r3,80096c4 <__muldf3+0xa0>
 8009680:	d8c00b17 	ldw	r3,44(sp)
 8009684:	d8800617 	ldw	r2,24(sp)
 8009688:	d9000a04 	addi	r4,sp,40
 800968c:	1884c03a 	cmpne	r2,r3,r2
 8009690:	d8800b15 	stw	r2,44(sp)
 8009694:	800a1180 	call	800a118 <__pack_d>
 8009698:	dfc01b17 	ldw	ra,108(sp)
 800969c:	ddc01a17 	ldw	r23,104(sp)
 80096a0:	dd801917 	ldw	r22,100(sp)
 80096a4:	dd401817 	ldw	r21,96(sp)
 80096a8:	dd001717 	ldw	r20,92(sp)
 80096ac:	dcc01617 	ldw	r19,88(sp)
 80096b0:	dc801517 	ldw	r18,84(sp)
 80096b4:	dc401417 	ldw	r17,80(sp)
 80096b8:	dc001317 	ldw	r16,76(sp)
 80096bc:	dec01c04 	addi	sp,sp,112
 80096c0:	f800283a 	ret
 80096c4:	d9000517 	ldw	r4,20(sp)
 80096c8:	11000636 	bltu	r2,r4,80096e4 <__muldf3+0xc0>
 80096cc:	d8800617 	ldw	r2,24(sp)
 80096d0:	d8c00b17 	ldw	r3,44(sp)
 80096d4:	d9000504 	addi	r4,sp,20
 80096d8:	1884c03a 	cmpne	r2,r3,r2
 80096dc:	d8800615 	stw	r2,24(sp)
 80096e0:	003fec06 	br	8009694 <__muldf3+0x70>
 80096e4:	00800104 	movi	r2,4
 80096e8:	1880051e 	bne	r3,r2,8009700 <__muldf3+0xdc>
 80096ec:	00800084 	movi	r2,2
 80096f0:	20bfe31e 	bne	r4,r2,8009680 <__muldf3+0x5c>
 80096f4:	01020074 	movhi	r4,2049
 80096f8:	21354004 	addi	r4,r4,-11008
 80096fc:	003fe506 	br	8009694 <__muldf3+0x70>
 8009700:	2080031e 	bne	r4,r2,8009710 <__muldf3+0xec>
 8009704:	00800084 	movi	r2,2
 8009708:	18bffa26 	beq	r3,r2,80096f4 <__muldf3+0xd0>
 800970c:	003fef06 	br	80096cc <__muldf3+0xa8>
 8009710:	00800084 	movi	r2,2
 8009714:	18bfda26 	beq	r3,r2,8009680 <__muldf3+0x5c>
 8009718:	20bfec26 	beq	r4,r2,80096cc <__muldf3+0xa8>
 800971c:	dc000d17 	ldw	r16,52(sp)
 8009720:	dd000817 	ldw	r20,32(sp)
 8009724:	dc800917 	ldw	r18,36(sp)
 8009728:	8009883a 	mov	r4,r16
 800972c:	000b883a 	mov	r5,zero
 8009730:	a00d883a 	mov	r6,r20
 8009734:	000f883a 	mov	r7,zero
 8009738:	8009f5c0 	call	8009f5c <__muldi3>
 800973c:	dc400e17 	ldw	r17,56(sp)
 8009740:	9009883a 	mov	r4,r18
 8009744:	800d883a 	mov	r6,r16
 8009748:	000b883a 	mov	r5,zero
 800974c:	000f883a 	mov	r7,zero
 8009750:	102f883a 	mov	r23,r2
 8009754:	1827883a 	mov	r19,r3
 8009758:	8009f5c0 	call	8009f5c <__muldi3>
 800975c:	900d883a 	mov	r6,r18
 8009760:	8809883a 	mov	r4,r17
 8009764:	000b883a 	mov	r5,zero
 8009768:	000f883a 	mov	r7,zero
 800976c:	102b883a 	mov	r21,r2
 8009770:	1821883a 	mov	r16,r3
 8009774:	8009f5c0 	call	8009f5c <__muldi3>
 8009778:	8809883a 	mov	r4,r17
 800977c:	000b883a 	mov	r5,zero
 8009780:	a00d883a 	mov	r6,r20
 8009784:	000f883a 	mov	r7,zero
 8009788:	102d883a 	mov	r22,r2
 800978c:	1825883a 	mov	r18,r3
 8009790:	8009f5c0 	call	8009f5c <__muldi3>
 8009794:	154b883a 	add	r5,r2,r21
 8009798:	2889803a 	cmpltu	r4,r5,r2
 800979c:	1c07883a 	add	r3,r3,r16
 80097a0:	20c9883a 	add	r4,r4,r3
 80097a4:	24004b36 	bltu	r4,r16,80098d4 <__muldf3+0x2b0>
 80097a8:	8100011e 	bne	r16,r4,80097b0 <__muldf3+0x18c>
 80097ac:	2d404936 	bltu	r5,r21,80098d4 <__muldf3+0x2b0>
 80097b0:	0011883a 	mov	r8,zero
 80097b4:	0007883a 	mov	r3,zero
 80097b8:	2ccb883a 	add	r5,r5,r19
 80097bc:	b80d883a 	mov	r6,r23
 80097c0:	2cc0012e 	bgeu	r5,r19,80097c8 <__muldf3+0x1a4>
 80097c4:	02000044 	movi	r8,1
 80097c8:	258f883a 	add	r7,r4,r22
 80097cc:	3909803a 	cmpltu	r4,r7,r4
 80097d0:	da400c17 	ldw	r9,48(sp)
 80097d4:	2489883a 	add	r4,r4,r18
 80097d8:	d8800717 	ldw	r2,28(sp)
 80097dc:	20c9883a 	add	r4,r4,r3
 80097e0:	da800b17 	ldw	r10,44(sp)
 80097e4:	d8c00617 	ldw	r3,24(sp)
 80097e8:	3a11883a 	add	r8,r7,r8
 80097ec:	4885883a 	add	r2,r9,r2
 80097f0:	50c6c03a 	cmpne	r3,r10,r3
 80097f4:	41cf803a 	cmpltu	r7,r8,r7
 80097f8:	12400104 	addi	r9,r2,4
 80097fc:	d8c00115 	stw	r3,4(sp)
 8009800:	3909883a 	add	r4,r7,r4
 8009804:	da400215 	stw	r9,8(sp)
 8009808:	03480034 	movhi	r13,8192
 800980c:	6b7fffc4 	addi	r13,r13,-1
 8009810:	4007883a 	mov	r3,r8
 8009814:	6900102e 	bgeu	r13,r4,8009858 <__muldf3+0x234>
 8009818:	10800144 	addi	r2,r2,5
 800981c:	180ed07a 	srli	r7,r3,1
 8009820:	18c0004c 	andi	r3,r3,1
 8009824:	201097fa 	slli	r8,r4,31
 8009828:	281697fa 	slli	r11,r5,31
 800982c:	2008d07a 	srli	r4,r4,1
 8009830:	3014d07a 	srli	r10,r6,1
 8009834:	2812d07a 	srli	r9,r5,1
 8009838:	1019883a 	mov	r12,r2
 800983c:	18000226 	beq	r3,zero,8009848 <__muldf3+0x224>
 8009840:	5a8cb03a 	or	r6,r11,r10
 8009844:	49600034 	orhi	r5,r9,32768
 8009848:	41c6b03a 	or	r3,r8,r7
 800984c:	10800044 	addi	r2,r2,1
 8009850:	693ff236 	bltu	r13,r4,800981c <__muldf3+0x1f8>
 8009854:	db000215 	stw	r12,8(sp)
 8009858:	03440034 	movhi	r13,4096
 800985c:	6b7fffc4 	addi	r13,r13,-1
 8009860:	69001336 	bltu	r13,r4,80098b0 <__muldf3+0x28c>
 8009864:	d8800217 	ldw	r2,8(sp)
 8009868:	10bfffc4 	addi	r2,r2,-1
 800986c:	18d3883a 	add	r9,r3,r3
 8009870:	48c7803a 	cmpltu	r3,r9,r3
 8009874:	2109883a 	add	r4,r4,r4
 8009878:	190f883a 	add	r7,r3,r4
 800987c:	3191883a 	add	r8,r6,r6
 8009880:	4197803a 	cmpltu	r11,r8,r6
 8009884:	2955883a 	add	r10,r5,r5
 8009888:	1019883a 	mov	r12,r2
 800988c:	4807883a 	mov	r3,r9
 8009890:	3809883a 	mov	r4,r7
 8009894:	2800010e 	bge	r5,zero,800989c <__muldf3+0x278>
 8009898:	48c00054 	ori	r3,r9,1
 800989c:	400d883a 	mov	r6,r8
 80098a0:	5a8b883a 	add	r5,r11,r10
 80098a4:	10bfffc4 	addi	r2,r2,-1
 80098a8:	69fff02e 	bgeu	r13,r7,800986c <__muldf3+0x248>
 80098ac:	db000215 	stw	r12,8(sp)
 80098b0:	18803fcc 	andi	r2,r3,255
 80098b4:	01c02004 	movi	r7,128
 80098b8:	11c00926 	beq	r2,r7,80098e0 <__muldf3+0x2bc>
 80098bc:	008000c4 	movi	r2,3
 80098c0:	d9000415 	stw	r4,16(sp)
 80098c4:	d8c00315 	stw	r3,12(sp)
 80098c8:	d8800015 	stw	r2,0(sp)
 80098cc:	d809883a 	mov	r4,sp
 80098d0:	003f7006 	br	8009694 <__muldf3+0x70>
 80098d4:	0011883a 	mov	r8,zero
 80098d8:	00c00044 	movi	r3,1
 80098dc:	003fb606 	br	80097b8 <__muldf3+0x194>
 80098e0:	19c0400c 	andi	r7,r3,256
 80098e4:	383ff51e 	bne	r7,zero,80098bc <__muldf3+0x298>
 80098e8:	314ab03a 	or	r5,r6,r5
 80098ec:	283ff326 	beq	r5,zero,80098bc <__muldf3+0x298>
 80098f0:	1885883a 	add	r2,r3,r2
 80098f4:	10cb803a 	cmpltu	r5,r2,r3
 80098f8:	00ffc004 	movi	r3,-256
 80098fc:	10c6703a 	and	r3,r2,r3
 8009900:	2909883a 	add	r4,r5,r4
 8009904:	003fed06 	br	80098bc <__muldf3+0x298>

08009908 <__divdf3>:
 8009908:	defff104 	addi	sp,sp,-60
 800990c:	d9000c15 	stw	r4,48(sp)
 8009910:	d9400d15 	stw	r5,52(sp)
 8009914:	d9000c04 	addi	r4,sp,48
 8009918:	d9400504 	addi	r5,sp,20
 800991c:	dfc00e15 	stw	ra,56(sp)
 8009920:	d9800a15 	stw	r6,40(sp)
 8009924:	d9c00b15 	stw	r7,44(sp)
 8009928:	800a33c0 	call	800a33c <__unpack_d>
 800992c:	d9000a04 	addi	r4,sp,40
 8009930:	d80b883a 	mov	r5,sp
 8009934:	800a33c0 	call	800a33c <__unpack_d>
 8009938:	d8c00517 	ldw	r3,20(sp)
 800993c:	00800044 	movi	r2,1
 8009940:	10c00536 	bltu	r2,r3,8009958 <__divdf3+0x50>
 8009944:	d9000504 	addi	r4,sp,20
 8009948:	800a1180 	call	800a118 <__pack_d>
 800994c:	dfc00e17 	ldw	ra,56(sp)
 8009950:	dec00f04 	addi	sp,sp,60
 8009954:	f800283a 	ret
 8009958:	d9000017 	ldw	r4,0(sp)
 800995c:	11000536 	bltu	r2,r4,8009974 <__divdf3+0x6c>
 8009960:	d809883a 	mov	r4,sp
 8009964:	800a1180 	call	800a118 <__pack_d>
 8009968:	dfc00e17 	ldw	ra,56(sp)
 800996c:	dec00f04 	addi	sp,sp,60
 8009970:	f800283a 	ret
 8009974:	d9800617 	ldw	r6,24(sp)
 8009978:	d9400117 	ldw	r5,4(sp)
 800997c:	00800104 	movi	r2,4
 8009980:	314af03a 	xor	r5,r6,r5
 8009984:	d9400615 	stw	r5,24(sp)
 8009988:	18800226 	beq	r3,r2,8009994 <__divdf3+0x8c>
 800998c:	01400084 	movi	r5,2
 8009990:	1940041e 	bne	r3,r5,80099a4 <__divdf3+0x9c>
 8009994:	193feb1e 	bne	r3,r4,8009944 <__divdf3+0x3c>
 8009998:	01020074 	movhi	r4,2049
 800999c:	21354004 	addi	r4,r4,-11008
 80099a0:	003fe906 	br	8009948 <__divdf3+0x40>
 80099a4:	20803326 	beq	r4,r2,8009a74 <__divdf3+0x16c>
 80099a8:	21403726 	beq	r4,r5,8009a88 <__divdf3+0x180>
 80099ac:	d8800217 	ldw	r2,8(sp)
 80099b0:	d9000717 	ldw	r4,28(sp)
 80099b4:	d8c00917 	ldw	r3,36(sp)
 80099b8:	da000417 	ldw	r8,16(sp)
 80099bc:	2089c83a 	sub	r4,r4,r2
 80099c0:	d9000715 	stw	r4,28(sp)
 80099c4:	d8800817 	ldw	r2,32(sp)
 80099c8:	dbc00317 	ldw	r15,12(sp)
 80099cc:	1a000236 	bltu	r3,r8,80099d8 <__divdf3+0xd0>
 80099d0:	40c0081e 	bne	r8,r3,80099f4 <__divdf3+0xec>
 80099d4:	13c0072e 	bgeu	r2,r15,80099f4 <__divdf3+0xec>
 80099d8:	108b883a 	add	r5,r2,r2
 80099dc:	288d803a 	cmpltu	r6,r5,r2
 80099e0:	18c7883a 	add	r3,r3,r3
 80099e4:	213fffc4 	addi	r4,r4,-1
 80099e8:	2805883a 	mov	r2,r5
 80099ec:	30c7883a 	add	r3,r6,r3
 80099f0:	d9000715 	stw	r4,28(sp)
 80099f4:	01400f44 	movi	r5,61
 80099f8:	000f883a 	mov	r7,zero
 80099fc:	01040034 	movhi	r4,4096
 8009a00:	0019883a 	mov	r12,zero
 8009a04:	001b883a 	mov	r13,zero
 8009a08:	201697fa 	slli	r11,r4,31
 8009a0c:	3814d07a 	srli	r10,r7,1
 8009a10:	297fffc4 	addi	r5,r5,-1
 8009a14:	1a000936 	bltu	r3,r8,8009a3c <__divdf3+0x134>
 8009a18:	13cdc83a 	sub	r6,r2,r15
 8009a1c:	1193803a 	cmpltu	r9,r2,r6
 8009a20:	1a1dc83a 	sub	r14,r3,r8
 8009a24:	40c0011e 	bne	r8,r3,8009a2c <__divdf3+0x124>
 8009a28:	13c00436 	bltu	r2,r15,8009a3c <__divdf3+0x134>
 8009a2c:	3005883a 	mov	r2,r6
 8009a30:	7247c83a 	sub	r3,r14,r9
 8009a34:	61d8b03a 	or	r12,r12,r7
 8009a38:	691ab03a 	or	r13,r13,r4
 8009a3c:	108d883a 	add	r6,r2,r2
 8009a40:	3093803a 	cmpltu	r9,r6,r2
 8009a44:	18c7883a 	add	r3,r3,r3
 8009a48:	5a8eb03a 	or	r7,r11,r10
 8009a4c:	2008d07a 	srli	r4,r4,1
 8009a50:	3005883a 	mov	r2,r6
 8009a54:	48c7883a 	add	r3,r9,r3
 8009a58:	283feb1e 	bne	r5,zero,8009a08 <__divdf3+0x100>
 8009a5c:	61003fcc 	andi	r4,r12,255
 8009a60:	01402004 	movi	r5,128
 8009a64:	21400b26 	beq	r4,r5,8009a94 <__divdf3+0x18c>
 8009a68:	db000815 	stw	r12,32(sp)
 8009a6c:	db400915 	stw	r13,36(sp)
 8009a70:	003fb406 	br	8009944 <__divdf3+0x3c>
 8009a74:	d8000815 	stw	zero,32(sp)
 8009a78:	d8000915 	stw	zero,36(sp)
 8009a7c:	d8000715 	stw	zero,28(sp)
 8009a80:	d9000504 	addi	r4,sp,20
 8009a84:	003fb006 	br	8009948 <__divdf3+0x40>
 8009a88:	d8800515 	stw	r2,20(sp)
 8009a8c:	d9000504 	addi	r4,sp,20
 8009a90:	003fad06 	br	8009948 <__divdf3+0x40>
 8009a94:	6140400c 	andi	r5,r12,256
 8009a98:	283ff31e 	bne	r5,zero,8009a68 <__divdf3+0x160>
 8009a9c:	30c4b03a 	or	r2,r6,r3
 8009aa0:	103ff126 	beq	r2,zero,8009a68 <__divdf3+0x160>
 8009aa4:	6109883a 	add	r4,r12,r4
 8009aa8:	2305803a 	cmpltu	r2,r4,r12
 8009aac:	033fc004 	movi	r12,-256
 8009ab0:	2318703a 	and	r12,r4,r12
 8009ab4:	135b883a 	add	r13,r2,r13
 8009ab8:	003feb06 	br	8009a68 <__divdf3+0x160>

08009abc <__eqdf2>:
 8009abc:	defff104 	addi	sp,sp,-60
 8009ac0:	d9000c15 	stw	r4,48(sp)
 8009ac4:	d9400d15 	stw	r5,52(sp)
 8009ac8:	d9000c04 	addi	r4,sp,48
 8009acc:	d9400504 	addi	r5,sp,20
 8009ad0:	dfc00e15 	stw	ra,56(sp)
 8009ad4:	d9800a15 	stw	r6,40(sp)
 8009ad8:	d9c00b15 	stw	r7,44(sp)
 8009adc:	800a33c0 	call	800a33c <__unpack_d>
 8009ae0:	d9000a04 	addi	r4,sp,40
 8009ae4:	d80b883a 	mov	r5,sp
 8009ae8:	800a33c0 	call	800a33c <__unpack_d>
 8009aec:	d8c00517 	ldw	r3,20(sp)
 8009af0:	00800044 	movi	r2,1
 8009af4:	10c0052e 	bgeu	r2,r3,8009b0c <__eqdf2+0x50>
 8009af8:	d8c00017 	ldw	r3,0(sp)
 8009afc:	10c0032e 	bgeu	r2,r3,8009b0c <__eqdf2+0x50>
 8009b00:	d9000504 	addi	r4,sp,20
 8009b04:	d80b883a 	mov	r5,sp
 8009b08:	800a4400 	call	800a440 <__fpcmp_parts_d>
 8009b0c:	dfc00e17 	ldw	ra,56(sp)
 8009b10:	dec00f04 	addi	sp,sp,60
 8009b14:	f800283a 	ret

08009b18 <__nedf2>:
 8009b18:	defff104 	addi	sp,sp,-60
 8009b1c:	d9000c15 	stw	r4,48(sp)
 8009b20:	d9400d15 	stw	r5,52(sp)
 8009b24:	d9000c04 	addi	r4,sp,48
 8009b28:	d9400504 	addi	r5,sp,20
 8009b2c:	dfc00e15 	stw	ra,56(sp)
 8009b30:	d9800a15 	stw	r6,40(sp)
 8009b34:	d9c00b15 	stw	r7,44(sp)
 8009b38:	800a33c0 	call	800a33c <__unpack_d>
 8009b3c:	d9000a04 	addi	r4,sp,40
 8009b40:	d80b883a 	mov	r5,sp
 8009b44:	800a33c0 	call	800a33c <__unpack_d>
 8009b48:	d8c00517 	ldw	r3,20(sp)
 8009b4c:	00800044 	movi	r2,1
 8009b50:	10c0052e 	bgeu	r2,r3,8009b68 <__nedf2+0x50>
 8009b54:	d8c00017 	ldw	r3,0(sp)
 8009b58:	10c0032e 	bgeu	r2,r3,8009b68 <__nedf2+0x50>
 8009b5c:	d9000504 	addi	r4,sp,20
 8009b60:	d80b883a 	mov	r5,sp
 8009b64:	800a4400 	call	800a440 <__fpcmp_parts_d>
 8009b68:	dfc00e17 	ldw	ra,56(sp)
 8009b6c:	dec00f04 	addi	sp,sp,60
 8009b70:	f800283a 	ret

08009b74 <__gtdf2>:
 8009b74:	defff104 	addi	sp,sp,-60
 8009b78:	d9000c15 	stw	r4,48(sp)
 8009b7c:	d9400d15 	stw	r5,52(sp)
 8009b80:	d9000c04 	addi	r4,sp,48
 8009b84:	d9400504 	addi	r5,sp,20
 8009b88:	dfc00e15 	stw	ra,56(sp)
 8009b8c:	d9800a15 	stw	r6,40(sp)
 8009b90:	d9c00b15 	stw	r7,44(sp)
 8009b94:	800a33c0 	call	800a33c <__unpack_d>
 8009b98:	d9000a04 	addi	r4,sp,40
 8009b9c:	d80b883a 	mov	r5,sp
 8009ba0:	800a33c0 	call	800a33c <__unpack_d>
 8009ba4:	d8c00517 	ldw	r3,20(sp)
 8009ba8:	00800044 	movi	r2,1
 8009bac:	10c0082e 	bgeu	r2,r3,8009bd0 <__gtdf2+0x5c>
 8009bb0:	d8c00017 	ldw	r3,0(sp)
 8009bb4:	10c0062e 	bgeu	r2,r3,8009bd0 <__gtdf2+0x5c>
 8009bb8:	d9000504 	addi	r4,sp,20
 8009bbc:	d80b883a 	mov	r5,sp
 8009bc0:	800a4400 	call	800a440 <__fpcmp_parts_d>
 8009bc4:	dfc00e17 	ldw	ra,56(sp)
 8009bc8:	dec00f04 	addi	sp,sp,60
 8009bcc:	f800283a 	ret
 8009bd0:	00bfffc4 	movi	r2,-1
 8009bd4:	003ffb06 	br	8009bc4 <__gtdf2+0x50>

08009bd8 <__gedf2>:
 8009bd8:	defff104 	addi	sp,sp,-60
 8009bdc:	d9000c15 	stw	r4,48(sp)
 8009be0:	d9400d15 	stw	r5,52(sp)
 8009be4:	d9000c04 	addi	r4,sp,48
 8009be8:	d9400504 	addi	r5,sp,20
 8009bec:	dfc00e15 	stw	ra,56(sp)
 8009bf0:	d9800a15 	stw	r6,40(sp)
 8009bf4:	d9c00b15 	stw	r7,44(sp)
 8009bf8:	800a33c0 	call	800a33c <__unpack_d>
 8009bfc:	d9000a04 	addi	r4,sp,40
 8009c00:	d80b883a 	mov	r5,sp
 8009c04:	800a33c0 	call	800a33c <__unpack_d>
 8009c08:	d8c00517 	ldw	r3,20(sp)
 8009c0c:	00800044 	movi	r2,1
 8009c10:	10c0082e 	bgeu	r2,r3,8009c34 <__gedf2+0x5c>
 8009c14:	d8c00017 	ldw	r3,0(sp)
 8009c18:	10c0062e 	bgeu	r2,r3,8009c34 <__gedf2+0x5c>
 8009c1c:	d9000504 	addi	r4,sp,20
 8009c20:	d80b883a 	mov	r5,sp
 8009c24:	800a4400 	call	800a440 <__fpcmp_parts_d>
 8009c28:	dfc00e17 	ldw	ra,56(sp)
 8009c2c:	dec00f04 	addi	sp,sp,60
 8009c30:	f800283a 	ret
 8009c34:	00bfffc4 	movi	r2,-1
 8009c38:	003ffb06 	br	8009c28 <__gedf2+0x50>

08009c3c <__ltdf2>:
 8009c3c:	defff104 	addi	sp,sp,-60
 8009c40:	d9000c15 	stw	r4,48(sp)
 8009c44:	d9400d15 	stw	r5,52(sp)
 8009c48:	d9000c04 	addi	r4,sp,48
 8009c4c:	d9400504 	addi	r5,sp,20
 8009c50:	dfc00e15 	stw	ra,56(sp)
 8009c54:	d9800a15 	stw	r6,40(sp)
 8009c58:	d9c00b15 	stw	r7,44(sp)
 8009c5c:	800a33c0 	call	800a33c <__unpack_d>
 8009c60:	d9000a04 	addi	r4,sp,40
 8009c64:	d80b883a 	mov	r5,sp
 8009c68:	800a33c0 	call	800a33c <__unpack_d>
 8009c6c:	d8c00517 	ldw	r3,20(sp)
 8009c70:	00800044 	movi	r2,1
 8009c74:	10c0052e 	bgeu	r2,r3,8009c8c <__ltdf2+0x50>
 8009c78:	d8c00017 	ldw	r3,0(sp)
 8009c7c:	10c0032e 	bgeu	r2,r3,8009c8c <__ltdf2+0x50>
 8009c80:	d9000504 	addi	r4,sp,20
 8009c84:	d80b883a 	mov	r5,sp
 8009c88:	800a4400 	call	800a440 <__fpcmp_parts_d>
 8009c8c:	dfc00e17 	ldw	ra,56(sp)
 8009c90:	dec00f04 	addi	sp,sp,60
 8009c94:	f800283a 	ret

08009c98 <__floatsidf>:
 8009c98:	2004d7fa 	srli	r2,r4,31
 8009c9c:	defff904 	addi	sp,sp,-28
 8009ca0:	00c000c4 	movi	r3,3
 8009ca4:	dfc00615 	stw	ra,24(sp)
 8009ca8:	dc000515 	stw	r16,20(sp)
 8009cac:	d8c00015 	stw	r3,0(sp)
 8009cb0:	d8800115 	stw	r2,4(sp)
 8009cb4:	2000081e 	bne	r4,zero,8009cd8 <__floatsidf+0x40>
 8009cb8:	00800084 	movi	r2,2
 8009cbc:	d8800015 	stw	r2,0(sp)
 8009cc0:	d809883a 	mov	r4,sp
 8009cc4:	800a1180 	call	800a118 <__pack_d>
 8009cc8:	dfc00617 	ldw	ra,24(sp)
 8009ccc:	dc000517 	ldw	r16,20(sp)
 8009cd0:	dec00704 	addi	sp,sp,28
 8009cd4:	f800283a 	ret
 8009cd8:	00c00f04 	movi	r3,60
 8009cdc:	d8c00215 	stw	r3,8(sp)
 8009ce0:	10000f1e 	bne	r2,zero,8009d20 <__floatsidf+0x88>
 8009ce4:	2021883a 	mov	r16,r4
 8009ce8:	8009883a 	mov	r4,r16
 8009cec:	800a06c0 	call	800a06c <__clzsi2>
 8009cf0:	11000744 	addi	r4,r2,29
 8009cf4:	0100110e 	bge	zero,r4,8009d3c <__floatsidf+0xa4>
 8009cf8:	10ffff44 	addi	r3,r2,-3
 8009cfc:	18001216 	blt	r3,zero,8009d48 <__floatsidf+0xb0>
 8009d00:	80c6983a 	sll	r3,r16,r3
 8009d04:	0009883a 	mov	r4,zero
 8009d08:	014007c4 	movi	r5,31
 8009d0c:	2885c83a 	sub	r2,r5,r2
 8009d10:	d9000315 	stw	r4,12(sp)
 8009d14:	d8c00415 	stw	r3,16(sp)
 8009d18:	d8800215 	stw	r2,8(sp)
 8009d1c:	003fe806 	br	8009cc0 <__floatsidf+0x28>
 8009d20:	00a00034 	movhi	r2,32768
 8009d24:	20800e26 	beq	r4,r2,8009d60 <__floatsidf+0xc8>
 8009d28:	0121c83a 	sub	r16,zero,r4
 8009d2c:	8009883a 	mov	r4,r16
 8009d30:	800a06c0 	call	800a06c <__clzsi2>
 8009d34:	11000744 	addi	r4,r2,29
 8009d38:	013fef16 	blt	zero,r4,8009cf8 <__floatsidf+0x60>
 8009d3c:	dc000315 	stw	r16,12(sp)
 8009d40:	d8000415 	stw	zero,16(sp)
 8009d44:	003fde06 	br	8009cc0 <__floatsidf+0x28>
 8009d48:	800ad07a 	srli	r5,r16,1
 8009d4c:	00c007c4 	movi	r3,31
 8009d50:	1907c83a 	sub	r3,r3,r4
 8009d54:	28c6d83a 	srl	r3,r5,r3
 8009d58:	8108983a 	sll	r4,r16,r4
 8009d5c:	003fea06 	br	8009d08 <__floatsidf+0x70>
 8009d60:	0005883a 	mov	r2,zero
 8009d64:	00f07834 	movhi	r3,49632
 8009d68:	003fd706 	br	8009cc8 <__floatsidf+0x30>

08009d6c <__fixdfsi>:
 8009d6c:	defff804 	addi	sp,sp,-32
 8009d70:	d9000515 	stw	r4,20(sp)
 8009d74:	d9400615 	stw	r5,24(sp)
 8009d78:	d9000504 	addi	r4,sp,20
 8009d7c:	d80b883a 	mov	r5,sp
 8009d80:	dfc00715 	stw	ra,28(sp)
 8009d84:	800a33c0 	call	800a33c <__unpack_d>
 8009d88:	d8800017 	ldw	r2,0(sp)
 8009d8c:	00c00084 	movi	r3,2
 8009d90:	10c01c26 	beq	r2,r3,8009e04 <__fixdfsi+0x98>
 8009d94:	00c00044 	movi	r3,1
 8009d98:	18801a2e 	bgeu	r3,r2,8009e04 <__fixdfsi+0x98>
 8009d9c:	00c00104 	movi	r3,4
 8009da0:	10c01126 	beq	r2,r3,8009de8 <__fixdfsi+0x7c>
 8009da4:	d8800217 	ldw	r2,8(sp)
 8009da8:	10001616 	blt	r2,zero,8009e04 <__fixdfsi+0x98>
 8009dac:	00c00784 	movi	r3,30
 8009db0:	18800d16 	blt	r3,r2,8009de8 <__fixdfsi+0x7c>
 8009db4:	00c00f04 	movi	r3,60
 8009db8:	1885c83a 	sub	r2,r3,r2
 8009dbc:	10fff804 	addi	r3,r2,-32
 8009dc0:	d9400317 	ldw	r5,12(sp)
 8009dc4:	d9000417 	ldw	r4,16(sp)
 8009dc8:	18001616 	blt	r3,zero,8009e24 <__fixdfsi+0xb8>
 8009dcc:	20c4d83a 	srl	r2,r4,r3
 8009dd0:	d8c00117 	ldw	r3,4(sp)
 8009dd4:	18000126 	beq	r3,zero,8009ddc <__fixdfsi+0x70>
 8009dd8:	0085c83a 	sub	r2,zero,r2
 8009ddc:	dfc00717 	ldw	ra,28(sp)
 8009de0:	dec00804 	addi	sp,sp,32
 8009de4:	f800283a 	ret
 8009de8:	d8800117 	ldw	r2,4(sp)
 8009dec:	1000091e 	bne	r2,zero,8009e14 <__fixdfsi+0xa8>
 8009df0:	00a00034 	movhi	r2,32768
 8009df4:	10bfffc4 	addi	r2,r2,-1
 8009df8:	dfc00717 	ldw	ra,28(sp)
 8009dfc:	dec00804 	addi	sp,sp,32
 8009e00:	f800283a 	ret
 8009e04:	0005883a 	mov	r2,zero
 8009e08:	dfc00717 	ldw	ra,28(sp)
 8009e0c:	dec00804 	addi	sp,sp,32
 8009e10:	f800283a 	ret
 8009e14:	00a00034 	movhi	r2,32768
 8009e18:	dfc00717 	ldw	ra,28(sp)
 8009e1c:	dec00804 	addi	sp,sp,32
 8009e20:	f800283a 	ret
 8009e24:	2008907a 	slli	r4,r4,1
 8009e28:	018007c4 	movi	r6,31
 8009e2c:	308dc83a 	sub	r6,r6,r2
 8009e30:	2188983a 	sll	r4,r4,r6
 8009e34:	2884d83a 	srl	r2,r5,r2
 8009e38:	2084b03a 	or	r2,r4,r2
 8009e3c:	003fe406 	br	8009dd0 <__fixdfsi+0x64>

08009e40 <__floatunsidf>:
 8009e40:	defff904 	addi	sp,sp,-28
 8009e44:	dc000515 	stw	r16,20(sp)
 8009e48:	dfc00615 	stw	ra,24(sp)
 8009e4c:	d8000115 	stw	zero,4(sp)
 8009e50:	2021883a 	mov	r16,r4
 8009e54:	20001726 	beq	r4,zero,8009eb4 <__floatunsidf+0x74>
 8009e58:	008000c4 	movi	r2,3
 8009e5c:	d8800015 	stw	r2,0(sp)
 8009e60:	00800f04 	movi	r2,60
 8009e64:	d8800215 	stw	r2,8(sp)
 8009e68:	800a06c0 	call	800a06c <__clzsi2>
 8009e6c:	10c00744 	addi	r3,r2,29
 8009e70:	18001816 	blt	r3,zero,8009ed4 <__floatunsidf+0x94>
 8009e74:	18002d26 	beq	r3,zero,8009f2c <__floatunsidf+0xec>
 8009e78:	113fff44 	addi	r4,r2,-3
 8009e7c:	20002e16 	blt	r4,zero,8009f38 <__floatunsidf+0xf8>
 8009e80:	8108983a 	sll	r4,r16,r4
 8009e84:	0021883a 	mov	r16,zero
 8009e88:	014007c4 	movi	r5,31
 8009e8c:	2885c83a 	sub	r2,r5,r2
 8009e90:	dc000315 	stw	r16,12(sp)
 8009e94:	d9000415 	stw	r4,16(sp)
 8009e98:	d8800215 	stw	r2,8(sp)
 8009e9c:	d809883a 	mov	r4,sp
 8009ea0:	800a1180 	call	800a118 <__pack_d>
 8009ea4:	dfc00617 	ldw	ra,24(sp)
 8009ea8:	dc000517 	ldw	r16,20(sp)
 8009eac:	dec00704 	addi	sp,sp,28
 8009eb0:	f800283a 	ret
 8009eb4:	00800084 	movi	r2,2
 8009eb8:	d809883a 	mov	r4,sp
 8009ebc:	d8800015 	stw	r2,0(sp)
 8009ec0:	800a1180 	call	800a118 <__pack_d>
 8009ec4:	dfc00617 	ldw	ra,24(sp)
 8009ec8:	dc000517 	ldw	r16,20(sp)
 8009ecc:	dec00704 	addi	sp,sp,28
 8009ed0:	f800283a 	ret
 8009ed4:	00c7c83a 	sub	r3,zero,r3
 8009ed8:	193ff804 	addi	r4,r3,-32
 8009edc:	20001c16 	blt	r4,zero,8009f50 <__floatunsidf+0x110>
 8009ee0:	000b883a 	mov	r5,zero
 8009ee4:	2009d7fa 	srai	r4,r4,31
 8009ee8:	80c6d83a 	srl	r3,r16,r3
 8009eec:	297fffc4 	addi	r5,r5,-1
 8009ef0:	2c20703a 	and	r16,r5,r16
 8009ef4:	8020c03a 	cmpne	r16,r16,zero
 8009ef8:	1906703a 	and	r3,r3,r4
 8009efc:	010007c4 	movi	r4,31
 8009f00:	80c6b03a 	or	r3,r16,r3
 8009f04:	2085c83a 	sub	r2,r4,r2
 8009f08:	d809883a 	mov	r4,sp
 8009f0c:	d8c00315 	stw	r3,12(sp)
 8009f10:	d8000415 	stw	zero,16(sp)
 8009f14:	d8800215 	stw	r2,8(sp)
 8009f18:	800a1180 	call	800a118 <__pack_d>
 8009f1c:	dfc00617 	ldw	ra,24(sp)
 8009f20:	dc000517 	ldw	r16,20(sp)
 8009f24:	dec00704 	addi	sp,sp,28
 8009f28:	f800283a 	ret
 8009f2c:	dc000315 	stw	r16,12(sp)
 8009f30:	d8000415 	stw	zero,16(sp)
 8009f34:	003fd906 	br	8009e9c <__floatunsidf+0x5c>
 8009f38:	800ad07a 	srli	r5,r16,1
 8009f3c:	010007c4 	movi	r4,31
 8009f40:	20c9c83a 	sub	r4,r4,r3
 8009f44:	2908d83a 	srl	r4,r5,r4
 8009f48:	80e0983a 	sll	r16,r16,r3
 8009f4c:	003fce06 	br	8009e88 <__floatunsidf+0x48>
 8009f50:	01400044 	movi	r5,1
 8009f54:	28ca983a 	sll	r5,r5,r3
 8009f58:	003fe206 	br	8009ee4 <__floatunsidf+0xa4>

08009f5c <__muldi3>:
 8009f5c:	defff604 	addi	sp,sp,-40
 8009f60:	dd400515 	stw	r21,20(sp)
 8009f64:	dd000415 	stw	r20,16(sp)
 8009f68:	257fffcc 	andi	r21,r4,65535
 8009f6c:	353fffcc 	andi	r20,r6,65535
 8009f70:	dcc00315 	stw	r19,12(sp)
 8009f74:	3026d43a 	srli	r19,r6,16
 8009f78:	dd800615 	stw	r22,24(sp)
 8009f7c:	dc800215 	stw	r18,8(sp)
 8009f80:	dc400115 	stw	r17,4(sp)
 8009f84:	2024d43a 	srli	r18,r4,16
 8009f88:	2023883a 	mov	r17,r4
 8009f8c:	282d883a 	mov	r22,r5
 8009f90:	a009883a 	mov	r4,r20
 8009f94:	a80b883a 	mov	r5,r21
 8009f98:	dfc00915 	stw	ra,36(sp)
 8009f9c:	df000815 	stw	fp,32(sp)
 8009fa0:	ddc00715 	stw	r23,28(sp)
 8009fa4:	3839883a 	mov	fp,r7
 8009fa8:	dc000015 	stw	r16,0(sp)
 8009fac:	3021883a 	mov	r16,r6
 8009fb0:	8000df40 	call	8000df4 <__mulsi3>
 8009fb4:	a80b883a 	mov	r5,r21
 8009fb8:	9809883a 	mov	r4,r19
 8009fbc:	102f883a 	mov	r23,r2
 8009fc0:	8000df40 	call	8000df4 <__mulsi3>
 8009fc4:	a009883a 	mov	r4,r20
 8009fc8:	900b883a 	mov	r5,r18
 8009fcc:	102b883a 	mov	r21,r2
 8009fd0:	8000df40 	call	8000df4 <__mulsi3>
 8009fd4:	9809883a 	mov	r4,r19
 8009fd8:	900b883a 	mov	r5,r18
 8009fdc:	1029883a 	mov	r20,r2
 8009fe0:	8000df40 	call	8000df4 <__mulsi3>
 8009fe4:	1007883a 	mov	r3,r2
 8009fe8:	b804d43a 	srli	r2,r23,16
 8009fec:	a549883a 	add	r4,r20,r21
 8009ff0:	2089883a 	add	r4,r4,r2
 8009ff4:	2500022e 	bgeu	r4,r20,800a000 <__muldi3+0xa4>
 8009ff8:	00800074 	movhi	r2,1
 8009ffc:	1887883a 	add	r3,r3,r2
 800a000:	200cd43a 	srli	r6,r4,16
 800a004:	2004943a 	slli	r2,r4,16
 800a008:	e00b883a 	mov	r5,fp
 800a00c:	8809883a 	mov	r4,r17
 800a010:	bdffffcc 	andi	r23,r23,65535
 800a014:	19a3883a 	add	r17,r3,r6
 800a018:	15ef883a 	add	r23,r2,r23
 800a01c:	8000df40 	call	8000df4 <__mulsi3>
 800a020:	8009883a 	mov	r4,r16
 800a024:	b00b883a 	mov	r5,r22
 800a028:	1025883a 	mov	r18,r2
 800a02c:	8000df40 	call	8000df4 <__mulsi3>
 800a030:	9085883a 	add	r2,r18,r2
 800a034:	1447883a 	add	r3,r2,r17
 800a038:	b805883a 	mov	r2,r23
 800a03c:	dfc00917 	ldw	ra,36(sp)
 800a040:	df000817 	ldw	fp,32(sp)
 800a044:	ddc00717 	ldw	r23,28(sp)
 800a048:	dd800617 	ldw	r22,24(sp)
 800a04c:	dd400517 	ldw	r21,20(sp)
 800a050:	dd000417 	ldw	r20,16(sp)
 800a054:	dcc00317 	ldw	r19,12(sp)
 800a058:	dc800217 	ldw	r18,8(sp)
 800a05c:	dc400117 	ldw	r17,4(sp)
 800a060:	dc000017 	ldw	r16,0(sp)
 800a064:	dec00a04 	addi	sp,sp,40
 800a068:	f800283a 	ret

0800a06c <__clzsi2>:
 800a06c:	00bfffd4 	movui	r2,65535
 800a070:	11000b36 	bltu	r2,r4,800a0a0 <__clzsi2+0x34>
 800a074:	00803fc4 	movi	r2,255
 800a078:	11001e2e 	bgeu	r2,r4,800a0f4 <__clzsi2+0x88>
 800a07c:	00c00204 	movi	r3,8
 800a080:	20c8d83a 	srl	r4,r4,r3
 800a084:	00c20074 	movhi	r3,2049
 800a088:	18f54504 	addi	r3,r3,-10988
 800a08c:	00800604 	movi	r2,24
 800a090:	1909883a 	add	r4,r3,r4
 800a094:	20c00003 	ldbu	r3,0(r4)
 800a098:	10c5c83a 	sub	r2,r2,r3
 800a09c:	f800283a 	ret
 800a0a0:	00804034 	movhi	r2,256
 800a0a4:	10bfffc4 	addi	r2,r2,-1
 800a0a8:	11000936 	bltu	r2,r4,800a0d0 <__clzsi2+0x64>
 800a0ac:	00800404 	movi	r2,16
 800a0b0:	1007883a 	mov	r3,r2
 800a0b4:	20c8d83a 	srl	r4,r4,r3
 800a0b8:	00c20074 	movhi	r3,2049
 800a0bc:	18f54504 	addi	r3,r3,-10988
 800a0c0:	1909883a 	add	r4,r3,r4
 800a0c4:	20c00003 	ldbu	r3,0(r4)
 800a0c8:	10c5c83a 	sub	r2,r2,r3
 800a0cc:	f800283a 	ret
 800a0d0:	00c00604 	movi	r3,24
 800a0d4:	20c8d83a 	srl	r4,r4,r3
 800a0d8:	00c20074 	movhi	r3,2049
 800a0dc:	18f54504 	addi	r3,r3,-10988
 800a0e0:	00800204 	movi	r2,8
 800a0e4:	1909883a 	add	r4,r3,r4
 800a0e8:	20c00003 	ldbu	r3,0(r4)
 800a0ec:	10c5c83a 	sub	r2,r2,r3
 800a0f0:	f800283a 	ret
 800a0f4:	0007883a 	mov	r3,zero
 800a0f8:	20c8d83a 	srl	r4,r4,r3
 800a0fc:	00c20074 	movhi	r3,2049
 800a100:	18f54504 	addi	r3,r3,-10988
 800a104:	00800804 	movi	r2,32
 800a108:	1909883a 	add	r4,r3,r4
 800a10c:	20c00003 	ldbu	r3,0(r4)
 800a110:	10c5c83a 	sub	r2,r2,r3
 800a114:	f800283a 	ret

0800a118 <__pack_d>:
 800a118:	20800017 	ldw	r2,0(r4)
 800a11c:	defff804 	addi	sp,sp,-32
 800a120:	dcc00315 	stw	r19,12(sp)
 800a124:	dc800215 	stw	r18,8(sp)
 800a128:	dfc00715 	stw	ra,28(sp)
 800a12c:	dd800615 	stw	r22,24(sp)
 800a130:	dd400515 	stw	r21,20(sp)
 800a134:	dd000415 	stw	r20,16(sp)
 800a138:	dc400115 	stw	r17,4(sp)
 800a13c:	dc000015 	stw	r16,0(sp)
 800a140:	04800044 	movi	r18,1
 800a144:	24400317 	ldw	r17,12(r4)
 800a148:	24000417 	ldw	r16,16(r4)
 800a14c:	24c00117 	ldw	r19,4(r4)
 800a150:	9080422e 	bgeu	r18,r2,800a25c <__pack_d+0x144>
 800a154:	00c00104 	movi	r3,4
 800a158:	10c03c26 	beq	r2,r3,800a24c <__pack_d+0x134>
 800a15c:	00c00084 	movi	r3,2
 800a160:	10c01926 	beq	r2,r3,800a1c8 <__pack_d+0xb0>
 800a164:	8c04b03a 	or	r2,r17,r16
 800a168:	10001726 	beq	r2,zero,800a1c8 <__pack_d+0xb0>
 800a16c:	21000217 	ldw	r4,8(r4)
 800a170:	00bf0084 	movi	r2,-1022
 800a174:	20804016 	blt	r4,r2,800a278 <__pack_d+0x160>
 800a178:	0080ffc4 	movi	r2,1023
 800a17c:	11003316 	blt	r2,r4,800a24c <__pack_d+0x134>
 800a180:	88803fcc 	andi	r2,r17,255
 800a184:	00c02004 	movi	r3,128
 800a188:	10c02926 	beq	r2,r3,800a230 <__pack_d+0x118>
 800a18c:	88801fc4 	addi	r2,r17,127
 800a190:	1463803a 	cmpltu	r17,r2,r17
 800a194:	8c21883a 	add	r16,r17,r16
 800a198:	1023883a 	mov	r17,r2
 800a19c:	00880034 	movhi	r2,8192
 800a1a0:	10bfffc4 	addi	r2,r2,-1
 800a1a4:	14001c36 	bltu	r2,r16,800a218 <__pack_d+0x100>
 800a1a8:	2100ffc4 	addi	r4,r4,1023
 800a1ac:	8006963a 	slli	r3,r16,24
 800a1b0:	8804d23a 	srli	r2,r17,8
 800a1b4:	8020913a 	slli	r16,r16,4
 800a1b8:	2101ffcc 	andi	r4,r4,2047
 800a1bc:	1884b03a 	or	r2,r3,r2
 800a1c0:	8020d33a 	srli	r16,r16,12
 800a1c4:	00000306 	br	800a1d4 <__pack_d+0xbc>
 800a1c8:	0009883a 	mov	r4,zero
 800a1cc:	0005883a 	mov	r2,zero
 800a1d0:	0021883a 	mov	r16,zero
 800a1d4:	2008953a 	slli	r4,r4,20
 800a1d8:	982697fa 	slli	r19,r19,31
 800a1dc:	00c00434 	movhi	r3,16
 800a1e0:	18ffffc4 	addi	r3,r3,-1
 800a1e4:	80e0703a 	and	r16,r16,r3
 800a1e8:	8106b03a 	or	r3,r16,r4
 800a1ec:	1cc6b03a 	or	r3,r3,r19
 800a1f0:	dfc00717 	ldw	ra,28(sp)
 800a1f4:	dd800617 	ldw	r22,24(sp)
 800a1f8:	dd400517 	ldw	r21,20(sp)
 800a1fc:	dd000417 	ldw	r20,16(sp)
 800a200:	dcc00317 	ldw	r19,12(sp)
 800a204:	dc800217 	ldw	r18,8(sp)
 800a208:	dc400117 	ldw	r17,4(sp)
 800a20c:	dc000017 	ldw	r16,0(sp)
 800a210:	dec00804 	addi	sp,sp,32
 800a214:	f800283a 	ret
 800a218:	800697fa 	slli	r3,r16,31
 800a21c:	8804d07a 	srli	r2,r17,1
 800a220:	21010004 	addi	r4,r4,1024
 800a224:	8020d07a 	srli	r16,r16,1
 800a228:	18a2b03a 	or	r17,r3,r2
 800a22c:	003fdf06 	br	800a1ac <__pack_d+0x94>
 800a230:	88c0400c 	andi	r3,r17,256
 800a234:	183fd926 	beq	r3,zero,800a19c <__pack_d+0x84>
 800a238:	8885883a 	add	r2,r17,r2
 800a23c:	1463803a 	cmpltu	r17,r2,r17
 800a240:	8c21883a 	add	r16,r17,r16
 800a244:	1023883a 	mov	r17,r2
 800a248:	003fd406 	br	800a19c <__pack_d+0x84>
 800a24c:	0101ffc4 	movi	r4,2047
 800a250:	0005883a 	mov	r2,zero
 800a254:	0021883a 	mov	r16,zero
 800a258:	003fde06 	br	800a1d4 <__pack_d+0xbc>
 800a25c:	84000234 	orhi	r16,r16,8
 800a260:	00c00434 	movhi	r3,16
 800a264:	18ffffc4 	addi	r3,r3,-1
 800a268:	8805883a 	mov	r2,r17
 800a26c:	80e0703a 	and	r16,r16,r3
 800a270:	0101ffc4 	movi	r4,2047
 800a274:	003fd706 	br	800a1d4 <__pack_d+0xbc>
 800a278:	1129c83a 	sub	r20,r2,r4
 800a27c:	00800e04 	movi	r2,56
 800a280:	15002716 	blt	r2,r20,800a320 <__pack_d+0x208>
 800a284:	800b883a 	mov	r5,r16
 800a288:	a00d883a 	mov	r6,r20
 800a28c:	8809883a 	mov	r4,r17
 800a290:	800a5100 	call	800a510 <__lshrdi3>
 800a294:	9009883a 	mov	r4,r18
 800a298:	000b883a 	mov	r5,zero
 800a29c:	a00d883a 	mov	r6,r20
 800a2a0:	102d883a 	mov	r22,r2
 800a2a4:	182b883a 	mov	r21,r3
 800a2a8:	800a5540 	call	800a554 <__ashldi3>
 800a2ac:	1009003a 	cmpeq	r4,r2,zero
 800a2b0:	1907c83a 	sub	r3,r3,r4
 800a2b4:	10bfffc4 	addi	r2,r2,-1
 800a2b8:	1c20703a 	and	r16,r3,r16
 800a2bc:	1444703a 	and	r2,r2,r17
 800a2c0:	1404b03a 	or	r2,r2,r16
 800a2c4:	1004c03a 	cmpne	r2,r2,zero
 800a2c8:	1584b03a 	or	r2,r2,r22
 800a2cc:	11003fcc 	andi	r4,r2,255
 800a2d0:	01402004 	movi	r5,128
 800a2d4:	a807883a 	mov	r3,r21
 800a2d8:	2140131e 	bne	r4,r5,800a328 <__pack_d+0x210>
 800a2dc:	1140400c 	andi	r5,r2,256
 800a2e0:	28000426 	beq	r5,zero,800a2f4 <__pack_d+0x1dc>
 800a2e4:	1109883a 	add	r4,r2,r4
 800a2e8:	2085803a 	cmpltu	r2,r4,r2
 800a2ec:	1547883a 	add	r3,r2,r21
 800a2f0:	2005883a 	mov	r2,r4
 800a2f4:	1808963a 	slli	r4,r3,24
 800a2f8:	1004d23a 	srli	r2,r2,8
 800a2fc:	1820913a 	slli	r16,r3,4
 800a300:	01440034 	movhi	r5,4096
 800a304:	297fffc4 	addi	r5,r5,-1
 800a308:	2084b03a 	or	r2,r4,r2
 800a30c:	8020d33a 	srli	r16,r16,12
 800a310:	01000044 	movi	r4,1
 800a314:	28ffaf36 	bltu	r5,r3,800a1d4 <__pack_d+0xbc>
 800a318:	0009883a 	mov	r4,zero
 800a31c:	003fad06 	br	800a1d4 <__pack_d+0xbc>
 800a320:	0005883a 	mov	r2,zero
 800a324:	0007883a 	mov	r3,zero
 800a328:	11001fc4 	addi	r4,r2,127
 800a32c:	2085803a 	cmpltu	r2,r4,r2
 800a330:	10c7883a 	add	r3,r2,r3
 800a334:	2005883a 	mov	r2,r4
 800a338:	003fee06 	br	800a2f4 <__pack_d+0x1dc>

0800a33c <__unpack_d>:
 800a33c:	21800117 	ldw	r6,4(r4)
 800a340:	20c00017 	ldw	r3,0(r4)
 800a344:	3004d7fa 	srli	r2,r6,31
 800a348:	3008d53a 	srli	r4,r6,20
 800a34c:	28800115 	stw	r2,4(r5)
 800a350:	2101ffcc 	andi	r4,r4,2047
 800a354:	00800434 	movhi	r2,16
 800a358:	10bfffc4 	addi	r2,r2,-1
 800a35c:	3084703a 	and	r2,r6,r2
 800a360:	20001a1e 	bne	r4,zero,800a3cc <__unpack_d+0x90>
 800a364:	1888b03a 	or	r4,r3,r2
 800a368:	20002626 	beq	r4,zero,800a404 <__unpack_d+0xc8>
 800a36c:	1808d63a 	srli	r4,r3,24
 800a370:	1004923a 	slli	r2,r2,8
 800a374:	01bf0084 	movi	r6,-1022
 800a378:	29800215 	stw	r6,8(r5)
 800a37c:	2084b03a 	or	r2,r4,r2
 800a380:	010000c4 	movi	r4,3
 800a384:	29000015 	stw	r4,0(r5)
 800a388:	02040034 	movhi	r8,4096
 800a38c:	423fffc4 	addi	r8,r8,-1
 800a390:	1806923a 	slli	r3,r3,8
 800a394:	40801836 	bltu	r8,r2,800a3f8 <__unpack_d+0xbc>
 800a398:	013f0044 	movi	r4,-1023
 800a39c:	18cd883a 	add	r6,r3,r3
 800a3a0:	30c7803a 	cmpltu	r3,r6,r3
 800a3a4:	1085883a 	add	r2,r2,r2
 800a3a8:	1885883a 	add	r2,r3,r2
 800a3ac:	200f883a 	mov	r7,r4
 800a3b0:	3007883a 	mov	r3,r6
 800a3b4:	213fffc4 	addi	r4,r4,-1
 800a3b8:	40bff82e 	bgeu	r8,r2,800a39c <__unpack_d+0x60>
 800a3bc:	29c00215 	stw	r7,8(r5)
 800a3c0:	28c00315 	stw	r3,12(r5)
 800a3c4:	28800415 	stw	r2,16(r5)
 800a3c8:	f800283a 	ret
 800a3cc:	01c1ffc4 	movi	r7,2047
 800a3d0:	21c00f26 	beq	r4,r7,800a410 <__unpack_d+0xd4>
 800a3d4:	180cd63a 	srli	r6,r3,24
 800a3d8:	1004923a 	slli	r2,r2,8
 800a3dc:	213f0044 	addi	r4,r4,-1023
 800a3e0:	1806923a 	slli	r3,r3,8
 800a3e4:	3084b03a 	or	r2,r6,r2
 800a3e8:	29000215 	stw	r4,8(r5)
 800a3ec:	010000c4 	movi	r4,3
 800a3f0:	10840034 	orhi	r2,r2,4096
 800a3f4:	29000015 	stw	r4,0(r5)
 800a3f8:	28c00315 	stw	r3,12(r5)
 800a3fc:	28800415 	stw	r2,16(r5)
 800a400:	f800283a 	ret
 800a404:	00800084 	movi	r2,2
 800a408:	28800015 	stw	r2,0(r5)
 800a40c:	f800283a 	ret
 800a410:	1888b03a 	or	r4,r3,r2
 800a414:	20000526 	beq	r4,zero,800a42c <__unpack_d+0xf0>
 800a418:	3180022c 	andhi	r6,r6,8
 800a41c:	30000626 	beq	r6,zero,800a438 <__unpack_d+0xfc>
 800a420:	01000044 	movi	r4,1
 800a424:	29000015 	stw	r4,0(r5)
 800a428:	003ff306 	br	800a3f8 <__unpack_d+0xbc>
 800a42c:	00800104 	movi	r2,4
 800a430:	28800015 	stw	r2,0(r5)
 800a434:	f800283a 	ret
 800a438:	28000015 	stw	zero,0(r5)
 800a43c:	003fee06 	br	800a3f8 <__unpack_d+0xbc>

0800a440 <__fpcmp_parts_d>:
 800a440:	20c00017 	ldw	r3,0(r4)
 800a444:	00800044 	movi	r2,1
 800a448:	10c0142e 	bgeu	r2,r3,800a49c <__fpcmp_parts_d+0x5c>
 800a44c:	29800017 	ldw	r6,0(r5)
 800a450:	1180122e 	bgeu	r2,r6,800a49c <__fpcmp_parts_d+0x5c>
 800a454:	01c00104 	movi	r7,4
 800a458:	19c02826 	beq	r3,r7,800a4fc <__fpcmp_parts_d+0xbc>
 800a45c:	31c00926 	beq	r6,r7,800a484 <__fpcmp_parts_d+0x44>
 800a460:	01c00084 	movi	r7,2
 800a464:	19c00626 	beq	r3,r7,800a480 <__fpcmp_parts_d+0x40>
 800a468:	31c00a26 	beq	r6,r7,800a494 <__fpcmp_parts_d+0x54>
 800a46c:	20c00117 	ldw	r3,4(r4)
 800a470:	29800117 	ldw	r6,4(r5)
 800a474:	19800b26 	beq	r3,r6,800a4a4 <__fpcmp_parts_d+0x64>
 800a478:	1800041e 	bne	r3,zero,800a48c <__fpcmp_parts_d+0x4c>
 800a47c:	f800283a 	ret
 800a480:	30c01a26 	beq	r6,r3,800a4ec <__fpcmp_parts_d+0xac>
 800a484:	28800117 	ldw	r2,4(r5)
 800a488:	1000041e 	bne	r2,zero,800a49c <__fpcmp_parts_d+0x5c>
 800a48c:	00bfffc4 	movi	r2,-1
 800a490:	f800283a 	ret
 800a494:	20800117 	ldw	r2,4(r4)
 800a498:	103ffc1e 	bne	r2,zero,800a48c <__fpcmp_parts_d+0x4c>
 800a49c:	00800044 	movi	r2,1
 800a4a0:	f800283a 	ret
 800a4a4:	21c00217 	ldw	r7,8(r4)
 800a4a8:	29800217 	ldw	r6,8(r5)
 800a4ac:	31c0020e 	bge	r6,r7,800a4b8 <__fpcmp_parts_d+0x78>
 800a4b0:	183ff61e 	bne	r3,zero,800a48c <__fpcmp_parts_d+0x4c>
 800a4b4:	f800283a 	ret
 800a4b8:	39800a16 	blt	r7,r6,800a4e4 <__fpcmp_parts_d+0xa4>
 800a4bc:	20800417 	ldw	r2,16(r4)
 800a4c0:	29800417 	ldw	r6,16(r5)
 800a4c4:	21c00317 	ldw	r7,12(r4)
 800a4c8:	29000317 	ldw	r4,12(r5)
 800a4cc:	30800936 	bltu	r6,r2,800a4f4 <__fpcmp_parts_d+0xb4>
 800a4d0:	1180011e 	bne	r2,r6,800a4d8 <__fpcmp_parts_d+0x98>
 800a4d4:	21c00736 	bltu	r4,r7,800a4f4 <__fpcmp_parts_d+0xb4>
 800a4d8:	11800236 	bltu	r2,r6,800a4e4 <__fpcmp_parts_d+0xa4>
 800a4dc:	3080031e 	bne	r6,r2,800a4ec <__fpcmp_parts_d+0xac>
 800a4e0:	3900022e 	bgeu	r7,r4,800a4ec <__fpcmp_parts_d+0xac>
 800a4e4:	183fe926 	beq	r3,zero,800a48c <__fpcmp_parts_d+0x4c>
 800a4e8:	003fec06 	br	800a49c <__fpcmp_parts_d+0x5c>
 800a4ec:	0005883a 	mov	r2,zero
 800a4f0:	f800283a 	ret
 800a4f4:	183fe926 	beq	r3,zero,800a49c <__fpcmp_parts_d+0x5c>
 800a4f8:	003fe406 	br	800a48c <__fpcmp_parts_d+0x4c>
 800a4fc:	30ffe51e 	bne	r6,r3,800a494 <__fpcmp_parts_d+0x54>
 800a500:	28c00117 	ldw	r3,4(r5)
 800a504:	20800117 	ldw	r2,4(r4)
 800a508:	1885c83a 	sub	r2,r3,r2
 800a50c:	f800283a 	ret

0800a510 <__lshrdi3>:
 800a510:	2005883a 	mov	r2,r4
 800a514:	2807883a 	mov	r3,r5
 800a518:	30000826 	beq	r6,zero,800a53c <__lshrdi3+0x2c>
 800a51c:	01000804 	movi	r4,32
 800a520:	2189c83a 	sub	r4,r4,r6
 800a524:	0100060e 	bge	zero,r4,800a540 <__lshrdi3+0x30>
 800a528:	1184d83a 	srl	r2,r2,r6
 800a52c:	2908983a 	sll	r4,r5,r4
 800a530:	298cd83a 	srl	r6,r5,r6
 800a534:	2084b03a 	or	r2,r4,r2
 800a538:	3007883a 	mov	r3,r6
 800a53c:	f800283a 	ret
 800a540:	0105c83a 	sub	r2,zero,r4
 800a544:	000d883a 	mov	r6,zero
 800a548:	2884d83a 	srl	r2,r5,r2
 800a54c:	3007883a 	mov	r3,r6
 800a550:	003ffa06 	br	800a53c <__lshrdi3+0x2c>

0800a554 <__ashldi3>:
 800a554:	2005883a 	mov	r2,r4
 800a558:	2807883a 	mov	r3,r5
 800a55c:	30000826 	beq	r6,zero,800a580 <__ashldi3+0x2c>
 800a560:	01000804 	movi	r4,32
 800a564:	2189c83a 	sub	r4,r4,r6
 800a568:	0100060e 	bge	zero,r4,800a584 <__ashldi3+0x30>
 800a56c:	1108d83a 	srl	r4,r2,r4
 800a570:	2986983a 	sll	r3,r5,r6
 800a574:	118c983a 	sll	r6,r2,r6
 800a578:	20c6b03a 	or	r3,r4,r3
 800a57c:	3005883a 	mov	r2,r6
 800a580:	f800283a 	ret
 800a584:	0107c83a 	sub	r3,zero,r4
 800a588:	000d883a 	mov	r6,zero
 800a58c:	10c6983a 	sll	r3,r2,r3
 800a590:	3005883a 	mov	r2,r6
 800a594:	003ffa06 	br	800a580 <__ashldi3+0x2c>

0800a598 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800a598:	defffe04 	addi	sp,sp,-8
 800a59c:	dfc00115 	stw	ra,4(sp)
 800a5a0:	df000015 	stw	fp,0(sp)
 800a5a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800a5a8:	00820074 	movhi	r2,2049
 800a5ac:	10bc2104 	addi	r2,r2,-3964
 800a5b0:	10800017 	ldw	r2,0(r2)
 800a5b4:	10000526 	beq	r2,zero,800a5cc <alt_get_errno+0x34>
 800a5b8:	00820074 	movhi	r2,2049
 800a5bc:	10bc2104 	addi	r2,r2,-3964
 800a5c0:	10800017 	ldw	r2,0(r2)
 800a5c4:	103ee83a 	callr	r2
 800a5c8:	00000206 	br	800a5d4 <alt_get_errno+0x3c>
 800a5cc:	00820074 	movhi	r2,2049
 800a5d0:	1082c204 	addi	r2,r2,2824
}
 800a5d4:	e037883a 	mov	sp,fp
 800a5d8:	dfc00117 	ldw	ra,4(sp)
 800a5dc:	df000017 	ldw	fp,0(sp)
 800a5e0:	dec00204 	addi	sp,sp,8
 800a5e4:	f800283a 	ret

0800a5e8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 800a5e8:	defffb04 	addi	sp,sp,-20
 800a5ec:	dfc00415 	stw	ra,16(sp)
 800a5f0:	df000315 	stw	fp,12(sp)
 800a5f4:	df000304 	addi	fp,sp,12
 800a5f8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 800a5fc:	e0bfff17 	ldw	r2,-4(fp)
 800a600:	10000716 	blt	r2,zero,800a620 <close+0x38>
 800a604:	e13fff17 	ldw	r4,-4(fp)
 800a608:	01400304 	movi	r5,12
 800a60c:	8000df40 	call	8000df4 <__mulsi3>
 800a610:	00c20074 	movhi	r3,2049
 800a614:	18f79f04 	addi	r3,r3,-8580
 800a618:	10c5883a 	add	r2,r2,r3
 800a61c:	00000106 	br	800a624 <close+0x3c>
 800a620:	0005883a 	mov	r2,zero
 800a624:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 800a628:	e0bffd17 	ldw	r2,-12(fp)
 800a62c:	10001826 	beq	r2,zero,800a690 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 800a630:	e0bffd17 	ldw	r2,-12(fp)
 800a634:	10800017 	ldw	r2,0(r2)
 800a638:	10800417 	ldw	r2,16(r2)
 800a63c:	10000626 	beq	r2,zero,800a658 <close+0x70>
 800a640:	e0bffd17 	ldw	r2,-12(fp)
 800a644:	10800017 	ldw	r2,0(r2)
 800a648:	10800417 	ldw	r2,16(r2)
 800a64c:	e13ffd17 	ldw	r4,-12(fp)
 800a650:	103ee83a 	callr	r2
 800a654:	00000106 	br	800a65c <close+0x74>
 800a658:	0005883a 	mov	r2,zero
 800a65c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 800a660:	e13fff17 	ldw	r4,-4(fp)
 800a664:	800ad1c0 	call	800ad1c <alt_release_fd>
    if (rval < 0)
 800a668:	e0bffe17 	ldw	r2,-8(fp)
 800a66c:	1000060e 	bge	r2,zero,800a688 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 800a670:	800a5980 	call	800a598 <alt_get_errno>
 800a674:	e0fffe17 	ldw	r3,-8(fp)
 800a678:	00c7c83a 	sub	r3,zero,r3
 800a67c:	10c00015 	stw	r3,0(r2)
      return -1;
 800a680:	00bfffc4 	movi	r2,-1
 800a684:	00000606 	br	800a6a0 <close+0xb8>
    }
    return 0;
 800a688:	0005883a 	mov	r2,zero
 800a68c:	00000406 	br	800a6a0 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800a690:	800a5980 	call	800a598 <alt_get_errno>
 800a694:	00c01444 	movi	r3,81
 800a698:	10c00015 	stw	r3,0(r2)
    return -1;
 800a69c:	00bfffc4 	movi	r2,-1
  }
}
 800a6a0:	e037883a 	mov	sp,fp
 800a6a4:	dfc00117 	ldw	ra,4(sp)
 800a6a8:	df000017 	ldw	fp,0(sp)
 800a6ac:	dec00204 	addi	sp,sp,8
 800a6b0:	f800283a 	ret

0800a6b4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 800a6b4:	defffc04 	addi	sp,sp,-16
 800a6b8:	df000315 	stw	fp,12(sp)
 800a6bc:	df000304 	addi	fp,sp,12
 800a6c0:	e13ffd15 	stw	r4,-12(fp)
 800a6c4:	e17ffe15 	stw	r5,-8(fp)
 800a6c8:	e1bfff15 	stw	r6,-4(fp)
  return len;
 800a6cc:	e0bfff17 	ldw	r2,-4(fp)
}
 800a6d0:	e037883a 	mov	sp,fp
 800a6d4:	df000017 	ldw	fp,0(sp)
 800a6d8:	dec00104 	addi	sp,sp,4
 800a6dc:	f800283a 	ret

0800a6e0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 800a6e0:	defffc04 	addi	sp,sp,-16
 800a6e4:	df000315 	stw	fp,12(sp)
 800a6e8:	df000304 	addi	fp,sp,12
 800a6ec:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 800a6f0:	0001883a 	nop
 800a6f4:	e0bfff17 	ldw	r2,-4(fp)
 800a6f8:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
 800a6fc:	e0bffd17 	ldw	r2,-12(fp)
 800a700:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 800a704:	e0bffe17 	ldw	r2,-8(fp)
 800a708:	10000226 	beq	r2,zero,800a714 <_exit+0x34>
    ALT_SIM_FAIL();
 800a70c:	002af070 	cmpltui	zero,zero,43969
 800a710:	00000106 	br	800a718 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
 800a714:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 800a718:	003fff06 	br	800a718 <_exit+0x38>

0800a71c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800a71c:	defffe04 	addi	sp,sp,-8
 800a720:	dfc00115 	stw	ra,4(sp)
 800a724:	df000015 	stw	fp,0(sp)
 800a728:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800a72c:	00820074 	movhi	r2,2049
 800a730:	10bc2104 	addi	r2,r2,-3964
 800a734:	10800017 	ldw	r2,0(r2)
 800a738:	10000526 	beq	r2,zero,800a750 <alt_get_errno+0x34>
 800a73c:	00820074 	movhi	r2,2049
 800a740:	10bc2104 	addi	r2,r2,-3964
 800a744:	10800017 	ldw	r2,0(r2)
 800a748:	103ee83a 	callr	r2
 800a74c:	00000206 	br	800a758 <alt_get_errno+0x3c>
 800a750:	00820074 	movhi	r2,2049
 800a754:	1082c204 	addi	r2,r2,2824
}
 800a758:	e037883a 	mov	sp,fp
 800a75c:	dfc00117 	ldw	ra,4(sp)
 800a760:	df000017 	ldw	fp,0(sp)
 800a764:	dec00204 	addi	sp,sp,8
 800a768:	f800283a 	ret

0800a76c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 800a76c:	defffb04 	addi	sp,sp,-20
 800a770:	dfc00415 	stw	ra,16(sp)
 800a774:	df000315 	stw	fp,12(sp)
 800a778:	df000304 	addi	fp,sp,12
 800a77c:	e13ffe15 	stw	r4,-8(fp)
 800a780:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800a784:	e0bffe17 	ldw	r2,-8(fp)
 800a788:	10000716 	blt	r2,zero,800a7a8 <fstat+0x3c>
 800a78c:	e13ffe17 	ldw	r4,-8(fp)
 800a790:	01400304 	movi	r5,12
 800a794:	8000df40 	call	8000df4 <__mulsi3>
 800a798:	00c20074 	movhi	r3,2049
 800a79c:	18f79f04 	addi	r3,r3,-8580
 800a7a0:	10c5883a 	add	r2,r2,r3
 800a7a4:	00000106 	br	800a7ac <fstat+0x40>
 800a7a8:	0005883a 	mov	r2,zero
 800a7ac:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 800a7b0:	e0bffd17 	ldw	r2,-12(fp)
 800a7b4:	10001026 	beq	r2,zero,800a7f8 <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 800a7b8:	e0bffd17 	ldw	r2,-12(fp)
 800a7bc:	10800017 	ldw	r2,0(r2)
 800a7c0:	10800817 	ldw	r2,32(r2)
 800a7c4:	10000726 	beq	r2,zero,800a7e4 <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
 800a7c8:	e0bffd17 	ldw	r2,-12(fp)
 800a7cc:	10800017 	ldw	r2,0(r2)
 800a7d0:	10800817 	ldw	r2,32(r2)
 800a7d4:	e13ffd17 	ldw	r4,-12(fp)
 800a7d8:	e17fff17 	ldw	r5,-4(fp)
 800a7dc:	103ee83a 	callr	r2
 800a7e0:	00000906 	br	800a808 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 800a7e4:	e0bfff17 	ldw	r2,-4(fp)
 800a7e8:	00c80004 	movi	r3,8192
 800a7ec:	10c00115 	stw	r3,4(r2)
      return 0;
 800a7f0:	0005883a 	mov	r2,zero
 800a7f4:	00000406 	br	800a808 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800a7f8:	800a71c0 	call	800a71c <alt_get_errno>
 800a7fc:	00c01444 	movi	r3,81
 800a800:	10c00015 	stw	r3,0(r2)
    return -1;
 800a804:	00bfffc4 	movi	r2,-1
  }
}
 800a808:	e037883a 	mov	sp,fp
 800a80c:	dfc00117 	ldw	ra,4(sp)
 800a810:	df000017 	ldw	fp,0(sp)
 800a814:	dec00204 	addi	sp,sp,8
 800a818:	f800283a 	ret

0800a81c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800a81c:	defffe04 	addi	sp,sp,-8
 800a820:	dfc00115 	stw	ra,4(sp)
 800a824:	df000015 	stw	fp,0(sp)
 800a828:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800a82c:	00820074 	movhi	r2,2049
 800a830:	10bc2104 	addi	r2,r2,-3964
 800a834:	10800017 	ldw	r2,0(r2)
 800a838:	10000526 	beq	r2,zero,800a850 <alt_get_errno+0x34>
 800a83c:	00820074 	movhi	r2,2049
 800a840:	10bc2104 	addi	r2,r2,-3964
 800a844:	10800017 	ldw	r2,0(r2)
 800a848:	103ee83a 	callr	r2
 800a84c:	00000206 	br	800a858 <alt_get_errno+0x3c>
 800a850:	00820074 	movhi	r2,2049
 800a854:	1082c204 	addi	r2,r2,2824
}
 800a858:	e037883a 	mov	sp,fp
 800a85c:	dfc00117 	ldw	ra,4(sp)
 800a860:	df000017 	ldw	fp,0(sp)
 800a864:	dec00204 	addi	sp,sp,8
 800a868:	f800283a 	ret

0800a86c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 800a86c:	deffed04 	addi	sp,sp,-76
 800a870:	dfc01215 	stw	ra,72(sp)
 800a874:	df001115 	stw	fp,68(sp)
 800a878:	df001104 	addi	fp,sp,68
 800a87c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800a880:	e0bfff17 	ldw	r2,-4(fp)
 800a884:	10000716 	blt	r2,zero,800a8a4 <isatty+0x38>
 800a888:	e13fff17 	ldw	r4,-4(fp)
 800a88c:	01400304 	movi	r5,12
 800a890:	8000df40 	call	8000df4 <__mulsi3>
 800a894:	00c20074 	movhi	r3,2049
 800a898:	18f79f04 	addi	r3,r3,-8580
 800a89c:	10c5883a 	add	r2,r2,r3
 800a8a0:	00000106 	br	800a8a8 <isatty+0x3c>
 800a8a4:	0005883a 	mov	r2,zero
 800a8a8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 800a8ac:	e0bfef17 	ldw	r2,-68(fp)
 800a8b0:	10000e26 	beq	r2,zero,800a8ec <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 800a8b4:	e0bfef17 	ldw	r2,-68(fp)
 800a8b8:	10800017 	ldw	r2,0(r2)
 800a8bc:	10800817 	ldw	r2,32(r2)
 800a8c0:	1000021e 	bne	r2,zero,800a8cc <isatty+0x60>
    {
      return 1;
 800a8c4:	00800044 	movi	r2,1
 800a8c8:	00000c06 	br	800a8fc <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 800a8cc:	e0bff004 	addi	r2,fp,-64
 800a8d0:	e13fff17 	ldw	r4,-4(fp)
 800a8d4:	100b883a 	mov	r5,r2
 800a8d8:	800a76c0 	call	800a76c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 800a8dc:	e0bff117 	ldw	r2,-60(fp)
 800a8e0:	10880020 	cmpeqi	r2,r2,8192
 800a8e4:	10803fcc 	andi	r2,r2,255
 800a8e8:	00000406 	br	800a8fc <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800a8ec:	800a81c0 	call	800a81c <alt_get_errno>
 800a8f0:	00c01444 	movi	r3,81
 800a8f4:	10c00015 	stw	r3,0(r2)
    return 0;
 800a8f8:	0005883a 	mov	r2,zero
  }
}
 800a8fc:	e037883a 	mov	sp,fp
 800a900:	dfc00117 	ldw	ra,4(sp)
 800a904:	df000017 	ldw	fp,0(sp)
 800a908:	dec00204 	addi	sp,sp,8
 800a90c:	f800283a 	ret

0800a910 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 800a910:	defffc04 	addi	sp,sp,-16
 800a914:	df000315 	stw	fp,12(sp)
 800a918:	df000304 	addi	fp,sp,12
 800a91c:	e13ffd15 	stw	r4,-12(fp)
 800a920:	e17ffe15 	stw	r5,-8(fp)
 800a924:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 800a928:	e0fffe17 	ldw	r3,-8(fp)
 800a92c:	e0bffd17 	ldw	r2,-12(fp)
 800a930:	18800e26 	beq	r3,r2,800a96c <alt_load_section+0x5c>
  {
    while( to != end )
 800a934:	00000a06 	br	800a960 <alt_load_section+0x50>
    {
      *to++ = *from++;
 800a938:	e0bffd17 	ldw	r2,-12(fp)
 800a93c:	10c00017 	ldw	r3,0(r2)
 800a940:	e0bffe17 	ldw	r2,-8(fp)
 800a944:	10c00015 	stw	r3,0(r2)
 800a948:	e0bffe17 	ldw	r2,-8(fp)
 800a94c:	10800104 	addi	r2,r2,4
 800a950:	e0bffe15 	stw	r2,-8(fp)
 800a954:	e0bffd17 	ldw	r2,-12(fp)
 800a958:	10800104 	addi	r2,r2,4
 800a95c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 800a960:	e0fffe17 	ldw	r3,-8(fp)
 800a964:	e0bfff17 	ldw	r2,-4(fp)
 800a968:	18bff31e 	bne	r3,r2,800a938 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 800a96c:	e037883a 	mov	sp,fp
 800a970:	df000017 	ldw	fp,0(sp)
 800a974:	dec00104 	addi	sp,sp,4
 800a978:	f800283a 	ret

0800a97c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 800a97c:	defffe04 	addi	sp,sp,-8
 800a980:	dfc00115 	stw	ra,4(sp)
 800a984:	df000015 	stw	fp,0(sp)
 800a988:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 800a98c:	01020074 	movhi	r4,2049
 800a990:	213c2604 	addi	r4,r4,-3944
 800a994:	01420074 	movhi	r5,2049
 800a998:	29759004 	addi	r5,r5,-10688
 800a99c:	01820074 	movhi	r6,2049
 800a9a0:	31bc2604 	addi	r6,r6,-3944
 800a9a4:	800a9100 	call	800a910 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 800a9a8:	01020034 	movhi	r4,2048
 800a9ac:	21000804 	addi	r4,r4,32
 800a9b0:	01420034 	movhi	r5,2048
 800a9b4:	29400804 	addi	r5,r5,32
 800a9b8:	01820034 	movhi	r6,2048
 800a9bc:	31806e04 	addi	r6,r6,440
 800a9c0:	800a9100 	call	800a910 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 800a9c4:	01020074 	movhi	r4,2049
 800a9c8:	21333a04 	addi	r4,r4,-13080
 800a9cc:	01420074 	movhi	r5,2049
 800a9d0:	29733a04 	addi	r5,r5,-13080
 800a9d4:	01820074 	movhi	r6,2049
 800a9d8:	31b59004 	addi	r6,r6,-10688
 800a9dc:	800a9100 	call	800a910 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 800a9e0:	800be5c0 	call	800be5c <alt_dcache_flush_all>
  alt_icache_flush_all();
 800a9e4:	800c0200 	call	800c020 <alt_icache_flush_all>
}
 800a9e8:	e037883a 	mov	sp,fp
 800a9ec:	dfc00117 	ldw	ra,4(sp)
 800a9f0:	df000017 	ldw	fp,0(sp)
 800a9f4:	dec00204 	addi	sp,sp,8
 800a9f8:	f800283a 	ret

0800a9fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800a9fc:	defffe04 	addi	sp,sp,-8
 800aa00:	dfc00115 	stw	ra,4(sp)
 800aa04:	df000015 	stw	fp,0(sp)
 800aa08:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800aa0c:	00820074 	movhi	r2,2049
 800aa10:	10bc2104 	addi	r2,r2,-3964
 800aa14:	10800017 	ldw	r2,0(r2)
 800aa18:	10000526 	beq	r2,zero,800aa30 <alt_get_errno+0x34>
 800aa1c:	00820074 	movhi	r2,2049
 800aa20:	10bc2104 	addi	r2,r2,-3964
 800aa24:	10800017 	ldw	r2,0(r2)
 800aa28:	103ee83a 	callr	r2
 800aa2c:	00000206 	br	800aa38 <alt_get_errno+0x3c>
 800aa30:	00820074 	movhi	r2,2049
 800aa34:	1082c204 	addi	r2,r2,2824
}
 800aa38:	e037883a 	mov	sp,fp
 800aa3c:	dfc00117 	ldw	ra,4(sp)
 800aa40:	df000017 	ldw	fp,0(sp)
 800aa44:	dec00204 	addi	sp,sp,8
 800aa48:	f800283a 	ret

0800aa4c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 800aa4c:	defff904 	addi	sp,sp,-28
 800aa50:	dfc00615 	stw	ra,24(sp)
 800aa54:	df000515 	stw	fp,20(sp)
 800aa58:	df000504 	addi	fp,sp,20
 800aa5c:	e13ffd15 	stw	r4,-12(fp)
 800aa60:	e17ffe15 	stw	r5,-8(fp)
 800aa64:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 800aa68:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800aa6c:	e0bffd17 	ldw	r2,-12(fp)
 800aa70:	10000716 	blt	r2,zero,800aa90 <lseek+0x44>
 800aa74:	e13ffd17 	ldw	r4,-12(fp)
 800aa78:	01400304 	movi	r5,12
 800aa7c:	8000df40 	call	8000df4 <__mulsi3>
 800aa80:	00c20074 	movhi	r3,2049
 800aa84:	18f79f04 	addi	r3,r3,-8580
 800aa88:	10c5883a 	add	r2,r2,r3
 800aa8c:	00000106 	br	800aa94 <lseek+0x48>
 800aa90:	0005883a 	mov	r2,zero
 800aa94:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 800aa98:	e0bffc17 	ldw	r2,-16(fp)
 800aa9c:	10001026 	beq	r2,zero,800aae0 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 800aaa0:	e0bffc17 	ldw	r2,-16(fp)
 800aaa4:	10800017 	ldw	r2,0(r2)
 800aaa8:	10800717 	ldw	r2,28(r2)
 800aaac:	10000926 	beq	r2,zero,800aad4 <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 800aab0:	e0bffc17 	ldw	r2,-16(fp)
 800aab4:	10800017 	ldw	r2,0(r2)
 800aab8:	10800717 	ldw	r2,28(r2)
 800aabc:	e13ffc17 	ldw	r4,-16(fp)
 800aac0:	e17ffe17 	ldw	r5,-8(fp)
 800aac4:	e1bfff17 	ldw	r6,-4(fp)
 800aac8:	103ee83a 	callr	r2
 800aacc:	e0bffb15 	stw	r2,-20(fp)
 800aad0:	00000506 	br	800aae8 <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 800aad4:	00bfde84 	movi	r2,-134
 800aad8:	e0bffb15 	stw	r2,-20(fp)
 800aadc:	00000206 	br	800aae8 <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
 800aae0:	00bfebc4 	movi	r2,-81
 800aae4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 800aae8:	e0bffb17 	ldw	r2,-20(fp)
 800aaec:	1000060e 	bge	r2,zero,800ab08 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 800aaf0:	800a9fc0 	call	800a9fc <alt_get_errno>
 800aaf4:	e0fffb17 	ldw	r3,-20(fp)
 800aaf8:	00c7c83a 	sub	r3,zero,r3
 800aafc:	10c00015 	stw	r3,0(r2)
    rc = -1;
 800ab00:	00bfffc4 	movi	r2,-1
 800ab04:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 800ab08:	e0bffb17 	ldw	r2,-20(fp)
}
 800ab0c:	e037883a 	mov	sp,fp
 800ab10:	dfc00117 	ldw	ra,4(sp)
 800ab14:	df000017 	ldw	fp,0(sp)
 800ab18:	dec00204 	addi	sp,sp,8
 800ab1c:	f800283a 	ret

0800ab20 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 800ab20:	defffd04 	addi	sp,sp,-12
 800ab24:	dfc00215 	stw	ra,8(sp)
 800ab28:	df000115 	stw	fp,4(sp)
 800ab2c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800ab30:	0009883a 	mov	r4,zero
 800ab34:	800afc40 	call	800afc4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 800ab38:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 800ab3c:	800aff80 	call	800aff8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 800ab40:	01020074 	movhi	r4,2049
 800ab44:	21358804 	addi	r4,r4,-10720
 800ab48:	01420074 	movhi	r5,2049
 800ab4c:	29758804 	addi	r5,r5,-10720
 800ab50:	01820074 	movhi	r6,2049
 800ab54:	31b58804 	addi	r6,r6,-10720
 800ab58:	800c3e40 	call	800c3e4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 800ab5c:	800bf680 	call	800bf68 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 800ab60:	01020074 	movhi	r4,2049
 800ab64:	212ff104 	addi	r4,r4,-16444
 800ab68:	800cb280 	call	800cb28 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 800ab6c:	d126ac17 	ldw	r4,-25936(gp)
 800ab70:	d0e6ad17 	ldw	r3,-25932(gp)
 800ab74:	d0a6ae17 	ldw	r2,-25928(gp)
 800ab78:	180b883a 	mov	r5,r3
 800ab7c:	100d883a 	mov	r6,r2
 800ab80:	80005ec0 	call	80005ec <main>
 800ab84:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 800ab88:	01000044 	movi	r4,1
 800ab8c:	800a5e80 	call	800a5e8 <close>
  exit (result);
 800ab90:	e13fff17 	ldw	r4,-4(fp)
 800ab94:	8000e1c0 	call	8000e1c <exit>

0800ab98 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 800ab98:	defffe04 	addi	sp,sp,-8
 800ab9c:	df000115 	stw	fp,4(sp)
 800aba0:	df000104 	addi	fp,sp,4
 800aba4:	e13fff15 	stw	r4,-4(fp)
}
 800aba8:	e037883a 	mov	sp,fp
 800abac:	df000017 	ldw	fp,0(sp)
 800abb0:	dec00104 	addi	sp,sp,4
 800abb4:	f800283a 	ret

0800abb8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 800abb8:	defffe04 	addi	sp,sp,-8
 800abbc:	df000115 	stw	fp,4(sp)
 800abc0:	df000104 	addi	fp,sp,4
 800abc4:	e13fff15 	stw	r4,-4(fp)
}
 800abc8:	e037883a 	mov	sp,fp
 800abcc:	df000017 	ldw	fp,0(sp)
 800abd0:	dec00104 	addi	sp,sp,4
 800abd4:	f800283a 	ret

0800abd8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800abd8:	defffe04 	addi	sp,sp,-8
 800abdc:	dfc00115 	stw	ra,4(sp)
 800abe0:	df000015 	stw	fp,0(sp)
 800abe4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800abe8:	00820074 	movhi	r2,2049
 800abec:	10bc2104 	addi	r2,r2,-3964
 800abf0:	10800017 	ldw	r2,0(r2)
 800abf4:	10000526 	beq	r2,zero,800ac0c <alt_get_errno+0x34>
 800abf8:	00820074 	movhi	r2,2049
 800abfc:	10bc2104 	addi	r2,r2,-3964
 800ac00:	10800017 	ldw	r2,0(r2)
 800ac04:	103ee83a 	callr	r2
 800ac08:	00000206 	br	800ac14 <alt_get_errno+0x3c>
 800ac0c:	00820074 	movhi	r2,2049
 800ac10:	1082c204 	addi	r2,r2,2824
}
 800ac14:	e037883a 	mov	sp,fp
 800ac18:	dfc00117 	ldw	ra,4(sp)
 800ac1c:	df000017 	ldw	fp,0(sp)
 800ac20:	dec00204 	addi	sp,sp,8
 800ac24:	f800283a 	ret

0800ac28 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 800ac28:	defff904 	addi	sp,sp,-28
 800ac2c:	dfc00615 	stw	ra,24(sp)
 800ac30:	df000515 	stw	fp,20(sp)
 800ac34:	df000504 	addi	fp,sp,20
 800ac38:	e13ffd15 	stw	r4,-12(fp)
 800ac3c:	e17ffe15 	stw	r5,-8(fp)
 800ac40:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800ac44:	e0bffd17 	ldw	r2,-12(fp)
 800ac48:	10000716 	blt	r2,zero,800ac68 <read+0x40>
 800ac4c:	e13ffd17 	ldw	r4,-12(fp)
 800ac50:	01400304 	movi	r5,12
 800ac54:	8000df40 	call	8000df4 <__mulsi3>
 800ac58:	00c20074 	movhi	r3,2049
 800ac5c:	18f79f04 	addi	r3,r3,-8580
 800ac60:	10c5883a 	add	r2,r2,r3
 800ac64:	00000106 	br	800ac6c <read+0x44>
 800ac68:	0005883a 	mov	r2,zero
 800ac6c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800ac70:	e0bffb17 	ldw	r2,-20(fp)
 800ac74:	10002026 	beq	r2,zero,800acf8 <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800ac78:	e0bffb17 	ldw	r2,-20(fp)
 800ac7c:	10800217 	ldw	r2,8(r2)
 800ac80:	108000cc 	andi	r2,r2,3
 800ac84:	10800060 	cmpeqi	r2,r2,1
 800ac88:	1000171e 	bne	r2,zero,800ace8 <read+0xc0>
        (fd->dev->read))
 800ac8c:	e0bffb17 	ldw	r2,-20(fp)
 800ac90:	10800017 	ldw	r2,0(r2)
 800ac94:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800ac98:	10001326 	beq	r2,zero,800ace8 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 800ac9c:	e0bffb17 	ldw	r2,-20(fp)
 800aca0:	10800017 	ldw	r2,0(r2)
 800aca4:	10c00517 	ldw	r3,20(r2)
 800aca8:	e0bfff17 	ldw	r2,-4(fp)
 800acac:	e13ffb17 	ldw	r4,-20(fp)
 800acb0:	e17ffe17 	ldw	r5,-8(fp)
 800acb4:	100d883a 	mov	r6,r2
 800acb8:	183ee83a 	callr	r3
 800acbc:	e0bffc15 	stw	r2,-16(fp)
 800acc0:	e0bffc17 	ldw	r2,-16(fp)
 800acc4:	1000060e 	bge	r2,zero,800ace0 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 800acc8:	800abd80 	call	800abd8 <alt_get_errno>
 800accc:	e0fffc17 	ldw	r3,-16(fp)
 800acd0:	00c7c83a 	sub	r3,zero,r3
 800acd4:	10c00015 	stw	r3,0(r2)
          return -1;
 800acd8:	00bfffc4 	movi	r2,-1
 800acdc:	00000a06 	br	800ad08 <read+0xe0>
        }
        return rval;
 800ace0:	e0bffc17 	ldw	r2,-16(fp)
 800ace4:	00000806 	br	800ad08 <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 800ace8:	800abd80 	call	800abd8 <alt_get_errno>
 800acec:	00c00344 	movi	r3,13
 800acf0:	10c00015 	stw	r3,0(r2)
 800acf4:	00000306 	br	800ad04 <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 800acf8:	800abd80 	call	800abd8 <alt_get_errno>
 800acfc:	00c01444 	movi	r3,81
 800ad00:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 800ad04:	00bfffc4 	movi	r2,-1
}
 800ad08:	e037883a 	mov	sp,fp
 800ad0c:	dfc00117 	ldw	ra,4(sp)
 800ad10:	df000017 	ldw	fp,0(sp)
 800ad14:	dec00204 	addi	sp,sp,8
 800ad18:	f800283a 	ret

0800ad1c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 800ad1c:	defffc04 	addi	sp,sp,-16
 800ad20:	dfc00315 	stw	ra,12(sp)
 800ad24:	df000215 	stw	fp,8(sp)
 800ad28:	dc000115 	stw	r16,4(sp)
 800ad2c:	df000104 	addi	fp,sp,4
 800ad30:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 800ad34:	e0bfff17 	ldw	r2,-4(fp)
 800ad38:	108000d0 	cmplti	r2,r2,3
 800ad3c:	1000111e 	bne	r2,zero,800ad84 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 800ad40:	04020074 	movhi	r16,2049
 800ad44:	84379f04 	addi	r16,r16,-8580
 800ad48:	e0bfff17 	ldw	r2,-4(fp)
 800ad4c:	1009883a 	mov	r4,r2
 800ad50:	01400304 	movi	r5,12
 800ad54:	8000df40 	call	8000df4 <__mulsi3>
 800ad58:	8085883a 	add	r2,r16,r2
 800ad5c:	10800204 	addi	r2,r2,8
 800ad60:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 800ad64:	04020074 	movhi	r16,2049
 800ad68:	84379f04 	addi	r16,r16,-8580
 800ad6c:	e0bfff17 	ldw	r2,-4(fp)
 800ad70:	1009883a 	mov	r4,r2
 800ad74:	01400304 	movi	r5,12
 800ad78:	8000df40 	call	8000df4 <__mulsi3>
 800ad7c:	8085883a 	add	r2,r16,r2
 800ad80:	10000015 	stw	zero,0(r2)
  }
}
 800ad84:	e037883a 	mov	sp,fp
 800ad88:	dfc00217 	ldw	ra,8(sp)
 800ad8c:	df000117 	ldw	fp,4(sp)
 800ad90:	dc000017 	ldw	r16,0(sp)
 800ad94:	dec00304 	addi	sp,sp,12
 800ad98:	f800283a 	ret

0800ad9c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 800ad9c:	defff904 	addi	sp,sp,-28
 800ada0:	df000615 	stw	fp,24(sp)
 800ada4:	df000604 	addi	fp,sp,24
 800ada8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800adac:	0005303a 	rdctl	r2,status
 800adb0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800adb4:	e0fffc17 	ldw	r3,-16(fp)
 800adb8:	00bfff84 	movi	r2,-2
 800adbc:	1884703a 	and	r2,r3,r2
 800adc0:	1001703a 	wrctl	status,r2
  
  return context;
 800adc4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 800adc8:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 800adcc:	d0a00b17 	ldw	r2,-32724(gp)
 800add0:	10c000c4 	addi	r3,r2,3
 800add4:	00bfff04 	movi	r2,-4
 800add8:	1884703a 	and	r2,r3,r2
 800addc:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 800ade0:	d0e00b17 	ldw	r3,-32724(gp)
 800ade4:	e0bfff17 	ldw	r2,-4(fp)
 800ade8:	1885883a 	add	r2,r3,r2
 800adec:	00c40034 	movhi	r3,4096
 800adf0:	18c00004 	addi	r3,r3,0
 800adf4:	1880062e 	bgeu	r3,r2,800ae10 <sbrk+0x74>
 800adf8:	e0bffa17 	ldw	r2,-24(fp)
 800adfc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800ae00:	e0bffd17 	ldw	r2,-12(fp)
 800ae04:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 800ae08:	00bfffc4 	movi	r2,-1
 800ae0c:	00000b06 	br	800ae3c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 800ae10:	d0a00b17 	ldw	r2,-32724(gp)
 800ae14:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 800ae18:	d0e00b17 	ldw	r3,-32724(gp)
 800ae1c:	e0bfff17 	ldw	r2,-4(fp)
 800ae20:	1885883a 	add	r2,r3,r2
 800ae24:	d0a00b15 	stw	r2,-32724(gp)
 800ae28:	e0bffa17 	ldw	r2,-24(fp)
 800ae2c:	e0bffe15 	stw	r2,-8(fp)
 800ae30:	e0bffe17 	ldw	r2,-8(fp)
 800ae34:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 800ae38:	e0bffb17 	ldw	r2,-20(fp)
} 
 800ae3c:	e037883a 	mov	sp,fp
 800ae40:	df000017 	ldw	fp,0(sp)
 800ae44:	dec00104 	addi	sp,sp,4
 800ae48:	f800283a 	ret

0800ae4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800ae4c:	defffe04 	addi	sp,sp,-8
 800ae50:	dfc00115 	stw	ra,4(sp)
 800ae54:	df000015 	stw	fp,0(sp)
 800ae58:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800ae5c:	00820074 	movhi	r2,2049
 800ae60:	10bc2104 	addi	r2,r2,-3964
 800ae64:	10800017 	ldw	r2,0(r2)
 800ae68:	10000526 	beq	r2,zero,800ae80 <alt_get_errno+0x34>
 800ae6c:	00820074 	movhi	r2,2049
 800ae70:	10bc2104 	addi	r2,r2,-3964
 800ae74:	10800017 	ldw	r2,0(r2)
 800ae78:	103ee83a 	callr	r2
 800ae7c:	00000206 	br	800ae88 <alt_get_errno+0x3c>
 800ae80:	00820074 	movhi	r2,2049
 800ae84:	1082c204 	addi	r2,r2,2824
}
 800ae88:	e037883a 	mov	sp,fp
 800ae8c:	dfc00117 	ldw	ra,4(sp)
 800ae90:	df000017 	ldw	fp,0(sp)
 800ae94:	dec00204 	addi	sp,sp,8
 800ae98:	f800283a 	ret

0800ae9c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 800ae9c:	defff904 	addi	sp,sp,-28
 800aea0:	dfc00615 	stw	ra,24(sp)
 800aea4:	df000515 	stw	fp,20(sp)
 800aea8:	df000504 	addi	fp,sp,20
 800aeac:	e13ffd15 	stw	r4,-12(fp)
 800aeb0:	e17ffe15 	stw	r5,-8(fp)
 800aeb4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800aeb8:	e0bffd17 	ldw	r2,-12(fp)
 800aebc:	10000716 	blt	r2,zero,800aedc <write+0x40>
 800aec0:	e13ffd17 	ldw	r4,-12(fp)
 800aec4:	01400304 	movi	r5,12
 800aec8:	8000df40 	call	8000df4 <__mulsi3>
 800aecc:	00c20074 	movhi	r3,2049
 800aed0:	18f79f04 	addi	r3,r3,-8580
 800aed4:	10c5883a 	add	r2,r2,r3
 800aed8:	00000106 	br	800aee0 <write+0x44>
 800aedc:	0005883a 	mov	r2,zero
 800aee0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800aee4:	e0bffb17 	ldw	r2,-20(fp)
 800aee8:	10001f26 	beq	r2,zero,800af68 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 800aeec:	e0bffb17 	ldw	r2,-20(fp)
 800aef0:	10800217 	ldw	r2,8(r2)
 800aef4:	108000cc 	andi	r2,r2,3
 800aef8:	10001726 	beq	r2,zero,800af58 <write+0xbc>
 800aefc:	e0bffb17 	ldw	r2,-20(fp)
 800af00:	10800017 	ldw	r2,0(r2)
 800af04:	10800617 	ldw	r2,24(r2)
 800af08:	10001326 	beq	r2,zero,800af58 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 800af0c:	e0bffb17 	ldw	r2,-20(fp)
 800af10:	10800017 	ldw	r2,0(r2)
 800af14:	10c00617 	ldw	r3,24(r2)
 800af18:	e0bfff17 	ldw	r2,-4(fp)
 800af1c:	e13ffb17 	ldw	r4,-20(fp)
 800af20:	e17ffe17 	ldw	r5,-8(fp)
 800af24:	100d883a 	mov	r6,r2
 800af28:	183ee83a 	callr	r3
 800af2c:	e0bffc15 	stw	r2,-16(fp)
 800af30:	e0bffc17 	ldw	r2,-16(fp)
 800af34:	1000060e 	bge	r2,zero,800af50 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 800af38:	800ae4c0 	call	800ae4c <alt_get_errno>
 800af3c:	e0fffc17 	ldw	r3,-16(fp)
 800af40:	00c7c83a 	sub	r3,zero,r3
 800af44:	10c00015 	stw	r3,0(r2)
        return -1;
 800af48:	00bfffc4 	movi	r2,-1
 800af4c:	00000a06 	br	800af78 <write+0xdc>
      }
      return rval;
 800af50:	e0bffc17 	ldw	r2,-16(fp)
 800af54:	00000806 	br	800af78 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
 800af58:	800ae4c0 	call	800ae4c <alt_get_errno>
 800af5c:	00c00344 	movi	r3,13
 800af60:	10c00015 	stw	r3,0(r2)
 800af64:	00000306 	br	800af74 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 800af68:	800ae4c0 	call	800ae4c <alt_get_errno>
 800af6c:	00c01444 	movi	r3,81
 800af70:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 800af74:	00bfffc4 	movi	r2,-1
}
 800af78:	e037883a 	mov	sp,fp
 800af7c:	dfc00117 	ldw	ra,4(sp)
 800af80:	df000017 	ldw	fp,0(sp)
 800af84:	dec00204 	addi	sp,sp,8
 800af88:	f800283a 	ret

0800af8c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 800af8c:	defffd04 	addi	sp,sp,-12
 800af90:	dfc00215 	stw	ra,8(sp)
 800af94:	df000115 	stw	fp,4(sp)
 800af98:	df000104 	addi	fp,sp,4
 800af9c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 800afa0:	e13fff17 	ldw	r4,-4(fp)
 800afa4:	01420074 	movhi	r5,2049
 800afa8:	297c1e04 	addi	r5,r5,-3976
 800afac:	800bec80 	call	800bec8 <alt_dev_llist_insert>
}
 800afb0:	e037883a 	mov	sp,fp
 800afb4:	dfc00117 	ldw	ra,4(sp)
 800afb8:	df000017 	ldw	fp,0(sp)
 800afbc:	dec00204 	addi	sp,sp,8
 800afc0:	f800283a 	ret

0800afc4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 800afc4:	defffd04 	addi	sp,sp,-12
 800afc8:	dfc00215 	stw	ra,8(sp)
 800afcc:	df000115 	stw	fp,4(sp)
 800afd0:	df000104 	addi	fp,sp,4
 800afd4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
 800afd8:	800c8900 	call	800c890 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 800afdc:	00800044 	movi	r2,1
 800afe0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 800afe4:	e037883a 	mov	sp,fp
 800afe8:	dfc00117 	ldw	ra,4(sp)
 800afec:	df000017 	ldw	fp,0(sp)
 800aff0:	dec00204 	addi	sp,sp,8
 800aff4:	f800283a 	ret

0800aff8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 800aff8:	defffe04 	addi	sp,sp,-8
 800affc:	dfc00115 	stw	ra,4(sp)
 800b000:	df000015 	stw	fp,0(sp)
 800b004:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( HIGH_RESOLUTION_TIMER, high_resolution_timer);
 800b008:	00820074 	movhi	r2,2049
 800b00c:	1082c604 	addi	r2,r2,2840
 800b010:	00c40034 	movhi	r3,4096
 800b014:	10c00015 	stw	r3,0(r2)
 800b018:	00820074 	movhi	r2,2049
 800b01c:	1082c704 	addi	r2,r2,2844
 800b020:	00c02674 	movhi	r3,153
 800b024:	18e5a004 	addi	r3,r3,-27008
 800b028:	10c00015 	stw	r3,0(r2)
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
 800b02c:	01040034 	movhi	r4,4096
 800b030:	21000804 	addi	r4,r4,32
 800b034:	000b883a 	mov	r5,zero
 800b038:	01800044 	movi	r6,1
 800b03c:	01c0fa04 	movi	r7,1000
 800b040:	800bb540 	call	800bb54 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 800b044:	01020074 	movhi	r4,2049
 800b048:	21380904 	addi	r4,r4,-8156
 800b04c:	000b883a 	mov	r5,zero
 800b050:	01800404 	movi	r6,16
 800b054:	800b1e00 	call	800b1e0 <altera_avalon_jtag_uart_init>
 800b058:	01020074 	movhi	r4,2049
 800b05c:	2137ff04 	addi	r4,r4,-8196
 800b060:	800af8c0 	call	800af8c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
 800b064:	0001883a 	nop
}
 800b068:	e037883a 	mov	sp,fp
 800b06c:	dfc00117 	ldw	ra,4(sp)
 800b070:	df000017 	ldw	fp,0(sp)
 800b074:	dec00204 	addi	sp,sp,8
 800b078:	f800283a 	ret

0800b07c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 800b07c:	defffa04 	addi	sp,sp,-24
 800b080:	dfc00515 	stw	ra,20(sp)
 800b084:	df000415 	stw	fp,16(sp)
 800b088:	df000404 	addi	fp,sp,16
 800b08c:	e13ffd15 	stw	r4,-12(fp)
 800b090:	e17ffe15 	stw	r5,-8(fp)
 800b094:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800b098:	e0bffd17 	ldw	r2,-12(fp)
 800b09c:	10800017 	ldw	r2,0(r2)
 800b0a0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 800b0a4:	e0bffc17 	ldw	r2,-16(fp)
 800b0a8:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 800b0ac:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 800b0b0:	10800217 	ldw	r2,8(r2)
 800b0b4:	1809883a 	mov	r4,r3
 800b0b8:	e17ffe17 	ldw	r5,-8(fp)
 800b0bc:	e1bfff17 	ldw	r6,-4(fp)
 800b0c0:	100f883a 	mov	r7,r2
 800b0c4:	800b6a40 	call	800b6a4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 800b0c8:	e037883a 	mov	sp,fp
 800b0cc:	dfc00117 	ldw	ra,4(sp)
 800b0d0:	df000017 	ldw	fp,0(sp)
 800b0d4:	dec00204 	addi	sp,sp,8
 800b0d8:	f800283a 	ret

0800b0dc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 800b0dc:	defffa04 	addi	sp,sp,-24
 800b0e0:	dfc00515 	stw	ra,20(sp)
 800b0e4:	df000415 	stw	fp,16(sp)
 800b0e8:	df000404 	addi	fp,sp,16
 800b0ec:	e13ffd15 	stw	r4,-12(fp)
 800b0f0:	e17ffe15 	stw	r5,-8(fp)
 800b0f4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800b0f8:	e0bffd17 	ldw	r2,-12(fp)
 800b0fc:	10800017 	ldw	r2,0(r2)
 800b100:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 800b104:	e0bffc17 	ldw	r2,-16(fp)
 800b108:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 800b10c:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 800b110:	10800217 	ldw	r2,8(r2)
 800b114:	1809883a 	mov	r4,r3
 800b118:	e17ffe17 	ldw	r5,-8(fp)
 800b11c:	e1bfff17 	ldw	r6,-4(fp)
 800b120:	100f883a 	mov	r7,r2
 800b124:	800b8bc0 	call	800b8bc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 800b128:	e037883a 	mov	sp,fp
 800b12c:	dfc00117 	ldw	ra,4(sp)
 800b130:	df000017 	ldw	fp,0(sp)
 800b134:	dec00204 	addi	sp,sp,8
 800b138:	f800283a 	ret

0800b13c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 800b13c:	defffc04 	addi	sp,sp,-16
 800b140:	dfc00315 	stw	ra,12(sp)
 800b144:	df000215 	stw	fp,8(sp)
 800b148:	df000204 	addi	fp,sp,8
 800b14c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800b150:	e0bfff17 	ldw	r2,-4(fp)
 800b154:	10800017 	ldw	r2,0(r2)
 800b158:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 800b15c:	e0bffe17 	ldw	r2,-8(fp)
 800b160:	10c00a04 	addi	r3,r2,40
 800b164:	e0bfff17 	ldw	r2,-4(fp)
 800b168:	10800217 	ldw	r2,8(r2)
 800b16c:	1809883a 	mov	r4,r3
 800b170:	100b883a 	mov	r5,r2
 800b174:	800b5480 	call	800b548 <altera_avalon_jtag_uart_close>
}
 800b178:	e037883a 	mov	sp,fp
 800b17c:	dfc00117 	ldw	ra,4(sp)
 800b180:	df000017 	ldw	fp,0(sp)
 800b184:	dec00204 	addi	sp,sp,8
 800b188:	f800283a 	ret

0800b18c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 800b18c:	defffa04 	addi	sp,sp,-24
 800b190:	dfc00515 	stw	ra,20(sp)
 800b194:	df000415 	stw	fp,16(sp)
 800b198:	df000404 	addi	fp,sp,16
 800b19c:	e13ffd15 	stw	r4,-12(fp)
 800b1a0:	e17ffe15 	stw	r5,-8(fp)
 800b1a4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 800b1a8:	e0bffd17 	ldw	r2,-12(fp)
 800b1ac:	10800017 	ldw	r2,0(r2)
 800b1b0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 800b1b4:	e0bffc17 	ldw	r2,-16(fp)
 800b1b8:	10800a04 	addi	r2,r2,40
 800b1bc:	1009883a 	mov	r4,r2
 800b1c0:	e17ffe17 	ldw	r5,-8(fp)
 800b1c4:	e1bfff17 	ldw	r6,-4(fp)
 800b1c8:	800b5b00 	call	800b5b0 <altera_avalon_jtag_uart_ioctl>
}
 800b1cc:	e037883a 	mov	sp,fp
 800b1d0:	dfc00117 	ldw	ra,4(sp)
 800b1d4:	df000017 	ldw	fp,0(sp)
 800b1d8:	dec00204 	addi	sp,sp,8
 800b1dc:	f800283a 	ret

0800b1e0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 800b1e0:	defffa04 	addi	sp,sp,-24
 800b1e4:	dfc00515 	stw	ra,20(sp)
 800b1e8:	df000415 	stw	fp,16(sp)
 800b1ec:	df000404 	addi	fp,sp,16
 800b1f0:	e13ffd15 	stw	r4,-12(fp)
 800b1f4:	e17ffe15 	stw	r5,-8(fp)
 800b1f8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800b1fc:	e0bffd17 	ldw	r2,-12(fp)
 800b200:	00c00044 	movi	r3,1
 800b204:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 800b208:	e0bffd17 	ldw	r2,-12(fp)
 800b20c:	10800017 	ldw	r2,0(r2)
 800b210:	10800104 	addi	r2,r2,4
 800b214:	e0fffd17 	ldw	r3,-12(fp)
 800b218:	18c00817 	ldw	r3,32(r3)
 800b21c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 800b220:	e0fffe17 	ldw	r3,-8(fp)
 800b224:	e0bfff17 	ldw	r2,-4(fp)
 800b228:	d8000015 	stw	zero,0(sp)
 800b22c:	1809883a 	mov	r4,r3
 800b230:	100b883a 	mov	r5,r2
 800b234:	01820074 	movhi	r6,2049
 800b238:	31aca804 	addi	r6,r6,-19808
 800b23c:	e1fffd17 	ldw	r7,-12(fp)
 800b240:	800c03c0 	call	800c03c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 800b244:	e0bffd17 	ldw	r2,-12(fp)
 800b248:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 800b24c:	e0bffd17 	ldw	r2,-12(fp)
 800b250:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800b254:	00820074 	movhi	r2,2049
 800b258:	1082c904 	addi	r2,r2,2852
 800b25c:	10800017 	ldw	r2,0(r2)
 800b260:	1809883a 	mov	r4,r3
 800b264:	100b883a 	mov	r5,r2
 800b268:	01820074 	movhi	r6,2049
 800b26c:	31ad2904 	addi	r6,r6,-19292
 800b270:	e1fffd17 	ldw	r7,-12(fp)
 800b274:	800bd1c0 	call	800bd1c <alt_alarm_start>
 800b278:	1000040e 	bge	r2,zero,800b28c <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 800b27c:	e0bffd17 	ldw	r2,-12(fp)
 800b280:	00e00034 	movhi	r3,32768
 800b284:	18ffffc4 	addi	r3,r3,-1
 800b288:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 800b28c:	e037883a 	mov	sp,fp
 800b290:	dfc00117 	ldw	ra,4(sp)
 800b294:	df000017 	ldw	fp,0(sp)
 800b298:	dec00204 	addi	sp,sp,8
 800b29c:	f800283a 	ret

0800b2a0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 800b2a0:	defff804 	addi	sp,sp,-32
 800b2a4:	df000715 	stw	fp,28(sp)
 800b2a8:	df000704 	addi	fp,sp,28
 800b2ac:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 800b2b0:	e0bfff17 	ldw	r2,-4(fp)
 800b2b4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 800b2b8:	e0bffb17 	ldw	r2,-20(fp)
 800b2bc:	10800017 	ldw	r2,0(r2)
 800b2c0:	e0bffc15 	stw	r2,-16(fp)
 800b2c4:	00000106 	br	800b2cc <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
 800b2c8:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800b2cc:	e0bffc17 	ldw	r2,-16(fp)
 800b2d0:	10800104 	addi	r2,r2,4
 800b2d4:	10800037 	ldwio	r2,0(r2)
 800b2d8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 800b2dc:	e0bffd17 	ldw	r2,-12(fp)
 800b2e0:	1080c00c 	andi	r2,r2,768
 800b2e4:	10006a26 	beq	r2,zero,800b490 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 800b2e8:	e0bffd17 	ldw	r2,-12(fp)
 800b2ec:	1080400c 	andi	r2,r2,256
 800b2f0:	10003326 	beq	r2,zero,800b3c0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 800b2f4:	00800074 	movhi	r2,1
 800b2f8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800b2fc:	e0bffb17 	ldw	r2,-20(fp)
 800b300:	10800a17 	ldw	r2,40(r2)
 800b304:	10800044 	addi	r2,r2,1
 800b308:	1081ffcc 	andi	r2,r2,2047
 800b30c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 800b310:	e0bffb17 	ldw	r2,-20(fp)
 800b314:	10c00b17 	ldw	r3,44(r2)
 800b318:	e0bffe17 	ldw	r2,-8(fp)
 800b31c:	18801426 	beq	r3,r2,800b370 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 800b320:	e0bffc17 	ldw	r2,-16(fp)
 800b324:	10800037 	ldwio	r2,0(r2)
 800b328:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 800b32c:	e0bff917 	ldw	r2,-28(fp)
 800b330:	10a0000c 	andi	r2,r2,32768
 800b334:	10001026 	beq	r2,zero,800b378 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 800b338:	e0bffb17 	ldw	r2,-20(fp)
 800b33c:	10800a17 	ldw	r2,40(r2)
 800b340:	e0fff917 	ldw	r3,-28(fp)
 800b344:	e13ffb17 	ldw	r4,-20(fp)
 800b348:	2085883a 	add	r2,r4,r2
 800b34c:	10800e04 	addi	r2,r2,56
 800b350:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800b354:	e0bffb17 	ldw	r2,-20(fp)
 800b358:	10800a17 	ldw	r2,40(r2)
 800b35c:	10800044 	addi	r2,r2,1
 800b360:	10c1ffcc 	andi	r3,r2,2047
 800b364:	e0bffb17 	ldw	r2,-20(fp)
 800b368:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 800b36c:	003fe306 	br	800b2fc <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 800b370:	0001883a 	nop
 800b374:	00000106 	br	800b37c <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 800b378:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 800b37c:	e0bff917 	ldw	r2,-28(fp)
 800b380:	10bfffec 	andhi	r2,r2,65535
 800b384:	10000e26 	beq	r2,zero,800b3c0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800b388:	e0bffb17 	ldw	r2,-20(fp)
 800b38c:	10c00817 	ldw	r3,32(r2)
 800b390:	00bfff84 	movi	r2,-2
 800b394:	1886703a 	and	r3,r3,r2
 800b398:	e0bffb17 	ldw	r2,-20(fp)
 800b39c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 800b3a0:	e0bffc17 	ldw	r2,-16(fp)
 800b3a4:	10800104 	addi	r2,r2,4
 800b3a8:	e0fffb17 	ldw	r3,-20(fp)
 800b3ac:	18c00817 	ldw	r3,32(r3)
 800b3b0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800b3b4:	e0bffc17 	ldw	r2,-16(fp)
 800b3b8:	10800104 	addi	r2,r2,4
 800b3bc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 800b3c0:	e0bffd17 	ldw	r2,-12(fp)
 800b3c4:	1080800c 	andi	r2,r2,512
 800b3c8:	103fbf26 	beq	r2,zero,800b2c8 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 800b3cc:	e0bffd17 	ldw	r2,-12(fp)
 800b3d0:	1004d43a 	srli	r2,r2,16
 800b3d4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 800b3d8:	00001406 	br	800b42c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 800b3dc:	e0bffc17 	ldw	r2,-16(fp)
 800b3e0:	e0fffb17 	ldw	r3,-20(fp)
 800b3e4:	18c00d17 	ldw	r3,52(r3)
 800b3e8:	e13ffb17 	ldw	r4,-20(fp)
 800b3ec:	20c7883a 	add	r3,r4,r3
 800b3f0:	18c20e04 	addi	r3,r3,2104
 800b3f4:	18c00003 	ldbu	r3,0(r3)
 800b3f8:	18c03fcc 	andi	r3,r3,255
 800b3fc:	18c0201c 	xori	r3,r3,128
 800b400:	18ffe004 	addi	r3,r3,-128
 800b404:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800b408:	e0bffb17 	ldw	r2,-20(fp)
 800b40c:	10800d17 	ldw	r2,52(r2)
 800b410:	10800044 	addi	r2,r2,1
 800b414:	10c1ffcc 	andi	r3,r2,2047
 800b418:	e0bffb17 	ldw	r2,-20(fp)
 800b41c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 800b420:	e0bffa17 	ldw	r2,-24(fp)
 800b424:	10bfffc4 	addi	r2,r2,-1
 800b428:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 800b42c:	e0bffa17 	ldw	r2,-24(fp)
 800b430:	10000526 	beq	r2,zero,800b448 <altera_avalon_jtag_uart_irq+0x1a8>
 800b434:	e0bffb17 	ldw	r2,-20(fp)
 800b438:	10c00d17 	ldw	r3,52(r2)
 800b43c:	e0bffb17 	ldw	r2,-20(fp)
 800b440:	10800c17 	ldw	r2,48(r2)
 800b444:	18bfe51e 	bne	r3,r2,800b3dc <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 800b448:	e0bffa17 	ldw	r2,-24(fp)
 800b44c:	103f9e26 	beq	r2,zero,800b2c8 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800b450:	e0bffb17 	ldw	r2,-20(fp)
 800b454:	10c00817 	ldw	r3,32(r2)
 800b458:	00bfff44 	movi	r2,-3
 800b45c:	1886703a 	and	r3,r3,r2
 800b460:	e0bffb17 	ldw	r2,-20(fp)
 800b464:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800b468:	e0bffb17 	ldw	r2,-20(fp)
 800b46c:	10800017 	ldw	r2,0(r2)
 800b470:	10800104 	addi	r2,r2,4
 800b474:	e0fffb17 	ldw	r3,-20(fp)
 800b478:	18c00817 	ldw	r3,32(r3)
 800b47c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800b480:	e0bffc17 	ldw	r2,-16(fp)
 800b484:	10800104 	addi	r2,r2,4
 800b488:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 800b48c:	003f8e06 	br	800b2c8 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 800b490:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 800b494:	e037883a 	mov	sp,fp
 800b498:	df000017 	ldw	fp,0(sp)
 800b49c:	dec00104 	addi	sp,sp,4
 800b4a0:	f800283a 	ret

0800b4a4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 800b4a4:	defffc04 	addi	sp,sp,-16
 800b4a8:	df000315 	stw	fp,12(sp)
 800b4ac:	df000304 	addi	fp,sp,12
 800b4b0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 800b4b4:	e0bfff17 	ldw	r2,-4(fp)
 800b4b8:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 800b4bc:	e0bffd17 	ldw	r2,-12(fp)
 800b4c0:	10800017 	ldw	r2,0(r2)
 800b4c4:	10800104 	addi	r2,r2,4
 800b4c8:	10800037 	ldwio	r2,0(r2)
 800b4cc:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 800b4d0:	e0bffe17 	ldw	r2,-8(fp)
 800b4d4:	1081000c 	andi	r2,r2,1024
 800b4d8:	10000a26 	beq	r2,zero,800b504 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 800b4dc:	e0bffd17 	ldw	r2,-12(fp)
 800b4e0:	10800017 	ldw	r2,0(r2)
 800b4e4:	10800104 	addi	r2,r2,4
 800b4e8:	e0fffd17 	ldw	r3,-12(fp)
 800b4ec:	18c00817 	ldw	r3,32(r3)
 800b4f0:	18c10014 	ori	r3,r3,1024
 800b4f4:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 800b4f8:	e0bffd17 	ldw	r2,-12(fp)
 800b4fc:	10000915 	stw	zero,36(r2)
 800b500:	00000a06 	br	800b52c <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 800b504:	e0bffd17 	ldw	r2,-12(fp)
 800b508:	10800917 	ldw	r2,36(r2)
 800b50c:	00e00034 	movhi	r3,32768
 800b510:	18ffff04 	addi	r3,r3,-4
 800b514:	18800536 	bltu	r3,r2,800b52c <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
 800b518:	e0bffd17 	ldw	r2,-12(fp)
 800b51c:	10800917 	ldw	r2,36(r2)
 800b520:	10c00044 	addi	r3,r2,1
 800b524:	e0bffd17 	ldw	r2,-12(fp)
 800b528:	10c00915 	stw	r3,36(r2)
 800b52c:	00820074 	movhi	r2,2049
 800b530:	1082c904 	addi	r2,r2,2852
 800b534:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 800b538:	e037883a 	mov	sp,fp
 800b53c:	df000017 	ldw	fp,0(sp)
 800b540:	dec00104 	addi	sp,sp,4
 800b544:	f800283a 	ret

0800b548 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 800b548:	defffd04 	addi	sp,sp,-12
 800b54c:	df000215 	stw	fp,8(sp)
 800b550:	df000204 	addi	fp,sp,8
 800b554:	e13ffe15 	stw	r4,-8(fp)
 800b558:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800b55c:	00000506 	br	800b574 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 800b560:	e0bfff17 	ldw	r2,-4(fp)
 800b564:	1090000c 	andi	r2,r2,16384
 800b568:	10000226 	beq	r2,zero,800b574 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 800b56c:	00bffd44 	movi	r2,-11
 800b570:	00000b06 	br	800b5a0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800b574:	e0bffe17 	ldw	r2,-8(fp)
 800b578:	10c00d17 	ldw	r3,52(r2)
 800b57c:	e0bffe17 	ldw	r2,-8(fp)
 800b580:	10800c17 	ldw	r2,48(r2)
 800b584:	18800526 	beq	r3,r2,800b59c <altera_avalon_jtag_uart_close+0x54>
 800b588:	e0bffe17 	ldw	r2,-8(fp)
 800b58c:	10c00917 	ldw	r3,36(r2)
 800b590:	e0bffe17 	ldw	r2,-8(fp)
 800b594:	10800117 	ldw	r2,4(r2)
 800b598:	18bff136 	bltu	r3,r2,800b560 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 800b59c:	0005883a 	mov	r2,zero
}
 800b5a0:	e037883a 	mov	sp,fp
 800b5a4:	df000017 	ldw	fp,0(sp)
 800b5a8:	dec00104 	addi	sp,sp,4
 800b5ac:	f800283a 	ret

0800b5b0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 800b5b0:	defffa04 	addi	sp,sp,-24
 800b5b4:	df000515 	stw	fp,20(sp)
 800b5b8:	df000504 	addi	fp,sp,20
 800b5bc:	e13ffd15 	stw	r4,-12(fp)
 800b5c0:	e17ffe15 	stw	r5,-8(fp)
 800b5c4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 800b5c8:	00bff9c4 	movi	r2,-25
 800b5cc:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 800b5d0:	e0bffe17 	ldw	r2,-8(fp)
 800b5d4:	10da8060 	cmpeqi	r3,r2,27137
 800b5d8:	1800031e 	bne	r3,zero,800b5e8 <altera_avalon_jtag_uart_ioctl+0x38>
 800b5dc:	109a80a0 	cmpeqi	r2,r2,27138
 800b5e0:	1000181e 	bne	r2,zero,800b644 <altera_avalon_jtag_uart_ioctl+0x94>
 800b5e4:	00002606 	br	800b680 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 800b5e8:	e0bffd17 	ldw	r2,-12(fp)
 800b5ec:	10c00117 	ldw	r3,4(r2)
 800b5f0:	00a00034 	movhi	r2,32768
 800b5f4:	10bfffc4 	addi	r2,r2,-1
 800b5f8:	18802226 	beq	r3,r2,800b684 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
 800b5fc:	e0bfff17 	ldw	r2,-4(fp)
 800b600:	10800017 	ldw	r2,0(r2)
 800b604:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 800b608:	e0bffc17 	ldw	r2,-16(fp)
 800b60c:	10800090 	cmplti	r2,r2,2
 800b610:	1000061e 	bne	r2,zero,800b62c <altera_avalon_jtag_uart_ioctl+0x7c>
 800b614:	e0fffc17 	ldw	r3,-16(fp)
 800b618:	00a00034 	movhi	r2,32768
 800b61c:	10bfffc4 	addi	r2,r2,-1
 800b620:	18800226 	beq	r3,r2,800b62c <altera_avalon_jtag_uart_ioctl+0x7c>
 800b624:	e0bffc17 	ldw	r2,-16(fp)
 800b628:	00000206 	br	800b634 <altera_avalon_jtag_uart_ioctl+0x84>
 800b62c:	00a00034 	movhi	r2,32768
 800b630:	10bfff84 	addi	r2,r2,-2
 800b634:	e0fffd17 	ldw	r3,-12(fp)
 800b638:	18800115 	stw	r2,4(r3)
      rc = 0;
 800b63c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800b640:	00001006 	br	800b684 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 800b644:	e0bffd17 	ldw	r2,-12(fp)
 800b648:	10c00117 	ldw	r3,4(r2)
 800b64c:	00a00034 	movhi	r2,32768
 800b650:	10bfffc4 	addi	r2,r2,-1
 800b654:	18800d26 	beq	r3,r2,800b68c <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 800b658:	e0bffd17 	ldw	r2,-12(fp)
 800b65c:	10c00917 	ldw	r3,36(r2)
 800b660:	e0bffd17 	ldw	r2,-12(fp)
 800b664:	10800117 	ldw	r2,4(r2)
 800b668:	1885803a 	cmpltu	r2,r3,r2
 800b66c:	10c03fcc 	andi	r3,r2,255
 800b670:	e0bfff17 	ldw	r2,-4(fp)
 800b674:	10c00015 	stw	r3,0(r2)
      rc = 0;
 800b678:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800b67c:	00000306 	br	800b68c <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
 800b680:	00000306 	br	800b690 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 800b684:	0001883a 	nop
 800b688:	00000106 	br	800b690 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 800b68c:	0001883a 	nop

  default:
    break;
  }

  return rc;
 800b690:	e0bffb17 	ldw	r2,-20(fp)
}
 800b694:	e037883a 	mov	sp,fp
 800b698:	df000017 	ldw	fp,0(sp)
 800b69c:	dec00104 	addi	sp,sp,4
 800b6a0:	f800283a 	ret

0800b6a4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 800b6a4:	defff304 	addi	sp,sp,-52
 800b6a8:	dfc00c15 	stw	ra,48(sp)
 800b6ac:	df000b15 	stw	fp,44(sp)
 800b6b0:	df000b04 	addi	fp,sp,44
 800b6b4:	e13ffc15 	stw	r4,-16(fp)
 800b6b8:	e17ffd15 	stw	r5,-12(fp)
 800b6bc:	e1bffe15 	stw	r6,-8(fp)
 800b6c0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 800b6c4:	e0bffd17 	ldw	r2,-12(fp)
 800b6c8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800b6cc:	00004706 	br	800b7ec <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 800b6d0:	e0bffc17 	ldw	r2,-16(fp)
 800b6d4:	10800a17 	ldw	r2,40(r2)
 800b6d8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 800b6dc:	e0bffc17 	ldw	r2,-16(fp)
 800b6e0:	10800b17 	ldw	r2,44(r2)
 800b6e4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 800b6e8:	e0fff717 	ldw	r3,-36(fp)
 800b6ec:	e0bff817 	ldw	r2,-32(fp)
 800b6f0:	18800536 	bltu	r3,r2,800b708 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 800b6f4:	e0fff717 	ldw	r3,-36(fp)
 800b6f8:	e0bff817 	ldw	r2,-32(fp)
 800b6fc:	1885c83a 	sub	r2,r3,r2
 800b700:	e0bff615 	stw	r2,-40(fp)
 800b704:	00000406 	br	800b718 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 800b708:	00c20004 	movi	r3,2048
 800b70c:	e0bff817 	ldw	r2,-32(fp)
 800b710:	1885c83a 	sub	r2,r3,r2
 800b714:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800b718:	e0bff617 	ldw	r2,-40(fp)
 800b71c:	10001e26 	beq	r2,zero,800b798 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 800b720:	e0fffe17 	ldw	r3,-8(fp)
 800b724:	e0bff617 	ldw	r2,-40(fp)
 800b728:	1880022e 	bgeu	r3,r2,800b734 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 800b72c:	e0bffe17 	ldw	r2,-8(fp)
 800b730:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 800b734:	e0bff817 	ldw	r2,-32(fp)
 800b738:	10800e04 	addi	r2,r2,56
 800b73c:	e0fffc17 	ldw	r3,-16(fp)
 800b740:	1885883a 	add	r2,r3,r2
 800b744:	e13ff517 	ldw	r4,-44(fp)
 800b748:	100b883a 	mov	r5,r2
 800b74c:	e1bff617 	ldw	r6,-40(fp)
 800b750:	80064740 	call	8006474 <memcpy>
      ptr   += n;
 800b754:	e0fff517 	ldw	r3,-44(fp)
 800b758:	e0bff617 	ldw	r2,-40(fp)
 800b75c:	1885883a 	add	r2,r3,r2
 800b760:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 800b764:	e0fffe17 	ldw	r3,-8(fp)
 800b768:	e0bff617 	ldw	r2,-40(fp)
 800b76c:	1885c83a 	sub	r2,r3,r2
 800b770:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800b774:	e0fff817 	ldw	r3,-32(fp)
 800b778:	e0bff617 	ldw	r2,-40(fp)
 800b77c:	1885883a 	add	r2,r3,r2
 800b780:	10c1ffcc 	andi	r3,r2,2047
 800b784:	e0bffc17 	ldw	r2,-16(fp)
 800b788:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 800b78c:	e0bffe17 	ldw	r2,-8(fp)
 800b790:	00bfcf16 	blt	zero,r2,800b6d0 <altera_avalon_jtag_uart_read+0x2c>
 800b794:	00000106 	br	800b79c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 800b798:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 800b79c:	e0fff517 	ldw	r3,-44(fp)
 800b7a0:	e0bffd17 	ldw	r2,-12(fp)
 800b7a4:	1880141e 	bne	r3,r2,800b7f8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 800b7a8:	e0bfff17 	ldw	r2,-4(fp)
 800b7ac:	1090000c 	andi	r2,r2,16384
 800b7b0:	1000131e 	bne	r2,zero,800b800 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 800b7b4:	0001883a 	nop
 800b7b8:	e0bffc17 	ldw	r2,-16(fp)
 800b7bc:	10c00a17 	ldw	r3,40(r2)
 800b7c0:	e0bff717 	ldw	r2,-36(fp)
 800b7c4:	1880051e 	bne	r3,r2,800b7dc <altera_avalon_jtag_uart_read+0x138>
 800b7c8:	e0bffc17 	ldw	r2,-16(fp)
 800b7cc:	10c00917 	ldw	r3,36(r2)
 800b7d0:	e0bffc17 	ldw	r2,-16(fp)
 800b7d4:	10800117 	ldw	r2,4(r2)
 800b7d8:	18bff736 	bltu	r3,r2,800b7b8 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 800b7dc:	e0bffc17 	ldw	r2,-16(fp)
 800b7e0:	10c00a17 	ldw	r3,40(r2)
 800b7e4:	e0bff717 	ldw	r2,-36(fp)
 800b7e8:	18800726 	beq	r3,r2,800b808 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800b7ec:	e0bffe17 	ldw	r2,-8(fp)
 800b7f0:	00bfb716 	blt	zero,r2,800b6d0 <altera_avalon_jtag_uart_read+0x2c>
 800b7f4:	00000506 	br	800b80c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 800b7f8:	0001883a 	nop
 800b7fc:	00000306 	br	800b80c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 800b800:	0001883a 	nop
 800b804:	00000106 	br	800b80c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 800b808:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 800b80c:	e0fff517 	ldw	r3,-44(fp)
 800b810:	e0bffd17 	ldw	r2,-12(fp)
 800b814:	18801726 	beq	r3,r2,800b874 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800b818:	0005303a 	rdctl	r2,status
 800b81c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800b820:	e0fffa17 	ldw	r3,-24(fp)
 800b824:	00bfff84 	movi	r2,-2
 800b828:	1884703a 	and	r2,r3,r2
 800b82c:	1001703a 	wrctl	status,r2
  
  return context;
 800b830:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 800b834:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800b838:	e0bffc17 	ldw	r2,-16(fp)
 800b83c:	10800817 	ldw	r2,32(r2)
 800b840:	10c00054 	ori	r3,r2,1
 800b844:	e0bffc17 	ldw	r2,-16(fp)
 800b848:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800b84c:	e0bffc17 	ldw	r2,-16(fp)
 800b850:	10800017 	ldw	r2,0(r2)
 800b854:	10800104 	addi	r2,r2,4
 800b858:	e0fffc17 	ldw	r3,-16(fp)
 800b85c:	18c00817 	ldw	r3,32(r3)
 800b860:	10c00035 	stwio	r3,0(r2)
 800b864:	e0bff917 	ldw	r2,-28(fp)
 800b868:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800b86c:	e0bffb17 	ldw	r2,-20(fp)
 800b870:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 800b874:	e0fff517 	ldw	r3,-44(fp)
 800b878:	e0bffd17 	ldw	r2,-12(fp)
 800b87c:	18800426 	beq	r3,r2,800b890 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
 800b880:	e0fff517 	ldw	r3,-44(fp)
 800b884:	e0bffd17 	ldw	r2,-12(fp)
 800b888:	1885c83a 	sub	r2,r3,r2
 800b88c:	00000606 	br	800b8a8 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
 800b890:	e0bfff17 	ldw	r2,-4(fp)
 800b894:	1090000c 	andi	r2,r2,16384
 800b898:	10000226 	beq	r2,zero,800b8a4 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
 800b89c:	00bffd44 	movi	r2,-11
 800b8a0:	00000106 	br	800b8a8 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
 800b8a4:	00bffec4 	movi	r2,-5
}
 800b8a8:	e037883a 	mov	sp,fp
 800b8ac:	dfc00117 	ldw	ra,4(sp)
 800b8b0:	df000017 	ldw	fp,0(sp)
 800b8b4:	dec00204 	addi	sp,sp,8
 800b8b8:	f800283a 	ret

0800b8bc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 800b8bc:	defff304 	addi	sp,sp,-52
 800b8c0:	dfc00c15 	stw	ra,48(sp)
 800b8c4:	df000b15 	stw	fp,44(sp)
 800b8c8:	df000b04 	addi	fp,sp,44
 800b8cc:	e13ffc15 	stw	r4,-16(fp)
 800b8d0:	e17ffd15 	stw	r5,-12(fp)
 800b8d4:	e1bffe15 	stw	r6,-8(fp)
 800b8d8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 800b8dc:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 800b8e0:	e0bffd17 	ldw	r2,-12(fp)
 800b8e4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800b8e8:	00003706 	br	800b9c8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 800b8ec:	e0bffc17 	ldw	r2,-16(fp)
 800b8f0:	10800c17 	ldw	r2,48(r2)
 800b8f4:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 800b8f8:	e0bffc17 	ldw	r2,-16(fp)
 800b8fc:	10800d17 	ldw	r2,52(r2)
 800b900:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 800b904:	e0fff817 	ldw	r3,-32(fp)
 800b908:	e0bff517 	ldw	r2,-44(fp)
 800b90c:	1880062e 	bgeu	r3,r2,800b928 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 800b910:	e0fff517 	ldw	r3,-44(fp)
 800b914:	e0bff817 	ldw	r2,-32(fp)
 800b918:	1885c83a 	sub	r2,r3,r2
 800b91c:	10bfffc4 	addi	r2,r2,-1
 800b920:	e0bff615 	stw	r2,-40(fp)
 800b924:	00000b06 	br	800b954 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 800b928:	e0bff517 	ldw	r2,-44(fp)
 800b92c:	10000526 	beq	r2,zero,800b944 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 800b930:	00c20004 	movi	r3,2048
 800b934:	e0bff817 	ldw	r2,-32(fp)
 800b938:	1885c83a 	sub	r2,r3,r2
 800b93c:	e0bff615 	stw	r2,-40(fp)
 800b940:	00000406 	br	800b954 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 800b944:	00c1ffc4 	movi	r3,2047
 800b948:	e0bff817 	ldw	r2,-32(fp)
 800b94c:	1885c83a 	sub	r2,r3,r2
 800b950:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800b954:	e0bff617 	ldw	r2,-40(fp)
 800b958:	10001e26 	beq	r2,zero,800b9d4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 800b95c:	e0fffe17 	ldw	r3,-8(fp)
 800b960:	e0bff617 	ldw	r2,-40(fp)
 800b964:	1880022e 	bgeu	r3,r2,800b970 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 800b968:	e0bffe17 	ldw	r2,-8(fp)
 800b96c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 800b970:	e0bff817 	ldw	r2,-32(fp)
 800b974:	10820e04 	addi	r2,r2,2104
 800b978:	e0fffc17 	ldw	r3,-16(fp)
 800b97c:	1885883a 	add	r2,r3,r2
 800b980:	1009883a 	mov	r4,r2
 800b984:	e17ffd17 	ldw	r5,-12(fp)
 800b988:	e1bff617 	ldw	r6,-40(fp)
 800b98c:	80064740 	call	8006474 <memcpy>
      ptr   += n;
 800b990:	e0fffd17 	ldw	r3,-12(fp)
 800b994:	e0bff617 	ldw	r2,-40(fp)
 800b998:	1885883a 	add	r2,r3,r2
 800b99c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 800b9a0:	e0fffe17 	ldw	r3,-8(fp)
 800b9a4:	e0bff617 	ldw	r2,-40(fp)
 800b9a8:	1885c83a 	sub	r2,r3,r2
 800b9ac:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800b9b0:	e0fff817 	ldw	r3,-32(fp)
 800b9b4:	e0bff617 	ldw	r2,-40(fp)
 800b9b8:	1885883a 	add	r2,r3,r2
 800b9bc:	10c1ffcc 	andi	r3,r2,2047
 800b9c0:	e0bffc17 	ldw	r2,-16(fp)
 800b9c4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800b9c8:	e0bffe17 	ldw	r2,-8(fp)
 800b9cc:	00bfc716 	blt	zero,r2,800b8ec <altera_avalon_jtag_uart_write+0x30>
 800b9d0:	00000106 	br	800b9d8 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 800b9d4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800b9d8:	0005303a 	rdctl	r2,status
 800b9dc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800b9e0:	e0fffa17 	ldw	r3,-24(fp)
 800b9e4:	00bfff84 	movi	r2,-2
 800b9e8:	1884703a 	and	r2,r3,r2
 800b9ec:	1001703a 	wrctl	status,r2
  
  return context;
 800b9f0:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 800b9f4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800b9f8:	e0bffc17 	ldw	r2,-16(fp)
 800b9fc:	10800817 	ldw	r2,32(r2)
 800ba00:	10c00094 	ori	r3,r2,2
 800ba04:	e0bffc17 	ldw	r2,-16(fp)
 800ba08:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800ba0c:	e0bffc17 	ldw	r2,-16(fp)
 800ba10:	10800017 	ldw	r2,0(r2)
 800ba14:	10800104 	addi	r2,r2,4
 800ba18:	e0fffc17 	ldw	r3,-16(fp)
 800ba1c:	18c00817 	ldw	r3,32(r3)
 800ba20:	10c00035 	stwio	r3,0(r2)
 800ba24:	e0bff917 	ldw	r2,-28(fp)
 800ba28:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800ba2c:	e0bffb17 	ldw	r2,-20(fp)
 800ba30:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 800ba34:	e0bffe17 	ldw	r2,-8(fp)
 800ba38:	0080110e 	bge	zero,r2,800ba80 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 800ba3c:	e0bfff17 	ldw	r2,-4(fp)
 800ba40:	1090000c 	andi	r2,r2,16384
 800ba44:	1000111e 	bne	r2,zero,800ba8c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 800ba48:	0001883a 	nop
 800ba4c:	e0bffc17 	ldw	r2,-16(fp)
 800ba50:	10c00d17 	ldw	r3,52(r2)
 800ba54:	e0bff517 	ldw	r2,-44(fp)
 800ba58:	1880051e 	bne	r3,r2,800ba70 <altera_avalon_jtag_uart_write+0x1b4>
 800ba5c:	e0bffc17 	ldw	r2,-16(fp)
 800ba60:	10c00917 	ldw	r3,36(r2)
 800ba64:	e0bffc17 	ldw	r2,-16(fp)
 800ba68:	10800117 	ldw	r2,4(r2)
 800ba6c:	18bff736 	bltu	r3,r2,800ba4c <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 800ba70:	e0bffc17 	ldw	r2,-16(fp)
 800ba74:	10c00d17 	ldw	r3,52(r2)
 800ba78:	e0bff517 	ldw	r2,-44(fp)
 800ba7c:	18800526 	beq	r3,r2,800ba94 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 800ba80:	e0bffe17 	ldw	r2,-8(fp)
 800ba84:	00bfd016 	blt	zero,r2,800b9c8 <altera_avalon_jtag_uart_write+0x10c>
 800ba88:	00000306 	br	800ba98 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 800ba8c:	0001883a 	nop
 800ba90:	00000106 	br	800ba98 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
 800ba94:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 800ba98:	e0fffd17 	ldw	r3,-12(fp)
 800ba9c:	e0bff717 	ldw	r2,-36(fp)
 800baa0:	18800426 	beq	r3,r2,800bab4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 800baa4:	e0fffd17 	ldw	r3,-12(fp)
 800baa8:	e0bff717 	ldw	r2,-36(fp)
 800baac:	1885c83a 	sub	r2,r3,r2
 800bab0:	00000606 	br	800bacc <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 800bab4:	e0bfff17 	ldw	r2,-4(fp)
 800bab8:	1090000c 	andi	r2,r2,16384
 800babc:	10000226 	beq	r2,zero,800bac8 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 800bac0:	00bffd44 	movi	r2,-11
 800bac4:	00000106 	br	800bacc <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 800bac8:	00bffec4 	movi	r2,-5
}
 800bacc:	e037883a 	mov	sp,fp
 800bad0:	dfc00117 	ldw	ra,4(sp)
 800bad4:	df000017 	ldw	fp,0(sp)
 800bad8:	dec00204 	addi	sp,sp,8
 800badc:	f800283a 	ret

0800bae0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 800bae0:	defffa04 	addi	sp,sp,-24
 800bae4:	dfc00515 	stw	ra,20(sp)
 800bae8:	df000415 	stw	fp,16(sp)
 800baec:	df000404 	addi	fp,sp,16
 800baf0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 800baf4:	0007883a 	mov	r3,zero
 800baf8:	e0bfff17 	ldw	r2,-4(fp)
 800bafc:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 800bb00:	e0bfff17 	ldw	r2,-4(fp)
 800bb04:	10800104 	addi	r2,r2,4
 800bb08:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800bb0c:	0005303a 	rdctl	r2,status
 800bb10:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800bb14:	e0fffd17 	ldw	r3,-12(fp)
 800bb18:	00bfff84 	movi	r2,-2
 800bb1c:	1884703a 	and	r2,r3,r2
 800bb20:	1001703a 	wrctl	status,r2
  
  return context;
 800bb24:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 800bb28:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 800bb2c:	800c78c0 	call	800c78c <alt_tick>
 800bb30:	e0bffc17 	ldw	r2,-16(fp)
 800bb34:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800bb38:	e0bffe17 	ldw	r2,-8(fp)
 800bb3c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 800bb40:	e037883a 	mov	sp,fp
 800bb44:	dfc00117 	ldw	ra,4(sp)
 800bb48:	df000017 	ldw	fp,0(sp)
 800bb4c:	dec00204 	addi	sp,sp,8
 800bb50:	f800283a 	ret

0800bb54 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 800bb54:	defff804 	addi	sp,sp,-32
 800bb58:	dfc00715 	stw	ra,28(sp)
 800bb5c:	df000615 	stw	fp,24(sp)
 800bb60:	df000604 	addi	fp,sp,24
 800bb64:	e13ffc15 	stw	r4,-16(fp)
 800bb68:	e17ffd15 	stw	r5,-12(fp)
 800bb6c:	e1bffe15 	stw	r6,-8(fp)
 800bb70:	e1ffff15 	stw	r7,-4(fp)
 800bb74:	e0bfff17 	ldw	r2,-4(fp)
 800bb78:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 800bb7c:	00820074 	movhi	r2,2049
 800bb80:	1082c904 	addi	r2,r2,2852
 800bb84:	10800017 	ldw	r2,0(r2)
 800bb88:	1000041e 	bne	r2,zero,800bb9c <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
 800bb8c:	00820074 	movhi	r2,2049
 800bb90:	1082c904 	addi	r2,r2,2852
 800bb94:	e0fffb17 	ldw	r3,-20(fp)
 800bb98:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 800bb9c:	e0bffc17 	ldw	r2,-16(fp)
 800bba0:	10800104 	addi	r2,r2,4
 800bba4:	00c001c4 	movi	r3,7
 800bba8:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 800bbac:	d8000015 	stw	zero,0(sp)
 800bbb0:	e13ffd17 	ldw	r4,-12(fp)
 800bbb4:	e17ffe17 	ldw	r5,-8(fp)
 800bbb8:	01820074 	movhi	r6,2049
 800bbbc:	31aeb804 	addi	r6,r6,-17696
 800bbc0:	e1fffc17 	ldw	r7,-16(fp)
 800bbc4:	800c03c0 	call	800c03c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 800bbc8:	e037883a 	mov	sp,fp
 800bbcc:	dfc00117 	ldw	ra,4(sp)
 800bbd0:	df000017 	ldw	fp,0(sp)
 800bbd4:	dec00204 	addi	sp,sp,8
 800bbd8:	f800283a 	ret

0800bbdc <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
 800bbdc:	defffe04 	addi	sp,sp,-8
 800bbe0:	df000115 	stw	fp,4(sp)
 800bbe4:	df000104 	addi	fp,sp,4
  void* base = altera_avalon_timer_ts_base;
 800bbe8:	00820074 	movhi	r2,2049
 800bbec:	1082c604 	addi	r2,r2,2840
 800bbf0:	10800017 	ldw	r2,0(r2)
 800bbf4:	e0bfff15 	stw	r2,-4(fp)

  if (!altera_avalon_timer_ts_freq)
 800bbf8:	00820074 	movhi	r2,2049
 800bbfc:	1082c704 	addi	r2,r2,2844
 800bc00:	10800017 	ldw	r2,0(r2)
 800bc04:	1000021e 	bne	r2,zero,800bc10 <alt_timestamp_start+0x34>
  {
    return -1;
 800bc08:	00bfffc4 	movi	r2,-1
 800bc0c:	00001106 	br	800bc54 <alt_timestamp_start+0x78>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
 800bc10:	e0bfff17 	ldw	r2,-4(fp)
 800bc14:	10800104 	addi	r2,r2,4
 800bc18:	00c00204 	movi	r3,8
 800bc1c:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
 800bc20:	e0bfff17 	ldw	r2,-4(fp)
 800bc24:	10800204 	addi	r2,r2,8
 800bc28:	00ffffd4 	movui	r3,65535
 800bc2c:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
 800bc30:	e0bfff17 	ldw	r2,-4(fp)
 800bc34:	10800304 	addi	r2,r2,12
 800bc38:	00ffffd4 	movui	r3,65535
 800bc3c:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
 800bc40:	e0bfff17 	ldw	r2,-4(fp)
 800bc44:	10800104 	addi	r2,r2,4
 800bc48:	00c00104 	movi	r3,4
 800bc4c:	10c00035 	stwio	r3,0(r2)
    } 
  }
  return 0;
 800bc50:	0005883a 	mov	r2,zero
}
 800bc54:	e037883a 	mov	sp,fp
 800bc58:	df000017 	ldw	fp,0(sp)
 800bc5c:	dec00104 	addi	sp,sp,4
 800bc60:	f800283a 	ret

0800bc64 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
 800bc64:	defffc04 	addi	sp,sp,-16
 800bc68:	df000315 	stw	fp,12(sp)
 800bc6c:	df000304 	addi	fp,sp,12

  void* base = altera_avalon_timer_ts_base;
 800bc70:	00820074 	movhi	r2,2049
 800bc74:	1082c604 	addi	r2,r2,2840
 800bc78:	10800017 	ldw	r2,0(r2)
 800bc7c:	e0bffd15 	stw	r2,-12(fp)

  if (!altera_avalon_timer_ts_freq)
 800bc80:	00820074 	movhi	r2,2049
 800bc84:	1082c704 	addi	r2,r2,2844
 800bc88:	10800017 	ldw	r2,0(r2)
 800bc8c:	1000021e 	bne	r2,zero,800bc98 <alt_timestamp+0x34>
  {
	if(ALT_TIMESTAMP_COUNTER_SIZE == 64) {
        return 0xFFFFFFFFFFFFFFFFULL;
    } else {
        return 0xFFFFFFFF;
 800bc90:	00bfffc4 	movi	r2,-1
 800bc94:	00001306 	br	800bce4 <alt_timestamp+0x80>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
    } else {
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
 800bc98:	e0bffd17 	ldw	r2,-12(fp)
 800bc9c:	10800404 	addi	r2,r2,16
 800bca0:	0007883a 	mov	r3,zero
 800bca4:	10c00035 	stwio	r3,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
 800bca8:	e0bffd17 	ldw	r2,-12(fp)
 800bcac:	10800404 	addi	r2,r2,16
 800bcb0:	10800037 	ldwio	r2,0(r2)
 800bcb4:	10bfffcc 	andi	r2,r2,65535
 800bcb8:	e0bffe15 	stw	r2,-8(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
 800bcbc:	e0bffd17 	ldw	r2,-12(fp)
 800bcc0:	10800504 	addi	r2,r2,20
 800bcc4:	10800037 	ldwio	r2,0(r2)
 800bcc8:	10bfffcc 	andi	r2,r2,65535
 800bccc:	e0bfff15 	stw	r2,-4(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
 800bcd0:	e0bfff17 	ldw	r2,-4(fp)
 800bcd4:	1006943a 	slli	r3,r2,16
 800bcd8:	e0bffe17 	ldw	r2,-8(fp)
 800bcdc:	1884b03a 	or	r2,r3,r2
 800bce0:	0084303a 	nor	r2,zero,r2
    }  
  }
}
 800bce4:	e037883a 	mov	sp,fp
 800bce8:	df000017 	ldw	fp,0(sp)
 800bcec:	dec00104 	addi	sp,sp,4
 800bcf0:	f800283a 	ret

0800bcf4 <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
 800bcf4:	deffff04 	addi	sp,sp,-4
 800bcf8:	df000015 	stw	fp,0(sp)
 800bcfc:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
 800bd00:	00820074 	movhi	r2,2049
 800bd04:	1082c704 	addi	r2,r2,2844
 800bd08:	10800017 	ldw	r2,0(r2)
}
 800bd0c:	e037883a 	mov	sp,fp
 800bd10:	df000017 	ldw	fp,0(sp)
 800bd14:	dec00104 	addi	sp,sp,4
 800bd18:	f800283a 	ret

0800bd1c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 800bd1c:	defff504 	addi	sp,sp,-44
 800bd20:	df000a15 	stw	fp,40(sp)
 800bd24:	df000a04 	addi	fp,sp,40
 800bd28:	e13ffc15 	stw	r4,-16(fp)
 800bd2c:	e17ffd15 	stw	r5,-12(fp)
 800bd30:	e1bffe15 	stw	r6,-8(fp)
 800bd34:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 800bd38:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800bd3c:	00820074 	movhi	r2,2049
 800bd40:	1082c904 	addi	r2,r2,2852
 800bd44:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 800bd48:	10003f26 	beq	r2,zero,800be48 <alt_alarm_start+0x12c>
  {
    if (alarm)
 800bd4c:	e0bffc17 	ldw	r2,-16(fp)
 800bd50:	10003b26 	beq	r2,zero,800be40 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 800bd54:	e0bffc17 	ldw	r2,-16(fp)
 800bd58:	e0fffe17 	ldw	r3,-8(fp)
 800bd5c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 800bd60:	e0bffc17 	ldw	r2,-16(fp)
 800bd64:	e0ffff17 	ldw	r3,-4(fp)
 800bd68:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800bd6c:	0005303a 	rdctl	r2,status
 800bd70:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800bd74:	e0fff817 	ldw	r3,-32(fp)
 800bd78:	00bfff84 	movi	r2,-2
 800bd7c:	1884703a 	and	r2,r3,r2
 800bd80:	1001703a 	wrctl	status,r2
  
  return context;
 800bd84:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 800bd88:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 800bd8c:	00820074 	movhi	r2,2049
 800bd90:	1082ca04 	addi	r2,r2,2856
 800bd94:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 800bd98:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 800bd9c:	e0fffd17 	ldw	r3,-12(fp)
 800bda0:	e0bff617 	ldw	r2,-40(fp)
 800bda4:	1885883a 	add	r2,r3,r2
 800bda8:	10c00044 	addi	r3,r2,1
 800bdac:	e0bffc17 	ldw	r2,-16(fp)
 800bdb0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 800bdb4:	e0bffc17 	ldw	r2,-16(fp)
 800bdb8:	10c00217 	ldw	r3,8(r2)
 800bdbc:	e0bff617 	ldw	r2,-40(fp)
 800bdc0:	1880042e 	bgeu	r3,r2,800bdd4 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 800bdc4:	e0bffc17 	ldw	r2,-16(fp)
 800bdc8:	00c00044 	movi	r3,1
 800bdcc:	10c00405 	stb	r3,16(r2)
 800bdd0:	00000206 	br	800bddc <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 800bdd4:	e0bffc17 	ldw	r2,-16(fp)
 800bdd8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 800bddc:	e0bffc17 	ldw	r2,-16(fp)
 800bde0:	00c20074 	movhi	r3,2049
 800bde4:	18fc2404 	addi	r3,r3,-3952
 800bde8:	e0fff915 	stw	r3,-28(fp)
 800bdec:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 800bdf0:	e0bffa17 	ldw	r2,-24(fp)
 800bdf4:	e0fff917 	ldw	r3,-28(fp)
 800bdf8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 800bdfc:	e0bff917 	ldw	r2,-28(fp)
 800be00:	10c00017 	ldw	r3,0(r2)
 800be04:	e0bffa17 	ldw	r2,-24(fp)
 800be08:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 800be0c:	e0bff917 	ldw	r2,-28(fp)
 800be10:	10800017 	ldw	r2,0(r2)
 800be14:	e0fffa17 	ldw	r3,-24(fp)
 800be18:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 800be1c:	e0bff917 	ldw	r2,-28(fp)
 800be20:	e0fffa17 	ldw	r3,-24(fp)
 800be24:	10c00015 	stw	r3,0(r2)
 800be28:	e0bff717 	ldw	r2,-36(fp)
 800be2c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800be30:	e0bffb17 	ldw	r2,-20(fp)
 800be34:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 800be38:	0005883a 	mov	r2,zero
 800be3c:	00000306 	br	800be4c <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 800be40:	00bffa84 	movi	r2,-22
 800be44:	00000106 	br	800be4c <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 800be48:	00bfde84 	movi	r2,-134
  }
}
 800be4c:	e037883a 	mov	sp,fp
 800be50:	df000017 	ldw	fp,0(sp)
 800be54:	dec00104 	addi	sp,sp,4
 800be58:	f800283a 	ret

0800be5c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 800be5c:	deffff04 	addi	sp,sp,-4
 800be60:	df000015 	stw	fp,0(sp)
 800be64:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 800be68:	e037883a 	mov	sp,fp
 800be6c:	df000017 	ldw	fp,0(sp)
 800be70:	dec00104 	addi	sp,sp,4
 800be74:	f800283a 	ret

0800be78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800be78:	defffe04 	addi	sp,sp,-8
 800be7c:	dfc00115 	stw	ra,4(sp)
 800be80:	df000015 	stw	fp,0(sp)
 800be84:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800be88:	00820074 	movhi	r2,2049
 800be8c:	10bc2104 	addi	r2,r2,-3964
 800be90:	10800017 	ldw	r2,0(r2)
 800be94:	10000526 	beq	r2,zero,800beac <alt_get_errno+0x34>
 800be98:	00820074 	movhi	r2,2049
 800be9c:	10bc2104 	addi	r2,r2,-3964
 800bea0:	10800017 	ldw	r2,0(r2)
 800bea4:	103ee83a 	callr	r2
 800bea8:	00000206 	br	800beb4 <alt_get_errno+0x3c>
 800beac:	00820074 	movhi	r2,2049
 800beb0:	1082c204 	addi	r2,r2,2824
}
 800beb4:	e037883a 	mov	sp,fp
 800beb8:	dfc00117 	ldw	ra,4(sp)
 800bebc:	df000017 	ldw	fp,0(sp)
 800bec0:	dec00204 	addi	sp,sp,8
 800bec4:	f800283a 	ret

0800bec8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 800bec8:	defffa04 	addi	sp,sp,-24
 800becc:	dfc00515 	stw	ra,20(sp)
 800bed0:	df000415 	stw	fp,16(sp)
 800bed4:	df000404 	addi	fp,sp,16
 800bed8:	e13ffe15 	stw	r4,-8(fp)
 800bedc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 800bee0:	e0bffe17 	ldw	r2,-8(fp)
 800bee4:	10000326 	beq	r2,zero,800bef4 <alt_dev_llist_insert+0x2c>
 800bee8:	e0bffe17 	ldw	r2,-8(fp)
 800beec:	10800217 	ldw	r2,8(r2)
 800bef0:	1000051e 	bne	r2,zero,800bf08 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
 800bef4:	800be780 	call	800be78 <alt_get_errno>
 800bef8:	00c00584 	movi	r3,22
 800befc:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 800bf00:	00bffa84 	movi	r2,-22
 800bf04:	00001306 	br	800bf54 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 800bf08:	e0bffe17 	ldw	r2,-8(fp)
 800bf0c:	e0ffff17 	ldw	r3,-4(fp)
 800bf10:	e0fffc15 	stw	r3,-16(fp)
 800bf14:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 800bf18:	e0bffd17 	ldw	r2,-12(fp)
 800bf1c:	e0fffc17 	ldw	r3,-16(fp)
 800bf20:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 800bf24:	e0bffc17 	ldw	r2,-16(fp)
 800bf28:	10c00017 	ldw	r3,0(r2)
 800bf2c:	e0bffd17 	ldw	r2,-12(fp)
 800bf30:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 800bf34:	e0bffc17 	ldw	r2,-16(fp)
 800bf38:	10800017 	ldw	r2,0(r2)
 800bf3c:	e0fffd17 	ldw	r3,-12(fp)
 800bf40:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 800bf44:	e0bffc17 	ldw	r2,-16(fp)
 800bf48:	e0fffd17 	ldw	r3,-12(fp)
 800bf4c:	10c00015 	stw	r3,0(r2)

  return 0;  
 800bf50:	0005883a 	mov	r2,zero
}
 800bf54:	e037883a 	mov	sp,fp
 800bf58:	dfc00117 	ldw	ra,4(sp)
 800bf5c:	df000017 	ldw	fp,0(sp)
 800bf60:	dec00204 	addi	sp,sp,8
 800bf64:	f800283a 	ret

0800bf68 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 800bf68:	defffd04 	addi	sp,sp,-12
 800bf6c:	dfc00215 	stw	ra,8(sp)
 800bf70:	df000115 	stw	fp,4(sp)
 800bf74:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 800bf78:	00820074 	movhi	r2,2049
 800bf7c:	10b33904 	addi	r2,r2,-13084
 800bf80:	e0bfff15 	stw	r2,-4(fp)
 800bf84:	00000606 	br	800bfa0 <_do_ctors+0x38>
        (*ctor) (); 
 800bf88:	e0bfff17 	ldw	r2,-4(fp)
 800bf8c:	10800017 	ldw	r2,0(r2)
 800bf90:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 800bf94:	e0bfff17 	ldw	r2,-4(fp)
 800bf98:	10bfff04 	addi	r2,r2,-4
 800bf9c:	e0bfff15 	stw	r2,-4(fp)
 800bfa0:	e0ffff17 	ldw	r3,-4(fp)
 800bfa4:	00820074 	movhi	r2,2049
 800bfa8:	10b33a04 	addi	r2,r2,-13080
 800bfac:	18bff62e 	bgeu	r3,r2,800bf88 <_do_ctors+0x20>
        (*ctor) (); 
}
 800bfb0:	e037883a 	mov	sp,fp
 800bfb4:	dfc00117 	ldw	ra,4(sp)
 800bfb8:	df000017 	ldw	fp,0(sp)
 800bfbc:	dec00204 	addi	sp,sp,8
 800bfc0:	f800283a 	ret

0800bfc4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 800bfc4:	defffd04 	addi	sp,sp,-12
 800bfc8:	dfc00215 	stw	ra,8(sp)
 800bfcc:	df000115 	stw	fp,4(sp)
 800bfd0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 800bfd4:	00820074 	movhi	r2,2049
 800bfd8:	10b33904 	addi	r2,r2,-13084
 800bfdc:	e0bfff15 	stw	r2,-4(fp)
 800bfe0:	00000606 	br	800bffc <_do_dtors+0x38>
        (*dtor) (); 
 800bfe4:	e0bfff17 	ldw	r2,-4(fp)
 800bfe8:	10800017 	ldw	r2,0(r2)
 800bfec:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 800bff0:	e0bfff17 	ldw	r2,-4(fp)
 800bff4:	10bfff04 	addi	r2,r2,-4
 800bff8:	e0bfff15 	stw	r2,-4(fp)
 800bffc:	e0ffff17 	ldw	r3,-4(fp)
 800c000:	00820074 	movhi	r2,2049
 800c004:	10b33a04 	addi	r2,r2,-13080
 800c008:	18bff62e 	bgeu	r3,r2,800bfe4 <_do_dtors+0x20>
        (*dtor) (); 
}
 800c00c:	e037883a 	mov	sp,fp
 800c010:	dfc00117 	ldw	ra,4(sp)
 800c014:	df000017 	ldw	fp,0(sp)
 800c018:	dec00204 	addi	sp,sp,8
 800c01c:	f800283a 	ret

0800c020 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 800c020:	deffff04 	addi	sp,sp,-4
 800c024:	df000015 	stw	fp,0(sp)
 800c028:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 800c02c:	e037883a 	mov	sp,fp
 800c030:	df000017 	ldw	fp,0(sp)
 800c034:	dec00104 	addi	sp,sp,4
 800c038:	f800283a 	ret

0800c03c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 800c03c:	defff904 	addi	sp,sp,-28
 800c040:	dfc00615 	stw	ra,24(sp)
 800c044:	df000515 	stw	fp,20(sp)
 800c048:	df000504 	addi	fp,sp,20
 800c04c:	e13ffc15 	stw	r4,-16(fp)
 800c050:	e17ffd15 	stw	r5,-12(fp)
 800c054:	e1bffe15 	stw	r6,-8(fp)
 800c058:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 800c05c:	e0800217 	ldw	r2,8(fp)
 800c060:	d8800015 	stw	r2,0(sp)
 800c064:	e13ffc17 	ldw	r4,-16(fp)
 800c068:	e17ffd17 	ldw	r5,-12(fp)
 800c06c:	e1bffe17 	ldw	r6,-8(fp)
 800c070:	e1ffff17 	ldw	r7,-4(fp)
 800c074:	800c2140 	call	800c214 <alt_iic_isr_register>
}  
 800c078:	e037883a 	mov	sp,fp
 800c07c:	dfc00117 	ldw	ra,4(sp)
 800c080:	df000017 	ldw	fp,0(sp)
 800c084:	dec00204 	addi	sp,sp,8
 800c088:	f800283a 	ret

0800c08c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 800c08c:	defff904 	addi	sp,sp,-28
 800c090:	df000615 	stw	fp,24(sp)
 800c094:	df000604 	addi	fp,sp,24
 800c098:	e13ffe15 	stw	r4,-8(fp)
 800c09c:	e17fff15 	stw	r5,-4(fp)
 800c0a0:	e0bfff17 	ldw	r2,-4(fp)
 800c0a4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800c0a8:	0005303a 	rdctl	r2,status
 800c0ac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800c0b0:	e0fffb17 	ldw	r3,-20(fp)
 800c0b4:	00bfff84 	movi	r2,-2
 800c0b8:	1884703a 	and	r2,r3,r2
 800c0bc:	1001703a 	wrctl	status,r2
  
  return context;
 800c0c0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 800c0c4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 800c0c8:	e0bffa17 	ldw	r2,-24(fp)
 800c0cc:	00c00044 	movi	r3,1
 800c0d0:	1884983a 	sll	r2,r3,r2
 800c0d4:	1007883a 	mov	r3,r2
 800c0d8:	00820074 	movhi	r2,2049
 800c0dc:	1082c804 	addi	r2,r2,2848
 800c0e0:	10800017 	ldw	r2,0(r2)
 800c0e4:	1886b03a 	or	r3,r3,r2
 800c0e8:	00820074 	movhi	r2,2049
 800c0ec:	1082c804 	addi	r2,r2,2848
 800c0f0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 800c0f4:	00820074 	movhi	r2,2049
 800c0f8:	1082c804 	addi	r2,r2,2848
 800c0fc:	10800017 	ldw	r2,0(r2)
 800c100:	100170fa 	wrctl	ienable,r2
 800c104:	e0bffc17 	ldw	r2,-16(fp)
 800c108:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800c10c:	e0bffd17 	ldw	r2,-12(fp)
 800c110:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 800c114:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 800c118:	e037883a 	mov	sp,fp
 800c11c:	df000017 	ldw	fp,0(sp)
 800c120:	dec00104 	addi	sp,sp,4
 800c124:	f800283a 	ret

0800c128 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 800c128:	defff904 	addi	sp,sp,-28
 800c12c:	df000615 	stw	fp,24(sp)
 800c130:	df000604 	addi	fp,sp,24
 800c134:	e13ffe15 	stw	r4,-8(fp)
 800c138:	e17fff15 	stw	r5,-4(fp)
 800c13c:	e0bfff17 	ldw	r2,-4(fp)
 800c140:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800c144:	0005303a 	rdctl	r2,status
 800c148:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800c14c:	e0fffb17 	ldw	r3,-20(fp)
 800c150:	00bfff84 	movi	r2,-2
 800c154:	1884703a 	and	r2,r3,r2
 800c158:	1001703a 	wrctl	status,r2
  
  return context;
 800c15c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 800c160:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 800c164:	e0bffa17 	ldw	r2,-24(fp)
 800c168:	00c00044 	movi	r3,1
 800c16c:	1884983a 	sll	r2,r3,r2
 800c170:	0084303a 	nor	r2,zero,r2
 800c174:	1007883a 	mov	r3,r2
 800c178:	00820074 	movhi	r2,2049
 800c17c:	1082c804 	addi	r2,r2,2848
 800c180:	10800017 	ldw	r2,0(r2)
 800c184:	1886703a 	and	r3,r3,r2
 800c188:	00820074 	movhi	r2,2049
 800c18c:	1082c804 	addi	r2,r2,2848
 800c190:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 800c194:	00820074 	movhi	r2,2049
 800c198:	1082c804 	addi	r2,r2,2848
 800c19c:	10800017 	ldw	r2,0(r2)
 800c1a0:	100170fa 	wrctl	ienable,r2
 800c1a4:	e0bffc17 	ldw	r2,-16(fp)
 800c1a8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800c1ac:	e0bffd17 	ldw	r2,-12(fp)
 800c1b0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 800c1b4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 800c1b8:	e037883a 	mov	sp,fp
 800c1bc:	df000017 	ldw	fp,0(sp)
 800c1c0:	dec00104 	addi	sp,sp,4
 800c1c4:	f800283a 	ret

0800c1c8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 800c1c8:	defffc04 	addi	sp,sp,-16
 800c1cc:	df000315 	stw	fp,12(sp)
 800c1d0:	df000304 	addi	fp,sp,12
 800c1d4:	e13ffe15 	stw	r4,-8(fp)
 800c1d8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 800c1dc:	000530fa 	rdctl	r2,ienable
 800c1e0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 800c1e4:	e0bfff17 	ldw	r2,-4(fp)
 800c1e8:	00c00044 	movi	r3,1
 800c1ec:	1884983a 	sll	r2,r3,r2
 800c1f0:	1007883a 	mov	r3,r2
 800c1f4:	e0bffd17 	ldw	r2,-12(fp)
 800c1f8:	1884703a 	and	r2,r3,r2
 800c1fc:	1004c03a 	cmpne	r2,r2,zero
 800c200:	10803fcc 	andi	r2,r2,255
}
 800c204:	e037883a 	mov	sp,fp
 800c208:	df000017 	ldw	fp,0(sp)
 800c20c:	dec00104 	addi	sp,sp,4
 800c210:	f800283a 	ret

0800c214 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 800c214:	defff504 	addi	sp,sp,-44
 800c218:	dfc00a15 	stw	ra,40(sp)
 800c21c:	df000915 	stw	fp,36(sp)
 800c220:	df000904 	addi	fp,sp,36
 800c224:	e13ffc15 	stw	r4,-16(fp)
 800c228:	e17ffd15 	stw	r5,-12(fp)
 800c22c:	e1bffe15 	stw	r6,-8(fp)
 800c230:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 800c234:	00bffa84 	movi	r2,-22
 800c238:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 800c23c:	e0bffd17 	ldw	r2,-12(fp)
 800c240:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 800c244:	e0bff817 	ldw	r2,-32(fp)
 800c248:	10800808 	cmpgei	r2,r2,32
 800c24c:	1000271e 	bne	r2,zero,800c2ec <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800c250:	0005303a 	rdctl	r2,status
 800c254:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800c258:	e0fffa17 	ldw	r3,-24(fp)
 800c25c:	00bfff84 	movi	r2,-2
 800c260:	1884703a 	and	r2,r3,r2
 800c264:	1001703a 	wrctl	status,r2
  
  return context;
 800c268:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 800c26c:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 800c270:	00c20074 	movhi	r3,2049
 800c274:	18cbd504 	addi	r3,r3,12116
 800c278:	e0bff817 	ldw	r2,-32(fp)
 800c27c:	100490fa 	slli	r2,r2,3
 800c280:	1885883a 	add	r2,r3,r2
 800c284:	e0fffe17 	ldw	r3,-8(fp)
 800c288:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 800c28c:	00c20074 	movhi	r3,2049
 800c290:	18cbd504 	addi	r3,r3,12116
 800c294:	e0bff817 	ldw	r2,-32(fp)
 800c298:	100490fa 	slli	r2,r2,3
 800c29c:	1885883a 	add	r2,r3,r2
 800c2a0:	10800104 	addi	r2,r2,4
 800c2a4:	e0ffff17 	ldw	r3,-4(fp)
 800c2a8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 800c2ac:	e0bffe17 	ldw	r2,-8(fp)
 800c2b0:	10000526 	beq	r2,zero,800c2c8 <alt_iic_isr_register+0xb4>
 800c2b4:	e0bff817 	ldw	r2,-32(fp)
 800c2b8:	e13ffc17 	ldw	r4,-16(fp)
 800c2bc:	100b883a 	mov	r5,r2
 800c2c0:	800c08c0 	call	800c08c <alt_ic_irq_enable>
 800c2c4:	00000406 	br	800c2d8 <alt_iic_isr_register+0xc4>
 800c2c8:	e0bff817 	ldw	r2,-32(fp)
 800c2cc:	e13ffc17 	ldw	r4,-16(fp)
 800c2d0:	100b883a 	mov	r5,r2
 800c2d4:	800c1280 	call	800c128 <alt_ic_irq_disable>
 800c2d8:	e0bff715 	stw	r2,-36(fp)
 800c2dc:	e0bff917 	ldw	r2,-28(fp)
 800c2e0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800c2e4:	e0bffb17 	ldw	r2,-20(fp)
 800c2e8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 800c2ec:	e0bff717 	ldw	r2,-36(fp)
}
 800c2f0:	e037883a 	mov	sp,fp
 800c2f4:	dfc00117 	ldw	ra,4(sp)
 800c2f8:	df000017 	ldw	fp,0(sp)
 800c2fc:	dec00204 	addi	sp,sp,8
 800c300:	f800283a 	ret

0800c304 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 800c304:	defff804 	addi	sp,sp,-32
 800c308:	dfc00715 	stw	ra,28(sp)
 800c30c:	df000615 	stw	fp,24(sp)
 800c310:	dc000515 	stw	r16,20(sp)
 800c314:	df000504 	addi	fp,sp,20
 800c318:	e13ffc15 	stw	r4,-16(fp)
 800c31c:	e17ffd15 	stw	r5,-12(fp)
 800c320:	e1bffe15 	stw	r6,-8(fp)
 800c324:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 800c328:	e13ffd17 	ldw	r4,-12(fp)
 800c32c:	e17ffe17 	ldw	r5,-8(fp)
 800c330:	e1bfff17 	ldw	r6,-4(fp)
 800c334:	800c59c0 	call	800c59c <open>
 800c338:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 800c33c:	e0bffb17 	ldw	r2,-20(fp)
 800c340:	10002216 	blt	r2,zero,800c3cc <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 800c344:	04020074 	movhi	r16,2049
 800c348:	84379f04 	addi	r16,r16,-8580
 800c34c:	e0bffb17 	ldw	r2,-20(fp)
 800c350:	1009883a 	mov	r4,r2
 800c354:	01400304 	movi	r5,12
 800c358:	8000df40 	call	8000df4 <__mulsi3>
 800c35c:	8085883a 	add	r2,r16,r2
 800c360:	10c00017 	ldw	r3,0(r2)
 800c364:	e0bffc17 	ldw	r2,-16(fp)
 800c368:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 800c36c:	04020074 	movhi	r16,2049
 800c370:	84379f04 	addi	r16,r16,-8580
 800c374:	e0bffb17 	ldw	r2,-20(fp)
 800c378:	1009883a 	mov	r4,r2
 800c37c:	01400304 	movi	r5,12
 800c380:	8000df40 	call	8000df4 <__mulsi3>
 800c384:	8085883a 	add	r2,r16,r2
 800c388:	10800104 	addi	r2,r2,4
 800c38c:	10c00017 	ldw	r3,0(r2)
 800c390:	e0bffc17 	ldw	r2,-16(fp)
 800c394:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 800c398:	04020074 	movhi	r16,2049
 800c39c:	84379f04 	addi	r16,r16,-8580
 800c3a0:	e0bffb17 	ldw	r2,-20(fp)
 800c3a4:	1009883a 	mov	r4,r2
 800c3a8:	01400304 	movi	r5,12
 800c3ac:	8000df40 	call	8000df4 <__mulsi3>
 800c3b0:	8085883a 	add	r2,r16,r2
 800c3b4:	10800204 	addi	r2,r2,8
 800c3b8:	10c00017 	ldw	r3,0(r2)
 800c3bc:	e0bffc17 	ldw	r2,-16(fp)
 800c3c0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 800c3c4:	e13ffb17 	ldw	r4,-20(fp)
 800c3c8:	800ad1c0 	call	800ad1c <alt_release_fd>
  }
} 
 800c3cc:	e037883a 	mov	sp,fp
 800c3d0:	dfc00217 	ldw	ra,8(sp)
 800c3d4:	df000117 	ldw	fp,4(sp)
 800c3d8:	dc000017 	ldw	r16,0(sp)
 800c3dc:	dec00304 	addi	sp,sp,12
 800c3e0:	f800283a 	ret

0800c3e4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 800c3e4:	defffb04 	addi	sp,sp,-20
 800c3e8:	dfc00415 	stw	ra,16(sp)
 800c3ec:	df000315 	stw	fp,12(sp)
 800c3f0:	df000304 	addi	fp,sp,12
 800c3f4:	e13ffd15 	stw	r4,-12(fp)
 800c3f8:	e17ffe15 	stw	r5,-8(fp)
 800c3fc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 800c400:	01020074 	movhi	r4,2049
 800c404:	2137a204 	addi	r4,r4,-8568
 800c408:	e17ffd17 	ldw	r5,-12(fp)
 800c40c:	01800044 	movi	r6,1
 800c410:	01c07fc4 	movi	r7,511
 800c414:	800c3040 	call	800c304 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 800c418:	01020074 	movhi	r4,2049
 800c41c:	21379f04 	addi	r4,r4,-8580
 800c420:	e17ffe17 	ldw	r5,-8(fp)
 800c424:	000d883a 	mov	r6,zero
 800c428:	01c07fc4 	movi	r7,511
 800c42c:	800c3040 	call	800c304 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 800c430:	01020074 	movhi	r4,2049
 800c434:	2137a504 	addi	r4,r4,-8556
 800c438:	e17fff17 	ldw	r5,-4(fp)
 800c43c:	01800044 	movi	r6,1
 800c440:	01c07fc4 	movi	r7,511
 800c444:	800c3040 	call	800c304 <alt_open_fd>
}  
 800c448:	e037883a 	mov	sp,fp
 800c44c:	dfc00117 	ldw	ra,4(sp)
 800c450:	df000017 	ldw	fp,0(sp)
 800c454:	dec00204 	addi	sp,sp,8
 800c458:	f800283a 	ret

0800c45c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800c45c:	defffe04 	addi	sp,sp,-8
 800c460:	dfc00115 	stw	ra,4(sp)
 800c464:	df000015 	stw	fp,0(sp)
 800c468:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800c46c:	00820074 	movhi	r2,2049
 800c470:	10bc2104 	addi	r2,r2,-3964
 800c474:	10800017 	ldw	r2,0(r2)
 800c478:	10000526 	beq	r2,zero,800c490 <alt_get_errno+0x34>
 800c47c:	00820074 	movhi	r2,2049
 800c480:	10bc2104 	addi	r2,r2,-3964
 800c484:	10800017 	ldw	r2,0(r2)
 800c488:	103ee83a 	callr	r2
 800c48c:	00000206 	br	800c498 <alt_get_errno+0x3c>
 800c490:	00820074 	movhi	r2,2049
 800c494:	1082c204 	addi	r2,r2,2824
}
 800c498:	e037883a 	mov	sp,fp
 800c49c:	dfc00117 	ldw	ra,4(sp)
 800c4a0:	df000017 	ldw	fp,0(sp)
 800c4a4:	dec00204 	addi	sp,sp,8
 800c4a8:	f800283a 	ret

0800c4ac <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 800c4ac:	defffb04 	addi	sp,sp,-20
 800c4b0:	dfc00415 	stw	ra,16(sp)
 800c4b4:	df000315 	stw	fp,12(sp)
 800c4b8:	dc000215 	stw	r16,8(sp)
 800c4bc:	df000204 	addi	fp,sp,8
 800c4c0:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 800c4c4:	e0bfff17 	ldw	r2,-4(fp)
 800c4c8:	10800217 	ldw	r2,8(r2)
 800c4cc:	10d00034 	orhi	r3,r2,16384
 800c4d0:	e0bfff17 	ldw	r2,-4(fp)
 800c4d4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 800c4d8:	e03ffe15 	stw	zero,-8(fp)
 800c4dc:	00002206 	br	800c568 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 800c4e0:	04020074 	movhi	r16,2049
 800c4e4:	84379f04 	addi	r16,r16,-8580
 800c4e8:	e0bffe17 	ldw	r2,-8(fp)
 800c4ec:	1009883a 	mov	r4,r2
 800c4f0:	01400304 	movi	r5,12
 800c4f4:	8000df40 	call	8000df4 <__mulsi3>
 800c4f8:	8085883a 	add	r2,r16,r2
 800c4fc:	10c00017 	ldw	r3,0(r2)
 800c500:	e0bfff17 	ldw	r2,-4(fp)
 800c504:	10800017 	ldw	r2,0(r2)
 800c508:	1880141e 	bne	r3,r2,800c55c <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 800c50c:	04020074 	movhi	r16,2049
 800c510:	84379f04 	addi	r16,r16,-8580
 800c514:	e0bffe17 	ldw	r2,-8(fp)
 800c518:	1009883a 	mov	r4,r2
 800c51c:	01400304 	movi	r5,12
 800c520:	8000df40 	call	8000df4 <__mulsi3>
 800c524:	8085883a 	add	r2,r16,r2
 800c528:	10800204 	addi	r2,r2,8
 800c52c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 800c530:	10000a0e 	bge	r2,zero,800c55c <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 800c534:	e13ffe17 	ldw	r4,-8(fp)
 800c538:	01400304 	movi	r5,12
 800c53c:	8000df40 	call	8000df4 <__mulsi3>
 800c540:	00c20074 	movhi	r3,2049
 800c544:	18f79f04 	addi	r3,r3,-8580
 800c548:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 800c54c:	e0bfff17 	ldw	r2,-4(fp)
 800c550:	18800226 	beq	r3,r2,800c55c <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 800c554:	00bffcc4 	movi	r2,-13
 800c558:	00000a06 	br	800c584 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 800c55c:	e0bffe17 	ldw	r2,-8(fp)
 800c560:	10800044 	addi	r2,r2,1
 800c564:	e0bffe15 	stw	r2,-8(fp)
 800c568:	00820074 	movhi	r2,2049
 800c56c:	10bc2004 	addi	r2,r2,-3968
 800c570:	10800017 	ldw	r2,0(r2)
 800c574:	1007883a 	mov	r3,r2
 800c578:	e0bffe17 	ldw	r2,-8(fp)
 800c57c:	18bfd82e 	bgeu	r3,r2,800c4e0 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 800c580:	0005883a 	mov	r2,zero
}
 800c584:	e037883a 	mov	sp,fp
 800c588:	dfc00217 	ldw	ra,8(sp)
 800c58c:	df000117 	ldw	fp,4(sp)
 800c590:	dc000017 	ldw	r16,0(sp)
 800c594:	dec00304 	addi	sp,sp,12
 800c598:	f800283a 	ret

0800c59c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 800c59c:	defff604 	addi	sp,sp,-40
 800c5a0:	dfc00915 	stw	ra,36(sp)
 800c5a4:	df000815 	stw	fp,32(sp)
 800c5a8:	df000804 	addi	fp,sp,32
 800c5ac:	e13ffd15 	stw	r4,-12(fp)
 800c5b0:	e17ffe15 	stw	r5,-8(fp)
 800c5b4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 800c5b8:	00bfffc4 	movi	r2,-1
 800c5bc:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 800c5c0:	00bffb44 	movi	r2,-19
 800c5c4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 800c5c8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 800c5cc:	e13ffd17 	ldw	r4,-12(fp)
 800c5d0:	01420074 	movhi	r5,2049
 800c5d4:	297c1e04 	addi	r5,r5,-3976
 800c5d8:	800c8b00 	call	800c8b0 <alt_find_dev>
 800c5dc:	e0bff815 	stw	r2,-32(fp)
 800c5e0:	e0bff817 	ldw	r2,-32(fp)
 800c5e4:	1000051e 	bne	r2,zero,800c5fc <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 800c5e8:	e13ffd17 	ldw	r4,-12(fp)
 800c5ec:	800c9400 	call	800c940 <alt_find_file>
 800c5f0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 800c5f4:	00800044 	movi	r2,1
 800c5f8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 800c5fc:	e0bff817 	ldw	r2,-32(fp)
 800c600:	10002a26 	beq	r2,zero,800c6ac <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 800c604:	e13ff817 	ldw	r4,-32(fp)
 800c608:	800ca540 	call	800ca54 <alt_get_fd>
 800c60c:	e0bff915 	stw	r2,-28(fp)
 800c610:	e0bff917 	ldw	r2,-28(fp)
 800c614:	1000030e 	bge	r2,zero,800c624 <open+0x88>
    {
      status = index;
 800c618:	e0bff917 	ldw	r2,-28(fp)
 800c61c:	e0bffa15 	stw	r2,-24(fp)
 800c620:	00002406 	br	800c6b4 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 800c624:	e13ff917 	ldw	r4,-28(fp)
 800c628:	01400304 	movi	r5,12
 800c62c:	8000df40 	call	8000df4 <__mulsi3>
 800c630:	00c20074 	movhi	r3,2049
 800c634:	18f79f04 	addi	r3,r3,-8580
 800c638:	10c5883a 	add	r2,r2,r3
 800c63c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 800c640:	e0fffe17 	ldw	r3,-8(fp)
 800c644:	00900034 	movhi	r2,16384
 800c648:	10bfffc4 	addi	r2,r2,-1
 800c64c:	1886703a 	and	r3,r3,r2
 800c650:	e0bffc17 	ldw	r2,-16(fp)
 800c654:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 800c658:	e0bffb17 	ldw	r2,-20(fp)
 800c65c:	1000051e 	bne	r2,zero,800c674 <open+0xd8>
 800c660:	e13ffc17 	ldw	r4,-16(fp)
 800c664:	800c4ac0 	call	800c4ac <alt_file_locked>
 800c668:	e0bffa15 	stw	r2,-24(fp)
 800c66c:	e0bffa17 	ldw	r2,-24(fp)
 800c670:	10001016 	blt	r2,zero,800c6b4 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 800c674:	e0bff817 	ldw	r2,-32(fp)
 800c678:	10800317 	ldw	r2,12(r2)
 800c67c:	10000826 	beq	r2,zero,800c6a0 <open+0x104>
 800c680:	e0bff817 	ldw	r2,-32(fp)
 800c684:	10800317 	ldw	r2,12(r2)
 800c688:	e13ffc17 	ldw	r4,-16(fp)
 800c68c:	e17ffd17 	ldw	r5,-12(fp)
 800c690:	e1bffe17 	ldw	r6,-8(fp)
 800c694:	e1ffff17 	ldw	r7,-4(fp)
 800c698:	103ee83a 	callr	r2
 800c69c:	00000106 	br	800c6a4 <open+0x108>
 800c6a0:	0005883a 	mov	r2,zero
 800c6a4:	e0bffa15 	stw	r2,-24(fp)
 800c6a8:	00000206 	br	800c6b4 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 800c6ac:	00bffb44 	movi	r2,-19
 800c6b0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 800c6b4:	e0bffa17 	ldw	r2,-24(fp)
 800c6b8:	1000080e 	bge	r2,zero,800c6dc <open+0x140>
  {
    alt_release_fd (index);  
 800c6bc:	e13ff917 	ldw	r4,-28(fp)
 800c6c0:	800ad1c0 	call	800ad1c <alt_release_fd>
    ALT_ERRNO = -status;
 800c6c4:	800c45c0 	call	800c45c <alt_get_errno>
 800c6c8:	e0fffa17 	ldw	r3,-24(fp)
 800c6cc:	00c7c83a 	sub	r3,zero,r3
 800c6d0:	10c00015 	stw	r3,0(r2)
    return -1;
 800c6d4:	00bfffc4 	movi	r2,-1
 800c6d8:	00000106 	br	800c6e0 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
 800c6dc:	e0bff917 	ldw	r2,-28(fp)
}
 800c6e0:	e037883a 	mov	sp,fp
 800c6e4:	dfc00117 	ldw	ra,4(sp)
 800c6e8:	df000017 	ldw	fp,0(sp)
 800c6ec:	dec00204 	addi	sp,sp,8
 800c6f0:	f800283a 	ret

0800c6f4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 800c6f4:	defffa04 	addi	sp,sp,-24
 800c6f8:	df000515 	stw	fp,20(sp)
 800c6fc:	df000504 	addi	fp,sp,20
 800c700:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800c704:	0005303a 	rdctl	r2,status
 800c708:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800c70c:	e0fffc17 	ldw	r3,-16(fp)
 800c710:	00bfff84 	movi	r2,-2
 800c714:	1884703a 	and	r2,r3,r2
 800c718:	1001703a 	wrctl	status,r2
  
  return context;
 800c71c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 800c720:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 800c724:	e0bfff17 	ldw	r2,-4(fp)
 800c728:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 800c72c:	e0bffd17 	ldw	r2,-12(fp)
 800c730:	10800017 	ldw	r2,0(r2)
 800c734:	e0fffd17 	ldw	r3,-12(fp)
 800c738:	18c00117 	ldw	r3,4(r3)
 800c73c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 800c740:	e0bffd17 	ldw	r2,-12(fp)
 800c744:	10800117 	ldw	r2,4(r2)
 800c748:	e0fffd17 	ldw	r3,-12(fp)
 800c74c:	18c00017 	ldw	r3,0(r3)
 800c750:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 800c754:	e0bffd17 	ldw	r2,-12(fp)
 800c758:	e0fffd17 	ldw	r3,-12(fp)
 800c75c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 800c760:	e0bffd17 	ldw	r2,-12(fp)
 800c764:	e0fffd17 	ldw	r3,-12(fp)
 800c768:	10c00015 	stw	r3,0(r2)
 800c76c:	e0bffb17 	ldw	r2,-20(fp)
 800c770:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800c774:	e0bffe17 	ldw	r2,-8(fp)
 800c778:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 800c77c:	e037883a 	mov	sp,fp
 800c780:	df000017 	ldw	fp,0(sp)
 800c784:	dec00104 	addi	sp,sp,4
 800c788:	f800283a 	ret

0800c78c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 800c78c:	defffb04 	addi	sp,sp,-20
 800c790:	dfc00415 	stw	ra,16(sp)
 800c794:	df000315 	stw	fp,12(sp)
 800c798:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 800c79c:	d0a00d17 	ldw	r2,-32716(gp)
 800c7a0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 800c7a4:	d0a6b317 	ldw	r2,-25908(gp)
 800c7a8:	10800044 	addi	r2,r2,1
 800c7ac:	d0a6b315 	stw	r2,-25908(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 800c7b0:	00002e06 	br	800c86c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 800c7b4:	e0bffd17 	ldw	r2,-12(fp)
 800c7b8:	10800017 	ldw	r2,0(r2)
 800c7bc:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 800c7c0:	e0bffd17 	ldw	r2,-12(fp)
 800c7c4:	10800403 	ldbu	r2,16(r2)
 800c7c8:	10803fcc 	andi	r2,r2,255
 800c7cc:	10000426 	beq	r2,zero,800c7e0 <alt_tick+0x54>
 800c7d0:	d0a6b317 	ldw	r2,-25908(gp)
 800c7d4:	1000021e 	bne	r2,zero,800c7e0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 800c7d8:	e0bffd17 	ldw	r2,-12(fp)
 800c7dc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 800c7e0:	e0bffd17 	ldw	r2,-12(fp)
 800c7e4:	10800217 	ldw	r2,8(r2)
 800c7e8:	d0e6b317 	ldw	r3,-25908(gp)
 800c7ec:	18801d36 	bltu	r3,r2,800c864 <alt_tick+0xd8>
 800c7f0:	e0bffd17 	ldw	r2,-12(fp)
 800c7f4:	10800403 	ldbu	r2,16(r2)
 800c7f8:	10803fcc 	andi	r2,r2,255
 800c7fc:	1000191e 	bne	r2,zero,800c864 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 800c800:	e0bffd17 	ldw	r2,-12(fp)
 800c804:	10c00317 	ldw	r3,12(r2)
 800c808:	e0bffd17 	ldw	r2,-12(fp)
 800c80c:	10800517 	ldw	r2,20(r2)
 800c810:	1009883a 	mov	r4,r2
 800c814:	183ee83a 	callr	r3
 800c818:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 800c81c:	e0bfff17 	ldw	r2,-4(fp)
 800c820:	1000031e 	bne	r2,zero,800c830 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 800c824:	e13ffd17 	ldw	r4,-12(fp)
 800c828:	800c6f40 	call	800c6f4 <alt_alarm_stop>
 800c82c:	00000d06 	br	800c864 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 800c830:	e0bffd17 	ldw	r2,-12(fp)
 800c834:	10c00217 	ldw	r3,8(r2)
 800c838:	e0bfff17 	ldw	r2,-4(fp)
 800c83c:	1887883a 	add	r3,r3,r2
 800c840:	e0bffd17 	ldw	r2,-12(fp)
 800c844:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 800c848:	e0bffd17 	ldw	r2,-12(fp)
 800c84c:	10c00217 	ldw	r3,8(r2)
 800c850:	d0a6b317 	ldw	r2,-25908(gp)
 800c854:	1880032e 	bgeu	r3,r2,800c864 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 800c858:	e0bffd17 	ldw	r2,-12(fp)
 800c85c:	00c00044 	movi	r3,1
 800c860:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 800c864:	e0bffe17 	ldw	r2,-8(fp)
 800c868:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 800c86c:	e0fffd17 	ldw	r3,-12(fp)
 800c870:	d0a00d04 	addi	r2,gp,-32716
 800c874:	18bfcf1e 	bne	r3,r2,800c7b4 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 800c878:	0001883a 	nop
}
 800c87c:	e037883a 	mov	sp,fp
 800c880:	dfc00117 	ldw	ra,4(sp)
 800c884:	df000017 	ldw	fp,0(sp)
 800c888:	dec00204 	addi	sp,sp,8
 800c88c:	f800283a 	ret

0800c890 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 800c890:	deffff04 	addi	sp,sp,-4
 800c894:	df000015 	stw	fp,0(sp)
 800c898:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 800c89c:	000170fa 	wrctl	ienable,zero
}
 800c8a0:	e037883a 	mov	sp,fp
 800c8a4:	df000017 	ldw	fp,0(sp)
 800c8a8:	dec00104 	addi	sp,sp,4
 800c8ac:	f800283a 	ret

0800c8b0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 800c8b0:	defffa04 	addi	sp,sp,-24
 800c8b4:	dfc00515 	stw	ra,20(sp)
 800c8b8:	df000415 	stw	fp,16(sp)
 800c8bc:	df000404 	addi	fp,sp,16
 800c8c0:	e13ffe15 	stw	r4,-8(fp)
 800c8c4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 800c8c8:	e0bfff17 	ldw	r2,-4(fp)
 800c8cc:	10800017 	ldw	r2,0(r2)
 800c8d0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 800c8d4:	e13ffe17 	ldw	r4,-8(fp)
 800c8d8:	8000f540 	call	8000f54 <strlen>
 800c8dc:	10800044 	addi	r2,r2,1
 800c8e0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 800c8e4:	00000d06 	br	800c91c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 800c8e8:	e0bffc17 	ldw	r2,-16(fp)
 800c8ec:	10c00217 	ldw	r3,8(r2)
 800c8f0:	e0bffd17 	ldw	r2,-12(fp)
 800c8f4:	1809883a 	mov	r4,r3
 800c8f8:	e17ffe17 	ldw	r5,-8(fp)
 800c8fc:	100d883a 	mov	r6,r2
 800c900:	800cb3c0 	call	800cb3c <memcmp>
 800c904:	1000021e 	bne	r2,zero,800c910 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 800c908:	e0bffc17 	ldw	r2,-16(fp)
 800c90c:	00000706 	br	800c92c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 800c910:	e0bffc17 	ldw	r2,-16(fp)
 800c914:	10800017 	ldw	r2,0(r2)
 800c918:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 800c91c:	e0fffc17 	ldw	r3,-16(fp)
 800c920:	e0bfff17 	ldw	r2,-4(fp)
 800c924:	18bff01e 	bne	r3,r2,800c8e8 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 800c928:	0005883a 	mov	r2,zero
}
 800c92c:	e037883a 	mov	sp,fp
 800c930:	dfc00117 	ldw	ra,4(sp)
 800c934:	df000017 	ldw	fp,0(sp)
 800c938:	dec00204 	addi	sp,sp,8
 800c93c:	f800283a 	ret

0800c940 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 800c940:	defffb04 	addi	sp,sp,-20
 800c944:	dfc00415 	stw	ra,16(sp)
 800c948:	df000315 	stw	fp,12(sp)
 800c94c:	df000304 	addi	fp,sp,12
 800c950:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 800c954:	00820074 	movhi	r2,2049
 800c958:	10bc1c04 	addi	r2,r2,-3984
 800c95c:	10800017 	ldw	r2,0(r2)
 800c960:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 800c964:	00003106 	br	800ca2c <alt_find_file+0xec>
  {
    len = strlen(next->name);
 800c968:	e0bffd17 	ldw	r2,-12(fp)
 800c96c:	10800217 	ldw	r2,8(r2)
 800c970:	1009883a 	mov	r4,r2
 800c974:	8000f540 	call	8000f54 <strlen>
 800c978:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 800c97c:	e0bffd17 	ldw	r2,-12(fp)
 800c980:	10c00217 	ldw	r3,8(r2)
 800c984:	e0bffe17 	ldw	r2,-8(fp)
 800c988:	10bfffc4 	addi	r2,r2,-1
 800c98c:	1885883a 	add	r2,r3,r2
 800c990:	10800003 	ldbu	r2,0(r2)
 800c994:	10803fcc 	andi	r2,r2,255
 800c998:	1080201c 	xori	r2,r2,128
 800c99c:	10bfe004 	addi	r2,r2,-128
 800c9a0:	10800bd8 	cmpnei	r2,r2,47
 800c9a4:	1000031e 	bne	r2,zero,800c9b4 <alt_find_file+0x74>
    {
      len -= 1;
 800c9a8:	e0bffe17 	ldw	r2,-8(fp)
 800c9ac:	10bfffc4 	addi	r2,r2,-1
 800c9b0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 800c9b4:	e0bffe17 	ldw	r2,-8(fp)
 800c9b8:	e0ffff17 	ldw	r3,-4(fp)
 800c9bc:	1885883a 	add	r2,r3,r2
 800c9c0:	10800003 	ldbu	r2,0(r2)
 800c9c4:	10803fcc 	andi	r2,r2,255
 800c9c8:	1080201c 	xori	r2,r2,128
 800c9cc:	10bfe004 	addi	r2,r2,-128
 800c9d0:	10800be0 	cmpeqi	r2,r2,47
 800c9d4:	1000081e 	bne	r2,zero,800c9f8 <alt_find_file+0xb8>
 800c9d8:	e0bffe17 	ldw	r2,-8(fp)
 800c9dc:	e0ffff17 	ldw	r3,-4(fp)
 800c9e0:	1885883a 	add	r2,r3,r2
 800c9e4:	10800003 	ldbu	r2,0(r2)
 800c9e8:	10803fcc 	andi	r2,r2,255
 800c9ec:	1080201c 	xori	r2,r2,128
 800c9f0:	10bfe004 	addi	r2,r2,-128
 800c9f4:	10000a1e 	bne	r2,zero,800ca20 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 800c9f8:	e0bffd17 	ldw	r2,-12(fp)
 800c9fc:	10c00217 	ldw	r3,8(r2)
 800ca00:	e0bffe17 	ldw	r2,-8(fp)
 800ca04:	1809883a 	mov	r4,r3
 800ca08:	e17fff17 	ldw	r5,-4(fp)
 800ca0c:	100d883a 	mov	r6,r2
 800ca10:	800cb3c0 	call	800cb3c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 800ca14:	1000021e 	bne	r2,zero,800ca20 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 800ca18:	e0bffd17 	ldw	r2,-12(fp)
 800ca1c:	00000806 	br	800ca40 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 800ca20:	e0bffd17 	ldw	r2,-12(fp)
 800ca24:	10800017 	ldw	r2,0(r2)
 800ca28:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 800ca2c:	e0fffd17 	ldw	r3,-12(fp)
 800ca30:	00820074 	movhi	r2,2049
 800ca34:	10bc1c04 	addi	r2,r2,-3984
 800ca38:	18bfcb1e 	bne	r3,r2,800c968 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 800ca3c:	0005883a 	mov	r2,zero
}
 800ca40:	e037883a 	mov	sp,fp
 800ca44:	dfc00117 	ldw	ra,4(sp)
 800ca48:	df000017 	ldw	fp,0(sp)
 800ca4c:	dec00204 	addi	sp,sp,8
 800ca50:	f800283a 	ret

0800ca54 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 800ca54:	defffa04 	addi	sp,sp,-24
 800ca58:	dfc00515 	stw	ra,20(sp)
 800ca5c:	df000415 	stw	fp,16(sp)
 800ca60:	dc000315 	stw	r16,12(sp)
 800ca64:	df000304 	addi	fp,sp,12
 800ca68:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 800ca6c:	00bffa04 	movi	r2,-24
 800ca70:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 800ca74:	e03ffd15 	stw	zero,-12(fp)
 800ca78:	00002106 	br	800cb00 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
 800ca7c:	04020074 	movhi	r16,2049
 800ca80:	84379f04 	addi	r16,r16,-8580
 800ca84:	e0bffd17 	ldw	r2,-12(fp)
 800ca88:	1009883a 	mov	r4,r2
 800ca8c:	01400304 	movi	r5,12
 800ca90:	8000df40 	call	8000df4 <__mulsi3>
 800ca94:	8085883a 	add	r2,r16,r2
 800ca98:	10800017 	ldw	r2,0(r2)
 800ca9c:	1000151e 	bne	r2,zero,800caf4 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
 800caa0:	04020074 	movhi	r16,2049
 800caa4:	84379f04 	addi	r16,r16,-8580
 800caa8:	e0bffd17 	ldw	r2,-12(fp)
 800caac:	1009883a 	mov	r4,r2
 800cab0:	01400304 	movi	r5,12
 800cab4:	8000df40 	call	8000df4 <__mulsi3>
 800cab8:	8085883a 	add	r2,r16,r2
 800cabc:	e0ffff17 	ldw	r3,-4(fp)
 800cac0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 800cac4:	00820074 	movhi	r2,2049
 800cac8:	10bc2004 	addi	r2,r2,-3968
 800cacc:	10c00017 	ldw	r3,0(r2)
 800cad0:	e0bffd17 	ldw	r2,-12(fp)
 800cad4:	1880040e 	bge	r3,r2,800cae8 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
 800cad8:	00820074 	movhi	r2,2049
 800cadc:	10bc2004 	addi	r2,r2,-3968
 800cae0:	e0fffd17 	ldw	r3,-12(fp)
 800cae4:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 800cae8:	e0bffd17 	ldw	r2,-12(fp)
 800caec:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 800caf0:	00000606 	br	800cb0c <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 800caf4:	e0bffd17 	ldw	r2,-12(fp)
 800caf8:	10800044 	addi	r2,r2,1
 800cafc:	e0bffd15 	stw	r2,-12(fp)
 800cb00:	e0bffd17 	ldw	r2,-12(fp)
 800cb04:	10800810 	cmplti	r2,r2,32
 800cb08:	103fdc1e 	bne	r2,zero,800ca7c <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 800cb0c:	e0bffe17 	ldw	r2,-8(fp)
}
 800cb10:	e037883a 	mov	sp,fp
 800cb14:	dfc00217 	ldw	ra,8(sp)
 800cb18:	df000117 	ldw	fp,4(sp)
 800cb1c:	dc000017 	ldw	r16,0(sp)
 800cb20:	dec00304 	addi	sp,sp,12
 800cb24:	f800283a 	ret

0800cb28 <atexit>:
 800cb28:	200b883a 	mov	r5,r4
 800cb2c:	000d883a 	mov	r6,zero
 800cb30:	0009883a 	mov	r4,zero
 800cb34:	000f883a 	mov	r7,zero
 800cb38:	800cbb81 	jmpi	800cbb8 <__register_exitproc>

0800cb3c <memcmp>:
 800cb3c:	01c000c4 	movi	r7,3
 800cb40:	3980192e 	bgeu	r7,r6,800cba8 <memcmp+0x6c>
 800cb44:	2904b03a 	or	r2,r5,r4
 800cb48:	11c4703a 	and	r2,r2,r7
 800cb4c:	10000f26 	beq	r2,zero,800cb8c <memcmp+0x50>
 800cb50:	20c00003 	ldbu	r3,0(r4)
 800cb54:	28800003 	ldbu	r2,0(r5)
 800cb58:	1880151e 	bne	r3,r2,800cbb0 <memcmp+0x74>
 800cb5c:	31bfff84 	addi	r6,r6,-2
 800cb60:	01ffffc4 	movi	r7,-1
 800cb64:	00000406 	br	800cb78 <memcmp+0x3c>
 800cb68:	20c00003 	ldbu	r3,0(r4)
 800cb6c:	28800003 	ldbu	r2,0(r5)
 800cb70:	31bfffc4 	addi	r6,r6,-1
 800cb74:	18800e1e 	bne	r3,r2,800cbb0 <memcmp+0x74>
 800cb78:	21000044 	addi	r4,r4,1
 800cb7c:	29400044 	addi	r5,r5,1
 800cb80:	31fff91e 	bne	r6,r7,800cb68 <memcmp+0x2c>
 800cb84:	0005883a 	mov	r2,zero
 800cb88:	f800283a 	ret
 800cb8c:	20c00017 	ldw	r3,0(r4)
 800cb90:	28800017 	ldw	r2,0(r5)
 800cb94:	1880041e 	bne	r3,r2,800cba8 <memcmp+0x6c>
 800cb98:	31bfff04 	addi	r6,r6,-4
 800cb9c:	21000104 	addi	r4,r4,4
 800cba0:	29400104 	addi	r5,r5,4
 800cba4:	39bff936 	bltu	r7,r6,800cb8c <memcmp+0x50>
 800cba8:	303fe91e 	bne	r6,zero,800cb50 <memcmp+0x14>
 800cbac:	003ff506 	br	800cb84 <memcmp+0x48>
 800cbb0:	1885c83a 	sub	r2,r3,r2
 800cbb4:	f800283a 	ret

0800cbb8 <__register_exitproc>:
 800cbb8:	defffa04 	addi	sp,sp,-24
 800cbbc:	00820074 	movhi	r2,2049
 800cbc0:	10bc1704 	addi	r2,r2,-4004
 800cbc4:	dc000315 	stw	r16,12(sp)
 800cbc8:	14000017 	ldw	r16,0(r2)
 800cbcc:	dc400415 	stw	r17,16(sp)
 800cbd0:	dfc00515 	stw	ra,20(sp)
 800cbd4:	80805217 	ldw	r2,328(r16)
 800cbd8:	2023883a 	mov	r17,r4
 800cbdc:	10003e26 	beq	r2,zero,800ccd8 <__register_exitproc+0x120>
 800cbe0:	10c00117 	ldw	r3,4(r2)
 800cbe4:	020007c4 	movi	r8,31
 800cbe8:	40c0180e 	bge	r8,r3,800cc4c <__register_exitproc+0x94>
 800cbec:	00800034 	movhi	r2,0
 800cbf0:	10800004 	addi	r2,r2,0
 800cbf4:	1000061e 	bne	r2,zero,800cc10 <__register_exitproc+0x58>
 800cbf8:	00bfffc4 	movi	r2,-1
 800cbfc:	dfc00517 	ldw	ra,20(sp)
 800cc00:	dc400417 	ldw	r17,16(sp)
 800cc04:	dc000317 	ldw	r16,12(sp)
 800cc08:	dec00604 	addi	sp,sp,24
 800cc0c:	f800283a 	ret
 800cc10:	01006404 	movi	r4,400
 800cc14:	d9400015 	stw	r5,0(sp)
 800cc18:	d9800115 	stw	r6,4(sp)
 800cc1c:	d9c00215 	stw	r7,8(sp)
 800cc20:	00000000 	call	0 <__alt_mem_sdram-0x8000000>
 800cc24:	d9400017 	ldw	r5,0(sp)
 800cc28:	d9800117 	ldw	r6,4(sp)
 800cc2c:	d9c00217 	ldw	r7,8(sp)
 800cc30:	103ff126 	beq	r2,zero,800cbf8 <__register_exitproc+0x40>
 800cc34:	80c05217 	ldw	r3,328(r16)
 800cc38:	10000115 	stw	zero,4(r2)
 800cc3c:	10c00015 	stw	r3,0(r2)
 800cc40:	80805215 	stw	r2,328(r16)
 800cc44:	10006215 	stw	zero,392(r2)
 800cc48:	10006315 	stw	zero,396(r2)
 800cc4c:	10c00117 	ldw	r3,4(r2)
 800cc50:	88000d1e 	bne	r17,zero,800cc88 <__register_exitproc+0xd0>
 800cc54:	19000084 	addi	r4,r3,2
 800cc58:	2109883a 	add	r4,r4,r4
 800cc5c:	18c00044 	addi	r3,r3,1
 800cc60:	2109883a 	add	r4,r4,r4
 800cc64:	1109883a 	add	r4,r2,r4
 800cc68:	10c00115 	stw	r3,4(r2)
 800cc6c:	0005883a 	mov	r2,zero
 800cc70:	21400015 	stw	r5,0(r4)
 800cc74:	dfc00517 	ldw	ra,20(sp)
 800cc78:	dc400417 	ldw	r17,16(sp)
 800cc7c:	dc000317 	ldw	r16,12(sp)
 800cc80:	dec00604 	addi	sp,sp,24
 800cc84:	f800283a 	ret
 800cc88:	02400044 	movi	r9,1
 800cc8c:	12806217 	ldw	r10,392(r2)
 800cc90:	48d2983a 	sll	r9,r9,r3
 800cc94:	19000804 	addi	r4,r3,32
 800cc98:	18d1883a 	add	r8,r3,r3
 800cc9c:	2109883a 	add	r4,r4,r4
 800cca0:	4211883a 	add	r8,r8,r8
 800cca4:	2109883a 	add	r4,r4,r4
 800cca8:	1109883a 	add	r4,r2,r4
 800ccac:	1211883a 	add	r8,r2,r8
 800ccb0:	5254b03a 	or	r10,r10,r9
 800ccb4:	21c02215 	stw	r7,136(r4)
 800ccb8:	41802215 	stw	r6,136(r8)
 800ccbc:	12806215 	stw	r10,392(r2)
 800ccc0:	01000084 	movi	r4,2
 800ccc4:	893fe31e 	bne	r17,r4,800cc54 <__register_exitproc+0x9c>
 800ccc8:	11006317 	ldw	r4,396(r2)
 800cccc:	2252b03a 	or	r9,r4,r9
 800ccd0:	12406315 	stw	r9,396(r2)
 800ccd4:	003fdf06 	br	800cc54 <__register_exitproc+0x9c>
 800ccd8:	00820074 	movhi	r2,2049
 800ccdc:	108c1504 	addi	r2,r2,12372
 800cce0:	80805215 	stw	r2,328(r16)
 800cce4:	003fbe06 	br	800cbe0 <__register_exitproc+0x28>
